[00:00] <masak> heh, this is going to take some time to clean up. even for a masakbot.

[00:00] <diakopter> (which did you submit, "first" or "second")

[00:00] <masak> diakopter: both, as one.

[00:00] <diakopter> oh

[00:00] <masak> diakopter: thought that's why you presented them as a pair.

[00:00] <masak> diakopter: they're kinda related.

[00:01] <diakopter> rakudo: my (::eval $x); say $x  # not sure this a bug.  I think that's a Parrot error.

[00:01] <p6eval> rakudo a215ee: OUTPUT«Lexical 'eval' not found␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[00:01] <masak> might be a TODO.

[00:02] <diakopter> rakudo: say my ::say (say $z)  # probably a dupe

[00:02] <p6eval> rakudo a215ee: OUTPUT«Null PMC access in type()␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[00:03] <diakopter> rakudo: my ($x = 1; $z = $x):my say $x  # jnthn had a laugh about this one

[00:03] <p6eval> rakudo a215ee: OUTPUT«Method 'panic' not found for invocant of class 'Regex;Match'␤current instr.: 'perl6;Perl6;Actions;trait' pc 188197 (src/gen/perl6-actions.pir:7201)␤»

[00:03] * masak submits rakudobug

[00:03] <masak> whaaaa... :)

[00:03] * masak submits and laughs, too

[00:04] <masak> diakopter: how do you find all these?

[00:04] <jnthn> std: my ($x = 1; $z = $x):my say $x

[00:04] <p6eval> std 29857: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row at /tmp/pkJ26itG21 line 1:␤------> [32mmy ($x = 1; $z = $x):my [33m⏏[31msay $x[0m␤    expecting any of:␤ bracketed infix␤  infix or meta-infix␤      statement modifier loop␤  trait␤FAILED 00:01 108m␤»

[00:04] <jnthn> heh

[00:04] <masak> usually when someone finds that many bugs, they're doing something cool behind the scenes.

[00:05] <lichtkind> masak: i asked myself, i really cant hack on november, kephra an ra are more pressing

[00:06] <masak> lichtkind: that only half made sense.

[00:06] <masak> Ra, the egyptian god?

[00:06] <jnthn> > my %h = a => 4, b => 2; say %h{'a', 'b'}

[00:06] <jnthn> 42

[00:06] <jnthn> \o/

[00:06] <diakopter> masak: first it starts with having a curiousity about the implementation method of some feature.  Then I get this model in my head of how it might be implemented.  Then I try to find the edge/corners.

[00:06] <masak> jnthn++

[00:06] <masak> diakopter: I think I love you.

[00:06] <lichtkind> *romance*

[00:07] <masak> seriously, that's what I do too. all the time.

[00:07] <diakopter> masak: usually my initial model is way wrong about how it's implemented.

[00:07] <lichtkind> masak: yes i like egyptian names but ra stands for rebol army, i thinking to start a rebol compiler for parrot

[00:08] <masak> lichtkind: wow, wicked!

[00:10] <diakopter> std: {nom,nom,nom}.WHAT.say

[00:10] <p6eval> std 29857: OUTPUT«Undeclared routine:␤   'nom' used at line 1,1,1␤ok 00:01 106m␤»

[00:10] <diakopter> rakudo: {nom,nom,nom}.WHAT.say

[00:10] <p6eval> rakudo a215ee: OUTPUT«Block()␤»

[00:11] <diakopter> I mean, seems to me it should warn

[00:11] <jnthn> diakopter: Just NYI yet, that's all.

[00:12] <diakopter> masak: you saw the failed assertion?

[00:12] <masak> not sure I did.

[00:12] <jnthn> .oO( useless double use of yet )

[00:12] <masak> well, it does ring a bell, but I'm not sure why...

[00:12] <diakopter> rakudo: .=()

[00:12] <p6eval> rakudo 852213: OUTPUT«src/hash.c:144: failed assertion 's'␤Backtrace - Obtained 17 stack frames (max trace depth is 32).␤/home/p6eval//p1/lib/libparrot.so.2.1.0 [0x2b5d22928d03]␤/home/p6eval//p1/lib/libparrot.so.2.1.0(Parrot_confess+0x87) [0x2b5d22928e37]␤/home/p6eval//p1/lib/libparrot.so.2.1.0

[00:12] <p6eval> ..[0x2b5d2…

[00:13] <masak> right.

[00:13] * masak submits rakudobug

[00:13] <diakopter> I emailed parrot-dev a week ago; no reply

[00:14] <masak> oh yeah, I submitted that one a week ago too.

[00:14] <diakopter> rakudo: [[]].perl.say; [[]].''().perl.say  # I don't know why there's an empty method here...

[00:14] <p6eval> rakudo 852213: OUTPUT«[[]]␤[]␤»

[00:14] <masak> diakopter: I don't think parrot-dev should be approached with Perl 6 code. just a feeling. they tend to throw themselves on PIR code, though.

[00:15] * masak submits rakudobug

[00:15] <lichtkind> masak: chromatic said it should be easy but i have no clue about HLL tools and currently just learning the synax :)

[00:16] <diakopter> Far be it, far be it from me, that I could find the generated PIR, let alone paste it to parrot-dev

[00:16] <masak> lichtkind: I wish you good luck, sir.

[00:16] <lichtkind> thanks

[00:17] *** lue joined
[00:17] <lichtkind> masak: there are some cool ideas i would like to incorporate into perl

[00:20] <colomon> our Item multi reduce ( Code $expression ;; *@values )    # why the semis?

[00:20] <masak> battery out; gotta go.

[00:20] <masak> in total, that was six rakudobugs. diakopter++

[00:21] <diakopter> eehw

[00:21] <lue> nooo!

[00:21] <masak> colomon: so that *@values don't participate in dispatch arbitration?

[00:21] <masak> g'nite.

[00:22] <colomon> huh.

[00:24] <diakopter> rakudo: ::eval..::eval

[00:24] <p6eval> rakudo 852213: OUTPUT«Null PMC access in can()␤current instr.: 'parrot;P6protoobject;ACCEPTS' pc -1 ((unknown file):-1)␤»

[00:26] *** [particle] joined
[00:29] *** rgrau joined
[00:31] <snarkyboojum> rakudo: my @test[2]; @test[4] = 'test';

[00:31] <p6eval> rakudo 852213:  ( no output )

[00:34] <jnthn> My hash slicing patch has some issues, so I'll finish it up and get it pushed tomorrow, when I'm less tired.

[00:36] *** yinyin joined
[00:48] <lue> hello?

[00:56] <bkeeler_> Time to go home, laters...

[00:59] * jnthn -> sleep

[01:00] <lue> Aw, everyone's leaving. Just when I got here :(

[01:05] <pmichaud> I'm still around :-)

[01:09] <lichtkind> pmichaud: thanks for http://www.perlfoundation.org/perl6/index.cgi?patrick_michaud

[01:10] <pmichaud> lichtkind: you're welcome :)

[01:11] <[particle]> rakudo: for (1..Inf) -> $x { say $x }

[01:11] <p6eval> rakudo 852213:  ( no output )

[01:11] <[particle]> of course that won't work here...

[01:11] <[particle]> duh, buffered output

[01:14] <lue> darn the car wash :)

[01:19] <snarkyboojum> my @data = 1, 5, 6; say @data[*-2]; # this will be cool :)

[01:21] <lue> you know what's cooler? rakudo:

[01:21] <snarkyboojum> how much of Perl 6 did pugs implement, and how would rakudo compare now?

[01:21] <colomon> rakudo: (1..Inf).map({ .say }).batch(10)

[01:21] <p6eval> rakudo 852213: OUTPUT«1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤»

[01:21] <m-locks> rakudo:  my @data = 1, 5, 6; say @data[*-2]

[01:21] <snarkyboojum> (probably an oft asked question)

[01:21] <p6eval> rakudo 852213: OUTPUT«Method 'Num' not found for invocant of class 'Block'␤current instr.: 'perl6;Mu;' pc -1 ((unknown file):-1)␤»

[01:21] <lue> tough to say (I certainly don't know)

[01:22] <snarkyboojum> esp given that the spec has since changed as has the test suite etc

[01:22] <snarkyboojum> but was just wondering if there was a ballpark :)

[01:22] <snarkyboojum> could run pugs against the existing spec test and then rakudo and compare numbers praps :)

[01:23] <snarkyboojum> std: my @data = 1, 4; say @data[0..12]:v;

[01:24] <p6eval> std 29857: OUTPUT«ok 00:01 109m␤»

[01:24] <colomon> rakudo: say "a\c[COMBINING DIAERESIS]"

[01:24] <p6eval> rakudo 852213: OUTPUT«a􏿽xCC􏿽x88􏿽xE2􏿽x90􏿽xA4»

[01:24] <snarkyboojum> rakudo: my @data = 1, 4; say @data[0..12]:v;

[01:24] <p6eval> rakudo 852213: OUTPUT«Confused at line 11, near "say @data["␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[01:25] <snarkyboojum> the kind of stuff you'll be able to do with arrays in perl6 is just orgasmic :)

[01:25] <colomon> rakudo: say (1...10)

[01:25] <p6eval> rakudo 852213: OUTPUT«12345678910␤»

[01:25] <colomon> rakudo: say (1...10).Str

[01:25] <p6eval> rakudo 852213: OUTPUT«1 2 3 4 5 6 7 8 9 10␤»

[01:25] <colomon> rakudo: say ~(1...10)

[01:25] <p6eval> rakudo 852213: OUTPUT«1 2 3 4 5 6 7 8 9 10␤»

[01:25] <colomon> Huh.

[01:26] <snarkyboojum> does that do a concat on each element in the range or something?

[01:26] <snarkyboojum> rakudo: (1...10).WHAT

[01:26] <p6eval> rakudo 852213:  ( no output )

[01:26] <colomon> snarkyboojum: It's not a Range, it's a series, which is just a "list" (ie an iterator).

[01:26] <colomon> rakudo: say (1...10).WHAT

[01:26] <p6eval> rakudo 852213: OUTPUT«GatherIterator()␤»

[01:26] <snarkyboojum> that's it :)

[01:27] * snarkyboojum is still very much learning

[01:27] <colomon> So ~(1...10) is the stringification of that Iterator.

[01:27] <colomon> I'm trying to sort out a test issue, and that was my first try to see what was going on.  

[01:28] <colomon> rakudo: say "".comb

[01:28] <snarkyboojum> oic .. the ~ is stringification?

[01:28] <p6eval> rakudo 852213: OUTPUT«␤»

[01:28] <colomon> snarkyboojum: yes.

[01:28] <snarkyboojum> colomon: ok cheers

[01:28] * snarkyboojum goes to do more reading

[01:28] <colomon> rakudo: say ~("".comb)

[01:28] <p6eval> rakudo 852213: OUTPUT«␤»

[01:28] <colomon> rakudo: say ("".comb).Str

[01:28] <p6eval> rakudo 852213: OUTPUT«␤»

[01:30] <colomon> rakudo: my $a = "".comb; say "$a"

[01:30] <p6eval> rakudo 852213: OUTPUT«␤»

[01:30] <colomon> rakudo: my $a = "".comb; say "here is $a";

[01:30] <p6eval> rakudo 852213: OUTPUT«here is ␤»

[01:30] <snarkyboojum> S09 talks about PDLs .. but it's not defined anywhere.. what is a PDL?

[01:31] <snarkyboojum> pdl.perl.org?

[01:31] <colomon> rakudo: say "".comb eq ()

[01:31] <p6eval> rakudo 852213: OUTPUT«0␤»

[01:32] * snarkyboojum thinks he just answered his own question

[01:32] <colomon> snarkyboojum: that would be my guess.

[01:32] <snarkyboojum> pdl looks pretty darn hardcore

[01:32] <snarkyboojum> v. cool

[01:32] <colomon> I think I saw someone today suggesting that stuff was very under-specified in p6.  I'm pretty sure none of it works yet in Rakudo.

[01:33] * snarkyboojum is impressed that a perl 6 spec is talking about tensor mathematics

[01:33] <snarkyboojum> :)

[01:36] <colomon> rakudo: use Test; is "".comb, (), 'comb on empty string';

[01:36] <p6eval> rakudo 852213: OUTPUT«"load_bytecode" couldn't find file 'Test.pir'␤current instr.: '!use' pc 357532 (src/gen/core.pir:51912)␤»

[01:39] <colomon> not ok 1 - comb on empty string

[01:39] <colomon> #      got: GatherIterator.new()

[01:39] <colomon> # expected: ()

[01:39] *** kborer joined
[01:39] <colomon> pmichaud: any notions?  This is the test results I'm getting from the code a few lines up...

[01:39] <pmichaud> looks to me like an iterator is being returned as a scalar

[01:39] <pmichaud> we have that issue in a few places still.

[01:40] <colomon> ah, so sort of the flip side of the pair issue from earlier.

[01:40] <pmichaud> right

[01:40] <pmichaud> we still need some work on flattening semantics in various places

[01:40] <pmichaud> where is comb() defined?

[01:41] <colomon> any-list.pm, I think.

[01:41] <colomon> er, any-str.pm

[01:41] <colomon> line 22

[01:43] <pmichaud> looking

[01:43] <pugssvn> r29858 | Util++ | [t/spec] Typo 

[01:43] <ewilhelm> pugs: for 1..3 -> $i, $j { say "$i $j" }

[01:43] <p6eval> pugs: OUTPUT«1 2␤3 ␤»

[01:44] <ewilhelm> rakudo: for 1..3 -> $i, $j { say "$i $j" }

[01:44] <p6eval> rakudo 852213: OUTPUT«1 2␤StopIteration␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[01:44] <ewilhelm> this is going to be a fun talk :-D

[01:46] <snarkyboojum> noticed a little typo in S09-data.pod at line 521, "These last three" should be "These last two" (if I'm not mistaken)

[01:47] <lue> if ever you need error messages (re)written in Rakudo, just ask me! I'd have fun with it :)

[01:47] <colomon> afk # rocking

[01:48] * snarkyboojum wishes he could add more value than noticing small typos :)

[01:48] <lichtkind> pmichaud: found something?

[01:48] <lichtkind> colomon: yre you a dev?

[01:50] <lue> noms ready. See you later.

[01:50] <snarkyboojum> see ya lue

[01:57] <pmichaud> colomon: oh yes, of course!

[01:57] * pmichaud figures it out, at least partially

[01:58] <pmichaud> when we call   is "".comb(), (), 'comb on an empty string'

[01:58] <pmichaud> the result of .comb() is a GatherIterator, and it's getting bound to a scalar inside of is()

[01:59] *** lue left
[01:59] <pmichaud> we probably need the result to be a List with a GatherIterator

[02:01] <pmichaud> either that or a GatherIterator in item context needs to become a Seq

[02:08] <snarkyboojum> rakudo: say "Test".comb(/./, 1)

[02:08] <p6eval> rakudo 852213: OUTPUT«T␤»

[02:08] <snarkyboojum> rakudo: say "Test".comb(1)

[02:08] <p6eval> rakudo 852213: OUTPUT«No applicable candidates found to dispatch to for 'comb'␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[02:11] *** agentzh joined
[02:21] <pmichaud> so, if I have:

[02:21] <pmichaud>     my $a = $*IN.lines();

[02:21] <pmichaud> what should $a end up being?

[02:23] <pmichaud> and similarly, if I have:

[02:23] <pmichaud>     my $b = "Test".comb;

[02:23] <pmichaud> what should $b end up being?

[02:27] <sjohnson> i got paid in beer and pizza to help someone with perl today!

[02:27] <sjohnson> oh joyous day

[02:28] <lichtkind> good night

[02:29] *** eternaleye joined
[02:32] <kborer> std: grep.say

[02:32] <p6eval> std 29858: OUTPUT«ok 00:01 105m␤»

[02:32] <kborer> rakudo: grep.say

[02:32] <p6eval> rakudo 852213: OUTPUT«Not enough positional parameters passed; got 0 but expected 2␤current instr.: 'grep' pc 233387 (src/gen/core.pir:5326)␤»

[02:34] <kborer> std: say.say

[02:34] <p6eval> std 29858: OUTPUT«Potential difficulties:␤  Unsupported use of bare 'say'; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument at /tmp/8pUrqGweNR line 1:␤------> [32msay[33m⏏[31m.say[0m␤ok 00:01 105m␤»

[02:34] <kborer> rakudo: say.say

[02:34] <p6eval> rakudo 852213: OUTPUT«␤1␤»

[02:37] *** rgrau left
[02:38] <sjohnson> M--- 

[02:38] <sjohnson> oops

[02:39] <kborer> std: say ....WHAT

[02:39] <p6eval> std 29858: OUTPUT«ok 00:01 105m␤»

[02:39] <kborer> rakudo: say ....WHAT

[02:39] <p6eval> rakudo 852213: OUTPUT«No exception handler and no message␤current instr.: '&fail' pc 16557 (src/builtins/Junction.pir:364)␤»

[02:46] *** SmokeMachine joined
[02:47] *** buubot left
[02:48] *** buubot joined
[02:49] <arlinius> rakudo: .say

[02:49] <p6eval> rakudo 852213: OUTPUT«Mu()␤»

[02:49] <arlinius> rakudo: .say.say

[02:49] <p6eval> rakudo 852213: OUTPUT«Mu()␤1␤»

[02:49] <arlinius> rakudo: .say.say.say

[02:49] <colomon> pmichaud:  sorry for disappearing.  son is refusing to sleep tonight, I finally dragged my laptop into the nursery

[02:49] <p6eval> rakudo 852213: OUTPUT«Mu()␤1␤1␤»

[02:50] <arlinius> rakudo: .say.say.say.die

[02:50] <p6eval> rakudo 852213: OUTPUT«Mu()␤1␤1␤Method 'die' not found for invocant of class 'Bool'␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[02:51] <arlinius> rakudo: my $foo = *.say

[02:51] <p6eval> rakudo 852213:  ( no output )

[02:51] <arlinius> rakudo: (my $foo = *.say).say

[02:51] <p6eval> rakudo 852213: OUTPUT«!whatever_dispatch_helper␤»

[02:52] <arlinius> rakudo: (my $foo = *.say).(312412421432)

[02:52] <p6eval> rakudo 852213: OUTPUT«312412421432␤»

[02:52] <arlinius> rakudo: (my $foo = *.say).(my $foo = *.say)

[02:52] <p6eval> rakudo 852213: OUTPUT«Redeclaration of symbol $foo at line 11, near " = *.say)"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[02:52] <arlinius> rakudo: (my $foo = *.say).(my $bar = *.say)

[02:52] <p6eval> rakudo 852213: OUTPUT«Confused at line 11, near "(my $foo ="␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[02:52] <arlinius> hrm

[02:53] <arlinius> rakudo: (my $foo = *.say).(my $bar := *.say)

[02:53] <p6eval> rakudo 852213: OUTPUT«:= binding of variables not yet implemented␤current instr.: '&die' pc 16459 (src/builtins/Junction.pir:317)␤»

[02:54] <arlinius> rakudo: (my $foo = *.say).((my $bar := *.say))

[02:54] <p6eval> rakudo 852213: OUTPUT«:= binding of variables not yet implemented␤current instr.: '&die' pc 16459 (src/builtins/Junction.pir:317)␤»

[03:08] *** supernovus joined
[03:10] <diakopter> rakudo: /d/(44)  # masakbot

[03:10] <p6eval> rakudo 852213: OUTPUT«Method '!cursor_start' not found for invocant of class 'Integer'␤current instr.: '_block46' pc 298 (EVAL_1:126)␤»

[03:10] <supernovus> Well, in addition to porting my Perl 5 CMS to Perl 6, I'm also going to try my hand at implementing a SCGI library for Perl 6. I looked at the FastCGI specification, and am not ready to try to implement that (yet). But SCGI looks pretty straightforward. I'll post it to github when I have something that works.

[03:12] <diakopter> rakudo: say ~/' '/

[03:12] <p6eval> rakudo 852213: OUTPUT«_block46␤»

[03:14] <diakopter> rakudo: ...................say

[03:14] <p6eval> rakudo 852213: OUTPUT«No exception handler and no message␤current instr.: '&fail' pc 16557 (src/builtins/Junction.pir:364)␤»

[03:15] <colomon> rakudo: say Mu

[03:15] <p6eval> rakudo 852213: OUTPUT«Mu()␤»

[03:15] <colomon> rakudo: say Mu()

[03:15] <p6eval> rakudo 852213: OUTPUT«Could not find non-existent sub &Mu␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[03:37] *** athenot joined
[03:38] <pugssvn> r29859 | colomon++ | [t/spec] Hardcore refudging on substr.t. 

[03:41] *** supernovus left
[03:44] *** SmokeMachine left
[03:55] <dalek> rakudo/master: 8df8ad7 | (Solomon Foster)++ | src/core/Any-str.pm:

[03:55] <dalek> rakudo/master: Try to handle the .substr cases where $start is outside the length of the string.

[03:55] <dalek> rakudo/master: review: http://github.com/rakudo/rakudo/commit/8df8ad79b8c953f8d0ba2e9561835e18a2fb5690

[03:55] <dalek> rakudo/master: 403afe0 | (Solomon Foster)++ | t/spectest.data:

[03:55] <dalek> rakudo/master: Turn on substr.t.

[03:55] <dalek> rakudo/master: review: http://github.com/rakudo/rakudo/commit/403afe0ac715920a7cceb4694968028763ef759c

[04:02] *** estrabd joined
[04:06] <pmichaud> colomon: seems like $start outside the length of string should perhaps fail() ?

[04:23] <colomon> pmichaud: good point

[04:29] <pugssvn> r29860 | colomon++ | [t/spec] Unfudge tests that now work.  pmichaud++ 

[04:39] *** lestrrat is now known as lest_away

[04:41] *** lest_away is now known as lestrrat

[04:49] *** [particle]1 joined
[04:51] *** [particle] left
[04:53] <hejki> has masak been around lately?

[04:54] <colomon> yes

[04:54] <hejki> good

[04:55] <hejki> tfti

[04:57] *** spinclad left
[04:58] <colomon> rakudo: say i

[04:58] <p6eval> rakudo 403afe: OUTPUT«Could not find non-existent sub &i␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[05:00] *** gfx joined
[05:20] *** eternaleye_ joined
[05:21] *** [particle]1 left
[05:21] *** eternaleye left
[05:21] *** lue joined
[05:22] *** [particle] joined
[05:24] *** rhr joined
[05:24] *** wasy joined
[05:33] *** athenot left
[05:33] *** tewk joined
[05:35] <lue> hello

[05:42] *** jjore joined
[05:42] <snarkyboojum> rakudo: eval "say 'hi'"

[05:42] <p6eval> rakudo 403afe: OUTPUT«hi␤»

[05:42] <snarkyboojum> rakudo: eval ";jlaksdf;a43lkjaf"

[05:42] <p6eval> rakudo 403afe:  ( no output )

[05:48] *** daemon joined
[05:51] *** Khisanth left
[05:59] *** synth joined
[06:00] *** ihrd joined
[06:02] *** ihrd left
[06:07] *** Khisanth joined
[06:25] <lue> I hate lowpoints of a freenode-day :/

[06:26] <TimToady> I blame the Pacific Ocean.

[06:28] <lue> It's shrinking. That's the problem

[06:28] <lue> The Alantic needs to stop growing.

[06:29] *** iblechbot joined
[06:33] <lue> What kind of a time system would be suitable for the Internet? Something independant of timezones (or even Earth, ideally)...

[06:49] *** mssm joined
[06:50] <hejki> unixtime?

[06:52] <lue> probably. But the epoch is terribly Earth-arrogant :)

[06:52] <TimToady> what, the kind of unixtime that can't even tell the difference between one second and two when there's a leap second?

[06:53] <TimToady> if you don't make it earth-based you'll have to worry about relativistic effects

[06:53] <TimToady> even the GPS sats have to worry about that.

[06:53] <lue> How's about a second not defined as vibrations of Cesium?

[06:53] <TimToady> I think the latest most accurate time-base they announced a month or so ago was Aluminum

[06:54] <TimToady> before that was Mercury, I believe

[06:54] <lue> there's always Cosmic Time.

[06:54] <TimToady> Cesium is like, ancient

[06:54] <snarkyboojum> how about using 'Pirahã' time :)

[06:54] <TimToady> that would be helpful if the cosmos actually could make up its mind about it, but it can't

[06:55] <lue> Well, everywhere I've seem Cesium (not sure of Wikipedia though)

[06:56] <TimToady> currently used atomic clocks are Cesium, yes

[06:56] <TimToady> but they keep developing more accurate ones

[06:56] <lue> (who here believes time is the 4th Euclidian dimension?)

[06:57] <TimToady> I believe in light cones

[06:57] <hejki> i believe in tin foil hats

[06:57] *** uniejo joined
[06:57] <TimToady> tin is not very accurate

[06:57] <lue> I believe that the Universe is part of the Multiverse is part of the Omniverse is part of the Verse is part of the Song :)

[06:58] <snarkyboojum> is part of a bag of marbles

[06:58] <lue> There's also Uni-/Multi-/Omni- Chorus

[06:58] <lue> (I ought to post my theories sometime)

[06:58] *** mberends joined
[06:58] *** Trashlord joined
[06:58] <TimToady> Song is 宋 in Chinese, so that must mean something.

[06:59] <TimToady> as in, Song Dynasty

[06:59] <lue> The Song resides in 'Heaven' (whatever you would call it)

[06:59] <lue> I has a bed. And it needs my sleep.

[06:59] *** lue left
[07:00] <TimToady> me is trying to make a pun on Song Freud and failing...

[07:00] <hejki> Failian slip

[07:11] *** kaare joined
[07:11] *** kaare is now known as Guest75711

[07:23] *** Su-Shee joined
[07:24] <Su-Shee> good morning

[07:41] *** mssm left
[07:43] *** eternaleye_ is now known as eternaleye

[07:52] <eternaleye> ... I think I'm slow. I just realized that Mu could be backronymed to Most Undefined as well as being 無　('mu' == 'nothing' :lang<ja_JP>), which I got immediately

[08:11] *** jonasbn joined
[08:21] *** mikehh joined
[08:32] *** pmurias joined
[08:39] *** dual joined
[08:42] *** am0c joined
[09:06] <pugssvn> r29861 | pmurias++ | [mildew] handle Â¢ in optC 

[09:17] *** helmingstay joined
[09:19] *** helmingstay left
[09:42] *** hanekomu joined
[09:56] *** yinyin left
[09:57] *** agentzh left
[10:12] *** lestrrat is now known as lest_away

[10:22] *** barney joined
[10:26] *** orafu joined
[10:28] *** IRSeekBot10 joined
[10:49] *** hanekomu left
[11:02] *** aesop left
[11:02] *** pmurias left
[11:08] <jonasbn> mberends: ping

[11:20] *** mssm joined
[11:33] *** pmurias joined
[11:48] <mberends> jonasbn: I shall pong you in about 60 minutes ;)

[11:53] *** hanekomu joined
[11:55] <jonasbn> great

[12:07] *** PacoLinux joined
[12:14] *** meteorjay joined
[12:14] *** gfx left
[12:15] *** colomon joined
[12:18] *** ruoso joined
[12:18] <colomon> o/

[12:20] *** wknight8111 joined
[12:34] <jnthn> o/

[12:38] <mberends> jonasbn: pong, at last

[12:41] *** pmurias left
[12:42] <jonasbn> mberends: the OSD people say that they have not received an abstract from you

[12:42] <jonasbn> do you want to save your talk for Sunday instead

[12:43] <jonasbn> then we just schedule it ourselves

[12:45] *** mkyser joined
[12:48] *** iblechbot left
[13:04] *** Trashlord left
[13:10] *** IRSeekBot10 left
[13:13] *** payload joined
[13:14] *** masak joined
[13:15] <masak> oh hai, #perl6

[13:15] *** masak left
[13:15] <jnthn> That was a short visit.

[13:17] <takadonet> morning all

[13:18] *** athenot joined
[13:25] *** lichtkind joined
[13:26] *** ignacio_ joined
[13:26] *** jaffa4 joined
[13:27] *** athenot left
[13:27] <jaffa4> hi

[13:27] <colomon> o/

[13:27] <jaffa4> dalek

[13:29] <colomon> exterminate

[13:30] *** lichtkind left
[13:32] *** IRSeekBot joined
[13:32] *** masak joined
[13:35] <colomon> hmmm, if we could get 425 more passing tests today, we'd break 25,000 passing....

[13:35] <masak> \o/

[13:35] <masak> colomon: you're amazing.

[13:36] <colomon> how so?  (and how are you coming on 1000 bugs?)

[13:36] <jnthn> colomon: That'd take...some effort. :-)

[13:37] <masak> colomon: it's just so cool watching the spectest suite come back online. and I know it takes a lot of tuits to do so.

[13:37] <colomon> jnthn: if we could do 100 in an hour, or whatever it was last night, we ought to be able to do 425 today, right?  :D

[13:37] <jnthn> ;-)

[13:38] <jnthn> colomon: I got a bunch of "try to make it fast enough" work to do on $other-project at the moment, but once I've done that I can look at Rakudo. :-)

[13:38] <colomon> I too need to work on $work.  :)

[13:39] <colomon> Actually, getting Rakudo stuff done is frequently a sign my life has gotten too chaotic to get much $work done.  Rakudo (or at least the parts I work on)  tends to come in much smaller, easier to understand bits.

[13:41] *** jorgegomes joined
[13:41] <jorgegomes> hello, I'm a Perl developper in France, and I would like to paticipate to the perl6 adventure, so Camelia sent me here. How can I get started???

[13:43] <masak> jorgegomes: first off: welcome!

[13:43] <moritz_> hi

[13:43] <colomon> o/

[13:44] <jorgegomes> Thanks!!!

[13:44] <moritz_> jorgegomes: what would you like to do? help writing tests? a compiler? modules? documentation? infrastructure?

[13:44] <jorgegomes> I would be glad to make module, and documentation.

[13:44] <masak> cool! \o/

[13:44] *** jonasbn left
[13:44] <masak> jorgegomes: the overriding schedule, by the way, is that Rakudo Star is coming out sometime later this spring. probably April.

[13:45] <masak> jorgegomes: a lot of things should be ready by then.

[13:45] <jorgegomes> OK, so how can I join the group???

[13:46] <moritz_> 1) get a github account; tell us your account name

[13:46] <moritz_> 2) chose a module to work on; put it on github

[13:46] <moritz_> 3) add it to projects.list on http://github.com/masak/proto/

[13:46] <moritz_> 4) ...

[13:46] <moritz_> 5) profit! fun! whatever you want :-)

[13:46] <jorgegomes> OK... I'll do it right now.

[13:46] <jorgegomes> Nice...

[13:47] <moritz_> projects.list also gives you a good idea what modules are already available (not all that many...)

[13:47] <masak> if you can't think of a new project to create, there are a lot of existing ones that could use an extra set of eyes and hands.

[13:48] *** mssm left
[13:48] <masak> jorgegomes: also, if you're a blogger, just publishing your experiences to the world is a great help to us.

[13:48] <jorgegomes> No, problem...

[13:49] <jorgegomes> I'll be right back...

[13:49] *** jorgegomes left
[13:49] <masak> I think that went well.

[13:50] *** jlaire joined
[13:50] <colomon> rakudo: ucfirst("üüüü")

[13:50] <p6eval> rakudo 403afe:  ( no output )

[13:50] <colomon> rakudo: say ucfirst("üüüü")

[13:50] <p6eval> rakudo 403afe: OUTPUT«Üüüü␤»

[13:50] <masak> \ü/

[13:50] <colomon> oooooo..... more easily won back tests!

[13:51] <jnthn> wÜÜt

[13:52] <masak> üh no, more püns...

[13:52] <masak> alternately, 'here we gü again...'

[13:54] <szbalint> I'm so glad I have ü on my keyboard :)

[13:54] <jaffa4> masak: where would you publish it?

[13:55] <pugssvn> r29862 | masak++ | [S09] fixed thinko discovered by snarkyboojum++ 

[13:55] <masak> jaffa4: publish what?

[13:55] <jaffa4> an experience on Perl 6

[13:55] <jaffa4> I published but I got few views.

[13:55] <masak> jaffa4: I don't know... somewhere I feel comfortable blogging.

[13:55] <masak> jaffa4: right now, use.perl.org works for me, but only barely.

[13:56] <jaffa4> how many views do you get for a posting?

[13:56] <masak> jaffa4: getting many views shouldn't be your primary goal, I don't think.

[13:56] <jnthn> use.perl.org only works because some other options work less. :-)

[13:56] <jnthn> And those that work more require more effort.

[13:56] <masak> jaffa4: sometimes almost none, sometimes a lot. but I have no real way to measure except by the comments people make on- and off-blog.

[13:57] <jaffa4> then it is not very good.

[13:57] <masak> jnthn: the p6advent experience showed me that it's probably not a big deal to set up a wordpress blog and start blogging there.

[13:57] *** uniejo left
[13:57] <masak> jaffa4: you have a tendency to offend (probably unwittingly) in just a few sentences.

[13:58] <jaffa4> it is not very good that you do not know how many views you have got.

[13:58] <colomon> rakudo: say uc("ß")

[13:58] <p6eval> rakudo 403afe: OUTPUT«SS␤»

[13:59] <jaffa4> masak,  I mean the blogging site, not your blog.

[13:59] <masak> jaffa4: I'm not that bothered by not knowing. I'm not a SEO or anything. I don't get a higher cut if I pull in more views.

[13:59] *** uniejo joined
[13:59] <masak> jaffa4: no, use.perl.org is not extremely good, that's true.

[14:00] <jnthn> masak: I pondred that.

[14:00] <jnthn> masak: I also wondered about a Wordpress MultiUser instance at blogs.perl6.org or some such.

[14:00] <jnthn> masak: It's nice to have a "collective" place, as it were.

[14:01] <masak> aye.

[14:01] <PerlJam> +1 blogs.perl6.org

[14:01] <PerlJam> good $localtime

[14:01] <moritz_> fwiw, perlgeek.de gets 14k to 25k visitors per month

[14:01] * moritz_ would prever blogs.perl6.org to be an aggregator

[14:01] <moritz_> s/prever/prefer/

[14:01] <moritz_> like planetsix

[14:01] <moritz_> less administration required

[14:01] <jnthn> moritz_: I'm not sure that has to be an either/or.

[14:02] <masak> I'm thinking we should repeat the p6advent success in some form already this summer. maybe create an adventure game in 30 days or something.

[14:02] <masak> rakudo: /d/(44) # from diakopterbot

[14:02] <p6eval> rakudo 403afe: OUTPUT«Method '!cursor_start' not found for invocant of class 'Integer'␤current instr.: '_block46' pc 298 (EVAL_1:126)␤»

[14:02] * masak submits rakudobug

[14:02] <jnthn> hehe

[14:03] <pmichaud> good morning, #perl6

[14:03] <PerlJam> masak: how about the N days of Rakudo Star?  :)

[14:03] *** mssm joined
[14:04] <PerlJam> (again starting with how to obtain and install Rakudo Star)

[14:04] <jnthn> pmichaud! \o/

[14:04] <jnthn> PerlJam: I like that

[14:04] <jnthn> PerlJam: Maybe "N cool things in Rakudo *" or something?

[14:05] <jnthn> "A cool thing in Rakudo *, each day, every day"

[14:05] <jnthn> Or some such.

[14:05] <PerlJam> that could even dovetail with masak's game idea.

[14:05] <pmichaud> <colomon> ... Rakudo (or at least the parts I work on) tends to come in much smaller, easier to understand bits.

[14:06] <pmichaud> somehow I never thought I'd see "smaller, easier to understand" used with Rakudo :-)

[14:06] <pmichaud> std:  /d/(44)

[14:06] <p6eval> std 29861: OUTPUT«ok 00:01 107m␤»

[14:07] <masak> PerlJam, jnthn: yes to all of the above :)

[14:08] <jnthn> Awesome. We haz a plan.

[14:08] <PerlJam> and as long as we keep N underspecified, it goes on forever!  :)

[14:09] <masak> oh, I thought that was a metasyntactic variable.

[14:09] <masak> better to fix it, methinks, and make the project finite.

[14:09] <frettled> masak: yup

[14:09] <frettled> Sorry, no kanelbulle today.

[14:09] <masak> I understand.

[14:09] <masak> need to ration.

[14:10] <frettled> Apparently there is a delivery problem.

[14:10] <masak> must be the snow.

[14:10] *** jnthn sets mode: +oo frettled masak

[14:10] * jnthn is happy to share is kamelbulle

[14:10] <masak> \o/

[14:10] <jnthn> er, kanelbulle

[14:11] <masak> haha!

[14:11] <jnthn> Though maybe since this is #perl6, kamel is appropriate too. :-)

[14:11] <masak> frettled: we should bake kamelbullar some time.

[14:12] <masak> "it has cinnamon, sugar, and two humps"

[14:12] *** athenot joined
[14:12] <PerlJam> heh

[14:12] <jnthn> There's more tha one way to bake it.

[14:12] *** uniejo left
[14:14] *** Guest75711 left
[14:14] <PerlJam> somehow though "camel buns" doesn't quite evoke the right imagery that "cinnamon buns" does.

[14:15] <PerlJam> perhaps it's just too close phonetically to "camel dung" or something.

[14:15] <masak> that's only one reason Scandinavian is superior. we don't have that problem at all.

[14:16] * jnthn looks forward to learning the superior language

[14:16] <jnthn> :-P

[14:16] <jaffa4> is replacement working now?

[14:17] <frettled> \o/

[14:17] <frettled> jnthn: Yeah!

[14:17] <jaffa4> is replacement working now in Perl6?

[14:17] <frettled> masak: Yes, we should do that.

[14:17] <PerlJam> jaffa4: you mean subst ?

[14:17] <jnthn> jaffa4: replacement?

[14:17] <jaffa4> something like that

[14:18] <jnthn> rakudo: say "poor".subst(/poo/, 'bee')

[14:18] <p6eval> rakudo 403afe: OUTPUT«beer␤»

[14:18] <jnthn> Somewhat. :-)

[14:18] <PerlJam> heh

[14:18] *** mssm left
[14:18] <PerlJam> Interesting recipe for beer

[14:18] <pmichaud> rakudo:  say "beer".subst(/bee/, 'poo')  # a poor substitute for beer

[14:18] <p6eval> rakudo 403afe: OUTPUT«poor␤»

[14:19] <jnthn> <groan>

[14:19] <jaffa4> what about g in ?

[14:19] <jaffa4> regular expressions?

[14:19] <pmichaud> rakudo: say "peer".subst(/e/, 'o', :global);

[14:19] <p6eval> rakudo 403afe: OUTPUT«poer␤»

[14:19] <pmichaud> looks like nyi

[14:19] * masak submits rakuodbug

[14:19] <colomon> pmichaud: Rakudo src/Perl6 + builtins + core is about 10,000 lines of code, with lots of tests and other very smart people working on it.  $work is 200,000 lines of C++ and Perl, much of it hard-to-test, and only me working on it.

[14:20] <PerlJam> colomon: rewrite $work in Perl 6  ;)

[14:20] *** frettled sets mode: +o colomon

[14:20] <takadonet> colomon: Looks like we are in the same boat

[14:20] <pmichaud> .oO("boat number?")

[14:20] <jnthn> colomon: Don't forget src/pmc and src/binder :-P

[14:21] <takadonet> colomon: Half a million lines of perl 5 code but there is two of us working on it at least :P

[14:21] <PerlJam> boat number is how many people you have to push overboard to maintain bouyancy

[14:21] <colomon> PerlJam: As soon as Rakudo is stable enough and with good C++ bindings, rewriting big hunks of the support code in Perl 6 will wander onto my to-do list.  :)

[14:22] <jaffa4> rakudo: m:g/f/;

[14:22] <p6eval> rakudo 403afe: OUTPUT«Confused at line 11, near "m:g/f/;"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[14:22] <colomon> jnthn: I only counted areas I've made actual changes to Rakudo.  Obviously parrot, etc represents a lot of additional complexity, but most of it stays safely out of my view as a Rakudo dev.  :)

[14:22] <jnthn> jaffa4: Regex modifiers are on the ROADMAP as fairly high priority.

[14:23] <frettled> Crikey.  It looks like $orkplace has around 100-300 000 lines of Perl code.

[14:23] <jaffa4> so it is not implemented

[14:23] <jnthn> colomon: Lucky thing!

[14:23] <frettled> Perl 5, though

[14:23] <jnthn> ;-)

[14:23] <PerlJam> patience jaffa4-san

[14:23] <colomon> hey, who pushed to Rakudo while I was spectesting?  ;)

[14:23] <jnthn> jaffa4: Correct.

[14:23] <jnthn> It wasn't me. :-)

[14:23] <frettled> colomon: someone fixed the bug you were about to report? :)

[14:23] <jaffa4> it is a miracle that you have the dedication.

[14:24] <masak> jaffa4: seeing the light at the end of the tunnel helps.

[14:24] <pmichaud> .oO("Oncoming train!!!!!")

[14:25] <frettled> we're about to be rail-roaded

[14:25] <dalek> rakudo/master: d588cd2 | pmichaud++ | docs/spectest-progress.csv:

[14:25] <dalek> rakudo/master: spectest-progress.csv update: 215 files, 24575 (68.7% of 35754) pass, 1 fail

[14:25] <dalek> rakudo/master: Failure summary:

[14:25] <dalek> rakudo/master: S02-whitespace_and_comments/one-pass-parsing.t 1 - can parse non-backslashed curly and right bracket in cclass

[14:25] <dalek> rakudo/master: review: http://github.com/rakudo/rakudo/commit/d588cd2b66f14ab7ae1d2188ef7194b9f5b3eb12

[14:25] <dalek> rakudo/master: 4fc3af7 | (Solomon Foster)++ | src/core/Any-str.pm:

[14:25] <dalek> rakudo/master: Add protos for uc, lc, ucfirst, and lcfirst.

[14:25] <dalek> rakudo/master: review: http://github.com/rakudo/rakudo/commit/4fc3af77c3b70042dc8ad7ef6960c190f6d41f1c

[14:25] <masak> pmichaud: yes. the Perl 6 train :)

[14:25] <pugssvn> r29863 | colomon++ | [t/spec] Defudge "calling positional params by name" and "unicode" tests, and refudge skips to todos. 

[14:25] <frettled> Since Perl 6 doesn't have rails, does that mean we're maglev?

[14:25] <PerlJam> Just about the time you see the light at the end of the tunnel someone goes and snuffs it out

[14:26] <pmichaud> std:  m:g/xyz/

[14:26] <p6eval> std 29862: OUTPUT«ok 00:01 108m␤»

[14:26] <frettled> masak: wouldn't that be a cool name for the Rails-killing Perl 6 tech?  :D

[14:26] <frettled> Perl 6 Maglev

[14:26] <pmichaud> Perl 6 Oncoming Train 

[14:26] <masak> 哈哈

[14:26] <colomon> Those changes get us 14 more passing tests.  :)  Now the house is empty and quiet, so I should $work.

[14:27] <jnthn> colomon++

[14:27] <frettled> Oh, bother: http://en.wikipedia.org/wiki/MagLev_%28Ruby_interpreter%29

[14:27] <jaffa4> $work?

[14:27] <pmichaud> (yes, "Maglev" is a great name for a killer app)

[14:27] <jaffa4> what is $work?

[14:27] <jaffa4> Is it defined?

[14:27] * masak still thinks we should call some killer app "Context"

[14:28] <PerlJam> Perl 6 Choo Choo  (we can appeal to the kids! ;)

[14:28] <masak> The Little Perl 6 That Could.

[14:31] <Su-Shee> we could name it trail or caravan ;)

[14:32] *** cognominal joined
[14:33] <masak> hm. jorgegomes never did come back, did he?

[14:34] <PerlJam> nyet

[14:34] <colomon> rakudo: say index("uuúuúuùù", "úuù")

[14:34] <p6eval> rakudo 403afe:  ( no output )

[14:35] * masak submits rakudobug

[14:35] <masak> even locally, that oneliner produces nothing.

[14:35] <masak> rakudo: say index("uuúuúuùù", "úuù"); say "alive"

[14:35] <p6eval> rakudo 403afe: OUTPUT«alive␤»

[14:36] <masak> isn't that strange?

[14:36] <masak> I don't have an explanation for where the first newline goes.

[14:36] <jnthn> wtf

[14:36] <PerlJam> weird indeed

[14:36] <jnthn> Me either.

[14:37] <PerlJam> rakudo: say index("abcdefgh", "def");

[14:37] <p6eval> rakudo 403afe: OUTPUT«3␤»

[14:37] <PerlJam> rakudo: say index("úuúuùù", "úuù");

[14:37] <p6eval> rakudo 403afe:  ( no output )

[14:37] <PerlJam> rakudo: say index("úuúuùù", "u");

[14:37] <p6eval> rakudo 403afe: OUTPUT«1␤»

[14:38] <PerlJam> rakudo: say index("úuúuùù", "ú");

[14:38] <p6eval> rakudo 403afe: OUTPUT«0␤»

[14:38] <PerlJam> rakudo: say index("úuúuùù", "ù");

[14:38] <p6eval> rakudo 403afe: OUTPUT«4␤»

[14:38] <frettled> masak: «Context» is only used by two apps according to Wikipedia: 1) a macro package for TeX; 2) an Windows text editor.

[14:38] <PerlJam> rakudo: say index("úuúuùù", "ùù");

[14:38] <p6eval> rakudo 403afe: OUTPUT«4␤»

[14:38] <masak> frettled: huh.

[14:38] *** mssm joined
[14:38] <PerlJam> rakudo: say index("úuúuùù", "úu");

[14:38] <p6eval> rakudo 403afe: OUTPUT«0␤»

[14:38] <colomon> haven't we seen the missing newline for say issue before?

[14:38] <PerlJam> rakudo: say index("úuúuùù", "úuù");

[14:38] <p6eval> rakudo 403afe:  ( no output )

[14:39] <frettled> masak: It sucks that almost all the good names are taken.

[14:39] <colomon> rakudo: index("úuúuùù", "úuù") ~~ Fail

[14:39] <p6eval> rakudo 403afe: OUTPUT«Could not find non-existent sub &Fail␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[14:39] <PerlJam> rakudo: say index("úuùuúú", "úuù");

[14:39] <p6eval> rakudo 403afe: OUTPUT«0␤»

[14:39] <PerlJam> rakudo: say index("úuùuúú", "ùuú");

[14:39] <p6eval> rakudo 403afe: OUTPUT«2␤»

[14:39] <masak> frettled: I don't think that's true; but it might easily seem that way.

[14:40] <PerlJam> rakudo: say index("úuùuúù", "ùuú");

[14:40] <p6eval> rakudo 403afe: OUTPUT«2␤»

[14:40] <frettled> masak: «Frettler» is available!  \o/

[14:40] <masak> frettled: :)

[14:40] <masak> jnthn: have I shown you this yet? http://www.youtube.com/watch?v=x_dtMln5JXI

[14:40] <frettled> masak: also «Fretless»

[14:40] <PerlJam> rakudo: say index("úuù", "úuù");

[14:40] <p6eval> rakudo 403afe: OUTPUT«0␤»

[14:41] <frettled> masak: http://en.wikipedia.org/wiki/Fretless

[14:41] <frettled> nice, eh?

[14:41] <jnthn> masak: No :-)

[14:41] <masak> jnthn: the comment at 1:37 is priceless.

[14:41] <PerlJam> rakudo: say index("ùuúuù", "úuù");

[14:41] <p6eval> rakudo 4fc3af: OUTPUT«2␤»

[14:42] <masak> frettled: "Fretless" would be an excellent name for some community app. a bug tracker or something.

[14:42] *** jaldhar joined
[14:42] <frettled> «No need to fret»

[14:42] <masak> 'xactly.

[14:43] <frettled> Hmm.

[14:44] <frettled> Perhaps it's a good name for my vaporware calendar.

[14:44] *** cognominal left
[14:52] <pmichaud> 14:38 <PerlJam> rakudo: say index("úuúuùù", "úuù");

[14:52] <pmichaud> 14:38 <p6eval> rakudo 403afe:  ( no output )

[14:52] <pmichaud> I call parrotbug.

[14:53] <masak> should I add that to the rakudobug ticket?

[14:53] <pmichaud> code coming up.

[14:53] <masak> that does explain it, by the way.

[14:55] <pmichaud> http://nopaste.snit.ch/19794  # bug with index op?

[14:55] <jnthn> Parrot FAIL.

[14:56] * masak adds this to the RT ticket

[14:57] <colomon> That doesn't explain the missing newline from say, does it?

[14:57] <masak> actually, no.

[14:58] <colomon> rakudo: say index("hello", "elf");

[14:58] <p6eval> rakudo 4fc3af:  ( no output )

[14:58] <masak> except that a -1 probably translates into a Failute of some kind.

[14:58] <masak> s/ute/ure/

[14:58] <pmichaud>         fail("Substring '$substring' not found in '{self}'") if $result < 0;

[14:58] <colomon> Yes, it becomes a fail.

[14:58] <masak> ok, so the bug is actually two bugs.

[14:58] <masak> one Parrot-based, and one having to do with &fail

[14:59] <pmichaud> rakudo:  say index("hello", "elf").WHAT;

[14:59] <p6eval> rakudo 4fc3af: OUTPUT«Failure()␤»

[14:59] <pmichaud> ah, yes.

[14:59] <pmichaud> stringifying the failure causes it to throw the exception

[14:59] <pmichaud> so say() never gets a chance to output the newline.

[15:00] <mberends> aww, now jonasbn is gone with his OSD question about a talk abstract :(

[15:00] <masak> that's it, then.

[15:00] <pmichaud> that, to me, is not a bug.

[15:00] <masak> I don't see the failure being thrown, either.

[15:00] <pmichaud> yeah, that part is an error

[15:01] <pmichaud> Perhaps the failure is being thrown but we're never seeing the message?

[15:01] <pmichaud> rakudo:  sub foo() { fail 'bar'; 'xyz' };  say foo();

[15:01] <p6eval> rakudo 4fc3af:  ( no output )

[15:03] <pmichaud> parrot bug gets weirder:  http://nopaste.snit.ch/19795

[15:04] <masak> o.O

[15:05] *** SmokeMachine joined
[15:05] <masak> so, just Unicode strings make the problem occur?

[15:05] <bbkr> .u ó

[15:05] <phenny> U+00F3 LATIN SMALL LETTER O WITH ACUTE (ó)

[15:05] <colomon> Though there were Unicode string examples in the backlog there that worked, right?

[15:05] <colomon> It's not just all Unicode strings fail.

[15:05] <masak> ok.

[15:06] <colomon> rakudo: say index("ùuúuù", "úuù");

[15:06] <p6eval> rakudo 4fc3af: OUTPUT«2␤»

[15:07] <pmichaud> I think it may be whenever it starts to get a partial match, but then has to fail that match and try again

[15:07] <masak> pmichaud++

[15:07] <PerlJam> rakudo: say index("úuúuù", "úuù");

[15:07] <p6eval> rakudo 4fc3af:  ( no output )

[15:07] <pmichaud> rakudo: say index("úaúuù", "úuù");

[15:07] <p6eval> rakudo 4fc3af: OUTPUT«2␤»

[15:08] <PerlJam> rakudo: say index("ababc", "abc");

[15:08] <p6eval> rakudo 4fc3af: OUTPUT«2␤»

[15:08] <PerlJam> and only unicode

[15:08] <pmichaud> that one is different -- the string is ascii

[15:08] <PerlJam> right, just checkign

[15:08] <pmichaud> but it fails with ascii chars in unicode:

[15:08] *** iblechbot joined
[15:08] <pmichaud> rakudo:  say index("ababc«", "abc");

[15:08] <p6eval> rakudo 4fc3af:  ( no output )

[15:08] <PerlJam> weird

[15:09] <colomon> That seems like a very nicely narrowed down bug.  :)

[15:09] <masak> scary.

[15:10] <Tene> rakudo: say index("ababcd", "abc")

[15:10] <p6eval> rakudo 4fc3af: OUTPUT«2␤»

[15:11] <masak> huh!

[15:11] <masak> does the match have to be at the end of the string?

[15:11] <PerlJam> no. just that there must be one unicode char in the string

[15:11] <PerlJam> (I guess that promotes the entire string to unicode)

[15:12] <masak> makes sense.

[15:12] <PerlJam> Is there a Perl6 equivalent to the parrot  unicode:"..."  ?

[15:12] <PerlJam> qu// or something?

[15:12] <masak> PerlJam: "..."

[15:12] <pmichaud> PerlJam: no, all strings in Perl 6 are "unicode"

[15:12] <PerlJam> Clearly not :)

[15:13] <pmichaud> PerlJam: your question doesn't make sense.  :)

[15:13] <PerlJam> I know.

[15:13] <pmichaud> if you're asking if there's a Perl 6 equivalent to obtaining the same representation that Parrot uses when it has unicode:"...", the answer is utf8

[15:14] <pmichaud> as in:   my utf8 $buf = "..."

[15:14] <pmichaud> (or something like that)

[15:14] *** marton_ joined
[15:14] <PerlJam> does that work in rakudo?

[15:15] <pmichaud> nyi

[15:16] <PerlJam> alpha: say index("úuúuù", "úuù");

[15:16] <p6eval> alpha 30e0ed: OUTPUT«Substring 'úuù' not found in 'úuúuù'␤␤»

[15:17] <PerlJam> (that kind of gives us a range of when the problem started I guess)

[15:17] <pmichaud> well, there's two problems.

[15:17] <PerlJam> er, problems

[15:17] <pmichaud> one is that failures aren't being thrown properly in master

[15:17] <pmichaud> the other is that the substring isn't being founds

[15:17] <pmichaud> *found

[15:18] <pmichaud> the latter problem (substring not found) apparently exists in parrot all the way back through Parrot 1.0.0  (I tested)

[15:18] <jnthn> Wow!

[15:18] *** jaffa4 left
[15:18] <pmichaud> (it likely exists pre-1.0.0, I only have 1.0.0 and later readily available here)

[15:19] <PerlJam> This is one of those "testing is not a panacea" moments because I would have thought there would be parrot tests for index and such.

[15:20] <PerlJam> (tests that would have caught this problem before now)

[15:20] <pmichaud> there are parrot tests for index.  I suspect there aren't many unicode-based ones.

[15:20] <colomon> PerlJam: we have tests for this, but they are skipped with the label "Unicode".

[15:20] <masak> it's be interesting to know more about the nature of the Parrot bug that causes this.

[15:20] <PerlJam> colomon: ha!

[15:20] <colomon> That's how I found the problem, I was looking for Unicode skips that could be unfudged.

[15:20] <masak> would make good material for a blog post.

[15:21] *** nihiliad joined
[15:22] <pmichaud> rakudo:  sub xyz($x) { say $x; };  xyz('abc'.comb);

[15:22] <p6eval> rakudo 4fc3af: OUTPUT«a b c␤»

[15:22] <pmichaud> rakudo:  sub xyz($x) { say ~$x; };  xyz('abc'.comb);

[15:22] <p6eval> rakudo 4fc3af: OUTPUT«a b c␤»

[15:23] <pmichaud> rakudo:  sub xyz(Mu $x) { say ~$x; };  xyz('abc'.comb);

[15:23] <p6eval> rakudo 4fc3af: OUTPUT«a b c␤»

[15:23] *** aesop joined
[15:24] <pmichaud> rakudo:  sub xyz(Mu $x) { say $x eq 'abc' };  xyz('abc'.comb);

[15:24] <p6eval> rakudo 4fc3af: OUTPUT«0␤»

[15:24] <pmichaud> rakudo:  sub xyz(Mu $x) { say $x eq 'a b c' };  xyz('abc'.comb);

[15:24] <p6eval> rakudo 4fc3af: OUTPUT«1␤»

[15:24] <colomon> rakudo:  sub xyz(Mu $x, Mu $y) { say $x eq $y};  xyz('abc'.comb, <a b c>);

[15:24] <p6eval> rakudo 4fc3af: OUTPUT«0␤»

[15:25] <colomon> rakudo:  sub xyz(Mu $x) { say ~$x; };  xyz(<a b c>);

[15:25] <p6eval> rakudo 4fc3af: OUTPUT«3␤»

[15:25] <pmichaud> ah-ha

[15:25] <masak> wut?

[15:26] <pmichaud> parcels aren't stringifying properly.

[15:26] <pmichaud> sub xyz(Mu $x) { say ~$x };  xyz(('a', 'b', 'c'));

[15:26] <colomon> rakudo:  sub xyz(Mu $x) { say $x.WHAT; };  xyz(<a b c>);

[15:26] <p6eval> rakudo 4fc3af: OUTPUT«Parcel()␤»

[15:26] <pmichaud> rakudo: sub xyz(Mu $x) { say ~$x };  xyz(('a', 'b', 'c'));

[15:27] <p6eval> rakudo 4fc3af: OUTPUT«3␤»

[15:27] * masak submits rakudobug

[15:27] <pmichaud> colomon++

[15:27] <pmichaud> rakudo:  say PARROT(<a b c>);

[15:27] <p6eval> rakudo 4fc3af: OUTPUT«Parcel␤»

[15:28] <pmichaud> rakudo:  say ~<a b c>;

[15:28] <p6eval> rakudo 4fc3af: OUTPUT«3␤»

[15:28] <pmichaud> rakudo:  say <a b c>.Str;

[15:28] <p6eval> rakudo 4fc3af: OUTPUT«a b c␤»

[15:31] *** ruoso left
[15:31] *** mberends left
[15:32] <pmichaud> > say ~<a b c>;

[15:32] <pmichaud> a b c

[15:33] <colomon> \o/

[15:34] <pmichaud> ....but now I'm getting some serious failures.

[15:34] <colomon> doh!

[15:36] <diakopter> rakudo: say (*.say; return *.say)(3)  # masak; this one's for you

[15:36] <p6eval> rakudo 4fc3af: OUTPUT«error:imcc:syntax error, unexpected '(' ('(')␤     in file 'EVAL_1' line 76␤No exception handler and no message␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[15:38] * masak submits rakudobug

[15:38] <masak> that's a PIR parse error.

[15:38] <diakopter> yar

[15:38] <masak> is it golfed?

[15:39] <diakopter> dunno

[15:39] <masak> so, "no" :)

[15:39] <masak> rakudo: (return *.say)(3)

[15:39] <p6eval> rakudo 4fc3af: OUTPUT«error:imcc:syntax error, unexpected '(' ('(')␤     in file 'EVAL_1' line 72␤No exception handler and no message␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[15:39] <masak> rakudo: (*.say)(3)

[15:39] <p6eval> rakudo 4fc3af: OUTPUT«3␤»

[15:39] <masak> rakudo: return *.say

[15:39] <p6eval> rakudo 4fc3af: OUTPUT«No exception handler and no message␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[15:39] <diakopter> rakudo: (return *)()

[15:39] <p6eval> rakudo 4fc3af: OUTPUT«error:imcc:syntax error, unexpected '(' ('(')␤     in file 'EVAL_1' line 70␤No exception handler and no message␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[15:40] <masak> there we have it.

[15:40] *** cognominal joined
[15:40] *** mls joined
[15:41] <mls> the parrot index bug is in the mixed_cs_index function in src/string/charset/ascii.c

[15:41] <pmichaud> ...ascii.c, are you sure?

[15:42] <pmichaud> probably better to diagnose that one on #parrot, too :)

[15:42] <pmichaud> Coke++ seems to have a fix.

[15:42] <mls> Yep, it's also used from the other charsets

[15:42] <pmichaud> rakudo:  say < a >;

[15:42] <p6eval> rakudo 4fc3af: OUTPUT« a ␤»

[15:42] <pmichaud> fail.

[15:42] *** dual left
[15:43] <diakopter> rakudo: say (*).^methods

[15:43] <p6eval> rakudo 4fc3af: OUTPUT«maximum recursion depth exceeded␤current instr.: 'perl6;Seq;!fill' pc 13483 (src/builtins/Multi.pir:22)␤»

[15:43] <masak> .^methods doesn't seem to work for anything right now.

[15:43] <diakopter> o

[15:44] <jnthn> I got did .^parents working again, and .^roles, iirc. But didn't get to .^methods and .^attributes again yet.

[15:44] <jnthn> (the tests are still commented out in spectest.data)

[15:45] *** Psyche^ joined
[15:46] <diakopter> rakudo: say ().''() # I'm not sure this one was ever submitted

[15:46] <p6eval> rakudo 4fc3af: OUTPUT«ResizablePMCArray: Can't shift from an empty array!␤current instr.: 'perl6;Mu;' pc 2397 (src/builtins/Mu.pir:524)␤»

[15:47] <masak> me neither. but we already have a couple empty-name method tickets already.

[15:47] <diakopter> rakudo: say ()[()]; say ()[(3)]

[15:47] <p6eval> rakudo 4fc3af: OUTPUT«␤Mu()␤»

[15:48] <diakopter> should the first be Mu() too?

[15:49] *** Psyche^ is now known as Patterner

[15:49] <diakopter> rakudo: say ()[Nil]; say ()[3]

[15:49] <p6eval> rakudo 4fc3af: OUTPUT«␤Mu()␤»

[15:51] *** rgrau joined
[15:52] *** mls left
[15:53] *** uniejo joined
[15:56] <diakopter> rakudo: say (role foo {}).^roles.[0].^methods

[15:56] <p6eval> rakudo 4fc3af: OUTPUT«returnsof␤»

[15:57] <masak> rakudo: say (role foo {}).^roles.[0].^methods.perl

[15:57] <p6eval> rakudo 4fc3af: OUTPUT«Method 'perl' not found for invocant of class 'ResizablePMCArray'␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[15:57] * masak submits rakudobug

[15:58] *** wknight8111 left
[16:00] <diakopter> rakudo: say (class role is Int {}).new("hi", 2, 3)

[16:00] <p6eval> rakudo 4fc3af: OUTPUT«hi␤»

[16:01] <pmichaud> rakudo: say < a >

[16:01] <p6eval> rakudo 4fc3af: OUTPUT« a ␤»

[16:01] <masak> bug, right?

[16:01] <pmichaud> Yes.

[16:01] * masak submits

[16:01] <pmichaud> feel free to submit -- I'm spectesting a fix now, but we need a test.

[16:02] *** justatheory joined
[16:05] *** ruoso joined
[16:05] *** Trashlord joined
[16:05] <diakopter> rakudo: say (class foo {}).()

[16:05] <p6eval> rakudo 4fc3af: OUTPUT«Class foo already registered!␤␤current instr.: 'perl6;ClassHOW;new' pc 3583 (src/metamodel/ClassHOW.pir:27)␤»

[16:05] * masak submits rakudobug

[16:05] <masak> is the 'say' necessary?

[16:06] <masak> rakudo: (class foo {}).()

[16:06] <p6eval> rakudo 4fc3af: OUTPUT«Class foo already registered!␤␤current instr.: 'perl6;ClassHOW;new' pc 3583 (src/metamodel/ClassHOW.pir:27)␤»

[16:06] <masak> rakudo: (class foo {})

[16:06] <p6eval> rakudo 4fc3af:  ( no output )

[16:06] <diakopter> I dunno whether that's a bug; I think just nonspec

[16:06] <masak> well, the error is kinda weird.

[16:06] <masak> why would it need to re-register class foo?

[16:06] <diakopter> std: say (class foo {}).WHAT

[16:06] <p6eval> std 29863: OUTPUT«ok 00:01 105m␤»

[16:06] <diakopter> rakudo: say (class foo {}).WHAT

[16:06] <p6eval> rakudo 4fc3af: OUTPUT«Code()␤»

[16:06] <masak> why is it a Code?

[16:07] <TimToady> perhaps the registration is implemented internally with Code to call

[16:07] <jnthn> Because anonymous classes are NYI.

[16:07] <jnthn> (along with returning the right thingy from a class decl)

[16:07] *** cotto joined
[16:07] <masak> jnthn: but that class isn't anonymous.

[16:07] <jnthn> I know

[16:07] <masak> ok, I won't submit it then. if it's just a TODO.

[16:08] <jnthn> It'll be the same change to make both work though :-)

[16:09] <jnthn> I'm still a little curious about...

[16:09] <jnthn> my @c; for 1..5 { push @c, class { method foo() { 42 } }; }

[16:09] <jnthn> Does @c contain 5 different anonymous classes?

[16:09] <jnthn> Or just one?

[16:10] * PerlJam would  think the former

[16:10] <masak> five, yes.

[16:10] <jnthn> OK.

[16:10] *** Trashlord left
[16:11] <diakopter> rakudo: say PARROT(module foo {})

[16:11] <p6eval> rakudo 4fc3af: OUTPUT«Null PMC access in isa()␤current instr.: '&PARROT' pc 147 (src/Perl6/Compiler.pir:70)␤»

[16:11] * masak submits rakudobug

[16:14] <diakopter> rakudo: say ClassHOW.methods(ClassHOW)

[16:14] <p6eval> rakudo 4fc3af: OUTPUT«Null PMC access in inspect_str()␤current instr.: 'perl6;ClassHOW;methods' pc 4360 (src/metamodel/ClassHOW.pir:437)␤»

[16:14] * masak submits rakudobug

[16:17] <jnthn> Meh. Before we had a meta-model, all this was nice and hidden and people couldn't screw with it. :-)

[16:17] <diakopter> hee

[16:17] <masak> meta-bugs.

[16:17] <diakopter> rakudo: say PARROT(ClassHOW.parents(ClassHOW)[0])

[16:17] <p6eval> rakudo 4fc3af: OUTPUT«␤»

[16:17] <TimToady> maybe we should require use MONKEY_TYPING on each statement that does it.  :)

[16:18] <diakopter> rakudo: say ClassHOW.parents(ClassHOW)[0]

[16:18] <p6eval> rakudo 4fc3af: OUTPUT«P6metaclass()␤»

[16:18] <masak> eek, a metaclass!

[16:18] <TimToady> 'course, the first meta-meta-thing someone does would be to disable that...

[16:18] <diakopter> rakudo: say ClassHOW.parents(ClassHOW)[0].new

[16:18] <p6eval> rakudo 4fc3af:  ( no output )

[16:18] *** Trashlord joined
[16:18] *** alester joined
[16:19] <jnthn> masak: That's fine - by the time you're asking what ClassHOW is implemented in terms of, your playing with guts.

[16:20] <jnthn> *you're

[16:20] <masak> wow, we should have an address like p3rl.org/bp -- I just saw that on the #perl channel.

[16:20] <diakopter> mmmm lolcatgut

[16:20] <jnthn> That's probably going to be implementation specific.

[16:20] <masak> jnthn: I understand.

[16:22] <diakopter> rakudo: say ClassHOW.roles(ClassHOW)

[16:22] <p6eval> rakudo 4fc3af: OUTPUT«No such attribute '$!composees'␤current instr.: 'perl6;ClassHOW;roles' pc 4514 (src/metamodel/ClassHOW.pir:509)␤»

[16:22] <diakopter> composees?

[16:22] <masak> diakopter: see docs/metamodel.pod :)

[16:22] <pmichaud> std: <>

[16:22] <diakopter> is that like compost?

[16:22] <p6eval> std 29863: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of <>; in Perl 6 please use lines() or () at /tmp/S5qZ9gvdhN line 1:␤------> [32m<[33m⏏[31m>[0m␤FAILED 00:01 105m␤»

[16:22] <masak> jnthn: is it a bug, you'd say?

[16:22] <pmichaud> std: < >

[16:22] <p6eval> std 29863: OUTPUT«ok 00:01 105m␤»

[16:23] <masak> diakopter: no, it's the recipients of a compose event.

[16:23] <diakopter> o

[16:23] <pmichaud> Is   < >  the same as  Nil or '' or ... ?

[16:23] <masak> diakopter: 'those [things] that are being composed\

[16:23] <diakopter> oh, the comprisers

[16:23] <jnthn> masak: Not sure...you're essentially invoking a method on a type object rather than an instance, and it gets upset.

[16:24] <masak> pmichaud: should be either '' or a warning, just like <>, methinks.

[16:24] *** Trashlord left
[16:26] <dalek> rakudo/master: fad9447 | pmichaud++ | src/Perl6/Actions.pm:

[16:26] <dalek> rakudo/master: Fix bug where < a > would improperly produce ' a ' instead of 'a' (RT #73136).

[16:26] <dalek> rakudo/master: review: http://github.com/rakudo/rakudo/commit/fad944704402597267790990dd343fb65e0c5e35

[16:27] *** arlinius left
[16:32] <diakopter> rakudo: my $a = {Mu}.new("Blastoid", 4, 3); say $a; say $a.WHAT; say PARROT($a); say $a()

[16:33] <p6eval> rakudo 4fc3af: OUTPUT«Blastoid␤Block()␤Perl6Scalar->Block␤invoke() not implemented in class 'Perl6Str'␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[16:33] <diakopter> is it doing what I think it's doing?

[16:33] <diakopter> stashing a Perl6Str as the referent of $a, but saying it's a Block?

[16:36] <jnthn> diakopter: I'm entirely confused by what on earth it's doing there.

[16:36] <diakopter> rakudo: my $a = {Mu}.new({444}, 4, 3); say $a; say $a.WHAT; say PARROT($a); say $a()

[16:36] <p6eval> rakudo 4fc3af: OUTPUT«_block64␤Block()␤Perl6Scalar->Block␤444␤»

[16:37] <diakopter> rakudo: my $a = "string".new({444}, 4, 3); say $a; say $a.WHAT; say PARROT($a); say $a()

[16:37] <p6eval> rakudo 4fc3af: OUTPUT«Null PMC access in get_string()␤current instr.: 'perl6;Mu;CREATE' pc 1735 (src/builtins/Mu.pir:208)␤»

[16:37] <jnthn> Certainly it's wrong though.

[16:37] <dalek> nqp-rx: 0d1e1b5 | pmichaud++ |  (2 files):

[16:37] <dalek> nqp-rx: Better handling of single-angle items with spaces (e.g., < a > becomes 'a'

[16:37] <dalek> nqp-rx: and not ' a ').

[16:37] <dalek> nqp-rx: review: http://github.com/perl6/nqp-rx/commit/0d1e1b5f8e5ec0ee8476e82ff02e1507b47db268

[16:37] <jnthn> pmichaud: ping

[16:38] <diakopter> rakudo: my $a = "string".new(''); # masakbot

[16:38] <p6eval> rakudo 4fc3af: OUTPUT«Null PMC access in get_string()␤current instr.: 'perl6;Mu;CREATE' pc 1735 (src/builtins/Mu.pir:208)␤»

[16:39] * masak submits rakudobug

[16:39] <colomon> masak: weren't you telling me the other day that you only averaged one bug submission per day?  ;)

[16:40] <masak> colomon: yes. :)

[16:40] <masak> colomon: but there's been a drought lately.

[16:40] <colomon> how many have you submitted this week?

[16:40] <jnthn> Today must be the great flood.

[16:41] * masak checks

[16:41] <masak> jnthn: when it rains, it pours :)

[16:42] <diakopter> at least the bugs aren't mainly on the plain

[16:42] <masak> 26 this week.

[16:42] <masak> rakudo: "string".new('')

[16:42] <p6eval> rakudo fad944: OUTPUT«Null PMC access in get_string()␤current instr.: 'perl6;Mu;CREATE' pc 1735 (src/builtins/Mu.pir:208)␤»

[16:42] <colomon> So that makes up for all of January, more or less.... :)

[16:43] <masak> rakudo: "string".new()

[16:43] <p6eval> rakudo fad944: OUTPUT«Null PMC access in get_string()␤current instr.: 'perl6;Mu;CREATE' pc 1735 (src/builtins/Mu.pir:208)␤»

[16:43] <pmichaud> jnthn: pong

[16:43] <masak> colomon: it's a good month, I won't deny that. :)

[16:44] <PerlJam> ng becoming master has helped :)

[16:44] <jnthn> pmichaud: If you're Doing Stuff in nqp-rx, and it's easy...

[16:45] <jnthn> pmichaud: ...maybe you could s/new ['Hash']/root_new ['parrot';'Hash']/ ?

[16:45] <jnthn> pmichaud: Then we can finally switch Hash in Rakudo to being a class.

[16:45] <pmichaud> looking.

[16:45] <jnthn> Thanks.

[16:45] <pmichaud> I think that may be a pct issue as much as an nqp-rx one.

[16:45] * PerlJam bets it is easy

[16:46] <jnthn> pmichaud: OK.

[16:46] <pmichaud> jnthn: do you have a quick example where NQP (or PCT) is generating 'Hash' ?

[16:47] <pmichaud> grrr, fixing the parcel string bug is proving to be painful

[16:48] <pmichaud> keep ending up with infinite recursions

[16:48] <jnthn> pmichaud: IIRC, my %h; in NQP vivifying to new ['Hash'] is the main one.

[16:48] <pmichaud> jnthn: okay, working.

[16:52] *** ruoso left
[16:54] <diakopter> rakudo: our %a(4,4); say %a.perl  # what is the (4,4) supposed to do?

[16:54] <p6eval> rakudo fad944: OUTPUT«{}␤»

[16:54] <jnthn> std: our %a(4,4);

[16:54] <p6eval> std 29863: OUTPUT«ok 00:01 108m␤»

[16:54] <jnthn> heh

[16:55] <jnthn> If anything, S09 probably says what. :-)

[16:55] <diakopter> rakudo: our $a(4,4); say $a.perl

[16:55] <p6eval> rakudo fad944: OUTPUT«Mu␤»

[16:56] *** athenot left
[16:59] <PerlJam> I think that's a STD bug personally.

[17:01] <TimToady> looks like valid code to me

[17:01] <PerlJam> TimToady: what does it mean? 

[17:02] <TimToady> (our %a).(4,4)

[17:02] <TimToady> by "valid" I mean syntacticaly valid, not semantically

[17:02] *** masak left
[17:02] <PerlJam> so ... like I said, I think that's a STD bug :)

[17:03] <TimToady> what, the fact that it doesn't try to run the code? :)

[17:04] <TimToady> postfixes are certainly allowed on declarators

[17:04] <PerlJam> sure, but only {} and [] make any sense to me.

[17:04] <TimToady> rakudo: state $s++; say $s

[17:04] <p6eval> rakudo fad944: OUTPUT«Symbol '$s' not predeclared in <anonymous>␤current instr.: 'perl6;PCT;HLLCompiler;panic' pc 137 (compilers/pct/src/PCT/HLLCompiler.pir:101)␤»

[17:04] <PerlJam> and maybe <>

[17:04] <TimToady> alpha: state $s++; say $s

[17:05] <p6eval> alpha 30e0ed: OUTPUT«1␤»

[17:05] <TimToady> there, that's parsed as (state $s)++

[17:05] <TimToady> (4,4) is just another postfix

[17:05] <PerlJam> a postfix () on a declaration makes me think of BASIC and dimensionality and such.

[17:06] <TimToady> well, it's not particularly good style

[17:06] *** ruoso joined
[17:06] <TimToady> alpha: say ++(state $)

[17:07] <p6eval> alpha 30e0ed: OUTPUT«Malformed declaration at line 10, near "$)"␤in Main (file <unknown>, line <unknown>)␤»

[17:07] <PerlJam> let's just say that my personal universe rejects the notion that declarations should be able to have postfix parens in perl 6.  :-)

[17:08] <TimToady> but you're perfectly happy embedding "my $x" elsewhere in an expression?

[17:08] <PerlJam> yes.

[17:09] *** athenot joined
[17:10] <TimToady> at one point we allowed () as a "DIM" spec, but we took it back out again, iirc

[17:11] <TimToady> no wait, it's still there

[17:11] <TimToady> S09:712

[17:12] <PerlJam> Hmm.

[17:12] <TimToady> though what (4,4) would mean is unspecced

[17:15] *** dual joined
[17:16] *** SmokeMachine left
[17:16] <PerlJam> so, if our %a(4,4) means the same as (our %a).(4,4), does that mean that our @a[1..10] means the same as (our %a).(1..10) ?

[17:16] <PerlJam> er, (our @a).(1..10)

[17:16] <PerlJam> gah!

[17:16] <pmichaud> .oO(mixed brackets and parens...?)

[17:16] <PerlJam> (our @a).[1..10]

[17:17] <TimToady> no, but your premise is false by S09:712

[17:17] <TimToady> hence my "no wait"

[17:17] <TimToady> but maybe we will end up just reserving () at that spot

[17:18] <PerlJam> A sig for a sub I understand, but I don't understand a sig for a variable declaration.

[17:18] <pmichaud> afk  # lunch, voting

[17:18] <TimToady> the underlying notion is that a subscript lookup is really just a fancy function call

[17:20] <TimToady> but the concept doesn't seem well formed quite yet

[17:21] <pmichaud> jnthn: I think I have the root_new fixes... bootstrapping now

[17:21] <PerlJam> my @a[10][17];  # declaring an implicit sub that takes 2 parameters?

[17:21] *** lichtkind joined
[17:22] <PerlJam> wouldn't the 10 and 17 there already inform that subroutine's sig of the constraints on those 2 params?

[17:22] <jnthn> pmichaud++

[17:24] <pugssvn> r29864 | lwall++ | [S09] reserve the final () declaration syntax without committing to it meaning anything 

[17:24] <pmichaud> jnthn:  r44499

[17:24] <pmichaud> ("full house!")

[17:24] <jnthn> Nice!

[17:24] *** payload left
[17:24] <jnthn> OK, will try bumping PARROT_REVISION in a bit

[17:25] <jnthn> And see how it works out.

[17:25] <pmichaud> yeah, I'm curious to see if that causes any failz.

[17:25] <jnthn> Thanks.

[17:25] * PerlJam lunch &

[17:25] <TimToady> PerlJam: so yes, STD is currently parsing (4,4) as part of the declaration, not like ++

[17:26] *** mikehh_ joined
[17:27] *** mikehh left
[17:30] *** Trashlord joined
[17:30] *** mikehh_ left
[17:31] *** am0c left
[17:33] *** am0c joined
[17:34] *** meppl joined
[17:37] *** cdarroch joined
[17:37] *** cdarroch left
[17:37] *** cdarroch joined
[17:41] *** riffraff joined
[17:42] <marton_> if I asked you

[17:42] *** marton_ is now known as jaffa4

[17:42] <jaffa4> if I asked you

[17:43] <jaffa4> Why do you think one should Perl6 instread net? What would you say?

[17:43] <PerlJam> huh?

[17:43] <PerlJam> (that's what I would say)

[17:45] *** colomon left
[17:48] *** evilek joined
[17:48] <evilek> hello

[17:48] *** colomon joined
[17:48] <evilek> can i ask u about something?

[17:49] <colomon> sure.

[17:49] *** quester joined
[17:49] <evilek> how to open a .pl file in windows...

[17:50] <evilek> ?

[17:50] <jaffa4> Why do you think one should use Perl6 instread net? What would you say?

[17:50] *** iblechbot left
[17:50] <TimToady> I'd prefer to use Perl 6 and the net...

[17:50] *** Su-Shee left
[17:50] <jaffa4> How?

[17:51] <TimToady> Scrambled.

[17:51] <jaffa4> SO should there be a Perl6 project based on the net?

[17:51] <evilek> i have downloaded parrot

[17:51] <TimToady> you're not talking sense

[17:51] <evilek> but i dont know how to use it

[17:51] <colomon> evilek: Depends.  Do you want to edit the file or execute it?

[17:51] <evilek> execute

[17:51] <colomon> TimToady: perhaps jaffa4 means .Net?

[17:52] *** pmurias joined
[17:52] <jnthn> jaffa4: Are you talking about .Net?

[17:52] <jaffa4> yes

[17:52] <jnthn> Ah. :-)

[17:52] <TimToady> "net" is a heavily overloaded word

[17:52] <jnthn> jaffa4: I know both. :-)

[17:52] <colomon> evilek: Is it a Perl 5 or a Perl 6 script you have?

[17:52] <evilek> dunno... 

[17:52] <evilek> my friend gave me and wanted to check something

[17:53] <evilek> how cann i check what ver it is?

[17:53] <PerlJam> evilek: it's probably perl 5

[17:53] <evilek> bit it is not new so i thing it might be 5

[17:54] <pmurias> ruoso: hi

[17:54] <evilek> but*

[17:54] * quester just submitted rakudobug #73148:  [PATCH] Fix bug #68752, make perl6 --version more informative

[17:54] <jnthn> evilek: Most likely, yes.

[17:54] <jaffa4> SO should there be a Perl6 project based on the. net?

[17:54] <jnthn> evilek: So Parrot won't help you with that.

[17:54] <jnthn> evilek: Grab http://strawberryperl.com/ - that should work out better. :-)

[17:55] <evilek> ok ill download it, and what after?

[17:55] <TimToady> jaffa4: that's what sprixel is, from time to time

[17:55] <TimToady> ask diakopter about it

[17:56] *** quietfanatic joined
[17:56] <jnthn> evilek: After installing that, it may set up association for .pl - if not, just locate the perl.exe that it installed and associate pl files with that.

[17:57] <jnthn> Alternatively, add the directory perl.exe is in to your path, and then it's just perl foo.pl

[17:57] <evilek> okey

[17:57] <evilek> thx rly;]

[17:57] <jnthn> Oh, the insaller may add it to your path anyway.

[17:57] <evilek> if something go wrong ill come again

[17:57] <jnthn> evilek: On that site there's a Perl on Win32 chat that's more likely to be helpful than here.

[17:57] <evilek> ok

[17:58] <jnthn> evilek: Folks here are mostly working on making the next version of Perl. :-)

[17:58] <pmurias> jnthn: isn't that 5.12?

[17:58] *** Su-Shee joined
[17:58] <jnthn> :-P

[17:59] <jnthn> pmurias: I *knew* somebody would have a snarky remark.

[17:59] <jnthn> :-)

[18:01] *** stephenlb joined
[18:02] <lichtkind> jnthn: in what areas is your rakudo engangement, or simply all over the place?

[18:03] *** payload joined
[18:04] <jnthn> Mostly dispatch, multi-dispatch, type system and object model stuff.

[18:04] <jnthn> But I do other bits too. :-)

[18:06] <PerlJam> blizkost!

[18:06] <evilek> i think thats working, but my console windows is dissapearing everytime i want to open that file

[18:06] <evilek> ;(

[18:10] <jaffa4> TimToady, thanks

[18:10] <lichtkind> jnthn: thanks i will encorporate that in a minute

[18:11] <lichtkind> PerlJam: i would like you also interview but in 10 min my kitchen needs attention now

[18:11] <evilek> jnthn have u any idea?

[18:11] <PerlJam> I've got a meeting in about 10 minutes

[18:12] <quietfanatic> evilek: Probably it disappears when the program exits.  If you need it to stay around, you probably gotta open your own console and run the program from there.

[18:13] <evilek> mhm ok thx

[18:13] <lichtkind> PerlJam: so please post now you involvment into perl 6 i will grab it

[18:13] <quietfanatic> evilek: (I assumed you're double-clicking the file to open it)

[18:14] *** quester left
[18:15] <PerlJam> lichtkind: I would have no idea what to say.

[18:15] *** ShaneC joined
[18:15] <PerlJam> lichtkind: I annoy TimToady about the language and I annoy pmichaud about Rakudo  :)

[18:15] <lichtkind> PerlJam: i see you so often hard to believe your a lurker

[18:15] <evilek> ok everything working

[18:16] *** riffraff left
[18:16] <evilek> thx to U guys

[18:16] <evilek> bye

[18:16] *** evilek left
[18:16] <lichtkind> PerlJam: so your chief annoyer, thats  an impressive title

[18:16] <PerlJam> lichtkind: well, I contribute every once in a while, but I'm not consistent

[18:16] <lichtkind> PerlJam: i could insert a joke about consistency of jam here :)

[18:17] <PerlJam> lichtkind: you'd get a better picture of each person if you asked everyone else what that person does rather than asking that person what they do.  :)

[18:17] <lichtkind> PerlJam: allright in case you get som ... well but most people here are honest :)

[18:18] <lichtkind> PerlJam: in case you got more for me we can talk later :)

[18:18] <PerlJam> lichtkind: oh, and I'm one of the people nominally working on a Perl 6 book.

[18:18] <lichtkind> thats already noted :)

[18:19] <colomon> PerlJam: you should be annoying the book authors, there's a lot of writing to get done in the next month or so.  :)

[18:20] <jnthn> huh...we're writing a book?

[18:20] <jnthn> :-)

[18:20] * jnthn needs to give tuits to that Real Soon.

[18:21] *** jaldhar left
[18:21] *** jaldhar joined
[18:31] * jnthn -> supermarket, bbl

[18:32] * colomon would be off to the market himself, if it weren't snowing...

[18:32] <jnthn> I waited here for the rain to stop. Of course, as soon as I step out of the door it'll probably start again.

[18:35] *** payload left
[18:46] *** quietfanatic left
[18:52] *** barney left
[18:57] *** TiMBuS joined
[19:07] *** riffraff joined
[19:08] *** spinclad joined
[19:08] <pugssvn> r29865 | pmichaud++ | [t/spec]:  Unfudge a passing rakudo todo test in range.t. 

[19:09] <dalek> rakudo/master: 459e001 | pmichaud++ | src/builtins/Parcel.pir:

[19:09] <dalek> rakudo/master: Remove a flatten property fossil.

[19:09] <dalek> rakudo/master: review: http://github.com/rakudo/rakudo/commit/459e0012451e7217731e85af945f4d3bc33e98f9

[19:10] <pugssvn> r29866 | lwall++ | [STD] reserve the () shape syntax 

[19:15] <colomon> oh noes, I left my changes spectesting while I fed the boy, and now there are more changes!

[19:16] <pmichaud> colomon: oh, should I stop fixing bugs...?  ;-)

[19:16] <colomon> no.

[19:17] <colomon> any day where there are so many patches they get in the way of each other is probably a good day...  :)

[19:17] <TimToady> as far as I know, the only .t that my change breaks is t/spec/S02-builtin_data_types/array.t

[19:17] *** am0c left
[19:18] *** iblechbot joined
[19:18] <TimToady> The () shape syntax in array declarations is reserved at t/spec/S02-builtin_data_types/array.t line 278:

[19:18] <TimToady> ------>     my @arr(-->Num)⏏ = <1 2.1 3.2>;

[19:19] <TimToady> PerlJam++ for annoying me :)

[19:20] <dalek> rakudo/master: 06437e6 | pmichaud++ | t/spectest.data:

[19:20] <dalek> rakudo/master: Comment out one-pass-parsing.t from t/spectest.data until we pass its test.

[19:20] <dalek> rakudo/master: review: http://github.com/rakudo/rakudo/commit/06437e64a85711ef4e32ef54640491e1f88ba621

[19:20] <dalek> rakudo/master: 8faa503 | pmichaud++ | src/core/operators.pm:

[19:20] <dalek> rakudo/master: Remove some unneeded pir::boxing.

[19:20] <dalek> rakudo/master: review: http://github.com/rakudo/rakudo/commit/8faa503b2f9b7074e7c5744d37f1b6eebe9ee513

[19:21] <colomon> dang it, I didn'

[19:21] <colomon> t  even get spectest started that time!  ;)

[19:23] <pugssvn> r29867 | lwall++ | [array.t] comment out tests that use reserved syntax 

[19:27] <lichtkind> jnthn: please check http://www.perlfoundation.org/perl6/index.cgi?blizkost

[19:28] <jnthn> .oO( if it says the name is bad German for fast food I'll cry )

[19:28] <jnthn> lichtkind: more like "nearness" in English

[19:28] <jnthn> lichtkind: But yes, fine. :-)

[19:29] *** Chillance joined
[19:29] <lichtkind> jnthn: i just didnt know that nearness is an english word too

[19:30] <lichtkind> jnthn: you did also the .nt bridge for parrot?

[19:31] *** ruoso left
[19:31] <jnthn> lichtkind: .net?

[19:32] <jnthn> Oh, yes, ages ago.

[19:32] <jnthn> It's very bitrotten

[19:32] <lichtkind> jnthn: i guessed that

[19:32] <lichtkind> jnthn: but its a medal on your chest :)

[19:32] <jnthn> lichtkind: Maybe mention in blizkost page primary aim is to try and get access to some of CPAN from Rakudo.

[19:33] <lichtkind> yes mom

[19:33] <pugssvn> r29868 | colomon++ | [t/spec] Refudge capitalize.t. 

[19:34] *** burmas joined
[19:34] <lichtkind> jnthn: http://www.perlfoundation.org/perl6/index.cgi?jonathan_worthington now longer

[19:36] <PerlJam> lichtkind: did you put me down as chief annoyer?  :)

[19:36] <jnthn> .oO( how does he know what spam I buy stuff from? )

[19:37] <lichtkind> PerlJam: noo i asked you :)

[19:37] <dalek> rakudo/master: 0b8098e | (Solomon Foster)++ | t/spectest.data:

[19:37] <dalek> rakudo/master: Turn on capitalize.t.

[19:37] <dalek> rakudo/master: review: http://github.com/rakudo/rakudo/commit/0b8098e9c2328a397f478daec137f64ec16bad6a

[19:37] <dalek> rakudo/master: b9b14f9 | (Solomon Foster)++ | src/core/Any-str.pm:

[19:37] <dalek> rakudo/master: Slightly awkward but functional implementation of capitalize.

[19:37] <dalek> rakudo/master: review: http://github.com/rakudo/rakudo/commit/b9b14f9d1c60c5b0dfa57e1fc15c6d6ee3d9cca3

[19:38] <avar> Where's that chart that showed a percentage of the passing testsuite for rakudo (and maybe other compilers too)

[19:38] <PerlJam> avar: http://rakudo.org/status

[19:39] <pmichaud> colomon: why not the version in alpha?

[19:39] <pmichaud>         self.lc.subst(/\w+/, { .ucfirst }, :global)

[19:39] <avar> PerlJam: Thanks

[19:40] <colomon> pmichaud:  subst can't handle closures yet.

[19:40] <avar> What's the recent regression on that chart about?

[19:40] <PerlJam> avar: switched development branches.

[19:40] *** riffraff left
[19:40] <avar> The chart isn't on master anymore?

[19:41] <colomon> avar: master isn't the master you're thinking of any more.

[19:41] <PerlJam> avar: it is, it's just that master has changed

[19:41] <PerlJam> avar: the old master is now called alpha, and the old ng is now master.

[19:42] <avar> And ng solved a lot of regressions but there are lots of tests that don't pass now?

[19:43] *** hercynium joined
[19:43] <PerlJam> avar: ng lets us move forward better than alpha did, but it isn't feature-equivalent to alpha (yet).

[19:44] <avar> Yeah I guessed, thanks for the update

[19:45] <PerlJam> avar: by the march release I predict we'll be passing at least 30,000 tests again

[19:47] <lichtkind> PerlJam: is that the reason rakudo * will come in april?

[19:49] <PerlJam> lichtkind: you'll have to ask pmichaud why april  :)

[19:49] <pmichaud> jnthn: ping

[19:49] <avar> because releasing master now would be a regression to the last release so waiting to bring it up to feature parity makes sense?

[19:50] <pmichaud> avar: it's always been our intent to release in April.

[19:50] <pmichaud> (well, at least since last summer)

[19:50] *** riffraff joined
[19:56] <avar> pmichaud: Right, I was just speculating on lichtkind's "why April" question

[19:56] <pmichaud> oh, sorry, mixed up my threads :)

[19:57] *** coke joined
[19:57] <lichtkind> he parrot article seams broken

[19:57] <coke> hio. I just did a fresh install of parrot trunk, a git pull, and trying to build rakudo dies with a memory panic.

[19:58] <coke> lichtkind: URL?

[19:58] *** coke is now known as Coke

[19:58] *** ruoso joined
[19:58] <lichtkind> coke: http://www.perlfoundation.org/perl6/index.cgi?parrot i mean technically broken, i cant attach tags to it

[19:59] <lichtkind> Coke: http://www.perlfoundation.org/perl6/index.cgi?will_coleda

[20:00] <Coke> k. just wondering if you were referring to the old parrot wiki on the TPF, which should be dead.

[20:01] *** mberends joined
[20:03] *** payload joined
[20:03] <colomon> Coke: you mean the latest Parrot with the latest Rakudo?

[20:03] <pmichaud> coke/colomon:  testing that now

[20:07] <Coke> colomon: yes.

[20:07] <jnthn> pmichaud: pong

[20:07] <[particle]> i think i saw a failure last night with the same setup on my laptop

[20:07] <[particle]> it was late, i'll boot it and recheck

[20:07] <pmichaud> jnthn: I'm trying to switch Mu/Any in rakudo

[20:07] <colomon> most of us are using Parrot r44371, I think.

[20:08] <pmichaud> when I do that, I get a bunch of errors like

[20:08] <pmichaud> Method 'slurpy' not found for invocant of class ''

[20:08] <Coke> 44490, here.

[20:08] <pmichaud> any clues?

[20:08] <jnthn> pmichaud: backtrace?

[20:08] <pmichaud> partial backtrace:

[20:08] <pmichaud> Method 'slurpy' not found for invocant of class ''

[20:08] <pmichaud> current instr.: 'perl6;Block;_block14428' pc 356594 (src/gen/core.pir:51669)

[20:08] <pmichaud> called from Sub 'perl6;Block;count' pc 356461 (src/gen/core.pir:51628)

[20:08] <pmichaud> called from Sub 'perl6;MapIterator;get' pc 358139 (src/gen/core.pir:52190)

[20:08] <pmichaud> called from Sub 'perl6;List;get' pc 10412 (src/builtins/Role.pir:70)

[20:08] <pmichaud> called from Sub 'perl6;Iterator;eager' pc 10179 (src/gen/RoleToInstanceApplier.pir:130)

[20:08] <pmichaud> called from Sub 'perl6;Seq;!STORE' pc 13596 (src/builtins/Routine.pir:77)

[20:09] <pmichaud> oh, perhaps Block.count is a big clue

[20:10] <colomon> If we were using the right stringification method, would that be invocant of class 'Mu()', do you think?

[20:10] <TimToady> std: my &foo($,$);

[20:10] <p6eval> std 29868: OUTPUT«[31m===[0mSORRY![31m===[0m␤The () shape syntax in array declarations is reserved at /tmp/phIKcn1je6 line 1:␤------> [32mmy &foo($,$)[33m⏏[31m;[0m␤FAILED 00:01 111m␤»

[20:10] <TimToady> oops

[20:10] <pmichaud> the code that is causing it:

[20:10] <jnthn> pmichaud: It is, it means something is wrong with Signature.

[20:10] <TimToady> std: my %foo($,$);

[20:10] <p6eval> std 29868: OUTPUT«[31m===[0mSORRY![31m===[0m␤The () shape syntax in array declarations is reserved at /tmp/VDDnxBxJDo line 1:␤------> [32mmy %foo($,$)[33m⏏[31m;[0m␤FAILED 00:01 107m␤»

[20:11] <pmichaud>         my @params = self.signature.params;

[20:11] <pmichaud>         for @params -> $p {

[20:11] <pmichaud>             $count++ unless $p.slurpy;

[20:11] <pmichaud>         }

[20:11] <TimToady> hmm

[20:11] <jnthn> Right

[20:11] <jnthn> say $p.WHAT

[20:11] <jnthn> That could help to know.

[20:11] <jnthn> But know immediate guesses...may I seee the diff?

[20:11] <jnthn> *no

[20:12] *** hercynium left
[20:12] <pmichaud> http://nopaste.snit.ch/19800  # Mu->Any diff

[20:13] <jnthn> hmm

[20:13] <jnthn> Taht should be a fairly innocuous change. :-/

[20:13] <pmichaud> coke:  parrot r44504 builds and runs for me

[20:13] <pmichaud> (at least passes "make test")

[20:14] <Coke> builds ... rakudo? or just itself?

[20:14] <pmichaud> builds and runs rakudo

[20:14] <Coke> k. I'll try that and see if I can do a binary search.

[20:14] <pmichaud> pmichaud@plum:~/rakpar$ parrot_install/bin/parrot_config revision

[20:14] <pmichaud> 44504

[20:15] <Coke> oh, that's newer. =-)

[20:15] <jnthn> pmichaud: applied locally, building.

[20:16] <pmichaud> jnthn: the source that generates that error (among lots of others)...

[20:16] <pmichaud> my %e = enum <a b c>;  say %e.keys;

[20:16] <pmichaud> (although *why* that would be going through MapIterator I have no clue.)

[20:17] <colomon> pmichaud: Hmmm, I added Any.keys the other day.

[20:17] <colomon> Thought I used gather instead of map, however.

[20:18] *** JOHND joined
[20:18] <colomon>         self.iterator.map({ $^pair.key })

[20:18] <colomon> presumably that is it.

[20:18] <jnthn> pmichaud: This golfs it:

[20:18] <jnthn> sub foo($x, $y?) { }; say &foo.count

[20:19] <JOHND> breaker, breaker

[20:19] <colomon> (That code is from EnumMap.keys)

[20:19] <jnthn> sub foo($x, $y?) { }; say &foo.signature.params # Any() - wtf?!

[20:19] <JOHND> where can I try to understand the relationship of "modules" vs "packages" vs "classes"

[20:19] <JOHND> say, vs the Java concept of them

[20:20] <pmichaud>     result = getattribute self, '$!param_cache'

[20:20] <pmichaud>     if result == 'Mu()' goto compute_result

[20:20] <pmichaud> grrrrrrrrrr

[20:20] <pmichaud> why oh why are we doing a string comparison there?!?!?!

[20:21] <pmichaud> (using strings to test for classes or protoobjects is Evil.)

[20:21] <jnthn> pmichaud: oh, gah

[20:21] <jnthn> Yes, that's it.

[20:21] <jnthn> pmichaud: I just foudn the same thing.

[20:21] <jnthn> pmichaud: It dated back to when defined was giving back silly answers.

[20:22] <pmichaud> every time I find one of those I worry about how many more might be lurking.  :-(

[20:22] <jnthn> I've seen few.

[20:22] <pmichaud> so, can I just test for boolean true/false?  or should I test for defined, or ... ?

[20:22] <jnthn> That's the only result for Mu() in the codebase

[20:22] <jnthn> pmichaud: Erm, in theory defined should do it.

[20:22] <jnthn> In practice, it didn't.

[20:22] <jnthn> Then.

[20:23] *** payload left
[20:23] <pmichaud> testing.

[20:23] <jnthn> here too, though dinner is just about ready.

[20:24] <pmichaud> when's the last day?

[20:24] <mberends> JOHND: see Synopses 10, 11, 12 in http://perlcabal.org/syn

[20:24] <JOHND> looking...

[20:24] <JOHND> (thanks)

[20:26] <pmichaud> okay, changing that seems to have fixed the golf case.  spectesting.

[20:26] <jnthn> pmichaud: yes, here too

[20:27] <pmichaud> much better, most of the errors seem to have disappeared

[20:27] <jnthn> Good

[20:27] <jnthn> dinner, back in a bit

[20:27] *** hercynium joined
[20:32] <jaffa4> can you tell me how to complete a name in xchat?

[20:33] <mberends> jaffa4: type enough letters that the name is unique, then hit the Tab key

[20:33] <jaffa4> ok

[20:34] <pugssvn> r29869 | pmichaud++ | [t/spec]:  Untyped variables now default to Any instead of Mu. 

[20:35] *** ruoso left
[20:40] <dalek> rakudo/master: c495888 | pmichaud++ | src/builtins/ (2 files):

[20:40] <dalek> rakudo/master: Switch untyped variables to default to Any instead of Mu.

[20:40] <dalek> rakudo/master: review: http://github.com/rakudo/rakudo/commit/c4958885b2591caf4bfd976f3635245d7b8d0c9f

[20:40] <dalek> rakudo/master: 94a6c44 | pmichaud++ |  (2 files):

[20:40] <dalek> rakudo/master: Merge branch 'master' of [email@hidden.address]
[20:40] <dalek> rakudo/master: review: http://github.com/rakudo/rakudo/commit/94a6c44df03adcdea91ea829446cb8445d32cfdd

[20:40] <colomon> \o/

[20:43] <jnthn> pmichaud: Did that break any junction tests, out of curiosity?

[20:43] <pmichaud> I haven't put the type constraint in place yet

[20:43] <pmichaud> only the initial value

[20:43] <jnthn> oh, OK.

[20:43] <pmichaud> and yes, adding the type constraint seems to be causing lots of failz also

[20:43] <jnthn> .oO( hope those wants aren't my fault too )

[20:44] <pmichaud> it's causing fails in core initializations atm

[20:44] <pmichaud> I'm improving the error messages a bit

[20:44] <jnthn> Ouch!

[20:50] *** TiMBuS left
[20:51] <pugssvn> r29870 | lwall++ | [STD] redo previous patch correctlier 

[20:51] <pmichaud> looks like we're assigning a P6LowLevelSig

[20:51] <pmichaud> which isn't a subclass of Any

[20:52] <jnthn> erg

[20:53] *** burmas left
[20:53] <jnthn> pmichaud: May be able to work around it by giving Signature a custom .new

[20:53] <pugssvn> r29871 | colomon++ | [t/spec] Unfudge six tests fixed by pmichaud++. 

[20:53] <pmichaud> well, it's likely to be an issue for all foreign objects

[20:54] <jnthn> Oh. Though Any.ACCEPTS is meant to handle foreign objects.

[20:54] <pmichaud> Any.ACCEPTS, or Mu.ACCEPTS?

[20:55] <jnthn> Well, it calls the same code...

[20:55] <jnthn> For Mu it just accepts everything

[20:55] <jnthn> For Any it accepts things that isa Any (naturally) 

[20:55] <jnthn> (more)

[20:55] *** jonasbn joined
[20:55] <jnthn> But also checks if it's ultimately a p6object, and if not assumes it's foreign.

[20:55] <jnthn> At least, that's what I thought it did. :-)

[20:56] <pmichaud> checking

[20:56] <pmichaud> any idea where that ACCEPTS is defined?

[20:56] <lichtkind> pmichaud: please check  http://www.perlfoundation.org/perl6/index.cgi?pge

[20:56] <jnthn> pmichaud: p6object.pir

[20:57] <jnthn> pmichaud: We don't override the one from there, iirc.

[20:57] <pmichaud> jnthn: oh, the one in parrot

[20:57] <pmichaud> checking...

[20:57] <jnthn> Right.

[20:57] <pmichaud> I'm sure it only deals with Mu.

[20:57] <lichtkind> thanks

[20:57] <pmichaud> oh, maybe not

[20:57] <pmichaud> hmmm

[20:59] <pmichaud>     # If this fails, and we want Any, and it's something form outside

[20:59] <pmichaud>     # of the Perl 6 world, we'd best just accept it.

[20:59] <pmichaud>     unless $S0 == 'Any' goto end

[20:59] <pmichaud>     $I0 = isa topicwhat, 'Mu'

[20:59] <pmichaud>     unless $I0 goto accept_anyway

[20:59] <pmichaud>     $I0 = 0

[20:59] <pmichaud>     goto end

[21:00] <pmichaud> ...that's some weird code.

[21:01] *** jonasbn left
[21:01] <jnthn> pmichaud: Doesn't look wrong.

[21:02] <jnthn> Even if mind-bending. :-)

[21:02] * jnthn had to read it twice though

[21:02] <TimToady> std: my %foo($,$);

[21:02] <p6eval> std 29871: OUTPUT«[31m===[0mSORRY![31m===[0m␤The () shape syntax in array declarations is reserved at /tmp/8jsNEpynw5 line 1:␤------> [32mmy %foo($,$)[33m⏏[31m;[0m␤FAILED 00:01 109m␤»

[21:03] <mberends> lichtkind: see the updated http://www.perlfoundation.org/perl6/index.cgi?sprixel

[21:03] <lichtkind> saw alread that :)

[21:04] <pmichaud> > say Any.ACCEPTS(pir::new__Ps('P6LowLevelSig'))

[21:04] <pmichaud> 0

[21:04] <pmichaud> :-(

[21:04] <lichtkind> mberends++

[21:04] <mberends> it's re-updated

[21:04] *** riffraff left
[21:04] <TimToady> hmm, it's lying about which version of std it's running...

[21:05] <jnthn> pmichaud: aww.

[21:06] <jnthn> pmichaud: oh, I know why.

[21:06] *** riffraff joined
[21:06] <jnthn> pmichaud: Don't we do .WHAT on it?

[21:06] <jnthn> Are we somehow failing because of that?

[21:06] <jnthn> (at the top of the ACCEPTS meth, iirc)

[21:06] <pmichaud> yes, we do

[21:06] <lichtkind> mberends: its good, has real mean and its readable

[21:06] <jnthn> Check that logic.

[21:06] *** SmokeMachine joined
[21:06] <jnthn> It may be dodgy.

[21:06] <pmichaud> oh, so we never reach the code that allows foreign objects through :)

[21:06] <lichtkind> pmichaud: excuse me, found error?

[21:07] <jnthn> pmichaud: Right, that's what I expected.

[21:07] <jnthn> pmichaud: Anywya, that's The Bug I guess. :)

[21:07] <lichtkind> mberends: checked my edits?

[21:07] <pmichaud> lichtkind: PGE entry looks fine to me -- I might add some minor updates

[21:07] <lichtkind> pmichaud++ thanks

[21:07] <mberends> lichtkind: will do now

[21:08] <pmichaud> jnthn: yes, looks like that's the bug.

[21:09] <pmichaud> that's a bit bigger than I want to tackle right this minute, so I'll take a break and fix it up later

[21:09] <jnthn> OK, fixable then.

[21:09] <jnthn> OK

[21:09] <pmichaud> since it will involve bumping PARROT_REVISION also :)

[21:09] <jnthn> I'm still fighting the same thing I have been all day.

[21:09] <jnthn> ($other-job)

[21:09] <jnthn> Good news is once that's cleared up, I don't have to worry about $other-job again until after the hackathon. :-)

[21:09] *** japhb joined
[21:13] *** gopek joined
[21:14] *** gopek left
[21:20] *** ignacio_ left
[21:25] <lichtkind> allright enough for today touched 28 article, 2 new

[21:25] <lichtkind> 3new :)

[21:28] <colomon> lichtkind++

[21:28] <lichtkind> colomon: thanks but yours is still missing :)

[21:29] <colomon> ;)

[21:30] <mberends> lichtkind: a few people have said they're too modest or shy to write about themselves, here or elsewhere. It's also a wiki tradition to not write autobiographically. So we should really ask people to write about each other...

[21:31] <lichtkind> mberends: yes but on the other hand if leto didnt tell me where he codes i would never know

[21:32] <lichtkind> luckily im not modest :)

[21:32] <mberends> true, and true ;)

[21:34] <lichtkind> mberends: just added a link to sprixel

[21:34] *** ignacio_ joined
[21:34] <TimToady> std: my %foo($,$);

[21:34] <p6eval> std 29871: OUTPUT«[31m===[0mSORRY![31m===[0m␤The () shape syntax in hash declarations is reserved at /tmp/eNkAfm0Z7Z line 1:␤------> [32mmy %foo($,$)[33m⏏[31m;[0m␤FAILED 00:01 109m␤»

[21:34] <TimToady> that's better

[21:34] <TimToady> std: my &foo($,$);

[21:34] <p6eval> std 29871: OUTPUT«[31m===[0mSORRY![31m===[0m␤The () shape syntax in routine declarations is reserved (maybe use :() to declare a longname?) at /tmp/yf1loWcC2Q line 1:␤------> [32mmy &foo($,$)[33m⏏[31m;[0m␤FAILED 00:01 109m␤»

[21:35] <PerlJam> TimToady++

[21:35] <lichtkind> :)

[21:37] <lichtkind> mberends: also a place worthy of your attention http://www.perlfoundation.org/perl6/index.cgi?elf whre you have lot more knowledge than myself

[21:38] <mberends> lichtkind: I'd be dreading that one, it will take some spelunking in the source code and quite a bit of time. I never got it running locally because of software dependencies.

[21:38] *** japhb left
[21:39] *** japhb joined
[21:39] <lichtkind> mberends: it was just a guess of mine :)

[21:39] <lichtkind> mberends: i have here an ugly bug too try to add the tag Parrot to http://www.perlfoundation.org/perl6/index.cgi?parrot

[21:40] <mberends> I'm editing the Parrot page atm

[21:40] <lichtkind> but not the whole evening :)

[21:41] <mberends> saved Parrot page

[21:42] <pmurias> isn't it hibernates in misc/elf misc/elfish enough about elf

[21:42] <lichtkind> pmurias: what you mean?

[21:42] <Coke> pmichaud: that version still panics out of mem for me.

[21:43] <mberends> elf has has been dormant for approximately 12 months now

[21:43] <lichtkind> mberends: ahh new info for the article :)

[21:43] <pmichaud> Coke: it's running out of memory?  at what point?

[21:45] <pmurias> lichtkind: what i mean is that it doesn't make much sense to spend time writing about mothballed projects

[21:45] <Coke> /home/coke/bird/bin/parrot  src/gen/perl6.pbc --target=pir \ src/gen/core.pm > src/gen/core.pir

[21:45] <lichtkind> pmurias: ah that i understand :)

[21:45] <Coke> Failed allocation of 128905652 bytes

[21:45] <Coke> Parrot VM: PANIC: Out of mem!

[21:45] <pmichaud> ...128 megabytes?

[21:45] <PerlJam> core is just too big  :)

[21:46] <lichtkind> pmurias: i just hoped mberends would have some elf xp and could spit out some lines

[21:46] <pmichaud> I wonder what would be trying to allocate 128 meg, though?

[21:46] <pmichaud> (I assume that's in a single chunk)

[21:47] <Coke> yes.

[21:47] <pmichaud> coredump + backtrace might be useful :)

[21:50] <PerlJam> Hmm.

[21:54] <PerlJam> I was just watch the core.pm compilation on my system.  It seems to allocate about 4meg at a time until it hits somewhere close the 300meg where it fluctuates for a while,  then at some point it jumps up to about 600+ meg

[21:54] <PerlJam> s/watch/watching/

[21:54] *** uniejo left
[21:55] <PerlJam> no wonder people have trouble compiling rakudo on low memory systems.  I had no idea compiling it took so much ram until now.

[21:55] <Coke> rerunning that step under gdb.

[21:55] <Coke> there's a reason partcl was using pbc_merge for a while. =-)

[21:56] <Coke> (building the compiler in smaller chunks and then combining them later.)

[21:56] <pmichaud> it's not yet that easy in the p6 case.

[21:56] <pmichaud> there are a lot of cross-dependencies in class names.

[21:56] <Coke> shouldn't even be necessary. =-)

[21:58] <Coke> http://nopaste.snit.ch/19801

[21:58] <Coke> (bt after memory panic)

[21:58] <Coke> not sure how that's going to help. =-)

[22:00] <jnthn> It's just trying to enlarge a memory block in a typical GC run, it seems.

[22:00] <jnthn> s/block/pool/

[22:01] <jnthn> So hard to pin down. :-(

[22:01] *** Yoya joined
[22:02] *** blarg joined
[22:04] <colomon> alpha: sub infix:<[+]>(Range $r) { say "hello" }; say [+] 2, 3, 5; [+] 1..40;

[22:05] <p6eval> alpha 30e0ed: OUTPUT«10␤»

[22:05] <PerlJam> colomon: did you mean prefix?

[22:06] <colomon> oooooh

[22:06] <colomon> alpha: sub prefix:<[+]>(Range $r) { say "hello" }; say [+] 2, 3, 5; [+] 1..40;

[22:06] <p6eval> alpha 30e0ed: OUTPUT«Nominal type check failed for parameter '$r'; expected Range but got List instead␤in Main (file src/gen_setting.pm, line 324)␤»

[22:06] <colomon> PerlJam: thanks.

[22:06] <colomon> :)

[22:07] <blarg> are these weird characters '􏿽xAB', '􏿽xBB' going to be part of the language? theyre not on english keyboards

[22:07] <PerlJam> blarg: yes, but there are Texas versions  << and >>

[22:07] *** pmurias left
[22:07] <PerlJam> blarg: perl 6 is unicode.  those are unicode characters  :)

[22:08] *** LifeIsPain joined
[22:08] <blarg> PerlJam: I see

[22:09] <PerlJam> blarg: also, I bet there are some french people somewhere that would take exception to you calling guillemets weird  :)

[22:09] <blarg> PerlJam: ya but the french are weird 

[22:09] <PerlJam> blarg: oh, and see this: http://en.wikipedia.org/wiki/Guillemets#Typing_.22.C2.AB.22_and_.22.C2.BB.22_on_computers

[22:09] <blarg> PerlJam: :)

[22:11] <blarg> PerlJam: so since it's unicode, other languages, like hebrew or chinese, can use their character set for method names and whatnot?

[22:12] <PerlJam> sure.

[22:12] <blarg> very cool

[22:12] <PerlJam> (you could too ;)

[22:15] <jnthn> rakudo: my $Юлия = 'Красивая'; say $Юлия

[22:15] <p6eval> rakudo 94a6c4: OUTPUT«Красивая␤»

[22:15] <jnthn> \o/

[22:15] *** jaffa4 left
[22:16] <PerlJam> blarg: unicode is rife with funky characters to be used as operators in Perl 6.  See http://perl6advent.wordpress.com/2009/12/17/day-17-making-snowmen/ for instance.

[22:16] <diakopter> std: token sigil:scalar<€> { <sym> }

[22:16] <p6eval> std 29871: OUTPUT«ok 00:01 106m␤»

[22:19] <bkeeler> I always like the idea of using ¥ as a zip operator

[22:19] <bkeeler> and good afternoon, by the way ;)

[22:19] <jnthn> :-)

[22:19] <PerlJam> jnthn: who's julia?

[22:20] <jnthn> <awkward look>

[22:20] <PerlJam> :-)

[22:22] *** wknight8111 joined
[22:22] *** SmokeMachine left
[22:25] *** quietfanatic joined
[22:28] *** Chillance left
[22:31] *** Yoya left
[22:32] *** riffraff left
[22:36] *** mberends left
[22:43] <frettled> jnthn: shouldn't that be a perlward look?

[22:45] *** Chillance joined
[22:47] <jnthn> Phew

[22:48] * jnthn gets $dayjob stuff wrapped up at last :-)

[22:48] <Su-Shee> julia is julia child of cource. the great cookbook author.

[22:48] <Su-Shee> +s-c

[22:49] <frettled> and I thought it was a fractal

[22:49] <Su-Shee> well they both have almond bread ;) 

[22:51] <frettled> The good thing about € as an operator or sigil or whatever, is that it's also in ISO Latin 9 (8859-15).

[22:52] *** athenot left
[22:53] *** stephenlb left
[23:01] <TimToady> maybe € can mean EQUAL OR ELEMENT OF, as in ~~ is the Texas version of it

[23:01] <TimToady> though people will want ≈ for the unicode of ~~, maybe

[23:03] <TimToady> but € is nicely asymmetric, and looks kinda like ∈

[23:03] * colomon is trying to use his last ten minutes (?) before dinner looking for LHF, and completely failing so far...

[23:03] *** iblechbot left
[23:03] <frettled> TimToady: I like ≈ as the unicode variant of squigglesquiggle.

[23:04] <frettled> ≠ is a nice unicode variant of !=

[23:04] <frettled> ¬ can work as a unicode variant of ! ;)

[23:04] <TimToady> well, there's ≉ too

[23:04] * PerlJam can't see ≈ as synonymous with ~~

[23:05] <TimToady> you have to sort of break it in the middle and pile it up

[23:05] <PerlJam> those two symbols occupy different areas of my brain.  They are unrelated.

[23:05] <frettled> PerlJam: you just have to ∫ the thought without getting caught in the ∆.

[23:05] <PerlJam> frettled++  :-)

[23:05] <frettled> Get to the √problem

[23:06] <TimToady> yes, using ≈ will upset the mathematicians

[23:06] <frettled> That's a good reason for doing it ;)

[23:06] <PerlJam> PDL folk are mathematicians too

[23:06] *** nihiliad left
[23:07] <PerlJam> TimToady: have you given any thought to what you'll do when Perl 6 is "finished"? 

[23:08] <bkeeler> Perl7!

[23:08] <TimToady> I thought I might take a day or two off...

[23:08] <frettled> :)

[23:09] <TimToady> 'course, by the time Perl 6 is finished, I might have been pushing up daisies for a century or so...

[23:10] <PerlJam> TimToady: we'll keep your head alive in a jar forever.

[23:11] * PerlJam wonders how horrified TimToady is at the thought  :)

[23:11] <colomon> rakudo: say Inf.WHAT

[23:12] <p6eval> rakudo 94a6c4: OUTPUT«Num()␤»

[23:12] <mathw> \o/ free wifi!

[23:14] <jnthn> yay!

[23:14] <jnthn> mathw: Having fun? :-)

[23:14] <mathw> yes

[23:14] <jnthn> :-)

[23:14] <mathw> I just got back from the bar, where there's a folk music session in full swing

[23:15] <mathw> however, I'm rather tired due to going to aikido before driving a couple of hours to get here

[23:16] <jnthn> Bar + music you like = a great thing 

[23:16] <mathw> yeah

[23:16] <mathw> and the course itself is going well too

[23:17] <mathw> it's really weird, having these tutors who are members of bands I really like coming up to me and saying 'wow, what kind of recorder's that you've got?' and 'I've been thinking, we need to move you to a different section of my group because of this and that'

[23:18] <mathw> The wifi's just the icing on the cake

[23:19] <jnthn> :-D

[23:19] <jnthn> Free wifi is always a nice surprise.

[23:19] <mathw> free wifi that works is even better!

[23:20] <mathw> awesome rating: 10.5/10

[23:20] <jnthn> Overflowing with awesome.

[23:21] <pmichaud> .oO( mathw's recorder has wifi? )

[23:22] <mathw> now that would be a recorder worth having :D

[23:22] <pmichaud> "Sorry, can't play right now -- my recorder won't connect to the network."

[23:22] <jnthn> pmichaud: I'm kinda tired tonight from lots of twiddling with $work-thingy today, but should have plenty of Rakudo time tomorrow. :-)

[23:22] <mathw> closest I could get right now is if I got a wireless MIDI kit for my wind synth

[23:22] <mathw> anyway, I'm going to get some sleep

[23:22] <pmichaud> jnthn: okay.  I don't know what my schedule will be like.

[23:22] <mathw> I just wanted to gush about how conference venues don't have to suck

[23:22] *** fridim_ joined
[23:22] <pmichaud> Have to prepare tomorrow and Sunday for about 11 days of travel :-|

[23:22] <mathw> and you guys are the only ones who are awake

[23:23] <jnthn> pmichaud: OK, no worries. There's no shortage of things for me to be hacking on.

[23:23] <jnthn> Ouch.

[23:23] <jnthn> Yeah, I should be getting my packing a good bit further along too.

[23:23] <jnthn> mathw: night :-)

[23:24] <mathw> night!

[23:27] *** alester left
[23:27] *** stephenlb joined
[23:28] <pmichaud> I think I may spend time tomorrow cleaning up RT queue.  :-)

[23:31] <pmichaud> rakudo:  &foo();  sub foo() { say 'hello'; }

[23:32] <p6eval> rakudo 94a6c4: OUTPUT«hello␤»

[23:32] <pmichaud> rakudo:  &foo();  { our sub foo() { say 'hello'; } }

[23:32] <p6eval> rakudo 94a6c4: OUTPUT«Symbol '&foo' not predeclared in <anonymous>␤current instr.: 'perl6;PCT;HLLCompiler;panic' pc 137 (compilers/pct/src/PCT/HLLCompiler.pir:101)␤»

[23:33] <pmichaud> > &foo();  { our sub foo() { say 'hello'; } }

[23:33] <pmichaud> hello

[23:34] <jnthn> pmichaud: (RT queue) I was wondering how much that could be a hackathon task.

[23:34] <pmichaud> I think a fair bit, but it's also worth pruning easy lhf

[23:34] <jnthn> pmichaud: I certainly don't envy you that task.

[23:34] <pmichaud> mainly eliminating tickets that are no longer relevant

[23:34] <jnthn> Aye.

[23:34] <jnthn> Ooh, that's a nice fix to have.

[23:35] <pmichaud> > say &infix:<+>(3,4);

[23:35] <pmichaud> 7

[23:35] <jnthn> \o/

[23:35] *** Su-Shee left
[23:35] <pmichaud> > say ~&infix:<+>

[23:35] <pmichaud> infix:<+>

[23:36] <jnthn> Good good.

[23:36] <pmichaud> > say &bar;

[23:36] <pmichaud> Could not find non-existent sub &bar

[23:36] <jnthn> non-existent feels a little more than needed in there. ;-)

[23:36] <jnthn> (yes, I know, it's the Parrot message)

[23:36] <pmichaud> that's actually .... right

[23:36] <jnthn> It just amuses me whenever I see it.

[23:37] <pmichaud> one item that is a little weird, though...

[23:37] <pmichaud> (oh, I'll have to wait for the rebuild.)

[23:39] <jnthn> ooh, there will be a conference in Kiev this year!

[23:39] <jnthn> http://social.yapcrussia.org/yr2010/

[23:39] <pmichaud> yes, same dates as german perl workshop, iirc

[23:39] <jnthn> ouch

[23:39] <pmichaud> oh, no it isn't!

[23:39] <pmichaud> it's the weekend following

[23:39] <jnthn> Ah

[23:39] <pmichaud> GPW is June 7-9

[23:40] <jnthn> Close in time, hmm...

[23:40] * jnthn likes going to Ukraine. :-)

[23:40] <dalek> rakudo/master: 4ab4b82 | pmichaud++ | src/Perl6/Actions.pm:

[23:40] <dalek> rakudo/master: Fix subroutine lookup for &-sigiled barewords to use 'find_sub_not_null'.

[23:40] <dalek> rakudo/master: This also means we can now refer to operators directly, as in &infix:<+>.

[23:40] <dalek> rakudo/master: review: http://github.com/rakudo/rakudo/commit/4ab4b8240e2dd2e2c479076d173ae72515647c0e

[23:40] <pmichaud> yes, since I'll already be in Germany, perhaps I should find a way to pop over to kiev as well ... :-)

[23:40] <jnthn> There's much that is beautiful in Kiev.

[23:40] *** snarkyboojum joined
[23:41] <pmichaud> > say &infix:<+>

[23:41] <pmichaud> infix:<+>infix:<+>infix:<+>infix:<+>infix:<+>infix:<+>infix:<+>infix:<+>

[23:42] <pmichaud> (Rakudo thinks that &infix:<+> is an array, and flattens it.)

[23:42] <jnthn> oh

[23:42] <jnthn> *sigh*

[23:42] <jnthn> Yes, thanks Parrot, SO much, for having MultiSub be a subclass of RPA.

[23:42] <jnthn> Wait, I ranted on this before...

[23:42] <jnthn> :-)

[23:42] <pmichaud> correct, that decision turned out to be exactly backwards :)

[23:43] <jnthn> It's why Parrot's MultiSub PMC can't use the multi-dispatch cache too.

[23:43] <jnthn> And why we jumped through hoops subclassing it.

[23:43] <jnthn> It's fixable.

[23:44] <jnthn> Anyway, I can probably have pmc_init for Perl6MultiSub slap a scalar attribute on itself.

[23:44] <jnthn> Would that do it?

[23:44] <jnthn> s/attribute/property/

[23:44] <pmichaud> yes

[23:44] <jnthn> OK, will do that.

[23:44] <pmichaud> or whatever is creating the Perl6MultiSubs, if we don't want to be mucking about with init_pmc

[23:44] <jnthn> I don't mind init_pmc in C, and we already have one anyways.

[23:45] <dalek> book: b50dc2a | chromatic++ | src/regexes.pod:

[23:45] <dalek> book: Minor edits to regex chapter; a couple of editorial notes added.

[23:45] <dalek> book: review: http://github.com/perl6/book/commit/b50dc2ae790ef925ed08e44e27ac26f1d4fc96cc

[23:45] <jnthn> But yes, tmtowtdi.

[23:46] <dalek> rakudo/master: 7680ab4 | pmichaud++ | src/core/Seq.pm:

[23:46] <dalek> rakudo/master: Since we can now refer to &infix:<cmp> directly, do that instead

[23:46] <dalek> rakudo/master: of going through PIR to access it.

[23:46] <dalek> rakudo/master: review: http://github.com/rakudo/rakudo/commit/7680ab459d28b13e893cf2cef8008c8a7a3e6ff0

[23:46] *** ruoso joined
[23:46] *** lue joined
[23:52] <lue> hello? /o\

[23:54] <snarkyboojum> ćao lue

[23:55] <lue> oi!

[23:56] <bkeeler> heya lue

[23:56] <bkeeler> Any idea why my vim is ignoring the # vim: ft=perl6 thingies?

[23:57] <lue> is it up to date? (obvious q)

[23:57] <bkeeler> I believe so

[23:58] <lue> is it from your provider or self-compilation?

[23:58] <Coke> (RT queue) that's why I was trying to build rakudo! =-)

[23:58] <bkeeler> Ahhh, that could be it, gvim is from mac-ports, but  vim is the default mac one

[23:59] <lichtkind> good night

[23:59] <jnthn> lichtkind: dobru noc

[23:59] <lichtkind> jnthn: :)

[23:59] <lue> Your problem has been solved. Thank you for using the Turing Test 5-year champion, helpbot

