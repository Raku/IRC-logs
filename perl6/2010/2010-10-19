[00:01] *** ruoso joined
[00:11] *** pythonian4000 is now known as pythonian4000afk

[00:25] *** Schwern joined
[00:45] *** aindilis joined
[00:49] *** QinGW joined
[00:50] *** isBEKaml left
[00:58] *** QinGW left
[00:58] *** QinGW joined
[01:07] *** ruoso left
[01:09] *** stkowski left
[01:26] *** ruoso joined
[01:30] *** risou left
[01:39] *** redicaps joined
[01:44] *** thowe joined
[01:45] *** pythonian4000afk is now known as pythonian4000

[01:47] *** thowe left
[01:52] *** araujo left
[01:54] *** Entonian left
[01:55] *** bluescreen joined
[02:12] *** rvrgs joined
[02:15] *** whiteknight left
[02:16] *** araujo joined
[02:19] *** zostay left
[02:20] *** zostay joined
[02:44] *** redicaps left
[02:48] *** redicaps joined
[02:55] *** redicaps left
[03:01] *** mfollett joined
[03:25] *** meppel joined
[03:28] *** mfollett left
[03:30] *** meppl left
[03:32] *** mfollett joined
[03:34] *** _twitch joined
[03:37] *** agentzh joined
[03:43] *** Trashlord left
[03:47] *** pythonian4000 is now known as pythonian4000afk

[04:01] *** satyavvd joined
[04:01] *** rvrgs left
[04:04] *** nymacro joined
[04:13] *** Bucciarati left
[04:14] *** Bucciarati joined
[04:14] *** Schwern left
[04:33] <mfollett> Is the official return type of a subroutine part of what the dispatcher uses to determine which subroutine to dispatch?

[04:36] *** dukeleto left
[04:36] *** dukeleto joined
[04:40] *** davidfetter joined
[04:40] <davidfetter> hello

[04:40] <davidfetter> i'm looking for places where people are using perl6 in production. any pointers?

[04:46] <mfollett> n/m, I found my answer, it doesn't seem to work for arrays for some reason.

[04:47] <mfollett> oh, no, it doesn't seem to be doing it at all.

[04:51] *** kjeldahl joined
[05:07] <eternaleye> mfollett: Is it declared multi? as in 'multi sub foo( Int @foo )'

[05:07] <eternaleye> Oh wait, misread

[05:08] <eternaleye> It's not possible to be multi on *return* types, see past discussion on want() and wantarray() for reasoning

[05:08] <mfollett> eternaleye: It wasn't, but yeah, as you point out I can't anyway.

[05:16] *** sftp left
[05:27] *** mberends left
[05:30] *** araujo left
[05:30] *** meppel left
[05:30] *** meppl joined
[05:32] <davidfetter> anybody?

[05:33] *** kjeldahl left
[05:33] *** araujo joined
[05:37] *** betterworld left
[05:37] *** betterworld joined
[05:40] *** mfollett left
[05:41] *** mfollett joined
[05:41] *** Juerd left
[05:41] *** pmichaud left
[05:42] *** zb left
[05:42] *** zb joined
[05:47] *** pmichaud joined
[05:49] *** synth joined
[05:51] *** kaare joined
[05:51] *** kaare is now known as Guest89532

[05:52] *** [synth] joined
[05:53] *** synth left
[05:55] *** araujo left
[05:57] *** Guest89532 is now known as kaare_

[05:57] *** [synth] left
[05:58] *** jhuni joined
[05:59] *** synth joined
[06:02] *** [synth] joined
[06:03] *** synth left
[06:07] *** wamba joined
[06:07] *** [synth] left
[06:09] *** synth joined
[06:09] *** justatheory left
[06:12] *** mfollett left
[06:13] *** rhr left
[06:16] *** zby_home_ joined
[06:17] *** kjeldahl joined
[06:25] *** wtw joined
[06:36] *** masonkramer left
[06:36] *** masonkramer_ joined
[06:41] *** xabbu42 left
[06:42] *** Juerd joined
[06:58] *** rindolf joined
[06:58] <rindolf> Hi all.

[06:59] <Tene> hi!

[07:00] *** nymacro left
[07:00] <rindolf> Tene: what's up?

[07:02] *** nymacro joined
[07:05] <diakopter> davidfetter: as usual it depends on what you mean by "in production"

[07:06] *** baux joined
[07:06] *** rindolf left
[07:19] *** envi joined
[07:19] *** zostay left
[07:20] *** zostay joined
[07:30] *** mavrc joined
[07:36] <jnthn> morning, #perl6

[07:42] *** _twitch left
[07:59] *** Ghost9998_ joined
[07:59] <Ghost9998_> ok

[07:59] <Ghost9998_> hi guys

[08:00] <Ghost9998_> perl6

[08:00] <Ghost9998_> rakudo

[08:00] <Ghost9998_> wtf commands dont work

[08:01] *** Ghost9998_ left
[08:02] *** mavrc left
[08:03] *** meway joined
[08:03] *** kensanata joined
[08:04] <meway> Hey if anyone is interested in video game development pm me I need some developers sorry for brodcasting this in this channel

[08:05] *** Nahem joined
[08:05] *** Nahem left
[08:07] *** timbunce joined
[08:07] *** timbunce left
[08:07] *** timbunce joined
[08:10] *** mavrc joined
[08:12] *** flatwhatson_ joined
[08:18] *** cls_bsd joined
[08:23] *** xabbu42 joined
[08:26] *** ggoebel joined
[08:31] *** ggoebel left
[08:32] <moritz_> good morning

[08:34] *** wamba left
[08:36] *** ggoebel joined
[08:43] <jnthn> o/ moritz_ 

[08:44] <moritz_> \o/ we have a submission to the challenge

[08:44] <moritz_> the wording isn't optimal in places, but the logic seems to be fine

[08:46] <jnthn> Nice!

[08:53] *** Trashlord joined
[09:01] *** dakkar joined
[09:02] *** IllvilJa left
[09:04] *** pythonian4000afk is now known as pythonian4000

[09:07] *** REPLeffect left
[09:14] *** masak joined
[09:15] <masak> oh hai #perl6!

[09:17] *** meway left
[09:17] <moritz_> oh hai masak

[09:17] <moritz_> patch pushed to hypererr branch

[09:18] <moritz_> I want to do another test run on a different machine

[09:19] <masak> it's so confusing that 'patch' is a nick...

[09:20] <moritz_> man context :-)

[09:22] <masak> No manual entry for context

[09:22] <masak> :(

[09:22] <moritz_> there's a debian package with such manual entries

[09:22] <masak> not surprised.

[09:23] *** REPLeffect joined
[09:23] <masak> "(1,2,3,{cat => 1, dog => 2}) >>+<< (3,4,5,{cat => [6,7], dog => 8}) \n Structures are of uneven length and not dwimmy at element [3, cat]. Length 1 vs. 2." -- if that patch goes in, I might have a crack at making the path location look more like .[3]<cat>

[09:25] <moritz_> actually I thought about that too

[09:26] <moritz_> just remember that <foo bar> is not the same as .{'foo bar'}

[09:26] <moritz_> so you need proper escaping

[09:27] <moritz_> masak: patch is in the hypererr branch - feel free to improve it :-)

[09:27] <masak> aye aye sir.

[09:27] * masak goes to it

[09:28] <masak> hm, didn't think about the escaping issue. tricky.

[09:29] <moritz_> you can just use .perl output

[09:34] <masak> hm. .substr'd on both sides.

[09:35] <moritz_> why?

[09:36] <masak> oh, you mean for the .{'foo bar'} case specifically? right, then I can just use the string.

[09:36] <masak> but actually, I need to escape in the .<cat> case as well.

[09:37] <moritz_> .<cat\ dog> ?

[09:37] <masak> or .<cat\>dog>

[09:38] * moritz_ would prefer .{ $str.perl } 

[09:39] * moritz_ gives it a shot

[09:39] <masak> ++moritz_

[09:44] * moritz_ would be much more productive if it didn't take 12 or 15 minutes to recompile the setting

[09:44] <masak> compiling the setting is such a bottleneck.

[09:45] <jnthn> It takes...12 or 15 minutes now?!

[09:45] * jnthn last had it at 3 or 4...

[09:49] *** mj41_ joined
[09:49] *** kolibrie_ joined
[09:49] *** moritz__ joined
[09:49] *** hillu_ joined
[09:49] *** pjcj_ joined
[09:49] *** masak left
[09:49] *** xabbu42 left
[09:49] *** pjcj left
[09:49] *** moritz_ left
[09:49] *** cosimo left
[09:49] *** mj41 left
[09:50] *** literal left
[09:50] *** larsen left
[09:50] *** hillu left
[09:50] *** kolibrie left
[09:50] *** larsen joined
[09:50] *** mj41_ is now known as mj41

[09:50] *** masak joined
[09:50] *** cosimo joined
[09:50] *** xabbu42 joined
[09:51] *** moritz__ is now known as moritz_

[09:54] *** EdwardIII left
[09:55] *** literal joined
[09:59] <moritz_> setting compilation has now been running for 15 mins 45 sec

[10:11] *** QinGW left
[10:16] <moritz_> 33min, and counting :(

[10:21] <nymacro> you need a better 486

[10:22] <moritz_> no, I need a better parrot

[10:23] <moritz_> and now it complains that it can't read the old packfile format

[10:28] <moritz_> nymacro: how long does it take on your machine, with latest parrot?

[10:30] <nymacro> I'll give it a check

[10:30] <nymacro> haven't actually timed it before

[10:34] *** rhr joined
[10:36] <nymacro> moritz_, timing perl configure w/ --gen-parrot

[10:36] <nymacro> real	3m41.757s

[10:38] <nymacro> I assume you're not doing anything extra?

[10:39] *** IllvilJa joined
[10:39] <IllvilJa> o/

[10:41] <nymacro> lo

[11:10] *** ruoso left
[11:19] *** ggoebel left
[11:26] <moritz_> nymacro: I'm talking about the 'make' step, not the configure stop

[11:27] <nymacro> moritz_, this included the make :)

[11:27] <moritz_> oh

[11:28] <nymacro> under 4 mins for parrot,  under 6 for rakudo

[11:28] <moritz_> and that's with the newest parrot, and newest rakudo?

[11:28] * moritz_ can't believe it

[11:28] <baest> and not using deep blue?

[11:30] <baest> s/deep blue/blue gene/, but anyhow a super computer

[11:30] *** pythonian4000 is now known as pythonian4000afk

[11:31] *** ggoebel joined
[11:32] *** allbery_b left
[11:33] <moritz_> masak: please take another look at the hypererr branch

[11:33] <nymacro> moritz_, was I supposed to be building from non-master branch?

[11:34] <moritz_> nymacro: no; the branch doesn't really matter

[11:34] <moritz_> nymacro: it didn't used to be so slow for me, and I suspect it was a change to the parrot GC

[11:34] <nymacro> even so, 33min+ seems a little steep

[11:35] <moritz_> yes

[11:35] *** ggoebel left
[11:35] <moritz_> PerlJam: just a small reminder that you're the release manager this month

[11:37] <masak> moritz_: I'm kind of on the move; will look when I have the time.

[11:38] <moritz_> masak: no hurry

[11:38] *** zby_home__ joined
[11:40] *** zby_home_ left
[11:40] *** _ilbot2 left
[11:40] *** _ilbot2 joined
[11:40] *** ChanServ sets mode: +v _ilbot2

[11:44] *** satyavvd left
[11:46] *** masak left
[11:59] *** zby_home_ joined
[12:01] *** zby_home__ left
[12:15] *** _twitch joined
[12:15] *** ggoebel joined
[12:16] *** Schwern joined
[12:37] *** meraxes left
[12:46] *** bluescreen left
[12:51] *** plainhao joined
[12:59] *** bluescreen joined
[13:00] *** tzhs joined
[13:11] <colomon> profiling runcore works again!  (according to parrot release notes)

[13:11] <jnthn> Ooh, nice

[13:13] <colomon> sounds like they made a number of improvements based on things from this channel in the last two weeks.  parrot team++

[13:17] <davidfetter> diakopter, by "production," i mean software actually deployed to the public. a working web site powered by perl6, e.g.

[13:17] <moritz_> davidfetter: then http://strangelyconsistent.org/ is an example of Perl 6 use in production

[13:19] *** Patterner left
[13:20] <davidfetter> moritz_, so perl6 is serving that page somehow, or...?

[13:21] * davidfetter sees some very cool docs, etc., but isn't quite seeing the where the perl6 is acting rather than being described

[13:21] <moritz_> davidfetter: it generates the HTML pages that are served from this page

[13:21] <davidfetter> k

[13:22] *** Schwern left
[13:23] <davidfetter> that's pretty great. what else is out there? :)

[13:30] *** skids joined
[13:31] *** Psyche^ joined
[13:31] *** Psyche^ is now known as Patterner

[13:34] <davidfetter> one context of my questions is that i'm pitching pl/parrot, a parrot embedding in postgresql. pl/perl6 is a supported language

[13:34] <davidfetter> well, pl/rakudo

[13:34] <davidfetter> if there are DSLs or other kinds of super-moby perl6 magic people are using out in the real world, that could help me write up examples, pitch to different segments of interest, etc.

[13:39] <dalek> rakudo: 3905e0e | moritz++ | build/PARROT_REVISION:

[13:39] <dalek> rakudo: bump PARROT_REVISION to the 2.9.0 release

[13:39] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/3905e0ecc0a457efc6928ea754d502483a757d31

[13:39] <dalek> rakudo: 6f30584 | moritz++ | src/core/metaops.pm:

[13:39] <dalek> rakudo: Improve error message for non-dwimmy hyper ops

[13:39] <dalek> rakudo: 

[13:39] <dalek> rakudo: Patch courtesy by Timothy Bollman

[13:39] <dalek> rakudo: With some wording improvements by moritz.

[13:39] <dalek> rakudo: 

[13:39] <dalek> rakudo: This recursively tracks the indexing path in hyperops, and prints that path

[13:39] <dalek> rakudo: on error. Also elaborates on the nature of the different shapes, either

[13:39] <dalek> rakudo: different length or types (Hash vs Scalar/List or so)

[13:39] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/6f3058476cb2cfd6a700e8f34702ca081f937e30

[13:39] <dalek> rakudo: f17e400 | moritz++ | src/core/metaops.pm:

[13:39] <dalek> rakudo: [hyper] emit proper indexing path with .[] and .{} on error

[13:39] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/f17e4007b6b5d722e4ffc2c3fd22f3ca9a5a459e

[13:42] <dalek> roast: 0fed615 | moritz++ | S11-modules/require.t:

[13:42] <dalek> roast: [require.t] fudge a test that never passed

[13:42] <dalek> roast: review: http://github.com/perl6/roast/commit/0fed6158e483c88dd93ec92256548ce97116f802

[13:46] *** satyavvd joined
[13:47] *** davidfetter left
[13:47] *** kaare_ left
[13:53] *** plobsing left
[13:54] <moritz_> std: (]

[13:54] <p6eval> std :  ( no output )

[13:54] <moritz_> oh

[13:54] <jnthn> mmm...if you tilt your head it looks like a muffin.

[13:55] <jnthn> Clearly std nommed it :-)

[13:55] <colomon> moritz_++

[13:55] <moritz_> turns out I forgot to clone std on the new p6eval server

[13:56] *** xinming joined
[14:06] *** kjeldahl left
[14:09] *** pythonian4000afk is now known as pythonian4000

[14:10] *** Schwern joined
[14:13] <pmichaud> good morning, #perl6

[14:13] <phenny> pmichaud: 18 Oct 22:36Z <jnthn> tell pmichaud I'm very uncomfortable with ++ and -- ops in NQP. They're very assigny, in an otherwise purely bindy language. The hack way to do them without assignment will corrupt my constants table ('cus, I haz one ;-)). Having them in Parrot's nqp-rx will only prevent us from doing that optimization. Vote to deprecate.

[14:13] <jnthn> morning, pmichaud 

[14:13] *** szabgab joined
[14:14] <pmichaud> jnthn: I strongly resisted placing ++ and -- into NQP but was loudly outvoted/criticized for it.

[14:16] <pmichaud> how about if we make them "macros"?

[14:16] <pmichaud> i.e.,   $a++  is translated by the compiler to be $a := $a + 1

[14:16] <pmichaud> (in the PAST)

[14:19] <jnthn> pmichaud: Well, then it's ++$a ratehr than $a++

[14:19] *** wtw left
[14:20] *** _kaare joined
[14:20] <pmichaud> then whatever sequence gives us the correct semantics (e.g., a temporary result before the increment)

[14:21] <jnthn> Yeah, guess that's easier but still...how hard is it for folks to write $x := $x + 1;

[14:21] <pmichaud> I'm just saying that "lack of increment" got very loud complaints from nqp users

[14:21] *** agentzh left
[14:22] *** rgrau_ joined
[14:23] *** MayDaniel joined
[14:23] *** Italian_Plumber joined
[14:26] <jnthn> pmichaud: OK, at least you tried to keep things sane. :-)

[14:27] <pmichaud> the other possibility would be to create an 'inc' opcode that does what we want :-)

[14:27] <jnthn> Well, but since we want to bind...

[14:27] <jnthn> We need to know the name of the thing.

[14:28] <pmichaud> oh, true

[14:28] <pmichaud> silly ++ operator.

[14:28] <jnthn> My feelings exactly. ;)

[14:28] <jnthn> It's a fine operator - when you have assignment. :-)_

[14:28] <pmichaud> in this case, I'm guessing that perhaps inc/dec really want their own pasttype, then.  they're very common to languages

[14:29] <jnthn> I fear that's missing the point (more)

[14:29] <jnthn> Having them in a language properly means it needs to have some model of assignment, so far as I can see.

[14:29] <PerlJam> Good morning!

[14:29] <PerlJam> jnthn: so ... you're adding assignment to NQP  :-)

[14:30] <PerlJam> ?

[14:30] <pmichaud> I'm not entirely certain that's the case.

[14:30] <jnthn> PerlJam: uh, no :P

[14:30] <jnthn> pmichaud: Consider my $a := 2; my $b := $a; $a++; say($b);

[14:30] <jnthn> If we re-write it to $a := $a + 1; then $b is no longer bound the result

[14:30] <jnthn> I guess it works

[14:31] <jnthn> It's just...not that you'd expect in real Perl 6, which does have assignment.

[14:31] <pmichaud> right, I don't necessarily see a huge problem with that.

[14:31] <jnthn> Which means we get a semantic mis-match.

[14:31] <jnthn> It may not be a big deal.

[14:31] <pmichaud> there are a few places where semantic mismatches will occur no matter what we do.

[14:31] <pmichaud> (short of making NQP into full Perl 6, or giving it full-on assignment)

[14:32] <jnthn> True.

[14:32] <jnthn> I'm not opposed to re-writing it to $foo := $foo + 1

[14:32] <jnthn> I don't think the current implementation can stand though.

[14:32] <pmichaud> I'm not entirely opposed to eliminating ++ for now and see what we end up with.

[14:33] <pmichaud> there are only 5 occurrences in Rakudo, afaict

[14:34] <pmichaud> there's one instance in NQP itself

[14:35] <pmichaud> go ahead and deprecate/eliminate it for now, and we'll see about adding it back in when we decide we really need it

[14:37] <jnthn> OK, thanks.

[14:43] <colomon> my rakudo build seems to be taking a very long time this morning?

[14:44] <moritz_> colomon: mine too

[14:44] <moritz_> colomon: 33min or so

[14:44] * moritz_ is glad he's not the only one

[14:44] <colomon> I haven't been paying enough attention to know how long, just that I would have expected it to be done by now.

[14:45] <PerlJam> Hmm.  I didn't notice my build taking too long, but the spectests seem to be taking longer than I thought they would.

[14:48] *** ikes joined
[14:48] *** ikes left
[14:49] * pmichaud tries a build

[14:49] *** MayDaniel left
[14:52] *** x3nU is now known as piwnicowy

[14:52] *** piwnicowy is now known as x3nU

[14:57] *** MayDaniel joined
[14:59] *** mfollett joined
[15:07] *** orafu left
[15:08] *** orafu joined
[15:09] *** satyavvd left
[15:11] <jnthn> Decommute 

[15:11] *** slavik1 joined
[15:12] *** tzhs left
[15:13] <pmichaud> yes, the build is taking a horrendously long time

[15:14] <pmichaud> probably time to bisect

[15:15] *** jhuni left
[15:16] *** allbery_b joined
[15:24] <colomon> pmichaud: seems like it was a very recent change -- at least, I certainly didn't notice my build from a day or two ago being particularly slow.

[15:25] <pmichaud> colomon: yes, I'm running some tests now

[15:25] <colomon> pmichaud++

[15:25] *** TimTom joined
[15:26] * moritz_ can confirm that

[15:30] *** pythonian4000 is now known as pythonian4000afk

[15:30] <TimTom> rakudo: my %a = (a => 1, b => 2, c => 3); say (%a >>=><< (1, 2, 3)).perl

[15:30] <p6eval> rakudo d35769: OUTPUT«Sorry, right side is too short and not dwimmy.␤  in 'hyper' at line 251:CORE.setting␤  in main program body at line 1␤»

[15:31] <TimTom> rakudo: my %a = (a => 1, b => 2, c => 3); say (%a >>=>>> (1, 2, 3)).perl

[15:31] <p6eval> rakudo d35769: OUTPUT«{"a" => 1 => ((1, 2, 3)), "b" => 2 => ((1, 2, 3)), "c" => 3 => ((1, 2, 3))}␤»

[15:31] *** kjeldahl joined
[15:31] <TimTom> It may just be me, but that seems like it's not what we want to reporting.

[15:31] <colomon> TimToady: latest build says this:

[15:31] <TimTom> err returning

[15:31] <colomon> Sorry, structures on both sides of non-dwimmy hyperop are not of same shape:

[15:31] <colomon>     left:  Hash

[15:31] <colomon>     right: Parcel

[15:31] <colomon> TimTom, sorry.

[15:32] <TimTom> yea, I understood

[15:32] <colomon> that's for the first one, latest build.

[15:33] <moritz_> colomon: fwiw, TimTom++ submitted the original patch

[15:33] <moritz_> which reminds me, I forgot to reply to the mail on p6c

[15:33] <TimTom> Well, my patch didn't have the Hash, parcel thing

[15:33] <colomon> ah, TimTom++ indeed!

[15:33] <moritz_> TimTom: right, I added that

[15:34] <TimTom> I saw it, but wasn't sure what we wanted to do with it, so I mulled it over the night

[15:34] <moritz_> TimTom: your patch kept the "shorter" thing, which can be very confusing for   {a => 1} >>+<< [1, 2, 3, 4, 4, 5, 6]

[15:34] <moritz_> it would complain that the right side is too short, even though it looks much longer than the right

[15:34] <TimTom> Well, it just kept whatever was a hash

[15:34] <moritz_> ss/than the right/than the left/

[15:35] <TimTom> err Associative

[15:36] <TimTom> The only thing I can think of for % >>x>> @ is that they would want to match each hash key randomly with some array elment (based on the hash key iteration)

[15:37] <moritz_> well, random behaviour is bad

[15:37] <colomon> you could do .kv on the @ and make a hash, I suppose...

[15:38] *** kcwu left
[15:38] *** Ross joined
[15:38] *** Ross left
[15:38] *** Ross joined
[15:38] <TimTom> It's not completly random.  The thought is that it would be used to have the hash elements transformed into a index, value pair.  For something like %h >> (1 .. *)

[15:38] <TimTom> I like colomon's better though

[15:38] *** kcwu joined
[15:39] <moritz_> let me rephrase: when mechanisms become too magical, they get hard to understand, and produce weird results in corner cases

[15:39] *** lihaitao joined
[15:39] <moritz_> so I'd rather have less magic, and better error messages :-)

[15:39] <TimTom> Oh, I wasn't disagreeing, I was just stating that there's really no good way to make it do anything that someone would want

[15:40] <TimTom> that I could see at least

[15:40] <pmichaud> for comparison, time needed to build rakudo 2010.09 on my box ("perl Configure.pl --gen-parrot; time make"):   3m44s

[15:40] <moritz_> then I misunderstood, and we're all in violent agreement :-)

[15:40] <TimTom> Quite :)

[15:40] <pmichaud> time needed for rakudo head with parrot 2.9.0:  7 minutes and counting

[15:41] <pmichaud> I'll cancel it at 10 minutes and bisect to an earlier parrot

[15:41] * PerlJam blames parrot but secretly hopes he's wrong.

[15:42] *** MayDaniel left
[15:42] <pmichaud> yeah, if it's parrot.... we're going to be in for a not-so-fun couple of days :(

[15:43] *** am0c left
[15:43] <TimTom> It just promotes a... different... build style.  You do half the work, compile.  Then work on the other half while it compiles.  You can then check if your first half was a good change or not.

[15:43] <pmichaud> 10m30s

[15:44] <pmichaud> cancelling build -- trying with r49387  (sep 30)

[15:47] *** lihaitao left
[15:47] *** molaf joined
[15:48] *** mfollett left
[15:49] *** davidfetter joined
[15:49] <davidfetter> perl6: say "Hello to my little frien'!"

[15:49] <p6eval> pugs, rakudo d35769: OUTPUT«Hello to my little frien'!␤»

[15:52] <pmichaud> rakudo head on parrot r49387:  4m16s

[15:52] <pmichaud> trying r49541

[15:56] *** molaf left
[15:57] *** flatwhatson_ left
[15:58] <TimTom> moritz: the patch you submitted for hyperops has a copy-paste mistake at line 66 of metaops.pm, it should be @rhs not @lhs.  Also, I think lines 144 and 158 should maybe be $rhs.WHAT.perl() as well in case the Associative isn't a hash

[15:58] *** flatwhatson left
[16:00] <TimTom> moritz: and the recursive hyperop integrate that I did for Associative omitted [ ] around the Iterable call that was in the Iterable hyperop (line 124).  I'm not sure if those were neccessary, but I assume they were

[16:01] <TimTom> moritz: ... or maybe those were actually because we were using "push", and they aren't neccessary

[16:01] <pmichaud> 49541:  4m22s

[16:01] <pmichaud> so it's something very recent.

[16:01] *** justatheory joined
[16:02] *** kensanata left
[16:02] *** ruoso joined
[16:03] <pmichaud> http://gist.github.com/634456  # current table of build times on my machine

[16:03] <moritz_> TimTom: looking...

[16:03] *** araujo joined
[16:06] <PerlJam> pmichaud: check out -r49557

[16:07] <PerlJam> that at 49556 mess with GC and the other revisions seem to be mostly doc patches and such.

[16:07] *** flatwhatson_ joined
[16:07] <pmichaud> PerlJam: should I cancel my current build to try 49557?

[16:08] <PerlJam> I'm just guessing based on the log messages.  I haven't run it yet.

[16:08] <pmichaud> I'd like to get a complete timing of the build on 2.9.0 to be able to report that

[16:08] <pmichaud> I can probably try 49557 on another machine just to see

[16:10] *** PacoLinux left
[16:10] *** flatwhatson joined
[16:11] *** PacoLinux joined
[16:13] * jnthn home

[16:14] * davidfetter work

[16:16] <jnthn> pmichaud: (build speed) Ouch.

[16:16] <jnthn> pmichaud: Want me to run a build of anything here at all?

[16:16] <pmichaud> only if you want to see a painfully slow build :-)

[16:16] <jnthn> :P

[16:17] <pmichaud> I suppose it would be interesting to see if it's slow on mswin, though.

[16:18] <jnthn> *nod*

[16:19] <jnthn> I'll try 49556 and 49557.

[16:19] *** mberends joined
[16:20] <jnthn> yayitsmberends!

[16:20] *** risou joined
[16:20] * davidfetter very sorry to be trolling like this, but is looking around desperately for any perl6 production deployment anywhere. failing that, something that's gotten to staging, and failing that, to development

[16:20] <davidfetter> this isn't perl6 itself, but software written in it

[16:21] <jnthn> http://november-wiki.org/ used to be up... :-(

[16:22] <jnthn> http://pivo.jnthn.net/ uses a few bits of Perl 6 and there's source at http://github.com/jnthn/pivo

[16:22] <pmichaud> I'm trying 49556 right now on a different box 

[16:22] <jnthn> It's tiny but demonstrates working usage of MiniDBI, JSON::Tiny plus uses Blizkost to get at a Perl 5 module.

[16:22] <jnthn> pmichaud: Aye, that's building here at the moment.

[16:23] <pmichaud> I'll try it on my "timing box" when my timing box gets done building against trunk  (20 minutes so far)

[16:23] <jnthn> *sigh*

[16:23] *** Kodi joined
[16:23] *** Ross left
[16:23] <Kodi> rakudo: class C { has $.x }; sub f($x) { C.new: :$x }; say (f (1, 2)).perl;

[16:23] <p6eval> rakudo d35769: OUTPUT«C.new(x => ((1, 2)))␤»

[16:23] <pmichaud> http://lists.parrot.org/pipermail/parrot-dev/2010-October/004929.html  # message to parrot-dev

[16:24] <jnthn> Yes, that just landed here.

[16:24] *** Ross joined
[16:25] <Kodi> ^ Known? This seems to be the root cause of the failure in trans.t, although it predates the Rakudo change that caused the failure.

[16:26] <pmichaud> Kodi: we know that a change to rakudo resulting in a trans.t failure, yes.

[16:26] <pmichaud> we haven't quite figured out why yet.

[16:26] <pmichaud> (but we know that the change is correct)

[16:27] *** TimTom left
[16:28] <pmichaud> r49556 builds in a reasonable amount of time.

[16:28] *** cdarroch joined
[16:28] *** cdarroch left
[16:28] *** cdarroch joined
[16:29] <pmichaud> now passing 25 minutes

[16:29] <pmichaud> (still working on core.pir)

[16:29] <pmichaud> ah, core.pir just finished

[16:30] *** risou_ joined
[16:31] <pmichaud> http://gist.github.com/634507    # 26m41s  with 2.9.0 release

[16:31] *** risou left
[16:34] <jnthn> pmichaud: 6:48 on 49556

[16:34] *** coldboot left
[16:34] <pmichaud> yes, I had 7m  on my slow box

[16:34] <pmichaud> I'm trying it now on my timing box

[16:34] <jnthn> OK. Trying 49557 now.

[16:35] <pmichaud> it's looking very much like 49557 is the culprit on my second box

[16:36] <pmichaud> s/second/slow/

[16:38] <pmichaud> 49556   is 4m20s  on my timing box

[16:41] *** flatwhatson_ left
[16:42] *** flatwhatson left
[16:42] *** zby_home_ left
[16:43] *** flatwhatson_ joined
[16:45] *** meppl left
[16:46] *** baux left
[16:48] *** flatwhatson_ left
[16:49] *** MayDaniel joined
[16:49] *** MayDaniel left
[16:49] *** MayDaniel joined
[16:49] <moritz_> phenny: tell masak I'm sure you've seen it before -- if not, look at http://ds9a.nl/amazing-dna/

[16:49] <phenny> moritz_: I'll pass that on when masak is around.

[16:51] <jnthn> pmichaud: Confirm big difference here between 49556 and 49557.

[16:52] <jnthn> (The latter hasn't finished yet, but it's almost reached double now)

[16:52] <PerlJam> It runs the GC potentially 16 times as often

[16:54] <pmichaud> PerlJam: more than 16, I'd think

[16:54] <PerlJam> yes, you're probably right

[16:54] <jnthn> That or we're being really, really dominated by GC.

[16:55] <pmichaud> jnthn: based on the other tests I've done, I suspect we are being dominated by gc (e.g., some of the strings tests)

[16:56] <pmichaud> jnthn: my results are mirroring yours -- I'm at 15 minutes now in r49557, where r49556 took 4m20s previously

[16:56] <PerlJam> I wonder if that gc_threshhold is really implemented correctly.  If whatever counter is being used to set the allocations so far isn't reset when it hits 16M, then you'll get a GC run for every allocation above 16M

[16:56] <jnthn> Yup, over 16 here.

[16:57] <pmichaud> chromatic weighed in on parrot-dev that he thinks it's r49557 also

[16:57] <pmichaud> moritz_: that dna url is fascinating

[16:57] <moritz_> indeed :-)

[16:59] *** flatwhatson_ joined
[17:01] *** dakkar left
[17:02] <jnthn> .oO( Maybe it's dominating 'cus it's actually a Sweep and Mark collector ;-) )

[17:03] <jnthn> 23 minutes...still on core.pm.

[17:05] <PerlJam> How many objects are typically allocated during a rakudo compile?

[17:06] *** flatwhatson joined
[17:06] <jnthn> Finally done - 26:04

[17:08] *** xabbu42 left
[17:09] *** sftp joined
[17:09] *** Axius joined
[17:10] *** MayDaniel left
[17:11] <pyrimidine> moritz_: good link (DNA URL)

[17:12] <pmichaud> PerlJam: millions... maybe more

[17:12] <pmichaud> every subroutine or method call creates at least one object

[17:15] <jnthn> Context + LexPad + exception handler + RPA that holds it # 4 already...

[17:17] <jnthn> #phasers in 102 mins?

[17:18] <moritz_> yes

[17:18] <jnthn> k

[17:18] <dalek> rakudo: fbe7445 | moritz++ | src/core/metaops.pm:

[17:18] <dalek> rakudo: fix a typo noticed by TimTom++

[17:18] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/fbe7445f4fea2bad64ed389a7ca525e4d7a732f9

[17:19] *** alester joined
[17:22] <pmichaud> http://gist.github.com/634604    # build timings

[17:22] <pmichaud> afk, lunch

[17:23] <jnthn> :/

[17:23] <jnthn> Even if we get back to 49556's performance, it's still a regression from 2010.09.

[17:23] * jnthn -> noms, bbfp

[17:24] <pmichaud> (regression)  yes, but it's hard to claim that's a Parrot issue.  Rakudo did add some features in that time that could account for the increased time.

[17:25] <pmichaud> (now afk)

[17:25] <diakopter> http://trac.parrot.org/parrot/ticket/1829

[17:25] <pmichaud> we could potentially try building 2010.09 on 2.8.0 and see how long that takes.

[17:26] <pmichaud> er, 2010.09 on a more recent parrot

[17:26] * pmichaud tries 2010.09 on r49556, just to see wha thappens.

[17:27] *** isBEKaml joined
[17:31] *** M_o_C joined
[17:31] *** timbunce left
[17:34] *** Entonian joined
[17:37] *** rgrau_ left
[17:37] *** MayDaniel joined
[17:38] *** timbunce joined
[17:40] <davidfetter> jnthn, um, please tell me this is generated code. http://github.com/jnthn/pivo/blob/master/jquery-1.4.2.min.js

[17:40] <moritz_> davidfetter: it is. The .min is "minimized" javascript

[17:40] <PerlJam> davidfetter: it is.  That's your standard minimized jquery

[17:41] *** risou_ left
[17:42] *** risou joined
[17:42] <davidfetter> ah

[17:47] *** nymacro left
[17:49] *** rgrau left
[17:53] *** M_o_C left
[18:03] *** Axius left
[18:03] *** Axius joined
[18:04] *** rvrgs joined
[18:06] *** ab5tract joined
[18:07] *** mikehh joined
[18:08] <Util> Pushed fix for long build time

[18:10] *** synth left
[18:12] <dalek> rakudo: d497078 | Util++ | build/PARROT_REVISION:

[18:12] <dalek> rakudo: Bump PARROT_REVISION to resolve abnormally long R build

[18:12] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/d49707813ef75af2c3b21f92671f72d581df7746

[18:14] <colomon> Util++

[18:14] <moritz_> Util: note that the rakudo releases always target parrot releases; so we need to do something about that

[18:15] *** _twitch left
[18:15] <Util> moritz_: I expect that a release manager will make a 2.9.1 release as soon as everyone agrees that the problem is fixed.

[18:25] * jnthn back

[18:26] <jnthn> davidfetter: Yes, minimized. ;-)

[18:26] *** jaldhar left
[18:27] *** ylando joined
[18:27] *** ylando left
[18:27] *** isBEKaml left
[18:28] *** risou_ joined
[18:31] *** risou left
[18:32] <pmichaud> Rakudo    Parrot         Time needed for rakudo's "make"

[18:32] <pmichaud> 2010.09   49192 2.8.0    03m44s

[18:32] <pmichaud> 2010.09   49556          04m14s

[18:32] <davidfetter> jnthn, know of other perl6 deployments?

[18:33] <pmichaud> So yes, Parrot exhibits a 13% slowdown between 2.8.0 and 2.9.0 .

[18:34] *** envi left
[18:35] *** ggoebel left
[18:35] *** masonkramer_ left
[18:36] *** masonkramer joined
[18:38] *** isperl6doneyet joined
[18:38] <isperl6doneyet> hi, my name is my question

[18:38] <PerlJam> isperl6doneyet: it's a bogus question.

[18:38] <isperl6doneyet> how so?

[18:38] <PerlJam> isperl6doneyet: Is Perl 5 done yet?  If so, why are they still working on it?

[18:38] <isperl6doneyet> true, i should be more specific about "done"

[18:38] <isperl6doneyet> i'll work on that.. thanks

[18:39] *** isperl6doneyet left
[18:39] * PerlJam hopes he comes back 

[18:39] <BinGOs> bellowing noiseholes making sounds that could be words.

[18:44] <jnthn> pmichaud: Unlucky...

[18:44] <jnthn> davidfetter: No...maybe we should start a wiki page somewhere for collecting them.

[18:45] <PerlJam> jnthn++

[18:45] <sorear> good * #perl6

[18:46] <jnthn> '*, sorear 

[18:46] *** Axius left
[18:53] *** ggoebel joined
[19:00] *** flatwhatson left
[19:00] *** rgrau joined
[19:02] <pmichaud> -1 to #phasers

[19:02] <pmichaud> er, T-1 to #phasers

[19:02] <pmichaud> (not voting it down :-)

[19:02] <jnthn> :P

[19:03] <pmichaud> davidfetter: masak++'s blog is written using Perl 6   (http://strangelyconsistent.org/)

[19:04] <pmichaud> (didn't know if that had been mentioned yet)

[19:04] *** timbunce left
[19:04] <sorear> it's the only thing that's been mentioned yet

[19:11] *** timbunce joined
[19:11] *** estrabd left
[19:12] *** flatwhatson joined
[19:13] *** snearch joined
[19:17] *** risou joined
[19:17] *** risou_ left
[19:22] *** MayDaniel left
[19:22] *** MayDaniel joined
[19:22] *** MayDaniel left
[19:28] *** Trashlord left
[19:30] *** risou_ joined
[19:30] *** risou left
[19:35] *** estrabd joined
[19:38] *** synth joined
[19:40] *** plainhao left
[19:40] <davidfetter> pmichaud, what sorear said.

[19:43] *** icwiener joined
[19:52] *** tylercurtis joined
[19:52] *** mfollett joined
[19:55] <sorear> tylercurtis!

[19:55] <sorear> hi!

[19:55] <tylercurtis> Hi, sorear.

[19:56] *** ylando joined
[19:56] *** Entonian left
[19:56] <ylando> hello

[19:57] <mberends> hi ylando

[19:58] <ylando> it is a chat room about developing perl6?

[19:58] <moritz_> yes

[19:59] <ylando> do you have an help chat room

[19:59] <ylando> so i will not waste your time

[19:59] <moritz_> we also answer Perl 6 questions here

[19:59] *** Italian_Plumber left
[20:00] <ylando> perl6 can run on server ?

[20:00] <ylando> do cgi ?

[20:00] <moritz_> yes

[20:00] *** patspam joined
[20:00] <ylando> do you have doc about it?

[20:01] *** mfollett left
[20:01] <moritz_> well, the common gateway interface is language agnostic

[20:01] <ylando> but you have an appche guide

[20:02] <moritz_> and the "November" wiki has a module for it - should be somewhere in http://github.com/viklund/november/

[20:02] <ylando> thanks

[20:03] <ylando> i will check it out

[20:03] <ylando> bye

[20:03] *** ylando left
[20:03] <sorear> tylercurtis: how goes bennu?

[20:05] <BinGOs> wouldn't traditional cgi be hideously slow

[20:05] <moritz_> it is

[20:05] <flussence> yes, but everyone uses fcgi these days

[20:06] <flussence> or if not that, something like it

[20:06] <x3nU> cgi can be fust if used smartly

[20:06] <davidfetter> so the common gateway interface is...uncommon?

[20:06] <x3nU> i mean, dont generate whole page every visit

[20:06] <tylercurtis> sorear: not much progress (though a little) due to lack of tuits. How goes Niecza?

[20:06] <x3nU> but generate static html files

[20:06] <x3nU> and use cgi only for commiting changes

[20:06] <moritz_> then it's not CGI, is it?

[20:06] <x3nU> like posting comment

[20:06] <x3nU> etc

[20:07] <davidfetter> .oO(UGI)

[20:07] <flussence> I used to have a trick for that actually...

[20:07] <flussence> in apache-speak, "DirectoryIndex index.html index.cgi", then have the second save its output to the first when accessed

[20:08] <flussence> of course, it only works for urls ending in / ...

[20:08] <davidfetter> how would you decide when to expire the .html?

[20:08] <sorear> tylercurtis: http://irclog.perlgeek.de/phasers/2010-10-19#i_2925857

[20:09] <flussence> davidfetter: that's a caching issue. caching is hard ;)

[20:09] <davidfetter> let's go shopping!

[20:10] <davidfetter> </barbie>

[20:12] *** xabbu42 joined
[20:15] <tylercurtis> sorear: impressive.

[20:17] <davidfetter> niecza?

[20:18] <sorear> niecza: say "Hello, world"

[20:18] <p6eval> niecza 4f60774: OUTPUT«sh: /opt/perl-5.12.1/bin/perl: not found␤»

[20:18] *** molaf joined
[20:19] <moritz_> oops

[20:19] <sorear> it's a lot faster now

[20:19] <moritz_> lol

[20:20] <sorear> anyways davidfetter it's an implementation of Perl 6 I've been playing with

[20:20] *** p6eval left
[20:20] <sorear> probably the most awkward to set up atm

[20:20] *** p6eval joined
[20:20] *** ChanServ sets mode: +v p6eval

[20:20] <moritz_> niezca: say 3

[20:20] <davidfetter> niecza: say "'Hello' to my little frien'!"

[20:20] <p6eval> niecza 4f60774: OUTPUT«'Hello' to my little frien'!␤»

[20:21] <davidfetter> al pacino as niecza

[20:22] <dalek> evalbot: 6a11357 | moritz++ | evalbot.pl:

[20:22] <dalek> evalbot: fix niecza target

[20:22] <dalek> evalbot: review: http://github.com/perl6/evalbot/commit/6a1135793427a0cffbeb673fec1643dd68560472

[20:23] <sorear> davidfetter: I'm trying to get STD to run a bit faster

[20:23] * davidfetter a little scared

[20:23] <davidfetter> what does STD stand for?

[20:23] <sorear> STanDard

[20:28] *** rvrgs left
[20:31] *** ruoso left
[20:34] *** patspam left
[20:35] *** justatheory left
[20:35] <colomon> with latest rakudo, it appears $file.close isn't called automagically after writing a file.

[20:36] *** ggoebel left
[20:38] *** risou_ left
[20:38] <colomon> http://gist.github.com/635055

[20:39] <colomon> above gist is my first attempt at golfing the issue.

[20:39] <colomon> I suspect something to do with GC?

[20:39] <pmichaud> I suspect it's something to do with the filehandle not being closed

[20:39] <pmichaud> or flushed

[20:40] <colomon> pmichaud: right, but that's supposed to happen automatically, no?

[20:40] <jnthn> You can't rely ont he file handle being closed at block exit in Perl 6, afaik.

[20:40] <colomon> (it certainly did happen automatically last time I tried the code in question, but that was a bit back.)

[20:40] <colomon> nor at program exit?

[20:40] <jnthn> Equally, not flushing it when it gets collected feels...odd.

[20:41] <pmichaud> rakudo's program exit is.... odd

[20:41] <jnthn> colomon: I'd have kinda hoped it'd make it before program exit.

[20:41] <pmichaud> we made some workarounds in order to avoid the odd exit code to the test harness, iirc.

[20:41] <moritz_> over in #parrotsketch chromatic argues that extrem slowness isn't "broken"

[20:41] <pmichaud> i.e., Rakudo's program exit isn't a default exit

[20:41] <moritz_> pmichaud: you mean the explicit call to exit 0?

[20:42] <colomon> ah, for what it's worth, I get the same behavior in d357695b83624648d594bf78518a5c907da965d9, which is from Sunday.

[20:42] <pmichaud> moritz_: right

[20:42] <moritz_> pmichaud: that's to bypass global destruction

[20:42] <colomon> so I jumped to conclusions thinking it was another bug from the latest parrot.

[20:43] <pmichaud> and global destruction is where I would expect PMCs to be flushed/closed :)

[20:43] <jnthn> moritz_: *sigh*

[20:43] <moritz_> some weeks ago I tried to remove it

[20:43] <moritz_> and got some endless loops during spectests

[20:45] <dalek> 6model: d89333d | mberends++ | java/compiler/compile.pir:

[20:45] <dalek> 6model: [java/compiler] add compile.pir which was being .gitignored

[20:45] <dalek> 6model: review: http://github.com/jnthn/6model/commit/d89333dc48b64220e9dfdb465790c8cc035eb426

[20:46] *** pythonian4000afk is now known as pythonian4000

[20:47] *** bluescreen left
[20:48] <colomon> RT #78454

[20:55] <pmichaud> 20:41 <moritz_> over in #parrotsketch chromatic argues that extrem slowness isn't "broken"

[20:55] <pmichaud> I'm not planning to take a strong position for/against the extreme slowness, fwiw.  Except to say that if Rakudo compiles are going to take 25+ minutes, I'm likely to do a lot less work on it.

[20:56] <szbalint> Yes it is. That's why nuclear power plants are running timing tests even after formal proofs verifying a system :)

[20:56] * moritz_ would recommend to ship the R* release with the old rakudo+parrot, unless there's a fix to that

[20:56] <pmichaud> oh, that's a possibility as well.

[20:57] <pmichaud> anyway, I'm willing to see where Parrot decides they want to put their priorities and react to that, rather than try to push for any particular outcome.

[20:57] <PerlJam> moritz_: if R* ships with an older rakudo, what then is new in R*?

[20:58] <pmichaud> might be nothing... and that could be okay.

[20:58] *** bluescreen joined
[20:59] *** pyrimidine left
[20:59] <PerlJam> a "book changes only" release of R* seems weird (that's all I can think of that's changed)

[20:59] *** molaf left
[21:01] *** pothos left
[21:01] *** pothos joined
[21:02] *** Italian_Plumber joined
[21:02] <pmichaud> PerlJam: that's one of the possiblities of monthly releases, though.  There could be some months w/o significant changes.

[21:02] <PerlJam> sure.  It just seems weird.

[21:03] *** Ross left
[21:03] <PerlJam> looks like #ps is collectively sane today.  :)

[21:03] *** Ross joined
[21:03] *** ggoebel joined
[21:03] *** pothos left
[21:04] *** pothos joined
[21:04] <pmichaud> I am planning to go ahead and run spectests on 2.9.0.... just to see what it ends up looking like :)

[21:06] <sorear> tylercurtis: Anyways, I've been experimenting with some backend portability stuff for Niecza

[21:07] <sorear> I have CLR dependencies pushed all to the back end, except for a few yaks left in RxOp

[21:09] *** skids left
[21:12] <tylercurtis> sorear: interesting. Are you planning on working on a non-CLR backend anytime soon?

[21:12] *** Ross left
[21:14] <sorear> FSVO soon, yes

[21:14] *** justatheory_ joined
[21:16] <tylercurtis> What targets are you interested in?

[21:19] <sorear> CLR-sans-C#, simple bytecode, custom VM, Parrot

[21:20] <sorear> I am doubtful of how much short-term benefit I'll be able to get with a custom VM, though

[21:21] <sorear> I'd be giving up Mono's generational garbage collector

[21:21] <sorear> also, I would probably still have to simulate a stack for CALLER:: to work

[21:21] <sorear> (custom VM = LLVM based)

[21:22] *** ggoebel left
[21:22] <jnthn> nqp: my @l := (1,2,3,4,5); @l[2] := 42; say(@l);

[21:22] <p6eval> nqp: OUTPUT«sh: ./nqp: not found␤»

[21:22] <jnthn> my @l := (1,2,3,4,5); @l[2] := 42; say(@l[2]); # 42

[21:23] <jnthn> pmichaud: ^^ This probably would not work in Perl 6 since a parcel is read-only, but does work in NQP since we use RPA. Do you see things staying this way?

[21:23] <jnthn> e.g. (1,2,3,4,5) actually makes something mutable?

[21:23] <pmichaud> jnthn: I'm not sure that the resulting bind becomes a Parcel -- it might end up being a Seq

[21:24] <jnthn> Ah, OK

[21:24] <jnthn> And Seq is...mutable?

[21:24] <moritz_> nqp: say(1)

[21:24] <p6eval> nqp: OUTPUT«1␤»

[21:24] <pmichaud> well, at present all lists (including Seq)  allow push/pop

[21:24] <pmichaud> so they're mutable in that sense

[21:24] <pmichaud> I don't see a problem with saying that elements of a Seq can be rebound

[21:24] <jnthn> And @foo[52] := blah style things?

[21:25] <jnthn> OK

[21:25] <pmichaud> but that might not work out.  There are still a lot of gray areas and corner cases to be addressed.

[21:25] *** _kaare left
[21:25] <pmichaud> ultimately I'd probably be happer with     my @l := @(1,2,3,4,5)   to explicitly make a list or array

[21:26] <jnthn> *nod*

[21:26] <jnthn> I'll make it work like NQP on Parrot for now.

[21:26] <pmichaud> wfm

[21:26] <sorear> ooh then we could finally have hash constructors

[21:26] *** plobsing joined
[21:26] * sorear out

[21:27] <jnthn> 5 out of 7 tests in 17-positional.t pass :-)

[21:27] <pmichaud> I'm been toying with the notion of giving PCT/PAST a 'hash' constructor type to go along with the 'list' constructor type.  :-)

[21:28] <jnthn> Hashes are next on my NQP.NET hit list I think. :-)

[21:29] <jnthn> Tssk. I need return at some point before I can even think about ClassHOW too.

[21:30] *** kjeldahl left
[21:31] <tylercurtis> Metamodel implementation-detail question... Classes are packages, but what is the thing that is a package for classes? Is it the HOW, the WHAT, or is there just a package that corresponds to the class?

[21:32] *** rvrgs joined
[21:33] <jnthn> .WHO gets the underlying package.

[21:34] <jnthn> .WHAT is the type object, .HOW is the meta-object.

[21:34] *** Entonian joined
[21:34] <moritz_> rakudo: say Int.WHO

[21:34] <p6eval> rakudo d35769: OUTPUT«Int␤»

[21:34] <moritz_> rakudo: say Int.WHO.WHAT

[21:34] <p6eval> rakudo d35769: OUTPUT«Method 'WHAT' not found for invocant of class 'Int'␤  in main program body at line 22:/tmp/FDRhTD0kkY␤»

[21:35] *** Schwern left
[21:36] *** ggoebel joined
[21:39] *** zby_home_ joined
[21:39] <dalek> 6model: 17d7665 | jnthn++ | dotnet/compiler/Actions.pm:

[21:39] <dalek> 6model: A little more undef removal.

[21:39] <dalek> 6model: review: http://github.com/jnthn/6model/commit/17d76656b3705974c81b6a9dec41ed4801d739f9

[21:39] <dalek> 6model: 704d03a | jnthn++ | dotnet/runtime/Runtime/Ops.cs:

[21:39] <dalek> 6model: A little tweak to lllist_bind_at_pos to make life easier for code generators and enhance op consistency.

[21:39] <dalek> 6model: review: http://github.com/jnthn/6model/commit/704d03a0151b09dc1b3ccbd765a0c1112aa497f5

[21:39] <dalek> 6model: ebb368a | jnthn++ | common/NQP/NQPSetting.pm:

[21:39] <dalek> 6model: [common] NQPArray.bind_pos plus some missing coercion methods.

[21:39] <dalek> 6model: review: http://github.com/jnthn/6model/commit/ebb368a97b2e1db261bccb08147a15839195163a

[21:39] <dalek> 6model: 5cac036 | jnthn++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[21:39] <dalek> 6model: [dotnet] Get keyed_int in place enough for array lookups (but can not has binding yet).

[21:39] <dalek> 6model: review: http://github.com/jnthn/6model/commit/5cac036f3ff71f600a0b0a7ceedb72b00024a1f6

[21:40] <tylercurtis> Ah, right. I forgot about WHO.

[21:40] *** bluescreen left
[21:44] *** ggoebel left
[21:45] *** snearch left
[21:53] *** timbunce left
[22:00] *** stkowski joined
[22:01] *** meppl joined
[22:02] *** sftp left
[22:09] *** mavrc left
[22:16] *** zby_home_ left
[22:22] <dalek> 6model: d22037d | jnthn++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[22:22] <dalek> 6model: [dotnet] Refactor the way we compile binds. Pass the thing to bind down in a contextual rather than relying on the structure of the tree that comes back up, otherwise we're very restricted with what kinds of stuff PAST::Var nodes can produce.

[22:22] <dalek> 6model: review: http://github.com/jnthn/6model/commit/d22037db02b6622997ccf626a7b38c440628eb09

[22:22] <dalek> 6model: e6de8a1 | jnthn++ | t/nqp/17-positional.t:

[22:22] <dalek> 6model: We now pass 17-positional.t.

[22:22] <dalek> 6model: review: http://github.com/jnthn/6model/commit/e6de8a1bba2e1defb30898e2ef3a3a0a92fc8f92

[22:25] <takadonet> jnthn++

[22:26] *** ab5tract left
[22:27] <dalek> 6model: 4d3bf73 | jnthn++ | t/nqp/21-contextual.t:

[22:27] <dalek> 6model: Turns out we have enough in place to pass 21-contextual.t too. :-)

[22:27] <dalek> 6model: review: http://github.com/jnthn/6model/commit/4d3bf73ee65442e8785c6502b95b615254b10ecd

[22:33] <dalek> 6model: 7a40c79 | jnthn++ | t/nqp/36-callable.t:

[22:33] <dalek> 6model: 36-callable.t also passes - it just checks subs are first class.

[22:33] <dalek> 6model: review: http://github.com/jnthn/6model/commit/7a40c7944719e63258d2b7c853101167d4b70a5d

[22:34] <jnthn> Mmmm. Staropramen++

[22:40] *** xabbu42 left
[22:43] <dalek> 6model: 03d4813 | jnthn++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[22:43] <dalek> 6model: [dotnet] Implement a basic first cut of keyed scope of PAST::Var. Gets 18-associative.t to compile, but of course we crash and burn immediately - no NQPHash type yet! :-)

[22:43] <dalek> 6model: review: http://github.com/jnthn/6model/commit/03d4813a394e6684b5102a1937066081e69ef6a1

[22:45] *** silug left
[22:47] *** justatheory_ left
[22:49] <dalek> 6model: 666a4f4 | jnthn++ | dotnet/runtime/ (3 files):

[22:49] <dalek> 6model: [dotnet] Add a very basic P6mapping representation that is used to provide a low level hash storage.

[22:49] <dalek> 6model: review: http://github.com/jnthn/6model/commit/666a4f4d119699e24b8a032968c8073fad854090

[22:49] <dalek> 6model: 435bd24 | jnthn++ | common/NQP/NQPSetting.pm:

[22:49] <dalek> 6model: [common] Stub in NQPHash. Doesn't do anything yet other that .new.

[22:49] <dalek> 6model: review: http://github.com/jnthn/6model/commit/435bd2432c492fd4441eddaf649898993e7352c9

[22:49] *** justatheory joined
[22:57] <diakopter> jnthn: do your RakudoObjects implement GetHashCode ?

[23:00] <jnthn> diakopter: No :-)

[23:00] *** icwiener_ joined
[23:00] <jnthn> diakopter: Got it doing string keys locally instead and coercing to strings.

[23:00] <jnthn> Will do proper object ones at some point.

[23:00] *** icwiener left
[23:00] <diakopter> k

[23:00] <jnthn> But for now I want to support the bunch of NQP that we can on Parrot.

[23:00] <jnthn> And Parrot only does string-keyed hashes too ;-)

[23:01] <diakopter> k cuz I was wondering/looking at the mapping thing

[23:01] <diakopter> Dictionary<RakudoObject, RakudoObject>

[23:02] <jnthn> It's Dictionary<string, RakudoObject> now

[23:02] <diakopter> I definitely saw Dictionary<RakudoObject, RakudoObject> somewhere

[23:02] <jnthn> Right, in my commit a moment ago. :-)

[23:03] * diakopter notes the use of resharper

[23:04] <diakopter> :)

[23:05] *** kulp joined
[23:05] <jnthn> ...resharper?

[23:05] <jnthn> No, I didn't get along with it.

[23:06] <jnthn> Tried it for a bit, though.

[23:10] <dalek> 6model: 017a5ef | jnthn++ | dotnet/runtime/Metamodel/Representations/P6mapping.cs:

[23:10] <dalek> 6model: [dotnet] Actually, just go with string keys for now; it's plenty enough.

[23:10] <dalek> 6model: review: http://github.com/jnthn/6model/commit/017a5efff75d23804575e938c6b2a5674a84b07a

[23:10] <dalek> 6model: bae7cdf | jnthn++ | dotnet/runtime/Runtime/Ops.cs:

[23:10] <dalek> 6model: [dotnet] Three ops for working with P6mapping.

[23:10] <dalek> 6model: review: http://github.com/jnthn/6model/commit/bae7cdf8c17afd32ab4158c1d72b6735fb02cd9d

[23:10] <dalek> 6model: 88190a8 | jnthn++ | common/NQP/NQPSetting.pm:

[23:10] <dalek> 6model: [common] Fill out NQPHash a bit and...we have basically functioning hashes.

[23:10] <dalek> 6model: review: http://github.com/jnthn/6model/commit/88190a82b08d866653c05d02dd1f450f3de3c2e2

[23:11] *** ggoebel joined
[23:30] *** Kodi left
[23:35] *** jaldhar joined
[23:40] *** dju left
[23:41] *** dju joined
[23:41] *** rgrau left
[23:48] *** whiteknight joined
[23:52] *** davidfetter left
[23:54] *** alester left
[23:54] *** dju left
[23:54] *** dju joined
[23:58] *** cdarroch left
