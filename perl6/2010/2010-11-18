[00:02] <Tene> masak: I work at imvu.  We're hiring.  :)

[00:03] <masak> :D

[00:05] <diakopter> masak: I think that was a year ago or more

[00:06] <diakopter> before sara ford & sam ranji left

[00:06] <diakopter> ramji

[00:07] *** timbunce left
[00:08] <masak> diakopter: I'm not familiar with those two names.

[00:08] <diakopter> codeplex folks

[00:08] <diakopter> open-source advocates

[00:08] <masak> ok.

[00:09] <masak> still feel I'm missing some context.

[00:09] <diakopter> (I'm guessing they were his contacts)

[00:09] *** kulp left
[00:09] <Tene> We very much need another sysadmin on the ops team here, so if anyone's looking for work in sfbay, lemme know.

[00:10] <diakopter> Tene: hey um u not fair; we need like 4

[00:10] <diakopter> (halfway between sf & san jose)

[00:10] <Tene> diakopter: we have 4 total right now.

[00:11] <diakopter> $1x0k/year & great bonuses/benefits to the best-qualified

[00:11] *** timbunce joined
[00:12] *** donaldh left
[00:20] <TimToady> there is a long history in English of referring to a set of requirements as either 'the specification' or 'the specifications'; requiring one or the other is mere shibbolethery, in my opinion

[00:21] <TimToady> see for instance definition 2a of http://education.yahoo.com/reference/dictionary/entry/specification

[00:21] <TimToady> or google for "the specs" and ignore the rock band :)

[00:21] <masak> I see. then I'll stop kvetching about it.

[00:22] * diakopter keeps trying not to read shibbolethery as shibbolechery, but fails

[00:22] <TimToady> a spec is a fractal group of self-similar specs, it the semantic problem...

[00:22] <TimToady> *is

[00:22] <TimToady> at least we can have a spec if we want, unlike a "semantic" :)

[00:23] <masak> I got the feeling, up until I saw the repository name, that the community tradition was to refer to "the synopses" (plural) but "the spec" (singular).

[00:23] *** mkramer joined
[00:23] *** risou_ joined
[00:25] <sjohnson> TimToady: maybe p6 should use a "plan" instead

[00:26] *** XaRDaX left
[00:26] *** risou left
[00:28] *** bluescreen joined
[00:28] *** bluescreen is now known as Guest3023

[00:28] *** wamba left
[00:29] *** mkramer left
[00:34] *** timbunce left
[00:34] <colomon> masak: have you tested rakudo with the latest parrot?

[00:35] <masak> colomon: I believe so. will perl Configure.pl --gen-parrot test with the latest parrot?

[00:35] <masak> because I just ran the spectests that way.

[00:36] <colomon> huh.

[00:36] <colomon> no, --gen-parrot is getting parrot 2.9.1

[00:36] <colomon> we need parrot 2.10.1, right?

[00:39] <TimToady> did they really just make a new release for "perl Configure.pl" noise?  Somehow this seems...sorry...laughable, given all the rest of the spewage

[00:39] *** raw_ joined
[00:40] *** raw_ left
[00:46] * TimToady wonders if 1 => 2 => 3 -> ... should be taught to iterate like a lisp programmer would expet

[00:46] <TimToady> *ct

[00:46] <TimToady> seems like it would be pretty trivial

[00:49] <sjohnson> just another perl 6 hacker

[00:52] <sjohnson> just another lisp hacker actually

[01:09] *** redicaps joined
[01:11] *** justatheory left
[01:23] <masak> 'night, #perl6.

[01:24] *** jaldhar joined
[01:24] *** masak left
[01:25] *** risou joined
[01:27] *** risou_ left
[01:30] *** ggoebel joined
[01:33] *** envi left
[01:39] *** envi joined
[01:52] *** justatheory joined
[02:03] <dalek> rakudo: 32c08e3 | colomon++ | src/Perl6/Actions.pm:

[02:03] <dalek> rakudo: Allow operators like infix:<..> to autocurry when passed a WhateverCode argument.

[02:03] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/32c08e3fe1f4fcefe885d109f08fdbd44adcb37f

[02:03] <dalek> rakudo: 019c864 | colomon++ | src/Perl6/Actions.pm:

[02:03] <dalek> rakudo: Rewrite right-hand WhateverCode currying to work around the bizarre $counter + $right.arity error.

[02:03] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/019c864e8bac2f93be90824471bc23df6f70df9a

[02:10] <lichtkind> rakudo: @a = 1..9; @b = @a[3&5&8];@b

[02:10] <p6eval> rakudo 015d77: OUTPUT«===SORRY!===␤Symbol '@a' not predeclared in <anonymous> (/tmp/altLX4rbrg:22)␤»

[02:10] <lichtkind> rakudo: my @a = 1..9; @b = @a[3&5&8];@b

[02:10] <p6eval> rakudo 015d77: OUTPUT«===SORRY!===␤Symbol '@b' not predeclared in <anonymous> (/tmp/Rn2OV6eJXF:22)␤»

[02:10] <lichtkind> rakudo: my @a = 1..9; my @b = @a[3&5&8];@b

[02:10] <p6eval> rakudo 015d77:  ( no output )

[02:10] <lichtkind> rakudo: my @a = 1..9; my @b = @a[3|5|8];@b

[02:10] <p6eval> rakudo 015d77:  ( no output )

[02:11] <lichtkind> rakudo: my @a = 1..9; my @b = @a[3;5;8];@b

[02:11] <p6eval> rakudo 015d77:  ( no output )

[02:11] <lichtkind> rakudo: my @a = 1..9; my @b = @a[3,5,8];@b

[02:11] <p6eval> rakudo 015d77:  ( no output )

[02:11] <lichtkind> rakudo: my @a = 1..9; scalar @a

[02:11] <p6eval> rakudo 015d77: OUTPUT«Could not find sub &scalar␤  in main program body at line 22:/tmp/_tMbFRG1xM␤»

[02:11] *** risou left
[02:11] <lichtkind> rakudo: my @a = 1..9; + @a

[02:11] <p6eval> rakudo 015d77:  ( no output )

[02:17] *** whiteknight left
[02:25] <colomon> rakudo: my @a = 1..9; my @b = @a[3,5,8]; say @b

[02:25] <p6eval> rakudo 015d77: OUTPUT«469␤»

[02:26] *** drbean left
[02:27] <colomon> anyone out there know how the build/PARROT_REVISION file works now?

[02:28] <colomon> RELEASE_2_9_1-261-g495feaf is what it is currently set at

[02:29] <colomon> the RELEASE_2_9_1 part seems clear enough, and I assume g495feaf is the beginning of the git hash for the revision

[02:29] <colomon> but what's the 261?

[02:30] <colomon> oooo, wait, what's config/auto/git_describe.pm?  That sounds promising....

[02:31] *** molaf_ joined
[02:32] *** drbean joined
[02:34] *** jaldhar left
[02:34] *** ch3ck3r joined
[02:34] *** molaf left
[02:39] *** ch3ck left
[02:44] *** risou joined
[02:48] *** satyavvd joined
[02:52] * colomon wishes he understood the new build/PARROT_VERSION version number system.  What a stupid obstacle to testing the latest parrot with rakudo....

[02:57] *** satyavvd_ joined
[02:57] *** satyavvd left
[02:57] *** satyavvd_ is now known as satyavvd

[02:59] *** agentzh joined
[03:06] <colomon> rakudo: sub a(&b) { say &b.arity }; a(*+1)

[03:06] <p6eval> rakudo 015d77: OUTPUT«1␤»

[03:08] *** risou left
[03:16] <dukeleto> colomon: what is your issue?

[03:17] <colomon> I need to update build/PARROT_REVISION to the latest Parrot release.  But after the git changes, I've got no idea how to do that.

[03:17] <dukeleto> colomon: the 261 is how many commits past the tag it is, and 495feaf is the beginning of the sha1, g is for 'git'

[03:17] <dukeleto> colomon: moritz_ wrote the code, he probably has it already

[03:17] <colomon> alas, I suspect moritz_ is asleep

[03:17] <dukeleto> colomon: he wrote the rakudo side of things

[03:17] <dukeleto> colomon: are you release manager?

[03:17] *** Guest3023 left
[03:17] <colomon> nope, that's masak, also asleep

[03:18] <colomon> but getting rakudo up on the Parrot release is an important pre-release activity.

[03:18] <dukeleto> colomon: so what are you trying to do with PARROT_REVISION ?

[03:18] <colomon> figure out how to bring it to 2.10.1

[03:19] <colomon> is there a way to automatically generate the version string?

[03:20] <colomon> ....

[03:20] <colomon> or should it be RELEASE_2_10_1-0-hash?

[03:20] <colomon> that seems easy enough

[03:20] <colomon> so maybe the question becomes, what's the hash of the release?

[03:25] <colomon> RELEASE_2_10_0-0-c4477dd2 does not work.  :\

[03:27] *** envi left
[03:29] *** meppl left
[03:30] *** envi joined
[03:35] *** bluescreen joined
[03:35] *** satyavvd_ joined
[03:35] *** bluescreen is now known as Guest31423

[03:35] *** satyavvd left
[03:35] *** satyavvd__ joined
[03:39] *** zibri joined
[03:40] *** satyavvd_ left
[03:41] *** jaldhar joined
[03:41] <dukeleto> colomon: i don't understand what you are asking

[03:41] <dukeleto> colomon: you want the sha1 of our latest release? 2.10.1 ?

[03:42] <colomon> that would be great

[03:42] *** lichtkind left
[03:42] <dukeleto> $ git rev-parse RELEASE_2_10_0

[03:42] <dukeleto> 80d156ef8b867e29750211ec97d675ee1529d40b

[03:43] <dukeleto> someone forgot to push a tag for 2.10.1, it seems. I will look into that.

[03:43] <dukeleto> colomon: git rev-parse is your friend

[03:43] *** rgrau left
[03:44] <colomon> dukeleto++

[03:46] <dukeleto> colomon: you can also just do "git rev-parse HEAD" to get the sha1 of whatever master points to in the parrot repo

[03:48] <dukeleto> colomon: you can give rev-parse any branch name, tag or "commitish"

[04:00] *** plobsing_ left
[04:02] <colomon> rakudo: sub a(&b) { say &b.count }; a(*+1)

[04:02] <p6eval> rakudo 015d77: OUTPUT«1␤»

[04:03] <colomon> rakudo: sub a(&b) { say &b.count }; a(*+*)

[04:03] <p6eval> rakudo 015d77: OUTPUT«2␤»

[04:07] <colomon> rakudo: say 4 xx  5

[04:07] <p6eval> rakudo 015d77: OUTPUT«44444␤»

[04:10] *** gavv\w left
[04:11] *** gavv\w joined
[04:23] *** plobsing joined
[04:23] <colomon> phenny: tell masak I wasn't able to figure out how to set Rakudo to use the latest Parrot.  On the plus side, I have a patch to make @a[*-3..*-1] work spectesting now.  Please don't release until I can check it in.  :)

[04:23] <phenny> colomon: I'll pass that on when masak is around.

[04:40] *** ggoebel left
[05:10] *** ggoebel joined
[05:16] *** ggoebel left
[05:27] <dalek> std: bb56d4e | TimToady++ | CORE.setting:

[05:27] <dalek> std: [CORE] add roll, set, and bag

[05:27] <dalek> std: review: https://github.com/perl6/std/commit/bb56d4ee5e662ac3af6f7f8dc62ec43b6a4d8f3d

[05:36] *** kjeldahl joined
[05:37] *** Guest31423 left
[05:40] *** ch3ck3r left
[05:46] <colomon> phenny: tell masak The @a[*-3..*-1] patch is pushed.

[05:46] <phenny> colomon: I'll pass that on when masak is around.

[05:48] <dalek> rakudo: f8f556e | colomon++ | src/core/Any-list.pm:

[05:48] <dalek> rakudo: Support code blocks with arity > 1 in Any.postcircumfix:<[ ]>.

[05:48] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/f8f556eed1f1a8356f7dc7b7fe5b2cc5daa74e0d

[06:06] *** molaf_ left
[06:44] *** _xiaomo_ joined
[06:47] *** _kaare joined
[07:01] *** wtw joined
[07:18] <sorear> good * #perl6

[07:23] *** QinGW joined
[07:24] <dalek> roast: 12982c8 | TimToady++ | integration/weird-errors.t:

[07:24] <dalek> roast: time() will eventually fail at compile time

[07:24] <dalek> roast: 

[07:24] <dalek> roast: missing subs need to be in eval_dies_okay

[07:24] <dalek> roast: review: https://github.com/perl6/roast/commit/12982c8ae151f114e543d7811845b1c475be5d1a

[07:40] *** kjeldahl left
[07:44] *** dual left
[07:45] <sorear> Ick, eval

[08:01] <moritz_> eval is a very useful tool.

[08:09] * sorear is thinking that the way to a faster tryfile start is to slim down CORE.syml

[08:13] *** kjeldahl joined
[08:22] <sorear> TimToady: What was the connection between $¢.<foo>:delete and multidimensional array subscripts?

[08:22] *** cjk101010 joined
[08:27] *** aesop joined
[08:33] *** _xiaomo_ left
[08:36] *** justatheory left
[09:00] *** s1n joined
[09:15] <sorear> STD keeps breaking for no reason when I try to remove stuff from $ALL :/

[09:25] <dalek> niecza: 048dc16 | sorear++ | v6/tryfile:

[09:25] <dalek> niecza: [v6] Prune sub pads from CORE.syml for a much faster start

[09:25] <dalek> niecza: review: https://github.com/sorear/niecza/commit/048dc16d6ca1aeeea121261155660acda608597b

[09:25] *** david____ joined
[09:26] <david____> i know i am not the first that ask this question

[09:26] <david____> but when will be the official release of perl 6

[09:26] <david____> which year ?

[09:26] <david____> the first production release

[09:26] <moritz_> when it's done

[09:26] <david____> :-)

[09:26] <david____> ok

[09:27] <moritz_> I'm serious. There's no good way to plan volunteer's work in an unexplored territory

[09:27] <david____> yes

[09:27] <david____> you are correct

[09:27] <moritz_> that said I find rakudo usable for some tasks already

[09:27] <moritz_> and I fully expect it to become more and more usable each month and year

[09:28] <moritz_> and usable for a broader audience too

[09:28] *** redicaps left
[09:28] <david____> and are there any plans to merge more perl 6 features into perl 5

[09:28] <david____> like switch or state

[09:28] <david____> which i use in every day programming

[09:28] <david____> ?

[09:29] <moritz_> given/when, which is the perl equivalent of switch, is already backported to perl 5.10

[09:29] <moritz_> which was released in 2007

[09:30] <moritz_> likewise say(), smartmatching, // (defined-or) and a few other things

[09:30] *** redicaps1 joined
[09:30] <moritz_> and state variables too

[09:31] <moritz_> the upcoming 5.14 release will have another feature backported, but with different syntax

[09:31] <moritz_> $obj.?method  vs.  $obj&&->method

[09:34] *** tzhs joined
[09:36] <sorear> there will not be an offical release of Perl 6, since there is no official implementation

[09:37] <moritz_> there can be still official Perl 6 releases

[09:37] <moritz_> every implementation that passes the test suite my call itself an official Perl 6 release, just not the official Perl 6 release

[09:49] <sorear> looks like most of my time is being spent in the first line of ws, and in canonicalize_name

[09:49] *** whiteknight joined
[09:50] <moritz_> ws is called often.

[09:53] <moritz_> ENOphenny :(

[09:56] <david____> thanks a lot for your info

[09:56] *** david____ left
[09:57] *** wamba joined
[09:59] <sorear> right

[09:59] <sorear> so

[09:59] <sorear> next order of business I guess I'll be speeding up autovivification somehow

[10:10] <sorear> what.

[10:10] <sorear> std: $_foo

[10:10] <p6eval> std a194beb: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable $_foo is not predeclared at /tmp/tHVrzjjqyF line 1:␤------> [32m$_foo[33m⏏[31m<EOL>[0m␤Check failed␤FAILED 00:01 118m␤»

[10:11] <sorear> perl6: say '_' ~~ /<alpha>/

[10:11] <p6eval> rakudo 015d77: OUTPUT«_␤»

[10:11] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.16/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped by operat…

[10:12] *** QinGW left
[10:17] <dalek> niecza: fe78c53 | sorear++ | / (2 files):

[10:17] <dalek> niecza: [v6] fix 1, and $_

[10:17] <dalek> niecza: review: https://github.com/sorear/niecza/commit/fe78c53d5a920c9cff5142b3bece8566666ee224

[10:18] *** scottp joined
[10:18] *** scottp left
[10:19] * sorear starts another roast run, which should be about 30 minutes faster and might even pass more tests

[10:20] <moritz_> how long was the previous run?

[10:20] <sorear> I don't know

[10:20] <sorear> the time command failed.  horribly.

[10:20] * sorear tries it differently

[10:21] * sorear -> sleep

[10:26] *** nadim joined
[10:27] *** pmurias joined
[10:38] *** snarkyb00jum joined
[10:41] *** daxim joined
[10:41] *** dakkar joined
[10:42] *** snarkyb00jum left
[10:45] <dalek> rakudo: db14a08 | moritz++ | build/PARROT_REVISION:

[10:45] <dalek> rakudo: [release] bump parrot revision to 2.10.0 release

[10:45] <dalek> rakudo: 

[10:45] <dalek> rakudo: Note that parrot 2.10.0 has a known bug that prevents it from being installed

[10:45] <dalek> rakudo: if git is not installed. That's unfortunate, and a 2.10.1 release exist that

[10:45] <dalek> rakudo: fixes it, but it's nowhere to be found in the git repo.

[10:45] <dalek> rakudo: 

[10:45] <dalek> rakudo: gerd++ promised to put the stuff into the parrot repo soon, when that's done

[10:45] <dalek> rakudo: PARROT_REVISION should be bumped to the new tag

[10:45] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/db14a08f45228c58244d8c174a1ec10f7327fcd1

[10:45] <dalek> rakudo: 16b7466 | moritz++ | build/lib/Rakudo/CompareRevisions.pm:

[10:45] <dalek> rakudo: [configure] at a release tag, "git describe" returns just the tag. Fix a regex accordingly

[10:45] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/16b7466dac381d98ee13a84b67420cd5725a0f46

[10:45] <dalek> rakudo: 227feae | moritz++ | build/PARROT_REVISION:

[10:45] <dalek> rakudo: bump PARROT_REVISION to 2.10.1

[10:45] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/227feaec8d6c290639736bd1ff4539c52902bee0

[10:49] *** [particle] left
[10:50] *** ggoebel joined
[10:50] *** _xiaomo_ joined
[10:53] *** muixirt joined
[10:53] *** [particle] joined
[10:57] *** bbkr joined
[11:00] *** pmurias left
[11:07] *** knewt2 left
[11:08] *** knewt2 joined
[11:23] *** XaRDaX joined
[11:45] *** _xiaomo_ left
[11:47] *** satyavvd__ left
[11:51] *** masonkramer left
[11:54] <tadzik> ~~

[12:05] *** knewt2 left
[12:12] *** knewt2 joined
[12:14] *** sftp joined
[12:19] *** whiteknight left
[12:22] *** meppl joined
[12:23] <colomon> moritz_++

[12:27] *** drbean left
[12:29] *** orafu left
[12:29] *** orafu joined
[12:30] *** masak joined
[12:30] <masak> oh hai, #perl6!

[12:30] <masak> Rakudo release today :)

[12:31] <moritz_> oh hai masak

[12:32] *** drbean joined
[12:32] <colomon> masak: I've got @a[*-3..*-1] working for you now.  phenny was supposed to tell you...

[12:32] <masak> I see, I'm backlogging now...

[12:32] <masak> colomon++

[12:32] <moritz_> rakudo: say (1 ... 10)[*-3..*-1]

[12:32] <p6eval> rakudo 015d77: OUTPUT«Method 'succ' not found for invocant of class 'WhateverCode'␤  in 'RangeIter::reify' at line 4771:CORE.setting␤  in 'Any::postcircumfix:<[ ]>' at line 1␤  in main program body at line 1␤»

[12:33] <moritz_> that revision is quite old.

[12:35] <moritz_> ah, I didn't remove the parrot svn checkout

[12:39] *** phenny joined
[12:48] <masak> moritz_++ # PARROT_REVISION work

[12:48] <phenny> masak: 04:23Z <colomon> tell masak I wasn't able to figure out how to set Rakudo to use the latest Parrot.  On the plus side, I have a patch to make @a[*-3..*-1] work spectesting now.  Please don't release until I can check it in.  :)

[12:48] <phenny> masak: 05:46Z <colomon> tell masak The @a[*-3..*-1] patch is pushed.

[12:49] <masak> phenny: oh, *now* you spring to life? :)

[12:49] <masak> ah, she wasn't here before.

[12:53] <moritz_> rakudo: say (1 ... 10)[*-3..*-1]

[12:53] <p6eval> rakudo : OUTPUT«8910␤»

[12:53] <moritz_> colomon++

[12:54] <masak> \o/

[12:54] <masak> awesome.

[12:55] <moritz_> rakudo: say (1 ... 10)[2..*-2]

[12:55] <p6eval> rakudo : OUTPUT«3456789␤»

[12:56] *** bluescreen joined
[12:56] <moritz_> acually I had considered making a challenge out of that feature

[12:57] *** bluescreen is now known as Guest70621

[12:57] <moritz_> because I didn't want to tackle it myself :-)

[12:57] <moritz_> in the end I didn't do it, because I wasn't quite sure how much effort it would be

[12:58] <takadonet> morning all

[12:59] <MindosCheng> Morning

[12:59] <masak> takadonet: morning.

[13:00] <jnthn> o/

[13:01] *** snearch joined
[13:02] <moritz_> \o

[13:02] <moritz_> btw I did a small test release locally, and it seemed to obtain the right parrot version

[13:02] <moritz_> it just produces a slightly weird version output:

[13:03] <moritz_> $ ./perl6 --version

[13:03] <moritz_> This is Rakudo Perl 6, version 2010.10 built on parrot 2.10.0 RELEASE_2_10_1

[13:03] <moritz_> Copyright 2008-2010, The Perl Foundation

[13:03] <moritz_> it reports the wrong version, but the right tag

[13:03] <moritz_> I guess I can live with that

[13:04] <moritz_> not rakudo's fault though - it's what parrot_config VERSION returns

[13:11] <bbkr> rakudo: say +q; say q.Num # is this a bug that forcing numeric context on q works only with prefix:<+> ?

[13:11] <p6eval> rakudo : OUTPUT«===SORRY!===␤Confused at line 22, near "say q.Num "␤»

[13:11] <bbkr>  rakudo: say +q;

[13:11] <p6eval> rakudo : OUTPUT«Could not find sub &q␤  in main program body at line 22:/tmp/vpXZn42hT_␤»

[13:11] *** wamba left
[13:12] <bbkr> hmm, it parses on * .10 release... weird...

[13:12] <moritz_> std: q.Num

[13:12] <p6eval> std a194beb: OUTPUT«[31m===[0mSORRY![31m===[0m␤Couldn't find terminator . at /tmp/cUlc9O4qt9 line 1 (EOF):␤------> [32mq.Num[33m⏏[31m<EOL>[0m␤Parse failed␤FAILED 00:01 117m␤»

[13:12] <bbkr> std: +q

[13:12] <p6eval> std a194beb: OUTPUT«Invalid class name (STD::stop::) at /usr/local/lib/perl/5.10.1/Class/MOP.pm line 88␤        Class::MOP::load_first_existing_class('STD::stop::') called at /usr/local/lib/perl/5.10.1/Class/MOP.pm line 136␤        Class::MOP::load_class('STD::stop::', undef) called at

[13:12] <p6eval> ../usr/local/lib/perl/5.10.1/Mo…

[13:12] <moritz_> bbkr: it parses it as q/.../ quote, except with dots as delimiters

[13:12] <MindosCheng> rakudo looks cute when confused.

[13:13] <moritz_> bbkr: which is correct

[13:14] <bbkr> rakudo: q.Num.

[13:14] <p6eval> rakudo :  ( no output )

[13:14] <bbkr> indeed :)

[13:14] <moritz_> rakudo: say q.Num.

[13:14] <p6eval> rakudo : OUTPUT«Num␤»

[13:14] <moritz_> you can't have everything AND a pony

[13:15] <jnthn> Ponies are outside of the set of everything? :)

[13:15] <MindosCheng> lol

[13:16] <MindosCheng> Pony is everything.

[13:16] <moritz_> jnthn: the definition of "everything" is a bit tricky. If "everything" encludes the set of sets that don't contain themselves, it's not decidable

[13:16] <moritz_> s/encludes/includes/

[13:17] <moritz_> and ponies are a bit tricky too :-)

[13:17] <jnthn> Hmm, did we just reduce everything to the halting problem? :)

[13:17] <jnthn> Oh wait, we can't decide...

[13:17] <jnthn> :)

[13:18] <masak> oh, we're on the topic of naive set theory now?

[13:18] <masak> this is why Zermelo and Frankel decided to go have a cup of coffee one day :)

[13:19] <moritz_> masak: actually we just finished before you joined the discussion :-)

[13:19] <masak> s/Frankel/Fraenkel/

[13:19] <masak> moritz_: dang! :)

[13:19] <masak> but you only pointed at the *problems*, whereas the solutions are what's interesting...

[13:20] <masak> you'll probably know whether you want a pony if you adopt the Axiom of Choice... :P

[13:20] <moritz_> and if I can't decide? :-)

[13:20] *** muixirt left
[13:20] <masak> that's just life. :)

[13:22] *** fhelmberger joined
[13:23] *** Patterner left
[13:26] *** PerlPilot joined
[13:28] *** MayDaniel joined
[13:29] *** PerlJam left
[13:34] *** Psyche^ joined
[13:34] *** Psyche^ is now known as Patterner

[13:39] *** nymacro joined
[13:40] *** masonkramer joined
[13:41] *** MayDaniel left
[13:42] <masak> moritz_: after having read through the list of uses of 'local' in http://perl.plover.com/local.html -- I'm starting to think you're right about 'temp' not having many remaining uses in Perl 6. :)

[13:42] <dalek> roast: e4acb32 | (Solomon Foster)++ | S02-builtin_data_types/whatever.t:

[13:42] <dalek> roast: Remove fudging on tests that now work.

[13:42] <dalek> roast: review: https://github.com/perl6/roast/commit/e4acb32e2e422a09faf3b996f24f4a024e2b5638

[13:43] <masak> I basically saw two uses in that article: glob filehandles and dynamic scoping. Perl 6 has scalar filehandles and star-twigil variables, respectively.

[13:43] <moritz_> even perl 5 has scalar filehandles :-)

[13:46] *** redicaps1 left
[13:46] <jnthn> Maybe it's just a temp feature then. ;)

[13:47] <masak> moritz_: I know. maybe it didn't at the time of that article's writing, though.

[13:48] <masak> in some ways, I have much more hope in 'let' becoming a cool/useful feature. it abstracts away some backtracking boilerplate.

[13:49] <moritz_> fwiw lexical file handles are a rather old feature, but in ancient version of perl 5 they didn't autovivify, so <c> open my $var, ...</c> wouldn't work

[13:50] <masak> I don't understand that use of the word 'autovivify'.

[13:51] <moritz_> my $var; creates a lexical varaible in perl 5. it contains undef.

[13:51] <moritz_> open FOO, ...; otoh references a typeglob

[13:51] <moritz_> with a slot for file handles

[13:51] <masak> right.

[13:52] <moritz_> so in "modern" perl 5, 'open my $var, ...' automatically puts all the stuff into $var that's required to store a file handle

[13:52] <moritz_> that's what "autovivification" means

[13:53] <masak> ah. yes.

[13:53] <masak> I didn't think of file handles as requiring any special machinery.

[13:53] <masak> they don't in Perl 6, far as I'm aware.

[13:53] <moritz_> (p5 guts hacker will probably cringe in horror at that explanation :-)

[13:54] <moritz_> masak: afaict open() is much more magic in p5 too

[13:54] <moritz_> in many, many ways

[13:54] <moritz_> for example

[13:54] <moritz_> open Foo;

[13:55] <moritz_> is the same as open Foo, $Foo; (assuming that $Foo is a package var, not a lexical)

[13:57] <masak> ick.

[13:57] <jnthn> wow

[13:57] <jnthn> That's...sort of cute.

[13:57] <moritz_> $ perldoc -f open|wc -l

[13:57] <moritz_> 383

[13:57] <jnthn> :)

[14:05] <Juerd> If it did open Foo, 'Foo' it'd be kinda useful for many cute oneliners :)

[14:06] <jnthn> slurp('filename') and lines('filename') tend to serve that role well in Perl 6 though :)

[14:06] <jnthn> Especially as with the latter you can set up a pipeline.

[14:07] <moritz_> isn't it lines('filename'.IO) these days?

[14:07] <jnthn> please no

[14:07] <jnthn> but maybe.

[14:07] <moritz_> because words() acts on the string, and doesn't interpret it as file name

[14:07] <jnthn> ah, h

[14:08] <jnthn> mmmmmm

[14:09] <masak> I remember some spec changes in that area.

[14:10] <masak> without remembering their exact details, I'd hope that &words and &lines have multis with the same signatures.

[14:11] <masak> (and that, apart from the specific thing they do differently, they have the same semantics)

[14:11] *** nymacro left
[14:11] <moritz_> that was the point of the spec change

[14:11] <masak> \o/

[14:12] * MindosCheng wanna know cute one-liners.

[14:12] <masak> MindosCheng: you should watch jnthn's talk about small and large Perl 6.

[14:13] <masak> MindosCheng: http://www.nuug.no/aktiviteter/20100914-little-tools-large-apps/

[14:15] <MindosCheng> masak++

[14:17] <tadzik> o/

[14:18] <takadonet> tadzik: o/

[14:19] *** felipe joined
[14:23] *** Lorn left
[14:23] *** Lorn joined
[14:27] <jnthn> masak: Looking at that video though, you may note that it makes my examples less cute. ;)

[14:27] <masak> oh?

[14:28] <takadonet> jnthn++

[14:28] <jnthn> I'm not sure what can really be done about it though. I agree having lines and words have different siggies is wrong.

[14:29] <jnthn> masak: well, lines('events') ==> grep /beer/ ==> say

[14:29] <jnthn> Is cuter than

[14:29] <jnthn> lines('events'.IO) ==> grep /beer/ ==> say

[14:29] <jnthn> That .IO feels kinda noisy.

[14:29] <masak> well... yes and no.

[14:29] <masak> the .IO feels noisy in $file.IO ~~ :e as well

[14:29] <masak> especially since we started out at :e $file

[14:30] <masak> er. -e $file

[14:30] <jnthn> aye

[14:31] <jnthn> I understand why, just not sure it ain't a false minima.

[14:33] <masak> come to think of it, &slurp is arguably also in that group with &lines and &words.

[14:33] <jnthn> $string.slurp is identity though :)

[14:33] <jnthn> How...useless. :)

[14:33] <masak> er, except that slurping a Str would then be a... right.

[14:33] <masak> so never mind.

[14:34] <jnthn> :)

[14:34] <jnthn> phew

[14:36] *** pmurias joined
[14:47] <colomon> jnthn: can you please review my patches last night, if you haven't already?  thanks.

[14:49] <jnthn> colomon: Didn't get chance yet. Unfortunately, I'm still trying to fight off some illness, which is leaving me mostly wiped out on an evening after $dayjob. So I'm not getting to much at all. I'll try and remember to look at them soon, but hassle me again at the weekend if I forget. :)

[14:49] *** wtw left
[14:50] * MindosCheng pat jnthn

[14:50] *** nymacro joined
[14:51] *** PerlPilot left
[14:52] *** redicaps joined
[14:52] *** PerlJam joined
[14:53] <jnthn> MindosCheng: :)

[14:54] *** blongden joined
[14:56] <PerlJam> So, I guess the relationship between parrot and rakudo is still somewhat broken.   

[14:57] <masak> PerlJam: in what sense?

[14:57] <masak> this sounds important, since I'm to make a release today.

[14:57] <PerlJam> If I build parrot from the tarball, there is no git_describe key

[14:57] <PerlJam> (and thus I can't build rakudo from the tarball)

[14:57] <PerlJam> Everything works fine as long as you have a repo around

[14:57] <masak> oh, but that doesn't affect the --gen-parrot instll path, right?

[14:58] * masak tries that path from scratch

[15:00] <moritz_> PerlJam: uhm, it should fall back to comparing the versions if no git_describe output is available

[15:00] <moritz_> oh.

[15:00] <moritz_> and the installed parrot identifies itself as 2.10.0

[15:00] <moritz_> not 2.10.1

[15:00] <moritz_> so

[15:00] <moritz_> two solutions

[15:00] <masak> :(

[15:00] <moritz_> 1) a fixed parrot release

[15:00] <moritz_> or

[15:01] <moritz_> 2) require version 2.10.0

[15:01] <moritz_> 2) isn't as bad as it sounds, because every time you manage to build a parrot 2.10.0 you get the same functionality as with 2.10.1

[15:01] <masak> I'd like to once again request a suitable .pm group for this month's release name.

[15:01] <moritz_> just that 2.10.1 has a higher chance to build

[15:02] <moritz_> so build/PARROT_REVISION could like like this:

[15:02] <PerlJam> Here's what happened when I tried to build rakudo using a freshly compiled parrot from the parrot-2.10.1 tarball: https://gist.github.com/705084

[15:02] <moritz_> RELEASE_2_10_1 2.10.0

[15:03] <jnthn> masak: I should found Lund.pm or something ;)

[15:03] <masak> jnthn: :)

[15:03] <jnthn> But ENOTAPPROPIRATE due to lack of current existence :)

[15:03] <moritz_> we could just invent .pm names

[15:04] <moritz_> and see if somebody notices it :-)

[15:04] <PerlJam> Hogwarts.pm

[15:04] <PerlJam> ;)

[15:04] <masak> Silesia.pm

[15:05] <masak> GothamCity.pm

[15:05] <masak> Metropolis.pm

[15:05] *** _kaare left
[15:06] <PerlJam> Gondor.pm

[15:06] <PerlJam> Moria.pm

[15:06] <PerlJam> Rivendell.pm

[15:07] <masak> Ankh::Morpork.pm

[15:07] <moritz_> Ankh/Morpork.pm please :-)

[15:07] <masak> right.

[15:08] <masak> NewNewNewNewNewNewNewNewNewNewNewNewNewNewNewNewNewNewNewYork.pm

[15:09] <PerlJam> Which pm group sponsored the NPW?  (or was there a pm involved?)

[15:09] <huf> that city'd wrap around the earth a few times

[15:10] <huf> each new adds about an atlantic ocean's worth of offset west

[15:10] <masak> huf: if it were on the Earth, yes.

[15:10] <mathw> but in Futurama, New New York is built upon the ruins of (old) New York

[15:10] <masak> TwinPeaks.pm

[15:10] <mathw> so wouldn't NewNewNewNewNewNewNewNewNewNewNewNewNewNewNewNewNewNewNewYork be somewhere in the upper atmosphere?

[15:10] <mathw> reached by a long, spiral ramp

[15:11] <masak> mathw: the New**19 York is a Dr Who reference.

[15:11] <mathw> and inhabited by bird people

[15:11] <mathw> oh that one

[15:11] <mathw> I didn't like that episode

[15:11] <mathw> It was from the 'oh no it's still awful' era

[15:11] <masak> :)

[15:15] *** cjk101010 left
[15:15] <moritz_> masak, PerlJam: I've started the parrotgit2 branch

[15:15] <moritz_> I've tried to fix Configure.pl when dealing with a parrot-from-tarball

[15:15] <moritz_> PerlJam: it would be very nice if you could test that

[15:15] <masak> moritz_++

[15:16] <PerlJam> will do

[15:16] * moritz_ tests --gen-parrot

[15:16] <moritz_> I didn't make --gen-parrot smart

[15:17] <colomon> rakudo: say "alive"

[15:17] <p6eval> rakudo : OUTPUT«alive␤»

[15:17] <PerlJam> I think --gen-parrot doesn't need to be smart since it grabs the parrot repo

[15:17] <colomon> ummmm.... what happened to the version hash in the p6eval output?

[15:17] <moritz_> so if you have a parrot-from-tarball installed, and use --gen-parrot, it'll build a redundant parrot

[15:18] <moritz_> colomon: I wiped the old rakudo builds, and with it the hash file

[15:18] <moritz_> colomon: a cron job should eventually trigger a rebuild that creates it again

[15:18] <colomon> rakduo: my @a = 1..10; say @a[*-4..*-2]

[15:18] <moritz_> if it does not by tomorrow, I'll investigate

[15:18] <colomon> rakudo: my @a = 1..10; say @a[*-4..*-2]

[15:18] <p6eval> rakudo : OUTPUT«789␤»

[15:19] * PerlJam patiently waits for his other tests to finish

[15:25] *** MayDaniel joined
[15:28] *** snearch left
[15:28] * jnthn afk

[15:31] *** mkramer joined
[15:33] <dalek> rakudo: e7a20ed | moritz++ | build/PARROT_REVISION:

[15:33] <dalek> rakudo: change PARROT_REVISION again

[15:33] <dalek> rakudo: 

[15:33] <dalek> rakudo: We require only parrot 2.10.0, but use 2.10.1 for --gen-parrot.

[15:33] <dalek> rakudo: The background is that 2.10.1 identifies itself as 2.10.0.

[15:33] <dalek> rakudo: OTOH the only difference is that 2.10.1 is more likely to build, so if

[15:33] <dalek> rakudo: somebody presents us an installed 2.10.0, there's no reason to reject that.

[15:33] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/e7a20ed999d03a56a259a8f42d688dba671be2f6

[15:33] *** mkramer1 joined
[15:35] *** mkramer left
[15:36] <PerlJam> moritz_: parrotgit2 seems to work fine with my parrot-built-from-tarball.  (at least it compiles, I didn't run through all of the tests)

[15:36] <moritz_> PerlJam: thanks, that's all I'm interested in

[15:36] <moritz_> PerlJam: feel free to merge :-)

[15:37] *** agentzh left
[15:37] *** justatheory joined
[15:38] <dalek> rakudo: b469741 | moritz++ | Configure.pl:

[15:38] <dalek> rakudo: an attempt to fix Configure.pl with a parrot-built-from-tarball

[15:38] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/b469741a21c9c82cd0cef7d911d10c1ee00d9986

[15:42] *** alester joined
[15:43] *** redicaps left
[15:48] *** kjeldahl left
[15:51] *** risou joined
[15:57] *** tzhs left
[16:04] *** icwiener joined
[16:08] *** hercynium joined
[16:11] *** pmurias left
[16:14] <masak> moritz_: sorry, I haven't been following along too closely. would I be able to go into release mode with the current master?

[16:15] <moritz_> masak: yes

[16:15] <moritz_> masak: assuming you find a release name :-)

[16:16] * masak considers going with Ankh/Morpork.pm and see how far he gets with it

[16:19] <masak> I mean, even though nobody here *went* to the YAPC::Discworld this year, their Perl 6 track looked really nice.

[16:20] <moritz_> indeed :-)

[16:20] <masak> compared to BristolBath (and as far as I know), they've done a lot.

[16:21] *** kjeldahl joined
[16:23] * masak just learned that each Discworld half-year has 13 months

[16:23] <masak> Offle, February, March, April, May, June, Grune, August, Spune, Sektober, Ember, December, and Ick.

[16:23] <colomon> Ick and Offle for winter, eh?

[16:24] <masak> dunno. got it from here: http://wiki.lspace.org/wiki/Discworld_calendar

[16:24] * MindosCheng saw GURPS Discworld once...

[16:26] *** risou_ joined
[16:28] *** risou left
[16:33] *** notjack joined
[16:34] <notjack> is there an official perl6 news site or page?  the ones I googled seem out of date

[16:35] <masak> perl6.org

[16:35] <moritz_> notjack: perl6.org is our website. planetsix.perl.org has nearly all interesting Perl 6 blogs

[16:35] <masak> as for news, see rakudo.org for latest Rakudo releases.

[16:36] <Teratogen> will perl 6 eventually be written in perl 6?

[16:36] <moritz_> Teratogen: it already is, in big parts

[16:36] <Teratogen> is that the ultimate goal?

[16:37] <Teratogen> also, early on, I heard some crazy story that the perl 6 compiler was going to be one huge long regular expression!

[16:37] <notjack> thanks

[16:37] <moritz_> most Rakudo code I look at is written in nqp-rx, which is a subset of Perl 6. Or in rakudo's Perl 6 dialect.

[16:37] <moritz_> Teratogen: we parse Perl 6 with Perl 6 grammars. Which are collections of regexes and methods.

[16:38] <moritz_> Teratogen: https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.pm

[16:39] *** _kaare joined
[16:39] <notjack> I know someone wrote an APL parser in Perl6 (or some old flavor of Perl6) - is that person here, and can s/he comment on how long it took?

[16:40] <notjack> I'm thinking of writing a J parser, but I'm not much of a parser guy - I just want an easy way to make an open-source J interpreter (the current one isn't open source and so I'm a bit hamstrung)

[16:40] <notjack> (J is very like APL, for those who don't know)

[16:41] <moritz_> notjack: I don't know how long it takes, but once you get the hang on it, it's no rocket science

[16:41] <moritz_> http://perlgeek.de/en/article/debug-a-perl-6-grammar might be useful at some point :-)

[16:41] <notjack> I've heard that once you get the hang of it, rocket science isn't exactly rocket science either - but I get your thrust :)

[16:42] <moritz_> notjack: a professor once said "that's no rocket science... actually it's *MUCH HARDER* than rocket science" :-)

[16:43] <moritz_> it was about density functional theory in solid state physics

[16:44] <masak> Teratogen: what moritz_ said. the "one huge long regular expression" is in some sense true, because grammars are that. but it's just as strange to describe it as that, as it would be to describe a class hierarchy as "one huge long jumble of variables and statements".

[16:45] <moritz_> masak: I'll be offline for about 2.5H... if you need any fixes for the configure system, contact your local p5 dealer, or wait for my return :-)

[16:45] <arnsholt> I'd disagree with grammars being just a long regex, but only a bit =)

[16:45] <masak> moritz_: I won't start relenging until in about 2.5 h anyway.

[16:46] <masak> arnsholt: well, it's not a perfect fit.

[16:46] <masak> arnsholt: just as there's a bit of runtime polymorphism in methods, there is in grammars as well.

[16:46] <notjack> let me ask for a concrete example then

[16:47] <masak> but some people, diakopter for example, have been experimenting with compiling grammars down to one huge regex. I think.

[16:47] <arnsholt> notjack: But as people have pointed out, writing grammars is much like writing regexes. Only quite a bit easier in a few key aspects I'd argue

[16:47] <notjack> let's say I have a language where foo bar and baz are functions of ambivalent arity: they can each be called as either  foo arg1  or  arg0 foo arg1  

[16:48] <masak> notjack: the best single advice I can give you on writing grammars (besides reading moritz_++' article) is "use TDD".

[16:48] <notjack> and now I want to add a grammar rule that says  "(foo bar baz)  arg1"  <->  "(foo arg1) bar (baz arg1)"  and similarly  "arg0 (foo bar baz)  arg1"  <->  "(arg0 foo arg1) bar (arg0 baz arg1)"

[16:48] <notjack> does that seem like it would be hard to do?

[16:49] <masak> no.

[16:49] <notjack> masak: oh yes, TDD definitely.

[16:49] <masak> though you seem to be suggesting internal re-writing in some prior phase.

[16:49] <notjack> masak: can you should me the rule in broad strokes?

[16:49] <notjack> masak: sorry, I missed that: what prior phase?  

[16:50] <masak> notjack: well, I'd rather you went and experimented for a while and came back with an even more concrete question :)

[16:50] <masak> notjack: I'm not sure I have the energy to do design right now.

[16:50] <notjack> that's not concrete enough?  (that's an actual - and useful - grammar rule in J, btw)

[16:50] <notjack> masak: understood

[16:50] <masak> it's not syntax I'm familiar with.

[16:51] <notjack> maybe I'll cop the APL example and start from there

[16:51] <masak> that is, it looks neither like (E)BNF nor like Perl 6.

[16:51] <notjack> <-> means "equivalent to"

[16:51] <masak> start simple. don't you dare write code before you've written a test :)

[16:51] <masak> yes, I got that part.

[16:51] *** mila_ joined
[16:51] <notjack> the rest is actual syntax

[16:52] <masak> ...except that arg0 and arg1 are probably metasyntactic?

[16:52] <notjack> no, they're arguments

[16:52] <notjack> data

[16:52] <masak> ok.

[16:52] <notjack> let's say  foo=-  and bar=*  and baz=-  (same as foo)

[16:52] <notjack> then "(- * -) 5" <-> "(- 5)*(-5)"

[16:52] <masak> I wouldn't do a rewriting phase, I'd probably parse into an AST, and then do manipulation on the AST.

[16:53] <notjack> similarly "4 (- * -) 5" <-> "(4-5)*(4-5)"

[16:53] <masak> notjack: right, ok.

[16:54] <masak> notjack: bit too many details to take in, I'm afraid. if it were my problem, I might make more of an effort to dissect it. as it's yours, I encourage you to do it.

[16:54] <masak> notjack: have you skimmed S05?

[16:54] <notjack> ah, the much feared AST.  Fine, fine ... I'll go learn what parsing actually means.  

[16:54] <notjack> yeah, I've skimmed most of the Ss and As

[16:54] <masak> wow, nice.

[16:55] <notjack> I just haven't typed a line of code :)

[16:55] <arnsholt> ASTs aren't too hard either. It's just a fancy word for data-structure-that-represents-my-program

[16:55] *** mila__ left
[16:56] <masak> exactly.

[16:56] <masak> and the reason I'd recommend manipulating those rather than strings, is that the AST already embodies the structure of the program.

[16:56] <masak> strings are flat, and therefore it's much messier to handle them.

[16:57] <arnsholt> Exactly. Objects (which is what you'll probably use for the AST) have structure, which is so much nicer =)

[16:57] <TimToady> though I suspect notjack++ is thinking of strings of tokens, not chars

[16:58] <notjack> correct

[16:58] <notjack> I mean, I could actually write a regex to do what I want -- but that doesn't feel official :)

[16:59] <notjack> oh yeah - and lexing.  well, that's not too hard.  I have the FSM already.

[17:00] <masak> strings of token is also fine, and perhaps better for this purpose. it also has more structure than just strings of chars.

[17:00] <notjack> strings of chars add no value

[17:04] <masak> no, it's numbers that add value :P

[17:04] <notjack> 4+"5" ; # :)

[17:04] <masak> I'm going to go make food now.

[17:04] <notjack> later - thanks

[17:05] <masak> if anyone has a better name than Ankh::Morpork for the upcoming release, please let me know.

[17:05] <masak> would be nice to stick with real pm groups for Rakudo, and maybe save the fictional ones for Yapsi...

[17:05] * masak bows out

[17:05] *** masak left
[17:16] <dukeleto> how is the Rakudo release going?

[17:16] <dukeleto> which parrot sha1 is it targetting?

[17:18] *** LionMade0fLions is now known as MilLionsOfLions

[17:22] *** Axius joined
[17:24] *** Axius left
[17:24] *** Bzek_ joined
[17:24] *** Axius joined
[17:26] *** risou joined
[17:27] *** Bzek left
[17:28] *** MayDaniel left
[17:28] *** risou_ left
[17:30] *** Axius_ joined
[17:31] *** [particle] left
[17:32] *** Axius left
[17:36] *** nymacro left
[17:42] *** wamba joined
[17:54] *** Chillance joined
[18:00] *** cdarroch joined
[18:00] *** cdarroch left
[18:00] *** cdarroch joined
[18:01] *** Axius_ left
[18:03] *** impious joined
[18:04] *** tylercurtis joined
[18:06] *** dakkar left
[18:06] <tylercurtis> Should $*EXECUTABLE_NAME and $*PROGRAM_NAME be failures in modules that are being loaded by "use"?

[18:12] *** MayDaniel joined
[18:13] *** MayDaniel left
[18:13] <TimToady> I don't think we can separate benign uses of those variables from malign; for instance, they could be useful for error reporting.

[18:13] *** kjeldahl left
[18:14] *** notjack left
[18:15] *** daxim left
[18:15] *** impious left
[18:16] <TimToady> and we tend to go with innocent until proven guilty here, most of the time *cough* Durations *cough*

[18:18] *** [particle] joined
[18:26] *** ch3ck joined
[18:26] *** risou_ joined
[18:27] *** dual joined
[18:28] *** risou left
[18:48] <mkramer1> ahh, priority one troubleshoots are out of my box, now to begin my day's work....

[18:48] <mkramer1> whoops

[18:48] <mkramer1> wrong channel again

[18:49] <mkramer1> (if only I were working in perl6, I wouldn't have these problems!)

[18:57] *** risou joined
[19:01] *** risou_ left
[19:06] * moritz_ back

[19:07] <diakopter> wb

[19:10] <Teratogen> will most perl 5 code work in perl 6?

[19:11] <diakopter> depends... most of ... code what size?

[19:11] <diakopter> :)

[19:11] <diakopter> (affects how much you'll have to port) ;)

[19:11] <diakopter> s/ll/d/

[19:12] <flussence> someone, please put a "FAQ" link on the front of perl6.org

[19:13] <diakopter> flussence: you can :)

[19:14] <diakopter> would you like to be that someone?

[19:14] <colomon> dukeleto: the good news on the Rakudo/Parrot interface is that moritz_++ stepped in to make it work.  :)

[19:17] *** MayDaniel joined
[19:18] <flussence> diakopter: I dunno, maybe later if nobody else volunteers though. Do we even have a FAQ to link to?

[19:19] <moritz_> notreally

[19:19] <moritz_> but you can start /faq/ page if you want :-)

[19:19] <flussence> there's a page for one on the wiki, it's a bit sparse right now though...

[19:30] <tylercurtis> TimToady: is that a no to $*EXECUTABLE_NAME and $*PROGRAM_NAME failing in loaded modules? That appears to be Rakudo's current behavior.

[19:30] <tylercurtis> On a related note, is there any dynamic variable I can use to know whether a module is being executed directly or just being imported?

[19:33] <flussence> you could look at the code that does MAIN() for a hint, that needs to know the same thing.

[19:33] *** MayDaniel left
[19:39] <dukeleto> colomon: good to hear :)

[19:59] <sjohnson> Teratogen: it will not unless you give it a directive to at the start, like use v5; or something

[19:59] <colomon> which doesn't work in Rakudo.

[20:00] <Teratogen> ok

[20:01] <sjohnson> that is to be done in the future i believe.. so you might have to hold your horses

[20:03] <tylercurtis> On the other hand, Perl 5 code still works in Perl 5. And if you want, you could even use Blizkost to access that Perl 5 code from Perl 6.

[20:10] *** wamba left
[20:13] *** WebDragon joined
[20:13] * WebDragon tips proverbial hat

[20:14] <WebDragon> recently noticed that Rakudo Star is part of Fedora 14's release

[20:15] <WebDragon> first off, _nice_

[20:16] <WebDragon> congratulations are, methinks, in order

[20:16] <colomon> thank you

[20:16] <WebDragon> has anyone here been working with that particular release (F14) ?

[20:17] <WebDragon> I have yet to upgrade from F12 but have it planned for the next weekend or two, due to the EOL coming up in december for F12

[20:17] <WebDragon> more or less wanted to know what, if any, interesting things I should be looking for in order to start playing with it (admittedly for the first time) 

[20:19] <WebDragon> I'd noticed somewhat ago that I'd, as a necessary part of my web workload at $WORK, been spending way too much time in php, and my perl skills had atrophied considerably from where I'd managed to get them

[20:19] <colomon> The only Fedora-like thing I have around here is an old copy of CentOS, but hopefully someone else is around who is using it.

[20:19] <WebDragon> been working towards remedying that fact, when I discovered this little gem

[20:19] <colomon> What do you know about Perl 6?

[20:20] <WebDragon> only what little I'd played with as part of the various porting of bits back into perl5 and the various exegesis and apocalypse postings over the past few years

[20:20] *** rindolf joined
[20:20] <WebDragon> nothing's *really* stuck in my brain yet, but that just gives me more incentive to play

[20:20] <WebDragon> :D

[20:20] <rindolf> Hi WebDragon 

[20:20] <WebDragon> heya rindolf :)

[20:20] <TimToady> http://rosettacode.org/wiki/Category:Perl_6 has 240 examples of working Perl6 code

[20:20] <WebDragon> oh, _lovely_

[20:21] <colomon> woah, you guys are up to 240 examples now?!

[20:21] <rindolf> BTW, does Parrot already have bignum types?

[20:21] <WebDragon> TimToady: do they share corresponding examples of what it would have looked like were it written using perl5 ?

[20:21] <TimToady> Util++ has been going to town on it lately

[20:21] <colomon> rindolf: I believe it has some sort of depreciated bignum type from the early days

[20:22] <TimToady> WebDragon: generally, just page up from each Perl 6 example

[20:22] <TimToady> though a few of them have no corresponding Perl 5

[20:22] <rindolf> colomon: ah.

[20:22] <WebDragon> sweet. that'll definitely help with the mental transitions 

[20:22] <colomon> Perl 5 version may not be the same approach, right?

[20:22] <rindolf> colomon: maybe I'll work on binding GNU MP

[20:22] <colomon> rindolf: if it were easy, I'd have done it already myself.  :)

[20:22] <TimToady> colomon: sometimes it is, sometimes it isn't

[20:23] <TimToady> some of the P6 examples give something like the P5 approach, and then an alternative FP-oriented approach

[20:23] <WebDragon> colomon: just use monofilament. (i.e. binary rope)

[20:23] <WebDragon> :D

[20:23] * WebDragon hides under his rock

[20:24] <colomon> rindolf: not that you should let it stop you!  I'd certainly love to have bigints working in Rakudo.

[20:24] <TimToady> funny you should mention mono...

[20:25] <WebDragon> I know comparatively little regarding the various bits (such as Parrot) 

[20:25] <TimToady> niecza: say "Am I running under mono?"

[20:25] <p6eval> niecza fe78c53: OUTPUT«Am I running under mono?␤»

[20:25] <WebDragon> I've read bits over the years but have never gone on to try installing any of it due mostly to various time constraints involving large chunks of RealLife™ which keep invading my space

[20:25] <sjohnson> hi

[20:26] <colomon> WebDragon: you can try simple things right here, you know.

[20:26] <rindolf> WebDragon: what's up?

[20:26] <WebDragon> things have been settling down for a while now to where I've actually started work on rearranging my apartment once again, seeing as things have approached stability

[20:26] <colomon> rakudo: my @fib := 1, 1, * + * ... *; say @fib[^40].perl

[20:26] <p6eval> rakudo : OUTPUT«(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155)␤»

[20:26] <TimToady> perl6: say 1..3 X~ <a b c>

[20:26] <p6eval> pugs: OUTPUT«123␤»

[20:26] <p6eval> ..rakudo : OUTPUT«1a1b1c2a2b2c3a3b3c␤»

[20:27] <WebDragon> once that's done I'll have a more comfortable working environ once again, at home as well as at work

[20:27] <WebDragon> oh, that's just nifty

[20:29] <WebDragon> how did the Rakudo Star bit come about?

[20:30] <flussence> rakudo: say *.WHAT

[20:30] <p6eval> rakudo : OUTPUT«Whatever()␤»

[20:30] <WebDragon> I recall hearing about Rakudo but don't recall exactly when the "Star" business happened, as I was out of touch with Perl for way too long

[20:32] <TimToady> http://twit.tv/floss140 if you don't mind a 1.5 hour interview of Patrick Michaud by Randal Schwartz

[20:33] *** Trashlord left
[20:33] <TimToady> well, not 1.5, it's 1:21:40

[20:36] *** risou left
[20:38] <WebDragon> nice, links in with google reader

[20:45] *** masak joined
[20:45] <masak> hey there, #perl6 people.

[20:47] <tylercurtis> Hi, masak.

[20:47] *** Guest70621 left
[20:49] *** AABMEJ7 joined
[20:52] <rindolf> Hi masak 

[20:53] <masak> I'll just backlog a little, and then we'll do a release, OK?

[20:59] <masak> WebDragon: hi! welcome!

[20:59] <WebDragon> heyaz :)

[21:00] * WebDragon passes around the carafe of DragonCoffee™ 

[21:01] <masak> WebDragon: besides the scripts at Rosettacode, http://modules.perl6.org/ contains over 80 modules of Perl 6 code to look at.

[21:01] <shortcircuit> TimToady, WebDragon: Give me a minute or five, and I should be able to create pages that will quickly list the RC tasks which have P5, but no P6, and P6, but no P5.

[21:01] <masak> WebDragon: also, Rakudo itself is chock full of good Perl 6 code.

[21:02] <WebDragon> it's still quite new to me. I haven't even got F14 installed yet (but it will be soon) 

[21:02] <WebDragon> I don't even yet know how to poke at it to make it sit up and hello, world me

[21:03] <masak> rakudo: say "Hello WebDragon!"

[21:03] <p6eval> rakudo : OUTPUT«Hello WebDragon!␤»

[21:03] <WebDragon> well I can see how to do it in the channel

[21:04] <masak> WebDragon: if you have installed it on F14, my guess is that you have a 'perl6' binary somewhere in your $PATH

[21:04] *** Guest70621 joined
[21:04] * masak pokes Guest70621 with a feather

[21:04] <WebDragon> but I'm reasonably sure you don't want me writing and testing my programs in the channel, one line of code at a time considering that even this as an interactive shell is somewhat lacking in that individual line invocations aren't going to recall variables from one line to the next

[21:04] <WebDragon> http://use.perl.org/~masak/journal/38279  <-- ala

[21:05] <masak> WebDragon: it does nowadays :)

[21:05] <masak> ...I think

[21:05] * WebDragon chuckles

[21:05] <masak> yes it does!

[21:05] <masak> > my $a = 52

[21:05] <masak> 52

[21:05] <masak> > say $a

[21:05] <masak> 52

[21:05] <masak> pmichaud_++ pmichaud_++ pmichaud_++

[21:05] * WebDragon doesn't want to make a nuisance of himself doing interactive shell invocations here in #perl6

[21:06] <shortcircuit> http://rosettacode.org/wiki/User:Short_Circuit/SomePerls

[21:06] <masak> WebDragon: by the way, I've moved blogs: http://strangelyconsistent.org/blog/pretending-that-envy-is-one-of-the-perl-virtues

[21:06] <colomon> what, no mandelbrot in p6 there yet?!?

[21:07] <masak> I should put up a sign at the old place saying I've done so.

[21:07] <masak> colomon: go for it!

[21:08] <masak> oh right, I *can't* post on use.perl.

[21:08] <masak> now I remember why I left.

[21:08] * masak goes into releng mode

[21:08] <frettled> :)

[21:09] <shortcircuit> OIC, Slashcode.

[21:09] <WebDragon> indefinite hiatus

[21:09] * WebDragon wonders what pudge is doing these days

[21:09] *** kjeldahl joined
[21:10] * WebDragon dates back to the days when Matthias Neeracher had put together MacPerl for pre-OSX macintoshes

[21:11] <WebDragon> it ultimately led me on to RHL and thence to Fedora to have a native environment to play with, and THEN they come out with OS X once I was no longer in a position to afford a new Mac, and by then I liked linux enough to stick with it

[21:11] <WebDragon> or rather, by the time i had the cash to spare to buy a new Mac with, I liked linux enough to stick with it

[21:12] <masak> you know what? I'm going to go with "Melbourne" for the release name.

[21:12] <WebDragon> read: "it had improved enough by then that I could live with it" :D

[21:12] <frettled> Y2K: Windows for work, Linux for play.  Y2K.01: Linux for work, Windows for play.

[21:12] <masak> and if anyone asks why, I'm going to say that it's because I know a guy there who writes great Exegeses.

[21:12] <frettled> masak: good enuff

[21:12] <WebDragon> heheh

[21:12] <masak> I think so.

[21:13] <masak> maybe it'll make Damian finally go public with his Perl 6 code, too :P

[21:13] <WebDragon> frettled: indeed, I dual-boot my laptop and the only reason I use the windows boot is to A> test work in MSIE8, B> use my MagicJack which doesn't yet have a working linux version, and C> play games

[21:13] *** molaf joined
[21:13] <WebDragon> everything else happens on the linux side

[21:13] <WebDragon> incluing a few games that work properly under wine ever since 1.0 release of it

[21:14] <frettled> masak: TheDamian has Perl 6 code waiting in the wings?  *drool*

[21:14] <WebDragon> shouldn't the bottom of http://rosettacode.org/wiki/Category:Perl_6 have some link to the SomePerls page ?

[21:14] <masak> frettled: I've seen one of the modules. it was nice.

[21:15] <WebDragon> one thing that's always frustrated me about wiki's is the nonstandard methods of navigating the information found there

[21:16] <masak> Hm, ChangeLog needs updating.

[21:16] * masak does that

[21:16] <WebDragon> I really wish I had the tuits to graft a front-end on top of a wiki that required various crosslinking relationships between the data at the top level before drilling downwards

[21:17] <masak> WebDragon: write up a clear description of your vision somewhere, and someone might jump on it.

[21:17] <frettled> WebDragon: I'm not sure you _want_ to create a hierarchy of it.

[21:17] <WebDragon> i.e. you can't publish newly written articles til you've identified the relationships to the existing information and identified how you get there from elsewhere

[21:18] <frettled> What if there is no relationship to the existing information, except something that is extremely contrived?

[21:18] <flussence> put it in an "Other" category and let someone else fix it :)

[21:18] <frettled> Let's say that you have a wiki containing information about animals.  Then you want to write an article about a programming language.  Please explain how you want those to be linked.

[21:19] <masak> frettled: Python! :P

[21:19] <frettled> masak: that's a road that's nearly as humpy as a camel's back!

[21:19] <masak> but you can't deny it's a connection... :)

[21:20] <frettled> It's in the «contrived connections» category.

[21:20] *** AndreasX joined
[21:20] <frettled> (actually, that's the term flussence probably was looking for, rather than «Other» ;))

[21:21] <masak> why does 'git status' sometimes say "Your branch is ahead of 'origin/master' by 36 commits." even when I've just pulled and it fast-forwarded?

[21:21] <flussence> you haven't pushed

[21:21] <frettled> yup

[21:21] <masak> huh.

[21:21] <moritz_> 36 local commits?

[21:21] <moritz_> that's... a lot.

[21:21] *** WebDragon|laptop joined
[21:21] <masak> I'm not aware of anything I've neglected to push...

[21:21] <frettled> moritz_: Hey, it's masak.

[21:21] <moritz_> git diff origin/master

[21:22] * WebDragon|laptop kicks his frakking router and asks where he left off

[21:22] *** WebDragon left
[21:22] *** WebDragon|laptop is now known as WebDragon

[21:22] <flussence> WebDragon: http://irclog.perlgeek.de/perl6/today#footer

[21:23] <frettled> Arghle, bedtime.  No soup for me.

[21:23] *** AndreasX left
[21:23] <WebDragon> <frettled> What if there is no relationship to the existing information, except something that is extremely contrived?

[21:23] <WebDragon> because the only way I seem to navigate a wiki is by already knowing what I'm searching for and somehow finding it via google

[21:23] <WebDragon> then you identify the contrived pathway, and the various people editing the wiki come up with additional paths (or correct your assumptions :D )

[21:23] <masak> moritz_: thanks. there are indeed lots of differences, none mine.

[21:23] * masak pulls --force

[21:24] <WebDragon> so the 'wikiness' is preserved, but also the mind-mapping,  so you can always go back and forth along whichever pathways lead there.

[21:24] <frettled> WebDragon: That depends on the wiki.  But you're not answering the question, you're just raising a different one.

[21:24] <WebDragon>  using multiple breadcrumb-trails as tags, something like that. admittedly I've only given this a modicum of thought, but the _relationships_ between the information seem to me to be as important as the information itself

[21:24] <frettled> WebDragon: You don't «identify the contrived pathway», that's a contradiction in terms.

[21:24] <WebDragon> frettled: indeed you have nailed it in a nutshell

[21:24] <frettled> WebDragon: You _contrive_ a pathway where there is none.

[21:25] <frettled> And that's very problematic in terms of organization of content.

[21:25] <WebDragon> yes but you still have to identify the pathway you've contrived, TO the wiki so that others can see it

[21:25] <frettled> No.

[21:25] <frettled> I think you misunderstand my point entirely.

[21:25] <WebDragon> are you still thinking in terms of how existing wikis work?

[21:25] <frettled> Which means I'm not communicating clearly.

[21:25] <WebDragon> either or both of us. 

[21:25] <frettled> WebDragon: I'm thinking in terms of how to organize information.

[21:25] <WebDragon> I'm off in wonderland thinking about an idea that's not fully crystallized yet, mind you :)

[21:26] <frettled> WebDragon: Have a look at my example again.  Why would you contrive a connection between programming and animals?

[21:26] * WebDragon chuckles and hides a grin in his coffee

[21:26] *** rindolf left
[21:27] <WebDragon> 'contrive' is perhaps the wrong word to use to describe the various pathways one would 'mental-leap' from to get from point a to point b in the process of information discovery

[21:27] <WebDragon> although it's close

[21:27] <frettled> Aha, I see where you're missing the point now.

[21:28] <frettled> Or where I'm miscommunicating.

[21:28] <WebDragon> straighten me, I'm ready. (as Lord Buckley would say)

[21:28] <frettled> Let me rephrase: why should you enforce a connection between animals and programming?

[21:28] <diakopter> contrive has a negative connotation; it can be used pejoratively to describe it as artificially (or mis-)constructed

[21:28] <frettled> Why does there need to be?

[21:28] <frettled> diakopter: as intended.

[21:28] <WebDragon> frettled: if there's a connection, one makes it

[21:29] <WebDragon> from whatever source derived 

[21:29] <diakopter> brain->link

[21:29] <WebDragon> precisely, diakopter 

[21:29] <frettled> WebDragon: yes, but you quite clearly stated that you wanted everything to be clearly connected, to _require_ that new entries have a connection to an existing one.

[21:29] <WebDragon> frettled: exactly. answering the question "how did I get here?" as well as "where do I go from here?"

[21:29] <frettled> WebDragon: which, in my not so humble opinion, is ill-advised both in terms of information theory, and in managing people

[21:30] <frettled> What's the point?

[21:30] <WebDragon> wiki's inevitably leave me wondering where to go next

[21:30] <WebDragon> or how to backtrack

[21:30] <WebDragon> so I just click around

[21:30] <frettled> WebDragon: the back button in your browser, as $deity intended?

[21:30] <WebDragon> which usually leads me to google, not more of the wiki's information

[21:30] <WebDragon> :P

[21:31] <WebDragon> which was my point

[21:31] *** MayDaniel joined
[21:31] <WebDragon> invariably I'm led to the wiki by deep-links from somewhere OTHER than the wiki

[21:31] <frettled> You're not going to solve the problem by enforcing links where there is no "natural" connection between the pieces of information

[21:31] <WebDragon> which is now missing my own point

[21:31] <frettled> Sure, it's relevant that "antimatter" is linked to "matter", and vice versa, and probably to a bunch of other articles regarding physics etc.

[21:31] <WebDragon> what about the _natural_ connections?

[21:32] <frettled> Sorry, AFK, alarm at work.

[21:32] <WebDragon> I'm not saying it's required to enforce arbitrary and unnatural connections between information, but surely if you're creating information there would be _natural_ links to follow that map how you get there from somewhere else, and how you'd continue onward

[21:33] <masak> smoke reports looking good: http://smolder.parrot.org/app/projects/smoke_reports/5

[21:33] <masak> I believe even those two failing tests on darwin might have gone away since yesterday.

[21:33] <masak> maybe.

[21:35] *** y3llow_ joined
[21:35] *** y3llow left
[21:35] <WebDragon> your typical website is going to be reaosonably linear within the plateau of information presented therein, usually as trees or tags

[21:35] *** pothos_ joined
[21:36] *** y3llow_ is now known as y3llow

[21:37] *** pothos left
[21:38] *** pothos_ left
[21:38] *** pothos joined
[21:40] <WebDragon> but the progression and iteration and mental-mapping of the information therein is, while inclusive, also much more clearly defined. very rarely will you have pages existing in isolation

[21:41] <WebDragon> on the other hand NONE of this is really relevant to perl6 

[21:41] <WebDragon> :)

[21:41] <WebDragon> which is what I REALLY came here about 

[21:41] * WebDragon follows some more of the links and keeps on ready

[21:41] <WebDragon> s/ready/reading/ .. wow dunno how I made that typo

[21:41] *** MayDaniel left
[21:42] * WebDragon summons up visions of his old Model III Trs-80 and the ubiquitous READY> prompt

[21:47] *** fhelmberger left
[21:47] <masak> ChangeLog commit coming up.

[21:48] <masak> let me know if I missed any major change since last release. or even any minor change that still might be worth mentioning.

[21:49] *** donaldh joined
[21:49] <masak> dalek?

[21:50] <diakopter> takes up to a minute I think

[21:50] <dalek> rakudo: 7b94fc9 | masak++ | docs/ChangeLog:

[21:50] <dalek> rakudo: [docs/ChangeLog] updated

[21:50] <dalek> rakudo: 

[21:50] <dalek> rakudo: Condensed the git log down to these things.

[21:50] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/7b94fc96f8037336dd981c5e7afd8e17d34acaa3

[21:50] <masak> there we go.

[21:51] * diakopter 5% done porting PAST::Regex from .pir to nqp

[21:51] <diakopter> er

[21:51] <diakopter> porting nqp-rx itself

[21:51] <diakopter> anyways

[21:52] <diakopter> good thing pmichaud did all the hard (and easy) work already

[21:52] * WebDragon is very much looking forward to having F14 installed and being able to really play with this stuff

[21:52] <masak> grr! t/spec/S32-io/IO-Socket-INET.rakudo fails one subtest here!

[21:53] * masak wants to remove that file from spectest.data

[21:53] <moritz_> you can comment it out for the release.

[21:53] <masak> good idea.

[21:53] <moritz_> or you can fudge the test

[21:53] <masak> I already fudged one test in that file.

[21:54] <masak> seems it's very stochastic.

[21:54] <masak> I'll comment out the test file, and then I might "forget" to uncomment it again.

[21:55] *** donaldh left
[21:58] * WebDragon makes a bunch more bookmarks, tips his hat, passes around more DragonCoffee™ for all and sundry, and congratulates all on the most excellent milestone

[21:59] <WebDragon> but alas I must bid you adieu; time to bike home before the rain starts xD

[21:59] *** WebDragon left
[21:59] *** Guest70621 left
[22:00] <dalek> rakudo: 78b3fcf | masak++ | t/spectest.data:

[22:00] <dalek> rakudo: [t/spectest.data] t/spec/S32-io/IO-Socket-INET out

[22:00] <dalek> rakudo: 

[22:00] <dalek> rakudo: This file is notoriously misbehaving (at least on certain platforms).

[22:00] <dalek> rakudo: Commenting it out for the release.

[22:00] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/78b3fcf83ee7f980dc44a0a04f0a0381bb17ce5d

[22:02] *** risou joined
[22:04] <masak> wow, cpanm is rocking my world.

[22:04] <masak> miyagawa++

[22:06] <masak> ok, announcement coming up.

[22:07] <masak> now, it's *important* that there are not any unnecessary typos in there, so if you want to help by doing a simple task, now's yer chance :)

[22:07] <masak> any and all proofing is appreciated.

[22:08] <masak> also suggestions for specific things that might be worth mentioning.

[22:08] * Tene offers editing services.

[22:08] * frettled is back.

[22:08] * frettled offers editing services as well.

[22:09] <masak> the review link should be here any moment now.

[22:09] <masak> or you can just go to github directly and find it there.

[22:09] <masak> I already pushed it.

[22:09] <Tene> Ah, that announcement.

[22:10] <Tene> I thought this was your mysterious upcoming announcement.

[22:10] <masak> oh, sorry to disappoint :)

[22:10] <masak> no, still 22 days left until that one :)

[22:11] <masak> 2 days until next clue...

[22:11] <dalek> rakudo: 0bf28d5 | masak++ | docs/announce/2010.11:

[22:11] <dalek> rakudo: [docs/announce/2010.11] added

[22:11] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/0bf28d570920656b8cdb646bbe3a714f484b68cf

[22:11] <Tene> I didn't notice any errors.

[22:12] <masak> thanks.

[22:12] <flussence> looks good to me (though I have no idea what I did worthy of mention there...)

[22:13] <masak> "implement Cool.samecase, .subst(:samespace) and ss/// Patch partly by flussence++"

[22:14] <flussence> oh, that :)

[22:14] <jnthn> masak: Looks fine to me.

[22:14] <frettled> masak: «can now index with both» -> «indexing is now possible with both

[22:14] <jnthn> masak: I think explicator is a word. :P

[22:14] <frettled> apart from that, very fine indeed.

[22:14] <masak> frettled: thanks -- will fix.

[22:15] <masak> jnthn: thanks.

[22:15] <masak> jnthn: could you check whether it is a word, please? you got me worried :)

[22:16] <dalek> rakudo: 03e6f5a | masak++ | docs/release_guide.pod:

[22:16] <dalek> rakudo: [docs/release_guide.pod] slight tweaks

[22:16] <dalek> rakudo: 

[22:16] <dalek> rakudo: The biggest improvement was probably that, since Parrot is now

[22:16] <dalek> rakudo: git-based, PARROT_REVISION contains slightly diff'rent information.

[22:16] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/03e6f5a2ada962949d7476ab6170b17efe75ce19

[22:16] *** Guest70621 joined
[22:18] <jnthn> masak: The verb "to explicate" most certainly exists.

[22:18] <jnthn> Looks like it's from Latin, lit "to unfold" :)

[22:18] <jnthn> Cute. :)

[22:19] <masak> yup, the 'ply' root again :)

[22:19] <masak> love that root.

[22:19] <jnthn> masak: ah, found a dictionary that has "explicator" listed as a noun :)

[22:19] <jnthn> masak: It felt obvious in meaning, just wasn't sure I'd seen it before. :)

[22:20] <jnthn> 1530s, from L. explicatus,  pp. of explicare  "unfold, unravel, explain"

[22:20] <tylercurtis> rakudo: multi foo (Str $s) { nextsame; say 'test'; }; multi foo ($s) { say 'next'; }; foo 's'

[22:20] <masak> perfect.

[22:20] <dukeleto> yes, explicator is definitely a word. it is often used to describe people that solve problems

[22:20] <p6eval> rakudo : OUTPUT«Null PMC access in clone()␤  in 'foo' at line 1␤  in main program body at line 22:/tmp/lLVxsbODlb␤»

[22:20] <masak> tylercurtis: I think that one's known and reported.

[22:20] <masak> phew! :)

[22:21] <jnthn> dukeleto: Oh? I'd have had it as somebody who explains things, but the latin root seems to fit that nicely too :)

[22:21] <dalek> rakudo: 09489cf | masak++ | docs/announce/2010.11:

[22:21] <dalek> rakudo: [docs/announce/2010.11] improvement in wording

[22:21] <dalek> rakudo: 

[22:21] <dalek> rakudo: Suggested by frettled++

[22:21] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/09489cf1cdbf7e1523e390f59bd864a7ec2ba7e8

[22:21] <dalek> rakudo: cbea8a8 | masak++ | docs/announce/2010.11:

[22:21] <dalek> rakudo: [docs/announce/2010.11] added contributor frettled++

[22:21] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/cbea8a82ca61f5595cb8ea40daecd1c5b46f6944

[22:21] <dalek> rakudo: 58d81aa | masak++ | docs/announce/2010.11:

[22:22] <dalek> rakudo: [docs/announce/2010.11] rewording

[22:22] <dalek> rakudo: 

[22:22] <dalek> rakudo: For the greater preposition good!

[22:22] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/58d81aa57828594ce3b626c342a4a579b0320cde

[22:22] <jnthn> .oO( I know what I want on my business card now... :) )

[22:22] <masak> "Turns beer into code" ? :P

[22:22] <tylercurtis> masak: I didn't realize that bug existed. I was just trying to remember which of [call|next][same|with] is which. :)

[22:23] <jnthn> masak: :P

[22:23] <masak> tylercurtis: bad news is it's broken. good news is that jnthn's 6model will likely fix it all.

[22:23] <dukeleto> jnthn: "explicate" is often used to say that one person got someone else out of a bad situation, at least from what I have heard

[22:23] <masak> dukeleto: that would be the more literal interpretation, then.

[22:23] <masak> "to bend [someone] out"

[22:23] *** kjeldahl left
[22:23] <masak> dukeleto: or are you thinking of "extricate"?

[22:24] <tylercurtis> masak: redispatch in general is broken? Or just in some cases?

[22:24] <masak> or "extradite"? :)

[22:24] <masak> tylercurtis: don't remember. tias?

[22:25] <dukeleto> masak: think i was mixing it with extricate

[22:25] <masak> I suspected that.

[22:25] <jnthn> tylercurtis: It's fine for methods.

[22:25] <tylercurtis> rakudo: class A { method a { say 'A::a' } }; class B is A { method a { say 'B::a'; callsame; } }; B.a

[22:25] <p6eval> rakudo : OUTPUT«B::a␤A::a␤»

[22:26] <jnthn> tylercurtis: It's never been implemented for subs.

[22:26] <masak> that's 'trahere', "to pull".

[22:26] <tylercurtis> jnthn: conveniently, that's what I need it for.

[22:30] <jnthn> :)

[22:31] <tylercurtis> Is CANDO implemented?

[22:31] <masak> running the spectests again. might as well November-blog while I wait.

[22:32] *** benabik joined
[22:32] <dalek> rakudo: d39f4f6 | masak++ | VERSION:

[22:32] <dalek> rakudo: [release] bump VERSION

[22:32] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/d39f4f65cf3f3593d775eb5a3559c0f911d6626e

[22:39] *** spq1 left
[22:39] *** benabik left
[22:40] <moritz_> tylercurtis: no

[22:42] <tylercurtis> moritz_: thanks.

[22:48] <tylercurtis> Is there a nicer way (in Rakudo or in the spec) to add a method of variable name to a single object than adding the method to an anonymous role with .^add_method and mixing the role in?

[22:48] <masak> you can do it all in one step :)

[22:48] * mkramer1 thinks that's a nice way

[22:49] <masak> doesn't get much nicer than that.

[22:49] <masak> rakudo: my $x = 42 but role { method foo { say "OH HAI" }; say $x; $x.foo

[22:49] <p6eval> rakudo : OUTPUT«===SORRY!===␤Unable to parse blockoid, couldn't find final '}' at line 22␤»

[22:49] <masak> rakudo: my $x = 42 but role { method foo { say "OH HAI" } }; say $x; $x.foo

[22:49] <p6eval> rakudo : OUTPUT«42␤OH HAI␤»

[22:49] <masak> \o/

[22:49] <tylercurtis> A method of variable name.

[22:50] <masak> I'll have to mentally add quotes to that for it to make sense.

[22:50] <masak> or a dollar sign.

[22:50] <tylercurtis> A method whose name varies.

[22:50] <masak> oh wait. the name varies... right.

[22:51] <masak> it's not very common of them to do that, you know? we're well into metaprogramming if they do.

[22:54] <jnthn> What's wrong with .^add_method?

[22:54] <jnthn> oh, to a single object...

[22:54] <jnthn> In theory

[22:55] <jnthn> $obj by role Foo[$name] { method ::($name) () { 42 } }

[22:55] <jnthn> gah

[22:55] <jnthn> but

[22:55] <jnthn> Anyway, sleeps

[22:58] <TimToady> well, you'd have to pass the name somehow to instantiate it

[23:02] *** Guest70621 left
[23:06] <sorear> good * #perl6

[23:06] <sorear> moritz_: last run = 88m 13s

[23:07] <masak> last run of what?

[23:07] <masak> picking up jogging? :)

[23:07] <sorear> 60.78%, wow, almost doubled for two fixes

[23:09] <sorear> masak: roast

[23:09] <sorear> niecza-compiled tryfile.exe

[23:10] <masak> wow, niecza is running roast?!

[23:10] <diakopter> even without fudging?

[23:11] <sorear> masak: no

[23:11] *** _kaare left
[23:12] <sorear> tryfile is part of the STD.pm6 suite

[23:12] <masak> oh, right. tryfile.

[23:12] <masak> still. nice.

[23:12] <masak> sorear++

[23:13] <masak> all spectests are green here. 45 minutes.

[23:13] * masak proceeds to next phase

[23:14] *** tylercurtis left
[23:15] <masak> blog post! http://strangelyconsistent.org/blog/november-18-2010-insert-obvious-in-soviet-russia-joke-here

[23:23] <perigrin> in soviet russia joke inserts you!

[23:23] * diakopter giggles

[23:32] *** Khisanth joined
[23:34] <masak> question: does it matter whether the release tarball contains the tags for the release or not?

[23:34] *** Limbic_Region joined
[23:35] <masak> the release_guide seems to suggest one should only do 'make release' once, namely before tagging HEAD.

[23:38] *** hercynium left
[23:39] <masak> oh; it doesn't matter, because the release tarball isn't a git checkout.

[23:39] * masak uploads

[23:39] *** redicaps joined
[23:40] <masak> upload complete.

[23:40] <colomon> \o/

[23:40] <masak> if anyone would like to build and test... https://github.com/rakudo/rakudo/downloads

[23:41] <masak> wow. I hadn't looked at the download stats for Rakudo monthly releases before.

[23:41] <masak> sharp rise after switch to ng, sharp drop after Rakudo Star release.

[23:41] <masak> between Feb and July, inclusive, it was >200 downloads per month.

[23:42] *** whiteknight joined
[23:42] <colomon> now everyone wants R* instead?

[23:42] <masak> think so.

[23:42] <masak> would be interesting to see those figures as well.

[23:42] * masak looks

[23:43] <masak> whoa.

[23:43] <colomon> I'm kind of sad you didn't go with A::M for the release.  ;)

[23:43] <masak> there's some Slashdot effect involved here, I'm sure.

[23:43] <masak> 3k releases for the first Star tarball.

[23:43] <masak> 2.6k for the msi file.

[23:43] <diakopter> releases?

[23:44] <masak> 800 for the next Star tarball, 550 for the next, 500 for last month's...

[23:44] <masak> diakopter: I don't understand the question.

[23:44] <colomon> you meant 3k downloads.

[23:44] <diakopter> oh

[23:45] <colomon> we didn't release R* 3000 times, right?

[23:45] <colomon> ;)

[23:45] <masak> oh, sorry.

[23:45] <masak> yes, 3k downloads.

[23:47] <TheHarlot> oh, hey--the other day somebody mentioned something about Model 6... or something. I do not have this client set up to log... looking into it as we speak.

[23:47] <TheHarlot> I just... uh... do not remember what it is I am looking into.

[23:47] <TheHarlot> >.>'

[23:47] <colomon> we didn't really do much publicity for the releases after the first, did we?

[23:48] <masak> p6c email's away.

[23:48] <Tene> TheHarlot: 6model

[23:48] <mkramer1> masak, are you counting git pulls?

[23:49] <Tene> TheHarlot: https://github.com/jnthn/6model/

[23:49] <masak> I take it from the release instructions that I don't need to blog the release announcement.

[23:49] <mkramer1> after the first r* I just started tracking rakudo head

[23:49] <masak> mkramer1: no, those figures only take downloads into account.

[23:49] <masak> mkramer1: I know of no way to count git clones or pulls on github.

[23:50] <colomon> shoot, I probably did a at least 200 git pulls all by myself since R*.  :)

[23:50] * masak turns off the releng mode

[23:50] <TheHarlot> thank you Tene 

[23:50] <masak> you're now free to commit again, you wonderful people. ^^

[23:51] *** masonkramer left
[23:51] *** masonkramer joined
[23:53] <TheHarlot> ah... hey... this will allow me to not reinvent the wheel... unless the particular wheel was wearing a tight dress and no practically meant yes with reinventing it.

[23:54] <diakopter> TheHarlot: you'd want to sync with mberends so as not to duplicate/conflict work :)

[23:54] <diakopter> the jre branch has lagged the clr branch for a few weeks

[23:54] <diakopter> but it shouldn't be too difficult to catch up

[23:56] *** impious joined
[23:56] <TheHarlot> diakopter, well, I still have Java Kitty to work on... this mostly simplifies anything I need to do CJerl6-wise for Java Kitty.

