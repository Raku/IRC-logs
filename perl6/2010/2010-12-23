[00:00] *** shi joined
[00:14] *** MayDaniel left
[00:26] *** industry__ joined
[00:36] *** am0c^ joined
[00:50] <dalek> niecza/cilbackend: 3aeed03 | sorear++ | / (3 files):

[00:50] <dalek> niecza/cilbackend: Implement rest of &sub2 cases

[00:50] <dalek> niecza/cilbackend: review: https://github.com/sorear/niecza/commit/3aeed0316a

[00:52] *** _kaare left
[01:01] *** redicaps joined
[01:01] *** am0c joined
[01:04] *** y3llow joined
[01:04] *** pothos joined
[01:06] *** roen joined
[01:09] *** shi left
[01:16] *** roen left
[01:19] *** industry__ left
[01:31] *** masonkramer joined
[01:32] *** masonkramer_ joined
[01:32] *** masonkramer left
[01:32] *** masonkramer_ is now known as masonkramer

[01:37] *** roen joined
[01:40] *** risou joined
[01:40] *** QinGW joined
[01:59] *** soroush joined
[01:59] *** S_Blade left
[02:03] *** noganex_ joined
[02:03] *** ShaneC left
[02:04] *** noganex left
[02:17] *** mtk joined
[02:22] <sorear> niecza: say $( "foo" ~~ / (.) <?before $0> / )

[02:22] <p6eval> niecza 406e042: OUTPUT«o␤»

[02:23] <sorear> (Jörg Walter)++ # finding corner cases

[02:23] <sorear> rakudo: say item( "foo" ~~ / (.) <?before $0> / )

[02:23] <p6eval> rakudo cae7f9: OUTPUT«f␤»

[02:27] *** mtk left
[02:32] *** mtk joined
[02:35] *** mtk left
[02:38] *** risou left
[02:41] *** mtk joined
[02:42] <sorear> niecza: say $( "an\nb" ~~ m/<-[\n\#\ \t]>+/ )

[02:43] <p6eval> niecza 406e042: OUTPUT«===SORRY!===␤Action method quote__S_m not yet implemented at /home/p6eval/niecza/src/Niecza/Actions.pm line 54.␤invalid undef here at /home/p6eval/niecza/src/Niecza/Actions.pm line 1542␤     Niecza::Actions::whatever_precheck('Niecza::Actions', '',

[02:43] <p6eval> ..'Op::StringLiteral=…

[02:43] <sorear> niecza: say $( "an\nb" ~~ /<-[\n\#\ \t]>+/ )

[02:43] <p6eval> niecza 406e042: OUTPUT«an␤»

[02:43] <sorear> niecza: say $( "a\nb" ~~ /<-[\n\#\ \t]>+/ )

[02:43] <p6eval> niecza 406e042: OUTPUT«a␤»

[02:45] *** kid51 joined
[02:46] *** kid51 left
[03:02] *** jaldhar joined
[03:10] *** agentzh joined
[03:11] *** uasi joined
[03:34] <dalek> niecza/cilbackend: 95e6723 | sorear++ | lib/CLRBackend.cs:

[03:34] <dalek> niecza/cilbackend: Add &pkg2 functions to thawer

[03:34] <dalek> niecza/cilbackend: review: https://github.com/sorear/niecza/commit/95e6723264

[03:49] *** [particle] left
[03:50] *** lopaway is now known as lopnor

[03:51] *** lopnor is now known as lopaway

[03:52] *** [particle] joined
[04:02] *** lopaway is now known as lopnor

[04:08] *** [Coke] left
[04:09] <lopnor> hello,

[04:09] *** [Coke] joined
[04:10] <lopnor> is there any way to fork a process?

[04:11] <TiMBuS> yes, if you use zavolaj you can call fork

[04:11] <TiMBuS> https://github.com/jnthn/zavolaj

[04:12] <lopnor> is it core in rakudo star?

[04:12] <TiMBuS> not sure, but it's a simple single .pm file you can include

[04:12] <TiMBuS> https://github.com/jnthn/zavolaj/blob/master/examples/unix-fork.p6 there's the example

[04:13] <lopnor> oh, it's very easy!

[04:13] <lopnor> thank you, i will try that

[04:13] <TiMBuS> yeah i was surprised at how easy it was, as well

[04:14] <TiMBuS> im not sure if it's very efficient. keep an eye on your memory usage

[04:14] <lopnor> i wanted to fork for testing some server,

[04:15] <lopnor> so it should be okay for me

[04:15] *** lopnor is now known as lopaway

[04:18] *** lopaway is now known as lopnor

[04:20] *** am0c^ left
[04:21] *** am0c left
[04:27] <lopnor> TiMBuS: hm, the sample doesn't work in my mac,

[04:27] <lopnor> saying "Could not locate symbol 'fork' in native library '(resident)'"

[04:28] <lopnor> i'm using rakudo star 2010-11

[04:29] <TiMBuS> you might need to specify the library name

[04:30] <lopnor> what library name?

[04:30] *** risou joined
[04:30] *** chitragupt left
[04:32] <TiMBuS> erm, whats fork in osx?

[04:32] <TiMBuS> 'libc' ?

[04:32] <lopnor> ah,

[04:33] <lopnor> sub fork() returns Int is native() { ... } 

[04:33] <lopnor> this line should be

[04:33] <lopnor> "sub fork() returns Int is native(libc) { ... }" or something,

[04:33] <lopnor> right?

[04:34] <TiMBuS> yeah

[04:34] <TiMBuS> its a string, so  is native('libc')

[04:34] <lopnor> thank you!

[04:34] <lopnor> it ran

[04:40] <sorear> is native<libc>

[04:41] <lopnor> it also ran:)

[04:46] *** toebu left
[04:47] *** toebu joined
[04:48] *** orafu left
[04:49] *** orafu joined
[05:00] *** skangas left
[05:02] <dalek> niecza/cilbackend: edc4573 | sorear++ | lib/CLRBackend.cs:

[05:02] <dalek> niecza/cilbackend: Add stash log processor

[05:02] <dalek> niecza/cilbackend: review: https://github.com/sorear/niecza/commit/edc457375b

[05:02] <dalek> niecza/cilbackend: 5370305 | sorear++ | lib/CLRBackend.cs:

[05:02] <dalek> niecza/cilbackend: Add &pkg3 functionality

[05:02] <dalek> niecza/cilbackend: review: https://github.com/sorear/niecza/commit/5370305dfe

[05:12] <sorear> for some reason I'm slightly disturbed that niecza/cilbackend is keeping module interface data in JSON

[05:23] *** am0c joined
[05:45] *** soroush_ joined
[05:46] *** soroush left
[06:11] *** wamba left
[06:13] *** lopnor is now known as lopaway

[06:29] *** am0c left
[06:42] *** am0c joined
[06:46] *** lopaway is now known as lopnor

[07:01] *** cognominal left
[07:16] *** Axius joined
[07:28] *** zby_home_ joined
[07:34] *** _kaare joined
[07:34] *** justatheory left
[07:36] <dalek> niecza/cilbackend: 95bc91e | sorear++ | lib/CLRBackend.cs:

[07:36] <dalek> niecza/cilbackend: Add signature encoder

[07:36] <dalek> niecza/cilbackend: review: https://github.com/sorear/niecza/commit/95bc91e871

[07:36] <dalek> niecza/cilbackend: d9b3d8c | sorear++ | lib/CLRBackend.cs:

[07:36] <dalek> niecza/cilbackend: Add &sub3 functionality

[07:36] <dalek> niecza/cilbackend: review: https://github.com/sorear/niecza/commit/d9b3d8c31a

[07:38] *** Koznetsov joined
[07:38] <Koznetsov> hello, i have few question about perl6

[07:39] *** risou left
[07:42] *** Koznetsov left
[07:45] <masak> Koznetsov: for next time when you have questions, please (1) stay on the channel, and (2) ask.

[07:48] <lue> hello masak o/

[07:54] <sorear> hi lue, masak.

[07:55] <sorear> I think I have a complete SAFE.dll from the new backend now

[07:55] *** ch3ck3r left
[07:57] <masak> \o/

[07:58] <masak> good morning sorear, lue.

[08:01] <TimToady> I think I can do the advent entry for the 24th; is there a pod-to-wp translator anywhere?

[08:02] *** yuki joined
[08:02] <lue> heh, more like good night here. Just looking at gallifreybase.com before bed (hard to believe how privatized it is!)

[08:03] <TimToady> but must sleep now, so if anyone comes up with a better idea, feel free to pursue it

[08:03] <TimToady> I will backlog in the AM

[08:03] *** yuki left
[08:04] <TimToady> $.state = Sleep;

[08:06] *** ch3ck joined
[08:07] <masak> \o/ ++TimToady

[08:07] <masak> moritz_ spoke of a pod2html translator. it's possible to input raw HTML into wp, too.

[08:09] *** mberends joined
[08:12] <masak> bus &

[08:12] *** masak left
[08:25] *** am0c left
[08:36] <moritz_> godd morning

[08:36] *** risou joined
[08:36] *** satyavvd joined
[08:37] <dalek> niecza/cilbackend: 93a0597 | sorear++ | lib/CLRBackend.cs:

[08:37] <dalek> niecza/cilbackend: Add CORE-used primitives, dependency handling

[08:37] <dalek> niecza/cilbackend: review: https://github.com/sorear/niecza/commit/93a0597b81

[08:37] <dalek> niecza/cilbackend: 8807f8a | sorear++ | lib/CLRBackend.cs:

[08:37] <dalek> niecza/cilbackend: Add support for generating executables

[08:37] <dalek> niecza/cilbackend: review: https://github.com/sorear/niecza/commit/8807f8a167

[08:37] <sorear> good morning moritz_ 

[08:39] <moritz_> http://stackoverflow.com/questions/4516057/how-to-control-nestedness-of-loops-in-perl-6

[08:39] *** HarryS left
[08:40] <lue> good night #perl6 o/    [ I'll probably be the only one to say that for a few hours :) ]

[08:41] <moritz_> good night #perl6 # just to prove lue wrong, not because I'm actually going to bed :-)

[08:43] *** noganex_ is now known as noganex

[08:51] *** masak joined
[08:52] <masak> oh hai from a long-distance *bus* \o/

[08:52] <moritz_> heading home for christmas?

[08:54] <sorear> hi masak

[08:54] <masak> yes, just so.

[08:54] <masak> well, my actual home is where I'm heading from. I'm heading towards home**2, where I grew up.

[08:56] <masak> I don't know who Jörg Walter is, but his bug reports are very readable.

[08:56] <moritz_> sounds rather German-ish

[08:56] <moritz_> (the name at least)

[08:57] <masak> I know why #81136 occurs.

[08:57] <masak> <before> is one big honking hack in PGE.

[08:58] <masak> haven't looked at it in nqp-rx, but let's just say I'm not surprised it doesn't retain captures.

[08:59] *** jhuni left
[09:02] <masak> #81180 review: looks fine. if anyone who's not on a bus wants to apply it, feel free.

[09:03] <masak> someone might also want to write a brilliant answer to http://stackoverflow.com/questions/4516057/how-to-control-nestedness-of-loops-in-perl-6

[09:04] * moritz_ pasted that link 25 minutes ago too

[09:04] <moritz_> I guess the "right" contextualizer would fix the problem, if it were implemented

[09:04] <moritz_> but then [+] $_  is bound not to do what the OP wants

[09:04] <masak> mm.

[09:05] <sorear> I think what he actually needs is 1..7 X 1..7 X 1..7

[09:05] <sorear> X should be list-associative

[09:05] <sorear> this isn't working in rakudo

[09:05] <sorear> as for the sum,

[09:05] <moritz_> that too

[09:05] <moritz_> @$_ should help

[09:05] <sorear> rakudo: given [1, 2, 3] { say [+] .list }

[09:05] <p6eval> rakudo cae7f9: OUTPUT«6␤»

[09:06] *** redicaps left
[09:06] <sorear> rakudo: given [1, 2, 3] { say [+] @$_ } #does Rakudo have this yet?

[09:06] <p6eval> rakudo cae7f9: OUTPUT«===SORRY!===␤Non-declarative sigil is missing its name at line 22, near "@$_ } #doe"␤»

[09:06] <moritz_> rakudo needs @($_)

[09:07] <moritz_> \o/ 1.4k views on yesterday's advent post

[09:09] *** masak` joined
[09:12] *** Hans_Henrik joined
[09:13] *** masak left
[09:13] *** masak` is now known as masak

[09:16] <dalek> niecza/cilbackend: 4acf199 | sorear++ | lib/CLRBackend.cs:

[09:16] <dalek> niecza/cilbackend: Generate runtime module dependency edges

[09:16] <dalek> niecza/cilbackend: review: https://github.com/sorear/niecza/commit/4acf199d38

[09:16] <dalek> niecza/cilbackend: 11ec6d1 | sorear++ | lib/CLRBackend.cs:

[09:16] <dalek> niecza/cilbackend: Add missing casts for type object setup

[09:16] <dalek> niecza/cilbackend: review: https://github.com/sorear/niecza/commit/11ec6d10c5

[09:16] <dalek> niecza/cilbackend: 65b47c2 | sorear++ | lib/CLRBackend.cs:

[09:16] <dalek> niecza/cilbackend: Fix several more verifier-caught errors

[09:16] <dalek> niecza/cilbackend: review: https://github.com/sorear/niecza/commit/65b47c2a78

[09:16] <sorear> cilbackend can now run say "Hello, world"

[09:17] <moritz_> \o/

[09:17] *** masak` joined
[09:17] <sorear> before it can be merged, it needs to 1. pass the full testsuite 2. be integrated with the driver

[09:18] *** masak`` joined
[09:18] <masak``> thundergnat++ # "May the Schwartz be with you!"

[09:18] <mathw> \o

[09:18] <masak``> o/

[09:20] <masak``> on December 10, I quadrupled the traffic to my blog.

[09:20] *** Bonham joined
[09:21] *** masak left
[09:21] <masak``> the two by far most popular URLs are now http://strangelyconsistent.org/blog/feed.atom and http://strangelyconsistent.org/blog/masaks-perl-6-coding-contest

[09:21] *** nymacro joined
[09:22] *** masak`` is now known as masak

[09:22] <masak> the root URL comes a distant third.

[09:22] *** masak` left
[09:23] *** kensanata joined
[09:24] *** HarryS joined
[09:25] *** masak` joined
[09:25] <moritz_> the rss feed is no surprise

[09:25] <masak`> hm, and 4chan is one of my referrers. :)

[09:25] <moritz_> I'd say that the coding contest is a pleasant surprise :-)

[09:27] <masak`> ah: http://dis.4chan.org/read/prog/1292263150

[09:27] <masak`> surprisingly positive.

[09:29] *** masak left
[09:29] *** masak` is now known as masak

[09:32] <masak> moritz_: "Harry Potter and the methods of rationality" is only getting better and better. I'm at chapter 39 now. I'm simply amazed at the quality of writing -- far above my expectations for a fanfic.

[09:34] *** Axius left
[09:36] <moritz_> same here

[09:38] <masak> I've started on a blog post which showcases bug reporting, debugging and TDD as aspects of the scientific method.

[09:39] *** masak` joined
[09:42] *** masak left
[09:43] *** masak` is now known as masak

[09:46] <tadzik> hello!

[09:46] * tadzik finally has internets at home

[09:47] <masak> tadzik! \o/

[09:48] * masak reads the test*.pl files in niecza master to see what it can do

[09:48] <tadzik> and I moved to this flat in october

[09:59] *** masak left
[10:03] *** toebu left
[10:03] *** toebu joined
[10:08] *** soroush joined
[10:08] *** QinGW left
[10:09] *** soroush_ left
[10:13] *** ch3ck left
[10:24] *** am0c joined
[10:31] <dalek> niecza/cilbackend: 6539673 | sorear++ | / (3 files):

[10:31] <dalek> niecza/cilbackend: Finish LAD construction, misc label and goto bindings

[10:31] <dalek> niecza/cilbackend: review: https://github.com/sorear/niecza/commit/6539673d37

[10:31] <dalek> niecza/cilbackend: a15d1ec | sorear++ | / (3 files):

[10:31] <dalek> niecza/cilbackend: Fix several regex bugs

[10:31] <dalek> niecza/cilbackend: review: https://github.com/sorear/niecza/commit/a15d1ecd17

[10:31] * sorear -> sleep

[10:37] *** wamba joined
[10:37] *** Gahrian left
[10:40] *** lopnor is now known as lopaway

[10:42] *** icwiener joined
[10:45] *** nymacro left
[10:45] *** envi left
[10:50] *** wamba left
[10:50] *** envi joined
[10:54] <dalek> rakudo: a980da4 | nwellnhof++ | src/core/IO.pm:

[10:54] <dalek> rakudo: Fix open() with binary flag

[10:54] <dalek> rakudo: 

[10:54] <dalek> rakudo: Signed-off-by: Moritz Lenz [email@hidden.address]
[10:54] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/a980da4167

[10:54] <dalek> rakudo: a5a9364 | nwellnhof++ | src/core/Buf.pm:

[10:54] <dalek> rakudo: Make Buf.decode work

[10:54] *** daxim joined
[10:54] <dalek> rakudo: 

[10:54] <dalek> rakudo: Signed-off-by: Moritz Lenz [email@hidden.address]
[10:54] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/a5a9364b33

[11:15] *** wamba joined
[11:15] *** nymacro joined
[11:16] *** Hans_Henrik left
[11:17] *** jaldhar left
[11:20] *** jaldhar joined
[11:23] *** cognominal joined
[11:25] *** glow left
[11:30] *** envi left
[11:37] *** risou left
[11:37] *** risou_ joined
[11:38] *** abra joined
[11:44] *** colomon left
[11:45] *** envi joined
[11:50] *** colomon joined
[12:02] *** roen_ joined
[12:07] *** icwiener left
[12:10] *** roen_ left
[12:15] *** satyavvd left
[12:15] *** lopaway is now known as lopnor

[12:37] *** risou joined
[12:40] *** risou_ left
[12:46] *** agentzh left
[12:53] *** sftp_ joined
[12:53] *** sftp left
[12:54] <takadonet> morning all

[12:57] <colomon> o/

[12:57] *** roen_ joined
[12:58] <takadonet> http://www.reddit.com/r/programming/comments/eq75s/perl_6_advent_calendar_day_23_its_some_sort_of/

[13:01] *** am0c left
[13:08] *** Juerd left
[13:11] *** lopnor is now known as lopaway

[13:17] *** sji joined
[13:26] *** icwiener joined
[13:31] *** MayDaniel joined
[13:32] *** masonkramer left
[13:32] *** masonkramer joined
[13:35] <flussence> I've got a line "if $a.IO.e or $b.IO.changed > $a.IO.changed", but is there a better way to write "do this, unless the output file is newer"?

[13:36] <flussence> oops, should be a ! after if there

[13:37] *** risou left
[13:38] *** risou joined
[13:42] *** uniejo joined
[13:45] *** smash joined
[13:46] <smash> hello everyone

[13:46] <colomon> \o

[13:46] *** molaf joined
[13:47] <takadonet> smash: yo

[13:48] *** plobsing_ joined
[13:50] *** plobsing left
[13:58] *** lichtkind joined
[14:00] <lichtkind> what you mean  by munch?

[14:02] *** jaldhar left
[14:02] *** satyavvd_ joined
[14:02] *** icwiener left
[14:04] *** icwiener joined
[14:05] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[14:06] <smash> i predict a very short changelog for this release

[14:09] <smash> .pm names suggestions for release names are welcome

[14:20] <lichtkind> smash: rakudo?

[14:21] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_delta_tablet

[14:22] *** vert2_ joined
[14:22] *** JimmyZ joined
[14:27] <smash> lichtkind: yes

[14:34] *** risou left
[14:34] *** risou_ joined
[14:36] *** pmurias joined
[14:37] <pmurias> hi

[14:37] <takadonet> pmurias: yo

[14:47] *** JimmyZ left
[14:51] *** uasi_ joined
[14:52] *** Juerd joined
[14:54] *** uasi left
[15:00] *** roen_ left
[15:09] *** nrycrun joined
[15:13] *** nrycrun left
[15:15] <smash> (tricky question) any idea on which was the first perl mongers group?

[15:16] <smash> NY.pm according to wikipedia

[15:26] *** nymacro left
[15:27] *** pmurias left
[15:32] *** ch3ck joined
[15:35] *** Big_bear joined
[15:36] *** Big_bear left
[15:40] *** lichtkind left
[15:41] *** dual joined
[15:41] *** satyavvd_ left
[15:43] *** lichtkind joined
[15:51] <smash> just push'ed changelog updates and announcement, everyone feel free add more updates

[15:52] *** WonTu joined
[15:52] *** WonTu left
[15:56] <dalek> rakudo: b2440a5 | smashz++ | docs/ (2 files):

[15:56] <dalek> rakudo: [release] update changelog and add announcement

[15:56] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/b2440a57f0

[15:56] <dalek> rakudo: 4830af6 | smashz++ | docs/release_guide.pod:

[15:56] <dalek> rakudo: [release] update release guide

[15:56] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/4830af6855

[15:56] *** satyavvd joined
[15:56] <smash> running tests and spectest for the next couple of hours

[15:57] <smash> last chance for last minutes updates

[16:01] <tadzik> how about these today's fixes in Buf?

[16:02] <smash> hmm, i missed that one, and open fix too

[16:05] <smash> tadzik: thks

[16:09] <dalek> rakudo: e9cf790 | smashz++ | docs/ChangeLog:

[16:09] <dalek> rakudo: [release] changelog updates, tadzik++ for pointing out changes

[16:09] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/e9cf790b30

[16:26] *** kanishka joined
[16:28] *** uniejo left
[16:28] *** ch3ck left
[16:29] *** jedai left
[16:29] <dalek> roast: eb032c7 | (Kyle Hasselbacher)++ | integration/error-reporting.t:

[16:29] <dalek> roast: [error-reporting.t] Add test for RT #80982

[16:29] <dalek> roast: review: https://github.com/perl6/roast/commit/eb032c702f

[16:29] <dalek> roast: 20034ba | (Kyle Hasselbacher)++ | integration/error-reporting.t:

[16:29] <dalek> roast: add fudge

[16:29] <dalek> roast: review: https://github.com/perl6/roast/commit/20034ba970

[16:29] <dalek> roast: 9d5a903 | (Kyle Hasselbacher)++ | S02-polymorphic_types/subset.t:

[16:29] <dalek> roast: [subset.t] Test for RT 80930

[16:29] <dalek> roast: review: https://github.com/perl6/roast/commit/9d5a903aec

[16:30] *** satyavvd left
[16:31] *** masak joined
[16:32] <masak> partway into niecza's tests, I have this to say:

[16:32] <masak> wow!

[16:32] <masak> sorear++

[16:32] <takadonet> masak: why? b/c it's fast?

[16:32] <masak> I'm not running the tests, I'm reading them.

[16:32] <dalek> roast: a0b2612 | (Kyle Hasselbacher)++ | / (2 files):

[16:32] <dalek> roast: [OOPS] update the test plans I forgot

[16:32] <dalek> roast: review: https://github.com/perl6/roast/commit/a0b2612c1b

[16:33] *** masak` joined
[16:34] <masak`> it's like this: I've seen Pugs grow steadily, and I've seen Rakudo grow steadily, but now I'm becoming aware that I *completely* missed niecza's early childhood.

[16:34] *** jedai joined
[16:34] <masak`> to remedy this, I'm thinking of making January a niecza-only month.

[16:35] <masak`> won't be difficult, considering all that's already there.

[16:36] <masak`> (and yes, it seems pretty fast, too)

[16:37] *** masak left
[16:37] *** masak` is now known as masak

[16:39] <masak> by the way, there's only today and tomorrow left to sign up for the Perl 6 Coding Contest!

[16:39] <tadzik> hmm

[16:39] <tadzik> thanks for the reminder :)

[16:40] *** uniejo joined
[16:43] *** masak` joined
[16:43] *** am0c joined
[16:43] <masak`> sorear: test.pl:265: ok (?0) ~~ (?1), "bools are a constant";

[16:44] <masak`> sorear: I think the test is correct but I'm mystified by its description.

[16:44] <masak`> other than that, test.pl is an inspiring read. kudos!

[16:45] *** masak left
[16:46] <jasonmay> coding contest?

[16:48] *** masak`` joined
[16:48] *** masak`` is now known as masak

[16:48] <masak> jasonmay: http://strangelyconsistent.org/blog/masaks-perl-6-coding-contest

[16:49] <perigrin> masak: getting others to write your Go AI I see

[16:49] * perigrin hides.

[16:49] <masak> heh :)

[16:49] <masak> was that a reference to p4?

[16:50] <perigrin> actually the first four would all apply in some transformative fashion

[16:50] <masak> huh.

[16:50] <masak> I can honsetly say that I didn't have Go on my mind when I thought of them.

[16:50] <perigrin> :)

[16:51] <perigrin> but you see where I'm seeing it ?

[16:51] * masak looks

[16:51] *** masak` left
[16:51] <perigrin> looked so hard you killed your other connection

[16:52] <masak> my other connection sucked.

[16:52] <masak> so does this one, in all likelihood.

[16:52] <perigrin> it's cause instead of broadband you've got bredband

[16:52] <perigrin> I blame the Sweedish government.

[16:52] *** masak` joined
[16:52] <flussence> the ducks are eating his connection

[16:52] <masak`> I can see how p4 might be a subset of Go somehow. I can see how p3 might possibly be related.

[16:53] <masak`> I don't see the connection with p1 (which is about matrices) and p2 (which is in the continuous plane).

[16:53] <perigrin> a Go board is pretty similar to a continuous plane 

[16:53] <masak`> perigrin: but if you see it, then you definitely should sign up! :)

[16:54] <masak`> maybe you'll have some insight that others don't.

[16:54] <perigrin> yeah I know what a matrix is ... but not how to multiply it ... they didn't include that in the red pill.

[16:55] <masak`> my wifi is a bit wobbly because I'm on a bus going across Sweden.

[16:56] <masak`> the wikipedia entry on matrix multiplication is pretty good.

[16:56] <flussence> bus-provided wifi?

[16:56] *** masak left
[16:56] <perigrin> but if you view a go board as a series of points [1 2 3 4 ....] you can see how it easily transforms into a matrix :)

[16:57] <flussence> (continental EU gets all the fun stuff... bah)

[16:57] <perigrin> flussence: they have it on long haul busses in teh US now too

[16:57] <masak`> flussence: yeah! it's great. when it works.

[16:57] <perigrin> but yeah it's using a 3G connection or something

[16:57] <perigrin> for the entire bus

[16:58] <flussence> I was wondering whether it was on the bus, or the bus was just really slow and you were picking up signals from buildings :)

[16:58] <masak`> perigrin: when you're not using the special matrix multiplication, it's more of a regular 2D array, I'd say...

[16:58] <masak`> :)

[16:58] *** masak` is now known as masak

[16:58] <masak> I see such networks going by now and then.

[17:00] <perigrin> masak: yeah ... my maths stopped before the fun stuff in college 

[17:01] <masak> I'm sorry to hear that.

[17:01] <masak> never to late to seek out all the fun stuff, though :)

[17:03] *** zby_home_ left
[17:04] *** masak` joined
[17:06] *** sji left
[17:08] *** masak left
[17:08] *** masak` is now known as masak

[17:09] <TimToady> masak: I believe import of the comment is that True ~~ False even if the Bool is supplied by an expression, so the "constant" is more of an "invariant"

[17:09] *** am0c_ joined
[17:09] <TimToady> er, False ~~ True rather

[17:10] <masak> ok, that kinda makes sense.

[17:10] <TimToady> my question is why this is a niecza test instead of a spectest :)

[17:11] <masak> there's probably quite a bit of overlap between the test*.pl files in niecza and the spectests.

[17:11] <masak> I don't know why sorear has chosen not to use the spectests directly.

[17:11] <masak> I imagine this way he can move forward faster.

[17:12] <tadzik> http://twitter.com/VienosNotes/statuses/17950692383662080 -- looks worrying

[17:12] * TimToady wonders how many of the niecza tests rakudo would pass...

[17:12] *** am0c left
[17:13] <masak> tadzik: nah, he's just explaining to @osa9 how whitespace works after function names.

[17:13] <tadzik> ah

[17:13] <masak> TimToady: I was thinking the same thing. now I'm going to try it.

[17:13] <tadzik> ah, right

[17:13] <masak> it'll take a bit of manual fudging, because niecza does heredocs and stuff.

[17:13] <masak> but if I do it with the aim of writing a blog post, it might be fun.

[17:15] <masak> niecza's lib/Test.pm6 also has a sub rxtest.

[17:15] <masak> it's nice, but I will have to fake it for Rakudo.

[17:15] <masak> sub rxtest($rgx, $rgxname, @y, @n) is export

[17:15] <masak> was able to guess the function of $rgx and $rgxname, but not of @y and @n just looking at the calls. :)

[17:17] *** am0c_ left
[17:19] <masak> things I've seen so far that I know Rakudo doesn't do but niecza does: heredocs, LTM, WHENCE, better autoviv.

[17:21] *** am0c_ joined
[17:21] *** masak left
[17:28] <daxim> still no heredocs in rakudo?  booooy

[17:30] <dalek> roast: fef3dcc | (Kyle Hasselbacher)++ | S10-packages/basic.t:

[17:30] <dalek> roast: [S10-packages] Test for RT 80856

[17:30] <dalek> roast: review: https://github.com/perl6/roast/commit/fef3dccf5d

[17:30] <dalek> roast: ee1cf20 | (Kyle Hasselbacher)++ | S02-whitespace_and_comments/minimal-whitespace.t:

[17:30] <dalek> roast: [minimal-whitespace.t] Test for RT 80330

[17:30] <dalek> roast: review: https://github.com/perl6/roast/commit/ee1cf201ea

[17:30] <dalek> roast: 5760b39 | (Kyle Hasselbacher)++ | S03-sequence/misc.t:

[17:30] <dalek> roast: [S03-sequence] Test for RT 80574

[17:30] <dalek> roast: review: https://github.com/perl6/roast/commit/5760b39f0a

[17:32] *** justatheory joined
[17:38] *** uasi_ left
[17:38] *** uasi joined
[17:45] *** am0c_ left
[17:53] *** MayDaniel left
[17:56] *** ShaneC joined
[17:57] <colomon> masak: you should fudge it the other way, and get heredocs working in Rakudo.  ;)

[17:59] *** Lorn left
[18:00] *** Lorn joined
[18:03] *** zby_home joined
[18:03] *** fhelmberger joined
[18:04] *** fhelmberger left
[18:05] <ggoebel> masak: If I remember right, sorears biggest hurdle with spectest was eval

[18:07] *** [particle] left
[18:09] <ggoebel> sorear: as exciting as niecza is from the optimization ax grinding perspective... the day it'll be "real" for this lurker, is the day it has eval and starts running the spectest.

[18:10] *** [particle] joined
[18:12] *** kensanata left
[18:13] <ggoebel> sorear: and have to say once again, niecza is exciting. It has restored my faith that Perl6, when it matures, will be both fast and good :)

[18:21] *** torm joined
[18:22] *** icwiener left
[18:26] *** impious joined
[18:26] *** rgrau joined
[18:29] <jjore> Hi, here is a very short horror story of meta object protocols that clash with user code. $work thought it'd be neat to have an object attribute named 'can' and also thought it'd be neat to auto-generate methods for working with attributes. Somewhere along the way UNIVERSAL::isa.pm was handed one of these objects and everything went kablooey. In prod, of course.

[18:30] <moritz_> I don't see the connection to MOP

[18:30] <moritz_> I just see a method name clash

[18:30] <jjore> ->can('...')?

[18:31] <jjore> In perl 6 you'd spell that something like .^can or something, right?

[18:31] <moritz_> right

[18:31] <moritz_> so you can have both .can and .^can

[18:31] <jjore> anyway, it's "namespaced" away.

[18:33] <moritz_> yes

[18:33] *** uasi left
[18:40] <shortcircuit> I suppose I should mention here that I contributed a Perl 6 example to Rosetta Code: http://rosettacode.org/wiki/Counting_in_Factors

[18:41] <TimToady> shortcircuit++

[18:41] <TimToady> I'll look at it later, but at the moment I'm writing the Christmas Eve advent calendar entry

[18:42] *** abra left
[18:45] *** envi left
[18:45] *** soroush_ joined
[18:46] *** soroush left
[18:46] <colomon> TimToady++

[18:48] <shortcircuit> You know what might be useful? A desugar filter. Syntactic sugar can make the reasons for code's behavior non-obvious. For understanding the language syntax, (and existing code), I'd find it useful to be able to de-sugar code.

[18:49] <tadzik> shortcircuit: well volunteered!

[18:49] <tadzik> :)

[18:50] <tadzik> that could be a Padre plugin, so when you mouseover code it desugars, or something

[18:55] *** abra joined
[18:57] <shortcircuit> tadzik: That'd require me to understand the sugar. :)

[19:08] *** abra left
[19:10] *** daxim left
[19:10] *** wamba left
[19:12] *** rindolf joined
[19:12] <rindolf> Hi all.

[19:12] <rindolf> Was Rakudo Star for December released yet?

[19:13] <flussence> there's an announcement written, the thing itself isn't yet...

[19:13] <rindolf> flussence: OK, thanks.

[19:14] <flussence> think we're just waiting for the tests to finish right now...

[19:15] <smash> today's release is not rakudo star release

[19:15] <flussence> oh, that too.

[19:16] <flussence> (I didn't see the star, because the weather's cloudy here)

[19:24] *** impious left
[19:26] *** Patterner left
[19:27] *** Psyche^ joined
[19:27] *** Psyche^ is now known as Patterner

[19:27] *** justatheory left
[19:32] *** uniejo left
[19:34] *** Khisanth left
[19:36] <smash> All tests successful, last call if anyone wants to include something on today's release

[19:38] <dalek> rakudo: 8246b5c | smashz++ | VERSION:

[19:38] <dalek> rakudo: [release] bump VERSION

[19:38] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/8246b5c8be

[19:39] *** rhr left
[19:40] *** risou_ left
[19:41] *** rhr joined
[19:49] <dalek> niecza/cilbackend: cacbb63 | sorear++ | test.pl:

[19:49] <dalek> niecza/cilbackend: Reword a confusing test label masak++

[19:49] <dalek> niecza/cilbackend: review: https://github.com/sorear/niecza/commit/cacbb636c7

[19:51] <sorear> shortcircuit: you mean like perl -MO=Deparse,-p -e '...' ?

[19:52] <sorear> maybe add ,-x7,-q,-P for good measure

[20:01] *** KyleHa joined
[20:02] <KyleHa> Hello #perl6.

[20:02] <sjohnson> hello, world

[20:02] <tadzik> helli KyleHa 

[20:02] <dalek> roast: 84eeb91 | (Kyle Hasselbacher)++ | S02-builtin_data_types/whatever.t:

[20:02] <dalek> roast: [whatever.t] Test for RT 79166

[20:02] <dalek> roast: review: https://github.com/perl6/roast/commit/84eeb91eda

[20:03] <KyleHa> rakudo: say dir().pick(5)

[20:03] <p6eval> rakudo cae7f9: OUTPUT«Operation not permitted in safe mode␤  in 'Safe::forbidden' at line 2:/tmp/e0Z8D5bNcv␤  in main program body at line 22:/tmp/e0Z8D5bNcv␤»

[20:03] <sorear> good * #perl6

[20:05] *** fhelmberger joined
[20:05] <takadonet> sorear: hey

[20:05] *** sorear left
[20:06] *** glow joined
[20:06] <KyleHa> In which syn is dir() spec'd?

[20:09] <KyleHa> I think I found it in S32-setting-library/IO.pod

[20:10] <takadonet> KyleHa: i believe that where it is for the moment

[20:10] <takadonet> however I'm not 100% sure

[20:13] *** sorear joined
[20:20] <tadzik> What is <ident> in grammars?

[20:22] <sorear> a subrule call

[20:22] *** jedai_ joined
[20:22] <sorear> not a language-defined subrule

[20:23] *** simcop2387_ joined
[20:23] <tadzik> funny. It's used in lolsql parser, but not defined anywhere. Gets a maximum recursion depth in Rakudo, I'll try with niecza

[20:23] *** jedai left
[20:23] <colomon> wouldn't it be the rule for an identifier?

[20:23] <sorear> you might be seeing leakage from the Perl6 grammar

[20:24] <tadzik> Action method multi_declarator__S_null not yet implemented

[20:24] *** simcop2387_ left
[20:24] <tadzik> colomon: is there one?

[20:24] *** icwiener joined
[20:24] <tadzik> there is in HLL::Grammar iirc

[20:24] <colomon> token identifier {     <.ident> [ <.apostrophe> <.ident> ]*  }

[20:24] <colomon> that's in Rakudo's Grammar.pm

[20:25] <colomon> suspect it is pulling ident from HLL::Grammar or something, yes.

[20:25] <tadzik> adding "is HLL::Grammar" fixes that bug

[20:25] <tadzik> so a Rakudobug, no?

[20:25] <colomon> seems like, but not my area at all, I admit.

[20:26] <tadzik> rakudo: grammar Foo { token TOP { <ident> } }; Foo.parse('arsars')

[20:26] <p6eval> rakudo cae7f9:  ( no output )

[20:26] <colomon> sorear probably has a better idea...

[20:26] <tadzik> rakudo: grammar Foo { token TOP { <ident> } }; Foo.parse('arsars')

[20:26] <p6eval> rakudo cae7f9:  ( no output )

[20:26] <tadzik> eh

[20:26] <tadzik> rakudo: grammar Foo { token TOP { <ident> } }; Foo.parse('arsars'); say 'alive'

[20:26] <p6eval> rakudo cae7f9: OUTPUT«alive␤»

[20:26] <tadzik> not so easy

[20:29] <tadzik> now it's even funnier: http://paste.perldancer.org/28mOhB7fnOJLx

[20:29] <tadzik> it probably misses something from HLL::Grammar now

[20:43] *** dd070 joined
[20:43] <dd070> hello ppl

[20:44] <dd070> anyone awake

[20:44] <tadzik> ywis

[20:44] * gfldex yawns

[20:44] <gfldex> hmm?

[20:45] <dd070> cool

[20:45] <tadzik> now that you've woken up gfldex please present some lifechanging patches you've come with :)

[20:46] *** colomon left
[20:46] <dd070> which point of perl6 spec hurts most ?

[20:46] <gfldex> sadly i have so far no lifechanging patches

[20:47] <gfldex> but i have high hopes to celebrate perl6's inherent greatness when jnthn++ enlightens us with the next object model

[20:47] <tadzik> no idea, I'm not into specs really

[20:47] <tadzik> :)

[20:47] *** zby_home left
[20:48] <gfldex> i would say S22

[20:49] <dd070> well even i haven't read official docs. but i am aware of a few features. 

[20:49] <dd070> or restrictions

[20:50] <dd070> like forcing variable declaration in any script. 

[20:51] <dd070> it really hurts in quick and dirty scripts. 

[20:51] <dd070> having use strict was enough. 

[20:51] <moritz_> then you can switch it off.

[20:51] <dd070> how can i switch off ?

[20:52] <moritz_> no strict;

[20:52] <moritz_> not yet implemented though

[20:52] <dd070> i would have to write no strict on top for quick and dirty scripts. 

[20:53] <moritz_> right

[20:53] <gfldex> you could have your own settings

[20:53] <moritz_> and by that you clearly label it as "quick and dirty"

[20:53] <moritz_> if that's what you want, why not?

[20:54] <moritz_> you can even write an alias, so that 'use quick'n'dirty;' does the same as 'no strict;'

[20:54] <dd070> quick things should not bother with settings. such scripts sole purpose is only specific to testing some logic or new hack very quickly.

[20:55] <moritz_> dd070: I see your point, but history has clearly shown that in general 'no strict;' is a bad default

[20:55] <moritz_> it means you have to start off teaching newbies why 'use strict;' and variable declarations are good idea in the first place

[20:55] <dd070> but such scripts are small mostly limited to 5 yo 10 lines and i know i will not mistype any variable. 

[20:56] <moritz_> well, then type 'no strict;' and be happy.

[20:56] <gfldex> you could tie no strict to it's own executable/shell wrapper

[20:56] <dalek> roast: d6631bb | (Kyle Hasselbacher)++ | S12-subset/subtypes.t:

[20:56] <dalek> roast: [subtypes] Test for RT 78318

[20:56] <dalek> roast: review: https://github.com/perl6/roast/commit/d6631bbdd6

[20:56] <dalek> roast: 98abe8e | (Kyle Hasselbacher)++ | S12-subset/subtypes.t:

[20:56] <dalek> roast: [subtypes.t] Test for RT #78322

[20:56] <dalek> roast: review: https://github.com/perl6/roast/commit/98abe8e910

[20:56] *** Su-Shee joined
[20:56] <Su-Shee> hi.

[20:57] <moritz_> when you've answered 20 posts on perlmonks where somebody wrote spaghetti perl code with errors that 'use strict;' would have caught, and the one who asks it had no clue what's wrong, then you start to see that it's a bad default that way

[20:57] <moritz_> hi Su-Shee

[20:57] <allbery_b> and extra code to complain if the script is larger than N lines or used more than M times :)

[20:58] <dd070>  in production code we are free to 'use strict'. moreover its auto enabled if we use moose

[20:58] <dd070> newbies generally grow up quickly knowing what is 'use strict'

[20:59] <moritz_> if they get so far at all.

[20:59] <dd070> in PHP there no such thing. still its hot selling cake. 

[20:59] <KyleHa> Lack of lexical scoping is what drove me away from PHP.

[21:00] * moritz_ wonders if godwin's law transferred to programming discussions includes the mention of PHP

[21:00] <dd070> i know bugs can be produced but thats why liked perl's 'use strict' feature. but I do not like to make it turned on by default. 

[21:00] <moritz_> well, we can't expect everybody to be happy with every change

[21:00] <Su-Shee> javascript has use strict; now too. 

[21:00] <dd070> javascript too ?

[21:01] <Su-Shee> yes. EC5 supports it, the rest ignores it if it is there.

[21:01] *** danishman joined
[21:01] <Su-Shee> it's very similar to perl5's, with a little javascript twist here and there (naturally)

[21:02] <dd070> anyway, some moments back to perl,  for large script or project kind of thing Perl5 offers 'use strict'. thats good thing. I don't want to use Java for simple tasks. 

[21:02] <moritz_> ... and you don't have to.

[21:04] *** colomon joined
[21:04] <dd070> right. thts why i prefer to 'use strict' for production. its not bad. 

[21:05] *** sji joined
[21:06] <moritz_> anything new you want to add to the discussion?

[21:07] <dd070> KyleHa: in php  functions all variables are localized. if want to access global one, use global keyword. its fine enough. but not having 'use strict' often lead to bug due to variable name mistyping.

[21:09] <moritz_> do you think that variables inside functions should work differently from variables outside functions?

[21:09] <moritz_> and should those inside functions which are nested inside other functions work differently again?

[21:10] *** colomon_ joined
[21:11] <dd070> not so clear about that. but it works that way. if want to use global variable, have to declare it with global keyword first. otherwise local copy will be created. 

[21:11] <dd070> in functions.

[21:12] *** colomon left
[21:12] *** colomon_ is now known as colomon

[21:12] <KyleHa> As I recall, PHP had three scopes:  global, file, and function.  I want to scope a variable to a block.

[21:12] <dd070> we can enable warning to log use of uninitialized variables. 

[21:13] <dd070> KyleHa: I think global and file scope are same thing as far as PHP is concerned. 

[21:13] *** MayDaniel joined
[21:13] <dd070> KyleHa: no you can not scope variable to a block. 

[21:14] <KyleHa> That fact about PHP burned me, and I left it.  It may be very popular with others, but that was my personal deal breaker.

[21:14] <Su-Shee> so, I take it from the discussion that the latest rakudo version is implemented in PHP? ;) whose idea was that? ;)

[21:15] <dd070> Su-Shee: rakudo is Perl6 project. isn't it

[21:15] *** colomon_ joined
[21:16] <moritz_> Su-Shee: pmichaud's of course. After he did it in lolcode, he asked himself "is there anything else I could do where the audience would laugh any harder?". PHP was his answer

[21:16] <moritz_> *SCNR*

[21:16] <Su-Shee> I'm being sarcastic, I already have rakudo ;)

[21:16] <dd070> KyleHa: That thing never hurtd me really. i was comfortable to write good quality code for long. 

[21:17] <Su-Shee> moritz_: you typed "laugh" wrong - it's spelled "would cry any harder" ;)

[21:17] <dd070> KyleHa: actually I still like PHP but its mostly used in Web App. and its lib is not as large as CPAN

[21:17] *** colomon left
[21:17] *** colomon_ is now known as colomon

[21:18] <dd070> its most open source classes are web apps specific. 

[21:19] *** rgrau left
[21:21] *** danishman left
[21:23] *** simcop2387 left
[21:25] <Su-Shee> ok, what am I using to install modules? pls, proto, neutro or ufo?

[21:25] <flussence> neutro

[21:25] <flussence> seems to be the most 'alive' one right now, anyway

[21:26] <moritz_> neutro

[21:28] *** abra joined
[21:32] <tadzik> wow, I didn't expect it'd be alive and well for so long

[21:32] *** abra left
[21:33] *** dd070 left
[21:34] <smash> devel release #36 done

[21:35] <tadzik> :)

[21:35] <tadzik> smash++

[21:35] <smash> there's noone scheduled for release #37

[21:36] *** simcop2387 joined
[21:37] <moritz_> smash++

[21:37] <tadzik> can I try?

[21:37] <moritz_> tadzik: sure. Have you submitted a CLA already?

[21:37] <tadzik> moritz_: CLA?

[21:37] *** dju joined
[21:37] *** dju left
[21:37] *** dju joined
[21:37] <moritz_> tadzik: Contributor's License Agreement

[21:38] <moritz_> http://www.perlfoundation.org/contributor_license_agreement

[21:38] <tadzik> oh

[21:38] <tadzik> serious business

[21:39] <moritz_> yes :(

[21:39] *** abra joined
[21:39] <tadzik> so I need to write a letter and send it through the ocean to the USA?

[21:39] <moritz_> aye

[21:40] <flussence> not quite, it'd get wet.

[21:40] <tadzik> please tell me this is a joke for the newcomers

[21:40] <moritz_> (maybe a fax is OK too, but I don't know any number you might send it to)

[21:40] <moritz_> tadzik: no, it's really serious

[21:40] <KyleHa> Treat it with shark repellent first.  Except that might give the lawyers problems...

[21:40] <tadzik> huh

[21:40] <moritz_> I've signed such a thing too

[21:40] <sbp> use a hermetically sealed envelope

[21:40] <sbp> that's what keeps hermet crabs dry [sic]

[21:40] <KyleHa> I've sent in a CLA.

[21:41] <sbp> not sure about the hermet seals though

[21:41] <tadzik> how about a scanned document through an email?

[21:41] <smash> moritz_: i've sent one myself, letter in _real paper_ !!

[21:41] <smash> tadzik: they require in paper, signed

[21:41] <tadzik> huh

[21:41] <smash> it's more of a burocratic thing, lawyers like paper

[21:42] <tadzik> Big Thing. But well, it'll get useful sooner or later

[21:42] * tadzik checks how much a letter to the USA costs

[21:43] <tadzik> ho, that's cheap. I can do that

[21:43] <dalek> rakudo: 8f10c4b | moritz++ | docs/release_guide.pod:

[21:43] <dalek> rakudo: [docs] tadzik++ volunteers for next release; add a few more planned release dates

[21:43] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/8f10c4b94e

[21:45] <tadzik> alright. I'll sent it after christmas, prioritaire

[21:45] <tadzik> (I'm still amazed how Big Thing it is)

[21:46] <smash> tadzik: it's a quite common thing

[21:47] <smash> well, i'm off to "Celebrate with the appropriate amount of fun" like the release guide instructs

[21:47] <moritz_> smash++

[21:47] <moritz_> have the appro... you're going to ahve it anyway :-)

[21:47] <tadzik> :)

[21:47] <smash> hehe, laterz

[21:47] *** smash left
[21:54] *** abra left
[21:55] *** dual left
[21:57] <tadzik> from time to time I find bugs in neutro so horrible I wonder how did this thing even work before :)

[21:59] *** dual joined
[22:01] <dalek> roast: 1e438c8 | (Kyle Hasselbacher)++ | S03-operators/assign.t:

[22:01] <dalek> roast: [assign] Test for RT 80614: chained array item assignment

[22:01] <dalek> roast: review: https://github.com/perl6/roast/commit/1e438c8baf

[22:04] <allbery_b> sounds like you're a Real Programmer :)

[22:05] <lue> good afternoon #perl6 o/    [ I'll probably be the only one to say that in the past 10 minutes :) ]

[22:05] * lue waits for moritz_ to edit the backlog

[22:05] <tadzik> hello lue 

[22:10] <lichtkind> good night

[22:11] *** lichtkind left
[22:14] <lue> 'night lichtkind o/

[22:19] <TimToady> preview of day 24: http://perl6advent.wordpress.com/?p=708&preview=true

[22:21] <lue> I get error 404 :/

[22:21] <TimToady> I think only authors can see it

[22:21] <flussence> (and you have to be logged in)

[22:23] *** Eliazar joined
[22:24] <Eliazar> helo

[22:24] <TimToady> howdy

[22:25] * TimToady is not a sendmail, if that's what you were expecting...

[22:26] <tadzik> twisted, but I like it :)

[22:26] <Eliazar> is perl6 now officially released?

[22:26] * TimToady is not a sendmail, if that's NOT what you were expecting...

[22:27] * allbery_b *eyeroll*

[22:27] <TimToady> Eliazar: you'll need to define at least four of those words before we can answer you :)

[22:28] <Eliazar> mmm... I kept hearing about some beta versions here and there.. I am just a C++ programmer and wanted something new.. :)

[22:29] <TimToady> several perl6's have been released, but none of them implement all of the Perl 6 spec

[22:29] <lue> well written post, TimToady++

[22:29] <TimToady> but they're fun to play with nonetheless

[22:29] *** rgrau joined
[22:30] <Eliazar> what are major implementations the development team expect from the language?

[22:30] <TimToady> all of them, eventually

[22:30] <TimToady> we currently have efforts on Haskell, Parrot, CLR

[22:30] <TimToady> more distant on JVM

[22:30] <Eliazar> oh great..

[22:30] *** risou joined
[22:30] <TimToady> niecza: say "I'm running on mono"

[22:31] <p6eval> niecza 406e042: OUTPUT«I'm running on mono␤»

[22:31] <TimToady> we find that the multiple implementations help more than they hurt, because they research different areas and share

[22:31] <tadzik> yapsi: say "I'm Perl6 in Perl6"

[22:31] <p6eval> yapsi: OUTPUT«===SORRY!===␤Unable to find module 'Yapsi' in the @*INC directories.␤(@*INC contains:␤  lib␤  /home/p6eval/.perl6/lib␤  /home/p6eval/p1/lib/parrot/2.10.1-devel/languages/perl6/lib␤  .)␤»

[22:32] <tadzik> :)

[22:32] <flussence> perl6: say $*VM.split("\n").[0] # I bet this won't work on the others...

[22:32] <p6eval> rakudo cae7f9: OUTPUT«name      parrot␤»

[22:32] <p6eval> ..pugs: OUTPUT«␤␤»

[22:32] <flussence> nearly...

[22:33] <TimToady> and jnthn++'s 6model will likely have emitters for a number of backends

[22:33] <Eliazar> TimToady: This is going to be a great language.. for me.. moving from awk to C to perl6 will be like discovering America :D.. (Now I feel old :P ) !

[22:33] <TimToady> well, we're all very impatient to get Perl 6 here, which is why we're working on it so hard :)

[22:33] <TimToady> have you seen the advent calendar?

[22:34] <TimToady> http://perl6advent.wordpress.com/

[22:34] <sjohnson> perl6: coming this christmas!

[22:34] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "!"␤    expecting "::", dot, ":", "(", term postfix, operator or ","␤    at /tmp/BLFSgS1WpS line 1, column 22␤»

[22:34] <p6eval> ..rakudo cae7f9: OUTPUT«===SORRY!===␤Confused at line 22, near "coming thi"␤»

[22:34] <tadzik> :)

[22:34] <flussence> .oO( unexpected excitement? )

[22:34] <Eliazar> TimToady:  checking it now

[22:35] <sjohnson> i guess it ain't comin

[22:35] *** saaki left
[22:35] <sorear> old is good!

[22:35] <sorear> I am young and I have many things yet to learn

[22:35] <TimToady> except when it sucks, sez my joints...

[22:36] <Eliazar> TimToady: so in general is perl6 a kind of perl5 with better OOP?

[22:36] <TimToady> that's one way to look at it

[22:36] <sjohnson> Eliazar: it also does a heck of a lot more than p5

[22:36] <sjohnson> i'm excited to use it

[22:36] <TimToady> but it also has better FP, better AOP, better almost everything

[22:36] <TimToady> and generally is clearer to read

[22:37] <sjohnson> nicer freenode irc channel too

[22:37] *** abra joined
[22:37] * TimToady blames au++

[22:37] *** Khisanth joined
[22:37] <frettled> It also has TimToady.

[22:38] <sorear> Perl was designed in 1984, 1994, and 2004

[22:38] <sorear> we're working to make the 2004 design a reality now

[22:38] <TimToady> er, 1987

[22:38] <frettled> and 2005 and 2006 and 2007 and 2008 and 2009 and 2010 and 2011 (I hope) and …

[22:38] <colomon> TimToady++ # good post

[22:38] * TimToady doesn't know how/when to publish it though

[22:38] <Eliazar> TimToady: perl was amazing helper for analyzing log files in 90's.. I could't live without it! :)

[22:38] <colomon> it's for the 24th, right?

[22:39] <TimToady> colomon: yup

[22:39] <frettled> Eliazar: it still is!

[22:39] <sorear> we're doing a lot more transparency now

[22:39] <perigrin> Perl (5 and 6) are still pretty amazing.

[22:39] <TimToady> if we can only get Perl 6 running as fast as Perl 5, it'll really take off

[22:39] <sorear> Perl 1.0.0 was ready for many types of use when it first hit usenet

[22:39] *** saaki joined
[22:40] <perigrin> sorear: you think you're being trasnparent ... but I can see right through that

[22:40] <sorear> Perl 6 has been in public version control since the beginning, so it's a lot harder to answer "when are you releasing"

[22:40] <flussence> if it was even 1/10th as fast as perl5 I'd be happy

[22:40] <frettled> sorear: or easier: «continuously!»

[22:40] <colomon> TimToady: I just scheduled it for noon UTC on the 24th.

[22:40] <perigrin> flussence: well if you add all the features to perl5 to get it close to the same syntax

[22:40] <TimToady> sorear++ was about -13 when Perl 1 came out  :)

[22:40] <sorear> frettled: good one, I think I'll use it.

[22:40] <colomon> I think.

[22:40] <perigrin> then it is 1/10th as fast

[22:40] <TimToady> no, -3, sorry

[22:40] <frettled> sorear: \o/

[22:41] <Eliazar> TimToady: so there is speed issues?

[22:41] <colomon> TimToady: officially scheduled.  :)

[22:41] *** risou left
[22:42] <flussence> Eliazar: rakudo isn't going to win any benchmarks any time soon, but it's bearable

[22:42] <TimToady> Eliazar: the implementation on parrot, while most feature complete, is also very slow

[22:42] <TimToady> it really depends on what you're trying to do

[22:42] <TimToady> I wouldn't use it for log analysis yet, unless it's a short log... :)

[22:42] <flussence> it's like 1990s Javascript, when we're aiming for 2010 JS speed

[22:42] <sorear> Perl 6 is defined in terms of itself in a lot of places

[22:43] <TimToady> which means it gets recursively faster automatically as it gets faster...

[22:43] <tadzik> https://github.com/tadzik/neutro/blob/master/tmplib/Module/Install.pm -- could someone give me a hand? File::Mkdir supplies a new, 2 arg variant of mkdir(), yet the code dies with "Unexpected named parameter 'p' passed in 'mkdir' at line 5682:CORE.setting", as if it didn't include the module

[22:44] <TimToady> and we *hope* the design will be optimizable as much as we hope it will...er...

[22:44] <sorear> $x = $y + $z is, abstractly 2 sub calls on the surface, then another sub call to dispatch the + overload, a method call to poke the $x variable, ...

[22:44] *** KyleHa left
[22:44] <sorear> you need a bit of cleverness in a Perl 6 implementation to short-circuit the metacircularity when it isn't needed

[22:44] *** risou joined
[22:44] <perigrin> Eliazar: also keep in mind most comparisons are made against languages that have had years focusong on speed rather than finishing the spec

[22:44] *** uasi joined
[22:44] <flussence> tadzik: I think I came across that myself, but I didn't bother figuring out why and just used a shell command instead :)

[22:45] <perigrin> Slow is relative 

[22:45] <tadzik> :<

[22:45] <Eliazar> TimToady: I was just about to ask about log analyzing when you replied! I have the impression that perl5 will still be the only master for text processing .. maybe perl6 will be more general purpose like,, mmm python I guess..

[22:45] <TimToady> sorear: but you have more than a bit of cleverness, so you could have problems :)

[22:45] <sorear> Rakudo right now is styling itself a reference implementation; it tries to be obviously correct.  Not helping matters is that sub calls are currently the slowest part of Parrot

[22:46] <TimToady> and that the type system of parrot has a fairly large impedence mismatch with Perl 6's model

[22:46] <TimToady> both these should improve in the future

[22:46] *** rindolf left
[22:46] <sorear> relatively speaking - a raw Parrot procedure call without arguments is approximately twice as slow as a raw Perl 5 sub call

[22:46] <sorear> while everything else is blindingly faster :)

[22:46] <TimToady> Eliazar: our hope is that it will be just as good for logs, if not better, eventually, and also more general purpose

[22:47] <perigrin> Eliazar: you're also missing out on some of the nicer features that came back to Perl5 from Perl6 with that analysis

[22:48] <Eliazar> well, I used perl5.8.6 usually on my bsd servers..

[22:48] <gfldex> Eliazar: you will be able to write parsing code that is easer to write and possible to read

[22:48] <gfldex> in fact you can do so already

[22:48] <TimToady> the Perl 6 parser is written in Perl 6, in fact

[22:48] <sjohnson> std?

[22:48] <TimToady> nodnod

[22:49] <Eliazar> Are perl6 regexes now completely implemented?

[22:49] <tadzik> Yep

[22:49] <TimToady> well, largely

[22:49] <TimToady> I don't think rakudo does lookbehinds yet

[22:50] <TimToady> nor does it really do LTM

[22:50] <tadzik> ah

[22:50] <TimToady> niecza does though

[22:50] <TimToady> LTM = longest token matching

[22:50] <sorear> niecza does lookbehinds only for strings that decompose into a sequence of character classes

[22:50] <Eliazar> so it is not completely done assuming rakudo is most popluar imp..

[22:50] <sorear> like <?after abc> or <?after \s> but not <?after ba+>

[22:51] <TimToady> mostly we implement what we need as we need it to bootstrap Perl 6 in itself

[22:51] <sorear> I don't think anyone does full lookbehind yet

[22:51] <sorear> also I don't think anyone has implemented ::> or <:Age(2.0..*)> yet

[22:51] <TimToady> and it will always be subject to the constraint of "patterns that can be reversed"

[22:52] <TimToady> not sure anyone has done <*word> yet either

[22:52] <Eliazar> so maybe perl6 will be the first to have them..

[22:53] <TimToady> it'll be the first to have a lot of things, so if we have to put off some of the lesser ideas till after 6.0.0, we can

[22:53] <TimToady> fundamentals have to come before convenience features, generally

[22:54] <Eliazar> TimToady: agree..

[22:54] <TimToady> except insofar as convenience falls conveniently out of the fundamental design :)

[22:54] <Eliazar> TimToady: now we are talking! :)

[22:54] <TimToady> we're very pragmatic, except when we aren't...

[22:54] *** Chillance joined
[22:56] <Eliazar> TimToady: Is there any expected date for 6.0.0 ? 

[22:56] <gfldex> x-mass

[22:57] <sorear> I think a better question is, "Is there any expected definition for 6.0.0 ?"

[22:57] <Eliazar> sorear: You mean in terms of specs?

[22:57] <TimToady> it will be a process of convergence with the various nearly complete implementations

[22:58] <gfldex> what means we will notice a few days after 6.0.0 happend that 6.0.0. happend :)

[22:58] <TimToady> much of the final spec work is expected to arise from the various impls duking it out :)

[22:58] <frettled> Eliazar: The challenge is that the language is separate from the implementations.  The 6.0.0 spec has arguably been several years ago.

[22:58] <gfldex> the question is "do i need 6.0.0 to start using perl6 to my hearts content?"

[22:59] <TimToady> and where they can't agree, we put "Reliance on one behavior or another here is erroneous."

[22:59] <TimToady> gfldex: depends on how easily your heart is contented, and by what.

[23:00] <Eliazar> TimToady: well.. I guess it would be great to start with a minimal but very efficient version.. then start to look for the impossible (which is possible :))

[23:00] <gfldex> my heart is lusting for proper bindings to some proper gui toolkit

[23:01] <gfldex> and i somehow think i will have to make those bindings happen myself

[23:01] <colomon> gfldex: that's the most reliable way to get things done.  :)

[23:01] <TimToady> the most reliable way to get things done the way you like, at least...

[23:03] <lue> .oO(Unless you're notoriously unreliable)

[23:04] *** Khisanth left
[23:05] *** envi joined
[23:05] <flussence> gfldex: someone *was* asking when it'll have a Tk binding a while back...

[23:06] <flussence> (personally I'd prefer something shiny-looking like gtk :)

[23:06] <gfldex> how sad! Tk would be my last choice

[23:06] <colomon> gfldex: then do what you want !

[23:07] * tadzik was wondering about making a gtk bindings a while ago

[23:07] <tadzik> OR

[23:07] <tadzik> this awesome idea about a DBI for GUIs.

[23:07] <tadzik> One interface, multiple backends

[23:07] <lue> Qt looks particularly shiny from my KDE session :)

[23:08] <gfldex> i would love to have Qt bindings and i have an idea to fake them into rakudo

[23:09] <gfldex> http://icanhascheezburger.com/2007/04/12/soon/

[23:10] <lue> tadzik: I think that is a great idea. Certainly would make GUIs easier.

[23:13] <tadzik> lue: wanna help?

[23:14] <gfldex> the point with Qt is that you don't really need bindings, all you need to do is to pass some strings around between 2 processes

[23:14] <gfldex> at least that's my idea

[23:14] <gfldex> may or may not work as expected

[23:14] <lue> Hm. I'm assuming I would have to have access to GUIs in order to really work on it.

[23:14] <gfldex> you still with dec terminals? :->

[23:15] <Eliazar> perl6: printf("the %s jumped over the %s ... %d times\n", "cow", "moon", 2);

[23:15] <p6eval> pugs, rakudo cae7f9: OUTPUT«the cow jumped over the moon ... 2 times␤»

[23:15] <allbery_b> I'm somewhat tempted to point out that there really isn't much of a right way to link databases to GUIs, because in the end it's the application needs (the spec) that controls

[23:17] <gfldex> luckyly i have no intention to fiddle with DBs :)

[23:17] <allbery_b> (ex-db freak.  very "ex")

[23:17] <allbery_b> (...dear g-d, it's been 15 years)

[23:17] <tadzik> allbery_b: we don't want to link dbs to guis

[23:18] <tadzik> it's about a unified interface for drawing windows

[23:19] <allbery_b> good luck with that one too :)

[23:19] <allbery_b> (python.  stdwin.  learn from others' mistakes.)

[23:20] <lue> How much RAM do you need to compile Rakudo now?

[23:21] <gfldex> about 270MB

[23:22] <gfldex> might be a little more in peaks

[23:22] <lue> ooh, I should try compiling Rakudo again.

[23:26] *** Eliazar left
[23:27] *** Khisanth joined
[23:31] *** estrabd is now known as estrabd_xmas

[23:31] <sorear> but drawing windows is the window manager's job

[23:31] <colomon> https://gist.github.com/753694 (messing around with Rosetta Code...)

[23:31] *** Khisanth left
[23:33] *** _kaare left
[23:36] <TimToady> colomon: does primes() memoize?

[23:37] <colomon> TimToady: in Math::Prime?  It's supposed to...

[23:38] <TimToady> also, every time I see a "use" for a universal math concept, I shudder, and wonder why it isn't a built-in

[23:38] * TimToady hates "use List:Utils" too...

[23:39] <allbery_b> because there are lots of universal math concepts and we don't want to necessarily pollute the namespace?

[23:39] <flussence> small core?

[23:39] <allbery_b> I can count the number of times I've needed primes on the fingers of one hand

[23:39] * colomon doesn't feel he can just add his own half-baked routines to the spec....

[23:39] <TimToady> the namespace is not really polluted if any user can override in their lexical scope

[23:39] *** nymacro joined
[23:40] <TimToady> that's why we put such things into a setting

[23:40] <allbery_b> (...and the number of times I needed them for something other than hash table sizing on my nose_)

[23:40] * colomon but he is more than happy to make modules full of routines he would like to have available.

[23:40] <TimToady> and the name is really the only thing that needs to be there, with some info on how to load it on demand

[23:41] <lue> .oO(maybe a Core++ thing?)

[23:41] <sorear> it doesn't have to be &CORE::primes

[23:42] *** abra left
[23:42] <sorear> we have DateTime stuff in a subnamespace of CORE; NumberTheory could be the same

[23:42] <colomon> afk #dinner

[23:44] *** torm left
[23:45] <TimToady> Int::primes() would be okay

[23:46] <TimToady> or Int::<@primes>

[23:47] *** icwiener left
[23:50] <lue> That seems like a good idea. Is there a defined system for this sort of situation, or do you just add stuff in a seemingly sensible way as you go?

[23:52] <TimToady> well, it's more like: don't add it in a non-sensible way :)

[23:53] <TimToady> I just find some kinds of module names "smelly"

[23:53] * lue feels there should be a sort of Core++ system. It might make some things easier.

[23:53] <sjohnson> it stinks!

[23:54] <lue> I agree. Math::Prime looks unneccessary, yet I don't see it as very core-ish [ for non-mathematics languages anyway :) ]

[23:56] <TimToady> modules ending ::Utils or ::More or ::Misc or ::Tiny are all just indications that something hasn't been factored out to be implementation dependent that ought to have been

[23:56] <TimToady> *independent

[23:59] <lue> There's something about how modules work in Perl 6 that seems off. I have no idea what though. The unregulated nature? The restrictive naming practices?

