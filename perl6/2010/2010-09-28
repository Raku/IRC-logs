[00:01] <dalek> niecza/mm: 1230f2e | sorear++ | / (5 files):

[00:01] <dalek> niecza/mm: [mm] Implement compilation of settings

[00:01] <dalek> niecza/mm: review: http://github.com/sorear/niecza/commit/1230f2e51bf14a50077ea5f9cad8f20c7c9f1d0b

[00:01] <dalek> niecza/mm: 8b3c3db | sorear++ | src/ (3 files):

[00:01] <dalek> niecza/mm: [mm] Implement compilation of modules which use settings

[00:01] <dalek> niecza/mm: review: http://github.com/sorear/niecza/commit/8b3c3db3f821941fad217a4e2b5d254aae27094b

[00:05] *** snarkyboojum joined
[00:07] *** pythonian4000afk is now known as pythonian4000

[00:09] *** stkowski left
[00:14] *** redicaps joined
[00:20] *** snarkyboojum left
[00:25] *** am0c^ joined
[00:35] *** ashleydev joined
[00:38] *** thowe left
[00:40] *** redicaps left
[00:53] *** QinGW joined
[00:54] *** snarkyboojum joined
[00:56] *** nymacro joined
[01:00] *** Chillance left
[01:10] *** nymacro left
[01:23] *** redicaps joined
[01:25] *** snarkyboojum left
[01:41] *** mavrc left
[01:41] *** molaf__ joined
[01:44] *** molaf_ left
[01:45] *** aloha left
[01:51] *** aloha joined
[02:03] *** LaVolta joined
[02:10] *** snarkyboojum joined
[02:15] *** snarkyboojum left
[02:15] *** nymacro joined
[02:19] *** Italian_Plumber left
[02:25] *** jaldhar left
[02:34] *** leprevost joined
[02:37] *** redicaps left
[02:38] *** jaldhar joined
[03:07] *** leprevost_ joined
[03:08] <sorear> good * #perl6

[03:13] *** meppel joined
[03:14] *** gottreu_ joined
[03:17] *** meppl left
[03:19] *** molaf__ left
[03:19] *** meppel is now known as meppl

[03:25] *** LaVolta left
[03:27] *** mfollett joined
[03:28] *** leprevost_ left
[03:30] <sorear> \o/ niecza/mm can now run setting-using code "hello, world".say

[03:36] *** LaVolta joined
[03:42] *** pythonian4000 is now known as pythonian4000afk

[03:42] *** LaVolta left
[03:43] <ash_> sorear: i was thinking about see if it was possible to somehow keep all the fires that make up core.pm as their individual files instead of just concatenating them together, then compiling each file individually into a pir, then compile each of the pir's into pbc's and finally using pbc_merge 

[03:47] <sorear> ash_: it's a cute idea, but it won't work.  The setting has to be a single parrot Sub

[03:47] <ash_> why?

[03:48] <ash_>  could there not be a setting's module that you can append to later on? like how you can always say GLOBAL::

[03:48] <sorear> ash_: because set_outer only takes one argument

[03:48] <sorear> ash_: the setting is NOT a module, this is a crucial point

[03:48] <sorear> the setting is a Sub which user code is inside of

[03:49] <ash_> so, your saying all of the initialization that happens in core.pm needs to happen lexically outside of the user code? 

[03:49] <sorear> yes

[03:50] <sorear> Something can be done, I'm sure, but you'll need a much bigger hammer than pbc_merge

[03:50] <sorear> probably, a custom LexPad instance will be required

[03:50] <ash_> ya, sounds like it

[03:50] <sorear> talk to pmichaud FIRST

[03:51] <ash_> doesn't everything get added to GLOBAL? from core.pm? 

[03:51] <sorear> NO!

[03:51] <ash_> ah

[03:52] <sorear> read S02:2590

[03:52] <sorear> ash_: the REPL can extend a single lexical scope

[03:53] <sorear> you should study it

[03:53] <sorear> also, get pmichaud to commit to accepting your idea before you write the patch; I forgot this step the last time I implemented core splitting

[03:53] <ash_> oh, that reminds me of a repl bug, you might have more ideas about it than me, in a repl do: my $*a; <enter> then: say $*a; 

[03:54] *** gottreu_ left
[03:58] *** ggoebel left
[03:59] <ash_> so, if you do: use SETTING_MODE; # that's in rakudo already to specify the start of SETTING, could you make that comp_unit append to a special LexPad that was the SETTING scope LexPad? does that sound reasonable? 

[03:59] *** LaVolta joined
[04:01] *** satyavvd joined
[04:07] <araujo> http://ideone.com/HloeA

[04:09] <araujo> I guess, '+ [ 1 ] [ 3 ] => [ 1 3 ] , + [ 2 ] 4 => [ 2 4 ]' ... those operations make sense, though I wonder if it either makes sense for '+ 2 [ 4 ]' to return the index sum or a list with 2 added to each element ... :/

[04:09] <sorear> ash_: "reasonable" is a rather high bar to shoot for

[04:09] *** gottreu_ joined
[04:11] <ash_> well, i'd start with reasonable then move to practical 

[04:11] <ash_> what is that written in? the ideone.com thing

[04:11] <ash_> oh, it says at the top, erlang, nm

[04:12] <araujo> ash_, hehe, it is a small language i write

[04:12] <araujo> I just pick erlan as the syntax highlight

[04:12] <araujo> :P

[04:12] <ash_> oh, got ya 

[04:13] <sorear> ash_: start with working, then move to reasonable

[04:13] <ash_> sorear: just making sure the idea sounds good, if the idea doesn't make sense, then i need to think more

[04:14] <sorear> ash_: it doesn't make less sense than what we already have, that would be hard

[04:14] *** gottreu_ left
[04:14] *** envi joined
[04:14] <araujo> even though I got quicksort working, I still can't find a name for this .... -_- ... so if anyone has an idea, let me know

[04:16] <ash_> araujo: which this? 

[04:18] <araujo> ash_, oh, the language

[04:19] *** rbuels joined
[04:21] *** snarkyboojum joined
[04:24] *** flussence left
[04:26] *** snarkyboojum left
[04:26] *** felipe joined
[04:27] *** am0c^ left
[04:28] *** ascent_ left
[04:37] *** tadzik joined
[04:37] <tadzik> good morning

[04:38] <sorear> hello tadzik

[04:39] <diakopter> anyone know offhand where's the new place to put botnix paths

[04:40] <diakopter> aka dalek

[04:40] *** am0c^ joined
[04:40] <diakopter> aka Infinoid hilite

[04:41] <sorear> diakopter: dalek-conf.json in mu

[04:41] *** mfollett left
[04:41] <diakopter> sorear: thanks

[04:41] <sorear> dalek git pulls once an hour and reloads config from the repo

[04:41] <diakopter> ok. i'm in no hurry, but I'm adding sprixel -3.0

[04:42] <diakopter> that's a negative sign, btw

[04:43] <diakopter> sigh. but I don't want to clone all of mu... oh well.

[04:43] * diakopter whiner

[04:43] <sorear> it's smaller than a svn checkout of just one revision

[04:44] <diakopter> but I can svn checkout just that file

[04:44] <diakopter> well, at least just that file's dir

[04:45] *** ash_ left
[04:46] *** snarkyboojum joined
[04:47] *** jhuni joined
[04:48] <diakopter> wait, by 'git clone mu' did I just download *all* revisions/diffs of mu?

[04:48] <tadzik> yep

[04:48] <tadzik> (tip: it's not that big)

[04:49] <sorear> That includes stuff which has been deleted, like every version of Pugs itself and every version of the testsuite

[04:49] <diakopter> yeah

[04:49] * sorear wonders how well github's rw-svn would work for mu

[04:52] *** snarkyboojum left
[04:57] *** am0c^ left
[04:57] <dalek> mu: a0dc5ad | diakopter++ | misc/dalek-conf.json:

[04:57] <dalek> mu: add sprixel negative three point oh to dalek-conf.json

[04:57] <dalek> mu: review: http://github.com/perl6/mu/commit/a0dc5adb423e309dcd31ab8bc6fd6612b2bc4af7

[05:03] *** apot joined
[05:04] *** justatheory left
[05:06] <cbk> rakudo: my @input =<2 4 6 8 10>; say "DATA SET: "~@input; say "Max: "~@input.max; say "Min: "~@input.min;

[05:06] <p6eval> rakudo 607ec4: OUTPUT«DATA SET: 2 4 6 8 10␤Max: 8␤Min: 10␤»

[05:07] <nymacro> nasty

[05:07] <nymacro> rakudo: my @input = <2 4 6 8 10>; say "DATA SET: "~@input; say "Max: "~[max]@input; say "Min: "~[min]@input;

[05:07] <p6eval> rakudo 607ec4: OUTPUT«DATA SET: 2 4 6 8 10␤Max: 8␤Min: 10␤»

[05:08] <cbk> ??

[05:08] <cbk> i don't think 10 is the smallest number in the set...

[05:09] <nymacro> Yeah, seems like something has been broken

[05:09] * nymacro points at moritz_

[05:09] <nymacro> hmm

[05:10] <cbk> rakudo: my @input =<2 4 6 8 10>; say "DATA SET Sorted: "~@input.sort;

[05:10] <p6eval> rakudo 607ec4: OUTPUT«DATA SET Sorted: 10 2 4 6 8␤»

[05:11] <nymacro> rakudo: my @input = 0..5;  say "DATA SET: "~@input; say "Max: "~@input.max; say "Min: "~@input.min;

[05:11] *** sftp_ left
[05:11] <p6eval> rakudo 607ec4: OUTPUT«DATA SET: 0 1 2 3 4 5␤Max: 5␤Min: 0␤»

[05:11] <sorear> stefan@stefans:~/rel/niecza$ ./niecza_eval -L SAFE -e 'say "Hello, world"'      

[05:11] <sorear> Hello, world

[05:11] <plobsing> rakudo: my @input = < 2 4 6 8 10>.map(+*); say "Max: ", @input.max; say "Min: ", @input.min

[05:12] <p6eval> rakudo 607ec4: OUTPUT«Max: 10␤Min: 2␤»

[05:12] <plobsing> nymacro: you have a list of strings. 10 is the min by string comparison

[05:13] <nymacro> plobsing, oh, true :)

[05:13] <cbk> so putting in .map(+*) means what?

[05:13] <nymacro> I had a misunderstanding of < > I guess

[05:13] <plobsing> +$x => num-context($x)

[05:14] <plobsing> +* => -> { +$_ }

[05:15] <TimToady> see S02:3373, which rakudo doesn't implement yet

[05:15] <plobsing> s/->//

[05:15] <dalek> niecza/mm: 7facc7e | sorear++ | / (3 files):

[05:15] <dalek> niecza/mm: [mm] implement loopback pointer generation

[05:15] <dalek> niecza/mm: review: http://github.com/sorear/niecza/commit/7facc7e08f3aa2697176199dc27785180538835b

[05:15] <dalek> niecza/mm: d298d03 | sorear++ | / (3 files):

[05:15] <dalek> niecza/mm: [mm] Start a new setting; fix package vars

[05:15] <dalek> niecza/mm: review: http://github.com/sorear/niecza/commit/d298d038cd464c72d5b6c50bfb8f55116dfa71aa

[05:15] <dalek> niecza/mm: 9bec6d1 | sorear++ | / (3 files):

[05:15] <dalek> niecza/mm: [mm] implement .HOW (thus .^isa and ~~)

[05:15] <dalek> niecza/mm: review: http://github.com/sorear/niecza/commit/9bec6d17017aaa189c46e3e9687b648ca4575912

[05:17] <TimToady> <2 4 6 8 10> is *supposed* to return a list of integers

[05:17] <nymacro> thanks for the clarification :>

[05:18] <cbk> ok I was going crazy for a bit.  I was thinking I had bad install of rakudo*  I even tried removing and reinstalling it... :)

[05:18] <cbk> Thanks

[05:21] *** Italian_Plumber joined
[05:22] *** FurnaceBoy left
[05:22] *** Italian_Plumber left
[05:24] *** huf joined
[05:25] *** mfollett joined
[05:30] *** kaare joined
[05:30] *** pythonian4000afk is now known as pythonian4000

[05:30] *** kaare is now known as Guest58753

[05:31] *** am0c^ joined
[05:44] *** nymacro left
[05:51] *** lue left
[05:51] *** lue joined
[05:58] *** apot left
[06:02] *** Trashlord joined
[06:06] *** wtw joined
[06:15] *** pythonian4000 is now known as pythonian4000afk

[06:15] *** pythonian4000afk is now known as pythonian4000

[06:15] *** pythonian4000 is now known as pythonian4000afk

[06:18] *** mfollett left
[06:23] *** redicaps joined
[06:25] <dalek> ecosystem: ba2533f | moritz++ | projects.list:

[06:25] <dalek> ecosystem: add cache-memcached by cosimo++

[06:25] <dalek> ecosystem: review: http://github.com/perl6/ecosystem/commit/ba2533fa370c4b32eda3dd3e443923234802a19a

[06:25] <moritz_> phenny: tell cosimo perl6-cache-memcached added. You also have commit access to perl6/ecosystem on github now, so you can do it yourself next time

[06:25] <phenny> moritz_: I'll pass that on when cosimo is around.

[06:28] <moritz_> good morning

[06:28] <tadzik> good morning moritz_ 

[06:28] <sorear> good morning

[06:29] * sorear wonders if he can do anything useful with ecosystem

[06:31] <dalek> niecza/mm: c0b5aee | sorear++ | src/CSharpBackend.pm:

[06:31] <dalek> niecza/mm: [mm] Implement conditional generation of spads

[06:31] <dalek> niecza/mm: review: http://github.com/sorear/niecza/commit/c0b5aeea6cbb8d49ede33986e68f73929dbc9e0a

[06:31] <dalek> niecza/mm: 8497b08 | sorear++ | src/CSharpBackend.pm:

[06:31] <dalek> niecza/mm: [mm] implement non-cloned variables

[06:31] <dalek> niecza/mm: review: http://github.com/sorear/niecza/commit/8497b0859b086d9bad5ceb6550b6700af660b937

[06:34] <tadzik> bah, my cronjob on feather doesn't work for some reason

[06:36] <dalek> ecosystem: c035df0 | tadzik++ | projects.list:

[06:36] <dalek> ecosystem: Added xxx-pm6

[06:36] <dalek> ecosystem: review: http://github.com/perl6/ecosystem/commit/c035df04288eec745280eabf63dbc6b6df091fbc

[06:42] <moritz_> tadzik: I see you changed the format of projects.list; that brakes modules.perl6.org updating

[06:42] <tadzik> oh

[06:43] <tadzik> where is the repo?

[06:43] <moritz_> perl6 account

[06:44] <moritz_> http://github.com/perl6/modules.perl6.org/

[06:44] <tadzik> yeah, I'm on it

[06:45] <moritz_> ++tadzik

[06:45] <tadzik> hey, don't increment me too early! :)

[06:46] <moritz_> pre-increment for pre-karma

[06:49] *** zby_home_ joined
[06:51] *** grew left
[06:52] *** grew joined
[06:54] *** Mowah joined
[07:02] <tadzik> moritz_: I made build-project-list.pl run, waiting for some results

[07:05] <moritz_> sh update-modules.perl6.org 

[07:05] <moritz_> malformed JSON string, neither array, object, number, string or atom, at character offset 0 ["ABC git://github.com..."] at /usr/share/perl5/JSON.pm line 154

[07:06] <moritz_> ah, you didn't commit yet

[07:06] <moritz_> I thought you committed, and waited for results from modules.perl6.org

[07:18] *** Ronnin21 joined
[07:18] <Ronnin21> http://www.rhinosgirls.com

[07:18] *** Ronnin21 left
[07:24] *** miso_soup joined
[07:26] * tadzik senses spam, still is tempted to click

[07:27] <tadzik> moritz_: it ended with Wide character in syswrite at /usr/lib/perl5/5.12/File/Slurp.pm line 330.

[07:28] <tadzik> wait, syswrite in File::Slurp? :/

[07:29] <tadzik> ah, write_file

[07:29] <moritz_> which means you need an encode_utf8 before it

[07:31] <tadzik> rerunning. I never got my head around this encoding and decoding

[07:33] *** mberends left
[07:34] <moritz_> http://perlgeek.de/en/article/encodings-and-unicode if you want to try :-)

[07:37] <tadzik> Undefined subroutine &main::encode_utf8. Damn, couldn't it tell me before updating all this stuff? :(

[07:38] <moritz_> use Encode qw(encode_utf8)

[07:38] <tadzik> what package is... right

[07:46] *** daxim joined
[07:46] <tadzik> index.html and proto.json files generated

[07:46] *** xabbu42 left
[07:49] *** sjn left
[07:49] <dalek> modules.perl6.org: 3b1e8d7 | tadzik++ | web/build-project-list.pl:

[07:49] <dalek> modules.perl6.org: Fixed for non-JSON projects.list

[07:49] <dalek> modules.perl6.org: review: http://github.com/perl6/modules.perl6.org/commit/3b1e8d7980ea9e7d9cf9ad653b224e0eed94bf74

[07:49] <tadzik> moritz_: lolipushed

[07:49] *** Guest58753 is now known as kaare_

[07:50] *** Mowah left
[07:50] *** am0c joined
[07:52] *** sjn joined
[07:55] *** fIorz joined
[07:55] *** florz left
[07:55] *** Mirell left
[07:57] *** Mirell joined
[07:57] *** flussence joined
[08:12] <sorear> suprisingly, the new metamodel seems to be much more frugal with MSIL

[08:13] <sorear> a --gen-app hello world program is only 207KB

[08:13] <sorear> was 300-350 before

[08:32] *** kjeldahl joined
[08:33] *** timbunce joined
[08:39] <dalek> niecza/mm: 912935b | sorear++ | src/C (3 files):

[08:39] <dalek> niecza/mm: [mm] implement numeric lexical access

[08:39] <dalek> niecza/mm: review: http://github.com/sorear/niecza/commit/912935b40440a425227f68b6ffd9ea01fb638757

[08:39] <dalek> niecza/mm: c5ed79f | sorear++ | / (5 files):

[08:39] <dalek> niecza/mm: [mm] bring rest of SAFE setting over

[08:39] <dalek> niecza/mm: review: http://github.com/sorear/niecza/commit/c5ed79f72420a44f4c9b05bf6a326b21cf747e5c

[08:39] <dalek> niecza/mm: f5ecfd8 | sorear++ | / (5 files):

[08:39] <dalek> niecza/mm: [mm] Fixes for CORE & binding to package vars

[08:39] <dalek> niecza/mm: review: http://github.com/sorear/niecza/commit/f5ecfd83ebb7b1a93dd386baec04e79063c88df4

[08:41] *** nymacro joined
[08:41] *** dakkar joined
[08:42] *** cbk left
[08:44] *** xinming_ left
[08:44] *** redicaps left
[08:45] *** miso_soup left
[08:48] *** barika left
[08:55] *** xinming joined
[08:59] *** xinming_ joined
[09:00] *** barika joined
[09:00] *** barika left
[09:00] *** ascent_ joined
[09:01] *** xinming left
[09:01] *** barika joined
[09:12] *** pythonian4000afk is now known as pythonian4000

[09:17] *** c9s joined
[09:28] *** wamba joined
[09:30] *** qwebirc36299 joined
[09:33] *** c9s left
[09:34] <bbkr> rakudo: my @t="a",8; say [xx]@t #curious

[09:34] <p6eval> rakudo 607ec4:  ( no output )

[09:34] <bbkr> hmm

[09:34] <bbkr> rakudo: my @t="a",8; say [x]@t #curious

[09:34] <p6eval> rakudo 607ec4: OUTPUT«aaaaaaaa␤»

[09:34] <bbkr> \o/

[09:35] *** Mowah joined
[09:37] *** jferrero joined
[09:38] *** dakkar left
[09:38] *** dakkar_ joined
[09:39] *** icwiener joined
[09:40] <dalek> rakudo: 0bf6cbe | moritz++ | README:

[09:40] <dalek> rakudo: update README about spectest repo

[09:40] <dalek> rakudo: 

[09:40] <dalek> rakudo: Closes RT #78084

[09:40] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/0bf6cbe3b6419ca5ed16b6fbcd877922863e0608

[09:44] *** jhuni left
[09:44] *** am0c left
[09:48] *** masak joined
[09:48] <masak> oh hai, #perl6!

[09:52] <tadzik> oh hai masask

[09:54] <sorear> hello masak

[09:56] *** c9s joined
[09:58] *** PrinceAndCrack joined
[10:02] *** QinGW left
[10:02] <sorear> masak: niecza/mm is finally to the point where I can compile and run 'use Test;'

[10:02] <masak> sorear: wow, great news!

[10:02] <masak> sorear++

[10:03] <masak> sorear: what's the '/mm' part stand for?

[10:04] <sorear> meta-model

[10:04] <masak> ah, 'course.

[10:04] <sorear> I don't really have a better name for it

[10:04] *** ggoebel joined
[10:07] *** Trashlord left
[10:08] <masak> neither do I.

[10:11] <sorear> standalone executables are about 40% smaller now btw

[10:13] <dalek> niecza/mm: 465e4b7 | sorear++ | / (2 files):

[10:13] <dalek> niecza/mm: [mm] Link GLOBAL/PROCESS to $*FOO

[10:13] <dalek> niecza/mm: review: http://github.com/sorear/niecza/commit/465e4b75d84cf82d45417a353ea31ed9f09c2e95

[10:13] <dalek> niecza/mm: ba6543f | sorear++ | src/ (5 files):

[10:13] <dalek> niecza/mm: [mm] Implement use statements

[10:13] <dalek> niecza/mm: review: http://github.com/sorear/niecza/commit/ba6543fdee0b0363b8a1b8413b6bd7b86a9696b5

[10:13] <dalek> niecza/mm: 88fb2a5 | sorear++ | / (4 files):

[10:13] <dalek> niecza/mm: [mm] implement sub classes, start sorting tests

[10:13] <dalek> niecza/mm: review: http://github.com/sorear/niecza/commit/88fb2a54f64a925f3bed560e9cb32bbe137bee81

[10:14] *** xabbu42 joined
[10:15] <ggoebel> sorear++

[10:15] <ggoebel> karma sorear

[10:15] <aloha> sorear has karma of 28.

[10:15] *** leprevost left
[10:16] <ggoebel> perl6: 'karma sorear++'.say

[10:16] <p6eval> pugs, rakudo 607ec4: OUTPUT«karma sorear++␤»

[10:16] <sorear> buubot: karma sorear

[10:16] <buubot> sorear: sorear has karma of 1051       

[10:16] <masak> buubot: karma masak

[10:16] <buubot> masak: masak has karma of 846       

[10:17] <ggoebel> masak++

[10:17] <masak> buubot: karma au

[10:17] <buubot> masak: au has karma of 25       

[10:17] <ggoebel> au++

[10:17] <masak> au++

[10:19] *** icwiener left
[10:19] *** icwiener joined
[10:22] *** icwiener left
[10:22] * sorear out

[10:23] *** icwiener joined
[10:23] *** icwiener left
[10:23] *** icwiener joined
[10:24] *** LaVolta left
[10:25] *** lamstyle joined
[10:25] *** pythonian4000 is now known as pythonian4000afk

[10:37] *** pythonian4000afk is now known as pythonian4000

[10:39] *** mavrc joined
[10:40] *** qwebirc36299 left
[10:40] <tadzik> buubot: karma tadzik

[10:40] <buubot> tadzik: tadzik has karma of 80       

[10:40] <tadzik> nice

[10:43] *** dakkar_ is now known as dakkar

[10:45] *** pythonian4000 is now known as pythonian4000afk

[10:45] *** xinming_ is now known as xinming

[10:47] *** miso_soup joined
[10:47] *** Mowah left
[10:48] <jnthn> Afternoon, 6ies.

[10:48] <nymacro> evening good sir

[10:49] *** synth left
[10:49] *** icwiener left
[10:50] *** icwiener joined
[10:50] *** synth joined
[10:51] *** mavrc left
[10:55] *** PrinceAndCrack left
[10:58] *** mavrc joined
[11:00] *** icwiener left
[11:00] *** icwiener joined
[11:07] *** miso_soup left
[11:11] * araujo wonders what would be a proper value to return from '+ 1 [ 2 ]'

[11:12] <tadzik> std: + 1 [ 2 ]

[11:12] <p6eval> std : OUTPUT«[31m===[0mSORRY![31m===[0m␤Confused at /tmp/VxYFv2X0qi line 1:␤------> [32m+ 1 [[33m⏏[31m 2 ][0m␤    expecting any of:␤     bracketed infix␤  infix or meta-infix␤Parse failed␤FAILED 00:01 116m␤»

[11:12] <tadzik> me neither

[11:12] *** mavrc left
[11:16] *** Italian_Plumber joined
[11:19] <nymacro> http://pastebin.com/DJ8sTdjm -- 540 characters alright for a Perl 6 blackjack?

[11:21] <nymacro> http://pastebin.com/0sbqjAQD is ungolfed; maybe there is someway better I can do something though :>

[11:21] <nymacro> asking only for the curiosity of someone's boredom (if such a boredom exists)

[11:22] <daxim> I played two games, then it said Winner: -Inf and returned to the rakudo prompt

[11:22] <daxim> is it supposed to run forever?

[11:22] <nymacro> nope

[11:22] <nymacro> -Inf is no winner

[11:22] <tadzik> you can ommit "use v6;" :)

[11:22] <nymacro> it isn't the most verbal -- I'm trying to use a lot of shortcuts in P6, many of them normally wouldn't be used

[11:23] <tadzik> if {} else {} can be changed to ?? !! :)

[11:23] <moritz_> sub pc(@a) -> you can use rotate() instead

[11:23] <daxim> ♠♣♥♦ try whether these work, it's both shorter and more readable

[11:23] <moritz_> rakudo: my @a = 1, 2, 3; say @a.rotate(-1)

[11:23] <p6eval> rakudo 0bf6cb: OUTPUT«312␤»

[11:23] <tadzik> @d=@d.pick(*) → @d.=pick(*)

[11:24] <tadzik> or maybe even @d.=pick:*;

[11:24] <nymacro> oh, awesome

[11:24] <tadzik> std: @d.=pick:*;

[11:24] <p6eval> std : OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable @d is not predeclared at /tmp/kqsdyjzZRL line 1:␤------> [32m@d[33m⏏[31m.=pick:*;[0m␤Confused at /tmp/kqsdyjzZRL line 1:␤------> [32m@d.=pick:[33m⏏[31m*;[0m␤    expecting any of:␤       coloncircumfix␤   signature␤Parse failed␤FAILED

[11:24] <p6eval> ..00:01 11…

[11:24] <tadzik> std: my @d; @d.=pick:*;

[11:24] <p6eval> std : OUTPUT«[31m===[0mSORRY![31m===[0m␤Confused at /tmp/zYWCqubBt9 line 1:␤------> [32mmy @d; @d.=pick:[33m⏏[31m*;[0m␤    expecting any of:␤    coloncircumfix␤   signature␤Parse failed␤FAILED 00:01 117m␤»

[11:24] <tadzik> nah, () is neede

[11:25] <moritz_> -> [$s, $r] { %values{$r} or $r  }  can be written as { %values{.[0]} or .[0] }

[11:25] <tadzik> also, you can omit many parentheses

[11:25] <nymacro> yeah, there were lots of precedence cases which I wasn't sure about

[11:26] <tadzik> std: my @a; my @b; @aX@b

[11:27] <p6eval> std : OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable @aX is not predeclared at /tmp/WaWLxqlVgD line 1:␤------> [32mmy @a; my @b; @aX[33m⏏[31m@b[0m␤Two terms in a row at /tmp/WaWLxqlVgD line 1:␤------> [32mmy @a; my @b; @aX[33m⏏[31m@b[0m␤    expecting any of:␤    POST␤   bracketed infix␤  

[11:27] <p6eval> ..infi…

[11:27] <tadzik> almost

[11:27] *** Trashlord joined
[11:27] <tadzik> rakudo: my @a = [;]; @a[1][0] = 5; @a.perl.say

[11:27] <p6eval> rakudo 0bf6cb: OUTPUT«[[0], [5]]␤»

[11:27] <tadzik> so, you can change [],[] to [;] :)

[11:28] <tadzik> also, things like $_ ~ '' → $_ ~'' or even $_~''

[11:29] <nymacro> -> {%v{.[0]} or .[0]} it doesn't seem to like

[11:29] <tadzik> say ~$_ can be just .say?

[11:29] <nymacro> oh, should be .[1]

[11:29] <nymacro> heh

[11:29] <nymacro> still though; doesn't like

[11:30] <nymacro> std: my @a = [1, 2, 3]; say @a; say ~@a; @a.say;

[11:30] <p6eval> std : OUTPUT«ok 00:01 120m␤»

[11:30] <nymacro> rakudo: my @a = [1, 2, 3]; say @a; say ~@a; @a.say;

[11:30] <p6eval> rakudo 0bf6cb: OUTPUT«1 2 3␤1 2 3␤1 2 3␤»

[11:31] <nymacro> must be something to do with the scalar which doesn't put the space between when printing

[11:31] <tadzik> what do you mean?

[11:32] <nymacro> when i had say ~$_; it would print the array with no spaces between some of the elements

[11:32] <nymacro> diamonds kinghearts 7

[11:32] <nymacro> like that

[11:32] <tadzik> hmm

[11:32] <tadzik> how does the $_.perl.say look?

[11:33] <nymacro> [["clubs", 7], ["diamonds", 2]]

[11:33] *** mavrc joined
[11:33] <tadzik> rakudo: say ~[["clubs", 7], ["diamonds", 2]]

[11:33] <p6eval> rakudo 0bf6cb: OUTPUT«clubs 7 diamonds 2␤»

[11:34] <tadzik> weird then

[11:34] <nymacro> rakudo: say [["clubs", 7], ["diamonds", 2]];

[11:34] <p6eval> rakudo 0bf6cb: OUTPUT«clubs 7 diamonds 2␤»

[11:34] <nymacro> hmmm.

[11:34] <nymacro> that is werid

[11:34] <nymacro> I'm guessing it is to do with $_

[11:34] <nymacro> and being "scalar"

[11:36] <nymacro> heh, just got dealt 3 aces.. any(any(any(3, 13), any(13)), any(any(13), any()))

[11:37] <nymacro> it doesn't quite like that

[11:42] *** pythonian4000afk is now known as pythonian4000

[11:42] <nymacro> but cheers guys! :)

[11:42] *** pythonian4000 is now known as pythonian4000afk

[11:43] *** wamba left
[11:43] <tadzik> :)

[11:46] <nymacro> it is down to 518 chars -- a few things can still be tweaked a little. But it is a pretty solid improvement ^^

[11:47] * nymacro hi fives #perl6

[11:48] *** wamba joined
[11:48] * moritz_ high sixes in response :-)

[11:49] <nymacro> ;)

[11:50] <tadzik> nymacro: mind showing the new code?

[11:51] <nymacro> http://git.nymacro.com/?p=h.git;a=blob_plain;f=bjgolfmin.p6;hb=HEAD

[11:51] <nymacro> will need to change page to UTF-8 though

[11:51] <tadzik> yeah

[11:52] <tadzik> why are things like any(11) printed?

[11:52] <nymacro> only when you have an ace

[11:53] <nymacro> since the way it is implemented ace's value is 1|11

[11:53] <tadzik> mhm

[11:54] <nymacro> eg: any(6, 16) ♥ ace ♠ 5

[11:55] *** masonkramer left
[11:55] *** masonkramer joined
[11:55] <nymacro> only problem is when it gets like this: any(16) ♥ king ♥ ace ♠ 5

[11:57] <nymacro> I'm not absolutely sure; but I would assume that it should just be 16-- since there is only one possibility

[11:57] <nymacro> I'm playing with fire; I'm not sure of the exact mechanics of it

[12:00] <masak> nymacro: a junction with only one element does not de-promote itself to a non-junction.

[12:00] <masak> I guess it could though, in the cases of 'any' and 'all'.

[12:00] <masak> hm, and 'one', I think.

[12:01] <nymacro> cheers :)

[12:01] <masonkramer> are functions with typed formal parameters guaranteed to receive that type of parameter?  foo ( Int $a, Badger %b ) - is %b guaranteed to be a Badger? 

[12:02] <moritz_> masonkramer: %b would be an Associative[Badger]

[12:02] <moritz_> or a subtype thereof

[12:03] <jnthn> Furthermore, it would have to have declared itself as holding baders.

[12:03] <masonkramer> NominalType[ValueType] ?

[12:03] <jnthn> *badgers

[12:03] <pmichaud> goo morning, #perl6

[12:03] <jnthn> Not really in that sense of nominal.

[12:03] <jnthn> pmichaud: eww, sticky!

[12:03] <masonkramer> hehe

[12:03] * moritz_ hands pmichaud a 'd'

[12:03] <nymacro> morgen

[12:03] <pmichaud> badgers?  BADGERS?!  WE DON"T NEED NO STINKIN BADGERS!

[12:03] * pmichaud notices that his 'd' key is a little stuck.

[12:04] <jnthn> .oO( mushroom mushroom... )

[12:04] <moritz_> masonkramer: it's just that 'my Int $a' and 'my Int %a' mean different things

[12:04] <moritz_> my Int $a:  $a can only hold values that ~~ Int

[12:04] <jnthn> Associative is a parametric role.

[12:04] <pmichaud> they both declare containers that hold Int :-)

[12:04] <moritz_> my Int %a: all(%a) ~~ Int

[12:04] <jnthn> The one that means you can, using some key, get a value of whatever type ti's parameterized with.

[12:05] <tadzik> nymacro: golfed down to 505

[12:05] <masak> jnthn: aaaah snake!

[12:05] <nymacro> tadzik, nice! This is by changing unneeded parentheses & using ternary instead of if?

[12:05] <[Coke]> pmichaud: must be all that goo.

[12:05] *** hatseflats left
[12:05] <[Coke]> masak, jnthn: *thwap*

[12:05] <tadzik> nymacro: suprisingly, changing if-else to ternary breaks stuff

[12:06] <tadzik> nymacro: declaring hash as :key(value) is the biggest thing probably

[12:06] <nymacro> ahhk, it wasn't just me

[12:06] <tadzik> plus changing {$^a + $^b} to *+*

[12:06] <nymacro> oh?

[12:06] <tadzik> yep :)

[12:06] <masonkramer> Thanks guys

[12:07] <nymacro> whatever will consume arguments sequentially?

[12:07] <tadzik> it generates a closure, taking 2 arguments

[12:07] <tadzik> hold on, one more character and I'm below 500

[12:07] <nymacro> ^^

[12:07] <pmichaud> [Coke]: I am wondering if younger fingers are to blame, yes.  

[12:07] <tadzik> this ternary is annoying me

[12:08] *** hatseflats joined
[12:09] <pmichaud> Bool.pick ?? "annoying" !! "still annoying"

[12:11] *** satyavvd left
[12:14] <nymacro> oh also tadzik! I got a redundant for loop. The first for loop can be moved to the second :)

[12:15] <tadzik> nymacro: the last if-else can be a while, I think

[12:16] <nymacro> yeah, it should be; at the moment is will sit if you press anything apart from 'h' :P

[12:16] <tadzik> no, it can't

[12:16] <tadzik> oh, maybe it can

[12:17] <tadzik> yeah, got it

[12:17] <tadzik> 491 so far

[12:18] <nymacro> nice :)

[12:18] <tadzik> it'd be easier if I understood the code

[12:18] <nymacro> you still got my un-golfed version?

[12:18] <tadzik> and I think the arrow->block notation is just a sugar over something, so that can be golved too I think

[12:18] <nymacro> http://git.nymacro.com/?p=h.git;a=blob_plain;f=bjgolf.p6;hb=HEAD

[12:19] <tadzik> yep

[12:19] <nymacro> ahhk :)

[12:19] <tadzik> but what if the block takes 2 args and you're using only the second one?

[12:20] <nymacro> yeah, I'm only using the second

[12:21] <nymacro> since cards are [suit, rank], and we don't care what suit something is

[12:21] <nymacro> as it doesn't change their face value

[12:23] <tadzik> so, is there a way to do such thing w/o an arrow notation?

[12:23] *** molaf joined
[12:23] <moritz_> just bind to $_, and use .[1]

[12:23] <nymacro> the .[1] notation probably is supposed to work; but it didn't

[12:24] <tadzik> Unsupported use of do...while; in Perl 6 please use repeat...while at line 1, near ";\n"

[12:24] <nymacro> moritz_, wouldn't $_ get set in the closure if it is passed something without a signature?

[12:24] <tadzik> that's not golf-friendly :(

[12:25] <nymacro> -> [$s, $r] { %values{$r} or $r } to -> { %values{.[1]} or .[1] }

[12:25] <moritz_> rakudo: for [1, 2], ['a', 'b'] { say .[1] }

[12:25] <p6eval> rakudo 0bf6cb: OUTPUT«2␤b␤»

[12:25] <tadzik> worksforme

[12:25] <nymacro> oh? Maybe I messed it up when I tried it earlier. Hm

[12:26] <nymacro> oh, -> $_ { %values{.[1]} or .[1] } works

[12:27] <tadzik> bah, I broke something and I dunno when

[12:27] <moritz_> nymacro: then it must some weird interaction with context

[12:27] <tadzik> yeah, I'm getting more and more cards every hit

[12:28] <nymacro> map(-> $_ { %values{.[1]} or .[1] }, @c) works, but map(-> { %values{.[1]} or .[1] }, @c) does not

[12:28] <tadzik> or is that desirable?

[12:28] <nymacro> tadzik, well, you should be getting 1 extra card every hit -- doing this until you sit or bust

[12:28] <moritz_> nymacro: you need to remove the initial arrow

[12:28] <tadzik> oh, ok then

[12:28] <nymacro> oh :)

[12:29] *** icwiener left
[12:29] <tadzik> hmm

[12:29] <moritz_> -> always introduces a signature, so -> { ... } is explicitly expecting no argument

[12:29] <tadzik> nymacro: http://gist.github.com/600888 does it work as it should?

[12:29] <moritz_> whereas { ... } has a $_ = OUTER::$_

[12:29] <tadzik> 480 chars

[12:29] <moritz_> or so

[12:30] *** Mowah joined
[12:31] <nymacro> moritz_, ahh, thanks. I haven't read much of the synopses; lots of things I'm probably using falsely

[12:31] <Juerd> I find -> confusing when it doesn't look infixish

[12:31] <Juerd> e.g. for @foos -> $foo { ... } is clear, but foo(-> { ... }) is not.

[12:32] <tadzik> same here

[12:33] <Juerd> I don't really understand why it's preferred, instead of sub (...) { ... }

[12:33] <nymacro> well; normally that is probably preferred. But we're golfing! :)

[12:33] <tadzik> whitespace-sensitiveness is killing us anyway

[12:34] <tadzik> or not

[12:34] <Juerd> I continue to see -> much more often than unnamed "sub" in much of the p6 code out there

[12:34] <Juerd> Can't be a golf thing.

[12:34] <moritz_> Juerd: which code "out there" are you talkinga about? modules?

[12:35] <moritz_> evalbot lines on IRC are almost always golfed too

[12:35] <Juerd> Things I see here, including blog posts and perhaps rosetta

[12:35] <tadzik> alright, my ideas are gone at 480 characters

[12:35] <nymacro> I'm at 491 characters at the moment

[12:36] <tadzik> ' or ' => ||

[12:36] <tadzik> I still feel like the main loop can be golfed down

[12:36] <masak> trippy. http://twitter.com/lloyda2/status/25779102812

[12:37] <nymacro> tadzik, this is my first attempt at golf. I'm flailing in the dark with most things

[12:38] <pmichaud> '->' is different 'sub' in that the latter is a Routine, while the former is a Block

[12:38] <tadzik> nymacro: I think that it shouldn't just add cards forever, it should stop when the overall value is over 21

[12:38] <nymacro> that is what mine does

[12:39] <tadzik> well, mine does not :)

[12:39] <nymacro> if pv($_) > 21 { say $_ ~ ' is over 21'; last }

[12:39] <nymacro> is the check for bust

[12:39] <tadzik> queen ♥ king ♥ king ♣ 6 ♥ 6 ♣ queen ♦ 8 ♥ 10 ♥ jack ♣ king ♦ 2 ♣ 7 ♣ queen ♠ queen ♣ 9 ♥ ace ♣ 5 ♠ 5 ♣ jack ♠ 8 ♣

[12:39] <tadzik> (h) hit (s) sit?

[12:39] <tadzik> :)

[12:39] <nymacro> haha ^^

[12:39] <tadzik> yeah, it should be

[12:39] <tadzik> I guess I broke b()

[12:39] <nymacro> I've just been making incremental changes and testing to ensure I don't break it

[12:40] <pmichaud> nymacro:  did you see the version I did for calculating cards and values?

[12:40] <nymacro> nope

[12:40] * pmichaud looks

[12:40] <pmichaud> http://www.pmichaud.com/2009/pres/oscon-perl6op/slides/slide5.html

[12:41] <pmichaud> the last line shows an easy way to calculate the value of a hand

[12:43] <masak> my %points = @deck Z @( (2..10, 10, 10, 10, 11) >>xx>> 4 );

[12:43] <masak> why is the casting needed?

[12:43] <nymacro> pmichaud, interesting

[12:43] <pmichaud> might've been needed to avoid a rakudo bug

[12:43] <pmichaud> (this was 2009, after all)

[12:43] <masak> anyway, pmichaud++

[12:44] <masak> I've seen it many times before, but each time I get happy seeing it. :)

[12:44] <tadzik> now I copied your b() nymacro and it still returns 0 for me. Weird

[12:44] <nymacro> tadzik, did you break anything in your loop?

[12:44] <tadzik> nymacro: the loop itself works. But even bare 'say b($_)' prints 0

[12:44] <moritz_> rakudo: say(2, 3, 3, 4) Z ((1, 2) >>xx>> 4)).perl

[12:44] <p6eval> rakudo 0bf6cb: OUTPUT«===SORRY!===␤Confused at line 22, near ").perl"␤»

[12:44] *** bluescreen joined
[12:45] <tadzik> weird

[12:45] <masak> rakudo: my @suits = <♣ ♢ ♡ ♠>; my @ranks  = 2..10, <J Q K A>; my @deck = @ranks X~ @suits; my %points = @deck Z @( (2..10, 10, 10, 10, 11) >>xx>> 4 ); say %points.perl

[12:45] <moritz_> rakudo: say (2, 3, 3, 4 Z ((1, 2) >>xx>> 4)).perl

[12:45] <p6eval> rakudo 0bf6cb: OUTPUT«{"2♣" => 2, "2♢" => 2, "2♡" => 2, "2♠" => 2, "3♣" => 3, "3♢" => 3, "3♡" => 3, "3♠" => 3, "4♣" => 4, "4♢" => 4, "4♡" => 4, "4♠" => 4, "5♣" => 5, "5♢" => 5, "5♡" => 5, "5♠" => 5, "6♣" => 6, "6♢" => 6, "6♡" => 6, "6♠" => 6, "7♣" => 7, "7♢" => 7, "7♡" => 7, "7♠" => 7, "8♣" => 8,

[12:45] <p6eval> .."8♢" =…

[12:45] <p6eval> rakudo 0bf6cb: OUTPUT«(2, 1, 3, 1, 3, 1, 4, 1)␤»

[12:45] <masak> rakudo: my @suits = <♣ ♢ ♡ ♠>; my @ranks  = 2..10, <J Q K A>; my @deck = @ranks X~ @suits; my %points = @deck Z ( (2..10, 10, 10, 10, 11) >>xx>> 4 ); say %points.perl

[12:45] <moritz_> rakudo: say (2, 3, 3, 4 Z=> ((1, 2) >>xx>> 4)).perl

[12:45] <p6eval> rakudo 0bf6cb: OUTPUT«{"2♣" => 2, "2♢" => 2, "2♡" => 2, "2♠" => 2, "3♣" => 3, "3♢" => 3, "3♡" => 3, "3♠" => 3, "4♣" => 4, "4♢" => 4, "4♡" => 4, "4♠" => 4, "5♣" => 5, "5♢" => 5, "5♡" => 5, "5♠" => 5, "6♣" => 6, "6♢" => 6, "6♡" => 6, "6♠" => 6, "7♣" => 7, "7♢" => 7, "7♡" => 7, "7♠" => 7, "8♣" => 8,

[12:45] <p6eval> .."8♢" =…

[12:45] <p6eval> rakudo 0bf6cb: OUTPUT«(2 => 1, 3 => 1, 3 => 1, 4 => 1)␤»

[12:45] <masak> seems the casting is not needed (anymore).

[12:45] <moritz_> rakudo: say (2, 3, 3, 4 Z=> (1, 2 Xxx 4)).perl

[12:45] <p6eval> rakudo 0bf6cb: OUTPUT«(2 => 1, 3 => 1, 3 => 1, 4 => 1)␤»

[12:46] <moritz_> rakudo: say (2, 3, 3, 4 Z=> ((1, 2) Xxx 4)).perl

[12:46] <p6eval> rakudo 0bf6cb: OUTPUT«(2 => 1, 3 => 1, 3 => 1, 4 => 1)␤»

[12:47] <moritz_> rakudo: say (2, 3, 3, 4 Z=> ((1, 2) Xxx 2)).perl

[12:47] <p6eval> rakudo 0bf6cb: OUTPUT«(2 => 1, 3 => 1, 3 => 2, 4 => 2)␤»

[12:47] <moritz_> rakudo: say (2, 3, 3, 4 Z=> (1, 2 Xxx 2)).perl

[12:47] <p6eval> rakudo 0bf6cb: OUTPUT«(2 => 1, 3 => 1, 3 => 2, 4 => 2)␤»

[12:47] <pmichaud> rakudo:  say (<a a b b c c d d> Z=> ((1,2) Xxx 2).perl

[12:47] <p6eval> rakudo 0bf6cb: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 22␤»

[12:47] <pmichaud> rakudo:  say (<a a b b c c d d> Z=> ((1,2) Xxx 2)).perl

[12:47] <p6eval> rakudo 0bf6cb: OUTPUT«("a" => 1, "a" => 1, "b" => 2, "b" => 2)␤»

[12:47] <moritz_> Xxx is a bit shorter than >>xx>> :-)

[12:48] <pmichaud> yes, but it didn't give the correct results

[12:48] <moritz_> (and new too)

[12:48] <pmichaud> I lost my c's and d's

[12:48] <moritz_> try Xxx 4

[12:48] <pmichaud> rakudo:  say (<a a b b c c d d> Z=> ((1,2) Xxx 4)).perl

[12:48] <nymacro> pmichaud, actually; does your code handle ace as also a value of 1?

[12:48] <p6eval> rakudo 0bf6cb: OUTPUT«("a" => 1, "a" => 1, "b" => 1, "b" => 1, "c" => 2, "c" => 2, "d" => 2, "d" => 2)␤»

[12:48] <nymacro> it doesn't seem to

[12:49] <masak> just wait until the social media find out that Perl 6 has an Xxx operator!

[12:49] <pmichaud> nymacro: no, but it can easily handle ace as 1 by changing the "11" to "11|1"

[12:49] <moritz_> masak: :-)

[12:49] <nymacro> :)

[12:49] <pmichaud> rakudo:  say (<a a b b c c d d> Z=> ((1,2,3,4) Xxx 2)).perl

[12:49] <masak> pmichaud: that way lies only grief, if you ask me.

[12:49] <p6eval> rakudo 0bf6cb: OUTPUT«(timeout)("a" => 1, "a" => 1, "b" => 2, "b" => 2, "c" => 3, "c" => 3, "d" => 4, "d" => 4)␤»

[12:49] <masak> (using junctions that way)

[12:50] <nymacro> I won't use this stuff though; I'm not quite sure what >>xx>> does :)

[12:50] <pmichaud> masak: I agree -- I was just following what nymacro already had for value of ace

[12:50] <masak> nod

[12:50] <pmichaud> it's fine as long as you're only asking for possible point totals

[12:50] <masak> guess so.

[12:51] <pmichaud> but one oes get into trouble with things like    if $points > 21 { ... }

[12:51] *** plainhao joined
[12:51] <moritz_> note that this is a good example of why junctions shouldn't be abused as sets

[12:51] <moritz_> right

[12:51] <pmichaud> *does

[12:51] <moritz_> it wants to be all($points) > 21

[12:52] <moritz_> but wins if any($points) == 21

[12:52] <moritz_> s:firstline/wants/wants to abort/

[12:53] <pmichaud> and I'm not sure the all() junction works out, anyway

[12:53] <pmichaud> rakudo:   say all(13|24) > 21;

[12:53] <p6eval> rakudo 0bf6cb: OUTPUT«all(any(Bool::False, Bool::True))␤»

[12:53] <moritz_> pmichaud: it would need to be a pure all() junction

[12:54] <moritz_> which is why it's a problem :-)

[12:54] <moritz_> and $points should really be a set or list, not a junction

[12:54] <pmichaud> right.

[12:56] *** qwebirc87970 joined
[12:56] *** am0c^ left
[12:57] <nymacro> My code seems to break if I try to change face cards to single letters

[12:57] <nymacro> as to why; I'm confused

[13:00] <nymacro> my @r=2..10,<ja qu ki ac>;my %v=ja=>10,qu=>10,ki=>10,ac=>1|11; workds

[13:00] <nymacro> but my @r=2..10,<j q k a>;my %v=j=>10,q=>10,k=>10,a=>1|11; does not.

[13:00] <pmichaud> maybe a space after the 'q'

[13:00] <pmichaud> so it doesn't think it's a q() construct.

[13:00] <nymacro> oh

[13:01] <nymacro> nope

[13:01] <nymacro> still does not work

[13:01] <pmichaud> maybe quotes around the q

[13:01] <nymacro> ahh, works now :)

[13:02] <nymacro> I'll need to look up the exact syntax of q

[13:02] <pmichaud> quotes shouldn't be needed there... but rakudo's predictor isn't as good as STD's.

[13:02] <moritz_> std: q=> 3

[13:02] <p6eval> std : OUTPUT«ok 00:01 115m␤»

[13:02] <moritz_> rakudo: q=> 3

[13:02] <p6eval> rakudo 0bf6cb:  ( no output )

[13:02] <moritz_> rakudo: say (q=> 3).perl

[13:02] <p6eval> rakudo 0bf6cb: OUTPUT«"q" => 3␤»

[13:03] <moritz_> rakudo: say (q => 3).perl

[13:03] <p6eval> rakudo 0bf6cb: OUTPUT«"q" => 3␤»

[13:03] <moritz_> rakudo: say (q=>3).perl

[13:03] <p6eval> rakudo 0bf6cb: OUTPUT«"q" => 3␤»

[13:03] <nymacro> rakudo: say (a=>1,q=>3).perl;

[13:03] <p6eval> rakudo 0bf6cb: OUTPUT«("a" => 1, "q" => 3)␤»

[13:03] * moritz_ confused

[13:03] <pmichaud> rakudo:  say (j=>10,q=>10,k=>10).perl;

[13:03] <p6eval> rakudo 0bf6cb: OUTPUT«("j" => 10, Bool::False)␤»

[13:03] <moritz_> oh

[13:04] <moritz_> only if another = is present

[13:04] * moritz_ submits rakudobug

[13:04] <masak> indeed. moritz_++

[13:04] *** sftp joined
[13:05] <pmichaud> std:  say (j=>10,q=>10,k=>10).perl

[13:05] <p6eval> std : OUTPUT«ok 00:01 118m␤»

[13:05] <pmichaud> well, that's still valid syntax I guess -- would need to see the parse

[13:05] <pmichaud> std:  say (j=>10,q=>10,k==10).perl

[13:05] <p6eval> std : OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤   'k' used at line 1␤Check failed␤FAILED 00:02 118m␤»

[13:06] <pmichaud> right, looks fine to me.

[13:07] <nymacro> just a precedence thing?

[13:07] <pmichaud> mainly, yes.

[13:07] <pmichaud> =>  is supposed to autoquote its lhs... but rakudo doesn't always get that right

[13:07] * moritz_ thinks it's more about LTM than precedence

[13:08] *** hercynium left
[13:09] <moritz_> submitted as [perl #78096]

[13:09] <nymacro> tadzik, got to 455 characters

[13:09] <nymacro> moritz_, at least something productive has come of this endeavour :)

[13:09] <tadzik> oh nice

[13:09] <nymacro> tadzik, but this is changin queen to q etc.

[13:09] *** ggoebel left
[13:10] <tadzik> ah

[13:11] <nymacro> so yours is probably still superior; albeit buggy

[13:13] <moritz_> .oO( it's easy to give the wrong answer in O(1), and with few characters)

[13:13] *** perlygatekeeper joined
[13:14] <pmichaud> rakudo:  my @deck = comb('23456789TJQKA') X~ comb('CDHS');  say @deck.perl;

[13:14] <p6eval> rakudo 0bf6cb: OUTPUT«Could not find sub &comb␤  in main program body at line 22:/tmp/0xksiKgSWu␤»

[13:15] <masak> oh, you wanted the *correct* answer! what are you, some kind of purist? :)

[13:15] <pmichaud> oh

[13:15] <pmichaud> rakudo:  my @deck = '23456789TJQKA'.comb X~ 'CDHS'.comb;  say @deck.perl;

[13:15] <p6eval> rakudo 0bf6cb: OUTPUT«["2C", "2D", "2H", "2S", "3C", "3D", "3H", "3S", "4C", "4D", "4H", "4S", "5C", "5D", "5H", "5S", "6C", "6D", "6H", "6S", "7C", "7D", "7H", "7S", "8C", "8D", "8H", "8S", "9C", "9D", "9H", "9S", "TC", "TD", "TH", "TS", "JC", "JD", "JH", "JS", "QC", "QD", "QH", "QS", "KC", "KD",

[13:15] <p6eval> .."KH",…

[13:16] <pmichaud> &comb appears to be missing, for any masak++ that wants to file another rakudobug  :-)

[13:16] * masak files another rakudobug

[13:17] <pmichaud>  our List multi comb ( Regex $matcher, Str $input, Int $limit = Inf )

[13:17] <pmichaud> (from S32-str)

[13:17] *** redicaps joined
[13:17] *** Patterner left
[13:17] <masak> by the way, I relish the thought of getting karma from being referred to as a concept. :)

[13:18] *** redicaps left
[13:18] <pmichaud> I think of it more as a type object, or placeholder :-)

[13:18] <masak> $^masak

[13:18] <pmichaud> right, but it needs the ++ sigil :)

[13:18] <masak> or Musak :P

[13:19] *** Psyche^ joined
[13:19] *** Psyche^ is now known as Patterner

[13:19] <moritz_> you know that sigils go up front?

[13:19] <moritz_> so it's a ++masak :-)

[13:19] *** icwiener joined
[13:19] <pmichaud> http://en.wikipedia.org/wiki/Muzak   # :-)

[13:19] * masak seems to spend a surprising amount of time on brand awareness lately

[13:19] <masak> not sure where this'll lead...

[13:20] <tadzik> nymacro: I still don't know what's broken :)

[13:21] <pmichaud> afk for a short while

[13:21] <nymacro> :)

[13:21] <tadzik> Maybe I'll take your new code and golf it, if it works

[13:21] <tadzik> ah, whatever :)

[13:21] <tadzik> golfed: ah, * :)

[13:22] <TiMBuS> rakudo: my @deck = 2..9,<T J Q K A> X~ <C D H S>;  say @deck.perl;

[13:22] <p6eval> rakudo 0bf6cb: OUTPUT«["2C", "2D", "2H", "2S", "3C", "3D", "3H", "3S", "4C", "4D", "4H", "4S", "5C", "5D", "5H", "5S", "6C", "6D", "6H", "6S", "7C", "7D", "7H", "7S", "8C", "8D", "8H", "8S", "9C", "9D", "9H", "9S", "TC", "TD", "TH", "TS", "JC", "JD", "JH", "JS", "QC", "QD", "QH", "QS", "KC", "KD",

[13:22] <p6eval> .."KH",…

[13:22] <tadzik> rakudo: say "ah, {*.WHAT}

[13:22] <nymacro> tadzik, http://git.nymacro.com/?p=h.git;a=blob_plain;f=bjgolfmin.p6;hb=HEAD

[13:22] <p6eval> rakudo 0bf6cb: OUTPUT«===SORRY!===␤Confused at line 22, near "say \"ah, {"␤»

[13:22] <tadzik> rakudo: say "ah, {*.WHAT}"

[13:22] <p6eval> rakudo 0bf6cb: OUTPUT«ah, Whatever()␤»

[13:22] <masak> :)

[13:23] <masak> rakudo: say "ah, ", *.WHAT.perl.lc, '!"

[13:23] <p6eval> rakudo 0bf6cb: OUTPUT«===SORRY!===␤Confused at line 22, near "say \"ah, \""␤»

[13:23] <masak> erg

[13:23] <masak> rakudo: say "ah, ", *.WHAT.perl.lc, '!'

[13:23] <p6eval> rakudo 0bf6cb: OUTPUT«ah, whatever!␤»

[13:26] <pmichaud> rakudo:  say (*).elems;   # curious

[13:26] <p6eval> rakudo 0bf6cb: OUTPUT«_block124␤»

[13:26] <pmichaud> I didn't expect _that_.

[13:27] <pmichaud> seems to me that * in parens shouldn't curry.

[13:27] <jnthn> rakudo: say *.elems

[13:27] <p6eval> rakudo 0bf6cb: OUTPUT«_block124␤»

[13:27] <pmichaud> I do expect *.elems to curry, yes.

[13:28] <jnthn> pmichaud: I suspect it does curry for the same reason * * (* - *) curries

[13:28] <pmichaud> jnthn: that's actually different

[13:28] <jnthn> (that is, in the implementation)

[13:28] <jnthn> (not in the spec)

[13:28] <pmichaud> (* - *) is a WhateverCode

[13:28] <pmichaud> not the same as (*)

[13:28] <jnthn> I agree, it's just from what I remember of the impl I could see how the two may just get confused.

[13:29] <pmichaud> I suspect it's an issue with things being promoted out of the circumfix:<( )>

[13:29] <jnthn> Right.

[13:29] <pmichaud> rakudo:  my $x = *;   say $x.elems;  # what I was really interested in

[13:30] <p6eval> rakudo 0bf6cb: OUTPUT«1␤»

[13:30] <jnthn> :-)

[13:30] <pmichaud> following the ",*" discussion, I'm wondering if that should be Inf

[13:30] <jnthn> At least the = doesn't curry ;-)

[13:30] <pmichaud> and:   my $x = *;  say $x[1000].WHAT;   # should this also produce a Whatever?

[13:31] <moritz_> pmichaud: I'd expect ,Inf to append a single Inf numeric literal

[13:31] <moritz_> whereas * is more magic

[13:31] <pmichaud> moritz_: that's not what I meant

[13:31] <pmichaud> I'm wondering if   Whatever.elems  should return Inf instead of 1

[13:31] <moritz_> ah

[13:32] * moritz_ has no idea

[13:32] <pmichaud> i.e.,  if the term "*" treated like a list actually acts like  "Whatever xx Inf"

[13:32] <pmichaud> especially since we don't have an easy way to write  * xx Inf    :-P

[13:32] <pmichaud> best we can do is:   my $x = *;  $x xx Inf

[13:33] *** bluescreen left
[13:33] <pmichaud> (unless we fix the parens issue, which I'm not sure is spec)

[13:34] <masak> haven't seen anything about that.

[13:34] <masak> shouldn't parens mostly be semantically transparent?

[13:34] <pmichaud> yes, but *.xyz   is a syntactic construct

[13:34] <masak> fair enuf.

[13:35] <moritz_> cosimo: http://my.opera.com/cstrep/blog/2010/09/24/survival-guide-to-utf-8 accidentally turns some parens into a smile (search for 'use Encode')

[13:39] <tadzik> nymacro: 444 and works :)

[13:39] <nymacro> nice :)

[13:39] * masak tries to avoid that kind of automatic substitution in blog post

[13:39] <masak> don't like it in Word-like programs either.

[13:39] <masak> feels like the wrong kind of "intelligence".

[13:39] <tadzik> even shorter if Winner and results is in one line

[13:39] <moritz_> masak: same here; it's always the first thing I switch off, if possible

[13:40] *** ggoebel joined
[13:43] <daxim> I really dislike the ahinea article, it rubs me all the wrong way

[13:44] <masak> moritz_: one especially bad case of such substitution made a little icon of the ';' at the end of (autogenerated) HTML entities and any subsequent ')'. resulting in a broken entity and a winking smiley.

[13:44] <tadzik> nymacro: http://gist.github.com/601011 441 and I'm out of ideas :)

[13:45] <nymacro> nice

[13:45] <tadzik> star today?

[13:46] <moritz_> tadzik: my @d = map { ... }, ...; @d.=pick(*)

[13:46] <moritz_> tadzik: can be condensed to my @d = map(....).pick(*)

[13:46] <tadzik> right

[13:46] <moritz_> saves 2 strokes :-)

[13:47] <tadzik> 438 here

[13:47] <tadzik> so even 3 :)

[13:47] <moritz_> $_~' is over 21'  could be "$_ is over 21"

[13:47] <moritz_> 1 saved

[13:48] <tadzik> :)

[13:48] <moritz_> .&b  is shorter than b($_)

[13:48] <tadzik> oh, I didn't know that one :)

[13:49] <moritz_> rakudo: sub u($x) { uc $x }; for <a b c> { .&u.say }

[13:49] <p6eval> rakudo 0bf6cb: OUTPUT«A␤B␤C␤»

[13:49] <gottreu> is this for rosetta code, or are we just practicing our putts?

[13:49] <tadzik> I just got another one

[13:49] <tadzik> say b($_); say ~$_ → say b($_),"\n$_";

[13:49] <pmichaud> rakudo:  for <a b c> { .uc.say }

[13:49] <p6eval> rakudo 0bf6cb: OUTPUT«A␤B␤C␤»

[13:49] <pmichaud> still shorter -- don't need the u()  :-P

[13:50] * moritz_ slaps pmichaud, just a little bit

[13:50] <tadzik> so 424

[13:51] <tadzik> how does .&b work?

[13:51] <tadzik> it's an idiom for b($_) specifically?

[13:52] <moritz_> it's actually $_.$coderef

[13:52] <jnthn> oh wow, neat idiom :-)

[13:52] <jnthn> That's...disgusting. I love it. :-)

[13:53] <moritz_> and exploits that methods are really just subs with invocant as first parameter

[13:53] <moritz_> but the invocant isn't really special

[13:55] <pmichaud> jnthn: TimToady had the same reaction, iirc :)

[13:55] *** tadzik left
[13:56] <pmichaud> but it does mean that where we had once wanted "fallback methods" we don't really need them.

[13:56] <pmichaud> for example,  sub prime($x) { ... };    if  $y.&prime { ... }

[13:57] <masak> exactly.

[13:57] <pmichaud> or, more likely:    sub prime($x) { ... };   .say if .&prime for @list;   # or something like that

[13:57] <masak> since I became aware of that idiom, I've been using it all over.

[13:58] <masak> it's a real freedom to be able to method-ize subs like that.

[13:58] *** kaare_ left
[13:59] <moritz_> pmichaud: I think the real reason for fallback methods were non-lifted, overloaded operators

[14:03] <pmichaud> moritz_: .prime was the poster candidate for fallback methods.

[14:04] <masak> someone on reddit suggests that we put http://gil.di.uminho.pt/users/smash/rakudo-bench.html on the rakudo.org status page.

[14:04] <pmichaud> do we have a way of generating those and keeping them up to date?

[14:05] <pmichaud> if no, then I say don't do it until we do :)

[14:05] <masak> good point.

[14:05] <moritz_> speaking of the status page, we should remove that spectest graph

[14:07] <pmichaud> +1

[14:08] <moritz_> pmichaud: it seems the last version of R* checked out a copy of the spectets via svn

[14:08] <moritz_> it would be great to avoid that in this release

[14:09] <pmichaud> I can bundle a copy of the tests, like we do for the compiler distribution.

[14:09] <moritz_> +1

[14:10] <masak> +1

[14:10] <PerlJam> good morning #perl6

[14:10] *** mavrc left
[14:10] <moritz_> morning' 6Jam

[14:11] <PerlJam> anything new or exciting happen while I haven't been paying too close attention the last week or so? 

[14:11] <PerlJam> oh!  When's the R* release?

[14:12] <moritz_> today

[14:12] * jnthn decommutes

[14:12] <PerlJam> ah

[14:12] <moritz_> rakudo: .so.say for 0, 1

[14:13] <p6eval> rakudo 0bf6cb: OUTPUT«Bool::False␤Bool::True␤»

[14:13] <masak> PerlJam: 'series operator' is now called 'sequence operator'

[14:13] <moritz_> warn 1 # note the line number

[14:13] <moritz_> rakudo: warn 1 # note the line number

[14:13] <p6eval> rakudo 0bf6cb: OUTPUT«1  in <anon> at line 22:/tmp/1bpRq0Vi2f␤»

[14:13] <moritz_> (amd file name)

[14:14] <moritz_> rakudo: 1 + Any # a non-setting line number

[14:14] <p6eval> rakudo 0bf6cb: OUTPUT«Use of uninitialized value in numeric context  in <anon> at line 22:/tmp/CRq42b2jaH␤»

[14:14] <masak> PerlJam: also, we're all crazy about the new idiom $some-obj.&some-sub()

[14:14] <PerlJam> masak: good to note.  I'll probably continue to mistakenly say "series op" for a while though  :)

[14:15] <masak> PerlJam: oh, me too.

[14:15] <PerlJam> masak: you could have stopped at "we're all crazy"  ;-)

[14:15] <masak> PerlJam: I've recently been looking at this old blog post, where I quote you saying to me "clearly, you're insane" :P http://strangelyconsistent.org/blog/the-taming-of-the-newbie-a-comedy-on-irc

[14:16] <masak> (I did deserve it, that time)

[14:16] *** mavrc joined
[14:19] *** miso_soup joined
[14:19] <PerlJam> We all have some measure of insanity otherwise we wouldn't believe in Perl 6.  The trick is to foster the "good insanity" (aka genius) while eschewing the "bad insanity"

[14:20] <nymacro> this is true; I don't know anyone worth knowing who isn't at least slightly insane

[14:22] <masak> lately I haven't been able to connect the gears turning in my brain to actual changes in my existing Perl 6 code. may or may not be related to actually getting more $WORK done lately.

[14:22] <moritz_> straw poll: who has met a normal person?

[14:25] <PerlJam> normal to what surface? :)

[14:26] *** mkramer joined
[14:27] *** qwebirc87970 left
[14:27] *** ggoebel left
[14:29] *** patspam joined
[14:29] <masak> PerlJam: *groan*

[14:29] *** HarryS joined
[14:30] <mathw> normal by what standard?

[14:31] <moritz_> ISO-1337-1 :-)

[14:33] *** wtw left
[14:33] <masak> moritz_: I take your point fully, but I'm not sure "normal" is such an abstract, non-instantiable concept far enough outside of certain circles... say, geekdom, or academia.

[14:33] <gottreu> DSM-IV-TR ?

[14:34] *** patspam left
[14:34] <masak> might be we're simply blessed with the relative absence of normal people 'round here :P

[14:34] <PerlJam> depends.

[14:35] <moritz_> masak: hmm. My mother is a psychologist, and she is often asked "am I normal?". It made me think about possible answers

[14:35] *** mavrc left
[14:35] <PerlJam> If we start with the premise that TimToady it normal ... it's the rest of the world that's insane.

[14:35] <PerlJam> s/it/is/

[14:35] <PerlJam> oops,  s:2nd/it/is/ actually

[14:35] <masak> moritz_: I agree that it's more of a fuzzy ideal. the question is more whether it's something a person consciously/unconsciously strives for or not.

[14:36] <masak> Camelia "super cute". http://twitter.com/dcbaok/status/25789177100

[14:36] *** mfollett joined
[14:36] <PerlJam> squeak has a mascot?

[14:37] *** fIorz left
[14:37] <masak> PerlJam: http://www.squeak.org/

[14:37] <masak> looks like a cat.

[14:37] <PerlJam> yes, I'm looking at it

[14:37] <moritz_> I guess many people would answer "no" to the question whether they are "normal", and be shocked when asked if they are abnormal :-)

[14:37] <masak> oh wait. it's a mouse!

[14:37] <PerlJam> and it does look like a cat rather than a mouse to me too

[14:37] <masak> (of course, duh)

[14:38] *** florz joined
[14:38] <masak> moritz_: every time I hear the word "abnormal", I think of Young Frankenstein... :)

[14:39] <moritz_> :-)

[14:39] <masak> http://www.imdb.com/title/tt0072431/quotes?qt0504329

[14:42] <masak> whoa -- someone on github read ".pick and .roll" as ".rick and .roll" -- how did we ever miss that? :P

[14:42] * moritz_ didn't, but doesn't particular care about that meme

[14:43] *** mavrc joined
[14:43] <masak> nod. I'm not sure I grok that meme, actually.

[14:44] <moritz_> it's something I only saw at xkcd, and occasionally parrotted by others

[14:44] <nymacro> never gonna give you up...

[14:46] * masak reads up using http://knowyourmeme.com/memes/rickroll

[14:48] *** ggoebel joined
[14:49] *** HarryS left
[14:49] <moritz_> somehow that still fails to fascinate me

[14:51] <nymacro> yeah, it was never truly funny

[14:53] *** alext_ left
[14:53] <masak> watch out for the False Memes in our midst.

[14:56] <moritz_> wolf meme in sheep's skin?

[14:56] *** daxim left
[14:57] *** paul1234 joined
[14:57] *** paul1234 left
[14:59] <masak> rakudo: sub wolf { say "om nom nom" }; sub sheep { say "baah!"; callsame }; &wolf.wrap(&sheep); wolf()

[15:00] <p6eval> rakudo 0bf6cb: OUTPUT«baah!␤om nom nom␤»

[15:01] <masak> rakudo: sub wolf { say "om nom nom" }; sub sheep { say "baah!"; callsame }; say (&wolf.wrap(&sheep)).WHAT

[15:01] <p6eval> rakudo 0bf6cb: OUTPUT«Int()␤»

[15:01] <masak> Int? o.O

[15:01] <masak> rakudo: sub wolf { say "om nom nom" }; sub sheep { say "baah!"; callsame }; say (&wolf.wrap(&sheep))

[15:01] <p6eval> rakudo 0bf6cb: OUTPUT«2␤»

[15:01] * masak consults ze spec

[15:01] <moritz_> isn't it callnext() ?

[15:02] <masak> there's no callnext

[15:02] <moritz_> hm

[15:02] <moritz_> nextsame

[15:02] <masak> there's callsame, nextsame, callwith and nextwith

[15:02] <masak> if it's last, it doesn't really matter, does it?

[15:02] <masak> except maybe in how the call stack looks along the way.

[15:02] <TimToady> and lastcall

[15:03] *** daxim joined
[15:03] <moritz_> ... to brooklyn?

[15:03] <TimToady> rakudo: say 42.so

[15:03] <p6eval> rakudo 0bf6cb: OUTPUT«Bool::True␤»

[15:03] <TimToady> rakudo: say 42.not

[15:03] <p6eval> rakudo 0bf6cb: OUTPUT«Method 'not' not found for invocant of class 'Int'␤  in main program body at line 22:/tmp/M6CA84i5kB␤»

[15:04] * TimToady wanted .=not for a rosettacode...

[15:04] *** jferrero left
[15:04] <masak> S06:2685 says "The call to C<.wrap> returns a unique handle that has a C<restore> method that will undo the wrapping"

[15:04] <colomon> .=not ?

[15:04] <masak> hence, it cannot be an Int.

[15:04] * masak submits rakudobug

[15:04] <moritz_> TimToady: patching it in right now... it'll just take hours to complete the spectest run :-)

[15:05] <masak> don't we have a TODO RT ticket for .not already?

[15:05] <TimToady> oh, well, then, we can't fix it yet

[15:05] <colomon> ah, .not

[15:05] <moritz_> masak: I think we had one, and I closed it over-eagerly

[15:05] <masak> huh.

[15:05] <moritz_> masak: it covered .so and .not, and I implemented .so

[15:05] <masak> huh.

[15:06] * colomon is still very slow on the uptake this morning

[15:06] <masak> doesn't sound like you, moritz_.

[15:06] <TimToady> the .not was .so.so

[15:06] <masak> :)

[15:06] <moritz_> masak: if you knew me a bit better in real life, you wouldn't say that :-)

[15:07] <moritz_> ss/real life/meatspace/ # #perl6 is real too

[15:07] <masak> was just going to point that out. :)

[15:07] <TimToady> s/meatspace/carnisphere/

[15:07] <moritz_> :-)

[15:07] <masak> moritz_: the only thing I'm surprised at when we meet is that you have a German accent. you don't have that on IRC :)

[15:07] <TimToady> or may "somasphere" would be less root-mixy

[15:08] * masak likes "somasphere"

[15:08] <masak> very Huxley.

[15:08] <moritz_> TimToady: "somasphere" makes me think of the drug... right

[15:08] <moritz_> masak: :-)

[15:08] <moritz_> masak: next time I'll try harder to dig out my scottish accent :-)

[15:08] <masak> och aye!

[15:10] <moritz_> just a wee bit of accent with rolled rrrrs, and mis-pronounced vowels

[15:11] <moritz_> t/spec/S02-builtin_data_types/instants-and-durations.t sometimes fails for me

[15:13] <dalek> rakudo: bd836a4 | moritz++ | src/ (2 files):

[15:13] <dalek> rakudo: give TimToday++ his Mu.not

[15:13] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/bd836a4a63bd51f52c1ebdfeb12ea9dd0925140c

[15:13] *** miso_soup left
[15:17] *** jferrero joined
[15:18] <mfollett> Which synopsis is .so covered in?

[15:18] <moritz_> probably S02

[15:18] <moritz_> or S32/$something

[15:20] *** ruoso joined
[15:21] *** olgagirl joined
[15:21] <colomon> moritz_: why the grammar change for .not?

[15:21] *** olgagirl left
[15:21] <mfollett> moritz_: thanks

[15:21] <moritz_> colomon: ho, I didn't mean to commit that. Thanks for telling me

[15:22] <moritz_> moritz-- # git commit -a  without checking git diff first

[15:22] <colomon> review++

[15:22] <masak> colomon++

[15:24] <moritz_> as you might guess, I have experimented with parsing ss///

[15:24] <moritz_> parsing it is easy; doing something with it in a non-convoluted manner is not

[15:25] <dalek> rakudo: 6241883 | moritz++ | src/Perl6/Grammar.pm:

[15:25] <dalek> rakudo: Revert accidental grammar change from bd836a4a

[15:25] <dalek> rakudo: 

[15:25] <dalek> rakudo: moritz--, and colomon++ for noticing

[15:25] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/62418835ec1a67095bdc0253f7a27c53f2244a49

[15:26] *** Ross joined
[15:31] *** mavrc left
[15:40] *** mavrc joined
[15:42] *** nymacro left
[15:43] <masak> here's a thing I didn't know before today about RSS and Atom feeds: most blogs don't keep a full history around in them, but only the last 10 or 20 entries.

[15:43] <masak> while the remark might *sound* off-topic, recall that I'm currently writing a static blog generator in Perl 6. :P

[15:45] <moritz_> btw there's a concepttual problem with RSS, and a good reason to prefer Atom

[15:45] <moritz_> it's that RSS has no way to declare the mime type of the content

[15:45] <masak> good news: I'm going with Atom already.

[15:45] <moritz_> so the client has to guess if it's HTML or text

[15:45] <moritz_> good

[15:45] <masak> I have heard something similar at some point.

[15:46] <masak> the only thing that seems to keep RSS in business is inertia and cargo-culting.

[15:46] * moritz_ is guilty of both

[15:46] *** LionMadeOfLions left
[15:47] <moritz_> decommute&

[15:47] <szbalint> masak++ # I don't want to rant about how RSS is broken and why, but it annoys me greatly.

[15:47] <masak> no need to rant, I think. just use Atom.

[15:48] <szbalint> moritz_: I ran into the mime type issue when refactoring the IronMan feed.

[15:50] *** synth left
[15:50] *** synth joined
[15:57] <jnthn> masak: ooc, is there still an unwrap method spec'd?

[15:57] *** justatheory joined
[15:57] <daxim> Atom is able to older entries in a seperate feed, donchaknow

[15:57] * jnthn doesn't recall restore method on handles at all from when he last worked on wrap stuff, which was, granted, a year or so ago.

[15:57] <masak> jnthn: don't know. but (as I wrote in the RT ticket), there's a .restore method spec'd on the handle returned from .wrap

[15:58] <masak> jnthn: which IMO makes more sense than a generic .unwrap method

[15:58] <jnthn> Well, the .unwrap method took the handle.

[15:58] * masak checks the spec

[15:58] <jnthn> But yeah, if you have the handle it probably does make some more sense.

[15:58] <daxim> RFC 5005

[15:58] <jnthn> Maybe a spec twiddle. :-)

[15:58] <daxim> this is for you, moritz_

[15:59] <masak> jnthn: there's only a fossil left in S32/Callable

[15:59] <masak> I say ditch .unwrap completely, and let the user keep the handle if she wants to unwrap later.

[16:00] *** mkramer left
[16:00] <jnthn> wfm

[16:00] <jnthn> Having both feels a bit surplus to requirements.

[16:01] <masak> also, the greater safety of handles and .restore kinda makes .unwrap feel like a reckless alternative.

[16:02] <masak> .unwrap is a steamroller to .restore's origami :)

[16:02] *** risou joined
[16:04] <jnthn> masak: I don't think there was ever a handleless .unwrap that assumed "just do the last wrapper" but maybe there was. :-)

[16:04] <jnthn> If there was, it's certainliy the way to fragility though.

[16:05] <masak> oh, ok. maybe I'm imagining that, then.

[16:05] *** drbean left
[16:05] <masak> anyway, .restore seems sufficient.

[16:06] <PerlJam> What about having an .unwrap with .restore's semantics (i.e., rename .restore to .unwrap)?

[16:06] <PerlJam> the wrap/unwrap dichotomy seems better than wrap/restore to me

[16:07] <masak> wfm

[16:07] *** mavrc left
[16:07] <masak> though the natural objection would probably be that it's not the handle that's being .unrap'd

[16:07] <masak> s/unrap/unwrap/

[16:07] <PerlJam> true

[16:09] <PerlJam> what type is the handle?

[16:09] *** drbean joined
[16:10] <masak> Int, apparently :P

[16:10] <PerlJam> and what else can you do with a handle besides .restore/

[16:10] <PerlJam> ?

[16:11] <masak> no idea.

[16:11] <masak> nothing comes to mind.

[16:12] <masak> .unrestore, perhaps... :)

[16:12] <masak> or should that be, .rewrap?

[16:12] <masak> s/,//

[16:14] *** drbean left
[16:16] *** daxim left
[16:18] *** drbean joined
[16:22] <masak> see you at #phasers. nom &

[16:22] *** masak left
[16:30] <PerlJam> If the do property of Routines was an array where only the "top" item was actually executed, then we wouldn't need .wrap or .restore and I think callsame, callwith, nextsame, nextwith would just work

[16:30] <PerlJam> er ... that's not right.

[16:31] <PerlJam> but something like that could be made to work perhaps

[16:33] <moritz_> then Routine.wrap and .unwrap would just delegate to .shift and .unshift on the array

[16:35] *** mkramer joined
[16:35] *** stkowski joined
[16:41] <jnthn> PerlJam: I did in 6model play with exactly that.

[16:41] <jnthn> Every invokable thingy had a think to invoke + a candidate list.

[16:41] <jnthn> *thing

[16:42] <jnthn> Not sure if it'll stick or not.

[16:42] <jnthn> (Quite possibly not, but it's an interesting idea to play with.)

[16:42] <sjohnson> yo jnthn how goes it today

[16:42] <jnthn> sjohnson: I'm a little sleepy but otherwise fine. :-)

[16:42] <jnthn> You?

[16:43] <sjohnson> good just obsessing about crpytography

[16:43] <sjohnson> my new obsession

[16:43] <sjohnson> :)

[16:43] <TimToady> rakudo: False || die "oops"  # can't believe this still doesn't short circuit...

[16:43] <p6eval> rakudo 0bf6cb: OUTPUT«oops␤  in main program body at line 22:/tmp/p2LvF9It1g␤»

[16:45] <TimToady> er...

[16:45] <TimToady> rakudo: True || die "oops"

[16:45] <jnthn> wtf

[16:45] <p6eval> rakudo 0bf6cb:  ( no output )

[16:45] <moritz_> :-)

[16:45] <TimToady> nevermind

[16:45] <jnthn> :-)

[16:45] <moritz_> I think it's // that doesn't short circuit

[16:45] * TimToady is a space case this morning

[16:45] * jnthn hands TimToady++ another cup of coffee

[16:45] <moritz_> rakudo: 1 // say("foohoo")

[16:45] <p6eval> rakudo 0bf6cb:  ( no output )

[16:45] <jnthn> I'm pretty sure // does

[16:45] <moritz_> rakudo: my $x = 1; $x  //= say("foohoo")

[16:45] <jnthn> It's the //= form that I think we have bovva with.

[16:46] <p6eval> rakudo 0bf6cb: OUTPUT«foohoo␤»

[16:46] <moritz_> right

[16:51] *** proller left
[16:53] <moritz_> rakudo: my $x = hash <Jan Feb Mar> Z 1..12; say $x.perl

[16:53] <p6eval> rakudo 0bf6cb: OUTPUT«{"Jan" => 1, "Feb" => 2, "Mar" => 3}␤»

[16:59] *** dakkar left
[17:00] *** LionMadeOfLions joined
[17:02] *** xabbu42 left
[17:05] *** jfried joined
[17:08] *** flussence_ joined
[17:09] *** flussence left
[17:09] *** flussence_ is now known as flussence

[17:11] *** ash_ joined
[17:14] <dalek> sprixel: f40e10c | diakopter++ | sprixel/src/compiler/ (2 files):

[17:14] <dalek> sprixel: bit of cleanup

[17:14] <dalek> sprixel: review: http://github.com/diakopter/sprixel/commit/f40e10cfef7c421f76f14ed9c43a6116337f4d15

[17:17] <ash_> jnthn: do you why you'd get a P6Invocation on accident? or what to do with a P6Invocation? 

[17:17] <ash_> > class A { method b { 1 } }; A.can('b');

[17:17] <ash_> ===SORRY!===

[17:17] <ash_> get_string() not implemented in class 'P6Invocation'

[17:18] *** rurban joined
[17:19] <jnthn> ash_: Generally, invoke it or iterate with it.

[17:19] <jnthn> I'm not sure that A.can('b') can return the method.

[17:19] <jnthn> Though it probably wants to return something that can invoke the first candidate in the result set.

[17:19] <ash_> should that throw an error or something then? 

[17:19] <jnthn> Well, it shouldn't do whatever it's doing there...

[17:20] <moritz_> jnthn: why can't it return the same object that .^methods.grep($some_test) would return?

[17:20] <jnthn> That'd return a list.

[17:20] <jnthn> However, it'd probably not give you any deferal semantics.

[17:20] <ash_> rakudo: class A { method b { 1 } }; say A.^methods.grep: { $_ eq 'b' }

[17:20] <moritz_> then slap a .[0] on

[17:21] <p6eval> rakudo 624188: OUTPUT«b␤»

[17:21] <moritz_> rakudo: class A { method b { 1 } }; say A.^methods.grep('b').[0].WHAT

[17:21] <p6eval> rakudo 624188: OUTPUT«Method()␤»

[17:21] <jnthn> moritz_: That is tempting.

[17:21] <jnthn> But it may mean folks don't get deferal.

[17:22] <moritz_> deferal?

[17:22] <jnthn> nextsame and friends.

[17:22] <jnthn> They rely on there being a dispatcher providing the candidate list.

[17:22] <moritz_> hm, right

[17:22] <jnthn> Just grepping out a bunch of method objects and then invoking the first one does not make the rest of them the candidate list.

[17:23] <jnthn> In fact, doing a sub-ish invocation of a method object is probably never going to give you working deferal.

[17:23] <moritz_> right

[17:23] <jnthn> Because it totally bypasses running the method dispatcher.

[17:23] <ash_> does that mean .^methods is doing something wrong too? or that .can needs to be smarter? 

[17:23] <jnthn> ash_: No, .^methods is fine

[17:23] <jnthn> Well, we could choose that .can ain't all that smart either.

[17:24] <jnthn> "If you want to do a method dispatch, well, do one dammit."

[17:24] <moritz_> more to the point, I'd love to .can to return something that can do deferal, and internally wrap the candidate list

[17:24] <jnthn> Well, yeah

[17:24] <jnthn> P6invocation is basically a curried method dispatchrer.

[17:24] <moritz_> it's not always that easy

[17:24] <ash_> well

[17:24] <ash_> also

[17:24] <ash_> rakudo: say "Str".can('split') 

[17:24] <ash_> works 

[17:24] <p6eval> rakudo 624188: OUTPUT«split␤»

[17:24] <jnthn> e.g. invoking it is not *really* invoking the first thing in the list.

[17:25] <jnthn> It's invoking a method dispatcher, which in turn runs the first thing in the list.

[17:25] <ash_> it only gives the P6Invocation when you use a class you make (i think) 

[17:25] <jnthn> Oh, I know what's going on...

[17:25] <jnthn> It provides .Str but probably not a get_string v-table.

[17:25] <ash_> rakudo: my $a = "Str".can('say'); $a.()

[17:25] <p6eval> rakudo 624188: OUTPUT«Not enough positional parameters passed; got 0 but expected 1␤  in 'Mu::say' at line 1228:CORE.setting␤  in main program body at line 22:/tmp/jRv4l9olVw␤»

[17:26] <jnthn> ash_: Needs an invocant passing still.

[17:26] <moritz_> right; lonely .say misses its invcant!

[17:26] <ash_> rakudo: my $a = "Str".can('say'); $a.assuming("Str"); $a.(); 

[17:26] <p6eval> rakudo 624188: OUTPUT«Not enough positional parameters passed; got 0 but expected 1␤  in 'Mu::say' at line 1228:CORE.setting␤  in main program body at line 22:/tmp/iBT46ukbj2␤»

[17:26] <diakopter> rakudo: my $a = "Str".can('say'); $a.($a)

[17:26] <ash_> hmmm

[17:26] <jnthn> .oO( I wonder if we're actually going to need a v-table of curried dispatchers... )

[17:26] <p6eval> rakudo 624188: OUTPUT«say␤»

[17:27] <jnthn> All this curry talk is making me hungry.

[17:27] <dalek> sprixel: cf36d17 | diakopter++ | sprixel/src/compiler/ (2 files):

[17:27] <dalek> sprixel: rename temporarily; stupid TortoiseGit (or git) not handling Windows case-insensitive filenames.

[17:27] <dalek> sprixel: review: http://github.com/diakopter/sprixel/commit/cf36d176744eda8b87abd4f13dc48c14b580f4ee

[17:27] <dalek> sprixel: ae54de5 | diakopter++ | sprixel/src/compiler/Env (2 files):

[17:27] <dalek> sprixel: rename it back

[17:27] <dalek> sprixel: review: http://github.com/diakopter/sprixel/commit/ae54de5977386bf0d054061d4f8ac3cde383b7e4

[17:27] <ash_> lol

[17:28] <jnthn> diakopter: Heh, glad it wasn't just me who coudln't find a better way... :-)

[17:28] <ash_> curry is great, i like thai green curry, but there aren't any restaurants near by with it :-( 

[17:28] <jnthn> Aww.

[17:28] <diakopter> jnthn: you use TortoiseGit?

[17:28] <jnthn> diakopter: No, command line git

[17:28] <diakopter> oh

[17:28] <jnthn> diakopter: But when faced with the same problem, I ended up doing the same.

[17:29] <jnthn> e.g. I think it's an underlying git on Windows thing rather than Tortoise's fault.

[17:29] <diakopter> yeah

[17:29] *** stkowski left
[17:30] *** jferrero left
[17:31] *** stkowski joined
[17:32] <ash_> jnthn: so you know why some methods don't work with .can? just curios, i filed a bug report for it too

[17:32] <ash_> i tried tracking it down, but it was a bit beyond me

[17:34] <jnthn> Well, the error you saw is probably that get_string ain't implemented in P6invocation

[17:34] <jnthn> (in src/pmc/

[17:34] <jnthn> The deeper problem is that it's a PMC rather than a real Perl 6 object.

[17:35] <jnthn> It's harder to do too much about at the moment.

[17:35] <ash_> rakudo: say 'foo'.can('split'); # works though, is that not also a P6Invocation? 

[17:35] <p6eval> rakudo 624188: OUTPUT«split␤»

[17:35] <ash_> i guess my confusion is why do some class methods work and other not? 

[17:38] <moritz_> maybe it's related to classes defined in PIR vs. Perl 6?

[17:38] <moritz_> rakudo: say Cool.new.can('Num')

[17:38] <p6eval> rakudo 624188:  ( no output )

[17:39] <moritz_> rakudo: say Cool.can('Num')

[17:39] <p6eval> rakudo 624188: OUTPUT«Num␤»

[17:39] <moritz_> or type object vs. instance?

[17:39] <moritz_> rakudo: class A { method b() { } }; say A.new.can('b')

[17:39] <p6eval> rakudo 624188:  ( no output )

[17:39] <ash_> rakudo: class A { method b { 1 } }; say A.new.can('b');

[17:39] <p6eval> rakudo 624188:  ( no output )

[17:39] <ash_> lol

[17:39] <ash_> oops

[17:40] <ash_> rakudo: class A { method b { 1 } }; my $a = A.new; say $a.can('b').($a);

[17:40] <p6eval> rakudo 624188: OUTPUT«1␤»

[17:40] <ash_> rakudo: class A { method b { 1 } }; my $a = A.new; say $a.can('b')

[17:40] <p6eval> rakudo 624188:  ( no output )

[17:40] <ash_> hmm

[17:46] *** Entonian joined
[17:52] *** mavrc joined
[17:59] *** ash_ left
[18:03] *** rurban left
[18:05] *** cdarroch joined
[18:05] *** cdarroch left
[18:05] *** cdarroch joined
[18:07] <sorear> good * #perl6!

[18:08] <colomon> o/

[18:08] <moritz_> \ö

[18:08] <colomon> moritz_: what's that on your head?

[18:09] <moritz_> colomon: bear ears :-)

[18:09] *** kjeldahl left
[18:10] *** timbunce left
[18:14] *** envi left
[18:18] *** timbunce joined
[18:23] *** M_o_C joined
[18:28] *** mberends joined
[18:33] <dalek> sprixel: 8b0285b | diakopter++ | sprixel/ (3 files):

[18:33] <dalek> sprixel: delete old Messages.Designer.cs

[18:33] <dalek> sprixel: review: http://github.com/diakopter/sprixel/commit/8b0285b7deecd687adc1ec33f100f03837f74f22

[18:33] <dalek> sprixel: e6cc675 | diakopter++ | sprixel/codegen/RunSharp/Properties/Messages.Designer.cs:

[18:33] <dalek> sprixel: re-add Messages.Designer.cs

[18:33] <dalek> sprixel: review: http://github.com/diakopter/sprixel/commit/e6cc67570059a0df13b3f569173edfa5149cefaf

[18:33] <dalek> sprixel: 4bf7cb2 | diakopter++ | sprixel/sprixel.csproj:

[18:33] <dalek> sprixel: fixup .csproj

[18:33] <dalek> sprixel: review: http://github.com/diakopter/sprixel/commit/4bf7cb214fd0f6111709a491c8dadb5401f039f2

[18:33] <sorear> \o/ test.pl runs to completeion

[18:33] *** risou left
[18:33] *** risou joined
[18:34] <mberends> diakopter: nice to see you're playing with Sprixel again :)

[18:34] <mberends> jnthn: halp pleas

[18:34] <sorear> hi mberends!

[18:34] <mberends> hi sorear! you're very busy too!

[18:39] *** masak joined
[18:40] *** timbunce left
[18:43] *** mavrc left
[18:44] *** tadzik joined
[18:44] *** rindolf joined
[18:44] <rindolf> Hi all. Does anyone have any comments about http://perl-begin.org/learn/perl6/ ?

[18:46] *** masak left
[18:46] *** mavrc joined
[18:46] <tadzik> I'd sneak some "Perl 6 is not Perl 5" somewhere in the last part

[18:47] <flussence> s/\.\././ ?

[18:47] *** masak joined
[18:47] <tadzik> also, perl6.org/documentation has now pretty nice content, and a bit friendlier to, so it's a nice place to link to

[18:47] *** masak left
[18:47] <flussence> (two dots at the end of a sentence sticks out to me like a sore thumb, I've never understood why)

[18:48] <flussence> apart from that, it looks well-written

[18:50] <diakopter> rakudo: sub a(Int, Str; Int) { };

[18:51] <rindolf> flussence: where do you see that?

[18:51] <diakopter> moritz_: ^^ :)

[18:51] <flussence> rindolf: middle of the second-to-last section thing

[18:51] <p6eval> rakudo 624188: OUTPUT«(timeout)»

[18:52] <flussence> ...did someone raise the timeout on p6eval recently? that one took a while.

[18:52] * diakopter does not know

[18:52] <rindolf> flussence: oh, that's due to the <q> tag.

[18:52] <rindolf> flussence: let me get rid of it.

[18:54] <flussence> Ah, that looks more sense-making now.

[18:56] <jnthn> mberends: oh hai

[18:56] <jnthn> How can I halp?

[18:57] <tadzik> Star today?

[18:57] <tadzik> (tonight?)

[18:57] <rindolf> flussence: fixed.

[18:57] <jnthn> #phasers in a few mins.

[18:58] <moritz_> rindolf: s/displace/replace/ maybe?

[18:58] *** masak joined
[18:58] <rindolf> moritz_: why?

[18:58] <rindolf> moritz_: displace as in succeed

[18:59] <rindolf> moritz_: http://en.wiktionary.org/wiki/displace - see meaning #2.

[18:59] <moritz_> rindolf: ah, for me as a physicist I mostly know "displace" as "spatially move"

[19:00] <moritz_> rindolf: having read about it, I agree it's ok

[19:00] <rindolf> moritz_: ok.

[19:01] *** ash_ joined
[19:01] *** justatheory left
[19:02] <pmichaud> Star tonight

[19:02] *** justatheory joined
[19:02] <flussence> yay!

[19:03] <pmichaud> afk for about 30 mins

[19:03] <moritz_> #phasers now!

[19:04] *** zby_home_ left
[19:06] *** stkowski left
[19:06] <masak> now now now

[19:09] <moritz_> .say for now, now now

[19:09] <moritz_> rakudo: .say for now, now, now

[19:09] <p6eval> rakudo 624188: OUTPUT«Instant:2010-09-28T18:46:23.603417Z␤Instant:2010-09-28T18:46:23.855916Z␤Instant:2010-09-28T18:46:23.987443Z␤»

[19:10] <masak> a reflection on the fleeting instants in our lives.

[19:13] <jnthn> no no

[19:13] <jnthn> now.^methods # this is reflection

[19:13] <jnthn> ;-)

[19:15] <masak> :P

[19:18] <sorear> I wonder how dalek will cope with the 51 patch fast forward merge I just fed it.

[19:18] * flussence braces for impact

[19:19] <dalek> niecza/master: e7f4146 | sorear++ | src/Metamodel.pm:

[19:19] <dalek> niecza/master: [mm] Reimplement the $/ hack

[19:19] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/e7f41461abcf5cbc2b63880b14fc6aa486c98080

[19:19] <dalek> niecza/master: 6878346 | sorear++ | src/ (3 files):

[19:19] <dalek> niecza/master: [mm] Implement ltm data storing

[19:19] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/6878346ec9e8f605647e6ace891a343081225570

[19:19] <dalek> niecza/master: d75ad08 | sorear++ | / (6 files):

[19:19] <dalek> niecza/master: [mm] Fix static $*foo cases, compiler driver

[19:19] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/d75ad08cfc65bec5e621c159563c4b95c74e8abb

[19:20] <mberends> jnthn: in 6model/dotnet/compiler/DNST2CSharp.pm:114 there is a var whose data type I cannot figure out by code inspection.  Could you suggest where to look in a MethodCall object to figure out what its return type is?

[19:20] *** plainhao left
[19:20] <jnthn> mberends: looking

[19:22] <jnthn> mberends: ew.

[19:22] *** tomaw_ joined
[19:23] <jnthn> mberends: Laziness bytes.

[19:23] <jnthn> *bites

[19:23] <jnthn> ...

[19:23] <jnthn> mberends: What really should happen is that DNSTMethodCall gets a type atribute

[19:23] <jnthn> mberends: And that this gets set when it's constructed.

[19:24] * masak .oO( unless it nybbles... )

[19:24] <mberends> jnthn: Many of the other var types went away without too much effort, but this one does byte :(

[19:24] *** jaldhar left
[19:24] <jnthn> mberends: Yes, it will I'm afraid.

[19:24] <jnthn> mberends: Would it help you if I eliminated it in the dotnet version?

[19:25] *** ash_ left
[19:25] <mberends> jnthn: probably, but I don't have a suggestion for what you should write to do that.  I could eliminate a few more vars by backporting from the java code.

[19:26] <jnthn> mberends: Oh, I suspect I can probably kill 'em off.

[19:26] <jnthn> mberends: It was more a "I want progress NOW!" thing than a "long term we don't need to note what type we expect" thing.

[19:27] <jnthn> mberends: That is, it's all stuff that I'd need to do when eventually generating IL rather than C#.

[19:28] <mberends> jnthn: yes

[19:32] *** ash_ joined
[19:34] <dalek> 6model: 842f415 | jnthn++ | dotnet/compiler/DNST.pm:

[19:34] <dalek> 6model: Add a type attribute to DNST::MethodCall.

[19:34] <dalek> 6model: review: http://github.com/jnthn/6model/commit/842f415a6161722eb2c7a7b92a1309c255e000d3

[19:34] <mberends> jnthn++

[19:34] <jnthn> I didn't do anything yet. :P

[19:35] * mberends just bought a Lego Mindstorms set on eBay :)

[19:35] <tadzik> :D

[19:35] <masak> mberends: \o/

[19:36] <jnthn> mberends: Yay!

[19:36] <mberends> masak: you're not allowed to play with it next week!

[19:36] <masak> mberends: understood. :)

[19:36] <ash_> mberends: if you like robotics and want something a bit more involved look up the Ardunio, but if your not thats good too, i just like robotics :P 

[19:37] <dalek> niecza/master: e417169 | sorear++ | src/ (6 files):

[19:37] <dalek> niecza/master: Remove a lot of bits of the old metamodel

[19:37] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/e417169c3ac3bf28dc7884af0ed2144bbf4f42b3

[19:37] <mberends> ash_: this one is for $kid, but dad will probably play too ;)

[19:38] *** justatheory left
[19:39] *** hanekomu_ joined
[19:40] *** hanekomu_ left
[19:41] *** hanekomu_ joined
[19:43] * mberends scans eBay for Arduino stuff ;) ash_++

[19:45] *** ggoebel left
[19:45] <ash_> mberends: if you don't see anything thing there, checkout sparkfun.com or http://www.ardunio.cc for them, they just came out with 2 new boards, and btw their software works on Windows, OS X, and linux, its one of the few microcontrollers that doesn't need a special programmer too, which is nice 

[19:45] <ash_> http://www.arduino.cc/ it helps if you spell it right

[19:45] <masak> ooh, this is interesting -- the "leave" semantics of the statement-ending 'when' construct in Perl 5 being defended: http://news.ycombinator.com/item?id=1735497

[19:48] <mberends> ash_: yes, I do like these things too. I think the 'Evil Genius' book was on sale in Maplin in the UK. No special programmer is a nice indeed.

[19:50] <mberends> s/a nice/nice/

[19:50] *** thebird joined
[19:50] <ash_> the new ones are nifty, the have a special USB hub on them so you can program the arduino board to show up as any USB device, it can show up as a keyboard or mouse or an interface card. This also means no special drives for them anymore since its not using FTDI anymore, which is an added bonus of being able to plug it in just about anywhere and work 

[19:50] * sorear contemplates portability

[19:51] <sorear> niecza on java.  mmm.

[19:53] <ash_> if you like .net more than C with a splash of C++ (arduino's are written in a language called Wiring, its a superset of C) there is also the Netduino, which is kinda a clone of the Arduino but targets .NET http://netduino.com/ 

[19:54] <dalek> 6model: 3be093e | jnthn++ | dotnet/compiler/DNST2CSharp.pm:

[19:54] <dalek> 6model: If we have a supplied type, emit it in place of var for DNST::MethodCall nodes. Means we can do the transition away from var in stages.

[19:54] <dalek> 6model: review: http://github.com/jnthn/6model/commit/3be093e71fcc255c6621065267a7a3470e59ab3b

[19:54] *** meppl left
[19:54] <dalek> 6model: 02d64c8 | jnthn++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[19:54] <dalek> 6model: Some initial tentative var-elimination for DNST::MethodCall nodes.

[19:54] <dalek> 6model: review: http://github.com/jnthn/6model/commit/02d64c8bf77c15b92b339c23b4ec297a2a10a838

[19:55] <sorear> jnthn: Why are you transitioning away from var?

[19:55] *** timbunce joined
[19:56] <mberends> sorear: it's easier to keep the java translation in sync with C# that way.

[19:57] <Grimnir_> Funny observation (not by me, and I'm not sure it's totally true, but quite funny): the tmtowtdi paradigm can make Perl people write Python code, if that's what is the best for the task (or they might just do it anyway, cause there is more than one way to do it). On the other hand it seems Python people would never write Perl code.

[19:57] <jnthn> sorear: Because it's less headache for me to eliminate it than it is for mberends ;-)

[19:57] *** dual left
[19:57] <jnthn> (since I wrote this pile of scary in the first place :-))

[19:58] *** Italian_Plumber left
[19:58] <masak> Grimnir_: I find there's quite a lot of empty politics/PR in the respective stances of Perl and Python, with "there's more than one way to do it", and "there should be one obvious way to do it".

[19:58] <jnthn> sorear: Also I'd have needed to do it anyway

[19:58] *** timbunce left
[19:59] <jnthn> sorear: Since I want to make IL at some point and the assembler won't type-infer for me. ;-)

[19:59] <masak> Grimnir_: in the end, it comes down to being pragmatic and being able to let your code evolve in pace with its requirements.

[19:59] <masak> Grimnir_: that said, the two stances do capture something about the ambient "spirit" of the two communities. but it's much less clear-cut and black-and-white than the slogans themselves make it seem.

[20:00] <Grimnir_> masak: of course. it's never as black and white as it seems :)

[20:00] <masak> I love that about reality. :)

[20:00] <dalek> 6model: a40c29f | jnthn++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[20:00] <dalek> 6model: Much, much more var elimination.

[20:00] <dalek> 6model: review: http://github.com/jnthn/6model/commit/a40c29f3af8606530d8137642efadc157cc2b83f

[20:00] <jnthn> mberends: Those get things a LONG way.

[20:00] <mberends> ash_: which model of the Arduino would you recommend buying? http://arduino.cc/en/Main/Hardware spoils us with choice :)

[20:01] <Grimnir_> I started thinking about Perl6, when I read the "perl periodic table" (or what it's called), that maybe it's quite difficult for newcomers to learn, or it's easy because you can do the same things in so many ways?

[20:01] <Grimnir_> I'm not sure. but it does seem that Python is a good language to use as a starting language

[20:01] <moritz_> if you don't prefer explicit scoping, yes

[20:02] <masak> Grimnir_: Python evolved out of ABC, a language designed specifically for education.

[20:02] <Grimnir_> masak: it's not that I insist on the difference, and I actually like that there are those different ways of seeing programming and programming languages. it's just interesting, that there is that difference :)

[20:02] <Grimnir_> masak: ah, that makes sense

[20:02] <masak> Grimnir_: I agree that it's interesting.

[20:03] <masak> Grimnir_: if it were up to me, there would be less senseless tribalism and more cultural exchange across the language community borders.

[20:03] *** dual joined
[20:03] <jnthn> mberends: There's one nasty still.

[20:03] <jnthn> mberends: Under elsif $op.pasttype eq 'nqpop' {

[20:04] <Grimnir_> a professor and some other people at computer science here made a python library for doing concurrent programming. his focus was that he wanted to make something, that is simple enough for scientists - who aren't programmers or computer scientists - to use without making ugly race conditions, and being able to do a lot of the programming with a gui tool. they actually kind of succeeded, and it was still only a beta release. quite impressive

[20:04] <Grimnir_> (they used python, I forgot to say that)

[20:04] <jnthn> I think we're gonna need a op -> return type hash there.

[20:04] <Grimnir_> masak: is there a lot of tribalism?

[20:04] <ash_> mberends: that mostly depends on how you want to use it, the Arduino Uno (which like 2 days ago replaced the Arduino Duemilanove, they are really similar, one just uses FTDI the other uses USB), is great for most things if you want an affordable prototyping board. I have a Mega mainly because I didn't mind the slightly higher price with the added number of pins. most of the other boards are special purpose depending on if you want size (small like the pro),

[20:04] <ash_> integrated wireless socket (the Fio has a socket for a XBee radio chip) the LilyPad is flexible and designed for putting into close or fabric (my friend had one in a costume) 

[20:05] <Grimnir_> I know a guy, who is not a programmer or developer or anything, but he likes to program stuff sometimes, and he really likes Python

[20:05] <masak> Grimnir_: yes, I think there is. not so much here on #perl6, but lots in the social media, and in people I meet in the somasphere.

[20:05] <Grimnir_> I have found out that I so much more like a language like perl, because it's fun just to program. I get so much more out of programming some simple tasks in perl than php for instance

[20:06] <Grimnir_> and I like humor elements too. I just learned about the yadda yadda operator. I like stuff like that :)

[20:07] <sorear> I wonder how much sense find_lex_p_ic_ic would make in a Parrot context

[20:07] <masak> in Perl 6, we don't believe that having fun and being useful are mutually exclusive. :)

[20:07] <mberends> ash_: I have similar preferences. Thanks for the tips. They all seem affordable too. Arduino++

[20:07] <sorear> that's the main thing niecza uses

[20:07] <ash_> the more i program, the more i like functional style languages, personally. perl gives me enough of that while still not being completely foreign (like lisp or haskell i just haven't learned to understand their syntax)

[20:07] <Grimnir_> masak: exactly :)

[20:07] <Grimnir_> ash_: yes, good point

[20:08] <Grimnir_> I haven't tried lisp or haskell, but I have tried SML. it was nice, but you kind of loose the grip on it, if you don't use it

[20:08] <ash_> mberends: if your really into the electrical stuff, you can just by the chip and build the board yourself, my friend does that, he made about 10 for a lab he works in because they keep blowing them up :P its really cheap if you do it that way (like $15 for each) 

[20:09] *** timbunce joined
[20:10] *** Italian_Plumber joined
[20:12] <ash_> sorry for causing so much noise in #perl6 

[20:12] <masak> rindolf: re http://perl-begin.org/learn/perl6/ -- from the perspective of someone who does believe that Perl 6 is "still" Perl, you don't make an extremely strong case for that viewpoint. :)

[20:12] *** icwiener left
[20:12] <masak> I would also like to take the opportunity and apologise for causing so much noise on #perl6 :P

[20:13] <Grimnir_> it doesn't bother me. I'm used to people talking about strange stuff on irc channels :)

[20:14] <mfollett> Grimnir_:  I really like the Perl6 Periodic Table of Operators but I probably wouldn't show that to someone just learning the language, there is a lot of information there and that could be daunting for some.  I kind of think you learn those things as you need them or as you want to and then you look at the table after you've learned enough that it can be a useful reference.

[20:15] <rindolf> masak: I didn't try to make a case for the viewpoint that Perl 6 is still Perl.

[20:15] <rindolf> masak: a few years back, I would have probably written something much worse.

[20:16] <masak> rindolf: I understand that. if you're interested, I or someone else here can try to make the point on the page better than it's made now.

[20:17] <masak> the other parts of the page do make a good job at striving to be objective.

[20:20] *** nsh joined
[20:20] *** sbp joined
[20:23] <masak> yay! valid atom feed! \o/ http://validator.w3.org/feed/check.cgi?url=http://strangelyconsistent.org/blog/feed.atom

[20:23] *** justatheory joined
[20:26] <sbp> /topic I for one salute our new git-based overlords!

[20:26] *** kjeldahl joined
[20:27] <masak> moritz_: you mentioned wanting to update the Planet Perl 6 aggregator feed. now http://strangelyconsistent.org/blog/feed.atom is available for that.

[20:27] <moritz_> [Coke]: see above

[20:28] <moritz_> masak: it's more "telling [Coke] what to do" than actually doing things :-)

[20:29] <masak> oh. convenient :)

[20:29] <sbp> rakudo: my @pascal := do [1], -> @p { [0, @p Z+ @p, 0] } ... *; say @pascal[^10].perl;

[20:29] <masak> [Coke]++

[20:29] <p6eval> rakudo 624188: OUTPUT«([1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1], [1, 8, 28, 56, 70, 56, 28, 8, 1], [1, 9, 36, 84, 126, 126, 84, 36, 9, 1])␤»

[20:30] <ash_> if you were doing prototype based inheritane wold you need a different HOW ?

[20:30] * masak tries the feed in his own feed reader to make sure 's all OK

[20:31] *** thebird left
[20:35] <masak> wow, it works seamlessly! \o/

[20:36] <sjohnson> any C experts here for an OT question?

[20:36] <sjohnson> （　｀ー´）

[20:36] <masak> might this be the first Atom feed in history served by Perl 6? http://strangelyconsistent.org/blog/feed.atom

[20:36] <moritz_> might be :-)

[20:36] <ash_> sjohnson: might as well ask and see

[20:36] <jnthn> masak: Looks good in ffx's built in reader.

[20:36] <masak> \o/

[20:36] <sjohnson> C question:  if i have   int getLength(char str[]) { }... is str a pointer or an array?

[20:37] <masak> looks good in Google Reader, too.

[20:37] <ash_> and array

[20:37] <sjohnson> a noobie like me would assume str[] == array, but it is not so according to gcc.

[20:37] <ash_> an*

[20:37] <masak> sjohnson: an array.

[20:37] <sjohnson> people in #c say pointer

[20:37] <sjohnson> and gcc seems to be agreeing with them

[20:37] <masak> sjohnson: but it might be presented as a pointer, because the distinction is slight.

[20:37] <sjohnson> str++; // pointer arithmatic works (confused face)

[20:37] <ash_> don't confuse array's and pointers, they are not strictly the same thing in C 

[20:38] <masak> nod, but sometimes it explains things to think of them as very similar.

[20:38] <sjohnson> ash_: that's exactly my problem.  i'm trying not to confuse them... yet pointer arith in that function works, where as if i do  char[] pig = "happy pig";  pig++;  in main(), it breaks

[20:39] <flussence> shouldn't that be "char pig[]"?

[20:39] <gfldex> sjohnson: an array is a pointer that got mem allocated by the compiler (for you)

[20:39] <sjohnson> flussence: yes

[20:39] <sjohnson> sorry typo

[20:39] <flussence> k

[20:39] <masak> sjohnson: the relationship between array and pointer is basically has-a. an array has a pointer, which it sometimes exposes and confuses with itself.

[20:40] <masak> sjohnson: specifically, the pointer that the array has is to the first of its consecutively allocated elements.

[20:40] <sjohnson> confusing stuff!

[20:40] <masak> sjohnson: thus, the equivalence a[i] == a + i holds.

[20:41] <masak> er. I got the not-altogether right.

[20:41] <masak> the rhs should be de-ref'd also.

[20:42] <sorear> sjohnson: an array can be used as a pointer.  When this happens, you get a pointer to the first element

[20:42] <sorear> But the resulting pointer is a value - it can't be modified

[20:42] * masak finds and likes http://www.reddit.com/r/perl/comments/dk1rg/ask_perllit_list_of_changes_not_additions_perl_6/

[20:43] <dukeleto> #parrotsketch is happening now if anybody is interested

[20:44] *** ash_ left
[20:45] *** pythonian4000afk is now known as pythonian4000

[20:45] <sjohnson> heres the pastebin for anyone else who wants to add anything.   i wont clog up anymore of teh chan bandwidth

[20:45] <sjohnson> http://www.pastie.org/1187376

[20:45] <sjohnson> :-)

[20:47] <gfldex> sjohnson: did you understood the difference?

[20:47] <sjohnson> i still don't

[20:47] <sjohnson> what masak said about the array having a pointer might explain it tho, but im still not sure.

[20:48] <gfldex> "mammy moose" is a peace of memory on your data segment

[20:48] <masak> sjohnson: fwiw, I liked sorear's explanation better :)

[20:48] <sorear> sjohnson: IMHO gcc is wrong to accept line 9

[20:48] <gfldex> that peace of memory is a constant

[20:49] <gfldex> incrementing pigger would not cause much problem (in the given case)

[20:49] <sjohnson> maybe calling testFunc(chararray) will always pass a pointer in C?

[20:49] <sorear> sjohnson: when you say "char[] foo" as a parameter, the internal pointer is a variable, but that variable-ness is an implementation detail and shouldn't be leaking out like that

[20:49] <gfldex> but what would pigger-- do?

[20:49] <sjohnson> oh sorry that was sorear who said it.  thought it was masak.  oops

[20:49] <sorear> sjohnson: yes, arrays in C are always passed by reference.  (Remember, the PDP-7 had 4kb of programmer-accessible RAM)

[20:50] <sjohnson> gfldex: the code wont do anything, just commented where gcc would fail

[20:50] <sjohnson> oh, man i'm blind today.  -- would just push the pointer backwards i would guess

[20:51] <masak> aye.

[20:51] <sjohnson> thanks for the help guys

[20:53] <sorear> sjohnson: when you say char[] foo = "bar" at the top level, some memory is allocated at a fixed address, say 0x124, and the compiler remembers "foo =  0x124 (char[4])"

[20:53] <sorear> sjohnson: foo++ doesn't make sense because foo is a constant

[20:54] *** wamba left
[20:54] *** M_o_C left
[20:55] <sjohnson> ya that makes sense

[20:55] <sjohnson> i got a lot to learn

[20:55] <sjohnson> .oO(maybe i'll stick to Perl)

[20:57] <sjohnson> ahh, here it is in K&R C 2nd ed

[20:57] <sjohnson> "When an array name is passed to a function, what is passed is the location of the initial element. Within the called function, this argument is a local variable, and so an array name parameter is a pointer, that is, a variable containing an address."

[20:57] <sjohnson> i should have RTFM'd first, but i thought it would take me forever to find the page saying that.  oops

[20:58] <sorear> sjohnson: find a copy of the SVID-x86

[20:58] <sorear> it's about 15 pages and has all the useful low-level details like that

[20:58] <sjohnson> i wonder why it didnt warn me that i didnt write   char *str... when i wrote:  char str[].  maybe they're interchangeable

[20:59] <sjohnson> thanks for the tip

[20:59] <sorear> it's the binary compatibility spec for C compilers on UNIX

[20:59] * sjohnson googles for it

[20:59] <sorear> (System V Interface Description)

[21:00] <sjohnson> thanks for the info.  well, next time i wont ask any more C questions here until i read all of my copy of K&R C

[21:01] <masak> sjohnson: http://en.wikipedia.org/wiki/System_V_Interface_Definition

[21:01] <sjohnson> just as i thought,  "As formal parameters in a function definition,  char s[]; and char *s; are equivalent;"

[21:01] *** stkowski joined
[21:01] <sjohnson> sorry if i wasted anyones time.   *hugs K&R C book*

[21:02] * sjohnson bookmarks masaks URLK

[21:02] <masak> sjohnson: no, it was quite informative. thanks for bringing it up.

[21:03] *** rindolf left
[21:03] <sjohnson> "#perl6... you learn something new every day" -- today's slogan

[21:04] *** ash_ joined
[21:04] *** kjeldahl left
[21:05] <sjohnson> sorear: about line 9 being wrong, according to K&R C book it's okay to do so

[21:05] <sjohnson> since it is a pointer, can do pointer arithmetic and such

[21:05] *** Italian_Plumber left
[21:07] *** tadzik left
[21:08] <masak> sjohnson: it's only a pointer after you've passed it to a function.

[21:09] <masak> s/a pointer/a modifiable pointer/

[21:09] <masak> sjohnson: the original array is a constant pointer.

[21:09] <masak> or has-a, depending how you view it.

[21:10] <sjohnson> well, the array is not a pointer.  if you want to make a pointer from the constant array, you can do   char *pointer = &pigger[0];, then do pointer++;

[21:11] <sjohnson> says in K&R C you cannot do pointer arithmatic on arrays because they aren't pointers.  is what your are saying the same thing said another way?

[21:12] <masak> char *pointer = pigger; /* should work */

[21:12] <masak> sjohnson: arrays aren't pointers. arrays are arrays. :)

[21:13] <sjohnson> i tried that, but it won't work

[21:13] <sjohnson> says incomaptible type

[21:13] <sjohnson> well, i get a warning

[21:13] <sjohnson> i shouldn't say it wont work

[21:13] <masak> sjohnson: in some situations (such as when they're being passed by reference through a function signature) they act like pointers (to the first element in the array).

[21:13] <sjohnson> as difficult as this stuff is, it's still interesting

[21:13] * masak tries locally

[21:14] * sjohnson waits patiently :)

[21:14] *** mkramer left
[21:17] <sjohnson> i shouldn't say difficult actually... just lower-level than perl

[21:17] <sjohnson> K&R C 2nd Ed -- "The answers are here" should have been its subtitle

[21:18] *** Ross left
[21:19] <masak> sjohnson: works fine here. http://gist.github.com/601801

[21:20] <sjohnson> hmm

[21:20] <sjohnson> i wonder why im getting warnings

[21:21] <sjohnson> now i'm not.  thanks for double checkin

[21:21] <sjohnson> must have done something else foolish

[21:21] <sjohnson> im glad it works

[21:21] <sjohnson> cause i thought it should work

[21:21] <sjohnson> :)

[21:21] <sjohnson> thats always a nice feeling

[21:25] *** jfried left
[21:25] *** meppl joined
[21:29] <masak> A12 says that 'next' and 'last' should default to (what is now called) 'nextsame' and 'lastcall', respecitvely? is that still the case in current Perl 6?

[21:30] *** pyrimidine left
[21:35] <masak> by the way, my new blog is being statically generated by 200 lines of Perl 6 code (with Markdown conversion outsourced to 1.5kLOC Perl 5 code)

[21:41] <sjohnson> masak i see what i did wrong for the warning.  i did  char ptr* = &array;

[21:41] <masak> sjohnson: good. now explain to me why that is wrong. :)

[21:42] <sjohnson> cause array already is the address for the first element

[21:42] <sjohnson> and doesnt need the &

[21:42] <sjohnson> would be my guess

[21:42] <masak> exactly.

[21:42] <masak> sjohnson++

[21:42] <sjohnson> :)

[21:42] <sjohnson> sjohnson being a pointer, of course

[21:43] <sjohnson> ;)

[21:43] <sjohnson> alright, back to perl6 mode for me

[21:43] <sjohnson> too much low level thinking for one day

[21:44] <silug> i hate asking a stupid question, but is there a replacement for hex() in perl 6?

[21:45] <flussence> fmt?

[21:45] <sbp> masak: source for the blog generator?

[21:45] * flussence reads perldoc -f hex again

[21:45] <sjohnson> sprintf with %H?

[21:45] <flussence> rakudo: say '0xAF'.Int

[21:46] <p6eval> rakudo 624188: OUTPUT«175␤»

[21:46] <flussence> rakudo: say :16<AF>

[21:46] <p6eval> rakudo 624188: OUTPUT«175␤»

[21:46] <masak> sbp: hm, it's not on github or anything like that yet.

[21:47] <masak> sbp: basically, what I have now is the specific solution that works for me. the next step is to generalize it while keeping it working.

[21:47] <silug> flussence: neat.  thanks.

[21:48] <sbp> examples of Perl 6 in the wild might be helpful for learners, even if the code isn't generalised. it's probably a good example of idioms that many programmers will be using commonly, and it's designed specifically as a piece of working code rather than testing or showcode

[21:48] <masak> true.

[21:48] <sbp> an annotated version of at least pieces of it might make a good post, too?

[21:48] <masak> in that vein, here's a gist. http://gist.github.com/601864 -- enjoy.

[21:48] <sbp> thanks!

[21:49] <masak> I'm making my first post as we speak. might highlight some parts of the code just for fun :)

[21:49] <masak> look at the sub 'html_escape', for example -- isn't that exquisite?

[21:50] <masak> even with the rakudobug workaround, it's short and to the point.

[21:50] <sbp> yeah, I really like that one

[21:50] <sbp> is this following piece approved perl6 stylewise?

[21:50] <sbp>         $infile.get;

[21:50] <sbp>         1 until $infile.get eq '---';

[21:51] <sbp> I presume it's just discarding stuff until ---

[21:51] <masak> right.

[21:51] <masak> up to and including.

[21:51] <masak> I've been thinking of other ways to write that idiom.

[21:52] <masak> the '1 while' way is actually a bit p5-centric. I chose it this time for some reason.

[21:53] <masak> I also tend to like `repeat until $infile.get eq '---' {}`

[21:53] *** ruoso left
[21:53] <sbp> hmm, I think I prefer that

[21:53] <masak> or `* until $infile.get eq '---';`

[21:54] <sbp> the {} makes the noop more obvious

[21:54] <masak> aye.

[21:54] <sbp> noop until $infile.get eq '---'... :-)

[21:54] <sbp> finished skimming it, anyway

[21:54] <sbp> thanks for posting that!

[21:54] <sbp> masak++

[21:54] <sbp> have a kudon. the SI unit of kudos, I tink

[21:54] <masak> :)

[21:55] <masak> thanks for skimming it! I feel kudo'd :)

[21:56] *** timbunce left
[21:57] <sbp> what was the 'if "_site/$html_filename".IO ~~ :e' commented section for, by the way?

[21:57] <flussence> wow... that's a lot of stuff in not a lot of lines! masak++

[21:58] <flussence> sbp: skips generating files where the output's newer than the input, I guess

[21:58] <masak> sbp: it's a failed attempt to only generate target files from the source files that were changed.

[21:58] <sbp> ah, yes! makes sense now

[21:58] <masak> aye. what flussence said.

[21:59] <masak> for some reason that I haven't had time investigating, it didn't quite work.

[21:59] <masak> I tend not to commit commented-out code, but this isn't committed code :P

[21:59] <flussence> that's odd, irssi didn't highlight that line :/

[21:59] <sbp> why did you use the [<] there rather than a nested < between the two?

[22:00] <flussence> he'd have to write .IO.modified out twice that way.

[22:00] <sbp> hmm. I guess somehow the IO.modified call is being applied to both the args before the < is... right

[22:00] <flussence> .oO( I think I'm starting to learn this language! )

[22:00] <masak> aye.

[22:00] <sbp> simple case of me no understand the "»", apparently

[22:00] <sbp> hehe

[22:01] <masak> sbp: the » is basically a 'map' here.

[22:02] <sbp> ah. so it's creating a new list each time?

[22:02] <sbp> array, sorry

[22:02] <masak> maybe an example'll help.

[22:03] <masak> rakudo: my @a = <oh hi there>; .say for @a>>.ucfirst

[22:03] <p6eval> rakudo 624188: OUTPUT«Oh␤Hi␤There␤»

[22:04] <sbp> this seems to provide a good adjunct to your "all good, well-established features, which find daily use in Perl 6 programs" paragraph. what the commentators are missing is that these features which seem to just be there to golf all programs into incomprehensible oblivion have actually been huffmanised with a lot of care and eye to practicality

[22:05] <sbp> the IO.modified being a good example

[22:05] <masak> which paragraph is that?

[22:06] <sbp> the one starting "I think these reactions" in http://strangelyconsistent.org/blog/idiomatic-perl-6

[22:10] <masak> ah. didn't remember writing that :)

[22:10] <masak> but I agree 100% with the sentiment.

[22:11] <masak> the featureset that I'm used to -- say, most of the features in Rakudo -- feel *very* well engineered.

[22:11] <silug> flussence: fwiw, :16<> doesn't seem to work on a string.

[22:12] <silug> but prepending 0x and using .Int works fine, even if it is a little ugly.  :)

[22:12] <masak> I mean, I'm learning Perl 5 piece by piece, and apart from speed, memory usage and stability, there are many places where I wish that Perl 5 was more like Perl 6.

[22:12] <flussence> that's because the <>s *are* string quote operators - use :16($string)

[22:12] <silug> oh, duh

[22:12] <silug> see, like i said, stupid question

[22:13] <masak> or :16«$string» -- should work too, for the same reason qq interpolates.

[22:13] <flussence> q = <, qq = «?

[22:13] *** mberends left
[22:14] <silug> yeah, i can't seem to retain that (yet)

[22:14] *** Mowah left
[22:15] <hudnix> For some reason I just wanted to write something like "has $.attribute = somefunc($^a)" and likewise for other attributes and have it automatically generate the right .new() function for that. Anyone have any thoughts on that idea?

[22:16] <flussence> would *.&somefunc work there?

[22:16] <jnthn> What could the $^a be?

[22:17] <jnthn> You can call a function on the RHS of the = there and it automatically closures it up and does it once per instnace.

[22:17] <hudnix> the first parameter to the automatically generated new funtion;

[22:18] <hudnix> sure, but how to pass a parameter to the RHS without writing a .new()?

[22:19] <sbp> rakudo: my @pascal := [1], -> @p { [0, @p Z+ @p, 0] } ... *; say @pascal[^10].perl

[22:19] <p6eval> rakudo 624188: OUTPUT«([1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1], [1, 8, 28, 56, 70, 56, 28, 8, 1], [1, 9, 36, 84, 126, 126, 84, 36, 9, 1])␤»

[22:19] <sbp> ah, bug #77462 was fixed

[22:20] <jnthn> hudnix: Ah, I see what you mean. Hm.

[22:21] <hudnix> Just a thought inspired by an excess of laziness :)

[22:21] <jnthn> rakudo: class Foo { has $.x = .say }; Foo.new(x => 42)

[22:21] <jnthn> (curious :-))

[22:21] <p6eval> rakudo 624188:  ( no output )

[22:22] <jnthn> Aw

[22:22] <masak> :)

[22:24] *** envi joined
[22:25] <flussence> rakudo: class A { has $.a; has $.b = $.a.chars }; say A.new(a=>"abcd").b

[22:25] <p6eval> rakudo 624188: OUTPUT«4␤»

[22:26] <masak> rakudo: class A { has $.b = $.a.chars; has $.a }; say A.new(a=>"abcd").b

[22:26] <p6eval> rakudo 624188: OUTPUT«Method 'chars' not found for invocant of class ''␤  in <anon> at line 22:/tmp/sxuPU5SB3G␤  in main program body at line 22:/tmp/sxuPU5SB3G␤»

[22:27] *** mberends joined
[22:29] <hudnix> class A {has $.a = $^b + 1;has $.b = $^a }; say A.new(1,2).a # was kind of what I was thinking of 

[22:29] <hudnix> rakudo: class A {has $.a = $^b + 1;has $.b = $^a }; say A.new(1,2).a # was kind of what I was thinking of 

[22:29] <p6eval> rakudo 624188: OUTPUT«Null PMC access in type()␤  in <anon> at line 22:/tmp/tqkPXiH0Dh␤  in main program body at line 22:/tmp/tqkPXiH0Dh␤»

[22:29] <masak> that doesn't rhyme well with how the ^ twigil works in other situations.

[22:29] * masak submits rakudobug

[22:30] <masak> rakudo: class A { has $.a = $^b }; A.new

[22:30] <p6eval> rakudo 624188: OUTPUT«Null PMC access in isa_pmc()␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/wzoXcvg6DL␤»

[22:30] <masak> rakudo: class A { $^b }; A.new

[22:30] <p6eval> rakudo 624188:  ( no output )

[22:38] <masak> yay, I freaking BLOGGED! http://strangelyconsistent.org/blog/dog-food-with-a-distinct-perl6-flavor

[22:39] <[Coke]> moritz_: please be more specific?

[22:39] <hudnix> wow, very nice.

[22:39] <masak> [Coke]: could you please add my feed to Planet Perl 6?

[22:40] <masak> [Coke]: http://strangelyconsistent.org/blog/feed.atom

[22:40] <masak> and the post has already shown up in my Google Reader! \o/

[22:40] <masak> I can't believe it all just works.

[22:41] <[Coke]> masak: you want it to replace your use.perl one?

[22:41] *** hanekomu_ left
[22:41] <jnthn> masak: nice

[22:41] <masak> [Coke]: whatever's easiest for you.

[22:41] <rjbs> masak: Yay!

[22:41] <masak> [Coke]: since I can't blog from the old one, I don't really care.

[22:42] *** envi left
[22:42] <masak> jnthn++ for suggesting the blog post title :)

[22:42] <[Coke]> masak: changed.

[22:42] <masak> \o/

[22:43] <[Coke]> msg chromatic planetsix points to your use.perl URL. Do you have a different one you'd like plugged in?

[22:43] <[Coke]> phenny, tell chromatic planetsix points to your use.perl URL. Do you have a different one you'd like plugged in?

[22:43] <phenny> [Coke]: I'll pass that on when chromatic is around.

[22:43] <mfollett> masak++

[22:44] *** justatheory left
[22:44] <[Coke]> phenny, tell allison planetsix points to your use.perl URL. Do you have a different one you'd like plugged in?

[22:44] <phenny> [Coke]: I'll pass that on when allison is around.

[22:44] <[Coke]> phenny, tell luqui planetsix points to your use.perl URL. Do you have a different one you'd like plugged in?

[22:44] <phenny> [Coke]: I'll pass that on when luqui is around.

[22:44] <[Coke]> phenny, tell obra planetsix points to your use.perl URL. Do you have a different one you'd like plugged in?

[22:44] <phenny> [Coke]: I'll pass that on when obra is around.

[22:44] <[Coke]> phenny, tell pmichaud planetsix points to your use.perl URL. Do you have a different one you'd like plugged in?

[22:44] <phenny> [Coke]: I'll pass that on when pmichaud is around.

[22:45] <[Coke]> phenny, tell stevan planetsix points to your use.perl URL. Do you have a different one you'd like plugged in?

[22:45] <phenny> [Coke]: I'll pass that on when stevan is around.

[22:45] <[Coke]> phenny: tell moritz_ that robert disabled your 5-to-6 feed as it was borking planetsix.

[22:45] <phenny> [Coke]: I'll pass that on when moritz_ is around.

[22:45] <[Coke]> phenny: tell jnthn that robert disabled your 5-to-6 feed as it was borking planetsix.

[22:45] <phenny> [Coke]: I'll pass that on when jnthn is around.

[22:46] <[Coke]> phenny, tell jnthn whoops! I mean, planetsix points to your use.perl URL. Do you have a different one you'd like plugged in?

[22:46] <phenny> [Coke]: I'll pass that on when jnthn is around.

[22:46] <masak> [Coke]: I'll try really really hard not to bork planetsix. so far my Atom feed seems very well-behaved.

[22:46] <[Coke]> can someone pass that along to Herbert Breunung also?

[22:47] <masak> phenny: tell lichtkind planetsix points to your use.perl URL. Do you have a different one you'd like plugged in?

[22:47] <phenny> masak: I'll pass that on when lichtkind is around.

[22:47] <masak> [Coke]: done.

[22:48] <jnthn> [Coke]: 5-6 feed?

[22:48] <phenny> jnthn: 22:45Z <[Coke]> tell jnthn that robert disabled your 5-to-6 feed as it was borking planetsix.

[22:48] <phenny> jnthn: 22:46Z <[Coke]> tell jnthn whoops! I mean, planetsix points to your use.perl URL. Do you have a different one you'd like plugged in?

[22:48] <masak> jnthn: [Coke] mis-copipasted a message to moritz_ to you.

[22:48] *** thundergnat joined
[22:48] <sjohnson> niggers and bitches.

[22:48] <sjohnson> oops

[22:48] <sjohnson> paste buffer accident

[22:48] <diakopter> sigh.

[22:48] <masak> sjohnson: now *that* is off-topic.

[22:48] <sjohnson> i sincerely apologize for that

[22:48] <masak> :(

[22:48] <rjbs> Clearly meant for #perl5

[22:49] <masak> *lol*

[22:49] <sjohnson> damn rap lyrics.

[22:49] <diakopter> apology accepted, captain needa

[22:49] * flussence has absent-mindedly pasted hundreds of KB of random text into search engines to date...

[22:49] <jnthn> [Coke]: Just toss the use.perl.org one. 

[22:50] <jnthn> [Coke]: It's already aggregating from my current blog too.

[22:50] <jnthn> [Coke]: Not sure why it was added rather than replacing my existing one.

[22:50] <masak> wait, did diakopter just strangle sjohnson?

[22:50] <sjohnson> masak++ # funny way to make light of it 

[22:50] <masak> ...telekinetically?

[22:50] <flussence> (thankfully irssi stopped me last time I accidentally middle clicked on this window)

[22:51] <[Coke]> jnthn: done

[22:51] <jnthn> [Coke]++ # thanks!

[22:51] <sjohnson> probably a sign i should stop using the computer for a while :)

[22:51] * [Coke] cues up some eminem.

[22:52] <jnthn> Or listem to some wholesome heavy metal instead. :P

[22:53] <sjohnson> maybe rap lyrics to influence people!

[22:54] <sjohnson> concerned parents were right

[22:54] <thundergnat> 'lo #perl6

[22:55] <masak> y0 thundergnat 

[22:55] <thundergnat> Is R* still on track for today?

[22:56] *** miso_soup joined
[22:56] <jnthn> löwenbräu++

[22:56] <jnthn> And now I sleep. Night all o/

[22:57] <sjohnson> cya!

[22:58] <thundergnat> (backlogs) Ooo! tadzik and nymacro, perl6 golf. Let me take a whack at it.

[23:00] <[Coke]> last i heard, R* was on track, pmichaud is at least temporarily delayed by errands.

[23:01] <sjohnson> cover your eyes when you backlog near my parts ;)

[23:01] <diakopter> once upon a time some of us had access to an irclog memory hole

[23:03] <thundergnat> sjohnson: I'll studiously avoid your parts, never fear.

[23:04] <sjohnson> （　｀ー´）

[23:07] *** kjeldahl joined
[23:07] *** mfollett left
[23:07] <dalek> 6model: cffcdc8 | mberends++ | java/ (6 files):

[23:07] <dalek> 6model: [java] eliminate many (mis)uses of the C# var data type

[23:07] <dalek> 6model: review: http://github.com/jnthn/6model/commit/cffcdc8927a219fdf17a10b4a1eeb1db8b4d60ed

[23:09] <mberends> ^^ just too late for jnthn++ to review

[23:18] <thundergnat> tadzik: golfed your 441 http://gist.github.com/601011 down to 355 http://gist.github.com/601953

[23:19] <thundergnat> mostly got rid of intermediate variables.

[23:19] <diakopter> '(h) hit (s) sit'   could be   '(s)(h)it'

[23:19] <diakopter> erm

[23:19] <diakopter> '(h)(s)it'

[23:19] <thundergnat> heh

[23:20] <thundergnat> I didn't change any of the prompts, but you have a point.

[23:21] <thundergnat> The winning condition check is pretty fragile too.

[23:22] *** fod joined
[23:24] *** ash_ left
[23:27] *** miso_soup left
[23:28] *** mavrc left
[23:29] *** leprevost joined
[23:33] *** envi joined
[23:33] <masak> 'night, #perl6.

[23:33] <thundergnat> night masak

[23:33] *** masak left
[23:34] <thundergnat> whittled it down to 350 http://gist.github.com/601953

[23:37] *** cdarroch left
[23:48] *** stkowski left
[23:51] *** ggoebel joined
[23:55] *** masonkramer left
[23:55] *** ashleydev left
[23:55] *** masonkramer joined
[23:55] *** ashleydev joined
