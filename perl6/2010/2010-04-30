[00:07] <lichtkind> good night

[00:13] *** rv2733 left
[00:23] *** snarkyboojum joined
[00:24] * sorear pesters jnthn

[00:24] <jnthn> sorear: I wants sleeeeeeep!

[00:25] <sorear> for quite some time it seems.

[00:25] <jnthn> sorear: You may pester me quickly, however.

[00:25] <sorear> Just the patch from yesterday

[00:25] <jnthn> sorear: Yes, I've been sleeping rather badly all week. Wish I knew why.

[00:25] <jnthn> oh

[00:25] <sorear> rakudo master works with parrot trunk except for S05, right?

[00:25] <jnthn> I fixed that.

[00:25] <jnthn> Oh

[00:26] <jnthn> We fail some of rx.t

[00:26] <jnthn> But that's only due to a \e and \f bug

[00:26] <jnthn> But otherwise we're on latest Parrot trunk and working fine, afaik.

[00:26] <jnthn> sorear: This patch?

[00:26] <jnthn> http://pastie.org/939776

[00:26] <jnthn> ?

[00:26] *** wolv left
[00:27] *** bbkr_ joined
[00:28] <sorear> jnthn: good question, can you even load that?  I can't now

[00:29] <jnthn> oh

[00:29] <jnthn> I had it open in the browser tab ;-)

[00:29] <jnthn> sorear: add newclosure call?

[00:30] <jnthn> and

[00:30] <jnthn> -    pir::set_hll_global__vPSP(@nsparts, '&' ~ $lastpart, sub() { $mod });

[00:30] <jnthn> +    pir::set_hll_global__vPSP(@nsparts, '&' ~ $lastpart, sub() { $ns });

[00:30] <jnthn> ?

[00:30] <sorear> yes

[00:30] <jnthn> yeah

[00:30] <jnthn> applied locally just now, building/testing.

[00:32] <jnthn> Will be going to airport/flying/relaxing in a hot spring pool/beering(hopefully) tomorrow, so best I get it in tonight.

[00:34] <[Coke]> chromatic sped up codesting a smidge. I'm working on something that will hopefully be more than a smidge.

[00:35] <jnthn> [Coke]: Excellent.

[00:42] <sorear> [Coke]: Ooooooh

[00:43] <sorear> How much more

[00:47] <[Coke]> Iunno. I just got it to compile, give me a few minutes.

[00:49] <sorear> wooh

[00:49] <sorear> I just succeeded in patching Term::ANSIColor and Text::VIMColor together into an inline syntax highligher module

[00:49] <sorear> perl6 --target=pir need not hurt my eyes so much now

[00:53] *** snarkyboojum left
[00:53] *** yinyin joined
[00:54] *** snarkyboojum joined
[00:55] <dalek> rakudo: f31d524 | jonathan++ | src/Perl6/Module/Loader.pm:

[00:55] <dalek> rakudo: Apply patch from sorear++ to further fix up loading modules from other languages.

[00:55] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/f31d524037b6c298002e96323504b573ae6590c4

[00:55] *** snarkyboojum left
[00:56] <eternaleye> (backlogging) sorear: re { $^a $^a }, the first time you user $^var it installs an alias as $var, doesn't it?

[00:57] <eternaleye> rakudo: for 1, 2 { say $^a, $a }

[00:57] <p6eval> rakudo c4857a: OUTPUT«unshift_string() not implemented in class 'FixedStringArray'␤»

[00:57] *** kst left
[00:57] <eternaleye> Okay, that's new.

[00:57] <eternaleye> masak? ^^^

[00:57] <jnthn> Erm, I haven't seen that before.

[00:57] <jnthn> rakudo: for 1, 2 { say $^a }

[00:57] <p6eval> rakudo c4857a: OUTPUT«unshift_string() not implemented in class 'FixedStringArray'␤»

[00:57] *** kst joined
[00:57] <jnthn> rakudo: for 1, 2 { .say }

[00:57] <p6eval> rakudo c4857a: OUTPUT«unshift_string() not implemented in class 'FixedStringArray'␤»

[00:58] <jnthn> rakudo: say "alive"

[00:58] <p6eval> rakudo c4857a: OUTPUT«unshift_string() not implemented in class 'FixedStringArray'␤»

[00:58] <eternaleye> Uh oh.

[00:58] <jnthn> Oh.

[00:58] <jnthn> p6eval's Rakudo is busted, it seems. :-(

[00:58] <jnthn> sorear: OK, your patch is in. :-)

[00:58] <jnthn> Thanks!

[01:02] *** alester left
[01:06] * jnthn -> sleep for real now

[01:07] <lichtkind> sleep well

[01:07] *** lichtkind left
[01:08] *** ash_ joined
[01:08] *** snarkyboojum joined
[01:11] <diakopter> hm

[01:16] *** TiMBuS joined
[01:16] <[Coke]> alright, my codestring passes 100% now; building so I test rakudo build times...

[01:20] *** bbkr_ left
[01:23] <snarkyboojum> [Coke]++

[01:26] *** rgrau__ left
[01:26] <[Coke]> is the build currently "insanely slow" ?

[01:26] <sorear> interesting

[01:26] <sorear> rakudo just built in 12m real 10m user

[01:27] <snarkyboojum> not insanely slow for me

[01:27] <sorear> so it's considerably slower, but thrashes less - same real time

[01:27] *** crythias1 left
[01:27] <[Coke]> 12m is slow. =-)

[01:27] <sorear> unfortunately I wandered off and missed the peak heap usage

[01:27] <sorear> [Coke]: When I joined the project, typical was 12h.

[01:28] <snarkyboojum> pre memory fix yeah

[01:28] <[Coke]> sorear: holy crap, really?

[01:29] <snarkyboojum> on 384MB of RAM or something right sorear? :)

[01:29] <sorear> yes

[01:31] <snarkyboojum> parrot is using around 500MB of RAM during a build here

[01:31] *** rv2733 joined
[01:31] <snarkyboojum> and rakudo is building in about 3 and a half minutes

[01:36] <snarkyboojum> parrot-nqp is still maxing out at around 220MB (when generating rakudo grammar and actions)

[01:37] <snarkyboojum> oh wow, ok.. parrot is using up to 900MB when generating core.pir

[01:37] <snarkyboojum> anyway, enough meaningless numbers from me :)

[01:38] *** orafu left
[01:38] *** orafu joined
[01:40] *** wknight8111 left
[01:51] <pugssvn> r30511 | colomon++ | [misc] Suggest a task for "this week's contribution to Perl 6". 

[01:54] <[Coke]> perl6-actions one of the slow ones?

[01:56] <[Coke]> holy crap this is slow.

[01:58] *** justatheory left
[01:58] *** Psyche^ joined
[01:59] *** JimmyZ joined
[02:02] *** Patterner left
[02:02] *** Psyche^ is now known as Patterner

[02:08] <[Coke]> with trunk, I pretty much hang on teh actions file; with my patch, it goes through.

[02:10] *** kst left
[02:11] *** kst joined
[02:13] <[Coke]> blah. can someone with a more reliable build box give a parrot branch a try and compare build times?

[02:14] <[Coke]> https://svn.parrot.org/parrot/branches/codestring

[02:14] <[Coke]> mine goes from "hangs" to real    6m51.967s

[02:15] <sorear> 7sure

[02:15] <sorear> sure

[02:15] <sorear> now tell me

[02:15] <sorear> I know next to nothing about svn

[02:16] <sorear> how do I switch branches.

[02:23] *** justatheory joined
[02:24] *** akaey joined
[02:25] <[Coke]> svn switch https://svn.parrot.org/parrot/branches/codestring

[02:27] *** akaey left
[02:28] *** TiMBuS left
[02:28] *** justatheory left
[02:28] *** justatheory joined
[02:28] <sorear> [Coke]: ... I'm at over 200% memory usage with your change.

[02:29] <[Coke]> 200% of trunk usage?

[02:30] <sorear> 350%...

[02:30] <sorear> no, my total RAM

[02:30] <sorear> 1300MB and counting

[02:30] <TimToady> std: /[0-9]/

[02:30] *** agentzh joined
[02:31] *** TimToady sets mode: +vvv buubot dalek hugme

[02:31] *** TimToady sets mode: +vv ilogger2 IRSeekBot

[02:31] *** TimToady sets mode: +vvv lisppaste3 p6eval phenny

[02:31] <p6eval> std 30511:  ( no output )

[02:32] *** TimToady sets mode: +v pugssvn

[02:32] <sorear> 2082MB ...

[02:32] <[Coke]> how much memory do you have to work with?

[02:32] <[Coke]> (real)

[02:33] *** justatheory left
[02:33] <sorear> 384MB

[02:33] *** yinyin left
[02:33] <sorear> I run out of swap at 2330

[02:34] <[Coke]> ok. I'll see if chromatic can find the memory issue.

[02:34] <sorear> huh, it just fell to 1520

[02:34] *** jaldhar joined
[02:38] <diakopter> urgh

[02:39] <diakopter> I think p6eval got hanged

[02:41] <sorear> Failed allocation of 1137508116 bytes

[02:41] *** justatheory joined
[02:41] <sorear> after 13m42s real, 34s user

[02:42] <sorear> what, pray tell, was Parrot planning to do with a 1.13 GB contiguous memory block?

[02:42] <sorear> sounds horrible from a memory fragmentation standpoint

[02:44] *** yinyin joined
[02:47] * sorear switches back to trunk for now

[02:49] <[Coke]> yup. must be hanging onto too many PMCs.

[02:49] <eternaleye> rakudo: say "alive"

[02:49] <p6eval> rakudo c4857a: OUTPUT«unshift_string() not implemented in class 'FixedStringArray'␤»

[02:50] <[Coke]> or STRINGs.

[02:50] <sorear> So... why are we allocating so much memory at a time?

[02:50] <sorear> is somebody generating 1GB+ strings?

[02:51] <[Coke]> presumably because there's stuff not getting freed.

[02:51] <sorear> the garbage collectors I'm used to working with always malloc and free in units between 256KB and 16MB

[02:51] <[Coke]> so it's just allocating more and more.

[02:51] <[Coke]> I can't speak to that.

[02:51] <sorear> never 1.13 GB

[02:54] *** justatheory left
[02:56] *** xinming joined
[02:59] *** xinming_ left
[03:01] *** isBEKaml left
[03:02] <eternaleye> webfiend++ # Pushing for unity: http://www.perlmonks.org/?node_id=837151

[03:02] *** justatheory joined
[03:07] *** justatheory left
[03:13] *** snarkyboojum left
[03:15] *** justatheory joined
[03:16] *** snarkyboojum joined
[03:20] *** justatheory left
[03:27] *** justatheory joined
[03:28] *** alester joined
[03:32] *** justatheory left
[03:38] *** molaf joined
[03:39] *** justatheory joined
[03:43] *** jaldhar left
[03:43] *** jaldhar joined
[03:46] <sorear> avar: ping

[03:48] *** cdarroch left
[03:57] <TimToady> std: /[0-9]/

[03:57] <p6eval> std 30511: OUTPUT«===SORRY!===␤Invalid regex metacharacter (must be quoted to match literally) at /tmp/mqFyo7Wk2k line 1:␤------> /[0-⏏9]/␤Potential difficulties:␤  [0-9] appears to be an old-school character class; digits should be matched with \d instead at

[03:57] <p6eval> ../tm…

[03:57] <diakopter> better?

[03:57] <diakopter> rakudo: say 1

[03:57] <p6eval> rakudo c4857a: OUTPUT«unshift_string() not implemented in class 'FixedStringArray'␤»

[03:57] * diakopter mourns

[03:58] <TimToady> std: /[a-z]/

[03:58] <p6eval> std 30511: OUTPUT«===SORRY!===␤Invalid regex metacharacter (must be quoted to match literally) at /tmp/aJrHrYUndv line 1:␤------> /[a-⏏z]/␤Potential difficulties:␤  [a-z] appears to be an old-school character class; please use <[a..z]> if you mean a character

[03:58] <p6eval> ..cla…

[03:58] <TimToady> std: /[^a-z]/

[03:58] <p6eval> std 30511: OUTPUT«===SORRY!===␤Invalid regex metacharacter (must be quoted to match literally) at /tmp/4tK6j0RMZT line 1:␤------> /[^a-⏏z]/␤Potential difficulties:␤  [^a-z] appears to be an old-school character class; please use <-[a..z]> if you mean a character

[03:58] <p6eval> ..…

[03:59] <TimToady> std: /[aeiou]/

[03:59] <p6eval> std 30511: OUTPUT«Potential difficulties:␤  [aeiou] appears to be an old-school character class; please use <[aeiou]> if you␤    mean a character class, or quote it like 'aeiou' to match␤    string as a unit at /tmp/bxaPhk6L0b line 1:␤------> /[aeiou]⏏/␤ok 00:01 110m␤»

[03:59] <TimToady> std: /[aeiou\n]/

[03:59] <p6eval> std 30511: OUTPUT«Potential difficulties:␤  [aeiou\n] appears to be an old-school character class; please use <[aeiou\n]> if you␤    mean a character class, or quote it like "aeiou\n" to match␤    string as a unit at /tmp/VxQWOcXfV8 line 1:␤------> /[aeiou\n]⏏/␤ok 00:01 108m␤»

[04:00] <TimToady> std: /[^ \t]/

[04:00] <p6eval> std 30511: OUTPUT«Potential difficulties:␤  [^ \t] appears to be an old-school character class; please use <-[\x20\t]> if you mean a character class at /tmp/gorjWhD4k1 line 1:␤------> /[^ \t]⏏/␤ok 00:01 108m␤»

[04:00] <TimToady> std: /[^\ \t]/

[04:00] <p6eval> std 30511: OUTPUT«===SORRY!===␤No unspace allowed in regex; if you meant to match the literal character, please enclose in single quotes (' ') or use a backslashed form like \x20 at /tmp/YezaikqcXK line 1:␤------> /[^\⏏ \t]/␤Parse failed␤FAILED 00:01 107m␤»

[04:00] <TimToady> std: /[ \t]/

[04:00] <p6eval> std 30511: OUTPUT«Potential difficulties:␤  [ \t] appears to be an old-school character class; please use <[\x20\t]> if you␤    mean a character class, or quote it like " \t" to match␤    string as a unit at /tmp/DPL0RXIUU6 line 1:␤------> /[ \t]⏏/␤ok 00:01 108m␤»

[04:01] <TimToady> hmm, \s still seems "off"

[04:02] <TimToady> std: /[^ ]/

[04:02] <p6eval> std 30511: OUTPUT«Potential difficulties:␤  [^ ] appears to be an old-school character class; non-horizontal whitespace should be matched with \H instead at /tmp/bjGwStF9Ta line 1:␤------> /[^ ]⏏/␤ok 00:01 108m␤»

[04:05] *** REPLeffect left
[04:15] <diakopter> std: ![^]!

[04:15] <pugssvn> r30512 | lwall++ | [Cursor] old whitespace cclasses still produced bogus warnings 

[04:16] <diakopter> oh, it really doesn't like ![^]!

[04:16] <TimToady> should fail fine

[04:16] <diakopter> oh

[04:17] <diakopter> p6eval being dead-ish

[04:17] <diakopter> odd

[04:18] *** p6eval left
[04:19] *** p6eval joined
[04:20] *** p6eval left
[04:20] <sorear> rakudo: say "hi"

[04:20] <sorear> ...did I just crash it

[04:20] <diakopter> rakudo rebuild using too much ram

[04:21] <diakopter> that vps has only 1 GB

[04:21] <diakopter> disabling rebuild until parrot/rakudo ram usage improve

[04:21] *** Guest48051 joined
[04:21] *** p6eval joined
[04:21] <diakopter> rakudo: say 1

[04:22] <p6eval> rakudo c4857a: OUTPUT«unshift_string() not implemented in class 'FixedStringArray'␤»

[04:22] <diakopter> sigh

[04:22] <JimmyZ> haha

[04:22] <JimmyZ> rakudo: say 'hello, world'

[04:22] *** p6eval left
[04:23] *** p6eval joined
[04:23] <diakopter> rakudo: yo

[04:23] *** molaf left
[04:23] <diakopter> pugs: say 4

[04:23] <p6eval> pugs: OUTPUT«4␤»

[04:23] <diakopter> pugs: say 4

[04:23] <p6eval> pugs: OUTPUT«4␤»

[04:23] <diakopter> ok.

[04:23] <diakopter> rakudo disabled until rebuild fixed

[04:24] <diakopter> phenny: tell moritz_ I disabled rakudo rebuild and rakudo: p6eval target until the ram usage is improved

[04:24] <phenny> diakopter: I'll pass that on when moritz_ is around.

[04:25] *** Guest48051 left
[04:27] <diakopter> alpha: say 5

[04:27] <p6eval> alpha 30e0ed: OUTPUT«5␤»

[04:30] <TimToady> std: /[ \t]/

[04:30] <p6eval> std 30512: OUTPUT«Potential difficulties:␤  [ \t] appears to be an old-school character class; horizontal whitespace should be matched with \h instead at /tmp/g4x1YmOp1k line 1:␤------> /[ \t]⏏/␤ok 00:01 110m␤»

[04:31] <TimToady> std: /[abcd\n]/

[04:31] <p6eval> std 30512: OUTPUT«Potential difficulties:␤  [abcd\n] appears to be an old-school character class; please use <[abcd\n]> if you␤    mean a character class, or quote it like "abcd\n" to match␤    string as a unit at /tmp/x0oy6h02tz line 1:␤------> /[abcd\n]⏏/␤ok 00:01 108m␤»

[04:31] <TimToady> std: ![^]!

[04:31] <p6eval> std 30512: OUTPUT«===SORRY!===␤Prefix requires an argument at /tmp/lFvcw8iDXN line 1:␤------> ![^]⏏!␤Parse failed␤FAILED 00:01 108m␤»

[04:32] <TimToady> std: /[^ \t]/

[04:32] <p6eval> std 30512: OUTPUT«Potential difficulties:␤  [^ \t] appears to be an old-school character class; non-(horizontal whitespace) should be matched with \H instead at /tmp/YSeTaVu4A5 line 1:␤------> /[^ \t]⏏/␤ok 00:01 108m␤»

[04:33] *** szabgab left
[04:33] <TimToady> std: /[^\n]/

[04:33] <p6eval> std 30512: OUTPUT«Potential difficulties:␤  [^\n] appears to be an old-school character class; non-(vertical whitespace) should be matched with \V instead at /tmp/bsJEYD4bBR line 1:␤------> /[^\n]⏏/␤ok 00:01 108m␤»

[04:33] <TimToady> that one should probably point to \N instead

[04:35] <pugssvn> r30513 | lwall++ | [Cursor] recommend \N instead of \V for [^\n] 

[04:38] <diakopter> TimToady: while in the crontab, I noticed std gets rebuilt starting at 7,37

[04:38] <TimToady> std: /[^\n]/

[04:38] <p6eval> std 30512: OUTPUT«Potential difficulties:␤  [^\n] appears to be an old-school character class; non-(vertical whitespace) should be matched with \V instead at /tmp/zdVYjVXHYY line 1:␤------> /[^\n]⏏/␤ok 00:01 108m␤»

[04:39] <diakopter> that's speedy

[04:39] <diakopter> std seems a lot more responsive recently...?

[04:39] <TimToady> that's still the old one

[04:39] <diakopter> std: /[^\n]/

[04:39] <p6eval> std 30512: OUTPUT«Potential difficulties:␤  [^\n] appears to be an old-school character class; non-(vertical whitespace) should be matched with \V instead at /tmp/Sd1sczcIKE line 1:␤------> /[^\n]⏏/␤ok 00:01 108m␤»

[04:39] <diakopter> std: _

[04:39] <p6eval> std 30512: OUTPUT«===SORRY!===␤Undeclared name:␤ '_' used at line 1␤Check failed␤FAILED 00:01 107m␤»

[04:39] <diakopter> I wish the timer had more resolution

[04:39] <sorear> (cron is evil)

[04:40] <diakopter> sorear: :P

[04:40] <sorear> no, really

[04:41] *** alester left
[04:41] <diakopter> no, sabnzbd+, free ipv6 binaries usenet servers, and nzbs.org are (together) evil.

[04:41] <diakopter> how is cron evil

[04:42] <sorear> the whole polling thing is a good start

[04:42] <TimToady> std: /[^\n]/

[04:42] <p6eval> std 30512: OUTPUT«Potential difficulties:␤  [^\n] appears to be an old-school character class; non-(vertical whitespace) should be matched with \V instead at /tmp/MXB8nxiZK3 line 1:␤------> /[^\n]⏏/␤ok 00:01 108m␤»

[04:43] <TimToady> well, the main problem is that the interface is 180° from what a user wants.

[04:44] <sorear> what do users want?

[04:45] <TimToady> something more like a day-timer

[04:45] <TimToady> or a palm pilot

[04:49] <TimToady> and a way to name recurring tasks other than by writing a shell script, with the name being the major key, and the recurrence info subsumed into it

[04:49] <TimToady> and with the fine-grained adjustments after the coarse-grained :)

[04:51] <TimToady> the most important thing about a cron entry is *not* where it runs inside the hour, so why is that first?

[04:51] <TimToady> it's almost like forcing people to program in machine code

[04:51] <lue> .oO(ccron Camel CRON ...) [and hi]

[04:53] <lue> you got me thinking about an implementation of cron in perl6 :) (not that I'd be able to program it!)

[04:53] *** alester joined
[04:55] <sorear> cron is pretty widely hated, that's why there are like 8 competing implementations of it

[04:57] <lue> I never knew that (of course, I never needed to interface with cron directly :P)

[04:58] *** synth left
[04:59] *** alester left
[04:59] * lue wonders if S32::Temporal could turn into a better/worse implementation of cron if allowed to...

[05:02] <lue> afk and goodnight!

[05:03] *** ReiniUrban joined
[05:04] *** rurban left
[05:04] *** ReiniUrban is now known as rurban

[05:05] <sorear> Why does NQP take such a long time to process Grammar.pm?

[05:06] <sorear> Are regexes just that explosive?

[05:07] <JimmyZ> parrot is slow

[05:07] <TimToady> std: /[^\n]/

[05:07] <p6eval> std 30513: OUTPUT«Potential difficulties:␤  [^\n] appears to be an old-school character class; non-newlines should be matched with \N instead at /tmp/HxGk4IeqLw line 1:␤------> /[^\n]⏏/␤ok 00:01 110m␤»

[05:10] * JimmyZ wants PCC should be 3x faster.

[05:12] *** alester joined
[05:20] * [Coke] gives JimmyZ a commit bit to make it happen.

[05:21] * sorear needs to finish that memory profiler

[05:29] * TimToady wants it finished 3x faster.

[05:30] *** ash_ left
[05:32] *** szabgab joined
[05:34] *** M_o_C joined
[05:37] <[Coke]> sure, let me just finish this memory profiler first, that'll help!

[05:37] *** M_o_C left
[05:38] <eternaleye> What is this, a virtual machine for snails?!? It must be at least... THREE times this fast!

[05:38] <eternaleye> </zoolander>

[05:38] <TimToady> then we could do turtle graphics

[05:54] *** M_o_C joined
[05:55] *** M_o_C left
[05:57] *** alexn_org joined
[06:08] *** Su-Shee joined
[06:08] *** justatheory left
[06:17] <moritz_> god morning

[06:17] <phenny> moritz_: 04:24Z <diakopter> tell moritz_ I disabled rakudo rebuild and rakudo: p6eval target until the ram usage is improved

[06:17] <moritz_> h, what's wrong with rakudo's ram usage?

[06:17] *** k23z__ left
[06:23] <JimmyZ> hello moritz_ 

[06:23] <JimmyZ> I have a patch http://nopaste.snit.ch/20413

[06:24] <moritz_> JimmyZ: please submit it to RT, I'm not yet in a state of even beginning sanity

[06:30] <JimmyZ> RT doesn't love my email address

[06:30] *** rv2733 left
[06:30] <JimmyZ> blocked by RT

[06:32] <diakopter> moritz_: rakudo wouldn't rebuild

[06:32] <diakopter> rakudo_hidden: say(4)

[06:32] <p6eval> rakudo_hidden c4857a: OUTPUT«unshift_string() not implemented in class 'FixedStringArray'␤»

[06:33] <moritz_> oh crap

[06:33] <[Coke]> and we've already talked to the RT admins. they're not going to unblock that domain, methinks.

[06:33] <[Coke]> (that was months and months ago, but)

[06:35] <diakopter> windows task scheduler has worked for me for 18 years.  two employments ago, it was mission critical at my office.

[06:36] <diakopter> course I wrote scripts to programmatically schedule stuff.

[06:37] * moritz_ doesn't understand...

[06:37] <diakopter> sorry.

[06:37] <moritz_> a minute ago ~p6eval/p2/bin/perl6 worked

[06:37] <moritz_> and now it errors out too

[06:37] <diakopter> a minute ago?

[06:37] <moritz_> a minute ago, ye

[06:37] <moritz_> s

[06:38] <eternaleye> Clearly, whatever is wrong is contagious. Once you were exposed to the breakage, it transmitted itself.

[06:43] *** meppl joined
[06:46] *** justatheory joined
[06:48] *** alester left
[06:55] <moritz_> diakopter: I'm now re-building an older rakudo manually on the p6eval box

[06:56] *** justatheory left
[07:00] <[Coke]> moritz_: are regetting parrot from scratch each time?

[07:00] <[Coke]> or doing an svn up ?

[07:00] <[Coke]> if doing an svn up, it's probably a good idea to realclean /first/, then svn up.

[07:03] <moritz_> [Coke]: usually svn up

[07:04] <[Coke]> ok. safest way is prolly: 'make realclean ; svn up && perl Configure.pl --opts && make'

[07:04] <moritz_> the most robust approach would probably be a separate copy of the parrot repo, and then an svn export

[07:04] <moritz_> and nuke the build tree every time

[07:04] <[Coke]> because if the makefiles change during the svn up, the realclean may fail.

[07:04] <[Coke]> moritz_: even better.

[07:06] <moritz_> ah yes, the rebuild script already does the cleaning before Configure

[07:06] <moritz_> but after svn up

[07:07] <pugssvn> r30514 | moritz++ | [t/spec] rakudo unfudges 

[07:07] <pugssvn> r30515 | moritz++ | [evalbot] clean before "svn up", Coke++ 

[07:15] <avar> sorear: pong

[07:16] <sorear> avar: Was wondering if you had any nice examples of DBI code for me to turn into examples.

[07:24] <avar> there's some evil stuff in the guts of http://github.com/avar/hailo

[07:28] *** redicaps joined
[07:29] <moritz_> rakudo_hidden: say "foo"

[07:29] <p6eval> rakudo_hidden : OUTPUT«sh: ../p/bin/perl6: No such file or directory␤»

[07:30] <moritz_> rakudo_hidden: say "foo"

[07:30] <p6eval> rakudo_hidden : OUTPUT«sh: ../p/bin/perl6: No such file or directory␤»

[07:30] <sorear> avar: Oooh shiny

[07:30] <moritz_> rakudo_hidden: say "foo"

[07:30] <p6eval> rakudo_hidden : OUTPUT«sh: ../p/bin/perl6: No such file or directory␤»

[07:44] *** redicaps left
[07:44] *** redicaps joined
[07:56] *** proller joined
[07:57] <sorear> whee, fixed the final segfault in CGI:from<perl5>

[08:04] <moritz_> rakudo_hidden: say "foo"

[08:04] <p6eval> rakudo_hidden c4857a: OUTPUT«foo␤»

[08:04] <moritz_> diakopter: could pleaes unhide rakudo? from p6eval? :-)

[08:11] <moritz_> pmichaud mentioned that Rakudo already subclasses Cursor, but I can't find it in the source (except in src/core/Grammar.pm, but that's not used internally)

[08:11] <moritz_> can somebody find it?

[08:26] *** mantovan1 joined
[08:26] *** dakkar joined
[08:26] *** mantovan1 left
[08:31] * JimmyZ could find his patch in p6c

[08:33] *** mantovan1 joined
[08:33] *** mantovan1 left
[08:34] *** mantovan1 joined
[08:34] *** mantovan1 left
[08:35] *** mantovan1 joined
[08:35] *** mantovani left
[08:36] *** mantovan1 left
[08:37] *** mantovani joined
[08:51] <pugssvn> r30516 | moritz++ | [t/spec] class A does NonExistentRole should mention role name in the error message 

[08:51] <jnthn> o/

[08:54] <moritz_> \o

[08:54] * jnthn going to airport soon

[08:54] <jnthn> Is p6eval's Rakudo still busted?

[08:55] <jnthn> rakudo: say "alive"

[08:55] <jnthn> ...I presume so.

[08:56] *** p6eval left
[08:56] *** p6eval joined
[08:56] <moritz_> rakudo: say 'another test'

[08:56] <p6eval> rakudo c4857a: OUTPUT«another test␤»

[08:56] <moritz_> \o/ it's back

[08:56] <moritz_> it's an older version

[08:56] <jnthn> \o/

[08:56] <jnthn> Oh.

[08:56] <jnthn> What's wrong with latest?

[08:56] <moritz_> but still, better than nothing

[08:57] <moritz_> jnthn: excessive RAM usage

[08:57] <jnthn> Ah, OK.

[08:57] <moritz_> btw I have a patch that makes Cool.match() use Grammar instead of Regexp::Cursor... spectesting as we speak

[08:58] <moritz_> but for the other issue, adding \e back to regexes, I have no idea where to put it

[09:04] <jnthn> Should need the same things in Grammar.pm and Actions.pm, but within the Perl6::Regex section of the file.

[09:05] <moritz_> ah, right

[09:05] <moritz_> thanks, will try that after the current spectest run

[09:13] <jnthn> Cool

[09:14] <jnthn> Heading to the airport, maybe on later today from Iceland. o/

[09:14] <moritz_> have a good flight

[09:18] *** kokajxo joined
[09:18] <kokajxo> hi there, give me something I can write a news about

[09:19] <moritz_> what kind of news? for whom?

[09:20] <kokajxo> I write news for a french-newbies-website, and they might love Perl

[09:21] <kokajxo> where should I look to follow Perl 6 developpement and not miss big events ?

[09:22] <moritz_> http://planetsix.perl.org/

[09:22] <moritz_> and hang our here, of course :-)

[09:24] <kokajxo> I already follow this site, but the news on it are too specific

[09:25] <moritz_> general news can be found the perl6-announce mailing list (low traffic)

[09:25] <kokajxo> ok, thanks

[09:27] <kokajxo> and what if I want to get news about other Perl projects, like Catalyst ?

[09:28] <moritz_> blogs.perl.org, use.perl.org, perlsphere.net, ironman.enlightenedperl.org

[09:29] <moritz_> http://www.perlmonks.org/?node=Perl%20News

[09:29] <kokajxo> (my sentences sound wrong, I apologize for being so bad in English)

[09:29] <kokajxo> thanks a lot :)

[09:29] <moritz_> no problem; many of us in here are not native speakers

[09:30] <kokajxo> what will be the last version of Perl 5 ? 

[09:31] <moritz_> there's no plan to stop Perl 5 development

[09:32] <moritz_> actually it seems to me that Perl 5 development is healthier than it has been for many years

[09:32] <kokajxo> yes I read that

[09:33] <kokajxo> but there is no plan either to switch to Perl 6 ?

[09:33] <moritz_> well, every perl user has to decide on his own if he wants to switch to perl 6

[09:35] <kokajxo> and what if the modules on CPAN are not rewritten ? won't it be problematic ?

[09:36] <moritz_> porting modules to Perl 6 is indeed an important task

[09:36] <moritz_> but less pressing, now that perl 5 integration in rakudo works, to some degree

[09:37] *** redicaps left
[09:37] <moritz_> huh, patching Str.match to use Grammar instead of Regex::Cursors causes the <.print> rule to fail - it tries to call Mu.print :(

[09:37] <moritz_> maybe we need a separate subclass and then delegation

[09:41] *** IllvilJa joined
[09:42] <IllvilJa> o/

[09:42] <moritz_> \o

[09:42] <moritz_> rakudo: say ~Str.^parents

[09:42] <p6eval> rakudo c4857a: OUTPUT«Cool() Any() Mu()␤»

[09:45] *** yinyin left
[09:47] <moritz_> huh, this is weird

[09:48] <moritz_> even if I add \e to Perl6::Regex I get "Unrecognized backslash sequence"

[09:51] *** iblechbot joined
[09:53] *** kokajxo left
[10:19] *** Daniel8 joined
[10:22] *** riffraff joined
[10:23] <Daniel8> Fatal error: Call to undefined method Net_SMTP::getGreeting() in /usr/local/lib/php/Mail/smtp.php on line 316

[10:23] <moritz_> Fatal error: wrong IRC channel

[10:24] <Daniel8> this is perl.

[10:24] <moritz_> Daniel8: and this is about developing Perl 6

[10:24] <aesop> lol

[10:25] <Daniel8> Well someone directed me to the wrong place then.

[10:25] <moritz_> that happens, yes

[10:25] <moritz_> I can recommend perlmonks.org

[10:25] <Daniel8> #perl5 is the channel I need to go to?

[10:25] *** Daniel8 left
[10:25] <moritz_> #perl, more likely

[10:28] *** kokajxo joined
[10:41] <moritz_> \o/  ./perl6 -e '"foo" ~~ /.+/; say $/.WHAT'

[10:41] <moritz_> Match()

[10:41] <mathw> \o/

[10:41] * mathw applauds

[10:42] <moritz_> now it just dies when there is a capture in the regex...

[10:43] *** JimmyZ left
[10:46] *** alester joined
[10:52] *** sundar_afk joined
[10:58] *** envi^home joined
[10:59] *** pmurias joined
[11:05] *** riffraff left
[11:11] *** alester left
[11:16] *** bloonix joined
[11:20] *** takadonet1 joined
[11:21] *** drbean left
[11:21] *** takadonet1 left
[11:30] *** sundar_afk left
[11:38] <pmurias> diakopter: 

[11:38] <pmurias> sorry pressed enter accidently

[11:48] <moritz_> rakudo: class M is Array { }; my $a = M.new; $a[0]; say $a

[11:48] <p6eval> rakudo c4857a: OUTPUT«␤»

[11:48] <moritz_> rakudo: class M is Array { }; my $a = M.new; $a[0]; say $a[}]

[11:48] <p6eval> rakudo c4857a: OUTPUT«Unable to parse postcircumfix:sym<[ ]>, couldn't find final ']' at line 11␤current instr.: 'perl6;Regex;Cursor;FAILGOAL' pc 1664 (ext/nqp-rx/src/stage0/Regex-s0.pir:907)␤»

[11:48] <moritz_> rakudo: class M is Array { }; my $a = M.new; $a[0]; say $a[0]

[11:48] <p6eval> rakudo c4857a: OUTPUT«␤»

[11:48] <moritz_> rakudo: class M is Array is Hash { }; my $a = M.new; $a[0]; say $a[0]

[11:49] *** mce_ro joined
[11:49] <p6eval> rakudo c4857a: OUTPUT«␤»

[11:49] *** JimmyZ joined
[11:53] *** JimmyZ left
[11:53] *** zibri left
[11:56] *** pmurias left
[12:10] <takadonet> morning all

[12:12] *** drbean joined
[12:12] *** avar left
[12:19] <colomon> o/

[12:25] *** ruoso joined
[12:31] <dalek> nqp-rx: 8712c4a | moritz++ | src/Regex/Cursor.pir:

[12:31] <dalek> nqp-rx: create new match objects and arrays in separate methods that can easily be overridden from HLLs

[12:31] <dalek> nqp-rx: review: http://github.com/perl6/nqp-rx/commit/8712c4a0f706b3eaf031467e94e1b9e0fe997b1c

[12:31] <dalek> nqp-rx: 5c23708 | moritz++ | src/Regex/Cursor.pir:

[12:31] <dalek> nqp-rx: Merge remote branch 'origin/mob2'

[12:31] <dalek> nqp-rx: This adds overridable new_match and new_array methods to Regex::Cursor, which

[12:31] <dalek> nqp-rx: simplify generation of HLL-specific match objects. There's a proof-of concept

[12:31] <dalek> nqp-rx: Rakudo branch 'mob3' which uses this new facility.

[12:31] <dalek> nqp-rx: review: http://github.com/perl6/nqp-rx/commit/5c2370818c100bf49a5ba05e5b3590bcf0e30d68

[12:37] <dalek> nqp-rx: 3f00ce8 | moritz++ |  (5 files):

[12:37] <dalek> nqp-rx: update stage0 files

[12:37] <dalek> nqp-rx: review: http://github.com/perl6/nqp-rx/commit/3f00ce88490997dfacdd6a5d1a92305fcc33fe57

[12:38] *** bluescreen joined
[12:39] *** bluescreen is now known as Guest70305

[12:53] *** am0c left
[12:53] *** kst left
[12:53] *** kst` joined
[13:01] *** SmokeMachine joined
[13:03] *** ReiniUrban joined
[13:05] *** rurban left
[13:05] *** ReiniUrban is now known as rurban

[13:07] *** am0c joined
[13:08] *** JimmyZ joined
[13:16] *** mikehh joined
[13:24] *** envi_home2 joined
[13:26] *** envi^home left
[13:31] *** tylerni7 left
[13:33] *** tylerni7 joined
[13:44] *** rgrau_ joined
[13:46] *** sahadev joined
[13:46] <bbkr> rakudo: class A::B {}; my A $a;

[13:46] <p6eval> rakudo c4857a: OUTPUT«In "my" declaration, typename A must be predeclared (or marked as declarative with :: prefix) at line 11, near " $a;"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[13:47] *** wolv joined
[13:47] <bbkr> so http://rt.perl.org/rt3/Ticket/Display.html?id=62900 can be closed? it's another ticket of Rakudo trying to access not declared class

[13:48] <bbkr> rakudo: role A::B {}; say 42 ~~ A

[13:48] <p6eval> rakudo c4857a: OUTPUT«Could not find sub &A␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[13:49] *** dual left
[13:50] <[Coke]> what is a "sink expression" ?

[13:51] <snarkyboojum> expression in void context?

[13:53] <snarkyboojum> or is that sink context

[13:57] <[Coke]> used in reference to $^a in the recent ticket.

[14:06] *** zostay joined
[14:10] <pugssvn> r30517 | lwall++ | [STD] partial fix to prevent leakage of ::T from role signatures 

[14:10] <pugssvn> r30517 | (current fix will lose sigs of file-scoped generic roles)

[14:19] *** agentzh left
[14:19] <bbkr> rakudo: sub foo { my $a = 5; say $^a }; foo(7); # http://rt.perl.org/rt3/Ticket/Display.html?id=64310 looks like solved, but I don't know in which S* look for test cases

[14:19] <p6eval> rakudo c4857a: OUTPUT«Cannot assign to readonly value␤current instr.: '&die' pc 17391 (src/builtins/Junction.pir:410)␤»

[14:23] *** iblechbot left
[14:25] *** hercynium joined
[14:34] *** dual_ joined
[14:51] *** JimmyZ left
[14:52] *** JimmyZ joined
[14:54] *** nihiliad joined
[14:54] *** molaf joined
[14:54] *** ash_ joined
[14:55] *** JimmyZ left
[15:01] <bbkr> rakudo: A.new

[15:01] <p6eval> rakudo c4857a: OUTPUT«Could not find sub &A␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[15:01] <bbkr> why warning is about sub and not about class?

[15:03] <[Coke]> you could run it through parrot perl6.pbc --target=POST to see what it parses to.

[15:04] <TimToady> std: A.new

[15:04] <p6eval> std 30517: OUTPUT«===SORRY!===␤Undeclared name:␤ 'A' used at line 1␤Check failed␤FAILED 00:01 109m␤»

[15:04] <TimToady> std: a.new

[15:04] <p6eval> std 30517: OUTPUT«===SORRY!===␤Undeclared routine:␤      'a' used at line 1␤Check failed␤FAILED 00:01 107m␤»

[15:06] <bbkr> what is the difference between "rakudo" and "std" evals here?

[15:06] <colomon>  bbkr: in the expression A.new, A could be a class or a sub.  Rakudo just assumes sub unless it knows otherwise.

[15:07] <TimToady> std checks for definedness at check time (end of compile time); rakudo doesn't, and just assumes any unrecognized name is a post-declared function

[15:07] <bbkr> ok, so http://rt.perl.org/rt3/Ticket/Display.html?id=69752 is solved now?

[15:08] <TimToady> std's check is also guessing based on case

[15:08] <TimToady> hence the 'name' vs 'routine' above

[15:08] *** kokajxo left
[15:08] *** jhuni joined
[15:08] <TimToady> but it only guesses for a better message; has nothing to do with semantics

[15:09] <colomon> bbkr: appears so.

[15:10] <bbkr> in which t/S* should i look for the tests about accessing undefined methods? i'd like to check if it's tested before closing

[15:11] <TimToady> S12 is appropriate for methods

[15:12] <TimToady> but the above is not a missing method

[15:12] <ash_> rakudo: my $x *= 3; say $x; 

[15:12] <p6eval> rakudo c4857a: OUTPUT«3␤»

[15:15] *** wolverian left
[15:16] *** mce_ro left
[15:16] *** wolv is now known as wolverian

[15:17] <bbkr> TimToady: then where tests for such case should be? in t/spec/S02-names_and_variables/names.t ?

[15:19] <moritz_> std: Module

[15:19] <p6eval> std 30517: OUTPUT«ok 00:01 107m␤»

[15:22] <TimToady> moritz_: note that std considers Module to be a role, not a class

[15:23] <TimToady> bbkr: that sounds about right

[15:24] *** woosley joined
[15:26] <woosley> quit

[15:27] <bbkr> TimToady: thanks, I'm adding test now...

[15:27] *** k23z__ joined
[15:28] *** woosley left
[15:29] <ash_> rakudo: my $a := 3;

[15:29] <p6eval> rakudo c4857a: OUTPUT«:= binding of variables not yet implemented␤current instr.: '&die' pc 17391 (src/builtins/Junction.pir:410)␤»

[15:30] <ash_> are   Module's supposed to  be more like classes or roles? or neither? 

[15:31] <TimToady> Module is just the interface for exporting, which classes also do; dunno whether a role can export

[15:31] *** am0c left
[15:33] <TimToady> phenny: tell lichtkind in best-of tablet, for 1..15:by(-2) -> $i {...}

[15:33] <phenny> TimToady: I'll pass that on when lichtkind is around.

[15:35] <TimToady> phenny: tell lichtkind ...is wrong two ways, no ':by' anymore, and range doesn't autoreverse.  use something like for 15,13...1 -> $i {...}

[15:35] <phenny> TimToady: I'll pass that on when lichtkind is around.

[15:35] *** sundar joined
[15:38] *** rv2733 joined
[15:46] <pugssvn> r30518 | moritz++ | [t/spec] test for RT #71478, sensible error message for passing two arguments to one hash parameter 

[15:47] *** proller left
[15:48] *** justatheory joined
[15:49] *** proller joined
[15:50] <ash_> oh, neat, is someone working on a STD p5 grammar? (i assume TimToady ?)

[15:52] <ash_> I just stumble upon it in the pugs code repository 

[15:53] <moritz_> yes

[15:53] <moritz_> for a well-behaved subset of P5

[15:54] <ash_> ah, cool

[15:54] <ash_> what do you mean by well-behaved? 

[15:54] <moritz_> along the lines of what PPI can parse

[15:54] <moritz_> ie if you don't run BEGIN blocks

[15:55] <ash_> got ya

[15:55] <TimToady> STD_P5 is not really a p5 grammar yet, except for the regex bits

[15:55] <TimToady> the rest of it is mostly just the p6 grammar with the p6-ey bits chopped out

[15:55] <TimToady> so it's still a work in progress

[15:56] <TimToady> actually, lately it's been a work in lack-of-progress  :)

[15:56] <ash_> nq-nqp is nqp with out the regex bits... and the code generation, but i am working on that 

[15:56] <TimToady> however, I don't think STD_P5 will, long term, be restricted from running BEGIN

[15:57] *** _buno_ joined
[16:00] *** eternaleye left
[16:01] <TimToady> neither will STD_P6, for that matter...

[16:01] *** woosley joined
[16:01] <moritz_> when STD_P6 can run perl 5 code, we'll call it "ponie" :-)

[16:01] <TimToady> as with the 'eval' escape valve, we allow BEGIN, but try to make it unnecessary

[16:03] <TimToady> or '6ouᴉƏ'

[16:04] <ash_> if i can get nq-nqp to run any of the test suite then i'll call it a success... my current stumbling block is runtime support >< 

[16:05] <ash_> (the test suite was stolen from nqp-rx) 

[16:05] <moritz_> ash_: is nq-nqp in a public repo anywhere?

[16:05] <ash_> yeah, github 

[16:05] <ash_> http://github.com/ashgti/nq-nqp-rx 

[16:07] * moritz_ tries to remember how cmake is called

[16:10] *** kokajxo joined
[16:10] <ash_> cmake . 

[16:11] <ash_> then just make 

[16:11] <moritz_> well, first I need to install llvm and flex, it seems

[16:12] <ash_> i just updated the readme, it lists the version of all of the tools i am using 

[16:12] *** brrant joined
[16:13] <moritz_> seems older cmake versions don't recognize flex

[16:14] <ash_> what version are you using? 

[16:14] <moritz_> 2.6.3

[16:14] <ash_> i haven't tried it on any other systems recently

[16:14] <moritz_> (the one that comes with Debian stable)

[16:16] <ash_> I could probably just run flex and bison locally, and put the generated code in my repo, i just haven't been since I make changes to them a lot still

[16:16] <moritz_> no worries

[16:17] * moritz_ tries to build llvm with 'make -j'

[16:17] *** woosley left
[16:18] <ash_> when you configure it, i'd recommend disabling all other targets except your host target

[16:18] <moritz_> load average is at 10, computer still responsive

[16:18] <ash_> it will try to build all of the targetable processors, which is a lot, and chances are you won't be using the llvm for cross compiling 

[16:19] *** woosley joined
[16:19] <moritz_> it's a nice experiment

[16:19] <moritz_> load decreasing, peaked at ~20

[16:22] *** cdarroch joined
[16:22] *** cdarroch left
[16:22] *** cdarroch joined
[16:23] <moritz_> ok, crashed my computer after launching ~150 instances of g++ at once

[16:23] <TimToady> role Foo[::T] { has T $.x }; my T $x; # should fail 2nd T

[16:23] <TimToady> std: role Foo[::T] { has T $.x }; my T $x; # should fail 2nd T

[16:23] <p6eval> std 30518: OUTPUT«===SORRY!===␤In my declaration, typename 'T' must be predeclared (or marked as declarative with :: prefix) at /tmp/XjyEDwng0S line 1:␤------> role Foo[::T] { has T $.x }; my T⏏ $x; # should fail 2nd T␤Malformed my at /tmp/XjyEDwng0S line

[16:23] <p6eval> ..1:␤----…

[16:24] *** woosley left
[16:25] <pugssvn> r30519 | bbkr++ | added test for RT #69752 

[16:27] *** woosley joined
[16:28] *** sundar left
[16:28] <TimToady> std: role Foo[::T];  my T $x;  # shouldn't fail, but does

[16:28] <p6eval> std 30519: OUTPUT«ok 00:01 110m␤»

[16:28] <TimToady> or...not...

[16:29] <TimToady> hmm...

[16:30] <TimToady> std: role Foo[::T]; package Other { my T $x; };

[16:30] <p6eval> std 30519: OUTPUT«===SORRY!===␤In my declaration, typename 'T' must be predeclared (or marked as declarative with :: prefix) at /tmp/wnyohMBSvD line 1:␤------> role Foo[::T]; package Other { my T⏏ $x; };␤Malformed my at /tmp/wnyohMBSvD line 1:␤------> role

[16:30] <p6eval> ..F…

[16:30] <TimToady> some kind of package pollution issue

[16:31] <TimToady> std: role Foo[::T] { package Other { my T $x; }; } # double checking

[16:31] <p6eval> std 30519: OUTPUT«ok 00:01 110m␤»

[16:33] <TimToady> rakudo: role Foo[::T]; package Other { my T $x; };

[16:33] <p6eval> rakudo c4857a:  ( no output )

[16:33] <TimToady> rakudo: role Foo[::T];  my T $x;

[16:34] <p6eval> rakudo c4857a:  ( no output )

[16:34] <TimToady> rakudo: role Foo[::T];

[16:34] <p6eval> rakudo c4857a:  ( no output )

[16:34] <TimToady> rakudo: role Foo[::T] {}

[16:34] <p6eval> rakudo c4857a:  ( no output )

[16:34] <TimToady> rakudo: say 42

[16:34] <p6eval> rakudo c4857a: OUTPUT«42␤»

[16:35] <bbkr> rakudo: say rand * Inf # checking if http://rt.perl.org/rt3/Ticket/Display.html?id=70730 is fixed

[16:35] <p6eval> rakudo c4857a: OUTPUT«Inf␤»

[16:39] *** ruoso left
[16:42] *** hicx174 left
[16:45] <TimToady> ⅋ ʞⅎɐ

[16:46] <pugssvn> r30520 | bbkr++ | RT #70730 test added 

[16:48] <bbkr> rakudo: my @a = 1, 2, 3; my @b = (@a.shift for ^3); @b[0].WHAT

[16:48] <p6eval> rakudo c4857a: OUTPUT«Method 'WHAT' not found for invocant of class 'ArrayIterator'␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[16:52] <bbkr> rakudo: say ("x" ~~ Str).WHAT

[16:52] <p6eval> rakudo c4857a: OUTPUT«Int()␤»

[16:53] *** gurjeet joined
[16:56] <bbkr> rakudo: say /()/.WHAT

[16:56] <p6eval> rakudo c4857a: OUTPUT«␤Divide by zero␤current instr.: 'infix:</>' pc 303739 (src/gen/core.pir:3078)␤»

[16:56] <bbkr> bug?

[16:56] *** ash_ left
[16:58] *** Intensity left
[17:01] *** dakkar left
[17:02] *** colomon left
[17:02] *** colomon joined
[17:03] *** mberends joined
[17:04] *** ash_ joined
[17:07] <diakopter> std: say /()/.WHAT

[17:07] <p6eval> std 30520: OUTPUT«===SORRY!===␤Unmatched closing bracket at /tmp/hZDnwCuyq6 line 1:␤------> say /(⏏)/.WHAT␤    expecting regex atom␤Parse failed␤FAILED 00:01 110m␤»

[17:10] *** _buno_ left
[17:14] <mberends> ^^ unmatched closing bracket?

[17:16] <diakopter> std: say /( )/.WHAT

[17:16] <p6eval> std 30520: OUTPUT«===SORRY!===␤Unmatched closing bracket at /tmp/BluFrgXo8Z line 1:␤------> say /( ⏏)/.WHAT␤    expecting regex atom␤Parse failed␤FAILED 00:01 108m␤»

[17:16] <diakopter> std: say /(.)/.WHAT

[17:16] <p6eval> std 30520: OUTPUT«ok 00:02 108m␤»

[17:16] <diakopter> std: say /(|)/.WHAT

[17:16] <p6eval> std 30520: OUTPUT«===SORRY!===␤Unmatched closing bracket at /tmp/Ks77RoGeg9 line 1:␤------> say /(|⏏)/.WHAT␤    expecting regex atom␤Parse failed␤FAILED 00:01 108m␤»

[17:17] *** jaldhar left
[17:17] <bbkr> i added info to: http://rt.perl.org/rt3/Ticket/Display.html?id=71800

[17:19] *** chitragupt joined
[17:21] <bbkr> rakudo: sub loop() { say "OH HAI" }; loop()

[17:22] <p6eval> rakudo c4857a: OUTPUT«Whitespace required after 'loop' at line 11, near "()"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[17:23] *** [particle] left
[17:24] <TimToady> std: sub loop() { say "OH HAI" }; loop()

[17:24] <p6eval> std 30520: OUTPUT«ok 00:01 109m␤»

[17:24] <bbkr> it's already in RT, i was just checking

[17:25] *** [particle] joined
[17:26] <pugssvn> r30521 | mberends++ | [vill] small adjustments for the recently released LLVM  2.7 

[17:34] <pugssvn> r30522 | lwall++ | [STD] fix LTA null regex/unexpected bracket error messages discovered by diakopter++ 

[17:35] <TimToady> someday I need to unify <stopper> and $*GOAL

[17:36] *** M_o_C joined
[17:43] *** brrant left
[17:43] <TimToady> std: { package Foo; }

[17:44] <p6eval> std 30521: OUTPUT«===SORRY!===␤Semicolon form of package definition must be at outermost level at /tmp/UJ19tYAP6U line 1:␤------> { package Foo⏏; }␤    expecting any of:␤  name␤   trait␤Parse failed␤FAILED 00:01 109m␤»

[17:44] <TimToady> already found two *.t files that violate that  :)

[18:04] <pugssvn> r30523 | lwall++ | [t/spec] semicolon form of package declaration not allowed in subscope 

[18:09] *** mberends left
[18:22] *** proller left
[18:24] <pugssvn> r30524 | lwall++ | [STD] minor message tweaks 

[18:37] <[Coke]> ANyone here going to yapc::na ?

[18:40] *** molaf_ joined
[18:41] *** cdarroch left
[18:43] *** molaf left
[18:45] *** cdarroch joined
[18:45] *** cdarroch left
[18:45] *** cdarroch joined
[18:47] <pugssvn> r30525 | moritz++ | [t/spec] test for RT #74608, time() is limited to zero arguments 

[18:54] *** ruoso joined
[18:58] <kolibrie> [Coke]: kolibrie is going to YAPC::NA

[18:58] *** ShaneC joined
[18:58] *** dual_ left
[18:59] *** ShaneC left
[18:59] *** meppl left
[19:03] <Tene> [Coke]: I have thought about it, but not enough to remember where or when it is.  I'd like to go, though.

[19:07] *** pmurias joined
[19:07] <pmurias> diakopter: hi

[19:07] <diakopter> hi\

[19:07] *** ShaneC joined
[19:08] *** ShaneC left
[19:08] <colomon> [Coke]: I'm going to yapc:na.

[19:08] <pugssvn> r30526 | pmurias++ | [mildew] the perlesque backend runs hello world 

[19:08] <colomon> Columbus is very convenient for me, not much of a drive and family to stay with when I'm there.

[19:08] <pmurias> diakopter: got hello world working under mildew's perlesque backend

[19:09] <dalek> csmeta: r230 | pawelmurias++ | trunk/Sprixel/ (6 files):

[19:09] <dalek> csmeta: added just enough runtime to run hello world compiled by mildew

[19:09] <dalek> csmeta: review: http://code.google.com/p/csmeta/source/detail?r=230

[19:09] <diakopter> pmurias: cool :)

[19:10] <diakopter> pmurias: wow..

[19:10] <diakopter> that's..

[19:11] <diakopter> cool.

[19:11] <diakopter> what's the perlesque code that runs this?

[19:13] <diakopter> pmurias: are you using an IDE? or did you modify the .csproj by hand?

[19:13] *** mce_ro joined
[19:14] <diakopter> just curious.

[19:14] <pmurias> http://pastie.org/940710

[19:14] <pmurias> diakopter: i modified .csproj by hand

[19:14] <pmurias> is that wrong?

[19:18] <ash_> std: package Foo { our $a;  }; 

[19:18] <p6eval> std 30525: OUTPUT«ok 00:01 110m␤»

[19:18] <diakopter> pmurias: no :)

[19:18] <ash_> std: { package Foo; } 

[19:18] <p6eval> std 30525: OUTPUT«===SORRY!===␤Semicolon form of package definition not allowed in subscope;␤  please use block form at /tmp/tfHgxQHKiI line 1:␤------> { package Foo⏏; }␤    expecting any of:␤      name␤   trait␤Parse failed␤FAILED 00:01 107m␤»

[19:19] <ash_> std: { package Foo { our $a; }; }

[19:19] <diakopter> pmurias: ha; what syntax highlighting language is that

[19:19] <p6eval> std 30525: OUTPUT«ok 00:01 108m␤»

[19:19] <pmurias> don't know i use App::Nopaste

[19:21] <diakopter> pmurias: lol; it thinks it's Ruby

[19:24] <diakopter> pmurias: I probably need to spend some time and make an App::Persistent perl5 program that wraps a persistent mono instance

[19:24] *** kensanata joined
[19:24] <diakopter> maybe using sorear's pty thing

[19:24] <dalek> csmeta: r231 | diakopter++ | trunk/Sprixel/src/Grammar/Grammar.cs:

[19:24] <dalek> csmeta: [perlesque] generalize the type resolution, and add several more namespaces.

[19:24] <dalek> csmeta: review: http://code.google.com/p/csmeta/source/detail?r=231

[19:25] <pmurias> diakopter: how having an App::Persistent wrapper around mono would help?

[19:26] <diakopter> the JIT (CIL to machine code) time of the compiled perlesque grammar/compiler is 80-90% of the startup time of perlesque.exe

[19:27] <diakopter> compiling the first stage takes only .1s

[19:27] <diakopter> but JITing that takes seconds

[19:27] <diakopter> for mono, at least.

[19:27] <diakopter> on windows, it's, like, an unnoticeable pause

[19:27] <diakopter> .2s or something

[19:27] <pmurias> on linux perlesque.exe takes 1.5 sec to start up

[19:27] <diakopter> yeah

[19:28] <diakopter> wait, startup, or also process empty input?

[19:28] <diakopter> I'm referring to also processing empty input

[19:29] <pmurias> 0.95 for processing a simple test

[19:29] <diakopter> on windows if I do:  perlesque.exe foo.txt  (where foo.txt is an empty file), it's entirely finished in .3s

[19:30] <diakopter> but on linux on the same machine it's like 10x slower (mono)

[19:30] <diakopter> yes, in a VM

[19:30] <diakopter> but still.

[19:30] <diakopter> 0.95 in addition to 1.5s?

[19:30] <pmurias> but asmbly_1.exe runs in 0.086

[19:30] <diakopter> yeah

[19:30] <pmurias> diakopter: just 0.95

[19:30] <diakopter> heh; ok.

[19:30] <diakopter> your machine is much faster than mine I guess

[19:33] *** patrickas joined
[19:33] <pugssvn> r30527 | moritz++ | [t/spec] Test for RT #73886, loading a class from inside a method 

[19:35] <pmurias> diakopter: having Sprixel accept perlesque_source_from_that_file newline output_bytecode_to_that_file newline in a loop should be enough to workaround the startup times

[19:35] <diakopter> interesting

[19:35] <moritz_> FastCGI for compilers :-)

[19:36] <diakopter> so that would be the program wrapped by App::Persistent?

[19:36] <pmurias> App::Persistent works for perl stuff only

[19:36] <diakopter> pthphphtphpht

[19:36] <diakopter> b

[19:37] <pmurias> ?

[19:37] <diakopter> nm.  I'll think/work about/on it and get back to you

[19:41] *** Trashlord left
[19:43] *** Trashlord joined
[19:49] *** masak joined
[19:49] <masak> ahoy, #perl6!

[19:50] <moritz_> ahoi

[19:50] *** hicx174 joined
[19:51] <colomon> o/

[19:51] <masak> I had to attend someone's bachelor party. bot now I'm back :)

[19:51] <moritz_> should I pity you? :-)

[19:52] <masak> I don't see what difference it would make :)

[19:52] <masak> but thanks for the concern.

[19:52] <pugssvn> r30528 | pmurias++ | [mildew] add missing file 

[19:52] <colomon> I'm translating nice Perl 6 code into C++.... :)

[20:01] <colomon> (actually, not sure if that means you should pity me or pity my code....)

[20:01] <masak> :)

[20:01] *** Metamucil joined
[20:06] <masak> wow, you've been active in RT today.

[20:07] *** kensanata left
[20:10] *** pyrimidine joined
[20:10] <masak> rakudo: sub foo { my $a = 5; say $^a }; foo(7);

[20:10] <p6eval> rakudo c4857a: OUTPUT«Cannot assign to readonly value␤current instr.: '&die' pc 17391 (src/builtins/Junction.pir:410)␤»

[20:11] <[Coke]> if anyone has more memory than sorear, I'd be interested to know if parrot's branches/codestring.pmc is faster than trunk for building rakudo - I've got some folks looking at some tricksy memory issues that my branch exacerbates, but if we can resolve this, I'm hoping it's a speed win.

[20:11] <masak> bbkr: that's not an indication that the ticket is solved. it shouldn't get to run-time.

[20:11] <masak> std: sub foo { my $a = 5; say $^a }; foo(7);

[20:11] <p6eval> std 30528: OUTPUT«Potential difficulties:␤  Useless redeclaration of variable $a (see line 1) at /tmp/Wm8LdU65IV line 1:␤------> sub foo { my $a = 5; say $^a⏏ }; foo(7);␤ok 00:01 110m␤»

[20:11] <[Coke]> (works great for me with 2G. =-)

[20:14] <masak> rakudo: say /[]/.WHAT

[20:14] <p6eval> rakudo c4857a: OUTPUT«␤Divide by zero␤current instr.: 'infix:</>' pc 303739 (src/gen/core.pir:3078)␤»

[20:14] <moritz_> now that's weird

[20:14] <masak> it's funny :)

[20:14] <moritz_> rakudo: / /

[20:14] <p6eval> rakudo c4857a: OUTPUT«Null regex not allowed at line 11, near ""␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[20:14] <masak> std: say /[]/.WHAT

[20:14] <p6eval> std 30528: OUTPUT«===SORRY!===␤Null pattern not allowed at /tmp/MLXbMLWCyY line 1:␤------> say /[⏏]/.WHAT␤    expecting regex atom␤Parse failed␤FAILED 00:01 108m␤»

[20:14] <moritz_> rakudo: /[ ] /

[20:14] <p6eval> rakudo c4857a:  ( no output )

[20:15] <pugssvn> r30529 | moritz++ | [t/spec] fudge operator-overload/subs.t for rakudo 

[20:16] <dalek> rakudo: d12eed6 | moritz++ | t/spectest.data:

[20:16] <dalek> rakudo: run S06-operator-overloading/sub.t

[20:16] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/d12eed658115b0f2c289b5f0ce8844ef9e7eaefd

[20:16] * jnthn made it to Iceland o/

[20:17] <masak> jnthn!

[20:17] <moritz_> \o/

[20:17] <masak> jnthn: how's Iceland?

[20:17] <jnthn> Awesome so far.

[20:17] <colomon> \o/

[20:17] <jnthn> Been swimming in power plant waste water.

[20:18] <masak> o.O

[20:18] *** lisppaste3 left
[20:18] *** lisppaste3 joined
[20:18] <jnthn> masak: It's WAY better than it sounds!

[20:18] <[Coke]> jnthn: ... it would have to be.

[20:18] <colomon> it's warm

[20:18] <moritz_> jnthn: geothermal power plant?

[20:18] <jnthn> moritz_: Right. :-)

[20:18] <masak> phew.

[20:19] <patrickas> jnthn: Nuclear power plant ?

[20:19] <moritz_> well, earther warmth is certainly nuclear

[20:19] <moritz_> *earth

[20:20] <colomon> heat pollution from the waste water from the coal burning plants near my parents' house means the river hasn't frozen over enough to walk to Canada in 60 years....  :)

[20:21] <jnthn> Look up Blue Lagoon if you want to see a slightly better phrased description. ;-)

[20:25] <masak> kokajxo: saluton, haven't seen you here before.

[20:27] <masak> yay, the Match branch landed!

[20:27] <moritz_> masak: nope

[20:27] <moritz_> masak: it works fine... as long as the regex contains no captures

[20:28] <masak> bah. who needs captures? :)

[20:28] <moritz_> then it complains that set_pmc_keyed is not implemented in class Match

[20:28] <masak> any idea what's wrong?

[20:28] <masak> that sounds familiar-ish.

[20:28] *** Su-Shee left
[20:28] <moritz_> and I don't know how to install a vtable override in the setting

[20:28] <masak> nor I.

[20:29] <moritz_> jnthn: do you know that, by any chance?

[20:29] <jnthn> moritz_: Nothing specific without digging a bit more deeply.

[20:31] *** hercynium left
[20:34] *** eternaleye joined
[20:34] *** truewar joined
[20:35] <moritz_> the second problem with that branch is: I need to use a class that inherits from Regex::Cursor for matching (here: Grammar)

[20:36] <moritz_> and this somehow introduces an inheritance from Mu

[20:36] <moritz_> (don't know why...)

[20:36] <moritz_> so that <.print> calls Mu.print

[20:36] <moritz_> => epic fail

[20:36] <masak> indeed.

[20:36] <masak> that method name keeps causing problems :)

[20:37] <masak> in alpha it was that match objects didn't print when calling .print on them, because that method was overridden...

[20:37] <masak> alpha: "foo" ~~ /foo/; $/.print

[20:37] <p6eval> alpha 30e0ed:  ( no output )

[20:37] <masak> rakudo: "foo" ~~ /foo/; $/.print

[20:37] <p6eval> rakudo c4857a: OUTPUT«Method 'print' not found for invocant of class 'Regex;Match'␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[20:37] <moritz_> that problem shouldn't exist in he branch

[20:38] *** eternaleye left
[20:38] <masak> good.

[20:38] <moritz_> because Match objects are very detached from the cursor

[20:38] <masak> aye.

[20:38] <masak> I like that.

[20:38] <moritz_> and I don't understand where the other error comes from

[20:38] <masak> I don't understand it fully yet, but I like it.

[20:38] <moritz_> I have class Grammar is Regex::Cursor {

[20:39] <moritz_> and Regex::Cursor is a NQP class

[20:39] <moritz_> not a parrot class

[20:39] <moritz_> so why does it ever dispatch to Mu.print?

[20:39] <moritz_> maybe I have to do a more careful analysis

[20:40] <masak> I got an interesting comment from a Perl5er on my last blog post: http://use.perl.org/~masak/journal/40333 -- I've replied, and then he's replied to my reply. basically, he thinks the code I'm linking to in the post looks more line-noisy than Perl 5 code.

[20:40] <masak> maybe I've adopted a very abbreviated style when writing Perl 6, I dunno. but I honestly don't think it's that line-noisy. would be interesting to hear other people's comments too.

[20:41] <masak> (note: there's a part gone missing from the code he pasted, since it contained unescaped angle brackets)

[20:41] *** patrickas left
[20:42] <sorear> moritz_: g++ crashed your entire computer?  now /that/ is impressive

[20:42] <moritz_> sorear: 150 parallel invocations of g++

[20:43] <moritz_> sorear: my mistake was to build llvm with 'make -j' (no concurrency limit)

[20:44] <masak> ouch.

[20:45] <sorear> [Coke]: Funny, since I have 2G of swap and it runs out every time

[20:45] <lisppaste3> moritz_ pasted "<.print> backtrace in 'mob3' branch" at http://paste.lisp.org/display/98620

[20:46] <sorear> moritz_: still, I'm amazed and saddened that a modern OS can be crashed with something as crude as a forkbomb

[20:47] <moritz_> sorear: aye; forbidding memory overcommit would likely solve it, but so far I haven't bothered

[20:47] *** patrickas joined
[20:47] <sorear> overcommit's been pretty nice to me

[20:47] <sorear> usually it takes out the compilers

[20:48] <sorear> so what was the failure mode?

[20:48] <moritz_> display frozen; no response while trying to ssh it

[20:49] <moritz_> sorear: do you happen to know how to override a vtable in Perl 6?

[20:50] <[Coke]> sorear: *sigh* 2G of /real/ memory is what I have. Yes, I know we're pushing the limits on your box. working on it.

[20:51] <sorear> [Coke]: Sorry, I thought you meant that it didn't even hit swap.

[20:51] <sorear> Which would be quite weird for it to use less total memory for you

[20:52] <sorear> moritz_: find the underlying Class object and call .add_vtable_override on it

[20:52] <moritz_> the second part sounds easy :-)

[20:54] *** eternaleye joined
[20:58] *** takadonet left
[20:58] <moritz_> sorear: thanks, I think I have a way forward (even if it looks nasty :-)

[21:00] *** eternaleye left
[21:00] *** SmokeMachine left
[21:01] *** eternaleye joined
[21:02] *** calin joined
[21:03] *** ReiniUrban joined
[21:05] *** rurban left
[21:05] *** ReiniUrban is now known as rurban

[21:08] *** M_o_C left
[21:09] *** rgrau_ left
[21:12] *** chitragupt left
[21:13] *** gurjeet left
[21:13] *** pmurias left
[21:20] *** ash_ left
[21:24] *** SmokeMachine joined
[21:24] * moritz_ decides to give up his vtable override attempts for tonight, and goes to bed instead

[21:25] <masak> sleep tight.

[21:33] *** molaf_ left
[21:39] *** SmokeMachine left
[21:50] *** pyrimidine left
[21:51] *** sahadev left
[21:52] *** hicx174 left
[21:55] *** chitragupt joined
[21:55] *** gurjeet joined
[22:03] *** kokajxo left
[22:06] *** ruoso left
[22:08] *** donaldh joined
[22:15] *** donaldh left
[22:15] *** nihiliad left
[22:20] *** mce_ro left
[22:21] *** woosley left
[22:22] *** mce_ro joined
[22:29] *** Guest70305 left
[22:38] * diakopter upgrades mono on p6eval

[22:45] *** kokajxo joined
[22:48] *** wknight8111 joined
[22:51] *** plobsing joined
[22:53] *** takadonet joined
[23:04] <sorear> diakopter: Is the new version any better?

[23:14] *** dual joined
[23:15] *** truewar left
[23:24] *** wolverian left
[23:26] *** [Coke] left
[23:29] <diakopter> sorear: dunno. hoping it'll resolve the MissingMethodExceptions I get on mono (but not on .NET)

[23:29] <diakopter> when I do something like this:

[23:29] *** truewar joined
[23:29] <diakopter> perlesque: my $a = AssemblyGen.new('hi');

[23:29] <p6eval> perlesque: OUTPUT«␤Unhandled Exception: System.MissingMethodException: Cannot find constructor␤  at TriAxis.RunSharp.Exp.New (System.Type type, TriAxis.RunSharp.Operand[] args) [0x00000] in <filename unknown>:0 ␤  at TriAxis.RunSharp.Exp.New (System.Type type) [0x00000] in <filename unknown>:0 ␤ 

[23:29] <p6eval> ..at…

[23:30] <diakopter> there is a definitely a constructor for AssemblyGen that takes a clr string.

[23:31] <diakopter> (because .NET finds it on windows)

[23:31] <diakopter> (and b/c I see it in the source code; heh)

[23:31] *** [Coke] joined
[23:31] <diakopter> http://code.google.com/p/csmeta/source/browse/trunk/Sprixel/RunSharp/AssemblyGen.cs#148

[23:31] *** [Coke] left
[23:32] <diakopter> oops, no. http://code.google.com/p/csmeta/source/browse/trunk/Sprixel/RunSharp/AssemblyGen.cs#196

[23:32] *** masak left
[23:33] <diakopter> mono has always had lots of rough edges like that.

[23:33] <diakopter> from what I can tell.

[23:44] <diakopter> I need AssemblyGen so I can move on to the next step... doing codegeneration from the perlesque input itself

[23:46] *** [Coke] joined
[23:46] <[Coke]> any p6-book people about?

[23:49] * [Coke] heads to github.

[23:49] <sorear> #perl6book ?

[23:49] *** [Coke] left
[23:50] *** crythias joined
[23:54] <sorear> std: my bit @array = <0 0>;

[23:54] <p6eval> std 30529: OUTPUT«ok 00:01 110m␤»

[23:55] <sorear> std: my bit @array = <0 0>; $array[0] := $array[1]; $array[1] = 1; say $array[0]; # not that std will catch this likely, but how is it to work?  I don't see it forbidden in the spec

[23:55] <p6eval> std 30529: OUTPUT«===SORRY!===␤Variable $array is not predeclared (did you mean @array?) at /tmp/hEMQFO63hJ line 1:␤------> my bit @array = <0 0>; $array⏏[0] := $array[1]; $array[1] = 1; say $ar␤Variable $array is not predeclared (did you mean @array?) at

[23:55] <p6eval> ../tmp/hE…

[23:55] <sorear> std: my bit @array = <0 0>; @array[0] := @array[1];

[23:55] <p6eval> std 30529: OUTPUT«ok 00:01 109m␤»

[23:57] <lue> rakudo: my bit @array = <0 0>; @array[0] := @array[1];

[23:57] <p6eval> rakudo c4857a: OUTPUT«Malformed my at line 11, near "bit @array"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

