[00:02] *** meppl left
[00:06] <ash_> jnthn in S02-builtin_data_types/anon_block.t  line #76 and line #80, are those two tests actually different? just curious

[00:06] <ash_> {$foo = "blah"}; vs {$foo2 = "blah"};    shouldn't the first one be a bare block without a semi-colon? 

[00:07] <ash_> or maybe the second, well 1 of them

[00:07] *** pmurias left
[00:08] *** lumi left
[00:08] *** lumi joined
[00:09] *** ash_ left
[00:10] *** colomon left
[00:10] *** colomon joined
[00:16] *** teneighty joined
[00:19] *** mikehh left
[00:20] *** mikehh joined
[00:31] *** am0c joined
[00:34] *** drbean joined
[00:35] *** mikehh left
[00:35] *** Trey left
[00:35] *** Trey joined
[00:37] *** stepnem left
[00:43] *** mikehh joined
[00:46] *** stepnem joined
[00:47] *** smash_ left
[00:48] *** justatheory left
[00:49] *** cognominal left
[00:49] *** mikehh left
[00:49] *** mikehh joined
[00:50] *** cognominal joined
[00:53] *** colomon left
[00:55] *** colomon joined
[00:56] *** ihrd joined
[00:57] *** ihrd left
[00:58] *** colomon__ joined
[00:58] *** colomon left
[00:58] *** colomon__ is now known as colomon

[00:59] *** mikehh left
[01:01] *** cognominal left
[01:02] *** hercynium joined
[01:19] *** cognominal joined
[01:20] *** am0c left
[01:22] *** am0c joined
[01:25] *** lumi left
[01:25] *** lumi joined
[01:28] *** stephenlb left
[01:36] *** c9s__ left
[01:36] *** payload left
[01:36] *** am0c left
[01:36] *** hercynium left
[01:36] *** drbean left
[01:36] *** dalek left
[01:36] *** szabgab left
[01:36] *** Patterner left
[01:36] *** lisppaste3 left
[01:36] *** pmichaud left
[01:36] *** nbrown left
[01:36] *** pugs_svn left
[01:36] *** arnsholt left
[01:36] *** sjohnson left
[01:36] *** zorgnax left
[01:36] *** sunnavy left
[01:36] *** gbacon left
[01:36] *** tomaw__ left
[01:36] *** Chazz left
[01:36] *** gabiruh left
[01:36] *** _jaldhar left
[01:36] *** spinclad left
[01:36] *** _ilbot2 left
[01:36] *** sbp left
[01:36] *** cognominal left
[01:36] *** stepnem left
[01:36] *** pnate2 left
[01:36] *** ascent_ left
[01:36] *** gfldex left
[01:36] *** takadonet left
[01:36] *** jnthn left
[01:36] *** krakan left
[01:36] *** cotto_work left
[01:36] *** yath left
[01:36] *** Maddingue left
[01:36] *** jql left
[01:36] *** lucs left
[01:36] *** IgnisInCaelum left
[01:36] *** Infinoid left
[01:36] *** wolverian left
[01:36] *** yahooooo left
[01:36] *** debux left
[01:36] *** Woody2143 left
[01:36] *** betterworld left
[01:36] *** huf left
[01:36] *** Juerd left
[01:36] *** PerlJam left
[01:36] *** saschi left
[01:36] *** hicx174 left
[01:36] *** elmex left
[01:36] *** xinming left
[01:36] *** lestrrat left
[01:36] *** literal left
[01:36] *** avar left
[01:36] *** BinGOs left
[01:36] *** eiro left
[01:36] *** colomon_ left
[01:36] *** patspam left
[01:36] *** ShaneC left
[01:36] *** PacoLinux left
[01:36] *** rachelBROWN left
[01:36] *** orafu left
[01:36] *** Exodist left
[01:36] *** go|dfish left
[01:36] *** partisan left
[01:36] *** araujo left
[01:36] *** cj left
[01:36] *** cottoo left
[01:36] *** teneighty left
[01:36] *** REPLeffect left
[01:36] *** yves left
[01:36] *** zamolxes left
[01:36] *** mtve left
[01:36] *** mj41 left
[01:36] *** Tene left
[01:36] *** RichiH left
[01:36] *** lumi left
[01:36] *** meteorja1 left
[01:36] *** |Jedai| left
[01:36] *** sahadev left
[01:36] *** mssm left
[01:36] *** breinbaas left
[01:36] *** rgrau` left
[01:36] *** Intensity left
[01:36] *** PZt left
[01:36] *** silug left
[01:36] *** allbery_b left
[01:36] *** ssm left
[01:36] *** idemal left
[01:36] *** eternaleye left
[01:36] *** frew left
[01:36] *** perigrin left
[01:36] *** Helios-- left
[01:36] *** pnu left
[01:36] *** rgrau left
[01:36] *** akl left
[01:36] *** hatseflats left
[01:36] *** moritz_ left
[01:36] *** p6eval left
[01:36] *** buubot left
[01:36] *** c1sung left
[01:36] *** mathw left
[01:36] *** [particle] left
[01:36] *** frettled left
[01:36] *** Grrrr left
[01:36] *** baest left
[01:36] *** rhr left
[01:36] *** Guest97031 left
[01:36] *** tkr left
[01:36] *** mdxi left
[01:36] *** revdiablo left
[01:36] *** kst left
[01:36] *** vinisterx left
[01:36] *** pjcj_ left
[01:36] *** nsh left
[01:36] *** ashizawa left
[01:36] *** astinus left
[01:36] *** kcwu_ left
[01:36] *** IRSeekBot left
[01:36] *** c9s left
[01:36] *** cxreg left
[01:36] *** hanekomu left
[01:36] *** tarbo2_ left
[01:36] *** omega__ left
[01:36] *** TimToady left
[01:36] *** Caelum left
[01:36] *** buu left
[01:36] *** cls_bsd left
[01:36] *** charsbar left
[01:37] *** pmichaud joined
[01:37] *** lumi joined
[01:37] *** am0c joined
[01:37] *** cognominal joined
[01:37] *** hercynium joined
[01:37] *** stepnem joined
[01:37] *** drbean joined
[01:37] *** teneighty joined
[01:37] *** dalek joined
[01:37] *** meteorja1 joined
[01:37] *** c9s__ joined
[01:37] *** payload joined
[01:37] *** |Jedai| joined
[01:37] *** lucs joined
[01:37] *** pnate2 joined
[01:37] *** idemal joined
[01:37] *** patspam joined
[01:37] *** sahadev joined
[01:37] *** eternaleye joined
[01:37] *** cottoo joined
[01:37] *** mssm joined
[01:37] *** ascent_ joined
[01:37] *** buu joined
[01:37] *** ShaneC joined
[01:37] *** szabgab joined
[01:37] *** breinbaas joined
[01:37] *** rgrau` joined
[01:37] *** Patterner joined
[01:37] *** Intensity joined
[01:37] *** lisppaste3 joined
[01:37] *** PacoLinux joined
[01:37] *** PZt joined
[01:37] *** mathw joined
[01:37] *** tarbo2_ joined
[01:37] *** moritz_ joined
[01:37] *** Caelum joined
[01:37] *** Grrrr joined
[01:37] *** IRSeekBot joined
[01:37] *** irc.freenode.net sets mode: +ooov pmichaud mathw moritz_ IRSeekBot

[01:37] *** p6eval joined
[01:37] *** c1sung joined
[01:37] *** omega__ joined
[01:37] *** tkr joined
[01:37] *** cxreg joined
[01:37] *** pnu joined
[01:37] *** buubot joined
[01:37] *** cls_bsd joined
[01:37] *** baest joined
[01:37] *** akl joined
[01:37] *** mdxi joined
[01:37] *** pjcj_ joined
[01:37] *** kst joined
[01:37] *** Helios-- joined
[01:37] *** irc.freenode.net sets mode: +v p6eval

[01:37] *** rgrau joined
[01:37] *** hatseflats joined
[01:37] *** silug joined
[01:37] *** kcwu_ joined
[01:37] *** perigrin joined
[01:37] *** ashizawa joined
[01:37] *** revdiablo joined
[01:37] *** allbery_b joined
[01:37] *** nsh joined
[01:37] *** rhr joined
[01:37] *** ssm joined
[01:37] *** Guest97031 joined
[01:37] *** hanekomu joined
[01:37] *** vinisterx joined
[01:37] *** frew joined
[01:37] *** astinus joined
[01:37] *** frettled joined
[01:37] *** c9s joined
[01:37] *** charsbar joined
[01:37] *** tomaw__ joined
[01:37] *** sbp joined
[01:37] *** gabiruh joined
[01:37] *** _ilbot2 joined
[01:37] *** _jaldhar joined
[01:37] *** zorgnax joined
[01:37] *** spinclad joined
[01:37] *** sjohnson joined
[01:37] *** arnsholt joined
[01:37] *** pugs_svn joined
[01:37] *** gbacon joined
[01:37] *** Chazz joined
[01:37] *** nbrown joined
[01:37] *** sunnavy joined
[01:37] *** [particle] joined
[01:37] *** Exodist joined
[01:37] *** go|dfish joined
[01:37] *** Tene joined
[01:37] *** mj41 joined
[01:37] *** zamolxes joined
[01:37] *** RichiH joined
[01:37] *** orafu joined
[01:37] *** araujo joined
[01:37] *** rachelBROWN joined
[01:37] *** partisan joined
[01:37] *** cj joined
[01:37] *** mtve joined
[01:37] *** yves joined
[01:37] *** REPLeffect joined
[01:37] *** TimToady joined
[01:37] *** gfldex joined
[01:37] *** jql joined
[01:37] *** irc.freenode.net sets mode: +o TimToady

[01:37] *** Maddingue joined
[01:37] *** lestrrat joined
[01:37] *** saschi joined
[01:37] *** yath joined
[01:37] *** Woody2143 joined
[01:37] *** krakan joined
[01:37] *** Juerd joined
[01:37] *** Infinoid joined
[01:37] *** PerlJam joined
[01:37] *** yahooooo joined
[01:37] *** wolverian joined
[01:37] *** elmex joined
[01:37] *** betterworld joined
[01:37] *** takadonet joined
[01:37] *** hicx174 joined
[01:37] *** IgnisInCaelum joined
[01:37] *** huf joined
[01:37] *** jnthn joined
[01:37] *** debux joined
[01:37] *** cotto_work joined
[01:37] *** xinming joined
[01:37] *** BinGOs joined
[01:37] *** eiro joined
[01:37] *** avar joined
[01:37] *** literal joined
[01:37] *** colomon_ joined
[01:37] *** irc.freenode.net sets mode: +oo PerlJam jnthn

[01:50] *** araujo left
[01:52] *** mariano joined
[02:19] *** japhb left
[02:23] *** mssm left
[02:23] *** orafu left
[02:24] *** orafu joined
[02:34] *** ash_ joined
[02:56] *** japhb joined
[03:21] *** nadim_ left
[03:29] *** araujo joined
[03:31] *** ShaneC left
[03:35] <colomon_> ng: say 1;

[03:35] <p6eval> ng d5a7de: 1␤

[03:35] <colomon_> ng: (1...10).grep({$_ % 3 == 2}).perl.say

[03:35] <p6eval> ng d5a7de: []␤

[03:35] <colomon_> ng: (1...10).grep({$^a % 3 == 2}).perl.say

[03:35] <p6eval> ng d5a7de: [2, 5, 8]␤

[03:38] <colomon_> blast, I was hoping pmichaud's move to parrot 2.0.0 might have fixed that one

[03:41] <sjohnson> :(

[03:46] <Tene> um... why?  how would it have any effect?

[03:46] *** cognominal left
[03:46] <ash_> ng: (-> $a { -> $b { $a + $b } })(4)(5);

[03:46] <p6eval> ng d5a7de: Not enough positional parameters passed; got 0 but expected 1␤current instr.: '_block34' pc 218 (EVAL_1:103)␤

[03:47] <ash_> rakudo: say (-> $a { -> $b { $a + $b } })(4)(5);

[03:47] <p6eval> rakudo 1d4928: 9␤

[03:47] <ash_> hmm

[03:47] <ash_> ng: say (-> $a { $a })(4);

[03:47] <p6eval> ng d5a7de: sh: ./perl6: No such file or directory␤

[03:48] <ash_> locally that just prints 4

[03:48] <ash_> for some reason, putting a pointy block in a pointy block it gets an error

[03:50] *** colomon left
[03:51] <ash_> well, not a parse error, but its not functioning right, hmmm 

[03:55] *** cottoo left
[04:15] *** orafu left
[04:17] *** orafu joined
[04:17] *** pnate joined
[04:20] *** pnate2 left
[04:24] *** ash__ joined
[04:28] *** JimmyZ joined
[04:41] *** ash_ left
[05:05] *** Baggiokwok joined
[05:18] *** JimmyZ left
[05:22] *** Baggiokwok left
[05:47] *** zloyrusskiy joined
[05:57] *** rekhajos joined
[06:13] *** drbean left
[06:16] *** pnate2 joined
[06:19] *** c9s is now known as c9s_

[06:20] *** c9s_ is now known as c9s

[06:28] *** synth joined
[06:30] *** pnate left
[06:56] *** k23z__ joined
[06:56] <k23z__> can I compile perl6 on windows ?

[06:56] <k23z__> rakudo to be specific

[06:57] <k23z__> or maybe I can find binaries somewherE ?

[06:57] <k23z__> someone care to provide me with binaries for rakudo on windows ?

[07:01] *** cotto joined
[07:02] <Tene> k23z__: http://sourceforge.net/projects/parrotwin32/files/ has what you need.

[07:02] <Tene> k23z__: I'm not sure which combination of those files is the one you need, but they're in there somewhere.  :)

[07:03] <Tene> I don't use win32, but that link came from http://rakudo.org/ which I think mentions in slightly more detail.

[07:05] *** justatheory joined
[07:05] <k23z__> ok

[07:05] <k23z__> thanks

[07:05] <Tene> No problem.  I'm glad I could help.  Also, welcome to the channel! :)

[07:09] *** justatheory left
[07:11] *** kaare joined
[07:11] *** kaare is now known as Guest90110

[07:19] *** redicaps joined
[07:21] *** rgrau` left
[07:22] *** Su-Shee joined
[07:22] <Su-Shee> good morning

[07:24] *** [synth] joined
[07:33] *** cognominal joined
[07:35] *** Baggiokwok joined
[07:39] *** broquaint joined
[07:41] *** synth left
[07:45] *** mariano left
[07:53] *** pnate joined
[07:55] *** TiMBuS joined
[07:59] *** iblechbot joined
[08:03] *** mikehh joined
[08:04] *** vamped joined
[08:04] *** pnate2 left
[08:20] *** kowey joined
[08:20] *** k23z__ left
[08:33] *** DeanPowell joined
[08:42] *** vamped left
[08:47] *** riffraff joined
[08:48] *** tylerni7 joined
[08:50] <moritz_> good morning

[08:51] *** _ilbot2 left
[08:51] *** jonasbn joined
[08:51] *** jonasbn left
[08:52] *** _ilbot2 joined
[08:52] *** jonasbn joined
[08:56] *** nadim_ joined
[08:56] *** DeanPowell left
[09:00] *** agentzh joined
[09:03] *** cognominal left
[09:12] *** dakkar joined
[09:17] *** k23z__ joined
[09:28] <sjohnson> hi moritz_ 

[09:28] <sjohnson> （´ー｀　）

[09:30] *** kowey left
[09:32] *** k23z__ left
[09:37] *** cognominal joined
[09:47] *** mssm joined
[09:50] <jnthn> oh morning

[09:50] <moritz_> \o/

[09:50] <sjohnson> （　° ー°）

[09:52] *** hicx174 left
[09:54] <szbalint> jnthn: still in Vienna?

[09:54] <jnthn> szbalint: Bratislava...just went to Vienna for Vienna.pm last night.

[09:55] <szbalint> aw. I had a free evening yesterday in Wien, too late now :S

[09:56] *** meppl joined
[09:58] <jnthn> Aw.

[09:58] *** agentzh left
[09:58] *** agentzh1 joined
[10:00] <frettled> morning-thing!

[10:06] <sjohnson> heh

[10:08] *** meneldor joined
[10:08] <meneldor> morning all

[10:13] <sjohnson> hi hi hi

[10:16] *** dakkar left
[10:16] *** dakkar_ joined
[10:26] *** Chazz is now known as zz_Chazz

[10:31] *** Baggiokwok left
[10:41] *** jonasbn left
[10:54] * xinming read the synopsis again, everytime he reads, everytime he feels the exciting future. :-)

[11:02] *** dakkar_ is now known as dakkar

[11:02] *** colomon joined
[11:03] *** dakkar left
[11:03] *** dakkar joined
[11:08] <colomon> morning

[11:12] <jnthn> morning, colomon 

[11:12] *** mssm left
[11:12] <colomon> 2nd night in a row I got 7 hours uninterrupted sleep

[11:13] <jnthn> \o/

[11:13] <colomon> I think this is the first time that's happened in about 18 months....

[11:13] <colomon> so very \o/  !

[11:14] <colomon> what's on the ng agenda for today?

[11:16] *** agentzh1 left
[11:17] <jnthn> I'm pondering either trying to do hash or trying to get a bit further with S12-*.

[11:18] <jnthn> do Hash, that is. :-)

[11:18] <colomon> :)

[11:19] <colomon> just don't drink beer and do hash at the same time, m'kay?  ;)

[11:20] <sjohnson> heh

[11:22] <mathw> And don't code and drink beer and do hash either

[11:27] <jnthn> I think if I was drinking beer and doing hash I'd be too relaxed to code. :-)

[11:30] <mathw> That seems likely

[11:30] *** Baggiokwok joined
[11:32] *** payload left
[11:32] *** test joined
[11:33] *** test is now known as Guest18693

[11:34] <Guest18693> hi

[11:34] *** payload joined
[11:39] <mathw> hi

[11:42] *** Baggiokwok left
[11:42] <sjohnson> hi matt

[11:50] *** rekhajos left
[11:53] *** SmokeMachine joined
[11:54] <mathw> hi sjohnson 

[11:54] *** payload left
[11:55] *** mssm joined
[12:00] *** IgnisInCaelum left
[12:00] *** Baggiokwok joined
[12:07] *** drbean joined
[12:08] *** redicaps left
[12:08] <colomon> sjohnson: my impression is Canada is getting pretty excited about the Olympics.

[12:11] *** Guest18693 left
[12:11] <sjohnson> colomon: yeah the Vancouver 2010 campaign has been around for a while

[12:12] <sjohnson> it's a bit of a misnomer, as i'm sure most of the things will happen in cities near Vancouver that any foreigners don't even know about

[12:12] <sjohnson> like Whistler, BC

[12:12] <sjohnson> etc

[12:12] * colomon thought Whistler was someplace people knew about.  ;)

[12:13] <sjohnson> ahh probably is

[12:13] *** lumi left
[12:13] *** lumi joined
[12:13] <colomon> I have to admit that mostly I only know southern Ontario and eastern Newfoundland.

[12:13] <jnthn> I've heard of Whistler. :-)

[12:14] <colomon> \o/

[12:14] <jnthn> Never been to Canada though yet. :-(

[12:15] <colomon> I think we just officially scheduled our sixth vacation of more than a week there (as a couple).

[12:16] <colomon> At least, I booked the motel for it.

[12:16] <sjohnson> i landed in toronto once

[12:16] <colomon> (Canada, that is, not Whistler.)

[12:16] <sjohnson> on a flight to India

[12:17] <sjohnson> toronto and vancouver distance is like a 5 day drive

[12:18] <colomon> That can't be right, can it?  I would have guessed 3 days.

[12:19] <colomon> of course, that's based on my parents' stories of Ohio to Oregon driving time, so might be wildly off.  :)

[12:20] <jnthn> I keep thinking "ah, YAPC::NA will be in Canada some day, and then I'll go to that and make a holiday around it." :-)

[12:21] <colomon> speaking of which, anyone know if YAPC::NA has a date yet?  Columbus is in easy driving range for me...

[12:23] *** rachelBROWN left
[12:24] *** IgnisInCaelum joined
[12:25] *** IgnisInCaelum is now known as Guest44473

[12:29] *** ruoso joined
[12:29] <sjohnson> colomon: i suppose it depends on pitstops, motels, etc

[12:29] <sjohnson> but its a long ways

[12:31] *** riffraff left
[12:31] <colomon> :)

[12:31] *** [particle] left
[12:34] <sjohnson> （　｀ー´）

[12:37] *** jerbraun joined
[12:37] *** clintongormley joined
[12:43] *** bluescreen joined
[12:43] *** jerbraun left
[12:44] *** patspam left
[12:48] *** mssm left
[12:49] *** mssm joined
[12:51] *** bluescreen left
[12:52] *** bluescreen joined
[12:58] *** awwaiid joined
[13:01] *** k23z__ joined
[13:03] <takadonet> morning all

[13:03] <colomon> morning!

[13:03] <takadonet> colomon: how are u?

[13:05] <colomon> great!  u?

[13:05] <colomon> I got a good night's sleep, the sun is shining, my boy is in a good mood, ng progress is being made...

[13:06] *** Baggiokwok left
[13:11] <takadonet> doing good. Work is going great and ng progress is being made :)

[13:11] *** cognominal left
[13:17] *** k23z__ left
[13:21] <pmichaud> good morning #perl6

[13:22] <pmichaud> last night's hacking on list assignment was full of FAIL  :-(

[13:22] <pmichaud> so, I'm at it again this morning.  :-)

[13:23] <moritz_> good morning

[13:23] <colomon> these things always work better in the morning, in my experience.  :)

[13:24] * colomon 's boy just ripped two keys off the MBP keyboard, meaning a trip to the Apple Store is in my near future.

[13:30] *** allbery_b left
[13:30] *** ssm left
[13:30] *** ruoso left
[13:30] *** nadim_ left
[13:30] *** pnate left
[13:30] *** frew left
[13:30] *** perigrin left
[13:30] *** idemal left
[13:30] *** pnu left
[13:30] *** akl left
[13:30] *** hatseflats left
[13:30] *** eternaleye left
[13:30] *** Helios-- left
[13:30] *** p6eval left
[13:30] *** c1sung left
[13:30] *** buubot left
[13:30] *** moritz_ left
[13:30] *** rgrau left
[13:30] *** drbean left
[13:30] *** _ilbot2 left
[13:30] *** orafu left
[13:30] *** c9s__ left
[13:30] *** awwaiid left
[13:30] *** zloyrusskiy left
[13:30] *** araujo left
[13:30] *** nbrown left
[13:30] *** pugs_svn left
[13:30] *** arnsholt left
[13:30] *** pmichaud left
[13:30] *** sjohnson left
[13:30] *** hercynium left
[13:30] *** Patterner left
[13:30] *** gbacon left
[13:30] *** gabiruh left
[13:30] *** sunnavy left
[13:30] *** spinclad left
[13:30] *** szabgab left
[13:30] *** _jaldhar left
[13:30] *** am0c left
[13:30] *** zorgnax left
[13:30] *** zz_Chazz left
[13:30] *** sbp left
[13:30] *** tomaw__ left
[13:30] *** lisppaste3 left
[13:30] *** dalek left
[13:30] *** clintongormley left
[13:30] *** dakkar left
[13:30] *** tylerni7 left
[13:30] *** ash__ left
[13:30] *** Exodist left
[13:30] *** go|dfish left
[13:30] *** partisan left
[13:30] *** PacoLinux left
[13:30] *** cj left
[13:30] *** bluescreen left
[13:30] *** Guest44473 left
[13:30] *** [synth] left
[13:30] *** teneighty left
[13:30] *** mj41 left
[13:30] *** REPLeffect left
[13:30] *** yves left
[13:30] *** Tene left
[13:30] *** mtve left
[13:30] *** zamolxes left
[13:30] *** RichiH left
[13:30] *** lumi left
[13:30] *** japhb left
[13:30] *** PZt left
[13:30] *** sahadev left
[13:30] *** meteorja1 left
[13:30] *** |Jedai| left
[13:30] *** breinbaas left
[13:30] *** Intensity left
[13:30] *** silug left
[13:30] *** frettled left
[13:30] *** rhr left
[13:30] *** Grrrr left
[13:30] *** mdxi left
[13:30] *** mathw left
[13:30] *** revdiablo left
[13:30] *** tkr left
[13:30] *** baest left
[13:30] *** vinisterx left
[13:30] *** buu left
[13:30] *** astinus left
[13:30] *** Caelum left
[13:30] *** kcwu_ left
[13:30] *** pjcj_ left
[13:30] *** omega__ left
[13:30] *** Guest97031 left
[13:30] *** ashizawa left
[13:30] *** c9s left
[13:30] *** cls_bsd left
[13:30] *** TimToady left
[13:30] *** charsbar left
[13:30] *** hanekomu left
[13:30] *** nsh left
[13:30] *** cxreg left
[13:30] *** kst left
[13:30] *** tarbo2_ left
[13:30] *** IRSeekBot left
[13:30] *** broquaint left
[13:30] *** pmichaud joined
[13:30] *** awwaiid joined
[13:30] *** drbean joined
[13:30] *** _ilbot2 joined
[13:30] *** zloyrusskiy joined
[13:30] *** orafu joined
[13:30] *** araujo joined
[13:30] *** am0c joined
[13:30] *** hercynium joined
[13:30] *** dalek joined
[13:30] *** c9s__ joined
[13:30] *** szabgab joined
[13:30] *** Patterner joined
[13:30] *** lisppaste3 joined
[13:30] *** sunnavy joined
[13:30] *** nbrown joined
[13:30] *** zz_Chazz joined
[13:30] *** gbacon joined
[13:30] *** pugs_svn joined
[13:30] *** arnsholt joined
[13:30] *** sjohnson joined
[13:30] *** spinclad joined
[13:30] *** zorgnax joined
[13:30] *** _jaldhar joined
[13:30] *** gabiruh joined
[13:30] *** sbp joined
[13:30] *** tomaw__ joined
[13:30] *** irc.freenode.net sets mode: +o pmichaud

[13:31] *** bluescreen joined
[13:31] *** clintongormley joined
[13:31] *** Guest44473 joined
[13:31] *** dakkar joined
[13:31] *** tylerni7 joined
[13:31] *** [synth] joined
[13:31] *** ash__ joined
[13:31] *** teneighty joined
[13:31] *** PacoLinux joined
[13:31] *** Exodist joined
[13:31] *** go|dfish joined
[13:31] *** Tene joined
[13:31] *** mj41 joined
[13:31] *** zamolxes joined
[13:31] *** RichiH joined
[13:31] *** partisan joined
[13:31] *** cj joined
[13:31] *** mtve joined
[13:31] *** yves joined
[13:31] *** REPLeffect joined
[13:32] *** idemal joined
[13:32] *** allbery_b joined
[13:32] *** lumi joined
[13:32] *** japhb joined
[13:32] *** meteorja1 joined
[13:32] *** |Jedai| joined
[13:32] *** sahadev joined
[13:32] *** breinbaas joined
[13:32] *** Intensity joined
[13:32] *** PZt joined
[13:32] *** silug joined
[13:32] *** sahadev left
[13:33] *** TimToady joined
[13:33] *** broquaint joined
[13:33] *** buu joined
[13:33] *** charsbar joined
[13:33] *** c9s joined
[13:33] *** frettled joined
[13:33] *** astinus joined
[13:33] *** vinisterx joined
[13:33] *** hanekomu joined
[13:33] *** Guest97031 joined
[13:33] *** rhr joined
[13:33] *** nsh joined
[13:33] *** revdiablo joined
[13:33] *** ashizawa joined
[13:33] *** kcwu_ joined
[13:33] *** kst joined
[13:33] *** pjcj_ joined
[13:33] *** mdxi joined
[13:33] *** baest joined
[13:33] *** cls_bsd joined
[13:33] *** cxreg joined
[13:33] *** tkr joined
[13:33] *** omega__ joined
[13:33] *** IRSeekBot joined
[13:33] *** Grrrr joined
[13:33] *** Caelum joined
[13:33] *** tarbo2_ joined
[13:33] *** mathw joined
[13:33] *** irc.freenode.net sets mode: +ovo TimToady IRSeekBot mathw

[13:33] *** eternaleye joined
[13:33] *** eternaleye left
[13:34] *** nadim_ joined
[13:34] *** TiMBuS left
[13:34] *** buubot joined
[13:34] *** moritz_ joined
[13:35] *** c1sung_ joined
[13:35] *** ruoso joined
[13:35] *** pnate joined
[13:35] *** eternaleye joined
[13:35] *** frew joined
[13:35] *** perigrin joined
[13:35] *** hatseflats joined
[13:35] *** Helios-- joined
[13:35] *** akl joined
[13:35] *** pnu joined
[13:35] *** c1sung joined
[13:35] *** p6eval joined
[13:35] *** irc.freenode.net sets mode: +v p6eval

[13:35] *** c1sung left
[13:35] *** eternaleye left
[13:35] <pugs_svn> r29570 | pmichaud++ | [pm.txt]:  Another spec clarification question. 

[13:35] <pugs_svn> r29570 | 

[13:35] <pugs_svn> r29570 | Pm-17:  Are the builtin types such as C<Num>, C<Int>, C<Rat>, 

[13:35] <pugs_svn> r29570 |     C<Str>, C<List>, etc.  subclasses of C<Cool> or do they

[13:35] <pugs_svn> r29570 |     rely on C<Cool>'s method fallback mechanisms for the

[13:35] <pugs_svn> r29570 |     common methods?  (Or, another way of asking:  is

[13:35] *** rgrau joined
[13:35] <pugs_svn> r29570 |     C<List ~~ Cool> true?)

[13:36] <moritz_> I'm pretty sure that List ~~ Cool is true

[13:36] *** ssm joined
[13:36] <pmichaud> okay.  The spec and #perl6 logs I could find were fairly unclear on that point.

[13:36] <pmichaud> s/were/are/

[13:38] <pmichaud> as I read the spec currently, though,  it seems weird that    MyClass ~~ Cool   would be false but it would still respond to Cool's methods.

[13:38] <pmichaud> (assuming the builtin types have   ~~ Cool as true)

[13:39] <colomon> I thought the entire point of having Cool was that MyClass wouldn't have all those methods?

[13:39] <pmichaud> colomon: it doesn't have the methods, but it still responds to them

[13:39] <colomon> (Is this S12?)

[13:39] <colomon> pmichaud: that seems like a distinction without much of a difference.

[13:39] <jnthn> pmichaud: That wasn't my understanding of it.

[13:40] <jnthn> pmichaud: You inherit from Cool if you want your class to have those methods.

[13:40] <pmichaud> Cool is a "fallback class namespace" where the dispatcher looks if it's unable to find a method for a given object

[13:40] <moritz_>     [S02] rough in idea of moritz_++ to have separate type for convenience loopbacks

[13:40] <moritz_>     also conjecturally put all "last-resort" multis there to see if jnthn++ freaks

[13:40] <jnthn> pmichaud: ah, hm.

[13:40] <moritz_> so it seems that the method fallback is still conjectural

[13:40] <pmichaud> so is Cool

[13:40] <jnthn> pmichaud: Use "is Cool" on varius built-in types.

[13:40] <jnthn> pmichaud: iiuc

[13:41] <jnthn> pmichaud: Any is still default thing we inherit from

[13:41] <jnthn> pmichaud: Cool ~~ Any

[13:41] <pmichaud> jnthn: yes, I know that.  That's not my question/point.

[13:41] <jnthn> pmichaud: tbh, I don't know why we need such a fallback yet.

[13:42] <jnthn> pmichaud: It's worth asking, but I don't think it impedes putting Cool in.

[13:42] <pmichaud> S02:1568 says  "The C<Cool> namespace also contains all multimethods of last resort;

[13:42] <pmichaud> these are automatically searched if normal multiple dispatch does not

[13:42] <pmichaud> find a viable candidate."

[13:42] <pmichaud> If this is true, then it's not necessary for builtin classes to inherit from Cool.  (more)

[13:43] <pmichaud> Not only that, but all user-defined types respond to Cool methods even if they aren't defined as "is Cool".

[13:43] <pmichaud> with the point being that when you ask a user-defined type for its methods, the Cool methods don't appear.

[13:43] <jnthn> pmichaud: The big problem with this is that all the methods in Cool would have to declare a more liberal invocant than Cool

[13:44] <pmichaud> Sure, they'd define Any.

[13:44] <jnthn> Otherwise the multi-dispatch is gonna fail because the invocant type won't match.

[13:44] <jnthn> Right.

[13:44] <pmichaud> I mean, they'd use Any as the invocant.  I don't see that as a big deal.

[13:44] <jnthn> That feels a tad odd to me, that's all.

[13:44] <jnthn> Anyway, I think the built-in types should inherit from Cool.

[13:44] <pmichaud> I totally agree with you/moritz that it makes sense to simply say that builtin types derive from Cool.

[13:44] <pmichaud> But then I'm wondering (1) why the spec doesn't explicitly say that, and (2) why the fallback?

[13:45] <jnthn> And we defer worrying about the multi-dispatch fallback for a little bit.

[13:45] <jnthn> I'm not sure.

[13:45] <pmichaud> Thus, my request for clarification in pm.txt :-)

[13:45] <jnthn> I'm not sure that I like the fallback idea entirely, but I don't dislike it enough (yet) to freak either. :-)

[13:45] <colomon> That reminds me (was thinking about this the other day), Cool does Real?

[13:45] <jnthn> ooh, Slovak class time!

[13:45] <jnthn> back later

[13:45] <pmichaud> colomon: I wouldn't expect that.

[13:45] <moritz_> colomon: no

[13:46] <moritz_> maybe Real is Cool or so :)

[13:46] <pmichaud> Real is just a role, iiuc.

[13:46] <pmichaud> Num does Real, Rat does Real

[13:46] <colomon> That's more or less how Any works now, it has all the functions that Real would have.

[13:47] <pmichaud> colomon: well, it also has a lot of the function that Str would have

[13:47] <colomon> and they're intended to work magically.

[13:47] <pmichaud> and that List would have

[13:47] <pmichaud> with equal amounts of magic

[13:47] <colomon> yes, I would also expect that Cool does Str or Stringy or whatever that role is.

[13:47] *** Lorn joined
[13:48] <pmichaud> colomon: no, we don't want   Num ~~ Stringy, I think.

[13:48] *** k23z__ joined
[13:49] <colomon> I thought the point of Cool was that numbers can be used like strings, and strings like numbers, where appropriate.

[13:49] <moritz_> colomon: yes, but it doesn't work the way you think it does

[13:49] <pmichaud> that is the point of Cool.  But we don't have to tie it to all of the roles

[13:49] *** payload joined
[13:50] <moritz_> colomon: currently this works by putting the method sin() into Any

[13:50] <pmichaud> our definitions will tend to look like   "class Num is Cool does Numeric"

[13:50] <pmichaud> or, more likely

[13:50] <pmichaud> our definitions will tend to look like   "class Num is Cool does Numeric does Real"

[13:50] <moritz_> colomon: in the future that will work by putting it into Cool instead of Any

[13:50] <moritz_> colomon: and since Str ~~ Cool, "23".sin works

[13:51] <pmichaud> the methods go in Cool, while Numeric/Real allow us to distinguish the object capabilities

[13:51] <pmichaud> Numeric, Stringy, Real, etc are more for type constraints than method composition, I think.

[13:52] *** smash_ joined
[13:52] <smash_> hello

[13:52] <colomon> but doesn't that lead to massive code duplication?  I mean, you'll have to have Cool.sin { self.Num.sin } as well as Real.sin { self.Num.sin }.

[13:52] <colomon> repeated for every numeric function on reals.

[13:52] <pmichaud> not at all

[13:52] <colomon> oh, wait, that's wrong.

[13:53] <colomon> errr, no, it isn't.

[13:53] <pmichaud> I think we'd just have Cool.sin and Num.sin

[13:54] <colomon> I guess that would work, but it feels very very very wrong to me....

[13:54] <pmichaud> I suppose it could also be Cool.sin and Real.sin

[13:55] <pmichaud> anyway, code duplication of single-line delegations isn't something I worry about too much :)

[13:56] <takadonet> smash: hello

[13:57] *** mariuz joined
[13:58] *** iblechbot left
[13:59] *** Guest44473 left
[14:01] *** IgnisInCaelum joined
[14:01] *** IgnisInCaelum is now known as Guest38672

[14:04] *** mariuz left
[14:05] *** mariuz joined
[14:05] <colomon> Maybe it's the idea "abstract role" that's tripping up my thinking?

[14:05] <pmichaud> maybe.  Maybe it's just that builtin types are weird because we want so many of them to be able to act like others :)

[14:05] *** zloyrusskiy left
[14:05] <colomon> Does that mean the role has no attributes, or that it is just an interface specification, with no function implementations?

[14:06] <moritz_> ng: say 1

[14:06] <p6eval> ng d5a7de: 1␤

[14:06] <pmichaud> colomon: not sure yet.

[14:06] <colomon> I've been imagining that if your class does Real, all you need to provide is .Num and it will provide implementations of all the appropriate real number functions for you.

[14:06] <pmichaud> the question is along the lines of   "What do we expect   class XYZ does Real { ... } to accomplish?"

[14:07] <moritz_> colomon: it sounds like you really want to inherit from Num for such a class

[14:07] <moritz_> if you want all its arithmetic to go through .Num

[14:08] <colomon> moritz_: but you DON'T want that, because you don't want to be carrying a extra floating point value around with you.

[14:08] <pmichaud> moritz_: sure, but then you also get all of Num's .... what colomon++ said

[14:08] <colomon> Think of Rat.

[14:08] <k23z__> have you considered making the compiler play some nice music while compiling ?

[14:08] <k23z__> it would be way cool :)

[14:08] <k23z__> something like "hey, hold on I'm compiling, listen to some music..."

[14:09] <pmichaud> afk a bit

[14:09] <colomon> There are a huge set of functions on Rat which amount to method X { self.Num.X }

[14:09] <colomon> those functions exactly correspond to what Real should be capable of.

[14:09] <moritz_> k23z__: I hate every program that plays music (unless its primary concern is to be a music or video player)

[14:10] <k23z__> you also hate keygens ?

[14:10] <k23z__> I'm asking because they have this extremely cool music called chiptunes

[14:10] <colomon> Furthermore, those functions are all covered in Real.

[14:10] <moritz_> k23z__: yes

[14:10] *** [particle] joined
[14:12] *** ignacio_ joined
[14:12] <k23z__> but moritz_ , the music in the keygens , it has that air of familirity

[14:12] <moritz_> k23z__: nope.

[14:13] *** unknow_element joined
[14:13] *** unknow_element left
[14:14] *** unknow_element joined
[14:14] *** unknow_element left
[14:18] *** drbean left
[14:19] *** lisppaste3 left
[14:19] *** lisppaste3 joined
[14:31] *** Grrrr left
[14:31] *** TimToady left
[14:31] *** mdxi left
[14:31] *** rhr left
[14:31] *** frettled left
[14:31] *** revdiablo left
[14:31] *** vinisterx left
[14:31] *** tkr left
[14:31] *** baest left
[14:31] *** cxreg left
[14:31] *** mathw left
[14:31] *** broquaint left
[14:31] *** pjcj_ left
[14:31] *** kcwu_ left
[14:31] *** buu left
[14:31] *** c9s left
[14:31] *** cls_bsd left
[14:31] *** Guest97031 left
[14:31] *** omega__ left
[14:31] *** tarbo2_ left
[14:31] *** nsh left
[14:31] *** kst left
[14:31] *** charsbar left
[14:31] *** Caelum left
[14:31] *** IRSeekBot left
[14:31] *** ashizawa left
[14:31] *** astinus left
[14:31] *** hanekomu left
[14:31] *** Guest38672 left
[14:31] *** payload left
[14:31] *** lumi left
[14:31] *** breinbaas left
[14:31] *** meteorja1 left
[14:31] *** |Jedai| left
[14:31] *** japhb left
[14:31] *** PZt left
[14:31] *** Intensity left
[14:31] *** allbery_b left
[14:31] *** rgrau left
[14:31] *** perigrin left
[14:31] *** frew left
[14:31] *** pnate left
[14:31] *** p6eval left
[14:31] *** hatseflats left
[14:31] *** akl left
[14:31] *** Helios-- left
[14:31] *** pnu left
[14:31] *** ruoso left
[14:31] *** silug left
[14:31] *** nadim_ left
[14:31] *** ash__ left
[14:31] *** dakkar left
[14:31] *** clintongormley left
[14:31] *** tylerni7 left
[14:31] *** cj left
[14:31] *** partisan left
[14:31] *** go|dfish left
[14:31] *** Exodist left
[14:31] *** PacoLinux left
[14:31] *** [synth] left
[14:31] *** bluescreen left
[14:31] *** mtve left
[14:31] *** teneighty left
[14:31] *** yves left
[14:31] *** REPLeffect left
[14:31] *** zamolxes left
[14:31] *** mj41 left
[14:31] *** Tene left
[14:31] *** RichiH left
[14:31] *** lisppaste3 left
[14:31] *** ignacio_ left
[14:31] *** Lorn left
[14:31] *** orafu left
[14:31] *** c9s__ left
[14:31] *** _ilbot2 left
[14:31] *** ssm left
[14:31] *** [particle] left
[14:31] *** mariuz left
[14:31] *** smash_ left
[14:31] *** idemal left
[14:31] *** spinclad left
[14:31] *** arnsholt left
[14:31] *** pugs_svn left
[14:31] *** nbrown left
[14:31] *** pmichaud left
[14:31] *** szabgab left
[14:31] *** hercynium left
[14:31] *** am0c left
[14:31] *** _jaldhar left
[14:31] *** sjohnson left
[14:31] *** zorgnax left
[14:31] *** Patterner left
[14:31] *** sbp left
[14:31] *** gabiruh left
[14:31] *** tomaw__ left
[14:31] *** gbacon left
[14:31] *** sunnavy left
[14:31] *** araujo left
[14:31] *** dalek left
[14:31] *** awwaiid left
[14:31] *** zz_Chazz left
[14:31] *** k23z__ left
[14:31] *** c1sung_ left
[14:31] *** mssm left
[14:31] *** Su-Shee left
[14:31] *** Guest90110 left
[14:31] *** cotto left
[14:31] *** jnthn left
[14:31] *** takadonet left
[14:31] *** gfldex left
[14:31] *** lucs left
[14:31] *** krakan left
[14:31] *** ascent_ left
[14:31] *** yahooooo left
[14:31] *** Woody2143 left
[14:31] *** jql left
[14:31] *** wolverian left
[14:31] *** Juerd left
[14:31] *** huf left
[14:31] *** betterworld left
[14:31] *** Maddingue left
[14:31] *** cotto_work left
[14:31] *** PerlJam left
[14:31] *** xinming left
[14:31] *** debux left
[14:31] *** saschi left
[14:31] *** Infinoid left
[14:31] *** stepnem left
[14:31] *** lestrrat left
[14:31] *** elmex left
[14:31] *** yath left
[14:31] *** buubot left
[14:31] *** literal left
[14:31] *** avar left
[14:31] *** meneldor left
[14:31] *** BinGOs left
[14:31] *** eiro left
[14:31] *** colomon_ left
[14:31] *** meppl left
[14:31] *** krunen left
[14:31] *** Gothmog_ left
[14:31] *** constant left
[14:31] *** felipe left
[14:31] *** presh_ left
[14:31] *** mikehh left
[14:31] *** mikehh_ joined
[14:31] *** Khisanth left
[14:31] *** mathw joined
[14:31] *** lisppaste3 joined
[14:31] *** ignacio_ joined
[14:31] *** [particle] joined
[14:31] *** mariuz joined
[14:31] *** Guest38672 joined
[14:31] *** smash_ joined
[14:31] *** payload joined
[14:31] *** k23z__ joined
[14:31] *** Lorn joined
[14:31] *** ssm joined
[14:31] *** rgrau joined
[14:31] *** p6eval joined
[14:31] *** pnu joined
[14:31] *** akl joined
[14:31] *** Helios-- joined
[14:31] *** hatseflats joined
[14:31] *** perigrin joined
[14:31] *** frew joined
[14:31] *** pnate joined
[14:31] *** ruoso joined
[14:31] *** c1sung_ joined
[14:31] *** buubot joined
[14:31] *** nadim_ joined
[14:31] *** tarbo2_ joined
[14:31] *** Caelum joined
[14:31] *** Grrrr joined
[14:31] *** IRSeekBot joined
[14:31] *** omega__ joined
[14:31] *** tkr joined
[14:31] *** cxreg joined
[14:31] *** cls_bsd joined
[14:31] *** baest joined
[14:31] *** mdxi joined
[14:31] *** pjcj_ joined
[14:31] *** kst joined
[14:31] *** kcwu_ joined
[14:31] *** revdiablo joined
[14:31] *** nsh joined
[14:31] *** rhr joined
[14:31] *** Guest97031 joined
[14:31] *** hanekomu joined
[14:31] *** vinisterx joined
[14:31] *** astinus joined
[14:31] *** frettled joined
[14:31] *** c9s joined
[14:31] *** charsbar joined
[14:31] *** buu joined
[14:31] *** broquaint joined
[14:31] *** TimToady joined
[14:31] *** irc.freenode.net sets mode: +ovvo mathw p6eval IRSeekBot TimToady

[14:31] *** silug joined
[14:31] *** PZt joined
[14:31] *** Intensity joined
[14:31] *** breinbaas joined
[14:31] *** |Jedai| joined
[14:31] *** meteorja1 joined
[14:31] *** japhb joined
[14:31] *** lumi joined
[14:31] *** allbery_b joined
[14:31] *** idemal joined
[14:31] *** REPLeffect joined
[14:31] *** yves joined
[14:31] *** mtve joined
[14:31] *** cj joined
[14:31] *** partisan joined
[14:31] *** RichiH joined
[14:31] *** zamolxes joined
[14:31] *** mj41 joined
[14:31] *** Tene joined
[14:31] *** go|dfish joined
[14:31] *** Exodist joined
[14:31] *** PacoLinux joined
[14:31] *** teneighty joined
[14:31] *** ash__ joined
[14:31] *** [synth] joined
[14:31] *** tylerni7 joined
[14:31] *** dakkar joined
[14:31] *** clintongormley joined
[14:31] *** bluescreen joined
[14:31] *** tomaw__ joined
[14:31] *** sbp joined
[14:31] *** gabiruh joined
[14:31] *** _jaldhar joined
[14:31] *** zorgnax joined
[14:31] *** spinclad joined
[14:31] *** sjohnson joined
[14:31] *** arnsholt joined
[14:31] *** pugs_svn joined
[14:31] *** gbacon joined
[14:31] *** zz_Chazz joined
[14:31] *** nbrown joined
[14:31] *** sunnavy joined
[14:31] *** Patterner joined
[14:31] *** c9s__ joined
[14:31] *** dalek joined
[14:31] *** hercynium joined
[14:31] *** am0c joined
[14:31] *** araujo joined
[14:31] *** orafu joined
[14:31] *** _ilbot2 joined
[14:31] *** awwaiid joined
[14:31] *** pmichaud joined
[14:31] *** irc.freenode.net sets mode: +o pmichaud

[14:31] *** mssm joined
[14:31] *** meneldor joined
[14:31] *** meppl joined
[14:31] *** Su-Shee joined
[14:31] *** Guest90110 joined
[14:31] *** cotto joined
[14:31] *** presh_ joined
[14:31] *** felipe joined
[14:31] *** constant joined
[14:31] *** krunen joined
[14:31] *** Gothmog_ joined
[14:31] *** stepnem joined
[14:31] *** lucs joined
[14:31] *** ascent_ joined
[14:31] *** gfldex joined
[14:31] *** jql joined
[14:31] *** Maddingue joined
[14:31] *** lestrrat joined
[14:31] *** saschi joined
[14:31] *** yath joined
[14:31] *** Woody2143 joined
[14:31] *** krakan joined
[14:31] *** Juerd joined
[14:31] *** Infinoid joined
[14:31] *** PerlJam joined
[14:31] *** yahooooo joined
[14:31] *** wolverian joined
[14:31] *** elmex joined
[14:31] *** betterworld joined
[14:31] *** takadonet joined
[14:31] *** huf joined
[14:31] *** jnthn joined
[14:31] *** debux joined
[14:31] *** cotto_work joined
[14:31] *** xinming joined
[14:31] *** BinGOs joined
[14:31] *** eiro joined
[14:31] *** avar joined
[14:31] *** literal joined
[14:31] *** colomon_ joined
[14:31] *** irc.freenode.net sets mode: +oo PerlJam jnthn

[14:32] <pmichaud> huh?  We have a src/cheats/parrot/misc.txt that isn't used at all?

[14:32] *** cognominal joined
[14:32] *** mj41_ joined
[14:33] *** ignacio_ left
[14:33] <pmichaud> er, misc.pir

[14:33] <pmichaud> that's... weird, wonder where that file came from

[14:34] *** frettled left
[14:34] *** rhr left
[14:34] *** Grrrr left
[14:34] *** mdxi left
[14:34] *** mathw left
[14:34] *** revdiablo left
[14:34] *** vinisterx left
[14:34] *** tkr left
[14:34] *** baest left
[14:34] *** buu left
[14:34] *** astinus left
[14:34] *** Caelum left
[14:34] *** kcwu_ left
[14:34] *** pjcj_ left
[14:34] *** omega__ left
[14:34] *** Guest97031 left
[14:34] *** c9s left
[14:34] *** cls_bsd left
[14:34] *** TimToady left
[14:34] *** charsbar left
[14:34] *** hanekomu left
[14:34] *** nsh left
[14:34] *** kst left
[14:34] *** broquaint left
[14:34] *** cxreg left
[14:34] *** IRSeekBot left
[14:34] *** tarbo2_ left
[14:34] *** lumi left
[14:34] *** Guest38672 left
[14:34] *** PZt left
[14:34] *** japhb left
[14:34] *** meteorja1 left
[14:34] *** |Jedai| left
[14:34] *** payload left
[14:34] *** breinbaas left
[14:34] *** Intensity left
[14:34] *** allbery_b left
[14:34] *** pnate left
[14:34] *** frew left
[14:34] *** perigrin left
[14:34] *** hatseflats left
[14:34] *** Helios-- left
[14:34] *** p6eval left
[14:34] *** akl left
[14:34] *** ruoso left
[14:34] *** rgrau left
[14:34] *** pnu left
[14:34] *** silug left
[14:34] *** ash__ left
[14:34] *** clintongormley left
[14:34] *** nadim_ left
[14:34] *** go|dfish left
[14:34] *** dakkar left
[14:34] *** PacoLinux left
[14:34] *** Exodist left
[14:34] *** cj left
[14:34] *** partisan left
[14:34] *** tylerni7 left
[14:34] *** bluescreen left
[14:34] *** [synth] left
[14:34] *** teneighty left
[14:34] *** REPLeffect left
[14:34] *** yves left
[14:34] *** mtve left
[14:34] *** zamolxes left
[14:34] *** Tene left
[14:34] *** mj41 left
[14:34] *** RichiH left
[14:34] *** mj41_ is now known as mj41

[14:34] <pmichaud> I guess it's left over

[14:34] *** rgrau joined
[14:34] *** p6eval joined
[14:34] *** pnu joined
[14:34] *** akl joined
[14:34] *** Helios-- joined
[14:34] *** hatseflats joined
[14:34] *** perigrin joined
[14:34] *** frew joined
[14:34] *** pnate joined
[14:34] *** ruoso joined
[14:34] *** silug joined
[14:34] *** irc.freenode.net sets mode: +v p6eval

[14:35] *** Guest38672 joined
[14:35] *** payload joined
[14:35] *** lumi joined
[14:35] *** japhb joined
[14:35] *** meteorja1 joined
[14:35] *** |Jedai| joined
[14:35] *** breinbaas joined
[14:35] *** Intensity joined
[14:35] *** PZt joined
[14:35] *** allbery_b joined
[14:36] *** nadim_ joined
[14:36] *** bluescreen joined
[14:36] *** clintongormley joined
[14:36] *** dakkar joined
[14:36] *** tylerni7 joined
[14:36] *** [synth] joined
[14:36] *** ash__ joined
[14:36] *** teneighty joined
[14:36] *** PacoLinux joined
[14:36] *** Exodist joined
[14:36] *** go|dfish joined
[14:36] *** Tene joined
[14:36] *** zamolxes joined
[14:36] *** RichiH joined
[14:36] *** partisan joined
[14:36] *** cj joined
[14:36] *** mtve joined
[14:36] *** yves joined
[14:36] *** REPLeffect joined
[14:36] *** Exodist_ joined
[14:36] *** zamolxes left
[14:36] *** go|dfish left
[14:36] *** zamolxes joined
[14:36] *** mtve left
[14:36] *** mtve joined
[14:37] *** Exodist left
[14:40] *** ignacio_ joined
[14:41] *** mtve left
[14:44] *** Khisanth joined
[14:48] *** ash__ left
[14:48] *** dakkar left
[14:48] *** nadim_ left
[14:48] *** clintongormley left
[14:48] *** tylerni7 left
[14:48] *** cj left
[14:48] *** partisan left
[14:48] *** PacoLinux left
[14:48] *** tylerni7 joined
[14:48] *** clintongormley joined
[14:48] *** dakkar joined
[14:50] *** TimToady joined
[14:50] *** broquaint joined
[14:50] *** buu joined
[14:50] *** charsbar joined
[14:50] *** c9s joined
[14:50] *** frettled joined
[14:50] *** astinus joined
[14:50] *** vinisterx joined
[14:50] *** hanekomu joined
[14:50] *** Guest97031 joined
[14:50] *** rhr joined
[14:50] *** nsh joined
[14:50] *** revdiablo joined
[14:50] *** kcwu_ joined
[14:50] *** kst joined
[14:50] *** pjcj_ joined
[14:50] *** mdxi joined
[14:50] *** baest joined
[14:50] *** cls_bsd joined
[14:50] *** cxreg joined
[14:50] *** tkr joined
[14:50] *** omega__ joined
[14:50] *** IRSeekBot joined
[14:50] *** Grrrr joined
[14:50] *** Caelum joined
[14:50] *** tarbo2_ joined
[14:50] *** mathw joined
[14:50] *** irc.freenode.net sets mode: +ovo TimToady IRSeekBot mathw

[14:53] *** cj joined
[14:55] *** Baggiokwok joined
[14:57] *** mj41 left
[14:58] *** Guest90110 left
[14:59] *** mj41 joined
[15:10] *** payload left
[15:11] *** hicx174 joined
[15:12] *** PacoLinux joined
[15:23] *** colomon__ joined
[15:23] *** colomon left
[15:23] *** colomon__ is now known as colomon

[15:25] *** frederico joined
[15:26] *** iblechbot joined
[15:26] *** go|dfish joined
[15:29] *** ash_ joined
[15:31] *** colomon__ joined
[15:31] *** colomon left
[15:31] *** colomon__ is now known as colomon

[15:31] <ash_> so, i figured out whats wrong with a pointy block in a pointy block, now to see if i can find why 

[15:31] <colomon> so what's wrong with it?

[15:32] <pmichaud> argggh, getting lists and arrays to work is being endless FAIL for me :-|

[15:32] <pmichaud> something is fundamentally wrong here.

[15:33] <mathw> :(

[15:33] <dalek> rakudo/ng: d5a8d9c | pmichaud++ | src/cheats/parrot/ (4 files):

[15:33] <dalek> rakudo/ng: Move some obsolete files out of the active build directories.

[15:33] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/d5a8d9c02dcbe16dfc59b6a39221ca10056aaa1c

[15:33] <ash_> i looked at the generated pir code for (-> $a { -> $b { $a + $b } })(4)(4); 

[15:33] <jnthn> ash_++ # looking at that problem

[15:34] <ash_> the outer block isn't returning the block inside, its executing it 

[15:34] <jnthn> Oh

[15:34] <jnthn> OK, some odd code-gen issue then. :-/

[15:34] <pmichaud> it must think it's an immediate block

[15:34] <jnthn> Aye.

[15:34] <jnthn> Curious why it does that for nested ones.

[15:35] *** Baggiokwok left
[15:35] <ash_> its like 2 lines, its doing capture_lex $P3 \n $P4 = $P3() \n .return ($P4) 

[15:35] <pmichaud> perhaps it does it for non-nested one also

[15:35] <ash_> just 1 line needs to change in the genrated code 

[15:35] <pmichaud> pmichaud@orange:~/ng$ ./perl6

[15:35] <pmichaud> > -> { say 'hello' }

[15:35] <pmichaud> hello

[15:35] <pmichaud> I'm guessing it does it for all pointy blocks

[15:36] <ash_> ng: say (-> $a { 'hi' })(4);

[15:36] <p6eval> ng d5a7de: hi␤

[15:36] <pmichaud> that's not a bare block :-)

[15:36] <pmichaud> ng:  -> $a { say 'hi' }

[15:36] <p6eval> ng d5a7de: Not enough positional parameters passed; got 0 but expected 1␤current instr.: '_block22' pc 86 (EVAL_1:45)␤

[15:36] <pmichaud> ng:  -> { say 'hi' }

[15:36] <p6eval> ng d5a7de: hi␤

[15:36] <ash_> ah

[15:36] <frettled> √

[15:37] <pmichaud> I wonder if a pointy block is always a declaration -- i.e., not executed immediately (unless the other construct requires it)

[15:38] <moritz_> would make sense

[15:39] <pmichaud> I'll try that.

[15:42] *** cognominal left
[15:43] <ash_> for reference, anon sub's work fine if you do the same thing

[15:43] <ash_> ng: say (sub ($a) { sub ($b) { $a + $b } })(4)(4);

[15:43] <p6eval> ng d5a7de: 8␤

[15:43] <ash_> may or may not mean anything though

[15:43] <pmichaud> yes, because 'sub' forces the blocktype to be set to declaration

[15:43] *** cognominal joined
[15:43] <pmichaud> I've just patched -> to do the same (I think, spectesting now)

[15:44] *** justatheory joined
[15:44] <pmichaud> > say (-> $a { -> $b { $a + $b } })(4)(4);

[15:44] <pmichaud> 8

[15:46] <ash_> pmichaud++ woot, want to try t/spec/S02-builtin_data_types/anon_block.rakudo

[15:46] *** mariuz left
[15:46] <ash_> its the test i was trying to get working 

[15:46] <pmichaud> All tests successful.

[15:46] <pmichaud> pushed fix to github

[15:47] <jnthn> \o/

[15:47] *** Psyche^ joined
[15:47] *** nihiliad joined
[15:47] <pmichaud> ash_: thanks for finding that and giving such a good diagnosis -- made it easy to fix :)

[15:47] <ash_> no worries, if i find more i'll let someone know

[15:48] <pmichaud> is the specific example you gave in the test file?  perhaps it should be?

[15:48] <frettled> pmichaud++ - excellent

[15:48] <pmichaud> ah, I see it -- test #18

[15:48] <pmichaud> tests++

[15:49] *** KyleHa joined
[15:49] *** Patterner left
[15:49] *** Psyche^ is now known as Patterner

[15:50] <pmichaud> laziness sure makes list assignment a lot more interesting

[15:51] <dalek> rakudo/ng: ee71f1e | pmichaud++ | src/Perl6/Actions.pm:

[15:51] <dalek> rakudo/ng: Force bare pointy subs to be treated as declarations instead of

[15:51] <dalek> rakudo/ng: immediate blocks.  Reported by ash_++  on #perl6.

[15:51] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/ee71f1e5c268561f671168a31d83cd1ba981361d

[15:51] <pmichaud> ($a, @b) = (@c, $a)   # example

[15:51] <frettled> o_O

[15:53] *** ab5tract joined
[15:53] <pmichaud> we can't just take the first element of @c, put it in $a, and then copy the rest of the rhs into @b, because @b should get the value of $a before the assignment

[15:54] <colomon> yow

[15:54] <pmichaud> we can't just iterate the rhs and make copies of everything before doing the assignment, because @c could be infinit

[15:54] <pmichaud> *e

[15:54] <pmichaud> (or otherwise lazy)

[15:55] <pmichaud> anyway, I think I have that problem worked out for now... but it's still bizarrely interesting to deal with

[15:55] *** payload joined
[15:55] <pmichaud> right now I can't even get simple arrays to work properly.

[15:55] <pmichaud> ng:  my $a = 5;  my $b = [$a];  $a++;  say $b.perl;  # wrong

[15:55] <p6eval> ng ee71f1: [6]␤

[15:55] <pmichaud> I know what the bug is in the code, but all of the fixes I'm trying break things horribly

[15:56] <pmichaud> looks like I'll have to rethink the current implementation of map, list, and array

[15:57] <mathw> Who wanted laziness? :)

[15:57] <mathw> It is cool, but it'd be a lot easier if we didn't have it

[15:57] <pmichaud> oh, I suspect it's waterbed theory

[15:57] *** ashizawa joined
[15:57] <pmichaud> we can make the implementation easier without it, but we then push the complexity to the users

[15:57] <pmichaud> which is the wrong approach :)

[15:58] <PerlJam> it's star trek:  the needs of the many (users) out weigh the needs of the one (pmichaud)  :-)

[16:00] * colomon is just glad he didn't tackle list assignment himself over the weekend...

[16:02] <frettled> :)

[16:03] <pmichaud> ng:  my $a = (3,(4,5),6);  say $a.perl

[16:03] <p6eval> ng ee71f1: (3, 4, 5, 6)␤

[16:04] <pmichaud> ng:  my $a = List.new(3,(4,5),6);  say $a.perl

[16:04] <p6eval> ng ee71f1: (3, 4, 5, 6)␤

[16:04] <pmichaud> ng:  my @a = List.new(3,4);  say @a.perl

[16:04] <p6eval> ng ee71f1: [(3, 4)]␤

[16:04] <pmichaud> ng:  my @a = List.new(3,4);  say @a.elems

[16:04] <p6eval> ng ee71f1: 1␤

[16:05] <pmichaud> ng:  my @a = (3,4).list;  say @a.elems

[16:05] <p6eval> ng ee71f1: 2␤

[16:06] <ash_> ng: my @a = List.new(1, 2, 3).list; say @a.perl;

[16:06] <p6eval> ng ee71f1: [(1, 2, 3)]␤

[16:06] <ash_> .list  relies on @ context, which i don't think is functioning the way its supposed to

[16:07] <pmichaud> I think List.new is bogus

[16:07] <colomon> in concept or execution?

[16:07] <pmichaud> execution

[16:08] <pmichaud> why isn't it just:     method new(*@args) { @args }

[16:08] <ash_> my fault, i didn't know it could be that simple...

[16:08] <pmichaud> oh, I know why

[16:08] <pmichaud> because that would return an Array

[16:08] <colomon> because when you do that it fails miserably.

[16:08] <colomon> it's worse than that, it didn't actually ever get called.

[16:09] <pmichaud> well, the problem with the current implementation is that it's not evaluating args in list context

[16:09] <pmichaud> er, that's not it.  hrm.

[16:10] <ash_> ng: class Foo {}; augment class Foo { method new(*@args) { say 'hi' } }; my $a = Foo.new(1, 2);

[16:10] <p6eval> ng ee71f1:  ( no output )

[16:10] <ash_> is why i didn't augment List with a new method

[16:10] <ash_> for some reason, when you augment the class, it didn't get the new new 

[16:11] <ash_> thats why i went with a .pir version in builtin/List.pir 

[16:11] <pmichaud> okay... reworking

[16:11] <ash_> as for the exact implementation, i was trying to do it the way you normally do, i didn't know i could return the @args 

[16:11] <pmichaud> well you can, but as I mentioned, @args would probably end up being an Array

[16:11] <pmichaud> and we want a List

[16:12] <ash_> trying to use bless and the like, since it gets inherited into Array, so i wanted to make sure it works with Array and List 

[16:12] *** IgnisInCaelum joined
[16:12] *** ab5tract left
[16:13] *** IgnisInCaelum is now known as Guest8010

[16:13] <ash_> btw, was pmichaud should augment be able to add a 'new' method? I don't see why not... if so, then i think augment may not be functioning the way you'd expect it to

[16:14] *** Guest8010 left
[16:14] <pmichaud> ash_: I agree that looks like a bug.  Although you might want 'new' to be a multi there.

[16:14] <ash_> ng: class Foo {}; augment class Foo { multi method new(*@args) { say 'hi' } }; my $a = Foo.new(1, 2);

[16:14] <p6eval> ng ee71f1:  ( no output )

[16:14] <pmichaud> ng:  class Foo {};  augment class Foo { multi method bar(*@args) { say 'hi' } };   Foo.bar(1,2);

[16:14] <p6eval> ng ee71f1: hi␤

[16:14] *** Guest38672 left
[16:15] <pmichaud> ng:  class Foo {};  augment class Foo { multi method new(*@args) { say 'hi' } };   Foo.new(1,2);

[16:15] <p6eval> ng ee71f1:  ( no output )

[16:15] <pmichaud> I'm guessing there's a method cache problem on 'new' there.

[16:16] <jnthn> Method cache? :-/

[16:16] <jnthn> There's a problem of some kind though.

[16:16] <ash_> the default new does *@args, *%kwargs 

[16:16] <pmichaud> I did say it was a guess :-)

[16:16] <ash_> ng: class Foo {}; augment class Foo { method new(*@args, *%kwargs) { say 'hi' } }; my $a = Foo.new(1, 2);

[16:16] <p6eval> ng ee71f1:  ( no output )

[16:16] *** Exodist_ is now known as Exodist

[16:16] <jnthn> pmichaud: Heh. I didn't realize there was a method cache. ;-)

[16:16] <pmichaud> there might not be one.  But didn't we have some sort of multidispatch cache somewhere?

[16:17] <jnthn> Yeah, but adding a new method is meant to invalidate it.

[16:17] <ash_> ng: class Foo {}; augment class Foo { method new(*@args, *%kwargs) { say 'hi' } }; my $a = Foo.new(1, 2, :b<a>); 

[16:17] <p6eval> ng ee71f1: sh: ./perl6: No such file or directory␤

[16:17] <ash_> locally that still has no output 

[16:17] <pmichaud> right, so I'm guessing the multidispatch cache isn't being invalidated then

[16:17] <ash_> so... i never really figured out what was wrong, but i just thought i'd let someone that knows more about ng know

[16:18] <jnthn> pmichaud: I'll try and hunt it down.

[16:19] *** ignacio_ left
[16:20] <pmichaud> > my @a = List.new(1,2);  say @a.perl;

[16:20] <pmichaud> [1, 2]

[16:20] <pmichaud> better.

[16:21] <jnthn> :-)

[16:25] <dalek> rakudo/ng: 57a8065 | pmichaud++ | src/builtins/List.pir:

[16:25] <dalek> rakudo/ng: Refactor List.new a bit; set 'flatten' flag so that lists created

[16:25] <dalek> rakudo/ng: this way still flatten in list context.

[16:25] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/57a806518ab81117bb83da7b389c2765c8f2cddf

[16:26] <pmichaud> jnthn: I'm toying again with the idea of having all containers (including things held in arrays) as being Perl6Scalar, instead of the value type directly.

[16:26] *** alester joined
[16:27] *** alester left
[16:28] <jnthn> pmichaud: hm

[16:28] *** alester joined
[16:28] <jnthn> pmichaud: We can haz extra GC overhead, that's the only issue...

[16:28] <pmichaud> well, there's a dereferencing cost also

[16:28] <jnthn> pmichaud: Rationale?

[16:29] <pmichaud> well, the copy approach has its own GC overhead cost as well

[16:29] <pmichaud> because we end up making temporary clones that get thrown away

[16:29] <jnthn> pmichaud: That is true, plus the copy costs.

[16:29] <frettled> More powerful computers will take care of this within 1 femtillion years.

[16:29] <pmichaud> we also incur the cost of asking each object "what is your value type"

[16:29] <jnthn> pmichaud: It may well work out the same.

[16:29] <frettled> Or was that pentillion?  I forget.

[16:29] *** alester is now known as Andy

[16:29] <jnthn> Or perhaps better.

[16:30] *** Andy is now known as alester

[16:30] <pmichaud> if we can avoid the "value type" request, that might be a huge win

[16:30] <frettled> jnthn: isn't it a bitch how doing things _properly_ almost always has a performance overhead?  :)

[16:30] <jnthn> :-P

[16:30] <jnthn> pmichaud: There may well be.

[16:30] <jnthn> pmichaud: I guess the forwarder PMC ain't too heavy either

[16:31] <jnthn> And if the Parrot folks ever do generational GC, then we'd not end up scanning them all for long-lived aggregates so often.

[16:31] *** alester left
[16:31] <frettled> On a more serious note, it could perhaps be alleviated a bit by (ab)using multithreading a bit more, but I'm not _quite_ sure how to solve that technically.

[16:31] *** alester joined
[16:31] *** alester left
[16:31] *** alester joined
[16:31] <frettled> GC in a different thread is possible, but what about the other stuff, hmm.

[16:32] <pmichaud> I'll think about it more over lunch

[16:33] <pmichaud> I just know that having the two different types of objects feels icky, and I *know* there's a performance overhead from asking objects about their value types when copying

[16:34] *** alester left
[16:35] *** alester joined
[16:36] <jnthn> pmichaud: Aye, there is.

[16:36] * [particle] is back. where should i start?

[16:36] <jnthn> pmichaud: Anyway, no objections.

[16:40] *** pmurias joined
[16:40] <ash_> jnthn, any other test files giving errors that you know of that should be passing? 

[16:41] *** lumi left
[16:41] *** lumi joined
[16:41] <jnthn> ash_: There's one test failing in S14-role/parameterized-basic.t

[16:41] <jnthn> ash_: But I fear it may be trixky.

[16:41] <jnthn> ash_: That one test is the only thing keeping us from a full pass though.

[16:42] <ash_> i can at least look at it

[16:42] <jnthn> (in that test file)

[16:42] <jnthn> ash_: IIRC it's to do with type parameters being used in siggies.

[16:43] <jnthn> The answer may be that we need to clone the signature so it captures the correct type thunk closure.

[16:43] <jnthn> That's my first guess anyway.

[16:43] <jnthn> oh

[16:44] <jnthn> you can clone the signature forming routine instead perhaps

[16:44] *** mssm left
[16:44] <jnthn> Anyway, it may be something like that. It's my first guess, and knowing if it's what the actual problem is helpful, and a patch is even better. :-)

[16:44] *** ab5tract joined
[16:47] * TimToady blurs into existence, in a Schrödinger's Catly way.

[16:48] <ash_> changing class rooms &

[16:49] *** ash_ left
[16:51] <frettled> TimToady: We're grateful that you blurred _into_ existence.

[16:52] *** uniejo joined
[16:55] *** meneldor left
[17:03] *** cls_bsd left
[17:08] <jnthn> afk, krcma

[17:12] *** ash_ joined
[17:14] *** cognominal left
[17:15] *** ignacio_ joined
[17:19] *** cotto_work left
[17:19] *** cotto_work joined
[17:21] <pmichaud> afk, lunch

[17:22] *** lumi left
[17:25] *** payload left
[17:25] *** lumi joined
[17:25] <pugs_svn> r29571 | lwall++ | [S03,S07] bring list assignment descriptions into better alignment for pmichaud++ 

[17:32] <ash_> ng: role F[::T] { method x(T $a) { say $a.WHAT; } }; class Foo does F[Int] {  }; Foo.new.x(1); Foo.new.x('str');

[17:32] <p6eval> ng 57a806: Int()␤Nominal type check failed for parameter '$a'; expected { ... } but got Str instead␤current instr.: 'perl6;F[::T];x' pc 409 (EVAL_1:156)␤

[17:39] <Tene> ng: class Foo {}; augment class Foo { method new(Int $n) { say 'lol' } }; Foo.new(5);

[17:39] <p6eval> ng 57a806:  ( no output )

[17:39] <Tene> ng: class Foo {}; augment class Foo { multi method new(Int $n) { say 'lol' } }; Foo.new(5);

[17:39] <p6eval> ng 57a806:  ( no output )

[17:39] *** colomon left
[17:43] <ash_> wow, crazy bug jnthn, look at this: 

[17:43] <ash_> ng: role F[::T] { method x(T $a) { return 'T was ' ~ T ~ ' and ' ~ $a.WHAT; } }; class Foo does F[Int] {  }; class Bar does F[Str] { }; say Foo.new.x(10); say Bar.new.x('str'); say Foo.new.x('str');

[17:43] <p6eval> ng 57a806: T was Int() and Int()␤T was Str() and Str()␤T was Int() and Str()␤

[17:44] <ash_> If you use a parametric type 2 times, it changed the definition of 1 of them after you use it, like, the Bar.new.x('str') changed Foo.new from Int to Str for some reason 

[17:44] <ash_> well, to accept Str instead of enforcing to Int only

[17:45] <ash_> but it only seems to do it if you use the role twice 

[17:45] *** phil joined
[17:47] <Tene> ng: role F[::T] { method x(T $a) { return 'T was ' ~ T ~ ' and ~ $a.WHAT; } }; class Foo does F[Int] {  }; say Foo.new.x('lol');

[17:47] <p6eval> ng 57a806: sh: ./perl6: No such file or directory␤

[17:47] <Tene> ng: role F[::T] { method x(T $a) { return 'T was ' ~ T ~ ' and ~ $a.WHAT; } }; class Foo does F[Int] {  }; say Foo.new.x('lol');

[17:47] <p6eval> ng 57a806: sh: ./perl6: No such file or directory␤

[17:48] <Tene> ng: role F[::T] { method x(T $a) { return 'T was ' ~ T ~ ' and ~ $a.WHAT; } }; class Foo does F[Int] {  }; say Foo.new.x('lol');

[17:48] <p6eval> ng 57a806: sh: ./perl6: No such file or directory␤

[17:49] <Tene> ng: role F[::T] { method x(T $a) { return 'T was ' ~ T ~ ' and ~ $a.WHAT; } }; class Foo does F[Int] {  }; say Foo.new.x('lol');

[17:49] <p6eval> ng 57a806: sh: ./perl6: No such file or directory␤

[17:49] <ash_> ng: role F[::T] { method x(T $a) { return 'T was ' ~ T ~ ' and ' ~ $a.WHAT; } }; class Foo does F[Int] {  }; say Foo.new.x('lol');

[17:49] <p6eval> ng 57a806: sh: ./perl6: No such file or directory␤

[17:49] <Tene> *sigh*

[17:49] <ash_> err, well Tene i think you are missing a ' after and

[17:49] <ash_> it runs locally if you add a ' after and 

[17:49] <ash_> > role F[::T] { method x(T $a) { return 'T was ' ~ T ~ ' and ' ~ $a.WHAT; } }; class Foo does F[Int] {  }; say Foo.new.x('lol');

[17:49] <ash_> Nominal type check failed for parameter '$a'; expected { ... } but got Str instead

[17:50] <Tene> ng: role F[::T] { method x(T $a) { return 'T was ' ~ T ~ ' and ' ~ $a.WHAT; } }; class Foo does F[Int] {  }; say Foo.new.x('lol');

[17:50] <p6eval> ng 57a806: Nominal type check failed for parameter '$a'; expected { ... } but got Str instead␤current instr.: 'perl6;F[::T];x' pc 393 (EVAL_1:152)␤

[17:50] <Tene> ng: role F[::T] { method x(T $a) { return 'T was ' ~ T ~ ' and ' ~ $a.WHAT; } }; class Foo does F[Int] {  }; say Foo.new.x(5); say Foo.new.x('lol');

[17:50] <p6eval> ng 57a806: T was Int() and Int()␤Nominal type check failed for parameter '$a'; expected { ... } but got Str instead␤current instr.: 'perl6;F[::T];x' pc 431 (EVAL_1:158)␤

[17:50] *** phil left
[17:51] <pugs_svn> r29572 | lwall++ | [misc/pm.txt] some vaguely authoritative answers to recent pmichaud++ questions 

[17:55] *** sukomalo joined
[17:57] *** sukomalo left
[18:00] *** yahooooo left
[18:00] *** cdarroch joined
[18:03] <PerlJam> that error message is LTA too  "expected { ... } but got Str instead"

[18:03] *** lumi left
[18:03] *** lumi joined
[18:03] *** payload joined
[18:06] *** ShaneC joined
[18:07] *** dakkar left
[18:10] *** ruoso left
[18:14] *** [synth] left
[18:16] *** rgrau` joined
[18:23] *** ruoso joined
[18:29] * pmichaud goes to read spec updates (TimToady++)

[18:33] <pmichaud> From r29571:  When copying into an array destination, the list assignment is

[18:33] <pmichaud> +"mostly eager"; it requests the list to evaluate its leading iterators

[18:33] <pmichaud> +(and values) to the extent that they are known to be finite, and

[18:33] <pmichaud> +then suspend, returning the known values.

[18:33] <pmichaud> This seems at odds with the "mostly eager" definition in S07:  Obtain all items, but does not try to eagerly evaluate when known to

[18:33] <pmichaud> be infinite.

[18:34] <pmichaud> "known to be infinite" != "not known to be finite"

[18:35] <pmichaud> so, do we suspend when we know something to be infinite, or when we can't prove it's finite?

[18:36] <pmichaud> or, to avoid the double negatives -- do we suspend as soon as we can't determine that something is finite, or when we can positively determine that something is infinite

[18:37] <pmichaud> (to me, "mostly eager" would imply the latter -- i.e., we iterate until we know something is infinite.)

[18:39] *** lumi_ joined
[18:39] *** lumi left
[18:40] <frettled> . o O (Oooh, I love semantics.)

[18:42] <frettled> pmichaud: perhaps we should separate between: lazy, mostly lazy, somewhat eager, mostly eager, and eager?  :D

[18:42] <pmichaud> frettled: only if assignment is in fact "somewhat eager"

[18:42] <frettled> "somewhat eager" could be "indifferent", of course

[18:43] <pmichaud> if assignment is "mostly eager" in the sense of "assign values until reaching a known infinite", then I don't know that we need the additional distinction

[18:43] <pmichaud> or, if "mostly eager" is in fact "obtain all items until reaching something that isn't known to be finite", then we don't need the additional distinction

[18:43] <frettled> yep

[18:44] <frettled> it seems to me that there is a potential use for the distinction, that a programmer might sometimes want one behaviour over the other

[18:44] <pmichaud> well, we have some additional operators for that :-)

[18:44] <frettled> :)

[18:44] <pmichaud> my question is more about "what does array assignment do"  :-)

[18:45] <frettled> I think that in most cases, we want it to be the second meaning

[18:45] <frettled> It ought to be more predictable as well.

[18:45] <pmichaud> second meaning being...?

[18:46] <frettled> "obtain all items until reaching something that isn't known to be finite"

[18:46] <pmichaud> ah

[18:46] <pmichaud> so, in that case

[18:46] <pmichaud>     my @a = $file.lines();  

[18:46] <pmichaud> would not consume the entire file

[18:46] <pmichaud> because it would stop at the first sign of the iterator

[18:46] *** jferrero joined
[18:46] <pmichaud> (unless the iterator itself can somehow determine that the file is of finite length)

[18:47] <ash_> how would you eagerly load the file lines then? just curious 

[18:47] <PerlJam> ash_: my @a = eager $file.lines();

[18:47] <pmichaud> ash_: I suspect:   my @a = eager $files.lines()

[18:47] <frettled> pmichaud: hmm, yes...

[18:47] <ash_> gotya

[18:48] <ash_> so... can a List be infinite? or are infinite containers always arrays or a special container? 

[18:48] <pmichaud> Lists can be infinite, yes.

[18:48] <[particle]> what's @a's length after my @a = $file.lines(); ?

[18:48] <pmichaud> ENOLENGTHINPERL6

[18:48] <[particle]> yes, i know

[18:48] <[particle]> but i forget the proper term

[18:48] <[particle]> elements?

[18:48] <ash_> +@a 

[18:48] <pmichaud> but if you mean  @a.elems, then that would cause the file to be consumed at that point

[18:48] <ash_> or @a.elems 

[18:48] <[particle]> perfect

[18:49] *** cognominal joined
[18:49] <pmichaud> which could then hang at that point if the file was in fact infinite :-)

[18:49] <[particle]> so 'my @a = $file.lines()' is lazy

[18:49] <frettled> heh

[18:49] <PerlJam> [particle]: maybe

[18:49] <ash_> my @a = $socket.lines(); say +@a;   # timeout :P 

[18:49] <[particle]> laziness is a virtue

[18:49] <pmichaud> my @a = $files.lines()   being lazy would surprise P5 programmers, yes.

[18:50] <frettled> I like it.

[18:50] <pmichaud> we would also end up with weird things like

[18:50] <PerlJam> frettled: you like surprising programmers?

[18:50] <pmichaud> my @a = ($files.lines(), $b*2)

[18:50] <frettled> PerlJam: :)

[18:50] <pmichaud> oh, wait

[18:50] <pmichaud> my @a = ($files.lines(), $b)

[18:50] <pmichaud> when does $b get evaluated?

[18:50] <[particle]> i prefer that the computer procrastinates, just like i do.  it's what i expect.

[18:51] <PerlJam> [particle]++  :)

[18:51] <frettled> heh

[18:51] <[particle]> pmichaud: hopefully there's a way to warn about that, and suggest 'eager'

[18:51] <pmichaud> my $b = 5;  my @a = ($file.lines(), $b);  $b = $b + 1;  say @a[*-1];   # 5 or 6?

[18:51] <frettled> In the case of file parsing, I think that programmers will expect there to be an easy, concise way of saying that you want to slurp it all without knowing the length in advance.

[18:52] <pmichaud> frettled: that was .lines, iirc :-)

[18:52] <frettled> pmichaud: yep

[18:52] <ash_> ng: my $a = (1, 2, 3); for @($a) { say $_; } 

[18:52] <p6eval> ng 57a806: 1 2 3␤

[18:52] <ash_> ng: my $a = (1, 2, 3); for @($a) { say $_.perl; } 

[18:52] <p6eval> ng 57a806: (1, 2, 3)␤

[18:53] <pmichaud> ng:  my $a = (1,2,3);  for $a.list { say $_.perl; }

[18:53] <p6eval> ng 57a806: 1␤2␤3␤

[18:54] <pmichaud> ng:  my $a = (1,2,3);  say $a.WHAT;

[18:54] <p6eval> ng 57a806: List()␤

[18:54] <frettled> pmichaud: seriously, though, I'm of two minds; in the general case, I think it would be less surprising if we had a "somewhat eager" behaviour, but in some special cases -- such as processing input -- it's more convenient that it's different.  But I don't like special cases, so, er.  :)

[18:54] <ash_> sweet, didn't realize that worked

[18:54] <ash_> .list that is

[18:54] <pmichaud> that's supposedly what @(...) does

[18:55] <ash_> well, then i'd call @(...) a liar :P 

[18:56] <pmichaud> although S03:2116 says otherwise :-(

[18:56] *** rjh joined
[18:56] <pmichaud> according to S03:2116,  @(...) is the same as "list (...)"

[18:56] <pmichaud> or   "list ..."

[18:57] <ash_> well shouldn't the list prefix cause .list? 

[18:57] <pmichaud> no

[18:57] <pmichaud> list prefix simply evaluates its arguments in list context

[18:57] <pmichaud> and $a in list context never flattens

[18:57] *** jonasbn joined
[18:58] <ash_> well, i'll just have to remember to use .list on scalars sigil's then

[18:58] <pmichaud> well,  @$a   should be the same as $a.list

[18:58] <pmichaud> but nyi

[18:59] *** smash_ left
[19:00] <ash_> ah, whats different between @$a and @($a) then? i mean, i kinda thought list context of something would make it sorta iterate-able (is that a word?) 

[19:02] <pmichaud> @$a tells $a "return yourself as a list"

[19:02] <pmichaud> while  "list $a"  says "evaluate yourself in list context"

[19:02] <pmichaud> (and currently the spec indicates that @($a) is the same as "list $a"

[19:02] <jonasbn> pmichaud: ping me when you have some time to discuss the Copenhagen hackathon

[19:02] <pmichaud> jonasbn: will you be around tomorrow?

[19:02] <jonasbn> yes

[19:02] <pmichaud> that might be better for me

[19:03] <jonasbn> super

[19:03] <jonasbn> I might have more details settled by then

[19:03] <pmichaud> excellent

[19:03] <pmichaud> ash_: so, given   my $a = [1,2,3]

[19:03] <pmichaud> (list $a).elems == 1

[19:03] <pmichaud> (@$a).elems == 3

[19:04] *** synth joined
[19:04] *** Chillance joined
[19:05] <ash_> i guess i didn't understand what list context meant

[19:06] <pmichaud> yes, it's a difficult distinction (took me a long time to understand the difference, and even today I sometimes pick the wrong one)

[19:07] *** vinisterx left
[19:08] *** vinisterx joined
[19:09] <frettled> oh!

[19:09] <frettled> I think I get it; in list context, you look at it as one thing, not at individual elements.

[19:10] <pmichaud> in list context, you flatten it if it's a flattening object

[19:10] <pmichaud> and scalar variables never flatten by default

[19:10] <pmichaud> my $a = (1,2,3);   say (list $a);   # 1

[19:10] <pmichaud> my @b = (1,2,3);   say (list @b);   # 3

[19:11] <pmichaud> oops

[19:11] <pmichaud> forgot the .elems

[19:11] <pmichaud> my $a = (1,2,3);   say (list $a).elems;   # 1

[19:11] <pmichaud> my @b = (1,2,3);   say (list @b).elems;   # 3

[19:11] <frettled> So, hmm, my @b = (1,(2,3),4); say (list @b).elems;  # 4?

[19:12] <pmichaud> sure, but @b.elems would be 4 also :-)

[19:12] <frettled> d'oh :)

[19:12] <[particle]> my $a = (2,3); my @b = (1,$a,4); say (list @b).elems; #3

[19:13] <pmichaud> [particle]: correct

[19:13] <frettled> but with my @a = (2,3); ..., it would be 4?

[19:13] <[particle]> aye

[19:13] <frettled> Then I think I may have understood flattening a bit.

[19:14] <pmichaud> but in these last two cases, it's because the assignment to @b is doing the flattening

[19:14] <ash_> so really list and @() are for flatteningthings ? 

[19:14] <pmichaud> for flattening things that flatten in list context

[19:14] <frettled> :)

[19:14] <pmichaud> (I'm still not entirely certain about @() yet)

[19:15] <ash_> the spec says list and @() are funcitonally the same except @() takes $/ as a default parameter 

[19:15] <PerlJam> Lists and Arrays are very fundamental.  It seems a shame that the semantics surrounding them haven't been nailed down so that they can be explained to a newbie

[19:16] <pmichaud> sorry, I meant @(...)

[19:16] <pmichaud> @() means   $/.list

[19:16] <PerlJam> why have the exception though?

[19:17] <ash_> spec: S03 regarding list:  Forces the subsequent expression to be evaluated in list context. A list of Captures will be transformed into a flat list. Equivalent to @(...) (except that empty @() means @($/), while empty list() means an empty list).

[19:17] * PerlJam thinks the @() exception should go away

[19:18] <pugs_svn> r29573 | pmichaud++ | [pm.txt]:  A confirmation request for TimToady++ / others. 

[19:18] <pugs_svn> r29573 | 

[19:18] <pugs_svn> r29573 | Pm-18:  (Confirmation request)   S03:2111 indicates that the C< @(...) > 

[19:18] <pugs_svn> r29573 |     sigil contextualizer is the same as the C<list> listop.  Is this correct?

[19:18] <pugs_svn> r29573 |     In particular, given C< my $a = [1,2,3]; >, then C< @($a) >  is 1 and  

[19:18] <pugs_svn> r29573 |     C< @$a > is 3 ?   (For some reason I had been thinking that  @($a)  would

[19:18] <pugs_svn> r29573 |     act more like  $a.list  than  list($a) .)

[19:19] <pmichaud> ugh, forgot .elems or + again

[19:19] <pmichaud> afk, errand

[19:20] <pugs_svn> r29574 | pmichaud++ | [pm.txt]:  Typo correction in question. 

[19:21] <ash_> coming from a complete newb in this respect.  list context, in plain english, makes me think it takes the object and converts it to a list, so i was expecting @($a) to do something like wrapper the .List function or .list, in short, i expected, saying $a = 1, 2, 3; for @($a) { say $_ } to iterate through 1, 2, 3 

[19:23] <frettled> When I read "list context", I understand it as "treat the thing as if it was a list".  I don't expect conversion until I assign it.

[19:24] <frettled> That is, if I have an RHS (right hand side) of an expression that's in list context, I ought to use a list thingy on the LHS.

[19:24] <frettled> and vice versa, of course

[19:25] <ash_> well, if list context returned the object it was given in list form, then when you use it in a for loop, i thought it would iterate the list form, again, i think i am misunderstanding list context though 

[19:28] <PerlJam> ash_: I don't think so.

[19:28] *** k23z__ left
[19:33] <ash_> rakudo: my $a = 1, 2, 3; for @($a) { say $_ } 

[19:33] <p6eval> rakudo 1d4928: 1␤2␤3␤

[19:33] <ash_> ng: my $a = 1, 2, 3; for @($a) { say $_ }

[19:33] <p6eval> ng 57a806: 1 2 3␤

[19:33] <ash_> also contributed to my view of @() 

[19:35] <pmichaud> rakudo has it wrong (per the spec) there.

[19:35] <pmichaud> ash_: perhaps it makes more sense to think of  @(...)   in the sense of  @($a, 3)

[19:35] <pmichaud> i.e., we expect   @($a, 3)  to have two elements, even if $a is itself a list

[19:36] *** Chimo joined
[19:36] <ash_> ng:  my $a = 1, 2; for @($a, 3) { say $_.perl }

[19:36] <p6eval> ng 57a806: (1, 2)␤3␤

[19:36] <ash_> so, like that, right? 

[19:37] <pmichaud> according to the current spec, yes.

[19:37] <ash_> yeah, i see that now, that makes sense 

[19:37] <pmichaud> I'd prefer that we wait for confirmation of the meaning of @(...)   and stick to    @$a,  list($a), and/or $a.list

[19:37] <frettled> :)

[19:38] <pmichaud> in the case of something like    for @($a) { say $_.perl }    the @(...) is redundant

[19:38] <pmichaud> (per the current spec)

[19:38] <frettled> aha

[19:38] <ash_> well, list(List.new(1, 2, 3)) is wrong then, so you know

[19:38] <frettled> Would this make any sense:

[19:38] <ash_> ng: for list(List.new(1, 2, 3)) { say $_.perl }

[19:38] <p6eval> ng 57a806: (1, 2, 3)␤

[19:39] <frettled> $a = (1, 2); $b = (4, 5); for @($a, 3, $b) { say $_.perl }

[19:39] <pmichaud> you're correct, list() has that wrong.

[19:40] <ash_> my fault on that one then

[19:40] *** Chimo left
[19:42] <ash_> err, wait, i didn't write list, never mind, woot, not my fault :P i only did List.new 

[19:42] <ash_> which was also wrong :-\ 

[19:44] *** astinus left
[19:44] *** scion joined
[19:44] *** scion is now known as astinus

[19:45] *** stephenlb joined
[19:46] <ash_> do any of the loop constructs have a specific method they use? like 'for' for instance? 

[19:47] <pmichaud> 'for' is really 'map'

[19:47] <pmichaud> for  ... { block }     is really the same as    list(...).map({block})

[19:47] <pmichaud> (it's not that way yet in rakudo/ng, but it will be.)

[19:48] <ash_> so, if you had an object that implemented a .map function, and you did for $my_obj { } it would reference the .map? 

[19:48] <pmichaud> no

[19:48] <pmichaud> because it does the .map on  list($my_obj)

[19:49] <pmichaud> i.e., $my_obj is first evaluated in list context

[19:49] <pmichaud> which will create a list containing $my_obj

[19:50] <ash_> so... making your own iterator using gather is probably the 'right way' of doing something like that then? (ie: $my_obj.each({  }); 

[19:50] <ash_> where each is using a gather construct or something

[19:50] <pmichaud> well, you can still create your own .map -- it just isn't used by default with "for"

[19:52] <pmichaud> or you can define how  $my_obj.list() works

[19:52] <pmichaud> (i.e., it can return an iterator that 'for' then uses)

[19:52] <ash_> then you'd call it like: for $m_obj.list() { } 

[19:53] <ash_> or @$ i suppose

[19:53] <pmichaud> yes, or  for  @$m_obj { ... }

[19:53] <pmichaud> exactly

[19:53] <Tene> or: for $obj.magic_iter_lol() { ... }

[19:54] <ash_> hm, is there something that functions like the with operator in python? just curious 

[19:54] <pmichaud> given?

[19:54] <pmichaud> given $expr { ... }

[19:55] <pmichaud> oh, that's a bit different

[19:55] <ash_> but, you can override a function callback, is what i mean, so if you have a thread condition for instance, and you use with my_obj: it aquires the lock, then releases it at the end of the block

[19:55] <ash_> or any of the other various uses of with

[19:56] <dalek> rakudo/ng: 839da4d | pmichaud++ | src/builtins/List.pir:

[19:56] <dalek> rakudo/ng: Make sure that list() returns a List that is fully initialized and

[19:56] <dalek> rakudo/ng: properly flattens.  (ash++ for noticing this)

[19:56] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/839da4d3cbf8b0c69870c16a179222956b42a6d5

[19:57] <pmichaud> I don't know if there's any exact analogue in Perl 6.

[19:57] *** lumi_ left
[19:57] <ash_> it wouldn't be hard to make something like that if i wanted to use one in my own code, i was just wondering if there was something along those lines built in

[19:57] *** lumi joined
[19:59] <Tene> ash_: can you post an example?

[20:00] <ash_> of? 

[20:00] <Tene> I'm not familiar with python's 'with'

[20:02] <ash_> sure, one sec

[20:02] *** athaba joined
[20:02] <ash_> well, http://docs.activestate.com/activepython/3.1/python/whatsnew/2.6.html has some good examples see the section titled: PEP 343: The ‘with’ statement

[20:03] <ash_> they use it with a file at one point, with open('/etc/passwd', 'r') as f:    it automatically opens and closes the file when it first enters and later exits the with block, or the lock example acquires and releases the conditional 

[20:04] <ash_> its really just sugar 

[20:04] <ash_> but sometimes that means i get to write 2 less lines of code here or there 

[20:08] <ash_> another nice use of it i have seen is in a ORM the use it for transactions, so it starts the transaction when you enter the with statement, and applies it if you make it to the end of the statement

[20:08] *** athaba left
[20:12] <pugs_svn> r29575 | pmichaud++ | [pm.txt]  Followup question to Pm-16 answer (see diff for details). 

[20:13] <pmichaud> given $f = open('/etc/passwd') {   LEAVE { $f.close }; ... }

[20:13] <pmichaud> or, even

[20:14] <pmichaud> given open('/etc/passwd') {  ...;   LEAVE { .close } }

[20:14] <pmichaud> and the opened file is in $_

[20:14] <ash_> yeah, like i said, i can do the same thing or, extend the grammar if need be, i was more just curious since i haven't come across something that behaves like that 

[20:15] <pmichaud> if open('/etc/passwd') -> $f {  ...;   LEAVE { .close } }

[20:15] <pmichaud> er

[20:15] <pmichaud> if open('/etc/passwd') -> $f {  ...;   LEAVE { $f.close } }

[20:15] <pmichaud> and the else clause handles the case of the file not opening successfully :-)

[20:15] *** ab5tract left
[20:16] <pmichaud> given open('/etc/passwd') {   for .lines { .... };  LEAVE { .close } }

[20:17] *** lisppaste3 left
[20:17] <pmichaud> given open('/etc/passwd') || die "open fail"  {   for .lines { .... };  LEAVE { .close } }

[20:18] <pmichaud> something like those :-)

[20:18] *** Guest97031 left
[20:18] <ash_> see the only difference from that and python's with is any object can register a callback function for when you use it (its __enter__ and __exit__ ) 

[20:18] <jnthn> ash_: Yes, the "crazy bug" that we're hunting is exactly that. :-)

[20:18] <jnthn> ash_: It's not so crazy - we just use closure semantics to make it work.

[20:19] <jnthn> ash_: But we're missing some cloning to keep the right static chain attached somewhere.

[20:19] <ash_> jnthn i think its in role compose or classhow compose btw 

[20:19] <jnthn> ash_: Doubt it.

[20:19] *** ShaneC left
[20:19] <jnthn> ash_: Or at least, you maybe could fix it there, but it'd be the wrong place.

[20:19] <pmichaud> ng:  for list(List.new(1,2,3)) { say $_.perl }

[20:19] <p6eval> ng 57a806: sh: ./perl6: No such file or directory␤

[20:20] <jnthn> ash_: We call .clone on the Method objects which should be enough...

[20:20] <jnthn> but apparently it's not

[20:20] <pmichaud> ng:  for list(List.new(1,2,3)) { say $_.perl }

[20:20] <p6eval> ng 839da4: 1␤2␤3␤

[20:20] <pmichaud> \o/

[20:20] <jnthn> pmichaud: Yay!

[20:20] *** jan_ joined
[20:21] <pmichaud> that might also have been the bug that was plaguing me last night/earlier today with list assignment

[20:21] <pmichaud> I'll have to go back and try again

[20:22] <ash_> jnthn, what about in !select in the role then? 

[20:22] <ash_> thats when it applies the Int in Foo[Int] 

[20:22] <ash_> well, it does postcircumfix:<[ ]> which calls self.!select 

[20:24] *** lisppaste3 joined
[20:25] <jnthn> ash_: Right, but the .clone is emitted in src/Perl6/Compiler/Role.pm

[20:25] <jnthn> ash_: The select is what gets us to the role body.

[20:25] <jnthn> ash_: Note that we end up running the body of a role Foo[::T] { } once for each type parameterization that is used.

[20:27] <ash_> is there a reason the --target=pir would have a sub with 2 :anon's? its apparently not an error, just seems odd

[20:29] <pmichaud> it may be that rakudo is adding an :anon flag, and then PAST is adding another

[20:30] <jnthn> Does seem odd.

[20:30] * jnthn gotta go again now - back later

[20:31] <pmichaud> afk, errand

[20:31] <ash_> perl6 --target=pir -e "role Foo { }" then find the definition of Foo[]  it consistantly has 2 :anon, not a bug just an oddity 

[20:43] *** colomon joined
[20:49] *** synth left
[20:51] *** mikehh_ left
[20:52] *** mikehh_ joined
[20:56] *** bluescreen left
[20:57] *** _jaldhar left
[21:00] *** lisppaste3 left
[21:02] *** vinisterx left
[21:02] *** lumi left
[21:03] *** lumi joined
[21:03] *** mikehh_ left
[21:04] *** mikehh_ joined
[21:04] *** mssm joined
[21:05] *** uniejo left
[21:08] *** mikehh_ left
[21:08] *** mikehh_ joined
[21:09] *** bluescreen joined
[21:09] *** perlbotz joined
[21:09] *** jonasbn left
[21:09] *** perlbotz left
[21:11] *** cognominal left
[21:17] *** mikehh_ left
[21:18] *** mikehh_ joined
[21:20] *** mssm left
[21:24] *** cotto left
[21:25] *** k23z__ joined
[21:33] *** patspam joined
[21:34] *** ash_ left
[21:35] *** pmurias left
[21:37] *** cotto joined
[21:37] *** mikehh_ left
[21:40] *** lumi left
[21:40] *** lumi joined
[21:45] *** bluescreen left
[21:46] *** ruoso left
[21:52] *** ignacio_ left
[21:52] *** SmokeMachine left
[21:54] *** ash_ joined
[21:55] *** clintongormley left
[22:00] *** lumi left
[22:00] *** lumi joined
[22:01] *** yahooooo joined
[22:08] *** Su-Shee left
[22:15] *** perlpilot joined
[22:16] *** perlpilot left
[22:17] *** KyleHa left
[22:22] *** lisppaste3 joined
[22:28] *** lumi left
[22:28] *** lumi joined
[22:28] *** patspam1 joined
[22:28] *** patspam left
[22:33] *** mariano joined
[22:36] *** iblechbot left
[22:38] *** patspam joined
[22:39] *** patspam1 left
[22:55] *** synth joined
[22:57] *** cognominal joined
[23:00] *** lumi left
[23:00] *** lumi joined
[23:03] *** Chillance left
[23:05] *** mssm joined
[23:06] *** mariano left
[23:19] *** jferrero left
[23:20] *** payload left
[23:28] *** payload joined
[23:29] *** stephenlb left
[23:32] *** stephenlb joined
[23:35] *** lumi left
[23:35] *** lumi joined
[23:37] *** idemal left
[23:40] <dalek> rakudo/ng: c36717d | pmichaud++ | src/builtins/Array.pir:

[23:40] <dalek> rakudo/ng: Fix circumfix:<[ ]> to properly copy (STORE) values in an Array,

[23:40] <dalek> rakudo/ng: instead of keeping references.

[23:40] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/c36717d944c965bd32359a4ca77012d87bfad6a5

[23:40] <dalek> rakudo/ng: 47ef21b | pmichaud++ | src/builtins/ (3 files):

[23:40] <dalek> rakudo/ng: Adjust List!generate to always (lazily) flatten RPAs and Parcels

[23:40] <dalek> rakudo/ng: in the values of the list, even if no 'flatten' flag is set on

[23:40] <dalek> rakudo/ng: them.  This fixes empty [] to create an empty Array, as well as

[23:40] <dalek> rakudo/ng: reduce the number of places that we need to set the 'flatten' flag.

[23:40] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/47ef21b0baff1a6c06138296933a962613bfe032

[23:40] <dalek> rakudo/ng: 89fb627 | pmichaud++ | src/builtins/ (2 files):

[23:40] <dalek> rakudo/ng: Enable basic list assignment.  Doesn't seem to work yet with

[23:40] <dalek> rakudo/ng: assigning to list declarations (e.g.,  my ($a, $b) = ... ).

[23:40] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/89fb627fc59af16dae7abbb2f8778d9d22c48764

[23:44] <pmichaud> jnthn: we seem to be FAIL on list declarations... any clues?

[23:44] <pmichaud> ng:  my ($a, $b);

[23:44] <p6eval> ng 839da4: Redeclaration of symbol $a at line 1, near ";"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (src/stage0/HLL-s0.pir:328)␤

[23:44] <pmichaud> I may be able to take a look at it a bit later.

[23:45] <Tene> pmichaud: Out of curiosity, what was the main desire for tt389 (keep methods out of namespaces)?

[23:46] <Tene> I've got it down to 3 test failures.

[23:47] <Tene> The p6object one is awkward to debug, though. :(

[23:51] *** stephenlb left
[23:52] *** stephenlb joined
[23:57] *** lumi left
[23:57] *** lumi joined
