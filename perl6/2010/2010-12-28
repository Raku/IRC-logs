[00:00] <TimToady> but only if successful

[00:00] <flussence> will that return false if someone stuck a >/dev/null on the command line?

[00:00] <TimToady> no

[00:01] <flussence> /dev/full?

[00:01] <TimToady> that always succeeds

[00:01] <masonkramer> perl6: my $rv = say("hi"); say $rv.WHAT; say $rv;

[00:01] <p6eval> rakudo cae7f9: OUTPUT«hi␤Bool()␤Bool::True␤»

[00:01] <p6eval> ..pugs: OUTPUT«hi␤Bool␤1␤»

[00:01] <TimToady> but yes, output to a full disk should fail.

[00:01] <masonkramer> perl6: say("hi").WHAT

[00:01] <p6eval> pugs, rakudo cae7f9: OUTPUT«hi␤»

[00:01] <flussence> hm, it returns true there. Just tried.

[00:01] <TimToady> or to a shutdown socket

[00:02] <TimToady> that's weird

[00:02] <masonkramer> so if I capture the return value of &say in a variable, I get that expected behavior.  

[00:02] <masonkramer> if I do it immediately, 

[00:02] <masonkramer> jah

[00:02] <sorear> um, shouldn't I/O errors throw a (delayed) exception?

[00:02] *** Eth4n joined
[00:03] <TimToady> perl6: "0".say.WHAT.say

[00:03] <p6eval> rakudo cae7f9: OUTPUT«0␤Bool()␤»

[00:03] <p6eval> ..pugs: OUTPUT«0␤Bool␤»

[00:03] <TimToady> perl6: "42".say.WHAT.say

[00:03] <p6eval> rakudo cae7f9: OUTPUT«42␤Bool()␤»

[00:03] <p6eval> ..pugs: OUTPUT«42␤Bool␤»

[00:03] <TimToady> oh, it's probably the listop bug

[00:04] <TimToady> oh, no, it's my brane

[00:04] <TimToady> duh

[00:04] <masonkramer> yeah

[00:04] <masonkramer> say("hi").WHAT.say

[00:04] <masonkramer> works fine

[00:04] <masonkramer> neeeeevermind

[00:05] <masonkramer> is there a special case in the perl6 repl that suppresses printing of the return value of say?

[00:05] <TimToady> sorear: it should fail with an I/O error, yes, but not necessarily throw it

[00:05] <TimToady> just like any other failure

[00:05] <TimToady> sorear: did you see my speculation about @! the other day?

[00:06] <TimToady> and calling CATCH for each error in @!

[00:06] <TimToady> masonkramer: dunno

[00:11] <sorear> TimToady: no

[00:11] <sorear> TimToady: I don't really have a deep understanding of the failures system

[00:13] <TimToady> the idea is to replace $!.pending with @!, more or less, and treat all unhandled exceptions equally, other than feeding them to CATCH in one order or the other

[00:15] *** nymacro joined
[00:16] <sorear> Mostly I think seeing how p6exceptions are used in practice would help

[00:16] <TimToady> http://irclog.perlgeek.de/perl6/2010-12-18#i_3102010 and following

[00:17] <sorear> but I probably need to implement them before that can happen :)

[00:17] <sorear> thanks.

[00:17] <TimToady> which was, in fact, a response to your http://irclog.perlgeek.de/perl6/2010-12-18#i_3100836

[00:19] <TimToady> my ruminations are scattered over about an hour

[00:19] *** yarrak left
[00:19] *** yarrak joined
[00:19] *** yarrak left
[00:20] *** yarrak joined
[00:20] *** yarrak left
[00:20] *** yarrak joined
[00:21] *** icwiener left
[00:22] *** araujo left
[00:22] *** coldhead joined
[00:22] <sorear> TimToady: when a function returns, does @! become a thrown exception, or is it appended to the caller's @! ?

[00:23] *** yarrak left
[00:23] *** yarrak joined
[00:24] *** risou left
[00:24] <TimToady> I suspect it should throw if it reaches the end of a function with non-empty @!

[00:24] <TimToady> (after allowing CATCH to weed it)

[00:25] *** yarrak left
[00:25] *** yarrak joined
[00:25] <TimToady> but perhaps the user could pick the other behavior somehow if wanted

[00:25] <TimToady> fail if @! or some such

[00:25] <colomon> http://clojure.blip.tv/file/4503162/  -- wondering how to do this in p6.  But brainpower very low at the moment...

[00:26] <TimToady> (which would presumably have to be done in a LEAVE)

[00:28] <TimToady> yes, LEAVE { @!.fail if @! } or some such could probably be made to propagate to the outer @!, if default is to throw

[00:28] <TimToady> since LEAVE is outside of CATCH

[00:29] <TimToady> or use UNDO { fail }

[00:29] <TimToady> I suspect any fail should also copy out any @! to the outer @!

[00:31] <TimToady> fail should not hide inner exceptions; only CATCH should be able to handle exceptions

[00:31] <TimToady> I think...

[00:32] <sorear> TimToady: how does 'try' interact with @! ?

[00:33] <TimToady> try that supplies a default CATCH would handle all the @!

[00:34] <TimToady> it would just handle all the exceptions one at a time now, instead of throwing away $! and its $!.pending

[00:34] *** soroush left
[00:34] *** yarrak left
[00:35] <sorear> TimToady: how does try communicate @! to the surrounding code?

[00:35] *** soroush joined
[00:35] <TimToady> try doesn't have to do that

[00:35] <TimToady> try delegates all that to the CATCH and its block

[00:35] <TimToady> try with an explicit CATCH is a no-op

[00:36] <sorear> there's a disquieting amount of redundant code between niecza's implementations of 'class', 'role', and parameteric role

[00:36] <sorear> TimToady: so try { } with no CATCH throws the exceptions completely out and they can't be accessed?

[00:36] <TimToady> correct

[00:36] <TimToady> hmm, or not

[00:37] <TimToady> I think we're confusing two different uses of @! here...

[00:37] <sorear> Can I tell if try { } threw an exception?

[00:37] <Tene> I thoguht that try set its exception as handled, and then pushed it in $!

[00:39] <TimToady> Tene: we're talking about a slightly different model that gets rid of .pending (in response to some of your questions of Dec 18th)

[00:40] * Tene nods.

[00:40] <TimToady> but sorear++ is correct that we need to detangle "last handle exception(s)" from in-flight exceptions (either unthrown or thrown)

[00:40] <TimToady> *handled

[00:40] <Tene> Yes.

[00:41] <TimToady> the only time $! can really mean an in-flight exception is inside of CATCH (and maybe in LEAVE-like blocks)

[00:41] <perigrin> sorear: there is a line of thought that a class is simply a (set of) role(s) applied to the empty class

[00:42] <TimToady> but such blocks are also normal code that might want to refer to a handled exception, so we can't just overload $! for that

[00:42] <TimToady> whoops, holiday visitors, will think on this as we drive to Seattle tomorrow...

[00:43] <colomon> have a nice holiday visit!

[00:44] <Tene> Have nice holiday visitors, too!

[00:44] <lue> afk

[00:44] <Tene> try could return the @! of its block.

[00:45] <Tene> try {} == { ...; CATCH { @!.handled; return @! } }

[00:45] <Tene> approximately

[00:45] <sorear> Tene: what does it return to?

[00:46] <Tene> my @success = try { ... }

[00:46] <Tene> erm, @fail

[00:46] <colomon> rakudo: say +({ Any } ... *.defined)

[00:46] <p6eval> rakudo cae7f9: OUTPUT«0␤»

[00:46] <colomon> stupid, stupid programmer

[00:47] <colomon> rakudo: say !Any

[00:47] <p6eval> rakudo cae7f9: OUTPUT«Bool::True␤»

[00:47] <colomon> stupid, stupid, stupid programmer

[00:49] *** lichtkind joined
[00:52] *** Trashlord joined
[00:59] *** araujo joined
[00:59] *** araujo left
[00:59] *** araujo joined
[00:59] *** QinGW joined
[01:01] *** redicaps joined
[01:04] <sorear> 220, wow

[01:04] <sorear> we're even higher now than we were on the cusp of Star

[01:08] <perigrin> 7 more and you beat #moose

[01:09] *** cdarroch left
[01:10] *** Trashlord left
[01:16] <colomon> making sure you deal with the marginal cases in p2 is a brain-bender.  

[01:16] *** masonkramer left
[01:16] <sorear> p2?

[01:16] *** masonkramer joined
[01:16] <colomon> or perhaps that's the vicodin talking.

[01:16] <colomon> masak's contest, problem 2.

[01:17] <sorear> vicodin?  what happened? D:

[01:17] <colomon> surgery today, to fix an umbilical hernia.

[01:19] <colomon> I'm tired and a little sore, fuzzy and tired.

[01:20] <colomon> pretty sure I didn't mean to type tired twice there, either.  :)

[01:23] *** nymacro left
[01:23] <arnsholt> colomon: If it helps, masak has said that points on the border of the polygon can be handled in an implementation-defined manner =)

[01:23] <colomon> arnsholt: sure, the issue is how to robustly handle things.

[01:23] <arnsholt> Heh. True

[01:24] <arnsholt> I think I've got a pretty simple and robust solution though

[01:30] *** roen joined
[01:30] *** roen left
[01:31] *** roen joined
[01:31] *** roen left
[01:32] *** roen joined
[01:32] *** roen left
[01:34] *** roen joined
[01:41] *** araujo left
[02:03] *** araujo joined
[02:07] *** noganex left
[02:09] *** noganex joined
[02:27] *** ggoebel left
[02:32] *** ggoebel joined
[02:38] *** molaf left
[02:40] *** ggoebel left
[02:45] *** lichtkind left
[02:46] *** agentzh joined
[02:51] *** molaf joined
[03:01] *** mtk left
[03:18] *** GinoMan joined
[03:22] *** araujo left
[03:32] *** BaggioKwok joined
[03:37] *** yuki joined
[03:38] *** BaggioKwok left
[03:39] * GinoMan can't wait for perl6

[03:39] *** BaggioKwok joined
[03:40] *** BaggioKwok left
[03:42] <kthakore> p6eval: say ' GinoMan it's already here '

[03:43] <flussence> rakudo: say 'a' Zx 1..10 

[03:43] <p6eval> rakudo cae7f9: OUTPUT«a␤»

[03:43] <flussence> rakudo: say 'a' Xx 1..10 

[03:43] <p6eval> rakudo cae7f9: OUTPUT«aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa␤»

[03:45] *** yuki left
[03:47] *** yarrak joined
[03:47] <sorear> So many new people!

[03:54] <GinoMan> Ok, I mean, stableizes to where someone can write a book about it, it's used in production, and it's stable

[03:54] <kthakore> GinoMan: there is a perl6 book. 

[03:54] <diakopter> there was a book being written 5-6 years ago by brian d foy & merlyn

[03:55] <kthakore> diakopter: Hmm my impression was perl6 has changed alot since then?

[03:55] <diakopter> true

[03:56] <diakopter> they were updating it heavily 2-3 years ago, but it's on hiatus again I think

[03:58] <dalek> sprixel: d464ada | diakopter++ | / (10 files):

[03:58] <dalek> sprixel: YAWIPC; I'm too good to write descriptive commit messages (joking of course). The real reason is that I'm not good at coding in small increments; sorry!

[03:58] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/d464ada706

[04:03] <GinoMan> or maybe I should put it this way, "I can't wait until I can put #!/usr/bin/perl at the top of my script and it's perl 6 on most systems"

[04:05] <GinoMan> what's the perl6 book?

[04:05] <sorear> That will never happen.  /usr/bin/perl6 is incompatible with Perl 5 and will stay that way

[04:06] <sorear> As far as being available on most systems - I don't think that will happen, either

[04:06] <sorear> It was a historical accident that all the major Linux distributions wound up depending on Perl in the base system

[04:07] <sorear> (also, many distributions are forking perl these days.  If you want a Real Perl, you need to tell users to install it.)

[04:10] <diakopter> sorear: re "That will never happen.  /usr/bin/perl6 is incompatible with Perl 5 and will stay that way" - that's wrong

[04:11] <sorear> Any program installed as /usr/bin/perl MUST interpret Perl 5 by default

[04:11] <diakopter> sorear: according to the spec, /usr/bin/perl6's default behavior is (near-)perfect Perl 5 compatibility

[04:11] <sorear> It may be able to switch into Perl 6 mode

[04:11] <allbery_b> didn't the spec have to change on that though?

[04:11] <sorear> But that won't be the default, because it's incompatible

[04:11] <diakopter> ccording to the spec, /usr/bin/perl6's default behavior is (near-)perfect Perl 5 compatibility

[04:11] <allbery_b> wa originally "use v6;" but that caused some "time travel" issues

[04:11] <diakopter> according to the spec, /usr/bin/perl6's default behavior is (near-)perfect Perl 5 compatibility.  to switch to Perl 6 mode,  'use v6;' is near the top, or 'package something... '

[04:12] <diakopter> in S01

[04:12] <allbery_b> I thionk you need to check the latest spec.  I seem to recall that got killed because it caused some serious issues with (1) having to restart parse (2) inability to use perl6 -e sanely (3) some other similar warts

[04:12] <diakopter> The perl interpreter will assume that it is being fed Perl 5 code unless the code starts with a "class" or "module" keyword, or you specifically tell it you're running Perl 6 code in some other way, such as by:

[04:12] <diakopter> ^^ in S01

[04:12] <diakopter> today

[04:13] <diakopter> http://perlcabal.org/syn/S01.html

[04:13] <sorear> The "perl" interpreter

[04:14] <diakopter> referring to a Perl 6 compiler/interpreter

[04:18] <diakopter> otherwise the first part of that bullet "Migration is important." wouldn't make sense

[04:19] <lue> So does a Perl 6 program run in P5 mode by default? [or P5 compatible?]

[04:19] <kthakore> lue: Perl 6 and perl 5 have different interperter and are considered different languages

[04:20] <lue> I know. /me looks at S01 to get a better idea of the discussion

[04:23] <lue> [S01] from what I'm getting, A Perl 6 interpreter *does not* take the input as P6 until told so.

[04:25] <diakopter> which agrees with discussion here on #perl6 on many many occasions over the past few years

[04:26] <diakopter> allbery_b: what do you think got killed?

[04:26] *** soroush_ joined
[04:26] *** soroush left
[04:26] <lue> I'm someone who has never touched Perl 5 [ well, I tried it for 5 minutes, then decided P6 was better :) ] : Why would a Perl*6* interpreter want to assume Perl*5* by _default_ ?

[04:27] <sorear> A *Perl* interpreter must continue to take input as Perl 5

[04:27] <GinoMan> so then... the book on Perl6

[04:27] <GinoMan> ?

[04:27] <kthakore> GinoMan: ah sorry

[04:27] <sorear> Rakudo can get away with installing as 'perl6'

[04:27] <GinoMan> lue: lots of old code using 5.10

[04:27] <allbery_b> I recall a big fight on the mailing list about how it was wrong to require people to 'use v6;' in one-liners, but also wrong to make -e (or however *that* is now specced) behave differently from regular perl

[04:27] <diakopter> sorear: it's referring to a Perl 6 interpreter/compiler

[04:27] <GinoMan> the latest books on perl all discuss the current version to learn as perl 5.10

[04:27] <allbery_b> 5.12 came out pretty recently

[04:28] <allbery_b> "latest" for print is ... relative

[04:28] <GinoMan> true

[04:28] <GinoMan> they all mention perl 6 but don't cover it in depth

[04:28] <GinoMan> as far as I can tell

[04:28] <GinoMan> ok.... to bed i go

[04:29] <lue> goodnight GinoMan o/

[04:29] <GinoMan> kthakore: did you find the title of that book?

[04:29] <GinoMan> goodnight lue

[04:29] <kthakore> yeah

[04:29] <kthakore> GinoMan: sorry

[04:29] <kthakore> internet did

[04:29] <kthakore> died*

[04:29] <GinoMan> that's ok

[04:30] <GinoMan> I'll look it up later

[04:30] <GinoMan> gnight everyone!

[04:31] *** GinoMan is now known as GinoSleeps

[04:32] <lue> This is the first time I heard of Perl6 given this idiosyncracy [Although it was mentioned a couple days ago]. I think it's pretty... unexpected, to say the least.

[04:32] <kthakore> https://github.com/perl6/book GinoSleeps see download after sorry

[04:34] <diakopter> lue: it originates from the emphasis on migration, as that bullet says

[04:36] <diakopter> and it generally seemed achievable since pugs was able to operate in that mode

[04:38] *** _twitch joined
[04:38] <lue> I know. And I'm not saying it's a bad thing, it's just unexpected.

[04:39] *** Eth4n left
[04:39] *** Eth4n joined
[04:40] <lue> I haven't used P5, so to me making it run P5 by default isn't sensible. Although I do see why someone else would need it.

[04:41] <diakopter> :) like the millions of P5 users and billions of [copies of] P5 scripts :D ...

[04:42] <diakopter> but such an ideal scenario does seem much less achievable in light of the fact that Perl 5 is such a moving target (especially the past 4-5 years)

[04:43] <lue> lemme see the update history of S01...

[04:43] *** [Coke] left
[04:45] <diakopter> on that note, here's yet another p6 book: http://svn.perl.org/viewvc/perl6/doc/trunk/books/tutorial/

[04:45] <lue> I don't think that line about migration has been updated in a long time (of course the history only goes back to 26 Nov 2008)

[04:45] <diakopter> but here's the S01 history from 2006-pugscode http://svn.perl.org/viewvc/perl6/doc/trunk/design/syn/S01.pod?view=log

[04:46] <lue> thank you, diakopter /me looking

[04:46] <diakopter> 2005, I mean

[04:50] <lue> diakopter: were you around in the days of pugs?

[04:51] <diakopter> variously

[04:52] *** orafu left
[04:53] <lue> Would you say that the view of Perl 6 in relation to Perl 5 has changed over the years? I'm theorizing that view influenced the bit about P5-by-default.

[04:54] <diakopter> lue: yes.

[04:54] *** orafu joined
[04:55] <lue> My idea is that, if way back when P6 was considered a normal successor to P5, like P5 to P4 and so on, this sort of default would make sense.

[04:56] <diakopter> yeah

[04:57] <lue> But now that P6 is parallel with P5, I'm not so sure that's a sensible option anymore.

[04:57] <diakopter> that expectation has kinda morphed into a both forking ("different/separate but equal-ish languages") and interoperating ("linkable/usable from each other")

[05:00] * lue begins creating a detailed blog post.

[05:02] <allbery_b> it's not clear that parallel is the right word; rather, perl 5 is steadily migrating toward perl 6

[05:02] <allbery_b> starting with 5.10

[05:03] <diakopter> there are many facets to the discussion around that assertion

[05:03] <allbery_b> I imagine so

[05:03] <allbery_b> especially given that p6 i still in flux

[05:05] <diakopter> I think no one would dispute that the 'use v6' requirement is quite optimistic, but it begs the question, how optimistic in comparison to the other ideals of the language

[05:07] *** [Coke] joined
[05:10] <diakopter> lue: particularly relevant is the second-to-last bullet of S01

[05:11] <diakopter> though I might posit that the 'use v6' feature is a higher-order feature

[05:15] *** estrabd_xmas left
[05:17] <lue> I've always see    use v6;    as a way for a P5 interpreter to tell the user the code he tried running is actually P6.

[05:17] <diakopter> pugs' embedded/bridged p5 was quite useful, and I think its model of symbol/namespace-sharing/translation (and lexical scope-sharing/translation) is a good one that ought to be considered strongly by other implementations wishing to achieve the similar effect pugs could.

[05:18] <diakopter> lue: yep, it does that too (perhaps merely conveniently, now)

[05:20] <lue> Even though I don't see the need for embedding P5 code into P6 code (again, I have never used P5), I see that being useful for others. I just don't think it should parse as P5 by default.

[05:21] <diakopter> lue: true, I agree with you, if it's installed as "/prefix/bin/perl6".  but the Aug 2004 view was that it would be installed as "/prefix/bin/perl"

[05:22] <diakopter> so perhaps a clarification/reduction to S01 would be to specify exactly that, since it resolves those difficulties

[05:22] <diakopter> (as sorear mentioned above; rakudo can get away with installing as perl6)

[05:24] <lue> I'm wondering: would it be wise for a P6 installation to install as `perl' nowadays?

[05:24] <diakopter> right, that's what I'm proposing (as a spec clarification)

[05:26] <TimToady> it's already clarified by "or you specifically tell it you're running Perl 6 code some ohter way"

[05:26] <diakopter> "If an implementation doesn't implement the 'p5-as-default' mode, then it shouldn't be installed to /prefix/bin/perl, but should instead be installed to /prefix/bin/rakudo (and/or /prefix/bin/perl6 etc)

[05:26] <TimToady> naming your executable perl6 is one way

[05:26] <diakopter> oh

[05:28] <TimToady> any executable named "perl6" is allowed to assume Perl 6; likewise any file with a .p6 or .pm6 extension is assumed Perl 6

[05:28] *** cotto joined
[05:28] <TimToady> that was the phrase we added in after the initial formulation

[05:28] <TimToady> when it became more obvious that not all implementations would be interested in "replacing" Pelr 5

[05:29] <TimToady> *rl

[05:30] <TimToady> but yes, the original assumption was that we'd want /usr/bin/perl to be able to run either

[05:30] <TimToady> that seems less likely since p5 development picked up again

[05:31] <TimToady> so everyone's right :)

[05:33] <lue> Another interesting blast from the past for me. This is better than government-sanctioned history class! :)

[05:34] <lue> wait, when P6 was created (around 2000 IIRC), was P5 at a low point of activity?

[05:35] <TimToady> it was perceived to be stagnating

[05:36] <lue> Doesn't look like it today :)

[05:36] <TimToady> and the perl5-porters mailing list was extrememly, um, feisty in the period before that

[05:37] <diakopter> Is the general opinion that if a language isn't adding (breaking?) features somewhat frequently, then it's stagnating?

[05:37] <lue> .oO(feisty as in "excited, happy-to-code-Perl-5", or as in "nervous about the future" ?)

[05:38] <TimToady> feisty as in fight over new features that nobody sane wanted to add to Perl 5

[05:38] <diakopter> though Perl 5 was already essentially infitely extensible, so it really couldn't "un stagnate" unless one counted the enormous (but largely hidden because the curve of the earth isn't visible from the surface) growth of CPAN wasn't visible

[05:39] <diakopter> infinit*ely

[05:42] <diakopter> I guess my point is that languages generally have to make new paradigms available *by default* in the default installation.. and/or make backward-incompatible changes ... in order to be perceived as non-stagnating

[05:43] <diakopter> that's my perspective, anyway. I'd be glad to be corrected.

[05:47] <TimToady> cpan was also part of the stress on the core language, especially as source filters were proving to be non-scalable

[05:53] <lue> source filters?

[05:54] <sorear> source filters were the first attempt to add macros to Perl 5

[05:54] <sorear> they proved a failure as originally conceived

[06:31] <VXZ> speaking of failure...I just almost burnt my apartment down

[06:34] <diakopter> eek

[06:35] <VXZ> it's all good; at least the annoying smoke detector doesn't have a battery in it

[06:42] <diakopter> dukeleto excess flood?

[06:42] *** dukeleto joined
[06:43] <sorear> diakopter: no doubt secondary to a network hiccup

[06:43] <sorear> sometimes they cause an hour's worth of PONG messages to arrive at the server all at once, or something like that

[06:45] <VXZ> question about 'use v5'...does that allow me to use the same variables between perl 6 and perl 5 code?  What does it do with things that are represented differently between the two, like multidimensional data structures?  And what about lazily evaluated things like 0..Inf?

[06:49] <sorear> yes, undecided, undecided

[06:51] <VXZ> Is any of use v5 implimented right now?

[06:51] *** kaare joined
[06:51] *** kaare is now known as Guest94684

[06:51] <sorear> yes but not in Rakudo

[06:53] <VXZ> Hm.  What in?  Besides p5 :P

[06:54] <TimToady> pugs: use v5; print ord($"),"\n";

[06:54] <p6eval> pugs: OUTPUT«Error eval perl5: "sub { use ops (':default', 'binmode', 'entereval');; print ord($"),"\n";␤␤}"␤*** 'print' trapped by operation mask at (eval 2) line 1.␤␤Undefined subroutine &main:: called.␤»

[06:55] <lue> Is there a way to link to a specific version of a file in github (e.g. S01 as it stands right now), for future-proofing purposes?

[06:55] <VXZ> Thanks guys

[07:00] <lue> Nevermind, I found out.

[07:00] *** molaf left
[07:02] *** molaf joined
[07:02] <dalek> niecza: 0e836f6 | sorear++ | / (3 files):

[07:02] <dalek> niecza: Refactor handling of attributes and methods in backend

[07:02] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0e836f62bb

[07:02] <dalek> niecza: d4638e1 | sorear++ | / (10 files):

[07:02] <dalek> niecza: Implement attribute initializers

[07:02] <dalek> niecza: review: https://github.com/sorear/niecza/commit/d4638e157a

[07:02] <dalek> niecza: 25d6c5c | sorear++ | test (2 files):

[07:02] <dalek> niecza: Test mergeback

[07:02] <dalek> niecza: review: https://github.com/sorear/niecza/commit/25d6c5c52d

[07:02] <dalek> niecza: 710b329 | sorear++ | docs/announce.v1:

[07:02] <dalek> niecza: Describe today's changes for v1

[07:02] <dalek> niecza: review: https://github.com/sorear/niecza/commit/710b329a69

[07:07] *** yarrak left
[07:19] *** sukria joined
[07:27] <dalek> sprixel: ce47b50 | diakopter++ | / (9 files):

[07:27] <dalek> sprixel: 4-function arithmetic operators, among other things. YAWIPC. next: eval STRING  special form.

[07:27] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/ce47b50576

[07:33] *** sukria left
[07:36] *** snearch joined
[07:36] *** Layla joined
[07:37] <Layla> helo!

[07:45] *** LeifD joined
[07:47] *** sukria joined
[07:48] *** _twitch left
[07:52] <lue> blog post! https://rdstar.wordpress.com/2010/12/28/the-view-of-perl6-and-cleaning-the-specs/

[07:56] *** glow joined
[07:58] <sorear> Layla: HI!

[07:58] <sorear> Hi.

[07:59] <sorear> Layla: What I meant yesterday was that nobody here can understand how to us variable lookbehind

[08:04] <Layla> sorear: hey you remember me! ^_^

[08:07] <sorear> TimToady: Someone just private-mailed me to say that https://github.com/audreyt/pugs/tree/master/t/01-sanity is part of the official test suite and I should be using it instead of my home-grown file.  True or false?

[08:07] <Layla> sorear: You also told me that you are the implementors of the language, so I guess there is no variable length lookbehind in perl6 yet.. it is ok since many programming languages do not have it too.. 

[08:08] <Layla> sorear: can you tell me how who to know if a specific feature is implemented or not yet in a rakudo imp of perl6?

[08:09] <Layla> sorear: A link to some site would be great! :)

[08:09] <sorear> We have the spectest fudges, although that's rather too low level for most people

[08:10] <sorear> There's also the t/spectest.data file in your Rakudo checkout, at a higher level

[08:11] *** Trashlord joined
[08:11] <colomon> http://rakudo.org/status

[08:11] <colomon> for a very high level overview, easy to read

[08:14] <lue> goodnight #perl6 o/ [ whenever your night comes :) ]

[08:14] <sorear> bye lue.

[08:14] *** envi left
[08:15] <Layla> colomn/ sorear: thanks I will check them.

[08:19] <colomon> rakudo: say pi.unpolar(10)

[08:19] <p6eval> rakudo cae7f9: OUTPUT«-2.63602095158294 + -1.7090927253678i␤»

[08:19] <colomon> rakudo: say 10.unpolar(pi)

[08:19] <p6eval> rakudo cae7f9: OUTPUT«-10 + 1.22464679914735e-15i␤»

[08:19] <colomon> ah

[08:20] <colomon> rakudo: say (0 .. 2 * pi).roll

[08:20] <p6eval> rakudo cae7f9: OUTPUT«1␤»

[08:20] <colomon> rakudo: say (0 .. 2 * pi).rand

[08:20] <p6eval> rakudo cae7f9: OUTPUT«3.08020446862091␤»

[08:20] <colomon> still someone out of it, I fear.

[08:21] <colomon> *somewhat

[08:25] *** justatheory left
[08:26] *** araujo joined
[08:26] *** araujo left
[08:26] *** araujo joined
[08:31] <dalek> niecza: dc2fc3b | sorear++ | / (2 files):

[08:31] <dalek> niecza: Fix INIT block test

[08:31] <dalek> niecza: review: https://github.com/sorear/niecza/commit/dc2fc3bb27

[08:31] <dalek> niecza: c2857c1 | sorear++ | / (2 files):

[08:31] <dalek> niecza: Allow passing initial attribute values to .new

[08:31] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c2857c1c72

[08:36] *** Layla left
[08:40] <colomon> rakudo: say Complex.new(1, 2)

[08:40] <p6eval> rakudo cae7f9: OUTPUT«1 + 2i␤»

[08:57] *** Layla_89 joined
[09:00] *** Layla_89 left
[09:03] <colomon> rakudo: sub foo($a) [ $a // return Any; }; say foo(10); say foo(Complex);

[09:03] <p6eval> rakudo cae7f9: OUTPUT«===SORRY!===␤Confused at line 22, near "sub foo($a"␤»

[09:04] <colomon> rakudo: sub foo($a) [ $a }; say foo(10); say foo(Complex);

[09:04] <p6eval> rakudo cae7f9: OUTPUT«===SORRY!===␤Confused at line 22, near "sub foo($a"␤»

[09:04] <colomon> rakudo: sub foo($a) { $a // return Any; }; say foo(10); say foo(Complex);

[09:04] <p6eval> rakudo cae7f9: OUTPUT«10␤Any()␤»

[09:05] <colomon> woah, that allows for some nice golfing

[09:29] *** sftp_ joined
[09:29] *** sftp left
[09:33] *** adu joined
[09:37] <colomon> rakudo: say Complex.new(0, 1/2) - 1 - 1i

[09:37] <p6eval> rakudo cae7f9: OUTPUT«-1 + -0.5i␤»

[09:38] <colomon> rakudo: say Complex.new(0, 1/2) - (1 - 1i)

[09:38] <p6eval> rakudo cae7f9: OUTPUT«-1 + 1.5i␤»

[09:38] <colomon> rakudo: say Complex.new(0, 1/2) + (1 - 1i)

[09:38] <p6eval> rakudo cae7f9: OUTPUT«1 + -0.5i␤»

[09:49] *** cognominal joined
[09:49] *** snearch left
[09:53] *** lao294 left
[10:03] *** agentzh left
[10:07] *** adu left
[10:23] *** roen left
[10:29] *** QinGW left
[10:41] <colomon> masak: I'm starting to be happy with my p2 solution.  Worked out a couple of subtle bugs.  Currently have about 100 lines of code and 200 lines of tests.  :)

[10:46] <moritz_> the actual decision logic is 38 lines here, including comments and blank lines

[10:47] <moritz_> tests are 141 lines, including some ascii art visualizing the polygons

[10:47] *** pmurias joined
[10:49] <pmurias> why gives commit bits to the github perl6/roast repo?

[10:49] <moritz_> did you mean "who"?

[10:50] <moritz_> sorear, pmichaud an me (for now)

[10:50] <pmurias> yes

[10:50] <moritz_> since github doesn't have an API for organizations, we can't yet do it with hugme (which is the ultimate plan)

[10:50] <pmurias> moritz_: could i have one please?

[10:50] <moritz_> sure

[10:50] <pmurias> my github nick is pmurias

[10:51] <moritz_> done

[10:51] <pmurias> thanks

[10:51] <moritz_> pmurias: you're now in the 'perl6' team, which means you have access to roast, specs, perl6.org, modules.perl6.org etc.

[10:51] <pmurias> adding fuge markers for niecza is ok?

[10:51] <moritz_> sure

[10:54] <sorear> hello pmurias

[10:54] <sorear> glad I'm staying up an extra hour today

[10:55] *** snearch joined
[10:55] <pmurias> hi

[10:55] <pmurias> i'll try to get up ealier this week

[10:56] <pmurias> sorear: 4**20 is causing an error in the CLRBackend

[10:56] <pmurias> any use of the ** operator

[10:57] <sorear> there is no ** operator

[10:57] <sorear> what you're seeing is a STD buglet which causes the parser to fail to reject undefined standard infix operators

[10:58] <sorear> this couldn't happen with a full Perl 6 setting

[10:58] <pmurias> what was infix:<**> replaced with?

[10:59] <sorear> it wasn't

[10:59] <sorear> there is no &infix:<**> in Niecza's setting

[10:59] <sorear> it's not that I've replaced it; I just haven't gotten around to adding it

[10:59] <pmurias> i'll add it then

[11:00] * pmurias didn't notice the top of the huge error

[11:01] <sorear> I don't think we really need a backtrace for that one

[11:03] <pmurias> standard user errors should have one

[11:03] <sorear> there are 4 different ways errors can get reported in niecza

[11:03] <sorear> 1. Perl 6 exception handling - generates nice backtrace

[11:04] <sorear> 2. CLRBackend throws an exception - generates usually useless backtrace

[11:04] <sorear> 3. compiler Perl code throws an exception

[11:04] <sorear> 4. compiler calls sorry()

[11:05] <sorear> 2 and 3 are mostly assertions; I want to have all user errors caught in 1 and 4 but I'm not there yet

[11:05] *** coldhead left
[11:05] *** coldhead joined
[11:08] *** glow left
[11:09] *** agentzh joined
[11:10] *** daxim joined
[11:10] *** jhuni left
[11:14] <sorear> moritz_: https://github.com/blog/758-new-organizations-api ?

[11:23] <dalek> niecza: 711b4c6 | sorear++ | / (6 files):

[11:23] <dalek> niecza: Reimplement $?FOO in new metamodel

[11:23] <dalek> niecza: review: https://github.com/sorear/niecza/commit/711b4c6643

[11:23] <dalek> niecza: 396dce8 | sorear++ | / (3 files):

[11:23] <dalek> niecza: Fix backtrace file names

[11:23] <dalek> niecza: review: https://github.com/sorear/niecza/commit/396dce8480

[11:23] <moritz_> sorear: oooh, I didn't know that

[11:23] * sorear out

[11:25] *** redicaps left
[11:27] *** LeifD left
[11:28] *** wamba joined
[11:28] *** redicaps1 joined
[11:30] *** agentzh left
[11:43] *** LeifD joined
[11:44] <colomon> pmurias++ # was just thinking it was probably time to start looming at spectest on niecza, even if sorear++ isn't focusing on it.

[11:45] <tadzik> I think he is, just she eval seems to be a problem

[11:46] *** redicaps joined
[11:49] *** envi joined
[11:57] <dalek> roast: e75b0e8 | pmurias++ | S32-num/power.t:

[11:57] <dalek> roast: fudge power.t for niecza

[11:57] <dalek> roast: review: https://github.com/perl6/roast/commit/e75b0e871a

[12:03] <pmurias> what should i do if fuding breaks the test plan?

[12:03] *** coldhead left
[12:08] <moritz_> how would it do that?

[12:08] <moritz_> the usual #?skip doesn't

[12:09] <moritz_> ah, if you remove some tests with #?emit impl #

[12:09] <moritz_> then you can also #?emit skip(...)

[12:16] <pmurias> moritz_: i skipped a block containing a for loop which generates tests

[12:18] <moritz_> pmurias: then add a #?DOES $number_of_tests before the block

[12:19] *** Guest94684 is now known as kaare_

[12:20] *** masak joined
[12:20] <masak> oh hai, zebras.

[12:21] <masak> rakudo: say 42 ?? 1, 2, 3 !! 5

[12:21] <p6eval> rakudo cae7f9: OUTPUT«===SORRY!===␤Confused at line 22, near "say 42 ?? "␤»

[12:21] <masak> std: say 42 ?? 1, 2, 3 !! 5

[12:21] <p6eval> std 625303c: OUTPUT«===SORRY!===␤Precedence of , is too loose to use between ?? and !!; please use parens around inner expression at /tmp/6F00FgKzoH line 1:␤------> say 42 ?? 1,⏏ 2, 3 !! 5␤Parse failed␤FAILED 00:01 120m␤»

[12:22] <pmurias> moritz_: why do we keep the plans, we have done_testing?

[12:23] <masak> pmurias: there has been some back-and-forth on that in the spectest suite.

[12:24] <masak> pmurias: the chief argument for keeping plan numbers seems to be that the statistics become more reliable.

[12:24] <moritz_> which IMHO is not a good point, since they don't mean anything

[12:25] <masak> nevertheless, people like statistics.

[12:25] <masak> and I can certainly see it from the point of view of those collecting the statistics.

[12:27] <pmurias> how many fourth roots of 8 are there?

[12:27] <moritz_> 4

[12:28] <moritz_> there are 4 fourth roots of any finite complex number

[12:28] <pmurias> and 8i?

[12:28] <moritz_> rakkudo: print ~8i.roots(4)

[12:28] <moritz_> rakudo: print ~8i.roots(4)

[12:28] <p6eval> rakudo cae7f9: OUTPUT«1.55377397403004 + 0.643594252905583i -0.643594252905582 + 1.55377397403004i -1.55377397403004 + -0.643594252905582i 0.643594252905583 + -1.55377397403004i»

[12:29] <moritz_> http://en.wikipedia.org/wiki/Fundamental_theorem_of_algebra

[12:29] <masak> \o/

[12:30] <moritz_> http://en.wikipedia.org/wiki/Properties_of_polynomial_roots is even more fitting

[12:30] * moritz_ marks the day in the calendar which is reserved for theoerm usage

[12:31] <moritz_> http://abstrusegoose.com/133

[12:31] <moritz_> *theorem

[12:32] <pmurias> DOES sets affects all following things not just one

[12:32] <moritz_> DOES should affect a block

[12:32] <moritz_> if not, you've found a bug in fudge

[12:33] *** bluescreen joined
[12:33] <masak> fudgebug.

[12:33] *** bluescreen is now known as Guest54734

[12:34] <pmurias> looking at the code there seems to be a bug there

[12:35] <pmurias> should it be done_testing or done-testing?

[12:37] <tadzik> _

[12:38] <masak> ...which is also against Perl 6 "practices", come to think of it.

[12:38] <masak> but it's inherited from Perl 5 which only has underscores, of course.

[12:39] <pmurias> where does the Test.pm test suit live nowdays?

[12:41] <moritz_> in each compiler's repo

[12:41] <moritz_> wait

[12:42] * moritz_ misread the question

[12:42] <moritz_> mu

[12:42] <moritz_> t/02-test-pm/

[12:42] *** am0c^ left
[12:43] <masak> lue: nice post with nice pictures -- https://rdstar.wordpress.com/2010/12/28/the-view-of-perl6-and-cleaning-the-specs/

[12:44] <masak> lue: the "tuning fork" metapohor was devised around this point: http://strangelyconsistent.org/blog/the-wish-the-tuning-fork-and-the-one-true-heir

[12:47] <pmurias> lue: you are aware that the default only applies if the perl6 interpreter is invoked as 'perl'?

[12:48] <masak> sorear++: congrats on the v1 announcement!

[12:52] <pmurias> where was the v1 announced to?

[12:52] <moritz_> p6a

[12:52] *** ggoebel joined
[12:52] <moritz_> planetsix

[12:55] <tadzik> p6u

[13:07] <masak> maybe a status report is in order: I've started using niecza to make a Markdown converter. it will take on the order of two weeks to build, I think. I'm running into quite a lot of minor issues, which is good. my goal is to eventually replace the Perl 5 Markdown converter with the Perl 6 one in my blog software psyde, and not loose much performance doing so.

[13:07] <masak> that may require me to precompile the Markdown source code somehow, because currently compilation is slow in niecza.

[13:09] <masak> blocker: I'm caught up in HPatMoR and unable to code. ;)

[13:09] *** lidden joined
[13:11] <lidden> Has Rakudo Star 2010.12 been cancelled?

[13:12] <masak> hi. no, it's usually released a week after the montly Rakudo release.

[13:12] <masak> and that one was... last Thursday.

[13:12] * masak checks that

[13:12] <masak> yes.

[13:14] <dalek> roast: f65933f | pmurias++ | S32-num/power.t:

[13:14] <dalek> roast: add #?DOES to S32-num/power.t to fix fudging for niecza

[13:14] <dalek> roast: review: https://github.com/perl6/roast/commit/f65933f13c

[13:15] <lidden> Ok, Thanks.

[13:16] *** masonkramer left
[13:16] *** masonkramer joined
[13:21] *** redicaps left
[13:23] <masak> s/loose/lose/ # argh!

[13:23] <masak> I hate it when I see that typo in print :(

[13:23] <VXZ> I hate it when I see any typo in print

[13:36] *** GinoSleeps left
[13:38] *** fhelmberger joined
[13:38] *** fhelmberger left
[13:39] *** fhelmberger joined
[13:42] <shortcircuit> I realize it's out of order, but with operators like &&=, &=, ||=, += and such being so commmon, wouldn't it make more sense to define a metaoperator to apply to &&, &, ||, +, etc. instead?

[13:42] *** tomaw joined
[13:43] <colomon> shortcircuit: that's generally what is done

[13:43] *** roen joined
[13:43] <masak> shortcircuit: what gave you the impression that they're not defined that way?

[13:44] <shortcircuit> I just noticed the "New operators" line in the Niecza v1 announcement on planet perl six.

[13:44] <shortcircuit> For new ?= operators to be defined, it would seem necessary that the general case is that they're not already.

[13:45] <shortcircuit> Which is why I suggested the metaop.

[13:45] <colomon> ah, I cannot speak for what Niecza does

[13:48] <masak> I was also a bit surprised that && was defined in niecza but &&= wasn't.

[13:48] <colomon> hmmm, where does STD.pm live these days?

[13:48] <colomon> to be far, I think &&= is a bit of a special case.

[13:48] <masak> colomon: http://github.com/perl6/std

[13:49] <colomon> because it shortcircuits

[13:49] <colomon> masak++

[13:49] * shortcircuit groans

[13:49] <masak> right. && is a special case, because it short-circuits.

[13:49] * shortcircuit just realized he's not in #haskell any longer, because he hasn't been pinged by 'shortcircuiting', et al in a while.

[13:50] *** smash joined
[13:50] <smash> hello everyone

[13:51] <masak> smash! \o/

[13:51] <colomon> \o

[14:01] <colomon> shortcircuit: anyway, it definitely is a meta-op in theory and in Rakudo, but I dunno what Niecza does with it.

[14:02] <colomon> rakudo: sub infix:<splat>($a, $b) { $a ~ " splat " ~ $b; }; say "a" splat "b"; my $a = "fred"; $a splat= "barny"

[14:02] <p6eval> rakudo cae7f9: OUTPUT«a splat b␤Null PMC access in invoke()␤  in main program body at line 1␤»

[14:02] <colomon> std: sub infix:<splat>($a, $b) { $a ~ " splat " ~ $b; }; say "a" splat "b"; my $a = "fred"; $a splat= "barny"

[14:02] <p6eval> std 625303c: OUTPUT«ok 00:01 125m␤»

[14:03] <masak> colomon: might help to make it an 'our' sub.

[14:03] <colomon> masak: is that one known?  seems like I might have stumbled across it six months ago...

[14:03] <colomon> rakudo: our sub infix:<splat>($a, $b) { $a ~ " splat " ~ $b; }; say "a" splat "b"; my $a = "fred"; $a splat= "barny"

[14:03] <masak> it's known.

[14:03] <p6eval> rakudo cae7f9: OUTPUT«a splat b␤»

[14:03] <colomon> rakudo: our sub infix:<splat>($a, $b) { $a ~ " splat " ~ $b; }; say "a" splat "b"; my $a = "fred"; $a splat= "barny"; say $a

[14:03] <p6eval> rakudo cae7f9: OUTPUT«a splat b␤fred splat barny␤»

[14:03] <colomon> masak++

[14:05] *** mtk joined
[14:12] *** araujo left
[14:13] *** adu joined
[14:14] *** plainhao joined
[14:18] *** araujo joined
[14:18] *** araujo left
[14:18] *** araujo joined
[14:21] <masak> nom &

[14:25] *** shi joined
[14:25] *** adu left
[14:25] *** masak left
[14:31] *** MayDaniel joined
[14:40] *** roen left
[14:44] *** xinming joined
[14:45] *** shi left
[14:48] *** kaare_ left
[14:49] *** fhelmberger left
[14:50] *** vastak joined
[14:51] *** roen joined
[14:56] *** fhelmberger joined
[14:57] *** sftp joined
[14:57] *** sftp_ left
[15:00] *** icwiener joined
[15:01] * colomon is starting to worry he's too fuzzy in the head to make progress on p1.

[15:01] <LeifD> where is rakudos bug reports stored?

[15:04] *** wamba left
[15:04] <colomon> http://rt.perl.org/rt3/Public/?nossl=true

[15:04] <LeifD> been there. The bugs seem to be so old?

[15:05] <[Coke]> LeifD: some of them are, sure.

[15:05] <LeifD> Is there a way to order them, newest to old

[15:07] <[Coke]> If you are not a guest, you can click on "Created" header to sort by.

[15:07] <LeifD> Im a guest. That solves it ;).

[15:09] <[Coke]> You might be able to self-register for a bitcard account off the main page.

[15:09] <LeifD> Already on it.

[15:15] <LeifD> Works good now :)

[15:16] <colomon> oooo, stack machine!

[15:16] *** LeifD left
[15:26] *** roen left
[15:28] *** am0c left
[15:29] *** jest joined
[15:30] * colomon 's Forth heritage still comes out every now and then...

[15:54] *** thepler joined
[16:00] *** _twitch joined
[16:03] *** justatheory joined
[16:09] *** vastak left
[16:09] *** JimmyZ joined
[16:09] *** vastak joined
[16:10] *** Intensity joined
[16:12] <rjbs> p1?

[16:15] *** hercynium joined
[16:15] *** risou joined
[16:16] <colomon> masak's quiz, problem one

[16:25] *** risou left
[16:26] *** risou joined
[16:30] *** JimmyZ left
[16:35] *** WonTu joined
[16:36] *** spq1 joined
[16:36] *** WonTu left
[16:39] <moritz_> http://strangelyconsistent.org/blog/masaks-perl-6-coding-contest

[16:42] <colomon> by george, I think I've got it.

[16:42] *** moritz_ changes topic to: »ö« Welcome to Perl 6! | http://perl6.org/ | evalbot usage: 'perl6: say 3;' or rakudo:, niecza:, std:, or /msg p6eval perl6: ... | irclog: http://irc.perl6.org/ | UTF-8 is our friend! | http://tinyurl.com/p6contest

[16:42] <moritz_> colomon: who is george?

[16:43] <colomon> I presume the phrase originally comes from one of the English kings.  (which is to say, I have no clue.)

[16:43] *** snearch left
[16:44] *** JodaZ joined
[16:44] <colomon> Seems like there are only three of us actually working on the contest, if we go by the chatter on #perl6

[16:45] <colomon> (and T-135 to #phasers?)

[16:45] * moritz_ won't make it to #phasers today

[16:45] <moritz_> having breakfast with $rest_of_family and then a board game :-)

[16:46] <colomon> what game?

[16:46] * colomon will be at #phasers unless he is napping.

[16:48] * colomon hopes moritz_ has better luck than he has with playing board games once he has a little one around...

[16:48] <moritz_> colomon: http://en.wikipedia.org/wiki/Carcassonne_%28board_game%29

[16:48] <colomon> Oh sure, we have Carcassonne

[16:48] *** lichtkind joined
[16:49] <lichtkind> rakudo: 4 and 5

[16:49] <p6eval> rakudo cae7f9:  ( no output )

[16:49] <lichtkind> rakudo: say 4 and 5

[16:49] <p6eval> rakudo cae7f9: OUTPUT«4␤»

[16:49] <[Coke]> t/spec/S29-context/exit.rakudo

[16:50] <colomon> Carcassonne is one of those lovely games that two can play.

[16:50] <[Coke]> (fails 2nd test with latest parrot, even with whiteknight's fix)

[16:51] <[Coke]> looks like "exit" and "exit 5" are not handled the same in Rakudo, as whiteknight's fix makes them both exit quietly in parrot.

[16:51] <moritz_> colomon: we celebrate New Year's Eve with a family where the parent manage to invite people for playing board games, even though they have a toddler. So I do have hope :-)

[16:51] <[Coke]> rakudo: say "hi" ; exit

[16:51] <p6eval> rakudo cae7f9: OUTPUT«hi␤»

[16:52] <[Coke]> rakudo: say "hi" ; exit 3

[16:52] <p6eval> rakudo cae7f9: OUTPUT«hi␤»

[16:52] <[Coke]> (works fine against parrot 2.11.0)

[16:52] <moritz_> it seems that the rakudo on p6eval is the last before the bump to 2.11.0

[16:52] * moritz_ curses at the bytecode incompatibilities

[16:53] <colomon> moritz_: our guy now sleeps well enough in the evening that we will probably be able to have people over to play once or twice a month when the holiday season is over.

[16:53] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[16:54] * moritz_ runs wipe-and-rebuild-rakudo.sh

[16:54] <moritz_> [Coke]: does S02-magicals/pid.t pass for you?

[16:56] *** kanishka joined
[16:57] *** MayDaniel left
[16:57] <[Coke]> moritz_: yes.

[16:57] <lichtkind> rakudo: say 4 xor 5

[16:57] <p6eval> rakudo : OUTPUT«sh: ../p/bin/perl6: not found␤»

[16:57] <lichtkind> rakudo: say 0 xor 5

[16:57] <p6eval> rakudo : OUTPUT«sh: ../p/bin/perl6: not found␤»

[16:58] <lichtkind> rakudo: say 5

[16:58] <p6eval> rakudo : OUTPUT«sh: ../p/bin/perl6: not found␤»

[16:58] <[Coke]> uhoh.

[16:58] <moritz_> lichtkind: the rakudo on p6eval is currently being rebuilt

[16:58] <moritz_> sorry for the inconvenience

[16:58] <lichtkind> k

[16:58] <lichtkind> its ok

[16:59] <lichtkind> moritz_: i have fresh os here doesnt came around to install rakudo

[16:59] <flussence> I was gonna suggest using try.rakudo... but it looks like I'll have to fix that again now :(

[17:00] <flussence> huh, screen session's gone

[17:01] <flussence> oh, box was rebooted...

[17:02] <flussence> hm...

[17:02] <flussence> → say $*PERL

[17:02] <flussence> name	rakudo

[17:02] <flussence> version	2010.09-3-ga820a44

[17:02] <flussence> seems a bit stale...

[17:03] <shortcircuit> lichtkind: Installing rakudo's pretty easy. Finding the directions I used seems to be hard, though.

[17:04] *** soroush_ left
[17:04] *** redicaps1 left
[17:04] <shortcircuit> https://github.com/rakudo/rakudo/

[17:05] <shortcircuit> Looks like the inlined README is the instruction set I used. I went with the latest release from http://github.com/rakudo/star/downloads , though

[17:05] <flussence> seen ash_

[17:05] <aloha> ash_ was last seen in #perl6 25 days 21 hours ago saying "sorear: i think you have to evaluate a constant at compile time".

[17:05] <flussence> aw, jeez.

[17:05] <moritz_> rakudo: say $*PERL

[17:05] <p6eval> rakudo : OUTPUT«name    rakudo␤version  2010.12-3-g3750262␤␤»

[17:06] <flussence> tryrakudo's using a perl6 in his user dir, I'd install a newer one myself for the site but I dunno how well that'd go on feather3; it seems a bit tight on RAM

[17:06] <moritz_> flussence: I think he copied a compiled perl6.pbc from his own machine, or something

[17:07] <flussence> hm, that could work...

[17:09] <flussence> well, site's functioning now anyway.

[17:16] <flussence> (or it would be, if I'd noticed there were two separate source trees to update. argh!)

[17:16] <daxim> mascot page:  http://duke.kenai.com/

[17:18] *** soroush joined
[17:25] <dalek> book: 7be2120 | (Przemysław Wesołek)++ | lib/ (2 files):

[17:25] <dalek> book: Nicely wrap long text in tables, due to tabulary.

[17:25] <dalek> book: 

[17:25] <dalek> book: Closes #41

[17:25] <dalek> book: review: https://github.com/perl6/book/commit/7be21205ab

[17:25] <moritz_> the book, the book

[17:25] <moritz_> we have to finish it

[17:30] <jest> do it, do it, so I can read it ;)

[17:32] *** kanishka left
[17:35] *** Eth4n left
[17:35] *** Eth4n joined
[17:35] *** drbean joined
[17:37] <jest> I can help with some LaTeX knowledge and building, but I'm a Perl 6 newbie

[17:41] <dalek> book: a9caeb2 | moritz++ | src/images/title.svg:

[17:41] <dalek> book: add vector graphic version of the cover image

[17:41] <dalek> book: review: https://github.com/perl6/book/commit/a9caeb2213

[17:41] *** lue joined
[17:41] <moritz_> jest: using this .svg instead of the .jpeg for the title would be nice

[17:42] <moritz_> needs to be converted to pdf first, I believe

[17:43] * moritz_ decides to put the authors in alphabetical order

[17:44] <jest> sure, I'll convert it to PDF and add the file to the repo.

[17:44] <lichtkind> rakudo: say 5

[17:44] <p6eval> rakudo : OUTPUT«5␤»

[17:44] <jest> I don't see the required fonts in the system. Have to look for them on the web

[17:45] <lichtkind> rakudo: say 0 xor 5

[17:45] <p6eval> rakudo : OUTPUT«0␤»

[17:45] <lichtkind> rakudo: say 2 xor 5

[17:45] <p6eval> rakudo : OUTPUT«2␤»

[17:45] <moritz_> jest: I think i have the fonts, I can do the conversion too

[17:45] <jest> (I mean the ones used in SVG, generated PDF won't need them)

[17:45] *** cdarroch joined
[17:45] *** cdarroch left
[17:45] *** cdarroch joined
[17:47] <jest> hm, Avenir Next Pro, by Linotype; doesn't look like a free face...

[17:48] <moritz_> not free, no

[17:49] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[17:49] <jest> moritz_: go ahead, if you can. Exporting to PDF (from Inkscape?) please turn texts into paths, and maybe rasterize filter effects

[17:49] <moritz_> inkscape is sooo slow to start up

[17:50] *** espadrine joined
[17:51] *** kanishka joined
[17:51] <dalek> book: 3e3427b | moritz++ | src/images/title.pdf:

[17:51] <dalek> book: add pdf-ized cover image

[17:51] <dalek> book: review: https://github.com/perl6/book/commit/3e3427b8bc

[17:51] *** kanishka left
[17:53] *** risou left
[17:54] <tadzik> ~~

[17:54] <jest> moritz_: how about inkscape src/images/title.svg -D -T -A src/images/title.pdf, for me it runs pretty fast (preloaded, though)

[17:54] <moritz_> jest: that's what I just committed... took felt 10s

[17:54] <jest> _moritz: the text in PDF doesn't look like Avenir

[17:54] <tadzik> carcassone++

[17:55] * moritz_ is pretty ignorant to font questions :(

[17:56] <moritz_> seems I only have Avenir LT Std and not Avenir Next Pro

[17:56] <jest> moritz_: are you sure in inkscape the SVG looks exactly like (fonts...) the frontpage of the book?

[17:56] <moritz_> jest: not sure, no

[17:57] <jest> moritz_: OK, I'll change the code in LaTeX to use PDF, which may be corrected later.

[17:57] * shortcircuit is stuck in a holding pattern at work. Could compare screenshots and do other mindless things.

[17:57] <lichtkind> shortcircuit: do you know dep repo that has rakudo?

[17:57] <lichtkind> debian

[17:58] <shortcircuit> lichtkind: No, I don't. Running Lenny at home. I used the linked instructions and the latest tarball to install under my user directory.

[17:59] <huf> there was an ancient version in debian experimental if you feel like using an old rakudo with an old parrot AND potentially breaking your debian while doing so :)

[17:59] *** espadrine left
[18:00] <diakopter> moritz_++ https://github.com/perl6/book/raw/3e3427b8bc/src/images/title.pdf

[18:01] <diakopter> I guess the orange moth signifies a Camelia that hasn't blossomed into her full rainbow-colored Egyptian coat

[18:01] <moritz_> diakopter: sri++ came up with it, I merely did some conversion

[18:03] <dalek> book: 51c28cd | moritz++ | lib/book.sty:

[18:03] <dalek> book: alphabetic order of contributors

[18:03] <dalek> book: review: https://github.com/perl6/book/commit/51c28cd774

[18:04] <moritz_> diakopter: it's certainly an allusion to camelia, and at the same time less controversial

[18:05] <shortcircuit> I'd try put together a .deb using checkinstall, but 'make install' doesn't place things in, e.g. /usr/local/*, so I don't know quite how it'd behave. (I also don't know that much about changing Rakudo's installer.)

[18:05] <diakopter> to follow the Joseph (in Genesis) analogy, I guess she's still ruled/persecuted by her older siblings

[18:05] <shortcircuit> *try to

[18:05] <moritz_> shortcircuit: rakudo is installed to the same prefix as parrot

[18:05] <moritz_> shortcircuit: so once you have a good parrot package

[18:06] <moritz_> it's a piece of cake

[18:06] * shortcircuit SSHes home and pokes around

[18:07] <shortcircuit> How old is Parrot 2.0.0-1?

[18:07] <diakopter> mummified?

[18:09] <shortcircuit> apt-cache show indicates [email@hidden.address] for the Maintainer of the Parrot package. *checks mailing list archives for undead behavior*

[18:10] *** M_o_C joined
[18:11] * shortcircuit is reminded of the parrot sketch from Monty Python.

[18:11] <shortcircuit> It may apply to that list.

[18:11] <shortcircuit> Wow.

[18:11] <dalek> sprixel: 1572a27 | diakopter++ | / (7 files):

[18:11] <dalek> sprixel: make the recursive operator precedence actually work correctly

[18:11] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/1572a27c59

[18:12] <flussence> debian's effort looks a fair bit more lively than gentoo's atm

[18:12] <flussence> (if I get sufficiently irritated, I might do something about that at some point)

[18:18] <[Coke]> 2.11 just came out, monthly releases.

[18:23] *** masak joined
[18:23] <masak> ahoy!

[18:24] <tadzik> ahoy!

[18:25] * masak sits down writing a bit of Markdown converter in Perl 6

[18:27] <shortcircuit> I'm curious. How many Perl 6 developers in here are paid to work on implementations of Perl 6? (Either explicitly so, or on something that they can treat such work as a dependency)

[18:29] *** LeifD joined
[18:33] *** kanishka joined
[18:35] <[Coke]> several people are receiving grants.

[18:35] <[Coke]> but I wouldn't expect those to be == a salary or anything.

[18:36] <[Coke]> pretty sure everyone has a day job that takes precedence.

[18:36] <lichtkind> shortcircuit: , huf thanks 

[18:36] <masak> the grants aren't salary-level, but they're not insignificant either.

[18:36] <[Coke]> colomon: holy crap, sir.

[18:36] <huf> lichtkind: for what? i *hope* you didnt install what i suggested ;)

[18:38] <masak> I should have made this one of the problems in the Perl 6 Coding Contest: http://en.wikipedia.org/wiki/Firing_squad_synchronization_problem :)

[18:41] <shortcircuit> masak++....Now I need to figure out how to work that into a Rosetta Code task.

[18:41] <masak> ooh

[18:41] <masak> shouldn't be too difficult. :)

[18:42] <shortcircuit> masak: Although...you're welcome to get sucked into the glorious timesink that is RC, if you like. :)

[18:42] <masak> I'll certainly think about it :)

[18:42] <masak> though I've created quite a number of personal glorious timesinks already, and I tend to have them take precedence :)

[18:43] * masak hacks a bit more on Markdown

[18:43] <shortcircuit> First hit's free. All subsequent ones, too. :)

[18:43] <masak> Free in the Linux sense, "only if your time isn't worth anything" :P

[18:44] <masak> man, using niecza is worth it just for the heredocs...

[18:44] *** MayDaniel joined
[18:45] <dalek> book: be7ea6f | (Przemysław Wesołek)++ | lib/book.sty:

[18:45] <dalek> book: Switched to PDF version of the logo.

[18:45] <dalek> book: review: https://github.com/perl6/book/commit/be7ea6fb8e

[18:45] <dalek> book: f3ea109 | (Przemysław Wesołek)++ | src/images/title.pdf:

[18:45] <dalek> book: PDF logo version more resembling previous one.

[18:45] <dalek> book: review: https://github.com/perl6/book/commit/f3ea10968c

[18:46] *** jest left
[18:47] *** shi joined
[18:51] *** MayDaniel left
[18:51] <Util> In Perl 6, can you think of any circumstance that this:

[18:51] <Util>     if some-multi-term-expression {...}

[18:52] <Util> would differ from this?: 

[18:52] <Util>     if ?(some-multi-term-expression) {...}

[18:54] <Util> In other words, is ?() redundant in *every* if-conditional-clause?

[18:54] <flussence> rakudo: my $x = 1 but role { method Bool { !!! } }; if $x { say 'a' }; if ?$x { say 'b' }

[18:54] <p6eval> rakudo : OUTPUT«a␤Stub code executed␤  in 'Bool' at line 22:/tmp/4IvEvrnu8I␤  in 'prefix:<?>' at line 468:CORE.setting␤  in main program body at line 22:/tmp/4IvEvrnu8I␤»

[18:55] <flussence> not sure what the difference is there, but there is one.

[18:55] <masak> Util: if the .Bool method is overridden, boolifying twice might have arbitrary consequences.

[18:58] <pmurias> masak: any feature missing in niecza you would like me to add?

[18:58] <Util> Hmmm. Since this is in regards to P5-to-P6 translation, .Bool and roles should not be factors. Thx!

[18:58] *** Eth4n left
[18:58] <masak> pmurias: do you think you could put in multi dispatch? :P

[18:59] * shortcircuit likes multi dispatch

[18:59] <pmurias> i could move the one i did for mildew over

[18:59] <pmurias> but i doubt it would be very fast

[18:59] <masak> fast is a later concern for multis.

[19:00] * shortcircuit notes that as he was writing his first Perl 6 programs last week, almost all of his subs became multis.

[19:02] <masak> sorear, pmurias: in my Markdown code, I've copy-pasted Test.pm6 and modified it so that it prints "got" and "expected" information

[19:02] <masak> niecza: say "foo\n".perl

[19:02] <p6eval> niecza 406e042: OUTPUT«Can't locate JSON.pm in @INC (@INC contains: /home/p6eval/niecza/src /etc/perl /usr/local/lib/perl/5.10.1 /usr/local/share/perl/5.10.1 /usr/lib/perl5 /usr/share/perl5 /usr/lib/perl/5.10 /usr/share/perl/5.10 /usr/local/lib/site_perl .) at /home/p6eval/niecza/src/NAMBackend.pm

[19:02] <p6eval> ..line 9…

[19:02] <masak> hm.

[19:02] <masak> "Unable to resolve method perl in class Str" locally.

[19:03] <masak> pmurias: if you want, you could put in .perl for the CORE classes.

[19:03] <pmurias> masak: got and expected should be merged in

[19:03] <masak> they'd be even better with .perl, though.

[19:06] <pmurias> testing .perl properly requires eval :(

[19:06] <masak> I haven't felt a pressing need for &eval yet. but I suspect I will, any day now.

[19:08] <pmurias> eval doesn't tend to be very usefull in everyday programming

[19:08] <masak> no, but it's wonderful in the workaround toolset.

[19:08] <shortcircuit> Isn't it needed for REPL?

[19:10] <masak> not really.

[19:10] <masak> just compilation.

[19:10] <lichtkind> huf for the info

[19:10] <masak> alternately, "only if you're writing the REPL in the implementation language" :)

[19:10] <shortcircuit> masak: I believe RC has a task for that. :)

[19:10] <pmurias> REPL's usually need some extra magic so that lexicals persist between calls

[19:11] * pmurias uses REPL mostly as calculators

[19:11] <masak> people: is there a more efficient way to write C<< [<!before \n\n> .]+ >> ?

[19:12] <sorear> [ \N+ || \n <!before \n> ]+ maybe?

[19:12] <masak> nice, thanks.

[19:12] *** Chillance joined
[19:14] <pmurias> sorear: hi

[19:14] <pmurias> sorear: should i rename .dump to .perl?

[19:14] <pmurias> with fixes to make it return perl code

[19:16] <sorear> shortcircuit: I have a metaop which can make but=, +=, -=, ~= etc, but && is a special case as remarked

[19:17] <sorear> shortcircuit: currently $x ~= $y turns into assignop(&infix:<~>, $x, $y) - can't make that work with && easily

[19:17] <sorear> shortcircuit: esp. since there is no &infix:<&&>

[19:18] *** kaare joined
[19:18] *** kaare is now known as Guest55231

[19:19] *** Guest55231 is now known as kaare_

[19:21] <sorear> pmurias: yes

[19:21] <masak> rakudo: grammar G { token TOP { [<para> \n*]* }; token para { [ \N+ || \n <!before \n> ]+ } }; for G.parse("foo\nbar\n\nbaz")<para> { say "|", $_ }

[19:21] <sorear> I think I lost that battle

[19:21] <p6eval> rakudo : OUTPUT«|foo␤bar baz␤»

[19:21] <masak> sorear: you might want to look into why the above produces a different output in niecza.

[19:21] <pmurias> sorear: which battle?

[19:21] <sorear> pmurias: trying to get .perl to stop being called that

[19:21] <masak> sorear: it says "|bar" rather than "bar".

[19:22] <sorear> ow.

[19:22] <pmurias> sorear: what is the reasoning behind that?

[19:23] <masak> sorear: sorry, "|baz" rather than "baz".

[19:23] <masak> sorear: that is, it implicitly listifies that expression when it probably shouldn't.

[19:24] <sorear> pmurias: it's not particularly useful for serializing, and people should be using JSON or whatever anyway, so I think it makes more sense to optimize for readability and simplicity than Perl

[19:24] <masak> sorear: TimToady has said that an expression should only be listified if there's something syntactical to cause it to listify, either at the beginning of the expression (like '@') or at the end (like '.[]')

[19:25] * masak submits nieczabug

[19:26] <dalek> niecza: c1a6e23 | sorear++ | lib/Cursor.cs:

[19:26] <dalek> niecza: Fix listification of degenerate captures

[19:26] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c1a6e23ce0

[19:26] <masak> whoa!

[19:26] *** Patterner left
[19:26] <masak> I didn't have a chance to press "Submit"! :)

[19:27] <masak> sorear: it's a pleasure to work with you.

[19:28] *** envi left
[19:30] <pmurias> rakudo: class Foo {};say Foo.perl;

[19:30] <p6eval> rakudo : OUTPUT«Foo␤»

[19:30] <pmurias> rakudo: class Foo {};say Foo.new.perl;

[19:30] <p6eval> rakudo : OUTPUT«Foo.new()␤»

[19:31] *** flussence_ joined
[19:33] *** MayDaniel joined
[19:33] *** flussence_ is now known as flussence

[19:38] *** Psyche^ joined
[19:38] *** Psyche^ is now known as Patterner

[19:39] *** estrabd joined
[19:46] <pmurias> sorear: i get a compile error on the current niecza

[19:48] *** kanishka left
[19:48] <pmurias> it might be an overly old mono

[19:49] <pmurias> http://pastebin.com/idWnc1Li

[19:53] <[Coke]> if I can get a spectest run against a newer version of parrot, any reason not to update the  revision?

[19:55] <tadzik> how do I 'make clean' niecza using xbuild?

[19:58] <masak> sorear: https://github.com/sorear/niecza/issues#issue/17 is a bother when things go wrong and debugging is needed. :/

[20:01] <masak> nom &

[20:02] *** masak left
[20:05] *** Eth4n joined
[20:05] *** Eth4n left
[20:05] *** Eth4n joined
[20:11] *** Eth4n left
[20:11] *** Eth4n joined
[20:11] *** Eth4n left
[20:11] *** Eth4n joined
[20:12] *** Eth4n left
[20:12] *** Eth4n joined
[20:12] *** Eth4n left
[20:12] *** Eth4n joined
[20:14] <colomon> [Coke]: please feel free.  :)

[20:15] *** shi left
[20:19] *** daxim left
[20:21] *** _twitch left
[20:23] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_operator_tablet

[20:29] *** molaf left
[20:35] <dalek> sprixel: 149c5fc | diakopter++ | / (11 files):

[20:35] <dalek> sprixel: nested (every parent lexical scope included) eval EXPR  working.

[20:35] <dalek> sprixel: return value of evals not yet bound, but can be eventually, straightforwardly.

[20:35] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/149c5fc081

[20:37] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_operator_tablet

[20:37] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[20:40] *** vastak left
[20:43] *** plainhao left
[20:43] <dalek> sprixel: b1df5f8 | diakopter++ | perlesqueTreeParser.g:

[20:43] <dalek> sprixel: delete unneeded file

[20:43] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/b1df5f8e04

[20:43] <dalek> sprixel: 6055def | diakopter++ | sprixel/src/ (13 files):

[20:43] <dalek> sprixel: delete more unneeded files

[20:43] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/6055defbd9

[20:43] *** LeifD left
[20:44] *** a_Pat joined
[20:55] *** MayDaniel left
[20:56] *** Eth4n left
[20:57] <tadzik> hmm. I was thinking about writing a chapter for The Book, with easier grammar examples. Now I'm wondering, is there a need, or could the manpower be focused on something more interesting?

[21:00] <tadzik> maybe writing about packages and modules?

[21:01] <tadzik> or defining own operators in the operators section

[21:03] *** jest joined
[21:07] *** Eth4n joined
[21:07] *** Eth4n left
[21:07] *** Eth4n joined
[21:12] *** rgrau joined
[21:12] <dalek> sprixel: a6cfc57 | diakopter++ | sprixel/ (3 files):

[21:12] <dalek> sprixel: demo of doubly-nested string eval and named sub direct recursion

[21:12] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/a6cfc57911

[21:16] *** hercynium left
[21:19] *** hercynium joined
[21:19] *** hercynium left
[21:19] *** hercynium joined
[21:20] *** ShaneC joined
[21:21] *** cognominal left
[21:21] <diakopter> perl6: say((my $a) ~ ($a = "moo"))

[21:21] <p6eval> rakudo : OUTPUT«moomoo␤»

[21:21] <p6eval> ..pugs: OUTPUT«moo␤»

[21:21] <diakopter> niecza: say((my $a) ~ ($a = "moo"))

[21:21] <p6eval> niecza 406e042: OUTPUT«Can't locate JSON.pm in @INC (@INC contains: /home/p6eval/niecza/src /etc/perl /usr/local/lib/perl/5.10.1 /usr/local/share/perl/5.10.1 /usr/lib/perl5 /usr/share/perl5 /usr/lib/perl/5.10 /usr/share/perl/5.10 /usr/local/lib/site_perl .) at /home/p6eval/niecza/src/NAMBackend.pm

[21:21] <p6eval> ..line 9…

[21:21] <diakopter> urp

[21:23] *** ShaneC left
[21:23] <sjohnson> oink!

[21:25] <colomon> mooooooooo

[21:25] *** [hercynium] joined
[21:25] *** [hercynium] left
[21:25] *** [hercynium] joined
[21:25] <tadzik> zezezezezebra!

[21:25] <tadzik> or, well, whatever

[21:26] * shortcircuit should see what's in The Book.

[21:27] <shortcircuit> I wonder if finding language analogies for concepts would be a good addition.

[21:27] *** hercynium left
[21:27] *** [hercynium] is now known as hercynium

[21:28] <shortcircuit> For example, when I blogged about writing my first Perl 6 program, someone commented that 'multi' reminded him of guards in Erlang. That kind of conceptual bridge might be useful.

[21:29] <shortcircuit> Ok, obviously, I come from a biased background in such things...

[21:31] <pmurias> what's your background?

[21:31] *** mtk left
[21:31] <shortcircuit> pmurias: I run rosettacode.org

[21:32] *** mtk joined
[21:34] *** Guest54734 left
[21:35] <pmurias> multi's and erlang guards are a different conceptually but have a similiar role

[21:39] *** coldhead joined
[21:42] *** simcop2387 joined
[21:45] *** fhelmberger left
[21:47] *** shi joined
[21:49] *** mtk left
[21:53] *** silug joined
[22:02] *** nadim joined
[22:03] *** a_Pat left
[22:05] *** vert2_ joined
[22:10] <moritz_> http://mmol-6453.livejournal.com/257585.html # don't know if it has been noticed yet

[22:10] *** Eth4n left
[22:23] *** GinoMan joined
[22:24] *** kaare_ left
[22:26] *** kfo joined
[22:34] *** simcop2387 left
[22:38] *** MayDaniel joined
[22:39] *** M_o_C left
[22:41] *** hercynium left
[22:44] *** pmurias left
[22:46] *** ggoebel left
[22:50] <colomon> ..... aiiiiieeee, what's the method to make something lazy unlazy?

[22:50] * colomon has too much vicodin in his system to remember, he fears.

[22:51] <Tene> eager?

[22:51] <colomon> \o/

[22:51] <colomon> Tene++

[23:00] *** jest left
[23:08] *** soroush left
[23:08] *** soroush joined
[23:10] *** simcop2387 joined
[23:11] *** simcop2387 left
[23:11] <dalek> sprixel: d7da935 | diakopter++ | / (9 files):

[23:11] <dalek> sprixel: named sub invocation (without &) & beginnings of use statement,

[23:11] <dalek> sprixel: which will need to pause parsing/compiling of that particular

[23:11] <dalek> sprixel: lexical block, save its location, and eval the rest of that

[23:11] <dalek> sprixel: lexical block as a lexical scope contained within the scope

[23:11] <dalek> sprixel: of the compilation unit resulting from the 'use' statement.

[23:11] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/d7da935e68

[23:13] *** araujo left
[23:13] *** simcop2387 joined
[23:17] <diakopter> BEGIN blocks will of course be available, trivially, as well

[23:18] *** spq1 left
[23:20] <colomon> I don't suppose someone out there has a good set of test cases and answers for masak++'s p1?  ;)

[23:21] <colomon> afk 4 noms

[23:27] *** araujo joined
[23:34] *** vm joined
[23:39] *** vm left
[23:47] *** masak joined
[23:47] <masak> <colomon> I don't suppose someone out there has a good set of test cases and answers for masak++'s p1?  ;)

[23:48] <masak> I must warn everyone considering borrowing test cases from each other that I will consider all signs of plagiarism -- even non-obvious ones -- a strong disadvantage.

[23:49] <masak> I'm not going to disqualify anyone for it, I'll just not consider it to be elegant solutions.

[23:50] <masak> the rational thing for contestants to do is to be fairly discreet about their own code.

[23:56] <masonkramer> What's the metaclass of < a b c >? What's the metaclass of Array?  How can I find this out programmatically?

[23:58] <masak> masonkramer: generally, all normal classes have the same metaclass.

[23:58] <masak> masonkramer: somehow I sense that you're really asking about something else...

[23:58] *** yarrak joined
[23:58] <masonkramer> You're right

[23:58] *** kst left
[23:59] <masonkramer> I'll ask a better question then

[23:59] <masonkramer> What happens when I type Array.^methods

