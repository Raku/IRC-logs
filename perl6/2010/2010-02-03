[00:05] *** charsbar joined
[00:06] *** xomas_ joined
[00:07] *** kst` joined
[00:08] *** nadim__ joined
[00:08] *** charsbar_ left
[00:09] *** nadim_ left
[00:09] *** xomas left
[00:11] *** Chillance left
[00:11] *** kst left
[00:13] *** kensanata left
[00:18] *** xomas_ left
[00:19] *** stephenlb left
[00:19] *** payload left
[00:19] *** payload joined
[00:20] *** diakopter sets mode: +vv dalek pugs_svn

[00:22] *** diakopter sets mode: -q $~a

[00:22] <diakopter> hm

[00:24] *** stephenlb joined
[00:24] *** payload left
[00:33] <colomon> pmichaud: Method 'postcircumfix:<[ ]>' not found for invocant of class 'GatherIterator'

[00:34] <colomon> Obviously Seq has [ ], but how can I make that work from an Iterator?

[00:34] <colomon> (automatically, I mean.)

[00:35] <TimToady> postcircumfix:<[ ]> is one of those methods with a loopback out in Any or Cool or some such that can promote an iterator to a sequence

[00:36] *** kidd` left
[00:39] *** cdarroch left
[00:39] <colomon> TimToady: I like the sound of that...

[00:39] <colomon> afk...

[00:40] *** uniejo joined
[00:43] *** justatheory left
[00:44] *** nacho left
[00:47] *** nihiliad joined
[00:48] <pugs_svn> r29623 | lwall++ | [CORE.setting] track recent name changes 

[00:49] *** pmurias left
[00:50] *** lestrrat is now known as lest_away

[00:59] *** orafu joined
[00:59] *** yinyin joined
[01:00] *** orafu left
[01:06] *** orafu joined
[01:08] *** patspam left
[01:09] *** justatheory joined
[01:09] <pugs_svn> r29624 | lwall++ | [S07] @@ squashing 

[01:10] *** patspam joined
[01:11] *** patspam left
[01:13] *** patspam joined
[01:13] *** drbean joined
[01:22] *** lest_away is now known as lestrrat

[01:22] *** quietfanatic joined
[01:26] <pugs_svn> r29625 | lwall++ | [S29] more @@ and iterator patchups 

[01:26] *** quietfanatic left
[01:29] <pugs_svn> r29626 | lwall++ | [S13] *@@ ---> **@ 

[01:33] <pugs_svn> r29627 | lwall++ | [S32/Containers] last @@ removal not counting S09 

[01:36] <diakopter> TimToady: typo in r29625

[01:36] <diakopter> it's

[01:36] <diakopter> oh; it was in the original too

[01:37] *** pjcj joined
[01:39] <diakopter> it's the shrinking of the trigils

[01:40] <diakopter> @ to *

[01:40] *** agentzh joined
[01:41] <diakopter> or, "when triclops winks"

[01:42] <wolverian> TimToady: are the 2008 and 2009 state of the onions online somewhere? 

[01:46] <TimToady> no, not really.  they were both more or less live demos, so not really suitable

[01:51] *** patspam left
[01:51] *** xomas_ joined
[01:51] *** xomas_ left
[01:51] *** xomas_ joined
[01:51] *** xomas_ left
[01:52] *** quietfanatic joined
[02:01] *** sidewinder128 joined
[02:03] <sidewinder128> Hello, How stable is perl6/Rakudo? or I keep doing with perl 5?

[02:05] *** mssm left
[02:06] <diakopter> sidewinder128: keep on with perl5 regardless, but try out perl6/Rakudo in a few months

[02:07] <sidewinder128> alright thanks

[02:07] *** mssm joined
[02:08] <sjohnson> hi guys

[02:10] <pugs_svn> r29628 | diakopter++ | [S29] syntaxos (grammaros?) (spellos?) (typos?) 

[02:11] <diakopter> TimToady: do you expect to give a SotO this year?

[02:13] *** sidewinder128 left
[02:13] *** hicx174 joined
[02:16] * sjohnson would like to attend

[02:19] <pugs_svn> r29629 | lwall++ | [S09] @@, what's that?  Never heard of it... 

[02:20] <sjohnson> diakopter: how's it going?

[02:22] <diakopter> sjohnson: oh, good

[02:22] <diakopter> how're you

[02:22] <sjohnson> great.  i wrote a CODE128 barcode implementation from scratch in Clipper, and it uses intelligent switching technology between B and C modes.  Perl saved me about 6 hours on the project

[02:23] <sjohnson> i'm just a bit excited, as i used to think barcodes were rocket science, prior to reading a spec on how certain standards of them are laid out

[02:23] * diakopter had to look up what Clipper is

[02:23] <sjohnson> old DOS programming language

[02:23] <sjohnson> diakopter: http://en.wikipedia.org/wiki/Clipper_%28programming_language%29

[02:24] <sjohnson> but there is a modern open source compiler that compiles it for multi-platform, called Harbour Project... even supports Perl regex using pcre!

[02:24] *** ShaneC left
[02:24] <sjohnson> only reason im using Clipper is because at work we have an old piece of in-house software that does POS, and needs to run on Win64 for a change

[02:25] <TimToady> maybe the SOTO this year will just be me standing up, running 'perl6 tree', which prints a Christmas tree, whereupon I sit back down, and let perl6 do the rest of the speech.

[02:25] <sjohnson> "This is the 7th annual State of the Perl Onion speech, wherein I tell you how Perl is doing. Perl is doing fine, thank you. Now that that's out of the way, I'd like to spend the rest of the time telling jokes."

[02:26] <sjohnson> ^^^ made me lul

[02:27] * diakopter wanders off to find a sbux

[02:29] <pugs_svn> r29630 | lwall++ | [S07] typos from markjreed++ 

[02:31] <pugs_svn> r29631 | lwall++ | [STD] recognize ** as a slice marker on variadic parameters 

[02:33] <sjohnson> ... PERL!!! *yells loudly at work*

[02:34] <sjohnson> nothing gets me more in a Perl programming mood than writing it while listening to the Ghostbusters theme

[02:35] *** nihiliad left
[02:39] <pugs_svn> r29632 | lwall++ | [STD] oh yeah, also delete that @@ sigil we used to have once upon a time. 

[02:39] <colomon> "I ain't afraid of no bugs!"

[02:39] <sjohnson> colomon: that's the Perl 6 attitude

[02:39] *** sjohnson sets mode: +o colomon

[02:39] <sjohnson> :)

[02:39] *** xomas_ joined
[02:39] *** xomas_ left
[02:39] *** xomas_ joined
[02:40] *** xomas_ left
[02:50] *** nihiliad joined
[02:51] *** k23z__ left
[03:03] *** mssm left
[03:05] *** sbilik joined
[03:07] *** sbilik left
[03:08] *** sbilik joined
[03:13] *** ihrd joined
[03:13] *** ihrd left
[03:16] *** sbilik left
[03:20] *** rml_ joined
[03:23] *** uniejo left
[03:31] *** rml_ left
[03:34] <pugs_svn> r29633 | colomon++ | [t/spec] Fudge for ng1. 

[03:54] *** ira joined
[03:55] *** ira is now known as quester

[03:57] *** simcop2387 left
[04:06] *** hercynium left
[04:07] *** lestrrat is now known as lest_away

[04:10] *** simcop2387 joined
[04:11] <quester> ?eval my @b[1]=2;@b.perl.say;

[04:16] *** stephenlb left
[04:16] <diakopter> pugs: my @b[1]=2; @b.perl.say;

[04:16] <p6eval> pugs: OUTPUT«[undef, 2]␤»

[04:19] *** quietfanatic left
[04:23] *** Rahul__ left
[04:26] <quester> rakudo: my @b[1]=2;@b.perl.say;

[04:26] <p6eval> rakudo 1d4928: OUTPUT«Confused at line 10, near "[1]=2;@b.p"␤in Main (file <unknown>, line <unknown>)␤»

[04:48] *** lest_away is now known as lestrrat

[04:54] <quester> rakudo: my @b; @b[1]=2; @b.perl.say;

[04:54] <p6eval> rakudo 1d4928: OUTPUT«[undef, 2]␤»

[04:57] <diakopter> ng: my @b; @b[1]=2; @b.perl.say;

[04:57] <p6eval> ng 58d896: OUTPUT«Method 'perl' not found for invocant of class 'Proxy'␤current instr.: 'perl6;Array;_block3823' pc 244539 (src/gen/core.pir:20540)␤»

[04:57] <diakopter> haven't seen that error b4

[04:58] <diakopter> ng: my @b; @b[0]=2; @b.perl.say;

[04:58] <p6eval> ng 58d896: OUTPUT«[2]␤»

[04:58] <diakopter> ng: my @b; @b[1] = 3; @b[0]=2; @b.perl.say;

[04:58] <p6eval> ng 58d896: OUTPUT«[2, 3]␤»

[04:58] <quester> Yes... that's not very pretty at all.

[04:58] <diakopter> ng: my @b; @b[1] = 3; @b[0]=Mu; @b.perl.say;

[04:58] <p6eval> ng 58d896: OUTPUT«[Mu, 3]␤»

[04:59] <diakopter> Tene: want something to fix?

[05:00] <Tene> diakopter: maybe.  I'd like to hear it, at least.

[05:00] <Tene> The next few days are lookin pretty horrible for me, though.

[05:02] *** Baggiokwok joined
[05:04] *** Baggiokwok left
[05:05] *** jaldhar joined
[05:07] *** nihiliad left
[05:08] <diakopter> Tene: I just meant the prior error (last 10 lines)

[05:11] *** quester left
[05:17] *** diakopter__ joined
[05:17] <diakopter__> test

[05:17] <diakopter__> ok good

[05:17] *** diakopter__ left
[05:19] <Tene> diakopter: the proxy thing?

[05:25] *** fcahoon joined
[05:25] <fcahoon> hello, anyone home?

[05:28] *** fcahoon left
[05:28] *** pnate joined
[05:29] *** justatheory left
[05:44] *** lisppaste3 left
[05:46] *** xomas_ joined
[05:46] *** xomas_ left
[05:46] *** xomas_ joined
[06:00] *** agentzh left
[06:08] *** lisppaste3 joined
[06:08] *** cjk101010 joined
[06:12] *** revdiablo joined
[06:12] *** revdiablo left
[06:12] *** revdiablo joined
[06:20] *** agentzh joined
[06:25] *** quester_ joined
[06:28] *** quester_ left
[06:31] <diakopter> TimToady: have you tried STD against v3 of NYTProf? http://blog.timbunce.org/2009/12/24/nytprof-v3-worth-the-wait/  it says they rewrote the subroutine caller tracking entirely, fixing [all of?] the places it was guessing on the call origin...

[06:32] *** quester_ joined
[06:35] <diakopter> also, /me impressed by http://yapgh.blogspot.com/2010/01/threaded-xs-callback-finally-gets.html

[06:48] <pugs_svn> r29634 | lwall++ | [t/spec] fix all occurrences of @@ one way or another 

[06:52] *** drbean left
[07:10] *** payload joined
[07:18] *** Su-Shee joined
[07:18] <Su-Shee> good morning

[07:20] *** hicx174 left
[07:23] *** patspam joined
[07:23] *** kaare joined
[07:23] *** kaare is now known as Guest24683

[07:26] <colomon> o/

[07:27] <colomon> pmichaud, TimToady: what should be the type returned from "reverse" now? 

[07:27] <colomon> It's spec'd and tested as a List.

[07:29] *** arthur-_ left
[07:29] <colomon> In Rakudo master and ng/ng1 it returns an Array.  And of course, in ng1, Arrays are no longer Lists.

[07:30] *** arthur-_ joined
[07:30] <colomon> An equally obvious and probably smarter implementation would return an Iterator.

[07:32] *** quester_ left
[07:32] <TimToady> an unmarked return returns a Parcel, and that's more or less what List means

[07:34] <TimToady> diakopter: no I haven't tried v3

[07:34] <colomon> As comparison, map is spec'd as returning a List of Parcel -- right now in ng1 it returns an Iterator.

[07:34] <TimToady> is really a parcel of parcels

[07:35] <TimToady> the inner parcels are simply the return values of the inner block

[07:35] <TimToady> so it falls out naturally

[07:39] <pugs_svn> r29635 | colomon++ | [t/spec] Change the type we desire to get back from "reverse" to Iterable.  May be worth tightening to Parcel at some point. 

[07:39] <colomon> Hope that's an acceptable approximation.

[07:40] <TimToady> almost nothing user visible should be returning an iterator

[07:41] <TimToady> there's nothing says we have to declare the return type at all :)

[07:43] <colomon> True!

[07:43] <colomon> boy seems solidly asleep again, so back to bed for me.

[07:46] *** meppl joined
[07:46] *** arthur-_ left
[07:55] *** arthur-_ joined
[08:12] *** iblechbot joined
[08:37] *** xinming_ joined
[08:40] *** xinming left
[08:43] *** barney joined
[08:46] <moritz_> good morning

[09:00] *** tuxdna left
[09:02] *** hicx174 joined
[09:04] *** dr_df0 joined
[09:05] *** ssm left
[09:08] *** jonasbn joined
[09:12] *** mssm joined
[09:15] *** dakkar joined
[09:17] *** tuxdna joined
[09:18] *** fridim_ joined
[09:20] <frettled> Oh, boy, yes, good morning. 

[09:21] * frettled had an excellent walk to work through the snow drift.  -4-5°C and a slight breeze, took me 30 minutes instead of the usual 23-24.

[09:21] *** hicx174 left
[09:31] <payload> does    $obj ~~ *.notdef     and     $obj.notdef    not return under same conditions the same True or False?

[09:32] <payload> i've just read    $obj ~~ *.notdef   in the release notes

[09:38] *** agentzh left
[09:46] *** agentzh joined
[09:47] *** sjohnson sets mode: +o frettled

[09:50] *** yinyin left
[09:51] *** cognominal joined
[09:55] *** quester_ joined
[10:06] *** agentzh left
[10:09] <moritz_> they are identical

[10:09] <moritz_> but for example in a 'when' the matching is always done as smartmatching

[10:09] <moritz_> so you need some kind of syntactic sugar

[10:26] *** Chillance joined
[10:26] *** lestrrat is now known as lest_away

[10:37] *** riffraff joined
[10:44] *** Exodist left
[10:45] *** Exodist joined
[10:49] *** payload left
[11:04] *** masak joined
[11:05] <masak> g'day, #perl6.

[11:06] <mathw> hi masak

[11:06] *** frettled sets mode: +oo masak mathw

[11:06] <jnthn> oh hai, masak

[11:06] * masak slept like a baby

[11:07] <jnthn> :-)

[11:07] <jnthn> Sleep can be a Good Thing.

[11:07] <mathw> I like sleep

[11:07] <masak> me too. I do it regularly.

[11:07] <masak> practically every night.

[11:08] <frettled> :)

[11:08] <jnthn> I'm always a bit skeptical about sleep before I do it, but when I have to stop I never want to.

[11:08] <masak> yeah. know the feeling.

[11:09] <mathw> I woke up remarkably easily this morning

[11:09] <mathw> I even had time for breakfast before I left the house

[11:09] <mathw> And a few minutes to play with the cat before leaving him alone all day

[11:12] *** quester_ left
[11:14] <masak> I'd like to play a bit with building the whole Perl 6 application cheese, something that's possible now with a merged proto.

[11:15] <masak> ideally, we'd be able to collect data on which apps build under master, and which build under ng.

[11:15] * masak backlogs over *.notdef

[11:15] <masak> I must confess that the purpose of this method still eludes me.

[11:16] <masak> if I'm to do $obj ~~ *.notdef, why don't I just do $obj !~~ *.defined ?

[11:16] <masak> this is the only method in CORE which returns the boolean opposite of the real thing :)

[11:18] *** orafu left
[11:20] <jnthn> masak: Maybe for when or where 

[11:20] *** orafu joined
[11:20] <masak> ah, yes.

[11:20] <jnthn> when .notdef {...}

[11:20] <masak> to compensate for the lack of whenn't :)

[11:20] <jnthn> :-P

[11:21] <jnthn> There Will Be Modules.

[11:21] <masak> too true. :)

[11:21] *** macae joined
[11:34] *** lest_away is now known as lestrrat

[11:34] *** lichtkind joined
[11:36] <jnthn> OK, so I guess main dev is going on now in ng1?

[11:37] <masak> yes, I think so.

[11:38] * jnthn spectests.

[11:43] <jnthn> Hmm, phew, a lot of the OO stuffs hasn't broken.

[11:43] <jnthn> (since ng)

[11:44] <mathw> :)

[11:44] <mathw> good to hear

[11:44] *** payload joined
[11:48] *** orafu left
[11:48] *** drbean joined
[11:49] *** orafu joined
[11:54] <masak> diakopter: using NYTProf on STD.pm sounds like a thrilling prospect.

[12:00] *** xomas_ is now known as xomas

[12:12] <Tene> jnthn: pmichaud says ng1 becomes master in the next few days.

[12:21] *** Baggiokwok joined
[12:24] *** riffraff left
[12:28] *** payload left
[12:29] <jnthn> Tene: Aye, I noticed that.

[12:30] <jnthn> Tene: Thus why I'm trying to find some time to give it a bit of TLC. :-)

[12:30] *** payload joined
[12:32] *** SmokeMachine joined
[12:37] *** bluescreen joined
[12:38] <colomon> o/

[12:39] <moritz_> do hashes work in ng or ng1?

[12:39] <jnthn> moritz_: I fear not.

[12:40] <jnthn> That should...really...be fixed.

[12:41] <masak> yes.

[12:42] *** ignacio_ joined
[12:42] <masak> the more I think about it, the more I question whether a mass-build of everything will actually yield useful information at this point.

[12:42] <masak> maybe I'd do better focusing on one single application and seeing what problems ng1 runs into trying to compile it.

[12:42] <colomon> masak: I don't think it will.  This week.  Hopefully next week it will be really useful.

[12:42] <masak> right.

[12:43] <masak> so there's still sense in building the infrastructure for such a thing.

[12:45] <colomon> masak: I don't know that there's a point to building the infrastructure -- in ng/ng1.  But having the infrastructure more or less ready to go for the magic point when they are somewhat more useful would be really good.  (ie, having it working in pre-ng master seems like a good idea to me.)

[12:46] <masak> right.

[12:50] *** ignacio_ left
[12:54] *** orafu left
[12:54] *** orafu joined
[12:54] *** patspam left
[12:54] *** cognominal left
[12:59] *** tuxdna left
[13:00] *** payload left
[13:02] *** k23z__ joined
[13:05] *** ignacio_ joined
[13:06] <pmichaud> good morning, #perl6

[13:06] <colomon> \o

[13:06] <jnthn> morning, pmichaud 

[13:06] <masak> morn', pm

[13:06] <pmichaud> once arrays are working again hashes should be easy to restore

[13:07] <masak> \o/

[13:07] * pmichaud reads backscroll

[13:07] <pmichaud> and I hope to do arrays this morning

[13:07] <moritz_> \o/

[13:08] <pmichaud> 00:35 <TimToady> postcircumfix:<[ ]> is one of those methods with a loopback out in Any or Cool or some such that can promote an iterator to a sequence

[13:08] <pmichaud> ....so, what happens with something like   14.[5]   ?

[13:08] <colomon> yeah, I heard that, thought about it a bit, and then wrote postcircumfix:<[ ]> for Iterator.  :)

[13:09] <pmichaud> it should delegate to a Seq

[13:09] <colomon> It does, I think.

[13:09] <colomon> self.Seq[$a];

[13:09] <masak> the nice thing about rewrites is that things are so much easier to implement the fourth or fifth time. in a way, writing a big application comes down to learning to write that application by doing it over and over again, better each time.

[13:10] <colomon> masak: practice!

[13:11] <arnsholt> The essence of Plan to Throw One Away, one supposes =)

[13:11] <masak> any medium-to-large-scale app is best written by someone who has written dozens of them already. that's a bleak perspective, made less bleak if one counts internal rewrites and refactorings. :)

[13:13] <colomon> pmichaud: it's funny, I feel like I still don't quite understand why Seq exists, but I'm really starting to enjoy coding with it.  :)

[13:14] <masak> I'm not sure I grok Seq either.

[13:15] *** tuxdna joined
[13:16] <pmichaud> Seq exists primarily as the immutable form of an Array

[13:16] <colomon> oh, so it's like old List only cooler!

[13:16] <pmichaud> i.e., a list of elements that also "does Positional"

[13:16] <colomon> no wonder it's nice.

[13:16] <pmichaud> yes, it's analogous to old List

[13:17] <masak> aaah.

[13:17] <pmichaud> the problem with old List that started this whole iterator mess a long time ago is that I realized that we really didn't want   for 1..10000  to be storing the 10000 elements, but since  list(1..1000) was producing something that was like an Array, we got them no matter what.

[13:17] <pmichaud> i.e., the old List (and now Seq) had the side-effect of forcing the creation and storage of all of the lazy elements

[13:18] <pmichaud> even when what you wanted to do was just to iterate them

[13:21] <colomon> oh hey, my changes overnight fixed join.t, too.

[13:22] <pmichaud> yes, I suspect we'll see quite a bit of that... a small fix here or there re-enables lots of tests

[13:23] *** bluescreen left
[13:23] <colomon> I should have made more notes about what was stopping each test file I had to turn off.  But it's pretty easy to check them manually, thanks to your simple ## trick.

[13:24] <pmichaud> afk, kid to school

[13:24] <takadonet> morning all

[13:25] <colomon> o/

[13:29] *** plainhao joined
[13:35] <k23z__> http://www.telegraph.co.uk/news/newstopics/howaboutthat/5005118/Computer-programmer-from-Finland-has-lost-finger-replaced-with-USB-drive.html

[13:36] *** lichtkind_ joined
[13:38] *** lichtkind left
[13:38] *** lichtkind_ is now known as lichtkind

[13:38] *** bluescreen joined
[13:42] *** ignacio_ left
[13:53] <pugs_svn> r29636 | azawawi++ | [std_hilite] Upgrade to JQuery 1.4.1 

[13:53] *** macae left
[13:53] *** macae joined
[13:54] *** ignacio_ joined
[13:57] *** macae left
[13:58] *** drbean left
[13:58] *** Su-Shee left
[14:01] <lichtkind> cotto: still want nov account

[14:06] *** macae joined
[14:09] *** Baggiokwok left
[14:09] *** mdxi joined
[14:39] *** slavik joined
[14:39] *** slavik left
[14:42] *** Su-Shee joined
[14:44] *** jonasbn left
[14:47] *** dugg joined
[14:59] *** PacoLinux left
[15:00] *** wasy_afk is now known as wasy

[15:02] *** PacoLinux joined
[15:04] *** dr_df0 left
[15:06] *** dr_df0 joined
[15:09] * colomon hopes ng1 progress is bubbling away out of sight, while he trudges through $work and housework...

[15:09] <takadonet> hehe

[15:13] *** Guest24683 left
[15:16] *** pmurias joined
[15:28] <pmurias> hi

[15:28] <masak> o/

[15:31] <takadonet> hey pmurias

[15:33] * masak peruses PCRE source code

[15:33] <masak> fascinating.

[15:35] *** Patterner left
[15:36] *** Psyche^ joined
[15:36] *** Psyche^ is now known as Patterner

[15:43] *** nihiliad joined
[15:51] <masak> rakudo: "foo" ~~ / ^* /; say 'alive'

[15:51] <p6eval> rakudo 1d4928:  ( no output )

[15:51] <moritz_> it's an infinite looop

[15:51] <masak> aye.

[15:51] <moritz_> erm, I meant looooooo

[15:51] <masak> one that's statically catchable.

[15:52] <masak> (hm, is that 'staticly'? English is hard.)

[15:53] <masak> Google says 'statically'. :)

[15:53] <frettled> Statistically correct.

[15:54] <masak> I will eventually add a 'detect empty match in greedy quantifier' function to GGE, and then probably backport it to PGE.

[15:54] * colomon just found hardcopies of Damian Conway's articles on Perl 6 from circa 2003 while cleaning the office...

[15:54] <frettled> Quick, wrap them in acrylic and suck the air out!

[15:55] *** justatheory joined
[15:55] *** cjk101010 left
[15:55] <colomon> If someone wants them, I can save them from the recycle bin.  But I assume they're all on-line somewhere...

[15:58] *** justatheory left
[15:58] <ascent_> LOL: http://developers.facebook.com/news.php?blog=1&story=358

[16:00] *** cjk101010 joined
[16:00] *** xomas is now known as xomas_

[16:01] *** xomas_ is now known as xomas

[16:01] <masak> ascent_: slightly OT, don't you think? in a way, Perl 6 is *two* degrees removed from PHP. we make jokes about the Perl 5 people, who make jokes about the PHP people. :)

[16:01] <masak> for the record, some of my best friends use Perl 5.

[16:02] <pmichaud> for the record, I use PHP.

[16:02] <pmichaud> :-)

[16:02] <masak> hm. me too, occasionally.

[16:02] <masak> it's quite good for the Web.

[16:03] <masak> but it also deserves most of the mockery it gets from knowledgeable people.

[16:03] <PerlJam> Besides, hiphop is an implementation optimization and says nothing about the language.  (and we don't have many optimizations ourselves ;-)

[16:03] <szbalint> heh, facebook should have written a profiler instead of an automatic translator tool

[16:03] <masak> due to the principle of 'worse is better', the weaknesses of PHP as a language don't much matter.

[16:03] <masak> not in the short term, at least.

[16:04] <PerlJam> szbalint++ indeed.

[16:05] <masak> HipHop sounds a bit like what Andrew Shitov made for Perl 6: a compiler that outputs C++.

[16:05] <ascent_> I pasted this just for little fun... It's funny when companies like Facebook write something like this. Going deeper and deeper in something which is not suitable for them.

[16:05] <pmichaud> "not suitable"?  Odd.

[16:05] <masak> oh, it might well be suitable for them.

[16:06] <PerlJam> ascent_: yes, we were talking about this on #startups earlier.  Twitter's move from Ruby to Scala was another example.

[16:07] <ascent_> PerlJam: I didn't know about that chan, thanks. :)

[16:07] <pmichaud> afk, errands

[16:07] <masak> an experienced programmer can use even a crappy language to produce impressive software.

[16:07] <masak> the cost of maintenance is higher, sure. but it's possible.

[16:08] <PerlJam> masak: see pmwiki.org  :-)

[16:08] <ascent_> masak: experienced programmer choose proper tools for proper tasks.

[16:08] <masak> PerlJam: that was the example I had in mind. :)

[16:08] <pmichaud> ascent_: and how do you know that php is improper for this particular task?

[16:08] <PerlJam> ascent_: experienced programmer choose "proper" too

[16:08] <masak> ascent_: yes, and PHP, like it or not, is a good fit for the Web.

[16:08] <frettled> Experienced programmers may not have a choice in tools or tasks.

[16:09] <frettled> *mumblegrumble*

[16:09] <PerlJam> frettled: hopefully they have a way out of that situation though

[16:09] <pmichaud> (way out) -- often, what happens is they build their way out of not having a choice.  See also Perl 1.  :-)

[16:09] <PerlJam> heh

[16:09] <frettled> PerlJam: That depends on the job market where you live.  The US job market has not been very friendly lately, and in many other countries it feels safer to just stick around where you know you get paid.

[16:10] <pmichaud> okay, really afk this time

[16:10] <PerlJam> frettled: or ... you start a small company in your spare time and nuture it until it can support your needs.

[16:10] <PerlJam> frettled: then *you* choose

[16:10] <frettled> PerlJam: if you have spare time, of course :D

[16:10] <PerlJam> frettled: you make spare time.  It's another choice

[16:10] <frettled> and if you have no no-compete clauses in your contract

[16:11] <PerlJam> frettled: again, another choice.

[16:11] <colomon> heh.  my old employers forgot to make me sign the no-compete clause.  :)

[16:11] <frettled> That _some_ experienced programmers have these options does _not_ mean that _every_ experienced programmer, or even experienced programmers in general, have them.

[16:11] <Tene> Or you live in an area where no-compete clauses are legally unenforcable.

[16:12] <Tene> California, iirc.

[16:12] <Tene> and probably others.

[16:12] <frettled> Norway :)

[16:12] <PerlJam> frettled: no, every person has these choices.  Then it's just a question of timing.  You chose to sign a no-compete, so you chose to limit your options.  But you still have options.

[16:12] <frettled> Or, as we like to say, «Scandinavian Libertopia»

[16:13] <frettled> PerlJam: I'm sorry, that's just a hopeless position to take.  Yes, technically, _anyone_ can quit their job and do things on their then-appearing spare time.  But it's not a realistic choice, because it doesn't guarantee bread on the table, if you catch my drift.

[16:14] <frettled> PerlJam: Remember: the Dream is only achievable for a select low percentage of the Dreamers.

[16:14] <ascent_> masak,pmichaud: IMO PHP is maybe good for small projects, but not for big. That is my opinion and I don't want to argue - you have something better to do, so do I (althrough not so exciting). ;)

[16:14] <PerlJam> frettled: suddenly you sound religious (in a bad way)

[16:14] <frettled> PerlJam: I'm referring to the American Dream

[16:15] <frettled> Which _is_ religion to quite a few Americans.

[16:15] <masak> ascent_: I don't want to argue either. just pointing out that your opinion doesn't wish away PmWiki or MediaWiki, or other large projects which exist and actually use PHP.

[16:15] <frettled> PerlJam: and I don't believe in the Dream, but you sounded like you did.

[16:15] <frettled> PerlJam: I'm sorry for misunderstanding your intentions.

[16:15] <PerlJam> frettled: you choose to believe what you want.  Your beliefs limit your future choices.  :-)

[16:16] <frettled> PerlJam: Yes, but if everyone makes the same choice, only a few of them get to put bread on their table.

[16:16] <frettled> PerlJam: It's job market economics 101

[16:17] <frettled> PerlJam: What you suggest is possible for «everyone» if and only if there are enough jobs and finances available for these people.

[16:17] <frettled> What you're describing is a nice utopia, and one that I'd be happy to see as a reality, but it's not.  Sorry.

[16:19] <PerlJam> frettled: So ... I find it odd that we went from me suggesting that you start a small business in your spare time that could eventually (*eventually*) make enough that you would no longer be economically constrained to  ... utopia.

[16:20] <Tene> Compared to many situations, that's pretty close. ;)

[16:21] <pmurias>     * Wojtek Gołaszewski

[16:21] <pmurias>     * Daniel Majchrowski

[16:21] <pmurias>     * Jarek Nadziak

[16:21] <pmurias>     * Łukasz “Zed” Zawada

[16:21] <pmurias>     * Konrad Łęski

[16:21] <pmurias>     * Mariusz Nowak

[16:21] <pmurias>     * Krzysztof Kozak

[16:22] <pmurias>     * Łukasz “Żółwiao” Dźbik

[16:22] <pmurias>     * Michał Szwarc

[16:22] <PerlJam> frettled: people have choices.  I know the world isn't perfect, but it *is* what you make of it.  If you sacrifice certain "freedoms" to put bread on the table, that was your choice.  That doesn't mean it was the *only* choice.

[16:22] <pmurias>     * Krzysiek Parafińczuk

[16:22] <pmurias>     * Andrzej Borys †

[16:22] <pmurias>     * Piotr Kobylański

[16:22] <pmurias>     * Bartosz Bibrowicz

[16:22] <pmurias>     * Michał Dybowski

[16:22] *** pmurias was kicked by moritz_ (pastespam))
[16:22] <masak> moritz_++

[16:22] *** pmurias joined
[16:22] <pmurias> moritz_: sorry

[16:22] *** cognominal joined
[16:22] <moritz_> pmurias: no problem

[16:25] <frettled> PerlJam: No, the utopia is that _everyone_ can do this.  Everyone can attempt to do so, but if everyone does, then most of them will fail.

[16:26] <frettled> PerlJam: It's exactly like the Dream: everyone can try to become the President of the United States of America, and everyone has a chance, but not everyone can be; 99.9999996% will fail.

[16:28] <PerlJam> frettled: that decimal is suspicious.  Did you do a quick calculation based on an estimate of the US population?  :)

[16:28] <frettled> PerlJam: 300 million people, yes

[16:29] <PerlJam> heh, you're such a geek  :)

[16:29] <frettled> Thank you :)

[16:29] <PerlJam> though your math is faulty I think.  How many US presidents are there?

[16:29] <frettled> One at any given time.

[16:30] <PerlJam> no, there's only one in office at any given time, but there are several not in office

[16:30] <frettled> The example is flawed in another respect: if you've been elected President twice, you cannot stand for election again, so it's impossible to achieve it again.

[16:31] <frettled> PerlJam: I wrote «become», not «be», and «become» could -- if you chose to interpret benevolently instead of mischievously -- mean «be elected»

[16:31] <frettled> You're a geek to :)

[16:31] <frettled> Anyhow, I think I've spammed way too much about this, I'll shut up now.

[16:32] <PerlJam> frettled: but several presidents have been elected!  :)

[16:32] <masak> frettled: unless you're Roosevelt. http://use.perl.org/~masak/journal/39847

[16:32] <PerlJam> frettled: #perl inspires pedantry for some reason.

[16:34] <colomon> reading about the Hiphop PHP thing makes me think of the Perl 6 to C++ compiler...

[16:35] <masak> that's what I said! :)

[16:35] <masak> <masak> HipHop sounds a bit like what Andrew Shitov made for Perl 6: a compiler that outputs C++.

[16:35] *** jaldhar left
[16:36] <masak> I increasingly feel like a Perl 6 historian... reading http://dev.perl.org/perl6/doc/design/exe/E02.html , at the bottom I find this:

[16:36] <masak> '98% backwards compatibility even without an automatic p52p6 translator...pretty slick!'

[16:37] <masak> and then '[Update: Well, it's not quite that backward compatible anymore.]'

[16:37] <colomon> That might have been one of the papers (in 2003 form) I just stuck in the recycle bin.

[16:37] <masak> so basically, Perl 6 tried to be backwards compatible from the start, and that goal was dropped along the way.

[16:38] <masak> one hears very little about a p52p6 translator nowadays, too.

[16:38] <PerlJam> masak: keep that in mind for the future when Perl 6 is in common use.  We could use a good history book  :)

[16:38] <masak> I think this would make a good blog post.

[16:38] <masak> that might help me keep it in mind. :)

[16:38] *** jaldhar joined
[16:39] *** hercynium joined
[16:40] *** iblechbot left
[16:40] <colomon> looking at E02 there... woah, print statements in perl 6.  :)

[16:41] <masak> we still have those, you know. :)

[16:41] <jnthn> say what?

[16:41] <jnthn> :-)

[16:41] <masak> say .WHAT

[16:41] *** dr_df0 left
[16:41] <colomon> I know print still works, but I can't remember the last time I actually used it.... :)

[16:41] <masak> it happens. :)

[16:43] *** dr_df0 joined
[16:45] <colomon> I feel like someone should rewrite the example in modern Perl 6....

[16:45] <jnthn> std: sub foo($a, $a) { }

[16:45] <p6eval> std 29636: OUTPUT«Potential difficulties:␤  Useless redeclaration of variable $a (from line 1) at /tmp/FiqIa9t4fO line 1:␤------> [32msub foo($a, [33m⏏[31m$a) { }[0m␤ok 00:01 108m␤»

[16:45] *** jaldhar left
[16:45] <masak> one thing I'll use macros for is to re-create Arc's print-to-string functionality.

[16:46] <masak> that'll create an excellent use for print :)

[16:46] <PerlJam> E05 needs to be redone in moderm Perl 6

[16:46] <masak> anyone who re-writes an apocalypse or exigesis to modern Perl 6 wins an Internet.

[16:47] <diakopter> masak: the new NYTprof, I mean... TimToady used prior versions on it (parsing itself).. and I did also twice, but results were not satisfying because of bugs in nytprof

[16:47] <jnthn> masak: I'd be interested, but I already won one for doing lolsql.

[16:47] <masak> diakopter: ah, I see.

[16:47] <jnthn> masak: What'd I do with two internets?!

[16:48] <masak> jnthn: yeah, not sure you can win more than one :)

[16:48] <PerlJam> Though we need an implementation that can do this:   my $text is from($*ARGS);       # Bind scalar to input stream

[16:48] *** jaldhar joined
[16:50] <colomon> PerlJam:  my $text is $*ARGS.map({.slurp}).join

[16:50] <PerlJam> colomon: uh ... no.

[16:51] <PerlJam> std: my $text is $*ARGS.map({.slurp}).join

[16:51] <p6eval> std 29636: OUTPUT«[31m===[0mSORRY![31m===[0m␤Confused at /tmp/brvV2kLDKw line 1:␤------> [32mmy $text is [33m⏏[31m$*ARGS.map({.slurp}).join[0m␤    expecting name␤FAILED 00:01 107m␤»

[16:51] <jnthn> You'd need to write a trait_mod to make that happen.

[16:51] <PerlJam> "Confused" is a really good error :)

[16:51] <colomon> sorry, my $text = $*ARGS.map({.slurp}).join

[16:52] <PerlJam> colomon: sure ... I was more interested in the "bind" part though.

[16:52] <PerlJam> (sure, I didn't say that; mea culpa)

[16:52] <colomon> What do you thinking such binding would do for you?

[16:52] <colomon> (In this case.)

[16:53] <PerlJam> magic!  :)

[16:53] <PerlJam> colomon: modifying $text would automatically modify the appropriate file in $*ARGS  (for instance)

[16:54] <PerlJam> colomon: or, as in E05, ... "The important point is that, after the match, only those characters that the pattern actually matched will have been removed from the input stream."

[16:54] <colomon> PerlJam: okay, that's a sort of magic I definitely wasn't imagining, and don't have a clue how to do with map, slurp, and join.  :)

[16:55] *** jaldhar left
[16:55] <PerlJam> though that particular thing may just fall out of laziness

[16:55] *** diakopter left
[16:57] *** ruoso joined
[16:58] <colomon> I was thinking that the internal use of Cat would magically make my example lazy.  Don't know if that's true or not, of course....

[16:58] *** jaldhar joined
[16:59] *** colomon2 left
[17:02] * jnthn crosses his fingers and runs the spectests, hoping he's knocked one task off the ng major features list

[17:02] <colomon> hashes?

[17:02] <jnthn> No

[17:02] <jnthn> the one that broke

[17:02] <jnthn> ng: my ($a, $b)

[17:02] *** cdarroch joined
[17:02] *** cdarroch left
[17:02] *** cdarroch joined
[17:02] <p6eval> ng 58d896: OUTPUT«Redeclaration of symbol $a at line 1, near ""␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (src/stage0/HLL-s0.pir:328)␤»

[17:02] <colomon> \o/

[17:03] <jnthn> colomon: Dunno if that'll win us back any tests?

[17:03] <colomon> jnthn: give me a working version of that and some time and it will, for sure.

[17:03] <jnthn> we're down to S32 and the tests are looking OK....

[17:04] <jnthn> yay, clean.

[17:04] <takadonet> !!

[17:05] <jnthn> colomon: pushed

[17:12] *** snearch_ joined
[17:12] *** dr_df0 left
[17:13] *** justatheory joined
[17:17] <colomon> pulled, and

[17:17] <colomon> > my ($a, $b) = (1, 2); say $a; say $b;

[17:17] <colomon> Mu()

[17:17] <colomon> On the plus side, stupid error is gone.  

[17:18] <colomon> On the minus side, assignment still doesn't work.

[17:18] <masak> you don't need those LHS parens.

[17:19] <masak> sorry, RHS. :/

[17:19] <colomon> doesn't help.  (But you're right, of course.)

[17:19] <masak> if there's anything that might help me distinguish left and right on a visceral level, it's the difference in meaning between 'lvalue' and 'rvalue'... :)

[17:20] <masak> swimming &

[17:20] *** masak left
[17:20] *** cognominal left
[17:20] *** meppl left
[17:20] *** constant left
[17:20] *** buu left
[17:20] *** Tene left
[17:20] *** szbalint left
[17:20] *** _ilbot2 left
[17:20] *** nbrown left
[17:20] *** stepnem left
[17:20] *** sunnavy left
[17:20] *** jql left
[17:20] *** krakan left
[17:20] *** elmex left
[17:20] *** moritz_ left
[17:20] *** cosimo left
[17:21] <jnthn> colomon: Ah, I didn't try to fix that. :-)

[17:21] <colomon> :)

[17:21] *** elmex joined
[17:21] <colomon> > my ($a, $b); ($a, $b) = 1, 2; say $a; say $b;

[17:21] <colomon> Mu()

[17:21] <jnthn> colomon: Oh, I think it's not related to the declaration though?

[17:21] <jnthn> Yes, I just did that one. :-)

[17:22] <colomon> :)

[17:22] *** cognominal joined
[17:22] *** meppl joined
[17:22] *** szbalint joined
[17:22] *** krakan joined
[17:22] *** constant joined
[17:22] *** jql joined
[17:22] *** nbrown joined
[17:22] *** buu joined
[17:22] *** sunnavy joined
[17:22] *** moritz_ joined
[17:22] *** BAAABJN joined
[17:22] *** Tene joined
[17:22] *** stepnem joined
[17:22] *** _ilbot2 joined
[17:22] *** kornbluth.freenode.net sets mode: +ooov sunnavy moritz_ Tene _ilbot2

[17:22] *** cosimo joined
[17:22] *** stepnem left
[17:22] <colomon> seems like my $a; my $b; and then the rest of that last example worked in ng1 a couple of days ago...

[17:22] *** payload joined
[17:22] *** payload left
[17:22] *** TimToady sets mode: +vvv buubot dalek hugme

[17:22] *** TimToady sets mode: +vv ilogger2 IRSeekBot

[17:22] *** TimToady sets mode: +vvv lisppaste3 p6eval phenny

[17:22] *** TimToady sets mode: +v pugs_svn

[17:24] *** cognominal left
[17:24] *** stepnem joined
[17:24] *** cognominal joined
[17:25] *** payload1 joined
[17:27] *** payload1 left
[17:30] *** araujo left
[17:33] *** stephenlb joined
[17:34] <jnthn> Yay, 2 more test files uncommented in spectest.data now. :-)

[17:35] <takadonet> good job jnthn

[17:35] *** barney left
[17:38] *** pmurias left
[17:39] *** buu left
[17:39] *** buu joined
[17:42] *** cognominal left
[17:42] *** cognominal joined
[17:43] <jnthn> Another one fully passing and bringing ~50 tests back coming in a moment too, after I check it didn't make any other fail. :-)

[17:44] <takadonet> !!!!

[17:44] * takadonet feels like a cheerleader.....

[17:44] *** mberends left
[17:47] <jnthn> Pushed.

[17:48] <colomon> pulled.

[17:48] *** xalbo joined
[17:50] <jnthn> colomon: note: push before last needs re-Configure.

[17:50] <colomon> thanks.  I try to keep an eye open for changes to Makefile.in.  :)

[17:57] *** quietfanatic joined
[17:59] *** payload joined
[18:02] <quietfanatic> rakudo: my $x = (0 => {say 2}); say 1; $x.value.(); say 3

[18:02] <p6eval> rakudo 1d4928: OUTPUT«1␤3␤»

[18:03] *** jaldhar left
[18:03] <quietfanatic> ng: my $x = (0 => {say 2}); say 1; $x.value.(); say 3

[18:03] <p6eval> ng 58d896: OUTPUT«Confused at line 1, near "my $x = (0"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (src/stage0/HLL-s0.pir:328)␤»

[18:03] <quietfanatic> ng: my $x = 0 => {say 2}; say 1; $x.value.(); say 3

[18:03] <p6eval> ng 58d896: OUTPUT«Confused at line 1, near "my $x = 0 "␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (src/stage0/HLL-s0.pir:328)␤»

[18:04] <quietfanatic> But that's not the point.  The point is that rakudo master cannot call a sub in a pair.

[18:05] <quietfanatic> rakudo: my $x = (0 => sub doit {say "did it"}); say $x.value.WHAT; $x.value.(); say $x.value.name

[18:05] <p6eval> rakudo 1d4928: OUTPUT«Sub()␤doit␤»

[18:05] *** ShaneC joined
[18:06] *** mberends joined
[18:07] *** Su-Shee left
[18:10] <jnthn> quietfanatic: $x.foo.() is the same as $x.foo()

[18:10] <quietfanatic> No..

[18:10] <quietfanatic> The former calls the sub returned by $x.foo

[18:10] <quietfanatic> and the latter just calls the method foo on $x with no arguments

[18:11] <quietfanatic> At least, that's how I learned it

[18:11] <quietfanatic> rakudo: my $x = (0 => sub doit {say "did it"}); my &x = $x.value; &x();

[18:11] <p6eval> rakudo 1d4928: OUTPUT«did it␤»

[18:11] <quietfanatic> Guess that's a workaround

[18:11] <quietfanatic> but

[18:11] <quietfanatic> why?

[18:12] <quietfanatic> oh

[18:12] <quietfanatic> jnthn I though you were asking a question but you wer giving a statement. :|

[18:12] <quietfanatic> *were

[18:14] *** macae left
[18:15] *** Su-Shee joined
[18:16] *** cjk101010 left
[18:16] <quietfanatic> In fact I think I ran into exactly the same problem the last time I wrote this bit of code, and forgot.

[18:17] <jnthn> rakudo: my $x = (0 => {say 2}); say 1; $x.value.().(); say 3

[18:17] <p6eval> rakudo 1d4928: OUTPUT«1␤2␤3␤»

[18:22] <bbkr> what is the difference between rakudo and ng evals here?

[18:23] *** cognominal left
[18:23] <quietfanatic> ng is the branch they're working on the most, but it's not quite complete, so it hasn't been merged into main rakudo yet.

[18:23] *** cognominal joined
[18:23] <quietfanatic> so it's sort of like normal vs. experimental, except that everything here is experimental.

[18:23] *** macae joined
[18:26] *** dakkar left
[18:27] <colomon> rakudo: sub test($a) { say "Mu" unless $a; }; test(Mu);

[18:27] <p6eval> rakudo 1d4928: OUTPUT«Nominal type check failed for parameter '$a'; expected Any but got Object instead␤in Main (file src/gen_setting.pm, line 324)␤»

[18:27] <colomon> ummm....

[18:27] <TimToady> that's correct

[18:28] <TimToady> parameters are by default constrained to Any

[18:28] <TimToady> (so that junctions work out naturally)

[18:28] <TimToady> rakudo: sub test(Mu $a) { say "Mu" unless $a; }; test(Mu);

[18:29] <p6eval> rakudo 1d4928: OUTPUT«Mu␤»

[18:31] <quietfanatic> How do you produce a value that's undefined but isn't restricted like that?

[18:31] <colomon> Any

[18:31] <colomon> I imagine.

[18:31] <colomon> rakudo: sub test($a) { say "Mu" unless $a; }; test(Any);

[18:31] <p6eval> rakudo 1d4928: OUTPUT«Mu␤»

[18:31] <quietfanatic> rakudo: sub test(Int $a) { say "Mu" unless $a; }; test(Any);

[18:32] <p6eval> rakudo 1d4928: OUTPUT«Nominal type check failed for parameter '$a'; expected Int but got Any instead␤in Main (file src/gen_setting.pm, line 324)␤»

[18:32] <ruoso>  rakudo: sub test($a) { say "Mu" unless $a; }; test(Any | 1);

[18:32] <p6eval> rakudo 1d4928: OUTPUT«Mu␤»

[18:32] <ruoso> rakudo: sub test($a) { say "Mu" unless $a; }; test(Any | 1);

[18:32] <p6eval> rakudo 1d4928: OUTPUT«Mu␤»

[18:32] <ruoso> hm?

[18:32] <ruoso> rakudo: sub test($a) { say  $a; }; test(Any | 1);

[18:32] <p6eval> rakudo 1d4928: OUTPUT«Any()␤1␤»

[18:32] <xalbo> rakudo: sub test(Any $a) {say "Mu" unless $a; } test(Mu);

[18:32] <p6eval> rakudo 1d4928: OUTPUT«Confused at line 10, near "test(Mu);"␤in Main (file <unknown>, line <unknown>)␤»

[18:32] <ruoso> rakudo: sub test($a) { say "Mu" if $a; }; test(Any | 1);

[18:33] <p6eval> rakudo 1d4928: OUTPUT«Mu␤»

[18:33] <ruoso> interesting... 

[18:33] <ruoso> rakudo: say "is it?" unless 0 | 1

[18:33] <p6eval> rakudo 1d4928:  ( no output )

[18:33] <ruoso> rakudo: say "is it?" unless Any | 1

[18:33] <p6eval> rakudo 1d4928:  ( no output )

[18:33] <ruoso> rakudo: sub test($a) { say "Mu" if $a; }; test(Any | 1);

[18:33] <p6eval> rakudo 1d4928: OUTPUT«Mu␤»

[18:33] <PerlJam> quietfanatic: Mu is undefines and unrestricted.

[18:33] <ruoso> rakudo: sub test($a) { say "Mu" unless $a; }; test(Any | 1);

[18:33] <p6eval> rakudo 1d4928: OUTPUT«Mu␤»

[18:33] <PerlJam> s/nes/ned/

[18:33] <ruoso> looks like a rakudobug

[18:34] <quietfanatic> no, it's autothreading

[18:34] <ruoso> ahhhhhhhhh

[18:34] <quietfanatic> the Any makes it say Mu and the 1 makes it do nothing

[18:34] <ruoso> rakudo: sub test(Any $a) { say "Mu" unless $a; }; test(Any | 1);

[18:34] <p6eval> rakudo 1d4928: OUTPUT«Mu␤»

[18:34] <ruoso> rakudo: sub test(Mu $a) { say "Mu" unless $a; }; test(Any | 1);

[18:34] <p6eval> rakudo 1d4928:  ( no output )

[18:34] <ruoso> ah... ok

[18:35] <ruoso> now it makes sense

[18:36] <quietfanatic> PerlJam: That's not quite what I meant.  I meant, can you always pass an undefined value to a routine without knowing what the type of the routine's parameters are?

[18:37] <quietfanatic> PerlJam: I mean, is there an undefined value that can pretend to be any class?

[18:37] <PerlJam> quietfanatic: yes, Mu

[18:37] <quietfanatic> No, see colomon's first sub up there.

[18:37] <quietfanatic> it's rejecting Mu because it's not Any.

[18:37] <colomon> right, the answer is Any.

[18:38] <quietfanatic> But then if your restriction is Int or something, Any will be rejected.

[18:38] <colomon> rakudo: sub test($a) { say "Mu" unless $a; }; test(Any);

[18:38] <p6eval> rakudo 1d4928: OUTPUT«Mu␤»

[18:38] <colomon> oh, that's what you meant?

[18:38] <quietfanatic> rakudo: sub test(Int $a) { say "Mu" unless $a; }; test(Any);

[18:38] <p6eval> rakudo 1d4928: OUTPUT«Nominal type check failed for parameter '$a'; expected Int but got Any instead␤in Main (file src/gen_setting.pm, line 324)␤»

[18:38] <quietfanatic> That's what I meant

[18:38] <colomon> Is there a way of doing that?  It seems like it would be intentionally breaking the class system.

[18:38] <PerlJam> The rakudo implementation is not authoritative  :)

[18:42] *** ruoso left
[18:45] <PerlJam> Any doesn't include junctions last time I checked, so Mu is the answer

[18:46] <TimToady> binding Nil should produce an appropriate most-undefined type object

[18:46] <TimToady> or perhaps even trigger a default

[18:47] <colomon> PerlJam: Huh?  I thought we just determined that Mu couldn't even be Any, much less something like Int.

[18:48] <TimToady> but in general, the point I was making to quietfanatic privately was that you shouldn't be designing your interfaces where undefinedness has some kind of positive semantics

[18:48] <TimToady> especially if Whatever or Nil can suffice

[18:49] <quietfanatic> Nil is exactly what I was thinking of, but what TT says is also true

[18:49] <TimToady> Template Toolkit?

[18:50] <TimToady> TrueType?

[18:56] *** hercynium left
[18:56] *** payload left
[18:57] *** payload joined
[18:58] *** stephenlb left
[18:59] *** mberends left
[19:00] <PerlJam> colomon: you determined that *rakudo*  thinks Mu can't be Any and I'm not believing rakudo.

[19:01] *** plainhao left
[19:01] <PerlJam> if Mu really can't be Any, then I need to re-think what "most undefined" really means.

[19:01] <colomon> PerlJam: You'll notice that TimToady said Rakudo was correct in that immediately afterward.

[19:01] <PerlJam> colomon: Actually I didn't notice.

[19:02] <PerlJam> But I still think it's odd.

[19:02] <colomon> obviously I expected it to work, else I wouldn't have tried it.

[19:02] <colomon> but it makes sense in terms of the definitions...

[19:04] * jnthn -> dinner

[19:05] *** xalbo left
[19:05] <PerlJam> I'll be content to let the language designer(s) work out all of the details so that the house of cards is strong and then I'll grouse about how the cards look more like dominoes or how the spades and clubs look too much alike or something  until either my brain adjusts or something else makes it all right.

[19:07] *** justatheory left
[19:08] *** justatheory joined
[19:08] *** ruoso joined
[19:17] *** macae left
[19:18] <TimToady> well, the point is that Foo ~~ Bar never works if Bar if further down the type hierarchy, and Mu is the only type that is higher than Any

[19:19] <TimToady> though junctions are siblings to Any

[19:19] <TimToady> in a sense, Any is the first well-defined type

[19:19] <TimToady> Mu is the absence of type

[19:19] <TimToady> and junctions have multiple types at once

[19:20] *** snearch_ left
[19:21] *** quietfanatic left
[19:22] <pmichaud> back from errands and lunch

[19:23] *** synth left
[19:23] <colomon> \o/

[19:24] *** jonasbn joined
[19:24] *** synth joined
[19:26] <pmichaud> :-| busy week of lots of non-Perl 6 stuff :-|

[19:26] *** stephenlb joined
[19:29] *** ruoso left
[19:31] *** macae joined
[19:32] *** payload left
[19:32] *** payload joined
[19:34] <pmichaud> I'm fairly certain that list assignment is not working in ng1

[19:34] <pmichaud> I had it working in ng, but then we completely changed the meaning of "List"

[19:35] <colomon> pmichaud: at least in the ($a, $b) = whatever form, it certainly isn't.

[19:35] <colomon> on the plus side, jnthn++ fixed my ($a, $b); 

[19:35] <pmichaud> yes, I saw that.  jnthn++

[19:36] <pmichaud> I have an $otherjob task to do and then I'll see if I can quickly bring the ng-list-assignment stuff over to ng1

[19:38] <colomon> \o/

[19:44] *** ruoso joined
[19:54] *** araujo joined
[19:56] *** ash_ joined
[20:00] <TimToady> phone

[20:03] <pmichaud> phone :)

[20:14] <jonasbn> phone?

[20:27] <PerlJam> phone.

[20:28] *** mberends joined
[20:29] <colomon> no phone.

[20:29] * TimToady is phony

[20:30] <PerlJam> TimToady: do you guys really get much done via phone that you wouldn't get done via IRC?  Does the change in medium help?

[20:31] *** justatheory left
[20:34] <pmichaud> PerlJam: Yes.

[20:35] <pmichaud> afk, kid pickup

[20:38] *** macae left
[20:43] *** justatheory joined
[20:50] *** fridim_ left
[20:52] *** fridim_ joined
[20:56] *** old_gray_bear joined
[21:17] *** xalbo joined
[21:20] *** justatheory left
[21:22] *** bluescreen left
[21:30] *** justatheory joined
[21:34] *** ruoso left
[21:34] *** rgrau joined
[21:38] *** Su-Shee left
[21:44] *** mikehh joined
[21:44] *** dugg left
[21:44] *** alester left
[21:46] *** pnate left
[21:48] *** [particle]1 left
[21:50] *** ignacio_ left
[21:52] *** pnate joined
[21:56] *** diakopter joined
[21:57] <diakopter> std: *.*()

[21:57] <p6eval> std 29636: OUTPUT«ok 00:01 105m␤»

[21:58] <arnsholt> diakopter: Bonus points if you know what it means too =)

[21:58] <diakopter> std: *&*|*&*|*&*|*&*

[21:58] <p6eval> std 29636: OUTPUT«ok 00:01 105m␤»

[21:58] <diakopter> arnsholt: I don't do semantics

[21:58] *** SmokeMachine left
[21:58] <arnsholt> Heh

[22:00] <diakopter> std: -----------                                                                                    7

[22:00] <p6eval> std 29636: OUTPUT«ok 00:01 106m␤»

[22:03] <diakopter> std: @{@{}

[22:03] <p6eval> std 29636: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of @{@{}; in Perl 6 please use @(@{) at /tmp/9GMMN529SU line 1:␤------> [32m@{@{}[33m⏏[31m<EOL>[0m␤FAILED 00:01 106m␤»

[22:03] <diakopter> std: @(@{)

[22:03] <p6eval> std 29636: OUTPUT«[31m===[0mSORRY![31m===[0m␤Anonymous variable requires declarator at /tmp/g6ZVtuN3F3 line 1:␤------> [32m@(@[33m⏏[31m{)[0m␤    expecting twigil␤FAILED 00:01 106m␤»

[22:05] <arnsholt> diakopter: You're ebbil

[22:05] *** jonasbn left
[22:05] <diakopter> at least I'm not bible or bbile

[22:17] *** cotto_work joined
[22:18] *** hercynium joined
[22:19] *** cotto_w0rk left
[22:24] *** kensanata joined
[22:26] *** xomas left
[22:26] *** xomas_ joined
[22:26] *** xomas_ left
[22:26] *** xomas_ joined
[22:27] *** jferrero joined
[22:28] <spinclad> rakudo: my $x = (0 => {say 2}); say 1; ($x.value).(); say 3

[22:28] <p6eval> rakudo 1d4928: OUTPUT«1␤2␤3␤»

[22:28] <spinclad> rakudo: my $x = (0 => {say 2}); say 1; $x.value().(); say 3

[22:28] <p6eval> rakudo 1d4928: OUTPUT«1␤2␤3␤»

[22:28] *** cotto_work left
[22:29] <spinclad> these make sense

[22:29] <spinclad> rakudo: my $x = (0 => {say 2}); say 1; $x.value,().(); say 3

[22:29] <p6eval> rakudo 1d4928: OUTPUT«1␤invoke() not implemented in class 'Undef'␤in Main (file <unknown>, line <unknown>)␤»

[22:30] <spinclad> rakudo: my $x = (0 => {say 2}); say 1; $x.value.().(); say 3

[22:30] <p6eval> rakudo 1d4928: OUTPUT«1␤2␤3␤»

[22:31] <spinclad> and it makes sense to me that postfix:<( )> is recognized the same with or without the dot.

[22:33] <spinclad> so .value.() == .value() and you need a second .() to call the returned sub.

[22:36] *** wasy is now known as wasy_afk

[22:42] *** xomas_ is now known as xomas

[22:44] *** hicx174 joined
[22:50] *** cotto_work joined
[23:03] *** kst` is now known as kst

[23:13] *** pmurias joined
[23:20] *** ash_ left
[23:21] *** payload left
[23:27] *** cotto_w0rk joined
[23:28] *** LylePerl left
[23:29] *** cotto_work left
[23:32] *** LylePerl joined
[23:36] *** kensanata left
[23:38] *** dugg joined
[23:52] *** old_gray_bear left
