[00:01] <lue> .oO(If I had a website, I could set up the doc repo part of my project as well)

[00:02] <flussence> /facepalm, thanks sorear

[00:05] <lue> rakudo: say "hello"[0]

[00:05] <p6eval> rakudo 015d77: OUTPUT¬´hello‚ê§¬ª

[00:07] <masak> lue: Perl 6 conflates items and lists of one element.

[00:20] <lue> rakudo: say "hello".substr(0)

[00:20] <p6eval> rakudo 015d77: OUTPUT¬´hello‚ê§¬ª

[00:20] <lue> rakudo: say "hello".substr(0,1)

[00:20] <p6eval> rakudo 015d77: OUTPUT¬´h‚ê§¬ª

[00:20] <lue> I don't know why, but having to do it that way seems... weird.

[00:47] *** ilogger2_ joined
[00:55] <perigrin> /w 9

[00:55] <perigrin> hmm

[01:02] <dalek> yapsi: dd03f58 | masak++ | / (2 files):

[01:02] <dalek> yapsi: [Yapsi] implemented non-immediate blocks

[01:02] <dalek> yapsi: 

[01:02] <dalek> yapsi: Needed to mark the immediate blocks in an action methods. Immediate blocks

[01:02] <dalek> yapsi: are currently all blocks that are directly under an <expression> that's

[01:02] <dalek> yapsi: directly under a <statement>.

[01:02] <dalek> yapsi: review: https://github.com/masak/yapsi/commit/dd03f5893c29ac35b784ff7c6a76a301ba1f746d

[01:08] <lue> afk

[01:10] *** Limbic_Region joined
[01:22] <dalek> 6model: a781e09 | jonathan++ | dotnet/compiler/bootstrap/DNST.pm:

[01:22] <dalek> 6model: [dotnet] Add a version of DNST.pm with PIR hacks removed to a bootstrap folder. The .Net bootstrapping effort - though there's much, much work to go - starts here.

[01:22] <dalek> 6model: review: https://github.com/jnthn/6model/commit/a781e0930dffd6d00dd023748df9e062cc7c5183

[01:23] <masak> rakudo: my ($a, *) = 42

[01:23] <p6eval> rakudo 015d77: OUTPUT¬´===SORRY!===‚ê§Malformed parameter at line 22, near "*) = 42"‚ê§¬ª

[01:23] <masak> jnthn: didn't you say earlier that this was supposed to work?

[01:23] <jnthn> rakudo: my ($a, $) = 42

[01:23] <p6eval> rakudo 015d77:  ( no output )

[01:23] <jnthn> masak: It parses a signature there

[01:23] <jnthn> Not a list.

[01:23] <masak> jnthn: yes, but remember the bug report I submitted?

[01:23] <masak> jnthn: where I tried to assign to a variable containing *

[01:23] <jnthn> Yes but what I mentioned was

[01:23] <jnthn> ($a, *) = 42;

[01:24] <jnthn> Without the decl.

[01:24] <masak> huh.

[01:24] <patrickas> std: my ($a, *) = 42

[01:24] <jnthn> (yes, the difference has bothered me too now and then)

[01:24] <p6eval> std a194beb: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Malformed parameter at /tmp/xv8aE6vl9i line 1:‚ê§------> [32mmy ($a, [33m‚èè[31m*) = 42[0m‚ê§    expecting any of:‚ê§    name‚ê§   parameter‚ê§      signature‚ê§Parse failed‚ê§FAILED 00:01 120m‚ê§¬ª

[01:24] <patrickas> std: my $a; ($a, *) = 42

[01:24] <p6eval> std a194beb: OUTPUT¬´ok 00:01 123m‚ê§¬ª

[01:24] <masak> that's a really crappy difference.

[01:25] *** lidden joined
[01:25] <Limbic_Region> jnthn - regarding the int vs Int array thread - simple assignment vs binding seems more clear cut but what about @array.push(1);

[01:25] *** ch3ck3r joined
[01:25] <jnthn> Limbic_Region: I think that's implemented in terms of assignment.

[01:25] <jnthn> Limbic_Region: Either way, it builds on top of assignment and/or binding.

[01:25] <Limbic_Region> and does that mean you think it should break

[01:26] <jnthn> Limbic_Region: Not, it needs to work. The @a[0] = 42 case needs to work really too.

[01:26] <Limbic_Region> I think so too

[01:26] <jnthn> Limbic_Region: There was a good discussion here on the channel earlier

[01:26] <jnthn> And we worked out some way forward.

[01:26] <Limbic_Region> okies

[01:27] <jnthn> I didn't seriously expect we'd outlaw assignment to compact arrays in the end, I was trolling for people to provide an appropriate semantics for it. :)

[01:28] <jnthn> (It'd just be too nasty from a user point of view otherwise.)

[01:28] <Limbic_Region> Well, I didn't either but as a problem of semantics - consistency is one of the things that I think perl 5 got wrong

[01:28] <Limbic_Region> or rather, too much DWYMism has caused a lot of things in perl 5 to make me want a more consistent language

[01:29] <jnthn> Limbic_Region: The conclusion boils down to, we generate a container referencing the compact array storage slot if needed, and we can - with enough type information - optimize that away.

[01:30] <jnthn> That is, we generate it on-demand and throw it away once the assignment is done.

[01:30] <jnthn> But I suspect people working with natively typed arrays will, probably, be consistent in their usage of type information.

[01:31] <jnthn> And give the compiler enough to go on to make efficient code for them.

[01:31] <jnthn> But we have a fallback if not and still get the compact memory usage.

[01:33] <Limbic_Region> well, that's a good thing

[01:33] <Limbic_Region> having recently implemented left leaning red-black trees in pure perl, I realized just how bloated perl 5 data structures can be

[01:39] <masak> I should write a software agent that notifies me on the odd occasion that p6l discussions stop being about things like bikeshedding syntax over Set and Bag.

[01:54] <dalek> yapsi: 706d5f6 | masak++ | / (3 files):

[01:54] <dalek> yapsi: [Yapsi] implemented closure invocation syntax

[01:54] <dalek> yapsi: 

[01:54] <dalek> yapsi: You can now do $x(), as well as { say 42 }().

[01:54] <dalek> yapsi: review: https://github.com/masak/yapsi/commit/706d5f6109e419aedae3e48f4cb9c5868a0efc92

[01:54] *** sidek joined
[02:05] *** yuki joined
[02:09] *** yuki left
[02:10] *** Limbic_Region left
[02:18] *** lidden left
[02:22] *** ch3ck3r left
[02:25] *** ch3ck joined
[02:25] <masonkramer> bah, the Bag stuff has really exploded

[02:25] <masonkramer> for the record I never suggested any of this crazy stuff

[02:26] <masonkramer> @ masak 

[02:26] <colomon> it's okay, we'll ignore the crazy.

[02:26] <masonkramer> that's what I'm doing

[02:26] <jnthn> sleep &

[02:27] <colomon> \o

[02:28] <masonkramer> \o

[02:28] <Grimnir_> hey!

[02:29] <masak> masonkramer: I need to remind myself sometimes that reading crap on p6l can make me angry or sad.

[02:29] <Grimnir_> my $today = DRUNK;

[02:30] * Grimnir_ is drunk

[02:31] <masak> 'night, #perl6

[02:31] <masonkramer> night masak

[02:33] <Grimnir_> hey

[02:33] <Grimnir_> we have been drinking stouts~

[02:33] * Grimnir_ likes beers

[02:34] <Grimnir_> stouts FTW

[02:34] <Grimnir_> I'm sorry

[02:34] <Grimnir_> I know that at least one of you guys like beers

[02:34] *** ch3ck3r joined
[02:34] * sorear wonders how to effectively crack down on p6l bikeshedding

[02:35] <Grimnir_> oh hai

[02:35] <Grimnir_> sorear: you can't

[02:37] * TimToady wonders why sorear++ thinks it's his job to... :)

[02:37] <Grimnir_> because ++

[02:37] *** ch3ck left
[02:37] <TimToady> it's sociologically useful to have a place for bikeshedders to hang out

[02:37] <TimToady> if they weren't there, they'd be here

[02:38] * TimToady ponders the theological necessity of hell...

[02:39] <Grimnir_> TimToady: huh?

[02:39] <Grimnir_> p√• torsdag

[02:40] <Grimnir_> rakudo: BlackWork::SortArbejde.etEllerAndet()

[02:40] <p6eval> rakudo 015d77: OUTPUT¬´Can not find sub BlackWork::SortArbejde‚ê§  in main program body at line 1‚ê§¬ª

[02:40] <Grimnir_> I'm a pokeman

[02:40] <Grimnir_> pokemon

[02:41] <colomon> TimToady++

[02:50] <Grimnir_> colomon: that's the one

[02:53] <Grimnir_> we have been drinking too much. we're sorry

[02:54] *** takadonet joined
[02:55] <takadonet> hey all

[02:55] <TimToady> o/

[02:55] <Grimnir_> hey

[02:56] *** xiaomo joined
[02:57] <Grimnir_> fair p√• en eller anden m√•de

[03:02] <diakopter> .beats

[03:02] <phenny> @168

[03:02] <diakopter> .beats

[03:02] <phenny> @168

[03:02] <diakopter> on that note, ...

[03:04] <takadonet> you know sometime I hate regex

[03:05] *** _xiaomo_ joined
[03:06] *** xiaomo left
[03:06] *** diego_ joined
[03:06] *** diego_ left
[03:09] *** dukeleto joined
[03:10] *** ch3ck3r left
[03:13] <Grimnir_> takadonet: nobody hates regex

[03:13] <Grimnir_> we love regex

[03:13] <Grimnir_> one of my friends hate regex

[03:13] *** dukeleto left
[03:13] <Grimnir_> regex is the fucing wind

[03:14] *** dukeleto joined
[03:14] <takadonet> Grimnir_: when they work, they are great, when they dont..... i hate them

[03:16] <Grimnir_> takadonet: I love regex. but we have been drinking too fucking much

[03:16] <takadonet> Grimnir_: who is we?

[03:16] <Grimnir_> porter, porter, porter!

[03:16] <takadonet> well have a great night :)

[03:16] <Grimnir_> :)

[03:17] <Grimnir_> we are drikning imperiol stouts

[03:17] <Grimnir_> imperal

[03:17] <Grimnir_> imperial*

[03:17] <Grimnir_> we have been drkning too mu

[03:17] <Grimnir_> much

[03:17] <Grimnir_> sorry...

[03:17] <Grimnir_> I write in dvorak

[03:17] <Grimnir_> my friend doesn't care

[03:17] <Grimnir_> he is an angry sysadmin

[03:19] <Grimnir_> I'm sorry

[03:19] <Grimnir_> bonanza

[03:19] <Grimnir_> we are iseting to johnny cash

[03:19] <Grimnir_> listening

[03:19] <Grimnir_> ?

[03:19] <Grimnir_> *

[03:35] *** takadonet left
[03:45] *** Chillance joined
[03:47] *** _xiaomo_ left
[05:24] *** redicaps joined
[06:09] *** patspam joined
[06:10] *** patspam left
[06:46] *** constant joined
[06:46] *** constant left
[06:46] *** constant joined
[07:01] *** ilogger2 joined
[07:01] *** ChanServ sets mode: +v ilogger2

[08:12] *** am0c^ joined
[08:17] *** uniejo joined
[08:18] <dalek> niecza: 534c984 | sorear++ | / (5 files):

[08:18] <dalek> niecza: Add beginnings of a JSYNC parser

[08:18] <dalek> niecza: review: https://github.com/sorear/niecza/commit/534c984baeccfe5562719e06662db18df2f56c74

[08:18] <dalek> niecza: 5e8d5f4 | sorear++ | perf/ (4 files):

[08:18] <dalek> niecza: Add four more versions of LoopMicro + timing sheet

[08:18] <dalek> niecza: review: https://github.com/sorear/niecza/commit/5e8d5f46e5989ee635d559218644188dbc251186

[09:11] *** meppl joined
[09:20] *** molaf joined
[09:23] *** isBEKaml joined
[09:28] *** am0c^ left
[10:11] *** ilogger2 joined
[10:11] *** ChanServ sets mode: +v ilogger2

[10:19] <dalek> niecza: c49e20c | sorear++ | lib/JSYNC.cs:

[10:19] <dalek> niecza: Complete JSYNC emitter (ingy++ for spec feedback)

[10:19] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c49e20c95c08a42802e19b9a07fa94fdae585a2c

[10:19] * sorear out

[10:21] *** icwiener joined
[10:24] *** Axius joined
[10:26] <tadzik> ~~

[10:29] *** masonkramer_ joined
[10:29] *** masonkramer_ is now known as masonkramer

[10:35] *** constant joined
[10:35] *** constant left
[10:35] *** constant joined
[10:36] *** Axius left
[10:44] *** cjk101010 joined
[10:56] *** mavrc joined
[11:04] *** nymacro joined
[11:13] *** constant left
[11:15] *** MayDaniel joined
[11:16] *** wamba joined
[11:55] *** constant joined
[11:55] *** constant left
[11:55] *** constant joined
[11:58] <dalek> rakudo: d9a761a | KodiB++ | src/core/Temporal.pm:

[11:58] <dalek> rakudo: [Temporal] Improved the error message for Date.new(Str).

[11:58] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/d9a761a65e94c72e314a2a0bb221866ca63cfee9

[12:00] *** am0c joined
[12:07] *** kanishka joined
[12:10] *** wamba left
[12:10] *** wamba joined
[12:28] *** orafu joined
[12:30] *** constant left
[12:33] *** risou joined
[12:35] *** jrockway joined
[12:48] *** sftp joined
[12:51] *** dug__ joined
[12:51] *** dug__ is now known as dugg

[12:53] *** _xiaomo_ joined
[13:01] *** Axius joined
[13:02] <dugg> Howdy, perl6!

[13:04] <tadzik> dugg: o/

[13:04] *** cjk101010 left
[13:08] <dugg> My work has recently started doing a voluntary weekly code kata, which I took from as an opportunity to write my first Perl 6 program.  The kata is borrowed from MJD's excellent QOTW series, explained here: http://perl.plover.com/qotw/r/001.

[13:08] <dugg> My program is here: https://gist.github.com/676143

[13:09] <dugg> I can't help but think that there is something in the map that could be more 6-ish (maybe the whole (both lines) program).

[13:10] <dugg> I was also curious how to pronounce the brackets around max in `my $maxlen = [max] @linesª.chars;`

[13:15] <tadzik> it's called a meta list operator, or something like this :)

[13:16] <tadzik> I don't think it's not-enough-6ish

[13:17] <dugg> Do I poke at S03 to read about the meta list operator?

[13:18] <tadzik> there's nothing fancy about it really

[13:18] <flussence> I was gonna suggest using sprintf('%*s') in that map, but the * seems to be a p5-only thing...

[13:18] <tadzik> http://perlcabal.org/syn/S03.html#Reduction_operators

[13:20] <dugg> tadzik: Well, if one (me!) isn't used to having [] spell reduce, it feels fancy!

[13:20] <tadzik> oh probably :) I didn't even remember it was named that way

[13:21] *** mj41_ joined
[13:22] <dugg> flussence: gotcha.  The map line is a fairly direct translation from the p5 version I started with.

[13:24] *** mj41_ is now known as mj41

[13:26] <colomon> dugg: seems reasonably p6-y to me.

[13:28] <dugg> Cool, thanks.  The line with the hyper and list reduction is interesting from a "here are some features you might think are nifty if you've never seen Perl 6" standpoint, which might be fun discussion points at work.

[13:30] <tadzik> that's quite normal when writing in languages with nifty features. Same story is with Haskell, which look funny and very little people understand it

[13:32] *** mj41 left
[13:32] *** ggoebel joined
[13:32] *** mj41 joined
[13:34] *** Psyche^ joined
[13:34] *** Psyche^ is now known as Patterner

[13:34] *** whiteknight joined
[13:48] *** kanishka left
[13:54] *** wamba left
[14:00] *** kfg joined
[14:03] *** kfg left
[14:06] *** masak joined
[14:07] <masak> oh hai, #perl6!

[14:07] <mindos1> Hora!

[14:08] *** _xiaomo_ left
[14:09] <masak> mindos1: how're things going?

[14:09] *** Axius left
[14:10] <jnthn> o/ #perl6

[14:12] <mindos1> masak : Searching traveling information‚Ä¶. :P

[14:15] <tadzik> masak: o/

[14:15] <tadzik> \o jnthn 

[14:19] <masak> rakudo: say (*.&say).WHAT

[14:19] <p6eval> rakudo 015d77: OUTPUT¬´Whatever()<0x8319460>‚ê§Bool()‚ê§¬ª

[14:19] <masak> shouldn't that be a closure?

[14:20] <jnthn> masak: hmm...mebbe... :)

[14:21] <jnthn> I guess it gets re-written to a sub call in the PAST tree and then fails to be seen as a "oh yes curry me" method call :)

[14:21] * masak submits rakudobug

[14:21] <masak> I had a nice rewrite of dugg++'s code kata that depended on this working:

[14:21] <masak> rakudo: sub center(*@lines) { sub lfill($s, $n) { " " x $n ~ $s }; @lines.map: *.&lfill((my $maxlen - .chars) / 2) given $maxlen = [max] @lines>>.chars }; say center "This", "is", "a test"

[14:21] <p6eval> rakudo 015d77: OUTPUT¬´No candidates found to invoke for method 'map' on object of type 'Array'; available candidates have signatures:‚ê§:(Mu : &block;; *%_)‚ê§‚ê§  in 'center' at line 22:/tmp/pz5YX09yqR‚ê§  in main program body at line 22:/tmp/pz5YX09yqR‚ê§¬ª

[14:24] *** ch3ck joined
[14:24] <mindos1> Will go the Bangkok with a friend‚Ä¶ Haven't got chance to continue.

[14:25] *** dugg left
[14:33] <tadzik> Code kata; interesting

[14:35] <masak> yeah. let's do more of those.

[14:36] <tadzik> ...after learning some maths

[14:36] <tadzik> :(

[14:38] *** sftp_ joined
[14:38] *** sftp left
[14:41] *** Limbic_Region joined
[14:46] <masak> tadzik: why would you need to learn maths to do a code kata? do you know something about the code kata that I don't?

[14:47] *** _twitch joined
[14:47] <tadzik> masak: the most important thing about code kata at this very moment is that on tuesday I have a maths...

[14:47] <tadzik> phenny: "kolokwium"?

[14:47] <phenny> tadzik: "test" (pl to en, translate.google.com)

[14:47] <tadzik> let's say "test"

[14:47] <masak> :)

[14:47] <masak> colloquium?

[14:47] <masak> that's... not right :)

[14:47] <tadzik> maybe. A mini-exam, thrice a semester

[14:47] <jnthn> It's only colloquial. :P

[14:48] <masak> phenny: "dugga"?

[14:48] <phenny> masak: "quiz" (sv to en, translate.google.com)

[14:48] <masak> that one?

[14:48] <tadzik> no idea

[14:48] <masak> phenny: you rock.

[14:48] <tadzik> phenny: "ty ska≈Ço"?

[14:48] <phenny> tadzik: "skalo Company" (vi to en, translate.google.com)

[14:49] <tadzik> phenny: "ty ska≈Ço!"?

[14:49] <phenny> tadzik: "skalo company!" (vi to en, translate.google.com)

[14:49] <tadzik> no!

[14:49] <tadzik> phenny: "ty ska≈Ça"?

[14:49] <phenny> tadzik: "you rock" (pl to en, translate.google.com)

[14:49] <tadzik> that's it

[14:49] <tadzik> phenny: "ty ruro"?

[14:49] <phenny> tadzik: "ruro Company" (vi to en, translate.google.com)

[14:49] <tadzik> pfff

[14:50] <jnthn> We just learnt the Vietnamese for "company", it seems... :)

[14:50] <jnthn> phenny: "ty bad"?

[14:50] <phenny> jnthn: "Bad Company" (vi to en, translate.google.com)

[14:50] <tadzik> funny how sometimes it's lowercase

[14:51] <masak> phenny: "C√°c c√¥ng ty m√† l√†m cho nh·ªØng ƒë√¥i gi√†y bu·ªìn c∆∞·ªùi."?

[14:51] <phenny> masak: "The company that makes those funny shoes." (vi to en, translate.google.com)

[14:51] *** nymacro left
[14:51] <masak> well, there's a "ty" in there.

[14:51] <jnthn> phenny: "≈†koda"?

[14:51] <phenny> jnthn: "Damage" (cs to en, translate.google.com)

[14:51] <tadzik> :D

[14:51] <masak> *lol*

[14:51] <tadzik> it's a "Pity" in Polish

[14:52] <tadzik> or Damage, yes

[14:52] <jnthn> yes, in Slovak it's an interjection like, "what a pity"

[14:52] <tadzik> "jaka szkoda"

[14:52] <jnthn> I can't see a car with that on it any more and take it srsly.

[14:52] <masak> that makes a lot of sense. fr:"dommage" can mean both "damage" and "[what a] pity".

[14:53] <tadzik> and they say Perl sucks at marketing

[14:54] <masak> phenny: "Les Fran√ßais disent que nous aspirer √† la commercialisation."?

[14:54] <phenny> masak: "The French say that we suck at marketing." (fr to en, translate.google.com)

[14:55] <masak> not sure that's proper French, though.

[14:55] <tadzik> phenny: "Francuzi m√≥wiƒÖ, ≈ºe ssiemy w marketingu"

[14:55] <masak> "aspirer"?

[14:55] <tadzik> phenny: "Francuzi m√≥wiƒÖ, ≈ºe ssiemy w marketingu"?

[14:55] <phenny> tadzik: "The French say that We suck at marketing" (pl to en, translate.google.com)

[14:55] <tadzik> nice

[14:55] <masak> heh. "marketingu". :)

[14:55] <masak> you Polish people suck at word-loaningu. :)

[14:55] <dalek> 6model: 26831d8 | jonathan++ | t/nqp/35-prefix-sigil.t:

[14:55] <dalek> 6model: [t] We already pass 35-prefix-sigil.t.

[14:55] <dalek> 6model: review: https://github.com/jnthn/6model/commit/26831d85e9ed3aef457c34e98e0f189bc90fb186

[14:55] <tadzik> that's this language feature that almost no one has

[14:56] <masak> say what?

[14:56] <masak> locative?

[14:56] <masak> that's fairly common, I think.

[14:56] <jnthn> masak: If your language had such a cool feature, would you decline to use it?

[14:56] <tadzik> this marketing ‚Üí ten marketing, tell me something about marketing ‚Üí powiedzi mi co≈õ o marketingu, I have nothing to do with marketing ‚Üí Nie mam nic do zrobienia z marketingiem

[14:56] <tadzik> this thing?

[14:56] <masak> cases.

[14:56] *** Limbic_Region left
[14:56] <masak> and it's wrong to say that "almost no one has" it.

[14:57] <masak> in fact, it's fairly common.

[14:57] <tadzik> yep. I've heard Polish's hard for it has this feature

[14:57] * jnthn likes cases

[14:57] <jnthn> tadzik: Yeah, it makes it more fun to learn. ;)

[14:57] <masak> tadzik: jnthn++ is our local case specialist.

[14:57] <jnthn> :P

[14:57] <masak> tadzik: Russian has them, Latin has them, German has them, Esperanto has them...

[14:58] <tadzik> hmm, so maybe that was about some other thing that changes depending on a context

[14:59] <masak> Polish seems to me to be a fairly typical Slavic language.

[14:59] <jnthn> The nice thing is that most Slavic languages do the case declensions in the same kinda way. :)

[14:59] <masak> yeah.

[14:59] <jnthn> So after learning about the Slovak ones, the Russian ones felt familiar

[14:59] <masak> a case of great similarity. :)

[14:59] <jnthn> Those Polish ones look quite close too.

[15:00] <tadzik> masak: about word-loaningu: that'd be "po≈ºyczaniu s≈Ç√≥w" :)

[15:01] <masak> tadzik: oh, that sounds pretty :)

[15:01] <masak> phenny: "po≈ºyczaniu s≈Ç√≥w"?

[15:01] <phenny> masak: "borrowing words" (pl to en, translate.google.com)

[15:01] <tadzik> that' actually "po≈ºyczanie s≈Ç√≥w"

[15:03] *** Trashlord joined
[15:05] <masak> tadzik: yeah, I got that.

[15:05] <masak> rakudo: multi foo() { say "Heads" }; multi foo() { say "Tails" }; foo

[15:05] <p6eval> rakudo 015d77: OUTPUT¬´Ambiguous dispatch to multi 'foo'. Ambiguous candidates had signatures:‚ê§:()‚ê§:()‚ê§‚ê§  in main program body at line 22:/tmp/VfbuyF_gEj‚ê§¬ª

[15:05] <tadzik> hmm

[15:06] <tadzik> rakudo: multi foo(rand) { say "heads" }; multi foo () { say "tails" }; foo

[15:06] <p6eval> rakudo 015d77: OUTPUT¬´===SORRY!===‚ê§Invalid typename in parameter declaration at line 22, near ") { say \"h"‚ê§¬ª

[15:06] <tadzik> that'd not do anyway

[15:06] <tadzik> . o O ( use RANDOM_MULTIS; )

[15:08] <masak> tadzik: I'm actually hacking Rakudo locally to allow the above :)

[15:08] <masak> just for fun.

[15:08] * jnthn temporarily confiscates masak++'s Rakudo commit bit

[15:08] <masak> no worries. :)

[15:08] <masak> I'm not in an iconoclastic mood.

[15:09] <masak> I actually *like* the way the multi dispatch works.

[15:12] *** am0c left
[15:13] *** wallberg joined
[15:18] * szabgab is wondering who might  want to go to FOSDEM to have a Perl 6 hackathon

[15:19] * masak might

[15:20] <jnthn> szabgab: May well do so

[15:21] * jnthn checks dates

[15:21] *** wamba joined
[15:21] <szabgab> no names found https://www.socialtext.net/perl5/index.cgi?events_2011_fosdem

[15:22] <masak> first time I see that page.

[15:23] <szabgab> you know, clicking on the link usually helps :)

[15:23] <masak> don't know what you mean by that. I did, just now, and it's the first time.

[15:23] <szabgab> though admittedly not always

[15:24] <jnthn> szabgab: Hmm. I'm teaching up until the 4th Feb.

[15:24] <masak> anyway, I might go. but it depends on the what the rest of FOSDEM has to offer, and who else is coming.

[15:24] <szabgab> masak: don't worry, just  add yourself 

[15:24] <jnthn> szabgab: Free on the weekend, would need to fathom getting there :)

[15:24] <jnthn> szabgab: Would hackathon be only during of potentially also after FOSDEM?

[15:25] <szabgab> eiterh 2 days before or 2 days after

[15:25] <jnthn> OK. If it's after I could make it I expect.

[15:25] <szabgab> and we have a space in The hague actually

[15:25] <jnthn> Oh awesome, they have the best staircases in that city.

[15:25] <szabgab> :)

[15:26] <szabgab> we have some coins if you need financing for beer or transportation

[15:28] <jnthn> ...is it a challenge to cost more in beer than transport? ;)

[15:28] <szabgab> is it ?

[15:28] <masak> let's find out!

[15:32] *** wallberg left
[15:39] *** takadonet joined
[15:40] <takadonet> yo

[15:40] <masak> takadonet: \o

[15:42] <tadzik> o/

[15:42] *** mindos joined
[15:47] *** mssm joined
[15:49] *** timbunce joined
[15:50] *** Bzek joined
[15:50] <dalek> roast: 1ae7e66 | (Kodi Arfer)++ | S02-builtin_data_types/set.t:

[15:50] <dalek> roast: [set.t] Tests for hyperoperators.

[15:50] <dalek> roast: review: https://github.com/perl6/roast/commit/1ae7e66869285db7d21d3db52734a4c852c40178

[15:52] <tadzik> jnthn: have you stopped creating Star .msi packages?

[15:53] <dalek> rakudo: c23f582 | KodiB++ | src/core/metaops.pm:

[15:53] <dalek> rakudo: [metaops] "%x" -> "Hash $x" in &hyper signatures.

[15:53] <dalek> rakudo: 

[15:53] <dalek> rakudo: This prevents Sets (for example) from using these multis.

[15:53] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/c23f582ba1da55721b865ae5c237129806e596f6

[15:53] <dalek> rakudo: 39d0fe5 | KodiB++ | src/core/metaops.pm:

[15:53] <dalek> rakudo: [metaops] Made hyperoperators on Iterable, non-Positional structures return the same type they're given.

[15:53] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/39d0fe573fec07c56b072ec791ae5d53467fc7ad

[15:56] *** mavrc left
[15:58] *** mindos is now known as MindosCheng

[16:00] <masak> rakudo: multi b(Numeric $x) { say "Numeric" }; multi b(Num $x) { say "Num" }; multi sub(Int $x) { say "Int" }; b(4 + 2i); b(4.0); b(4)

[16:00] <p6eval> rakudo 015d77: OUTPUT¬´Numeric‚ê§Numeric‚ê§Numeric‚ê§¬ª

[16:00] <masak> o.O

[16:00] <masak> jnthn!

[16:00] <masak> er.

[16:00] <jnthn> ...er.

[16:00] <masak> rakudo: multi b(Numeric $x) { say "Numeric" }; multi b(Num $x) { say "Num" }; multi b(Int $x) { say "Int" }; b(4 + 2i); b(4.0); b(4)

[16:00] <p6eval> rakudo 015d77: OUTPUT¬´Numeric‚ê§Numeric‚ê§Int‚ê§¬ª

[16:00] <jnthn> ...complex is not Num or Int. :)

[16:01] <jnthn> Nor is Rat.

[16:01] <masak> oh. :/

[16:01] <masak> sorry :)

[16:01] <jnthn> I don't file *that* hard. :P

[16:01] <jnthn> *fail*

[16:01] <jnthn> ...oh the irony!

[16:01] <masak> :)

[16:01] *** mavrc joined
[16:02] * moritz_ is glad the Int ~~ Num thing is gone

[16:02] *** mavrc left
[16:02] * masak too

[16:04] *** kanishka joined
[16:06] * jnthn three

[16:07] * tadzik for {}

[16:08] *** timbunce left
[16:12] <dalek> 6model: b71c796 | jonathan++ | dotnet/runtime/Runtime/MultiDispatch/MultiDispatcher.cs:

[16:12] <dalek> 6model: [dotnet] Teach the multi-dispatcher the topological sort algorithm, so we can now (if I got it right) do proper-ish multi dispatches.

[16:12] <dalek> 6model: review: https://github.com/jnthn/6model/commit/b71c7966b3c55b05595ffe719a6a3a8710519baa

[16:14] *** kanishka left
[16:18] *** masonkramer left
[16:19] <jnthn> tadzik: I only did one for the first Star - I thought somebody else had picked it up after that.

[16:19] <jnthn> But I forget who... 

[16:19] <tadzik> x3nu? I recall him making some windows builds

[16:21] <moritz_> speaking of windows builds... jnthn, could you please try if --gen-parrot (and Configure.pl in general) works in current rakudo_

[16:21] <moritz_> s/_/?/

[16:21] *** sftp_ left
[16:22] <dalek> 6model: c1e700e | jonathan++ | dotnet/runtime/Runtime/MultiDispatch/MultiDispatcher.cs:

[16:22] <dalek> 6model: [dotnet] Meh, I failed it.

[16:22] <dalek> 6model: review: https://github.com/jnthn/6model/commit/c1e700e4a06b18ae5c1f589e17f0d10976333713

[16:22] <dalek> 6model: 252d322 | jonathan++ | dotnet/compiler/Actions.pm:

[16:22] <dalek> 6model: [dotnet] Make the automatically added invocant by default have type $?CLASS (for export, but also so multi-dispatch works out correctly if the only difference is subtypeness).

[16:22] <dalek> 6model: review: https://github.com/jnthn/6model/commit/252d3224c2162d70c963dbae47ee171fd21e7d46

[16:22] <dalek> 6model: 9ac81d5 | jonathan++ | t/nqp/53-multi-method.t:

[16:22] <dalek> 6model: [t] Un-skip a test masak++ added yesterday for invocant narrowness in multi-method dispatch.

[16:22] <dalek> 6model: review: https://github.com/jnthn/6model/commit/9ac81d5b266cecbbd88118ddc16244490e9ff09f

[16:22] *** sftp_ joined
[16:22] <jnthn> moritz_: it's merged into master?

[16:22] <moritz_> jnthn: aye

[16:23] <jnthn> moritz_: k

[16:23] <jnthn> Trying it 

[16:29] *** kanishka joined
[16:30] <jnthn> moritz_: fail :(

[16:30] <jnthn> https://gist.github.com/676299

[16:31] <jnthn> (I'd blown away my Parrot svn checkout and built Parrot just for safety.)

[16:33] *** mavrc joined
[16:35] <jnthn> Not immediately clear to me what's wrong...looking a little more.

[16:38] *** Kodi joined
[16:40] <jnthn> moritz_: Seems that 

[16:40] <jnthn> if (open my $REV, '-|', "parrot_install${slash}bin${slash}parrot_config revision") {

[16:40] <jnthn> ends up true

[16:40] <jnthn> Even if that path...doesn't exist...?!

[16:40] <masak> huh

[16:41] <Kodi> masak: http://rt.perl.org/rt3/Ticket/Display.html?id=79158 I just pushed two commits that make hyperoperators work on Sets. However, S03:4095 seems to imply that this particular example is illegal.

[16:42] <masak> Kodi: then perhaps reject the ticket with that motivation.

[16:42] <Kodi> masak: Sounds good.

[16:42] <masak> Kodi++

[16:42] <jnthn> moritz_: got a patch that seems to work

[16:42] <masak> Kodi: I agree about your interpretation of S03:4095.

[16:45] <Kodi> It would be nice if I could make 'set(1, 2) >>+<< set(3, 4)' actually throw a fatal error. But I don't see how, because &hyper would need to know (a) which data structures are ordered and which are unordered, and (b) which data types are scalar and which aren't.

[16:46] <masak> Kodi: I guess you could special-case Set and Bag.

[16:47] <Kodi> masak: And KeyHash. Yes, that would probably be better than nothing.

[16:48] *** sftp joined
[16:50] *** mavrc left
[16:50] *** sftp_ left
[16:50] <jnthn> Ain't there an Ordered role?

[16:51] <masak> loliblogged! http://strangelyconsistent.org/blog/extending-the-multi-dispatcher-in-perl-6

[16:51] <jnthn> lol

[16:51] *** mila_ joined
[16:51] <masak> jnthn: no. there's not an Ordered role.

[16:51] <Kodi> jnthn: The only reference to it in S02 seems to be a fossil.

[16:52] <masak> right.

[16:52] <jnthn> masak: # Dispatching on number of candidates

[16:52] <jnthn> s/candidates/arity/

[16:52] <masak> jnthn: thanks :)

[16:53] <masak> fixed. will take 3 minutes for it to trickle up to the server :)

[16:53] <masak> jnthn++

[16:54] <Kodi> I'm thinking that the best definition of "ordered" is just "does Positional". It could get problematic if we made data structures with uncountable index sets (:P) but it should do for now.

[16:55] <jnthn> Kodi: That sounds sane.

[16:56] *** justatheory joined
[16:58] *** mavrc joined
[17:01] <takadonet> how do you  reference a regex from a module/package

[17:01] <takadonet> rakudo: module a {our regex go { \d }; };say a::regex;

[17:01] <p6eval> rakudo 015d77: OUTPUT¬´Can not find sub a::regex‚ê§  in main program body at line 1‚ê§¬ª

[17:01] <jnthn> rakudo: module a {our regex go { \d }; };say a::go

[17:01] <p6eval> rakudo 015d77: OUTPUT¬´Not enough positional parameters passed; got 0 but expected 1‚ê§  in 'a::go' at line 22:/tmp/PhtFUchBtW‚ê§  in main program body at line 22:/tmp/PhtFUchBtW‚ê§¬ª

[17:02] <jnthn> rakudo: module a {our regex go { \d }; };say &a::go

[17:02] <p6eval> rakudo 015d77: OUTPUT¬´go‚ê§¬ª

[17:02] <jnthn> like dat

[17:03] <takadonet> thanks 

[17:03] <masak> rakudo: module a {our regex go { \d }; };say &a::go("4")

[17:03] <p6eval> rakudo 015d77: OUTPUT¬´Method '!cursor_start' not found for invocant of class 'Str'‚ê§  in 'a::go' at line 22:/tmp/shCXdwFZ9K‚ê§  in main program body at line 22:/tmp/shCXdwFZ9K‚ê§¬ª

[17:04] <masak> so, can you actually use that reference for anything?

[17:04] <jnthn> You'd have to call it from a regex.

[17:04] <masak> ...and that's not implemented yet...

[17:04] <jnthn> rakudo: module a {our regex go { \d }; };my &x = &a::go("4"); say "aa4bb" ~~ /<&x>/

[17:04] <takadonet> hmm I need to modifying it and then use it

[17:04] <p6eval> rakudo 015d77: OUTPUT¬´Method '!cursor_start' not found for invocant of class 'Str'‚ê§  in 'a::go' at line 22:/tmp/5taw2Q0X_T‚ê§  in main program body at line 22:/tmp/5taw2Q0X_T‚ê§¬ª

[17:04] <jnthn> oh grap

[17:04] <jnthn> rakudo: module a {our regex go { \d }; };my &x = &a::go; say "aa4bb" ~~ /<&x>/

[17:04] <p6eval> rakudo 015d77: OUTPUT¬´4‚ê§¬ª

[17:04] <jnthn> there

[17:05] <masak> hah! :)

[17:05] <masak> jnthn++ # nice hack

[17:05] <takadonet> jnthn++

[17:07] *** _twitch left
[17:08] <dalek> 6model: d6f6e74 | jonathan++ | dotnet/runtime/Runtime/Ops/Primitive.cs:

[17:08] <dalek> 6model: [dotnet] Add basic arithmetic ops for nums.

[17:08] <dalek> 6model: review: https://github.com/jnthn/6model/commit/d6f6e74ad8527d35b333aaa22656de2f07d4f9cf

[17:08] *** ash_ joined
[17:09] *** mavrc left
[17:10] <dalek> 6model: 4382f0d | jonathan++ | common/NQP/NQPSetting.pm:

[17:10] <dalek> 6model: [common] Add various coercice multi variants to various ops, now that we have candidate sorting.

[17:10] <dalek> 6model: review: https://github.com/jnthn/6model/commit/4382f0dc635166bdbc828ad787ff940964b55da4

[17:10] <dalek> 6model: c7cefea | jonathan++ | t/nqp/18-associative.t:

[17:10] <dalek> 6model: [t] We now pass 18-associative.t (depended on a coercion that wasn't available before).

[17:10] <dalek> 6model: review: https://github.com/jnthn/6model/commit/c7cefeacc30b0ed091524160008bdab81acc87b8

[17:10] <jnthn> moritz_: Pushed workaround that gets things building on Win32 again.

[17:11] <dalek> rakudo: 26fcf0d | jnthn++ | build/gen_parrot.pl:

[17:11] <dalek> rakudo: [build] Turns out this extra check is needed in gen_parrot.pl to stop things getting explodey on Win32. Wish I understood why...anyway, it works.

[17:11] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/26fcf0d0b8be4f2f749e984e4a99c983e382674f

[17:11] <takadonet> rakudo: module a {our regex go { \d }; }; &a::go = { \s };

[17:11] <p6eval> rakudo 015d77: OUTPUT¬´Cannot modify readonly value‚ê§  in '&infix:<=>' at line 1‚ê§  in main program body at line 22:/tmp/gSnPq82zfE‚ê§¬ª

[17:12] <takadonet> nuts...

[17:12] <jnthn> ...what did that even parse as?!

[17:13] <arnsholt> I was wondering the same

[17:13] <arnsholt> std: \s;

[17:13] <p6eval> std a194beb: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Regex not terminated at /tmp/YYfmqmZHOG line 1 (EOF):‚ê§------> [32m\s;[33m‚èè[31m<EOL>[0m‚ê§    expecting quantifier‚ê§Parse failed‚ê§FAILED 00:01 120m‚ê§¬ª

[17:13] <jnthn> std: module a {our regex go { \d }; }; &a::go = { \s };

[17:13] <p6eval> std a194beb: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Use of a closing delimiter for an opener is reserved at /tmp/qzIfB_9__j line 1:‚ê§------> [32m {our regex go { \d }; }; &a::go = { \s [33m‚èè[31m};[0m‚ê§Parse failed‚ê§FAILED 00:01 126m‚ê§¬ª

[17:13] *** Chillance joined
[17:13] <masak> o.O

[17:13] <jnthn> rakudo: \s

[17:13] <p6eval> rakudo 015d77: OUTPUT¬´Could not find sub &s‚ê§  in main program body at line 22:/tmp/tW8WxbYqf_‚ê§¬ª

[17:13] <jnthn> oh

[17:14] <jnthn> \ makes a capture

[17:14] <jnthn> \s = call s and make a capture of the return value

[17:14] <jnthn> But it's in a clozhure 

[17:14] <masak> :D

[17:14] <jnthn> I'm confused by STD's rejection of it though.

[17:15] <arnsholt> Looks like the s in \s; is interpreted as opening an s///

[17:16] <arnsholt> And the \ as unspace with zero space, perhaps?

[17:16] <dalek> 6model: a3877b7 | jonathan++ | t/nqp/5 (2 files):

[17:16] <dalek> 6model: [t] masak++ can't count. :-) :-)

[17:16] <dalek> 6model: review: https://github.com/jnthn/6model/commit/a3877b7fb44064c6bc9f0e4bb4c7805f1114ddbf

[17:16] <masak> :P

[17:16] <masak> that's what I get for helping...

[17:16] <jnthn> Welcome. Look forward to the next patch. ;)

[17:16] * masak cowers

[17:21] *** risou_ joined
[17:22] *** Bzek_ joined
[17:24] *** risou left
[17:24] *** Axius joined
[17:25] *** Bzek left
[17:27] <dalek> 6model: 9bdccdb | jonathan++ | dotnet/compiler/ROADMAP.txt:

[17:27] <dalek> 6model: [dotnet] Flesh out the ROADMAP section on working towards bootstrapping.

[17:27] <dalek> 6model: review: https://github.com/jnthn/6model/commit/9bdccdbb60a6ef08f4afee8dc66ea0ee3466c88d

[17:27] <masak> blog post! http://strangelyconsistent.org/blog/november-14-2010-around-and-about

[17:27] <jnthn> another one?!

[17:28] <masak> *phew*. almost halfway through.

[17:28] *** TimToady joined
[17:28] *** masonkramer joined
[17:30] *** mavrc joined
[17:30] <jnthn> ...there's 2 more coming today? ;)

[17:30] <masak> no, half-way through November.

[17:30] <MindosCheng> Cool

[17:30] <takadonet> so did I find a bug then?

[17:30] <masak> I solemnly promise not to post any more today.

[17:31] <masak> takadonet: with the readonly value? no, don't think so.

[17:33] *** ash__ joined
[17:35] *** ash_ left
[17:35] *** ash__ is now known as ash_

[17:35] *** ash__ joined
[17:35] *** ash_ left
[17:35] *** ash__ is now known as ash_

[17:36] *** dual joined
[17:38] <MindosCheng> rakudo: my $x = { my Int $c=10; { $c } }(); say $x();

[17:38] <p6eval> rakudo 015d77: OUTPUT¬´invoke() not implemented in class 'Integer'‚ê§  in main program body at line 22:/tmp/q87qc8yBVA‚ê§¬ª

[17:39] <jnthn> That last { $c } is not a closrue, it's an immediate block

[17:39] *** kanishka left
[17:39] <jnthn> use -> to disambiguate

[17:39] <masak> rakudo: my $x = { my Int $c=10; return { $c } }(); say $x()

[17:39] <p6eval> rakudo 015d77:  ( no output )

[17:39] <jnthn> or that.

[17:39] <masak> hm...

[17:40] <masak> rakudo: my $x = sub { my Int $c=10; return { $c } }(); say $x()

[17:40] <p6eval> rakudo 015d77: OUTPUT¬´===SORRY!===‚ê§Confused at line 22, near "my $x = su"‚ê§¬ª

[17:40] <tadzik> if (-e "parrot_install${slash}bin${slash}parrot_config -- in Configure.pl. Could we just extend the Perl 6 syntax one day to make / act differently?

[17:40] <masak> rakudo: my $x = sub () { my Int $c=10; return { $c } }(); say $x()

[17:40] <mkramer> rakudo: my $x = { my Int $c=10; { $c } }; say $x()

[17:40] <p6eval> rakudo 015d77: OUTPUT¬´===SORRY!===‚ê§Confused at line 22, near "my $x = su"‚ê§¬ª

[17:40] <p6eval> rakudo 015d77: OUTPUT¬´10‚ê§¬ª

[17:40] <tadzik> . o O ( use File::Path; path('/some/directory/and/file') )

[17:41] <jnthn> rakudo: my $x = (sub { my Int $c=10; return { $c } })(); say $x()

[17:41] <p6eval> rakudo 015d77: OUTPUT¬´10‚ê§¬ª

[17:41] <masak> jnthn++

[17:41] <jnthn> std: my $x = sub { my Int $c=10; return { $c } }(); say $x()

[17:41] <p6eval> std a194beb: OUTPUT¬´ok 00:01 122m‚ê§¬ª

[17:41] <jnthn> hm

[17:41] <masak> rakudo: my $x = { my Int $c = 10; -> { $c } }(); say $x()

[17:41] <p6eval> rakudo 015d77: OUTPUT¬´10‚ê§¬ª

[17:41] <mkramer> what's the point of the trailing ()

[17:42] <masak> invocation.

[17:42] <mkramer> right, why do you assign the invocation to $x, then invoke the invocation

[17:42] <mkramer> rakudo: my $x = { my Int $c=10; { $c } }; say $x()()

[17:42] <p6eval> rakudo 015d77: OUTPUT¬´invoke() not implemented in class 'Integer'‚ê§  in main program body at line 22:/tmp/0rmF3n0t1a‚ê§¬ª

[17:42] <jnthn> I'm guessing it's a minified example of something else.

[17:43] <mkramer> why does it even work? $x should 10.  You can't invoke Int(10)

[17:43] <mkramer> *should hold 

[17:43] <MindosCheng> mkramer: Storing $c in the closure, and do something more evil.

[17:43] <jnthn> mkramer: That's exactly that the error is telling you.

[17:44] <mkramer> I'm talking about masak

[17:44] <jnthn> oh, sorry

[17:44] <mkramer> why does this work? my $x = { my Int $c = 10; -> { $c } }(); say $x()

[17:44] <MindosCheng> oh, sorry

[17:44] <jnthn> In invokes the closure, which returns another closures, which when invoked returns $c

[17:45] <mkramer> ahh

[17:45] <mkramer> that's what the -> is for, make a closure out of the immediate block

[17:45] * mkramer turns the page and catches up

[17:46] <masak> mkramer: yes, that's exactly the difference between immediate blocks and non-immediate blocks. the latter return closures, the former run them.

[17:46] <masak> rakudo: { say "OH HAI" }; my $x = { say "OH HAI a second time" }; say "wait for it..."; $x()

[17:46] <p6eval> rakudo 015d77: OUTPUT¬´OH HAI‚ê§wait for it...‚ê§OH HAI a second time‚ê§¬ª

[17:46] <MindosCheng> rakudo: my $x = -> { 42; }; say $x();

[17:46] <p6eval> rakudo 015d77: OUTPUT¬´42‚ê§¬ª

[17:48] <mkramer> rakudo: say (my $x = -> { 42 } ).WHAT; say $x()

[17:48] <p6eval> rakudo 015d77: OUTPUT¬´Block()‚ê§42‚ê§¬ª

[17:54] <MindosCheng> rakudo: my $x = sub ($y) { return $y; }; say $x(3);

[17:54] <p6eval> rakudo 015d77: OUTPUT¬´3‚ê§¬ª

[17:55] <masak> rakudo: for (1..10) -> $i { our sub foo { say $i } }; foo

[17:55] <p6eval> rakudo 015d77: OUTPUT¬´10‚ê§¬ª

[17:56] <masak> "rebind on block entry"...

[18:00] <MindosCheng> rakudo: sub curry($f, $v) { -> { return sub($v2) { $f($v1, $v2); }; }(); }; my $add3 = curry( sub($v1, $v2) { return $v1+v2; }, 3 ); say $add3(4); 

[18:00] <p6eval> rakudo 015d77: OUTPUT¬´===SORRY!===‚ê§Unable to parse blockoid, couldn't find final '}' at line 22‚ê§¬ª

[18:01] *** crythias joined
[18:02] *** Axius_ joined
[18:03] <masak> rakudo: sub curry($f, $v1) { return sub ($v2) { $f($v1, $v2) } }; my $add3 = curry( -> $v1, $v2 { $v1 + $v2 }, 3 ); say $add3(4)

[18:03] <p6eval> rakudo 015d77: OUTPUT¬´7‚ê§¬ª

[18:03] *** mssm left
[18:04] *** Axius left
[18:07] <MindosCheng>  sub curry($f, $v1) { my $v=$v1; return sub ($v2) { $f($v, $v2) }  }; my $add3 = curry( -> $v1, $v2 { $v1 + $v2 }, 3 ); say $add3(4)

[18:07] <MindosCheng> rakudo:  sub curry($f, $v1) { my $v=$v1; return sub ($v2) { $f($v, $v2) }  }; my $add3 = curry( -> $v1, $v2 { $v1 + $v2 }, 3 ); say $add3(4)

[18:08] <p6eval> rakudo 015d77: OUTPUT¬´7‚ê§¬ª

[18:08] <moritz_> rakudo: say (3 + *).(4)

[18:08] *** Axius_ left
[18:08] <p6eval> rakudo 015d77: OUTPUT¬´7‚ê§¬ª

[18:08] <moritz_> say &infix:<+>.assuming(3).(4)

[18:09] <tadzik> ENORAKUDO

[18:09] <moritz_> rakudo: say &infix:<+>.assuming(3).(4)

[18:09] <p6eval> rakudo 015d77: OUTPUT¬´7‚ê§¬ª

[18:09] <moritz_> niecza: say 3 + 4

[18:09] <p6eval> niecza c49e20c: OUTPUT¬´7‚ê§¬ª

[18:09] <tadzik> yapsi: say 3 + 4

[18:09] <p6eval> yapsi: OUTPUT¬´===SORRY!===‚ê§Unable to find module 'Yapsi' in the @*INC directories.‚ê§(@*INC contains:‚ê§  lib‚ê§  /home/p6eval/.perl6/lib‚ê§  /home/p6eval//p2/lib/parrot/2.9.1-devel/languages/perl6/lib‚ê§  .)‚ê§¬ª

[18:09] <moritz_> niecza: say &infix:<+>(3, 4)

[18:09] <p6eval> niecza c49e20c: OUTPUT¬´7‚ê§¬ª

[18:10] <moritz_> niecza: say infix:<+>(3, 4)

[18:10] <p6eval> niecza c49e20c: OUTPUT¬´Internal error: failed to resolve lexical infix:<+> in mainline at /home/p6eval/niecza/src/CSharpBackend.pm line 358.‚ê§¬ª

[18:10] <moritz_> rakudo: say infix:<+>(3, 4)

[18:10] <p6eval> rakudo 015d77: OUTPUT¬´7‚ê§¬ª

[18:11] <masak> rakudo: say &infix:<+>.signature

[18:11] <p6eval> rakudo 015d77: OUTPUT¬´get_attr_str() not implemented in class 'Perl6MultiSub'‚ê§  in main program body at line 1‚ê§¬ª

[18:11] <masak> :(

[18:11] <tadzik> that's an old one, isn't it?

[18:11] <tadzik> rakudo: say &infix:<+>.signature[0]

[18:11] <p6eval> rakudo 015d77: OUTPUT¬´get_attr_str() not implemented in class 'Perl6MultiSub'‚ê§  in main program body at line 1‚ê§¬ª

[18:11] <masak> tadzik: I'd guess so.

[18:12] <jnthn> Bad error

[18:12] <jnthn> But it's still wrong

[18:12] <jnthn> Well

[18:12] <jnthn> (the latter, not the former)

[18:13] <jnthn> &infix:<+>.signature is the proto's signature, but we don't have those yet in Rakudo)

[18:15] <moritz_> niecza: say &infix:<+>.assuming(3)

[18:15] <p6eval> niecza c49e20c: OUTPUT¬´Unhandled exception: Unable to resolve method assuming in class Sub‚ê§  at  line 1 (MAIN mainline @ 1)‚ê§  at  line 954 (SAFE G818ANONC @ 5)‚ê§  at  line 954 (SAFE module-SAFE @ 28)‚ê§  at  line 954 (SAFE mainline @ 1)‚ê§  at  line 0 (boot @ 1)‚ê§  at  line 0 (ExitRunloop @ 0)‚ê§"mono"

[18:15] <p6eval> ..unexpecte‚Ä¶

[18:16] * moritz_ opens two TODO niecza bugs

[18:17] <MindosCheng> rakudo: sub CountDown(Int $count) { my Int $v = $count; return sub() { say $v-- } }; my $x = CountDown(3);  $x(); $x(); $x();

[18:17] <p6eval> rakudo 015d77: OUTPUT¬´===SORRY!===‚ê§Unable to parse blockoid, couldn't find final '}' at line 22‚ê§¬ª

[18:18] <MindosCheng> sub CountDown(Int $count) { my Int $v = $count; return -> { say $v-- } }; my $x = CountDown(3);  $x(); $x(); $x();

[18:18] <MindosCheng> rakudo: sub CountDown(Int $count) { my Int $v = $count; return -> { say $v-- } }; my $x = CountDown(3);  $x(); $x(); $x();

[18:18] <p6eval> rakudo 015d77: OUTPUT¬´3‚ê§2‚ê§1‚ê§¬ª

[18:18] <tadzik> does the REPL work for anyone?

[18:19] <moritz_> Method 'stdhandle' not found for invocant of class 'ParrotInterpreter'

[18:19] <tadzik> exactly. Since Parrot from Git

[18:20] <moritz_> stdhandle seemes to have beeen deprecated for a whiel

[18:22] <dalek> roast: 24e01d5 | (Kodi Arfer)++ | S02-builtin_data_types/set.t:

[18:22] <dalek> roast: [set.t] Tests for hyperoperators with non-scalars (should be illegal).

[18:22] <dalek> roast: review: https://github.com/perl6/roast/commit/24e01d5a7b6b0b80f58f3be9fc70eb1a669e2fc4

[18:22] *** dugg joined
[18:23] <masak> REPL works here, but my Parrot is not on Git yet. (thus confirming that the move was what broke it.)

[18:24] <dalek> rakudo: 2f958fd | KodiB++ | src/core/metaops.pm:

[18:24] <dalek> rakudo: [metaops] Forbid set(1, 2) ¬ª+¬´ [3, 4] and set(1, 2) ¬ª+¬´ set(3, 4).

[18:24] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/2f958fd44a1eb1914fc4ab66fef33c69c8ffb9ec

[18:24] <masak> s/confirming/corroborating/

[18:29] *** creat1on joined
[18:29] <creat1on> anyone here

[18:29] <moritz_> no

[18:31] <tadzik> no, this 210 people are just pretending

[18:34] <masak> I'm not here.

[18:34] <jnthn> If a not here masak on irc types, does it make a sound?

[18:35] * masak is the silent type

[18:36] *** tzhs joined
[18:36] <perigrin> jnthn: only if he's not typing on an IBM model M.

[18:37] <perigrin> then yes it's all clackety clakety

[18:37] <masak> perigrin: actually, that's what I usually type on. :)

[18:37] <perigrin> :)

[18:37] <masak> perigrin: but not now, when I'm visiting jnthn++.

[18:37] *** tylercurtis joined
[18:37] <perigrin> I'm from the laptop generation. I hate clackety keyboards ... but I understand others who prefer them.

[18:38] <tadzik> I had a keyboard, few months ago it was >10 years old, my mom couldn't sleep when I was using it

[18:38] <tadzik> OTOH, when I type on a keyboard, people usually ask me if I'm a pianist

[18:39] <masak> tadzik: are you?

[18:39] <tadzik> masak: formally yes. But I haven't practiced for too long, and when I practice now I feel a pity

[18:40] <tadzik> by formally yes I mean I'm after a music school

[18:41] <dalek> 6model: 2ffaaf2 | jonathan++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[18:41] <dalek> 6model: [dotnet] All packages live inside of GLOBAL.

[18:41] <dalek> 6model: review: https://github.com/jnthn/6model/commit/2ffaaf25e4ce9535330545848ea4becda9022e19

[18:41] <dalek> 6model: 811dee7 | jonathan++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[18:41] <dalek> 6model: [dotnet] Fix a bug in code-gen of the constants table.

[18:41] <dalek> 6model: review: https://github.com/jnthn/6model/commit/811dee785c59cd714e1d9afe1687ee1a1d892997

[18:41] <masak> nom &

[18:41] *** masak left
[18:42] <jnthn> nom &

[18:45] *** crythias left
[18:47] *** tri joined
[18:50] *** crythias joined
[18:50] *** Axius joined
[18:53] *** Axius left
[19:03] *** crythias left
[19:06] *** creat1on left
[19:07] <dalek> nqp-rx: 921f3b7 | moritz++ | src/ (2 files):

[19:07] <dalek> nqp-rx: avoid the now-removed stdhandle method

[19:07] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/921f3b7fcddd3e3a839866974d6c09c5e80fca00

[19:07] <dalek> nqp-rx: 8c0b01f | moritz++ | src/stage0/ (4 files):

[19:07] <dalek> nqp-rx: update bootstrap files with stdhandle removal

[19:07] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/8c0b01f19f2b1b001672e41dfa022a7ff0dde8ec

[19:08] *** dukeleto joined
[19:20] *** lichtkind joined
[19:20] *** tzhs left
[19:21] <lichtkind> started http://www.perlfoundation.org/perl6/index.cgi?perl_6_variable_tablet

[19:21] <lichtkind> any comments?

[19:27] <moritz_> &-variables are just as "basic" as the others

[19:32] *** tri left
[19:34] <dalek> nqp-rx: fdbe423 | moritz++ | / (4 files):

[19:34] <dalek> nqp-rx: switch Configure.pl and gen_parrot.pl to git

[19:34] <dalek> nqp-rx: review: https://github.com/perl6/nqp-rx/commit/fdbe4230886c0921eb3b686353d1a0beea7e66e6

[19:37] *** ash_ left
[19:39] * moritz_ fixed the REPL, and nqp-rx

[19:41] <diakopter> nice..

[20:21] *** ChanServ sets mode: +v ilogger2

[20:24] <diakopter> github got erased?

[20:25] <diakopter> http://twitter.com/#search?q=github

[20:26] <diakopter> oh.  http://status.github.com/

[20:49] *** ChanServ sets mode: +v ilogger2

[20:51] <diakopter> masak: just a server-side template engine/api or something that generates javascript to dynamically manipulate the dom & css

[20:51] <diakopter> ?

[20:51] <masak> diakopter: at dinner jnthn and I were discussing both possibilities.

[20:51] <diakopter> o

[20:52] <masak> but those would be things that could be built from having the API.

[20:52] <masak> I imagine just putting together good CSS matching and DOM support might be a sizable task.

[21:00] *** Pontifex joined
[21:01] *** Pontifex left
[21:05] *** tylercurtis joined
[21:05] <sorear> good * #perl6

[21:06] <tylercurtis> Good afternoon (for me), sorear.

[21:09] <dukeleto> tylercurtis: ping! (in #parrot)

[21:17] <masak> good now, sorear.

[21:20] <masak> I have no idea how to reply to this kind of inane attempt at being witty. http://twitter.com/cstar/status/3918132775223297 - defaulting to not replying.

[21:21] <masak> I see it now and again, along with the many-animal book cover, which keeps cropping up and being RT'd once a month or so.

[21:22] <moritz_> @star I tried your alias, but it failed every single file of the Perl 6 spectest suite. Any idea what I'm doing wrong?

[21:22] <moritz_> s/star/cstar/

[21:22] <masak> moritz_: :)

[21:22] * masak tries that

[21:22] <lue> ohayo o/

[21:24] <masak> http://twitter.com/carlmasak/status/3921037745979392

[21:25] <masak> lue: \o

[21:30] * moritz_ just wrote an advent calendar entry about MAIN subs. Will push to the mu repo once it's up again

[21:30] *** ash_ joined
[21:31] <sorear> Why does everyone always panic when github has issues?

[21:31] <lue> .oO(@cstar That alias seems redundant.)

[21:32] <moritz_> sorear: I don't panic at all. I can work offline with git :-)

[21:32] <masak> moritz_: github seems to be back.

[21:32] <moritz_> masak: it doesn't let me in

[21:32] <moritz_> moritz@jacq:~/p6/mu>git push 

[21:32] <moritz_> Permission denied (publickey).

[21:32] <moritz_> fatal: The remote end hung up unexpectedly

[21:33] <masak> moritz_: oh. haven't tried pushing.

[21:33] <lue> same here trying  git pull

[21:33] <moritz_> so, I guess I'll just sleep, and try again tomorrow

[21:34] <masak> moritz_: good night. dream of distributed development.

[21:34] <moritz_> writing an advent post 16 days in advance is a good sign of needing sleep :-)

[21:34] <moritz_> masak: thanks :-)

[21:34] <jnthn> Or preparedness :)

[21:34] <masak> or eagerness :)

[21:34] <moritz_> jnthn: any results from testing Configure.pl --gen-parrot on windows?

[21:35] <jnthn> moritz_: Yes, it was FAIL and then I writed and pushed a patch (before the github fail)

[21:35] <jnthn> And now it works. 

[21:35] <moritz_> \o/

[21:36] <moritz_> we might need to apply the same fix to nqp-rx

[21:36] <masak> train &

[21:37] <moritz_> sleep &

[21:41] <lue> An advent entry sounds fun, but I don't think I know nearly as much as I need to in order to write one :)

[21:58] *** snearch joined
[22:06] *** snearch left
[22:15] <diakopter> I have like 6 commits pending

[22:19] <diakopter> you'll like the Makefile changes I hope

[22:19] <diakopter> you==jnthn

[22:19] <jnthn> oh, yay

[22:19] <diakopter> and hopefully mberends

[22:19] <jnthn> I'd been procrastinating that yak. :)

[22:20] <jnthn> It needed improving badly though. :)

[22:20] <diakopter> I don't think my changes are *that* dramatic

[22:20] <jnthn> diakopter: Well, it was more small things that'll be a big help.

[22:21] <diakopter> just makes it easier to 1. make a change in a .cs file then 2. try ..\..\t\nqp\some-test.t  and it just works

[22:21] <jnthn> \o/

[22:21] <jnthn> That's nice.

[22:21] <jnthn> Does a fresh checkout + make work now?

[22:21] <diakopter> yeah

[22:22] <diakopter> well

[22:22] <diakopter> I don't see how it couldn't

[22:22] <diakopter> I'll try it

[22:22] <diakopter> but... I have everything committed

[22:22] <diakopter> so, I can definitively answer, yes.

[22:23] <diakopter> so once my commits get pushed....

[22:24] <jnthn> :-)

[22:24] <diakopter> I mean, there are prereqs, like having csc, msbuild, and nmake in the path

[22:24] <jnthn> *nod*

[22:24] <jnthn> But sounds like you fixed the usual tripping up point.

[22:25] <jnthn> (needed to manually copy the DLLs, or run try rather than make to actually get it to really build)

[22:25] <diakopter> right

[22:29] *** masonkramer joined
[22:34] *** tylercurtis left
[22:42] <lue> How can I look at the private variable of a class? [not modify it, just see what it is]

[22:45] <lue> rakudo: class A { has $!b; }; my A $a .= new(b => 3); say $a.b

[22:45] <p6eval> rakudo 015d77: OUTPUT¬´Method 'b' not found for invocant of class 'A'‚ê§  in main program body at line 22:/tmp/AgHunP5i7G‚ê§¬ª

[22:45] *** envi joined
[22:50] <sorear> niecza: class A { has $!b }; my $a = A.RAWCREATE(b => 3); say $a!A::b

[22:50] <p6eval> niecza c49e20c: OUTPUT¬´(timeout)¬ª

[22:50] <sorear> niecza: class A { has $!b }; my $a = A.RAWCREATE("b", 3); say $a!A::b

[22:50] <p6eval> niecza c49e20c: OUTPUT¬´(timeout)¬ª

[22:50] <sorear> I should probably kill RAWCREATE soon

[22:50] <sorear> hrm.

[22:57] *** tylercurtis joined
[23:03] *** envi left
[23:09] <jnthn> night, #perl6

[23:11] *** envi joined
[23:12] <colomon> \o

[23:18] <diakopter> git restored?

[23:19] <colomon> er, what?

[23:19] <diakopter> github is back, I meant

[23:19] <diakopter> or so they say.

[23:19] <colomon> it was gone?

[23:20] <diakopter> yeah; see its status page :)

[23:21] <dalek> 6model: 817c94f | diakopter++ | dotnet/compiler/ (2 files):

[23:21] <dalek> 6model: [dotnet] make try.bat and Makefile more robust to support:

[23:21] <dalek> 6model: nmake clean ; nmake test

[23:21] <dalek> 6model: without needing Visual Studio open.

[23:21] <dalek> 6model: mono users need only to alias msbuild to xbuild, I think.

[23:21] <dalek> 6model: review: https://github.com/jnthn/6model/commit/817c94fb65a71177088f4909ee22a4bf8536bdd8

[23:21] <dalek> 6model: d045159 | diakopter++ | dotnet/runtime/Runtime/Context.cs:

[23:21] <dalek> 6model: [dotnet] spello in Context.cs

[23:21] <dalek> 6model: review: https://github.com/jnthn/6model/commit/d045159077c1f359d8d46ab14799082663c70e99

[23:21] <dalek> 6model: bd53479 | diakopter++ | dotnet/compiler/ (2 files):

[23:21] <dalek> 6model: [dotnet] more Makefile changes

[23:21] <dalek> 6model: review: https://github.com/jnthn/6model/commit/bd53479e46518861f38b770abbe273cabb9ca086

[23:21] <dalek> 6model: 9eb0c55 | diakopter++ | dotnet/ (3 files):

[23:21] <dalek> 6model: [dotnet] begin implementation of default parameter expressions

[23:21] <dalek> 6model: review: https://github.com/jnthn/6model/commit/9eb0c55d269b08b95af7bf7b0d978e59a5395dc4

[23:21] <dalek> 6model: f5cd961 | diakopter++ | / (2 files):

[23:21] <dalek> 6model: [dotnet] implement bitwise operators for infix NQPInt... can make coercive and multi ones later...

[23:21] <dalek> 6model: review: https://github.com/jnthn/6model/commit/f5cd961ba5d4139a1cc46f8f18ffb61034393cda

[23:21] <dalek> 6model: a89014a | diakopter++ | t/nqp/13-op.t:

[23:21] <dalek> 6model: [dotnet] uncomment lots of tests (the rest, in fact) in 13-op.t that it now passes

[23:21] <dalek> 6model: review: https://github.com/jnthn/6model/commit/a89014af95ea053957b238f1ebd9b4ce7b34535f

[23:21] <dalek> 6model: 74de67d | diakopter++ | dotnet/runtime/Runtime/Ops/Primitive.cs:

[23:21] <dalek> 6model: [dotnet] implement bitwise operators in the runtime for Nums (doubles), but they're not really that useful.

[23:21] <dalek> 6model: review: https://github.com/jnthn/6model/commit/74de67dfa37320e4fe238ac183861c10165a0ad9

[23:21] <dalek> 6model: 6f59a42 | diakopter++ | dotnet/ (3 files):

[23:21] <dalek> 6model: [dotnet] still more Makefile fixes

[23:21] <dalek> 6model: review: https://github.com/jnthn/6model/commit/6f59a42ae2d52e9d5b53b0ccf4944ef40973fa79

[23:21] <BinGOs> I appear to have er ...

[23:21] <BinGOs> git access to github.

[23:21] <lue> why does this line fail?:  $.contents ~= $string;  This line is inside a method of a class. $.contents is marked as rw.

[23:23] <colomon> does $!contents ~= $string work?

[23:25] <lue> Ah, that may be what I need (trying...)

[23:25] <dalek> 6model: 3e62209 | diakopter++ | dotnet/ (2 files):

[23:25] <dalek> 6model: [dotnet] more implementation of default parameter expressions. things work as long as they don't reference lexicals in the immediate outer scope.

[23:25] <dalek> 6model: review: https://github.com/jnthn/6model/commit/3e6220954b1f915a0a874d067537e6b2f1ef6799

[23:26] <diakopter> github web ui seems a lot speedier. maybe a db restart did it some good. :)

[23:26] <lue> hooray, that works!

[23:27] * diakopter goes to look at the LHF and ROADMAP

[23:30] *** risou joined
[23:40] <dalek> niecza: e7e680b | sorear++ | lib/JSYNC.cs:

[23:40] <dalek> niecza: Fix dot-stuffing of tags

[23:40] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e7e680bc80c5f0a820f39e7cb99b0f735bb56877

[23:40] <dalek> niecza: a174eb9 | sorear++ | / (4 files):

[23:40] <dalek> niecza: Start on a JSYNC test suite

[23:40] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a174eb98e88eb875a425ed90259276b782c211e9

[23:40] *** jrockway joined
[23:48] *** jrockway left
[23:49] *** jrockway joined
[23:51] <dukeleto> sorear++ # jsyncing

[23:54] <MindosCheng> rakudo:  my $x = -> { my Int $c=10; return { say $c‚Äî } }(); $x(); $x(); 

[23:54] <p6eval> rakudo 015d77: OUTPUT¬´===SORRY!===‚ê§Unable to parse blockoid, couldn't find final '}' at line 22‚ê§¬ª

[23:55] <MindosCheng> I Can't figure out‚Ä¶

