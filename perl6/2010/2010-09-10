[00:03] <dalek> nqp-rx: 7188f73 | pmichaud++ | src/NQP/ (2 files):

[00:03] <dalek> nqp-rx: Initial version of trait_mod:is and "is pirflags" trait for subs.

[00:03] <dalek> nqp-rx: review: http://github.com/perl6/nqp-rx/commit/7188f73601c673c950b5f20f484e12928cfcdbd7

[00:03] <dalek> nqp-rx: f3dabb7 | pmichaud++ | src/NQP/ (2 files):

[00:03] <dalek> nqp-rx: Add traits to method definitions.

[00:03] <dalek> nqp-rx: review: http://github.com/perl6/nqp-rx/commit/f3dabb701a266333e448ed2307f482ed7314e373

[00:03] <dalek> nqp-rx: 95acd86 | pmichaud++ | t/nqp/52-vtable.t:

[00:03] <dalek> nqp-rx: Add tests for "is pirflags<:vtable(...)>".

[00:03] <dalek> nqp-rx: review: http://github.com/perl6/nqp-rx/commit/95acd86bffd22fecd55ac4f6bb5c8e6ab1553720

[00:03] <dalek> nqp-rx: e528a3d | pmichaud++ | t/nqp/52-vtable.t:

[00:03] <dalek> nqp-rx: Oops.  Failing to plan() is like planning to fail().

[00:03] <dalek> nqp-rx: review: http://github.com/perl6/nqp-rx/commit/e528a3d0d0529d801a078f8e98d4ac725ff2f036

[00:03] <sorear> hello pmichaud

[00:12] <dalek> niecza: d8c7d65 | sorear++ | lib/Kernel.cs:

[00:12] <dalek> niecza: Add a hook to profile name lookups

[00:12] <dalek> niecza: review: http://github.com/sorear/niecza/commit/d8c7d6565fca601c9a553baec7fc5f58b1054678

[00:12] <dalek> niecza: e893836 | sorear++ | / (5 files):

[00:12] <dalek> niecza: Tidy up MOP a bit

[00:12] <dalek> niecza: review: http://github.com/sorear/niecza/commit/e893836a1c42b9f59b92ccffe82739e0814b4c81

[00:20] *** kcwu joined
[00:24] *** Chillance left
[00:26] *** kcwu left
[00:26] *** kcwu joined
[00:31] <dalek> niecza: 63628e6 | sorear++ | lib/ (4 files):

[00:31] <dalek> niecza: Generate slot mappings at compose time

[00:31] <dalek> niecza: review: http://github.com/sorear/niecza/commit/63628e6c029da1beed44936dda1d04c4a19bbd7b

[00:33] *** jhuni joined
[00:33] <sorear> interesting; going from the 60k to 600k test file made memory use out of control

[00:38] *** redicaps joined
[00:39] *** whiteknight left
[00:52] *** [Coke] left
[00:54] <diakopter> std: my $a = return 4

[00:54] <p6eval> std 32123: OUTPUT«ok 00:01 118m␤»

[01:01] *** mfollett joined
[01:02] *** QinGW joined
[01:07] *** tylercurtis left
[01:18] *** TomDLux joined
[01:20] <mfollett> the latest revision of master doesn't compile for me.

[01:22] *** perigrin left
[01:22] *** perigrin joined
[01:23] <diakopter> does anyone have a graph [any kind/arrangement/projection] of the Perl 6 type system

[01:24] *** [Coke] joined
[01:25] *** TomDLux left
[01:33] *** BinGOs left
[01:33] *** BinGOs joined
[01:36] <dalek> nqp-rx: 129c25b | pmichaud++ | examples/json.nqp:

[01:36] <dalek> nqp-rx: Add json.nqp, an example of a JSON compiler written entirely in NQP.

[01:36] <dalek> nqp-rx: review: http://github.com/perl6/nqp-rx/commit/129c25b48e4dbb8c9fe355ce8f8a578be067f3d3

[01:36] *** yrgd left
[01:39] *** perigrin left
[01:39] *** TomDLux joined
[01:39] *** perigrin joined
[01:41] *** TomDLux left
[01:44] *** TomDLux joined
[01:45] <TomDLux> rakudo: my $set is KeySet; $set{$_}++ for 1..5; $set{$_}-- for 2..4; say $set.keys

[01:45] <p6eval> rakudo 859f2d: OUTPUT«No applicable candidates found to dispatch to for 'trait_mod:<is>'. Available candidates are:␤:(Mu $child, Role $r)␤:(Routine $r, Any :default($default)!)␤:(Code $block, Any $arg?, Any :export($export)!)␤:(Mu $child, Mu $parent)␤:(Mu $type where ({ ... }), Any :rw($rw)!)␤:(Mu

[01:45] <p6eval> ..$type…

[01:46] <TomDLux> rakudo: my %set is KeySet; %set{$_}++ for 1..5; %set{$_}-- for 2..4; say %set.keys

[01:46] <p6eval> rakudo 859f2d: OUTPUT«No applicable candidates found to dispatch to for 'trait_mod:<is>'. Available candidates are:␤:(Mu $child, Role $r)␤:(Routine $r, Any :default($default)!)␤:(Code $block, Any $arg?, Any :export($export)!)␤:(Mu $child, Mu $parent)␤:(Mu $type where ({ ... }), Any :rw($rw)!)␤:(Mu

[01:46] <p6eval> ..$type…

[01:50] *** BinGOs left
[01:50] *** BinGOs joined
[01:55] <TomDLux> I thought "is KeySet" was working, but I'm finding keys remain in existence even when they are set to false .. and p6eval totally barfs on 'is KeySet'

[01:55] *** perigrin left
[01:55] *** perigrin joined
[01:57] *** TomDLux left
[01:59] *** xinming left
[01:59] *** am0c^ left
[01:59] *** xinming joined
[02:01] *** plainhao left
[02:03] *** BinGOs left
[02:04] *** BinGOs joined
[02:07] *** am0c^ joined
[02:24] *** mfollett left
[02:38] *** [Coke] left
[02:39] *** meppl joined
[02:44] *** Schwern joined
[02:52] *** justatheory left
[03:07] *** \xF0 joined
[03:16] *** mfollett joined
[03:25] *** lichtkind joined
[03:27] <lichtkind> had pugs a MOP ?

[03:30] <mfollett> Is there a known good revision of proto that someone would recommend?

[03:35] *** meppel joined
[03:36] *** redicaps left
[03:37] <dukeleto> lichtkind: what do you mean?

[03:37] <dukeleto> lichtkind: there is something called SMOP, http://www.perlfoundation.org/perl6/index.cgi?smop

[03:37] <lichtkind> i know

[03:38] <lichtkind> i mean if pugs had implemented a meta object protocoll

[03:38] <lichtkind> to do its OOP stuff

[03:38] <lichtkind> SMOP has definetivly a MOP

[03:39] <lichtkind> but that was developed largly independet of CLASS::MOP

[03:39] *** meppl left
[03:39] <dukeleto> lichtkind: yep

[03:41] *** meppel is now known as meppl

[03:43] *** tylercurtis joined
[03:48] <dukeleto> perl6: say @_[0].WHAT

[03:48] <p6eval> rakudo 859f2d: OUTPUT«Null PMC access in can()␤  in main program body at line 1␤»

[03:48] <p6eval> ..pugs: OUTPUT«Scalar␤»

[03:48] <dukeleto> does that rakudobug exist already ?

[04:11] <Util_> http://rosettacode.org/wiki/Reduced_row_echelon_form - Outstanding bugs fixed to existing Perl 6 solution, and 2 new math-based solutions added; procedural and OO.

[04:12] *** QinGW1 joined
[04:13] *** QinGW left
[04:21] *** hatseflats left
[04:22] *** PerlJam left
[04:22] *** dukeleto left
[04:22] *** Juerd left
[04:32] *** lichtkind left
[04:33] *** PerlJam joined
[04:34] *** gfx joined
[04:34] *** hatseflats joined
[04:34] *** dukeleto joined
[04:42] <mfollett> Am I doing something seriously wrong or does the HEAD of proto and the version of proto shipped with Rakudo * 2010-08 both not successfully install modules?  I suspect I'm doing something wrong.

[04:59] *** hlatapie joined
[05:00] *** hlatapie left
[05:02] *** baest joined
[05:06] <sorear> good * #perl6

[05:06] <sorear> mfollett: I suspect the module you're trying to install is an alpha-only module

[05:07] * sorear has figured out niecza's grammar memory problem o/

[05:11] *** gfx left
[05:13] *** sftp left
[05:18] *** masak joined
[05:18] <masak> oh hai, #perl6!

[05:18] <sorear> hello masak

[05:20] * sorear entertains thoughts of butchering druids

[05:20] *** LionMadeOfLions joined
[05:21] <masak> butchering druids?

[05:22] <sorear> yeah, i think a standalone Druid.exe would make a nice niecza showpiece

[05:22] <masak> indeed.

[05:22] *** justatheory joined
[05:23] <masak> at the point you have all the functionality required to run Druid, I will seriously consider switching to niecza for many of my everyday tasks.

[05:23] *** Juerd joined
[05:24] <sorear> unmodified? :)

[05:24] <mfollett> sorear:  It appears to be a combination of me doing it wrong and what might be a bug, or me doing it even more wrong.  It appears I need a projects.list and a projects.cache in my working directory.

[05:25] <mfollett> As for what I was doing wrong, it turns out I had misconfigured my proto.conf.

[05:25] <masak> sorear: 'unmodified' is unfortunately too idealistic right now, even on the Druid end.

[05:25] <masak> sorear: the only working branch only works on alpha.

[05:38] *** justatheory left
[05:43] *** mfollett left
[05:43] *** kaare joined
[05:44] *** kaare is now known as Guest24003

[05:48] *** Zapelius joined
[05:52] *** mfollett joined
[05:53] <pmichaud> what's missing for Druid to run in rakudo star, ooc?

[05:54] *** Guest24003 is now known as kaare_

[05:58] * tylercurtis has managed to forget his feather password within an hour of setting it.

[06:03] *** lue left
[06:03] *** lue joined
[06:05] <sorear> tylercurtis: msg me a new one

[06:08] *** uniejo joined
[06:09] <masak> pmichaud: Druid used a fair number of alpha-specific regex features. in particular, I had separated out a number of bare rules into a base class. those call each other and return a neat little $/ tree of results. that doesn't work at all on Rakudo master.

[06:11] <masak> specifically, there's no way for bare rules to call each other. and it's not possible to mimic the old structure, because nested keys aren't implemented.

[06:11] <sorear> "bare rules"?

[06:11] <masak> rules outside of grammars.

[06:12] <sorear> if that ever worked, it was a bug

[06:12] <masak> you need my/our before them nowadays. then it works.

[06:12] <sorear> "has" rules

[06:12] <masak> but they still can't call each other.

[06:12] <sorear> need to be in a subclass of Cursor

[06:13] <masak> I know, I know.

[06:13] <sorear> Why can't they call each other?

[06:13] <masak> because something is not implemented, I guess.

[06:13] <sorear> How are you trying to call them?

[06:14] *** foodoo joined
[06:14] <sorear> And why are they in a base class?

[06:14] *** wtw joined
[06:14] <pmichaud> masak: are they in a source file where I could see them, ooc?

[06:14] <masak> pmichaud: the old ones?

[06:14] * sorear considers inheritance harmful in almost all cases

[06:14] <masak> sorear: trying to call them from each other.

[06:14] <masak> sorear: thanks for the advice.

[06:14] <sorear> masak: but how

[06:15] * masak fetches the source URL

[06:15] <sorear> wait, I have a druid master checkout

[06:15] <masak> http://github.com/masak/druid/blob/master/lib/Druid/Base.pm

[06:16] <masak> uuuh, that's not right. those changes should be restricted to the ng-compat branch.

[06:16] <pmichaud> why can't that easily become a grammar instead of a class?  Or are there other connections?

[06:17] <masak> pmichaud: I don't know, I haven't re-thunk the design yet.

[06:17] <pmichaud> masak: okay.

[06:19] <masak> hm, false alarm. that's the latest Druid-for-alpha code.

[06:19] <pmichaud> okay.

[06:19] <masak> phew.

[06:20] <masak> right. observe lines 5-7. those are bare regexes *without* my/our. that's illegal now. but note especially line 7. it calls the regexes on lines 5 and 6. that doesn't work on Rakudo master.

[06:21] <masak> oh, and consequently the similar calls on lines 9-10 don't work either.

[06:21] <pmichaud> it would probably work fine if we s/class/grammar/,

[06:21] <pmichaud> getting 9-10 to work will be... challenging, yes.

[06:21] <masak> ok.

[06:21] <pmichaud> probably need to switch some of them to &coords

[06:21] <masak> I can do s/class/grammar/, that seems feasible.

[06:22] *** stepnem left
[06:22] <masak> pmichaud: will &coords still create a $<coords> entry?

[06:22] <pmichaud> <coords=&coords>

[06:22] <masak> ok.

[06:23] <pmichaud> and declare the regexes as 'our', then.

[06:23] <pmichaud> (so they appear in the namespace)

[06:24] <sorear> My 2¢ is to change Druid::Base to module Druid::Common and export my regexes

[06:24] <sorear> I'll look into this while beating it into working on niecza

[06:25] <pmichaud> back tomorrow -- gotta run out to the store for some milk

[06:25] <masak> nice! http://twitter.com/meraxes/status/24040386254

[06:25] *** Zapelius left
[06:25] *** mfollett left
[06:25] <masak> I'll look into making Druid work again on master.

[06:25] <masak> maybe even this weekend.

[06:25] <pmichaud> masak++

[06:25] <pmichaud> let me know if you need anything :)

[06:26] *** Zapelius joined
[06:26] <pmichaud> I'm slowly working on the backlog of bugs

[06:27] * masak is slowly adding new ones :)

[06:27] *** stepnem joined
[06:28] <tylercurtis> Does &.foo impose a context?

[06:40] <sorear> &.foo hasn't been defined

[06:41] <sorear> ditto &$foo

[06:42] <masak> how realistic is a perl5-to-perl6 converter nowadays? would it be a selling point for Perl 5 people who hesitate about learning Perl 6?

[06:42] *** cotto left
[06:42] *** cotto joined
[06:44] <jnthn> morning, #perl6

[06:44] <pmichaud> jnthn: /o

[06:44] <pmichaud> er,  o/

[06:44] <tylercurtis> Morning, jnthn.

[06:44] <pmichaud> (I'm tired, so my arm drooped :)

[06:44] <jnthn> Well, I do sometimes cause people to scratch their head... :-)

[06:45] <pmichaud> and I still need to get to the store but I'm too busy bisecting for a parrot bug

[06:45] <jnthn> ugh

[06:45] <jnthn> Which bug/

[06:45] <pmichaud> this one is interesting

[06:45] <masak> phenny: tell moritz_ s/whom can inherit/who can inherit/. when in doubt, use 'who', not 'whom'.

[06:45] <phenny> masak: I'll pass that on when moritz_ is around.

[06:46] <pmichaud> it appears that in recent versions of Parrot, it selects the String PMC .trans method even for Rakudo Str objects

[06:46] <masak> huh

[06:46] <jnthn> ugh

[06:46] <pmichaud> just a sec and I can paste :)

[06:46] <jnthn> Well, I can only offer than in a couple more months we won't be using the String PMC... :-)

[06:47] <pmichaud> oh?

[06:47] <jnthn> Doesn't make much sense.

[06:47] <jnthn> Same for Integer PMC

[06:47] <pmichaud> we'll have our own PMC types, then?

[06:47] <jnthn> We'll have a repr for the native types

[06:47] <jnthn> (I think.)

[06:48] <pmichaud> > my $x = 'a'; say PARROT($x); $x.trans('a' => 'b');

[06:48] <pmichaud> Perl6Scalar->Str

[06:48] <pmichaud> too few positional arguments: 2 passed, 3 (or more) expected

[06:48] <pmichaud> Yes, $x *is a Str*

[06:48] <jnthn> :S

[06:48] <pmichaud> I'm wondering if a method cache is being lost somewhere.

[06:48] *** Schwern left
[06:48] <jnthn> Possibly.

[06:48] <pmichaud> I also thought it might be that $x isn't p6opaque... but I manually added in p6opaqueness and that didn't seem to change anything.

[06:49] <jnthn> Well, that'd change the dispatcher that is used.

[06:50] <pmichaud> anyway, I have a good commit and a bad commit, so it's time to bisect :)

[06:51] <jnthn> Yes, hopefully that gives the answer. :-)

[06:51] <pmichaud> I went through it once and it didn't seem to work, so I'm trying again.

[06:51] <pmichaud> I might've missed a step or put in a bad message

[06:52] <pmichaud> s/message/result/

[06:52] <sorear> masak: 5to6 now is a very interesting problem.  ingy probably has some ideas, 5to6 is going to face a lot of the same issues as c'dent

[06:52] <masak> sorear: oh, indeed. I haven't considered that.

[06:52] <masak> sorear: I've looked at it from the viewpoint of TimToady's STD5 module.

[06:54] <sorear> B or PPI are probably more solid foundations for a standalone conversion tool (as opposed to lexical use v5;)

[06:55] * sorear wonders how hard it would be to put together B::JSON

[06:57] <jnthn> Wow, mberends++ made a nice ASCII art dependency diagram for 6model :-)

[07:03] <moritz_> good morning

[07:03] <phenny> moritz_: 06:45Z <masak> tell moritz_ s/whom can inherit/who can inherit/. when in doubt, use 'who', not 'whom'.

[07:04] <masak> good mo', mo'

[07:04] <jnthn> Or just never use whom.

[07:04] <jnthn> It's dying.

[07:04] * masak .oO( 6model has an ASCII art dependency? )

[07:05] <jnthn> masak: :P

[07:05] <masak> jnthn: I just love the accusative in all its forms. but I agree, 'whom' is dying.

[07:05] <jnthn> Netcraft confirms it.

[07:05] <moritz_> well, German has accusative too, and I don't see why I shouldn't use it in the general case

[07:06] <masak> moritz_: since German has the accusitve, I'm especially surprised that you chose to use it on the subject of a phrase.

[07:07] <masak> s/it/'whom'/

[07:10] <masak> see also http://languagelog.ldc.upenn.edu/nll/?p=1353 :)

[07:13] <jnthn> om nom nom chokladbollar

[07:14] <jnthn> .oO( not a typical breakfast food... )

[07:15] <masak> :)

[07:16] <dukeleto> perl6: Failure + 2

[07:16] <p6eval> pugs: OUTPUT«*** No such subroutine: "&Failure"␤    at /tmp/ZjIT54jrwf line 1, column 1 - line 2, column 1␤»

[07:16] <p6eval> ..rakudo 859f2d: OUTPUT«Method 'Bridge' not found for invocant of class ''␤  in 'infix:<+>' at line 3515:CORE.setting␤  in main program body at line 22:/tmp/kEuSouVayG␤»

[07:16] <dukeleto> is that a known rakudobug?

[07:18] <sorear> it's known LTA

[07:19] <sorear> it is, afaict, correct

[07:19] <sorear> but colomon++ would be the one to know

[07:22] <dukeleto> LTA?

[07:22] <jnthn> Less Than Wesome

[07:22] <jnthn> *Awesome

[07:23] * dukeleto is enlightened

[07:24] <dukeleto> i would expect a Failure who hasn't had .Bool or .defined on it to trigger an exception, but perhaps + triggers a .defined check?

[07:25] <pmichaud> we still have some issues with the Failure implementation

[07:25] <pmichaud> but I'm not sure how the type object should behave in this case.  Probably like any other type object, though.

[07:25] <dukeleto> i am noticing a bunch of spectests fail on rakudo master. is this expected?

[07:26] <dukeleto> perl6: ~Failure

[07:26] <p6eval> rakudo 859f2d:  ( no output )

[07:26] <p6eval> ..pugs: OUTPUT«*** No such subroutine: "&Failure"␤    at /tmp/UE7qihWVDH line 1, column 1 - line 2, column 1␤»

[07:26] <pmichaud> dukeleto: what revision of parrot are you using?

[07:26] <dukeleto> pmichaud: i used --gen-parrot

[07:26] <masak> pmichaud: do you perchance recall the etymology of "strangely consistent"? because that's the name of my new blog.

[07:27] <pmichaud> dukeleto: say $*VM<config><revision>

[07:27] <dukeleto> pmichaud: 48768

[07:28] *** au|irc_ left
[07:28] *** au|irc joined
[07:28] *** Eevee left
[07:28] *** Eevee joined
[07:30] <pmichaud> dukeleto: I don't know then.  It should be passing spectests at that revision.

[07:30] <pmichaud> masak: I don't recall, but I'm looking through the #perl6 logs 

[07:31] <masak> pmichaud: I did that yesterday. found no real clues that way.

[07:31] <masak> pmichaud: here's what I remember. it was at YAPC::EU 2009, in the big assembly hall, on the Tuesday.

[07:31] <pmichaud> first irc log reference I can find is http://irclog.perlgeek.de/perl6/2009-03-31#i_1030097

[07:31] <masak> pmichaud: either you coined the phrase, or I did.

[07:32] <masak> pmichaud: yes, I found that one too. I'm not sure if that reference counts. it looks too innocent.

[07:32] <pmichaud> agreed

[07:32] <masak> only after YAPC::EU is the phrase used with intent.

[07:32] <pmichaud> anyway, istr it was at yapc::eu, and I remember you being taken with the phrase.  I don't remember the context in which it arose.

[07:32] <masak> I liked it well enough to include it in the Web talk on the Wednesday.

[07:33] *** envi^home joined
[07:33] <pmichaud> I'm wondering if it came out of the Rakudo BOF

[07:33] <pmichaud> (which was on Tue, iirc)

[07:33] <masak> no, it was before that on the Tuesday.

[07:33] <pmichaud> hmmm

[07:33] <masak> the BOF wasn't in the assembly hall.

[07:33] <pmichaud> well, my memory is toast :)

[07:33] <masak> no worried. just thought I'd ask.

[07:33] <pmichaud> anyway, whatever story you come up with I'm likely to agree with :)

[07:34] <masak> I think you came up with the phrase, and I liked it. :)

[07:34] <pmichaud> That would be indeed strangely consistent.  :)

[07:34] <masak> today's autopun, brought to you by pmichaud. :)

[07:35] *** jferrero joined
[07:35] * masak .oO( when you execute an autopun with a deadpan expression, is it called an "autopan"? or a "deadpun expression"? )

[07:37] <moritz_> masak: (re accusative) I attribute it to my sleepiness

[07:38] <moritz_> masak: and I agree it's a misuse (and corrected it)

[07:38] *** brxue joined
[07:38] <masak> moritz_: goodie. I liked the post, by the way.

[07:39] <dukeleto> pmichaud: i am going to rm -rf my parrot_install dir and do a realclean, i think i forgot that.

[07:40] <sorear> how not to allocate a bitfield: new int[bitCount]

[07:42] <dukeleto> should #?pugs lines exist in perl6/roast.git ?

[07:42] *** cottoo joined
[07:42] *** cotto left
[07:42] <sorear> yes

[07:42] <sorear> they're just fudges

[07:42] <sorear> pugs is an implementation too

[07:44] *** kjeldahl joined
[07:44] <dalek> niecza: 368485d | sorear++ | lib/Cursor.cs:

[07:44] <dalek> niecza: Store backtrack frames in a single object each

[07:44] <dalek> niecza: review: http://github.com/sorear/niecza/commit/368485d8374fa166ac6acf87890e8a73f4e8a06c

[07:44] <dalek> niecza: 940874c | sorear++ | lib/Cursor.cs:

[07:44] <dalek> niecza: Fix LexerState stupidly using 32x correct memory

[07:44] <dalek> niecza: review: http://github.com/sorear/niecza/commit/940874c2ee309a69355818e9f0cc4227b43b5127

[07:48] <dukeleto> sorear: of course, just wondering

[07:55] *** meppl left
[07:56] <moritz_> masak: glad you liked it. Do you agree? or do you still want protected in p6?

[07:56] <moritz_> dukeleto: I usually leave the #?pugs lines, but I don't make much effort to maintain them

[07:57] <dukeleto> perl6: say /42/.perl

[07:57] <masak> sorear: [backlog] Druid uses type constraints all over the place. but usually things work without the type checks they represent.

[07:57] <p6eval> pugs: OUTPUT«{regex}␤»

[07:57] <p6eval> ..rakudo 859f2d: OUTPUT«{ ... }␤»

[07:57] <dukeleto> seems like Regex objects don't know how to do .perl in Rakudo

[07:57] <masak> moritz_: I'm not sure I ever wanted 'protected' in p6. my colleague asked about it once, and that's when I started a p6l thread about it.

[07:57] <TimToady> here's my entry for intentional FP-style obfuscation: see 2nd part of http://rosettacode.org/wiki/Constrained_Random_Points_on_a_Circle#Perl_6

[08:01] <dukeleto> TimToady: that is pretty awesome

[08:02] <TimToady> that's probably about as close as we get to APL

[08:03] <TimToady> at least in terms of reading everything right-to-left

[08:04] <TimToady> funny thing is, I can grok any one bit of it as long as I don't look at the rest of it at the same time.  :)

[08:04] <huf> what's the dot in  ~.map ? :)

[08:04] <TimToady> "unary dot"

[08:04] <TimToady> means ~ $_.map

[08:05] <huf> oh!

[08:05] <TimToady> .oO(behold the power of this fully functional Death Star)

[08:06] <TimToady> it only *look*s half constructed...

[08:06] <pmichaud> "You may fire at will, Commander."

[08:06] <pmichaud> (I always wonder if that's "will" or "Will"  :)

[08:07] <TimToady> I think where there is a Will, he is away.

[08:07] *** dalek left
[08:08] <pmichaud> I notice there's no "Works with Rakudo XXX" line there... is that because it doesn't?  ;-)

[08:08] <TimToady> it works with HEAD, at least

[08:09] <TimToady> at least, as of last time I compiled it

[08:09] *** dalek joined
[08:09] *** ChanServ sets mode: +v dalek

[08:10] <TimToady> but for a pleasant change, I don't recall having to work around any bugs this time

[08:10] *** azert0x joined
[08:10] <huf> hmm, i think i have a rough understanding of that snippet

[08:10] <huf> but i dont know the word for how awesome it is :)

[08:11] <TimToady> negatives don't go that low, eh?  :)

[08:11] <huf> hey! you're not supposed to be pessimistic

[08:11] <TimToady> it really was generated via step-by-step transformation from the previous example

[08:12] <huf> you're saying this isnt code we should see in production?

[08:12] <masak> TimToady: that's the most Haskell-like Perl 6 code I've ever seen. kudos.

[08:12] <TimToady> depends on how many people you work with that have IQs of 220

[08:12] <huf> but... a haskell programmer can write haskell in any language ;)

[08:13] <TimToady> I was particularly happy about using given to define a variable declared in the first clause :)

[08:14] <TimToady> sort of a cargo-culted Haskell 'where'

[08:14] <masak> aye. never seen that idiom before.

[08:14] <masak> this rosetta code thing is a gold mine. :)

[08:14] <masak> TimToady++

[08:17] <TimToady> I think I'd better go to bed before I do any more damage to the credibility of Perl 6...

[08:18] <TimToady> or perhaps it's crudability now

[08:18] <moritz_> sleep well TimToady++

[08:18] <TimToady> zzz &

[08:19] *** Schwern joined
[08:20] <masak> dream of cargo-culted Haskell idioms. :)

[08:21] *** icwiener left
[08:29] <pmichaud> 08:10 <TimToady> but for a pleasant change, I don't recall having to work around any bugs this time

[08:29] <pmichaud> that sounds like a good milestone.  :)

[08:30] <sorear> parse 60kb of JSON -> 2.95 seconds

[08:30] <sorear> parse 600kb -> OOM

[08:30] <sorear> *something* is not right here

[08:30] <pmichaud> makes me glad that I fixed statement_modifier:<for>  :)

[08:32] <sorear> ?

[08:32] <pmichaud> (for TimToady's code)

[08:32] *** orafu left
[08:33] *** orafu joined
[08:37] *** drbean left
[08:38] <sorear> interesting, mono is 50% faster with --gc=sgen

[08:41] <tylercurtis> Good night, #perl6.

[08:42] *** Alias_ joined
[08:44] *** Alias left
[08:45] <smash> mornin' everyone

[08:46] <dalek> niecza: a10d7a2 | sorear++ | lib/Kernel.cs:

[08:46] <dalek> niecza: Elide containers for readonly Variables

[08:46] <dalek> niecza: review: http://github.com/sorear/niecza/commit/a10d7a241eb6b90726f37cf5cc2487754cab9519

[08:46] <dalek> niecza: d076f11 | sorear++ | src/ (2 files):

[08:46] <dalek> niecza: Create array descriptors in regexes once

[08:46] <dalek> niecza: review: http://github.com/sorear/niecza/commit/d076f1190437d469c0760e6dbe7269c1fabbe3b1

[08:47] *** drbean joined
[08:49] <smash> http://gil.di.uminho.pt/users/smash/rakudo-bench.html updated

[08:49] *** tylercurtis left
[08:51] *** thebird joined
[08:51] <sorear> is: self := 5; reasonable?

[08:52] <sorear> you can rebind any explicit parameter

[08:52] <moritz_> I'm pretty sure self has a type constraint

[08:53] *** timbunce joined
[08:53] *** JimmyZ joined
[08:55] *** am0c^ left
[08:56] *** JimmyZ_ joined
[08:58] *** dakkar joined
[08:58] *** JimmyZ left
[08:58] *** JimmyZ_ is now known as JimmyZ

[09:01] *** drbean left
[09:03] *** drbean joined
[09:04] <masak> two OSDC.fr talks submitted: "Hard core bug reporting" and "Perl 6: there's some madness to the method after all"

[09:08] *** cjk101010 joined
[09:17] <smash> cleaned up List::Utils.transpose a bit (http://github.com/colomon/List-Utils/commit/4878de0a0b1102687bd76a5a96e8db8a3721e0fa#diff-1) more suggestions welcome

[09:18] <huf> i find people have really odd misconceptions about readability

[09:18] <huf> someone smarter than me could make a good blogpost out of this

[09:19] <masak> here's a "shot on sight" opinion that I don't understand: http://twitter.com/erez/status/24090023075

[09:19] <pmichaud> I found the bug in parrot trunk that is causing Str.trans to fail.... will fix it after sleep though.

[09:20] <sorear> I think readability is partly not a function of code length

[09:20] <sorear> sublinear

[09:20] <masak> pmichaud++

[09:20] <sorear> if I have 100 lines of PIR to do a job, or 10 lines of Perl6, there will be a less-than-10fold difference in reading time

[09:21] <sorear> so by a naive interpretation the PIR is "more readable"

[09:22] <huf> i think length matters a lot. if an expression is short enough that i can see it from start to finish without moving my eyes around, it's easier to read

[09:22] <huf> but what my point actually is is that readability is almost entirely subjective, yet almsot everyone likes to pretend it's an objective measurement

[09:23] <masak> there's some point at which I'd gauge compression/golfing as hurting readability.

[09:23] <huf> true, there's a line

[09:23] <huf> but the topic's just another vi vs emacs flame, except people dont seem to realize it yet

[09:23] <pmichaud> masak: I don't understand the "shot on sight" opinion either.

[09:23] <sorear> compression almost never helps readability

[09:24] <sorear> readability is a function of essential complexity

[09:24] <sorear> the difference between refactoring and golfing is that, I think

[09:26] *** risou_ left
[09:26] <szbalint> pmichaud: maybe the person doesn't think that the P6 features backported to P5 are really backports?

[09:26] <huf> sorear: it's rare tho that a more constrained form is longer (i mean in the sense that @a = map @b is more readable since there's less surprises that could happen than in the equivalent push @a, ... for @b)

[09:28] <masak> huf: that sounds like the "number of primitives" measure of Arc fame.

[09:28] <sorear> it's not just number of primitives, it's also applicability of primitives

[09:29] <sorear> two values which have the same linguistic representation might still be different in the reader's mind

[09:29] <sorear> and the cost of the resulting unwritten coercion cannot be discounted

[09:29] <huf> hmm?

[09:29] <sorear> like the J code for spiral matrices

[09:31] <sorear> turning a spiral matrix, into a row-major 1d list, then feeding that through a Burroughs-Wheeler-like transform, creates several very expensive mental coercions

[09:31] <sorear> even though it's just a handful of characters

[09:33] *** jhuni left
[09:34] <huf> sorear: that depends heavily on what kind of manipulations you consider basic

[09:34] <huf> which is in turn shaped by all the languages you've used

[09:34] <sorear> no, no

[09:34] <sorear> that's not what I mean at all

[09:35] <sorear> since you seem to be distracted by the complexity of the BWT, try x & (x - 1)

[09:35] <sorear> this is a very basic operation on bit vectors

[09:35] <sorear> but in order to understand it, you have to see it as x & integer2bitvec(bitvec2integer(x) - 1)

[09:36] <sorear> so it's much harder to grasp than x * (x - 1), even though it uses the same number and complexity of primitives

[09:36] <huf> but say you use a language that has a unary operator for x & (x-1) ;)

[09:37] <huf> use it for a few years and suddenly it's a basic operation in your head

[09:37] <huf> and you no longer think about bitvec->int conversions at all

[09:37] <florz> you totally do

[09:37] <sorear> again you are missing the point

[09:37] <florz> for that's the point of the idiom =:-)

[09:37] <sorear> the readability of x * y does not depend on the readability of the microcode that implements addition

[09:38] <sorear> or multiplication for that matter

[09:38] <sorear> the readability of %x, likewise, has absolutely nothing to do with the readability of x & (x - 1) or whatever else it expands into

[09:39] *** daxim joined
[09:40] *** Ross joined
[09:43] <huf> sorear: but if you call it ispow2(x) it's suddenly really easy and you dont have to think about any of that at all

[09:43] <sorear> huf: That's exactly what I just said

[09:45] <huf> then i dont get what you're saying, sorry

[09:50] *** Ross left
[09:53] <masak> lunch &

[09:57] *** risou joined
[10:00] *** JimmyZ left
[10:03] *** QinGW1 left
[10:05] <brxue> hello, is perl6 coming soon? 

[10:05] <sjohnson> masak: whats for lunch?

[10:06] <sjohnson> brxue: just around the corner!

[10:06] <sjohnson> the devs here have been putting enough man hours into perl6 rakudo to move a small mountain

[10:06] <brxue> I'm so expecting it

[10:07] <sjohnson> you can already get rakudo perl in a working state

[10:07] <sjohnson> but i imagine very soon, an official stable release will be announced

[10:07] <brxue> thanks for all your guys' hard work

[10:08] <brxue> it's so exciting

[10:08] <sorear> pmichaud says there never will be an official release

[10:09] <brxue> any reason?

[10:10] <sjohnson> sorear: if not that, how bout one that will fit the needs of anyone curious about a stable perl 6 implementation?

[10:11] <sorear> brxue: because perl6 is defined by a spec and a philosophy, there is no canonical implementation

[10:11] *** Ross joined
[10:12] <brxue> I reviewed perl6's tutorial, I think it's wonderful

[10:12] <sjohnson> i'm pretty excited as well

[10:13] <sjohnson> i use perl5 a ton

[10:13] <sjohnson> but am really excited about the innovations in p6

[10:14] <sjohnson> try rakudo star, you will probably enjoy it

[10:16] <brxue> It seems Larry Wall made a presentation on O'Reilly conference about Perl6 a few months ago, but I cann't find this info from official site of perl 

[10:17] <sjohnson> he'll probably be awake in a few hours

[10:19] <brxue> this is a URL which cover this news in chinese http://developer.51cto.com/art/201007/214223.htm

[10:20] *** Ross left
[10:20] <brxue> the theme of this presentation seems to be "status of onion"

[10:20] *** Ross joined
[10:21] <sjohnson> heh

[10:21] <sjohnson> http://www.perlfoundation.org/perl6/index.cgi?state_of_the_onion

[10:22] <sjohnson> your last msg should be the topic of the day

[10:22] <sjohnson> :)

[10:22] *** [Coke] joined
[10:22] <mathw> The trouble with the wiki page is that there is no content for the last few talks

[10:23] <mathw> :(

[10:23] <mathw> But I can't really criticise, I wasn't there to do it myself

[10:24] <sjohnson> yeah

[10:24] <sjohnson> do you mean the wiki for the url i just pasted, or wikipedia's perl6 link?

[10:24] <mathw> I mean what you just pasted

[10:24] <sjohnson> cause i found the later to be a burst of fresh air of refreshing facts and knowledge.com

[10:25] <sjohnson> latter*

[10:25] <sjohnson> mathw: 2009 is more recent than the others i found a few months ago, so i guess it's not too bad

[10:26] <sjohnson> :-)

[10:26] <mathw> 2009 is a placeholder

[10:27] <sjohnson> DOH!

[10:28] <sjohnson> i assumed that by the lack of content, people were too awe-struck with p6's work to say anything

[10:29] <mathw> lol

[10:29] <mathw> well we have R* now

[10:29] <mathw> a shining beacon

[10:29] <mathw> keeps me warm at night

[10:29] <mathw> after the cat has abandoned me

[10:30] <sjohnson> haha

[10:31] <sjohnson> i feel guilty for not trying it

[10:31] <sjohnson> maybe too many bad experiences with linux compilations from scratch have scarred me

[10:31] <sjohnson> but someone here told me it isn't that bad to setup

[10:31] <florz> it's really easy indeed, on debian lenny at least

[10:31] <dalek> niecza: af3387d | sorear++ | / (8 files):

[10:31] <dalek> niecza: Avoid creating throwaway containers in the binder

[10:31] <dalek> niecza: review: http://github.com/sorear/niecza/commit/af3387de7220baa421cc24e3b70240c084c22038

[10:31] <dalek> niecza: f9bb192 | sorear++ | src/CgOp.pm:

[10:32] <dalek> niecza: Implement the CPS constants optimization

[10:32] <dalek> niecza: 

[10:32] <dalek> niecza: I thought I did this weeks ago.  Weird.

[10:32] <dalek> niecza: review: http://github.com/sorear/niecza/commit/f9bb19289c628d3ec1ebbf1dfedf440677f0d9bd

[10:32] <dalek> niecza: 199cf9e | sorear++ | lib/Kernel.cs:

[10:32] <dalek> niecza: Optimize Kernel.Bind et al a bit more

[10:32] <dalek> niecza: review: http://github.com/sorear/niecza/commit/199cf9e1b821c509e4fd9ab39952215f37b7e5f3

[10:34] <sjohnson> mathw: you're not alone.  a friends cat i babysit is pretty cute

[10:34] <sjohnson> but scratches me often

[10:35] <sjohnson> doesnt like snuggling either

[10:36] <mathw> oh mine likes to snuggle

[10:36] <mathw> but only when he's in the mood

[10:36] <mathw> and if I fall asleep, he'll be trying to wake me up within about half an hour

[10:36] <mathw> apparently the proper order of things is me being awake while he naps in my lap

[10:36] <sjohnson> haha

[10:37] <sjohnson> here's a youtube link of the cat if you wanna see a cute cat video i took

[10:37] <sjohnson> http://www.youtube.com/watch?v=z_HQYQgsfqc

[10:37] <mathw> I would, but youtube is really clunky at work

[10:37] *** icwiener joined
[10:37] <mathw> our proxy puts it at priority -infinity

[10:37] <sjohnson> as cute as he is, he's pretty spoiled and crashes people in your lap scenario for not cuddling him as he likes

[10:37] <sjohnson> crashes => scratches*

[10:37] <mathw> the cutest cat I know is also the most antisocial

[10:37] <mathw> she'll cuddle for a little bit

[10:37] <mathw> and then take your face off

[10:38] <mathw> but she's an irresistably cute little furball with the most amazing tail

[10:38] <mathw> it's so big that she's been known to chase its shadow

[10:39] <sjohnson> mathw: next best thing:  http://imgur.com/3q36n.jpg

[10:39] <sjohnson> screenshot i took just for you :)

[10:39] <mathw> aaawww

[10:39] <mathw> it's that pleading expression

[10:39] <sjohnson> yeah

[10:39] <sjohnson> he looks cute

[10:39] <sjohnson> but damn that cat is mean sometimes

[10:39] <sjohnson> you'll be petting his back

[10:39] <sjohnson> he's enjoying it for a about 5 mins

[10:40] <sjohnson> then without warning, instant slash with claws at your entire arm

[10:40] <sjohnson> for whatever reason

[10:40] <sjohnson> has happened to about 4 people so far

[10:40] <sjohnson> and i feel sorry for them all as it hurts their feelings.  he's spoiled!

[10:40] <mathw> http://www.flickr.com/photos/mattofwalton/3966313475/in/set-72157621820239428/ fairly typical position for mine

[10:40] <sjohnson> perhaps the scenario you described, is the same cat syndrome for this one

[10:41] <sjohnson> the owner jokes that he's austistic.  now it doesn't seem too far off

[10:41] <sjohnson> tabby!!!

[10:41] <mathw> well fortunately Rascal usually goes for you with claws retracted at first

[10:41] <mathw> then if you don't heed the warning, the claws come out

[10:41] <sjohnson> my mom has a cat that looks exactly like that

[10:41] <mathw> :)

[10:41] <sjohnson> like, exactly

[10:41] <mathw> there's one on my street who looks quite similar

[10:41] <sjohnson> different colour eyes, but identical nonetheless

[10:41] <sjohnson> very cute

[10:41] <mathw> yeah

[10:41] <mathw> Pumba is ridiculously soppy

[10:42] <mathw> total charmer

[10:42] <mathw> even won over my parents and they don't even like cats

[10:42] <sjohnson> heh

[10:42] <sjohnson> i think i have a pic

[10:42] <sjohnson> of my parents cat on facebook

[10:42] <sjohnson> cause someone took a pic of it recently

[10:42] <mathw> he also likes my sister

[10:43] <mathw> last time she came to visit he was straight in her lap

[10:43] <mathw> but his napping was disrupted by her giggling

[10:43] <mathw> apparently he tickles

[10:44] <sjohnson> heh

[10:44] <sjohnson> thats cute

[10:44] <sjohnson> damn

[10:44] <sjohnson> just pics of his sunbathing

[10:44] <sjohnson> but i have a video of him sniffing my iphone4

[10:45] <sjohnson> so i will have to give you the url for sometime you aren't at work

[10:45] <sjohnson> and you will appreciate how similar he looks

[10:45] <sjohnson> sunbathing pic:  http://sphotos.ak.fbcdn.net/hphotos-ak-snc4/hs257.snc4/40199_419352296447_516716447_4981742_1041853_n.jpg

[10:47] <mathw> oh wow

[10:47] <mathw> what a cat

[10:47] <mathw> what a place for a cat to sunbathe

[10:48] <mathw> Pumba would love it

[10:48] <mathw> nice warm concrete slab

[10:48] <mathw> lots of space to run around in

[10:48] <mathw> I tried to take a picture of pumba nosing at my phone last night but it didn't work very well because the flash fired

[10:48] <mathw> so it's like glaringly bright cat nose on black

[10:49] <sjohnson> yeah it's my parents house.  very nice view in canada

[10:49] <sjohnson> but they aren't rich, and the house is very small... but they swiped a good spot in the early 80's

[10:49] <sjohnson> yeah

[10:49] *** Schwern left
[10:49] <sjohnson> i have also found flashes to be very anti-cute-cat face prone

[10:50] <sjohnson> i usually hold the camera with no flash in one hand

[10:50] <sjohnson> and a toy to distract them in the other

[10:50] <sjohnson> to get cute wide-eyed anime faces from them

[10:50] <sjohnson> and not blink when a camera snaps a photo at them

[10:50] <sjohnson> but you almost need a tripod for decent photos

[10:50] <mathw> sometimes you get lucky though

[10:51] <sjohnson> otherwise you come up with this:  http://sphotos.ak.fbcdn.net/hphotos-ak-snc4/hs176.snc4/38156_407910736315_517841315_5113684_2995007_n.jpg

[10:51] <mathw> ah

[10:51] <mathw> yes

[10:51] <mathw> not so good

[10:51] <sjohnson> need to get some tripod action going

[10:52] <mathw> ah here she is

[10:52] <mathw> http://www.flickr.com/photos/mattofwalton/4882653325/ <- the evil furball known as Rascal

[10:52] <sjohnson> thats cute

[10:52] <mathw> that's how she lures you in

[10:52] <mathw> she's cute, playful, violent and has an insatiable appetite for knitting yarn

[10:52] <sjohnson> yeah

[10:52] <sjohnson> i understand completely !

[10:53] <mathw> I enjoy playing with her

[10:53] <sjohnson> thats how all my friends keep getting scratched

[10:53] <mathw> but I'm glad she doesn't live with me

[10:53] <mathw> Pumba's much older though

[10:53] <sjohnson> ever played hide and go seek with a cat?

[10:53] <mathw> no

[10:53] <sjohnson> in the way of, peeking around a corner?

[10:53] <sjohnson> then pretending to hide?

[10:53] <sjohnson> usually gets a lot of good reactions from the more active cats

[10:53] <sjohnson> probably in my top 3 fun things to do with certain cats

[10:54] <sjohnson> some cats dont go for it, other cats will sneak up on you too

[10:54] <sjohnson> then make a daring lunge at you

[10:54] <sjohnson> even if they are old lazy ass cats that hardly move an inch all day, as in the case with our previous orange tabby

[10:55] <sjohnson> not a claw lunge, but one where they can't take the suspence off peek-a-boo, then see what you are hiding behind

[10:55] <mathw> :)

[10:55] <mathw> I'll have to try that with Pumba

[10:55] <sjohnson> depending on the cat, you will be amazed at the results

[10:55] <sjohnson> just try to pretend that you are trying to hide from them as best you can, hiding behind sofas, but making a peek, then hiding again as if you dont want them to see you

[10:55] <sjohnson> its a ton of fun

[10:56] <sjohnson> making it obvious that you are peeking so they see you, but then pretending like you dont want them to see you

[10:56] <sjohnson> hours of entertainment!

[10:57] <sjohnson> anyways matt, i was good chatting with you again

[10:57] <sjohnson> i should probably hit the sack and go to work at a half-decent hour

[10:57] <sjohnson> ttyl!

[10:57] <mathw> bye!

[10:58] <sjohnson> maybe work be done faster and more enjoyable if i just imaging playing with cats instead of reverse engineering other people's uncommented javascript :-(

[11:02] *** Ross left
[11:02] <dalek> niecza: 10151ff | sorear++ | / (3 files):

[11:02] <dalek> niecza: Optimize cutting of subrules

[11:02] <dalek> niecza: 

[11:02] <dalek> niecza: Setting the committed flag is enough from an operational standpoint,

[11:02] <dalek> niecza: but it doesn't allow the search tree to be pruned by the garbage

[11:02] <dalek> niecza: collector.  The new model makes that possible.

[11:02] <dalek> niecza: review: http://github.com/sorear/niecza/commit/10151ff7e33166da68631fc6967b70b380a47e70

[11:03] <sorear> 600kb in 8.1 sec and 23mb \o/

[11:08] *** Ross joined
[11:10] * sorear out.

[11:12] *** yogaboy joined
[11:15] *** yogaboy left
[11:15] <masak> sjohnson: I had sushi for lunch. yummy.

[11:17] <masak> sjohnson++ # perl 6 explanations to brxue 

[11:19] <masak> yay, OSDC.fr talks accepted \o/

[11:20] <colomon> \o/

[11:21] *** wtw left
[11:24] *** wtw joined
[11:28] *** aloha left
[11:30] *** Ross left
[11:30] *** bacek left
[11:35] *** oyse joined
[11:36] *** patrickas joined
[11:36] *** [Coke] left
[11:37] <patrickas> o/

[11:37] *** Ross joined
[11:38] <masak> \o

[11:38] <masak> rakudo: sub check($_) { my $l = 0; return 0 if ($_ eq "[" ?? ++$l !! --$l) < 0 for .comb; return 1 }; for ^5 { say "$_ is {.&check ?? "" !! "in"}valid" given (<[ ]> xx 5).pick(*).join }

[11:38] <p6eval> rakudo 859f2d: OUTPUT«][[]][[][] is invalid␤]][]][[[][ is invalid␤]][[[][][] is invalid␤[]][[[[]]] is invalid␤][[]][][][ is invalid␤»

[11:38] <patrickas> LOLITSMASAK!

[11:38] <masak> dang, only invalid ones :)

[11:38] <masak> guess they're that much more common...

[11:39] <masak> rakudo: sub check($_) { my $l = 0; return 0 if ($_ eq "[" ?? ++$l !! --$l) < 0 for .comb; return 1 }; for ^5 { say "$_ is {.&check ?? "" !! "in"}valid" given (<[ ]> xx 5).pick(*).join }

[11:39] <p6eval> rakudo 859f2d: OUTPUT«[][][[[]]] is valid␤][[[]][[]] is invalid␤[[][[]]]][ is invalid␤]]][[[][][ is invalid␤[][]][]][[ is invalid␤»

[11:39] <masak> \o/

[11:40] <patrickas> masak: you remind me of Grissum from CSI

[11:41] <masak> unaware of that reference :)

[11:41] <masak> except that CSI is probably something on TV...

[11:41] <masak> rakudo: sub check($_) { -1 == none([\+] map { $_ eq "[" ?? 1 !! -1 }, .comb) }; for ^5 { say "$_ is {.&check ?? "" !! "in"}valid" given (<[ ]> xx 5).pick(*).join }

[11:41] <p6eval> rakudo 859f2d: OUTPUT«][[[[]][]] is invalid␤][[]][[]][ is invalid␤]][[[[[]]] is invalid␤[[]][][][] is valid␤]][[[]][][ is invalid␤»

[11:41] *** CoCol joined
[11:41] <masak> \o/

[11:42] <patrickas> He's an entomologist :-p

[11:42] <masak> I'll take that as a compliment :P

[11:43] <masak> (whatever is an entomologist doing on a CSI team?)

[11:43] <patrickas> well Forensic entomologist

[11:44] <masak> gotta know who killed those bugs...

[11:45] <patrickas> Well usually masak is the last person to have seen them unreported so I guess we better start by questioning him!

[11:47] *** macroron joined
[11:47] <masak> :)

[11:50] *** Axius joined
[11:51] <takadonet> morning all

[11:52] <masak> o/

[11:56] <masak> rakudo: for ^5 { say "$_ is {none([\+] map { $_ eq "[" ?? 1 !! -1 }, .comb) < 0 ?? "" !! "in"}valid" given (<[ ]> xx 5).pick(*).join }

[11:56] <p6eval> rakudo 859f2d: OUTPUT«]][]][][[[ is invalid␤][[[][[]]] is invalid␤[[[]]]][][ is invalid␤[]][]][[][ is invalid␤[]][]][][[ is invalid␤»

[12:06] *** meppl joined
[12:11] <masak> phenny: tell mberends that if he plans to submit OSDC.fr talks: deadline falls today.

[12:11] <phenny> masak: I'll pass that on when mberends is around.

[12:17] *** CoCol left
[12:18] *** perlygatekeeper1 joined
[12:18] *** perlygatekeeper left
[12:18] *** meinwald left
[12:18] *** plainhao joined
[12:19] *** meinwald joined
[12:19] *** meinwald is now known as Guest39477

[12:19] *** Eevee left
[12:20] *** Eevee joined
[12:20] *** CoCol joined
[12:31] *** sftp joined
[12:31] *** ruoso joined
[12:34] *** Axius left
[12:35] *** Axius joined
[12:41] *** macroron left
[12:52] *** risou left
[12:56] *** Mowah joined
[12:57] *** oyse_ joined
[12:57] *** oyse left
[13:00] *** Mowah_ joined
[13:01] *** Mowah left
[13:01] *** CoCol left
[13:06] *** Mowah_ left
[13:06] <masak> Perl 5 is not very friendly to us poor Perl 6 programmers who regularly forget the parentheses on ifs and loops :/ one gets all manner of strange unrelated errors doing that.

[13:07] <takadonet> heh

[13:07] <masak> in fact, I've come to generally associate a big heap of unrelated errors with the possibility that I might have forgotten such parens.

[13:08] <masak> maybe I should go on p5p and ask that they make the error messages slightly less LTA in this circumstance? :)

[13:08] <Juerd> use List::Util qw(sum);  # [+]

[13:09] <masak> Juerd: ooh! one could make a blog post of "imports you don't need to make in Perl 6" :)

[13:09] <Juerd> I still do prefer "sum" to "[+]" by the way

[13:10] <Juerd> rakudo: (1..5).sum.say

[13:10] <p6eval> rakudo 859f2d: OUTPUT«Method 'sum' not found for invocant of class 'Range'␤  in main program body at line 22:/tmp/izRahoH1R3␤»

[13:10] <Juerd> Meh :)

[13:10] <masak> huh.

[13:10] <masak> alpha: say (1, 2, 3).sum

[13:10] <p6eval> alpha 30e0ed: OUTPUT«Method 'sum' not found for invocant of class 'List'␤in Main (file src/gen_setting.pm, line 324)␤»

[13:10] <jnthn> It's sumwhat non-generic though. :-)

[13:11] *** Mowah joined
[13:11] <masak> jnthn: welpun back! we missed you :)

[13:12] <jnthn> I've been disappointed at the lack of opportunities for bad puns of late, but I figured one would happun sooner or later. :-P

[13:12] *** orafu left
[13:13] *** kaare_ left
[13:14] *** kaare_ joined
[13:14] *** orafu joined
[13:16] *** Patterner left
[13:17] *** Psyche^ joined
[13:17] <takadonet> is there a better way to capture in a regex decimal and non decimal values  then: (\d+'.'\d+|\d+) for values like : 75.34 245 5.3 etc....

[13:17] *** Psyche^ is now known as Patterner

[13:18] <PerlJam> takadonet: / ( \d+ [ '.' \d* ]? ) /  # dunno of that's "better"

[13:19] <PerlJam> s/of/if/

[13:20] <masak> alpha: say ?(42.18 ~~ /<Perl6::Grammar::dec_number>/)

[13:20] <p6eval> alpha 30e0ed: OUTPUT«1␤»

[13:20] <masak> that's my preferred method :)

[13:20] <takadonet> PerlJam: i have that as well. 

[13:20] <PerlJam> masak++

[13:20] <takadonet> rakudo: say ?(42.18 ~~ /<Perl6::Grammar::dec_number>/)

[13:21] <p6eval> rakudo 859f2d: OUTPUT«===SORRY!===␤regex assertion not terminated by angle bracket at line 22, near "::Grammar:"␤»

[13:21] <masak> rakudo--

[13:21] <takadonet> hmmm

[13:21] <takadonet> all well

[13:22] <masak> jnthn: have you ever savoured Finnegan's Wake? http://www.trentu.ca/faculty/jjoyce/fw-16.htm

[13:22] <jnthn> ...no?

[13:22] * jnthn looks

[13:23] <masak> it's... odd in a good way. :)

[13:23] <masak> and good in an odd way.

[13:24] <jnthn> ...

[13:25] <masak> *lol*

[13:25] <jnthn> It's odd alright :-)

[13:25] <jnthn> He can prapsposterus the pil-	3

[13:25] <jnthn> lory way to Hirculos pillar

[13:25] <jnthn> lol

[13:25] <jnthn> :-)

[13:26] <masak> "You tollerday donsk? N. You tolkatiff scowegian? Nn. You spigotty anglease? Nnn. You phonio saxo? Nnnn."

[13:26] <jnthn> Wid wad for a norse like? 

[13:27] <masak> Load Allmarshy!

[13:28] *** Ross left
[13:28] <jnthn> In the ignorance that implies impression that knits knowledge that finds the nameform that whets the wits that convey contacts that sweeten sensation that drives desire that adheres to attachment that dogs death that bitches birth that entails the ensuance of existentiality.

[13:28] <masak> *lol*

[13:28] <jnthn> Sentence...win. :-)

[13:29] <jnthn> I'm still not sure if any of this actually means anything or just sounds like it does. :-)

[13:29] <masak> it's a very interesting book.

[13:29] <masak> James Joyce doesn't use language like the rest of us do. :)

[13:30] <arnsholt_> IIRC it's supposed to make the same kind of sense dreams do =)

[13:30] <jnthn> I daren't read it in case I start this way speaking unstoppably the chat or relayed internets.

[13:30] <masak> arnsholt_: yes. it's basically livestreaming a dreamer's thoughts.

[13:30] *** Zapelius left
[13:31] *** arnsholt_ is now known as arnsholt

[13:31] <masak> arnsholt_: the awesome thing is, people are pretty sure of the dreamer's *name* from the contents of the book!

[13:31] <arnsholt> Nifty ^^

[13:33] <masak> and of course, a whole lot of other details pertaining to the dreamer.

[13:33] <masak> I do hope to take the time to read it all at some point in my life.

[13:33] *** kaare_ left
[13:34] <jnthn> oh noes I've got chocolate all over my multi-dispatch design notes.

[13:35] <masak> solid or liquid?

[13:36] <jnthn> solid but I guess it musta got liquid enough to get sticky at some point

[13:36] *** Ross joined
[13:36] <jnthn> ...maybe this is nature's way of telling me I have a sweet design.

[13:37] <PerlJam> looks like you'll just have to lick them clean then

[13:37] <masak> yes, we prefer a clean design.

[13:37] <masak> jnthn: suck it up!

[13:37] <jnthn> :P

[13:38] <jnthn> meh, this sucks, we should know all the candies at compile time anyways...

[13:38] * jnthn tries again

[13:44] *** colomon left
[13:51] *** jferrero left
[13:54] *** Guest39477 is now known as meinwald

[13:59] *** Axius left
[14:01] *** Italian_Plumber joined
[14:05] *** Lorn joined
[14:06] *** uniejo left
[14:15] *** colomon joined
[14:16] *** pkkm joined
[14:16] *** masonkramer joined
[14:18] *** stepnem left
[14:19] *** icwiener left
[14:19] *** stepnem joined
[14:21] *** brxue left
[14:22] <pmichaud> good morning, #perl6

[14:22] *** meppl left
[14:23] <masak> morning, pmichaud.

[14:23] <takadonet> pmichaud: morning

[14:23] <colomon> o/

[14:25] *** CoCol joined
[14:27] *** wtw left
[14:30] <mathw> o/

[14:32] *** mfollett joined
[14:35] *** patspam joined
[14:35] <jnthn> morning, pmichaud 

[14:36] * mathw takes deep breaths

[14:36] <mathw> Sometimes I'm very tempted to take a solemn vow never to use C++ ever again

[14:37] <arnsholt> The C++ FQA makes me question ever learning it =)

[14:37] *** justatheory joined
[14:37] <mathw> Then I realise that it's not really C++ I'm angry with, it's Visual Studio

[14:40] *** sftp left
[14:40] *** dual left
[14:40] *** sftp joined
[14:41] <pmichaud> jnthn: ping

[14:42] <pmichaud> jnthn: could you (or anyone else) verify that check_invokable (src/pmc/perl6multisub.pmc:804-808)  isn't actually being used anywhere?

[14:42] <pmichaud> i.e., I can remove it?

[14:45] *** masonkramer left
[14:54] *** Ross left
[14:55] *** timbunce left
[14:58] <masak> "Joyce's suggestion, like Grice's, is that we create discourse out of a vast, in principle infinite assemblage of linguistic and encyclopedic elements, and that the threshold at which we label any given discourse as incoherent is in part a function of particular communicative contexts." http://www.thefreelibrary.com/The+Mutt+and+Jute+dialogue+in+Joyce's+Finnegans+Wake:+Some+Gricean...-a016528210

[14:59] <masak> I'm soddy, bat this orl remynds me of the blag proust "Idiotic Parl Sicks" :)

[15:00] <masak> und so, is in FAQ nott off tropic :)

[15:02] <masak> aur at LISP, naught enteyerly.

[15:04] *** timbunce joined
[15:04] *** Holy_Cow joined
[15:05] *** satyavvd joined
[15:05] *** oyse_ left
[15:07] *** tadzik joined
[15:08] <masak> s/Idiotic/Audiomatic/

[15:14] *** satyavvd left
[15:14] *** Ross joined
[15:17] <tadzik> moritz_: http://www.reddit.com/r/programming/comments/dbpgd/protected_attributes_and_methods_make_no_sense/c0z2qnr?context=3 -- this might have been clearly said in the post

[15:20] *** spq1 joined
[15:24] *** mfollett left
[15:26] *** tadzik left
[15:29] *** bacek joined
[15:34] <jnthn> pmichaud: Gotta decommute - will check when I get home.

[15:34] <jnthn> pmichaud: though imo if you remove it and it compiles, then it's fine :-)

[15:34] <pmichaud> jnthn: that's what I'm doing now.

[15:34] *** aloha joined
[15:35] <pmichaud> I couldn't find any other references to it in the repo (and it's static, so they'd be limited to the one file anyway)

[15:36] <dalek> rakudo: c957c9f | pmichaud++ | build/PARROT_REVISION:

[15:36] <dalek> rakudo: Bump PARROT_REVISION to update to a known working 64-bit Parrot (passes all spectests).

[15:36] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/c957c9fca739d896c8d5fc88e70be2ae360339f6

[15:46] *** Ross left
[15:54] <dalek> rakudo: c84d0d3 | pmichaud++ | build/PARROT_REVISION:

[15:54] <dalek> rakudo: Oops.  *This* is the correct Parrot revision for 64-bit builds -- fixes c957c9f.

[15:54] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/c84d0d37daeec765e0836b7d739a13d50fc63d54

[15:57] *** Guest50200 joined
[15:58] *** Guest50200 is now known as Ross

[15:58] *** Ross left
[15:58] *** Ross joined
[15:58] *** zb joined
[16:00] *** Ross left
[16:04] *** ashleydev left
[16:04] *** ashleydev joined
[16:05] *** Ross joined
[16:08] *** alksentrs joined
[16:11] <masak> nom &

[16:11] *** masak left
[16:12] *** patrickas left
[16:12] *** foodoo left
[16:12] <takadonet> anyone have some good complex examples on how to use action methods with a grammar? (other then the spec tests)

[16:17] <PerlJam> takadonet: I find your request odd.  :-) Why do you want "good complex examples"?  

[16:19] *** patrickas joined
[16:19] <pmichaud> takadonet: I don't know if this helps at all, but yesterday evening I wrote http://github.com/perl6/nqp-rx/blob/master/examples/json.nqp

[16:19] *** patspam left
[16:20] <takadonet> PerlJam: That involves reading nested file formats such as : http://www.ncbi.nlm.nih.gov/Sitemap/samplerecord.html which using the action class creating an (object or complex data structure)

[16:20] *** cdarroch joined
[16:20] *** cdarroch left
[16:20] *** cdarroch joined
[16:21] <takadonet> I currently have my grammar parsing out everything nicely just need to put into a nice data structure

[16:21] <takadonet> btw I'm not doing what is at the link but a hmmer profile file

[16:22] <takadonet> pmichaud: that will help thanks!

[16:22] *** rgrau_ joined
[16:23] <arnsholt> This is odd. For some reason my TOP action method isn't called...

[16:23] <pmichaud> takadonet: also see Ch. 10 of the Using Perl 6 book, if you haven't seen that.

[16:26] *** dual joined
[16:28] <arnsholt> Specifying TOP as method instead of a regex-like shouldn't suppress the call of the action method, should it?

[16:28] <pmichaud> yes, it does.

[16:28] <pmichaud> if you write it as a method, you have to invoke the action method yourself.

[16:28] <pmichaud> automatic calls to the action method are a function of the regex, not of the dispatcher.

[16:29] <dalek> rakudo: 7517e39 | pmichaud++ | src/pmc/perl6multisub.pmc:

[16:29] <dalek> rakudo: Remove dead check_invokable() code from perl6multisub.pmc .

[16:29] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/7517e39ef7fd59aa3f9a88475289e33726c0998a

[16:30] <arnsholt> Right, I misread the NQP code then. Cheers!

[16:34] <takadonet> pmichaud: I have seen it thanks :)

[16:34] <arnsholt> But in that case, how does TOP in NQP's Actions.pm get called? I can't find an explicit call to it

[16:38] *** amkrankruleuen joined
[16:38] *** patspam joined
[16:48] <pmichaud> arnsholt: it doesn't.

[16:48] <arnsholt> Ah. Right =)

[16:49] <pmichaud> since the TOP method returns the result of comp_unit directly, we get $<comp_unit>'s .ast also.

[16:49] <pmichaud> We could/should remove the TOP method from Actions.pm, I guess.

[16:50] *** tylercurtis joined
[16:51] *** kjeldahl left
[16:53] <arnsholt> Yeah, I think I get it now. Thanks for your help and patience

[16:54] *** patspam left
[16:55] *** kjeldahl joined
[16:57] *** dakkar left
[16:57] *** daxim left
[17:08] *** thebird left
[17:08] <TimToady> rakudo: say -> Int $x { $x < 2 ?? 1 !! $x * &?BLOCK($x - 1); }.(10);

[17:08] <p6eval> rakudo 7517e3: OUTPUT«Could not find sub &?BLOCK␤  in <anon> at line 22:/tmp/yBcmPGYKSE␤  in main program body at line 22:/tmp/yBcmPGYKSE␤»

[17:08] <TimToady> is that a known bug?

[17:09] <TimToady> it seems to be counting the pointy as a routine ("sub")

[17:10] <TimToady> actually, this one looks borken too:

[17:10] <TimToady> rakudo: say (sub (Int $x) { $x < 2 ?? 1 !! $x * &?ROUTINE($x - 1); }).(10);

[17:10] <p6eval> rakudo 7517e3: OUTPUT«Could not find sub &?ROUTINE␤  in <anon> at line 22:/tmp/55M0HpCZoq␤  in main program body at line 22:/tmp/55M0HpCZoq␤»

[17:11] <TimToady> alpha: say (sub (Int $x) { $x < 2 ?? 1 !! $x * &?ROUTINE($x - 1); }).(10);

[17:11] <p6eval> alpha 30e0ed: OUTPUT«invoke() not implemented in class 'Undef'␤in Main (file <unknown>, line <unknown>)␤»

[17:11] <TimToady> pugs: say (sub (Int $x) { $x < 2 ?? 1 !! $x * &?ROUTINE($x - 1); }).(10);

[17:11] <p6eval> pugs: OUTPUT«3628800␤»

[17:12] <TimToady> pugs: say -> Int $x { $x < 2 ?? 1 !! $x * &?BLOCK($x - 1); }.(10);

[17:12] <p6eval> pugs: OUTPUT«<SubPointy(<anon>)>␤*** Cannot cast from VBool True to Pugs.AST.Types.VCode (VCode)␤    at /tmp/Pgi8cOHGi6 line 1, column 1-60␤»

[17:15] *** patrickas left
[17:18] *** rgrau_ left
[17:20] <TimToady> seems like those oughta BLHF

[17:21] <TimToady> had to note non-functionality at http://rosettacode.org/wiki/Y_combinator#Perl_6

[17:22] *** pkkm left
[17:24] <TimToady> rakudo: say .(10) given { $_ < 2 ?? 1 !! $_ * &?BLOCK($_ - 1) }

[17:24] <p6eval> rakudo 7517e3: OUTPUT«Could not find sub &?BLOCK␤  in <anon> at line 22:/tmp/M95UNzHzlo␤  in main program body at line 22:/tmp/M95UNzHzlo␤»

[17:25] *** patspam joined
[17:25] * moritz_ is pretty sure that it worked in pugs at some point

[17:25] <TimToady> there's an idiom waiting to happen

[17:33] *** jaldhar left
[17:33] *** smash left
[17:36] *** timbunce left
[17:37] <pmichaud> afaik, &?BLOCK and &?ROUTINE are nyi

[17:37] <pmichaud> they're not exactly LHF, either.

[17:38] <moritz_> I just thought about how to implement them

[17:38] <pmichaud> (although that may be due to insufficient imagination)

[17:38] *** Axius joined
[17:38] <moritz_> and I think the biggest problem is getting a reference to an anonymous routine that might not have been compiled yet

[17:39] <pmichaud> oh!

[17:39] <pmichaud> no.

[17:40] <moritz_> (sub f() { &?ROUTINE() }).()

[17:40] <moritz_> (sub () { &?ROUTINE() }).()

[17:40] <pmichaud> one of the challenges is that &?BLOCK and &?ROUTINE need to reference the Code object, not the Parrot Sub

[17:41] <moritz_> where in the compilation does the wrapping happen?

[17:42] <pmichaud> block_create_closure and block_create_code

[17:42] <pmichaud> however, if we're allowed to assume that &?BLOCK and &?ROUTINE are indeed compile-time constants -- i.e., they refer to the static code object and not the dynamic instance, it might be much simpler.

[17:43] <moritz_> that's how I understand the spec, yes

[17:43] <pmichaud> oh, then it's not nearly so hard.

[17:43] <moritz_> oh, you thought about going through getinterp ?

[17:43] <pmichaud> that's one possibility

[17:43] *** rgrau_ joined
[17:44] *** stepnem left
[17:44] <moritz_> we need the parrot sub -> Code transition for callframe() at some point anyway

[17:44] <TimToady> callframe(0).my.<__CANDIDATE_LIST__> doesn't quite get there

[17:44] <TimToady> but static is more better anyway

[17:44] <pmichaud> moritz_: it can also be done as a compile-time item

[17:45] <moritz_> pmichaud: I don't understand how I can get a reference to sub that hasn't been compiled yet

[17:45] <pmichaud> but I need to settle on a generic framework for handling all compile-time vars, and not a bunch of special cases

[17:45] <pmichaud> moritz_: all I need is a reference to its PAST::Block

[17:45] <pmichaud> we actually do it in several places in Actions.pm

[17:45] <pmichaud> (we have to, because of order-of-initialization issues)

[17:45] <moritz_> pmichaud: and then compile it again? or is there a way to get the reference of the compiled sub?

[17:46] <pmichaud> PAST::Var.new( :value($block_past) )  # iirc

[17:46] <moritz_> ah

[17:46] <pmichaud> no, wait

[17:46] <pmichaud> PAST::Val.new( :value($block_past) )

[17:46] * moritz_ finds that too much knowledge about rakudo internals is in #perl6, instead of in source code comments

[17:47] * TimToady wonders which is wrong more often...

[17:47] <pmichaud> returns a compile-time constant reference to the Parrot Sub corresponding to $block_past, without re-generating $block_past

[17:47] *** stepnem joined
[17:49] <moritz_> rakudo: my $x = <-> $a { }

[17:49] <p6eval> rakudo 7517e3: OUTPUT«===SORRY!===␤Confused at line 22, near "my $x = <-"␤»

[17:50] <pmichaud> Anyway, &?BLOCK could likely be created as a "simple"      make block_code(@BLOCK[0]);

[17:50] <moritz_> and &?ROUTINE would go through @BLOCK and search for the first routine?

[17:51] <pmichaud> yes.

[17:51] <pmichaud> and it might need to be   block_closure_ref(...)

[17:51] * TimToady wonders if @BLOCK is a space leak

[17:51] <pmichaud> It's a stack.

[17:51] <dukeleto> i get a bunch of "Missing test file" when I run "make spectest" on rakudo master. is that expected?

[17:51] <pmichaud> It's going to eventually be @*BLOCK, at the least.

[17:51] <pmichaud> Or more likely we'll switch to simply $BLOCK   with a chain of <OUTER> references.

[17:52] <pmichaud> er, $*BLOCK

[17:52] <moritz_> dukeleto: not expected

[17:52] <TimToady> dynamic variable doesn't seem right either

[17:53] <moritz_> am I right in assuming that each ?-twigil var will need a special case in the compiler?

[17:54] <pmichaud> moritz_: I don't think that's right, or desirable.

[17:54] <TimToady> rakudo: constant $?foo = 42;

[17:54] <p6eval> rakudo 7517e3: OUTPUT«===SORRY!===␤Constant type declarator not yet implemented at line 22, near "= 42;"␤»

[17:54] <pmichaud> I'd certainly like to avoid too much special-case-ness in Actions.pm

[17:54] <dukeleto> moritz_: this is what I see when I type "make spectest" in rakudo: http://gist.github.com/574069

[17:55] <TimToady> some special cases are needed, but most constants can live in the normal symbol table seen by constant declarators

[17:55] <TimToady> if they were yi

[17:55] <dukeleto> moritz_: i am getting a bunch of failures too, but something must be wrong on my machine. I blew away every version of parrot I had on my machine, and I am using --gen-parrot, but something is still borked

[17:55] <TimToady> or would that be syi?

[17:55] * moritz_ thought about things like $?LINE, $?FILE, &?BLOCK  etc.

[17:56] <TimToady> $?LINE has to be special, methinks, but $?FILE doesn't

[17:56] *** tadzik joined
[17:56] <moritz_> dukeleto: that's weird... try to rm -rf t/spec and 'make testable' again?

[17:56] <moritz_> or maybe your rakudo copy is stale?

[17:56] <moritz_> anyway, afk

[17:57] <pmichaud> TimToady: is something like   CALLER::<?$LINE>   valid?  I've been assuming "yes"

[17:57] <dukeleto> moritz_: will try, thanks. 

[17:57] <pmichaud> er,  CALLER::<$?LINE>

[17:57] <TimToady> I think I said that one wasn't necessary, we can do caller.line or some such

[17:58] <pmichaud> okay.

[17:58] <TimToady> rakudo: say callframe().line

[17:58] <p6eval> rakudo 7517e3: OUTPUT«22␤»

[17:58] *** mfollett joined
[17:58] <pmichaud> oh, and it even works.  Shiny.

[18:00] *** mberends joined
[18:01] *** mfollett left
[18:05] *** dju left
[18:05] *** dju joined
[18:07] <colomon> rakudo: say callframe().file

[18:07] <p6eval> rakudo 7517e3: OUTPUT«/tmp/K8zTKm_UYf␤»

[18:08] <colomon> I presume there's a way to walk back up the stack?

[18:08] <pmichaud> callframe(1)  

[18:08] <pmichaud> callframe(2)

[18:08] <pmichaud> callframe(Routine)

[18:08] <pmichaud> etc.

[18:08] <pmichaud> See S06.

[18:09] <TimToady> S06:2350 in fact

[18:09] <colomon> sweet

[18:09] <TimToady> ignore DYNAMIC::<$?LINE> though  :)

[18:10] * pmichaud submits specbug :-P

[18:12] *** Ross left
[18:13] *** mikehh joined
[18:14] *** meppl joined
[18:15] <shortcircuit> It occurs to me, watching P6 development in here, that P6 is what happens when you get a bunch of hackers together collaboratively building a language out of features they like.

[18:16] <TimToady> that's more or less what we announced in 2000

[18:17] <shortcircuit> I've seen several langauges where they were designed to include the parts the author likes. Some even hit production as part of commercial entities, but P6 may be the only one I've seen that throws hackers and collaboration into the formula.

[18:17] *** Ross joined
[18:17] * shortcircuit is failing at English sentence structuring today.

[18:18] <TimToady> we still needed to unify the design though; the original proposed feature set was completely incoherent

[18:18] <shortcircuit> TimToady: I remember that announcement. I think I still have the relevant Linux Magazine issue somewhere. :)

[18:19] <dukeleto> moritz++ # rm -rf t/spec; make testable seems to have worked

[18:19] <dukeleto> i think the way that rakudo updates t/spec may need some tweaking

[18:20] <dukeleto> seems like a "git pull --rebase" would be better than a "git pull", and perhaps an explicit "git checkout master"

[18:20] <TimToady> walk &

[18:20] *** Chillance joined
[18:20] <dukeleto> otherwise, if someone is working on a branch in t/spec, "git pull" will commit a merge to whatever branch it is one

[18:20] <dukeleto> s/one/on/

[18:22] *** Axius left
[18:24] *** alksentrs left
[18:26] <dukeleto> is (1,1) .. (2,1) supposed to be an infinite list ?

[18:26] <dukeleto> perl6: (1,1) .. (2,1)

[18:26] <p6eval> pugs, rakudo 7517e3:  ( no output )

[18:29] <pmichaud> rakudo:  say (1,1) cmp (2,1)

[18:29] <p6eval> rakudo 7517e3: OUTPUT«-1␤»

[18:30] <pmichaud> rakudo:   say (1,1).succ

[18:30] <p6eval> rakudo 7517e3: OUTPUT«1 2␤»

[18:30] <pmichaud> hmmmmm

[18:31] <pmichaud> I don't quite understand that one.

[18:31] <pmichaud> rakudo:  say ~(1,1).^methods

[18:31] <p6eval> rakudo 7517e3: OUTPUT«item  ACCEPTS perl hash Capture of elems at_pos sort Str iterator Bool elems fmt item Num Str Numeric Int list acotanh trim-trailing from-radians capitalize pred atanh cosec exp lc p5chop chars sinh to-radians acotan lcfirst roots lines sec trim asec trim-leading cotanh cis

[18:31] <p6eval> ..log log…

[18:31] *** cjk101010 left
[18:31] <pmichaud> rakudo:  say Parcel.^methods

[18:31] <p6eval> rakudo 7517e3:

[18:31] <p6eval> ..OUTPUT«ACCEPTSperlhashCaptureofelemsat_possortStriteratorBoolitemStrNumericIntlistelemsfmtitemNumcotanatan2lcfirstucseccislogsubstrfrom-radianssprintftranssinIntpredacosecsubstsinhcosechacosechabschompindexceilingtrimasectrim-leadingunpolartrim-trailingsechordrandtruncateRatrindexsqrtasin…

[18:31] <pmichaud> rakudo:  say ~Parcel.^methods

[18:31] <p6eval> rakudo 7517e3: OUTPUT«Bool item  ACCEPTS perl Capture hash of elems at_pos sort Str iterator list elems fmt item Num Str Numeric Int trim asec trim-leading cotanh ucfirst tan sech cos rand truncate fmt trans sqrt asin cosh succ subst sign Numeric chomp index uc chr acotanh samecase substr

[18:31] <p6eval> ..trim-trailing …

[18:32] <pmichaud> ah, Parcel ~~ Iterable    and   Iterable ~~ Cool

[18:32] <pmichaud> not sure about that second one.

[18:32] <colomon> rakudo: say Failure + 4

[18:32] <p6eval> rakudo 7517e3: OUTPUT«Method 'Bridge' not found for invocant of class ''␤  in 'infix:<+>' at line 3515:CORE.setting␤  in main program body at line 22:/tmp/6N0cR37pkx␤»

[18:34] <colomon> rakudo: say (+Failure) + 4

[18:34] <p6eval> rakudo 7517e3: OUTPUT«Use of uninitialized value in numeric context␤4␤»

[18:35] <dukeleto> colomon: i ran into that Failure failure yesterday :)

[18:35] <colomon> dukeleto: seems like we should have a more graceful / useful way of handling it.

[18:35] <dukeleto> how do I run one spectest file verbosely?

[18:36] <tadzik> perl6 /t/spec/stuff I believe

[18:36] <tadzik> s:/t/:./t/:

[18:36] <tadzik> that's how I do it

[18:37] <dukeleto> tadzik++

[18:37] <dukeleto> duh :)

[18:39] * dukeleto just submitted this as a rakudo bug: http://gist.github.com/574122

[18:40] <dukeleto> one spec test coredumps for me, the other doesn't parse. I hope I included all necessary info, please let me know if I didn't

[18:41] <dukeleto> i just added the backtrace to the coredump to the gist

[18:41] <dukeleto> colomon: is Failure + 2 a general issue with attempting to use Roles in a numeric context ?

[18:42] <dukeleto> perl6: Role + 2

[18:42] <p6eval> pugs, rakudo 7517e3:  ( no output )

[18:42] <colomon> dukeleto: It's an error using anything that's non-numeric in a numeric context, I think.

[18:42] <dukeleto> perl6: say (Role + 2)

[18:43] <jnthn> pmichaud: Maybe Iterable wants to be a role?

[18:43] <p6eval> pugs, rakudo 7517e3: OUTPUT«2␤»

[18:43] <dukeleto> colomon: Role seems to be fine

[18:43] <colomon> rakudo: class Blueberry { has $.skin; }; say Blueberry.new + 4

[18:43] <p6eval> rakudo 7517e3: OUTPUT«Can't take numeric value for object of type Blueberry␤  in 'Any::Numeric' at line 1386:CORE.setting␤  in 'infix:<+>' at line 7072:CORE.setting␤  in main program body at line 22:/tmp/yl3noLOJFq␤»

[18:43] <colomon> I guess that is a better message.

[18:43] <colomon> oh, now I remember! 

[18:43] <colomon> the Failure issue is caused by

[18:43] <colomon> rakudo: say Failure ~~ Numeric

[18:44] <p6eval> rakudo 7517e3: OUTPUT«1␤»

[18:44] *** tbalazs joined
[18:44] <colomon> I guess the real question, is what should Failure + 4 do?

[18:44] <PerlJam> fail.

[18:45] <colomon> Well, then all that we have in this case is a poor error message.

[18:46] <dukeleto> colomon: yes, I agree. Failure + 2 fails, but not with the correct error

[18:46] <colomon> Does that imply that +Failure is also wrong (because it returns 0 with a warning)?

[18:46] <dukeleto> colomon: do you have any failing spectests on master at the moment? do you know what http://gist.github.com/574122 is about?

[18:47] <colomon> I haven't seen those, but I haven't spectested since I checked in yesterday.

[18:49] <colomon> t/spec/S19-command-line/dash-e.t works fine for me.

[18:49] <colomon> errr... actually, I'm not quite up to date.  five minutes, please...

[18:50] <dukeleto> colomon: i worry that the things i am seeing only fail for rakudo on 64bit linux

[18:50] <dukeleto> colomon: which may be parrot issues, not rakudo bugs

[18:50] <colomon> I can try that too, if you'd like.  :)

[18:51] *** mfollett joined
[18:51] <dukeleto> colomon: it would help me to be sure that I am not crazy :)

[18:51] <colomon> or prove that you are!  ;)

[18:52] <PerlJam> I think people that hang out on #perl6 are crazy by definition.

[18:53] <colomon> PerlJam: hard to argue with that...

[18:54] *** estrabd is now known as jhfieo099

[18:54] *** jhfieo099 is now known as jhfie

[18:54] *** jhfie is now known as estrabd

[18:54] *** estrabd is now known as jhfieo099

[18:55] *** jhfieo099 is now known as Ev1Lh4xr

[18:55] *** Ev1Lh4xr is now known as estrabd

[18:57] <diakopter> estrabd: ?

[18:57] *** envi^home left
[18:57] <colomon> dukeleto: very latest still works on 32-bit OS X

[18:58] *** CoCol left
[18:58] <colomon> dukeleto: 64-bit linux compile on-going

[18:59] *** tylercurtis left
[18:59] <dukeleto> colomon: cool, thanks for checking!

[19:00] <dukeleto> would anybody mind if I added *.rakudo to .gitignore in roast.git ?

[19:01] <pmichaud> jnthn: Iterable works far better as a type, I think.  I'm just not sure it should be Cool.

[19:01] <pmichaud> s/type/class/

[19:02] <pmichaud> I only stuck it in as Cool in June (while trying to explore the iterator/iterable details)  because I figured it allow me to avoid some early blockers

[19:02] <pmichaud> waitaminnit

[19:02] <pmichaud> that can't be the issue anyway, come to think of it.

[19:03] <pmichaud> rakudo:  say ~Cool.^methods

[19:03] <p6eval> rakudo 7517e3: OUTPUT«acos fmt trans eval chop rindex tanh subst Numeric chomp index IO chr acotanh trim-trailing from-radians capitalize pred atanh exp cosec lc p5chop chars to-radians sinh acotan lcfirst roots lines sec trim asec trim-leading cotanh cis log sech log10 rand sprintf truncate bytes

[19:03] <p6eval> ..sqrt …

[19:03] <pmichaud> why does Cool have a .pred/.succ ?

[19:03] <pmichaud> that doesn't seem right.

[19:03] *** Mowah left
[19:03] <pmichaud> augment class Cool { multi method succ() { (~self).succ } multi method pred() { (~self).pred }

[19:03] <pmichaud> }

[19:04] <pmichaud> I disagree.

[19:04] * pmichaud removes those and sees what happens.

[19:07] *** tbalazs left
[19:08] <colomon> dukeleto: I get a segmentation fault on ./perl6 t/spec/S19-command-line/dash-e.t on my 64-bit box

[19:09] <dukeleto> colomon: i'm not crazy!

[19:09] <colomon> so it looks like we do have some sort of issue.

[19:09] <colomon> dukeleto: your error can be duplicated.  I'm not willing to make any further diagnosis of your mental health.  ;)

[19:09] <dukeleto> colomon: my backtrace is in the gist. looks like the parrot fast runcore is corrupting memory somehow

[19:10] <dukeleto> colomon: touche ;)

[19:10] <dukeleto> colomon: i submitted it as a rakudobug

[19:10] <colomon> dukeleto: I think this is the point where we look to pmichaud...

[19:10] <dukeleto> yes, pmichaud recently had to deal with some funny business regarding rakudo+parrot+64bit linux

[19:13] <dukeleto> colomon: #77778

[19:14] *** Holy_Cow left
[19:15] <dukeleto> colomon: i added my backtrace to the ticket

[19:16] *** b0miva joined
[19:18] <colomon> dukeleto++

[19:19] <dukeleto> colomon: i asked for help on parrot-dev as well

[19:20] *** M_o_C joined
[19:22] <dukeleto> looks like roast.git commits don't get announced in here, eh?

[19:25] *** b0miva left
[19:28] *** b0miva joined
[19:28] *** M_o_C left
[19:36] *** b0miva left
[19:36] *** b0miva joined
[19:40] *** plainhao left
[19:42] <x3nU> i wonder, must be rakudo star installer MSI? nsis would be easier imho

[19:44] *** masak joined
[19:44] <masak> ahoy!

[19:44] <tadzik> ohai!

[19:45] <masak> sleep will pull me offline quite soon. but I thought I'd stop by :)

[19:47] *** patspam left
[19:49] *** patspam joined
[19:49] *** Mowah joined
[19:51] *** snearch joined
[19:51] <pmichaud> x3nU: it depends solely on who creates the file.  :)

[19:51] <masak> in the newly spec'd 'dir' function: "Only items that smart-match against this test are returned." is it the file names that are smartmatched, or IO objects representing the files?

[19:52] <pmichaud> x3nU: if you (or someone) wants to publish how-to-create-nsis or the nsis version, that'd be great. :)

[19:58] *** lichtkind joined
[19:59] *** Italian_Plumber left
[20:08] <dalek> rakudo: 43c27a9 | pmichaud++ | src/core/Cool.pm:

[20:08] <dalek> rakudo: Remove .succ and .pred from Cool.

[20:08] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/43c27a9fb51a9d200b1d9eab2d611773e9a1e612

[20:08] *** amkrankruleuen left
[20:12] <masak> rakudo: for^5 {say "$_ is {all([\+]1,map {92-.&ord},.comb)??""!!"in"}valid"given(<[ ]>xx 5).pick(*).join}

[20:12] <p6eval> rakudo 7517e3: OUTPUT«][[]][[][] is invalid␤[]][][][[] is invalid␤[]]]]][[[[ is invalid␤[[][[]]][] is valid␤]][[][[]][ is invalid␤»

[20:12] <masak> that's almost too short :)

[20:13] <tadzik> rakudo: my @list = 1, 2, 3; say .pred«@list # how do I do this correctly?

[20:13] <p6eval> rakudo 7517e3: OUTPUT«===SORRY!===␤Confused at line 22, near "say .pred\x{ab}"␤»

[20:13] <masak> tadzik: @list>>.pred

[20:13] <tadzik> masak: well, I wanted the example of the other-side-» :)

[20:13] <tadzik> (other than 2-arg operators)

[20:13] <masak> tadzik: method call is a postfix operator.

[20:14] <tadzik> oh, so » is for postfixes and « is for prefixes?

[20:14] <masak> aye.

[20:14] <pmichaud> rakudo:  my @list = 1,2,3;  .pred.say for @list;

[20:14] <p6eval> rakudo 7517e3: OUTPUT«0␤1␤2␤»

[20:15] *** aloha left
[20:16] *** nadim left
[20:17] *** [Coke] joined
[20:17] *** bacek left
[20:20] <dalek> rakudo: ce565f3 | moritz++ | src/Perl6/Actions.pm:

[20:20] <dalek> rakudo: enable :r and :ratchet outside of regexes

[20:20] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/ce565f3525f44e90837994704f37b542df63d894

[20:23] <lichtkind> is each official?

[20:23] <lichtkind> i dont see it in S03

[20:23] <masak> lichtkind: it's in S09.

[20:24] <lichtkind> thanks

[20:24] <masak> lichtkind: and it's conjectural.

[20:24] <masak> which I guess means that it's hesitatingly official.

[20:25] <masak> hm, erez++ just pointed me to the original "enable Perl 6 knock offs\nuse 5.010;" code snippet: http://perlmonks.org/?node_id=859596

[20:26] <masak> I can see how someone closer to Perl 5 than to Perl 6 might be upset by such a comment. it's not fair to Perl 5.10 to reduce it to being about "Perl 6 knock offs".

[20:26] *** tadzik left
[20:27] <pmichaud> does 'each' become official when yapsi implements it?  ;-)

[20:27] <masak> on the other hand, I don't believe in shooting people on sight, not even people who write thoughtless comments. http://twitter.com/erez/status/24090023075

[20:27] *** jaffa4 joined
[20:28] <masak> jaffa4! \o/

[20:28] <jaffa4> hi

[20:28] <masak> pmichaud: we'll just have to try it and see :)

[20:29] <pmichaud> masak: maybe he meant shoot as in "with a camera"  :)

[20:29] <pmichaud> in that context, I often shoot people on sight.  :)

[20:29] <masak> "You're cute. You ought to be shot on sight." hm.

[20:30] <masak> there are probably worse pick-up lines, but I can't think of any right now.

[20:31] <jnthn> I can think of worse ones. :-)

[20:31] <pmichaud> "You had me at 'Go away.'"  :-)

[20:31] <jnthn> lol

[20:31] <masak> that's a followup :P

[20:31] <pmichaud> is it still a followup if it's the first thing you say?  ;-)

[20:31] <masak> ooh, interesting.

[20:32] <masak> as a conversation starter, even? :)

[20:32] <masak> "You had me at 'Go away.'" -- "What?"

[20:32] <jnthn> It...could just work. :-)

[20:32] <jnthn> But I'll let somebody else do the research. :P

[20:32] <masak> I can think of worse ones. :)

[20:33] <pmichaud> I know a guy who started the conversation with his future wife with   "How am I doing so far?"

[20:34] *** tadzik joined
[20:34] <masak> Pretty well, apparently.

[20:35] <PerlJam> masak: could be pmichaud left out some information.  "... future ex-wife"   ;-)

[20:35] <pmichaud> I have no information on that.

[20:36] *** jaffa4 left
[20:37] <masak> jaffa4's exit message is intriguing, evocative, and wrong. :)

[20:37] *** b0miva left
[20:38] <[particle]> it becomes a movie called "Inception".

[20:38] <masak> :D

[20:38] *** b0m1ro joined
[20:38] <pmichaud> yes, I was just thinking how truly frightening that message could be if true.  :)

[20:38] <jnthn> It's all the more scary given I can never remember my dreams after I wake up from them. :-)

[20:39] <masak> pmichaud: it might be true, but "the same dream" never occurs since dreams have a unique object identity. :)

[20:39] *** patrickas joined
[20:39] <jnthn> struct Dream { ... }

[20:39] <jnthn> ;-)

[20:39] <masak> but Occam called, and he wants his razor back.

[20:40] <jnthn> I think I figured out how to implement most of the lexical multi-dispatch stuff efficiently today.

[20:40] <jnthn> However, I don't trust myself to implement it correctly tonight. :-)

[20:40] <masak> nice!

[20:40] * masak decides to go to sleep

[20:40] <masak> see you tomorrah, #perl6!

[20:40] * jnthn decides to have a beer

[20:40] <jnthn> night, masak

[20:41] <masak> night.

[20:41] *** masak left
[20:44] <[particle]> the lesson of the day from jnthn is, "trust, but beerify."

[20:44] <[particle]> i think reagan would approve.

[20:46] <pmichaud> http://code.google.com/p/chromium/issues/detail?id=54028  # a true bug report (might be old news here)

[20:46] <jnthn> In Soviet Russia, multiples dispatch you.

[20:48] <jnthn> "Perhaps the watch is a Microsoft product - have you tried taking it off and putting it back on again?

[20:48] <jnthn> "

[20:48] <jnthn> lol

[20:48] <jnthn> pmichaud: I hadn't seen this one. :-)

[20:48] <jnthn> :-)

[20:48] <pmichaud> "Hate to bring it up, but Oracle holds patents..."

[20:49] <jnthn> yes, just got to that one :-)

[20:50] <jnthn> systemet++ # stocking lots of German beer to celebrate Oktoberfest

[20:50] <jnthn> systemet-- # not at German prices

[20:51] * jnthn should actually to go that festival one day...

[20:52] *** literal left
[20:54] *** Italian_Plumber joined
[20:57] <dalek> 6model: 6516ba1 | jnthn++ | dotnet/runtime/Runtime/Lexpad.cs:

[20:57] <dalek> 6model: Mysteriously forgot to commit Lexpad.cs at some point in the past. :/

[20:57] <dalek> 6model: review: http://github.com/jnthn/6model/commit/6516ba1931e449bd223f9e4891d2d7842b351084

[20:58] *** literal joined
[20:58] *** whiteknight joined
[21:01] *** Italian_Plumber left
[21:01] *** literal_ joined
[21:01] *** literal left
[21:08] *** stepnem left
[21:12] *** stepnem joined
[21:12] *** mfollett left
[21:14] *** patspam left
[21:17] <diakopter> as an exercise in church camp one summer, we were given bibles to place in the campfire, ostensibly to distinguish Jesus as the self/Bible-proclaimed "Word of God" (in the flesh) from the much more abstract "Word of God" (used in the Old Testament), that referred to the direct and indirect verbal communications from God, including the scriptures.

[21:18] <tadzik> are you referring to the Koran burning case?

[21:18] <diakopter> obliquely

[21:19] *** b0m1ro left
[21:20] *** rainerschuster joined
[21:21] <sjohnson> hehe

[21:21] <sjohnson> thanks for sharing that interesting fact

[21:22] <tadzik> insightful indeed

[21:22] *** mfollett joined
[21:23] <tadzik> btw, anyone interested in a module installer working on windows?

[21:23] <jnthn> Yes

[21:24] <tadzik> jnthn: I'm thinking about making neutro work on windows, so it could possibly make it into R*

[21:24] <jnthn> Nice

[21:24] <tadzik> unfortunately, I have no windows anywhere and my virtualbox is dead for some time

[21:24] <tadzik> also, I have very little experience with it

[21:25] <tadzik> jnthn: so, to start, is 'make' a problem?

[21:26] <tadzik> I heard 'no' some day, but I'm thinking about someone who has just installed R* on his/her fresh Windows machine

[21:26] <jnthn> There's no "make" by default on Windows. There are various makes that run there, one being nmake 

[21:26] <jnthn> On a fresh machine, no.

[21:26] <tadzik> alright, pls approach then

[21:26] <jnthn> approaching

[21:26] <jnthn> oh, wait, it wasn't a request...

[21:26] <jnthn> :-)

[21:26] <tadzik> :) how about module install path? It's a fixed path in R*, isn't it?

[21:26] <diakopter> jnthn: probably best to start with the one that comes with strawberry perl - dmake

[21:27] <tadzik> rakudo: say $*VM<CONFIG><OS> # this way?

[21:27] <p6eval> rakudo ce565f: OUTPUT«Any()␤»

[21:27] <jnthn> diakopter: Maybe, apart from I don't use that... :S

[21:27] <jnthn> diakopter: And probably not anyone building with MS VC++

[21:27] <diakopter> yeah but, I bet almost no rakudo user will also use visual studio

[21:27] <tadzik> why not?

[21:28] <jnthn> It's probably best to just not expect there to be a make program, imho.

[21:28] <diakopter> of course.  I was suggesting supplying dmake the same way strawberry perl does.

[21:28] <tadzik> yeah, that's a good think imho

[21:29] <tadzik> rakudo: say $*VM<config><osname>

[21:30] <p6eval> rakudo ce565f: OUTPUT«linux␤»

[21:30] *** Ross left
[21:30] <tadzik> looks like I'm about to steal a part of pls

[21:30] <diakopter> rakudo: say $*VM<config><>

[21:30] <p6eval> rakudo ce565f: OUTPUT«12/home/p6eval/rakudo/parrot818"$(PERL) -MExtUtils::Command -e cp/home/p6eval//p2/share/doc181-lm -L/usr/lib  -licuuc -licudata -lm__attribute__ ((noinline))%.15g.so$(PERL) -MExtUtils::Command -e rm_f/home/p6eval//p2/etcamd64definet/compilers/pct/*.t t/compilers/pge/*.t

[21:30] <p6eval> ..t/compilers…

[21:30] <diakopter> erm

[21:30] <tadzik> jnthn: so where should a module be installed to on windows?

[21:32] <tadzik> oh crap, the git issue

[21:32] <tadzik> well, not bad. Do git commands work as on unixes if git is installed?

[21:32] <diakopter> tadzik: well... you'd have to pick a "standardized" location (to which to install modules)

[21:32] <jnthn> tadzik: Yes

[21:32] <tadzik> diakopter: I think R* alredy has one it puts the modules in

[21:32] <diakopter> same as on unix, yes, if the person puts them in their path

[21:33] <tadzik> diakopter: so I think it'd be a nice place

[21:33] <diakopter> tadzik: ok then :) why'd you ask

[21:33] <tadzik> as I said, I don't know much about windowses

[21:33] <tadzik> back in the days I used it, I was mostly playing games

[21:35] <diakopter> Also, the burning of an English bible was used to remind us how English bibles are a-dime-a-dozen, but in lots of other languages are much more precious/rare/nonexistent.

[21:38] *** snearch left
[21:44] *** patspam joined
[21:44] *** patspam left
[21:49] *** Ross joined
[21:56] <patrickas> rakudo: say (1, 2 , {last if $_>=5; $_+1} ... *)

[21:56] <p6eval> rakudo ce565f: OUTPUT«12345␤»

[21:57] *** literal_ is now known as literal

[22:01] *** b0m1ro joined
[22:02] *** ruoso left
[22:03] *** kjeldahl left
[22:04] *** Ross left
[22:04] *** rainerschuster left
[22:08] *** bacek joined
[22:09] *** ash_ joined
[22:10] *** aloha joined
[22:10] <ash_> you know what would be nice, in terms of documentation anyway 

[22:11] <ash_> php does this on their official site, just do php.net/some_function and you get linked directly to the docs for that function, it might be nice to setup something like that for rakudo or the spec 

[22:12] *** timbunce joined
[22:12] <ash_> like, rakudo.org/grep or docs.rakudo.org/hyper-oprators or something, i duno just thinking outloud 

[22:13] <pmichaud> ash_: Well volunteered, sir!  :-)

[22:14] <tadzik> :D

[22:16] *** tadzik left
[22:19] *** hercynium joined
[22:24] <ash_> maybe when try.rakudo.org is done :P 

[22:24] *** jaldhar joined
[22:24] <ash_> i'd like to be able to do: help grep and have that integrated into try.rakudo.org (as a command for the online terminal) 

[22:25] <ash_> maybe perldoc grep, i haven't decided on syntax yet

[22:25] <ash_> doc grep? /shrug 

[22:29] <jnthn> "wtf is grep" :-)

[22:30] *** mfollett left
[22:30] <patrickas> pull request sent for series new spec patch, review / comments welcome :-)

[22:34] <patrickas> pmichaud: I did eventually solve the laziness issue of the LHS you had commented about a couple of weeks ago. With this new patch we can finally have infinite lists on the lhs of the series op.

[22:34] *** nadim joined
[22:38] *** nimiezko joined
[22:39] *** timbunce left
[22:41] <nimiezko> hello

[22:44] <patrickas> hello nimiezko

[22:47] *** spq1 left
[22:54] *** jaldhar left
[22:54] *** jhuni joined
[23:17] <sjohnson> grep!

[23:17] <sjohnson> grep and map, perl5's favourite cousins

[23:17] *** patrickas left
[23:21] *** meppl left
[23:28] *** frooh left
[23:28] *** frew joined
[23:28] <sorear> good * #perl6

[23:37] * sorear is struggling to implement rule a { b { $<X> = 1; } c } and rule a { <.b> }; method b($¢) { $¢.<X> = 1; $¢ }

[23:37] <sorear> both patterns are used in STD, a lot

[23:38] <sorear> erm. method b { self.<X> = 1; self }

[23:40] *** justatheory left
[23:40] *** justatheory joined
[23:43] *** justatheory left
[23:54] *** mberends left
[23:56] *** cdarroch left
