[00:00] <dalek> niecza: 9343a2c | pmurias++ | docs/nam.pod:

[00:00] <dalek> niecza: document the sink op

[00:00] <dalek> niecza: review: https://github.com/sorear/niecza/commit/9343a2c559

[00:00] <sbp> could call them the Orders. Perl 1 was doric, Perl 2 Ionic. Perl 3 was Corinthian, and Perl 4 was Composite. Perl 5 was baroque, and you can insert your own Perl 6 architecture joke here

[00:01] <masak> sbp: I like. and, by extension, Perl 6 is the Chaos. :)

[00:02] <sbp> a Camelia flaps its wings in Brazil and a Perl 6 happens in a tiny shack in JAPH's mind

[00:02] <masak> a tiny bikeshed, more like...

[00:02] * masak hides

[00:03] <sbp> :-)

[00:06] <MysqlForumTroll> Perl 7 will be called Madonna because Madonna is seven letters long.

[00:06] <masak> MysqlForumTroll: I can see no flaw in your logic.

[00:06] <masak> MysqlForumTroll: what's your impression of Perl 6 so far?

[00:07] <MysqlForumTroll> masak: Still lokng at syntax

[00:07] <masak> understandable.

[00:07] <masak> MysqlForumTroll: you had been using Perl 5 before, yes?

[00:08] <MysqlForumTroll> masak: I like the new function prototyping syntax with the arguments in-line.

[00:08] <masak> me too.

[00:08] <MysqlForumTroll> masak: But also C++, some PHP, and Java

[00:09] <masak> sometimes when I code in Perl 5, I start writing a function signature... then I go "oh, right :/"

[00:09] <masak> the lapses only last a couple of seconds, generally.

[00:09] <MysqlForumTroll> My only concern with Perl 6 is making sure I have stuff I need like postgres, good integration with a web server, etc

[00:10] <masak> I wish there was more I could say to allay that concern. in truth, it's a bit of a Wild West right now.

[00:10] <sbp> just pop the old "v6; use v6; use Perl:<6.*>; use Perl:ver<6.*>; module GLOBAL; my $xmlns = 'http://perl6.org/perl6';" at the top, easily fixed

[00:10] <masak> things are untidy and up-for-grabs.

[00:10] <sorear> sbp: "postmodern"

[00:11] <sbp> sorear: your submission for a PERL-6 algorithm name has been received by NIST and progressed to the final round. you should hear more about the result some time in 2012, as long as your implementation is not so fast as to scare the algorithmic crap out of us

[00:11] *** lue left
[00:16] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[00:16] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_operator_tablet

[00:16] *** perimosocordiae left
[00:17] *** lue joined
[00:18] <lue> hello again o/

[00:19] <wolverian> masak: MooseX::Declare (;

[00:19] <masak> rakudo: "0123456789", { .substr(1) ~ .substr(0, 1) } ...^ "0123456789"

[00:19] <p6eval> rakudo a52525:  ( no output )

[00:19] <masak> rakudo: .say for "0123456789", { .substr(1) ~ .substr(0, 1) } ...^ "0123456789"

[00:20] <p6eval> rakudo a52525:  ( no output )

[00:20] <wolverian> (re: sub signatures)

[00:20] <masak> wolverian: *nod*

[00:20] <masak> wolverian: I've used it occasionally. it's a good idea.

[00:20] <wolverian> I'm actually using it at work now.

[00:20] <wolverian> and Moose::Autobox.

[00:20] <masak> wolverian: thing is, some things are too "small" for Moose, and then I don't use it.

[00:20] <wolverian> sure.

[00:21] <masak> rakudo: .say for "1234567890", { .substr(1) ~ .substr(0, 1) } ...^ "0123456789"

[00:21] <p6eval> rakudo a52525: OUTPUT«1234567890␤2345678901␤3456789012␤4567890123␤5678901234␤6789012345␤7890123456␤8901234567␤9012345678␤»

[00:24] *** xinming left
[00:25] *** xinming joined
[00:29] *** masonkramer left
[00:29] *** masonkramer joined
[00:32] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_operator_tablet

[00:35] *** MysqlForumTroll is now known as Telsa2point0

[00:37] <masak> rakudo: .say for [1..4], *.reverse ... [1..4].reverse

[00:37] <p6eval> rakudo a52525: OUTPUT«1 2 3 4␤3␤2␤1␤»

[00:37] <masak> is this right? :/

[00:37] <masak> rakudo: .WHAT.say for [1..4], *.reverse ... [1..4].reverse

[00:37] <p6eval> rakudo a52525: OUTPUT«Array()␤Int()␤Int()␤Int()␤»

[00:38] <colomon> ai ai ai

[00:38] <masak> what demotes it from Array to Int?

[00:38] <masak> was it something I said? :/

[00:39] <colomon> that line hurts my vicodin-adled brain

[00:39] <wolverian> I can't read that line at all :)

[00:39] <wolverian> the second part anyway

[00:39] <masak> don't you guys start, too... :P

[00:39] <colomon> rakudo: say ([1..4], *.reverse ... [1..4].reverse).perl

[00:39] <p6eval> rakudo a52525: OUTPUT«(([1, 2, 3, 4]), [3, 2, 1])␤»

[00:39] <masak> huh.

[00:40] <masak> ...*what*?

[00:40] <colomon> rakudo: (*.reverse)([1..4])

[00:40] <p6eval> rakudo a52525:  ( no output )

[00:40] <masak> rakudo: say (*.reverse)([1..4])

[00:40] <p6eval> rakudo a52525: OUTPUT«4321␤»

[00:41] <colomon> rakudo: say ([1,2,3,4], *.reverse ... [1..4].reverse).perl

[00:41] <p6eval> rakudo a52525: OUTPUT«(([1, 2, 3, 4]), [3, 2, 1])␤»

[00:41] <colomon> why does it stop, I wonder?

[00:42] <colomon> rakudo: say (*.reverse)([1..4]).perl

[00:42] <p6eval> rakudo a52525: OUTPUT«(4, 3, 2, 1)␤»

[00:42] <masak> why does it stop? why does it arrive at [3, 2, 1]?!?

[00:43] <lue> rakudo: say ([1,2,3,4], *.reverse ... [1..5].reverse).perl

[00:43] <p6eval> rakudo a52525: OUTPUT«(timeout)»

[00:43] <colomon> oh!

[00:43] <colomon> lue++

[00:43] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_operator_tablet

[00:43] * masak is still *completely* lost

[00:43] <lue> I guess I just did something important.

[00:43] <colomon> rakudo: say ([1,2,3,4], *.reverse ... *)[^4].perl

[00:43] <p6eval> rakudo a52525: OUTPUT«([1, 2, 3, 4], (4, 3, 2, 1), (1, 2, 3, 4), (4, 3, 2, 1))␤»

[00:44] <masak> something with... Parcels...?

[00:44] * masak still doesn't see it

[00:44] <masak> it must be late where I am.

[00:45] <colomon> Second [1..4].reverse is being treated like it is .... 4, 3, 2, 1

[00:45] <masak> oh!

[00:45] <masak> colomon++

[00:45] <colomon> rakudo: say [1, 2, 3, 4] ~~ 4

[00:45] <p6eval> rakudo a52525: OUTPUT«Bool::True␤»

[00:46] <colomon> so it returns the first element, then the termination test passes, then it throws in 3, 2, 1 as extra RHS elements.

[00:46] <colomon> afk

[00:46] <masak> :)

[00:48] <lue> rakudo: my @a = <code test debug> ... "done"; # ooc

[00:48] <p6eval> rakudo a52525: OUTPUT«(timeout)»

[00:48] *** xinming left
[00:49] <lue> If I could find out a way to make <code test debug> cycle continuously... [until you're "done", of course]

[00:50] *** QinGW joined
[00:53] <colomon> rakudo: say (<code test debug> xx *)[^10].perl

[00:53] <p6eval> rakudo a52525: OUTPUT«(("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"))␤»

[00:53] <colomon> rakudo: say (<code test debug> xx *).flat[^10].perl

[00:53] <p6eval> rakudo a52525: OUTPUT«("code", "test", "debug", "code", "test", "debug", "code", "test", "debug", "code")␤»

[00:54] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_operator_tablet

[00:56] <colomon> or if you don't like that

[00:57] <colomon> rakudo: say ({"code", "test", "debug"} ... "done")[^10].perl

[00:57] <p6eval> rakudo a52525: OUTPUT«(("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"))␤»

[00:58] <colomon> rakudo: say ({"code", "test", "debug"} ... "done").flat.[^10].perl

[00:58] <p6eval> rakudo a52525: OUTPUT«(("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"), ("code", "test", "debug"))␤»

[00:58] <colomon> errr.... not sure about the lack of flat there.

[00:58] <colomon> that may be a sequence op bug.

[00:58] <lue> It's my first stab at masak's mini-contest ^^^. I'll probably come up with more clever uses later :) .

[00:58] <colomon> mini-contest?

[00:59] * colomon is still working on masak's big contest

[01:00] <lue> [14:10:44 (PST)] <masak> new mini-contest: find inspiring and out-of-the-box uses of the sequence operator!

[01:00] <lue> [22:10 UTC I believe]

[01:00] <colomon> ah

[01:01] *** coldhead joined
[01:01] <masak> I'm still struggling with an entry to my own mini-contest.

[01:01] <masak> seriously evil code.

[01:05] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_operator_tablet

[01:06] <colomon> rakudo: my @church := -> &f { -> $x { $x } }, -> &g { -> &f { -> $x { &f(&g(&f)($x)); }; }; } ... *

[01:06] <p6eval> rakudo a52525:  ( no output )

[01:07] <colomon> rakudo: my @church := -> &f { -> $x { $x } }, -> &g { -> &f { -> $x { &f(&g(&f)($x)); }; }; } ... *; say @church[4]

[01:07] <p6eval> rakudo a52525: OUTPUT«_block188␤»

[01:07] *** roen joined
[01:07] <colomon> dunno if that's right or not, too lazy to find out atm

[01:07] <colomon> http://justrakudoit.wordpress.com/2010/04/25/church-numerals/

[01:10] *** xinming joined
[01:10] *** pmurias left
[01:11] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[01:14] * masak thinks that the Perl 6 variant of the Schwartzian Transform will be "make list into pairs, do a .grep or a .first on the values, then read out the keys"

[01:16] <masak> rakudo: say [3, 4, 1000, 5, 1].pairs.max(*.value).key

[01:16] <p6eval> rakudo a52525: OUTPUT«2␤»

[01:16] <TimToady> I tend to do it the other way around, with the .value being the payload, and the .key being the schwartzified data

[01:16] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_operator_tablet

[01:16] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[01:16] <masak> TimToady: how would you write the above?

[01:17] <masak> by the way, "schwartzified data" is a really beautiful phrase.

[01:18] *** Sarten-X left
[01:18] <masak> "Look, the data isn't gone, it's just schwartzified!"

[01:19] <TimToady> well, in this case the index is the schwartzified data--you'd do pairs to get the keys to look at

[01:19] <masak> true.

[01:20] <masak> and I can't really argue that it should be the other way, because those indexes are the array equivalent of keys.

[01:20] <masak> so it's just a wrinkle in the waterbed mattress, I guess.

[01:20] <colomon> masak: snippet from my p4: $board.stones.pairs.grep(*.value).map(*.key).join(', ')

[01:20] <masak> nice.

[01:21] <colomon> I was pleased, for sure.  :)

[01:21] <masak> looking forward to everybody's solutions.

[01:22] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_operator_tablet

[01:22] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[01:22] <masak> I think I will send out an email to all 18 contestants tomorrow, urging people to submit early and not to sit on solutions too long.

[01:22] <colomon> ooo, why?

[01:22] * colomon wants to make his solutions purty

[01:22] <masak> not because I will judge latecomers differently... just that I want many solutions. :)

[01:23] <masak> sure, feel free to polish your solutions, if you think you have enough time.

[01:23] <colomon> I'm quite curious if anyone other than moritz_ and I will finish.

[01:23] * colomon is still being optimistic that his p5 will work one day

[01:23] * masak divulges nothing

[01:23] <TimToady> for examples of schwartzianness, see both solutions in http://rosettacode.org/wiki/Hofstadter-Conway_$10,000_sequence#Perl_6

[01:24] <TimToady> it relies on the fact that max on a pair compares the keys before the values

[01:24] <masak> sounds familiar.

[01:24] <TimToady> since max is really just a mini-sort

[01:24] <masak> yes, I've seen that one.

[01:24] <masak> .max is .sort[*-1] :)

[01:25] <TimToady> the Z=> is particularly fun

[01:25] *** lichtkind joined
[01:25] <masak> yeah, that's one of moritz_' favorites.

[01:25] <TimToady> it can be viewed as a say of attaching (void*) data :)

[01:25] <TimToady> *way

[01:25] <masak> :)

[01:26] *** Vlavv_ left
[01:27] <masak> TimToady: hey, you're nesting if-for-if statement modifiers!

[01:27] *** rgrau left
[01:27] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_operator_tablet

[01:27] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[01:30] <TimToady> masak: which is perfectly fine as long as you parenthesize

[01:30] <masak> right.

[01:30] <masak> so the parsing rules allowing if-inside-for but not vice versa are more for the parser than for the programmer?

[01:31] *** am0c joined
[01:31] <TimToady> it's more to prevent people from writing list comprehensions backwards

[01:32] <TimToady> since a lot of languages put the conditional to the right of the loop, despite it logically going inside

[01:32] <colomon> I've got some sort of weird wrong line number in error issue going on with my p5 code.  :\

[01:32] <TimToady> is there an if/then/else?

[01:33] <masak> TimToady: I see. hadn't really noticed that other languages have it backwards.

[01:33] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[01:34] *** Telsa2point0 is now known as Fuld

[01:34] <TimToady> http://rosettacode.org/wiki/Category:Haskell for instance

[01:34] *** shi left
[01:35] <TimToady> or http://rosettacode.org/wiki/Category:OCaml

[01:35] *** Eth4n left
[01:35] <TimToady> gah

[01:36] <TimToady> http://rosettacode.org/wiki/List_comprehensions#Haskell

[01:36] <masak> ah.

[01:36] <TimToady> http://rosettacode.org/wiki/List_comprehensions#OCaml

[01:36] <TimToady> http://rosettacode.org/wiki/List_comprehensions#Python

[01:37] <masak> I see it with Python. Think I'm too tired to see it with Haskell and O'Caml.

[01:38] <masak> those two don't seem to nest at all.

[01:38] *** Eth4n joined
[01:38] *** Eth4n left
[01:40] <lue> blag toast! https://rdstar.wordpress.com/2010/12/31/core-plus-plus-concept/

[01:40] *** Vlavv_ joined
[01:42] <masak> lue: seems to me what you call "Core++", pmichaud calls "different distributions of the same implemenatation". note that your solutions is singular, while pmichaud's is plural.

[01:42] <masak> solution*

[01:42] <sjohnson> Oh Camel

[01:42] <masak> lue: (and I do like your thinking posts. keep'em coming.)

[01:43] <lue> I've never heard of pmichaud talk about that. Then again, I've only seen pmichaud in backlog form lately...

[01:43] <masak> pmichaud: have you listened to the recent interview with pmichaud?

[01:44] <masak> er, meant to lue.

[01:44] <masak> lue: he mentions it there.

[01:44] <lue> I just want a nice solution to that "should it be core?" tug-of-war. This is the first idea off the top of my head.

[01:44] <lue> I have not seen that interview.

[01:44] <masak> I first heard him talk of the idea during YAPC::EU 2009.

[01:46] <lue> your description of what pmichaud talks about sounds similar to Fedora Spins, if I'm not mistaken. Fedora for artists, Fedora for mathematicians, Fedora for Time Lords, etc.

[01:47] <masak> lue: http://www.twit.tv/floss140

[01:47] <masak> it's a long interview, but I think you'll enjoy the historical perspective.

[01:49] <lue> please wait several moments while I download and convert the audio from .mp3 to .ogg ...

[01:49] * lue screams "I need a new computer!" to himself

[01:50] <masak> actually, I'm going to bedz.

[01:50] <masak> 'night.

[01:50] *** masak left
[01:52] <lue> I'll deal with that later. afk!

[02:02] <lopnor> hello, is there anyone who can't download rakudo-star-2010-12 with 403 error?

[02:02] *** mathw joined
[02:05] <flussence> lopnor: yep, broken here too

[02:06] <lopnor> ah, i'm not the only one...

[02:10] <colomon> lopnor: what url are you using?

[02:10] <lopnor> it's redirected and finally http://cloud.github.com/downloads/rakudo/star/rakudo-star-2010.12.tar.gz

[02:11] *** lamstyle joined
[02:11] <lopnor> it failed from my home (japan) and ec2(us-west), ec2(ireland).

[02:12] <lopnor> i think it's s3 or github problem.

[02:14] *** fhelmberger joined
[02:18] *** gbacon joined
[02:19] *** icwiener left
[02:20] *** felliott joined
[02:20] <colomon> I can verify I get access denied as well.  Sigh.

[02:25] <sjohnson> doh!

[02:28] *** zzh joined
[02:29] *** zzh left
[02:51] *** qiuhw joined
[02:56] *** agentzh joined
[02:57] *** Trashlord left
[02:59] *** Trashlord joined
[03:01] *** drbean left
[03:10] <diakopter> lopnor: I was able to download it from https://github.com/downloads/rakudo/rakudo/rakudo-2010.12.tar.gz

[03:10] <diakopter> oops

[03:10] <diakopter> that's not star

[03:11] <diakopter> (sorry, yeah, I get access denied on star)

[03:11] <lopnor> yes, i need star.

[03:11] <dalek> sprixel: 7634713 | diakopter++ | / (7 files):

[03:11] <dalek> sprixel: fixed linebreak-terminated block statements.  *finally*.

[03:11] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/763471387e

[03:35] <sorear> rakudo: say ord "ab";

[03:35] <p6eval> rakudo a52525: OUTPUT«97␤»

[03:35] <sorear> rakudo: say ord "";

[03:35] <p6eval> rakudo a52525:  ( no output )

[03:35] <sorear> rakudo: say ord ""; say "alive"

[03:35] <p6eval> rakudo a52525: OUTPUT«alive␤»

[03:39] *** felliott left
[03:43] *** moq joined
[03:44] *** yarrak left
[03:45] <moq> is there a mirror for rakudo 12? http://cloud.github.com/downloads/rakudo/star/rakudo-star-2010.12.tar.gz is broken.

[03:45] *** lichtkind left
[03:46] *** yarrak joined
[03:48] <moq> anybody know how to get a hold of pmichaud?  http://cloud.github.com/downloads/rakudo/star/rakudo-star-2010.12.tar.gz is broken.

[03:48] <moq> nm, found his pobox

[04:03] *** moq left
[04:09] *** felliott joined
[04:19] *** roen left
[04:20] *** moqqq joined
[04:24] *** dukeleto left
[04:24] *** dukeleto joined
[04:26] *** felliott left
[04:41] <sorear> perl6: say ord("").perl

[04:41] <p6eval> niecza v1-35-gc9d17a7: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤       'ord' used at line 1␤Check failed␤»

[04:41] <p6eval> ..pugs, rakudo a52525: OUTPUT«undef␤»

[04:42] <sorear> rakudo: say ord("").WHAT

[04:42] <p6eval> rakudo a52525: OUTPUT«Failure()␤»

[04:42] <sorear> undef, really?

[04:47] <TimToady> maybe it just stringifies to that?

[04:47] <TimToady> anyway, definitely a bit suboptimal

[04:47] <TimToady> rakudo: say Failure.perl

[04:47] <p6eval> rakudo a52525: OUTPUT«Failure␤»

[04:48] <TimToady> rakudo: say ord("").PARROT

[04:48] <p6eval> rakudo a52525: OUTPUT«Failure␤»

[04:49] <TimToady> rakudo: say ord("").perl

[04:49] *** orafu left
[04:49] <p6eval> rakudo a52525: OUTPUT«undef␤»

[04:49] *** orafu joined
[04:51] <TimToady> ooh, spectests hung in reverse.t

[04:51] <flussence> the undef comes from rakudo/src/builtins/Exception.pir:92

[04:51] <flussence> if anyone's curious

[04:51] <sorear> Now that perl no longer requires a specific encoding, do ~& et al still make sense?

[04:52] <TimToady> they do on buffers

[04:54] <flussence> not so useful for strings (assuming they operate on codepoints there at all)

[04:54] <TimToady> looks like nesting.t is going to hang too

[04:55] *** arlinius joined
[04:56] <TimToady> makes a nice lap-warmer when it's 25℉

[04:59] *** justatheory left
[05:01] *** orafu left
[05:01] *** orafu joined
[05:07] <TimToady> and the trig tests appear to be busted

[05:14] *** alester joined
[05:16] <TimToady> http://rosettacode.org/wiki/List_comprehensions#JavaScript is also inside out, along with Haskell, OCaml, and Python

[05:17] *** QinGW left
[05:19] <TimToady> I'm only counting the ones that are structured as TUPLE, LISTS, GUARD, not the ones that are LISTS, GUARD, TUPLE, which are really just standard loops

[05:19] *** QinGW joined
[05:23] *** plobsing left
[05:26] *** gbacon left
[06:02] *** QinGW left
[06:14] *** aindilis left
[06:22] *** nakashiman joined
[06:25] *** moq2 joined
[06:26] <sorear> S03:2131 is a glaring fossil

[06:43] *** alester left
[06:49] *** chitragupt joined
[06:59] *** JimmyZ joined
[07:00] <JimmyZ> hello, speaking of hosting rakudo.org on wordpress.com, Can I visit it if it's on wordpress.com?

[07:02] *** agentzh left
[07:03] *** agentzh joined
[07:09] *** nakashiman left
[07:10] *** nakashiman joined
[07:11] *** JimmyZ left
[07:20] *** moqqq left
[07:21] *** moq2 left
[07:26] *** sanxiyn joined
[07:33] <dalek> niecza: b709f82 | sorear++ | v6n/C (2 files):

[07:33] <dalek> niecza: [v6] Add Perl6 translation of CgOp

[07:33] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b709f820a4

[07:33] <dalek> niecza: 520f58d | sorear++ | lib/Builtins.cs:

[07:33] <dalek> niecza: Add builtins for chr, ord, +|, +&, +^

[07:33] <dalek> niecza: review: https://github.com/sorear/niecza/commit/520f58d98b

[07:33] <dalek> niecza: 4ff9853 | sorear++ | / (3 files):

[07:33] <dalek> niecza: add bitshift operators

[07:33] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4ff98535b8

[07:36] *** araujo left
[07:36] *** moqqq joined
[07:36] <moqqq> is there a perltidy fork or config for perl6?

[07:44] <TiMBuS> i don't think so

[07:58] *** dukeleto left
[07:59] *** dukeleto joined
[08:00] *** kaare joined
[08:01] *** kaare is now known as Guest3560

[08:20] *** sftp left
[08:20] *** qiuhw left
[08:20] *** sftp joined
[08:20] *** qiuhw joined
[08:21] *** yarrak left
[08:31] *** yuki joined
[08:39] *** pothos left
[08:40] *** y3llow left
[08:43] <LeifD> Is there a method like pythons dir function? So I can get what methods an object provides at runtime?

[08:45] <sorear> $obj.^methods

[08:45] <LeifD> Thank you

[08:45] <LeifD> What does the ^ mean?

[08:47] <sanxiyn> LeifD: It is .^, not ^.

[08:47] <sanxiyn> It means meta-method call.

[08:48] <LeifD> So methods is something larger than the object I '.^'

[08:50] *** drbean joined
[08:55] *** nakashiman left
[08:56] *** nakashiman joined
[08:57] *** nakashiman left
[08:58] *** VXZ left
[09:13] *** sanxiyn left
[09:17] <dalek> niecza: 2f26901 | sorear++ | v6n/CClass.pm6:

[09:17] <dalek> niecza: [v6] Complete translation of CClass

[09:17] <dalek> niecza: review: https://github.com/sorear/niecza/commit/2f269018c7

[09:17] <dalek> niecza: 32d94f6 | sorear++ | / (4 files):

[09:17] <dalek> niecza: [v6] Translate cclass.t, make it pass

[09:17] <dalek> niecza: review: https://github.com/sorear/niecza/commit/32d94f6df0

[09:17] *** sanxiyn joined
[09:17] <sorear> this is proving more painful than I expected

[09:18] *** sanxiyn left
[09:18] * sorear starts keeping a TODO list, wonders if it should be on github tracker

[09:19] *** VXZ joined
[09:27] *** sftp_ joined
[09:27] *** sftp left
[09:29] *** roen joined
[09:30] *** yuki left
[09:31] *** diakopter___ joined
[09:31] <diakopter___> sigh

[09:34] <diakopter___> anyone around?

[09:35] <diakopter___> in the irclog above, when my client was disconnected at :22, was it timed out, or did the client "quit"?

[09:44] <sjohnson> hi

[09:44] <sjohnson> diakopter___: 01:21:19             <-- | diakopter (~M8YCjC56g@209.9.237.164) has quit (Ping timeout: 241 seconds)

[09:44] <diakopter___> hm, ok; thanks

[09:44] <sjohnson> diakopter___________________: no worries

[09:44] <sjohnson> :)

[09:50] <moritz_> phenny: ask masak why he thought removal of the optional parameter vs. multi was necessary

[09:50] <phenny> moritz_: I'll pass that on when masak is around.

[09:51] *** sorear joined
[09:51] *** diakopter joined
[09:52] <diakopter___> PHEW

[09:53] *** diakopter___ left
[09:58] *** agentzh left
[09:59] *** TimToady joined
[09:59] *** hanekomu joined
[10:01] *** qiuhw left
[10:18] *** hanekomu left
[10:19] *** roen left
[10:25] *** itz joined
[10:25] *** sftp_ left
[10:26] <itz> I get 403 for http://cloud.github.com/downloads/rakudo/star/rakudo-star-2010.12.tar.gz is that a feature?

[10:26] *** sftp_ joined
[10:27] <moritz_> nope

[10:27] <itz> I tried lynx, wget and chromium

[10:28] <moritz_> seems like a github problem

[10:28] <moritz_> the actual download URL is https:// 

[10:28] <moritz_> and then they redirect you to a http:// URL

[10:28] <moritz_> and then deny access

[10:30] <moritz_> I'm asking in #github

[10:31] <itz> ok ty, I'm rolling my own via git 

[10:31] <dalek> roast: e76dd4c | moritz++ | / (184 files):

[10:31] <dalek> roast: s/done_testing/done/ as per recent S24 changes

[10:31] <dalek> roast: review: https://github.com/perl6/roast/commit/e76dd4c730

[10:31] <dalek> roast: ee3b704 | moritz++ | S03-operators/context.t:

[10:31] <dalek> roast: [context.t] better test descriptions

[10:31] <dalek> roast: review: https://github.com/perl6/roast/commit/ee3b70489c

[10:31] <sjohnson> mor + itz

[10:31] <sjohnson> :3

[10:31] <moritz_> itz: the star build system isn't very cross platform, and I don't know if it has been tested on anything but linux

[10:32] <moritz_> sjohnson: you forgot the _

[10:32] <sjohnson> heh

[10:32] <sjohnson> btw moritz_, i rewrote some of your hugme bot to do my own stuff

[10:32] <itz> moritz_: ok well I'm testing on FreeBSD 8.2 as a side effect then

[10:32] <moritz_> itz++

[10:32] <sjohnson> all sorts of silly stuff like fortune telling and things like that, thanks for writing the base for it

[10:32] <moritz_> :-) yw

[10:33] <sjohnson> fortune telling based on who asks for it, is always a good laugh in a channel of about 10 regulars

[10:35] <moritz_> "you're going to get involved in long, fruitless discussions"

[10:35] <sjohnson> haha

[10:37] *** M_o_C joined
[10:38] <dalek> rakudo: 6a9a38f | moritz++ | Test.pm:

[10:38] <dalek> rakudo: rename done_testing to done; leave a die() in place

[10:38] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/6a9a38f3b4

[10:45] *** daxim joined
[10:50] *** am0c left
[10:57] *** sftp joined
[10:58] *** sftp_ left
[11:01] *** araujo joined
[11:01] *** araujo left
[11:01] *** araujo joined
[11:02] *** masak joined
[11:02] <masak> oh hai, zebras!

[11:02] <phenny> masak: 09:50Z <moritz_> ask masak why he thought removal of the optional parameter vs. multi was necessary

[11:03] <masak> not necessary, just... superfluous. implementation suggestions in the spec are usually of the non-obvious kind, like when things seem unimplementable.

[11:08] <LeifD> Does parrot jit to native'ish code?

[11:09] <masak> LeifD: that's a question better suited for #parrot over at irc.perl.org, I think.

[11:10] <LeifD> ok

[11:10] *** qiuhw joined
[11:10] <sjohnson> masak: yo

[11:11] <masak> y0

[11:15] <sjohnson> sjohnson.goto(bed);

[11:16] <masak> moritz_: I could add back the wording about optional parameter vs. multi, but then I would also like to point out the possibility of doing *@_ and analyzing the arguments the Perl 5 way.

[11:16] <takadonet> morning all

[11:16] <masak> takadonet: \o

[11:16] <masak> takadonet: you're up early.

[11:16] <takadonet> wow... you know me too well....

[11:16] <masak> :)

[11:17] <takadonet> I had to drop off my sister at the airport so I came to work early

[11:17] <masak> work? on Dec 31?

[11:17] <takadonet> half day

[11:18] <masak> ah.

[11:20] <takadonet> looks like my last two reddit post got lots of comments

[11:21] <masak> aye.

[11:21] <masak> people like to discuss syntax.

[11:22] *** r1tz joined
[11:23] <takadonet> looks like pmichaud is back!

[11:24] *** qiuhw left
[11:24] *** wamba joined
[11:25] *** am0c joined
[11:25] *** pmurias joined
[11:26] *** qiuhw joined
[11:28] <pmurias> masak: a plan function must be called as the first thing in the file

[11:29] <masak> oh? I thought the done function was essentially a plan function called at the end.

[11:29] <pmurias> masak: it is

[11:29] <pmurias> but the plan can be called either at the start or the end

[11:30] <masak> is it an error to call plan (rather than done) at the end?

[11:31] <LeifD> Latest rakudo git fails make test with: t/01-sanity/99-test-basic.t ........ Dubious, test returned 1 (wstat 256, 0x100)

[11:31] <pmurias> masak: no

[11:31] <masak> pmurias: I'll add some wording about that.

[11:31] <pmurias> masak: the error happens on the TAP level

[11:31] <pmurias> and there done/plan are equivalent

[11:32] <masak> right. I was talking about the TAP level.

[11:33] <masak> it's also an error to call them multiple times, I suppose.

[11:34] <pmurias> yes

[11:36] <dalek> specs: 3f49fb7 | masak++ | S24-testing.pod:

[11:36] <dalek> specs: [S24] clarified what TAP doesn't like

[11:36] <dalek> specs: 

[11:36] <dalek> specs: It doesn't like no calls to C<plan> or C<done>, it doesn't like more than

[11:36] <dalek> specs: one call, it doesn't like a call at an inappropriate time...

[11:36] <dalek> specs: review: https://github.com/perl6/specs/commit/3f49fb7569

[11:38] <pmurias> sorear: having a short term TODO would be good

[11:40] *** sftp left
[11:40] *** sftp joined
[11:49] *** coldhead left
[11:52] *** r1tz left
[11:54] *** jhuni left
[12:01] <moritz_> masak: the reason behind the optional vs. multi thing was that we want to keep Test.pm conceptually really simple

[12:01] <moritz_> so that an implementation that only does multis by arity can implement ok() etc.

[12:02] <moritz_> for example rakudo's Test.pm is from a time where there were no optional arguments

[12:03] <pmurias> and the difference matters when the user add's his own 'multi ok'?

[12:04] <moritz_> or when he introspects the testing functions

[12:06] <masak> I see. I interpreted the wording as primarily restrictive, but it seems to have been intended as primarily permissive.

[12:08] <masak> I agree that S24 should say something about how closely an implementation's Test.pm is expected to conform.

[12:08] <masak> using niecza's Test.pm6 has also convinced me that we have to specify *exactly* what we expect the output of the various test functions to be, even if it seems obvious.

[12:09] <masak> for example, Rakudo's &is has 'got/expected' logic. Niecza's doesn't.

[12:13] <pmurias> masak: does

[12:13] <masak> oh, does now? nice.

[12:13] <masak> still, my point stands.

[12:15] *** wars joined
[12:19] *** alyx left
[12:19] *** noganex_ joined
[12:22] *** alyx joined
[12:22] <moritz_> we also need to spec what's supposed to happen when you call pass("a\nb")

[12:23] *** alyx is now known as Guest99694

[12:23] *** Guest99694 left
[12:23] *** noganex left
[12:23] <moritz_> masak: re why do pass/flunk require a description: they are the only functions that unconditionally pass/fail, so there's no testing effect. Which means they must do something weird which requires an explanation

[12:23] * masak was just going to ask that :)

[12:24] <masak> moritz_: I understand that motivation, and I wouldn't use pass/flunk without a description either.

[12:24] <masak> but it feels like yet another area where we impose restrictions without needing to, and possibly without seeing all the consequences.

[12:25] <masak> what have we to lose from making *all* the $desc parameters optional, and gaining a bit of consistency?

[12:25] <moritz_> what about making them all mandatory? :-)

[12:25] <masak> look, some people may have good reason not to use test descriptions.

[12:25] <pmurias> we shouldn't force stuff on people

[12:26] <masak> it feels odd to require them on pass/flunk.

[12:26] <pmurias> someone passing "" as a description won't help anyone

[12:26] *** wars left
[12:28] <moritz_> masak: IMHO pass and flunk feel odd

[12:28] <masak> why?

[12:29] <moritz_> because they don't test anything

[12:29] *** masonkramer left
[12:29] *** masonkramer joined
[12:29] <moritz_> hm, they make sense for control flow testing

[12:29] <moritz_> if 1 { pass() } else { flunk }

[12:30] <pmurias> ok 1

[12:30] <masak> again, this is "I don't see the use for it, so let's ban it" thinking.

[12:30] *** rgrau joined
[12:30] <moritz_> anyway, I'm not set on madatory description for pass/flunk

[12:30] * masak changes it, then

[12:30] <moritz_> there's a difference between banning and simply not providing

[12:31] <masak> aye.

[12:31] <masak> I'll also add back some wording about optional parameters being implementable in various ways.

[12:32] <takadonet> someone could be using multiple flunks based on how the test failed

[12:33] <takadonet> a description would be nice then

[12:33] <pmurias> masak: when do the different ways to implement optional params make a difference?

[12:34] <masak> takadonet: I'm not arguing *against* a description on flunk. I'm arguing for the option to leave it out.

[12:35] <masak> pmurias: when someone goes looking for the multis that are already there, for example.

[12:35] <pmurias> masak: why does the spec have to take into account incomplete implementations

[12:35] <pmurias> masak: those that are incomplete can be a bit none conforming

[12:36] <dalek> specs: 167354e | masak++ | S24-testing.pod:

[12:36] <dalek> specs: [S24] made all parameters optional

[12:36] <dalek> specs: 

[12:36] <dalek> specs: Also added back some clarification that optional parameters can

[12:36] <dalek> specs: be implemented in other ways, for example using multi dispatch.

[12:36] <dalek> specs: review: https://github.com/perl6/specs/commit/167354e52a

[12:36] <masak> pmurias: that's a good point. I'd like to discuss that more.

[12:37] <masak> nom &

[12:37] *** masak left
[12:48] *** LeifD left
[12:55] <colomon> rakudo: my $a = "This is a test"; $a.substr(10) = "Polka!"; say $a;

[12:55] <p6eval> rakudo 6a9a38: OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/sxS4UlF87j␤»

[13:09] *** masak joined
[13:10] <masak> sorear: what colomon just tried... would it be hard to implement that in niecza?

[13:11] <masak> moritz_: pmurias brings up a good point. why should S24 cater to non-full-featured implementations? the rest of the spec doesn't.

[13:12] <masak> in fact, that was part of why I removed the original sentence. incomplete implementations will have to make compromises *anyhow*, and they generally don't need to be told that they do.

[13:13] *** redicaps joined
[13:15] <redicaps> perl6: class a{}; my $b = a.new;

[13:15] <p6eval> pugs, rakudo 6a9a38, niecza v1-35-gc9d17a7:  ( no output )

[13:15] <masak> rakudo: class a {}; say a.new

[13:15] <p6eval> rakudo 6a9a38: OUTPUT«a()<0xba4eee8>␤»

[13:16] *** MayDaniel joined
[13:16] <redicaps> I  was playing on try.rakudo.com and it gave me → class a{}; my $b .= a.new(); Illegal redeclaration of symbol 'a' ....

[13:16] <masak> that syntax looks odd.

[13:17] <masak> rakudo: class a {}; my a $b .= new; say $b

[13:17] <p6eval> rakudo 6a9a38: OUTPUT«a()<0x8611038>␤»

[13:17] <masak> that works.

[13:17] <redicaps> yep, from perlgeek.de perl-5-to-6

[13:18] *** uasi joined
[13:18] <masak> redicaps: note that '$a .= method' is just sugar for '$a = $a.method'

[13:19] <masak> so 'my A $b .= new' is just sugar for 'my A $b; $b = $b.new;'

[13:19] <masak> abd at the point before the assignment, $b contains an uninitialized A type object, which has a .new method.

[13:22] <redicaps> masak: got u

[13:22] *** M_o_C left
[13:27] *** felliott joined
[13:37] *** M_o_C joined
[13:38] *** molaf joined
[13:44] *** am0c left
[13:57] <rokoteko> 15:56 < tkr> http://www.dyers.org/blog/beards/beard-types/

[13:57] <rokoteko> 15:56 < tkr> OBVIOUSLY he missed one type.

[13:57] <rokoteko> 15:56 < tkr> http://articles.mongueurs.net/magazines/dossiers/01/pres-perl/larry_wall.jpg

[13:57] <rokoteko> (oh, wait yes. and tkr is me)

[13:58] <huf> hungarian politician mustache ;)

[14:00] *** am0c joined
[14:01] <masak> wow, lots of beard inspiration to be had on that page.

[14:05] <masak> a couple of days ago I downgraded my van Dyke to a goatee. my burns are much shorter than on the goatee pic, though.

[14:05] <huf> http://halasztelekma.hu/wp-content/uploads/2009/10/kover-laszlo2.jpg that's what i'm talkin about

[14:05] <masak> indeed.

[14:06] <masak> that looks like a politician I could trust! :)

[14:06] <M_o_C> Hi. Let's say I want to look up a certain keyword, built-in * or control structure in the spec. Is there a quick way to do this? (Using google sort of fails when you want to look up the specification of "for" or the likes.)

[14:07] <masak> M_o_C: most of us here have the git repo checked out, and then we use ack on it.

[14:09] <M_o_C> Ok.

[14:12] <colomon> How do you clear out a Hash?  %a = {} ?

[14:14] <colomon> rakudo: my %a = A => 54, B => 2; say %a.perl; %a = {}; say %a.perl;

[14:14] <rokoteko> rakudo: my %h = (a => 1, b => 2); say %h.perl; %h = (); say %h.perl

[14:14] <p6eval> rakudo 6a9a38: OUTPUT«{"A" => 54, "B" => 2}␤{}␤»

[14:14] <p6eval> rakudo 6a9a38: OUTPUT«{"a" => 1, "b" => 2}␤{}␤»

[14:15] <masak> that's not really "clearing out a hash", though.

[14:15] <masak> that's grabbing a new one.

[14:15] <colomon> have to admit I'm not sure I care about the difference for p5.  ;)

[14:16] <masak> then carry on :)

[14:17] <rokoteko> how do you delete hash keys or array elements in perl6, masak ?

[14:17] <masak> std: my %hash = foo => 42; %hash<foo> :delete;

[14:17] <p6eval> std 625303c: OUTPUT«ok 00:01 121m␤»

[14:18] <masak> rakudo: my %hash = foo => 42; say %hash.perl; %hash.delete("foo"); say %hash.perl

[14:18] <p6eval> rakudo 6a9a38: OUTPUT«{"foo" => 42}␤{}␤»

[14:18] <masak> rokoteko: hope that answers your question.

[14:18] <rokoteko> rakudo: my %h = (a => 1, b => 2); ; %h.delete(keys %h); say %h.perl

[14:18] <p6eval> rakudo 6a9a38: OUTPUT«{}␤»

[14:18] <rokoteko> masak: yes it did, thanks.

[14:24] *** qiuhw left
[14:24] *** qiuhw joined
[14:27] <tadzik> hello, renideers

[14:31] *** jferrero left
[14:32] <colomon> hello, satan

[14:40] <moritz_> hello santa

[14:40] <moritz_> rakudo: say 'satan'.comb.sort eq 'santa'.comb.sort

[14:40] <p6eval> rakudo 6a9a38: OUTPUT«Bool::True␤»

[14:47] *** Guest3560 left
[14:48] *** M_o_C left
[14:49] *** daxim left
[14:50] *** mandragoran joined
[14:51] *** M_o_C joined
[14:53] *** gbacon joined
[14:55] * masak dreams of an adverb that means 'compare under this transformation'

[14:56] <[Coke]> moritz_: is there a way to write that without duplicating the comb and the sort?

[15:00] <moritz_> rakudo: say [eq] <satan santa>.map: *.comb.sort.join

[15:00] <p6eval> rakudo 6a9a38: OUTPUT«Bool::True␤»

[15:00] <moritz_> [Coke]: not perfect, but at least without repetition

[15:03] <qiuhw> Somebody who would like to review this: https://github.com/qiuhw/rakudo/commit/deec2f9a0ca3099c1b3421d6de652052d579ae7b?

[15:03] * moritz_ takes a look

[15:04] <moritz_> qiuhw: https://github.com/rakudo/rakudo/commit/6a9a38f3b4d322a3ea93b5363b59ec62ca23321a

[15:04] <moritz_> but I forgot the test in t/

[15:08] <qiuhw> moritz_: But what I have changed in Test.pm is after your commit. The code in END {} still calls done_testing() which will cause spectest to fail

[15:08] <dalek> rakudo: d3688bb | moritz++ | t/01-sanity/99-test-basic.t:

[15:08] <dalek> rakudo: a forgotten done_testing. quihw++

[15:08] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/d3688bb236

[15:09] <moritz_> qiuhw: oh, sorry, I missed that part

[15:09] <moritz_> will apply

[15:16] *** mandragoran left
[15:19] <dalek> rakudo: f99d081 | qiuhw++ | Test.pm:

[15:19] <dalek> rakudo: rename more done_testing to done

[15:19] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/f99d081ea4

[15:19] <pmurias> sorear: ping

[15:24] *** plobsing joined
[15:26] *** glow left
[15:33] <pmurias> sorear: what is ->xref on Metamodel?

[15:34] *** avuserow joined
[15:38] *** icwiener joined
[15:40] *** timbunce joined
[15:44] *** masak left
[15:46] *** Axius joined
[15:49] <colomon> moritz_: did you have any luck with io-prompter?

[15:50] <colomon> I've got a version which compiles okay, but when I try the examples, Rakudo sees its core "prompt" instead of the new module versions.

[15:51] <colomon> and when I rename the subs, I get an error "Method 'after' not found for invocant of class 'Cursor'"

[15:55] <flussence> good morneveninight, *

[15:55] <colomon> * *, *

[15:55] *** timbunce left
[15:55] <colomon> oh, is *that* what TimToady was saying yesterday?

[15:55] <flussence> yes :)

[15:55] <colomon> Did someone call me slow-of-mind?

[15:56] <flussence> well, he could've been saying anything...

[15:56] <flussence> I've got a fix here if anyone wants to take it: https://github.com/flussence/roast/commit/2e547de

[15:59] *** M_o_C left
[16:02] *** qiuhw left
[16:02] *** timbunce joined
[16:04] *** Patterner left
[16:07] *** Psyche^ joined
[16:07] *** Psyche^ is now known as Patterner

[16:08] <colomon> https://gist.github.com/761112 -- is my "current" problem in IO::Prompter.  (I've got a workaround, but this is an elegant piece of code which is apparently broken in modern Rakudo.)

[16:09] *** uasi left
[16:11] <moritz_> colomon: no luck, but I didn't try either

[16:11] <moritz_> colomon: seems that <?after ...> is NYI in nqp-rx

[16:11] <jasonmay> rakudo: ({}.WHAT == Hash).perl.say

[16:12] <p6eval> rakudo 6a9a38: OUTPUT«Type objects are abstract and have no attributes, but you tried to access $!storage␤  in 'EnumMap::elems' at line 5080:CORE.setting␤  in 'Iterable::Numeric' at line 3812:CORE.setting␤  in 'infix:<==>' at line 7369:CORE.setting␤  in main program body at line

[16:12] <p6eval> ..22:/tmp/yhJUxX1gQe␤»

[16:12] <s1n> it's been a while since i played with rakudo, but can i execute the perl6 fakexecutable outside the rakudo diretory?

[16:12] <moritz_> s1n: you can, if rakudo is installed correctly

[16:12] <s1n> moritz_: i just pulled it outta git and built it

[16:13] <moritz_> s1n: and did you 'make install'?

[16:13] <s1n> no, do i need to set a prefix path?

[16:13] <moritz_> no, it installs into the same location as your parrot

[16:13] <s1n> trying...

[16:13] <moritz_> ie if you ran parrot, it installs into parrot_install/bin/perl6

[16:14] <moritz_> see also: README

[16:14] <s1n> yup, that worked, thanks

[16:15] <s1n> it's been over a year since i even looked at perl6 :/

[16:15] <moritz_> then you'll probably find that much has improved since your last attempt

[16:15] <moritz_> (though speed isn't among the improved aspects)

[16:16] <s1n> wow, yup, my old code doesn't work heh

[16:16] <[particle]> the spec has improved, too ;)

[16:23] <jasonmay> where can I read about the .perl feature?

[16:23] <s1n> std: class Foo { sub foo is export (Int bar) { ... } }

[16:23] <p6eval> std 625303c: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unable to parse signature at /tmp/Li6sADxaSq line 1:␤------> [32mclass Foo { sub foo is export [33m⏏[31m(Int bar) { ... } }[0m␤Couldn't find final ')'; gave up at /tmp/Li6sADxaSq line 1:␤------> [32mclass Foo { sub foo is export (Int

[16:23] <p6eval> ..[33m⏏[31mb…

[16:23] <jasonmay> not very easy to search for.. :)

[16:23] <s1n> why does that fail but pass without the signature?

[16:25] <[particle]> what happens if you leave off bar, or add a sigil?

[16:25] * [particle] hasn't played with perl 6 in quite a while, either :(

[16:26] <s1n> std: class Foo { sub foo is export (Int $bar) { ... } }

[16:26] <p6eval> std 625303c: OUTPUT«Potential difficulties:␤  $bar is declared but not used at /tmp/vw_zvj2dnN line 1:␤------> [32mclass Foo { sub foo is export (Int [33m⏏[31m$bar) { ... } }[0m␤ok 00:01 121m␤»

[16:26] <s1n> that's odd

[16:26] <s1n> std: class Foo { sub foo is export (Int) { ... } }

[16:26] <p6eval> std 625303c: OUTPUT«ok 00:01 121m␤»

[16:27] * s1n smells a problem

[16:27] *** ggoebel left
[16:28] <moritz_> jasonmay: I think it's in S02

[16:29] <moritz_> jasonmay: .perl is supposed to return a string that, when run as Perl 6 code, reproduces the original object

[16:29] <moritz_> ... evaluated in item context

[16:31] <s1n> std: class Foo { sub foo is export (Int $bar) { $bar = 1 } }

[16:31] <p6eval> std 625303c: OUTPUT«ok 00:01 124m␤»

[16:32] <s1n> that works, oddly

[16:32] <moritz_> std only checks syntax

[16:34] <jasonmay> moritz_: thanks

[16:34] <jasonmay> rakudo: [[[]]].pretty.say

[16:34] <p6eval> rakudo f99d08: OUTPUT«Method 'pretty' not found for invocant of class 'Array'␤  in main program body at line 22:/tmp/6xhLVaDM0_␤»

[16:34] <s1n> rakudo: class Foo { multi sub foo is export (Str $bar) { $bar = 1; } }

[16:35] <p6eval> rakudo f99d08: OUTPUT«===SORRY!===␤Malformed multi at line 22, near "sub foo is"␤»

[16:35] *** redicaps left
[16:35] <s1n> std: class Foo { multi sub foo is export (Str $bar) { $bar = 1; } }

[16:35] <p6eval> std 625303c: OUTPUT«ok 00:01 124m␤»

[16:35] <s1n> bug?

[16:36] <[particle]> i'm not sure it's a bug

[16:37] <[particle]> std does some semantic analysis, and it's there that it's finding 'declared, not used'

[16:37] <[particle]> i suppose an exception could be made if the body of the sub is ...

[16:37] <s1n> [particle]: std didn't complain but rakudo parse failed

[16:38] <[particle]> oh, sorry, i'm still looking at "std: class Foo { sub foo is export (Int $bar) { ... } }" from above

[16:39] <[particle]> multi foo is export? not 'multi sub ...'?

[16:39] <[particle]> i really don't know in this case.

[16:39] <s1n> i had 'multi sub foo'

[16:40] <[particle]> rakudo: class Foo { multi foo is export (Str $bar) { $bar = 1; } }

[16:40] <p6eval> rakudo f99d08: OUTPUT«===SORRY!===␤Malformed multi at line 22, near "foo is exp"␤»

[16:41] <[particle]> seems the multi syntax is what you need to look at.

[16:42] <moritz_> multi foo(Str $bar) is export { ... }

[16:43] <moritz_> otherwise the (...) is parsed as an argument to the "is export" trait

[16:45] <s1n> did the 'multi sub' become just 'multi'

[16:46] <moritz_> 'multi' and 'multi sub' are synonyms

[16:47] <s1n> what about method? i forgot the difference

[16:48] <colomon> moritz_: I'm going to clean up what I've currently got and push it, and give you a commit bit.

[16:48] <pmurias> s1n: multi method is a method

[16:48] <pmurias> s1n: you call it with the $foo.bar syntax

[16:48] <s1n> pmurias: but how are methods different than subs?

[16:48] <pmurias> subs are lexical

[16:49] <pmurias> methods are tied per object

[16:49] <s1n> you mean i don't need an instance to call them?

[16:49] <moritz_> you invoke a method like $obj.its_method

[16:50] <s1n> subs don't need the instance?

[16:50] <moritz_> right

[16:50] <s1n> okay

[16:50] <moritz_> rakudo: say uc("foo")

[16:50] <p6eval> rakudo f99d08: OUTPUT«FOO␤»

[16:50] <moritz_> rakudo: say "foo".uc

[16:50] <p6eval> rakudo f99d08: OUTPUT«FOO␤»

[16:50] <moritz_> rakudo: BEGIN { say uc "foo" }

[16:50] <p6eval> rakudo f99d08: OUTPUT«FOO␤»

[16:50] <moritz_> huh

[16:51] <moritz_> why does that work

[16:51] <moritz_> but not

[16:51] <moritz_> rakudo: BEGIN { push @*INC, 'foo' }

[16:51] <p6eval> rakudo f99d08: OUTPUT«===SORRY!===␤Could not find sub &push␤»

[16:53] *** Axius left
[16:53] <s1n> when i get the ===SORRY!=== line, why don't i get the file that with the line number?

[16:55] <colomon> moritz_: https://github.com/colomon/io-prompter -- you've got a commit bit now

[16:55] <moritz_> because of the weird interaction of parsing with the rest of the world

[16:55] <moritz_> colomon: thanks

[16:55] * moritz_ -> gone for New Year's Eve party

[16:55] <s1n> Quoted method name requires parenthesized arguments at line 49, near ";\n        "

[16:55] <colomon> moritz_: mind you, it doesn't exactly work yet.

[16:55] <s1n> that's not a helpful error message

[16:55] <[particle]> moritz_: INIT {...} works

[16:55] <[particle]> BEGIN does not

[16:55] <s1n> that's like saying "Sorry, there's a bug somewhere"

[16:56] <moritz_> [particle]: ... but only due to a bug, when used together with "use"

[16:56] <moritz_> because "use" should be BEGIN time

[16:58] <[particle]> rakudo: INIT { push @*INC, 'foo' }

[16:58] <p6eval> rakudo f99d08:  ( no output )

[16:58] <[particle]> rakudo: BEGIN { push @*INC, 'foo' }

[16:58] <p6eval> rakudo f99d08: OUTPUT«===SORRY!===␤Could not find sub &push␤»

[16:58] <[particle]> i mean, rakudo is ok with running the push at INIT time, but can't find &push at begin-time

[16:59] <[particle]> rakudo: BEGIN { @*INC ,= 'foo' }

[16:59] <p6eval> rakudo f99d08: OUTPUT«===SORRY!===␤Could not find sub &infix:<,=>␤»

[16:59] <[particle]> rakudo: BEGIN { @*INC = 'foo', @*INC }

[16:59] <p6eval> rakudo f99d08:  ( no output )

[16:59] <[particle]> rakudo: BEGIN { @*INC = @*INC, 'foo' }

[16:59] <p6eval> rakudo f99d08:  ( no output )

[17:00] <[particle]> it seems @*INC doesn't have the push method at BEGIN time

[17:00] <s1n> ugh, my code is too bitrotted :/

[17:00] <[particle]> for some strange reason.

[17:01] <s1n> does trait_mod:<*> not work the same?

[17:02] <moritz_> s1n: I've reported the missing line number at BEGIN time as a bug

[17:02] <moritz_> really gone &

[17:05] *** takadonet left
[17:06] *** mberends joined
[17:09] *** envi left
[17:11] <colomon> ack, trying to deal with loose regexes is very frustrating

[17:13] <VXZ> I prefer my regexes tight.

[17:14] *** nadim left
[17:15] *** nadim joined
[17:16] <pumphaus> that's what he said..

[17:17] <pumphaus> is anyone able to download rakudo-star 2010.12 ? 

[17:17] <pumphaus> github always gives ma 403 permission denied

[17:17] <pumphaus> 2010.11 works just fine

[17:17] <pumphaus> *gives me a

[17:25] *** timbunce left
[17:31] *** plobsing_ joined
[17:34] *** plobsing left
[17:39] *** justatheory joined
[17:49] <dalek> niecza: 025e408 | pmurias++ | / (4 files):

[17:49] <dalek> niecza: [Test.pm6] remove &done-testing and &done_testing

[17:49] <dalek> niecza: review: https://github.com/sorear/niecza/commit/025e408688

[17:49] <dalek> niecza: c70d541 | pmurias++ | cl-backend/ (2 files):

[17:49] <dalek> niecza: start of the common lisp backend

[17:49] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c70d541e13

[17:54] *** am0c left
[18:05] <tadzik> pumphaus: that's known, sorry for that

[18:05] *** vastak joined
[18:06] <[particle]> that's not helpful. is there a workaround?

[18:08] <TimToady> I couldn't find one last night, but I'm no gitmaster

[18:08] <TimToady> so I think tadzik++ was about as helpful as could be

[18:09] <flussence> you can download the .tar.gz of the current commit, that should be identical to the 2010.12 there

[18:09] <TimToady> but doesn't have the extras?

[18:09] <flussence> in the rakudo/star repo, should do

[18:10] <[particle]> could someone throw it on the cpan?

[18:10] <flussence> oh, hm. I suppose the 2010.12 download contains the stuff done after a `make release` on it

[18:13] *** rgrau left
[18:23] <kthakore> rakudo: say "hi"

[18:23] <p6eval> rakudo f99d08:  ( no output )

[18:23] <kthakore> ??

[18:23] <kthakore> rakudo: say 'hi'

[18:23] <p6eval> rakudo f99d08:  ( no output )

[18:23] <kthakore> wth?

[18:24] <colomon> rakudo: say "blue";

[18:24] <p6eval> rakudo f99d08:  ( no output )

[18:25] <colomon> rakudo: say 1

[18:25] <p6eval> rakudo f99d08:  ( no output )

[18:25] <TimToady> pugs: say 42

[18:25] <p6eval> pugs: OUTPUT«42␤»

[18:25] <colomon> it's broken.  :(

[18:25] <flussence> rakudo: !!!!!!!!!!!!!!!!!!!!!;

[18:25] <p6eval> rakudo f99d08:  ( no output )

[18:26] <TimToady> the last time I rebuilt rakudo I had to blow away parrot_install for some reason

[18:26] <TimToady> that was last night

[18:27] <TimToady> has scrolled off my screen, so dunno why

[18:28] <TimToady> but rakudo has been running since then under evalbot

[18:28] <TimToady> rakudo: BEGIN { say "hi" }

[18:28] <p6eval> rakudo f99d08:  ( no output )

[18:29] <TimToady> rakudo: BEGIN { @*INC ,= 'foo' }

[18:29] <p6eval> rakudo f99d08:  ( no output )

[18:29] <TimToady> that at least got output earlier on the same release

[18:30] *** icwiener left
[18:34] <TimToady> rakudo: say uc("foo")  # worked earlier on f99d08

[18:34] <p6eval> rakudo f99d08:  ( no output )

[18:34] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_cookbook_tablet

[18:34] <TimToady> niecza: say uc("foo")

[18:34] <p6eval> niecza v1-35-gc9d17a7: OUTPUT«FOO␤»

[18:38] <TimToady> evalbot control restart

[18:38] *** p6eval left
[18:38] *** pochi left
[18:39] *** p6eval joined
[18:39] *** ChanServ sets mode: +v p6eval

[18:39] <TimToady> rakudo: say 42

[18:39] *** aindilis joined
[18:39] <p6eval> rakudo f99d08:  ( no output )

[18:39] <TimToady> oh well, it was worth a shot

[18:43] *** ggoebel joined
[18:53] *** pochi joined
[18:57] *** dual left
[18:58] *** MayDaniel left
[19:12] *** avuserow left
[19:12] *** yarrak joined
[19:13] *** avuserow joined
[19:22] *** zanooda joined
[19:24] *** zanooda left
[19:27] <diakopter> rakudo: say 42

[19:27] <p6eval> rakudo f99d08:  ( no output )

[19:27] <diakopter> hm

[19:28] <wolverian> hrm rakudo .12 is still giving me 403

[19:29] *** M_o_C joined
[19:30] <diakopter> #perl6 <TimToady> rakudo: say 42

[19:30] <diakopter> Segmentation fault

[19:30] <diakopter> #perl6 <diakopter> rakudo: say 42

[19:30] <diakopter> Segmentation fault

[19:30] *** Sarten-X joined
[19:32] * diakopter doesn't know how to fix

[19:37] *** dual joined
[19:41] *** Auv5 joined
[19:43] *** rindolf joined
[19:43] <rindolf> Hi all. Which Parrot version is required by rakudo-2010.12?

[19:44] <rindolf> Happy new year too.

[19:46] *** yarrak left
[19:46] <sorear> good * #perl6

[19:48] <[Coke]> rindolf: it should be documented in build/PARROT_REVISION

[19:49] <[Coke]> (but usually it's the version that came out earlier in the week)

[19:49] <rindolf> [Coke]: apparently it's 2.11.0

[19:55] <sorear> pmurias: pong

[19:59] <sorear> pmurias: 'dunno-what-this-is' is a list of xids of child subs

[19:59] <sorear> it defines the sub tree, along with outer

[20:01] *** s1n left
[20:01] *** s1n joined
[20:10] *** wamba left
[20:12] *** LeifD joined
[20:18] *** am0c joined
[20:20] *** moqqq left
[20:22] *** jenk left
[20:23] *** jenk joined
[20:25] *** soroush_ joined
[20:26] *** soroush left
[20:34] *** Eth4n joined
[20:38] *** Eth4n left
[20:38] *** Eth4n joined
[20:38] *** Eth4n left
[20:38] *** Eth4n joined
[20:49] *** plobsing joined
[20:51] *** hanekomu joined
[20:52] *** plobsing_ left
[21:01] *** Eth4n left
[21:03] *** snearch joined
[21:09] <lue> ohai #perl6 o/

[21:10] <rindolf> Hi lue 

[21:14] *** masak joined
[21:15] <masak> we're quickly running out of 2010 over here...

[21:16] <s1n> lots of time, just under 9 hours :)

[21:16] <masak> we only have 1h45m left here.

[21:18] <rindolf> masak: I only have 42m left.

[21:18] <masak> rindolf: good, then you can tell me if 2011 is any good :)

[21:19] <rindolf> masak: OK.

[21:19] <tadzik> oh, masak, we're in the same TZ

[21:21] <rindolf> lue: what's up?

[21:21] *** colbseton joined
[21:21] <masak> tadzik: oczywiście! :)

[21:22] <rindolf> masak: which language is that?

[21:22] *** colbseton left
[21:22] <hanekomu> sounds polish

[21:22] <hanekomu> er, looks

[21:22] <tadzik> :)

[21:22] <masak> :)

[21:22] <tadzik> it even has ś

[21:22] <tadzik> and I still don't have ó in colemak

[21:27] *** coldhead joined
[21:27] <lue> it's still 2010 over here!

[21:28] <rindolf> lue: also here.

[21:28] <coldhead> Today is Sweetmorn, the 1st day of Chaos in the YOLD 3177

[21:28] *** M_o_C left
[21:29] <lue> I was glad when 2009 left. That meant the end of those stupid glasses. Unfortunately, I forgot you could still do it for 2010.

[21:36] *** LeifD left
[21:58] <lue> I think S22 needs severe updating. Maybe it can detail neutro instead?

[21:59] <colomon> Probably needs severe updating, but I don't think neutro is supposed to be any more than a quick stopgap measure until we have something better.

[22:02] <rindolf> masak: 2011 seems fine so far.

[22:03] *** yarrak joined
[22:03] <colomon> seems strictly imaginary so far from here.  ;)

[22:06] * lue resists bringing time-dilation into the discussion

[22:09] * sorear distracts lue with http://en.wikipedia.org/wiki/Barycentric_Dynamical_Time

[22:09] *** rindolf left
[22:14] * lue distracted indefinitely

[22:18] <diakopter> speaking of time dilation..

[22:27] <lue> I can never remember if climbing to the top of a mountain would make 2011 come faster or slower (compared to, say, sea level)

[22:30] *** snearch left
[22:33] <flussence> well, you'd be moving faster when it comes

[22:34] <TimToady> it really helps if the top of the mountain is on the other side of a TZ boundary

[22:35] <colomon> TimToady: \o/

[22:35] * colomon will disappear in a moment when his battery runs out.

[22:37] *** masak left
[22:39] <colomon> Happy New Year!

[22:39] <Trashlord> happy new year!

[22:39] <Trashlord> Sat Jan  1 00:39:52 IST 2011

[22:40] *** masak joined
[22:41] <lue> assume a perfectly longitudinal and level coastline, with a mountain whose peak is colinear with the beach. Somebody is on the beach and somebody is on the peak of the mountain. Who sees 2011 first?

[22:41] *** jferrero joined
[22:42] <colomon> which side is the ocean on?

[22:43] <lue> does it matter? If so, pick left.

[22:44] *** colomon left
[22:45] <TimToady> can I assume a spherical 2011?

[22:48] <TimToady> nap &

[22:48] * lue feels he needs to read the General Theory of Relativity sometime

[22:54] <lue> rakudo: (1,2,3) E "hi".say

[22:54] <p6eval> rakudo f99d08:  ( no output )

[22:54] <allbery_b> the person on the mountaintop sees it first, but unless it's e.g. Everest it'll be only be a matter of nanoseconds

[22:54] <lue> rakudo: (1,,3) E "hi".say

[22:54] <p6eval> rakudo f99d08:  ( no output )

[22:54] <allbery_b> http://www.astronomy.ohio-state.edu/~pogge/Ast162/Unit5/gps.html interesting related read

[22:54] <tadzik> rakudo: say Date.now.year

[22:54] <p6eval> rakudo f99d08:  ( no output )

[22:54] <tadzik> rakudo: say now.year

[22:54] <p6eval> rakudo f99d08:  ( no output )

[22:54] <tadzik> rakudo: say now

[22:54] <p6eval> rakudo f99d08:  ( no output )

[22:54] <tadzik> oh you!

[22:55] <allbery_b> still coring?

[22:55] <lue> That's what I thought. of course. I'm not talking about can anybody notice, that would require a massive change in distance, maybe the radius of Jupiter?

[22:56] <allbery_b> I was actually thinking GR differences

[22:59] <allbery_b> speed of light vs GR effects... which one is dominant depends on a number of issues

[22:59] <allbery_b> (and if one of the observers is moving relative to the other there's also SR time dilation :)

[22:59] *** lichtkind joined
[23:02] <lue> I should think of becoming a physicist instead. I'd much rather go to college for that than programming, because I've been doing that since I was 10.

[23:03] <lue> [er, 2nd that = programming]

[23:08] *** felliott left
[23:09] <coldhead> physics is so gross and imprecise

[23:10] * coldhead shudders

[23:10] <allbery_b> they're both applied math...

[23:10] <lue> I personally think physicists are killjoys. I can't travel at speed of light? Why? [I might go with "Temporal Scientist" instead]

[23:11] <lue> [I know why, but physicists always seem like killjoys when they say so]

[23:13] *** colomon joined
[23:14] <allbery_b> just remember we still haven't seen the last word on that

[23:15] <allbery_b> a whole bunch of physics comes up for potential upending if we can't find the higgs boson :)

[23:17] <allbery_b> and there are other areas that have similar potential.  reconciling GR with QED looks weirder and weirder the more is found out about both

[23:21] *** soroush_ left
[23:23] <tadzik> happy new year!

[23:24] *** jhuni joined
[23:24] <masak> happy new year! \o/

[23:24] *** soroush joined
[23:24] *** masak left
[23:27] <lue> sorear: I agree that S03:2131 is a bit weird.

[23:29] *** Axius joined
[23:31] *** hanekomu left
[23:31] *** qw3rty joined
[23:37] *** uasi joined
[23:38] <lue> Hm, this place seems really quiet today, can't fathom why⸮

[23:38] <sjohnson> people are drinkin beers

[23:38] <sjohnson> and hugging family members and friends alike

[23:39] <sjohnson> i'll definitely be doing the former tonight

[23:39] *** uasi left
[23:40] *** Axius left
[23:41] *** Axius joined
[23:58] *** Axius left
