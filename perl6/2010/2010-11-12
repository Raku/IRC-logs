[00:06] *** bacek_at_work left
[00:28] <lue> ohai again o/

[00:31] *** justatheory left
[00:36] <sorear> hi lue!

[00:38] *** justatheory joined
[00:46] *** uniejo joined
[00:52] *** QinGW joined
[00:57] *** araujo left
[00:57] <dalek> niecza: 02d5341 | sorear++ | / (6 files):

[00:57] <dalek> niecza: Eliminate multi-rx-lists

[00:57] <dalek> niecza: 

[00:57] <dalek> niecza: We just keep all methods in order now and look by method name.  This

[00:57] <dalek> niecza: means that multi regexes are less redundant with ordinary methods.

[00:57] <dalek> niecza: review: https://github.com/sorear/niecza/commit/02d53418e4404c92a6c795948f7d863bdb3736d9

[00:58] *** justatheory left
[00:59] *** patrickas left
[01:01] *** justatheory joined
[01:01] *** redicaps joined
[01:03] *** justatheory left
[01:03] *** justatheory joined
[01:13] <dalek> 6model: b2c2823 | diakopter++ | / (3 files):

[01:13] <dalek> 6model: [dotnet] implement quoted-string (indirectly named) method calls; add 26-methodops.t

[01:13] <dalek> 6model: review: https://github.com/jnthn/6model/commit/b2c28234b5aed4a2dd6f2b8a6307b3a5d75a2046

[01:13] *** araujo joined
[01:13] *** justatheory left
[01:13] *** justatheory_ joined
[01:15] *** justatheory joined
[01:17] *** justatheory_ left
[01:19] *** redicaps left
[01:20] *** risou left
[01:24] *** ch3ck3r joined
[01:29] *** TobiO|ref left
[01:29] *** ch3ck left
[01:30] *** nine left
[01:43] *** uniejo left
[02:01] *** nine joined
[02:10] *** justatheory left
[02:16] *** whiteknight left
[02:21] *** envi joined
[02:28] *** meppl left
[02:57] *** agentzh joined
[03:11] *** justatheory joined
[03:20] *** timbunce_ left
[03:24] *** satyavvd joined
[03:25] *** lidden left
[03:28] *** ggoebel left
[03:32] *** justatheory left
[03:34] *** sidek joined
[03:34] <sidek> perl

[03:36] <jasonmay> yes!

[03:36] <simon> jasonmay, if it were a boolean statement, I'd say yes, too!

[03:37] <colomon> 6!

[03:38] <simon> colomon, I liked that response, too! then, maybe "> " would be a good one, too, since of the interactive interpreter :)

[03:41] *** justatheory joined
[03:45] *** araujo left
[03:53] <sjohnson> hi

[03:54] <sorear> Hi

[03:55] *** plobsing joined
[03:57] <colomon> \o

[03:58] <plobsing> o/

[04:02] *** justatheory left
[04:11] *** colomon left
[04:12] *** justatheory joined
[04:15] *** colomon joined
[04:15] <sjohnson> -_-

[04:16] *** Chillance left
[04:38] *** _twitch left
[04:44] *** am0c^ joined
[04:45] *** am0c^2 joined
[04:45] *** am0c^ left
[04:51] *** _twitch joined
[05:00] *** _twitch left
[05:03] *** justatheory left
[05:07] *** dduncan joined
[05:08] *** dduncan left
[05:12] *** stkowski left
[05:13] *** justatheory joined
[05:54] *** am0c^2 left
[06:03] *** justatheory left
[06:12] <dalek> niecza: 9a2974a | sorear++ | / (3 files):

[06:12] <dalek> niecza: [v6] Fix runaway string detection, start operators

[06:12] <dalek> niecza: review: https://github.com/sorear/niecza/commit/9a2974aba13ba6065569705f3e72d15bad12cdbc

[06:13] *** justatheory joined
[06:15] *** wamba joined
[06:19] *** kjeldahl joined
[06:30] *** justatheory left
[06:43] *** kjeldahl left
[06:49] <sorear> std: sub prefix:<@>() {}; @ 5

[06:49] <p6eval> std a194beb: OUTPUT«ok 00:01 122m␤»

[06:50] *** araujo joined
[06:53] <dalek> niecza: f9f8ef3 | sorear++ | v6/tryfile:

[06:53] <dalek> niecza: [v6] Make basic categoricals work

[06:53] <dalek> niecza: review: https://github.com/sorear/niecza/commit/f9f8ef35f25079e3c13255e00c247e00d58f8ebd

[07:04] <diakopter> std: sub prefix:<@>() {}; @5

[07:04] <p6eval> std a194beb: OUTPUT«ok 00:01 122m␤»

[07:05] *** _kaare joined
[07:05] <diakopter> std: sub prefix:<@> {}; @5

[07:05] <p6eval> std a194beb: OUTPUT«ok 00:01 120m␤»

[07:09] <moritz_> std: @5

[07:09] <p6eval> std a194beb: OUTPUT«ok 00:01 118m␤»

[07:12] <sorear> @5 is @( $/[5] )

[07:12] <sorear> I'm debugging categoricals, though

[07:12] <sorear> and there's a shortage of good unused ASCII punctuation

[07:18] *** TobiO|ref joined
[07:22] <moritz_> \o/ http://www.modernperlbooks.com/mt/2010/11/the-book-is-out.html

[07:25] *** wtw joined
[07:30] *** wtw_ joined
[07:45] *** REPLeffect left
[08:01] *** REPLeffect joined
[08:38] *** kjeldahl joined
[08:40] <sorear> perl6: say substr("Hello",3,10)

[08:40] <p6eval> pugs, rakudo d85964: OUTPUT«lo␤»

[08:40] <sorear> niecza: say substr("Hello",3,10)

[08:40] <p6eval> niecza f9f8ef3: OUTPUT«Unhandled exception: System.ArgumentOutOfRangeException: startIndex + length > this.length␤Parameter name: length␤  at System.String.Substring (Int32 startIndex, Int32 length) [0x00000] in <filename unknown>:0 ␤  at SAFE.G645substrC (Niecza.Frame th) [0x00000] in <filename

[08:40] <p6eval> ..unknown>…

[08:41] <sorear> I suspect niecza may be wrong here

[08:42] * moritz_ suspects that too

[08:43] <sorear> S32-str backs up pugs and rakudo

[08:48] <dalek> niecza: b6a7764 | sorear++ | v6/tryfile:

[08:48] <dalek> niecza: [v6] Categoricals need to be tokens, not rules

[08:48] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b6a77645fa4cf6d90b383cd7288f27f550016e0a

[08:48] <dalek> niecza: c119c38 | sorear++ | lib/Cursor.cs:

[08:48] <dalek> niecza: Rewrite handling of outer frames in regexes

[08:48] <dalek> niecza: 

[08:48] <dalek> niecza: Named prefix:<> categoricals work now.

[08:48] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c119c3899f8bd0da284ecc827a33bb77bdcc2d80

[08:49] *** kensanata joined
[08:49] *** kensanata left
[08:49] *** kensanata joined
[08:53] <sorear> std: sub circumfix:<open close>() {}; open 1 close

[08:53] <p6eval> std a194beb: OUTPUT«ok 00:01 127m␤»

[08:53] <sorear> std: sub circumfix:<open close>() {}; open 2 + 2 close

[08:53] <p6eval> std a194beb: OUTPUT«ok 00:01 129m␤»

[09:01] <dalek> niecza: a1bb48f | sorear++ | v6/tryfile:

[09:01] <dalek> niecza: Set terminator for circumfix blocks

[09:01] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a1bb48fd16a52e9361843feb1b178433b61c678c

[09:04] <sorear> STD on niecza can now handle all the usual categorical cases

[09:05] <tadzik> hello

[09:05] <sorear> hi

[09:24] *** ilogger2 joined
[09:24] *** ChanServ sets mode: +v ilogger2

[09:43] * sorear out

[09:43] <sorear> tomorrow: JSYNC freeze/thaw.  Try to get tryfile.exe to support a setting.

[09:43] <moritz_> sounds nice :-)

[09:44] *** gavv\w joined
[09:46] *** mavrc joined
[09:53] *** Lorn joined
[10:07] *** nymacro joined
[10:11] *** dakkar joined
[10:11] *** tzhs joined
[10:29] *** masonkramer joined
[10:40] *** tzhs left
[10:41] *** daxim joined
[10:44] *** daxim left
[10:45] *** daxim joined
[11:01] *** ggoebel joined
[11:03] *** masak joined
[11:04] <masak> oh hai, #perl6!

[11:04] <moritz_> lolitsmasak!

[11:06] *** wallberg joined
[11:08] *** ggoebel left
[11:10] *** tzhs joined
[11:10] <tadzik> oh hai

[11:15] <masak> how are you gentlemen?

[11:16] * moritz_ wonders if 'gentlemen' includes him :-)

[11:17] * moritz_ finally got the contract for a side job he's been working on for two weeks

[11:17] <masak> nice.

[11:18] <moritz_> the amount of beaurocracy at the university is unbelievable

[11:18] <tadzik> university?

[11:19] <moritz_> yes

[11:19] * tadzik imagines moritz_ as the guy giving studens programming projects to comlete

[11:19] <tadzik> "laborant"

[11:19] <moritz_> I had to fill out a questionaire about possible contacts to organizations that might endanger democracy

[11:20] <moritz_> then a separate questionaire about contacts to the Scientology organization

[11:21] <moritz_> + about 4 regarding social insurance, pension funds, my wife, ...

[11:21] <moritz_> and all that for superwising a lab.

[11:21] <moritz_> tadzik: actually for the university I'm a physicist

[11:21] <moritz_> s/w/v/

[11:23] <moritz_> and I have to do all the programming myself

[11:24] <moritz_> (with one exception; I did supervise a tutorial in theoretical computer science 2 years ago. It was fun. )

[11:38] * moritz_ feels like he killed conversation, if there was one...

[11:38] <tadzik> was there?

[11:38] <masak> don't think so.

[11:38] <tadzik> you started some. It comes and it goes

[11:39] <masak> fwiw, I found the description about questionnaires informative.

[11:39] <moritz_> nom&

[11:52] *** wallberg left
[12:01] *** exodist joined
[12:28] *** REPLeffect joined
[12:28] *** orafu joined
[12:34] *** meppl joined
[12:37] *** bluescreen joined
[12:37] *** bluescreen is now known as Guest79835

[12:39] <gfldex> http://www.schockwellenreiter.de/blog/2010/11/12/cat-content-6/

[12:40] *** risou joined
[12:46] <masak> I'd say that's a very patient, understanding cat. clearly it allows its human servant a false sense of mastery, as a sort of generous gesture.

[12:48] *** snearch joined
[12:48] <takadonet> morning all

[12:50] <Util> Morning, takadonet

[12:53] *** pmurias joined
[12:57] *** Chillance joined
[13:04] *** TobiO|ref joined
[13:17] *** mavrc left
[13:17] <takadonet> rakudo: my $limit=5; "I want this to work so badly!" ~~ /(\N**0..$limit)/ ; say $0;

[13:17] <p6eval> rakudo d85964: OUTPUT«===SORRY!===␤Only integers or '*' allowed as range quantifier endpoint at line 22, near "$limit)/ ;"␤»

[13:17] <takadonet> rakudo: my $limit=5; "I want this to work so badly!" ~~ /(\N**0..*) <?{$0.chars < $limit} > / ; say $0;

[13:17] <p6eval> rakudo d85964: OUTPUT«===SORRY!===␤regex assertion not terminated by angle bracket at line 22, near " > / ; say"␤»

[13:18] <takadonet> rakudo: my $limit=5; "I want this to work so badly!" ~~ /(\N**0..*) <?{$0.chars < $limit}> / ; say $0;

[13:18] <p6eval> rakudo d85964: OUTPUT«I wa␤»

[13:18] <takadonet> masak: finally got a work around

[13:18] <masak> \o/

[13:19] <takadonet> so might have a chance to get all of Text-Wrap-Tabs working

[13:20] *** risou_ joined
[13:21] <masak> moritz_++ # "Don't be scared, it's just a collection of text documents :-)"

[13:21] <moritz_> :-)

[13:21] *** risou left
[13:21] <takadonet> ?

[13:21] *** MayDaniel joined
[13:22] <masak> takadonet: p6l

[13:23] * moritz_ thinks it would be a good idea of sombody with more experience with async IO could comment on the ideas

[13:25] <moritz_> it seems that Ben has some concrete, solid ideas about how it should not look like, and more importantly how it should look like

[13:26] <moritz_> even if it's not what we'll end up with, it would be much better to have some like that in the spec, just as a general direction for exploration

[13:27] <masak> aye.

[13:29] *** plainhao joined
[13:29] <colomon> takadonet++

[13:33] *** sftp joined
[13:34] *** Psyche^ joined
[13:34] *** Psyche^ is now known as Patterner

[13:35] *** MayDaniel left
[13:44] *** exodist is now known as Exodist

[13:49] *** s1n joined
[14:10] *** nymacro_ joined
[14:10] *** nymacro left
[14:10] *** nymacro_ is now known as nymacro

[14:17] *** wamba joined
[14:21] *** KyleHa joined
[14:28] *** fhelmberger joined
[14:29] *** daxim left
[14:32] *** daxim joined
[14:34] *** ggoebel joined
[14:41] <masak> what's the purpose of role Container?

[14:42] <frettled> masak: to contain our enthusiasm. :) (c'mon, give us those Japanese warriors)

[14:43] <masak> はい！

[14:45] <masak> anyway, it seems to me Container is only there because somebody thought that there has to be a parent role for List and Hash. (an odd pair. shouldn't that be Array and Hash...? or List and EnumMap...?)

[14:45] <masak> and I don't see why there need be.

[14:48] <moritz_> back in the days there was no EnumMap

[14:48] <masak> I'm not saying there isn't a good reason, mind you. I'm saying that if there is one, it's not apparent in the synopses.

[14:49] <masak> it doesn't seem to me, for example, that Container is the role responsible for containing things. in fact, it's empty.

[14:49] <masak> which is, I guess, Zen and all.

[14:50] <masak> but not particularly useful.

[14:50] <moritz_> masak: maybe FETCH and STORE really want to live there; but maybe that's a different Container notion

[14:50] *** [Coke] joined
[14:50] <[Coke]> moritz_: ping.

[14:50] <moritz_> [Coke]: pong.

[14:50] <[Coke]> so, is rakudo just ignored parrot's revision # for now?

[14:50] <[Coke]> *ing

[14:51] <masak> moritz_: maybe. if so, that could be a motivation. but scalars have FETCH and STORE too, don't they. are scalars Containers as well?

[14:51] <moritz_> [Coke]: no, it barfs until we have a working solution

[14:51] <moritz_> [Coke]: dukeleto is working on the parrot side, and I on the Rakudo side

[14:51] <[Coke]> ... so development is stuck at last svn revision?

[14:51] <moritz_> for now, yes

[14:52] <moritz_> unless you comment out a line from Configure.pl

[14:52] <[Coke]> Ok. I'll go back to lurking until this is working again, then. Thanks.

[14:53] <moritz_> [Coke]: if you happen to know how to add key-value pairs to parrot_config, that knowledge would be greatly appreciated :-)

[15:00] <masak> actually, I'm not at all sure that the C<Container> type mentioned under S10/Autoloading is the same C<Container> type that S32/Containers declares.

[15:02] <frettled> Fun.

[15:06] <[Coke]> moritz_: in a config step, $conf->data->set('key',$val);

[15:07] <moritz_> dukeleto: see above

[15:07] <moritz_> [Coke]++

[15:09] <dukeleto> moritz_: hmmm, i did something very close to that

[15:11] <moritz_> ah, I see it now

[15:11] <moritz_> $conf->data->set( describe => $describe );

[15:11] <dukeleto> I am almost done.

[15:11] <dukeleto> gonna push in a few

[15:11] <dukeleto> auto::git_describe -  Determine Parrot's git-describe string...RELEASE_2_9_1-229-g2e10036.

[15:12] <moritz_> \o/

[15:12] <dukeleto> moritz_: the commits i just pushed may be what you need

[15:13] <dukeleto> moritz_: i am testing it manually now

[15:13] <moritz_> looks like it

[15:15] <dukeleto> $ ./parrot_config --dump|grep 'git_describe =>'

[15:15] <dukeleto> git_describe => 'RELEASE_2_9_1-229-g2e10036'

[15:15] <moritz_> \o/ seems to work

[15:15] <dukeleto> moritz_: have fun. I need to do conferency things :)

[15:15] <dukeleto> moritz_: i will unsharpen some of the edges in the next few days. Have fun and wear gloves!

[15:18] *** alester joined
[15:18] *** TobiO|ref left
[15:19] *** thundergnat joined
[15:20] <thundergnat> Hi #perl6

[15:20] <thundergnat> I've got something that seems like it should be simple but I can't figure out.

[15:21] <colomon> o/

[15:21] <masak> greetings, thundergnat.

[15:21] <thundergnat> I'm trying write a sub routine that needs to access its variables twice.

[15:22] <masak> rakudo: sub foo($x) { say $x; say $x }; foo(42)

[15:22] <p6eval> rakudo d85964: OUTPUT«42␤42␤»

[15:22] <thundergnat> I cna do it by witing out my long complicated expressions twice but it is offending my sense of DRI.

[15:23] <thundergnat> this works: sub c ($a,$b) {[leg] $a.lc~'long expression'~0.chr~$a, $b.lc~'long expression'~0.chr~$b}; say c('abc', 'AbC');

[15:23] *** MayDaniel joined
[15:23] <thundergnat> bu tI would like something like: sub c ($a,$b) {[leg] ($a,$b)>>.lc>>~>>'long expression'>>~>>0.chr>>~>>*}; say c('abc', 'AbC');

[15:23] <masak> thundergnat: $stuff-using-$_ given 'long expression'

[15:23] <moritz_> thundergnat: seems like you want a local sub that replaces 'long expression'

[15:23] <moritz_> or map

[15:23] <masak> or a local variable.

[15:24] <moritz_> ($a, $b).map({ .long-expression })

[15:24] <colomon> I'm confused as to why you are using [leg] here?

[15:24] <thundergnat> colomon: it is a comparison routine

[15:24] <masak> hm, can you really reduce leg?

[15:24] <colomon> no

[15:24] <moritz_> why not?

[15:24] <masak> that doesn't make much sense.

[15:25] <thundergnat> masak yep

[15:25] <moritz_> rakudo: say [leg] 'a', 'b'

[15:25] <colomon> I mean, you can, but it will be bad

[15:25] <p6eval> rakudo d85964: OUTPUT«-1␤»

[15:25] <masak> how does leg associate?

[15:25] <moritz_> not at all

[15:25] <colomon> yes, but that has no advantage I can see over 'a' leg 'b'

[15:25] <thundergnat> The [leg] is a red herring. that works

[15:25] <masak> colomon: indeed.

[15:26] <moritz_> thundergnat: so. map() or a local sub

[15:26] <masak> so [leg] over more than two elements would be an error.

[15:26] <dalek> rakudo: 3996180 | moritz++ | src/builtins/Str.pir:

[15:26] <dalek> rakudo: make qx and qqx return proper Perl strings

[15:26] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/39961809f30a7b243eab05282d390fe457a34554

[15:26] *** Guest79835 left
[15:26] <moritz_> my sub foo($x) { $x.long.expression };  foo($a) leg foo($b)

[15:26] <colomon> masak: I don't think it's an error, it's just a crazy idea

[15:26] <colomon> I mean,

[15:27] <colomon> rakudo: say [leg] 'a', 'b', 'c'

[15:27] <p6eval> rakudo d85964: OUTPUT«-1␤»

[15:27] <thundergnat> I'm trying to rewrite this in a DRI way (actual code)

[15:27] <thundergnat> [leg] $a.lc.subst(/(\d+)/,->$/{0~$0.chars.chr~$0},:g)~"\x0"~$a, $b.lc.subst(/(\d+)/,->$/{0~$0.chars.chr~$0},:g)~"\x0"~$b

[15:27] <thundergnat> that WORKS, it''s just offensive

[15:27] <colomon> is something like 'a' leg 'b' leg 'c' is -1 leg 'c'

[15:27] <colomon> (might be the other way around, 'a' leg -1)

[15:28] <masak> it shouldn't be either.

[15:28] <masak> it should protest.

[15:28] <thundergnat> I thought maybe this would work:

[15:28] <thundergnat> [leg] $a,$b)>>.lc>>.subst(/(\d+)/,->$/{0~$0.chars.chr~$0},:g)>>~>>"\x0">>~>>*

[15:28] <thundergnat> but no

[15:28] <thundergnat> err: [leg] ($a,$b)>>.lc>>.subst(/(\d+)/,->$/{0~$0.chars.chr~$0},:g)>>~>>"\x0">>~>>*

[15:28] <masak> infix:<leg> is listed in S03 as being non-associative.

[15:28] <masak> it's an interesting question whether you should still be allowed to [leg] two things.

[15:29] <masak> probably should.

[15:29] <colomon> masak: probably should not, if being non-associative means you cannot reduce.

[15:29] <masak> I always thought it does.

[15:29] <thundergnat> masak Isn't it just a string specific cmp?

[15:29] <masak> thundergnat: yes, but the problem is there for cmp as well.

[15:29] <colomon> or <=>

[15:29] <masak> thundergnat: it doesn't associate.

[15:30] <masak> hence reducing it doesn't make sense.

[15:30] <masak> this is a rakudobug, but I'm on the move and can't submit it right now.

[15:30] <colomon> thundergnat: moritz_'s solution is almost certainly the best

[15:30] <masak> someone else is welcome to.

[15:31] <colomon> masak++ # spec clearly indicates [leg] should be illegal

[15:31] <colomon> rakudo: say [leg] 'a', 'b', 'c'

[15:31] <p6eval> rakudo d85964: OUTPUT«-1␤»

[15:31] *** tzhs left
[15:31] <thundergnat> huh. It accidentally works.

[15:31] * moritz_ thinks [leg] with two arguments is fine

[15:31] <thundergnat> I sorta assumed it should

[15:32] <colomon> "Any infix operator (except for non-associating operators) can be surrounded by square brackets...."

[15:32] <moritz_> because &[foo] is really a short-hand for ...

[15:32] <moritz_> oh

[15:32] <moritz_> colomon wins by citing the spec :-)

[15:32] <colomon> masak wins by making me look there

[15:32] <moritz_> colomon wins, masak meta-wins :-)

[15:33] <masak> \o/

[15:33] *** rgrau joined
[15:33] <masak> Rakudo just fails to throw an error there.

[15:33] <thundergnat> Hmmm. Alright. I'm just wrong i guess.

[15:34] <masak> thundergnat: yes, but in a way that merits investigation. try to realize why [leg] is an insane notion.

[15:34] <thundergnat> Well that completely makes my question irrelevent

[15:34] <moritz_> thundergnat: it "works" by  comparing -1 to 'c'

[15:34] <masak> thundergnat: thanks anyway for bringing this up.

[15:34] <thundergnat> if I can't reduce leg or cmp, I HAVE to repeat myself.

[15:34] <masak> it resulted in a rakudobug, which is good.

[15:34] <moritz_> rakudo: say [leg] <c b a>

[15:34] <p6eval> rakudo d85964: OUTPUT«-1␤»

[15:34] *** wamba left
[15:34] <moritz_> rakudo: say [leg] <a b c>

[15:35] <p6eval> rakudo d85964: OUTPUT«-1␤»

[15:35] <thundergnat> Ah well DRI suffers but life goes on.

[15:35] <masak> thundergnat: or you could do what moritz_++ suggested.

[15:35] <colomon> reporting now...

[15:35] <moritz_> rakudo: say [leg] <a b 1>

[15:35] <p6eval> rakudo d85964: OUTPUT«-1␤»

[15:35] <moritz_> rakudo: say [leg] <a b -1>

[15:35] <p6eval> rakudo d85964: OUTPUT«0␤»

[15:35] <masak> colomon++

[15:35] <moritz_> it just returns the last comparison

[15:35] <moritz_> a before b, so it's just -1 leg -1, which returns 0

[15:36] <moritz_> dynamic typing ftf

[15:36] <masak> there's a lot of machinery in Perl 6 for "generic comparison". I've yet to see it work well in practice.

[15:36] <dalek> rakudo: 0939ad8 | moritz++ | build/PARROT_REVISION:

[15:36] <dalek> rakudo: bump PARROT_REVISION to something that can report a git-describe-ish revision

[15:36] <dalek> rakudo: 

[15:36] <dalek> rakudo: note that that's currently from a parrot branch (git_describe), so that parrot

[15:36] <dalek> rakudo: branch must be merged before we merge this rakudo branch

[15:36] <masak> my, I seem to have gotten a lot grumpier lately. :)

[15:36] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/0939ad808deb7edec6bcdaa3be89ecd6341689cd

[15:37] <moritz_> rakudo: say <a b c> cmp <a b a>

[15:37] <p6eval> rakudo d85964: OUTPUT«1␤»

[15:37] <moritz_> rakudo: say <a b c> cmp <a b d>

[15:37] <p6eval> rakudo d85964: OUTPUT«-1␤»

[15:37] <moritz_> I think cmp is smart enough on its own

[15:37] <colomon> RT 79116

[15:38] <PerlJam> moritz_: would RELEASE_2_9_1  work there as well?

[15:38] <moritz_> PerlJam: not yet

[15:38] <moritz_> but it should be trivial to add

[15:39] <masak> train &

[15:39] *** masak left
[15:39] <thundergnat> Anyway, thanks for your help. Even if it amounted to "What the hell were you thinking!?"

[15:40] *** thundergnat left
[15:41] *** Guest79835 joined
[15:41] <moritz_> well, we did have some ideas :-)

[15:41] <colomon> moritz_: I get the feeling he stubbornly resisted your excellent suggestion.  :(

[15:42] *** kaare_ joined
[15:42] <moritz_> that's fine. I can't do more than offering them.

[15:43] <moritz_> maybe he really wants something like

[15:43] <moritz_> sub transform($x) { .... }

[15:43] *** MayDaniel left
[15:43] <moritz_> first { $_ }, @a>>.&transform Zleg @b>>.&transform

[15:44] * moritz_ likes that line, and should blog about it :-)

[15:44] <colomon> woah, that's quite a line!

[15:44] <PerlJam> Zleg makes me think you're writing some slavic language or something

[15:47] <moritz_> PerlJam: I've just updated my local code for revision comparing to handle just RELEASE_1_2_3

[15:54] *** kanishka joined
[16:00] *** TobiO|ref joined
[16:01] *** KyleHa left
[16:03] *** KyleHa joined
[16:07] *** mavrc joined
[16:07] *** thundergnat joined
[16:08] <thundergnat> colomon, moritz_: no, no! Your suggestions were quite useful! 

[16:08] <thundergnat> Didn't mean to sound disparaging.

[16:09] <moritz_> no problem

[16:09] <moritz_> thundergnat: did you see my suggestion with Zleg?

[16:10] <thundergnat> moritz_ Actually, after being kicked in the right direction, your suggestion turned out to be exactly what I was looking for.

[16:10] <moritz_> \o/

[16:11] <thundergnat> I did, but I don't really need the Z. I was only ever using two terms. Cool idea though.

[16:11] *** nymacro left
[16:11] <takadonet> http://developers.slashdot.org/story/10/11/12/1439236/The-Coming-War-Over-the-Future-of-Java?from=rss 

[16:11] <takadonet> So glad we don't have any corporate backing

[16:12] *** hercynium joined
[16:15] *** lidden joined
[16:17] *** justatheory joined
[16:22] <moritz_> it really depends on the kind of backing

[16:23] <moritz_> if it's organized through an independent foundation, I wouldn't mind a bit more financial support

[16:26] <thundergnat> \o/  That worked out very well!  thanks guys! https://gist.github.com/674282

[16:26] <takadonet> i agree , backing from apache foundation would be great

[16:26] <takadonet> apache like anyway

[16:27] <thundergnat> Refering to my Gist above: Is there any opinion on whether I should make the naturally subs our?

[16:27] <thundergnat> I could see situations where someone might want to do caching, but I also hate to clutter up the namespace.

[16:28] <thundergnat> Or is there a way to expose them on demand?

[16:28] <moritz_> you can add 'is export', but that won't work well if they live in a monkey-typed classed

[16:29] * takadonet still does not understand monkey-typed classes

[16:31] <thundergnat> moritz_: the naturally subs are not in the monkey-typed class, they are just called from there.

[16:32] <thundergnat> What does "is export" imply? or, better perhaps, where in the spec can I read about is export?

[16:33] <moritz_> thundergnat: yes, but if you put them in a package (in order to make them properly exportable), you remove them from the lexical scope in which they are called now

[16:33] <thundergnat> ah

[16:33] <moritz_> 'is export' implies that you can   use YourModule; and get a lexical sub installed in your scope

[16:33] <moritz_> of course you can always

[16:33] <moritz_> do

[16:34] <moritz_> module Sort::Naturally { our sub naturally($x) is export { ... } }

[16:34] <moritz_> and then refer to &Sort::Naturally::naturally in class Any

[16:35] <thundergnat> Is there a way to only load exportable subs where specifically desired? use Sort::Naturally qw/naturally/;

[16:36] <thundergnat> Like p5?

[16:36] <thundergnat> or is that what is export does?

[16:37] <TimToady> std: [leg] 1,2,3;

[16:37] <p6eval> std a194beb: OUTPUT«[31m===[0mSORRY![31m===[0m␤Can't reduce with leg because structural infix operators are diffy and not chaining at /tmp/ZgV_6OuzjF line 1:␤------> [32m[leg][33m⏏[31m 1,2,3;[0m␤Check failed␤FAILED 00:01 120m␤»

[16:40] *** KyleHa left
[16:42] *** buubot joined
[16:43] *** KyleHa joined
[16:44] *** kjeldahl joined
[16:49] <colomon> thundergnat++

[16:49] *** MayDaniel joined
[16:51] <colomon> TimToady++ # why do I never think of trying std: for things like this?!

[16:53] *** pmurias left
[17:06] *** icwiener joined
[17:09] *** REPLeffect left
[17:10] *** spacebat left
[17:11] *** spacebat joined
[17:21] *** Bzek_ joined
[17:21] <PerlJam> structural infix ops are "diffy"?

[17:21] *** lestrrat joined
[17:22] *** REPLeffect joined
[17:27] *** TobiO|ref left
[17:29] <moritz_> their output type are too different from the input types to allow meaningfull chaning

[17:31] *** REPLeffect left
[17:31] *** mindos1 joined
[17:31] <tadzik> o/

[17:33] *** TobiO|ref joined
[17:34] * moritz_ has a new laptop

[17:34] *** wamba joined
[17:34] <moritz_> it come with suse preinstalled, which seems pretty decent at first glance

[17:35] <tadzik> nice

[17:35] <jnthn> sounds nice

[17:37] <moritz_> as the next step I'll install Debian :-)

[17:38] <jnthn> huh, not Windows? ;-)

[17:40] <tadzik> > perl Configure.pl --gen-parrot

[17:40] <tadzik> Argument "RELEASE_2_9_1-233-gb18101c" isn't numeric in addition (+) at Configure.pl line 25, <$REQ> line 1.

[17:40] <tadzik> known?

[17:41] <[Coke]> I believe dukeleto and moritz are in the middle of fixing that.

[17:43] <moritz_> tadzik: uhm, I meant to push that to branch gitparrot, not to master

[17:43] * moritz_ should revert that last commit

[17:43] *** fhelmberger left
[17:43] <tadzik> that's why I was suprised when PARROT_REVISION changed when I pulled from master :)

[17:45] *** REPLeffect joined
[17:47] *** cdarroch joined
[17:47] *** cdarroch left
[17:47] *** cdarroch joined
[17:47] * moritz_ apologizes

[17:48] *** lestrrat left
[17:49] *** REPLeffect left
[17:51] *** toebu joined
[17:51] *** toebu is now known as TobiO|tom

[17:51] *** lestrrat joined
[17:52] <moritz_> rakudo: say 1 cmp 0

[17:52] <p6eval> rakudo d85964: OUTPUT«1␤»

[17:53] <takadonet> ....

[17:53] <dalek> rakudo: c548b87 | moritz++ | build/PARROT_REVISION:

[17:53] <dalek> rakudo: Revert "bump PARROT_REVISION to something that can report a git-describe-ish revision"

[17:53] <dalek> rakudo: 

[17:53] <dalek> rakudo: It was meant to go into a different branch, not yet into master. Sorry.

[17:53] <dalek> rakudo: 

[17:53] <dalek> rakudo: This reverts commit 0939ad808deb7edec6bcdaa3be89ecd6341689cd.

[17:53] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/c548b87f1b06bb6cee32cca8cc675d7ec4d22e1a

[17:54] <moritz_> rakudo: say 'a' cmp 'b'

[17:54] <p6eval> rakudo d85964: OUTPUT«-1␤»

[17:58] *** daxim left
[18:00] *** impious joined
[18:00] <takadonet> :)

[18:00] <moritz_> am I right in assuming that Configure.pl always runs from within the rakudo directory?

[18:01] * jnthn has certainly never done otherwise...

[18:01] *** dakkar left
[18:02] <jnthn> moritz_: Also the README explicitly says to change into the rakudo directory before running Configure.

[18:02] <moritz_> ok, great

[18:02] <moritz_> then I'll rely on that

[18:02] *** kanishka left
[18:03] *** impious left
[18:10] *** ash__ joined
[18:12] <dalek> mu: 31e831d | moritz++ | misc/dalek-conf.json:

[18:12] <dalek> mu: [dalek-conf] monitor "parrotgit" rakudo branch

[18:12] <dalek> mu: review: https://github.com/perl6/mu/commit/31e831d843807a7bf0fbbf89528e77bfcc01a730

[18:17] <colomon> Ack!  no   -  in variable names in p5!

[18:21] *** risou_ left
[18:21] *** risou joined
[18:21] *** icwiener_ joined
[18:22] *** ash__ left
[18:23] *** ash__ joined
[18:25] *** icwiener left
[18:28] *** ash__ left
[18:30] *** icwiener_ left
[18:33] *** icwiener_ joined
[18:34] *** ash__ joined
[18:37] *** bphillips joined
[18:37] *** bphillips_ joined
[18:37] *** bphillips left
[18:41] *** bphillips_ left
[18:45] *** TobiO|tom left
[18:45] *** TobiO|ref left
[18:46] *** kanishka joined
[18:50] <sorear> good * #perl6

[18:50] <tadzik> hello sorear 

[18:51] <ash__> does nqp have a $* with its version or anything? 

[18:51] *** TobiO|ref joined
[18:51] *** TobiO|tom joined
[18:52] <sorear> ping moritz_

[18:52] <ash__> nqp: say($VERSION);

[18:52] <p6eval> nqp: OUTPUT«Symbol '$VERSION' not predeclared in <anonymous>␤current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (compilers/pct/src/PCT/HLLCompiler.pir:109)␤»

[18:53] <moritz_> sorear: pong

[18:53] <jnthn> ash__: Not afaik, though it could be a good idea. We'll likely want a $*VM or some such at some point too.

[18:54] <ash__> $*NQP<version> (to mimic) $*PERL<version> ? 

[18:54] <ash__> rakudo: say $*PERL<version> 

[18:54] <jnthn> Yeah, perhaps that.

[18:54] <p6eval> rakudo c548b8: OUTPUT«2010.10-21-gc548b87␤»

[18:54] <sorear> moritz_: if you'd like to not have to add branches to dalek-conf.json ever again, take a look at dalek-push.txt

[18:54] <moritz_> sorear: I don't have admin access to the rakudo repoi

[18:54] <moritz_> s/i$//

[18:56] *** kanishka left
[18:57] *** M_o_C joined
[18:58] <sorear> oh.

[18:59] *** ch3ck joined
[19:00] *** toebu_ joined
[19:01] <ash__> anyone using tm, i added 2 new commands to my perl bundle, so you can "Run as Perl6" and "Run as NQP" 

[19:01] *** TobiO|ref left
[19:02] *** envi joined
[19:02] *** TobiO|tom left
[19:02] <tadzik> tm?

[19:03] <colomon> textmate

[19:03] *** envi left
[19:03] <colomon> ash__:  Where is your bundle again?  :)

[19:04] <ash__> https://github.com/ashgti/perl-tmbundle 

[19:04] <colomon> thanks!

[19:05] <ash__> git clone https://github.com/ashgti/perl-tmbundle ~/Library/Application\ Support/TextMate/Bundles/perl.tmbundle  should more or less work (assuming directories exist) 

[19:08] <ash__> Cmd+Shift+R will run the current file as perl6 

[19:09] <ash__> thats the more useful one, i think, unless you do a lot of nqp, thats Cmd+Ctrl+R (but you can re-map them) 

[19:11] *** ash__ left
[19:11] <tadzik> where do metaops live in Rakudo source?

[19:12] <jnthn> src/core/metaops.pm iirc

[19:13] <jnthn> And code that maps the parsed stuff into using those is in Actions.pm, search for meta_ or so.

[19:15] *** TobiO|ref joined
[19:22] *** ash__ joined
[19:26] <lue> ohai o/

[19:26] <sorear> hello lue

[19:28] <colomon> sorear++ # p6l post

[19:29] <sorear> moritz++ # posted first

[19:29] <lue> how do I make it so this regex: /^^ '=begin' \s+ <blocktype> [\s+ <option>]* $$/ won't go past a newline in a string? [or will I need to split the string into an array?]

[19:29] <sorear> \h+

[19:29] <sorear> 'h'orizontal whitespace

[19:31] <lue> thank you sorear. That worked perfectly.

[19:40] *** rgrau left
[19:42] <[Coke]> colomon: (p6l post) really? that didn't read as helpful to me.

[19:43] *** wamba left
[19:49] *** silug joined
[19:50] *** thundergnat left
[19:54] *** drewrockshard joined
[19:55] *** mikehh joined
[19:55] *** drewrockshard left
[20:01] <sorear> [Coke]: Should it have been helpful?  The OP read as a request for criticism to me.

[20:03] <dalek> mu: 560e262 | sorear++ | misc/dalek-conf.json:

[20:03] <dalek> mu: Remove pull notification for parrot.git

[20:03] <dalek> mu: review: https://github.com/perl6/mu/commit/560e2627f1368213a65cbaa9e06012b5c6ce6f2a

[20:03] <dukeleto> [Coke]: i made a branch on partcl for getting it to work with parrot.git called 'parrotgit'

[20:09] *** toebu_ left
[20:09] <[Coke]> dukeleto: danke.

[20:09] *** TobiO|ref left
[20:10] <lue> There's no info on it in the spec, but I assume .parsefile($str, :rule<A>) will continually try to match the regex|token|etc. named A until it's done with the string. Am I correct?

[20:11] <colomon> huh.

[20:11] <sorear> No

[20:11] <sorear> it will match 1 copy of A against the entire string

[20:12] *** risou left
[20:13] <lue> so it's no different that .parse then.

[20:13] <moritz_> well, .parsefile opens a file and parse its contents

[20:14] <lue> yeah, but it essentialy does the exact same thing, right? Just does the extra step of opening a file.

[20:14] <moritz_> corrrect

[20:14] <moritz_> also note that the only difference in name is the 'file' part

[20:17] <lue> Then my problem would be that I can't get my regex to match against every line in the string (without turning it into an array of course. If that's the only way then fine.)

[20:17] <sorear> lue: you need the * quantifier

[20:17] <moritz_> lue: if your file format is intrinsically line based, splitting in lines first is easiest

[20:19] <moritz_> \o/ perl Configure.pl --gen-parrot  works again in the parrotgit branch

[20:19] <colomon> \o/

[20:19] <moritz_> please test it

[20:20] <lue> I use +, as in <regexthing>+. Does that make a difference?

[20:21] <ash__> colomon: i am trying to add some unit tests to the tm bundle, since it now has a tool for testing its grammars (see http://lists.macromates.com/textmate/2010-May/030881.html if your interested), so, maybe i'll have some better support soon, i am trying to fix the old issues of doing: package Foo; sub bar { }; and having it show the symbols in the symbol table properly 

[20:21] <tadzik> Argument "RELEASE_2_9_1-233-gb18101c" isn't numeric in addition (+) at Configure.pl line 25, <$REQ> line 1.

[20:21] <tadzik> # On branch parrotgit

[20:21] <moritz_> lue: depends on whether you want allow an empty file

[20:21] <moritz_> tadzik: did you pull again?

[20:22] <colomon> ash__++

[20:22] <tadzik> hmm, I pulled before switching

[20:22] <tadzik> right, something was not there

[20:23] <tadzik> hmm, not-so-bug, but still: http://wklej.org/id/417814/

[20:24] <moritz_> so, is your parrot still an svn checkout?

[20:24] <lue> It matches the first line perfectly, but won't do anything after that.

[20:25] <tadzik> moritz_: not anymore, but this error should've stop spitting errors earlier, no?

[20:25] <moritz_> lue: do you have any rule that matches the \n at the end

[20:25] <moritz_> tadzik: it should

[20:26] <moritz_> I'm confused

[20:26] <moritz_> if (-d 'parrot') {

[20:26] <moritz_>     if (-d 'parrot/.svn') {

[20:26] <moritz_>         die "===SORRY===\n"

[20:27] <moritz_> so, there's no parrot/.svn, but you still get the error?

[20:27] <lue> I use $$ at end… waitaminute. (I've got a whole tree of <regex>es in regexes going on.)

[20:27] <tadzik> no, there was one, error was ok. But there were a few perl warnings, and that error message is die, no?

[20:28] <moritz_> lue: $$ matches line end, but not the \n

[20:28] <moritz_> tadzik: yes, but it's in gen_parrot.pl, which is spawned from COnfigure.pl - which in itself doesn't detect unsuccessful return

[20:29] <moritz_> tadzik: which is unfortuneate, but nothing new - so not a high priority for me

[20:29] <tadzik> I see

[20:32] <tadzik> duh, Parrot repo is Big

[20:33] <lue> So replace $$ with \n ?

[20:33] <moritz_> \n? $$

[20:34] <moritz_> that way you also match the last line in a file that doesn't end in \n

[20:34] <sorear> $$ \n? surely

[20:34] <sorear> $$ won't match after \n

[20:34] <tadzik> \n and then the end of the line

[20:35] <moritz_> rakudo: say ?( "a\n" ~~ /\n $$/ )

[20:35] <p6eval> rakudo c548b8: OUTPUT«Bool::False␤»

[20:35] <moritz_> rakudo: say ?( "a\n" ~~ / $$ \n/ )

[20:35] <p6eval> rakudo c548b8: OUTPUT«Bool::True␤»

[20:35] <moritz_> ok,, you're right

[20:35] <tadzik> moritz_: branch seems to work for me, Parrot is building itself

[20:35] <moritz_> \o//

[20:36] <tadzik> wow, where did you grow that third arm?

[20:36] <jnthn> moritz_: I can try it on Win32 later on today, but don't let that hold up merging it if you're otherwise ready.

[20:36] <moritz_> jnthn: well, it actually requires a merged parrot branch too

[20:36] <jnthn> ah, ok

[20:37] <jnthn> moritz_++ # working on fixing this up

[20:40] <lue> grr. I match to    regex TOP { <directive>+ }    anything wrong in trying to get that to match more than one line? [where <directive> is regex directive { <A>|<B>|<C>|<D> }, and each of those begin with ^^ and end with $$ \n]

[20:41] *** molaf joined
[20:42] <moritz_> nothing wrong with that

[20:42] <moritz_> though it might be easier to match ^^ and $$\n in <directive>

[20:43] <lue> and remove ^^ and $$\n from the others. [trying...]

[20:44] <tadzik> moritz_: everything works like a charm

[20:44] *** rgrau joined
[20:48] <tadzik> One day I'll consider Rakudo fast, when I could watch ForestFire.pl more often than one frame every 15 seconds :)

[20:48] <moritz_> tadzik: I fixed the bug with further errors from Configure.pl

[20:48] <tadzik> moritz_++

[20:48] <lue> hm, could greediness be the issue in my regex TOP?

[20:49] <moritz_> what makes you think so?

[20:49] <moritz_> lue: http://perlgeek.de/en/article/debug-a-perl-6-grammar

[20:50] *** Guest79835 left
[20:51] <moritz_> $ ./perl6 --version

[20:51] <moritz_> This is Rakudo Perl 6, version 2010.10-20-g08fb200 built on parrot 2.9.1 rRELEASE_2_9_1-233-gb18101c

[20:52] <moritz_> uhm, the r is still wrong

[20:52] <tadzik> (:

[20:53] <moritz_> tadzik: fixed.

[20:54] <moritz_> sorear: dalek doesn't seem to report commits from the parrotgit branch

[20:54] <mindos1> Hi, I just build Rakudo on OSX server 10.6.4, and it failed on some test. Where can I report to?

[20:54] <moritz_> how long should it take to pick up new branches

[20:54] <sorear> 5 minutes

[20:54] <moritz_> mindos1: mailto:rakudobug@perl.org

[20:54] <moritz_> though a failure in pid.t is known

[20:55] <sorear> the first push to any branch will always be missed

[20:55] <mindos1> Oh, I got that one. I also got t/spec/S32-io/IO-Socket-INET.rakudo failed.

[20:55] <moritz_> mindos1: does that fail deterministally if you run it multiple times?

[20:56] <moritz_> ./perl6 t/spec/S32-io/IO-Socket-INET.rakudo

[20:56] *** M_o_C left
[20:56] <sorear> fetch_url: failure fetching https://github.com/api/v2/yaml/commits/list/rakudo/rakudo/parrogit: 404 Not Found

[20:56] <moritz_> dammit, typo

[20:56] * moritz_ stupid

[20:57] <dalek> mu: cfe4b79 | moritz++ | misc/dalek-conf.json:

[20:57] <dalek> mu: fix typo, moritz--

[20:57] <dalek> mu: review: https://github.com/perl6/mu/commit/cfe4b799821170e3f1d10a22444ac6a6a3f3a003

[21:02] *** y3llow_ joined
[21:02] *** pothos_ joined
[21:04] *** y3llow_ is now known as y3llow

[21:04] <mindos1> moritz_: failed 3/3 times, only succeed on Test 1 is-a test.

[21:05] *** pothos_ is now known as pothos

[21:06] <lue> do | (disjunctions) only work right inside some set of brackets? [or would its probability of working increase in brackets?]

[21:10] <flussence> they should work anywhere, but there's always op precedence stuff to remember. When in doubt, write lisp.

[21:11] <sorear> | and || are synonymous in Rakudo

[21:11] <tadzik> . o O (will have to remember that)

[21:12] <Tene> lue: probability of working?

[21:12] <Tene> sorear: you only mean in Rakudo's grammars, right?

[21:13] *** proller joined
[21:13] *** plainhao left
[21:13] *** nrr joined
[21:14] *** kaare_ left
[21:27] *** MayDaniel left
[21:32] *** proller left
[21:32] <sorear> Tene: yes

[21:33] *** proller joined
[21:33] *** proller_ joined
[21:33] *** proller_ left
[21:42] <lue> grr. I'm thinking of scrapping and starting over this grammar of mine. Maybe then it'll be easier to catch mistakes.

[21:42] *** slavik1 joined
[21:45] <tadzik> neutro can now install local modules, not only those git-fetched

[21:47] *** TobiO|ref joined
[21:50] <moritz_> (dpkg --{g,s}set-selections)++

[21:53] <mindos1> moritz_ : I sent the bug report. It seems that the qqx{ } refused to work on my build.

[21:54] <moritz_> mindos1+

[21:54] <moritz_> mindos1++

[21:54] * moritz_ -> sleep

[21:55] <mindos1> A newbe here...

[21:55] <mindos1> Night.

[21:55] <tadzik> mindos1: everyone says so at the beginning :)

[21:55] <mindos1> :P

[21:56] *** risou joined
[21:56] *** snearch left
[21:57] *** ash__ left
[21:57] <mindos1> I am really excited about the changes in Perl 6.  It seems you guys just wanna make it better -- with thought.

[21:59] <tadzik> we just wanna make it. There will be time for making it better then :)

[22:00] *** ash__ joined
[22:00] *** risou left
[22:03] *** ash___ joined
[22:03] *** toebu_ joined
[22:04] *** ash__ left
[22:04] <tadzik> self!sleep; # g'night

[22:05] <Juerd> mindos1: It has been changing for the past decade so your excitement is probably infinite by now :)

[22:05] <mindos1> tadzik: Good night.

[22:10] <mindos1> Juerd : Actually, I started to touch Perl6 just few days ago.  But I know many people have worked on it for quite a long time.

[22:11] <TimToady> hopefully it's turning into a real version of Perl in the sense that it rewards you at every level of participation

[22:28] *** hercynium left
[22:29] *** masonkramer left
[22:29] *** masonkramer joined
[22:30] <sjohnson> yo

[22:31] <mindos1> Yo~

[22:38] *** araujo joined
[22:39] <sjohnson> hows it going

[22:43] <mindos1> Reading Perl 6 documents, wondering where should I start.

[22:45] *** alester left
[22:46] <sorear> Start... what?

[22:46] <sorear> Using?  Contributing?  In what way?

[22:49] <ash___> anyone getting an error like: /bin/sh: line 0: cd: src/pmc: No such file or directory when building rakudo? 

[22:50] <sjohnson> start learning perhaps

[22:51] <mindos1> sorear : start to contribute something or find some program to write.

[22:52] <ash___> oh

[22:52] <ash___> hmm

[22:52] <ash___> figured it out

[22:52] <ash___> CDPATH causes a problem if you have it set

[22:52] <ash___> odd

[22:53] <ash___> an easy fix would be to set CDPATH to '' for the duration of the build process, or use ./ in front of paths that need them (hence why src/pmc failed, if it was ./src/pmc it would of been fine) 

[22:55] <ash___> or say: CDPATH='' make   same effect

[22:56] *** MayDaniel joined
[22:59] *** ash___ left
[23:01] *** KyleHa left
[23:02] *** TobiO|ref left
[23:06] *** toebu_ left
[23:06] *** masak joined
[23:06] <masak> oh hai! \o/

[23:06] * masak is at jnthn's place

[23:06] <masak> and I blogged! http://strangelyconsistent.org/blog/november-12-2010-plan-of-attack

[23:06] <jnthn> lolmasakblogged

[23:07] <sorear> hello masak

[23:07] <masak> ahoy sorear 

[23:09] <masak> sorear: how's niecza going? working on freeze/thaw and setting support?

[23:09] <sorear> yeah

[23:09] <TimToady> "guns against gnus"?

[23:09] <sorear> lots of questions for ingy

[23:09] <sorear> JSYNC spec is slushier than it looks

[23:09] <jnthn> But not against unix...

[23:09] <masak> TimToady: I had a brain slip. it's being fixed as we speak.

[23:10] <TimToady> masak: did you mean emus, or is there some joke I'm not getting

[23:10] <sorear> jsync is supposed to be semantically isomorphic with yaml, but I don't see how - foo versus - "foo" is handled, for instance

[23:10] <masak> TimToady: I think my brain might be conflating emus and gnus in places.

[23:10] <TimToady> well, I guess they're both warm blooded...

[23:11] <TimToady> unlike the hot-blooded aussies

[23:16] *** jaldhar joined
[23:16] <TimToady> s/attach/attack/

[23:16] <lue> hai masak o/

[23:16] <masak> TimToady: also fixed. you can refresh now :)

[23:16] <masak> lue: hey there.

[23:17] *** ilogger2 joined
[23:17] *** ChanServ sets mode: +v ilogger2

[23:17] <masak> seems the only way to get it right is to inline some of the CSS, and that'd mean quite a bit of manual, repetitive CSS styling. not sure what to do about that.

[23:18] *** ch3ck joined
[23:18] * TimToady wonders if he should upgrade to 64-bit Ubuntu this weekend, since his laptop will support it...

[23:18] * sorear is studying PyYAML

[23:18] <TimToady> and moar is obviously bettor

[23:19] * masak watched a ST-TNG episode the other day where Cmdr. Data informed someone that binary language is made up of 0s and 1s in "groups of eight or sixteen"

[23:20] <TimToady> of course, he's referring to Latin-1 vs UCS-2

[23:20] <masak> heh.

[23:21] <TimToady> you guys having a mini-hackathon?

[23:21] <lue> .oO("Oh no, Commander! This binary data is in groups of 8 *and* 16!")

[23:21] * diakopter is

[23:21] <jnthn> TimToady: Well, so far we mostly just discussed what we're going to eat... :)

[23:22] * lue continues staring at his grammar in silent anger.

[23:22] *** patrickas joined
[23:23] <TimToady> lue: you're approaching this all wrong; instead of staring you must bang your head against it until it dissolves from all the blood on it.

[23:23] <TimToady> jnthn: sorry...

[23:27] <masak> TimToady: I popped over to jnthn over the weekend for some nomz, hacking, and puns.

[23:27] <sorear> ping pmichaud_ 

[23:27] <TimToady> somehow I don't think it'll be a mini-nomathon

[23:27] <sjohnson> TimToady: when was the last time you played Perl golf?

[23:27] <diakopter> did he ever stop?

[23:27] <TimToady> does reducing the size of risottocode entries count?

[23:27] <masak> sorear: fwiw, pmichaud_ wrote what I was thinking in reply to your p6l email. sorear++

[23:27] <diakopter> mmmm risotto

[23:27] <lue> or the LCD juice from mu once=functoning scredn,

[23:27] <diakopter> TimToady: if I recall, you increased the size of my risottocode entry greatly :P .. but mine wasn't exactly idiomatic Perl 6. or even hardly.

[23:27] <masak> lue: you working on Pod?

[23:27] <TimToady> sjohnson: see, for instance, the second entry of http://rosettacode.org/wiki/Constrained_random_points_on_a_circle#Perl_6

[23:28] <TimToady> diakopter: which one was that?

[23:28] <lue> yes, and I think I'm going to murde— replace the grammar I conceived, so I can hopefully catch errors faster (I wrote the small bit that currently exists all at once :/)

[23:32] <diakopter> TimToady: the turtle one

[23:32] <TimToady> ah, I took a different approach

[23:32] <masak> lue: I've probably suggested it before, but once too many probably doesn't hurt: make sure to check the prior art that's out there.

[23:33] <lue> I did before [should look again]

[23:33] <masak> specifically L18-25 in https://gist.github.com/500732 has references to the three implementations I know of.

[23:33] <dalek> 6model: a8aa9f7 | jnthn++ | dotnet/ (2 files):

[23:33] <dalek> 6model: [dotnet] A little tweak to diakopter++'s patch for indirect method calls to avoid needing the operator in RakudoObject (I think we may need that some day, but will need it to do a coercion rather than just an unbox, and need it for .Net language interop).

[23:33] <dalek> 6model: review: https://github.com/jnthn/6model/commit/a8aa9f7b19225d399df333c8bcecad895071b5fe

[23:33] <dalek> 6model: 2c99e45 | jnthn++ | dotnet/runtime/Runtime/Ops/Comparison.cs:

[23:33] <dalek> 6model: [odd] More git oddness - line ending issue?

[23:33] <dalek> 6model: review: https://github.com/jnthn/6model/commit/2c99e45b603d35de276ad4fb05edac6b68933681

[23:33] <dalek> 6model: 805378f | jnthn++ | dotnet/compiler/ROADMAP.txt:

[23:33] <dalek> 6model: [dotnet] Remove indirect method calls from ROADMAP (diakopter++).

[23:33] <dalek> 6model: review: https://github.com/jnthn/6model/commit/805378f724c4b9451fdb89a5cd8851d91c8c2f3c

[23:33] <sorear> jnthn: ping

[23:33] <jnthn> sorear: pong

[23:33] <sorear> jnthn: how would you like near-instant reporting against all branches in 6model?

[23:33] <jnthn> sorear: I don't find it excessively tardy at the moment. ;-)

[23:34] *** ilogger2 joined
[23:34] *** ChanServ sets mode: +v ilogger2

[23:37] <tadzik> oh, pls is evolving

[23:44] <lue> LTM is NYI, correct?

[23:44] <dalek> 6model: a8aa9f7 | jonathan++ | dotnet/ (2 files):

[23:44] <dalek> 6model: [dotnet] A little tweak to diakopter++'s patch for indirect method calls to avoid needing the operator in RakudoObject (I think we may need that some day, but will need it to do a coercion rather than just an unbox, and need it for .Net language interop).

[23:44] <dalek> 6model: review: https://github.com/jnthn/6model/commit/a8aa9f7b19225d399df333c8bcecad895071b5fe

[23:44] <dalek> 6model: 2c99e45 | jonathan++ | dotnet/runtime/Runtime/Ops/Comparison.cs:

[23:44] <dalek> 6model: [odd] More git oddness - line ending issue?

[23:44] <dalek> 6model: review: https://github.com/jnthn/6model/commit/2c99e45b603d35de276ad4fb05edac6b68933681

[23:44] <dalek> 6model: 805378f | jonathan++ | dotnet/compiler/ROADMAP.txt:

[23:44] <dalek> 6model: [dotnet] Remove indirect method calls from ROADMAP (diakopter++).

[23:44] <dalek> 6model: review: https://github.com/jnthn/6model/commit/805378f724c4b9451fdb89a5cd8851d91c8c2f3c

[23:44] <jnthn> sorear: Done \o/

[23:44] <diakopter> heh

[23:44] <jnthn> sorear: Remove from dalek-conf.json if needed - is it needed for me?

[23:45] *** ilogger2 joined
[23:45] *** ChanServ sets mode: +v ilogger2

[23:45] <jnthn> I just use command line one

[23:45] <diakopter> in cygwin?

[23:45] <jnthn> Not had the issue in any other repos.

[23:45] <jnthn> No

[23:45] <tadzik> TimToady: about this risottocode, pick(:replace) did turn to .roll, didn't it?

[23:45] <sorear> jnthn: If you're migrating an existing project it's needed

[23:45] <jnthn> Just plain old Win32 msys bulid, used from Windows command line.

[23:45] <jnthn> sorear: OK

[23:45] <jnthn> sorear: Removing my entry 

[23:45] <sorear> jnthn: the poller and the post-receive script are independant; if both of them are tracking a repo, then commits will be double-reported

[23:46] <sorear> I should make that clearer

[23:46] *** whiteknight joined
[23:46] * tadzik fixes

[23:47] <TimToady> tadzik: yes, but we really want normal pick without replacement semantics here anyway, despite the problem description's seeming bias toward roll semantics

[23:48] <dalek> mu: bf9469c | jonathan++ | misc/dalek-conf.json:

[23:48] <dalek> mu: [dalek-conf] Remove 6model; reported by push notifs now.

[23:48] <dalek> mu: review: https://github.com/perl6/mu/commit/bf9469c544495ce6351d41f4bdb86cfe9f33485b

[23:49] <tadzik> TimToady: yeah, I noticed second solution using pick

[23:49] <dalek> mu: 4ac82c5 | sorear++ | misc/dalek-push.txt:

[23:49] <dalek> mu: [misc] Clarify requirements for step 7 a bit

[23:49] <dalek> mu: review: https://github.com/perl6/mu/commit/4ac82c51349f2d5e8f91810a09fb9edfd87eb5cd

[23:49] *** toebu_ joined
[23:54] *** flatwhatson joined
[23:54] <TimToady> arguably, roll will be more efficient, but could (in theory) produce only a single point, albeit with probability (1/404) ** 100, which is pretty darn unlikely

[23:54] * justatheory produces a couple of points

[23:54] <TimToady> looks like about 18 points to me

[23:54] <TimToady> vertically, anyway

[23:57] <masak> mindos1: welcome! hope you'll feel right at home here on #perl6.

[23:59] <mindos1> :)

[23:59] <masak> mindos1: wondering where to start? pick a random feature in the synopses, and try it out on the channel. something will happen.

[23:59] <masak> example: let's try out multi subs.

[23:59] <masak> rakudo: sub foo(Int $x) { say "Int" }; sub foo(Str $x) { say "Str" }; foo(42)

[23:59] <diakopter> multi subs with explicit return types

[23:59] <p6eval> rakudo c548b8: OUTPUT«===SORRY!===␤Can not re-declare sub &foo without declaring it multi at line 22, near "; foo(42)"␤»

[23:59] <masak> rakudo: multi sub foo(Int $x) { say "Int" }; multi sub foo(Str $x) { say "Str" }; foo(42); foo("OH HAI")

[23:59] <p6eval> rakudo c548b8: OUTPUT«Int␤Str␤»

[23:59] <masak> \o/

[23:59] <TimToady> hugme: hug masak

[23:59] * hugme hugs masak and blushes

[23:59] * masak hugs hugme and blushes

