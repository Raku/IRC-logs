[00:00] <lue> frettled: good night

[00:00] <TimToady> \o

[00:00] * ruoso calms TimToady by remembering him Math::Symbols wouldn't be in the core

[00:00] *** yinyin joined
[00:00] <TimToady> Yes, well, horror flicks are optional too...

[00:01] *** clintongormley left
[00:01] <TimToady> but I'll still have to look at all the trailers...

[00:02] <TimToady> "This trailer approved for all audiences between the age of 11 and 14."

[00:02] *** wknight8111 left
[00:03] *** [particle] joined
[00:03] <diakopter> hundred.

[00:04] <TimToady> I guess that leaves out Columbus...

[00:04] <TimToady> oh wait, he *was* the horror show back then...

[00:04] <lue> This movie is rated WTHC, for it's utter boringness (must be a documentary or movie involving Rubies)

[00:09] <ruoso> std: multi prefix:<∑>(*@items) { [+] @items }; say ∑ 1..10

[00:09] <p6eval> std 30324: OUTPUT«ok 00:02 112m␤»

[00:09] <ruoso> rakudo: multi prefix:<∑>(*@items) { [+] @items }; say ∑ 1..10 # lucky guess

[00:09] <p6eval> rakudo c41cf3: OUTPUT«12345678910␤»

[00:10] <ruoso> not quite as expected... but it didn't die

[00:10] <ruoso> rakudo: multi prefix:<∑>(*@items) { [+] @items }; say ∑1..10 # maybe rakudo doesn't like the space

[00:10] <p6eval> rakudo c41cf3: OUTPUT«12345678910␤»

[00:10] <ruoso> nah... 

[00:11] <TimToady> looks like a precedence issue

[00:11] <ruoso> rakudo: multi prefix:<∑>(*@items) { [+] @items }; say ∑(1..10)

[00:11] <p6eval> rakudo c41cf3: OUTPUT«55␤»

[00:11] <ruoso> ahá!

[00:15] *** Guest83313 joined
[00:16] <lue> I've been considering a class-based method of handling numbers (arranged like a dependency tree). It would probably exist only as a module, but still...

[00:17] <ruoso> lue, nope... you don't want to think it class-based

[00:17] <ruoso> because that's not how math works

[00:17] <ruoso> you need to think in subtypes

[00:18] *** Logo left
[00:18] <ruoso> applying roles is a saner way

[00:19] <TimToady> maybe instead of Top and Bottom the type theorists should have grabbed the Truth and Beauty that were abandoned by the physicists...

[00:21] * TimToady imagines the billboards: Come learn type theory, where everything is true, and nothing is beautiful!

[00:21] <lue> ruoso: I mean in terms of types. i.e. My Int 3, My Complex 2+5i, etc. However you're supposed to implement types. :) [check the backlogs; it's described in more detail there]

[00:22] <lue> menowthinks I don't want to know about type theory.

[00:22] * TimToady apologizes for having his brane in sideways today.

[00:22] <sorear> <3 type theory

[00:22] <sorear> however it has no place in perl6

[00:23] * justatheory loves to type "theory:"

[00:23] <justatheory> s/://

[00:23] <ruoso> TimToady, oh... so is it a good day for you to understand me ;) since I'm the one usually thiking sideways

[00:23] <TimToady> I rather suspect we're out of phase

[00:23] <ruoso> heheh

[00:24] <ruoso> good exit

[00:24] <sorear> We're trying to design a worthy successor to Perl here.

[00:24] <sorear> not Haskell With Sigils

[00:25] <lue> .oO(sought Haskell Sith Sigils)

[00:25] <TimToady> someday I might retire to a monadic lifestyle...

[00:25] * ruoso usually thinks Perl 6 as very innovative in terms of its type theory

[00:26] <ruoso> it's not even written down yet ;)

[00:26] <TimToady> its innovation is in not forcing it down the user's throat.  :)

[00:26] <ruoso> we need someone to do research on Perl 6 typesystem and maybe sometime we find out what it is ;)

[00:26] * ruoso not really in a productive da

[00:26] <ruoso> *dau

[00:26] <ruoso> *day

[00:27] <TimToady> I think we're in phase on that one

[00:28] <TimToady> in my case, I blame the backlog

[00:28] <TimToady> or maybe the Temporal Lobe epilepsy... :)

[00:29] <lue> Oh yeah, for clarity, I need to insert something into the backlog for yesterday. Be right back... 

[00:29] <lue> .oO(I'm back.)

[00:29] <TimToady> wait, why is there frost all over my DeLorean?

[00:30] *** xuser left
[00:30] <lue> Because it hasn't been used in a while (my ship is the TARDIS, thank you very much)

[00:30] * lue wanted to fly to Britain yesterday just to watch the new Doctor Who

[00:31] <lue> They have to admit, they couldn't design the DeLorean without it knowing it'd be used in a sci-fi movie...

[00:33] <TimToady> well, but they've known that since some time in the 1800s

[00:35] <lue> .oO(if the speed of light lets you go forward in time faster 1sec:1sec, then logically speed of dark lets you go back in time faster that 1sec:1sec)

[00:35] <TimToady> "for one so forward, you're far too backward"

[00:36] <TimToady> from TROTGTSOTC

[00:36] <lue> chrot-git-sot-k?

[00:38] <TimToady> my goodness, google *doesn't know* about TROTGTSOTC!

[00:39] * ruoso feels a bit less idiot ;)

[00:39] <TimToady> http://en.wikipedia.org/wiki/The_Roar_of_the_Greasepaint_%E2%80%93_The_Smell_of_the_Crowd

[00:40] <lue> The Right of The Great Tim "So Overwhelmed" Toady Command?

[00:41] <colomon> Funny, vaguely familiar with the phrase, but very startled to learn it's a Leslie Bricusse musical.

[00:43] <colomon> and ditto for "Stop the World, I Want to Get Off".

[00:43] <TimToady> I am actually in the small minority of people who have actually helped perform that musical...

[00:43] <TimToady> (was just in the orchestra)

[00:43] <colomon> I was just pondering asking if anyone ever produced it anymore....  ;)

[00:44] <lue> Take all the people that have helped with a musical, and it's still a minority ( in relation to the whole planet :) )

[00:44] <TimToady> I saw a production of it in LA about 15 years ago at, I think, CSUN

[00:44] <colomon> Wait a minute (surfing wikipedia) Bricusse did a version of Cyrano with Frank Wildhorn?  How did I miss that?

[00:45] *** como joined
[00:45] *** TiMBuS left
[00:47] <TimToady> obviously, you missed it by a nose

[00:49] <diakopter> flare your nostrils next time

[00:50] <lue> [this is a placeholder to indicate a joke was meant to be here. Unfortunately, attempt to retrieve the joke returned HTTP 501]

[00:50] <lue> [laugh here]

[00:56] <colomon> Correct non-nose-wit answer appears to be that it has only been produced in Japan so far.  :\

[00:57] <lue> Japan++

[00:57] <lue> buubot: karma Japan

[00:57] <buubot> lue: Japan has karma of 3     

[00:57] <lue> :O

[01:00] <lue> rakudo: say (* - 1) ~~ *

[01:00] <p6eval> rakudo 3b1d34: OUTPUT«1␤»

[01:01] <TimToady> * is very accepting

[01:02] <TimToady> in fact, it's the very picture of a brane that has fallen out and landed on the concrete

[01:02] <lue> rakudo: my $fakereal = (-Inf..Inf); say ($fakereal - 1 ~~ fakereal)

[01:02] <p6eval> rakudo 3b1d34:  ( no output )

[01:03] <lue> rakudo: my $fakereal = (-Inf..Inf); say ($fakereal »-» 1 ~~ fakereal) # I can has hyper?

[01:03] <colomon> nope

[01:03] <p6eval> rakudo 3b1d34:  ( no output )

[01:06] <TimToady> rakudo: my %h = a => '42'; given %h { when :(Int :$a) { say "lol int" }when :(Str :$a) { say "lol string" } }

[01:06] <p6eval> rakudo 3b1d34: OUTPUT«lol string␤»

[01:07] <TimToady> std: my %h = a => '42'; given %h { when :(Int :$a) { say "lol int" }when :(Str :$a) { say "lol string" } }

[01:07] <p6eval> std 30324: OUTPUT«===SORRY!===␤Strange text after block (missing comma, semicolon, comment marker?) at /tmp/rvy2a97g3U line 1:␤------> n %h { when :(Int :$a) { say "lol int" }⏏when :(Str :$a) { say "lol string" } }␤    expecting horizontal whitespace␤FAILED

[01:07] <p6eval> ..00:01…

[01:07] <lue> that's not good :/

[01:08] <lue> .oO(STD is not prone to error. It must be rakudo who's wrong)

[01:14] <lue> rakudo: my $ℝ = 3; say "$ℝ is a real number!"

[01:14] <p6eval> rakudo 3b1d34: OUTPUT«3 is a real number!␤»

[01:14] <pugssvn> r30325 | colomon++ | [t/spec] Add tests for <=> on Reals. 

[01:16] <lue> \o/

[01:24] <pugssvn> r30326 | colomon++ | [t/spec] Add tests for < on Reals. 

[01:32] *** ewilhelm left
[01:34] *** ewilhelm joined
[01:37] *** como left
[01:43] <lue> afk

[01:44] *** molaf joined
[01:51] *** molaf_ joined
[01:54] *** synth left
[01:54] *** molaf left
[01:56] *** Psyche^ joined
[01:59] *** Patterner left
[01:59] *** Psyche^ is now known as Patterner

[02:00] *** ash_ joined
[02:04] *** colomon_ joined
[02:06] *** colomon left
[02:06] *** colomon_ is now known as colomon

[02:07] *** agentzh joined
[02:09] *** ewilhelm left
[02:10] *** ewilhelm joined
[02:14] *** molaf joined
[02:16] *** molaf_ left
[02:19] *** ash_ left
[02:20] <pugssvn> r30327 | colomon++ | [t/spec] Tests for prefix:<-> and infix:<-> on Real. 

[02:23] *** snarkyboojum left
[02:24] *** ash_ joined
[02:25] *** colomon left
[02:33] *** molaf left
[02:42] *** snarkyboojum joined
[02:45] *** takadonet left
[02:49] *** ewilhelm left
[02:50] *** ewilhelm joined
[02:52] *** petdance joined
[02:56] * araujo got qt4 compiled in 1 hour 20 minutes in his new machine

[02:56] <araujo> let's see how goes compiling rakudo 

[02:56] <araujo> :P

[02:58] *** justatheory left
[02:59] *** justatheory joined
[03:01] *** meppl left
[03:04] *** ewilhelm left
[03:04] *** Sarten-X joined
[03:17] *** cdarroch left
[03:43] *** ash_ left
[03:44] *** miyagawa joined
[03:48] *** snarkyboojum_ joined
[03:50] *** snarkyboojum left
[03:54] *** snarkyboojum_ left
[03:57] *** colomon joined
[03:58] <lue> phenny: tell masak it seems like I got into some *cough* trouble changing Temporal.pod on the mailing list. According to perlcabal.org it's unchanged, but in my svn it's still my version. Help appreciated :)

[03:58] <phenny> lue: I'll pass that on when masak is around.

[04:01] <diakopter> lue: I didn't see a reply on the mailing list

[04:02] *** colomon left
[04:02] *** snarkyboojum joined
[04:02] <lue> Could've been sent to just me. Apparently everyone else who worked on S32::Temporal is supposed to have known more about Date/Time than most software engineers ever will :/

[04:03] <diakopter> I don't know how you could conclude that

[04:03] <diakopter> I mean, I haven't seen a reply from you to the question on the list

[04:04] <lue> The guy who sent it to me said that (must've gleamed my email from the pod)

[04:04] *** s1n joined
[04:04] <diakopter> said what

[04:04] <lue> (and I didn't reply, because I didn't download the old message)

[04:04] <lue> (just a second; retrieving)

[04:05] <diakopter> I've read the original email

[04:05] <diakopter> to the list

[04:05] <diakopter> I'm saying, I haven't seen a reply from you to the list

[04:05] <diakopter> replying to the email in which you are asked questions

[04:05] *** colomon joined
[04:06] <diakopter> ok, by "that" you meant your previous msg here?

[04:06] <diakopter> "Apparently everyone else who worked on S32::Temporal is supposed to have known more about Date/Time than most software engineers ever will

[04:06] <diakopter> "

[04:06] <lue> yes. It was sent to me apart from the mailing list.

[04:06] <lue> "I am writing off-line as it is possible you are unaware of the ramifications of your actions. The changes you made to the spec were copied to the perl6-language list. The changes will not be easily received by the recipients of the list, who may also choose to write to you directly."

[04:06] <diakopter> you're saying that the guy who emailed the list said "Apparently everyone else who worked on S32::Temporal is supposed to have known more about Date/Time than most software engineers ever will"

[04:07] <lue> It's one Richard Hainsworth.

[04:07] <diakopter> ok, so he's trying to give you advice and do you a favor

[04:08] <diakopter> by informing you that your changes might get replies, but that you won't receive them in case you aren't subscribed to the mailing list, but that you might get messages from folks directly also

[04:08] <lue> I know, I'm not hating him or anything, just noting to masak that this happened, and wondering what is going on with S32::Temporal (website is the "old" version, my local copy is my version)

[04:08] <diakopter> probably it failed to parse as pod

[04:09] <lue> I am signed up to the mailing-list, but it was after I commited S32::Temporal. I had no way of knowing.

[04:09] <diakopter> by the update script that updates those synopses as html

[04:09] <lue> I thank him for his advice. I don't hate him :)

[04:09] *** colomon left
[04:10] <lue> .oO(I suppose then it's good there was a parsefail (if there was one; I could "compile" it correctly), considering it's going to change again)

[04:10] <diakopter> I'm just surmising that

[04:10] <diakopter> perhaps the update script failed another way or is disabled

[04:11] <diakopter> http://perlcabal.org/svn/pugs/revision/?rev=30293

[04:12] <lue> The one thing I didn't like was his assumption that software engineers wouldn't know anything about date/time: "You will also discover that they probably know more about dates and times than most software engineers ever will."

[04:12] <lue> (good thing I'm not a software engineer :P)

[04:12] <diakopter> heh

[04:12] <diakopter> what are you?

[04:13] <lue> a very clever person.

[04:13] <diakopter> so by process of elimination, you're "not a software engineer"

[04:13] <diakopter> that's kindof meaningless

[04:13] <lue> I am, but it's not a job yet, only a hobby :)

[04:14] <lue> Actually, I'm not *most* software engineers :)

[04:15] <lue> .oO(Ah well. Point is, I appreciate his advice. I don't hate him.)

[04:15] *** Guest83313 is now known as Trashlord

[04:15] *** Trashlord left
[04:15] *** Trashlord joined
[04:16] <diakopter> I'm certain Hainsworth didn't expect his email to be discussed on the public record, but I'll do it anyway: from the tone & content of your commit to Temporal.pod, he surmised that you weren't aware of the individual & collective expertise of the folks on p6l (since you didn't consult them first before committing) :)

[04:17] <diakopter> and yes, he was implying that collectively and perhaps individually the mailing list probably knows more about dates and times than you

[04:17] <diakopter> but I don't think he meant it in a mean spirit

[04:17] <diakopter> I dunno

[04:18] <diakopter> maybe he _was_ offended by not being consulted prior to the commit; who knows :)

[04:18] <diakopter> so, I don't know.

[04:20] <lue> I never saw a reason to sign up to p6l; therefore, I could not know pugs commits would show up. And, to top it off, everyone on IRC was OK with it :)

[04:20] * diakopter goes to look at the backlog

[04:20] <lue> btw, according to the US gov't, the second you send an email, you give up your right to be protected from search & seizure.

[04:21] <snarkyboojum> definitely worth subscribing to the perl6 mailing lists :)

[04:21] <snarkyboojum> perl6-all will do :)

[04:22] <lue> I am now :)

[04:22] <lue> (only to p6l though)

[04:22] <snarkyboojum> lue: it's good bedtime reading anyway :)

[04:24] <diakopter> lue: where's the consensus about http://irclog.perlgeek.de/perl6/2010-04-03#i_2189283

[04:25] <snarkyboojum> lue; you want to see all masak++ (bot)'s emails too, surely ;) on perl6-compiler

[04:25] <diakopter> I mean, is it in the irclog?

[04:27] <lue> yes, but the OK was given (relatively) yesterday, and then I posted (relatively) today.

[04:28] <diakopter> the commit was more than 48 hours ago?

[04:28] <lue> (OK, wow; I could swear there was something, looking at IRClog)

[04:30] <snarkyboojum> so which Temporal spec does this commit map to? http://github.com/rakudo/rakudo/commit/3611f1baeaafd8c27d1d282e6c1435176792d3c5

[04:32] <lue> The one not-yet-published :)

[04:32] *** miyagawa left
[04:32] <lue> certainly not my version :D

[04:32] <snarkyboojum> implementation followed by spec :)

[04:33] <lue> diakopter: I could swear I got a clear OK. However, on the last Hitchhiker's Holy Day (UTC), I was discussing my changes, and never got a "STOP! STOP STOP STOP STOP STOP! Don't DO THAT!!"

[04:33] <lue> http://irclog.perlgeek.de/out.pl?channel=perl6;date=2010-04-02

[04:34] <snarkyboojum> http://www.tondering.dk/claus/cal/calendar29.txt looks very juicy :)

[04:36] <lue> .oO(Can't wait for the next Holy Day -- Towel Day!)

[04:37] <lue> Anyone happen to know what the spec is licensed under?

[04:37] <diakopter> lue: I skimmed that entire day's log.  I saw absolutely no discussion/mention of your Temporal ideas

[04:38] <diakopter> so, there was absolutely no occasion for anyone to respond

[04:39] <diakopter> the only mention is "is quietly rewriting all of Temporal to his own design, toning it down so you have a chance of implementing it :)"

[04:39] <lue> Oh well. My memory must be off; I did at least ask questions relating to the "old" spec, and somehow, in my mind, that implies I discussed my changing of Temporal.

[04:39] <lue> I screwed up :)

[04:39] <diakopter> ah, oh

[04:42] <snarkyboojum> in other news, the status graph is showing some nice jumps recently http://www.mutteringmadman.com/perl6/status.png

[04:42] <snarkyboojum> :

[04:42] <snarkyboojum> :)

[04:43] <lue> chesire smiley!

[04:47] * diakopter just lost 1 hour to a VS2010RC bug

[04:48] * snarkyboojum just lost 1 hours to daylight saving :|

[04:48] <snarkyboojum> 1 hour even

[04:48] <lue> I *HATE* Daylight Savings :(

[04:49] *** mantovani joined
[04:49] *** ShaneC left
[04:54] <lue> rakudo: macro doit ($word) {return quasi <say <<<$word>>>,<<<$word>>>;>}; doit('one');

[04:54] <p6eval> rakudo 3b1d34: OUTPUT«Confused at line 11, near "macro doit"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[04:54] <lue> std: macro doit ($word) {return quasi <say <<<$word>>>,<<<$word>>>;>}; doit('one');

[04:54] <p6eval> std 30327: OUTPUT«===SORRY!===␤Bogus statement at /tmp/vDBi9SENHM line 1:␤------> turn quasi <say <<<$word>>>,<<<$word>>>;⏏>}; doit('one');␤FAILED 00:03 116m␤»

[04:54] <lue> std: macro doit ($word) {say "$word $word";}; doit('one');

[04:54] <p6eval> std 30327: OUTPUT«ok 00:01 108m␤»

[04:54] <lue> rakudo: macro doit ($word) {say "$word $word";}; doit('one');

[04:55] <p6eval> rakudo 3b1d34: OUTPUT«Confused at line 11, near "macro doit"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[04:55] <lue> .oO(darn)

[04:56] <lue> rakudo: say [X] [<a b c>] xx 3

[04:56] <p6eval> rakudo 3b1d34:  ( no output )

[04:56] <lue> rakudo: say [X] [<a b c>] xx 2

[04:56] <p6eval> rakudo 3b1d34: OUTPUT«a a a b a c b a b b b c c a c b c c␤»

[04:56] <lue> why does xx 3 provide no output?

[04:57] *** mberends left
[04:58] <lue> rakudo: say [X] [<a b c d>] xx 3

[04:59] <p6eval> rakudo 3b1d34:  ( no output )

[04:59] *** snarkyboojum left
[05:03] <lue> ah well. In every case, good night.

[05:06] *** snarkyboojum joined
[05:23] *** M_o_C joined
[05:25] *** kfo_ joined
[05:25] *** justatheory left
[05:26] *** gfx joined
[05:26] *** justatheory joined
[05:27] *** hercynium left
[05:28] *** kfo left
[05:28] *** kfo_ is now known as kfo

[05:31] *** am0c joined
[05:42] *** bkeeler sets mode: +o bkeeler_

[05:42] *** bkeeler_ is now known as bkeeler

[05:53] *** M_o_C left
[05:56] *** kaare joined
[05:56] *** kaare is now known as Guest36443

[06:08] *** uniejo joined
[06:09] *** petdance left
[06:28] *** justatheory left
[06:30] *** agentzh left
[06:30] *** Patterner left
[06:32] *** Su-Shee joined
[06:32] <Su-Shee> good morning

[06:32] <diakopter> hi

[06:35] <moritz_> good morning

[06:47] *** agentzh joined
[06:56] *** Lorn left
[06:56] *** mantovani left
[07:06] *** Psyche^ joined
[07:06] *** Psyche^ is now known as Patterner

[07:07] <sorear> hmm, looks like Parrot has no concept of metaclass compatibility

[07:11] *** mantovani joined
[07:11] *** Lorn joined
[07:12] *** Trashlord left
[07:13] *** Trashlord joined
[07:16] *** riffraff joined
[07:24] *** Trashlord left
[07:25] *** hanekomu joined
[07:26] *** Trashlord joined
[07:31] *** Trashlord left
[07:32] *** rgrau joined
[07:32] <mathw> Morning

[07:34] *** prism joined
[07:37] *** daemon left
[07:37] *** prism is now known as daemon

[07:45] <sorear> How does metaclass compatibility work in Perl 6?

[07:51] *** prism joined
[07:51] *** Woodi left
[07:53] *** daemon left
[07:59] <moritz_> what do you mean by "metaclass compatibility"?

[07:59] <moritz_> most things just desugar to method calls on the meta class

[07:59] *** masak joined
[08:00] <masak> morning, #perl6.

[08:00] <phenny> masak: 03:58Z <lue> tell masak it seems like I got into some *cough* trouble changing Temporal.pod on the mailing list. According to perlcabal.org it's unchanged, but in my svn it's still my version. Help appreciated :)

[08:01] <moritz_> hm, maybe the HTML versions are not regenerated

[08:01] <masak> could be.

[08:01] *** gfx left
[08:02] <masak> lue: don't worry about the version in the SVN repo. it'd be beneficial if you did reply to Mark J. Reed's email, though.

[08:10] *** JimmyZ joined
[08:10] <JimmyZ> Good morning, Mai Gao

[08:11] <masak> JimmyZ: \o

[08:11] <masak> rakudo: multi prefix:<∑>(*@items) { [+] @items }; say ∑ 1..10

[08:11] <p6eval> rakudo 3b1d34: OUTPUT«12345678910␤»

[08:12] <masak> how would I make this prefix op looser than infix:<..> ?

[08:12] <moritz_> in rakudo, or in Perl 6?

[08:13] <sorear> moritz_: metaclass compatibility is the property that A.isa(B) implies A.HOW.isa(B.HOW)

[08:13] <masak> moritz_: in Perl 6.

[08:13] <moritz_> sorear: no idea then

[08:13] <masak> sorear: why would one want that?

[08:14] <moritz_> masak: is looser(&infix:<,>)

[08:14] <masak> sorear: sounds like 'covariance under the metaclass transformation' :P

[08:14] <masak> moritz_: ah, nice.

[08:14] <moritz_> or at whatever level you want to have it

[08:16] <sorear> masak: it's necessary in a lot of cases involving traits... ask #moose-dev for the details

[08:16] <masak> sorear: I'll take your word for it for now.

[08:16] <sorear> today I'm trying to design the ability for P6 classes to extend P5 bases

[08:19] <moritz_> sorear: is it worth to add blizkost back to rakudo on the evalbot?

[08:19] <sorear> moritz_: attempting to load additional languages into rakudo-ng causes a crash

[08:20] <JimmyZ> rakudo: ( 1, (2+2).say, 3, 4, 5).pick(1).say

[08:20] <p6eval> rakudo 3b1d34: OUTPUT«4␤3␤»

[08:20] <JimmyZ> rakudo: ( 1, {(2+2).say}, 3, 4, 5).pick(1).say

[08:20] <p6eval> rakudo 3b1d34: OUTPUT«4␤»

[08:20] <sorear> I submitted a parrotbug but nobody's looked into it yet

[08:20] <sorear> #1542

[08:21] <masak> JimmyZ: parens not necessary around the (2+2).say

[08:21] <masak> JimmyZ: that expression will give you 1, most often.

[08:21] <JimmyZ> masak: I am making it 'lazy'

[08:22] * masak does not understand how that's 'lazy'

[08:23] <JimmyZ> don't eval 2+2 until I pick it.

[08:24] <masak> ah.

[08:24] <masak> well, if you put it in a list like that, you still have to .() it manually.

[08:24] <moritz_> JimmyZ: that would be done by lazy { (2+2).say } if it were implemented

[08:24] <masak> rakudo: my %h = a => '42'; given %h { when :(Int :$a) { say "lol int" }when :(Str :$a) { say "lol string" } }

[08:24] <p6eval> rakudo 3b1d34: OUTPUT«lol string␤»

[08:24] <masak> std: my %h = a => '42'; given %h { when :(Int :$a) { say "lol int" }when :(Str :$a) { say "lol string" } }

[08:24] <p6eval> std 30327: OUTPUT«===SORRY!===␤Strange text after block (missing comma, semicolon, comment marker?) at /tmp/rFyy8Ug5Hg line 1:␤------> n %h { when :(Int :$a) { say "lol int" }⏏when :(Str :$a) { say "lol string" } }␤    expecting horizontal whitespace␤FAILED

[08:24] <p6eval> ..00:01…

[08:24] * masak submits rakudobug

[08:25] <masak> rakudo: $_=2;when 1{}when 2{say"oh noes"}

[08:25] <p6eval> rakudo 3b1d34: OUTPUT«Unable to parse postcircumfix:sym<{ }>, couldn't find final '}' at line 11␤current instr.: 'perl6;Regex;Cursor;FAILGOAL' pc 1664 (ext/nqp-rx/src/stage0/Regex-s0.pir:907)␤»

[08:25] <masak> rakudo: $_=2;when 1 {}when 2 {say"oh noes"}

[08:25] <p6eval> rakudo 3b1d34: OUTPUT«Unable to parse blockoid, couldn't find final '}' at line 11␤current instr.: 'perl6;Regex;Cursor;FAILGOAL' pc 1664 (ext/nqp-rx/src/stage0/Regex-s0.pir:907)␤»

[08:26] <JimmyZ> rakudo: rakudo: ( { say 'run 1';  2 ** 100 }, { say 'run 2'; 2 ** 1000 } ).pick(1)().say

[08:26] * masak .oO( when does it work, and when doesn't it? )

[08:26] <p6eval> rakudo 3b1d34: OUTPUT«Confused at line 11, near "rakudo: ( "␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[08:27] *** prism left
[08:27] *** rbaumer left
[08:27] <JimmyZ> rakudo: ( { say 'run 1'; 2 **  100; }, { say 'run 2'; 2 ** 1000; } ).pick(1)().say

[08:27] <p6eval> rakudo 3b1d34: OUTPUT«run 1␤1.26765060022823e+30␤»

[08:29] *** agentzh left
[08:30] *** agentzh joined
[08:30] *** agentzh left
[08:30] <JimmyZ> rakudo: ( ( say 'run 1'; 2 ** 100; ), (say 'run 2'; 2 ** 1000;)).pick(1).say

[08:30] <p6eval> rakudo 3b1d34: OUTPUT«run 1␤run 2␤1.07150860718627e+301␤»

[08:31] *** agentzh joined
[08:31] *** agentzh left
[08:31] *** agentzh joined
[08:31] * JimmyZ couldn't follow moritz_ :(

[08:36] <moritz_> JimmyZ: where did you want to follow me?

[08:37] * JimmyZ couldn't understant 'that would be done by lazy { (2+2).say } if it were implemented'

[08:37] <JimmyZ> understand

[08:37] *** agentzh left
[08:38] *** agentzh joined
[08:39] <moritz_> lazy { code } returns a value that's lazily evaluated

[08:39] <moritz_> so the code only runs when the value is actually used

[08:39] <moritz_> but it's not yet implemented in rakudo

[08:39] <JimmyZ> Yeah.

[08:40] <moritz_> and from looking at your example, I thought that was what you were looking for

[08:40] <JimmyZ> Yeah.

[08:40] *** agentzh left
[08:40] *** hanekomu left
[08:40] <JimmyZ> rakudo: ( { say 'run 1'; 2 ** 100; }, { say 'run 2'; 2 ** 1000; } ).pick(1)().say # Isn't this one?

[08:41] <p6eval> rakudo 3b1d34: OUTPUT«run 2␤1.07150860718627e+301␤»

[08:41] *** agentzh joined
[08:42] <masak> would be nice (and probably not too hard) to make this work under the new DateTime class in Perl 6: http://use.perl.org/~snarkyboojum/journal/40297

[08:42] *** agentzh left
[08:43] <mathw> o/ masak

[08:43] <masak> (well, we'd need to port DateTime::Format::Strptime)

[08:43] <masak> mathw: \o

[08:43] *** agentzh joined
[08:43] <snarkyboojum> masak: oh hi there - yeah, that'd be worthwhile I think

[08:44] <masak> snarkyboojum: \o

[08:44] <snarkyboojum> masak: o/ :)

[08:45] <moritz_> .oO( snarkyboojum uses indirect object notation in Perl 5 )

[08:45] <snarkyboojum> moritz_: whoopsy ;)

[08:45] <snarkyboojum> moritz_: I probably copied that out of the perldoc :O (no excuse I know)

[08:45] *** agentzh left
[08:46] <moritz_> I mean there's nothing wrong with that, except that I don't grok the rules how it is parsed :-)

[08:46] *** agentzh joined
[08:47] *** agentzh left
[08:48] *** agentzh joined
[08:48] *** agentzh left
[08:49] *** agentzh joined
[08:49] *** agentzh left
[08:50] <snarkyboojum> moritz_: I updated it anyway :)

[08:51] <snarkyboojum> afk&

[08:58] *** agentzh joined
[09:02] <masak> phenny: tell lue, "Some of the hardest work [in lnaguage design] isn't making the changes, it's getting them past the maintainers or an ensuing bikeshedding discussion that goes nowhere."

[09:02] <phenny> masak: I'll pass that on when lue is around.

[09:04] <jnthn> o/

[09:05] <jnthn> masak: I made it back home! \o/

[09:05] <masak> jnthn: glad to hear it :)

[09:08] <moritz_> lue: http://irclog.perlgeek.de/perl6/2010-04-06#i_2199834 there's still this thing called "courtesy" - even if you have the right to publish something, it might not be friendly towards the sender

[09:10] *** agentzh left
[09:10] *** agentzh joined
[09:11] *** clintongormley joined
[09:13] *** JimmyZ left
[09:21] *** colomon joined
[09:24] *** agentzh left
[09:27] *** agentzh joined
[09:28] *** agentzh left
[09:29] <pugssvn> r30328 | colomon++ | [t/spec] Couple more infix:<-> on Real tests. 

[09:39] *** yinyin left
[09:43] *** xabbu42 joined
[09:44] *** agentzh joined
[09:52] *** Uazz_Z joined
[09:56] *** pmurias joined
[09:57] *** mberends joined
[09:58] * mberends whispers masak: ping from the classroom ;)

[09:58] <masak> mberends: pong from the office :)

[09:59] <mberends> shh!

[10:00] <mberends> ( before enabling the DateTime in Makefile.in and spectest.data, I wonder whether the whole Temporal naming should be changed to DateTime. )

[10:02] *** rbaumer joined
[10:02] <masak> mberends: aye, that's probably a good idea for two reasons.

[10:02] <masak> (1) less pompous

[10:02] *** proller left
[10:03] <masak> (2) indicates a clean break from previous stuff

[10:03] * mberends likes *both* reasons

[10:03] <moritz_> I'm mostly out of touch with Temporal/DateTime... 

[10:03] <mberends> (3) frees up Temporal for some really fantastic modules

[10:03] <masak> :)

[10:04] <masak> (4) consistency with the class name and namespace

[10:04] <moritz_> I just hope that time() is supposed to return an Instant (or whatever it's called these days)

[10:04] <masak> moritz_: yes, I think it will eventually.

[10:04] <moritz_> and not an epoch or so

[10:04] <moritz_> and that the object stringifies sensibly

[10:04] <masak> moritz_: right now I have it spec'd as in Perl 5, but I think Instant is wiser.

[10:04] *** proller joined
[10:05] <moritz_> I haven't heard a good reason to return a number

[10:05] <mberends> also, let's keep the DateTime out of Makefile.in until it is more rounded out and in sync with S32

[10:06] <masak> agreed.

[10:06] <moritz_> -1 # I want to experiment with it on p6eval :-)

[10:06] <mberends> boo hoo!

[10:07] <masak> moritz_ has a point.

[10:07] <masak> it's kinda fun to play around with :)

[10:07] <jnthn> +1 to that

[10:07] <mberends> 2 days should be enough to anneal it for online testing

[10:07] <masak> moritz_: I'd like DateTime.now to create an object representing the current date and time. it has to do this from information returned by time() or equiv.

[10:08] <masak> moritz_: whether time() then returns a number or an instant is not too important to me.

[10:08] <masak> aye. give us two days.

[10:08] * moritz_ offers 5 hours :-))

[10:08] * jnthn offers another 43

[10:08] <jnthn> ;-)

[10:08] <masak> phew :)

[10:08] * mberends feels prodded

[10:09] <moritz_> masak: I tink there can be a more low level funtion with a longer name

[10:09] <masak> moritz_: I'll do it in five hours, but I'd have to bill you :)

[10:09] <jnthn> epoch() :-)

[10:09] <moritz_> I just want to cater to user expectations

[10:09] <mberends> there are from_epoch() and to_epoch() already

[10:09] <masak> I'm not too happy about calling 'the number of seconds since the computer epoch' just 'epoch' :/

[10:10] <moritz_> and from reading perlmonks I see that lots of people call time(), even if it's not the best function to use

[10:10] <masak> aye

[10:10] <moritz_> then call the low level function seconds_since_start_of_epoch() and discourage its use by having a long name :-)

[10:10] <jnthn> now() would be kinda nice

[10:10] <hejki> yup

[10:10] <hejki> or today()

[10:10] <masak> people will always do things on a plumbing level if we don't put appealing SYNOPSIS examples in their way :)

[10:10] <hejki> obv. being != than now() :>

[10:10] <jnthn> Well, now() better captuers the time componenet too.

[10:11] <masak> hejki: we haz today() :)

[10:11] <hejki> oh we do

[10:11] <hejki> i'm such a bunch of noobdom

[10:11] * moritz_ kinda links Date::Simple on CPAN

[10:11] <masak> hejki: in the unpublished draft, I mean.

[10:11] <hejki> ahh ok

[10:11] <hejki> :>

[10:11] <moritz_> hejki: don't worry, we all are :-)

[10:11] <masak> moritz_: I'll have a look at that, then.

[10:12] <moritz_> it's dead simple date-only arithmetics

[10:13] *** JimmyZ joined
[10:13] <moritz_> today() - date('2010-01-01') # number of days since first of January

[10:13] <JimmyZ> Will Perl6 support 'use Foo as bar' syntax which likes python?

[10:13] <moritz_> today() - 1 # yesterday's date

[10:15] <masak> lunch &

[10:16] <mberends> moritz_: nice, but how would you implement that? custom infix:<-> ?

[10:16] <moritz_> mberends: sure

[10:17] <moritz_> it just takes all integers as duration in days

[10:17] <moritz_> lunch&

[10:17] <Juerd> JimmyZ: How can syntax like Python?

[10:17] <Juerd> or anything.

[10:19] <JimmyZ> There is a modlue with looooooong mame, and I want give it an alias.

[10:19] <JimmyZ> s/modlue/model/

[10:19] <mberends> JimmyZ: that's possible, in S11

[10:20] <mberends> but not in the roadmap for Rakudo *

[10:20] * Juerd still doesn't understand how that likes Python :)

[10:21] <pmurias> Python is so cute, surely everything likes it ;)

[10:22] <Juerd> JimmyZ: Did you mean "syntax like Python" instead of "syntax which likes python"?

[10:22] <JimmyZ> Yeah, poor English

[10:22] <mberends> pythons like parrots. for breakfast.

[10:23] <JimmyZ> mberends: I couln't find it.

[10:24] *** cosimo left
[10:24] <Juerd> JimmyZ: That's okay. It just took a while for me to understand that you meant something different :)

[10:25] <JimmyZ> Juerd: :(

[10:25] *** cosimo joined
[10:25] <Juerd> s/':('/:)/

[10:25] <JimmyZ> So how could I give it an alias?

[10:25] <Juerd> Have you read S11?

[10:25] <Juerd> http://p3rl.org/S11

[10:26] <JimmyZ> Yeah

[10:26] <JimmyZ> import_realias ?

[10:27] <Juerd> Can't say I can find it in S11, though

[10:27] <jnthn> use Pivo:name<Beer::Slovak>;

[10:27] <jnthn> Where :name is the real name to look up.

[10:27] <Juerd> Ah, :name

[10:28] <jnthn> Don't think we'll support it in R* though.

[10:28] <Juerd> Is whitespace allowed before the :?

[10:28] <jnthn> afaik no

[10:28] <jnthn> std: use lol_module:ver<42>;

[10:28] <p6eval> std 30328: OUTPUT«Potential difficulties:␤  Can't locate module lol_module:ver<42> at /tmp/7nzSOfSMPF line 1:␤------> use lol_module:ver<42>⏏;␤ok 00:01 107m␤»

[10:28] <jnthn> std: use lol_module :ver<42>;

[10:28] <p6eval> std 30328: OUTPUT«Potential difficulties:␤  Can't locate module lol_module at /tmp/9KopHMmljN line 1:␤------> use lol_module :ver<42>⏏;␤ok 00:01 106m␤»

[10:29] <jnthn> Oh, it seems it copes.

[10:29] <jnthn> rakudo: use Test;

[10:29] <Juerd> Foo:name<Bar> looks so compressed :(

[10:29] <p6eval> rakudo 3b1d34:  ( no output )

[10:29] <jnthn> rakudo: use Test:ver<42>;

[10:29] <p6eval> rakudo 3b1d34: OUTPUT«Unable to find module 'Test' with version '42'.␤current instr.: 'perl6;Perl6;Module;Loader;need' pc 34820 (src/gen/role_pm.pir:807)␤»

[10:29] <jnthn> rakudo: use Test :ver<42>;

[10:29] <p6eval> rakudo 3b1d34: OUTPUT«Confused at line 11, near "use Test :"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[10:29] <Juerd> :(

[10:29] * Juerd did not mean to confuse Rakudo

[10:30] <jnthn> I thought I'd followed STD there, fwiw.

[10:30] <jnthn> So not sure why Rakudo and STD have different views.

[10:30] <JimmyZ> use Whiteness:from<perl5>:name<Acme::Bleach>:auth<cpan:DCONWAY>:ver<1.12>;

[10:30] <jnthn> Yeah, that's teh reference in s11.

[10:30] <JimmyZ> std: use Whiteness:from<perl5>:name<Acme::Bleach>:auth<cpan:DCONWAY>:ver<1.12>;

[10:30] <p6eval> std 30328: OUTPUT«Potential difficulties:␤  Can't locate module Whiteness:from<perl5>:name<Acme::Bleach>:auth<cpan:DCONWAY>:ver<1.12> at /tmp/XJM3DAIEzM line 1:␤------> me::Bleach>:auth<cpan:DCONWAY>:ver<1.12>⏏;␤ok 00:01 105m␤»

[10:31] <JimmyZ> std: use Thread.pm;

[10:31] <p6eval> std 30328: OUTPUT«===SORRY!===␤Confused at /tmp/EZhQ30JfJi line 1:␤------> use Thread⏏.pm;␤    expecting statement_control__S_064use␤Other potential difficulties:␤  Can't locate module Thread at /tmp/EZhQ30JfJi line 1:␤------> use

[10:31] <p6eval> ..Thread⏏.pm;␤F…

[10:31] <JimmyZ> std: use Thread;

[10:32] <p6eval> std 30328: OUTPUT«Potential difficulties:␤  Can't locate module Thread at /tmp/UR3iDakMhd line 1:␤------> use Thread⏏;␤ok 00:01 105m␤»

[10:33] *** JimmyZ left
[10:34] *** vdo joined
[10:35] *** vdo left
[10:43] *** snarkyboojum left
[10:44] *** envi^home joined
[10:46] *** agentzh left
[10:49] *** ruoso left
[11:30] <mberends> phenny, tell masak forgot to mention a very important reason to identify Perl 6 modules on CPAN with a "6" name: to avoid having Perl 5 users stumble into them unintentionally.

[11:30] <phenny> mberends: I'll pass that on when masak is around.

[11:40] <masak> mberends: I don't really see a qualitative difference between that and Perl 5.6 users stumbling on a 5.10 module unintentionally.

[11:40] <phenny> masak: 11:30Z <mberends> tell masak forgot to mention a very important reason to identify Perl 6 modules on CPAN with a "6" name: to avoid having Perl 5 users stumble into them unintentionally.

[11:41] <moritz_> masak, mberends: as a courtesy to Perl 5 users all Perl 6 modules on CPAN should prevent indexing of all their files with a suitable META.yaml

[11:41] <masak> good point.

[11:45] *** M_o_C joined
[11:46] *** Uazz_Z left
[11:58] *** snarkyboojum joined
[12:03] *** ruoso joined
[12:03] *** bbkr joined
[12:06] <takadonet1> morning all

[12:06] *** takadonet1 is now known as takadonet

[12:09] <moritz_> rakudo: my $;

[12:09] <p6eval> rakudo 3b1d34: OUTPUT«Malformed my at line 11, near "$;"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[12:09] <masak> takadonet: \o

[12:09] <moritz_> std: my $;

[12:09] <p6eval> std 30328: OUTPUT«===SORRY!===␤Unsupported use of $; variable; in Perl 6 please use real multidimensional hashes at /tmp/QTWBjtp5dw line 1:␤------> my $;⏏<EOL>␤FAILED 00:01 108m␤»

[12:09] <jnthn> o/ takadonet 

[12:09] <moritz_> std: my ($);

[12:09] <p6eval> std 30328: OUTPUT«ok 00:01 107m␤»

[12:09] <moritz_> rakudo: my ($);

[12:09] <p6eval> rakudo 3b1d34:  ( no output )

[12:10] <moritz_> rakudo: say my ($);

[12:10] <jnthn> If anyone wants to put the special variable obsolecense warnings into Rakudo from STD, feel free, btw. It's LHF.

[12:10] <p6eval> rakudo 3b1d34: OUTPUT«Any()␤»

[12:10] <moritz_> rakudo: say \my ($);

[12:10] <p6eval> rakudo 3b1d34: OUTPUT«Capture()<0x5557b80>␤»

[12:10] <bbkr> rakudo: $_="a"; $_ R~= "b"; # hmm, counterintuitive... i expected $_ to be "ba"

[12:10] <p6eval> rakudo 3b1d34: OUTPUT«Cannot assign to readonly value␤current instr.: '&die' pc 17293 (src/builtins/Junction.pir:404)␤»

[12:11] <jnthn> bbkr: Precedence bites. :-)

[12:11] <jnthn> bbkr: [R~]= probably is what you want.

[12:11] <bbkr> rakudo: $_="a"; $_ [R~]= "b"; say $_;

[12:11] <p6eval> rakudo 3b1d34: OUTPUT«Confused at line 11, near "$_ [R~]= \""␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[12:12] <jnthn> std: $_="a"; $_ [R~]= "b"; say $_;

[12:12] <p6eval> std 30328: OUTPUT«ok 00:01 107m␤»

[12:12] <jnthn> bbkr: We still need to do that in Rakudo yet.

[12:12] <bbkr> ok, thanks for clarification jnthn

[12:12] <jnthn> In theory it shouldn't be too hard.

[12:12] <jnthn> :-)

[12:14] * jnthn -> nom shop

[12:19] <takadonet> 3m 26 second build time :)

[12:19] <takadonet> wow

[12:19] <mathw> nice

[12:29] *** gavgpv joined
[12:29] *** gavgpv left
[12:30] *** jhuni left
[12:37] *** twigil joined
[12:41] <snarkyboojum> yeah, I can almost remember what I was doing between builds now :)

[12:41] <moritz_> oh, it's quite simple - after a finished spectest run I just look into 'git diff'

[12:42] <moritz_> and if there are changes, I usually remember why I did those, and commit if the tests passed :-)

[12:42] <snarkyboojum> :)

[12:45] <colomon> funny, I usually commit before I run the spectests.  

[12:46] <colomon> that way, if the spectest works, all I need remember to do is "git push"

[12:47] <moritz_> I sometimes do that too

[12:48] <moritz_> but I don't like to git reset or git rebase all that often if I find that my changes didn't work after all

[12:49] <colomon> sure, I only do that after the exploratory phase of development.

[12:49] <snarkyboojum> wow, I just did a git pull, and a successful build and my ./perl6 is broken :(

[12:49] <snarkyboojum> get 'Could not find sub !YOU_ARE_HERE' no matter what I run or how I run it

[12:49] <masak> I find I do 'git reset --hard' quite often nowadays. I also have a tendency to do 10-minute experimental branches.

[12:50] <takadonet> wow 1400 test failed....

[12:50] <moritz_> snarkyboojum: did you reconfigure rakudo?

[12:50] <jnthn> snarkyboojum: You did re-con...yes, that.

[12:50] <snarkyboojum> mortiz_: just doing that now

[12:50] <jnthn> My commit message even said to. ;-)

[12:51] <snarkyboojum> moritz_ even

[12:51] <moritz_> :-)

[12:51] <snarkyboojum> oh! commit messages!

[12:51] <moritz_> snarkyboojum: just mo<tab> for you :-)

[12:51] <snarkyboojum> moritz_: my goodness you're right :) heh

[12:51] <jnthn> I should start putting jokes in my commit messages so people read them. ;-)

[12:51] <moritz_> oh wait, that's ambiguous, at least in my irssi

[12:51] <snarkyboojum> jnthn: I just read the code in your commits, not the messages :P

[12:52] <moritz_> jnthn: but then you couldn't hide your passwords there... oh wait, that was README, a totally different matter :-)

[12:52] <snarkyboojum> (and obviously don't understand much)

[12:52] * masak .oO( is the IRC equivalent of 'first-name basis' writing out someone's nick in full instead of tabbing it? )

[12:52] <jnthn> snarkyboojum: Well, the message tells you what the code is menat to do, the code tells you what it actually does. ;-)

[12:52] <snarkyboojum> I can't believe I've been writing out names in full all this time :|

[12:53] <snarkyboojum> jnthn: yeah, I'm not very clever eh? :)

[12:53] <moritz_> snarkyboojum: a surprising number of people don't know about this convenient feature of most IRC clients

[12:53] <moritz_> snarkyboojum: in particular I've told Tim Bunce (father of perl 5's DBI module) about it, and it was news for him :-)

[12:54] <jnthn> masak: yes, but if you don't type enough letters you get the wr...oh my.

[12:54] <jnthn> :-)

[12:54] <snarkyboojum> moritz_: weird how the context switch happens between different apps - if I was running an IRC client in a shell I'd be tab-happy by default

[12:54] *** frettled sets mode: +o masak

[12:56] <mathw> ah yes, the #perl6 tab-completion nightmare

[12:56] <mathw> all these people who begin with m

[12:57] <jnthn> The nickspace is crowded in m.

[12:57] <colomon> and the damned co-s

[12:57] <frettled> better just to say:

[12:57] <moritz_> mathw: all these people beginninig with 'ma' even

[12:57] <frettled> Hey, dude.  Don't make it bad.  Take some sad code, and make it better.

[12:58] <twigil> hello everyone! I learnt about GSoC deadline just today. Is it too late to try to apply?

[12:58] <masak> gee, I hope not :)

[12:58] * masak should really sit down and write that application

[12:59] <moritz_> twigil: it's only too late when the deadline closes :-)

[12:59] <mathw> skribu!

[13:01] <pmurias> masak: what will you apply for?

[13:01] <pmurias> what i meant what is your application about?

[13:01] <moritz_> twigil: what are you interested in?

[13:02] *** hanekomu joined
[13:03] <twigil> moritz_: I looked through the list of perl 6 projects for 2010. contributing to test suite looks pretty interesting for me

[13:03] <masak> pmurias: I'd like to work either on Rakudo or on the spectests. haven't decided yet.

[13:03] <moritz_> twigil: cool

[13:03] <masak> if twigil takes the test suite, maybe I'll focus on Rakudo :)

[13:03] <moritz_> twigil: also if you want to write Perl 6 code, Rakudo is mostly written in perl 6 these days (or subsets thereof)

[13:03] <moritz_> heh :-)

[13:03] <jnthn> \o/

[13:04] <masak> it be fun, and a bit fitting, to focus on closing RT tickets. but I don't know if it's concrete enough.

[13:04] <masak> and it's a bit hard to make concrete, because RT keeps changing around.

[13:04] <moritz_> masak: nah, you'd have to come up with a concrete topic and schedule

[13:04] <jnthn> masak: Didn't you want to focus on static anal?

[13:05] <moritz_> anyway, whoever works on the test suite is likely to be stuck with me as a mentor :-)

[13:05] <jnthn> Or other such thingies? Or gone off that idea? :-)

[13:05] <moritz_> masak: you could implement named enums as the first step of your gsoc project :-)

[13:05] <masak> jnthn: I'll focus on static analysis regardless. maybe if you tell me about the possibilities of it in Rakudo, I can write something up.

[13:06] <masak> moritz_: no, actually I couldn't :(

[13:06] <snarkyboojum> is the plan to make Temporal understand time zones like 'Australia/Sydney'?

[13:06] <masak> moritz_: I'm currently blocking there, with no realistic way to unblock without help.

[13:06] <masak> snarkyboojum: not in itself, no.

[13:06] <moritz_> masak: then get help :-)

[13:06] <masak> jnthn: help! :)

[13:07] <snarkyboojum> masak: bugger - I liked that about Perl 5 DateTime

[13:07] <jnthn> masak: Yeah, I know, I still need to do Stash

[13:07] <jnthn> :-)

[13:07] <masak> snarkyboojum: things having to do with 'words' of some sort are exported to modules.

[13:07] <masak> snarkyboojum: same goes for 'January' and 'Tuesday'.

[13:07] <masak> snarkyboojum: it's a bit narrow, but it's a simple line to draw.

[13:07] <masak> and we can always extend it if it turns out to be safe to do so.

[13:07] <jnthn> The good news is that there's already a module for November.

[13:08] <masak> :P

[13:08] <masak> I just don't want to start with too much. better to build up from below than to tear down.

[13:08] <snarkyboojum> so you'd need to lookup a timezone using 'Australia/Sydney' using a different module, and then plug that in at contruction time?

[13:08] <masak> or load a module and use the string.

[13:10] <moritz_> masak: so you also postponed your plans to parse dates in ISO-$something formats?

[13:10] <moritz_> hey

[13:10] <moritz_> speaking of GSOC

[13:10] <moritz_> and masak

[13:10] <moritz_> and temporal/datetime

[13:10] <snarkyboojum> :)

[13:11] <moritz_> masak: don't you want to make *that* part of your gsoc project? :-)

[13:11] <masak> no :)

[13:11] <masak> I've retreated a bit there, I think.

[13:11] <masak> it parses ISO8601, but only the full date/time form.

[13:12] <masak> maybe I should sign up for finally implementing Buf, including reading binary files etc.

[13:12] <snarkyboojum> masak: is there a current Temporal POD somewhere I can have a read of?

[13:13] <mathw> masak: that would be interesting

[13:13] <jnthn> masak: That'd also be an excellent project.

[13:13] <mathw> or if you feel ambitious, how about a concurrency framework with STM? :)

[13:14] <moritz_> mathw: that would be *very* ambitious, given that parrot doesn't support any concurrency in connection with HLLs

[13:14] <snarkyboojum> something along the lines of http://gist.github.com/355664 I guess?

[13:14] *** ignacio_ joined
[13:15] <mathw> moritz_: I did say 'if you feel ambitious' :)

[13:15] <moritz_> btw <http://www.perlmonks.org/?node_id=832796> (Perl 5, but about language extensions, so maybe of some small interest here)

[13:15] <masak> snarkyboojum: this is what I have so far: http://gist.github.com/356555

[13:16] <masak> snarkyboojum: please don't consider it official or done in any way, shape, or form.

[13:16] <masak> two more days, and it will be.

[13:16] <snarkyboojum> masak: cheers!

[13:16] <snarkyboojum> masak++ :)

[13:16] <masak> lue++ mberends++

[13:19] *** M_o_C left
[13:21] <pmurias> ruoso: hi

[13:23] <snarkyboojum> :timezone defaults to +0000 now (though I'm sure that'll get picked up)

[13:25] <masak> indeed.

[13:25] <masak> that's a change I already had planned to put in.

[13:27] <snarkyboojum> cool stuff :)

[13:27] <snarkyboojum> it's quite amazing to watch the pace of Perl 6 development

[13:28] <snarkyboojum> so much going on

[13:28] <masak> we're eager to reach the future :)

[13:28] <snarkyboojum> and I guess Temporal will tell you when you get there etc :P awesome

[13:29] * snarkyboojum is sure all the Temporal jokes have been done to death

[13:29] <snarkyboojum> :)

[13:30] <jnthn> Yeah, we don't have time for them any more.

[13:30] <snarkyboojum> :D

[13:31] <masak> luckily, we're probably changing the name of the module. :)

[13:31] <masak> we're adding three more dimensions, and calling it SpatioTemporal.

[13:31] * masak hides

[13:32] <jnthn> Now, wait a minute...

[13:33] <masak> did you mean: 'wait a meterminute'?

[13:34] <jnthn> .oO( I'd be more interested if I metadate... )

[13:34] <masak> what's that? two dates going on a date together?

[13:37] <pmichaud> good morning, #perl6

[13:37] <colomon> o/

[13:37] <moritz_> \o/

[13:37] <jnthn> hi, pmichaud! o/

[13:37] *** moritz_ sets mode: +oo pmichaud colomon

[13:38] <pmichaud> oops, afk for a bit

[13:39] <masak> hi, pmichaud 

[13:40] *** rgrau` joined
[13:44] <slavik> w00t

[13:45] *** dalek left
[13:48] <pmichaud> back again, briefly

[13:48] <mathw> o/

[13:50] *** colomon_ joined
[13:50] <ruoso> hi pmurias 

[13:50] *** dalek joined
[13:51] <colomon_> rakudo: role Animal { multi method speak() { "quiet"; }; }; class Dog does Animal; say Dog.new.speak

[13:51] <p6eval> rakudo 3b1d34: OUTPUT«quiet␤»

[13:51] <colomon_> :\

[13:52] *** colomon left
[13:52] *** colomon_ is now known as colomon

[13:52] <colomon> rakudo: role Animal { multi method speak() { "quiet"; }; }; class Dog does Animal {multi method speak() { "woof" }}; say Dog.new.speak

[13:52] <p6eval> rakudo 3b1d34: OUTPUT«woof␤»

[13:52] <colomon> :\

[13:52] <jnthn> Yeah, roles + multi-methods = not really done yet.

[13:52] *** molaf joined
[13:52] <jnthn> (that should die due to ambiguity)

[13:53] *** molaf left
[13:54] <colomon> really?  how can Dog's speak override Animal's, then?

[13:54] <colomon> (and locally I'm getting get_attr_str() not implemented in class 'Perl6MultiSub' when I try this sort of thing.)

[13:55] <jnthn> colomon: Only works that way because of multi

[13:55] <jnthn> Maybe there's some canonicalization rule that we'd go on in the future.

[13:56] <masak> spectested; got a couple of failures in t/spec/S06-multi/syntax.rakudo

[13:56] <jnthn> But certainly the alpha semantics were that you can all multi candidates from the class and the role.

[13:56] <moritz_> masak: yes, they are there since Saturday nigth or so

[13:57] <colomon>  jnthn: in general I'm getting really weird results here.  may just be too tired to code.

[13:58] <jnthn> colomon: If you're doing anythign to do with roles + multis all bets are off.

[13:58] <masak> moritz_: oh, ok.

[13:58] <jnthn> I've done just about nothing there.

[13:59] <jnthn> Anything that works atm is by accident.

[13:59] <PerlJam> (happy accidents)++

[13:59] <PerlJam> good morning btw

[14:00] <masak> PerlJam: \o

[14:00] <m6locks> good afternoon

[14:01] * PerlJam was summoned to be part of a jury yesterday.  

[14:01] <PerlJam> Sat all day and was never called.

[14:01] *** ignacio_ left
[14:01] <PerlJam> But, they said I'm not off the hook until Wed @ 5pm

[14:02] <moritz_> bah, doesn't sound like fun

[14:02] <moritz_> and let me guess, you're not allowed to reject the call

[14:02] <PerlJam> sitting all day in a room full of several hundred people was not at all fun. 

[14:03] <PerlJam> moritz_: I don't qualify for any of the exemptions.

[14:03] <moritz_> you need a music player, a laptop, a good book and thing to eat and drink

[14:04] <mathw> bah

[14:04] <pmichaud> afk again for a while :-\

[14:04] <masak> moritz_: kuro5hin makes it sound like there are ways: http://www.kuro5hin.org/story/2008/9/8/0245/12132

[14:04] <mathw> I imagine jury service is much more interesting if you actually get to be on the jury

[14:04] <PerlJam> I guess this is karma or something though.  I haven't had a jury summons since I was in college (about 17 years ago)

[14:05] <moritz_> masak: probably depends on the legislation

[14:05] <mathw> I've never had one

[14:05] <mathw> ...yet

[14:05] <mathw> I'm about as eligible as you get though

[14:05] <PerlJam> while I was in there with the other cattle, I found that some people had been summoned multiple times within a years

[14:05] <PerlJam> s/years/year/

[14:05] <mathw> irritating

[14:06] <mathw> fortunately if they did decide to summon me and they did the sensible thing and got me in my local courts, it's just about as easy as getting to the office

[14:06] <mathw> but it'd likely end up being massive hassle

[14:06] <mathw> and lots of boring

[14:06] <PerlJam> definitely lots of boring

[14:06] <mathw> PerlJam: did lots of other people end up doing nothing all day too?

[14:07] <PerlJam> like I said, there were several hundred people in the room with me.

[14:07] <PerlJam> about 1/3 thought ahead enough to bring something to do

[14:07] <mathw> several hundred?

[14:07] <mathw> man

[14:08] <mathw> how many juries did they need?

[14:09] <PerlJam> They formed 3 panels of 100 people, 1 of 80, 2 or 3 of 60, and a small one of 20  (that's all I noticed, I may have missed one or two panels)

[14:10] <PerlJam> The very first group of 100 people got to leave after about 3 hours of sitting around.

[14:10] <PerlJam> The rest of us weren't as lucky

[14:10] <mathw> :(

[14:10] *** nihiliad joined
[14:11] * moritz_ hopes that IO is scheduled more efficiently than prospective jury members

[14:16] <PerlJam> Hrm.  Not that many student proposals for GSoC this time around.

[14:16] *** ignacio_ joined
[14:17] <pmichaud> I went for several years w/o ever being summoned for jury duty.  Then I was called as an expert witness in several cases protesting the computer algorithm used to select juries.  After my testimony, the county immediately changed their jury selection software, and I was called to jury duty the following year.

[14:18] <pmichaud> (the computer software used for jury selection was laughably bogus)

[14:18] * masak .oO( .pick(*) )

[14:18] <takadonet> ...

[14:19] <mathw> rofl

[14:19] <jnthn> wow!

[14:20] <pmichaud> the team that created the jury selection criteria thought that hash pools were sufficient to randomize the candidates

[14:21] <pmichaud> they also thought that wall clock time (1-second resolution) was a good source of entropy for generating random numbers

[14:21] <mathw> it's... *slightly* better than no entropy at all

[14:21] <pmichaud> note:  not for seeding a random number generator.... for actually generating the random numbers

[14:21] <mathw> oh

[14:22] <mathw> oh dear

[14:22] *** wasy_afk is now known as wasy

[14:22] <pmichaud> given that the program was processing approximately 100 "random" entries per second...

[14:22] <jnthn> wtf.

[14:22] <jnthn> That's...such a fail.

[14:22] <masak> I've done that. but it was millisecond resolution, and it was only for randomizing banners on pages :)

[14:22] <pmichaud> that meant that 100 "random candidates" were all being selected based on the same wall clock time

[14:22] *** jaldhar joined
[14:23] <mathw> so you'd get Patrick Michaud, and Paul Michaud, and Peter Michaud all at once!

[14:23] <jnthn> .oO( If I can make this guy late to work, I don't have to do jury duty! )

[14:24] <mathw> .oO( If I cut off the power for just the right amount of time, I can make my neighbour do jury duty and rob his house while he's out)

[14:24] <pmichaud> mathw: something like that, yes.  The trial attorneys knew something was up when they started seeing jury pools where everyone knew each other already (because they had served on a jury together the previous year :-)

[14:24] <mathw> that would tend to give it away

[14:24] <mathw> I imagine it was more likely to clump SSNs or something

[14:25] <pmichaud> worse than that, even

[14:25] <pmichaud> the records were loaded into the database based on voter registrations

[14:25] <PerlJam> pmichaud: I think their randomness is still highly suspect. There were a couple of ladies chatting behind me who had both been called for jury duty last month.

[14:25] <pmichaud> and the source file of the voter registrations was alphabetical by last name

[14:26] <pmichaud> so people were being clustered together by last name.  It wasn't quite as obvious as there being a bunch of people with the same last name on the jury, because the hash pools did distribute things somewhat

[14:27] <mathw> That is awful

[14:27] <PerlJam> unless perhaps being called but not selected puts you on the short list for getting called again  ...  (randomly :)

[14:27] <moritz_> .oO( ... )

[14:27] *** proller left
[14:27] <pmichaud> PerlJam: same courts?  It wouldn't surprise me if they were called for federal jury duty and then state/county

[14:28] <moritz_> even microsoft can't properly randomize lists :-)

[14:28] <pmichaud> oh, and here's the other funny part

[14:28] <moritz_> (re: browser choices in random order in EU countries)

[14:28] <pmichaud> let's say we have a set of jurors:  Alice, Bob, Carol, Donald

[14:28] <PerlJam> pmichaud: yep, same courst

[14:28] <pmichaud> and the algorithm picked "Bob" for jury duty

[14:29] *** proller joined
[14:29] <pmichaud> if Bob was flagged as ineligible for duty, then the program simply moved to the next available candidate after Bob

[14:29] <pmichaud> in this case, if Bob was ineligible for duty, then Carol became twice as likely to be chosen as Donald

[14:29] <moritz_> so if you had a huge clan of ineligible people with the same last name

[14:29] <sbp> so if you have a load in a row who were ineligible, the poor person after would have an Nx greater chance of being picked?

[14:29] <sbp> ouch

[14:30] <pmichaud> yes

[14:30] <CokeBot9000> woof.

[14:30] <CokeBot9000> I bet they use the same software out here. =-)

[14:30] <moritz_> they knew *nothing* about statistics, did they?

[14:30] *** Guest36443 left
[14:31] <moritz_> sounds like the software was written by the cousin of the president of some court

[14:32] <moritz_> how knew a bit about visual basic

[14:32] <pmichaud> no, the authors were just clueless

[14:32] <pmichaud> it was _very_ interesting to watch the county information officer defend the system

[14:32] <[particle]> is that texas justice?

[14:33] <pmichaud> the county of course wanted to be very careful, because they didn't want to be re-trying a year's worth of cases based on jury bias

[14:33] * moritz_ thinks it's a good sign that pmichaud++ has the leisure to rant about non-working PRNGs :-)

[14:34] <pmichaud> alas, it's a false leisure

[14:34] <PerlJam> moritz_: either that or it's an escape mechanism

[14:34] <moritz_> :/

[14:34] <pmichaud> what it really means is that I had about 15 minutes while the physical therapist was here in which I could sit and chat

[14:34] <pmichaud> she's gone now, and I need to do a few things with Paula again :-)

[14:35] <moritz_> then wish her the best of luck (even though I never met her)

[14:35] <pmichaud> but yes, things are slowly-but-surely getting better around here, so that I should have more time to sit in front of the computer

[14:35] <pmichaud> (alas, more "slowly" than "surely", but at least headed in the correct direction)

[14:36] <CokeBot9000> pmichaud: best wishes to Paula.

[14:36] <pmichaud> CokeBot9000: Thanks. :-)

[14:36] <slavik> CokeBot9000: you deal coke?

[14:37] <pmichaud> afk again -- bbl

[14:38] <masak> pmichaud: yes, thinking of you and Paula a lot here. best wishes.

[14:40] *** uniejo left
[14:42] *** uniejo joined
[14:44] *** bluescreen joined
[14:44] *** bluescreen is now known as Guest60947

[14:47] <dalek> rakudo: c06062d | (Solomon Foster)++ | src/core/ (3 files):

[14:47] <dalek> rakudo: Add Numeric.log10 which simply calls self.log(10) -- remove resulting unneeded log10s from Complex and Num.

[14:47] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/c06062d46904933c547fca36cdb81e726cfd5503

[14:47] *** uniejo left
[14:48] <masak> colomon++

[14:49] *** justatheory joined
[14:54] *** sorear left
[14:55] *** sorear joined
[14:57] *** meppl joined
[15:01] <CokeBot9000> slavik: no. 

[15:01] <slavik> :(

[15:01] <mberends> \o travel Arnhem -> Amsterdam.pm! :-)

[15:01] *** mberends left
[15:02] *** pmurias left
[15:03] *** Jedai left
[15:04] *** molaf joined
[15:04] <m6locks> rakudo: class A { has $.avg; multi submethod BUILD(Num @a) { my $a = 0; for 1..@a.elems -> $i { $a += @a[$i] };  $.avg = $a / @a.elems; }} my $b = A.new((1,2,3,4)); say $b.avg

[15:04] <p6eval> rakudo 3b1d34: OUTPUT«Confused at line 11, near "class A { "␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[15:05] *** sorear left
[15:05] <jnthn> need ; before the my

[15:06] <moritz_> there's an easier way to calculte the average :-)

[15:06] *** sorear joined
[15:06] <moritz_> rakudo: my @a = 1, 2, 3; says ([+] @a) / @a

[15:06] <p6eval> rakudo 3b1d34: OUTPUT«Could not find sub &says␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[15:06] <moritz_> rakudo: my @a = 1, 2, 3; say ([+] @a) / @a

[15:06] <p6eval> rakudo 3b1d34: OUTPUT«2␤»

[15:06] *** Jedai joined
[15:06] <m6locks> my point was to demonstrate that BUILD won't instantiate with array

[15:06] <m6locks> or at least my copy of rakudo does not do it ;PP      

[15:06] <moritz_> m6locks: there are several things that won't work in your script

[15:07] <moritz_> one is that you think arrays are 1-indexed

[15:07] <moritz_> the second is that if you want to pass positional arguments to a construct, you have to write a custom .new method, not a BUILD method

[15:07] <m6locks> oh ok

[15:07] <[particle]> my irc client thinks 1..@a.elems is an email address

[15:08] <moritz_> m6locks: http://perlgeek.de/blog-en/perl-6/object-construction-and-initialization.html

[15:08] <m6locks> thanks, will check it out

[15:08] <m6locks> BUILD worked with some named parameters that were not arrays

[15:09] <m6locks> but i think i'll write a new method

[15:09] <moritz_> rakudo: class A { submethod BUILD { say "yes" } }; A.new

[15:09] <p6eval> rakudo 3b1d34: OUTPUT«yes␤»

[15:10] <moritz_> rakudo: class A { submethod BUILD(:@b { say ~@b } }; A.new(:b[3, 4, 5])

[15:10] <p6eval> rakudo 3b1d34: OUTPUT«Malformed method at line 11, near "BUILD(:@b "␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[15:10] <moritz_> rakudo: class A { submethod BUILD(:@b) { say ~@b } }; A.new(:b[3, 4, 5])

[15:10] <p6eval> rakudo 3b1d34: OUTPUT«3 4 5␤»

[15:11] <moritz_> seems to work fine here even with arrays

[15:12] <m6locks> hmm i must've confused the notation then, gonna try if it works

[15:12] *** hanekomu left
[15:12] *** kaare joined
[15:12] *** kaare is now known as Guest5964

[15:27] <masak> *sigh*. alester asks for help writing a Plack article on Twitter, which causes mst to suggest he resign instead, and hanekomu to call him clueless. sometimes community interactions make me sad. :(

[15:27] <alester> Where's that?

[15:27] <masak> on Twitter.

[15:27] <alester> Suggest I resign from what?

[15:27] <masak> perlbuzz.

[15:28] <moritz_> that's not nice[tm]

[15:28] <alester> Wow.

[15:28] <masak> alester: fwiw, I appreciate your efforts with perlbuzz. I think others do as well.

[15:28] <masak> I may not find everything there relevant or interesting, but that's just how it is.

[15:28] * moritz_ certainly does

[15:28] <masak> no-one's paying you for it.

[15:28] <PerlJam> masak, alester: I do.

[15:29] <alester> Wow.

[15:29] * masak hugs alester 

[15:30] * moritz_ hugs mst

[15:31] *** IllvilJa left
[15:31] <masak> for a while, perlbuzz was one of the very few blogs out there which had a design that didn't look crap. nowadays other blogs are picking up, but it was definitely setting the standard for quite a while.

[15:32] <PerlJam> masak: mst's comment shows that he's operating under a false assumption.

[15:33] <masak> which comment? and which false assumption?

[15:34] <PerlJam> masak: about passing "the perlbuzz brand onto somebody who's actually paying attention"   It seems to imply that alester is a generator of buzz rather than a reporter of buzz.

[15:34] <masak> it does.

[15:35] <alester> And also the assumption that perlbuzz is some sort of community property.

[15:36] <masak> my initial reaction is still the overriding one: that no matter what mst and hanekomu think of alester, they are making themselves look like jerks by writing what they do. I don't see why anyone rational would do that.

[15:36] *** M_o_C joined
[15:36] <alester> And it reminds me that I want nothing to do with mst projects.

[15:37] <alester> Catalyst, DBIx, etc

[15:37] <alester> I personally don't use Catalyst because I don't want to deal with a community that is actively hostile.

[15:38] <masak> Plack is an mst project.

[15:38] <masak> at least he's contributed.

[15:38] <masak> I'm not sure the label 'mst project' is a useful one...

[15:39] <masak> but I agree that parts of the Perl 5 community are overly hostile, and that it doesn't have to be that way.

[15:39] <PerlJam> masak: thus perl 6  :)

[15:39] <masak> among other reasons, yes.

[15:40] <PerlJam> I think it has to do with the 3 virtues of a perl programmer.  Many people exhibit false-laziness.  I think there's also some misunderstanding about what "hubris" really means in the perl universe. 

[15:41] <PerlJam> (granted it's all Larry's fault for using terms in a confusing anti-sense way ;)

[15:41] *** Jedai left
[15:41] *** Guest60947 left
[15:41] *** gbacon left
[15:41] *** meteorjay left
[15:41] *** japhb left
[15:41] *** cls_bsd left
[15:41] *** astinus left
[15:41] *** mathw left
[15:41] *** takadonet left
[15:42] <masak> "There ain't nothin' in this world that's worth being a snot over." -- Larry Wall

[15:42] <masak> I think that applies. :)

[15:42] *** Jedai joined
[15:42] *** Guest60947 joined
[15:42] *** gbacon joined
[15:42] *** meteorjay joined
[15:42] *** japhb joined
[15:42] *** cls_bsd joined
[15:42] *** astinus joined
[15:42] *** lisppaste3 joined
[15:42] *** m6locks joined
[15:42] *** mathw joined
[15:42] *** takadonet joined
[15:42] *** verne.freenode.net sets mode: +vo lisppaste3 mathw

[15:43] <jnthn> Sure, though we're all human and can accidentally the asshole sometimes.

[15:43] <alester> yeah, but this wasn't accidental.

[15:43] <masak> oh, indeed.

[15:44] <PerlJam> alester: so ... did you run over mst's cat or something?  He seems particularly hostile towards you.

[15:44] <jnthn> Well, yes, people can just be nasty too.

[15:44] <alester> Who knows?

[15:44] * jnthn never quite knows what to make of mst. :-) I've found I can cope with him just fine so long as there's plenty of beer too. :-)

[15:46] <masak> I generally like mst. even when it's be he's bellowing at, strangely.

[15:46] <masak> that doesn't mean I agree with everything he says, of course.

[15:46] <masak> especially not when he's actually being an ass.

[15:47] <PerlJam> masak: that sums up how I feel about mst too.  Generally I like him; sometimes he goes irrationally far.

[15:47] *** IllvilJa joined
[15:47] <jnthn> masak: Yes, that probably sums it up pretty well.

[15:49] <mdxi> i typically find him enjoyably bellicose and curmudgeonly, and he's rounded on me a couple of times, too. he's one of those people who define the middle ground by clearly being well to one side of it.

[15:49] <masak> aye.

[15:50] *** Guest5964 left
[15:51] <PerlJam> But I wonder what it takes to get mst to *always* be against you?  I mean, in the past I've poked him enough that he blew up and stormed off (on IRC) and he and I still get along just fine.

[15:52] <PerlJam> I bet it's some sort of fallen-hero kind of thing.  mst used to look up to an idealized alester and when he found out that alester is human, it was too much.

[15:52] <PerlJam> now he's completely anti-alester.

[15:53] <alester> But I'm not human.

[15:53] <alester> I am the Loc-Nar.

[15:54] <masak> o.O

[15:59] *** astrojp left
[16:03] *** REPLeffect joined
[16:12] *** twigil left
[16:16] *** Guest60947 left
[16:17] *** Guest60947 joined
[16:22] <Su-Shee> well, he's funny, passionate, productive, has an opinion, does stuff, is no idiot so what more does someone want? politeness? well-behavior? what for? :)

[16:23] <masak> sure. still a difference between not being polite all the time, and being hurtful.

[16:23] <[particle]> less poison.

[16:23] <masak> exactly. I'm amazed they do not see that themselves.

[16:24] <[particle]> this cocktail is delicious! you can barely taste the arsenic.

[16:25] <masak> [particle]++

[16:25] <frettled> heh :)

[16:26] *** rbaumer left
[16:26] <frettled> alester: I meant to alester++ for the bobby-tables.com post earlier this year, but I forgot.

[16:27] <frettled> I can do it again: alester++

[16:27] <alester> Thanks.

[16:27] *** jaldhar left
[16:27] <alester> Patches welcome on anything on there.

[16:30] *** xinming left
[16:30] *** justatheory left
[16:32] *** xinming joined
[16:32] <moritz_> rakudo: sub test($test is write) { }

[16:32] <p6eval> rakudo c06062:  ( no output )

[16:33] <moritz_> bad rakudo, doesn't complain about unknown traits

[16:33] <masak> rakudo: sub test($test is hippopotamus) { }

[16:33] <p6eval> rakudo c06062:  ( no output )

[16:33] * masak submits rakudobug

[16:33] <jnthn> It does

[16:33] <jnthn> Where they're actually wired up.

[16:33] <masak> ...but?

[16:33] <jnthn> rakudo: sub yulia is krassivaya { }

[16:33] <p6eval> rakudo c06062: OUTPUT«Could not find sub &substr␤current instr.: 'perl6;Signature;_block21375' pc 463825 (src/gen/core.pir:72226)␤»

[16:33] <jnthn> wtf.

[16:33] * masak submits rakudobug

[16:33] <jnthn> ffs.

[16:33] <jnthn> Well, it fails anyway.

[16:34] <moritz_> masak: there's already a ticket

[16:34] <masak> oh.

[16:34] <masak> moritz_: for the first one?

[16:34] <jnthn> Point is that parameter traits are just NYI.

[16:34] <moritz_> RT #60966 - Rakudo should throw errors on unknown traits

[16:34] <jnthn> (never were in alpha either)

[16:34] <masak> moritz_: ok.

[16:34] <masak> still submitting the second one.

[16:34] <jnthn> Yeah

[16:34] <jnthn> second one is weird.

[16:34] <masak> jnthn: Yulia just made RT :)

[16:34] <jnthn> Cute.

[16:35] <moritz_> Yulia?

[16:35] <masak> :)

[16:35] * jnthn quickly re-treats to working on fuzzy searching stuff

[16:35] <jnthn> er, EUNREQUIREDHYPHEN

[16:36] <moritz_> rakudo: sub f() as Int { '5' }; say f().WHAT

[16:36] <p6eval> rakudo c06062: OUTPUT«Could not find sub &trait_mod:<as>␤current instr.: '' pc -1 ((unknown file):-1)␤»

[16:36] <jnthn> That's more like it.

[16:36] <jnthn> Well, sane error

[16:36] <jnthn> Should work of course.

[16:36] <moritz_> aye

[16:36] <jnthn> YANYI.

[16:37] *** kaare_ joined
[16:37] <diakopter> s/UNREQUIRED/UNNECESSARY/

[16:38] <diakopter> or SUPERFLUOUS

[16:38] <IllvilJa> UNCOMPULSARY ?

[16:38] <moritz_> or simply s{ '-' } = '';

[16:38] <diakopter> NONCOMPULSORY

[16:39] <[particle]> ECLOSINGHYPHENNOTFOUND

[16:39] <moritz_> NONPULSORY?

[16:39] <jnthn> rakudo: say "re-treat" ~~ s[ '-' ] = '';

[16:39] <p6eval> rakudo c06062: OUTPUT«Cannot assign to readonly value␤current instr.: '&die' pc 17293 (src/builtins/Junction.pir:404)␤»

[16:39] <jnthn> oh, yeah.

[16:39] <jnthn> rakudo: my $x = "re-treat"; $x ~~ s[ '-' ] = ''; say $x;

[16:39] <p6eval> rakudo c06062: OUTPUT«retreat␤»

[16:39] <moritz_> rakudo: sub infix:<,> { 42 }; say 5, 5

[16:39] <p6eval> rakudo c06062: OUTPUT«55␤»

[16:40] <moritz_> (yes, there's a ticket for that already)

[16:40] <masak> :)

[16:40] <IllvilJa> UNNONOPTIONAL?

[16:40] <masak> num &

[16:41] *** masak left
[16:41] * IllvilJa quits trolling

[16:41] <moritz_> nom is a good idea, akshually

[16:41] <diakopter> that reminds me of guys at my university who wore t-shirts proclaiming "holiness is not an option; it's a command"

[16:42] * moritz_ groans

[16:42] <jnthn> yeahbut following commands is optional. ;-)

[16:42] <diakopter> I teased them by asking, "how are you supposed to obey the command if obedience is not one of the possible options?"

[16:42] <jnthn> lol

[16:42] <diakopter> (it should have said "holiness is not optional; it's a command"

[16:42] <diakopter> )

[16:45] <IllvilJa> Hm.  "Not an option means it is a command" => "An option means it is an UNcommand"?

[16:45] <diakopter> "an option" means "one of the possible alternatives"

[16:46] <TimToady> 2 options == 1 choice :)

[16:46] <IllvilJa> choice == uncommand == choice then...

[16:46] <IllvilJa> Just trying to enrichen (?) the English language.

[16:48] * IllvilJa leaves for playing a game with the small kids... :-)

[16:55] *** justatheory joined
[16:55] *** snarkyboojum left
[16:56] <pugssvn> r30329 | moritz++ | [t/spec] fudge signature.t for rakudo 

[16:59] <dalek> rakudo: 4e1dd48 | moritz++ | t/spectest.data:

[16:59] <dalek> rakudo: we pass signature.t

[16:59] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/4e1dd48caf76f188e7486ba76a0abb6e988c6ea2

[16:59] *** kaare_ left
[17:03] *** wasy left
[17:06] *** cdarroch joined
[17:06] *** cdarroch left
[17:06] *** cdarroch joined
[17:15] <moritz_> http://blog.llvm.org/2010/04/amazing-feats-of-clang-error-recovery.html

[17:15] *** envi^home left
[17:16] *** jaldhar joined
[17:16] <dalek> book: 5fc47e2 | moritz++ | docs/release-guide.pod:

[17:16] <dalek> book: [docs] update release guide

[17:16] <dalek> book: review: http://github.com/perl6/book/commit/5fc47e202a3114db31be242832ea997660545c09

[17:18] *** M_o_C left
[17:24] *** astrojp joined
[17:24] *** am0c left
[17:26] *** wasy joined
[17:27] *** rajeshsr joined
[17:43] *** obra joined
[17:53] *** xabbu42 left
[17:54] <PerlJam> moritz_: you're releasing (have released) a copy of the book today?

[17:58] <slavik> what book?

[17:58] <slavik> where can I buy it?

[17:59] <spinclad> right here at http://github.com

[17:59] <moritz_> PerlJam: yes

[17:59] <moritz_> slavik: you can't, not yet

[18:00] *** wolf2k_ubuntu joined
[18:00] <slavik> moritz_: what's it about?

[18:00] <moritz_> slavik: Perl 6

[18:00] <slavik> :D

[18:00] <slavik> I want it

[18:00] <slavik> where is it?

[18:00] <moritz_> http://github.com/perl6/book/

[18:01] <moritz_> there's an (unpolished) PDF version on the download page

[18:03] <slavik> moritz_: if I stalk you long enough, will you sign it? :)

[18:04] <PerlJam> slavik: the other authoers might be hurt if you didn't stalk them too :)

[18:04] <moritz_> slavik: a single meeting in meat space will be enough :-)

[18:04] <PerlJam> s/oe/o/

[18:04] <slavik> ;)

[18:04] <moritz_> anyway, the plan is still to release around the same time as Rakudo *

[18:07] <PerlJam> SDL and parrot are getting lots of love from the gsoc, but perl 6 only a little love  :(

[18:07] <slavik> rakudo what version?

[18:08] <PerlJam> slavik: Whatever version ships with Rakudo Star

[18:08] <slavik> oh

[18:08] <jnthn> Might not even map to an actual Rakudo release either, fwiw.

[18:08] <jnthn> Though really should run on a particular Parrot monthly.

[18:09] <PerlJam> jnthn: in that case, I think perhaps a "special release" might be in order :)

[18:10] <jnthn> We'll see what happens. :-)

[18:14] *** rbaumer joined
[18:14] <PerlJam> Grr.   I see that mst and alester are still fencing  :(

[18:14] <IllvilJa> PerlJam: Where?

[18:14] <PerlJam> twitter

[18:15] <IllvilJa> Oh.  Then I'm safe ;-).  I'm 'deaf' to tweets.

[18:15] <obra> mst reports that he's stopped ;)

[18:17] *** zamolxes joined
[18:17] <[particle]> second-hand tweets are as bad for you as second-hand smoke

[18:20] <colomon> "_bsr At Hands On with Perl 6 using the rakudo compiler, taught by Damian Conway. Great stuff happening."

[18:20] <colomon> speaking of second-hand tweets.

[18:20] <colomon> :)

[18:20] <colomon> that's 20 minutes ago.

[18:21] *** rba_ joined
[18:23] *** rba_ left
[18:24] *** rbaumer left
[18:27] *** hercynium joined
[18:34] <moritz_> phenny: ask masak where he installed pdflatex from, CokeBot9000++ wants to know

[18:34] <phenny> moritz_: I'll pass that on when masak is around.

[18:38] *** M_o_C joined
[18:38] *** levengli joined
[18:44] <alester> PerlJam: I think your assessment that " mst and alester are still fencing " is inaccurate. 

[18:53] *** ShaneC joined
[18:53] *** ShaneC left
[18:56] <moritz_> std: $!{ { } }

[18:56] <p6eval> std 30329: OUTPUT«===SORRY!===␤Unsupported use of $!{ { } variable; in Perl 6 please use smart match against $! at /tmp/NDRiyrTed6 line 1:␤------> $!{ { }⏏ }␤FAILED 00:01 108m␤»

[18:56] <moritz_> hah, LTA error message from STD (notice the wrongly nested brackets) :-)

[18:58] <moritz_> but that's cheating, I know :-)

[18:58] <TimToady> given what the p5 idiom is, yes. :)

[18:59] *** szabgab joined
[19:04] *** rajeshsr left
[19:08] *** molaf left
[19:09] <bkeeler> G'mornin #p6

[19:09] <jnthn> o/ bkeeler 

[19:14] *** nihiliad left
[19:14] *** nihiliad joined
[19:24] * moritz_ takes a shot at special variables deprecation warnings

[19:25] <jnthn> moritz_++

[19:25] <colomon> \o/

[19:26] <moritz_> it's mostly just copy&paste from STD.pm

[19:26] <jnthn> :-)

[19:26] <moritz_> and removing those :: about which NQP-rx complains

[19:27] *** M_o_C left
[19:27] <moritz_> $ git diff | wc -l

[19:27] <moritz_> 209

[19:28] <moritz_> std: $@

[19:28] <p6eval> std 30329: OUTPUT«===SORRY!===␤Unsupported use of $@ variable as eval error; in Perl 6 please use $! at /tmp/XVoRrgT6FF line 1:␤------> $@⏏<EOL>␤FAILED 00:01 108m␤»

[19:36] <colomon> jnthn: ping?

[19:36] <moritz_> ok, got my patch ready, waiting for spectest to finish

[19:38] <moritz_> rakudo: for (1..3)->$n {say $n}

[19:38] <p6eval> rakudo 4e1dd4: OUTPUT«1␤2␤3␤»

[19:39] *** Guest60947 left
[19:40] <moritz_> std: for (1..3)->$n {say $n}

[19:40] <p6eval> std 30329: OUTPUT«===SORRY!===␤Unsupported use of -> as postfix; in Perl 6 please use either . to call a method, or whitespace to delimit a pointy block at /tmp/xkCY23e7MW line 1:␤------> for (1..3)->⏏$n {say $n}␤FAILED 00:01 107m␤»

[19:42] *** riffraff left
[19:42] <moritz_> ah; the title of RT #65212 is wrong

[19:43] <moritz_> STD.pm expects <ws> before the '->' in a for statement, Rakudo doesn't

[19:43] <moritz_> rakudo: say ')->' ~~ / ')' <.ws> '->'/

[19:43] <p6eval> rakudo 4e1dd4: OUTPUT«)->␤»

[19:43] <moritz_> a <ws> matches the empty string between two non-identifier characters

[19:44] *** bluescreen joined
[19:44] *** bluescreen is now known as Guest91883

[19:44] <TimToady> LTM goof, perhaps.  STD never lets a token cross <.ws>

[19:45] <moritz_> so, should it be allowed with whitespace?

[19:45] <TimToady> with whitespace it's not a postfix

[19:45] <moritz_> *without

[19:45] *** Guest91883 left
[19:46] <TimToady> without whitespace, the expression parser should have picked it up as a postfix before for's -> ever gets a shot at it

[19:46] <moritz_> ok

[19:46] <moritz_> so STD.pm is correct

[19:46] <TimToady> I very nearly said, "Of course."  :)

[19:46] <moritz_> :-)

[19:50] <dalek> rakudo: 5094077 | moritz++ | src/Perl6/Grammar.pm:

[19:50] <dalek> rakudo: port most "Unsupported use of $weird variable" from STD.pm.

[19:50] <dalek> rakudo: TimToady++ for coming up with them in the first place

[19:50] <dalek> rakudo: I'm not yet convinced they all work (for example I couldn't trigger the one

[19:50] <dalek> rakudo: for $@, although the regex seems pretty obvious), but all in all it looks like

[19:50] <dalek> rakudo: a net win.

[19:50] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/5094077aeddbbce19902fbcc3b63bbefedd18650

[19:53] *** xabbu42 joined
[19:57] <levengli> how does one read STD.pm?

[19:57] <moritz_> one line at a time

[19:57] <moritz_> .oO( grammar patches work better if spell "postfix" correctly )

[19:58] <levengli> i'll rephrase, in what language is it eritten?

[19:58] <levengli> written

[19:58] <moritz_> in Perl 6

[19:59] <moritz_> S05 is of special interest :-)

[20:00] *** mariano__ joined
[20:01] <levengli> you're killing me :)

[20:05] <moritz_> I admit it's quite a tough read

[20:05] <moritz_> and i'm far from understanding it all

[20:05] <moritz_> std: say 1 << 2

[20:05] <p6eval> std 30329: OUTPUT«===SORRY!===␤Unsupported use of << to do left shift; in Perl 6 please use +< or ~< at /tmp/khpNxjPw3r line 1:␤------> say 1 << ⏏2␤FAILED 00:01 108m␤»

[20:06] <moritz_> TimToady: why is there still a <O(|%multiplicative)> behind the <.obs()> in infix:«<<»?

[20:06] *** nick joined
[20:06] <moritz_> (line 3610)

[20:07] *** clintongormley left
[20:08] *** colomon left
[20:08] *** meppl left
[20:08] <TimToady> it's just there for old time's sake, but it's unreached code really

[20:08] <moritz_> ok

[20:09] *** TiMBuS joined
[20:09] <moritz_> should auld acquaintance be forgot...

[20:09] *** clintongormley joined
[20:10] <nick> has anyone made a deb packet for ilbot?

[20:11] <moritz_> nick: nope; it hardcodes too many paths right now; it would need a proper installer first

[20:11] <nick> i've been trying to install it on ubuntu at the moment. so many dependicies :)

[20:12] <moritz_> aye, that too

[20:12] <moritz_> when I wrote I really only thought of logging this channel here

[20:13] *** levengli left
[20:13] *** meppl joined
[20:19] *** hercynium left
[20:21] <frettled> alester: Haha, I forwarded the link to Bobby Tables, and got the question: why aren't C and Lisp mentioned?  Answer from someone else: because C-coders and Lisp-coders hardly need those examples.  ;)

[20:21] <alester> I need to put that question up

[20:21] <alester> "

[20:21] <alester> W

[20:21] <alester> y

[20:21] <alester> "Why isn't language X here?"

[20:21] <frettled> "Answer: because you're a lazy bum and haven't provided a decent example yet."

[20:22] <frettled> You might want to find a more diplomatic way of phrasing that.

[20:22] <frettled> You don't want to be accidentally confused with mst, after all.  ;)

[20:24] <moritz_> "Answer: because our resources are limited. You can help out by providing an example on your own, which you please sent to $email_address"

[20:24] <frettled> "Please send spam to $other_email_address."

[20:24] *** nick left
[20:25] * frettled falls over.

[20:25] <frettled> I'm on Planet Perl 6!  Something happenedededed!

[20:26] <frettled> If I only had something worth posting…  Perhaps after a good night's sleep.  :)

[20:27] <moritz_> (two more <.obs()> commits coming up if spectest run is successful)

[20:30] <moritz_> rakudo: use Test; plan 1; isa_ok(1|2, Junction);

[20:30] <p6eval> rakudo 509407: OUTPUT«1..1␤Null PMC access in get_iter()␤current instr.: '!DISPATCH_JUNCTION_CORE' pc 16360 (src/builtins/Signature.pir:151)␤»

[20:31] <jnthn> rakudo: say 1|2 ~~ Junction

[20:31] <p6eval> rakudo 509407: OUTPUT«1␤»

[20:31] <jnthn> rakudo: say (1|2).isa(Junction)

[20:31] <p6eval> rakudo 509407: OUTPUT«any(0)␤»

[20:31] <jnthn> heh, isa auto-threads...

[20:32] <spinclad> so does isa_ok, looks like

[20:32] <jnthn> Yeah, though I've no idea why it should then blow up like that.

[20:33] <moritz_> rakudo: say (1|2).^isa(Junction)

[20:33] <p6eval> rakudo 509407: OUTPUT«1␤»

[20:37] *** payload joined
[20:41] <pugssvn> r30330 | moritz++ | [t/spec] unfudge test for RT #65212, for (list)-> $sig { ... } should die without whitespace before -> 

[20:41] <frettled> rakudo: say 1 ~~ Junction

[20:41] <p6eval> rakudo 509407: OUTPUT«0␤»

[20:42] <dalek> rakudo: e54dc62 | moritz++ | src/Perl6/Grammar.pm:

[20:42] <dalek> rakudo: detect obsolete use of -> as postfix; fixes RT #65212

[20:42] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/e54dc62b90a281b1223243dd64f4f77456aaf969

[20:42] <dalek> rakudo: b75b2b3 | moritz++ | src/Perl6/Grammar.pm:

[20:42] <dalek> rakudo: catch infix << and >> as obsolete bit shift operators

[20:42] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/b75b2b30a3cd75ce37dc43e9d5f0627fd580df46

[20:44] *** hercynium joined
[20:45] * moritz_ has submitted a bug to debian about an LTA error message :-)

[20:45] <moritz_> $ sudo route del foo

[20:45] <moritz_> SIOCDELRT: No such process

[20:46] <moritz_> it's one I've been hating for quite some time

[20:46] <moritz_> but never really thought of submitting before being exposed to the Perl 6 culture of wanting good error messages :-)

[20:47] <moritz_> anyway, enough LHF rakudo hacking for today, some sleep is appropriate

[20:47] <jnthn> moritz_++ :-)

[20:47] <jnthn> night o/

[20:57] *** nihiliad left
[20:57] *** nihiliad joined
[20:58] *** Chillance joined
[21:08] *** ignacio_ left
[21:12] *** ruoso left
[21:17] *** lichtkind joined
[21:17] <lichtkind> why is object type Str immutable?

[21:18] <spinclad> same reason numbers are, they are value types, i would think

[21:19] <spinclad> parrot is currently seeing some benefits to making their strings immutable

[21:20] <lichtkind> spinclad: yeah but that calue could change no?

[21:20] <jnthn> lichtkind: How so?

[21:20] <spinclad> 'changing' a value produces a new value

[21:21] *** tri1 joined
[21:21] <spinclad> $a++ doesn't change any numbers, it puts a new number in the $a container.

[21:21] <spinclad> likewise for $a ~= 'more string'

[21:22] <lichtkind> spinclad: ah thanks i now get it but i think ~= is no longer on p6

[21:23] <spinclad> yes, ~ is concat, ~= is its op= form

[21:23] *** arnsholt left
[21:23] <spinclad> note: this is a functionalist point of view i have, here

[21:25] <lichtkind> spinclad: i now understand why scalar is mutable type

[21:25] <spinclad> excellent

[21:25] *** bkeeler left
[21:29] *** wknight8111 joined
[21:31] *** bkeeler joined
[21:31] *** bkeeler is now known as bkeeler_

[21:32] <lichtkind> spinclad: are all types defined my classes or some even by roles?

[21:34] <jnthn> There are some roles too.

[21:35] <jnthn> Iterator and Failure should be roles, I think.

[21:36] <lichtkind> jnthn: thanks

[21:37] *** quietfanatic joined
[21:41] *** nihiliad left
[21:41] *** nihiliad joined
[21:42] * lichtkind added the other 2 sigiles and som more linking and first object types

[21:43] *** justatheory left
[21:46] *** justatheory joined
[21:50] *** nihiliad left
[21:50] *** quietfanatic left
[21:52] *** nihiliad joined
[21:53] <aesop> lol put that shit o  shit on klulz

[21:55] <diakopter> ?

[21:57] *** mariano__ left
[21:58] *** Su-Shee left
[22:12] *** colomon joined
[22:18] <spinclad> i think someone mistook their ircpane for a phone

[22:26] <jnthn> colomon: oh hai 

[22:26] <jnthn> colomon: Is the roles + multi methods stuff your Top Priority Thingy for me to take a look at?

[22:37] *** clintongormley left
[22:42] *** tri1 left
[22:45] *** nihiliad left
[22:51] *** envi^home joined
[22:54] *** rgrau` left
[22:54] *** meppl left
[23:04] <lue> o hai dere

[23:04] <phenny> lue: 09:02Z <masak> tell lue "Some of the hardest work [in lnaguage design] isn't making the changes, it's getting them past the maintainers or an ensuing bikeshedding discussion that goes nowhere."

[23:05] *** Chillance left
[23:07] <lue> "C<S32> has always been volatile for these reasons; C<S32::Temporal> doubly so." heh heh

[23:08] <pugssvn> r30331 | lwall++ | [STD] better message on $!{} just for moritz_++ 

[23:08] *** xabbu42 left
[23:17] *** envi^home left
[23:18] <lue> masak: and I should always remember: "Everybody wants the colon". :)

[23:18] * jnthn would like to keep his colon to himself.

[23:21] *** fridim joined
[23:22] <lue> There is a corollary, involving smileys...

[23:25] *** Limbic_Region joined
[23:31] *** lichtkind left
[23:35] *** ruoso joined
[23:48] *** ruoso left
[23:48] * jnthn -> sleep

[23:48] *** ruoso joined
[23:49] *** lichtkind joined
[23:49] <lue> good night, jnthn o/

[23:49] <lichtkind> good night

[23:51] <lue> lichtkind: are you going to bed, or seeing jnthn off? (In case you are going to bed, goodnight o/)

[23:52] <lichtkind> lue: no i thought you were waving jnthn goodnight

[23:52] <lichtkind> i reconnected recently and didnt see 

[23:55] <lue> I was :)

[23:55] *** Limbic_Region left
[23:59] <lichtkind> i was chatting with jnthn before forced disconnect

