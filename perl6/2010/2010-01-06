[00:03] <sjohnson> no worries

[00:15] *** rodi left
[00:26] *** ash_ left
[00:27] *** _eMaX_1 joined
[00:32] *** _eMaX_1 left
[00:32] *** alester left
[00:34] *** nihiliad left
[00:36] *** xinming_ joined
[00:41] *** xinming left
[00:43] *** payload left
[00:50] *** PacoLinux joined
[00:51] *** colomon__ joined
[00:59] *** rgrau` left
[01:02] *** rgrau` joined
[01:03] *** payload joined
[01:03] *** ashizawa joined
[01:06] *** lest_away is now known as lestrrat

[01:07] *** dbrock joined
[01:15] *** cdarroch left
[01:25] *** lichtkind_ joined
[01:32] *** ShaneC left
[01:39] *** buu left
[01:40] *** buubot left
[01:43] *** lichtkind left
[01:44] *** rachelBROWN left
[01:46] *** eternaleye joined
[01:46] *** eternaleye left
[01:47] *** eternaleye joined
[01:57] *** priodev joined
[01:59] *** rachelBROWN joined
[02:03] *** priodev left
[02:07] *** dbrock left
[02:10] *** lichtkind_ left
[02:37] *** agentzh joined
[02:45] *** Alias left
[02:49] *** cognominal left
[02:49] *** cognominal joined
[02:51] *** eternaleye left
[03:01] *** patspam joined
[03:10] *** dbrock joined
[03:10] *** Exodist joined
[03:20] *** galf joined
[03:22] *** agentzh left
[03:22] *** agentzh joined
[03:47] *** am0c left
[03:57] *** nihiliad joined
[04:04] <diakopter> hi

[04:06] <sjohnson> diakopter! hi

[04:06] <sjohnson> how's it going

[04:18] <diakopter> ok

[04:19] *** pdcawley_ joined
[04:21] *** jaldhar joined
[04:25] <sjohnson> cool

[04:26] *** jaldhar left
[04:28] *** jaldhar joined
[04:31] *** pdcawley left
[04:31] *** pdcawley_ is now known as pdcawley

[04:55] *** soupdragon joined
[05:10] <pugs_svn> r29472 | diakopter++ | [sprixel] an optimization for gplus. instead of behaving O(n**5), now it's O(n**2.5).  :| 

[05:31] *** icey joined
[05:39] *** meppl joined
[06:29] *** dduncan left
[06:35] <pugs_svn> r29473 | diakopter++ | [sprixel] improved correctness and complexity/efficiency drastically. memoization of failed offsets when backtracking. implemented in plus. unclear whether it should be implemented in either.  should go quadratic only on the same classes of patterns Perl 5 does, now... 

[06:36] *** JimmyZ joined
[06:39] *** nihiliad left
[06:39] *** JimmyZ left
[06:53] *** cognominal left
[07:00] *** justatheory left
[07:03] *** synth joined
[07:03] *** synth left
[07:04] *** kaare joined
[07:05] *** kaare is now known as Guest7435

[07:16] *** Su-Shee joined
[07:16] <Su-Shee> good morning

[07:19] <szbalint> good morning

[07:31] *** brrant joined
[07:36] *** pdcawley left
[07:42] *** Nerella joined
[07:43] *** Nerella left
[07:46] *** mberends joined
[07:46] *** colomon__ left
[07:47] <mberends> good morning from a classroom via webchat

[07:48] <soupdragon> :)

[07:48] *** Baggiokwok joined
[07:55] *** Chillance left
[08:00] *** iblechbot joined
[08:04] *** ashizawa left
[08:07] *** payload left
[08:16] <mathw> o/

[08:18] *** payload joined
[08:19] *** rachelBROWN left
[08:29] *** nbrown left
[08:30] *** payload left
[08:31] *** payload joined
[08:33] *** Baggiokwok left
[08:35] *** xenoterracide left
[08:35] *** rjh left
[08:35] *** Guest72143 left
[08:35] *** xenoterracide joined
[08:37] *** payload left
[08:39] *** cotto left
[08:52] *** jaslts joined
[08:52] *** jaslts left
[08:53] <sjohnson> hi mathw 

[08:53] <mathw> o/ sjohnson 

[08:54] <sjohnson> long time no chat :)

[08:59] <mathw> indeed

[09:13] *** eternaleye joined
[09:16] *** meneldor joined
[09:18] *** nadim joined
[09:22] *** eternaleye left
[09:38] *** iblechbot left
[09:53] *** saschi joined
[09:54] <saschi> hello

[10:02] *** ruoso joined
[10:08] *** squ joined
[10:10] <sjohnson> hi saschi 

[10:15] *** payload joined
[10:16] *** cognominal joined
[10:22] <sjohnson> snuh!

[10:22] <saschi> snuh?

[10:22] <saschi> snow! ^-^

[10:23] *** dakkar joined
[10:29] *** yath joined
[10:29] <yath> heya

[10:39] <squ> hola

[10:40] *** payload left
[10:46] *** riffraff joined
[10:47] <BcaT> !cucumber

[10:47] <BcaT> !ping

[10:47] <partisan> Pong!

[10:47] <BcaT> !banana

[10:47] <squ> what perl6 makes with people

[10:48] <BcaT> !trout

[10:48] <squ> they become hungry

[10:48] <BcaT> !rubia?

[10:48] *** cognominal left
[10:48] <BcaT> only rubia and tilapia are any good when it comes to fish

[10:49] <BcaT> but lobster and crab and prawns are a different story

[10:49] <squ> crabs which you gathered yourself are twice more delicious

[10:51] <squ> you have to go diving, then get beer

[10:51] *** mariuz joined
[10:51] <BcaT> i can only do 1 of 3 things in that situation - drink beer

[10:51] <BcaT> i cant dive or cook

[10:52] *** mariuz is now known as asdasdasd1

[10:52] *** asdasdasd1 is now known as mariuz

[10:56] <squ> just put them in water

[10:57] *** mariuz left
[10:57] <squ> == cook

[10:58] *** patspam left
[11:01] <saschi> O_o

[11:04] *** cognominal joined
[11:05] *** agentzh left
[11:06] <BcaT> boiling crabs to death is too much for me

[11:06] <BcaT> they look so sad and innocent

[11:06] <BcaT> and plus they're funny to watch

[11:10] *** nbrown joined
[11:18] <sjohnson> BcaT: you like crabs?  http://www.youtube.com/watch?v=DjaTLyRcpMM

[11:22] <saschi> that's odd

[11:22] *** stepnem left
[11:25] <sjohnson> crabland == odd :)

[11:25] *** colomon joined
[11:27] *** ruoso left
[11:32] *** bluescreen joined
[11:32] *** payload joined
[11:35] *** BcaT left
[11:35] <squ> BcaT, thats hardest part, true

[11:35] <squ> :-)

[11:42] *** stepnem joined
[11:48] *** cotto joined
[11:49] *** bluescreen left
[11:53] *** Simulacron joined
[11:56] *** Simulacron left
[11:59] *** Baggiokwok joined
[12:00] *** iblechbot joined
[12:03] *** _Jedai_ joined
[12:18] *** |Jedai| left
[12:18] *** bluescreen joined
[12:20] *** ruoso joined
[12:21] *** bluescreen left
[12:22] *** SmokeMachine joined
[12:23] *** galf left
[12:32] *** fridim_ joined
[12:35] *** barney joined
[12:35] *** bluescreen joined
[12:35] *** Baggiokwok left
[12:39] *** gabiruh_ is now known as gabiruh

[12:44] <colomon> rakudo: say slurp;

[12:44] <p6eval> rakudo 3867ff: too few positional arguments: 0 passed, 1 (or more) expected␤in Main (file <unknown>, line <unknown>)␤

[12:45] <colomon> rakudo: say slurp($*ARGFILES)

[12:46] <p6eval> rakudo 3867ff: Contextual $*ARGFILES not found␤Unable to open filehandle from path ''␤in Main (file <unknown>, line <unknown>)␤

[12:59] *** bbkr joined
[13:00] *** arthur-_ left
[13:00] *** Baggiokwok joined
[13:01] *** arthur-_ joined
[13:02] <bbkr> hi. i'm in parrot_install/lib/1.9.0-devel/library (december release or rakudo) and when i do perl6 -e 'use MIME::Base64; say MIME::Base64::encode_base64("test");' i get invoke() not implemented in class 'Undef' error. should .pbc code be included/called in some special way?

[13:06] *** tuxdna joined
[13:20] *** am0c joined
[13:24] *** vorner joined
[13:31] *** bbkr left
[13:33] *** payload left
[13:57] *** tuxdna left
[13:57] *** pmurias joined
[14:00] *** snearch joined
[14:00] *** takadonet joined
[14:01] <takadonet> morning all

[14:02] *** riffraff left
[14:03] *** riffraff joined
[14:06] *** plainhao joined
[14:10] *** eric256 joined
[14:12] *** colomon left
[14:13] <eric256> the whole negative arguments to substr don't seem to be documented in S32/Str..should i be looking somewhere else?

[14:14] <PerlJam> eric256: the perl5 docs.

[14:15] <eric256> thanks

[14:15] <eric256> wouldn't have thought to look there. lol

[14:15] <eric256> looks like anything outside the string should return undef and a warning...that should be easy enough to fix

[14:16] <PerlJam> eric256: S01 says "Another assumption has been that if we don't talk about something in these

[14:16] <PerlJam> Synopses, it's the same as it is in Perl 5"

[14:16] <PerlJam> so, if you can't find something in the spec, look in the Perl 5 docs for guidance

[14:16] <eric256> okay, thanks

[14:17] *** soupdragon left
[14:21] <eric256> okay....so if the documentation for perl5 says one thing, but it actual does another, should we match the documentation or the implementation? hehe

[14:21] <eric256> substr("Hello",10,2) should return undef and a warning but i can't seem to get it to through a warning

[14:23] <eric256> oh ignore me

[14:23] <eric256> lol

[14:31] <pmurias> PerlJam: shouldn't we try to make the synopsis complete enought to remove the dependency on p5 docs?

[14:37] *** mj41_ joined
[14:40] *** renormalist joined
[14:46] *** payload joined
[14:46] *** mj41 left
[14:48] <PerlJam> pmurias: yes.

[14:49] <PerlJam> eric256: if the docs and the implemenation conflict and there's no clear indication of which way to go, then we should discuss it here or on p6l

[14:49] <PerlJam> s/mena/menta/

[14:53] *** icey left
[15:00] *** cognominal left
[15:00] *** Exodist left
[15:06] *** pmurias left
[15:08] *** Guest7435 left
[15:18] *** justatheory joined
[15:19] *** payload left
[15:20] *** snearch left
[15:24] *** nihiliad joined
[15:26] *** SmokeMachine left
[15:26] *** FCO joined
[15:28] *** pmurias joined
[15:29] *** ash_ joined
[15:33] *** cbk left
[15:40] *** payload joined
[15:49] *** KyleHa joined
[15:52] *** Psyche^ joined
[16:04] *** Patterner left
[16:04] *** Psyche^ is now known as Patterner

[16:08] *** cognominal joined
[16:18] *** FCO left
[16:23] *** douglashunter left
[16:24] *** SmokeMachine joined
[16:26] *** payload left
[16:31] *** mberends left
[16:34] *** rachelBROWN joined
[16:42] *** Baggiokwok left
[16:52] *** KyleHa left
[16:57] *** kaare_ joined
[16:59] *** meneldor left
[17:04] *** cdarroch joined
[17:05] <eric256> how can i throw warnings from inside of src/core?

[17:06] *** krunen left
[17:06] *** pmurias left
[17:10] <ash_> rakudo: warn("this is a warning"); 

[17:10] <p6eval> rakudo 3867ff: this is a warning␤

[17:10] <takadonet> rakudo: warn("Takadonet needs beer")

[17:10] <p6eval> rakudo 3867ff: Takadonet needs beer␤

[17:11] <eric256> yea, but when i use that in core/Any-str.pm i get Could not find non-existent sub &warn

[17:11] <ash_> its only 11 am here, its a bit to early for me to have beer, well... realtively speaking 

[17:11] <eric256> rakudo: warn "this is a warning"

[17:11] <ash_> ah that means its not yet defined 

[17:11] <p6eval> rakudo 3867ff: this is a warning␤

[17:11] <ash_> umm 

[17:12] <eric256> yea, so i don't know how to warn from in there....

[17:12] <eric256> shouldn't warn be defined pretty early? lol

[17:13] <eric256> my other problem is trying to defined with (Str $string:  doesn't seem to work....when i do that it says it can't find the right definition of substr, some sort of dispatch issue i think...or me being stupid

[17:13] <eric256> lol

[17:14] <ash_> are you in ng? 

[17:14] <ash_> ng doesn't have warn currently

[17:15] <ash_> ng: warn("shouldn't work");

[17:15] <p6eval> ng 93fa57: Could not find non-existent sub &warn␤current instr.: '_block14' pc 29 (EVAL_1:0)␤

[17:15] <eric256> lol ahhh

[17:15] *** jan_ left
[17:15] <eric256> yes i'm in ng, sorry didn't realize that it was missing that

[17:16] *** aindilis` joined
[17:16] *** aindilis left
[17:16] *** justatheory left
[17:17] * eric256 wishes there was a way to fudge + run the fudged file all at once

[17:18] *** riffraff left
[17:29] *** barney left
[17:29] *** colomon___ joined
[17:31] <colomon___> eric256: The Str $string: argument thing doesn't work yet in Rakudo, as far as I know.

[17:32] <ash_> are you doing an indirect call? 

[17:34] <ash_> and, in ng in src/builtin/control.pir they define die, warn is setup the same way but you use a different severity, it doesn't seem hard to implement 

[17:35] <ash_> you could compare that to the old die which is in src/old/builtins-old/control.pir (i don't think this has changed much) 

[17:35] *** jaldhar left
[17:37] <eric256> ahh i thought it was done already

[17:37] <eric256> i'll check ash

[17:38] <eric256> i'll just fudge a few more of the subs that want to use the named args version

[17:38] <Tene> I'll get &warn in, 'sec

[17:39] <Tene> warn and die should be setting dynamic lexicals, not globals...

[17:39] <Tene> That's part of a bigger refactor, though.

[17:41] <eric256> that bit goes over my head

[17:41] <eric256> lol

[17:42] <Tene> warn is pushed.

[17:43] <squ> perl6: printf "%0.4194310f", 0x0.0x41414141;

[17:43] <p6eval> pugs: *** ␤    Unexpected "0x41414141"␤    expecting ".", "\187", ">>", "=", "^", operator name, qualified identifier, variable name, "...", "--", "++", "i", array subscript, hash subscript or code subscript␤    at /tmp/IOVdSHNyus line 1, column 27␤

[17:43] <p6eval> ..rakudo 3867ff: Confused at line 2, near ".0x4141414"␤in Main (file <unknown>, line <unknown>)␤

[17:43] <p6eval> ..elf 29473: Parse error in: /tmp/SmLZRFq49n␤panic at line 1 column 0 (pos 0): Can't understand next input--giving up␤WHERE: printf "%0.4194310f", 0x0.0x41␤WHERE:/\<-- HERE␤  STD_red/prelude.rb:99:in `panic'␤  STD_red/std.rb:76:in `scan_unitstopper'␤  STD_red/std.rb:224:in `comp_unit'␤ 

[17:43] <p6eval> ..STD_red/std.rb…

[17:45] <ash_> Tene++ thanks for the warn push 

[17:45] <ash_> eric256: you now have warn if you want to use it in ng

[17:45] <eric256> thanks..pulling and making now

[17:45] <eric256> ng:warn("test")

[17:46] <dalek> rakudo/ng: 3f06c7e | tene++ | src/builtins/control.pir:

[17:46] <dalek> rakudo/ng: Add &warn

[17:46] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/3f06c7ec4eebcbe12f15ce4d3b250e4db4189901

[17:46] <eric256> ng: warn('test')

[17:46] <p6eval> ng 93fa57: sh: ./perl6: No such file or directory␤

[17:46] <Tene> apparently it's rebuilding now.

[17:46] <eric256> slow

[17:46] <eric256> lol

[17:47] *** justatheory joined
[17:47] <ash_> ng: warn('test?'); # rdy yet? 

[17:47] <p6eval> ng 93fa57: sh: ./perl6: No such file or directory␤

[17:47] <ash_> nope

[17:48] <TimToady> std: printf "%0.4194310f", 0x0.0x41414141;

[17:48] <p6eval> std 29473: ===SORRY!===␤Confused at /tmp/b4snQ40i8K line 1:␤------> printf "%0.4194310f", 0x0.⏏0x41414141;␤    expecting any of:␤  integer␤  postfix_prefix_meta_operator␤FAILED 00:01 109m␤

[17:50] <ash_> on osx in perl 5.10.1 that instantly seg faults 

[17:52] *** stephenlb joined
[17:52] <fridim_> Hi, I read that rakudo is well integrated in the fedora distribution, that's great !

[17:54] <Tene> It's available to install as part of the standard repository in Fedora, yes.

[17:55] <eric256>  do we realy need a "test".flip function? seems silly

[17:55] *** dakkar left
[17:55] <eric256> and why isn't it .reverse?

[17:56] <PerlJam> eric256: reverse is for lists

[17:56] <PerlJam> eric256: and yes, we need flip

[17:56] <colomon___> And it's not like implementing flip was hard work...

[17:57] <TimToady> don't want to accidentally flip the characters when the list happens to contain one element

[17:57] <colomon___> (Well, I did have to write reverse first to get flip working in ng, as I recall.)

[17:57] <TimToady> in general, any time Perl 5 overloaded an operator for two different purposes, Perl 6 has two different operators

[17:58] *** slavik left
[17:58] <TimToady> for instance, perl 5's scalar .. is now ff

[17:58] <TimToady> and we differentiate x from xx now

[17:59] <eric256> i'm just wondering how many times people reverse a string

[17:59] <PerlJam> eric256: you mean flip  :)

[18:00] <TimToady> makes it easy to do pattern matching from the end of the string, for one

[18:00] <eric256> lol i successfully made "make t/spec/S32-str/substr.t" hang

[18:00] <eric256> lol

[18:02] <TimToady> another consideration is that a hardwired .flip is likely to be faster than rolling your own (though currently it's probably equivalent)

[18:03] <TimToady> depends on how much support you get from the VM for it

[18:03] *** jackyf joined
[18:03] <TimToady> but mainly it's a matter of making people distinguish things that need distinguishing semantically

[18:04] *** slavik joined
[18:04] * ash_ out to lunch

[18:05] <TimToady> and we hope that learning a new name is less trouble than learning a new exception rule

[18:05] <TimToady> certainly it makes it easier to look up if it has its own name

[18:05] <TimToady> (admittedly, this can be taken to extremes; see PHP...)

[18:07] <eric256> there is an irony to getting multiple dispatch and then using different sub names for things that appear to be good candidates for multiple dispatch

[18:07] <PerlJam> eric256: reverse isn't one of those because of the semantic confusion it causes

[18:08] <PerlJam> (if it were to behave as in per l5)

[18:08] <PerlJam> er, s/ l/l /

[18:10] <TimToady> in short, we want Perl 6 to have different FAQs than Perl 5 did  :)

[18:10] <TimToady> we're tired of the old ones...

[18:12] <TimToady> but yes, there are many ironies like that in Perl 6.  we also make it possible to extend the language easily, and try to remove any desire to extend it by putting in most of what you need.

[18:13] <TimToady> we put in a MOP to have world-class single-dispatch OO, then hide most of it behind multi-dispatch so that the language gets to determine the semantics rather than the class.

[18:13] *** nihiliad left
[18:14] *** nihiliad joined
[18:15] <TimToady> we put in an intricate type system, and then let the user ignore it much of the time...

[18:17] <TimToady> and to top it all off, we're so full of ourselves that we're completely empty.  :)

[18:18] <TimToady> Contradictions "Я" Us

[18:18] <cognominal> I would expect     rule {  <a>+ }    being equivalent to   token { <a> ** <ws> } but 

[18:19] <cognominal> rakudo:  rule a { a+ }; say 'a a' ~~ m/ <a> /

[18:19] <p6eval> rakudo 3867ff: a ␤

[18:19] <diakopter> speaking of.. does type inference need to be spec'd any more than it is?

[18:19] <PerlJam> TimToady: is that the Unicode version of the R meta-op?  :)

[18:19] *** payload joined
[18:19] <PerlJam> Я seems more appropriate somehow

[18:19] <cognominal> well, it matches  'a' instead of 'a a'

[18:19] <TimToady> cognominal: your expectations of <a>+ are wrong

[18:19] *** nihiliad left
[18:20] <cognominal> I am not sure S05 is explicit about the expected behavior.

[18:20] <jnthn> <ws> is inserted where there's whitespace in the pattern.

[18:20] <phenny> jnthn: 30 Dec 23:27Z <mberends> tell jnthn welcome back

[18:20] <TimToady> a rule only matchs <ws> where there's whitespace in the rule

[18:20] <TimToady> now, [a ]+ would be a different matter

[18:21] <jnthn> 30 Dec? Heh. I musta created a little too much optimism about when I'd be back. :-)

[18:22] <TimToady> they didn't plant any explosives on you, did they?

[18:22] <jnthn> heh heh

[18:22] <PerlJam> cognominal: having a "deparse" option for regex would be useful to dispell you of your errant expectations.

[18:22] <jnthn> No, I didn't get caught up in that one :-)

[18:22] <jnthn> Just over in Sweden at the moment sorting various @stuff out.

[18:23] <jnthn> Heading back home at the weekend, and then things will return to a vague state of normalish.

[18:23] <cognominal> I should read S05 more carefully

[18:23] <jnthn> Found myself more tired and in need of a break than expected over Christmas / new year, so took lots of rest. :-)

[18:24] <TimToady> that's wise

[18:24] <TimToady> you'll get more done in the long run that way

[18:24] <jnthn> Aye.

[18:25] <jnthn> Anyway...time for me to fine something to eat and drink here.

[18:25] * TimToady ponders what a backwards X metaop would look like...

[18:26] * jnthn back later, for some definition of later :-)

[18:30] <cognominal> TimToady, if the  {*} #= stuff is slated to disappear, what will be the canonical way to support different action classes for a given grammar. Say for a beautifier versus a compiler.

[18:32] <TimToady> we still have per-parse action classes, and we still have actions for each complete rule

[18:32] <TimToady> in STD I discovered that the use of {*} almost always meant I should break a rule apart, if I really needed the action

[18:32] <TimToady> but mostly the action gets all the parts labelled well enough in any case without using {*}

[18:33] *** taesoo joined
[18:33] <TimToady> to the extent that the first thing viv did was throw away all the calls from {*}

[18:34] <TimToady> (except the implied one at the end of each rule)

[18:35] <TimToady> {*} #= was mostly a hack for bootstrapping, and it turns out we don't really need it very much, and it's cluttery looking

[18:35] <cognominal> What is the mechanism to route a method call to the right action-class ?

[18:35] <TimToady> the :action argument to .parse specifies it

[18:35] <TimToady> :actions rather

[18:36] <cognominal> ok, this pard does not change

[18:36] <cognominal> *part

[18:36] <colomon___> jnthn's back, \o/

[18:37] <TimToady> FSDO

[18:37] <cognominal> I am not sure how an action call looks like in the grammar. Is it a closure?

[18:38] *** uniejo joined
[18:39] <TimToady> well, you can actually see some in STD.pm in method EXPR

[18:39] <TimToady>                     push @termstack, $op._REDUCE($op<_from>, 'PREFIX');

[18:40] <cognominal> thx

[18:41] <TimToady> so you could insert <_REDUCE(self.pos, 'SoFar')> to get a similar effect in STD

[18:41] <TimToady> I don't think rakudo supports _REDUCE though

[18:42] <TimToady> the #= probably desugars to something else there

[18:42] <TimToady> and I don't know whether it's accessible from within the grammar

[18:43] <TimToady> but if so, you could probably write a _REDUCE method that calls it

[18:44] *** nihiliad joined
[18:44] *** snearch_ joined
[18:44] *** uniejo left
[18:44] <TimToady> again, though, that probably means you want to refactor into separate rules and get _REDUCE called automatically

[18:45] *** uniejo joined
[18:46] <PerlJam> TimToady: you know, I've written :action instead of :actions a couple of times myself (while coding) and been momentarily confused when it didn't work.  I wonder if that's going to be a common error.

[18:56] <cognominal> grammar A {  TOP { a } };    class A1::Actions {  method TOP { ... }  };  class A2::Actions {  method TOP { ... }  };   # suppose I want an action for TOP, I still don't understand  the wiring necessary to make it happen.

[18:57] *** slavik1 joined
[18:57] <cognominal> there is    parse( 'a', :action<A1::Actions)     but what I need in the TOP rule

[18:57] <cognominal> forgot the rule keyword btw.

[19:04] *** snearch_ left
[19:05] <PerlJam> cognominal: methods in the Actions class that have the same name as regex in the Grammar, get called at the end of the parsing of that particular regex

[19:06] <PerlJam> (if that's what you're asking)

[19:06] <colomon___> ooooo!

[19:06] <PerlJam> cognominal: also, if the regex has {*} in it, the same-named method in the actions class is called then.

[19:07] <PerlJam> (when the parse reaches the {*} token within the regex)

[19:08] <PerlJam> See S05:3781 or so.

[19:08] *** jan_ joined
[19:09] <cognominal> but the point of TimToady is the disappearance of the {*}. I am confused.

[19:09] <PerlJam> {*} turned out to not be as useful  (or as a hallmark of a necessary refactor), thus it's not really used much any more.

[19:12] <PerlJam> Yesterday or the day before pmichaud was talking about hooks for LEAVE, NEXT, LAST, REDO, etc. ...  I wonder if this implicit {*} and the end of the regex is a specialization of LEAVE or something.  Maybe it needs its own blast/blorst/whatever we're calling them these days.

[19:12] <PerlJam> oh, phaser

[19:12] <PerlJam> that's what I meant

[19:13] *** slavik left
[19:14] <PerlJam> Or even if the machinery that allows the same-named-method to be called should be exposed to the programmer so that  they can do things like choose another-named-method or set of methods to be called.

[19:16] <szbalint> jnthn: "How many Slovak policemen is needed to make a terrorist attack? Only two. One hides an explosive and the second fails to find it."

[19:17] <cognominal> context: http://www.cbc.ca/world/story/2010/01/06/slovak-explosives-mistake.html

[19:21] *** japhb left
[19:28] <Tene> cognominal: if <a>+ implied whitespace, it wouldn't be possible to say what <a>+ currently means any more, which is a net loss when [<a> ]+ or <a>**<ws> is so easy.

[19:28] <Tene> cognominal: spaces around ** are interpreted as <ws>, though, so you could say <a> ** {1..*}

[19:29] <Tene> iirc

[19:33] *** jferrero joined
[19:39] <cognominal> hum, curious what <a> ** *   would mean

[19:41] *** jonasbn joined
[19:44] *** zibri left
[19:45] *** ShaneC joined
[19:45] <PerlJam> cognominal: I would guess that would be an error because the whatever-* doesn't exist in regex

[19:46] <colomon___> Tene: wait, are you saying that if sigspace is turned on <a> ** whatever is <a> separated by whatever, and ignore whitespace in between them?

[19:47] *** zibri joined
[19:50] *** vorner left
[19:51] <TimToady> std: /<a> ** */

[19:51] <p6eval> std 29473: ===SORRY!===␤quantifier quantifies nothing at /tmp/mVdvzAKinf line 1:␤------> /<a> ** *⏏/␤    expecting quantmod␤FAILED 00:01 108m␤

[19:54] <PerlJam> colomon___: regardig C<**> ... "Space is allowed on either side of the complete quantifier.  This space is considered significant under C<:sigspace>, and will be distributed as a call to <.ws> between all the elements of the match but not on either end."  (S05:839)

[19:54] <colomon___> sweetness

[19:55] <PerlJam> though rakudo doesn't quite seem to work correctly.

[19:55] <colomon___> PerlJam: what else is new?  ;)

[19:56] <PerlJam> rakudo:  say "a,a,a,a" ~~ / 'a' ** ',' / ?? "yes" !! "no"

[19:56] <p6eval> rakudo 3867ff: yes␤

[19:56] <PerlJam> rakudo:  say "a,a,a,a" ~~ regex { 'a' ** ',' } ?? "yes" !! "no"

[19:56] <p6eval> rakudo 3867ff: yes␤

[19:56] <PerlJam> rakudo:  say "a  ,   a   ,   a   ,   a" ~~ regex { 'a' ** ',' } ?? "yes" !! "no"

[19:56] <p6eval> rakudo 3867ff: yes␤

[19:57] <PerlJam> rakudo:  say "a  ,   a   ,   a   ,   a" ~~ rule { 'a' ** ',' } ?? "yes" !! "no"

[19:57] <p6eval> rakudo 3867ff: yes␤

[19:57] <PerlJam> As long as you weren't looking for a false positive  ...  :)

[19:58] <cognominal> std:   say 1 ?? 2 :: 3  # curious to see if std protects me against that one

[19:58] <p6eval> std 29473: ===SORRY!===␤Please use !! rather than :: at /tmp/Kd0b7tahqj line 1:␤------> say 1 ?? 2 ⏏:: 3  # curious to see if std protects m␤    expecting any of:␤        bracketed infix␤  dotty␤  infix or meta-infix␤        infix stopper␤    postfix␤       

[19:58] <p6eval> ..standard stopper␤  terminator␤F…

[19:58] <cognominal> cool

[19:59] <eric256> is there anyway to fudge just a single test file?

[19:59] <PerlJam> run fudge on just that file?

[20:00] <TimToady> phone

[20:00] <eric256> i dunno how to do that though

[20:00] <ash_> eric256: look in t/spectest.data

[20:00] <ash_> thats how it knows which files to run 

[20:01] <ash_> if you want to add/remove a file from the fudge 

[20:01] <eric256> no i just want to fudge one...the fudging on this test file doesn't appear to be working right, so i need to keep rebuilding it

[20:01] *** justatheory left
[20:02] <ash_> fudge 1 test? 

[20:02] <eric256> one file

[20:03] *** PZt left
[20:04] <ash_> i think i am not understanding what your asking

[20:05] <eric256> i have a test file with fudge commands in it, they arn't all working, so i need to fudge the file and look at the output, rinse and repeat until the out put is correct

[20:06] <PerlJam> eric256: have you read t/spec/README ?

[20:07] <ash_> is it a file you wrote? the fudge command checks all the files listed in t/spectest.data and fudges the files listed in there 

[20:07] *** Lorn joined
[20:07] <ash_> after its fudged there will be a t/spec/S##/filename.rakudo instead of .t 

[20:08] <colomon___> eric256: make t/spec/S##/filename.t will make the .rakudo file and then run it.

[20:08] <eric256> right, and thats working, but its slow, i just wanted to fix this one, and i can't even seem to find fudge, and its an exeisting spec

[20:08] <eric256> colomon___:  in this case its not makeing the .rakudo file....thats kinda my problem.....mmm no errors either

[20:09] <colomon___> eric256: ooo, tricky.

[20:09] <PerlJam> eric256: t/spec/fudge

[20:09] <eric256> oh duh found fudge...thanks perljam... didn't expect progams in there cause i'm stupid

[20:19] *** elmex left
[20:20] *** ash_ left
[20:21] *** ash_ joined
[20:24] *** squ left
[20:24] *** zamolxes_ joined
[20:25] *** zamolxes left
[20:26] *** elmex joined
[20:31] *** bluescreen left
[20:37] *** bluescreen joined
[20:37] *** IllvilJa left
[20:43] <Tene> colomon___: depends on whether there's whitespace around the ** or not.

[20:44] <Tene> <digit> ** ',' # whitespace allowed

[20:44] <Tene> <digit>**',' # no whitespace allowed

[20:44] <Tene> is my memory

[20:44] *** mberends joined
[20:47] *** jackyf left
[20:48] <colomon___> Tene: right, and :sigspace.  PerlJam explained back up there a bit.  :)

[20:48] <colomon___> every new thing I learn about grammars makes me want to go \o/

[20:50] <cognominal> TimToady, btw, actions object should be probably  stackable:  Grammar.parse($str, :actions(  <A1 A2>.>>.new )

[20:50] <PerlJam> cognominal: What does that mean?

[20:52] *** KyleHa joined
[20:52] <cognominal> that would mean that one should call a method of A1 then a method of A2 when an action method is to be called

[20:52] <cognominal> s/one/the implementation/

[20:53] <PerlJam> cognominal: so when a regex foo in the grammar matches, the foo method of A1 should be called and then the foo method of A2?

[20:53] <PerlJam> cognominal: if so, why?

[20:55] <cognominal> because A2 foo may need info generated by A1 foo.

[20:55] <TimToady> if you need such semantics, just create an actions modules that delegates appropriately

[20:56] <TimToady> *module

[20:56] *** jackyf joined
[20:56] <cognominal> yes, I could do that too.

[20:56] <TimToady> you certainly shouldn't be relying on hyperops, whose order is officially undefined

[20:57] <TimToady> (though in this case the order is preserved by the time it gets into :actions())

[20:58] <TimToady> *postserved might be more accurate...

[20:58] *** jackyf left
[20:58] <TimToady> *curcumserved maybe...

[20:58] <TimToady> s/u/i/ #gah

[20:59] <cognominal> :)

[20:59] *** bbkr joined
[20:59] *** pjcj left
[21:00] <TimToady> anyway, if it's a common operation to combine A1 and A2 in a standard way, there should probably be a named combinator to generate a delegational class around them

[21:00] <cognominal> I note that when I learn something I am incapable to relate it to something I already know when it would be most useful.

[21:01] <TimToady> not just relying on the list to apply an implicit combinator

[21:01] <cognominal> grammar being classes, what I ask obviously fall in the realm of classes.

[21:01] <cognominal> *falls

[21:02] <TimToady> though in this case the action class isn't a grammar

[21:02] <cognominal> I should learn japanese instead being tripped with these stupid flexionnal languages.

[21:02] <cognominal> yes, but my mind was focused about grammars :)

[21:03] <TimToady> those Indo-Europeans have a lot to answer for...

[21:03] <cognominal> btw you should call given wa instead :)

[21:05] <frettled> We should have a "freeze" function in Perl 6.  It will "freeze" the specification and functionality for the programmer using it.  :D

[21:06] <mberends> frettled: the Linux command for that is 'ifconfig eth0 down'

[21:06] <TimToady> cognominal: it was considered :)

[21:07] <cognominal> I have a nice app called "human japanese" on my iPhone. It tought me a thing or two.

[21:08] <frettled> mberends: :)

[21:08] *** plainhao left
[21:08] <frettled> cognominal: thanks for the tip!

[21:11] *** uniejo left
[21:11] *** uniejo joined
[21:11] <cognominal> In France, they want to pass a law to prohibit phones in school. It makes sense because kids play with them instead of listening to the teacher, but app phones are the best pedagical tools I have ever seen and it can only get better.

[21:11] <frettled> cognominal: I see that it's English-based; how is the pronunciation presented?

[21:12] *** colomon___ left
[21:12] *** uniejo left
[21:12] *** colomon_ joined
[21:14] <cognominal> it is english based,  you click in a sentence to hear it.  It is very progressive. It starts with hiragana.

[21:15] <frettled> I was thinking about the romanization, which might lead to interesting pronunciation misconceptions.

[21:16] <cognominal> frettled, there is light version of it if you want to try it before buying.

[21:17] <cognominal> The author says he works on a more advanced version which will certainly be reday by the time I finish the present one.

[21:17] <ash_> it would be kinda cool if more schools did something different like having app's to teach

[21:17] <frettled> cognominal: Yep, I started downloading it, but it seems to take a while, even over wifi.  :)

[21:17] <ash_> in one of my software engineering electives next semester we are making andriod phone apps, so maybe i can try doing something like that

[21:17] <ash_> it can teach perl 6 :-D 

[21:18] <frettled> \o/

[21:18] <ash_> hmmm wonder if i could get parrot running on the andriod... 

[21:18] <cognominal> I think pupil would be more mature if they could learn by themselves using such device and the teacher would have more time to interact with pupils.

[21:20] <xalbo> The problem is that if the pupils are not more mature, they'll learn even less.

[21:20] <cognominal> I don't expect much from educational institutions, I was taught  using a sliding rule at a time when cheap calculators were already available.

[21:21] <ash_> my grandfather has a sliding rule still, he's an architect, i worked for him a few summers ago taking his hand drawings and putting them in CAD 

[21:24] <frettled> cognominal: I think I may like that app already.  Thanks again.

[21:25] <ash_> hmm, i can use arm-eabi-gcc to cross compile from x86 to arm, wonder if that works with parrot, i'll go ask

[21:26] <bbkr> hi. i'm in parrot_install/lib/1.9.0-devel/library (december release or rakudo) and when i do perl6 -e 'use MIME::Base64; say MIME::Base64::encode_base64("test");' i get invoke() not implemented in class 'Undef' error. should .pbc code be included/called in some special way?

[21:28] <diakopter> I didn't know "use " was working in rakudo?   /me must be behind

[21:28] <mberends> bbkr: the 'use' command is not implemented for .pbc files yet, afaik. 

[21:28] <cognominal> frettled, you are free to /msg me the name of your favorite apps.  It is difficult to find one's way in the app store when rating are done by semi-illiterate kids.

[21:29] <mberends> 'use' does work with .pm files and .pir files that are compiled from .pm files

[21:29] <bbkr> it loads module without error. problem is on method call.

[21:30] *** SmokeMachine left
[21:30] <bbkr> ok, i'll write my own pure p6 Base64 or i'll wait till it will be working. thanks.

[21:32] *** bluescreen left
[21:36] *** orafu left
[21:37] *** orafu joined
[21:44] *** justatheory joined
[21:44] *** douglashunter joined
[21:47] *** kaare_ left
[21:56] *** meppl left
[22:00] *** jonasbn left
[22:16] *** Su-Shee left
[22:18] * eric256 got fudge to hang

[22:19] <eric256> adding ""#?rakudo todo 'exception'" to the line right before a block stops it from working at all...

[22:27] *** pjcj joined
[22:28] * mberends looked at t/spec/fudge and gave up trying to understand it

[22:29] *** orafu left
[22:29] *** orafu joined
[22:33] <diakopter> moritz_: where you

[22:38] <szbalint> I've must have scared him off :)

[22:40] *** ruoso left
[22:41] *** am0c left
[22:42] *** buu joined
[22:42] *** buubot joined
[22:44] *** KyleHa left
[22:45] *** iblechbot left
[22:46] <eric256> yay, figured out this fudging thing....now to finish actualy fixing the file

[22:53] *** wayland76 joined
[22:54] <wayland76> Hi all.  Is the -ng branch at all likely to land before the January release?

[22:56] *** japhb joined
[23:01] *** Chillance joined
[23:03] *** _Jedai_ left
[23:04] <ash_> maybe? i think jnthn++ and pmichaud++ are the two that would know the best to be honest

[23:04] *** cognominal_ joined
[23:05] *** patspam joined
[23:10] *** dbrock left
[23:12] *** cognominal left
[23:21] *** ash_ left
[23:27] <diakopter> wayland76: haven't heard anything on that in few weeks.  my conjecture would just be (more) FUD (unless you trusted my opinion, of course).

[23:31] <eric256> rakudo: my $x = undef;

[23:31] <p6eval> rakudo 3867ff:  ( no output )

[23:31] <eric256> ng: my $x = undef;

[23:31] <p6eval> ng 3f06c7: Could not find non-existent sub &undef␤current instr.: '_block14' pc 29 (EVAL_1:0)␤

[23:31] <eric256> ng doesn't stand for not-good does it?

[23:31] <eric256> hehe

[23:33] <TimToady> wayland76: yes, I think the intent is to get it in the January release even if there are still a few minor regressions

[23:34] *** IllvilJa joined
[23:35] <Tene> eric256: 'undef' doesn't exist anymore.

[23:35] <TimToady> std: my $x = undef;

[23:35] <p6eval> std 29473: ===SORRY!===␤Unsupported use of undef as a value; in Perl 6 please use something more specific:␤     Mu (the "most undefined" type object),␤   an undefined type object such as Int,␤    Nil as an empty list,␤    *.notdef as a matcher or method,␤ Any:U as a type

[23:35] <p6eval> ..constraint␤       or fail() …

[23:36] <eric256> ng: my $x = Nil;

[23:36] <p6eval> ng 3f06c7:  ( no output )

[23:36] <eric256> my $x = Str;

[23:36] <eric256> ng: my $x = Str; $x.perl.say;

[23:36] <p6eval> ng 3f06c7: Str␤

[23:37] <eric256> so substr, where it would have returned undef should return Str?

[23:37] <TimToady> ng: my Str $x = Nil; say $x.WHAT

[23:37] <p6eval> ng 3f06c7: List()␤

[23:37] <TimToady> heh, should be Str, oh well

[23:37] <eric256> the error above sas "Nil as an empty list" so it did what i expected for you

[23:39] <frettled> Mostly off-topic question: I think I might go to YAPC::NA this year, since I've promised to visit a friend in NYC anyway.  How insane am I for wanting to drive from NYC to Columbus?  :)

[23:39] <wayland76> thanks people.  

[23:39] <wayland76> diakopter: I saw one piece of info: http://lith-ology.blogspot.com/2009/12/seven-days-between-parrot-and-camel_28.html

[23:40] <eric256> thats only 500 miles, thats nothing

[23:40] *** taesoo left
[23:40] <frettled> eric256: I wasn't thinking about the distance :)

[23:40] <eric256> my wife drives 1000 (denver to san diego)  all the time

[23:41] <frettled> eric256: this fall, I drove about 1000 miles to visit Abigail, then took a 500 mile detour to France to pick up some wine, and drove back home again.  :)

[23:42] <frettled> No, I'm more concerned about traffic conditions.

[23:43] <eiro> 'lo guys

[23:43] <frettled> lolo

[23:43] <TimToady> wayland76: my info is as of the phone call today

[23:43] <eiro> glob() isn't yet implemented, right ? 

[23:43] <diakopter> oh

[23:46] *** orafu left
[23:46] *** orafu joined
[23:46] <TimToady> eiro: doesn't look like it

[23:47] <eiro> just to be sure :)

[23:47] <eiro> thx TimToady 

[23:51] <TimToady> eric256: S02:1872 specs that it should return Str, actually

[23:52] <TimToady> the error is slightly misleading, insofar as Nil is really the empty parcel, not the empty list

[23:52] <eric256> thats what i said... lol

[23:52] <eric256> well not based on a spec, just judgment hehe

[23:52] <TimToady> Nil and () only turn into the empty list in list context

[23:53] <eric256> and the file that i just spent ours fixing, i rm'ed by accident

[23:53] <eric256> that sucked

[23:57] *** eternaleye joined
[23:57] <wayland76> TimToady: Thanks again! :)

[23:57] *** colomon__ joined
[23:57] *** colomon_ left
[23:58] <frettled> eric256: quick, recover the inode!

