[00:05] *** Italian_Plumber joined
[00:08] *** xinming left
[00:25] *** Drizzt_ joined
[00:25] *** risou joined
[00:29] *** Drizzt_ left
[00:31] *** justatheory joined
[00:34] *** TomDLux left
[00:54] *** QinGW joined
[00:55] *** justatheory left
[00:58] *** QinGW2 joined
[00:58] *** QinGW left
[01:00] *** lamstyle joined
[01:07] *** risou left
[01:25] *** masonkramer left
[01:26] *** masonkramer joined
[01:27] *** masonkramer left
[01:27] *** aloha left
[01:30] *** lamstyle left
[01:30] *** Italian_Plumber left
[01:31] *** aloha joined
[01:33] *** lamstyle joined
[01:38] *** ggoebel left
[02:26] *** bluescreen left
[02:26] *** justatheory joined
[02:33] *** felipe__ joined
[02:35] *** felipe__ left
[02:35] *** QinGW2 left
[02:35] *** leprevost joined
[02:36] *** QinGW joined
[02:38] *** QinGW left
[02:47] *** am0c^ joined
[02:48] *** Raynes joined
[03:05] *** Entonian left
[03:05] *** jedai_ left
[03:05] *** jedai joined
[03:06] *** Woody2143 left
[03:07] *** Woody2143 joined
[03:19] *** eternaleye joined
[03:19] *** QinGW joined
[03:22] *** leprevost left
[03:23] *** eternaleye left
[03:23] *** eternaleye joined
[03:25] *** QinGW1 joined
[03:27] *** ruoso left
[03:27] *** QinGW left
[03:36] *** QinGW1 left
[03:37] *** meppl left
[03:37] *** QinGW joined
[03:39] *** meppl joined
[03:42] *** QinGW left
[03:43] *** rgrau_ left
[03:44] *** QinGW joined
[03:49] *** QinGW1 joined
[03:53] *** QinGW left
[03:54] *** QinGW1 left
[03:54] *** QinGW joined
[03:58] *** QinGW1 joined
[03:59] *** QinGW left
[04:10] *** satyavvd joined
[04:15] *** QinGW1 left
[04:15] *** sftp joined
[04:22] *** am0c^ left
[04:23] *** am0c^ joined
[04:24] <sorear> good * #perl6

[04:27] <diakopter> good

[04:28] <plobsing> Could not find sub &good

[04:29] <sorear> diakopter: another part of why I want to hack apart STD.pm6 is that it doesn't have a fully reusable frontend

[04:30] <sorear> STD.pm6 is a static checker, not a parser; it's possible to lift parses out of it, but you're still paying for the cost (and occasional false positive errors) of the static checker part

[04:32] *** atomicstack joined
[05:01] *** justatheory left
[05:12] *** justatheory joined
[05:12] *** justatheory left
[05:13] *** justatheory joined
[05:20] *** fpants joined
[05:27] *** mberends left
[05:30] *** QinGW joined
[05:32] <sorear> std: class q { }; say(q)

[05:32] <p6eval> std 237d266: OUTPUT«===SORRY!===␤Use of a closing delimiter for an opener is reserved at /tmp/izQhovQXzl line 1:␤------> class q { }; say(q⏏)␤    expecting any of:␤        argument list␤    prefix or term␤Parse failed␤FAILED 00:01 115m␤»

[05:33] <sorear> std: class q { }; say( q )

[05:33] <p6eval> std 237d266: OUTPUT«===SORRY!===␤Use of a closing delimiter for an opener is reserved at /tmp/E9dsxlBMmt line 1:␤------> class q { }; say( q ⏏)␤Parse failed␤FAILED 00:01 115m␤»

[05:37] *** QinGW left
[05:38] *** kaare joined
[05:38] *** fpants left
[05:38] *** kaare is now known as Guest81868

[05:40] *** QinGW joined
[05:41] *** pmichaud left
[05:43] *** QinGW1 joined
[05:43] *** Juerd left
[05:47] *** QinGW left
[05:51] *** hatseflats left
[05:57] *** pmichaud joined
[06:00] *** hatseflats joined
[06:03] * sorear finds a memory leak in STD.pmc

[06:05] <sorear> oh, misread

[06:07] *** uniejo joined
[06:22] *** justatheory left
[06:23] *** QinGW1 left
[06:23] *** QinGW1 joined
[06:25] * sorear grumbles at EXPR using a *lot* of internal CursorBase calls

[06:25] *** pythonian4000 is now known as pythonian4000afk

[06:33] *** envi joined
[06:38] *** am0c^ left
[06:39] *** sjn left
[06:45] *** Juerd joined
[06:49] *** sjn joined
[06:51] *** AyStupidMuddaFuk joined
[06:51] <AyStupidMuddaFuk> r

[06:51] <AyStupidMuddaFuk> r

[06:51] *** AyStupidMuddaFuk left
[06:55] <TiMBuS> so my perl5 irc bot has gone up from about 130mb ram usage, to ~430mb.

[06:56] <TiMBuS> perl6*

[06:56] <TiMBuS> had parrot changed its gc

[06:57] <moritz_> yes

[06:57] <phenny> moritz_: 11 Oct 20:55Z <PhatEddy> tell moritz_ his missing rakudo_test_run.tar.gz file could be caused by not having TAP::Harness::Archive installed.  Without the module installed the tests are still run but you get the LTA error message.

[06:58] <moritz_> phenny: tell PhatEddy thanks, I had reinstalled my operating system, so that TAP::Harness::Archive was missing indeed. Will try again now. Thanks for the hint!

[06:58] <phenny> moritz_: I'll pass that on when PhatEddy is around.

[07:02] <TiMBuS> moritz_, oh i see then, that explains it

[07:02] <TiMBuS> in that case, how is the new gc overall? does it still segfault like the old one?

[07:02] *** azawawi joined
[07:02] <azawawi> hi

[07:02] <azawawi> moritz_: ping :)

[07:02] <moritz_> azawawi: pong

[07:03] <azawawi> moritz_: i noticed while reading backlogs what you said about ~azawawi... will fix it soon :)

[07:03] <moritz_> azawawi: it was about the syntax hilighted test snippets in the specs

[07:03] <moritz_> azawawi: they seemed to be unmaintained, so I removed the links

[07:04] <azawawi> moritz_: they depended on svn and now they need to work with git...

[07:04] <moritz_> I also replaced the inline test snippets to links to the github repo - makes searching in the HTML much faster

[07:05] <moritz_> azawawi: exactly what I meant with "unmaintained"

[07:05] <azawawi> moritz_: yup i know :)

[07:05] * azawawi fixing... :)

[07:06] <moritz_> azawawi: feel free to add links back in, but please make them ordinary links, not inline

[07:07] <moritz_> azawawi: (you have again commit access to the "mu" repo, which used to be the pugs repo)

[07:07] <moritz_> afk

[07:07] <azawawi> moritz_: thx

[07:12] *** azawawi left
[07:19] <sorear> azawawi needs to drop by for more than 10 minutes at a time

[07:19] <sorear> I find it *quite* annoying

[07:19] <sorear> std: rx:moo { }

[07:20] <p6eval> std 237d266: OUTPUT«===SORRY!===␤Unrecognized adverb :moo(1) at /tmp/ARkHYCRYUV line 1:␤------> rx⏏:moo { }␤Null pattern not allowed at /tmp/ARkHYCRYUV line 1:␤------> rx:moo { ⏏}␤    expecting quantifier␤Parse failed␤FAILED 00:01 115m␤»

[07:20] <sorear> std: token:moo { }

[07:20] <p6eval> std 237d266: OUTPUT«===SORRY!===␤Undeclared routine:␤    'token:moo' used at line 1␤Check failed␤FAILED 00:01 115m␤»

[07:26] *** azawawi joined
[07:26] <azawawi> sorear: sorry :)

[07:27] <azawawi> sorear: but im using a browser for IRC...

[07:27] <sorear> Oh, you're one of those people who can hear when not present.

[07:27] <sorear> Anyway.  Is S:H:P6 broken again yet?

[07:29] <azawawi> sorear: didnt try it recently

[07:29] <azawawi> sorear: will check

[07:32] <azawawi> sorear: it installs correctly

[07:33] <azawawi> sorear: I backlog a lot :)

[07:34] <moritz_> sorear: I just /ignore joins and leaves. Works out quite well

[07:37] *** fwa joined
[07:38] *** daxim joined
[07:42] *** fwa left
[07:42] <moritz_> is there a #cpan6sketch today?

[07:50] *** Mowah joined
[07:58] *** sukria joined
[08:03] *** am0c^ joined
[08:15] *** azawawi left
[08:17] *** [particle] left
[08:18] *** xinming joined
[08:19] *** araujo joined
[08:19] *** araujo left
[08:19] *** araujo joined
[08:22] *** sunnavy_ left
[08:23] *** icwiener joined
[08:23] *** Raynes left
[08:25] *** sunnavy joined
[08:26] *** tadzik joined
[08:29] <sorear> I have gone over STD.pm6 and identified 63 items where Niecza is not currently up to the task

[08:29] <dalek> niecza/master: 8f7545b | sorear++ | / (6 files):

[08:29] <dalek> niecza/master: Start review/port of STD.pm6

[08:29] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/8f7545bf6abfbf683204859b7a183d81eec7ef1f

[08:29] <dalek> niecza/master: 56625fd | sorear++ | v6/ (2 files):

[08:29] <dalek> niecza/master: Finish first scan

[08:29] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/56625fd9ce6d604c1152f55ae299773c6c18265d

[08:29] <sorear> (and fixed or commented out a few places where STD gratuituosly used advanced features like sprintf)

[08:40] *** pythonian4000afk is now known as pythonian4000

[08:49] *** [particle] joined
[08:50] *** tadzik left
[08:51] *** Guest81868 is now known as kaare_

[09:00] *** cjk101010 joined
[09:11] <moritz_> sorear: are the # end role  comments significant?

[09:33] *** adv_ joined
[09:36] *** icwiener left
[09:38] *** PhatEddy joined
[09:40] *** timbunce joined
[09:41] *** masak joined
[09:41] <masak> oh hai

[09:42] <moritz_> oh hai masak 

[09:42] <moritz_> are you back in .se?

[09:43] <masak> aye.

[09:43] <masak> just woke up from a good night's sleep.

[09:43] * moritz_ envies masak for long/late sleeping

[09:44] <masak> if it's any consolation, I would have liked to sleep a bit shorter :)

[09:44] *** jrockway joined
[09:44] *** am0c^ left
[09:44] <moritz_> that said, the last 4 night have been quite peacefully, compared to those of the previous weeks

[09:44] <moritz_> :-)

[09:46] <masak> relative measurement is relative :P

[09:46] <moritz_> indeed :-)

[09:46] <moritz_> but since humans are mostly relative, that's OK

[09:47] <masak> oh, very OK.

[09:48] * moritz_ just read an announcement for a workshop: Small Talk in English: Do´s and Dont´s

[09:48] <moritz_> one Don't: using wrong apostrophe in workshop titles :-)

[09:49] *** QinGW joined
[09:50] <PhatEddy> moritz_: spectest_smolder runs t/harness with --archive option.  Would be easy to warn if harness sees --archive option but no TAP Archive module.  Interested in patch?

[09:50] <phenny> PhatEddy: 06:58Z <moritz_> tell PhatEddy thanks, I had reinstalled my operating system, so that TAP::Harness::Archive was missing indeed. Will try again now. Thanks for the hint!

[09:50] <moritz_> PhatEddy: yes; with s/warn/die/

[09:51] <moritz_> warnings are too easy to overlook

[09:51] <moritz_> and there's really no point in running _smolder if the submission won't work

[09:52] <PhatEddy> ok - will try in next day or two ...

[09:52] *** QinGW3 joined
[09:53] <moritz_> btw if you have a patch that affects multiple files, it's easier for the reviewer if you submit it as a single patch

[09:53] *** QinGW1 left
[09:54] *** QinGW left
[09:57] *** PhatEddy left
[10:08] <masak> unless it's actually several unrelated changed.

[10:08] <masak> s/changed/changes/

[10:10] <moritz_> then it belongs in separate tickets.

[10:10] <moritz_> (or commits, in the case of pull requests)

[10:10] <masak> *nod*

[10:13] *** QinGW3 left
[10:14] *** araujo left
[10:24] *** Axius joined
[10:25] *** araujo joined
[10:25] *** envi left
[10:35] *** pythonian4000 is now known as pythonian4000afk

[10:35] <moritz_> rakudo: say ' - - '.trim.perl

[10:36] <p6eval> rakudo 5d23e3: OUTPUT«"- -"␤»

[10:51] *** Alias joined
[10:51] <jnthn> o/

[10:54] <jnthn> masak: Glad you made it back safely too :-)

[10:56] *** Axius left
[10:57] *** Trashlord left
[11:07] *** araujo left
[11:13] *** araujo joined
[11:20] *** araujo left
[11:20] *** araujo joined
[11:27] *** araujo left
[11:28] *** araujo joined
[11:31] *** araujo left
[11:34] <masak> jnthn: I had a pleasant day in Utrecht yesterday. it also has canals (grachten).

[11:35] <jnthn> masak: nice :-)

[11:37] <colomon> back home we had canal (singular).  I canoed and cross-country skied on it when I was younger.

[11:38] <masak> skiing, not skating?

[11:38] <colomon> more skiing than skating.  I had a bad tendency to outgrow my skates very quickly.

[11:39] <colomon> (which maybe means the skiing was a bit later, because I don't remember outgrowing them so much.  phases.)

[11:39] <jnthn> masak: I had currywurst in Hamburg while changing train. :-)

[11:40] <jnthn> 'twas nommy.

[11:40] *** satyavvd left
[11:41] <masak> sounds nice. :) I tried some of the local fries-with-mayonnaise in Utrecht. odd but nice.

[11:41] *** baux joined
[11:43] <jnthn> Fries + mayo is a nice combination :-)

[11:44] *** rhr left
[11:51] *** rhr joined
[11:56] *** araujo joined
[11:56] *** araujo left
[11:56] *** araujo joined
[12:04] *** takadonet joined
[12:05] <takadonet> morning all

[12:07] <masak> takadonet: \o

[12:07] <nymacro> lo

[12:09] <takadonet> masak: little surprised that you have not commented on : http://www.reddit.com/r/programming/comments/dpqh7/longest_palindrome_by_regex/

[12:09] <masak> takadonet: been traveling yesterday. :)

[12:11] <moritz_> takadonet++ # sending me ~6k visitors from reddit

[12:11] <takadonet> masak: ic 

[12:11] <takadonet> moritz_: np anytime 

[12:12] <takadonet> was nice to see people discussion the issue rather then ' Perl 6 sucks!'

[12:12] <masak> indeed.

[12:12] <masak> let's have more of that.

[12:26] <masak> rakudo: sub j { :2($^n.fmt("%b").comb.rotate.join) }; say j($_) for 1 .. 20 # Josephus function; see https://secure.wikimedia.org/wikipedia/en/wiki/Josephus_problem

[12:26] <p6eval> rakudo 5d23e3: OUTPUT«1␤1␤3␤1␤3␤5␤7␤1␤3␤5␤7␤9␤11␤13␤15␤1␤3␤5␤7␤9␤»

[12:26] <masak> \o/

[12:27] *** Italian_Plumber joined
[12:28] *** envi joined
[12:28] <moritz_> \o/

[12:36] <daxim> masak, do the ⌹dyalog creature⌹ next

[12:37] <masak> good idea.

[12:38] <dalek> specs: 00572dd | masak++ | S06-routines.pod:

[12:38] <dalek> specs: [S06] s/tail-recursion/recursion/

[12:38] <dalek> specs: 

[12:38] <dalek> specs: Because you can use &?BLOCK calls in a non-tail position (and execution

[12:38] <dalek> specs: still carries on afterwards), it's really just normal recursion.

[12:38] <dalek> specs: 

[12:38] <dalek> specs: Omission found by (Ben Goldberg)++.

[12:38] <dalek> specs: review: http://github.com/perl6/specs/commit/00572dd42250299c2d35d1735691cf5f2601c666

[12:38] *** meraxes joined
[12:38] <daxim> but as a port from the apl, else it doesn't count

[12:39] <masak> here's the original apl, for someone who wants to tackle it: http://www.dyalog.com/dfnsdws/n_life.htm

[12:40] <masak> I really like the division into the spaces <plane cylinder torus möbius klein>.

[12:40] <masak> never thought about it that way before.

[12:41] <masak> I have not yet convinced myself that that's an excaustive list of such spaces, though.

[12:43] *** ruoso joined
[12:44] * moritz_ waits for a topologic, exact definition of "those spaces" :-)

[12:45] <krunen>                 ~.

[12:46] <krunen> argh. sorry, frozen ssh :(

[12:46] *** [particle] left
[12:46] * moritz_ hands krunen a hair drier to thaw his ssh session :-)

[12:47] <jnthn> Winter is coming... ;-)

[12:48] *** [particle] joined
[12:50] <masak> (Stark family motto.)

[12:51] <masak> moritz_: things that can be described by that square thing they have, putting optional arrows in some direction on each of the sides.

[12:52] <masak> moritz_: seems to me they don't include the one where the arrows all point clockwise, for example.

[12:54] <moritz_> old (2003), but still interesting: http://www.perlmonks.org/?node_id=261631

[12:55] <moritz_> "I am scared that someone will write a Python parser as a perl 6 regex."

[12:56] <masak> aren't we all? :P

[12:56] <moritz_> if you s/regex/grammar/, it's not scary to me at all

[12:57] <masak> Perl 6 has been "not yet released" since at least 2003.

[12:58] <masak> I wonder if it'd have been possible to counteract that meme early, or if no matter which path one chose, Perl 6 would get the "vapor" label...

[12:59] <moritz_> we could start another next-version-of-a-popular-language and try to find out :-)

[12:59] <moritz_> ... but only when Perl 6 is "done" :-))

[12:59] <masak> oh yeah. only then.

[13:00] <masak> wouldn't want to "detract from" Perl 6. :P

[13:03] *** ambs joined
[13:11] *** Woody2143 left
[13:12] *** ambs left
[13:13] *** Woody2143 joined
[13:19] *** Patterner left
[13:20] *** bluescreen joined
[13:20] *** Psyche^ joined
[13:20] *** Psyche^ is now known as Patterner

[13:21] *** Dunearhp left
[13:25] *** Dunearhp joined
[13:32] *** sftp left
[13:35] *** sftp joined
[13:36] *** kaare_ left
[13:49] *** uniejo left
[13:53] *** whatashui joined
[13:57] *** whatashui left
[13:57] *** araujo left
[13:58] <shortcircuit> A P6 example got tagged incorrect, if someone wants to fix it: http://rosettacode.org/wiki/Sort_stability#Perl_6

[13:58] <shortcircuit> It looks like the issue is that the example data set isn't meant to be taken as a list of strings, but as a list of records, and the sort is supposed to be applied to the second column.

[13:59] <moritz_> the issue is just .[0] vs .[1]

[14:00] <moritz_> easy fix

[14:06] *** justatheory joined
[14:07] *** spq1 joined
[14:17] *** Trashlord joined
[14:18] *** MayDaniel joined
[14:20] *** Trashlord left
[14:21] *** rgrau_ joined
[14:23] *** araujo joined
[14:23] *** araujo left
[14:23] *** araujo joined
[14:25] *** slavik left
[14:30] *** mavrc joined
[14:31] *** justatheory left
[14:32] *** Trashlord joined
[14:39] *** Patterner left
[14:41] *** eternaleye left
[14:56] *** Psyche^ joined
[14:56] *** Psyche^ is now known as Patterner

[14:57] *** am0c^ joined
[15:02] *** daxim left
[15:03] *** Guest5383 joined
[15:06] *** meteorjay left
[15:06] *** cjk101010 left
[15:08] *** Guest5383 left
[15:09] *** burning_aces joined
[15:09] *** burning_aces left
[15:13] *** timbunce_ joined
[15:15] *** nymacro left
[15:17] *** timbunce left
[15:17] *** timbunce_ is now known as timbunce

[15:18] <moritz_> std: [1, 2]«-»[3, 4]

[15:18] <p6eval> std 263c207: OUTPUT«ok 00:01 117m␤»

[15:18] <moritz_> shouldn't that barf because « starts a postcircumfix?

[15:21] <masak> noö why_

[15:21] <masak> no; why?

[15:22] <masak> array indexing of hash indexing of array.

[15:22] <moritz_> rakudo: say [1, 2]«-»[0, 1].perl

[15:22] <p6eval> rakudo 5d23e3: OUTPUT«12␤»

[15:23] <moritz_> wrong?

[15:23] <masak> IMO yes.

[15:23] <colomon> maybe I'm being dense, but how could it possibly be right?

[15:23] *** slavik joined
[15:24] <masak> right. it looks like one of those "even if it were right, it'd be wrong" things.

[15:24] <moritz_> rakudo: print ([1..3]«-»[1..3]).perl

[15:24] <p6eval> rakudo 5d23e3: OUTPUT«[0, 0, 0]»

[15:24] <colomon> rakudo: say [1, 2] «-» [0, 1].per

[15:24] <p6eval> rakudo 5d23e3: OUTPUT«Method 'per' not found for invocant of class 'Array'␤  in main program body at line 22:/tmp/FZgLeatNgw␤»

[15:24] <colomon> rakudo: say [1, 2] «-» [0, 1].perl

[15:24] <p6eval> rakudo 5d23e3: OUTPUT«12␤»

[15:25] <colomon> rakudo: say [1, 2] «-» [0, 1]

[15:25] <moritz_> rakudo: say ([1, 2]<<->>[0,1]).perl

[15:26] <p6eval> rakudo 5d23e3: OUTPUT«11␤»

[15:26] <p6eval> rakudo 5d23e3: OUTPUT«(Any, Any)␤»

[15:26] <moritz_> that looks better

[15:26] <flussence> perl6: our multi sub postcircumfix:<« »>(Array $a) { ... }; say ([1,2]«*»[2,5]).perl;

[15:26] <moritz_> maybe « » is just NYI?

[15:26] <p6eval> pugs: OUTPUT«*** Cannot cast into Hash: VRef <Array:0x2acb6f227d91>␤    at /tmp/U4BOAX1EB1 line 1, column 59-72␤»

[15:26] <p6eval> ..rakudo 5d23e3: OUTPUT«===SORRY!===␤Null PMC access in get_string()␤»

[15:26] <colomon> rakudo: say ([1, 2] «-» [0, 1])

[15:26] <p6eval> rakudo 5d23e3: OUTPUT«11␤»

[15:26] <flussence> std: our multi sub postcircumfix:<« »>(Array $a) { ... }; say ([1,2]«*»[2,5]).perl;

[15:26] <p6eval> std 263c207: OUTPUT«===SORRY!===␤Unable to parse postcircumfix expression at /tmp/GfO3dtDnjL line 1:␤------> fix:<« »>(Array $a) { ... }; say ([1,2]«⏏*»[2,5]).perl;␤Couldn't find final '»'; gave up at /tmp/GfO3dtDnjL line 1:␤------> »>(Array $a) { ... };

[15:26] <p6eval> ..say (…

[15:27] <moritz_> rakudo: say « 1 2 3 »

[15:27] <p6eval> rakudo 5d23e3: OUTPUT«123␤»

[15:27] <flussence> rakudo doesn't like that sub declaration for some reason...

[15:28] <moritz_> right, «» as postcircumfix is simply NYI

[15:28] *** zulon joined
[15:31] <flussence> std: say ([1,2]«*»[2,5]).perl;

[15:32] <p6eval> std 263c207: OUTPUT«ok 00:01 119m␤»

[15:33] <flussence> huh, I never realised std allowed custom operators

[15:33] *** risou joined
[15:43] <pmichaud> good morning, #perl6

[15:43] <takadonet> pmichaud: morning

[15:44] <moritz_> \o

[15:46] <masak> pmichaud: morning!

[15:46] <pmichaud> how was paris? 

[15:48] *** zulon left
[15:54] <moritz_> github has a scary bug

[15:54] <moritz_> I go to one of my repos

[15:54] <moritz_> delete it

[15:54] <moritz_> successfully

[15:54] <colomon> pmichaud: o/

[15:55] <colomon> moritz_: oh noez

[15:55] <moritz_> and then it redirects me to the perl 6 organization account

[15:55] <masak> o.O

[15:55] <moritz_> and says "your repo $Blah has been deleted successfully"

[15:55] <moritz_> so I think I removed perl6/$Blah, even though I just deleted moritz/$Blah

[15:55] <masak> please submit githubbug.

[15:57] <moritz_> (which gave me quite a heart attack when I thought I had deleted perl6/modules.perl6.org, not moritz/modules.perl6.org)

[16:01] <masak> :)

[16:03] *** cdarroch joined
[16:03] *** cdarroch left
[16:03] *** cdarroch joined
[16:05] *** araujo left
[16:05] <moritz_> uhm, no feedback if that message to the github team has been sent successfully :(

[16:06] <moritz_> it just shows me the blank form again

[16:06] <pmichaud> another githubbug?  ;-)

[16:07] <moritz_> it's also unclear from their UI if I should use 'contact' or 'support'

[16:08] *** mberends joined
[16:09] <masak> mberends! \o/

[16:09] <mberends> yo!

[16:09] <slavik> will there be any sort of spec for what modules constitute "standard" distribution?

[16:11] <pmichaud> there is no "standard distribution".

[16:11] <pmichaud> (so no, there's no such spec)

[16:12] <pmichaud> mberends: o/

[16:14] *** Schwern joined
[16:14] <mberends> oh hai pmichaud!

[16:15] *** envi left
[16:16] <pmichaud> omg I posted a response to p6l

[16:17] <moritz_> OH NOEZ!

[16:17] <masak> that reminds me...

[16:18] * masak starts writing a summary in the attr introspection thread

[16:18] <masak> pmichaud: *gasp* -- you used "real-world use cases" on p6l!

[16:19] <masak> (sorry for jokingly linguifying an important issue) :)

[16:19] *** envi joined
[16:19] <masak> pmichaud++ # nice reply

[16:20] <pmichaud> I recognize that talking about real implementation details is against p6l standards.... but sometimes a few mugs need to be broken

[16:20] <masak> can't make a language without breaking a few mugs...

[16:20] <pmichaud> well, you *can*.... but you might not like the language you end up with :)

[16:21] <masak> I'd rather use Perl 6 than Consensus 6, yes.

[16:21] <moritz_> :-)

[16:21] <pmichaud> did we agree on "Consensus 6" as a name?  I thought we had decided on "Group Think 6".

[16:21] * moritz_ wants Plan 6

[16:21] <pmichaud> or even "Bikeshed 110"

[16:21] <masak> no, I distinctly remember it as "Committee 6".

[16:22] <[particle]> isn't C for Cabal?

[16:22] <masak> ok, so we've all agreed about the need to agree. now we just need to agree what to agree on.

[16:22] <pmichaud> [particle]: o/

[16:23] <[particle]> howdy, pmichaud!

[16:23] * [particle] has been buried under a $work-shaped rock

[16:23] <[particle]> i finally freed one hand to type

[16:24] <pmichaud> I've been buried under a <cold work family> shaped rock

[16:24] <[particle]> i just don't understand how perl 6 will torture the implementors properly if they're the ones defining the spec

[16:24] <[particle]> (re: threads)

[16:25] <pmichaud> [particle]: counter-example:  lists

[16:25] <[particle]> :)

[16:27] <moritz_> now here is pmichaud again, arguing with real-world examples

[16:27] <moritz_> how can we successfully build a vapor language if we start to look at the real world?

[16:30] <pmichaud> the real world gives us lots of vapor to work with :)

[16:42] *** risou_ joined
[16:45] *** risou left
[16:51] *** wamba joined
[16:52] <masak> p6l email sent.

[16:55] *** wamba left
[16:55] *** wamba joined
[16:56] <colomon> masak: believe you got former and latter backwards in the .perl section

[16:57] <masak> colomon: indeed -- correcting.

[16:57] <masak> colomon++

[16:57] <colomon> masak++ # for being brave enough to post to p6l

[16:59] <pmichaud> I like the analogy very much.  My comment would be that unlike MONKEY_TYPING and .HOW,  ".get_value"  doesn't visually appear as though "you're working outside the rules."

[16:59] <pmichaud> s/outside/above/

[16:59] <masak> indeed.

[16:59] <masak> and that was TheDamian's point too, IIRC.

[17:00] <masak> you can pick up an Attribute meta-object and run with it to the other end of your program.

[17:00] <masak> I must confess I'm not too worried about that, though.

[17:00] <masak> because *some* part of your program is in the tower, above the rules.

[17:01] <pmichaud> well, you don't necessarily know that.  It could be a module.

[17:01] <masak> and if that part decides to let Attribute objects out of the tower, then you do indeed have two problems. :P

[17:01] <moritz_> masak++ # good summary

[17:01] *** alester left
[17:01] <masak> thought you'd like it. :)

[17:01] <masak> nom &

[17:01] *** masak left
[17:01] *** alester joined
[17:01] <pmichaud> lunch here, also.

[17:02] <moritz_> Damian mentioned he disliked .get_value, because the call that involved the meta class could be in a different scope

[17:02] <moritz_> and an Attribute is just being passed around

[17:02] <moritz_> I don't buy that argument

[17:03] <moritz_> because if you use get_value, your code explicitly works with an Attribute, so it knows about this breaking-of-the-rules

[17:03] <pmichaud> I'm also not too keen on "get_"  and "set_".... in general that's not very perlish.  (Perhaps the meta-ness of attributes requires breaking that pattern, though)

[17:03] *** bluescreen left
[17:03] <moritz_> (he is right in that it's not visually obvious though)

[17:03] <colomon> should they be upper case?

[17:03] <moritz_> pmichaud: it should probably be bind_ instead of set_, right

[17:03] <colomon> I mean, it would look obnoxious, but that might be the point....

[17:03] <pmichaud> fwiw, we already have things like FETCH and STORE.... any reason not to use those?

[17:04] <moritz_> pmichaud: they act on containers

[17:04] *** MayDaniel left
[17:04] <pmichaud> attributes aren't containers? 

[17:04] <pmichaud> oh, nm

[17:04] <moritz_> if you have an Attribute object, it's not a container.

[17:04] <pmichaud> right

[17:05] <pmichaud> it's a way of getting at a container...

[17:05] <moritz_> FETCH and STORE would work for me too, even if I'm not entirely convinced

[17:06] <pmichaud> it might be interesting if Attribute were actually some sort of method (more)

[17:06] <pmichaud> then one could do something like   $obj.$attr = ...

[17:06] <moritz_> interesting approach

[17:06] <pmichaud> instead of doing   $attr.set_value($obj, $value)

[17:08] *** am0c^ left
[17:08] <pmichaud> that feels a lot more perlish to me, somehow.

[17:09] <pmichaud> especially since   "has $.abc"   tends to create a "method abc"  that is used to access the $!abc container.

[17:09] <pmichaud> so perhaps an Attribute can really act like one of those autogenerated methods

[17:10] <pmichaud> or the autogenerated methods are really just instances of Attribute

[17:10] <pmichaud> lunch here

[17:13] *** contempt joined
[17:18] *** bluescreen joined
[17:22] *** pyrimidine joined
[17:23] *** plainhao joined
[17:34] *** jferrero joined
[17:35] *** araujo joined
[17:39] *** slavik left
[17:44] *** risou joined
[17:45] *** risou_ left
[17:46] *** mberends left
[17:57] *** envi left
[18:01] *** slavik joined
[18:05] *** xinming left
[18:05] *** xinming joined
[18:06] *** Entonian joined
[18:11] *** baux left
[18:13] *** contempt left
[18:18] *** timbunce left
[18:24] *** timbunce joined
[18:30] *** icwiener joined
[18:31] *** molaf joined
[18:39] <sorear> moritz_: # end role and company are to help out the "parser" in gimme5.  They're no longer relevant in the viv era.

[18:44] <Util> How can I return 2 distinct arrays from a sub?

[18:44] *** risou_ joined
[18:44] <moritz_> return [1, 2], [3, 4]

[18:46] <Util> And if they are already in arrays, is this the best syntax? return [@q], [@r];

[18:46] *** risou left
[18:47] <moritz_> if you want avoid an extra copy, return @q.item, @r.item

[18:48] <moritz_> or $(...) isntead of  .item

[18:51] <Util> moritz_: thanks

[18:56] <dalek> niecza/master: a6766cd | sorear++ | / (5 files):

[18:56] <dalek> niecza/master: Starts on the TODO...

[18:56] <dalek> niecza/master: 

[18:56] <dalek> niecza/master: Add &chars, &substr, &join, &item, &not, &defined, &reverse, &note,

[18:56] <dalek> niecza/master: &push, &pop, &shift, &unshift, Mu.item, Bool.Numeric; work around

[18:56] <dalek> niecza/master: absense of //=, ||=, named arguments to Mu.new.

[18:56] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/a6766cd4fd1222f816e21b175c577e213d4cb91d

[18:57] *** masak joined
[18:57] *** meppl left
[18:57] <masak> ahoj!

[19:02] <masak> #phasers in -2?

[19:04] <masak> moritz_, jnthn, pmichaud?

[19:05] *** molaf left
[19:05] *** adv_ left
[19:05] <pmichaud> present

[19:07] *** Raynes joined
[19:12] *** cliu joined
[19:13] *** cliu left
[19:13] * moritz_ raises hand

[19:14] *** timbunce left
[19:14] *** timbunce joined
[19:15] *** plainhao left
[19:17] *** coldboot joined
[19:21] *** araujo left
[19:22] *** edon joined
[19:23] <dalek> niecza/master: 4cf4ea5 | sorear++ | v6/ (2 files):

[19:23] <dalek> niecza/master: Work around $_ scoping bugs

[19:23] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/4cf4ea5175ddf499842067f51cd3b80a90792357

[19:23] <dalek> niecza/master: dab9893 | sorear++ | v6/ (2 files):

[19:23] <dalek> niecza/master: Work around lack of given/when

[19:23] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/dab9893beef560fe27b123e4abc1c6be8178d2ae

[19:33] *** Entonian left
[19:44] *** risou joined
[19:46] *** mberends joined
[19:46] <sorear> seen tylercurtis

[19:46] <aloha> tylercurtis was last seen in #perl6 4 days 6 hours ago joining the channel.

[19:47] *** risou_ left
[19:48] *** timbunce left
[19:55] *** timbunce joined
[20:06] *** Italian_Plumber left
[20:09] *** andrei_alexandre joined
[20:10] <andrei_alexandre> hello everyone

[20:10] <andrei_alexandre> I have a question about Perl6's handling of static type annotations.

[20:10] <andrei_alexandre> I've used google for a while, no avail

[20:11] <andrei_alexandre> Question is, how does Perl handle pass by reference for values that are statically anotated with e.g. int?

[20:11] <masak> andrei_alexandre: hi!

[20:11] <PerlJam> andrei_alexandre: #perl6 >> google for Perl 6 questions :)

[20:12] <masak> andrei_alexandre: hm. good question.

[20:12] <andrei_alexandre> I am googling but human touch is always best :D

[20:12] <masak> something like this? my int $a = 42; foo($a); sub foo(int $a is rw) { ... }

[20:13] *** molaf joined
[20:13] <andrei_alexandre> no, foo() would be old-style, i.e. it won't specify int on its parameter

[20:13] <andrei_alexandre> it would take a reference nonetheless

[20:14] <masak> like this? my int $a = 42; foo($a); sub foo($a is rw) { ... }

[20:15] <andrei_alexandre> in brief what I'm asking is whether "my int $a;" can actually use a plain 64-bit value for $a instead of a variant

[20:15] <andrei_alexandre> yah

[20:15] <andrei_alexandre> @masak: yah

[20:15] *** wamba left
[20:15] <sorear> andrei_alexandre: I don't think it's legal to call foo($a) like that

[20:16] <PerlJam> sorear: why not?

[20:16] <andrei_alexandre> sorear: so that would be a compile-time error I reckon

[20:16] <PerlJam> int isn't in Any's tree?

[20:16] <sorear> int isn't a type

[20:16] <masak> what is it?

[20:16] <PerlJam> Hmm.

[20:16] <sorear> it's ... something weird

[20:16] <andrei_alexandre> PerlJam: if it is then the representation of $a would still be a Variant with the associated overhead

[20:17] <sorear> my int $x;  # $x is of type int, but it also has a representation trait applied

[20:17] <andrei_alexandre> sorear: what's a representation trait?

[20:17] <sorear> andrei_alexandre: a trait that controls data representation

[20:17] <sorear> I'm making this up as I go along, if you can't tell.

[20:17] <PerlJam> andrei_alexandre: an "implementation detail" of the storage for the var.  :)

[20:18] <PerlJam> sorear: #perl6 is where dreams are made real anyway.

[20:18] <sorear> No definite answers have been reached on my int $foo

[20:18] <sorear> I have my thoughts on how it has to work

[20:18] <andrei_alexandre> is there an article somewhere discussing the design in good detail?

[20:18] <andrei_alexandre> problem is I have even trouble finding keywords to search for

[20:18] <sorear> There isn't a design at all

[20:18] <andrei_alexandre> I tried "perl6" "static typing"

[20:19] *** molaf left
[20:19] <sorear> let alone a document describing it

[20:19] <andrei_alexandre> "perl6" "explicit typing"

[20:19] <andrei_alexandre> etc.

[20:19] <andrei_alexandre> no avail

[20:19] <sorear> see above

[20:20] *** MayDaniel joined
[20:20] <andrei_alexandre> "perl6" "representation traits" ain't a winner either :D

[20:21] <sorear> Right, I just made up the term

[20:21] <sorear> Google is frighteningly fast; I googled a term once and got the irclog as the first hit, less than an hour after the term was used

[20:21] <PerlJam> sorear: you should write an article about your made-up terms :)

[20:22] <PerlJam> S02:568 makes me think that sub foo ($a is rw) { ... }  my int $x = 7;  foo($x);  # is perfectly valid.

[20:23] <andrei_alexandre> PerlJam: you mean this? http://github.com/perl6/roast/blob/master/S02-literals/quoting.t#L543-L568

[20:24] <sorear> I'm an implementor.  I reserve the right to declare parts of the synopses "completely insane" and refuse to implement them.

[20:24] <andrei_alexandre> I found http://perlcabal.org/syn/S02.html, what's 568 referring to?

[20:24] <sorear> :)

[20:24] <PerlJam> andrei_alexandre: line number.

[20:24] <PerlJam> andrei_alexandre: have a look at http://irclog.perlgeek.de/perl6/today

[20:25] <PerlJam> andrei_alexandre: my text will be a link to the appropriate section 

[20:25] <andrei_alexandre> thanks!

[20:26] <sorear> PerlJam: how I think this will work is that autoboxes are read-only

[20:26] <andrei_alexandre> so thats' http://perlcabal.org/syn/S02.html#line_568

[20:26] <PerlJam> andrei_alexandre: read the third sentence of that paragraph.

[20:26] <PerlJam> sorear: why read only?

[20:26] <sorear> my int $foo might be stored in a register window or dedicated stack memory; it doesn't make any sense to allow read-write pointers to it

[20:28] <PerlJam> Hmm

[20:29] *** molaf joined
[20:29] <PerlJam> I was kind of thinking that $a would be an Any that knows how to translate reads/writes into a form that's useful for the int $x  (or carp if that can't be done)

[20:30] <PerlJam> so ... sub foo ($a is rw) { $a = "hi" };  my int $x = 7;  foo($x);  # dies horribly

[20:30] *** Entonian joined
[20:30] <andrei_alexandre> so let's seee

[20:30] <PerlJam> but ... sub foo ($a is rw) { $a = 32 };  my int $x = 7;  foo($x);  # works fine

[20:30] <andrei_alexandre> third sentence of paragraph (and the following paren: "However, Perl will try to make those look like their corresponding uppercase types if you treat them that way. (In other words, it does autoboxing. Note, however, that sometimes repeated autoboxing can slow your program more than the native type can speed it up.)"

[20:30] <sorear> Constructing those objects is going to get very expensive very quickly.  I'd rather not bother.

[20:30] <andrei_alexandre> So it does autoboxing

[20:31] <andrei_alexandre> but autoboxing doesn't quite work for pass by reference

[20:31] <andrei_alexandre> hence my question

[20:31] <sorear> andrei_alexandre: autoboxing doesn't quite work for pass by reference.

[20:31] <andrei_alexandre> that's what I think

[20:31] <andrei_alexandre> boxing an int works, you box it and you pass it around

[20:32] <sorear> andrei_alexandre: when you say "my int $foo", you're leaving the land of ponies and butterflies and entering the world of native types, which is a much less pleasant place

[20:32] <andrei_alexandre> boxing a reference to int... is only possible if there's a "reference to int" type around

[20:32] <sorear> if you don't want to deal with the ramifications of native types, don't use them

[20:32] <andrei_alexandre> I don't want to use/avoid explicit types

[20:32] <andrei_alexandre> just to figure the design decision

[20:33] *** molaf left
[20:33] <PerlJam> maybe TimToady will read this and decide what's Right and True and patch the spec for us   ;)

[20:34] <sorear> I've asked TimToady about this more than once.

[20:39] *** atomicstack left
[20:44] *** risou left
[20:47] *** andrei_alexandre left
[20:52] *** deepaknagarajan joined
[20:52] *** pythonian4000afk is now known as pythonian4000

[20:55] *** deepaknagarajan left
[20:59] *** hudnix left
[21:00] *** hudnix joined
[21:01] *** MayDaniel left
[21:02] *** Italian_Plumber joined
[21:10] *** Trashlord left
[21:14] *** pyrimidine left
[21:20] *** slavik left
[21:25] *** bluescreen left
[21:28] *** justatheory joined
[21:34] <masak> 'night, #perl6

[21:34] *** masak left
[21:37] *** knewt_ joined
[21:37] *** knewt_ is now known as knewt2

[21:37] *** Entonian left
[21:40] *** knewt2 left
[21:41] *** knewt_ joined
[21:41] *** knewt_ is now known as knewt2

[21:41] *** jlaire left
[21:51] *** jlaire joined
[21:51] *** icwiener left
[21:55] *** Schwern left
[21:58] *** Mowah left
[22:09] *** justatheory left
[22:09] *** justatheory joined
[22:11] <alester> I'm working w/Damian on getting input from folks about threads in Perl 6

[22:11] <alester> Gonna run a blurb on Perlbuzz asking people for input about what works and doesn't work with concurrent processes.

[22:11] <alester> per his mail from a little while ago

[22:12] <alester> Anyone willing to be a point of contact for collecting those?  I'm guessing that people won't want to sign up for perl6-whatever if they don't have to, and the lower the barrier to entry, the better.

[22:12] *** mavrc left
[22:19] *** edon left
[22:26] *** estrabd is now known as estrabd_amf

[22:32] *** Alias left
[22:45] *** Entonian joined
[23:15] *** jferrero left
[23:17] *** Trashlord joined
[23:19] *** sunnavy left
[23:19] *** sunnavy joined
[23:22] *** bluescreen joined
[23:25] *** timbunce left
[23:30] *** alester left
[23:33] *** rgrau_ left
[23:33] *** rgrau_ joined
[23:44] *** orafu left
[23:46] *** orafu joined
[23:58] *** rgrau_ left
