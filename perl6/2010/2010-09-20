[00:02] *** envi^home joined
[00:09] *** justatheory left
[00:14] <dalek> niecza/mm: d305646 | sorear++ | src/ (4 files):

[00:14] <dalek> niecza/mm: [mm] Implement variable commoning

[00:14] <dalek> niecza/mm: review: http://github.com/sorear/niecza/commit/d30564606a1735889374fe8bb7c455504d6ffafe

[00:14] <dalek> niecza/mm: 499e995 | sorear++ | src/ (3 files):

[00:14] <dalek> niecza/mm: [mm] Change Optimizer::Beta to work with new model

[00:14] <dalek> niecza/mm: review: http://github.com/sorear/niecza/commit/499e9954560c6c1761ac7b64acfa6efeea217365

[00:21] <plobsing> sorear: someone will notice and complain about eval memory leaks. see http://trac.parrot.org/parrot/ticket/783 .

[00:25] <diakopter> plobsing: interesting; thank you

[00:50] *** jferrero left
[00:54] *** lichtkind left
[00:54] *** lue left
[00:55] *** lue joined
[01:14] *** revdiablo joined
[01:18] *** QinGW joined
[01:24] *** Alias_ joined
[01:27] *** Alias left
[01:27] *** c9s joined
[01:28] *** ascent_ left
[01:28] *** ascent_ joined
[01:47] *** LaVolta joined
[01:48] *** makkksimal is now known as makkksimal_off

[01:54] *** molaf joined
[01:57] *** LaVolta left
[02:01] *** LaVolta joined
[02:32] *** nymacro left
[02:47] *** envi^home left
[02:51] *** envi^home joined
[02:55] <araujo> http://ideone.com/arje9

[02:55] <araujo> :)

[02:57] <colomon> ?

[02:58] <colomon> ah, that's your code?

[02:58] <araujo> colomon, yeah

[02:59] <colomon> can you explain what's going on there?

[02:59] <araujo> just added initial string support

[02:59] <colomon> I mean, I can figure out the algorithms.

[02:59] <colomon> that's your language?

[02:59] <araujo> yeah colomon 

[02:59] <colomon> Why does it say the language is Erlang?

[03:00] <araujo> colomon, oh, well, just chose the one that idone colored more fun

[03:00] <araujo> hehehe

[03:01] <colomon> ah!

[03:01] <araujo> >:]

[03:01] <colomon> araujo++ # lambda!

[03:01] <araujo> hehe :D

[03:01] <araujo> still lot of stuff to define and do though ... :P

[03:09] *** molaf left
[03:24] *** meppel joined
[03:26] *** meppl left
[03:28] *** jaldhar left
[03:40] *** jaldhar joined
[03:42] <sorear> jnthn: hey...

[03:48] *** WinstonSmith left
[03:48] *** DemoFreak left
[03:55] *** satyavvd joined
[03:58] *** DemoFreak joined
[04:02] *** echosystm joined
[04:27] *** jhuni joined
[04:28] *** QinGW1 joined
[04:30] *** QinGW left
[04:30] *** orafu left
[04:31] *** orafu joined
[04:37] *** mfollett joined
[04:39] *** orafu left
[04:39] *** orafu joined
[04:44] <satyavvd> ls

[04:55] *** nymacro joined
[04:58] <sjohnson> ls -l

[05:00] <plobsing> rm -rf *

[05:01] <sjohnson> DOTN

[05:01] <sjohnson> DO'T!

[05:01] *** kaare joined
[05:02] *** kaare is now known as Guest41693

[05:07] *** krakan left
[05:11] *** sftp left
[05:17] *** mfollett left
[05:36] *** gottreu_ joined
[05:42] *** orafu left
[05:56] *** Zapelius joined
[06:12] *** meppel is now known as meppl

[06:15] *** baest_ is now known as baest

[06:18] *** toebu left
[06:20] *** krakan joined
[06:20] *** toebu joined
[06:23] *** flatwhatson_ left
[06:24] *** wtw joined
[06:25] *** Zapelius left
[06:25] *** flatwhatson joined
[06:25] *** cj left
[06:26] *** Zapelius joined
[06:34] *** khisanth_ joined
[06:34] <moritz_> good morning

[06:34] *** Khisanth left
[06:37] <mberends> good mor<tab> moritz_ 

[06:38] * mberends -> $work

[06:38] *** mberends left
[06:38] *** khisanth_ left
[06:39] *** agentzh joined
[06:39] *** agentzh left
[06:39] *** agentzh joined
[06:40] <sorear> good morning moritz_

[06:54] *** Khisanth joined
[06:58] *** pythonian4000 is now known as pythonian4000afk

[07:03] *** araujo left
[07:11] *** Guest41693 is now known as kaare_

[07:22] <mathw> \o/

[07:23] <mathw> DB are working on setting up a direct ICE service from London to Frankfurt

[07:24] *** tadzik joined
[07:25] *** daxim joined
[07:29] *** wamba joined
[07:30] *** echosystm left
[07:34] *** Trashlord joined
[07:44] <szbalint> good morning.

[07:44] <sjn> o7

[07:45] *** QinGW joined
[07:45] *** gottreu_ left
[07:47] *** svetlins_ left
[07:48] *** QinGW1 left
[07:55] *** cotto left
[07:59] *** barney joined
[08:06] *** c9s_ joined
[08:07] *** c9s left
[08:07] <moritz_> good morning

[08:07] <sjohnson> hi

[08:12] *** rgrau joined
[08:15] *** masak joined
[08:16] *** cotto joined
[08:18] *** jhuni left
[08:22] *** cotto left
[08:25] *** Mowah joined
[08:27] *** redicaps joined
[08:28] <masak> morning, 6ers.

[08:28] <moritz_> mornin' masak 

[08:33] *** lamstyle left
[08:34] <mathw> o/ masak

[08:34] *** jferrero joined
[08:37] *** barika left
[08:37] *** barney left
[08:37] *** lamstyle joined
[08:39] <sorear> hello masak!

[08:39] <masak> hi!

[08:39] <masak> sorear: nope. haven't played with mowyw. my primary inspiration is Hakyll.

[08:41] *** cotto joined
[08:41] <masak> [backlog] ok, someone please explain what's so evil about &eval. I know everyone keeps cargo-culting that it is indeed evil -- and believe me, I see the opportunities for shooting yourself in the foot with it -- but why "evil", and not just "power tool, be careful".

[08:42] <masak> s/\.$/?/

[08:43] *** barika joined
[08:43] * masak looks at mowyw

[08:44] <sorear> masak: "evil" is a colorful way of saying "power tool, be careful"

[08:45] *** cottoo joined
[08:46] <moritz_> masak: it's just "evil" if you interpolate non-sanitized user input into eval strings, and don't check $! after it

[08:46] <moritz_> masak: problem is, it's often hard to meaningfully sanitize the user input

[08:47] <sorear> eval is a great tool for some kinds of metaprogramming

[08:47] <sorear> the test suite would be much more awkward without it, for instance

[08:47] <sorear> like the test saying that you can use NUL as string delimiters

[08:48] *** cotto left
[08:49] <masak> moritz_: full, full ACK about user input. I think it's that part that should be emphasized, rather than &eval per se. &system is just as bad in that sense.

[08:49] <masak> er, I mean &run :)

[08:49] <sorear> can we get rid of string 'system' already

[08:50] <masak> sorear: yes, great for metaprogramming. that's what I'm after. but it's being stigmatized, just like &goto.

[08:50] <sorear> or rename it to &shell or something

[08:50] <masak> sorear: get rid of string 'system'? whaddyamean?

[08:51] <sorear> masak: run() should not require escaping; it should take an array of strings

[08:51] <sorear> always

[08:52] *** timbunce joined
[08:52] <moritz_> well, it's kinda useful to use shell meta chars in perl 5's system()

[08:52] <moritz_> for things like system("foo > foo.out")

[08:52] <sorear> yeah we can keep &shell-execute or something

[08:52] <sorear> but lazy people should be steered towards string-list

[08:52] <moritz_> or maybe a run(:shell, $command)

[08:52] <moritz_> agreed

[08:52] <florz> I guess it would be sensible to have a larger distance between what requires escaping and what doesn't

[08:54] * sorear wonders if it would be OK to declare "This is how &run looks on POSIX systems, and kinda-POSIX ones like DOS 2+ and WinNT.  If your system is not POSIX at all, &run could have a completely different signature."

[08:55] * masak thinks that 'kinda-POSIX' is a very charitable description of DOS

[08:57] *** cottoo is now known as cotto

[08:57] *** cotto left
[08:57] *** cotto joined
[08:58] *** dakkar joined
[09:06] *** aloha left
[09:08] *** bacek left
[09:09] *** bacek joined
[09:09] *** aloha joined
[09:14] <jnthn> Morning, #perl6

[09:14] * jnthn has decided that meatspace is dangerous. Somebody in meatspace had a cold, and now so do I... :/

[09:14] *** redicaps left
[09:16] <sorear> jnthn: I saw what you did there...

[09:16] <masak> jnthn: also, meatspace is buggy, badly documented, and insufficiently optimized.

[09:20] <jnthn> masak: wait, what, I thought that was the description for Rakudo?

[09:21] <masak> dang. I keep getting those two mixed up.

[09:21] <jnthn> :P

[09:21] <masak> :)

[09:22] <sorear> niecza/mm is coming along nicely

[09:22] <jnthn> sorear: Nice

[09:23] <jnthn> sorear: I got some decent progress in on the Parrot port of 6model at the weekend too :-)

[09:23] <jnthn> Everybody's hacking on meta-models! :-)

[09:23] <masak> sorear: niecza/nm?

[09:24] <moritz_> jnthn: and 'nom' is 'new object model'? :-)

[09:24] <jnthn> Yes. :-)

[09:24] <masak> om -> nom

[09:24] <sorear> masak: I'm playing with a new metamodel too, but it's not the same kind of metamodel

[09:25] <sorear> my metamodel is more concerned with LexInfo and Sub stuff

[09:25] <sorear> and .WHO

[09:25] <sorear> basically niecza/mm has a concept of 'BEGIN time'

[09:25] <sorear> and a lot of stuff that used to be delegated to INIT is now correctly done in the compiler

[09:26] <moritz_> does it properly nest?

[09:26] <jnthn> sorear: Heh, I blug about that very topic last night...

[09:26] <moritz_> ie BEGIN { say 1; BEGIN { say 2 } }

[09:26] <jnthn> http://6guts.wordpress.com/2010/09/20/gradual-typing-merged-mops-and-bounded-serialization/

[09:27] <sorear> moritz_: executing Perl 6 code at begin time is a long way off

[09:27] <sorear> this is more about stuff like package Foo { our $x }

[09:27] <sorear> the stashes are constructed in the compiler now

[09:27] <jnthn> sorear: Ah, OK, then it wasn't what I blogged about. :-)

[09:28] <jnthn> sorear: Though I guess related-ish. :-)

[09:28] <sorear> that means that we can accurately resolve variables in the compiler, all the time

[09:28] <sorear> jnthn: our goals are the same; I just need a different set of refactors to enable gradual typing

[09:28] <jnthn> Ah, OK

[09:30] <sorear> niecza/mm can accept Perl 6 code now and spit out a YAML dump with the full class hierarchy + package nesting graph

[09:30] <sorear> and subs

[09:30] <sorear> important features still missing: code generation, setting stubbing, module loading

[09:31] <dalek> niecza/mm: 9f805a5 | sorear++ | src/ (2 files):

[09:31] <dalek> niecza/mm: [mm] track static pad instantiation better

[09:31] <dalek> niecza/mm: review: http://github.com/sorear/niecza/commit/9f805a5c06187c9d4e62901ce8c28f4ca84eca4b

[09:31] <dalek> niecza/mm: ec9350b | sorear++ | src/ (2 files):

[09:31] <dalek> niecza/mm: [mm] Implement some visitors for the moptree

[09:31] <dalek> niecza/mm: review: http://github.com/sorear/niecza/commit/ec9350b2f3c40ea4fd8e162b2f22dbc644816562

[09:31] <dalek> niecza/mm: f8d692b | sorear++ | src/ (3 files):

[09:31] <dalek> niecza/mm: [mm] start prototyping the new code generator

[09:31] <dalek> niecza/mm: review: http://github.com/sorear/niecza/commit/f8d692bb1eecfac2b12f1ec5f8d30a5907c7f086

[09:32] * sorear wonders if a non-executing class hierarchy extractor would be useful to anyone else

[09:32] <moritz_> sorear: for documentation purposes, sure

[09:33] * sorear out

[09:33] <moritz_> jnthn: is the usage of .new_type (vs. new_class as currently implemented) intentional?

[09:34] <moritz_> I can see the benefit of a more broadly named method, just checking

[09:34] <jnthn> moritz_: new_type is what I've called it in 6model and the Parrot port of it so far.

[09:34] <jnthn> moritz_: I'm not totally settled on it.

[09:34] <jnthn> moritz_: But new_class when you're creating a role feels, well, odd.

[09:35] <moritz_> aye :-)

[09:42] <moritz_> jnthn++ #that blog post

[09:44] <masak> jnthn: "Thus the most we can say is that it’s narrower than the top type, Mu." -- I'm unfamiliar with the terminology here, but wouldn't "narrower than Mu" exclude Mu?

[09:45] <jnthn> oh, grr

[09:45] <moritz_> "at least as narrow"

[09:45] <jnthn> Yeah, "at least as narrow"

[09:45] <masak> aye.

[09:45] <jnthn> oh, moritz_++ beat me to it.

[09:46] <jnthn> masak++ # fixed blog post 

[09:47] <masak> jnthn++ # blog post

[09:50] *** ruoso left
[09:53] <flussence> rakudo: sub a(Num $b) { say $b }; my $x = 1; a($x) # is this the right way to accept any number type?

[09:53] <p6eval> rakudo 523da4: OUTPUT«Nominal type check failed for parameter '$b'; expected Num but got Int instead␤  in 'a' at line 22:/tmp/ov64CzgVtH␤  in main program body at line 22:/tmp/ov64CzgVtH␤»

[09:54] <moritz_> flussence: if you want to accept Num, Int and Rat, use  sub a(Real $b) { ... }   instead

[09:54] <moritz_> if you also want to accept Complex, use Numeric instead

[09:54] <flussence> oh, I didn't know it had those

[09:54] <moritz_> S02 and S32/Numeric are your friends :-)

[09:55] *** seeme joined
[09:56] <seeme> Hihi you guys

[09:56] <masak> hi seeme!

[09:56] *** risou joined
[09:56] <seeme> I'm new to perl6 alright

[09:57] <masak> alright! \o/

[09:57] <masak> we're pretty new, too :)

[09:57] <masak> except TimToady, he's been at it for 10 years...

[09:57] <moritz_> perl6: say "welcome seeme"

[09:57] <seeme> I have one question and hopefully to find an answer.. is it possible to install Net::ssl perl module on windows

[09:57] <p6eval> pugs, rakudo 523da4: OUTPUT«welcome seeme␤»

[09:57] <seeme> welcome in

[09:58] <moritz_> seeme: did you find a Perl 6 Net::SSL module somewhere?

[09:58] <masak> seeme: it sounds like a Perl 5 question.

[09:58] <seeme> yes

[09:58] <seeme> =]

[09:58] <masak> seeme: you might find better help at #perl-help over on irc.perl.org

[09:59] <seeme> thank you

[09:59] <seeme> peace

[09:59] *** seeme left
[09:59] <masak> peace.

[09:59] <moritz_> http://smolder.parrot.org/app/projects/report_details/110 this looks like a report from a system where t/spec is still svn, and thus hanging

[10:00] *** Zapelius left
[10:00] <masak> '...and thus hanging'?

[10:00] <moritz_> though I'm not quite sure

[10:00] <moritz_> 'svn up' or 'git pull' won't do anything useful in there

[10:01] *** seeme joined
[10:02] <moritz_> hm no, then more series tests would fail

[10:02] <moritz_> then I'm worried about a high number of platform specific failures

[10:02] *** pythonian4000afk is now known as pythonian4000

[10:03] *** pythonian4000 is now known as pythonian4000afk

[10:03] *** pythonian4000afk is now known as pythonian4000

[10:03] *** Zapelius joined
[10:07] *** pythonian4000 is now known as pythonian4000afk

[10:09] <seeme> It's a perl conf irc channel right

[10:09] <moritz_> we are discussing Perl 6 development and usage here

[10:09] <moritz_> or which channel was your question about?

[10:10] <masak> seeme: http://perl6.org/

[10:12] *** QinGW left
[10:15] <seeme> Ah this channel belongs to rakudo star developers 

[10:15] <moritz_> not only, but many of them are in here

[10:15] <moritz_> but there are also people working on other Perl 6 compilers, the spec, the test suite, modules etc.

[10:15] <tadzik> it's rather "everything Perl 6"

[10:16] * moritz_ implemented a new metric for $work, and now has trouble interpreting it :-)

[10:17] <jnthn> .oO( shoulda implemented a new imperial ;-) )

[10:18] <seeme> I'm writing dns poisoning exploit in perl, just to make it easy to use in public and i guess that once again i've missed it this is not the right channel i guess

[10:18] * moritz_ wonders if a #perl6-without-puns would have any chance to succeed

[10:18] <tadzik> moritz_: oh, who would sit there?

[10:18] <moritz_> tadzik: probably just bots

[10:18] <jnthn> I'd probably get kicked within like 10 minutes if I joined.

[10:19] <tadzik> moritz_: I very doubt it. purl being silenced? Bah

[10:19] <moritz_> tadzik: purl and jnthn would get bans from the start :-)

[10:19] <tadzik> (:

[10:19] <tadzik> btw guys, how do you like: Perl 6 -- keeping one liners one liners, making big things maintainable

[10:20] <seeme> =]

[10:20] *** seeme left
[10:21] <moritz_> tadzik: +1

[10:21] *** leprevost left
[10:29] *** aloha left
[10:29] *** LaVolta left
[10:30] *** bacek left
[10:41] *** barika left
[10:46] *** barika joined
[10:53] *** bacek joined
[10:58] *** aloha joined
[11:10] *** proller joined
[11:36] *** Kodi joined
[11:37] <Kodi> rakudo: sub f() { my $n = 10; gather { 1 while take --$n } }; say f.join; .print for f; say ""; # Bug or feature?

[11:37] <p6eval> rakudo 523da4: OUTPUT«0000000000␤9876543210␤»

[11:38] *** agentzh left
[11:38] <masak> bug. known.

[11:38] <Kodi> Okay.

[11:38] <masak> decontainerizing not working properly.

[11:38] <moritz_> take() doesn't propery decontainerize its arguments

[11:38] *** masak left
[11:39] <tadzik> speaking of bugs:

[11:39] <tadzik> rakudo: (1, 2, 3, 4, 6).first(9).Bool.perl.say # shouldn't it be Bool::False?

[11:39] <p6eval> rakudo 523da4: OUTPUT«0␤»

[11:39] <tadzik> rakudo: (1, 2, 3, 4, 6).first(6).Bool.perl.say

[11:39] <moritz_> yes

[11:39] <p6eval> rakudo 523da4: OUTPUT«Bool::True␤»

[11:39] <tadzik> known?

[11:39] <moritz_> rakudo: say (1).first(2).WHAT

[11:39] <p6eval> rakudo 523da4: OUTPUT«Failure()␤»

[11:40] <moritz_> rakudo: say Failure.new().Bool.perl

[11:40] <p6eval> rakudo 523da4: OUTPUT«too few positional arguments: 1 passed, 2 (or more) expected␤  in main program body at line 1␤»

[11:40] <moritz_> tadzik: not submitted, afaict

[11:40] <moritz_> rakudo: say Failure.new(3).Bool.perl

[11:40] <p6eval> rakudo 523da4: OUTPUT«Method 'handled' not found for invocant of class 'Int'␤  in main program body at line 1␤»

[11:40] <moritz_> rakudo: sail fail().Bool.WHAT

[11:40] <p6eval> rakudo 523da4:  ( no output )

[11:40] <moritz_> rakudo: say fail().Bool.WHAT

[11:40] <p6eval> rakudo 523da4:  ( no output )

[11:40] <moritz_> rakudo: say fail().Bool.perl

[11:40] <p6eval> rakudo 523da4:  ( no output )

[11:41] <moritz_> rakudo: my $x = fail(); $x.defined; say $x.Bool.WHAT

[11:41] <p6eval> rakudo 523da4:  ( no output )

[11:43] *** hirschnase joined
[11:46] *** Chat7498 joined
[11:47] *** JimmyZ joined
[11:48] *** Chat7498 left
[11:58] *** Trashlord left
[11:59] *** JimmyZ left
[12:01] <takadonet> morning all

[12:02] <moritz_> morning' takadonet 

[12:02] <takadonet> moritz_: how are u sir?

[12:02] <moritz_> takadonet: a bit tired, but otherwise very well

[12:04] <moritz_> yesterday we had a very nice evening with board and card games, self made lasagna, three types of cookies and @tasty_beverages

[12:04] <colomon> sounds lovely

[12:05] <takadonet> looks like you had a great weekend 

[12:05] *** Trashlord joined
[12:05] <moritz_> indeed :-)

[12:06] <moritz_> how about you?

[12:06] <moritz_> s/you/yourself/

[12:06] <takadonet> Had my stag party this weekend and it was lots of fun

[12:06] * moritz_ is better at writing grammars than actually using correct grammar :-)

[12:06] <takadonet> Getting marriage next Sat

[12:06] *** satyavvd left
[12:07] <moritz_> oooh, congratulations!

[12:07] <takadonet> thanks!

[12:08] <jnthn> takadonet: Congrats! :-)

[12:08] <tadzik> congratulations! :)

[12:08] * tadzik submits rakudobug

[12:08] <tadzik> (not related)

[12:09] <moritz_> phenny: tell masak that some code seems to be incomplete at http://strangelyconsistent.org/blog/idiomatic-perl-6

[12:09] <phenny> moritz_: I'll pass that on when masak is around.

[12:09] <jnthn> Was gonna say, getting married is a rakudobug these days... :-)

[12:09] <tadzik> http://rakudo.org/status btw, the graph looks funny

[12:09] * moritz_ failed to submit one last month :-)

[12:09] <moritz_> tadzik: we should really remove it

[12:10] <moritz_> since it's not updated anymore, and we've reached consensus that those numbers are basically meaningless

[12:13] <tadzik> look, moritz_ 

[12:13] <tadzik> rakudo: (1, 2, 3, 4, 6).first(9).Bool.WHAT.say; (1, 2, 3, 4, 6).first(6).Bool.WHAT.say

[12:13] <p6eval> rakudo 523da4: OUTPUT«Int()␤Bool()␤»

[12:13] * tadzik investigates further

[12:17] *** Italian_Plumber joined
[12:17] <tadzik> so it's about Failure Boolificying to Int() rather than to Bool()

[12:17] <tadzik> (is there a word: Boolification?)

[12:18] <moritz_> coercion to Bool

[12:18] <moritz_> truth test

[12:18] <tadzik> bah, sent

[12:18] <moritz_> no problem

[12:18] <moritz_> we understand what you mean :-)

[12:19] <tadzik> I think so :)

[12:19] <mathw> truthifying

[12:19] <mathw> we should have a competition

[12:19] <tadzik> I find Perl 6 people quite ok about funnywordcreating

[12:20] * moritz_ is, but he is German

[12:20] <moritz_> and Germans are creating words by concatenation all the time

[12:20] <tadzik> doesn't matter I think

[12:20] <jnthn> mathw: btw, where'd you hear about the London - Frankfurt ICE plan?

[12:20] <jnthn> mathw: That'd be teh awesome...

[12:21] <moritz_> from Frankfurt it's only 2h by train to my place

[12:21] <moritz_> ok, 2.5h

[12:22] <gfldex> jnthn: http://www.guardian.co.uk/world/2010/sep/19/london-frankfurt-train-high-speed

[12:22] <mathw> jnthn: unfortunately not until the end of 2013 even if it allg oes well

[12:22] <mathw> jnthn: but I love that they're trying

[12:23] <jnthn> Ooh, stop in cologne is nice too

[12:23] <jnthn> Since I can get a sleeper train to there from here.

[12:24] <jnthn> Though of course who knows if I'll still be here by 2013. :-)

[12:24] <jnthn> Anyway, awesome that it's on the cards.

[12:24] <jnthn> db++

[12:26] <mathw> yeah if it happens I'll definitely be visiting Germany more

[12:26] <mathw> a stop at cologne would be awesome to visit my aunt

[12:26] <mathw> as it's easy to change for a dusseldorf train from there

[12:26] <mathw> and then get the U-bahn to a couple of streets away from her house :)

[12:26] <mathw> although I could probably do that now

[12:26] <mathw> must be a way there from brussels

[12:29] <jnthn> There's a direct Brussels - Cologne ICE.

[12:31] *** WinstonSmith joined
[12:34] <mathw> awesome

[12:35] <mathw> does it happen to stop at Düsseldorf?

[12:36] <jnthn> I don't think so.

[12:36] <jnthn> Liege and Aachen iirc

[12:37] *** bluescreen joined
[12:41] *** ruoso joined
[12:42] <mathw> ah well

[12:42] <mathw> two changes is still better than flying

[12:42] <mathw> urgh

[12:42] <jnthn> Aye

[12:42] <jnthn> And since it's run by DB, there's a decent chance of it being on time.

[12:42] <mathw> yup

[12:43] <mathw> although that's irrelevant in a way, as I have to get to St Pancras on time and the Eurostar has to be on time too

[12:43] <jnthn> Unlike crappy Skånetrafiken.

[12:43] <jnthn> Well, true.

[12:43] *** icwiener joined
[12:46] *** [Coke] joined
[12:47] *** ggoebel joined
[12:48] <mathw> And that relies on East Midlands Trains

[12:48] <mathw> so... err...

[12:48] <mathw> leave plenty of time for your journey

[12:48] <[Coke]> http://rt.perl.org/ "(perl 5.6 is not perl6. perl6 has not been released yet.) "

[12:48] <phenny> [Coke]: 14 Sep 07:56Z <moritz_> tell [Coke] about http://irclog.perlgeek.de/perl6/2010-09-14#i_2822295

[12:48] <mathw> ...

[12:49] * moritz_ writes to the bug admins

[12:49] <[Coke]> should probably provide them some text to point to the perl6 queue that they are already hosting.

[12:49] <[Coke]> phenny: tell lichtkind - please give me the exact URL including the tag for your feed.

[12:49] <phenny> [Coke]: I'll pass that on when lichtkind is around.

[12:49] <[Coke]> phenny: tell lichtkind to email me at [email@hidden.address] for that.

[12:49] <phenny> [Coke]: I'll pass that on when lichtkind is around.

[12:52] <mathw> Does anybody have any experience of managing a big codebase consisting of various libraries and components which use those libraries, managed either as a single repository (by 'library' I don't mean anything that has its own release schedule) or separate ones?

[12:54] * [Coke] wonders how you get to the front page of the perl5 tracker.

[12:54] <moritz_> currently it's a huge mess

[12:54] <tadzik> . o O ( Rakudo #5 is not Perl 5 )

[12:55] <moritz_> rt.perl.org and bug6.perl.org show the same page

[13:08] *** perlygatekeeper joined
[13:13] *** icwiener left
[13:13] *** kaare_ left
[13:16] *** baLi_antiQ joined
[13:17] *** plainhao joined
[13:17] *** Patterner left
[13:18] <baLi_antiQ> hello

[13:18] <baLi_antiQ> night all

[13:18] <baLi_antiQ> how are you ??

[13:18] *** baLi_antiQ left
[13:18] *** estrabd_afk is now known as estrabd

[13:19] *** patspam joined
[13:21] *** Zapelius left
[13:24] *** icwiener joined
[13:29] *** Psyche^ joined
[13:29] *** Psyche^ is now known as Patterner

[13:30] <moritz_> rakudo: multi f ($ (Int $value)) { say "Int $value" }; multi f( $ (Str $value)) { say "Str $value" }; f(3); f('foo')

[13:31] <p6eval> rakudo 523da4: OUTPUT«No applicable candidates found to dispatch to for 'f'. Available candidates are:␤:(Any  (Int $value))␤:(Any  (Str $value))␤␤  in main program body at line 22:/tmp/APQK9Ppsyn␤»

[13:31] <moritz_> rakudo: multi f ($ (Int $value)) { say "Int $value" }; multi f( $ (Str $value)) { say "Str $value" }; f('a' => 3); f('a' => 'foo')

[13:31] <p6eval> rakudo 523da4: OUTPUT«No applicable candidates found to dispatch to for 'f'. Available candidates are:␤:(Any  (Int $value))␤:(Any  (Str $value))␤␤  in main program body at line 22:/tmp/ki2Gl6432l␤»

[13:31] <moritz_> jnthn: should that work?

[13:32] <moritz_> after all the pairs have a .value method that returns an Int or a Str

[13:32] <jnthn> Hmm

[13:33] <moritz_> thought it probably looks misleadingly declarative

[13:33] <moritz_> *though

[13:33] <jnthn> rakudo: multi f ($ (Int :$value)) { say "Int $value" }; multi f( $ (Str :$value)) { say "Str $value" }; f('a' => 3); f('a' => 'foo')

[13:33] <p6eval> rakudo 523da4: OUTPUT«Ambiguous dispatch to multi 'f'. Ambiguous candidates had signatures:␤:(Any  (Int :value($value)))␤:(Any  (Str :value($value)))␤␤  in main program body at line 22:/tmp/6gqT8mG2KW␤»

[13:34] <jnthn> Interesting...

[13:34] <toebu> moriz_ what does the lone $ do in f($ ... or rather what is it suposed todo ?

[13:34] <moritz_> ah right, need to be named

[13:34] <moritz_> toebu: it's an anonymous positional parameter

[13:34] <jnthn> moritz_: Yeah...even then, I'm a tad surprised about the ambiguity though.

[13:35] <jnthn> I'm not sure I understand why it's calling it out as ambiguous.

[13:35] <jnthn> That's worth of investigation.

[13:35] <moritz_> and worth a ticket :-)

[13:35] <jnthn> Sure, otherwise I'll forget. :-)

[13:35] *** Trashlord left
[13:37] *** tadzik left
[13:37] <ggoebel> phenny, tell sorear "wonders if a non-executing class hierarchy extractor would be useful"... Sounds good for documentation. Also anything that moves us closer to being able to do static code analysis and dead code detection would be useful. Notes Alias' blog post on "Why Perl6 scares the hell out of me" (http://use.perl.org/~Alias/journal/35508)

[13:37] <phenny> ggoebel: I'll pass that on when sorear is around.

[13:37] <phenny> ggoebel: 14 Sep 18:40Z <sorear> tell ggoebel Nowhere yet

[13:38] *** satyavvd joined
[13:41] <jnthn> moritz_: My feeling is that the signature bindability check should only work for one of them.

[13:41] <moritz_> same here

[13:41] <moritz_> submitted as RT #77950

[13:41] *** satyavvd_ joined
[13:42] *** tadzik joined
[13:42] <jnthn> oh duh

[13:42] <jnthn> Looks like a stupid 

[13:42] <jnthn> Around line 255 of perl6multisub.pmc

[13:43] <jnthn> The check at line 265 should probably be moved before the one at line 255.

[13:43] *** satyavvd left
[13:43] *** satyavvd_ is now known as satyavvd

[13:43] <jnthn> jnthn--

[13:43] <jnthn> I bet there's another RT ticket that'd be fixed by that too.

[13:44] <moritz_> you mean

[13:44] <moritz_> info->bind_check = 1;

[13:44] <moritz_> should be set unconditionally?

[13:45] *** Guest23195 joined
[13:45] * moritz_ confused, ignore that

[13:46] <jnthn> no no

[13:46] <jnthn>  /* If it's got a sub-signature, also need a bind check. */

[13:46] <moritz_> right

[13:46] <jnthn> That check needs doing probably before the named and not slurpy one

[13:46] <moritz_> that needs to go before the continue;

[13:46] <jnthn> Yeah, I think so.

[13:46] <jnthn> That may be the fix for this bug.

[13:46] <moritz_> spectesting now...

[13:47] <jnthn> If it doesn't, it's still a fix for something. :-)

[13:47] <jnthn> oh, hang on...

[13:48] <jnthn> No, I'm not sure it's wrong actually

[13:48] <jnthn> Because it always sets bind_check before continue-ing.

[13:48] <moritz_> right

[13:49] <jnthn> Oh!!

[13:49] <jnthn> Er

[13:49] <jnthn> It may not be a bug.

[13:49] <jnthn> rakudo: multi f ($ (Int :$value!)) { say "Int $value" }; multi f( $ (Str :$value!)) { say "Str $value" }; f('a' => 3); f('a' => 'foo')

[13:49] <p6eval> rakudo 523da4: OUTPUT«No applicable candidates found to dispatch to for 'f'. Available candidates are:␤:(Any  (Int :value($value)!))␤:(Any  (Str :value($value)!))␤␤  in main program body at line 22:/tmp/DBB23kVew9␤»

[13:50] <jnthn> OK, that looks more like one...

[13:50] <jnthn> Thing is that it *can* match both signatures maybe if the parameter is optional

[13:50] <jnthn> OTOH it should still fail the type check

[13:50] <jnthn> So, hm

[13:50] * moritz_ adds that to the ticket

[13:50] <jnthn> rakudo: ('a' => 3).Capture.perl

[13:50] <p6eval> rakudo 523da4:  ( no output )

[13:50] <jnthn> rakudo: ('a' => 3).Capture.perl.say

[13:50] <p6eval> rakudo 523da4: OUTPUT«\()␤»

[13:50] <jnthn> Oh.

[13:51] <jnthn> rakudo: (1/2).Capture.perl.say

[13:51] <p6eval> rakudo 523da4: OUTPUT«\("numerator" => 1, "denominator" => 2)␤»

[13:51] <jnthn> OK, pair capture coercion is FAIL

[13:52] * moritz_ aborts spectest run

[13:52] *** PacoLinux joined
[13:52] *** slavik left
[13:53] <jnthn> Please add capture coercion busted note to ticket - I think that's what is really at the bottom of this.

[13:53] <jnthn> er, Pair to Capture coercion.

[13:54] <moritz_> yes, did that

[13:55] <jnthn> Thanks

[13:55] <jnthn> moritz_++

[13:57] <moritz_> rakudo: say .WHAT for (a => 2).keys

[13:57] <p6eval> rakudo 523da4: OUTPUT«Array()␤»

[13:57] <moritz_> I guess that should be Str, no?

[13:58] * moritz_ tries to fix Pair capturification

[13:58] <jnthn> I don't think that's why it's broken. (more)

[13:59] <jnthn> I think the issue is that it uses attribute introspection and looks for those marked as having an accessor method.

[13:59] <jnthn> And I guess for Pair it doesn't find that, perhaps 'cus Pair is written in PIR

[13:59] <moritz_> right

[14:00] *** molaf joined
[14:00] *** slavik joined
[14:01] <moritz_> so the right fix would be to mark the $!key and $!value attributes as having an accessor

[14:05] <jnthn> has $.key; has $.value; # does it in Perl 6.

[14:05] <moritz_> uhm

[14:05] <jnthn> as opposed to $!key and $!value

[14:05] <moritz_> but don't we need to set the attributes from PIR somewhere, before the setting has been compiled?

[14:05] <jnthn> Well, that may be why it's written in NQP, yeah.

[14:06] <jnthn> er

[14:06] <jnthn> gah

[14:06] <jnthn> in PIR

[14:06] <Kodi> rakudo: say join " ", <A B C D> >>~>> (1, 2, *)

[14:06] <p6eval> rakudo 523da4: OUTPUT«A1 B2 CWhatever()<0x53b7240> D1␤»

[14:12] *** gottreu left
[14:23] *** bluescreen left
[14:23] *** wtw left
[14:24] *** mberends joined
[14:25] *** sftp joined
[14:25] *** wamba left
[14:26] <dalek> roast: 665a134 | KodiB++ | S03-metaops/ (2 files):

[14:26] <dalek> roast: Additions and unfudging for arguments ending with * to hypers and zips.

[14:26] <dalek> roast: review: http://github.com/perl6/roast/commit/665a134c2a9a85047cc6190862067dd1ff4afdaf

[14:27] *** Kodi left
[14:30] <dalek> rakudo: be80e96 | KodiB++ | src/core/ (2 files):

[14:30] <dalek> rakudo: Made zips extend arguments ending with *.

[14:30] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/be80e96315775c042db503f79500ff7777b10275

[14:33] *** mfollett joined
[14:35] <pmichaud> good morning, #perl6

[14:36] <tadzik> good morning pmichaud

[14:36] <jnthn> morning, pmichaud 

[14:37] <jnthn> Well, afternoon here akshually. :-)

[14:38] <mberends> \o it's beer-time in .nl :)

[14:40] *** bluescreen joined
[14:41] <jnthn> oh noes I'm in the wrong country!

[14:41] *** nymacro left
[14:42] <moritz_> it's Erlange.pm day today

[14:43] * jnthn accidentally read that as Enlarge.pm

[14:44] <jnthn> "The growing PM group!"

[14:44] <moritz_> missing n

[14:44] <moritz_> Erlangen.pm

[14:44] * moritz_ really can't type today

[14:44] * TimToady read it as Erlang.pm

[14:45] * TimToady needs to get out more...

[14:46] <dalek> 6model: a829cc5 | mberends++ | java/runtime/ (18 files):

[14:46] <dalek> 6model: [java] complete all Reperesentations (P6num P6str etc) and refactor

[14:46] <dalek> 6model: review: http://github.com/jnthn/6model/commit/a829cc5080d83577471cb4e84e4ebb3329d9abb2

[14:46] <jnthn> wow!

[14:46] <jnthn> mberends++

[14:46] <mberends> "Reperesentations" :/

[14:47] <mberends> jnthn: I'm beginning to think about java/compiler layout now

[14:47] <jnthn> Oh, I just spot it as "long word that starts with an R" by now :-)

[14:47] <moritz_> R*

[14:47] <moritz_> erm

[14:47] <moritz_> R.*

[14:48] <moritz_> erm

[14:48] <moritz_> R\w+

[14:48] <mberends> lol

[14:48] <jnthn> heh :-)

[14:48] <jnthn> mberends: Starting out with what's in dotnet/compiler may not be too bad.

[14:49] <jnthn> mberends: Though I guess that way you'll kinda need to be able to handle the setting

[14:49] <mberends> jnthn: I want to s/DNST/JST/ on that. good idea?

[14:49] <jnthn> But you can always make a reall small setting first :-)

[14:50] <jnthn> mberends: Moze byt...I did wonder if we might at some point be able to make some generic *ST that maps easily to JVM and the CLR.

[14:50] <jnthn> mberends: But probably easiest to do as you suggest for now and unify it once we know how they both look.

[14:51] <mberends> jnthn: yes, *ST seems the way to go, you should name it generically when we get that far.

[14:51] <jnthn> Yeah

[14:51] <jnthn> Let's work out what both sides want for now.

[14:51] <mberends> oki

[14:51] <jnthn> I suspect you won't have to change too much to get it to spit out Java rather than C\ though

[14:51] <jnthn> er, C#

[14:51] <jnthn> They're not *that* different at the level DNST is using 'em. ;-)

[14:52] <jnthn> The real point of [DNST|JST] is that some day we'll go from it to bytecode.

[14:52] <jnthn> But for now the text generation is vastly easier.

[14:53] <mberends> yes, it does look that way. I want to first look at the toolchain dependencies, makefiles, scripts etc.

[14:53] <jnthn> *nod*

[14:54] <jnthn> Feel free to ask anything where bits are unclear.

[14:55] <mberends> :) sure.  The $hotel.network blocks git and irc, so I'll be using webchat later

[14:56] <jnthn> hotel--

[14:57] <mberends> it's a nice place otherwise, I got a download speed of 6000kB/s on the netbook!

[14:57] <jnthn> wow!

[14:57] <flussence> uppercase B?!

[14:57] <mberends> yes Bytes, so about 50Mbit/s

[14:58] <jnthn> Nice. Which country?

[14:58] <mberends> .nl at a college that includes a hotel school.

[14:58] <jnthn> Aha :-)

[15:04] *** mberends left
[15:05] *** Trashlord joined
[15:06] *** mfollett left
[15:06] <mathw> jnthn, mberends: really pleased to see stuff going on in 6model like that :)

[15:06] *** wamba joined
[15:06] <mathw> it's exciting

[15:07] <mathw> jnthn: your blog post made me very excited about what's coming, and also made me feel a little stupid because it sounds really deep and magical

[15:07] <mathw> I should probably learn how it works to make myself feel smarter

[15:08] <moritz_> it's scary that I actually had the feeling to understand it at all, at least at some basic level

[15:08] <mathw> I could follow what jnthn was writing about

[15:08] <mathw> But I'm not so sure about the actual mechanisms of implementation

[15:10] *** mfollett joined
[15:13] *** Chillance joined
[15:13] <jnthn> I think most of the problem there is not so much that the underlying data structures and algorithms are all that complex, so much as it is that most people don't have to implement stuff in this domain very often.

[15:14] <mathw> you could be right

[15:14] <mathw> it's very much outside my area of experience

[15:14] <mathw> so would probably be very healthy to delve into, but I keep saying that about Rakudo too

[15:14] * mathw -> home &

[15:14] *** Italian_Plumber left
[15:15] <moritz_> and one has to realize that classes aren't god given, but they are just data structures and algorithms like everything else

[15:16] <jnthn> moritz_: Yeah. The only point that gets complex is that you can say "OK, classes are implemented in terms of this other thing", but you have to have some primitive that loops back on itself eventually.

[15:16] <moritz_> right

[15:16] <jnthn> http://github.com/perl6/nqp-rx/blob/nom/src/metamodel/knowhow_bootstrapper.c is how that actually ends up looking in the Parrot impl though.

[15:18] *** gbacon left
[15:23] *** Fox5600 joined
[15:24] <Fox5600> sup guys, is the ordering of the junction matching supposed to matter ?

[15:25] <TimToady> not to the programmer

[15:25] <Fox5600> rakudo: any("a","b","c") ~~ "a"'

[15:25] <p6eval> rakudo be80e9: OUTPUT«===SORRY!===␤Confused at line 22, near "any(\"a\",\"b"␤»

[15:25] <Fox5600> rakudo: any("a","b","c") ~~ "a"

[15:25] <p6eval> rakudo be80e9:  ( no output )

[15:25] <TimToady> so the implementation is free to do it in whatever order it thinks will falsify the fastest

[15:25] <jnthn> rakudo: say any("a","b","c") ~~ "a"

[15:25] <p6eval> rakudo be80e9: OUTPUT«0␤»

[15:25] <TimToady> or to parallelize it

[15:25] <Fox5600> rakudo: "a" ~~ any("a","b","c")

[15:25] <p6eval> rakudo be80e9:  ( no output )

[15:26] <Fox5600> rakudo: say "a" ~~ any("a","b","c")

[15:26] <p6eval> rakudo be80e9: OUTPUT«1␤»

[15:26] <jnthn> That's not junction ordering though.

[15:26] <jnthn> That's just that smart-match isn't symmetric.

[15:26] <Fox5600> hmm, its a bug then ?

[15:26] *** Mowah left
[15:26] <jnthn> No, it's correct

[15:26] *** Ross joined
[15:27] <jnthn> The type of the thing on the right hand side of ~~ controls what kind of matching is done

[15:27] <Fox5600> hmm 

[15:27] <Fox5600> I see

[15:27] <TimToady> used to be symmetrical, but that made it impossible to optimize

[15:27] <jnthn> "a" ~~ any("a","b","c") means "do any of the things in the junction smart-match against "a""

[15:28] <TimToady> you couldn't even make a jump table for when 1 {}; when 2 {}; ...

[15:28] <jnthn> The other way round is "if you stringify the junction, is it the string "a"

[15:28] <Fox5600> a got it

[15:29] <Fox5600> thanks

[15:29] <TimToady> you're very welcome

[15:30] *** Ross^ joined
[15:30] <jnthn> walk &

[15:31] *** Ross left
[15:33] *** Mowah joined
[15:36] *** envi^home left
[15:36] *** spq1 joined
[15:37] *** ruoso left
[15:38] <moritz_> http://axisofeval.blogspot.com/2010/04/why-i-ignore-clojure.html somehow that's a weird mixture of true things and unequaled arrogance

[15:39] <moritz_> "And there have been and are so many smart people in this community, that if you think you've got the great new idea to push Lisp farther, you're wrong."

[15:39] <moritz_> "it's 1900. Everything that could have been invented has been invented by now. We understand the world at its core"

[15:39] <moritz_> or so

[15:40] *** mberends joined
[15:40] *** alester joined
[15:40] *** gottreu joined
[15:45] *** Holy_Cow joined
[15:48] <Fox5600> how do I load parrot modules ? like Curses.pir ?

[15:48] <tadzik> see Digest-MD5

[15:50] <Fox5600> wow, that work like the use ? will it export functions ?

[15:51] *** bluescreen left
[15:51] <moritz_> star: use Digest::MD5; say "alive"

[15:51] <p6eval> star 2010.07: OUTPUT«===SORRY!===␤Unable to find module 'Digest::MD5' in the @*INC directories.␤(@*INC contains:␤  /home/p6eval/.perl6/lib␤  /home/p6eval/rakudo-star-2010.07/install/lib/parrot/2.6.0/languages/perl6/lib␤  .)␤»

[15:51] <Fox5600> http://github.com/cosimo/perl6-digest-md5/blob/master/lib/Digest/MD5.pm i presume

[15:55] *** thowe left
[15:56] *** Mowah left
[15:57] <tadzik> Fox5600: yes indeed

[15:57] <tadzik> you have to play a little to make it usable

[15:58] <Fox5600> I can only call functions from inside Q:PIR {} blocks then :/

[15:59] <moritz_> but you can wrap them in Perl 6 subs or methods

[16:02] <pmichaud> if the parrot modules follow the exporting API, then they'd be usable from Rakudo.

[16:02] *** M_o_C joined
[16:03] *** ruoso joined
[16:03] <Fox5600> I tried use Curses:from<parrot>; but looks like it doesn't work yet

[16:04] <pmichaud> Fox5600: I suspect that's because the Curses module likewise doesn't export its functions.

[16:07] *** bluescreen joined
[16:07] *** Mowah joined
[16:08] <Fox5600> you mean the Curses.pir doesn't support the export API from parrot

[16:08] <pmichaud> right

[16:09] <Fox5600> but using the Digest::MD5 method will it work ?

[16:09] <pmichaud> I think Digest::MD5 has been updated to support it.

[16:10] <pmichaud> I'm not certain which ones have or have not been updated.

[16:10] <pmichaud> I know there's been some work to get Digest::MD5 to work with Rakudo.

[16:10] <pmichaud> But it's the only one I've heard about.

[16:10] <Fox5600> the export API is the pdd21 ?

[16:11] *** WinstonSmith left
[16:11] <pmichaud> pdd31_hll, I think.

[16:12] <moritz_> does dalek track rakudo/star ?

[16:13] <pmichaud> I don't know.

[16:14] * moritz_ greps

[16:14] <moritz_> seems like not.

[16:14] * moritz_ changes it

[16:15] <tadzik> speaking of modules, how about including neutro?

[16:15] <tadzik> it's even make-independent these days

[16:17] <tadzik> and I think I made it even work on windows, but still haven't poked jnthn enough to make him test it :)

[16:19] *** cdarroch joined
[16:19] *** cdarroch left
[16:19] *** cdarroch joined
[16:22] *** timbunce left
[16:23] *** satyavvd left
[16:24] <dalek> mu: d98c4aa | moritz++ | misc/dalek-conf.json:

[16:24] <dalek> mu: track rakudo/star in dalek

[16:24] <dalek> mu: review: http://github.com/perl6/mu/commit/d98c4aa0f140d83491159ff33970c328aa8f2784

[16:28] <TimToady> I don't want to push Lisp farther; I just want to pull the good bits of Lisp closer.  :)

[16:28] *** timbunce joined
[16:29] *** pmurias joined
[16:33] <szbalint> :q

[16:33] * hugme hugs szbalint, good vi(m) user!

[16:33] <szbalint> err yeah

[16:40] * [Coke] wonders what the threshold of automatic bot response compared to user annoyance is.

[16:40] <[Coke]> (in this channel).

[16:43] *** paul1234 joined
[16:44] *** pmurias left
[16:46] *** M_o_C left
[16:50] <tadzik> sorear: ping

[16:54] *** paul1234 left
[16:57] *** dakkar left
[17:04] *** justatheory joined
[17:10] *** jfried joined
[17:15] *** patch joined
[17:15] <betterworld> rakudo: my $foo = (3, 8); flat($foo).perl

[17:15] <p6eval> rakudo be80e9:  ( no output )

[17:15] <patch> is the next rakudo * release on the 30th?

[17:16] <betterworld> rakudo: my $foo = (3, 8); flat($foo).perl.say

[17:16] <p6eval> rakudo be80e9: OUTPUT«((3, 8))␤»

[17:16] <betterworld> why are there two pairs of parentheses?  isn't flat supposed to.. flatten the thing?

[17:19] *** mberends left
[17:24] <tadzik> patch: 28th I think

[17:30] *** daxim left
[17:36] *** mfollett left
[17:41] *** risou left
[17:58] *** proller_ joined
[17:58] *** proller left
[18:05] *** jferrero left
[18:08] *** mfollett joined
[18:10] *** Italian_Plumber joined
[18:10] <mfollett> Anybody know who this page belongs to? http://gil.di.uminho.pt/users/smash/rakudo-bench.html

[18:12] <sjn> mfollett: smash is your guy

[18:12] <PerlJam> Looks like smash  to me

[18:12] <sjn> seen smash?

[18:12] <aloha> smash was last seen in #perl6 7 days 5 hours ago saying "hello everyone".

[18:13] *** colomon left
[18:14] <mfollett> Thanks, I am hoping to get permission to use that in a talk in October at Strange Loop.

[18:16] *** araujo joined
[18:16] *** araujo left
[18:16] *** araujo joined
[18:24] <PerlJam> betterworld: contrast this:

[18:24] <PerlJam> rakudo: my $foo = (3, 8);  $foo.flat.perl.say

[18:24] <p6eval> rakudo be80e9: OUTPUT«(3, 8)␤»

[18:25] <PerlJam> rakudo: my $foo = (3, 8); flat($foo).WHAT.say;  $foo.flat.WHAT.say;

[18:26] <p6eval> rakudo be80e9: OUTPUT«List()␤Seq()␤»

[18:26] *** jan_ joined
[18:28] *** jfried left
[18:31] <flussence> is there a way to use a grammar as part of another grammar?

[18:32] <betterworld> PerlJam: hm, confusing.  thanks, then .flat seems to be what I need

[18:32] <PerlJam> betterworld: I don't know if there's a bug there or not though.

[18:32] <PerlJam> flussence: you mean like inheritance?

[18:33] <PerlJam> flussence: or like roles?

[18:33] <flussence> as in parsing a HTML file, then calling separate grammars for <style> and <script> contents

[18:33] <flussence> things like that

[18:34] <jnthn> I think <GrammarName::foo> is meant to work, but wasn't implemented last I checked.

[18:34] <jnthn> pmichaud would know for sure

[18:35] <pmichaud> there's still some question about it.

[18:35] <pmichaud> it may be affected by the rules with lexical regexes

[18:35] <pmichaud> so far it's still spec, I think.

[18:36] *** rgrau` joined
[18:37] <pmichaud> although I think I might know of a way to implement it short-term.

[18:38] <diakopter> rakudo: class A is Perl { }

[18:38] <p6eval> rakudo be80e9: OUTPUT«===SORRY!===␤No applicable candidates found to dispatch to for 'trait_mod:<is>'. Available candidates are:␤:(Mu $child, Role $r)␤:(Routine $r, Any :default($default)!)␤:(Code $block, Any $arg?, Any :export($export)!)␤:(Mu $child, Mu $parent)␤:(Mu $type where ({ ... }), Any

[18:38] <p6eval> ..:rw($rw)…

[18:38] <diakopter> rakudo: role A is Perl { }

[18:38] <p6eval> rakudo be80e9:  ( no output )

[18:39] <diakopter> std: role was is was { }

[18:39] <p6eval> std : OUTPUT«ok 00:01 114m␤»

[18:39] *** mberends joined
[18:44] <mfollett> Should there be a difference in the result of 'A' ~~ 'A' | 'C' and 'A' | 'C' ~~ 'A'?

[18:44] <flussence> ~~ isn't symmetrical

[18:45] <flussence> the first one will probably do what you mean

[18:45] <mfollett> flussence: It does, thanks

[18:51] *** meppl left
[18:51] *** ruoso left
[18:58] *** Khisanth left
[19:00] *** Khisanth joined
[19:01] <mfollett> If I have an Any Junction as a hash key will it eventually be the case that I will be able to put any value the junction matches to match that hash key?  Right now it is the last value in the junction that matches.

[19:01] *** tri joined
[19:05] *** mfollett_ joined
[19:06] *** __rnddim__ joined
[19:07] *** mfollett left
[19:07] *** mfollett_ is now known as mfollett

[19:08] *** ruoso joined
[19:08] *** lue left
[19:08] <flussence> rakudo: my %x = (1|2) => 'a', 3 => 'b'; say %x.perl;

[19:08] <p6eval> rakudo be80e9: OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in '!STORE' at line 5052:CORE.setting␤  in main program body at line 22:/tmp/D6xq2xKwUn␤»

[19:09] <flussence> rakudo: my %x = ((1|2) => 'a', 3 => 'b'); say %x.perl;

[19:09] <p6eval> rakudo be80e9: OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in '!STORE' at line 5052:CORE.setting␤  in main program body at line 22:/tmp/oYpS9uvsNU␤»

[19:09] <flussence> ack

[19:09] <flussence> rakudo: my $w = (1|2); my %x = $w => 'a', 3 => 'b'; say %x.perl;

[19:09] <mfollett> rakudo: my $junc = 'A' | 'B' | 'C'; my %foo = $junc => 'bronze'; say %foo

[19:09] <p6eval> rakudo be80e9: OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in '!STORE' at line 5052:CORE.setting␤  in main program body at line 22:/tmp/8t2cJwbMkB␤»

[19:09] <p6eval> rakudo be80e9: OUTPUT«C  bronze␤»

[19:10] <mfollett> flussence: that is the example I was playing with

[19:10] <flussence> oh right, I was trying to use numbers as keys...

[19:11] <mfollett> flussence: why didn't that work?

[19:11] <flussence> rakudo: my $w = 'j'|'k'; my %x = $w => 'a', 'l' => 'b'; say %x<$w>.perl;

[19:11] <p6eval> rakudo be80e9: OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in '!STORE' at line 5052:CORE.setting␤  in main program body at line 22:/tmp/WW9j08yaHu␤»

[19:11] <mfollett> rakudo: my $junc = 'A' | 'B' | 'C'; my %foo = $junc => 'bronze'; say %foo.perl

[19:12] <p6eval> rakudo be80e9: OUTPUT«{"C" => "bronze"}␤»

[19:12] <flussence> looks like it's taking one value from the junction when it creates the hash...

[19:13] <flussence> rakudo: my $j='A'|'B'; my $pair = $j=>'k'; say $pair.WHAT; say $pair.perl;

[19:13] <p6eval> rakudo be80e9: OUTPUT«Junction()␤any("A" => "k", "B" => "k")␤»

[19:13] <mfollett> all my tests so far seem to indicate it takes the last one

[19:13] <flussence> interesting

[19:14] *** molaf left
[19:17] *** stkowski joined
[19:18] *** timbunce left
[19:19] *** timbunce joined
[19:20] *** wamba left
[19:22] <mfollett> This seems not right: rakudo: my $j='A'|'B'; my $pair = $j=>'k'; say('k' ~~ $pair.kv); $pair.kv.say

[19:22] <mfollett> rakudo: my $j='A'|'B'; my $pair = $j=>'k'; say('k' ~~ $pair.kv); $pair.kv.say

[19:22] <p6eval> rakudo be80e9: OUTPUT«1␤any("A", "k", "B")␤»

[19:25] <flussence> rakudo: my $j='A'|'B'; my $pair = $j=>'k'; say $pair.kv.perl

[19:25] <p6eval> rakudo be80e9: OUTPUT«any("A", "k", "B")␤»

[19:25] <flussence> surely that should be an even-length list...

[19:26] *** plainhao left
[19:27] <flussence> S32:707 implies it does...

[19:29] *** toebu left
[19:29] <sorear> good * #perl6

[19:29] <phenny> sorear: 13:37Z <ggoebel> tell sorear "wonders if a non-executing class hierarchy extractor would be useful"... Sounds good for documentation. Also anything that moves us closer to being able to do static code analysis and dead code detection would be useful. Notes Alias' blog post on "Why Perl6 scares the hell out of me" (http://use.perl.org/~Alias/journal/35508)

[19:30] <tadzik> sorear: sounds like I'll have time tomorrow 16:00 UTC

[19:31] *** mfollett left
[19:31] *** mfollett joined
[19:34] *** toebu joined
[19:34] <sorear> I just hope people take advantage of it

[19:39] <sorear> tadzik: pong

[19:40] <tadzik> sorear: sounds like I'll have time tomorrow 16:00 UTC

[19:41] <mfollett> flussence: Do you think I should submit that as a bug?

[19:42] <flussence> I'm not sure what's correct in this case TBH, best to wait for someone else's opinion.

[19:42] *** icwiener left
[19:43] *** ruoso left
[19:43] *** rgrau` left
[19:48] <mfollett> Ok, I'll see if anyone else chimes in.

[19:53] *** baest_ joined
[19:54] *** Ross^ left
[19:54] *** baest left
[19:55] * TimToady revised http://rosettacode.org/wiki/Forest_fire#Perl_6

[19:56] <sorear> pmichaud et al: Curses is written to pdd21.  pdd21 is not good enough for Blizkost, so I patched Rakudo to move to pdd31

[19:56] <tadzik> pdd?

[19:57] <sorear> ParrotDesignDocument

[19:57] <tadzik> mhm

[19:57] <sorear> tadzik: 1600 UTC is not a good time for me

[19:57] *** Fox5600 left
[19:57] <sorear> tadzik: unless you meant for #cpan6sketch, but then why are you telling me?

[19:58] *** Italian_Plumber left
[19:58] <tadzik> sorear: wasn't that you who've been asking me about this DateTime?

[19:58] <tadzik> yes, about cpan6sketch

[19:59] <sorear> sorear != #cpan6sketch

[19:59] <tadzik> TimToady: I get Symbol '$RED木' not predeclared in <anonymous> (asd.pl:5)

[20:00] *** ruoso joined
[20:00] <sorear> pinging me personally is utterly useless, since I won't even make it

[20:00] <sorear> try joining the channel instead

[20:00] <sorear> hi ruoso

[20:00] <tadzik> 2010-09-19 11:25:04 sorear | tadzik: up for 1600 UTC Tue? # that's why I replied back to you

[20:01] <sorear> oh

[20:01] <TimToady> tadzik: oh, interesting

[20:01] <TimToady> I wonder how that worked with my rakudo...

[20:01] <takadonet> i see the map.... but nothing happening

[20:02] <takadonet> nevermind!

[20:02] *** cotto left
[20:03] <TimToady> yes, it used to be even slower, recalculating all the neighbors every time through

[20:03] <TimToady> using private attrs should also be faster than public

[20:04] <TimToady> rakudo was also getting rather confused over string-valued enums

[20:04] <gottreu> is 木 considered alpha-numeric?

[20:04] <TimToady> yes, but apparently not by my rakudo :/

[20:05] <jnthn> rakudo: say '木' ~~ /\w/

[20:05] <p6eval> rakudo be80e9: OUTPUT«木␤»

[20:05] <jnthn> rakudo: say '木' ~~ /<alpha>/

[20:05] <p6eval> rakudo be80e9: OUTPUT«木␤»

[20:05] <jnthn> :/

[20:05] <jnthn> TimToady: Your build has ICU support too?

[20:06] <jnthn> Though I'd expect it to explode rather than just fail to match 木 as alpha...

[20:06] <TimToady> I had presumed so, but maybe my file thinks it's in latin-1 or sumpthin

[20:08] <TimToady> apparently I don't have ICU here

[20:08] <TimToady> :(

[20:08] <tadzik> I with it'd be faster so it'd look awesome

[20:08] <jnthn> IC...U need to get it then. ;-)

[20:09] <TimToady> I did once, I wonder where it wented...

[20:12] <gottreu> what should "$RED木$CLEAR" be changed to?

[20:12] <TimToady> what it sez now

[20:14] <sorear> TimToady: if I have A.pm: module A; sub foo is export { say $GLOBAL::x }; main.pl: our $x = 5; use A; foo;

[20:14] * gottreu forgot Perl6 is not Perl5 for a moment.  . is not ~

[20:14] <tadzik> gottreu: wotks with {$RED}Ó$CLEAR

[20:14] <sorear> TimToady: it'll say Any() because GLOBAL:: points at A.pm's GLOBAL?

[20:14] <tadzik> not Ó but that witty character of course

[20:15] <gottreu> tadzik, that's the syntax i was trying to remember

[20:15] <tadzik> .u 木

[20:15] <phenny> U+6728 CJK UNIFIED IDEOGRAPH-6728 (木)

[20:15] <sorear> tadzik: 'tree'

[20:15] <tadzik> . o o ( U+6278 SOMETHING THAT LOOKS LIKE A TREE-6728 )

[20:15] <sorear> not very mnemonic for concatenation, imo

[20:16] *** cotto joined
[20:16] * araujo still looking for a nice name for his language

[20:16] <tadzik> araujo: what kind of language is it?

[20:16] <araujo> http://ideone.com/ZZf3o

[20:16] <araujo> tadzik, latest code snippet

[20:16] <araujo> :P

[20:17] <TimToady> sorear: use needs to merge everyone's ideas of GLOBAL, and perhaps complain if anyone provides conficting initializers

[20:17] <araujo> I just give up ... I am bad at naming things ....

[20:17] <TimToady> well, I suppose it could use ⽊ instead

[20:17] <TimToady> .u ⽊

[20:17] <phenny> U+2F4A KANGXI RADICAL TREE (⽊)

[20:18] <TimToady> but that's a radical, not a character :)

[20:18] <tadzik> that's not in my font :(

[20:18] <TimToady> indeed, the normal tree character is likelier to be there

[20:18] <tadzik> araujo: what paradigm does it follow? What were you inspired by? What's special about it?

[20:19] <araujo> tadzik, I just pick what I like from smalltalk/perl/lisp/tcl

[20:19] <TimToady> though doubtless any hanzi gives some stone-aged terminal emulators complete hissyfits

[20:20] <sorear> TimToady: so at runtime all the UNIT::GLOBAL's are aliases?

[20:20] <TimToady> then name it 'picky' or some such...

[20:20] <jnthn> MishMash

[20:20] <tadzik> or Pickroll

[20:20] <tadzik> :D

[20:20] <araujo> Picky

[20:20] <araujo> hehe

[20:20] <flussence> I object to urxvt being called stone-aged :(

[20:20] <TimToady> sorear: wouldn't be very global otherwise

[20:20] <flussence> on the other hand, why is it drawing a box there...

[20:20] <sorear> flussence: urxvt picks up on fonts you have installed

[20:20] <TimToady> maybe we should have named it COMMON in honor of fortran

[20:21] <sorear> my urxvt renders both trees

[20:21] <tadzik> sorear: what font?

[20:21] <flussence> probably missing some monospace cjk chars... the one earlier showed up fine

[20:21] <sorear> I dunno, it doesn't tell me

[20:21] <sorear> (that said, urxvt *is* lehmannware...)

[20:21] *** __rnddim__ left
[20:22] *** __rnddim__ joined
[20:23] <TimToady> it was tempting to name the enums as 木 and 記事

[20:23] <TimToady> grr

[20:23] <sorear> I don't know the 2nd or 3rd

[20:23] <TimToady> and ⽕

[20:23] <sorear> ah

[20:23] <TimToady> but ⽕ and き

[20:23] <TimToady> grr again

[20:23] <TimToady> but ⽕ and 木 look too much alike

[20:24] <TimToady> mustn't stutter on the enter key when using anthy...

[20:24] <tadzik> an empty book does not look like this tree-like character to me :)

[20:25] <TimToady> was trying to get 火事

[20:26] <jnthn> ...fire something?

[20:26] <flussence> (I wish distros would add some sort of metadata for font packages to say which glyph ranges they provide...)

[20:27] <TimToady> jnthn: pretty close

[20:27] <TimToady> 0293 事		じ ず こと		JI ZU koto		thing, matter, act

[20:27] <jnthn> oh lol

[20:27] *** estrabd is now known as estrabd_afk

[20:27] <sorear> flussence: small problem there - no two far east countries acknowledge each other's character numberings

[20:27] <jnthn> I recognized "fire" and was using something in the meta "what is that" sense. :-)

[20:27] <TimToady> :)

[20:28] *** mfollett left
[20:29] <flussence> sorear: yeah, but at least in a technical sense it should be possible to pull out a list of defined codepoints from a font file.

[20:29] *** supernovus joined
[20:29] <sorear> jnthn: now I'm working on serializing the metamodel...

[20:30] <sorear> TimToady: I wonder how GLOBAL merging interacts with non-acyclic package graphs.

[20:30] <supernovus> Okay, so say you have a module called Foo, that exports a bunch of subs. Why is it that if you define a subset inside the module, it's restrictions are completely ignored when you call the exported sub?

[20:30] <phenny> supernovus: 19 Sep 09:56Z <tadzik> tell supernovus you may want to add perlite6 to ww6's deps.proto

[20:30] <jnthn> sorear: You're hard to keep up with. :P :-)

[20:31] <supernovus> tadzik: actually, looking at the readme that I've updated, I need to add half of projects.list to deps.proto ;-)

[20:32] <sorear> jnthn: I've decided that it's illegal to modify objects in other separate compilation units when precompiling at BEGIN time

[20:32] <sorear> jnthn: so no 'augment class Mu { }' if you want to use the precompiler

[20:32] <sorear> jnthn: this way, the precompiler always gets to have consistant metaobjects in every unit

[20:33] <sorear> jnthn: INIT { Mu.^add-method(...) } is fine though, since the compiler is shielded from nondeterministic ordering

[20:33] <supernovus> never mind my subset question, I added "my" to the subset and it works fine now :-)

[20:35] <jnthn> sorear: I hafta wonder if augment really wants to ever be BEGIN time for these kinds of reasons...

[20:36] <jnthn> It *is* a complete can of worms for pre-compilation, I agree.

[20:38] * jnthn gives his hands a rest from typing and goes to do langauge study for a bit

[20:42] *** pmurias joined
[20:43] <sorear> module A { module B is export {} }; module A::B::C { import A :OUR<B> }

[20:44] <sorear> What is A::B::C::B::PARENT?  What happens if GLOBAL is merged?

[20:45] <sorear> How much of this needs to get cloned by 'use'?

[20:50] *** Italian_Plumber joined
[20:51] <TimToady> I suspect the parent can remain A

[20:52] <TimToady> it's not like you reparent when importing to MY either

[20:53] *** Italian_Plumber left
[20:54] *** mberends left
[20:54] <TimToady> and it's not like we can clone packages willy nilly as if they were immutable values

[21:03] *** PacoLinux left
[21:03] *** mfollett joined
[21:04] *** PacoLinux joined
[21:05] <sorear> S11 talks about cloning packages on use

[21:06] *** envi^home joined
[21:06] *** mfollett left
[21:06] <sorear> my question about merging of cyclic GLOBALs stands

[21:07] <sorear> (if packages are *not* cloned on use, I'll have to ban use Foo; class Foo::Bar { ... }, at least without MONKEY_TYPING)

[21:10] *** orafu joined
[21:13] <cotto> 18*19

[21:13] <cotto> ww

[21:13] <sorear> 342

[21:16] *** jan_ left
[21:17] <sorear> TimToady: should it even be possible to put loops in GLOBAL like that?

[21:17] <supernovus> tadzik:  There, ww6 now has a deps.proto file. So far perlite6, SCGI, exemel, flower, json and temporal-utils are the only known dependencies.

[21:18] <tadzik> supernovus: good. It can now be nicely installable with a module installer

[21:19] <tadzik> supernovus++

[21:20] *** Guest23195 left
[21:21] <tadzik> http://modules.perl6.org/ -- not quite up-to-date, is it?

[21:21] <tadzik> bedtime, see you guys

[21:21] <supernovus> tadzik: What happens to the stuff in the other directories when you 'install' an app like ww6? It comes with a whole bunch of example configuration files (in data/) and web applications (in apps/) and some other misc stuff. Will there eventually be support for a "/usr/share/doc" like place to put the "other" bits?

[21:22] <tadzik> supernovus: see http://ttjjss.wordpress.com/2010/08/09/so-you-want-to-write-a-perl-6-module/

[21:22] <tadzik> supernovus: so far you can think of your own 

[21:22] <tadzik> ...own makefile

[21:23] <tadzik> supernovus: you can easily supply them as the pod-only .pm files I think

[21:23] <tadzik> at least configs

[21:23] <supernovus> tadzik: okay, that works, most of my library-only packages use 'ufo', but ww6 is rather 'special'. Thanks for the link! have a good night

[21:23] <tadzik> supernovus: you might want to consider trying Module::Tools instead of ufo. It has a nice mbuild script, not using Makefile, but being pure-Perl6

[21:23] <tadzik> so mbuild, mbuild test, mbuild install, etc

[21:24] <supernovus> tadzik: Cool, I'll look into that. I can tell I've been away a while :-)

[21:24] <tadzik> and now pardon, but I'm hell sleepy

[21:24] <tadzik> g'night

[21:24] <supernovus> o/ tadzik 

[21:24] *** tadzik left
[21:32] <[hudnix]> rakudo: [X] 1,2

[21:32] <p6eval> rakudo be80e9:  ( no output )

[21:33] *** supernovus left
[21:36] *** ruoso left
[21:54] *** meraxes left
[21:55] <dalek> nqp-rx/nom: 76d9ad1 | jnthn++ | src/NQP/ (2 files):

[21:55] <dalek> nqp-rx/nom: Some groundwork for the new meta-model implementation in the grammar and actions. Mostly copied from JnthnNQP.

[21:55] <dalek> nqp-rx/nom: review: http://github.com/perl6/nqp-rx/commit/76d9ad15c250bca1b55a074457a4e1c7739919f1

[21:57] <sorear> mildew is a lot smaller than I was expecting

[21:57] *** envi^home left
[22:00] *** Holy_Cow left
[22:07] *** tri left
[22:08] *** bluescreen left
[22:17] *** szbalint joined
[22:22] *** stkowski_ joined
[22:23] *** pythonian4000afk is now known as pythonian4000

[22:24] *** stkowski left
[22:24] *** stkowski_ is now known as stkowski

[22:31] *** Chillance left
[22:37] *** orafu left
[22:38] *** meppl joined
[22:48] *** alester left
[22:54] *** pmurias left
[22:54] <sorear> pmurias: VAST::package_def is not a simple node, possible choices are: longname signature decl trait blockoid at /usr/local/lib/perl5/site_perl/5.12.0/VAST.pm line 18.

[22:54] <sorear> ...

[23:08] *** timbunce left
[23:11] *** ruoso joined
[23:18] *** lamstyle left
[23:19] *** cbk left
[23:21] *** cbk joined
[23:22] <dalek> nqp-rx/nom: e80031a | jnthn++ | / (4 files):

[23:22] <dalek> nqp-rx/nom: Start to stub in the P6opaque representation. Doesn't actually compute any slot storage and store attributes yet, but this gets the outline in place.

[23:22] <dalek> nqp-rx/nom: review: http://github.com/perl6/nqp-rx/commit/e80031a5b95462fa38824f4ce1f050963cd76c34

[23:22] <dalek> nqp-rx/nom: 0beab0f | jnthn++ | src/metamodel/reprs/P6 (3 files):

[23:22] <dalek> nqp-rx/nom: Add struct definitions for P6int/P6num/P6str representations.

[23:22] <dalek> nqp-rx/nom: review: http://github.com/perl6/nqp-rx/commit/0beab0ffadd5da19e8ada5d2344e7f7c4a9848be

[23:29] *** _ilbot2 joined
[23:30] *** ChanServ sets mode: +v _ilbot2

[23:30] *** ascent_ left
[23:30] *** ascent_ joined
[23:32] *** \xF0 left
[23:32] *** orafu joined
[23:32] *** \xF0 joined
[23:34] *** PZt joined
[23:36] *** orafu left
[23:37] *** imarcusthis joined
[23:40] *** Woody2143 joined
[23:43] *** patspam left
[23:52] *** rgrau` joined
[23:52] *** stkowski left
[23:55] *** ash_ joined
[23:59] *** mfollett joined
