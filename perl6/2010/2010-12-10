[00:11] *** soroush left
[00:25] *** adu joined
[00:26] *** glow left
[00:39] *** jferrero left
[00:44] *** sftp left
[00:49] *** PacoLinux left
[00:59] *** PacoLinux joined
[01:02] *** Trashlord left
[01:04] *** QinGW joined
[01:05] *** redicaps joined
[01:25] <jasonmay> rakudo: [<] 'almost'.comb().map(*.ord)

[01:25] <p6eval> rakudo :  ( no output )

[01:25] <jasonmay> rakudo: say([<] 'almost'.comb().map(*.ord))

[01:25] <p6eval> rakudo : OUTPUT«Bool::True␤»

[01:27] <jasonmay> is the object system metacircular?

[01:27] <jasonmay> if so, how can I get the methods of the meta?

[01:30] <diakopter> rakudo: say [>] 'almost'.flip.comb.map(*.ord)

[01:30] <p6eval> rakudo : OUTPUT«Bool::True␤»

[01:34] *** masonkramer left
[01:34] *** masonkramer_ joined
[01:53] <colomon> metacircular?

[01:55] <lue> ohai o/

[01:56] <colomon> \o

[01:56] <lue> what exactly is the difference between an Instant and a DateTime object, besides the name?

[01:57] <jasonmay> colomon: meta having a meta, etc

[01:57] *** lichtkind left
[01:57] <jasonmay> attributes having a meta, with attributes that have their own attributes, and so on

[01:57] *** ch3ck3r joined
[01:57] <Tene> jasonmay: You get their methods the same way you get the methods for anything else.

[01:57] *** ch3ck left
[02:00] <jasonmay> is ClassHOW the metaclass?

[02:00] <jasonmay> rakudo: ClassHOW.^methods

[02:00] <p6eval> rakudo : OUTPUT«Method 'methods' not found for invocant of class ''␤  in main program body at line 22:/tmp/VuGrZwU2sC␤»

[02:01] <flussence> lue: Instant is meant to be a calendar-agnostic opaque type for making Durations with, DateTime is the sugar-coated alternative

[02:01] <flussence> sort of like a UUID compared to a username, or something.

[02:03] *** soroush joined
[02:07] *** soroush left
[02:08] *** soroush joined
[02:08] *** soroush left
[02:08] *** soroush joined
[02:08] *** soroush left
[02:09] *** soroush joined
[02:09] *** soroush left
[02:09] *** soroush joined
[02:12] *** envi joined
[02:20] <lue> So, Instant displays in whatever current calendar, while DateTime, unmodified, is just Gregorian?

[02:38] <TimToady> Instant has no representation by itself

[02:42] <TimToady> if you try to display an Instant, it should reformat your hard drive

[02:43] *** jaldhar joined
[02:44] <lue> rakudo: say DateTime.new("1963-11-23T17:15:00Z").Instant

[02:44] <p6eval> rakudo : OUTPUT«Instant:1963-11-23T17:15:0.000000Z␤»

[02:52] *** ch3ck joined
[02:53] *** ch3ck3r left
[02:53] *** molaf_ joined
[02:57] *** molaf left
[03:07] *** whiteknight left
[03:09] *** p6eval left
[03:09] *** dalek left
[03:10] *** sorear left
[03:10] *** diakopter left
[03:15] *** cdarroch left
[03:15] *** TimToady left
[03:20] *** cotto joined
[03:24] *** adu left
[03:41] *** Bzek joined
[03:42] *** Bzek_ left
[03:47] *** Guest36106 left
[03:49] *** wars joined
[03:50] *** adu joined
[03:50] <wars> haw-haw!

[03:52] <wars> perl6中文频道 #perl6-cn

[03:53] <wars> 欢迎大家加入

[04:06] <wars> 大家 都在干什么啊？

[04:13] *** wars left
[04:21] *** nymacro joined
[04:26] *** satyavvd joined
[04:41] *** bbkr left
[04:44] *** bbkr joined
[04:53] *** orafu left
[04:54] *** dalek joined
[04:54] *** ChanServ sets mode: +v dalek

[04:54] *** orafu joined
[04:54] *** p6eval joined
[04:54] *** ChanServ sets mode: +v p6eval

[05:00] *** orafu left
[05:01] *** orafu joined
[05:03] <lue> rakudo: my @a = [1,2,3], [4,5,6], [7,8,9]; my @b = [ [1,2,3], [4,5,6], [7,8,9] ]; say @a.perl; say @b.perl;

[05:03] <p6eval> rakudo : OUTPUT«[[1, 2, 3], [4, 5, 6], [7, 8, 9]]␤[[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]␤»

[05:04] <lue> hm, @b.perl comes out [1,2,3,4,5,6,7,8,9] on my system. (I'd put http://en.wikipedia.org/wiki/Special:Search?go=Go&search=brackets, w/o the space between, but I think that still causes the auto-wikipedia linking)

[05:04] <lue> o hey, it does still do that!

[05:06] *** orafu left
[05:07] *** orafu joined
[05:09] <lue> nevermind, I found my problem.

[05:10] *** sorear joined
[05:10] *** diakopter joined
[05:10] *** orafu left
[05:10] *** TimToady joined
[05:12] *** orafu joined
[05:16] <lue> S32::Temporal doesn't seem to explain what an Instant or Duration is. Could it be somewhere else in the spec?

[05:17] <lue> (the names are self-explanitory, but there are no details as to their methods, what they're for, etc.)

[05:19] <TimToady> grep is your friend

[05:20] *** orafu left
[05:22] <adu> rakudo: kthxbai!

[05:22] <p6eval> rakudo : OUTPUT«===SORRY!===␤Confused at line 22, near "kthxbai!"␤»

[05:22] <adu> :/

[05:22] <lue> .oO(although ack is a friend that already knows some things about you)

[05:23] *** orafu joined
[05:29] <allbery_b> "bad touch!"

[05:29] <allbery_b> (yes, I knowabout ack.  I keep wanting to hack syntax support into it)

[05:35] <lue> .oO( Some days I wonder if there's such a thing as "Temporal Science", and if I could major in it :) )

[05:39] *** adu left
[05:40] *** molaf_ left
[05:44] <allbery_b> .oO { gallifrey is over there somewhere ----> }

[05:52] *** hudnix left
[05:55] *** ggoebel left
[05:55] *** flatwhatson left
[05:55] *** Grrrr left
[05:55] *** spinclad left
[05:55] *** hugme left
[05:55] *** chitragupt left
[05:55] *** literal left
[05:56] *** hudnix joined
[05:59] *** ggoebel joined
[05:59] *** flatwhatson joined
[05:59] *** Grrrr joined
[05:59] *** spinclad joined
[05:59] *** hugme joined
[05:59] *** chitragupt joined
[05:59] *** literal joined
[05:59] *** hubbard.freenode.net sets mode: +v hugme

[06:00] *** chitragupt left
[06:00] *** chitragupt joined
[06:07] *** cjk101010 left
[06:12] *** Axius joined
[06:13] *** fhelmberger joined
[06:17] *** _kaare joined
[06:28] *** ggoebel left
[06:33] *** ggoebel joined
[06:33] <sorear> good * #perl6

[06:36] <sorear> jasonmay: ClassHOW.^methods is supposed to work, but it still has a couple issues in Rakudo

[06:36] <sorear> so I guess "yes"

[06:36] <sorear> nqpnet: say(1.HOW)

[06:36] <p6eval> nqpnet: OUTPUT«(timeout)»

[06:37] <sorear> nqpnet: say(1.HOW.WHAT)

[06:37] <p6eval> nqpnet: OUTPUT«XBuild Engine Version 2.6.7.0␤Mono, Version 2.6.7.0␤Copyright (C) Marek Sieradzki 2005-2008, Novell 2008-2009.␤␤Build started 12/10/2010 6:37:06 AM.␤__________________________________________________␤Project "/home/p6eval/6model/dotnet/runtime/Rakudo.Net.csproj" (default target(s))…

[06:37] <sorear> jnthn: I brokes it

[06:44] *** glow joined
[06:50] *** Shozan joined
[06:55] <jasonmay> sorear: sweet!

[06:56] <sorear> "nqpnet" is part of jnthn's project to rewrite the object system

[06:59] *** Axius left
[07:01] *** justatheory left
[07:10] *** scp1 left
[07:10] *** scp1 joined
[07:15] *** ggoebel left
[07:19] *** ggoebel joined
[07:24] *** cjk101010 joined
[07:30] *** ggoebel left
[07:32] *** daxim joined
[07:34] *** cotto left
[07:35] *** ggoebel joined
[07:36] *** Wanjor joined
[07:36] *** Wanjor left
[07:45] *** ggoebel left
[07:48] *** nymacro left
[07:50] *** ggoebel joined
[07:52] <Shozan> hm

[07:52] <moritz_> good morning

[07:52] <Shozan> morning

[07:56] <sjohnson> hi

[07:57] *** ggoebel left
[07:58] <sorear> good morning moritz_, Shozan 

[08:01] *** ggoebel joined
[08:07] *** ggoebel left
[08:11] <Shozan> does this rakudo thing have any kind of project plan or anything?

[08:11] <sorear> I guess docs/ROADMAP

[08:12] <Shozan> mm ok

[08:14] *** ggoebel joined
[08:16] <Shozan> and that is still up to date?

[08:17] <moritz_> I think so, yes

[08:24] <Shozan> i'm just trying to navigate and get a sense of how you work :)

[08:24] <moritz_> one bit at a time :-)

[08:24] <Shozan> ye..

[08:25] <Shozan> i might be interested in helping you out, you see

[08:25] <moritz_> that would be awesome

[08:28] <moritz_> I have to leave now, I'll be back in ~0.5 hours (unless the traffic jams)

[08:29] <Shozan> hf

[08:32] <sorear> IMPLEMENTOR'S RULING: := is to be seen as a low level operation, which other parts of the system can use.  Since other forms of aliasing may be built upon :=, explicit use of := is allowed (but not required) to break aliasing set up by any other language feature, for instance, imports

[08:32] <sorear> If there are any cases where aliases need to be transparent to :=, I'd be interested to hear them

[08:33] <sorear> Shozan: welcome!

[08:39] *** wtw joined
[08:47] <daxim> *that* blog entry was masak's big friday surprise?  I feel slightly let down

[08:49] <Shozan> sorear, thanks

[08:50] <Shozan> daxim: which blog entry was that?

[08:50] <Shozan> best november?

[08:50] <daxim> yes

[08:50] <Shozan> but it was posted yesterday ;)

[09:01] <moritz_> daxim: I don't think so

[09:02] <tadzik> masak wouldn't have resisted to say "Look, that was the big announcement!"

[09:02] <daxim> we shall wait, then

[09:03] <moritz_> the day still has 14 hours, in CET

[09:03] <daxim> meanwhile:  $cookie for @everyone

[09:03] * moritz_ takes one. Thanks

[09:03] <tadzik> oh, is there an occasion?

[09:04] <moritz_> there's always an occasion :-)

[09:05] * tadzik still has some candies from his birthday, passes the box to everyone

[09:06] <sorear> it's exactly 1 month after my birthday.  that's gotta count for something

[09:06] *** risou left
[09:06] *** risou joined
[09:07] <moritz_> it's a fortnight 'til christmas

[09:15] <moritz_> http://tirania.org/blog/archive/2010/Dec-09-1.html # it's amazing what the mono developers have been up to

[09:16] <sorear> I've been using 2.9

[09:16] <sorear> there's a 2.9-only bugfix that cuts 20 minutes off the time needed to run roast with niecza STD :)

[09:17] *** risou_ joined
[09:19] *** risou_ left
[09:20] *** risou left
[09:26] *** kensanata joined
[09:28] *** dakkar joined
[09:31] *** ggoebel left
[09:39] *** dju joined
[09:41] *** redicaps left
[09:44] *** dju left
[09:44] *** dju joined
[10:05] *** JimmyZ joined
[10:05] *** wamba joined
[10:07] *** QinGW left
[10:08] *** JimmyZ left
[10:14] *** risou joined
[10:15] *** dju left
[10:16] *** dju joined
[10:25] *** uniejo joined
[10:37] *** jhuni left
[10:39] * sorear out

[10:42] *** IllvilJa joined
[10:48] *** flussence joined
[10:53] *** glow left
[11:05] *** satyavvd left
[11:06] *** jferrero joined
[11:08] *** cotto joined
[11:10] *** _kaare left
[11:18] *** sundar joined
[11:20] *** sundar left
[11:30] *** mary_se7en joined
[11:33] <mary_se7en> helo, I was here few months ago and asked about turning a perl6 app to single executable, there was 2 small notes I will  need to build a shared libparrot with dynamic loading and that I can only run the Perl 6 binary from the root directory of a Parrot checkout.. I wonder if there is any update.. I since I need to create an executable that will be used on large number of PCs... thanks all ^_^

[11:34] <moritz_> mary_se7en: you can run it from anywhere if rakudo is properlz installed

[11:34] <moritz_> lunch&

[11:36] <mary_se7en> so I need to manually install rakudo on every PC right?

[11:38] *** Trashlord joined
[11:42] *** oyse joined
[11:42] *** oyse left
[11:43] *** risou left
[11:43] *** risou_ joined
[11:47] *** wamba left
[11:50] *** wamba joined
[11:52] *** mary_se7en left
[11:53] *** _kaare joined
[12:00] *** wamba left
[12:01] *** wamba joined
[12:02] *** smash joined
[12:02] <smash> hello everyone

[12:09] *** tzhs joined
[12:20] *** flussence_ joined
[12:22] *** am0c left
[12:22] *** flussence left
[12:30] *** zby joined
[12:34] *** am0c joined
[12:36] *** bluescreen joined
[12:37] *** bluescreen is now known as Guest96690

[12:39] *** glow joined
[12:40] *** uniejo left
[12:49] *** inak1 joined
[12:50] *** inak1 left
[12:50] *** Trashlord left
[12:51] *** masak joined
[12:51] <masak> greetings gentlemen.

[12:51] <masak> are you ready?

[12:52] <tadzik> go!

[12:52] <masak> ok.

[12:52] <masak> here comes...

[12:52] <masak> ...the big announcement.

[12:52] <masak> *drum roll*

[12:52] <masak> http://strangelyconsistent.org/blog/masaks-perl-6-coding-contest

[12:53] <moritz_> glad you rolled the drum, not the eyes :-)

[12:54] <tadzik> wow wow

[12:55] <masak> this, ladies and gents, was the big announcement.

[12:55] <takadonet> looks like I got here just in time!

[12:55] <moritz_> so, if there are multiple valid submissions, who will win?

[12:55] <masak> moritz_: see WINNING.

[12:55] <masak> http://strangelyconsistent.org/p6cc2010/WINNING

[12:56] * moritz_ sees

[12:56] <takadonet> http://www.reddit.com/r/programming/comments/ejiju/perl_6_coding_contest/

[12:56] <masak> \o/ takadonet++

[12:57] <takadonet> vote it up!

[12:58] <takadonet> wow already a downvote :(

[12:58] <masak> those trolls are quick... :)

[12:59] <moritz_> masak: your webserver doesn't send a charset header along with text documents

[12:59] <moritz_> masak: it should, though

[12:59] <masak> moritz_: agreed. any way I can make it do that?

[13:00] <moritz_> masak: if you webserver doesn't suck: yes

[13:00] <masak> frankly I don't know whether it sucks or not.

[13:00] <masak> I suspect it doesn't and that the bottleneck is in masak, not the webserver. :)

[13:00] <moritz_> and I can't know either, unless you tell me which one it is

[13:01] <moritz_> for files with extensions, in apache you can do something like   AddType 'text/plain; charset=utf-8' txt

[13:01] <masak> I believe it's an Apache server, yes.

[13:02] <moritz_> or just AddDefaultCharset UTF-8

[13:02] <masak> that sounds like what I want.

[13:03] <masak> can this go into my .htaccess file?

[13:04] <moritz_> the AddT

[13:04] <moritz_> sorry

[13:04] <moritz_> yes, it can

[13:05] *** masonkramer_ left
[13:05] <masak> excellent.

[13:06] <masak> better now?

[13:07] <moritz_> it is indeed

[13:07] <moritz_> if you want to debug such things, I can highly recommend  wget -S $url

[13:07] <masak> noted. thanks.

[13:08] <moritz_> problem 3... I don't quite understand what you write

[13:09] <moritz_> from the example it's clear that all range specs must must match the number

[13:09] <moritz_> ie if the first range includes it, and the second range excludes it, the number is not in the ranges

[13:09] <masak> right.

[13:09] <moritz_> why is it then important that ranges are evaluated from left to right?

[13:10] <masak> a third (or fourth...) range might include it again.

[13:11] <masak> in essence, the inclusions are unions and the exclusions are set differences.

[13:11] <moritz_> so +[1 .. 5] +[1..6] would not include 6

[13:11] <moritz_> and neither would +[1..6] +[1..5]

[13:11] <moritz_> correct?

[13:11] <masak> both would be identical to just +[1..6]

[13:12] *** hdanak joined
[13:12] * moritz_ tries to come up with an example where the order matters

[13:12] <masak> +[1..5] -[2..4]

[13:12] <masak> vs -[2..3] +[1..5]

[13:13] <masak> er, -[2..4]

[13:13] <moritz_> the first would include 1 and 5

[13:13] <moritz_> ... and the second? 

[13:13] <masak> the second all of 1,2,3,4,5

[13:14] <masak> since the exclusion operates on nothing.

[13:14] <moritz_> [x] click

[13:14] <masak> :)

[13:14] <masak> "Before any inclusions/exclusions have been made, all integers are excluded."

[13:16] * moritz_ wonders if the test can be made without constructing the full included subset

[13:16] <moritz_> he, I think it's possible

[13:16] <masak> :)

[13:17] *** dual left
[13:17] <moritz_> once you understood the problem, parsing is likely the bigger problem :-)

[13:17] <masak> I didn't really institute a policy about silence...

[13:17] <masak> let's just say that if you plan to be a contestant, it's in your best interest not to discuss solutions. :)

[13:17] *** risou joined
[13:17] * moritz_ didn't tell *how* to do the test

[13:17] <masak> I'll happily discuss all of them in five weeks, though. :)

[13:18] <hdanak> masak: what does the +[1..5] -[2..4] syntax do? the REPL returns the difference in sizes of sets...

[13:18] <masak> right now, the best way to make me happy is to email me your Amazon wishlists :D

[13:19] <moritz_> hdanak: it's not Perl 6 syntax. see http://strangelyconsistent.org/blog/masaks-perl-6-coding-contest

[13:19] <masak> hdanak: as Perl 6, it means something different than in my problem.

[13:19] <hdanak> ok i see

[13:19] <masak> hdanak: as Perl 6, the arrays get numified as their lengths.

[13:19] <masak> something I did not at all consider :)

[13:19] *** risou_ left
[13:22] <hdanak> can ranges be decreasing?

[13:23] <moritz_> no

[13:23] <moritz_> only sequences can

[13:23] <smash> masak++ # coding contest

[13:24] <moritz_> indeed, masak++

[13:24] <masak> thanks :) remember to upvote on proggit too :)

[13:24] <masak> http://www.reddit.com/r/programming/comments/ejiju/perl_6_coding_contest/

[13:24] <moritz_> nice christmas present :-)

[13:24] <masak> good luck, everyone

[13:24] <moritz_> woa, 3 downvotes

[13:24] * moritz_ wonders why redditers are that hateful

[13:25] <masak> surely there are more love-ful #perl6ers, though :)

[13:25] <hdanak> will perl6 have coroutines?

[13:26] <masak> hdanak: yes.

[13:26] <masak> hdanak: they're called 'gather/take'

[13:26] <hdanak> oh really

[13:26] <moritz_> and no need to use the future tense

[13:26] <masak> ya rly

[13:26] <moritz_> they are implemented already

[13:26] <hdanak> i thought gather/take was for lazy list comprehensions

[13:26] <moritz_> the two are not mutually exclusive

[13:27] <hdanak> but i meant something like Perl6::Coro

[13:27] <masak> laziness and coroutines are built on the same principle: delayed evaluation.

[13:27] <moritz_> gather { a; take; b } runs a(), and b() when the list is consumed

[13:27] <masak> hdanak: I imagine something like that will be a module in Perl 6, too.

[13:28] <oha> masak++

[13:29] <masak> you're appreciation makes me hopeful I'll see many contestants. may the best p6er win!

[13:30] <moritz_> masak: in p5, by "fast solution" do you mean an asymptotically fast algorithm, or one that actually runs fast on today's rakudo?

[13:30] <masak> the former.

[13:30] <moritz_> ok

[13:31] <masak> I basically mean something that wouldn't be rotten on long strings even on a fast Perl 6 implementation.

[13:34] * moritz_ just looked of all the problems

[13:34] <moritz_> p1: interesting

[13:35] <moritz_> p2: meh. (not really interesting algorithm, but ugly implementation)

[13:35] <moritz_> p3: nice, probably not too hard

[13:35] <moritz_> p4: need more thinking to figure out how hard it will be, which makes it interesting :-)

[13:36] <moritz_> p5: a solved problem, which could be fun to implement

[13:36] <hdanak> something tells me that using perl5 threads on a robot is a bad idea...

[13:36] <moritz_> depends on the robot :-)

[13:37] <hdanak> trying to do computer vision stuff in the background while looping through sensors and AI stuff in multiple perl5 threads, but i'm not sure what kind of performance hit it will take

[13:37] <moritz_> if it's just for a game that runs on the inside of the huge fighting robot, go right ahead :-)

[13:37] <masak> moritz_: an interesting review. :) you might be right about p2, but I also believe I'll receive a lot of variety there.

[13:37] <hdanak> masak: p2 seems interesting

[13:38] <moritz_> heh :-)

[13:38] <hdanak> in that you can solve it using math

[13:38] <hdanak> or you can bash it with algorithms

[13:38] <hdanak> or a mix of both

[13:38] <moritz_> masak: there is some challenge to making a solution to such a problem nicely readable though

[13:38] <masak> moritz_: yes. and fast.

[13:39] <hdanak> moritz_: well, i'm thinking along the lines of concentric circles, and an edge case if the point lies in between

[13:39] <moritz_> masak: did you solve all problems already?

[13:39] <colomon> masak++ !!!!

[13:39] <masak> moritz_: yes.

[13:39] * colomon implemented p2 months ago....

[13:39] <masak> moritz_: for me, they take about 2 hours each.

[13:40] <moritz_> masak: I think you just killed my weekend :-)

[13:40] <masak> :D

[13:40] <masak> but I figured since people might have to learn about Perl 6, Rakudo and the problems, I'll give people a week for each problem.

[13:42] *** mtk joined
[13:43] <hdanak> does parrot actually support python and ruby right now, or is it just a mere possibility?

[13:44] <moritz_> hdanak: the compilers for both are very immature, and not at all feature complete

[13:45] <moritz_> ie not at the point where you can take an arbitrary library written in that language, and run it

[13:46] <hdanak> hmm

[13:47] <hdanak> well, i still need to learn ruby though... but i severely dislike python

[13:47] *** thundergnat joined
[13:47] <takadonet> thundergnat: hello sir

[13:48] <thundergnat> Hi takadonet et all

[13:48] <masak> hi thundergnat!

[13:48] <thundergnat> masak: programming contest! ooo!

[13:48] <masak> \o/

[13:49] * masak suddenly feels he hasn't over-hyped the Big Announcement too much after all :)

[13:50] <moritz_> currently most of the books on my wishlist aren't even published yet

[13:50] <thundergnat> #5)  neutro Algorithm-Diff - use Algorithm::Diff; my $lcs = LCS($string1, $string2); # Heh

[13:50] <moritz_> :-)

[13:51] <masak> heh :)

[13:54] <thundergnat> BTW, in S29 under Conversions, .flat is entered twice. I could edit myself but I wanted to check that it was actually extreaneous and I'm not just missing some context. 

[13:54] <masak> thundergnat: it looks like a thinko.

[13:59] <dalek> specs: 493684e | thundergnat++ | S29-functions.pod:

[13:59] <dalek> specs: Removed redundant second entry for .flat 

[13:59] <dalek> specs: review: https://github.com/perl6/specs/commit/493684ecee

[14:01] *** sftp joined
[14:02] <thundergnat> Also, while I'm questioning things, Is the err operator depricated or NYI? It exists in Grammer.pm but isn't mentioned in S03.

[14:02] <moritz_> std: 1 err 2

[14:02] <p6eval> std a194beb: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row at /tmp/XnbgCy79hj line 1:␤------> [32m1 [33m⏏[31merr 2[0m␤    expecting any of:␤     bracketed infix␤        infix or meta-infix␤    statement modifier loop␤Parse failed␤FAILED 00:01 120m␤»

[14:02] <thundergnat> rakudo: say 3 err 5

[14:02] <p6eval> rakudo : OUTPUT«3␤»

[14:03] <masak> I think 'err' mutated into 'orelse'.

[14:03] <masak> but I might misremember.

[14:03] <moritz_> if it's not in the specs, and not in STD, it shouldn't exist

[14:04] <thundergnat> https://github.com/rakudo/rakudo/blob/master/src/Perl6/Grammar.pm#L1974 should probably go away then.

[14:09] <arnsholt> masak: For problem 1, should we consider permutations of the order of the matrices, or only bracketings of neighbouring matrixes/brackets?

[14:09] <masak> the latter.

[14:09] <moritz_> arnsholt: matrix multiplication isn't commutative

[14:09] <moritz_> so you can't just permute multiplications

[14:09] <masak> no, not in general.

[14:10] <arnsholt> moritz_: I know, but for some inputss there might be permutations that are better

[14:10] <arnsholt> Which is why I wondered. Especially because enumerating all those permutations would make any hope of an efficient algorithm evaporate =)

[14:11] <masak> arnsholt: even when the dimensions permit a reordering of the matrices, you'd be changing the original multiplication in a way that is likely not desired.

[14:11] <arnsholt> True, true

[14:11] <arnsholt> An excellent point, in fact

[14:12] <arnsholt> Just goes to show that I don't know enough maths =)

[14:12] <moritz_> that's what I meant with "not commutative" :-)

[14:13] <arnsholt> I have what I think is an interesting way to look at it as well =)

[14:13] <masak> remember that just by signing up for the contest, you make the chance of winning 100 EUR worth of books non-zero.

[14:15] <moritz_> you mean if there only sign ups without valid submissions :-)

[14:17] <masak> right :)

[14:18] *** risou_ joined
[14:20] *** risou left
[14:32] *** redicaps joined
[14:33] *** mkramer joined
[14:53] *** ggoebel joined
[15:06] <pmichaud> masak++ # big announcement

[15:06] <phenny> pmichaud: 25 Nov 14:19Z <tadzik> tell pmichaud how didn't neutro build for Star, what was the reason?

[15:06] <phenny> pmichaud: 26 Nov 19:16Z <tadzik> tell pmichaud may I get the access to perl 6 RT? I found like 10 bugs today which are alredy working and can be closed

[15:06] <masak> \o/

[15:07] <pmichaud> 100€ can buy a lot of kindle books :)

[15:07] <pmichaud> am I somehow disqualified from entering?

[15:07] <masak> pmichaud: no, that's why I denied you prior knowledge the other day. :)

[15:07] <pmichaud> aha

[15:07] <masak> feel free to sign up.

[15:07] <pmichaud> is TimToady++ likely to enter?  ;-)

[15:07] <masak> I was wondering that too :)

[15:08] *** uniejo joined
[15:08] <masak> that would be... interesting.

[15:08] <moritz_> it would be indeed

[15:09] *** flatwhatson left
[15:10] <pmichaud> hmmm, I've already solved #3 on paper (for handling character classes in nqp)

[15:10] <masak> *nod*

[15:10] <moritz_> inversion lists!

[15:10] <masak> (dang) :)

[15:10] * moritz_ cackles evily

[15:11] <masak> don't tell anyone, OK? :)

[15:11] <moritz_> but actually inversion lists are not the easiest solution for this one

[15:11] <masak> no?

[15:12] <moritz_> no

[15:13] <takadonet> pmichaud: how were your holiday's?

[15:13] <pmichaud> overall they were really good

[15:14] <takadonet> good to hear

[15:15] *** Trashlord joined
[15:21] *** MayDaniel joined
[15:21] *** flatwhatson joined
[15:22] <dalek> mu: ee1a853 | duff++ | misc/perl6advent-2010/articles/feed.pod:

[15:22] <dalek> mu: Start on day 10 article

[15:22] <dalek> mu: review: https://github.com/perl6/mu/commit/ee1a853a5b

[15:22] *** tzhs left
[15:22] <PerlJam> okay, I started on my day 10 advent post last night, but I fell asleep. 

[15:22] <PerlJam> Review what I have so far if you please  (see above)

[15:22] * masak reviews

[15:23] <masak> PerlJam: "...the data feeds from one operation to the next."

[15:24] <masak> shouldn't that be "from one operation to the previous"? :)

[15:24] <PerlJam> don't make me second guess my prose too much or I'll spend all day futzing with it  :)

[15:25] <masak> just pointing out that "the next" operator might as well be read as "the one to the right", which wasn't what you intended.

[15:25] <moritz_> then just say "to the left" instead of "next"

[15:25] <masak> also, it'd be nice if it was a bit clearer that Perl 6 doesn't force the use of piping operators, just so we don't give any diehard Perl 5 users an unnecessary heart attack :)

[15:25] <PerlJam> aye, already changing it

[15:26] <masak> as in "would be written" -> "could be written", for example.

[15:28] <masak> actually, I think I'd prefer to have both the functional and then methodological variants in there, just to show that they're still possible. (and that they also promote one reading direction each)

[15:28] *** redicaps left
[15:28] <PerlJam> masak: yep, adding a note and such an example now  :)

[15:28] <PerlJam> also, fyi, I was going to end the post with some real, working examples

[15:28] <masak> \o/

[15:29] <Trashlord> hey dudes

[15:29] <masak> Trashlord! \o/

[15:29] <Trashlord> how's it going

[15:29] <masak> splendid. and you?

[15:30] * PerlJam obtains some Dr Pepper for continued writing

[15:30] <Trashlord> same, just a slight headache, meh

[15:30] <masak> huh. 9 upvotes, 9 downvotes on http://www.reddit.com/r/programming/comments/ejiju/perl_6_coding_contest/

[15:31] <masak> on average, Reddit is completely neutral to the idea of a Perl 6 Coding Contest. :P

[15:31] <awwaiid> masak: I suggest making the WINNING details more prominent, or summarizing it on the front page or something. It's not immediately obvious how it is a 'contest' until I started reading that

[15:32] <masak> awwaiid: good idea. I'll make it more prominent.

[15:32] *** jaldhar left
[15:33] <PerlJam> masak: btw, your "big announcement" was an *excellent* idea. (in case you weren't sure  ;)

[15:33] <masak> thanks :)

[15:33] <masak> it sure seems to have struck the right note here ;)

[15:38] *** Patterner left
[15:43] <moritz_> http://www.perlmonks.org/?node_id=876467 # I did some advertising for the contest

[15:44] <masak> moritz_++

[15:44] <masak> awwaiid: better? http://strangelyconsistent.org/blog/masaks-perl-6-coding-contest

[15:45] <PerlJam> and an anonymonk already critiqued that the problems are mathematically bent.  

[15:45] <moritz_> just commented really, I didn't read that as critic

[15:45] <PerlJam> eh maybe

[15:46] <masak> same here.

[15:46] <masak> I'm thinking of replying.

[15:48] *** hercynium joined
[15:49] *** Psyche^ joined
[15:49] *** Psyche^ is now known as Patterner

[15:50] * PerlJam is getting slowly sucked into too much reading with reddit, perlmonks, email, twitter, etc.  :(

[15:52] *** plainhao joined
[15:54] * [particle] thinks perljam needs a text to speech app to read all these aloud

[15:54] <PerlJam> [particle]: but then I'll have a conflict with my currently playing music

[15:56] <[particle]> i think a popular phone app that reads every tweet aloud as it is received would be great for society

[15:58] <awwaiid> masak -- better. As a contestent it's a bit hard to know how I should trust you though -- maybe this is all a rouse and you're going to give the 100 to your friend or something :) . But that is the nature of a single-sponsor contest I supose

[15:58] *** thundergnat left
[15:58] <masak> awwaiid: yes.

[15:58] <masak> awwaiid: if it's any consolation, I plan to publish everyone's submissions after the contest.

[15:58] <awwaiid> well _I_ trust you just fine :)

[15:59] <PerlJam> awwaiid: I'm still going to play even knowing that masak may just keep the money  :)

[15:59] <awwaiid> hehe

[15:59] <masak> I promise I will do my utmost to buy someone 100 EUR worth of books. you have my word. :)

[16:00] <masak> I hope all my contestants will keep their end of the deal by being brilliant in unambiguous ways.

[16:00] <[particle]> will you make the book list public, too? ;)

[16:00] <oha> [particle]: eheh :)

[16:00] <masak> [particle]: that's at the discretion of the winner.

[16:00] <colomon> oh no, better take those romance novels off my wish list!  ;)

[16:01] <masak> colomon: thought you were going to say "Python books" :)

[16:01] <colomon> oh heavens, no, I'd never put a Python book on my wish list!!

[16:02] <[particle]> you buy those cash, and bring a paper bag.

[16:02] *** nancy joined
[16:02] <awwaiid> (masak: minor nit, you might remove some \n's from your <pre> list of criteria)

[16:02] *** nancy is now known as Guest95728

[16:03] <masak> awwaiid: I considered that. now I will :)

[16:03] <Guest95728> rakudo: doubles = [ c *2 for c in 'perl']

[16:03] <p6eval> rakudo : OUTPUT«===SORRY!===␤Confused at line 22, near "doubles = "␤»

[16:04] <masak> rakudo: say $_ * 2 for 'perl'.comb>>.ord

[16:04] <p6eval> rakudo : OUTPUT«224␤202␤228␤216␤»

[16:05] <masak> rakudo: my @soubles = ($_ * 2 for 'perl'.comb>>.ord); say @doubles.perl

[16:05] <p6eval> rakudo : OUTPUT«===SORRY!===␤Symbol '@doubles' not predeclared in <anonymous> (/tmp/WGGwBCe0Ak:22)␤»

[16:05] <masak> rakudo: my @doubles = ($_ * 2 for 'perl'.comb>>.ord); say @doubles.perl

[16:05] <p6eval> rakudo : OUTPUT«[224, 202, 228, 216]␤»

[16:05] <masak> \o/

[16:05] <Guest95728> masak: :)))

[16:05] <masak> rakudo++

[16:06] <masak> Guest95728: Python background?

[16:06] <Guest95728> masak: yup :/

[16:06] * masak hugs Guest95728

[16:07] <Guest95728> masak: moving slowlllly to perl6 :D

[16:08] <masak> awwaiid: better, yes? http://strangelyconsistent.org/blog/masaks-perl-6-coding-contest

[16:09] <masak> Guest95728: no worries. even though you write with a heavy Python accent, I understood what you wanted. :)

[16:12] *** zby left
[16:14] *** kensanata left
[16:14] *** glow left
[16:14] <awwaiid> masak: yes

[16:15] <masak> \o/

[16:15] <masak> awwaiid++ # tiny, but important, nits

[16:16] *** _kaare left
[16:16] *** uasi joined
[16:16] <uasi> hi

[16:16] <uasi> std: [ { say 'hi' } ]>>.()

[16:16] <p6eval> std a194beb: OUTPUT«ok 00:01 120m␤»

[16:16] <uasi> rakudo: [ { say 'hi' } ]>>.()

[16:16] <p6eval> rakudo : OUTPUT«Tried to find null name␤  in main program body at line 22:/tmp/h1pXG_t5IT␤»

[16:17] <Guest95728> rakudo: L+1 for L in [1,2,3]

[16:17] <p6eval> rakudo : OUTPUT«Could not find sub &in␤  in main program body at line 22:/tmp/X_NrIw1pWu␤»

[16:17] <Guest95728> rakudo: [L+1 for L in [1,2,3]]

[16:17] <p6eval> rakudo : OUTPUT«Could not find sub &in␤  in main program body at line 22:/tmp/WEpfxZEcFw␤»

[16:17] <awwaiid> man... I added a comment to the contest link on reddit and now reddit has given me a 5-year-club prize. Time flies.

[16:18] <Guest95728> rakudo: $L+=1 for $L in {1,2,3}

[16:18] <p6eval> rakudo : OUTPUT«===SORRY!===␤Confused at line 22, near "$L+=1 for "␤»

[16:18] <uasi> rakudo: [ { say 'hi' } ]>>()

[16:18] <p6eval> rakudo : OUTPUT«Tried to find null name␤  in main program body at line 22:/tmp/vanzAwZaKd␤»

[16:19] <uasi> found that bug while solving the problem 3

[16:20] *** Guest95728 left
[16:20] <TimToady> rakudo: say ~ ord "perl"

[16:20] <p6eval> rakudo : OUTPUT«112 101 114 108␤»

[16:21] <TimToady> masak: ^^ don't need .comb»

[16:21] <masak> TimToady: good to know.

[16:21] <TimToady> well, maybe, unless we decide that's a bad idea

[16:21] <masak> uasi: that's a known bug, I think.

[16:22] <TimToady> rakudo: say +ord "perl"

[16:22] <p6eval> rakudo : OUTPUT«4␤»

[16:22] <masak> uasi: diakopter found it a few months ago.

[16:22] <TimToady> that seems wrongish

[16:22] <uasi> ah

[16:22] <masak> rakudo: my @a = 1,2,3; @a>>++; say @a.perl

[16:22] <p6eval> rakudo : OUTPUT«[2, 3, 4]␤»

[16:22] <masak> Guest96690: ^^

[16:23] <masak> nom &

[16:23] *** masak left
[16:24] <TimToady> rakudo: say chr(112, 101, 114, 108)

[16:24] <p6eval> rakudo : OUTPUT«Too many positional parameters passed; got 4 but expected 1␤  in 'chr' at line 3304:CORE.setting␤  in main program body at line 22:/tmp/nD1V6IWQ2g␤»

[16:25] <TimToady> and not the inverse of chr as it stands

[16:25] <TimToady> rakudo: say chr(ord("perl"))

[16:25] <p6eval> rakudo : OUTPUT«␤»

[16:27] <TimToady> rakudo: say "perl".Buf

[16:27] <p6eval> rakudo : OUTPUT«Method 'Buf' not found for invocant of class 'Str'␤  in main program body at line 22:/tmp/iTszj4tOl0␤»

[16:27] <oha> am i wrong or in chr(ord("perl")) it call the @a signature instead of ($a) signature? and chr(123,101,114,108) do not call @a?

[16:28] <TimToady> but the chr(ord()) should have called @a instead of *@a

[16:28] <TimToady> so I doubt there's a sig with @a

[16:29] <TimToady> and I'm quite sure people will be surprised if +ord($string) returns the number of characters rather than the first codepoint

[16:31] <TimToady> so maybe we should have an ords() function do that instead

[16:35] <oha> iff i'm not wrong, looking at rakudo ''.ord() fails, 'a'.ord() return a scalar and 'ab'.ord() return a gather/take list

[16:39] <TimToady> I think we should split ord/ords

[16:41] <colomon> +1 .... ish?

[16:41] <TimToady> we can't force people to say +ord($s)[0]

[16:41] <colomon> TimToady: but isn't the right answer to leave off the +  ?

[16:42] <TimToady> the whole point of ord is to get the number of a codepoint, so + shouldn't change that

[16:42] <TimToady> it'll have + semantics any time you use it as a number anyway

[16:43] <TimToady> the only way to finesse it would be to return a different list type that knows it's supposed to return the head when used as a scalar

[16:43] *** icwiener joined
[16:43] <TimToady> and that seems like a bit of a crock

[16:43] <dalek> mu: 763904e | duff++ | misc/perl6advent-2010/articles/feed.pod:

[16:43] <dalek> mu: improvements from #perl6; added working examples

[16:43] <dalek> mu: review: https://github.com/perl6/mu/commit/763904ef84

[16:45] <PerlJam> everybody re-comment.  

[16:45] <oha> rakudo: multi sub chr(*@a) { [~] @a>>.chr }; say chr(ord('perl'));

[16:45] <colomon> TimToady: I guess where I have an issue with the idea is that it isn't obvious to me that Str.ord should return only the first codepoint.  perhaps just because I haven't really used ord much.

[16:45] <p6eval> rakudo : OUTPUT«perl␤»

[16:46] <colomon> it seems to me that p6 has a quasi-consistent pattern of returning "one or a list" of items from its builtins.

[16:46] <oha> TimToady: what if the ord() returns a OrdList which overload + to return the first element?

[16:47] <colomon> oha: that strikes me as a very bad idea.  it's opening up an ugly can of worms, and violating Liskov as well.

[16:48] <oha> colomon: agreed

[16:48] <TimToady> PerlJam: I'd just write say ~@who-it's-at instead of using .join(" ")

[16:50] <TimToady> ord has a long history in programming languages of only paying attention to the first character of a string

[16:50] <colomon> TimToady: then we should probably honor that history

[16:50] <TimToady> or say "@who-it's-at";

[16:52] <PerlJam> you mean you mean "@who-its-at[]"  :)

[16:52] <colomon> rakudo: say pir::box__PI(pir::ord__IS("This is a test"));

[16:52] <p6eval> rakudo : OUTPUT«84␤»

[16:52] <PerlJam> (I was trying to avoid that)

[16:52] *** justatheory joined
[16:52] <PerlJam> I'll go with prefix:<~>

[16:52] <TimToady> and this way .ord can avoid starting up a useless pipeline, and .ords can be optimized for listiness

[16:52] <TimToady> PerlJam: right, needs []

[16:53] <colomon> TimToady: we already avoid a useless pipeline.

[16:53] <colomon> The interesting plus is you can say "".ords and get a meaningful result instead of a fail.

[16:53] <PerlJam> TimToady: re ord paying attention to only the first character.  I've long thought that a mistake or at the very least annoying.

[16:53] <TimToady> how can use avoid a useless pipeline on .ord[0] semantics?

[16:53] <TimToady> if it's a multichar string?

[16:54] <colomon> TimToady: given self.chars ...

[16:54] <colomon> TimToady: you change the spec, I'll change Rakudo?  :)

[16:55] <dalek> mu: 01f44e8 | duff++ | misc/perl6advent-2010/articles/feed.pod:

[16:55] <dalek> mu: remove .join from examples

[16:55] <dalek> mu: review: https://github.com/perl6/mu/commit/01f44e8a69

[16:58] <PerlJam> other advent authors: how did you go from POD to wordpress?

[16:59] <moritz_> pod2html => hand edit

[16:59] <moritz_> (join ech paragraph to one line, fix links that your pod2html couldn't convert)

[16:59] <PerlJam> okay, that's what I'm doing too.  Just thought there might be a better way

[17:00] * colomon just wrote in wordpress, distressingly low-tech ;)

[17:01] <colomon> hmmm, ord / ords patch failed to compile, and it's lunch time.

[17:10] <moritz_> rakudo: grammar G { rule TOP { ^ \s* $ } }; say ?G.parse(' ')

[17:10] <p6eval> rakudo : OUTPUT«Bool::False␤»

[17:11] <dalek> specs: b578b58 | TimToady++ | S29-functions.pod:

[17:11] <dalek> specs: Distinguish listy ords/chrs from ord/chr

[17:11] <dalek> specs: 

[17:11] <dalek> specs: It will be too confusing to overload ord/chr with both scalar and

[17:11] <dalek> specs: list semantics.  This will also give more information to the optimizer

[17:11] <dalek> specs: at compile time, since it cannot know whether .ord will be passed

[17:11] <dalek> specs: a single- or multi-character string

[17:11] <dalek> specs: review: https://github.com/perl6/specs/commit/b578b580a3

[17:11] <moritz_> urks

[17:11] <moritz_> (that was related to the regex thing)

[17:13] <moritz_> the implicit <.ws> before the ^ matches, so ^ is not at the start of the line anymore

[17:16] <TimToady> yes, I've said before that such usage probably ought to generate a compile-time error, or maybe we should suppress .ws before certain tokens

[17:16] <TimToady> matching \s* in a rule is suspect in any case

[17:17] <moritz_> rakudo: grammar G { rule TOP { ^ \w* $ } }; say ?G.parse(' ')

[17:17] <p6eval> rakudo : OUTPUT«Bool::False␤»

[17:17] <moritz_> doesn't need \s* to demonstrate that weirdness :-)

[17:17] <TimToady> yes, separate issue

[17:18] *** ilogger2 joined
[17:18] *** ChanServ sets mode: +v ilogger2

[17:18] <moritz_> ^ does not match whitespace 

[17:19] <TimToady> I was talking about \s*, not ^

[17:19] <PerlJam> I think moritz_ means it wouldn't have helped in this case.

[17:20] <moritz_> right

[17:20] <TimToady> I wasn't claiming it would

[17:20] <TimToady> I'm discussing "separate issue"

[17:20] <moritz_> right

[17:21] <moritz_> (in fact I only had a \s* in there for testing, because the implicit <.ws> didn'T seem to work, but it turned out that the whitespace before the ^  was the problem)

[17:21] <TimToady> which is that currently that \s* will never match anything in that rule

[17:21] <TimToady> even if the ^ did match

[17:23] * PerlJam votes for a warning on explicit whitespace matching whenever :sigspace is in effect.

[17:23] <PerlJam> we could always relax that if we later decide to make it magically work

[17:23] <PerlJam> (plus it trains people on the Right Way :)

[17:24] <TimToady> otoh, LTM currently suppresses <.ws> in rules that begin with alternations

[17:24] <TimToady> so suppressing it before ^ and ^^ would be similar

[17:24] *** dac joined
[17:25] <PerlJam> and after $$ ?

[17:25] <TimToady> after isn't a problem, but before is, since it will eat the \n

[17:27] *** dac left
[17:27] *** cdarroch joined
[17:27] *** cdarroch left
[17:27] *** cdarroch joined
[17:27] <PerlJam> won't a <.ws> after $$ eat whitespace that another rule in sequence may want to anchor to?

[17:27] <bbkr> std: map { }

[17:27] <p6eval> std a194beb: OUTPUT«ok 00:01 118m␤»

[17:27] <bbkr> rakudo: map { }

[17:27] <p6eval> rakudo : OUTPUT«Can't call map() with a Hash argument, Callable required␤You probably wrote a Hash composer accidentally - try to␤disambiguate it with a ; directly after the opening brace␤  in 'Any::map' at line 1468:CORE.setting␤  in 'map' at line 1814:CORE.setting␤  in main program body at line …

[17:27] <TimToady> PerlJam: yes, that could happen too

[17:27] <bbkr> known bug?

[17:28] <jnthn> bbkr: Rakudo is helping you there.

[17:28] <jnthn> bbkr: Also it's a runtime check I think.

[17:28] <PerlJam> rakudo:  map {; }

[17:28] <p6eval> rakudo :  ( no output )

[17:28] *** dac joined
[17:28] <jnthn> rakudo++

[17:28] <PerlJam> bbkr: see?  no worries.  :)

[17:29] <TimToady> rakudo: map { $_ }

[17:29] <p6eval> rakudo :  ( no output )

[17:30] <TimToady> rakudo: map { $_ => $_ }

[17:30] <PerlJam> rakudo: map { 5 }

[17:30] <p6eval> rakudo : OUTPUT«Can't call map() with a Hash argument, Callable required␤You probably wrote a Hash composer accidentally - try to␤disambiguate it with a ; directly after the opening brace␤  in 'Any::map' at line 1468:CORE.setting␤  in 'map' at line 1814:CORE.setting␤  in main program body at line …

[17:30] <p6eval> rakudo :  ( no output )

[17:30] <bbkr> rakudo: { 5 }.WHAT.say

[17:30] <p6eval> rakudo : OUTPUT«Block()␤»

[17:30] <TimToady> rakudo: say { $_ => $_ }.WHAT

[17:30] <p6eval> rakudo : OUTPUT«Hash()␤»

[17:31] <TimToady> I believe that is anti-spec

[17:31] * colomon finds Rakudo compiles much better if you don't have random failed patches sitting around to confuse it....

[17:31] <moritz_> TimToady: indeed. But pmichaud pointed out that the spec has quite some holes

[17:31] <colomon> > "This is a test".ord

[17:31] <colomon> 84

[17:31] <colomon> > "This is a test".ords

[17:31] <colomon> 84 104 105 115 32 105 115 32 97 32 116 101 115 116

[17:32] <PerlJam> colomon++

[17:32] <PerlJam> colomon: and  +ord("This is a test") == 84 ?

[17:33] <colomon> > +ord("This is a test") == 84

[17:33] <colomon> Bool::True

[17:33] <bbkr> so "map { }" is not a bug. but should "map { 5 }" be reported? clearly first param is a block

[17:33] <moritz_> rakudo: say <a b c>.first('b')

[17:33] <p6eval> rakudo : OUTPUT«b␤»

[17:34] <PerlJam> rakudo:  map { 9,5,3 }, ()

[17:34] <p6eval> rakudo :  ( no output )

[17:34] <PerlJam> I guess you can't create something from nothing.

[17:34] <PerlJam> er, Nil :)

[17:35] <PerlJam> rakudo++

[17:36] <TimToady> yes, S04:1580 requires that to be considered Code, not Hash

[17:36] <PerlJam> wait ...

[17:36] <PerlJam> rakudo: map { 5 }

[17:36] <p6eval> rakudo :  ( no output )

[17:36] <PerlJam> correct

[17:36] <PerlJam> rakudo: map { $_ => $_ }

[17:36] <p6eval> rakudo : OUTPUT«Can't call map() with a Hash argument, Callable required␤You probably wrote a Hash composer accidentally - try to␤disambiguate it with a ; directly after the opening brace␤  in 'Any::map' at line 1468:CORE.setting␤  in 'map' at line 1814:CORE.setting␤  in main program body at line …

[17:37] <bbkr> aw, works, indeed. i looked at wrong rakudo response. sorry

[17:37] <TimToady> that's what is violating spec, not { 5 }

[17:37] <PerlJam> right

[17:38] <TimToady> hash composers are not allowed to reference $_, basically

[17:38] <TimToady> OUTER::<$_> would be fine though

[17:40] <colomon> > chrs(112, 101, 114, 108)

[17:40] <colomon> Too many positional parameters passed; got 4 but expected 1

[17:40] <colomon> > chrs([112, 101, 114, 108])

[17:40] <colomon> perl

[17:41] <colomon> whoops, missed the *@grid

[17:42] <PerlJam> colomon: got a test for chrs(ords($string)) eq $string  ?

[17:42] <colomon> PerlJam: Haven't looked at the tests yet.  

[17:42] <colomon> I'm assuming this change will break some of them.

[17:42] <colomon> and I definitely don't have any tests for chrs / ords

[17:46] <colomon> TimToady: don't we need both chrs( Int *@grid ) and chrs( Int @grid )   ?

[17:46] <TimToady> still think it should be @who-it's-at, since the apostrophe is legal in P6

[17:47] <colomon> because chrs([112, 101, 114, 108]).ord == 4 seems as bad as where we started from...

[17:47] <TimToady> you can always use |@foo

[17:47] <TimToady> but yeah, we could multi in an array arg

[17:48] <TimToady> esp since it could be optimized better in some cases, methinks

[17:48] <colomon> now if Rakudo can just handle it without blowing up....

[17:49] <bbkr> rakudo: map { 1 } X==> grep { 1 } # should this be forbidden as STD says? Rakudo compiles and looks for signature anyway (and almost gets it right!) 

[17:49] <TimToady> would be funny if chrs(ords($foo),ords($bar)) was faster than ~

[17:49] <p6eval> rakudo : OUTPUT«No candidates found to invoke for method 'map' on object of type 'Array'; available candidates have signatures:␤:(Mu : &block;; *%_)␤␤  in 'map' at line 1814:CORE.setting␤  in main program body at line 22:/tmp/eOo7gmSDCc␤»

[17:49] <PerlJam> TimToady: I don't know ... for people that haven't seen it yet, using - in variables seems only slightly surprising while using ' in variables seems like the universe is out of whack  :)

[17:49] <PerlJam> and I didn't want to distract 

[17:50] <TimToady> the its/it's messup is also disturbing to may people

[17:50] <TimToady> *many

[17:52] <PerlJam> if it'll make you and tchrist happy  ...  :)

[17:53] <PerlJam> post updated to say @who-it's-at

[17:56] <TimToady> it'll be a nice waitaminute easter egg at the end for sompe people

[17:56] <TimToady> *some

[17:58] <colomon> >  chrs([112, 101, 114, 108])

[17:58] <colomon> perl

[17:58] <colomon> >  chrs(112, 101, 114, 108)

[17:58] <colomon> perl

[17:58] <colomon> \o/

[17:58] <PerlJam> Lots of people rejoiced when Perl lost ' as namespace separator.   I can't imagine those people would be happy to see ' crop up in variable names.

[17:58] <TimToady> or I guess it'd be a christmas egg in this case

[17:58] <colomon> PerlJam: any test progress?  ;)

[17:58] <TimToady> those people will have to get used to it sooner or later

[17:58] <TimToady> best to hit them with a good use case early

[17:59] <TimToady> and most of the ick factor of old ' was that it was short for ::

[17:59] <TimToady> admittedly, it also gives a bit of heartburn to syntax highlighers, but not much, really

[18:00] <TimToady> *ght

[18:01] <PerlJam> I just have trouble remembering a single positive comment from people outside #perl6 about apostrophes in variable names.

[18:02] <PerlJam> granted, the sample size of people I've talked with on this subject is quite small.

[18:04] <TimToady> we're not designing Perl 6 to please sticks-in-the-mud

[18:04] <slavik1> TimToady: when is christmas? ;)

[18:04] <TimToady> dec 25

[18:04] <slavik1> not that christmas

[18:05] <TimToady> dec 25, *

[18:05] <PerlJam> slavik1: it's christmas everyday  (we've had rakudo for a while now)

[18:05] <slavik1> PerlJam: good opoint

[18:06] <TimToady> .oO("The kingdom of heaven is already among you.")

[18:06] <PerlJam> repent! 

[18:06] <PerlJam> ;)

[18:07] <colomon> wasn't dec 25, * around -3 BC?  ;)

[18:11] <allbery_b> -4BC, and don't forget to factor in whenever your area did the gregorian conversion because that could potentially be off by a day

[18:11] <allbery_b> (nd if you never did, like orthodox christianity, christmas is now january 7 on the civil calendar, having recently moved forward another day </pedant>)

[18:12] <allbery_b> (aaaand now you know wht Instants and Durations are such a PITA to get right)

[18:13] <PerlJam> allbery_b: those should be easy ... it's Mayan::Durations and Gregorian::Durations and such that should be a PITA

[18:13] <PerlJam> :-)

[18:15] <PerlJam> unless you're going to factor in relativistic effects too.  But I prefer choosing time as a fixed frame of reference for now as it makes everyday life easier

[18:15] <allbery_b> you want real fun, try the Islamic calendar

[18:16] <allbery_b> especially the bit about how every community has different conventions for when a new month starts (the two most common being local time and time at Mecca)

[18:17] <rokoteko> so whats wrong with seconds since 01.01.1970 ?

[18:17] <TimToady> -3 AD is 4 BC

[18:18] <allbery_b> the fact that even if it's signed you get about 50 years either side of 1970

[18:18] <PerlJam> rokoteko: seconds since 01.01.1970 where?  and which 01.01.1970 ?  :

[18:18] <TimToady> -4BC would be 3 AD :)

[18:18] <allbery_b> (see the Y2038 problem)

[18:19] <rokoteko> allbery_b: are you talking to me? you extend the timestamp to 64bits and have some time to think.

[18:19] <TimToady> just use FatRats and be done with it

[18:20] <allbery_b> but the real issuew is Perl 6 wants to support more than the POSIX time model.  Astronomical time is one key case IIRC

[18:20] <rokoteko> use RatsThatAlreadyExplodedBecauseTheyWereGettingTooFat;

[18:20] <TimToady> the POSIX time model is fundamentally flawed

[18:20] <allbery_b> also, it weants to not hardcode the Gregorian calendar, which is what you do if you use 1-1-1970

[18:21] <rokoteko> TimToady: personally I think all the floats are flawed. bad design. it should be something like 1 would be largest number ever existed, 2 would be the second largest etc. if you need fractions you got 1/<the smallest number> which is the most accurate you can get.

[18:22] <TimToady> I think the stringification of Instant should pick a random epoch every time you run

[18:22] * allbery_b notes that he regularly uses two calendar systems, and even has a watch that helps with it

[18:23] <TimToady> perhaps Instants should numify to the start time of the program as the epoch

[18:23] <rokoteko> why just admit to the largest number your computer can recognize and to stick to that to avoid even more significant errors.

[18:23] <TimToady> how much memory do you have?

[18:23] <rokoteko> me? 4gb on this machine.

[18:23] <allbery_b> gmp lets you have some pretty large numbers

[18:24] <rokoteko> it will get me very far with somehow important calculations without erros, won't it?

[18:24] <TimToady> that's probably accurate enough for most practical purposes

[18:24] <allbery_b> (see Haskell's Integer type, and the BigInt module for perl5)

[18:24] <TimToady> or the Int type for perl6 :)

[18:24] <rokoteko> and you avoid floating point errors. win-win.

[18:24] <TimToady> or should I say "Perl 6"

[18:25] <allbery_b> or i it BigNum?  haven't used it in a while and antidepressant changes are mucking with my memory :/)

[18:25] <TimToady> by the time your temporal calculations exceed the capacity of FatRat, it'll be later than you think

[18:25] <allbery_b> "it's always too late" problem solved

[18:25] <colomon> heh.  S29-conversions/ord_and_chr.t passes just fine after my change.  :\

[18:26] <TimToady> he said testily...

[18:27] <colomon> he said swiftly...

[18:27] <rokoteko> TimToady: is this implemented as BigRats in perl6?

[18:27] <TimToady> "Anything you can do, I can do meta."

[18:27] <colomon> "I can do anything meta than you."

[18:28] <TimToady> yes, that's the other end of it

[18:28] <rokoteko> "What is meta?"

[18:28] * colomon must stop before he laughs himself sick(er)

[18:28] <TimToady> Why do you ask?

[18:28] <rokoteko> TimToady: to quote my thoughts.

[18:28] <TimToady> that's what you think

[18:29] <rokoteko> me realizes he is chatting with Larry Wall.

[18:29] * TimToady apologizes profusely, or perhaps confusely

[18:29] <moritz_> happens.

[18:29] <moritz_> Use of uninitialized value in numeric context  in 'MapIter::reify' at line 1

[18:29] <moritz_> that's... not very useful

[18:30] <rokoteko> if chuck norris met something concrete he would meet TimToady being meta.

[18:30] <slavik1> ...

[18:30] <slavik1> awesomes ^^

[18:30] <TimToady> rokoteko: there are no Big* types in Perl 6.  Int is already arbitrary sized (but NYI in rakudo), and FatRat is the Int/Int version of rationals

[18:31] <diakopter> When I'm good I'm very, very good, but when I'm bad, I'm meta.

[18:31] <rokoteko> what is the problem implementing them in rakudo? are they implemented anywhere?

[18:32] <rokoteko> Im also curious, what is the big thing of making the feed operators to work?

[18:32] <moritz_> it needs doing

[18:32] <allbery_b> rakudo is built on top of the parrot vm; if parrot doesn't support bignums yet, rakudo won't

[18:32] <TimToady> feeds are partly done already

[18:32] <TimToady> but only support coroutine semantics so far; we'd like them to pipeline between manycores at some point

[18:33] <diakopter> No one can give you better advice than yourself.

[18:33] <diakopter> er

[18:33] <diakopter> bah.

[18:33] <TimToady> which probably means putting some limititions on what can go on either side of a feed

[18:33] <TimToady> *tat

[18:33] <rokoteko> not very well. and also the translation mapping of $src ==> @feed[@(*)] ==> \my $dest; .. you can probably substitude @feed with a subroutine call?

[18:35] <TimToady> arrays and hashes can always be replaced by subroutine calls, as far as subscripting goes

[18:35] <PerlJam> @feed[@(*)] is already a "subroutine call"

[18:35] <rokoteko> PerlJam: how? using lazy array to generate @feed ?

[18:36] <TimToady> that's already @feed.&postfix:<[ ]>(@(*)) or some such

[18:36] <jnthn> The handling for feeds so far is, iirc, written entirely in NQP. The extra bits for it probably also could be.

[18:37] <jnthn> So no need to dive down to PIR even, for anyone who wants to hack on it. :)

[18:37] <rokoteko> how what PIR is from NQP ?

[18:37] <rokoteko> s/what/far/

[18:37] <TimToady> the main difference between foo() and @foo[] is that the latter is designed to support multidimensional slices

[18:38] <jnthn> rokoteko: A language level. :)

[18:38] <jnthn> PIR is an assembly-ish language. NQP is a small subset of Perl 6.

[18:38] <TimToady> which is also, by the way, the reason that %hash.delete is kinda bogus

[18:38] <rokoteko> so you insert @(*) there. what's the difference between the two? what is @(*) ? I always thought it refers to the current element.

[18:38] <rokoteko> kinda like $_ in perl5 but in more obscure context.

[18:38] <TimToady> no, it's a lazy list

[18:38] * jnthn thought it meant "list goes here"

[18:39] <TimToady> so more like @_, except lazy

[18:39] <rokoteko> ah. "each argument at a time, no more please" ?

[18:39] <TimToady> (p5's @_, I mean)

[18:39] <slavik1> TimToady: does it make sense to have a non-lazy list?

[18:39] <TimToady> if you want side effects in the calculation, sure

[18:40] <TimToady> we're not purist when it comes to FP

[18:40] <slavik1> TimToady: but wouldn't you still get that with a lazy list?

[18:40] <TimToady> not if you wish to observe the side effect after the syncronization point

[18:40] <allbery_b> slavik1: not always.   compare let and let* in common lisp for example

[18:41] <rokoteko> ok. any writings or thought on how the type system is going to be? ml/haskell like c/java like or something completely different?

[18:41] <slavik1> allbery_b: I am not familiar with lisp that much to understand those

[18:41] <PerlJam> "going to be"?

[18:41] <moritz_> rokoteko: S12 and S14 contain more info on the type system

[18:41] <moritz_> rokoteko: and signfificant parts of it are already implemented

[18:42] <moritz_> it's not like p6 was decided yesterday :-)

[18:42] <rokoteko> no I was merely curious about the idea behind it. I think I've read those, but yes, I can take another look. :)

[18:42] <TimToady> rakudo: my $x; my @foo := 1, { $x++ + $_ } ... * > 1000; say $x

[18:42] <p6eval> rakudo : OUTPUT«Any()␤»

[18:42] <TimToady> rakudo: my $x; my @foo := eager 1, { $x++ + $_ } ... * > 1000; say $x

[18:42] <p6eval> rakudo : OUTPUT«Use of uninitialized value in numeric context  in <anon> at line 22:/tmp/Imo3lVMImE␤46␤»

[18:43] <TimToady> rakudo: my $x = 0; my @foo := eager 1, { $x++ + $_ } ... * > 1000; say $x

[18:43] <p6eval> rakudo : OUTPUT«46␤»

[18:43] <TimToady> that uninit on ++ is bogus

[18:43] <slavik1> do rakudo star releases have proper installation scripts or is it best to compile it and use from whatever dir the code is in?

[18:43] <TimToady> it should assume 0

[18:43] <moritz_> TimToady: doesn't $x++ return $x?

[18:44] <moritz_> slavik1: there's an installer

[18:44] <moritz_> aka 'make install'

[18:44] <colomon> rakudo: my $x; my @foo := 1, { ++$x + $_ } ... * > 1000; say $x

[18:44] <p6eval> rakudo : OUTPUT«Any()␤»

[18:44] <moritz_> the README knows more

[18:44] <TimToady> okay, me stands corrected, except I'm not

[18:44] <slavik1> moritz_: awesome, last time I tried it, it didn't put libraries in proper places or something

[18:44] <TimToady> rakudo: my $x; my @foo := eager 1, { ++$x + $_ } ... * > 1000; say $x

[18:45] <p6eval> rakudo : OUTPUT«45␤»

[18:45] <colomon> TimToady: In your first example, .... ah, you caught the eager

[18:45] <TimToady> arguably, $x++ that assumes 0 should return 0 too

[18:46] <colomon> Commencing spectest run for the ords / chrs patch.

[18:47] <rokoteko> what is $x here. the first parameter passed to the block because there are no more prioritized (alphabetically by variables name) variables to use?

[18:47] <moritz_> rokoteko: $x is just the $x that was declared with 'my $x'

[18:47] <rokoteko> where does $_ come from ?

[18:48] <rokoteko> ahh..

[18:48] <moritz_> $_ is the first argument of the block

[18:48] <rokoteko> too much perl5 like. I got confused with $^x 

[18:51] <moritz_> rakudo: say 1 <= -2 <= 5

[18:51] <p6eval> rakudo : OUTPUT«Bool::False␤»

[18:51] <dalek> specs: ef12f7f | TimToady++ | S03-operators.pod:

[18:51] <dalek> specs: make $x++ return 0 on appropriate undefs

[18:51] <dalek> specs: 

[18:51] <dalek> specs: Since the operator is doing something defined, the first

[18:51] <dalek> specs: value it returns should also be defined.

[18:51] <dalek> specs: review: https://github.com/perl6/specs/commit/ef12f7f7c5

[18:52] <moritz_> rakudo: say <a b c>.first('d')

[18:52] <p6eval> rakudo :  ( no output )

[18:52] <TimToady> rakudo: my $x; my @foo := eager 1, ++$x + * ... * > 1000; say $x

[18:52] <p6eval> rakudo : OUTPUT«45␤»

[18:53] <colomon> rakudo: my $x; my @foo = 1, ++$x + * ... * > 1000; say $x

[18:53] <p6eval> rakudo : OUTPUT«45␤»

[18:53] <TimToady> assignment is eager, yes

[18:54] <colomon> just trying to make sure I wasn't missing something there.  :)

[18:54] <TimToady> well, mostly eager

[18:54] <colomon> eager enough for the purposes of this conversation.

[18:54] <TimToady> it should know to give up on infinities

[18:54] <TimToady> rakudo: my $x; my @foo = 1, ++$x + * ... *; say $x  # should work eventually

[18:54] <colomon> I still think assignment should be more lazy, but I'm not going to rehash that today.

[18:55] <p6eval> rakudo : OUTPUT«(timeout)»

[18:55] <TimToady> it should see the * on the right and tell the assignment to be lazier

[18:56] <TimToady> and we've discussed allowing ,* on the ends of lists that are known to be infinite by the programmer but not by the compiler

[18:56] <TimToady> such a ,* is harmless even if it means replicate the final value, since an infinite list won't have a final value

[18:58] <TimToady> we should make sure it also works in: 1,2,3 ... :!defined, *

[19:00] <PerlJam> std: @foo ==> @(*) ==> @bar 

[19:00] <p6eval> std a194beb: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable @foo is not predeclared at /tmp/2EpRZrvy2q line 1:␤------> [32m@foo[33m⏏[31m ==> @(*) ==> @bar[0m␤Variable @bar is not predeclared at /tmp/2EpRZrvy2q line 1:␤------> [32m@foo ==> @(*) ==> @bar[33m⏏[31m<EOL>[0m␤Check failed␤FAILED

[19:00] <p6eval> ..00:0…

[19:00] <PerlJam> std: my @foo ==> @(*) ==> my @bar 

[19:00] <p6eval> std a194beb: OUTPUT«ok 00:01 121m␤»

[19:04] *** gbacon_ joined
[19:08] * moritz_ thinks he found a rakudobug, but has trouble reproducing

[19:09] <rokoteko> TimToady: haha. this was just earlier today in thedailywtf. :9 http://thedailywtf.com/Articles/Really,-Really-Freaking-Huge-Time-Limit.aspx

[19:09] *** dac left
[19:09] <rokoteko> ... erm. or a couple days ago.

[19:09] <flussence> depends which planet you're on

[19:10] <rokoteko> do you have collection I can choose out of?

[19:11] <flussence> actually, the link looks only 0.8 earth-days old...

[19:12] * flussence doesn't pay that much attention to the RPM of other orbital rocks anyway

[19:16] *** impious joined
[19:18] <TimToady> funny that the comment talks about "all the 0s" when there are only 9s...

[19:19] <moritz_> rakudo: class A { method ACCEPTS($x) { say "ACCEPTS: $x" } }; $_ = A.new; 3 ~~ $_;

[19:19] <p6eval> rakudo :  ( no output )

[19:19] <moritz_> rakudo: class A { method ACCEPTS($x) { say "ACCEPTS: $x" } }; 3 ~~ A.new;

[19:19] <p6eval> rakudo : OUTPUT«ACCEPTS: 3␤»

[19:20] <TimToady> surely the other rocks would have identical RPMs, if they define minutes as a fraction of their daily revolution...

[19:20] * moritz_ submits the first masak-contest-induced rakudobug

[19:28] *** jhuni joined
[19:31] *** dju_ joined
[19:32] <colomon> \o/  moritz_++

[19:32] <jnthn> moritz_: Ain't that spec?

[19:33] <jnthn> e.g. $_ is set to the LHS of a smart-match

[19:33] <jnthn> Thus how $x ~~ .predicate works.

[19:33] <moritz_> jnthn: hm

[19:34] <moritz_> so it really does   do { my $_ = 3; .ACCEPTS($_) } ?

[19:35] *** mkramer joined
[19:35] <jnthn> moritz_: It really changes $_ for the time it takes to evaluate the RHS, yes.

[19:36] <jnthn> moritz_: There used to be a bunch of syntactic special cases

[19:36] <jnthn> so $x ~~ .foo worked becuase it was syntactically special.

[19:36] <jnthn> But a while ago that went away in favor of just twiddling $_

[19:36] * jnthn remembers implementing that change

[19:37] <TimToady> so ~~ $_ always asks an object if it finds its own self acceptable, I guess... :)

[19:37] <TimToady> but maybe we should warn

[19:37] <moritz_> so, not a bug after all, just very unintuititve

[19:39] <TimToady> rakudo: class A { method ACCEPTS($x) { say "ACCEPTS: $x" } }; $_ = A.new; say "yes" when $_ given 3

[19:39] <p6eval> rakudo : OUTPUT«yes␤»

[19:39] *** dual joined
[19:39] <TimToady> rakudo: class A { method ACCEPTS($x) { say "ACCEPTS: $x" } }; $_ = A.new; say "yes" if 3 ~~ $_

[19:39] <p6eval> rakudo : OUTPUT«yes␤»

[19:39] <TimToady> same thing, really

[19:40] <jnthn> moritz_: Yes; otoh you're the first person I am aware has run into this issue since the change was implemented.

[19:40] <jnthn> moritz_: Which dates back pre-R*.

[19:40] <jnthn> I imagine it's bizzare to run into though. +1 to warning.

[19:40] <TimToady> what's the workaround to the warning?

[19:41] <moritz_> jnthn: actually I remember urging you to implement it, so that  ~~ s/// coul work properly

[19:41] <moritz_> ~~ * # if the type accepts itself

[19:41] <TimToady> that's always true

[19:41] <moritz_> right

[19:42] <jnthn> TimToady: Just put the thing you want to test into anything other than $_ :-)

[19:42] <TimToady> rakudo: my $x = /foo/; say "yes" if $x ~~ $_

[19:42] <p6eval> rakudo :  ( no output )

[19:43] <dalek> rakudo: d1e6636 | colomon++ | src/core/Cool- (2 files):

[19:43] <dalek> rakudo: Split Any.ord into Any.ord and Any.ords, add Any.chrs.

[19:43] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/d1e66361f6

[19:43] <TimToady> there's something that doesn't accept itself

[19:45] <moritz_> maybe Regex.ACCEPTS should only accept Cool, and Regex !~~ Cool

[19:48] *** dju_ left
[19:49] *** dju joined
[19:49] *** dju left
[19:49] *** dju joined
[19:52] <TimToady> makes sense

[19:53] <colomon> "It should not matter whether the points in the polygon run clockwise or counterclockwise."  Silly masak!

[19:55] <colomon> And silly colomon for looking at this problem when I should be doing an Advent post.

[19:55] <moritz_> TimToady: do you want to contribute a post for the advent calendar?

[19:56] <TimToady> if I did, it'd probably be about cultural hacks

[19:56] <moritz_> that's totally fine, as long as it's somewhat related to p6 (or the p6 community)

[19:56] <TimToady> well, I think Camelia is related :)

[19:57] <moritz_> somewhat :-)

[19:57] <TimToady> and she'd definitely intended as a cultural hack

[19:59] <PerlJam> So far the posts have been mostly technical.  It would be nice to expose a little more of the culture.

[20:00] *** mkramer left
[20:01] *** jedai joined
[20:01] <rokoteko> I think I need to get to bed. Good night all. Sleep tight, don't let the bed bugs bite!

[20:02] <TimToady> o/

[20:03] *** gbacon_ left
[20:05] <TimToady> $.nomifications

[20:06] *** dju left
[20:06] *** mkramer joined
[20:10] *** l34k joined
[20:10] *** [Coke] joined
[20:12] *** lichtkind joined
[20:17] <sjohnson> http://xspblog.com/wp-content/uploads/2009/12/OmNomNomNom.jpg

[20:18] <flussence> that's a big bed bug.

[20:18] <rokoteko> what the heck. it's only 22:28 (in finnish time) and I was about to go to bed. I just realised that and go tback up.

[20:19] *** risou joined
[20:19] <rokoteko> I think I will turn the radio on next.

[20:19] <jnthn> The day didn't finnish yet. :)

[20:20] <rokoteko> It's a commercial about a christmas pig (that one is supposed to eat) on the radio

[20:21] <rokoteko> oh wait. god knows of finnish. maybe this is actually the song. lasts too long to be a commercial.

[20:22] *** Trashlord joined
[20:24] <rokoteko> ahh. christmas songs :)

[20:27] *** icwiener joined
[20:34] *** dsp_ joined
[20:34] *** abra joined
[20:35] *** abra left
[20:42] *** Guest96690 joined
[20:44] *** thelazydeveloper joined
[20:45] *** abra joined
[20:48] <sorear> good * #perl6

[20:49] <jasonmay> hola

[20:49] *** abra left
[20:50] <jasonmay> so, I want to look at the HOW stuff in rakudo. are there any guides anywhere, docs the describe the internal architecture, anything like that?

[20:51] <jasonmay> (I have these crazy ideas in my head that I could just dig into the source, see what's going on, clean things up a bit)

[20:54] *** abra joined
[20:55] <sorear> check docs/

[20:55] <sorear> rakudo: say 2.PARROT

[20:55] <p6eval> rakudo : OUTPUT«Int␤»

[20:55] <sorear> rakudo: say 2.HOW.PARROT

[20:55] <p6eval> rakudo : OUTPUT«ClassHOW␤»

[20:55] <sorear> rakudo: say 2.HOW.HOW.PARROT

[20:55] <p6eval> rakudo : OUTPUT«Method 'PARROT' not found for invocant of class ''␤  in main program body at line 22:/tmp/LIoLsKfwJA␤»

[20:55] <moritz_> jasonmay: the meta object implementation is being reimplemented, see http://6guts.wordpress.com/ for more info

[20:59] *** rgrau joined
[21:01] <jasonmay> sorear/moritz_: thanks

[21:01] <lichtkind> why oh why #`() ? why not ##() ?

[21:02] <moritz_> lichtkind: because ` is the only printable ASCII character that doesn't appear in any other Perl 6 syntax

[21:03] <lichtkind> moritz_: because its hard to type :)

[21:03] <lichtkind> moritz_: thank you

[21:05] *** Chillance joined
[21:19] *** risou left
[21:20] *** risou joined
[21:22] *** icwiener_ joined
[21:23] *** abra left
[21:24] *** icwiener left
[21:26] *** icwiener_ left
[21:26] *** abra joined
[21:31] *** abra left
[21:31] *** abra joined
[21:32] *** finanalyst joined
[21:32] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[21:44] <lichtkind> qx is evaled on BEGIN time?

[21:44] <lichtkind> or on runtime?

[21:44] <moritz_> what makes you think so?

[21:44] <lichtkind> im not shure and cant find nothing in S02

[21:44] <moritz_> when in doubt, it's the same as in p5

[21:45] <lichtkind> its also mit ambigous if qqx is really in the P6 definition or example macro

[21:45] <lichtkind> so runtime good

[21:45] *** abra left
[21:45] <moritz_> std: qqx/foo/

[21:45] <p6eval> std a194beb: OUTPUT«ok 00:01 118m␤»

[21:45] <moritz_> lichtkind: feel free to clarify the spec

[21:45] *** abra joined
[21:45] <lichtkind> i dont feel in position to do that :)

[21:46] <moritz_> why not?

[21:46] <lichtkind> and i wonder if your qqx did a real system call

[21:46] <moritz_> of course it did not, since std only checks syntax

[21:46] <lichtkind> ah

[21:47] <lichtkind> i just start with clarifying tablets and i think i dont have commit bit anyway

[21:48] <moritz_> you have one

[21:48] <moritz_> anyway, to me it's pretty clear

[21:48] <moritz_> "You may omit the first colon by joining an initial C<Q>, C<q>, or C<qq> with

[21:48] <moritz_> a single short form adverb"

[21:50] *** M_o_C joined
[21:52] *** abra left
[21:52] *** abra joined
[21:53] <lichtkind> moritz_: it was not clear to be if its evaled on runtime

[21:53] *** abra left
[21:54] *** abra joined
[21:55] <lichtkind> and qqw was so close to that macro that i didnt know hes referring to it

[21:56] *** abra left
[22:07] *** am0c joined
[22:11] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[22:11] *** felliott joined
[22:13] *** meraxes left
[22:16] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[22:21] *** M_o_C left
[22:21] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[22:28] *** finanalyst left
[22:32] *** dsp_ left
[22:32] *** dsp_ joined
[22:32] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[22:32] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_basics_tablet

[22:37] *** kfo_ joined
[22:43] *** hercynium joined
[22:43] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_basics_tablet

[22:45] <lichtkind> rakudo: my @a = <<one "two three">>;say @a.perl

[22:45] <p6eval> rakudo : OUTPUT«["one", "\"two", "three\""]␤»

[22:45] <lichtkind> a bug :)

[22:47] <cotto_work> what's the nomnom branch of nqp-rx for?

[22:47] <sorear> nomNOM?

[22:47] <cotto_work> yes

[22:48] <sorear> looks like there are only two commits different between nom and nomnom, both by colomon++

[22:48] <sorear> ask him

[22:50] <cotto_work> colomon: ping

[22:51] <colomon> pong

[22:51] <cotto_work> colomon: what's nomnom?

[22:51] <cotto_work> and who do I talk to to get a commit bit for nqp-rx?

[22:51] <cotto_work> the capitalization of STable.pmc breaks the build for me

[22:52] <colomon> The goal of nomnom was to break HLL::Compiler away from PCT::HLLCompiler.  In practice, that turned out to be a terrible disaster, so I haven't looked at it further.

[22:52] <colomon> I think I got my commit bit from jnthn or moritz_.

[22:52] <colomon> Is the capitalization all you're worried about at the moment?

[22:52] <cotto_work> for now

[22:53] <cotto_work> I do want to play with it some more though.

[22:53] <cotto_work> its mop is the future

[22:53] <cotto_work> or some approximation thereof

[22:53] <colomon> I can look at fixing that when I get the chance.  (Need to take my little boy out to a Christmas walk at the moment.)

[22:53] *** MayDaniel joined
[22:53] <cotto_work> k

[22:56] <sorear> cotto_work: are you cotto on github?

[22:56] <cotto_work> yes

[22:57] <sorear> you now have an nqp-rx commit bit

[23:03] <cotto_work> sorear: should I expect some tests to fail?

[23:04] <sorear> dunno

[23:04] *** dju joined
[23:08] *** dju left
[23:08] *** dju joined
[23:09] <lichtkind> should i file a bugreport?

[23:16] <colomon> cotto_work: I seem to recall jnthn++ telling me some tests were expected to fail when I asked the same question.

[23:16] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_basics_tablet

[23:17] <cotto_work> I'll push then.

[23:17] <colomon> cotto_work: feel free to push your filename fix, then.  :)

[23:17] <dalek> nqp-rx/nom: 361fef3 | cotto++ | src/pmc/ (2 files):

[23:17] <dalek> nqp-rx/nom: rename STable.pmc to stable.pmc to avoid making case-sensitive OSs sad

[23:17] <dalek> nqp-rx/nom: review: https://github.com/perl6/nqp-rx/commit/361fef33ae

[23:18] <colomon> cotto_work++

[23:18] <sorear> cotto_work: Why is that needed?

[23:19] <cotto_work> on my ubuntu box gcc can't find pmc_STable.h

[23:20] *** risou_ joined
[23:20] <sorear> ah

[23:20] <colomon> ie the nom branches had only ever been built on Windows and OS X, likely.

[23:21] <cotto_work> I figured

[23:21] <cotto_work> it's a weakness of pmc2c

[23:21] <cotto_work> one of many

[23:21] <colomon> it's a weakness of not testing your build on enough different machines.  :\

[23:22] <colomon> Actually, come to think of it, I found a couple of things that didn't work on OS X when I tried building it for the first time.

[23:23] *** risou left
[23:24] *** Guest96690 left
[23:24] <cotto_work> What's the relationship between nom and 6model?

[23:25] <colomon> ah.... that's a darned good question.  Do you know, sorear?

[23:26] <diakopter> the ideas prototyped in 6model are expected to someday be propogated back to nom

[23:26] <colomon> diakopter++

[23:26] *** jferrero joined
[23:28] <cotto_work> So does 6model exist to flesh out issues that came up in nom?

[23:29] <colomon> 6model is a complete rewrite of the object system, targeting CLR first

[23:30] <colomon> afk # off to Christmas walk

[23:31] *** MayDaniel left
[23:36] <cotto_work> do nom and 6model implement the same object model, just with 6model targeting the CLR?

[23:36] <cotto_work> I'm trying to understand why they both exist and what role they fill.

[23:39] *** Bzek_ joined
[23:40] <sorear> cotto_work: 6model came first

[23:40] <sorear> 6model develops the new object system for multiple VMs at the same tim

[23:40] <sorear> for pragmatic reasons, 6model/parrot is kept in the nqp repo

[23:40] <sorear> but it's logically still part of 6model

[23:43] <cotto_work> sorear: so nom is 6model/parrot?  That makes sense.

[23:45] <jnthn> cotto_work: There even used to be a 6model/parrot. :)

[23:46] <jnthn> cotto_work: But as soon as it started to get anywhere I realized a branch in the nqp-rx repo was going to be easier overall.

[23:46] <jnthn> So it's just as sorear++ said - pragmatic reasons. Or "jnthn wanted to do it that way" reasons. :)

[23:46] <jnthn> Generally, the implementation on the CLR is the bleeding edge one.

[23:47] <cotto_work> What's more bleedinger about it?

[23:47] <jnthn> It's where I develop stuff / experiment first.

[23:47] <jnthn> Again, pragmatic: it's the easiest place to.

[23:48] <cotto_work> how far ahead is it?

[23:48] <jnthn> Somewhat. (more)

[23:48] <jnthn> The hard thing tends to not be the implementation, but working out how to do it, and how to factor it.

[23:49] <jnthn> The big area it's way ahead in is multi-dispatch.

[23:49] <jnthn> The lexicals problem I mentioned aside, though, now I've got a factoring/design I'm happy with, porting it is not all that much effort.

[23:50] <jnthn> Generally I don't port until I (a) have a time slot to do it and (b) am fairly happy that the design of the thing I'm going to port is fairly solid, to try and avoid dupe work.

[23:51] <cotto_work> It sounds like I won't lose too much by studying nom.

[23:51] <cotto_work> rather than 6model

[23:51] <jnthn> The core data structures are in there.

[23:52] <jnthn> (in both)

[23:52] <jnthn> Both have a ClassHOW implemented in NQP.

[23:52] <jnthn> The nom one knows how to do MI, but not how to handle multi-methods. Vice versa for 6model.

[23:53] <jnthn> If there's a reason to study 6model, it's because it has to provide stuff that nom currently relies on Parrot having PMCs for.

[23:53] <jnthn> And it does it by fitting it in with the overall representation polymorphism model.

[23:53] <cotto_work> So it'll be more like the eventual M0 implementation.

[23:54] <jnthn> Well, nom grudglingly accepts the existence of PMCs.

[23:54] <jnthn> So far as I care for them, they're in the same class as CLR objects.

[23:54] <jnthn> Something the rest of what I do has to interop with.

[23:54] <jnthn> And in some cases, build things out of.

[23:55] <jnthn> There's no real reason that PMCs couldn't just become another type of repr/HOW.

[23:55] <jnthn> Though their repr is really "a chunk of memory that C manages".

[23:55] <jnthn> er

[23:55] <jnthn> I mean, that's used like a struct by some C code.

[23:56] <jnthn> Though I guess with Lorito, iiuc, there's no C code per se.

[23:56] <sorear> what I see right now is jnthn managing to attract lots of people to help with something

[23:56] <cotto_work> jnthn: right

[23:57] *** nymacro joined
[23:57] <sorear> despite not having the technical advantage

[23:57] <jnthn> sorear: wtf?

[23:57] <sorear> Niecza can currently run more stuff than NQP.NET, IIUC

[23:58] <sorear> I thought "run more stuff" was the best way to attract more people.  It's not working out like that.

[23:58] <jnthn> sorear: Yes. It always will be able to as well. :)

[23:58] <sorear> ("technical advantage" is a bit vague and wrong here...)

[23:59] <jnthn> sorear: If you want to attract people whose primary interest is "a full featured Perl 6 compiler", I suspect it is.

