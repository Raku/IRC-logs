[00:04] *** xabbu42 left
[00:05] *** jedai_ left
[00:06] *** jedai joined
[00:10] *** f00li5h left
[00:10] *** f00li5h joined
[00:17] *** felipe left
[00:18] *** ggoebel joined
[00:24] *** ggoebel left
[00:28] *** f00li5h left
[00:33] *** rvrgs left
[00:33] *** wamba left
[00:40] *** stkowski left
[00:40] *** QinGW joined
[00:44] *** QinGW left
[00:48] *** QinGW joined
[00:57] *** masonkramer joined
[01:01] *** ggoebel joined
[01:05] *** f00li5h joined
[01:06] *** f00li5h left
[01:06] *** f00li5h joined
[01:07] *** SpiceMan joined
[01:09] <SpiceMan> I'm early adopting rakudo star. compiling right now, never really cared to read about perl 6. is there some perldoc perlsyn like thin?

[01:09] <SpiceMan> *thing

[01:09] <SpiceMan> (or perldoc, actually :)

[01:21] *** jaldhar joined
[01:25] *** Entonian left
[01:38] *** meppl joined
[01:40] <masonkramer> nothing terribly quick SpiceMan 

[01:42] <masonkramer> I know you're a perl 5 guy - synopses 2, 3, 12 were the most important ones for me to get started

[01:42] <masonkramer> I'm sure the perl 6 authors contributors will have more to say

[01:42] *** florz left
[01:42] <masonkramer> there is also a book, but it's still under heavy development

[01:43] <masonkramer> also this http://perlcabal.org/syn/Differences.html

[01:45] <masonkramer> I've also learned a lot from moritz http://perlgeek.de/en/

[01:47] *** zostay left
[01:48] *** zostay joined
[01:48] *** florz joined
[01:56] *** Sherif joined
[01:56] <Sherif> hello

[01:59] *** Sherif left
[02:15] *** ggoebel left
[02:21] *** ggoebel joined
[02:24] <SpiceMan> masonkramer: thanks, sorry for the late reply, stupid marketing called :p

[02:26] *** f00li5h left
[02:26] <SpiceMan> hey! use v5; is all I needed :p

[02:26] *** f00li5h joined
[02:29] *** nadim_ left
[02:33] *** ggoebel left
[02:38] *** agentzh joined
[02:39] *** skids joined
[02:40] *** masonkramer left
[02:42] *** cdarroch left
[02:45] *** f00li5h left
[02:45] *** f00li5h joined
[02:57] *** zostay left
[02:58] *** zostay joined
[03:10] *** _twitch joined
[03:23] *** meppel joined
[03:24] *** meppl left
[03:29] *** _twitch left
[03:45] *** meppel left
[03:46] *** meppl joined
[03:55] <SpiceMan> hmm, does compiling parrot take a lot of time? it's been in "parrot-nqp --target=pir --output=src/gen/perl6-grammar.pir" since for about 90 mins. (it's a 384MB RAM VM though)

[03:55] <SpiceMan> s/since//

[04:00] <florz> there was some talk about building taking forever recently

[04:01] <SpiceMan> ah, ok. just wanted to know if I had to kill the thing and look for causes or let it be

[04:02] <florz> maybe use one of the * releases?

[04:02] <florz> (assuming you intend to use rakudo ...)

[04:03] <plobsing> SpiceMan: are you using 2.9.0? we (parrot) had to make a 2.9.1 release because of slowness of rakudo compiles.

[04:03] <SpiceMan> I cloned the git repo

[04:03] <SpiceMan> of... rakudo. which I believe fetches parrot with svn

[04:04] <SpiceMan> "parrot_install/include/2.9.1-devel"

[04:06] <plobsing> the gc eats memory in 256M increments. compiling the setting (huge single unit compilation) might require more than 256M, which would exceed your VM's 384M memory and cause crazy swapping.

[04:08] <SpiceMan> right, free mem: 5mb. well, I'm in no hurry

[04:10] *** agentzh left
[04:10] *** Chillance left
[04:11] *** skids left
[04:11] *** agentzh joined
[04:18] *** Schwern joined
[04:24] <dalek> 6model: 588770d | mberends++ | java/runtime/ (6 files):

[04:24] <dalek> 6model: [java/runtime] add P6mapping and sync all recent dotnet changes

[04:24] <dalek> 6model: review: http://github.com/jnthn/6model/commit/588770ddbedcfedf4c2b644d35111bacaa4cf926

[04:39] *** cognominal left
[04:40] *** kjeldahl joined
[04:40] *** colomon joined
[04:50] *** araujo left
[04:56] *** colomon left
[04:59] *** [particle] left
[04:59] *** [particle] joined
[05:18] *** pythonian4000afk is now known as pythonian4000

[05:21] *** pythonian4000 is now known as pythonian4000afk

[05:21] *** Schwern left
[05:43] *** Schwern joined
[05:57] *** _kaare joined
[05:58] *** dual left
[05:59] *** envi joined
[06:05] *** dual joined
[06:11] <sorear> SpiceMan: you really want 768 to build Rakudo now.  384 hasn't been supported since Apr-May

[06:11] <sorear> it fluctuates a great deal - in Mar and Jun-Jul you needed 1.5-2 G

[06:12] <SpiceMan> heh

[06:12] * sorear is stuck on a 384 MB physical box.  One of a handful of reasons I'm not contributing to the Rakudo project

[06:18] *** spinclad left
[06:26] *** xabbu42 joined
[06:29] *** dju_ left
[06:43] *** justatheory left
[06:54] *** [particle]1 joined
[06:56] *** [particle] left
[06:57] *** pnu_ left
[07:34] *** muixirt joined
[07:36] * muixirt wonders why so many devs have low memory boxes

[07:39] <muixirt> sorear: what are the mem requirements building or running niecza?

[07:40] <sorear> muixirt: I think you mean so few.  If Rakudo's memory usage was causing problems for the developers it would have been fixed by now

[07:41] <sorear> ~256.  Which is not a problem for me, so improving it is not a priority.

[07:42] *** aloha left
[07:44] <muixirt> sorear: well I thought of parrot devs as well

[07:45] <muixirt> ok, the mem problems building parrot and rakudo are somewhat related

[07:45] <sorear> only kid51 has ever complained about memory problems among Parrot core devs

[07:46] <sorear> and he has 256MB ram

[07:46] <muixirt> and someone with 128MB complained on the mailing list

[07:47] <muixirt> for example I don't understand the move from ops2c.pl to ops2c.nqp

[07:48] <muixirt> this is cracking nuts with an even bigger slegehammer

[07:51] *** Schwern left
[07:52] <sorear> it needed a rewrite

[07:52] <sorear> b/c Parrot is moving away from C

[07:53] * muixirt snickers

[07:53] *** jfried left
[07:53] *** rgrau left
[07:53] *** LionMadeOfLions left
[07:53] *** IllvilJa left
[07:53] *** sECuRE left
[07:53] *** shabble left
[07:53] *** \xF0 left
[07:53] *** robinsmidsrod left
[07:53] *** Maddingue left
[07:53] *** nsh left
[07:53] *** nperez left
[07:53] *** frodwith left
[07:53] *** xiaolongxia left
[07:53] *** dual left
[07:53] *** _kaare left
[07:53] *** jjore left
[07:53] *** huf_ left
[07:53] *** krakan left
[07:53] *** lue left
[07:53] *** pochi_ left
[07:53] *** broquaint left
[07:53] *** gfldex left
[07:53] *** peters_mops left
[07:53] *** sirhc left
[07:53] *** DarthGandalf left
[07:54] <moritz_> good morning

[07:54] <muixirt> hi moritz_ 

[07:54] <sorear> hi moritz_

[07:55] *** dual joined
[07:55] *** _kaare joined
[07:55] *** jjore joined
[07:55] *** huf_ joined
[07:55] *** krakan joined
[07:55] *** lue joined
[07:55] *** pochi_ joined
[07:55] *** broquaint joined
[07:55] *** gfldex joined
[07:55] *** peters_mops joined
[07:55] *** sirhc joined
[07:55] *** DarthGandalf joined
[07:56] *** kjeldahl left
[07:56] *** jfried joined
[07:56] *** rgrau joined
[07:56] *** IllvilJa joined
[07:56] *** sECuRE joined
[07:56] *** shabble joined
[07:56] *** \xF0 joined
[07:56] *** robinsmidsrod joined
[07:56] *** Maddingue joined
[07:56] *** nsh joined
[07:56] *** nperez joined
[07:56] *** frodwith joined
[07:56] *** xiaolongxia joined
[07:56] *** kjeldahl joined
[08:00] *** LionMadeOfLions joined
[08:02] *** pythonian4000afk is now known as pythonian4000

[08:08] *** krunen joined
[08:09] *** kjeldahl left
[08:12] <dalek> niecza/master: 5c30728 | sorear++ | / (6 files):

[08:12] <dalek> niecza/master: Implement <O> and regex args

[08:12] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/5c30728db98dd6963c3de5c71a7509940ccce19e

[08:19] *** aloha joined
[08:21] <jnthn> morning, #perl6

[08:21] *** mce_ro joined
[08:22] *** dju joined
[08:23] <moritz_> mornin' jnthn 

[08:23] *** dakkar joined
[08:23] *** mce_ro left
[08:23] * moritz_ just finished the cake for wive's birthday

[08:24] *** mce_ro joined
[08:24] <jnthn> moritz_: Nice :-)

[08:25] *** jhuni joined
[08:26] <sorear> Is wive a typo or a linguistic slip?

[08:26] <sorear> morning, jhuni 

[08:26] *** dju left
[08:26] <sorear> jnthn

[08:27] *** dju joined
[08:27] <jnthn> v and f are just a voicing apart :-)

[08:27] <muixirt> moritz_ is a muslim and has wives :-)

[08:28] <sorear> that would be wives' then

[08:28] *** jferrero joined
[08:28] <muixirt> well ok, would be still a typo

[08:29] <jhuni> sorear: thank you, but it is like 10 at night here lol

[08:30] <jhuni> anyways, recently I have been attracted to the idea of visual programming languages like labview

[08:30] <sorear> jhuni: I meant to reply to jnthn> morning, #perl6

[08:31] <jhuni> k

[08:31] <sorear> but irssi and I do not agree on j<tab> :p

[08:31] *** nadim_ joined
[08:31] <jnthn> Yeah, it sucks they didn't implement mind-reading yet.

[08:31] <frettled> And typo-fixing.  Which fixes unintentional typos only.

[08:31] <jhuni> sorear: do you ever get the feeling text programming is cumbersome?

[08:32] <sorear> I don't think the text per se is an issue

[08:32] <sorear> I do get annoyed by the one-dimensionality of it from time to time

[08:33] <frettled> I get annoyed by having to spend time typing trivial code.

[08:33] <sorear> it makes layout ... hard

[08:33] <sorear> VQ issues

[08:33] <frettled> I probably should start using an IDE more actively.

[08:33] <sorear> s/layout/organizing stuff/

[08:34] <sorear> I found the Lego Mindstorms IDE quite infuriating when I played with it six years ago.  Has the state of the art in visual programming languages advanced much since then?

[08:34] <jnthn> I quite like having an IDE at some level, but only if it doesn't get in my way too much.

[08:35] <jnthn> Vanilla Visual Studio I can cope with. Start adding tools like Resharper and the annoyance factor is higher than the usefulness.

[08:35] <sorear> I do enjoy a decent IDE, but most of them are far too totalitarian for my tastes

[08:35] <jnthn> Yes. I really hate excessive "I must fix your code layout"-ness.

[08:35] <jnthn> I lay things out the way I do for a reason.

[08:36] <jnthn> I don't really need an IDE thinking it knows better.

[08:36] <jnthn> But, such things can normally be enabled/disabled at will.

[08:36] <sorear> I haven't met an IDE that insists on fixing code layout yet.  If I did there would be significantly fewer intact windows in the city.

[08:37] <jhuni> In general it is cumbersome to have a unique identifiers for things, like generally people use google to search for stuff rather then typing out a url.... similarily it might be nicer to be able to just search for a function rather then knowing a unique identifier, this especially applies to php functions lol

[08:38] <jhuni> a decent IDE or a visual environment provides that with stuff like autocomplete

[08:39] <sorear> Every nontrivial work in a written language creates its own language, augmenting the language with local context serving as definitions of vague or meaningless terms

[08:39] <sorear> A program is no different

[08:40] <sorear> If your program has more functions than words in your setting vocabulary, your program is far too large

[08:40] * sorear wonders if there's anything like local $::paren = 0 unless $self->passcap in Perl 6

[08:42] <moritz_> uhm, s/v/f/ of course :-)

[08:46] *** jjore left
[08:54] *** am0c joined
[08:55] *** zby_home_ joined
[08:57] *** wamba joined
[09:12] * sorear out

[09:16] <dalek> niecza/master: 2a653c8 | sorear++ | / (5 files):

[09:16] <dalek> niecza/master: Implement $<sym>

[09:16] <dalek> niecza/master: 

[09:16] <dalek> niecza/master: Also restructures and simplifies the regex CHECK process.

[09:16] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/2a653c82015f04fc16770b61da299c930cafe3d2

[09:19] *** robinsmidsrod left
[09:19] *** robins joined
[09:26] *** simcop2387 left
[09:26] *** simcop2387 joined
[09:31] *** muixirt left
[09:36] *** simcop2387 left
[09:37] *** simcop2387 joined
[09:47] *** pnu joined
[09:59] <moritz_> http://nopaste.snit.ch/24655 std build failure (for sorear and TimToady 

[10:06] *** QinGW left
[10:07] *** ggoebel joined
[10:09] <moritz_> somehow I can't manage to bisect anything lately

[10:10] <moritz_> just tried to bisect that "too few positional arguments: 2 passed, 3 (or more) expected" bug when a variable is not predeclared

[10:11] <moritz_> getting quite a different result than before

[10:11] *** mce_ro left
[10:15] *** ggoebel left
[10:19] *** jjore joined
[10:20] *** agentzh left
[10:22] *** masak joined
[10:22] <masak> oh hai, #perl6

[10:24] <moritz_> lolitsmasak!

[10:24] <masak> moritz_: re TimToady saying that the X** in '[+] @nums X** 2' can be parallelized: he seems to be talking about 'these hyperops' in general, so it kinda holds even though X itself is lazy.

[10:24] <moritz_> right, X isn't hyper

[10:24] <masak> also, interestingly a "clever optimizer" could notice that the X** is inside a slurpy [+], and turn it into a <<*<<

[10:24] <masak> s/ly/ly,/

[10:25] <moritz_> <<**>> in genral

[10:25] <masak> troo

[10:33] <masak> TimToady: Java has ++, and has had it since day one, AFAIK. the foreach came in Java 5, but there are no ranges, so it doesn't really help in the example shown.

[10:37] <moritz_> could anybody else please try to bisect it?

[10:41] *** baux joined
[10:45] *** ggoebel joined
[10:46] *** colomon joined
[10:46] <masak> ah, so *that*'s where the "Rakudo is fast as a turtle" meme comes from.

[10:46] <masak> TimToady running his turtle on Rakudo and jokingly pointing out when Parrot does a GC run.

[10:47] <moritz_> yes, I saw it on youtube too

[10:50] <masak> leaving all unknowable aspects of "which end of the Rakudo/Parrot spectrum is causing the slowness?" question aside, surely there's objective factual evidence that Parrot's GC is... heavily suboptimal?

[10:50] *** ggoebel left
[10:51] *** flussence left
[10:51] *** jhuni left
[10:52] <colomon> masak: is there?  I know I used to blame all the slow on parrot, but I'm not so sure anymore.

[10:52] <masak> I'm not blaming "all the slow" on Parrot.

[10:52] <moritz_> masak: do you remember pmichaud's mail about GC pressure to parrot-dev?

[10:52] <masak> I'm saying that those almost second-long pauses in TimToady's turtle program are caused by the GC.

[10:53] <masak> moritz_: not immediately, no.

[10:53] <moritz_> masak: loading perl6.pbc slowed down an othewise fast program by a facto of >10

[10:53] <moritz_> excluding startup time

[10:53] <masak> I'm also saying that I don't recall the JVM having such long and such frequent GC pauses.

[10:53] <masak> moritz_: ah. it's coming back now.

[10:53] <moritz_> just because the objects were considered during each GC run

[10:54] <colomon> moritz_: woah.

[10:56] <moritz_> "A short example of Parrot GC pain"

[10:56] *** flussence joined
[10:56] <masak> oh, that's why? I never grokked that part.

[10:56] <masak> making a VM is hard. let's go shopping.

[10:57] <moritz_> shop a VM?

[10:57] <masak> I'm not at the point yet where I'm dismissing Parrot altogether. it might just be a great project with a very long buildup.

[10:59] <moritz_> well, parrot does have some important features that other VMs lack

[10:59] <jnthn> masak: Me either, but I'm also very keen to break having an absolute dependency on it.

[10:59] <moritz_> like native support for multi dispatch

[10:59] <jnthn> moritz_: lol

[11:00] <jnthn> moritz_: You do know that we don't use Parrot's multi-dispatch at all in Rakudo?

[11:00] <colomon> jnthn++

[11:00] <moritz_> jnthn: yes

[11:00] <masak> "native support for multi dispatch" sounds like something a VM *designed with Perl 6 in mind* should have... :/

[11:00] <jnthn> :S

[11:00] <moritz_> jnthn: but it means that other languages have an easy time using the multi dispatcher from Perl 6

[11:00] <masak> in Parrot's defense, what Perl 6 is keeps changing slightly.

[11:01] <jnthn> moritz_: 

[11:01] <jnthn> What really matters here is that there's an API for invocation.

[11:02] <moritz_> right

[11:03] * moritz_ wonders if there's an API for innovation too :-)

[11:07] <gfldex> well, the patent office got a public interface

[11:07] <gfldex> that's a start :)

[11:09] <moritz_> well, in programming patents are pretty much hinder innovation

[11:09] <masak> this shows pretty clearly the effects of the GC: http://gist.github.com/638298

[11:09] <masak> nom &

[11:10] *** ggoebel joined
[11:11] *** mdxi left
[11:12] *** kjeldahl joined
[11:14] *** ggoebel left
[11:18] *** nsh_ joined
[11:18] *** \xF0_ joined
[11:19] *** nsh left
[11:19] *** jfried left
[11:19] *** \xF0 left
[11:19] *** rgrau left
[11:21] *** jfried joined
[11:25] *** Trashlord joined
[11:27] *** felipe joined
[11:27] *** mdxi joined
[11:29] <colomon> masak: just tried that code out here, UGH!

[11:34] *** allbery_b left
[11:38] *** xinming joined
[11:38] *** nymacro joined
[11:39] <colomon> I mean, I'm seeing approx a one second pause for GC every three seconds.  That means GC is adding 33% to the execution time.

[11:40] *** cognominal joined
[11:40] <colomon> I wonder how many objects are created per step?

[11:44] *** pnu left
[11:46] <masak> that's what I'm talking about. ugh.

[11:46] * masak writes to the parrot-dev thread about this

[11:49] <colomon> it's also using up 366 MB of memory basically to create a linked list which now has 16,000 elements in it.

[11:49] <colomon> on the plus side, memory usage doesn't seem to be growing very quickly at all, so the GC is at least accomplishing something.

[11:50] *** Trashlord left
[11:50] <takadonet> morning all

[11:50] <jnthn> This is the kinda thing that bacek++'s much-needed current work on generational GC is aimed at improving.

[11:53] *** mj41 left
[11:59] *** allbery_b joined
[11:59] *** Trashlord joined
[12:04] *** aloha left
[12:05] <colomon> hmmm, wasn't watching closely enough to see when it happened, but we're now at 378 MB memory usage in the run, and 26,000 runs through the loop.

[12:06] <masak> rakudo: say (1 < 3 > 2)

[12:06] <p6eval> rakudo d35769: OUTPUT«Bool::True␤»

[12:06] <colomon> that means the last 10,000 elements in the linked list cost us 10 MB of memory.  somewhere on the order of 1K memory per element.

[12:10] <jnthn> What are the elements?

[12:10] *** Guest84593 joined
[12:10] <masak> *all* of them? :)

[12:10] <jnthn> (what data type)

[12:10] <colomon> jnthn: just the internal iterator created by  1..Inf

[12:11] <jnthn> On, Int then

[12:11] <jnthn> *OK

[12:11] <jnthn> That's...pricey.

[12:12] <colomon> it may be a bad assumption -- could be the GC isn't doing a good job of deleting dead variables

[12:12] <jnthn> OTOH, today one Rakudo Int is 3 PMCs and that's before considering that we may have a scalar container wrapper in the array too iirc.

[12:13] <jnthn> Which if it has an rw property marked on it is...2 more PMCs (one for container, one for prop hash)

[12:13] <jnthn> If you add that lot up you might get closer to 1K. :/

[12:14] <colomon> still, in any sane world that would be under 100 bytes.

[12:15] *** aloha joined
[12:15] <colomon> and one would hope a carefully built implementation was more like 24 bytes

[12:17] <jnthn> I'm carefully building. :-)

[12:17] <colomon> ;)

[12:17] <Juerd> Jenga

[12:17] <jnthn> This is one place where 6model should give us a nice win.

[12:17] <jnthn> heh..."Jenga Perl 6"

[12:18] <Juerd> A building project in Rotterdam collapsed today. 5 injured.

[12:18] *** MayDaniel joined
[12:19] <jnthn> :(

[12:19] <Juerd> Some sources say only the scaffolding collapsed, most indicate it's the building they were building that went down.

[12:19] <colomon> :(

[12:20] <Juerd> Maybe I'm just naive but couldn't someone easily tell the difference between the two?

[12:20] <Juerd> Even without knowledge of architecture... :)

[12:21] <Juerd> (concrete knowledge...)

[12:21] *** Schwern joined
[12:24] <jnthn> Lack of concrete knowledge may have been the problem here ;-)

[12:28] *** aloha left
[12:29] <masak> Tom Christiansen is on StackOverflow. \o/ http://stackoverflow.com/questions/3973834/how-do-i-create-a-perl-regex-that-matches-non-alphanumeric-characters-except-spac

[12:35] *** MayDaniel left
[12:36] *** bluescreen joined
[12:37] *** aloha joined
[12:40] *** leprevost joined
[12:44] <masak> merlyn++ (Randal L. Scwartz) did a FLOSS Weekly inteview about Rakudo Perl 6.

[12:44] <masak> I wonder why he's not on here. I think he's on freenode.

[12:45] *** ggoebel joined
[12:47] *** pythonian4000 is now known as pythonian4000afk

[12:55] *** wamba left
[12:57] *** colomon left
[12:58] <takadonet> masak: url?

[12:59] <masak> takadonet: http://twitter.com/merlyn/status/27960589524

[13:02] *** ggoebel left
[13:04] *** bluescreen left
[13:05] *** bluescreen joined
[13:09] *** ggoebel joined
[13:14] *** zby_home_ left
[13:14] *** Schwern left
[13:15] *** tzhs joined
[13:16] <PerlJam> good morning #perl6

[13:16] <masak> PerlJam! \o/

[13:18] <PerlJam> masak: today is going to be a busy day for me it seems.  Code to write. Interviews to conduct.  oh, and a compiler to "release"  

[13:18] <PerlJam> :-)

[13:18] *** leprevost left
[13:19] <PerlJam> I won't be able to get to rakudo until later today local time, so it may be "tomorrow" for some of our denizens

[13:20] <takadonet> NO!!!! hehe

[13:20] *** Patterner left
[13:20] <pmichaud> good morning, #perl6

[13:20] <masak> PerlJam: the Europeans forgive you, I'm sure.

[13:21] <masak> pmichaud! \o/

[13:21] <jnthn> Morning, pmichaud

[13:23] <PerlJam> (Why do we call them "releases" anyway?  That only seems to fit under the old regime of "only release when we've built up enough features to warrant it".  Back  then we were holding back until "good enough" and then releasing it out into the world.  With clockwork releases it's more like we're kicking it out the door rather than letting it go.)

[13:24] *** aloha left
[13:25] *** aloha joined
[13:26] <flussence> interesting question... it seems like there's a trend, everywhere, toward time-based releases instead of good-based releases :/

[13:27] <flussence> (I think they should be called "snapshots" if they're time-based)

[13:28] <PerlJam> I don't know ... I don't think time-based releases are the antithesis of "good-based" releases.  I think it's more that we're recognizing smaller units of "good"

[13:28] *** plainhao joined
[13:28] *** ruoso joined
[13:29] <flussence> with rakudo it's not polar opposites, they do get delayed after all :)

[13:29] *** ruoso left
[13:29] *** ruoso joined
[13:32] *** Psyche^ joined
[13:32] *** Psyche^ is now known as Patterner

[13:37] *** nymacro left
[13:44] <masak> PerlJam: for better or worse, "release" is a magic word. even knowing this, I tend to look at an email subject line saying "ANNOUNCE: Parrot/Inkscape/MediaWiki/Perl release x.y.z", and automatically go "ah! maybe it's time to upgrade, then". even when I decide not to upgrade, a little flag in my brain saying "this project is alive and well" gets set. that's worth a lot.

[13:45] <moritz_> rakudo: say now.x

[13:45] <p6eval> rakudo d35769: OUTPUT«1287668749.37868␤»

[13:45] <PerlJam> masak: re merlyn, he's on #git sometimes and #squeak or #smalltalk or something too (as RandalSchwartz), but another #perl on another network soured him a little I think, so he doesn't hang out on #perl-ish channels much

[13:47] *** zby_home joined
[13:48] <masak> PerlJam: right, I almost suspected that. and yet he's writing a book about Perl 6, and giving interviews about Rakudo. as usual, it just feels so strange when people who are involved with Perl 6 in various ways don't have a presence here.

[13:48] <PerlJam> masak: you have proof that he's actually writing a book ?  :)

[13:49] <moritz_> not only that, but don't have a presence on any perl6- mailing list either

[13:49] <pmichaud> I suspect that may become the norm someday, though.

[13:49] <Juerd> Heh

[13:49] <masak> PerlJam: I think it was from merlyn that I got a long excerpt about Perl 6's history, yes. that seemed to be part of a book.

[13:49] <pmichaud> I mean, how many people develop things for Perl 5 but aren't active in p5p or #perl or .... :-P

[13:49] <PerlJam> He's been talking about "Learning Perl 6" for several years yet, but I don't think he's actually working on it except sporadically.

[13:50] <masak> don't recall anymore where I saw that excerpt.

[13:50] <pmichaud> He and I talked about that yesterday (outside of the interview)

[13:50] <moritz_> pmichaud: "developing *for*" ne "developing"

[13:50] <Juerd> I fear 5-to-6 translations of existing Perl books.

[13:50] *** _kaare left
[13:50] <masak> pmichaud: were you in the interview as well?

[13:50] <PerlJam> Juerd: I only fear *bad* translations  :)

[13:50] <PerlJam> heh

[13:51] <pmichaud> he's been (understandably) waiting for an alpha release of Perl 6 before really focusing on Learning Perl 6

[13:51] <Juerd> Like how some Perl 5 books are updated Perl 4 books.

[13:51] <PerlJam> there's that word again ... "release"

[13:51] <pmichaud> masak: merlyn and I recorded an episode of "FLOSS weekly" about the history of Rakudo and Perl 6

[13:51] <Juerd> New features are discussed in separate chapters or not at all, and all the existing stuff is still 4-ish

[13:52] <Juerd> PerlJam: Do you think we should replace that with real ease?

[13:52] <pmichaud> Juerd++  # nice

[13:52] <masak> pmichaud: oh, cool! looking forward to hearing it.

[13:52] <Juerd> "You keep asking about real ease, but we already have that."

[13:53] * moritz_ too

[13:53] <Juerd> +the

[13:53] <pmichaud> it really ended up being more about Perl 6 history than anything else; hope I didn't mangle the facts too much.  :)

[13:53] <moritz_> pmichaud: I don't have big concerns in that respect

[13:53] *** Schwern joined
[13:54] <PerlJam> Schwern!  

[13:54] <masak> Schwern! \o/

[13:54] <Juerd> Is there any other "Vaporware" project that has such a long and lively history, active development and a regular release schedule? :)

[13:55] <PerlJam> Juerd: I doubt it.

[13:55] <masak> Juerd: I think we should put some effort into finding out.

[13:55] <Juerd> And books

[13:55] <masak> Juerd: I keep a list of candidates for exactly that purpose.

[13:55] <Juerd> :)

[13:56] <masak> Juerd: Duke Nukem Forever (recently re-activated), Apache 2, Mozilla, the Hurd, Xanadu, grub2, the whole thing with 5th-gen computers in the 1980's.

[13:57] <Juerd> I use Apache 2 and Grub 2 in production, so that must mean Perl 6 is safe for production use as well.

[13:57] <masak> at some point, I'd like to do a "compare-and-contrast" article-length blog post about all those projects.

[13:57] <frettled> PHP 6!

[13:57] <masak> frettled: thanks; added.

[13:58] <masak> just to explain (to myself, if to no-one else) where Perl 6 fits into it all.

[13:58] <frettled> It was _started_ around when Perl 6 was announced.

[13:58] <masak> Python 3k also added.

[13:58] <frettled> :D

[13:58] <frettled> Ruby 2?

[13:58] <x3nU> i wouldn't use rakudo in production ;f

[13:59] <masak> x3nU: then you're not like me :)

[13:59] <x3nU> it's too heavy imho

[13:59] <frettled> masak: ooh, I have another one: the GUI replacement for X11.

[13:59] <frettled> X12 or whatever :D

[13:59] <x3nU> of course for some uses it's not problem

[13:59] <masak> frettled: you think you could find its actual name?

[14:00] <PerlJam> "too heavy"?

[14:00] <masak> x3nU: that's the key thing -- it depends on who's the one using the word "production".

[14:00] <Juerd> PerlJam: There's only so much weight a 19" server cabinet can carry.

[14:00] <frettled> masak: It's so vaporvare that it doesn't even exist in name, IIRC.

[14:01] <Juerd> One must always be careful weigh and balance new software before putting it in.

[14:01] <PerlJam> Juerd: mine carries thousands and thousands of software packages. :)

[14:01] <frettled> masak: but have a look-see here: http://en.wikipedia.org/wiki/X_Window_System#Release_history

[14:01] <Juerd> PerlJam: Sure, so does mine if they're feather light packages

[14:01] <masak> frettled: thanks; added.

[14:02] <Juerd> PerlJam: df --weight

[14:02] <masak> could anyone help me find the actual keynote hinted at in http://www.ruby-lang.org/en/news/2010/10/01/see-matz-in-san-francisco-or-silicon-valley/ ?

[14:02] <Juerd> Include -h if you want kg instead of g

[14:02] <masak> surely it must be online as a video somewhere?

[14:02] * PerlJam heads off to interview a potential ISO

[14:03] <frettled> masak: Seven years between X11R5 and X11R6 was pretty bad, people started claiming that X/X11 «is dead», that the concept itself was dated, that a new and perhaps incompatible release would not work out, etc.  People also seem to agree that the X11 model is fundamentally flawed, but at a loss when asked to provide a functional alternative.  :)

[14:03] <masak> recognizable situation.

[14:03] <moritz_> PerlJam: how is the release going?

[14:04] <frettled> Hmm.  Emacs 19 -> Emacs 20, perhaps?

[14:04] <masak> possibly.

[14:05] <masak> I'll write that one down as a candidate.

[14:05] <moritz_> plan 10!

[14:05] <frettled> Nah, that wasn't so bad, not too many years.

[14:05] <masak> moritz_: :P

[14:05] <masak> moritz_: to their credit, they did release a 9 1/2...

[14:06] <frettled> heh

[14:06] <flussence> xmms 2?

[14:06] <flussence> (which I've been using for months now...)

[14:08] <masak> appears to be a complete rewrite.

[14:08] <masak> yeah, might qualify :)

[14:09] <masak> I'm glad I brought this up. my list is twice as long now. :)

[14:09] <flussence> ooh, add e17 too

[14:10] <moritz_> indeed

[14:10] <masak> noted.

[14:12] *** ruoso left
[14:13] *** ruoso joined
[14:13] *** ruoso left
[14:13] *** alester joined
[14:13] *** timbunce joined
[14:17] *** ruoso joined
[14:20] * moritz_ started to take a course on Norwegian, and now ponders writing a vocabular training program in Perl 6

[14:21] * moritz_ is a bit puzzled that Compose + ° + a doesn't produce å by default

[14:23] *** MayDaniel joined
[14:23] *** zostay left
[14:23] *** icwiener joined
[14:23] <masak> moritz_: I recognize the feeling -- almost always when I learn a language, I want to write software to help me learn it.

[14:23] <masak> I seldom get around to it, however.

[14:25] <Juerd> moritz_: Use a bigger °, like o

[14:26] <moritz_> Juerd: I used Compose a a now

[14:26] <Juerd> Doesn't work here

[14:26] <Juerd> compose o a does

[14:26] <moritz_> both work for me

[14:26] <moritz_> discovered aa in the vim :digraphs table

[14:27] *** zostay joined
[14:32] <masak> aa makes sense from a historical perspective.

[14:33] <flussence> altGr + {,a for me... all the extra bits are on punctuation keys

[14:33] *** ruoso left
[14:33] *** ruoso joined
[14:35] * ruoso trying to use irssi instead of xchat... local connection is weird, better using ssh to a machine with a saner connetion

[14:40] *** masonkramer joined
[14:41] <masak> rakudo: my @t = 1..10; say (my &stddev)(@t) given &stddev = -> @x { sqrt ([+] (@x X- my $mean) X** 2) / (@x - 1) given $mean = ([+] @x) / @x }

[14:41] <p6eval> rakudo d35769: OUTPUT«3.02765035409749␤»

[14:42] * masak cackles evilly

[14:43] <jnthn> eww!

[14:43] <masak> :D

[14:43] <jnthn> But hey, it works...

[14:43] <masak> credit goes to TimToady++ for developing that style of writing.

[14:43] *** icwiener left
[14:44] <masak> it's a bit similar to 'where' in Haskell.

[14:44] *** icwiener joined
[14:45] <masak> rakudo: my @t = 1..10; say .(@t) given -> @x { sqrt ([+] (@x X- $_) X** 2) / (@x - 1) given ([+] @x) / @x }

[14:45] <p6eval> rakudo d35769: OUTPUT«3.02765035409749␤»

[14:46] <masak> one can think of it as a sort of "named $_" pattern.

[14:46] *** MayDaniel left
[14:47] <jnthn> yeah

[14:47] <jnthn> On second glance it's not quite so bad.

[14:48] <masak> I like it.

[14:48] <flussence> I can almost understand that!

[14:48] <masak> "declare now, define later"

[14:48] <flussence> (which is good, given I never understood it in school)

[14:48] <masak> oh, you mean the standard deviation.

[14:49] <flussence> yeah, the thing.

[14:49] <masak> it's just a maths formula. chances are the parts you don't understand are just-so magic anyway :)

[14:50] <masak> but basically, if you assume that your samples follow a gaussian distribution, the standard deviation is a measure of the "width" of the bell curve.

[14:51] <moritz_> \o/ first, primitive version of vocabular trainer is running

[14:51] <masak> moritz_++

[14:51] <masak> moritz_: when will we see the source?

[14:52] <masak> some of us have been waiting for hours already :P

[14:52] <masak> there are murmurs about vapourware...

[14:52] <moritz_> masak: hours? you mean, about 0.5 hours?

[14:53] <masak> it *feels* like hours. :)

[14:54] *** masonkramer left
[14:54] *** masonkramer joined
[14:55] <moritz_> http://github.com/moritz/perl6-vocabular-coach

[14:55] <moritz_> currently it's *very* primitive, and stateless

[14:56] * masak reviews

[14:57] <masak> I like the use of smilies.

[14:57] <jnthn> I need to make one of these for Russian, but that can test me on declensions. :-)

[14:58] *** justatheory joined
[14:58] <jnthn> .oO( Trombone (Instrumental): )

[14:58] *** colomon joined
[15:00] <jnthn> @lang[$_].=trim for ^2;

[15:00] <jnthn> Why now 

[15:00] <jnthn> @lang>>.=trim;

[15:00] <jnthn> *not

[15:00] <moritz_> does that work?

[15:00] <moritz_> rakudo: my @a = ' a ', ' b'; @a».=trim; say @a.perl

[15:00] <p6eval> rakudo d35769: OUTPUT«["a", "b"]␤»

[15:01] <masak> rakudo: 'my $pair = "OH HAI" => 42; my (Pair($key, $value)) := $pair; .say for $key, $value # jnthn: what am I doing wrong here? I want to "automatically" extract $key and $value

[15:01] <p6eval> rakudo d35769: OUTPUT«===SORRY!===␤Confused at line 22, near "'my $pair "␤»

[15:01] *** orafu joined
[15:01] <masak> rakudo: my $pair = "OH HAI" => 42; my (Pair($key, $value)) := $pair; .say for $key, $value

[15:01] <masak> er.

[15:01] <p6eval> rakudo d35769: OUTPUT«Not enough positional parameters passed; got 0 but expected 2 in sub-signature␤  in 'infix:<:=>' at line 1␤  in main program body at line 22:/tmp/gnS7v6hB9V␤»

[15:01] <jnthn> Missing space?

[15:01] <masak> rakudo: my $pair = "OH HAI" => 42; my (Pair ($key, $value)) := $pair; .say for $key, $value

[15:01] <p6eval> rakudo d35769: OUTPUT«Not enough positional parameters passed; got 0 but expected 2 in sub-signature␤  in 'infix:<:=>' at line 1␤  in main program body at line 22:/tmp/qqm0K1W6eU␤»

[15:02] <jnthn> Named params?

[15:02] <jnthn> though hm

[15:02] <masak> rakudo: my $pair = "OH HAI" => 42; my (Pair (:$key, :$value)) := $pair; .say for $key, $value

[15:02] <p6eval> rakudo d35769: OUTPUT«Mu()␤Mu()␤»

[15:02] <masak> better, though.

[15:02] <jnthn> rakudo: my $pair = "OH HAI" => 42; say $pair.Capture.perl

[15:02] <p6eval> rakudo d35769: OUTPUT«\()␤»

[15:02] <moritz_> I think the Capturification of Pair is broken

[15:02] <moritz_> right

[15:02] <jnthn> Yeah

[15:03] * masak submits rakudobug

[15:03] <jnthn> That's the real issue.

[15:03] <jnthn> It woulda worked if that had.

[15:03] * PerlJam returns

[15:04] *** tzhs left
[15:06] <jnthn> Oh, I think I remember us diagnosing this one before too.

[15:08] <masak> I can make a quick search. I've already submitted it.

[15:11] <masak> rakudo: my $code = "\$" ~ 1 x 1024; eval $code

[15:11] <p6eval> rakudo d35769: OUTPUT«error:imcc:syntax error, unexpected IDENTIFIER ('Inf')␤   in file 'EVAL_11' line 68␤»

[15:12] <jnthn> wtf :-)

[15:13] <masak> an old one, reported by bbkr :)

[15:13] <masak> at least it's clever. probably not very common, though.

[15:13] <masak> but I agree that it's a bug.

[15:14] *** jfried left
[15:17] <jnthn> *yawn* almost home time...

[15:17] * jnthn mighta been done for the day if Snaketrafiken weren't so crap at getting him into Malmo on a morning. :|

[15:20] *** timbunce left
[15:21] * moritz_ now added ASCIIficiation to his comparison routines

[15:23] *** MayDaniel joined
[15:26] *** timbunce joined
[15:28] <jnthn> decommute

[15:28] *** Ross joined
[15:30] <masak> Parrot GC runs last for about a second, with a standard deviation of about a quarter of a second: http://gist.github.com/638685

[15:31] <masak> needless to say, this is the kind of "statistics" of the "damnd lies" kind.

[15:31] <masak> s/damnd/damned/

[15:31] <moritz_> masak++ # hard numbers about GC

[15:31] <moritz_> fsvo "hard" :-)

[15:31] <masak> right.

[15:32] <masak> biggest measuring error is probably that the logic inside the loop takes time, too.

[15:32] *** risou joined
[15:32] <masak> probably saving all the timestamps and processing them afterwards might be better.

[15:32] <masak> but then memory consumption might be an issue instead :/

[15:33] * masak runs it once without IO, too.

[15:36] <masak> in my humble opinion, the fact that the GC is invoked 28 times in a simple 1..1000 `for` loop on a 4GB computer, is a kind of crazy deserving of its own category of crazy.

[15:37] <masak> similar results without IO: http://gist.github.com/638685

[15:41] *** [particle]1 left
[15:42] <masak> keeping all timestamps and doing sorting later also gives similar results: http://gist.github.com/638685

[15:42] *** [particle] joined
[15:43] <masak> after this, I won't hesitate saying "Parrot GC takes one second".

[16:00] *** bluescreen left
[16:15] *** robins is now known as robinsmidsrod

[16:15] <takadonet> ...

[16:16] *** stkowski joined
[16:16] *** _kaare joined
[16:16] *** Amine1285 joined
[16:18] <Amine1285> Depending where you are, Good morning or good evening!

[16:18] <Amine1285> I am new here

[16:18] <Amine1285> and realy like to do something with perl for perl

[16:18] <Amine1285> I like perl

[16:19] <takadonet> Amine1285: hey

[16:19] <masak> hi there! we like Perl too :)

[16:19] <Amine1285> Hi :)

[16:19] <masak> rakudo: say "oh hai Amine1285!"

[16:19] <p6eval> rakudo d35769: OUTPUT«oh hai Amine1285!␤»

[16:20] <masak> Amine1285++

[16:20] <masak> aloha: karma Amine1285 

[16:20] <aloha> masak: Amine1285 has karma of 1.

[16:20] <masak> consider that a welcome bonus :)

[16:20] <Amine1285> :D

[16:21] <Amine1285> what  does it mean karma of 1?

[16:21] <masak> it means that we think you're awesome.

[16:21] <masak> just wait until you get a karma of 2!

[16:21] <masak> aloha: karma takadonet 

[16:21] <aloha> masak: takadonet has karma of 3.

[16:21] <jnthn> aloha: karma jnthn

[16:21] <aloha> jnthn: jnthn has karma of 118.

[16:22] <jnthn> I'm SO awesome!

[16:22] <masak> jnthn++ # has a lot of karma. oh wait

[16:22] <jnthn> ;-)

[16:22] <jnthn> Maybe we should track modesty too ;-)

[16:22] <masak> we do. we just haven't been letting you know :P

[16:22] * jnthn feels negative

[16:22] <jnthn> :-)

[16:23] <takadonet> i have 3 karma.... wow

[16:24] <jnthn> masak: Those GC numbers are...eww.

[16:24] <masak> Amine1285: now -- how can we assist you on your quest?

[16:24] <Amine1285> Ok

[16:24] <Amine1285> I understand now

[16:24] <Amine1285> mmm

[16:24] <masak> Amine1285++ # understands now

[16:24] <masak> aloha: karma Amine1285

[16:24] <aloha> masak: Amine1285 has karma of 2.

[16:24] <masak> :)

[16:24] <Amine1285> I just want to be involved in perl6

[16:25] <Amine1285> because I like perl

[16:25] <Amine1285> :P

[16:25] <masak> Amine1285: easiest way to do that is to write Perl 6 code. doesn't have to be advanced in any way.

[16:25] <masak> just start somewhere, and before you know it -- you'll be involved.

[16:25] <Amine1285> is it different from perl 6?

[16:25] <Amine1285> I mean 5

[16:25] <masak> yes and no.

[16:25] <Amine1285> beacue I already write in perl 5

[16:26] <masak> if you go into Perl 6 assuming it's Perl 5, you'll get some surprises.

[16:26] <Amine1285> but when I want to start perl6 I notice that is still "under construction"

[16:26] <masak> it is.

[16:26] <masak> but people've constructed a great lot already.

[16:27] <Amine1285> I have a stupid question

[16:28] <Amine1285> why we move to perl 6?

[16:28] <masak> because there is room for improvement.

[16:28] <Amine1285> i.e.?

[16:28] <masak> Perl 5 is great, but some aspects of it are limited and limiting.

[16:29] <Amine1285> like?

[16:29] <masak> many aspects.

[16:29] <masak> OO

[16:29] <masak> parsing

[16:29] <takadonet> grammars!!!!!

[16:29] <masak> signatures

[16:30] <masak> language extensibility

[16:30] <PerlJam> Amine1285: also note that Perl 5 and Perl 6 live comfortably together.  There's no mutual exclusion.

[16:31] <masak> Amine1285: what PerlJam said. if you go into a Perl 5 channel and ask "why we move to perl 6?", they answer "we don't".

[16:31] *** aloha left
[16:31] <masak> there are many use cases for Perl 5, and many for Perl 6.

[16:31] <masak> some people will stick with one or the other simply because they are more comfortable with that language.

[16:32] <PerlJam> People who are comfortable haven't been pushing the boundaries of their language too much  :)

[16:33] <Amine1285> I have also one other stupid question :s

[16:34] <Amine1285> why Perl is much slower than Java 

[16:34] <Amine1285> ?

[16:34] <Amine1285> perl 6 resolve this?

[16:35] <PerlJam> That's actually an interesting question. 

[16:36] <PerlJam> For most of Java's lifetime, it's actually been the reverse.  Perl has been faster than Java. 

[16:36] <masak> Amine1285: you'll find that Perl 5 is really really fast. it solves most problems while the JVM is still booting up.

[16:37] <Amine1285> there is one test on the net, that show that java could achieve task in seconds, while perl hang for ages...

[16:37] <PerlJam> Amine1285: One sample does not a trend make  :)

[16:38] *** Entonian joined
[16:38] <PerlJam> Amine1285: The current Java compilers may be faster than Perl (I don't have any hard numbers handy so I don't know for sure) because just-in-time compilation.

[16:38] <masak> Amine1285: Perl 5 is really fast. especially after one has gotten used to the speed of Rakudo.

[16:39] <Amine1285> Rakudo?

[16:39] *** s1n left
[16:40] <masak> rakudo: say "that's me!"

[16:40] <p6eval> rakudo d35769: OUTPUT«that's me!␤»

[16:43] <PerlJam> Amine1285: rakudo is the front-runner perl 6 compiler (for now :)

[16:45] *** _buno_ joined
[16:46] *** _buno_ left
[16:47] <pmichaud> masak++ # very cool gc timings

[16:47] <masak> thanks.

[16:49] <pmichaud> I agree, the fact that GC is invoked 28 times in a 1000-iteration loop is.... bizarre.

[16:49] *** inket joined
[16:50] <masak> it's tragic.

[16:50] <inket> is there a differenc ebetween scripting languages and general programming languages

[16:50] <inket> or they all come under the same folder

[16:50] <masak> inket: the line is really blurry, I'd say.

[16:50] <masak> a script is just a small program.

[16:50] <inket> right

[16:50] <inket> perl is a scripting language isnt it

[16:50] <inket> not a programming language

[16:51] <masak> it's both.

[16:51] <inket> but in a resume

[16:51] <inket> what do you put it under

[16:51] <masak> :)

[16:51] <masak> depends how you use Perl, I guess.

[16:51] <masak> if you never write larger things with it, put it under "scripting language".

[16:51] <inket> but in a resume do you generally have to disntinguish the two

[16:51] <masak> why?

[16:51] <inket> as in scripting languages and regular joe programming languages?

[16:52] <inket> oh dunno just thought people take a liking to that because you know the difference

[16:52] <arnsholt> My resume just has a list of the most relevant/interesting programming languages I know

[16:52] <masak> inket: I think you read too much into the difference.

[16:52] <inket> but nothing wrong in it is it

[16:52] <inket> just adds more value me thinks

[16:53] <masak> sure. unless you think that scripting languages aren't programming languages.

[16:53] <inket> atleast gives the hiring committee an idea at a glance that i know it's different and not the same

[16:53] <inket> tcl is not a programming language

[16:53] * masak sighs

[16:53] <inket> if it is, why is it called a scripting language

[16:54] <flussence> I'd put perl under both

[16:54] <masak> some programming languages are called scripting languages.

[16:54] <inket> thats practical, putting it under both

[16:55] <masak> Perl is all about practicality :)

[16:55] *** justatheory left
[16:56] <inket> perl wasa text processing language

[16:56] <inket> but over time itbecame an all purpose lanbguage

[16:56] <masak> "was"?

[16:56] <inket> not the same with a scripting language like tcl

[16:56] <inket> or say bash

[16:56] *** timbunce left
[16:56] <inket> yeah was, its more a general purpose language now

[17:00] <masak> I see the usefulness of distinguishing programming languages from things that aren't programming languages (like HTML, or CSS). you should definitely distinguish those on your resumé.

[17:00] <masak> but "scripting languages" are just a loosely-defined set of programming languages.

[17:01] *** timbunce joined
[17:01] <masak> "scripting" itself is a loosely defined activity. it's a bit like talking about "bioinformatics languages". which ones are and which ones aren't depends on who's asking.

[17:03] *** ruoso left
[17:03] <inket> true

[17:03] *** ruoso joined
[17:03] <masak> evening &

[17:03] *** masak left
[17:06] *** dakkar left
[17:07] *** aloha joined
[17:07] <inket> isnt tcl different to php when it comes to scripting?

[17:07] <inket> both TCL and PHP both have interpreters which take the script, and both provide output based on it, they should be the same then right?

[17:07] *** cdarroch joined
[17:07] *** cdarroch left
[17:07] *** cdarroch joined
[17:08] *** patrickas joined
[17:09] <patrickas> o/

[17:09] <flussence> inket: they're built for different purposes

[17:09] <flussence> for example, Tcl's logo is a feather, while PHP's is an elephant. I think that explains the difference pretty well

[17:10] <patrickas> TimToady ping

[17:10] <inket> no but they both have interpreters which take the script 

[17:10] <inket> php is considered a general purpose language than a scripting while tcl is just scripting, weird

[17:10] *** Schwern left
[17:11] <flussence> PHP also has the roadsend compiler, and some other one(s)

[17:11] <inket> so is it fair to clal it just a scripting language?

[17:12] <x3nU> what

[17:12] <x3nU> >php is considered a general purpose language 

[17:12] <flussence> "scripting language" is just a vaguely defined subset of programming languages

[17:12] *** Amine1285 left
[17:13] <inket> ok what is the different between tcl and php and perl though

[17:13] <inket> all scrioting but major different being

[17:13] <x3nU> php sucks while perl not

[17:13] <x3nU> eot

[17:13] <inket> they all serve the same purpose, you give it input, it gives output

[17:13] <x3nU> ;)

[17:13] <inket> and they all have bindings for many tasks

[17:21] <inket> java and C are general purpose languages, I mean they're not pure compiled languages.. they run in VM's

[17:21] <pmichaud> wikipedia's article on "scripting languages" isn't too bad

[17:21] <inket> wouldnt they be scripted?

[17:21] <pmichaud> http://en.wikipedia.org/wiki/Scripting_language

[17:21] <inket> right

[17:21] <inket> by definition tey say tcl and php are

[17:21] <Juerd> x3nU: More often than not, PHP is considered a web programming language and not at all general purpose.

[17:21] <inket> but wouldnt java and C be too then?

[17:21] <inket> they';re not exactly general purpose languages are they

[17:22] <pmichaud> I wouldn't consider java and C as scripting languages, no.

[17:22] <inket> java is

[17:22] <inket> pmichaud: they're not compiled languages

[17:23] <Juerd> In my book, scripting is extending existing programs with code that is evaluated (whether compiled or not) during these programs' runtime.

[17:23] <inket> they run ina  VM

[17:23] <pmichaud> running in a VM isn't the defininition of "scripting language"

[17:23] <inket> what is

[17:23] <Juerd> So with Perl, it's definitely scripting if you're building extensions for Irssi, but it's not scripting if you're building a standalone program.

[17:23] <pmichaud> in the case of java, you run a compiler on the source, producing bytecode, this is then independently run on a VM

[17:23] <diakopter> I think the simplest definition is that a scripting language's source files can be "executed" directly from a shell by an "interpreter/compiler" without necessarily requiring a *visible* compilation step

[17:23] <Juerd> Perl happens to be great for both :)

[17:23] <Juerd> diakopter: So with Inline::C, C becomes a scripting language? :)

[17:24] *** timbunce left
[17:24] <inket> you can not compile Perl 

[17:24] <inket> it is still interpreted

[17:24] <Juerd> diakopter: And with explicit compilation, Python's no longer a scripting language?

[17:24] <patrickas> pmichaud o/ how is the cold going ?

[17:24] <diakopter> Juerd: what? I said "*necessarily*"

[17:24] <inket> it still runs as a script

[17:24] <Juerd> inket: Actually, Perl code is compiled before it is executed. It's compiled over and over and over, once for every execution, but it still is compiled.

[17:24] <pmichaud> patrickas: cold is largely gone, but replaced by some other issues :(

[17:25] <inket> so diakopter, pmichaud: a scripting language still requires a 3rd party program to run

[17:25] <inket> Juerd: either perl, something built into irssi that calls perl, what ever

[17:25] <inket> Juerd: so is php and the rest

[17:25] <huf_> so is c, by that logic. good luck running most things without a libc and friends

[17:25] <huf_> along with the kernel

[17:26] <patrickas> well I hope the other issues will follow the cold soon!

[17:26] <Juerd> I'm not sure about current versions of PHP, but 3 years ago PHP was, by default, not compiled to an intermediate format before being executed.

[17:26] <huf_> Juerd: it is now

[17:26] <pmichaud> has been for quite a while, iiuc

[17:26] <Juerd> That's wonderful for those who have to work with PHP

[17:26] <huf_> it's compiled on every page request by default, but it is.

[17:26] <inket> huf_: If I compile my C app, I can remove all external dependencies from the binary.. C can run "stand alone"

[17:26] <inket> php can not

[17:26] <inket> perl can not

[17:26] <huf_> inket: depending on what you mean by standalone

[17:27] <inket> java can not

[17:27] <diakopter> inket: my definition was "from source files"

[17:27] <Juerd> I remember installing something called, APC, which was a PHP compiler, and getting an enormous performance boost for Mediawiki

[17:27] <huf_> inket: as i said, most c code still depends on kernel and libc, so not standalone

[17:27] <inket> Juerd: yes it is

[17:27] <Juerd> (A much needed performance boost, I might add)

[17:27] <inket> The script is compiled and optimized into optcode

[17:27] <huf_> inket: you can compile c to run truly standalone, but you could make such an environment for perl too

[17:27] <diakopter> inket: I stand by my simple definition of the source files being involved directly in the initial invocation.

[17:27] <inket> huf_: ALL code requires a kernel of some sort

[17:27] <huf_> inket: nope

[17:28] <inket> ?

[17:28] <huf_> there's no kernel under the bit of code that boots your pc

[17:28] <huf_> altho even that's not standalone :)

[17:28] <huf_> (it uses the BIOS)

[17:28] <huf_> and whatever else is there, i have no idea

[17:28] <inket> I can compile my C application to not require in any libc libraries but rather include the desired functionality as part of the resulting binary file

[17:28] <huf_> inket: pp can do the same for perl scripts, iirc

[17:28] <pmichaud> I've certainly written programs that didn't require external libraries of any sort.

[17:28] <inket> pp?

[17:29] <pmichaud> (not recently, and not on modern OS's, but I've certainly done it before :-)

[17:29] <inket> huf_: not for perl

[17:29] <inket> I have seen some hackish perl -> binary compilers

[17:29] <huf_> inket: what?

[17:29] <inket> and some php -> binary as well honestly

[17:29] *** timbunce joined
[17:30] <diakopter> inket: hackish?

[17:30] <inket> but "Out of the box" no, you're dead wrong

[17:30] <huf_> inket: so you did not bother to look up what pp is.

[17:30] <patrickas> does anyone know what is (64,32,16 ...^ Rat) supposed to return? that's RT:78324 ... Is 64,32,16 the right answer ?

[17:30] <diakopter> inket: see Reini Urban's work

[17:30] <huf_> inket: the distinctions you're trying very hard to make dont seem to make sense... abandon them :()

[17:30] <inket> hackish as in using something for something its not designed for

[17:30] <huf_> :)

[17:30] <inket> link me diakopter

[17:30] <flussence> C wasn't designed for use outside a PDP-11, for instance.

[17:31] <flussence> *shrug*

[17:31] <pmichaud> patrickas: 64, 32, 16, 8, 4, 2, 1

[17:31] <diakopter> inket: http://search.cpan.org/search?query=B::C&mode=all

[17:31] <inket> diakopter: got the link/

[17:31] <inket> thx

[17:32] <pmichaud> patrickas: i.e., it should stop when the series produces a Rat, which would be 1/2

[17:32] <inket> pmichaud: yeah you can

[17:32] <inket> you dont need external libs and such as huf_ puts it

[17:32] <patrickas> rakudo: say (16/2).WHAT

[17:32] <p6eval> rakudo d35769: OUTPUT«Rat()␤»

[17:32] <inket> This compiler backend takes Perl source and generates C source code corresponding to the internal structures that perl uses to run your program. When the generated C source is compiled and run, it cuts out the time which perl would have taken to load and parse your program into its internal semi-compiled form. That means that compiling with this backend will not help improve the runtime execution 

[17:32] <inket> speed of your program but may improve the

[17:32] *** tadzik joined
[17:32] <inket> start-up time. Depending on the environment in which your program runs this may be either a help or a hindrance.

[17:32] <inket> look at that

[17:32] <inket> C compiles

[17:32] <inket> perl doesnt

[17:32] <inket> it transforms perl into C

[17:32] <inket> and generally as a rule, I've never seen a signal one of these type of applications do anything worth a dick

[17:32] <diakopter> that's compilation.

[17:32] <tadzik> ¡Hola!

[17:33] <inket> any sort of complex coding breaks things

[17:33] <pmichaud> patrickas: ah, that's a good point.  I suppose one can argue that   the correct answer should be 64, 32, 16 then

[17:33] <inket> nd you lose ALL your language nuances

[17:33] *** Ross left
[17:33] <pmichaud> since 8 is the first Rat produced in the sequence

[17:33] <inket> turning perl source into c source is compilation

[17:33] <diakopter> inket: your OT-ness and rudeness is about to get you kb'd

[17:33] <tadzik> what transforms Perl into C?

[17:33] <patrickas> pmichaud: that's what I got when working on the bug, but I wanted to get a second opinion about

[17:33] <inket> this particular thing diakopter showed me

[17:33] <diakopter> tadzik: reini's B::C

[17:33] <x3nU> diakopter: c'mon cursing isn't anything inacceptable imo

[17:33] <inket> its not compilation

[17:34] <huf_> inket: so what kind of arcane magic *is* compilation then?

[17:34] <pmichaud> patrickas: I haven't seen anything that says that   Int / Int   should return Int if there's no loss of precision

[17:34] <patrickas> pmichaud: it does seem surprising at first! But I am not sure it is the sequence's Job to figure out the real Rats from the "Fake" ones

[17:34] <diakopter> pmichaud++ patrickas++ staying on topic

[17:34] <pmichaud> I'm sure it's not the sequence's Job

[17:35] <pmichaud> I suspect the real question is whether    16 * (0.5)   produces an Int or a Rat

[17:35] <inket> huf_: compilation is the process of taking source code (C, what ever) and turning it into binary instructions designed to talk to the Operating system and interact with the user

[17:35] <pmichaud> and I think I'm likely to vote for Rat.

[17:35] <inket> After which a new file is created that can be ran

[17:35] <huf_> inket: in that case, gcc isnt a compiler.

[17:35] <patrickas> pmichaud: ok so I'll fix it to return 32,16,8 and call it THAT bug resolved .. then we can think about 16/2 :-)

[17:35] <inket> without requiring a compiler again

[17:35] <pmichaud> patrickas: note that it's not really 16 / 2, though.

[17:35] <inket> huf_: you're right, gcc is a frontend

[17:36] <pmichaud> the factor used in   64, 32, 16   is  0.5

[17:36] <pmichaud> (a Rat)

[17:36] *** wamba joined
[17:36] <tadzik> inket: what's your point anyway?

[17:36] <huf_> inket: so the only compiler in the entire gcc heap is the assembler?

[17:36] <patrickas> pmichaud: right

[17:36] *** risou left
[17:36] <pmichaud> and we get the next element by multiplying by a Rat, not by dividing by an Int

[17:37] <inket> huf_: i said compilation is the *process* of turning source into object code

[17:37] <inket> however many programs that takes.

[17:37] * diakopter facepalm

[17:37] <huf_> inket: so how is an interpreter not a compiler?

[17:37] <huf_> inket: it's just another process for turning source into machine code, however many programs that takes

[17:37] <inket> and diakopter your B::C application is just taking one source code, and translating it into another source code

[17:38] <tadzik> hey hey! I'm not here for long, and although I read the backlog, I still don't now: what's the point?

[17:38] <patrickas> pmichaud: thanks

[17:38] <inket> an interpreter doesn't leave you with object code

[17:38] <inket> it interprets it and reacts to the code as its processed

[17:38] <huf_> inket: btw, machine code is just another form of source code too, nothing special

[17:38] <flussence> ew

[17:38] <flussence> line-by-line execution is nasty.

[17:38] <flussence> not even php does that any more.

[17:38] <huf_> inket: almost no interpreter does that

[17:38] <inket> an interpreter is object code that reads an interpreted language and executes its own object code to produce the resultant behavior

[17:39] <flussence> so?

[17:39] <inket> your code is never directly translated to object code

[17:39] <flussence> and?

[17:39] <diakopter> what is "your"

[17:39] <huf_> inket: yes, so a compiler is an iterpreter and an interpreter is a compiler. your definitions make no sense. 

[17:40] <inket> an interpreter performs instructions, a compiler transforms source code into object code.

[17:40] <flussence> I'm with tadzik here, I don't see the point of language-lawyering over the definitions of scripting/programming like this.

[17:40] <huf_> flussence: precisely.

[17:40] <tadzik> flussence++

[17:40] * diakopter goes to look at irc.perl6.org to find inket's original beef/question

[17:40] <inket> diakopter: we've come a long way since then

[17:40] <tadzik> I sense a little "Scripting is for stupid and compiled is for pr0", but it might be something with my nose today

[17:40] <inket> tryig to define compilation here

[17:41] <diakopter> inket: this isn't the channel for that.

[17:41] <huf_> inket: compilation is the act of transforming source code into another language (be that machine code or VM code or anything)

[17:44] <inket> tats what wikipedia says

[17:45] <tadzik> So Perl is compiled! At last, let's drink, or do something productive

[17:45] <huf_> i'm hacking php atm, this flame is by definition more productive than that ;)

[17:45] <inket> huf_: compiling is source -> object

[17:45] <inket> thats about it

[17:45] *** wamba left
[17:45] <huf_> inket: you're confusing things again, stop with the rainclouds!

[17:45] <diakopter> inket: I should clarify. this isn't the channel for "defining terms", *per se*. let's talk about your goals/ideas here.

[17:45] <huf_> paint smiley faces.

[17:46] <inket> diakopter: just a regular discussion man

[17:46] <inket> gees

[17:46] <inket> huf_: what part am i confusing here

[17:47] <diakopter> inket: my point is, why do you need to define these things?

[17:47] <huf_> *sigh* nothing, nothing, i'll keep quiet

[17:47] <flussence> everything that runs on an x86 cpu from the last decade is compiled into micro-ops on the processor anyway, so that answers that :)

[17:47] <huf_> flussence: \o/

[17:47] <inket> because i like to  know the right stuff

[17:47] <diakopter> why?

[17:47] <inket> learning?

[17:47] <diakopter> I can play sophistry too

[17:48] <diakopter> huf_++ hacking php atm :)

[17:49] <tadzik> yuk

[17:49] *** cotto left
[17:49] <huf_> diakopter: i dont think i deserve a ++ for that... :(

[17:49] <huf_> huf_--

[17:49] <diakopter> well, at least for mentioning it; heh

[17:49] <huf_> :)

[17:49] <inket> cant have a discussion here ?

[17:49] <inket> ok

[17:50] <huf_> this was a discussion? 

[17:50] <inket> its about basic definitions in computing

[17:50] <flussence> trolling is generally frowned upon

[17:50] <inket> how is it trolling? becuase i have a difference of opinion?

[17:50] <diakopter> I can't claim to have never been too combative/defensive here, but the combativeness/defensiveness level was too high.

[17:51] <diakopter> just type more slowly and use fewer newlines between others' replies

[17:51] <diakopter> that helps a lot

[17:52] *** justatheory joined
[17:52] <tadzik> diakopter: you have an extra newline before 'that help a lot' :)

[17:52] <diakopter> :D

[17:53] <diakopter> inket: can we talk about the definition I proposed?

[17:53] <inket> which is

[17:53] <inket> for compilation/

[17:53] <diakopter> you can take a look at http://irc.perl6.org/ for a good view of the irclog

[17:53] <diakopter> no, for scripting language

[17:54] <inket> for scripting language to some extent i agree with what you said

[17:54] <tadzik> script is what you give an actor

[17:54] * tadzik hides

[17:54] <inket> but for compilation i dont get how

[17:54] <inket> perl just doesnt compile

[17:54] <tadzik> why not?

[17:54] <takadonet> perl is alive!

[17:54] <tadzik> Compilation is transforming one code into another, isn't it?

[17:54] <tadzik> Either C code to machine code, or Perl 6 code to Parrot/.NET code, nay?

[17:54] *** meppl left
[17:54] <huf_> inket: you're hung up on this "object code" thing, as if that were some well-defined state, but it isnt. object code can be further transformed, interpreted, it's just code.

[17:54] <diakopter> inket: explain "i dont get how perl just doesnt compile"

[17:55] <diakopter> which perl?  perl5 or perl6 implementations?

[17:56] <inket> the ewxample you showed me

[17:56] <inket> uber raiki orsomething

[17:56] <inket> cant possibly call that compiling 

[17:56] <tadzik> :)

[17:57] <diakopter> inket: write a compiler or two, then you'll understand.

[17:57] <inket> i know its hard

[17:58] <inket> but im saying that part where c transforms it into perl is not compiling

[17:58] <inket> c compiles it

[17:58] *** araujo joined
[17:58] <huf_> inket: c is a language, it doesnt compile anything, it doesnt even run

[17:59] <tadzik> I disagree. If you compile Java to JVM bytecode, it later gets compiled from bytecode to machine code, with JIT

[17:59] <diakopter> you need to llllleeeettttt ggggooooo of your magical hangup on the word 'compiler'

[17:59] <tadzik> so JVM compiles it, yet javac compiles it too, nay?

[17:59] <huf_> but this really is extremely futile, even by my irc flame standards ;)

[17:59] <huf_> (still better'n php tho :)))

[18:00] *** bluescreen joined
[18:00] <diakopter> inket: "that part where c transforms it into perl is not compiling" makes zero sense

[18:01] <diakopter> even accounting for every braino/typo I can imagine

[18:01] <inket> diakopter: I said that B::C app you showed me was a perl to c transformers 

[18:01] <inket> not compiling

[18:01] <diakopter> yes.  it is.

[18:02] <huf_> inket: you are using a nonexistent definition of compiler. stop now.

[18:02] <diakopter> and ALL of us are trying to tell you that "tranform" is another word for "compile"

[18:02] *** pyrimidine joined
[18:03] <inket> diakopter: i like perl and all but except for a few hacks, perl doesn't leave you with a compiled object

[18:03] <inket> which means its not compiled

[18:04] <inket> I have perl source, I run it through perl, it does stuff, I'm left with perl and my perl source.

[18:04] <inket> now with c

[18:04] <inket> I have C source, I run it through gcc, the code in the source file does NOT run, I end up with my source AND an object file

[18:04] <diakopter> inket: You still haven't answered my question about which version of Perl you're asking about.

[18:04] <PerlJam> inket: i can do exactly the same thing (as perl) with C

[18:05] <huf_> PerlJam: c isnt compiled? shit.

[18:05] <inket> PerlJam: you serious? can you show an example

[18:05] <inket> diakopter: any

[18:05] *** MayDaniel left
[18:05] <inket> perl5/6

[18:05] *** jferrero left
[18:06] <PerlJam> inket: of course I'm serious

[18:06] <inket> ok i'd like to see an example if you dont mind

[18:06] <diakopter> inket: just because there is no compilation result left on disk, doesn't mean no internal transformation/compilation took place.

[18:07] <PerlJam> inket: Are *you* serious?  You want me to show you a C interpreter?

[18:07] <flussence> llvm.

[18:07] <diakopter> inket: most JIT compilers emit object code to memory only

[18:07] <PerlJam> as if such a thing could never exist

[18:08] <diakopter> inket: you're being too demanding.  if you want to know whether something exists, research it yourself.

[18:08] <inket> llvm  is a C interpreter?

[18:08] <inket> im not demanding

[18:08] <inket> PerlJam said he could

[18:08] <inket> i thought he'd have an example. thats all

[18:09] <tadzik> tcc -run

[18:09] <flussence> right, and you're excessively pressing that point along with several others. That's called being demanding.

[18:09] <inket> whats the example?

[18:09] <inket> llvm?

[18:09] <flussence> and an hour later, you still haven't answered the most important question

[18:09] <flussence> who cares?

[18:10] <tadzik> tcc -run is an example

[18:10] <moritz_> (llvm is exactly what the name says -  a low-level virtual machine. It' not a C compiler or interpreter)

[18:10] <moritz_> oh hai

[18:11] <jnthn> o/ moritz_ 

[18:11] * moritz_ tilbake fra norsk course

[18:11] <jnthn> ...that looks like rong Swedish. :P

[18:11] <flussence> (if I'd said "llc" nobody would know what I meant)

[18:11] *** MayDaniel joined
[18:11] <tadzik> oh, jnthn 

[18:11] <flussence> oh that reminds me

[18:11] <diakopter> (but it's a "VM" in the sense most people think, since it doesn't have a garbage collector).  but the "llvm project" does include the prod-quality "clang" c compiler

[18:12] <tadzik> jnthn: you think it'd be possible to generate Perl 6 function prototypes for Zavolaj by examining the .h files?

[18:12] <diakopter> it's *not* a "VM", I meant

[18:12] <flussence> jnthn: the readme for zavolaj mentions something about parrot and hard-coded tables, does that mean I can't just use it with any random lib?

[18:12] <moritz_> diakopter: that's the "ll" part :-)

[18:13] <jnthn> tadzik: Sounds like an interesting tool.

[18:13] <patrickas> o/ moritz_ jnthn

[18:13] <tadzik> inket: C script supported : just add '#!/usr/local/bin/tcc -run' at the first line of your C source, and execute it directly from the command line. # http://bellard.org/tcc/

[18:13] <PerlJam> tadzik, jnthn: I thought someone in parrot-land was working on such a tool even.

[18:13] <patrickas> It's been a while! :-)

[18:13] <moritz_> \o patrickas 

[18:13] <jnthn> tadzik: I think somebody wrote a Perl 6 grammar for C source files already.

[18:13] <tadzik> jnthn: I though like a NativeCall submodule, like `importlib "libgtk2.0"`

[18:13] <jnthn> tadzik: So you needn't even re-invent that wheel.

[18:14] <jnthn> tadzik: Could be interesting.

[18:14] <tadzik> I'm quite short of internet access these days

[18:14] <jnthn> flussence: I think it depends on how your Parrot is built. Though it may also depend on if the branch that removes the limitation got merged yet too...

[18:15] <flussence> oh, that sounds promising :)

[18:15] <tadzik> but but, how to export subroutines in runtime? I mean, creating them first, some sort of eval-ution?

[18:15] <jnthn> Just checking on #parrot

[18:16] *** MayDaniel left
[18:16] <inket> tadzik: yeah tried it

[18:16] <jnthn> 20:27 <@dukeleto> jnthn: it is one failing test away from being mergable

[18:16] <flussence> yay

[18:16] <jnthn> flussence: ^^ That's status of the branch in question. :-)

[18:17] <jnthn> tadzik: Ah, I thought you were thinking more of a tool that generates the .pm file from a .h file at first. Hm

[18:17] <tadzik> jnthn: well, that's the easy way, but the better way would be better I think

[18:17] <inket> anyhow thanks for the discussion

[18:18] <inket> i didnt mean to cause a flame war or anything

[18:18] <jnthn> tadzik: I think you may - if you can do it early enough - be able to put stuff into the Module::Name::EXPORT::DEFAULT namespace...

[18:19] <jnthn> I'm not quite sure how to tie it all together off ahnd without thinking about it a bit more.

[18:19] *** standz left
[18:20] *** standz joined
[18:21] *** wormwood joined
[18:22] *** am0c left
[18:23] *** Schwern joined
[18:26] *** mberends joined
[18:26] <dalek> roast: 1b6274b | patrickas++ | S03-sequence/basic.t:

[18:26] <dalek> roast: added test for RT #78324

[18:26] <dalek> roast: review: http://github.com/perl6/roast/commit/1b6274b5f513474b6e67aa0b00b0b9a383f97c4e

[18:28] <moritz_> patrickas: ah, that's the bug I hoped to get you working on :-)

[18:29] <patrickas> moritz_: I got some free time today so I fixed it :-)

[18:29] <pmichaud> rakudo:  (32,16,8 ...^ Rat).perl.say

[18:30] <p6eval> rakudo d35769: OUTPUT«(timeout)»

[18:30] <pmichaud> huh

[18:30] <moritz_> patrickas: then push -- you have commit access

[18:30] <pmichaud> I'm surprised rakudo doesn't have that right already

[18:30] <patrickas> pmichaud: it was a stupid thing I had done in the new code , was really trivial to fix

[18:30] <pmichaud> rakudo:  (32,16,8 ...^ 0).perl.say

[18:30] <p6eval> rakudo d35769: OUTPUT«(32, 16, 8, 4/1, 2/1, 1/1, 1/2, 1/4, 1/8, 1/16, 1/32, 1/64, 1/128, 1/256, 1/512, 1/1024, 1/2048, 1/4096, 1/8192, 1/16384, 1/32768, 1/65536, 1/131072, 1/262144, 1/524288, 1/1048576, 1/2097152, 1/4194304, 1/8388608, 1/16777216, 1/33554432, 1/67108864, 1/134217728, 1/268435456,

[18:30] <p6eval> ..1/5368…

[18:31] <pmichaud> rakudo:  (32,16,8 ...^ 1).perl.say

[18:31] <p6eval> rakudo d35769: OUTPUT«(32, 16, 8, 4/1, 2/1)␤»

[18:31] <flussence> wha

[18:31] <moritz_> note that it produces rats immediately

[18:31] <patrickas> when the limit is not .defined the sequence would be infite

[18:31] <pmichaud> ....?

[18:31] <flussence> shouldn't it omit the /1 ?

[18:31] <pmichaud> patrickas: that statement doesn't make sense to me

[18:32] <patrickas> in the code I wrote i had a line that says return infite-series unless $limit.defined :-o

[18:33] <pmichaud> oh, that would be wrong

[18:33] <pmichaud> so, I understand now.

[18:33] <patrickas> which I changed to return infite-series if $rhs ~~ Whatever

[18:34] *** timbunce left
[18:35] *** aloha left
[18:36] <patrickas> the whole line is not really necessary but it seemed like a good idea to avoid the check if the sequence is finished when we know it is infinite.

[18:36] <pmichaud> it'll also be useful when we can start to tag infinite lists

[18:36] <pmichaud> afk for a while

[18:38] <patrickas> ok tests done ... I'll push to the rakudo repo directly for the first time ever, if all hell breaks loose you know who to blame

[18:39] <patrickas> actually, how do I fake push to master, just to make sure only the right patch will be pushed before I do it for real ?

[18:40] <PerlJam> patrickas: why not just: git diff origin/master master 

[18:40] *** timbunce joined
[18:40] <moritz_> patrickas: there's no fake push... one way is to write down the patch SHA1, then   git reset --hard origin/master; git cherry-pick $sha1; git push

[18:41] *** Guest84593 left
[18:41] <patrickas> Thanks moritz_ and PerlJam ... indeed there were a bagillion different things between the branch I am on and origin/master

[18:42] * PerlJam works on the rakudo release

[18:43] <patrickas> PerlJam: maybe it is wise for me to wait till after the release to push

[18:43] <PerlJam> patrickas: what are you pushing?

[18:44] <patrickas> a minor patch for sequence but I am a total git noob and this is the first time I am pushing without the training wheel (ie moritz_ applying my patches)

[18:45] <flussence> patrickas: check out a clean branch from master, then git cherry-pick that one patch

[18:45] *** aloha joined
[18:46] <patrickas> flussence that's what I am doing (in theory) but that would be my first cherry-pick ever and I am bound to screw up somehow ... :-)

[18:46] <PerlJam> patrickas: just do it.  There's enough git-fu around that we can clean up if you make a mess.

[18:48] *** Guest82379 joined
[18:49] <PerlJam> you know ... the most onerous thing about rakudo releases for me is that I have to wait for the spectests   :)

[18:49] <PerlJam> (I'm not patient)

[18:50] *** saaki left
[18:51] *** mavrc joined
[18:52] *** inket left
[18:53] <patrickas> Ok I pushed, thanks for being patient with me :-)

[18:53] <dalek> rakudo: 7a2990d | patrickas++ | src/core/operators.pm:

[18:53] <dalek> rakudo: Patch for sequence not terminating when the rhs is not .defined

[18:53] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/7a2990d9a84774eea84c2b22825d128ce3c51376

[18:54] <moritz_> patrickas++ # looks good to me

[18:55] <patrickas> First thing I did is check the history in github to make sure only one line was changed :-)

[18:56] <patrickas> btw is it better to push to rakudo then add the tests when I have a patch ready to avoid dalek spam? or should I always add fudged tests, push patch, unfudge the test ?

[18:57] *** saaki joined
[18:58] <moritz_> patrickas: whatever you like best - for us dalek doesn't spam, but inform us :-)

[18:58] <PerlJam> patrickas: "always" is a bit too restrictive.  If you have the tests first, go ahead and add them (no need to wait)

[18:58] <dalek> roast: ef896c7 | pmichaud++ | S03-sequence/basic.t:

[18:58] <dalek> roast: Update test message in basic.t to be more accurate.

[18:58] <dalek> roast: review: http://github.com/perl6/roast/commit/ef896c7fb7cc361d5e5d79b2c1faab32ff4a4fed

[18:58] *** bluescreen left
[18:58] <PerlJam> patrickas: but if the tests aren't quite there but the patch is, go ahead and add it too :)

[18:59] <PerlJam> patrickas: share early, share often.

[18:59] <patrickas> :-)

[19:00] <moritz_> aye; if you get sidetracked and don't get around to fixing, at least everybody has the tests

[19:05] *** justatheory left
[19:05] *** Entonian left
[19:08] <dalek> roast: ff0784a | patrickas++ | S03-sequence/basic.t:

[19:08] <dalek> roast: unfudge test

[19:08] <dalek> roast: review: http://github.com/perl6/roast/commit/ff0784ad6ad066bf376c7657e582f36e3c703cb3

[19:08] <dalek> roast: c1b2547 | patrickas++ | S03-sequence/basic.t:

[19:08] <dalek> roast: unfudge test

[19:08] <dalek> roast: review: http://github.com/perl6/roast/commit/c1b2547a5c30c3f8795dff4e234066e4469b75ca

[19:09] <patrickas> actually patrickas-- for the first one :-)

[19:10] <PerlJam> Draft release announcement:  https://gist.github.com/907a574db2b58509c51b

[19:11] <PerlJam> Anyone see anything missing or otherwise wonky?

[19:11] <PerlJam> patrickas: before pushing, I probably would have combined those two commits.

[19:12] <patrickas> PerlJam how can I do that?

[19:13] *** bluescreen joined
[19:13] <PerlJam> patrickas: git rebase -i <SHA1>   # then do what it says in the comments.

[19:13] <PerlJam> patrickas: the <SHA1> should be one prior to the ones you want to combine

[19:14] <moritz_> PerlJam: looks fine to me.. though I don't know off-hand what the "numerous documentation improvements" are

[19:14] <PerlJam> patrickas: and be sure to not rebase any commits that have already been pushed as that changes history

[19:15] <PerlJam> moritz_: looking through the log inse the last release I see lost of "fix typo" and such

[19:15] <PerlJam> s/lost/lots/

[19:15] <PerlJam> s/inse/since/  # dunno /what/ happened there!

[19:16] <flussence> .oO( fixing typos )

[19:16] <moritz_> PerlJam: ok

[19:17] <patrickas> PerlJam ... thanks, I'll try that next time. Now that you mention it I am sure moritz_ arealy tried to squeeze that through my thick skull once but oviously failed :-)

[19:17] <PerlJam> although now that I look at it again, it doesn't seem like "lots" this time.

[19:17] <moritz_> PerlJam: maybe mention improved error messages instead

[19:17] <moritz_> rakudo: (1, 2) >>+<< (1, 2, 3)

[19:17] <p6eval> rakudo d35769: OUTPUT«Sorry, sides are of uneven length and not dwimmy.␤  in 'hyper' at line 184:CORE.setting␤  in main program body at line 1␤»

[19:17] <PerlJam> and warnings

[19:18] <PerlJam> I'll do that.

[19:18] <moritz_> huh, that's still the old one

[19:18] <takadonet> rakudo: (1, 2,3) >>+=<< (1, 2, 3)

[19:18] <moritz_> s/error/diagnostic/ :-)

[19:18] <p6eval> rakudo d35769: OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in <anon> at line 211:CORE.setting␤  in 'hyper' at line 1␤  in main program body at line 1␤»

[19:18] <takadonet> rakudo: 2 [+=] (1,2,3)

[19:18] <p6eval> rakudo d35769: OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/Hn7Wf217sX␤»

[19:18] <takadonet> rakudo:  [+] (1,2,3)

[19:18] <p6eval> rakudo d35769:  ( no output )

[19:19] <takadonet> rakudo: say [+] (1,2,3)

[19:19] <p6eval> rakudo d35769: OUTPUT«6␤»

[19:26] <dalek> rakudo: 33bdcee | perlpilot++ | docs/ (2 files):

[19:26] <dalek> rakudo: release preparation

[19:26] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/33bdceeea4b00539654ca525e23b88079ae20bef

[19:27] *** orafu left
[19:28] *** orafu joined
[19:36] *** _buno_ joined
[19:40] <moritz_> huh. My ssh agent just died.

[19:40] *** _buno_ left
[19:41] <sorear> good * #perl6

[19:41] <moritz_> good * sorear 

[19:42] <moritz_> can I configure git somehow to use separate push and fetch URLs?

[19:42] *** DJAB joined
[19:42] <flussence> yes

[19:42] <moritz_> how?

[19:43] <DJAB> whats up 

[19:43] <tadzik> #34 :)

[19:43] <flussence> moritz_: one sec, I know it's possible, just can't find where I've done it...

[19:44] <moritz_> ah, separate pushurl in .git/config

[19:44] <moritz_> git remote set-url --push origin [email@hidden.address]
[19:45] <flussence> yeah, figures it'd be something obvious yet I don't remember what :)

[19:45] *** DJAB left
[19:47] *** xabbu42 left
[19:49] <moritz_> very handy for t/spec/

[19:51] *** envi left
[19:51] <dukeleto> moritz++ # i didn't know about that

[19:51] <patrickas> moritz_ how do you use it with t/spec/ ?

[19:53] <moritz_> [remote "origin"] fetch = +refs/heads/*:refs/remotes/origin/* url = git://github.com/perl6/roast.git pushurl = [email@hidden.address]
[19:53] <patrickas> I mean why is it very handy for t/spec ?

[19:53] *** wamba joined
[19:53] <flussence> fetch over git, push over ssh maybe

[19:53] <moritz_> patrickas: because 'make spectest' automatically pulls. If the ssh key is not available, 'make spectest' hangs

[19:54] <flussence> the git one will be slightly faster due to not encrypting stuff, too

[19:54] <patrickas> moritz_ oh ok

[19:54] <sorear> moritz_: I am starting to wonder if and when I should do a release announcment to p6c

[19:54] <moritz_> and it turns out ssh-agent sometimes dies if it runs out of disc space

[19:54] <moritz_> sorear: as soon as you do a release

[19:57] <tadzik> niecza release?

[19:57] *** justatheory joined
[19:57] *** wamba left
[19:58] <moritz_> sorear: I'm sure it would be a good thing, raising awareness, giving people something to link to apart from just the repo

[19:58] <sorear> I'm also wondering if an when there should be a release. :)

[20:01] <PerlJam> sorear: Do you want other people playing with niecza?

[20:05] <patrickas> evening &

[20:05] *** patrickas left
[20:06] * PerlJam continues to wait for the spec tests to run.

[20:06] <PerlJam> s/run/finish running/

[20:07] *** Ross joined
[20:08] <moritz_> rakudo: say { a => 1, b => 2 }.pick.perl

[20:08] <p6eval> rakudo d35769: OUTPUT«"b"␤»

[20:11] *** plainhao left
[20:12] *** ggoebel left
[20:15] *** Entonian joined
[20:17] <PerlJam> finally!

[20:17] <PerlJam> seems it failed only one test #8 in t/spec/S05-transliteration/trans.rakudo

[20:24] *** MayDaniel joined
[20:24] *** MayDaniel left
[20:24] *** MayDaniel joined
[20:26] *** zostay left
[20:26] *** leprevost joined
[20:27] *** zostay joined
[20:29] *** justatheory left
[20:31] *** justatheory joined
[20:32] *** wormwood_ joined
[20:34] *** wormwood left
[20:35] *** ggoebel joined
[20:36] *** zostay left
[20:37] *** zostay joined
[20:39] *** Guest82379 left
[20:42] *** bluescreen left
[20:43] *** sftp left
[20:44] *** breinbaa1 left
[20:44] *** cggoebel joined
[20:45] <moritz_> yep; that must be fudged out

[20:45] *** ggoebel left
[20:45] *** breinbaas joined
[20:47] <sorear> PerlJam: Do I want other people playing with niecza...?  Tough one.

[20:47] *** baux left
[20:48] <dalek> niecza/master: 876edf3 | sorear++ | src/ (2 files):

[20:48] <dalek> niecza/master: $/ and $! are contextuals

[20:48] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/876edf3a9a7cece4d510183ae59797a2c750a127

[20:48] <dalek> niecza/master: 94651cd | sorear++ | / (2 files):

[20:48] <dalek> niecza/master: Fix try to put error in $!, not inline

[20:48] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/94651cd8ecad302f09e7ce662921a428e452e32b

[20:48] <dalek> niecza/master: 4b358b4 | sorear++ | / (5 files):

[20:48] <dalek> niecza/master: Implement temp $*foo

[20:48] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/4b358b4f94abfaf2290b47b39924e9a29e1cfc9c

[20:48] <dalek> niecza/master: 7a7e3f2 | sorear++ | / (2 files):

[20:48] <dalek> niecza/master: Fix <foo> <foo> capturing

[20:48] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/7a7e3f2810bad31ade3f0981f785447b1e5803f7

[20:48] *** zby_home left
[20:49] *** orafu left
[20:50] *** orafu joined
[20:51] *** jaldhar left
[20:52] *** pmurias joined
[20:52] <pmurias> hi

[20:52] <sorear> hello pmurias 

[20:52] <sjohnson> yo dudes

[20:56] *** timbunce_ joined
[20:58] <sorear> ugh.  FindBin has failed me.

[20:58] *** timbunce left
[20:58] *** timbunce_ is now known as timbunce

[20:58] *** araujo left
[20:59] *** bluescreen joined
[20:59] <moritz_> are symlinks involved?

[20:59] <sjohnson> FailBin

[21:00] *** jaldhar joined
[21:01] *** cggoebel left
[21:01] *** justatheory left
[21:01] *** kjeldahl left
[21:01] *** justatheory joined
[21:03] <moritz_> rakudo: my %a; %a<b><c><d> = 5; say %a.perl

[21:03] <p6eval> rakudo d35769: OUTPUT«{"b" => {"c" => {"d" => 5}}}␤»

[21:04] <moritz_> rakudo: my %a; %a<b><c><d>  += 5; say %a.perl

[21:04] <p6eval> rakudo d35769: OUTPUT«{"b" => {"c" => {"d" => 5}}}␤»

[21:05] <sorear> moritz_: could you try building std again?  it no longer looks for an installed STD.pmc while rebuilding

[21:06] * moritz_ tries

[21:06] <sorear> my goal is to be able to demonstrate STD.parse("2 + 2", :setting<NULL>) at next #phasers

[21:07] <moritz_> looks much better (STD build)

[21:08] *** leprevost left
[21:08] <moritz_> std: say "success!"

[21:08] <p6eval> std :  ( no output )

[21:08] <moritz_> uhm, I need "make snap"

[21:09] <moritz_> std: say "success!"

[21:09] <p6eval> std a194beb: OUTPUT«sh: /opt/perl-5.12.1/bin/perl: not found␤»

[21:10] *** p6eval left
[21:10] *** p6eval joined
[21:10] *** ChanServ sets mode: +v p6eval

[21:10] <moritz_> std: 1

[21:10] <dalek> evalbot: 568324e | moritz++ | evalbot.pl:

[21:10] <dalek> evalbot: [std] use system perl

[21:10] <dalek> evalbot: review: http://github.com/perl6/evalbot/commit/568324e9cf7aa23d289fe6ed84b452ee85bf4218

[21:11] <p6eval> std a194beb: OUTPUT«ok 00:01 117m␤»

[21:12] *** timbunce left
[21:13] *** whiteknight joined
[21:15] *** Ross left
[21:17] *** timbunce joined
[21:17] *** bluescreen left
[21:17] *** pyrimidine left
[21:33] *** masak joined
[21:33] <masak> ahoy, #perl6!

[21:33] <jnthn> yayitsmasak!

[21:34] <masak> mam lagi...

[21:34] <sorear> masak!

[21:35] <sjohnson> hi masak + jnthn + sorear 

[21:36] *** orafu left
[21:37] *** masonkramer left
[21:38] <pmurias> sorear: how's niecza doing?

[21:38] *** _twitch joined
[21:39] <sorear> Very well.

[21:39] <pmurias> that's good

[21:39] <sorear> I think I'll be able to demonstrate STD.parse("2 + 2", :setting<NULL>) at #phasers next week

[21:39] <masak> ++sorear

[21:39] <pmurias> nice

[21:40] *** MayDaniel left
[21:40] *** _kaare left
[21:41] *** mavrc left
[21:47] *** spinclad joined
[21:53] *** Schwern left
[21:55] *** Schwern joined
[21:57] *** araujo joined
[21:58] *** pmurias left
[21:59] *** xabbu42 joined
[22:02] <dalek> 6model: e47a5fb | jnthn++ | dotnet/compiler/DNST.pm:

[22:02] <dalek> 6model: [dotnet] Add DNST::TryCatch and DNST::Throw nodes.

[22:02] <dalek> 6model: review: http://github.com/jnthn/6model/commit/e47a5fbaddd0b1402e4fdee41ed3b606eb29edf5

[22:02] <dalek> 6model: c6bbf47 | jnthn++ | dotnet/compiler/DNST2CSharp.pm:

[22:02] <dalek> 6model: [dotnet] Compile DNST::Throw and DNST::TryCatch.

[22:02] <dalek> 6model: review: http://github.com/jnthn/6model/commit/c6bbf47b5c4db5c3fb722afb5a5b6ce8f26a5334

[22:02] <dalek> 6model: 670415d | jnthn++ | dotnet/ (3 files):

[22:02] <dalek> 6model: [dotnet] Start to stub in the bits we'll need to implement .leave.

[22:02] <dalek> 6model: review: http://github.com/jnthn/6model/commit/670415d2645a8817c43af4fbb3a3e15f219938a4

[22:02] <dalek> 6model: 47c868a | jnthn++ | dotnet/compiler/ (2 files):

[22:02] <dalek> 6model: [dotnet] Min codegen e kass - make things a bit less noisy.

[22:02] <dalek> 6model: review: http://github.com/jnthn/6model/commit/47c868ada6acff2fb912be70396aa2e5163e1770

[22:03] *** masak left
[22:04] *** xabbu42 left
[22:07] <dalek> 6model: c788c81 | jnthn++ | dotnet/runtime/Runtime/Ops.cs:

[22:07] <dalek> 6model: [dotnet] Add a leave_block op. This is what we'll do when needing to do some stack unwinding.

[22:07] <dalek> 6model: review: http://github.com/jnthn/6model/commit/c788c8100154111491deb8f9456ae76921892961

[22:07] <dalek> 6model: 3c156f0 | jnthn++ | common/NQP/NQPSetting.pm:

[22:07] <dalek> 6model: [common] Add a NQPCode with a leave method.

[22:07] <dalek> 6model: review: http://github.com/jnthn/6model/commit/3c156f0c791269bac3dbebfa764be556f5249eb1

[22:07] <dalek> 6model: bd57e32 | jnthn++ | dotnet/runtime/Init.cs:

[22:07] <dalek> 6model: [dotnet] Use NQPCode instead of the hack LLCode.

[22:07] <dalek> 6model: review: http://github.com/jnthn/6model/commit/bd57e329bc20d7e892d87ba32fd38167290ab327

[22:07] <dalek> 6model: 4281db6 | jnthn++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[22:07] <dalek> 6model: [dotnet] Fix a silly thinko and...we have &building.leave($elvis) working. \o/

[22:07] <dalek> 6model: review: http://github.com/jnthn/6model/commit/4281db6b9dda04d1a2e9384b9988294be8f7291e

[22:08] *** masak joined
[22:09] *** _twitch left
[22:10] *** _twitch joined
[22:11] *** masonkramer joined
[22:12] *** timbunce left
[22:15] <PerlJam> Is there some more direct correspondence between the spec tests repo and the rakudo repo?

[22:15] <sorear> no

[22:17] <dalek> rakudo: acce294 | perlpilot++ | VERSION:

[22:17] <dalek> rakudo: bump VERSION

[22:17] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/acce29405c996b40f4ca5bc49f48760e083bea98

[22:18] <sorear> PerlJam: there is a tension in my mind between "too many tasks, too little time" and "this is MY sandbox!"

[22:26] *** nadim_ left
[22:29] <dalek> 6model: 9445e1d | jnthn++ | dotnet/runtime/Runtime/Exceptions/LeaveStackUnwinderException.cs:

[22:29] <dalek> 6model: [dotnet] I forgot to finish the

[22:29] <dalek> 6model: review: http://github.com/jnthn/6model/commit/9445e1d0500b8d62c76f67c3158ed9098df73fcd

[22:35] *** Schwern left
[22:36] <PerlJam> sorear: there's still a chance for niecza to become the defacto Perl 6 compiler  ;)

[22:39] <dalek> roast: f8d9c6f | perlpilot++ | S05-transliteration/trans.t:

[22:39] <dalek> roast: fudge trans test

[22:39] <dalek> roast: review: http://github.com/perl6/roast/commit/f8d9c6fd26ed5fbbfa6213ee8aca9d8a6f0fcfe3

[22:39] *** _twitch left
[22:43] *** zostay left
[22:44] *** masak` joined
[22:45] *** masak left
[22:46] *** masak` is now known as masak

[22:47] *** zostay joined
[22:47] *** _twitch joined
[22:50] *** icwiener left
[22:51] *** justatheory left
[22:51] *** justatheory joined
[22:56] <jnthn> sleep &

[22:57] <masak> not a half-bad idea, actually.

[22:57] <colomon> sleep sounds heavenly, but I've got to get my boy to bed first.

[22:58] <colomon> and I'll be lucky if he's ready to settle down an hour from now.

[23:01] * moritz_ finds that JSON is broken :(

[23:01] *** aloha left
[23:02] <masak> :/

[23:03] <moritz_> say from-json('{ "a": 1 }').perl;

[23:03] <moritz_> "a" => 1

[23:03] *** cotto joined
[23:06] *** alester left
[23:07] <moritz_> rakudo: class A { method TOP($/) { make { a => 1 } } }; grammar B { token TOP { ^. } }; say B.parse('x', :actions(A.new)).ast.perl

[23:07] <p6eval> rakudo d35769: OUTPUT«{"a" => 1}␤»

[23:07] * masak thinks that's right

[23:08] <moritz_> right

[23:08] <moritz_> it's just that the code in JSON::Tiny::Actions does basically the same, but loses the curlies somewhere along the way

[23:08] <masak> <inket> huf_: compilation is the process of taking source code (C, what ever) and turning it into binary instructions designed to talk to the Operating system and interact with the user

[23:09] <masak> I'm almost glad I didn't stick around for the conclusion of that discussion.

[23:10] <flussence> I'm glad I wasn't paying attention :D

[23:10] <masak> it's funny how some people enter the channel, start with a simple question, and half an hour later, they've only proven themselves to be wrong and untechable. luckily, they're few and far between.

[23:10] <masak> s/tech/teach/

[23:11] *** aloha joined
[23:12] * moritz_ wonders if the disappearing hash wrapper is related to the .item fix in rakudo

[23:16] <masak> looking forward to the bug report with the golfed code.

[23:16] <masak> having backlogged inket's confused ramblings, I do believe that he meant no actual harm. he just hasn't had any good teachers so far. that happens.

[23:17] <masak> I seriously hope I'll never be as hard-headed as he was in the presence of ten or so people trying to educate me.

[23:18] <PerlJam> boy scout meeting with my son and then release!

[23:18] * PerlJam bbl

[23:18] <moritz_> nope, that wasn't it

[23:18] *** s1n joined
[23:19] <masak> PerlJam: good luck with the release!

[23:19] * masak heads bedwards, with the faint hope of sleeping

[23:19] <masak> 'night.

[23:19] *** masak left
[23:21] *** stkowski left
[23:31] <moritz_> rakudo: class A { method TOP($/) { make ( a => 1 ).hash; say $/.perl } }; grammar B { token TOP { ^. } }; say B.parse('x', :actions(A.new)).ast.perl

[23:31] <p6eval> rakudo d35769: OUTPUT«Match.new(␤ ast  => "a" => 1,␤ from => 0,␤ orig => "x",␤ to   => 1,␤)␤"a" => 1␤»

[23:31] <moritz_> rakudo: say (a => 1).hash.perl

[23:31] <p6eval> rakudo d35769: OUTPUT«{"a" => 1}␤»

[23:31] <moritz_> rakudo: class A { method TOP($/) { make ( a => 1 ).hash } }; grammar B { token TOP { ^. } }; say B.parse('x', :actions(A.new)).ast.perl

[23:31] <p6eval> rakudo d35769: OUTPUT«"a" => 1␤»

[23:32] <moritz_> rakudo: class A { method TOP($/) { make ( a => 1, b => 2 ).hash } }; grammar B { token TOP { ^. } }; say B.parse('x', :actions(A.new)).ast.perl

[23:32] <p6eval> rakudo d35769: OUTPUT«("a" => 1, "b" => 2)␤»

[23:32] <moritz_> rakudo: class A { method TOP($/) { make ( a => 1, b => 2 ).hash.item } }; grammar B { token TOP { ^. } }; say B.parse('x', :actions(A.new)).ast.perl

[23:32] <p6eval> rakudo d35769: OUTPUT«{"a" => 1, "b" => 2}␤»

[23:33] *** stkowski joined
[23:37] *** ggoebel joined
[23:39] <moritz_> rakudo: say ()>>.uc.flat.perl

[23:39] <p6eval> rakudo d35769: OUTPUT«Incompatible versions of `perl6_ops' oplib. Found 2.8.0 but loaded 2.9.1␤»

[23:40] *** ashleydev joined
[23:40] * moritz_ hates it

[23:42] *** cdarroch left
[23:44] *** orafu joined
[23:49] <moritz_> rakudo: class A { method TOP($/) { make () } }; grammar B { token TOP { ^. } }; say B.parse('x', :actions(A.new)).ast.perl

[23:49] <p6eval> rakudo : OUTPUT«Any␤»

[23:50] <moritz_> that's wrong too

[23:50] *** Entonian left
[23:51] <moritz_> rakudo: sub f($x) {·say $x.perl }; f(())

[23:51] <p6eval> rakudo : OUTPUT«===SORRY!===␤Unable to parse blockoid, couldn't find final '}' at line 22␤»

[23:52] <moritz_> rakudo: sub f($x) { say $x.perl }; f(())

[23:52] <p6eval> rakudo : OUTPUT«()␤»

[23:53] *** Entonian joined
[23:55] *** zostay left
[23:57] *** zostay joined
