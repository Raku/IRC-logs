[00:00] <tadzik> hmm

[00:00] <tadzik> rakudo: "\e[39m\e[31m".split('\x[1b]').perl.say

[00:00] <p6eval> rakudo 00848d: OUTPUT«("\x[1b][39m\x[1b][31m")␤»

[00:00] <masak> tadzik: you should patch in a special case for "\e" in the pretty-printer

[00:00] <tadzik> $what.trans('\e' => 'E').split('E'); looks awful

[00:01] <tadzik> but well, original Term::ANSIColor's way is even worse :)

[00:01] <masak> that's not what I was suggesting, though :)

[00:01] <masak> rakudo: "\e[39m\e[31m".split("\x[1b]").perl.say

[00:01] <tadzik> that's what I worked out

[00:01] <p6eval> rakudo 00848d: OUTPUT«("", "[39m", "[31m")␤»

[00:01] <tadzik> oh

[00:01] <tadzik> I used '', not "", right

[00:01] <tadzik> :)

[00:02] <masak> that's not what I was suggesting either. :) but no matter.

[00:02] *** cbk left
[00:02] <tylercurtis> rakudo: say pir::fdiv__III(-3, 4); say pir::div__III(-3, 4); say pir::fdiv__NNN(-3, 4); say pir::div__NNN(-3, 4);

[00:02] <p6eval> rakudo 00848d: OUTPUT«0␤0␤-1␤-0.75␤»

[00:03] <tylercurtis> rakudo: say pir::fdiv__III(-3, -4); say pir::div__III(-3, -4); say pir::fdiv__NNN(-3, -4); say pir::div__NNN(-3, -4);

[00:03] <p6eval> rakudo 00848d: OUTPUT«0␤0␤0␤0.75␤»

[00:07] *** rlb3_ joined
[00:08] *** kfo joined
[00:09] <[Coke]> I am still here. waiting for teh kerfuffle to settle.

[00:09] *** rlb3_ is now known as rlb3_home

[00:10] <masak> [Coke]: I'm all settled. don't know about the others :)

[00:10] <[Coke]> jnthn: we can always do a point release of parrot. we've done it before.

[00:10] <jnthn> [Coke]: I don't think this would be serious enough to warrant it.

[00:11] <[Coke]> but if you can hack around it, it will save me great headache. I don't wish to do /3/ big releases this week. =-)

[00:11] <[Coke]> jnthn++ ;)

[00:12] <jnthn> [Coke]: Well if we desparately want such an op that's right, we could just make a dynop in perl6.ops, and then switch to the Parrot one after it's fixed in the future.

[00:13] <[Coke]> jnthn: [:facepalm:]

[00:13] * tylercurtis is building a parrot with a working fdiv_i_i_i to see how it would affect rakudo's div performance.

[00:13] <[Coke]> that makes a helluva lot more sense! =-)

[00:13] *** Schwern left
[00:13] <tadzik> is there something like wantarray in Perl 6?

[00:13] <jnthn> tadzik: No

[00:14] <tadzik> thanks jnthn 

[00:14] <[Coke]> (there is only zuul)

[00:14] <jnthn> tadzik: Context works the opposite way in Perl 6 to Perl 5.

[00:14] <tadzik> jnthn: what do you mean, the opposite way?

[00:14] <jnthn> tadzik: moritz_++ wrote a really great explanation on his blog at some point

[00:15] <tadzik> in 5-6?

[00:15] <jnthn> tadzik: seems so, yes. http://perlgeek.de/en/article/5-to-6#post_06

[00:15] <[Coke]> do we care about renaming the old announcement dirs?

[00:15] * tadzik reads

[00:15] <jnthn> I wasn't sure if it was in 5-6 offhand, but yes, it is.

[00:15] <[Coke]> er, files

[00:15] <jnthn> tadzik: Oh, I'm not sure that was the one I wanted actually

[00:16] <jnthn> tadzik: aha!

[00:16] <mberends> zavolaj-users: try the new unix-fork.p6 example -Ofun :)

[00:16] <jnthn> tadzik: http://perlgeek.de/blog-en/perl-6/immutable-sigils-and-context.html

[00:16] <jnthn> mberends: huh, it fails here 

[00:16] <jnthn> :P

[00:17] <mberends> jnthn: you could try it on pivo ;)

[00:17] <tadzik> sounds sane

[00:17] <colomon> here's the thing.  the reason pmichaud

[00:17] <jnthn> "A 1GB netbook froze with 19 children."

[00:17] <colomon> 's version was so fast is that it switched to doing Nums instead of Rats.

[00:18] <jnthn> Poor childern. My parry are with the father. I'm truly sorry for their lots.

[00:18] <[Coke]> boy, y'all are much better about updating the news.

[00:18] <cxreg> heh

[00:18] <jnthn> mberends: Does this...actually work too? :-)

[00:18] <colomon> getting working fdiv would be nice, but I don't think it will get a crazy speed improvement for us.

[00:19] <mberends> jnthn: yes, up to 18 children. at 100MB per Rakudo process, it was heavy.

[00:19] <tadzik> rakudo: sub foo (Str *@a) {}; foo("foo", "bar", "asd", 7)

[00:19] <p6eval> rakudo 00848d:  ( no output )

[00:19] <cxreg> mberends: a m&s gc is decidedly anti-cow

[00:19] <tadzik> huh. Doesn't it check the types?

[00:19] <jnthn> 100MB memory use is pro-pig though.

[00:20] <jnthn> tadzik: I think type constraints on slurpies are kinda bogus.

[00:20] <pmichaud> colomon: ping -- any word on getting some speed back?

[00:20] <jnthn> tadzik: I mean, what if it's an infinite list?

[00:20] <pmichaud> oh, we can use fdiv

[00:20] <pmichaud> just use the num version

[00:20] <tadzik> oh, right

[00:20] <colomon> pmichaud: I'm spectesting the 22s version right now, it just hit the trig functions

[00:20] <s1n> can anyone explain why DateTime went back to immutable again?

[00:20] <pmichaud> pir::fdiv__NNN($a, $b).Int

[00:21] <cxreg> mberends: wait, what?

[00:21] <cxreg> sub fork() returns Int is native('libz') { ... }

[00:21] <cxreg> libz?

[00:21] <mberends> cxreg: wfm, libc didn't ;)

[00:21] <pmichaud> or, even better, acall "upgrade_to_num_*

[00:21] <[Coke]> looks like the news section is all set. anyone want to bump something up from the changelog into teh announcement?

[00:22] <cxreg> mberends: that might only be working by accident

[00:22] <[Coke]> multi-whatever-currying seems big to me.

[00:22] <jnthn> [Coke]: Reviewing both

[00:22] <mberends> cxreg: I think on Linux fork() is system and may not even be in a lib, but you have to name *some* lib.

[00:22] <jnthn> [Coke]: Yes, that would be a worthy candidate.

[00:23] <pmichaud> looking

[00:23] <jnthn> ooh, feeds are missing

[00:23] <colomon> closure and gather / take fixes, if they're not already in the announcement?

[00:23] <cxreg> mberends: that's what im saying.  in #plparrot and #parrot, we talked once about how to NCI from your resident symbol table

[00:23] <cxreg> mberends: parrot has support for it, not sure about zavolaj

[00:23] <pmichaud> I thought I put feeds in the announcement

[00:23] <tadzik> s:g/foo/bar/ is NYI?

[00:23] <cxreg> jnthn++ implemented it last week, i thought

[00:24] <sorear> do try the other two syntaxes

[00:24] <jnthn> pmichaud: maybe you did

[00:24] <mberends> cxreg: afaik zavolaj still requires a lib, but it's a good idea to make the lib optional

[00:24] <jnthn> pmichaud: I'm looking at ChangeLog though :-)

[00:24] <pmichaud> I didn't update the ChangeLog

[00:24] <jnthn> pmichaud: I've added it, I'm just pondering what else may be missing

[00:25] <jnthn> pmichaud: Is it worth mentiong that Int ~~ Num is gone in this release?

[00:25] <pmichaud> Yes.

[00:25] <jnthn> Adding the ChangeLog

[00:25] <cxreg> so are you guys doing both a monthly release and star?

[00:25] <pmichaud> star is a distribution release

[00:25] <pmichaud> today is a compiler release

[00:25] <[Coke]> feeds are in there.

[00:25] <cxreg> righto

[00:27] <[Coke]> pmichaud: you said the script for generate percentages is broken?

[00:27] <[Coke]> (er, of passing spectests)

[00:28] <pmichaud> [Coke]: yes.

[00:28] <dalek> rakudo: 245b4fe | Coke++ | docs/announce/2010.07:

[00:28] <mberends> yawn. snore. \o

[00:28] <dalek> rakudo: Slight mod to verbage, add another entry from Changelog.

[00:28] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/245b4feca5dac0a9613dcda58697455f459fdd01

[00:28] <dalek> rakudo: afd65e7 | jonathan++ | docs/ChangeLog:

[00:28] <dalek> rakudo: Couple more ChangeLog items.

[00:28] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/afd65e79d25dc03977f9cb65a95990e7c6e0583c

[00:28] <[Coke]> pmichaud: hokay. leaving off that step...

[00:28] *** PZt joined
[00:29] <colomon> spectesting now in integration...

[00:30] <[Coke]> ingy: ping

[00:31] <[Coke]> ingy apparently needs a CREDITS entry.

[00:31] <jnthn> pmichaud: Shoudl the announce have a mention that this is not R*?

[00:31] <pmichaud> jnthn: yes.

[00:31] <pmichaud> I'm not at a point where I can make such a mention, though.

[00:32] <[Coke]> I will take a first stab at it.

[00:32] <pmichaud> (so if someone else can draft, I'll edit)

[00:32] <jnthn> [Coke]++

[00:32] <jnthn> Announce so far looks good, anyway.

[00:32] *** elmex left
[00:33] <dalek> rakudo: 937177e | jonathan++ | docs/ChangeLog:

[00:33] <dalek> rakudo: Also a note in the ChangeLog about enum improvements.

[00:33] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/937177eeaa1c229428717f935f5680ed46b8ebf2

[00:34] *** lest_away is now known as lestrrat

[00:37] <[Coke]> jnthn: I think Util wrote most of it. =-)

[00:37] *** elmex joined
[00:37] <[Coke]> star includes compiler and modules and... a pony?

[00:37] <tadzik> and a book

[00:38] *** mikehh joined
[00:38] <tadzik> and a Cake

[00:38] <tylercurtis> How about a kitty?

[00:38] <[Coke]> book's separate, but timed with, I think.

[00:38] <tadzik> Acme::Meow?

[00:38] <tylercurtis> tadzik: Exactly!

[00:38] <tadzik> tylercurtis: I'll have to write some tests then :)

[00:39] *** eternaleye joined
[00:39] <tylercurtis> [Coke]: I think Rakudo * is supposed to include the PDF of the book.

[00:39] <masak> Star includes an airbag, for when the tutorials go too fast.

[00:39] <masak> rakudo: enum A <a b c>; say A.enums.WHAT

[00:39] <p6eval> rakudo 00848d: OUTPUT«Method 'enums' not found for invocant of class 'EnumMap'␤  in main program body at line 22:/tmp/RiJhCH9ygw␤»

[00:39] <[Coke]> an enum says WHAT?

[00:39] <masak> ESTILLTOOSOON

[00:40] <[Coke]> what is, the release?

[00:40] <[Coke]> are we waiting on something from you, masak?

[00:40] *** felliott left
[00:41] <tylercurtis> Also perl6.vim and Blizkost according to http://wiki.github.com/rakudo/rakudo/whats-going-into-rakudo

[00:42] <[Coke]> ah, that's what I need, danke

[00:42] *** Limbic_Region joined
[00:43] <masak> [Coke]: nope, waiting on nothing from me. I made it! :)

[00:43] <masak> see what you think about the new "Operator overloading" section of the blog post draft http://gist.github.com/485816

[00:44] <masak> if there are no comments, I'll go ahead and publish it now.

[00:44] <[Coke]> msgbot?

[00:44] <colomon> [Coke]: I just pushed my changes a minute ago.

[00:45] <tadzik> masak: multi sub infix:<±>($number, $fuzz) is before Operator Overloading section

[00:45] <[Coke]> masak - there is a +/- builtin?

[00:45] <dalek> rakudo: 3528a10 | (Solomon Foster)++ | src/core/Int.pm:

[00:45] <dalek> rakudo: Optimize use of .sign in infix:<div>.

[00:45] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/3528a10e67ff3ef1ab70c5faad33ef8c3b66a6ff

[00:45] <masak> rakudo: say "still on 00848d?"

[00:45] <p6eval> rakudo 00848d: OUTPUT«still on 00848d?␤»

[00:45] <masak> tadzik: thanks, fixing.

[00:45] <[Coke]> colomon: so, back to original speed and passing spectest?

[00:45] *** eternaleye left
[00:46] <colomon> [Coke]: not sure what you mean by original speed.

[00:46] <[Coke]> rakudo: say 15 ± 5;

[00:46] <p6eval> rakudo 00848d: OUTPUT«===SORRY!===␤Confused at line 22, near "say 15 \x{b1} 5"␤»

[00:46] <colomon> it's the fastest it was today when it passed all the tests.  :)

[00:47] <[Coke]> colomon: apparently last release was 2x as slow as the previous, or something. you eliminated the factor-of-two slowdown, yes?

[00:47] <colomon> I shaved about 55% off the execution time of that script.

[00:47] <[Coke]> masak: you use that example but it fails.

[00:47] <colomon> so yes, it should be about where it was last release.

[00:47] <[Coke]> colomon++ to you, sir.

[00:47] <tadzik> [Coke]: the definition is above the section start

[00:47] <masak> [Coke]: what tadzik said. now fixed.

[00:47] *** rlb3_home left
[00:48] <masak> the section is about operator overloading. :)

[00:48] <masak> hm, I don't need a multi on that sub...

[00:48] <tylercurtis> colomon: a working fdiv_i_i_i appears to reduce the time taken by that script by about 66% compared to before your changes.

[00:48] *** isBEKaml left
[00:49] <tadzik> nice examples, masak++

[00:49] <masak> \o/

[00:50] <tadzik> bah, apparently Term::ANSIColor is alredy in proto

[00:50] <[Coke]> tylercurtis: how about compared to nwo?

[00:50] <tylercurtis> colomon: probably rather minor difference from as is now that you've made it so much faster.

[00:50] *** azert0x left
[00:50] <tylercurtis> [Coke]: Haven't tried that yet.

[00:50] <tadzik> Jakob Ilves, is he on #perl6 sometimes maybe?

[00:51] <[Coke]> ok. compare that, if it's another big win, I'll consider holding the release for someone to make a dynop.

[00:51] <masak> rakudo: say "?"

[00:51] <p6eval> rakudo 937177: OUTPUT«?␤»

[00:51] <dalek> rakudo: 87e77d0 | Coke++ | docs/announce/2010.07:

[00:51] <dalek> rakudo: add a "we are not star" note to the compiler release announcement

[00:51] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/87e77d0f757279a62d6b218d693bba10c2dd31ce

[00:51] <dalek> rakudo: f2aa8d1 | Coke++ | docs/announce/2010.07:

[00:51] <dalek> rakudo: rerun the contributer script.

[00:51] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/f2aa8d1545aa616cc2ee45cea2633600ddce24d2

[00:52] * masak whistles "we are not star"

[00:52] <masak> rakudo: enum A <a b c>; say A.enums.WHAT

[00:52] <p6eval> rakudo 937177: OUTPUT«EnumMap()␤»

[00:52] <masak> rakudo: enum A <a b c>; say A..WHAT

[00:52] <p6eval> rakudo 937177: OUTPUT«Not enough positional parameters passed; got 0 but expected 1␤  in 'WHAT' at line 710:CORE.setting␤  in main program body at line 22:/tmp/gA1pJtBwqX␤»

[00:53] <masak> oops.

[00:53] <masak> rakudo: enum A <a b c>; say A.WHAT

[00:53] <p6eval> rakudo 937177: OUTPUT«A␤»

[00:53] <masak> \o/

[00:53] * masak closes ticket

[00:53] <tylercurtis> colomon: can you point me to any quick spectests to run that incorrect infix:<div> behavior would mess up?

[00:54] *** ashleydev left
[00:54] <colomon> t/spec/S03-operators/arith.t

[00:55] <colomon> tylercurtis: you actually changed parrot for this fix?

[00:55] <jnthn> masak: Nice post!

[00:55] <masak> thankz.

[00:55] <tylercurtis> colomon: my local checkout, yeah.

[00:55] <masak> it's going into print now.

[00:56] <masak> just have to... um... make yet another small Perl 6 script to convert to use.perl.org's idiosyncratic idea of HTML.

[00:57] <dalek> rakudo: 5c33c5a | Coke++ | docs/release_guide.pod:

[00:57] <dalek> rakudo: This release is heading out the door soon.

[00:57] <dalek> rakudo: Also note broken step. :(

[00:57] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/5c33c5aaf2e7e096d5cbed018b357c5e8bc6f5eb

[00:57] <dalek> rakudo: 8a9027a | Coke++ | docs/announce/2010.07:

[00:57] <dalek> rakudo: I am fairly certain that Rakudo is not yet committing code to her own repository

[00:57] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/8a9027a8fcc97e59599af9bd4a4ae58aed0716ce

[00:57] <[Coke]> ... though it would be super awesome if she wasn't so lazy!

[00:57] <colomon> 66% better is a decent bit faster than my fix.  but seems like it is very late in the day to try to squeeze it into the release if it needs parrot changes as well.

[00:57] <[Coke]> colomon: no, you'd just make his parrot builtin op fix a dynop for rakudo.

[00:58] <jnthn> [Coke]: no no, Rakudo became self-aware this month too

[00:58] <[Coke]> and yes, I really am not doing a parrot release today, again. =-)

[00:58] <[Coke]> jnthn: let her fix the damn announcement, then!

[00:58] <[Coke]> ;)

[00:58] <colomon> ah, [Coke] I have not the faintest idea how to do a dynop

[00:58] <[Coke]> jnthn and I have some experience in that area.

[00:59] <[Coke]> and perl6 is already using dynops, so it's not a heavy lift.

[00:59] <[Coke]> uh, why does perl6.ops have an $Id $ string? =-)

[00:59] <colomon> you guys be the judge, then?  if it's easy to do the dynop thang, I'm pretty sure the rakudo part of things is trivial.  then it's just a matter of another spectest....

[01:00] <sorear> [Coke]: because it used to be in svn?

[01:00] <jnthn> [Coke]: Laughing dried grapes.

[01:00] <[Coke]> someone show me the op.

[01:00] <colomon> tylercurtis: can you add say $n.WHAT; to the end of the test script to make sure it is outputting a Rat?

[01:00] <[Coke]> sorear: it was kind of rhetorical. =-)

[01:00] <tylercurtis> colomon: meh, apparently, I didn't correctly fix fdiv_i_i_i.

[01:01] <colomon> ah.

[01:01] <colomon> I vote we leave this for the next release.

[01:01] <jnthn> [Coke]: tbh I'd not worry about it.

[01:01] <jnthn> +1

[01:01] <colomon> always nice to have another 10% speedup in your pocket.  ;)

[01:02] <[Coke]> WFM.

[01:02] <Util> [Coke]: Your rerun of the contributer script removed "döt net" from Ingy's name. 

[01:02] <[Coke]> tylercurtis: if you get it working as an op, it's basically a CNP into src/ops/perl6.ops with a new op name.

[01:02] <cxreg> mberends: patch for zavolaj ready, reads from resident symbol table

[01:02] <[Coke]> Util: not my fault. he's not in CREDITS.

[01:02] <cxreg> (no zlib required :) )

[01:02] <[Coke]> I will gladly rerun if someone adds him. =-)

[01:03] <[Coke]> cxreg: resident evil table? 

[01:03] <Util> [Coke]: Fair enough.

[01:03] *** eternaleye joined
[01:03] <cxreg> [Coke]: is native('burial ground')

[01:03] <sjohnson> rakudo:  for (^5) { my %hash; say "dub-tee-eff" if defined(%hash); %hash<something> = 1; }

[01:03] <p6eval> rakudo 937177: OUTPUT«dub-tee-eff␤dub-tee-eff␤dub-tee-eff␤dub-tee-eff␤dub-tee-eff␤»

[01:03] *** timbunce left
[01:04] <sjohnson> anyone here able to explain why %hash stays defined, after it is redeclared with a my?

[01:04] <tylercurtis> rakudo: my %hash; say %hash.defined

[01:04] <p6eval> rakudo 937177: OUTPUT«1␤»

[01:05] <tylercurtis> sjohnson: because apparently empty hashes are defined. Is that wrong?

[01:05] <[Coke]> there's yer problem.

[01:05] <sjohnson> rakudo: my $string; say $string.defined

[01:05] <p6eval> rakudo 937177: OUTPUT«0␤»

[01:06] <sjohnson> ... that threw me for a good loop at work

[01:06] <tylercurtis> rakudo: my @array; @array.defined.say;

[01:06] <p6eval> rakudo 937177: OUTPUT«1␤»

[01:06] <sjohnson> maybe TimToady can help me

[01:06] <sjohnson> *puppy dog eyes*

[01:06] <sjohnson> help me with explanation, i mean.  just so i get the idea.

[01:07] <pmichaud> back again... anything from the release need anything from me?

[01:07] <pmichaud> (in the next 8 mins, before the soto?)

[01:07] <[Coke]> pmichaud: double check the Star note in the announcement.

[01:07] <pmichaud> I'm thinking it might want to be higher

[01:07] *** pjcj left
[01:08] <[Coke]> sure.

[01:08] <pmichaud> make it the 2nd paragraph, maybe?

[01:08] <tylercurtis> sjohnson: I think composite containers are always defined.

[01:08] *** masak left
[01:08] <dalek> rakudo: 3d67b9d | Coke++ | src/ops/perl6.ops:

[01:08] <dalek> rakudo: remove svn fossil

[01:08] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/3d67b9ddcebb09e804da5aff4ac6a572cd1f9d03

[01:08] <tylercurtis> sjohnson: based on the implication of this from S02 "Assigning or binding Nil to any composite container (such as an Array or Hash) empties the container, resetting it back to an uninitialized state. The container object itself remains defined."

[01:08] *** masak joined
[01:09] <sjohnson> thank you, tylercurtis 

[01:09] <sjohnson> sorry to highlight you, TimToadie

[01:09] <sjohnson> sowwie

[01:09] <pmichaud> "July 29[2]" feels weird.

[01:09] *** eternaleye_ joined
[01:09] <pmichaud> maybe "July 29, 2010 [2]."

[01:09] <pmichaud> or "July 29 [2]"

[01:10] <[Coke]> pmichaud: done.

[01:10] *** eternaleye left
[01:10] <[Coke]> .. except for that.

[01:10] *** pjcj joined
[01:10] <[Coke]> ooh, the push failed. bundling..

[01:10] <pmichaud> anything else that needs my input/review?

[01:10] <au|irc> sjohnson: ().defined is also true; generally, ".defined" is true for allocated containers, even if it has a size of 0.

[01:11] <pmichaud> [Coke]: does anyone else have a "hold request" on the release?  (more)

[01:11] <pmichaud> at this point, I consider the release to be largely in your hands -- you can decide when to cut it.  :)

[01:11] <sjohnson> you learn something everyday!

[01:11] <[Coke]> pmichaud: colomon was the last. not waiting on anyone else.

[01:11] <pmichaud> okay, great.

[01:12] <[Coke]> pmichaud: I'm doing the build/test now.

[01:12] <masak> rakudo: say "foo".substr(4).WHAT

[01:12] *** achromic left
[01:12] <p6eval> rakudo 937177: OUTPUT«Mu()␤»

[01:12] <[Coke]> oh, and i can move up the family room to do this and stop being a hermit.

[01:12] * masak submits rakudobug

[01:12] <pmichaud> [Coke]: if you run into any difficulties (you shouldn't, but...)  and it's getting late where you are, I don't see any major difficulty with holding until tomorrow

[01:13] <pmichaud> anyway, it's in your ballpark.

[01:13] <pmichaud> for everyone else ... feature freeze until release :)

[01:13] <tylercurtis> sjohnson: I expect the reasoning is that if you made @ and % variables default to undefined objects like scalars do, you either have to manually initialize them or or be unable to distinguish an empty array/hash from lack of an array/hash.

[01:13] <pmichaud> (unless Coke++ requests or approves :)

[01:13] <pmichaud> okay, time for SOTO here...bbiaw

[01:14] <tylercurtis> The former if you initialize them to the type object, the latter if you say that empty arrays/hashes are undefined.

[01:14] <dalek> rakudo: 5b5c8f5 | Coke++ | docs/announce/2010.07:

[01:14] <dalek> rakudo: I said, WE ARE NOT STAR.

[01:14] <dalek> rakudo: (emphasize by moving up to 2nd paragraph). pmichaud++

[01:14] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/5b5c8f5f72a148a1edfddca6571d6970c77433f6

[01:14] *** achromic joined
[01:17] *** timbunce joined
[01:17] *** snarkyboojum joined
[01:20] *** timbunce left
[01:24] *** fridim joined
[01:25] <masak> loliblogged: http://use.perl.org/~masak/journal/40459

[01:25] <masak> [Coke]: happy releasing!

[01:26] * masak seeks the bed

[01:26] *** masak left
[01:26] <tylercurtis> Oh. That's what I did wrong! I only changed fdiv_i_i, not fdiv_i_i_i.

[01:26] *** kjeldahl joined
[01:26] <tadzik> phenny: tell masak you forgot to bold the Operator Overloading section

[01:26] <phenny> tadzik: I'll pass that on when masak is around.

[01:27] * tylercurtis facepalms.

[01:27] *** plobsing joined
[01:28] *** justatheory joined
[01:28] <au|irc> phenny: tell masak great blogpost :) looks like use.perl ate the <...> in infix:<...> as markup, though

[01:28] <phenny> au|irc: I'll pass that on when masak is around.

[01:28] *** felliott joined
[01:29] *** felliott_ joined
[01:29] *** felliott left
[01:29] *** felliott_ is now known as felliott

[01:30] <[Coke]> is it normal for there to be a small # of spectest failures?

[01:31] <colomon> no

[01:31] <colomon> what are you seeing?

[01:31] <sjohnson> rakudo: my @list; @list.push(undef); @list.defined.say

[01:31] <p6eval> rakudo 937177: OUTPUT«===SORRY!===␤Unsupported use of undef as a value; in Perl 6 please use something more specific:␤     Mu (the "most undefined" type object),␤   an undefined type object such as Int,␤    Nil as an empty list,␤    *.notdef as a matcher or method,␤ Any:U as a type constraint␤     

[01:31] <p6eval> .. or fail() as a failur…

[01:31] <sjohnson> ... what have I DONE

[01:32] <sjohnson> rakudo: my $buffer; my @list; $buffer .= 'bad' if @list; @list.push(0); $buffer .= 'good' if @list; say $buffer

[01:32] <p6eval> rakudo 937177: OUTPUT«===SORRY!===␤Quoted method name requires parenthesized arguments at line 22, near " if @list;"␤»

[01:33] <sjohnson> rakudo: my $buffer; my @list; $buffer ~~ 'bad' if @list; @list.push(0); $buffer ~~ 'good' if @list; say $buffer

[01:33] <p6eval> rakudo 937177: OUTPUT«Any()␤»

[01:33] <sjohnson> （´ー｀　）

[01:33] * sjohnson gives up

[01:33] *** gbacon joined
[01:33] <sjohnson> rakudo: say 'happy'.' juice'

[01:33] <p6eval> rakudo 937177: OUTPUT«===SORRY!===␤Quoted method name requires parenthesized arguments at line 22, near ""␤»

[01:34] <sjohnson> rakudo: say 'happy'~' juice'

[01:34] <tylercurtis> colomon: While figuring out what I did wrong with fdiv_i_i_i, I tried fdiv_n_n_n, which gives the correct result for the example script and isn't noticeably slower than the broken _i_i_i. It also passed arith.t(well, arith.rakudo; I assume arith.t should have some failures itself?). Haven't compared to yours yet. About to try your change then try with working fdiv_i_i_i.

[01:34] <p6eval> rakudo 937177: OUTPUT«happy juice␤»

[01:34] <sjohnson> rakudo: my $buffer; my @list; $buffer ~= 'bad' if @list; @list.push(0); $buffer ~= 'good' if @list; say $buffer

[01:34] <p6eval> rakudo 937177: OUTPUT«good␤»

[01:34] <sjohnson> sorry to clog the channel tylercurtis, i'm done.

[01:34] <tylercurtis> sjohnson: "undef" isn't valid in Perl 6.

[01:34] <colomon> tylercurtis: default parrot fdiv_n_n_n works?

[01:34] <sjohnson> thanks for the help

[01:35] <tylercurtis> colomon: if you still use box__PI, yes.

[01:36] <[Coke]> ... I haven't released yet. 

[01:37] <colomon> trying here.

[01:37] <colomon> [Coke]: please do not wait on us!

[01:37] <tylercurtis> colomon: Surprisingly, it appeared to be slightly faster than broken fdiv_i_i_i. But that's probably not a significant difference. I didn't fully spectest.

[01:37] <[Coke]> I'm not, I'm waiting on the (&#$ spectests. =-)

[01:37] <colomon> [Coke]: \o/

[01:39] <colomon> arith.t passes

[01:40] <colomon> wow, timing script works and is down to 10s

[01:40] <colomon> tylercurtis++ # another big win

[01:42] <colomon> I used upgrade_to_num_if_needed instead of boxing -- that's how most of the other Int operators do things.

[01:42] <colomon> though I don't think it will ever need to upgrade, so there's probably a way to shave a few more cycles off there.

[01:43] *** masonkramer joined
[01:43] *** s1n left
[01:43] <sorear> TimToady: ping

[01:47] <[Coke]> spec. test. so. slow. w. t. f.

[01:48] <[Coke]> ah. don't run the spec tests with TEST_JOBS, because they eat a TON of memory.

[01:48] <[Coke]> ah well, I'm already in S32.

[01:49] <tylercurtis> colomon: yeah. Your previous version is significantly slower than fdiv_n_n_n for me.

[01:50] <colomon> [Coke]: S32 takes a substantial portion of the time, alas.

[01:51] <Util> [Coke]: Shall I commit http://gist.github.com/486902 ?

[01:51] <Util>     (Added Ingy to CREDITS; made contributors.pl work with UTF-8 and ignore fake "Rakudo Perl" name)

[01:51] <[Coke]> http://nopaste.snit.ch/22220

[01:52] <[Coke]> spectest failures.

[01:52] <[Coke]> is that evil?

[01:52] <colomon> yes

[01:52] <colomon> what the heck?

[01:52] <[Coke]> Util: Go for it, that should be safe.

[01:53] <[Coke]> Util++

[01:53] <colomon> [Coke]: try

[01:53] <colomon> make t/spec/S05-mass/properties-derived.t

[01:53] <colomon> I'm wondering if you just ran out of memory or something.

[01:53] <[Coke]> Util: also fix the list in teh release.

[01:53] <Util> [Coke]: Will do.

[01:54] <[Coke]> colomon: no, it fails even when run like that.

[01:54] <colomon> huh.

[01:54] <colomon> works fine here.

[01:54] *** jaldhar left
[01:55] <colomon> you're on linux?

[01:55] <[Coke]> no, OS X 10.6

[01:55] <colomon> double huh

[01:55] <[Coke]> darwin, intel.

[01:55] <colomon> 10.5 here

[01:56] <[Coke]> that's with a --gen-parrot

[01:56] <colomon> same here

[01:57] * tylercurtis gets the failures with a non gen-parrot on OS X 10.5.

[01:57] <[Coke]> I am guessing this is not worth killing the release over.

[01:57] <[Coke]> can someone do a spec test on linux for me?

[01:58] <colomon> [Coke]: I'll pull a fresh rakudo and try it on my big 64-bit linux box

[01:58] <[Coke]> ARGH.

[01:58] <[Coke]> does stresstest really also run spectest?

[01:59] <colomon> I dunno, they did all that while I was on vacation.

[02:00] *** s1n joined
[02:00] *** Limbic_Region left
[02:00] <dalek> rakudo: 93ec069 | util++ |  (3 files):

[02:00] <dalek> rakudo: Added Ingy to CREDITS; made contributors.pl work with UTF-8 and ignore fake 

[02:00] <dalek> rakudo: "Rakudo Perl" name

[02:00] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/93ec06999ea1ba442aee48dae8bb95c9348f7cc4

[02:01] <tylercurtis> [Coke]: forgot that, it's only the s05 tests I'm getting failures for.

[02:02] *** paul1234 left
[02:05] <snarkyboojum> I've had failure in t/spec/S05-mass/properties-derived.t on OS X for ages

[02:05] <snarkyboojum> failures even

[02:06] <snarkyboojum> for several months at least

[02:06] <tylercurtis> snarkyboojum: the Ideograph stuff?

[02:06] <snarkyboojum> unicode weirdness

[02:06] <snarkyboojum> yeah

[02:07] <colomon> do you guys have ICU?

[02:07] <snarkyboojum> tylercurtis: always related to \x[9FC4]

[02:07] <snarkyboojum> yep

[02:07] *** timbunce joined
[02:08] <[Coke]> pretty sure i"m icu enabled, yes.

[02:08] *** justatheory left
[02:08] <snarkyboojum> definitely have ICU here

[02:09] * tylercurtis also does.

[02:09] <snarkyboojum> last time I brought it up moritz_ mentioned that it was a known issue on some platforms

[02:09] <colomon> huh, t/spec/S05-mass/properties-derived.t doesn't work at all on my Linux box.  perhaps no ICU is the problem?

[02:11] <colomon> (for me, I mean, not for you)

[02:11] <tylercurtis> [Coke]: which test does the s10 test fail on?

[02:12] <dalek> rakudo: 40bf707 | Coke++ | docs/release_guide.pod:

[02:12] <dalek> rakudo: stresstest runs spectest also - don't need it 2x.

[02:12] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/40bf7075870621f0333f6beb20368264c028daa7

[02:12] <dalek> rakudo: d1cd713 | Coke++ |  (3 files):

[02:12] <dalek> rakudo: Merge branch 'master' of github.com:rakudo/rakudo

[02:12] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/d1cd713b50ef0e0a16444ca75789897f4ecc98ad

[02:14] *** jaldhar joined
[02:16] <lue> ohai

[02:16] *** timbunce left
[02:17] <sorear> TimToady: Can you explain 'my module CORE;' ?  I thought that the setting, and YOU_ARE_HERE code, was supposed to go into GLOBAL

[02:17] <sorear> (the part that isn't 'my'-scoped)

[02:18] <snarkyboojum> I seem to get intermittent failures in S10-packages/basic.t - just ran it a few times.. a couple of runs where everything passes and a few with failed subtests which seems to abort and fail with "Bad plan." 

[02:18] <[Coke]> tylercurtis: it's in the nopaste.

[02:18] <[Coke]> (or else I don't know. =-)

[02:19] <[Coke]> running stresstest now, will post those...

[02:19] <[Coke]> ugh, only on s03

[02:19] *** achromic left
[02:20] *** skangas joined
[02:20] *** paul1234 joined
[02:23] <sorear> rakudo: $Foo::x = 42; say "alive"

[02:23] <p6eval> rakudo 937177: OUTPUT«Null PMC access in getprop()␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/1dH4ftG5W5␤»

[02:23] <sorear> std: $Foo::x = 42; say "alive"

[02:23] <p6eval> std 31790: OUTPUT«ok 00:01 117m␤»

[02:23] <sorear> Is that valid (no runtime errors) Perl 6?

[02:27] <au|irc> sorear: it is

[02:27] <au|irc> as per S10/Package nesting

[02:28] *** au|irc is now known as au|afk|lunch

[02:30] *** reg7 joined
[02:30] <sorear> au|afk|lunch: I'm speaking of the fact that there is no declarator for Foo::x

[02:31] <snarkyboojum> tylercurtis: I think [Coke] might be seeing the same kinds of errors as I've described for S10-packages/basic.t - i.e the test is crashing after test 13 and test 36 for me, but intermittently

[02:31] *** au|afk|lunch is now known as au|irc

[02:31] <sorear> wow, you eat almost as fast as I do

[02:32] <au|irc> it's as fast as pushing lunch on thunks queue

[02:33] <au|irc> I read that as "Foo::<$x> = 42" and would think the package obj would be vivified, as per S10

[02:34] <au|irc> might be wrong, though.

[02:37] *** au|irc is now known as au|afkForReal

[02:42] *** colomon_phone joined
[02:43] <sorear> let me rephrase that.

[02:43] <sorear> rakudo: package Foo { }; $Foo::x = 42; say "alive"

[02:43] <p6eval> rakudo 937177: OUTPUT«Null PMC access in getprop()␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/FMfdkLTHlI␤»

[02:43] <sorear> should that be legal?

[02:43] <sorear> no *package* vivification here

[02:44] <tylercurtis> Is it cheating on my chemistry placement test if I write a Perl 6 module for strongly-typed unit-correct calculations and use that as my calculator? :)

[02:46] <snarkyboojum> tylercurtis: I'd be interested if you managed to run a Perl 6 module *on* your calculator :P

[02:47] <tylercurtis> snarkyboojum: not on my calculator. :) As my calculator. The test is online.

[02:48] <tadzik> hah :)

[02:55] <[Coke]> holy crap, this stresstest isnt going to finish until friday.

[02:56] <snarkyboojum> [Coke]: what's it up to? :)

[02:57] *** colomon_phone left
[02:57] <tylercurtis> ugh... I think I'm going to have to do .Num.Int to get .kilo to actually return an Int when called on an Int.

[03:03] *** meppel joined
[03:04] *** reg7 left
[03:07] *** meppl left
[03:08] <cxreg> rakudo: my $foo = pir::null__P()

[03:08] <p6eval> rakudo d1cd71: OUTPUT«Null PMC access in isa_pmc()␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/8u0MgbDSLX␤»

[03:08] <cxreg> why do you get that when trying to store a null?

[03:09] *** kid51 left
[03:11] *** gbacon left
[03:11] *** masonkramer left
[03:13] <sorear> snarkyboojum: Do you have a .NET calculator?

[03:13] <sorear> I know they make Java cellphones

[03:14] <[Coke]> advent day 17

[03:14] *** colomon_phone joined
[03:16] <snarkyboojum> [Coke]: oops - that's a memory intensive test

[03:16] <snarkyboojum> sorear: nope :P

[03:18] *** nimiezko left
[03:19] *** kkrev joined
[03:22] <[Coke]> guess it was a bad night to have 150 tabs open in Chrome.

[03:26] <[Coke]> done. http://nopaste.snit.ch/22223

[03:26] <[Coke]> same properties-derived failrus and s10-packages.

[03:27] <[Coke]> S10-packages working for folks on linux ?

[03:33] *** alester left
[03:35] *** shade_ joined
[03:39] <cxreg> ok, i think i need a commit bit on zavolaj

[03:41] <sorear> hugme: show zavolaj

[03:41] <hugme> sorear: sorry, I don't know anything about 'zavolaj'

[03:41] <cxreg> crud

[03:42] <sorear> ping jnthn

[03:42] <cxreg> jnthn: ping :)

[03:42] *** sorear sets mode: +v hugme

[03:42] * cxreg forks

[03:44] *** shade_ is now known as SHADE\

[03:44] *** SHADE\ is now known as shade\

[03:44] <cxreg> there we go: http://github.com/cxreg/zavolaj/commit/37c4b6112

[03:48] *** DemoFreak left
[03:50] *** DemoFreak joined
[03:51] <[Coke]> ok, those tests do pass on feather.

[03:55] *** tedv left
[03:58] <sorear> std: augment class Foo {}

[03:58] <p6eval> std 31790: OUTPUT«[31m===[0mSORRY![31m===[0m␤Can't augment class Foo without MONKEY_TYPING at /tmp/aG9wyrJklb line 1:␤------> [32maugment class Foo [33m⏏[31m{}[0m␤Potential difficulties:␤  Can't augment class Foo because it doesn't exist at /tmp/aG9wyrJklb line 1:␤------> [32maugment class

[03:58] <p6eval> ..…

[03:59] *** ashleydev joined
[03:59] <sorear> std: class Foo::Baz { }; class Foo { class Bar { augment class Baz {}; }; }

[03:59] <p6eval> std 31790: OUTPUT«[31m===[0mSORRY![31m===[0m␤Can't augment class Baz without MONKEY_TYPING at /tmp/kpi_NJM45B line 1:␤------> [32mass Foo { class Bar { augment class Baz [33m⏏[31m{}; }; }[0m␤Check failed␤FAILED 00:01 115m␤»

[03:59] <sorear> How does that work?

[03:59] <tadzik> use MONKEY_TYPING;

[04:00] <sorear> std: use MONKEY_TYPING; class Foo::Baz { }; class Foo { class Bar { augment class Baz {}; }; }

[04:00] <p6eval> std 31790: OUTPUT«Compiled ./lib/MONKEY_TYPING.pm6␤ok 00:01 115m␤»

[04:00] <sorear> std: use MONKEY_TYPING; augment class Foo {}

[04:00] <p6eval> std 31790: OUTPUT«Potential difficulties:␤  Can't augment class Foo because it doesn't exist at /tmp/uY2COpb4mH line 1:␤------> [32muse MONKEY_TYPING; augment class Foo [33m⏏[31m{}[0m␤ok 00:01 114m␤»

[04:01] <sorear> How does that work?

[04:01] <tadzik> I think you need to have a class first

[04:01] <sorear> How does Perl 6 find baz

[04:01] <sorear> tadzik: no.  I want to know why the Baz version *works*

[04:01] <tadzik> no idea

[04:01] <sorear> If I ask "How does X work", you should assume that I'm talking about something that works.

[04:02] <sorear> If I want to know about something that doesn't work, I will ask "Why doesn't X work"

[04:02] <tadzik> my bad

[04:02] *** paul1234 left
[04:05] *** kkrev left
[04:07] *** kkrev joined
[04:09] <sorear> ah, I see, I think

[04:09] <sorear> STD seems to be aliasing $*CURLEX to $*CURPKG

[04:09] *** xinming left
[04:10] <sorear> 23:09 <@Alias_> I continue to think that until Perl 6 is real, until you can  have it fully installed and experimentable in less than a  minute, nobody will really care very much

[04:10] <sorear> I think this sounds like a request for binary packages of Rakudo

[04:10] <sorear> Is that doable?

[04:12] *** colomon_phone left
[04:12] <snarkyboojum> sorear: only on a .NET calculator

[04:13] <sorear> well, Alias maintains the official windows packages of Perl5

[04:13] <cxreg> sorear: this from the guy who's still scared of Git

[04:13] <sorear> so .NET works

[04:14] <sorear> cxreg: huh?

[04:14] <cxreg> i think debian is already shipping rakudo

[04:14] <cxreg> yeah, it is

[04:14] <cxreg> Get:4 http://ftp.us.debian.org experimental/main rakudo 0.1~2010.01-1 [1,357kB]

[04:15] <cxreg> sorear: alias has git-phobia :)

[04:15] <cxreg> or something approximating it

[04:16] <[Coke]> trying to post to use.perl.org. article submission . preview .takes me to search.pl?op=journals, not a preview. wthf.

[04:16] *** plobsing left
[04:18] *** shade\ left
[04:18] <[Coke]> righhht. can't even click on the login input box on firefox.

[04:18] <[Coke]> cross use.perl.org off my list of places to publish.

[04:19] <[Coke]> crap. can I haz a login on rakudo.org?

[04:19] *** shade_ joined
[04:21] *** paul1234 joined
[04:21] *** kkrev left
[04:22] *** mtnviewmark_ joined
[04:22] <[Coke]> I will not be offended if someone just posts the announcement on rakudo.org for me. I will also take a login and do it myself. or take a login after someone has done that. or a beer.

[04:22] *** mtnviewmark_ left
[04:22] <[Coke]> release is done, go about your business. =-)

[04:23] *** kkrev joined
[04:24] * cxreg hacks SPI support into plparrot

[04:25] <snarkyboojum> [Coke]++ # release-fu

[04:34] *** Raynes joined
[04:36] * [Coke] is tiiiiiired.

[04:37] <szabgab> cxreg: debian is also shipping padre but people still would like to have an easy, on click installer for it.   Even on linux

[04:37] *** kkrev left
[04:37] <[Coke]> is also trying to get Albany.pm to meet next week.

[04:37] <[Coke]> anyone going to be in the area on thursday? =-)

[04:37] <cxreg> szabgab: so use ubuntu :D

[04:37] <[Coke]> szabgab: you would be proud!

[04:37] <szabgab> I think easy installation is critical for acceptance

[04:37] <snarkyboojum> szabgab: enjoyed your screencasts - keep em coming :)

[04:38] <cxreg> szabgab: why should rakudo be easier to install than perl 5?

[04:38] <szabgab> cxreg: I am using Ubuntu, but I am not sure why does that make a difference?

[04:38] <snarkyboojum> cxreg: why shouldn't it be? :D

[04:38] <szabgab> cxreg: only if we want people to start using it :)

[04:38] <cxreg> heh

[04:38] *** kkrev joined
[04:38] <[Coke]> for most users, installing perl is a noop. =-)

[04:39] <[Coke]> "oh, look, it came with the system."

[04:39] <cxreg> well whatever.  ubuntu has those fiddly things for adding your own sources now

[04:39] <cxreg> we should set one of those up maybe

[04:39] <snarkyboojum> what's happening with try.perl6.org?

[04:39] <szabgab> [Coke]: right but that's an old perl

[04:40] <szabgab> not the one freshly baked by p5p

[04:40] *** molaf joined
[04:41] <tylercurtis> rakudo: enum Foo <a b c> ; my Foo $f = Foo::a; say $f; my Foo $g = a; say $g;

[04:41] <p6eval> rakudo d1cd71: OUTPUT«Type check failed for assignment␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/GsJnM6Geob␤»

[04:41] <tylercurtis> rakudo: enum Foo <a b c> ; my $f = Foo::a; say $f; my $g = a; say $g;

[04:41] <p6eval> rakudo d1cd71: OUTPUT«0␤0␤»

[04:41] <tadzik> snarkyboojum: moritz says the parts are pretty much done, and someone needs to stick it all together

[04:41] <tadzik> it's try.rakudo.org by the way

[04:42] <tylercurtis> rakudo: enum Foo <a b c> ; my $f = Foo::b; say $f; my $g = c; say $g;

[04:42] <snarkyboojum> tadzik: oops ok - but cool

[04:42] <p6eval> rakudo d1cd71: OUTPUT«1␤2␤»

[04:42] <szabgab> case: I was just in a talk about http://garlicsim.org/ a simulator, I had my windows netbook with me. I looked for the windows installer, installed it and it was not the right one (it was without a gui) so I uninstalled and went home

[04:42] <tylercurtis> rakudo: enum Foo <a b c> ; my $f = Foo::b; say $f; my $g = c; say $g; say Foo::a ~~ Foo;

[04:42] <p6eval> rakudo d1cd71: OUTPUT«1␤2␤0␤»

[04:42] <tylercurtis> Enumbug =/

[04:43] <tylercurtis> rakudo: say Bool::True ~~ Bool;

[04:43] <p6eval> rakudo d1cd71: OUTPUT«1␤»

[04:43] <tylercurtis> rakudo: enum Foo <a b c> ; my $f = Foo::b; say $f; my $g = c; say $g; say Foo::a ~~ Foo; say Foo::a ~~ Int;

[04:43] <p6eval> rakudo d1cd71: OUTPUT«1␤2␤0␤1␤»

[04:45] <snarkyboojum> tadzik: not sure if I can help, but happy to if there's anything obvious to be done

[04:45] <snarkyboojum> :)

[04:45] <tadzik> snarkyboojum: don't ask me, I have no idea :)

[04:50] <szabgab> snarkyboojum: you are welcome (re screencasts) but I am also trying to figure out how could they be improved?

[04:51] <szabgab> I see a sharp drop in the view stats from episode 1 to 4

[04:51] *** kkrev left
[04:51] <szabgab> viewers: 864 - 203 - 107 - 39

[04:52] *** kkrev joined
[04:54] <tylercurtis> szabgab: @viewers[2,3]>>++

[04:54] * tylercurtis is now getting around to watching the 3rd and 4th.

[04:55] <sorear> szabgab: what youtube doesn't tell you is the number of people who watched the end of #4

[04:55] <sorear> I bet it's around 50

[04:55] <sorear> er

[04:55] <sorear> the end of #1

[04:56] <szabgab> maybe, but I'd still like to understand why people don't watch till the end?

[04:57] <szabgab> is it as Alias said, to slow, archaic editor, not easy to try it?

[05:00] <sorear> szabgab: because you didn't explain what the screencasts are in your blog posts

[05:01] <sorear> people had to start watching to know what you meant

[05:01] <sorear> after doing that, they didn't need to visit the rest

[05:01] <sorear> at least that's why I only visited the first

[05:03] *** kkrev left
[05:03] *** shade_ left
[05:03] <szabgab> rakudo: my %h = ("Foo" => 2, "Bar" => 3); %h.fmt("%s %s");

[05:03] <p6eval> rakudo d1cd71:  ( no output )

[05:03] <szabgab> rakudo: my %h = ("Foo" => 2, "Bar" => 3); say %h.fmt("%s %s");

[05:03] <p6eval> rakudo d1cd71: OUTPUT«Bar 3␤Foo 2␤»

[05:04] <szabgab> rakudo: my %h = ("Foo" => 2, "Bar" => 3); say %h.fmt("%s<%s>");

[05:04] <p6eval> rakudo d1cd71: OUTPUT«===SORRY!===␤Symbol '%s' not predeclared in <anonymous> (/tmp/Fq9euLarDL:22)␤»

[05:04] <szabgab> rakudo: my %h = ("Foo" => 2, "Bar" => 3); say %h.fmt("%s <%s>");

[05:04] <p6eval> rakudo d1cd71: OUTPUT«Foo <2>␤Bar <3>␤»

[05:04] *** kkrev joined
[05:04] <szabgab> rakudo: my %h = ("Foo" => 2, "Bar" => 3); say %h.fmt("%s\<%s>");

[05:04] <p6eval> rakudo d1cd71: OUTPUT«===SORRY!===␤Symbol '%s' not predeclared in <anonymous> (/tmp/o77_iCYm4B:22)␤»

[05:04] <szabgab> rakudo: my %h = ("Foo" => 2, "Bar" => 3); say %h.fmt("%s\<%s\>");

[05:04] <p6eval> rakudo d1cd71: OUTPUT«Foo<2>␤Bar<3>␤»

[05:05] <szabgab> rakudo: my %h = ("Foo" => 2, "Bar" => 3); say %h.fmt("%s\{\"%s\"\}");

[05:05] <p6eval> rakudo d1cd71: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<{ }>, couldn't find final '}' at line 22␤»

[05:06] <szabgab> I wonder if there is an explanation for these errors or if they are bugs?

[05:06] <sorear> try std:

[05:06] <szabgab> std: my %h = ("Foo" => 2, "Bar" => 3); say %h.fmt("%s\{\"%s\"\}");

[05:06] <p6eval> std 31790: OUTPUT«ok 00:01 120m␤»

[05:07] <szabgab> std: my %h = ("Foo" => 2, "Bar" => 3); say %h.fmt("%s<%s>");

[05:07] <p6eval> std 31790: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable %s is not predeclared at /tmp/FzktIaYAJf line 1:␤------> [32m("Foo" => 2, "Bar" => 3); say %h.fmt("%s[33m⏏[31m<%s>");[0m␤Check failed␤FAILED 00:01 120m␤»

[05:10] <sorear> '' is probably better if you don't want interpolatin

[05:11] *** buubot left
[05:12] <szabgab> rakudo: my %h = ("Foo" => 2, "Bar" => 3); say %h.fmt('%s<%s>');

[05:12] <p6eval> rakudo d1cd71: OUTPUT«Bar<3>␤Foo<2>␤»

[05:12] <szabgab> right, I did not think of that

[05:12] <szabgab> thanks

[05:13] <szabgab> rakudo: my %h = ("Foo" => 2, "Bar" => 3); say %h.fmt('%s{"%s"}');

[05:13] <p6eval> rakudo d1cd71: OUTPUT«Bar{"3"}␤Foo{"2"}␤»

[05:14] *** buubot joined
[05:15] <tylercurtis> Is list assignment lazy?

[05:15] <sorear> no

[05:15] *** jaldhar left
[05:16] *** jaldhar joined
[05:16] *** kkrev left
[05:16] <sorear> the exact status of list assignment wrt laziness hasn't been decided yet

[05:16] <sorear> to be safe, use :=

[05:17] <sorear> huh.  STD just made a lexpad where OUTER:: points to a *package*

[05:17] <sorear> how does that make any sense?

[05:17] *** hercynium left
[05:17] *** hercynium joined
[05:18] *** kkrev joined
[05:20] *** lucs joined
[05:25] <sorear> std: package Foo { my $x = 2; }; package Foo::Bar { say $x }

[05:25] <p6eval> std 31790: OUTPUT«ok 00:01 118m␤»

[05:26] <sorear> phenny: tell TimToady It's possibly to confuse STD.pm6 into setting up a package as the OUTER:: of a lexical scope.  Try package Foo { my $x = 2; }; package Foo::Bar { say $x }

[05:26] <phenny> sorear: I'll pass that on when TimToady is around.

[05:27] <sorear> phenny: tell TimToady STD.pm6 line 5547 appears to be involved, but I'm not very knowledgable on the $*CURLEX handling

[05:27] <phenny> sorear: I'll pass that on when TimToady is around.

[05:27] <snarkyboojum> szabgab: It's most speculation I suppose. Not sure re the editor comment - could be. I suspect most people are comfortable using whatever editor they're most familiar with. I think it could also be related to people just dipping their toes in and having a peek - I know I often treat other "new" languages like that until I'm ready to give them a good look. Good luck with the rest.. I'll be sending links to them around and generally 

[05:27] <snarkyboojum> advertising them on the web :)

[05:27] <snarkyboojum> s/most/mostly/

[05:27] <sorear> What editor was szabgab using?

[05:27] <snarkyboojum> vim I think

[05:28] <tadzik> yep, vim

[05:28] <[Coke]> ->> zzz

[05:34] *** kkrev left
[05:35] *** kkrev joined
[05:40] <szabgab> one comment is sure important, that people need to be able to try out that stuff in order to want to go on watching, especially as I am not show the funky features of perl 6 but trying to teach it

[05:40] <szabgab> so for the quick start I might need to direct them to the irc channel to use the bot

[05:41] <szabgab> is there a web interface for the evalbot?

[05:41] <szabgab> oh I remember I've already asked if I could talk to the evalbot in my privacy :)

[05:41] <szabgab> but I don't remember how

[05:42] <tylercurtis> szabgab: just send private messages to p6eval.

[05:42] <szabgab> yep   this worked: /msg p6eval rakudo: say 42

[05:43] <szabgab> so let me try it from the web

[05:44] <tylercurtis> rakudo: class Q_ { }; Q_.new.perl.say;

[05:44] <p6eval> rakudo d1cd71: OUTPUT«Q_.new()␤»

[05:44] <tylercurtis> rakudo: class Q { }; Q.new.perl.say;

[05:44] <p6eval> rakudo d1cd71: OUTPUT«===SORRY!===␤Confused at line 22, near "Q.new.perl"␤»

[05:44] <tylercurtis> rakudo: class Foo::Q { }; Foo::Q.new.perl.say;

[05:45] <p6eval> rakudo d1cd71: OUTPUT«Foo;Q.new()␤»

[05:48] <snarkyboojum> szabgab: once try.rakudo.org is up that might be worth mentioning

[05:49] <szabgab> who is working on it?

[05:49] <szabgab> I thought it would not be hard to connect a web pages to the current evalbot, would it ?

[05:49] <snarkyboojum> szabgab: moritz_ put it up as a weekly rakudo challenge a while back.. not sure of status or who is working on it.. I was asking the same question earlier today

[05:50] <snarkyboojum> szabgab: maybe not terribly hard, but needs to be done safely etc (obviously)

[05:51] <snarkyboojum> szabgab: anyway, tadzik mentioned that perhaps most of the bits'n'pieces for it are complete, so it may not be far off

[05:54] <cxreg> snarkyboojum: maybe you meant http://try.rakudo.org:8090 ?

[05:55] <cxreg> seems pretty non-functional atm

[05:55] <tylercurtis> ISTR someone having an at least somewhat working demo.

[05:56] <snarkyboojum> cxreg: ah cool - seem the input field is currently disabled

[05:56] <snarkyboojum> seems*(

[06:01] * tylercurtis wonders if it's a mistake to attempt to parallel the naming conventions of the DTD in his HTML library.

[06:01] * tylercurtis wonders if it's even possible to use "naming conventions" to describe the HTML 4.01 Strict DTD without being a liar.

[06:04] <tylercurtis> There's ALLCAPS, CamelCase, Firstlettercapitalized alllowercasescrunchedtogether, separated-by-hypens, separated.by.dots... Probably some more I'm forgetting.

[06:10] *** uniejo joined
[06:16] <moritz_> in first approximation, everybody is a liar

[06:19] <szabgab> hi moritz_ 

[06:19] <moritz_> hi szabgab 

[06:20] <szabgab> so what about that web interface for the evalbot?

[06:20] <szabgab> can I help with it to make it live?

[06:20] <moritz_> szabgab: I hope so :-)

[06:20] <szabgab> what is its status?

[06:20] <moritz_> szabgab: cygx++ implemented all the backend logic, but so far nobody plugged it into the front end

[06:21] <szabgab> oh I can try to do that

[06:21] <szabgab> what is the backend?

[06:21] <snarkyboojum> moritz_: am happy to lend a hand if I can be of assistance too :)

[06:21] <moritz_> snarkyboojum: look at http://github.com/moritz/try.rakudo.org/

[06:21] <moritz_> and szabgab too

[06:21] <moritz_> there's an architecture.svg that tries to explain the structure

[06:22] <moritz_> and a DESIGN_BACKEND file, which is probably more accurate

[06:22] <moritz_> huh

[06:22] <moritz_> it seems that cygx didn't commit all his stuff :(

[06:23] <szabgab> so is this listening on some socket that is not 80 right?

[06:23] <moritz_> ah, it's on feather3 in ~cygx/try-rakudo/

[06:24] <moritz_> szabgab: yes

[06:24] <szabgab> and the client would connect to that socket, send in some code, get a session id and then the connection is closed

[06:24] <moritz_> the client connects to the CGI script

[06:24] <moritz_> which then connects to the socket

[06:24] <szabgab> then later the client should poll the server?

[06:25] *** chee left
[06:25] <moritz_> yes

[06:25] <szabgab> ok so the client sends in standard GET or POST request?

[06:25] <moritz_> yes

[06:25] <szabgab> and is that part running already?

[06:25] <moritz_> yes, but not with the code in the repo...

[06:26] <moritz_> just a sec

[06:26] <moritz_> http://try.rakudo.org/try-rakudo.tar.gz

[06:26] <moritz_> that's the current backend code

[06:26] <moritz_> feel free to dump it into the repo

[06:26] <szabgab> I'd prefer to talk to the eral backend on the server :)

[06:27] <moritz_> 'eral'?

[06:27] <moritz_> 'real'?

[06:27] <szabgab> real

[06:27] <szabgab> http://try.rakudo.org:8090/ seems to give me an id

[06:28] <mberends> cxreg: pulled  your Zavolaj patch, verified it and pushed to jnthn/zavolaj :-)

[06:28] <moritz_> szabgab: do you want an account on the development machine?

[06:28] <szabgab> I think I had an account on fether

[06:28] <szabgab> but I don't even remember its address

[06:30] <cxreg> mberends: sweet

[06:30] <szabgab> moritz_: so which is the development machine?

[06:31] <moritz_> szabgab: feather3

[06:31] <szabgab> full name?

[06:31] <moritz_> feather3.perl6.nl

[06:31] <szabgab> ty

[06:31] <moritz_> try.rakudo.org :-)

[06:31] <cxreg> mberends: turned out to be pretty simple :)

[06:32] <tadzik> moritz_: might giving me some tips about File::Find? The P5 version passes no arguments to the callback function, and the file info can be accessed via some global variables. Can it be just passing a hash in Perl6 version?

[06:32] <cxreg> mberends: the trickiest part was learning that you can't store pir::null__P() in a variable and then use it

[06:32] <moritz_> tadzik: sure. Or just the file name as first param

[06:32] <mberends> cxreg: yes, surprisingly elegant. nice work!

[06:33] <tadzik> moritz_: I currently pass the whole path, and I wonder whether it's important to give anything else. P5 version gives, via those variables, a path without a final name, a final name, and a full path with a filename. Weird, imho

[06:34] <moritz_> tadzik: a good solution would be to pass in an object which stringifies to the full name, and has accessors for the filename too

[06:34] <szabgab> moritz_: you you pls check if there is a user called gabor or szabgab there?

[06:34] <szabgab> oh I see it now

[06:34] <moritz_> szabgab: created a new one (feather != feather3), see /msg

[06:35] <tadzik> moritz_: maybe… but wouldn't creating an object be an overkill for such a simple task? Or maybe not. How do you think? These objects won't live in memory for long anyway

[06:35] *** au|afkForReal is now known as au|irc

[06:37] *** molaf left
[06:37] *** paul1234 left
[06:38] <moritz_> tadzik: the alternative would be to use contextual variables

[06:39] <tadzik> contextual variables?

[06:40] <moritz_> rakudo: sub f { say $*x }; my $*x = 3; f()

[06:40] <p6eval> rakudo d1cd71: OUTPUT«3␤»

[06:40] <moritz_> it looks up in the call chain

[06:40] *** meppel is now known as meppl

[06:41] *** eternaleye_ left
[06:42] <tadzik> I think I'll go for objects, they're quite common in Perl 6 as I see. But out of curiosity, in which synopse can I read about those contextual vars?

[06:43] <cxreg> moritz_: is that much like a dynamic variable in perl 5?

[06:44] <au|irc> it's now known as dynamic variables in perl6 too...

[06:45] <cxreg> tadzik: to read about that in perl5, perldoc perlsub | less -p '   Temporary Values via'

[06:46] <au|irc> tadzik: in S02, look for C<DYNAMIC> which talks about the * twigil :)

[06:47] <au|irc> (and "temp", which is like perl5's "local")

[06:48] <tadzik> intereseting

[06:48] <cxreg> incidentally, (less -p)++

[06:49] <au|irc> wow, learns something new every day. cxreg++ :)

[06:50] <szabgab> it seems that ever call to http://try.rakudo.org:8090/ gives me the same session ID

[06:50] <cxreg> szabgab: C is for Cookie

[06:51] <cxreg> or not, i deleted mine and still got the same one

[06:52] <cxreg> unless '2521d99fd2fb58f4' means 'empty session'

[06:52] <moritz_> [Coke]++ # release

[06:52] *** mulander joined
[06:53] <moritz_> hugme: add szabgab to try.rakudo.org

[06:53] * hugme hugs szabgab. Welcome to try.rakudo.org!

[06:53] <cxreg> moritz_: it's like wildlfe research; tag and release

[06:54] <szabgab> ty moritz_ but I am not sure what to do with it:)

[06:54] *** mulander left
[06:54] * sorear returns from walk with a much better understanding of p6 packages

[06:54] <szabgab> first I wanted to try a command line client for that back-end

[06:54] <tylercurtis> .u smiling face

[06:54] <phenny> U+263A WHITE SMILING FACE (☺)

[06:54] <szabgab> maybe wrapped in perl 5

[06:55] <szabgab> so people could integrate it into their IDE...

[06:55] <cxreg> sorear: a vision quest of sorts?

[06:55] <szabgab> cxreg: so I tried  POST http://try.rakudo.org:8090/send?2521d99fd2c158f4

[06:55] <sorear> cxreg: of sorts.

[06:56] <szabgab> and ten typed in   42.say   and ctrl-d

[06:56] <szabgab> and no feedback received

[06:56] <sorear> pmichaud does them too, it really does help

[06:56] <cxreg> interesting

[06:57] <szabgab> cxreg: are you the same as cygx  or just similar letter?

[07:02] <cxreg> if that's a person, i'm not him

[07:03] <szabgab> as I understand that's the person who wrote the backend and has it in his(?) home dir on feather

[07:03] <cxreg> heh

[07:04] <cxreg> there's not enough hours in the day for me to have an alter ego

[07:06] <szabgab> with an alter ego you might be able to do twice as much work :)

[07:10] <cxreg> then i'd be like 1/3 of au|irc 

[07:13] *** MichaelRWolf joined
[07:14] * tadzik wonders if File::Find could be as powerful as find(1) one day

[07:16] * au|irc feels rather hexagonal :)

[07:17] *** ldd left
[07:18] <tylercurtis> moritz_: are you around?

[07:20] <moritz_> tylercurtis: more or less :-)

[07:20] <tylercurtis> moritz_: how does one submit a patch for Rakudo?

[07:20] *** mberends left
[07:20] <moritz_> tylercurtis: mailto:rakudobug@perl.org

[07:22] <cxreg> tylercurtis: 'Submitting patches' in the README describes the process

[07:22] *** zulon joined
[07:24] <moritz_> if it's something short-and-quick you can also nopaste patches here

[07:24] <zulon> hi!

[07:24] <moritz_> (with the risk of them getting lost in the noise (or signal) here)

[07:24] <moritz_> hi zulon 

[07:24] <cxreg> i'm fond of the github fork method :)

[07:24] <zulon> moritz_: I think I found a typo in your blog post

[07:25] <zulon>  $x max= 0;

[07:25] <zulon>  $x min= 10;

[07:25] <tylercurtis> moritz_: I may have cut the runtime of the script colomon and pmichaud were working on optimizing by about 50%(very unscientific measurement) on my box, at least. I'll run a spectest in the morning and submit the patch assuming it doesn't break and colomon doesn't do the same thing before then. 

[07:25] <zulon> shouldn't it be the opposite?

[07:25] <tylercurtis> zulon: no. $x max= 0; means that $x becomes whichever is greater of $x and 0.

[07:25] <zulon> oh, right

[07:25] <moritz_> zulon: no. When I want to cllip to the range of 0..10, I want -1 to result in 0

[07:25] <snarkyboojum> which blog post? :D

[07:25] <moritz_> so -1 max 0

[07:26] <zulon> yes, I'm stupid

[07:26] <zulon> sorry :)

[07:26] <moritz_> snarkyboojum: http://perlgeek.de/blog-en/perl-5-to-6/27-common-idioms.html

[07:26] <moritz_> zulon: I've made the same mistake too

[07:26] <moritz_> just a matter of experience

[07:26] <tylercurtis> zulon: That doesn't make you stupid. Or at least, I hope not.

[07:26] <snarkyboojum> moritz_: sweet - thanks

[07:26] * tylercurtis didn't get it immediately either.

[07:27] <moritz_> tylercurtis: I'm eager to see that patch :-)

[07:27] <mathw> Morning

[07:27] * snarkyboojum waits to hear moritz_'s accent doing a screencast of sorts for perl5 to 6 ;)

[07:27] <moritz_> tylercurtis: colomon++ did some tweaks shortly before the release; not sure if they are the same as yours

[07:28] <moritz_> snarkyboojum: which of mine? the German? or the false Scottish?

[07:29] <snarkyboojum> moritz_: hehe

[07:29] <snarkyboojum> when is TimToady doing his talk at OSCON?

[07:30] <snarkyboojum> is he doing a talk at OSCON?

[07:30] <frettled> is there an OSCON?

[07:30] <frettled> :)

[07:30] <frettled> moritz_: if you do a passable Connery impression, I'd love to hear it.

[07:31] <snarkyboojum> frettled: I thought OurGreatLeader was speaking there :P

[07:31] <tylercurtis> moritz_: no. Mine uses fdiv_n_n_n(which does work, unlike fdiv_i_i_i). On the plus side, it greatly simplifies infix:<div> and makes it look like most of the other (Int, Int --> Int) infixes. I mentioned it to colomon before, so he might end up commiting it, but in case he for some reason doesn't, I thought I should submit a patch. Besides, it's an excuse to get my name in the release announcement for next month. ;)

[07:33] * tylercurtis ==> sleep # will spectest and submit patch in slightly later morning.

[07:34] *** tylercurtis left
[07:43] *** baest joined
[07:45] <snarkyboojum> sorry to belabour a point, but where will the state of the onion address for 2010 be accessible?

[07:45] <tadzik> how about adding Term::ANSIColor to http://wiki.github.com/rakudo/rakudo/whats-going-into-rakudo ?

[07:49] *** mberends joined
[07:52] <moritz_> +1

[07:56] *** d4rt joined
[07:56] *** d4rt left
[07:57] *** dumdum joined
[07:57] *** d4rt joined
[07:58] <dumdum> rakudo: say 42

[07:58] <p6eval> rakudo d1cd71: OUTPUT«42␤»

[07:58] <dumdum> rakudo: say 42 "more"

[07:58] <p6eval> rakudo d1cd71: OUTPUT«===SORRY!===␤Confused at line 22, near "say 42 \"mo"␤»

[08:01] *** dumdum left
[08:02] *** au|irc is now known as au|afk

[08:05] <moritz_> rakudo has less-than-awesome error messages for two terms in a row

[08:06] *** zulon left
[08:06] <szabgab> I think I'll try to make a screencast to show people how to use the IRC channel ad the evalbot

[08:07] <mathw> Like, not flooding the channel with evalbot experiments?

[08:07] <moritz_> or like, flooding the channel with evalbot experiments? :-)

[08:07] *** MichaelRWolf left
[08:07] <szabgab> I'll also show how to do it in a private channel

[08:07] <moritz_> on the channel you don't see that people also /msg the evalbot

[08:07] <moritz_> ight

[08:08] <moritz_> r

[08:08] <szabgab> but the question will the server manage it?

[08:08] <moritz_> we will see :-)

[08:08] <moritz_> it's worth a trial

[08:08] <szabgab> let's try it

[08:08] <tadzik> szabgab: what was your audience last time (views)?

[08:09] <szabgab> 876 - 207 - 111 - 60

[08:09] <szabgab> for the 4 parts

[08:10] <moritz_> rakudo: say [+] 876, 207, 111, 60

[08:10] <szabgab> the last one was uploaded 12 hours ago

[08:10] <tadzik> so a few dozens more users of the evalbot, where the new users will most probably issue loads of requests

[08:10] <p6eval> rakudo d1cd71: OUTPUT«1254␤»

[08:10] <szabgab> rakudo: say [*] 876, 207, 111, 60

[08:10] <p6eval> rakudo d1cd71: OUTPUT«1207671120␤»

[08:10] <szabgab> rakudo: say [**] 876, 207, 111, 60

[08:10] * moritz_ runs an upgrade on feather3

[08:10] <p6eval> rakudo d1cd71: OUTPUT«Inf␤»

[08:10] <moritz_> don't be surprised if things work funnily for a while

[08:11] <moritz_> Get:1 http://ftp.us.debian.org sid/main libc-bin 2.11.2-2 [704kB]

[08:11] <moritz_> Get:2 http://ftp.us.debian.org sid/main libc6 2.11.2-2 [3,877kB]

[08:11] <tadzik> yay, every day is a new-perl6-post-on-reddit day

[08:11] <moritz_> that's a good start :-)

[08:12] *** charsbar_ joined
[08:12] *** xabbu42 joined
[08:13] <tadzik> moritz_: is there a perfectly POD-documented module to be inspired with?

[08:13] <moritz_> tadzik: I have no idea. masak++ might know

[08:13] <tadzik> masak is absent, sadly :)

[08:13] *** justatheory joined
[08:14] <moritz_> I know. He usually shows up during the day, though

[08:14] <tadzik> in what timezone does he live?

[08:14] <snarkyboojum> tadzik: nice alliteration :p 'perfectly POD-documented'

[08:14] *** pjcj left
[08:14] *** dimid_ left
[08:14] <moritz_> UTC+2 (central europe)

[08:14] <tadzik> triple P

[08:14] *** Tene left
[08:15] <tadzik> could be a badge in proto :)

[08:15] *** charsbar left
[08:15] *** Tene joined
[08:15] *** Tene left
[08:15] *** Tene joined
[08:15] *** dimid joined
[08:15] <tadzik> so, what nifty modules would be nice to have in R*?

[08:15] *** pjcj joined
[08:16] *** justatheory left
[08:16] <moritz_> all nifty modules, please :-)

[08:16] * moritz_ wants LWP-Simple

[08:16] <moritz_> and MiniDBI

[08:16] <moritz_> and a ponie!

[08:16] <tadzik> they're alredy on a list

[08:17] <tadzik> hmm, Acme::Ponie would be a nice Cake for R*

[08:17] <tadzik> it should be able to do everything

[08:17] <tadzik> and more

[08:17] <moritz_> a libjustdoit wrapper, via zavolaj!

[08:21] <tadzik> Net::FTP would be nice. Do we have binary stuff working yet?

[08:21] <moritz_> ask masak :-)

[08:21] <tadzik> file writing and stuff

[08:21] <tadzik> :)

[08:21] *** daxim joined
[08:21] <moritz_> mostly, yes

[08:21] <tadzik> maybe some Term::Progressbar?

[08:21] <moritz_> I think it would benefit from a real-world application (the binary stuff)

[08:22] *** kst left
[08:22] <tadzik> or rather a real-world application would benefit from binary stuff

[08:23] <moritz_> every thing that's implemented is usually fragile at first, but the tests only cover some usage patterns

[08:23] <moritz_> so only real-world application and bug reports lead to it working nicely

[08:23] *** kst joined
[08:23] <tadzik> hmm, that's right

[08:23] <sorear> isn't the whole point of R* to attract real world applications to stuff that they would benefit?

[08:24] <moritz_> sorear: that's right

[08:24] *** Eevee left
[08:24] <moritz_> sorear: but if we have more stuff working, we'll get error reports on a wider front

[08:24] *** aesop joined
[08:24] <moritz_> so, more benefit here

[08:24] *** Eevee joined
[08:24] <tadzik> benefits lead to another benefits \o/

[08:25] <Raynes> I read that as "benefits lead to friends with benefits \o/"

[08:25] <Raynes> Had to double-take.

[08:26] *** tadzik left
[08:28] <sorear> mberends: How would you feel about vill being moved from src/perl6 to src/ ?\

[08:29] <sorear> mberends: for niecza, and any future project seeking to track STD, I'm wanting src/perl6 subcheckouts to be as lightweight as possible

[08:30] *** pugssvn left
[08:30] *** pugssvn joined
[08:31] *** sorear sets mode: +v pugssvn

[08:31] *** lestrrat is now known as lest_away

[08:33] *** xinming joined
[08:36] <mberends> sorear: vill should probably move to a git repo anyway. Will do that soon.

[08:37] <daxim> ⟫Ö⟪ giant camelia

[08:38] *** dakkar joined
[08:46] <patrickas> good morning perl6!

[08:48] <mathw> hi patrickas

[08:48] <patrickas> mathw o/

[08:49] *** pmurias joined
[08:50] <pmurias> sorear: why not use the STD on CPAN?

[08:50] <pmurias> sorear: i'll add what you need and there will be no need to checkout STD

[08:52] <sorear> pmurias: a stable extension API and the ability to do automatic installs tracking changes to a STD_REVISION file

[08:53] * sorear wonders if local::lib will help

[08:53] *** kst left
[08:53] <pmurias> automatic installs tracking changes to a STD_REVISION file? explain

[08:54] <sorear> TimToady++ regularly makes breaking changes to STD

[08:54] <sorear> having a STD_REVISION file allows me to track STD at my own pace

[08:54] <sorear> I have Makefile rules to automatically download and build STD whenever _REVISION changes

[08:55] <pmurias> you want to avoid changes that break STD or change the AST format a bit?

[08:56] <sorear> the latter

[08:56] *** mac joined
[08:56] <mac> hi

[08:56] <sorear> Hello, mac

[08:56] <sorear> Welcome

[08:56] <sorear> pmurias: also, occasionally the language spec gets changed, like when YOU_ARE_HERE became {YOU_ARE_HERE}

[08:57] <pmurias> had to fix that one recently

[08:57] <sorear> that required modifications to the niecza setting and compiler

[08:57] <sorear> having explicit revision tracking means that I can update and fix in the same commit

[08:57] <sorear> and the evalbot never breaks

[08:58] <pmurias> if you want to make niecza installable you will either have to prefix your STD like Niecza::STD or use the CPAN one

[08:59] <sorear> I don't plan to make niecza installable from CPAN

[08:59] <pmurias> why not?

[08:59] <sorear> using Perl 5 is strictly a bootstrapping stunt for me

[08:59] <sorear> my #1 goal is to be able to compile STD.pm6

[09:00] * pmurias is not very keen on bootstrapping

[09:01] <sorear> well, the entire compiler exists because I became frustrated with how inefficient viv/Cursor is

[09:07] <pmichaud> good morning, #perl6

[09:07] <moritz_> good morning, pmichaud 

[09:07] <mac> morning? huh ;)

[09:07] <sorear> good * pmichaud

[09:07] <mac> Some of us have to wake up a "little" earlier;)

[09:07] *** DemoFreak left
[09:07] <frettled> or just good pmichaud :)

[09:07] <sorear> mac: did we scare you away?

[09:07] <moritz_> frettled: like in China, where you say "ni hao", "you good" :-)

[09:07] <frettled> moritz_: yes, exactly!

[09:07] *** Mowah joined
[09:07] <pmurias> TimToady: what can i rename to/prefix with LazyMap, Cursor, Actions so i don't get an UNAUTHORIZED release marker on CPAN

[09:07] *** jnthn left
[09:07] *** jnthn joined
[09:08] <mac> No, sorear, in spite of I feel fine 

[09:08] *** DemoFreak joined
[09:08] <moritz_> it's always morning *somewhere*

[09:09] *** _sri joined
[09:11] <pmichaud> I've posted the release announcement to rakudo.org.  Coke++

[09:12] *** broquaint joined
[09:12] <daxim> what's the included book?

[09:13] <moritz_> daxim: "Using Perl 6"

[09:13] <daxim> url?

[09:13] <moritz_> not quite finished yet :/

[09:13] <moritz_> http://github.com/perl6/book/

[09:13] <daxim> thanks

[09:14] <pmichaud> hugme tweet rakudoperl Rakudo #31 "Atlanta" released:  http://rakudo.org/node/74

[09:14] * hugme hugs pmichaud; tweet delivered

[09:15] <pmichaud> hmm, I probably should've included "#perl6 #rakudo"  in that tweet.

[09:15] * pmichaud is still trying to get the hang of twitter

[09:15] <moritz_> it's the first release where I'm truely convinced that it's better than alpha, for nearly all applications

[09:16] * sorear is somewhat suprised there wasn't a fork

[09:16] *** patrickas left
[09:17] *** patrickas joined
[09:17] <moritz_> what kind of fork? that continued developing alpha?

[09:17] <sorear> yes

[09:17] *** a3r0 joined
[09:17] <pmichaud> alpha had lots of issues -- in many ways it had reached the end of being a useful development line

[09:18] <pmichaud> also, it was based on PGE, which didn't have protoregexes

[09:18] <pmichaud> (still doesn't)

[09:19] <sorear> PGE is still maintained?

[09:19] <pmichaud> not really

[09:19] <moritz_> it's mostly unbroken when a parrot change breaks it

[09:19] *** _macdaddy left
[09:20] <moritz_> I wouldn't exactly call that maintenance :-)

[09:21] <pmichaud> time for a bit more sleep here -- bbl

[09:22] <sorear> ok, so it's as maintained as pugs

[09:24] *** patrickas left
[09:26] <daxim> .[ ^10 ];   # 10 most common words    -   where is the circumflex piece of syntax explained

[09:26] <moritz_> daxim: S03. Search for "upto"

[09:26] <pmurias> sorear: who would want to hack on a dead-end branch of rakudo?

[09:26] <avar> are there pre-built pdfs of the p6 book available somewhere?

[09:26] <moritz_> avar: yes, in the download section

[09:27] <moritz_> they don't have the latest markup improvements, though

[09:27] <avar> ah, from -06, seems a bit old :)

[09:27] <moritz_> avar: pmichaud++ volunteered for making a release this month

[09:29] <pmurias> moritz_: would it be difficult to make automatic pdf builds of the book?

[09:29] <sorear> pmurias: I was under the impression that point was highly contested

[09:30] <moritz_> pmurias: currently it's difficult to build, because it has quite some requirements on installed latex packages, tools and fonts

[09:32] <sorear> What is the full set of psuedo packages that are legal after CALLER::?

[09:33] <sorear> just OUTER, UNIT, SETTING?

[09:33] <pmurias> CALLER::CALLER?

[09:33] <moritz_> CALLER:: too

[09:34] <sorear> only those 4?

[09:34] <sorear> ok

[09:34] <moritz_> not sure

[09:34] <moritz_> there are always surprises in Perl 6

[09:34] <moritz_> I wonder if there should be a syntax for declaring pseudo packages

[09:36] * mathw wonders why he's in the list of contributers to the Rakudo release

[09:36] *** wamba joined
[09:36] <Juerd> Of course. Colon, star, or backtick?

[09:36] <a3r0> I think Rakudo logo had better be modified,Japanese Shrine's gate is too religious and give a reluctant feeling to those who live in the country which was one of the japanese colony in the past..

[09:37] <a3r0> like korea, china ,tiwan...

[09:37] <moritz_> a3r0: are you talking of personal experience, or general sentiment?

[09:37] <a3r0> i think it's general sentiment.

[09:37] <a3r0> if we make t-shirt which contains shrine's gate.

[09:37] <moritz_> mathw: if you were ++'ed in one of the commit messages, you are mentioned

[09:37] <a3r0> I can't wear it in korea.

[09:38] *** patrickas joined
[09:38] <moritz_> mathw: like, for mentioning that something's missing in a commit, spelling mistakes, LTA error messages or so :-)

[09:38] <a3r0> It's like nazi mark in Europe.

[09:38] <mathw> moritz_: maybe it was a bug I spotted or something

[09:41] <moritz_> a3r0: it's new to me that it's that bad... do you have a link to something that describes the cultural resentments more deeply?

[09:42] <a3r0> http://en.wikipedia.org/wiki/Yasukuni_Shrine

[09:44] <a3r0> http://www1.voanews.com/korean/news/a-35-2005-10-17-voa2-91204419.html?moddate=2005-10-17

[09:45] <pugssvn> r31791 | sorear++ | [S02] Move CALLER:: to the "reserved anywhere in a name" section, because CALLER::CALLER:: is explicitly described. 

[09:46] <moritz_> buu: seen JimmyZ

[09:46] <moritz_> sorry

[09:46] <moritz_> buubot: seen JimmyZ

[09:46] <buubot> moritz_: I don't think I've seen JimmyZ.      

[09:46] <moritz_> useless bot

[09:46] <frettled> a3r0: I fail to see the connection.  The links you gave are regarding a specific disputed shrine, not about Japanese logotypes representing (or not representing) a shrine being a general problem.  Or have I missed your point?

[09:47] *** lest_away is now known as lestrrat

[09:48] *** lestrrat is now known as lest_away

[09:49] <a3r0> Japan forced to go and worship the shirine to japanese colony countries.

[09:50] <moritz_> it's also curious that so far nobody from said countries complained

[09:50] *** pat__ joined
[09:50] <frettled> moritz_: it might be a generational thing

[09:51] <moritz_> neither JimmyZ from China, nor au|afk from Taiwan (iirc)

[09:52] <sorear> I'd be suprised if JimmyZ was the only one

[09:53] <moritz_> right; but it's the one I explicitly remember as being from China :-)

[09:53] *** patrickas left
[09:56] *** envi^home joined
[09:58] *** JimmyZ joined
[09:59] <frettled> a3r0: What I don't understand is the connection between the Rakudo logo and what you're talking about.  There's something missing, something that can explain to me how that logo is offensive.  I understand that Japan's actions before, during, and after WW II have been reprehensible to many people in greater Asia, which is what your links also essentially tell a part of the story of.  But what's the direct connection?  You say it's like "the nazi mark" ...

[09:59] <frettled> ... (I suppose you mean the black swastika on a white circle on a red flag), but I want to know _how_ it is like that.

[09:59] <JimmyZ> Hi~~

[10:00] <moritz_> hi JimmyZ; if you backlog a few minutes, you might find an intersting discussion

[10:00] * frettled feels mostly clueless regarding that part of cultural history.

[10:01] *** zulon joined
[10:03] * frettled goes for chocolate cake.

[10:04] <JimmyZ> xingming has been being here since 2005, he was from china 

[10:04] * moritz_ had some hazelnut cake already. Very tasty.

[10:05] <moritz_> JimmyZ: do you have any bad feelings towards the Rakudo logo?

[10:05] <JimmyZ> Nope

[10:06] <JimmyZ> 乐土 is chinese :)

[10:06] <a3r0> korean think shrine == militarism.

[10:07] *** gbacon joined
[10:07] <JimmyZ> and I like the door, hehe

[10:07] *** hanekomu_9 joined
[10:08] <sorear> here in the USA, which never was a Nazi colony, you don't even need the white circle and the red flag

[10:08] <sorear> the swastika alone is enough to get you spat on in the streets

[10:09] <moritz_> same here (obviously)

[10:09] <moritz_> it's weird for Germans to travel to India, where it's still used in its original context :-)

[10:09] <sorear> no similar situation exists with temple iconography, despite the fact that the Japanese came much closer to occupying US territory than the Germans ever did

[10:10] <a3r0> http://rki.kbs.co.kr/english/korea/korea_history_con81.htm

[10:10] <a3r0> http://rki.kbs.co.kr/images/img_history/8-2obliterate-religion.jpg

[10:10] <a3r0> In order to obiliterate religion among Koreans, Japan built a shrine on Mt. Namsan in Seoul in 1920. All Koreans were forced to visit the shrine to worship the Japanese emperor and the Gods idolized by the Japanese people.  

[10:10] *** Sanitoeter left
[10:11] *** zulon left
[10:12] *** hanekomu_9 left
[10:12] <a3r0> i hope this article would be a good reason to modify.

[10:14] <moritz_> in the end it's pmichaud's call

[10:14] *** Velvet joined
[10:15] *** hanekomu_9 joined
[10:15] *** hanekomu_9 left
[10:15] <sorear> does $MY::x do a full lexical scope, hitting outers too?

[10:17] *** a3r0 left
[10:20] *** Sanitoeter joined
[10:20] <pmurias> sorear: is it ok if i rename LazyMap,Action,Cursor to STD::LazyMap...

[10:20] <pmurias> ?

[10:24] *** gbacon left
[10:27] *** tadzik joined
[10:29] <sorear> pmurias: you're asking the person who originally proposed it.  of course it's ok with me

[10:29] <sorear> it's TimToady who might (already has) object(ed)

[10:31] *** azert0x joined
[10:31] *** JimmyZ left
[10:32] *** masak joined
[10:32] <masak> oh hai, #perl6!

[10:32] <phenny> masak: 01:26Z <tadzik> tell masak you forgot to bold the Operator Overloading section

[10:32] <phenny> masak: 01:28Z <au|irc> tell masak great blogpost :) looks like use.perl ate the <...> in infix:<...> as markup, though

[10:32] *** au|afk is now known as au|irc

[10:32] <masak> tadzik, au: thanks. fixed.

[10:32] <masak> <JimmyZ> and I like the door, hehe

[10:32] <masak> LOL

[10:33] <masak> interesting question about cultural associations and WWII.

[10:34] <au|irc> .u 100DC

[10:34] <phenny> au|irc: Sorry, no results for '100DC'.

[10:34] <au|irc> hm. it's the closest I can get to a shrine in unicode :)

[10:36] <au|irc> well, the rakudo.org artwork is specifically a Shinto shrine, so I can see the WWII connection

[10:37] <au|irc> otoh, it's a nice diversity from the general Judeo-Christian vocabulary that perl uses :)

[10:37] <masak> I've always felt Rakudo's logo to be a bit austere, especially next to the colorsplosion that is Camelia.

[10:37] <au|irc> I like it, fwiw; it has that minimal Zen feel

[10:39] <masak> huh -- release announcement was sent to parrot-dev, p6l and p6u -- but not to p6c. :)

[10:39] <szabgab> I thought it was a gate but now I see it is a shrine,    a gate to heaven?

[10:39] *** zulon joined
[10:39] <masak> oh well, [Coke]++

[10:39] <au|irc> szabgab: a gateway to the Perfect Language

[10:40] <au|irc> which, as per S01, is defined as Perl 7 :)

[10:40] *** |Velvet| joined
[10:42] <jnthn> o/

[10:42] <au|irc> o ̷

[10:43] <jnthn> [Coke]++ # release...I fell asleep before it happened :-)

[10:43] <szabgab> o _

[10:43] *** Velvet left
[10:43] <jnthn> cxreg: What's your github id?

[10:44] <szabgab> another gate: http://hu.wikipedia.org/wiki/Székelykapu

[10:46] <au|irc> nice geometric constrast

[10:46] <au|irc> *contrast

[10:46] <colomon> can we check in patches yet?

[10:46] <colomon> errr, push commits?  ;)

[10:46] *** daxim left
[10:47] <jnthn> colomon: Would seem so. Our only extra constraint is that we can't bump PARROT_REVISION until the 30th. :-)

[10:47] <colomon> will we cut another release of Rakudo for R*?

[10:47] <masak> that's an odd constraint :)

[10:48] <mathw> because R* has to be based on a released version of Parrot

[10:48] *** |Velvet| left
[10:48] <jnthn> colomon: I somewhat suspect so. For example, we really want a fix for the roles + settings issue in R*.

[10:49] <jnthn> colomon: And I didn't manage to get that into this release. :(

[10:49] <jnthn> (er, yesterday's relesae)

[10:49] *** Velvet joined
[10:50] <colomon> I've got a patch based on tylercurtis's work last night which should make current Rakudo twice as fast as Kiev for that script we were working on optimizing yesterday.

[10:52] <jnthn> colomon: Nice

[10:52] <jnthn> colomon: So long as it doesn't need a Parrot revision bump, it's fine (and welcome :-)).

[10:52] <colomon> tylercurtis++ did all the heavy lifting, I just put it together nicely.

[10:53] <colomon> pushed

[10:53] *** Velvet left
[10:53] *** Velvet joined
[10:53] <masak> the trolls have joined the party. http://www.reddit.com/r/programming/comments/csrog/6_builtins_in_perl_6_that_you_never_knew_you/ -- give it a day or so, and the good guys'll show up, too.

[10:54] <colomon> there are good guys on reddit?  ;)

[10:54] <masak> moritz_, chromatic...

[10:54] <dalek> rakudo: bc3e181 | (Solomon Foster)++ | src/core/Int.pm:

[10:54] <dalek> rakudo: Reimplement infix:<div> to use pir::fdiv.  tylercurtis++.

[10:54] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/bc3e1810ec19fdcd7d88fe6b651fc57101329e72

[10:55] * masak realises he shouldn't keep a list of The Good Guys in one easy-to-find place :)

[10:55] <au|irc> masak: "map { $_ * $_ }, (1 ... *)" needs the parens :)

[10:56] <masak> oh dear. yes.

[10:56] * masak fixes

[10:56] <frettled> moritz_: Ah, well, at least nobody elected to use the Norwegian flag, which would offend a lot of moslems.  :)

[10:56] <colomon> au|irc: it's great to have you back with us here.  :)

[10:57] <au|irc> colomon: it's great to be back with y'all here :)

[10:57] <frettled> moritz_: or the Swedish, in which case the Norwegians would be offended, right, masak?  ;)

[10:57] <masak> frettled: I have no ideas what offends you wusses over there. :P

[10:58] <colomon> au|irc: you gave me my commit bit back in 2005 or so.  I tweaked a thing or two, then ignored it for four years.

[10:58] <sorear> it's great to have au here *period*

[10:58] <sorear> we're dangerously close to a critical mass of optimism

[10:59] <TiMBuS> aw masak, you used the 'map' version instead of my genius solution

[10:59] <au|irc> colomon: ah. good things that commit bits, unlike cookies, don't expire...

[10:59] <masak> frettled: by the way, I spent a week in Värmland. it's so close to the Norwegian border, that one feels the influence of the language and the culture. I picked up a few Norwegian words.

[10:59] <colomon> au|irc: :)

[10:59] <sorear> au|irc: be careful what you wish for, I've had cookies without expiration dates before, they aren't all that great

[10:59] <masak> TiMBuS: simplicity. your version was nice, though.

[10:59] <TiMBuS> lol

[11:01] <frettled> masak: oh noes!

[11:01] <masak> I also feel like a "did nothing for four years" person. my biggest contribution in the Pugs era was trying, and failing, to port CPAN's Getopt::Long.

[11:02] <frettled> :)

[11:02] <sorear> I first payed attention to Perl 6 in Mar or Apr 2010

[11:02] <colomon> my biggest contribution was noting that array reference via [ ] was O(N^2).  (That was the very early days of Pugs!)

[11:02] <frettled> my biggest contribution so far is joking in good humor on this channel ;)

[11:03] <au|irc> colomon: ah right, via sieve.p6

[11:03] <jnthn> I'm trying to remember what my first Pugs patch was. I think it was some copy-pastery that got the ASCII version of hyper-ops to parse as well as the unicode-y ones, which I was too lazy to work out how to type. :-)

[11:03] <au|irc> very early indeed

[11:03] <colomon> au|irc: just so.

[11:04] <masak> told you the D&D-ers would like it :P -- http://twitter.com/dotandimet/status/19329500141

[11:05] <masak> in other news, more than one name for anything confuses people: http://twitter.com/hiro_asari/status/19300163352

[11:05] <sorear> colomon: N^2 !?

[11:05] <sorear> that's worse than a theoretically optimal linked list

[11:06] <colomon> sorear: might have just be O(N) on each access.  it was a long time ago.

[11:06] <frettled> masak: all of those look like good PR to me

[11:06] <colomon> that would have made seemingly O(N) code O(N^2)

[11:06] * sorear wonders what his biggest contribution was

[11:06] <colomon> at any rate, it was very slow

[11:07] <au|irc> indeed. seeing it was my second haskell program, lack of proficiency in managing data structures can be assumed :)

[11:07] <jnthn> masak: They're all names for different things too. ;-)

[11:08] <masak> sorear: I have a question. what's the best point in viv to go in and pull out a hierarchical data structure, rather than output it to STDOUT? or is there a better script than viv for this?

[11:08] <masak> jnthn: tell me about it! if they were at least different names for the SAME thing, it's be slightly easier! :P

[11:09] <masak> this looks like good PR, as well: http://www.pcworld.com/article/201743/perl_creator_hints_at_imminent_perl_6_release.html?tk=rss_news

[11:09] <frettled> it almost looks like you're about to imminentize the escathon.

[11:10] <masak> isn't that the whole idea?

[11:10] <masak> "Apocalypse"... :)

[11:10] <sorear> masak: if you just want a tree, rather than deparsed output, viv is entirely dead weight

[11:10] <sorear> use STD.pm6 directly

[11:10] <au|irc> frettled: I see. so it's an Erisian Shrine and nobody would be offended. it all works out!

[11:10] <masak> sorear: oki. any example code somewhere for that kind of thing?

[11:10] <colomon> I like the "hints" there.

[11:10] <sorear> perl -MSTD -E 'say YAML::XS::Dump(STD->parsefile("foo"))'

[11:11] <masak> sorear++

[11:11] <masak> anyblag; I'm going offline now. going on a road trip with two friends. might not come back online today.

[11:11] <masak> o/

[11:11] <szabgab> finally a reddit conversation I could add my wealth of education

[11:11] *** masak left
[11:11] <au|irc> \o

[11:11] <frettled> au|irc: or everybody should be offended.  As you say, it all works out.  :D

[11:12] <au|irc> :)

[11:13] <frettled> szabgab: oh, nice :)

[11:21] *** screencast joined
[11:21] *** xinming left
[11:21] <screencast> hi , I am new to perl 6, I'll need some help !

[11:22] <screencast> can someone tell me how can I add two numbers and print to the screen

[11:22] <cono> rakudo: say 2+2

[11:22] <p6eval> rakudo d1cd71: OUTPUT«4␤»

[11:22] *** screencast left
[11:22] *** xinming joined
[11:22] <szabgab> crap

[11:23] <szabgab> I had to stop the recording :(

[11:23] <au|irc> nice irc performance art :)

[11:23] <szabgab> let me start again :)

[11:24] *** screencast joined
[11:25] <screencast> hi I am new to perl 6, I'll need some help from you

[11:25] <screencast> how can I add two numbers and print them to the screen?

[11:25] <au|irc> rakudo: 2+2

[11:25] <p6eval> rakudo d1cd71:  ( no output )

[11:25] <jnthn> rakudo: say 39 + 3

[11:25] <cono> :)

[11:25] <p6eval> rakudo d1cd71: OUTPUT«42␤»

[11:26] <au|irc> evidently, the "say" here is critical

[11:26] <jnthn> I'd say so.

[11:26] <au|irc> screencast: does that answer your question? :)

[11:26] *** zulon left
[11:26] <screencast> yes thank you

[11:27] <Juerd> Also, existing Perl 5 code like "print 2 + 2" still works :)

[11:28] <cono> rakudo: (2 + 2).say

[11:28] <p6eval> rakudo d1cd71: OUTPUT«4␤»

[11:29] <au|irc> rakudo: [+](2,2)

[11:29] <p6eval> rakudo d1cd71:  ( no output )

[11:29] *** screencast left
[11:29] <au|irc> rakudo: say [+](2,2) # sigh :)

[11:29] <p6eval> rakudo d1cd71: OUTPUT«4␤»

[11:29] <jnthn> or just 

[11:29] <jnthn> rakudo: say [+] 2,2

[11:29] <frettled> rakudo: say :13<6*9>

[11:29] <p6eval> rakudo d1cd71: OUTPUT«4␤»

[11:29] <p6eval> rakudo d1cd71: OUTPUT«===SORRY!===␤Malformed radix number at line 22, near "<6*9>"␤»

[11:30] * jnthn prefers it without the parens :-)

[11:30] <frettled> hmm

[11:30] <frettled> rakudo: say :13(6*9)

[11:30] <p6eval> rakudo d1cd71: OUTPUT«69␤»

[11:30] <szabgab> man , I have stage fright even when off-line recording :)

[11:30] <frettled> nooo :(

[11:31] <frettled> rakudo: :13(6*9).say

[11:31] <szabgab> let's see if it worked out in the recording well :)

[11:31] <p6eval> rakudo d1cd71: OUTPUT«69␤»

[11:31] <au|irc> rakudo: say 2 [[[+]]] 2

[11:31] <p6eval> rakudo d1cd71: OUTPUT«4␤»

[11:31] <au|irc> jnthn: cool, it works without the parens either way :)

[11:31] <pat__> au|irc : \o/

[11:31] <cono> rakudo: eval("2+2").say

[11:31] <p6eval> rakudo d1cd71: OUTPUT«4␤»

[11:32] <jnthn> au|irc: It does occur to me that with the [[[+]]] nesting, we actually do have an infinite number of ways to add two numbers together in Perl 6. :-)

[11:32] <cono> TMTOWDI

[11:32] <jnthn> TAINOWTDI

[11:33] <au|irc> TA∞WTDI

[11:33] <felliott> rakudo: "hello".chomp.trans.say

[11:33] <moritz_> just started reading the pcworld article, and noted that it links to perl6.org, not the old dev.perl.org/perl6/ thing. \o/

[11:33] <p6eval> rakudo d1cd71: OUTPUT«hello␤»

[11:33] <felliott> rakudo: "hello\n".chomp.trans.say

[11:33] <p6eval> rakudo d1cd71: OUTPUT«too few positional arguments: 1 passed, 2 (or more) expected␤  in main program body at line 22:/tmp/shV3pbU1mO␤»

[11:33] <frettled> rakudo: $x=6*9; :13($x).say

[11:33] <p6eval> rakudo d1cd71: OUTPUT«===SORRY!===␤Symbol '$x' not predeclared in <anonymous> (/tmp/VGEJIahW0b:22)␤»

[11:33] <jnthn> moritz_: Yes, I was happy to see it was in general linking to good stuff.

[11:33] <frettled> oh, drat, my

[11:33] <frettled> rakudo: my $x=6*9; :13($x).say

[11:33] *** pat__ is now known as patrickas

[11:33] <moritz_> felliott: that's a bug

[11:33] <p6eval> rakudo d1cd71: OUTPUT«69␤»

[11:33] <frettled> copy+paste is so nice when you forget.  hmm.

[11:33] <frettled> rakudo: my $x=6*9; :10($x).say

[11:34] <p6eval> rakudo d1cd71: OUTPUT«54␤»

[11:34] <felliott> moritz_: it seems to be a problem with Cool-str::substr and Any-list::join

[11:34] <cono> jnthn: what means TAINOWTDI?

[11:34] <frettled> Aha, I see what's going on, I confused the direction of the radix thingy.

[11:34] <jnthn> cono: There's An Infiniate Number Of Ways To Do It

[11:34] <cono> :D

[11:34] <jnthn> *Infinite

[11:34] <moritz_> felliott: if you can figure out how to patch it, that would be awesome

[11:34] <felliott> both return pir::<some string function>

[11:34] *** tadzik left
[11:34] <moritz_> right

[11:35] <jnthn> oh eww that bug

[11:35] <felliott> I have a guess, but I'm not entirely sure...

[11:35] <moritz_> maybe add a ~ in front?

[11:35] <moritz_> rakudo: say pir::substr__SSII('foobar', 1, 2)

[11:35] <p6eval> rakudo d1cd71: OUTPUT«oo␤»

[11:35] <moritz_> rakudo: say pir::substr__SSII('foobar', 1, 2).trans

[11:35] * jnthn adds this one to his list of "problems that go away when Rakudo stops using various Parrot PMCs as base classes for it's builtin types"

[11:36] <p6eval> rakudo d1cd71: OUTPUT«too few positional arguments: 1 passed, 2 (or more) expected␤  in main program body at line 22:/tmp/l8y45WPg8N␤»

[11:36] <felliott> mortiz_: yes

[11:36] <moritz_> rakudo: say (~pir::substr__SSII('foobar', 1, 2)).trans

[11:36] <felliott> I'm looking for a nopaste

[11:36] <p6eval> rakudo d1cd71: OUTPUT«oo␤»

[11:36] <moritz_> felliott: nopaste.snit.ch

[11:36] <felliott> If that's really the fix, we can close  #76564 and #71088

[11:37] <felliott> http://nopaste.snit.ch/22234

[11:38] <felliott> I've also pushed it to github: http://github.com/felliott/rakudo/tree/parrot_to_rakudo_str

[11:38] <moritz_> felliott: spectesting now with these changes

[11:38] <moritz_> felliott: if you want extra karma, you could make sure that we have tests for that in t/spec/integration/real-strings.t

[11:38] <felliott> with it, I was able to unfudge 6 tests from spec/integration/real-strings.t

[11:38] <felliott> :)

[11:38] <moritz_> ah :-)

[11:38] <felliott> good timing.

[11:38] <colomon> \o/

[11:38] <moritz_> no need for the parenthesis btw.

[11:38] <frettled> Am I missing something, or is there simply not a builtin for printing something in an arbitrary base?

[11:39] <felliott> Oh, thanks!

[11:39] <moritz_> frettled: I know that the other way is implemented

[11:39] <frettled> moritz_: automated conversion into base 10 is implemented, yes.

[11:40] <felliott> How should I submit a patch to the spec? Via rakudobug?

[11:40] <frettled> moritz_: for some reason, I thought the output would be in the same base as specified with the adverbial

[11:40] <moritz_> felliott: you mean for t/spec/?

[11:40] <felliott> yes

[11:40] <moritz_> felliott: just give me your email address (via private message if you prefer), and I can give you a commit bit. These tests are in the pugs repository.

[11:41] <felliott> okay, thanks!

[11:42] <moritz_> felliott: invitation sent (you might need to remove the port number from the confirmation URL though)

[11:43] <moritz_> I haven't found a way to remove it from the email template :(

[11:45] <felliott> moritz_: received!  thank you

[11:45] * sorear <3 testsuites

[11:46] <moritz_> felliott: fix pushed, thank you very much. I haven't waited for the spectests to finish, but I'm pretty certain it doesn't break anything :-)

[11:46] <sorear> hmm.  does perl 6 have unfolds?

[11:46] <felliott> I ran them overnight and didn't see any breakage

[11:46] * moritz_ is pretty proud of the spectests, even if he contributed only a tiny part of them

[11:47] <sorear> even niecza's tiny internal testsuite has already saved me a couple months of labor

[11:47] <sorear> so much subtle breakage caught by 'make test; leave terminal for a minute'

[11:48] <dalek> rakudo: 4bf6c0f | moritz++ | src/core/ (2 files):

[11:48] <dalek> rakudo: return Perl 6 strings from substr and join. Patch courtesy of felliott++

[11:48] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/4bf6c0f7bd4fe3be4df2f2f11a8d09147a172ad6

[11:49] <dalek> niecza: a10c69a | sorear++ |  (10 files):

[11:49] <dalek> niecza: Heavily refactor and improve the functionality of packages.

[11:49] <dalek> niecza: review: http://github.com/sorear/niecza/commit/a10c69a98031bd796cc4a0ef13e0a88cfae5eec5

[11:51] <frettled> perl6: my $x = 54; say :13($x);

[11:51] <p6eval> pugs, rakudo d1cd71: OUTPUT«69␤»

[11:54] <pugssvn> r31792 | felliott++ | unfudge P6 strings tests, add tests for join  & substr 

[11:55] <szabgab> not good, the recording, after I converted it to avi thinks that it is 17 min long

[11:55] <dalek> niecza: dc56884 | sorear++ |  (3 files):

[11:55] <dalek> niecza: Implement module as a synonym for package

[11:55] <dalek> niecza: review: http://github.com/sorear/niecza/commit/dc5688473eec1694723f3a2b27a6538186e690e9

[11:55] <sorear> Is it mandatory that Foo/Bar.pm contain a definition of Foo::Bar or Foo::Bar::* ?

[11:56] <moritz_> don't think so

[11:57] <au|irc> sorear: not from the spec, no. the EXPORTALL can then fail though if it's loaded via use

[11:58] <au|irc> but "need Foo::Bar" would work it seems

[11:58] *** wamba left
[12:01] *** tadzik joined
[12:02] *** snarkyboojum left
[12:08] *** felliott__ joined
[12:08] *** felliott left
[12:11] *** cognominal left
[12:13] *** cognominal joined
[12:13] *** kkrev left
[12:16] *** snarkyboojum joined
[12:17] *** kkrev joined
[12:17] <szabgab> the screencast did not come out well, 

[12:17] <szabgab> I hope you don't mind if I do it again

[12:17] <sorear> why would we

[12:18] *** tuxuday joined
[12:19] <au|irc> . o O ("rakudo: sleep 30; say 2+2")

[12:19] <moritz_> rakudo: sleep 30; say 2+2

[12:19] <p6eval> rakudo d1cd71:  ( no output )

[12:20] *** screencast joined
[12:20] * frettled attempted to phrase his stupidish radix/base question on p6l, maybe enlightenment is on the way.

[12:20] <screencast> hi I am new to perl 6 I'll need some help

[12:21] <screencast> how can I add two numbers and print to the screen?

[12:21] <jnthn> rakudo: say 37 + 5

[12:21] <p6eval> rakudo d1cd71: OUTPUT«42␤»

[12:21] <au|irc> hugme: hug screencast 

[12:21] * hugme hugs screencast

[12:22] <screencast> thank

[12:22] <au|irc> np. in #perl6 you'll get the answer to life, universe & everything, plus a hug :)

[12:24] *** pmurias left
[12:24] <moritz_> au|irc: in case it's not obvious, I wrote hugme after your "hug a troll" blog post :-)

[12:25] <au|irc> yeah, I know. I'm honoured.

[12:25] *** screencast left
[12:25] <moritz_> I was just looking for a funny name for the add-github-contributors thing

[12:26] <szabgab> ahhh

[12:27] <au|irc> moritz++ # hugtastic, as mst++ would say

[12:28] <moritz_> lol

[12:29] <frettled> au|irc: perhaps with a few more swearwords sprinkled around, for good measure

[12:29] *** takadonet joined
[12:30] <takadonet> morning all

[12:30] <frettled> hugme: hug takadonet 

[12:30] * hugme hugs takadonet

[12:31] <au|irc> frettled: very true, but that's what makes mst++ inimitable :)

[12:32] <takadonet> .... thanks :)

[12:32] <frettled> au|irc: yup, and I really like his style

[12:32] <frettled> …mostly for being refreshingly different

[12:33] <au|irc> =)

[12:37] *** snarkyboojum left
[12:38] *** Raynes- joined
[12:38] *** Raynes- left
[12:38] *** Raynes left
[12:39] *** Raynes joined
[12:41] * sorear has decided that {YOU_ARE_HERE} is just a really funny looking Whatever, and curries the entire module it's embedded in into a funny looking closure

[12:44] <moritz_> whatever. :-)

[12:48] <au|irc> . o O ( {Total_Perspective_Vortex} )

[12:48] *** patrickas left
[12:49] <sorear> translation: I now know *exactly* how to implement custom settings

[12:52] <takadonet> rakudo: my @a = <1 2 3>; say @a>>+2

[12:52] <p6eval> rakudo 4bf6c0: OUTPUT«===SORRY!===␤Missing << or >> at line 22, near "2"␤»

[12:53] *** patrickas joined
[12:56] <moritz_> rakudo: my @a = <1 2 3>; say @a>>+<<2

[12:56] <p6eval> rakudo 4bf6c0: OUTPUT«Sorry, sides are of uneven length and not dwimmy.␤  in 'hyper' at line 179:CORE.setting␤  in 'hyper' at line 211:CORE.setting␤  in main program body at line 1␤»

[12:56] <moritz_> rakudo: my @a = <1 2 3>; say @a>>+>>2

[12:56] <p6eval> rakudo 4bf6c0: OUTPUT«345␤»

[13:00] *** macroron joined
[13:05] <sorear> keline?

[13:06] <takadonet> moritz_: thanks :)

[13:07] <takadonet> rakudo:my @a=<1 2 3>;say @a>>.say

[13:07] <takadonet> rakudo: my @a=<1 2 3>;say @a>>.say

[13:07] <p6eval> rakudo 4bf6c0: OUTPUT«1␤2␤3␤111␤»

[13:07] <takadonet> is that a bug?

[13:08] <moritz_> doens't look like a bug to me

[13:08] <moritz_> what would you expect instead?

[13:08] <szabgab> as I can see there is a growing number of tweets marked with #perl6

[13:09] <au|irc> the screencasts is very effective :)

[13:10] <takadonet> was is it printing 111 at the end?

[13:10] <takadonet> s/was/why

[13:10] <moritz_> takadonet: you have two calls to say() in there

[13:10] <takadonet> ...

[13:10] <takadonet> moritz_:  I need a coffee

[13:10] <moritz_> takadonet: the .say method returns 1 for each array item

[13:10] <szabgab> au|irc: you mean we see hundreds already joining the channel ? :)

[13:11] <takadonet> moritz_: just ignore me please hehe

[13:11] <moritz_> 15:11 -!- Irssi: #perl6: Total of 191 nicks

[13:11] <moritz_> not too bad, if you ask me :-)

[13:11] <au|irc> szabgab: maybe "join us on #perl6" has a localized meaning on twitter :)

[13:11] <au|irc> (j/k, mostly)

[13:12] <szabgab> it has a certain self references

[13:12] <moritz_> http://corky.net/dotan/log/images/perl6-watchmen_a.jpg

[13:13] <moritz_> you can always ilnk to http://perl6.org/community/irc

[13:13] <au|irc> szabgab: I like the sound of your keyboard. it sounds like a real keyboard :)

[13:14] <szabgab> :)

[13:15] <moritz_> http://twitter.com/handraiser/status/19099769071 # I like this one

[13:18] *** zulon joined
[13:18] <[Coke]> (ugh. don't port File::Find to perl6!_

[13:18] <tadzik> why not?

[13:18] <[particle]> interface == suck

[13:18] <tadzik> the original one?

[13:18] <[particle]> try Class::Path or is it Path::Class

[13:19] <moritz_> isn't that something completely different?

[13:19] <tadzik> sounds so

[13:19] <frettled> But feel free to create something that a) works well and b) is a workable substitute for `find` ;)

[13:19] <[particle]> no, it's based on File::Find, without the brain-dead interface

[13:19] <tadzik> File::Find is like `find $where`

[13:19] <moritz_> wasn't that File::Find::Rule?

[13:20] <moritz_> [particle]: I think File::Find is a very useful directory iterator. It's just not what many people want

[13:20] <[particle]> there's also File::Find::Rule, which is somewhat better than F:F

[13:20] <frettled> Path::Class is nothing like File::Find

[13:20] <moritz_> frettled: iirc it's more like File::Spec, right?

[13:21] <frettled> It seems to be, yes, I've never really had a use for any of them.

[13:21] <[particle]> oops, yes, File::Spec. sigh, someone wake me up.

[13:21] <tadzik> http://github.com/tadzik/perl6-File-Find # now without the 'interface == suck' "get the data you want from some global variables"

[13:21] * moritz_ shakes some coffeine into [particle] 

[13:21] <[particle]> File::Find::Rule is the better interface to File::Find

[13:22] <au|irc> actually, dir('...')->recurse() is comparable to File::Find :)

[13:22] <[Coke]> (PGE) one version of partcl uses it, so it occasionally gets tested "in the real world", anyway.

[13:22] <au|irc> but F::F::R has a better interface, yeah.

[13:22] <tadzik> I was thinking about making File::Find something find(1) comparable

[13:22] <moritz_> tadzik: you shouldn't restrict $callback to Sub. Callable would be sufficient, I'd say

[13:23] <tadzik> which, as far as I can see, is File::Find::Rule. Any reason why not to merge this two and have one good module for Perl 6?

[13:23] <tadzik> moritz_: will fix, thank you moritz_++

[13:23] <moritz_> likewise there's no reason to restrict $dir to Str

[13:23] <[Coke]> 16:56 < patrickas> oh ok ...

[13:23] <[Coke]> 16:56 < Util> pmichaud, [Coke]: Thanks! Will push now

[13:23] <[Coke]> 16:56 <@pmichaud> (mostly affects Rat arithmetic)  yes, but a single / automatically puts you into the realm of Rat arithmetic.  :-)

[13:23] <moritz_> dir() will stringify its argument anyway

[13:25] <moritz_> tadzik: also a single multi sub find(&callback, *@dirs) could replace the one

[13:25] <frettled> Does F::F::R chdir() or not?

[13:25] <moritz_> it's configurable in the p5 File::Find

[13:26] <moritz_> to me it seems wrong to default to chdir()ing, because it's an application-wide process

[13:26] <frettled> yep

[13:26] <moritz_> and since you're calling a callback, that itself could chdir, and screw up everything else

[13:26] <moritz_> reentrance safety ftw!

[13:26] <frettled> I use F::F with no_chdir => 1, I was just wondering whether it was set to 0 or 1 in F::F::R, the docs don't say.

[13:27] <tadzik> moritz_: sounds sane, will apply

[13:27] * moritz_ calls it a day

[13:27] <PerlJam> moritz++   IMHO we are in the "what can we add?" phase, while we should be in the "what can we take away?" design phase.

[13:27] *** _macdaddy joined
[13:27] <frettled> But as long as our F::F does the sane thing, I'm happy.

[13:27] <PerlJam> good morning all

[13:27] <frettled> tadzik++ for bothering

[13:27] <frettled> PerlJam: \o

[13:28] <tadzik> frettled: hey, I'm sitting here all the time asking silly questions, it would be really impolite to give nothing in return :)

[13:28] <tadzik> also, what do you think of adding functionalities to File::Find instead of porting File::Find::Rule?

[13:30] <frettled> Since today is the first time I read about F::F::R, I'm not sure, hee-hee.

[13:31] <dalek> rakudo: 8c8b656 | Coke++ | docs/release_guide.pod:

[13:31] <dalek> rakudo: add perl6-compiler, which masak++ noted was missing.

[13:31] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/8c8b6569f0aeb5ff418eab6b17f1a2c24b56c54a

[13:31] <dalek> rakudo: b2af272 | Coke++ | src/core/ (3 files):

[13:31] <dalek> rakudo: Merge branch 'master' of github.com:rakudo/rakudo

[13:31] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/b2af272545f0f269144080d73004278e05185e69

[13:31] <tadzik> I was thinking that File::Find may eventually be something more powerful than just a tool to call a callback on all the files in a directory

[13:32] <frettled> I must admit that my use of File::Find has never been more than a Perl-internal way of handling find(1), rather than using a system call and processing that. 

[13:32] <[Coke]> urk. mispaste there for a few rows.

[13:33] <tadzik> now when I see File::Find::Rule I see that it's actually hell useful, and I think it won't hurt File::Find itself to have such an awesome stuff in it itself

[13:33] <[Coke]> My comment on file::find was just that i don't want to promulgate that interface anymore.

[13:33] <frettled> So, basically, my needs for a file finding module is to get a list of files (with full relative or absolute path spec), based on selection criteria.  With File::Find I often ended up sending the test to a subroutine, with F::F::R I might actually use the builtins.

[13:33] <tadzik> what interface?

[13:33] *** M_o_C joined
[13:34] <PerlJam> [Coke]++ amen to that

[13:34] <tadzik> you mean the variables, [Coke]?

[13:35] <[Coke]> I meant the whole thing. =-) but sure, the global variables are the worst.

[13:35] <frettled> I guess it's the hash references and function references.

[13:35] <[Coke]> ugh. I got a merge commit. how do I avoid that?

[13:36] <[Coke]> (maybe it'll look nicer in p6, Iunno)

[13:36] <tadzik> [Coke]: the globals are now gone and withdrew with much prettier Perl6 way

[13:36] * [Coke] with withold judgement until he sees the module then! =-)

[13:36] <[Coke]> s/with/will/

[13:36] <tadzik> so, any objections to extending the functionality of File::Find with the rules like in File::Find::Rule?

[13:36] <frettled> [Coke]: http://github.com/tadzik/perl6-File-Find

[13:37] <frettled> tadzik: no objections from me, at least, I think the rules in F::F::R seem very useful.

[13:37] <tadzik> now as I see F::F::R, F::F seems… poor

[13:37] <frettled> yup

[13:37] <au|irc> ☺ ☾ λ ӝ # g'night lambda butterflies... \o

[13:37] *** au|irc is now known as au|zzz

[13:38] <frettled> au|zzz: tee-hee, 'night!

[13:38] *** M_o_C left
[13:39] *** a3r0 joined
[13:39] <tadzik> I just _love_ commits like this

[13:39] <tadzik> 1 files changed, 22 insertions(+), 30 deletions(-)

[13:39] <tadzik> less code than before, and works better than before

[13:39] <frettled> nice!

[13:40] <tadzik> moritz_++ # nice ideas for sanity fixes

[13:41] <[Coke]> it is amazing to me to contrast the positive energy in this group with the negative I see on p5p.

[13:41] <[Coke]> (not that all of p5p is like that, but the lows are very low.)

[13:41] <PerlJam> hugme: hug [Coke]

[13:41] <[Coke]> perl6++

[13:41] * hugme hugs [Coke]

[13:41] <PerlJam> Coke: it's all the hugs  :)

[13:42] *** zulon left
[13:42] <[Coke]> hugs--

[13:43] <mac> Can some1 check this out? http://wklej.to/JEBC Maybe I missunderstand public/protected attributes in classes, then please explain me how it goes.

[13:43] <[Coke]> ah, crap, forgot to update wikipedia.

[13:43] <[Coke]> doing soo...

[13:43] <tadzik> hugme: hugme

[13:43] <hugme> tadzik: 

[13:43] *** a3r0 left
[13:44] <tadzik> hugme: oh you

[13:44] <[Coke]> ... or now.

[13:44] <frettled> [Coke]: Which Wikipedia article is that?

[13:44] <[particle]> it's amazing to me that you even read p5p and still have enough energy to be positive

[13:44] *** umphy joined
[13:45] <tadzik> is p5p that bad?

[13:45] <sorear> [Coke]: p5-p or #p5p?

[13:45] <[particle]> [Coke]++ for completing the dual-release this month.  welcome to the club!

[13:45] <tadzik> mac: is rw maybe?

[13:45] <tadzik> mac: params are ro by default

[13:46] <[Coke]> the mailing list.

[13:46] <PerlJam> mac: careful calling "has $!bar" protected.  It's not at all like C++'s protected.

[13:46] <[Coke]> frettled: Rakudo. someone updated, but I found a typo, so that's ok. sadly, they linked to the rakudo.org release which isn't mine. ah well.

[13:47] <[Coke]> [particle]: (p5p) skim. occasional refeferences to Grants that come up that require attention.

[13:47] <mac> Indeed, tadzik's right.

[13:47] <frettled> [Coke]: aha!  good!

[13:47] <[Coke]> [particle]: just ``fun'' trying to avoid the sniping and vitriol to get at the info in those posts. =-)

[13:47] <mac> PerlJam: so how should I understand it?

[13:47] *** umphy left
[13:48] <frettled> mac: This one may help: http://perl6advent.wordpress.com/2009/12/11/day-11-classes-attributes-methods-and-more/

[13:49] <tadzik> http://www.nntp.perl.org/group/perl.perl5.porters/2010/05/msg159781.html

[13:49] <tadzik> this stabbed me one day when I stumbled upon p5p

[13:49] <tadzik> „its more a general observation that *any* new feature will break perl in unexpected ways, due to the complexity of perl and the weird ways in which all its

[13:49] <tadzik> component parts interact”

[13:49] <tadzik> (whoops)

[13:51] <frettled> tadzik: Schwern and Jesse are far more positive in their responses, though :)

[13:51] <mac> frettled: thx, I'll check this

[13:52] <frettled> mac: but don't hesitate to ask more questions, I just wanted to point you to the awesome advent calendar.

[13:52] *** uniejo left
[13:54] <tadzik> PerlJam: still, aren't they more like protected than like private? They're visible in the inheriting classes, aren't they?

[13:55] <mac> Ok, thanks, this site looks like fair knowledge source

[13:56] *** bphillips joined
[13:56] <au|zzz> phenny: tell masak there's an extra Mu() in the "Operator overloading" section, line 4, between the sub and say, #fyi :)

[13:56] <phenny> au|zzz: I'll pass that on when masak is around.

[13:56] *** au|zzz is now known as au|zzzForReal

[13:56] <PerlJam> szabgab++  I don't pay attention for a day and he's posted 2 more screen casts.

[13:58] <tadzik> These great-yet-unoficiall documentation should be gathered somewhere. Advent calendar, moritz_++ Perl 5 to 6, szabgab++'s screencasts...

[13:58] <wolverian> huh, weird, I don't see S12 specifying what "private" means.

[13:58] *** perlygatekeeper joined
[13:59] <moritz_> tadzik: sure. Start it somewhere, others will chime in

[14:00] <sorear> wolverian: Nothing

[14:00] <sorear> Privacy in Perl is a cultural thing

[14:00] <tadzik> moritz_: on the rakudo wiki maybe?

[14:01] <moritz_> tadzik: yes. Or in the 'star' repository

[14:01] <moritz_> hugme: add tadzik to star

[14:01] * hugme hugs tadzik. Welcome to star!

[14:01] <wolverian> sorear: are you saying $!foo attributes are seen by inheriting classes?

[14:01] <tadzik> \o/

[14:02] <tadzik> moritz_: so a pod in a Star repo?

[14:02] <moritz_> tadzik: yes

[14:02] <frettled> tadzik: http://perl6.org/documentation/ has links to several thingies

[14:02] <moritz_> wolverian: they should not

[14:02] <tadzik> will do

[14:02] <wolverian> moritz_: that's some kind of privacy. as is the whole support for ! vs. .

[14:03] <tadzik> frettled: yep, but no advent calendar, which is awesome. And even though, nice info included with R* is a great idea

[14:03] <PerlJam> Is there a video of the state of the onion somewhere?

[14:03] <sorear> wolverian: $! names don't automatically inherit, but you can access them qualified

[14:03] <sorear> class Foo { has $!x } ; class Bar { method k { say $!Foo::x } }

[14:03] *** ashleydev left
[14:04] <wolverian> ah, thanks. so it's kind of a mix between private and protected, then, as they are known in other languages?

[14:04] <moritz_> sorear: that requires and explict trust

[14:04] <moritz_> s/and/an/

[14:05] <wolverian> that changes things. :)

[14:05] <wolverian> tadzik: does that answer your question?

[14:05] <frettled> tadzik: it's in the pugs source, docs/feather/perl6.org/source/documentation/index.html — do you have commit access to that?

[14:05] <tadzik> frettled: nah

[14:05] <moritz_> time to change that

[14:06] <moritz_> tadzik: if you /msg me your email address, I'll give you a comimt bit

[14:06] <tadzik> gee, I feel so important :]

[14:07] <moritz_> tadzik: invitation sent - please add yourself to AUTHORS in the first commit

[14:08] <tadzik> so, is File::Find going into star?

[14:08] <tadzik> moritz_: it's svn, right?

[14:08] <moritz_> (oh, I forgot to tell felliott__ the same)

[14:08] <moritz_> tadzik: sure, why not?

[14:08] <tadzik> moritz_: Just asking to be sure, nothing against it

[14:08] <tadzik> I'll have to learn to use that :)

[14:09] <moritz_> let me re-iterate that everybody who has commit access to the pugs repo can also invite new committers at http://commitbit.pugscode.org/admin/project/Pugs/people

[14:09] <frettled> tadzik: I'll cobble together a quickref for you

[14:09] <moritz_> can and should

[14:09] <tadzik> frettled++ # thank you!

[14:10] <tadzik> moritz_: oh, your "why not?" was about File::Find, not svn at pugs?

[14:10] <moritz_> tadzik: yes

[14:10] <tadzik> multithreaded talk with the same person causes race conditions

[14:10] <moritz_> aye :-)

[14:11] <moritz_> tadzik: the general opinion is that all modules that are useful to a somewhat wider audience (and that work with Rakudo) should go into R*

[14:11] <tadzik> I see

[14:12] <tadzik> just to be sure, docs with R* are to be written in Pod6?

[14:12] *** ashleydev joined
[14:12] * moritz_ has no idea how docs will be managed

[14:13] <tadzik> so far announcement is plaintext, I'll go for plaintext to, there will be time to unify it later

[14:13] <frettled> tadzik: http://pastebin.com/FqkM1vm8

[14:14] <tadzik> frettled++

[14:14] <frettled> It does not help you resolve conflicts and such, but it's okay for getting started.

[14:14] <frettled> You're welcome!

[14:14] <mac> sorear: could you answer it, to be sure. Private fields can be accessed (like protected in other langs) by the class name and private accessor ($!), like: $!ClassName::field, am I right?

[14:15] * [particle] is feeling more awake

[14:16] <frettled> [particle]: almost, ahem, excited?  :)

[14:17] <frettled> Physics jokes are under-appreciated.  :(

[14:18] <sorear> mac: I think so

[14:18] <wolverian> moritz_ said that only works if the class trusts the accessing class.

[14:18] <wolverian> which I think is correct from reading S12, but I'm not sure. :(

[14:18] <jnthn> mac: As far as I know, only if the class declares itself as "trusts OtherClass"

[14:18] <jnthn> mac: Rakudo currently gives attributes protected visibility rather than the private they should have.

[14:19] <sorear> I don't really see the point in implementing that

[14:19] <mac> Uhmm... Where to declare "trusts"? In the header of class?

[14:19] *** moritz_ sets mode: +oooo wolverian frettled jnthn [particle]

[14:19] *** moritz_ sets mode: +oo mac tadzik

[14:19] <mac> class name trusts someOtherClass {

[14:19] <mac> ?

[14:19] <sorear> monkey typing renders all "security" a joke

[14:19] <jnthn> No, just

[14:19] <jnthn> class Foo { trusts Blah; }

[14:19] <jnthn> iirc

[14:20] <jnthn> Oh, maybe it's a trait...I forget off hand.

[14:20] <mac> woo, now I feel important too ;)

[14:20] <moritz_> sorear: in the end there will be some introspection mechanisms for getting foreign attributes anyway

[14:20] <frettled> sorear: It's not quite a joke, because enabling monkey typing means that you're indicating that Here Be Monkeys.

[14:20] <jnthn> Anyway, Rakudo will get this right when the meta-model foundations get re-done.

[14:20] <mac> jnthn: kk thanks

[14:20] * frettled scratches its head, eats a banana, and makes noises.

[14:21] <jnthn> And at the same time when reference to an attribute not declared inside the class you're currently working in will be a compile time error.

[14:21] <PerlJam> besides ... without monkey typing, how are we going to port all that ruby code over to Perl 6   ;-)

[14:21] <moritz_> it's a bit like inside-out objects in p5 - it's not "secure", but it's quite a barrier

[14:21] <frettled> PerlJam++

[14:21] <jnthn> So we catch typos.

[14:21] *** frettled sets mode: +o PerlJam

[14:21] *** moritz_ sets mode: +o PerlJam

[14:21] *** frettled sets mode: +o Juerd

[14:21] <jnthn> yay, I have my cinameon bun back!

[14:21] <frettled> jnthn: bun party!

[14:22] <jnthn> omnomnom@@@

[14:22] *** cruftius_minimus joined
[14:23] <mac> One more question, if can ;) I'm in doubt with handles. I`ve read example from advent and I'm thinking over if it's possible to "bind" whole methods from that class which I "handles", or just those which I "whitelist"? Because there is written "Renaming is just one option that is available; the delegation syntax offers many other alternatives."

[14:24] <mac> my $bob = DogWalker.new(name => 'Bob', dog => $fido); - is there any other way to "bind" methods from other class into mine?

[14:24] <tadzik> will the specs be included in R*?

[14:25] <moritz_> mac: 'handles' is more like forewarding, not binding

[14:25] <jnthn> moritz_: handles works in two ways. In one, it generates forwarder methods. In the other, it says "if you search the class hierarchy and find no matching methods, check if you can forward to one of these instead"

[14:26] <jnthn> er

[14:26] <jnthn> mac

[14:26] <jnthn> :-)

[14:26] <jnthn> The m-space is ever crowded. :-)

[14:26] <frettled> UTF-8 nicks FTW?

[14:27] <jnthn> irc is too aulde to handle 'em. :-(

[14:27] <mac> Ok, thanks, after dinner I'll check this ;)

[14:27] *** Velvet left
[14:27] <[particle]> auld lang sirc

[14:27] <jnthn> 16:34 [freenode] -!- джнтн Erroneous Nickname

[14:28] <jnthn> :-(

[14:28] <moritz_> mac: ou might want to check t/spec/S12-attributes/delegation.t

[14:28] <moritz_> *you

[14:28] <PerlJam> jnthn: Does rakudo's "handles" ... er, handle all of the same things as Moose yet?

[14:28] <jnthn> PerlJam: I don't know all of the things Moose's one handles

[14:28] <PerlJam> I guess I should read S12 to see where the intersections are anyway

[14:28] <jnthn> PerlJam: It handles quite a lot of cases though.

[14:29] <jnthn> PerlJam: See also to the test file moritz_ just mentioned.

[14:29] <jnthn> For what Rakudo actually implements

[14:29] <PerlJam> aye

[14:29] <jnthn> iirc we the whole test file.

[14:29] * moritz_ is glad that the special cases for array and hash attributes in conjunction with 'handles' are gone

[14:29] <jnthn> But not quite the whole spec

[14:29] <jnthn> moritz_: ME TOO! \o/

[14:29] <jnthn> moritz_: It made it a LOT less of a PITA to implement.

[14:29] <jnthn> Well, not that I didn't once implement the other cases too...

[14:29] <moritz_> jnthn: and much nicer to use, too :-)

[14:30] <jnthn> Yeah, quite

[14:30] <jnthn> Was a bit too magic.

[14:30] <mathw> special cases are usually bad

[14:30] <tadzik> lolipushed: http://github.com/rakudo/star

[14:30] <mathw> which makes me think, is there a method by which a user-defined class which does Positional can indicate how it can autovivify?

[14:31] <moritz_> mathw: WHENCE

[14:31] <tadzik> You might want to review this: http://github.com/rakudo/star/commit/301009a9a35cb3a68b79c0db71db1ff4e0381ccf

[14:31] <moritz_> tadzik++

[14:32] <mathw> moritz_: excellent

[14:32] <tadzik> fine :)

[14:32] <moritz_> I see you also updated download-stuff.pl. Very good.

[14:32] <tadzik> yep

[14:33] *** ashleydev left
[14:35] <tadzik> moritz_: line #45 could also be removed now, no?

[14:35] <moritz_> tadzik: yes; I'm updating that file anyway

[14:38] <tadzik> frettled: nice cheatsheet, but how do I initally clone the repo? svn co?

[14:38] <moritz_> svn co

[14:39] <tadzik> moritz_: I got the invitation, but the link for setting the password seems dead

[14:39] <sorear> oh man this is so surreal.

[14:39] <moritz_> tadzik: remove the port number from the link

[14:40] <tadzik> alright, works

[14:40] <[Coke]> bug handling... should we be using new to mean "tickets no one has vetted yet", and open to mean "yes, this is an issue of some kind" ?

[14:40] <[Coke]> at the moment, new+open is just one big pile, afaict.

[14:40] <moritz_> right

[14:40] <jnthn> [Coke]: We haven't tended to do that.

[14:41] <jnthn> [Coke]: If a ticket is not worth of attention, reviewer can reject it.

[14:43] *** squeeky joined
[14:44] *** zulon joined
[14:44] <[Coke]> I may open a few a new-tickets-I-think-are-bugs.

[14:44] <[Coke]> nothing to see here.

[14:44] <[Coke]> (it will be helpful, I think, as we get more reports from non-devs)

[14:45] <[Coke]> rakudo: my %h; %h<one><two> = 1; %h.perl.say

[14:45] <p6eval> rakudo 4bf6c0: OUTPUT«{"one" => {"two" => 1}}␤»

[14:46] *** azert0x left
[14:46] *** azert0x joined
[14:49] <[Coke]> rakudo: (368 + 274 +5).say

[14:50] <p6eval> rakudo 4bf6c0: OUTPUT«647␤»

[14:51] <moritz_> buubot: eval: $^O

[14:51] <buubot> moritz_: linux      

[14:51] <[Coke]> pmichaud, jnthn: permission to close 49171? seems like the ROADMAP is getting more use than that ticket.

[14:51] *** mberends left
[14:51] <[Coke]> (I'd rather use the builtin priority field, anyways, if we're going to track that in RT)

[14:52] <moritz_> [Coke]: ask pmichaud, he seems to be the main user

[14:52] <ab5tract> rakudo: my %h; %h<for> = "the"; %h<love> = "of"; %h<perl> = 6; %h.say

[14:52] <p6eval> rakudo b2af27: OUTPUT«love       ofperl  6for    the␤»

[14:52] <ab5tract> rakudo: my %h; %h<for> = "the"; %h<love> = "of"; %h<perl> = 6; %h.perl.say

[14:52] <p6eval> rakudo b2af27: OUTPUT«{"love" => "of", "perl" => 6, "for" => "the"}␤»

[14:52] <[Coke]> moritz_: I just did?

[14:52] <[Coke]> jnthn: can you change the summary of RT#50118 to match the current "left to do" ?

[14:52] <moritz_> [Coke]: oh, I only read the 'jnthn' part, sorry

[14:53] *** gbacon joined
[14:54] <jnthn> [Coke]: Opened it to glance at later.

[14:54] <jnthn> (Got $dayjob bits going on ATM. :-))

[14:58] <[Coke]> can someone with a checkout of the spectests add a marker for RT#58018 to the fudged __cmp tests?

[14:58] *** ktne joined
[14:59] <pugssvn> r31793 | moritz++ | [t/spec] add RT #58018 marker to tests in range.t 

[14:59] <[particle]> whenever did $dayjob become a priority around here?

[14:59] *** shade_ joined
[15:00] <[Coke]> moritz_++

[15:00] <[particle]> ...for me, it was over a year ago.

[15:00] *** felliott joined
[15:03] <jnthn> [particle]: I'm trying to keep the two in balance somewhat. :-)

[15:03] <jnthn> [particle]: Even if the allure to just hack on Rakudo all the time is strong. :-)

[15:03] *** traqy joined
[15:03] <[particle]> i miss it greatly

[15:06] *** baest left
[15:08] *** shade_ is now known as shade\

[15:10] <[Coke]> moritz_: I'm assigning some tickets to you, for great justice.

[15:10] * mac is afk

[15:10] <moritz_> [Coke]: yes, I've seen it :-)

[15:10] *** mac is now known as mac_|afk

[15:11] <moritz_> I've closed the REPL thing without tests, because it's not in the spec, and we don't have a good way for non-spec tests in rakudo

[15:11] <[Coke]> rakudo: say 10000000[1]

[15:11] <p6eval> rakudo b2af27:  ( no output )

[15:11] <[Coke]> moritz_: 'sfine, I trust your judgement on those or i'd not have assigned them to you. =-)

[15:12] *** zulon left
[15:12] <moritz_> :-)

[15:12] *** levon joined
[15:13] *** pyrimidine joined
[15:13] *** levon is now known as Guest32833

[15:13] <TimToady> sorear, pmurias: I'm fine with naming any XXX to STD::XXX except for STD itself :)

[15:13] <phenny> TimToady: 05:26Z <sorear> tell TimToady It's possibly to confuse STD.pm6 into setting up a package as the OUTER:: of a lexical scope.  Try package Foo { my $x = 2; }; package Foo::Bar { say $x }

[15:13] <phenny> TimToady: 05:27Z <sorear> tell TimToady STD.pm6 line 5547 appears to be involved, but I'm not very knowledgable on the $*CURLEX handling

[15:14] *** Guest32833 left
[15:14] * TimToady ==> @oscon

[15:14] <frettled> TimToady: and is it good?

[15:17] <moritz_> I've just pushed a build script to the 'star' repo

[15:17] <moritz_> on my machine it successfully builds rakudo, puts it into the local $PATH, and runs a small sanity check

[15:17] <jnthn> rakudo: sub TimToady { <awesomeness skillz> }; my @oscon; TimToady ==> @oscon; say @oscon.perl;

[15:17] <p6eval> rakudo b2af27: OUTPUT«["awesomeness", "skillz"]␤»

[15:18] <moritz_> next up: installing ufo and modules

[15:18] <pugssvn> r31794 | moritz++ | [t/spec] unfudge some range tests, [Coke]++ 

[15:18] <jnthn> moritz_: For module installation

[15:18] <jnthn> moritz_: It occured to me that if we hack up a way to copy the modules into the pls "cache" directory and scribble a project file that claims they are fetched

[15:19] <jnthn> moritz_: Then we can just pls them the rest of the way.

[15:19] <moritz_> jnthn: oh, nice idea

[15:19] <moritz_> anyway, I think I should by some food before continuing

[15:19] *** sftp left
[15:22] *** sftp joined
[15:23] <cxreg> jnthn: shockingly enough, my github id is cxreg :)

[15:23] *** jedai left
[15:23] <jnthn> cxreg: And it was...Zavolaj you wanted to commit to?

[15:24] <cxreg> well, I pushed to a fork and mberends++ merged it

[15:24] <cxreg> so i'm good for now

[15:24] <moritz_> hugme: list

[15:24] <moritz_> hugme: list projects

[15:24] <hugme> moritz_: I know about Math-Model, Math-RungeKutta, MiniDBI, book, gge, hugme, ilbot, java2perl6, json, modules.perl6.org, november, nqp-rx, nqpbook, perl6-examples, perl6-wtop, process-cmd-args, proto, pugs, star, svg-matchdumper, svg-plot, tardis, temporal-flux-perl6syn, try.rakudo.org, tufte, ufo, web, yapsi

[15:25] *** jedai joined
[15:27] *** tuxuday left
[15:30] <[Coke]> moritz_: just "Coke" is fine. (IHF!)

[15:31] <moritz_> phenny: ask masak if temporal-flux-perl6syn still needs to be in the hugme projects list

[15:31] <phenny> moritz_: I'll pass that on when masak is around.

[15:35] * [Coke] offers [particle] some koohii

[15:35] * [Coke] is pretty sure no kana on this kb.

[15:38] *** wagnerf joined
[15:39] <wagnerf> hi, would anyone know how to use opendir in perl6 or where to look for documentation ?

[15:39] <wagnerf> i'm begining a little bit

[15:40] <dalek> niecza: a7a25a2 | sorear++ |  (12 files):

[15:40] <dalek> niecza: Refactor initialization procedure

[15:40] <dalek> niecza: This lays the groundwork for modules and custom settings, and brings our

[15:40] <dalek> niecza: handling of CORE.setting much closer to STD.

[15:40] <dalek> niecza: review: http://github.com/sorear/niecza/commit/a7a25a2d15816e8d88af00965c3f551040809d68

[15:40] <jnthn> wagnerf: There's no opendir/readdir/closedir - just use the "dir" function.

[15:40] <moritz_> wagnerf: dir() returns a list of files in the current directory

[15:40] *** kjeldahl left
[15:40] <jnthn> wagnerf: If you want to iterate over the directories, do for dir() { ... }

[15:40] <jnthn> Or for dir() -> $filename { ... }

[15:40] <wagnerf> thanks a lot

[15:40] <jnthn> I think it also takes a regex too, moritz_?

[15:41] <moritz_> yes

[15:41] <wagnerf> ha good, i also have some globs to do

[15:41] <moritz_> dir(/\.txt$/)

[15:41] <wagnerf> thanks

[15:41] *** ashleydev joined
[15:42] <jnthn> moritz_: Nice :-)

[15:42] *** zostay left
[15:45] *** felliott left
[15:45] *** zostay joined
[15:50] *** _macdaddy left
[15:54] *** felliott joined
[15:54] *** grussell joined
[15:56] *** am0c joined
[15:57] <[Coke]> takes regex, or glbo?

[15:57] * [Coke] is used to glob from ... everywhere.

[15:57] <moritz_> [Coke]: anything that smartmatches, really

[15:58] <am0c> ..

[16:02] *** xinming left
[16:03] *** xinming joined
[16:04] *** timbunce joined
[16:04] *** felliott left
[16:08] *** Trashlord joined
[16:09] *** TiMBuS left
[16:13] <moritz_> ouch. SVG::Plot segfaults.

[16:14] *** eternaleye joined
[16:15] <moritz_> rakudo: BEGIN { @*INC.push: 'lib' }; use Test

[16:15] <p6eval> rakudo b2af27:  ( no output )

[16:15] <moritz_> rakudo: BEGIN { @*INC.push: 'lib' }; use Test; say "alive"

[16:15] <p6eval> rakudo b2af27: OUTPUT«alive␤»

[16:20] *** cognomore joined
[16:24] *** justatheory joined
[16:28] *** ashleydev left
[16:29] *** patrickas left
[16:30] *** d4rt left
[16:30] <moritz_> disaster

[16:31] <moritz_> http://rt.perl.org/rt3/Ticket/Display.html?id=76692

[16:32] <takadonet> not good

[16:33] <jnthn> ffs

[16:34] <jnthn> moritz_: Wehre's the script that crashes it?

[16:35] <jnthn> Ah, I need to install SVG::Plot

[16:35] <moritz_> which in turn requires xml-writer and SVG

[16:36] <jnthn> argh

[16:36] <jnthn> OK

[16:36] <moritz_> I thought you had pls working? :-)

[16:37] <jnthn> pls itself "works"

[16:37] <jnthn> It then writes a Makefile that has no chance of working on nmake

[16:38] <jnthn> The more I think about it, the less I want an installer doing makefile generation.

[16:38] <jnthn> But I know @other feel different

[16:38] <moritz_> does it write the makefiles itself? or does it delegate to ufo?

[16:38] * moritz_ is all in favor of ditching makefiles

[16:40] <jnthn> moritz_: It writes it itself.

[16:40] *** PacoLinux left
[16:40] <jnthn> Writing a file that we're going to struggle to make right on multiple systems, which in turn just runs commands, feels silly to me. We may as well just run the commands.

[16:40] <moritz_> jnthn: fwiw, precompilation is not necessary to reproduce the segfault

[16:40] *** PacoLinux joined
[16:41] <jnthn> ufo I can see the point of generating a Makefile

[16:41] <jnthn> You want to just compile the bits you need and that have dependencies etc.

[16:41] <jnthn> But for installing, we're just going to compile the whole thing once and install it.

[16:42] <moritz_> akshually if I recompile SVG::Plot, but not the dependencies, it segfaults

[16:42] <jnthn> moritz_: OK. When I first saw the stacktrace I thought "ah, it blows up in the binder, so this'll be easy"

[16:42] <moritz_> oh

[16:42] <jnthn> moritz_: Sadly though, the binder is in the stacktrace but it's unlikely it's relevant.

[16:42] <moritz_> even with removing all .pir files it segfaults from time to time

[16:42] <jnthn> moritz_: The segfault happens in the GC proccess

[16:42] <[Coke]> jnthn: the reason to use makefiles is so you don't have to rewrite make.

[16:43] <jnthn> [Coke]: We don't *need* make!!!

[16:43] <jnthn> (for this)

[16:43] <[Coke]> if we don't need all of make... ok. but I don't want "Perl 6 Ant"

[16:43] <jnthn> [Coke]: The Makefile we generate just runs a bunch of commands.

[16:43] <jnthn> [Coke]: If projects want to ship a Makfeile, they can and pls runs it.

[16:43] <[Coke]> no dependency resolution, etc?

[16:44] <jnthn> [Coke]: Yes but to generate the Makefile we already had to do the dependency resolution.

[16:44] <jnthn> [Coke]: That is, we determine what depends on what, and then write a Makefile with that inforamtion in it, and run it.

[16:44] *** macroron left
[16:44] <jnthn> So we're not getting Make to do much other than re-compute an ordering that was already computed. :-)

[16:44] <jnthn> In general I agree totally - don't re-invent make.

[16:44] <[Coke]> "make -j"

[16:45] <moritz_> [Coke]: will fail

[16:45] <[Coke]> ... but I see your point.

[16:45] <[Coke]> moritz_: then you're not doing the deps right? =-)

[16:45] <[Coke]> but as long as in general jnthn agrees I'm going back tow ork. =_)

[16:45] <moritz_> [Coke]: no, so far only writing the production rules in the right order, or something

[16:45] <jnthn> Anyway, I can try and fix the Makefile first.

[16:46] <jnthn> It just feels like using a tool for the sake of it here though, that's all.

[16:46] <[Coke]> jnthn: no, you write core code instead. :P

[16:48] <jnthn> [Coke]: I'd love to, but nobody else has jumped in to hack on Win32 support for pls. :-( And I'd rather we didn't ship something broken on such a widely deployed OS. :-)

[16:49] <jnthn> moritz_: Is the backtrace always the same?

[16:49] *** cjk101010 left
[16:50] <Leonidas> is it possible that the current release of rakudo lacks Configure?

[16:51] <moritz_> jnthn: not quite

[16:51] <moritz_> Leonidas: there should be Configure.pl

[16:51] <jnthn> moritz_: Got any more examples?

[16:51] <Leonidas> moritz_: I am trying to install Web

[16:51] <moritz_> jnthn: http://nopaste.snit.ch/22239

[16:51] <jnthn> moritz_: thanks

[16:51] <moritz_> Leonidas: oh, I don't think  that works with current Rakudo

[16:52] <Leonidas> moritz_: http://nopaste.snit.ch/paste

[16:52] <Leonidas> heh

[16:52] <moritz_> Leonidas: that URL doesn't contain a paste

[16:53] <Leonidas> moritz_: sorry, I copied the url without looking, the proper url is http://nopaste.snit.ch/22240

[16:53] <jnthn> moritz_: Hmm. The binder is in the trace again, but in a different place.

[16:53] <moritz_> jnthn: want more traces?

[16:53] *** jaldhar left
[16:53] <jnthn> moritz_: Yeah

[16:53] <sorear> Leonidas: Configure is Perl 5, @*INC is Perl 6

[16:53] <jnthn> moritz_: I'm still trying to get a feel for if the binder is certainly to blame or if it just happens to be in the stack traces.

[16:54] <moritz_> sorear: rakudo alpha + proto also had a Configure.pm

[16:54] <Leonidas> sorear: so how to I install Web? I thought that Web was Perl 6 only.

[16:55] <moritz_> iirc you need the January release of Rakudo, and proto

[16:55] <moritz_> jnthn: next backtrace infinite-loops in Parrot_gc_mark_PMC_alive_fun -> Parrot_FixedPMCArray_mark

[16:55] <moritz_> jnthn: and the binder is in the BT, again

[16:55] *** cdarroch joined
[16:55] *** cdarroch left
[16:55] *** cdarroch joined
[16:55] <Leonidas> hmm, I think I'm going to wait for rakudo star

[16:56] <moritz_> jnthn: http://nopaste.snit.ch/22241

[16:56] *** xinming_ joined
[16:57] <sorear> moritz_: jnthn: Are you sure this isn't the same lazy list bug?

[16:58] <moritz_> and another one: http://nopaste.snit.ch/22242

[16:58] *** justatheory left
[16:58] <moritz_> that seems to be at cleanup

[16:58] *** xinming left
[17:00] <jnthn> sorear: The one that results in deep recursive marks?

[17:00] <sorear> yes

[17:00] <jnthn> sorear: That eventually blow the C stack?

[17:00] <sorear> yes

[17:00] <jnthn> sorear: I'm not convinced because in what moritz_ has shown me so far, three of them were only 20 frames deep or so.

[17:00] <sorear> oh.

[17:01] <moritz_> right, only one was larger

[17:01] <jnthn> All of them seem to have hash destruction in common.

[17:01] <jnthn> Apart from the longer one which has hash marking as the top frame.

[17:01] *** timbunce left
[17:02] *** japhb left
[17:02] <jnthn> That they all go through the binder is somewhat suggestive though.

[17:02] <moritz_> just got another one with 1155 frames

[17:02] <jnthn> moritz_: Is the top hash-y at all?

[17:03] <moritz_> jnthn: lots of marking in there, one of them hash

[17:03] <moritz_> http://nopaste.snit.ch/22244

[17:04] <moritz_> another one from the binder

[17:05] <jnthn> moritz_: I don't see the binder in that last one?

[17:05] *** sukria left
[17:06] <moritz_> jnthn: http://nopaste.snit.ch/22245 two more that involve the binder

[17:06] <jnthn> moritz_: OK. I think we're probably beyond the point where it's just chance then.

[17:07] *** timbunce joined
[17:07] <jnthn> moritz_: Seems it's always about the binder and hash.

[17:09] <jnthn> moritz_: Working on re-producing it here.

[17:10] <[Coke]> std: / <[a-z]> /

[17:10] <p6eval> std 31794: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of - as character range; in Perl 6 please use .. at /tmp/lqLPfKUdfV line 1:␤------> [32m/ <[a-z[33m⏏[31m]> /[0m␤Parse failed␤FAILED 00:01 116m␤»

[17:10] <moritz_> rakudo: /<[a-b]>/

[17:10] <p6eval> rakudo b2af27: OUTPUT«===SORRY!===␤Obsolete use of hyphen in enumerated character class;in Perl 6 please use .. instead at line 22, near "b]>/"␤»

[17:10] *** justatheory joined
[17:11] *** ashleydev joined
[17:11] <[Coke]> RT#69682 is probably very near closable.

[17:14] *** mscha joined
[17:14] <mscha> rakudo: say 0..9.pick(*);

[17:14] <p6eval> rakudo b2af27: OUTPUT«0123456789␤»

[17:14] <mscha> rakudo: say (0..9).pick(*);

[17:15] <p6eval> rakudo b2af27: OUTPUT«3745680912␤»

[17:15] <mscha> rakudo: say (0..*).pick(*);

[17:15] <p6eval> rakudo b2af27:  ( no output )

[17:15] <mscha> :-(

[17:15] <mscha> rakudo: say (0..*).pick(2);

[17:16] <p6eval> rakudo b2af27:  ( no output )

[17:16] <tadzik> Unlike other languages, Perl assumes that novices will eventually learn how to read code.

[17:16] <tadzik> I like this one

[17:17] <jnthn> Wouldn't the probability of an random number between 0 and infinity being something that your computer could represent without running out of memory be infinitely small? :-)

[17:18] <PerlJam> jnthn: 5 <--  there's my random number between 0 and infinity. I randomly choose it all the time  :-)

[17:18] <TimToady> jnthn: the probably of a random number between 0 and 1 being representable is infinitesimal

[17:18] *** dakkar left
[17:18] <jnthn> TimToady: I shoulda said integer. :P

[17:19] <jnthn> sub rand { 4 #`picked by dice role, totally random!` }

[17:20] *** cruftius_minimus left
[17:20] <mscha> rakudo: for (1..100) { print [+] (1..6).pick(2, :replace), " "; }

[17:20] <p6eval> rakudo b2af27: OUTPUT«3596127245796995476666848666102966881011745377107348737658692888861048788947127445867105»

[17:21] <mscha> rakudo: for (1..100) { print [+] (1..6).pick(2, :replace); print " "; }

[17:21] <p6eval> rakudo b2af27: OUTPUT«6 5 12 3 8 3 7 10 6 4 7 6 11 4 3 3 8 7 11 11 11 9 3 7 4 5 7 12 2 4 11 6 7 9 8 7 3 6 2 5 4 10 8 9 8 4 6 3 4 5 4 5 6 5 9 8 8 9 6 6 8 7 6 11 6 4 11 10 9 6 8 9 10 7 9 4 3 5 9 9 3 7 9 5 5 7 2 9 12 9 9 9 8 »

[17:22] <PerlJam> rakudo: for 1..100 { [+] (1..6).pick(2, :replace); }.classify(*.Int).Str.say

[17:22] <p6eval> rakudo b2af27: OUTPUT«===SORRY!===␤Confused at line 22, near "for 1..100"␤»

[17:23] <PerlJam> rakudo: (for 1..100 { [+] (1..6).pick(2, :replace); }).classify(*.Int).Str.say

[17:23] <colomon> rakudo: (1..100).map({ [+] (1..6).pick(2, :replace); } ).sort.Str.say

[17:23] <mscha> rakudo: sub hello(Str $planet) { say "Hello, { $planet.ucfirst }!" } hello('world');

[17:23] <jnthn> moritz_: Where is synopsis.pl from? I don't see it in http://github.com/moritz/svg-plot

[17:23] <p6eval> rakudo b2af27:  ( no output )

[17:23] <p6eval> rakudo b2af27:  ( no output )

[17:23] <p6eval> rakudo b2af27: OUTPUT«===SORRY!===␤Confused at line 22, near "sub hello("␤»

[17:24] <jnthn> mscha: Need a ; after the } of the sub

[17:25] <mscha> rakudo: sub hello(Str $planet) { say "Hello, { $planet.ucfirst }!" }; hello('world');

[17:25] <PerlJam> rakudo:  (for 1..10 { $_ + 3 }).say

[17:25] <p6eval> rakudo b2af27: OUTPUT«Hello, World!␤»

[17:25] <p6eval> rakudo b2af27: OUTPUT«␤»

[17:25] <jnthn> mscha: BTW, you could also write:

[17:25] <jnthn> rakudo: sub hello(Str $planet) { say "Hello, $planet.ucfirst()!@ }; hello('world');

[17:25] <p6eval> rakudo b2af27: OUTPUT«===SORRY!===␤Non-variable $ must be backslashed at line 22, near "$planet.uc"␤»

[17:25] <jnthn> gah!

[17:25] <jnthn> rakudo: sub hello(Str $planet) { say "Hello, $planet.ucfirst()!" }; hello('world');

[17:26] <p6eval> rakudo b2af27: OUTPUT«Hello, World!␤»

[17:26] * sorear really likes the command line niecza_eval --language=NULL -c CORE.setting for some reason

[17:27] *** cognomore left
[17:27] <moritz_> jnthn: it's the example from the POD in lib/SVG/Plot.pm

[17:27] <[Coke]> wozzit do?

[17:27] <[Coke]> (sorear)

[17:28] <jnthn> moritz_: found it

[17:28] <sorear> compiles my setting, as a single module, without linking the standard setting (CORE)

[17:29] <jnthn> moritz_: gah :-(

[17:29] <jnthn> moritz_: I get...a load of svg output.

[17:29] <mscha> rakudo: say gather for 0..10 { take (1..6).pick(2, :replace) }

[17:29] <jnthn> moritz_: And no segfault.

[17:29] <p6eval> rakudo b2af27: OUTPUT«3361115242153241545451␤»

[17:29] <jnthn> moritz_: That's with nothing pre-compiled.

[17:29] <mscha> rakudo: say gather for 0..10 { take (1..6).pick(2, :replace) }.join(', ');

[17:29] <p6eval> rakudo b2af27: OUTPUT«===SORRY!===␤Confused at line 22, near "say gather"␤»

[17:30] <mscha> rakudo: my @a = gather for 0..10 { take (1..6).pick(2, :replace) }; say @a.join(', ');

[17:30] <p6eval> rakudo b2af27: OUTPUT«6, 4, 5, 4, 5, 3, 2, 2, 1, 4, 6, 2, 5, 4, 1, 3, 2, 1, 4, 5, 5, 4␤»

[17:31] <moritz_> jnthn: try running it a few times

[17:31] <mscha> rakudo: my @a = gather for 0..10 { take (1..6).pick(2, :replace) }; say @a.classify(*).join(', ');

[17:31] <p6eval> rakudo b2af27: OUTPUT«1  3 4 1 1 4 1 5 4 4 2 6 5 5 1 3 3 5 2 2 3 2 6␤»

[17:31] <jnthn> moritz_: worked a second time too :-(

[17:31] *** tylercurtis joined
[17:31] <jnthn> moritz_: Let me try under the debugger

[17:31] <moritz_> :(

[17:31] <mscha> rakudo: my @a = gather for 0..10 { take (1..6).pick(2, :replace) }; say @a.classify(*).perl;

[17:31] <p6eval> rakudo b2af27: OUTPUT«("1" => [3, 6, 3, 4, 4, 3, 5, 6, 4, 5, 1, 3, 3, 5, 3, 5, 3, 4, 3, 4, 1, 6])␤»

[17:32] <mscha> rakudo: my @a = gather for 0..10 { take (1..6).pick(2, :replace) }; say @a.classify(*.Int).perl;

[17:32] <p6eval> rakudo b2af27: OUTPUT«("3" => [3, 3, 3, 3], "4" => [4, 4, 4, 4], "5" => [5, 5, 5], "6" => [6, 6], "1" => [1, 1, 1, 1], "2" => [2, 2, 2, 2, 2])␤»

[17:32] <jnthn> moritz_: Aha!

[17:32] <jnthn> moritz_: The debug memory libs found heap corruption or some such.

[17:33] *** cognomore joined
[17:34] <moritz_> "cool"

[17:36] <mscha> rakudo: my @a = gather for 0..10 { take [+] (1..6).pick(2, :replace) }; say @a.classify(*.Int).perl;

[17:36] <p6eval> rakudo b2af27: OUTPUT«("5" => [5, 5], "6" => [6, 6, 6, 6], "7" => [7], "8" => [8], "10" => [10, 10], "9" => [9])␤»

[17:36] <dalek> niecza: 92aafc8 | sorear++ |  (4 files):

[17:36] <dalek> niecza: Unify handling of setting and programs in CompilerDriver

[17:36] <dalek> niecza: review: http://github.com/sorear/niecza/commit/92aafc83c1d57ab2f7cbe7cc09681327945598db

[17:36] <dalek> niecza: c37e91c | sorear++ |  (4 files):

[17:36] <dalek> niecza: Extend niecza_eval with the ability to compile libraries and settings, and use 

[17:36] <dalek> niecza: custom settings

[17:36] <dalek> niecza: review: http://github.com/sorear/niecza/commit/c37e91ce0058a797ee35d9b2594bf17dfaefc383

[17:37] <sorear> does this make niecza the first implementation to fully implement --language?

[17:37] <moritz_> probably :-)

[17:37] *** traqy left
[17:37] <jnthn> Oh wow. interp->mem_pools points into invalid memory

[17:37] *** japhb joined
[17:38] <jnthn> er...and it appears to be trying to allocate something 136,204,424 bytes big?!

[17:38] <mscha> rakudo: my @a = gather for 0..10 { take [+] (1..6).pick(2, :replace) }; say @a.classify(*.Int).map({ .key => scalar(.value) }).perl;

[17:38] <p6eval> rakudo b2af27: OUTPUT«Method 'key' not found for invocant of class ''␤  in main program body at line 22:/tmp/s84Ky3jHt7␤»

[17:38] <lue> goodnow citizens o/

[17:38] <TimToady> if [op] is reduce, what does rakudo use for the internal definition of [\op]?

[17:39] <moritz_> TimToady: reducewith(:triangle)

[17:39] <moritz_> rakudo: my @a = gather for 0..10 { take [+] (1..6).pick(2, :replace) }; say @a.classify(*.Int).map({; .key => +.value}).perl

[17:39] <p6eval> rakudo b2af27: OUTPUT«("7" => 2, "8" => 2, "9" => 1, "10" => 2, "5" => 3, "6" => 1)␤»

[17:40] <moritz_> mscha: it interpreted the block as a hash constructor

[17:40] <mscha> Ah, thanks.

[17:40] <TimToady> I think it's a mistake to do that with an option

[17:41] <TimToady> means reduce doesn't have a consistent return type

[17:41] <mscha> rakudo: (gather for 0..100 { take [+] (1..6).pick(2, :replace) }).classify(*.Int).map({ .key => scalar(.value) }).perl.say;

[17:41] *** Trashlord left
[17:41] <tadzik> rakudo: say 'ok' if "0"

[17:41] <p6eval> rakudo b2af27:  ( no output )

[17:41] <p6eval> rakudo b2af27:  ( no output )

[17:41] <tadzik> :(

[17:44] *** timbunce left
[17:45] *** justatheory left
[17:47] <jnthn> moritz_: Ugh. This is going to take some finding. :-/

[17:47] <jnthn> moritz_: I get it blowing up in different ways on different runs too.

[17:47] <tadzik> rakudo: say "a string"[3] # why so fatal?

[17:47] <p6eval> rakudo b2af27:  ( no output )

[17:47] <tadzik> crashes the REPL here. Normal?

[17:51] * PerlJam wonders if .3 could be made to work like .[3]  ala TT

[17:52] <TimToady> all things are possible, but not all things are expedient

[17:53] <tadzik> rakudo: my $what = "foobar"; $what .= substr(2).chop; say $what

[17:53] <p6eval> rakudo b2af27: OUTPUT«===SORRY!===␤Confused at line 22, near "$what .= s"␤»

[17:53] <tadzik> why?

[17:53] * jnthn -> dinner

[17:56] <tadzik> std: my $what = "foobar"; $what .= substr(2).chop;

[17:56] <p6eval> std 31794: OUTPUT«[31m===[0mSORRY![31m===[0m␤Method call found where infix expected (omit whitespace?) at /tmp/8G9dd4TH80 line 1:␤------> [32mmy $what = "foobar"; $what .= substr(2)[33m⏏[31m.chop;[0m␤    expecting any of:␤   argument list␤    infix or meta-infix␤      method arguments␤

[17:56] <p6eval> ..prefix or term␤…

[17:56] <tadzik> hmm

[17:56] <[Coke]> tadzik: . isn't string concat: that's ~

[17:56] <tadzik> [Coke]: I didn't mean concat, I mean method call

[17:56] <tadzik> $what .= substr(2) is ok, but adding .chop spoils everything

[17:58] <TimToady> odd

[17:59] <[Coke]> rakudo: my $what = "foobar"; ($what .= substr(2)).chop; say $what #?

[17:59] <p6eval> rakudo b2af27: OUTPUT«obar␤»

[17:59] <TimToady> std: my $what = "foobar"; ($what .= substr(2)).chop;

[17:59] <p6eval> std 31794: OUTPUT«ok 00:01 118m␤»

[18:00] *** macroron joined
[18:00] *** macroron left
[18:00] <[Coke]> yah, I suspect that you can't chop the substr when it's just hanging there.

[18:00] *** oha joined
[18:01] <[Coke]> rakudo: "foobar".chop()

[18:01] <p6eval> rakudo b2af27:  ( no output )

[18:01] <[Coke]> rakudo: "foobar".chop().say

[18:01] <p6eval> rakudo b2af27: OUTPUT«fooba␤»

[18:02] <TimToady> std: my $what = "foobar"; $what.=substr(2).chop;

[18:02] <p6eval> std 31794: OUTPUT«ok 00:01 118m␤»

[18:02] <TimToady> that also works

[18:02] <tadzik> without whitespace?

[18:02] <[Coke]> rakudo: my $what = "foobar"; $what.=substr(2).chop;

[18:02] <tadzik> Weird, why so?

[18:02] <TimToady> parsed as a postfix rather than fake infix

[18:02] <p6eval> rakudo b2af27:  ( no output )

[18:03] <[Coke]> rakudo: my $what = "foobar"; $what.=substr(2).chop.say

[18:03] <p6eval> rakudo b2af27: OUTPUT«oba␤»

[18:03] *** mberends joined
[18:04] <tadzik> still weird imho

[18:04] <oha> sorry i've found something strange on rakudo while using grammar

[18:04] *** mberends left
[18:04] *** mberends joined
[18:05] <oha> it seems an heisenbug, sometimes they match correctly, but the Match object .caps aren't always "complete"

[18:05] <PerlJam> oha: why are you sorry about it?  Rejoice! you're helping improve things (either improve your understanding or improve rakudo)

[18:05] <oha> PerlJam, sorry for the intrusion, i saw you were already speaking.

[18:06] <PerlJam> ah.  No worries there either.  We're a friendly bunch who don't mind interruption  :)

[18:06] <tadzik> rakudo: my $what = "foobar"; $what.=substr(1).chop.say

[18:06] <p6eval> rakudo b2af27: OUTPUT«ooba␤»

[18:06] <tadzik> oh

[18:07] <PerlJam> oha: anyhow ... got the code somewhere where we can see it?

[18:07] *** gbacon left
[18:07] <oha> lemme find a place

[18:08] <[Coke]> nopaste.snit.ch works, or a gist @ github.

[18:08] <[Coke]> (though the nopaste site is not hooked up to this channel.)

[18:08] *** justatheory joined
[18:08] <[Coke]> phenny: .u sad

[18:08] <[Coke]> :P

[18:08] <oha> PerlJam, http://pastebin.com/b9huV5a2

[18:10] <oha> PerlJam, if i execute it more and more, i often get an incomplete outer "sum"

[18:10] <oha> PerlJam, i could be wrong, but the previous release of rakudo was ok.

[18:10] *** timbunce joined
[18:11] <[Coke]> oha: that code generates output with no error. Whats' the problem again?

[18:12] <[Coke]> ah, it /occasionally/ fails?

[18:13] <oha> i'm a bit laggy it seems. yep occasionally "dump" incompleted data

[18:13] <oha> and it do twice, so it seems a problem on the Match and not the dump

[18:14] <oha> This is Rakudo Perl 6, version 2010.06-214-g1ef278d

[18:14] <PerlJam> I just reproduced it I think.

[18:15] <[Coke]> $ ./parrot_install/bin/parrot --hash-seed=234234234234 perl6.pbc foo.p6

[18:15] *** eternaleye left
[18:15] <[Coke]> that generates different output than :

[18:15] <[Coke]> $ ./parrot_install/bin/parrot --hash-seed=23423423 perl6.pbc foo.p6

[18:15] <[Coke]> I think this is an issue with LTM or alternation ending up in a hash.

[18:16] <tadzik> my ($str) = $what ~~ s/^\e\[//; # what is wrong in here?

[18:17] *** eternaleye joined
[18:18] <oha> [Coke], no idea, btw the missing data is in not where alternations take place, but where [ .. ]* do

[18:19] <oha> to me, the incomplete .caps array is always in the first level Match

[18:19] <tadzik> ah, nevermind

[18:20] <PerlJam> oha: you mean like this:  http://gist.github.com/487820   ?

[18:20] <moritz_> we have a spectest for incomplete caps in perl 6

[18:20] <moritz_> that rakudo occasionally fails

[18:21] <oha> PerlJam, exactly the same

[18:21] <[Coke]> oha: try this grammar: http://nopaste.snit.ch/22247

[18:21] <oha> moritz_, so it seems a known bug here.

[18:22] <oha> [Coke], that seems always working here

[18:22] <moritz_> oha: RT #75484

[18:22] <[Coke]> er, you can probably remove the || in the pow rule.

[18:23] <oha> [Coke], yep i've noticed it. but it should be skipped being the first empty autoremoved for what i know

[18:28] <oha> moritz_, yep it seems exactly the same issue.

[18:29] *** auggy joined
[18:29] *** auggy is now known as mmmpork

[18:30] <tadzik> how are named regexes now used, outside grammars? <&=foo>, or something?

[18:30] <moritz_> tadzik: <foo=&foo>

[18:30] <PerlJam> tadzik: <foo=&foo>

[18:30] <moritz_> or just <&foo> if you don't capture

[18:30] <tadzik> awful. Thanks

[18:33] *** nimiezko joined
[18:33] * moritz_ not happy about it

[18:37] *** _macdaddy joined
[18:41] <oha> i've checked rakudo src, it seems that there are named capture missing in .hash()

[18:42] <tylercurtis> std: rx :1th / foo /

[18:42] <p6eval> std 31794: OUTPUT«ok 00:01 115m␤»

[18:42] <moritz_> I've verified that the Regex::Match object is built incorrectly; it's not Match.caps that's wrong

[18:42] <tylercurtis> std: rx :9st / foo /

[18:43] <p6eval> std 31794: OUTPUT«ok 00:01 115m␤»

[18:43] *** ashleydev left
[18:43] <moritz_> std: rx :12foo / bar /

[18:43] <p6eval> std 31794: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unrecognized adverb :foo(12) at /tmp/GRA07KJohl line 1:␤------> [32mrx[33m⏏[31m :12foo / bar /[0m␤Check failed␤FAILED 00:01 115m␤»

[18:45] *** takadonet left
[18:47] <moritz_> rakudo: say('a' ne 'b')

[18:47] <p6eval> rakudo b2af27: OUTPUT«1␤»

[18:47] <moritz_> nqp: say('a' ne 'b')

[18:47] <p6eval> nqp: OUTPUT«1␤»

[18:51] *** justatheory left
[18:51] <tylercurtis> rakudo: class Foo { has $.n; }; our multi sub prefix:<-> (Foo $a) { Foo.new(:n(-$a.n)); }; my Foo $f .= new(:n(6)); (-$f).n.say;

[18:51] <p6eval> rakudo b2af27: OUTPUT«-6␤»

[18:52] <tadzik> A beer a day keeps the grammar problems away

[18:53] <tadzik> magic

[18:57] *** pwd joined
[18:59] *** pwd left
[19:05] *** cono left
[19:06] *** cono joined
[19:09] *** justatheory joined
[19:12] *** ktne left
[19:14] *** ashleydev joined
[19:18] *** ktne joined
[19:20] *** pochi joined
[19:21] *** justatheory left
[19:25] *** justatheory joined
[19:27] *** grussell left
[19:27] *** grussell joined
[19:30] *** M_o_C joined
[19:30] *** arthur-_ joined
[19:30] *** jql left
[19:31] *** arthur-_ left
[19:31] <pugssvn> r31795 | moritz++ | [t/spec] s/todo/skip/ some tests that depend on specific libicu versions 

[19:32] *** timbunce left
[19:34] <dalek> rakudo: 4195e9a | moritz++ | src/Perl6/ (2 files):

[19:34] <dalek> rakudo: disallow parsing of adverb form in quotes that we can't handle yet

[19:34] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/4195e9a26e1841c80b999303a81d4706f456e2bb

[19:34] <dalek> rakudo: f196e88 | moritz++ | src/ (3 files):

[19:34] <dalek> rakudo: Merge branch 'subst_adverbs'

[19:34] <dalek> rakudo: This implements s:g/// and s:!g///. Nothing more, nothing less.

[19:34] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/f196e88d617bacff05e68b28487c52aefd5fad3c

[19:35] <tylercurtis> http://futureboy.us/frinkdocs/#Superman Perl 6 needs docs like this.

[19:37] <colomon> tylercurtis: nice!

[19:38] *** timbunce joined
[19:38] *** envi^home left
[19:39] <PerlJam> tylercurtis++ Rare though it is, I'm actually LOL  :)

[19:40] *** alester joined
[19:44] * jnthn back

[19:45] <[Coke]> espalda!

[19:45] *** wamba joined
[19:46] *** cognomore left
[19:46] <tylercurtis> Now, we just need a unit-correct math library for Perl 6 and we can have funny example code like that for it. Which I would work on if I could understand why my operator overloads aren't working. :) and didn't need to be working on GSoC.

[19:46] *** cognominal left
[19:46] *** justatheory left
[19:46] <[Coke]> we have rats, what more do you need!

[19:47] <sjohnson> wow, p5 5.10.0 has state vars like in p6

[19:47] <sjohnson> well what do ya know

[19:48] <moritz_> rakudo: my $x = 'hello, world'; $x ~~ s:g/<[aeiou]>/X/; say $x

[19:48] <p6eval> rakudo f196e8: OUTPUT«hXllX, wXrld␤»

[19:48] <moritz_> jaffa4 will be happy :-)

[19:48] <jnthn> hehe

[19:48] <jnthn> moritz_++

[19:48] <moritz_> rakudo: my $x = 'hello, world'; $x ~~ s:g(1)/<[aeiou]>/X/; say $x

[19:48] <p6eval> rakudo f196e8: OUTPUT«===SORRY!===␤Arguments to adverbs on quotes are not yet implemented at line 22, near "/<[aeiou]>"␤»

[19:49] <jnthn> moritz_: Does .subst not yet support them?

[19:49] <jnthn> moritz_: Or were you hitting some odd code-gen problem?

[19:49] <moritz_> jnthn: the latter

[19:49] <moritz_> jnthn: it complained about identifier Capture not being declared

[19:49] * jnthn fleetingly noticed soemthing about an errant Capture making it into the generated code

[19:49] <jnthn> Aha.

[19:49] <moritz_> and the --target=past output didn't contain any Capture

[19:49] <jnthn> Yeah, that's..."fun" to track down

[19:50] <jnthn> I've hit them before, but rarely. Generally there's some subtle problem with the generated PAST that's hard to notice.

[19:50] <colomon> [Coke]: I think tylercurtis wants units of measure, like in Frink.

[19:50] <jnthn> Can happen if a PAST node makes it into the :value of a PAST::Val

[19:50] <jnthn> iirc

[19:50] <jnthn> But perhaps other times too

[19:51] <jnthn> moritz_: If you have a patch or branch that exhibits the problem, I can probably track it down quite quickly.

[19:51] <moritz_> jnthn: that's what I had. And then I changed the code not generate the outer PAST::Val (and set  :name on the inner tree), and got the same error. "huh".

[19:51] *** cognominal joined
[19:51] <jnthn> Much quicker tha the segfault. :-/

[19:51] <moritz_> jnthn: git checkout e91ac9e836d25e3c19db2bff46fbd10e214aa938

[19:56] *** lulinha joined
[19:56] *** lulinha left
[19:56] <jnthn> moritz_: If I change things having done this, will I be able to commit them to master somehow?

[19:57] <moritz_> jnthn: not easily. But you can send me the diff, and I'll fiddle it out

[19:57] <moritz_> you'll get some failures if you run spectest, because that commit is a few days behind master

[19:59] *** M_o_C left
[19:59] *** lulinha joined
[19:59] *** lulinha left
[20:01] *** lulinha joined
[20:01] *** lulinha left
[20:04] *** MichaelRWolf joined
[20:05] *** justatheory joined
[20:07] <moritz_> are two Match objects from failed matches against the same string eqv?

[20:07] <moritz_> what if they matched against different strings? does it matter?

[20:12] <pmichaud> good afternoon, #perl6

[20:12] <moritz_> hi. How's OSCON?

[20:13] <pmichaud> almost over

[20:13] <pmichaud> pjf++ just did his closing keynote

[20:13] <szabgab> I just saw the talk of pjf

[20:13] <szabgab> live streaming

[20:16] <jnthn> o/ pmichaud 

[20:19] <frettled> szabgab: entertaining as always?

[20:19] *** MichaelRWolf left
[20:19] <colomon> pmichaud, etc: I thought that I should try mandelbrot again after the Rat speed ups yesterday.

[20:20] <pmichaud> colomon: I'm always in favor of speed ups and bench marks.

[20:20] <colomon> I don't have exact timings, but it looks like things are much slower, and more likely to crash.  :(

[20:21] <colomon> I may have to borrow your git bisect and time script to track down what has changed

[20:21] * moritz_ guesses lists

[20:22] <colomon> something math-y is more likely, lots of iteration in there.

[20:22] <colomon> (rather than list processing, I mean.)

[20:23] <[Coke]> use MONKEY_BRAINS

[20:23] <jnthn> moritz_: Think I grok what's up - hacking.

[20:26] *** timbunce left
[20:26] <pmichaud> oscon done

[20:26] <pmichaud> afk for lunch, then back to hack for the evening

[20:27] <jnthn> pmichaud: But don't worry - YAPC::EU soon for more conferencage! :-)

[20:27] *** justatheory left
[20:27] * moritz_ read that as "conference cage" :-)

[20:27] *** wamba left
[20:27] <jnthn> moritz_: What does :g with a value do, ooc?

[20:28] <jnthn> rakudo: my $x = 'xxxxx'; $x = $x.subst('x', 'y', :g); say $x;

[20:28] <p6eval> rakudo f196e8: OUTPUT«yyyyy␤»

[20:28] <jnthn> rakudo: my $x = 'xxxxx'; $x = $x.subst('x', 'y', :g(3)); say $x;

[20:28] <p6eval> rakudo f196e8: OUTPUT«yyyyy␤»

[20:28] *** bartie joined
[20:28] <moritz_> jnthn: evaluate for truthiness

[20:28] <jnthn> oh.

[20:29] <jnthn> Are there any more interesting ones? :-)

[20:29] <moritz_> sure

[20:29] <jnthn> rakudo: my $x = 'xxxxx'; $x = $x.subst('x', 'y', :n(3)); say $x;

[20:29] <moritz_> :x(4)

[20:29] * hugme hugs moritz_, good vi(m) user!

[20:29] <p6eval> rakudo f196e8: OUTPUT«yxxxx␤»

[20:29] <jnthn> rakudo: my $x = 'xxxxx'; $x = $x.subst('x', 'y', :x(3)); say $x;

[20:29] <p6eval> rakudo f196e8: OUTPUT«yyyxx␤»

[20:29] <moritz_> :nth

[20:29] <moritz_> :c, :p

[20:29] <szabgab> I need some help with grammars

[20:29] <szabgab> http://paste.scsys.co.uk/47047

[20:30] <szabgab> I am trying to understand how should I do error reporting

[20:30] <szabgab> so I started to write a small grammar for a calculator

[20:32] *** bartie left
[20:32] <szabgab> this version now does not report the correct error for the "2 + 3 x" case

[20:32] <szabgab> are those die calls the way you would add error repoting at all?

[20:33] * szabgab wonders if he should change his nick to screencast to get some attention :)

[20:33] <moritz_> rakudo: 'a' ~~ / x | <.panic("OH NOEZ")> /

[20:33] <p6eval> rakudo f196e8: OUTPUT«Method 'panic' not found for invocant of class 'Cursor'␤  in <anon> at line 22:/tmp/NREnwrOqSI␤  in 'Cool::match' at line 2382:CORE.setting␤  in 'Regex::ACCEPTS' at line 5483:CORE.setting␤  in 'infix:<~~>' at line 401:CORE.setting␤  in main program body at line

[20:33] <p6eval> ..22:/tmp/NREnwrOqSI␤»

[20:33] <moritz_> hum

[20:33] *** grussell left
[20:33] <moritz_> szabgab: I don't think we have anything better at the moment

[20:33] <szabgab> I saw panic but AFAIK it is specifically implemented for STD

[20:34] <tylercurtis> rakudo: grammar Foo { rule TOP { <.panic("Foo")> } }; Foo.parse('flksnfalksdlfk')

[20:34] <p6eval> rakudo f196e8: OUTPUT«Method 'panic' not found for invocant of class 'Foo'␤  in 'Foo::TOP' at line 22:/tmp/iEVvJ9FHXB␤  in 'Grammar::parse' at line 5531:CORE.setting␤  in main program body at line 22:/tmp/iEVvJ9FHXB␤»

[20:34] <szabgab> I think this is good for now, but it does not catch that specific case

[20:34] *** bphillips left
[20:35] <szabgab> so how can I call a die if there are extra characters after the second operand?

[20:35] <moritz_> szabgab: '' always matches

[20:35] <moritz_> that's the problem

[20:35] * moritz_ tries something else

[20:36] <moritz_> 		[ \S  { die "Invalid value after second operand" } ]?

[20:36] <moritz_> this works

[20:37] <szabgab> actually I now tried to swap the '' || { die }    and that way it also works

[20:37] <diakopter> [Coke]: you got "lue" twice in Atlanta annc

[20:37] <szabgab> but let me check yours

[20:40] <jnthn> > my $x = 'xxxxx'; $x ~~ s:g(1)/x/y/; say $x;

[20:40] <jnthn> yyyyy

[20:40] <jnthn> > my $x = 'xxxxx'; $x ~~ s:g(0)/x/y/; say $x;

[20:40] <jnthn> yxxxx

[20:40] <moritz_> \o/

[20:40] <jnthn> moritz_: Want the diff?

[20:40] <szabgab> moritz_: that one does not work well,  it does the right thing for the extra character case but also kills the good case

[20:40] <moritz_> jnthn: yes

[20:40] <szabgab> I am not yet sure why

[20:40] <[Coke]> diakopter: probably a bug in the script, but mea culpa.

[20:40] <moritz_> szabgab: did you include the ? after the ] ?

[20:41] <jnthn> moritz_: http://gist.github.com/488005

[20:41] <moritz_> rakudo: (-> $x { say $x}).assuming(3).()

[20:41] <jnthn> moritz_: It fixes the issue but makes things a bit simpler / more efficient too.

[20:41] <p6eval> rakudo f196e8: OUTPUT«3␤»

[20:41] *** Raynes left
[20:41] <szabgab> moritz_: not yet :(

[20:42] <moritz_> szabgab: that's necessary :-)

[20:42] <colomon> mandelbrot 501 keeps running for 2.5 hours and then crashing.  :(

[20:42] <szabgab> right, with ? it works

[20:42] <jnthn> colomon: Epic profiling needed. :S

[20:42] <colomon> jnthn: but I wanna write my grant report!

[20:43] * colomon feels certain this one is probably his fault too.

[20:43] <jnthn> colomon: Well, I can hardly argue with that. ;-)

[20:43] <jnthn> colomon: er, that was too you writing the grant report! :-)

[20:43] <jnthn> *to

[20:44] <jnthn> colomon: If you want me to look over it, I'm going to be here-ish for the next several hours.

[20:44] <szabgab> moritz_: thanks

[20:44] <colomon> jnthn++

[20:44] *** djr joined
[20:45] *** djr left
[20:45] *** skangas left
[20:46] *** astrojp joined
[20:48] *** perlygatekeeper left
[20:49] <moritz_> jnthn: I have your patch fixed up locally, but I don't know if I'll get around to testing and pushing it today... certainly tomorrow

[20:50] <[Coke]> tools/contrib* doesn't handle the date if the release already happened this month.

[20:50] <[Coke]> IWBNI that worked.

[20:50] *** jferrero joined
[20:50] <jnthn> moritz_: No hurry. :-)

[20:52] * jnthn afk for a break

[21:01] *** BooK joined
[21:01] *** MichaelRWolf joined
[21:01] *** pyrimidine left
[21:05] <[Coke]> .u clear

[21:05] <phenny> U+239A CLEAR SCREEN SYMBOL (⎚)

[21:05] <[Coke]> .u ornate

[21:05] <phenny> U+FD3E ORNATE LEFT PARENTHESIS (﴾)

[21:05] *** alester left
[21:07] *** Daenyth left
[21:12] *** kst joined
[21:15] *** alester joined
[21:19] *** dolmen joined
[21:19] *** MichaelRWolf left
[21:22] <tadzik> g'night

[21:22] *** tadzik left
[21:22] <[Coke]> ~~

[21:23] *** gbarr joined
[21:24] *** gbarr left
[21:25] <dolmen> Kodi?

[21:27] *** dotan joined
[21:30] <dolmen> diakopter, are you Kodi on svn.pugscode.org?

[21:31] <dotan> does perl6 (July 2010 Rakudo tarball) understand __DATA__ sections?

[21:32] <PerlJam> dotan: doubtful

[21:32] <PerlJam> they'd be spelt more like  =begin DATA  though, not __DATA__ as in Perl 5

[21:33] <[particle]> i think diakopter is diakopter

[21:34] <dotan> ok, thanks.

[21:35] <PerlJam> dotan: you can say =begin DATA ... =end DATA, but I don't think the linkage is there to provide the contents in $=DATA

[21:36] *** nimiezko left
[21:37] *** sundar joined
[21:38] *** jql joined
[21:38] <sjohnson> hows #perl6 today

[21:42] <dolmen> [particle], do you known who is Kodi?

[21:42] <[particle]> kodi is kodi arfer

[21:43] <[particle]> http://rt.perl.org/rt3//Public/Bug/Display.html?id=70105

[21:46] <sjohnson> rakudo:  my @a = <one two three>; local $" = ', '; say "@a"

[21:46] <p6eval> rakudo f196e8: OUTPUT«===SORRY!===␤Non-declarative sigil is missing its name at line 22, near "$\" = ', ';"␤»

[21:46] <sjohnson> thats what i deserve for not reading the apocolpyses yet.

[21:46] * sjohnson slaps own wrist

[21:47] <PerlJam> that error is certainly LTA though

[21:47] <PerlJam> std: my @a = <one two three>; local $" = ', '; say "@a"

[21:47] <p6eval> std 31795: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of $" variable; in Perl 6 please use .join() method at /tmp/Lt2CeKj5VT line 1:␤------> [32mmy @a = <one two three>; local $"[33m⏏[31m = ', '; say "@a"[0m␤Parse failed␤FAILED 00:01 117m␤»

[21:47] <sjohnson> what does LTA mean?

[21:48] <PerlJam> Less Than Awesome

[21:48] <sjohnson> i broketed it.

[21:48] <PerlJam> I bet STD could be made to declare about "local" if it looks like a declarator too

[21:50] <PerlJam> std: local $a = 5;

[21:50] <p6eval> std 31795: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable $a is not predeclared at /tmp/Z6nN9slZnr line 1:␤------> [32mlocal $a[33m⏏[31m = 5;[0m␤Undeclared routine:␤        'local' used at line 1␤Check failed␤FAILED 00:01 117m␤»

[21:51] <sjohnson> <--- has no idea

[21:51] *** whiteknight joined
[21:55] <dolmen> **

[21:55] <dotan> So say I want to read the file my program is in, discard all lines until something with __DATA__ and keep all the following lines.  What is a better way than using a while loop and a flag?

[21:56] <avar> I love the detailed error messages in STD, are those in rakudo too?

[21:56] <dolmen> avar, no

[21:56] <avar> dolmen: Isn't it the $?DATA filehandle or something?

[22:00] <dolmen> avar: $=DATA   See http://perlcabal.org/syn/S28.html

[22:01] <PerlJam> dotan: What are your criteria for "better"?   :)

[22:02] <PerlJam> dotan: you could do something like this:  repeat { $line = $fh.get } until $line eq '__DATA__';  my @data = $fh.lines;

[22:04] <dotan> Perljam: thanks! I put a comment before __DATA__ because perl6 assumed it was a function call. So I need $line =~ /__DATA__/ - does that still work?

[22:04] <PerlJam> $line ~~ /^__DATA__$/;

[22:05] <PerlJam> or even $line ~~ /^^ __DATA__ $$/;

[22:05] <PerlJam> but you need to use ~~ rather than =~   :)

[22:07] *** molecules left
[22:07] <PerlJam> maybe /^^ '#__DATA__' $$/ for you

[22:08] <dotan> That's the whole line, isn't it? might as well just use string equality.

[22:08] *** alester left
[22:09] <PerlJam> yep

[22:09] <PerlJam> whatever works for you

[22:10] <dotan> That link about twigils looks promising. $=__DATA__ perhaps.

[22:10] *** gbacon joined
[22:10] <lue> ohai o/

[22:11] <PerlJam> It's $=DATA and @=DATA whenever it gets implemented

[22:11] <PerlJam> there is no more __DATA__

[22:15] <oha> i must have done something wrong, but i keep getting PackFile_unpack: This Parrot cannot read bytecode files with version 8.0. after i've recompiled parrot and rakudo. any hint?

[22:16] <PerlJam> oha: I dunno, but I had the same problem.  I nuked my previous parrot installations and reinstalled and it went away.

[22:18] <oha> i'll try

[22:26] *** amkrankruleuen joined
[22:27] <dotan> Is there @ARGV? command line arguments in some other shape?

[22:29] <PerlJam> @*ARGS

[22:29] <dotan> thanks

[22:32] *** sundar left
[22:40] <sjohnson> rakudo: say "hi there";

[22:40] <p6eval> rakudo f196e8: OUTPUT«hi there␤»

[22:44] *** colomon left
[22:45] <oha> PerlJam, i think i've found the bug

[22:46] <oha> i would like to have you to check it first

[22:46] *** stepnem left
[22:47] *** stepnem joined
[22:50] *** dotan left
[22:52] *** tylercurtis left
[23:00] *** meppl left
[23:18] *** colomon joined
[23:33] *** mscha left
[23:40] *** snarkyboojum joined
[23:44] *** supernovus joined
[23:44] <supernovus> g'day #perl6

[23:44] <jnthn> o/ supernovus 

[23:46] <[particle]> jnthn: who's running rakudo.org? i wanna get google analytics working there so we can get metrics on rakudo star traffic

[23:47] <[particle]> alester? pmichaud?

[23:47] <supernovus> So what are the chances of getting DateTime::Utils included with R* ?

[23:48] <[particle]> does pls know about it, and does it pass its tests?

[23:48] <[particle]> if so, then there's not a bad chance

[23:48] <supernovus> [particle]: I'm not sure if pls/proto has it listed yet, who would I ask about adding it? And yeah, the tests all pass.

[23:50] <colomon> supernovus: masak

[23:50] <jnthn> [particle]: I believe alester

[23:50] <colomon> though, hmm... a lot of us may actually have permission to do it.

[23:51] <jnthn> [particle]: And yes, good idea.

[23:52] <[particle]> supernovus: fork masak's proto repo at github, modify the pls/poc-projects.list, and send a pull request

[23:52] <[particle]> you should modify proto's projects.list, too

[23:52] <colomon> what [particle] said, that's the nice way of doing it.  :)

[23:52] <supernovus> [particle]: Cool, I'll do so.

[23:52] <[particle]> proto needs some docs to that effect in the readme

[23:53] <[particle]> supernovus: care to write them in a separate commit?

[23:55] <supernovus> [particle]: Sure.

[23:56] <[particle]> supernovus++

[23:57] *** Psyche^ joined
[23:59] <cxreg> [particle]: regarding passing tests, is it troublesome if you need to jump through hoops to make them pass?

[23:59] <cxreg> like, say, MiniDBI, requires you to set up database with a given port, user, password, etc

[23:59] *** amkrankruleuen left
