[00:00] <sorear> I hesitate to use the word "bad", it's very judgemental

[00:01] *** envi joined
[00:01] <tadzik> the PIR (Parrot intermediate representation, quite a low-level language) is barely faster than Perl 5 now, and not in all the cases I think

[00:01] <sorear> parrot's scope is incredibly large for <20 active contributors

[00:02] <javuchi> i was planing to implement a language on it

[00:02] <javuchi> but if you say it is so bad

[00:02] <javuchi> i have my doubts

[00:02] <sorear> javuchi: are you doing high-performance computing work?

[00:03] <flussence> PIR as fast as p5? That sounds quite encouraging actually

[00:03] <javuchi> i'm looking for a good comprimise

[00:03] <sorear> Parrot never had speed as its only goal.  if speed is *your* *only* goal, you want a VM that was designed for speed

[00:04] <javuchi> can you point me (even if it is off-topic) a place for a good comparison between different open source virtual machines?

[00:04] <javuchi> just fo the matter to choose for my project

[00:04] <tadzik> flussence: well, I have my stupid benchmark I run from time to time

[00:04] <sjohnson> Trashlord: that makes two of us (soon)

[00:04] <sorear> there are, AFAIK, no good general VMs for high-performance work

[00:04] <sorear> you'll need to put together your own... LLVM is a good starting point

[00:05] *** Slimcea_boy joined
[00:05] <sorear> javuchi: the great computer language shootout might be a good start

[00:05] <flussence> bah, sorear beat me to it

[00:05] <flussence> link: http://shootout.alioth.debian.org/

[00:05] <sorear> javuchi: if you have other goals besides speed, now would be a good time to mention them

[00:06] <javuchi> i'm looking for something generalist, like parrot is

[00:06] <javuchi> easy assembler

[00:06] <javuchi> small

[00:06] <javuchi> well mainteined

[00:06] <javuchi> that kind of things

[00:07] *** constant joined
[00:07] *** constant left
[00:07] *** constant joined
[00:08] <sorear> Parrot's #1 goal is to make developing languages easy

[00:09] <javuchi> that's why i like parrot

[00:09] <javuchi> the problem is speed

[00:09] <javuchi> when is it getting better?

[00:10] <tadzik> every day. Slowly, yes. But the GC is being worked on, and there are plans for the new opcode set, leading to better JIT... one day

[00:10] <javuchi> well... it is funny, because it started in 2003 if i'm not wrong

[00:11] <javuchi> should i wait until 2020 for a reasonable speed?

[00:12] *** silug joined
[00:13] <dukeleto> javuchi: would you like to help make parrot faster?

[00:14] <tadzik> I'm sure #parrot folks will give you more appropriate answers. However, I see Parrot getting faster every release, sometimes twice as fast, sometimes 30% faster. And the big changes are still before'em

[00:15] <javuchi> sure, why not dukeleto

[00:20] <sorear> if you read about the history of the parrot project you'll see that it's studded with infighting and politics

[00:21] <sorear> that's basically behind us now, but it still means that you can't count 10 years as progress

[00:22] *** javuchi left
[00:24] <dalek> 6model: 3629a41 | jnthn++ | dotnet/ (3 files):

[00:24] <dalek> 6model: [dotnet] Various tweaks to get handler setup working enough for us to set up return exception handlers.

[00:24] <dalek> 6model: review: http://github.com/jnthn/6model/commit/3629a414155800a142b85e0f93e4ced33fc4a621

[00:24] <dalek> 6model: b11ad22 | jnthn++ | t/nqp/ (2 files):

[00:24] <dalek> 6model: We now pass 20-return.t and 48-closure.t.

[00:24] <dalek> 6model: review: http://github.com/jnthn/6model/commit/b11ad221ca8501b2d035ef96bedb5d06eddbccae

[00:25] <Limbic_Region> actually, I am surprised I can't find a better description of the road map than http://trac.parrot.org/parrot/roadmap

[00:25] * Limbic_Region is going to wander over to #parrot and ask there

[00:27] *** stkowski left
[00:41] *** dnl- joined
[00:43] *** jaldhar joined
[00:44] <tadzik> goodnight o/

[00:45] *** tadzik left
[00:45] *** dnl left
[00:55] *** jferrero left
[01:01] *** krakan joined
[01:03] *** araujo left
[01:10] *** Sarten-X left
[01:10] *** krakan left
[01:21] *** _twitch joined
[01:24] *** Sarten-X joined
[01:25] *** estrabd_afk left
[01:26] *** Slimcea_boy left
[01:28] *** cdarroch left
[01:32] *** araujo joined
[01:34] * jnthn -> sleep

[01:43] *** krakan joined
[01:43] *** patspam left
[01:48] *** krakan left
[01:55] *** risou left
[02:06] *** krakan joined
[02:11] *** krakan left
[02:20] *** krakan joined
[02:20] *** nexusone joined
[02:28] *** krakan left
[02:28] *** krakan joined
[02:35] *** krakan left
[02:53] *** dnl- left
[02:58] *** eternaleye_ joined
[03:11] *** tylercurtis joined
[03:30] *** wooden left
[03:36] *** y3llow_ joined
[03:38] *** nymacro joined
[03:38] *** nymacro left
[03:41] *** krakan joined
[03:41] *** wooden joined
[03:41] *** wooden left
[03:41] *** wooden joined
[03:46] *** krakan left
[03:54] *** wooden left
[03:55] *** wooden joined
[03:55] *** wooden left
[03:55] *** wooden joined
[04:00] *** krakan joined
[04:15] *** Sarten-X left
[04:16] *** ggoebel left
[04:18] *** _twitch left
[04:38] *** meppl joined
[04:40] <eternaleye> rakudo: .say for (Int ~~ Nil), (1 ~~ Nil), (Mu ~~ Nil)

[04:40] <p6eval> rakudo 479650: OUTPUT«0␤0␤0␤»

[04:41] <eternaleye> Oh good, it matches the spec' now

[04:42] <eternaleye> Or at least, what was stated to be correct last time I tried that and got 1\n0\n1

[04:42] *** nexusone left
[05:01] <sorear> I wonder if there's any way to implement lists in Perl 6 that's as efficient as the Perl 5 way.

[05:01] *** agentzh joined
[05:03] *** Sarten-X joined
[05:06] <sorear> TimToady: Who do I get to credit with the devilish genius of the MARK stack?

[05:07] *** Limbic_Region left
[05:13] *** toebu joined
[05:20] *** pythonian4000afk is now known as pythonian4000

[05:28] <sorear> current niecza, before lists refactor: 56 us/cycle on perf/itmark.pl

[05:30] <sorear> 600us rakudo; 158ns perl5 :/

[05:31] <sorear> still 400 times slower

[05:35] <sorear> 117ns for Parrot.  I'm amazed.

[05:40] <dalek> niecza/master: eb2e899 | sorear++ | perf/itmark.p (2 files):

[05:40] <dalek> niecza/master: Add Perl 5 and PIR versions of itmark

[05:40] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/eb2e899c3e2dae5a42b4341cbdc92da094aeeebf

[06:41] *** Trashlord left
[06:42] *** araujo left
[06:43] *** Trashlord joined
[06:53] *** agentzh left
[06:56] *** Chillance left
[07:08] *** _kaare joined
[07:35] *** javuchi joined
[07:35] *** javuchi left
[07:49] *** kanishka joined
[07:55] *** fda314925 left
[07:56] *** fda314925 joined
[07:58] *** kanishka left
[07:59] *** tadzik joined
[07:59] <tadzik> hello

[08:00] *** plobsing left
[08:15] *** drbean joined
[08:42] *** araujo joined
[08:48] *** Axius joined
[08:51] *** Ross joined
[08:56] *** mavrc joined
[09:00] *** Axius_ joined
[09:03] *** Lorn left
[09:03] *** Axius left
[09:08] *** Guest59783 joined
[09:14] *** Lorn joined
[09:35] *** Axius_ left
[09:36] *** am0c^ joined
[10:04] *** tadzik left
[10:04] *** kjeldahl joined
[10:10] *** icwiener joined
[10:10] *** molaf joined
[10:13] *** meteorjay joined
[10:15] *** Ross left
[10:19] *** timbunce joined
[10:20] <x3nU> omg difference in speed beetwen rakudo 2010.10 and older is amazing

[10:20] <x3nU> it's because that .flip change probably

[10:20] <x3nU> my euler problem 36 script

[10:20] <x3nU> now completes in much less than half hour

[10:21] <x3nU> on older versions it took half day

[10:32] <frettled> nice!

[10:35] *** pythonian4000 is now known as pythonian4000afk

[10:36] *** colbseton` joined
[10:56] <jnthn> oh hai, #perl6

[10:58] *** Gothmog_ joined
[11:01] *** ggoebel joined
[11:02] *** tadzik joined
[11:05] *** wamba joined
[11:20] <colomon> \o

[11:21] <tadzik> o/

[11:22] *** am0c^ left
[11:22] <jnthn> o/ colomon, tadzik 

[11:44] *** MayDaniel joined
[11:56] *** meppl left
[12:04] *** kcwu left
[12:07] *** kcwu joined
[12:08] *** MayDaniel left
[12:09] *** Lorn left
[12:18] *** muixirt joined
[12:19] *** dnl joined
[12:20] <dnl> moinsen

[12:26] *** MayDaniel joined
[12:30] *** clkao joined
[12:30] *** clkao left
[12:31] *** clkao joined
[12:35] *** risou joined
[12:40] *** MayDaniel left
[12:46] *** Lorn joined
[12:48] *** whiteknight joined
[12:48] *** DarthGandalf left
[12:49] *** Chillance joined
[12:54] *** DarthGandalf joined
[13:04] *** Ross joined
[13:04] *** Ross left
[13:04] *** Ross joined
[13:16] *** MayDaniel joined
[13:21] *** Patterner left
[13:32] *** Psyche^ joined
[13:32] *** Psyche^ is now known as Patterner

[13:46] *** icwiener_ joined
[13:47] *** icwiener left
[13:47] *** dnl left
[13:55] *** dnl joined
[14:00] *** colomon_ joined
[14:01] *** colomon left
[14:04] *** colomon_ left
[14:05] *** sftp left
[14:06] *** wamba left
[14:10] <dalek> 6model: e455223 | jnthn++ | dotnet/runtime/Metamodel/Representations/RakudoCodeRef.cs:

[14:10] <dalek> 6model: [dotnet] Comment improvements, and give our code object representation a slot for any dispatch candidates it will operate over, in the case that it's a dispatch routine.

[14:10] <dalek> 6model: review: http://github.com/jnthn/6model/commit/e4552237bb94def23db09af61137523a61fd0e86

[14:10] *** prettyrawr joined
[14:11] *** dnl left
[14:11] *** colomon joined
[14:12] *** prettyrawr left
[14:14] *** sftp joined
[14:16] *** patspam joined
[14:26] *** masonkramer joined
[14:30] *** sftp left
[14:45] *** Ross left
[14:54] *** icwiener joined
[14:55] *** icwiener_ left
[14:58] <dalek> 6model: 2ad10c2 | jnthn++ | / (6 files):

[14:58] <dalek> 6model: [dotnet] This does the core of the multi-dispatch switch. Rip out the old separate candidate list storage. Store multi candidates in the dispatch routine's dispatchees slot (instantiations for nested scopes NYI, though). Use nearest outer dispatch list when entering the multi dispatcher, tossing all the slow and failure-prone named lookup stuff. Update NQPSetting to not pass the name along to the dispatcher entry call. This passes all tests we did bef

[14:58] <dalek> 6model: review: http://github.com/jnthn/6model/commit/2ad10c2d03b518868ef03d9ad7101d368da68285

[15:01] *** icwiener_ joined
[15:02] *** icwiener left
[15:05] *** icwiener joined
[15:06] *** sftp joined
[15:09] *** icwiener_ left
[15:26] *** colbseton` left
[15:26] *** colbseton` joined
[15:33] *** tadzik left
[15:43] <dalek> rakudo: 5f5bae4 | Util++ | src/core/Complex.pm:

[15:43] <dalek> rakudo: [core/Complex.pm] Fixed indenting

[15:43] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/5f5bae446432c01600606d5a154f8477f4f917c9

[15:46] *** risou left
[15:58] <dalek> 6model: 0d78282 | jnthn++ | dotnet/ (2 files):

[15:58] <dalek> 6model: [dotnet] Add experimental support for :scope('outer') to PAST::Var (curious to see how pmichaud++ reacts), which does a lexical lookup but skipping the current scope. Currently, bind not supported, and of course :isdecl is invalid.

[15:58] <dalek> 6model: review: http://github.com/jnthn/6model/commit/0d7828213e3ba966575fba4177a65bcb80cd4666

[15:58] <dalek> 6model: aa4bd85 | jnthn++ | dotnet/ (2 files):

[15:58] <dalek> 6model: [dotnet] Instantiate protos in inner routines to create dispatch routines with the candidate list for that block. We actually do this by copying the most immediately outer instantiation's candidate list and then adding the new ones to the list, which seems likely-ish to get closure semantics right while giving the semantics as per spec. It's very much an instantiation in that it shares body and other bits with the original proto, though.

[15:58] <dalek> 6model: review: http://github.com/jnthn/6model/commit/aa4bd8523af9891702eb8989869184977102752c

[15:58] <jnthn> TimToady++ TimToady++ # updated multi spec is SO much saner to implement

[16:13] *** wamba joined
[16:19] *** dnl joined
[16:30] <dalek> 6model: b3e555f | jnthn++ | dotnet/runtime/Runtime/ (2 files):

[16:30] <dalek> 6model: [dotnet] Tiny refactor to enable a start to be made integrating the multi-dispatch cache.

[16:30] <dalek> 6model: review: http://github.com/jnthn/6model/commit/b3e555f7c58e2a6ecb0479b05324e64b1e083c62

[16:30] <dalek> 6model: 92997a3 | jnthn++ | dotnet/runtime/ (2 files):

[16:30] <dalek> 6model: [dotnet] Integrate that multi-dispatch cache I designed on the train a while back. Seems to help, or so says the (RedGate profiler)++.

[16:30] <dalek> 6model: review: http://github.com/jnthn/6model/commit/92997a3ba739a43b280ea8ec6f3fbced070ffec2

[16:35] *** masonkramer left
[16:39] * araujo making some changes to get 'infix' notation

[16:41] *** Guest59783 left
[16:55] *** Ross joined
[17:15] *** MayDaniel left
[17:16] *** orafu joined
[17:18] *** espadrine joined
[17:22] *** icwiener_ joined
[17:23] *** espadrine left
[17:23] *** espadrine_ joined
[17:23] *** icwiener left
[17:30] *** Chat1770 joined
[17:30] *** Chat1770 left
[17:33] *** timbunce left
[17:42] *** Bzek left
[17:48] *** Bzek joined
[18:05] *** MayDaniel joined
[18:16] *** dnl left
[18:20] *** dnl joined
[18:33] *** Trashlord left
[18:38] *** radu joined
[18:40] *** radu left
[18:42] *** envi left
[18:44] *** jhuni joined
[18:49] *** x3nU left
[18:50] *** alester joined
[18:50] *** x3nU joined
[18:52] *** MayDaniel left
[18:52] *** molaf_ joined
[18:54] <dukeleto> If anyone would like to be involved with Google Code-In, you are cordially invited to #gci on irc.perl.org

[18:55] *** molaf left
[18:56] *** Lorn left
[19:00] * mberends joins

[19:06] *** molaf_ left
[19:12] *** rindolf joined
[19:12] <rindolf> Hello everyone.

[19:13] *** Lorn joined
[19:20] *** colbseton` left
[19:23] *** jferrero joined
[19:46] *** MayDaniel joined
[19:51] *** Lorn left
[19:53] *** patspam left
[19:54] *** patspam joined
[19:59] *** Chat2151 joined
[19:59] *** Chat2151 left
[20:11] <dalek> 6model: cac2fa6 | jnthn++ | dotnet/compiler/ (2 files):

[20:11] <dalek> 6model: [dotnet] Update JnthnNQP to parse a * as the sole body of a proto and turn it into a dispatcher call. Do it a bit differently from STD, since we don't parse * at all otherwise.

[20:11] <dalek> 6model: review: http://github.com/jnthn/6model/commit/cac2fa66e4cea7393f3d5eea163a32c6f655d92a

[20:11] <dalek> 6model: 413bae8 | jnthn++ | common/NQP/NQPSetting.pm:

[20:11] <dalek> 6model: [common] Replace explicit multi-dispatcher ops with a proto with a plain body of *.

[20:11] <dalek> 6model: review: http://github.com/jnthn/6model/commit/413bae8e277e66468edc61f221c71040b10a0684

[20:15] *** wamba left
[20:17] *** MayDaniel left
[20:21] *** icwiener_ left
[20:22] *** Lorn joined
[20:26] <jnthn> TimToady: You ever considered what happens in a proto if instead of actually doing the multi invocation, somebody returns a closrue that will go and do it later on? Seems that it just works out naturally though... http://gist.github.com/655709

[20:27] <dalek> 6model: aa95937 | jnthn++ | dotnet/compiler/ (2 files):

[20:27] <dalek> 6model: [dotnet] Implement {*} parsing in JnthnNQP so that we can enter the multi-dispatcher at any chose point in the proto.

[20:27] <dalek> 6model: review: http://github.com/jnthn/6model/commit/aa95937b4aeb06068c0a27ac070890a9a09c2e09

[20:27] <dalek> 6model: df06e98 | jnthn++ | dotnet/runtime/Runtime/Ops.cs:

[20:27] <dalek> 6model: [dotnet] Fix a silly thinko - we want the capture passed to the proto, always.

[20:27] <dalek> 6model: review: http://github.com/jnthn/6model/commit/df06e984dbd345a039a4c9f2fa886ce28716ab45

[20:30] *** molaf joined
[20:39] *** pythonian4000afk is now known as pythonian4000

[20:41] *** rindolf left
[20:45] *** justatheory left
[20:46] *** justatheory joined
[20:52] *** mavrc left
[21:05] <TimToady> jnthn: that's fine, as long as we still end up with a new &foo in each new multi scope

[21:06] <jnthn> TimToady: Oh, we certainly do

[21:06] <jnthn> TimToady: It's a seperate object instance. :-)

[21:07] *** alester left
[21:09] <jnthn> With a separate candidate list stored per instance.

[21:13] *** whiteknight left
[21:27] *** MayDaniel joined
[21:35] *** x3nU is now known as Yorp

[21:35] *** Yorp is now known as x3nU

[21:38] *** icwiener joined
[21:46] *** _kaare left
[21:56] <jnthn> rakudo: my @x = 1,2,3; my $i = @x.iterator; say $i.WHAT

[21:56] <p6eval> rakudo 5f5bae:  ( no output )

[21:56] <jnthn> rakudo: say "alive"

[21:57] <p6eval> rakudo 5f5bae: OUTPUT«alive␤»

[21:57] <jnthn> rakudo: my @x = 1,2,3; my $i = @x.iterator; say "alive"

[21:57] <p6eval> rakudo 5f5bae: OUTPUT«alive␤»

[21:57] <jnthn> rakudo: my @x = 1,2,3; my $i = @x.iterator; $i.^methods(:local)>>.name>>.say

[21:57] <p6eval> rakudo 5f5bae: OUTPUT«new␤reify␤»

[21:57] <jnthn> rakudo: my @x = 1,2,3; my $i = @x.iterator; say $i.get; say $i.get;

[21:57] <p6eval> rakudo 5f5bae: OUTPUT«Method 'get' not found for invocant of class 'ListIter'␤  in main program body at line 22:/tmp/x1tyf9USTf␤»

[21:57] <sorear> jnthn: Would you be comfortable with declaring Iterator to be an implementation detail and requiring portable code to use gather/take, series ops, for loops, etc?

[21:58] <jnthn> sorear: I'd guess "no"

[21:58] <jnthn> sorear: But pmichaud is the guy who understands this stuff. :-)

[21:58] * jnthn tries to work out what to call on an iterator to get a value from it.

[21:59] <jnthn> rakudo: my @x = 1,2,3; my $i = @x.iterator; say $i.munch;

[21:59] <sorear> You can't

[21:59] <p6eval> rakudo 5f5bae: OUTPUT«Method 'munch' not found for invocant of class 'ListIter'␤  in main program body at line 22:/tmp/Grqu8UBviF␤»

[21:59] <sorear> That's not how Rakudo iterators work

[21:59] <sorear> I do -not- want to be constrained to the Rakudo iterator model

[21:59] <dalek> 6model: d6d3205 | jnthn++ | dotnet/LHF.txt:

[21:59] <dalek> 6model: [dotnet] Add a Low Hanging Fruit file to suggest jumping in points for anyone interested in doing so.

[21:59] <dalek> 6model: review: http://github.com/jnthn/6model/commit/d6d32050aa4bf22764b6636bb269d2277dbb8245

[22:00] <sorear> if $i is a RakudoIterator, $i.reify returns a Parcel

[22:00] <sorear> each element of $i.reify is either a value or a fresh RakudoIterator

[22:01] <sorear> look at !fill in src/builtins/List.pir for how to extract a value from a RakudoIterator - it requires a loop and the splice op

[22:02] <jnthn> Ah, yes, it's an immutable iterator model.

[22:05] <jnthn> sorear: I'm mostly looking 'cus I'm wanting to do for loops in NQP.Net.

[22:05] <jnthn> NQP on Parrot just uses the Parrot idea of iterators.

[22:06] <sorear> I spent much time last week redesigning for loops for Niecza

[22:08] <lue> ohai o/

[22:19] *** jferrero left
[22:24] *** proller_ joined
[22:24] *** proller joined
[22:26] *** envi joined
[22:26] *** proller left
[22:36] <jnthn> sorear: How did that end up looking?

[22:36] <jnthn> sorear: Does it call map?

[22:37] <jnthn> I guess the devil is in how your .map looks. :-)

[22:38] <jnthn> *devil in the detail

[22:38] <sorear> Well, I haven't had tuits to finish coding the new design

[22:39] <jnthn> Rakudo went through a LOT of iterations of list design before getting to what we have today, fwiw. This has been the least problematic design so far.

[22:41] <sorear> I'm using a lot of elements of the design

[22:41] <sorear> I could probably even make it compatible, but only by using horribly wrong names for stuff

[22:45] <jnthn> Eh well, I'll try and figure out for in NQP.NET tomorrow or so. :-)

[22:45] <jnthn> Quite happy to have got the multi dispatch stuff in today. :-)

[22:58] *** wooden left
[23:01] *** wooden joined
[23:01] *** tadzik joined
[23:03] *** tadzik1 joined
[23:06] *** tadzik left
[23:06] *** wooden left
[23:07] *** tadzik1 is now known as tadzik

[23:25] <Util> .new()  vs  .^new()

[23:26] <Util> When creating a new object of class Foo from within some other method of that class,

[23:26] <Util> which is the more correct way to call new() without hardcoding the classname?

[23:29] *** tadzik left
[23:39] *** icwiener left
[23:43] *** muixirt left
[23:48] *** MayDaniel left
[23:53] *** Ross left
[23:57] *** pythonian4000 is now known as pythonian4000afk

