[00:08] <lichtkind> when does lines know when to read a file, when its a string quoted with the adverb :path ?

[00:09] <lichtkind> i mena the lines command

[00:09] <lichtkind> mean

[00:10] *** justatheory left
[00:14] <lichtkind> TimToady: and should chars for consistancy not return a list with all character which would in num context do the same as now?

[00:16] *** mavrc left
[00:20] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[00:21] *** risou left
[00:25] *** gimix joined
[00:25] *** ch3ck joined
[00:25] <ch3ck> rehi

[00:27] <lichtkind> hai ch3ck 

[00:27] <ch3ck> hi lichtkind 

[00:28] <lichtkind> ch3ck: almost leaving can i help you?

[00:28] <ch3ck> lichtkind: at the moment i don't need help, thx

[00:29] <lichtkind> kthxgby :)

[00:29] <ch3ck> bye

[00:29] *** lichtkind left
[00:31] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[00:35] *** silug joined
[00:36] *** sftp left
[00:47] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_lookup_tablet

[00:52] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[00:57] *** bluescreen joined
[00:58] *** Guest54531 left
[00:58] *** bluescreen is now known as Guest3334

[01:05] *** Trashlord left
[01:17] *** rgrau_ left
[01:33] *** envi joined
[01:42] *** ch3ck3r joined
[01:43] *** ch3ck3r left
[01:50] *** QinGW joined
[01:52] *** baest left
[01:54] *** alester joined
[01:57] *** masak joined
[01:57] <masak> 'sup, #perl6.

[01:57] *** baest joined
[01:57] <ch3ck> gugu masak 

[01:57] <masak> :)

[01:58] <diakopter> http://www.indeed.com/jobtrends?q=cobol,+ada,+ruby,+python,+flex,+php,+perl,+C%2B%2B,+C%23,+javascript,+java&l=

[01:58] * masak is late with his November blogging today

[01:59] <masak> diakopter: COBOL overtaking Perl? apart from that, I don't see anything in that graph that surprises me.

[01:59] <diakopter> where do you see that

[02:00] <diakopter> cobol's at the bottom

[02:00] <masak> oh.

[02:00] <diakopter> C# & javascript overtaking perl recently

[02:00] <masak> right, that's C#.

[02:00] <masak> then I have no further questions, your honor.

[02:02] <diakopter> oh wait.. /me misread too. C# & javascript overtook Perl in mid '06\

[02:03] <masak> yes.

[02:03] <diakopter> Perl seems to be converging with C++ though, maybe overtaking it eventually :)

[02:04] <diakopter> scarily, the growth of php continues unabated

[02:04] <masak> worse is better.

[02:04] <diakopter> python rises quickly too

[02:05] <masak> that sounds scary on many levels.

[02:05] <diakopter> :P

[02:05] <diakopter> pretty soon, all programming job descriptions will include all of these keywords ;)

[02:06] <diakopter> SQL & C are way up there at 5% (of *all* job descriptions)

[02:06] <diakopter> who knows if "C" is in programming context, though.

[02:07] <Khisanth> indeed needs more colors ...

[02:08] <masak> seems we need to do more of this: http://twitter.com/NegativeK/status/6463457343832065

[02:08] <masak> ttjjss === tadzik?

[02:09] <masak> seems so. tadzik++

[02:23] *** Chillance joined
[02:33] <colomon> o/

[02:33] <masak> \o

[02:34] *** ch3ck3r joined
[02:38] *** ch3ck left
[02:39] *** alester left
[02:47] *** Raynes left
[02:48] *** agentzh joined
[02:54] <dalek> niecza: 148689c | sorear++ | / (4 files):

[02:54] <dalek> niecza: Use a more efficient method for boxing constants

[02:54] <dalek> niecza: review: https://github.com/sorear/niecza/commit/148689cfb052d6c7a4df65f536eebd346a103091

[02:54] <dalek> niecza: 907d277 | sorear++ | / (2 files):

[02:54] <dalek> niecza: Box constants exactly once

[02:54] <dalek> niecza: review: https://github.com/sorear/niecza/commit/907d2774986ba96801bbc99713f1eb99b1ca4bd8

[02:58] <dalek> 6model: 5f2da69 | diakopter++ | / (3 files):

[02:58] <dalek> 6model: [Regex] start on PAST::Regex emission. Pending moar help from jnthn++

[02:58] <dalek> 6model: review: https://github.com/jnthn/6model/commit/5f2da698d8841e2cf2925e6dc5aa1f70cbaf7772

[03:03] <masak> blog post! http://strangelyconsistent.org/blog/november-21-2010-just-a-few-wrinkles-to-iron-out

[03:04] <masak> sorry about the late. I deviated from my usual strict regimen of lots of Perl 6 and no socializing with friends. ;)

[03:12] *** TheHarlot left
[03:12] *** TheHarlot joined
[03:12] *** whiteknight left
[03:25] <diakopter> masak: wait. what's the distinction? ;)

[03:25] <masak> heh :)

[03:26] <diakopter> between Perl 6 and socializing with friends, I mean, of course

[03:26] <diakopter> (in case someone didn't give me the benefit of the doubt in that statement :))

[03:27] <masak> oh. thought you meant between lots of Perl 6 and little socializing with friends. ;)

[03:28] <masak> alpha: class A { my $.x = 42; method foo { say $.x } }; A.new.foo

[03:28] <p6eval> alpha : OUTPUT«42␤»

[03:28] <masak> rakudo: class A { my $.x = 42; method foo { say $.x } }; A.new.foo

[03:28] <p6eval> rakudo : OUTPUT«Method 'x' not found for invocant of class 'A'␤  in 'A::foo' at line 22:/tmp/Vf8EKOC9DJ␤  in main program body at line 22:/tmp/Vf8EKOC9DJ␤»

[03:28] <masak> ah. that explains a lot.

[03:32] * masak submits rakudobug

[03:34] <masak> rakudo: class A { my $x = 42; method foo { say $x } }; A.new.foo

[03:34] <p6eval> rakudo : OUTPUT«42␤»

[03:34] <masak> that works, though.

[04:17] *** alester joined
[04:27] *** Bzek left
[04:28] *** Bzek joined
[04:34] *** meppel joined
[04:37] <masak> rakudo: sub foo {}; say &foo.wrap({ nextsame })

[04:37] <p6eval> rakudo : OUTPUT«2␤»

[04:37] <masak> this is not spec-conformant, and there's a rakudobug about it in RT already.

[04:38] <masak> but I wanted to ask: is there a way to query a wrap handle for the underlying wrapped function?

[04:38] <masak> more generally, can the wrapping process be written out as Perl 6?

[04:38] *** meppl left
[04:39] *** kanishka left
[04:43] <sorear> the wrapping process feels brokenly overengineered to me

[04:44] <masak> can you back that up with reasons? because to the extent that I grok it, I quite like it.

[04:45] <masak> I especially like the fact that a wrapping can be hotswapped without the programmer having to worry about the other wrappings above and/or below.

[04:45] <sorear> look at jnthn's problems.  sub revectoring can be orthogonal to dispatch

[04:45] <sorear> but it's not

[04:45] <masak> I'm not familiar with the term 'revectoring'.

[04:45] <masak> is it related to the thing with lexical caching?

[04:46] <sorear> I'm not familiar with the term 'lexical caching'.

[04:46] <masak> :)

[04:47] <sorear> revectoring is just making a sub point somewhere else

[04:47] <masak> I know that the set of multis that can be seen can vary between every lexical scope. what I meant with 'lexical caching' was simply storing that information on the lexical block somewhere after calculating it once.

[04:47] <sorear> code indirections get called vectors sometimes.  especially stuff like interrupt vectors and opcode vectos

[04:48] <masak> ah. I'd never understood that usage of 'interrupt vector'. thanks.

[04:50] <TimToady> masak: your blog is incorrect

[04:50] <TimToady> see S02:3802

[04:50] * masak does so

[04:51] <masak> er. but I know that part.

[04:51] <masak> so I must have written something unclearly somewhere.

[04:51] <masak> TimToady: where?

[04:52] <TimToady> Won't work, due to a wonderful little invention called unspace,

[04:52] <TimToady> that's in a qq, so it's not an unspace

[04:52] <masak> oh!

[04:52] <TimToady> mind, rakudo doesn't implement it right yet

[04:52] <masak> I see.

[04:52] <TimToady> but it's specced to work

[04:52] <masak> that is news to me.

[04:53] <TimToady> that's why I said it.  :)

[04:53] <masak> TimToady++

[04:53] * masak updates the post

[04:53] <masak> oh, and by the way: that's good news. I like that a backslash solves the problem.

[04:54] <TimToady> metoo, which is why we outlawed unspace in quotes (at top level only, of course)

[04:55] <masak> oh, I remember that now.

[04:55] <masak> rakudo: my $foo = "work"; say "This should $foo\[]"

[04:55] <p6eval> rakudo : OUTPUT«This should work␤»

[04:55] <masak> er.

[04:55] <masak> rakudo: my $foo = "work"; say "This should $foo\</a>"

[04:55] <p6eval> rakudo : OUTPUT«postcircumfix:<{ }> not defined for type Str()␤  in main program body at line 1␤»

[04:55] * masak submits rakudobug

[04:56] <masak> rakudo: say "\<"

[04:56] <p6eval> rakudo : OUTPUT«<␤»

[04:56] <TimToady> std: my $x; "$x[$y]"

[04:56] <p6eval> std a194beb: OUTPUT«===SORRY!===␤Variable $y is not predeclared at /tmp/IFbJELh2v3 line 1:␤------> my $x; "$x[$y⏏]"␤Check failed␤FAILED 00:01 121m␤»

[04:56] <TimToady> std: my $x; "$x\[$y]"

[04:56] <p6eval> std a194beb: OUTPUT«===SORRY!===␤Variable $y is not predeclared at /tmp/sMj1q7mt8A line 1:␤------> my $x; "$x\[$y⏏]"␤Check failed␤FAILED 00:01 120m␤»

[04:56] <TimToady> oops

[04:57] <masak> :)

[04:57] <TimToady> hmm

[04:57] *** ch3ck3r left
[04:57] <TimToady> oh, of course

[04:57] <TimToady> not a bug

[04:57] <masak> nope.

[04:57] <TimToady> std: my $x; "$x[syntax error]"

[04:57] <p6eval> std a194beb: OUTPUT«===SORRY!===␤Undeclared routines:␤        'error' used at line 1␤ 'syntax' used at line 1␤Check failed␤FAILED 00:01 121m␤»

[04:57] <TimToady> std: my $x; "$x\[syntax error]"

[04:57] <p6eval> std a194beb: OUTPUT«ok 00:01 120m␤»

[04:58] <TimToady> that's better

[04:58] <masak> \o/

[05:06] <masak> std: sub syntax {}; sub error {}; my $x; "$x[syntax error]"

[05:06] <p6eval> std a194beb: OUTPUT«ok 00:01 121m␤»

[05:06] *** am0c joined
[05:06] <masak> nom &

[05:06] *** masak left
[05:11] *** scp1 joined
[05:33] *** meppel left
[05:36] *** kaare joined
[05:37] *** kaare is now known as Guest7281

[05:41] *** QinGW left
[05:50] <lue> ohayo o/

[05:51] <sorear> TimToady: which is more correct - the speccish rules about bracketed postfix constructs, or the STDish rules about <EXPR(item %methodcall)> <?after <[ \] ) } > ]>> ?

[06:08] *** alester left
[06:09] *** Raynes_ joined
[06:10] *** AndroUser joined
[06:11] *** AndroUser is now known as colomon-droid

[06:12] <colomon-droid> o/

[06:13] *** Guest7281 is now known as kaare_

[06:13] *** Raynes_ left
[06:20] *** QinGW joined
[06:22] <TimToady> sorear: I can't answer that until I know how they diverge

[06:22] *** masak joined
[06:24] *** colomon-droid left
[06:30] <lue> hai masak o/

[06:31] <masak> greetings, lue.

[06:32] <masak> lue: how's the Pod hacking coming along?

[06:32] <lue> thanks for turning me to theoatmeal.com, by the way

[06:33] <masak> you're welcome :)

[06:33] <lue> OK-ish. I think there's a flaw in my understanding of grammars .oO(I should make a blag toast)

[06:33] <masak> also, you should publish your code.

[06:33] <masak> whole or in parts.

[06:34] <masak> every time I do that, good comes out of it in one way or other.

[06:34] <sorear> ===SORRY!=== Regex()<instance> at (eval) line 1

[06:35] <masak> it's official. sorear has now transformed into a Perl 6 compiler.

[06:36] <sorear> hee.

[06:36] <sorear> this stuff is breaking a lot

[06:36] <lue> I will publish the problem code in my blog post (Although putting something on git that *doesn't work* seems silly to me, so not that kind of publishing.)

[06:36] * lue writes blog post

[06:37] <masak> lue: as soon as the first test passes -- which is, like, five minutes into coding, right? -- you have something that no longer doesn't work. :)

[06:37] <dalek> niecza: 62645be | sorear++ | / (2 files):

[06:37] <dalek> niecza: [v6] Add optional Niecza::Grammar use

[06:37] <dalek> niecza: review: https://github.com/sorear/niecza/commit/62645be2fd5a4ddae949f7f3b684d2bc7e9e8a7b

[06:39] <masak> sorear: how would you describe the current state of the niecza project? is there a file somewhere that describes the current state of the niecza project?

[06:39] <sorear> in the past I'd been relying on test.pl for that

[06:40] <lue> Let me say this: I haven't written a single test yet because there's nothing to test! :(

[06:40] <masak> sorear: unless you're referring to a big comment header, that's not the level of accessibility I was referring to.

[06:40] <scp1> tests first! then more tests! the documenation, and then code!

[06:41] <masak> lue: what scp1 said.

[06:41] <sorear> TimToady: How is <blast> supposed to work?  niecza is entering <blast> and immediately hitting <?before '{'> || <.panic: "Missing block">, and I can't see any reason why it *shouldn't*

[06:41] <masak> lue: I see you have some TDD to learn and look forward to. when you do, I bet you'll like it.

[06:41] <scp1> It's awesome

[06:42] <masak> it's even more awesome with something like tote.

[06:42] <masak> oops. should have released tote by now... :/

[06:42] <scp1> What's tote?

[06:42] <sorear> masak: hrm.  Is there a good example of what you're looking for in Rakudo?

[06:42] <masak> scp1: http://strangelyconsistent.org/blog/helpfully-addictive-tdd-on-crack

[06:43] <masak> sorear: "Completed ROADMAP items" in https://github.com/rakudo/rakudo/blob/master/docs/ROADMAP

[06:44] <lue> I have yet to take a formal CS class (the best offered at my high school is the usual "And this is how you open WORD! Word is used to WRITE PAPERS AND STUFF!!1!")

[06:44] <lue> .u interrobang

[06:44] <phenny> U+203D INTERROBANG (‽)

[06:45] <sorear> TDD isn't taught in real CS classes anyway

[06:45] <masak> lue: I don't have a formal CS background either.

[06:45] <scp1> masak, Cool, have you started hacking on it yet? :)

[06:45] <masak> lue: and what sorear said. it's more of an engineering thing.

[06:45] <masak> scp1: oh, I've used it privately for over a year now...

[06:45] <masak> scp1: (it rocks)

[06:45] <scp1> heh, nice

[06:46] <masak> it's actually a little bit dangerous, from the viewpoint of forgetting to eat etc.

[06:46] <scp1> I have yet to manage to _install_ rakudo though :C Still stuck with perl5

[06:47] <scp1> masak, ooh... the world is small mate. god morgon ;)

[06:47] <masak> I had tote set up to verbally reward me when I passed more tests. it says "checkpoint! yay!", which seems to trigger endorphin releases.

[06:47] <masak> scp1: are you from .se?

[06:48] <scp1> masak, norrköping - I saw your github page

[06:48] <masak> ooh.

[06:48] <masak> uppsala here.

[06:50] <scp1> masak, you should push it, I want to see the source

[06:51] <masak> I can make a gist.

[06:52] <masak> it's still too tied to individual repositories, if I recall correctly.

[06:52] <masak> oh yes. it hardcodes the files it's monitoring.

[06:52] <masak> doesn't need to do that at all. but it does.

[06:53] <masak> scp1: https://gist.github.com/709620

[06:53] <scp1> using inotify I guess?

[06:54] <masak> I wish.

[06:54] *** Raynes_ joined
[06:54] <masak> seems I just poll modification times once every $SLEEP_TIME seconds.

[06:54] *** Raynes_ is now known as Raynes

[06:54] *** Raynes left
[06:54] *** Raynes joined
[06:54] <scp1> Linux::Inotify2 is great (and inotify rocks)

[06:55] <masak> also, when $loud is set, it uses the Mac OS X-specific command-line program 'say'.

[06:55] <masak> scp1: yes. I've seen others use it for this purpose.

[06:55] <sorear> masak: I'm writing up a prose status document now

[06:55] <masak> sorear++

[06:55] <sorear> I'd like to get niecza into a state where I can sanely ANNOUNCE: it before Tues

[06:56] <sorear> I'm not sure what that comprises though

[06:56] <sorear> I've never done this "releasing" thing before

[06:56] * masak cheers sorear on

[06:57] *** wtw joined
[07:05] <tadzik> sorear: what's wrong about the entry?

[07:08] <sorear> tadzik: most likely it doesn't exist

[07:10] <masak> tadzik++ # http://ttjjss.wordpress.com/2010/11/21/perl-6-grammars-%E2%80%93-not-only-for-parsing/

[07:11] <tadzik> edenc++ and ruoso++ for coming up with the idea

[07:11] <tadzik> sorear: https://github.com/parrot/parrot/commit/8e5d0aca8 here I am

[07:13] <tadzik> oh wow, I'm mentioned on twitter again

[07:14] <moritz_> http://www.reddit.com/r/programming/comments/e9to1/perl_6_grammars_not_only_for_parsing/

[07:15] <tadzik> oh, someone courageous posted that on proggit

[07:15] <tadzik> oh, hi moritz_ :)

[07:15] <sorear> the problem may be your name.  I hate encoding soup

[07:15] <moritz_> well, I might get a few downvotes, but I can cope with them :-)

[07:15] * sorear debugs some more

[07:16] <masak> morning, moritz_.

[07:17] <moritz_> mornin'

[07:17] * sorear notices a lack of Encode:: calls in karmalog.pm

[07:22] * lue almost done writing blag toast

[07:25] <lue> ololblagtime! https://rdstar.wordpress.com/2010/11/22/why-grammar-i-learn-cant%E2%80%BD/

[07:26] <lue> .oO(Hm. You'd think whatever controls URL encoding would've caught up to the 21st century by now...)

[07:27] <masak> lue: first off, I would recommend always using || until the specific behavior of | is implemented in Rakudo.

[07:27] <masak> lue: otherwise, when it finally is, all your code might break.

[07:28] <sorear> lue: they have.  it's quite specifically UTF-8 then encode bytes in here

[07:28] <sorear> hex

[07:29] *** jfried joined
[07:29] <lue> I'm referring to the way the encode them in URLs (the funny % stuff). I don't know, see that gives me the (false?) impression it hasn't caught up.

[07:30] <masak> lue: secondly, as a purely stylistic micro-optimization, prefer using comma (',') to tilde ('~') when printing several strings in a 'say' call. it creates fewer strings internally, is therefore marginally faster, and is easier on the eye.

[07:35] <lue> from quick skimming of S05, | would require terms to match the same beginning and end point, while || doesn't, right?

[07:35] <masak> no, that's not the difference.

[07:35] <masak> | does LTM, || does strict left-to-right.

[07:36] <masak> lue: you have a variable called $file in the sub 'importformat'. it seems to contain the slurped contents of the file. this qualifies as confusing naming to me. YMMV.

[07:37] <masak> lue: your file test.pod sounds like a genuinely good idea. I don't think you should remove it as soon as things work.

[07:38] <lue> well, at least its current incarnation as a file in the top directory. (maybe expand & mv to t/ ?)

[07:38] *** Raynes left
[07:39] <masak> lue: here's why the line '=begin Text' doesn't match <directive><delimited>: the string 'Text' doesn't march the rule <blocktype>

[07:39] <masak> (and boy would I sometimes like to have debug output that told me such debug information about my grammars)

[07:40] <masak> HTH

[07:41] <lue> *bangs head on nearby bangheadworthy object*

[07:42] <masak> told you that more eyeballs would help :)

[07:42] <masak> lue++ # blagging

[07:42] <dalek> niecza: 72c4e12 | sorear++ | docs/ (2 files):

[07:42] <dalek> niecza: [docs] prose status, more LHF stuff

[07:42] <dalek> niecza: review: https://github.com/sorear/niecza/commit/72c4e124d9ad60c6f14515e6a2c2c3823a914f21

[07:43] <sorear> masak: I'd like you to look at blob/master/docs/DIRECTIONS and tell me if that's what you wanted

[07:43] <lue> .oO(those ++'s look like bangheadworthy objects...)

[07:44] *** Woodi left
[07:45] <TimToady> sorear: blast has an alternation of <block> | <statement>, and should never LTM into block unless it starts with the '{' from the <?before '{'>

[07:46] *** Woodi joined
[07:46] <sorear> Shouldn't the || stop LTM

[07:46] <sorear> in <block>

[07:48] <TimToady> only for the right side of the ||

[07:49] <masak> sorear: looking.

[07:49] <sorear> Does [A || B] in general make exactly the same LTM as A?

[07:50] <TimToady> yes

[07:50] <TimToady> in this case, it can never call B via LTM

[07:50] <TimToady> it's only there if you call <block> outside of an LTM

[07:50] *** kjeldahl joined
[07:50] <TimToady> in that case it might fail the ||

[07:51] <sorear> I had it that way earlier - it ran into issues with [ [A || B] | C ]

[07:51] <sorear> which will never match B

[07:51] <sorear> because LTM sees that neither [A || B] nor C has B as a prefix, and so tries neither

[07:51] *** fhelmberger joined
[07:51] <TimToady> that's correct behavior

[07:52] <masak> sorear: DIRECTIONS -- very nice. just what I was looking for.

[07:52] <TimToady> in that particular case, we could warn that B is unreachable

[07:52] <sorear> so, concretely, "b" !~~ / [ [ a || b ] | c ] / ?

[07:53] <TimToady> correct, that's how STD does LTM

[07:53] <TimToady> in the block case, we can get to it by multiple paths

[07:54] <TimToady> std: default 42

[07:54] <p6eval> std a194beb: OUTPUT«===SORRY!===␤Missing block at /tmp/WuUqaJdQ3d line 1:␤------> default ⏏42␤Parse failed␤FAILED 00:01 117m␤»

[07:54] * sorear makes a one-line change to RxOp::SeqAlt::lad and runs the test

[07:55] <scp1> masak, I've started to implement it with inotify. Nice idea btw.

[07:55] <sorear> +s

[07:55] <TimToady> std: lazy 

[07:55] <p6eval> std a194beb: OUTPUT«===SORRY!===␤Bogus statement at /tmp/0jnDc4vQ4u line 1 (EOF):␤------> lazy⏏<EOL>␤Parse failed␤FAILED 00:01 119m␤»

[07:56] <TimToady> that's dropping into <statement> instead of <block>

[07:56] *** mavrc joined
[07:56] <TimToady> whereas the default case is requiring a block by calling <block> directly

[07:57] <masak> scp1: cool. let me know how it goes.

[07:58] <sorear> looks like I added the test on Sep 7 00:23

[07:58] * sorear checks the irclogs

[07:59] <lue> .oO(As the clock struck midnight, lue wondered if sleep is something he should fight. He thought, .oO(Oh, plenty fine I'll be, cos I've got plenty o' caffeine!))

[08:01] <sorear> TimToady: http://irclog.perlgeek.de/perl6/2010-09-07#i_2793271

[08:02] *** kjeldahl left
[08:04] <sorear> also, this is why a testsuite is awesome

[08:04] <sorear> I know I made the decision for || to kill LTM on purpose

[08:04] <sorear> so I git blame the test suite and it tells me exactly when I made that decision

[08:06] <TimToady> yes, well, STD very much assumes that the LTM of A||B is the LTM of A

[08:08] *** sECuRE joined
[08:10] <masak> sorear: the Internet is not just some truck that I can dump stuff on. but backlog, RT, source repository, test suite and other similar digital containers are. I use them as only slightly detached extensions of my nervous system.

[08:11] * sorear has been known to use "bionic memory" to refer to irclogs

[08:14] <masak> this is why p6eval is perhaps the most important bot around, too. its technological innovation is in some sense secondary to its social contribution: it brings Actual Code and its evaluation into the IRC conversation.

[08:14] <TimToady> note that STD's behavior is in fact specced at S05:2607

[08:16] <TimToady> s/specced/specced (poorly)/  # :)

[08:17] <moritz_> http://www.perlmonks.org/?node_id=872809 # it seems that for some developers it's REALLY hard to distinguis between a language and a compiler

[08:17] <frettled> They wouldn't be Perl 5 users, by any chance? :)

[08:18] *** redicaps joined
[08:18] <masak> lue: in your blog header, what does "Rakudo Star release 0" mean? as far as I know, there never was a release 0, and besides we're already on the fourth-soon-fifth release.

[08:18] <sorear> ok. blasts work.

[08:19] <dalek> niecza: b85fe1c | sorear++ | / (2 files):

[08:19] <dalek> niecza: Revert 4819d25 - STD depends on opposite behavior

[08:19] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b85fe1c64b707161d8d7ae94c279251d1c10a287

[08:19] <masak> moritz_: the Update part of the top post is very cute, though. :)

[08:20] <masak> moritz_: if one "can't hardly wait", does that mean that one has almost no problem waiting? :P

[08:20] <moritz_> :-)

[08:20] <lue> I need to change that, too lazy right now though :) [I will create a special one for 23 Nov. that'll be created to last around 1 year]

[08:22] <moritz_> \o/ http://www.perlmonks.org/?node_id=872821 other monks now start with Perl 6 replies :-)

[08:23] <lue> masak: release 0 was one way it was called initially [zero-indexing you know]

[08:24] <masak> lue: I have no memory of that. but you may be right.

[08:24] <sorear> masak: there is dialectal variation on the interpretation of double negatives in English, so it's best to avoid them in prose intended to be portable.

[08:24] <masak> sorear: but sometimes, I can't not use them...

[08:24] <lue> moritz_:  I suddenly get an image of Catholicism and Protestantism, only s/Catholicism/Perl 5/ and s/Protestantism/Perl 6/ :)

[08:25] <masak> "(Wow, I got the Perl 6 reply in before moritz!)" # :D

[08:26] <sorear> you can still introduce infix:<Z>

[08:26] <masak> I was thinking the same.

[08:26] <moritz_> I was wondering if I should :-)

[08:26] <masak> except it doesn't work as a list-assoc infix in Rakudo :(

[08:26] <moritz_> zip() doesn't work either

[08:27] <masak> alpha: 1,2,3 Z 4,5,6 Z 7,8,9; say "alive"

[08:27] <p6eval> alpha : OUTPUT«alive␤»

[08:27] <masak> rakudo: 1,2,3 Z 4,5,6 Z 7,8,9; say "alive"

[08:27] <p6eval> rakudo : OUTPUT«No applicable candidates found to dispatch to for 'infix:<Z>'. Available candidates are:␤:()␤:(Any $lhs, Any $rhs)␤␤  in main program body at line 22:/tmp/C9tNScxicR␤»

[08:29] <sorear> I think this is the first time I've seen spam on perlmonks

[08:29] <moritz_> not the first time for me :(

[08:29] <frettled> lue: But are we talking about the People's Front for the Liberation Palestine, or the Popular Palestinian Liberation Front?

[08:31] *** kjeldahl joined
[08:32] <TimToady> zzz &

[08:33] <diakopter> z

[08:34] <frettled> ZzzZ?

[08:35] *** Woodi left
[08:36] <lue> The Front for the Liberation of Palestinian People of course!

[08:36] *** PacoLinux left
[08:36] *** Woodi joined
[08:36] <lue> I think I've burned my eyeballs and relevant portions of my brain for tonight. Goodnight o/

[08:36] *** mavrc left
[08:39] <sorear> and I've just utterly broken STD with that last push

[08:39] <frettled> lue: Z tight

[08:39] <sorear> my module Foo { } # Unable to parse module definition

[08:43] <sorear> actually, it's trying to parse Foo as the block

[08:44] <sorear> module { } # still works.  I guess I broke <longname>

[08:48] *** gimix left
[08:54] <sorear> also broken: also is Foo; $Foo (but $! fine).  All signs point to longname

[08:59] *** baest left
[08:59] *** baest joined
[09:02] <masak> moritz_: by the way, I'm .25 through http://www.fanfiction.net/s/5782108/1/Harry_Potter_and_the_Methods_of_Rationality -- it's way above my (admittedly unfounded) expectations on fanfic.

[09:03] <moritz_> masak: I'm through all the chapters now (finished on Saturday), and waiting for the next chapter :-)

[09:03] <masak> it's still in progress? I'll read slowly, then :)

[09:04] <moritz_> but it's close to the end, I think

[09:05] <moritz_> it's 60 chapters now, and maybe 2 more to go

[09:05] <masak> oh, ok.

[09:07] <moritz_> it contains a lot of spoilers if you don't know all 7 books

[09:08] <masak> luckily, I finished the last book right before I went to see the first last movie :)

[09:08] <masak> I've had that as a tradition, to pre-read the books lazily.

[09:09] * moritz_ saw the movie yesterday

[09:09] <moritz_> not bad, IMHO

[09:10] <moritz_> I found it funny how Harry is supposed to see nearly nothing without his glasses, but you can look straight through the glasses without any distortions :-)

[09:11] <HarryS> he got laser correction

[09:11] <HarryS> off-camera

[09:12] <masak> he's just pretending to be near-blind without them. simplest explanation.

[09:12] <moritz_> there's even a scene that's blurred before he puts on the glasses

[09:13] *** hatseflats joined
[09:14] <masak> moritz_: after reading part of the fanfic, it amuses me that your only nit seems to be about some refraction index or other. :P

[09:14] <moritz_> masak: I'm currently supervising a lab experiment about lenses :-)

[09:15] <moritz_> there were other nits too, but most are really minor

[09:15] <moritz_> masak: have you read about the safety rules for transfiguration already?

[09:15] <masak> moritz_: yes, last chapter.

[09:16] <moritz_> masak: in the "order of the phoenix" movie Dumbledore turns some attacking magic by Voldemort into water :-)

[09:17] <masak> hah :)

[09:20] <moritz_> (for the innocent bystanders: transfiguring things into liquids and gases is strictly forbidden, because transfigurations are not permanent, and it will harm life if some part of the body suddenly turns into something else)

[09:20] <sorear> token alpha { <+INTERNAL::alpha+[_]> \w* } # Spot the bug

[09:21] <moritz_> not too hard :-)

[09:25] *** tzhs joined
[09:34] *** mavrc joined
[09:36] *** timbunce joined
[09:45] *** molaf joined
[09:46] *** jasonmay joined
[09:50] <masak> class Bug { has $.name }; my Bug $bug .= new( :name<Spot> }; # Spot the bug! :)

[09:52] <jnthn> } not )

[09:52] <masak> oops.

[09:53] <moritz_> that's what you get for not testing the code you show us :-)

[09:53] <jnthn> Let me guess. That was not the bug you were looking for. ;)

[09:53] <masak> wasn't meaning to introduce an actual bug, just to make a bad pun.

[09:54] *** redicaps left
[09:59] *** plobsing left
[10:01] *** gimix joined
[10:03] *** am0c left
[10:07] *** QinGW left
[10:10] *** masak left
[10:12] *** wtw left
[10:14] *** Woodi left
[10:15] *** wtw joined
[10:16] *** Woodi joined
[10:20] <dalek> niecza: 4dc0dbe | sorear++ | lib/Cursor.cs:

[10:20] <dalek> niecza: Subrule entry/exit for RX trace

[10:20] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4dc0dbe35836937590ee64cffddeff741fe290dd

[10:20] <dalek> niecza: 28f112a | sorear++ | / (3 files):

[10:20] <dalek> niecza: Fix stupid bug in alpha

[10:20] <dalek> niecza: review: https://github.com/sorear/niecza/commit/28f112a757ef2d6f553d144dd8f8b9a1de17c71b

[10:26] *** Trashlord joined
[10:41] *** dakkar joined
[10:52] *** mikehh joined
[10:56] *** leprevost joined
[10:58] <sorear> more breakage - q"foo" -> Undeclared routine

[11:00] <moritz_> niecza: say q"foo"

[11:00] <p6eval> niecza 28f112a: OUTPUT«foo␤»

[11:04] *** wamba joined
[11:05] *** zby joined
[11:15] <sorear> moritz_: EWRONGMETALEVEL

[11:15] <moritz_> sorear: thought so

[11:15] <sorear> niecza is miscompiling the STD parser

[11:15] <sorear> actually at this point it looks like a runtime bug

[11:16] <dalek> niecza: 4b8ffc9 | sorear++ | lib/Cursor.cs:

[11:16] <dalek> niecza: Fix <.ws> LTM

[11:16] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4b8ffc9f1a2c737743164afea864fc5924a6e6a6

[11:18] *** nymacro joined
[11:31] *** rgrau_ joined
[11:35] *** nym joined
[11:37] *** Woodi left
[11:38] *** am0c joined
[11:39] *** Woodi joined
[11:39] *** nymacro left
[11:43] *** am0c left
[12:03] *** cognominal left
[12:06] *** cognominal joined
[12:16] *** Bzek left
[12:29] *** orafu left
[12:30] *** orafu joined
[12:41] *** jaldhar left
[12:42] *** daxim joined
[12:42] *** Woodi left
[12:43] *** Woodi joined
[12:43] *** jaldhar joined
[12:50] *** Trashlord left
[13:10] *** plainhao joined
[13:11] *** takadonet joined
[13:11] <takadonet> morning all

[13:12] *** tzhs left
[13:19] *** MayDaniel joined
[13:24] *** Patterner left
[13:26] <colomon> \o

[13:26] *** wamba left
[13:26] <takadonet> o/

[13:30] *** nym left
[13:34] *** rgrau_ left
[13:35] *** Psyche^ joined
[13:35] *** Psyche^ is now known as Patterner

[13:35] *** nymacro joined
[13:37] *** MayDaniel left
[13:50] *** redicaps joined
[13:50] *** kaare_ left
[14:04] *** agentzh left
[14:22] *** _kaare joined
[14:23] *** wamba joined
[14:23] *** lichtkind joined
[14:28] *** tzhs joined
[14:33] *** wamba left
[14:34] *** sftp joined
[14:34] *** wamba joined
[14:35] *** wamba left
[14:36] *** wamba joined
[14:40] *** Guest3334 left
[14:42] *** Woodi left
[14:43] *** Woodi joined
[15:00] *** araujo left
[15:01] <MindosCheng> \o/

[15:01] <moritz_> /o\

[15:02] <moritz_> (rainy day here, need my arms for protection)

[15:03] <tadzik> :)

[15:03] <lichtkind> moritz_: its actually snow here

[15:04] <lichtkind> have to protect my herbs in the garden a bid

[15:04] <moritz_> when you go to work by bike, snow is less annoying than rain

[15:06] <lichtkind> moritz_: true

[15:06] <lichtkind> moritz_: will you come to frankfurt?

[15:06] *** alester joined
[15:07] <moritz_> lichtkind: when?

[15:07] <moritz_> (though the answer is most likely "no" anyway)

[15:08] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_variable_tablet

[15:08] *** pyrimidine joined
[15:08] *** Woodi left
[15:08] * MindosCheng living in Tropical and subtropical for most of his life.

[15:09] *** Woodi joined
[15:10] <lichtkind> moritz_: http://wiki.perl-community.de/Community/PlanungCommunityWorkshop2010#Wann

[15:13] *** araujo joined
[15:14] <moritz_> so, upcoming weekend

[15:15] <lichtkind> yes

[15:15] <moritz_> negative; too much to do

[15:17] *** Sarten-X left
[15:18] <lichtkind> moritz_: i understand that one :)

[15:18] <lichtkind> moritz_: but i have friends in ffm so have several reasons

[15:18] <lichtkind> who is responsible for http://try.rakudo.org/ ?

[15:19] <lichtkind> please add http://perl6.org/documentation/ in the link section below

[15:22] *** MayDaniel joined
[15:25] *** wamba left
[15:26] *** kanishka joined
[15:26] *** kjeldahl left
[15:26] *** wamba joined
[15:28] *** Sarten-X joined
[15:29] *** meppl joined
[15:33] *** PacoLinux joined
[15:37] <lichtkind> dalek: tell cygx please add http://perl6.org/documentation/ in the link section below on http://try.rakudo.org/ 

[15:37] *** tadzik joined
[15:38] <lichtkind> @dalek tell cygx please add http://perl6.org/documentation/ in the link section below on http://try.rakudo.org/ 

[15:38] <lambdabot> Unknown command, try @list

[15:38] <lichtkind> dalek tell cygx please add http://perl6.org/documentation/ in the link section below on http://try.rakudo.org/ 

[15:38] <moritz_> lambdabot? didn't we kick and ban that spammy bot for good?

[15:40] *** wtw left
[15:41] <moritz_> lichtkind: I've added the link to the template. The next update from source should get it

[15:42] <lichtkind> thank you

[15:45] *** ch3ck joined
[15:50] *** redicaps left
[15:51] *** kjeldahl joined
[16:00] *** flatwhatson left
[16:01] *** nymacro left
[16:05] *** MayDaniel left
[16:06] *** silug left
[16:13] *** flatwhatson joined
[16:19] <jnthn> evening, #perl6

[16:25] *** flatwhatson left
[16:26] *** tzhs left
[16:28] *** mkramer1 left
[16:29] *** mkramer joined
[16:29] *** wamba left
[16:33] *** risou joined
[16:34] <lichtkind> jnthn: greets

[16:36] <jnthn> ahoj, lichtkind 

[16:36] *** Raynes joined
[16:37] <lichtkind> ciau

[16:38] <lichtkind> jnthn: i want you to interview again for the perl 6 history tablet

[16:38] *** flatwhatson joined
[16:40] <jnthn> lichtkind: interview...uh-oh. :)

[16:41] <lichtkind> dont worry i dont boost your ego just extract some vital infos for the docs :)

[16:41] <jnthn> rakudo: my (@foo, @bar); @foo.cross(@bar)

[16:41] <p6eval> rakudo : OUTPUT«Method 'cross' not found for invocant of class 'Array'␤  in main program body at line 22:/tmp/Ly4m3WwZjn␤»

[16:47] *** wamba joined
[16:48] *** wamba left
[16:49] *** wamba joined
[16:52] *** mila_ joined
[16:54] *** MindosCheng left
[16:55] *** mila__ left
[16:57] *** bitter16 joined
[16:58] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_variable_tablet

[17:00] <colomon> .cross?

[17:02] *** timbunce left
[17:06] <lichtkind> colomon: http://perlcabal.org/syn/S03.html#Cross_operators

[17:06] *** risou_ joined
[17:07] <colomon> huh.  I don't think we implemented it that way....

[17:07] *** risou left
[17:08] <jnthn> colomon: I didn't think tehre was a .cross method either.

[17:09] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_delta_tablet

[17:09] *** timbunce joined
[17:12] <colomon> what sort of object is (<a b>; 1,2)?  lol?

[17:13] * colomon suspects the spec has changed since we implemented Xop....

[17:14] <jnthn> I think it used to be a Slicel, but... :)

[17:14] <jnthn> Maybe now it's a Lol

[17:14] <jnthn> :)

[17:14] *** justatheory joined
[17:17] *** mssm joined
[17:21] <lichtkind> perl 6 gets much more funny revently

[17:21] <lichtkind> recently

[17:25] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_delta_tablet

[17:27] *** nadim left
[17:32] *** Guest3334 joined
[17:35] *** Trashlord joined
[17:37] *** cdarroch joined
[17:37] *** cdarroch left
[17:37] *** cdarroch joined
[17:38] *** Guest3334 left
[17:40] *** timbunce left
[17:47] *** timbunce joined
[17:53] *** envi left
[17:57] *** impious joined
[17:58] *** spq1 joined
[18:05] *** dakkar left
[18:13] *** silug joined
[18:19] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_variable_tablet

[18:19] *** impious left
[18:23] *** ch3ck left
[18:25] *** mavrc left
[18:27] *** mavrc joined
[18:33] *** gavv\w left
[18:34] *** aindilis left
[18:35] *** nadim joined
[18:37] *** leprevost left
[18:41] *** bluescreen joined
[18:41] *** bluescreen is now known as Guest9987

[18:45] *** mavrc left
[18:46] *** kanishka left
[19:00] <Tene> phenny: tell cygx please add http://perl6.org/documentation/ in the link section below on http://try.rakudo.org/ 

[19:00] <phenny> Tene: I'll pass that on when cygx is around.

[19:02] *** daxim left
[19:15] *** neroxx joined
[19:18] <dalek> rakudo: 90cb844 | moritz++ | / (4 files):

[19:18] <dalek> rakudo: [conf] rename revision comparison module

[19:18] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/90cb8447157443ee18f53b3d8de03c025a9976b1

[19:20] *** ch3ck joined
[19:31] <sorear> 81.95%, 54m 45s...

[19:31] <sorear> good * #perl6

[19:33] <lue> hello o/

[19:35] <lichtkind> Tene: thnaks but moritz done this already :)

[19:35] <lichtkind> lue: hi

[19:36] <sorear> @part #perl6

[19:36] *** lambdabot left
[19:36] <diakopter> heh

[19:36] <sorear> moritz_: please don't waste perfectly good ban slots on lambdabot, not while I have an admin bit on it anyhow

[19:40] *** risou_ left
[19:43] <TimToady> now that sorear++ is drawing within 9% of STD, I'd  better start hacking on the std STD some more...  :)

[19:44] <colomon> ;)

[19:45] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_variable_tablet

[19:59] <moritz_> sorear: uhm, don't we have plenty of free ban slots?

[20:02] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_variable_tablet

[20:09] *** wamba left
[20:12] *** wamba joined
[20:13] *** pyrimidine left
[20:15] *** sftp left
[20:18] *** jaldhar left
[20:18] *** sftp joined
[20:21] *** sftp left
[20:21] *** pyrimidine joined
[20:22] *** sftp joined
[20:29] *** plainhao left
[20:33] *** neroxx left
[20:34] *** fhelmberger left
[20:37] *** XaRDaX joined
[20:38] *** wamba left
[20:41] *** wamba joined
[20:49] <jnthn> nqp: sub foo(:$x) { say($x // 'ok'); }; foo();

[20:49] <p6eval> nqp: OUTPUT«ok␤»

[20:50] <diakopter> nqpnet: sub foo(:$x) { say($x // 'ok'); }; foo();

[20:50] <p6eval> nqpnet: OUTPUT«␤Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object␤  at NQPOutput_1290459063.block_6 (Rakudo.Runtime.ThreadContext TC, Rakudo.Metamodel.RakudoObject Block, Rakudo.Metamodel.RakudoObject Capture) [0x00000] in <filename unknown>:…

[20:51] * jnthn needs to make those failures less noisy

[20:51] <diakopter> lc()

[20:53] *** icwiener joined
[20:55] <diakopter> nqpnet: Capture.new.bind_pos(0, 4);

[20:55] <p6eval> nqpnet: OUTPUT«␤Unhandled Exception: System.InvalidOperationException: No such method bind_pos␤  at Rakudo.Metamodel.KnowHOW.KnowHOWBootstrapper.<Bootstrap>m__7 (Rakudo.Runtime.ThreadContext TC, Rakudo.Metamodel.RakudoObject Ignored, Rakudo.Metamodel.RakudoObject Cap) [0x00000] in <filename unkno…

[20:55] <dalek> 6model: 3400d13 | jonathan++ | dotnet/runtime/Runtime/Signatures/SignatureBinder.cs:

[20:55] <dalek> 6model: [dotnet] Fix vivification/default values on named parameters.

[20:55] <dalek> 6model: review: https://github.com/jnthn/6model/commit/3400d13eecb80f362b371fc6949f37711cc81175

[20:56] <jnthn> diakopter: 

[20:56] <jnthn> $!cap := nqp::instance_of(NQPCapture);

[20:57] <jnthn> s/NQPCapture/self/

[20:57] <diakopter> but I don't want that

[20:58] <diakopter> I want an NQPCapture

[20:58] <jnthn> oh...sorry, I mis-read

[20:58] <jnthn> The issue is that in new you don't have an object yet

[20:59] <jnthn> So this is setting $!cap in the type object.

[20:59] <diakopter> oh, I see; build needs called

[20:59] <jnthn> Which should probably explode.

[21:00] <diakopter> oh I see the problem

[21:00] <diakopter> new() *must* return self

[21:00] <jnthn> Yes

[21:00] <diakopter> ran into this other places too

[21:01] <moritz_> .bless NYI?

[21:04] <jnthn> moritz_: or BUILDALL...

[21:14] <TimToady> diakopter: eh? you mean the new self, not the invocant of the new method

[21:20] <jnthn> nqpnet: my $x := NQPCapture.new; $x[0] := 42; say($x[0]);

[21:20] <p6eval> nqpnet: OUTPUT«␤Unhandled Exception: System.InvalidOperationException: No such method new␤  at Rakudo.Metamodel.KnowHOW.KnowHOWBootstrapper.<Bootstrap>m__7 (Rakudo.Runtime.ThreadContext TC, Rakudo.Metamodel.RakudoObject Ignored, Rakudo.Metamodel.RakudoObject Cap) [0x00000] in <filename unknown>:0…

[21:21] <jnthn> hmm

[21:21] <jnthn> diakopter: Does that work for you locally?

[21:21] <jnthn> diakopter: oh, fails for me locally too.

[21:21] *** MayDaniel joined
[21:27] <lue> ohayo o/

[21:28] <sorear> std: { my $x = 1 }

[21:28] <p6eval> std a194beb: OUTPUT«Potential difficulties:␤  $x is declared but not used at /tmp/_MpplE2J2a line 1:␤------> { my $x⏏ = 1 }␤ok 00:01 121m␤»

[21:29] <colomon> \o

[21:29] *** rgrau_ joined
[21:30] *** timbunce left
[21:30] <dalek> 6model: f531f67 | jonathan++ | dotnet/compiler/Actions.pm:

[21:30] <dalek> 6model: [dotnet] Until we're bootstrapped and can introspect, need to keep list of things declared in the setting so they're known as lexical; add NQPCapture to this list.

[21:30] <dalek> 6model: review: https://github.com/jnthn/6model/commit/f531f67cf33322c2035033200c3bed236dfcc735

[21:36] *** Guest9987 left
[21:37] *** MayDaniel left
[21:48] *** mssm left
[21:49] *** Guest9987 joined
[21:50] *** kjeldahl left
[21:51] *** masak joined
[21:51] <masak> \o/

[21:51] <jnthn>  /o\

[21:51] <jnthn> :)

[21:52] <lue> \0/

[21:52] <jnthn> No need to be big-headed...

[21:52] <lue> \./ # Fine. Have it your way, jnthn :)

[21:53] <masak> now that's adaptability.

[21:53] <diakopter> \O/

[21:53] <diakopter> what's the O with the two dots over it

[21:54] <jnthn> Head inflamed due to mosquito bites

[21:54] <lue> a butterfly :)

[21:54] <diakopter> I mean the capital O

[21:54] <TimToady> diakopter: *you* last set the topic; you tell us

[21:54] <Tene> diakopter: O􏿽xCC􏿽x88

[21:54] <Tene> .u O􏿽xCC􏿽x88

[21:54] <phenny> U+004F LATIN CAPITAL LETTER O (O)

[21:55] <phenny> U+0308 COMBINING DIAERESIS (◌̈)

[21:55] <Tene> is how I type it, at least

[21:55] <diakopter> oo

[21:55] <diakopter> \oo/

[21:55] <Tene> .u Ö

[21:55] <phenny> U+00D6 LATIN CAPITAL LETTER O WITH DIAERESIS (Ö)

[21:55] <Tene> is an option too

[21:55] <diakopter> \Ö/

[21:57] *** pyrimidine left
[21:59] <masak> Tintin: \δ/

[21:59] <lue> ***we now return to our regularly scheduled 0x7F and lower codepoints. Hopefully.***

[22:00] <lue> Tim und Struppi! [as they're called in the German version of the comics]

[22:01] <diakopter> "Cellar Door"

[22:01] *** mssm joined
[22:03] <lue> rakudo: my @a = <. 1 2 . 3 4>; my @b; for @a { if $_ == "." { @b.push(""); } elsif $_ ~~ /\d/ { @b[*-1] ~= $_; };}; say @b.perl;

[22:03] <p6eval> rakudo : OUTPUT«["12", "34"]␤»

[22:04] <sorear> TimToady: What are the other elements of $*FILE?

[22:05] *** plobsing joined
[22:06] <diakopter> rakudo: my @a = <. 1 2 . 3 4>; my @b; for @a { if $_ ~~ /\d/ { @b[*-1] ~= $_ }}; say @b.perl

[22:06] <p6eval> rakudo : OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in <anon> at line 22:/tmp/e9ai7QPP9B␤  in main program body at line 1␤»

[22:09] <lue> my class C { has $.type; has $.stuff; method HAI($a) { $.stuff ~= $a };}; my @a = <. 1 2 . 3 4>; my C @b; for @a { if $_ == "." { @b.push(C.new(:type('.'))); } elsif $_ ~~ /\d/ { @b[*-1].HAI($_); };}; say @b.perl;

[22:09] <lue> rakudo: my class C { has $.type; has $.stuff; method HAI($a) { $.stuff ~= $a };}; my @a = <. 1 2 . 3 4>; my C @b; for @a { if $_ == "." { @b.push(C.new(:type('.'))); } elsif $_ ~~ /\d/ { @b[*-1].HAI($_); };}; say @b.perl;

[22:09] *** _kaare left
[22:09] <p6eval> rakudo : OUTPUT«(timeout)»

[22:13] <dalek> niecza: 36db696 | sorear++ | v6/tryfile:

[22:13] <dalek> niecza: [v6] fix canonicalize_name for GLOBAL::<$foo>

[22:13] <dalek> niecza: review: https://github.com/sorear/niecza/commit/36db696213656bd34e74a5418c7cbf32dca19358

[22:13] <dalek> niecza: 05d77c1 | sorear++ | v6/tryfile:

[22:13] <dalek> niecza: [v6] fix labels, Z+, X+

[22:13] <dalek> niecza: review: https://github.com/sorear/niecza/commit/05d77c1974487f1a32230493ce9cdb0558c15d0e

[22:18] *** Guest9987 left
[22:19] *** rblackwe joined
[22:20] <lue> https://gist.github.com/710830 this fits in the module I described yesterday. The problem is that the @.parsetree array ends up containing an object for each line in the file test.pod, instead of two objects for each block.

[22:21] <dalek> dalek-poller: 847cbe7 | sorear++ | push.psgi:

[22:21] <dalek> dalek-poller: Save copies of GitHub announce packets

[22:21] <dalek> dalek-poller: review: https://github.com/sorear/dalek-poller/commit/847cbe70a00e3744ecbb11aa2f369a580e1eb4f3

[22:22] <lue> can anyone check it out for me? From what I did in p6eval above, it seems to be a problem with the object rather than the loop.

[22:24] <sorear> first off, has Pea @.foo is BAD

[22:24] <sorear> type constraints and @ don't mix yet

[22:33] *** Geoff__ joined
[22:34] *** Geoff__ left
[22:34] *** meppl left
[22:46] <sorear> tadzik: I think I see the problem

[22:46] <sorear> JSON::XS automatically decodes UTF-8 input

[22:46] <sorear> the CREDITS parser doesnt'

[22:47] <sorear> so karmalog is comparing your name as a byte string (in CREDITS) to your name as a character string (in the commit packet)

[22:47] *** wamba left
[22:47] <sorear> perl5-- # for making $bytestring eq $charstring silently DTWT

[22:52] *** wamba joined
[22:53] *** wamba left
[22:55] *** wamba joined
[22:56] <masak> sorear: I hear they're thinking of fixing that in the subsequent major version.

[22:57] <masak> oops. maybe let's not go there, on second thought. again.

[22:57] <masak> sorear: I hear they're thinking of doing it in some other way in Perl 6. :)

[23:02] *** wamba left
[23:03] *** bluescreen joined
[23:03] <sorear> masak: I'd be interested to hear /how/

[23:03] *** wamba joined
[23:04] *** bluescreen is now known as Guest24760

[23:04] <masak> sorear: by keeping a clear separation between sequences-of-chars and their encodings as sequences-of-ints.

[23:04] <sorear> I understand you've done some work on this

[23:04] <masak> where 'char' has some more formal definition, maybe 'grapheme'.

[23:05] <masak> sorear: yes, I did GSoC work on the latter type, Buf.

[23:05] *** spq1 left
[23:06] <masak> sorear: this might clarify some aspects of it: http://strangelyconsistent.org/blog/str-and-buf-i-think-i-get-it-now

[23:08] <sorear> jul 09?  didn't know sc.org was that old

[23:09] <masak> it isn't.

[23:09] <masak> I imported ~200 posts from use.perl when starting it.

[23:11] <Tene> sorear: It's been around for forever; it just used to go by its acronym, SCO.  It was involved with a lawsuit recently, which prompted the name adjustment.

[23:11] * masak would prefer not to talk about that

[23:11] <masak> in other news, if you're using Linux you have to pay me license money.

[23:12] <lue> noooo!

[23:14] <masak> just kidding. that kind of trick is so 2003.

[23:16] <lue> in the gist I put up earlier, I think method addline($stuffz) is to blame.

[23:18] *** wamba left
[23:27] <lue> I'll look at it later, maybe it'll make sense then. afk

[23:29] *** meppel joined
[23:30] *** meppel left
[23:30] *** meppl joined
[23:33] <dalek> dalek-poller: 395a68f | sorear++ | modules/local/karmalog.pm:

[23:33] <dalek> dalek-poller: Add ad-hoc github link shortening

[23:33] <dalek> dalek-poller: review: https://github.com/sorear/dalek-poller/commit/395a68fd905a191a57628144c40f1a85eb2db205

[23:34] *** whiteknight joined
[23:34] <dalek> niecza: f958e9c | sorear++ | / (3 files):

[23:34] <dalek> niecza: Implement :i "str" / <sym>

[23:34] <dalek> niecza: review: https://github.com/sorear/niecza/commit/f958e9c529cf49c4f310fe8020d33fc1cdef6506

[23:34] *** XaRDaX left
[23:38] *** colomon left
[23:40] *** Guest24760 left
[23:40] *** pyrimidine joined
[23:42] *** pyrimidine left
[23:53] *** bluescreen joined
[23:54] *** bluescreen is now known as Guest99986

[23:58] *** colomon joined
[23:58] <masak> rakudo: sub foo($a, %h?) { bar($a, %h) }; sub bar($a, %h?) { say "alive!" }; foo(42)

[23:58] <p6eval> rakudo : OUTPUT«Method 'HOW' not found for invocant of class 'Hash'␤  in 'bar' at line 1␤  in 'bar' at line 22:/tmp/dkqeNBk8Hm␤  in 'foo' at line 22:/tmp/dkqeNBk8Hm␤  in main program body at line 22:/tmp/dkqeNBk8Hm␤»

[23:58] <masak> rakudo: sub foo($a, %h?) { say %h.WHAT }; foo(42)

[23:58] <p6eval> rakudo : OUTPUT«Method 'WHAT' not found for invocant of class 'Hash'␤  in 'foo' at line 22:/tmp/qK5WsYzzEI␤  in main program body at line 22:/tmp/qK5WsYzzEI␤»

[23:58] * masak submits rakudobug

[23:59] <colomon> masak++

[23:59] <masak> bug brought to you courtesy of a November being brought back from the Mostly Dead.

