[00:12] *** jferrero left
[00:18] *** justatheory left
[00:21] *** envi joined
[00:26] *** risou joined
[00:30] *** xabbu42 left
[00:42] *** Chillance left
[00:44] *** mfollett joined
[00:50] *** QinGW joined
[00:57] *** risou left
[00:57] *** risou joined
[01:02] *** risou left
[01:05] *** mfollett left
[01:22] *** Entonian left
[01:29] *** ruoso joined
[01:39] *** pythonian4000 is now known as pythonian4000afk

[01:40] *** mfollett joined
[01:44] *** justatheory joined
[02:06] *** bbkr left
[02:06] *** bbkr joined
[02:17] *** jaldhar left
[02:17] *** LaVolta joined
[02:23] *** jaldhar joined
[02:34] *** envi left
[02:41] *** Italian_Plumber joined
[02:41] *** tylercurtis joined
[03:04] *** simcop2387 left
[03:06] *** simcop2387_ joined
[03:06] *** simcop2387 joined
[03:07] *** simcop2387 left
[03:07] *** simcop2387_ left
[03:10] *** simcop2387 joined
[03:10] *** simcop2387_ joined
[03:11] *** simcop2387_ left
[03:11] *** treed left
[03:13] *** agentzh joined
[03:13] *** am0c^ joined
[03:15] *** jaldhar left
[03:18] *** jaldhar joined
[03:36] *** lamstyle left
[03:37] *** nymacro joined
[03:40] *** fod left
[03:41] *** lamstyle joined
[03:42] *** meppl left
[03:48] *** meppl joined
[04:06] *** am0c^ left
[04:06] *** satyavvd joined
[04:13] *** Italian_Plumber left
[04:39] *** _sri joined
[04:59] *** mfollett left
[05:14] *** sftp left
[05:31] *** mfollett joined
[05:43] *** _kaare joined
[05:46] *** tylercurtis left
[05:57] *** justatheory left
[06:00] *** Axius joined
[06:13] *** wtw joined
[06:15] *** Axius_ joined
[06:18] *** Axius left
[06:30] *** Axius_ left
[06:30] *** Axius joined
[06:30] *** aesop left
[06:31] *** aesop joined
[06:37] *** xabbu42 joined
[06:38] *** am0c^ joined
[06:46] *** Axius_ joined
[06:48] *** Axius left
[06:51] *** Axius_ left
[06:54] *** Axius joined
[07:07] *** Axius left
[07:10] *** baux joined
[07:10] *** mfollett left
[07:19] *** Axius joined
[07:34] <diakopter> hello, world

[07:34] <sorear> Hello.

[07:35] *** jaldhar left
[07:35] *** jaldhar joined
[07:37] <nymacro> hallo

[07:42] *** Axius left
[07:43] *** M_o_C joined
[07:44] *** Axius joined
[07:47] *** Axius left
[07:47] *** Axius joined
[07:50] *** jaldhar left
[07:51] *** jaldhar joined
[07:57] *** jaldhar left
[07:57] *** jaldhar joined
[08:01] *** Axius left
[08:01] *** xabbu42 left
[08:01] *** rgrau joined
[08:02] *** Gothmog_ left
[08:02] *** xabbu42 joined
[08:05] *** cjk101010 joined
[08:05] *** Axius joined
[08:16] *** wamba joined
[08:22] *** masak joined
[08:22] <masak> morning, #perl6

[08:22] <jnthn> lolitsmasak!

[08:23] <masak> and lol, it's breakfast!

[08:23] <jnthn> \o/

[08:24] <Trashlord> sure is

[08:24] <colomon> \o

[08:24] *** nymacro left
[08:25] <sorear> hi maska!

[08:26] *** muixirt joined
[08:26] *** Axius left
[08:33] *** IllvilJa joined
[08:34] * diakopter wants breakfast at 1:30 a.m.

[08:34] * dukeleto likes breakfast Any time

[08:34] <dalek> sprixel: ddfc90e | diakopter++ | sprixel/ (4 files):

[08:34] <dalek> sprixel: refactor the framebuilder to copy the framechain on

[08:34] <dalek> sprixel: closure creation instead of on closure invocation.

[08:34] <dalek> sprixel: Lots of cleanup/documentation of that routine.

[08:34] <dalek> sprixel: review: http://github.com/diakopter/sprixel/commit/ddfc90e43215e94e1d2656edf2ef2414d158cde3

[08:36] <sorear> "copy" the framechain?

[08:36] <sorear> I never considered such a thing

[08:43] <dukeleto> has anyone considered making something like hoogle for perl 6?

[08:44] * diakopter googles hoogle

[08:45] <dukeleto> diakopter: it basically is a search engine of haskell function signatures

[08:45] <diakopter> so I see.

[08:45] <dukeleto> diakopter: you give it a signature, it shows you all function that have that signature

[08:45] <diakopter> it's neat

[08:45] *** dju joined
[08:46] <mathw> Morning

[08:46] <sorear> oh yeah hoogle.  I remember laughing at ndm when he proposed that and calling it useless.

[08:46] <mathw> dukeleto: I always get confused - Hayoo is not the same as Hoogle, is it? (useful though)

[08:47] <diakopter> sorear: yeah, copying the framechain instead of doing traversals on every load/store of a local/arg.

[08:48] <sorear> diakopter: Have you considered using a display?

[08:49] <diakopter> sorear: maybe, you'll have to help me out with your CS terminology

[08:49] <dukeleto> mathw: nope, hadn't seen that. very similar though

[08:49] *** dju left
[08:50] *** dju joined
[08:51] <masak> dukeleto: been wanting to explore the idea of a Perl 6 hoogle, but haven't actually done so.

[08:51] *** cls_bsd left
[08:51] *** cls_bsd joined
[08:51] <masak> as with everything else, starting small and getting something to work quickly is probably the ticket.

[08:52] <dukeleto> masak: it could be a useful interface to the periodic chart of operators

[08:53] <diakopter> sorear: ok, I read about them some.. how is the framechain not already a display?

[08:53] <sorear> because it's a chain

[08:53] <masak> dukeleto: here's where I muse about it last time: http://irclog.perlgeek.de/perl6/2010-09-12#i_2816117

[08:53] *** daxim joined
[08:54] <sorear> a display is a compromise implementation

[08:54] <diakopter> sorear: it's only a chain conceptually. it's implemented as a hidden class with a slot for each outer frame.

[08:54] *** Gothmog_ joined
[08:54] <diakopter> sorear: basically an array of pointers

[08:54] <sorear> diakopter: so frame.outer5.field?

[08:54] <diakopter> right.

[08:55] <sorear> that's called ... a display

[08:55] <diakopter> oh goody.

[08:55] <diakopter> hence my question :)

[08:57] <dukeleto> masak: a perl 6 hoogle is indeed a great idea. I will think about how to get a small but usuable version implemented.

[08:57] <masak> ++dukeleto

[09:02] <jnthn> Can easily parse out all the siggies using the Perl 6 grammar with custom akshun methods.

[09:03] <masak> I wonder how much post-processing will need to be made.

[09:03] <masak> there's also the tricky question of expectations versus reality.

[09:04] <masak> if I enter 'Str --> Array', for example, I might expect &split to fall out. but &split is more like 'Cool, Cool --> List'

[09:07] *** [mark] joined
[09:08] *** dakkar joined
[09:12] <dukeleto> masak: i guess a search filter can be strict or transitive, or some other fancy word

[09:16] *** lamstyle left
[09:17] <masak> this is just a guess, but it probably needs to be non-strict in two ways:

[09:18] <masak> (1) allowing for more parameters in the result than in the search (Hoogle already does that)

[09:18] <masak> (2) applying some type fudging so that people typing in 'Array' get 'List' results, and people tying in 'Str' get 'Cool' results as well

[09:19] <masak> results can be sorted according to some metric of how much fudging of different kinds was needed.

[09:20] *** lamstyle joined
[09:23] *** masak left
[09:32] *** am0c^ left
[09:34] <sorear> rakudo: role Stop[$str] { method stop { $str } }; (2 but Stop["hi"]).stop.say

[09:35] <p6eval> rakudo 970243: OUTPUT«hi␤»

[09:38] *** dju left
[09:48] *** nadim left
[09:49] *** Mowah joined
[09:50] *** cls_bsd left
[09:50] *** cls_bsd joined
[09:50] *** nadim joined
[09:51] * sorear out

[09:53] *** M_o_C left
[09:57] *** pythonian4000afk is now known as pythonian4000

[10:01] *** nymacro joined
[10:07] *** QinGW left
[10:10] *** Ross joined
[10:10] *** sftp joined
[10:15] * mathw sits, quietly hating subversion

[10:21] <cxreg> parrot?

[10:24] *** Mowah left
[10:28] *** LaVolta left
[10:35] *** M_o_C joined
[10:45] <moritz_> good localtime

[10:54] *** timbunce joined
[11:07] *** oyse joined
[11:13] *** pythonian4000 is now known as pythonian4000afk

[11:16] *** _kaare left
[11:19] *** ruoso left
[11:22] *** Italian_Plumber joined
[11:29] *** Italian_Plumber left
[11:35] *** mikehh joined
[11:37] *** envi joined
[11:53] *** pnu joined
[11:54] <takadonet> morning all

[11:55] *** _kaare joined
[11:55] *** masak joined
[11:59] <masak> this seems to have been @gotofritz' reaction: http://twitter.com/gotofritz/status/26733215026

[11:59] <masak> and more from @sixohsix: http://twitter.com/sixohsix/status/26733732601

[11:59] *** pnu left
[12:01] <jnthn> ...waiting? Nah, I'm patching.

[12:01] <jnthn> Idiot.

[12:01] <masak> :)

[12:01] <masak> yeah, I don't feel like replying any more.

[12:02] *** pnu joined
[12:02] <jnthn> .oO( I'm patchin', not bitchin' )

[12:02] <masak> we're "touchy" about people disseminating lies about Perl 6? fair enough.

[12:02] *** satyavvd left
[12:03] <rjbs> It would be nice to have so much free time that I could waste it on bashing projects I don't care about.

[12:03] <rjbs> ...but I'd probably use that time for reading a book instead.

[12:04] <jnthn> I find people who prefer to tear other people's work down rather than do something creative just rather sad.

[12:05] <masak> I guess it underlies the mechanics behind trolling. easier to get reactions from people by being a jerk.

[12:19] <masak> there's also a thin line between being actively mean and just being misinformed. it's easy to forget from within the echo chamber how little is known about Perl 6 on the outside.

[12:28] *** tadzik joined
[12:29] <moritz_> rakudo: sub f { 1, 2, 4}; .say for f

[12:29] <p6eval> rakudo 970243: OUTPUT«1␤2␤4␤»

[12:29] <moritz_> rakudo: sub f { 1, 2, 4}; .say for my $ = f

[12:29] <p6eval> rakudo 970243: OUTPUT«1 2 4␤»

[12:30] <moritz_> rakudo: sub f { 1, 2, 4}; .say for (my $ = f).list

[12:30] <p6eval> rakudo 970243: OUTPUT«1␤2␤4␤»

[12:31] <masak> rakudo: sub f { 1, 2, 4}; .say for $(f)

[12:31] <p6eval> rakudo 970243: OUTPUT«1␤2␤4␤»

[12:31] <masak> hm.

[12:31] <masak> that's the first one I consider wrong.

[12:31] * moritz_ wonders if  m:g/x/  really desugars to  do { $/ = $_.match(/x/, :g); $/.list }

[12:31] <moritz_> masak: agreed

[12:31] * masak submits rakudobug

[12:32] <jnthn> rakudo: sub f { 1, 2, 4}; .say for f.item

[12:32] <p6eval> rakudo 970243: OUTPUT«1␤2␤4␤»

[12:32] <masak> that one too.

[12:32] <jnthn> same issue

[12:32] <jnthn> $(...) calls .item

[12:32] <masak> *nod*

[12:34] *** agentzh left
[12:38] <moritz_> rakudo: say (my $ = (1, 2, 3)).PARROT

[12:38] <p6eval> rakudo 970243: OUTPUT«Perl6Scalar->Seq␤»

[12:39] <moritz_> rakudo: say (1, 2, 3).item.PARROT

[12:39] <p6eval> rakudo 970243: OUTPUT«Seq␤»

[12:39] <moritz_> that's the underlying problem

[12:39] <masak> rakudo: say ($(1, 2, 3)).PARROT

[12:39] <p6eval> rakudo 970243: OUTPUT«Seq␤»

[12:39] <masak> yes, it's explicitly showing that what ought to happen isn't.

[12:40] <moritz_> our multi sub item(@values) { @values.Seq

[12:40] <moritz_> }

[12:40] <jnthn> What would cause it to be containerized?

[12:40] <moritz_> let me just say "hu"

[12:40] <masak> by all means.

[12:41] <moritz_> (and jnthn++ last touched this code, in March)

[12:41] *** bluescreen joined
[12:42] <jnthn> Huh, that'd mean it pre-dated the last list refactor...

[12:42] <moritz_> correct

[12:42] <jnthn> In that caes it may well be bogus.

[12:42] <moritz_> (unless git blame is playing tricks on my)

[12:43] <jnthn> No way of knowing if pmichaud++ missed it or chose to leave it as it is.

[12:43] <moritz_> jnthn: how would a correct wrapping in Perl6Scalar would look like?

[12:43] <jnthn> moritz_: Good question.

[12:43] *** Trashlord left
[12:43] <jnthn> moritz_: I mean, one way is to assign it to one.

[12:43] <masak> rakudo: sub is-palindrome($s) { $s eq $s.flip }; say is-palindrome('[]][') # pkrumins++, http://twitter.com/pkrumins/status/26744178147

[12:43] <p6eval> rakudo 970243: OUTPUT«Bool::True␤»

[12:43] <jnthn> But I think return is meant to decontainerize if it's not an l-lvalue sub.

[12:44] <masak> I bet lue++ will like that one. :)

[12:44] <jnthn> For now though it'd just work to change it to (my $ = @values.Seq) I guess

[12:44] <jnthn> And then it'd return the container.

[12:44] <masak> aye.

[12:44] <moritz_> jnthn: I don't quite understand the relation between itemization and containerization... care to explain?

[12:44] <moritz_> and why .Seq?

[12:45] <jnthn> I see them as orgnogonal.

[12:45] <moritz_> why not just   my $ = @values  ?

[12:45] <jnthn> Because in the previous list model a parcel would become a Seq in item context.

[12:45] <moritz_> but in this list model, there's no reason for it?

[12:45] <jnthn> As I said, it may be bogus.

[12:45] <jnthn> No idea.

[12:45] <moritz_> ok

[12:45] <jnthn> I'm the wrong person to ask.

[12:46] * moritz_ asks pmichaud 

[12:46] <jnthn> Hopefully pmichaud++ will get around to documenting the new list model soon. :-)

[12:46] *** ruoso joined
[12:53] *** cirne100 joined
[12:54] *** cirne100 left
[12:56] *** Mowah joined
[13:03] *** tylercurtis joined
[13:03] *** tylercurtis left
[13:04] *** masak left
[13:05] *** mfollett joined
[13:10] *** spinclad_ is now known as spinclad

[13:14] <mfollett> rakudo: my @fib := (0,1,*+*...*)

[13:14] <p6eval> rakudo 970243:  ( no output )

[13:14] <mfollett> my @fib := (0,1,*+*...*); say @fib[3]

[13:15] <mfollett> hrrm…didn't that used to work?

[13:18] <takadonet> it does....

[13:18] * takadonet looks at moritz_ and masak

[13:18] *** Patterner left
[13:19] *** IllvilJa left
[13:19] *** dual left
[13:21] * moritz_ looks back

[13:22] *** M_o_C left
[13:23] <moritz_> seen smash

[13:23] <aloha> smash was last seen in #parrot 7 days 19 hours ago saying "http://github.com/mirrors/perl/tree/perl-1-maint".

[13:24] <moritz_> that's the URL I was looking for :-)

[13:30] <tadzik> rakudo: my @fib := (0,1,*+*...*); say @fib[3]

[13:30] <p6eval> rakudo 970243: OUTPUT«2␤»

[13:30] <tadzik> it does

[13:30] <tadzik> rakudo: my @fib := (0,1,*+*...*); say @fib[30]

[13:30] <p6eval> rakudo 970243: OUTPUT«832040␤»

[13:30] *** Psyche^ joined
[13:30] *** Psyche^ is now known as Patterner

[13:39] <mfollett> If I just put 'my @fib := (0,1,*+*...*)' in the REPL it takes a bit and segfaults in * 2010.09, if I do 'my @fib := (0,1,*+*...*);say @fib[30]' then it works just fine

[13:40] <nymacro> mfollett, probably because it is trying to output the result of the assignment on the REPL

[13:41] <mfollett> nymacro: oh, hahah, that would make sense

[13:41] <mfollett> nymacro++

[13:42] *** flatwhatson_ left
[13:43] *** flatwhatson_ joined
[13:45] *** tadzik left
[13:47] *** mfollett left
[13:48] <shortcircuit> Is there a PIR implementation on top of JavaScript? I'd be nice to have an in-browser REPL.

[13:48] <shortcircuit> Otherwise, is there anything PIR depends on that would make such an implementation impossible?

[13:49] <moritz_> you need much more for running Rakudo than PIR

[13:49] <moritz_> you need all the built-in PMCs, all the rakudo PMCs, all the opcodes...

[13:49] <shortcircuit> Mm.

[13:50] <moritz_> the problem is that it'll be *very* slow

[13:50] *** PerlJam joined
[13:50] * shortcircuit wonders what the shortest path to getting a working client-side, in-browser P6 REPL would be.

[13:50] <moritz_> it's probably much better to translate to JS on the POST level

[13:50] *** justatheory joined
[13:51] *** mavrc joined
[13:55] *** justatheory left
[14:00] *** mfollett joined
[14:01] *** wtw left
[14:02] *** estrabd_amf is now known as estrabd

[14:08] *** tadzik joined
[14:18] *** nymacro left
[14:21] *** MayDaniel joined
[14:33] *** FurnaceBoy left
[14:41] *** cjk101010 left
[14:43] <pmichaud> good morning, #perl6

[14:44] <moritz_> oh hai pmichaud

[14:44] <colomon> \o

[14:44] <moritz_> I implemented ss///, and then noticed that we don't have a 'samespace' function as backend yet :/

[14:47] *** kjeldahl joined
[14:48] *** jaldhar left
[14:51] <moritz_> rakudo: say 'abc'.samecase('XYZ')

[14:51] <p6eval> rakudo 970243: OUTPUT«ABC␤»

[14:53] *** mfollett left
[14:54] <colomon> rakudo: say 'abc'.samecase('XyZ')

[14:54] <p6eval> rakudo 970243: OUTPUT«AbC␤»

[14:54] <colomon> rakudo: say 'abc'.samecase('ZyBot')

[14:55] <p6eval> rakudo 970243: OUTPUT«AbC␤»

[14:55] <colomon> rakudo: say 'abcd'.samecase('ZyBot')

[14:55] <p6eval> rakudo 970243: OUTPUT«AbCd␤»

[14:57] *** dual joined
[14:58] *** tadzik left
[15:02] *** kjeldahl left
[15:03] <dalek> rakudo: 0dc4b80 | moritz++ | src/Perl6/Grammar.pm:

[15:03] <dalek> rakudo: A step towards handling ss///.

[15:03] <dalek> rakudo: 

[15:03] <dalek> rakudo: This wires up the adverb generation for ss///, but doesn't introduce a

[15:03] <dalek> rakudo: Cool.samespace() method yet, which is necessary as the backend.

[15:03] <dalek> rakudo: 

[15:03] <dalek> rakudo: Includes a small refactor of compile time adverb handling.

[15:03] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/0dc4b806f8db45891374158483b1a46f0d1054fb

[15:04] *** kjeldahl joined
[15:04] *** daxim left
[15:09] *** risou joined
[15:09] *** alester joined
[15:14] *** justatheory joined
[15:19] *** smash joined
[15:20] <smash> hello everyone

[15:20] <moritz_> \o smash

[15:20] <moritz_> idea for the next "weekly" challenge: http://github.com/moritz/perlgeek.de/blob/master/source/blog-source-en/perl-6/contribute-now-samespace.txt

[15:20] <moritz_> any comments?

[15:22] <pmichaud> looking

[15:23] <pmichaud> looks great

[15:23] <moritz_> thanks

[15:23] <pmichaud> I'm spectesting a fix for Parcel.item now.

[15:23] <moritz_> (for looking)

[15:24] <smash> updated http://gil.di.uminho.pt/users/smash/rakudo-bench.html with the new rakudo star release

[15:25] <moritz_> so .pick got faster, and everything else a bit slower?

[15:26] <pmichaud> I'm guessing strings got slower

[15:26] <pmichaud> but that's really a guess

[15:27] <moritz_> startup time seems to be constant

[15:27] <smash> i might run the script again during the night, to make sure nothing interefered with it last time i executed it

[15:27] *** risou_ joined
[15:28] <smash> moritz_: the graph scale can play nasty tricks here

[15:28] <moritz_> actually startup time improved by nearly 10%

[15:28] <pmichaud> well, the numbers tell the tale

[15:28] <pmichaud> it looks like the heavy scripts are running about 10% slower than previously

[15:29] *** justatheory left
[15:29] *** risou left
[15:29] <pmichaud> are there instructions somewhere about how to reproduce the numbers in these charts?

[15:29] <smash> pmichaud: not yet, it's just a bunch of stupid scripts

[15:30] <pmichaud> oh, the other thing that might've changed is gc

[15:30] <pmichaud> smash: how many times do you run each script?

[15:31] <pmichaud> oh, 10.

[15:31] * pmichaud reads the page :-)

[15:31] <smash> yes, 10 times

[15:32] <smash> that's why it takes hours and hours to run

[15:32] <moritz_> pmichaud: I think the biggest GC changes were included after the parrot release

[15:32] <pmichaud> okay

[15:33] <smash> pmichaud: but i'm open to suggestions on how to run it

[15:33] *** justatheory joined
[15:34] *** kjeldahl_ joined
[15:35] <moritz_> http://perlgeek.de/blog-en/perl-6/contribute-now-samespace.html lolIblogged

[15:37] <colomon> smash++

[15:37] <colomon> sorry I haven't gotten around to adding more benchmarks yet.

[15:37] <smash> colomon: i haven't had the time to improve the harness yet :(

[15:39] *** oyse left
[15:39] *** kjeldahl left
[15:40] *** kjeldahl_ left
[15:50] *** plainhao joined
[15:51] <dalek> rakudo: 5ce8fcf | pmichaud++ | src/builtins/Parcel.pir:

[15:51] <dalek> rakudo: Make sure Parcel.item returns an itemized Seq.  Addresses RT #78284, but it also seems to expose a bug in either .trans or S05-transliteration/trans.t .

[15:51] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/5ce8fcfe541b6eb2426ea64247bf01998b0d5208

[15:54] <flussence> so I went and did something useful: http://gist.github.com/617012

[15:56] <pmichaud> seems expensive, though

[15:56] <moritz_> flussence: I'd prefer a solution that doesn't use s/// or .subst internally

[15:56] <pmichaud> why not just comb self for \S+\ and then stitch it together ?

[15:57] *** mfollett joined
[15:57] <pmichaud> [~]  self.comb(\S+) Z $other.comb(\s+)

[15:57] <pmichaud> oops, need /'s

[15:57] <moritz_> modulo length limits

[15:57] <moritz_> Z stops at the shortest list

[15:57] <pmichaud> well, that can be fixed :-)

[15:58] <moritz_> sure; I just want to point out that it's not *that* trivial

[15:58] <pmichaud> sure

[15:58] <pmichaud> I'm just saying that's far better than repeated substitutions :-)

[15:58] <pmichaud> and is the core of a better approach

[15:59] <pmichaud> what should happen in the case where self has more components than $other ?

[15:59] <moritz_> ws should be copied unchanged

[16:00] <flussence> should leading/trailing whitespace be changed to match, or is it only the contents of each whitespace that matters?

[16:00] * moritz_ doesn't quite understand the question... example?

[16:01] <pmichaud> rakudo: sub ss($str, $other) { ($str.comb(/\S+/) Z $other.comb(/\s+/)).join('') };   ss("a b c d", "x y\n\tz");   # first attempt

[16:01] <p6eval> rakudo 970243:  ( no output )

[16:01] <pmichaud> rakudo: sub ss($str, $other) { ($str.comb(/\S+/) Z $other.comb(/\s+/)).join('') };   say ss("a b c d", "x y\n\tz");   # first attempt

[16:01] <p6eval> rakudo 970243: OUTPUT«a b␤       ␤»

[16:01] <flussence> If I had ' a\tb'.samespace('x\ny z'), should it come out as 'a\nb' or '\na b'?

[16:02] <pmichaud> flussence: the latter

[16:02] <moritz_> pmichaud: we want to attract new committers, not activate overworked ones :-)

[16:02] <pmichaud> moritz_: but the overworked ones need -Ofun too :)

[16:02] <flussence> ok, that sounds much easier to implement

[16:02] <moritz_> pmichaud: sure :-)

[16:02] *** cdarroch joined
[16:02] *** cdarroch left
[16:02] *** cdarroch joined
[16:02] <pmichaud> and certainly I can prod the newer committers into an approach I'm more likely to accept :)

[16:03] <moritz_> rakudo: .say for [1, 2, 3].list

[16:03] <pmichaud> perlcabal.org is still down?

[16:03] <p6eval> rakudo 970243: OUTPUT«1␤2␤3␤»

[16:03] <Juerd> pmichaud: Not that I know of.

[16:03] * moritz_ doesn't understand why that .trans test fails

[16:03] *** MayDaniel left
[16:03] <pmichaud> moritz_: I suspect it has something to do with the non-array pair being itemized now

[16:03] <moritz_> pmichaud: perlcabal works hear

[16:03] <Juerd> pmichaud: Depends on what you mean, exactly, by the way. perlcabal.org in most contexts is an alias for feather1

[16:04] <moritz_> http://perlcabal.org/syn/ shows a nice HTML page

[16:04] <pmichaud> oh, now it's working.

[16:04] <pmichaud> A second ago I was getting "cannot connect to server"

[16:04] <moritz_> rakudo: my $x = [1, 2, 3] => [4, 5, 6]; .say for $x.key.list

[16:04] <p6eval> rakudo 970243: OUTPUT«1␤2␤3␤»

[16:05] <moritz_> rakudo: my $x = [1, 2, 3] => [4, 5, 6]; .say for $x.value.list

[16:05] <p6eval> rakudo 970243: OUTPUT«4␤5␤6␤»

[16:05] <pmichaud> I suspect those are unchanged

[16:05] <moritz_> pmichaud: the single pair is passed to a slurpy parameter, where its itemness shouldn't matter, IIRC

[16:05] *** ruoso left
[16:05] <pmichaud> it's not the pair itself, but the arguments

[16:05] <pmichaud> i.e.

[16:05] <moritz_> (yes, unchanged)

[16:06] <pmichaud> rakudo:  my $x = (<1 2 3> => <4 5 6>);  .say for $x.key

[16:06] <p6eval> rakudo 970243: OUTPUT«1 2 3␤»

[16:06] <pmichaud> rakudo:  my $x = (<1 2 3> => <4 5 6>);  .say for $x.value

[16:06] <p6eval> rakudo 970243: OUTPUT«4 5 6␤»

[16:07] <pmichaud> rakudo:  my $x = (<1 2 3> => <4 5 6>);  my $y = ([<1 2 3>] => [<4 5 6>]);   .say for $x.key.list; .say for $y.key.list;

[16:07] <p6eval> rakudo 970243: OUTPUT«1␤2␤3␤1␤2␤3␤»

[16:07] <moritz_> that's the old rakudo version, and both seem fine to me

[16:07] <pmichaud> rakudo:  my $x = (<1 2 3> => <4 5 6>);  my $y = ([<1 2 3>] => [<4 5 6>]);   .say for $x.value.list; .say for $y.value.list;

[16:07] <p6eval> rakudo 970243: OUTPUT«4␤5␤6␤4␤5␤6␤»

[16:07] <moritz_> rakudo: sub f($x) { return $x.list }; .say for f [1, 2, 3]

[16:07] <p6eval> rakudo 970243: OUTPUT«1␤2␤3␤»

[16:08] <moritz_> rakudo: say [1, 2, 3] ~~ Iterable|Positional

[16:08] <p6eval> rakudo 970243: OUTPUT«Bool::True␤»

[16:09] <pmichaud> in the new rakudo,  <1 2 3>  as a key is being stringified, it seems.

[16:09] <moritz_> oh.

[16:10] <pmichaud> rakudo:  my $x = (<1 2 3> => <4 5 6>);  my $y = ([<1 2 3>] => [<4 5 6>]);   say $x.key.WHAT;  say $y.key.WHAT;

[16:10] <p6eval> rakudo 970243: OUTPUT«Seq()␤Array()␤»

[16:10] <pmichaud> that's the difference between the two

[16:11] <moritz_> also say Seq()\nArray()\n here (with newest rakudo)

[16:11] <pmichaud> right, but the question is one of item/list context (more)

[16:12] <pmichaud> rakudo:  say "abcxyz".trans( <x y z> => <X Y Z> );   # part 1

[16:12] <p6eval> rakudo 970243: OUTPUT«abcXYZ␤»

[16:12] <pmichaud> rakudo:  say "abcxyz".trans( Seq.new(<x y z>).item => Seq.new(<X Y Z>).item );   # part 2

[16:12] <p6eval> rakudo 970243: OUTPUT«abcXYZ␤»

[16:12] <pmichaud> huh

[16:13] <moritz_> rakudo:  my $x = (<1 2 3> => <4 5 6>);  my $y = ([<1 2 3>] => [<4 5 6>]);   say $x.key.PARROT;  say $y.key.PARROT;

[16:13] <p6eval> rakudo 970243: OUTPUT«Perl6Scalar->Seq␤Perl6Scalar->Array␤»

[16:13] <moritz_> looks correct in both cases

[16:13] <moritz_> and the same on the new rakudo

[16:16] <pmichaud> locally:

[16:16] <pmichaud> > say "abcxyz".trans( < x y z > => <X Y Z> )

[16:16] <pmichaud> abcX Y ZAny()Any()

[16:17] <pmichaud> > my $x = (<x y z> => <X Y Z>);  .say for $x.value.list;

[16:17] <pmichaud> X Y Z

[16:18] * moritz_ tries a simple fix by guessing

[16:24] <pmichaud> > my $x = ((1,2,3) => (4,5,6));  say $x.value.list

[16:24] <pmichaud> 4 5 6

[16:24] <pmichaud> > my $y = (a => (4,5,6));  say $y.value.list

[16:24] <pmichaud> 456

[16:24] <pmichaud> o_O

[16:25] <pmichaud> > my $y = ('a' => (4,5,6));  say $y.value.list

[16:25] <pmichaud> 4 5 6

[16:25] <pmichaud> looks like the problem is somewhere in the definition of &infix:«=>»

[16:26] *** [mark] left
[16:30] <pmichaud> http://gist.github.com/617072   # something to do with infix:«=>»

[16:32] <moritz_> hm... double Perl6Scalar somewhere?

[16:32] <pmichaud> not finding one

[16:32] <pmichaud> and that shouldn't matter in the case of .list anyway

[16:33] <pmichaud> oh, very weird.

[16:33] <pmichaud> (nopasting)

[16:34] <pmichaud> http://gist.github.com/617081   # must be something in the binder

[16:37] <pmichaud> or in the attribute initializer

[16:37] <moritz_> ./perl6 -e '.say for (1, 2, 3).item.item.list # does what I expect it to do

[16:37] <moritz_> ie three separate lines

[16:37] <pmichaud> right

[16:37] <pmichaud> it's something to do with the pair constructor

[16:38] *** baux left
[16:38] *** MayDaniel joined
[16:38] <pmichaud> http://gist.github.com/617088   # pair constructor changes sense of $value somehow

[16:40] <pmichaud> might be an issue with all constructors

[16:41] <pmichaud> http://gist.github.com/617092   # problem with generic constructor

[16:43] <moritz_> so to summarize, you can't successfully .list on something that's returned from an attribute

[16:43] <pmichaud> that appears to be the current problem, yes.

[16:43] <pmichaud> which means the attribute isn't being initialized properly.

[16:44] <pmichaud> assignment works properly, though.

[16:44] <pmichaud> http://gist.github.com/617097   # assignment to an attribute works

[16:46] <moritz_> say XYZ.new(value => (1, 2, 3).item).value.list;

[16:46] <moritz_> 123

[16:46] *** HarryS left
[16:46] *** BinGOs left
[16:46] *** BinGOs joined
[16:46] *** BinGOs left
[16:46] *** BinGOs joined
[16:47] *** envi left
[16:47] <moritz_> it really needs to be passed to a sub to trigger the bug

[16:47] <pmichaud> I'm guessing the problem is BUILD/BUILDALL

[16:47] <pmichaud> oh

[16:47] <pmichaud> I suspect BUILD/BUILDALL isn't properly dereferencing before binding

[16:50] *** HarryS joined
[16:50] *** MayDaniel left
[16:51] <pmichaud> hmmm, that doesn't appear to be it either.

[16:54] *** envi joined
[16:54] *** envi left
[17:02] * moritz_ had this idea while listening to a podcast about designing board games

[17:03] <moritz_> can you construct a board game where you build a meta object system

[17:03] *** dakkar left
[17:03] <PerlJam> moritz_: Perl 6 home edition?

[17:03] <moritz_> and in the end you get points if your system is powerful, but also if it integrates well with that of other players

[17:03] <moritz_> PerlJam: I thought more that you have some cards that describe very basic behaviour, and you can combine them somehow

[17:04] <moritz_> the problem is that I can't explain what a meta class is to at least 99.99% of the population

[17:05] <moritz_> so I'd need to construct some problem space that's isomorphic to meta classes, but closer to the real world

[17:05] * moritz_ is now firmly convinced that he is crazy

[17:05] <PerlJam> you know ... most games seem to be about competing with others.  There need to be more games where you are rewarded for communicating and cooperating with the other players.

[17:05] <moritz_> there are lots of those

[17:06] <moritz_> I know many games where you totally have to trade resources with other players to win

[17:06] <moritz_> and that trade usually involves good communication

[17:07] <PerlJam> "There need to be *more* games ..."  :)

[17:07] *** rgrau_ joined
[17:07] <moritz_> :-)

[17:07] <PerlJam> and what does "win" mean anyway?

[17:08] <moritz_> (btw Germany has the biggest market world wide for board and card games)

[17:08] <PerlJam> germany++

[17:08] <moritz_> PerlJam: it means marking one or more player with a virtual funny hat

[17:09] <PerlJam> I think the whole idea of "winning" distorts people's thinking.  They usually end up thinking of it in terms of "doing better than someone else"

[17:10] *** araujo left
[17:11] *** Trashlord joined
[17:12] <dalek> book: c66f847 | moritz++ | README:

[17:12] <dalek> book: [README] link to PDFs; maettu++

[17:12] <dalek> book: review: http://github.com/perl6/book/commit/c66f84730a425f73c5320157d0aa77b83de45586

[17:12] *** envi joined
[17:15] <flussence> alright, I gave this another shot: http://gist.github.com/617012

[17:16] <gfldex> PerlJam: "win" means that you played better then in the last round

[17:17] <moritz_> gfldex: only under some very narrow certain conditions

[17:19] *** wamba left
[17:20] <PerlJam> I win! The last time I compared notes with everyone, I had more children than anyone else, ergo, I win.   ;)

[17:20] * PerlJam wonders when the next round starts ...

[17:20] <moritz_> flussence: I like this much better... I think the re-matching with m:nth can be avoided if you obtain match objects from .comb in the first place

[17:21] <flussence> ooh, I hadn't thought of that

[17:21] <moritz_> .comb(:match, $regex)

[17:22] *** kst joined
[17:22] <moritz_> wait, it's matching against the other string...

[17:23] <moritz_> hm

[17:23] <moritz_> another idea

[17:23] * PerlJam errands &

[17:23] <moritz_> first comb $other

[17:23] <moritz_> then self.split with a limit of @new-spaces - 1

[17:24] <moritz_> so you automatically get all excess spaces in the self in the last chunk

[17:24] <pmichaud> right

[17:24] <pmichaud> that's what I'm trying now :)

[17:27] *** araujo joined
[17:27] <pmichaud> http://gist.github.com/617162   # samespace() using split and zip

[17:27] *** risou joined
[17:29] <pmichaud> probably want a +@new instead of @new in the split, though.

[17:30] *** risou_ left
[17:33] <moritz_> pmichaud: seem to mistreat trailing spaces

[17:33] <pmichaud> that's possible, definitely

[17:33] <pmichaud> anyway, anything that relies on :nth()  I'd consider to be sub-optimal

[17:34] <moritz_> flussence++ # both versions

[17:34] <moritz_> flussence++ # tests

[17:35] *** timbunce left
[17:39] <pmichaud> afk, lunch

[17:41] *** timbunce joined
[17:43] *** justatheory left
[17:45] *** araujo left
[17:46] *** M_o_C joined
[17:46] *** araujo joined
[17:49] *** MayDaniel joined
[17:50] *** araujo left
[17:51] *** araujo joined
[17:51] *** araujo left
[17:52] *** araujo joined
[18:01] <flussence> .oO( I wish vim had a "pipe syntax-highlighted text to stdout and exit" flag )

[18:02] <moritz_> flussence: Text::VimColor

[18:03] <moritz_> flussence: you can easily write such a wrapper with that perl module

[18:07] *** araujo left
[18:08] *** araujo joined
[18:12] *** plobsing left
[18:15] <flussence> moritz_++ # that worked great!

[18:16] <flussence> one-liner I used, if anyone finds it useful:

[18:16] <flussence> cat samespace.p6 | perl -MText::VimColor -E 'say Text::VimColor->new(string=>join("", STDIN->getlines),html_full_page=>1)->html' | elinks -dump -dump-color-mode 1 -dump-width $COLUMNS

[18:16] *** araujo left
[18:18] *** araujo joined
[18:18] *** araujo left
[18:20] <moritz_> flussence: I do the syntax hilighting on my blog with Text::VimColor

[18:27] <dukeleto> moritz_: i was wondering what you did for that. It looks really good.

[18:28] *** risou left
[18:28] *** risou joined
[18:28] *** Chillance joined
[18:30] <moritz_> dukeleto: it was a major decision point while chosing the blog system

[18:39] *** mj41 left
[18:44] *** mj41 joined
[18:45] <sorear> good * #perl6

[18:45] * sorear is trying to think of a sane way to fake tweaks without implementing general multi methods

[18:53] *** Trashlord left
[18:58] *** bluescreen left
[18:59] *** bluescreen joined
[19:00] *** mfollett left
[19:03] <dalek> sprixel: 36d8db7 | diakopter++ | sprixel/ (2 files):

[19:03] <dalek> sprixel: verify that simple arg binding works

[19:03] <dalek> sprixel: review: http://github.com/diakopter/sprixel/commit/36d8db77387a7ef1419269918d5049b8f181aec2

[19:03] <dalek> sprixel: c718fb3 | diakopter++ | sprixel/ (4 files):

[19:03] <dalek> sprixel: verify closures can be perlesque locals.

[19:03] <dalek> sprixel: add new API shortcuts for closure creation & invocation.

[19:03] <dalek> sprixel: review: http://github.com/diakopter/sprixel/commit/c718fb342c6a02ad0733098a6c74b8b7203fc60b

[19:04] *** plainhao left
[19:09] *** HarryS left
[19:10] *** HarryS joined
[19:17] *** [particle] left
[19:18] *** [particle] joined
[19:19] *** kjeldahl joined
[19:19] *** timbunce left
[19:20] *** Trashlord joined
[19:26] *** timbunce joined
[19:28] *** risou_ joined
[19:31] *** risou left
[19:42] *** cogno joined
[19:44] *** Trashlord left
[19:47] *** Trashlord joined
[19:48] *** ruoso joined
[19:49] *** jtrag-AWAY joined
[19:51] <dalek> sprixel: 131f5e8 | diakopter++ | sprixel/ (3 files):

[19:51] <dalek> sprixel: verify that recursive nested string eval works.

[19:51] <dalek> sprixel: review: http://github.com/diakopter/sprixel/commit/131f5e85db0386b773d9641cf80dae0354eb4108

[19:55] *** rgrau_` joined
[19:55] *** rgrau_ left
[19:57] *** jtrag-AWAY is now known as jtrag

[19:57] *** takadonet left
[20:11] *** Ross left
[20:11] *** mfollett joined
[20:13] *** rgrau_`` joined
[20:14] *** MayDaniel left
[20:15] *** M_o_C left
[20:16] <sorear> uh, why does Rakudo have a Role class

[20:16] *** mfollett left
[20:16] <sorear> or rather, why is SomeRole ~~ Role

[20:17] *** rgrau_` left
[20:17] *** risou_ left
[20:17] <moritz_> because the spec mentions Role in several places?

[20:18] *** risou joined
[20:18] *** M_o_C joined
[20:18] <sorear> I expected that SomeRole.HOW ~~ Role

[20:22] *** risou left
[20:23] *** mfollett joined
[20:24] <sorear> I don't see any mention of Role outside of S32

[20:24] *** Ross joined
[20:24] *** Ross left
[20:24] *** Ross joined
[20:25] *** timbunce left
[20:26] *** rgrau_`` left
[20:27] *** cogno left
[20:28] <moritz_> there's a mention in S03

[20:32] *** rgrau_`` joined
[20:35] *** rainerschuster joined
[20:36] *** rgrau_`` left
[20:36] *** rgrau_`` joined
[20:42] <dalek> rakudo: 668719b | moritz++ | src/ (3 files):

[20:42] <dalek> rakudo: implement Cool.samecase, .subst(:samespace) and ss///

[20:42] <dalek> rakudo: 

[20:42] <dalek> rakudo: Patch partly by flussence++

[20:42] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/668719b579faacc807094ca2fb8c181a1d68359b

[20:43] *** rgrau_`` left
[20:43] *** rgrau_`` joined
[20:44] <dalek> roast: 59b8c22 | moritz++ | S05-substitution/subst.t:

[20:44] <dalek> roast: [subst.t] fix some tests, and unfudge them for rakudo

[20:44] <dalek> roast: review: http://github.com/perl6/roast/commit/59b8c22e6e1b4f73889c057d550472e7c5ec9fdf

[20:45] *** rgrau_``` joined
[20:48] *** rgrau_`` left
[20:48] *** pythonian4000afk is now known as pythonian4000

[20:49] *** pythonian4000 is now known as pythonian4000afk

[20:51] <cosimo> hi everyone

[20:51] <phenny> cosimo: 28 Sep 06:25Z <moritz_> tell cosimo perl6-cache-memcached added. You also have commit access to perl6/ecosystem on github now, so you can do it yourself next time

[20:51] <cosimo> moritz_: saw that, thanks!

[20:54] *** cogno joined
[20:58] <cosimo> rakudo: my $x = 'abcd'; $x ~~ s:g[bc] = '12'; say $x

[20:58] <p6eval> rakudo 5ce8fc: OUTPUT«a12d␤»

[20:58] <cosimo> rakudo: my $x = 'abcd'; $x ~~ s:g/bc/ = '12'; say $x

[20:58] <p6eval> rakudo 5ce8fc: OUTPUT«===SORRY!===␤Confused at line 22, near "$x ~~ s:g/"␤»

[20:59] <cosimo> rakudo: my $x = 'abcd'; $x.subst('bc', '12', :g); say $x

[20:59] <p6eval> rakudo 5ce8fc: OUTPUT«abcd␤»

[20:59] <cosimo> rakudo: my $x = 'abcd'; $x.subst(/bc/, '12', :g); say $x

[20:59] <p6eval> rakudo 5ce8fc: OUTPUT«abcd␤»

[20:59] <cosimo> rakudo: my $x = 'abcd'; $x.subst(rx:/bc/, '12', :g); say $x

[20:59] <p6eval> rakudo 5ce8fc: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 22␤»

[21:00] <cosimo> rakudo: my $x = 'abcd'; $x.subst(rx[bc], '12', :g); say $x

[21:00] <p6eval> rakudo 5ce8fc: OUTPUT«Could not find sub &rx␤  in main program body at line 22:/tmp/Lj3E_YbDvu␤»

[21:00] *** amkrankruleuen joined
[21:00] <cosimo> ook

[21:01] *** dukeleto left
[21:02] *** dukeleto joined
[21:05] *** cogno left
[21:05] *** MayDaniel joined
[21:08] *** kjeldahl left
[21:09] *** jtrag left
[21:10] <cosimo> rakudo: my $x = 'abcd'; $x ~~ s:g[bc] = '12'; say $x

[21:10] <p6eval> rakudo 5ce8fc: OUTPUT«a12d␤»

[21:10] <cosimo> rakudo: my $x = 'ab[cd'; $x ~~ s:g[< \[ >] = '12'; say $x

[21:10] <p6eval> rakudo 5ce8fc: OUTPUT«Could not find sub &s:g[< \[ >]␤  in main program body at line 22:/tmp/r1qOxMHost␤»

[21:11] <cosimo> rakudo: my $x = 'ab[cd'; $x ~~ s:g[\[] = '12'; say $x

[21:11] <p6eval> rakudo 5ce8fc: OUTPUT«ab12cd␤»

[21:11] <cosimo> rakudo: my $x = 'ab[cd'; $x ~~ s:g[\[ | \]] = '12'; say $x

[21:11] <p6eval> rakudo 5ce8fc: OUTPUT«ab12cd␤»

[21:11] <cosimo> rakudo: my $x = 'ab[]cd'; $x ~~ s:g[\[ | \]] = '12'; say $x

[21:11] <p6eval> rakudo 5ce8fc: OUTPUT«ab1212cd␤»

[21:11] <cosimo> rakudo: my $x = 'ab[]cd'; $x ~~ s:g[\[ | \]] = ''; say $x

[21:11] <p6eval> rakudo 5ce8fc: OUTPUT«abcd␤»

[21:12] <cosimo> so I can't use s:g[ < [] > ] to specify either '[' or ']' chars

[21:12] *** masak joined
[21:12] <masak> \o/

[21:13] *** cls_bsd left
[21:13] *** cls_bsd joined
[21:14] *** pythonian4000afk is now known as pythonian4000

[21:17] <cosimo> masak: hi! have a question for you I think

[21:17] <cosimo> 23:06 < cosimo> so I can't use s:g[ < [] > ] to specify either '[' or ']' chars?

[21:17] <cosimo> but this works

[21:17] <sorear> cosimo: you'd have better luck if you put a space between :g and [

[21:17] <cosimo> rakudo: my $x = 'ab[]cd'; $x ~~ s:g[\[ | \]] = ''; say $x

[21:17] <p6eval> rakudo 5ce8fc: OUTPUT«abcd␤»

[21:18] <sorear> \o/ masak

[21:18] <cosimo> rakudo: my $x = 'ab[]cd'; $x ~~ s:g [<[]>] = ''; say $x

[21:18] <p6eval> rakudo 5ce8fc: OUTPUT«ab[]cd␤»

[21:18] <cosimo> rakudo: my $x = 'ab[]cd'; $x ~~ s:g [<\[\]>] = ''; say $x

[21:18] <p6eval> rakudo 5ce8fc: OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/_DhFATJW0h␤»

[21:18] <cosimo> mmh

[21:19] <cosimo> rakudo: my $x = 'ab[]cd'; $x ~~ s:g [ < [] > ] = ''; say $x

[21:19] <p6eval> rakudo 5ce8fc: OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/3hwsewKMYO␤»

[21:20] <cosimo> rakudo: my $x = 'ab[]cd'; $x ~~ s:g [ < \[\] > ] = ''; say $x

[21:20] <p6eval> rakudo 5ce8fc: OUTPUT«Cannot modify readonly value␤  in '&infix:<=>' at line 1␤  in main program body at line 22:/tmp/8OcrC5S4IS␤»

[21:21] *** HarryS left
[21:21] *** HarryS joined
[21:23] <masak> pmichaud: re: #78284 -- if the problem in a ticket is fixed, but the fix exposes another (unrelated) problem, the ticket can still be closed, IMHO. (by opening a new ticket with the new problem, one keeps the injection between issues and tickets straight.)

[21:24] *** amkrankr1leuen joined
[21:24] <masak> I'm almost fine with keeping the old ticket... but if so, I would like it to be renamed to describing the new issue rather than the old one.

[21:24] *** amkrankruleuen left
[21:24] *** amkrankr1leuen is now known as amkrankruleuen

[21:24] *** amkrankruleuen left
[21:24] *** amkrankruleuen joined
[21:24] <cosimo> sorear: thanks

[21:29] *** bluescreen left
[21:31] <masak> mst :) http://twitter.com/shadowcat_mst/status/26779271666

[21:32] *** ruoso left
[21:32] <sorear> for the self-appointed Head Jerk of Perl, mst is remarkably enlightened

[21:32] <masak> that's his secret weapon.

[21:34] <slavik> mst?

[21:34] <sorear> Matt S. Trout

[21:34] <masak> slavik: Matt S. Trout

[21:34] <sjohnson> mst

[21:34] <slavik> is he important?

[21:34] <sjohnson> guys nickname

[21:34] <sorear> very

[21:34] <sjohnson> pretty popular in the perl community

[21:34] <slavik> I see

[21:35] <sjohnson> he hangs out on #perl

[21:35] <masak> slavik: his node has a high degree in the Graph of Perl.

[21:35] <slavik> gotcha

[21:35] <slavik> higher than TimToady?

[21:35] <sjohnson> no

[21:35] <slavik> so we're safe

[21:35] *** Ross left
[21:36] <sorear> in the Graph of Perl5, mst's degree may now have a higher degree

[21:36] *** Ross joined
[21:37] <masak> slavik: mst wants to start the tradition of "State of the Velociraptor", which would in some sense make him belong to the same category as TimToady. (but still not as degree-ful, I guess.)

[21:37] <masak> I think he is a good front figure of Perl 5.

[21:38] <masak> even his Perl 6 criticism is more on the teasing side than on the poisonous side.

[21:38] *** Helios left
[21:38] *** Helios joined
[21:38] <sorear> mst understands that he doesn't need to fear Perl 6

[21:38] <slavik> Perl6 > Perl5

[21:39] <masak> sorear: that's not 100% correct.

[21:39] <masak> sorear: I've had it from mst that "if Perl 6 rattles its swords too much, I will not hesitate to play ugly". (quote might not be exact)

[21:40] *** Italian_Plumber joined
[21:40] <sorear> masak: by "rattles his swords" do you mean "we start acting like deranged idiots"?

[21:41] *** MayDaniel left
[21:41] *** cls_bsd left
[21:41] *** cls_bsd joined
[21:41] <masak> sorear: were you part of the p5/p6 discussion this time last year?

[21:41] <sorear> If I was I was on the P5 side.

[21:42] <sorear> I didn't start taking P6 seriously until ~March

[21:42] <masak> it ended with mst and me publishing one blog post each, suggesting a way to view/understand the desires/fears of the other (sub-)community.

[21:43] <masak> but it *started* from the realization that the two communities were -- unwittingly and avoidably -- getting on each other's nerves.

[21:44] <masak> mst deserves the credit for initiating the 'peace talks'.

[21:45] <masak> the two posts: http://strangelyconsistent.org/blog/how-perl-6-could-kill-us-all and http://www.shadowcat.co.uk/blog/matt-s-trout/f_ck-perl-6/

[21:45] *** Italian_Plumber left
[21:49] <masak> moritz_: [backlog] a MOP board game. interesting.

[21:49] *** Chillance left
[21:50] <masak> I also believe that creating an isomorphism is necessary.

[21:50] *** xabbu42 left
[21:50] <masak> "objects" and "classes" are already in the human subconscious, thanks to guys like Plato and Socrates.

[21:50] *** _kaare left
[21:51] <masak> hm, those concepts are probably older than that, actually. "biological" intuition seems quite built-in to the human brain.

[21:51] *** Chillance joined
[21:54] <masak> PerlJam: [backlog] the nice thing with competing games over cooperating games is that the former have a tension having to do with some kind of zero-sum-ness. with cooperating games, you don't have to second-guess opponents as much, and they tend not to get as deep. :/

[22:00] *** rgrau_``` is now known as rgrau_

[22:00] <colomon> masak: I'm wondering what kind of game Lacuna Expanse will turn out to be.

[22:01] <masak> oh! just remembered. 'finite games' tend to be competitive, and 'infinite games' cooperative.

[22:01] <masak> there's a book: http://en.wikipedia.org/wiki/Finite_and_Infinite_Games

[22:01] <colomon> (I'm immensely fond of Shadows Over Camelot, which is a mostly cooperative game.  (And very finite, unless there's a non-obvious meaning to the term "finite games".))

[22:02] <masak> right. it's mostly a trend.

[22:04] <colomon> It seems like Lacuna Expanse will allow us to trade and work with each other... or blow each other to smithereens.  It will be interesting to see how it plays out once a few more people have spaceships.

[22:05] *** meppl left
[22:06] <colomon> If the empire stats in the game are not lying to me, no one in the game has any weapons at the moment.

[22:06] <sorear> is this like a Perl6 MMO?

[22:06] <cosimo> w

[22:07] <masak> sorear: it's written (partly) in Perl 5.

[22:07] <colomon> sorear: Lacuna Expanse is a perl 5 MMO

[22:08] <Tene> masak: you could use some trailing whitespace or a footer on strangelyconsistent.  Every time I get to the end of a post, it takes me a bit to recognize that it's the end, instead of the page not loading all the way or something.

[22:09] <masak> Tene: thanks for the feedback. I'll add some trailing whitespace right away. in the long run, I plan to have a footer of some kind.

[22:09] <masak> I just don't want to add in complexity before I know what to use it for :)

[22:10] <Tene> Well, a footer could be as simple as a <hr/>

[22:10] <Tene> Just something to indicate the end of the document

[22:11] <masak> I'm not too fond of <hr/>s

[22:11] <Tene> Sure.

[22:11] <Tene> comet/snowman?

[22:11] <Tene> ;)

[22:11] <Tene> I used to hang out with the lacuna expanse guy on IRC.  I think I'm still in a channel with him.

[22:11] <Tene> Yeah, #utah

[22:12] <masak> Tene: added some whitespace. better now?

[22:12] <Tene> Yeah, that's better.

[22:12] <Tene> Thanks.

[22:12] <masak> \o/

[22:12] <masak> I like it better too.

[22:13] * masak explicitly encourages others to suggest visual improvements to his blog

[22:14] <Tene> definitely needs more comet/snowman

[22:14] <masak> :)

[22:14] <masak> maybe up in the header?

[22:14] <flussence> I kinda like the lack of layout, it's less distracting from the words

[22:14] <masak> flussence: I plan not to move away too far from the lack of layout.

[22:18] *** mfollett left
[22:20] *** rainerschuster left
[22:24] <masak> ooh happy happy happy! my presentation software now exists. and more than 24h left to work on content!

[22:26] *** muixirt left
[22:30] *** jaldhar joined
[22:42] *** jaldhar left
[22:44] *** Intensity left
[22:46] *** jaldhar joined
[22:48] *** Intensity joined
[22:58] *** Mowah left
[22:59] <dalek> niecza/master: 56ae7e1 | sorear++ | / (3 files):

[22:59] <dalek> niecza/master: add delegate/class benchmark to perf/

[22:59] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/56ae7e1b700b21ec384ed986f15fb68fe0c88c6c

[22:59] <dalek> niecza/master: e82259c | sorear++ | src/ (2 files):

[22:59] <dalek> niecza/master: Implement parsing/BEGIN for simple roles

[22:59] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/e82259c2aacaf4dc52b56693002a01b2ef5529c6

[23:01] <masak> I love how hacking on something pays off in terms of nice graphics. my new presentation technique is called "infinite canvas", and is something of which I've been dreaming for quite a while.

[23:02] <Tene> masak: I'm curious.  Tell me more?

[23:02] <masak> Tene: ok, so we have SVG, right?

[23:03] <Tene> Right.

[23:03] <masak> SVG allows us to put things on a 2D plane, and then show these things as a presentation.

[23:03] <Tene> Right.

[23:03] <masak> the basic idea is to put the whole presentation in the same plane. all of the slides.

[23:03] <masak> everything else flows from that.

[23:03] <Tene> Hmm.

[23:04] <masak> proximal ideas thus become close to each other in the plane.

[23:04] <masak> zooming in and zooming out takes on a very concrete role.

[23:05] <masak> I currently have the viewports of each slide being given as rectangles in a separate layer in the SVG. this seems to work well.

[23:05] <masak> if I want, I can annotate these rectangles with transition effect instructions.

[23:06] <Tene> Huh.

[23:07] <masak> everything gets rendered as PDFs in the end, but the transition effects get pretty close to feeling like the presentation is animated.

[23:07] *** M_o_C left
[23:07] <Tene> I'm curious to see what you produce with this.

[23:08] <masak> I'll publish it on Sunday. including the source code.

[23:08] <masak> (Perl 5, due to superior XML tooling. zefram++)

[23:09] *** pythonian4000 is now known as pythonian4000afk

[23:11] <dukeleto> masak: that sounds really awesome, can't wait to check it out. I hate how most presentation software imposes linear thought

[23:16] <masak> I'm fairly anti-bullet-point. I already find that this method makes me focus on form and visual presentation more than on text. and I can do the whole presentation from within Inkscape.

[23:25] *** HarryS is now known as Guest53252

[23:26] *** jaldhar left
[23:27] *** Guest53252 is now known as HarryS

[23:29] *** amkrankruleuen left
[23:51] *** Ross left
[23:52] <dalek> niecza/master: 5bbfa53 | sorear++ | / (5 files):

[23:52] <dalek> niecza/master: Avoid retaining frames for rules and tokens

[23:52] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/5bbfa53e63dc655890bf4dcf6eb0483f9757dfac

[23:53] *** HarryS left
[23:55] <masak> zzz &

[23:56] *** bluescreen joined
[23:57] *** HarryS joined
[23:58] *** rgrau_ left
