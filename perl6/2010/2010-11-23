[00:01] *** Chillance left
[00:09] <masak> ah, here's a workaround:

[00:09] <masak> rakudo: sub foo($a, %h = {}) { bar($a, %h) }; sub bar($a, %h?) { say "alive!" }; foo(42)

[00:09] <p6eval> rakudo : OUTPUT«alive!␤»

[00:10] <masak> of course.

[00:10] * masak adds that to the ticket

[00:11] *** pyrimidine joined
[00:11] *** pyrimidine left
[00:15] *** sftp left
[00:24] *** lichtkind left
[00:27] *** icwiener_ joined
[00:28] *** knewt2 left
[00:31] *** icwiener left
[00:36] *** cdarroch left
[00:38] <masak> blog post! http://strangelyconsistent.org/blog/november-22-2010-bring-em-on

[00:40] <colomon> "not it's just" should maybe be "now it's just"?

[00:40] <masak> thanks. fixing. colomon++

[00:41] <colomon> masak++ # nice post, and actually, you know, keeping the Perl 6 flame alive.  ;)

[00:42] <masak> thanks.

[00:42] <masak> every time I come back to this kind of hands-dirty work, it's great fun.

[00:42] <colomon> I know.  Wish we all had more time to get our hands-dirty.

[00:42] <colomon> errr, hands dirty.  

[00:43] <colomon> afk

[00:45] *** Guest99986 left
[00:45] *** Guest99986 joined
[00:46] *** Guest99986 left
[00:46] *** Guest99986 joined
[00:46] *** Guest99986 left
[00:47] <masak> decommute &

[00:47] *** masak left
[00:47] *** Guest99986 joined
[00:48] *** mssm left
[00:48] *** Guest99986 left
[00:49] *** Guest99986 joined
[00:52] <sjohnson> suicide &

[00:52] <sjohnson> :)

[00:59] *** QinGW joined
[01:08] *** masak joined
[01:08] <masak> sjohnson: please don't joke about such things :-/

[01:10] <sjohnson> sorry, just getting really darn cold up here in Canada!

[01:10] * sjohnson bundles up

[01:20] <flussence> according to other people around me, it's cold here too. I haven't noticed at all :/

[01:34] <sjohnson> rakudo: say round(5.4)

[01:34] <p6eval> rakudo : OUTPUT«5␤»

[01:34] <sjohnson> no round in p5?

[01:35] <sjohnson> rakudo: say round(5.5)

[01:35] <p6eval> rakudo : OUTPUT«6␤»

[01:35] <masak> buubot: eval int(5.4 + .5)

[01:35] <buubot> masak: 5       

[01:35] <masak> sjohnson: that's probably what you'd do in Perl 5. or load a module.

[01:35] <sjohnson> or sprintf

[01:36] <masak> indeed.

[01:36] <sjohnson> i'll do % with the f

[01:36] <sjohnson> :-)

[01:37] <sjohnson> wrote a script to calculate how much money i owe my brother.  perl is very useful!

[01:40] <sjohnson> needless to say, i paid him off in many installments, and calculating it everytime got tedious

[01:42] *** don_bitter16 joined
[01:44] <colomon> for some bizarre reason, it was 63F here today.  

[01:44] <colomon> Tomorrow it's supposed to be back to a more seasonal 42F

[01:45] <colomon> jnthn: ping?

[01:45] *** don_bitter16 left
[01:45] <masak> colomon: jnthn is asleep. :)

[01:45] * diakopter agrees

[01:45] <colomon> blast

[01:46] <masak> rakudo: sub f2c($f) { ($f - 32) * 5/9 }; say f2c 63

[01:46] <p6eval> rakudo : OUTPUT«17.2222222222222␤»

[01:46] <masak> rakudo: sub f2c($f) { ($f - 32) * 5/9 }; say f2c 42

[01:46] <p6eval> rakudo : OUTPUT«5.55555555555556␤»

[01:46] <masak> ah.

[01:47] <colomon> yes, from "no jacket needed" weather straight to a bit above freezing.

[01:56] *** bitter16_ joined
[01:56] *** bitter16_ left
[01:59] <bitter16> exit

[01:59] *** bitter16 left
[02:09] *** whiteknight left
[02:13] *** kjeldahl joined
[02:28] *** lamstyle left
[02:30] *** lamstyle joined
[02:33] *** redicaps joined
[02:34] *** ch3ck3r joined
[02:34] *** risou joined
[02:36] *** fhelmberger joined
[02:36] <colomon> Null PMC access in push_string().... hmmm

[02:37] <masak> golfed example?

[02:37] <colomon> it's in nqp-rx

[02:38] <masak> oh.

[02:38] <colomon> and it's happening somewhere in the middle of the stage 2 compile

[02:38] *** molaf_ joined
[02:38] *** ch3ck left
[02:38] <masak> oh!

[02:39] <colomon> though if you have a clue what might cause that, I'm all eyes

[02:40] <colomon> errr, ears

[02:40] <masak> no clue, sorry.

[02:40] <masak> I have no uncanny intuition about nqp-rx failures :)

[02:42] *** alester left
[02:42] *** molaf left
[02:50] *** icwiener_ left
[03:04] <Tene> great weather in sfbay :)

[03:07] *** risou left
[03:07] *** risou joined
[03:10] *** alester joined
[03:13] *** ch3ck3r left
[03:42] *** Guest99986 left
[03:42] <diakopter> nqp: say("h"~~/h/)

[03:42] <p6eval> nqp: OUTPUT«h␤»

[03:42] <diakopter> nqp: say("ih"~~/h/)

[03:42] <p6eval> nqp: OUTPUT«h␤»

[03:44] <diakopter> nqpnet: my $a; say($a.defined)

[03:44] <p6eval> nqpnet: OUTPUT«RakudoOutput.cs(136,35): warning CS0414: The private field `NQPOutput_1290483890.ConstantsTable' is assigned but its value is never used␤Compilation succeeded - 1 warning(s)␤0␤»

[03:44] <diakopter> meh

[03:44] <diakopter> nqpnet: my $a; say($a.defined)

[03:44] <p6eval> nqpnet: OUTPUT«RakudoOutput.cs(136,35): warning CS0414: The private field `NQPOutput_1290483906.ConstantsTable' is assigned but its value is never used␤Compilation succeeded - 1 warning(s)␤0␤»

[03:45] <diakopter> blergh

[03:46] <masak> still fails :)

[03:46] <diakopter> well, it did have some output

[03:46] <diakopter> (I just noticed)

[04:01] *** risou left
[04:16] <diakopter> masak: it must be ... 5am

[04:16] <diakopter> ?

[04:16] <TimToady> it's his last fling before he marries five amazons

[04:17] <masak> :)

[04:17] <masak> diakopter: aye. bit disconnected to the local sun time right now.

[04:17] <masak> s/to/from/

[04:18] * diakopter very confused by what TimToady said

[04:19] <diakopter> I mean, I see "5am" -> "five am[azons]"

[04:19] <TimToady> you are clueless?

[04:19] <masak> diakopter: ooh. didn't spot that one.

[04:19] <masak> TimToady: you're a tease :)

[04:19] <diakopter> but I don't get the fling/marriage part

[04:20] <masak> diakopter: where were you when I handed out clues?

[04:21] <diakopter> in the conservatory with the rope

[04:21] <masak> diakopter: hold on, I'll link ya.

[04:21] <diakopter> oh wait

[04:21] <diakopter> those clues

[04:21] <diakopter> I've seen the first 2

[04:22] <masak> there you go then.

[04:22] <masak> I don't think there was more to what TimToady said than that.

[04:22] <diakopter> ah

[04:22] *** kanishka joined
[04:23] <diakopter> so perhaps my pun interpretation was a backropun

[04:23] <masak> regardless, it was a very pretty one.

[04:24] <masak> but I suspect TimToady had the association forwards before you had it backwards. :P

[04:24] <diakopter> we'll never know

[04:24] *** rgrau_ left
[04:24] <masak> guess not.

[04:24] <TimToady> I had the 5, but I didn't have the am, so you're half backropunished

[04:24] <masak> a halfback!

[04:25] <diakopter> how punifive

[04:25] <masak> ...and we're done, I think.

[04:25] <masak> thanks, everyone.

[04:25] <TimToady> o/

[04:25] * masak goes to work

[04:26] * diakopter bows -o-

[04:26] *** masak left
[04:33] *** meppel joined
[04:37] *** meppl left
[04:58] *** meppel left
[04:58] *** meppl joined
[05:00] *** envi joined
[05:14] *** Trashlord left
[05:14] *** andmott joined
[05:15] <andmott> hello

[05:15] <scp1> hi

[05:22] *** andmott left
[05:26] <sorear> hi

[05:26] <sorear> good * #perl6

[05:26] <sorear> TimToady: what besides $*FILE<name> is there?

[05:33] *** jaldhar joined
[05:34] <lue> ohayo o/

[05:34] <sorear> Hi.

[05:35] <dalek> niecza: 6ff137e | sorear++ | / (4 files):

[05:35] <dalek> niecza: Implement LTM for :i STRING

[05:35] <dalek> niecza: review: https://github.com/sorear/niecza/commit/6ff137ebf8

[05:45] <sorear> yay, /\S/ is working now

[05:47] *** knewt2 joined
[05:47] *** pmichaud joined
[05:50] *** kanishka left
[05:56] *** masak joined
[05:56] <TimToady> sorear: nothing that I know of, yet, but one could imagine other sources of, er, source code

[05:58] <TimToady> at the time, I was mostly interested in not storing a gazillion copies of the file name

[05:59] <scp1> masak, how do you deal with, say, 'make test' spitting out a mile of errors - do you close STDERR and redirect to a log, or just let it be?

[05:59] <masak> scp1: what's the context here? Rakudo?

[05:59] *** kaare joined
[06:00] *** kaare is now known as Guest59367

[06:04] <sorear> TimToady: oh!  you used a reference type to prevent copying?

[06:05] <scp1> masak, oh sorry - the tote project :)

[06:06] <masak> ah! I suppose I just make sure my scrollback is long enough.

[06:06] <scp1> ah, okay

[06:08] <ingy> I just built rakudo star on ubuntu and get this error: ./perl6: error while loading shared libraries: libparrot.so.2.9.1: cannot open shared object file: No such file or directory

[06:09] <ingy> am i dumb?

[06:09] <masak> hm. rakudo star and libparrot.so.2.9.1? odd combination.

[06:09] <ingy> or dumber?

[06:09] <masak> I'm not aware that Rakudo Star has been released this month. and that Parrot version number is the latest one.

[06:10] <ingy> I just grabbed the latest star download tarball from github and followed the structions

[06:10] <ingy> hmm

[06:10] * masak tries that

[06:10] <ingy> thanks

[06:11] <dalek> 6model: 2bceca4 | diakopter++ | / (4 files):

[06:11] <dalek> 6model: [dotnet] make regex Actions generate method not sub

[06:11] <dalek> 6model: review: https://github.com/jnthn/6model/commit/2bceca45a5

[06:11] <dalek> 6model: b68ad46 | diakopter++ | dotnet/ (2 files):

[06:11] <dalek> 6model: Merge branch 'master' of github.com:jnthn/6model

[06:11] <dalek> 6model: review: https://github.com/jnthn/6model/commit/b68ad46d11

[06:11] <dalek> 6model: c319dc1 | diakopter++ | dotnet/compiler/DNST (2 files):

[06:11] <dalek> 6model: [DotNetSyntaxTree] Added DNST::Return and DNST::Local, enabling same-routine local variables and returning from anywhere.

[06:11] <dalek> 6model: Implemented their emitters in DotNetSyntaxTree2CSharp

[06:11] <dalek> 6model: review: https://github.com/jnthn/6model/commit/c319dc1141

[06:11] <dalek> 6model: d3c1b8f | diakopter++ | dotnet/runtime/Runtime/Ops/P6capture.cs:

[06:11] <dalek> 6model: [dotnet] made the native P6capture representation auto-vivify its storage

[06:11] <dalek> 6model: review: https://github.com/jnthn/6model/commit/d3c1b8f9ec

[06:11] <dalek> 6model: c6aa078 | diakopter++ | dotnet/runtime/Runtime/Ops/Metamodel.cs:

[06:11] <dalek> 6model: [dotnet] fixed my logic bug; oops.

[06:11] <dalek> 6model: review: https://github.com/jnthn/6model/commit/c6aa078e05

[06:11] <dalek> 6model: 91a2613 | diakopter++ | / (3 files):

[06:11] <dalek> 6model: [PAST::Regex] added more regex compiler scaffolding - lots of things faked, but it "works"

[06:11] <dalek> 6model: review: https://github.com/jnthn/6model/commit/91a2613762

[06:11] <masak> ingy: oh wait, seems I'm wrong. that's the Parrot version for the latest Star release.

[06:12] <ingy> masak: rakudo-star-2010.10

[06:12] <masak> yes. that one.

[06:12] <ingy> any ideas?

[06:13] <masak> nope.

[06:13] * sorear fixes 90 errors and sees how many more files pass

[06:13] <masak> ingy: but I'm trying to build that tarball here.

[06:13] <lue> .oO(something's wonky with my code...)

[06:13] <ingy> I built and installed it fine

[06:15] <ingy> -rwxr-xr-x 1 ingy ingy 8017442 2010-11-23 11:16 install/lib/libparrot.so.2.9.1*

[06:15] <ingy> it's there

[06:15] <ingy> perl6 just can't find it I guess

[06:16] <ingy> is there an env var I can set?

[06:18] <sorear> LD_LIBRARY_PATH

[06:19] <sorear> .so files should in general always be installed to /lib, /usr/lib, or /usr/local/lib

[06:20] *** risou joined
[06:21] <lue> aha! does this line    if $/.keys[0] == "directive" {    dwim? [I just realized that from the looks of the output, it always matches this line]

[06:22] <sorear> eq

[06:22] <sorear> == is only for numbers

[06:23] <diakopter> nqpnet: say("h"~~/h/)

[06:23] <p6eval> nqpnet: OUTPUT«h␤»

[06:23] <diakopter> hee. mostly faked-up. but largely there.

[06:24] <lue> ah. Thank you sorear, it works now! \o/

[06:24] <diakopter> the scaffolding, that is.

[06:24] <diakopter> almost none of the actual regex features work yet

[06:26] <dalek> niecza: 43b4a24 | sorear++ | docs/DIRECTIONS:

[06:26] <dalek> niecza: niecza has basic :i now

[06:26] <dalek> niecza: review: https://github.com/sorear/niecza/commit/43b4a24645

[06:27] *** Juerd left
[06:27] *** Juerd joined
[06:31] *** silug left
[06:35] <ingy> sorear, masak:

[06:35] <ingy> ingy@ingy-eee:~/src/rakudo-star-2010.10$ LD_LIBRARY_PATH=`abs_path install/lib/` ./install/bin/perl6 

[06:35] <ingy> Could not load oplib `perl6_ops'

[06:35] <scp1> masak, right; prototype: https://github.com/trapd00r/utils/blob/master/autotest . Now I need to find out a way to watch $dir and all important files therein - t/* and lib/**.pm

[06:36] <masak> scp1++

[06:36] <ingy> it seems odd that r* would not install properly

[06:36] <masak> scp1: I'd do t**

[06:36] <masak> er, t/**

[06:37] <ingy> do we no longer support installing perl6 in /usr/local/bin?

[06:37] <scp1> Hmm, subdirs in t/ ? Havent encountered that

[06:37] <masak> scp1: oh, it's not that uncommon.

[06:38] <dalek> dalek-poller: 303ac6a | sorear++ | push.psgi:

[06:38] <dalek> dalek-poller: Drop commit packets with >15 commits, with a warning to the offender

[06:38] <dalek> dalek-poller: review: https://github.com/sorear/dalek-poller/commit/303ac6a6cc

[06:38] <masak> ingy: it works here, even without mucking with LD_LIBRARY_PATH.

[06:39] <masak> ingy: though I can't rule out that my globally installed Parrot is helping me. I did have the same error you did before doing 'make install', though.

[06:39] *** dalek left
[06:40] *** dalek joined
[06:40] *** ChanServ sets mode: +v dalek

[06:43] <ingy> masak: where did you install to?

[06:44] <ingy> I just installed to ./install

[06:44] <ingy> because that's what the doc said

[06:44] <masak> same here.

[06:44] <sorear> masak: what should I put in my initial release message?

[06:44] <ingy> both ./perl and ./install/bin/perl work?

[06:45] <ingy> *perl6

[06:46] <masak> sorear: what it is you're building, where you aim to take it, how to get things running, how to get involved. something like that.

[06:46] <Tene> lue: order of .keys is not guaranteed

[06:46] <Tene> iirc

[06:47] <lue> "You turned into a cat! A SMALL cat! You violated Conservatrion of Energy![...]" curse you moritz_, I like this fanfic

[06:47] <masak> Tene: oh! I completely missed that. :)

[06:47] <lue> Tene: there's only ever one key, so that shouldn't be a problem :)

[06:47] <Tene> lue: Yeah, I'm quite fond of it too.  I'm fond of everything Eliezer has produced, though.

[06:48] <masak> sorear: are you planning on making time-based releases. if so, then you should probably describe it in the release announcement too.

[06:48] <masak> Tene: he's written other things? o.O

[06:48] <Tene> lue: if it doesn't match, it won't have that key

[06:48] <lue> if I did have >1 key though, I'd expect some way of finding the right one when I don't know anything about the results yet.

[06:49] <lue> Tene: It works now, I was just using == when it should've been  eq  .

[06:49] <masak> lue: if any($/.keys) eq 'directive' { ... }

[06:49] <Tene> masak: a few other pieces of fiction, and a large amount of blogging in preparation for writing a book about rationality and cognitive biases.

[06:49] <masak> Tene: nice!

[06:49] <masak> this requires further investigation.

[06:49] <lue> masak: should I do it like that anyway, in case I need to remember it later?

[06:49] <Tene> masak: http://yudkowsky.net/other/fiction/

[06:49] <masak> lue: nah. just suggesting alternatives.

[06:49] <Tene> masak: http://wiki.lesswrong.com/wiki/Sequences

[06:50] <masak> Tene: thanks x 2

[06:55] *** wtw joined
[06:59] <lue> my my, a very geeky person must've written this fanfic :)

[07:00] <Tene> masak: Oh, he also wrote http://www.fanfiction.net/s/5588986/1/Trust_in_God_or_The_Riddle_of_Kyon under his name, instead of the LessWrong persona

[07:01] <masak> EGOODSTUFFOVERFLOW

[07:01] <lue> solution: another bukkit.

[07:02] <Tene> Did you just call masak a walrus?

[07:03] <lue> I hired the guy in that photo to steal the bukkit for this moment.

[07:03] <Tene> http://luminous.elcenia.com/index.shtml is another fanfic by someone in the LessWrong community, possibly inspired by HPRM, also heavily discusses thought and cognitive biases, but less geeky.

[07:03] <lue> [I has a TARDIS, remember?]

[07:10] *** nymacro joined
[07:12] <lue> "Trunks whose insides hold more than their outsides?" (some-wizard has been visiting Gallifrey!)

[07:12] *** baest left
[07:13] <Tene> hehe

[07:14] *** baest joined
[07:16] <lue> I bet the trunk is signficantly worse than the ∞:1 capacity of a TARDIS though... </commentary> # couldn't help it :/

[07:17] <Tene> lue: Yes; it clearly has a limit.

[07:18] <lue> could you stuff Earth into the trunk?

[07:18] <Tene> lue: The trunk has a very small limit; It's about the size of a small room.

[07:18] *** zby_ joined
[07:18] <Tene> iirc

[07:19] *** zby left
[07:19] *** zby joined
[07:20] <lue> I think DW has ruined my sense of proportion. That sounds good for only a weekend holiday :)

[07:22] *** Woodi left
[07:22] <lue> I overall like this fanfic so far. The author has given Harry a much more Artemis Fowl type personality. .oO(must...write....review......)

[07:23] *** Woodi joined
[07:25] <sorear> lue: it's impossible to fill an infinitely large space with air at a constant pressure, look up the bekenstein bound

[07:27] <sorear> masak: isn't that spelled if $<directive>:exists ?

[07:27] <masak> sorear: modulo feature availability, yes, probably.

[07:27] <sorear> 59m 50s  85.58%

[07:33] * sorear wonders whether mothly releases would be good

[07:33] <sorear> What do poeple *do* with yapsi monthlies anyway?

[07:34] <moritz_> they read the release announcements, and chuckle :-)

[07:35] <moritz_> but people do install the rakudo monthlies

[07:35] <sorear> part of me wants to just announce the *project*, then make people follow git

[07:36] <sorear> std: { $^a }

[07:36] <p6eval> std a194beb: OUTPUT«ok 00:01 118m␤»

[07:39] *** Guest59367 is now known as kaare_

[07:41] <masak> the August Yapsi release has had more downloads than the August Rakudo release.

[07:41] <masak> of course, that's because of Rakudo Star... but still.

[07:42] *** cjk101010 joined
[07:43] *** cjk101010 left
[07:43] <sorear> odd that niecza-std is warning on { $^a }

[07:43] *** zb left
[07:44] *** zb joined
[07:46] *** cjk101010 joined
[08:00] *** _xiaomo_ joined
[08:02] *** _xiaomo_ left
[08:03] *** _xiaomo_ joined
[08:03] <dalek> niecza: c67c2b0 | sorear++ | v6/tryfile:

[08:03] <dalek> niecza: [v6] fix placeholder generation

[08:03] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c67c2b062b

[08:06] *** risou_ joined
[08:09] *** risou left
[08:11] <sorear> niecza: my %x; %x<used>++; say %x.dump

[08:11] <p6eval> niecza 43b4a24: OUTPUT«{}␤»

[08:16] *** justatheory left
[08:23] <lue> goodnight o/

[08:24] <sorear> niecza: my $a ::= 1; $a++; say $a;

[08:24] <p6eval> niecza 43b4a24: OUTPUT«Unhandled exception: Writing to readonly scalar␤  at  line 1 (MAIN mainline @ 1)␤  at  line 970 (SAFE G1088ANONC @ 5)␤  at  line 970 (SAFE module-SAFE @ 28)␤  at  line 970 (SAFE mainline @ 1)␤  at  line 0 (boot @ 1)␤  at  line 0 (ExitRunloop @ 0)␤"mono" unexpectedly returned

[08:24] <p6eval> ..exit v…

[08:26] <dalek> niecza: e289709 | sorear++ | / (3 files):

[08:26] <dalek> niecza: Fix optimized ++ not autovivifying

[08:26] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e289709269

[08:27] *** wamba joined
[08:33] <sorear> hrm, S02-lexical-conventions/unicode.t requires 'use graphemes' semantics

[08:34] <masak> Rakudo doesn't have that either.

[08:36] *** Axius joined
[08:36] <sorear> I worry that compiling STD for graphemes mode will push it well into "unusably slow" territory

[08:37] <dalek> niecza: e8f039c | sorear++ | v6/tryfile:

[08:37] <dalek> niecza: [v6] fix anon enums

[08:37] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e8f039c76c

[09:07] *** risou joined
[09:08] *** risou_ left
[09:10] <sorear> std: my @a = 1; f(my @x = (1, 2, 3));

[09:10] <p6eval> std a194beb: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤ 'f' used at line 1␤Check failed␤FAILED 00:01 123m␤»

[09:18] *** Axius left
[09:38] *** Monty_P joined
[09:38] <Monty_P> Hello all..

[09:39] <moritz_> hi Monty_P 

[09:39] <sorear> Hello

[09:41] <Monty_P> perl6: say 'testing... :-|!'

[09:41] <p6eval> pugs, rakudo : OUTPUT«testing... :-|!␤»

[09:41] <masak> hi Monty_P

[09:42] * moritz_ wonders if that nick stands for "Monty Perl" :-)

[09:42] <masak> or 'Monty Pascal'...

[09:43] <Monty_P> @moritz_: Monty lisP! ;)

[09:43] <moritz_> Monty_P: ah, good one

[09:43] <masak> Monty Pascal...a variant of Pascal where all strings must be 255 bytes long or longer.

[09:44] <dalek> niecza: 9da8467 | sorear++ | v6/tryfile:

[09:44] <dalek> niecza: [v6] fix parsing of assignments in parameter lists

[09:44] <dalek> niecza: review: https://github.com/sorear/niecza/commit/9da8467598

[09:45] <sorear> Is it just me, or are the people who say @somebody: disproportionately more likely to be sane?

[09:48] <masak> sorear: haven't thought of it in that light.

[09:48] <masak> sorear: I tend to associate the habit with newcomers, or die-hard twitterers.

[09:49] <Monty_P> How is perl6 doing regarding GUI programming?

[09:50] <moritz_> Monty_P: you can access the p5 TK library through blizkost

[09:50] <moritz_> I don't know of any native ports

[09:50] <sorear> I saw a blog post about a failed grant to wrap Tk once

[09:50] <sorear> so I was compelled to do something

[09:51] <moritz_> I found that grant a bit weird

[09:51] <moritz_> somebody who has never interacted with the p6 community in some way

[09:51] * sorear vaguely wants to do a WinForms or gtk# binding now

[09:52] <Monty_P> moritz_: I see..

[09:52] *** timbunce joined
[09:52] <moritz_> sorear: is there an easy way to access C# libs from niecza?

[09:53] <moritz_> I mean, without hacking on the compiler :-)

[09:53] *** dakkar joined
[09:53] *** blongden left
[09:54] *** tzhs joined
[09:56] <sorear> FSVO easy

[09:56] <sorear> you need to use Q:CgOp{} blocks

[09:56] <sorear> and some rather arcane instructions

[09:57] <sorear> also there's no support for adding references, so you can only use standard C# libs

[09:57] <sorear> but if "easy" = "without hacking the compiler proper", then yes :)

[09:57] <moritz_> :-)

[09:58] <mathw> What's the spec like in Perl 6 for foreign imports?

[09:58] <sorear> of course, I'd eventually like to just say use WinForms:from<CLS Windows.Forms>;

[09:59] <moritz_> the syntax is basically   use SomeModule:from<lang>;

[09:59] *** Monty_P left
[09:59] <sorear> CLS = Common Language Standard = the .NET interop spec

[09:59] <moritz_> the spec is not very rigorous at this point :-)

[09:59] <moritz_> it's one of the areas that need implementation exploration first

[10:00] <sorear> blizkost was in part an exploration of that

[10:00] <sorear> but i ran into a lot of walls on the Parrot side

[10:01] <sorear> places where there is no standard way to do something, so I can't portably access foreign objects

[10:01] *** redicaps left
[10:01] <sorear> vtables are just words.  VTABLE_iter implementations in Parrot are all-pairs incompatible

[10:02] <moritz_> it's a little sad how much work happens in parrot regarding language interop, considering that it's one of the key selling points

[10:02] <moritz_> otoh I'm also sad that there's not more work in dozens of other areas, so my critic isn't well placed either :-)

[10:02] <sorear> frankly at this point I'm not convinced that general interop is possible

[10:03] <sorear> the CLS allows any two languages to interop to the extent they can emulate C# APIs :)

[10:05] <sorear> general interop -> interop as general as parrot wants to promise

[10:05] <mathw> yes there are always some limitations

[10:05] *** QinGW left
[10:05] <mathw> all the interesting languages on the JVM seem to screw around with the object model

[10:05] <mathw> they can talk to Java objects no trouble, but Java might have some problems talking to theirs...

[10:07] *** wamba left
[10:11] <masak> mathw: it's hard to be forward-compatible in such a case.

[10:12] <masak> mathw: maybe something like CLOS would pull it off.

[10:12] <masak> then again, maybe not.

[10:13] <mathw> yeah it is hard

[10:13] <mathw> I suppose you'd have to built metaclass into the VM

[10:13] <mathw> and allow libraries to provide their metaclasses

[10:13] <mathw> and somehow hope that you got the design right so that this could then provide all the functionality required

[10:13] <mathw> but the host languages might then not have the syntax for it

[10:13] <mathw> so you'd still be screwed

[10:14] <dalek> niecza: 28aad16 | sorear++ | lib/Kernel.cs:

[10:14] <dalek> niecza: Do not crash for objects without Numeric methods

[10:14] <dalek> niecza: review: https://github.com/sorear/niecza/commit/28aad167f1

[10:14] <dalek> niecza: 8405b8e | sorear++ | v6/tryfile:

[10:14] <dalek> niecza: [v6] Add STD.clean_id

[10:14] <dalek> niecza: review: https://github.com/sorear/niecza/commit/8405b8e3e3

[10:14] <mathw> total interop is only possible in the area where all involved agree on a basic set of things they can do

[10:14] <mathw> hence CLS and its particular requirements

[10:15] <sorear> blizkost allows you to marshal exactly two kinds of data between Parrot and Perl 5

[10:15] <sorear> strings and closures

[10:17] <masak> breakfast for champions.

[10:37] *** snearch joined
[10:55] *** nymacro left
[11:17] *** redicaps joined
[11:19] *** Patterner left
[11:20] *** snearch left
[11:23] *** rgrau_ joined
[11:31] *** jaldhar left
[11:32] *** jaldhar joined
[11:53] *** daxim joined
[11:57] *** kjeldahl left
[11:57] *** molaf_ left
[12:11] *** agentzh joined
[12:11] <masak> agentzh! \o/

[12:15] <masak> rakudo: role A { method foo { ... }; method bar { say "HAI" } }; role B { method foo { say "OH" }; method bar { ... } }; class C does A does B {}; .foo && .bar given C.new

[12:15] <p6eval> rakudo : OUTPUT«===SORRY!===␤Method 'foo' collides and a resolution must be provided by the class␤»

[12:15] <masak> that should work, right?

[12:15] *** kjeldahl joined
[12:19] <moritz_> masak: yes, it should

[12:20] * masak submits rakudobug

[12:23] *** _xiaomo__ joined
[12:23] *** _xiaomo__ left
[12:27] *** _xiaomo_ left
[12:27] <agentzh> masak! \o/

[12:29] *** orafu left
[12:29] *** orafu joined
[12:32] *** zb left
[12:33] *** ambs joined
[12:36] <masak> PHP 5.4 gets roles -- but calls them traits, like Smalltalk does. http://simas.posterous.com/new-to-php-54-traits

[12:36] *** shelling_lab joined
[12:37] <masak> they have a special syntax for method resolution.

[12:38] *** zb joined
[12:38] <moritz_> and they use 'use' for trait application

[12:39] <masak> de gustibus non est disputandum :)

[12:40] * moritz_ didn't dispute anything :-)

[12:41] <masak> that's disputable. :)

[12:41] * moritz_ contradicts, just because.

[12:42] <masak> current score: confusion 1 -- sense 0

[12:44] <moritz_> then I won :-)

[12:44] <masak> yes :/

[12:45] * masak sleeps a bit

[12:45] *** masak left
[12:47] <moritz_> wow, the fastest way to iterate a string in perl 5 to reverse it, and then call chop repeatedly: http://www.perlmonks.org/?node_id=873073

[12:52] *** bbkr joined
[12:57] <takadonet> morning all

[13:08] *** risou_ joined
[13:11] *** risou left
[13:16] *** daxim_ joined
[13:16] *** daxim left
[13:18] *** MayDaniel joined
[13:21] *** MayDaniel left
[13:23] *** nymacro joined
[13:24] *** zby left
[13:25] <mdxi> moritz_: that's really interesting

[13:25] <mdxi> the most interesting bit, to me, is that using file IO semantics on memory is so slow

[13:25] <mdxi> this leads me to believe there's a lot about file IO that i don't know

[13:26] <moritz_> mdxi: slow? it's faster than the operation that I'd usually use

[13:26] *** molaf joined
[13:28] <mdxi> it's slower than 4 other ways to do it, though. 6X slower :)

[13:28] <mdxi> (max)

[13:28] <mdxi> no, 3.5X

[13:28] <mdxi> i can't math

[13:28] *** dlynes joined
[13:28] <moritz_> 3 other ways

[13:28] <moritz_> chop and reverseChop are basically the same

[13:29] <moritz_> excep that reverseChop traverses the string backwards

[13:29] <moritz_> *except

[13:30] <dlynes> Has perl become more readable with v6, and possibly more structured?

[13:30] *** dual left
[13:30] <moritz_> yes

[13:30] <dlynes> Ah...so it's not a write-only language, anymore? :)

[13:30] *** bluescreen joined
[13:31] <takadonet> dlynes: not anymore

[13:31] <moritz_> not more than any other high level language you chose to (ab)use

[13:31] *** bluescreen is now known as Guest36396

[13:31] *** plainhao joined
[13:31] <dlynes> Ok, cool...thanks

[13:31] <dlynes> And it's come out as a final release now, too?

[13:31] <tadzik> dlynes: how is Perl 5 write-only for you?

[13:32] <moritz_> dlynes: no. "final" implies "we've stopped working on it"

[13:32] <daxim_> there isn't any final release for any language

[13:32] <moritz_> there's no production release either

[13:32] <dlynes> tadzik, I just find it horribly unreadable with all the $@, $_, #@, $$, $$$, ...

[13:32] <tadzik> IMHO someone that can't write readable Perl 5 code cannot write readble code anyway, in any language

[13:32] *** dual joined
[13:32] <moritz_> just preview releases for those interesting in playing with things

[13:33] <tadzik> dlynes: the dereferencing syntax is gone :)

[13:33] *** kjeldahl left
[13:33] <tadzik> but $_ is still there, and I don't think that's wrong

[13:33] <moritz_> but only 3 special variables left

[13:33] <dlynes> tadzik, so it's more similar to python, now?

[13:33] <tadzik> hell no!

[13:33] <dlynes> bash, then?

[13:33] <tadzik> why?

[13:33] <daxim_> funny, I find C-syntax derivatives nearly unreadable because of the lack of sigils.  is it a variable? a type? a built-in/function?

[13:33] <tadzik> what makes you think so?

[13:33] <moritz_> (well, 4, but one of them is only interesting when you hack on the regex engine, or so)

[13:34] <moritz_> dlynes: Perl 6 still uses sigils (though immutable), and {} for scoping

[13:34] <dlynes> moritz_, perl 5 used {} for scoping too, didn't it?

[13:35] <tadzik> dlynes: https://github.com/tadzik/neutro/blob/master/bin/neutro example code

[13:35] <moritz_> dlynes: that's why I wrote "still" :-)

[13:35] <dlynes> ok...point taken

[13:36] <dlynes> ah...ok....yeah...looks way more readable than perl 5

[13:36] <tadzik> a plenty of things are now more consistent and sane (imho)

[13:37] <dlynes> yeah...still looks like perl, but the code is more readable, and seems to have enforced parameters/prototypes now

[13:37] <dlynes> Not to mention whatever a 'multi' is

[13:38] *** lamstyle left
[13:38] <moritz_> just a sub, of which multiple can have the same name

[13:39] <dlynes> Ah...so subroutine overloading

[13:39] <takadonet> yes

[13:39] <moritz_> right; but it's really not the same thing as in C++

[13:40] <moritz_> in C++ the overloading is resolved by the declared type of the arguments (and at compile time)

[13:40] <daxim_> rakudo: sub crap { say "signatures not enforced?" }; crap;

[13:40] <p6eval> rakudo : OUTPUT«signatures not enforced?␤»

[13:40] <dlynes> That's fine...I'm used to C++, Java, Python, and SOM

[13:40] <moritz_> in Perl 6 they are resolved at run time, by the actual type

[13:40] <moritz_> daxim_: there are default signatures (which rakudo enforces just fine)

[13:41] <moritz_> rakudo: sub crap { say "foo" }; crap(1, 2)

[13:41] <p6eval> rakudo : OUTPUT«Too many positional parameters passed; got 2 but expected 0␤  in 'crap' at line 1:/tmp/fKISciucfG␤  in main program body at line 22:/tmp/fKISciucfG␤»

[13:41] <dlynes> moritz_, I'm guessing the intent is the same as C++ for the overloading...it's just that perl6 functions differently under the hood than C++, and that's why the discrepancy

[13:41] *** lamstyle joined
[13:42] <dlynes> s/discrepancy/difference/

[13:42] <moritz_> it's also the principle of least suprise

[13:42] <takadonet> rakudo: multi run(Str $in){ say "i'm a str";}; multi run(Int $in) { say "i'm a num"}; run(5);run("hello");

[13:42] <p6eval> rakudo : OUTPUT«i'm a num␤i'm a str␤»

[13:43] <moritz_> consider classes A and B, B inherits from A

[13:43] <moritz_> if you have, in C++   A *var = new B;

[13:43] <moritz_> and then call foo(A), it will dispatch to a foo(*A) variant, even if foo(*B) exists

[13:44] <moritz_> in Perl 6 it would be the B variant that gets chosen

[13:44] <moritz_> which is less surprising, IMHO

[13:49] <tadzik> moreover...

[13:50] <tadzik> rakudo: multi foo($a where { $a > 5}) { "Over 5"}; multi foo($a where { $a > 7} ) { "Over 7" }; say foo(9)

[13:50] <p6eval> rakudo : OUTPUT«Ambiguous dispatch to multi 'foo'. Ambiguous candidates had signatures:␤:(Any $a where ({ ... }))␤:(Any $a where ({ ... }))␤␤  in main program body at line 22:/tmp/cBOO_jF2wv␤»

[13:50] <tadzik> oops

[13:50] <moritz_> rakudo: multi f(0) { 1 }; multi f(Int $x) { $x * f($x-1) }; say f 5

[13:50] <p6eval> rakudo : OUTPUT«120␤»

[13:50] <tadzik> rakudo: multi foo($a where { $a > 5}) { "Over 5"}; multi foo($a where { $a < 5 } ) { "Below 5" }; say foo(9)

[13:50] <p6eval> rakudo : OUTPUT«Over 5␤»

[13:50] <tadzik> right

[13:50] <tadzik> so it's not only types

[13:51] * moritz_ wonders what exceptions from type checks do

[13:51] <moritz_> rakudo: sub f($x where { die "OH NOEZ" }) { }; f 3

[13:51] <p6eval> rakudo : OUTPUT«OH NOEZ␤  in <anon> at line 22:/tmp/D2hYR6Jmem␤  in 'Block::ACCEPTS' at line 5975:CORE.setting␤  in 'infix:<~~>' at line 454:CORE.setting␤  in <anon> at line 22:/tmp/D2hYR6Jmem␤  in 'Block::ACCEPTS' at line 5975:CORE.setting␤  in 'f' at line 1:/tmp/D2hYR6Jmem␤  in 'f' at line 1:/tm…

[13:51] <tadzik> rakudo: say "before"; sub f($x where { die "OH NOEZ" }) { }; f 3

[13:51] <p6eval> rakudo : OUTPUT«before␤OH NOEZ␤  in <anon> at line 22:/tmp/6kzhSKuRDm␤  in 'Block::ACCEPTS' at line 5975:CORE.setting␤  in 'infix:<~~>' at line 454:CORE.setting␤  in <anon> at line 22:/tmp/6kzhSKuRDm␤  in 'Block::ACCEPTS' at line 5975:CORE.setting␤  in 'f' at line 1:/tmp/6kzhSKuRDm␤  in 'f' at lin…

[13:52] <tadzik> rakudo: say "before"; sub f($x where { die "OH NOEZ" }) { }; say "before-after";f 3

[13:52] <p6eval> rakudo : OUTPUT«before␤before-after␤OH NOEZ␤  in <anon> at line 22:/tmp/tS9NSpeYMv␤  in 'Block::ACCEPTS' at line 5975:CORE.setting␤  in 'infix:<~~>' at line 454:CORE.setting␤  in <anon> at line 22:/tmp/tS9NSpeYMv␤  in 'Block::ACCEPTS' at line 5975:CORE.setting␤  in 'f' at line 1:/tmp/tS9NSpeYMv␤  …

[13:52] <tadzik> makes sense

[13:52] <moritz_> rakudo: multi f($x where { die "OH NOEZ" }) { }; f 3

[13:52] <p6eval> rakudo : OUTPUT«OH NOEZ␤  in <anon> at line 22:/tmp/hjZezZGShj␤  in 'Block::ACCEPTS' at line 5975:CORE.setting␤  in 'infix:<~~>' at line 454:CORE.setting␤  in <anon> at line 22:/tmp/hjZezZGShj␤  in 'Block::ACCEPTS' at line 5975:CORE.setting␤  in 'f' at line 1:/tmp/hjZezZGShj␤  in 'f' at line 1:/tm…

[13:54] *** nymacro left
[13:56] *** nymacro joined
[13:57] *** kaare_ left
[13:57] *** Woodi left
[13:58] <takadonet> dlynes: any other questions?

[13:58] *** Woodi joined
[14:00] <dlynes> No, that was it....thanks

[14:00] <dlynes> Was just curious if perl6 was not in beta anymore, and if it was more readable than perl 5

[14:01] <takadonet> Well not in beta but not production either

[14:01] <dlynes> well...actually....does perl6 have something like cpan as well?

[14:01] <takadonet> we are slowly porting modules over

[14:01] <takadonet> http://modules.perl6.org/

[14:01] <takadonet> Not a full fledge cpan since we are not sure what we are going to do

[14:01] <dlynes> ah...so perl6 is currently prerelease, status, then, or public wide beta?

[14:01] <takadonet> Might make a cpan6 or attach ourselves to the current one

[14:01] <takadonet> public wide beta

[14:02] <takadonet> anyone can download it and hack away

[14:02] <dlynes> ok, thanks

[14:03] <tadzik> well, perl6 is a language actually. The 'public beta' thing, is the implementation

[14:03] <daxim_> dlynes, talk to your colleagues/user group about what you learned today

[14:06] <dlynes> daxim_, yeah...i've got a friend that's been waiting for perl6 to come out...he ended up learning python just so he wouldn't have to learn perl5, because perl6 wasn't available at that time

[14:07] <tadzik> I'd go for Ruby in such situation

[14:07] <tadzik> but still, I ended up learning Perl 6 even though it's not "out" :)

[14:08] <dlynes> yeah...he's not interested in ruby...it reminds him of java too much :)

[14:10] <tadzik> well, I'm not interested in python... it reminds me of python too much :)

[14:10] <dlynes> Yeah..for me, I don't have a choice

[14:10] <dlynes> Python's the best platform for OPC

[14:11] <dlynes> So python's my only language for automation control

[14:11] *** ambs left
[14:12] <dlynes> However, for system admin/monitoring scripts, I use a combination of perl 5, bash script, awk, sed, python, cut

[14:13] <tadzik> you mean using `` in Perl all the time?

[14:13] <tadzik> Watch out, or you'll end up as a PostgreSQL dev :>

[14:14] <moritz_> tadzik: in sysadmin scripts I do that too

[14:14] <tadzik> well... but sed?

[14:14] <tadzik> for sed -i probably

[14:15] <tadzik> but right, sysadmin scripts follow their own rules

[14:15] <tadzik> TIMTWITIWWC -- There is more than one way to "it works who cares" :)

[14:16] *** nadim left
[14:17] <dlynes> tadzik, piping stuff through sed -e, or cut -d':' -f25, ...

[14:17] *** nadim joined
[14:18] * moritz_ is always annoyed that cut only accepts single characters as delimiters

[14:18] <moritz_> seriously, how hard can it be to allow splitting on arbitrary strings?

[14:19] <PerlJam> different implementation priorities perhaps

[14:19] <tadzik> dlynes: now piping stuff through sed -e in Perl is something I don't understand at all :)

[14:19] <tadzik> moritz_: they probably use strtok() :)

[14:20] <moritz_> PerlJam: that's exactly it. Implementation difficulty as priority, not user experience

[14:20] *** nadim left
[14:20] <PerlJam> tadzik: if you already have the shell script that uses sed that you're converting to Perl, then, as an interim step, it may be easier to just leave the sed part alone.

[14:20] <tadzik> probably

[14:21] <PerlJam> tadzik: and maybe, once you've taken that step, it's not worth it to go "whole hog" in converting it to Perl

[14:21] <moritz_> tadzik: strtok works with string delimiters, not single chars

[14:22] <PerlJam> moritz_: What's amazing (to me) is that cut hasn't been improved in the manner that you describe over the years.  I understand the first couple of versions only using single char delimiters because they were written decades ago and developed a little momentum to stay that way.  But after a few years, surely *someone* would have the same thought as you about improving it

[14:23] <PerlJam> moritz_: but perhaps, by that time, there were other tools that competed in that niche (awk, perl, etc.) and it wasn't really important to update cut

[14:23] <moritz_> PerlJam: right

[14:23] <dlynes> tadzik, i don't use sed with perl...I use it in bash scripts

[14:23] <moritz_> I'd be surprised if 'cut' were younger than 20 years

[14:24] <PerlJam> moritz_: I've been using unix for > 20 years and cut was an old tool when I first started  (or so it seemed to me)

[14:26] <tadzik> ah, I see

[14:26] <tadzik> moritz_: oh. Then I don't get it at all

[14:26] <tadzik> dlynes: I see

[14:29] *** Guest36396 left
[14:29] *** Guest36396 joined
[14:31] *** icwiener joined
[14:32] <colomon> jnthn: ping?

[14:33] *** Guest36396 left
[14:33] *** Guest36396 joined
[14:36] *** lamstyle left
[14:36] *** lamstyle joined
[14:39] *** MindosCheng joined
[14:40] *** Guest36396 left
[14:40] *** Guest36396 joined
[14:42] *** alester left
[14:42] *** Guest36396 left
[14:42] *** Guest36396 joined
[14:43] * MindosCheng is watching http://www.nuug.no/aktiviteter/20100914-little-tools-large-apps/

[14:44] *** Guest36396 left
[14:44] <takadonet> MindosCheng: it's a good presentation

[14:44] <moritz_> indeed, I liked it very much

[14:45] <jnthn> Wish I'd been there to see that one...

[14:45] <jnthn> colomon: pong (but I'm a bit distracted by $dayjob...)

[14:45] <colomon> current nqp-rx error is 

[14:45] <colomon> Null PMC access in push_string()

[14:45] <colomon> current instr.: 'parrot;NQP;Compiler;' pc 100444 (gen/nqp-grammar.pir:0)

[14:45] <colomon> called from Sub 'parrot;NQP;Compiler;main' pc 100450 (gen/nqp-grammar.pir:0)

[14:46] <colomon> seems to me this is probably happening in the sequence 

[14:46] <colomon>     $P0 = getattribute nqpproto, '@!cmdoptions'

[14:46] <colomon>     push $P0, 'parsetrace'

[14:46] <colomon> (in NPQ::Compiler sub '') but I don't have the foggiest clue why.

[14:47] <moritz_> has @!cmdoptions ever been initialized?

[14:48] <moritz_> if not, it's Null, and you get a NPMCA

[14:48] <jnthn> I'm guessing not...question is where it got initialized before...

[14:48] <jnthn> wait...getattribute on a proto object?

[14:49] <jnthn> That's either bad naming or wrong.

[14:52] <jnthn> colomon: Oh, one important difference is that attribute accesses need to be fully qualified with a class name in 6model too

[14:53] <jnthn> So getattribute obj, '@!foo' is probably not going to work.

[14:53] <jnthn> Would need to be

[14:53] <colomon> nqpproto = p6meta.'new_class'('NQP::Compiler', 'parent'=>'HLL::Compiler')

[14:53] <jnthn> getattribute obj, type_object_for_class_where_attr_is_declared, '@!foo'

[14:53] <jnthn> huh, it's trying to set an attribute on a proto-object then?!

[14:54] *** icwiener left
[14:54] <jnthn> That's...not good. I wonder how we've been getting away with that.

[14:54] <colomon> is how nqpproto is created.  previously the call was getattribute nqpproto, '@cmdoptions', and @cmdoptions was a Parrot attribute.

[14:54] <colomon> I may have completely misunderstood things.  I only like 33% understand this code.

[14:55] * colomon is suspicious that asking him to work on this was an attempt to increase the bus number on some funky code.  ;)

[14:55] <jnthn> I didn't quite intend it to be as tricky as it's starting to turn out... :)

[14:56] <colomon> Mind you, I'm enjoying puzzling over it.

[14:57] <jnthn> :)

[14:57] *** _kaare joined
[14:58] <colomon> Are you actually looking at the code in question?  src/NQP/Compiler.pir?

[14:59] *** agentzh left
[14:59] <colomon> I've changed @cmdoptions to @!cmdoptions (because it's now a NQP object instead of inheriting from the Parrot HLL::Compiler) but other than that it's the same, I believe.

[15:01] *** JSAdam joined
[15:09] *** nymacro left
[15:15] *** redicaps left
[15:16] *** bluescreen joined
[15:16] *** bluescreen is now known as Guest22809

[15:19] *** rgrau__ joined
[15:19] *** wtw left
[15:19] *** PerlPilot joined
[15:20] *** breinbaa1 joined
[15:20] *** sunnavy_ joined
[15:20] *** MayDaniel joined
[15:21] *** rblackwe_ joined
[15:21] *** Psyche^ joined
[15:21] *** Psyche^ is now known as Patterner

[15:22] <jnthn> colomon: Yeah, and it's certainly wrong. It really does appear to be trying to set attributes in the proto object. :/

[15:22] *** ashleyde1 joined
[15:22] <jnthn> colomon: oh, but it's also using P6object there rather than 6model too...

[15:23] <colomon> is it possible they are somehow (not sure the proper p6 terms) class-wide attributes rather than per-object attributes?

[15:24] *** PerlJam left
[15:24] *** sunnavy left
[15:24] *** breinbaas left
[15:24] *** flatwhatson left
[15:24] *** ashleydev left
[15:24] *** rgrau_ left
[15:24] *** rblackwe left
[15:25] *** flatwhatson joined
[15:27] <jnthn> colomon: There's no such thing in Perl 6...

[15:27] <jnthn> colomon: I think that's what was being done

[15:27] <jnthn> colomon: But it was not really supported under P6object

[15:27] <jnthn> So I think it accidentally worked rather than was correct.

[15:28] <jnthn> 6model probably explicitly bans it 'cus it's just not meant to be possible.

[15:28] <jnthn> (and probably breaks definedness checking)

[15:31] *** ashleyde1 left
[15:31] *** frew left
[15:32] *** sunnavy_ left
[15:36] <colomon> So a patch here would require a bit of a rewrite, yes?

[15:37] * colomon decides to commit what he has and try to figure out how to push his branch to github, just to have a backup.

[15:37] <PerlPilot> colomon++  good idea

[15:38] *** PerlPilot left
[15:38] *** PerlJam joined
[15:38] *** Guest22809 left
[15:39] <PerlJam> colomon: btw,  git push origin branch-name  # assuming your github remote repo is called "origin"

[15:40] <colomon> PerlJam++ colomon-- # first attempt I literally typed in "branch-name" rather than using the actual branch name.

[15:40] <dalek> nqp-rx/nomnom: 60d7e50 | (Solomon Foster)++ | src/HLL/Compiler.pm:

[15:40] <dalek> nqp-rx/nomnom: Break HLL::Compiler away from PCT::HLLCompiler.

[15:40] <dalek> nqp-rx/nomnom: review: https://github.com/perl6/nqp-rx/commit/60d7e50439

[15:40] <dalek> nqp-rx/nomnom: e18ba58 | (Solomon Foster)++ | src/NQP/Compiler.pir:

[15:40] <dalek> nqp-rx/nomnom: Try to fix code to use the new @!cmdoptions, but apparently the original code was broken and so the fix does nothing useful.

[15:40] <dalek> nqp-rx/nomnom: review: https://github.com/perl6/nqp-rx/commit/e18ba581c2

[15:40] *** sftp joined
[15:40] <PerlJam> heh

[15:40] <colomon> oh, cool!

[15:43] <moritz_> colomon++ # nice branch name

[15:43] <colomon> ;)

[15:45] *** Guest22809 joined
[15:49] *** Guest22809 left
[15:52] *** Guest22809 joined
[15:54] <MindosCheng> I guess some operation in Perl6 can be very fast by special design, like "==>" and "|"

[15:55] *** Guest22809 left
[15:55] <PerlJam> "special design"?

[15:55] <MindosCheng> PerlJam: like using special hardware, like CUDA.

[15:58] *** Guest22809 joined
[15:58] <MindosCheng> PerlJam: And for pipeline, by sharing buffers, it works on some encoding/decoding system already.

[16:00] *** Guest22809 left
[16:02] *** JSAdam left
[16:05] *** sunnavy joined
[16:05] *** sunnavy_ joined
[16:07] *** Guest22809 joined
[16:08] *** justatheory joined
[16:08] *** alester joined
[16:10] *** cjk101010 left
[16:12] *** Guest22809 left
[16:15] *** tzhs left
[16:28] *** MayDaniel left
[16:30] *** timbunce left
[16:34] *** ab5tract joined
[16:37] *** frew joined
[16:38] *** icwiener joined
[16:38] *** timbunce joined
[16:50] *** breinbaa1 left
[16:51] *** breinbaas joined
[16:52] *** ch3ck joined
[16:53] *** plobsing left
[16:54] *** icwiener left
[16:55] *** icwiener joined
[16:55] *** mila_ left
[16:56] * sjn checked out latest rakudo from git

[16:56] <sjn> <- getting lots of failing tests

[16:57] <colomon> platform?

[16:57] <sjn> ubuntu 10.04

[16:57] <sjn> "Parse errors: No plan found in TAP output"

[16:58] <colomon> what happens if you just execute perl6 by itself?

[16:59] <sjn> right

[16:59] <sjn> PackFile_unpack: This Parrot cannot read bytecode files with version 9.1.

[16:59] <sjn> what files should I delete?

[16:59] <moritz_> sjn: rm -rf parrot_install/

[16:59] <sjn> (and why doesn't "make clean" take out those files? :-P)

[16:59] <moritz_> sjn: because they are installed files

[17:00] <colomon> sjn: when was the last time you built rakudo?

[17:00] <sjn> colomon: a while back, before I pulled latest last night

[17:01] <sjn> maybe a month

[17:01] <moritz_> what I don't understand is why a new install doesn't override it with new files

[17:01] * colomon is wondering if sjn still has svn parrot

[17:01] <sjn> no, the build script catched that one

[17:01] <sjn> (and yes, I had it

[17:01] <sjn> )

[17:01] *** envi left
[17:01] <sjn> and then removed the parrot dir, and ran Configure.pl --gen-parrot

[17:02] <colomon> ah

[17:02] <sjn> just got a bit surprised that running with --gen-parrot didn't replace the previous install

[17:05] <moritz_> it does, unless the parrot version changes

[17:06] <sjn> sounds like a bug :)

[17:07] *** hercynium joined
[17:08] *** risou_ left
[17:08] *** risou joined
[17:09] *** mila_ joined
[17:12] *** kjeldahl joined
[17:13] *** uniejo joined
[17:17] *** mkramer1 joined
[17:17] *** lichtkind joined
[17:19] *** mkramer left
[17:20] *** mkramer joined
[17:23] *** mkramer1 left
[17:24] *** cdarroch joined
[17:24] *** cdarroch left
[17:24] *** cdarroch joined
[17:30] *** meppl left
[17:30] *** alester left
[17:39] *** huf left
[17:41] *** daxim_ left
[17:42] *** molaf left
[17:44] *** huf joined
[17:44] <frettled> It's somewhat counter-intuitive, yes.

[17:46] *** uniejo left
[17:47] *** MindosCheng left
[17:53] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_variable_tablet

[18:00] *** dakkar left
[18:02] *** impious joined
[18:02] *** impious left
[18:06] *** lambdabot joined
[18:09] *** ashleydev joined
[18:09] *** risou left
[18:09] *** dsp_ joined
[18:09] *** risou joined
[18:15] *** jaldhar left
[18:25] *** icwiener_ joined
[18:28] *** icwiener left
[18:30] *** pyrimidine joined
[18:49] *** mberends joined
[18:52] * colomon just came to his senses and realized asking Rakudo to parse a 250meg file was probably not a good idea.

[18:52] <colomon> btw, #phasers in 8min?

[18:53] <jnthn> 7 mins now ;)

[18:53] <mberends> hi colomon, jnthn, yes :-)

[18:53] *** rhr left
[18:54] <jnthn> mberends! \o/

[18:55] *** rhr joined
[18:56] *** wamba joined
[18:57] *** icwiener joined
[18:58] *** icwiener_ left
[19:00] *** pmichaud_ joined
[19:01] <pmichaud_> ENOFEATHER?

[19:01] <pmichaud> oh, there it is.

[19:01] *** pmichaud_ left
[19:02] *** Trashlord joined
[19:10] *** risou_ joined
[19:12] *** risou left
[19:12] *** pyrimidine_ joined
[19:13] <sorear> 57m 21s  87.01%

[19:15] *** pyrimidine left
[19:15] *** pyrimidine_ is now known as pyrimidine

[19:20] *** _twitch joined
[19:24] *** timbunce left
[19:27] <sorear> 100 failures; 53x Check failed, 26x Parse failed, 18x Autoloading of STD::P5 NYI

[19:28] <sorear> 3x Str.Numeric NYI

[19:29] *** proller_ joined
[19:31] *** timbunce joined
[19:31] *** tylercurtis joined
[19:34] <TimToady> I consider TrigTestSupport.pm to be malformed Perl 6, btw

[19:35] <TimToady> but fixing it such that rakudo is happy with it is not yet possible, last I checked

[19:35] <TimToady> (several months ago)

[19:36] <TimToady> so I've just left them as STD failures for now

[19:37] *** risou_ left
[19:40] <colomon> TimToady: what, again, are your issues?

[19:41] <dalek> star: 41aa60f | pmichaud++ | skel/docs/announce/2010.11:

[19:41] <dalek> star: Add 2010.11 release announcement draft.

[19:41] <dalek> star: review: https://github.com/rakudo/star/commit/41aa60f725

[19:41] <TimToady> iirc, relying on package export semantics rather than lexical

[19:41] *** MayDaniel joined
[19:42] * jnthn thought Rakudo did import into the lexical scope...

[19:42] <colomon> TimToady: I think I could probably fix that now, though it might mean splitting it up into several different modules.

[19:43] <TimToady> that might work

[19:43] * colomon has gotten more useful experience in this area messing around with the ABC module.

[19:43] <TimToady> it would be useful to be able to export subclasses though too

[19:44] <colomon> sure, does anyone know the official status of exporting subclasses?

[19:44] *** mssm joined
[19:45] <TimToady> oh, probably "PhD dissertation fodder", like most of the rest of it... :)

[19:46] *** _twitch left
[19:46] *** wamba left
[19:46] *** wamba joined
[19:47] *** wamba left
[19:47] *** wamba joined
[19:49] <sorear> "Exporting subclasses"?

[19:49] <jnthn> TimToady: I don't see the issue with TrigTestSupport.

[19:50] <sorear> The problem with TrigTestSupport is that the classes aren't exported

[19:50] <jnthn> TimToady: AngleAndResult gets installed into GLOBAL:: no?

[19:50] <lue> An old laptop that gets hot easily is very nice after shoveling snow :)

[19:50] <sorear> Yes, but you can only access it as GLOBAL::AngleAndResult

[19:50] <diakopter> hah

[19:50] <sorear> There's no lexical alias

[19:51] <jnthn> :/

[19:51] * jnthn had it as "we statically know this name isn't lexical so go find it as a package"

[19:52] <lue> happy 47th anniversary of Doctor Who \o/  [o and hai o/]

[19:52] <sorear> as the kind of person who swears by use strict, I am very, very, very, very strongly opposed to that interpretation

[19:52] <jnthn> er

[19:53] <jnthn> I use strict too and I don't have a problem with this.

[19:54] <pmichaud> there really isn't a "go find it as a package" any longer

[19:54] <pmichaud> it's all lexical, iiuc

[19:54] <jnthn> *everything* is lexical lookups?

[19:54] <pmichaud> we massively cheat on that in rakudo

[19:54] <jnthn> So how does

[19:54] <jnthn> my class Foo { }

[19:54] *** oha joined
[19:54] <jnthn> class Foo { }

[19:54] <jnthn> Really differ?

[19:54] <pmichaud> is the latter really "our class Foo"?

[19:54] <jnthn> Yes

[19:55] <pmichaud> it differs by putting a symbol for "Foo" into the package namespace

[19:55] <jnthn> Which you can only really get at by qualifying it with GLOBAL:: ?

[19:55] <pmichaud> (as well as one in the lexical namespace)

[19:55] <sorear> the former is accessible as MY::Foo and Foo; the latter is *also* accessible as OUR::Foo and GLOBAL::Foo

[19:55] <pmichaud> just like other 'our' variables

[19:55] <sorear> the interesting issue is class A { class B { } }

[19:55] <Tene> lue: dr who starting up again in about a month

[19:55] <sorear> B MUST be our

[19:55] <pmichaud> when I have   "our $x"   we get entries for $x in both the package and in the lexpad

[19:56] <sorear> because if it's my, then the A::B symbol won't be installed

[19:56] <jnthn> OK

[19:56] <jnthn> Makes me happy

[19:56] <jnthn> I don't ahve to bother optimizing package access much now ;)

[19:56] <pmichaud> but yes, nearly all symbol lookups are lexical

[19:56] <lue> Tene: next season is supposed to be split in two halves, one half in spring the other in the fall. \o/

[19:57] <pmichaud> even when there's a :: involved, the root part is a lexical lookup :-)

[19:57] <PerlJam> sorear: so what's the relationship between  class A::B { }  and  class A { class B { ... } }

[19:57] <PerlJam> "

[19:57] <PerlJam> ?

[19:57] <jnthn> pmichaud: nqp on .Net leans a LOT more in the lexical direction

[19:57] <pmichaud> jnthn: good, because it needs to

[19:57] <jnthn> pmichaud: The setting has lexicals in it only

[19:57] <pmichaud> there really only are "lexicals" in perl 6

[19:57] <jnthn> pmichaud: It can't have package scopes because, er, NQPStash is defined in there. :)

[19:58] <pmichaud> packages are just alternate namespaces... but they're looked up lexically

[19:58] <jnthn> pmichaud: OK. Feel free to review the way I have it and suggest changes

[19:58] <jnthn> pmichaud: I suspect what I do in the .Net NQP can be our pattern for nqp-rx

[19:58] <pmichaud> i.e., if I have   A::B::C,  we start with a lexical lookup of A

[19:58] <jnthn> That's...awkward.

[19:59] <jnthn> How do we differentiate between the stash and the type object in this case?

[19:59] <pmichaud> type objects have to support a package API

[19:59] <pmichaud> or the ::'s extract the stash from the type object

[19:59] <pmichaud> (like an operator)

[19:59] <jnthn> OK, so :: calls .WHO really

[19:59] <pmichaud> yeah, that's a good way of thinking about it

[20:00] <jnthn> I like my macros :)

[20:01] <jnthn> Though I realized when I made .HOW and .WHAT be those in nqp-rx that...P6object is now rather impossible to work with. D'oh.

[20:01] <jnthn> May need to fathmom some fallback or something

[20:01] <sorear> PerlJam: I have no idea what class A::B is supposed to do

[20:01] <jnthn> Otherwise the whole of PAST needs porting to the new meta-model to make any progress...

[20:02] *** icwiener_ joined
[20:02] <sorear> jnthn: I wound up using fat references in Niecza, i.e. A uses two slots A and A::

[20:02] <sorear> and A::B means A::<B>

[20:02] <pmichaud> porting whole may end up being not that difficult

[20:02] <sorear> because, mostly, of stub packages

[20:02] <pmichaud> A:: slot is interesting

[20:02] <sorear> the existance of A::B doesn't imply anything about A

[20:02] <jnthn> pmichaud: The other issue is that I'm not sure Parrot's multi dispatcher will know what to do with the new objects...

[20:02] <pmichaud> that's a very useful start

[20:02] <lichtkind> TimToady: are $() and item() interchangeable

[20:03] <pmichaud> lichtkind: .item, probably

[20:03] <pmichaud> @() ends up being .list,  so I'd expect $() to be .item

[20:03] <lambdabot> Maybe you meant: . ? @ bf do ft id pl rc v wn

[20:03] <jnthn> OH NO lambdabot!

[20:03] <pmichaud> .oO( who let lambdabot back in here?!?)

[20:03] <jnthn> @part

[20:03] <lambdabot> Not enough privileges

[20:04] <pmichaud> I'm certain that whatever lambdabot said is not what I meant.  :-)

[20:04] <jnthn> screw you!

[20:04] <sorear> @part

[20:04] <lambdabot> Plugin `system' failed with: Prelude.last: empty list

[20:04] <sorear> @part #perl6

[20:04] <lue> who is lambdabot? Should I get some popcorn for an epic backstory?

[20:04] *** lambdabot left
[20:04] <jnthn> lol

[20:04] <pmichaud> hmmm... compiling core.pm seems *much* slower than a month ago :-(

[20:05] <oha> i would expect that class A { class B { } } declares 2 classes, while class A::B { } declares only one.

[20:05] <sorear> oha: class A::B { } is closer to package A { class B { } }

[20:05] *** icwiener left
[20:06] <pmichaud> class A::B { }   declares a class B within package A (as obtained by lexical lookup of A).  If there is no A, then it's created within the current scope.

[20:06] <Tene> lue: a bot that we have trouble keeping out without banning it, and who speaks when not spoken to.

[20:06] <sorear> the fun issues are ones like "what if A already exists, but is imported"

[20:06] <pmichaud> then we use that A

[20:06] <sorear> lambdabot only speaks when spoken to.

[20:06] <pmichaud> iiuc

[20:06] <sorear> @ is her true name

[20:07] <sorear> conveniently, Haskell never uses @ at the start of an expression

[20:08] <sorear> pmichaud: without MONKEY_TYPING?

[20:08] * jnthn tries to work out where MONKEY_TYPING comes into this...

[20:08] <pmichaud> sorear: good question... but I think so.   Otherwise I don't know how things like     use Foo;  use Foo::Bar;  are to work

[20:09] <jnthn> I thought that only affected augment/supercede?

[20:10] <pmichaud> well, one could think of a class declaration as "augmenting" a package.  But I don't think it's really an augment in that way.

[20:10] <sorear> jnthn: class Foo::Bar means augment package Foo { class Bar }

[20:10] <TimToady> sorear: packages are not immutable

[20:11] <jnthn> sorear: I don't see it that way.

[20:12] <pmichaud> class Foo::Bar  means something like   Foo::<Bar> := class { ... }

[20:12] <TimToady> and in any case, we'd want to make this an exception

[20:12] <pmichaud> declaring Foo::  if need be

[20:12] <jnthn> I figure MONKEY_TYPING mostly just means "you can't use augment and supercede"

[20:13] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_lookup_tablet

[20:14] <TimToady> the package naming path is an "easement", in legal terms  :)

[20:14] <jnthn> :)

[20:15] <PerlJam> So ... what's the essential difference between packages and modules?  modules export and packages don't?

[20:16] <TimToady> correct

[20:17] <TimToady> and a class is just a module that also knows how to .^add_method and such

[20:17] <sorear> adding "is export" to the classes and sticking "module TrigTestSupport;" on top makes the trig tests parse

[20:17] <TimToady> in which?

[20:18] <TimToady> in niecza?

[20:18] <TimToady> as I recall, that used to break rakudo

[20:22] <sorear> in STD

[20:23] *** icwiener_ left
[20:23] * sorear goes and tries to get niecza's setting to parse

[20:24] <pmichaud> afk, travelling

[20:30] <takadonet> how do you export variables from a module? Is it the same syntax as a sub? i.e sub dosomething() is export { .. } ?

[20:30] <TimToady> std: my $x is export = 42;

[20:30] <p6eval> std a194beb: OUTPUT«ok 00:01 121m␤»

[20:31] <takadonet> rakudo: my $x is export = 42;

[20:31] <p6eval> rakudo : OUTPUT«No applicable candidates found to dispatch to for 'trait_mod:<is>'. Available candidates are:␤:(Mu $child, Role $r)␤:(Routine $r, Any :default($default)!)␤:(Code $block, Any $arg?, Any :export($export)!)␤:(Mu $child, Mu $parent)␤:(Mu $type where ({ ... }), Any :rw($rw)!)␤:(Mu $type…

[20:31] <TimToady> NYI, but you'll notice it parses

[20:32] <TimToady> rakudo: module Foo { my $x is export = 42; }

[20:32] <p6eval> rakudo : OUTPUT«No applicable candidates found to dispatch to for 'trait_mod:<is>'. Available candidates are:␤:(Mu $child, Role $r)␤:(Routine $r, Any :default($default)!)␤:(Code $block, Any $arg?, Any :export($export)!)␤:(Mu $child, Mu $parent)␤:(Mu $type where ({ ... }), Any :rw($rw)!)␤:(Mu $type…

[20:32] <TimToady> I guess that doesn't help.

[20:33] <takadonet> just have to do the full path

[20:33] <jnthn> Just umimplemented trait handler, looks like.

[20:33] <TimToady> takadonet: there isn't a full path, if it's a "my"

[20:34] <TimToady> jnthn: so potentially a LHF?

[20:35] <jnthn> TimToady: In theory. :)

[20:35] <jnthn> I mean, the code is there for routines, and this should be easier since it doesn't have to worry about merging multis being explorted.

[20:35] <jnthn> er, exported :)

[20:36] <jnthn> .oO( explorted would be such a cool word if it existed...)

[20:36] <TimToady> sounds like something from Calvin and Hobbes

[20:36] <takadonet> TimToady: i will using 'our'

[20:36] <moritz_> (Calvin and Hobbes)++

[20:36] <takadonet> rakudo: module Foo { our $x =42; } say $Foo::x;

[20:36] <p6eval> rakudo : OUTPUT«===SORRY!===␤Confused at line 22, near "module Foo"␤»

[20:36] <takadonet> ..

[20:37] <moritz_> takadonet: ; after  }

[20:37] <takadonet> rakudo: module Foo { our $x =42; }; say $Foo::x;

[20:37] <PerlJam> you're missing a ;

[20:37] <p6eval> rakudo : OUTPUT«42␤»

[20:37] <takadonet> moritz_: always forget it

[20:37] <PerlJam> (though that error isn't the nicest)

[20:37] <takadonet> anyway that what I have being doing so far so will continue for the other modules

[20:38] <TimToady> std: module Foo { our $x =42; } say $Foo::x;

[20:38] <p6eval> std a194beb: OUTPUT«[31m===[0mSORRY![31m===[0m␤Strange text after block (missing comma, semicolon, comment marker?) at /tmp/kZxeS9H2Cq line 1:␤------> [32mmodule Foo { our $x =42; }[33m⏏[31m say $Foo::x;[0m␤    expecting any of:␤   bracketed infix␤        infix or meta-infix␤    statement

[20:38] <p6eval> ..modifier loop␤Pa…

[20:41] * jnthn wonders if that error isn't LHF to add to Rakudo too

[20:41] <PerlJam> jnthn: I was wondering exactly the same thing

[20:42] <oha> LHF?

[20:42] <moritz_> low-hanging fruit

[20:42] <arnsholt> Low Hanging Fruit. Easy targets to fix

[20:42] <oha> nice, ty

[20:43] <arnsholt> Often used as the gateway drug to catch new contributors =)

[20:44] *** kjeldahl left
[20:44] <TimToady> after which you will have knowledge of Good and Evil...

[20:44] <jnthn> Improving Rakudo: good. Breaking Rakudo: Evil.

[20:45] <oha> jnthn, ... and why you capitalized Evil? :)

[20:46] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_tablets

[20:46] <TimToady> that's not it; he forgot to capitalize Good

[20:46] <sorear> std: sub ($) { }

[20:46] <p6eval> std a194beb: OUTPUT«ok 00:01 120m␤»

[20:47] *** tylercurtis left
[20:47] <sorear> std: sub ($*) {}

[20:47] <p6eval> std a194beb: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unable to parse signature at /tmp/HsMtWbhBEf line 1:␤------> [32msub [33m⏏[31m($*) {}[0m␤Couldn't find final ')'; gave up at /tmp/HsMtWbhBEf line 1:␤------> [32msub ($[33m⏏[31m*) {}[0m␤    expecting any of:␤      constraint␤     param_sep␤ 

[20:47] <p6eval> ..    parameter␤      t…

[20:48] *** florz left
[20:48] <lue> afk

[20:49] *** florz joined
[20:50] <TimToady> std: sub (*$) { }

[20:50] <p6eval> std a194beb: OUTPUT«ok 00:01 120m␤»

[20:51] *** timbunce left
[20:51] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_cookbook_tablet

[20:52] *** takadonet left
[20:56] *** __david__ joined
[20:56] *** mssm left
[21:00] *** florz left
[21:01] *** MayDaniel left
[21:03] <lichtkind> TimToady: would you please approve http://www.perlfoundation.org/perl6/index.cgi?perl_6_lookup_tablet#contextualizers

[21:05] *** florz joined
[21:07] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_cookbook_tablet

[21:08] *** plainhao left
[21:11] <cosimo> what do I use to throw an exception? tried skimming through S04, but didn't get it

[21:11] <cosimo> die maybe?

[21:12] <moritz_> die

[21:13] <PerlJam> cosimo: you could have jumped right to the section on exception and read it rather than skimming  :)

[21:14] *** ab5tract left
[21:15] <arnsholt> Hmm. I think Rakduo is supposed to panic with "Malformed package declaration" on the "module {} $code" example, but for some reason it doesn't

[21:16] <jnthn> std: module {} $code

[21:16] <cosimo> PerlJam: I read it... :-|

[21:16] <p6eval> std a194beb: OUTPUT«[31m===[0mSORRY![31m===[0m␤Strange text after block (missing comma, semicolon, comment marker?) at /tmp/tL15rSVLP4 line 1:␤------> [32mmodule {}[33m⏏[31m $code[0m␤    expecting any of:␤   bracketed infix␤        infix or meta-infix␤    statement modifier loop␤Parse

[21:16] <p6eval> ..failed␤FAILED 00:01 …

[21:16] *** espadrine` joined
[21:16] <jnthn> rakudo: module {} $code

[21:16] <p6eval> rakudo : OUTPUT«===SORRY!===␤Confused at line 22, near "module {} "␤»

[21:17] <arnsholt> (Lines 865, 866 of Perl6/Grammar.pm, if you wondered)

[21:18] *** espadrine` left
[21:18] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_variable_tablet

[21:19] <jnthn> arnsholt: I think that it parses a package just fine, then expects not to find a term next, and only then hits the problem

[21:19] *** fhelmberger left
[21:19] <arnsholt> Yah

[21:19] <PerlJam> arnsholt: It's probably somewhere down in the parsing of blockoid where it recognizes that there's a problem.

[21:20] <arnsholt> My suspect is ENDSTMT

[21:20] <arnsholt> The full match of that is quantified with ?, so it will always match

[21:21] *** pyrimidine left
[21:21] * arnsholt tries something

[21:21] *** pyrimidine joined
[21:22] <arnsholt> Yeah. Not that

[21:23] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_regex_tablet

[21:23] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_subroutine_tablet

[21:23] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_io_tablet

[21:23] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_block_tablet

[21:23] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_operator_tablet

[21:23] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_tablets

[21:23] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_language_design_tablet

[21:23] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_history_tablet

[21:23] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_intro_tablet

[21:23] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_variable_tablet

[21:24] <dalek> mu: abe2be5 | (Cosimo Streppone)++ | docs/feather/syn_index.html:

[21:24] <dalek> mu: Clarify where the mu repository is for noobs like me

[21:24] <dalek> mu: review: https://github.com/perl6/mu/commit/abe2be51cb

[21:25] <lichtkind> sorry for spam i had to change the index

[21:25] <tadzik> lichtkind++ # leaking karma

[21:26] <lichtkind> tadzik: what you mean by that?

[21:26] <tadzik> lichtkind: you aren't getting your karma :)

[21:27] <tadzik> karma lichtkind 

[21:27] <aloha> lichtkind has karma of 4.

[21:27] <tadzik> karma Herbert Breunung

[21:27] <aloha> Herbert Breunung has karma of 55.

[21:27] <tadzik> see? :)

[21:27] <lichtkind> so all my karmo goes to my alter ego

[21:27] <lichtkind> that i call ego boosting

[21:28] <lichtkind> karma moritz_ 

[21:28] <aloha> moritz_ has karma of 85.

[21:28] <PerlJam> Doesn't dalek have some sort of aliasing ability?

[21:28] <lichtkind> karma moritz

[21:28] <aloha> moritz has karma of 167.

[21:29] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[21:29] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_lookup_tablet

[21:29] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_oop_tablet

[21:29] <moritz_> karma (Herbert Breunung)

[21:29] <aloha> (Herbert Breunung) has karma of 0.

[21:30] <moritz_> karma Herbert Breunung

[21:30] <aloha> Herbert Breunung has karma of 58.

[21:30] <moritz_> aloha: karma phenny: tell aloha karma phenny

[21:30] <aloha> moritz_: phenny: tell aloha karma phenny has karma of 0.

[21:31] <oha> moritz_, very close :)

[21:31] <cosimo> karma kameleon

[21:31] <aloha> kameleon has karma of 0.

[21:32] <cosimo> after this one, I can say goodnight :)

[21:32] * moritz_ wonders when he'll reach bot recursion

[21:32] <moritz_> good night cosimo 

[21:32] * oha waves cosimo

[21:33] <tadzik> ~~

[21:33] <tadzik> sleepytime for me too

[21:33] <lichtkind> tadzik: good night

[21:34] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_delta_tablet

[21:34] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_links_tablet

[21:34] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_cookbook_tablet

[21:34] <cosimo> perl6 is messing up my programming life

[21:35] <cosimo> I used to be happy and my programming days were fun

[21:35] <moritz_> and now it spoilt you?

[21:35] <moritz_> because you can see how programming should be?

[21:36] <cosimo> then during nighttime I'm sucked into the alternative world of perl6

[21:36] <cosimo> feels like The Matrix :-)

[21:37] <cosimo> moritz_: yeah

[21:38] <cosimo> last week I started this small project to port facter (ruby) to perl6

[21:38] <cosimo> it's been a fantastic learning experience

[21:39] <cosimo> and it's almost done too

[21:39] <arnsholt> Right. I've been able to improve the error message a bit at least

[21:39] <moritz_> Mr. Anderson has a secret live!

[21:39] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?best_of_perl_6_tablet

[21:40] <cosimo> ruby is cool but lack of sigils sucks, seriously

[21:41] <cosimo> 'night, everyone

[21:42] <Tene> ruby's scoping is rather broken. :(

[21:43] <lichtkind> Tene: why?

[21:44] *** Chillance joined
[21:45] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_tablets

[21:45] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_intro_tablet

[21:45] <Tene> lichtkind: I don't actually remember; I just remembering being very frustrated at needing to implement it the wrong, broken way in my ruby compiler.

[21:46] <Tene> although the lack of declarations was also frustrating.

[21:47] <Tene> I think i may also have scoping gripes mixed up between python and ruby, so I don't want to give counterfactual details.

[21:50] <arnsholt> I know Python at least does that. Blocks don't create new lexical scopes

[21:50] <arnsholt> So if you use a variable only inside a loop or a conditional, it's still available after it

[21:51] *** slavik joined
[21:51] *** masak joined
[21:51] <masak> ahoy!

[21:51] <arnsholt> Yarr, masak!

[21:52] <oha> arnsholt, in p5 there are cases where a variabile isn't destroyed, but it's no longer reachable. what do you exactly mean with available?

[21:54] <arnsholt> oha: Those are closures. In Python this works (but in Perl syntax, because I don't remember Python's exact syntax)

[21:54] <sjohnson> hi dudes

[21:54] <arnsholt> if(1) { $x = 6; } say $x; # Will print out 6

[21:54] <arnsholt> Even if $x was never used before in the program

[21:56] <oha> that's work in perl (unless use strict)

[21:56] <oha> p5 i mean

[21:56] <masak> sjohnson: salut

[21:57] <arnsholt> oha: Huh, didn't know that =)

[21:57] <oha> perl -e 'if(gmtime) { $x=3; } print $x, "\n"'

[21:57] <arnsholt> But you can't turn that off in Python (and not in Ruby either, I think)

[21:57] <oha> just tried :)

[21:58] <arnsholt> Me too =)

[22:02] *** molaf joined
[22:04] <jnthn> masak!

[22:05] <masak> jnthn! \o/

[22:05] <jnthn> masak: Snow! I has more of it! \o/

[22:05] *** pochi left
[22:05] <masak> jnthn: I'm doing bets with myself to see how long you'll think snow is funny. :P

[22:05] *** pochi joined
[22:05] <Tene> There's no snow where I live now.  I expect to miss it.

[22:06] <jnthn> Like "rofl", snow has an o in it and is four chars long.

[22:07] <Tene> http://www.google.com/images?q=snow+lolcat

[22:07] <dalek> niecza: b2fa2f9 | sorear++ | v6/tryfile:

[22:07] <dalek> niecza: [v6] Support Texas-quoted categoricals

[22:07] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b2fa2f94bc

[22:07] <dalek> niecza: e8a2b1c | sorear++ | v6/tryfile:

[22:07] <dalek> niecza: [v6] fix $ -> $Any()

[22:07] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e8a2b1cf4f

[22:08] <sorear> now it can parse the Niecza setting without complaining

[22:08] <jnthn> Tene: Bizzare image search results are bizzare.

[22:08] <sorear> time to start rewriting the compiler in perl 6!

[22:08] <Tene> Mmm, rewrites.

[22:08] <colomon> \o/

[22:10] <masak> sorear++

[22:11] <sorear> odd, it takes over a minute to parse

[22:13] <hercynium> snow++

[22:14] <masak> *lol* http://lolcatz.wordpress.com/2007/06/25/invisible-snowboard/

[22:15] <masak> the cat is in total control over its environment, with a focused look on its face.

[22:15] <sorear> over twice as long as the STD parser embedded in niecza_eval

[22:15] * sorear runs the profiler, but it probably won't finish until after I leave

[22:16] <hercynium> masak: I can't find it right now, but I have a version of that pic with a bowling ball in front of the cat

[22:17] <frettled> hercynium: how did you know (snow)? :D

[22:17] <masak> hercynium: I imagine that would work nicely, yes.

[22:17] <hercynium> frettled: jnthn> masak: Snow! I has more of it! \o/

[22:18] <frettled> oh!

[22:18] <frettled> (it's snowing here, that's why I asked)

[22:24] *** oha left
[22:24] <masak> er. someone has to help me with "X years ago" today.

[22:24] <masak> how many years ago is 534 BC? discuss.

[22:26] <masak> a simple subtraction gives 2544 years ago, but there's no year 0, is there?

[22:26] *** bitter16 joined
[22:27] *** bitter16 left
[22:28] <sorear> 534 BC is not a well-defined Instant

[22:28] <sorear> please be more specific.

[22:29] <masak> November 23, 534 BC.

[22:29] <masak> sometime in the early afternoon.

[22:29] <sorear> 2543 ya I think

[22:29] <masak> good. that's my current guess as well.

[22:30] <jnthn> Was November invented yet? :)

[22:30] <masak> that's a very good question. I'm not sure how old the month name November really is.

[22:31] <colomon> are we assuming we don't care about the actual calender, differences which are less than a year are ignored?  ;)

[22:31] <masak> it's not like it was waiting to be named after an emperor, like August or July.

[22:31] <masak> colomon: no.

[22:32] <masak> colomon: this is for the "on this day X years ago" part of today's November blog post.

[22:32] <colomon> wasn't it the ninth month in the old Roman calendar? (pre August / July)

[22:32] <arnsholt> masak: I vote for just doing the 2544 years ago

[22:32] <masak> arnsholt: I'm listening.

[22:32] <arnsholt> There is no comment field for people to bikeshed the thing in anyways ;)

[22:32] <masak> :)

[22:32] <colomon> arnsholt++ # no bikeshedding is good

[22:32] <jnthn> Just say, like, "A little while back"

[22:32] <arnsholt> And it's the method people usually use to find the year

[22:32] *** _kaare left
[22:33] <masak> shucks, now I don't know what to do. :)

[22:33] <arnsholt> Also, you link to the Wikipedia pages, so anyone really interested can look it up there =)

[22:33] <masak> arnsholt: sounds like you're arguing for mathematical simplicity over factual correctness.

[22:33] <arnsholt> colomon: November is the ninth month in the Roman calendar, but it was (roughly) at the same place in the calendar as now

[22:34] <arnsholt> Because the year didn't start in January, but in March

[22:35] <frettled> masak: if you go for "there was a year zero", you're catering for astronomers.  If not, you're catering for almost everyone else using some understanding of the Christian calendars.

[22:36] <arnsholt> Then insert all the funny business of leap years being inserted by priestly fiat and records being shoddy, julian/gregorian calendars, etc.

[22:36] <frettled> arnsholt: well, it was the ninth month until the calendar was so f..... that a certain Caeius Iulius Caesar (III) decided to rewrite the calendar system.

[22:36] <frettled> Post-Augustus, there were twelve.

[22:37] <arnsholt> Yeah, the Roman clendar is complicated

[22:37] <frettled> it was a mess, continuously, until that Caesar.

[22:37] <arnsholt> I know. I especially love how the insertion of leap years was a political matter

[22:37] <arnsholt> Excellent way to handle it =D

[22:37] <frettled> Essentially, when we talk about e.g. 54 B.C. in history, we talk about it according to our modern calendar (Gregorian).

[22:37] <gfldex> it's still a mess as earth refuses to have a stable orbit around the sun

[22:38] <frettled> And the Gregorian calendar does not acknowledge a year zero.

[22:38] <arnsholt> gfldex: That's true. But at least now the abberations in the calendar can't be on the order of days per decade =)

[22:38] <frettled> Essentially, this is because we're using ordinal numbers for years, not cardinal numbers.

[22:39] *** yahooooo left
[22:40] *** yahooooo joined
[22:43] <frettled> Bonus: when you ask GNU date what date+time it was 2010 years ago, it will say: Thu Nov 23 23:42:46 LMT 0000

[22:43] <frettled> To get the time in the BC/AC notation, you need to subtract one.  That is, <whatever> LMT 0000 = <whatever> 1 BC.

[22:45] <masak> I know! I'll just link "no year 0" in my post to this discussion! :)

[22:45] <masak> hello, readers who followed that link o/

[22:45] <gfldex> another good reason to get off the planet into big space ships

[22:45] <frettled> masak: or http://en.wikipedia.org/wiki/ISO_8601

[22:45] <diakopter> or small ones

[22:45] <frettled> gfldex: preferably not too fast ones, because otherwise, you FU the time too much :)

[22:46] *** plobsing joined
[22:46] <Tene> masak: have you yet dealt with: cal 9 1752 ?

[22:46] <lichtkind> good night

[22:46] <masak> Tene: no, but I'm discounting that detail. eagh. :)

[22:47] <masak> Tene: the posts say "X years ago today". I'm just going to pretend that "today" means "on the date with the same month and day".

[22:47] <frettled> masak: oh, and if you want to go completely _bonkers_: http://en.wikipedia.org/wiki/Julian_calendar#Leap_year_error

[22:48] <masak> this happens every time we start discussing time. :P

[22:48] <frettled> that you go bonkers?

[22:48] <masak> no, that ample material for doing so is provided.

[22:49] <frettled> :D

[22:49] <gfldex> being bonkers is what gets you into #perl6

[22:49] <frettled> I seem to share a part of the blame for that.

[22:49] <Tene> masak: provided that that day actually exists in that year (and location/authority)

[22:49] <frettled> Quick, the SEP generator!

[22:50] <Tene> From what I hear, similar things happened in 1582 in rome and in 1917 in russia.

[22:50] <masak> Tene: look, it's Wikipedia that said "November 23, 534 BC". I'm just going to assume they meant something by that. :)

[22:50] <frettled> Tene: and at other dates in other places.

[22:50] <Tene> masak: Ah, so if I want to troll you today, I just need to edit wikipedia.  That makes it easier.  ;)

[22:51] <masak> Tene: :D

[22:51] <frettled> Tene++

[22:58] *** pyrimidine_ joined
[23:00] <lue> ohayo o/

[23:00] <lue> .u tardis

[23:00] <phenny> lue: Sorry, no results for 'tardis'.

[23:01] *** pyrimidine left
[23:01] *** pyrimidine_ is now known as pyrimidine

[23:03] <Tene> masak: You may also be interested in the hebrew calendar: http://blogs.msdn.com/b/michkap/archive/2010/10/22/10079237.aspx

[23:03] <masak> thanks. this channel, just as the Ravenclaw house, is very beneficial for people who like to learn.

[23:03] <diakopter> yesterday even

[23:04] <lue> masak: there is a year 0, the idiot monk who designed the Gregorian calendar forgot that though.

[23:05] <lue> Funny we happen to be discussing time today of all days... :)

[23:05] <masak> why, is today special?

[23:05] <lue> happy 47th anniversary of Doctor Who! \o/

[23:06] <masak> oh, right.

[23:06] <masak> lue: happy anniversary. :)

[23:07] <hercynium> lue: I didn't know it was an anniversary, but somehow now I feel my selection of "The Three Doctors" last night was strangely apropos

[23:08] <lue> Can't wait for 2013! [and the ability to watch DW on my computer :/]

[23:08] <hercynium> lue: I watched on netflix

[23:08] <lue> in any case, how serendipitous :)

[23:09] <lue> my solution to watching videos isn't availability, it's the computer itself (some days it's a miracle a graphical environment works decently)

[23:09] <hercynium> I kinda forgot how obnoxious the second doctor was (though amusing in small doses)

[23:09] <hercynium> ah

[23:09] *** pyrimidine left
[23:09] <hercynium> I was watching on the Wii, then moved it to my phone when I was getting sleepy

[23:11] <lue> [ The new run of the series (2005–) started on the 42nd year of DW (a few months before 23 Nov.). Douglas Adams wrote for DW. Coincidence!? ]

[23:15] <lue> Anyway, are there any other confusions of Time that need answering?

[23:16] <masak> blog post! http://strangelyconsistent.org/blog/november-23-2010-all-the-worlds-a-stage

[23:17] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6

[23:23] <Tene> masak: you may want to explicitly state that you re-enabled the Text::Markup::Wiki::MediaWiki code path

[23:23] <masak> thanks. I will.

[23:28] *** risou joined
[23:39] <lue> how do I get my blog on the aggregator? I feel I post semi-regularly.

[23:42] <masak> lue: which one? Planet Perl 6?

[23:44] *** masak` joined
[23:44] <lue> yes. The one everyone talks about.

[23:45] *** masak left
[23:45] *** masak` is now known as masak

[23:49] <masak> seems [Coke] might be a planetsix admin, from what the IRC logs tell me.

[23:51] <lue> I'll ask him when he's around, then.

[23:58] *** ch3ck left
