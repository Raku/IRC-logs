[00:00] *** devinus left
[00:01] *** donaldh left
[00:01] *** risou_ joined
[00:03] <ggoebel> o/

[00:03] <masak> ggoebel: \o

[00:04] *** ggoebel left
[00:04] *** risou left
[00:04] <sjohnson> oy

[00:04] <sjohnson> oops.. yo*

[00:04] *** ggoebel joined
[00:05] <masak> it was a dark and net-splitting night...

[00:06] <sorear> masak: let me know if you run into anything excessively annoying.

[00:06] <masak> sorear: oh, I will.

[00:06] <sorear> masak: a little tip from my work on STD - edit-compile-run cycles go much faster if you add augment blocks to the main program instead of changing the modules

[00:07] <masak> nod.

[00:07] <sorear> (my periodic "Merge back" commits are de-monkeytyping of various things)

[00:07] <masak> I've recently adopted that style of development when hacking on the Rakudo setting.

[00:08] *** Ikarus left
[00:08] <sjohnson> rakudo: say "piggy".reverse

[00:08] <p6eval> rakudo : OUTPUT«piggy␤»

[00:08] <sjohnson> rakudo: say scalar reverse "piggy"

[00:08] <p6eval> rakudo : OUTPUT«Could not find sub &scalar␤  in main program body at line 22:/tmp/HFQdg3ovr7␤»

[00:09] <masak> rakudo: say "piggy".flip

[00:09] <p6eval> rakudo : OUTPUT«yggip␤»

[00:09] <sjohnson> heh

[00:09] <sjohnson> thats cute

[00:09] <sjohnson> sweeeeeeeeet

[00:09] <masak> sjohnson: I can read your mind, can't I?

[00:09] <sjohnson> perl 6!!!

[00:09] * sjohnson yells loudly

[00:09] <sjohnson> you do indeed have a crystal ball programmed in p6

[00:09] <masak> sjohnson: http://strangelyconsistent.org/blog/the-taming-of-the-newbie-a-comedy-on-irc

[00:11] <sjohnson> "Perl 6 -- making life worth living, again!"

[00:12] *** betterworld left
[00:12] *** betterworld joined
[00:13] *** hanekomu left
[00:27] *** Alias__ joined
[00:28] <Alias__> What's the syntax for the evalbot?

[00:28] <Alias__> I need to test some corner cases

[00:28] <masak> rakudo: say "this is my syntax"

[00:28] <p6eval> rakudo : OUTPUT«this is my syntax␤»

[00:28] <sorear> perl6: my $f = sub ($x) { say "A" }; $f($f = sub ($x) { say "B" });

[00:28] <p6eval> rakudo : OUTPUT«B␤»

[00:28] <p6eval> ..pugs: OUTPUT«A␤»

[00:29] <masak> sorear: I'm less surprised about Rakudo's behavior.

[00:29] <sorear> also niecza:, alpha:, elf:, yapsi:, mildew:

[00:30] <masak> to me, it makes sense that the (second) assignment is performed before the call binding.

[00:30] <sorear> and nqp:, nqpnet:, perlesque:, std: for the deliberately partial ones

[00:30] <sorear> masak: TimToady has already ruled that both are legal; I was just using it as an example of perl6: where the results differed

[00:31] <masak> right.

[00:31] <sorear> pugs: say $*PERL

[00:31] <p6eval> pugs: OUTPUT«␤»

[00:31] <sorear> pugs: say $*VERSION

[00:31] <p6eval> pugs: OUTPUT«␤»

[00:31] <sorear> pugs: say $*OS

[00:31] <p6eval> pugs: OUTPUT«␤»

[00:38] <diakopter> pugs: say $*PUGS_VERSION

[00:38] <p6eval> pugs: OUTPUT«Perl6 User's Golfing System, version 6.2.13.15, December 16, 2009␤»

[00:38] <sorear> perl6: say $*PERL; say $*PUGS_VERSION

[00:38] <p6eval> rakudo : OUTPUT«name    rakudo␤version  2010.10-56-g227feae␤␤»

[00:38] <p6eval> ..pugs: OUTPUT«␤Perl6 User's Golfing System, version 6.2.13.15, December 16, 2009␤»

[00:39] <sorear> ... we've probably scared away Alias__ .  Oops.

[00:39] <diakopter> heh

[00:39] <diakopter> nothing scares him

[00:39] <masak> Alias__ the unscarable.

[00:42] <sjohnson> heh

[00:49] *** sji left
[00:53] *** jaldhar joined
[00:54] <sjohnson> Golfing!

[01:00] <rjbs> version FOOORRREEEEEE

[01:01] <masak> rakudo: use v4;

[01:01] <p6eval> rakudo :  ( no output )

[01:01] <masak> rakudo: use v4; say "fore!"

[01:01] <p6eval> rakudo : OUTPUT«fore!␤»

[01:02] <sorear> wanted: an IDL for foreign imports, to spec what classes to import and how, for a cross compiler

[01:02] *** Teratogen joined
[01:02] <Tene> IDL?

[01:02] *** risou joined
[01:03] *** risou_ left
[01:03] <sorear> An interface definition language

[01:05] <masak> sleep &

[01:05] *** masak left
[01:06] <Alias__> rakudo: any(1)

[01:06] <p6eval> rakudo :  ( no output )

[01:06] *** QinGW joined
[01:07] <Alias__> rakudo: if ( any(1) ) { say "true" }

[01:07] <p6eval> rakudo : OUTPUT«true␤»

[01:07] <Alias__> rakudo: if ( any(0) ) { say "true" } else { say "false" }

[01:07] <p6eval> rakudo : OUTPUT«false␤»

[01:07] <Alias__> rakudo: if ( any() ) { say "true" } else { say "false" }

[01:07] <p6eval> rakudo : OUTPUT«false␤»

[01:07] <Alias__> pugs: if ( any() ) { say "true" } else { say "false" }

[01:07] <p6eval> pugs: OUTPUT«false␤»

[01:08] <Alias__> Is there a dumper? Like the 'x' in the P5 debugger?

[01:09] <Alias__> rakudo: say any(1)

[01:09] <p6eval> rakudo : OUTPUT«any(1)␤»

[01:09] <Alias__> huh...

[01:09] <Alias__> rakudo: say( any(1) )

[01:09] <p6eval> rakudo : OUTPUT«any(1)␤»

[01:09] <sorear> rakudo: say any(1).perl

[01:09] <p6eval> rakudo : OUTPUT«any(1)␤»

[01:10] <Alias__> rakudo: say any().perl

[01:10] <p6eval> rakudo : OUTPUT«any()␤»

[01:10] <Alias__> rakudo: say any().boolean

[01:10] <p6eval> rakudo : OUTPUT«any()␤»

[01:10] <sorear> rakudo: say any().Bool

[01:10] <p6eval> rakudo : OUTPUT«Bool::False␤»

[01:10] <Alias__> ah, there we go

[01:10] *** skangas joined
[01:10] <Alias__> odd that it's capitalised

[01:10] <sorear> rakudo: say any().nonexistantmethod

[01:10] <p6eval> rakudo : OUTPUT«any()␤»

[01:10] <Alias__> But whatever :)

[01:11] <sorear> coercion methods are spelled exactly like the target type

[01:11] <Alias__> Junctions stringify to the code of themselves?

[01:11] <sorear> rakudo: say True.WHAT.perl

[01:11] <p6eval> rakudo : OUTPUT«Bool␤»

[01:11] <sorear> I don't think the low-level stringification of junctions has been specced yet

[01:11] <Alias__> But the booleanification of any() is what I was looking for

[01:12] <Alias__> List::MoreUtils::any { } () returns undef atm

[01:12] <Alias__> I'm thinking that should really be false

[01:13] <Alias__> (I've taken over List::MoreUtils to clean it up a bit)

[01:13] <sorear> YES THANK YOU

[01:14] <Alias__> Tassilo has finally admitted maintainer defeat

[01:14] <sorear> List::MoreUtils's handling of empty lists is incredibly stupid and has bitten me many times

[01:14] <Alias__> First I'm just cleaning up the test suite and expanding coverage, and fixing cases where the current implementation doesn't confirm to the current documentation

[01:14] <Alias__> Then I'll move onto actual changes once that's done

[01:15] <Alias__> But I see this project as a bit like the DBD::SQLite takeover

[01:15] <Alias__> I just have to clean up the test suite, get the code packaging and releasing cleanly, and fix the obvious stuff

[01:15] <Alias__> Then talented people will appear from the air and fix the XS stuff, and I just switch to release manager

[01:22] *** justatheory joined
[01:24] <sjohnson> hi 

[01:31] <dalek> niecza: 1b6ac44 | sorear++ | lib/SAFE.setting:

[01:31] <dalek> niecza: Remove several direct calls to context methods in setting

[01:31] <dalek> niecza: review: https://github.com/sorear/niecza/commit/1b6ac44657

[01:31] <dalek> niecza: 7998ffb | sorear++ | src/ (2 files):

[01:31] <dalek> niecza: Improve code generation for <?foo> and <!foo>

[01:31] <dalek> niecza: review: https://github.com/sorear/niecza/commit/7998ffb2f9

[01:36] *** Guest71264 left
[01:38] *** kst left
[01:39] *** kst joined
[01:48] *** kanishka joined
[02:03] *** risou_ joined
[02:05] *** risou left
[02:22] *** jferrero left
[02:28] *** kst left
[02:29] *** whiteknight left
[02:29] *** kst joined
[02:32] *** envi joined
[02:32] *** awwaiid joined
[02:39] *** gimix joined
[02:56] *** kanishka left
[03:01] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_io_tablet

[03:08] *** plobsing joined
[03:18] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[03:21] *** plobsing left
[03:35] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[03:40] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[03:46] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[03:48] *** DarthGandalf joined
[03:50] *** plobsing joined
[04:06] *** risou_ left
[04:07] *** risou joined
[04:12] *** satyavvd joined
[04:39] *** rhr joined
[04:45] *** _twitch joined
[05:09] *** orafu left
[05:12] *** orafu joined
[05:12] *** risou left
[05:35] *** wamba joined
[05:44] *** kjeldahl joined
[05:53] *** wamba left
[06:27] *** masak joined
[06:27] <masak> good morning, #perl6

[06:28] <masak> lately I've been having an increased awareness of when lichtkind++ is awake. :P

[06:32] <sorear> good * #perl6

[06:34] *** alc joined
[06:37] *** ggoebel left
[06:39] *** alc left
[06:39] *** alc joined
[06:41] <lue> hello sorear o/

[06:41] <lue> hello masak o/

[06:41] <lue> hello world \o/

[06:42] <masak> it's snowing beautifully outside. the sun's not up here yet. it's cold.

[06:43] <lue> it's probably snowing here too. The sun already left.

[06:44] <sorear> it's cold here too.  no snow

[06:46] <lue> oh, I forgot to say hello to arsenic-based life. Hello! o/

[06:47] <masak> that would be the people on reddit. :P

[06:48] *** _kaare joined
[06:49] <lue> Wait until it evolves into beings that can live alongside humans. "NEW Vita-mite™® vitamins contain the 100% of the recommended daily value of Arsenic!"

[07:00] <masak> apparently, according to nihiliad++ on Twitter, the life-form isn't "arsenic-based" so much as having replaced phosphorous with arsenic.

[07:02] <dalek> niecza: daad34d | sorear++ | / (4 files):

[07:02] <dalek> niecza: Generate better code for <?before \w>

[07:02] <dalek> niecza: review: https://github.com/sorear/niecza/commit/daad34dd12

[07:03] <lue> [ Yeah, but it's catchier than "having-arsenic-in-its-DNA-instead-of-phosphorus life" :) ]

[07:04] *** kst left
[07:05] *** kst joined
[07:06] <masak> "perl6 has really turned it up to 11." -- http://twitter.com/bda_ath_cx/status/10531783657394176

[07:06] *** wtw joined
[07:06] <lue> why does the method  in-timezone  use the * 60 * 60 bit at the end (in the S32::Temporal example)? Is it to make a complete timezone, or...

[07:09] <masak> which example are you referring to?

[07:09] *** kst left
[07:10] *** kst joined
[07:10] <lue> my $dt = DateTime.new('2005-02-01T15:00:00+0900'); say $dt.hour; $dt = $dt.in-timezone(6 * 60 * 60); say $dt.hour;

[07:12] <masak> lue: "The :timezone signifies the necessary conversion by returning an integer giving the difference from UTC in seconds."

[07:14] <lue> aaaah.

[07:14] <sorear> odd, two successive runs of STD produced *user* times differing by 1.6%

[07:15] *** uniejo joined
[07:15] <sorear> I expect that much variability of the real time

[07:21] *** Util joined
[07:21] *** kjeldahl_ joined
[07:22] *** xinming_ joined
[07:25] *** xinming left
[07:32] <lue> goodnight o/

[07:33] <masak> 'night, lue.

[07:36] <moritz_> good morning

[07:36] <masak> :)

[07:36] <masak> morning.

[07:37] <masak> the Oceanians go to bed; the Europeans rise.

[07:37] <dalek> grok: 872ff96 | hinrik++ | MANIFEST.SKIP:

[07:37] <dalek> grok: Don't put README.pod in the release

[07:37] <dalek> grok: review: https://github.com/hinrik/grok/commit/872ff96d6d

[07:37] <dalek> grok: 0e492fd | hinrik++ | / (3 files):

[07:37] <dalek> grok: Update hyperlinks to the Synopses

[07:37] <dalek> grok: review: https://github.com/hinrik/grok/commit/0e492fd8c8

[07:37] <dalek> grok: d44bd65 | hinrik++ | dist.ini:

[07:37] <dalek> grok: Update Prereq section in dist.ini

[07:37] <dalek> grok: review: https://github.com/hinrik/grok/commit/d44bd658ce

[07:37] <dalek> grok: 6628b38 | hinrik++ | Changes:

[07:37] <dalek> grok: v0.23

[07:37] <dalek> grok: 

[07:37] <dalek> grok:     - Update hyperlinks to the Synopses

[07:37] <dalek> grok: review: https://github.com/hinrik/grok/commit/6628b3869e

[07:37] <masak> literal++

[07:38] <moritz_> uhm

[07:38] <moritz_> did tadzik put a draft for today's advent post anywhere?

[07:39] <masak> in mu, perhaps?

[07:39] * moritz_ pulls

[07:39] <moritz_> yes

[07:39] <masak> \o/

[07:40] <dalek> niecza: 269d6a2 | sorear++ | lib/Kernel.cs:

[07:40] <dalek> niecza: Fix excessive slow-path use in get_first

[07:40] <dalek> niecza: review: https://github.com/sorear/niecza/commit/269d6a248c

[07:40] *** nymacro joined
[07:45] <moritz_> http://perl6advent.wordpress.com/2010/12/03/day-3-file-operations/

[07:46] <moritz_> any idea how I can set the author to 'tadzik'?

[07:47] <masak> the paragraph starting "Example usage?" looks mighty weird.

[07:49] *** ggoebel joined
[07:50] *** justatheory left
[07:51] <moritz_> better now.

[07:51] *** Bzek left
[07:52] <masak> yes.

[07:52] <masak> "For more info please refer to the *documentation*."

[07:52] <masak> is that meant to be emphasis like that, and not (say) a link somewhere?

[07:53] <masak> which documentation are we talking about? the spec?

[07:55] * moritz_ makes it a link

[07:55] <masak> moritz_++

[07:57] <sorear> am I expected to write anything for this?

[07:58] <masak> s/expected/encouraged/

[08:05] <dalek> niecza: eebc112 | sorear++ | / (2 files):

[08:05] <dalek> niecza: Run get_first off trampoline

[08:05] <dalek> niecza: review: https://github.com/sorear/niecza/commit/eebc112943

[08:09] *** felipe left
[08:15] *** kensanata joined
[08:17] *** alc left
[08:21] *** renormalist joined
[08:24] *** alc joined
[09:02] *** hugme joined
[09:02] *** ChanServ sets mode: +v hugme

[09:05] *** hanekomu joined
[09:12] <moritz_> there was a comment on the advent calendar asking if multi MAIN(Int $x, Str $y) { ... } would work

[09:13] <moritz_> currently it doesn't

[09:13] <moritz_> if I remember the spec correctly

[09:13] <masak> which part is the commenter asking about?

[09:13] <moritz_> I think we need some magic string parsing function

[09:13] <masak> the 'multi' or the 'Int'?

[09:13] <sorear> I think we need a change of perspective

[09:13] <moritz_> masak: multi dispatch on types

[09:14] <sorear> I've been thinking a lot about defining subset Int of Cool where /^<[+-]>?\d+$/

[09:14] <masak> moritz_: as the spec currently stands (at least by implication), you can't pass in an Int.

[09:14] <moritz_> masak: correct

[09:14] <sorear> this solves a great deal of issues

[09:14] <masak> I mentioned this in my last spec-grumbling post.

[09:14] <moritz_> sorear: and creates a huge list of other problems

[09:15] <masak> http://strangelyconsistent.org/blog/second-system-syndrome-done-wrong

[09:15] <sorear> moritz_: like what?

[09:15] <moritz_> sorear: subset types aren't as narrow as nominal types in multi dispatch, for one

[09:15] <moritz_> sorear: and an Int isn't a string that looks like an Int. An Int is a number.

[09:15] <sorear> How is that a problem?

[09:16] <moritz_> sorear: it will surprise lots of people who write signatures, and make type based multi dispatch much harder

[09:16] <moritz_> and I guess it's slow.

[09:16] <sorear> I'd like to see a specific example of a case that my way makes worse.

[09:16] <sjohnson> masak: side question, are you a linux kind of guy?

[09:17] <moritz_> sorear: multi fac(0) { 1 }; multi fac(Int $x) { $x * fac($x-1) } # stops working

[09:17] <dalek> niecza: 9d06eea | sorear++ | src/ (5 files):

[09:17] <dalek> niecza: Use thunks for parameter default values

[09:17] <dalek> niecza: 

[09:17] <dalek> niecza: This is preparation for using an out-of-line binder.

[09:17] <dalek> niecza: review: https://github.com/sorear/niecza/commit/9d06eeabb2

[09:18] <moritz_> if Int is a subset of cool, this desguars to

[09:18] <moritz_> multi fac(Cool $x where 0) { 1 }

[09:18] <moritz_> sorry

[09:18] <moritz_> multi fac(Cool $x where /^\-?\d+$/ & 0) { 1 }

[09:19] <moritz_> multi fac(Cool $x where /^\-?\d+$/ ) { $x * fac($x-1) }

[09:19] <moritz_> which both have the same narrowness

[09:19] <moritz_> => you're screwed

[09:20] <masak> sjohnson: I've used Linux at times. plan to do it again in the future. right now I'm using mostly Mac OS X.

[09:20] <sorear> nitpick: when constraints are involved, MMD falls back to in-order testing, which makes this work

[09:20] <sorear> but I see the issue

[09:20] <moritz_> but that's basically Sheer Luck

[09:20] <sjohnson> masak: cool.  i was thinking of giving linux another try someday

[09:20] <sorear> Int as a subset cannot work unless it's made a less constraining subset than 0 in some what

[09:21] <sorear> I need to plant this idea in TimToady, see if he can develop anything from it

[09:21] <masak> sjohnson: I feel we're disturbing Real Perl 6 discussion. privmsg me if you want to keep talking Linux.

[09:21] <TimToady> I plan to go a different direction with ath

[09:21] <TimToady> *that

[09:21] <moritz_> anyway, I don't like it from a conceptual point either

[09:21] <sorear> the extent to which Perl 6 forces you to care about the difference between strings and numbers bothers me a lot

[09:21] <moritz_> because forcing a Str representation on Int seems wrong

[09:21] <TimToady> in fact, I plan to unify what happens with <1 2 3> with what happens to command line args

[09:22] <masak> as mentioned before.

[09:22] <moritz_> TimToady: that was what I was going to propose before sorear++ came up with a different idea :-)

[09:22] <masak> so both get the hybrid solution. :(

[09:22] <sorear> In Perl 5, 1 and "1" are semantically almost identical

[09:22] <TimToady> it's really the same fundamental underlying problem: you are forced to use text to represent a number

[09:22] <sorear> the implementation uses a real number for one

[09:23] <moritz_> some kind of general mechanism that turns a string into whatever kind of literal it represents

[09:23] <sorear> the case where Perl 5 breaks down is that 1 | 10  !===   "1" | "10"

[09:23] <moritz_> without going through eval() :-)

[09:23] <sorear> Perl 6 fixes that, but breaks 1 === "1" in every other way

[09:23] <TimToady> not every other way

[09:23] <mathw> But they aren't the same thing

[09:24] <sorear> a hypothetical Perl 5 with +| and ~| would allow you to not care

[09:24] <TimToady> Cool covers most of the issues already

[09:24] <TimToady> the remaining issue of one of MMD, mostly

[09:25] *** tzhs joined
[09:25] <TimToady> which Cool would usually solve if people don't specify Str $param, but just $param, or we make some way of Str $param to be looser and recognize ambiguous types from <1 2 3> and such

[09:26] <sorear> right.  I think Str, Int, etc being as tight as they are is the root of the problem

[09:26] <TimToady> that is, the Str type could introduce just a bit of the "everything is a string" flavor back into Perl 6

[09:26] <sorear> Str current has too much of a representationish flair

[09:27] <TimToady> that's the right place to push it, I suspect, not fiddling with numeric subtypes

[09:27] <TimToady> but I'm still thinking about it

[09:27] <TimToady> which is hard at 1:30am :)

[09:27] <sorear> I could stand being making Str alone a subtype.

[09:27] <sorear> 3:30am is when I'm most creative, but I need daybreak to actually understand the ideas :)

[09:28] <sorear> Str alone being a subtype would break (1 ~ 1) ~~ Int.  Which wouldn't be that bad.

[09:28] <sorear> hrm

[09:28] <moritz_> huh? that's False right now, and would be False then too

[09:29] <sorear> in this model, how does Str differ from Cool?

[09:29] <TimToady> the way the spec currently stands, <1 2 3> makes Ints that can("Str"), but perhaps we can strengthen that so that MMD can see it nominally

[09:29] <sorear> moritz_: it's True in the p5think model, and I don't think it staying True is useful

[09:33] <moritz_> sorear: in the p5 think, AnyScalar ~~ Int (+maybe warning)

[09:36] <TimToady> what we might want is some mild rewriting of multi (Str $s) -> multi (Cool $s as Str)

[09:37] <TimToady> where an explicit sig with Cool would suppress that rewrite, presumably

[09:39] <TimToady> we'd still presumably want to make sure the dwimmed number/strings do the round-trip without losing their original format, I suspect

[09:39] <TimToady> or you can't have a filename of "1/3"  :)

[09:42] * sorear -> sleep

[09:45] <TimToady> EMETOO

[09:46] <sjohnson> heh

[09:46] * sjohnson fluffs his pillow

[09:49] *** tzhs left
[09:50] *** dakkar joined
[10:06] *** QinGW left
[10:26] *** colomon_ joined
[10:26] *** colomon left
[10:26] *** colomon_ is now known as colomon

[10:30] *** colomon_ joined
[10:30] *** colomon left
[10:30] *** colomon_ is now known as colomon

[10:32] *** colomon_ joined
[10:32] *** colomon left
[10:32] *** colomon_ is now known as colomon

[10:37] <flussence> regarding the type thing above, I'm wondering whether it would be better if a signature "(Y $x)" meant "$x.can(Y)" instead of "$x ~~ Y".

[10:38] *** beerpages joined
[10:38] <beerpages> Erstelle dir deine eigene Umfrage - Beispiel: http://www.beerpages.de/view/2H/Anti-%22Die%20%C3%84rzte%22%20Kampagne

[10:38] *** beerpages left
[10:44] <flussence> with that a strict type check (Foo $x) would become ($x where Foo), ($x where .can('Foo')) becomes (Foo $x), and (Foo $x where .can('Bar')) becomes (Bar $x where Foo). The DWIMmy second one becomes much shorter.

[10:46] <flussence> rakudo: sub t($u where Int) { WHAT($u).say }; t(1); t('1');

[10:46] <p6eval> rakudo : OUTPUT«Int()␤Constraint type check failed for parameter '$u'␤  in 't' at line 1:/tmp/LX8HqDPsU6␤  in main program body at line 22:/tmp/LX8HqDPsU6␤»

[10:50] <flussence> (on an unrelated topic, my test runs are 100% again and they're a quarter hour faster than before! nice)

[10:51] <moritz_> flussence: \o/

[10:52] <flussence> there's still 2 hours of room for improvement though ;)

[10:53] * moritz_ is well aware of that

[10:55] <flussence> I think the hours of typing saved will make up for that eventually.

[10:56] <flussence> .oO( hardware upgrades are cheap, when the hardware's not made of meat )

[10:59] *** kst left
[10:59] *** kst joined
[11:01] *** MayDaniel joined
[11:03] *** timbunce joined
[11:05] *** satyavvd left
[11:13] *** hanekomu left
[11:37] *** alc left
[11:51] *** kst left
[11:52] *** kst joined
[11:57] *** felipe joined
[11:57] *** kfo joined
[11:58] *** hanekomu joined
[12:20] *** tzhs joined
[12:22] *** uniejo left
[12:36] *** zby left
[12:40] *** edenc joined
[12:44] *** timbunce left
[12:50] *** ab5tract joined
[12:56] *** daxim joined
[12:58] <takadonet> morning all

[13:01] <colomon> o/

[13:02] <moritz_> \o

[13:02] <moritz_> colomon: are you on schedule for your advent plog post for tomorrow?

[13:03] <colomon> My post is about 66% complete.

[13:03] <colomon> Shouldn't be a big problem finding the time to finish it today.

[13:03] <moritz_> while we are at it, are there any more volunteers for advent blog posts?

[13:04] <moritz_> 14 out of 24 slots are still free

[13:07] <colomon> And... hmm... I might save the "big finish" of it and make it a separate post.  That would make finishing tomorrow's post a lot easier and provide another post for later.

[13:07] <moritz_> wfm

[13:09] <mathw> hmm

[13:09] * mathw ponders a suitable subject for a post

[13:09] <mathw> Ideas please!

[13:10] <moritz_> mathw: have you seen the subject list?

[13:11] <moritz_> mathw: in mu, misc/perl6advent-2010/topic-brainstorming

[13:11] <moritz_> mathw: for example X and Z meta operators are a nice topic that hasn't been covered yet

[13:12] <mathw> ooh

[13:12] <mathw> that is a nice topic

[13:12] <mathw> that I actually know some stuff about too

[13:14] <takadonet> http://www.reddit.com/r/programming/comments/efkf8/perl_6_advent_calendar_day_3_file_operations/

[13:14] <colomon> takadonet: are you putting those up on reddit, or is someone else?

[13:15] <takadonet> colomon: i'm

[13:15] <takadonet> need to get as many people exposed to Perl  6 as possible 

[13:15] <mathw> yes can I have X and Z metaoperators... let's say on the 6th? then I can write it over the weekend.

[13:16] <moritz_> mathw: sure, you're in

[13:16] <flussence> er

[13:16] <flussence> in file-operations.pod: s/dirrectory/directory

[13:17] <mathw> \o/

[13:17] <mathw> my account should still all work from last year I assume

[13:17] * mathw adds thing to his calendar to remind him

[13:17] <dalek> mu: 9c670f8 | moritz++ | misc/perl6advent-2010/schedule:

[13:17] <dalek> mu: [advent] mathw++ volunteers for day 6

[13:17] <dalek> mu: review: https://github.com/perl6/mu/commit/9c670f8e53

[13:17] <moritz_> mathw: should work, zes

[13:17] <moritz_> s/z/y/

[13:19] <moritz_> flussence: fixed, thanks

[13:22] *** gimix left
[13:32] *** xinming joined
[13:34] *** MayDaniel left
[13:35] *** xinming_ left
[13:38] *** tzhs left
[13:40] *** Patterner left
[13:42] *** Psyche^ joined
[13:42] *** Psyche^ is now known as Patterner

[13:44] *** plainhao joined
[13:47] <mathw> moritz_: thanks

[14:02] <bbkr> how to call all matching multi subs in main scope? for multi methods the syntax is $object.*method_name, however for main scope *method_name() is syntax error. is it possible?

[14:02] * moritz_ doesn't think so

[14:11] *** sji joined
[14:19] *** jaldhar left
[14:21] *** smash joined
[14:21] <smash> hello everyone

[14:21] <phenny> smash: 10 Nov 20:02Z <patrickas> tell smash colomon++ fixed the prime scripts, it would be great if you can re-run the benchmarks to generate new graphs

[14:22] <moritz_> hi smash 

[14:22] <smash> tell patrickas yes sir, running the scripts right now

[14:23] <smash> phenny: tell patrickas yes sir, running the scripts right now

[14:23] <phenny> smash: I'll pass that on when patrickas is around.

[14:24] <takadonet> smash: tell me when you are done sir :)

[14:24] <takadonet> smash: really want to see the results

[14:25] <smash> takadonet: yes, but it generally takes like 10 hours to run everything

[14:26] <smash> or something like that

[14:26] <smash> but i'll let you know as soon as it finishes

[14:30] <smash> i've been a little off perl6 (overwhelmed with work) what's new in town ?

[14:30] * smash git pull

[14:34] <takadonet> been porting over p5 cpan modules over to p6

[14:35] <takadonet> perl 6 advent calendar

[14:36] <takadonet> http://perl6advent.wordpress.com/

[14:38] <smash> nice

[14:58] *** icwiener joined
[15:03] *** jferrero joined
[15:04] *** cjk101010 left
[15:07] *** cjk101010 joined
[15:09] *** cjk101010 left
[15:12] *** cjk101010 joined
[15:17] <moritz_> wow, the advent calendar had nearly 2.7k visitors yesterday

[15:19] <moritz_> even more interesting is that there isn't a single huge source of visitors

[15:19] <moritz_> reddit being the biggest with about 200 referrals

[15:19] <moritz_> but the rest seems to be fairly spread out

[15:20] <takadonet> !!

[15:20] *** sftp joined
[15:21] <takadonet> what were our levels last year?

[15:22] <moritz_> we had a day with ~7k hits due to slashdot last year

[15:23] <moritz_> scratch that, 11k views

[15:23] *** wtw left
[15:23] <moritz_> 45k visits in Dec 2009

[15:23] <takadonet> I should start posting to slaskdot then...

[15:23] <takadonet> slashdot*

[15:23] <moritz_> not much chance

[15:23] <takadonet> why?

[15:23] <moritz_> there was already a /. story about the perl advent calendar

[15:24] *** _twitch left
[15:24] <moritz_> http://developers.slashdot.org/story/10/12/01/1419230/Advent-Calendar-For-Geeks

[15:27] *** sftp_ joined
[15:27] *** sftp left
[15:27] *** ab5tract left
[15:31] *** kjeldahl_ left
[15:34] *** _kaare left
[15:35] *** am0c left
[15:35] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_tablets

[15:35] *** kst left
[15:35] *** sftp joined
[15:36] *** sftp_ left
[15:36] *** kst joined
[15:37] *** lichtkind joined
[15:39] *** zby joined
[15:40] *** REPLeffect left
[15:40] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_tablets

[15:46] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_variable_tablet

[15:46] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_io_tablet

[15:51] *** wamba joined
[15:51] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_basics_tablet

[15:51] <lichtkind> sorry another change in the geenral ordering

[15:52] <takadonet> lichtkind: np

[15:55] *** jfried left
[15:59] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?best_of_perl_6_tablet

[15:59] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_basics_tablet

[15:59] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_delta_tablet

[15:59] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_cookbook_tablet

[15:59] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_lookup_tablet

[15:59] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[16:01] *** timbunce joined
[16:02] *** dakkar left
[16:02] *** cjk101010 left
[16:04] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_operator_tablet

[16:04] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_regex_tablet

[16:04] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_links_tablet

[16:04] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_variable_tablet

[16:09] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_io_tablet

[16:09] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_oop_tablet

[16:10] * masak ponders turning those updates into hourly digests

[16:13] <daxim> karma (Herbert Breunung)

[16:14] *** MayDaniel joined
[16:16] *** alester joined
[16:17] <lichtkind> masak: i said sorry in advance, i hope its the last time i have to change the index

[16:17] <lichtkind> daxim: what to delete the karma :)

[16:17] <lichtkind> want i mean

[16:17] <daxim> what good is ++ if no one is there to track it?

[16:18] <masak> sure; no problem. but even without flooding, more than one such message per hour doesn't really add much, since there are no summaries.

[16:18] <lichtkind> masak: maybe your right

[16:20] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_block_tablet

[16:20] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_subroutine_tablet

[16:23] <lichtkind> sorear: ping?

[16:23] <lichtkind> daxim: yes but i think it works without braces

[16:23] <daxim> karma daxim

[16:23] <daxim> nope.

[16:25] <lichtkind> karma Herbert Breunung

[16:25] <lichtkind> karma: Herbert Breunung

[16:25] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_basics_tablet

[16:25] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_intro_tablet

[16:27] <lichtkind> daxim: strange

[16:27] <lichtkind> ok last one and then I keep silence for today :)

[16:27] *** MayDaniel left
[16:29] <masak> Yacc is dead: http://arxiv.org/abs/1010.5023

[16:29] * moritz_ already printed the paper

[16:32] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_history_tablet

[16:32] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_language_design_tablet

[16:33] *** kst left
[16:33] <lichtkind> oh i have an ideoa to change it all again, never mind not today :)

[16:34] *** kst joined
[16:35] <PerlJam> reporting changes to perlfoundataion.org seems a bit of a waste to me.

[16:35] <PerlJam> unless we're just trying to see what lichtkind is doing :)

[16:36] <lichtkind> PerlJam: i found the idea of ourly reports fine

[16:36] <lichtkind> initially i wanted at least some connection to the wiki since there is so low traffic

[16:38] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_tablets

[16:43] *** thundergnat joined
[16:45] <thundergnat> Hi perl6 people.

[16:45] *** hanekomu left
[16:45] <takadonet> thundergnat: hey

[16:46] <thundergnat> What is the correct syntax to have a private has in a class? I'm either horribly confused or knoking up againsta bug.

[16:46] <thundergnat> *hash

[16:47] <takadonet> thundergnat: thanks for the help on algorithm:diff!

[16:47] <thundergnat> rakudo: class cat { has %!h is rw; method new { %!h{oh} = "hai"; return self; }; method oh ($a) { return $!h{oh}; } }; my $lol = cat.new; say $lol.oh;

[16:47] <PerlJam> thundergnat: class C { has %!hash;  }

[16:47] <p6eval> rakudo : OUTPUT«Type objects are abstract and have no attributes, but you tried to access %!h␤  in 'cat::new' at line 22:/tmp/5pHyo0CB3U␤  in main program body at line 22:/tmp/5pHyo0CB3U␤»

[16:47] <thundergnat> takadonet: no problem

[16:47] <thundergnat> PerlJam: that's what I thought.. see above

[16:47] <PerlJam> yeah, I'm looking

[16:50] *** lamstyle left
[16:51] <PerlJam> oh, I'm blind.

[16:51] <PerlJam> you don't have an instance

[16:52] <thundergnat> Ok, I'm horribly confused.

[16:52] <takadonet> inside the new function, you do not have an instance yet. You need to call bless yourself

[16:52] <thundergnat> oh... duh

[16:52] <PerlJam> takadonet++

[16:55] *** lamstyle joined
[16:55] <takadonet> thundergnat: are you trying to set a default values for the hash?

[16:55] <thundergnat> rakudo: class cat { has %!h is rw; method new { %!h{oh} = "hai"; return self.bless; }; method oh ($a) { return $!h{$a}; } }; my $lol = cat.new; say $lol.oh;

[16:55] <p6eval> rakudo : OUTPUT«Type objects are abstract and have no attributes, but you tried to access %!h␤  in 'cat::new' at line 22:/tmp/zviERzQ3EV␤  in main program body at line 22:/tmp/zviERzQ3EV␤»

[16:56] <thundergnat> takadonet: not initially

[16:57] <thundergnat> I'm actually trying to see if I can port the object interface to Algorithm::Diff and am looking to use a hash to hold the various bits of state.

[16:59] <thundergnat> Not having much success though. Mostly because of my poor understanding of perl6 objects I suspect.

[17:01] <thundergnat> I would think I want to use a private hash that is only accessed through internal methods.

[17:01] <takadonet> thundergnat: my knowledge of perl6 object is limited as well

[17:02] <thundergnat> My basic attempts at setting up a class with a private hash and using methods to access it have't come to much though. see above

[17:02] <wolverian> I suspect you want BUILD, not new.

[17:03] <takadonet> wolverian: one issue with BUILD right now is that default values do not get set

[17:04] <takadonet> but i think you would have to use a BUILD to access a private attribute

[17:06] <thundergnat> That sounds like what I might be after. I don't need default values when it is constructed.

[17:07] <PerlJam> thundergnat: what sort of state will be stuck in the hash?  Why use a hash rather than normal has-scoped variables

[17:08] <thundergnat> PerlJam: umm, I'm being somewhat lazy and trying to port over a perl5 object without totally redesigning it.  

[17:08] <takadonet> anyone have a link to non paste url?

[17:08] <thundergnat> It currently saves state in an array

[17:09] *** nymacro left
[17:09] <thundergnat> and hsa a host of subs that basically just return insex constants

[17:09] <thundergnat> errr.. inDex

[17:10] <PerlJam> thundergnat: you're suffering false laziness IMHO  :)

[17:10] <thundergnat> PerlJam:  could be  :-/

[17:10] <takadonet> rakudo: class cat { has %!hello is rw; submethod BUILD{  %!hello<oh> ='boo'}; method oh ($a) { return %!hello{$a}; } };my $lol = cat.new; $lol.oh('oh').say;

[17:10] <p6eval> rakudo : OUTPUT«boo␤»

[17:11] <takadonet> thundergnat:  is that what you want?

[17:11] <thundergnat> takadonet: possibly, looks promising initially.

[17:13] *** plobsing left
[17:14] <thundergnat> takadonet: actually, that looks pretty much exactly what I was trying to acheive. Thanks!

[17:16] <masak> 7 days left to Big Announcement.

[17:16] <masak> exciting!

[17:17] <takadonet> thundergnat: sweet

[17:18] <takadonet> While you hack on algorithm:diff, I will continue on Tree::Simple

[17:19] *** justatheory joined
[17:19] <thundergnat> takadonet: I got pretty much the entire procedural interface working with the exception of passing parameters to custom key generators.

[17:19] <thundergnat> Pushed the changes yesterday.

[17:19] *** dual joined
[17:20] <takadonet> thundergnat++

[17:20] <takadonet> thundergnat: i saw !

[17:22] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_basics_tablet

[17:22] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_io_tablet

[17:22] * PerlJam looks at thundergnat's code

[17:23] <PerlJam> you weren't kidding ... it looks almost exactly like the Perl 5 version

[17:24] *** _kaare joined
[17:24] <thundergnat> PerlJam: tongue in cheek? The commented out code IS the perl 5 varsion.

[17:25] <takadonet> PerlJam: I originally just did a straight up line for line so I can get it to work. 

[17:25] <PerlJam> thundergnat: I see that now that I've gotten down that far in my skimming.

[17:25] <PerlJam> well kudos to both of you!

[17:25] <PerlJam> takadonet++ thundergnat++

[17:25] <thundergnat> Thanks, later

[17:26] <thundergnat> I got to get back to $work

[17:26] *** thundergnat left
[17:30] *** Axius joined
[17:42] <dalek> roast: 9c5f904 | (Kodi Arfer)++ | S32-temporal/ (2 files):

[17:42] <dalek> roast: Added tests for DateTime.perl.

[17:42] <dalek> roast: review: https://github.com/perl6/roast/commit/9c5f90491a

[17:43] <dalek> rakudo: 878659f | KodiB++ | src/core/Temporal.pm:

[17:43] <dalek> rakudo: [Temporal] Ensured .perl works for DateTimes with saved offsets.

[17:43] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/878659f769

[17:50] *** kjeldahl left
[17:50] *** Axius left
[17:50] *** kjeldahl joined
[17:58] <masak> Kodi++ # seemingly Temprally indefatiguable

[18:02] <bbkr> rakudo: "/etc/services".IO.WHAT.say # bug?

[18:02] <p6eval> rakudo :  ( no output )

[18:02] <jnthn> o/ #perl6

[18:03] <masak> bbkr: looks like the usual "error during &say call gets lost somewhere" bug.

[18:03] <masak> jnthn! \o/

[18:03] <jnthn> masak! \o/

[18:04] <flussence> that code gives me a ===SORRY!=== locally

[18:04] <flussence> I've noticed the evalbot doesn't show those...

[18:04] <jnthn> rakudo: say IO

[18:04] <p6eval> rakudo : OUTPUT«IO()␤»

[18:04] <jnthn> rakudo: say IO.WHAT

[18:04] <p6eval> rakudo : OUTPUT«IO()␤»

[18:04] <jnthn> rakudo: say IO.WHAT.say

[18:04] <p6eval> rakudo :  ( no output )

[18:13] *** Axius joined
[18:20] *** kensanata left
[18:30] *** risou joined
[18:31] *** karb joined
[18:32] *** envi left
[18:33] *** karb left
[18:33] *** Axius left
[18:51] *** smash left
[18:53] *** zenog left
[18:54] *** hanekomu joined
[18:57] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_variable_tablet

[18:57] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_basics_tablet

[18:57] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_io_tablet

[19:07] <dalek> 6model: e405f5a | diakopter++ | / (2 files):

[19:07] <dalek> 6model: [dotnet] implement greedy quantifiers in regexes

[19:07] <dalek> 6model: review: https://github.com/jnthn/6model/commit/e405f5a69b

[19:12] <lichtkind> jnthn: zdravičko

[19:13] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[19:19] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[19:25] *** sky|plone joined
[19:25] *** sky|plone left
[19:25] <sorear> good * #perl6

[19:26] <masak> \o

[19:27] <sorear> lichtkind: pong

[19:27] <lichtkind> ahh

[19:27] <lichtkind> great

[19:28] <lichtkind> sorear: could you dimm the amount of messages about tpf wiki down

[19:28] <lichtkind> due suckiness of some wikisyntac i have to sametimes change all pages

[19:28] <lichtkind> which results in spam

[19:29] *** wallberg joined
[19:30] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[19:33] <masak> nom &

[19:33] *** masak left
[20:09] *** wallberg left
[20:14] *** y3llow_ joined
[20:14] *** pothos_ joined
[20:16] *** pothos left
[20:16] *** y3llow left
[20:16] *** y3llow_ is now known as y3llow

[20:16] *** pothos_ is now known as pothos

[20:21] <jnthn> Dobry vecer, lichtkind. :-) 

[20:22] <lichtkind> ahoj

[20:22] <jnthn> Mas sneh? :)

[20:24] <daxim> сне сне сне

[20:24] *** daxim left
[20:26] <jnthn> Was the сне getting heavy on his internet cables? :)

[20:29] *** plainhao left
[20:31] *** fhelmberger joined
[20:31] *** fhelmberger left
[20:31] *** fhelmberger joined
[20:38] *** hercynium joined
[20:39] *** MayDaniel joined
[20:40] *** plobsing joined
[20:49] *** MayDaniel left
[20:49] *** kst left
[20:50] *** kst joined
[20:53] *** maluco left
[21:13] *** am0c joined
[21:14] *** icwiener_ joined
[21:17] *** icwiener left
[21:20] *** maluco_ joined
[21:23] *** gabiruh joined
[21:27] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_tablets

[21:29] *** s0v joined
[21:39] *** dual left
[21:42] *** dual joined
[21:43] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_tablets

[21:52] <colomon> rakudo: 0, 1, -> $a, $b { $a + $b } ... -> $a, $b { $a + $b > 10000 }

[21:52] <p6eval> rakudo :  ( no output )

[21:52] <colomon> locally that's

[21:52] <colomon> ===SORRY!===

[21:52] <colomon> Limit arity cannot be larger than 1

[21:53] <colomon> is that correct by spec, or just a Rakudo limitation?

[22:01] *** alester left
[22:03] *** _kaare left
[22:22] <dalek> 6model: d59b47f | jonathan++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[22:22] <dalek> 6model: [dotnet] Generalize box_int/box_str to a general box sub that takes an argument. Will make some upcoming opset change bits easier. Also avoid calling dnst_for on something already in DNST.

[22:22] <dalek> 6model: review: https://github.com/jnthn/6model/commit/d59b47f082

[22:26] *** ch3ck3r joined
[22:30] *** ch3ck left
[22:33] <colomon> Those of you with permission on the advent blog and time, please take a look at http://perl6advent.wordpress.com/?p=456&preview=true

[22:33] <colomon> I intend to do another round of editing if I have time, but suggestions for improvement would be very welcome.

[22:34] *** timbunce left
[22:42] *** timbunce joined
[22:45] <dalek> 6model: 4d392d5 | jonathan++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[22:45] <dalek> 6model: [dotnet] Make unbox_str just unbox, and the place that needs a temp too now is explicit about that.

[22:45] <dalek> 6model: review: https://github.com/jnthn/6model/commit/4d392d589a

[22:45] <dalek> 6model: ac7f473 | jonathan++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[22:45] <dalek> 6model: [dotnet] Generalize unbox_str into a generic unbox taking an array.

[22:45] <dalek> 6model: review: https://github.com/jnthn/6model/commit/ac7f473cb9

[22:48] <jnthn> wtf...taking a type. Not an array.

[22:51] *** icwiener_ left
[22:52] <dalek> 6model: d14ea75 | jonathan++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[22:52] <dalek> 6model: [dotnet] Kill unbox_int in favor of the generic unbox, and add temp_int in a couple of places where it was needed.

[22:52] <dalek> 6model: review: https://github.com/jnthn/6model/commit/d14ea7520a

[23:03] <sorear> good * #perl6

[23:03] <sorear> \o/ jnthn!

[23:07] <jnthn> sorear: o/ :)

[23:07] * jnthn has time AND mental capacity to commit again :)

[23:13] <sorear> jnthn: suppose you want to access System.Console in mscorlib from Perl6.  What use statement will you write?

[23:14] *** starcoder joined
[23:16] <sjohnson> hi!

[23:16] <jnthn> use System:from<dotnet>; I guess

[23:16] <jnthn> Oh, wait...

[23:17] <jnthn> use System::Console:from<dotnet>; # maybe...

[23:17] *** sji left
[23:17] <jnthn> Yeah, that's a class

[23:19] <jnthn> So I guess the latter.

[23:19] <sorear> Why does it being a class matter?

[23:19] <jnthn> sorear: I dunno what I was thinking before... :)

[23:20] <jnthn> System is just a namespace though so...guess it's more machinary to import all the stuff it wants to export.

[23:20] <jnthn> But do-able too I guess.

[23:20] <diakopter> I say   :from<cts>  or  :from<clr>

[23:20] <jnthn> I imagine most would work.

[23:20] <jnthn> er

[23:20] <jnthn> both

[23:20] <jnthn> Just the first would get you a bunch more things imported.

[23:21] <jnthn> not cts

[23:21] <diakopter> well, namespaces are spread out across tons of assemblies

[23:21] <jnthn> clr maybe though :)

[23:21] <jnthn> diakopter: Yeah...true.

[23:21] <jnthn> That makes things...tricky to know what file we want.

[23:21] <diakopter> since those are compile-time resolved

[23:22] <jnthn> *nod*

[23:22] <diakopter> it really should be by assembly name, or assembly+namespace

[23:22] <diakopter> or assembly+class

[23:22] <diakopter> (all three options)

[23:22] <dalek> 6model: 14268c6 | jonathan++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[23:22] <dalek> 6model: [dotnet] Eliminate a use of directly calling unbox_str in favor of the unbox sub.

[23:22] <dalek> 6model: review: https://github.com/jnthn/6model/commit/14268c6708

[23:23] <dalek> 6model: 06ce121 | diakopter++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[23:23] <dalek> 6model: Merge branch 'master' of github.com:jnthn/6model

[23:23] <dalek> 6model: review: https://github.com/jnthn/6model/commit/06ce121137

[23:24] <diakopter> blast; it missed/masked its other commit

[23:24] <diakopter> its other parent commit

[23:24] <jnthn> wtf. :/

[23:24] <diakopter> maybe that dalek plugin could be taught to recognize such diakopter-- screwups

[23:24] <jnthn> diakopter: Oddly, it looks fine in the github commit log.

[23:24] *** s0v left
[23:25] <diakopter> oh, weird.

[23:25] <diakopter> ok, that's it, time to upgrade TortoiseGit

[23:26] <jnthn> diakopter: fwiw, a friend recently talked highly of http://code.google.com/p/gitextensions/ in comparrison to TortoiseGit.

[23:33] <Tene> "Git Extensions is the only graphical user interface for Git that allows you control Git without using the commandline. It comes with a manual and video tutorials to get you started quickly." -- really?  the only one?

[23:33] <jnthn> OH RLY?

[23:34] <jnthn> Tene: Yeah, I thought that was rather over-stepping the mark-etting.

[23:34] *** timbunce left
[23:34] *** y3llow is now known as y3llow_

[23:34] *** y3llow_ is now known as y3llow

[23:35] <Tene> Either they're ignorant of the alternatives, in which case I wouldn't trust them to be well-enough-informed to trust their software, or they're just... lying?  I'm not sure why?

[23:35] <dalek> 6model: a5559d5 | jonathan++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[23:35] <dalek> 6model: [dotnet] Eliminate some explcit unbox_int calls in favor of the unbox sub. Less code...yay.

[23:35] <dalek> 6model: review: https://github.com/jnthn/6model/commit/a5559d5e47

[23:35] <Tene> Or I guess they could have some much-more-specific meaning in mind, in which case it's just poor communication, i guess.

[23:36] *** y3llow is now known as y3llow_

[23:37] *** y3llow_ is now known as y3llow

[23:38] *** s0v joined
[23:41] <diakopter> std: /(?:a)/

[23:41] <p6eval> std a194beb: OUTPUT«[31m===[0mSORRY![31m===[0m␤Quantifier quantifies nothing at /tmp/USvWlnybA_ line 1:␤------> [32m/(?:[33m⏏[31ma)/[0m␤Check failed␤FAILED 00:01 119m␤»

[23:41] <diakopter> that error message could be splendified

[23:43] <sorear> What I don't want to do is to qx{ monop ... } in the compiler

[23:43] <sorear> at least, not in the short term

[23:43] <sorear> once the compiler itself is running on the CLR, I can reflect all I want

[23:44] <jnthn> TimToady: I can't find <?[{]> style things documented in S05.

[23:45] <jnthn> TimToady: Is it just falling out of <? being lookahead and [...] as a char class?

[23:45] <sorear> Yes

[23:45] <jnthn> OK, thanks.

[23:46] *** y3llow left
[23:47] *** y3llow joined
[23:50] *** wamba left
[23:52] *** bitter16 joined
[23:52] *** wamba joined
[23:58] *** mberends joined
