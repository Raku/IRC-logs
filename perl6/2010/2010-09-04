[00:00] <masak> rakudo: multi infix:<->(Str $a, Str $b) { $a.subst($b, "") }; say "Perl 6 sucks rocks" - "sucks "

[00:00] <p6eval> rakudo 52f9ea: OUTPUT«Perl 6 rocks␤»

[00:00] <masak> ingy: ^^

[00:00] <masak> rakudo: multi infix:<->(Str $a, Str $b) { $a.subst($b, "") }; say 44 - 2

[00:00] <p6eval> rakudo 52f9ea: OUTPUT«42␤»

[00:00] <masak> \o/

[00:01] <masak> hugme: hug whoever fixed that

[00:01] * hugme hugs whoever

[00:01] <masonkramer> how does @urn.pick(*, :replace) work?  What is :replace?

[00:02] <masak> masonkramer: the combination of * and :replace will give you an infinite sequence of randomly picked elements.

[00:02] <masonkramer> I get what it does, but what is :replace?

[00:02] <masak> masonkramer: :replace means that there's the option of getting an element that was already picked.

[00:02] <masonkramer> I mean, what type of thing is it?

[00:02] <masak> oh.

[00:02] <masonkramer> I know what it means, but what do I call it?

[00:02] <masak> it's called a named argument.

[00:03] <masak> it's sugar for :replace(Bool::True)

[00:03] <masonkramer> ahhh

[00:03] <masonkramer> there we go

[00:03] <masak> sometimes, especially in the case of operators, we tend to call them "adverbs".

[00:04] <masonkramer> I can't figure out what the difference between an operator and a method is, is there a clear definition?

[00:04] <masonkramer> you're calling .pick an operator, but it looks like a method to me

[00:04] <masak> no, it's a method.

[00:05] <masonkramer> ok

[00:05] <masak> I call things like + and ~~ and , operators.

[00:05] <masonkramer> but those are functions with fancy syntax

[00:05] <masak> though it's worth mentioning that in Perl 6... right.

[00:05] <masak> either they're subs or they're methods.

[00:06] <masak> postfix operators tend to be methods.

[00:06] <masonkramer> a method is what?  A function that has $self in socpe?

[00:06] <masak> (though I admit I still haven't seen the real system there. I often get it wrong)

[00:06] <masak> masonkramer: a method is a separate thing in Perl 6.

[00:07] <masak> rakudo: class A { our sub foo() { say "sub foo" }; method foo { say "method foo" }; A::foo; A.new.foo

[00:07] <p6eval> rakudo 52f9ea: OUTPUT«===SORRY!===␤Unable to parse blockoid, couldn't find final '}' at line 22␤»

[00:07] <masak> rakudo: class A { our sub foo() { say "sub foo" }; method foo { say "method foo" } }; A::foo; A.new.foo

[00:07] <p6eval> rakudo 52f9ea: OUTPUT«sub foo␤method foo␤»

[00:07] <masonkramer> that's not going to be confusing

[00:08] <masonkramer> ;) 

[00:08] <masonkramer> Just kidding, it's even more confusing in Perl 5

[00:08] <masak> it has been known to confuse some people, yes.

[00:09] <masak> I'm only starting to see the real wins with having a clean separation.

[00:09] <masonkramer> what does method have in there?  $ stands in for $self?

[00:09] <masak> every method has a 'self'

[00:10] <masak> rakudo: class A { has $.x; method foo { say self.x } }; A.new(:x(42)).foo

[00:10] <p6eval> rakudo 52f9ea: OUTPUT«42␤»

[00:10] <masonkramer> rakudo: class A { method foo { say self } }

[00:10] <p6eval> rakudo 52f9ea:  ( no output )

[00:10] <masonkramer> rakudo: class A { method foo { say self } }; A.new.foo

[00:10] <p6eval> rakudo 52f9ea: OUTPUT«A()<0x559fce0>␤»

[00:11] <masonkramer> rakudo: class A { has $.x; method foo { say self.x } }; A.new(:x).foo

[00:11] <p6eval> rakudo 52f9ea: OUTPUT«1␤»

[00:12] <masak> it says '1', but it should say 'True'

[00:12] <masak> (according to the latest spec on enums)

[00:12] <masak> rakudo: class A { has $.x; method foo { say self.x.perl } }; A.new(:x).foo

[00:12] <p6eval> rakudo 52f9ea: OUTPUT«Bool::True␤»

[00:13] <masonkramer> I see .perl a lot, is that the p6 equivalent of Data::Dumper?

[00:13] <masak> yes.

[00:13] <masak> built in for your convenience.

[00:14] <masonkramer> beautiful, beautiful

[00:15] <masonkramer> my programs already define a UNIVERSAL::Dump which dumps $self 

[00:15] <masonkramer> but I always feel bad about doing things like that, for the obvious reason of namespace pollution; it should be built in

[00:15] *** svetlins_ left
[00:16] *** svetlins_ joined
[00:17] *** sftp left
[00:26] *** justatheory left
[00:26] *** svetlins_ left
[00:42] <perigrin> masonkramer: Moose::Object implements one too

[00:43] <perigrin> so you are at least in good company with p6 and moose.

[00:43] *** svetlins_ joined
[00:44] <masak> perigrin: I didn't know that. cool.

[00:44] <masonkramer> very nifty

[00:44] <perigrin> masak: yeah it has since forever.

[00:45] <perigrin> confess $obj->dump; is a *very* common debugging idiom in my world.

[00:46] <perigrin> I'm not sure what the p6 form of confess is/will be ... but $obj.perl is a nice feature :)

[00:46] <masak> die

[00:46] *** svetlins_ left
[00:46] <masonkramer> $obj.explode

[00:47] <masak> I don't know how to die in Rakudo *without* the backtrace. I want that sometimes.

[00:47] <gfldex> kill -9 ?

[00:47] <perigrin> yeah ... when the masses arrive they'll do nothing but complain 

[00:47] *** whiteknight left
[00:47] <perigrin> it is one of the largest complaints about moose from people learning it

[00:48] <masak> what is?

[00:48] <perigrin> 300 lines of "garbage" when you trip an error

[00:49] <perigrin> catalyst can get kind of ... intense ... with it's debugging output ... if you trip something in say a runtime trait used in a controller that inherits from a controller ... 

[00:53] *** Psyche^ joined
[00:54] <tylercurtis> masak: maybe there should be a :quietly adverb for &die.

[00:55] <tylercurtis> Or maybe :concisely would be more fitting.

[00:55] <masak> oh, I wouldn't mind the error message as such.

[00:55] *** Psyche^ is now known as Patterner

[00:55] <masak> but the stack trace is sometimes just not needed.

[00:55] <masak> applications like pls are perhaps the most obvious example.

[00:55] <masak> right now I do &say, then &exit.

[00:56] <masak> or &warn, then &exit.

[00:56] <masak> or &note, then &exit :)

[00:56] <gfldex> die :quietly

[00:57] <gfldex> looks about right :->

[00:57] <tylercurtis> :quietly seems more like something that would totally silence the error message, though.

[00:57] * hugme hugs tylercurtis, good vi(m) user!

[00:58] *** hercynium left
[00:58] <masak> hugme: that was a misfire, mind you.

[00:58] <gfldex> :q

[00:58] * hugme hugs gfldex, good vi(m) user!

[00:58] <gfldex> :->

[00:59] <perigrin> tylercurtis: no :silently would silence the error message ... 

[00:59] <gfldex> i learned a new trick and therefor can go to bed now

[00:59] <perigrin> :quietly would just muffle it

[00:59] * hugme hugs perigrin, good vi(m) user!

[00:59] <gfldex> good * #perl6

[01:04] *** svetlins_ joined
[01:04] <masak> o/

[01:05] <sorear> really :concisely belongs on try, or maybe as a contextual

[01:05] <sorear> I hate confess; -MCarp::Always

[01:06] <sorear> the call site is the wrong place to put knowledge of how much verbosity is needed

[01:06] *** svetlins_ left
[01:06] <perigrin> yes

[01:06] <perigrin> try { ... } catch :loudly { ... }

[01:07] <masak> in the case of a die outside of any try, there wouldn't be a try to peg the adverb on.

[01:08] <perigrin> this is where my knowledge of exception in Perl6 and Rakudo falls down entirely

[01:09] <masak> perigrin: there's some info in S04.

[01:09] <masak> perigrin: generally, CATCH blocks appear inside the try blocks.

[01:10] * perigrin has to wait for November before he can multitask and look up S04 without losing SSH

[01:10] <perigrin> apple--

[01:10] <perigrin> I will however check in a bit

[01:11] *** MarcoS joined
[01:11] <MarcoS> Totally new here... Is it possible to install perl on Vista?  

[01:12] <masak> there is a win32 installer for Rakudo Star somewhere.

[01:13] <MarcoS> OK, thanks!

[01:13] *** justatheory joined
[01:13] <masak> here. http://github.com/rakudo/star/downloads

[01:13] <masak> the .msi file in the middle.

[01:15] <masak> nom &

[01:15] *** masak left
[01:16] <MarcoS> ..getting it now...

[01:17] <sorear> perigrin: er... screen on the far side of ssh?

[01:21] *** MarcoS left
[01:23] *** svetlins_ joined
[01:27] *** Italian_Plumber left
[01:41] <Util> Instead of writing `for 0..@array.end -> $i {...}`, is there a convenience method on Array that returns a Range object equiv to `0..@array.end`? If not, should there be?

[01:41] <Util> Oh, @array.keys. Doh!

[01:49] *** risou joined
[01:49] *** svetlins_ left
[01:50] *** jhuni joined
[01:51] <tylercurtis> Util: and if you want to get at the item at index $i, too, "for @array.kv -> $i, $v {...}"

[01:53] <Util> tylercurtis: Thanks! I actually showed this off at Atlanta.pm this month, and had already forgotten it.

[01:57] <lue> hai again o/

[02:04] *** araujo joined
[02:04] <ingy> goto 17:00

[02:06] <ingy> phenny: tell masak That's (the multi redef of <->) so cool!

[02:06] <phenny> ingy: I'll pass that on when masak is around.

[02:06] <ingy> thanks

[02:06] *** svetlins_ joined
[02:13] *** _jaldhar left
[02:15] *** Schwern joined
[02:23] *** literal joined
[02:27] *** bjarneh joined
[02:36] *** risou left
[02:36] <perigrin> sorear: yes

[02:40] *** risou joined
[02:53] *** risou left
[03:18] *** Chillance left
[03:25] *** masak joined
[03:26] <masak> ingy: I know! Perl 6 <del>sucks</del> rocks!

[03:26] <phenny> masak: 02:06Z <ingy> tell masak That's (the multi redef of <->) so cool!

[03:29] *** tylercurtis left
[03:29] <masak> today on Twitter we find something as unusual as a reformed Perl6/DNF-memer: http://twitter.com/batchout/status/22925307636

[03:29] <masak> and other examples of people generally getting it: http://twitter.com/outZider/status/22925279162

[03:34] <lue> I'm not a real person!? :*(

[03:35] <masak> lue: I sincerely believe you are.

[03:35] <masak> note that e didn't write '*only* real people are playing...'

[03:35] <masak> or '*all* real people are playing...'

[03:36] <masak> he's basically just pointing out that the intersection of the two sets 'real people' and 'people who are playing a prerelease of Duke Nukem Forever' is non-empty.

[03:37] <masak> lue: oh by the way, I've been enjoying watching your progress with the <A::B> feature over the past few days.

[03:38] <masak> lue: I recognize the steps you've been going through from when I was discovering Rakudo back in 2008.

[03:39] <lue> .proof(real people = duke nukem. me = !(duke nukem), ∴ me = !(real people). QED at my expense)

[03:40] <masak> I stand in awe at your use of the Unicode THEREFORE symbol.

[03:41] <masak> I would advise, however, a slight refresher on the meaning of the assignment symbol, and its various uses.

[03:42] <lue> I think all hope of me making <A::B> work was murdered when I found out there would be PIR involved on top of the parsing business. :)

[03:42] <masak> lue: luckily, you got pmichaud to promise to do it for you.

[03:42] <lue> rakudo: say $_.WHAT

[03:42] <p6eval> rakudo 52f9ea: OUTPUT«Any()␤»

[03:43] <masak> lue: are you aware of the LHF exchange program over at RT? :)

[03:43] *** _jaldhar joined
[03:44] <lue> rakudo: use MONKEY_TYPING; augment Any { method oO($text) { ... }; }; .oO(I invented a useless method that behaves like a comment!)

[03:44] <p6eval> rakudo 52f9ea: OUTPUT«===SORRY!===␤In "augment" declaration, typename Any must be predeclared (or marked as declarative with :: prefix) at line 22, near " { method "␤»

[03:44] <masak> lue: text still needs to be quoted.

[03:45] <masak> lue: you're not creating a new sublanguage, just doing a normal method signature.

[03:46] <lue> Eh, it was a quick attempt to let you use .oO() thought bubbles. .oO(P6::Acme::Thoughts ?)

[03:46] <masak> if you want to get rid of the quotes, you need to make .oO() a quote operator.

[03:46] <masak> see S02 and S03.

[03:47] <masak> specifically, S02:3699.

[03:47] <lue> I would much rather implement <A::B> myself, but I think we all learned today I wouldn't be able to do so anytime soon :)

[03:48] <masak> lue: right. that's why I suggested the LHF exchange program.

[03:48] <masak> it might be a simple way for you to show your gratitude to pmichaud++ for eventually implementing your feature.

[03:48] <masak> not that that need be your driving force, of course.

[03:48] <masak> you could do it just because it's fun!

[03:51] <masak> lue: http://rt.perl.org/rt3/Search/Results.html?Query=(Subject%20LIKE%20'lhf')%20AND%20Status%20!%3D%20'resolved'

[03:52] <masak> lue: I'll even review and apply any patch you write.

[03:53] <lue> I believe I already have a search ready for LHF. Let me check

[04:00] *** lue joined
[04:00] <lue> don't you love random unexpected shutdowns of your 12-year-old laptop ?

[04:04] *** JimmyZ joined
[04:10] <JimmyZ> rakudo: say ~(my @Fibonacci := (0, 1, { * + * } ... 900));

[04:10] <p6eval> rakudo 52f9ea: OUTPUT«0 1␤»

[04:10] <lue> rakudo: say 10000000[1]

[04:10] <p6eval> rakudo 52f9ea:  ( no output )

[04:11] <JimmyZ> rakudo: say ~(my @Fibonacci := (0, 1, -> $a, $b { $a + $b } ... 900));

[04:11] <p6eval> rakudo 52f9ea: OUTPUT«0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610␤»

[04:12] <masak> 卓明亮! \o/

[04:12] *** jimi_hendrix left
[04:13] <masak> 我看你读过一些博客文章。 哈哈

[04:14] <lue> .oO(#perl6 reminds me almost every day to start learning japanese)

[04:14] <masak> for the record, those are hanzi, not kanji :)

[04:15] <lue> the 1000000[1] error message only displays in the REPL, it's weird.

[04:18] <lue> Could it be because the error mesage is invoked using fail ?

[04:18] <masak> yes.

[04:19] <JimmyZ> masak: 是啊

[04:20] <JimmyZ> masak: why { * + * } doesn't work?

[04:20] <masak> JimmyZ: because it's a closure in a closure.

[04:20] <masak> JimmyZ: * + * already means { $^a + $^b }

[04:20] <JimmyZ> yes

[04:20] <masak> with the extra curly braces, you get two levels of curlies. and it doesn't work.

[04:21] <JimmyZ> rakudo: say ~(my @Fibonacci := (0, 1, * + * ... 900));

[04:21] <p6eval> rakudo 52f9ea: OUTPUT«0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610␤»

[04:22] <JimmyZ> masak: my fault :0

[04:22] <masak> no sweat. now you know :)

[04:23] <JimmyZ> masak: yes, thanks ;)

[04:24] <\xF0> nice

[04:25] * masak really likes Haskell's </> operator for FilePath. http://www.haskell.org/ghc/docs/6.6.1/html/libraries/filepath/System-FilePath-Posix.html#v%3A%3C%2F%3E

[04:25] <masak> maybe we should steal it.

[04:25] <JimmyZ> rakudo: sub infix:<+-*/>($a, $b)  { ( { $a + $b }, { $a - $b }, { $a * $b }, { $a / $b } ).pick(1) }; say 5+-*/2;

[04:26] <p6eval> rakudo 52f9ea: OUTPUT«_block162␤»

[04:27] <masak> rakudo: sub infix:<+-*/>($a, $b)  { ( { $a + $b }, { $a - $b }, { $a * $b }, { $a / $b } ).pick(1).() }; say 5+-*/2;

[04:27] <p6eval> rakudo 52f9ea: OUTPUT«10␤»

[04:27] <masak> \o/

[04:27] <masak> you have to call the block before you return it.

[04:28] <masak> s/ it//

[04:28] <JimmyZ> 是的，我刚刚发现了 ， 呵呵

[04:28] <masak> :)

[04:30] <JimmyZ> 我刚刚在把perl6 介绍给同事

[04:30] <masak> nice! what did they think?

[04:31] *** envi^home joined
[04:31] <JimmyZ> 他们感觉非常强大和简单

[04:31] <JimmyZ> 很有兴趣，呵呵

[04:31] <masak> excellent.

[04:32] <JimmyZ> rakudo: sub infix:<+-*/>($a, $b) { ( { $a + $b }, { $a - $b }, { $a * $b }, { $a / $b } )>>.() }; say 5+-*/2;

[04:32] <masak> JimmyZ: you are our Chinese representative. :)

[04:32] <p6eval> rakudo 52f9ea: OUTPUT«Tried to find null name␤  in 'infix:<+-*/>' at line 22:/tmp/lAzbNODIkJ␤  in main program body at line 22:/tmp/lAzbNODIkJ␤»

[04:32] <JimmyZ> 呵呵

[04:32] <masak> 您是我们在中国内地的代表。

[04:32] <JimmyZ> Thanks

[04:32] <masak> our pleasure :)

[04:32] <JimmyZ> 这个代码有什么错误？

[04:33] *** isBEKaml joined
[04:33] <masak> I don't know. It's related to the >>.(), to be sure.

[04:33] <JimmyZ> yes

[04:33] <masak> but I'm not sure if it should be allowed or no.

[04:34] <masak> rakudo: say ( { 1 + 1 }, { 2 + 2 } )>>.()

[04:34] <p6eval> rakudo 52f9ea: OUTPUT«Tried to find null name␤  in main program body at line 22:/tmp/ogz7FsNuwd␤»

[04:34] <masak> rakudo: say ( { 1 + 1 }, { 2 + 2 } )>>()

[04:34] <p6eval> rakudo 52f9ea: OUTPUT«Tried to find null name␤  in main program body at line 22:/tmp/ITMWg1XBhk␤»

[04:34] * masak submits rakudobug

[04:34] <JimmyZ> rakudo: say ( { 1 + 1 }, { 2 + 2 } ).>>.()

[04:34] <p6eval> rakudo 52f9ea: OUTPUT«===SORRY!===␤Confused at line 22, near "say ( { 1 "␤»

[04:35] <masak> not dot allowed before >> :)

[04:35] <JimmyZ> alpha: say ( { 1 + 1 }, { 2 + 2 } ).>>.()

[04:35] <p6eval> alpha 30e0ed: OUTPUT«Can only transform an Object to p6opaque␤in Main (file src/gen_setting.pm, line 324)␤»

[04:35] <JimmyZ> alpha: say ( 1,2 ).>>.say

[04:35] <p6eval> alpha 30e0ed: OUTPUT«1␤2␤11␤»

[04:35] <masak> huh.

[04:35] <JimmyZ> It's allowed 

[04:35] <JimmyZ> by STD

[04:35] <masak> I stand corrected.

[04:36] <JimmyZ> std: say ( 1,2 ).>>.say

[04:36] <p6eval> std 32123: OUTPUT«ok 00:01 118m␤»

[04:36] * masak submits rakudobug

[04:36] <isBEKaml> std: say ( { 1 + 1 }, { 2 + 2 } )>>.()

[04:36] <p6eval> std 32123: OUTPUT«ok 00:01 118m␤»

[04:36] <isBEKaml> OHHAI,p6!

[04:37] <JimmyZ> It's easy to fix, I had fixed it in alpha :)

[04:37] <masak> isBEKaml: hi! \o/

[04:37] <isBEKaml> masak! good release? 

[04:38] <masak> of Yapsi? yes, it was the easiest one so far, I think :)

[04:38] <masak> soon I'll be ready to make someone else try to be the release manager.

[04:38] <isBEKaml> :)

[04:38] <isBEKaml> Yapsi++

[04:38] <masak> the next big feature up ahead is definitely subs.

[04:38] <masak> a stepping-stone to that is first-class closures.

[04:39] <isBEKaml> yes. I can see that. for my part, I'm looking to get some rudimentary expression eval working. 

[04:39] <masak> when we have subs, we can start adding operators the way they're supposed to be added.

[04:39] <masak> I'm reluctant to add in a lot of ops before that...

[04:40] <isBEKaml> not a lot, I said "rudimentary"

[04:40] <masak> :)

[04:40] <masak> also, I'd like to start exploring switching to STD as the frontend.

[04:40] <JimmyZ> that's a great idea :)

[04:40] <isBEKaml> yes, I looked at STD, then thought "we have a good syntax checker, why do we have to go all the way just to check syntax ?"

[04:41] <masak> I meant using STD to get the parse tree.

[04:41] <masak> (and better error messages, and a lot of error checking for free)

[04:41] <isBEKaml> I don't know we can do that. Didn't check fully. That thing was huge. ;)

[04:42] <masak> isBEKaml: there's a script called viv that'll give you a parse tree already.

[04:42] <isBEKaml> (almost hung up my editor until I disabled syntax and language features)

[04:42] <masak> we can use the same mechanism viv uses to get the parse tree.

[04:43] <masak> the big question is which format to use to deserialize it into Yapsi.

[04:43] <lue> STD spits out an AST, right? [in which case it's perfect for the beginnings of a gcc compiler]

[04:43] <isBEKaml> the answer would be "Whatever's comfortable. " knowing full well Whatever's a term here. :)

[04:43] <masak> lue: depends if you make a difference between "parse tree" and "AST".

[04:44] <isBEKaml> lue: I made that mistake once. :)

[04:44] <masak> isBEKaml: I think optimizing for ease-of-reading on the Perl 6 side is pretty sane. it'll be a big performance hit no matter what.

[04:47] <isBEKaml> masak: performance hit? as in, everytime we have to parse STD first?

[04:48] <masak> as in, there'll be a bottleneck shuttling the parse tree (in whatever form) from Perl 5 to Yapsi.

[04:49] <isBEKaml> hm, I see that now. 

[04:49] <masak> rakudo: say ( 1,2 ).>>.say

[04:49] <p6eval> rakudo 52f9ea: OUTPUT«===SORRY!===␤Confused at line 22, near "say ( 1,2 "␤»

[04:49] <masak> especially if we read things using a grammar.

[04:50] <isBEKaml> I already saw some slowness in blocks evaluation when doing infinite loop structure. 

[04:50] *** mfollett joined
[04:50] <masak> yes, Yapsi is already a bit sluggish.

[04:50] <isBEKaml> it was just going on creating blocks. not just with 'loop' but with 'while', 'until' everything. Creating blocks seems to be slow. 

[04:51] <masak> huh.

[04:51] <masak> there are a few linear scans in there; one in block calling and one in gotos.

[04:52] <isBEKaml> consider this: my $a = 3; while --$a { say 42 }; loop { say 24 }

[04:52] <masak> I've just been to lazy to write faster variants. but a single pre-scan + hash population might speed things up considerably, now that I think about it.

[04:52] <masak> and it's LHF. :)

[04:52] <isBEKaml> once that's parsed by yapsi, it'd print 42 twice and go doing the 24 prints infinitely. I'd expect it be faster from the first print. 

[04:53] <masak> yapsi: my $a = 3; while --$a { say 42 }; loop { say 24 }

[04:53] <p6eval> yapsi:  ( no output )

[04:53] <masak> :/

[04:53] <isBEKaml> loop isn't in. 

[04:53] <masak> oh right.

[04:53] * masak does 'while 1' locally

[04:56] <masak> it does about 2 iterations per second over here :)

[04:56] <isBEKaml> 1 per second on my machine. 

[04:58] <masak> lue: I just saw your patch on the .[1] ticket. thing is, I think it should be a 'fail', not a 'die'. though there's something wrong with either p6eval or with Rakudo's &say function.

[05:01] * isBEKaml looks at viv

[05:16] <lue> I'm trying to find the difference between fail and die, but google's stupid search engine won't let me :/

[05:17] <masak> you might try the spec instead.

[05:18] <lue> Well, I tend to use the web version of the spec for convenience, and it uses google... [I'm trying straight from the repo now]

[05:19] *** mfollett left
[05:22] <lue> afk

[05:25] <sorear> someone said viv?

[05:26] <masak> yes. in the context of Yapsi.

[05:26] <masak> the big question mark right now is how to marshal data from STD to Yapsi efficiently.

[05:27] <sorear> I recommend writing a JSON::XS clone for Rakudo/Parrot

[05:28] <masak> does such a beast exist?

[05:28] <masak> it sounds like a fine idea, fwiw.

[05:28] *** Schwern left
[05:31] <sorear> masak: definitely not at the Rakudo level; the best we have is JSON::Tiny, and it uses nqp-rx so will be a lot slower than a hypothetical C version

[05:32] *** alester joined
[05:32] <masak> sorear: aye.

[05:32] <sorear> there might be something in the shadowy void of parrot/runtime/library

[05:32] <masak> sorear: I will investigate this venue further. thank you.

[05:32] <masak> there seems to be a JSON.pir in there, yes.

[05:33] *** constant left
[05:33] <masak> and it runs!

[05:33] <masak> \o/

[05:34] <sorear> compilers/data_json is the corresponding reader

[05:34] <sorear> it seems to use PGE or NQP-rx, though

[05:34] <masak> oh.

[05:34] <sorear> <?PGE::util::die ''> # seems to be a tell

[05:35] <masak> aye, it uses PGE.

[05:35] <sorear> how is PGE for speed?

[05:36] <masak> pretty OK.

[05:36] *** constant joined
[05:36] <masak> might be a premature optimization to write something in PIR and expect it to be faster than PGE.

[05:36] *** constant left
[05:36] *** constant joined
[05:36] <masak> I doubt one'd get many percent speedup from that.

[05:37] <sorear> does PGE even work?

[05:38] <sorear> I don't recall it having been touched since the last two complete Parrot compatibility breaks

[05:38] <masak> I don't know. haven't tried to run it for a while.

[05:38] <masak> but I'd expect it to, given that it has tests.

[05:38] <sorear> (symmetric PCC and immutable strings)

[05:38] <masak> nod

[05:38] * masak tries to run the PGE tests

[05:39] <masak> make library_tests, apparently

[05:39] *** azert0x left
[05:39] <masak> yep, tests still pass.

[05:40] *** patch left
[05:41] *** patch joined
[05:55] *** cotto left
[05:56] *** JimmyZ left
[06:07] <masak> perl6: say substr("camel", 0|1, 2&3)

[06:07] <p6eval> rakudo 52f9ea: OUTPUT«all(any("ca", "am"), any("cam", "ame"))␤»

[06:07] <p6eval> ..pugs: OUTPUT«all(VJunc any(VRef <Scalar::Proxy:0x2abd72eb26f1>,VRef <Scalar::Proxy:0x2abd72eb85f9>),VJunc any(VRef <Scalar::Proxy:0x2abd72eb6131>,VRef <Scalar::Proxy:0x2abd72eb9721>))␤»

[06:07] <masak> ♥

[06:08] <masak> Rakudo++

[06:08] *** alester left
[06:20] *** Ross joined
[06:28] *** Alias_ left
[06:32] <isBEKaml> masak: PGE? 

[06:32] <isBEKaml> I'd be rather happy if I don't have to install a lot of deps for viv. ;)

[06:33] <masak> isBEKaml: it's the previous-generation grammar engine for Rakudo. it ships with Parrot.

[06:33] <masak> and no, I don't think we'll be using PGE. that feels a bit silly :)

[06:34] <isBEKaml> why? outdated grammar rules? :)

[06:35] <masak> outdated grammar engine.

[06:35] <masak> but I'd much rather employ something like JSON::XS, like sorear said.

[06:36] <isBEKaml> the json.pbc in parrot?

[06:37] <sorear> the json.pbc in parrot is a json emitter, not a json reader

[06:37] <sorear> the data_json.pbc in parrot's languages folder is a PGE-based json reader

[06:37] <isBEKaml> I see. 

[06:45] *** xinming_ is now known as xinming

[06:50] *** molaf joined
[07:04] *** masak left
[07:12] *** isBEKaml left
[07:35] *** chips joined
[07:37] *** chips left
[07:38] *** Elvin joined
[07:38] <Elvin> anyone have Perl free software?

[07:38] *** Elvin left
[07:40] *** xinming left
[07:40] *** xinming joined
[07:40] *** Su-Shee joined
[07:40] <Su-Shee> good morning.

[07:40] <araujo> perl ... free software ...

[07:55] *** justatheory left
[07:56] *** Guest23195 joined
[07:59] *** Ross left
[08:00] *** svetlins_ left
[08:01] *** tadzik joined
[08:01] <tadzik> oh hai

[08:08] *** karb joined
[08:08] *** wamba joined
[08:12] *** svetlins_ joined
[08:13] *** snearch joined
[08:23] *** Mowah joined
[08:33] *** Ross joined
[08:38] <Quadrescence> anyone have Perl free software?

[08:40] <sorear> Parse error

[08:40] <tadzik> what do you mean? 

[08:40] <tadzik> you mean do we have free software in Perl? Sure thing

[08:45] *** svetlins_ left
[08:45] <_sri> in soviet russia Perl software frees you!

[08:50] <sorear> what is correct test form for when you commit something on purpose that breaks half the testsuite?

[08:50] *** total joined
[08:51] <total> how to learn perl 6 ?

[08:51] <sorear> the book would not be a bad start

[08:52] <sorear> http://github.com/downloads/perl6/book/2010.08.a4.pdf

[08:52] <total> thx for reply...but i cant find any book abt perl6 

[08:53] *** gfx joined
[08:53] <total> dowloading

[08:53] <total> ...

[08:53] <total> thx...

[08:53] *** Siddy is now known as Trashlord

[08:53] <total> the best os for learning perl 6 is ?

[08:53] <total> i m totally noobie...

[08:54] <total> linux?

[08:54] <sorear> you should not let language dictate your choice of OS

[08:54] <sorear> unless you're completely new to computers, in which case, why are you diving right into programming?

[08:55] <total> i m really interest in computing..

[08:55] <total> but i dunno where to start ...

[08:56] <total> i m a student in civil...so....

[08:56] <total> as hobby as weel...

[08:56] <sorear> people in this channel use Linux, Mac OS X, and Windows

[08:56] <sorear> at least

[08:56] <sorear> so it's probably no object

[08:56] <moritz_> good morning

[08:57] <sorear> good morning moritz_

[08:57] <total> hi..

[08:57] <total> i using windows...

[08:57] <total> i had install the rakudo star...

[08:58] <total> its sth like terminal..???

[08:58] <total> right ?

[08:59] <moritz_> well, you have to open a terminal window to run the perl6.exe binary

[09:01] <total> i dowload from github...http://github.com/rakudo/star/downloads/

[09:01] <total> the msi version...

[09:01] *** aloha left
[09:02] *** svetlins_ joined
[09:02] *** bacek left
[09:04] *** total left
[09:08] *** ruiwk joined
[09:08] <tadzik> yay newcomers

[09:08] <ruiwk> hi  

[09:09] <ruiwk> i am new learner in programming world

[09:09] <tadzik> yeah, we can recognize you :)

[09:09] <ruiwk> perl 6 is the 1st languague i hope to learn ..

[09:09] <ruiwk> ha

[09:10] <tadzik> ruiwk: as you can probably see, the Rakudo Star msi is not really up to date, but I doubt it would matter to you as to the newcomer

[09:12] <ruiwk> will it better to use linux to learn perl6 ?

[09:12] <tadzik> In my humble opinion yes, but as sorear says, language shouldn't dictate your working environment

[09:12] <moritz_> most developers work on linux, you might get help easier

[09:13] <moritz_> (at least in here)

[09:13] <ruiwk> thx very much ...i will install 1 in the virtualbox..

[09:14] <ruiwk> u all always in this chat room ?

[09:14] <tadzik> usually

[09:15] <ruiwk> i m from malaysia..nice to meet u all.

[09:15] <sorear> it's a pretty nice international group here

[09:15] <sorear> there's always someone here, time zones and all

[09:15] <tadzik> people from various timezones, always someone to talk to :)

[09:15] * sorear US

[09:16] <ruiwk> u all student ?

[09:16] <sorear> many of us are, but I think it's a coincidence

[09:17] <sorear> programmers tend to be young, and fond of learning

[09:17] <karb> to make a positional parameter optional $pos?, to make a named parameter mandatory :$named!  .. Is there a reason to use two different character (?, !) for similar markups

[09:17] <dalek> niecza: cd6e7c1 | sorear++ | / (2 files):

[09:17] <dalek> niecza: A couple more steps toward nrx

[09:17] <dalek> niecza: review: http://github.com/sorear/niecza/commit/cd6e7c1883dd0eccc8c6ff2eee51a841df95d232

[09:17] <dalek> niecza: 76cd7d9 | sorear++ | lib/ (2 files):

[09:17] <dalek> niecza: [nrx] Kernel-level code for initial nrx

[09:17] <dalek> niecza: review: http://github.com/sorear/niecza/commit/76cd7d9098e590d41569ee0ec79af3583fd2f8a2

[09:17] <dalek> niecza: 568bfa6 | sorear++ | / (3 files):

[09:17] <dalek> niecza: [nrx] fix non-regex build aspects (TESTS NOW BROKEN)

[09:17] <dalek> niecza: review: http://github.com/sorear/niecza/commit/568bfa6c13a45b19a824fbf8f658826647f4c4ed

[09:17] <sorear> TimToady++ is most definitely not a student...

[09:19] <sorear> karb: unambiguity; ! and ? always force a specific meaning

[09:22] <ruiwk> *sorear how long u been learning programming ?

[09:23] *** M_o_C joined
[09:23] <ruiwk> & wat abt mac osx system ?

[09:23] *** aloha joined
[09:23] *** bacek joined
[09:24] <sorear> ruiwk: 12 years, give or take

[09:24] *** Trashlord left
[09:25] <sorear> mac osx is used by a couple people here, definitely not as many as windows or linux though

[09:25] * sorear leaves for the night

[09:26] *** Trashlord joined
[09:26] <ruiwk> k...i dowloading the ubuntu ...

[09:27] <ruiwk> thx for all yo information & opinions ya...

[09:31] <karb> sorear: ! stands for NOT. And ? stands for boolean context. With this viewpoint :$named! nots the optionality, but I dont seem to find $pos? intuitive. Maybe I'll get used to it :)

[09:32] <moritz_> karb: beware of context. Sometimes a question mark is just a question mark

[09:33] <moritz_> in particular your quoted meanings of ? and ! only apply when they stand in front of something

[09:34] <karb> got it. but would $pos! not be more consistent?

[09:35] <moritz_> if you understand it as human-language punctuation after a word, ? for optional and ! for mandatory make much more sense

[09:37] <ruiwk> moritz: hi

[09:37] <karb> i see it now

[09:38] *** dual left
[09:40] * moritz_ gone for breakfast

[09:44] *** snearch left
[09:53] *** cibs joined
[10:02] <tadzik> http://perl6advent.wordpress.com/2009/12/21/ why doesn't this code run properly in Rakudo?

[10:03] <tadzik> reminds me of my Config::INI grammar fsckup over some Rakudo update

[10:06] *** gfx left
[10:13] <x3nU> ą

[10:13] <x3nU> ;

[10:13] <x3nU> oops

[10:17] *** karb left
[10:21] *** envi^home left
[10:23] *** dual joined
[10:27] *** rgrau_ joined
[10:27] *** Trashlord left
[10:28] *** Trashlord joined
[10:29] <smash> mornin' everyone

[10:29] *** M_o_C left
[10:29] *** M_o_C joined
[10:30] <tadzik> hello

[10:38] *** snearch joined
[10:45] *** zulon joined
[10:48] *** rgrau_ left
[10:54] <ruiwk>  hi...tadzik

[10:57] <tadzik> hi

[10:59] *** M_o_C left
[11:03] *** wamba left
[11:03] <ruiwk> sorry..

[11:03] <ruiwk> how did u start to learn perl ?

[11:05] <tadzik> Perl 5 or Perl 6? :)

[11:05] <ruiwk> after done googleing...

[11:06] <ruiwk> state tat...perl 5 is different from perl 6...

[11:06] <tadzik> I see... no reason... for so many... dots

[11:10] <ruiwk> i just start learning...ha..my idol is geohotz...

[11:11] <ruiwk> i m so curious,,,why by doing some tweaks...the thing totally change..so interesting

[11:11] *** drbean joined
[11:14] *** meppl joined
[11:23] *** smash left
[11:42] *** TiMBuS joined
[11:44] *** masonkramer left
[11:44] *** masonkramer joined
[11:54] *** zulon left
[12:00] *** Axius joined
[12:00] *** araujo left
[12:01] *** araujo joined
[12:11] *** jhuni left
[12:13] *** whiteknight joined
[12:16] *** envi^home joined
[12:21] *** Axius left
[12:23] *** jimi_hendrix joined
[12:29] *** isBEKaml joined
[12:41] <Juerd> I'm killing svn.pugscode.org

[12:41] <Juerd> Whoever wants to look at it to make it behave and then maintain it, can perhaps get it back.

[12:41] *** ruiwk left
[12:45] *** ruiwk joined
[12:48] <ruiwk> how to install rakudo in ubuntu ...

[12:49] <isBEKaml> Juerd: The pugs repo is now fully migrated to git? Must have been some 3 days.

[12:49] <Juerd> isBEKaml: Sorry, I don't know.

[12:49] <Juerd> isBEKaml: I do know that svn was taking feather1's load over 20 again.

[12:50] <ruiwk> nvm...

[12:50] <ruiwk> thx for reply

[12:50] <Juerd> ruiwk: :)

[12:50] <Juerd> ruiwk: http://rakudo.org/how-to-get-rakudo does explain how to build from source

[12:51] <isBEKaml> Juerd: yeah, I saw that a few days but never knew that svn took that much load on the server. 

[12:51] <isBEKaml> s/days/& ago/

[12:51] <Juerd> isBEKaml: It's just horribly broken in some way, and nobody wants to figure out exactly how.

[12:52] <isBEKaml> Juerd: 20 is just pure agony for an svn admin server. 

[12:52] <ruiwk> i had dowload it...

[12:52] <isBEKaml> Juerd: I'd have liked to help but I'm clueless about svn admin servers. Sorry. :/

[12:53] <ruiwk> try d but dunno how to built from source...i m newbie...sorry

[12:53] <Juerd> ruiwk: How far did you get?

[12:53] <isBEKaml> ruiwk: have you untarred the downloaded tar file?

[12:54] <ruiwk> ya..

[12:54] <ruiwk> and follow the readme..

[12:54] <isBEKaml> ruiwk: did you download just rakudo or the parrot sources too? I mean, did you download Rakudo Star?

[12:55] <ruiwk> i dowload from here

[12:55] <ruiwk> http://github.com/rakudo/star/downloads/

[12:55] *** mberends joined
[12:55] <Juerd> Hoi mberends 

[12:55] <ruiwk> the tar.gz file 

[12:56] <mberends> hoi Juerd: I'm able to come to amsterdam.pm on Tuesday! :-)

[12:56] <Juerd> Yay!

[12:57] <Juerd> Hm, killing SVN and SVNWeb made feather1 absolutely idle

[12:57] <Juerd> It has 2 GB unused RAM now.

[12:57] <Juerd> (of 2.5)

[13:00] <isBEKaml> ruiwk: what do you have right now?

[13:00] <isBEKaml> ruiwk: you can just follow the README. that says everything you need to do to properly build your Rakudo Star distribution. 

[13:01] <ruiwk> i had done the aptitude install 

[13:01] <isBEKaml> ruiwk: Especially the section "Building Rakudo Star". Just type those instructions, you should be done. 

[13:01] <ruiwk> i shoud cd to the file 1st ?

[13:02] <isBEKaml> ruiwk: You have done the aptitude install? Well, that's good. But you don't exactly need libicu-dev package. Just go the directory where you have untarred the Rakudo Star package (cd command)

[13:02] <isBEKaml> and type those commands in the README. 

[13:02] <ruiwk> thx...i try again..

[13:04] <isBEKaml> ruiwk: You... are... welcome. (You don't need to type out those dots. You got sticky keys on your keyboard? ) :)

[13:05] <ruiwk> wow its running  alrd thx very much

[13:05] <ruiwk> ha sorry 

[13:05] <isBEKaml> ruiwk: that's good. Welcome to perl6! and enjoy your time programming in it. 

[13:05] <ruiwk> the dots is typing habbit

[13:06] <ruiwk> thx perl 6 the 1st programming lg i wanna learn after googleing

[13:07] <isBEKaml> ruiwk: Not a problem. Just try to shake out that habit. Some find it pretty annoying on a text only screen. ;)

[13:07] <ruiwk> ok

[13:08] <ruiwk> isBEKaml:thx

[13:09] <isBEKaml> ruiwk++ (Newbie initiate)

[13:09] *** orafu left
[13:09] *** orafu joined
[13:11] *** karb joined
[13:32] *** araujo left
[13:33] *** araujo joined
[13:36] *** bjarneh left
[13:38] *** Axius joined
[13:43] *** zby_home joined
[13:54] *** risou joined
[14:02] *** snearch left
[14:09] *** karb left
[14:18] <isBEKaml> phenny: tell masak yapsi fails on recent version of rakudo though it works on older 2010.07 and .08 versions. -->bin/yapsi  -e 'say 42'

[14:18] <phenny> isBEKaml: I'll pass that on when masak is around.

[14:18] <isBEKaml> Could not find sub &Nil

[14:19] <tadzik> ruiwk: my friend has made a ppa for R* on Ubuntu, if you're interested

[14:19] *** hans__ joined
[14:20] <tadzik> alright, who's the grammar wizard around?

[14:20] <ruiwk> sorry wats tat ?

[14:20] <moritz_> isBEKaml: that means there's an old .pir file somewhere

[14:20] <moritz_> tadzik: usually pmichaud. I'm more of an apprentice :-)

[14:20] <isBEKaml> moritz_: I built the new yapsi and removed any old .pir from PERL6LIB. 

[14:20] <tadzik> moritz_: I finally decided to learn grammars and actions, and see a strange issue

[14:20] <moritz_> tadzik: do tell

[14:21] <moritz_> did you read the book section?

[14:21] <tadzik> http://pb.rbfh.de/rFFzXgaBMXVn

[14:21] <tadzik> not yet

[14:21] <moritz_> well, do it

[14:21] <tadzik> so, this is day 21 from the Perl Advent Calendar

[14:21] <moritz_> it's not that long, and we wrote it for a reason :-)

[14:21] <tadzik> hold on, take a look at this

[14:22] * moritz_ takes a look

[14:22] <tadzik> now it works, for I added \n to a header token

[14:22] <tadzik> after removing...

[14:22] <isBEKaml> moritz_: the funny thing is, it works fine if I just change the shebang to point to earlier version of Rakudo. 

[14:22] <isBEKaml> moritz_: the shebang in bin/yapsi

[14:22] <tadzik> it no longer parses

[14:22] <tadzik> and the Advent version does not work due to it (there is no \n there)

[14:23] <pmichaud> good morning, #perl6

[14:23] <tadzik> now the thing is Q {} has the newline at the beginning. But adding \n on the top of, well, TOP, does not make it work

[14:23] <tadzik> good morning pmichaud 

[14:23] <moritz_> it also probably needs

[14:23] <tadzik> oh well, it does

[14:23] <moritz_> for $match<question>.flat

[14:24] <tadzik> so the advent version needs fixes probably

[14:24] <moritz_> tadzik: do you have a wordpress account?

[14:24] <Juerd> http://juerd.nl/i/89a1f74d761c1dafe4807a12dff9d91b.png  # The effect of killing svn on feather1

[14:24] <tadzik> moritz_: yep

[14:24] <Juerd> That was memory. Here's load avg: http://juerd.nl/i/6cda7e2f6f4e940a9c2313c5c4c37296.png

[14:25] <moritz_> wow

[14:25] <tadzik> yes, works after those changes

[14:25] <moritz_> tadzik: what's your nickname on wordpress?

[14:25] <Juerd> And the cleaning up of the gigabytes of tempfiles it left behind: http://juerd.nl/i/a19681e1e223cd10c285482dfc9398b0.png

[14:25] <tadzik> moritz_: ttjjss I think. At least that's the blag url of mine

[14:25] * tadzik checks

[14:26] <moritz_> what's the last svn revision of the pugs repo?

[14:27] *** Axius left
[14:28] * isBEKaml thinks Juerd is probably the most happiest guy here of all: "cleaning up of the gigabytes of tempfiles" :)

[14:28] <tadzik> moritz_: yes, it's ttjjss

[14:29] <Juerd> isBEKaml: I'm not happy about this thing at all

[14:30] <isBEKaml> Juerd: your words I quoted seemed to convey that impression. :/

[14:31] <Juerd> I feel bad about disabling a useful service, and am using these charts to explain why I did feel the need to end it.

[14:31] <moritz_> Juerd: can you re-enable it for a minute so that I can do a last git-svn rebase, and then disable again?

[14:31] <Juerd> moritz_: Sure

[14:32] <moritz_> then the git copy can preserve full information

[14:32] <Juerd> moritz_: Could you do it yourself btw? You have sudo access.

[14:32] <moritz_> Juerd: when you tell me what you did to disable it...

[14:32] <Juerd> moritz_: I removed a symlink

[14:32] <Juerd> moritz_: a2ensite svn.pugscode.org should enable it.

[14:33] <pmichaud> svn? feather?  

[14:33] <moritz_> Util: and how do I disable it again?

[14:33] * pmichaud feels like he's missed an important story/event.

[14:33] <Juerd> pmichaud: Dead.

[14:33] <moritz_> sorry, meant Juerd 

[14:33] <Juerd> moritz_: a2dissite

[14:34] <moritz_> Juerd: thank you

[14:34] *** risou_ joined
[14:34] <Juerd> moritz_: Now that you know how to do it, you can do it again in case you need it

[14:35] <pmichaud> are we moving pugs to github, then?

[14:35] <moritz_> yes

[14:35] <moritz_> I'm on it

[14:35] <pmichaud> are you getting a copy with full history, I hope?

[14:35] <moritz_> yes

[14:36] <pmichaud> okay.  having done two migrations of svn to github, let me know if you need any help :-)

[14:36] <tadzik> moritz_: could you C-f Question::Answer on http://perl6advent.wordpress.com/2009/12/21/ ? It dies while parsing on the current Rakudo, and I wonder what's wrong with this one

[14:36] <tadzik> In "has" declaration, typename Question::Answer must be predeclared (or marked as declarative with :: prefix) at line 41, near " @.answers"

[14:36] *** risou left
[14:36] <tadzik> ↑ that's a == SORRY ==

[14:36] <moritz_> pmichaud: since I already have a git-svn mirror, I'll just push that one

[14:37] <pmichaud> moritz_: was that a full clone, or one that was created using the -r option?

[14:37] <moritz_> pmichaud: that was full

[14:37] <pmichaud> okay, excellent.

[14:37] <moritz_> tadzik: I guess typed array attributes are NYI

[14:37] <moritz_> in current master

[14:38] <moritz_> removing the type constraint should help

[14:39] <tadzik> now it can't find sub Question::Answer, as it couldn't reach inside the class

[14:39] <pmichaud> try changing   "class Answer { "    to    "class Question::Answer { "

[14:39] <pmichaud> I know that rakudo master has difficulty with nested class and package names

[14:40] *** Ross left
[14:41] <hans__> Hello, how to pass a NULL password to postgresql with MiniDBI?

[14:41] *** Trashlord left
[14:41] *** Ross joined
[14:43] *** whiteknight left
[14:44] <pmichaud> Juerd: I'

[14:44] <pmichaud> Juerd: I'm sure I speak for many in saying "Thank you" for having supported the pugs repository for all of these years.

[14:44] *** Trashlord joined
[14:44] <pmichaud> (and much more in Perl 6, for that matter)

[14:44] <moritz_> hans__: I don't know if it's possible... you likely need to dig into the source code tofind out

[14:45] <moritz_> indeed, Juerd++ Juerd++ Jurd += (1..2e6).pick

[14:46] *** kuzuha joined
[14:47] *** karb joined
[14:48] <isBEKaml> yes, Juerd++ : (1...2e6) { .say Juerd++ }

[14:54] *** zulon joined
[14:58] *** justatheory joined
[15:03] *** s_mosher joined
[15:04] *** Ross left
[15:06] <ruiwk> why the $git clone git://github.com/rakudo/rakudo.git

[15:07] <ruiwk> is not running when i paste it on terminal and wait for so long ?

[15:07] *** Ross joined
[15:08] *** timbunce joined
[15:09] *** karb left
[15:09] *** sftp joined
[15:15] *** zulon left
[15:15] *** ruiwk left
[15:16] *** azert0x joined
[15:16] <hans__> method connect(Str $user, Str $password, Str $params, $RaiseError) { ... }    -  $password shoud be a postgresql Null pasword.

[15:17] <tadzik> iirc some Zavolaj examples use some fancy pir:: to produce NULL

[15:17] <tadzik> you might want to look there

[15:17] <hans__> If you do not plan to use password authentication you can omit this option. If no password is specified, the password will be set to null    - from http://www.postgresql.org/docs/8.3/interactive/sql-createrole.html

[15:22] *** karb joined
[15:22] <tadzik> duh, I wrote this whole actions class and my $match.perl is still returning this ugly Match.perl result

[15:23] <tadzik> http://pb.rbfh.de/32mc3REtkl7SV -- am I doing something wrong?

[15:23] <pmichaud> tadzik: maybe you're wanting $match.ast.perl ?

[15:23] <pmichaud> matches always return the match object

[15:24] <tadzik> ah, ast

[15:27] <tadzik> Also stringifying the results before make()ing them helped a lot

[15:31] *** karb left
[15:31] *** Su-Shee left
[15:36] <tadzik> hmm, the action methods are called on answers, but the resulting objects seem not to be put into the final object. http://pb.rbfh.de/288lue1INCFod -- debug info on line 42, result starting from 68. Can anyone take a look?

[15:42] <moritz_> http://github.com/perl6/Mu/ is now live, and intended as the successor of the pugs repo.

[15:42] <moritz_> if anybody wants commit access, please ping me

[15:42] <pmichaud> tadzik: :answers => $<answer>».ast

[15:43] <pmichaud> that looks.... weird

[15:43] <pmichaud> did you really want the key to be a Pair?  ;-)

[15:43] <pmichaud> I suspect you want to omit the colon.

[15:43] <moritz_> I'll look into setting up hugme for the 'perl6' team

[15:43] <moritz_> which has access to the Mu repo

[15:43] *** karb joined
[15:45] <pmichaud> or you can do   :answers($<answer>».ast)

[15:45] <tadzik> oh, the typos! How boring life will be without you!

[15:45] <tadzik> pmichaud: thank you very much

[15:45] *** Trashlord left
[15:46] <tadzik> ...and now I'm missing .pretty :)

[15:46] <isBEKaml> moritz_: I think we'll have to change that url in the Mu README about commitbit.pugscode.org. 

[15:46] <tadzik> moritz_: here I am

[15:47] *** Mowah left
[15:47] *** Trashlord joined
[15:47] <tadzik> oh, I'm alredy added. moritz_++

[15:52] <pmichaud> Can we perhaps move the spectests out of Mu?

[15:52] <pmichaud> either that, or we need some way for "make spectest" to retrieve just the tests, and not the entire Mu repo.

[15:53] <moritz_> pmichaud: github supports svn checkouts

[15:54] <pmichaud> also, I'm not sure that calling the repo "Mu" is a good name -- might be too many inadvertent puns with the Mu type

[15:54] * moritz_ finds it fitting

[15:54] * isBEKaml too

[15:54] <pmichaud> I think some may find it confusing.

[15:54] *** Trashlord left
[15:54] <pmichaud> It's often confusing when one (unfamiliar) term is used to refer to two entirely different things.

[15:55] <pmichaud> anyway, I've noted my opinion.

[15:55] <moritz_> pmichaud: do you have a suggestion for a better name?

[15:55] <tadzik> . o O ( once properly understood, Grammars and Actions are the most awesome thing I saw since... well, since Perl 6 )

[15:56] <pmichaud> moritz_: well, "pugs" is still a valid name.  :)

[15:56] <pmichaud> but no, I don't have an immediate idea for a replacement.

[15:56] <moritz_> pmichaud: but even more confusing, since it doesn't contain pugs anymore

[15:56] <pmichaud> how do I checkout a subtree via github?

[15:56] <pmichaud> the only references I can find are for checking out the entire repo

[15:57] <isBEKaml> you can just do svn co lik eyou do the spectests. 

[15:57] <tadzik> doesn't git have something like 'subrepo'?

[15:57] <pmichaud> currently for the spectests I do:    svn co https://svn.pugscode.org/pugs/t/spec

[15:57] <isBEKaml> yes, svn co http://github.com/perl6/mu/t/spec should work, I think

[15:57] <pmichaud> hmmm

[15:57] * pmichaud tries

[15:58] <pmichaud> pmichaud@orange:~$ svn co http://svn.github.com/perl6/mu/t/spec

[15:58] <pmichaud> svn: Server sent unexpected return value (500 Internal Server Error) in response to OPTIONS request for 'http://svn.github.com/perl6/mu/t/spec'

[15:58] <pmichaud> oh, "Mu" works.

[15:58] <pmichaud> ugh, you mean we have to have a capital 'M'?

[15:58] <pmichaud> *sigh*

[15:59] <isBEKaml> :)

[15:59] <tadzik> moritz_: I can has few suggestions about the G&A chapter?

[15:59] <pmichaud> ECASESENSITIVITYSUCKSINURLS

[15:59] <isBEKaml> ash_++ for telling me about the github specific git-svn mirrors. 

[15:59] <moritz_> tadzik: sure

[15:59] * pmichaud now officially dislikes "Mu" as a repo name.

[15:59] <pmichaud> at least make it "mu"

[16:00] <TimToady> that would be the native type :)

[16:00] <pmichaud> oh, checking out "t/spec" didn't work.

[16:00] <pmichaud> it gives me the full repo.

[16:00] <moritz_> drat

[16:01] <pmichaud> oh, it didn't give me the full repo.

[16:01] <pmichaud> it just didn't give me t/spec

[16:01] <pmichaud> that's... weird.

[16:01] <pmichaud> pmichaud@orange:~/spec$ ls

[16:01] * moritz_ renamed s/Mu/mu/

[16:01] <pmichaud> AUTHORS  docs  INSTALL.v6  LICENSE  README  READTHEM  READTOO  SLAVES  VICTUALS

[16:01] <tadzik> moritz_: personally, I find JSON example pretty overwhelming. The grammar source alone is 3 pages long, the actions is a bit shorter, but I'd personally like to start with something more visible, less abstract than JSON. I liked the Perl6Advent Questions-Answers example, I think it'd be nice to include it there after fixing, pushing JSON a few pages further as a Real-World example

[16:02] *** Trashlord joined
[16:03] <moritz_> tadzik: I fear (because it's much work) that that's the way to go

[16:04] <tadzik> moritz_: I think I can handle this a bit

[16:04] <tadzik> I was to fix Advent Calendar anyway

[16:04] <moritz_> who wrote the advent thing? Tene?

[16:04] <tadzik> no eye deer

[16:05] <tadzik> Tene, yes

[16:05] <moritz_> we have to ask for permission first

[16:06] <moritz_> Tene: may we use your grammar examples from the advent calendar in the "Using Perl 6" book?

[16:06] <pmichaud> the other reason for wanting the spectests in a separate repo is because we'll also want easy write support

[16:06] <pmichaud> (and svn commits to github still look a little... experimental)

[16:07] <moritz_> agreed, we don't want svn commits when we move to git

[16:12] *** karb left
[16:13] <moritz_> any idea how to extract the t/spec subtree into a separate repo, and still preserve history?

[16:13] <moritz_> I've asked on #git, but they seem busy with another discussion

[16:16] <mberends> hello moritz_, pmichaud: how about hosting just the t/spec subtree in a downsized subversion repo?

[16:16] <isBEKaml> moritz_: raise a support issue on support.github.com. They are usually closed pretty fast. 

[16:17] <moritz_> mberends: and who maintains that?

[16:18] <tadzik> moritz_: asking on #github was always helpful for me

[16:18] <isBEKaml> #github too. forgot about that. :|

[16:19] <pmichaud> when I created the rakudo repo, I extracted it as a subtree of the original svn

[16:20] <pmichaud> as opposed to converting the entire svn to git, and then trying to extract it from there.

[16:20] <moritz_> git filter-branch --subdirectory-filter t/spec # seems to help... still running

[16:21] <pmichaud> for reference, to create the rakudo repository, I did

[16:22] <pmichaud> git svn clone -A parrot-names.txt http://svn.perl.org/parrot/trunk/languages/perl6

[16:22] <pmichaud> which just grabbed the languages/perl6 directory (and all of its history)

[16:23] <pmichaud> (and parrot-names.txt was used to map svn commit identifiers to git email identifiers)

[16:24] <pmichaud> mberends: (downsized subversion)  yes, that's a possibility.  In some sense it would be nice if we could get to a single vcs tool (more)

[16:24] *** s_mosher left
[16:24] <pmichaud> and also I think the pugs repo may have grown to the point where we ought to have separate repos for its various components (docs, tests, sources, etc.)

[16:24] <mberends> moritz_: if there is interest in having a subversion t/spec repo, I think I (or someone) can arrange where it is hosted. The experience of Juerd++ can surely help us plan such a thing.

[16:25] <pmichaud> personally, I think I'd like to see t/spec as a git repo

[16:25] <pmichaud> I'm not sure I see any big advantage to keeping it as subversion

[16:25] *** Trashlord left
[16:25] <moritz_> I know a lot of "it would be nice" things. To me what really matters is that we'll end up with one more usable repos, with full history preserved

[16:26] *** hans_ joined
[16:26] <moritz_> I can offer that with git, and I can offer to extract subtrees into separate repos

[16:26] <mberends> pmichaud: +1 to separating pugscode into components. It's logical and fairly obvious.

[16:26] <pmichaud> well, it may be logical to separate them, but I'm not sure we yet know what the logical separation should be :)

[16:27] <moritz_> if people want something else, they should do it *and* do the planning themselves; I don't feel qualified to do that (no offense to anybody intended)

[16:29] <moritz_> how should I name the spectest repo?

[16:29] <moritz_> 'spec' would be convenient, but confusing

[16:30] <TimToady> these things are usually called "validation suites"

[16:31] <moritz_> TimToady: do you have a github account?

[16:31] <TimToady> no

[16:31] <moritz_> TimToady: then you should create one

[16:31] <TimToady> doubtless :)

[16:32] <TimToady> my inertial navigation system tends toward inertia...

[16:33] <pmichaud> 'spectest' works for me

[16:33] <TimToady> is there anything to identify it as a p6 spectest?

[16:33] <pmichaud> it's in the perl6 account?

[16:33] <TimToady> ah

[16:33] <pmichaud> github.com/perl6/spectest

[16:33] <pmichaud> could even be 'spectests'

[16:34] *** snearch joined
[16:34] <pmichaud> anyway, others will have to decide it for a bit -- I have errands that must be run :(

[16:34] <pmichaud> bbiaw

[16:34] *** ruoso joined
[16:35] <moritz_> pushing to perl6/spectes now - can be renamed later on

[16:35] <moritz_> *spectest

[16:36] <tadzik> bbl

[16:36] *** tadzik left
[16:37] *** Trashlord joined
[16:37] *** s_mosher joined
[16:38] <TimToady> "vets: Valid E$_ Test Suite" for slurp("unixdict.txt").words.grep: *.subst(/^e/,'')

[16:39] <TimToady> and because it vets your implementation

[16:40] <moritz_> anyway, I need to go shopping for a bit, will probably be back in about an hour or so

[16:40] <moritz_> if people have suggestions for subrepository names, feel free to share them

[16:42] <moritz_> also you can think about having a separate repo for the specs (which would make the perl6-language mail hook easier)

[16:43] *** risou_ left
[16:43] *** jimi_hendrix left
[16:46] *** ruoso left
[16:50] <TimToady> Valid Enough Test Suite :)

[16:50] <TimToady> Very Excellent Test Suite

[16:51] *** molaf left
[16:51] <TimToady> or VI Enough

[16:51] *** Trashlord left
[16:53] <TimToady> Valid Essentials

[16:54] <TimToady> Validate Everything

[16:56] *** Axius joined
[16:56] <mberends> Velociraptor Extreme Torture System

[16:58] <TimToady> except we're the accelerraptor

[16:58] <TimToady> or however that's spelled...

[17:00] <TimToady> VI Extreme Torture Suite

[17:00] <TimToady> except sounds like we're testing an editor

[17:00] *** snearch left
[17:00] *** ruoso joined
[17:01] <TimToady> Six Under eXamination

[17:01] <mberends> lol

[17:02] <TimToady> Wall's Really Obnoxious Xanadu

[17:02] *** svetlins__ joined
[17:03] <TimToady> Six Encounters X-rays

[17:04] *** svetlins_ left
[17:05] <TimToady> Six Is eXpected

[17:06] *** Trashlord joined
[17:06] <TimToady> Six is Xenophobic

[17:06] <mberends> Six Ain't eXperimental (anymore)

[17:07] <TimToady> Six Is Generally Hard

[17:10] <mberends> Six Outwardly Feels Tricky While Actually Reads Easily

[17:10] <TimToady> :)

[17:11] <TimToady> but doesn't sound like a torture suite

[17:12] <TimToady> Six Candidate Acceptance Test

[17:12] <Juerd> mberends: Oh, hosting is not the issue. Feather is still available for that, provided that it is cared for by someone

[17:13] <Juerd> mberends: It's just that svn + svnweb littered huge (100MB+) temp files, were responsible for extreme loads, had memory leaks, and were completely unmaintained

[17:14] *** Trashlord left
[17:14] <TimToady> or Six Core Acceptance Test

[17:14] <mberends> Juerd: thanks. If pugscode were somehow locked down to be readonly, I wonder if many of the massive overheads would stop happening.

[17:16] <Juerd> mberends: Not really. The majority of the issues with svnweb are common for all mod_perl crap: things stay in memory forever, and is multiplied by the number of apache processes over time, regardless of the number of users.

[17:16] <hans_> \

[17:16] <hans_> Z

[17:16] <TimToady> Really Obnoxious Torture System

[17:16] <Juerd> mberends: svn was mostly CPU hungry, and with very little commits I doubt it had anything to do with commits.

[17:18] <Juerd> mberends: As for my experience with setting svn up: none, whatsoever. I don't know who originally set up svn on feather.

[17:18] <TimToady> Rarely Obtained Feature List

[17:19] <isBEKaml> Light On LoadTESTs

[17:20] *** hans_ left
[17:21] <isBEKaml> Six Ix Xanthippe

[17:21] <isBEKaml> :D

[17:21] <Juerd> http://juerd.nl/i/73ea6e3483eb7e949c942df8ddab5d30.png  # It appears that svn was also responsible for the majority of traffic, with its gigantic diffs.

[17:21] <isBEKaml> Six Is Xanthippe

[17:23] <isBEKaml> I think Xanthippe was the name of Socrates' wife. Generally perceived evil figure in history, but also was partly responsible for driving Socrates towards philosophy! lol

[17:24] *** Trashlord joined
[17:24] <TimToady> Sucks Or Rocks Reliably Yet

[17:26] <isBEKaml> Times Reliably On Load Lines

[17:28] <moritz_> Six Or Not Six, that's what the spectests answer

[17:29] <moritz_> http://github.com/perl6/spectests now contains the spectests; I haven't removed them from mu yet

[17:29] *** Trashlord left
[17:30] <moritz_> I should do that now.

[17:30] *** zulon joined
[17:33] <TimToady> Sux Or Rox Test Of Functionality

[17:33] *** isBEKaml left
[17:34] <TimToady> I think I like sorry the best so far

[17:35] *** tylercurtis joined
[17:37] <TimToady> Larry's Obnoxious Language Core Acceptance Test

[17:38] <moritz_> "you think this is cute today"

[17:38] <TimToady> that is wonderfully ambiguous, in the way of noun modifiers

[17:38] <TimToady> I bet jnthn++ would like it

[17:39] <moritz_> lol

[17:50] <dalek> rakudo: 29fcf8e | chromatic++ | src/ (4 files):

[17:50] <dalek> rakudo: [src] Updated deprecated string_from_literal calls.

[17:50] <dalek> rakudo: 

[17:50] <dalek> rakudo: Parrot's (not all that) new approach is to use Parrot_str_new().

[17:50] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/29fcf8e7d323336a1e03c59a3ab7204106c2c2a2

[17:50] <dalek> rakudo: 6b1b030 | chromatic++ | src/binder/bind.c:

[17:50] <dalek> rakudo: [binder] Hoisted several constant Parrot STRINGs.

[17:50] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/6b1b0302d0e5942cc6b7c49227da5191d695ca4c

[17:50] <dalek> rakudo: e36452e | chromatic++ | src/ops/perl6.ops:

[17:50] <dalek> rakudo: [ops] Hoisted constant Parrot STRINGs.

[17:50] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/e36452e26d6083c88b2103dba0a93f159f7c21e2

[17:51] <ingy> o/

[17:52] <TimToady> trouble is, we want a word that doesn't occur too frequently in normal talk

[17:53] <TimToady> so maybe something more like "visor", Verify Implementation Sucks Or Rocks

[17:53] *** molaf joined
[17:53] <TimToady> but the word itself isn't very funny

[17:53] <moritz_> otoh if we split off several repositories, the names should be as obvious as possible

[17:53] <TimToady> censor or sensor would be funnier

[17:54] *** Axius left
[17:55] <moritz_> should I split off docs/ ?

[17:55] *** tadzik joined
[17:55] *** molaf left
[17:57] *** Ross left
[17:57] *** Trashlord joined
[17:57] *** Ross joined
[17:58] *** karb joined
[17:59] *** zulon left
[18:00] <TimToady> valid: Verify All Language Implemenation Details

[18:00] <TimToady> *ment

[18:00] *** rhebus joined
[18:00] <rhebus> Hello everyone

[18:00] <TimToady> everyone says hello back

[18:00] <rhebus> I've decided to jump in and learn Perl 6 using Rakudo* by doing the project euler problems

[18:01] <TimToady> cool

[18:01] <rhebus> but my naive implementation of problem 3 seems to be doing some int overflow

[18:01] <rhebus> http://projecteuler.net/index.php?section=problems&id=3

[18:01] <rhebus> (what's the largest prime factor of 600851475143)

[18:02] <rhebus> i will ask a question, just give me a minute :)

[18:02] <TimToady> hmm, well, rakudo doesn't implement Int as bigint yet, but overflows to Num

[18:02] <TimToady> but that should fit in a double

[18:02] <TimToady> and %% is defined on doubles, methinks

[18:03] <TimToady> rakudo: say 600851475143 %% 7

[18:03] <rhebus> what is %%?

[18:03] <p6eval> rakudo 52f9ea: OUTPUT«0␤»

[18:03] <TimToady> same as % == 0

[18:03] <TimToady> now that we have it, we find we use it all the time

[18:03] <rhebus> rakudo: say 6 %% 2

[18:03] <p6eval> rakudo 52f9ea: OUTPUT«1␤»

[18:04] *** envi^home left
[18:04] <rhebus> rakudo: say 600851475143 %% 71

[18:04] <p6eval> rakudo 52f9ea: OUTPUT«1␤»

[18:04] *** rindolf joined
[18:04] <rindolf> Hi all.

[18:05] <rhebus> (minor spoilers for that problem, sorry :) )

[18:05] <rhebus> but yeah, that looks good enough for me, thanks TimToady

[18:05] <rindolf> Some of the "make spectest" tests failed on my Mandriva 2010.1 x86-64 Linux laptop.

[18:05] <TimToady> we're more interested in the solution than the solution, as it were

[18:06] <TimToady> the interesting part is what the P6 code comes out looking like

[18:06] <TimToady> and whether it's intuitive to the reader

[18:08] <rhebus> well I like it so far

[18:08] <rhebus> but I haven't yet delved into hyper operators &c

[18:08] <TimToady> we hope those end up intuitive too

[18:08] <rhebus> tbh I'm just writing P5 in P6 atm

[18:09] <rhebus> "baby perl 6"

[18:09] <TimToady> that's officially okay

[18:09] <rhebus> can i have a certificate from the authorities to state that officially?

[18:10] <TimToady> if you're looking for someone with a little authority around here, I have about as little as anyone...

[18:10] <rhebus> :)

[18:12] *** karb left
[18:12] <rhebus> the irony is that I'm running win64 so I *should* be able to represent 600851475143 natively. But I'm lazy and downloaded the .msi which I imagine is 32-bit.

[18:12] <rhebus> hooray for laziness

[18:13] <ingy> what does p6 call a lexical namespace?

[18:13] <tylercurtis> Well, Rakudo (last I looked at the promotion to Num code) converts anything that would overflow a 32-bit integer to Num, regardless of the size of your integers.

[18:14] <TimToady> ingy: lexpad or lexinfo, depending

[18:14] <TimToady> the pad is usually an active one for a particular call

[18:15] <TimToady> but sometimes it's used generically for the static table too

[18:15] *** Axeman left
[18:15] <ingy> I'm considering namespace, scope or stash.

[18:15] <TimToady> but we're trying to switch over to calling those lexinfos

[18:16] <TimToady> well, all of those are rather overloaded

[18:17] <ingy> my meaning is a symbol hash that belongs to a function

[18:17] <ingy> a function object has a namespace object (just a hash)

[18:18] *** toebu left
[18:18] <TimToady> yes, but "namespace" == "package" in parrotland currently

[18:18] <rindolf> Hi all. I'm getting svn: Server sent unexpected return value (403 Forbidden) in response to OPTIONS request for 'http://svn.pugscode.org/pugs/t/spec'

[18:18] <TimToady> and "stash" == "package" in P5land

[18:18] <ingy> does anyone else use lexpad?

[18:19] <ingy> I really wish naming was more standard...

[18:19] <TimToady> that's a p6ism, but historically didn't distinguish the name hash from the activation record it represents

[18:19] <ingy> it's a really annoying hurdle in acmeist life.

[18:19] <TimToady> actually "pad" is a p5ism for the whole structure, which has both elements

[18:20] <TimToady> well sometimes the common denominator is the empty set, and you have to just coin something new, like lexhash

[18:21] <ingy> nod

[18:23] <TimToady> though that makes the other into something like pkghash, which is ugly

[18:23] <TimToady> lstash and pstash would be how the old-timers woulda done it, which is how we got strange words like lvalue

[18:24] <rhebus> i particularly like the C standard which distinguishes between lvalues and modifiable lvalues >_<

[18:24] <TimToady> orz

[18:25] <ingy> well I'm sticking with namespace for now. Once you start following TimToady's lead it's a slippery slope :)

[18:25] <TimToady> I want the world, you can have the rest.  :)

[18:26] <ingy> rest is probably what I need most.

[18:27] <TimToady> a rest for ingy++ --> 𝄽

[18:28] <TimToady> at least it shows up in the log...

[18:28] <TimToady> assuming you're using a browser that does unicode for reals

[18:30] <rhebus> grr, project euler seems to be more about maths than programming :/

[18:30] <rhebus> or at least the first 4 problems are

[18:30] <TimToady> yes, that's they're stated purpose

[18:31] <TimToady> maybe you want to tackle rosettacode problems, though most of the low-hanging-fruit has solutions already

[18:33] <rhebus> ooh, hadn't seen that

[18:33] <TimToady> see also http://www.oreillynet.com/onlamp/blog/2006/12/99_problems_in_perl_6.html

[18:34] <TimToady> which have some proposed solutions in the test suite that you can check against

[18:34] <TimToady> or replace with better solutions :)

[18:34] <TimToady> the originals were written against pugs rather than rakudo

[18:34] <rhebus> ooh that is also good

[18:36] <sorear> good * #perl6

[18:36] <TimToady> o/

[18:36] <pmichaud> back again, for a bit

[18:36] <rhebus> aha they're also in http://github.com/perl6/perl6-examples

[18:36] <rindolf> pmichaud: hi.

[18:37] <TimToady> also in t/spec/integration, or wherever it ends up after this morning's svn meltdown

[18:38] <rindolf> TimToady: svn meltdown?

[18:38] <rindolf> TimToady: WDYM?

[18:39] <moritz_> http://github.com/perl6/spectests/tree/master/integration/

[18:40] <pmichaud> (svn meltdown)  Juerd needed to disable svn on feather earlier today

[18:40] <pmichaud> which means svn.pugscode.org is no longer active

[18:40] <rindolf> pmichaud: ah.

[18:41] <Juerd> Is the github repository the main one now?

[18:41] <pmichaud> likely yes

[18:41] <moritz_> yes

[18:42] <pmichaud> we'll still have some refactorings to make, I think

[18:42] <moritz_> I've already split off the spectests

[18:42] <rindolf> moritz_: well, you need to update the rakudo build-system to reference it.

[18:42] <pmichaud> should we add TimToady as an owner of the perl6 organization?

[18:42] <pmichaud> rindolf: s/you/we/  :-)

[18:42] <rindolf> pmichaud: :-)

[18:43] <moritz_> I already have that locally; testing as we speak

[18:43] <moritz_> pmichaud: +1

[18:43] <pmichaud> TimToady: do you have a github account yet?

[18:44] <TimToady> working on it

[18:46] <moritz_> pmichaud, TimToady: would you prefer a separate repo for docs/ (or maybe docs/Perl6/Spec) ?

[18:47] <pmichaud> I think a separate repo makes sense... but I defer to TimToady on that.  He's the one that generally has to deal with it the most.

[18:47] <pmichaud> same goes for the other non-spectest parts of the pugs repo :)

[18:48] <TimToady> it says the account TimToady is already taken

[18:48] <pmichaud> yes, I saw that

[18:49] <pmichaud> said it was created in dec 2009

[18:49] <TimToady> did someone create it for me, I wonder...

[18:49] <TimToady> did I create it and not know it?

[18:49] <pmichaud> yeah, not sure if it's a squatter or what

[18:49] <dalek> rakudo: ff5b4c0 | moritz++ | / (2 files):

[18:49] <dalek> rakudo: partially update build system to deal with spectests in git

[18:49] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/ff5b4c0d076d609483fcccf558b9d113ce9a4ab6

[18:49] <pmichaud> maybe request password recovery for the account and see what happens?

[18:50] <moritz_> missing: "make manifest" still uses the old repo

[18:51] <pmichaud> moritz_: I think I can correct that.

[18:51] <lue> wello there o/

[18:53] <sorear> Ay reason we don't just delete the 'perlsix' account?  It has zero repositories

[18:54] <pmichaud> maybe keep it so that someone else doesn't create one for nefarious purposes

[18:55] <moritz_> sorear: currently my only reason was "more important other things to do first"

[18:55] *** plobsing joined
[18:56] * sorear seems to have the delete privelege on perlsix

[18:56] <pmichaud> sorear: yes, you were listed as an organization owner

[18:56] <pmichaud> (along with about seven others :)

[19:00] <TimToady> successful at resetting TimToady password, so I guess you can call me that; now for ssh token...

[19:01] <pmichaud> TimToady: added you as an organization owner for the perl6 account

[19:01] <pmichaud> "Owners have full access to all repositories and have admin rights to the organization."

[19:02] <sorear> you now have the ability to delete perl6.

[19:02] <sorear> use it wisely.

[19:02] * sorear blows away a 193MB pugs checkout

[19:04] * TimToady feels the power going to his head, but as his head is too big, it gets lost somewhere.

[19:04] <pmichaud> the current link for STD.pm6 is http://github.com/perl6/mu/raw/master/src/perl6/STD.pm6

[19:04] <pmichaud> or http://github.com/perl6/mu/blob/master/src/perl6/STD.pm6  if you want it with creamy github formatted goodness

[19:04] <TimToady> blob?

[19:05] <moritz_> Binary Large OBjection

[19:05] <pmichaud> I don't create the urls -- that's all github.  :)

[19:05] <lue> did pugs disappear permenantly, or just temporarily ?

[19:05] <pmichaud> .oO( OBject*ion* ? )

[19:05] <moritz_> pmichaud: :-)

[19:05] <lue> .oO(blob = Big Lump O' Binary)

[19:05] <sorear> github doesn't seem very good at formatting Perl6

[19:06] <sorear> lue: it didn't disappear, it moved to github

[19:06] <pmichaud> sorear: I'm sure they would accept patches :)

[19:09] * diakopte1 backlogs a bit

[19:09] <sorear> seen diakopter

[19:09] <aloha> Sorry, I haven't seen diakopter.

[19:11] <lue> time to get rid of the pugs svn repo (and with it an unused commit bit)

[19:12] <sorear> What is docs/ in mu.git being used for?

[19:12] <sorear> moritz_, ping

[19:12] <moritz_> sorear: I'm about to delete it

[19:12] <pmichaud> (keep in mind we're still in the middle of a largely unplanned migration)

[19:12] <diakopte1> Juerd: I suspect you were wrong about "svn" causing the high load/mem usage.

[19:13] <pmichaud> oh, all of 'docs' became its own repo?

[19:13] <pmichaud> that feels.... wrongish

[19:13] <pmichaud> I would've wanted to have just the spec docs separated out

[19:13] <diakopte1> Juerd: rather, I suspect it was (as sorear mentioned the other day) the SVN::Web links continually being spidered by all the search engines.

[19:14] <moritz_> pmichaud: that can be done too

[19:14] <pmichaud> in general, I think docs should live with whatever it is they're documenting

[19:14] <pmichaud> indeed, perhaps what we really want is a perl6/spec  repository, that contains docs, tests, and STD.pm

[19:15] <diakopte1> Juerd: otoh, *finally* this is prompting what I was strongly suggesting 1 and 2 years ago

[19:15] <tadzik> hmm, I added <![ ]> at the end of the regex, but the matched string still has trailing spaces. Any ideas?

[19:15] *** Trashlord left
[19:15] <diakopte1> (the very thing pmichaud just mentioned)

[19:15] <sorear> tadzik: use \s

[19:15] <tadzik> sorear: I used \h, but it didn't work eithger

[19:15] <tadzik> * either

[19:16] <sorear> and it's spelled <!before \h>

[19:16] <moritz_> backslash escapes don't work in char classes yet :()

[19:16] <tadzik> actually it is mentioned <![\h+]>

[19:16] <tadzik> oh

[19:16] <tadzik> sorear: so that would be <!before \h+> in my case?

[19:16] <pmichaud> tadzik: nopaste or reference to what you're trying to do?

[19:16] <sorear> <![\h+]> means "match if the next character is not \\, h, or +

[19:16] <sorear> "

[19:17] <pmichaud> sorear:  by spec, or by what rakudo currently has?

[19:17] <tadzik> well, it wasn't working for the plain space

[19:17] <sorear> pmichaud: by spec it

[19:17] <tadzik> oh wait, this is token, backtrackint is disabled. Bad, isn't it?

[19:17] <sorear> 's \h +

[19:17] <sorear> tadzik: spaces in a token are ignored anyway

[19:17] <tadzik> nah, nothing new after changing it to regex

[19:18] <pmichaud> tadzik: nopaste url?

[19:18] <tadzik> well, I can just trim it in actions, but..

[19:18] <tadzik> http://pb.rbfh.de/2r4JjtYeSxCgh

[19:19] <lue> rakudo: say "hello   " ~~ /\H+/

[19:19] <p6eval> rakudo e36452: OUTPUT«hello␤»

[19:19] <tadzik> oh by the way, about line 16 -- if I change the last \h* to \h+ it dies with "Couldn't match the final ']'", although the case is not about the ], is this intentional?

[19:20] <pmichaud> if you change the last \h* to \h+, that rule will never match.

[19:20] <tadzik> I know, but it dies with a message about not finding the final ]

[19:20] <pmichaud> right, because of the ~ that occurs earlier

[19:21] <pmichaud> hmmmm

[19:22] <pmichaud> why not write it normally, in this case?

[19:22] <tadzik> normally?

[19:22] <pmichaud> ^^ \h* '[' $<text>=[\w|\h]+ ']' ...

[19:22] <pmichaud> i.e., why use the ~ ?

[19:22] <tadzik> I just wanted to try it :)

[19:22] <tadzik> but it's not the issue, when I use proper \h* it works fine

[19:23] <pmichaud> there are some definite oddities with the failure mode for that operator

[19:23] <tadzik> now what I want to achieve is 'autotriming' keys via tuning regexes

[19:23] <tadzik> so it won't catch the trailing \h

[19:23] <pmichaud> trailing after the ']', you mean?

[19:23] <tadzik> no, in key

[19:24] <pmichaud> I don't understand "autotrimming" in this case

[19:24] <tadzik> so when I have keyval 'foo = bar' it is parsed to "foo " => "bar"

[19:24] <tadzik> foo has a trailing whitespace

[19:24] <tadzik> see the bottom of the paste

[19:24] <pmichaud> oh, your problem is that <-[;=]>+  also grabs whitespace

[19:24] <tadzik> yes

[19:24] <pmichaud> you can't fix that with anything that comes afterwards

[19:24] <tadzik> so I wanted to add <![\h+]> at the end

[19:25] <pmichaud> well, you can, if it's a regex

[19:25] <tadzik> that's why I changed it

[19:25] <pmichaud> what you really want is <!after>

[19:25] <pmichaud> <!before>  talks about what comes next, not about what you already scanned.

[19:25] <tadzik> <!after \h+>, yes?

[19:25] <pmichaud> yes, but !after is nyi in rakudo, iirc.

[19:25] <tadzik> I see. I'll have to read the synopsis on this one

[19:25] <TimToady> the + is useless

[19:25] <tadzik> oh

[19:25] <pmichaud> and yes, the + is useless.

[19:26] <tadzik> even better

[19:26] <tadzik> so what can I do in the current Rakudo?

[19:26] <rhebus> hmm I disagree with the interpretation of perl6-examples/99-problems/P02-scottp.pl

[19:26] *** rindolf left
[19:27] <rhebus> The second-last box of <a b c d e> is <d e> not 'd'

[19:27] *** rindolf joined
[19:27] <moritz_> then fix it :-)

[19:27] <rhebus> will do

[19:27] <moritz_> rhebus: do you have a github account? if yes, what's the nickname?

[19:27] <pmichaud> tadzik: [ \H && <-[;=]> ] ** \h+   # maybe

[19:27] <rhebus> I'll get one set up

[19:27] <tadzik> hmm

[19:28] <tadzik> I won't be able to read it after a few days I'm afraid. I'll go for .trim in actions, til Rakudo implements <!after>

[19:28] <Juerd> diakopte1: svnweb didn't run on svn.pugscode.org, and http://feather.perl6.nl/server-status did show that the processes that appeared high in top(1) were often on that hostname

[19:28] *** Trashlord joined
[19:28] <rhebus> what's the github way of doing things? Do I fork it, commit to my copy, and send you the url?

[19:29] <Juerd> diakopte1: It's possible, of course, that these svn requests were done *by* svnweb, which at those moments apparently did behave.

[19:29] *** smash joined
[19:29] <tadzik> thanks for help

[19:29] <moritz_> rhebus: the #perl6 way is that I give you commit access

[19:29] <pmichaud> rhebus: for perl6-examples?  you get a commitbit.  :)

[19:29] <smash> hello everyone

[19:29] <moritz_> pmichaud: I've added perl6-examples to the 'perl6' team

[19:30] <Juerd> diakopte1: Still, though, nobody volunteered to investigate or maintain it...

[19:30] <rhebus> my username is rhebus on github now

[19:30] <moritz_> rhebus: and you have commit access now

[19:30] <pmichaud> moritz_: +1

[19:31] <pmichaud> moritz_: so, "perl6" is the team for generic "we give you commit access to all of the common repos" ?

[19:31] <Juerd> moritz++: Thanks for moving everything to github and taking care of it, by the way :)

[19:31] <moritz_> pmichaud: yes

[19:31] <pmichaud> moritz_: excellent

[19:31] <smash> phenny: tell colomon http://gil.di.uminho.pt/users/smash/rakudo-bench.html updated with new test scripts

[19:31] <phenny> smash: I'll pass that on when colomon is around.

[19:32] <pmichaud> I still prefer the zero-based graphs.

[19:33] <tylercurtis> Can I (ekiru on github) have a perl6{*} commit bit?

[19:33] <moritz_> tylercurtis: sure, just a sec

[19:33] *** Eevee joined
[19:33] <moritz_> tylercurtis: done

[19:33] <tylercurtis> moritz_++ thanks

[19:34] <tadzik> smash: why there are faster things in Slower Scripts?

[19:34] *** timbunce left
[19:34] <tadzik> smash: graph shows as if they were faster than before

[19:35] <tadzik> can I override the \n in grammars?

[19:35] <smash> pmichaud: refresh

[19:35] <pmichaud> smash: much better, thanks

[19:36] <tadzik> smash: ah, slower means "longer running", I get it

[19:36] <pmichaud> now we need to re-do the iteration and recursion bench marks so they actually measure something meaningful :)

[19:36] <smash> tadzik: maybe the title isn't the best, that just meanos that on the right are the scripts that take longer to run

[19:36] <smash> tadzik: right

[19:36] <tylercurtis> And we need to figure out why pick-words.pl slowed down. :)

[19:36] <tadzik> is there a way to override the \n, as in token ws {} ?

[19:36] <moritz_> tadzik: not yet

[19:37] <tadzik> :(

[19:37] <tadzik> pmichaud: btw, what's the state of require?

[19:37] <pmichaud> tadzik: still nyi

[19:37] * moritz_ has tried it, but couldn't get 'require <foo bar>;' to parse

[19:38] <smash> tadzik: i changed it to Fast/Slow scripts, maybe this way is more clear

[19:38] <pmichaud> smash: if I change the benchmark scripts for iteration and recursion, will that update all of the values in this graph?

[19:39] <smash> pmichaud: with the current script yes

[19:39] <smash> pmichaud: s/script/harness for the benchmarks/

[19:40] <tadzik> smash: how about something like lighter/heavier? That's a suprisingly difficult case I think :)

[19:40] <tadzik> it's hard not to disaumbiguate

[19:40] <tadzik> pmichaud: is there a chance for it in the near future?

[19:40] <tadzik> I know one how wishes to make testing and stuff :)

[19:40] <smash> tadzik: i like light/heavy scripts, thks for the tip

[19:41] *** timbunce joined
[19:41] <rhebus> should I rename P02-scottp.pl to my name or leave it as is?

[19:41] <moritz_> rhebus: whatever you consider better

[19:41] <moritz_> or more convenient

[19:42] <rhebus> ok

[19:42] <rhebus> i think the first example is awkward and not the best example :/

[19:42] <tylercurtis> smash: does your harness manually distinguish between the light/heavy(or fast/slow or short-running/long-running or whatever) scripts? If so, could you perhaps move that information into the bench-scripts repo? That way, it's easier for new long scripts to be added.

[19:42] <tylercurtis> smash: ignore that if you automatically detect long-running scripts.

[19:43] <tadzik> moritz_: JSON example in the book becomes extremely helpful once I got comfortable with Actions

[19:43] <moritz_> tadzik: glad to hear

[19:43] <rhebus> last <A B C D> should be the same as <D> in P01, based on the original LISP interpretation of returning a 1-element list rather than a single element

[19:44] <rhebus> however in perl6 generally a 1-element sequence is not the right thing

[19:44] <lue> how do you modify a class's variables? Something like    class A { has $.b }; my A $c .= new(3); $c.b = 5    .

[19:44] <rhebus> maybe I should just leave it alone :/

[19:44] <smash> tylercurtis: when building the grphs it automatically chooses if the script goes to one grpah or another

[19:44] <tadzik> lue: they have to 'is rw'

[19:44] <smash> the rest is exactly the same

[19:44] <tadzik> lue: so they can be lvalues

[19:44] <tylercurtis> smash: good. :) That's even better.

[19:45] <tadzik> lue: or you can modify them from inside the class, with the private accessor ($!b = 'asd')

[19:45] <tylercurtis> rhebus: well, in Perl 6, generally, a single element is also treatable as a 1-element sequence.

[19:45] <lue> I was just thinking, it'd be better to not do what I wanted :)

[19:45] <moritz_> http://nopaste.snit.ch/23233 # I plan to send this to perl6-announce - any comments before I send it?

[19:45] <tylercurtis> rakudo: say 5.[0];

[19:45] <p6eval> rakudo e36452: OUTPUT«5␤»

[19:45] <smash> pmichaud: feel free to change the benchmark scripts, i'll re-run them and update the HTML page

[19:45] <pmichaud> smash: changed and pushed.

[19:46] <tadzik> moritz_: thereforE

[19:46] <tylercurtis> rakudo: say 5.map(* + 2); # curious

[19:46] <p6eval> rakudo e36452: OUTPUT«7␤»

[19:46] <rhebus> rakudo: say <5>.WHAT

[19:46] <p6eval> rakudo e36452: OUTPUT«Str()␤»

[19:46] <lue> (I can't seem to git clone the perl6/docs repository.)

[19:46] <rhebus> rakudo: say <5>[0].WHAT

[19:46] <pmichaud> moritz_: mention that people can get commit bits by asking on #perl6, also, instead of just email.

[19:46] <p6eval> rakudo e36452: OUTPUT«Str()␤»

[19:47] <tadzik> moritz_: to have commit -> to have commit access?

[19:47] <rhebus> rakudo: say <5 6>.WHAT

[19:47] <pmichaud> we can add more meta-committers

[19:47] <p6eval> rakudo e36452: OUTPUT«Parcel()␤»

[19:47] <moritz_> lue: I've deleted it again, after pmichaud convinced me it was a bad idea

[19:47] <rhebus> tylercurtis: it seems there's no distinction at all. curious

[19:47] <smash> pmichaud: pull'ed, running the benchmark now, i'll update the html page as soon as it finishes

[19:47] <moritz_> lue: docs/ is now still in the 'mu' repo, only the specs were extracted into a separate repo

[19:48] <pmichaud> tylercurtis: scalars are considered to be lists of one element if asked to act that way

[19:49] <pmichaud> thus  'abc'.join(' ')  becomes 'abc'

[19:50] <tylercurtis> pmichaud: right.

[19:51] <pmichaud> tadzik: I don't know when I (or someone else) will get around to 'require' again.

[19:51] *** Guest78701 left
[19:52] <pmichaud> moritz_: message needs to go to p6l and p6c, also.  and probably p6u.

[19:52] <moritz_> pmichaud: ifyousayso

[19:53] <pmichaud> I don't see any other message edits for now.

[19:57] <tadzik> yay, Config::INI fixed

[19:57] <moritz_> ok, sending now

[19:59] <lue> there's no such thing as =head0 in Pod, right?

[19:59] *** hans__ left
[19:59] <moritz_> that only exists in PseudoPod

[20:00] <moritz_> (git filter-branch)++

[20:01] <smash> moritz_: i add a commit bit on pugs, can i have one for the new ones ?

[20:01] *** bartolin joined
[20:01] <TimToady> note that <A> is just ('A')

[20:02] <pmichaud> smash: github id?

[20:02] <moritz_> smash: you're also 'smash' on github?

[20:02] <TimToady> smashz I think

[20:02] <pmichaud> smash: added (as 'smashz')

[20:02] <pmichaud> (I already had the page open from an earlier session :)

[20:02] <smash> pmichaud, moritz_: my id on github s smashz, thank you

[20:03] <moritz_> fwiw I'm now moving perl6.org to a separate repo now too

[20:03] <smash> moritz_++ # pugs repo revamp

[20:03] <bartolin> hi #perl6

[20:03] <pmichaud> good idea

[20:03] <lue> could I get a commit bit as well? github id is lue

[20:03] <moritz_> lue: sure

[20:03] <pmichaud> lue: added

[20:03] <tadzik> bartolin: hi

[20:03] <moritz_> done

[20:04] <pmichaud> lue: interesting gravatar image :)

[20:04] *** pjcj left
[20:05] <pmichaud> that's a lot of 42s

[20:07] <lue> 42 42's to be exact :)

[20:07] <smash> pugs, reminds me haskell, which reminds me the damn transpose function.. hmmm

[20:07] <pmichaud> that's a bit square.  :)

[20:08] * pmichaud chuckles at the phrase "bit square" :)

[20:08] <tadzik> mind me adding Config::INI back to R*? I got it all fixed

[20:08] <pmichaud> tadzik: +1

[20:09] <pmichaud> afk, shopping

[20:09] *** svetlins__ left
[20:10] <bartolin> rakudo:  class Dog { has Int $.age }; my $dog = Dog.new( age => 'zzz' ); say $dog.age.WHAT;

[20:10] <p6eval> rakudo e36452: OUTPUT«Str()␤»

[20:11] <tadzik> hah

[20:11] <bartolin> a newbie's question: why doesn't "has Int $.age" prevent setting age to 'zzz'?

[20:11] <bartolin> is this not yet implemented?

[20:11] <tylercurtis> bartolin: rakudobug.

[20:11] <tylercurtis> It seems like I recall it having worked properly at one time, but I may be incorrect.

[20:11] <bartolin> tylercurtis: a known one, probably?

[20:12] * tylercurtis looks.

[20:13] *** jaldhar_ joined
[20:13] <moritz_> I'm pretty sure it's known and submitted to RT

[20:13] <moritz_> we have failing tests for it

[20:14] <bartolin> moritz_: ahh, thanks (tylercurtis++ too)

[20:14] *** bluescreen joined
[20:14] *** rindolf left
[20:15] *** bluescreen is now known as Guest58080

[20:16] <rhebus> hmm, perl6-examples/99-problems/P08-viklund.pl fails for me with "Could not find sub &infix:<compress>"

[20:16] *** _jaldhar_ joined
[20:16] *** _jaldhar left
[20:16] <rhebus> which is a shame because it looks very impressive to a perl6 newbie

[20:17] <tadzik> x3nU was to fix perl6-examples, wasn't he? :P

[20:19] *** jaldhar_ left
[20:19] *** jaldhar joined
[20:22] <x3nU> tadzik: i can't do that on my own, also i was bit busy recently ;d

[20:23] *** _jaldhar_ left
[20:25] *** tadzik left
[20:26] *** svetlins__ joined
[20:27] <TimToady> why is perl6.org labeled JavaScript?

[20:27] <moritz_> because it contains some .js files?

[20:28] <Tene> moritz, tadzik: you can use anything I've ever published online for anything you want, without restrictions.

[20:28] <Tene> moritz_: oops, I forgot your _

[20:28] <moritz_> Tene++

[20:29] * dukeleto is very excited to see specs and spectests repos on github!

[20:29] * moritz_ is very stressed

[20:30] * TimToady votes moritz_++ as one of the Ten Best-Stressed Men

[20:31] <moritz_> TimToady: do you want src/perl6/ also moved? if yes, what repo name? 'grammar' maybe?

[20:31] * lue thinks    make stresstest    deserves #2

[20:32] *** tadzik joined
[20:32] <tylercurtis> moritz_++ # For endangering his mental health for the rest of us. Try not to go crazy, though.

[20:32] <tadzik> Tene++

[20:32] <moritz_> I'll got to bed very soon :-)

[20:32] <tadzik> seen masak

[20:32] <aloha> masak was last seen in #perl6 13 hours 57 mins ago saying "but I'd much rather employ something like JSON::XS, like sorear said.".

[20:33] <TimToady> druther have something like std

[20:33] <tadzik> rhebus: iirc perl6-examples were written for the alpha branch of Rakudo, and most of them probably don't work now

[20:34] <rhebus> I'll see what i can do to fix that

[20:34] <rhebus> but I don't know perl 6 yet

[20:34] *** BillN1VUX joined
[20:35] <moritz_> TimToady: will do

[20:35] <tadzik> is there any working template engine?

[20:35] <moritz_> TimToady: but probably won't get around to it tonight

[20:35] <tadzik> html I mean

[20:35] <moritz_> tadzik: I think szabgab++ fixed HTML-Template in the masak/web repo

[20:37] <TimToady> wow, I haz 1 followers!!!

[20:37] <lue> how do I put restrictions on a parameter? Things like   sub a($a when >=0) # although that doesn't seem to work

[20:37] <moritz_> sub a($x where { $_ >= 0 }) { ... }

[20:38] <lue> aaah. thankyou

[20:38] <TimToady> rakudo: sub a($x where * >= 0) {...} # does this parse yet?

[20:38] <p6eval> rakudo e36452: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 22␤»

[20:38] <TimToady> std: sub a($x where * >= 0) {...} # does this parse yet?

[20:38] <p6eval> std 32123: OUTPUT«Potential difficulties:␤  $x is declared but not used at /tmp/_7FJoYF9Ir line 1:␤------> [32msub a([33m⏏[31m$x where * >= 0) {...} # does this parse[0m␤ok 00:01 119m␤»

[20:40] <Juerd> moritz_: Er, I never did maintain the pugs repository

[20:40] <rhebus> tadzik: are they expected to work once rakudo* implements more features? should I include some examples which work now?

[20:40] <tadzik> rhebus: it's about them I think, not about Rakudo

[20:41] <moritz_> Juerd: I had the impression you maintained the apache part of it

[20:41] <rhebus> tadzik: so I should fix them then?

[20:41] <tadzik> rhebus: would be great

[20:41] <rhebus> see what I can do

[20:41] <tadzik> poke moritz_ or someone for a commit bit

[20:41] <rhebus> got one already

[20:41] <moritz_> Juerd: if not, you still deserve thanks for maintaining and providing feather

[20:42] <Juerd> moritz_: I've prevented feather from crashing, which in some cases meant trying to make apache behave, or at least killing it when it didn't.

[20:42] <Juerd> (It has crashed, several times, under the severe loads)

[20:42] *** Guest58080 left
[20:42] <moritz_> well, that's some form of maintenance

[20:42] <Juerd> Heh

[20:42] <moritz_> not the one you usually do if you are being paid for it

[20:43] <moritz_> but still

[20:43] <Juerd> I'm afraid that the "community maintained" part of feather never got very popular, except for its first year of existence :)

[20:43] <Juerd> A lot of people have done maintenance tasks on feather

[20:43] <TimToady> it turned out to be a bit too anarchical

[20:43] <Juerd> TimToady: Certainly.

[20:44] <Juerd> But then, originally it was a box for compiling pugs and running irssi

[20:44] <Juerd> It's still used for irssi and compiling (not pugs anymore), so it's still true to its initial purpose :)

[20:45] <Juerd> 9 irssis :)

[20:46] <TimToady> now I just have to git learned

[20:46] *** s_mosher left
[20:47] <moritz_> pushing to perlt/std as we speak

[20:48] <moritz_> http://github.com/perl6/std

[20:48] <TimToady> I seen it

[20:48] <TimToady> thanks

[20:49] <moritz_> you're welcome

[20:49] *** Ross left
[20:50] *** Ross joined
[20:50] * moritz_ -> sleep

[20:50] <TimToady> zzz --> moritz_++

[20:51] <TimToady> I suppose that should be ==>

[20:53] *** timbunce left
[20:55] <lue> Why is it that typing 'use A::B' in a certain file (let's call it X.pl) doesn't work when the file containing A::B isn't in A/B.pm, instead being in the same place as X.pl

[20:55] *** CoCol joined
[20:58] <TimToady> to the first approximation, because that's not how it works in Perl 5

[20:58] <TimToady> used modules don't autoadd themselves to the search path

[20:58] <tylercurtis> lue: because that's what import is for, no?

[20:59] <tylercurtis> Or, wait.. what do you mean by "instead being in the same place as X.pl"?

[20:59] *** timbunce joined
[20:59] <lue> typing `ls ./' would result in listing X.pl and C.pm [the file containing module A::B]

[21:00] <tylercurtis> lue: well, how would Perl 6 know that C.pm contains A::B?

[21:00] <moritz_> lue: if you wrote a Perl 6 compiler, how would it know that A::B can be found in C.pm?

[21:01] <dukeleto> Juerd++ # irssi :)

[21:03] <lue> I want it to search all the .pm files in ./ for A::B. What else are module declarations for? [I guess that's not happening though]

[21:05] <TimToady> eventually we'll move more toward a model where you register your modules in the database, and then it can track things like that

[21:05] *** Mowah joined
[21:05] <TimToady> in any case, the official library is supposed to work like that, and your local code could work like that, or more like the current PERL6LIB search model

[21:05] <TimToady> but that isn't gonna just search a bunch of files on spec for you

[21:06] <TimToady> that would be slow and error prone

[21:08] <lue> When I had A/B.pm to experiment, use A::B didn't work in the REPL.

[21:08] <tylercurtis> Was A/B.pm in a directory in your @*INC?

[21:10] <lue> in ./

[21:10] <moritz_> and was . in @*INC?

[21:10] <mathw> o/

[21:10] <lue> rakudo: say @*INC

[21:10] <p6eval> rakudo ff5b4c: OUTPUT«lib/home/p6eval/.perl6/lib/home/p6eval//p1/lib/parrot/2.7.0-devel/languages/perl6/lib.␤»

[21:10] <rhebus> does the reduce metaoperator work on user operators?

[21:11] <TimToady> supposed to

[21:11] <rhebus> I've been having a go but I can't work it out: http://pastebin.com/kchCQev7

[21:11] <rhebus> the line labelled #BOOM doesn't work

[21:11] <TimToady> in rakudo you have to make them 'our' though

[21:11] <moritz_> rhebus: in rakudo it only works if you declare it with 'our'

[21:11] <TimToady> which is a known bug

[21:11] <rhebus> aha

[21:11] <moritz_> rakudo: our sub infix:<abc>($a, $b) { $a + $b + 1 }; say [abc] 1, 2, 3

[21:11] <p6eval> rakudo ff5b4c: OUTPUT«8␤»

[21:11] <lue> I'm having an amazingly difficult time figuring out what is IMO a very confusing system for modules.

[21:12] <TimToady> still the bogus design that came from parrot assuming it was re-implementing Perl 5

[21:12] <rhebus> should I update the 99-examples to use "our" or should I leave it given it's a known bug

[21:12] <moritz_> update please

[21:12] <tylercurtis> lue: What is confusing you?

[21:12] <TimToady> our will still work later, since it does install a lexical alias

[21:12] <moritz_> (as long as the workaround is still valid Perl 6)

[21:13] * moritz_ -> really sleep :-)

[21:13] <rhebus> and should I comment that it's a bug workaround?

[21:13] <TimToady> zzz ==> moritz_++ really

[21:13] <rhebus> I'm not the person to ask if it's valid perl 6, I'm doing the 99 examples to learn it...

[21:14] <TimToady> our is valid, if suboptimal in the long run

[21:14] <TimToady> especialy if it causes global collisions

[21:15] <lue> I just can't seem to get anything working. I do A/B.pm like you're 'supposed to', and then I can't use sub C, even after attaching `is export' to sub C and putting a redundant 'module A::B' at the top.

[21:15] <rhebus> I think that's worth noting in a comment

[21:16] *** Guest23195 left
[21:16] <tylercurtis> lue: can you show us your code example? "module A::B; our sub C () is export {...}" should make C available to any scope that does "use A::B;".

[21:17] <lue> ...

[21:17] * lue is in stunned silence

[21:18] *** bluescreen joined
[21:18] <lue> You mean to say all I had to do was add `our' in front of sub C !? *sobs to self*

[21:18] *** bluescreen is now known as Guest62968

[21:18] <TimToady> it's supposed to work with 'my' too, but as the other conversation was pointing out, rakudo is still kinda busted that way

[21:19] <lue> It solves why my experimenting failed, but it doesn't solve the originial problem of there being only OWTDI when it comes to modules.

[21:23] <tylercurtis> If @*INC works like Perl 5's @INC, you can stick callables in there (or maybe objects with an INC method?), and do whatever bizarre import magic you want with it.

[21:26] <tylercurtis> Or, at least, it should for require. Not sure about use.

[21:26] * tylercurtis hasn't written much Perl 5 and is just basing this on perldoc -f require.

[21:28] *** Italian_Plumber joined
[21:29] *** CoCol left
[21:32] <Tene> lue: you don't need 'our'

[21:32] <Tene> sec, I'll post

[21:32] <lue> I just don't like the A/B.pm setup in a source code repository, and it shouldn't be the only way to do it. [after all, this *is* Perl 6 :)]

[21:33] <Tene> lue: http://gist.github.com/565509

[21:33] <Tene> lue: that example works fine for me.  How does it differ from what you say doesn't work?

[21:34] <lue> Hm. I wonder why it didn't work before.

[21:38] <lue> Grr. Not even ./A::B.pm will work with "use A::B".

[21:38] *** hercynium joined
[21:41] <Tene> whaaat?  I don't follow what that means.

[21:41] <Tene> Oh.

[21:41] <Tene> No, of course not.

[21:42] <Tene> I don't think that that would be *unreasonable* to add to the spec.

[21:43] <Tene> Having multiple possible locations for modules within a single search path would require a specced order to search them in, and possible confusion there, but that's doable.

[21:44] <Tene> You'd have to specify the behavior when there *are* multiple locations.  Would there be a warning?  Would it be an error?  Is A/B::C/D.pm allowed?  A::B/C/D.pm?  Only trailing /s can be replaced with ::s?

[21:44] <Tene> This isn't anything that anyone involved with Perl 6 has addressed yet, or asked for.  I think it would be a nice addition to the spec.

[21:45] <lue> afk, but let me say this: imo, the use of modules in Perl 6 is not very Perl 6 right now, because There Is Only One Way To Do It.

[21:46] <rhebus> using ::s is a Good Thing, because it abstracts away the notion of a path separator

[21:46] <TimToady> for the official library, there will be only one way to do it, insofar as once something is official, it must be considered immutable; to change you must give it a different longname (which includes version)

[21:47] <TimToady> the local stuff can be looser, of course

[21:48] <TimToady> but I suspect some people would like their user view to work much like the official library writ small

[21:49] <TimToady> so every use is essentially a database query rather than a path search

[21:49] <TimToady> path searching just doesn't scale very well, and is somewhat fragile

[21:49] <Tene> lue: if you want to do something else, you certainly can do it, there's just only one module loading style specified ATM.  You could certainly write a lue_special_use 'A::B' that did what you wanted.

[21:50] *** tadzik left
[21:50] <Tene> lue: I do recommend that you put together an initial proposal with a few open questions and submit to p6l

[21:54] *** Ross left
[21:54] *** zby_home left
[21:55] *** Ross joined
[22:00] <TimToady> I dislike that specs/ and spectests/ are not very tab-friendly

[22:00] <TimToady> so whatever we rename it to should probably not start with "spec"

[22:01] *** Chillance_ joined
[22:01] <diakopte1> testspec?

[22:01] <diakopte1> vs spec?

[22:01] <TimToady> "valid" starts with a rare letter

[22:01] <TimToady> or something like, "inspect"

[22:01] <TimToady> Implementation Neutral SPEC Tests

[22:01] *** synth joined
[22:01] <diakopte1> heh

[22:02] <diakopte1> Implementation Neutered

[22:02] <TimToady> or "respect", "prospect", etc

[22:03] <tylercurtis> testsuite or official-test-suite if we want a boring name?

[22:03] <TimToady> validation is more officialese

[22:05] <TimToady> and I kinda liked Validate All Language Implementation Details

[22:06] <TimToady> but then I also liked Sucks Or Rocks Reliably Yet

[22:07] <TimToady> is the only way to rename a repo to fork it?

[22:07] <diakopte1> Backronyms Are Cool, Kinda, Rendering Order Naturally Yet Mnemonically

[22:08] <TimToady> ++

[22:08] <TimToady> so we should first pick a word like TORTURE and then figure out what it means

[22:09] <tylercurtis> TimToady: Going to the repo, click Admin, type in a different name in the Repository Name place and click Rename also works, I think (I haven't tried it, but I'm looking at the text field next to the button that says Rename).

[22:09] <TimToady> .oO(torcher)

[22:09] <rhebus> rakudo: <1 2>.map: { $_ xx 2 }

[22:09] <p6eval> rakudo ff5b4c:  ( no output )

[22:09] <TimToady> just seems like this would be better done sooner than later

[22:09] <TimToady> if we can come up with a suitable name

[22:10] <tylercurtis> rakudo: .say for <1 2>.map: { $_ xx 2};

[22:10] <p6eval> rakudo ff5b4c: OUTPUT«1␤1␤2␤2␤»

[22:10] <tylercurtis> rhebus: ^^

[22:10] <rhebus> rakudo: my @l = <1 2>.map: { $_ xx 2 }; @l.perl.say

[22:10] <p6eval> rakudo ff5b4c: OUTPUT«["1", "1", "2", "2"]␤»

[22:10] <rhebus> hmm

[22:11] <tylercurtis> rakudo: my $l = <1 2>.map: { $_ xx 2}; say $l.perl;

[22:11] <p6eval> rakudo ff5b4c: OUTPUT«(("1", "1"), ("2", "2"))␤»

[22:11] <diakopte1> what are we naming again?

[22:11] <rhebus> that's what I'm after

[22:12] <rhebus> tylercurtis: what do those round brackets mean? is it a flat list or not?

[22:12] <TimToady> it means it's a parcel that hasn't decided flatness yet

[22:12] <TimToady> that's a lazy decision

[22:13] <tylercurtis> rakudo: say (<1 2>.map: { [$_ xx 2] }).perl

[22:13] <TimToady> in slice context (not yet impl) it would turn into subsequences

[22:13] <rhebus> when might it not be flat?

[22:13] <p6eval> rakudo ff5b4c: OUTPUT«(["1", "1"], ["2", "2"])␤»

[22:13] <tylercurtis> The above also works if you really want the result to not be flat.

[22:13] <rhebus> no, i want the result flut

[22:13] <rhebus> *flat

[22:13] <TimToady> most listy functions will assume flat by default

[22:14] <rhebus> I'm confused, have I suceeded or not?

[22:14] *** Ross left
[22:14] <rhebus> here's my attempt at P12: http://pastebin.com/TzK9EZv2

[22:14] <tylercurtis> "my @a = <1 2>.map: { $_ xx 2 };" flattened.

[22:14] <TimToady> that would depend on what you want to do with the value

[22:15] <TimToady> rakudo: my $l = <1 2>.map: { $_ xx 2}; say $l.flat.perl

[22:15] <p6eval> rakudo ff5b4c: OUTPUT«("1", "1", "2", "2")␤»

[22:15] <rhebus> it's shorter and neater than the existing P12 but it's of ambiguous flatness

[22:16] <TimToady> that's fine, the ~ will flatten

[22:17] <TimToady> most operators that don't want a multidimensional argument will flatten

[22:17] <TimToady> you'd generally use slice to force it the other way

[22:17] <rhebus> I think it's best to explicitly flatten

[22:17] *** timbunce left
[22:17] <rhebus> so I'll do that

[22:18] *** sahadev joined
[22:18] <rhebus> tada: http://pastebin.com/34FaLSav

[22:18] <diakopte1> were we naming the testsuite dir?

[22:19] <diakopte1> niecza: say 3

[22:19] <p6eval> niecza 568bfa6: OUTPUT«3␤»

[22:19] <diakopte1> O_O

[22:19] <diakopte1> cool

[22:19] <TimToady> you can just say 'when Array'

[22:20] <TimToady> since $_ is already set

[22:20] <TimToady> well, not as the arg to ??!! though

[22:21] <diakopte1> std: say 4 ?? !! 4

[22:21] <p6eval> std 32123: OUTPUT«[31m===[0mSORRY![31m===[0m␤Found ?? but no !! at /tmp/MRT9qt2wvc line 1 (EOF):␤------> [32msay 4 ?? !! 4[33m⏏[31m<EOL>[0m␤Confused at /tmp/MRT9qt2wvc line 1 (EOF):␤------> [32msay 4 ?? !! 4[33m⏏[31m<EOL>[0m␤Parse failed␤FAILED 00:01 116m␤»

[22:22] <diakopte1> nits are always discoverable with a powerful enough microscope

[22:22] <TimToady> in any case, you can always leave the $_ off the front of $_.method

[22:23] *** aloha left
[22:23] *** bacek left
[22:23] <rhebus> TimToady: ++ http://pastebin.com/nHeaMMZy

[22:24] <TimToady> that should work

[22:24] <rhebus> it does read nicer than ?? !!

[22:24] <rhebus> it does work

[22:24] *** M_o_C joined
[22:25] <rhebus> and it's nicer than the other solution :)

[22:25] <TimToady> once you start getting used to smartmatching, things like .isa start looking like a code smell...er, smelling like an eyesore...er...

[22:26] <rhebus> don't look at me in that tone of voice

[22:26] <TimToady> :)

[22:27] <rhebus> perl 6 is really really nice so far

[22:27] * TimToady bows on behalf of a whole bunch o' folks

[22:28] * mathw is always glad to hear somebody say that

[22:28] <rhebus> I've known of it for a while, and heard Damian Conway do a talk at london.pm raving about it

[22:29] <rhebus> but today's the first day I've dived into it

[22:29] *** BillN1VUX left
[22:30] <mathw> Perl 6 tends to get people to want to rave about it

[22:30] <diakopte1> I presume the raving was intelligible? :)

[22:30] <TimToady> we won't ask if it was mad, we already know the answer

[22:30] <rhebus> as intelligible as Damian ever gets

[22:35] *** crythias joined
[22:35] *** bacek joined
[22:35] *** aloha joined
[22:37] *** svetlins__ left
[22:37] <rhebus> is there no infix !%% ?

[22:38] <rhebus> rakudo: say 4 !%% 3

[22:38] <p6eval> rakudo ff5b4c: OUTPUT«===SORRY!===␤Infix !% is deprecated in favor of infix %% at line 22, near "% 3"␤»

[22:38] <TimToady> rakudo: say 4 % 3

[22:38] <rhebus> :/

[22:38] <p6eval> rakudo ff5b4c: OUTPUT«1␤»

[22:38] <rhebus> oh

[22:38] <rhebus> er

[22:38] <rhebus> yes

[22:38] <rhebus> that error message is confusing, but you have a very good point

[22:38] <TimToady> in fact, %% used to be named !%, till we discovered that was confusing

[22:39] <TimToady> hmm

[22:39] <TimToady> rakudo: say 4 ![%%] 3

[22:39] <p6eval> rakudo ff5b4c: OUTPUT«1␤»

[22:40] <rhebus> heh, it's nice to write an exercise and get pretty much exactly the same as what somebody else has got

[22:41] <rhebus> a lot of these 99 problems are only actually difficult in a LISPy environment

[22:42] <rhebus> they'd be a lot trickier when having to decompose conses rather than just indexing arrays

[22:43] *** bjarneh joined
[22:44] *** bjarneh left
[22:44] <rhebus> i got 99 problems but lisp ain't one

[22:45] *** jhuni joined
[22:45] *** hercynium left
[22:49] <rhebus> does rakudo do tail-call? are recursive examples a sensible idea?

[22:50] *** svetlins__ joined
[22:56] *** Italian_Plumber left
[22:57] <TimToady> p6 is specced to assume tail calls are optimized, but I doubt rakudo does it yet

[22:57] *** xinming left
[22:59] *** xinming joined
[23:02] *** meppl left
[23:14] <rhebus> right I've pushed my examples to github, time for bed

[23:16] *** rhebus left
[23:17] *** Mowah left
[23:30] *** sahadev left
[23:31] *** M_o_C left
[23:31] *** svetlins__ left
[23:32] *** svetlins__ joined
[23:37] *** cotto joined
[23:37] *** svetlins__ left
[23:44] *** masonkramer left
[23:44] *** masonkramer_ joined
[23:45] *** jedai joined
[23:53] <tylercurtis> Has Perl 5 stolen ... yet?

[23:54] <TimToady> they have a problem: ... already means something else

[23:54] <TimToady> it's a variant of scalar ..

[23:55] <TimToady> I'm thinking "roast"  repo of all spec tests (or some such)

[23:55] *** svetlins joined
[23:56] <TimToady> can be used as both a noun and a verb

[23:57] *** svetlins left
[23:58] <tylercurtis> http://perldoc.perl.org/perlop.html#Yada-Yada-Operator They seem to have "!!!", but it's named "...".

[23:58] *** svetlins joined
[23:58] <TimToady> that's different, where a term is expected

[23:58] <TimToady> or were you asking about p6's yada?

[23:58] <TimToady> rather than series

[23:59] * tylercurtis was unclear.

[23:59] <tylercurtis> I meant yada, yes.

[23:59] <TimToady> spectests/ is now roasts/

[23:59] <TimToady> er, roast/

[23:59] *** svetlins left
