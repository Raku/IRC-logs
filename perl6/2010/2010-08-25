[00:01] * masak submits suspected backtrace printer bug RT ticket

[00:01] *** Psyche^ joined
[00:03] <masak> two o'clock. time to sleep a tiddle bittle.

[00:03] <masak> 'night, #perl6!

[00:03] *** masak left
[00:03] <TimToady> er, nighty night, belatedly

[00:04] *** lest_away is now known as lestrrat

[00:05] *** Patterner left
[00:05] *** Psyche^ is now known as Patterner

[00:18] *** rgrau__ joined
[00:19] *** rgrau_ left
[00:25] *** masonkramer joined
[00:26] *** rgrau__ left
[00:27] *** risou left
[00:32] *** meppl left
[00:36] *** melte left
[00:43] *** drbean joined
[00:45] *** draxil left
[00:50] *** envi^home joined
[00:56] *** Patterner left
[00:57] *** envi^home left
[01:02] *** draxil joined
[01:06] *** Psyche^ joined
[01:06] *** Psyche^ is now known as Patterner

[01:11] *** fod left
[01:15] *** stepnem left
[01:18] *** stepnem joined
[01:32] *** draxil left
[01:34] *** melte joined
[01:39] *** whiteknight left
[01:45] *** thundergnat left
[01:47] *** rurban left
[02:06] *** xinming left
[02:07] *** xinming joined
[02:10] *** agentzh joined
[02:17] *** masonkramer left
[02:20] *** Italian_Plumber left
[02:23] <diakopter> oo; who fixed the timout on p6eval

[02:40] *** Italian_Plumber joined
[02:41] *** Italian_Plumber left
[02:46] *** guidjos joined
[02:46] <colomon> rakudo: say "F2D DAF".trans("D..GA..E" => "GA..B")

[02:46] <p6eval> rakudo 82c9e9: OUTPUT«B2G GAB␤»

[02:47] *** guidjos left
[02:48] <colomon> hmmm, something slightly wrong there.

[02:48] <colomon> rakudo: say "F2D DAF".trans("D..GA..E" => "GA..F")

[02:48] <p6eval> rakudo 82c9e9: OUTPUT«B2G GDB␤»

[02:52] <colomon> rakudo: say "F2D DAF".trans("C..GABc..gab" => "FGABc..gab")

[02:52] <p6eval> rakudo 82c9e9: OUTPUT«B2G GdB␤»

[02:53] <colomon> :\

[02:56] <colomon> rakudo: for $*IN.lines { say $_.trans("C..GABc..gab" => "FGABc..gab"); }

[02:56] <p6eval> rakudo 82c9e9: OUTPUT«too few positional arguments: 2 passed, 3 (or more) expected␤  in <anon> at line 22:/tmp/Rc2ejz8lmk␤  in main program body at line 1␤»

[02:56] <colomon> rakudo: for $*IN.lines { say "F2D DAF".trans("C..GABc..gab" => "FGABc..gab"); }

[02:57] <p6eval> rakudo 82c9e9: OUTPUT«(timeout)2G GdB␤B2G GdB␤»

[02:58] <colomon> Anyone know if this bug has been reported yet?

[03:03] <colomon> rakudo: for $*IN.lines { say $_.trans("C..GABc..gab" => "FGABc..f"); }

[03:03] <p6eval> rakudo 82c9e9: OUTPUT«too few positional arguments: 2 passed, 3 (or more) expected␤  in <anon> at line 22:/tmp/6YGz39Zqgl␤  in main program body at line 1␤»

[03:04] <colomon> rakudo: for $*IN.lines { say $_.trans("C..GABc..gab" => "FGABc..g"); }

[03:04] <p6eval> rakudo 82c9e9: OUTPUT«too few positional arguments: 2 passed, 3 (or more) expected␤  in <anon> at line 22:/tmp/DdFGMFTxKZ␤  in main program body at line 1␤»

[03:12] <colomon> rakudo: for $*IN.lines { say $_.trans("C" => "F"); }

[03:13] <p6eval> rakudo 82c9e9: OUTPUT«too few positional arguments: 2 passed, 3 (or more) expected␤  in <anon> at line 22:/tmp/YKbRx1RdKO␤  in main program body at line 1␤»

[03:13] <colomon> rakudo: for $*IN.lines { say $_.trans("C" => "F", "D" => "G"); }

[03:13] <p6eval> rakudo 82c9e9: OUTPUT«Attributes of type 'INTVAL *' cannot be subclassed from a high-level PMC.␤  in <anon> at line 22:/tmp/1s6FRrSI1A␤  in main program body at line 1␤»

[03:13] <colomon> rakudo: for $*IN.lines { say  "F2D DAF".trans("C" => "F", "D" => "G"); }

[03:14] <p6eval> rakudo 82c9e9: OUTPUT«F2G GAF␤F2G GAF␤F2G GAF␤F2G GAF␤F2G GAF␤F2G GAF␤F2G GAF␤F2G GAF␤F2G GAF␤F2G GAF␤F2G GAF␤F2G GAF␤F2G GAF␤F2G GAF␤F2G GAF␤F2G GAF␤F2G GAF␤F2G GAF␤F2G GAF␤F2G GAF␤F2G GAF␤F2G GAF␤F2G GAF␤»

[03:22] <colomon> huh.  looks like if I use "djsgfjsk".trans, it calls Cool.trans, but if I use $_.trans, it's calling something else.

[03:23] <colomon> rakudo: for $*IN.lines { say (~$_).trans("C" => "F", "D" => "G"); }

[03:23] <p6eval> rakudo 82c9e9: OUTPUT«(timeout)Berge, Land am Strome,␤Land der Äcker, Land der Gome,␤Land der Hämmer, zukunftsreich!␤Heimat bist du großer Söhne,␤Volk, begnadet für das Schöne,␤vielgerühmtes Österreich,␤vielgerühmtes Österreich!␤␤»

[03:31] *** molaf joined
[03:41] *** ggoebel left
[03:44] <colomon> rakudo: say ([+] 1..10) ** 2 - [+] (1..10).map: * ** 2

[03:44] <p6eval> rakudo 82c9e9: OUTPUT«2640␤»

[03:46] *** leprevost joined
[04:03] *** PZt left
[04:04] *** draxil joined
[04:12] *** awwaiid left
[04:21] *** shade\ left
[04:22] *** shade\ joined
[04:24] <jferrero> rss activity of rakudo.org: 02/25/2009

[04:28] *** jferrero left
[04:28] *** leprevost left
[04:48] *** jaldhar left
[05:01] *** molaf left
[05:06] <dalek> nqp-rx: e71d569 | bacek++ | / (2 files):

[05:06] <dalek> nqp-rx: Use @a.push form instead of pir::push

[05:06] <dalek> nqp-rx: review: http://github.com/perl6/nqp-rx/commit/e71d56954a43020b7a44cbcf7aaafd5fb7e0067f

[05:06] *** simcop2387 left
[05:08] *** plobsing left
[05:16] *** jaldhar joined
[05:17] *** tylercurtis left
[05:20] *** kaare joined
[05:20] *** kaare is now known as Guest5385

[05:22] *** simcop2387 joined
[05:25] *** tylercurtis joined
[05:29] *** lestrrat is now known as lest_away

[06:03] *** shade\ left
[06:04] *** shade\ joined
[06:04] *** uniejo joined
[06:12] *** wtw joined
[06:13] *** justatheory left
[06:15] <TiMBuS> ok so if you make '..' check for Code on either end, you can return -> $z { $min .. $max($z) }, and this solves the @array[1..*-1] issue. @array[0..*] still broken. is this the right solution?

[06:17] *** drbean left
[06:24] *** Su-Shee joined
[06:24] <Su-Shee> hi everyone.

[06:26] <moritz_> good morning

[06:27] <moritz_> TiMBuS: no; the right solution is to make infix:<..> curry on WhateverCode but not on Whatever

[06:32] *** shade\ left
[06:33] *** shade\ joined
[06:40] *** mberends left
[06:47] *** Mowah joined
[06:51] <sorear> rakudo: ([X] (<a b c>),(<1 2 3>),(<x y z>)).perl.say

[06:51] <p6eval> rakudo 82c9e9: OUTPUT«(timeout)»

[06:53] <sorear> rakudo: ((<a b c>) X (<1 2 3>) X (<x y z>)).perl.say

[06:53] <p6eval> rakudo 82c9e9: OUTPUT«No applicable candidates found to dispatch to for 'infix:<X>'. Available candidates are:␤:(Any $lhs, Any $rhs)␤␤  in main program body at line 22:/tmp/XnCXnX9FhH␤»

[06:54] <sorear> rakudo: ([<a b c>] X [<1 2 3>] X [<x y z>]).perl.say

[06:54] <p6eval> rakudo 82c9e9: OUTPUT«No applicable candidates found to dispatch to for 'infix:<X>'. Available candidates are:␤:(Any $lhs, Any $rhs)␤␤  in main program body at line 22:/tmp/M3MFADdCDr␤»

[06:54] <sorear> rakudo: say (1,2 X 3,4)

[06:54] <p6eval> rakudo 82c9e9: OUTPUT«13142324␤»

[06:54] <sorear> rakudo: say (1,2 X 3,4 X 5,6)

[06:54] <p6eval> rakudo 82c9e9: OUTPUT«No applicable candidates found to dispatch to for 'infix:<X>'. Available candidates are:␤:(Any $lhs, Any $rhs)␤␤  in main program body at line 22:/tmp/BcsCRxh1OM␤»

[06:54] <sorear> rakudo: say (1,2 X (3,4 X 5,6))

[06:54] <p6eval> rakudo 82c9e9: OUTPUT«13151316141514162325232624252426␤»

[06:55] *** flatwhatson left
[06:55] <sorear> rakudo: say ((1,2) X ((3,4) X (5,6))).perl

[06:55] <p6eval> rakudo 82c9e9: OUTPUT«((1, 3), (1, 5), (1, 3), (1, 6), (1, 4), (1, 5), (1, 4), (1, 6), (2, 3), (2, 5), (2, 3), (2, 6), (2, 4), (2, 5), (2, 4), (2, 6))␤»

[06:56] <sorear> rakudo: say ((1,2) X ((3,4) X (5,6)).map([$^a, $^b])).perl

[06:56] <TiMBuS> moritz_, does perl 6 have its own way to curry for that case?

[06:56] <p6eval> rakudo 82c9e9: OUTPUT«Lexical '$a' not found␤  in main program body at line 22:/tmp/v9Y0eDA_0v␤»

[06:56] <moritz_> TiMBuS: for which case?

[06:56] <sorear> rakudo hates me

[06:57] <sorear> this should just be 1,2 X 3,4 X 5,6

[06:57] <TiMBuS> er, 1..*-1

[06:57] <moritz_> sorear: you need a block around [$^a, $^b]

[06:57] <sorear> anyways, diakopter, ping

[06:57] <moritz_> TiMBuS: that should curry

[06:57] *** zag joined
[06:57] <TiMBuS> is { $min .. $max($^arg) } not the right way to curry that?

[06:57] * sorear is back

[06:58] <moritz_> it is

[06:58] <moritz_> wait

[06:58] <moritz_> { $min ... $^arg }

[06:58] <moritz_> { $min .. $^arg }

[06:58] <TiMBuS> but the whatevercode is {* - 1}

[06:59] <TiMBuS> so you'd need to run it

[07:00] <moritz_> ah right

[07:01] <moritz_> 1..*-1 is supposed to curry exactly like 1+(*-1) does

[07:01] <moritz_> I'm just not sufficiently awake to explain it correctly :-)

[07:02] <TiMBuS> thats alright then. well then that seems to be what i've done for infix '..', but I still have no idea how to fix [1..*]

[07:02] <TiMBuS> i think range needs to store a Whatever instead of an Inf

[07:02] <TiMBuS> as its $max

[07:03] <moritz_> I think [1..*] should just curry the [] too

[07:03] <moritz_> not sure though

[07:04] *** zulon joined
[07:04] <TiMBuS> uh, i mean .[1..*]

[07:04] <TiMBuS> if that makes it different

[07:05] <TiMBuS> postcircumfix[] is getting given a Range which has 1..Inf at the moment, which is why @a[1..*] will hang

[07:08] *** flatwhatson joined
[07:09] <TiMBuS> Range needs to store Whatever instead of Inf (which is why a few days ago I asked if *.Num could just be an Inf)

[07:09] <moritz_> hm

[07:09] <moritz_> I think there should be postcircumfix accepting a Range, which clips it to the upper index of the arraz

[07:09] <moritz_> *array

[07:10] <moritz_> so that   @a[1..1000]  boils down to  @a[1 .. (@a.end min 1000)]

[07:10] <TiMBuS> rakudo: my @a = <1 2>; @a[0..4].perl.say

[07:10] <p6eval> rakudo 82c9e9: OUTPUT«("1", "2", Any, Any, Any)␤»

[07:11] <tylercurtis> What about assignment?

[07:11] <moritz_> rakudo: my @a = 1..*; say @a[5]

[07:11] <p6eval> rakudo 82c9e9: OUTPUT«6␤»

[07:11] <TiMBuS> atm rakudo fills in the gaps. is that per the spec?

[07:12] <moritz_> no

[07:12] <tylercurtis> I'd expect "my @a; @a[0..4] = 1, 2, 3, 4, 5;" to be essentially the same as "my @a = 1, 2, 3, 4, 5;"

[07:12] <TiMBuS> oh thats a good point

[07:14] <moritz_> huh

[07:14] <moritz_> I can't think of a clever way to solve that, and still have the clipping that the spec wants

[07:15] <TiMBuS> parser magic?

[07:16] <sorear> It would seem that Fast Boyer-Moore does not play well with 0x10FFFF-character charsets

[07:19] <tylercurtis> Maybe the returned slice could keep track of both the explicit range and the clipped version and use the former when assigned to.

[07:21] *** Mowah left
[07:21] *** Mowah joined
[07:22] <moritz_> TiMBuS: can't be parser magic, the parser doesn't know if something is an lvalue or not

[07:22] <moritz_> consider

[07:22] <moritz_> multi f($x is rw) { ... };   f @a[0..4]

[07:22] <moritz_> there might be other non-rw multis

[07:26] *** Mowah left
[07:26] *** Mowah joined
[07:27] *** Mowah left
[07:27] *** Mowah joined
[07:28] *** Mowah left
[07:28] *** Mowah joined
[07:28] *** zulon left
[07:32] <tylercurtis> Good night, #perl6.

[07:33] *** tylercurtis left
[07:34] *** Guest96590 joined
[07:35] *** Guest96590 left
[07:37] <dalek> book: 95496c8 | qiuhw++ | README:

[07:37] <dalek> book: typo fix of README.

[07:37] <dalek> book: review: http://github.com/perl6/book/commit/95496c8f1fc6951ae39612036eebcd307d22ecf6

[07:39] *** Mowah left
[07:40] *** Mowah joined
[07:42] *** Mowah left
[07:44] *** wamba joined
[07:54] *** zulon joined
[07:55] *** drbean joined
[07:55] *** tadzik joined
[07:55] *** xinming left
[08:03] *** PZt joined
[08:04] <tadzik> good morning

[08:07] <sorear> hello

[08:11] <moritz_> oh hai

[08:18] *** zulon left
[08:20] <tadzik> when is Star coming?

[08:21] *** pnate joined
[08:30] <moritz_> need to ask pmichaud 

[08:33] *** dakkar joined
[08:35] <mathw> tadzik: just keep paying attention, when you feel the firey warmth on your skin you know it's close

[08:35] *** timbunce joined
[08:35] <tadzik> :)

[08:36] <sorear> tadzik: a month ago

[08:36] <tadzik> oh noes

[08:37] <moritz_> I think the question was when *+1 comes out

[08:38] *** daxim joined
[08:50] *** am0c joined
[08:57] *** azert0x joined
[08:58] *** tadzik left
[09:11] *** tadzik joined
[09:15] * sorear wonders if he can get away with optimizing /foo/ to /.*?foo/

[09:16] <moritz_> more like /.*?<(foo/

[09:16] <moritz_> and only if no :pos modifier is present

[09:16] *** azawawi joined
[09:17] <azawawi> hi

[09:17] <azawawi> is $parser->lineof method in STD broken? i get "Use of uninitialized value $ORIG in split at lib/Cursor.pm line 113."

[09:18] <azawawi> ->lineof($pos) should return a line number but it always returns zero now and that warning

[09:20] <sorear> The fact that you could ever use it like that was a bug, now fixed thankfully

[09:20] <sorear> You probably appreciate the fix, since it made compiling modules without system() possible

[09:21] <azawawi> so what is the correct usage now?

[09:21] <sorear> parser support routines should only ever be used in the dynamic scope of parse

[09:23] <azawawi> sorear: that's what is breaking right now, http://pastebin.ca/1924975

[09:23] <azawawi> sorear: i used to do ->lineof in S:H:P6 to get the line number of a position

[09:25] <sorear> assigning the text to $::ORIG in the outer dynamic scope will be needed

[09:25] *** ejs joined
[09:29] <azawawi> sorear: Thanks it worked. A bit hackish though.

[09:29] <azawawi> sorear: S:H:P6 finally going to be released soon :)

[09:32] <tadzik> what is S::H?

[09:33] <azawawi> tadzik: S:H:P6 => Syntax::Highlight::Perl6

[09:33] <tadzik> oh, nice

[09:33] <azawawi> tadzik: http://search.cpan.org/~azawawi/Syntax-Highlight-Perl6-0.81/lib/Syntax/Highlight/Perl6.pm

[09:34] *** masak joined
[09:34] <masak> oh hai, #perl6

[09:35] <moritz_> phenny: tell pmichaud I've tried to read the code for the operator precedence parser; to me it looks like it would be much cleaner (and more extensible) to store things like %!ohash in actual attributes, and require instantiation for the grammar before parsing; is there a good reason against doing it that way?

[09:35] <phenny> moritz_: I'll pass that on when pmichaud is around.

[09:35] <mathw> o/ masak

[09:36] <moritz_> \o masak

[09:36] <masak> \o o/

[09:39] <sorear> masak: I read your paper thingie

[09:39] <masak> the one about searching?

[09:40] <sorear> yea

[09:40] <masak> was it any good?

[09:40] <sorear> well, if we were doing this 10 years ago it would be

[09:40] <sorear> but most of those algorithms have hidden dependencies on the alphabet size

[09:41] <sorear> what's good with 256 or 128 characters is not nearly so good with 0x10FFFE (use codes) or infinity (use graphs)

[09:41] <azawawi> sorear++ #re-compiling modules via STD now works perfectly in Padre

[09:42] <sorear> we might be able to get away with doing (use bytes) searching in many cases, like how you can search English text without knowing about words, it might also be possible to skirt under the encoding

[09:43] <sorear> note that Perl 5 implemented Fast Boyer-Moore with preprocessing, which is explicitly (but tersely) killed in Perl 6 (S29:884)

[09:44] <moritz_> right, study() never worked with Unicode

[09:45] <sorear> (am I the only one who has ever thought about implementing Karp-Rabin using polynomial fields?)

[09:47] <masak> think so. :)

[09:48] * moritz_ wonders what it is that Rabin carps about :-)

[09:49] <masak> moritz_: nono, it's Karp that rabins :)

[09:49] *** barika left
[09:49] <masak> S29:891: "Note: P5's tied() is roughly replaced by P6's variable()." only mention of 'variable()'?

[09:50] <moritz_> fossile

[09:50] <masak> ...should be... VAR()?

[09:52] <moritz_> probably

[09:52] *** azawawi left
[09:54] * masak doesn't know enough about tied()

[09:55] <jnthn> morning, all

[09:56] <jnthn> Yes, VAR sounds like the thing.

[09:56] <masak> jnthn! \o/

[09:56] <jnthn> Though it's identity on non-scalars.

[09:56] <jnthn> masak! \o/

[09:57] * sorear out

[09:57] * moritz_ spectests tylercurtis++'s memory leak fix

[10:06] *** bythos joined
[10:07] <bythos> hello

[10:07] <moritz_> hi

[10:07] <bythos> :D

[10:08] <bythos> so silly question but does anyone have any idea if perl6 will ever get to production quality?

[10:08] <tadzik> sure it will

[10:08] <tadzik> even before christmas

[10:09] <bythos> crazy talk

[10:09] <bythos> been waiting 10years

[10:09] <bythos> :D

[10:09] <moritz_> don't wait, help

[10:09] <bythos> maybe

[10:09] <moritz_> there's plenty of stuff to do

[10:09] <tadzik> first to criticise are the last to contribute. No offence

[10:10] <bbkr> how bare arrays behave in regexps now? like literal match?

[10:10] <bythos> lol

[10:10] <bythos> its all very light

[10:10] <moritz_> write modules, documentation, blogs, compiler....

[10:10] <moritz_> bbkr: @a is supposed to interpolate just like @a[0] | @a[1] | ...

[10:10] <masak> bythos: you could do like some of us. we waited 5 years, and then we did other stuff... we helped bring it along. :)

[10:10] <tadzik> play the Perl 6 mmorpg

[10:11] <moritz_> bbkr: so the interpolation rules for scalars apply to each item individually

[10:11] <tadzik> http://use.perl.org/~masak/journal/39445

[10:11] <bbkr> moritz_: but it should interpolate in range only? like /<@a>/ or bare too like /@a/? there is some inconsistency with STD

[10:12] <bythos> i have to get something off my back 

[10:12] <bythos> i'm very angry

[10:12] <masak> hugme: hug bythos 

[10:12] * hugme hugs bythos

[10:12] <tadzik> I knew it will happen :)

[10:12] <bythos> i'm been force to programme in php

[10:12] <tadzik> hugme: hug bythos 

[10:12] * hugme hugs bythos

[10:13] <bbkr> std: "" ~~ /@t/ # looks like literal match

[10:13] <moritz_> rakudo: my @a = <foo bar>; say 'a gymnast walks to the bar' ~~ / @a /

[10:13] <p6eval> std 32103: OUTPUT«ok 00:01 119m␤»

[10:13] <p6eval> rakudo 82c9e9: OUTPUT«␤»

[10:13] <bbkr> rakudo: "" ~~ /@t/ # looks like it wants @t array to be defined

[10:13] <p6eval> rakudo 82c9e9: OUTPUT«===SORRY!===␤Symbol '@t' not predeclared in <anonymous> (/tmp/CDKnmoDGGl:22)␤»

[10:13] <bbkr> moritz_: see?

[10:13] <moritz_> bbkr: reading S05, I'm pretty sure that STD is wrong here

[10:14] <moritz_> bbkr: http://perlcabal.org/syn/S05.html#Variable_%28non-%29interpolation search for @cmds

[10:14] <bythos> i use to programme in perl5 before only started looking at it again after the advent of JSON

[10:14] <moritz_> though it's a bit inconsistent that arrays should interpolate in double-quoted strings only if followed by a postcircumfix, but always in regexes

[10:15] <bbkr> moritz_: that proves it's not me being sleepy, but there is bug indeed in STD :) show should I report to? RT?

[10:15] <bbkr> s/show/who/

[10:15] <moritz_> phenny: tell TimToady std: '' ~~ /@t/ # should complain about @t not being declared. Found by bbkr++

[10:15] <phenny> moritz_: I'll pass that on when TimToady is around.

[10:15] <moritz_> bbkr: like this :-)

[10:15] <bythos> it sure takes time to build rakudo

[10:16] <moritz_> yes; performance is one the areas that will be worked on in the next months

[10:16] <bythos> ok

[10:17] <bythos> got a very old 600mhz working on it at the moment

[10:17] <tadzik> oh

[10:18] <moritz_> for rakudo the more interesting question is how much RAM you have available

[10:18] <moritz_> if you have about 1G free, it builds much quicker

[10:18] <bythos> not much on that machine about 192

[10:19] <bythos> lolz

[10:19] <bythos> oh it serve as svn server 

[10:20] <bythos> os is freebsd

[10:21] <bythos> yeah its using most of the swap

[10:21] <dalek> rakudo: 3a339ee | ++ | src/pmc/objectref_pmc.template:

[10:21] <dalek> rakudo: Switch objectref_pmc.template to auto_attrs.

[10:21] <dalek> rakudo: 

[10:21] <dalek> rakudo: Fixes a nasty memory leak that would leak at least 3 scalars per block.

[10:21] <dalek> rakudo: Now a simple 'while 1 { }' loop seems not to leak anymore.

[10:21] <dalek> rakudo: 

[10:21] <dalek> rakudo: Signed-off-by: Moritz Lenz [email@hidden.address]
[10:21] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/3a339ee8ab3a72867fe914ec9c689e1f5a890645

[10:22] <tadzik> tylercurtis++

[10:22] <masak> tylercurtis++

[10:22] *** meppl joined
[10:24] <jnthn> tylercurtis++, and [Coke]++ for hunting it down too :-)

[10:24] <masak> I've just confirmed my enums patch segfault against Rakudo #29 Erlangen. trying #26 Amsterdam now.

[10:29] *** timbunce_ joined
[10:30] <masak> hm. will be tougher with pre-#26 releases, since named enums seem to have been introduced by that release.

[10:30] *** tadzik left
[10:30] <masak> but verifying the segfault in #26 already means that at least four Parrot releases are affected.

[10:31] <masak> <whiteknight> masak: If rakudo would play nice, and follow supported releases instead of attempting to track svn HEAD, there would be fewer segfaults

[10:31] <masak> just sayin'

[10:31] <jnthn> I think you just found an uncitation. ;-)

[10:32] <masak> I think what he really meant was "thank you for tracking down this segfault which we haven't been able to discover ourselves for a very long time"

[10:32] *** timbunce left
[10:32] *** timbunce_ is now known as timbunce

[10:32] *** agentzh left
[10:33] * masak tries to patch named enums, then his nice-enums patch, into Rakudo #26

[10:36] *** mtrg joined
[10:36] <mtrg> I don't see why we need perl6. If all efforts were directed to Perl5 it could have been better IMO

[10:37] <masak> mtrg: oh, your right!

[10:37] <masak> thanks, we'll stop working on it now.

[10:37] * masak decides to spend all his time on Perl 5 work from now on

[10:37] <masak> s/your/you're/ # I must not have had my coffee today

[10:37] <bythos> lol

[10:37] <mtrg> perl6 is slow, and it's syntax is getting closer to C IMO

[10:38] <masak> mtrg: you're absolutely right. It's very close to C.

[10:38] <bythos> really?

[10:38] <osfameron> you must program a very strange dialect of C ;-)

[10:38] <mtrg> it's a brainfart as far as I understand

[10:38] <masak> mtrg: yes. it's horrible.

[10:38] <masak> mtrg: none of us like it, really.

[10:38] <masak> mtrg: it stinks.

[10:38] <masak> mtrg: in fact, I don't know why I've spent all this time working on it...

[10:38] <TiMBuS> i hate perl 6 pretty bad, myself

[10:38] <masak> we all hate Perl 6 in here.

[10:38] <osfameron> I hear COBOL is the way forward!

[10:39] <masak> FORTRAN is gaining mindshare again.

[10:39] <bythos> so you can do stuff like this in perl6

[10:39] <bythos> class A{

[10:39] <bythos> sub doSomething{

[10:39] <bythos> }

[10:39] <mtrg> any hope to have Perl6 faster than Perl5

[10:39] <bythos> }

[10:39] *** drbean left
[10:39] *** barika joined
[10:39] <mtrg> so far it's deadly slow

[10:39] <masak> bythos: try to prefer nopaste for more than two lines, kthx

[10:40] <masak> bythos: yes, but a sub is different from a method.

[10:40] <masak> mtrg: no, it'll never be faster. we just stopped working on it, remember?

[10:40] <masak> mtrg: you adequately told us that it was useless.

[10:40] <masak> so we just gave up.

[10:40] <Su-Shee> masak: so, what are you still doing here? ;) 

[10:41] <gfldex> poking ppl in the eye ofc :)

[10:41] <masak> Su-Shee: I'm discouraging people from working any more on Perl 6 :P

[10:41] <bythos> so mtrg was perl4 slower than perl5?

[10:41] <Su-Shee> good!

[10:41] <TiMBuS> if only we just rewrote perl 5 but with perl 6 features...

[10:41] <mtrg> bythos: no idea

[10:41] <masak> mtrg: obviously you have gained great insight into this whole Perl 6 process, and should tell us all about it.

[10:42] *** arthur-_ joined
[10:42] <bythos> well maybe you should go find out

[10:42] <mtrg> i read somewhere that it's regexp is too diff.

[10:42] <mtrg> than p5

[10:42] <masak> mtrg: yeah, they're too different. hence they're bad.

[10:42] <masak> because Perl 5 regexes were perfect, really.

[10:43] *** arthur-_ left
[10:43] <Su-Shee> masak: also, - face it - you don't have mst's hair. 

[10:43] <masak> I should stop thinking about Perl 6 regexes. they were a distraction to my real purpose in life: writing Perl 5 regexes.

[10:43] <bbkr> what does this signature mean: "multi method new(::T $min, ...)" ? what is "::T" for here?

[10:43] <jnthn> bbkr: Type capture

[10:44] <jnthn> bbkr: T will after this point be a type variable that holds the type of whatever was passed as $min

[10:44] <masak> Su-Shee: you're right. which is why I'm subtly sarcastic instead of ALL-CAPS F***ING PROFANE!

[10:44] <bythos> kind of like but not at all like templates in c++ 

[10:44] <bythos> ?

[10:44] <gfldex> yes

[10:44] <TiMBuS> ok so locally: my $a = {3-$^a}..{5+$^b}; $a(3, -2) # now prints 0 1 2 3

[10:44] <masak> bythos: aye.

[10:45] <bbkr> jnthn: thanks, looks useful  :)

[10:45] <TiMBuS> is this what is meant to happen

[10:45] <masak> TiMBuS: you can't have $^a and $^b sperad over two different closures.

[10:45] <masak> TiMBuS: that's... insane. :)

[10:46] <gfldex> TiMBuS: remember perl 6 only looks like magic :)

[10:46] <TiMBuS> but but.. they had to curry D:

[10:47] <masak> TiMBuS: you probably want *

[10:47] <mathw> wouldn't they be completely different sets of hypotheticals

[10:47] <masak> mathw: they're placeholders, not hypotheticals.

[10:47] <TiMBuS> i cant test for whatevercode in core for some reason

[10:47] <mathw> oh

[10:47] <mathw> what are hypotheticals then

[10:47] <mathw> are there even such a thing

[10:47] <TiMBuS> so i just tested for Code

[10:47] <bbkr> rakudo: sub foo (::T $x, T $y) {  }; foo(1, "a") # wow, it can be propagated to other params as well :)

[10:47] <masak> mathw: hypotheticals are declared with 'let'. no implementation does them.

[10:48] <p6eval> rakudo 82c9e9: OUTPUT«Constraint type check failed for parameter '$y'␤  in 'foo' at line 22:/tmp/M3iQ2oGGLT␤  in main program body at line 22:/tmp/M3iQ2oGGLT␤»

[10:48] <mathw> masak: okay.

[10:48] <masak> mathw: Yapsi will be first implementing them. :P

[10:48] * mathw decides to figure out how to do them in Rakudo first

[10:48] <mathw> :P

[10:48] <jnthn> Go mathw! ;-)

[10:48] <masak> good luck.

[10:48] <mathw> dammit

[10:48] <masak> really.

[10:48] <mathw> trust jnthn to notice that

[10:48] <TiMBuS> masak, so is the range 'Code..Code' not allowed?

[10:48] <masak> TiMBuS: allowed, yes. meaningful? I don't know.

[10:49] <mathw> jnthn: I'm off work next week, after I get back from holiday I may try something (need to do my CLA too), but I'm intending to focus primarily on music

[10:49] <TiMBuS> well, i implemented it then

[10:49] * mathw -> lunch &

[10:51] <TiMBuS> i just figured since .[1..*-1] is essentially 'Int..Code', a crazy person will find use for 'Code..Code', so I added it.

[10:52] <masak> hm, true.

[10:53] <TiMBuS> checks for arity too!

[10:53] <masak> but these code ranges are only every eval'ed inside slices.

[10:53] <masak> TiMBuS: *-2 .. *-1 is very conceivable.

[10:53] <bbkr> rakudo: sub foo (::666 $y) { }; foo("a") # curious how it will parse

[10:53] <p6eval> rakudo 82c9e9: OUTPUT«===SORRY!===␤ResizablePMCArray: Can't pop from an empty array!␤»

[10:53] <bbkr> hmm

[10:53] <TiMBuS> my $a = {$^a+$^b}..{$^c}; $a(1,2,5); #Gives 3 4 5

[10:55] <TiMBuS> well, i guess ill submit it as the patch to .[1..*-1] and see what happens. also i have no idea how [*-2 .. *-1] would work. postcircumfrence[] needs to check arity and duplicate .length as needed

[10:55] <TiMBuS> err. .elems

[10:55] <jnthn> postcircumfix ;-)

[10:55] <TiMBuS> im um. slightly drunk

[10:55] <jnthn> \o/

[10:56] <jnthn> That's a great time to work on Rakudo patches. ;-)

[10:56] <x3nU> is loop faster than for?

[10:57] <masak> x3nU: yes, currently.

[10:57] <bythos> 1gb of ram free for building rakudo?

[10:57] <masak> x3nU: because for creates an iterator, which is slowish.

[10:57] <masak> bythos: sounds about right. more is better.

[10:57] <bythos> vm so that will have too

[10:58] <masak> sorry, couldn't parse that.

[10:58] <bythos> do

[10:59] <bythos> running a virtual machine so i can build it for freebsd

[10:59] <bythos> build it on 

[10:59] <masak> I see.

[11:00] <bythos> it abit of a trouble if you company is running VM and you have limited ram resources 

[11:03] <x3nU> is there smarter way to convert number from dec to bin  

[11:03] <x3nU> t

[11:03] <x3nU> than sprintf* ?

[11:06] <TiMBuS> jnthn, was wondering if you could solve this conundrum: An array slice bigger than said array's boundaries will pad out any unused indexes with Any, so that slice assignment works (ex. @a[0..2] = (1,2,3) ). (more)

[11:07] <TiMBuS> However @array = <a b c>; @array[0..5] is supposed to only return <a b c> (according to moritz_)

[11:08] * jnthn thought Rakudo already got that one right...

[11:08] <jnthn> rakudo: my @a; say @a[0..2]; say @a.elems;

[11:08] <p6eval> rakudo 3a339e: OUTPUT«Any()Any()Any()␤0␤»

[11:08] <jnthn> Yes, it's there somewhere :-)

[11:08] <zag> bythos: For install rakudo simply type:   pkg_add -r rakudo , without compile

[11:08] <jnthn> TiMBuS: I think it's to do with WHENCE

[11:09] <jnthn> TiMBuS: That is, we return something that, if assigned to, will actually create the elements in the array.

[11:09] <jnthn> So it's kinda lazy.

[11:10] <TiMBuS> ah, thats different to how I thought it was meant to work

[11:12] <TiMBuS> well that sucks (trying to implement .[1..*] here, if arrays clipped to their boundaries when sliced then it wouldn't be a problem)

[11:27] *** smash_ joined
[11:27] <smash_> hello everyone

[11:32] <bythos> hi

[11:40] <masak> smash_! \o/

[11:42] *** envi^home joined
[11:46] *** azawawi joined
[11:46] <azawawi> std: my $x = Mu; $x.say;

[11:46] <p6eval> std 32103: OUTPUT«ok 00:01 118m␤»

[11:46] <azawawi> rakudo: my $x = Mu; $x.say;

[11:46] <p6eval> rakudo 3a339e: OUTPUT«Mu()␤»

[11:47] <masak> rakudo: role R { method bar { say "bar" } }; my $foo = class { method foo { say "foo" } }; $foo does R; $foo.foo; $foo.bar

[11:47] <p6eval> rakudo 3a339e: OUTPUT«Attempt to use rebless_subclass where the new class was not a subclass␤  in 'infix:<does>' at line 6760:CORE.setting␤  in 'infix:<does>' at line 530:CORE.setting␤  in main program body at line 22:/tmp/R0XxpGl7EU␤»

[11:47] * masak submits rakudobug

[11:47] * masak feels like King Midas sometimes :)

[11:47] <masak> everything I touch becomes a bug report.

[11:48] *** azawawi left
[11:49] *** zulon joined
[11:50] * Su-Shee recommends rereading some greek stories. ;) 

[11:50] *** kiffin joined
[11:50] <takadonet> morning all

[11:50] <masak> takadonet: \o

[11:52] <masak> rakudo: my $foo = class { method foo { say "foo" } }; $foo does role { method bar { say "bar" } }; $foo.foo; $foo.bar

[11:52] <p6eval> rakudo 3a339e: OUTPUT«Attempt to use rebless_subclass where the new class was not a subclass␤  in 'infix:<does>' at line 6760:CORE.setting␤  in 'infix:<does>' at line 530:CORE.setting␤  in main program body at line 22:/tmp/CywfZT9UpD␤»

[11:53] <masak> rakudo: class { method foo { say "foo" } } does role { method bar { say "bar" } }; $foo.foo; $foo.bar

[11:53] <p6eval> rakudo 3a339e: OUTPUT«===SORRY!===␤Symbol '$foo' not predeclared in <anonymous> (/tmp/EwvFATwVwf:22)␤»

[11:53] <masak> rakudo: class { method foo { say "foo" } } does role { method bar { say "bar" } }

[11:53] <p6eval> rakudo 3a339e: OUTPUT«Attempt to use rebless_subclass where the new class was not a subclass␤  in 'infix:<does>' at line 6760:CORE.setting␤  in 'infix:<does>' at line 530:CORE.setting␤  in main program body at line 22:/tmp/dnfsA8eOTN␤»

[11:53] <masak> rakudo: class {} does role {}

[11:53] <p6eval> rakudo 3a339e: OUTPUT«Attempt to use rebless_subclass where the new class was not a subclass␤  in 'infix:<does>' at line 6760:CORE.setting␤  in 'infix:<does>' at line 530:CORE.setting␤  in main program body at line 22:/tmp/zNMX2gkFBG␤»

[11:55] <moritz_> a worthy golf, sir masak

[11:55] <masak> thanks.

[11:55] <masak> a subpar amount of strokes, though :)

[11:56] <masak> but I attribute that to being a bit shell-shocked by studying. :)

[11:57] *** mberends joined
[11:57] <masak> lithos++ # noticing dupes and connections in RT tickets

[11:57] <masak> mberends! \o/

[11:58] <moritz_> btw now that a major memory leak is gone, I'm trying to run the Math::Model simulations that I've shown at YAPC, this time all in one prcoess

[11:59] <moritz_> so far I did it by spawning a new process for each iteration in the parameter sweep

[12:01] <mberends> hi masak, moritz_ # I didn't even notice my laptop reconnecting after a sleep

[12:02] <moritz_> o/

[12:03] <moritz_> seems like the memory footprint of a small rakudo program is 174MB on a 64bit machine

[12:04] *** jedai left
[12:05] *** jedai joined
[12:05] *** lest_away is now known as lestrrat

[12:09] *** frooh left
[12:10] *** lamstyle left
[12:11] *** lamstyle joined
[12:11] *** frooh joined
[12:12] *** drbean joined
[12:13] <mberends> my REPL uses 168MB (64 bit) or 84MB (32 bit), slightly different revisions but almost the same. An amazing difference.

[12:14] <masak> wow!

[12:17] <x3nU> yeah, rakudo is using 1100 MB of memory and still growing

[12:17] <x3nU> ;d

[12:18] <masak> x3nU: maybe you should try the latest from Rakudo master, then.

[12:18] <moritz_> good thing is, my simulation has now been running for >20 minutes, and it's still using less than 200M virtual memory

[12:18] <x3nU> masak: i would prefer rakudo star more

[12:19] <x3nU> ;/

[12:19] <masak> x3nU: you're in luck! there's a release coming out in... how long again? hours?

[12:19] <x3nU> so i will wait :)

[12:20] <mathw> moritz_: good, not leaky :)

[12:20] <moritz_> mathw: or if it leaks at a much smaller rate than before

[12:21] <moritz_> reach 200M virtual mem now, after 26min run time

[12:21] <mathw> yeah

[12:21] <mathw> it's better than we've had...

[12:22] <moritz_> yes; it used to leak about 1MB per second

[12:22] <moritz_> now about 0.5M per minute

[12:22] <masak> not leaking is very good news.

[12:22] <masak> er, not leaking *as much*, then. :)

[12:22] <moritz_> (a news that sadly won't make it into R*+1)

[12:22] <masak> oh, right.

[12:22] <masak> x3nU: sorry, you'll have to wait a month, then.

[12:23] <masak> x3nU: or try bleeding Rakudo.

[12:23] <x3nU> why? :(

[12:24] <moritz_> hugme: tweet rakudoperl #rakudo now comes with drastically reduced memory leaks; long running processes are possible again #perl6

[12:24] * hugme hugs moritz_; tweet delivered

[12:25] <masak> x3nU: because the fix went in very recently, and R*+1 will build off of the last Rakudo compiler release.

[12:25] <mathw> which was made on Thursday

[12:25] <x3nU> geez

[12:25] <jnthn> pmichaud++ could always decide that he wants to memory fix in the R*+1

[12:25] <mathw> we're still doing better than my work

[12:25] <moritz_> you can think of it this way: rakudo development is so fast, that even 5 days after a compiler release it's already worth switching to a new version :-)

[12:26] <mathw> one major cool thing I did has been waiting for a release for nearly a year now

[12:26] <x3nU> i can't download new rakudo because perl taked nearly all of my mememory :D

[12:26] <x3nU> memory*

[12:26] <gfldex> i never do 'git pull' when i cant hold onto something

[12:26] <gfldex> that's how fast rakudo races onwards :)

[12:27] *** sunnavy_ left
[12:27] <x3nU> there's no nightly builds for rakudO?

[12:27] <x3nU> rakudo*

[12:27] <x3nU> of* ;f

[12:28] <masak> no. maybe there should be.

[12:28] *** sunnavy joined
[12:28] <masak> I could see Emmentaler handling that, too.

[12:29] *** timbunce_ joined
[12:29] *** timbunce left
[12:29] *** timbunce_ is now known as timbunce

[12:30] <pmichaud> good morning, #perl6

[12:30] <phenny> pmichaud: 09:35Z <moritz_> tell pmichaud I've tried to read the code for the operator precedence parser; to me it looks like it would be much cleaner (and more extensible) to store things like %!ohash in actual attributes, and require instantiation for the grammar before parsing; is there a good reason against doing it that way?

[12:30] <masak> morning, pm

[12:31] <masak> moritz_: is hugme source online somewhere?

[12:31] <moritz_> masak: sure

[12:31] <masak> nvm, found it. http://github.com/moritz/hugme

[12:31] <moritz_> hugme: show hugme

[12:31] <hugme> moritz_: the following people have power over 'hugme': P⁣erlJam, T⁣imToady, [⁣particle], c⁣olomon, j⁣nthn, m⁣asak, m⁣berends, m⁣oritz_, p⁣michaud. URL: http://github.com/moritz/hugme/

[12:32] <pmichaud> moritz_: (%!ohash)  I think it works out better as an "our" attribute.

[12:32] <moritz_> pmichaud: why? and how would you build two precedence parsers in the same program?

[12:33] <pmichaud> oh, that's a good point.  I'm mis-thinking of "our" attributes.

[12:34] <pmichaud> requiring instantiation of a grammar before parsing seems kind of weird, though.

[12:34] <pmichaud> and it gets a bit expensive to initialize that hash on every instance.

[12:34] <moritz_> if it keeps state, why not force it to instantiate?

[12:34] <pmichaud> ...does it keep state?

[12:35] <moritz_> for example through .O

[12:35] <moritz_> not all grammars do

[12:35] <pmichaud> that's always done at INIT time, though.

[12:35] <moritz_> but the OPP does

[12:35] <pmichaud> (or CHECK)

[12:35] <pmichaud> %!ohash is never modified, once initialized.

[12:36] <moritz_> and I don't see how it would be very expensive, if one parse (mostly) uses only one instance

[12:37] <bbkr> rakudo: %()

[12:37] <p6eval> rakudo 3a339e:  ( no output )

[12:37] <bbkr> \o/

[12:37] <moritz_> rakudo: %(); say "alive"

[12:37] <p6eval> rakudo 3a339e: OUTPUT«alive␤»

[12:38] *** zulon left
[12:38] <pmichaud> src/Perl6/Grammar.pm lines 1510-1536 initialize %!ohash.  You want to do that on every instance?

[12:39] *** sunnavy left
[12:39] <pmichaud> I agree that we at least need to have a per-grammar %!ohash

[12:39] <pmichaud> i.e., it can't be global for all grammars

[12:39] *** frooh left
[12:39] <moritz_> per-grammar would be a big improvement

[12:39] <pmichaud> I'm not sure that I want it to be *every grammar instance*

[12:39] <pmichaud> remember that Grammar is Cursor

[12:40] <pmichaud> and we create new Cursors on every subrule.

[12:40] <moritz_> hm, right

[12:40] *** frooh joined
[12:42] <pmichaud> so it's not "one grammar per parse"... it's really "one grammar per subrule"

[12:42] <pmichaud> STD handles it lexically, so perhaps we'll have to do something like that.

[12:44] <pmichaud> in nqp it's nicely abstracted behind .O(...), so we can fix it there.  Essentially, we want to store a property or attribute on the grammar's type object, and have all instance share that.

[12:44] <pmichaud> *instances

[12:45] <moritz_> and have some attributes that override it, in case of a lexical grammar modification?

[12:45] *** frooh left
[12:45] <pmichaud> yeah, maybe.  Maybe lexical is in fact the way to go, now that lexicals are far enough along to be somewhat workable.

[12:45] *** sunnavy joined
[12:46] *** frooh joined
[12:46] <pmichaud> anyway, is this a blocker at the moment?

[12:46] <pmichaud> (it's a small blocker for me, now that you've pointed it out :)

[12:46] <moritz_> no; just a curious question while reading the code

[12:47] <pmichaud> I'm glad you noticed it -- it explains a couple of difficulties I was having.

[12:47] <moritz_> it was the "don't we have OO to do that better?" kind of question :)

[12:48] <mathw> OO in 'doing things better' shock

[12:48] <masak> there's no "OO" in "doing things better".

[12:48] <masak> 'Perl 6: putting the "OO" back in "doing things better".'

[12:48] <moritz_> dOOing things better

[12:49] <masak> ...but spelling them worse? :P

[12:49] <moritz_> aye :-)

[12:50] *** frooh left
[12:51] <pmichaud> Rakudo is being included in Fedora 14.  :-)

[12:52] <pmichaud> It got its own bullet point in the release announcement.

[12:52] <takadonet> !!

[12:52] <pmichaud> http://lwn.net/Articles/401735/

[12:52] <moritz_> I think gerd++ deserves karma for that

[12:52] *** frooh joined
[12:52] <mathw> that's scary

[12:52] <mathw> very scary

[12:53] <moritz_> which reminds me, he sent me a patch for the blizkost build system

[12:53] <pmichaud> it also got highlighted in http://java.dzone.com/dose/dzone-daily-dose-825

[12:53] <pmichaud> "The first pre-release of Fedora 14 arrived a week earlier than expected.  Some of the major changes in Fedor 14 will include a switch to systemd, a sysvinit and upstart alternative, and the inclusion of the Rakudo Star distro of Perl 6."

[12:54] <mathw> well on the bright side

[12:54] <mathw> systemd will get all the flak

[12:54] <pmichaud> lol

[12:54] <masak> :)

[12:54] <mathw> (there is moaning that it can't possibly be safe to move to it that quickly)

[12:54] <mathw> I think F14 looks awesome

[12:54] <mathw> they're shipping D as well

[12:55] <mathw> Think I'll stick Fedora as my primary OS for a while yet

[12:56] <mathw> but you can bet we're going to get more people around complaining that R* is too slow

[12:57] <moritz_> that's OK

[12:59] *** plainhao joined
[13:00] *** Holy_Cow joined
[13:00] <masak> Holy_Cow: \o

[13:01] *** masonkramer joined
[13:01] <Holy_Cow> o/

[13:03] *** echosystm joined
[13:03] <echosystm> hi guys

[13:03] <masak> echosystm: hi!

[13:03] <echosystm> will perl 6 support static variables and methods properly?

[13:04] <echosystm> also, what about full public/private/protected ?

[13:04] <masak> echosystm: as in "on the class"?

[13:04] <echosystm> yep

[13:04] <masak> echosystm: not as such, no. I have a blog post about it, hold on.

[13:04] <echosystm> ok thanks :)

[13:04] <masak> (this is still about the first question, btw)

[13:04] <masak> hold on :)

[13:04] <moritz_> all methods that don't use object attributes can be used as static methods

[13:04] <moritz_> and static attributes are specced

[13:05] <echosystm> i know many perl folk consider static things to be a corruption of a pure object model

[13:05] <echosystm> but they are ridiculously useful

[13:05] <masak> echosystm: tell me a few of their uses.

[13:05] <moritz_> perl traditionally gives you all the power, including enough to shoot yourself in the foot, if you want

[13:05] <colomon> I thought all you had to do was say "my $var;" in a class declaration?

[13:05] <pmichaud> or "our $var"

[13:06] <moritz_> colomon: that's lexically scoped, not class scoped

[13:06] <moritz_> colomon: which differs if you augment

[13:06] <masak> colomon: but that's not inherited by subclasses.

[13:06] <colomon> ah.

[13:06] *** zulon joined
[13:06] <echosystm> basically, if you want true static things, youre best off using some moosex:: madness

[13:06] <moritz_> echosystm: private and public attributes are supported

[13:06] <moritz_> no protected

[13:06] <echosystm> but i dont do that

[13:07] <moritz_> protected doesn't really make sense - why should something be only part of an API if you inherit from a class?

[13:07] <moritz_> *only be part

[13:08] <smash_> moritz_: can i quote you on that ? "perl traditionally gives you all the power, ..." :)

[13:08] <masak> echosystm: here you go: http://use.perl.org/~masak/journal/40321

[13:08] <echosystm> (arguably) better polymorphism or encapsulation or some other term moritz_

[13:08] <moritz_> smash_: if iyou feel like

[13:08] *** orafu left
[13:08] <moritz_> echosystm: care to explain your "better polymorphism or encapsulation" answers my question?

[13:09] <echosystm> personally i like to have public/private/protected rather than pseudo-hiding things with underscores

[13:09] *** orafu joined
[13:09] <moritz_> *how your...

[13:09] * moritz_ reall can't type today

[13:09] <echosystm> well some things you just dont want to be accessible

[13:09] <moritz_> then make them private

[13:09] <echosystm> i think it is important to simplify the interfaces

[13:09] <echosystm> moritz_, if they are private you cant subclass them

[13:10] <echosystm> thats the whole point of protected - subclassable private attributes

[13:10] <TiMBuS> if i need to lie about the arity of a generated code block will I be able to just set it using PIR and will nothing break?

[13:10] <TiMBuS> (better yet) is there a way to generate a code block with a dynamic amount of parameters

[13:10] <moritz_> echosystm: why should subclassing provide you access to private data?

[13:10] <echosystm> because subclasses need to be able to see the attributes of their super class...

[13:10] <echosystm> lol

[13:10] <moritz_> why not just provide an API which the subclasses can use+

[13:10] <moritz_> s/\+/?/

[13:11] <moritz_> just like any other class really

[13:11] <echosystm> because some data should be hidden from the outside world

[13:11] <moritz_> I don't see why inheriting classes need a different API than using classes

[13:11] <moritz_> echosystm: but subclasses are also "outside world", in the sense that they are written by somebody else

[13:12] <masak> echosystm: in Perl 6, you can't hide data from the outside world. not even private things.

[13:12] <echosystm> ok

[13:12] <masak> or at least it's very difficult.

[13:12] <echosystm> hrm, bummer

[13:12] <moritz_> well, private attribute exist

[13:12] <moritz_> and are pretty easy to use

[13:12] <moritz_> it's just that they aren't fully private

[13:12] <moritz_> you can use introspection to get their values

[13:12] <moritz_> (but I guess you can do that in Java too...)

[13:13] <masak> yes, you can.

[13:13] <moritz_> so, java has no privacy either?

[13:13] <masak> only the compiler enforces privateness in Java. the runtime doesn't.

[13:14] <masak> some Java libraries leverage that.

[13:14] <TiMBuS> my $m = method { return $!super_secret_variable }; my $stolen = $secretclass.$m;

[13:14] <masak> TiMBuS: that won't work, though.

[13:14] <moritz_> TiMBuS: that works now, but contradicts the spec

[13:14] <masak> TiMBuS: unless the anon method is defined within the scope of the original class.

[13:15] <moritz_> the resultion of attribute names should really be tied lexically to the class it's in

[13:15] <masak> or, I guess, within an augmenting scope of the class. which counts as monkeying with the class.

[13:15] <TiMBuS> aw but i like how it works. i feel like a nerd james bond :(

[13:16] <moritz_> you can also parse the return value of .perl :-)

[13:16] <bbkr> is "multi (Int)" valid syntax to define anonymous multi sub, or do I need {}

[13:16] *** am0c left
[13:16] *** uniejo left
[13:17] <moritz_> you need { }

[13:17] <bbkr> moritz_: thanks

[13:17] <masak> for all routine types, you need { }

[13:18] <TiMBuS> uh, but does anyone know the answer to my previous question? its bugging me

[13:18] <masak> only package things can use just the ;

[13:18] <bbkr> std: multi (Int) # curious...

[13:18] <p6eval> std 32103: OUTPUT«ok 00:03 117m␤»

[13:19] *** ejs left
[13:19] <masak> TiMBuS: -> *@_ { say @_.elems, " parameters were passed in" }

[13:19] <moritz_> bbkr: why don't you wrap instead of lying?

[13:19] <TiMBuS> masak, but i need .arity to be set

[13:19] <masak> TiMBuS: sounds less-than-clean, whatever it is you're doing.

[13:20] <TiMBuS> yeah well its in the perl 6 core :p

[13:20] <masak> TiMBuS: maybe &routine does role { method arity { 42 } }; ?

[13:20] <masak> but I'd really recommend taking a step back at this point, and re-thinking the whole thing :)

[13:22] *** masonkramer left
[13:22] <moritz_> -> $a, $b { foo($a, $b, 3) } # look, it's arity 2

[13:23] <masak> ah. another trampoline :)

[13:24] <moritz_> a lying trampoline :-)

[13:24] <jnthn> bouncy bouncy

[13:24] <jnthn> </dirtyhungarianphrasebook>

[13:25] <huf> yandelavasa gradenwi stravenka?

[13:25] <TiMBuS> so I'm just not sure if lying about .arity will break things

[13:25] *** mikehh joined
[13:29] <masak> TiMBuS: here's an idea: you could try changing it, and then run the spectests.

[13:29] * masak tries to find his sarcasm knob

[13:29] <masak> where did I put it?

[13:29] <huf> on the end of your staff?

[13:30] *** timbunce left
[13:30] <masak> huf: you *are* using the Hungarian phrasebook, aren't you? :)

[13:31] <huf> well, i *am* hungarian ;)

[13:31] *** masonkramer joined
[13:31] <masak> then why do you need a phrasebook? :P

[13:31] <huf> this is how we always talk

[13:32] <jnthn> masak: To know how to talk about hovercraft in English.

[13:32] <huf> we are the pornocracy of absurdistan ;)

[13:32] * masak looks for the sarcasm knob in his hovercraft

[13:32] <jnthn> masak: The sarcasm knob seems to be stuck on max today. :P

[13:32] <masak> jnthn: really? :P

[13:32] <masak> you think so?

[13:32] <masak> what was your first clue?

[13:33] <jnthn> Turn it down turn it down!

[13:33] <masak> oh, *that's* a good idea. didn't think of that...

[13:34] <masak> jnthn: you're so useful to have around.

[13:34] <Holy_Cow> *turns it to 11*

[13:34] <[Coke]> (daily builds) that's more useful with binaries, neh?

[13:34] <jnthn> Well what else are you going to build?

[13:34] <masak> trinaries.

[13:34] <jnthn> Oh, wait, we're allowed to be non-sarcastic in here too...

[13:34] <jnthn> :-)

[13:35] *** sftp joined
[13:36] <masak> sftp: you're the only safe option! no-one should use ftp any more!

[13:37] *** tadzik joined
[13:37] <tadzik> oh hai

[13:37] <masak> o/ tadzik

[13:37] * [Coke] yawns.

[13:38] *** risou joined
[13:40] <sftp> masak: agreed :^)

[13:40] * moritz_ kinda links rsync and unison

[13:40] <masak> sftp: I also only use scp nowadays, never cp.

[13:40] <masak> oh wait.

[13:40] <moritz_> scp on the local machine?

[13:41] <masak> it works.

[13:41] <masak> and it's very secure. :)

[13:41] *** am0c joined
[13:43] <sftp> masak: yes... scp is my friend

[13:45] *** echosystm left
[13:47] *** Guest5385 left
[13:52] <x3nU> well, i'm testing my simple perl 6 script

[13:52] <x3nU> with rakudo star 2010.07

[13:52] <x3nU> to know how much ram it will take

[13:53] <x3nU> (i'm testing on dedicated server :D)

[13:53] *** mikehh_ joined
[13:53] *** mikehh left
[13:54] *** kiffin left
[13:54] *** mikehh_ is now known as mikehh

[13:54] *** javs joined
[13:56] *** timbunce joined
[13:58] *** drbean left
[13:58] <TiMBuS> x3nU, is it just helloworld.pl or is it doing a lot of stuff?

[13:59] <moritz_> fwiw, my simulation program ran successfully for 2 hours without exhausting its resource limit of 1GB

[14:00] <x3nU> http://gist.github.com/549562

[14:00] <x3nU> probably it could be written better

[14:00] <x3nU> but i don't think that it should eat that much ram

[14:00] <TiMBuS> yeah ive noticed perl6 isnt very leaky, just bloaty

[14:00] <TiMBuS> rakudo*

[14:00] *** rgrau_ joined
[14:00] <moritz_> well, rakudo was very leaky until few hours ago

[14:01] <x3nU> after 46000 iterations 2GB of ram taken

[14:01] <TiMBuS> when my IRC bot ran on alpha it used about half the ram it does now

[14:01] <TiMBuS> moritz_, oh?

[14:02] <moritz_> TiMBuS: see commit 3a339ee8ab3a72867fe914ec9c689e1f5a890645

[14:04] <moritz_> x3nU: with latest rakudo, RAM usage stays constant at 174M on 64bit

[14:04] *** alester joined
[14:05] <moritz_> at least no change during the first 6k iterations

[14:05] <TiMBuS> oh i see moritz_

[14:06] <TiMBuS> i didnt even know there was a 'manual_attrs' option hah

[14:06] <x3nU> anyway

[14:07] <x3nU> i don't know how to build rakudo for win32

[14:08] <jnthn> OK, time for me to leave

[14:08] <jnthn> See you all in a week and a half. :-)

[14:08] <x3nU> bye

[14:09] <moritz_> have fun!

[14:09] <x3nU> is it possible to build rakudo under windows without cygwin or msys or uwin?

[14:09] <PerlJam> x3nU: sure!  Just install linux first  ;-)

[14:09] <[Coke]> PerlJam--

[14:10] <moritz_> "it's time toooo asy gooooodbye" /me sings in his best Sarah Brightman voice

[14:10] <[Coke]> x3nU: I /think/ it should work out of the box with strawberry perl.

[14:10] <x3nU> i tried configure with latest strawberry perl

[14:10] <moritz_> x3nU: yes, jnthn uses msvc for compiling parrot and rakudo

[14:10] <x3nU> and i get

[14:11] <x3nU> http://gist.github.com/549578

[14:11] <x3nU> (that means something like command not found )

[14:11] <TiMBuS> my @a = <1 2 3 4 5>; say ~@a[*-2..*-1] #Prints 4 5. yay i did thing

[14:11] <moritz_> x3nU: did you install parrot first?

[14:11] <moritz_> x3nU: if not, you need the --gen-parrot option

[14:11] *** zulon left
[14:12] <moritz_> x3nU: please read the README

[14:12] <x3nU> ;f

[14:12] <x3nU> lol, normally under linux it warned me about lack of parrot that's why i forogot

[14:12] <x3nU> forgot*

[14:13] *** zag left
[14:13] <x3nU> sorry for my stupidity ;d

[14:13] <moritz_> no problem

[14:16] <x3nU> also

[14:16] <x3nU> 105000 iterations

[14:16] <x3nU> 3,5GB ram taken

[14:16] <x3nU> ;d

[14:21] <moritz_> 75k iterations, 174MB RAM taken

[14:21] <moritz_> x3nU: you should upgrade to a newer rakudo :-)

[14:21] <x3nU> i'm building it on my pc :)

[14:23] *** risou left
[14:24] *** risou joined
[14:24] <x3nU> 4,1 GB now :D

[14:27] *** plobsing joined
[14:29] <moritz_> pmichaud: is the improvement since R* worth a new release? or should we wait another month?

[14:30] <pmichaud> moritz_: well, last month's release announcement said we planned a release for August 24.

[14:30] <pmichaud> I was debating that very question myself, this morning.

[14:30] <pmichaud> (and last night)

[14:31] <moritz_> then there probably should be a release, and a less precise next date in the announcement

[14:32] <pmichaud> well, I do like the notion of planned/regular releases, though.

[14:32] <pmichaud> I'd rather not get into the habit of "we release when we think we have something good enough to release"

[14:32] <pmichaud> and we've always said "we release even if there nothing significant to release", so we should likely honor that.

[14:33] <moritz_> ok

[14:33] <pmichaud> There are some improvements.  One guy even added more regex modifiers.  :-)

[14:34] <x3nU> ok, finished building

[14:35] <x3nU> now i'm running my script on latest rakudo from repo ;d

[14:37] <masak> I think releases are almost always a good thing.

[14:37] <PerlJam> x3nU: I've been running it for a while now.  On my box it uses a steady 183m RAM.  (so far)

[14:37] <moritz_> so, when will be the next R* release?

[14:37] <pmichaud> in a few hours

[14:37] <pmichaud> after that, September 28.

[14:37] <moritz_> I meant the one af... right

[14:38] <pmichaud> I'm generally going with "Tuesday following Rakudo release"

[14:38] <x3nU> on my pc after 11k iterations around 50 MB

[14:38] <moritz_> x3nU: then you have a 32bit system

[14:38] <x3nU> yes

[14:40] *** wtw left
[14:42] *** jwest- joined
[14:48] *** slavik joined
[14:48] *** Mowah joined
[14:53] *** justatheory joined
[14:55] <tadzik> I removed Config::INI from Star, as it doesn't work the latest Rakudo and I have no time to fix it

[14:55] <bythos> i do not think that i a developer relate to Camelia.

[14:56] <bythos> the spokesbug

[14:56] <moritz_> that's OK

[14:56] *** tylercurtis joined
[14:57] <moritz_> you don't have to hug her to use Perl 6 :-)

[14:57] <TiMBuS> i dont relate to camels and onions make me cry. i still use perl tho

[14:57] <bythos> i feel like i'm in preschool 

[14:57] <pmichaud> tadzik++ # thanks for removing it for now

[14:57] <bythos> it make me think of preschool

[14:57] <TimToady> preschoolers are very creative, compared to adults

[14:57] <phenny> TimToady: 10:15Z <moritz_> tell TimToady std: '' ~~ /@t/ # should complain about @t not being declared. Found by bbkr++

[14:58] <TiMBuS> perhaps you could embrace it ironically, like how i do with dubstep music and pro wrestling

[14:59] <bythos> $rant->end;

[14:59] <moritz_> $rant.end if you like Perl 6 :-)

[14:59] <TimToady> std: sub pascal { [1], -> @p { [0, @p Z+ @p, 0] } ... * }; say pascal[^10].perl

[14:59] <p6eval> std 32103: OUTPUT«ok 00:01 122m␤»

[14:59] <TimToady> rakudo: sub pascal { [1], -> @p { [0, @p Z+ @p, 0] } ... * }; say pascal[^10].perl

[15:00] <p6eval> rakudo 3a339e: OUTPUT«([1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1], [1, 8, 28, 56, 70, 56, 28, 8, 1], [1, 9, 36, 84, 126, 126, 84, 36, 9, 1])␤»

[15:00] <moritz_> bythos: http://kraih.com/usingperl6-sri.jpg this is likely going to be the cover of our new book... maybe you like that better than the "vanilla" camelia

[15:00] <moritz_> TimToady++ # very nice

[15:00] <bythos> lolz

[15:01] <bythos> vanilla camelia love it

[15:01] <pmichaud> someone please blog that cool pascal function kthxbye :-)

[15:01] <moritz_> TimToady should :-)

[15:01] <TimToady> I "blogged" it on rosettacode.  :)

[15:01] <tadzik> pmichaud: I think it would be nice to make a smoketest before shipping Star, so we make sure we don't ship anything broken. Similar to this: http://tjs.azalayah.net/ser.html

[15:01] *** zulon joined
[15:02] *** masak left
[15:02] <tadzik> I can do this, but my Thinkpad is on warranty now and my PC is quite slow, so it might take some time

[15:02] <pmichaud> tadzik: (1) what did you use to produce that

[15:02] <pmichaud> (2) why isn't it already in the star repo?

[15:02] <pmichaud> (3) we can likely do that for next release :)

[15:03] <bythos> moritz its better

[15:03] <tadzik> pmichaud: it's in neutro's repo

[15:03] <bythos> make me think of the dragonflybsd

[15:03] <tadzik> pmichaud: http://github.com/tadzik/neutro

[15:03] <tadzik> pmichaud: that's the smoker.pl and some ugly html generation I don't know where I have now

[15:04] <tadzik> I could probably make neutro itself a valid module

[15:04] *** arthur-_ joined
[15:04] *** justatheory left
[15:06] <pmichaud> I'd prefer to see testing separate from install, though.

[15:07] <bythos> is there any at this point to compile a script to bytecode then run the bytecode?

[15:07] <bythos> s/any/anyway

[15:07] <tadzik> pmichaud: what do you mean?

[15:08] <moritz_> TimToady: It's curious how everybody seems to be using Zop instead of >>op<< these days... looks much nicer

[15:08] <tadzik> testing without installing?

[15:08] <[particle]> separate columns in the output?

[15:08] <[particle]> build, test, install?

[15:08] *** justatheory joined
[15:08] <TimToady> well, Zop is also naturally lazy, whereas hypers are really more for eager situations on existing matrices

[15:09] <TimToady> but yeah, I think Zop was a good call, in retrospect

[15:09] <tadzik> well, if the build fails, there is no testing. If testing fails, there is no installing. Installing is usually successful, I've never seen something that does not install

[15:10] <tadzik> and testing without installing is hard because of the dependencies

[15:10] <bbkr> tadzik++ # I had similiar idea once, to implement 'require "git://github.com/moritz/json.git";' (runtime module fetching and evaling suitable for fast testing). and neutro is first step toward git intergration :)

[15:10] <TimToady> on rosettacode, I also find myself replace things like 'map * ** 2, ...' with '... X** 2'

[15:10] <TimToady> *replacing

[15:10] <moritz_> that's a neat one too

[15:10] <tadzik> bbkr: well, it's just a temporary solution, until masak++ finishes pls ;)

[15:10] <pmichaud> hugme tweet rakudoperl Pascal's triangle in #perl6: sub pascal { [1], -> @p { [0, @p Z+ @p, 0] } ... *};  .say for pascal[^10];  http://rosettacode.org/wiki/Pascal%27s_triangle#Perl_6  @TimToady++

[15:10] <hugme> pmichaud: Sorry, too long (173 chars, 140 allowed)

[15:11] <TimToady> could be done with Z, but then you'd have to write '... Z** 2 xx *'

[15:11] <pmichaud> drat

[15:11] <tadzik> yay twitter

[15:11] * pmichaud shortens the url

[15:11] <moritz_> pmichaud: I'm writing a proper blogpost btw

[15:11] <tadzik> but how does it work so that the function gets postcircumfix[]?

[15:11] <pmichaud> moritz_: okay, I'll wait and (re)tweet the blockpost

[15:11] <pmichaud> tadzik:  the function returns a list

[15:11] <moritz_> tadzik: it just returns a list, and .[] indexes that

[15:11] <tadzik> erm, subroutine that is

[15:11] <tadzik> oh sure

[15:12] <pmichaud> tadzik: so it's like   pascal()[^10]

[15:12] <tadzik> my bad

[15:12] <tadzik> so what about this smoketesting?

[15:12] <tadzik> I'll maybe start since I think everyone is waiting for someone to do it

[15:13] <pmichaud> +1

[15:13] <pmichaud> 15:06 <pmichaud> I'd prefer to see testing separate from install, though.

[15:13] <jdv79> there is a smolder target but aparrently Mr. Peters is having chronic trouble keeping that smolder server up:(

[15:13] <pmichaud> I'd like to be able to test an existing installation

[15:13] <tadzik> hmm

[15:13] <pmichaud> as opposed to evaluating the results of installing

[15:14] <pmichaud> (maybe that's impractical)

[15:14] <tadzik> so make test will not set PERL6LIB

[15:14] *** Guest23195 joined
[15:14] *** timbunce left
[15:15] <pmichaud> I'm just saying that if we're going to spectest star, we should test what is installed, as opposed to (in addition to) the process of installing

[15:15] <TimToady> rakudo: say [+](1,2,3) / 2; # fayl

[15:15] <p6eval> rakudo 3a339e: OUTPUT«1.5␤»

[15:15] <TimToady> should print 3

[15:15] <pmichaud> right

[15:15] <pmichaud> I don't think rakudo's parser understand [+] as function call syntax yet.

[15:15] <pmichaud> *understands

[15:15] <tadzik> oh crap, this testing will take a _long_ time

[15:16] <pmichaud> tadzik: ...which is why I suggest it for next release :-)

[15:16] <tadzik> volunteers?

[15:16] <tadzik> pmichaud: on a fast machine it takes a couple of minutes

[15:16] <pmichaud> ...if anyone knew how to do it:)

[15:16] <pmichaud> rephrase

[15:16] <pmichaud> ...for someone who knows how to do it :)

[15:16] <tadzik> ./smoker.pl isn't very hard to type

[15:17] <pmichaud> where do I run it?

[15:17] <tadzik> you'll have to clone the neutro repo

[15:17] <pmichaud> where do I run it?

[15:17] <tadzik> and just run it, it will output the result

[15:17] <tadzik> I've run mine, I'm currently at Bennu

[15:17] <pmichaud> please don't say "just run it"

[15:17] <pmichaud> I presume I have to have Rakudo somewhere.

[15:18] <pmichaud> should the modules already be installed, or is this going to install them?

[15:18] <tadzik> well, any Perl 6 implementation will do :) It's written in Perl 6, yes. Needs Rakudo and git

[15:18] <tadzik> no, it installs them. It's actually a wraper over neutro

[15:18] <pmichaud> does Rakudo have to be system-level installed in order to work?

[15:18] <pmichaud> right

[15:18] <tadzik> (which is a module installer)

[15:18] <pmichaud> with Star, the modules are already installed.

[15:18] *** wamba left
[15:18] <pmichaud> so this would end up installing them on top of the already installed ones...?

[15:18] <tadzik> yes. But we can check whether the recent git versions work or not

[15:18] <tadzik> and poke the maintainers if not

[15:19] <moritz_> http://perlgeek.de/blog-en/perl-6/pascal-triangle.html

[15:19] <pmichaud> okay, so, no for today's Star release.

[15:19] <tadzik> I'm testing anyway, I'll maybe notice something that is included in Star and doesn't work

[15:19] <pmichaud> moritz_: maybe link to the rosettacode page?

[15:20] *** rindolf joined
[15:20] *** timbunce joined
[15:20] * pmichaud prepares to tweet moritz's page

[15:20] <moritz_> pmichaud: done

[15:21] <tadzik> pmichaud: ETA of the release?

[15:21] <pmichaud> tadzik: whenever I get around to it this morning... probably in the next couple of hours

[15:22] <x3nU> i wonder

[15:22] <x3nU> is perl6-examples dead? ;f

[15:22] <tadzik> oh, so I'll probably be done with testing then

[15:22] * tadzik @ File::Tools

[15:23] <tadzik> it could be a nice candidate, when properly tested

[15:23] *** Mowah left
[15:23] <pmichaud> http://twitter.com/pmichaud/status/22096932461

[15:23] <x3nU> and if it's not who can give commit right to it? ;f

[15:23] <moritz_> [Coke]: http://trac.parrot.org/parrot/ticket/1746 - segfaults during PIR generation

[15:23] <moritz_> [Coke]: which makes it somewhat harder to reduce it to PIR :-)

[15:23] *** Mowah joined
[15:24] *** arthur-_ left
[15:27] *** bythos left
[15:28] *** zulon left
[15:37] <[Coke]> moritz_: ah well.

[15:40] *** justatheory left
[15:40] <TimToady> std: /@a/, /@b[]/;   # heh, innerestin' bug

[15:41] <p6eval> std 32103: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable @b is not predeclared at /tmp/xEkAKX8jH7 line 1:␤------> [32m/@a/, /@b[33m⏏[31m[]/;   # heh, innerestin' bug[0m␤Check failed␤FAILED 00:03 120m␤»

[15:41] <TiMBuS> Zop is cool as heck, but I refuse to use Z=> instead of >>=>>>

[15:41] <TiMBuS> i mean look at it

[15:41] <moritz_> TimToady: seems that it just uses "-string interpolation rules

[15:41] <TimToady> ja

[15:41] <tadzik> >>=>>> actually looks like a Zip

[15:41] <moritz_> std: / @a.join() /

[15:41] <p6eval> std 32103: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable @a is not predeclared at /tmp/PLBVECRLHp line 1:␤------> [32m/ @a[33m⏏[31m.join() /[0m␤Check failed␤FAILED 00:04 118m␤»

[15:42] <TimToady> std: / @a.join /

[15:42] <p6eval> std 32103: OUTPUT«ok 00:03 118m␤»

[15:43] <tylercurtis> Oh no! If jnthn is about to go on vacation, who will make a windows installer for *+1?

[15:43] <pmichaud> tylercurtis: good point.

[15:43] <[Coke]> perhaps fperrad from #parrot?

[15:43] <tadzik> Speaking of which, some guys on Warsaw.pm didn't like it not asking about a directory in which to install stuff

[15:44] <[Coke]> tadzik: that's haaaaard. 

[15:44] <moritz_> tadzik: the problem is that the path must be known at compile time

[15:44] <pmichaud> tadzik: with parrot's current design, ..... right

[15:44] <[Coke]> do they use strawberry perl?

[15:44] <tadzik> ah

[15:44] <moritz_> tadzik: because parrot isn't relocateable

[15:44] <tadzik> awful

[15:44] <pmichaud> I forgot about the win32 version.

[15:45] <pmichaud> maybe someone else can put one together :)

[15:45] <pmichaud> or at least a "create win32 .msi" guide

[15:47] *** jferrero joined
[15:48] <pmichaud> afk, lunch

[15:49] <[Coke]> tadzik: patches. welcome.

[15:49] <tadzik> [Coke]: I'll pass that, I myself have no windows installed anywhere

[15:51] <moritz_> you can start with relocation on linux :-)

[15:51] <tadzik> oh sure :)

[15:52] <moritz_> one might think it shouldn't be too hard

[15:52] <moritz_> have a path that is prefixed the standard search path

[15:52] <moritz_> s/the/to the/

[15:52] <moritz_> hm, and how do we tell the installed parrot that path?

[15:53] <tadzik> it's about searching for pbcs?

[15:53] <tylercurtis> moritz_: "The ... is the series operator, which generates lists by feeding the previous value(s) to the generating block on its right." Depending on how one reads that, it's either partially correct, or wrong.

[15:54] *** shade\ left
[15:54] <tylercurtis> moritz_: I think you're also missing some parentheses in the next paragraph.

[15:54] <tylercurtis> nevermind that last bit.

[15:54] <moritz_> tylercurtis: do you have suggestions for clearer wording?

[15:55] <moritz_> s/right/left/ for one :-)

[15:55] *** molaf joined
[15:55] <TimToady> and maybe add 'until it reaches the goal on the right'

[15:56] *** shade\ joined
[15:56] <TimToady> (in this case, "whatever")

[15:57] <moritz_> updating now

[15:57] <moritz_> TimToady++

[15:57] <moritz_> tylercurtis++

[15:57] <moritz_> updated.

[15:58] <tylercurtis> For accuracy, it would be nice to at least briefly mention cases like 1...* or 1, 2, 4 ... *, but it would also distract from the subject of the post.

[15:58] <tadzik> maybe a link to Synopses then

[15:59] <moritz_> we need some docs about the series operator.

[15:59] <tadzik> ingy: around?

[15:59] <TimToady> btw, I'm getting to like using the -> form for the generator, because it visually says feed the left args to this funciton

[16:00] <tadzik> I have difficulties seeing an arrow with nothing on its left

[16:00] <tadzik> blargh, getting used to see

[16:00] <moritz_> 1, 2, 4, -> $x { 2 * $x } ... * # the value 4 is fed to the block

[16:01] <TimToady> well, we could have spelled it λ

[16:01] <tadzik> http://pb.rbfh.de/1wxHpFvt2Yy6E -- fresh tests results

[16:01] *** stepnem left
[16:01] <tadzik> looks like YAML needs either an instant love or a removal from Star

[16:02] *** stepnem joined
[16:03] <tadzik> duh, it uses TestML which doesn't work

[16:03] <tadzik> (or -- doesn't test)

[16:03] <tylercurtis> tadzik: when you tested TestML, did you have the test suite in the proper place?

[16:04] <TimToady> ingy ^^

[16:04] <tadzik> tylercurtis: Don't know what's a “proper place”

[16:04] *** pyrimidine joined
[16:04] <tadzik> testml recommends using ufo, and neutro uses ufo internally

[16:06] <tylercurtis> The testml test suite has to be in $TESTMLPM6-DIR/../testml-tml to test it, I think.

[16:06] <tadzik> duh, should be documented. but File::Find is also using files inside t/ during testing, and it has no problems with bare ufo

[16:07] <tadzik> ah, the README says to fetch an external TestML test suite

[16:07] *** araujo left
[16:08] <tadzik> which says: These tests should be included in a TestML implementation

[16:08] <tadzik> Something, somewhere went terribly wrong

[16:09] *** pmurias joined
[16:10] *** araujo joined
[16:18] <tadzik> phenny: tell ingy YAML should probably have TestML in its deps.proto. Also, could TestML fetch its test suite before compiling and testing, maybe in Configure.pl?

[16:18] <phenny> tadzik: I'll pass that on when ingy is around.

[16:18] <tadzik> phenny: thanks buddy

[16:19] <tadzik> hugme: hug phenny

[16:19] * hugme hugs phenny

[16:19] <tadzik> bots hugging bots :)

[16:24] <colomon> we're obsolete!

[16:24] <moritz_> so far we still need humans to trigger the hug

[16:25] *** tadzik is now known as phemny

[16:25] <phemny> we learn fast!

[16:25] <phemny> hugme: hug phemny 

[16:25] * hugme hugs phemny

[16:25] * moritz_ lols

[16:25] *** phemny is now known as tadzik

[16:26] <moritz_> phenny: hug hugme

[16:26] <tadzik> phenny: you selfish bastard

[16:27] <tadzik> every bot should have this function

[16:27] <tadzik> and an ability to hug back when hugged

[16:31] *** pmurias left
[16:36] <pugssvn> r32104 | lwall++ | [STD] check variable in /@a/ 

[16:36] <pugssvn> r32104 | warn on ignored subscript in /@a[]/ etc.

[16:36] <pugssvn> r32104 | (subtle) check existence of var in /@a=[.]/ but not /@<a>=[.]/

[16:36] *** BaggioKwok joined
[16:37] *** drake1 joined
[16:37] *** BaggioKwok left
[16:38] <colomon> rakudo: for $*IN.lines { say $_.trans("C" => "F", "D" => "G"); }

[16:38] <p6eval> rakudo 3a339e: OUTPUT«Attributes of type 'INTVAL *' cannot be subclassed from a high-level PMC.␤  in <anon> at line 22:/tmp/NPL0QGXltr␤  in main program body at line 1␤»

[16:38] <drake1> look http://pastebin.ca/1925179 I wrote this Makefile and is confused whether it's alright. How would a system with perl 6 interpret the script?

[16:39] <[particle]> p6eval: hug phenny # hug war!

[16:40] <[particle]> tadzik: they'd never stop hugging each other... maybe unless there's a 'get a room' command to stop it

[16:40] <tadzik> make hug not war

[16:40] <tadzik> [particle]: actually, the '/me hugs someone back' will probably not provoke another hug

[16:41] <tadzik> drake1: a system with perl6 has an 'perl6' executable next to usual 'perl'

[16:41] <tadzik> there's a reason why perl 6 executable is not called 'perl'

[16:42] <drake1> tadzik: ah, then it's fine

[16:42] <TimToady> if a perl6 executalbe is called 'perl', it's required to default to Perl 5 in the absence of evidence to the contrary

[16:42] <drake1> tadzik: was afraid it would clash

[16:42] <drake1> TimToady: neat

[16:42] *** redicaps joined
[16:43] <TimToady> such as using an extension of .pm6, or a 'use v6;' at the front

[16:44] <drake1> let me post a tar so you can try it

[16:44] <TimToady> or 'module' at the front, at least until Perl 5 steals that... :)

[16:44] <TimToady> I kinda doubt anyone is interested in trying it...

[16:45] <PerlJam> TimToady: you think perl 5 and 6 will always lead separate lives?

[16:45] <TimToady> yes and no

[16:46] *** mberends left
[16:47] <drake1> then you're the first ones www.gangsterfreak.com/file:fonted.tar.gz

[16:47] <drake1> then you're the first ones http://www.gangsterfreak.com/file:fonted.tar.gz

[16:47] <jwest-> OT: haskell is better than erlang?

[16:47] <TimToady> yes and no

[16:47] <jwest-> if so where?

[16:47] <jwest-> yes where?

[16:48] <TimToady> haskell has monads, which is both better and worse

[16:49] <TimToady> the question is, "better for what?"

[16:49] <jwest-> oh i was planning to use erlang or haskell with respect to speed

[16:49] <TimToady> setting up hierarchies of betterness in the absence of a problem to solve is somewhat pointless

[16:49] <jwest-> to create a chess tournament management software

[16:50] <TimToady> why would that care about speed?

[16:50] <huf> TimToady: what about moral purity?

[16:50] <TimToady> sounds like the sort of problem that almost any language would be fast enough to handle

[16:51] <huf> surely that's the only reasonable way to rank programming languages

[16:51] <TimToady> *even* Perl 6

[16:51] <smash_> TimToady: monads are cool

[16:51] <TimToady> monads are too hard to lift

[16:52] <jwest-> TimToady: ok and where is  erlang better than haskell, haskell has monads

[16:52] <tylercurtis> Erlang makes doing impure things easier.

[16:52] <huf> lift in what sense?

[16:52] <TimToady> erlang has a much better event system

[16:53] <TimToady> and a good story about upgrading modules while the program is still running, without hiccuping

[16:55] <x3nU> there's no taks that rakudo is fast enough to handle ;)

[16:55] <TimToady> when I say "monads are too hard to lift", that's a serious criticism.  you can do almost anything with monads in haskell, but as soon as you start trying to combine monads, you'd better be a genius

[16:55] <x3nU> task*

[16:56] <TimToady> hey, I'm the sniper around here, not you...

[16:56] <TimToady> std: /@a/

[16:56] <huf> TimToady: but what do you mean when you say "lift"?

[16:56] <p6eval> std 32103: OUTPUT«ok 00:01 117m␤»

[16:57] <TimToady> I mean it in the haskellian sense

[16:57] *** daxim left
[16:57] <TimToady> I also mean it as a pun, of course.

[16:58] <huf> i'll just go be confused now ;)

[16:59] <PerlJam> huf: confusion is the natural state of humans.

[16:59] <huf> not if you dont think about it!

[16:59] <PerlJam> huf: blissfully unaware of your own confusion is just what most humans strive for.

[17:01] <TimToady> That's the basic problem with Haskell: monads don't let you be confused, even when you want to be.

[17:02] *** bjarneh joined
[17:03] *** melte left
[17:03] * tylercurtis doesn't understand.

[17:04] <PerlJam> tylercurtis++  excellent!  :)

[17:06] *** bjarneh left
[17:06] *** bjarneh joined
[17:07] *** dakkar left
[17:07] *** plobsing left
[17:08] <tylercurtis> TimToady: can you explain more thoroughly? I have an idea of what you *might* mean (that Haskell makes it excessively difficult to use monadic things or things that use monadic things without understanding monads yourself), but I don't know if that's actually what you meant.

[17:09] *** plobsing joined
[17:12] <TimToady> I mean that Haskell forces you to think about most kinds of indeterminacy even when you don't care if the result is indeterminate, or are persuaded on other grounds (e.g. testing) that a program is working right enough.

[17:13] <TimToady> When all you have is a monad, everything starts looking like a proof.

[17:14] *** plobsing left
[17:14] <TimToady> And you have to be smart to prove things.

[17:14] <TimToady> And I don't always wanna be that smart.

[17:14] *** thebird left
[17:15] *** christine joined
[17:15] * tylercurtis definitely isn't always that smart.

[17:15] *** pmurias joined
[17:15] *** envi^home left
[17:16] <TimToady> Math is fine, but we don't run a compiler over our kids' genomes to prove they'll work right.  Some things are better determined empirically.

[17:17] <moritz_> $ cut -d ': ' -f 2

[17:17] <moritz_> cut: the delimiter must be a single character

[17:17] <moritz_> why oh why?

[17:17] <moritz_> didn't anybody think of generalizations when writing cut?

[17:17] <TimToady> see Unix, Arbitrary Restrictions Galore

[17:18] <huf> there's always awk

[17:18] <PerlJam> or sed

[17:18] <PerlJam> or perl

[17:18] <tylercurtis> Or perl6.

[17:18] <TimToady> re single character, I guess someone took "Do *one* thing..." very literally

[17:19] <PerlJam> tylercurtis: that's what I said

[17:19] <moritz_> perl eq any <perl1 perl2 perl3 perl4 perl5 perl6>

[17:19] <moritz_> excuse me, perl eq any ('perl' X~ 1..6)

[17:20] *** jferrero left
[17:21] * tylercurtis misunderstood "perl" in this context as the command named "perl".

[17:21] <tylercurtis> Which, for now, is not likely Perl 6.

[17:21] <moritz_> I'm happy to report that my simulation (a bit different than before) has now been running for about 2.5 hours, and still uses less than 200MB RAM

[17:21] <pmichaud> \o/

[17:21] <TimToady> \o/

[17:21] <colomon> \o/

[17:21] <TimToady> is there any way to sneak that into *+1?

[17:22] * colomon wonders if mandelbrot will suddenly start working a lot better again after this morning's patch...

[17:22] <pmichaud> there is, if we collectively think it important enough to do so

[17:22] <szbalint> that was one big memory leak eh?

[17:22] <moritz_> I've removed the SVG rendering of each step, and now have a nice resonance curve... not yet going very far on the right, but that will also work soon

[17:22] *** jferrero joined
[17:23] <pmichaud> oh, ouch.

[17:23] <moritz_> szbalint: yes; seems like it leaked every scalar

[17:23] <pmichaud> not so simple, since the current version of Rakudo doesn't use a released Parrot.

[17:23] <colomon> Is the question whether to use the latest Rakudo release for *+1 versus something cut today?

[17:23] <pmichaud> colomon: yes.

[17:23] <TimToady> have there been any major regressions?

[17:24] <colomon> So it would also get us your .chomp optimization, which was pretty big for file input.

[17:24] <pmichaud> the problem being that Rakudo doesn't use a released Parrot.

[17:24] <moritz_> hey, we can also ship the release version, and promise memory and speed improvements for the next release

[17:24] <pmichaud> Even though we bundle our own Parrot, I'm not sure I want to bundle a non-released one.

[17:24] *** Mowah left
[17:24] <tylercurtis> The patch should be able to be easily ported back to the latest Rakudo that did use 2.7.0.

[17:24] * moritz_ would prefer the released rakudo too

[17:24] <pmichaud> Especially given the recent discussion on #parrot yesterday and today.

[17:25] <tylercurtis> If it's important enough to do so.

[17:26] <PerlJam> pmichaud: sounds like waiting for the next release might be less painful.

[17:26] <pmichaud> are we really saying in effect that the lag between Rakudo release and Star release is too long?

[17:26] <moritz_> not really

[17:26] <colomon> pmichaud: certainly seems to be trending that way.

[17:26] <moritz_> it was just good/bad luck that we had those fixes right after a release

[17:26] <pmichaud> moritz_: I'm not so sure about that (more)

[17:26] <PerlJam> moritz_: doesn't that always tend to happen to varying extents?

[17:26] <pmichaud> big changes often land right after a release.

[17:27] <pmichaud> or even not-so-big changes

[17:27] <pmichaud> (I agree that in this specific instance, it was more timing luck than anything else, however.)

[17:27] <moritz_> that suggests to me that we just need to learn to resist the urge to ship the latest-and-shiniest

[17:27] <pmichaud> +1

[17:28] <moritz_> the nice thing about having regular releases is that the next one isn't too far off

[17:28] <pmichaud> so, so far I'm going with the compiler release

[17:28] <pmichaud> (i.e., #32, not head)

[17:29] *** molaf left
[17:29] <colomon> errr... you say "latest-and-shiniest", but really, didn't yesterday's work didn't reveal that #32 is pretty broken?

[17:30] <moritz_> colomon: not more broken than any of our last 6 releases

[17:30] <colomon> ie it's more a case that the problem is we're not stresstesting releases enough?

[17:30] <pmichaud> colomon: it wasn't broken as of Thursday.

[17:30] <pmichaud> at least, it wasn't "broken" enough to release.

[17:30] <pmichaud> the alternative is that we could release with #31

[17:30] <colomon> that is to say, we didn't know / understand that it was broken.

[17:31] <tylercurtis> The release is probably best, but as far as the memory leaks go, there's a third option: release + the patch.

[17:31] <moritz_> well, I knew it leaked, but not to which amount

[17:31] <PerlJam> But, this does give us a chance to put in a "known issues" section in the announcement with a comment that it has already been fixed or will be in the next release.

[17:32] *** macroron joined
[17:32] <pmichaud> tylercurtis: can you quickly locate the patch?

[17:32] <moritz_> 3a339ee8ab3a72867fe914ec9c689e1f5a890645

[17:32] <colomon> http://github.com/rakudo/rakudo/commit/3a339ee8ab3a72867fe914ec9c689e1f5a890645

[17:33] <tadzik> pmichaud: FYI, I smoke tested the Star modules (recent git versions) and everything seems ok, besides YAML which is quite hard to test

[17:33] *** redicaps left
[17:33] <pmichaud> tadzik++  # thanks!

[17:33] <pmichaud> that's a big help.

[17:33] <tadzik> no problemo

[17:33] <pmichaud> I'll apply the patch to the Star release.

[17:34] * moritz_ renders a 201x201 mandelbrot image

[17:35] <moritz_> colomon++ for the code

[17:36] <colomon> moritz_: I don't remember how small I was able to get it to crash last time I played with it.  I'm sure 501x501 crashed.  I seem to recall successfully generating 1001x1001 at some point in the spring...

[17:39] <TimToady> btw, http://rosettacode.org/wiki/Mandelbrot_set is one of the tasks lacking a Perl 6 solution

[17:39] <colomon> TimToady: Ack, the temptations you lay before me!  must... focus... on... $work....

[17:40] *** pmurias left
[17:41] *** jaldhar left
[17:42] *** ruoso joined
[17:44] *** Italian_Plumber joined
[17:45] * [Coke] misses Modula-3

[17:45] * TimToady blames Oberon

[17:46] <drake1> INIT_VERSION=sysvinit-2.86_modified. When your shell don't forward the environment, it starts to call utents and becomes unreliable

[17:47] <[Coke]> I don't see why R* couldn't ship a non-released version of parrot, given that R* contains it whole. The only reason to not want non-release versions in general is when you are relying on package maintainers to deal with dependencies, and don't want them to have to bundle a non-released parrot. in R*'s case, you ARE the packager.

[17:47] *** risou left
[17:48] <moritz_> [Coke]: people are packaging R* for distributions, with separate rakudo and parrot packages

[17:48] <pmichaud> [Coke]: except that the R* configuration doesn't always use the local parrot.

[17:48] <[Coke]> moritz_: if they are pulling their parrot from inside R*, then that still works.

[17:48] <pmichaud> i.e., it only uses the bundled parrot if --gen-parrot is provided.  If not provided, Configure.pl attempts to use an installed parrot.

[17:49] *** pmurias joined
[17:49] <[Coke]> ok. but that's an argument that makes a lot of sense from the packaging side. whatever was said in #parrot nonwithstanding.

[17:49] <pmurias> ruoso: hi

[17:49] <drake1> just coded scan mode tie ins for some other grammar. maybe parrot is alright

[17:50] <pmichaud> while Rakudo development has often used non-released Parrots, we've never released a Rakudo that used a non-released Parrot.  I'm categorically not starting down that path today.

[17:50] <[Coke]> Ok. that's a great an excellent plan which doesn't need to have anything to do with anything said in #parrot today. =-)

[17:50] <[Coke]> *and

[17:51] <moritz_> rakudo: say 5/4

[17:51] <p6eval> rakudo 3a339e: OUTPUT«1.25␤»

[17:51] *** Mowah joined
[17:52] <pugssvn> r32105 | patrickas++ | Fix test for exclusive alternating geometric series 

[17:52] *** bjarneh left
[17:54] *** lichtkind joined
[17:55] *** ruoso left
[17:59] *** pmurias left
[18:08] <drake1> just reading on the parrot grammar. do you know whether it's possible to modify the token patterns by signaling from rules?

[18:11] <drake1> eg. <$read_mode1> /pattern/ { object stuff; return(token); } 

[18:11] *** Sanitoeter left
[18:12] <ingy> tadzik: greetings

[18:12] <phenny> ingy: 16:18Z <tadzik> tell ingy YAML should probably have TestML in its deps.proto. Also, could TestML fetch its test suite before compiling and testing, maybe in Configure.pl?

[18:12] <tylercurtis> drake1: what exactly do you mean by that?

[18:12] <drake1> when the read mode changes, the entire set of "tokenizers" change to

[18:13] <pmichaud> drake1: that sound to me like entering a derived/alternate grammar

[18:13] <pmichaud> *sounds

[18:13] <ingy> tadzik: I can do that stuff now

[18:13] <pmichaud> we do some of that already, such as when the Perl 6 parser switches into the regex or quotation parser

[18:14] <drake1> like how you perceive the world yourself; sometimes more cautious to some things than other

[18:14] <tadzik> ingy: great

[18:14] <ingy> :)

[18:14] <ingy> tadzik: will you be around for another hour?

[18:14] <drake1> like to scope / mask the token set by a signal

[18:14] <ingy> I'll have you test it.

[18:15] <tadzik> ingy: probably

[18:15] * ingy hurries

[18:15] <tadzik> no problemo

[18:15] <tylercurtis> You could also store the readmode in a variable and have conditionals in each rule that cares to dispatch based on the readmode. But that's likely a bit ugly.

[18:15] <ingy> are we prepping a new star release?

[18:15] <tadzik> yep

[18:15] <drake1> tylercurtis: that's the slow way

[18:15] <ingy> where should I build star from?

[18:16] <pmichaud> I'm building a candidate tarball now.

[18:16] <ingy> \o/

[18:17] <lichtkind> pmichaud: ohai

[18:17] <lichtkind> ingy: :)

[18:17] <drake1> sometimes you see things in a more abstract token form

[18:17] <ingy> pmichaud: ping me whenthe tarball is go please

[18:19] <pmichaud> ingy: how do you mean "tarball is go"?  You mean when it's released?

[18:20] <tadzik> . o O (go go pmichaud's tarballs!)

[18:20] <tylercurtis> rakudo: $_ = "36"; m/ (\d) { make $/[0].sqrt } Remainder /; say $/.ast; # curiousity

[18:20] <p6eval> rakudo 3a339e: OUTPUT«Any()␤»

[18:20] <ingy> pmichaud: I want to test TestML and YAML against your release candidate

[18:21] <ingy> is it ready?

[18:21] <tadzik> Star doesn't do testing, does it?

[18:21] <ingy> ?

[18:22] <tadzik> while building/installing I mean

[18:22] <pmichaud> ingy: afaik, TestML and YAML are bundled with the release

[18:22] <tadzik> oh, can someone build the new book?

[18:22] <pmichaud> tadzik: I already have the new book in the tarball.

[18:23] <tadzik> pmichaud: how new, the last build? There were some fixes since then

[18:23] <ingy> I just want to know if there is a stable code base that I can build to test my modules...

[18:23] <pmichaud> ingy: we're still working out that process.  Normally you'd want to build against the latest compiler release.

[18:23] <pmichaud> (for testing)

[18:23] <ingy> pmichaud: you said 11:16 < pmichaud> I'm building a candidate tarball now.

[18:23] <ingy> I want to use that

[18:24] <ingy> so let me know when it's available

[18:24] <pmichaud> ingy: I don't plan to wait long before doing the release though.

[18:24] <ingy> please

[18:24] <pmichaud> I'm tracking down a bug in the build system atm.

[18:24] <ingy> I see

[18:25] <ingy> pmichaud: when you do the final release, will it pull in new copies of the current state of the modules?

[18:25] <pmichaud> currently I'm pulling in the new copies, yes.

[18:25] <tadzik> hmm

[18:25] <ingy> pmichaud: can you give me 30 mins?

[18:26] <tadzik> is it too late for neutro? A working module installer is not a bad thing

[18:26] <tadzik> aw, it's unix only

[18:26] <pmichaud> ingy: yes, I can probably give 30 mins.

[18:26] <ingy> what about ufo?

[18:26] <patch> tadzik: hi

[18:26] <tadzik> patch: hello

[18:26] *** TSa joined
[18:27] <patch> tadzik: should deps.proto contain he module name (testml) or the repo name (testml-pm6)?

[18:27] <moritz_> repo name for now

[18:27] <tadzik> patch: the proto name, which is the repo name

[18:27] <tadzik> . o O (patch eqv ingy?)

[18:27] <lichtkind> jnthn: na zdravi

[18:28] <patch> moritz_, tadzik: thanks!

[18:28] <tadzik> although neutro should understand both :)

[18:28] <tadzik> patch: you're welcome

[18:28] <patch> tadzik: !eqv

[18:28] *** zorgnax joined
[18:29] <tylercurtis> lichtkind: I think jnthn has already left for his vacation.

[18:29] <PerlJam> he said goodbye this morning, so I assume he's actually gone.

[18:29] <ingy> (patch is helping me, um, patch my modules)

[18:29] <lichtkind> tylercurtis: thanks

[18:29] *** crumbpicker joined
[18:29] <tadzik> appropriate nickname he/she has, then

[18:30] <lichtkind> tylercurtis: are you on perl prof team?

[18:32] *** jwest- left
[18:33] <zorgnax> I was reading the S05 and had a question on the <~~3> syntax. Is it possible to refer to captures at several parentheses deep as in <~~0,1,0>? and what does (a)((b)<~~0>)) refer to? (a)((b)(a)) or (a)((b)(b))?

[18:34] *** crumbpicker left
[18:34] <moritz_> doesn't look like it

[18:35] <moritz_> if you want something more elaborate, it's probably better to just name the thing you want to match against

[18:35] <ingy> does Configure.pl --gen-parrot mess up an earlier install of perl6?

[18:35] <moritz_> yes

[18:35] <ingy> k

[18:36] <moritz_> unless you chose a different prefix

[18:36] <moritz_> std: / a <~~>? /

[18:36] <p6eval> std 32105: OUTPUT«ok 00:03 116m␤»

[18:36] <ingy> but make install puts perl6 in /usr/local/bin

[18:36] <ingy> how does it know about src/rakudo?

[18:37] <drake1> in the http://www.gangsterfreak.com/doc , the token types change; sometimes only spaces are recognized, other time name expanded tokens and sometimes it's just strings

[18:37] <moritz_> it shouldn't mess with the perl6 in /usr/local/

[18:37] <ingy> it did

[18:38] <sorear> good * #perl6

[18:38] <moritz_> do you have some symlinks between src/rakudo and /usr/local?

[18:38] <ingy> because now it works again, since I finish make install of the new gen

[18:38] <ingy> no

[18:38] <ingy> I don't

[18:38] <moritz_> weird.

[18:39] <drake1> completely top/down and vice versa integration

[18:42] <pmichaud> ingy: http://www.pmichaud.com/sandbox/rakudo-star-2010-08-rc1.tar.gz # release candidate tarball

[18:42] *** mberends joined
[18:45] <TimToady> maybe it should be *-8

[18:46] <TimToady> wait, that breaks in January...

[18:46] *** Trashlord left
[18:52] <colomon> is that *-8, *-9, *-10... or *-8, *-7, *-6...  ?  ;)

[18:53] <moritz_> colomon: the 201er mandelbrot worked fine, running the 1001er now :-)

[18:53] <colomon> \o/

[18:53] <colomon> err... why I am not trying that myself?  ;)

[18:53] <moritz_> but I changed it to do Num arithmetic instead of Rat

[18:54] <moritz_> in the hope that it is faster

[18:54] <colomon> moritz_: I've actually tried that, and it made surprisingly little difference.

[18:54] <colomon> (when I tried it, things may have changed)

[18:54] <moritz_> about 20s per line

[18:54] <colomon> seems likely to be a sign that something else in there is very very very unreasonably slow.

[18:54] <moritz_> aye

[18:55] <moritz_> rakudo: say 2001 * 1/3 # expect runtime in minutes...

[18:55] <p6eval> rakudo 3a339e: OUTPUT«667␤»

[18:55] <moritz_> rakudo: say 2001 * 1/3 / 60

[18:55] <p6eval> rakudo 3a339e: OUTPUT«11.1166666666667␤»

[18:55] <moritz_> that's going to be an all-nighter :-)

[18:55] <colomon> moritz_: amount of time per line changes as the fractal gets bigger

[18:55] <moritz_> colomon: right :(

[18:55] <colomon> ie it's 20s per 201 pixels.

[18:55] <moritz_> for the worse, iirc

[18:56] <colomon> it's its probably 10 pixels a sec or so, so 1001 is

[18:56] <colomon> rakudo: say 1001 * 1001 / 10

[18:56] <p6eval> rakudo 3a339e: OUTPUT«100200.1␤»

[18:56] <colomon> rakudo: say 1001 * 1001 / 600

[18:56] <p6eval> rakudo 3a339e: OUTPUT«1670.00166666667␤»

[18:57] <moritz_> gqview shows parts of corrupted/incomplete images, and refereshes every few seconds - so I actually get visual feedback

[18:57] <pmichaud> rakudo:  say 1001*1001/86400

[18:57] <colomon> rakudo: say 1001 * 1001 / (60 * 600)

[18:57] <p6eval> rakudo 3a339e: OUTPUT«11.5972337962963␤»

[18:57] <p6eval> rakudo 3a339e: OUTPUT«27.8333611111111␤»

[18:57] <colomon> oh sweet!

[18:57] <colomon> (visual feedback, I mean.)

[18:58] <colomon> 27.8 hours.  ugh.

[18:58] <[Coke]> colomon: ?

[18:58] <colomon> [Coke]: estimating how long it will take moritz_'s machine to finish his 1001x1001 mandelbrot run.

[18:59] <slavik> colomon: it's already done

[18:59] <slavik> colomon: but that is data from 100 years in the future

[18:59] *** rindolf left
[19:00] <x3nU> is there any chanses that r* will be released today?

[19:00] <moritz_> x3nU: yes. pmichaud already posted a link to a release candidate

[19:00] <moritz_> http://www.pmichaud.com/sandbox/rakudo-star-2010-08-rc1.tar.gz

[19:00] <moritz_> testing welcome

[19:00] <x3nU> thanks

[19:02] <pmichaud> x3nU: I have a few $othertasks that will keep me a bit occupied for the next ~4h; I'll probably release around then.

[19:03] <pmichaud> oh, argggh

[19:03] <pmichaud> the rc1 candidate didn't get the patch applied

[19:04] <ingy> tadzik: when was testml added to *?

[19:04] <tadzik> ingy: no idea

[19:04] <ingy> I think that last * only had yaml

[19:05] <ingy> even though it uses testml tests

[19:05] <ingy> pmichaud said that the install didn't run tests

[19:05] <ingy> so it wasn't an issue

[19:05] *** Mowah left
[19:06] <pmichaud> so far the install doesn't run any tests.  It likely should at some point.

[19:06] <ingy> ok, I would suggest pulling testml-pm6 from this release then

[19:06] <pmichaud> afaik it's not there, unless it's under some other name.

[19:07] <ingy> oh

[19:07] <ingy> ok

[19:07] <ingy> :)

[19:07] <ingy> I thought tadzik said it was

[19:07] <ingy> my bad

[19:07] <ingy> I think testml would be a great addition to the next R* :)

[19:08] <pmichaud> I think tadzik may have been referring to it as a standalone module, not necessarily as bundled in R*

[19:08] <TimToady> doesn't the typical mandelbrot iteration very quickly exceed the precision of a Rat and graduate to a Num anyway?

[19:08] <pmichaud> i.e., YAML should identify TestML as one of its dependencies

[19:09] <ingy> pmichaud: patch++ has made that so

[19:09] <pmichaud> excellent.

[19:09] <ingy> er

[19:09] <ingy> patch: ?

[19:10] <patch> ingy: sent you a pull request

[19:10] <patch> ingy: i don't have commits on yaml-pm6

[19:10] <ingy> oh

[19:10] <ingy> let me take care of that!

[19:11] <ingy> done

[19:11] <ingy> patch: please push 

[19:11] <ingy> I wish github made it easier to give out commit bits

[19:12] <moritz_> that's what hugme is for :-)

[19:12] <ingy> oh?

[19:12] <ingy> just for rakudo?

[19:12] <moritz_> hugme: add ingy to json

[19:12] * hugme hugs ingy. Welcome to json!

[19:12] <moritz_> afk

[19:12] <pmichaud> hugme: show projects

[19:12] <hugme> pmichaud: sorry, I don't know anything about 'projects'

[19:12] <patch> pmichaud, ingy: yaml-pm6 now has deps.proto

[19:13] <pmichaud> hugme: list projects

[19:13] <hugme> pmichaud: I know about Math-Model, Math-RungeKutta, MiniDBI, book, gge, hugme, ilbot, java2perl6, json, modules.perl6.org, november, nqp-rx, nqpbook, perl6-examples, perl6-wtop, process-cmd-args, proto, pugs, star, svg-matchdumper, svg-plot, tardis, temporal-flux-perl6syn, try.rakudo.org, tufte, ufo, web, yapsi

[19:13] <ingy> patch++

[19:13] <ingy> patch: let's get back to hacking

[19:14] <patch> ingy: we should figure out this tesml-pm6/testml-tml business soon

[19:14] <ingy> patch: I'm all over it

[19:14] <ingy> :)

[19:14] <pmichaud> http://www.pmichaud.com/sandbox/rakudo-star-2010.08-rc2.tar.gz

[19:14] <pmichaud> (if anyone is curious/interested)

[19:16] <patch> pmichaud: so there's currently no distinguishing a dependency from a test dependency, they should all just go in deps.proto?

[19:16] <drake1> I've just been hacking the character memory of the VGA card

[19:16] *** Mowah joined
[19:16] *** [Coke] left
[19:17] <tadzik> patch: take a look at http://ttjjss.wordpress.com/2010/08/09/so-you-want-to-write-a-perl-6-module/

[19:18] <drake1> next step is to transliterate the C compiler

[19:19] <drake1> without perl it's wouldn't be straight ahead to modify

[19:20] *** pnate left
[19:20] <ingy> tadzik: I hate that lib and logotype conflict with tab completion!

[19:21] <tadzik> ingy: not my fault :(

[19:21] * tadzik points at absent masak

[19:22] <drake1> perl ctr | cc -x C

[19:22] *** zorgnax left
[19:23] <patch> tadzik: thanks, it doesn't seem to distinguish between requires and build_requires (as in META.yml)

[19:24] <patch> tadzik: where testml would really just be a build_requires

[19:25] <drake1> some of the $(CC)'s use perl to generate the switch codes

[19:27] <drake1> then with a type-system optimized for the lexical analyzer, it shouldn't take to to process

[19:27] *** hercynium joined
[19:27] *** drake1 left
[19:29] *** TSa is now known as glurks

[19:29] *** glurks is now known as TSa

[19:31] *** TSa left
[19:31] *** lamstyle left
[19:31] *** lamstyle joined
[19:31] *** mikehh_ joined
[19:32] *** mikehh left
[19:34] *** TSa joined
[19:35] *** TSa left
[19:36] <tadzik> patch: that can be changed :)

[19:36] <patch> :)

[19:37] * moritz_ back

[19:37] <tadzik> but it wouldn't matter anyway, with the build system now. And it doesn't in Perl 5 either, as everyone uses cpanminus anyway

[19:42] *** Mowah_ joined
[19:42] *** Mowah_ left
[19:56] *** Italian_Plumber left
[19:59] *** patrickas joined
[19:59] *** mberends left
[20:00] <TimToady> phone

[20:00] *** Su-Shee left
[20:00] *** zeyata joined
[20:02] <moritz_> 179 out of 1001 lines of mandelbrot rendered... looks pretty so far, but not very interesting yet :-)

[20:02] *** mberends joined
[20:02] *** ejs joined
[20:05] *** timbunce left
[20:06] *** timbunce joined
[20:08] *** mberends left
[20:09] *** zeyata left
[20:11] *** zeyata joined
[20:12] *** zeyata left
[20:13] *** zeyata joined
[20:15] *** Holy_Cow left
[20:16] *** dual left
[20:16] <tadzik> loliblogged, weird stuff: http://ttjjss.wordpress.com/2010/08/25/on-the-language-wars/

[20:19] *** macroron left
[20:20] * gfldex noms tadzik blogpost

[20:21] *** mrsaturns joined
[20:21] <mrsaturns> "Hello, World!".say;

[20:21] <x3nU> i have asked that question before but nobody responded ;f how do i contribute to perl6-examples? ;)

[20:22] * moritz_ loves tadzik's blog post

[20:22] <gfldex> x3nU: you talk to http://github.com/unobe

[20:23] <moritz_> x3nU: 1) tell my your github ID

[20:23] <moritz_> 2) get a commit bit

[20:23] <x3nU> moritz_: xenu

[20:23] <moritz_> hugme: add xeno to perl6-examples

[20:23] * hugme hugs xeno. Welcome to perl6-examples!

[20:23] <x3nU> moritz_: you made typo :)

[20:23] <moritz_> oops

[20:24] <moritz_> hugme: add xenu to perl6-examples

[20:24] * hugme hugs xenu. Welcome to perl6-examples!

[20:24] <x3nU> thanks

[20:24] <moritz_> http://github.com/perl6/perl6-examples/

[20:24] <moritz_> that's the "offical" one

[20:24] <x3nU> seems dead

[20:24] <x3nU> ;d

[20:24] <moritz_> feel free to revive it

[20:24] *** pnate joined
[20:25] *** dual joined
[20:26] * pmichaud removes "xeno" from perl6-examples.

[20:26] <moritz_> ok

[20:27] <moritz_> otherwise I would have

[20:27] <pmichaud> hugme knows how to remove?

[20:27] <moritz_> no

[20:27] <tadzik> blogpost reddited

[20:27] <moritz_> I'm hacking up a script that uses the API to remove one

[20:27] <pmichaud> ah

[20:27] <pmichaud> okay :-)

[20:28] <moritz_> seems to have worked, one way or another

[20:28] <pmichaud> TimToady: when you mentioned "idiomatic Perl 6" earlier, I'm wondering how many people are mentally doing a s/ma// :-|

[20:28] *** smash_ left
[20:28] *** smash_ joined
[20:29] <pmichaud> (some of the reaction to the pascal example hasn't been all that positive :-)

[20:30] <colomon> pmichaud: where?

[20:30] <pmichaud> colomon: where what.... negative reaction?

[20:31] <colomon> yes

[20:31] <pmichaud> colomon: example comment:  "his is totally unreadable code. No one, not even Saint Larry, should code like this. EVER. "

[20:31] *** Padz joined
[20:31] <pmichaud> *This

[20:31] <moritz_> http://perlgeek.de/blog-en/perl-6/pascal-triangle.writeback

[20:31] <moritz_> one negative comment

[20:31] <moritz_> two curious

[20:31] <moritz_> one positive

[20:32] <pmichaud> http://twitter.com/shadowcat_mst/status/22112066276

[20:32] <tadzik> oh wow

[20:32] <pmichaud> http://twitter.com/pedromelo/status/22110965152

[20:32] <tadzik> this is what is called a Fail

[20:32] <tadzik> the comment with Saint Larry

[20:32] <pmichaud> various retweets

[20:33] <tadzik> duh, it's like judging Perl readability because of Perl Golf

[20:33] <pmichaud> tadzik: ...except in this case, we'd consider this to be idiomatic.

[20:33] <pmichaud> or at least more idiomatic than some of the other solutions.

[20:33] <mrsaturns> I wouldn't say it's *totally* unreadable. I pretty much got "sub", "say", and ";" out of it

[20:33] <mrsaturns> :P

[20:34] <moritz_> well, idiomatic strongly depends on your skill level with the language

[20:34] <tadzik> sure thing

[20:34] <moritz_> for a functional language, this is a rather typical approach

[20:34] *** plainhao left
[20:34] <moritz_> the p5 lovers don't think that functional yet

[20:34] <tadzik> after few weeks of learning Spanish, you probably won't be able to read a Spanish books

[20:34] <tadzik> Haskell people may like it then :)

[20:34] <pmichaud> I'm not at all advocating that we change anything; I was just wondering about the reactions :)

[20:34] <moritz_> and I try to explain them

[20:35] <pmichaud> I've certainly seen mathematical formulas that are far more difficult to read than this.  :)

[20:35] <tadzik> that reminds me of my Linear Algebra exam :/

[20:36] *** eternaleye_ joined
[20:36] <pmichaud> personally, I like the pascal example a lot.

[20:36] <moritz_> it's curious that mst uses "camelia perl" for Perl 6, and "perl" for Perl 5

[20:36] <pmichaud> moritz_: I think that may just be because he doesn't have a good "qualifier" adjective for Perl 5 yet.

[20:37] <pmichaud> i.e., he'd like to say "<something> perl" for Perl 5, but we don't have a good <something> yet.

[20:37] <moritz_> well, if you find "camlia" good for Perl 6, the obvious would be "camel" for 5

[20:37] <pmichaud> Maybe it should be "Whatever Perl"

[20:37] <pmichaud> camel is trademarked, though.

[20:37] <moritz_> I don't really like "camelia perl" for 6 though

[20:37] *** eternaleye_ left
[20:37] *** eternaleye_ joined
[20:37] *** eternaleye left
[20:37] *** eternaleye_ is now known as eternaleye

[20:38] <tadzik> He's probably trying to insult Perl 6 in a delicate way, but I may understand it wrong

[20:38] <sorear> mst insults everyone and everything

[20:38] <sorear> don't take it personally

[20:38] <moritz_> tadzik: I don't think that's his intent

[20:38] <pmichaud> tadzik: no, I'm pretty sure he's not meaning it as a put-down, insult, or otherwise denigrating Perl 6.

[20:39] <pmichaud> nor is he intending "camelia perl" in the sense of "imposter" or "not the real Perl"

[20:39] <moritz_> tadzik: it's more like trying to get rid of "perl 6 is the perl 5 successor" idea

[20:39] <TimToady> he's using it like "strawberry perl"

[20:39] <pmichaud> (I've had discussions with mst on this very point.)

[20:39] <pmichaud> yes, as TimToady++ says

[20:39] <tadzik> hmm, sounds like "This childish Perl". But you know him better, I'm probably wrong

[20:39] <pmichaud> it's identifying a particular flavor of Perl.

[20:39] *** bythos joined
[20:40] <[particle]> tadzik: when have you known mst to dance around an insult?

[20:40] <moritz_> [particle]: when it's something where he knows an insult will be contra productive

[20:40] <colomon> for what it's worth (I did knock some of TimToady's code elsewhere in Rosetta yesterday), I think [1], -> @p { [0, @p Z+ @p, 0] } ... *   is crystal clear idiomatic perl 6.  It's simple and it perfectly captures the nature of the math.

[20:41] <pmichaud> visually I ran into difficulty in initially seeing it as  0, (@p Z+ @p), 0

[20:41] <pmichaud> when it's really  (0, @p) Z+ (@p, 0)

[20:41] <TimToady> this is why those guys are all big operators

[20:41] *** Padz left
[20:42] <TimToady> either tall or long

[20:42] <pmichaud> right, but somehow Z+ wasn't big enough for me. 

[20:42] <pmichaud> maybe it's my font.

[20:42] <patrickas> I guess the problem is trying to apreciate that without having gotten used to perl6 is really hard

[20:42] <TimToady> partly it's becuase the 0's stick up too far

[20:42] <pmichaud> well, I'm also so used to seeing the comma as such a low-level operator, it's a little hard to get used to the idea that something like Z+ is lower.

[20:43] <pmichaud> I'm sure it would come with practice -- that was just my initial confusion.

[20:43] <pmichaud> (which I'm sure others will share for a while.)

[20:44] <TimToady> I think some of the reaction is understandable: "There's more than one thing here I don't understand, and that's N-1 things too many."

[20:44] *** bythos left
[20:45] <pmichaud> TimToady: I think I agree, for now.

[20:45] <pmichaud> I'm giving talks at a Python conference this weekend, and I know what their reaction would likely be.  :-)

[20:46] *** plobsing joined
[20:46] <TimToady> for them, you want to give them a few things they can *almost* do :)

[20:46] <pmichaud> I've already got a budding talk about "similarities I've noticed between Python and Perl 6"  :-)

[20:46] *** ejs left
[20:46] <tadzik> [particle]: I didn't, that was just my first thought after seeing this tweet

[20:47] <TimToady> and one glaring difference: list comprehensions fall out naturally in Perl 6 rather than being special syntax

[20:47] <pmichaud> yes, I was planning to give list comprehensions as an example.  :)

[20:47] <gfldex> pmichaud: please make sure that the faces of the audience are recorded too :)

[20:47] <pmichaud> gfldex: I've given presentations to this group before; it's quite friendly for the most part (more)

[20:48] <pmichaud> actually, the conference organizer is trying to get people to commit to giving lightning talks at the end of the conference, but only had a few takers (more)

[20:48] <pmichaud> so he sent a message to the list saying "any unfilled lightning talk slots will be given to pmichaud, who will undoubtedly use them to show of Perl 6 stuff"  :-)

[20:48] <pmichaud> *show off

[20:49] <moritz_> lol

[20:49] <pmichaud> lots of talk submissions ensued shortly thereafter :)

[20:49] <pmichaud> (especially after I sent a message saying that I'd make good on the organizer's threat :)

[20:49] <moritz_> so, how many lightning talk slots did you get? :-)

[20:49] <pmichaud> won't know until Saturday

[20:49] <pmichaud> but I have no doubt that I can fill them

[20:50] <pmichaud> (I suspect I'll get just the two I requested.)

[20:50] <tadzik> pmichaud: curiosity, do you always speak as fast as on the LOLCODE talk?

[20:50] <pmichaud> tadzik: no, not always.

[20:50] <pmichaud> tadzik: only when I have a time limit, as I did then.

[20:50] <tadzik> I really liked that one :)

[20:50] <moritz_> I found the first 4 minutes of the lolcode talk quite reasonable

[20:50] *** Ross joined
[20:51] <pmichaud> I did too -- that talk is one of my favorites.  I've been wanting to come up with an equally good hack since then.

[20:52] <moritz_> (277 lines of mandelbrot calcualted... the head of the snowman is starting to show)

[20:52] <pmichaud> moritz_: we're 27% done (at least in terms of lines?)

[20:52] <diakopter> there is at least one thing I don't get about "There's more than one thing here I don't understand, and that's N-1 things too many."

[20:52] <pmichaud> ?

[20:52] <moritz_> pmichaud: yes

[20:52] <pmichaud> not too bad... but I guess the expensive part is yet to come

[20:53] <moritz_> after about 2h runtime; memory still below 200M

[20:53] <pmichaud> iirc, the numbers in the set are the ones that take longest to calculate

[20:53] *** am0c left
[20:53] <moritz_> black = exeeded iteration limit, iirc

[20:53] <moritz_> *exceeded

[20:53] <pmichaud> right

[20:54] <patrickas> diakopter: ?

[20:55] <moritz_> diakopter: most people can't digest more than one new concept at a time

[20:55] <sorear> moritz_: pixels/(GHz-sec) = ?

[20:55] <pmichaud> tadzik: (finally getting around to reading your blog post)....

[20:55] <pmichaud> tadzik: HAHAHAHAHAHAHAHAHAH   tadzik++ tadzik++ tadzik++

[20:56] <moritz_> rakudo: 1001 * 270 / (2.2 * 2 * 3600)

[20:56] <p6eval> rakudo 3a339e:  ( no output )

[20:56] <moritz_> rakudo: print 1001 * 270 / (2.2 * 2 * 3600)

[20:56] <sorear> tadzik: are you on planetsix?

[20:56] <p6eval> rakudo 3a339e: OUTPUT«17.0625»

[20:56] <moritz_> sorear: ^^

[20:56] <pmichaud> fortunately, Perl is already an onion.  Those pasta, tomato, and mushroom loving dweebs don't know what they're talking about.  :-)

[20:57] <tadzik> sorear: I don't think so

[20:57] <tadzik> sorear: but I hope one day not everything will be Perl related ;)

[20:57] <tadzik> pmichaud: I'm glad you like it :)

[20:57] <moritz_> tadzik: if you have a perl (or perl6) tag, and a feed that filters by that talk, all is fine (and we can use tha feed for planetsix)

[20:58] <tadzik> moritz_: I have

[20:59] <sorear> tadzik++ tadzik++ tadzik++

[20:59] <moritz_> tadzik: http://ttjjss.wordpress.com/category/perl/feed/ this one?

[21:00] <tadzik> moritz_: looks fine

[21:00] <tadzik> oh, I may want to adjust categories for that last one

[21:00] <tadzik> I'm tempted to add Perl to it :)

[21:00] <moritz_> phenny: tell [Coke] could you please add http://ttjjss.wordpress.com/category/perl/feed/ (nick tadzik, realname Tadeusz Sośnierz) to planetsix? thank you

[21:00] <phenny> moritz_: I'll pass that on when [Coke] is around.

[21:00] <moritz_> tadzik: please do

[21:01] <tadzik> (although adding Python would be a little _too_ offensive)

[21:02] <tadzik> moritz_: fixed-faxed

[21:02] <moritz_> tadzik: the categories should be selected not only by what the post is about, but also what readers interest

[21:03] <tadzik> you're right

[21:03] <moritz_> ie if the post is not directly about perl, but interesting for the perl readers, add it

[21:04] *** Holy_Cow joined
[21:05] *** drake1 joined
[21:06] <drake1> hehehe now I wrote this in perl6 http://pastebin.ca/1925348 . How would the equivalent line 13-14 be written in perl6 ?

[21:06] <drake1> in perl5*

[21:06] *** Mowah left
[21:06] <tadzik> it is in Perl 5, isn't it?

[21:06] <tadzik> oh, wrong substitution

[21:07] <tadzik> I think: @but = @cmd.grep( .title eq $msgst[0]).map( $_<but> )

[21:07] <drake1> ok

[21:08] <tadzik> not checked, beware ;)

[21:08] *** bjarneh joined
[21:08] <sorear> yeah you need blocks in there

[21:09] <sorear> also probably .<title> if it's a hash

[21:09] <drake1> it is

[21:09] <drake1> it

[21:09] <drake1> it's a hash with the button object, the title and the command

[21:10] *** whiteknight joined
[21:10] <tadzik> moritz_: happy reddit birthday!

[21:11] <drake1> thank goddess for terminal emulators, the who desktop is full just for one application

[21:12] <drake1> s,who,whole

[21:12] * moritz_ isn't sure that's an occasion to celebrate

[21:13] <tadzik> well, I was hoping you'll share a cake :P

[21:14] <moritz_> you can have the whole of it :-)

[21:14] * moritz_ -> sleep

[21:15] <tadzik> :)

[21:17] *** calin joined
[21:17] *** Ross left
[21:18] *** zeyata left
[21:23] <drake1> instead of using hash, can I simply say: class { .title = "title", .cmd = ... ?

[21:24] <tadzik> probably

[21:24] <drake1> should the class not be define only once?

[21:25] <drake1> with an instance for each [ title, cmd, button ] struct

[21:27] <tadzik> Define once, instantiate many times

[21:27] <drake1> it's probably the same data type underneath

[21:27] <tadzik> you could also use an anonymous class, but they may be NYI

[21:28] <drake1> tadzik: I mean to define the class with thow three member and base an object on that for each task definition

[21:28] <drake1> s,thow,those

[21:29] <tadzik> yeah, I understand

[21:30] <drake1> then it would be more easy to define a method to retrieve the keys instead of using `map'

[21:31] <drake1> I guess

[21:31] *** timbunce left
[21:32] <drake1> maybe it's faster to map a hash with the array index or a reference

[21:32] <dalek> niecza: 43b3f6a | sorear++ | src/Niecza/Actions.pm:

[21:32] <dalek> niecza: Fix parsing of regex backslash classes

[21:32] <dalek> niecza: review: http://github.com/sorear/niecza/commit/43b3f6a1d724d4a2a35193fb6031d0b2fd0fb5b2

[21:32] <dalek> niecza: d8daad9 | sorear++ | / (4 files):

[21:32] <dalek> niecza: . and <!> for regexes

[21:32] <dalek> niecza: review: http://github.com/sorear/niecza/commit/d8daad9ad148b42cda5aba732b711fe898ea26f6

[21:32] <dalek> niecza: 8c59198 | sorear++ | / (3 files):

[21:32] <dalek> niecza: Change Cursor to use CClass.pm character classes

[21:32] <dalek> niecza: review: http://github.com/sorear/niecza/commit/8c5919828d64a07722f50a8283f58f686f3647d5

[21:32] *** Guest23195 left
[21:33] <drake1> except if perl6 is smart enough to cache the results

[21:33] <tadzik> cache?

[21:33] <drake1> a `map' function could have the output cached

[21:33] <drake1> implicitly

[21:34] <ashleydev> moritz_: what's the deal with calling a sub with square parens?  # pascal[^10]

[21:34] <tadzik> he's asleep. The function returns a lazy list

[21:35] <tadzik> so you're using the result as an array (list)

[21:35] <ashleydev> how is it different than pascal(^10)?

[21:35] <drake1> line 13-14 could store the @but behind the scenes and only update when @cmd changes (which it never does)

[21:35] <tadzik> the function takes no params. It's rather like @a = pascal; @a[^10]

[21:35] <ashleydev> ah

[21:35] <tadzik> took me a moment too ;)

[21:36] <ashleydev> pascal().[^10].perl

[21:36] <Juerd> The sub is just there to confuse you.

[21:36] <TimToady> you should just ignore the sub, since it's just a compile-time declaration of a constant that only happens to be an infinite list of lists

[21:37] <TimToady> in fact, I should probably have declared that way: constant @pascal := etc

[21:38] <ashleydev> TimToady: are you speaking of moritz_ blog article?

[21:38] <colomon> TimToady: that won't actually work in current rakudo, will it?  

[21:38] <drake1> char const *but alike

[21:38] <TimToady> yes

[21:39] <TimToady> and yes, I think

[21:39] <ashleydev> hmm so: sub pascal {...} is a compile time constant?

[21:39] <TimToady> rakudo: constant @foo = 1,2,4 ... *; say @foo[10]

[21:39] <p6eval> rakudo 3a339e: OUTPUT«===SORRY!===␤Constant type declarator not yet implemented at line 22, near "= 1,2,4 .."␤»

[21:39] <colomon> ashleydev: no, but in an ideal sense it does the same thing here.

[21:39] <TimToady> ah well

[21:40] <drake1> with restrict *butp; constructor

[21:40] <patrickas> colomon do you have a min ?

[21:40] <TimToady> commuting &

[21:40] <ashleydev> sure I could see @array := ...

[21:40] <ashleydev> that wouldn't have cause me confusion

[21:41] *** pnate left
[21:43] *** masak joined
[21:43] <masak> ahoy, #perl6

[21:44] <patrickas> LOLITSMASAK!

[21:44] * jferrero use common::sense

[21:44] *** javs left
[21:45] <tadzik> hello masak

[21:45] * masak backlogs

[21:46] <tadzik> how do you backlog after being offline?

[21:46] <masak> there are logs at http://irclog.perlgeek.de/perl6/

[21:46] <tadzik> duh, I thought you have some secret tech

[21:46] <huf> .. is the stupid cousin of ..., right?

[21:47] <masak> huf: well, yes and no.

[21:47] <tadzik> hmm, not really

[21:47] <masak> huf: infix:<..> creates a Range, which mainly just says "from here to there"

[21:48] <masak> huf: infix:<...> creates a list, which if iterated gives you a bunch of values.

[21:48] <patrickas> huf: I tend to think of ... as the smartass cousin of .. :-)

[21:48] <huf> aha!

[21:48] <masak> tadzik: want to help me finish up pls? :)

[21:48] <huf> i have indeed seen the light

[21:50] <tadzik> masak: now? :)

[21:50] <masak> tadzik: I was thinking tomorrow.

[21:50] <tadzik> hmm

[21:51] <tadzik> evening?

[21:51] <tadzik> I planned to start learning for mah exams

[21:51] <masak> let's talk UTC for simplicity.

[21:51] <tadzik> it's 21 UTC now, right?

[21:51] <tadzik> we're in similar TZ's iirc

[21:51] <masak> almost 22 UTC.

[21:51] <szbalint> 21:51 UTC, yes.

[21:52] <tadzik> a'right

[21:52] <masak> oh right.

[21:52] <masak> tadzik: .pl?

[21:52] <tadzik> masak: yep

[21:52] <szbalint> CEST :)

[21:52] <masak> lovely place. I've been there several times.

[21:52] <tadzik> we're changing TZ's in Poland twice a year, so I never know :P

[21:52] <szbalint> or I should have said czesc :P

[21:52] <x3nU> so you been in poland or in lovely place?

[21:52] <x3nU> ;d

[21:53] <masak> anyway, evening after about 21 our time (19 UTC) would work for me.

[21:53] <masak> x3nU: yes. :)

[21:54] <x3nU> tadzik: also, nothing really important or urgent but i think that crating polish perl 6 wikibook would be a good idea

[21:54] <x3nU> creating*

[21:55] <tadzik> oh, we're in the same timezone masak?

[21:56] <masak> CEST, as szbalint++ said :)

[21:56] <tadzik> x3nU: well, maybe translating the Perl 6 Book

[21:57] <masak> i

[21:57] <tadzik> masak: 21 is ok for me

[21:57] <masak> it's quite a big task to translate a book, so figure out ways to reward yourself along the way...

[21:57] <masak> tadzik: goodie.

[21:57] <masak> tadzik: during the day, I'll see what I can do to set things up.

[21:58] <x3nU> there's much time ;d

[21:58] <masak> the work that needs to be done is very parallelizable.

[21:58] <masak> basically, go through all the existing modules once, and see that they install.

[21:58] <masak> if they don't, do stuff.

[21:59] <tadzik> wait, are we installing everything available, or a specific thing?

[22:00] <tadzik> some guys were looking for a grant about translating the book to russian

[22:00] *** Holy_Cow left
[22:00] <masak> tadzik: a specific thing, one after the other.

[22:00] <masak> tadzik: last week moritz_++ discovered that pls doesn't install dependencies.

[22:01] <masak> it works in the test suite, but poc doesn't have the logic to find and install dependencies.

[22:02] <masak> in fact, I should probably add a failsafe in App::Pls that carps if there's no provided way to find out a project's dependencies.

[22:02] * sorear hopes for a better #cpan6sketch next week

[22:02] <tadzik> well, no way to find usuallly means no deps

[22:03] <masak> tadzik: in the case of poc, there is a way. I just didn't think to put it in. a blatant error would have reminded me to.

[22:04] <tadzik> well, if make fails, there is a chance that they're missing

[22:05] <masak> I did not understand that statement.

[22:05] <sorear> TimToady: Is the full list of things \h and \v match listed anywhere?

[22:05] <masak> tadzik: we might be talking about slightly different things.

[22:05] <sorear> masak: Nobody showed up last time.

[22:05] <masak> sorear: I know. I couldn't make it, and said so beforehand.

[22:05] <masak> sorear: in general though, I can make it.

[22:05] <sorear> You're not the only cpan6er...

[22:05] <masak> I'm not really sure what can be decided at these meetings, but I'm eager to contribute just to see what'll happen.

[22:06] <masak> sorear: don't lose hope! there'll be more weeks.

[22:06] <tadzik> masak: you mean something similar to ufo handling compiling order?

[22:06] <masak> tadzik: the compiling order in ufo is strictly intra-project.

[22:06] <sorear> masak: the big idea is that Alias is supposed to show up

[22:07] <tadzik> masak: yeah, but I mean the 'looking inside' concept

[22:07] <masak> tadzik: here's what I mean by dependency. you download a project. it has a file called deps.proto. in it, the projects that need be installed for the project you downloaded to build properly are listed.

[22:07] <tadzik> right

[22:08] <masak> tadzik: so, after you've fetched a project, you can know its dependency. that's on the API level.

[22:08] <masak> on the implementation level (poc, and later pls), there's the mechanism for reading deps.proto

[22:08] <masak> that's what I need to implement now :)

[22:08] <tadzik> oh, I see

[22:08] <masak> s/dependency/dependencies/

[22:08] <tadzik> you can steal it from neutro, it quite works there :)

[22:09] <masak> does neutro solve it differently from proto?

[22:09] <tadzik> http://github.com/tadzik/neutro/blob/master/neutro#L102

[22:09] <tadzik> I don't think so

[22:09] *** guidj0s joined
[22:09] <masak> I love that name, btw. :)

[22:09] <masak> and I'm slightly intrigued that proto keeps on not dying. :)

[22:10] <guidj0s> guys, I think i've asked this before, but how do i create subroutine references in perl6?

[22:10] <tadzik> Su-Shee figured out the name :)

[22:10] <tadzik> guidj0s: my $a = sub {}

[22:10] <guidj0s> tadzik: do they all have to be anonymous?

[22:10] <masak> rakudo: my $a = sub { say "OH HAI" }; $a()

[22:10] <p6eval> rakudo 3a339e: OUTPUT«OH HAI␤»

[22:10] <tadzik> guidj0s: I don't think so, but not sure

[22:10] <masak> guidj0s: no, you can do my $a = &foo, too

[22:11] <guidj0s> or is there something like my $subref = \subname();

[22:11] <guidj0s> oh

[22:11] <guidj0s> right

[22:11] <guidj0s> nice, thanks!

[22:11] <masak> no problemo.

[22:11] *** drake1 left
[22:11] <x3nU> submited new euler solution to perl6-examples but it's slow 

[22:12] <tadzik> it was initially named protominus :)

[22:12] <x3nU> i mean seriously slow

[22:12] <tadzik> In Rakudo you can _really_ see how important is optimizing the algorithm itself :)

[22:13] <masak> or the underlying substrate.

[22:13] *** mrsaturns left
[22:13] <x3nU> for example code for same problem that i found in the net written in vbscript executes in 8 seconds

[22:13] <x3nU> mine - few hours

[22:13] <x3nU> ;d

[22:13] <masak> x3nU: I often have similar results.

[22:13] *** spq1 left
[22:13] <masak> speed is an issue in Rakudo.

[22:13] <tylercurtis> tadzik: ooc, what are Mushrooms?

[22:14] <szbalint> something you eat with Pasta.

[22:14] * tylercurtis has a bit of a Mushroom-like attitude for some values of Pasta.

[22:14] <tadzik> tylercurtis: oh well, I promised myself not to explain, but this is Perl6, one big family ;) It's Python, sadly

[22:15] <tylercurtis> Although that's more just that I personally can't stand cooking with some pastas.

[22:15] * tadzik is sad how no one noticed the Parrot joke

[22:15] <patrickas> tadziki felt it was a bit cruel :-O

[22:16] *** guidj0s left
[22:16] <tadzik> patrickas: what exactly?

[22:16] <tadzik> cooking a Parrot?

[22:16] <patrickas> for some reason I kept imagining the a poor parrot being cooked alive!

[22:17] <patrickas> somethigin must be wrong with ME! :-)

[22:18] <tadzik> well, the parrot guys seem to... Smoke Parrots!

[22:18] <tadzik> that's... unusual

[22:18] <Getty> parrot - he doesnt die on smoke test ;)

[22:18] <tadzik> :D

[22:19] <Getty> why i must think of the crazy dude from police academy now, that dude who was sitting longer in the chemical warfare test and said "got some more of this stuff? its awesome!"

[22:19] <patrickas> he pins for the fjords :-)

[22:19] *** dju left
[22:20] <masak> mst thinks that Pascal's Triangle makes Perl 6 a research project: http://twitter.com/shadowcat_mst/status/22112066276

[22:21] <patrickas> masak: we were discussing this a bit earlier

[22:21] <sorear> masak: I think that's mstspeak for "innovative"

[22:21] <masak> maybe.

[22:21] * masak keeps on backlogging

[22:22] *** am0c^ joined
[22:22] <szbalint> pretty much, sorear. DBIx::Class was a "research project"

[22:22] <patrickas> I suppose there is no reason why it can't be both...

[22:23] <patrickas> Besides if the series op and meta ops are too researchy for one's taste ... one can always do without

[22:23] <sorear> and then there's the Haskell slogan - "Avoid success at all costs"

[22:26] *** pyrimidine left
[22:26] <masak> it's a strange thing to pick on. Rosettacode asked how to solve that problem, and Perl 6 happened to solve it nicely. would Perl 6 have been less of a 'research project' if it were also good for production things?

[22:27] *** mberends joined
[22:28] <tadzik> I think the people might be like “well, interesting, but who would use it?”

[22:29] <patrickas> "who would use the series op ?"

[22:30] <tadzik> don't ask me

[22:31] <masak> the series op is sometimes a nice shorthand for a loop or recursion.

[22:31] <masak> as with everything else, there are pros and cons.

[22:31] <patrickas> I must have mis spoke

[22:31] *** bjarneh left
[22:32] *** sftp left
[22:32] <patrickas> To me the question is almost obvious

[22:32] <masak> patrickas: ah, but that might be because you're a researcher :)

[22:33] <patrickas> Am I ?

[22:33] *** Trashlord joined
[22:33] <patrickas> I don't know .. mabye

[22:33] <Juerd> masak: Obviously, outputting the pascal "triangle" as a serialised array of arrays is what makes it look like a research thing

[22:34] <Juerd> masak: It needs a production grade real-world interface... i.e. fancy output :P

[22:34] <masak> Juerd: huh. I thought mst was reacting against the example, or the code.

[22:34] <Juerd> I have no idea :)

[22:35] * Juerd isn't being serious at all

[22:35] * masak suspected that :)

[22:35] <patrickas> I suppose 140 chars arent enough for everything :-)

[22:35] <masak> well, mst has been known to say 'research language' about Perl 6 before.

[22:35] *** barika left
[22:35] *** dju joined
[22:36] <patrickas> Well there is some truth to that ... In the sense that it is much easier for perl6 to explore new grounds

[22:36] <szbalint> does "make" for rakudo support -j8 or something like that? I'm currently compiling it on a 8 core box + HT.

[22:36] <patrickas> but that does not prevent it or lessen its production value

[22:37] <masak> patrickas: indeed.

[22:37] <mberends> moritz_: in your Pascal post, was gaol a freudian typo?

[22:37] <masak> mberends: go directly to gaol, do not collect whatever dollars. :)

[22:38] <mberends> :)

[22:38] <sorear> szbalint: yes, but the largest single step will only run on one core, so it won't help *much*

[22:39] <szbalint> I see. :) It didn't take long anyway. I think I'll install every new rakudo release on the $job dev servers from now on.

[22:40] <masak> also, this: http://twitter.com/pedromelo/status/22110965152 -- has been retweeted twice so far with "+1" in both RTs.

[22:41] <masak> apparently, this is something that people feel strongly about.

[22:42] <szbalint> The example is scary because it looks like golf, while it isn't really. People are just unfamiliar with the constructs.

[22:42] <masak> personally, as a working hypothesis, I think people had a brain parser syntax error, looked at the code with fresh eyes, and thought "wtf?"

[22:42] *** dju left
[22:42] * sorear laughs at the ... yada comment

[22:42] *** barika joined
[22:43] <sorear> (Perl 5 stole ... yada yada from 6)

[22:44] <masak> sorear: it's quite funny.

[22:44] <masak> sorear: it also shows that people in general don't consider operators and terms to be different.

[22:46] *** dju joined
[22:47] *** flatwhatson left
[22:47] <dalek> niecza: 2667d2b | sorear++ | src/Niecza/Actions.pm:

[22:47] <dalek> niecza: Fix '\W' failing

[22:47] <dalek> niecza: review: http://github.com/sorear/niecza/commit/2667d2bd1df9b68f70089e90020ae92cea27f15e

[22:47] <dalek> niecza: 6cc2651 | sorear++ | / (7 files):

[22:47] <dalek> niecza: Implement character classes

[22:47] <dalek> niecza: review: http://github.com/sorear/niecza/commit/6cc26515a34088f499c3cbbdcb293b49ff50a202

[22:48] <sorear> perl 1 had / as both division and regex starter

[22:49] <masak> Perl 1 had regexes?

[22:49] <sorear> yes

[22:50] *** _macdaddy joined
[22:50] *** bjarneh joined
[22:51] <masak> hm, ISTR hearing at YAPC::EU that there was something fundamentally Perlish that Perl 1 didn't have. thought that was regexes. maybe I recall it wrong, though.

[22:51] <patrickas> those 37 characters contain 4 new concepts that one needs to grasp before understanding it: pointy blocks / meta ops / series op / whatever, no wonder it is hard to digest :-)

[22:52] <tadzik> it's funny to see how a reddit post is first 100% liked with 7 upvotes, and then becomes 0% liked :)

[22:53] * revdiablo is always amused by perl 5 folks criticizing perl 6 for hairy syntax. Pot, kettle, etc.

[22:54] <masak> it's not so much hairy syntax as syntax that takes some time getting used to.

[22:54] <patrickas> I don't think it's hairy syntax per se, it's just "things I am not familiar with"

[22:54] <revdiablo> It's pretty hairy. =)

[22:54] <revdiablo> That's not meant as a criticism

[22:56] <masak> I tend to find Perl 6's syntax quite clean and readable. but I'm aware that I might not think so if I saw it for the first time.

[22:56] <masak> if that's your definition of "hairy", then we are in agreement. :)

[22:57] * patrickas is open to the possibility that maybe all the people who think dense syntax and many operators are bad or will hurt perl are right...

[22:57] <patrickas> I suppose we'll find out in a few years / decades ... and maybe build perl7 accordingly :-)

[22:58] *** dju_ joined
[22:58] <szbalint> For years you could write C in Perl. Now you can write Haskell too :)

[22:58] * szbalint ducks

[22:58] <szbalint> But you don't have to.

[22:58] <patrickas> but I want tooooo :-)

[22:58] *** dju left
[22:58] *** guidj0s joined
[22:58] <masak> Perl 6 has sweet spots that differ from the sweet spots of Perl 5. it's all about what things to make easy. having written Perl 6 code actively for two years now, I can say I really, really like the sweet spots provided by Perl 6.

[22:59] <masak> they might not be apparent at first, but they're there, and they're good.

[23:00] *** flatwhatson joined
[23:00] <masak> they're not exemplified well by TimToady++'s code for Pascal's triangle. they're exemplified well by the programmer facing such a problem, thinking it through, writing out the solution and OH WOW IT WORKS WOW YES THIS ROCKS

[23:00] <revdiablo> masak: I really like perl 6 too, but just like perl 5, it's very punctuation oriented. I think that turns a lot of people off. But I also think perl 5 people should be accustomed to a punctuation oriented language

[23:01] <masak> all in a fairly small amount of natural language primitives.

[23:01] <masak> revdiablo: Perl 5 people are accustomed to Perl 5. that tends to put them off too Perl6-y stuff, sometimes.

[23:02] <masak> maybe if they had a series operator, and pointy blocks, and lazy lists, they wouldn't think much of the Pascal example. then it'd be "yeah, so what? we have that too" :)

[23:03] <masak> now it's "my golly, that's abstraction-laden. research project! this is what I hope Perl 6 *won't* become. why did you optimize for Pascal's triangle?"

[23:04] <revdiablo> Sure, that's my thought as well. They're reacting to something because of a lack of familiarity. But I thought perl people would be more willing to accept such things

[23:04] <revdiablo> I mean, perl 5 still surprises me on a regular basis. It has been for 10 years. I'm used to being surprised now. Perl 6 just feels like a continuation of that =)

[23:06] * tylercurtis would link Paul Graham if his relevant essays were less condescending-sounding.

[23:06] <dalek> 6model: e0399b0 | ++ | java/runtime/ (6 files):

[23:06] <dalek> 6model: [java/runtime] begin resolving circular dependencies from RakudoObject to SharedTable

[23:06] <dalek> 6model: review: http://github.com/jnthn/6model/commit/e0399b08c031d7ce8830d9dd48c6dccb3585e80d

[23:07] <sorear> masak: back in the good old days, there was quite a bit of hating on C because of unreadable punctuation constructs like { }, ;, and &&

[23:08] <masak> sorear: good thing there were digraphs that you could use instead. <snicker />

[23:08] <sorear> no, digraphs are C++

[23:08] *** lestrrat is now known as lest_away

[23:08] <sorear> C used trigraphs, which were even uglier

[23:09] <masak> oh wow.

[23:09] <sorear> < - [: or ??[

[23:11] *** guidj0s left
[23:11] <masak> that's... the most desperate syntax I've seen in quite a while.

[23:12] <dalek> niecza: 6c3c243 | sorear++ | / (2 files):

[23:12] <dalek> niecza: Implement /a || b/

[23:12] <dalek> niecza: review: http://github.com/sorear/niecza/commit/6c3c243f8ab95c9a5ce53bbf928594dad7ebd3d4

[23:13] *** sekimura_ joined
[23:15] *** sekimura left
[23:22] *** aesop is now known as jacob_applebaum

[23:25] *** am0c^ left
[23:27] <masak> tadzik++ # http://ttjjss.wordpress.com/2010/08/25/on-the-language-wars/

[23:28] <tadzik> I'm glad you like it

[23:31] <masak> I like allegories. yours was a good read.

[23:32] *** patrickas left
[23:32] <au|irc> tadzik++ # that blogpost can use an illustration like http://www.realsimple.com/food-recipes/browse-all-recipes/pasta-tomato-mushroom-sauce-10000001107116/index.html :)

[23:35] <osfameron> masak: O HAI.  We're still missing a talk auth from you I think?  (You sent for Prince of Parsea, but not for Perl6 appetizers)

[23:36] <tadzik> au|irc: I'd stick some Parrot together :P

[23:37] <au|irc> :)

[23:38] <masak> tadzik: ooh, slight grammar-o at the end "are always bad" should be "is always bad", because the copula refers to the action of shoving, not to the throats.

[23:38] <masak> osfameron: oh! thought the latter wasn't filmed.

[23:38] <masak> osfameron: tell me what to do, and I'll do it.

[23:39] <osfameron> masak: that was in the auditorium?  I think peppe is in process of transferring those (but you're on the list he gave me to chase, so I *hope* it comes across OK ;-)

[23:39] <masak> if auth here is enough, you have it. if auth by email is enough, I'll send one.

[23:40] <osfameron> masak: another email to [email@hidden.address] would be brilliant!

[23:40] * masak makes it so

[23:40] <osfameron> masak++ # thanks

[23:40] <tadzik> masak++ # fixed-faxe

[23:40] <tadzik> d

[23:42] *** masak left
[23:43] *** sftp joined
[23:43] *** masak joined
[23:44] <lue> hello o/

[23:44] <tadzik> hello and bye :)

[23:45] *** tadzik left
[23:47] *** sftp left
[23:48] *** sftp joined
[23:49] <masak> lue: you know what would be cool? writing a game such as http://svn.pugscode.org/pugs/examples/games/wizard.pl but with monsters' abilities and such being added using role mixins.

[23:49] <masak> lue: $monster does FireBreathing;

[23:50] <lue> $titularwizard does Everything;

[23:51] <masak> $exit does MoveUnpredictably; # :)

[23:54] <masak> and now, slightly more predictably, masak doth sleep.

[23:54] <masak> 'night, butterflies.

[23:55] *** masak left
