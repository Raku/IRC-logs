[00:04] *** justatheory left
[00:19] *** eternaleye joined
[00:24] *** Schwern joined
[00:52] *** Eevee joined
[00:52] *** QinGW joined
[00:57] *** silug left
[00:59] *** QinGW left
[01:02] *** QinGW joined
[01:05] *** skids joined
[01:11] *** Schwern left
[01:18] *** Entonian left
[01:33] *** eternaleye left
[01:33] *** eternaleye joined
[01:36] *** meteorjay joined
[01:48] *** ruoso left
[01:51] *** Schwern joined
[01:59] *** justatheory joined
[02:02] *** ruoso joined
[02:04] *** Schwern left
[02:09] *** Italian_Plumber left
[02:19] *** sftp left
[02:23] *** Mirell left
[02:27] *** orafu left
[02:27] *** cdarroch left
[02:36] *** ruoso left
[02:42] *** am0c^ joined
[03:04] *** silug joined
[03:14] <dalek> sprixel: cb3f96a | diakopter++ | sprixel/lib/PublicDomain. (3 files):

[03:14] <dalek> sprixel: add snapshot of PublicDomain.dll from codeplex (outercurve?)

[03:14] <dalek> sprixel: review: http://github.com/diakopter/sprixel/commit/cb3f96ae211b97a85939a82e642abb5e0e935371

[03:14] <dalek> sprixel: bdccb38 | diakopter++ | / (24 files):

[03:14] <dalek> sprixel: POC of some integration wireup with perl.exe running viv's STD.

[03:14] <dalek> sprixel: Added some public domain code.  May keep some of it.

[03:14] <dalek> sprixel: review: http://github.com/diakopter/sprixel/commit/bdccb38372ad685221864eb1ec523470ff28c859

[03:19] *** Schwern joined
[03:26] *** orafu joined
[03:28] *** meppl joined
[03:28] *** Schwern left
[03:33] *** mfollett joined
[03:34] *** meppl left
[03:35] <diakopter> .u TEARDROP

[03:35] <phenny> U+273B TEARDROP-SPOKED ASTERISK (✻)

[03:37] <diakopter> .u SPOKED

[03:37] <phenny> U+2733 EIGHT SPOKED ASTERISK (✳)

[03:38] <diakopter> .u CLUB-SPOKED

[03:38] <phenny> U+2725 FOUR CLUB-SPOKED ASTERISK (✥)

[03:53] *** satyavvd joined
[04:08] *** nymacro joined
[04:20] *** skids left
[04:24] *** meppl joined
[04:31] *** nymacro left
[04:32] *** bluescreen left
[04:45] *** jaldhar left
[04:58] <mfollett> What's the Perl 6 equivalent of /[^a]at/, e.g. 'bat' ~~ /[^a]at/ would match

[04:58] *** jaldhar joined
[04:59] <mfollett> rakudo: say 'bat' ~~ /[^a]at/

[04:59] <p6eval> rakudo 5d23e3: OUTPUT«␤»

[05:03] *** Schwern joined
[05:04] <diakopter> std: say 'bat' ~~ /[^a]at/

[05:04] <p6eval> std 263c207: OUTPUT«Potential difficulties:␤  [^a] appears to be an old-school character class; please use <-[a]> if you mean a character class at /tmp/787MVCwzBG line 1:␤------> [32msay 'bat' ~~ /[^a][33m⏏[31mat/[0m␤ok 00:01 118m␤»

[05:05] <diakopter> :)

[05:12] <mfollett> diakopter: thanks!

[05:17] <sorear> good * #perl6

[05:22] <mberends> commute &

[05:24] *** [Sec] left
[05:29] *** [Sec] joined
[05:29] *** Italian_Plumber joined
[05:36] *** _kaare joined
[05:36] *** dju joined
[05:40] *** dju left
[05:40] *** dju joined
[05:43] *** Italian_Plumber left
[05:44] *** atomicstack joined
[05:53] *** mberends left
[06:06] *** envi joined
[06:06] *** pythonian4000 is now known as pythonian4000afk

[06:13] *** tinhead joined
[06:45] *** justatheory left
[06:46] *** mfollett left
[06:58] *** justatheory joined
[07:04] *** justatheory left
[07:07] *** Mowah joined
[07:18] *** baux joined
[07:20] *** synth left
[07:22] *** am0c^ left
[07:27] *** am0c^ joined
[07:32] *** QinGW left
[07:36] *** QinGW joined
[07:39] *** zby_home_ joined
[07:51] *** PZt left
[07:59] *** PZt joined
[08:00] *** araujo joined
[08:00] *** araujo left
[08:00] *** araujo joined
[08:36] *** tinhead left
[08:37] *** am0c^ left
[08:38] *** pythonian4000afk is now known as pythonian4000

[08:38] *** pythonian4000 is now known as pythonian4000afk

[08:41] *** mavrc joined
[08:55] *** masak joined
[08:55] <masak> good late morning, #perl6

[08:55] *** edon joined
[08:55] <moritz_> oh hi masak

[08:56] <sorear> hello masak and moritz

[08:56] <masak> hi moritz_ and sorear 

[08:56] *** xsloader joined
[09:06] *** x19290 joined
[09:09] *** x19290 left
[09:10] *** x19290 joined
[09:11] *** x19290 left
[09:13] *** icwiener joined
[09:19] *** x19290 joined
[09:20] *** x19290 left
[09:26] *** nymacro joined
[09:27] *** am0c^ joined
[09:34] *** x19290 joined
[09:34] *** x19290 left
[09:35] *** wamba joined
[09:39] *** daxim joined
[09:39] *** envi left
[09:42] *** envi joined
[09:42] *** [particle] left
[09:46] *** araujo left
[09:47] *** araujo joined
[09:51] *** mavrc left
[09:53] *** araujo left
[09:54] *** araujo joined
[10:00] *** araujo left
[10:01] *** mavrc joined
[10:07] *** x19290 joined
[10:07] *** QinGW left
[10:08] *** m_ joined
[10:08] *** x19290 left
[10:10] <m_> hell oo

[10:11] <moritz_> hell is object oriented? :-)

[10:12] <masak> that's a bit harsh :)

[10:12] <masak> but yes, that sounds likely.

[10:12] <Juerd> Would it have roles?

[10:13] <Juerd> Inheritance seems somewhat unlikely

[10:14] <moritz_> I've once read something, I think it was on perlmonks, "the real world is not object oriented"

[10:14] <moritz_> it talked about gradual changes

[10:14] <moritz_> is dusk an object?

[10:15] *** [particle] joined
[10:20] *** m__ joined
[10:21] <m__> hell oo

[10:21] *** m_ left
[10:21] <masak> the real world isn't object-oriented. people's models of it often are.

[10:21] <masak> but even the models break down at some point.

[10:22] <m__> why oo?

[10:22] <m__> suck paradigm

[10:22] <masak> the challenge is to make the OO design out of models that break down far enough from the "interesting" parts of the application.

[10:23] <masak> m__: I understand from your locutions that you don't like OO. that's fine. there are other ways to program.

[10:23] <m__> interesting parts?

[10:24] <m__> i dont like oo but need to use oo for some

[10:24] <masak> yes, the parts that the user finds useful in the application.

[10:25] <masak> m__: you're in good company. ALexander Stepanov doesn't like OO either: https://secure.wikimedia.org/wikipedia/en/wiki/Alexander_Stepanov

[10:25] <masak> er, non-"secure" URL: http://en.wikipedia.org/wiki/Alexander_Stepanov

[10:26] <masak> dunno why ddg has started giving me the https ones.

[10:28] *** m__ left
[10:29] *** m_ joined
[10:30] <m_> perl6 feature

[10:34] *** [particle] left
[10:34] *** [particle]1 joined
[10:35] <m_> perl6 covers oo paradigm?

[10:35] *** uniejo joined
[10:41] <m_> anybody here?

[10:42] *** m_ left
[10:44] *** lgerl joined
[10:44] *** xsloader left
[10:46] *** timbunce joined
[10:48] *** m_ joined
[10:50] <m_> hell o

[10:51] <m_> somebody can answer my questions

[10:52] <m_> can't u?

[10:53] <daxim> yes, you can program OO in perl6, if you want to

[10:54] <daxim> like its predecessor, it's multi-paradigm

[10:54] <m_> howto quite hard?

[10:54] <daxim> sorry, I cannot parse that

[10:55] <m_> not hard?

[10:55] <daxim> not hard if you already know the fundamentals of programming

[10:56] <m_> how good for perl6?

[10:57] <daxim> I can't say for certain, why don't you read some documentation and see how far it takes you?

[10:57] <daxim> you can always ask for help on specific topics

[10:58] <daxim> http://perl6.org/documentation/

[10:59] *** am0c^ left
[11:00] <m_> can u tell the difference between perl5 and perl6

[11:01] *** pythonian4000afk is now known as pythonian4000

[11:02] <frettled> m_: Try reading this article: http://en.wikipedia.org/wiki/Perl_6

[11:02] <frettled> (and maybe someone here will update it if it's wrong in some respects)

[11:04] *** araujo joined
[11:07] *** lgerl left
[11:08] *** mavrc left
[11:08] <m_> what you want perl6 goes

[11:09] *** araujo left
[11:09] *** zby_home___ joined
[11:09] *** araujo joined
[11:10] *** zby_home_ left
[11:10] *** mavrc joined
[11:12] *** [particle]1 left
[11:15] *** araujo left
[11:15] <m_> less modules on perl6 

[11:15] *** Quadrescence joined
[11:18] <m_> how perl6 goes in the future? 

[11:19] *** m_ left
[11:20] <frettled> That grasshopper was not very patient.

[11:23] *** Maddingue left
[11:23] *** xsloader joined
[11:24] *** [particle] joined
[11:35] <masak> language barrier was high, too.

[11:36] *** sftp joined
[11:44] *** pythonian4000 is now known as pythonian4000afk

[11:46] *** lgerl joined
[11:52] <takadonet> morning all

[11:52] <masak> takadonet: \o

[11:53] *** [particle] left
[12:06] *** satyavvd left
[12:12] *** uniejo left
[12:16] *** araujo joined
[12:16] *** araujo left
[12:16] *** araujo joined
[12:17] *** Maddingue joined
[12:19] *** dakkar joined
[12:20] *** [particle] joined
[12:23] *** mfollett joined
[12:26] *** bluescreen joined
[12:36] *** mfollett left
[12:37] <masak> colomon++ # blogging about http://challenge.greplin.com/ solved in Perl 6

[12:38] <colomon> I still haven't gotten around to putting up the 2nd challenge, which is a shame, because the code is pretty.  :)

[12:39] <moritz_> my code is ugly, short and works :-)

[12:40] <moritz_> oh, martian fluxx :-)

[12:40] <takadonet> working code > fast code > pretty code 

[12:40] * moritz_ bought that too, and also python fluxx

[12:40] <colomon> I may exaggerate the prettiness of my code, I haven't looked at it since I wrote it at 3am.  ;)

[12:41] <colomon> I just remember looking at the comments (on hacker news) of the python guys who were so pleased with themselves for having some quick matrix solution to Fibonacci numbers and thinking how much lovelier the p6 sequence was...

[12:42] <takadonet> colomon: url?

[12:42] *** _kaare left
[12:42] <colomon> takadonet: errr... hard drive of my big linux box?  ;)

[12:43] <colomon> http://gist.github.com/623953

[12:43] <colomon> not as pretty as I thought in the cold light of day.

[12:43] <colomon> but I think it will clean up nicely.

[12:44] <moritz_> have you tried the dynamic programming approach that a commenter left on your blog?

[12:45] <colomon> moritz_: nope, but I'm excited about it.

[12:45] *** Schwern left
[12:45] <colomon> I think my spare time has been too occupied trying to build a colony ship in Lacuna Expanse

[12:46] <moritz_> :-)

[12:46] <moritz_> http://nopaste.snit.ch/24373 that's my solution

[12:47] <colomon> what challenge two really made me want to do is a prime number module for p6.

[12:47] * moritz_ too

[12:47] <moritz_> I was close to writing one, actually :-)

[12:47] <colomon> something that reasonably efficiently generates the list of them.

[12:47] <colomon> me too.

[12:48] <moritz_> :-)

[12:48] <colomon> my best schemes seemed to involve an infinite sequence whose generator looked at the already generated elements.

[12:49] <colomon> Math::Prime, do you reckon?

[12:49] <moritz_> .oO( write a fast-ish C function, use it via NativeCall.pm)

[12:51] <colomon> we should do it both ways.  :)

[12:52] <moritz_> and with rabin-miller statistical tests for big numbers

[12:52] <moritz_> erm, forgot that we don't have big ints yet :-)

[12:57] <masak> what would it take for Rakudo to have big ints?

[13:00] *** xsloader left
[13:01] <moritz_> that's a good question

[13:01] <moritz_> in first approximation, a bigint type, and mapping integer overflows to that type

[13:02] <moritz_> but I fear that in the end that's not practical - rakudo goes through get_integer vtables, and those require us to return native ints

[13:02] <moritz_> which are non-big

[13:02] <masak> a bigint type could be written today.

[13:02] <masak> but yes, the other problems sound non-trivial. :/

[13:03] <moritz_> maybe I should write a mail to parrot-dev

[13:03] <frettled> \o/

[13:04] <frettled> _someone_ doing IPv6 stuff might be happy

[13:04] <frettled> (128-bit yummies)

[13:05] <moritz_> frettled: there's a patch for both parrot adn rakudo ipv6 support in trac/rt

[13:05] <masak> we already have 128 bit native ints in the spec, IIRC.

[13:05] <moritz_> frettled: it just needs test

[13:05] <frettled> moritz_: aha!

[13:06] <frettled> masak: yep, IIRC, there's int32, int64 and int128, or somesuch

[13:06] <masak> yep.

[13:07] *** wamba left
[13:08] *** wamba joined
[13:10] <colomon> we talked about bigints at YAPC::NA, seems Parrot already has (had?) some sort of support for it.

[13:11] <moritz_> yes; I think there' a bigint pmc if you have libgmp available, or so

[13:12] <moritz_> but I don't see how that's usable as "the" Int type for a HLL

[13:12] *** wamba left
[13:14] *** wamba joined
[13:15] *** slavik joined
[13:16] <moritz_> btw I've been wishing for an 'identity' function or method a few times

[13:17] *** Italian_Plumber joined
[13:17] <moritz_> probably all the use cases were rather bad, but I had surprisingly many of them during the last few weeks

[13:17] <moritz_> somthing like:

[13:17] <masak> rakudo: my &id = method { self }; say 42.&id()

[13:17] <p6eval> rakudo 5d23e3: OUTPUT«42␤»

[13:18] <masak> voilà.

[13:18] <moritz_> rakudo: my @f = -> $x { $x }, *+2, * * 2; for @f -> &f { .say for map &f, 1..5 }

[13:18] <p6eval> rakudo 5d23e3: OUTPUT«1␤2␤3␤4␤5␤3␤4␤5␤6␤7␤2␤4␤6␤8␤10␤»

[13:19] *** Patterner left
[13:19] <masak> maybe term:<*> could be used for that...

[13:20] <moritz_> on one hand, I like the idea; otoh I'm not sure it's good to overload * even more

[13:21] <masak> same here.

[13:21] <masak> just throwing it out because it seems an "obvious" solution.

[13:22] <moritz_> another would be  augment class Mu { method id() is export { self } }

[13:23] <moritz_> rakudo: my $f = method a() { self }; say $f(42)

[13:23] <p6eval> rakudo 5d23e3: OUTPUT«Useless declaration of has-scoped Method in a module; add our or my to install it in the lexpad or namespace␤Suba (subid "72_1286974775.88871") has no $!llsig and no $!lazysig␤  in main program body at line 7257:CORE.setting␤»

[13:23] <moritz_> should that work? :-)

[13:24] <moritz_> rakudo: my $f = my method a() { self }; say $f(42)

[13:24] <p6eval> rakudo 5d23e3: OUTPUT«42␤»

[13:24] <moritz_> o/

[13:25] <masak> moritz_: if you name a method outside of a class, you must use 'my' or 'our', IIUC.

[13:25] <masak> moritz_: because the default is 'has', and it doesn't apply outside of a class/role body.

[13:25] <moritz_> rakudo: my $f = method () { self }; say $f(42)

[13:25] <p6eval> rakudo 5d23e3: OUTPUT«42␤»

[13:31] *** Psyche^ joined
[13:31] *** Psyche^ is now known as Patterner

[13:34] <masak> the threads p6l email thread looks like something that partially intersects jnthn++'s work with 6model.

[13:36] <takadonet> everything intersects jnthn work

[13:36] <masak> well, yes and no.

[13:37] <masak> he's working on the carpet that's to be put in place when the current carpet gets pulled out from under us.

[13:38] <PerlJam> But I want tile!

[13:38] <PerlJam> and maybe a throw rug.

[13:39] *** araujo left
[13:40] *** Schwern joined
[13:41] *** Gothmog_ left
[13:42] *** justatheory joined
[13:43] *** timbunce_ joined
[13:44] <PerlJam> timbunce_: I was just reading your posts to p6l and about to generally timbunce++ you for it.

[13:45] *** timbunce left
[13:45] *** timbunce_ is now known as timbunce

[13:46] *** rindolf joined
[13:49] <colomon> rakudo: my @fib := (1, 1, *+* ... *); say (@fib ... { $^a > 227000 && $a %% 2 })[*-1]

[13:49] <p6eval> rakudo 5d23e3: OUTPUT«832040␤»

[13:50] <colomon> rakudo: my @fib := (1, 1, *+* ... *); say (@fib ... { $^a > 227000 && !($a %% 2) })[*-1]

[13:50] <p6eval> rakudo 5d23e3: OUTPUT«317811␤»

[13:50] <colomon> woah, can rewrite the challenge two script with about 1/3rd the lines.

[13:50] *** rindolf left
[13:51] *** rindolf joined
[13:54] <masak> rakudo: sub evapo($b, @coeffs) { [+] (1, $b * * ... *)[^@coeffs] >>*<< @coeffs }; say evapo(10, [1, 4, 6, 7]) # inspired by http://www.schnada.de/hylin/tao.html

[13:55] <p6eval> rakudo 5d23e3: OUTPUT«7641␤»

[13:55] <masak> can anyone think of a slightly nicer way to write that?

[13:55] <masak> preferably without the slicing of the infinite sequence.

[13:57] <colomon> what's wrong with the slicing? it seems very tidy

[13:57] <masak> sure, but I had hoped there would be some hyperop that would do it implicitly for me.

[13:58] <colomon> oh, I was reading it wrongly.

[13:58] <colomon> rakudo: sub evapo($b, @coeffs) { [+] (1, $b * * ... *) Z* @coeffs }; say evapo(10, [1, 4, 6, 7])

[13:58] <p6eval> rakudo 5d23e3: OUTPUT«7641␤»

[13:58] *** am0c^ joined
[13:59] <colomon> how's that?

[13:59] <masak> colomon++

[13:59] <masak> clearly, I need to get into the Z mindset more.

[14:00] <colomon> http://gist.github.com/624075 is my shorter (but still not really pretty) version of prime challenge

[14:00] <colomon> Zop is very cool, but them I'm biased.  :-)

[14:00] <colomon> *then

[14:00] <moritz_> rakudo: sub evapo($b, @coeffs) { [+] @coeffs.kv.map: { .key * $b * .value } }; evapo(10, [1, 4, 6, 7])

[14:00] <p6eval> rakudo 5d23e3: OUTPUT«Method 'key' not found for invocant of class 'Int'␤  in <anon> at line 22:/tmp/dNeVPUMiH2␤  in 'List::Bool' at line 1␤  in 'prefix:<!>' at line 434:CORE.setting␤  in 'reducewith' at line 317:CORE.setting␤  in 'evapo' at line 1␤  in main program body at line

[14:00] <p6eval> ..22:/tmp/dNeVPUMiH2␤»

[14:01] <moritz_> rakudo: sub evapo($b, @coeffs) { [+] @coeffs.pairs.map: { .key * $b * .value } }; evapo(10, [1, 4, 6, 7])

[14:01] <masak> "Be clear about the difference between your role as a programmer and as a tester. The tester in you must be suspicious, uncompromising, hostile, and compulsively obsessed with destroying, utterly destroying, the programmer's software." # also http://www.schnada.de/hylin/tao.html

[14:01] <masak> thought it was just me :)

[14:01] <p6eval> rakudo 5d23e3:  ( no output )

[14:01] <moritz_> rakudo: sub evapo($b, @coeffs) { [+] @coeffs.pairs.map: { .key * $b * .value } }; say evapo(10, [1, 4, 6, 7])

[14:01] <p6eval> rakudo 5d23e3: OUTPUT«370␤»

[14:01] <masak> moritz_: need to multiply one more $b each time around.

[14:01] <colomon> isn't it $b ** .key    ?

[14:02] <moritz_> right

[14:02] <masak> but that's slower.

[14:02] <moritz_> rakudo: sub evapo($b, @coeffs) { [+] @coeffs.pairs.map: { .b ** .key *  .value } }; say evapo(10, [1, 4, 6, 7])

[14:02] <p6eval> rakudo 5d23e3: OUTPUT«Method 'b' not found for invocant of class 'Pair'␤  in <anon> at line 22:/tmp/tPPf3Nq4_W␤  in 'List::Bool' at line 1␤  in 'prefix:<!>' at line 434:CORE.setting␤  in 'reducewith' at line 317:CORE.setting␤  in 'evapo' at line 1␤  in main program body at line 22:/tmp/tPPf3Nq4_W␤»

[14:02] <moritz_> rakudo: sub evapo($b, @coeffs) { [+] @coeffs.pairs.map: { $b ** .key *  .value } }; say evapo(10, [1, 4, 6, 7])

[14:02] *** araujo joined
[14:02] <p6eval> rakudo 5d23e3: OUTPUT«7641␤»

[14:02] <moritz_> masak: I believe it when I see benchmarks :-)

[14:03] * masak doesn't need benchmarks, he has O() theory :)

[14:03] <moritz_> rakudo: sub evapo($b, @coeffs) { [+] @coeffs.kv.map: { $b ** $^k * $^v } }; say evapo(10, [1, 4, 6, 7])

[14:03] <p6eval> rakudo 5d23e3: OUTPUT«7641␤»

[14:04] <moritz_> masak: O() theory requires you to identify the cost of primitives first. Have fun doing that for p6 :-)

[14:04] <masak> true, true.

[14:04] <masak> anyway, it's not really the Horner scheme anymore if you do the exponentiation.

[14:04] * moritz_ likes the .kv version

[14:04] <moritz_> true, true

[14:04] <masak> the whole point of it is to do the multiplication cumulatively.

[14:05] <moritz_> then Z* is exceedingly elegant

[14:06] *** atomicstack left
[14:11] <timbunce> PerlJam: thanks!

[14:12] *** atomicstack joined
[14:13] <masak> Rosetta Code already has one: http://rosettacode.org/wiki/Horner's_rule_for_polynomial_evaluation#Perl_6

[14:14] <masak> I think I like that version better, although I miss the sequence operator :)

[14:16] <masak> is the semicolon really needed in http://rosettacode.org/wiki/Empty_program#Perl_6 ?

[14:16] <masak> seems if one strives to write the shortest valid program one ought to avoid it...

[14:16] *** ruoso joined
[14:16] <moritz_> well, the empty string is still a valid perl 6 program

[14:16] *** rgrau_ joined
[14:17] <moritz_> if executed with a 'perl6' executable

[14:17] <masak> you sure the empty string isn't a valid Perl 5 program in that case?

[14:17] <masak> (see clarification in that article)

[14:17] *** MayDaniel joined
[14:17] <moritz_> yes; the defaulting to p5 only applies in some cases...

[14:17] <moritz_> let me re-check S01

[14:18] <moritz_> "Also, a file with a .p6 extension may be taken as indicative, as may any other extension containing the digit 6, such as p6l or p6m or pl6 or pm6"

[14:19] <moritz_> so, an empty .p6 file is taken as Perl 6 code.

[14:19] <masak> very well.

[14:20] <moritz_> std: v6;

[14:20] <p6eval> std 263c207: OUTPUT«ok 00:01 114m␤»

[14:20] <moritz_> std: v6; $x = 1

[14:20] <p6eval> std 263c207: OUTPUT«[31m===[0mSORRY![31m===[0m␤Variable $x is not predeclared at /tmp/ivC0IJ1opK line 1:␤------> [32mv6; $x[33m⏏[31m = 1[0m␤Check failed␤FAILED 00:01 117m␤»

[14:20] <moritz_> S01 lists that as valid *shudder*

[14:20] <masak> it's just a sinked literal.

[14:21] *** Lorn left
[14:21] <moritz_> S01 on strictness: ". But it should be easy to relax with -e or a bare version number"

[14:21] * moritz_ thinks the bare version number is a bad idea for relaxing

[14:21] *** am0c^ left
[14:23] *** Lorn joined
[14:24] <ruoso> haha... Unicode 6.0 now includes all playing cards

[14:24] *** _kaare joined
[14:25] * moritz_ sees new possibilities for golfing the poker-with-meta-operators thing :-)

[14:25] <ruoso> 1F0A1..1F0DF

[14:26] <masak> maybe someone needs to tell them that they can stop adding symbols now.

[14:26] *** mfollett joined
[14:26] * moritz_ finds it funny

[14:28] <ruoso> nothingmuch will like 1F450 OPEN HANDS SIGN

[14:28] <ruoso> haehaehae

[14:28] <colomon> masak: (finally catching up) I think the sequence operator version may be more clear to people who are not reduce-lovers.  but the reduce version is very, very elegant, for sure.

[14:28] <ruoso> 1F4A9 PILE OF POO

[14:29] <Juerd> ruoso: Do they have traffic signs yet?

[14:29] <ruoso> hmm... I'm going through the changes, haven't seen them as new

[14:30] <Juerd> Okay

[14:30] <Juerd> Too bad. Those would actually be useful for me

[14:30] <ruoso> \o_ and \o/ got encoded

[14:30] <Juerd> lol

[14:30] <ruoso> 1F64B and 1F64C

[14:30] <ruoso> HAPPY PERSON RAISING ONE HAND

[14:31] <ruoso> PERSON RAISING BOTH HANDS IN CELEBRATION

[14:31] <ruoso> the latter has "banzai" as a comment

[14:32] <ruoso> 1F6A6 🚦 VERTICAL TRAFFIC LIGHT

[14:32] <ruoso> Juerd, ^

[14:33] <Juerd> lol

[14:33] <Juerd> Monochrome traffic lights are probably the least useful kind

[14:33] <ruoso> I think they meant it as for the traffic sign that tells you there's a traffic light ahead of you

[14:35] *** justatheory left
[14:37] *** lgerl left
[14:40] <Juerd> ruoso: In .nl, that's just a triangle sign with three circles in it :)

[14:40] <Juerd> Three dots

[14:40] <ruoso> oh... interesting

[14:41] <Juerd> http://nl.wikipedia.org/wiki/Bestand:Nederlands_verkeersbord_J32.svg

[14:41] <Juerd> That's the new one

[14:41] <Juerd> The old one didn't have the black background shield behind the coloured dots

[14:42] <Juerd> Oh, someone here tells me I'm wrong, and I was

[14:42] <Juerd> But apparently the black paint wasn't any good and faded away on many signs.

[14:42] <ruoso> that reminds me a funny video about the design of the stop sign

[14:42] <ruoso> and how the customer blows it up

[14:43] <Juerd> heh

[14:43] <Juerd> I've seen that one

[14:46] *** eternaleye left
[14:49] *** Italian_Plumber left
[15:02] *** Italian_Plumber joined
[15:02] *** satyavvd joined
[15:03] *** Italian_Plumber left
[15:07] *** alester joined
[15:12] *** plainhao joined
[15:13] *** ruoso left
[15:14] *** justatheory joined
[15:17] *** tadzik joined
[15:17] <tadzik> o/

[15:17] <masak> tadzik! \o/

[15:20] <tadzik> http://www.reddit.com/r/programming/comments/dqnbd/how_to_debug_a_perl_6_grammar/ -- hmm, is it official and not complete, or neither official nor complete?

[15:21] <moritz_> it is an official release, in the sense that we officially say it's a rakudo release

[15:22] <moritz_> but it's not a perl 6.0.0 complete, official release in the sense that it passes the whole test suite, and TimToady++ put his 'official' seal on it

[15:25] *** estrabd_amf is now known as estrabd

[15:27] * masak weighed in

[15:30] <frettled> masak: how much? :)

[15:30] * PerlJam still boggles at what magic people ascribe to "1.0"

[15:30] <frettled> Magic 1.0.

[15:30] *** nymacro left
[15:30] <masak> PerlJam: me too. I'm not sure what they conceive is at the end of that rainbow.

[15:31] <masak> frettled: about 47%, as it were.

[15:31] <frettled> hee-hee

[15:32] <frettled> Someone with a Reddit account should respond to mcspiff and note that you hope he never had to use software depending on OpenSSL before June 1st this year.

[15:32] * moritz_ does

[15:36] *** skids joined
[15:40] <frettled> Hah, another response from him which is off the mark.

[15:40] <frettled> OpenSSL is _not_ feature complete.  :)

[15:40] <masak> frettled: do you have any source to back this up?

[15:41] <masak> if you do, I can reply to him.

[15:41] <frettled> For FIPS: http://www.openssl.org/docs/fips/fipsnotes.html

[15:42] <masak> I don't understand what that page is saying :/

[15:42] *** bluescreen left
[15:42] <masak> I'll let someone who does reply.

[15:42] <takadonet> thanks for the defence guys!

[15:44] <frettled> masak: I'm also looking to see what there is.  I know that 0.9.7 wasn't feature complete in terms of some certificates, and ISTR that there are still some issues with strong crypto

[15:45] *** synth joined
[15:48] <frettled> Hmm, it appears that the caveats are gone from the OpenSSL site.  I really should check in more often than every few years.

[15:51] <frettled> Anyway, the question to him was more on the general note that from his point of view, OpenSSL was not production ready until this year, yet he probably had been using it (more or less wittingly) for many years before that.

[15:51] <frettled> …and OpenSSL is hardly the only such software — software with versions below 1.0.0 — in regular use.

[15:54] <takadonet> Perl5 Moose is a very good example

[15:56] *** risou joined
[15:57] *** bluescreen joined
[15:59] <masak> we are technically right... but there's a point at which our arguments to prove our point start to sound like elaborate excuses for Perl 6 not being 1.0 yet. :/

[16:00] <frettled> yup

[16:00] *** Schwern left
[16:04] *** sjn left
[16:04] *** jaldhar left
[16:05] *** satyavvd left
[16:07] *** baux left
[16:10] *** tinhead joined
[16:10] *** toebu joined
[16:13] *** tinhead left
[16:14] *** tinhead joined
[16:28] *** masak left
[16:30] *** zostay joined
[16:30] *** Axius joined
[16:33] *** mberends joined
[16:36] *** tadzik left
[16:43] <moritz_> .u diameter

[16:43] *** rindolf left
[16:43] <phenny> U+2300 DIAMETER SIGN (⌀)

[16:43] *** molaf joined
[16:44] *** rindolf joined
[16:44] <daxim> ⌀⃠ VERBOTEN

[16:47] *** Gothmog_ joined
[16:48] *** molaf left
[16:53] *** cdarroch joined
[16:53] *** cdarroch left
[16:53] *** cdarroch joined
[16:55] *** mavrc left
[17:02] *** mavrc joined
[17:17] *** Trashlord left
[17:20] *** timbunce left
[17:25] *** edon left
[17:25] *** dakkar left
[17:26] *** timbunce joined
[17:32] *** Axius left
[17:33] *** envi left
[17:34] *** Entonian joined
[17:35] *** Schwern joined
[17:38] *** x3nU joined
[17:41] *** spooneybarger joined
[17:41] <sorear> good * #perl6

[17:46] <takadonet> sorear: yo

[17:48] <sorear> takadonet: Moose actually hit 1.00 recently

[17:48] <sorear> it was the 100th release, and a nice celebration :)

[17:49] <sorear> timbunce++ # Sensible handling of the threads discussion

[17:51] *** risou left
[17:56] *** pyrimidine joined
[18:00] *** spooneybarger left
[18:06] *** araujo left
[18:06] *** mavrc left
[18:08] *** mavrc joined
[18:09] * skids waits for alester's perbuzz post to comment on threads.

[18:13] *** leprevost joined
[18:14] *** timbunce left
[18:15] *** araujo joined
[18:21] *** timbunce joined
[18:22] *** icwiener_ joined
[18:22] *** daxim left
[18:22] *** icwiener left
[18:23] *** ruoso joined
[18:27] *** justatheory left
[18:29] *** Steppenwolf joined
[18:31] *** Steppenwolf left
[18:36] <takadonet> sorear: backlogging. Ya they did but people were heavily using it before 1.00

[18:36] *** leprevost left
[18:37] *** timbunce left
[18:55] *** orafu left
[18:56] <alester> skids: I need someone to be point of contact

[18:56] <alester> and no one has stepped forward.

[18:58] *** icwiener_ left
[18:58] *** icwiener_ joined
[18:59] <sorear> alester: do you think I should plug Niecza's low level OS thread binding as a point to build off of?

[18:59] <alester> I don't know what any of what you just said refers to.

[18:59] <alester> but that's OK

[18:59] <alester> All I need is someone in Perl 6 world to be a point of contact to collect whatever people want to say about Perl 6 threads.

[19:00] <sorear> My implementation of Perl 6 has OS thread support (only)

[19:00] <sorear> Thread.new({ ... }); my $m = Monitor.new; $m.lock; $m.unlock;

[19:00] <alester> sorear: Stop

[19:00] <sorear> actually it's a wrapper around .NET threads

[19:00] <alester> I don't care about threads.

[19:00] <alester> I am just trying to get people with ideas together with the people designing.

[19:01] *** sjn joined
[19:02] *** zby_home joined
[19:03] *** zby_home___ left
[19:08] <dalek> niecza/master: edd85a2 | sorear++ | v6/STD.pm6:

[19:08] <dalek> niecza/master: Work around lack of m// and s///

[19:08] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/edd85a213deba70594af802b09600110b0f4d615

[19:08] <dalek> niecza/master: 12c3adc | sorear++ | / (8 files):

[19:08] <dalek> niecza/master: Assorted aggregate type improvements

[19:08] <dalek> niecza/master: 

[19:08] <dalek> niecza/master: This patch adds &unshift, &keys, &values, Hash iteration,

[19:08] <dalek> niecza/master: Hash.LISTSTORE, Hash.kv, :exists, :delete, and &invert.

[19:08] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/12c3adc7391b9edb0e1d433398db4dd2416a8a5f

[19:13] *** M_o_C joined
[19:15] *** fridim joined
[19:17] *** timbunce joined
[19:23] *** rindolf left
[19:31] *** zby_home___ joined
[19:31] *** zby_home left
[19:31] *** atomicstack left
[19:34] *** Italian_Plumber joined
[19:34] *** plainhao left
[19:44] *** krakan left
[19:46] <sorear> timbunce: do you think I should plug Niecza's low level OS thread binding as a point to build off of?

[19:48] *** zby_home___ left
[19:49] *** araujo left
[19:50] <timbunce> sorear: no idea, sorry. I'm fairly clueless on the current state of things (eg I've no idea what "Niecza's low level OS thread binding" is). I just have opinions on where I'd like it to end up :)

[19:51] <sorear> timbunce: I've got a very thin layer over .NET threads, mostly for bragging rights (MY IMPL HAS THREADS!)

[19:52] *** uniejo joined
[19:53] *** araujo joined
[19:56] *** Italian_Plumber left
[20:09] *** timbunce left
[20:10] <skids> alester: if it's only for a week or so to read irc backlogs and post them on the PerlBuzz comments I could do that.  Can't promise to be especially prompt about it, but I can try for once a day.

[20:10] <alester> I want an email address that people can send to.

[20:10] <alester> I think if it requires logging in and making a comment on Perlbu, people won't do it.

[20:11] <skids> Ah, my email's a bit dicey.  I'm not on p6l either.  (I meant, I could read backlogs here and post a summary to the perlbuzz comments.)

[20:12] <alester> Here's what I need. "Perl 6 people are asking about threads stuff.  We are looking for information about blah blah.  If you have input, please email [email@hidden.address]  

[20:12] <alester> Who is the [email@hidden.address]
[20:13] <shortcircuit> alester: It's completely not written (and not even started), but there was a concept spec I wrote for cross-channel monitoring you might abuse for the purpose. http://mmol-6453.livejournal.com/213900.html

[20:14] <shortcircuit> No good at summarization, I'm afraid, but it might be useful for keyword triggering for shorter relavent logs.

[20:14] <skids> Yeah, I greylist, so it doesn't play nice with some people's systems.  Usually not a problem but with a bunch of new people mailing I wouldn't want to be bouncing hard-written comments.  Sorry.

[20:15] * shortcircuit doesn't think he'll ever have time to get around to writing nexusbot, though.

[20:15] <alester> Here's what I think we actually need for this to be useful: "I'd love to get that input.  Have them send comments to me!"  When that person steps forward, we can run with it.

[20:16] * skids will certainly send input to said person, though :-)

[20:24] *** uniejo left
[20:26] *** orafu joined
[20:26] *** mfollett left
[20:31] *** Entonian left
[20:37] *** araujo left
[20:38] *** araujo joined
[20:41] *** M_o_C left
[20:42] *** pothos_ joined
[20:43] *** pothos_ left
[20:43] *** pothos_ joined
[20:44] *** pothos_ left
[20:45] *** pothos_ joined
[20:45] *** pothos_ left
[20:46] *** pothos_ joined
[20:46] *** pothos left
[20:46] *** pothos_ left
[20:46] *** pothos joined
[20:47] *** pmurias joined
[20:47] *** timbunce joined
[20:47] *** rgrau_ left
[20:47] *** pothos left
[20:47] *** pothos joined
[20:48] *** pothos left
[20:48] *** pothos joined
[20:49] *** pothos left
[20:49] *** pothos joined
[20:50] *** pothos left
[20:50] *** krakan joined
[20:50] *** pothos joined
[20:51] *** pothos left
[20:51] *** pothos joined
[20:51] *** timbunce left
[20:51] *** pothos left
[20:52] *** pothos joined
[20:52] *** pythonian4000afk is now known as pythonian4000

[20:52] *** pothos left
[20:53] *** _kaare left
[20:53] *** pothos joined
[20:53] *** pothos left
[20:54] *** pothos joined
[20:54] *** pothos left
[20:54] *** pothos joined
[20:55] *** pothos left
[20:55] *** pothos joined
[20:56] *** pothos left
[20:56] *** pothos joined
[20:57] *** pothos left
[20:57] *** pothos joined
[20:58] *** pothos left
[20:58] *** pothos joined
[20:58] *** pothos left
[20:59] *** pothos joined
[20:59] *** pothos left
[21:00] *** pothos joined
[21:05] *** ChanServ sets mode: +o sorear

[21:05] *** sorear sets mode: +b pothos!*@*

[21:06] *** sorear sets mode: -o sorear

[21:14] *** skids left
[21:15] *** Schwern left
[21:15] *** spq1 left
[21:16] <sorear> #p5p is talking about stealing CATCH.  hmm.

[21:22] <diakopter> alester: I suspect sorear wasn't intending to address your call for help when mentioning niecza

[21:22] *** MayDaniel left
[21:23] *** Entonian joined
[21:24] *** zostay left
[21:24] *** zostay joined
[21:26] *** Schwern joined
[21:26] *** lamstyle left
[21:28] *** krakan left
[21:30] *** PhatEddy joined
[21:31] *** lamstyle joined
[21:31] *** mavrc left
[21:34] <PhatEddy> When make spectest_smolder runs t/harness the Makefile ignores the return code from t/harness. 

[21:34] <PhatEddy> I think this is a mistake because t/harness doesn't build the archive until it's done and returns 0 even if tests fail.  Any thoughts on fixing that?

[21:35] *** rgrau_ joined
[21:35] *** krakan joined
[21:40] *** ruoso left
[21:41] *** Schwern left
[21:42] *** timbunce joined
[21:56] *** Italian_Plumber joined
[21:58] *** x0De joined
[22:05] *** pmurias left
[22:06] *** trek1s joined
[22:07] *** x0De left
[22:14] *** trek1s left
[22:15] *** alester left
[22:15] *** Trashlord joined
[22:22] *** Mowah left
[22:30] <dalek> niecza/master: ea8058e | sorear++ | / (4 files):

[22:30] <dalek> niecza/master: Add leg et al, &grep, &map, infix:<x>

[22:30] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/ea8058ef0aa7f06e65e5358aeaab155edaf8f997

[22:30] <dalek> niecza/master: 9f1bf0e | sorear++ | / (5 files):

[22:30] <dalek> niecza/master: Implement &sort

[22:30] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/9f1bf0e2a9b0704112497f70af92c77a1a137e94

[22:33] *** zostay left
[22:34] *** wamba left
[22:34] *** zostay joined
[22:36] *** GreenAsJade joined
[22:40] *** Chillance joined
[22:41] *** icwiener_ left
[22:43] *** GreenAsJade left
[22:53] *** Italian_Plumber left
[22:53] *** Trashlord left
[22:53] *** timbunce left
[23:06] *** Italian_Plumber joined
[23:10] *** am0c^ joined
[23:16] *** meppl left
[23:22] *** bbkr left
[23:22] *** bbkr joined
[23:29] *** ruoso joined
[23:35] *** araujo left
[23:43] *** cdarroch left
[23:45] *** bluescreen left
[23:47] *** am0c^ left
