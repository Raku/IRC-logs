[00:02] <masak> post is now live: http://perl6advent.wordpress.com/2010/12/07/day-7-lexical-variables/

[00:09] *** shi left
[00:13] *** risou_ joined
[00:13] <masak> each time I see shi's quit message, it makes me think about DAGs.

[00:13] <masak> computer science has corrupted me. :)

[00:14] <TimToady> didn't anyone tell you that you are actually just an xkcd comic?

[00:14] <masak> I knew it!

[00:16] *** risou left
[00:20] <lichtkind> can it be that rakudo is weak on quoting adverbs?

[00:20] <masak> yes.

[00:21] * Alias__ releases P5 List::MoreUtils 0.28

[00:21] *** thundergnat joined
[00:21] <Alias__> The any/all/none functions now behave identically to the P6 junctions in null list cases

[00:21] <masak> Alias__++

[00:22] <Alias__> Is there a 4th junction?

[00:22] <jnthn> one

[00:22] <Alias__> For the complete set, List::MoreUtils has notall

[00:22] <jnthn> (exlusive-or-ish)

[00:22] <Alias__> I'm not sure why, personally

[00:22] <masak> `notall` and `one` sound like they're just one well-placed negation apart.

[00:23] <Alias__> I think L:MU has a history of adding more and more functions for no good reason

[00:23] <masak> no, wait.

[00:23] <masak> `one` means "exactly one".

[00:23] <Alias__> right

[00:23] <TimToady> someone please add the missing list functions to S32-setting-library/Containers.pod, except for the ones we don't want :)

[00:23] <Alias__> notall is to all as none is to any

[00:23] <masak> whoa :)

[00:23] <masak> ...yes. :)

[00:24] <Alias__> Personally, I didn't think we needed it

[00:24] <Alias__> But I only wrote the original blog post that inspired L:MU, I didn't actually write it or maintain it until this week

[00:24] <TimToady> how is that different from not all()

[00:24] <masak> not at all :P

[00:24] <Alias__> Why have none instead of not any() ?

[00:24] <Alias__> Symmetric case

[00:25] <masak> 'none' looks much nicer than 'notall'.

[00:25] <Alias__> The visual ugliness of notall is acknowledged, but an orthogonal issue :)

[00:25] <TimToady> :)

[00:25] <masak> not in #perl6 :)

[00:26] * Alias__ files a community bug report

[00:26] <masak> heh :)

[00:26] <thundergnat> Ok, then the code I wrote earlier to implement [^^] ( RT# 65164 )at https://gist.github.com/730480 has been built and tested under linux and windows.  There's a diff at https://gist.github.com/731232 . Anyone with a commit bit like to review and/or commit?

[00:26] <masak> wait, which community? :)

[00:26] <masak> I just assumed it was against the Perl 5 community...

[00:26] * Alias__ moves onto core'ifying YAML::Tiny

[00:29] <TimToady> std: my @a; [^^]@a

[00:29] <p6eval> std a194beb: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Two terms in a row at /tmp/CWlsQbYiqh line 1:‚ê§------> [32mmy @a; [^^][33m‚èè[31m@a[0m‚ê§    expecting any of:‚ê§       POST‚ê§   bracketed infix‚ê§        infix or meta-infix‚ê§    postfix‚ê§        postfix_prefix_meta_operator‚ê§  

[00:29] <p6eval> ..prefix_circumfix_meta_operator‚ê§ prefix_postfix_meta_opera‚Ä¶

[00:29] <TimToady> std: my @a; [^^] @a

[00:30] <p6eval> std a194beb: OUTPUT¬´ok 00:01 120m‚ê§¬ª

[00:30] <TimToady> thundergnat: ^^

[00:30] <TimToady> or should I say [^^]?

[00:31] *** donaldh left
[00:33] <jnthn> rakudo: my @a; [+]@a

[00:33] <p6eval> rakudo :  ( no output )

[00:33] <jnthn> rakudo: my @a; [+] @a

[00:33] <p6eval> rakudo :  ( no output )

[00:33] <jnthn> std: my @a; [+]@a

[00:33] <p6eval> std a194beb: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Two terms in a row at /tmp/X3s2UwqFte line 1:‚ê§------> [32mmy @a; [+][33m‚èè[31m@a[0m‚ê§    expecting any of:‚ê§        POST‚ê§   bracketed infix‚ê§        infix or meta-infix‚ê§    postfix‚ê§        postfix_prefix_meta_operator‚ê§  

[00:33] <p6eval> ..prefix_circumfix_meta_operator‚ê§ prefix_postfix_meta_operat‚Ä¶

[00:34] <jnthn> ETOOLIBERAL

[00:34] <jnthn> oh masak... :)

[00:34] <TimToady> rakudo: say (1 ^^ 0 ^^ 2 ^^ 0 ^^ 3).perl

[00:34] <p6eval> rakudo : OUTPUT¬´Method 'perl' not found for invocant of class 'Undef'‚ê§  in main program body at line 22:/tmp/XsINn7q324‚ê§¬ª

[00:34] * masak submits rakudobug

[00:34] <TimToady> Undef?!?

[00:34] <jnthn> wtf...Undef?

[00:34] <masak> Parrot leakage.

[00:34] <jnthn> I want a Parrot without Undef... :|

[00:35] <TimToady> rakudo: say True if 1 ^^ 2 ^^ 3

[00:35] <p6eval> rakudo :  ( no output )

[00:35] <TimToady> rakudo: say True if 1 ^^ 0 ^^ 0

[00:35] <p6eval> rakudo : OUTPUT¬´Bool::True‚ê§¬ª

[00:35] <TimToady> it's hard to understand the [^^] logic, which seems a bit contorted for "exactly one of these is true"

[00:37] <masak> it's weirder than that. it's "give me the one true element in this list... unless there are more of them, in which case I want Bool::False" o.O

[00:37] <thundergnat> Well, It's if exactly one of these is true, return that value, otherwise return Bool::False

[00:38] <thundergnat> err, what masak said

[00:38] <TimToady> okay, if it does that, fine; was too lazy to figger it out :)

[00:39] <masak> yes, and that's the semantics of infix:<xor> as well.

[00:39] <TimToady> btw, for shouldn't need ()

[00:40] <thundergnat> Sorry, habit.

[00:40] <masak> TimToady: by the way, why *does* C<[+]@a> constitute a TTIAR?

[00:40] <TimToady> consistency with other listops

[00:41] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_lookup_tablet

[00:41] <masak> TimToady: oh; I thought it was because most other listops were words, like 'say'.

[00:42] <masak> std: [+]

[00:42] <p6eval> std a194beb: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Prefix requires an argument at /tmp/2R_iev_A3G line 1 (EOF):‚ê§------> [32m[+][33m‚èè[31m<EOL>[0m‚ê§Parse failed‚ê§FAILED 00:01 118m‚ê§¬ª

[00:42] <masak> TimToady: also, if C<[+]> is a listop, why is C<[+]> not a valid program, but needs to be C<[+] ()>?

[00:42] <TimToady> that's a known bug, but only happens at the end of the buffer

[00:42] <masak> std: [+]; say "OH HAI"

[00:42] <TimToady> iirc

[00:42] <p6eval> std a194beb: OUTPUT¬´ok 00:01 120m‚ê§¬ª

[00:42] <masak> oh, ok.

[00:42] <masak> I feel better now.

[00:42] <masak> thought it was a feature.

[00:43] <jnthn> rakudo: [+]

[00:43] <p6eval> rakudo : OUTPUT¬´===SORRY!===‚ê§Confused at line 22, near "[+]"‚ê§¬ª

[00:43] <jnthn> rakudo: [+];

[00:43] <p6eval> rakudo : OUTPUT¬´===SORRY!===‚ê§Confused at line 22, near "[+];"‚ê§¬ª

[00:43] <jnthn> aww.

[00:43] <jnthn> rakudo: [+]; say "I am ok!"

[00:43] <p6eval> rakudo : OUTPUT¬´===SORRY!===‚ê§Confused at line 22, near "[+]; say \""‚ê§¬ª

[00:43] * masak submits rakudobug

[00:43] <TimToady> part of the reason for requiring the space on listops is to distinguish foo() from foo (), and this applies to [+] too

[00:43] * jnthn wonders if that and the other parsing bug are related.

[00:43] <masak> TimToady: that's a good reason. thanks.

[00:44] <TimToady> the error message could perhaps be a bit better though

[00:44] <TimToady> not my highest priority at the moment, alas

[00:45] <masak> *nod*

[00:47] <TimToady> it just seems like it'd be clearer for [^^] to just count true values, and return false on the 2nd true

[00:48] <jnthn> sleep &

[00:48] *** cdarroch left
[00:49] <thundergnat> It still has to save the value of the first true value somewhere so it can check the rest of the list to make sure it was the ONLY true value.

[00:50] <thundergnat> It returns the value that evaluates to true, not just true

[00:50] <TimToady> right, I keep forgetting that :)

[00:50] <TimToady> premature senility, I don't doubt

[00:50] <thundergnat> join the crowd

[00:51] *** phio joined
[00:52] <diakopter> speaking of clearer error messages, may I suggest considering one for /(?:x)/

[00:53] <TimToady> std: /(?:x)/

[00:53] <p6eval> std a194beb: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Quantifier quantifies nothing at /tmp/VZtH9ulToV line 1:‚ê§------> [32m/(?:[33m‚èè[31mx)/[0m‚ê§Check failed‚ê§FAILED 00:01 119m‚ê§¬ª

[00:53] <TimToady> looks like a good message to me :P

[00:53] <TimToady> or are you thinking of something more along the lines of "This is Perl 6, duh!"

[00:54] <diakopter> I guess I was thinking of p5

[00:54] <TimToady> what would be bad is if we made (?:x) actually mean something in P6 :)

[00:57] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[01:02] *** QinGW joined
[01:04] * masak sleeps

[01:04] *** masak left
[01:06] *** stkowski left
[01:07] *** Trashlord left
[01:13] *** phio left
[01:24] *** silug joined
[01:26] <lichtkind> masak: o/

[01:26] <lichtkind> karma: Herbert Breunung

[01:26] <lichtkind> karma Herbert Breunung

[01:26] <aloha> Herbert Breunung has karma of 193.

[01:26] *** risou_ left
[01:26] <lichtkind> :( i thought i lost my karma

[01:43] *** ggoebel joined
[01:48] *** ggoebel left
[01:49] *** masonkramer left
[01:51] <lichtkind> parrot: my $a = q////;

[01:52] <lichtkind> rakudo: my $a = q////;

[01:52] <p6eval> rakudo : OUTPUT¬´===SORRY!===‚ê§Confused at line 22, near "my $a = q/"‚ê§¬ª

[01:52] <lichtkind> std: my $a = q////;

[01:52] <p6eval> std a194beb: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Bogus term at /tmp/wHVKWIY72s line 1:‚ê§------> [32mmy $a = q////[33m‚èè[31m;[0m‚ê§Parse failed‚ê§FAILED 00:01 121m‚ê§¬ª

[01:52] *** LaVolta joined
[01:52] <lichtkind> std: my $a = q/\//;

[01:52] <p6eval> std a194beb: OUTPUT¬´ok 00:01 121m‚ê§¬ª

[01:52] <lichtkind> std: my $a = q|\||;

[01:52] <p6eval> std a194beb: OUTPUT¬´ok 00:01 121m‚ê§¬ª

[01:53] <lichtkind> rakudo: my $a = q|\||;

[01:53] <p6eval> rakudo :  ( no output )

[01:53] <lichtkind> rakudo: my $a = q|\||; $a

[01:53] <p6eval> rakudo :  ( no output )

[01:53] <lichtkind> std: my $a = q|\||; say $a

[01:53] <p6eval> std a194beb: OUTPUT¬´ok 00:01 121m‚ê§¬ª

[01:53] <LaVolta> morning #perl6

[01:53] <lichtkind> moin

[01:53] *** ggoebel joined
[02:07] *** LaVolta left
[02:09] *** thundergnat left
[02:10] *** LaVolta joined
[02:16] *** sidke left
[02:16] *** florz left
[02:16] *** shiduke joined
[02:21] *** alc left
[02:22] *** florz joined
[02:22] *** orphu joined
[02:32] *** orphu left
[02:40] *** kanishka joined
[02:51] *** masonkramer joined
[02:59] *** molaf left
[03:07] *** whiteknight left
[03:13] *** molaf joined
[03:16] *** jferrero left
[03:19] *** Guest32433 left
[03:20] *** kanishka left
[03:47] *** lichtkind left
[03:51] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_basics_tablet

[03:58] *** satyavvd joined
[03:59] <rjbs> moritz_: p6 advent day 3: s/sp,e/some/

[04:26] <sorear> good * #perl6

[04:31] <diakopter> hi

[04:32] *** ch3ck3r left
[04:33] *** satyavvd left
[05:00] *** shiduke is now known as sidek

[05:08] *** orafu left
[05:08] *** orafu joined
[05:13] *** envi joined
[05:18] *** araujo left
[05:28] *** jaldhar left
[05:29] *** _jaldhar joined
[05:29] *** Alias__ left
[05:52] *** orafu left
[05:52] *** orafu joined
[05:54] *** sftp joined
[05:58] *** orafu left
[05:58] *** orafu joined
[06:21] *** sftp left
[06:36] <sorear> How should CLS Events be exposed to Perl 6?

[06:38] *** kaare joined
[06:39] *** kaare is now known as Guest32421

[06:43] *** kanishka joined
[06:48] *** xinming_ left
[07:00] *** xinming joined
[07:04] *** kanishka left
[07:09] <moritz_> good morning

[07:11] <moritz_> rjbs: updated, thanks. I don't know which cat walked on my keyboard, because I don't have one :-)

[07:12] <sorear> hello moritz_ 

[07:13] *** hcchien joined
[07:14] <moritz_> oh hai sorear 

[07:19] *** kanishka joined
[07:20] * moritz_ -> commute

[07:27] *** kjeldahl joined
[07:28] *** wtw joined
[07:39] *** wtw left
[07:49] *** wtw joined
[08:01] *** dual left
[08:02] <moritz_> wow, that was exhausting

[08:02] <moritz_> biking through the snow sludge

[08:05] *** REPLeffect left
[08:05] *** REPLeffect joined
[08:13] *** finanalyst joined
[08:14] <finanalyst> jnthn: ping

[08:15] *** fhelmberger joined
[08:23] *** nymacro joined
[08:36] *** soroush left
[08:37] *** kensanata joined
[08:39] *** soroush joined
[08:48] *** alc joined
[09:19] * sorear out

[09:25] *** jhuni left
[09:45] *** hdanak joined
[09:55] *** dakkar joined
[10:00] *** [Coke] left
[10:06] *** [Coke] joined
[10:16] *** masak joined
[10:16] <masak> oh hai, #perl6

[10:17] <jnthn> o/

[10:18] *** QinGW left
[10:26] <masak> three days to Big Announcement.

[10:28] <finanalyst> good localtime to you. What Big Announcement?

[10:28] <masak> finanalyst: the one I'll announce in three days...

[10:29] <masak> it's something Perl 6-related.

[10:30] <finanalyst> masak: that is sneaky and highly commercial to do linked advertising

[10:30] <finanalyst> makes everyone want to know what it is without knowing what it is 

[10:30] <masak> finanalyst: be glad you caught on now, and not a month ago, when I started teasing :P

[10:31] <finanalyst> masak: I have not been trolling this forum for several months due to $problems_at_work

[10:32] <masak> sorry to hear that.

[10:33] *** LaVolta left
[10:47] <hdanak> masak: is this announcement rakudo related?

[10:47] <masak> hdanak: I'm not authorized to say.

[10:48] <masak> hdanak: if you want clues, there are a few strewn out in the backlog.

[10:48] <oha> masak: it remember me a game... "is it an animal?" ... "does have 4 legs?"

[10:48] <masak> hdanak: on 2010-11-10, 2010-11-20, and 2010-11-30.

[10:48] <masak> oha: "20 questions"?

[10:48] <oha> but you must reply only with Bool::True or Bool::False

[10:48] <hdanak> masak: meh, i can wait 3 days :)

[10:49] <masak> I'm happy I've reached at least two people with the news today :)

[10:49] <masak> just remember: you'll like it, so you might as well be excited now. :)

[10:49] <hdanak> btw, i was wondering what the rationale is behind changing the ternary operator in perl6 to ?? !! ?

[10:50] <masak> hdanak: many things.

[10:51] <masak> hdanak: it started out with the assumption the ? and : were too important as single-char operators to be claimed by this relatively unusual construct.

[10:51] <masak> (more unusual than, say, && or ++)

[10:52] <masak> hdanak: then it was ?? :: for a while, so just a doubling of the characters.

[10:52] <masak> but the :: caused problems with package-related things, so ideas were thrown around and we landed on ?? !!.

[10:52] <hdanak> i see

[10:52] <hdanak> kinda makes sense, i guess i can live with that

[10:53] <masak> it has a nice "strange concistency" about it, I think.

[10:53] <masak> '!' usually means "not" -- here it kinda means "else".

[10:53] <hdanak> especially since !! is kinda like an "error" case

[10:53] <masak> yes.

[10:53] <hdanak> i'm just waiting for rakudo to be fast enough to use perl6 instead of perl5

[10:54] <masak> also, ?? !! is related to boolean things, and many other such operators have double characters" || && // ^^

[10:54] <hdanak> however much I love perl5, some things (mostly fixed by perl6 grammars) feel like jury-rigging in perl5 even though it may be the preferred way to do it

[10:54] <masak> hdanak: well, "fast enough" depends on what one is doing. for some things it's already fast enough. for others, it's definitely not.

[10:55] <Juerd> masak: Did :: really cause problems with namespaces? I thought the switch to !! was purely because of the ?-! contrast that already existed in two other places.

[10:55] <masak> "jury-rigging". I like that description.

[10:55] <hdanak> well, the constant factor is too high... doing anything with >> 1000 elements

[10:55] <hdanak> especially the regexes

[10:55] <masak> Juerd: I'm not 100% sure, but I seem to remember that (collision with pachages) being the rationale.

[10:56] <Juerd> :: isn't really an operator, is it?

[10:56] <Juerd> Whitespace would be the disambiguator

[10:56] <masak> indeed.

[10:57] <masak> though this was many years ago, so it might have been before TTIAR was formalized.

[10:57] <masak> I dunno.

[10:57] <hdanak> i find the whole dot-notation ugly though...

[10:57] <masak> hdanak: huh. I don't.

[10:58] <hdanak> yeah, mostly because it's no longer concatenation 

[10:58] <masak> the ?? !! construct also went through a number of changes in precedence.

[10:58] <hdanak> by the way, is [+] folding operator rfold or lfold?

[10:59] <masak> hdanak: as far as I know, you're not supposed to have to care.

[10:59] <hdanak> hmm

[10:59] <hdanak> it could matter if your operator isn't commutative

[10:59] <hdanak> well, no

[10:59] <hdanak> it matters in haskell for infinite lists at least :)

[10:59] <masak> aye.

[11:00] <masak> I'm going to mumble "sane default" here and leave it at that. :)

[11:00] <masak> the spec doesn't say, as far as I know.

[11:00] <jnthn> It looks at the ops assoc trait, iirc.

[11:00] <masak> oh!

[11:00] <masak> of course!

[11:01] <jnthn> Netcraft^WActions.pm probably confirms it. :)

[11:01] <masak> :)

[11:04] <hdanak> the real question is... how will vim know how to highlight perl6 vs perl5?

[11:06] <flussence> same way it can figure out what dialect a .sh file is in...

[11:07] <flussence> put some more lines into the gigantic content-sniffing file

[11:08] <flussence> (which it already has in 7.3 btw)

[11:25] <tadzik> o/

[11:28] *** shiduke joined
[11:30] *** kanishka left
[11:32] *** sidek left
[11:41] *** tzhs joined
[11:45] *** dual joined
[11:54] *** masak left
[11:59] <hdanak> flussence: hey, do you know how I can change modes from the perl/vim interface (embedded perl interpreter in vim)?

[12:06] *** yahooooo joined
[12:19] *** yahooooo left
[12:26] *** masak joined
[12:29] <flussence> hdanak: never used it, sorry

[12:30] *** icwiener joined
[12:36] *** yahooooo joined
[12:39] *** daxim joined
[12:41] *** gimix joined
[12:42] *** REPLeffect left
[12:45] <finanalyst> perl6 reports that you can set --trace=s but what values of s are possible?

[12:46] <moritz_> small integers

[12:48] <finanalyst> different values of -t from 0 to 15 seem to have no effect

[12:49] <moritz_> then the option is broken

[12:49] <moritz_> instead you can try

[12:50] <moritz_> parrot --trace=1 perl6.pbc <scriptname>

[12:50] *** timbunce joined
[12:51] *** hdanak left
[12:54] *** REPLeffect joined
[12:58] *** shi joined
[13:01] <takadonet> morning all

[13:01] <moritz_> g'morning

[13:06] *** timbunce left
[13:11] *** bluescreen joined
[13:11] *** bluescreen is now known as Guest79076

[13:12] *** timbunce joined
[13:23] *** MayDaniel joined
[13:30] *** sftp joined
[13:31] *** masonkramer left
[13:35] *** MayDaniel left
[13:39] *** smash joined
[13:39] <smash> hello everyone

[13:39] <takadonet> smash: yo

[13:39] <smash> hey

[13:41] *** Patterner left
[13:43] *** Psyche^ joined
[13:43] *** Psyche^ is now known as Patterner

[13:43] <tadzik> hello

[13:47] <masak> the greetings-to-code ratio is too high today :P

[13:50] <tadzik> so, C++ anyone? :)

[13:50] * tadzik fighting with dynamic linking

[13:53] *** Axius joined
[13:54] *** tzhs left
[14:00] *** _twitch joined
[14:04] *** REPLeffect left
[14:04] <oha> masak: otoh, i feel that the thanks-to-code is too low in general. so ty :)

[14:05] *** Axius left
[14:05] * masak feels warm all over :)

[14:06] *** donri joined
[14:07] <donri> http://try.rakudo.org/  fails to evaluate any code

[14:09] <takadonet> donri: thanks for the heads up

[14:19] <colomon> tadzik: just working on my $work plans (mostly in C++) for the next year.

[14:24] *** Axius joined
[14:26] *** Axius left
[14:37] *** alc left
[14:39] *** alc joined
[14:41] *** jferrero joined
[14:42] *** Guest32421 left
[14:47] *** phio joined
[14:53] *** Trashlord joined
[15:00] *** explorer__ joined
[15:01] *** jferrero left
[15:05] *** Guest79076 left
[15:08] *** kanishka joined
[15:13] *** kanishka left
[15:15] *** Axius joined
[15:20] *** Guest79076 joined
[15:21] *** ch3ck joined
[15:22] *** MayDaniel joined
[15:24] *** Guest87704 joined
[15:26] *** plobsing left
[15:28] *** donri left
[15:29] *** kanishka joined
[15:31] *** Axius left
[15:35] *** colomon_ joined
[15:35] *** Patterner left
[15:35] *** colomon left
[15:35] *** colomon_ is now known as colomon

[15:37] *** finanalyst left
[15:47] <takadonet> http://www.reddit.com/r/programming/comments/ehmlw/perl_6_advent_calendar_day_7_lexical_variables/

[15:48] <masak> takadonet++

[15:48] <masak> I must admit to not understanding this view of programming: http://www.reddit.com/r/programming/comments/eh462/ada_surely_you_jest_mr_pythonman/c1832zl

[15:48] <masak> I hear the same about Haskell sometimes. "the only errors that got through were design or logic errors!"

[15:49] <moritz_> ... or endless recursion

[15:49] <masak> as if there is a big threatening heap of errors being avoided because the compiler is draconian.

[15:49] *** shi left
[15:50] <moritz_> well, there's some kind of oversight error that the compiler catches

[15:50] <masak> I'd say the risk of committing stupid logic or design errors is about as large with languages that are draconian on the type level.

[15:50] *** timbunce left
[15:50] *** risou joined
[15:50] <masak> but the user feels better, perhaps because he *likes* getting whipped.

[15:51] <colomon> I'm almost inclined to say the risk is worse, because of the danger of contorting your logic to make the type system happy.

[15:51] <flussence> false sense of security...

[15:51] <moritz_> masocism programming?

[15:51] <masak> there's a similar type of discipline that I *do* like: getting test failures. I value those much more than I value stupid type casting errors.

[15:52] <masak> also, I'm not dismissing type systems and strong typing (whatever that means) altogether. for example, I consider it good documentation.

[15:52] <flussence> when it's done right :)

[15:52] <masak> but yeah, "false sense of security" sums it up. typing is not a panacea.

[15:52] <masak> I believe moritz_++ wrote a blog post about that once.

[15:53] <moritz_> did I?

[15:53] *** shiduke is now known as sidek

[15:53] * moritz_ can't remember :-)

[15:53] <flussence> (I screw up simple things in postgres often...)

[15:53] <moritz_> speaking of blogs

[15:53] * moritz_ looks up who's next

[15:53] *** mtk joined
[15:53] <colomon> There is no panacea, period.

[15:53] <moritz_> tadzik++ is up for tomorrow's advent calendar

[15:53] *** puddingpimp joined
[15:54] <moritz_> no volunteer for Dec 9th so far

[15:54] <masak> moritz_: ah, I was thinking of this: http://perlgeek.de/blog-en/misc/dbc-vs-tests.html

[15:54] <moritz_> I've started on an article about the flip/reverse/invert distinction

[15:54] <masak> c'mon, people! volunteer for the Advent Calendar! it's fun!

[15:54] <moritz_> if nobody wants the day after tomorrow, I could chime in

[15:55] <moritz_> but I hope others do it, because I've already written 2 posts

[15:55] <masak> moritz_: oh, I'd better help you write that one, I already got some ideas what to write :)

[15:55] <moritz_> masak: that post was from a slightly different angle

[15:55] <masak> moritz_: yes, I see that now.

[15:56] <moritz_> masak: we can colaborate, and publish as masritz or mosak :-)

[15:56] <masak> ooh

[15:57] <masak> masitz

[15:57] <masak> or mohawk.

[15:57] <colomon> mohawk!

[15:58] *** mtk left
[15:58] <masak> I've long wanted to co-present with someone on a YAPC-like conf.

[15:58] <masak> would be great fun.

[15:58] <masak> even if it's just a lightning talk.

[15:58] <moritz_> indeed

[15:59] <[particle]> one mimes the sigils while the other reads the code?

[15:59] *** mtk joined
[16:00] <masak> [particle]: I don't know about you, but I tend not to read the code out loud during my presentations.

[16:00] <[particle]> heck, no.

[16:01] <[particle]> there must be an abbott and costello-like routine for perl6 waiting to happen.  i don't know what it is, though.

[16:01] <PerlJam> you could each simultaneously give the same lightning talk in different languages.

[16:01] *** finanalyst joined
[16:01] <moritz_> ... and the interference pattern results in a third language :-)

[16:02] <masak> moritz_: "While waiting for the Catalyst dependencies to install, I decided on a whim to try out Mojolicious, a new-ish web framework." -- is that unintentional or intentional biting criticism? :P

[16:02] <moritz_> masak: it's just facts

[16:02] <masak> moritz_: I laughed out loud reading it :)

[16:02] <moritz_> :-)

[16:03] <moritz_> I did type 'cpanm Catalyst', and after a few depencies I realizied it would take some time

[16:03] <PerlJam> moritz_: have you ever used Dist::Zilla?

[16:03] *** kanishka left
[16:03] <moritz_> and since I hang out in #perlde together with sri I did consider mojolicious

[16:03] <moritz_> PerlJam: yes, but not voluntarily

[16:04] <PerlJam> I was joking on #dzil about it having almost as many dependencies as Catalyst and rjbs pointed out that dzil actually has *more* dependencies than Catalyst.

[16:05] *** phio left
[16:05] <moritz_> I'm quite sure it does

[16:05] <moritz_> back then I didn't have a custom perl instllation

[16:05] <moritz_> but actually built debian packages out of all perl modules I wanted to install

[16:06] <moritz_> installing dzil was a pain, mildly put

[16:08] *** finanalyst left
[16:11] *** plobsing joined
[16:11] * tadzik hopes he'd be able to write the post before the midnight tomorrow

[16:13] <moritz_> tadzik: if it looks like you won't be able to, just tell us, somebody might be able to chime in

[16:13] <moritz_> (like me, perhaps)

[16:15] <masak> I'm ready to help, too.

[16:15] <tadzik> moritz_: I think I'm gonna make it

[16:15] <tadzik> even sooner, if someone could gimme a hand with C++ and dynamic linking :)

[16:15] <tadzik> (brb)

[16:16] <masak> heh. I searched the web for "inferior runloop", and came up with a lot of Parrot links. is this term specific to Parrot?

[16:16] <masak> rakudo: $a

[16:16] <p6eval> rakudo : OUTPUT¬´===SORRY!===‚ê§Symbol '$a' not predeclared in <anonymous> (/tmp/VoYqtvzkK9:22)‚ê§¬ª

[16:16] <masak> might I suggest we could do better than '<anonymous>' there?

[16:17] <masak> actually, I don't see how 'in <anonymous>' would ever serve me very much.

[16:17] <masak> might as well say 'in <I don't know>'

[16:17] <moritz_> rakudo: my $x = sub { $a }

[16:17] <p6eval> rakudo : OUTPUT¬´===SORRY!===‚ê§Symbol '$a' not predeclared in <anonymous> (/tmp/VK0rAlHnyo:22)‚ê§¬ª

[16:17] <masak> ok, I accept that case. :)

[16:18] <moritz_> hm

[16:18] <colomon> would you prefer "Symbol '$a' not predeclared (/tmp/VK0rAlHnyo:22)"?

[16:18] <masak> rakudo: sub foo { say "OH HAI"; { $a } }

[16:18] <p6eval> rakudo : OUTPUT¬´===SORRY!===‚ê§Symbol '$a' not predeclared in foo (/tmp/laLazHlhuR:22)‚ê§¬ª

[16:18] <moritz_> 'anonymous' doesn't even occur in src/Perl6/BacktracePrinter.pm

[16:18] <masak> colomon: I'd prefer a line number and a file.

[16:19] <colomon> you've got them

[16:19] <colomon> "/tmp/VK0rAlHnyo:22"

[16:19] <masak> right. I see them now. :)

[16:19] <masak> yes, so just get rid of 'in <anonymous>', at least when we're not actually in something.

[16:20] *** timbunce joined
[16:23] <moritz_> urk

[16:23] <moritz_> it comes from PAST::Compiler it seems

[16:23] <masak> o.O

[16:24] <flussence> s/'in <anonymous>'/'at top level scope'/ ?

[16:24] <moritz_> flussence: that would be wrong in  sub f() { my $x = sub { $undeclared }}

[16:24] <masak> indeed.

[16:27] <moritz_> rakudo: $x; BEGIN { say "OH NOEZ" }

[16:27] <p6eval> rakudo : OUTPUT¬´OH NOEZ‚ê§===SORRY!===‚ê§Symbol '$x' not predeclared in <anonymous> (/tmp/w4j0Lkezm2:22)‚ê§¬ª

[16:27] <moritz_> rakudo: $x, BEGIN { say "OH NOEZ" }

[16:27] <p6eval> rakudo : OUTPUT¬´OH NOEZ‚ê§===SORRY!===‚ê§Symbol '$x' not predeclared in <anonymous> (/tmp/aSwDxo0xfj:22)‚ê§¬ª

[16:27] *** Psyche^ joined
[16:27] <moritz_> see, the check for declaredness of variables is too late

[16:27] *** Psyche^ is now known as Patterner

[16:27] <moritz_> it's at the codegen stage

[16:27] <moritz_> not at parse time

[16:28] <moritz_> (that's because we don't have the lexpad at compile time around, a fact which I've bemoaned many times now)

[16:28] * moritz_ doesn't feel motivated to submit rakudobug, but wouldn't stop masak from doing so, just for the lulz

[16:31] <masak> tough one.

[16:31] *** Patterner left
[16:31] <masak> I've no mind to submit bugs that just sit there, not getting fixed...

[16:32] <masak> better submit too few bugs than too many, that's what I always say.

[16:32] <moritz_> well, it will get fixed at some point[tm]

[16:32] <colomon> #phasers in 2.5?

[16:32] * moritz_ will likely miss it

[16:32] <moritz_> but yes, 2.5h sounds correct

[16:32] * masak will try to be there

[16:32] <moritz_> but I haven't done much 6y anyway, except for the advent calendar

[16:32] <smash> colomon: sorry, didn't have time to share the benchmarking scripts, but it's on my TODO list, sorry

[16:33] <colomon> smash: no worries

[16:35] <masak> moritz_++ # guiding the advent calendar along

[16:36] <masak> I'm somewhat surprized that I didn't get one single reaction on my "this week in Perl 6" idea. am I the only one who misses those weekly updates?

[16:36] *** Psyche^ joined
[16:36] *** Psyche^ is now known as Patterner

[16:37] <colomon> I miss them, but I'm a little scared at what they'd show at the moment...

[16:37] <takadonet> masak: what was the idea?

[16:37] <masak> colomon: scared? how so? there's lots going on.

[16:38] <moritz_> masak: sorry for not reacting. I thought a lot about that, and didn't want to infect you with my pessimism

[16:38] <PerlJam> masak: I think we're just in a down-phase for development (mostly), so people don't get very excited by "this week in Perl 6"

[16:38] <moritz_> PerlJam: I kinda disagree. Much interesting development happens in modules these days

[16:38] <moritz_> PerlJam: like cosimo++ porting Factor to Perl 6

[16:38] <masak> takadonet: http://irclog.perlgeek.de/perl6/2010-12-05#i_3059185

[16:39] <colomon> masak: There's a good bit going on, but it's all off in its own little corners.  And Rakudo development has more-or-less stopped.

[16:39] <masak> I would *love* to see a weeky-updates effort get going. I think it would be excellent PR, even *within* the ranks of Perl 6.

[16:39] <masak> I'm prepared to put in quite a bit of work to get it going, as long as I'm not entirely alone.

[16:39] <PerlJam> moritz_: then I guess "this week in Perl 6" would be an awesome thing to have so that these things get publicity :)

[16:40] <colomon> Factor?

[16:40] <masak> colomon: the previous iterations of the weekly updates focused much on p6c and p6l.

[16:40] <PerlJam> colomon: facter.  I've got the post book marked, but I have no idea what it is.

[16:40] <masak> colomon: nowadays, we could also focus on IRC, newly released modules, non-Rakudo implementations, etc.

[16:40] <masak> nom &

[16:40] *** masak left
[16:43] <dukeleto> moritz_: who is porting Factor to Perl 6?

[16:43] * dukeleto had plans to port Factor to Parrot quite a while ago, but never got around to it

[16:43] <PerlJam> dukeleto: http://my.opera.com/cstrep/blog/2010/12/06/facter-ported-to-perl-6

[16:44] <dukeleto> whoa, that is "facter" not Factor

[16:44] <PerlJam> right.

[16:44] <dukeleto> Factor is a stack-based programming language

[16:44] <tadzik> (also, it doesn't work)

[16:45] <dukeleto> tadzik: facter or Factor doesn't work?

[16:45] <tadzik> dukeleto: facter the Perl6 module

[16:46] <tadzik> at least for me, I remember cosimo fixing it, but it managed to eat 2.5 GBs of RAM trying to get my uname -a output

[16:46] * colomon would love to see Factor the language ported to Parrot

[16:46] <tadzik> so it still needs some love I guess

[16:47] <dukeleto> colomon: i plan on taking another crack at it soon. I will be sure to let you know when I do.

[16:47] <colomon> Actually, even just a working Forth might well be useful.

[16:47] <dukeleto> colomon: I am friends with the guy who started Factor. He is a cool guy. I would always chat with him, comparing Perl 6 and Factor concepts

[16:48] <colomon> dukeleto: I've only played with a bit, but it seemed very cool.

[16:54] * moritz_ apologizes for confusing Facter and Factor

[16:55] <dukeleto> moritz_: you will be appropriately punished ;)

[16:55] *** kanishka joined
[16:55] <dukeleto> moritz_: they are only 1 letter off, I can totally understand

[16:56] * tadzik 's gravatar is now a real tadzik, not a dog

[16:56] <tadzik> dukeleto: especially, when facter is port of factor :)

[16:59] *** justatheory left
[17:03] <dukeleto> tadzik: oy vey

[17:04] <dukeleto> tadzik: my parrot port of Factor is called "Kea"

[17:04] <dukeleto> tadzik: it is a Parrot from New Zealand that occasionally eats the kidneys of sheep

[17:05] <dukeleto> tadzik: https://secure.wikimedia.org/wikipedia/en/wiki/Kea

[17:05] <TimToady> dead ones, I hope

[17:06] <TimToady> .oO(I vant to suck your kidney!)

[17:10] *** _kaare joined
[17:12] <colomon> TimToady!   \o/

[17:14] <TimToady> ¬∑‚ç§√ñ(Someone could do an advent panegyric on Camelia)

[17:16] <TimToady> maybe it goes with the community entry

[17:16] *** timbunce left
[17:17] *** timbunce joined
[17:20] *** timbunce left
[17:31] *** timbunce joined
[17:33] *** wes_ joined
[17:33] *** finanalyst joined
[17:34] *** thundergnat joined
[17:34] *** kanishka left
[17:34] <thundergnat> rakudo: my @a = (1,2,3); .say for @a, *;

[17:34] <p6eval> rakudo : OUTPUT¬´1‚ê§2‚ê§3‚ê§Whatever()<0x726fa20>‚ê§¬ª

[17:35] <thundergnat> rakudo: my @a = (1,2,3); .say for @a, @a[*-1] xx *;

[17:35] <p6eval> rakudo : OUTPUT¬´(timeout)‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê§3‚ê

[17:36] *** envi left
[17:36] <thundergnat> Hmm  SO3 says those should be equivalent.

[17:37] * takadonet looks at TimToady

[17:39] *** wes_ left
[17:39] *** wes_ joined
[17:39] <colomon> None of the automatic , * extension stuff is implemented in Rakudo yet, is it?

[17:40] *** impious joined
[17:40] <thundergnat> Possibly not. It doesn't work as specced yet at least.

[17:42] <[Coke]> masak; (this week) those are a HUGE PITA to produce.

[17:43] <[Coke]> and Planet Perl Six gives me about 1/2 of what TWIP did.

[17:43] <[Coke]> moral: blog more?\

[17:44] * moritz_ would like an interface to submit individual posts from foreign blogs to planetsix

[17:44] *** justatheory joined
[17:47] *** wes_ left
[17:48] <[Coke]> moritz_: Low tech: create a new blog that just refers to those articles you wish to republish.

[17:48] *** wes_ joined
[17:49] <[Coke]> allison's blog often has entries that are just pointers to other articles.

[17:51] *** araujo joined
[17:52] *** dakkar left
[17:54] *** glow joined
[17:57] *** dakkar joined
[17:59] *** MayDaniel left
[18:09] *** th0dt joined
[18:17] <smash> colomon: go to http://gil.di.uminho.pt/users/smash/rakudo-bench.html, scroll down to end of page, you have a link to the script that i use to run the benchmarks

[18:17] <smash> colomon: a very simple script

[18:19] *** dakkar left
[18:19] <tadzik> smash: why so many __underscores in the code?

[18:21] <[Coke]> I read that as "Private"

[18:21] <smash> tadzik: auxiliary functions that could be implemented in different ways

[18:21] <smash> and most probably aren't done in the best way

[18:21] <smash> and should be replaced

[18:22] <colomon> \o/

[18:23] <smash> the main purpose was to being able to add new scripts or rakudo versions without having to change the script

[18:23] <smash> s/add new scripts/add new benchmark scripts/

[18:26] <PerlJam> smash: where's the standard deviation?  ;)

[18:26] <smash> PerlJam: somewhere in my TODO list ;)

[18:32] *** cdarroch joined
[18:32] *** cdarroch left
[18:32] *** cdarroch joined
[18:39] <thundergnat> rakudo: my ($a, $b); say $a ~= 'yay! ', $b = $b ~ 'oh noez!'; # why the difference? Can't find a relevant ticket in RT 

[18:39] <p6eval> rakudo : OUTPUT¬´yay! Any()oh noez!‚ê§¬ª

[18:40] <tadzik> oh funny

[18:40] <tadzik> rakudo: my $b; $b.Str.perl.say

[18:40] <p6eval> rakudo : OUTPUT¬´"Any()<0x61740b0>"‚ê§¬ª

[18:40] <tadzik> that's fixable, no?

[18:43] <thundergnat> I can deal with undefined in sring context being Any(), I was just asking why ~= seems to suppress it.

[18:43] <thundergnat> Though personally I would prefer '' to Any()

[18:43] <colomon> huh

[18:43] <tadzik> same here

[18:43] <colomon> rakudo: my $b; $b.Str.WHAT.say

[18:43] <p6eval> rakudo : OUTPUT¬´Str()‚ê§¬ª

[18:43] <colomon> rakudo: my $b; $b.Str.perl.say

[18:43] <p6eval> rakudo : OUTPUT¬´"Any()<0x619c0b0>"‚ê§¬ª

[18:44] <colomon> that seems like a bug, no?

[18:44] <colomon> rakudo: my $b; $b.Rat.WHAT.say

[18:44] <p6eval> rakudo : OUTPUT¬´Method 'Rat' not found for invocant of class ''‚ê§  in main program body at line 22:/tmp/k69x95Ldv0‚ê§¬ª

[18:45] *** MayDaniel joined
[18:48] *** am0c left
[18:48] *** kfo left
[18:48] *** kfo joined
[18:48] *** LoRe left
[18:48] *** LoRe joined
[18:50] *** molaf left
[18:54] *** soroush_ joined
[18:55] *** soroush left
[18:56] *** wes_ left
[18:57] <colomon> #phasers T-3 minutes

[18:58] *** th0dt left
[18:59] *** MayDaniel left
[19:03] *** soroush_ left
[19:03] *** soroush joined
[19:03] *** th0dt joined
[19:03] *** fhelmberger left
[19:04] *** am0c joined
[19:07] *** spq1 joined
[19:09] *** justatheory left
[19:16] *** masak joined
[19:19] *** explorer__ left
[19:23] *** am0c left
[19:27] *** timbunce left
[19:27] *** _twitch left
[19:32] *** jferrero joined
[19:38] *** glow left
[19:40] <dalek> mu: 78644f2 | moritz++ | misc/perl6advent-2010/topic-brainstorming:

[19:40] <dalek> mu: [advent] reorganize brainstorm file: move already-used topic to own section

[19:40] <dalek> mu: review: https://github.com/perl6/mu/commit/78644f2b51

[19:40] <dalek> mu: cd6a87e | moritz++ | misc/perl6advent-2010/articles/different-names-for-different-things.pod:

[19:40] <dalek> mu: [advent] add a post about flip/reverse/invert

[19:40] <dalek> mu: review: https://github.com/perl6/mu/commit/cd6a87eb7d

[19:40] <moritz_> masak: see latest push, comments welcome

[19:40] * masak looks

[19:41] * masak changes the deplorable use.perl link to strangelyconsistent.org instead

[19:41] <masak> http://strangelyconsistent.org/blog/the-taming-of-the-newbie-a-comedy-on-irc

[19:42] <daxim> oooo bubbles

[19:42] *** tylercurtis joined
[19:42] <masak> yes, sorry about those :)

[19:42] <daxim> this web software looks homegrown

[19:42] <masak> it's Perl 6 software :)

[19:43] <daxim> „Åæ„Åï„Åã

[19:43] <masak> oh yes.

[19:43] <masak> and it wasn't even that hard to build.

[19:43] <masak> I'll release it any day now.

[19:44] <masak> (but it's not the Big Announcement) :)

[19:44] <tylercurtis> "Big Announcement"?

[19:44] <masak> yes. three days to go.

[19:44] *** plobsing left
[19:44] <tylercurtis> Good {now}, #perl6.

[19:44] <masak> tylercurtis: oh hai

[19:44] <masak> on Friday, there'll be a Big Announcement, by me. on my blog.

[19:45] <masak> about something Perl 6-related.

[19:45] <moritz_> "that's it, I quit"

[19:45] <diakopter> heh

[19:45] <masak> „Åæ„Åï„Åã

[19:45] <daxim> hey, that's my catchphrase

[19:45] <masak> ;)

[19:45] <daxim> rate this announcement on a sliding scale, where time-travel debugging is considered "cool"

[19:46] <masak> moritz_: I'd like to add, at the end, the suggested general idiom for actually inverting a hash. it's not obvious.

[19:47] <masak> daxim: I'm not at liberty to give you such a measure. all I can tell you is that I know what it is, and *I'm* excited :)

[19:47] <daxim> alright

[19:47] * daxim subscribes the feed

[19:49] <masak> :D

[19:50] *** finanalyst left
[19:50] *** kensanata left
[19:56] *** wamba joined
[20:01] <sorear> good * #perl6

[20:01] <masak> \o

[20:01] <dalek> mu: 928c322 | masak++ | misc/perl6advent-2010/articles/different-names-for-different-things.pod:

[20:01] <dalek> mu: [advent] changed URL to a cuter blog

[20:01] <dalek> mu: 

[20:01] <dalek> mu: Same content, but nicer to look at.

[20:01] <dalek> mu: review: https://github.com/perl6/mu/commit/928c32282d

[20:06] *** PZt left
[20:08] *** horror21 joined
[20:17] <sorear> masak: it's not "invert %hash"?

[20:18] <masak> sorear: well, yes. but you're also supposed to .push the result of that onto the new hash.

[20:18] *** Eevee left
[20:20] <dalek> mu: 99c3194 | masak++ | misc/perl6advent-2010/articles/different-names-for-different-things.pod:

[20:20] <dalek> mu: [advent] added .invert use case

[20:20] <dalek> mu: review: https://github.com/perl6/mu/commit/99c31947b7

[20:20] *** glow joined
[20:23] *** nymacro left
[20:25] *** th0dt left
[20:26] <moritz_> masak: should we volunteer for Thursday?

[20:30] <masak> sure, why not?

[20:31] <masak> at least when we have ascertained that we're not preventing someone else from volunteering :)

[20:31] <moritz_> well, I've been asking for volunteers all day

[20:31] <masak> the lurkers are inattentive today... :)

[20:32] <moritz_> still 10 open slots

[20:32] <PerlJam> I'd like to see an advent post from TimToady if he is willing.

[20:33] <dalek> mu: ab95c80 | moritz++ | misc/perl6advent-2010/ (2 files):

[20:33] <dalek> mu: [advent] volunteer us for Dec 09

[20:33] <dalek> mu: review: https://github.com/perl6/mu/commit/ab95c800dc

[20:39] *** Eevee joined
[20:43] <moritz_> std: my $

[20:43] <p6eval> std a194beb: OUTPUT¬´ok 00:01 119m‚ê§¬ª

[20:43] *** daxim left
[20:43] <masak> std: my ($, $, $, $, @, %, &)

[20:43] <p6eval> std a194beb: OUTPUT¬´ok 00:01 120m‚ê§¬ª

[20:44] <moritz_> std: OUTER::$x

[20:44] <p6eval> std a194beb: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Two terms in a row at /tmp/Gm5Dn3Vd8F line 1:‚ê§------> [32mOUTER::[33m‚èè[31m$x[0m‚ê§    expecting any of:‚ê§   POST‚ê§   bracketed infix‚ê§        infix or meta-infix‚ê§    postfix‚ê§        postfix_prefix_meta_operator‚ê§   statement modifier loop‚ê§Parse

[20:44] <p6eval> ..failed‚ê§FAILED 00:01 120m‚ê§¬ª

[20:44] <masak> $OUTER::x

[20:46] <rokoteko> how far implemented are the feed operators?

[20:46] <jnthn> In Rakudo, they're pretty basic at the moment.

[20:46] <rokoteko> rakudo: my @array = <a, b, c, d>; my @src = 0, 1, 2, 3; @src ==> @array[@(*)] ==> my @dest; @dest.perl.say

[20:46] <p6eval> rakudo : OUTPUT¬´too many positional arguments: 3 passed, 3 expected‚ê§  in main program body at line 1‚ê§¬ª

[20:46] <rokoteko> jnthn: ok.

[20:46] <jnthn> Right, the @(*) target syntax isn't yet done.

[20:47] <jnthn> Do put it into perspective, what we have now was written in about an hour. :)

[20:47] <jnthn> *To

[20:47] *** lichtkind joined
[20:52] *** shi joined
[20:54] <sorear> rakudo: my @array = 1, 2, 3, 4, 5; my $sl = [1,2,3]; say @array[~$sl]

[20:54] <p6eval> rakudo : OUTPUT¬´2‚ê§¬ª

[20:54] <sorear> rakudo: my @array = 1, 2, 3, 4, 5; my $sl = [1,2,3]; say @array[$sl]

[20:54] <p6eval> rakudo : OUTPUT¬´234‚ê§¬ª

[20:55] <TimToady> that seems kinda bogus

[20:56] <TimToady> I would expect it to say 4

[20:56] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_lookup_tablet

[20:56] <TimToady> rakudo: my @array = 1, 2, 3, 4, 5; my $sl = [1,2,3]; say @array[+$sl]

[20:56] <p6eval> rakudo : OUTPUT¬´4‚ê§¬ª

[20:56] <TimToady> like that

[20:56] * jnthn is surprised that is flatterning in there.

[20:57] <jnthn> er, flattening.

[20:57] <sorear> TimToady: rakudo decides whether to slice or index based on $index ~~ Positional

[20:57] <jnthn> oh

[20:57] <TimToady> flatterning will get you knowwhere

[20:57] <jnthn> It's not about flattening.

[20:57] <jnthn> sorear: Right.

[20:57] <jnthn> Which makes sense I guess...

[20:57] <tylercurtis> rakudo: say ~[1, 2, 3];

[20:57] <p6eval> rakudo : OUTPUT¬´1 2 3‚ê§¬ª

[20:57] <tylercurtis> rakudo: say +~[1, 2, 3]

[20:57] <p6eval> rakudo : OUTPUT¬´1‚ê§¬ª

[20:57] <sorear> I am wondering if I can get away with using the list flag instead

[20:58] *** jferrero left
[20:58] <sorear> so @foo[@array] slices but @foo[$array] won't necessarily

[20:58] <TimToady> I don't want list contexts to appear to be flattening $ vars

[20:59] <jnthn> TimToady: Aye, though here it looks more like it's about multi-dispatch semantics than context.

[20:59] <jnthn> TimToady: I suspect that the signature is @slice

[20:59] <sorear> yes

[21:00] <sorear> which is a Positional constraint

[21:00] <jnthn> Right.

[21:00] <TimToady> well, it's a hack around the fact that rakudo doesn't actually do lol yet

[21:00] <jnthn> We do omg and wtf quite well, though. :P

[21:00] <TimToady> in @a[foo;bar;baz] the dimensions are supposed to be in list context

[21:01] <TimToady> which means @a[@b] should flatten, and @a[$b] never should

[21:02] <sorear> Should @a[$b] and @a[$b,] be the same?

[21:02] <TimToady> yes

[21:02] <TimToady> both are slices of one element

[21:03] <sorear> What does '@a[0] = 1,2,3' do?

[21:03] <sorear> Assign 1 to @a[0] and throw away 2,3?

[21:05] * sorear had been thinkinging that @a[0,] = ... was list assignment and @a[0] = ... was scalar

[21:05] <sorear> much as $a, = ... is list assignement and $a = ... is scalar

[21:07] <PerlJam> $a, = ...  looks like some sort of error to me.

[21:07] <masak> std: $a, = ...

[21:07] <p6eval> std a194beb: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Variable $a is not predeclared at /tmp/F9RgxBS5AW line 1:‚ê§------> [32m$a[33m‚èè[31m, = ...[0m‚ê§Preceding context expects a term, but found infix = instead at /tmp/F9RgxBS5AW line 1:‚ê§------> [32m$a, [33m‚èè[31m= ...[0m‚ê§Parse failed‚ê§FAILED 00:01

[21:07] <p6eval> ..120m‚Ä¶

[21:07] <masak> std: my $a; $a, = ...

[21:07] <p6eval> std a194beb: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Preceding context expects a term, but found infix = instead at /tmp/h3m2nOYaYe line 1:‚ê§------> [32mmy $a; $a, [33m‚èè[31m= ...[0m‚ê§Parse failed‚ê§FAILED 00:01 121m‚ê§¬ª

[21:08] <masak> PerlJam: you're right.

[21:08] *** justatheory joined
[21:11] <tylercurtis> sorear: According to S04, "However, anything more complicated than that (including parentheses and subscripted expressions) forces parsing as list assignment instead."

[21:11] <tylercurtis> where that refers to a scalar variable with optional traits, declarators, and type constraints.

[21:11] <TimToady> sorear: back in the pugs heyday we used to try to figure out whether there was only one container on the left, and it turned into madness, so @a[0] = is now always list assignment

[21:12] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_block_tablet

[21:13] *** risou left
[21:14] *** risou joined
[21:15] *** jferrero joined
[21:16] <tadzik> hey, is someone rich of time and ideas?

[21:16] <sorear> tylercurtis: I think parsing as a list assignment and executing as a list assignment are two different thngs

[21:16] <TimToady> it's like the ... $endpoint decision; a little less dwimmy in some cases, but much much easier to explain

[21:17] <tadzik> I'm afraid that if I'll be able to publish something tomorrow, it'll come up after 20:00 or something

[21:17] <PerlJam> tadzik: that's okay.

[21:17] *** icwiener left
[21:18] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[21:18] <tadzik> PerlJam: If I'll make it. I'm terribly tired, and have 3 Big Things for the Uni on Thursday

[21:19] <sorear> TimToady: if $obj.attribute = 5; is list assignment, how does it execute?

[21:19] *** icwiener joined
[21:19] *** icwiener left
[21:19] *** icwiener joined
[21:20] <sorear> TimToady: does it put 5 into flattening list context, then assign the first value out to the attribute?

[21:20] <tadzik> but if late hours are ok, then I'm okay as well

[21:20] <thundergnat> rakudo: say 0 || 0 || 1; say 0 || || 1; #   O_o perhaps related to http://rt.perl.org/rt3/Ticket/Display.html?id=72828 ?

[21:20] <p6eval> rakudo : OUTPUT¬´1‚ê§Capture()<0x77dd630>‚ê§¬ª

[21:21] <thundergnat> rakudo say 0 |||| 1;

[21:22] <thundergnat> duh

[21:22] <thundergnat> rakudo: say 0 |||| 1;

[21:22] <p6eval> rakudo : OUTPUT¬´Capture()<0x6b099d0>‚ê§¬ª

[21:23] <thundergnat> std: 0 |||| 1;

[21:23] <p6eval> std a194beb: OUTPUT¬´ok 00:01 119m‚ê§¬ª

[21:24] <thundergnat> O_o

[21:24] <flussence> wtf?

[21:25] <jnthn> thundergnat: prefix:<|>

[21:25] <jnthn> Is how capture formed.

[21:25] <PerlJam> it would really help if there were something that parenthesized expressions I t hink

[21:26] <sorear> std: ||0

[21:26] <p6eval> std a194beb: OUTPUT¬´ok 00:01 118m‚ê§¬ª

[21:26] <sorear> std: 1 ~~~~ 0

[21:26] <p6eval> std a194beb: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Expecting a term, but found either infix ~~ or redundant prefix ~‚ê§  (to suppress this message, please use space between ~ ~) at /tmp/VQjCJMBuMu line 1:‚ê§------> [32m1 ~~~~[33m‚èè[31m 0[0m‚ê§Parse failed‚ê§FAILED 00:01 120m‚ê§¬ª

[21:27] <PerlJam> rakudo: say 0 +-+-+-+ 1

[21:27] <p6eval> rakudo : OUTPUT¬´-1‚ê§¬ª

[21:27] <PerlJam> (not at all intuitive :)

[21:27] <sorear> niecza: say 0 +-+-+-+ 1

[21:27] <p6eval> niecza f30c13c: OUTPUT¬´-1‚ê§¬ª

[21:28] <sorear> who says p6 sucks for obfu?

[21:33] *** gbacon joined
[21:33] <TimToady> sorear: it gives the list to whatever container was returned by the method call, and the container decides how many things to take off the list

[21:34] <TimToady> p6 doesn't suck at obfu, it is relatively (compared to P5) suckier at golf

[21:34] *** kjeldahl left
[21:35] <sorear> I see

[21:36] <TimToady> ...said the blind man, as he picked up his hammer and saw.

[21:36] <sorear> I have seen inconsistant statements about ($x,) === $x

[21:36] <TimToady> === doesn't do lists

[21:37] <masak> but it's not syntactically illegal, is it?

[21:38] <TimToady> it's fine syntactically, but unless $x happens to contain its own outer parcel, it'll be always be false

[21:38] <sorear> wanted: unambiguous metasyntactic equality operator

[21:39] <sorear> put another way, after my $x; my @a; @a[0] := $x;   is  @a[0]  ($x,)  or  $x ?

[21:39] <sorear> you called it a one-element slice earlier

[21:40] <TimToady> for assignment, not for binding

[21:40] <masak> how can I make $x contain its own outer parcel? :)

[21:40] <TimToady> beats me

[21:41] <TimToady> but you can preannounce it if you like

[21:41] <masak> ouch :)

[21:41] <masak> TimToady: maybe I'll tell everyone except you on Friday... :P

[21:42] <TimToady> anyway, after @a[0] := $x, it is certainly the case that @a[0] === $x

[21:43] <TimToady> and @a[0] =:= $x should also be true, methinks

[21:43] <sorear> so slicing should behave like &return and only create a parcel if !=1 element is requested?

[21:44] <TimToady> I believe so

[21:44] <TimToady> and if you can prove it at compile time, you can get rid of the list altogether

[21:44] <TimToady> bypassing the slicer

[21:45] <TimToady> .[$x] should be considered sufficient proof, hence my expectation of 4 above

[21:46] * sorear wonders

[21:47] <sorear> niecza: my @a = 1,2,3,4,5; say @a[[1,2,3]]

[21:47] <p6eval> niecza f30c13c: OUTPUT¬´4‚ê§¬ª

[21:47] <sorear> er

[21:47] <sorear> niecza: my @a = 1,2,3,4,5; say @a[~[1,2,3]]

[21:47] <p6eval> niecza f30c13c: OUTPUT¬´Unhandled exception: Unable to resolve method Numeric in class Str‚ê§  at  line 0 (ExitRunloop @ 0)‚ê§  at  line 1 (MAIN mainline @ 5)‚ê§  at  line 992 (SAFE G1034ANONC @ 1)‚ê§  at  line 992 (SAFE module-SAFE @ 29)‚ê§  at  line 992 (SAFE mainline @ 1)‚ê§  at  line 0 (boot @ 1)‚ê§  at  line

[21:47] <p6eval> ..0 (Ex‚Ä¶

[21:47] <TimToady> sugoi

[21:48] <sorear> (1) terible, dreadful (2) amazing, great

[21:48] <sorear> what a word.

[21:49] *** ruoso left
[21:50] <diakopter> "awesome"

[21:50] <tadzik> phenny: "sugoi"?

[21:50] <phenny> tadzik: "sugoi" (fil to en, translate.google.com)

[21:51] <sorear> tadzik: 3: ÂáÑ„ÅÑ Ôºà„Åô„Åî„ÅÑÔºâ (adj-i) (1) (uk) terrible; dreadful; (2) amazing (e.g.of

[21:51] <sorear> strength); great (e.g. of skills); wonderful; terrific; (3) to a great extent; vast(in

[21:51] <sorear> numbers); (P)

[21:51] <sorear> from the xjdic file

[21:51] *** thundergnat left
[21:52] <tadzik> interesting

[21:53] <jdv79> so, i use autodie; then use autodie qw(read); because my class defined a read sub.  and it still gets wiped out.

[21:53] <jdv79> wrong perl chan. p5. sorry.

[21:56] *** mtk left
[21:58] <sorear> TimToady: so, in my $x = [], there is an Array object and a Scalar object.  You hold them to be fundamentally the same sort of thing?

[22:03] <TimToady> not sure what you're asking

[22:03] <dalek> ecosystem: 230187c | (Timothy Totten)++ | projects.list:

[22:03] <dalek> ecosystem: Removed perlite6, as the project has been deleted.

[22:03] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/230187c29f

[22:07] *** jfried left
[22:09] <diakopter> nqp: say $/

[22:09] <p6eval> nqp: OUTPUT¬´Confused at line 1, near "say $/"‚ê§current instr.: 'parrot;HLL;Grammar;panic' pc 635 (src/cheats/hll-compiler.pir:206)‚ê§¬ª

[22:09] *** mkramer left
[22:09] <diakopter> nqp: say($/)

[22:09] <p6eval> nqp: OUTPUT¬´Symbol '$/' not predeclared in <anonymous>‚ê§current instr.: 'parrot;PCT;HLLCompiler;panic' pc 146 (compilers/pct/src/PCT/HLLCompiler.pir:109)‚ê§¬ª

[22:09] <diakopter> niecza: say($/)

[22:09] <p6eval> niecza f30c13c: OUTPUT¬´‚ê§¬ª

[22:10] <diakopter> niecza: say($/[0])

[22:10] <p6eval> niecza f30c13c: OUTPUT¬´‚ê§¬ª

[22:10] <diakopter> niecza: say(+$/)

[22:10] <p6eval> niecza f30c13c: OUTPUT¬´Unhandled exception: Unable to resolve method Numeric in class Any‚ê§  at  line 0 (ExitRunloop @ 0)‚ê§  at  line 0 (MAIN mainline @ 0)‚ê§  at  line 992 (SAFE G1034ANONC @ 1)‚ê§  at  line 992 (SAFE module-SAFE @ 29)‚ê§  at  line 992 (SAFE mainline @ 1)‚ê§  at  line 0 (boot @ 1)‚ê§  at  line

[22:10] <p6eval> ..0 (Ex‚Ä¶

[22:10] <diakopter> sorear: where does it declare $/

[22:10] <diakopter> (apparently it doesn't, in nqp)

[22:14] *** risou_ joined
[22:17] *** risou left
[22:20] *** Guest79076 left
[22:21] <sorear> diakopter: $/ is like a contextual; it doesn't need to be declared

[22:22] <sorear> at runtime $/ searches up the outer stack for the first frame with a most recent regex match

[22:23] <sorear> TimToady: in an expression of the form @a ,= @b, how does &infix_postfix_meta_operator:<=> know what kind of assignment to do?

[22:24] <sorear> For that matter, what kind of assignment does &infix:<=>(@a, @b) do?

[22:25] *** plobsing joined
[22:25] <sorear> How does &infix:<=>(@array[0], (1, 2)) know to assign only one value, while &infix:<=>($x, (1, 2)) assigns the whole parcel?

[22:27] *** ch3ck3r joined
[22:30] *** ch3ck left
[22:31] *** shi left
[22:31] * sorear out

[22:31] *** shi joined
[22:39] *** p6eval left
[22:39] *** dalek left
[22:41] *** dalek joined
[22:41] *** ChanServ sets mode: +v dalek

[22:45] *** p6eval joined
[22:45] *** ChanServ sets mode: +v p6eval

[22:47] <masak> miyagawa++ makes the same observation moritz_ did once :) -- http://twitter.com/miyagawa/status/12275270752935936

[23:06] *** spq1 left
[23:06] *** ch3ck joined
[23:07] *** sidek left
[23:08] <BinGOs> strangely mesmerising background he has there.

[23:08] *** ch3ck3r left
[23:17] *** icwiener left
[23:24] *** _kaare left
[23:43] *** bluescreen joined
[23:43] *** bluescreen is now known as Guest58567

[23:44] <masak> tell me a bit about the initial values of typed dimensionalized arrays.

[23:45] <masak> my Int @a[10; 10]; # is it filled with Int?

[23:45] <masak> my int @a[10; 10]; # is it filled with 0?

[23:49] <lichtkind> is the rakudo REPL supposed to end on exception?

[23:49] <masak> no, it's not. it's a bug, it's known, and it's been reported several times by several people.

[23:49] <lichtkind> allright

[23:52] <masak> followup question to those above: would it be better for 'my Int @a[10; 10]' to be filled with 0? if not, what's the shortest way to fill such an array with zeroes?

[23:54] *** cdarroch left
