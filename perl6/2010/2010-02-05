[00:00] *** kcwu joined
[00:01] <diakopter> heh

[00:02] <TimToady> take out the spaces and it runs much slower

[00:03] <diakopter> orly

[00:03] *** sundar left
[00:03] <TimToady> I suspect the reduction-op detector doesn't fail as quickly

[00:04] <TimToady> the line that tests:         <?before '['\S+']'>

[00:05] <TimToady> which usually falsifies most array composers immediately

[00:08] <diakopter> std: \[]\{}\()\++

[00:08] <p6eval> std 29642: OUTPUT«ok 00:01 105m␤»

[00:08] <TimToady> std: \[]\   {}\   ()\    ++

[00:08] <p6eval> std 29642: OUTPUT«ok 00:01 105m␤»

[00:09] <TimToady> std: my $a = 1; $a\i;

[00:09] <p6eval> std 29642: OUTPUT«ok 00:01 107m␤»

[00:10] <sjohnson> 1hi

[00:10] <diakopter> hi0

[00:15] <TimToady> ng: say say 'hi'

[00:15] <p6eval> ng 8aa3b7: OUTPUT«hi␤1␤»

[00:16] <TimToady> ng: print print 'hi'

[00:16] <p6eval> ng 8aa3b7: OUTPUT«hi1»

[00:23] <sjohnson> heh

[00:24] <sjohnson> TimToady: have you seen the anime "Legend of Basara"?

[00:24] <sjohnson> it's 1999 (c) i think.. so a bit of an older one

[00:38] <TimToady> no, missed that one

[00:47] *** lichtkind left
[00:51] *** he_ joined
[01:11] *** lisppaste3 left
[01:15] *** lestrrat is now known as lest_away

[01:19] *** lisppaste3 joined
[01:21] *** cognominal left
[01:28] *** pmurias left
[01:34] <sjohnson> TimToady: it's good

[01:44] *** drbean joined
[01:46] *** lest_away is now known as lestrrat

[01:56] *** galf joined
[01:56] *** galf left
[01:57] *** mssm left
[02:01] *** Chillance left
[02:10] *** nihiliad joined
[02:13] *** Khisanth left
[02:14] *** Khisanth joined
[02:15] *** Khisanth left
[02:16] *** Khisanth joined
[02:17] *** Khisanth left
[02:19] *** araujo left
[02:22] *** Khisanth joined
[02:25] *** hudnix left
[02:25] *** araujo joined
[02:26] *** eternaleye joined
[02:26] *** meppl left
[02:29] *** JimmyZ joined
[02:33] *** JimmyZ_ joined
[02:34] *** JimmyZ left
[02:34] *** JimmyZ_ is now known as JimmyZ

[02:51] *** nbrown left
[02:55] *** jaldhar joined
[02:58] *** nihiliad left
[03:00] *** nihiliad joined
[03:14] *** agentzh joined
[03:24] *** gfx joined
[04:19] *** xinming left
[04:20] *** xinming joined
[04:23] *** old_gray_bear joined
[04:31] *** mikehh left
[04:36] *** mikehh joined
[04:51] *** __rnddim__ joined
[05:05] <Tene> okay, I've actually got an hour or two here to work on rakudo.

[05:11] <JimmyZ> Tene++

[05:13] <Tene> I've totally lost the plot again.  No idea what to work on now.

[05:16] *** stephenlb left
[05:20] *** LittleCZR joined
[05:20] *** LittleCZR left
[05:26] *** nihiliad left
[05:43] *** k23z__ left
[05:54] <eternaleye> Hm. I thought ?& was just boolean and, not boolean bitwise and as colomon said

[06:02] *** JimmyZ left
[06:06] <TimToady> it's bitwise if you're only wise about one bit, otherwise it's +&

[06:06] <TimToady> well, or ~&, if you're bitwising a buffer

[06:07] <TimToady> though arguably »+&« would do the same thing

[06:08] <TimToady> given buffers can behave as integer arrays

[06:24] *** meppl joined
[06:27] <eternaleye> Heh, even bitwise ops are TMTOWTDI

[06:28] <eternaleye> Hm, there could be a few cases where ~& has different effects from »+&«, namely where the bufs have a different number of elements, or have different units

[06:29] <eternaleye> buf8 vs buf32

[06:29] <eternaleye> Maybe that should be an anti-pattern

[06:29] *** rgrau left
[06:30] <eternaleye> Since AFAIU, hypers line up the front and extend the back by repeating the last element, whereas bitwise lines up the back and extends the front with zeroes

[06:42] <TimToady> no, hypers never extend

[06:43] <TimToady> they can xx * a single value into a whole dimension though

[06:43] <TimToady> I'd think on a buf it would assume the final missing bits were all zeros

[06:44] <eternaleye> Ah

[06:44] <TimToady> I think p5 does bitwise strings that way

[06:44] <eternaleye> Still, that would have... interesting results to extend at the end, assuming big-endianism

[06:45] <eternaleye> For a buf, at least. Bitwising a string is probably ill-advised

[06:45] <TimToady> perl -le 'print "AAAA" | "B"'

[06:45] <TimToady> prints CAAA

[06:45] <eternaleye> In P6

[06:46] <eternaleye> 512.buf8 >>+|<< 1.buf8 == 512

[06:47] <eternaleye> Under that property

[06:47] *** __rnddim__ left
[06:47] <TimToady> well, don't do that then.  :)

[06:47] <eternaleye> Hence why I think it should be an anti-pattern as above

[06:48] <eternaleye> P6BP

[06:51] *** justatheory left
[06:57] *** xinming left
[06:58] *** xinming joined
[07:06] *** Su-Shee joined
[07:07] <Su-Shee> good morning

[07:16] *** fda314925 left
[07:22] *** agentzh left
[07:23] *** fda314925 joined
[07:30] *** gfx left
[07:31] *** payload left
[07:37] *** f00li5h is now known as f00li5h[HireMe]

[07:43] *** am0c joined
[07:43] *** uniejo joined
[07:48] *** mikehh left
[08:02] *** [particle]1 joined
[08:02] *** uniejo left
[08:03] *** [particle] left
[08:16] *** iblechbot joined
[08:30] *** Helios left
[08:36] *** Helios joined
[08:43] *** kaare joined
[08:43] *** kaare is now known as Guest4168

[08:44] <moritz_> good morning

[08:45] *** dvj joined
[08:58] *** drbean left
[09:03] * mathw mumbles about CPAN

[09:05] *** jferrero joined
[09:13] <moritz_> http://asset.soup.io/asset/0665/7601_adf1.jpeg

[09:16] *** cls_bsd joined
[09:22] *** dakkar joined
[09:29] <mathw> moritz_: lol

[09:33] *** payload joined
[09:35] *** payload left
[09:35] *** lestrrat is now known as lest_away

[09:36] *** payload joined
[09:40] *** mikehh joined
[09:45] *** Chillance joined
[09:47] *** clausi joined
[09:50] *** mssm joined
[10:05] *** payload left
[10:08] <jnthn> morning, parrotfolk

[10:08] <jnthn> erm

[10:08] <jnthn> perl6folk

[10:08] <jnthn> gah

[10:08] <jnthn> :-)

[10:08] <jnthn> .oO( before drinking coffee, ALWAYS read the same mailing list as the channel you're greeting )

[10:10] * moritz_ is a butterflyparrot

[10:14] *** payload joined
[10:15] * frettled wants a biscuit.

[10:41] *** masak joined
[10:41] <masak> ahojte, #perl6 folks!

[10:41] <moritz_> good morning mathw 

[10:41] <moritz_> erm, masak 

[10:41] <moritz_> both :-)

[10:41] <masak> :)

[10:42] <masak> I'm very happy about the effect the one-liner I posted yesterday had.

[10:42] *** moritz_ sets mode: +o masak

[10:42] <masak> I should perhaps source it, too: http://bumppo.net/lists/fun-with-perl/2001/02/msg00003.html

[10:43] <jnthn> masak: ahoj! :-)

[10:44] <masak> jnthn: ako sa mas?

[10:45] <jnthn> masak: Mam sa dobre, dakujem. A ty?

[10:46] <masak> Mam sa tiez dobre.

[10:47] <masak> (uncertain about placement of 'tiez'...)

[10:49] <jnthn> masak: On the end is certainly safe...and probably more usual, I'd say.

[10:49] <jnthn> Word order is often quite free though. :-)

[10:49] <masak> that's what excessive use of cases gives you. :)

[10:50] <jnthn> Excessive? Excessive? It's Slovak, not Finish!

[10:50] <masak> fair enough. :)

[10:50] <jnthn> At least we have one less than Czech. ;-)

[10:50] <masak> O RLY? didn't know that.

[10:51] <jnthn> Czech also has vocative case.

[10:51] <masak> oh, vocative... :P

[10:51] <masak> that's hardly a case to begin with.

[10:51] <jnthn> :-P

[10:53] <frettled> heh

[10:54] <masak> I'm re-backlogging the discussion with forrest++ from yesterday.

[10:54] <masak> it's borderline blog material.

[10:55] <jnthn> masak: 1 month until I gotta s/Slovak/Swedish/

[10:55] <masak> I especially like "you guys rock" in the middle of it all. :)

[10:55] <jnthn> forrest: I backlogged over that one. It was good. :-)

[10:55] <jnthn> erm

[10:55] <jnthn> masak:

[10:55] <masak> :)

[10:55] <jnthn> ...today I can't multi-task...

[10:56] <masak> jnthn: looking forward to having you here. did I mention that I'm open for spontaneous weekend hackathons? :)

[10:57] <jnthn> masak: Yes, we should arrange that. :-)

[10:57] <jnthn> oh wait

[10:57] <jnthn> :-)

[10:58] <masak> 'spontaneous, adj.: ...'

[10:58] <masak> :P

[10:59] <jnthn> masak: Looks like I may be ending up in Lund. You can come and complain about the modern university there. ;-)

[11:00] <masak> Lund has a university? hm, that *does* sound vaguely familiar... :)

[11:01] <jnthn> Yeah, but it's nowhere near as good as all of the ones in Sweden. :)

[11:01] <jnthn> *all of the *older* ones

[11:01] *** gfx joined
[11:02] <masak> actually, some of my best friends are from Lund.

[11:02] <masak> (they talk funny!)

[11:02] <jnthn> lol!

[11:02] <jnthn> Does that mean I'll learn funny Swedish? :-)

[11:03] <masak> yes, I just realized that.

[11:03] <masak> and not for the first time, I think.

[11:04] <masak> jnthn: you'll be like the guy in the joke who speaks dialect with an accent. :P

[11:04] <jnthn> That sounds like my kinda role. :-)

[11:05] <masak> role Jnthn { ... }

[11:05] <jnthn> I am, but a stub. :-P

[11:05] *** clintongormley joined
[11:05] <masak> oh! by the way, I think I've found a slight inconsistency having to do with traits.

[11:06] <masak> just give me a minute to prepare some examples.

[11:07] <masak> right. here goes.

[11:07] <masak> rakudo: role A { has $.a is rw }; my $x = 5 but A(42); say $x.a

[11:07] <p6eval> rakudo 1d4928:  ( no output )

[11:07] <masak> locally, that gives '42'.

[11:07] <masak> no problem there.

[11:07] <masak> now watch:

[11:07] <masak> rakudo: class A { has $.a is rw }; my $x = A(42)

[11:07] <p6eval> rakudo 1d4928: OUTPUT«invoke() not implemented in class 'A'␤in Main (file <unknown>, line <unknown>)␤»

[11:08] <masak> why the discrepancy?

[11:08] <jnthn> masak: but A(42) is not an invocation, but a special syntactic form.

[11:09] <jnthn> (the RHS of but and does get managed)

[11:09] <jnthn> *mangled

[11:09] <masak> oh, I thought it was a conversion to A or something.

[11:09] <masak> and that one-attribute types got special treatment.

[11:09] <jnthn> A(42) on its own should do that.

[11:10] <jnthn> Though it's identical to 42.A

[11:10] <jnthn> So you'd better have monkey-patched ya Int.

[11:10] <masak> hm.

[11:10] <jnthn> (Recent spec change explicitly made TypeName($foo) and $foo.TypeName equivalent.)

[11:10] <masak> nod.

[11:10] <jnthn> (Though I'd mentally had it that way for a while.)

[11:11] <masak> like purl, you already had it that way, jnthn.

[11:11] <jnthn> I'd understood it from S14 as a special syntactic form to the RHS of but and does though.

[11:11] <jnthn> masak: Sorry, I don't follow...

[11:11] <jnthn> :-)

[11:11] <masak> :)

[11:11] <jnthn> Ah, purl. 

[11:12] <masak> Ah, abscense of purl.

[11:13] <jnthn> Actually, that is preferable. :-)

[11:15] <jnthn> masak: Looked it up.

[11:15] <jnthn> From S14:

[11:15] <jnthn> Note that the parenthesized form is I<not> a subroutine or method call.

[11:15] <jnthn> It's just special initializing syntax for roles that contain a single

[11:15] <jnthn> property.

[11:15] <masak> oh, good.

[11:15] <masak> then I'll hold my peace.

[11:25] *** tuxdna left
[11:29] <masak> haha, moritz_++ # http://asset.soup.io/asset/0665/7601_adf1.jpeg

[11:31] *** payload left
[11:35] *** old_gray_bear left
[11:46] *** riffraff joined
[11:46] *** IllvilJa joined
[11:46] <IllvilJa> Hello folks! o/

[11:52] *** xomas left
[11:53] *** drbean joined
[11:59] *** gfx left
[12:02] <colomon> \o

[12:09] *** ruoso joined
[12:13] *** payload joined
[12:19] *** patspam left
[12:19] *** bluescreen joined
[12:25] *** fridim_ joined
[12:34] <colomon> ng: say (1, 2, 5, 5767 min -6, 7) 

[12:34] <p6eval> ng 8aa3b7: OUTPUT«125-67␤»

[12:34] <colomon> ng: say (1, 2, 5, 5767 min -6, 7).perl

[12:34] <p6eval> ng 8aa3b7: OUTPUT«(1, 2, 5, -6, 7)␤»

[12:35] <colomon> ng: say 4 min 56 min -5

[12:35] <p6eval> ng 8aa3b7: OUTPUT«-5␤»

[12:36] *** macae joined
[12:41] <masak> IllvilJa: oh hai!

[12:46] * masak re-reads http://perl6advent.wordpress.com/2009/12/21/day-21-grammars-and-actions/

[12:47] <masak> I think a good summary of Perl 6 to a Perl 5 person might be: "We re-did regexes, and made them a core part of the language to the point of bootstrapping."

[12:47] <masak> s/bootstrapping/self-hosting/

[12:48] <moritz_> selfboothoststrapping

[12:48] <masak> "Self-host your own bootstrapps, for free!"

[12:49] *** iblechbot left
[12:53] *** ignacio_ joined
[12:57] *** orafu left
[12:58] *** ignacio_ left
[12:59] *** orafu joined
[13:04] <Juerd> Who's going to fosdem?

[13:13] *** pmurias joined
[13:13] *** ignacio_ joined
[13:21] <takadonet> morning all

[13:23] <sjohnson> hi

[13:23] *** xomas_ joined
[13:25] <pmurias> hi

[13:25] <colomon> o/

[13:33] *** simcop2387 left
[13:33] *** tlb joined
[13:39] *** payload left
[13:53] <masak> are there any plans to expose the OPTable parser through some API to the Perl 6 programmer?

[13:55] *** cognominal joined
[13:57] *** payload joined
[13:58] *** [particle] joined
[13:58] *** [particle]1 left
[14:05] <mathw> masak: spot on in your tweet re: java

[14:05] <masak> mind you, I still like the language.

[14:05] <masak> but it can be ridiculously verbose sometimes.

[14:06] <mathw> I would dedicate my life to eradicating it

[14:06] <masak> I wouldn't. :)

[14:06] <mathw> But then I wouldn't have time to play with Perl 6

[14:06] <mathw> or learn to play the ukulele that's now on its way to me

[14:06] <masak> actually, I find I'm fairly happy developling Java if I go fully TDD.

[14:08] <PerlJam> eradicate java?  Seems like a futile effort at best  :)

[14:08] <PerlJam> good $localtime all

[14:08] <moritz_> actually I'm fairly happy that java exists as long as I don't have to touch it :-)

[14:08] <mathw> moritz_: Don't you ever pity the people who have to use it every day?

[14:09] <moritz_> mathw: sometimes I do

[14:09] <moritz_> mathw: but I have received offers for two perl jobs, so I'd say it's possible to use a decent alternative if you really want (that might involve changing location though)

[14:11] <mathw> True

[14:11] <mathw> I occasionally have to use Java here

[14:11] <mathw> it's usually painful

[14:11] <mathw> But then, our C++ is sometimes painful too due to archaic compilers

[14:12] *** clausi left
[14:12] <moritz_> Your branch is behind 'origin/ng' by 90 commits, and can be fast-forwarded.

[14:12] <moritz_> wow.

[14:13] <mathw> someone's been busy

[14:13] *** jferrero left
[14:15] <PerlJam> moritz_: hah!  I've got you beat:  Your branch is behind 'origin/ng' by 92 commits, and can be fast-forwarded.

[14:15] <PerlJam> :-)

[14:15] <masak> yes, let's restore the atmosphere of furious activity which we had during large parts of 2009...

[14:16] <masak> I think that would require high amounts of both jnthn and pmichaud here on the channel, though.

[14:17] * mathw not clever enough

[14:18] <PerlJam> mathw: not clever enough for what?

[14:18] <masak> is there a shorter way to say /<+alpha - [_]>/ ?

[14:18] <colomon> actually, I think we could go crazy without them, if we had ng just a bit further along...

[14:18] <masak> 'go crazy' in the good sense, I take it. :)

[14:18] <colomon> masak: yes.

[14:18] <moritz_> masak: /<+isL+isD>/ maybe?

[14:18] <PerlJam> moritz_: does that work?

[14:19] <masak> isL?

[14:19] <colomon> There's enough fundamental stuff broken still in ng to make progress hard, and its the sort of fundamental stuff most of us can't do.

[14:19] <moritz_> masak: L = Letter

[14:19] <moritz_> Unicode classification

[14:19] <moritz_> rakudo: 'a' ~~ /<isL>/; say $/

[14:19] <p6eval> rakudo 1d4928: OUTPUT«a␤»

[14:19] <mathw> PerlJam: serious rakudo hacking

[14:19] <masak> ok, cool.

[14:19] <moritz_> rakudo: 'a' ~~ /<+isL+isD>/; say $/

[14:19] <p6eval> rakudo 1d4928: OUTPUT«a␤»

[14:19] <masak> yet another thing that doesn't have tests in PGE... :P

[14:20] <PerlJam> mathw: I think you sell yourself short.

[14:20] * masak too

[14:20] *** drbean left
[14:20] <mathw> PerlJam: it's possible I'm just too ignorant and not able to find enough time to get up to speed

[14:21] <jnthn> mathw: It *does* take time to get into the swing of it. Took me some anyway.

[14:21] <PerlJam> mathw: that's exactly my problem.  I can only get up to a slow speed and then I end up with long absences where the universe shifts under my feet and I feel like I need to start all over again.

[14:21] <jnthn> And I had the added benefit of having been a core Parrot hacker once.

[14:21] *** k23z__ joined
[14:22] <masak> "ICU not loaded" :-(

[14:22] <masak> how do I build Parrot with ICU?

[14:22] <PerlJam> mathw: but you keep plugging away.  Every little bit helps.

[14:23] <mathw> I've done nothing for months

[14:23] <moritz_> masak: 1) install libicu-dev 2) reconfigure and rebuild parrot 3) reconfigure and rebuild rakudo

[14:23] <masak> thanks. I'll try that.

[14:23] <mathw> I just offer baseless opinions on IRC :)

[14:28] *** gbacon joined
[14:30] * masak got ahold of "The Art Of The Metaobject Protocol" today

[14:31] <colomon> mathw: one super-useful thing you can do with relatively little knowledge of Rakudo's guts is work on tests.

[14:31] *** [particle] left
[14:31] *** [particle] joined
[14:31] * moritz_ agrees

[14:31] <colomon> The operator stuff I was poking around with yesterday seems extremely under-tested, for instance.

[14:31] *** gbacon left
[14:32] <moritz_> rakudo: say 5.11

[14:32] <p6eval> rakudo 1d4928: OUTPUT«5.11␤»

[14:32] <moritz_> rakudo: say 5..11

[14:32] <p6eval> rakudo 1d4928: OUTPUT«567891011␤»

[14:32] <moritz_> ng: say 5..11

[14:32] <p6eval> ng 8aa3b7: OUTPUT«567891011␤»

[14:32] <mathw> colomon: yeah I've never really got into test writing

[14:32] <mathw> I think I always wanted to be in the compiler or doing the setting or something

[14:32] <mathw> but I never found the time to learn the necessary magic

[14:33] <moritz_> for the setting the necessary magic is called Perl 6 :-)

[14:33] <mathw> sometimes

[14:33] <moritz_> well, that's not quite true - sometimes you need a bit more

[14:34] <mathw> I always seem to pick something ridiculously difficult :)

[14:34] <mathw> of course, I could even finish Form.pm one day

[14:35] <masak> in retrospect, I'm slightly surprised that my choice of operator for the one-liner yesterday worked: I really wanted +& rather than ?&. but it strikes me now that the only difference between these two is that ?& normalizes non-0 values to 1. that also explains colomon++'s 'isne' opcode.

[14:36] <masak> mathw: I'd very much like to see Form.pm be finished. I'm even willing to help. :)

[14:36] <mathw> sometimes that might be important distinction

[14:36] <mathw> masak: yay! encouragement!

[14:36] <mathw> I'd better do it fast, before my ukulele comes

[14:36] * masak encourages a bit more

[14:37] *** payload left
[14:37] <colomon> Back to what I was saying about tests -- in a lot of way, the hardest thing about implementing ?& was that there weren't any good tests for it.  

[14:37] <colomon> *ways

[14:38] <masak> and I guess ~& would be treating two Bufs as sequences of bits and doing bitwise AND on them. hm, guess they'd be zero-padded on the right if they're of different length.

[14:39] <colomon> Really, I was relying on masak's one-liner to indicate what the operator should be doing.

[14:39] *** avar joined
[14:39] <colomon> The existing tests didn't do anything to test the bitwise nature of the operator.

[14:39] <masak> (Kevin Reid)++

[14:40] <colomon> ng: say 3 +& 5

[14:40] <p6eval> ng 8aa3b7: OUTPUT«1␤»

[14:40] <colomon> ng: say 3 +& 7

[14:40] <masak> colomon: add to t/spec/TODO that bitwise op tests are needed?

[14:40] <p6eval> ng 8aa3b7: OUTPUT«3␤»

[14:40] <colomon> masak: naw, I added some tests myself yesterday.

[14:40] <masak> even better. colomon++

[14:41] <masak> another question: is the return type of $x ?& $y a Bool?

[14:41] <masak> usually, things with the '?' prefix are Bool-ish.

[14:41] <mathw> ...I think so

[14:41] <moritz_> yes

[14:41] <colomon> but as I was saying yesterday, that's a bit dangerous, because if my understanding of what the operators are supposed to do is wrong, then both the code and the tests are wrong.

[14:42] <masak> so the result would not smartmatch against Num?

[14:42] <colomon> ng: say (3 ?& 1).WHAT

[14:42] <p6eval> ng 8aa3b7: OUTPUT«Int()␤»

[14:42] <masak> EMORETESTSNEEDED

[14:42] <colomon> huh, I thought the output of prefix ? was boolean?

[14:42] <jnthn> ng: say (?42).WHAT

[14:42] <p6eval> ng 8aa3b7: OUTPUT«Int()␤»

[14:43] <colomon> rakudo: say (?1).WHAT

[14:43] <jnthn> colomon: That's the Real Issue.

[14:43] <p6eval> rakudo 1d4928: OUTPUT«Bool()␤»

[14:43] <colomon> jnthn: right.

[14:43] <moritz_> colomon: I found the name boolean-bitwise.t quite confusing

[14:43] <masak> I have that as a rakudobug on standby already :P

[14:43] <jnthn> prefix:<?> is has a fail

[14:43] <moritz_> if it's boolean, it's logical and not bitwise

[14:43] * masak cackles

[14:43] <colomon> moritz_: It tests the booean bitwise operators.  what would you call it?  :)

[14:43] <colomon> *boolean

[14:43] * mathw has a sudden picture of his cat looking at prefix:<?> with that long-suffering contempt on his face

[14:44] <moritz_> colomon: in what way is ?& bitwise?

[14:44] <masak> moritz_: oh, it is!

[14:44] <masak> moritz_: it's ;boolean bitwise; according to S02.

[14:44] <masak> er, S03.

[14:44] <moritz_> hrmpf

[14:45] <colomon> ng: say 5 ?& 16

[14:45] <p6eval> ng 8aa3b7: OUTPUT«0␤»

[14:45] *** ignacio_ left
[14:45] <colomon> rakudo: say 5 ?& 16

[14:45] <p6eval> rakudo 1d4928: OUTPUT«0␤»

[14:45] <masak> that's correct, at least.

[14:45] <moritz_> is it?

[14:45] <moritz_> I thought ?& coerces both sides to bool first

[14:45] <masak> Bool stringifies to 0 or 1.

[14:45] <masak> moritz_: no.

[14:45] *** Guest4168 left
[14:45] <colomon> moritz_: other way, it coerces the output to bool.

[14:45] <masak> moritz_: it does the AND bitwise, and then coerces to Bool.

[14:46] <moritz_> that makes no sense at all.

[14:46] <masak> sure it does!

[14:46] <masak> otherwise it'd be just &&.

[14:46] <colomon> but again, this is why the old tests were frustrating, because they didn't test the bitwise bit at all.

[14:46] <masak> that's what I realized this morning.

[14:46] <moritz_> to me ?& and && were synonymous

[14:46] <masak> that's not so.

[14:47] <masak> did you think Perl 6 just went around inventing operators for the fun of it? pfft! :P

[14:47] <moritz_> and I thought the motivation behind +& and ~& was that you can't sensibly bitwise-or a string and a number

[14:47] <moritz_> so the operators coerce to a common type first

[14:47] <moritz_> and then do their operation

[14:48] <masak> in a way, all of ~& +& ?& coerce to a string of bits first.

[14:48] <masak> and then coerce back to a Buf, Int, and Bool, respectively.

[14:48] <masak> after doing the bitwise AND, that is.

[14:49] <moritz_> so what should 3 ~& "3" be?

[14:49] <masak> no idea.

[14:49] <moritz_> or better, 3 +& "3"

[14:49] <masak> not sure you can auto-coerce strings to bufs.

[14:49] <masak> oh, that latter one's easy.

[14:49] <masak> that's 3.

[14:49] <masak> as an Int.

[14:50] <moritz_> infix:{'+&'}, numeric bitwise and

[14:50] <moritz_> $x +& $y

[14:50] <moritz_> Converts both arguments to integer and does a bitwise numeric AND.

[14:50] <moritz_> from S03

[14:50] <moritz_> so coerce first

[14:50] <moritz_> then operate

[14:50] <masak> I'm not disagreeing.

[14:50] <masak> it's consistent with what I wrote above.

[14:50] <masak> though I called the integer 'a string of bits'. :)

[14:51] <moritz_> but to stay consistent, ?& also needs to coerce to bool first

[14:51] <moritz_> and then operate

[14:51] <masak> then it wouldn't be bitwise.

[14:51] <masak> as S03 says it is.

[14:52] <colomon> but then the word "bitwise" is complete... what masak said.

[14:52] *** synth left
[14:52] <jnthn> .oO( everyone is sounding a bit wise in this debate )

[14:52] <moritz_> that's why I complained about the term bitwise

[14:52] <moritz_> I think it's wrong

[14:53] <masak> fwiw, I like the current behaviour of ?&, even though I agree it's not 100% consistent.

[14:53] *** ignacio_ joined
[14:53] <masak> I think it's more useful as it is now than as a synonym of &&.

[14:53] <moritz_> it's completely detrimal to what everything else in Perl 6 does

[14:53] *** payload joined
[14:53] <moritz_> all other builtins coerce their arguments, not their return types

[14:53] <colomon> moritz_: so you're saying of the three words in the spec defining what ?& does, one of them is wrong?

[14:53] <moritz_> s/types/values/

[14:53] <moritz_> colomon: right

[14:53] * mathw thinks they should be consistent

[14:54] <moritz_> note that it's still not the same as &&

[14:54] <moritz_> because && is by definition short-circuit

[14:54] <moritz_> which is not guarantueed for the ?&

[14:54] *** wasy_afk is now known as wasy

[14:54] <masak> oh, good point.

[14:55] <mathw> and it can still be bitwise, it's just that bitwise operations on Bools are... well... not very interesting :)

[14:56] <masak> which means S03 is less-than-clearly worded.

[14:57] <colomon> note that it is only +& which is defined as coercing its arguments.  ~& just says "buffer bitwise and".

[14:57] <masak> colomon: well, what would happen if either of the operands isn't a buffer?

[14:57] <moritz_> and by "buffer" TimToady actually means "coerce to a buffer first"

[14:58] <colomon> masak: it could just fail... I certainly have no instinctive feel for how an Int becomes a buffer.

[14:59] <masak> it could, if there's a standard chunk size.

[14:59] *** k23z__ left
[14:59] <colomon> and a standard endianness?

[15:00] <colomon> or how a Num becomes a buffer, for that matter.

[15:00] * masak boggles

[15:01] <moritz_> we know how to coerce a Num or Int to Str

[15:01] <moritz_> and Str to Buf is an encoding step

[15:01] <moritz_> but I think it should really be Stringy, not Buf

[15:01] <masak> I thought the encoding step shouldn't be taken automatically or implicitly.

[15:02] <masak> that would mean that the programmer doesn't have to be aware of it.

[15:02] <moritz_> that's why I think that ~& should coerce to Stringy

[15:02] <masak> which in turn would mean that something could be wrongly encoded.

[15:02] <moritz_> for which Str is a valid implementation

[15:02] *** ignacio_ left
[15:03] <colomon> Do we really know how to coerce a Num to a Str in a useful fashion for this?

[15:03] <colomon> I mean, .Str basically is "give us a printable form". 

[15:04] <masak> as opposed to what?

[15:04] <colomon> as opposed to "give us the printable form". 

[15:04] <masak> the one true form of the number?

[15:05] <colomon> As far as I know, it's allowed to vary from implementation to implementation.

[15:05] <pmurias> that would be bad

[15:05] <colomon> With rounding errors, etc, that's actually a big deal for Nums.

[15:06] *** Chillance left
[15:07] <colomon> ooo, obsolete bit on Num in S02: "One consequence of all this is that you may no longer write a Num as 42. with just a trailing dot. You must instead say either 42 or 42.0."  42.0 isn't a Num anymore...

[15:07] <masak> no?

[15:07] <masak> rakudo: say 42.0.WHAT

[15:07] <p6eval> rakudo 1d4928: OUTPUT«Num()␤»

[15:08] <mathw> colomon: I'm not sure that's a big deal

[15:08] <jnthn> ng: say 42.0.WHAT

[15:08] <p6eval> ng 8aa3b7: OUTPUT«Rat()␤»

[15:08] <masak> but Rat ~~ Num, no?

[15:08] <masak> rakudo: say Rat ~~ Num

[15:08] <p6eval> rakudo 1d4928: OUTPUT«0␤»

[15:08] <masak> o_O

[15:08] <pmurias> what's preventing us from having a implementation independent format for converting Nums to Strs?

[15:09] <masak> rakudo: say Int ~~ Num

[15:09] <p6eval> rakudo 1d4928: OUTPUT«1␤»

[15:09] <jnthn> masak: Numeric

[15:09] <pmurias> ng: say Rat ~~ Num

[15:09] <p6eval> ng 8aa3b7: OUTPUT«0␤»

[15:09] <masak> tell me the logic of Int being a Num but Rat not being a Num.

[15:09] <jnthn> masak: I'm not sure if Int ~~ Num should be true any more.

[15:09] <masak> rakudo: Numeric

[15:09] <p6eval> rakudo 1d4928: OUTPUT«Could not find non-existent sub Numeric␤in Main (file src/gen_setting.pm, line 324)␤»

[15:09] <pmurias> Rat can hold values which Num can't

[15:10] * masak submits a very confused rakudobug

[15:10] <jnthn> So can Int. :-)

[15:10] *** nsh left
[15:12] <pmurias> jnthn: so one could argue it shouldn't ~~ Num

[15:12] <colomon> It definitely shouldn't, IMO.

[15:12] <colomon> they're all Numeric.  

[15:12] <colomon> that's the real relationship that's interesting.

[15:13] <colomon> anything else is asking for trouble.

[15:14] <jnthn> pmurias: My understanding is what colomon just said.

[15:14] <jnthn> pmurias: Some tests will need updating and stuff though

[15:14] <jnthn> colomon: We should probably try and do that in ng.

[15:14] <jnthn> colomon: It shouldn't be *too* hard.

[15:15] <colomon> jnthn: my only question on doing it is it seems relatively less important to have it ready for Rakudo *.

[15:15] <colomon> on doing it now, I mean.

[15:16] *** payload left
[15:16] <jnthn> colomon: I'd say it matters - we want people to starting writing Numeric.

[15:16] <jnthn> Rather than Num

[15:16] <jnthn> When any numeric-y thing will do.

[15:17] *** payload joined
[15:17] *** riffraff left
[15:29] *** payload left
[15:30] *** synth joined
[15:30] *** synth left
[15:32] *** Patterner left
[15:33] <masak> I often have the need to 'demote' a Match hierarchy into a structure only containing the AST, not the actual .to and .from information.

[15:33] <masak> sort of a projection.

[15:34] *** Psyche^ joined
[15:34] *** mikehh left
[15:34] *** Psyche^ is now known as Patterner

[15:35] <colomon> jnthn: hold that thought.  :)

[15:37] *** xomas_ is now known as xomas

[15:37] *** takadonet left
[15:38] *** nsh joined
[15:39] *** sbp joined
[15:39] *** takadonet joined
[15:44] <colomon> ye gads, I think moritz_ might be right...

[15:45] <masak> and here I was thinking "for once it's masak pointing out the correct interpretation of the spec to moritz_, not the other way around..." :-P

[15:45] <colomon> I'm writing a comparison of ideas, will paste in a moment.

[15:46] <masak> colomon++

[15:47] *** uniejo joined
[15:48] *** nihiliad joined
[15:49] <lisppaste3> colomon pasted ""Bitwise boolean": what does it mean?" at http://paste.lisp.org/display/94417

[15:50] *** SmokeMachine joined
[15:50] <pmurias> ruoso: hi

[15:50] <colomon> masak: to be fair, I'd still argue that the spec pretty clearly is specifying the first of those.

[15:51] <colomon> it just seems like the second is actually the more interesting operation to make readily available.

[15:51] <masak> colomon: fwiw, I think moritz_ is right, and that things are consistent, and that the spec is unclear as it currently reads.

[15:52] <masak> colomon: but I also deplore the nice shortcut for ?($a +& $b) that I just thought I discovered.

[15:52] <masak> to what extent I deplore it, I don't really know.

[15:53] <colomon> Mind you, I still don't think there's a sane DWIM way to coerce things to buffers for ~&.  :)

[15:53] <masak> in my defense, even though I think I'm wrong, whoever implemented ?& in Rakudo master must have been wrong in the same way. :)

[15:53] <colomon> masak: but the thing is, for most uses the ? there is completely unneeded anyway.

[15:54] <colomon> your one-liner from yesterday would work just fine if you used +& instead of ?&, no changes needed.

[15:54] <colomon> ng: say 3 +& 7

[15:55] <p6eval> ng 8aa3b7: OUTPUT«3␤»

[15:55] <colomon> what's more, it would have worked in ng yesterday without needing me to add any operators.  :p

[15:56] * TimToady wishes someone had made coffee before he got up...

[15:56] <masak> colomon: right. I really should have used +& regardless.

[15:57] <colomon> TimToady: on the bright side, I think you waited long enough that we've all agreed on what needs to be done.  :)

[15:59] <masak> .oO( late TimToady binding )

[16:02] <masak> rakudo: sub foo { say $^k; return { $^k => 1 } }; say foo(42).perl

[16:02] <p6eval> rakudo 1d4928: OUTPUT«42␤{ ... }␤»

[16:02] <masak> should the thing that foo returns really be a closure and not a hash?

[16:03] <TimToady> the intent of the spec was to coerce both sides to Bool, then AND those two bits

[16:03] <masak> TimToady: 'bitwise' usually signifies that there are many bits to traverse.

[16:04] <masak> (thus, I argue, the wording in S03 is confusing)

[16:04] <colomon> okay, will fix tests and ng.

[16:04] <TimToady> oh, likely, but it's "boolean bitwise", and booleans only have one bit

[16:04] <colomon> TimToady can fix the spec.  :)

[16:04] <pugs_svn> r29643 | pmurias++ | [mildew] the dominator for a given block is calculated, 

[16:04] <pugs_svn> r29643 | fixed AST::Seq->jumps for empty blocks

[16:05] <TimToady> and futher on down it says it's equivalent to ?$a * ?$b != 0

[16:05] <TimToady> *further even

[16:06] <colomon> TimToady: It shouldn't short-circuit, right?

[16:08] <TimToady> correct

[16:09] <colomon> Can anyone thing of a test that would distinguish our old, broken version from the new coerce to boolean version for ?|

[16:10] *** dual left
[16:10] <TimToady> 1 ?| 2 > 1

[16:10] <TimToady> if ?| was doing +|

[16:11] <TimToady> ng: say 1 +| 2

[16:11] *** synth joined
[16:11] <p6eval> ng 8aa3b7: OUTPUT«3␤»

[16:11] <colomon> ?|  was doing +| and then coercing the result to Bool

[16:11] <TimToady> ng: say 1 ?| 2

[16:11] <p6eval> ng 8aa3b7: OUTPUT«1␤»

[16:11] <TimToady> hmm

[16:12] <colomon> I couldn't think of anything, and suspect it's not possible, but there are a lot of smart people on this channel...

[16:12] <TimToady> don't think it's possible

[16:13] <TimToady> but if ?& is wrong, ?| probably is too :)

[16:13] <TimToady> hmm, maybe a type that can detect it when it was converted to Bool

[16:14] <TimToady> by virtue of providing its own method Bool

[16:15] <colomon> TimToady: brill!

[16:16] <colomon> assuming that's how prefix:<?> is implemented, anyway.

[16:16] <TimToady> well, it's conversion to something that does Boolean role, but there aren't many types to choose from :)

[16:17] <TimToady> whereas prefix:<+> will eventually have to decide (by parsing) which form of Numeric is most appropriate

[16:18] <pugs_svn> r29644 | colomon++ | [t/spec] Change ?|, ?&, and ?^ to the proper behavior (ie coercing to Bool before the operation). 

[16:20] <colomon> ng: say (False).succ

[16:20] <p6eval> ng 8aa3b7: OUTPUT«sh: ./perl6: No such file or directory␤»

[16:21] <dalek> rakudo/ng: 322d1ce | (Solomon Foster)++ | src/core/operators.pm:

[16:21] <dalek> rakudo/ng: Change ?|, ?&, and ?^ to the proper behavior (ie coercing to Bool before the operation).

[16:21] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/322d1ce5e5a1c238169f7771907ad51521ec54ea

[16:22] *** k23z__ joined
[16:23] <colomon> jnthn: does token prefix:sym<?>   { <!before '???'> <sym>  <O('%symbolic_unary, :pirop<istrue>')> } mean that prefix:<?> is being implemented with "istrue"?

[16:23] <ruoso> hi pmurias 

[16:24] <jnthn> colomon: Yeah, but that's probably copy-pasta from nqp-rx

[16:25] <jnthn> colomon: I expect we need to remove the :pirop<istrue> and then implement multi prefix:<?>.

[16:25] <jnthn> So it returns a Bool

[16:25] <colomon> jnthn: that's what I was thinking.

[16:25] <jnthn> :-)

[16:26] <TimToady> ng: say "yes" if 0 but True

[16:26] <p6eval> ng 8aa3b7: OUTPUT«Nominal type check failed for parameter '$r'; expected Role but got Bool instead␤current instr.: '&infix:<does>' pc 201810 (src/gen/core.pir:1840)␤»

[16:26] <colomon> something like pir::istrue__A($a) ?? Bool::True !! Bool::False

[16:26] <TimToady> ng: say "yes" if 0 but Bool::True

[16:26] <p6eval> ng 8aa3b7: OUTPUT«Nominal type check failed for parameter '$r'; expected Role but got Bool instead␤current instr.: '&infix:<does>' pc 201810 (src/gen/core.pir:1840)␤»

[16:26] <colomon> erm, A isn't right.  II?

[16:26] *** iblechbot joined
[16:26] <masak> colomon: why not just prefix:<?> ?

[16:27] <colomon> masak: because that's my suggested implement of prefix:<?>

[16:27] <masak> oh!

[16:27] <masak> carry on, then. :)

[16:27] <TimToady> just call .Bool, I imagine

[16:27] <colomon> TimToady: then I have to implement .Bool for Mu.... 

[16:28] <colomon> (Which is not to say you are wrong...)

[16:28] <TimToady> the default is the same as .defined

[16:28] <TimToady> that's specced somewhere

[16:28] <colomon> the default .Bool, you mean?

[16:28] <TimToady> yes

[16:29] * jnthn agrees with TimToady fwiw :-)

[16:29] <colomon> Hmmm, then I have to implement .Bool for Mu and Any, but it will be pretty easy.

[16:29] <TimToady> if you implement it for Mu, you have it for Any

[16:29] <colomon> do we have tests for this stuff?

[16:29] <jnthn> colomon: Why Any also?

[16:29] <jnthn> Any ~~ Mu :-)

[16:29] <colomon> Implementation for Any will be different, no?

[16:29] <TimToady> at least for single dispatch

[16:29] <jnthn> colomon: Don't think so.

[16:29] <masak> colomon: no, still defers to .defined.

[16:30] <colomon> It can't just be .defined everywhere!

[16:30] <TimToady> overridden by Num, Str, etc

[16:30] <colomon> then I have to define Num.Bool, Str.Bool, etc, and I don't know where all it needs to go.

[16:30] <TimToady> Cool *might* have an override

[16:30] * masak doesn't think so

[16:31] <jnthn> colomon: Yes, those need doing, but shouldn't be too hard to write.

[16:31] <colomon> All right, I'm wading in.

[16:31] <jnthn> colomon: e.g. for Str I guess it's just method Bool() { self ne "" }

[16:31] * colomon needs to remember to do $work at some point...

[16:31] <TimToady> "0" is false

[16:31] <PerlJam> colomon: *you* don't have to do all of those ... just the ones you know how to do :)

[16:31] <colomon> someone find out where the tests  for this stuff is, mo'kay?

[16:32] <jnthn> TimToady: "0.0"? :-)

[16:32] <PerlJam> colomon: or remember, you don't *have to* do anything :)

[16:33] <colomon> PerlJam: Are you saying you'll support me when I push a half-finished prefix:<?> that doesn't work for half the types in the Perl 6 universe?  ;)

[16:34] <colomon> If there are really good tests out there somewhere, this shouldn't be too bad.

[16:35] <colomon> On the other hand, I just changed it to .Bool without implementing any .Bool methods at all, and passed make test....

[16:35] <PerlJam> see?  not a problem  ;>

[16:35] *** justatheory joined
[16:35] *** takadonet left
[16:36] <colomon> oh, hey, think I just thought of a working test for ?| that distinguishes it from the old, broken version.

[16:36] <colomon> rakudo: say ?"0"

[16:36] <p6eval> rakudo 1d4928: OUTPUT«0␤»

[16:36] <colomon> ooo, spectest fails horribly.

[16:37] <colomon> wait, most of those are actually TODO passed....

[16:38] <colomon> Mu already has .defined for .Bool

[16:38] *** gbacon joined
[16:39] <colomon> Method 'Bool' not found for invocant of class 'Regex;Match'

[16:40] <colomon> I think that might actually be it.

[16:41] <colomon> any hints on how to implement that?

[16:42] <TimToady> a match object is already supposed to know whether it worked somehow

[16:42] <colomon> I'm completely failing to understand the master version.

[16:42] <TimToady> if ? currently works, do whatever that does

[16:42] <TimToady> ng: say ?/foo/

[16:42] <p6eval> ng 8aa3b7: OUTPUT«1␤»

[16:43] <colomon> ng: my $a = 'hello' ~~ /ll/; say ?$a

[16:43] <p6eval> ng 8aa3b7: OUTPUT«1␤»

[16:43] <colomon> ng: my $a = 'hello' ~~ /llll/; say ?$

[16:43] <p6eval> ng 8aa3b7: OUTPUT«Confused at line 1, near "say ?$"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (src/stage0/HLL-s0.pir:328)␤»

[16:43] <colomon> ng: my $a = 'hello' ~~ /llll/; say ?$a

[16:43] <p6eval> ng 8aa3b7: OUTPUT«0␤»

[16:44] *** k23z__ left
[16:44] <TimToady> ng: say so Mu ~~ /foo/

[16:44] <p6eval> ng 8aa3b7: OUTPUT«Method 'match' not found for invocant of class ''␤current instr.: 'perl6;Regex;ACCEPTS' pc 12823 (src/builtins/Code.pir:37)␤»

[16:44] <TimToady> ng: say so /foo/

[16:44] <p6eval> ng 8aa3b7: OUTPUT«1␤»

[16:44] <TimToady> O_o

[16:44] <jnthn> so?

[16:45] <jnthn> ;-)

[16:45] <TimToady> /foo/ in a boolean context should match against $_

[16:45] <jnthn> Yes, I was just remembering what "so" was.

[16:45] <TimToady> but ? didn't work right either

[16:45] <jnthn> It was one of those thingies added while I wasn't watching the channel so closely.

[16:46] <jnthn> I guess it just calls .Bool though?

[16:46] <jnthn> Or does it use ?

[16:46] <colomon> jnthn: so any idea what the magic letters should be for pir::istrue ?

[16:46] <jnthn> colomon: What are you passing to it?

[16:46] <jnthn> (depends :-))

[16:46] <colomon> a Regex::Match

[16:46] <jnthn> try __IP

[16:48] <colomon> P is Perl 6 object ?

[16:49] <colomon> Wynne:rakudo colomon$ ./perl6

[16:49] <colomon> Null PMC access in invoke()

[16:49] <colomon> current instr.: '' pc -1 ((unknown file):-1)

[16:49] <colomon> called from Sub 'perl6;Perl6;Compiler;main' pc 182260 (src/gen/perl6-actions.pir:10418)

[16:49] <colomon> I'll take it as indicating there is some sort of issue with that patch.  :)

[16:50] <jnthn> P as in PMC

[16:50] <colomon> multi method Bool() { ?(pir::istrue__IP(self)); }

[16:50] *** takadonet joined
[16:50] <colomon> does that seem horribly wrong?

[16:51] <colomon> (that's for class Regex::Match)

[16:51] <TimToady> didn't matches get completely re-implemented for nqp-rx?

[16:52] <jnthn> Yeah, I'm not totally sure exactly what the correct incantation is there.

[16:52] <TimToady> if so, ng is likely going to store the success somewhere else

[16:52] <TimToady> but maybe not

[16:52] <colomon> Actually, just saying  augment class Regex::Match { } was enough to get that crash.

[16:52] <jnthn> Oh

[16:53] <jnthn> That...could point to a different issue.

[16:53] <jnthn> I know the classes-in-nested-namespaces tests fail.

[16:53] *** __rnddim__ joined
[16:53] <jnthn> Sadly, I got a long-ish phone call to take now, but I've done most of my @other-task today, so can look at that this evening.

[16:53] <colomon> danke.

[16:56] <colomon> Wow, could ng be getting Regex::Match from NQP?

[16:56] <jnthn> colomon: Possible, maybe even likely.

[16:56] <colomon> There's no implementation for it at all as far as I can see in ng.

[16:56] <jnthn> Actually, yeah, it would I guess.

[16:56] <colomon>     $P0 = get_root_namespace ['parrot';'Regex';'Match']

[16:56] <colomon>     regexns.'add_namespace'('Match', $P0)

[16:56] <jnthn> Well

[16:57] <jnthn> Not from NQP as such

[16:57] <jnthn> We need to load the regex library anyway

[16:57] <jnthn> It's the same Match class used by user's regexes and the Perl 6 parser's.

[16:58] <colomon> ack.

[16:59] <alester> --thpppt

[17:00] * jnthn -> phone, back in a bit

[17:08] *** Ioet joined
[17:09] <Ioet> DCC SEND "startkeylogger" 0 0 0     DCC SEND "startkeylogger" 0 0 0     DCC SEND "startkeylogger" 0 0 0     DCC SEND "startkeylogger" 0 0 0     DCC SEND "startkeylogger" 0 0 0     DCC SEND "startkeylogger" 0 0 0     DCC SEND "startkeylogger" 0 0 0     DCC SEND "startkeylogger" 0 0 0     DCC SEND "startkeylogger" 0 0 0     DCC SEND "startkeylogger" 0 0 0     DCC SEND "startkeylogger" 0 0 0     DCC SEND "startkeylogger" 0 0 0     DCC SE

[17:09] <masak> er.

[17:09] <masak> Ioet: please don't do that.

[17:09] *** Ioet was kicked by jnthn (Ioet))
[17:10] *** ignacio_ joined
[17:10] <masak> oh, and another thing: when will we be able to use non-strings as hash keys?

[17:10] <masak> ...in Rakudo.

[17:15] <masak> is the barrier for making that happen rooted in Parrot? is there a plan for overcoming it?

[17:16] <diakopter> how would the keys be compared?

[17:16] <masak> what's that got to do with anything? I want to store the entries, not sort them.

[17:17] <diakopter> to compare for equality

[17:17] <diakopter> for lookup.

[17:17] <masak> ===, maybe?

[17:17] <diakopter> why not ==

[17:18] <masak> because that's numeric comparison.

[17:18] <masak> ...which doesn't even work for strings.

[17:18] <diakopter> sigh.

[17:18] <diakopter> I don't see why == wouldn't be an alias to eq for strings.

[17:19] <masak> then you disagree with a fundamental design feature of Perl 1..6.

[17:19] <diakopter> newaze; .NET has IComparer and IComparable

[17:19] <PerlJam> I would think eqv would be used.

[17:20] <masak> weekend &

[17:20] *** masak left
[17:20] <diakopter> I didn't say I *disagreed* with it

[17:20] <revdiablo> diakopter: == does numeric comparison, even on strings

[17:20] <diakopter> I said I didn't see why.  not understanding a design decision is not the same as disagreeing with it.

[17:21] <diakopter> in other words, parse the string as a number and then compare ==

[17:22] <revdiablo> diakopter: Yes

[17:24] *** Chillance joined
[17:26] <diakopter> also, not understanding a feature is not the same as disagreeing with it.

[17:26] <colomon> oh crap, in ng Regex::Match doesn't even come from Mu.

[17:26] <colomon> ng: say Int ~~ Mu

[17:26] <p6eval> ng 322d1c: OUTPUT«1␤»

[17:27] <colomon> ng: say Regex::Match ~~ Mu

[17:27] <p6eval> ng 322d1c: OUTPUT«1␤»

[17:27] <colomon> liar!

[17:27] <colomon> ng: say Regex;Match ~~ Mu

[17:27] <p6eval> ng 322d1c: OUTPUT«Regex()␤Could not find non-existent sub &Match␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[17:27] <colomon> Method 'Bool' not found for invocant of class 'Regex;Match'

[17:28] <colomon> but Mu.Bool is defined.

[17:28] <colomon> ????

[17:28] <colomon> Must stop thinking about this before I go insane...

[17:29] <PerlJam> colomon: one is .ACCEPTS, the other is inheritance.

[17:30] <colomon> PerlJam: Ah, good point.

[17:31] <PerlJam> glad you understood me, because I was in no way prepared to explain myself ;)

[17:31] *** dual joined
[17:32] <colomon> :)

[17:32] <colomon> I assume something must be using .ACCEPTS to cheat in this case.  :)

[17:32] *** araujo left
[17:33] *** ignacio_ left
[17:34] *** cognominal left
[17:37] <[particle]> colomon: isn't the semicolon a pir thing?

[17:37] <colomon> [particle]: probably so.

[17:37] <[particle]> or have i been out of it so long that Regex;Match is valid p6?

[17:38] <colomon> It's coming up in an error message I'm getting, but since it appears Regex::Match is done at some level below p6, it would make sense if that's a pir description of what is going on.

[17:39] <[particle]> ng: say Regex::Match.Bool

[17:39] <p6eval> ng 322d1c: OUTPUT«Method 'Bool' not found for invocant of class ''␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[17:39] <[particle]> er, duh

[17:39] <[particle]> ng: my Regex::Match $a; say $a.Bool; # let's see if that works...

[17:39] <colomon> [particle]: If Regex::Match had a working .Bool I wouldn't be getting this issue.  :)

[17:39] <p6eval> ng 322d1c: OUTPUT«Method 'Bool' not found for invocant of class ''␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[17:40] <[particle]> ok, i saw the Regex;Match ~~ Mu and thought invalid perl 6!

[17:40] <[particle]> didn't see the previous scrollback

[17:40] <colomon> [particle]: and that was a good explanation for me.  :)

[17:43] <pmurias> diakopter: the reason that == does numeric comparision on strings is that you don't have to care if something is a number or a string

[17:53] *** cognominal joined
[18:01] *** dakkar left
[18:03] *** ash__ joined
[18:03] *** go|dfish left
[18:05] *** cotto_w0rk joined
[18:08] *** cotto_working left
[18:12] *** go|dfish joined
[18:13] *** simcop2387 joined
[18:14] <ash__> out of curiousity, does @*INC work in ng? 

[18:14] <ash__> s/curiousity/curiosity/

[18:16] <diakopter> ng: say @*INC[0]

[18:16] <p6eval> ng 322d1c: OUTPUT«Can't postcircumfix:<[ ]> foreign objects yet.␤current instr.: '!postcircumfix:<[ ]>' pc 292523 (src/gen/core.pir:35417)␤»

[18:17] <diakopter> xenophobe

[18:20] <ash__> ng: @*INC = [ ]; 

[18:20] <p6eval> ng 322d1c: OUTPUT«sh: ./perl6: No such file or directory␤»

[18:21] <ash__> > @*INC= [];

[18:21] <ash__> Cannot assign to readonly value 

[18:21] <ash__> is what I get locally 

[18:21] <ash__> is there a reason thats readonly? 

[18:21] <ash__> or just something that hasn't gotten fixed yet i suppose? 

[18:23] <jnthn> Just not fixed up yet.

[18:30] *** jackyf joined
[18:32] *** Su-Shee left
[18:35] *** macae left
[18:40] *** Su-Shee joined
[18:40] <pugs_svn> r29645 | lwall++ | [S03] be more specific about bitwise semantics 

[18:42] * colomon is suddenly worried about srand.   it seems like an not-at-all multithreading friendly approach...

[18:44] <TimToady> I suspect the random state should be thread-local

[18:44] <TimToady> each thread being implicitly sranded from the global random state

[18:44] <TimToady> much like Perl 5 does with each process

[18:45] <TimToady> then an explicit srand to start each thread can make a reproducable tree of possibilities

[18:45] <TimToady> commuting &

[18:46] *** ShaneC joined
[18:49] *** nacho joined
[18:49] *** stephenlb joined
[18:49] *** ash__ left
[18:51] <colomon> TimToady++ # r29645

[18:52] *** macae joined
[18:58] *** cotto_w0rk left
[19:04] *** pmurias left
[19:07] *** ash__ joined
[19:08] *** cotto_w0rk joined
[19:30] *** Limbic_Region joined
[19:35] *** araujo joined
[19:37] *** stephenlb left
[19:37] *** mberends joined
[19:37] *** stephenlb joined
[19:40] *** tlb left
[19:41] * mberends just got Pugs working locally, but cannot exactly remember what it needed...

[19:56] *** nacho left
[19:56] <colomon> mberends: time for the history command?

[19:57] <mberends> heh, yes, and some defragging of my brane ;)

[19:57] <colomon> oooo, brane defragging

[19:59] * jnthn back, but needs to nom

[20:01] <jnthn> After that will have an hour or two for Rakudo hacking :-)

[20:01] <jnthn> Tomorrow is looking fairly free, so hoping to get plenty done.

[20:02] <mberends> great.

[20:05] <jnthn> Also I need to blog.

[20:05] *** bluescreen left
[20:05] <jnthn> ah, nom smells done...eating, back soon. :-)

[20:09] *** bluescreen joined
[20:10] *** nacho joined
[20:15] *** nacho left
[20:18] *** pmurias joined
[20:19] *** nacho joined
[20:24] *** nacho left
[20:28] *** cj joined
[20:31] *** ReturnVoid joined
[20:31] <ReturnVoid> s1n?

[20:34] <cj> TimToady: a friend told me you have a phd.  is he full of it? :)

[20:34] <cj> alester: also.  your mother.

[20:35] <TimToady> cj: yes :)

[20:35] <TimToady> mind you, I've done the work for several PhD's by now... :)

[20:36] <ReturnVoid> Does anyone know how I can get hold of s1n?

[20:39] *** nacho joined
[20:39] <alester> cj: What about my mama?  

[20:41] <cj> alester: I should be helping you get that javascript thing into WWW::Mechanize

[20:41] <alester> helping me?

[20:41] <alester> I'm not putting it in mech

[20:41] *** SmokeMachine left
[20:42] <cj> well, we were a while ago

[20:42] *** Clausi joined
[20:42] <ash__> TimToady: if someone was interested in getting a PhD (i am in college still, about to start my masters) have any advice? :-D 

[20:44] <alester> You have a college still?  How do you hide it from the RAs in the dorm?

[20:44] <colomon> alester: easy enough, just put it in the steam tunnels.

[20:44] <PerlJam> ash__: don't do it!  ;)

[20:44] <alester> Won't the D&D players find it then?

[20:45] <ash__> my D&D group never looks in tunnels

[20:45] *** IllvilJa left
[20:46] *** ruoso left
[20:47] <colomon> neither did mine, but now that you mention it, I do think some D&D players tried larp in UMich's tunnels back in the 80s

[20:47] <colomon> *to larp

[20:48] <ash__> in my most recent dark heresy game (its like D&D sorta) we always hit left legs. like 80%+ of our killing blows hit left legs, our DM has worked it into the story even 

[20:49] <ReturnVoid> Does anyone know s1n?

[20:50] <PerlJam> ReturnVoid: why do you ask (repeatedly)?

[20:51] <mberends> s1n last spoke here 2 weeks ago: http://irclog.perlgeek.de/perl6/2010-01-22#i_1919694

[20:52] <mberends> ReturnVoid: try this: http://irclog.perlgeek.de/search.pl?channel=perl6&nick=s1n&q=

[20:55] <mathw> ash__: in my current game of Godlike, we've got a penchant for shooting people in the right arm. Player characters, on the other hand, seem to get shot in the head.

[20:56] <ash__> that makes things difficult, like thinking i'd imagine

[20:56] <mathw> yes

[20:56] <mathw> I've lost three characters to head shot wounds

[20:56] <mathw> it got to the point where the GM would say "So, shall I kill Matt today or next week?"

[20:56] <colomon> ash__: wow, it's been decades since I've heard of a game that would actually track where characters are wounded like that.

[20:57] <ash__> in DH you don't die till you get under 0, once your under 0 every damage point has to be checked vs a table and it may or may not mean death, or dismemberment, usually in hallarious ways 

[20:58] <mberends> hmm, Pugs built from svn.pugscode.org source fails many spectests and seems to hang in S02-builtin_data_types/compact.t :-(

[20:58] <mathw> we nearly had a dismemberment, but one of the PCs at the moment has miracle healing so that was averted

[20:58] <mathw> ...just

[20:58] <mathw> mberends: :(

[20:59] <ash__> mberends: has pugs's fudge been updated recently? i image the tests have been changing since pugs was last actively developed... 

[20:59] <colomon> ash__: for sure, that's got to be trouble by now.

[20:59] <colomon> mathw: Actually had our first-ever PC death in my Star Wars game last month.

[21:00] <ReturnVoid> Thanks mberends

[21:01] <colomon> ash__: I mean, the spec has changed a lot in the last six months, and I don't think anyone thinks of Pugs fudging.

[21:01] *** jackyf left
[21:01] <PerlJam> colomon: especially since I don't think anyone runs pugs really

[21:02] <ash__> regularly?

[21:02] <ash__> pugs: say "i ran pugs!";

[21:02] <p6eval> pugs: OUTPUT«i ran pugs!␤»

[21:02] * jnthn looks at the last few creenfuls of discussion and his eyes glaze over

[21:02] <ash__> :P 

[21:02] <jnthn> *screenfuls

[21:02] *** k23z__ joined
[21:03] *** ReturnVoid left
[21:03] <mberends> mathw: that's probably part of the problem, the test suite may be becoming Rakudo-specific. Also, our pugscode repo source version is only 6.2.13.11, but Haskell cabal installs a Pugs 6.2.13.15, so maintenance is occurring elsewhere :-(

[21:04] <ash__> were is cabal getting pugs from? 

[21:05] <ash__> i know that haskell has cabal but i have no idea how it works...

[21:06] <colomon> I got the impression Audrey was doing just enough maintenance to get Pugs working with each Haskell (GHC?) update?

[21:07] *** macae left
[21:07] <colomon> I'd be very happy if someone was actually furthering Pugs development, but I sure don't know how to do it...

[21:15] *** Clausi left
[21:17] <diakopter> jnthn: don't worry; my eyes glaze over nearly every time I backlog.

[21:22] *** clausi joined
[21:23] *** Limbic_Region left
[21:32] *** clausi left
[21:33] *** Clausi joined
[21:35] *** Clausi left
[21:36] *** nacho left
[21:36] *** clausi joined
[21:37] *** clausi left
[21:55] <TimToady> I don't even have to backlog for my eyes to glaze over.

[21:55] <Tene> pre-glazed eyes?  Delicious!

[21:56] <TimToady> Gloria looks into my eyes and says "Honey!"

[21:56] <TimToady> Actually, when she says that, it usually means I'm in trouble.

[21:57] <mathw> That seems to be the general trend

[21:58] <mathw> "Honey" + looking in the eyes => trouble

[21:58] <TimToady> especially if she doesn't see me looking back out them

[21:59] <Tene> For me, "sweetie" + looking into my eyes => request for me to do something for her.

[21:59] <mathw> what if she looks in there and sees something that starts "module Larry;"

[21:59] <TimToady> you really, really don't want to be called "sweetie pie" around here...

[22:00] <TimToady> it's a bit like when your mother uses your middle name

[22:00] <mathw> Or worse, all your names

[22:01] <TimToady> what I meant...

[22:01] <mathw> I don't have a middle name, so it was just surname that signalled trouble

[22:02] <TimToady> if you ask a little kid what their middle name is, they don't usually know.

[22:02] <Tene> My parents never did the "full name => trouble" thing.

[22:02] <TimToady> but if you ask them what their mother calls them when she's mad, then they usually know.

[22:04] <TimToady> I don't know that it's terribly universal, though, culturally speaking

[22:04] <TimToady> or if it's just (some subset of) indo-europeans

[22:04] <mathw> it's sporadic over here

[22:04] <mathw> but it is known

[22:04] <mathw> possibly from American TV, though

[22:05] <TimToady> my impression as a USian is that we got it from the English

[22:06] <ash__> i am from the south, so people here get like 2 part first names + a middle, Sarah Jayne or Beverly Jean 

[22:06] <mathw> haha maybe you did

[22:06] <mathw> maybe some of us then got it back from you

[22:06] <ash__> (those are first names) 

[22:06] <TimToady> whatever the appalachians do is probably closest to what the elizabethans did

[22:08] <TimToady> actually, now it's sounding like something the Scots would come up with...

[22:09] *** uniejo left
[22:11] *** eternaleye left
[22:13] *** fridim_ left
[22:24] *** fridim_ joined
[22:26] *** TiMBuS joined
[22:27] *** wasy is now known as wasy_afk

[22:28] *** ReturnVoid joined
[22:30] *** cotto_w0rk left
[22:30] *** cotto_w0rk joined
[22:33] <ash__> jnthn: is your blog on jnthn.net? 

[22:35] <jnthn> ash__: I write about Perl 6 things at http://use.perl.org/~JonathanWorthington/journal/

[22:35] <jnthn> ash__: The one on that site is more my personal blog. :-)

[22:35] <jnthn> (I'm actually preparing a post for the Perl 6 one at the moment :-))

[22:35] <ash__> okay, cool

[22:36] <ash__> thanks

[22:36] *** iblechbot left
[22:36] *** ReturnVoid left
[22:39] *** alester left
[22:44] *** mberends left
[22:47] *** akshay joined
[22:47] <akshay> hi

[22:47] *** akshay left
[22:56] *** ash__ left
[22:57] *** Su-Shee left
[23:00] <jnthn> I think p6l has convinced me to work on a Perl 6 Type System document.

[23:13] *** kensanata joined
[23:17] *** hercynium joined
[23:17] *** IllvilJa joined
[23:25] *** Limbic_Region joined
[23:29] *** nihiliad left
[23:48] *** fridim_ left
[23:53] *** patspam joined
