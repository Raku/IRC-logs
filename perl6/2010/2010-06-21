[00:04] *** azert0x left
[00:04] *** Sarten-X joined
[00:05] <lue> afk

[00:13] *** Sarten-X left
[00:16] *** ggoebel left
[00:23] *** lest_away is now known as lestrrat

[00:24] *** Sarten-X joined
[00:28] *** cygx left
[00:33] *** Chillance joined
[00:33] *** Sarten-X left
[00:38] *** Fozo joined
[00:38] <Fozo> I was wondering how would I sign up to contribute to the devolpmet oof Perl 6?

[00:38] <Fozo> devolpment*

[00:39] <sjn> Fozo: have you looked at http://rakudo.org/how-to-help ?

[00:39] <Fozo> No I have not semm that yet I beleive here let me check it outr

[00:40] <Fozo> out*

[00:40] *** yinyin joined
[00:40] *** masonkramer left
[00:40] *** masonkramer joined
[00:42] <Fozo> Hmm I can not acess the mailing lists

[00:45] <Fozo> wait can anyone explain how all of this would work?  Do I  just submit bug reports and nothing else or do I say  give away my email and then perhaps send code contributing to the complier?  Or do  people request fetures and then people volunenteer to make these desires a reality, I really want to help make perl 6 a reality and hopefully I am not too late to join or any thing. Answers will be appreacaited

[00:46] *** kensanata left
[00:47] <Fozo> everyone here is soo quite, 

[00:47] <colomon> well, submitting bug reports is useful and easy.

[00:47] <colomon> It's also easy to get a commit bit to the spectest svn repo.

[00:47] <Fozo> okay but say I wanted to contribute to the code, or sytenx of the launguage is there I way I "sign-up" for this?

[00:48] <colomon> Working on tests is a very useful way to get started, that's what I did.

[00:48] <colomon> submitting short patches to the code is certainly doable.

[00:48] <Fozo> hmmm what do I mean? excuse if I am a complete noob

[00:48] <colomon> you don't really sign up, in general.  you just do it.

[00:49] <Fozo> yes that sounds like something I would be intertsed

[00:49] <Fozo> in*

[00:49] <Fozo> so where do I get the source  code?

[00:49] <colomon> github

[00:50] <colomon> http://github.com/rakudo/rakudo

[00:50] <colomon> instructions are on that page.

[00:50] <colomon> everyone is quiet because they're logged in but elsewhere -- in many cases, asleep.

[00:51] <colomon> (say, the Europeans) or at least having a quiet Sunday away from their computers.

[00:51] <Fozo> now is this just to contribute to the complier or the whole project?

[00:51] <colomon> I imagine a lot of the Americans are traveling to YAPC::NA, that was my day as well.

[00:52] <colomon> rakudo's source is just that.  there's also the Parrot project for the VM underlying Rakudo.

[00:52] <colomon> and the spectest suite, which is for all versions of Perl 6.

[00:53] <Fozo> hmm where is that  website, I was confused on what parrot auctally was

[00:53] <colomon> parrot.org

[00:53] <colomon> but unless you explicitly want to mess with parrot, it's easier to just let Rakudo build it for you and not worry about it.

[00:53] <Fozo> no for the suite

[00:54] <colomon> http://svn.pugscode.org/pugs/t/spec

[00:55] <Fozo> so I installed parrot and now I need a plug in?

[00:56] <colomon> how did you install parrot?

[00:56] <Fozo> I used the sourceforge main install

[00:57] <Fozo> LOoL! I'm sooo confused

[00:58] <colomon> http://github.com/rakudo/rakudo has install instructions about halfway down the page...

[01:03] <Fozo> so I need a c ide and a perl ide?

[01:03] <Fozo> I have strawberry perl

[01:05] <Fozo> wait so I have installed Parrot and all I see in my task bar is unistall parrot

[01:09] <colomon> you need a C compiler and Perl 5.8 or better, yes.

[01:09] <Fozo> okay then do I run parrot or something the instructions are rather confusing, so please excuse my most likely stupid questions

[01:10] <Fozo> okay then do I run parrot or something the instructions are rather confusing, so please excuse my most likely stupid questions

[01:12] *** Mowah left
[01:14] <colomon> do you have git?

[01:14] <Fozo> I made an account

[01:15] <colomon> errr... backing up -- what platform are you on?

[01:15] <Fozo> I made an account I think

[01:15] <Fozo> Windows

[01:17] <colomon> okay, do you have a C/C++ compiler?

[01:18] <dalek> rakudo: b98d7fa | (Solomon Foster)++ | src/core/ (2 files):

[01:18] <dalek> rakudo: Add Real.ACCEPTS.

[01:18] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/b98d7fab84c542a2c7bb524c7ad7305cf60a6e26

[01:20] *** mikwss left
[01:21] <Fozo> yes dev  c++

[01:21] <Fozo> will that work

[01:21] <Fozo> will it have any licinse issues?

[01:22] <colomon> Rakudo or Parrot don't have licenses  that might cause issues.

[01:23] * colomon wishes jnthn was here, he builds Rakudo on Windows every day...

[01:23] <Fozo> no I mean do contribute to perl do I need a spefic liscense or can free downloads work, in other words I am wondering if Dev c++ has a license that will not working for distributing perl, does perl make any money off of its disbutions that I do not know about?

[01:24] <Fozo> to*

[01:25] <colomon> The Perl Foundation doesn't make any money off of it, but there's nothing stopping someone else from making money from it -- like ActivePerl does for Perl 5.

[01:25] <Fozo> I can always use eclipise

[01:26] <Fozo> okay hold on let me check something

[01:27] <Fozo> is the GNU GPL liscense for my complier work

[01:27] *** meppl left
[01:27] <Fozo> "Status : Free Software (under the GNU General Public License) "

[01:28] <Fozo> according to my complier's website

[01:30] <Fozo> ?????????????

[01:32] *** ashleydev joined
[01:33] <Fozo> hmm 

[01:33] <Fozo> hmm

[01:33] <colomon> your compiler is GNU?

[01:33] <Fozo> I believe so

[01:34] <Fozo> unless the main site is lieing to me

[01:34] <sorear> you're repeating yourself...why?

[01:34] <Fozo> what OS are you on, I assume LInux?

[01:35] <colomon> I'm on OS X, though I build Rakudo on Linux a couple of times a month as well.

[01:35] <Fozo> sorry bad habbit excuse that

[01:35] <Fozo> so will the GNU license work in order so I can devolp 

[01:37] <sorear> GPL does not restrict how you can use the software *in any way*

[01:37] <colomon> Probably at least half of us (including me) are using GNU-based C compilers for this work.

[01:37] <sorear> you can use a GPLed compiler to write commercial software

[01:38] <sorear> the software which runs macos and the iphone is all compiled with GNU CC

[01:38] <Fozo> okay thank you

[01:38] *** xinming joined
[01:39] <sorear> also, if you want to contribute code to Rakudo you'll need to mail a signed copyright sharing agreement to TPF

[01:39] <Fozo> okay now colomon what elese will I need, thank you soo much for all of your help

[01:39] <sorear> so it's probably better to start somewhere else

[01:39] <sorear> than the compiler core, I mean

[01:40] <Fozo> hmm TPF?

[01:41] * Fozo feels very stupid

[01:41] * Fozo feels very  very stupid

[01:41] <colomon> The Perl Foundation

[01:42] *** xinming left
[01:42] <colomon> you can contribute small bits without, but for bigger stuff, yes, you need to sign their agreement.

[01:42] <Fozo> well could I email' it?

[01:42] <Fozo> well could I email' it? to them

[01:44] <Fozo> what do you mean by "small" and "bigger"?

[01:45] <Fozo> what do you mean by "small" and "bigger"?

[01:45] <Fozo> sorry

[01:46] <sorear> do you realize that every time you type a line twice, it gets forwarded to 172 people who then have to look at both copies?

[01:46] <colomon> I'm not sure what the dividing line is, but I know I contributed several small patches before sending my form to them.

[01:46] <Fozo> Sorry, I will stop doing that

[01:47] *** yinyin left
[01:47] *** xinming joined
[01:47] <Fozo> Okay so I can just add like one small feture at a time to see if it is right for me? and then sign this  contract and mail it?

[01:48] *** TiMBuS joined
[01:48] *** molaf_ joined
[01:49] <sorear> Fozo: yes

[01:49] <sorear> the best thing you can do is just lurk here for a while

[01:49] <sorear> when you see something interesting, JUMP ON IT

[01:49] <Fozo> okay then I have a C complier and parrot now what in theory would be my next step

[01:49] *** whiteknight left
[01:49] <Fozo> hmmm okay

[01:50] <colomon> you need git

[01:50] <colomon> not just github, but actual git software for your machine

[01:51] <Fozo> oh okay where would one install such a sosftwear

[01:51] <Fozo> ???

[01:51] <colomon> http://help.github.com/

[01:51] <colomon> look at install git link there.

[01:51] *** yinyin joined
[01:52] *** molaf left
[01:55] <Fozo> okay now I have that installing

[01:56] <Fozo> all done

[01:57] <Fozo> what is the next step?

[01:58] <colomon> you have a perl 5?

[01:59] <Fozo> I installed strawberry perl 

[01:59] <Fozo> so I think I do

[01:59] *** patspam joined
[02:00] <colomon> strawberry should be fine.

[02:00] <colomon> then you need to do the equivalent of 

[02:00] <colomon> git clone git://github.com/rakudo/rakudo.git

[02:01] <colomon> Not sure how to do that with Windows git.

[02:01] <colomon> might just be a matter of typing that at the command line.

[02:02] *** yinyin left
[02:02] *** yinyin joined
[02:03] <Fozo> wait I have the git gui but the problem is do I have to install a certain file?

[02:03] <Fozo> what do I clone?

[02:04] <Fozo> I c that you contributed just recently

[02:04] *** [mark] joined
[02:07] <colomon> while we were talking

[02:08] <colomon> what you are cloning is git://github.com/rakudo/rakudo.git

[02:08] <Fozo> wait what I put that in a browswer?

[02:08] <colomon> no

[02:09] <colomon> on the command line, you just say

[02:09] <colomon>     git clone git://github.com/rakudo/rakudo.git

[02:10] <Fozo> okay 

[02:14] <Fozo> who uses git on  windows here?

[02:15] <Fozo> rrgh why is this so hard

[02:17] <Fozo> it did not wotk 

[02:17] <Fozo> work*

[02:19] <Fozo> can anyone help me with this

[02:19] <Fozo> ??????

[02:22] <Fozo> hmmm I wish I could contribute to perl, but whatever thank you everyone for all of your help but I think I'm gonna lave

[02:22] <Fozo> leave*\

[02:24] *** Sarten-X joined
[02:25] *** Sarten-X is now known as SartenX

[02:26] <TiMBuS> Fozo, I can try to help if you want

[02:26] <TiMBuS> i know git for windows is a bit annoying

[02:26] *** yinyin left
[02:27] *** agentzh joined
[02:27] <Fozo> thanks

[02:27] <Fozo> TImBus how do I clone the repsoitory

[02:27] <TiMBuS> well that depends on what git you are running

[02:28] <TiMBuS> TortoiseGit?

[02:28] <Fozo> umm

[02:28] <Fozo> I think mysgit

[02:28] <TiMBuS> ah, so you need to run it from the command line

[02:28] <Fozo> I have a GIt Gui thing

[02:28] <Fozo> but I will install what ever is the easiest to teach me

[02:29] <TiMBuS> sorry im just looking for what gui thing you could mean so i can see it

[02:29] <Fozo> SO TImBus it is up to you

[02:30] <Fozo> I will get tortiseGIt if you wish

[02:30] *** yinyin joined
[02:31] <TiMBuS> it might be easiest, unless you're familiar with using the dos command line

[02:32] <colomon> TiMBuS++

[02:34] <Fozo> not too much only a bit so let me get it

[02:35] <TiMBuS> sure. don't uninstall msysgit though! its needed by tortoisegit

[02:36] <Fozo> TImBus thank you for  your help

[02:36] <TiMBuS> no problem

[02:36] <Fozo> colomon thank you too

[02:37] <Fozo> okay TimBus what now ( I  Say your name so you will get a notice if you swap windows)

[02:37] <Fozo> sorry 

[02:38] <Fozo> I no it is very annoying I apoligize

[02:38] <TiMBuS> thats fine

[02:39] <Fozo> umm what do I do now that it is installed?

[02:40] <TiMBuS> you want to make tortoise clone the rakudo repository.

[02:40] <TiMBuS> its relatively simple

[02:40] <Fozo> yes I want to join the devolpment of perl 6 and I was told I needed to do that as my next step

[02:41] <TiMBuS> i think tortoise has installed a right-click menu when you click on a directory in explorer

[02:41] <Fozo> okay go ahead TIMBus

[02:41] <Fozo> What do you mean?

[02:42] <TiMBuS> when you right-click a dirctory, or your desktop, there should be options for tortoisegit

[02:42] <Fozo> I don't have the directory to clone

[02:43] <Fozo> I don't know what to clone!

[02:44] <TiMBuS> thats ok. the first thing you need is to find tortoisegit's 'clone' option. it might be in the main gui

[02:45] <TiMBuS> http://vimeo.com/9984118 according to this video, you merely need to right click in any directory (you can make your own) and the 'clone' option is there

[02:46] <Fozo> Colomon what is the thing I want to clone?

[02:46] <TiMBuS> git://github.com/rakudo/rakudo.git is the url

[02:47] <Fozo> ty

[02:47] <Fozo> sucuss

[02:47] <Fozo> now what is the next thing that I must do

[02:47] *** alester joined
[02:48] <TiMBuS> well for now, you should have rakudos source code

[02:49] <Fozo> right I think I do I also have parrot and I also have a complier for C  and I have strawberry Perl

[02:49] <TiMBuS> thats good, then you'll need to configure and build rakudo.

[02:50] <TiMBuS> to do that, go into rakudo's directory (the one you just cloned)

[02:50] <TiMBuS> you'll need to run Configure.pl first. it should work just by double clicking it (i hope)

[02:51] <TiMBuS> itll pop up a window for a second and then close, hopefully because it worked

[02:53] <TiMBuS> and now we hit unknown territory because i have no idea how the windows 'make' works =/. where is fperrad when i need him

[02:56] <Fozo> no the Pl file just gives me a txt file

[02:56] <TiMBuS> oh i see

[02:57] <TiMBuS> well, youll need to use the command line to run it. hold 'shift' and then right click a blank spot in the folder so you get an extended right click menu

[02:58] <Fozo> okay what do I do there?

[02:58] <TiMBuS> and click 'open command prompt here'

[02:59] <TiMBuS> i'm assuming you are using vista or windows 7

[03:00] <Fozo> nope XP ftw

[03:00] *** lestrrat is now known as lest_away

[03:00] <TiMBuS> ah damn. you'll need to goto start->run and type cmd then

[03:02] <Fozo> yah you should of said open comand prompt

[03:02] <Fozo> let me guess

[03:02] <Fozo> let me guess I need to cd it to that folder?

[03:02] <TiMBuS> yep thats it

[03:03] <Fozo> k now what?

[03:03] <TiMBuS> type 'perl Configure.pl'

[03:04] <Fozo> it came up with an error

[03:04] <TiMBuS> perl isnt a valid command?

[03:05] <Fozo> no it said 'parrot install' was not

[03:05] <TiMBuS> oh

[03:06] <TiMBuS> but you installed parrot? thats not good :/

[03:06] <Fozo> I think I  did

[03:07] <TiMBuS> on linux you can install parrot for using rakudo, and another parrot for making rakudo.

[03:07] <TiMBuS> is there another option in the parrot install to install the 'developer' parrot?

[03:08] <TiMBuS> I'm just guessing here, I wouldnt know

[03:09] <Fozo> hmm I'm confused I dunno

[03:09] <TiMBuS> this would go a bit easier if i still used windows

[03:10] <TiMBuS> i can't really solve this one on my own, but i'm sure there are others in here who develop rakudo on windows! sorry i could only get this far for you

[03:11] <TiMBuS> but at least you have rakudo's source code, so you can at least look at it, if that's what your aim was

[03:12] <Fozo> LOoL! well ty all of you

[03:13] <Fozo> where is the source any way

[03:13] *** justatheory left
[03:14] <TiMBuS> you can also probably write perl6 code since I think parrot comes with rakudo.

[03:14] <TiMBuS> the source should be in src

[03:15] <Fozo> how do I view .pm files

[03:15] <TiMBuS> just in a text editor

[03:15] <TiMBuS> i hear notepad++ is good

[03:19] *** Fozo left
[03:26] *** Fozo joined
[03:26] <Fozo> I'm back TimBus

[03:27] <Fozo> how do I read the src files

[03:32] *** Fozo left
[03:34] *** Fozo joined
[03:35] <TiMBuS> Fozo, all of them should be text files. .pm files are written in perl 6

[03:37] <Fozo> wait I don't see really any text files only .pm

[03:37] <sorear> .pm is a kind of text

[03:37] <Fozo> how do I open them?

[03:37] <sorear> use a text editor

[03:38] <sorear> 22:15 < TiMBuS> i hear notepad++ is good

[03:38] <sorear> having not used windows in seven years I can't comment myself

[03:39] <TiMBuS> i remember i used to write c code in plain old notepad. i don't recommend it

[03:40] <Fozo> hmmm so now what is the point of doing configure.perl?

[03:40] <sorear> the rakudo code won't open in notepad anyways unless microsoft seriously improved it in the last seven years

[03:41] <sorear> configure.pl sets up rakudo so you don't have to

[03:41] <Fozo> an I set it up manually it won't work for me

[03:41] <sorear> you'll need to be more specific

[03:41] <sorear> "it won't work" is fine if I'm standing over your shoulder

[03:41] <sorear> but I'm not

[03:42] <Fozo> it opens up in plain  notepad

[03:42] <Fozo> it does nothing just pops open a txt file

[03:43] <TiMBuS> configure.pl is a text file that perl runs

[03:43] <Fozo> oh then how do I run it in perl

[03:45] *** plobsing left
[03:46] *** plobsing joined
[03:48] <sorear> open a command prompt

[03:48] <sorear> type "perl configure.pl --gen-parrot"

[03:50] <Fozo> it did not work it said retry using the same command or the other one I tried

[03:51] *** tedv left
[03:51] <sorear> Did you follow the directions it gave?

[03:52] <Fozo> what instrutions I did follow the one the comand prompt said

[03:53] <sorear> There isn't enough punctuation in that sentance for me to figure out what words are connected to what.

[03:55] <Fozo> what instrutions? I did follow the ones that were given by the comand prompt.

[03:55] <Fozo> **

[03:57] <sorear> And what happened when you followed them?

[03:59] <Fozo> nothing same message

[04:00] <TiMBuS> whats the message exactly? that parrot can't be found?

[04:02] <Fozo> okay hold on it is rather long

[04:04] <sorear> http://paste.lisp.org/new/perl6

[04:04] <sorear> use this

[04:06] <Fozo> "to automaticly checkout(svn) and build a copy of parrot r47723 try re-running configure.pl with the '--gen-parrot' option.  or use '--parrot-config' option to specify the location of parrot_config to be used to build Rakudo Perl."

[04:08] *** patspam left
[04:12] *** supernovus joined
[04:13] <sorear> Fozo: what was the command you typed to get that output?

[04:13] <sorear> perl6: say int.^parents

[04:13] <p6eval> elf 31394: OUTPUT«Unknown rule: dotty:.^␤It needs to be added to ast_handlers.␤ at ./elf_h line 2850␤»

[04:13] <p6eval> ..pugs: OUTPUT«*** No such method in class Class: "&parents"␤    at /tmp/kv2lx3k5tq line 1, column 5 - line 2, column 1␤»

[04:13] <p6eval> ..rakudo b98d7f: OUTPUT«Could not find sub &int␤  in main program body at line 11:/tmp/NSTT0GKKIc␤»

[04:14] <Fozo> perl configure.pl 

[04:14] <Fozo> and then what you recomend

[04:14] <sorear> 22:48 <@sorear> type "perl configure.pl --gen-parrot"

[04:14] <sorear> ah

[04:14] <Fozo> and then

[04:14] <Fozo> perl configure.pl --parrot-config

[04:15] <sorear> "or" does not mean "do both"

[04:15] <sorear> you should only have run perl configure.pl --gen-parrot

[04:15] *** s1n joined
[04:15] <sorear> what happened when you ran that?

[04:16] <TiMBuS> im going to guess it cant find svn ._.

[04:16] <Fozo> what is svn I don't think I got that

[04:17] <TiMBuS> fperrad should bundle his toolchain as a zip

[04:18] <Fozo> what can I have a link?

[04:18] <sorear> google "svn"

[04:18] <sorear> it's the first link

[04:20] <Fozo> apache thing?

[04:20] <sorear> yes

[04:24] <Fozo> where is download on the site?

[04:26] *** Fozo_ joined
[04:28] *** JimmyZ joined
[04:28] <Fozo_> so where is download I did not see  one?

[04:28] <JimmyZ> rakudo builds failed on Windows ...

[04:29] *** Fozo left
[04:29] <supernovus> http://subversion.apache.org/packages.html

[04:29] *** Fozo joined
[04:30] *** Fozo__ joined
[04:30] <Fozo__> sorry missed it agian

[04:31] <Fozo__> sorry missed it agian because I failed twice on my internet

[04:31] <supernovus> Fozo: http://subversion.apache.org/packages.html 

[04:33] *** Fozo_ left
[04:33] *** Fozo left
[04:36] <Fozo__> which package?

[04:38] <supernovus> Fozo__: There are several different versions. Here is the CollabNet client-only release for Windows: http://www.open.collab.net/servlets/OCNDirector?id=CSVN1.6.11WINC

[04:40] <Fozo__> is this one the only one I can use?

[04:40] *** JimmyZ left
[04:43] *** yinyin left
[04:45] <supernovus> There are many different command-line subversion clients for Windows. I picked the CollabNet one as it was on the top of the list on the Apache page. I haven't used subversion on Windows, but I do know CollabNet was the company that originally created subversion (svn) so I would assume their package would be a good choice :-)

[04:46] <Fozo__> okay it is just that they have a whole regrestaration process thatr I do not want to go thru

[04:46] <sorear> Please, out of respect for the other 174 people here, be concise.

[04:48] <supernovus> Fozo__: Here's another subversion client from "slik". It does not require registration. http://www.sliksvn.com/pub/Slik-Subversion-1.6.11-win32.msi

[04:52] <Fozo__> thx but I have one

[04:52] <Fozo__> now what did I just install?

[04:52] *** yinyin joined
[04:54] <Fozo__> okay now I have  a new error

[04:55] <sorear> Good! That means you've made prgress.

[04:56] <supernovus> In the current rakudo is 'constant' implemented?

[04:58] *** synth left
[05:08] <sorear> rakudo: constant $pi = 3.14; say $pi;

[05:08] <p6eval> rakudo b98d7f: OUTPUT«===SORRY!===␤Symbol '$pi' not predeclared in <anonymous> (/tmp/7Vyod4hBg_:11)␤»

[05:08] <sorear> rakudo: constant pi = 3.14; say pi;

[05:08] <p6eval> rakudo b98d7f: OUTPUT«Could not find sub &constant␤  in main program body at line 11:/tmp/DIvtnFvGi4␤»

[05:08] <supernovus> well, that's the same results I'm getting

[05:08] <supernovus> I tried different scopes too

[05:08] <Fozo__> for me it does not run lke 194

[05:09] <supernovus> rakudo: our constant $pi = 3.14;

[05:09] <p6eval> rakudo b98d7f: OUTPUT«===SORRY!===␤Malformed our at line 11, near "constant $"␤»

[05:09] <supernovus> rakudo: my constant pi = 3.14;

[05:09] <p6eval> rakudo b98d7f: OUTPUT«===SORRY!===␤Malformed my at line 11, near "constant p"␤»

[05:12] <Fozo__> well thanks every one bed But I am going to log, and I guess I just won't devolope for perl 6 you guys have enough staff I presume allready :(

[05:13] <lue> We could always use more! Feel free to help in any way you can! :)

[05:13] <Fozo__> I would if I could but I can't

[05:14] <Fozo__> I really don't even have any experence with making launguages and perl in general

[05:15] <Fozo__> but alas

[05:16] <supernovus> Fozo__: Not all contributors need to be core language developers. There are many different ways you could help out. I'm sure we can help you get Rakudo running. Then you'll be able to experiment with the language itself, which is the best way to start with Perl 6.

[05:17] <Fozo__> well i dunno cya

[05:17] <Fozo__> thank you all!

[05:18] * Fozo__ goes to close the window

[05:18] *** Fozo__ left
[05:18] *** lest_away is now known as lestrrat

[05:21] *** alester left
[05:22] <supernovus> no paste bot atm?

[05:34] <sorear> nope

[05:35] <sorear> it was turned into a spam vector, so we removed it

[05:35] <supernovus> Ah, okay. Well then: http://paste.lisp.org/+2E5R

[05:37] *** orafu left
[05:37] *** orafu joined
[05:37] *** Su-Shee joined
[05:46] <supernovus> oh nice, I'm getting a lot of "Method 'key' not found for invocant of class String" errors in all sorts of places...

[05:46] <supernovus> rakudo: say %*ENV.perl

[05:46] <p6eval> rakudo b98d7f: OUTPUT«Method 'key' not found for invocant of class 'String'␤  in 'Any::join' at line 4315:CORE.setting␤  in 'EnumMap::perl' at line 4321:CORE.setting␤  in main program body at line 11:/tmp/HlpvZrMFUM␤»

[05:53] <supernovus> It seems some of the magic variables such as %*ENV and %*VM have a few issues yet...

[05:54] <supernovus> rakudo: for %*ENV.kv -> $k, $v { say "$k = $v" }

[05:54] <p6eval> rakudo b98d7f: OUTPUT«Method 'key' not found for invocant of class 'String'␤  in main program body at line 4315:CORE.setting␤»

[06:13] <supernovus> Unrelated, but augmenting Hash appears to have some issues as well.

[06:14] <supernovus> rakudo: use MONKEY_TYPING; augment class Hash { method has { say "CAN HAS" } }; my %h; %h.has();

[06:14] <p6eval> rakudo b98d7f: OUTPUT«Method 'has' not found for invocant of class ''␤  in main program body at line 11:/tmp/DAiougOILe␤»

[06:15] <sorear> TimToady: ping

[06:18] *** Chillance left
[06:24] *** PZt left
[06:32] *** rgrau left
[06:41] <dalek> rakudo: c6a829d | moritz++ | docs/ChangeLog:

[06:41] <dalek> rakudo: add "handles" to ChangeLog

[06:41] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/c6a829d69bed073934c596680933bdef944f6d39

[06:47] *** casan joined
[06:52] <Tene> supernovus: I committed some fixes for %*VM today.  Can you confirm whether there are still issues with %*VM in the latest rakudo?

[06:52] <Tene> rakudo: say %*VM.perl

[06:52] <p6eval> rakudo b98d7f: OUTPUT«Cannot substr on a null string␤  in 'Pair::perl' at line 1␤  in <anon> at line 4321:CORE.setting␤  in 'Any::join' at line 1␤  in 'EnumMap::perl' at line 4321:CORE.setting␤  in 'Pair::perl' at line 4078:CORE.setting␤  in <anon> at line 4321:CORE.setting␤  in 'Any::join' at line

[06:52] <p6eval> ..1␤  …

[06:52] <Tene> Huh.

[06:52] <Tene> rakudo: say %*VM<config>.perl

[06:53] <p6eval> rakudo b98d7f: OUTPUT«Cannot substr on a null string␤  in 'Pair::perl' at line 1␤  in <anon> at line 4321:CORE.setting␤  in 'Any::join' at line 1␤  in 'EnumMap::perl' at line 4321:CORE.setting␤  in main program body at line 11:/tmp/C1xUhPMs7k␤»

[06:53] <Tene> rakudo: say %*VM<config><build_dir>

[06:53] <p6eval> rakudo b98d7f: OUTPUT«/home/p6eval/rakudo/parrot␤»

[06:53] <Tene> rakudo: say %*VM<config>.WHAT

[06:53] <p6eval> rakudo b98d7f: OUTPUT«Hash()␤»

[06:55] <moritz_> rakudo: say %*VM<config>.keys.join(' ')

[06:55] <p6eval> rakudo b98d7f: OUTPUT«mandir has_sigaction icu_dir HAS_GETTEXT osname i_signal encoding libparrot_ldflags cc_o_out has_static_linking runcore_tests HASATTRIBUTE_COLD gccversion has_extra_nci_thunks ld_debug rpath_blib clock_best make msvcversion installed pmc has_opengl i_sysexit a

[06:55] <p6eval> ..ccwarn::src/spf_rende…

[06:57] *** PZt joined
[07:06] *** tadzik joined
[07:07] *** casan left
[07:34] <pugssvn> r31395 | sorear++ | [STDeco] Tie up a loose end from the pad->lex rename 

[07:34] *** supernovus left
[07:36] <sorear> How much rule of least suprise violation would it cause if BEGIN time code ran slower than runtime code?

[07:37] <moritz_> you just have to sell it better

[07:37] <moritz_> "run time code is now much faster than BEGIN"

[07:41] <moritz_> hugme: add qiuhw to book

[07:41] * hugme hugs qiuhw. Welcome to book!

[07:42] <mathw> (footnote: accomplished by making BEGIN slower)

[07:43] *** pnate left
[07:47] *** Mowah joined
[07:49] * mberends just eated a kanelbulle irl :)

[07:50] <mathw> kanelbulle?

[07:50] <moritz_> sounds like some swedish stuff

[07:50] <mberends> it's a cinnamon bun, shaped like an @

[07:51] <moritz_> doughnutpretzel? :-)

[07:53] <mathw> oooh

[07:54] <mathw> we have those here sometimes

[07:54] <mathw> lovely things

[07:54] *** tadzik left
[07:54] <dalek> book: 1126727 | (Hongwen Qiu)++ | src/subs-n-sigs.pod:

[07:54] <dalek> book: [subs] fix typo

[07:54] <dalek> book: Signed-off-by: Moritz Lenz [email@hidden.address]
[07:54] <dalek> book: review: http://github.com/perl6/book/commit/1126727e03bd6cd3c5dfa1bf92605631fc9b380f

[07:54] *** Mowah left
[08:02] *** pnate joined
[08:14] *** kensanata joined
[08:16] *** dakkar joined
[08:17] *** cosimo left
[08:22] *** yinyin left
[08:27] <pugssvn> r31396 | sorear++ | [Cursor] A more platform neutral way to recurse the parse 

[08:27] *** cygx joined
[08:28] <cygx> moritz_: hi

[08:30] *** thebird joined
[08:31] <moritz_> cygx: hi

[08:31] <moritz_> cygx: I saw your nopaste in the backlog... do you have a github ID?

[08:33] <cygx> no, just a mercurial account at intuxication.org

[08:33] <cygx> that can be remedied, though

[08:33] *** plobsing left
[08:33] <moritz_> great

[08:33] <sorear> mildew: say int.^methods

[08:33] <p6eval> mildew: OUTPUT«Can't open perl script "mildew": No such file or directory␤»

[08:33] *** Woody2143 left
[08:34] <moritz_> how can perl know it's a perl script if it doesn't exist? :-)

[08:34] <mathw> Because it assumes that you won't be asking it to run something written in Lisp, I guess

[08:35] <cygx> it's quantuum ;)

[08:35] <mathw> Very narrow-minded of it

[08:36] <cygx> ok - that's me: http://github.com/cygx

[08:36] <moritz_> hugme: add cygx to try.rakudo.org

[08:36] * hugme hugs cygx. Welcome to try.rakudo.org!

[08:37] <moritz_> cygx: you can now  git clone http://github.com/moritz/try.rakudo.org

[08:37] <arnsholt> mathw: Well, that's part of the problem Perl 6 aims to solve, no? ^^

[08:37] <moritz_> cygx: incorporate your changes, commit and push

[08:37] <moritz_> and profit!

[08:38] <mathw> arnsholt: of course, there'll be no need for Lisp anymore :)

[08:38] <cygx> moritz_: thanks

[08:38] <moritz_> cygx: thank you for contributing!

[08:42] *** sdo_ joined
[08:42] <jnthn> morning

[08:43] <mathw> I've been here too long

[08:43] <moritz_> morning jnthn 

[08:43] <mathw> I'm trying to write some Perl 5 and I keep getting frustrated that I don't have gather/take

[08:43] <moritz_> of course there's Perl6::GatherTake

[08:43] <mathw> It feels so *clumsy*

[08:43] <moritz_> (but it sucks. I'm the author, so I'm entitled to that opinion :-)

[08:44] *** sdo_ left
[08:48] *** |jedai| joined
[08:48] *** jedai left
[08:49] *** sdo joined
[08:52] *** azawawi joined
[08:52] *** azawawi left
[08:52] *** azawawi joined
[08:52] <azawawi> moritz_:ping

[08:52] <sorear> azawawi!

[08:52] <moritz_> azawawi: pong

[08:53] <azawawi> moritz_: re http://perlgeek.de/blog-en/perl-6/contribute-now-try.rakudo.org.html, i think we can reuse a lot of the already-working runpugs console javascript code

[08:53] <sorear> azawawi: What should I do with a 31KB binary data file that STD needs to be able to find?

[08:53] <azawawi> sorear: the utf8 data file?

[08:53] <moritz_> azawawi: wfm

[08:54] <sorear> it's a Unicode data file

[08:54] <sorear> not specifically utf8

[08:54] <sorear> but yeah

[08:54] *** Mowah joined
[08:54] <azawawi> sorear: include it via PERL6LIB ?

[08:55] <azawawi> sorear: one of things that i hate the most about STD is the use of the / namespace

[08:55] <azawawi> sorear: it should be inside a good Perl6::STD or something

[08:56] <azawawi> sorear: $PERL6LIB/data ?

[08:56] <sorear> yeah, sounds good

[08:56] <azawawi> moritz_: cool i'll try it

[08:57] <sorear> it's in the root namespace because they are specced parts of Perl 6 itself

[08:57] <moritz_> azawawi: maybe coordinate with cygx, who also had some running js code

[08:57] <sorear> any full Perl 6 compiler will support use STD;

[08:57] <sorear> and Cursor is the implicit base class of all grammars

[08:58] *** dju joined
[09:00] *** dju left
[09:00] *** dju joined
[09:01] *** globalmixmaster_ joined
[09:01] <globalmixmaster_> hi all

[09:02] <globalmixmaster_> can i optimize this http://pastebin.com/UKJAhBHz

[09:02] <globalmixmaster_> with perl6?

[09:02] <moritz_> globalmixmaster_: it won't do you any good, because perl 5 is currenlty faster than all Perl 6 compilers

[09:03] <moritz_> globalmixmaster_: I'd use C if were you

[09:03] <globalmixmaster_> ok ty

[09:03] *** globalmixmaster_ left
[09:04] <sorear> haha

[09:04] <TiMBuS> what,

[09:05] <sorear> hmm.

[09:06] <azawawi> sorear: sounds good then... one thing to watch for if we go for $PERL6LIB/data is accidentally polluting other namespaces...

[09:06] <sorear> foo; means foo(); means &foo.(); means postcircumfix:<( )>(&foo); means &postcircumfix:<( )>.(&foo)

[09:06] <sorear> where does the circularity saw stop?

[09:06] <sorear> azawawi: I'm just putting it in $PERL6LIB directly

[09:07] <azawawi> sorear: great thx

[09:07] <colomon> TiMBuS: thanks for helping that guy last night.

[09:07] <TiMBuS> thats ok. i'm still unsure as to how he wanted to help, but i couldnt turn him away

[09:07] <pugssvn> r31397 | sorear++ | [Cursor] Look for Unicode bits in $PERL6LIB.  azawawi++ 

[09:14] *** azert0x joined
[09:16] *** mac joined
[09:16] *** mac left
[09:17] *** azawawi left
[09:22] *** foodoo joined
[09:23] <pugssvn> r31398 | sorear++ | [STDeco] Add 'make dist' target for the benefit of Syntax::Highlight::Perl6 

[09:25] <colomon> is S::H::p6 still getting updated?

[09:26] <sorear> I should hope so

[09:26] <sorear> azawawi all but asked me to do that

[09:27] <colomon> sweet

[09:30] *** mmcleric joined
[09:40] <moritz_> yesterday's blog post about physical modelling in Perl 6 attracked about 3k visitors

[09:41] <jnthn> Wow!

[09:41] <arnsholt> A grammar (NQP-rx) conundrum for your amusement:

[09:41] <arnsholt> moritz_: Awesome!

[09:41] <jnthn> moritz_++

[09:41] <colomon> moritz_++

[09:41] <jnthn> .oO( I hope not too many of them came expecting to look at pictures of the other sort of models... :-) )

[09:41] *** moritz_ sets mode: +oo colomon arnsholt

[09:41] <arnsholt> :- can be three things: an atomic term, a prefix operator and an infix operator

[09:42] <moritz_> jnthn: :-)

[09:42] <arnsholt> How on earth do I get "a :- b", ":- a" and "X = :-" to parse correctly, all at the same time

[09:42] <arnsholt> ?

[09:43] <moritz_> sub infix:<:-> { <sym> }

[09:43] <arnsholt> If I kill the prefix variant I get the other two, but I really need the prefix as well

[09:43] <moritz_> erm, multi sub infix:sym<:-> { <sym> }

[09:43] <moritz_> multi sub term:sym<:-> { <sym> <EXPR>? }

[09:44] <moritz_> (maybe needs to constrain the precdence of what <EXPR> is allowed to match)

[09:44] <sorear> arnsholt: you'll need to decide how :- :- :- is supposed to parse

[09:44] <jnthn> Maybe a bit like * * * in Rakudo. ;-)

[09:44] <sorear> * in rakudo isn't a prefix op

[09:45] <arnsholt> sorear: I can't remember how it's supposed to go off-hand (it's Prolog FWIW)

[09:45] <sorear> yeah, I recognize the samples

[09:45] <arnsholt> Yeah, it's the prefix op that really makes trips me up

[09:46] <moritz_> it kinda messes up the predicitve parsing

[09:46] <jnthn> No, true. Rakudo has examples of things that are prefix and infix, as well as infix and term, but not all three.

[09:46] <moritz_> because after a :- either a term or an infix can occur

[09:46] <jnthn> Well

[09:46] <jnthn> [+] can show up as any of

[09:46] <jnthn> [+] @thingy

[09:46] <jnthn> [+] # with nothing after it

[09:46] <jnthn> $a [+] $b

[09:47] <moritz_> rakudo: say [+]

[09:47] <p6eval> rakudo c6a829: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<[ ]>, couldn't find final ']' at line 11␤»

[09:47] <jnthn> Though we don't get the middle case right in Rakudo yet.

[09:47] <moritz_> jnthn: but don't parse it :-)

[09:47] *** am0c left
[09:47] <jnthn> moritz_: Yeah, STD looks like it lies to the OPP about being a term or something. ;-)

[09:47] <jnthn> Or something tricky.

[09:47] <jnthn> Anyway, may be worth looking at how STD does it.

[09:47] <moritz_> arnsholt: I'd try parsing it as infix or term, where the term can optionally swallow up another term

[09:48] <arnsholt> sorear: ":- :- :- ." gives me "Operator priority clash" after the first :- in SWI Prolog

[09:48] <arnsholt> moritz_: Won't the optional EXPR after the term mess up the rest of the parse?

[09:49] <moritz_> arnsholt: why should it?

[09:49] <moritz_> you have to go looking for *something* after a :-

[09:49] <arnsholt> Heh, true

[09:49] <moritz_> you can make that either a term or an infix

[09:50] <moritz_> term with <EXPR>?, infix with <EXPR>??

[09:51] <arnsholt> How do those limit to term and infix?

[09:52] <moritz_> with <EXPR>? the first attempt will be to match an EXPR (ie new term, with optional prefixes)

[09:52] <moritz_> with <EXPR>?? it first tries to match nothing, so the OPP will try an infix after it, no?

[09:53] <arnsholt> Oh, right

[09:57] *** masak joined
[09:57] <masak> oh hai, #perl6!

[09:57] <phenny> masak: 20 Jun 17:45Z <sorear> tell masak declarations?  class, function, variable, you name it.  .pm6 -> .pod converter

[09:57] <phenny> masak: 20 Jun 18:39Z <moritz_> tell masak http://nopaste.snit.ch/21416 feedback welcome

[09:57] <phenny> masak: 20 Jun 19:03Z <moritz_> ask masak how t/hitomi/01-xml-parsing.t is supposed to work. It has a line 'use Hitomi;', but there's no Hitomi.pm to be found anywhere near...

[09:58] <masak> moritz_: the Web.pm tests generally need some love. this is one instance of that. I don't remember the exact backstory.

[09:58] <moritz_> ok

[09:59] <moritz_> Tene++ and I also found that most routes test die with the same error (on alpha)

[09:59] <moritz_> I've patched them up to produce the same failures with master (in the 'ng' branch)

[09:59] <masak> moritz_: I think t/hitomi/01-xml-parsing.t is simply bogus. an attempt to start coding with tests, and then Hitomi itself (which works to a large extent) took off in another direction.

[10:00] <masak> hm, or there's supposed to be a lib/Hitomi.pm, but that was never committed.

[10:00] <masak> that looks more probable, actually.

[10:01] <moritz_>     [t/hitomi/01-xml-parsing.t] added more tests

[10:01] <moritz_>     The last one fails. Don't know why yet.

[10:01] <moritz_> so it seems they ran at some point

[10:01] <masak> yes.

[10:01] <masak> I'll have a look at it soonish and see if I can get it to work again.

[10:02] <jnthn> o/ masak

[10:02] <masak> moritz_: re http://nopaste.snit.ch/21416 -- looks good. let's hope the web-challenge effect brings in many contributions. :)

[10:02] <masak> jnthn: \o

[10:02] <moritz_> masak: actually it's already running, and cygx++ has contributed something already

[10:03] <masak> oh wow.

[10:03] <moritz_> though not committed yet

[10:03] <masak> I should avoid sleeping altogether, there's so much happening here.

[10:03] * masak backlogs

[10:03] <moritz_> :-)

[10:05] *** lestrrat is now known as lest_away

[10:15] <mathw> masak: but just think how much joy you get out of knowing that when you wake up and come to #perl6, something awesome will have happened

[10:15] <cygx> moritz_: speaking about committing - I'm new to git/github, so I'm not sure ho to go on

[10:16] <cygx> moritz_: should I fork and commit to a clone?

[10:16] <moritz_> cygx: nope, commit to the repo directly

[10:16] <moritz_> that saves me the trouble of merging

[10:17] <moritz_> the forking/push to fork model is often used, but I rather hand out commit bits

[10:17] <cygx> ok; will do after some cleanup

[10:24] <masak> mathw: when you put it like that, is does sound rather nice...

[10:26] <masak> phenny: tell sorear -- still not 100% sure what you're asking. perhaps best that you follow S26 to the letter until I get around to updating it to the latest discussions. in the best case, you'll also become convinced that the current way isn't optimal. :)

[10:26] <phenny> masak: I'll pass that on when sorear is around.

[10:27] *** |jedai| left
[10:29] *** azert0x left
[10:30] <bbkr> any idea why "Determine what C compiler and linker to use" test on --gen-parrot returns "Permission denied" for parrot/test_X ? there is only snprintf in *.c file, nothing suspicious

[10:41] *** swaroop joined
[10:42] <mmcleric> hi

[10:42] <mmcleric> just sent patch about WhateverCode type

[10:42] *** swaroop left
[10:42] <mmcleric> it doesn't fix 2 + * + 3 yet, it turned out to be complicated (for me at least :) )

[10:42] <mmcleric> and i've got a lot of stupid questions

[10:44] <mmcleric> first, i can tag any PAST::Node object simply by using it as hash, right?

[10:44] <jnthn> mmcleric: You can but...

[10:44] <jnthn> ...we try and avoid doing so.

[10:45] <jnthn> I figured that .returns('WhateverCode') would be enough.

[10:45] <jnthn> (e.g. enough tagging)

[10:45] <mmcleric> isn't .returns only Op's property?

[10:46] <jnthn> I think it can go on anything, but you will only ever have Op anyway, I think.

[10:46] <mmcleric> or even PAST::Var? i'm confused, where can i see whole list?

[10:46] *** colomon left
[10:46] <bbkr> (parrot bug above solved. disk was mounted with nodev)

[10:46] <jnthn> Since all blocks are wrapped.

[10:46] <jnthn> PAST docs are at...moment..

[10:46] <mmcleric> i'm reading pdd26_ast, it doesn't say anything about other types

[10:46] <mmcleric> ok :)

[10:46] <jnthn> http://docs.parrot.org/parrot/latest/html/docs/pdds/pdd26_ast.pod.html

[10:47] <jnthn> oh heh, that only claims it works on PAST::Val, afaict

[10:47] <jnthn> It's true that the code generator ignores it on everything but PAST::Val.

[10:48] <jnthn> But I believe you can apply it to anything just for "tagging" purposes.

[10:48] <mmcleric> oh, ok :) but it's still there, so docs are lying

[10:48] <jnthn> Yeah

[10:48] <jnthn> docs--

[10:48] <jnthn> well

[10:48] <mmcleric> ok, another question

[10:48] <jnthn> (lying docs)--

[10:48] <mmcleric> is it really necessary that () in expressions create new Stmts node?

[10:48] <mmcleric> because 2 + ((((3 + *)))) will have 4 Stmts nodes, one in another

[10:49] <mmcleric> and () doesn't cause whatever_curry to be called :)

[10:49] <jnthn> eww

[10:49] <jnthn> I think it may be needed though

[10:49] <mmcleric> so i'll have to put it in circumfix:sym<( )>($/), right?

[10:49] <jnthn> For @other-thing

[10:49] <jnthn> Erm

[10:50] <jnthn> That feels...weird.

[10:50] <jnthn> But maybe we'll need to

[10:50] <jnthn> I think maybe put something in to "pass the tag"

[10:50] *** lest_away is now known as lestrrat

[10:50] <jnthn> e.g. the .returns of the PAST::Stmts is set to whatever the .returns of the (last) expression in it is.

[10:51] <mmcleric> yes, i thought so too (but didn't tried it yet)

[10:51] <jnthn> But I'd prefer that whatever_curry should only be called from the one place.

[10:51] <jnthn> Propagating .returns around the tree is just generally healthy, anyway.

[10:51] <jnthn> We'll want to do more of that in the future, I suspect.

[10:51] <jnthn> (In the future, when we get into doing type analysis and so on.)

[10:52] <mmcleric> ok, good

[10:53] <mmcleric> another thing that worries me is performance

[10:53] <mmcleric> i understand it's only compile time hit, but still, checking for types on every operator seems wasteful

[10:54] <mmcleric> should i worry about it?

[10:54] <jnthn> Well, what else can we do, really?

[10:54] <jnthn> I mean, any operator could potentially be whatever-curried.

[10:54] *** dakkar left
[10:54] <cognominal> rakudo:  class A {  method TOP { self.a(&A::b) }; method a() { self."$b"()  }; method b { say "hi" } }; A.TOP

[10:54] <jnthn> We could try and do epic evil with a contextual that we flag if we see a Whatever

[10:54] <p6eval> rakudo c6a829: OUTPUT«===SORRY!===␤Symbol '$b' not predeclared in a (/tmp/8Ol0nAYmcn:11)␤»

[10:55] <mmcleric> contextual is something from Grammar.pm, right?

[10:55] <jnthn> Yeah but...let's not do that. Not now, anyway.

[10:55] <mmcleric> ok :)

[10:55] <jnthn> It's too...evil.

[10:55] *** dakkar joined
[10:56] <cognominal> rakudo:  class A {  method TOP { self.a(&A::b) }; method a($b) { self."$b"()  }; method b { say "hi" } }; A.TOP

[10:56] <p6eval> rakudo c6a829: OUTPUT«Null PMC access in can()␤  in 'A::a' at line 11:/tmp/mZUyIIQ2h5␤  in 'A::a' at line 11:/tmp/mZUyIIQ2h5␤  in 'A::TOP' at line 11:/tmp/mZUyIIQ2h5␤  in main program body at line 11:/tmp/mZUyIIQ2h5␤»

[10:56] <mmcleric> i didn't know about contextual and thought about simply copypasting all expr-grammar into two versions, with and without Whatever (yes, it's even more evil)

[10:56] <mmcleric> ok, i'll try not to think about it

[11:00] <mmcleric> jnthn: ok, thanks. there are some things which stop me from getting working implementation, but i'll just try to read more docs, answers are probably there

[11:00] <cognominal> I am not sure of the syntax to pass a method as a parameter and then call it :(

[11:01] <cognominal> It seems that I need to prefix the method name by the class name to refer to it, even within the class itself

[11:01] <jnthn> cognominal: It appears you expect the method to be in the namespace.

[11:02] <jnthn> Or the lexpad.

[11:02] <jnthn> It won't be unless you declare "my method ..." or "our method ..."

[11:02] *** synth joined
[11:02] <jnthn> cognominal: methods are has-scoped by default

[11:02] <jnthn> mmcleric: OK, let me know if you hit any more really sticky points. :-)

[11:03] <mmcleric> i will. it's going to busy week at my job, but maybe at nights i'll find some free time :)

[11:03] *** mmcleric left
[11:04] <cognominal> jnthn, what would be the correct way to write that? I test with genuine class, but I want to do it with a grammar.

[11:04] <cygx> moritz_: I have 2 commits ready, but my git-FU is weak (more)

[11:04] <cygx> moritz_: with my freshly installed cygwin-git, all I'm getting is `error: Cannot access URL http://github.com/moritz/try.rakudo.org.git/, return code 22`

[11:09] *** synth left
[11:09] <jnthn> cognominal: In above, maybe try "our method b" rather than just "method b"

[11:09] <jnthn> cognominal: Or do "my method b" and then &b rather than &A::b

[11:11] <cognominal> rakudo:  class A {  method TOP { self.a(&b) }; method a($b) { self."$b"()  };  our method b { say "hi" } }; A.TOP

[11:11] <p6eval> rakudo c6a829: OUTPUT«hi␤»

[11:11] <cognominal> jnthn++

[11:12] *** egor joined
[11:14] <cognominal> I should reread S12 to unserstand the merits of has scope for methods

[11:14] <jnthn> cognominal: In short, it means "this method only gets entered into the methods table in the metaclass"

[11:14] *** egor left
[11:15] *** \shade\ left
[11:16] *** shade_ joined
[11:16] <TiMBuS> cygx, are you trying to clone the repository?

[11:17] <cygx> TiMBuS: I cloned the repository and did 2 local commits; now I'm trying to push them upstream

[11:18] <TiMBuS> do you have access to the github repo?

[11:19] <cygx> TiMBuS: github tells me 'This URL has Read+Write access', so I guess I have?

[11:20] <moritz_> cygx: the trailing slash is wrong

[11:20] <moritz_> edit your .git/config to remove it

[11:20] <TiMBuS> also, that

[11:20] <cygx> ;)

[11:21] <cygx> I'll first look up how to fix the author information, though, so it might be a minute

[11:21] <moritz_> should be

[11:22] <moritz_> git config --global author.email [email@hidden.address]
[11:22] <moritz_> git config --global author.name 'Your Name'

[11:22] <cygx> moritz_: I'm not confident in the unicode abilities of my setup - let's see how it goes ;)

[11:23] <moritz_> git itself on a clean UTF-8 environment works fine

[11:25] <_sri> http://kraih.com/rakudo-perl6-sri.png # refined

[11:28] *** wrac joined
[11:29] <TiMBuS> thats pretty nice

[11:29] *** ejs joined
[11:29] <_sri> :)

[11:30] *** Guest23195 joined
[11:33] <arnsholt> Yeah, I like it too

[11:33] <moritz_> it's just that rakudo will likely never have a version number "1"

[11:34] <TiMBuS> the '0.' is implicit

[11:34] <_sri> hah

[11:34] <moritz_> as it looks now, the compiler releases will be numbered as they are now (#30, 2010.06, 'Kiev')

[11:34] <moritz_> and the distribution releases will have the 'Star' in the name

[11:35] <arnsholt> IIRC pmichaud wants to avoid traditional version numbering altogether

[11:35] <TiMBuS> can we name each one after a different star

[11:35] <marcus__> rakudo galaxy

[11:35] *** marcus__ is now known as imarcusthis

[11:35] <TiMBuS> super rakudo galaxy! 2

[11:35] <moritz_> star -> galaxy -> galxy cluster -> universe -> multiverse -> ?

[11:36] <TiMBuS> well then 'rakudo ?' will be the rakudo 1.0

[11:37] <moritz_> THERE WILL BE NO RAKUDO 1.0

[11:37] <TiMBuS> ahaha

[11:37] *** thebird left
[11:38] *** agentzh left
[11:39] *** FardadJalili joined
[11:41] *** azawawi joined
[11:42] *** cognominal left
[11:44] <masak> has anyone ever used the `given True { ... }` idiom? it's mentioned (in an earlier form) in A04.

[11:44] <azawawi> phenny: tell colomon Yes, S:H:P6 gets updated regularly on my spare time. I try to do that once I see enough commits on STD.pm6, see http://cpansearch.perl.org/src/AZAWAWI/Syntax-Highlight-Perl6-0.81/Changes

[11:44] <phenny> azawawi: I'll pass that on when colomon is around.

[11:44] <azawawi> masak: hi there

[11:44] <masak> azawawi! \o/

[11:45] <masak> azawawi: long time no see.

[11:45] *** cognominal joined
[11:46] <masonkramer> (use IO::Logging).assuming(logfile => ".log"); is going to make for some really neat APIs

[11:46] <azawawi> masak: I always to read backlogs but lately I have been busy a bit at work

[11:52] *** azawawi left
[11:57] <moritz_> rakudo: for 1..Inf { .say; last }; say "alive"

[11:58] <p6eval> rakudo c6a829: OUTPUT«1␤alive␤»

[11:58] <moritz_> wow

[11:58] <masak> \o/

[11:58] <moritz_> that's new, right?

[11:58] <masak> think so.

[11:58] <moritz_> rakudo used to evaluate the argument eagerly

[11:58] <masak> rakudo: for 1..* { .say; last }; say "for loops are lazy"

[11:58] <p6eval> rakudo c6a829: OUTPUT«1␤for loops are lazy␤»

[11:58] <moritz_> just found it in autounfudge output

[12:01] *** ejs left
[12:02] *** dakkar left
[12:02] <takadonet> morning all

[12:06] <masak> \o

[12:07] *** envi^home joined
[12:13] <cygx> moritz_: git and/or cygwin positively hate me: they ignore settings, completely hang in the password prompt and don't like the github SSL certificate

[12:13] <cygx> I'll try to setup my environment properly later taday, but for now my changes can be found at http://www.informatik.uni-frankfurt.de/~cgaertne/try-rakudo/frontend.tar.gz

[12:14] <moritz_> if somebody wants a quasi-LHF to work on: write a constructor for class Match that accepts the values of $match.perl

[12:14] <cygx> check http://www.informatik.uni-frankfurt.de/~cgaertne/try-rakudo/frontend.tar.gz for an online version

[12:14] <masak> rakudo: use MONKEY_TYPING; class A {}; my $a = A.new; augment class A { has $.x }; say $a.x

[12:14] <p6eval> rakudo c6a829: OUTPUT«Method 'x' not found for invocant of class 'A'␤  in main program body at line 11:/tmp/nmU9D4bNkC␤»

[12:15] <moritz_> I don't have much time atm, but the link is now in the logs, and I'll get back to it if you don't manage to push the stuff

[12:16] <jnthn> cygx: I found the msys git (outside of cygwin) works very nicely, fwiw.

[12:17] *** colomon joined
[12:17] <colomon> at yapc;:na!

[12:17] <phenny> colomon: 11:44Z <azawawi> tell colomon Yes, S:H:P6 gets updated regularly on my spare time. I try to do that once I see enough commits on STD.pm6, see http://cpansearch.perl.org/src/AZAWAWI/Syntax-Highlight-Perl6-0.81/Changes

[12:17] <colomon> azawawi++

[12:18] <cygx> jnthn: I've got a somewhat Frankenstein-like mix of Cygwin and MinGW going for my C development and I'm not really keen on adding MSYS to the mix

[12:18] <cygx> but we'll see, I might reconsider

[12:19] *** mmcleric joined
[12:19] <cygx> or perhaps take alook at hg-git...

[12:20] <cygx> anyway, I'm off for now

[12:20] *** cygx left
[12:20] <pmichaud> good morning #perl6 (from yapc::na)

[12:20] <takadonet> pmichaud: morning

[12:21] <masak> morning!

[12:21] <colomon> o/

[12:21] <moritz_> heya; how is yapc going?

[12:21] <colomon> keynote okay so far

[12:21] <pmichaud> just started

[12:21] <colomon> I got kind of lost on the way here.

[12:21] <pmichaud> not enough room in the room

[12:21] <moritz_> wil there be a 6y hackathon?

[12:21] <moritz_> *will

[12:21] <colomon> hope so

[12:21] <masak> not enough space in this space...

[12:21] <pmichaud> I plan to do six-y hack-y things on Thursday

[12:22] * jnthn parsed that as "6 year hackathon" :-)

[12:22] <moritz_> :-)

[12:22] <masak> jnthn: that would be AWESOME.

[12:22] <jnthn> masak: That's what I thought!

[12:22] * masak checks his calendar

[12:22] <masak> how about... 2015 to 2020?

[12:23] <colomon> I was planing on doing six-y hack-y things Mon - Wed.  ;)

[12:23] <pmichaud> a "6 year hackathon" is basically what I've done thus far, I guess.  :)

[12:23] <pmichaud> I'll do six-y hack-y things Mon-Wed too, but I have presentations to prepare and give also :-|

[12:23] <jnthn> pmichaud: Yes, but did you eat pizza every day? :-)

[12:23] <colomon> pmichaud: right, and I have your presentations to go to.  ;)

[12:23] <pmichaud> jnthn: aha!  Now we know why it's taken six years!

[12:23] <colomon> also Damian's, etc.

[12:23] <masak> pmichaud: that could be a nice presentation title: "Rakudo Perl: The Six-Year Hackathon" :)

[12:24] * pmichaud changes his title slide for tomorrow's talk :)

[12:24] <pmichaud> s/changes/creates/  :-)

[12:24] <masak> :P

[12:26] <slavik> "How to beat the Guinness world record for the longest hackathon."

[12:27] <cognominal> jnthn++  # gave me the way to pass a rule as an argument to another

[12:28] <jnthn> cognominal: I guess you're then using regex interpolation?

[12:29] <araujo> slavik, 5 years?

[12:30] <slavik> araujo: suggesting title for pmichaud's presentation

[12:30] <slavik> pmichaud: what's it about anyway?

[12:30] <araujo> :P

[12:30] <araujo> well, still a 5 years hackathon is good idea

[12:30] <cognominal> token begin-end(Str $str, Regex $content) { .... <content> ...  }   # jnthn,  here what I do

[12:30] <cognominal> oops

[12:30] <cognominal> token begin-end(Str $str, Regex $content) { .... <$content> ...  }   # jnthn,  here what I do

[12:32] <cognominal> I am doing some stuff to generate slides that could be embedded in Pod6

[12:34] <masak> cognominal++ # release early, release often!

[12:34] <pugssvn> r31399 | moritz++ | [t/spec] some Rakudo unfudges 

[12:34] <cognominal> masak: I am more the anal retentive guy

[12:35] <masak> cognominal: there's no real contradiction between the two :)

[12:36] *** pjcj left
[12:37] <colomon> TimToady: you seem to have found a power supply?

[12:37] *** moritz_ sets mode: +oooo colomon masak cognominal araujo

[12:37] *** moritz_ sets mode: +o slavik

[12:38] <TimToady> I'm using an old computer that is actually the quiz machine for my wife's quiz team

[12:38] <TimToady> it runs Winders

[12:38] <colomon> oh noez!

[12:38] <mathw> aaargh no

[12:39] <jnthn> ...it's not *that* bad. :P

[12:39] <jnthn> Unless it runs Windows ME, in which case it *is* that bad.

[12:40] <moritz_> right, you can always open a ssh connection to a unixish server and access your screen session there :-)

[12:40] *** thebird joined
[12:40] *** PacoLinux joined
[12:40] *** masonkramer left
[12:40] *** masonkramer joined
[12:42] *** pjcj joined
[12:43] *** bphillips joined
[12:47] *** perlygatekeeper joined
[12:49] <masak> it's fun reading the Apocalypses. did you know that &proceed was once known as &skip, before it was &continue ? :)

[12:49] <colomon> did not

[12:49] *** Intensity joined
[12:49] <colomon> have you seen the old Perl 6 book?

[12:50] *** rgrau joined
[12:50] *** dakkar joined
[12:50] <masak> only the cover.

[12:50] <jnthn> I think I have a copy of it, but back in England.

[12:51] <moritz_> the perl 6 parts are in the pugs repo

[12:51] <moritz_> I've updated them partially, but then lost interest

[12:52] <pugssvn> r31400 | moritz++ | [t/spec] remove an outdated range test, and unfudge another that rakudo now passes 

[12:53] <TimToady> coffee # I sincerely hope... &

[12:53] <masak> rakudo: given 42 { say "Int" when Int }

[12:53] <p6eval> rakudo c6a829: OUTPUT«===SORRY!===␤Missing block at line 11, near "}"␤»

[12:53] <masak> alpha: given 42 { say "Int" when Int }

[12:53] <p6eval> alpha 30e0ed: OUTPUT«Int␤»

[12:53] * masak submits rakudobug

[12:53] <masak> alpha: given 42 { say "Int" when Int; say "Num" when Num }

[12:53] <p6eval> alpha 30e0ed: OUTPUT«Int␤Num␤»

[12:53] <masak> statement-modifier 'when' (by spec) doesn't break.

[12:54] *** colomon left
[12:54] <moritz_> right

[12:54] <moritz_> isn't that proceed now?

[12:54] *** colomon joined
[12:55] <colomon> probably no point in giving me op today, I imagine this machine will be on and off on a regular basis.  :)

[12:56] <masak> moritz_: no, it's "succeed". as in, "now we're done with the block that bound $_".

[12:56] <colomon> then I think I will head to the Perl 6 BOF for the rest of the morning.

[13:03] <masak> rakudo: class MyException is Exception {}; throw MyException.new("OH ERROR")

[13:03] <p6eval> rakudo c6a829: OUTPUT«Could not find sub &throw␤  in main program body at line 11:/tmp/2Ed568LNIm␤»

[13:04] <jnthn> masak: die

[13:04] <masak> rakudo: class MyException is Exception {}; die MyException.new("OH ERROR")

[13:04] <p6eval> rakudo c6a829: OUTPUT«O␤  in main program body at line 11:/tmp/n1AH4xBz1X␤»

[13:04] * masak submits rakudobug

[13:05] <jnthn> heh

[13:05] <jnthn> what on earth is it meant to do there

[13:05] <jnthn> stringify it I gues

[13:05] <jnthn> *guess

[13:05] *** plainhao joined
[13:07] <jnthn> class MyException is Exception {}; die MyException.new("ERROR")

[13:07] <masak> plainhao: 你好!

[13:07] <jnthn> rakudo: class MyException is Exception {}; die MyException.new("ERROR")

[13:07] <p6eval> rakudo c6a829: OUTPUT«E␤  in main program body at line 11:/tmp/fX0pY0wDN3␤»

[13:07] <masak> :P

[13:07] <jnthn> masak: wtf, it outputs...the first character?!

[13:07] <masak> jnthn: somewhat LTA, no? :)

[13:08] <jnthn> I...can totally wait to debug that. :-S

[13:08] <pmichaud> I wonder if something is indexing into a string when it thinks it has an array.

[13:09] <jnthn> pmichaud: oh

[13:09] <jnthn> pmichaud: That's a good guess.

[13:09] <plainhao> 你好 masak

[13:09] * masak guessed right :)

[13:09] <jnthn> pmichaud: That'd make it less weird.

[13:09] <jnthn> Apart from, what is doing that. :-)

[13:10] <plainhao> masak, i had to google that, i’m an illiterate fugee

[13:10] <cognominal> jnthn, I think you could close perl #74110

[13:10] <masak> plainhao: oh -- I'm just an illiterate foreigner :P

[13:10] <plainhao> haha, it is my name, though

[13:11] <masak> plainhao: what brings you to #perl6?

[13:11] <cognominal> I thought I had filed a bug for lack of support for pairs as positionnals in captures, but I can't find it :(

[13:12] <plainhao> i’m in phl.pm, currently not active

[13:12] <plainhao> they’re active, i’m not

[13:13] <jnthn> cognominal: You did, I'm sure

[13:13] *** metaperl joined
[13:13] <masak> rakudo: class MyException is Exception {}; throw MyException.new("你好 ERROR")

[13:13] <p6eval> rakudo c6a829: OUTPUT«Could not find sub &throw␤  in main program body at line 11:/tmp/PHAO3YGVkv␤»

[13:13] <masak> rakudo: class MyException is Exception {}; 爹 MyException.new("你好 ERROR")

[13:13] <masak> er.

[13:13] <p6eval> rakudo c6a829: OUTPUT«Could not find sub &爹␤  in main program body at line 11:/tmp/054uY96Fp0␤»

[13:13] <masak> rakudo: class MyException is Exception {}; die MyException.new("你好 ERROR")

[13:13] <p6eval> rakudo c6a829: OUTPUT«你␤  in main program body at line 11:/tmp/YXZO3VoMVX␤»

[13:13] <jnthn> masak: You're not good at dying, are you? :-)

[13:13] <masak> jnthn: third time's a charm.

[13:13] <pmichaud> masak's die seems to fail

[13:14] <pmichaud> we should warn him about that :)

[13:14] * pmichaud throws out puns as quickly as he can

[13:14] * jnthn hands masak more dies to try

[13:14] <masak> dies irae, maybe.

[13:14] <pmichaud> if you have multiple dies, do we call that "dice"?  ;-)

[13:15] <plainhao> is anyone using psgi or plack with rakudo?

[13:15] <masak> plainhao: there are plans to port those to Perl 6/Rakudo, but nothing concrete yet.

[13:16] <plainhao> nice, looking forward to it

[13:16] <masak> plainhao: for now, there's Web.pm, in an early stage of development.

[13:16] <plainhao> thanks for the info, masak

[13:16] <plainhao> are anyone here on forrst? i’ll follow you

[13:16] <plainhao> *is

[13:17] <jnthn> pmichaud: Hmmm...throwing dice ;-)

[13:20] <colomon> huh.  did I somehow break my local proto?  :\

[13:21] <masak> or is it just broken in general? :/

[13:21] <colomon> I was trying to fix it....

[13:22] *** gabiruh joined
[13:24] <masak> does a 'try { ... }' block have any semantics over a '{ ... }' block?

[13:24] *** JimmyZ joined
[13:25] <moritz_> an implicit CATCH { when True } ?

[13:25] <masak> 卓明亮! \o/

[13:25] <masak> moritz_: ...which does what?

[13:25] <JimmyZ> 麦高！ 晚上好

[13:25] <masak> just absorbs all exceptions?

[13:26] <moritz_> right

[13:26] <moritz_> dunno if that's really spec

[13:26] <masak> JimmyZ: 晚上好, 朋友.

[13:26] <JimmyZ> 呵呵

[13:26] <masak> moritz_: not sure that's desired behaviour.

[13:26] * mathw regrets his linguistic non-awesomeness

[13:27] <JimmyZ> BTW，rakudo builds failed on windows XP here

[13:27] <jnthn> moritz_: I think it's spec.

[13:27] <jnthn> JimmyZ: If it's the ops thing, just run make again.

[13:28] <colomon> huh.  now its working again.

[13:28] <moritz_> heisenproto?

[13:29] <JimmyZ> nope,  it's another thing

[13:29] <masak> JimmyZ: if you nopaste, I can submit a rakudobug for you.

[13:30] <JimmyZ> compile core.pm failed.

[13:30] <colomon> moritz_: I did trivially change two unrelated lines... 

[13:30] <colomon> So, is there a portable way to create projects.state if it doesn't exist?

[13:30] <JimmyZ> masak: I will nopsate it tomorrow

[13:30] <masak> JimmyZ: 好了

[13:30] <colomon> presuming shelling to touch not portable...

[13:33] <colomon> oooo, [particle] is in the room...

[13:33] * colomon is a bit freaked to have other irc-perl-people around in real life...

[13:34] <plainhao> you at yapc, colomon?

[13:35] <colomon> yes.

[13:36] *** wrac left
[13:36] <colomon> note to the world:  if you're trying to make sure a file exists, checking to see if it exists and overwriting it if it *does* is a bad plan.

[13:36] *** gbacon joined
[13:36] <colomon>     if $filename !~~ :e {         say "Hello, $filename!";         my $fh = open($filename, :w);         $fh.close;     }

[13:37] <colomon> masak, moritz_, does that look reasonable to you guys?

[13:37] <colomon> (debug say now removed)

[13:40] <colomon> seems to work, so pushed.  ;)

[13:42] <colomon> so, I installed Math-Model, and proto totally didn't install the deps.

[13:42] <colomon> :\

[13:43] <masak> colomon: I'm lacking context to your question.

[13:43] <colomon> but all my changes from yesterday are now pushed

[13:43] <masak> what file?

[13:43] <colomon> projects.state

[13:43] <colomon> but in general, that block of code should work for any file, no?

[13:43] *** kensanata left
[13:44] <colomon> going to go looking for the Perl6 room in a moment.

[13:44] <masak> colomon: it's syntactically correct, if that's what you're asking.

[13:45] <colomon> does it make sense?

[13:45] <colomon> I mean, I don't think run "touch $filename" is portable...

[13:45] <colomon> It seems to work on OS X

[13:45] <masak> I don't see the connection between 'touch' and your code.

[13:46] <colomon> my $fh = open($filename, :w);         $fh.close;

[13:46] <masak> oh.

[13:46] <colomon> that's the same as touch on an empty file.

[13:46] <colomon> or so I hope.

[13:46] <masak> I guess.

[13:46] <masak> it should be, yes.

[13:47] <jnthn> I forget if :a creates a file if it's not there or expects it to already exist

[13:47] *** FardadJalili left
[13:47] <jnthn> If the first, then you can save the :e check

[13:47] <colomon> gotta move, back soon

[13:48] *** shade_ is now known as \shade\

[13:48] <arnsholt> jnthn: fopen(3) says both "a+" and "a" creates the file if it doesn't exist

[13:49] <arnsholt> So I'd guess that :a should create it

[13:49] <masak> is :a implemented, though?

[13:49] <arnsholt> That's an entirely different question =)

[13:49] <masak> seems it is \o/

[13:50] <jnthn> rakudo: say &open.signature

[13:50] <p6eval> rakudo c6a829: OUTPUT«Signature()<0x3b19fa0>␤»

[13:50] <masak> I tried locally, and it worked.

[13:50] <jnthn> rakudo: say &open.signature.perl

[13:50] <p6eval> rakudo c6a829: OUTPUT«:(Any $filename, Any :r($r), Any :w($w), Any :a($a))␤»

[13:50] <jnthn> \o/

[13:50] <jnthn> rakudo++

[13:51] *** colomon left
[13:53] *** wallberg joined
[13:54] <masak> wallberg: \o

[13:54] <wallberg> hi :-)

[13:56] *** colomon joined
[13:56] <colomon> back

[13:58] <colomon> and now at the Parrot/Perl 6 BOF

[13:58] <colomon> masak: so, how soon will pls be up?

[13:59] <colomon> should I be mucking with further proto debugging?

[13:59] *** patspam joined
[13:59] <masak> colomon: I'm one proof-of-concept away from showing how to Actually Install things.

[13:59] *** FardadJalili joined
[13:59] <masak> colomon: but my tuits are tied up in strange and unpredictable ways.

[14:00] <pmichaud> is there anyone at the Parrot/P6 BOF?

[14:00] *** am0c joined
[14:01] <colomon> yes

[14:01] <colomon> me, Coke, and another

[14:03] <bbkr> rakudo: say "1"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~1

[14:03] <p6eval> rakudo c6a829: OUTPUT«1␤»

[14:04] <masak> bbkr: parses as "1" ~~ ~(~(~(1))) -- but with more prefix:<~>

[14:04] <moritz_> std: say "1"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~1

[14:04] <p6eval> std 31400: OUTPUT«Use of uninitialized value $bad in concatenation (.) or string at STD.pm line 62712.␤[31m===[0mSORRY![31m===[0m␤Preceding context expects a term, but found infix  instead at /tmp/Q3ZxIjnFZG line 1:␤------> [32msay

[14:04] <p6eval> .."1"~~~~[33m⏏[31m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[0m␤…

[14:04] <masak> stdbug!

[14:04] * [Coke] is in the yapc BOF room.

[14:05] <bbkr> masak: see, STD not parses it

[14:05] <masak> it should, IMO.

[14:05] <jnthn> I'm surprised STD doesn't parse it too.

[14:05] <jnthn> It's evil but...

[14:05] <jnthn> :-)

[14:05] <bbkr> however IMO it should be parsed as you said: ~~ ~(~(...))

[14:05] <bbkr> report?

[14:07] <bbkr> reported

[14:07] <colomon> "Math-Model has no dependencies. " :\

[14:07] <colomon> bbkr++

[14:07] <masak> bbkr: it's not a rakudobug, but fine :)

[14:07] <colomon> it's a STDbug!

[14:08] <moritz_> it has some depencies

[14:08] <colomon> gotta keep TimToady honest.  ;)

[14:09] *** mmcleric left
[14:10] <jnthn> reported as...rakudobug? :/

[14:10] <jnthn> We have enough actual ones.

[14:10] <jnthn> :-)

[14:11] <colomon> I suspect we have a somewhat lazy infinite list of actual ones.  ;)

[14:12] <jnthn> True ;-)

[14:14] *** clintongormley joined
[14:14] <pmichaud> (from schwern++ 's "How to write bug reports" talk)    Why does "report perl 6 bug" on Google not go anywhere useful?

[14:15] <pmichaud> (and is there anything we could do about it?)

[14:15] <[Coke]> because no one has any good links? add one to rakudo. =-)

[14:15] <pmichaud> "rakudo bugs" goes somewhere useful

[14:15] <pmichaud> "report rakudo bugs" doesn't

[14:16] <pmichaud> right now "perl 6 bug" goes to camelia

[14:16] <jnthn> lol

[14:17] <[Coke]> is rakudo.org in git or a cms, or...?

[14:17] <pmichaud> cms

[14:17] <pmichaud> and the page is misnamed, imo

[14:17] <pmichaud> right now it says "developer's guide"   but describes how to submit a bug

[14:17] <pmichaud> we should probably rename it to "how to report a rakudo / perl 6 bug"

[14:18] <jnthn> fwiw, "perl 6 bug" for me when googled has rt.perl.org as the top hit

[14:18] <pmichaud> for me it's www.perl6.org

[14:18] <pmichaud> oh, wait

[14:18] <pmichaud> I see it

[14:18] <pmichaud> yes, RT is the top thing

[14:18] <jnthn> the rt.perl.org page is not exactly helpful though.

[14:19] <jnthn> doesn't mention rakudobug at all

[14:19] <[Coke]> that we can ping ask and robrt on.

[14:19] *** am0c left
[14:20] <jnthn> schwern++ for noticing, anyways.

[14:20] <pmichaud> but if I were looking to submit a bug, the RT hit from Google isn't immediately obvious (i.e., I didnt even see it).  That might be a good thing though, since RT *isn't* the interface to use to submit a bug report

[14:20] <jnthn> Trouble is that "I want to report a bug in Perl 6" is...a tad unspecific. :-)

[14:20] <pmichaud> schwern++ is talking about bug tracking in general, I just said "gee, I wonder how people would find our bug tracker"

[14:21] <colomon> it's a good thought.

[14:21] <pmichaud> it's okay if it's unspecific, that's kinda the point

[14:21] <jnthn> We could do with a page that ranks well for "report Perl 6 bug" that explains things.

[14:21] <pmichaud> right

[14:21] <pmichaud> we should probably switch the page on rakudo.org to rank better for "Perl 6 bug"

[14:21] <jnthn> That also.

[14:22] <pmichaud> (and rt.perl.org isn't solely for rakudo bugs :)

[14:22] <bbkr> I miss also short info how to commit tests to pugs repo. there is no PUGS repo URL on Rakudo's "Developer's Guide", and no command line example how to run test with fudging

[14:22] <moritz_> that example is in the README only

[14:22] <pmichaud> bbkr: could you draft a document (or a patch to an existing document)?  That could probably go on perl6.org, too.

[14:24] <pmichaud> bbkr: (or otherwise suggest where we can improve this)

[14:24] <moritz_> an overview document for the test suite would be awesome

[14:24] <pmichaud> we probably need to recognize that people filing bug reports are often not rakudo developers

[14:24] <pmichaud> (i.e, they're people using rakudo, not people develpoing rakudo)

[14:27] <[Coke]> q

[14:27] <colomon> does ack skip files in directories named lib?

[14:27] <[Coke]> %^$#@ mini keyboard!

[14:27] <moritz_> colomon: nope

[14:27] <colomon> yes, but think how easy it is to carry around your... errr... is netbook the proper term?

[14:28] <moritz_> colomon: but unless -a is given, only files with known extensions are searched

[14:28] <colomon> ah, so the .pm6 is the problem.

[14:28] <moritz_> aye

[14:29] <moritz_> need to convince alester to include .pm6 for the next release

[14:29] *** macdaddy joined
[14:29] *** skids left
[14:29] * pmichaud submits rakudobug about rakudobugs

[14:29] * masak .oO( [meta #72593] )

[14:30] <bbkr> pmichaud: i'm not familiar with maintainig test suite. but my idea for improvment is simple: there can be a switch '--get-pugs-tests' that would checkout test suite from Pugs SVN in place of those delivered with monthly build. this way developers could commit right to rakudo-version/t/spec without manual fetching tests from Pugs repo.

[14:30] <pmichaud> (looking)

[14:30] <pmichaud> (no ticket 72593)

[14:30] <[Coke]> (hai, netbook)

[14:30] <masak> pmichaud: sorry, didn't mean to send you off looking. just imagined a meta-RT.

[14:31] <pmichaud> ahhhh

[14:31] <masak> ours is named 'perl', IIRC.

[14:31] * pmichaud is lost

[14:31] <masak> every RT instance has a name. the name of the one on rt.perl.org is 'perl'.

[14:31] <pmichaud> yes, I know that

[14:32] <masak> :)

[14:32] <pmichaud> I'm not sure what you're getting at 

[14:32] <pmichaud> (I'm probably distracted)

[14:32] <moritz_> just forget it :-)

[14:32] *** mmcleric joined
[14:32] <masak> yes. never mind.

[14:32] * masak tweaks his sillyometer a bit

[14:33] *** cygx joined
[14:33] <cygx> moritz_: just successfully pushed my changes

[14:33] <moritz_> cygx++

[14:34] *** kensanata joined
[14:34] *** am0c joined
[14:35] <cygx> btw: the link to the online version was borked - that should have read http://www.informatik.uni-frankfurt.de/~cgaertne/try-rakudo/frontend/

[14:36] <masak> moritz_: no, I think it takes a CATCH block to clear the exception. that block might be empty though -- but a try block seems to have the exact same semantics as a normal block.

[14:36] <masak> I'm willing to be proven wrong with a spec reference, though.

[14:36] <colomon> hey, the parrot/perl6 BOF room has a microphone and presentation screen.  very nice

[14:36] <colomon> so, ack's source is easy enough to hack to add .pm6!

[14:37] <masak> moritz_: oh wait. I had not read the Apocalypse far enough. it even mentions it here try { ... } =:= try { ... CATCH { default {} } }. so, never mind.

[14:38] *** Mowah left
[14:40] <mmcleric> is it a known issue that email to [email@hidden.address] can get lost?

[14:40] *** tadzik joined
[14:40] <mmcleric> i've sent patch several hours ago and still don't see it  on rt.perl.org

[14:41] <colomon> mmcleric: it's certainly a known issue that it is slow.  :)

[14:41] <colomon> what's your patch for?

[14:41] <masak> but that's p6c that's slow, right? not RT.

[14:41] <mmcleric> Subject: [PATCH] WhateverCode type implemented

[14:41] <colomon> masak: errr... you're the expert.

[14:41] <masak> usually my RT tickets go in in less than a minute.

[14:42] <colomon> mmcleric: you got it already?!

[14:42] <masak> and are visible on rt.perl.org

[14:42] <colomon> \o/

[14:42] <mmcleric> no

[14:42] <mmcleric> it was just WhateverCode type

[14:42] <colomon> ah

[14:42] <mmcleric> but it fixes two skipped tests

[14:42] <colomon> cool.

[14:43] <colomon> masak: you've got RT-fu, can you see his patch in there?

[14:43] <masak> colomon: I'll search for it.

[14:44] <masak> nope. if that's the name of it, it's not in there.

[14:44] <mmcleric> i can simply send pull request

[14:44] <mmcleric> just did it

[14:44] <colomon> mmcleric++

[14:45] <jnthn> mmcleric: Спасибо, I'll glance over the patch a bit later on. :-)

[14:46] <mmcleric> ok :) back to work

[14:47] *** macdaddy left
[14:48] <colomon> jnthn: it's in his whatever code branch.  :)

[14:48] * colomon would pull it, but is not particularly qualified in that area....

[14:48] *** FardadJalili left
[14:49] * colomon is alone in the Perl 6 BOF room now... 

[14:50] <jnthn> colomon: Yeah, I'd like to give it a look over first.

[14:51] <colomon> jnthn: right, I will certainly defer to you on this one.

[14:52] <colomon> ooo, someone just peaked in the window.

[14:52] *** Woody2143 joined
[14:52] *** molaf_ left
[14:52] <colomon> okay, enough fruitless mucking about with proto.

[14:53] <colomon> time to destroy 25% of Perl 6's test suite.

[14:53] <pmichaud> since we're currently passing 83% of the suite, if you can destroy only tests that we aren't currently passing then we'll be passing 108% of the suite :)

[14:55] <colomon> unfortunately, I plan on only destroying tests we already pass.  :(

[14:55] <pmichaud> I think that's called a "regression"  :)

[14:56] <colomon> oh bother, my script for generating the trig tests gets a Null PMC in master.  :(

[14:58] *** Kodi joined
[14:58] *** macdaddy joined
[14:58] <arnsholt> Bah. Term, prefix op, infix op; pick two

[15:00] <Kodi> Do you think "2, -4, 6 ...^ -32" should yield "2, -4, 6, -16" or "2, -4, 6, -16, 32"? S03 seems to imply the former, but I'd think the latter would be more useful.

[15:01] <Kodi> And by "6", I mean "8". Heh.

[15:01] <pmichaud> iiuc, it should yield the latter, even per spec

[15:01] <pmichaud> perhaps I'm missing something.

[15:02] *** rv2733 joined
[15:02] <masak> Kodi: I think it's the former. but ...^ isn't implemented yet.

[15:03] <pmichaud> note that "up to" will mean something different here

[15:03] <Kodi> Well, S03 says that ...^ "excludes the limit if it happens to match exactly". So it depends on how you interpret "exactly".

[15:03] <pmichaud> 32 doesn't match exactly, so it'll be in the list.

[15:03] <masak> oh.

[15:03] * colomon is mystified by that series

[15:03] <pmichaud> and the next value generated will be the one that is beyond the series

[15:03] * masak retracts his statement

[15:03] <colomon> oh, 8

[15:04] <colomon> pmichaud++ is right

[15:04] <masak> aye.

[15:04] * colomon hopes he can resist being distracted by ...^ long enough to finish his spectest 2.5 x decimation. 

[15:05] <Kodi> Hm, yes. I mixed up which seemed to specified and which was my opinion.

[15:06] <masak> :)

[15:06] <colomon> I almost implemented ...^ the other day by doing ... and then grepping to filter out the limit value.

[15:06] <colomon> but I decided that was kind of evil.

[15:07] <pmichaud> colomon: it's actually pretty easy, afaict

[15:07] <pmichaud> you return an element if it's not beyond the end

[15:08] <pmichaud> otherwise, you return an element if it is the end and if the ^ wasn't specified

[15:08] <pmichaud> otherwise, the series ends

[15:08] <pmichaud> (with no element)

[15:08] <colomon> pmichaud: but that requires a bit of a refactor.

[15:08] <pmichaud> I suggest the refactor, then :-)

[15:08] <colomon> not saying it's not the right way to do it, just the the grep version was a one-liner.

[15:08] *** TiMBuS left
[15:09] *** alester joined
[15:09] <colomon> and the grep version would probably work well enough that no one was likely to notice until I got around to doing the refactor.  ;)

[15:11] <literal> does code like this compile in Perl 6? http://paste.scsys.co.uk/45057

[15:11] <pmichaud> as long as it doesn't eventually lead down a blind development trail (i.e., encouraging bad code practice), I'm okay with anything that works

[15:11] <literal> I had always thought thought the $f would be local to the first if condition in Perl 5, but I was wrong

[15:11] <pmichaud> in Perl 6, the my is local to the curlies (which are sometimes implied)

[15:12] *** Kodi left
[15:12] <pmichaud> in this case, the scope of $f is from the if statement to the end of the code

[15:12] <masak> literal: it works in Perl 6.

[15:12] <masak> what pmichaud said.

[15:12] <literal> so the elsif ($f) would not compile?

[15:12] <masak> if you want to make $f local to the if block, use -> $f

[15:12] <masak> literal: here it would.

[15:12] <literal> ok

[15:13] <pmichaud> to the end of the code, not the end of the if block (or if statement)

[15:13] <masak> literal: the variable ends up belonging to its innermost surrounding block. which in this case is the whole program.

[15:13] <pmichaud> what masak++ said.  :)

[15:13] <literal> well, not in Perl 5

[15:14] <literal> $f is not accessible after these conditionals

[15:14] <pmichaud> in Perl 6 we try to not have magic boundaries for declared symbols

[15:14] <masak> Perl 6 has fewer exceptions of that kind.

[15:16] <pugssvn> r31401 | colomon++ | [t/spec] Get the trig test generation script working under current Rakudo.   

[15:16] <colomon> hey, very easy to get the trig test generator working again.  Rakudo++

[15:17] <pmichaud> so, since I still have 100 minutes to go.... anything in particular people want to see from my NQP talk?  

[15:18] <PerlJam> pmichaud: live streaming or video online  ;)

[15:18] <jnthn> ;)

[15:18] <pmichaud> I could turn on the webcam on my laptop, you'd probably see me come in and out of the video at times :)

[15:19] <pmichaud> I really ought to find a way to capture my presentations locally onto my computer, though.

[15:19] <colomon> I guess I could video skype it, if I can find a power outlet.

[15:19] <pmichaud> even if I'm not in the picture, audio capture + video capture while I'm giving the presentation would work out.

[15:19] <PerlJam> if you had another webcam, you could capture audience response too 

[15:19] <pmichaud> I do have another webcam, but left it at home.

[15:19] <colomon> though that would definitely cut down on my ability to hack during it.  ;)

[15:20] <pmichaud> I'm thinking I might include my additional webcam in my travel supplies.  There have been two times now where it might've been useful.

[15:23] *** ash__ joined
[15:23] <pmichaud> and since conferences have been historically unreliable about posting videos of my talks, maybe I should just treat it as a live screencast and record it locally myself.

[15:23] <colomon> someone just peeked in the door's window again

[15:23] <PerlJam> pmichaud++

[15:24] <PerlJam> now convince everyone else to do that too (or make it easy for them to do so)

[15:24] <pmichaud> otoh, perhaps there's a good reason the conferences haven't posted my talks :-)

[15:24] <PerlJam> especially at a YAPC

[15:24] <pmichaud> yeah, I may work on that a bit tonight.  It would be very useful for my Rakudo talk tomorrow

[15:24] <colomon> ah, but they're here to see the pictures on the wall.

[15:27] <ash__> i have been hearing a lot of buzz about perl6 recently, keep up the good work guys

[15:27] <colomon> rakudo: say ((1, 2, 3) xx *).munch(10)

[15:27] <p6eval> rakudo c6a829: OUTPUT«123123123123123123123123123123␤»

[15:28] <colomon> rakudo: say ((1, 2, 3) xx *).flat.munch(10)

[15:28] <p6eval> rakudo c6a829: OUTPUT«1231231231␤»

[15:28] <colomon> oooh, groovy

[15:28] <colomon> thanks, ash__ 

[15:28] <colomon> rakudo: my $a = ((1, 2, 3) xx *).flat; say $a.munch(10)

[15:28] <p6eval> rakudo c6a829: OUTPUT«1231231231␤»

[15:29] <colomon> rakudo: my @a = 1, 2, 3; my $a = (@a xx *).flat; say $a.munch(10)

[15:29] <p6eval> rakudo c6a829: OUTPUT«1231231231␤»

[15:31] *** patspam left
[15:33] *** Ross joined
[15:35] *** JimmyZ left
[15:35] <pmichaud> hmmm, I might have something that will work.  I'll run it when I give my presentation and see how it goes.

[15:37] <pmichaud> rakudo: (1..28).pick

[15:37] <p6eval> rakudo c6a829:  ( no output )

[15:37] <pmichaud> rakudo: say (1..28).pick

[15:37] <p6eval> rakudo c6a829: OUTPUT«21␤»

[15:37] *** snearch joined
[15:39] <m6locks> rakudo: say (1..28).pick

[15:39] <p6eval> rakudo c6a829: OUTPUT«8␤»

[15:42] <ash__> rakudo: say ((1, 2, 3) xx *).pick; 

[15:42] *** wallberg left
[15:42] <p6eval> rakudo c6a829:  ( no output )

[15:43] <ash__> rakudo: say ((1, 2, 3) xx *).munch(10).pick

[15:43] <p6eval> rakudo c6a829: OUTPUT«1␤»

[15:43] *** JimmyZ joined
[15:43] <colomon> hmm, so pick flattens.

[15:43] <ash__> does .pick flatten? 

[15:43] <ash__> ah, thought so, just wondering 

[15:44] <colomon> rakudo: say ((1, 2, 3) xx *).munch(10)[0]

[15:44] <p6eval> rakudo c6a829: OUTPUT«1␤»

[15:44] <colomon> rakudo: say ((1, 2, 3) xx *).munch(10)

[15:44] <p6eval> rakudo c6a829: OUTPUT«123123123123123123123123123123␤»

[15:44] <JimmyZ> rakudo: say (1..*).pick

[15:44] <ash__> rakudo: say ((1, 2), (3, 4)).pick

[15:44] <p6eval> rakudo c6a829:  ( no output )

[15:44] <p6eval> rakudo c6a829: OUTPUT«2␤»

[15:44] <colomon> JimmyZ: (1..*).pick definitely does not work.

[15:45] *** justatheory joined
[15:45] <JimmyZ> Will it work in the further?

[15:46] <colomon> JimmyZ: doubt it greatly

[15:46] <ash__> going to infinity is hard 

[15:46] <colomon> what would it even mean?

[15:46] <ash__> pick a number between 1 and infinity? 

[15:47] <colomon> ash__: yes, but how?  you can't make the list of things to pick from so you get an even distribution.

[15:47] <colomon> and the average result is larger than your computer's main memory.

[15:48] <ash__> yeah, i don't think it's possible

[15:48] <ash__> is there a way to check the upper bound of a range?

[15:48] <ash__> maybe .pick (and some other functions too?) should check the upper bound of the range to see if its valid

[15:48] <ash__> and if its not, throw a runtime error

[15:49] <ash__> saying its out of range or out of bounds or is infinity, or something? 

[15:49] <arnsholt> NQP-rx doesn't support look-behind yet?

[15:50] <colomon> ash__: that would require making a special case of all those methods for Range.

[15:50] *** ashleydev left
[15:50] <colomon> right now, pick doesn't know or care whether it's getting 1..*, 1...*, or some array you've been carefully seeding.

[15:51] *** jaffa4 joined
[15:51] *** tadzik left
[15:52] <ash__> colomon: is that bad though? it could help prevent things like (1..*).pick; since if you do that currently it just sits in an infinite loop and eventually runs out of memory

[15:52] <ash__> i'd rather have stuff in the core libraries throw an exception than go into infinite loops, but maybe thats me personally 

[15:52] *** am0c left
[15:53] <masak> JimmyZ: it's not possible to randomly pick a natural number, giving all the natural numbers equal probability.

[15:53] <masak> JimmyZ: loosely put, the objection can always be "that's a *really* small number, why didn't you pick a bigger one?"

[15:55] <colomon> ash__: I agree about the exceptions, but the problem is that in general, it's very difficult to know when a loop is infinite.  Range is just a special case where it's obvious, and it's the only such case I can think of at the moment.

[15:56] *** JimmyZ left
[15:57] * colomon is now dreaming of a .finite-list method that throws an exception if it knows it is infinite....

[15:58] <masak> colomon: just check whether .elems == Inf :P

[15:58] <PerlJam> colomon: or doesn't know that it's finite?  (i.e. it's finite-ness is indeterminant)

[15:58] *** sdo left
[15:59] <colomon> PerlJam: probably the majority of non-array lists won't know if they are finite.

[16:00] *** skangas` joined
[16:00] * colomon should have been thinking about lunch rather than trig hacking....

[16:01] *** skangas` left
[16:02] <ash__> rakudo: my $a = method { fail 'Bad Max Range' if @.max == Inf; my @l = @.list.Seq; @l[floor(@l.elems.rand)]; }; say (1..*).$a();

[16:02] <p6eval> rakudo c6a829:  ( no output )

[16:02] <ash__> hm, well, that works locally 

[16:02] <ash__> its a relatively minor change to .pick (the one with no arguments) 

[16:04] *** tadzik joined
[16:04] *** colomon left
[16:05] *** skids joined
[16:06] *** masak left
[16:11] *** meppl joined
[16:19] <PerlJam> Two logos from sri: http://kraih.com/perl5-camelia-sri.png   http://kraih.com/perl6-camelia-sri.png 

[16:20] <PerlJam> melding p5 with p6 in the logo department.

[16:22] *** Mowah joined
[16:26] <ash__> PerlJam neat logos

[16:27] <PerlJam> yeah, I thought so too

[16:27] <PerlJam> (they're sebastian's, not mine)

[16:28] <ash__> still neat, wasn't perl5's logo the camel? 

[16:28] <Su-Shee> *shiver* yes. ;) or onions. 

[16:29] <_sri> the camel is oreillys logo

[16:29] <avar> Perl 5 never really had a logo, just the camel book logo

[16:29] <PerlJam> Padre is already using a pretty blue butterfly.  We might be able to switch "Perl's logo" to that easily

[16:30] <PerlJam> (to *some* sort of butterfly anyway)

[16:30] *** colomon joined
[16:30] <ash__> why was it an onion? 

[16:30] * colomon now has a Rakudo * t-shirt!

[16:31] <PerlJam> ash__: Because ogres are like onions  :)

[16:31] <ash__> lol

[16:31] <ash__> they have many layers?

[16:31] <tadzik> I thought networks are like onions

[16:31] <ash__> i like cakes better, they have layers, and frosting 

[16:32] <ash__> i think PerlJam is quoting Shrek 

[16:32] <tadzik> yeah, I know that

[16:32] *** ashleydev joined
[16:33] <ash__> there are a number of � in the perl site, i wonder if anyone else ever notices them 

[16:33] <diakopter> I do

[16:34] *** ashleydev_ joined
[16:34] <PerlJam> ash__: where?

[16:34] *** diakopter sets mode: +oooo colomon ash__ avar Su-Shee

[16:34] *** diakopter sets mode: +o p6eval

[16:34] <ash__> http://www.perlfoundation.org/perl_trademark the footer on that page for one 

[16:35] <PerlJam> ah, indeed

[16:35] <diakopter> both firefox & Chrome on windows have the ?

[16:35] <PerlJam> I'd never noticed before

[16:36] *** ashleydev_ left
[16:37] *** ashleydev left
[16:37] *** ashleydev joined
[16:37] *** ashleydev left
[16:38] *** ashleydev joined
[16:41] *** envi^home left
[16:42] *** SmokeMachine joined
[16:47] * colomon is in the room with pmichaud, but is letting him prep for his talk rather than introducing himself.

[16:47] *** b_jonas joined
[16:48] *** b_jonas left
[16:53] *** azert0x joined
[16:53] *** azert0x left
[16:54] *** azert0x joined
[16:56] <colomon> the daisy chain of power strips in front of me probably breaks some fire codes....

[16:57] <ash__> colomon: ssshh, its not an issue if nothing happens :P 

[16:58] *** dakkar left
[17:01] <colomon> but I'm closest to the wall!  if it goes up in flames, I'm going to have to vault over tables to escape!

[17:02] <colomon> the talk is starting...

[17:03] <Su-Shee> PerlJam: you're texan, right?

[17:05] <PerlJam> Su-Shee: yes-ish

[17:06] <Su-Shee> PerlJam: how much heat and spice is considered a good level in chili con carne? as hot as you can or more balanced?

[17:07] *** cdarroch joined
[17:07] *** cdarroch left
[17:07] *** cdarroch joined
[17:07] *** thebird left
[17:07] <PerlJam> Su-Shee: I can only speak for myself.  I like it just spicy enough to warm you up, but not so spicy that it has you reaching for something cold to drink every few minutes.

[17:08] <PerlJam> That's how I like my cajun food too.

[17:08] *** patspam joined
[17:08] <PerlJam> (when I eat spicy cajun food)

[17:08] * Su-Shee cooked the first chili con carne (after research) yesterday and I'm not sure about the hotness.

[17:09] <Su-Shee> PerlJam: is that above or below a good thai hotness level? ;)

[17:10] <PerlJam> Su-Shee: slightly below  :)

[17:10] <PerlJam> Su-Shee: what did you put in it?

[17:10] <Su-Shee> PerlJam: I followed roughly this recipe: http://tasteinvader.com/2010/02/01/texas-five-chili/

[17:11] <Su-Shee> PerlJam: but I took fresh tomatoes. 

[17:11] *** meteorjay left
[17:11] <lue> ohai

[17:11] <PerlJam> heh.  I like Rule 3.  That's hotly debated in Texas

[17:12] <PerlJam> Su-Shee: you didn't roast the tomatoes?

[17:12] <Su-Shee> PerlJam: I usally made it with beans, fresh peppers, fresh corn and ground meat, but I've wanted to try this variation

[17:13] <Su-Shee> PerlJam: no, they were italian overly ripe tomatoes, perfectly for cooking.

[17:13] <Su-Shee> the beef was from a german cow. ;)

[17:15] <PerlJam> Su-Shee: If yours looked anything like those pictures it must have been good whether hot or not-so-hot 

[17:15] <colomon> this is a great talk so far!

[17:15] <Su-Shee> PerlJam: it was very good - but what can go wrong if you're slowly cooking nice things in the oven? :)

[17:15] <PerlJam> indeed

[17:16] <Su-Shee> colomon: anything you don't know yet or plenty of fans cheering :)

[17:16] <Su-Shee> PerlJam: I was very pleasantly surprised by the taste of the different chilis I got.

[17:17] *** meteorjay joined
[17:17] *** adey joined
[17:18] * PerlJam wonders if he can convince his wife to make this dish for supper tonight  

[17:18] <colomon> Su-Shee: current NQP is more powerful than I knew.

[17:18] <colomon> also, pmichaud is a great speaker, which I had somehow not expected

[17:19] <sorear> hello #perl6

[17:19] <phenny> sorear: 10:26Z <masak> tell sorear -- still not 100% sure what you're asking. perhaps best that you follow S26 to the letter until I get around to updating it to the latest discussions. in the best case, you'll also become convinced that the current way isn't optimal. :)

[17:19] <PerlJam> colomon: what did you expect?

[17:19] <kensanata> All this talk about chili is making me hungry again and I just ate Marillenknödel.

[17:19] <colomon> PerlJam: kind of more academic, I guess.

[17:19] <ash__> colomon: pmichaud was a professor, wasn't he? I think he probably did a bit of lecturing in his time

[17:20] <colomon> ash__: he's probably better than 80% of the professors I had.

[17:20] <PerlJam> colomon: ah, so the knowledge that he was a professor colored your imagination in a negative way

[17:20] <colomon> PerlJam: yes.

[17:20] <ash__> colomon: true, i have only 2 or 3 professors that can really put together a good presentation, the rest are average  

[17:20] *** Trashlord left
[17:20] *** adey left
[17:21] *** meteorjay left
[17:21] *** meteorjay joined
[17:21] *** jaffa4 left
[17:21] <lue> I don't hear anything [ then again, I'm not actually there :) ]

[17:22] <colomon> also, I had no idea protoregexes were developed that late in the p6 process.  (2008)

[17:23] <Su-Shee> protoregexes veloceraptor.

[17:23] <Su-Shee> kensanata: are you the emacs-wiki guy?

[17:23] *** dual left
[17:24] *** rv2733 left
[17:24] *** hejki left
[17:25] *** huf joined
[17:25] *** hejki joined
[17:25] *** dual joined
[17:26] <colomon> also have just learned I want to avoid hacking NQP if possible.  ;)

[17:26] <Su-Shee> colomon: if that really was the intension of the talk.. :)

[17:26] <PerlJam> sometimes hacking NQP is way easier than hacking Rakudo

[17:27] <PerlJam> *and* hacking NQP might just make whatever it is available to Rakudo  :)

[17:27] <colomon> Su-Shee: now I know more about programming *in* NQP, and want to avoid changing NQP itself.  :)

[17:28] * Su-Shee knows nothing about nqp. 

[17:28] <PerlJam> Su-Shee: sure you do!  You know it's "not quite perl"  :)

[17:28] <Su-Shee> well besides that. :)

[17:29] <Su-Shee> I totally lost track what is what. I remember pugs is haskell, rakudo is parrot, parrot is beneath, diakopter made sprixel which is now c#.. ;)

[17:30] <arnsholt> NQP is pretty much a convenience interface for Parrot's assembly language

[17:31] <arnsholt> (And oh, how it's more convenient than PIR =)

[17:32] <Su-Shee> I looked into pugs a week ago and besides that I don't understand anything, it looked very readable.

[17:34] <arnsholt> It's Haskell, I'm not sure there's more than a handful of people understand it =)

[17:35] *** cygx left
[17:36] <PerlJam> I don't know ... Perl 6 seems to borrow many haskellian ideas, so if you grok Perl 6, you can grok Haskell modulo  the syntactic weirdness.

[17:37] <Su-Shee> I just looked into the code; I liked pugs.

[17:43] <arnsholt> PerlJam: Perl (both of 'em) have a lot of Lisp in them as well

[17:43] <arnsholt> Just with nicer syntax =D

[17:44] <Su-Shee> actually I found haskell quite nice to look at.

[17:44] <PerlJam> Haskell is certainly nicer to look at than scheme or lisp  :)

[17:45] <Su-Shee> well those are at least easy to type :)

[17:47] <PerlJam> I'll probably get the quote wrong, but Larry once said something like "Lisp has all of the visual appeal of oatmeal with fingernail clippings" and that about sums it up  :-)

[17:47] <ash__> do other multi-dispatch languages (like lisp) have similar dispatch mechanisms as perl6's? 

[17:47] <cognominal> Also, with  may national keyboards you need to shift your way to parentheses

[17:49] <cognominal> *many

[17:50] <ash__> oh god... http://github.com/richhickey/clojure/blob/master/src/jvm/clojure/lang/MultiFn.java#L162 to line 300 ish, i hate when i find that in code

[17:51] <PerlJam> wow

[17:51] *** patspam left
[17:51] <ash__> ruby does that too

[17:51] <ash__> but they only do 15 params

[17:51] <ash__> not 20

[17:52] <PerlJam> that's something for thedailywtf.com though

[17:52] *** ashleydev left
[17:53] <ash__> i can understand why they do it, but at the same time, you'd think they could use a stack to push params between functions 

[17:53] <ash__> (like parrot does) 

[17:53] *** ashleydev joined
[17:53] *** colomon left
[17:54] <arnsholt> ash__: Well, if they want to support Java 1.4 (IIRC) they have to do it that way

[17:54] *** ash__ left
[17:54] <arnsholt> Varargs are 1.5 I think

[17:54] *** ash__ joined
[17:55] *** patspam joined
[17:57] <ash__> arnsholt: but you could have an object that holds the params, like an array instead of doing it that way

[17:58] <ash__> if its a speed thing, you could still use the array for >20 items, and have the hand crafted versions for < 20 

[17:59] <arnsholt> That's true =)

[18:01] <ash__> granted, if you have that many parameters you might want to check if the function is still doing something useful, but still... 

[18:03] *** colomon joined
[18:03] <colomon> back in BOF room

[18:10] <awwaiid> will the REPL in Rakudo* keep lexicals accross lines?

[18:11] *** ash__ left
[18:12] *** Ross left
[18:12] <colomon> awwaiid: someday it will

[18:13] <colomon> hopefully someday soon.

[18:13] *** Ross joined
[18:14] <awwaiid> lovely!

[18:19] <colomon> I guess what I should say is that it is a goal for R* to have better lexicals in the REPL.

[18:20] *** ShaneC joined
[18:20] <sorear> lexicals in the REPL are very much within reach

[18:20] <sorear> NQP-rx has them

[18:34] <Tene> re bug reporting, whiteknight (iirc) had an awkward time trying to figure out how to submit a patch to rakudo recently; he did find rt, but gave up on figuring out the RT interface to submit a ticket.

[18:34] * Tene still backlogging

[18:35] <lue> Last I checked, you can only email the bug.

[18:35] <lue> there is no web interface.

[18:36] <Tene> masonkramer: try {} has a default CATCH { $!.handled = True } oslt, but ONLY if the block passed to try has zero other handlers already in it.

[18:36] <Tene> oh, ENOMASAK

[18:36] <Tene> backlogging is weird. :)

[18:37] *** dual left
[18:39] *** kensanata left
[18:42] *** patspam left
[18:47] *** ejs joined
[18:51] *** patspam joined
[18:55] <colomon> My trig test thinning war is getting a bit crazy.

[18:56] <colomon> I may end up with the same number of tests but twice as many different things tested.

[18:58] *** ashleydev left
[18:58] *** mmcleric left
[18:59] <Tene> And I see he figured it out anyway.

[18:59] *** mmcleric joined
[19:01] *** ashleydev joined
[19:04] *** cono left
[19:05] <pmichaud> well, my screen capture of my talk seems to have worked great, but audio capture looks like it was a fail

[19:05] *** Mowah left
[19:06] *** cono joined
[19:07] <colomon> pmichaud: with any luck the conference's video's audio will be better.

[19:07] <pmichaud> colomon: agreed, but my experience at yapc's past is that the videos never get posted.

[19:08] <colomon> we'll just need to cleverly liberate it from them, then!  ;)

[19:08] <TimToady> \o/ my new power supply worketh!

[19:08] <pmichaud> \o/

[19:08] *** SmokeMachine left
[19:08] <colomon> \o/

[19:09] <colomon> crap, got so busy hacking on trig tests I forgot that chromatic's talk was beginning soon.  :(

[19:10] *** patrickas joined
[19:11] <colomon> that's as in, ten minutes ago.

[19:14] *** ash__ joined
[19:14] *** mmcleric left
[19:15] <_sri> TimToady: please take a look at my interpretation of camelia :) http://kraih.com/perl6-camelia-sri.png

[19:15] <colomon> lovely!

[19:15] *** ispeak_ joined
[19:16] <_sri> there's also a matching perl 5 one (transitioning to a 6), http://kraih.com/perl5-camelia-sri.png

[19:16] *** ispeak_ left
[19:16] <pugssvn> r31402 | colomon++ | [t/spec] Partial update to trig test generating code to be smarter. 

[19:17] *** ShaneC left
[19:19] <_sri> TimToady: just poke me if you like them, i'll finish and release them under an open license then

[19:20] *** rokoteko left
[19:27] <pmichaud> _sri: just a note that we don't have a "Rakudo 1.0" in the works.

[19:28] <_sri> pmichaud: that part was just an example, i also have a * variant :)

[19:28] <colomon> TimToady, pmichaud: where are you guys?  I should probably come be social rather than continuing to hack away at trig tests.

[19:28] <pmichaud> I'm in chromatic++'s talk, back row.

[19:29] * TimToady ~~ s/back/front/

[19:29] <Su-Shee> I'm getting a rock star vibe. ;)

[19:29] <TimToady> _sri: I've seen much worse.  :)

[19:30] <colomon> man, all the cool kids are in chromatic's talk!

[19:30] <patrickas> TimToady: I hear _sri++'s camelia even has stylized P and 6 on her wings !

[19:31] *** plainhao left
[19:31] <colomon> I just need to add two more types to the trig tests...

[19:32] <Su-Shee> colomon: once geek, always geek? ;)

[19:32] <colomon> Su-Shee: these sorts of things really bring out my inner introvert.

[19:33] <_sri> http://kraih.com/tpf-camelia-sri.png # draft

[19:33] <Su-Shee> "inner introvert". I'll have to remember that. :)

[19:34] <colomon> Put me in the right situation and I'm an extravert.

[19:35] <colomon> I usually do fine at traditional Celtic music gatherings, for example.

[19:35] <colomon> *extrovert   ?

[19:35] <ash__> "bring out my inner introvert" is somewhat ironic 

[19:36] <ash__> _sri++ nice logos

[19:36] <colomon> hey, I'm having a one-person hackathon here.

[19:36] <_sri> \o/

[19:36] *** snearch left
[19:37] <ash__> colomon: thats not a bad thing, i am hacking on parrot now 

[19:38] <TimToady> I was up there earlier today, and no one was there, but I'm not allowed to bring out my inner introvert at yapc

[19:39] <Su-Shee> TimToady: wouldn't you bring your inner introvert in and not out?

[19:40] * lue is currently typing a "book" for people who wish to get their tenses and such right when time travelling.

[19:41] * lue also thought it was a good idea to start by describing how the temporal bits of language work normally.

[19:42] <pmichaud> I've yet to actually make it to the room.  :)

[19:44] *** patspam left
[19:44] <TimToady> coffee &

[19:45] *** colomon left
[20:03] *** cygx joined
[20:04] *** foodoo left
[20:04] <lue> afk

[20:05] *** Psyche^ joined
[20:06] *** Patterner left
[20:06] *** Psyche^ is now known as Patterner

[20:11] <cygx> I've got a question about the Rakudo-part of the design of try.rakudo.org (see http://moritz.faui2k3.org/tmp/tryrakudo.svg  )

[20:11] <cygx> is there a way for Rakudo to tell the Controller that no more output will be produced as long as no new input is provided?

[20:23] *** SmokeMachine joined
[20:27] <ash__> cygx: do you mean a way to tell if there are any tasks running? 

[20:33] <cygx> that's not exactly equivalent, but it could still be useful (more)

[20:34] <cygx> it would be nice for the frontend to know that it nedd not poll for new output as long as it doesn't send new input

[20:34] <cygx> *need

[20:35] <cygx> this affects the design of the client-server-communication and the uiser interface

[20:35] <pmichaud> btw, I'm giving a talk about Rakudo Star tomorrow at yapc::na.  If anyone has a point they want me to be sureto hit (or to avoid?), please let me know :)

[20:39] <jnthn> pmichaud: Having done similarish recently, my only suggestion is to be very clear on the difference between compiler release vs distribution release.

[20:39] <pmichaud> jnthn: that's really kinda the whole topic of my talk :)

[20:40] <jnthn> pmichaud: Sure, but to instill the difference before digging into what's in the distribution.

[20:41] <pmichaud> I'm also hoping to have stuff in place to record my talk.  I tried it with my NQP talk, and managed to capture the video fine but apparently lost the audio.

[20:41] <pmichaud> (I suspect hardware configuration on my laptop.)  I'll see if I can improve things tonight.

[20:41] <jnthn> I'll be interested to see/listen to what you say, given I've got an R* talk on Saturday in Brussels. :)

[20:42] <pmichaud> obra's keynote this morning was excellent, a good lead-in to some of what I plan to cover in my talk

[20:43] *** SmokeMachine left
[20:43] <obra> heh. "Perl 6 is our kid sister"

[20:45] <pmichaud> I liked that

[20:47] <ash__> is any of this going to be online?

[20:47] <moritz_> did anybody review http://github.com/berekuk/rakudo/commit/e743f0e4fcaa61e4b9a131d7d27475ac77315291 yet?

[20:48] <pmichaud> reviewing now

[20:49] <pmichaud> the line defining WhateverCode needs to go into WhateverCode.pm, not Block.pm

[20:49] <moritz_> agreed

[20:49] <pmichaud> Other than that, +1 from me

[20:49] <pmichaud> (i.e., I approve the patch)

[20:49] <pmichaud> jnthn++ can request revert if it doesn't work

[20:50] <pmichaud> (but it looks pretty normalish to me)

[20:50] <jnthn> oh, let me quickly glance

[20:50] <moritz_> it's the first step to get chained Whatever-currying

[20:51] <jnthn> (slipped my mine, partly thanks to watching some world cup)

[20:51] <Tene> moritz_: why the extra empty stmts node?

[20:51] <pmichaud> normally the first node is reserved for a place to stick parameters and other initializations

[20:51] <jnthn> hmm

[20:51] <pmichaud> we might not need it for WhateverCode nodes

[20:52] <Tene> ah, right

[20:52] <jnthn> I'd have preferred that make_block_from got an extra parameter

[20:52] <jnthn> That defualts to Block

[20:52] <jnthn> But lets you pick the wrapper type

[20:52] <pmichaud> jnthn: I agree, but I'm thinking that may refactor a bit when I do the closures update anyway.

[20:52] <jnthn> Than copy-paste of the code

[20:52] <pmichaud> I'm fine with rejecting in favor of that refactor, if we want to do that.

[20:52] <jnthn> And yes, separate file

[20:52] <pmichaud> (i.e., to add a parameter rather than copy-pasta)

[20:53] <jnthn> Well, I think easiest is to suggest to mmcleric++ those changes. :-)

[20:53] <pmichaud> agreed

[20:53] <pmichaud> so let's do that.

[20:54] *** whiteknight joined
[20:55] <moritz_> I'll reply to his pull request and include a link to this discussion

[20:55] <jnthn> phenny: tell mmcleric Looked over your patch. Please add an optional parameter to make_block_from that's like $wrapper_type = 'Block' and then pass 'WhateverCode' in as that parameter, so as to save a little code duplication. Also, would be good to add a WhateverCode.pm rather than putting it into the Block.pm (will just need a little addition in build/Makefile.in - a line below Block.pm would be fine.)

[20:55] <phenny> jnthn: I'll pass that on when mmcleric is around.

[20:55] <jnthn> phenny: tell mmcleric +1 on overall direction/intent though. :-)

[20:55] <phenny> jnthn: I'll pass that on when mmcleric is around.

[20:55] * moritz_ -> bed now

[20:56] *** jrtayloriv joined
[21:02] <jrtayloriv> Where would I start looking if I wanted to understand how to access functions from C libraries in Perl 6 code? What are some terms I could Google for? What are the major limitations in Parrot/Rakudo that prevent people from doing this, if any?

[21:03] <moritz_> jrtayloriv: http://github.com/jnthn/zavolaj

[21:03] <moritz_> (really going to bed now :)

[21:03] *** mmcleric joined
[21:03] <jrtayloriv> Night night.

[21:03] <jrtayloriv> (and thanks)

[21:07] *** bphillips left
[21:08] *** ejs left
[21:11] *** Su-Shee left
[21:11] *** jrtayloriv left
[21:12] *** tadzik left
[21:19] *** cygx left
[21:19] *** kensanata joined
[21:23] *** xinming_ joined
[21:24] *** patrickas left
[21:26] *** xinming left
[21:29] *** clintongormley left
[21:33] *** Guest23195 left
[21:35] *** ashleydev_ joined
[21:35] *** ashleydev left
[21:35] *** ashleydev_ is now known as ashleydev

[21:44] *** jrtayloriv joined
[21:47] <mmcleric> jnthn: i just sent one more pull request with updated patch

[21:47] <phenny> mmcleric: 20:55Z <jnthn> tell mmcleric Looked over your patch. Please add an optional parameter to make_block_from that's like $wrapper_type = 'Block' and then pass 'WhateverCode' in as that parameter, so as to save a little code duplication. Also, would be good to add a WhateverCode.pm rather than putting it into the Block.pm (will just need a little addition in build/Makefile.in - a line below Block.pm would be fine.)

[21:47] <phenny> mmcleric: 20:55Z <jnthn> tell mmcleric +1 on overall direction/intent though. :-)

[21:47] *** donaldh joined
[21:47] *** donaldh left
[21:48] <mmcleric> off to bed now... 24 hours are suddenly not enough :)

[21:50] *** mmcleric left
[21:54] *** donaldh joined
[21:54] *** donaldh left
[21:54] *** donaldh joined
[21:55] *** donaldh left
[22:01] *** Transformer joined
[22:01] *** betterworld left
[22:01] *** betterworld joined
[22:02] *** Ross left
[22:03] *** jrtayloriv left
[22:03] *** Transformer left
[22:06] <dalek> rakudo: 00efa15 | (Vyacheslav Matjukhin)++ |  (3 files):

[22:06] <dalek> rakudo: WhateverCode type implemented

[22:06] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/00efa155cb1db6ee117b723bf52ca2afc4c58dbc

[22:09] *** tedv joined
[22:11] * jnthn sleep, EEARLYMEETING

[22:12] *** dual joined
[22:13] *** gbacon left
[22:13] *** kthakore joined
[22:13] <kthakore> hola

[22:14] <sorear> Hello.

[22:14] <kthakore> I have a perliminary version of parrotSDL working with parrot 2.5

[22:14] *** eternaleye_ left
[22:14] <kthakore> how do I get rakudo to see it?

[22:14] <kthakore> http://github.com/kthakore/parrotSDL

[22:15] *** Trashlord joined
[22:16] <kthakore> hrm ...

[22:16] <kthakore> sorear: any clue?

[22:17] <kthakore> oh welll

[22:17] <ash__> rakudo: Q:PIR { say "PIR works in here" }

[22:17] <p6eval> rakudo c6a829: OUTPUT«PIR works in here␤»

[22:17] <kthakore> ash__: ??

[22:18] <ash__> in rakudo, if you do Q:PIR you can drop down to pir code directly, so you can load/unload any pir stuff you want, or call other PIR functions or w/e

[22:18] *** colomon joined
[22:18] <kthakore> ash__: but then so perl6 will have to have a wrapper ?

[22:19] <Tene> I had "use SDL:from<parrot>;" working in the past.

[22:19] <kthakore> Tene: then SDL::init() will work?

[22:19] <colomon> rakudo bof tonight @ yapc question

[22:19] <Tene> All you had to do on the parrot side was use the 'parrot' compiler to set up the exports, and that only if you didn't want to export everything in the SDL namespace.

[22:20] <Tene> But that's been long since broken; I gather there's something working again these days, but I don't really know what it is.

[22:20] <Tene> You might look to see what zavaloj does, maybe.

[22:21] <sorear> phenny: tell cygx to check out http://search.cpan.org/perldoc?IO::Pty::HalfDuplex

[22:21] <phenny> sorear: I'll pass that on when cygx is around.

[22:21] <kthakore> Tene: what and where does zavaloj do?

[22:21] <Tene> or ask sorear, iirc

[22:21] <Tene> zavaloj is what's supporting the perl5 interop

[22:21] <Tene> and I think I misremember the name. :)

[22:21] <sorear> Rakudo doesn't currently support PDD21 HLL interop

[22:21] <Tene> zavolaj

[22:22] <sorear> blizkost

[22:22] <sorear> Blizkost uses the PDD31 interface, which is different

[22:22] <pugssvn> r31403 | mmcleric++ | remove skip marker from first WhateverCode tests 

[22:23] <Tene> I'm still grumpy about hll interop being broken repeatedly, after every time I tried to fix it.  I need to get over that.

[22:24] <sorear> I'll try and get PDD21 going again tonight

[22:25] * kthakore is totally lost

[22:25] <kthakore> there really shouldn't be so many interfaces to go through to plug a c library in to perl6

[22:26] <kthakore> this is ridiculous

[22:26] <kthakore> *sigh* oh well

[22:29] <kthakore> Tene:  trhanks I will try it

[22:29] <kthakore> gtg home

[22:30] *** micahjohnston joined
[22:33] *** synth joined
[22:35] <ash__> hmmm i know what i could try working on (later?), something like ruby's RubyInline module for perl6, to facilitate C code in perl6 

[22:36] *** micahjohnston left
[22:36] <Tene> kthakore: You are absolutely right.  There's infrastructure in place and work (slowly) in progress to fix it, but it hasn't been a priority for anyone involved with the project, for the most part.

[22:37] <ash__> i think everyones focused on getting the core of rakudo working right, then they will worry about other features, like interfacing other languages

[22:39] <Tene> I've been a little less burned out lately.  I guess I'll try to look at interop again tonight.

[22:39] *** cdarroch left
[22:39] *** Limbic_Region joined
[22:43] *** colomon_ joined
[22:47] *** colomon left
[22:48] <kthakore> Tene: what is this interface that is coming in place

[22:48] *** ab5tract joined
[22:51] *** synth left
[22:51] *** synth joined
[22:51] *** BinGOs left
[22:51] *** BinGOs joined
[22:52] <ash__> kthakore: http://perlcabal.org/syn/S21.html is the current purposed way of doing it

[22:52] <kthakore> ash__: thx

[22:52] *** eternaleye joined
[22:53] <ash__> parrot would probably look like what Tene wrote up above, "use SDL:from<Parrot>" 

[22:55] <kthakore> ash__: is any one doing the fromc stuff?

[22:57] <Tene> rakudo: use Curses:from<parrot>;

[22:57] <p6eval> rakudo 00efa1: OUTPUT«===SORRY!===␤Parent isn't a Class.␤»

[22:58] <Tene> So... it's at least doing *something* with that.

[22:58] <Tene> Sorry, I can't investigate further until I get home from work.  That'll be about another two hours.

[22:59] <kthakore> no worries

[23:02] *** kensanata left
[23:02] <kthakore> Tene: I think it needs .namespace

[23:03] <kthakore> hmm my perl6 compile is stuck at perl6/Grmar

[23:04] <kthakore> src/Perl6/Grammar.pm

[23:04] <kthakore> it is stuck there

[23:05] <Tene> kthakore: you think that what needs .namespace?

[23:05] <Tene> Curses.pir does have .namespace ['Curses']

[23:06] *** lestrrat is now known as lest_away

[23:08] <colomon_> [Coke]: ping?

[23:09] *** \shade\ left
[23:09] *** shade_ joined
[23:10] <kthakore> Tene: i dunno

[23:11] <sorear> Everyone stop.  All that's needed is to implement PDD-21 importation in Perl6::Module::Loader near line 90

[23:12] <sorear> Parrot has two different and incompatible cross-HLL import APIs

[23:12] <sorear> Rakudo only implements one of them at the moment

[23:12] <Tene> Which is the other, these days?

[23:13] <sorear> PDD21 is the unimplemented one

[23:13] <Tene> Right, and which is the other that rakudo is implementing?

[23:13] <sorear> PDD31

[23:15] <Tene> sorry, AFK now, work emergency.

[23:29] *** mj41_ joined
[23:29] *** masonkramer left
[23:29] *** PacoLinux left
[23:29] *** mberends left
[23:29] *** jaldhar left
[23:29] *** p6eval left
[23:29] *** ajs left
[23:29] *** sykes_ left
[23:29] *** solarion left
[23:29] *** kcwu left
[23:29] *** mj41 left
[23:29] *** cls_bsd left
[23:29] *** c9s left
[23:29] *** kloeri left
[23:29] *** mathw left
[23:29] *** obra left
[23:29] *** IRSeekBot left
[23:29] *** mj41_ is now known as mj41

[23:29] *** ajs joined
[23:30] *** jaldhar joined
[23:31] *** sykes_ joined
[23:31] *** cls_bsd joined
[23:32] *** kloeri joined
[23:32] *** solarion joined
[23:33] <kthakore> sorear: what?

[23:33] *** mathw joined
[23:36] *** p6eval joined
[23:36] <kthakore> jeezus

[23:36] <kthakore> how long dose  src/Perl6/Grammar.pm take to compile?

[23:38] <arnsholt> A while =)

[23:38] *** masonkramer joined
[23:39] *** rgrau left
[23:40] <kthakore> arnsholt: it is like it is compiling a language or something

[23:40] <kthakore> :p

[23:43] *** mberends joined
[23:43] <sorear> also, NQP is really slow

[23:43] <sorear> Parrot in general

[23:44] *** dju left
[23:49] *** IRSeekBot joined
[23:49] *** PacoLinux joined
[23:54] *** solarion left
[23:54] *** solarion joined
[23:55] *** colomon_ left
[23:59] *** skids left
