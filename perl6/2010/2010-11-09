[00:00] *** sftp left
[00:06] *** risou left
[00:12] <colomon> rakudo: say ~<a b c d>

[00:12] <p6eval> rakudo 2c66f9: OUTPUT«a b c d␤»

[00:12] *** kensanata left
[00:13] <colomon> rakudo: say 'a'.fmt("%2s")

[00:13] <p6eval> rakudo 2c66f9: OUTPUT« a␤»

[00:13] <colomon> rakudo: say 'a'.fmt("%-2s")

[00:13] <p6eval> rakudo 2c66f9: OUTPUT«a ␤»

[00:14] *** araujo left
[00:16] *** wamba left
[00:18] *** c1sung_ is now known as c1sung

[00:23] *** araujo joined
[00:24] *** whiteknight joined
[00:44] *** [particle] joined
[00:47] *** orafu left
[00:47] *** Trashlord left
[00:49] *** QinGW joined
[00:54] *** pmb joined
[00:54] <pmb> hi

[00:54] *** rgrau_ left
[00:58] *** cdarroch left
[01:01] *** Raynes joined
[01:05] *** Limbic_Region joined
[01:09] *** Chillance left
[01:14] <colomon> phenny: tell masak It's the sprintf that's killing you, I think.  I've rewritten colors-and-heights to use a bunch of .fmt calls and ~ , and it makes a huge difference

[01:14] <phenny> colomon: I'll pass that on when masak is around.

[01:20] *** nadim left
[01:24] *** dnl- joined
[01:28] *** dnl left
[01:28] *** dnl- is now known as dnl

[01:30] *** dnl left
[01:36] *** ggoebel left
[01:46] *** dnl joined
[01:57] *** dnl is now known as ch3ck

[02:02] <colomon> phenny: tell masak My version is here -- https://gist.github.com/668607 -- and is 8x faster.

[02:02] <phenny> colomon: I'll pass that on when masak is around.

[02:05] <colomon> Huh.  sprintf is more or less just a call straight into Parrot.  Odd that should be so slow....

[02:14] *** ch3ck left
[02:19] *** alester left
[02:26] *** impiou1 joined
[02:26] *** impiou1 left
[02:38] *** am0c^ joined
[02:49] <colomon> oh, never mind.  the trouble is .trans, not sprintf

[02:55] *** cognominal left
[02:57] *** rurban left
[03:01] *** pmb left
[03:02] *** eggled left
[03:03] *** whiteknight left
[03:04] *** nymacro joined
[03:20] *** redicaps joined
[03:26] *** agentzh joined
[03:32] *** lidden left
[03:37] <dalek> bench-scripts: 0b7573c | colomon++ | trans-sprintf.pl:

[03:37] <dalek> bench-scripts: Test .trans and sprintf.

[03:37] <dalek> bench-scripts: review: https://github.com/perl6/bench-scripts/commit/0b7573c3caa23c0019d2586bbd425ee1dc0bac19

[03:51] *** nymacro left
[04:03] *** nymacro joined
[04:09] <sorear> hi

[04:14] *** Limbic_Region left
[04:14] *** satyavvd joined
[04:16] *** orafu joined
[04:19] <cotto> does masak generally prefer to have his last name spelled with an umlaut?  It doesn't have one in parrot's CREDITS.

[04:21] *** _twitch joined
[04:29] <dukeleto> masak: ping!

[04:29] <dukeleto> masak: ^^^

[04:29] * dukeleto has to regenerate the parrot.git repo

[04:29] <dukeleto> so if you want something changed that is easy, now is the time. But please don't make my life more difficult for no reason.

[04:30] <dukeleto> Now as in "now"

[04:30] <sorear> dukeleto: masak isn't even online

[04:30] <dukeleto> sorear: he tab completes, he *must* be online

[04:33] <sorear> he doesn't tab for me

[04:33] <dukeleto> masak doesn't use an umlaut in rakudo.git

[04:33] <dukeleto> so i am not going to change what he has in CREDITS

[04:33] <sorear> mas<tab> = masonkramer, masonkramer

[04:35] *** redicaps left
[04:35] <dukeleto> sorear: it was a joke. Laugh. Take a deep breath. Laugh again. You can go now.

[04:45] *** REPLeffect joined
[05:02] *** eternaleye left
[05:02] *** eternaleye joined
[05:06] *** kanishka left
[05:12] <dalek> niecza: ac003e7 | sorear++ | src/ (2 files):

[05:12] <dalek> niecza: Allow inspection of role parameters

[05:12] <dalek> niecza: review: https://github.com/sorear/niecza/commit/ac003e77cc1dee9f85730fa38102e6f3f08e0c56

[05:12] <dalek> niecza: 131fa77 | sorear++ | / (3 files):

[05:12] <dalek> niecza: Encode variable name information in LAD trees

[05:12] <dalek> niecza: review: https://github.com/sorear/niecza/commit/131fa773623d51549ad6c3c3c4e48432958be3d5

[05:12] <dalek> niecza: 13cdb07 | sorear++ | v6/ (2 files):

[05:12] <dalek> niecza: Fix heredoc tweaking

[05:12] <dalek> niecza: review: https://github.com/sorear/niecza/commit/13cdb074f72c688e114c4a7d248124a08285b125

[05:17] *** redicaps joined
[05:38] *** lue joined
[05:38] <lue> ohai o/

[05:38] <phenny> lue: 08 Nov 11:55Z <masak> tell lue thanks for the patch at https://gist.github.com/667105 -- I see one tiny error on L28 (which is easy to correct), and I'd like to discuss how strings interact with ++ and --. apart from that, it looks very good.

[05:44] <dukeleto> A new parrot.git is born. Please do a "git pull --force" to git it.

[05:44] * dukeleto had to fix some bugs in the repo

[05:53] *** am0c joined
[06:02] *** nymacro left
[06:18] *** redicaps left
[06:21] *** xabbu42 joined
[06:25] *** nymacro joined
[06:28] *** mberends left
[06:52] *** wtw joined
[07:00] *** toebu joined
[07:00] *** toebu is now known as TobiOetiker

[07:01] *** kaare joined
[07:01] *** kaare is now known as Guest5940

[07:18] *** orafu left
[07:18] *** orafu joined
[07:36] <sorear> TimToady: How does Any decide whether to stringify as "" or ""-with-warning or "Any()"?

[07:38] <sorear> Why isn't it possible for parametric roles to have parameters in method names?

[07:40] *** tgrim joined
[07:42] *** TobiOetiker left
[07:48] *** xabbu42 left
[07:50] *** nadim joined
[07:51] *** am0c left
[08:10] *** am0c joined
[08:16] *** nymacro left
[08:26] *** justatheory left
[08:39] *** meppl joined
[08:49] *** kensanata joined
[08:57] *** wamba joined
[08:58] *** daxim joined
[09:15] * sorear out

[09:26] *** kensanata left
[09:33] *** Trashlord joined
[09:41] *** jasonmay_ joined
[09:41] *** nrr left
[09:41] *** wolveria1 joined
[09:41] *** plobsing_ joined
[09:42] *** nrr` joined
[09:42] *** flussence_ joined
[09:42] *** perigrin_ joined
[09:42] *** broquain1 joined
[09:42] *** rokoteko_ joined
[09:42] *** sjn_ joined
[09:47] *** flussence left
[09:47] *** LionMade0fLions left
[09:47] *** jasonmay left
[09:47] *** plobsing left
[09:47] *** broquaint left
[09:47] *** wolverian left
[09:47] *** hatseflats left
[09:47] *** sjn left
[09:47] *** s1n left
[09:47] *** thepler left
[09:47] *** maluco left
[09:47] *** perigrin left
[09:47] *** rokoteko left
[09:48] *** thepler joined
[09:48] *** xabbu42 joined
[09:49] *** LionMade0fLions joined
[09:49] *** maluco joined
[09:50] *** s1n joined
[09:50] *** hatseflats joined
[09:57] *** cjk101010 joined
[10:04] *** QinGW left
[10:06] *** wamba left
[10:10] *** dakkar joined
[10:22] *** masak joined
[10:22] <masak> morning, #perl6

[10:22] <phenny> masak: 01:14Z <colomon> tell masak It's the sprintf that's killing you, I think.  I've rewritten colors-and-heights to use a bunch of .fmt calls and ~ , and it makes a huge difference

[10:22] <phenny> masak: 02:02Z <colomon> tell masak My version is here -- https://gist.github.com/668607 -- and is 8x faster.

[10:22] <masak> colomon++

[10:22] <masak> odd. doesn't .fmt use printf?

[10:24] <tadzik> o/

[10:24] <moritz_> masak: maybe sprintf scales O(bad) with the number of formats used

[10:25] <masak> that might be it.

[10:25] *** flussence_ is now known as flussence

[10:25] <moritz_> do we redispatch to the parrot printf?

[10:26] <masak> suspect so.

[10:28] *** masonkramer left
[10:29] *** masonkramer joined
[10:29] <moritz_> rakudo: say time - time

[10:29] <p6eval> rakudo 2c66f9: OUTPUT«0␤»

[10:29] <moritz_> rakudo: say now - now

[10:29] <p6eval> rakudo 2c66f9: OUTPUT«-0.178533475026567␤»

[10:30] <tadzik> phenny: tell colomon what's wrong with neutro?

[10:30] <phenny> tadzik: I'll pass that on when colomon is around.

[10:33] <tadzik> masak++ # druid working

[10:39] <masak> some happy tweets: http://twitter.com/paxindustria/status/1827139309535233 http://twitter.com/xquery/status/1907273655910400

[10:40] <mathw> masak: the first one is particularly nice, I think

[10:41] <mathw> especially for the person who gave the talk :D

[10:41] *** broquain1 is now known as broquaint

[10:41] <masak> indeed.

[10:43] <moritz_> any idea which talk it referred to?

[10:43] <masak> new rule: every time you suggest a "special sigil" on p6l, you lose. even if you do so hesitatingly.

[10:45] <moritz_> +(1..Inf).pick

[10:45] <daxim> speccers: steal the syntax for inclusive/exclusive ranges from Gosu - http://developers.slashdot.org/story/10/11/09/0510258/Gosu-Programming-Language-Released-To-Public

[10:46] <masak> but we have inclusive/exclusive ranges...

[10:46] <moritz_> daxim: so what's their syntax?

[10:46] <daxim> :o

[10:46] <daxim> 1|..|10   open interval (equals 2..9)

[10:47] <masak> daxim: 1 ^..^ 10

[10:47] <moritz_> I don't see how that's better or worse than 1^..^10

[10:47] <masak> in Perl 6.

[10:47] <daxim> kick-ass

[10:47] <masak> my thought exactly.

[10:47] <daxim> see, I didn't even know it was there

[10:47] <mathw> But now you do

[10:47] <masak> daxim: clearly you haven't studied the Periodic Table of Operators enough :)

[10:47] <mathw> So today's not a complete loss

[10:48] <moritz_> ours has the advantage you can even say ^10

[10:48] <moritz_> whereas |10 has a completely different meaning

[10:48] <moritz_> (at least in Perl 6 :-)

[10:49] <daxim> then, have a look at the Gosu intro whether there's anything else worth cribbing

[10:51] <masak> sure thing.

[10:51] <moritz_> seems like they stole the idea to use -> for lambdas :-)

[10:52] <moritz_> var file = new File( "someFile.txt" )

[10:52] <moritz_> file.write( "That was easy" )

[10:52] <moritz_> I like that example :-)

[10:52] <mathw> Haskell also uses -> for lambdas though... just in Haskell, it appears in a different place and means a different thing

[10:52] <mathw> moritz_: I'm always suspicious of easy examples. I always want to see real code

[10:53] <mathw> But it is a nice example to bring a smile to the face

[10:53] <moritz_> aye

[10:53] <masak> what do they do about opening and closing the file?

[10:53] <masak> are such ideas outdated?

[10:53] <moritz_> from a first glance the syntax looks pretty neat

[10:53] <moritz_> I just don't like that lambdas are open-ended

[10:54] <moritz_> \ s -> do something with s

[10:54] <mathw> hah that's Haskell syntax :)

[10:54] <masak> agreed.

[10:54] <moritz_> there's no final delimiter, so if you write big ones, it's hard to see where it ends

[10:54] <moritz_> and you have to rely on outer parens

[10:54] <mathw> hmm no layout rule?

[10:54] *** ggoebel joined
[10:55] <masak> where are all these neat JVM languages sprouting up from? is there a JVM language construction kit somewhere?

[10:55] <moritz_> hard to tell from the examples

[10:55] <moritz_> var orderedByLength = listOfStrings.orderBy( \ s -> s.length() )

[10:55] <masak> hm. they have "as String" for conversions where Perl 6 has ".Str"

[10:56] <mathw> "as String" is a bit more Java-ish in influence

[10:56] <daxim> -> takes a block if it's not just a single expression   {}

[10:56] <moritz_> daxim: ah, that's nicer

[10:56] <mathw> or Boo

[10:56] <moritz_> mathw: Perl 6 also has "as Str" (in signatures)

[10:56] <mathw> moritz_: true

[10:57] <moritz_> ++ for using "as String" and not "to String" :-)

[10:58] <mathw> yes "as" is much nicer conceptually I think

[11:02] <moritz_> "to" really sounds like an in-place conversion

[11:02] <mathw> yup

[11:03] *** kensanata joined
[11:10] *** sjn_ is now known as sjn

[11:11] <masak> cotto: I'm almost entirely umlaut-agnostic when it comes to my last name. I like when it's there but don't mind when it isn't.

[11:12] * moritz_ would mind misplaced umlauts in his name :-)

[11:13] <masak> well, "misplaced" can mean two things. I don't like the "Masäk" spelling.

[11:14] <daxim> M»ö«sak

[11:14] <masak> :)

[11:15] <masak> sushi &

[11:15] <moritz_> well, 'Möritz' or so was what I meant with mis-placed umlauts in my name :-)

[11:16] <masak> ahh, "mis-placed" with a dash. that's a third meaning :P

[11:17] <masak> (the first two are "wrongly placed" and "wrongly omitted", by the way)

[11:17] <masak> really &

[11:49] *** satyavvd left
[11:50] *** am0c left
[12:09] *** [particle] left
[12:10] <colomon> masak: sorry, I should have added a third message.  it's not sprintf that's the problem, it's .trans

[12:10] <phenny> colomon: 10:30Z <tadzik> tell colomon what's wrong with neutro?

[12:10] *** [particle] joined
[12:11] <colomon> tadzik: step 1 is your github connection for projects.list no longer works after recent changes there.

[12:12] <colomon> tadzik: step 2 is that neutro's copy of perl6-File-Tools no longer tests cleaner for me on the Mac, so it won't install there.  (normal perl6-File-Tools works fine for me, I haven't investigated the difference yet.)

[12:14] *** agentzh left
[12:14] <masak> colomon: yes, I saw that in the backlog later.

[12:15] <masak> colomon: thanks for your exploratory work.

[12:21] *** [particle]1 joined
[12:21] *** nymacro joined
[12:21] *** [particle] left
[12:29] *** bluescreen joined
[12:30] *** bluescreen is now known as Guest6493

[12:30] <masak> bbkr++ # I/O suggestion for perl6advent

[12:32] *** Teratogen joined
[12:32] <Teratogen> gosh

[12:32] <Teratogen> I am unbanned! =)

[12:33] <masak> Teratogen: welcome back!

[12:33] <moritz_> proof yourself worthy :-)

[12:34] <masak> moritz_: sounds like something a math teacher would say :)

[12:34] <masak> Teratogen: ooh, you're the "dammit" guy!

[12:35] <masak> Teratogen: just to clear this up from the start, people here have been getting Perl 6 "out the door" for years and years.

[12:35] <moritz_> masak: I count that as a compliment :-)

[12:36] <masak> Teratogen: claiming otherwise is deluded, confusing, and not very gentlemanlike.

[12:37] <masak> Teratogen: as a general pro tip, I would suggest that you spend less energy clamoring for Perl 6, and more energy trying it out. have a nice day.

[12:39] *** toebu joined
[12:47] *** raj joined
[12:48] <Teratogen> masak is there a definitive version of Perl 6 out yet?

[12:49] <masak> Teratogen: is there a definitive version of Perl 5 out yet?

[12:49] <jnthn> masak: (is there a JVM language construction kit) Hopefully some day in the not too distant future, Perl 6 grammars + NQP + PAST. ;)

[12:49] <masak> jnthn: \o/

[12:50] <jnthn> <- ill :/

[12:50] <masak> jnthn: :/

[12:50] <masak> get well soon!

[12:50] <masak> like, by Friday.

[12:50] <masak> :)

[12:50] <jnthn> I hope so, I spend tomorrow and Thursday teaching.

[12:50] <jnthn> So long as I get better from here rather than worse, it should be OK.

[12:51] <jnthn> Clearly when you're here we must go for a curry to do way instain bacteria.

[12:51] <masak> yay! do way instain!

[12:52] <jnthn> .oO( which harm jnthn who cannot fright back! )

[12:52] <jnthn> Oh no, it was a ?, not a !

[12:52] <jnthn> ...I know "how is babby formed" too well...

[12:52] <masak> :D

[12:53] <Teratogen> Perl 5 is under ferocious development

[12:53] <Teratogen> I have v5.10.1 on my machine!

[12:54] *** nymacro left
[12:54] <jnthn> The ferocicity is such that you could even have 5.12 on it. ;)

[12:54] <masak> and soon 5.14

[12:54] <masak> Teratogen: but you didn't answer my question.

[12:55] <Teratogen> the specification for Perl 5 is the source code for Perl 5

[12:55] <takadonet> morning all

[12:55] <masak> Teratogen: that's also not an answer.

[12:55] <masak> takadonet: mroing!

[12:55] <takadonet> masak: how are u sir?

[12:56] <masak> takadonet: I'm fit and healthy, and my tummy is full of sushi. and u, sir?

[12:56] <Teratogen> there is always a definitive version of Perl 5 out!

[12:56] <Teratogen> the latest version! =)

[12:56] <masak> I find the Rakudo Star releases to be very definitive.

[12:56] <Teratogen> I guess what I am asking is there a version of Perl 6 that compiles directly to Parrot code?

[12:57] <masak> of course there is.

[12:57] <Teratogen> what is it written in?

[12:57] <Teratogen> C?

[12:57] <takadonet> masak: just got in for work and looking for any new commits for rakudo :)

[12:57] <masak> Teratogen: look, what use is it complaining about things not being there yet if you have no clue whatsoever what's there?

[12:57] <Teratogen> that's true =)

[12:57] <masak> Teratogen: even as trolls go, you're quite a failure.

[12:58] <masak> Teratogen: go read up.

[12:58] <Teratogen> I am a failed troll =(

[12:58] <takadonet> masak: perhaps he is a happy troll?

[12:59] <masak> takadonet: is it snowing yet in central Canada?

[13:00] <masak> takadonet: I think there are so many interesting ways to be a troll. I refuse to argue with substandard trolls. that's just a waste of my time.

[13:01] <takadonet> masak: should be but little warmer then normal around here

[13:04] <takadonet> masak: do you know where pmichaud is?

[13:04] <masak> takadonet: Texas?

[13:04] * masak .oO( current state of pmichaud... )

[13:11] *** plainhao joined
[13:13] <masak> moritz_: re http://rt.perl.org/rt3/Ticket/Display.html?id=68498 -- do you have any opinion about the resolution of this one? has it ever been decided how it is to be determined whether an attribute "has been initialized"?

[13:14] <masak> if you ask me, I'm not sure we need a third layer, besides the one with the actual value, and the defined/undefined layer. adding an initialized/uninitialized layer seems like complicating things a lot just to allow people to initialize things with an undefined value.

[13:16] <jnthn> I wouldn't miss it. But then, I'm an implementor. ;-)

[13:17] <masak> as an end user, I wouldn't miss it either.

[13:19] <jnthn> Well, that's the more important measure. :-)

[13:20] <plobsing_> phenny: tell arthur-_ how did you obtain libjit? it doesn't appear to be packaged for this distro. did you build from source? which sources did you use?

[13:20] <phenny> plobsing_: I'll pass that on when arthur-_ is around.

[13:22] *** Patterner left
[13:23] <colomon> masak: we've had a couple of days with snow here, but nothing that stuck to the ground yet.  (though apparently my parents, 2 hours' drive southeast, did wake up with a layer of white on the ground a few days ago -- melted by lunch.)

[13:24] <jnthn> afk for a bit

[13:24] <masak> colomon: we got our layer of white today. but to be honest it looks very wet.

[13:24] <arthur-_> plobsing_: from git

[13:24] <phenny> arthur-_: 13:20Z <plobsing_> tell arthur-_ how did you obtain libjit? it doesn't appear to be packaged for this distro. did you build from source? which sources did you use?

[13:25] <arthur-_> ( so, from source )

[13:25] <arthur-_> plobsing_: url = https://github.com/plobsing/parrot-libjit-fb.git

[13:26] *** MayDaniel joined
[13:28] <arthur-_> oh !

[13:28] <arthur-_> libjit

[13:28] <arthur-_> not parrot-libjit

[13:28] <arthur-_> sorry

[13:29] <arthur-_> plobsing_: from http://freshmeat.net/projects/libjit/

[13:30] <arthur-_> built from source

[13:30] <plobsing_> so you used the 0.1.2 sources?

[13:30] <arthur-_> yes

[13:30] <masak> not a single use of sub-form &elems in the spectest suite... :/

[13:30] *** xinming joined
[13:30] <arthur-_> libjit-0.1.2

[13:34] *** Psyche^ joined
[13:34] *** Psyche^ is now known as Patterner

[13:39] *** MayDaniel left
[13:42] *** jasonmay_ is now known as jasonmay

[13:45] *** ggoebel left
[13:47] <masak> hah! by the time of A12, we had 'as' as a coercion operator! :)

[13:49] <masak> with the extra twist that 'as' could be omitted in assignments if the lhs was typed. freaky.

[13:50] *** ggoebel joined
[13:54] *** vxz left
[13:54] *** raj left
[14:01] <flussence> rakudo: say sprintf('%d %1$d', 4);

[14:01] <p6eval> rakudo 2c66f9:  ( no output )

[14:01] <flussence> rakudo: say sprintf('%d', 4);

[14:01] <p6eval> rakudo 2c66f9: OUTPUT«4␤»

[14:02] <flussence> what would I need to do to get that (Str::SprintfFormat.index) to work?

[14:03] *** ggoebel left
[14:08] *** ggoebel joined
[14:08] <masak> flussence: modify the source code of sprintf.

[14:10] <flussence> shouldn't be too hard... .oO( famous last words? )

[14:11] <masak> I'm trying to find it for you, but I'm not too familiar with Parrot architecture.

[14:12] <flussence> I tried once before and got nowhere... :(

[14:12] <masak> closest I've come so far is src/ops/string.ops, but it just delegates to something, I don't know what.

[14:12] <flussence> if nothing else, I'll at least try to write tests for it

[14:13] <flussence> (after $dayjob... bah)

[14:14] *** wallberg joined
[14:16] <masak> again, probably best make it Parrot tests.

[14:17] <dukeleto> did i hear "Parrot tests" ?

[14:17] <flussence> maybe!

[14:17] <masak> we're talking about embracing/extending sprintf.

[14:17] <dukeleto> parrot's sprintf ?

[14:18] <dukeleto> what do y'all want to extend about it?

[14:18] <flussence> it's more a case of making it work as documented... the %1$d syntax is missing right now :(

[14:21] *** [particle]1 is now known as [particle]

[14:21] *** wallberg left
[14:21] <masak> I'd actually like to extend it. this is something that's been bugging me for a while.

[14:22] <masak> Perl 6 has a %C directive, quite powerful, would be nice to have.

[14:22] <masak> but it needs to be added at the Parrot level.

[14:22] *** nsh_ left
[14:22] *** sbp left
[14:22] <masak> it's one of those two-layer problems where nothing happens because few or none have the specific know-how needed to add it.

[14:23] <masak> just like the DESTROY/DESTROYALL submethods.

[14:23] <masak> (also, pehaps the need for these features isn't super-high)

[14:26] <dukeleto> sorear: ping

[14:26] <dukeleto> masak: is there a description of what %C does, and what "%1$d" is supposed to do?

[14:27] <dukeleto> masak: if y'all can write failing tests, then maybe i can get parrot people to make them pass

[14:27] <masak> dukeleto: it's a deal.

[14:28] <masak> dukeleto: there's some spec about both, in S32/Str.

[14:28] <masak> =item sprintf

[14:28] *** wallberg joined
[14:29] *** KyleHa joined
[14:30] *** fhelmberger joined
[14:30] *** ch3ck joined
[14:31] *** Guest6493 left
[14:32] *** Guest6493 joined
[14:33] <ch3ck> m0insen

[14:37] *** wallberg left
[14:39] *** ggoebel left
[14:43] *** tzhs joined
[14:43] *** ggoebel joined
[14:50] <masak> ch3ck: \o

[14:52] <ch3ck> morrn masak 

[14:53] <masak> well, mid-afternoon, really.

[14:53] *** nymacro joined
[14:53] *** Guest5940 left
[14:54] *** kanishka joined
[14:55] <ch3ck> we follow larry's place :>

[14:56] <ch3ck> he's still yawning

[14:57] *** sftp joined
[15:03] *** cjk101010 left
[15:20] *** plobsing joined
[15:21] *** MayDaniel joined
[15:22] *** wtw left
[15:22] *** _twitch left
[15:22] <daxim> masak, why didn't you tell us you were coming to vienna? :(  we could have made you a star guest for apw2010

[15:22] <masak> thank you. :) I wasn't there for the Friday, only Wednesday and Thursday.

[15:23] <masak> for what it's worth, I enjoyed Vienna. I didn't have a lot of time for Perl though, I was there in other business.

[15:26] * jnthn back

[15:32] <takadonet> jnthn: welcome back

[15:32] <plobsing> phenny: tell arthur-_ I reproduced your error. I debugged by running 'parrot -w perl6.pbc mongo.p6 2>&1 | grep libjit'. Turns out it isn't finding /usr/local/lib/libjit.so.0 . You need to tune your system to be able to find this library. You can configure ld.so.config/ldconfig to treat /usr/local/lib as a library path, install the library into a location that is already a library path (eg:...

[15:32] <phenny> plobsing: I'll pass that on when arthur-_ is around.

[15:32] <plobsing> .../usr/lib), use LD_LIBRARY_PATH, or add it only to parrot search paths by running parrot with the -X option.

[15:34] *** toebu left
[15:34] *** wolveria1 is now known as wolverian

[15:36] *** pmb joined
[15:36] <pmb> hi

[15:37] <PerlJam> greetings

[15:37] <masak> hi pmb!

[15:37] <pmb> :)

[15:37] <pmb> hello hello

[15:37] *** estrabd_afk is now known as estrabd

[15:43] <jnthn> #phasers today?

[15:48] *** raj joined
[15:53] *** cognominal joined
[15:59] *** wallberg joined
[16:01] *** MayDaniel left
[16:02] *** _kaare joined
[16:05] *** cjk101010 joined
[16:07] <dukeleto> sorear: ping

[16:09] *** toebu joined
[16:12] *** tzhs left
[16:14] *** sECuRE left
[16:15] *** raj left
[16:16] *** risou joined
[16:17] <masak> jnthn: hope so. it's in 2h43m, right?

[16:20] *** Trashlord left
[16:22] *** timbunce joined
[16:25] *** rgrau left
[16:25] <jnthn> masak: Right, 8pm our thyme.

[16:25] <masak> sage words.

[16:26] *** sECuRE joined
[16:26] *** timbunce left
[16:26] *** plobsing left
[16:27] <jnthn> I wonder if we'll talk about the parsely tree.

[16:28] <arthur-_> plobsing_: parrot test.pir 

[16:28] <arthur-_> ParrotLibrary

[16:28] <phenny> arthur-_: 15:32Z <plobsing> tell arthur-_ I reproduced your error. I debugged by running 'parrot -w perl6.pbc mongo.p6 2>&1 | grep libjit'. Turns out it isn't finding /usr/local/lib/libjit.so.0 . You need to tune your system to be able to find this library. You can configure ld.so.config/ldconfig to treat /usr/local/lib as a library path, install the library into a location that is already a library path (eg:...

[16:29] <masak> std: class IDholder {}; class Collar is IDholder {}; class LegBand is IDholder {}; role Pet[IDholder $id: $tag] {}; class Dog does Pet[Collar, "fido"] {}

[16:29] <p6eval> std a194beb: OUTPUT«ok 00:01 124m␤»

[16:29] <masak> rakudo: class IDholder {}; class Collar is IDholder {}; class LegBand is IDholder {}; role Pet[IDholder $id: $tag] {}; class Dog does Pet[Collar, "fido"] {}

[16:29] <p6eval> rakudo 2c66f9: OUTPUT«===SORRY!===␤Lexical 'self' not found␤»

[16:29] <masak> jnthn: any comment? :)

[16:29] <arthur-_> plobsing_: but pir::loadlib__ps('libjit_fb') or die 'could not load libjit_fb'; still dies

[16:30] <jnthn> role Pet[IDholder $id: $tag] {}

[16:30] <jnthn> What's that colon doing there?

[16:30] *** timbunce joined
[16:30] *** nymacro left
[16:30] <masak> jnthn: it's a disambiguator. it's from A12.

[16:30] <jnthn> wtf

[16:31] <jnthn> why are you using syntax from A12

[16:31] <jnthn> Rather than the correct syntax in S12?

[16:31] <jnthn> Well, probably S14 now.

[16:31] <masak> I know, I know.

[16:31] <jnthn> : is used for invocant nowadays.

[16:31] <jnthn> It should probably have complained at you a bit differently

[16:31] <masak> ah, it used to be longname separator?

[16:31] *** wallberg left
[16:31] <jnthn> I guess so.

[16:31] <jnthn> It's ; now

[16:31] <jnthn> No

[16:31] <jnthn> ;;

[16:31] <masak> A12 says "If you want to parameterize the initial value of a role attribute, be sure to put a colon if you don't want the parameter to be considered part of the long name"

[16:31] <jnthn> The ; is conjectural.

[16:32] <jnthn> OK

[16:32] <jnthn> Then you want ;;

[16:32] <masak> right.

[16:32] <jnthn> The error could be more awesome but isn't surprising either.

[16:32] <masak> nod.

[16:32] <masak> I think STD could complain, though.

[16:32] <jnthn> You're trying to use something as an invocant, in a place where there is no invocant.

[16:32] <jnthn> Aye, true.

[16:32] <jnthn> $INVOCAT_OK should probably trigger there and say "huh, what?"

[16:33] *** sftp_ joined
[16:33] <jnthn> er, the thing that checks $*INVOCANT_OK

[16:33] *** sftp left
[16:33] <jnthn> Not sure if we ported $*INVOCANT_OK into Rakudo's grammar yet, mind.

[16:34] <jnthn> Maybe a good weekly challenge if not :)

[16:34] <masak> aye.

[16:35] *** vxz joined
[16:36] * jnthn hopes his bad throat goes away soon, given he's meant to spend most of tomorrow talking.

[16:37] * moritz_ hopes only the badness of the throat goes away, but the throat itself should stay :-)

[16:37] *** cls_bsd left
[16:37] <jnthn> Maybe I should take a jar of honey as well as my laptop. :)

[16:37] <jnthn> Preferable. :P

[16:37] <PerlJam> hey, I just noticed that parrot is on github now ...  Has anyone worked out how to do the rakudo build based on a gitted parrot?

[16:37] <moritz_> not yet

[16:37] <moritz_> I mean to give it a shot tonight, but I'd love it if somebody else gets there faster

[16:38] <jnthn> ++moritz_

[16:38] *** MayDaniel joined
[16:38] *** toebu_ joined
[16:39] *** toebu_ is now known as TobiOetiker[T7]

[16:45] <masak> huh, A12 has the 'handles' trait working on method declarations. wild.

[16:45] *** toebu left
[16:46] <jnthn> .oO( "Traits gone wild!" )

[16:46] *** orafu left
[16:47] <masak> "The Apocalypse they didn't want you to see!"

[16:47] <jnthn> It's been years since I read A12. :)

[16:48] *** orafu joined
[16:48] <masak> I'm glad we got rid of array- and hash-based delegation.

[16:48] <jnthn> That was in S12 until fairly recently.

[16:48] <jnthn> It was around sufficiently recently that Rakudo once implemented it, iirc.

[16:48] <PerlJam> I  thought rakudo has it implemented now.

[16:48] <masak> aye.

[16:49] <jnthn> Oh. :)

[16:49] <masak> don't think so.

[16:49] <jnthn> I don't either

[16:49] <jnthn> It was in alpha

[16:49] <jnthn> But didn't make it into ng 'cus handles was totally re-done then.

[16:49] <PerlJam> perhaps I've got some faulty wiring in my memory circuits

[16:49] <masak> rakudo: class A { has @.x handles <elems> }; say A.new(:x(1, 2, 3)).elems

[16:49] <p6eval> rakudo 2c66f9: OUTPUT«3␤»

[16:49] <masak> \o/

[16:49] <masak> so, it's gone.

[16:49] <jnthn> The other funny one on that front was in S06

[16:50] <jnthn> sub foo(:@bar) { say @bar.perl }; foo(bar => 1, bar => 2); # guess what this was once spec'd to do :)

[16:50] <masak> jnthn: you got rid of that!?

[16:50] <masak> I never noticed.

[16:50] <jnthn> I...hope so

[16:50] <jnthn> I certainly never implemented it

[16:50] * masak czechs

[16:51] <jnthn> If it's still there, feel free to actually kill it.

[16:51] <jnthn> It's bonkers.

[16:51] *** domidumont left
[16:51] <jnthn> Though, admittedly, sorta cute. :)

[16:51] *** pmb left
[16:51] <masak> yup, still there.

[16:51] <jnthn> whoa :)

[16:51] <masak> S06:745.

[16:51] * jnthn handes masak++ the matches ;)

[16:52] <masak> jnthn: you remove it. I have a feeling TimToady might smite whoever does it. :P

[16:52] <masak> he has been defending that bit before.

[16:52] <jnthn> :|

[16:52] <jnthn> OK, leave it then. :)

[16:52] <jnthn> I can get smote.;

[16:52] <masak> :P

[16:52] <jnthn> I'd rather get smote than have to implement it. :P

[16:53] <jnthn> ...is taht actually the correct conjugation? I *think* smite is ablauty... :)

[16:53] <masak> $MAX_IMPLEMENTOR_INCONVENIENCE

[16:53] <masak> jnthn: "smitten"?

[16:53] <jnthn> No

[16:53] <PerlJam> heh

[16:53] <jnthn> I think that's a different word

[16:53] <jnthn> "I'm smitten with Ukrainian girls."

[16:53] <jnthn> That's quite different to having smited...smote...whatever.

[16:53] <jnthn> :)

[16:53] <masak> what's the present tense of "smitten"?

[16:54] <jnthn> It's a noun, ain't it?

[16:54] <daxim> to smite

[16:54] <masak> no, it's clearly a participle.

[16:54] <jnthn> oh

[16:54] <jnthn> it's an adjective

[16:54] <jnthn> http://dictionary.reference.com/browse/smitten?&qsrc=

[16:54] <jnthn> it means both

[16:54] <masak> participle.

[16:54] <jnthn> d'oh :)

[16:54] *** justatheory joined
[16:54] <daxim> participle

[16:55] <jnthn> Yes, it is :)

[16:55] <masak> people like the FLOSS episode. http://twitter.com/pilif/status/2039873338867713

[16:55] *** orafu left
[16:55] * masak .oO( if it was that excellent, I don't need to listen to the previous episodes... :P )

[16:55] <jnthn> It is an adjective too but then it's unrelated to the verb smite. I guess. :)

[16:56] <masak> I wouldn't be so sure.

[16:56] <daxim> fact: bruce schneier smites exceptions instead of throwing them

[16:57] <jnthn> masak: Hmm. Maybe you're right...it just feels...weird. :)

[16:57] *** orafu joined
[16:57] <jnthn> masak: I'd never considered them as related before :)

[16:58] <jnthn> perhaps from PIE base *(s)mei-  "to smear, to rub," 

[16:58] <jnthn> (says the link I posted)

[16:59] <masak> the rubbing theory of romance.

[16:59] <jnthn> .oO( Mmmm...pie... )

[16:59] <jnthn> masak: Lets, er, not go there. :P

[16:59] * justatheory rubs masak 

[16:59] <masak> I feel... smitten. eww.

[17:00] *** rgrau joined
[17:01] *** dukeleto left
[17:01] <jnthn> http://www.etymonline.com/index.php?term=smitten

[17:02] *** rbuels left
[17:02] *** orafu left
[17:03] *** orafu joined
[17:05] *** timbunce left
[17:05] *** dukeleto joined
[17:05] *** timbunce joined
[17:05] *** rbuels joined
[17:06] <masak> jnthn: I don't think the analogy is that far-fetched. I envision some poor soul struck by lightning or something -- totally comparable to falling in love.

[17:08] <masak> nom &

[17:08] *** timbunce left
[17:08] *** masak left
[17:09] <jnthn> yeah, it sucks when that happens... :P

[17:09] *** rbuels left
[17:10] *** dukeleto left
[17:11] *** sftp_ left
[17:11] *** sftp_ joined
[17:14] *** dukeleto joined
[17:14] *** rbuels joined
[17:16] *** Ross joined
[17:17] *** risou left
[17:20] *** Ross left
[17:20] *** MayDaniel left
[17:21] *** x3nU left
[17:21] *** envi_ joined
[17:22] *** rbuels left
[17:22] *** timbunce joined
[17:22] *** dukeleto left
[17:23] *** envi left
[17:23] <TimToady> sorear> TimToady: How does Any decide whether to stringify as "" or ""-with-warning or "Any()"?

[17:24] <TimToady> what we've said about that in the past is there are two different stringifications

[17:24] *** nsh_ joined
[17:24] <TimToady> .Str is low level and indicates the desire for a printable representation, so that produces "Any()"

[17:24] *** ggoebel left
[17:24] *** sbp joined
[17:25] <TimToady> .Stringy (used by ~) is high level and indicates the desire to get a string to do further string processing with, so ~Any is supposed to do ""-with-warning

[17:25] <TimToady> I note that rakudo does not follow this yet though...

[17:26] *** dukeleto joined
[17:27] <TimToady> it's possible that using .Str for the low level is bad though

[17:27] <jnthn> rakudo: say ~(class { method Stringy { "right" }; method Str { "rong" } })

[17:27] <p6eval> rakudo 2c66f9: OUTPUT«()␤»

[17:28] <jnthn> oh, duh :)

[17:28] *** envi__ joined
[17:28] <colomon> how long till #phasers?

[17:28] <jnthn> rakudo: say ~(class { method Stringy { "right" }; method Str { "rong" } }.new)

[17:28] <p6eval> rakudo 2c66f9: OUTPUT«===SORRY!===␤Confused at line 22, near "say ~(clas"␤»

[17:28] <jnthn> rakudo: say ~((class { method Stringy { "right" }; method Str { "rong" } }).new)

[17:28] <p6eval> rakudo 2c66f9: OUTPUT«rong␤»

[17:28] <jnthn> we're doin it rong

[17:28] <jnthn> colomon: 92 minutes

[17:29] <colomon> yow!  good thing I asked!  #stupid daylight savings....

[17:29] *** ggoebel joined
[17:29] <jnthn> yeah, they caught me out last week too :)

[17:29] *** envi_ left
[17:29] <TimToady> rakudo: say Any.Stringy

[17:29] <p6eval> rakudo 2c66f9: OUTPUT«Method 'Stringy' not found for invocant of class ''␤  in main program body at line 22:/tmp/IPEsTsUJC3␤»

[17:29] <colomon> we don't have Stringy at all yet, do we?

[17:30] <TimToady> rakudo: say Str ~~ Stringy

[17:30] <p6eval> rakudo 2c66f9: OUTPUT«1␤»

[17:30] <moritz_> only in some few cases

[17:30] <colomon> never mind, I see role Stringy is in there now!

[17:30] <moritz_> rakudo: say Bool.Stringy, Bool.Str

[17:30] <p6eval> rakudo 2c66f9: OUTPUT«FalseBool␤»

[17:30] *** kensanata left
[17:31] <bbkr> is there a way to write simple AUTOLOAD? i'm trying to write JSON::RPC and more elegant solution is to use it like $client->methodname($methodparams) than $client->call(method=>$methodname,params=>$methodparams). any ideas?

[17:32] <mkramer> AUTLOAD became CANDO

[17:33] <PerlJam> bbkr: are you writing libs for Lacuna Expanse in Perl 6?

[17:33] <mkramer> bbkr: http://perlcabal.org/syn/S10.html

[17:33] <bbkr> mkramer: thanks, exactly what I need!

[17:34] <moritz_> I don't think it's implemented

[17:34] <bbkr> PerlJam: no, JSON-RPC soI can write GetResponse API wrapper later in P6.

[17:34] *** molaf joined
[17:34] <bbkr> s/sol/so/

[17:36] <mkramer> I remember there was some issue with importation

[17:36] <mkramer> it's not possible for CANDO to install new methods into the class, or something

[17:36] <jnthn> You can easily install new methods in a class today

[17:36] <jnthn> What you can't currently do is trap unhandled dispatches.

[17:40] <colomon> dang, we want p6 Lacuna Expanse libs!  

[17:40] <colomon> ;)

[17:40] * colomon was just checking how long it will take his supply ship to reach his latest colony...

[17:40] <PerlJam> jnthn: surely, that can't be that hard to add  :)

[17:41] <mkramer> my %bag = Bag(1,2,3);  %bag.WHAT() # seriously, what?

[17:41] <bbkr> i don't want to install method into class (because in JSON-RPC list of methods is not known), just want to handle calls to methods that dont exist in my class.

[17:41] <jnthn> PerlJam: It's trivial...in 6model. :)

[17:42] <PerlJam> jnthn: tease!

[17:42] <mkramer> bbkr: it sounds like you're out of luck in rakudo right now, based on what jnthn just said

[17:43] <TimToady> sorear> Why isn't it possible for parametric roles to have parameters in method names?

[17:43] <TimToady> std: method ::($name) ($x) { $x + 1 }

[17:43] <p6eval> std a194beb: OUTPUT«ok 00:01 123m␤»

[17:43] <jnthn> TimToady: ...omg...what?! :-)

[17:43] <jnthn> TimToady: Not that it's all that nasty to support but... :-)

[17:43] <TimToady> assuming $name is a constant

[17:43] <TimToady> or a generic parameter

[17:43] <jnthn> *nod*

[17:43] <TimToady> see sorear++'s question

[17:44] <jnthn> PerlJam: Yes, from a Rakudo point of view I'm teasing. On the other hand, I do have working a implementation that'll handle it that runs on .Net and Parrot by now. :-)

[17:45] <TimToady> rakudo: method ::($name) ($x) { $x + 1 }

[17:45] <p6eval> rakudo 2c66f9: OUTPUT«===SORRY!===␤Indirect name lookups not yet implemented at line 22, near " ($x) { $x"␤»

[17:45] <TimToady> looks like rakudo parses it right too

[17:46] *** alester joined
[17:46] <jnthn> Oh, that's a start at least. :)

[17:47] <jnthn> Can you do stuff like method ::('get_' ~ $name) ($x) { ... }

[17:47] <jnthn> std: method ::('get_' ~ $name) ($x) { ... }

[17:47] <p6eval> std a194beb: OUTPUT«Potential difficulties:␤  $x is declared but not used at /tmp/NzpsYROr_C line 1:␤------> method ::('get_' ~ $name) (⏏$x) { ... }␤ok 00:01 123m␤»

[17:47] <jnthn> whee

[17:48] <TimToady> which is just a warning

[17:49] <TimToady> rakudo: method ::('get_' ~ $name) ($x) { ... }

[17:49] <p6eval> rakudo 2c66f9: OUTPUT«===SORRY!===␤Indirect name lookups not yet implemented at line 22, near " ($x) { .."␤»

[17:53] *** impious joined
[17:54] *** sethp joined
[17:56] *** M_o_C joined
[17:58] *** cdarroch joined
[17:58] *** cdarroch left
[17:58] *** cdarroch joined
[17:59] <TimToady> Util: something is really wonky about your permutation sort; the permuter uses [>] while the sorter uses [le]

[18:00] *** dakkar left
[18:01] <TimToady> oh, wait, I see the indirection now

[18:02] *** wallberg joined
[18:02] <TimToady> was confused because the two routines use @a with different types

[18:04] * TimToady is also suspicious that it's possible to write a more efficient permuter if it keeps the state somewhere besides the last permution

[18:05] *** timbunce left
[18:05] *** timbunce joined
[18:05] <TimToady> seems like a gather/take would be useful somehow

[18:06] <TimToady> another thread of thought is that we could build in the permution generator like other languages do

[18:07] <TimToady> *tation

[18:10] <bbkr> mkramer: indeed, I found no workaround to catch unhandled dispatch. so I allow to provide list of methods to install for now "JSON::RPC::Client.new(methods => <foo bar>)" and install them using ^add_method. and wait for CANDO implementation.

[18:10] <moritz_> bbkr++ # nice workaround

[18:11] *** x3nU joined
[18:20] *** spq1 joined
[18:21] <moritz_> phenny: tell masak re RT #68498, I'm not aware of any resolution (or even resolution approach). Maybe the information could be kept in a contextual hash?

[18:21] <phenny> moritz_: I'll pass that on when masak is around.

[18:25] *** thundergnat joined
[18:25] *** timbunce left
[18:25] <thundergnat> Hi #perl6

[18:26] <PerlJam> greetings thundergnat 

[18:26] <moritz_> holla

[18:26] <colomon> Hi thundergnat!

[18:26] *** sethp left
[18:27] <thundergnat> I took a whack at writing my first perl6 module: Sort::Naturally. It's on github at https://github.com/thundergnat/Sort-Naturally.

[18:27] <PerlJam> thundergnat++ 

[18:27] <thundergnat> Comment, suggestions and dope-smacks welcome. (well not the dope-smacks so much...)

[18:28] <thundergnat> unless completely necessary...

[18:28] *** bbkr left
[18:28] * takadonet git clones it...

[18:28] <moritz_> ooh, nice use of list comprehension in the example

[18:28] <moritz_> my @ips = ((0..255).roll(4).join('.')for 0..99);

[18:29] *** cjk101010 left
[18:30] *** impious left
[18:30] <moritz_> thundergnat: have you added it to the list on https://github.com/perl6/ecosystem/ ?

[18:30] <thundergnat> moritz_: Umm no

[18:30] <moritz_> thundergnat: oh, you didn't have access... now you do

[18:31] <moritz_> thundergnat: if you add it there, it'll appear on http://modules.perl6.org/ after a while

[18:31] *** bbkr joined
[18:32] <colomon> "For liberal values of speedy."

[18:32] <thundergnat> moritz_: I'll give it a try. If I have difficulties I may ask for assitance.

[18:32] <colomon> :)

[18:32] <moritz_> thundergnat++

[18:36] *** mberends joined
[18:37] * moritz_ pushed to branch parrotgit, which starts with the conversion

[18:38] *** timbunce joined
[18:39] *** risou joined
[18:39] *** wallberg left
[18:39] <TimToady> thundergnat: would it help the order-of-magnitude calculation to treat leading 0's as non-numeric?

[18:41] <thundergnat> Timtoady: I experimented with treating leading zeros differently and it made some things better, but led to other odd behaviors. 

[18:42] <thundergnat> I reverted back to the simplest case.

[18:43] <thundergnat> It makes for some oddities under certain circumstances, but sorting numbers as strings is going to be somewhat fragile no matter what.

[18:43] <thundergnat> If you are expecting it to exactly match nemeric sort that is.

[18:44] <thundergnat> *numeric

[18:47] <thundergnat> In practice, what I have is good enough for most circumstances. And makes more sense than perl 5 Sort::Naturally IMO.

[18:48] *** timbunce left
[18:49] *** timbunce joined
[18:51] *** perigrin_ is now known as perigrin

[18:52] *** KyleHa left
[18:52] *** csl joined
[18:55] *** stkowski joined
[18:55] *** timbunce left
[18:56] *** csl left
[18:56] *** timbunce joined
[18:59] <thundergnat> Woo Hoo! After fumbling around a bit, managed to add Sort-Naturally to ecosystem repository.

[19:00] <Util> #phasers time!

[19:00] <thundergnat> I'll figure out git sooner or later.

[19:02] <sjohnson> git!

[19:02] <sjohnson> git is great

[19:04] *** masak joined
[19:04] <masak> mmm, nom.

[19:04] <phenny> masak: 18:21Z <moritz_> tell masak re RT #68498, I'm not aware of any resolution (or even resolution approach). Maybe the information could be kept in a contextual hash?

[19:05] <masak> moritz_: sounds brittle and, again, is it worth it?

[19:05] <moritz_> dunno

[19:07] <tadzik> hello

[19:07] <moritz_> #phasers right now

[19:07] *** kanishka left
[19:11] *** daxim left
[19:13] *** timbunce left
[19:18] *** thundergnat left
[19:23] <sorear> dukeleto: pog

[19:23] <sorear> dukeleto: pog

[19:23] <TimToady> is that a cross between a pig and a hog?

[19:24] *** x3nU left
[19:25] *** molaf left
[19:25] *** x3nU joined
[19:28] <tadzik> colomon: what exactly fails for you?

[19:28] <tadzik> (neutro, file::tools)

[19:29] *** xabbu42 left
[19:31] <colomon> tadzik: https://gist.github.com/

[19:31] *** lamstyle left
[19:32] *** kanishka joined
[19:33] <tadzik> colomon: did you accidentally a part of an url? :)

[19:34] <colomon> tadzik: apparently yes.  :\

[19:34] <colomon> https://gist.github.com/669657

[19:34] <masak> everybody knows you need to accidentally the whole URL... :)

[19:35] <tadzik> oh wait, and projects.list is broken or something

[19:35] <tadzik> colomon: how about with --v?

[19:35] <tadzik> testing will get more verbose

[19:35] *** bbkr left
[19:35] <dukeleto> sorear: pong, in #parrot

[19:35] <colomon> tadzik: oh, yes, projects.list is definitely broken.  You should be able to see that locally if you try to do an update.

[19:36] <tadzik> yeah, just saw it

[19:36] <tadzik> doesn't LWP::Simple like https? :S

[19:36] <tadzik> everything suddenly got so broken

[19:37] <sorear> LWP::Simple doesn't come with https by default

[19:37] <sorear> because of crypto export paranoia

[19:37] <sorear> you need to install Crypt::SSLeay

[19:37] <colomon> tadzik: PERL6LIB=tmplib bin/neutro --v neutro      appears to generate the exact same output I've already sent you.

[19:37] <tadzik> well, it's even perl6-lwp-simple even

[19:37] <colomon> sorear: is that a p6 module?

[19:37] <tadzik> s:2nd/even//

[19:37] <masak> github/gist has switched (more) to https recently, methinks.

[19:37] <sorear> colomon: no, I thought you were talking p5

[19:37] <sorear> masak: entirely

[19:37] *** bbkr joined
[19:38] <tadzik> colomon: does macos have wget by default?

[19:38] <masak> sorear: do you know why?

[19:38] <colomon> tadzik: maybe?

[19:38] *** envi__ left
[19:38] <tadzik> colomon: mind checking?

[19:38] <colomon> I don't remember installing it, but my memory is weak.

[19:38] <colomon> I definitely have it here.

[19:38] <sorear> masak: firesheep

[19:38] <tadzik> anyone knowing?

[19:38] <colomon> looks like not, maybe

[19:38] <colomon> ?

[19:39] <tadzik> crap

[19:39] <colomon> "If, like me, you are missing wget since you upgraded to Leopard".... 

[19:39] <tadzik> well, we could git-clone it, since we rely on git anyway

[19:39] *** sftp_ left
[19:39] <colomon> git clone it and copy it into place?

[19:39] <tadzik> yeah, sounds like a plan

[19:39] <colomon> tadzik++

[19:40] <tadzik> I hope I'll be able to make it in half an hour, battery is getting tired

[19:41] <tadzik> what does it zero-depth git clone look like?

[19:42] <dukeleto> tadzik: what now?

[19:42] <dukeleto> tadzik: what do you mean "zero-depth" ?

[19:44] <tadzik> dukeleto: nothing now. I recall a way to clone a git repo w/o its history

[19:44] * moritz_ just knows that from git-svn

[19:45] *** rbuels joined
[19:47] <dukeleto> tadzik: there is something called a "shallow clone" but it is still in development, it is not a git feature ready for public consumption

[19:47] <tadzik> I see

[19:49] <masak> sorear: ah.

[19:49] <tadzik> colomon: strange, tests passed for me. WIll look into them now

[19:49] <Util> tadzik: OS X has `curl` by default. Just be sure to use the -o or -O options, or the URL retrieved goes to STDOUT

[19:50] <colomon> tadzik: what platform?  For me, once I fixed the https: thing, Linux worked but OS X (Leopard) fails.

[19:50] <moritz_> colomon: do you have compiled .pir files in your parrot install location, or in ~/.perl6/lib/ ?

[19:50] <colomon> probably in ~/.perl6/lib

[19:50] <colomon> why?

[19:50] <tadzik> colomon: Linux

[19:51] <moritz_> colomon: it might be a source for hard-to-reproduce errors

[19:52] <colomon> okay, blew .perl6 away and trying again

[19:52] <colomon> still the same error.  :(

[19:52] <tadzik> lemme look into these tests

[19:53] <tadzik> colomon: does 'some_file'.IO ~~ :d work for you?

[19:54] <colomon> > "README".IO ~~ :d

[19:54] <colomon> Bool::False

[19:54] <colomon> that would be yes, right?

[19:54] <tadzik> well, I guess it does. Could you enter the dir and run the tests manually?

[19:54] <tadzik> mbuild, ufo&&make, whatever

[19:54] <colomon> cd neutro/tmplib  ?

[19:54] <tadzik> cd ~/.neutro/src/*File*

[19:55] <colomon> I see.

[19:55] <colomon> "mbuild"?

[19:55] <tadzik> hmm, I thought mbuild is verbose

[19:55] <tadzik> yep, from Module::Tools

[19:56] <tadzik> but as I see `mbuild test` is not verbose for some reason, so go for ufo or test manually

[19:56] <Util> tadzik: If the project is on GitHub, you can get a tarball or zipball of the project with no Git repo detail.

[19:56] <Util> Is that what you meant by "zero-depth"?

[19:56] <Util> https://github.com/parrot/parrot/tarball/master

[19:57] <masak> std: my Str subset Username;

[19:57] <p6eval> std a194beb: OUTPUT«ok 00:01 118m␤»

[19:57] <tadzik> Util: nah. I was actually trying to use just LWP::Simple, but it has no SSL so it's pretty useless for GH now

[19:57] <colomon> tadzik: ufo's make test reports "All tests successful."

[19:58] <tadzik> hrm, funny

[19:58] <masak> rakudo: my Str subset Username;

[19:58] <p6eval> rakudo 2c66f9: OUTPUT«===SORRY!===␤Unknown declarator type at line 22, near ";"␤»

[19:58] <tadzik> . o O (masak submits rakudobug)

[19:59] <tadzik> masak: you run MacOSX, no?

[19:59] <masak> tadzik: I do.

[19:59] * masak submits rakudobug

[19:59] <tadzik> masak: could you try to reproduce colomon's problems? Bootstraping neutro

[19:59] <masak> sure.

[19:59] <colomon> masak++

[20:00] <tadzik> ++masak

[20:00] <masak> so, (1) pull neutro, (2) ...?

[20:00] <tadzik> PERL6LIB=tmplib bin/neutro neutro

[20:00] <tadzik> and preferably remove your ~/.neutro first

[20:01] <Util> tadzik: Once you know the fullname of the file it is going to serve, you can get it without SSL.

[20:01] <Util> curl -O http://download.github.com/parrot-parrot-RELEASE_2_9_1-204-gc762e42.tar.gz

[20:02] <tadzik> Util: yeah, but that is curl, so we get one case for OSX, one for Linux, another one for windows probably. I'll just go for git for now

[20:02] <tadzik> masak: just gitpushed fixed neutro

[20:02] *** masak left
[20:02] <Util> For the record, Curl works on Win32 (after downloading the native .exe) and on Linux.

[20:03] *** masak joined
[20:03] <masak> sorry, my connection is not the best right now.

[20:03] <tadzik> yeah, but that's still an additional dependency

[20:04] <Util> TimToady: I used the first coherent permutation algorithm I could find.

[20:04] <tadzik> 2102      tadzik | masak: just gitpushed fixed neutro

[20:04] <Util> Eventually I will read Knuth for the best algorithm.

[20:04] <Util> Right now, I am more interested in a better interface; something like:

[20:04] <Util> my $p_iter = permute(< a b c >); while my @p = $p_iter->next { ... }

[20:04] <Util> or

[20:04] <Util> my $p_iter = permute(< a b c >); for $p_iter.iterate { ... }

[20:05] <masak> Util: how about `for permutations(< a b c >) { ... }`?

[20:06] <colomon> Util: seems like permute / permutations should just return a lazy list.  It's the p6 way.

[20:06] <tadzik> . o O (advent calendar post - The P6 Way)

[20:06] <Util> masak: That's great, as long as it is lazy.

[20:07] <masak> Util: it is, as long as you use a gather or something.

[20:07] *** ch3ck left
[20:08] *** x3nU left
[20:09] <masak> tadzik: the P6 Way that can be told is not the unvarying P6 Way.

[20:09] *** sftp joined
[20:10] <tadzik> masak: how is the testing?

[20:11] <masak> slow. I'm having only irregular interwebs.

[20:11] *** lamstyle joined
[20:11] <tadzik> bah. I have no internets at home, I'm now in the shopping centre, and the battery dies in 7 minutes :)

[20:12] <dalek> mu: d3e1c88 | tadzik++ | misc/perl6advent-2010/topic-brainstorming:

[20:12] <dalek> mu: Updated advent calendar ideas

[20:12] <dalek> mu: review: https://github.com/perl6/mu/commit/d3e1c88b721bce96fe1c238a70fbeb17f1dc8089

[20:12] *** hudnix left
[20:12] *** risou left
[20:13] * masak massages the ethernet cord, trying to make the bits flow faster

[20:14] *** MayDaniel joined
[20:16] * tadzik is quite suprised looking at http://gil.di.uminho.pt/users/smash/rakudo-bench.html

[20:16] <tadzik> why the enormous jump on 2010.09?

[20:17] <tadzik> seen smash

[20:17] <aloha> smash was last seen in #perl6 4 days 4 hours ago saying "colomon: i'll try it later, the process takes hours to run.. thks".

[20:17] <tadzik> my battery's getting dead

[20:17] <tadzik> colomon, masak: feel free to msg me if you find out something funny. I'm our for now

[20:17] <masak> tadzik: \o

[20:18] *** tylercurtis joined
[20:18] <sorear> hi tylercurtis 

[20:19] <masak> tylercurtis! \o/

[20:19] <sorear> you just missed #phasers... moritz_ thinks I need a blog

[20:20] <masak> +1

[20:22] *** hudnix joined
[20:22] <masak> it's comforting to see that do_nothing.p6 is actually trending downwards all the time. reaching 1s will be a big step.

[20:24] <dukeleto> masak: i try to do nothing as quickly as possible all the time

[20:24] <dukeleto> sorear: you do need a blog :)

[20:24] <dukeleto> sorear: take a look at gitwrite.com

[20:25] *** TobiOetiker[T7] left
[20:25] *** plainhao left
[20:28] <tylercurtis> HHi, masak, sorear! Sorry for the slow reply. Building gcc in a vm doesn't seem to be friendly to my laptop's functioning.

[20:28] <masak> :)

[20:31] <TimToady> nature abhors a vm

[20:32] <masak> perhaps nature prefers physical machines.

[20:32] <sjohnson> OT q: anyone care about the Go language?

[20:33] <dukeleto> sjohnson: define "care"

[20:33] <sjohnson> thinks it might be worth learning / might be worthy of relacing C, etc

[20:33] <dukeleto> sjohnson: i would like to see someone hacking on Go on Parrot. But that isn't going to be me.

[20:33] <masak> sjohnson: I like it, and I'd like to use it some time, but frankly I don't do that kind of coding a lot.

[20:34] <masak> sjohnson: closest I've got lately is writing Druid code in C. but that's partly because I wanted to learn C better.

[20:34] <sjohnson> yeah i kind of want to learn C better too but i wonder if Go will be a better choice

[20:34] <sjohnson> with C1X coming out (maybe), it looks like C will be good enough to stick around for decade(s) to come

[20:35] <masak> sjohnson: it all depends what your goals are, I suppose.

[20:35] <masak> sjohnson: languages aren't objectively better or worse than others.

[20:36] <sjohnson> to give you an example, i hate writing stuff in JS and PHP, but i really enjoy writing in Perl

[20:36] <sjohnson> i suppose i'm looking for the right application language, and dont really have the time to "Try em all out"

[20:36] *** MayDaniel left
[20:36] <sorear> go will fail for the same reason Plan 9 failed

[20:37] <sorear> it's not a sufficiently compelling improvement

[20:37] <masak> sorear: bad acting? :P

[20:37] <sorear> C is good enough to block adoption of successors

[20:37] <masak> sjohnson: try as many as you can.

[20:38] * TimToady wonders why it's so hard to write applications in applicative languages...

[20:38] <sjohnson> good point.  also, ive been reading a lot of experts say they think C++ is crap

[20:38] <sjohnson> linus, rms, to name two

[20:39] <sjohnson> .oO(wonders if TimToady doesn't like C++ too)

[20:39] <sjohnson> either8

[20:39] <masak> sjohnson: Erik Naggum didn't like C++ either. Steve Yegge doesn't like C++ either.

[20:40] <sjohnson> i haven't heard one expert say that they think C is crap.  makes me wonder about C++

[20:40] <arnsholt> masak: There was very much Naggum didn't like =)

[20:41] <sjohnson> masak: this guy doesnt seem to like Perl much either

[20:41] <TimToady> we had a goaround or two about Perl, in fact.  :)

[20:41] <masak> TimToady: what, you and Naggum?

[20:42] <TimToady> in fact, iirc, the oatmeal and fingernail clippings remark was in a reply to Erik :)

[20:42] <TimToady> I could be misremembering

[20:42] <masak> arnsholt: I still haven't figgered out how he manages to be so *angry* all the time without stepping over more lines than he does.

[20:42] *** y3llow_ joined
[20:43] <sjohnson> thanks masak, im checkin out yagge's thoughts

[20:43] *** pothos_ joined
[20:43] <sjohnson> TimToady: may i ask your expert opinion on C++?  *puppy dog eyes*

[20:44] <masak> arnsholt: his distinguishing trait, however, is easy to identify. he simply runs circles around all his debating opponents. every time they try to up the ante, he just puts in a bit more effort and *crushes* them.

[20:44] *** pothos left
[20:44] *** y3llow left
[20:45] *** y3llow_ is now known as y3llow

[20:45] *** pothos_ left
[20:45] *** pothos joined
[20:46] <TimToady> I misrembered, it was a reply to Tim Bradshaw

[20:47] <masak> a lot of Erik's criticism of Perl seems to be out-of-date, or directed to a style of programming that I don't often see in Perl circles nowadays.

[20:49] <dalek> rakudo: 4d33bae | masak++ | src/core/Cool-str.pm:

[20:49] <dalek> rakudo: [Cool-str] fixed .trans case where @changes is []

[20:49] <dalek> rakudo: 

[20:49] <dalek> rakudo: This un-breaks one of the tests in trans.rakudo.

[20:49] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/4d33bae5919d08bcf2347b0e5a1e3eb49c67e426

[20:49] <masak> that was an "oops, missed a spot" commit.

[20:50] <sorear> C++ is a brilliant solution to the wrong problem

[20:51] <sorear> if Bjarne had seen garbage collection coming, C++'s design would be a lot more relevant today

[20:51] <sjohnson> if C++ had garbage collection, the language would shrink back down to the size of C

[20:51] <sorear> sure, it's possible to retrofit a GC onto C++.  But a lot of C++'s features only make sense in the context of object lifetime tracking

[20:52] *** takadonet left
[20:52] <masak> sjohnson: if you haven't seen it yet: http://sites.google.com/site/steveyegge2/tour-de-babel

[20:53] <sjohnson> masak++ yeah i found this link after you told me his name

[20:53] <sjohnson> it's pretty much exactly what i wanted to see

[20:53] <sjohnson> people who aren't afraid to go on rants from time to time

[20:53] <masak> sjohnson: he mentions C++ in other posts as well; never in a good context.

[20:53] <sorear> other features I'd like to see in C++, partial list: * Parametric polymorphism * Metadata-based module imports

[20:54] <moritz_> sjohnson: http://yosefk.com/c++fqa/

[20:54] <sjohnson> masak: how would i go about finding them?

[20:54] * moritz_ like to see compile time type safety

[20:55] <masak> sjohnson: easiest might be to just read everything he wrote. you probably won't regret it.

[20:55] <sorear> moritz_: that's the only kind of type safety C++ has

[20:56] <moritz_> well, not in the sense that I would like

[20:56] <sjohnson> thanks for everyones opinions

[20:56] <sjohnson> i am finding the C++ pros/cons arguments very interesting

[20:56] <moritz_> when you instantiate a template class, you can get (and often do get) an error not at the instantiation location, but in the templated class

[20:57] <moritz_> which means that compiling the template class wasn't type safe

[20:57] <sorear> ah

[20:57] <sorear> that's really where I'm going with "parametric polymorphism"

[20:57] * TimToady looks for a generic carpet to sweep generic problems under

[20:57] <sorear> templates that are compiled once

[20:57] <sjohnson> heh

[20:58] <moritz_> TimToady: my wife has announced interest in such a carpet, when you find one

[20:58] <dukeleto> TimToady: i have a nice GenericPersianRug you can have

[20:59] <TimToady> I suppose it came from a store that was going out of business generically?

[20:59] <flussence> .oO( from a RugFactoryFactoryFactoryFactory... )

[21:04] <sjohnson> moritz_: thanks for the link

[21:08] *** KyleHa joined
[21:08] <Tene> There are like three persian rug stores on the same street in downtown palo alto.

[21:08] <Tene> Kind of weird.

[21:08] *** BooK joined
[21:09] <masak> Tene: there's got to be a pun in there somewhere.

[21:12] <TimToady> they have the same street down in palo alto?  that really *is* weird...

[21:12] <TimToady> especially since palo alto is up from here...

[21:13] * TimToady wonders where palo soprano is...

[21:14] <moritz_> rakudo: my $x = (1,2,3); my $y = map {$^x * $^x}, $x; say $x.perl

[21:14] <p6eval> rakudo 2c66f9: OUTPUT«(1, 2, 3)␤»

[21:14] <moritz_> shouldn't this be 9 ?

[21:14] <TimToady> maybe if you print $y

[21:14] <Tene> moritz_: you never assign to $x?

[21:14] <Tene> well, s/never/once/

[21:14] <moritz_> rakudo: my $x = (1,2,3); my $y = map {$^x * $^x}, $x; say $y.perl

[21:14] <p6eval> rakudo 2c66f9: OUTPUT«(9)␤»

[21:14] <moritz_> right, stupid me

[21:15] <TimToady> std: my $x = (1,2,3); my $y = map {$^x * $^x}, $x; say $x.perl

[21:15] <p6eval> std a194beb: OUTPUT«ok 00:01 123m␤»

[21:15] <TimToady> hmm, I guess it only warns on unused parameters

[21:15] <masak> programming is all about those little details :)

[21:15] <moritz_> std is kinda stoic about runtime behaviour :-)

[21:15] <moritz_> indeed

[21:16] <moritz_> I just wanted to bring some reality to a p6l discussion

[21:17] <TimToady> std: my $x = (1,2,3); -> $y { say $x.perl }(map {$^x * $^x}, $x);

[21:17] <p6eval> std a194beb: OUTPUT«Potential difficulties:␤  $y is declared but not used at /tmp/MEo93PPH1o line 1:␤------> my $x = (1,2,3); -> ⏏$y { say $x.perl }(map {$^x * $^x}, $x);␤ok 00:01 125m␤»

[21:17] <masak> I've heard that when a p6l discussion is brought together with some reality, they both turn into photons.

[21:18] <TimToady> I guess that rules out alphas and betas

[21:19] <colomon> (backlogging) I think I've said it here before, but by far my biggest complaint about programming in C++ is that it is so insanely verbose.

[21:20] <colomon> consider:  say "There were $count $items";

[21:20] <TimToady> you should see COBOL++

[21:20] <colomon> versus: std::cout << "There were " << count << " " << items << std::endl;

[21:21] <colomon> or @array.sort 

[21:21] <colomon> versus std::sort(array.begin (), array.end ());

[21:22] *** dju joined
[21:22] <colomon> I wouldn't give you 10 cents for adding garbage collection to C++, but a tersification project would be awesome.

[21:23] <Tene> colomon: C++ backend to rakudo, obviously.

[21:23] *** toebu joined
[21:23] *** toebu is now known as TobiOetiker[T11]

[21:27] *** dju left
[21:27] *** dju joined
[21:33] <sjohnson> just got an email back from theo de raadt

[21:33] <sjohnson> the only body in the email:  "c++ is a pile of crap."

[21:34] *** ch3ck joined
[21:35] <sjohnson> colomon: thanks for your input

[21:35] <sjohnson> colomon: ++

[21:36] <sjohnson> oops

[21:36] <masak> sjohnson: what a delightful coincidence.

[21:36] <sjohnson> colomon++

[21:36] <sjohnson> masak: coincedence?

[21:36] *** Guest6493 left
[21:36] <sjohnson> you mean theo's reply?  i actually emailed him about an hour ago :]

[21:36] <masak> sjohnson: actually, I'm assuming it wasn't.

[21:36] <sjohnson> asking for his expert thoughts

[21:37] <masak> and you got'em.

[21:37] <sjohnson> oh ya

[21:37] <sjohnson> im glad he replied

[21:38] <masak> you should print the email, frame it, and put it on the wall.

[21:38] <masak> your wall, I mean. not TimToady.

[21:40] *** hudnix left
[21:41] *** uniejo joined
[21:41] <mkramer> moritz_: I'm trying to get a handle on how %-sigiled variables are made to unroll, and how they get they automatically get made into hashes

[21:41] <mkramer> could you give me some direction for where to go in the source?

[21:42] *** jaldhar left
[21:44] <mkramer> in assign.pir I see that if a container isn't scalar then delgate to !STORE

[21:45] <sjohnson> masak: :)  i might paste it to a blog i might start

[21:45] <sjohnson> just my day-to-day musings in life i suppose

[21:45] <mkramer> but what created .cont in the first place?

[21:46] <masak> sjohnson: maybe it's high time you got a Twitter account.

[21:46] *** hudnix joined
[21:46] <masak> sjohnson: then you could write "Emailed Theo de Radt about his expert opinion on C++. Got back 'c++ is a pile of crap'"

[21:46] <moritz_> src/core/Hash.pm method !STORE (to mkramer)

[21:47] <sjohnson> haha

[21:47] <sjohnson> good call

[21:47] *** hudnix left
[21:47] <mkramer> moritz_: no, that's too late in the process.  I understand that assignment to a %var eventually delegated to Hash.!STORE, but by the type of assignment, anything with a %sigil is already a Hash

[21:48] <mkramer> I want to find where in the source an LHV with a % becomes a Hash

[21:48] <mkramer> *by the time of assignment

[21:48] *** starcoder left
[21:49] <moritz_> mkramer: no, STORE is exactly where conversion to Hash happens

[21:50] <mkramer> Why delegate storage to Hash.!STORE before the container is actually a hash?

[21:50] *** timbunce joined
[21:51] * moritz_ doesn't understand the question

[21:51] <moritz_> consider

[21:51] <moritz_> my %h;

[21:51] <moritz_> %h = <a b>;

[21:51] <moritz_> what happens is

[21:51] <moritz_> %h is being typed to Associative

[21:51] <moritz_> and intialiazed by the compiler with Hash.new

[21:52] <moritz_> for the second line, &infix:<=>(%h, <a b>) is called

[21:52] <moritz_> which delegates to %h.!STORE(\<a b>)

[21:53] *** starcoder joined
[21:53] <moritz_> which in turn wipes its internal storage, and stores <a b> in the internal storage location

[21:54] <moritz_> still with me?

[21:54] <moritz_> ... apparently not

[21:54] <mkramer> moritz_: I'm still here

[21:54] <mkramer> trying to follow

[21:54] <moritz_> phrased differently, infix:<=> is coercive if the RHS has a sigil of @ or %

[21:55] <moritz_> and that coercion happens in method !STORE

[21:55] <mkramer> what's the sigil of $object->method_returning_a_list?

[21:56] <moritz_> none

[21:56] <moritz_> you can't assign to a list

[21:56] <mkramer> RHV's have sigils

[21:56] <moritz_> you can only assign to variables

[21:56] <moritz_> RHV?

[21:56] <pmichaud> you can assign to a list

[21:56] <pmichaud> it's called "list assignment", in fact :-)

[21:57] <moritz_> you take over then, pmichaud :-)

[21:57] <mkramer> my $stuff = $object->list_method

[21:57] <pmichaud> right now (unless it's changed during my "absence") rakudo does hash and array variable initialization incorrectly

[21:58] <masak> don't think that's changed.

[21:58] <moritz_> mkramer: that still assigns to $-sigiled variable

[21:58] <pmichaud> also, it's $object.list_method

[21:58] <pmichaud> no arrow

[21:58] <mkramer> bnahh sorry, perl5 on the brain

[21:59] <pmichaud> currently,   my $stuff = $object.list_method   invokes list_method on $object, then itemizes the result and stores it in $stuff

[22:00] <moritz_> mkramer: I think what you're aiming at is that there's also a non-syntactic distinction between flattening and non-flattening things

[22:00] <moritz_> rakudo: sub a() { [1, 2, 3] }; sub b() { 1, 2, 3 }; .say for a; .say for b;

[22:00] <p6eval> rakudo 2c66f9: OUTPUT«1 2 3␤1␤2␤3␤»

[22:00] <mkramer> Yes, that's one thing

[22:01] <mkramer> Basically, I just don't understand sigls.  At all.

[22:01] *** ch3ck left
[22:01] <mkramer> I know what they *do*, I don't know how they do it

[22:01] <moritz_> with magic[tm].

[22:01] <pmichaud> sigils on variables provide information about the variable

[22:01] <masak> alpha: say elems 1, 2, 3

[22:02] <p6eval> alpha : OUTPUT«3␤»

[22:02] <masak> rakudo: say elems 1, 2, 3

[22:02] <p6eval> rakudo 2c66f9: OUTPUT«Could not find sub &elems␤  in main program body at line 22:/tmp/Lc556CVpUb␤»

[22:02] <masak> pmichaud: fixing this in master is as simple as exporting some .elems method, right?

[22:02] <pmichaud> masak: probably not

[22:02] <mkramer> and since everything they do can also be done without the syntactic distinction, there must be some more fundamental process to which both @alists and $obj.list_method are subjected to get them to behave exactly the same way

[22:02] <pmichaud> masak: probably needs a separate elems sub

[22:02] <masak> pmichaud: ok.

[22:02] <pmichaud> (see 'sort' and 'join' for comparison)

[22:03] <masak> thanks, I will.

[22:03] *** tylercurtis left
[22:03] <pmichaud> mkramer: I disagree with the premise there (more)

[22:03] <moritz_> mkramer: internally, Rakudo uses a wrapping layer for distinguishing flattening and non-flattening things

[22:03] <pmichaud> the syntactic distinction is significant

[22:03] <pmichaud> @abc  flattens in a flattening context, while $abc does not

[22:03] <moritz_> rakudo: my $a = (1, 2, 3); say $a.PARROT; my @a = (1, 2, 3); say @a.PARROT

[22:03] <p6eval> rakudo 2c66f9: OUTPUT«Perl6Scalar->Seq␤Array␤»

[22:04] <pmichaud> that example is probably misleading.

[22:04] <pmichaud> rakudo:  my $a := (1,2,3);  my @a := (1,2,3);  

[22:04] <p6eval> rakudo 2c66f9:  ( no output )

[22:04] <moritz_> pmichaud: feel free to provide a better one :-)

[22:04] <pmichaud> rakudo:  my $a := (1,2,3);  my @a := (1,2,3);  .say for $a;   .say for @a

[22:04] <p6eval> rakudo 2c66f9: OUTPUT«1 2 3␤1␤2␤3␤»

[22:04] <pmichaud> or, even more significantly:

[22:04] <moritz_> rakudo:  my $a := (1,2,3);  my @a := (1,2,3); say $a.PARROT; say @a.PARROT

[22:05] <p6eval> rakudo 2c66f9: OUTPUT«ObjectRef->Parcel␤ObjectRef->Parcel␤»

[22:05] * moritz_ doesn't understand the implementation at all

[22:05] <pmichaud> rakudo:  my $a := (1,2,3);  my @a := $a;  .say for $a;  .say for @a;   say @a =:= $a;

[22:05] <p6eval> rakudo 2c66f9: OUTPUT«1 2 3␤1␤2␤3␤0␤»

[22:05] <pmichaud> er

[22:05] <pmichaud> rakudo:  my $a := (1,2,3);  my @a := $a;  .say for $a;  .say for @a;   say @a === $a;

[22:05] <p6eval> rakudo 2c66f9: OUTPUT«1 2 3␤1␤2␤3␤Bool::True␤»

[22:05] <pmichaud> flattening and non-flattening cannot be determined strictly from the value of a container

[22:06] <pmichaud> even in this last example, where $a and @a are in fact the same object, they end up with different behaviors in list context

[22:07] <mkramer> Ok - that last example surprised me

[22:08] <pmichaud> it needs to be that way so that the following works....

[22:08] <pmichaud> rakudo:  sub abc(@a) { .say for @a; };   my $b := (1,2,3);  abc($b);

[22:08] <p6eval> rakudo 2c66f9: OUTPUT«1␤2␤3␤»

[22:09] <pmichaud> when @a is bound to $b, it flattens in list context

[22:09] <masak> pmichaud: according to which rule are some of those subs 'proto' and some 'multi'?

[22:09] <pmichaud> masak: I don't know the answer to that one;   multi+proto changed on me and I haven't caught up to the new spec.  jnthn++ and/or colomon++ know the answer, I think.

[22:09] <sorear> pmichaud: moritz_ thinks niecza needs a blog.  What should I use?

[22:09] <pmichaud> sorear: whatever blog platform you're most comfortable with :-)

[22:10] <pmichaud> I'm a fan of wordpress lately

[22:10] <masak> pmichaud: I don't think Rakudo has changed in that regard.

[22:10] <sorear> I'm not comfortable with any of them

[22:10] <pmichaud> (based on the perl6advent calendar last year)

[22:10] <sorear> In the lack of experience sense, not the "tried em, hated em"

[22:10] <pmichaud> as soon as I come up with a name for my blog, I'll be setting it up on wordpress

[22:10] <pmichaud> so, count me as a vote in favor of wordpress :-)

[22:10] <masak> sorear: if you can guess some of your requirements in advance, we can give you more specific tips.

[22:11] <pmichaud> so far I haven't been a fan of drupal

[22:11] <moritz_> sorear: what's more important for you, get goiing quickly, or have a system you really like?

[22:11] <pmichaud> in my case, "system you like" would be more important, since you have to live with it longer :-)

[22:12] <pmichaud> I keep thinking about rewriting my wiki software in p6, in which case I'd probably do something with that.

[22:12] <pmichaud> but that's not likely to happen anytime soon, so I need "blogging software I like" sooner than I can write it :)

[22:12] <colomon> rakudo is still on the old multi+proto designed from a year or so ago.  jnthn++ is working on the new one with his current "side" project.

[22:13] <pmichaud> colomon: there's an even older multi+proto than the one rakudo is on

[22:13] <pmichaud> I'm not caught up with the one it's currently on that explains how/when one uses proto.

[22:13] * moritz_ -> sleep

[22:13] <colomon> ah

[22:13] <masak> I'm looking at the column of multis and protos, and I don't see the pattern.

[22:13] <sorear> as a reader, I think most NIH blog engines are annoyingly limited

[22:13] <colomon> masak: I'm not sure there is a real pattern.  where are you looking?

[22:13] <sorear> cf the lack of comments and recently broken escaping in psyde

[22:14] <masak> sorear: point taken.

[22:14] <sorear> out of responsibility I'd rather user something established

[22:14] <masak> sorear: broken escaping was totally my fault. I should have test coverage there, and I don't. psyde is still under construction and very much my own pet project. thanks for catching that one, by the way.

[22:15] <masak> sorear: also note that I haven't recommended you use psyde :)

[22:15] <pmichaud> masak: perhaps a good question is... if you weren't doing psyde, what would you use?  

[22:15] *** hudnix joined
[22:15] <masak> phenny: tell tadzik that neutro bootstrap worked fine on my box.

[22:15] <phenny> masak: I'll pass that on when tadzik is around.

[22:16] * pmichaud is surprised how many positive comments there have been about the floss interview.

[22:16] <sorear> my priorities are reasonably simple, well debugged, and supports sane standard blog behavior

[22:16] <masak> pmichaud: I'm also partial to Wordpress. blog.perl.org looks good too. but I guess the real answer is that if I weren't doing psyde, I'd long for something very much like it. :)

[22:16] <pmichaud> masak:  +1  :)

[22:16] <colomon> masak: glancing at the end of Cool-str.pm as an example, I think I used "proto sub" and someone else use "multi" or "multi sub" and as far as I know, the choice was completely arbitrary.

[22:16] <pmichaud> that's how I ended up with PmWiki :)

[22:16] <sorear> feed generation, comments; if comments require authentication, it should be an established auth platform

[22:17] <masak> colomon: good. that's consistent with what I'm seeing.

[22:17] <masak> sorear: there have been problems with blog.perl.org -- I think Wordpress is the safer choice there.

[22:17] *** risou joined
[22:17] <masak> better, more centralized maintenance.

[22:17] <pmichaud> although I'm normally partial to google-sponsored tools, I've not been that impressed with blogger either.

[22:19] <masak> sorear: also, I don't know whether I should be flattered or slightly peeved at having psyde be taken as an example of a "NIH blog engine". NIH is, I guess, an accurate description. but reinventing the wheel is not my main objective -- exercising Rakudo is.

[22:19] *** am0c^ left
[22:21] <mkramer> rakudo: sub rlist{ (1,2,3) }; .say for rlist;

[22:21] <p6eval> rakudo 2c66f9: OUTPUT«1␤2␤3␤»

[22:22] <mkramer> flattening sans sigil

[22:22] <mkramer> this is where I'm getting stumped

[22:22] <sorear> mkramer: rlist() returns a flatteny thing

[22:22] <sorear> expressions don't return values

[22:22] <pmichaud> flattening tends to be the default behavior

[22:23] <pmichaud> things don't flatten when they've been explicitly put into a scalar container of some sort.

[22:23] <sorear> they return storage location  + flatteny bit + rwy bit

[22:23] <sorear> the details of this vary a lot between compilers

[22:23] *** flussence_ joined
[22:24] <pmichaud> imo, the compiler details are as yet less interesting than what the spec requires

[22:24] <plobsing_> arthur-_: I can no longer reproduce the problem after running 'sudo ldconfig'. It loads the library and generates a thunk for 'ipttp' fine for me.

[22:25] <pmichaud> std:  sub rlist{ (1,2,3); };

[22:25] <p6eval> std a194beb: OUTPUT«ok 00:01 121m␤»

[22:25] *** flussence left
[22:25] <mkramer> a storage location + flatteny bit + rwy bit

[22:26] <mkramer> Alright, now that is what I've been driving towards

[22:26] <mkramer> a flatteny bit - there is one.  I knew there had to be something like that

[22:26] <pmichaud> rakudo has a "don't flatten" bit

[22:26] <jnthn> masak: I didn't follow the proto/multi question from earlier, but try asking me when I don't have such a headache. :)

[22:27] * masak hands jnthn a mug of warm milk and honey

[22:27] <jnthn> masak: If you want to play with the latest semantics though, grab NQP.Net, 'cus it's probably closest to correct on them, or at least the bits it implements.

[22:27] <jnthn> It's also the only thing that is somewhat clueful about :U and :D too

[22:27] <jnthn> o/ pmichaud 

[22:27] <masak> ooh

[22:27] <pmichaud> o/ jnthn

[22:27] <jnthn> pmichaud: How's things? Missed having you around. :)

[22:28] <pmichaud> things are... so-so.  I'm in a tuit deficit.  :(

[22:28] * sorear out

[22:29] *** masonkramer left
[22:29] <mkramer> Thanks for your kind attention, I'm out too

[22:29] *** masonkramer joined
[22:30] <masak> &elems passes manual test. running spectests Justin Case.

[22:30] *** fhelmberger left
[22:30] <jnthn> So long as you don't run then Justin Beiber.

[22:31] <masak> unless I run him 800% as slow.

[22:31] *** hudnix left
[22:33] <jnthn> Well, if you're using Rakudo... :P

[22:33] *** hudnix joined
[22:34] <masak> on the bright side, each Star release has gotten faster at doing nothing :)

[22:34] <masak> we're down to 1.3 seconds now.

[22:37] *** ch3ck joined
[22:45] *** PerlJam left
[22:47] <jnthn> masak: That's important to reduce too, since we have to do it a lot of times in the test suite. :)

[22:48] <pmichaud> yes, I was a bit surprised (shouldn't have been) at how much spectest time was in startup.

[22:49] <pmichaud> afk, dinner

[22:51] *** whiteknight joined
[22:51] <masak> it's important to reduce for almost every reason imaginable.

[22:51] <masak> in fact, I'll go as far as to say that it's probably a great one-dimensional measure of how seriously the Rakudo team takes performance.

[22:52] <masak> i.e. it sits at the cross-section of "probably not too hard" and "very important for PR"

[22:53] <jnthn> masak: "not too hard"? :)

[22:53] <jnthn> If we want to REALLY do well there we need the serialization stuff.

[22:54] <jnthn> I promise you it's not easy. :)

[22:54] <Tene> jnthn: yeah, the traditional "just wait while jnthn works on serialization" plan.

[22:54] <Tene> Easy for everyone but you, so we just drop the outlier...

[22:54] <masak> I didn't mean to trivialize anyone's efforts.

[22:54] <masak> blog post! http://strangelyconsistent.org/blog/november-9-2010-this-is-an-ex-shogun

[22:55] <jnthn> Tene: It's not the _only_ think that matters, and I very much encourage improvements. I just think that's the one thing that stands a chance of giving us the biggest improvement there.

[22:55] <Tene> jnthn: agreed

[22:56] *** M_o_C left
[23:00] *** KyleHa left
[23:00] *** _kaare left
[23:03] *** TobiOetiker[T11] left
[23:03] <jnthn> sleep &

[23:03] <masak> 'night, jnthn. dream of kept voices and ache-free heads.

[23:05] *** REPLeffect left
[23:16] *** TobiOetiker[T11] joined
[23:16] *** risou_ joined
[23:16] *** ch3ck left
[23:18] *** REPLeffect joined
[23:19] *** risou left
[23:19] *** uniejo left
[23:29] *** ch3ck joined
[23:33] <ingy> hi

[23:35] *** masak` joined
[23:39] *** masak left
[23:39] *** masak` is now known as masak

[23:44] *** sftp left
[23:44] *** plobsing_ left
[23:46] *** plobsing joined
[23:48] *** orafu left
[23:48] *** orafu joined
[23:52] *** stkowski left
[23:53] *** vxz left
[23:55] *** meppl left
[23:57] *** orafu left
[23:58] *** orafu joined
[23:59] <dalek> rakudo: e6486e5 | masak++ | src/core/Any-list.pm:

[23:59] <dalek> rakudo: [Any-list] added &elems sub

[23:59] <dalek> rakudo: 

[23:59] <dalek> rakudo: Old Druid code showed that this used to work in alpha. Adding it

[23:59] <dalek> rakudo: back.

