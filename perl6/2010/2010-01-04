[00:02] * diakopter hears a pin drop

[00:02] <mberends> perl6: ping

[00:03] <p6eval> elf 29447: Undefined subroutine &GLOBAL::ping called at (eval 122) line 3.␤ at ./elf_h line 5881␤

[00:03] <p6eval> ..rakudo db84bc: Could not find non-existent sub ping␤in Main (file src/gen_setting.pm, line 324)␤

[00:03] <p6eval> ..pugs: *** No such subroutine: "&ping"␤    at /tmp/gBhITzikJ4 line 1, column 1 - line 2, column 1␤

[00:03] <diakopter> "everytime you hear a pin drop, an angel^W announcement of a skunkworks project is forthcoming/imminent"

[00:04] <mberends> that'll be the Rekudo ng branch about to become master

[00:05] <mberends> *Rakudo

[00:05] *** ashizawa joined
[00:10] <mberends> pmurias: when building mildew, I missed a README. You once questioned the usefulness of a README file somewhere, was that for Mildew or for JavaScript::V8? I'm quite happy to create a mildew README if you're not opposed.

[00:13] <pmurias> mberends: having a README for Mildew would be great

[00:13] <pmurias> mberends: i questioned the usefulness of README for CPAN module which are installed using the CPAN client

[00:14] <mberends> pmurias: ok, it will start small, we can expand it gradually

[00:26] *** xomas left
[00:32] *** lumi left
[00:32] *** lumi joined
[00:36] *** silug joined
[00:41] *** orafu left
[00:41] *** orafu joined
[00:46] *** xomas_ joined
[00:51] *** frettled sets mode: +oo pmurias mberends

[00:56] *** ewilhelm joined
[01:07] *** Astoria` left
[01:13] *** douglashunter left
[01:15] *** pmurias left
[01:32] *** lestrrat is now known as lest_away

[01:44] *** simcop2387_ left
[01:49] *** simcop2387 joined
[01:55] *** xomas_ is now known as xomas

[02:00] *** agentzh joined
[02:06] *** lumi left
[02:06] *** lumi joined
[02:09] *** lest_away is now known as lestrrat

[02:40] <ewilhelm> anybody have input on what exactly PAUSE/CPAN needs to do to support the Perl 6 module system/semantics?

[02:42] <diakopter> ewilhelm: it's a big question to some, a smaller question to others.

[02:42] <diakopter> it depends a lot on the implementation

[02:42] <ewilhelm> it's currently being hashed-out by a bunch of the people who could do something about it but aren't sure what p6 needs

[02:43] <ewilhelm> http://www.nntp.perl.org/group/perl.cpan.workers/2010/01/msg639.html

[02:44] <diakopter> ewilhelm: parrot has its own dependency system/installer

[02:44] <diakopter> http://gitorious.org/parrot-plumage

[02:45] <ewilhelm> on the PAUSE/CPAN side of things, we're only talking about somewhere to upload tarballs and some kind of indexing ala 02packages.details.txt.gz

[02:46] <diakopter> strictly speaking, all of these fields should be present in an index: http://perlcabal.org/syn/S11.html#Versioning

[02:47] <diakopter> the "long name" there defines the namespace

[02:48] <diakopter> the "cpan:" authority is reserved for (of course), cpan

[02:48] <ewilhelm> so, just name+version+author, right?

[02:49] <diakopter> name+version+auth (where "auth" is intentionally ambiguous between "authority" and "author")

[02:50] <ewilhelm> but that's actually just the long index (equivalent to `ls -R`)

[02:50] <ewilhelm> doesn't it needs some kind of short index for "the default for Foo"?

[02:51] <diakopter> that's for the dependency/installer system to work out

[02:51] <ewilhelm> which is more equivalent to the current 02packages.details.txt.gz -- namespaces mapped to author+version

[02:51] <ewilhelm> Really?  There's nothing in the spec for that?

[02:52] <diakopter> yes, it defines the compile-time behavior, but not the install-time

[02:53] <ewilhelm> so what is the wildcard resolution order for "use Dog:auth(Any):ver(Any);" and who decides that?

[02:55] <diakopter> install-time, it's presumably dependent on the installer/packager settings

[02:55] <ewilhelm> "the version lineage that was created first wins" -- by date?  "officially abandoned lineage" -- what's official?

[02:56] <diakopter> ctime on disk, I guess

[02:56] <ewilhelm> wow that's going to give redhat enough rope to hang us all

[02:56] <diakopter> sure, the packagers/distributors get to define their own policies

[02:57] <diakopter> what it does is set cpan's repo (and everyone's github/gitorious/googlecode/sourceforge/codeplex repos) at the same level as the system distributors/packagers

[02:58] <ewilhelm> so does PAUSE need to keep track of namespace ownership at all?

[02:58] <Tene> Man, I haven't seen pm online in ages.  Hope he's having good holidays.  :)

[02:58] <diakopter> ewilhelm: yes, because those represent who owns that package in the "cpan" auth

[02:59] <diakopter> the actual author's name/id isn't in the authority

[02:59] <ewilhelm> ok, so if you ask "a repository" for "the" Dog module, whoever owns that namespace *in that repo* is the one you get?

[02:59] <diakopter> so, an "unauthorized release" would have the auth "cpan_EWILHELM"

[03:00] <diakopter> or something

[03:00] <diakopter> yeah

[03:00] <diakopter> anyone else _please_ correct me where I'm wrong... I haven't seen these issues talked through here for years...

[03:01] *** xomas left
[03:01] <diakopter> ewilhelm: does that seem workable to you?

[03:02] <ewilhelm> I think so.

[03:03] <diakopter> oh wait

[03:03] <diakopter> after reading S11 again...

[03:03] <diakopter> I was mostly right

[03:03] <ewilhelm> sounds like we need 1) upload tool which detects p6 tarball + a place to put it, 2) a p6 "short" index of ownership per namespace (ala 02packages), and 3) a p6 "big" index of everything available

[03:04] <diakopter> it would be auth<cpan:EWILHELM> for every release including unauthorized ones

[03:04] <diakopter> but auth<cpan:$$some_flag_meaning_namespace_owner$$> for the officially owned release

[03:05] <diakopter> I'm curious; why wouldn't the current system "just work"?

[03:05] <ewilhelm> sure.  That's still compatible with 1,2,3 --^, right?

[03:06] <ewilhelm> because ownership per namespace is p5 ownership

[03:06] <ewilhelm> so rjbs owns Config::INI and thus Ovid can't upload his p6 tarball until we settle this

[03:06] *** Chillance left
[03:06] <diakopter> hm

[03:07] *** cognominal joined
[03:07] <diakopter> my first reaction is not to allow the duplicate names

[03:07] <ewilhelm> but, it's looking very much like "just" making an empty copy of the current system and filling it in with p6 data

[03:08] <diakopter> (in order to avoid branching the whole system)

[03:08] <ewilhelm> well, that's going to make lots of people nonhappy

[03:08] <diakopter> well, there aren't going to be distributions that work in *both*

[03:09] <ewilhelm> how is Perl 6 supposed to handle the case of loading a p5/ruby/whatever module where there's multiple instances of the same name installed?

[03:09] <diakopter> so there's either an implied "P6::" in front of that whole namespace, or you have to fork the whole system

[03:09] <ewilhelm> we can't prevent naming overlap in the rest of the language world anyway

[03:10] <Tene> ewilhelm: imported symbols are lexically scoped.

[03:10] <diakopter> to import from other languages requires another qualifier

[03:10] <Tene> So if I import Foo:from<ruby>; then Foo in that lexical scope refers to ruby's Foo.

[03:11] <ewilhelm> Tene, no, oh :from<ruby> is news to me

[03:11] <Tene> Loading p5 modules is :from<perl5>, iirc

[03:11] <diakopter> same from perl5, yes

[03:11] <ewilhelm> diakopter, there you have it

[03:12] <ewilhelm> we have an implied sort of "P5::"/"P6::" everywhere already

[03:12] <diakopter> yes, but, if you placed an invisible P6_flag_something:: in front of all the Perl6 uploads, you could use the current system without branching/duplicating everything

[03:13] <ewilhelm> it's not really "fork the whole system" on the PAUSE pov, more like analogous to "mkdir p6; chdir p6; and start another daemon"

[03:13] <diakopter> (obviously the Perl 6 tools would know not to display that prefix)

[03:13] <diakopter> yeah, but I'm referring to all the other web tools

[03:14] <ewilhelm> that is, the upload tool will (probably) be the same page and just detect p6-ness inside the tarball, then stick it in the p6/ directory on the mirrors and index it accordingly

[03:14] <ewilhelm> but it will be a whole new index

[03:15] <diakopter> if I were you, I'd keep it in the same one with a hidden prefix, since it would require modifying a lot fewer toolchains, imho

[03:16] <ewilhelm> not sure about that

[03:16] <ewilhelm> you can't use the CPAN.pm to install p6 code anyway

[03:16] <diakopter> b/c the existing cpan could be used to resolve/install dependencies.

[03:16] <diakopter> sure you could

[03:17] <ewilhelm> You've read the code?

[03:18] <ewilhelm> so without :from<perl5>, you get "module not found" if there's a p5 Foo.pm and no p6 one?

[03:18] *** agentzh1 joined
[03:18] *** agentzh left
[03:18] <diakopter> "the code"?  I don't see why a perl6 code distribution couldn't use a p6 Makefile.PL

[03:18] <diakopter> p6 Makefile.PL, I mean

[03:18] <Tene> Hmm.  I *do* remember that there's part of the spec about how to distinguish between p5 and p6...

[03:19] <diakopter> omg.

[03:19] <diakopter> I can't type   p5 Makefile.PL

[03:19] <diakopter> ewilhelm: answer to your last question, seems right to me, yes

[03:21] <diakopter> my attitude/goal would be to try to reuse (and continue to use) as much of the existing toolchain as possible

[03:21] <diakopter> but I'm sure others have different priorities.

[03:21] <ewilhelm> re the index: putting p6 tarballs in 02packages is definitely going to explode for people running old CPAN.pm's

[03:22] <ewilhelm> but there's no reason a new CPAN.pm couldn't fetch a second index file for p6 and DTRT with it

[03:22] <diakopter> some folks even talk about having a Perl 6 implementation, an installation of which is not dependent on a Perl 5 installation.  I can't imagine that ever happening, so I focus on reuse.

[03:22] <diakopter> ah

[03:26] <diakopter> fer instance, I imagine a world where all the Perl 6 implementations share a common Perl 5/xs package such that "use v6" in a #!/usr/bin/perl file does Devel::Declare-ish magic and swaps over to a loadable Perl 6

[03:32] <diakopter> maybe I be dreaming.

[03:37] <diakopter> ewilhelm: it is spec'ed that any (well, nearly all) of the pure-Perl distributions on CPAN be accessible from a Perl 6 implementation via :from<perl5>  and use v5;

[03:37] <diakopter> (probably there are some whose Perl usage won't be parseable by STD)

[03:37] <diakopter> *reasonably* parseable, I mean.

[03:44] <ewilhelm> I think that still means there's one index on the mirror for p5 and another for p6

[03:44] <diakopter> ewilhelm: ah

[03:45] <diakopter> I can see how that is functionally equivalent to the hidden prefix I was proposing. :)

[03:45] <diakopter> (now that I read that entire thread you linked)

[03:46] <diakopter> ewilhelm: (with the added benefit that it partitions the index, as adamk said)

[03:48] <ewilhelm> the nntp page is currently missing my last message in reply to adam

[03:49] <diakopter> ewilhelm: oh

[03:50] <ewilhelm> ah, there it is:  http://www.nntp.perl.org/group/perl.cpan.workers/2010/01/msg657.html

[03:57] *** wolf2k_ubuntu joined
[04:43] *** synth joined
[04:53] *** douglashunter joined
[04:54] *** soupdragon joined
[05:08] <pugs_svn> r29448 | diakopter++ | [sprixel] finish up geitherls and gbothls, afaict. 

[05:16] <dalek> rakudo/ng: c2ba04d | tene++ | t/spectest.data:

[05:16] <dalek> rakudo/ng: enable fail tests

[05:16] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/c2ba04da02e86e3fd178861f3329c9fb676f1e61

[05:17] <Tene> Oh, this is classy.  Some part of "say" checks defined on an exception before stringifying it.

[05:18] <diakopter> heh

[05:18] <diakopter> makes me smile

[05:18] <diakopter> Tene: where'd everybody go, btw...?  pmichaud, jnthn, moritz_, masak, etc... it's eerily quiet.

[05:19] <Tene> diakopter: I've been wondering that too.  I assume just gone for holidays... I hope.

[05:19] <diakopter> that or conspiratorially sekrit hackathon; either would be ok with me ;)

[05:20] <Tene> Oh, I could throw an exception when it gets set to find out where!

[05:20] *** lumi left
[05:22] <Tene> ... it had better not be doing what I think it's doing...

[05:23] <pugs_svn> r29449 | diakopter++ | [sprixel] 18 lines of explanatory comments/notes.  to myself, I guess. :) 

[05:23] *** lumi joined
[05:23] <Tene> Oh, no, it's not a vivify.  Good.

[05:24] *** xinming_ is now known as xinming

[05:29] <pugs_svn> r29450 | tene++ | Use an explicit stringify in fail.t 

[05:31] *** xinming left
[05:32] *** nihiliad left
[05:38] *** wolf2k_ubuntu left
[05:51] *** douglashunter left
[05:52] <Tene> Okay, I think I just about have 'use fatal' working.

[06:00] *** synth left
[06:16] *** kst left
[06:17] *** kst joined
[06:18] *** ssm left
[06:19] *** cognominal left
[06:23] <pugs_svn> r29451 | tene++ | Remove {} from a string and remove fudge marks for fail.t 

[06:24] <Tene> We're now passing fail.t unfudged.

[06:28] *** ssm joined
[06:28] <Tene> {} in a double-quoted string fails badly...

[06:29] <Tene> ng: my $x = "try{}";

[06:29] <p6eval> ng c2ba04: Null PMC access in get_string()␤current instr.: '_block14' pc 29 (EVAL_1:0)␤

[06:29] <Tene> someone should rakudobug that.

[06:30] <dalek> rakudo/ng: aebe139 | tene++ | src/builtins/ (2 files):

[06:30] <dalek> rakudo/ng: Add support for &fail throwing when $*FATAL is set

[06:30] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/aebe139297f3542f3d2326b577999c7fd90eb851

[06:30] <dalek> rakudo/ng: 4456d81 | tene++ | src/Perl6/Actions.pm:

[06:30] <dalek> rakudo/ng: Implement "use fatal" a bit hackishly

[06:30] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/4456d81dc9c1551a867d58d22c011c977298e537

[06:35] *** zamolxes left
[06:35] *** lumi left
[06:36] *** lumi joined
[06:37] <pugs_svn> r29452 | diakopter++ | [sprixel] begin implementing geitherrs, and take ++mberends suggestion to use terminology "deterministic" and "nondeterministic" instead of "stateless" and "stateful". 

[06:37] <Tene> Okay, someone should add more tests to fail.t

[06:37] <diakopter> someone has a lot of work to do

[06:38] <diakopter> (good thing I'm not someone!)

[06:40] <mberends> doth someone lurketh here?

[06:41] <hejki> *lurkeths*

[06:43] <mberends> hark! there lurk-ed someone!

[06:43] *** meppl joined
[06:45] * Tene de-lurks

[06:45] <Tene> Okay, fine, I'll read the spec a bit more tomorrow and add more tests.

[06:46] * Tene afk # sleeping

[06:50] <mberends> I actually prefer "impure" to "nondeterministic" ;-) # badger #2

[06:52] <diakopter> but.. they're not impure

[06:52] <diakopter> they can have side-effects

[06:53] <diakopter> but are deterministic on their inputs

[06:53] <mberends> arghh, you're right :)

[06:53] <diakopter> the deterministic ones, I mean.  are deterministic on their inputs.  but can have side-effects.

[06:55] <mberends> and are inlinable, as long as they're also nonrecursive

[06:55] <mberends> side-effects are not a blocker, nor is state

[06:56] <diakopter> a deterministic one can't be recursive.  if a rule refers to itself by name, but has no branches/alternations/backtracking, there is no exit from the recursion; it's infinite.

[06:57] <diakopter> it's tricky to keep all the phases distinct in one's brain.

[06:57] <diakopter> there are 4 separate compile-times here :/

[07:00] <mberends> it's hard for me to understand most of this, let alone nit-pick it. I'll just lurk on this for a while :)

[07:09] *** justatheory left
[07:10] *** kaare joined
[07:10] *** kaare is now known as Guest57907

[07:27] *** rgrau` left
[07:35] *** Baggio_ joined
[07:40] *** Su-Shee joined
[07:43] <Su-Shee> good morning :)

[07:49] *** colomon___ left
[07:51] <mberends> Su-Shee: still navigating the German vocabulary in http://www.schreibsturm.org/antiverpeil.html (stubbornly refusing to take a machine translation) and it can be summarized in 3 English words: J(F)DI

[07:57] *** kst left
[07:57] *** kst joined
[08:02] <Su-Shee> *hihi* essentially, yes :)

[08:02] <Su-Shee> the german vocabulary is heavy slang and relatively long sentences, not very good to translate.

[08:03] * diakopter tries it

[08:03] <diakopter> copied, printed, stapled to the wall's placed under pillows or otherwise reused

[08:04] <diakopter> Disclaimer: I am not couch and so I take no patients

[08:05] <mberends> the endless stream of tax returns is familiar :-(

[08:07] <hejki> the endless stream of mandatory taxes to be paid is familiar too

[08:08] <Su-Shee> the sentence would be "I'm not a shrink and I don't take clients" :)

[08:08] <Su-Shee> we just call it "couch" due to Freud's famous one ;)

[08:09] *** renormalist|work joined
[08:10] *** renormalist|work left
[08:15] *** jaldhar_ left
[08:18] *** ashizawa_ joined
[08:19] <mberends> is there any Perlito documentation? http://wiki.perlito.org/ is empty :(

[08:25] *** ashizawa left
[08:30] *** xomas_ joined
[08:37] *** nsh left
[08:38] *** stephenlb left
[08:38] *** nsh joined
[08:39] *** nsh left
[08:40] *** Baggio_ left
[08:40] *** nsh joined
[08:47] <hejki> rakudo: sub foo (Int $x > 2) { say $x } foo(3);

[08:47] <p6eval> rakudo db84bc: Unable to parse multisig; couldn't find final ')' at line 2, near "> 2) { say"␤in Main (file <unknown>, line <unknown>)␤

[08:47] <hejki> rakudo: sub foo (Int $x where > 2) { say $x } foo(3);

[08:47] <p6eval> rakudo db84bc: Unable to parse multisig; couldn't find final ')' at line 2, near "where > 2)"␤in Main (file <unknown>, line <unknown>)␤

[08:49] <hejki> how-to achieve following (warning: perl5 code): sub foo { my $x = shift; return if ($x < 2); } ?

[08:49] <hejki> sub foo (Int $x where 3..Inf) { say $x } foo(4);

[08:49] <hejki> rakudo: sub foo (Int $x where 3..Inf) { say $x } foo(4);

[08:49] <p6eval> rakudo db84bc: Confused at line 2, near "foo(4);"␤in Main (file <unknown>, line <unknown>)␤

[08:50] <hejki> rakudo: sub foo (Int $x where 3..Inf) { say $x }; foo(4);

[08:50] <p6eval> rakudo db84bc: 4␤

[08:50] <hejki> rakudo: sub foo (Int $x where > 2) { say $x }; foo(3);

[08:50] <p6eval> rakudo db84bc: Unable to parse multisig; couldn't find final ')' at line 2, near "where > 2)"␤in Main (file <unknown>, line <unknown>)␤

[08:54] <spinclad> rakudo: sub foo (Int $x where * > 2) { say $x }; foo(3);

[08:54] <p6eval> rakudo db84bc: Unable to parse multisig; couldn't find final ')' at line 2, near "> 2) { say"␤in Main (file <unknown>, line <unknown>)␤

[08:54] <spinclad> ng: sub foo (Int $x where * > 2) { say $x }; foo(3);

[08:54] <p6eval> ng 4456d8: Confused at line 1, near "sub foo (I"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (src/stage0/HLL-s0.pir:328)␤

[08:55] <spinclad> rakudo: sub foo (Int $x where {$^x > 2}) { say $x }; foo(3);

[08:55] <p6eval> rakudo db84bc: 3␤

[08:56] * spinclad thinks the * > 2 one should work, eventually

[08:56] <hejki> sure

[08:56] <hejki> tbh i need: PERL5!!: sub foo { my $x = shift; $x = 1 if ($x <= 2); .. }

[08:57] <spinclad> if you need that i'd do the same sort of thing:

[08:58] <spinclad> rakudo: sub foo (Int $x) { $x = 1 if $x <= 2; ... }

[08:58] <p6eval> rakudo db84bc:  ( no output )

[08:58] <hejki> rakudo: sub foo (Int $x where {$^x > 2} or $x = 1) { say $x }; foo(4)

[08:58] <p6eval> rakudo db84bc: Unable to parse multisig; couldn't find final ')' at line 2, near "or $x = 1)"␤in Main (file <unknown>, line <unknown>)␤

[08:58] <hejki> :>

[08:58] <spinclad> i don't recall a perl6 shortcut

[08:59] <hejki> rakudo: sub foo (Int $x = 1 where {$^x > 2}) { say $x }; foo(4)

[08:59] <p6eval> rakudo db84bc: Unable to parse multisig; couldn't find final ')' at line 2, near "where {$^x"␤in Main (file <unknown>, line <unknown>)␤

[08:59] <spinclad> multi sub foo (Int $x) { $x = 1; ... }; multi foo (Int $x where * > 2) { ... }

[09:00] <spinclad> rakudo: multi sub foo (Int $x) { $x = 1; ... }; multi foo (Int $x where * > 2) { ... }

[09:00] <hejki> i was just gonna say i need to do it "haskell"-style :)

[09:00] <p6eval> rakudo db84bc: Unable to parse multisig; couldn't find final ')' at line 2, near "> 2) { ..."␤in Main (file <unknown>, line <unknown>)␤

[09:01] * spinclad -> bed &

[09:01] *** iblechbot joined
[09:05] <hejki> ty for all :>

[09:09] *** cognominal joined
[09:30] *** meneldor joined
[09:31] <meneldor> hello all and happy new year!

[09:31] <mberends> likewise meneldor :)

[09:36] *** ejs joined
[09:37] <mathw> happy

[09:37] <mathw> ha

[09:37] * mathw has first-day-back-at-work grumps

[09:42] * Su-Shee is looking with a first-day-of-work-feeling at the code which already didn't work last year. ;)

[09:43] <mathw> I'm trying to deal with a bug report that concerns a subsystem I've spent the last two years trying to ignore

[09:43] <mathw> I guess I always suspected that would come back to haunt me

[10:01] *** SmokeMachine left
[10:16] *** cognominal left
[10:19] *** pdcawley left
[10:25] *** bryan[c1] joined
[10:28] *** agentzh1 left
[10:32] *** mikehh left
[10:34] *** ejs left
[10:44] <moritz_> oh hai

[10:45] <mberends> hi moritz_, I wish you an awesome 2010!

[10:45] <moritz_> mberends: same to you, kind sir!

[10:47] <pugs_svn> r29453 | moritz++ | [t/spec] fix a test and smartlink in list_array_perl.t 

[10:47] <pugs_svn> r29453 | 

[10:47] <pugs_svn> r29453 | Also fudge the test (instead of TODO), because ng doesn't like the new form

[10:47] <pugs_svn> r29453 | (though I have no idea why)

[10:49] <moritz_> diakopter++ # perl6.org updates

[10:49] <pugs_svn> r29454 | moritz++ | [S05] small clarification for .match and .subst 

[10:51] <dalek> rakudo/ng: 52d140e | moritz++ | src/core/Any-str.pm:

[10:51] <dalek> rakudo/ng: implement :g in .match

[10:51] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/52d140efe22b769ed15699527aa0dff3c5181f93

[10:51] <dalek> rakudo/ng: e06af48 | moritz++ | src/core/Any-str.pm:

[10:51] <dalek> rakudo/ng: do not limit Any.subst to regexes, for example strings are fine too

[10:51] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/e06af483923dd09fb66698367bc5939ecd7e6942

[10:51] <dalek> rakudo/ng: fe1e749 | moritz++ | src/core/Any-str.pm:

[10:51] <dalek> rakudo/ng: Any.subst() is not global by default, only if :g is present

[10:51] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/fe1e749e1a77c2e7fb42ef53a9c40cf0c155dee7

[10:51] <dalek> rakudo/ng: 8817454 | moritz++ | lib/Safe.pm:

[10:51] <dalek> rakudo/ng: [Safe.pm] disallow slurp()

[10:51] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/8817454d6b875fdb177ffe79d50c49585ba022f8

[11:00] *** lestrrat is now known as lest_away

[11:09] *** zamolxes joined
[11:13] *** payload left
[11:21] *** lest_away is now known as lestrrat

[11:25] *** Helios-- left
[11:25] *** Helios-- joined
[11:29] *** SmokeMachine joined
[11:30] *** bryan[c1] left
[11:40] *** ruoso left
[11:41] *** colomon joined
[11:42] <colomon> All sorts of ng patches overnight, \o/ !!

[11:42] *** ab5tract joined
[11:57] *** Sivasakthikumar joined
[11:57] <Sivasakthikumar> Hi 

[11:58] <Sivasakthikumar> Hi 

[11:59] <colomon> hello

[12:00] <Sivasakthikumar> yes .. I'm new in this gropu 

[12:01] <Sivasakthikumar> Can u help to me How to Download and install perl 6 and Join this community 

[12:02] <Sivasakthikumar> hello 

[12:02] *** patspam joined
[12:03] <Sivasakthikumar> Hello 

[12:04] <colomon> http://perl6advent.wordpress.com/2009/12/01/day-1-getting-rakudo/

[12:05] <Sivasakthikumar> Thanks 

[12:05] <soupdragon> hi

[12:06] <soupdragon> rakudo: say (10/7).WHAT

[12:06] <p6eval> rakudo db84bc: Rat()␤

[12:08] *** Baggio_ joined
[12:09] *** payload joined
[12:20] *** cognominal joined
[12:28] *** plainhao joined
[12:28] *** bluescreen joined
[12:29] <hejki> is there something eqv to bigint?

[12:29] <colomon> hejki: In theory, Int.

[12:29] <colomon> in practice, bot yet in Rakuo.

[12:30] <colomon> not yet in 

[12:30] <colomon> Rakudo

[12:30] <hejki> spelling spree ;>

[12:31] <soupdragon> rakudo: say (2**36).WHAT

[12:31] <p6eval> rakudo db84bc: Num()␤

[12:31] <soupdragon> rakudo: say (2**76).WHAT

[12:31] <p6eval> rakudo db84bc: Num()␤

[12:31] <hejki> rakudo: say (2**76).Int.WHAT

[12:31] <p6eval> rakudo db84bc: Int()␤

[12:31] <hejki> :>

[12:32] <hejki> rakudo: say (2**2566).Int

[12:32] <p6eval> rakudo db84bc: -9223372036854775808␤

[12:32] <hejki> rakudo: say Inf.Int

[12:32] <p6eval> rakudo db84bc: -9223372036854775808␤

[12:32] <hejki> :)

[12:33] <hejki> rakudo: say (2**2566)

[12:33] <p6eval> rakudo db84bc: Inf␤

[12:33] <hejki> hmm.. mine returns a sane answer for that 

[12:33] <hejki> guess it's the use Safe;

[12:33] <soupdragon> rakudo use Safe.WHAT

[12:47] *** ruoso joined
[12:51] *** takadonet joined
[12:51] <takadonet> morning all

[12:51] <colomon> o/

[12:52] <takadonet> colomon: how are u?

[12:52] <colomon> semi-awake

[12:52] <colomon> :)

[12:54] <cognominal> rakudo:  (grammar { token ws { \h* }; rule TOP { ^ <pair>*   }; token pair { \:  \w+  } } ).parse(":a :b"); say @($/<pair>)

[12:54] <p6eval> rakudo db84bc:  ( no output )

[12:54] <cognominal> ng:  (grammar { token ws { \h* }; rule TOP { ^ <pair>*   }; token pair { \:  \w+  } } ).parse(":a :b"); say @($/<pair>)

[12:54] <p6eval> ng 52d140: Method 'isa' not found for invocant of class 'Undef'␤current instr.: 'perl6;Perl6;Actions;_block922' pc 142962 (src/gen/perl6-grammar.pir:29127)␤

[12:54] <soupdragon> rakudo: say (grammar { token ws { \h* }; rule TOP { ^ <pair>*   }; token pair { \:  \w+  } } ).parse(":a :b");

[12:54] *** FCO joined
[12:54] <p6eval> rakudo db84bc:  ( no output )

[12:55] <cognominal> here it gets me only the first pair :(

[13:03] <colomon> do you need a whitespace rule?

[13:04] <colomon> ie ":a:b" would work?

[13:04] <cognominal> is not what ws is about? I tried using the default, and here, a custom one.

[13:05] <cognominal> colomon, you are right!

[13:05] <colomon> but you never use ws, you just define it

[13:05] <colomon> admittedly I am very new to grammars.  :)

[13:05] <cognominal> TOP being a rule, it should use it...

[13:06] <cognominal> I read a lot about them but did not practice much...

[13:06] *** Sivasakthikumar left
[13:07] <colomon> maybe make it ws { \h+ } and { ^ <pair> ** <ws> }  ?

[13:08] <colomon> that's if you want to require ws between pairs

[13:09] <colomon> or { ^ [ <pair> <ws>? ]* } if the ws is optional ? 

[13:10] <cognominal> indeed, quantifiers don't seem to imply  interleaving <ws> in rules

[13:10] <cognominal> I don't know if the specs are explicit about that.

[13:11] *** Kodi joined
[13:11] <colomon> I've mostly just experimented rather than reading the specs.   ;) 

[13:11] <Kodi> So I submitted a tiny Rakudo patch to RT a few months ago (http://rt.perl.org/rt3/Public/Bug/Display.html?id=70105) and it's gotten no responses. Is it less innocuous than I thought, or are the Rakudo folks just busy with other matters?

[13:13] *** SmokeMachine left
[13:14] <colomon> Kodi: most of the work has been going on in the ng branch.  but I'll try to see that something happens with your patch in the next day or two.

[13:14] <Kodi> colomon: Cool, thanks.

[13:14] <cognominal> like says TimToady,  I could advocate it both ways.  But knowing him, I would not be surprised to find a third way out. Like a special adverb

[13:15] <Kodi> colomon: So for the time being, patches should be written against ng, not master?

[13:15] <cognominal> <pair> ** <ws>   is top ugly for something that should be pretty common

[13:16] <colomon> Kodi: ng is kind of a minefield at the moment, missing huge hunks of rakudo

[13:17] <colomon> Kodi: in theory, it should get caught up with and become master any week now....

[13:17] <cognominal> In Perl6 grammar, space separated quantified tokens don't happen. But Perl6 is special that way.

[13:17] <colomon> cognominal: but <pair>* and <pair> ** <ws> mean very different things

[13:18] <cognominal> colomon, the good news is with the recent discoveries, we won't need stem cells to clone Jonathan and pmichaud

[13:19] *** ktne joined
[13:19] <ktne> hello

[13:19] <colomon> but can we have the clones up and running next week?

[13:19] <colomon> ktne: hello

[13:19] <ktne> hi

[13:19] <ktne> is rakudo a little bit slow at startup?

[13:20] <colomon> yes

[13:20] <ktne> will this ever be corrected or it's expected to be like that?

[13:20] <colomon> it's certainly hoped it will be corrected.

[13:20] <ktne> ok then, thanks

[13:21] <ktne> is there any reason why there are so many tests and spectests that are skipped?

[13:21] <ktne> all of them passed except the ones that have been skipped for some unknown reason

[13:21] <colomon> it's already a goods bit better than it was six months ago (at startup)

[13:22] <Kodi> ktne: Rakudo is still a good ways away from being complete, and the specification is still somewhat in flux.

[13:22] <colomon> skips are tests which are expected to fail with the current implementation, ie things that still need to be done.

[13:22] *** Baggio_ left
[13:22] <ktne> ah

[13:24] *** Kodi left
[13:28] *** Baggio_ joined
[13:30] *** patspam left
[13:33] <hejki> rakudo: say "sum: " ~ [+] (gather { for 2..20 -> $i { take $i if ([*] (map { $^a % $^b }, (($i) X (2..$i-1)))) != 0 } });

[13:33] <p6eval> rakudo db84bc: sum: 77␤

[13:37] * rjbs waits for the first person to report a block not working with { $^one, $^two, $^three }

[13:37] *** zamolxes left
[13:38] <moritz_> phenny: tell masak maybe http://perlgeek.de/blog-en/perl-6/perl-6-in-2009.writeback inspires you while writing spec changes summary ... though it's very coarse and selective

[13:38] <phenny> moritz_: I'll pass that on when masak is around.

[13:44] <colomon> moritz_++ for ng commits, yay!

[13:45] <moritz_> what we have now for Any.subst won't work with closures

[13:49] <colomon> moritz_: yes, I know.

[13:49] <colomon> Wasn't quite sure how to make it better...

[13:54] <moritz_> for regexes, .match($regex, :g) plus a map and a few substrs should be enough

[13:54] <moritz_> but I'm hesitant to actually implement it that way

[13:55] *** Exodist left
[13:55] <moritz_> because it means that we need a third alternative for string pattern and replacement closures

[13:57] *** cognominal left
[13:58] *** cognominal joined
[13:59] *** Baggio__ joined
[14:03] <PerlJam> good morning all

[14:03] <moritz_> oh hai PerlJam 

[14:13] *** Baggio_ left
[14:18] <colomon> o/

[14:19] * colomon just remembered it takes over an hour to run spectest on master...

[14:19] <arnsholt> Then you've got time to grab a coffee =)

[14:19] <moritz_> I've just got an idea

[14:19] <moritz_> a perl6-websites mailing lists

[14:20] <moritz_> as a central contact point for perl6.org, dev.perl.org/perl6/ and all the other Perl 6 websites whos maintainers wish to participate

[14:23] *** meppl left
[14:23] *** krunen left
[14:23] *** BooK left
[14:23] *** sjn left
[14:23] *** athomason left
[14:23] *** Maddingue left
[14:23] *** buu left
[14:23] *** astinus left
[14:23] *** lestrrat left
[14:23] *** athomaso1 joined
[14:23] *** buu joined
[14:23] *** rjbs joined
[14:23] *** Maddingue joined
[14:23] *** BooK joined
[14:23] *** bloonix joined
[14:25] *** Baggio__ left
[14:25] *** lestrrat joined
[14:26] *** xomas_ left
[14:27] *** meppl joined
[14:28] <moritz_> ng doesn't build with latest parrot (due to callsignature/callcontext merge)

[14:28] <moritz_> looks like a job for jnthn++

[14:28] *** krunen joined
[14:31] <Tene> Maybe in my licensing email I should have just said "Consider my contributions MIT/X11 licensed, and feel free to relicense in any way you see fit."

[14:31] *** cognominal left
[14:32] <moritz_> and s/whatever/*/ please :-)

[14:33] *** BinGOs joined
[14:33] *** cognominal joined
[14:33] * mberends tries building the latest ng with Parrot r43076. it works :)

[14:38] *** xinming joined
[14:38] <colomon> mberends: ship it!  ;()

[14:38] <colomon> ;)

[14:38] *** xinming left
[14:39] *** lumi left
[14:39] *** lumi joined
[14:41] <mberends> colomon: :)

[14:41] *** scion joined
[14:42] *** scion is now known as astinus

[14:44] *** zamolxes joined
[14:51] <colomon> Just got the following comment for approval on Perl 6 Advent:

[14:52] <colomon> Да уж. По поводу коментариев - навеяла на меня где-то услышанная фраза:

[14:52] <colomon> Только наш клиент в графе “Телефон” мог написать Samsung.

[14:52] <colomon> Babelfish gives that as Yes already. Apropos [komentariev] - blew to me the somewhere heard phrase: Only our client in the graph “telephone” could write Samsung.

[14:52] <colomon> Anyone have an idea if this is a sensible comment or spam?

[14:53] <Grrrr> it's a sensible comment, surprizingly

[14:54] <moritz_> colomon: we've had a few trackbacks from russian translations of our articles

[14:55] <Grrrr> colomon: a better translation would be:

[14:55] <Grrrr> Well.  About the comments, I was reminded by a phrase I've heard

[14:55] <Grrrr> somewhere: "it is only *our* client who could write 'Samsung' in

[14:55] <Grrrr> the 'Phone' field".

[14:56] <PerlJam> colomon: I tend to go with google translate these days as it does a better job than babelfish.

[14:57] <mberends> sarcasm seems to be a popular style in Russian

[14:59] *** Guest57907 left
[15:00] <mberends> but this  Russian seems to be commenting about another comment(ator), not about a posting

[15:02] *** jaldhar_ joined
[15:04] <mberends> like writing in an application form, Length of residence in Australia: about 15 metres

[15:07] <colomon> danke!  approved, then.

[15:08] *** jaldhar_ left
[15:10] *** jaldhar_ joined
[15:11] *** gbacon joined
[15:18] *** Juerd joined
[15:19] *** jaldhar_ left
[15:23] *** jaldhar_ joined
[15:23] *** bluescreen left
[15:26] *** jaldhar_ left
[15:26] *** sunnavy joined
[15:30] *** jaldhar_ joined
[15:31] *** bluescreen joined
[15:35] *** plainhao left
[15:36] *** nihiliad joined
[15:39] *** payload left
[15:40] *** Wolfman2000 left
[15:44] *** am0c joined
[15:46] *** xinming joined
[15:49] *** Psyche^ joined
[15:51] *** Patterner left
[15:51] *** Psyche^ is now known as Patterner

[15:53] *** alester joined
[15:54] *** pardunci1 joined
[15:57] *** parduncia left
[16:02] *** astrojp joined
[16:08] *** tag left
[16:12] *** mj41 left
[16:12] *** somebody_ joined
[16:12] <moritz_> $somebody sent me a Perl version of a C++ program I've written and published two years ago

[16:13] <moritz_> added some fancy OO

[16:13] <moritz_> and made it a factor 1000 slower :-)

[16:13] *** rgrau left
[16:14] *** lichtkind joined
[16:14] *** soupdragon left
[16:14] *** somebody_ left
[16:15] *** soupdragon joined
[16:15] <PerlJam> moritz_: Perl 5 or Perl 6?

[16:15] <moritz_> PerlJam: Perl 5

[16:16] *** mj41 joined
[16:18] <Su-Shee> ugh, what kind of OO did he use?!

[16:19] *** arc_of_descent joined
[16:19] <moritz_> 4 method calls + parameter checks with emulated named parameters for things that were a single array access in the C++ version

[16:21] <moritz_> 4 methods that are called 50k to 100k times per second in the perl version

[16:22] *** lumi left
[16:22] *** lumi joined
[16:23] <szbalint> looks like premature sugarification.

[16:23] <Su-Shee> *hihi* :)

[16:24] *** orafu left
[16:25] *** orafu joined
[16:25] *** justatheory joined
[16:26] *** arc_of_descent left
[16:27] <lichtkind> hello

[16:31] *** somebody__ joined
[16:31] *** somebody__ left
[16:32] *** ash_ joined
[16:32] *** somebody__ joined
[16:32] *** somebody__ left
[16:32] *** _jaldhar_ joined
[16:32] *** soupdragon left
[16:33] *** soupdragon joined
[16:42] *** jaldhar_ left
[16:44] *** douglashunter joined
[16:47] *** lumi left
[16:47] *** lumi joined
[16:48] <colomon> moritz_: Now you just need to convince them to convert it to Perl 6, achieving both OO brilliance and a total 1,000,000 x slowdown.  :)

[16:51] <diakopter> :/

[16:52] <obra> ...why does dev.pugscode.org now redirect to audrey's github?

[16:52] <diakopter> obra: oh

[16:52] <obra> and how can I get at the trac history browser?

[16:52] <diakopter> I turned it off b/c nothing (including the svn mirror) in it had been updated in a year

[16:53] <obra> ....untrue.

[16:53] <diakopter> oh :( ok.. i'll reactivate it now

[16:53] <obra> I was seeing commits from that day when I looked at it a week ago :)

[16:53] <obra> and audrey's github is....very out of date

[16:53] <diakopter> ?

[16:53] <diakopter> it's the one used to create the hackage releases, I thought

[16:54] <obra> dev.pugscode.org shows audrey's git mirror of pugs from 2008

[16:54] <obra> which isn't what I expected ;)

[16:54] <obra> regardless, looking forward to it being turned back on

[16:55] <diakopter> that should do it

[16:56] <obra> testing

[16:56] *** pmurias joined
[16:56] <obra> hm. can't get there.

[16:56] <diakopter> 'tis slow

[16:56] <obra> OperationalError: database is locked

[16:57] <diakopter> hm, maybe apache2 needs restarted instead of just reloaded

[16:57] *** kaare_ joined
[16:57] <pmurias> diakopter: did you get JavaScript::V8 to work?

[16:59] <obra> diakopter: much better. tx

[16:59] <diakopter> well

[16:59] *** meneldor left
[16:59] <diakopter> it still throws errors

[17:00] <diakopter> when more than 1 person try to access it simultaneously

[17:00] <diakopter> also, our zend php license has expired, whatever that means. :)

[17:01] <diakopter> obra: it's b/c trac is setup to use the sqlite backend, which... is not a multi-user database (as I'm sure you're well aware)

[17:02] <diakopter> so when the poor contention/wait algorithms time out, errors arise.

[17:02] <obra> actually, it's fine so long as you don't assume write concurrency.

[17:02] <obra> it _is_ multi-reader

[17:02] *** ejs joined
[17:03] <diakopter> obra: why not use the SVN::Web instance on feather instead of the one in trac?

[17:04] <diakopter> trac is spammed to high heaven.

[17:05] <diakopter> many of the links are to wiki.openqa.org, which is also spammed to high heave.

[17:05] <diakopter> n

[17:06] <obra> ...because it's linked through from the front page of www.pugscode.org

[17:06] *** _jaldhar_ left
[17:08] *** _jaldhar_ joined
[17:12] <pugs_svn> r29455 | pmurias++ | [mildew] simplifing method calls 

[17:12] <diakopter> pmurias: no; I haven't tried it

[17:12] <pugs_svn> r29456 | pmurias++ | [mildew] simplified for AST::If,AST::Let 

[17:16] <mberends> pmurias: did you manage to get that software from the internet to convert your mildew's AST? ;)

[17:19] <sjohnson> rakudo:  my @a = <cow pig chicken>; say @a.grep("i").perl

[17:19] <pmurias> mberends: still working on converting mildew AST to a set of basic nodes which corespond directly to m0ld

[17:19] <p6eval> rakudo db84bc: []␤

[17:19] <sjohnson> rakudo:  my @a = <cow pig chicken>; say @a.grep(/i/).perl

[17:19] <p6eval> rakudo db84bc: ["pig", "chicken"]␤

[17:19] <mberends> pmurias: ok, the README is taking shape here

[17:21] <pugs_svn> r29457 | diakopter++ | [sprixel] finish up geitherrs 

[17:23] <pmurias> mberends: after that i'll convert it to SSA, i'll have to code that myself but the algorithm is already on the internet ;)

[17:24] <mberends> pmurias: ok

[17:27] * TimToady attempts to wake up after sleeping 13 of the last 18 hours...

[17:29] <lichtkind> oh i sleep also very long lately

[17:29] <lichtkind> thatswhy i said lately

[17:30] <pmurias> TimToady: i removed YAML::Syck from STD.pmc

[17:30] <ash_> winter makes me want to slep a lot

[17:30] <TimToady> pmurias: thanks

[17:31] *** orafu left
[17:32] <TimToady> with me, it's hard to detangle SAD from sleep deprivation over the last 3 weeks helping take care of Julian

[17:32] *** orafu joined
[17:32] <TimToady> but the proximate cause was driving straight from Seattle to Mountain View

[17:34] <takadonet> TimToady: how long of a drive is that?

[17:34] <pugs_svn> r29458 | diakopter++ | [sprixel] start and finish gbothrs.  two to go (gbothlrs and geitherlrs). 

[17:36] <pmurias> diakopter: what are those strange gbothrs and geitherrs?

[17:37] <sjohnson> rakudo:  my @a = <cow pig i chicken>; say @a.grep("i").perl

[17:37] <p6eval> rakudo db84bc: ["i"]␤

[17:38] <diakopter> pmurias: good question :)

[17:38] <diakopter> gbothlrs stands for grammar both left and right stateful^Wnondeterministic

[17:38] <diakopter> a sequence of two possibly-backtracking pattern nodes

[17:38] <TimToady> takadonet: 'bout 13 hours of driving, plus sotps; 850 miles

[17:38] <TimToady> *stops

[17:39] <diakopter> pmurias: they're specialized for the various permutations to minimize the runtime checks/branches.

[17:39] *** FCO left
[17:39] <diakopter> afk&

[17:42] <sjohnson> this new p6 grep is a big deal

[17:42] <sjohnson> might also be because regex != string in p6

[17:42] *** flip214 joined
[17:43] <flip214> rakudo: say [R-] 1,4,9;

[17:43] <p6eval> rakudo db84bc: 6␤

[17:43] <flip214> rakudo: say [R-] 1,4,9,16;

[17:43] <p6eval> rakudo db84bc: 10␤

[17:43] <flip214> rakudo: say [R-] 1,2;

[17:43] <p6eval> rakudo db84bc: 1␤

[17:43] <flip214> rakudo: say [R-] 1,4;

[17:43] <p6eval> rakudo db84bc: 3␤

[17:43] <flip214> rakudo: say [R-] 1,4,2;

[17:43] <p6eval> rakudo db84bc: -1␤

[17:43] <flip214> rakudo: say [R-] 1,4,9;

[17:43] <p6eval> rakudo db84bc: 6␤

[17:44] <flip214> Fine, Left-to-right reduce!

[17:44] <flip214> No, wrong ...

[17:44] <flip214> rakudo: say [RR-] 1,4,9,16;

[17:44] <p6eval> rakudo db84bc: Confused at line 2, near "-] 1,4,9,1"␤in Main (file <unknown>, line <unknown>)␤

[17:45] <flip214> rakudo: say [R/] 1,4,9,16;

[17:45] <p6eval> rakudo db84bc: 7.11111111111111␤

[17:45] <flip214> rakudo: say [R/] 1,4,9;

[17:45] <p6eval> rakudo db84bc: 2.25␤

[17:45] *** pmurias left
[17:45] *** snearch joined
[17:45] *** cdarroch joined
[17:47] <flip214> rakudo: say "Good night everyone"

[17:47] <p6eval> rakudo db84bc: Good night everyone␤

[17:47] *** flip214 left
[17:49] *** phenny joined
[17:53] *** phenny left
[17:53] *** FCO joined
[17:54] *** phenny joined
[17:57] <TimToady> hmm, S03:3777 doesn't spec whether R reverses the associativity.

[17:58] *** xinming_ joined
[18:10] *** cognominal left
[18:10] *** cognominal joined
[18:15] *** xinming left
[18:23] *** xomas_ joined
[18:34] *** cognominal_ joined
[18:35] <pugs_svn> r29459 | mberends++ | [mildew/README] new docs, unverified 

[18:37] *** cognominal left
[18:38] <Tene> TimToady: I'd like some clarification on S04... it says "Any othe ruse of the Failure object"... but doesn't specify what other uses are possible.  Does Failure forward everything to the Exception object it refers to?

[18:38] *** orafu left
[18:38] *** orafu joined
[18:39] <Tene> I guess I should really make a diff of what I'd propose in that section.

[18:40] <hejki> rakudo: say [*] (1..100)

[18:40] <p6eval> rakudo db84bc: 9.33262154439441e+157␤

[18:40] <hejki> how-to remove e+..-format?

[18:41] <Tene> maybe .fmt?

[18:42] <hejki> rakudo: say ([*] (1..100)).fmt("%.0f")

[18:42] <p6eval> rakudo db84bc: 93326215443944102188325606108575267240944254854960571509166910400407995064242937148632694030450512898042989296944474898258737204311236641477561877016501813248␤

[18:42] <hejki> najs

[18:43] <mberends> but wrong, it should end in a couple of zeroes :(

[18:44] *** astrojp left
[18:44] *** stephenlb joined
[18:46] <mberends> pugs: say ([*] (1..100)).fmt("%.0f")

[18:46] <p6eval> pugs: 93326215443944150000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000␤

[18:46] <mberends> pugs: say ([*] (1..100))

[18:46] <p6eval> pugs: 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000␤

[18:46] *** astrojp joined
[18:47] <PerlJam> nice.  They differ completely starting from the 16th digit

[18:48] <Tene> I'm kind of curious about the sequence "Largest number that can be produced by p6 code of length n"

[18:49] <soupdragon> is that busy beaver

[18:49] <Tene> Kinda.  Not sure if it's different or not.

[18:51] *** ShaneC joined
[18:55] <Su-Shee> a book teaching "good perl 6 style" is going to be interesting... 

[18:55] *** partisan joined
[18:56] <PerlJam> Su-Shee: "Perl 6 Best Practices"  :)

[18:56] * Su-Shee essentially has already bought "Higher Order Perl 6" :)

[18:57] <Su-Shee> well, I'm prepared to. ;)

[18:58] <hejki> rakudo: my $str = "foobar"; say $str.comb.elems; say "any other ways? :)"

[18:58] <p6eval> rakudo db84bc: 6␤any other ways? :)␤

[18:58] <Tene> any other ways to do what?

[19:00] <Tene> HOP is a very nice book.

[19:00] <PerlJam> hejki: This is Perl.  There are always other ways.

[19:03] <sjohnson> lifetime registration on as many computers that you own so im doing the "right thing"

[19:03] <Su-Shee> rakudo: my $str = "foobar"; say .elems for $str.comb;

[19:03] <p6eval> rakudo db84bc: 1␤1␤1␤1␤1␤1␤

[19:04] <Tene> registration of what?

[19:04] <Su-Shee> rakudo: my $str = "foobar"; say .perl for $str.comb;

[19:04] <p6eval> rakudo db84bc: "f"␤"o"␤"o"␤"b"␤"a"␤"r"␤

[19:05] <hejki> hmm

[19:05] <hejki> my point being

[19:05] <hejki> rakudo: my $str = "foobar"; say $str.length;

[19:05] <p6eval> rakudo db84bc: Method 'length' not found for invocant of class 'Str'␤in Main (file src/gen_setting.pm, line 324)␤

[19:05] *** orafu left
[19:05] <hejki> is there any eqv?

[19:05] <PerlJam> rakudo: my $str = "foobar"; say $str.chars

[19:05] *** orafu joined
[19:05] <p6eval> rakudo db84bc: 6␤

[19:05] <hejki> ahh

[19:05] <hejki> nice

[19:05] <Su-Shee> rakudo: my $str = "foobar"; say $str.elems;

[19:05] <hejki> PerlJam++

[19:05] <p6eval> rakudo db84bc: 1␤

[19:06] <Tene> hejki: the problem is that "length" is ambiguous between chars, bytes, and graphs.

[19:06] <Tene> so you need to specify.

[19:06] <PerlJam> hejki: "length" is insufficient because you aren't specifying the units of measure

[19:06] <PerlJam> what Tene said

[19:06] <Tene> consider multibyte chars, and combining chars.

[19:06] <hejki> ahh

[19:06] <hejki> true :)

[19:06] <cognominal_> rakudo: class A; say (A.new x 3) ».» perl

[19:06] <p6eval> rakudo db84bc: Confused at line 2, near "\x{bb}.\x{bb} perl"␤in Main (file <unknown>, line <unknown>)␤

[19:07] <cognominal_> should method calling be hyperoberable?

[19:07] <Tene> It is.

[19:07] <Tene> rakudo: class A; say (A.new x 3)>>.perl

[19:07] <cognominal_> rakudo: class A; say ((A.new x 3) ».» perl)

[19:07] <cognominal_> oops

[19:07] <Tene> rakudo: class A {}; say (A.new x 3)>>.perl

[19:07] <Tene> oright

[19:07] <Tene> ng: class A {}; say (A.new x 3)>>.perl

[19:08] <p6eval> rakudo db84bc:  ( no output )

[19:08] <p6eval> rakudo db84bc: Confused at line 2, near "\x{bb}.\x{bb} perl)"␤in Main (file <unknown>, line <unknown>)␤

[19:08] <p6eval> rakudo db84bc:  ( no output )

[19:08] <p6eval> ng 52d140: Method 'Str' not found for invocant of class 'A'␤current instr.: 'perl6;Mu;' pc -1 ((unknown file):-1)␤

[19:08] <Tene> cognominal_: class declaration is always a timeout in rakudo master for p6eval

[19:11] <cognominal_> rakudo:  (Int.new x 3) ».» perl

[19:11] <p6eval> rakudo db84bc: Confused at line 2, near "\x{bb}.\x{bb} perl"␤in Main (file <unknown>, line <unknown>)␤

[19:11] *** am0c left
[19:11] <cognominal_> rakudo:  say (Int.new x 3) >>.perl

[19:11] <p6eval> rakudo db84bc: Confused at line 2, near ">>.perl"␤in Main (file <unknown>, line <unknown>)␤

[19:12] <cognominal_> rakudo:  say ("f","oo","bar").>>.chars;   

[19:12] <p6eval> rakudo db84bc: 123␤

[19:13] <cognominal_> at last, I got it right

[19:13] <cognominal_> reading the specs help

[19:15] *** orafu left
[19:15] *** orafu joined
[19:18] <Tene> you can't have a space between something and its postfix.

[19:18] *** sjohnson sets mode: +o cognominal_

[19:18] <Tene> rakudo: say (Int.new x 3)>>.chars

[19:18] <p6eval> rakudo db84bc: 3␤

[19:20] *** Chillance joined
[19:22] <colomon> rakudo: say (Int.new x 3)>>.perl

[19:22] <p6eval> rakudo db84bc: "000"␤

[19:23] <Tene> I also suspect that you mean 'xx'

[19:23] <Tene> rakudo: say (Int.new xx 3)>>.perl

[19:23] <p6eval> rakudo db84bc: 000␤

[19:23] <Tene> 'x' is str rep, 'xx' is list rep

[19:24] *** rachelBROWN joined
[19:24] <cognominal_> yea, I am still falling in many Perl 5 traps.

[19:25] <cognominal_> not only falling for them, but taking a while to realize what is happening...

[19:25] <sjohnson> i do it too :(

[19:25] <sjohnson> even fell in a bad php trap and used == for strings

[19:27] *** orafu left
[19:27] *** orafu joined
[19:28] <cognominal_> a super strict mode should oblige to explicitely numfiy the operands if == is really intended.

[19:32] <sjohnson> please elaborate on the numify thing

[19:35] <cognominal_> sorry. forget what I said, it would not help on strings.

[19:42] *** nihiliad left
[19:42] *** nihiliad joined
[19:45] *** Exodist joined
[19:45] *** orafu left
[19:45] *** orafu joined
[19:50] *** soupdragon left
[19:59] *** orafu left
[19:59] *** orafu joined
[20:00] *** coke joined
[20:00] <coke> is RT #71812 due to a missing "begin" ?

[20:00] *** mariano__ joined
[20:01] <coke> (I would imagine his complaint is correct.)

[20:04] *** bluescreen left
[20:06] *** ive joined
[20:07] *** ash_ left
[20:11] *** ash_ joined
[20:12] *** ive left
[20:12] *** ive joined
[20:12] *** orafu left
[20:13] <Su-Shee> _HyperWhatever_? :) oh my.. :)

[20:13] *** orafu joined
[20:19] <colomon> HyperWhatever?

[20:20] <Su-Shee> I'm reading http://perlcabal.org/syn/S02.html

[20:20] *** ruoso left
[20:21] <colomon> ouch.  that made my head hurt.

[20:23] <Su-Shee> I'm already crying while hysterically laughing. ;)

[20:57] <ash_> can rakudo target pbc? instead of pir? 

[20:58] *** orafu left
[20:58] *** orafu joined
[20:59] <PerlJam> ash_: what do you mean?  You can generate a PBC from the PIR.

[20:59] <ash_> ah, good point. i can never figure out the obvious questions

[21:00] * diakopter learned about POSIX::pause today

[21:01] <diakopter> in the absence of Time::HiRes, I can use it to imitate setitimer

[21:03] *** lumi left
[21:03] *** lumi joined
[21:12] *** FCO left
[21:12] *** payload joined
[21:12] *** orafu left
[21:13] *** orafu joined
[21:14] *** japhb left
[21:17] *** orafu left
[21:18] *** orafu joined
[21:24] *** ktne left
[21:26] *** snearch left
[21:26] *** meppl left
[21:36] *** coke left
[21:40] <PerlJam> whoa.   I just ran "make spectest" for the first time in a while and it was *fast*.    I'm guessing that's because of all of the currently-non-functional tests that have been commented out.

[21:40] <Tene> hehe

[21:41] <colomon> PerlJam: ng branch?

[21:41] <PerlJam> aye

[21:42] <Tene> PerlJam: I enabled a test file last night that didn't pass on master. :)

[21:42] *** japhb joined
[21:43] <Tene> I don't know what exactly to work on next, as so much is pending on the lists refactor plan from pm.

[21:43] <colomon> PerlJam: yeah, something like 90% of the spectests are turned off there.

[21:46] <mberends> pm's probably busy working on it offline. that's how he created nqp-rx. it needs intense concentration.

[21:47] <Tene> It always makes me just a little bit nervous how spread thin the p6 development effort is.  I'm not quite sure what I can do to fix it, though.

[21:48] <PerlJam> Tene: become a clone of either Pm or jnthn so when one of them disappears, you're there to take up the slack  :)

[21:48] <colomon> Hmmm... it seems to me we're doing okay on the overall number of people working on it at the moment.

[21:48] <Tene> That was one of my motivations for working on ng.

[21:48] <mberends> Tene: you are helping out a great deal. I understand your thought, though.

[21:48] <colomon> But we're horribly blocked on ng and jnthn's stuff.

[21:49] <colomon> s/ng/pmichaud/

[21:49] *** patspam joined
[21:49] <colomon> and wow, that's an interesting freudian slip....

[21:49] <mberends> heh

[21:49] <PerlJam> colomon: though there are still things that can be done to make ng do things that can currently be done in master but not ng.

[21:49] <PerlJam> (without regard to jnthn or pmichaud)

[21:50] <colomon> PerlJam: Sure, but it's a pain in the neck picking through everything trying to find things that can be made to work at the moment.

[21:51] *** ive left
[21:52] *** zamolxes left
[21:52] *** zamolxes joined
[21:54] <PerlJam> colomon: well, mberends is probably correct.  When I talked to Pm the other day he said he was going to focus on get ng in shape to become master.  So, it's likely that we'll see barriers removed over the next couple of weeks.

[21:54] <colomon> Tene: I keep on thinking a few of us should just go ahead and figure out how to make lists work.

[21:55] <PerlJam> colomon: that would be good even if it duplicated effort because of the expertise gained.

[21:55] <PerlJam> (IMHO)

[21:55] <Tene> colomon: Sure.  I just have limited time, and if it's getting done, I'd rather not duplicate effort.

[21:57] <colomon> Tene: understood, I'm in the same boat.  (Actually, my time may be effectively none at the moment.)

[21:58] <Tene> HAH I HAVE MORE TIME THAN YOU!

[21:59] *** orafu left
[21:59] *** orafu joined
[22:00] <colomon> Tene: yeah, that's what happens when you have to get ready to try to sell your house AND figure out how to make about 30-40% more money at $work this year.

[22:01] <Tene> I can empathize, unfortunatly.

[22:02] <PerlJam> colomon: That second thing is easy ... just get another job and forego sleep or something  :)

[22:02] <colomon> I already got myself a small child to make sure I never get enough sleep.  :)

[22:04] <PerlJam> I've got 4 year old twins that still crawl into bed with us in the middle of the night. Also, one falls asleep quickly, the other tries to stay up all night.

[22:05] <ash_> I'd be willing to try to contribute to the ng branch more if I knew what needed to be done

[22:05] <PerlJam> ash_: everything!  :)

[22:05] <ash_> i found some bugs or rather things not yet implemented in ng that i am trying to tackle and just submit a patch

[22:06] <ash_> PerlJam: see, when you say everything it makes it almost hard to help though, because then i worry someones already doing it

[22:07] <PerlJam> ash_: Find a reasonable sized area of interest and ask here if anyone is working on it.  Either the answer is "no" and you're relatively safe or the answer is "yes" and at worst you can collaborate.

[22:08] <dalek> rakudo/ng: f7ad5dc | duff++ | src/ (2 files):

[22:08] <dalek> rakudo/ng: rename break/continue to succeed/proceed

[22:08] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/f7ad5dcf196a0d399a5ef1c5160131da5ed27a73

[22:09] <ash_> PerlJam: hence my working on meta object stuff, but still, jnthn has said he was going to work on some of the stuff i am doing, i just don't know which parts, also, MOP isn't really speced much in S12~14 

[22:10] <PerlJam> ash_: Then you could spec it (either by documenting existing design or by stealing from Moose or whatever)

[22:12] <ash_> there is a document in ng/docs/metamodel.pod that jnthn started

[22:15] <colomon> Hmmm... perhaps the most productive thing we could do at the moment would be to try to make a partial list of areas in ng that need work and aren't blocked at the moment....

[22:15] <colomon> Also, there's a LOT of room for more/better spectests.

[22:16] <ash_> metamodel stuff isn't really blocked by anything, its just needs to get implemented as far as i can tell 

[22:17] <ash_> i did notice most of the HOW methods expect a HOW object, but are passing tests so I am assuming there is room for more tests in the metamodel stuff, thats what I was going to do if i finished adding ^methods to roles 

[22:21] *** pmurias joined
[22:21] <pmurias> mberends: the default backend is via-C

[22:21] <pmurias> mberends: -Cm0ld is used to view the m0ld for a given program

[22:22] <mberends> pmurias: oh. see, how much I still need to learn!

[22:23] *** cognominal_ left
[22:23] <mberends> pmurias: would you do a few README edits and commit before I continue with it? I'm re-installing Linux a few times.

[22:24] <pmurias> ok

[22:25] <colomon> afk

[22:25] * mberends is very happy with Ubuntu 10.4-alpha1. it even includes libv8-dev :)

[22:25] <pmurias> wow does it work with JavaScript::V8?

[22:26] <mberends> yes! :)

[22:27] <sjohnson> hi

[22:27] <ash_> mberends: " I'm re-installing Linux a few times." just curious why do you need to do it more than once? 

[22:27] <ash_> multiple computers? 

[22:29] <mberends> ash_: one computer, but there are usually a few matters like partitioning that I try out various ways. Also, software installed without using packages is not uninstalled properly.

[22:29] *** kaare_ left
[22:32] <ash_> mberends: ah, makes sense. I always setup my computers with a ~/Projects directory and have ~/Projects/local for software not installed with a package system. 

[22:33] *** Su-Shee left
[22:33] <mberends> this time around, the root partition will be ext4 and /home gets either ext2 or ext3. There is also hibernate in the swap partition to verify.

[22:34] <ash_> either that or make my own portfile/ebuild files that i want to install outside that folder, so i can use a package system to uninstall/update automattically if i update the files properly

[22:35] <mberends> there is also multi boot (Win 7, 2008 and XP) to factor in for $work

[22:36] <pugs_svn> r29460 | pmurias++ | fix a couple of things in the README 

[22:39] <ash_> i think the key to all of this is having a reliable backup system, lol the second i start tampering with my setup i almost always mess something up, ususally i can recover just fine, but there are losses sometimes 

[22:41] <mberends> so true. for backups I prefer spare drives and computers, and just replicate content often

[22:42] <ash_> is rakudo bug #71816 really a bug?

[22:43] <ash_> i don't see it...

[22:45] <ash_> oh, nevermind i see what the complaint is, the error message doesn't refer to a line# or filename, thats to do with $?FILE and $?LINE but those don't work in rakudo

[22:46] *** cognominal joined
[22:52] *** ejs left
[22:54] *** pmurias left
[22:58] *** lumi left
[22:58] *** lumi joined
[22:59] <dalek> rakudo/ng: a867b39 | duff++ | src/Perl6/Grammar.pm:

[22:59] <dalek> rakudo/ng: Add unspace parsing

[22:59] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/a867b396c6287d001d0cc247629a3dbcb948fdc5

[22:59] <dalek> rakudo/ng: 30136a1 | duff++ | src/Perl6/Grammar.pm:

[22:59] <dalek> rakudo/ng: Parse variable shape in declarations

[22:59] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/30136a118fb712ccaeb39c879b1ada7578122b80

[23:03] *** ash_ left
[23:11] *** patspam left
[23:30] <colomon> What do those patches do, then? 

[23:31] *** ab5tract left
[23:37] *** mariano__ left
[23:37] *** ruoso joined
[23:37] *** nihiliad left
[23:41] *** _jaldhar_ left
[23:43] *** lumi left
[23:43] *** lumi joined
[23:58] *** iblechbot left
