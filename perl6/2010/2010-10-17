[00:02] *** meppl left
[00:03] *** mavrc left
[00:08] *** dolmen left
[00:10] *** astinus left
[00:23] *** colomon_ joined
[00:23] *** colomon left
[00:23] *** colomon_ is now known as colomon

[00:37] *** cotto left
[00:57] *** Trashlord left
[01:01] *** Sarten-X left
[01:06] *** molaf_ joined
[01:08] *** Sarten-X joined
[01:09] *** molaf left
[01:14] *** ggoebel joined
[01:17] *** ggoebel left
[01:21] *** rgrau__ joined
[01:21] *** rgrau_ left
[01:22] *** Schwern left
[01:36] *** rgrau__ left
[01:39] *** rgrau___ joined
[01:39] *** ggoebel joined
[01:50] *** REPLeffect joined
[01:50] *** rgrau___ left
[01:50] *** rgrau___ joined
[01:56] *** ggoebel left
[02:04] *** jhuni joined
[02:10] *** Italian_Plumber left
[02:12] *** tom_tsuruhara left
[02:20] *** alkii joined
[02:20] *** alkii left
[02:21] *** rgrau___ left
[02:21] *** rgrau___ joined
[02:23] *** meppl joined
[02:31] *** justatheory joined
[02:44] *** Schwern joined
[03:09] *** zostay left
[03:10] *** zostay joined
[03:18] *** nymacro joined
[03:20] *** rgrau___ left
[03:28] *** meppel joined
[03:31] *** meppl left
[03:38] *** cotto joined
[03:47] *** nym joined
[03:51] *** pythonian4000 is now known as pythonian4000afk

[03:51] *** nymacro left
[03:56] *** tsyselsky joined
[04:09] *** envi joined
[04:18] *** dukeleto joined
[04:34] *** tsyselsky left
[04:49] *** jferrero left
[04:54] *** xinming_ joined
[04:55] *** _kaare joined
[04:56] *** [Sec] left
[04:56] *** xinming left
[05:11] *** nym left
[05:13] *** nymacro joined
[05:20] *** satyavvd joined
[05:22] *** justatheory left
[05:22] *** justatheory_ joined
[05:22] *** justatheory_ is now known as justatheory

[05:28] *** clkao left
[05:39] *** meppel left
[05:40] *** meppl joined
[06:35] *** masonkramer left
[06:36] *** masonkramer joined
[06:38] *** cognominal left
[06:38] *** meppl left
[07:17] *** kcwu left
[07:20] *** Mowah joined
[07:24] *** kjeldahl joined
[07:39] *** orafu left
[08:00] *** obra joined
[08:01] *** satyavvd left
[08:02] *** clkao joined
[08:10] <moritz_> good morning

[08:21] *** obra left
[08:28] *** justatheory left
[08:28] *** justatheory joined
[08:30] <tadzik> good morning

[08:31] *** isBEKaml joined
[08:32] *** justatheory left
[08:37] *** Ross joined
[08:41] *** isBEKaml left
[08:46] *** meppl joined
[08:48] *** mavrc joined
[08:51] *** pythonian4000afk is now known as pythonian4000

[09:16] *** zulon joined
[09:18] *** tadzik left
[09:19] *** eternaleye joined
[09:27] *** kcwu joined
[09:28] *** kcwu left
[09:28] *** kcwu joined
[09:35] *** wamba joined
[09:38] *** Italian_Plumber joined
[09:38] *** risou joined
[09:52] *** jaldhar left
[09:52] *** jaldhar joined
[09:58] *** cognominal joined
[10:05] *** zulon left
[10:07] *** risou_ joined
[10:10] *** risou left
[10:10] *** MayDaniel joined
[10:19] *** Italian_Plumber left
[10:37] *** mavrc left
[10:47] *** mavrc joined
[10:57] *** chturne left
[10:57] *** ggoebel joined
[11:04] *** pythonian4000 is now known as pythonian4000afk

[11:04] *** risou_ left
[11:04] *** jedai_ joined
[11:08] *** jedai left
[11:15] *** MayDaniel left
[11:24] *** wamba left
[11:26] *** Kodi joined
[11:29] *** Trashlord joined
[11:38] *** icwiener joined
[11:42] *** rgrau_ joined
[11:55] * jnthn drops a pin

[11:57] *** kanu joined
[11:58] * moritz_ puts a haystack over the pin

[12:08] *** pythonian4000afk is now known as pythonian4000

[12:08] *** pythonian4000 is now known as pythonian4000afk

[12:15] <kanu> helo ppl

[12:16] <kanu> I have few question about p6

[12:17] <jnthn> hi kanu 

[12:17] <jnthn> Feel free to ask. :_)

[12:18] <kanu> emm.. is it true with perl6 we can translate our code to another languages? C for example?

[12:20] <jnthn> There's no active work on this that I'm aware of.

[12:21] <jnthn> That said, generally compilers turn the Perl 6 syntax into an AST of some kind.

[12:21] <jnthn> Which is a good starting point for then transforming code to another language. But then there's the issue of runtime support.

[12:22] <jnthn> What's more happening is that there's compilers targetting different VMs.

[12:23] <kanu> jnthn: ok.. can you tell me how can a volunteer participate? I know few veteran C/Perl programmers..

[12:27] <jnthn> kanu: There's lots of different Perl 6-y projects going on, so it's mostly finding something that's interesting and talking to the people who're working on that area for ideas of what to do. :-) For example, there's various compiler projects, plenty to do on the test suite, documentation efforts, writing modules, and no doubt more.

[12:27] <jnthn> http://www.perl6.org/ has some overview of various things going on.

[12:27] *** ggoebel left
[12:28] <jnthn> I work on Rakudo and a meta-model / backends project called 6model, if either of those are interesting to you. :-)

[12:28] <jnthn> http://www.perl6.org/getting-started/involved has some other ideas too

[12:29] <kanu> great, one more note.. why is it currently too slow to run most our converted perl5 -> Perl6 programs?

[12:30] <rjbs> Rakudo is still very slow, because it is being implemented only to be correct, not fast.

[12:31] <rjbs> Once everything works, it can be made faster later.

[12:31] <jnthn> kanu: I guess you're talking about Rakudo. The focus, as rjbs said, has been on actually getting stuff implemented at all.

[12:31] <Juerd> How likely is it to become as speedy as Perl 5?

[12:31] <jnthn> There's active efforts to make things faster now.

[12:31] <kanu> jnthn: I guess I can ask my friends to help in that area then :)

[12:32] <kanu> jnthn: speed is our main concern at moment.. 

[12:32] <sjn> kanu: a good way to start is to recommend your friends to drop by here :)

[12:33] <kanu> sjn: I surely will do.

[12:34] <kanu> jnthn: as jured asked.. Do you think it is going to be faster than perl5 once optimized?

[12:34] <jnthn> That's an almost impossible question to answer without it being a bit more specific.

[12:35] <jnthn> The answer is probably "yes" and "no".

[12:35] <jnthn> I expect there's things we can do faster in Perl 6.

[12:35] <jnthn> I suspect there's some things we may not be able to compete on.

[12:36] <jnthn> The more interesting question is, "is this fast enough for me to do what I need to do in it"

[12:36] *** xabbu42 joined
[12:36] <jnthn> And I'm confident that with enough work we'll get to that point.

[12:37] <kanu> jnthn: I understand.. hats off for you guys.. :) Good luck

[12:37] <jnthn> Thanks. :-)

[12:38] *** kanu left
[12:39] *** ggoebel joined
[12:41] *** xabbu42 left
[12:42] *** xabbu42 joined
[12:42] <jnthn> walk &

[12:44] *** MayDaniel joined
[12:44] *** MayDaniel left
[12:44] *** MayDaniel joined
[12:44] *** Axius joined
[12:45] *** masak joined
[12:45] <masak> oh hai!

[12:46] * moritz_ is in a twisted maze of IRC channels, all unlike each other

[12:49] <Kodi> rakudo: grammar G { token TOP { a } }; class C { method TOP($/) { make (1, 2) } }; my $x = G.parse("a", actions => C.new); say ?$x; my ($a, $b) = $x.ast; say "$a;$b";

[12:50] <p6eval> rakudo 064702: OUTPUT«Bool::True␤1 2;Any()␤»

[12:52] <masak> rakudo: grammar G { token TOP { a } }; class C { method TOP($/) { make 1, 2 } }; my $x = G.parse("a", actions => C.new); say ?$x; my ($a, $b) = $x.ast; say "$a;$b";

[12:52] <p6eval> rakudo 064702: OUTPUT«Too many positional parameters passed; got 2 but expected 1␤  in 'make' at line 5587:CORE.setting␤  in 'C::TOP' at line 22:/tmp/fbSihbDckq␤  in 'G::TOP' at line 22:/tmp/fbSihbDckq␤  in 'Grammar::parse' at line 6034:CORE.setting␤  in main program body at line

[12:52] <p6eval> ..22:/tmp/fbSihbDckq␤»

[12:52] <masak> hm :)

[12:52] *** Quadrescence left
[12:52] <moritz_> rakudo: grammar G { token TOP { a } }; class C { method TOP($/) { make (1, 2) } }; my $x = G.parse("a", actions => C.new); say ?$x; my ($a, $b) = $x.ast.list; say "$a;$b";

[12:52] <p6eval> rakudo 064702: OUTPUT«Bool::True␤1 2;Any()␤»

[12:52] *** chturne joined
[12:53] <moritz_> rakudo: grammar G { token TOP { a } }; class C { method TOP($/) { make (1, 2) } }; my $x = G.parse("a", actions => C.new); say ?$x; my ($a, $b) = $x.ast.flat; say "$a;$b";

[12:53] <Kodi> Not long ago, that list assignment made $a == 1 and $b == 2, at least if you did @($x.ast) or so. I think it's the PARROT_REVISION bump that caused the change.

[12:53] <p6eval> rakudo 064702: OUTPUT«Bool::True␤1 2;Any()␤»

[12:54] <moritz_> Kodi: I'd guess it was 5ce8fcfe541b6eb2426ea64247bf01998b0d5208

[12:55] <Kodi> moritz_: I think you're right.

[12:56] *** zulon joined
[12:58] <masak> hm. I've hit what I think is the first real blocker in my weekend experiment.

[12:59] <moritz_> do tell

[12:59] <masak> I've successfully altered the grammar and the actions, but I've no clue what to do with the PAST generation.

[12:59] <masak> here it is, by the way: http://github.com/masak/rakudo-with-diagram-syntax

[12:59] <moritz_> what are you doing?

[12:59] <masak> I'm introducing a DSL, as it were.

[12:59] <masak> the hard way :)

[13:00] <masak> oh well, I'll focus on making it parse, and tackle the PAST later.

[13:00] <moritz_> so, a custom metaclass with custom syntax?

[13:01] <masak> yup.

[13:01] *** zulon left
[13:01] <masak> that's all in place. well, except for the syntax within the 'element' curlies.

[13:01] <masak> working on that now.

[13:02] * moritz_ would have started with smaller deviations from the standard language

[13:03] <masak> I have this to say so far: there's no way to go about this *except* by small incremental changes.

[13:03] *** ggoebel left
[13:03] <moritz_> that's what I'd expected too

[13:03] <masak> you think Rakudo at the user level is obtuse? try modifying the internals. :)

[13:04] <masak> on the other hand, it's not much more complicated in practice than it would seem in theory. which is a good sign.

[13:04] <moritz_> the internals are .... delicated

[13:04] <moritz_> s/d$//

[13:04] * masak .oO( "delectable" )

[13:06] *** [Sec] joined
[13:09] <moritz_> actually I found the internals quite approachable, as long as one doesn't mess with stuff too close to parrot

[13:09] *** Ross left
[13:10] <masak> aye. the Grammar.pm and Actions.pm have been very nice to work with so far.

[13:11] <masak> except that one has to take small steps, or something unknown blows up somewhere.

[13:11] <masak> mfollett++ # http://mfollett.com/15-minutes-of-fame

[13:11] <masak> moritz_++

[13:11] <moritz_> I also find PAST not too bad

[13:12] <masak> PAST seems very nice.

[13:15] <flussence> If I wanted to go reading/writing/doing-stuff-with binary files, what's the best tool for that in rakudo?

[13:15] <moritz_> flussence: there's a Buf type

[13:16] <moritz_> flussence: and a read(Int $bytes) methodin src/core/IO.pm

[13:16] *** Patterner left
[13:16] <moritz_> and werite(Buf) too

[13:18] *** xabbu42 left
[13:19] *** xabbu42 joined
[13:20] *** ggoebel joined
[13:21] <moritz_> rakudo: say (<a b> >>~<< <a b c d e f g>)

[13:21] <p6eval> rakudo 064702: OUTPUT«Sorry, sides are of uneven length and not dwimmy.␤  in 'hyper' at line 184:CORE.setting␤  in main program body at line 1␤»

[13:21] <moritz_> rakudo: say (<a b> <<~>> <a b c d e f g>)

[13:21] <p6eval> rakudo 064702: OUTPUT«aabbacbdaebfag␤»

[13:21] <moritz_> rakudo: say (<a b> <<~>> <a b c d e f g>).perl

[13:21] <p6eval> rakudo 064702: OUTPUT«["aa", "bb", "ac", "bd", "ae", "bf", "ag"]␤»

[13:24] *** xabbu42 left
[13:27] *** kjeldahl left
[13:28] *** Ross joined
[13:28] *** Ross left
[13:28] *** Ross joined
[13:31] *** Psyche^ joined
[13:32] *** Psyche^ is now known as Patterner

[13:39] *** muixirt joined
[13:47] <moritz_> http://github.com/moritz/perlgeek.de/blob/master/source/blog-source-en/perl-6/contribute-now-improve-error-messages.txt # any comments before I publish it?

[13:49] * masak looks

[13:50] <Kodi> moritz_: You may want to warn 'em about how a * at the end of an argument will complicate finding its length.

[13:51] <masak> aye.

[13:51] <moritz_> Kodi: does that really matter? in the case of a * there won't be an error message

[13:51] <Kodi> Then again, * isn't treated specially on the *non-dwimmy* side of a hyper.

[13:52] *** wamba joined
[13:52] <Kodi> I guess not, then.

[13:52] <LoRe> moritz_: Please submit your patch to the

[13:52] <masak> re "(probably named) parameter": I think I'd use a dynamically scoped variable for that; but there are pros and cons.

[13:52] <LoRe> moritz_: just a typo ;)

[13:52] *** Ross left
[13:52] <masak> ss/lack quite a bit/lags quite a bit/

[13:53] <masak> <p><strong>Update:</strong> There have been two submissions so far, challenge

[13:53] <masak> closed.</p>

[13:53] <masak> say what?

[13:53] <moritz_> ups

[13:53] <masak> :)

[13:54] <moritz_> copied from the previous one

[13:54] <moritz_> rakudo: say $*foo

[13:54] <p6eval> rakudo 064702:  ( no output )

[13:54] <masak> well-known "internal error during 'say' call disappears" thing. contextuals in general work.

[13:56] <masak> rakudo: my $*i = 0; sub foo { say "\\o/"; foo if ++$*i < 5 }; foo

[13:56] <p6eval> rakudo 064702: OUTPUT«\o/␤\o/␤\o/␤\o/␤\o/␤»

[13:57] <masak> rakudo: my $*i = 0; sub foo { say ++$*i; foo if $*i < 5; say --$*i }; foo

[13:57] <p6eval> rakudo 064702: OUTPUT«1␤2␤3␤4␤5␤4␤3␤2␤1␤0␤»

[13:57] *** Axius_ joined
[13:57] <masak> rakudo: my $*i = 0; sub foo { say ++$*i; callsame if $*i < 5; say --$*i }; foo

[13:57] <p6eval> rakudo 064702: OUTPUT«1␤Null PMC access in clone()␤  in 'foo' at line 1␤  in main program body at line 22:/tmp/VACBlcU230␤»

[13:58] <masak> :(

[13:58] <masak> rakudo: my $*i = 0; sub foo { say ++$*i; &*ROUTINE() if $*i < 5; say --$*i }; foo

[13:58] <p6eval> rakudo 064702: OUTPUT«1␤Contextual &*ROUTINE not found␤  in 'foo' at line 1␤  in main program body at line 22:/tmp/s0e2RrX2wi␤»

[13:58] <masak> rakudo: my $*i = 0; sub foo { say ++$*i; &?ROUTINE() if $*i < 5; say --$*i }; foo

[13:58] <p6eval> rakudo 064702: OUTPUT«1␤Could not find sub &?ROUTINE␤  in 'foo' at line 22:/tmp/JuQAfo3hqx␤  in main program body at line 22:/tmp/JuQAfo3hqx␤»

[13:58] *** zostay left
[13:58] <masak> ENEEDMOREDEVS

[13:58] *** Ross joined
[13:59] *** Ross left
[13:59] *** Ross joined
[13:59] *** zostay joined
[14:03] <moritz_> blog post udpated... any objections to publishing?

[14:03] <masak> all systems go.

[14:04] <moritz_> all systems gone :-)

[14:04] <jnthn> moritz_: Ooh, nice idea for a task. :-)

[14:04] *** Axius_ left
[14:04] <moritz_> uhm, syntax error :(

[14:07] <moritz_> fix pushed

[14:07] <moritz_> http://perlgeek.de/blog-en/perl-6/contribute-now-improve-error-messages.html

[14:07] *** kjeldahl joined
[14:10] *** araujo left
[14:18] *** jhuni left
[14:19] *** Axius left
[14:20] *** Axius joined
[14:22] <masak> rakudo: grammar G is HLL::Grammar {}; G.parse("foo")

[14:22] <p6eval> rakudo 064702: OUTPUT«No such attribute '$!hides'␤  in 'Grammar::parse' at line 1␤  in main program body at line 22:/tmp/FPMhP5vP89␤»

[14:22] <masak> hardly a feature; is it a bug?

[14:22] <masak> I have no idea what the $!hides attribute refers to.

[14:23] <jnthn> Meta-model inconsistencies I suspect...

[14:23] <jnthn> $!hides is related to the implementation of class Foo hides Base { ... }

[14:24] <masak> right.

[14:24] <jnthn> ClasHOW has it, but P6metaclass lacks it.

[14:24] <masak> ah.

[14:24] <jnthn> Something is making a bad assumption somewhere I guess.

[14:24] <jnthn> It's probably something in the method dispatcher.

[14:24] * masak submits rakudobug

[14:24] <jnthn> Anyway, it goes on the pile of "stuff that hopefully gets sorted out when the new meta-model lands"

[14:25] *** Axius left
[14:25] *** Axius joined
[14:25] <jnthn> (And yes, +1 on ticket to track it...though HLL::Grammar is not standard Perl 6 I guess.)

[14:25] <masak> right.

[14:25] <masak> but it's not supposed to happen.

[14:26] *** arthur-_ joined
[14:28] *** shortcircuit left
[14:29] <moritz_> std: STD

[14:29] <p6eval> std 263c207: OUTPUT«===SORRY!===␤Undeclared name:␤       'STD' used at line 1␤Check failed␤FAILED 00:01 114m␤»

[14:29] <moritz_> so it's not self aware yet :-)

[14:30] *** Axius left
[14:32] *** shortcircuit joined
[14:32] <masak> std: SKYNET

[14:32] <p6eval> std 263c207: OUTPUT«===SORRY!===␤Undeclared name:␤       'SKYNET' used at line 1␤Check failed␤FAILED 00:01 114m␤»

[14:32] * masak wipes brow

[14:37] *** tadzik joined
[14:39] *** whiteknight joined
[14:43] *** dual left
[14:43] <moritz_> rakudo: say (1, 2, 3) >>+<< [100, 200, 300]

[14:43] <p6eval> rakudo 064702: OUTPUT«101202303␤»

[14:51] *** kcwu left
[14:51] *** _twitch joined
[14:53] *** risou joined
[14:55] *** wamba left
[15:03] *** arthur-_ left
[15:05] *** flatwhatson_ left
[15:10] *** kcwu joined
[15:12] *** kuzuha joined
[15:20] *** ggoebel left
[15:26] *** risou left
[15:33] *** ggoebel joined
[15:36] *** colomon left
[15:41] *** dual joined
[15:43] <dalek> roast: e821049 | KodiB++ | S05-grammar/action-stubs.t:

[15:43] <dalek> roast: Added tests for calling &make on lists.

[15:43] <dalek> roast: review: http://github.com/perl6/roast/commit/e82104973bfe2f0704ac149106a84abeba079bb9

[15:43] <dalek> rakudo: d357695 | KodiB++ | src/core/Grammar.pm:

[15:43] <dalek> rakudo: Made &make a list operator.

[15:43] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/d357695b83624648d594bf78518a5c907da965d9

[15:45] *** tadzik left
[15:45] *** nymacro left
[15:46] *** justatheory joined
[15:47] <masak> hm. seems a lot of spiders really want a robots.txt on my site.

[15:47] <masak> any suggestions on what to put in such a file?

[15:47] <Juerd> They don't want it

[15:47] <Juerd> Typically they check for it, but prefer it not to be there.

[15:47] <masak> they've been requesting it 416 times :)

[15:47] <Juerd> Because absence of robots.txt will be interpreted as "I can do anything here"

[15:47] <masak> what if I just create an empty file?

[15:48] <Juerd> An empty file is semantically equivalent to a 404

[15:48] <Juerd> for robots.txt, that is

[15:48] <masak> but with fewer actual 404s.

[15:48] <Juerd> Yes. If your boss wants you to keep the error count low, this helps.

[15:48] <Juerd> Other than that I don't see the point.

[15:48] <masak> it's my blog domain, so I'm my boss.

[15:48] <Juerd> Why do the 404s bother you?

[15:49] <masak> I'd like them to be signal, not noise.

[15:49] <Kodi> I added a favicon to my site only because I got tired of seeing 404s in my Apache error log.

[15:49] <Juerd> What's the obsession with logs?

[15:50] *** ggoebel left
[15:50] <Juerd> I begin to read them when something's wrong

[15:50] *** araujo joined
[15:50] *** araujo left
[15:50] *** araujo joined
[15:50] <masak> I like log statistics. they give a sort of feedback.

[15:51] <Juerd> If I'd use them to *find out* that something is wrong, I would never sleep again.

[15:51] *** ggoebel joined
[15:51] <Kodi> Maybe because they're clogged with 404s for robots.txt. :P

[15:51] <Juerd> 404s will continue to happen anyway. If not for robots.txt, then for bots that try to detect if you have vulnerable web software installed.

[15:51] <masak> whee

[15:52] <masak> I think I'll do something like this: http://thenextweb.com/shareables/2010/07/27/quite-possibly-the-best-robots-txt-file-ever/

[15:52] <masak> :)

[15:52] * Juerd knows someone who reads whole syslogs, minus previously manually whitelisted lines.

[15:55] *** ggoebel left
[15:55] *** lucas_ joined
[15:58] *** tadzik joined
[16:02] *** nymacro joined
[16:07] *** _twitch left
[16:11] <lucas_> hi developers! I have some basic questions...

[16:12] <lucas_> how pugs executes perl 6 code? directly executing the AST tree?

[16:12] *** ggoebel joined
[16:12] *** risou joined
[16:12] <lucas_> is there any other implementations that execute de the AST tree directly, instead of generating bytecode?

[16:13] <lucas_> is is possible to make perl 6 run on top of perl 5 vm? 

[16:13] <lucas_> *Is it possible...

[16:16] <tadzik> I think pugs generates some internal bytecode too, but not sure

[16:17] <masak> Pugs has a number of backends.

[16:17] <masak> but ISTR that it could run directly off its AST.

[16:20] *** isBEKaml joined
[16:21] <lucas_> I will check out, thanks

[16:21] <masak> about making Perl 6 run on top of the Perl 5 VM... I guess it's possible, but I know of no-one working on it.

[16:22] <masak> it's an interesting idea. generating Perl 5 bytecode from Perl 6 source.

[16:23] <isBEKaml> does p5 have a VM? I thought everything was internal to it and never exposed. Even the compiler and the interpreter are enmeshed that it's just convenient to call it interpreter. :)

[16:23] <isBEKaml> yeah, it's an interesting idea, though. 

[16:24] <tadzik> I know of no language that does not have the VM. Maybe bash, as some tend to call this a language

[16:25] <lucas_> well, I was just refering to Perl 6 implementations...

[16:25] <lucas_> but I recall ruby 1.8.6 was executing the AST directly

[16:25] <tadzik> oh

[16:26] <isBEKaml> In my understanding, all languages that claim to be portable does tend to have a backend that can run on their own target platforms. But that doesn't necessarily make it true enough to call them a VM. 

[16:26] <isBEKaml> lucas_: I was exactly thinking of it. Emitting some form of internal representation that p5 can execute. 

[16:27] <isBEKaml> (and I don't know anything more than that - ;)

[16:32] *** isBEKaml left
[16:32] *** isBEKaml joined
[16:35] <isBEKaml> phenny: tell phenny to go round the park. 

[16:35] <phenny> Hey, I'm not as stupid as Monty you know!

[16:36] *** xivix joined
[16:37] *** Axius joined
[16:39] *** tadzik left
[16:41] *** ggoebel left
[16:42] *** ggoebel joined
[16:45] *** ggoebel left
[16:48] *** lucas_ left
[16:54] *** timbunce joined
[16:57] *** chturne left
[17:03] *** Axius left
[17:11] *** zby_home joined
[17:12] <isBEKaml> moritz_: ping

[17:18] <xivix> What's the difference between evaluating with rakudo and std here?

[17:18] <xivix> Is std more complete?

[17:19] <masak> STD is just a parser. Rakudo runs things.

[17:19] <masak> as a parser, STD is slightly more complete.

[17:19] <xivix> Yeah, I should have checked the FRONT PAGE OF THE WEBSITE before asking that.

[17:19] <xivix> But thanks.

[17:19] <masak> happy to help.

[17:20] <xivix> So rakudo doesn't use viv?

[17:21] <jnthn> Rakudo has its own bootstrapped grammar engine.

[17:21] <jnthn> And uses an AST called PAST.

[17:21] <xivix> Oh, by the way, the the link on perl6.org to STD.pm is broken.

[17:21] <jnthn> (so no, doesn't use viv)

[17:21] *** justatheory left
[17:24] <masak> xivix: thanks. STD.pm is now STD.pm6, so that's probably why it's broken.

[17:25] <xivix> Okay. It seems it's also been moved from mu to std as well.

[17:25] <xivix> Unless it's in both.

[17:26] <masak> you're right; the link needs updating in that way as well.

[17:26] <masak> lots of repository-related changes lately :)

[17:26] <xivix> Spring cleaning in the Fall.

[17:26] <masak> just so.

[17:37] <isBEKaml> masak: moritz_++ doesn't seem available and I'm about to fall off anytime soon.- so maybe, you could help me here. Str.flip is now significantly faster now that String reverse is available as a parrot call. I have been working on a benchmark to compare different approaches to Str.chomp. I'll soon publish the results. Can you see if there are any more that I missed?

[17:37] <masak> isBEKaml: sure.

[17:38] <isBEKaml> masak: colomon++ mentioned something along the lines of using substr for chomp very tricky particularly that TimToady apparently ranted against this usage. Still, I'm inclined to go with Str.flip. ;)

[17:38] <isBEKaml> thanks. 

[17:38] *** Kodi left
[17:39] <masak> I think what TimToady might have ranted against was the use of -1 as string indexing (like Rakudo does) rather than *-1 (as with arrays, like real Perl 6 should).

[17:40] *** aindilis left
[17:40] <isBEKaml> masak: yes, that one. 

[17:41] <isBEKaml> masak: http://gist.github.com/619356

[17:41] <isBEKaml> that is somewhat old and the tests are not very accurate due to lesser runs between cycles. 

[17:41] * masak looks

[17:42] <isBEKaml> I ncreased it by a tenth for a better result - not on the gist. 

[17:42] <isBEKaml> jnthn: if you're on windows, can you run this to see what you get? 

[17:43] *** timbunce left
[17:43] <isBEKaml> rakudo: my $str = "hello \r\n"; my $string= $str.flip.substr(0).flip; say $str.bytes ~ $str; say $string.bytes ~ $str;

[17:43] <p6eval> rakudo d35769: OUTPUT«8hello 

[17:43] <isBEKaml> rakudo: my $str = "hello \r\n"; my $string= $str.flip.substr(0).flip; say $str.bytes ~ $str; say $string.bytes ~ $string; 

[17:44] <p6eval> rakudo d35769: OUTPUT«8hello 

[17:45] <jnthn> isBEKaml: I guess I need a latest Rakudo and the Benchmark module?

[17:45] <isBEKaml> jnthn: not teh benchmark module. Rakudo atleast 2 days older would do fine. 

[17:46] <isBEKaml> you can run the p6eval code above. 

[17:46] <isBEKaml> I'm just interested in seeing how windows treats CRLF - a single or two bytes. 

[17:47] <jnthn> > my $str = "hello \r\n"; my $string = $str.flip.substr(0).flip; say $str.bytes

[17:47] <jnthn> ~ $str; say $string.bytes ~ $string;

[17:47] <jnthn> 8hello

[17:47] <jnthn> oh, there's a blank line between the two

[17:47] <isBEKaml> :(

[17:48] *** ggoebel joined
[17:48] <jnthn> My Rakudo is a little old though

[17:48] <jnthn> Let me czech on latest...

[17:48] <isBEKaml> czech czech it... 

[17:49] *** Chillance left
[17:49] <isBEKaml> even then, that's not good. the substr must have been faulty. It doesn't seem to be 1 byte. 

[17:50] <isBEKaml> ($it-CRLF)

[17:50] *** ggoebel left
[17:52] <isBEKaml> Oh, bloody hell.. 

[17:52] <isBEKaml> sorry, replace substr(0) with substr(1). 

[17:52] <isBEKaml> rakudo: my $str = "hello \r\n"; my $string= $str.flip.substr(1).flip; say $str.bytes ~ $str; say $string.bytes ~ $string; 

[17:52] <p6eval> rakudo d35769: OUTPUT«8hello 

[17:52] <isBEKaml> jnthn: ^^

[17:53] <xivix> Did the right guillemot not show up for you guys?

[17:54] <jnthn> > my $str = "hello \r\n"; my $string = $str.flip.substr(1).flip; say $str.bytes

[17:54] <jnthn> ~ $str; say $string.bytes ~ $string;

[17:54] <jnthn> 8hello

[17:54] <jnthn> 7hello

[17:54] <jnthn> isBEKaml: ^^

[17:54] <isBEKaml> that's good. a newline inbetween?

[17:54] <jnthn> Yes

[17:54] <jnthn> xivix: Was missing for me too

[17:54] <isBEKaml> blank line? the byte count reads fine. 

[17:54] <jnthn> isBEKaml: There was a blank line between the 8hello and 7hello

[17:55] <isBEKaml> jnthn: so it isn't 1 byte as I thought. Danke. 

[17:57] <isBEKaml> masak: http://gist.github.com/631068 -- Results. it's just getting more weird. 

[17:58] * masak looks

[17:58] *** zostay left
[17:58] <isBEKaml> masak: I distinctly recall chomp and flip hovering at 10 and 59 earlier with runs reduced by a tenth. 

[17:59] <masak> what does the rightmost column contain?

[17:59] <isBEKaml> masak: the average count of runs. 

[17:59] *** zostay joined
[17:59] <masak> ah. now I see.

[18:00] <isBEKaml> that's just (time taken in secs)/(number of runs)

[18:00] <masak> it's just 1/10000... right.

[18:00] <masak> .chop seems to be faster. I like that one best anyway.

[18:01] <isBEKaml> you ran them too?

[18:01] <masak> no. I'm looking at your results.

[18:02] <isBEKaml> still .chomp with PIR implementations outruns them all. 

[18:10] *** chturne joined
[18:10] <masak> aye.

[18:14] *** justatheory joined
[18:22] *** envi left
[18:24] *** MayDaniel left
[18:27] *** risou left
[18:35] *** nymacro left
[18:35] *** masonkramer left
[18:36] *** masonkramer joined
[18:37] <masak> lol, I blogged: http://strangelyconsistent.org/blog/extending-the-syntax-of-perl6

[18:37] <masak> that concludes this weekend's little haxperiment.

[18:38] <masak> nom &

[18:38] *** masak left
[18:42] *** rainerschuster joined
[18:43] *** ggoebel joined
[18:44] *** muixirt left
[18:45] *** isBEKaml left
[18:49] *** ggoebel left
[18:59] <sorear> good * #perl6

[18:59] *** molaf_ left
[19:12] *** MayDaniel joined
[19:17] *** Schwern left
[19:29] *** wamba joined
[19:40] *** molaf joined
[19:48] *** Mowah left
[19:48] *** icwiener left
[19:48] *** ggoebel joined
[19:48] *** icwiener joined
[19:48] *** timbunce joined
[19:53] *** ggoebel left
[19:58] *** icwiener left
[20:00] *** icwiener joined
[20:00] <dalek> sprixel: a4a483a | diakopter++ | sprixel/ (9 files):

[20:00] <dalek> sprixel: begin compiling class definitions

[20:00] <dalek> sprixel: review: http://github.com/diakopter/sprixel/commit/a4a483a2dd98a84b69ea9d8dd5f2433624fddd71

[20:04] *** zby_home left
[20:08] *** kuzuha left
[20:13] *** rainerschuster left
[20:15] <diakopter> um, oops

[20:16] *** MayDaniel left
[20:16] <diakopter> http://github.com/perl6/std/commit/ca5feb368e445c6f49e42a617e876f2878513f59  needs to be reverted I think

[20:17] <diakopter> (would someone please help me revert it?)

[20:18] <flussence> diakopter: try `git revert ca5feb368e44`?

[20:18] <diakopter> hm, I'm using TortoiseGit

[20:20] * diakopter looks around for the msys shortcut

[20:20] <flussence> just guessing, but it should have a log viewer somewhere with an option to revert somehow

[20:20] <flussence> at least, if it works like qgit...

[20:21] <flussence> (which doesn't actually have a revert option, but then it's only a viewer)

[20:22] <diakopter> I tried it through the tortoisegit gui; it said it failed b/c it was a merge and I was missing a -m option

[20:24] <flussence> I'm looking at the manpage thing for -m and even I'm lost now... :S

[20:24] <diakopter> then I tried the command line once I found it and got  fatal: Cannot find 'ca5feb368e44'

[20:25] <diakopter> hrm

[20:25] <flussence> does that merge show up in your log locally?

[20:25] *** Ross left
[20:26] <flussence> could be on the wrong branch there...

[20:26] <diakopter> oh, sry yes

[20:26] <diakopter> wrong checkout entirely

[20:26] <flussence> gets me all the time :)

[20:27] <diakopter> same error message

[20:27] <diakopter> commit blah is a merge but no -m was given

[20:28] <diakopter> ok I think I see

[20:28] <diakopter> http://www.kernel.org/pub/software/scm/git/docs/howto/revert-a-faulty-merge.txt

[20:30] *** [Sec] left
[20:32] <diakopter> urgh

[20:38] *** colomon joined
[20:44] *** Schwern joined
[20:46] *** pythonian4000afk is now known as pythonian4000

[20:47] *** mavrc left
[20:47] *** kst` joined
[20:49] *** chitragupt left
[20:49] *** hatseflats left
[20:49] *** kst left
[20:50] *** hatseflats joined
[20:50] *** chitragupt joined
[20:50] *** mavrc joined
[20:50] *** Khisanth left
[20:54] <diakopter> someone feel free to fix it for me :/ if it needs fixing.

[21:01] <colomon> diakopter: ?

[21:01] <diakopter> hm, I wonder why dalek didn't report those last two commits to perl6/std

[21:01] <diakopter> colomon: I'm a gitnewb

[21:02] <diakopter> colomon: my local merge (pull?) got pushed needlessly.  I don't get it.

[21:03] <diakopter> http://github.com/perl6/std/commits/master/   I meant to push only 4865b4779a

[21:03] <diakopter> sigh

[21:03] <BinGOs> the so called diamond commit.

[21:04] <BinGOs> I always 'git pull --rebase'

[21:05] *** nsh left
[21:05] *** nsh joined
[21:06] *** Dunearhp left
[21:06] *** meraxes left
[21:06] *** Dunearhp joined
[21:06] *** meraxes joined
[21:10] <diakopter> BinGOs: git pull --rebase  in order to do what?

[21:10] <BinGOs> avoid the 

[21:10] <BinGOs> Merge branch 'master'

[21:10] <BinGOs> commit

[21:11] *** ggoebel joined
[21:11] *** [Coke] joined
[21:11] *** [Coke] left
[21:12] *** Khisanth joined
[21:15] *** kjeldahl left
[21:20] *** synth left
[21:24] *** PacoLinux left
[21:24] *** wamba left
[21:25] *** Trashlord left
[21:29] *** cogno joined
[21:40] *** Schwern left
[21:43] <diakopter> BinGOs: cool, thank you

[21:43] <BinGOs> I have it aliased to 'git purl'

[21:45] *** jaldhar left
[21:45] *** jaldhar joined
[21:50] *** jaldhar left
[21:57] *** jaldhar joined
[22:02] *** _kaare left
[22:05] *** cogno left
[22:06] *** cogno joined
[22:13] *** meppl left
[22:19] *** cogno left
[22:26] *** [Sec] joined
[22:30] *** whiteknight left
[22:41] *** orafu joined
[22:45] *** timbunce left
[22:59] *** icwiener left
[23:02] *** Schwern joined
[23:05] <lue> ohai o/

[23:23] *** ggoebel left
[23:45] *** Khisanth left
[23:49] *** Khisanth joined
[23:52] *** mavrc left
[23:54] *** ggoebel joined
