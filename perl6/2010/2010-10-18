[00:08] *** risou joined
[00:11] *** whiteknight joined
[00:11] *** rgrau_ left
[00:16] *** kst` is now known as kst

[00:32] *** QinGW joined
[00:41] *** ggoebel left
[00:51] *** ggoebel joined
[01:00] *** Khisanth left
[01:02] *** risou left
[01:04] *** molaf_ joined
[01:06] *** xivix left
[01:08] *** molaf left
[01:08] *** xivix joined
[01:10] *** redicaps joined
[01:11] <colomon> \o

[01:24] *** Khisanth joined
[01:27] *** xivix left
[01:31] *** meppl joined
[01:40] *** redicaps left
[01:43] *** ggoebel left
[01:46] *** ggoebel joined
[01:47] *** silug left
[01:50] *** leprevost joined
[01:55] *** thowe joined
[01:56] *** ruoso left
[02:02] *** meppl left
[02:18] *** Khisanth left
[02:25] *** meppl joined
[02:44] *** whiteknight left
[03:20] *** Khisanth joined
[03:27] *** meppel joined
[03:27] *** meppel left
[03:30] *** meppl left
[03:33] *** agentzh joined
[03:40] *** meppl joined
[03:47] *** Khisanth left
[03:51] *** leprevost left
[03:59] *** satyavvd joined
[03:59] *** molaf_ left
[04:23] *** pythonian4000 is now known as pythonian4000afk

[04:46] *** [particle]1 joined
[04:48] *** [particle] left
[04:51] *** kaare joined
[04:52] *** kaare is now known as Guest14588

[05:03] *** sftp_ left
[05:05] *** skids left
[05:06] *** mfollett joined
[05:12] *** [particle]1 left
[05:13] *** [particle] joined
[05:15] *** xinming joined
[05:17] *** xinming_ left
[05:24] *** envi joined
[05:30] *** steez joined
[05:37] *** Guest14588 is now known as kaare_

[05:41] *** justatheory left
[05:42] *** ggoebel left
[05:49] *** xinming_ joined
[05:50] *** xinming left
[05:54] *** ironcame1 is now known as ironcamel

[05:55] *** rvrgs joined
[06:01] *** nymacro joined
[06:07] *** zby_home_ joined
[06:09] *** uniejo joined
[06:16] *** rvrgs left
[06:16] *** rvrgs joined
[06:17] *** rvrgs left
[06:17] *** rvrgs joined
[06:17] *** thowe left
[06:19] *** mfollett left
[06:19] *** takadonet left
[06:28] *** takadonet joined
[06:35] *** masonkramer left
[06:36] *** masonkramer joined
[06:41] *** rvrgs left
[06:45] *** araujo left
[06:51] *** qwebirc33294 joined
[06:54] *** mavrc joined
[07:02] *** bbkr left
[07:07] *** baest joined
[07:21] <mathw> jnthn: Good blog post. Sounds like the multi-dispatch spec needs some more work.

[07:21] *** mavrc left
[07:24] *** Mowah joined
[07:34] *** bbkr joined
[07:36] <jnthn> mathw: Yes, I'd certainly appreciate some answers to some of the issues I wrote about.

[07:37] *** mavrc joined
[07:46] *** baux joined
[07:47] <sorear> interesting

[07:48] <sorear> firefox is rendering the open quotes in jnthn's blog as em quads

[07:48] <sorear> but they copy to the clipboard as U+201C LEFT DOUBLE QUOTATION MARK

[07:49] <mathw> Firefox bug, or font bug...

[07:49] *** am0c joined
[07:49] <sorear> fwiw, multiple dispatch of this sort is very confusing to me too

[07:49] <sorear> which is why I modified v6/STD.pm6 to not use it

[07:50] <mathw> I don't find it so confusing, or at least I didn't

[07:50] <mathw> I wasn't actually aware there was a spec change around it so that confused me

[07:51] <sorear> in other "spec change without asking" news, I find the new spec for Nil much less strangely consistent than the old one

[07:51] *** baux left
[07:52] *** baux joined
[07:53] *** mavrc left
[07:54] *** Khisanth joined
[07:55] *** mavrc joined
[07:55] *** baux left
[07:55] <mathw> Hmm we still have Nil?

[07:55] <mathw> Oh it was undef we got rid of

[08:02] *** baux joined
[08:13] *** rvrgs joined
[08:13] *** rvrgs left
[08:21] *** shabble left
[08:30] *** qwebirc33294 left
[08:30] *** molecules left
[08:50] *** Trashlord joined
[08:54] *** masak joined
[08:54] <masak> good morning, #perl6!

[08:55] *** szabgab left
[08:58] <masak> sorear: re Nil: I hear ya. however, I think that the most recent Nil changes were an improvement.

[08:58] <masak> and I don't think that the one suggestion you have made so far -- to make Nil undefined -- would fly.

[09:00] *** xabbu42 joined
[09:02] <sorear> masak: no

[09:02] <sorear> masak: Nil being undefined is one of the parts of the CURRENT SPEC that I am complaining about

[09:04] *** daxim joined
[09:05] <masak> oh, sorry. I meant '[...] suggestion to make () undefined'

[09:09] <flussence> Are type objects without a value considered undefined?

[09:12] <masak> type objects are undefined, period. at least to a first approximation.

[09:13] <flussence> I can sorta see Nil-as-undef making sense there, as being a type object that can never have a value.

[09:14] <flussence> (assuming it works that way)

[09:14] <sorear> Nil isn't a type object

[09:14] <sorear> it's a super magic parcel that has a CANDO and is not defined, but is a perfectly valid zero-item parcel

[09:14] <sorear> unlike Parcel, whcih is not defined and NOT a valid zero item parcel

[09:15] <sorear> also, () and {}.() used to both return Nil because they were exactly the same

[09:15] <sorear> now, the strange consistency of ( ... ) being a normal statement list is broken!

[09:16] <flussence> this all sounds a lot more complicated than it needs to be

[09:16] <sorear> That's what I said.

[09:18] *** Schwern left
[09:19] <masak> here's one thing that we would like to be true: when we use .+ and .* and .?, the results come back in a Parcel. when the Parcel is empty, it's also undefined. that way, we can use infix:<//> to supply another value on failure.

[09:24] *** cognominal left
[09:25] <masak> here's another thing that we would like to be true: when we do a map or a grep of a for loop, the results come back in a Parcel. when the Parcel is empty, (etc)

[09:25] <sorear> what bothers me *most* is the part where assigning Nil to a variable causes it to assume its declared default value or to become empty and undefined

[09:25] <sorear> while assigning () causes it to remain defined

[09:26] <sorear> so LISTSTORE needs to differentiate between Nil and (), also every % and @ variable needs extra slots to store .defined and default value

[09:26] <sorear> this drives me up the wall as an optimization studier

[09:27] * sorear out

[09:28] <masak> I agree that this whole area is full of corner cases. the waterbed is bulging more than usual.

[09:29] <Tene> jnthn: very good blog post.  I have some vague ideas about answers, but I need more thought.

[09:31] *** QinGW left
[09:32] *** QinGW joined
[09:34] <masak> jnthn: "A candidate list is a list of things that we can work out way through calling." -- I don't understand this sentence. http://6guts.wordpress.com/2010/10/17/wrestling-with-dispatch/

[09:34] <jnthn> typo

[09:34] <jnthn> s/out/our/

[09:35] <masak> ah.

[09:35] <masak> I read it as "work out way instain mother" :)

[09:38] <jnthn> You need to frigth back against the lolinstinct now and then. :P

[09:40] <masak> I am truely sorry. :P

[09:41] <frettled> masak: look, a kitten!

[09:42] <masak> and it's being chased by big angry brown things!

[09:42] <mathw> DO NOT WANT

[09:44] <frettled> Domoku?

[09:44] <frettled> not to be confused with pedobear

[09:44] <frettled> n

[09:45] <masak> "domokun" sounds familiar, yes.

[09:46] <frettled> http://upload.wikimedia.org/wikipedia/en/1/11/God-kills-kitten.jpg

[09:47] <frettled> Actually, it's just "Domo", but with the diminutive -kun added.

[09:48] * masak knew he could count on frettled++ to sort out the details

[09:49] <frettled> \§/

[09:57] *** QinGW left
[09:58] *** QinGW joined
[10:10] *** ggoebel joined
[10:12] *** QinGW left
[10:26] <dalek> evalbot: 66aacfe | moritz++ | / (10 files):

[10:26] <dalek> evalbot: move build scripts to a separate directory

[10:26] <dalek> evalbot: review: http://github.com/perl6/evalbot/commit/66aacfe15a53ba58e29e3a4319521f3e75a75fde

[10:27] *** ggoebel left
[10:29] <Infinoid> diakopter: ping

[10:37] <dalek> evalbot: 671fe6e | moritz++ | build-scripts/rebuild- (3 files):

[10:37] <dalek> evalbot: [build-scripts] be more robust about startup directory

[10:37] <dalek> evalbot: review: http://github.com/perl6/evalbot/commit/671fe6ee7f1199ce968f2827edd8e6f229621a83

[10:37] <dalek> evalbot: dd14296 | moritz++ | build.pl:

[10:37] <dalek> evalbot: add generic build script

[10:37] <dalek> evalbot: review: http://github.com/perl6/evalbot/commit/dd14296d2bfd874865193ab6a2f21c0cfdf1a0cb

[10:37] <dalek> evalbot: 801ef54 | moritz++ | build (2 files):

[10:37] <dalek> evalbot: [build.pl] thinko

[10:37] <dalek> evalbot: review: http://github.com/perl6/evalbot/commit/801ef5475704ed3216ad95dad818b70754ff6a19

[10:37] <dalek> evalbot: 928e895 | moritz++ | build.pl:

[10:37] <dalek> evalbot: mode changes

[10:37] <dalek> evalbot: review: http://github.com/perl6/evalbot/commit/928e895eb04f5935a556ae28106b8fa50debd83c

[10:37] <dalek> evalbot: 85abe2a | moritz++ | build.pl:

[10:37] <dalek> evalbot: [build] fix paths

[10:37] <dalek> evalbot: review: http://github.com/perl6/evalbot/commit/85abe2a0dcdae31bfbd13c2262c91807c50d55a1

[10:37] <dalek> evalbot: bdbef9e | moritz++ | build-scripts/rebuild-rakudo.pl:

[10:37] <dalek> evalbot: missing shebang line

[10:37] <dalek> evalbot: review: http://github.com/perl6/evalbot/commit/bdbef9e37116f75987b8c415a328b6542587b05a

[10:42] <dalek> evalbot: edbd64a | moritz++ | build-scripts/rebuild-rakudo.pl:

[10:42] <dalek> evalbot: don't die in absence of revision file

[10:42] <dalek> evalbot: review: http://github.com/perl6/evalbot/commit/edbd64a3d20740982c359787e6fb522b38df763d

[10:44] <szbalint> moritz_: good morning, I take it? :)

[10:44] <moritz_> good localtime() szbalint :-)

[10:44] <moritz_> vacations here

[10:45] <masak> \o/

[10:47] <moritz_> \o/ indeed

[10:51] <masak> jnthn: "These are the good consequences, and I don’t disagree with they are improvements." s/with/that/

[10:51] <masak> jnthn: post is very good so far.

[10:51] <jnthn> :P

[10:51] <jnthn> Apart from the typos...and grammaros...

[10:52] <jnthn> It'd be so much easier if I could blog without having to use words.

[10:52] <jnthn> Oh, wait...

[10:52] <masak> an entire blog post consisting only of smilies and lolcats.

[10:52] <jnthn> It's call icanhascheezburger.com :P

[10:53] <jnthn> ...called!

[10:53] <masak> :)

[10:53] <dalek> evalbot: eacb7e6 | moritz++ | run.sh:

[10:53] <dalek> evalbot: add run script

[10:53] <dalek> evalbot: review: http://github.com/perl6/evalbot/commit/eacb7e66193987f66e76b3de98aa4328054e99f7

[10:54] <jnthn> I had this hope that writing the post would make the problem a bunch more clear to me.

[10:54] <moritz_> did it?

[10:55] <jnthn> I don't feel like it helped find a solution, but having to articulate the issues helped me understand them a bit better.

[10:55] <masak> I feel the same reading it.

[10:55] <masak> jnthn++

[10:55] <jnthn> I figured it was better to spend the time writing a coherentish post on them than trying to discuss it from scratch on IRC though.

[10:55] * moritz_ found it quite impressive

[10:55] <jnthn> The issues are, I fear, quite deep.

[10:55] *** whiteknight joined
[10:56] <jnthn> Either that or I'm missing something obvious.

[10:56] *** timbunce joined
[10:56] <masak> I'm now convinced that things need to change, one way or another. also modulo me missing something obvious.

[10:57] <jnthn> I'd kinda prefer it to be that I'm missing something, but I fear that we actually do just have some design issues to work through.

[10:57] <masak> it'll be really nice to get to those, though.

[10:57] <jnthn> Yes, and I think we really need to.

[10:58] <masak> lunch &

[10:58] <jnthn> I also wonder how far the exception dispatcher thing goes.

[10:58] *** steez left
[10:58] <jnthn> Can you nextsame to the next exception handler for example.

[10:59] <jnthn> Not in current spec, but maybe there's an interesting unification to consider here.

[11:11] *** steez joined
[11:15] *** ggoebel joined
[11:16] <moritz_> http://moritz.faui2k3.org/tmp/visitors.svg # non-search engine referral breakdown for perlgeek.de

[11:16] <moritz_> generated with Perl 6, of course

[11:16] <colomon> of course

[11:16] *** ggoebel left
[11:16] <moritz_> :-)

[11:18] *** Mowah left
[11:23] *** p6eval left
[11:23] *** p6eval joined
[11:23] *** ChanServ sets mode: +v p6eval

[11:24] <moritz_> perl6: say 'now on new host, diakopter++'

[11:24] <p6eval> pugs, rakudo d35769: OUTPUT«now on new host, diakopter++␤»

[11:24] <dalek> evalbot: 2710cd8 | moritz++ | lib/EvalbotExecuter.pm:

[11:24] <dalek> evalbot: fix a path

[11:24] <dalek> evalbot: review: http://github.com/perl6/evalbot/commit/2710cd8a84ce8d30e3a7aac0cd66c7c6ecae4fef

[11:26] <colomon> jnthn: What's the status of R* MSI on Windows?

[11:28] <colomon> (it looks like I've got R* from July on my Windows box, wondering if there is a more recent release available.)

[11:29] <moritz_> ftp://x3n.info/pub/apps/win32/x86/rakudo-star/

[11:30] <colomon> moritz_++

[11:32] <colomon> sweet!

[11:34] <jnthn> Aye, somebody++ != me did a more up to date one.

[11:34] <colomon> I'm slowly getting ready to swap a new harddrive into my MBP, and making sure I can do my current $work project on my Windows box is an important paranoid step.  :)

[11:36] <colomon> hmmm, guess I need ufo, too.  :)

[11:36] <colomon> errr, does ufo work on Windows yet?

[11:41] * moritz_ would be surprised

[11:42] *** Mowah joined
[11:43] *** ggoebel joined
[11:43] <colomon> well, it generated a very nice makefile

[11:43] <colomon> which doesn't work

[11:44] *** icwiener joined
[11:45] <jnthn> If it's anything like the ones pls makes, it'll be a pile of fail on Windows.

[11:45] *** ggoebel left
[11:46] <colomon> suppose I can probably get things working on my Linux box.... :\

[11:53] * colomon rebuilding Rakudo there...

[11:53] *** satyavvd left
[11:59] *** Italian_Plumber joined
[12:03] <colomon> oh, neutro++

[12:03] <masak> tadzik++

[12:05] *** Kodi joined
[12:06] <Kodi> rakudo: sub f (:$a) { say "hai" }; f "a" => 1; # Known?

[12:06] <p6eval> rakudo d35769: OUTPUT«Too many positional parameters passed; got 1 but expected 0␤  in 'f' at line 1:/tmp/L0Ace0iz4a␤  in main program body at line 22:/tmp/L0Ace0iz4a␤»

[12:07] <colomon> rakudo: sub f (:$a) { say "hai" }; f("a" => 1); # Known?

[12:07] <p6eval> rakudo d35769: OUTPUT«Too many positional parameters passed; got 1 but expected 0␤  in 'f' at line 1:/tmp/EdMrIcaFcT␤  in main program body at line 22:/tmp/EdMrIcaFcT␤»

[12:07] <Kodi> rakudo: sub f (*%h) { say "hai" }; f now => 1; # Trickier.

[12:07] <p6eval> rakudo d35769: OUTPUT«Too many positional parameters passed; got 1 but expected 0␤  in 'f' at line 1:/tmp/xSZ3HiYL6B␤  in main program body at line 22:/tmp/xSZ3HiYL6B␤»

[12:08] <jnthn> colomon: Correct

[12:08] <jnthn> colomon: I'ts only a named arg if the LHS is unquoted iirc.

[12:08] <colomon> !

[12:09] <Kodi> rakudo: sub f (:$a) { say "hai" }; f(|("a" => 1));

[12:09] <p6eval> rakudo d35769: OUTPUT«Too many positional parameters passed; got 1 but expected 0␤  in 'f' at line 1:/tmp/VOEZjn4aET␤  in main program body at line 22:/tmp/VOEZjn4aET␤»

[12:09] <Kodi> Should that work?

[12:09] <colomon> rakudo: sub f (:$a) { say "hai" }; f(a => 1); # Known?

[12:09] <jnthn> rakudo: sub f (:$a) { say "hai" }; f(|{"a" => 1});

[12:09] <p6eval> rakudo d35769: OUTPUT«hai␤»

[12:09] <jnthn> Needs to be a hash I guess

[12:09] <moritz_> aye

[12:09] <jnthn> Maybe pair after | could be made to work

[12:09] <moritz_> a list will interpolate as positional pairs

[12:10] *** nymacro left
[12:11] *** Woody4286 is now known as Woody2143

[12:18] *** lamstyle left
[12:19] *** nymacro joined
[12:20] *** lamstyle joined
[12:20] *** MayDaniel joined
[12:27] *** Grimnir_ left
[12:27] *** [particle]1 joined
[12:28] *** [particle] left
[12:29] *** cognominal joined
[12:29] *** ggoebel joined
[12:37] *** MayDaniel left
[12:39] *** Italian_Plumber left
[12:42] <masak> jnthn: if you got to decide, how would the multi/proto model look? as it did before the last big spec change?

[12:42] *** shabble joined
[12:42] *** shabble left
[12:42] *** shabble joined
[12:45] *** Italian_Plumber joined
[12:48] <jnthn> masak: As mentioned, there were genuine problems with that model too.

[12:49] <jnthn> So I'm not sure going back to it is really progress.

[12:51] <jnthn> The real user-visible problem with the current design is the need to write a proto.

[12:51] <jnthn> The more minor one is we need to sort out or dispatcher vs code object story.

[12:51] <jnthn> The other issues are much more about implementability.

[12:52] <masak> I think I could stand writing a proto in a lexical scope, but I'd hate it in a class.

[12:52] <masak> implementability is important for the user too. at least for the power user, who relies on a sound mental model of what's happening under the hood.

[12:53] <jnthn> Yes, true.

[12:53] *** am0c left
[12:53] *** bluescreen joined
[12:53] <jnthn> As somebody who has given a lot of Perl 6 talks, I do get nervous when I feel we're heading for an implementation that's too comlex to explain.

[12:54] <masak> TheDamian once said about multi dispatch that it needs to be really really simple. much thanks to that sentiment, we ended up with the current rules for tightness.

[12:54] <masak> (for a while we had manhattan distances and stuff)

[12:54] <jnthn> Well, this is actually sort of orthogonla.

[12:55] <jnthn> The problem isn't about the candidate sorting here.

[12:55] <jnthn> But yes, simple++.

[13:00] <masak> I know it's a completely different problem.

[13:00] <masak> but I'm taking candidate sorting as an example because I consider that to be an area where we Got It Right(tm).

[13:00] <jnthn> *nod*

[13:01] <masak> right now it seems to be that we're in a bad situation: (1) old model was bad in some ways, (2) new model better in some ways, worse in some, and appears unimplementable, (3) no sane model in sight.

[13:02] <jnthn> I'm still trying to understand where the problem really is, tbh.

[13:02] <jnthn> I think part of it is that we've tried too hard to conflate dispatchers and code objects.

[13:04] *** kaare_ left
[13:04] * moritz_ eats a slize of self-made hazelnut cake with a topping of white chocolate and nougat

[13:05] <jnthn> Sharing the description without sharing the cake is cruel. :P

[13:05] <jnthn> That sounds SO nice!

[13:06] <moritz_> and it is.. just visit me if you want a slice :-)

[13:07] <moritz_> just a random thought... would it help to make the dispatcher-curried-with-candidate-list more explicit?

[13:08] <moritz_> currently the spec tries to hide it under the hood, which might not work out too well

[13:10] <jnthn> moritz_: That's somewhat what I'm thinking may help.

[13:10] <jnthn> moritz_: It still doesn't answer everything though.

[13:10] <jnthn> Particularly the "how do we associate the {*} in the proto with the correct candidate list"

[13:10] *** rgrau_ joined
[13:10] <jnthn> Which is the really big headache here.

[13:11] <moritz_> another thought (mostly unrelated): maybe &foo.wrap having an in-place, mutating effect is the real problem?

[13:11] <jnthn> Not quite

[13:11] *** Schwern joined
[13:11] <jnthn> What is the real problem is that we expect &foo to refer to the proto

[13:11] *** tom_tsuruhara joined
[13:11] <jnthn> But also to imply something about the candidate list

[13:11] <jnthn> Which differs in different scopes

[13:13] <jnthn> And you can't just say something like "oh, it's the calling scope"

[13:13] <jnthn> Because referencing &foo in a given scope needs to capture that scope's idea of the candidate list

[13:13] <jnthn> Wherever we end up doing the invocation from.

[13:14] <jnthn> BTW, pondering submitting a Perl 6 talk to http://www.scandevconf.se/2011/call-for-papers/

[13:15] <jnthn> masak: It's in Sweden, dunno if you're interested in submitting to ^ too.

[13:16] <masak> will check it out. thanks.

[13:16] <jnthn> (Was thinking for the Emerging Technologies track)

[13:18] <masak> ooh, it's in Göteborg.

[13:19] *** Patterner left
[13:19] <jnthn> aye

[13:19] <jnthn> De talar funny. ;-)

[13:20] <masak> my favourite Swedish dialect. :)

[13:25] *** [particle]1 is now known as [particle]

[13:26] <jnthn> Huh? I thought Skanska was everyone's favourite. :P

[13:28] <daxim> ♪ vinna kinky roligt ♪

[13:28] <masak> whoa :)

[13:30] *** uniejo left
[13:30] <jnthn> ...win kinky really?

[13:31] <daxim> the hat is yours, jnthn

[13:31] <jnthn> .oO( Sounds like it's a wizard hat...now, where's my coat... )

[13:31] <masak> jnthn: http://www.youtube.com/watch?v=MT9ZNJ2YS64

[13:31] *** Psyche^ joined
[13:31] *** Psyche^ is now known as Patterner

[13:33] <slavik1> jnthn: robe

[13:33] <slavik1> not coat

[13:35] <masak> slavik1: damn I gotta write down your names or something

[13:35] <slavik1> ?

[13:35] <slavik1> it should be slavik ... but auto auth doesn't work sometimes

[13:35] <masak> thought you'd catch the reference. slightly obscure in-joke, perhaps.

[13:36] <slavik1> I didn't catch it all :(

[13:36] <jnthn> Oh noes, epic lolknowledge fails.

[13:36] <masak> there are three canonical bloodninja dialogues.

[13:36] <masak> the above quote is from the third and shortest one.

[13:37] *** ruoso joined
[13:37] * jnthn remembers it now :-)

[13:37] <slavik1> oh yeah

[13:37] <slavik1> HA!

[13:37] * slavik1 read it again

[13:38] <masak> :)

[13:38] <daxim> I collected internet memes before they went mainstream

[13:38] <daxim> my next birthday party will be meme-themed

[13:38] *** Schwern left
[13:39] <jnthn> I can already guess what the food is going to be. :-)

[13:40] *** _kaare joined
[13:41] *** skids joined
[13:43] *** mavrc left
[13:44] *** mavrc joined
[13:45] <dalek> book: 3e7c09b | moritz++ | src/multi-dispatch.pod:

[13:45] <dalek> book: [multi] remove a now obsolete comment

[13:45] <dalek> book: review: http://github.com/perl6/book/commit/3e7c09bb9779ed08c877128d2a6a8e25bfbae1a8

[13:46] *** standz left
[13:47] *** agentzh left
[13:47] *** standz joined
[13:51] *** PacoLinux joined
[13:51] *** plainhao joined
[13:54] *** sECuRE left
[13:56] <dalek> book: a0e9bcb | moritz++ | src/multi-dispatch.pod:

[13:56] <dalek> book: [multi] re-work introductory section based on feedback from jkeenan++ in http://github.com/perl6/book/issues/#issue/26

[13:56] <dalek> book: review: http://github.com/perl6/book/commit/a0e9bcbf2b853284bfd08dd551b6f0cf2e34d7e0

[13:56] <jnthn> moritz_: I did a commit to subs-n-sigs.pod not so long back that may have helped with some of jkeenan++'s issues.

[13:56] <jnthn> Feel free to see if you think the patch closes any.

[13:59] *** Kodi left
[14:00] <BooK> I need to ignore dalek

[14:01] <moritz_> feel free :-)

[14:11] <slavik1> dalek is not to be ignored!

[14:17] <masak> BooK: your complaint is essentially that we commit too much around here? :)

[14:19] *** MayDaniel joined
[14:20] *** bbkr left
[14:20] *** Schwern joined
[14:20] *** bbkr joined
[14:22] <BooK> masak: if I had a complaint, it would be about you guys having a project named after me ;-)

[14:24] *** _twitch joined
[14:24] <masak> BooK: that was my idea; sorry :/

[14:25] *** pothos joined
[14:27] *** whiteknight left
[14:29] *** _twitch left
[14:29] <moritz_> rakudo: say 'book' eq 'Book'

[14:29] <p6eval> rakudo d35769: OUTPUT«Bool::False␤»

[14:29] * moritz_ doesn't know what BooK means

[14:30] <masak> rakudo: say 'book' eq 'Book' eq 'BooK'

[14:30] <p6eval> rakudo d35769: OUTPUT«Bool::False␤»

[14:30] *** timbunce left
[14:36] *** perlygatekeeper joined
[14:39] <moritz_> rakudo: say (a => 3).key.WHAT

[14:39] <p6eval> rakudo d35769: OUTPUT«Str()␤»

[14:39] <moritz_> rakudo: say (a => 3).key.PARROT

[14:39] <p6eval> rakudo d35769: OUTPUT«String␤»

[14:39] <moritz_> this is not good[tm]

[14:40] <moritz_> rakudo: say (a => 3).key.trans(['a'] => ['b'])

[14:40] <p6eval> rakudo d35769: OUTPUT«too few positional arguments: 2 passed, 3 (or more) expected␤  in main program body at line 22:/tmp/dyqTwRjc8F␤»

[14:40] *** silug joined
[14:41] <masak> we have that problems in more places than that.

[14:41] <moritz_> that's one that kills the to-json multi in the book :(

[14:41] <masak> :(

[14:42] *** steez left
[14:43] *** _twitch joined
[14:47] *** bitofbuntu joined
[14:50] *** justatheory joined
[14:52] *** bbkr left
[14:58] *** cls_bsd left
[14:58] *** Grimnir_ joined
[15:00] *** timbunce joined
[15:07] *** MayDaniel left
[15:08] <colomon> rakudo: class A { method aaa() { say "aaa"; }; }; $b.aaa;

[15:08] <p6eval> rakudo d35769: OUTPUT«===SORRY!===␤too few positional arguments: 2 passed, 3 (or more) expected␤»

[15:08] <colomon> LTA

[15:08] <masak> colomon: my $b

[15:08] <masak> known bug.

[15:09] <masak> http://rt.perl.org/rt3/Ticket/Display.html?id=78252

[15:09] <colomon> I see your response was much the same as mine.  ;)

[15:10] *** bitofbuntu left
[15:11] <colomon> is anyone working on it?

[15:12] <masak> not aware of anyone working on any RT ticket at the moment.

[15:12] *** bitofbuntu joined
[15:12] <colomon> masak++ for knowing what is up

[15:12] <masak> "I'm not aware" is not the same as "knowing what is up" :P

[15:12] <colomon> wish this wasn't a distraction from $work at the moment.

[15:13] <masak> I feel like that most every day.

[15:16] *** timbunce_ joined
[15:16] <colomon> "knowing what is up" means finding the RT ticket in seconds, BTW.

[15:17] <masak> ah :) that's more a special sort of benign brain damage, if you ask me :P

[15:18] <szbalint> masak has a neural interface to any issue trackers related to P6, or so it seems... :)

[15:18] *** timbunce left
[15:18] *** timbunce_ is now known as timbunce

[15:19] *** mavrc left
[15:19] <masak> it's quite convenient. except for the nightmares. *shudder*

[15:20] *** mavrc joined
[15:22] *** mblackmer joined
[15:23] *** mblackmer left
[15:26] *** araujo joined
[15:27] *** spq1 joined
[15:27] <masak> rakudo: sub f { print "OH HAI" }; &f.wrap: { print "-> "; callsame; print " <-" } for ^3; f

[15:27] <p6eval> rakudo d35769: OUTPUT«-> -> -> OH HAI <- <- <-»

[15:27] <masak> \o/

[15:28] <colomon> wacky

[15:28] <colomon> (in a good way)

[15:29] <masak> rakudo: sub f { "OH HAI" }; &f.wrap: { "-> {callsame} <-" } for ^3; say f # even shorter

[15:29] <p6eval> rakudo d35769: OUTPUT«-> -> -> OH HAI <- <- <-␤»

[15:29] <slavik1> callsame is a keyword?

[15:29] <slavik1> or what is it's meaning?

[15:29] <masak> it's a subroutine.

[15:30] <slavik1> of what object?

[15:30] <colomon> rakudo: sub f { "OH HAI" }; &f.wrap: { "-> {callsame} ||| {callsame} <-" } for ^3; say f

[15:30] <p6eval> rakudo d35769: OUTPUT«-> -> -> OH HAI ||| OH HAI <- ||| -> OH HAI ||| OH HAI <- <- ||| -> -> OH HAI ||| OH HAI <- ||| -> OH HAI ||| OH HAI <- <- <-␤»

[15:30] <slavik1> how does it translate to the string "OH HAI"

[15:30] <masak> slavik1: it's a subroutine, hence not of any object.

[15:30] <slavik1> ahh

[15:30] <slavik1> right

[15:30] <slavik1> a special/global subroutine?

[15:30] <masak> slavik1: "callsame" in the context of wrapping means "call the thing being wrapped".

[15:31] <masak> yes, it's global and a bit special.

[15:31] <slavik1> gotcha

[15:31] <masak> it talks to the dispatcher.

[15:31] <slavik1> perl6 is not so simple :(

[15:31] <slavik1> unless I am trying to understand it more than I understand perl5

[15:31] <masak> you probably are :)

[15:32] <masak> Perl 6 has a simple centre, with paths leading away to more specialized areas, which are consequently more... involved.

[15:36] *** timbunce_ joined
[15:38] *** timbunce left
[15:38] *** timbunce_ is now known as timbunce

[15:39] * moritz_ just commented on RT #78252

[15:40] <colomon> moritz_++

[15:43] *** sftp joined
[15:43] <Juerd> Hm, I would have expected something like inner instead of callsame.

[15:46] *** timbunce_ joined
[15:46] <masak> Juerd: multi dispatch and wrapping are unified in Perl 6, so both use [call|next][with|same].

[15:47] *** timbunce_ left
[15:49] *** timbunce left
[15:49] *** bitofbuntu left
[15:49] *** Schwern left
[15:50] *** Schwern joined
[15:52] <Juerd> masak: Ah, that makes it a little clearer: "same" should be read as "same arguments"?

[15:52] <masak> it should indeed.

[15:53] <Juerd> I was reading it as "same subroutine"

[15:54] <Juerd> Which to me, would be the wrapper itself, and thus infinite recursion :)

[15:54] *** risou joined
[15:56] <masak> reading A12, 'nextsame' used to be spelled 'next METHOD'.

[16:00] *** Ross joined
[16:00] *** Ross left
[16:00] *** Ross joined
[16:01] *** rvrgs joined
[16:07] <masak> rakudo: sub rot13 { $^input.trans([$_] => [.rotate(13)]) given "A".."Z" }; say "BU UNV".&rot13

[16:07] <p6eval> rakudo d35769: OUTPUT«OH HAI␤»

[16:09] *** MayDaniel joined
[16:21] * jnthn back from $dayjob

[16:21] <jnthn> masak: (next METHOD) interesting, I guess then it was just for method dispatch, not generalized...

[16:21] <masak> not sure where wrappers fit into that scheme. or if they did.

[16:22] *** cdarroch joined
[16:22] *** cdarroch left
[16:22] *** cdarroch joined
[16:22] *** kcwu left
[16:22] *** isBEKaml joined
[16:23] <jnthn> masak: Don't know they did. Certainly I only became aware that they should share a mechanism recently-ish.

[16:23] <jnthn> masak: I think it was at Go Open in Oslo, I'd been asking about this, and the answer was in TimToady's keynote. :-)

[16:23] <masak> :)

[16:24] <masak> swim &

[16:24] *** masak left
[16:24] *** meppl left
[16:27] *** Ross left
[16:27] *** Ross joined
[16:27] *** Ross left
[16:27] *** Ross joined
[16:32] <isBEKaml> rakudo: sub foo { "HAI!" }; &f.wrap: { " # -> {nextsame} +++ {nextsame} <-- #" } for ^3; f.say;

[16:32] <p6eval> rakudo d35769: OUTPUT«Could not find sub &f␤  in <anon> at line 22:/tmp/ucQ5dWZOLP␤  in main program body at line 1␤»

[16:33] <isBEKaml> rakudo: sub foo { "HAI!" }; &f.wrap: { " :: -> {nextsame} +++ {nextsame} <- ::" } for ^3; f.say;

[16:33] <p6eval> rakudo d35769: OUTPUT«Could not find sub &f␤  in <anon> at line 22:/tmp/_s4jClr2jK␤  in main program body at line 1␤»

[16:33] <isBEKaml> rakudo: sub foo { "HAI!" }; &foo.wrap: { " :: -> {nextsame} +++ {nextsame} <- ::" } for ^3; foo.say; # OH, right! :/

[16:33] <p6eval> rakudo d35769:  ( no output )

[16:34] <isBEKaml> taking upon colomon++/masak++'s work - callsame isn't same as nextsame?

[16:34] <isBEKaml> I thought they were 

[16:35] <jnthn> They both pass on the original arguemnt set

[16:35] <jnthn> But callsame returns

[16:35] <jnthn> And nextsame doesn't

[16:35] <isBEKaml> I guess that's why nextsame is used within wrappers in roles... 

[16:36] <isBEKaml> rakudo: sub foo { "HAI!" }; &foo.wrap: { " :: -> {callsame} +++ {callsame} <- ::" } for ^3; foo.say;

[16:36] <p6eval> rakudo d35769: OUTPUT« :: ->  :: ->  :: -> HAI! +++ HAI! <- :: +++  :: -> HAI! +++ HAI! <- :: <- :: +++  :: ->  :: -> HAI! +++ HAI! <- :: +++  :: -> HAI! +++ HAI! <- :: <- :: <- ::␤»

[16:37] <isBEKaml> nice. jnthn, can you tell me what .wrap does here? It takes any block and constructs something out of it?

[16:37] <isBEKaml> not necessarily a sub, right?

[16:38] *** baux left
[16:39] <jnthn> isBEKaml: It replaces the thing that the sub executes when called with what you pass with a dispatcher, which then works through a candidate list made up of the wrappers, in the order they were added, down to the original sub. 

[16:39] <jnthn> isBEKaml: callsame is just saying "I want to call the next thing down the list"

[16:41] <isBEKaml> jnthn: ah, ha! So you can go on adding more wrappers and then .wrap would successively peel them away down to the original sub implementation.... /time_to_test_that/ :)

[16:42] <isBEKaml> rakudo: sub foo { "HAI" }; &foo.wrap { "Hej" } for ^3 ; foo.say;

[16:42] <p6eval> rakudo d35769: OUTPUT«===SORRY!===␤Confused at line 22, near "&foo.wrap "␤»

[16:42] <isBEKaml> rakudo: sub foo { "HAI" }; &foo.wrap: { "Hej" } for ^3 ; foo.say;

[16:42] <p6eval> rakudo d35769: OUTPUT«Hej␤»

[16:43] <isBEKaml> uhh, that's replaced entirely. 

[16:43] <isBEKaml> rakudo: sub foo { "HAI" }; &foo.wrap: { "Hej"; &foo.wrap: { "Ahoj" }; } for ^3 ; foo.say; #nesting, anyone?

[16:43] <p6eval> rakudo d35769: OUTPUT«5␤»

[16:43] <isBEKaml> heh

[16:44] <jnthn> isBEKaml: Something like that, yes

[16:44] <jnthn> No, it didn't replace it entirely. You just chose not to defer to the next thing in the list.

[16:44] <jnthn> YOu have to do it explicitly.

[16:45] <isBEKaml> rakudo: sub foo { "HAI" }; &foo.wrap: { "Hej";{ &foo.wrap: { "Ahoj" }; }; } for ^3 ; foo.say; 

[16:45] <p6eval> rakudo d35769: OUTPUT«5␤»

[16:45] <isBEKaml> rakudo: sub foo { "HAI" }; &foo.wrap: { "Hej"; callsame; { &foo.wrap: { "Ahoj"; callsame; };}; } for ^3 ; foo.say; 

[16:45] <p6eval> rakudo d35769: OUTPUT«7␤»

[16:46] <isBEKaml> rakudo: sub foo { "HAI" }; &foo.wrap: { "Hej"; callsame; }; &foo.wrap: { "Ahoj"; callsame; }; foo.say;

[16:46] <p6eval> rakudo d35769: OUTPUT«HAI␤»

[16:47] <isBEKaml> jnthn: the numbers don't make sense. :(

[16:48] <skids> Should be last statement evaluated, so if you wanted to concat or say you'd have to say so.

[16:48] <jnthn> isBEKaml: It's working as expected - what skids said.

[16:48] <isBEKaml> no, I meant the numbers - 5 and 7 above. 

[16:48] <colomon> rakudo: sub foo { "HAI" }; say &foo.wrap: { ">" ~ callsame ~ "<" }; say foo

[16:48] <p6eval> rakudo d35769: OUTPUT«2␤>HAI␤»

[16:48] <skids> return value of wrap.

[16:48] <jnthn> Oh

[16:49] <jnthn> Yeah, wrap just returns integer wrap handles at the moment

[16:49] <jnthn> There's an RT whining about that.

[16:49] <colomon> rakudo: sub foo { "HAI" }; say &foo.wrap: { ">" ~ callsame() ~ "<" }; say foo

[16:49] <p6eval> rakudo d35769: OUTPUT«2␤>HAI<␤»

[16:49] <colomon> interesting.

[16:49] <isBEKaml> Oh, I see...

[16:50] <jnthn> Quite what a wrap handle would stringify to though, who knows. :-)

[16:51] <isBEKaml> rakudo: sub foo { "HAI" }; say &foo.wrap: { "Hej";{ say &foo.wrap: { "Ahoj" }; }; } for ^3 ; foo.say; 

[16:51] <p6eval> rakudo d35769: OUTPUT«2␤3␤4␤5␤Bool::True␤»

[16:51] <isBEKaml> interesting.... 

[16:52] *** sECuRE joined
[16:53] <isBEKaml> rakudo: sub foo { "HAI" }; &foo.wrap: { "Hej{" ~ callsame ~ "}";{ &foo.wrap: { "Ahoj::" ~ callsame ~ "::" }; }; } for ^3 ; foo.say; 

[16:53] <p6eval> rakudo d35769: OUTPUT«5␤»

[16:54] <isBEKaml> rakudo: sub foo { "HAI" }; &foo.wrap: { "Hej{" ~ callsame ~ "}";{ &foo.wrap: { "Ahoj::" ~ callsame ~ "::" }; }; }; foo.say; 

[16:54] <p6eval> rakudo d35769: OUTPUT«3␤»

[16:56] <isBEKaml> rakudo: sub foo { "HAI" };  sub b { &foo.wrap: { "Hej{" ~ callsame ~ "}"; }; }; &b.wrap: { "Ahoj::" ~ callsame ~ "::" }; b.say;

[16:56] <p6eval> rakudo d35769: OUTPUT«Ahoj::2␤»

[16:57] <jnthn> Guess I should figger out some noms. bbl.

[16:58] <isBEKaml> Guess I should just go figgering the wraps of wraps... 

[17:05] *** rvrgs left
[17:06] *** Schwern left
[17:06] *** mberends joined
[17:09] *** mfollett joined
[17:29] <jnthn> o/ mberends 

[17:29] *** envi left
[17:29] *** Schwern joined
[17:30] <mberends> oh hai jnthn! I'm about to commit a slightly less broken 6model/java update

[17:30] <jnthn> Ooh! :-)

[17:31] <mberends> the now-fixed problem was that LexPad was a struct, not a class, and Java has no structs :(

[17:32] <jnthn> ouchyouchouch

[17:32] <jnthn> It's a struct to save an allocation per context.

[17:32] <mberends> the dotnet Context contained a LexPad that was never created, it just "was".

[17:32] <jnthn> But anyway, make it work first. :-)

[17:32] <jnthn> Right.

[17:32] <jnthn> 'cus structs need not be.

[17:33] <jnthn> You may wnat to hand-inline it at some point though.

[17:33] <jnthn> If that isn't the fix you've already done.

[17:35] <mberends> I just jammed in a "new" at the appropriate spot ;)

[17:36] *** mfollett left
[17:37] <diakopter> rakudo: 'faster now?'.say

[17:37] <p6eval> rakudo d35769: OUTPUT«faster now?␤»

[17:38] <jnthn> mberends: Well, that's the easy fix. :-)

[17:39] *** _twitch left
[17:40] *** Entonian joined
[17:42] *** pyrimidine joined
[17:42] *** _twitch joined
[17:50] *** whiteknight joined
[17:54] *** Mowah left
[17:57] *** kcwu joined
[17:58] <PerlJam> Anyone got any good names for this month's Rakudo release?

[17:58] *** mfollett joined
[17:59] <colomon> woah, is it that time of the month again?

[17:59] <PerlJam> yep

[17:59] <diakopter> aunt flo

[17:59] <diakopter> scnr

[18:00] <PerlJam> There's only one suggestion in the release guide: BristolBath.pm

[18:00] <dalek> 6model: c025d33 | mberends++ | / (8 files):

[18:00] <dalek> 6model: [java:bugfix] make a Lexpad object to resemble the struct Lexpad in dotnet

[18:00] <dalek> 6model: review: http://github.com/jnthn/6model/commit/c025d33d2163c477710e29900c59835197d9a058

[18:01] <PerlJam> oh, I'm suppoed to invite people to update the ROADMAP/ChangeLog/etc.  so ... have at it!  :)

[18:02] *** MayDaniel left
[18:03] *** orafu left
[18:04] *** orafu joined
[18:11] *** daxim left
[18:12] <mberends> PerlJam: the Paris osdc.fr conference last weekend was very Perl6-friendly :)

[18:13] <mberends> er, weekend before last

[18:15] <jnthn> Ooh, yes. That could work as a name.

[18:16] <PerlJam> "Paris"?  or "osdc.fr"?

[18:17] <PerlJam> I guess in keeping with the monger tradition it would have to be "Paris"

[18:17] <jnthn> Aye

[18:18] <PerlJam> so be it.

[18:32] *** am0c joined
[18:32] *** ggoebel left
[18:35] *** eternaleye left
[18:35] *** masonkramer left
[18:36] *** eternaleye joined
[18:36] *** masonkramer joined
[18:39] *** MayDaniel joined
[18:51] *** masak joined
[18:51] <masak> ahojte!

[18:52] <takadonet> masak: hey

[18:52] <mberends> ahoy masak!

[18:52] <masak> takadonet, mberends: hejsan :)

[18:53] *** nymacro left
[18:57] *** _twitch left
[18:57] <mberends> masak: the first Lego Mindstorms project just reached the walking and talking stage :)

[18:57] <masak> clearly there's some potential in wrapping subs and producing fractals, as evidenced by isBEKaml's experiments in the log :)

[18:57] <masak> mberends: wow, cool!

[18:59] *** _twitch joined
[18:59] <masak> mberends: so the gift was appreciated by both father and son, I take it? :)

[18:59] *** risou left
[18:59] <mberends> masak: exactly :)

[19:00] <masak> that's the best form of gift, if you ask me. :)

[19:02] *** timbunce joined
[19:07] *** mavrc left
[19:07] *** kjeldahl joined
[19:10] *** MayDaniel left
[19:11] *** mavrc joined
[19:12] *** rvrgs joined
[19:12] *** _twitch left
[19:13] *** wamba joined
[19:20] *** Schwern left
[19:21] *** ggoebel joined
[19:22] *** wamba left
[19:24] *** ggoebel left
[19:29] *** plainhao left
[19:30] <moritz_> oh hai

[19:30] <moritz_> "All in all the release team hopes to have these blockers sorted out by

[19:30] <moritz_> the end of October, which would allow a release before Christmas."

[19:30] *** masak` joined
[19:30] <moritz_> from debian-devel-announce

[19:30] *** timbunce left
[19:31] *** masak` left
[19:32] *** masak left
[19:40] *** Entonian left
[19:41] *** ggoebel joined
[19:58] <moritz_> further results for RT #78252: bisecting in rakudo was non-conclusive, ie identified the last revision... so it could be a parrot change :(

[19:59] *** Italian_Plumber left
[20:02] *** araujo left
[20:05] *** eternaleye left
[20:05] *** eternaleye joined
[20:08] *** EdwardIII joined
[20:10] *** araujo joined
[20:11] *** bluescreen left
[20:15] *** justatheory left
[20:16] *** mfollett left
[20:18] *** meppl joined
[20:18] *** justatheory joined
[20:19] *** rvrgs left
[20:20] *** ggoebel left
[20:26] *** bluescreen joined
[20:26] *** s_mosher joined
[20:26] <s_mosher> hi folks

[20:28] <s_mosher> I noticed higher-arity reduce() is unimplemented

[20:28] <s_mosher> after poking around, it seems like the obvious change works

[20:30] <s_mosher> but it was already in, just commented out, plus there was a test guard against $arity>2... which makes me ask: what did I just break?

[20:31] <jnthn> s_mosher: Did you try make spectest to see if there was any fallout there?

[20:31] <jnthn> Other than that, I'm not sure why it's commented out - I guess there's no explanatory comment?

[20:31] <s_mosher> good idea

[20:31] <s_mosher> no, I hadn't

[20:32] <s_mosher> no, aside from the test guard, it just had  "$res = $expression.(|@args);" commented out, replaced with "...(@args[0],@args[1])"

[20:33] <s_mosher> my best guess is maybe it has something to do with trailing terms causing unexpected behaviour

[20:34] <s_mosher> I'll wait to see if there's any explosions from spectests

[20:35] *** Entonian joined
[20:37] *** justatheory left
[20:39] *** justatheory joined
[20:43] <dalek> rakudo: 7c90370 | moritz++ | src/core/Temporal.pm:

[20:43] <dalek> rakudo: [Temporal] stylistic cleanup; no functional changes

[20:43] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/7c9037011cf4cc6a6692ace1ceb5ded290c59c4b

[20:47] <s_mosher> jnthn, not failing any new tests in reduce

[20:49] <s_mosher> some are failing because of conflicting expectations in the comparison tests, but they dwim the same

[21:01] *** Schwern joined
[21:09] *** ggoebel joined
[21:10] *** nadim_ joined
[21:10] *** rgrau__ joined
[21:11] *** skids left
[21:11] *** Raynes_ joined
[21:11] *** MOAR-f00li5h joined
[21:12] *** sjn__ joined
[21:12] *** pnu_ joined
[21:12] *** Raynes left
[21:12] *** Raynes_ is now known as Raynes

[21:12] *** Raynes left
[21:12] *** Raynes joined
[21:13] <dalek> 6model: 30e4673 | jnthn++ | dotnet/runtime/Runtime/Ops.cs:

[21:13] <dalek> 6model: [dotnet] Add a couple of missing coercion ops to the runtime.

[21:13] <dalek> 6model: review: http://github.com/jnthn/6model/commit/30e46731b9706fbe40ab38354438ba1d3329dbda

[21:13] <dalek> 6model: 1b9b061 | jnthn++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[21:13] <dalek> 6model: Turn down constant optimization a notch, to un-regress a test.

[21:13] <dalek> 6model: review: http://github.com/jnthn/6model/commit/1b9b0611842a9b4730bc60c8c78bc9eab478f0c8

[21:13] <dalek> 6model: 579b172 | jnthn++ | dotnet/runtime/Runtime/Ops.cs:

[21:13] <dalek> 6model: [dotnet] euqal_refs op (for giving =:= functionality).

[21:13] <dalek> 6model: review: http://github.com/jnthn/6model/commit/579b172e0e9ab508b05693f6897aeab4f60b16fa

[21:13] <dalek> 6model: cf07e79 | jnthn++ | common/NQP/NQPSetting.pm:

[21:13] <dalek> 6model: [common] Some initial cuts of prefix + and ~, Stringy and Numeric in the NQPSetting.

[21:13] <dalek> 6model: review: http://github.com/jnthn/6model/commit/cf07e79172dd58c6e763f881a287432683b419d2

[21:13] <dalek> 6model: 98e707b | jnthn++ | common/NQP/NQPSetting.pm:

[21:13] <dalek> 6model: [common] =:=

[21:13] <dalek> 6model: review: http://github.com/jnthn/6model/commit/98e707b13799cdf2217f3dd063b87c5362e85e3f

[21:14] <jnthn> s_mosher: OK. It'd be interesting to know why the original thing was commented out. But feel free to send a patch in - that'll hopefully get someone to comment.

[21:14] <s_mosher> sure, I'm going to investigate a bit more here first

[21:15] <s_mosher> I might add a guard test to ensure that arity agrees with the list length

[21:15] *** Ross left
[21:15] *** spq1 left
[21:15] <s_mosher> jnthn, what's the best place to send a patch?

[21:16] *** cdarroch left
[21:16] *** rgrau_ left
[21:16] *** takadonet left
[21:16] *** f00li5h left
[21:16] *** LionMadeOfLions left
[21:16] *** BinGOs left
[21:16] *** sjn left
[21:16] *** nadim left
[21:16] *** IllvilJa left
[21:16] *** HarryS left
[21:16] *** pnu left
[21:17] <jnthn> s_mosher: [email@hidden.address]
[21:17] <s_mosher> kthx

[21:17] <jnthn> (it's for patches as well as bugs :-))

[21:18] *** pythonian4000afk is now known as pythonian4000

[21:19] *** zostay left
[21:21] *** zostay joined
[21:23] *** pythonian4000 is now known as pythonian4000afk

[21:23] *** pythonian4000afk is now known as pythonian4000

[21:24] *** IllvilJa joined
[21:24] *** LionMadeOfLions joined
[21:25] *** cdarroch joined
[21:25] *** cdarroch left
[21:25] *** cdarroch joined
[21:26] *** takadonet joined
[21:28] *** pythonian4000 is now known as pythonian4000afk

[21:29] *** kjeldahl left
[21:30] *** BinGOs joined
[21:31] *** _kaare left
[21:31] *** zby_home_ left
[21:31] <dalek> rakudo: 6f065b0 | KodiB++ | src/Perl6/Grammar.pm:

[21:31] <dalek> rakudo: [Grammar] Permit "time" or the like on the LHS of a fatarrow.

[21:31] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/6f065b03dea01c84adca797f504bd04f0ddd1560

[21:32] *** bluescreen left
[21:34] <dalek> roast: 26c1e24 | KodiB++ | S02-literals/pairs.t:

[21:34] <dalek> roast: Added tests for "time" and the like on the LHS of a fatarrrow.

[21:34] <dalek> roast: review: http://github.com/perl6/roast/commit/26c1e2479b0ce1fa5ac7d437b761906a31bb8fb0

[21:36] *** timbunce joined
[21:37] *** ruoso left
[21:45] <dalek> 6model: 7e36dac | jnthn++ | common/NQP/NQPSetting.pm:

[21:45] <dalek> 6model: Give NQPList a .new method.

[21:45] <dalek> 6model: review: http://github.com/jnthn/6model/commit/7e36dac774aa030d4bbcd8345ad5ed9868da97bf

[21:45] <dalek> 6model: 832586c | jnthn++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[21:45] <dalek> 6model: Implement PAST::Op with pasttype list.

[21:45] <dalek> 6model: review: http://github.com/jnthn/6model/commit/832586c15867ef540c0ee41189051325731d7bd1

[21:47] *** MOAR-f00li5h is now known as f00li5h

[21:49] *** silug left
[21:49] *** silug joined
[21:51] <dalek> 6model: ca4842a | jnthn++ | dotnet/compiler/Actions.pm:

[21:51] <dalek> 6model: [dotnet] Fix sub vivitype up a little. my @a won't crash and burn during the compile now (though certainly arrays don't really work yet either).

[21:51] <dalek> 6model: review: http://github.com/jnthn/6model/commit/ca4842a890a5d5623a1aac75b529d499f3c98f0e

[21:51] <dalek> 6model: 1e105a5 | jnthn++ | t/nqp/10-cmp.t:

[21:51] <dalek> 6model: We now pass 10-cmp.t.

[21:51] <dalek> 6model: review: http://github.com/jnthn/6model/commit/1e105a51961ad168d15a3fb39b7f0c5c16cc673f

[22:00] *** mavrc left
[22:01] *** sjn__ is now known as sjn

[22:02] <dalek> 6model: 8325634 | jnthn++ | dotnet/compiler/DNST2CSharp.pm:

[22:02] <dalek> 6model: Fix up string escaping - or at least, this should be enough for now.

[22:02] <dalek> 6model: review: http://github.com/jnthn/6model/commit/8325634f04ae2d01763a7f680d61bba6b1ab9a29

[22:05] *** timbunce left
[22:19] *** ggoebel left
[22:28] <dalek> 6model: 2de860c | jnthn++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[22:28] <dalek> 6model: [dotnet] Support literals showing up in the PAST tree, as is allowed.

[22:28] <dalek> 6model: review: http://github.com/jnthn/6model/commit/2de860c17c8b6e8308533886f96f0ba5cf7a394e

[22:28] <dalek> 6model: c05a516 | jnthn++ | dotnet/compiler/Actions.pm:

[22:28] <dalek> 6model: [dotnet] Override quote_delimited from HLL::Actions in JnthnNQP; it relies on :pirop<concat>, which of course won't fly on .Net. (One for pmichaud++ to ponder how to genericise, I guess. :-))

[22:28] <dalek> 6model: review: http://github.com/jnthn/6model/commit/c05a516ce3f968ad746d1236158962d9f557f5ca

[22:28] <dalek> 6model: ea3a9cb | jnthn++ | common/NQP/NQPSetting.pm:

[22:28] <dalek> 6model: [common] Lists and arrays numify to number of elements.

[22:28] <dalek> 6model: review: http://github.com/jnthn/6model/commit/ea3a9cb55b12143a596debf848f380fd7b85de6c

[22:30] * sorear wonders how JnthnNQP's PAST will collide with PIRATE's POST when the two are merged

[22:31] *** slavik1 left
[22:32] <jnthn> sorear: I've not got any extra PAST nodes, I just compile various bits of NQP to different PAST in a few places. However, in nqp-rx's nom branch a bunch of those differences are already transfered.

[22:32] <jnthn> (Far from all, mind.)

[22:32] <jnthn> Anyway, yes, there'll be some effort to unify things, but I expect it can be done in lots of little steps.

[22:35] *** Schwern left
[22:36] <jnthn> phenny: tell pmichaud I'm very uncomfortable with ++ and -- ops in NQP. They're very assigny, in an otherwise purely bindy language. The hack way to do them without assignment will corrupt my constants table ('cus, I haz one ;-)). Having them in Parrot's nqp-rx will only prevent us from doing that optimization. Vote to deprecate.

[22:36] <phenny> jnthn: I'll pass that on when pmichaud is around.

[22:39] <dalek> 6model: cfdd2fc | jnthn++ | dotnet/compiler/Actions.pm:

[22:39] <dalek> 6model: [dotnet] Another de-Parrotification in JnthnNQP. Now interpolation of embedded closures works.

[22:39] <dalek> 6model: review: http://github.com/jnthn/6model/commit/cfdd2fc9dc773d2ef848913b505dddcb70e0c203

[22:39] <dalek> 6model: 70dfa83 | jnthn++ | t/nqp/38-quotes.t:

[22:39] <dalek> 6model: We now pass 38-quotes.t.

[22:39] <dalek> 6model: review: http://github.com/jnthn/6model/commit/70dfa834ddcd086526728a1b1e8a1c5a92a46677

[22:44] <sorear> you don't want to interpret $x++ as $x := $x + 1 ?

[22:45] <jnthn> Well, works for pre-increment, but not post-increment.

[22:45] <jnthn> I guess you could find a way to make it work...

[22:46] <jnthn> But it feels kinda...odd.

[22:46] <jnthn> It's a better option than what happens now, though, if we want to keep it.

[22:47] <sorear> I take it NQP currently implements FORTRAN-66 style constants? :)

[22:48] <jnthn> NQP on Parrot doesn't have constants. :/

[22:48] <jnthn> NQP on .Net actually does build a constant table for all the PAST::Val nodes.

[22:48] <jnthn> Because, well, it's just not that hard to do, so I did it. :-)

[22:49] *** ggoebel joined
[22:50] <jnthn> I wouold say I'm not old enough to remember FORTRAN-66, but you're younger than me, so it's no excuse. :P

[22:52] *** Schwern joined
[22:59] *** Schwern left
[23:03] *** tom_tsuruhara left
[23:06] *** xinming_ left
[23:11] *** icwiener left
[23:13] *** risou joined
[23:22] <dalek> 6model: abac6f9 | jnthn++ | t/nqp/53-knowhow.t:

[23:22] <dalek> 6model: We pass 53-knowhow.t for ages, but forgot to add it here. :-)

[23:22] <dalek> 6model: review: http://github.com/jnthn/6model/commit/abac6f90cb425f15070e987702a2fbd97864a761

[23:22] <dalek> 6model: 7054cd8 | jnthn++ | dotnet/runtime/Init.cs:

[23:22] <dalek> 6model: [dotnet] Enable the hack say/print to take many args.

[23:22] <dalek> 6model: review: http://github.com/jnthn/6model/commit/7054cd873745b43512fd2909cfd77b02d128ce44

[23:22] <dalek> 6model: cbdd49b | jnthn++ | / (2 files):

[23:22] <dalek> 6model: [dotnet] Out with one bad hack, in with a slightly less bad one for undefined scalars.

[23:22] <dalek> 6model: review: http://github.com/jnthn/6model/commit/cbdd49b4a8bcff11c0bda12049346d6375d2c18c

[23:22] <dalek> 6model: eaa51af | jnthn++ | t/nqp/23-named-args.t:

[23:22] <dalek> 6model: We now pass 23-named-args.t.

[23:22] <dalek> 6model: review: http://github.com/jnthn/6model/commit/eaa51af96c2ed6827881221eb13efec4677def96

[23:22] <dalek> 6model: 0d31eba | jnthn++ | t/nqp/06-args-pos.t:

[23:22] <dalek> 6model: Also passing 06-args-pos.t already.

[23:22] <dalek> 6model: review: http://github.com/jnthn/6model/commit/0d31ebae31f13deb9b72ac43c6763a151150c75d

[23:22] *** cdarroch left
[23:24] <jnthn> A few more baby steps towards NQP on .Net. :-) It's nice to have the energy to be writing code again. :-)

[23:27] * jnthn -> sleep, gotta make $dayjob at something resembling morning tomorrow :-)

[23:29] *** Schwern joined
[23:33] *** rvrgs joined
[23:41] *** stkowski joined
[23:50] *** pythonian4000afk is now known as pythonian4000

[23:50] *** Schwern left
[23:55] *** rvrgs left
[23:56] *** rgrau__ left
[23:57] *** ggoebel left
