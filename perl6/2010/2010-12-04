[00:01] *** hanekomu left
[00:13] *** soroush joined
[00:24] *** kst left
[00:24] *** kst joined
[00:30] <dalek> 6model: f0d70f0 | jonathan++ | dotnet/ (3 files):

[00:30] <dalek> 6model: [dotnet] Very first cut of auto-box/auto-unbox bits in PAST2DNST.pm. This means that we can start switching quite a few ops to work with native types, then use the natives when we have them to hand, avoiding epic boxing/unboxing. Switch a few equality ops over; code-gen looks rather better.

[00:30] <dalek> 6model: review: https://github.com/jnthn/6model/commit/f0d70f09b6

[00:30] *** bluescreen joined
[00:31] *** bluescreen is now known as Guest37415

[00:33] *** hercynium left
[00:34] *** whiteknight joined
[00:36] *** jaldhar joined
[00:44] <sorear> I wonder how dirent.d_ino and direntd_type could be exposed in Perl 6

[00:51] *** soroush_ joined
[00:51] *** soroush left
[00:58] *** exodist joined
[01:02] <dalek> 6model: e2f7447 | jonathan++ | common/NQP/P6Objects.pm:

[01:02] <dalek> 6model: [common] Remove an unrequired explicit return. (Yeah, I'll teach the optimizer about that some day soon...)

[01:02] <dalek> 6model: review: https://github.com/jnthn/6model/commit/e2f7447b08

[01:02] <dalek> 6model: a4cb083 | jonathan++ | dotnet/compiler/DNST.pm:

[01:02] <dalek> 6model: [dotnet] Add an (optional) type attr to DNST::Literal.

[01:02] <dalek> 6model: review: https://github.com/jnthn/6model/commit/a4cb083f77

[01:02] <dalek> 6model: 572baa8 | jonathan++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[01:02] <dalek> 6model: [dotnet] Make it possible for PAST::Val nodes to just compile to a DNST::Literal when $*TYPE_CONTEXT says we'd only go and unbox any object that was created anyway.

[01:02] <dalek> 6model: review: https://github.com/jnthn/6model/commit/572baa8f70

[01:02] <dalek> 6model: 82b3bea | jonathan++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[01:02] <dalek> 6model: [dotnet] Use box rather than emit_op, just for consistency, in PAST::Val.

[01:02] <dalek> 6model: review: https://github.com/jnthn/6model/commit/82b3bea622

[01:07] <sorear> eeek!

[01:07] * sorear is motivated

[01:10] <jnthn> piju ja...piju rad... :)

[01:14] <diakopter> mono ...

[01:14] <jnthn> stereo ...

[01:15] <dalek> 6model: d08fd86 | jonathan++ | dotnet/LHF.txt:

[01:15] <dalek> 6model: [dotnet] Add another LHF. Role up, role up. :-)

[01:15] <dalek> 6model: review: https://github.com/jnthn/6model/commit/d08fd86e30

[01:26] *** bpa joined
[01:30] <bpa> How do I get @a.push(%hash) to work like @a[+@a] = %hash?

[01:31] *** s0v left
[01:33] <bpa> push adds a pair like its doing push(%h.pairs), which I don't want

[01:33] <jnthn> Hmm...I wonder if that's right. I guess a hash in list context is a list of pairs though...

[01:34] <jnthn> rakudo: my %h = a => 1, b => 2; my @a; @a.push(%h); say @a.perl

[01:34] <p6eval> rakudo : OUTPUT«["a" => 1, "b" => 2]␤»

[01:34] <jnthn> rakudo: my %h = a => 1, b => 2; my @a; @a.push(\%h); say @a.perl

[01:34] <p6eval> rakudo : OUTPUT«[\("a" => 1, "b" => 2)]␤»

[01:34] <jnthn> Not quite the same but prevents the flattening.

[01:35] <jnthn> unconciousness &

[01:37] <bpa> I want to be able to do: @a[0]<key>, and I'm happy to do the work around, if that's the right way

[01:38] *** vila_ joined
[01:40] <bpa> seems ,,vv

[01:40] <bpa> \]

[01:40] <bpa> ooooooooooooooooooooooooooooo

[01:40] <diakopter> ?

[01:41] <bpa> sorry, one of my kids decided to play on the laptop

[01:41] *** vila_ left
[01:41] <diakopter> :)

[01:42] <huf> would've gotten away with it too, if it weren't for those meddling adults

[01:47] *** mahnmut joined
[01:48] *** silug joined
[01:50] *** mahnmut left
[01:51] <bpa> seems that if I assign to a scalar first, this works

[01:52] <sjohnson> diakopter: hi

[01:52] <diakopter> sjohnson: hi

[01:52] *** kulp joined
[01:52] <sjohnson> bpa: i hope my kids one day are as eager to try out perl6 as yours are

[01:52] <bpa> rakudo: my %h = a => 1, b => 2; my $r = %h; my @a; @a.push($r); say @a.perl

[01:52] <p6eval> rakudo : OUTPUT«[{"a" => 1, "b" => 2}]␤»

[01:52] *** MaL0 joined
[01:53] <sjohnson> we should probably include the ,,vv operator as well as \] before Python 3 gets wind of it

[01:53] <MaL0> hi 

[01:53] <sjohnson> a bit of child-like innocence could do us some good

[01:54] <bpa> The young ones learn fast too

[01:55] *** la-loca joined
[02:01] *** la-loca left
[02:01] <huf> rakudo: my %h = a => 1, b => 2; my @a; @a.push({%h}); say @a.perl

[02:01] <p6eval> rakudo : OUTPUT«[{"a" => 1, "b" => 2}]␤»

[02:01] <bpa> isn't that a copy?

[02:01] <huf> hmm

[02:03] *** wamba left
[02:08] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_tablets

[02:08] *** jferrero left
[02:10] *** no joined
[02:12] *** jasonmay left
[02:15] *** jasonmay joined
[02:19] <sjohnson> can hugme bot do perl 5 eval?

[02:25] <colomon> sjohnson: Not so far as I know.

[02:25] <sjohnson> hugme: help

[02:25] <hugme> sjohnson: (add $who to $project | list projects | show $project | hug $nickname | tweet $twittername $message )

[02:25] <sjohnson> i for some reason thought it could

[02:25] <sjohnson> whoa, twitter functionality!

[02:25] <sjohnson> hugme's getting sexier every year

[02:26] *** no left
[02:39] *** ch3ck3r left
[02:48] *** shiduke joined
[02:49] *** ch3ck joined
[02:50] *** whiteknight left
[02:51] *** sidke joined
[02:51] *** sidek left
[02:54] *** shiduke left
[02:54] *** sidek joined
[02:57] *** sidke left
[02:57] <colomon> rakudo: say "This! is& a$ test33429".comb(/<alpha> | \s/)

[02:57] <p6eval> rakudo : OUTPUT«===SORRY!===␤Non-variable $ must be backslashed at line 22, near "$ test3342"␤»

[02:57] <colomon> rakudo: say "This! is& a\$ test33429".comb(/<alpha> | \s/)

[02:58] <p6eval> rakudo : OUTPUT«This is a test␤»

[03:00] <colomon> I thought Bag was in core?

[03:00] <colomon> guess not.

[03:01] <sorear> good * #perl6

[03:01] <colomon> o/

[03:02] *** ch3ck left
[03:04] *** risou_ joined
[03:04] *** shiduke joined
[03:07] *** sidek left
[03:07] *** risou left
[03:30] *** exodist is now known as Exodist

[03:49] *** bitter16 left
[03:53] *** lichtkind left
[03:54] *** phio joined
[04:06] *** envi joined
[04:15] *** sidke joined
[04:17] *** shiduke left
[04:23] <lue> y o hai o/

[04:31] *** kst left
[04:32] *** kst joined
[04:50] <sjohnson> hi

[04:57] <sidke> should we really have -t on this channel?

[05:00] <sorear> yes

[05:00] <sorear> why?  are you planning to spam?

[05:01] <diakopter> what's -t

[05:02] <sorear> diakopter: allows anyone to use the /topic NEWTOPIC command

[05:02] <diakopter> oh

[05:02] <sidke> I'm not planning to spam

[05:03] <sidke> I just was thinking about that as #notmath got attacked that way

[05:03] <sidke> well, it lasted only a few minutes

[05:03] <sidke> but it was really annoying

[05:03] <diakopter> in the heyday of here, there was enough activity/members that -t wasn't needed

[05:04] <sidke> yeah

[05:05] <sidke> actuallly, speaking of dead channels, I don't think I've seen someone even post a message in #perlnewbies for a few months

[05:05] <sidke> oh, wow 

[05:05] <sidke> only 4 people were in it

[05:06] <sidke> there used to be around a hundred

[05:06] <sidke> I guess I'll just leave and let it die

[05:07] *** orafu left
[05:07] *** orafu joined
[05:09] *** _twitch joined
[05:13] *** lamstyle left
[05:16] *** lamstyle joined
[05:25] <sjohnson> so far no one has goofed around with it

[05:25] <sjohnson> it would be very easy to set +t, and put it back to the way it was

[05:26] <sidke> true

[05:26] <sjohnson> we will be punished in the afterlife if we do mess with it, which is why we're all afraid to touch it

[05:29] *** jedai left
[05:30] *** jedai joined
[05:36] *** justatheory left
[05:44] *** bpa left
[05:46] *** kst left
[05:46] *** kst joined
[06:08] *** phio left
[06:42] *** silug left
[06:45] *** _twitch left
[06:46] *** molaf joined
[07:06] *** masak joined
[07:06] <masak> hola, #perl6!

[07:08] *** am0c left
[07:13] <sorear> hello masak.

[07:13] <sorear> this is very annoying.  I've finished a major refactor of the binder, and STD broke, but my testsuite didn't

[07:13] <masak> huh.

[07:14] <masak> need more tests, then :P

[07:14] <masak> I'm now convinced at the direction Yapsi must take to reach its short-term goals.

[07:15] <sorear> actually this never should have worked in the first place, I think

[07:15] <masak> you're saying this uncovered a bug in STD?

[07:16] <sorear> the relevant STD code is sub infixish($in_meta = $*IN_META) { my $*IN_META = $in_meta; ... }

[07:17] *** kst left
[07:17] <sorear> yesterday-niecza set up lexicals before evaluating default values

[07:17] *** soroush_ left
[07:17] <sorear> so $*IN_META evaluated to the frest my $*IN_META, and effectively defaulted to Any

[07:17] *** kst joined
[07:17] *** soroush joined
[07:17] <sorear> now it reads from an uninitialized lexical and throws a System.NullReferenceException

[07:18] * masak tries to think this one through

[07:18] <masak> my first thought was "hm, maybe this is a case of C<my $a; { $a; my $a }>..."

[07:18] <masak> but I don't think it is.

[07:19] <sorear> actually it is sort of related

[07:19] <masak> since the first C<$*IN_META> is outside the curlies.

[07:19] <sorear> perl6: my $*a = 5; { say $*a; my $*a; }

[07:19] <p6eval> rakudo : OUTPUT«Any()␤»

[07:19] <p6eval> ..pugs: OUTPUT«␤»

[07:20] <masak> std: my $*a = 5; { say $*a; my $*a; }

[07:20] <p6eval> std a194beb: OUTPUT«ok 00:01 121m␤»

[07:20] <sorear> masak: it's outside the curlies, but is evaluated in the scope of the curlies

[07:20] <sorear> I think

[07:20] <masak> sorear: right.

[07:20] <masak> sorear: then I see the problem.

[07:20] <sorear> it definitely has to be able to see some lexicals

[07:20] <sorear> consider sub substr($string, $pos, $len = chars($string) - $pos) { ... }

[07:21] <masak> aye.

[07:21] <masak> but since it's textually before/outside the block, it can't see any lexicals defined in the block.

[07:22] <masak> sorear: making the assignment to C<my $*IN_META> after evaluating the default of the parameter C<$in_meta> feels wrong, though.

[07:24] <sorear> masak: the *assignment* doesn't happen after

[07:25] <masak> um. sorry. I meant making it before.

[07:25] <sorear> oh, absolutely

[07:25] <masak> making it before feels wrong.

[07:25] <sorear> doing assignments before the signature is ridiculous and I won't do it

[07:26] <masak> I think the only remaining question is what the semantics is of same-block C<$*dynvar> accesses with a C<my $*dynvar> in between them.

[07:26] <lue> goodnight o/

[07:27] <masak> and (perhaps) whether there is a special case for routine signatures in this case.

[07:27] <masak> night, lue.

[07:27] <sorear> masak: viv converts C<my $*dynvar> into C<local $::dynvar>

[07:27] <masak> ok.

[07:27] <sorear> which becomes a GvSV/LVINTRO node, which when evaluated pushes $::dynvar onto the savestack

[07:28] <sorear> so it's localized at runtime

[07:28] <masak> but then again, viv makes concessions because it has to cram Perl 6 semantics into Perl 5.

[07:28] <sorear> contextuals, as I understand them, don't do any runtime licalizing stuff

[07:30] <sorear> TimToady: commentary wanted.

[07:31] *** soroush_ joined
[07:31] <sjohnson> thought you said vim for a sec

[07:31] <sjohnson> hehe

[07:32] <masak> sorear: I have a distinct feeling that I've talked about this before with TimToady.

[07:32] <masak> sorear: I'll do some searches in the backlog.

[07:32] *** soroush left
[07:33] <sorear> STD on STD finished in 8.3 seconds !!!  wait, there's no "OK" D:

[07:33] <diakopter> :

[07:34] <sjohnson> （　｀ー´）

[07:52] *** kjeldahl left
[07:55] <sorear> yay STD is working again.

[07:57] <dalek> niecza: 6157c41 | sorear++ | / (5 files):

[07:57] <dalek> niecza: The long-awaited switch to an external binder

[07:57] <dalek> niecza: 

[07:57] <dalek> niecza: Instead of generating highly repetitive code to process arguments,

[07:57] <dalek> niecza: a single data-driven binder is now used.  No significant effect on

[07:57] <dalek> niecza: runtime; cuts code size quite dramatically, especially for .dlls

[07:57] <dalek> niecza: (SAFE goes from 213KB to 111KB).

[07:57] <dalek> niecza: review: https://github.com/sorear/niecza/commit/6157c41066

[07:58] <masak> sorear++

[08:02] <sorear> masak: I'm definitely doing monthly releases.  If they're good enough for yapsi they're good enough for me.

[08:02] <masak> \o/

[08:02] <masak> sorear: I think I've found a project to pair up with niecza.

[08:03] <masak> a pure-p6 markdown->HTML converter.

[08:03] <diakopter> grammar + actions?

[08:04] <masak> more or less.

[08:04] <masak> er, well, maybe not.

[08:04] <masak> depends on how faithful to the original p5 one wants to be.

[08:04] <masak> and that depends on design dicisions of various sorts.

[08:04] * diakopter votes not-very-faithful

[08:04] <masak> right now strangelyconsistent.org is using the p5 version. would be nice to have a p6 version of comparable speed.

[08:05] <sorear> erm.  I suppose I should implement actions then. :p

[08:05] <masak> diakopter: I've seen markdown ports to other languages that went the faithful route. think it was in order to be able to track changes better in the original.

[08:05] <masak> sorear: :)

[08:07] *** _kaare joined
[08:09] <masak> slot #5 is still up for grabs in the advent calendar.

[08:10] *** kjeldahl joined
[08:19] *** kst left
[08:19] *** kst joined
[08:37] *** hanekomu joined
[08:40] *** adu joined
[08:40] <adu> hi

[08:42] <masak> hi adu

[08:44] *** mberends left
[08:45] <adu> how are you?

[08:45] <sorear> hello

[08:45] <masak> adu: reasonably relaxed, given the season. and you?

[08:45] <sorear> hehehe.  profiling STD finished in "user time" of 14 seconds

[08:46] <adu> so is rakudo the primary implementation?

[08:46] <sorear> yes

[08:46] *** wamba joined
[08:46] <adu> and it definitely uses parrot?

[08:46] <sjohnson> oh ya

[08:46] <masak> yes.

[08:46] <adu> wow

[08:46] <sjohnson> i'd bet my life on that being true

[08:46] <adu> last time I looked at parrot you couldn't install it

[08:47] <sjohnson> how long ago was that? :)

[08:47] <adu> about a year ago

[08:47] <masak> you could install Parrot a year ago...

[08:47] <adu> it gave some error like "You don't want to install this, but if you do, type 'make reallyinstall'..."

[08:48] <sorear> is there something wrong with Rakudo using Parrot/

[08:48] <adu> well i'm glad its changed

[08:48] <adu> no I love parrot, its a beautiful virtual architecture

[08:49] <masak> sounds like the 'make install-dev' thing that existed about a year ago.

[08:49] <sjohnson> i think he was just worried it would be vapour ware, under the assumption that parrot wouldn't install i suppose

[08:49] <sorear> adu: nothing has changed, Rakudo has always used Parrot

[08:49] <adu> i was worried, actually

[08:49] <sjohnson> hugme: hug adu 

[08:49] * hugme hugs adu

[08:49] <sorear> Rakudo was part of the Parrot repository until not long ago

[08:49] * adu :)

[08:50] <sjohnson> hey, i couldn't get gentoo linux to install, and i was worried too

[08:50] <sjohnson> :)

[08:51] <adu> In fact I was considering using Parrot for my toy language too

[08:51] <masak> nice!

[08:51] <moritz_> good morning

[08:51] <adu> but then i started looking around, like v8, tamarin, mono

[08:51] <masak> morning, moritz_!

[08:52] <masak> adu: yeah, lots of alternatives out there.

[08:52] <moritz_> colomon: what's up with your advent post?

[08:53] <adu> but one thing I really like about Parrot is that it doesn't have those stupid stack things like rot3, rot4, swap, dup, yuck

[08:53] <masak> you seem to really dislike stack VMs.

[08:54] <masak> any rational reason behind the visceral dislike? :)

[08:54] <adu> no, I just like registers more

[08:54] <masak> I see.

[08:54] <sjohnson> cash registers?

[08:54] <masak> sjohnson: no, registers as in register-based VMs.

[08:55] <adu> well I figure that getting a value from a pointer is faster than swizzling the stack to move things to the top

[08:55] <masak> sjohnson: http://en.wikipedia.org/wiki/Processor_register

[08:55] <adu> pointer/register

[08:55] <sjohnson> yeah i was just being silly.  probably had too much wine tonight

[08:55] <adu> lol

[08:56] <masak> don't let me stand in the way of your goofing off, then. :)

[08:56] <adu> sjohnson: mee to!

[08:56] <adu> I went to this thing called "Midnight Maddness"

[08:57] <adu> masak: don't get me wrong, stacks are a great model, especially for functions which return multiple values

[08:58] <masak> I think it's more a question of what abstractions you're able to build on top of stack- or register-based VMs. how well will you be able to support peephole optimization, etc.

[08:59] <masak> and there, both types have their advantages and drawbacks.

[08:59] <masak> JVM seems to do really well with stacks, to be honest.

[08:59] <masak> but Parrot went the register path because there is more research about that.

[09:00] <sorear> adu: no major VM actually uses stacks

[09:00] <sorear> adu: so you shouldn't think about the performance of stacks

[09:00] <sorear> adu: the JVM, mono, etc all translate stack bytecode into register instructions before running it

[09:01] * masak didn't know that

[09:01] <masak> cool.

[09:01] <adu> sorear: its rather impossible to say that about Java

[09:01] <adu> since there are at least 50 implementations of it

[09:01] <sjohnson> i heard someting about maybe someone doing a Python implementation using Parrot.  i wonder if that was just a whim fancy or if it actually might happen.

[09:01] <sorear> adu: by "the JVM" I mean Sun HotSpot

[09:01] <masak> sorear: does that mean the the stack-based intermediate code is only used for the abstraction power it brings?

[09:01] <adu> sorear: ok, then you can say that

[09:02] <masak> sjohnson: allison has been working on a Python implementation, IIRC.

[09:02] <sorear> masak: for a long time it was thought that stack bytecode is necessarily more compact

[09:02] <masak> sjohnson: I have no idea what state it's in, but I get the feeling that it's fairly far along.

[09:02] <masak> sjohnson: even with things such as Python 3k.

[09:02] <sorear> masak: which matters for Java, since it was designed to send bytecode over dialup internet

[09:02] <masak> sorear: ah.

[09:02] <sorear> masak: and everyone else just copied Java because it was the VM market leader

[09:03] <masak> *nod*

[09:03] <adu> why is Java everywhere

[09:04] <masak> adu: they did their marketing right. they managed to grab mindshare from various directions.

[09:04] <masak> also, Java is not totally worthless, technologically.

[09:04] <adu> i can has mindshare?

[09:04] <adu> :)

[09:04] <masak> the optimizations the JVM performs are quite impressive, for example.

[09:06] <adu> i'm sure

[09:06] <sjohnson> adu: good marketting might be the reason for java being everywhere

[09:06] <sjohnson> young computer science teenagers thinking it's l33t

[09:07] <sjohnson> who knows

[09:07] <sjohnson> i believe its speed has improved over the years

[09:07] <sjohnson> and it apparently does multi-core CPU threading very easily

[09:08] <sjohnson> so my brother says

[09:08] <masak> threads are still a bother.

[09:08] <masak> even in Java.

[09:08] <masak> familiar syntax might factor into Java's success. in a sense it's something quite Smalltalkish, but with the Algol syntax we all know and love.

[09:10] * adu wonders what the world would be like if Sun marketed Scheme in the same manner

[09:10] <sjohnson> ive never heard of scheme.  i guess i would have if there was better marketing

[09:10] <sorear> Scheme is insufficiently C-like to take over the world

[09:11] <sorear> sorry.

[09:11] <sorear> you will notice that Perl 6 has braces, semicolons, and operator precedence; this is on purpose

[09:11] <adu> sjohnson: have you heard of Lisp?

[09:12] <sorear> another reason Java prospers is inertia.  By all rights C# should have killed it

[09:12] <masak> inertia is part of mindshare, I guess.

[09:12] <dalek> niecza: d8c3188 | sorear++ | lib/Kernel.cs:

[09:12] <dalek> niecza: Add Str.Bool and Hash.Bool context accelerators

[09:12] <dalek> niecza: review: https://github.com/sorear/niecza/commit/d8c318898a

[09:12] <sjohnson> adu: i have yep

[09:13] <masak> generally, Perl people seem to be overly preoccupied with killing off Java. :)

[09:13] <sorear> what's a good collective name for $/ and $! ?

[09:13] <masak> sorear: and not $_ ? 

[09:13] <sorear> $_ is different

[09:13] <adu> sjohnson: "they" say that every sufficiently matured programming language is usually an implementation of half of Common Lisp

[09:13] <sorear> slightly

[09:14] <sorear> "they" have apparently not played much with elf.

[09:14] <adu> sorear: you mean the file format?

[09:14] <sjohnson> adu: is it worth learning?

[09:14] <adu> sjohnson: yes, CLOS in particular

[09:14] <sjohnson> ive heard of it, but perl 5 handles my highlevel needs, and probably C++ my lower level needs

[09:14] <masak> adu: it's called "Greenspun's Tenth Rule": http://en.wikipedia.org/wiki/Greenspun's_Tenth_Rule

[09:14] <sorear> adu: no

[09:14] <sorear> elf: say 2 + 2

[09:15] <sorear> ...

[09:15] <sorear> moritz_ ?

[09:15] <masak> rakudo: say "alive!"

[09:15] <p6eval> rakudo : OUTPUT«alive!␤»

[09:15] <sorear> anyways it's a Perl 6 to Common Lisp compiler.

[09:15] <masak> elf must have been put to rest at some point.

[09:22] <moritz_> sorear: !

[09:23] <masak> moritz_: sorear (I think) was wondering why p6eval no longer has an 'elf:' target.

[09:23] <sorear> correct.

[09:24] <adu> so is 'say' the equivalent of echo/printf?

[09:24] <masak> adu: it's 'print' with an added newline at the end.

[09:24] <masak> rakudo: say "OH HAI"; say 42

[09:24] <p6eval> rakudo : OUTPUT«OH HAI␤42␤»

[09:24] <moritz_> sorear: on migrating p6eval to a new server, I didn't find instructions on how to build and run elf

[09:25] <moritz_> there are several directories with 'elf' in the name, and I have no idea which one is the 'right'

[09:25] <sjohnson> adu: say == print with a "

[09:25] <sjohnson> "\n" at the end

[09:25] <sjohnson> god i hate this laptop keyboard.

[09:25] <sjohnson> pipe symbol in the wrong place

[09:25] <moritz_> I think obscurity for outsiders was the main reason why elf never attracted more developers

[09:26] <adu> lol

[09:26] <masak> moritz_: yes, I think so too.

[09:26] <masak> I'm glad sorear++ has taken the route of making more noise for niecza.

[09:27] <moritz_> after some month I could at least convince putter/mncharity to write a website

[09:27] <masak> noise is the *only* reason, as far as I know, that Yapsi has been downloaded hundreds of times.

[09:27] <masak> oh, and the fact that it's the official implementation...

[09:27] <sorear> I should make release tarballs or something for niecza so I can count downloads

[09:27] <sjohnson> moritz_: i used your hugbot as the framework for my own irc bot :)

[09:28] <masak> sorear: github is very good for this.

[09:28] <sorear> they wouldn't really offer anything git doesn't

[09:28] <masak> sorear: no, except not needing git.

[09:28] <sjohnson> heh

[09:28] <sjohnson> "git is good, git is great.  it helps things that we create"

[09:29] <masak> there was a quote in 2008 on #parrot about the two things perceived as our saviour that year: git, and Obama.

[09:30] * sorear prefers to think of git as "second system syndrome done right"

[09:35] <sjohnson> we use git at work.  i really like it

[09:36] <sjohnson> saves us a lot of time

[09:36] <sjohnson> i would shake Mr. Torvalds hand if i ever met him to thank him

[09:36] <masak> he also made a little thing called the Linux kernel.

[09:38] <sjohnson> im not a huge linux fan (yet, at least), so git holds a bigger place in my heart

[09:38] <masak> :)

[09:39] <frettled> :)

[09:39] * frettled loves both.

[09:39] <sjohnson> like jnthn, i'm more of a windows-desktop kinda guy

[09:39] <frettled> hugme: hug sjohnson 

[09:39] * hugme hugs sjohnson and blushes

[09:39] <sjohnson> i am ssh'd into an ubuntu machine though to talk here

[09:39] <sjohnson> ooo!!! i got a blush

[09:39] <sjohnson> must be this new cologne i'm wearing

[09:53] <sorear> masak: how do I get clone stats from github?

[09:54] <masak> good question. I don't know.

[09:54] <Khisanth> hmm but git is much better at reverting things ...

[09:55] <sorear> masak: how are you getting stats for yapsi?

[09:55] <masak> sorear: http://github.com/masak/yapsi/downloads

[09:56] <dalek> niecza: e7be5b2 | sorear++ | / (7 files):

[09:56] <dalek> niecza: Implement ability of regex matches to set $/

[09:56] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e7be5b25e3

[09:56] <sorear> masak: ah.  thanlks

[09:57] <masak> sorear: recently the tags are automatically provided as zip files. but I like those download numbers so much, I keep providing .tar.gz files manually too.

[10:00] * sorear -> sleep

[10:00] <sorear> only managed a 2s speedup today :/

[10:01] <masak> 'night, sorear. dream of massive speedups.

[10:07] *** DarthGandalf left
[10:12] *** DarthGandalf joined
[10:22] *** jhuni left
[10:22] <sjohnson> hmm, what is niecza, if i may ask

[10:22] <sjohnson> kind of curious now

[10:23] <masak> sorear: see? this is why you must make noise :P

[10:24] <masak> sjohnson: it's a Perl 6 implementation.

[10:24] <masak> sorear's writing it. it runs on Mono.

[10:24] <masak> it's quite fast, and getting faster, because sorear++ is optimizing it.

[10:25] <sjohnson> so its not running on parrot?

[10:25] <masak> that's correct.

[10:25] <sjohnson> niecza: say 3;

[10:25] <p6eval> niecza d8c3188: OUTPUT«3␤»

[10:25] <sjohnson> hmm.. that is kinda interesting

[10:26] <sjohnson> mono == http://en.wikipedia.org/wiki/Mono_%28software%29 ?

[10:26] <masak> yeah.

[10:28] <sjohnson> hmm, im having a hard time understanding what mono is.  is it a VM?

[10:28] <sjohnson> or maybe it's something like Microsoft's .NET

[10:29] <sjohnson> i wonder what language niecza is written in, if thats the case

[10:29] <masak> it's a free port of .NET, yes.

[10:30] <sjohnson> something with a .cs extension

[10:30] <sjohnson> c#?

[10:31] <masak> aye.

[10:31] <sjohnson> hmm, makes me think i could write one!  but maybe not

[10:32] *** jferrero joined
[10:32] <sjohnson> i'll let "the big boys" handle that

[10:32] <masak> I remember thinking like that not long ago.

[10:32] <masak> you just stick around, and stay curious, like I did. :)

[10:33] * masak goes for a small shopping round

[10:35] <sjohnson> i wonder how SMOP is doing

[10:44] *** hanekomu left
[10:49] *** jferrero left
[10:58] *** am0c^ joined
[11:00] *** risou_ left
[11:11] *** plobsing left
[11:13] *** plobsing joined
[11:24] *** MayDaniel joined
[11:27] *** am0c joined
[11:35] *** MayDaniel left
[11:36] *** Chillance joined
[11:50] *** adu left
[12:07] *** MayDaniel joined
[12:14] *** kanishka joined
[12:16] *** MayDaniel left
[12:37] *** shi joined
[12:38] *** cognominal left
[12:44] *** cognominal joined
[12:58] <masak> heh, alpha has 'undef'. :)

[12:58] * masak is hacking on Web.pm

[13:00] <cls_bsd> a/win 30

[13:01] * masak hugs cls_bsd, good irssi user

[13:14] <Juerd> Not that good. Should be using go2.pl, and binding meta-. to /go

[13:14] <masak> :)

[13:14] <Juerd> <meta>.30<enter> Much faster.

[13:15] <Juerd> And it allows you to use channel/query names instead of window numbers

[13:15] <masak> I've been wondering about that.

[13:15] <Juerd> http://genericorp.net/~count/irssi/go

[13:16] <masak> I can see why irssi uses numbers, but it also hides a lot of useful information for those of us who tend to think in names.

[13:16] <Juerd> Numbers are great for permanent residents of the Activity bar only.

[13:17] <masak> and even for those, seems to me, not too great.

[13:17] <Juerd> But I have >50 windows open and I really don't know what any of the windows >18 really is, without looking.

[13:17] <cls_bsd> wow thx

[13:18] <masak> Juerd++ # 'I believe that creativity is a response to being "sufficiently annoyed".' -- Erik Naggum

[13:18] <Juerd> I didn't make go2.pl

[13:19] <masak> no, but you let cls_bsd know about it.

[13:19] <Juerd> Of course. cls_bsd is wasting valuable time that could be spent hacking. :)

[13:19] <masak> exactly.

[13:24] <masak> Tene: ping

[13:25] *** amkrankruleuen joined
[13:35] <jnthn> o/ #perl6

[13:37] <masak> jnthn: \o

[13:41] *** Patterner left
[13:42] *** Psyche^ joined
[13:42] *** Psyche^ is now known as Patterner

[13:43] <szbalint> I also have a lot of open windows, but the numbers stay mostly the same for months, so I learn them.

[13:43] <masak> szbalint: do you like to learn them?

[13:45] <colomon> \o

[13:45] <masak> o/

[13:47] <colomon> moritz_: My Advent post is in wordpress and scheduled to go live in 6 hours or so.  I'd like to get a round of edits in there first.  Any comments welcome.

[13:47] <masak> ah, good to know. I'll have a look.

[13:48] <masak> if we don't have one already, I could write a fallback post for tomorrow.

[13:48] <jnthn> ooh, I didn't sign up for the advent calendar at all this year..

[13:48] <masak> jnthn: then you have a unique opportunity to help us with the hole we have in the schedule tomorrow :)

[13:48] <jnthn> :P

[13:49] <jnthn> No idea what to write about though. :)

[13:49] <jnthn> Is anyone doing nested siggies, and did we have those a year ago?

[13:49] <masak> there are a bunch of good ideas in the backlog.

[13:49] <masak> don't think anyone did nested siggies.

[13:49] <jnthn> k

[13:50] <masak> jnthn: https://github.com/perl6/mu/tree/master/misc/perl6advent-2010/

[13:51] <szbalint> masak: it's shorter to type.

[13:51] <colomon> What's the current status of Bag?

[13:51] <masak> rakudo: Bag

[13:51] <p6eval> rakudo : OUTPUT«Could not find sub &Bag␤  in main program body at line 22:/tmp/udi5KZoMp2␤»

[13:51] <colomon> I wanted to use it for my next Advent post, but much to my surprise it doesn't seem to exist anywhere.

[13:52] * jnthn doesn't remember it being implemented 

[13:52] <masak> it hasn't been.

[13:52] <masak> Set has.

[13:53] <colomon> I was able to cobble together a quick version that met my needs.

[13:54] <colomon> https://gist.github.com/728195

[13:54] <colomon> (Simple Markov chain using the sequence operator and Bag.)

[13:54] * jnthn away for a little bit...

[13:55] <colomon> btw, big ++ to whomever it was that made the great error message when you use a Hash instead of a block in a map, that was a terrific help last night.

[14:01] <masak> that would be moritz_++

[14:02] <masak> given the recent Str/Int discussions, one possible solution to the Hash/Block confusion could be to make Hash literals a special kind of Block...

[14:03] <masak> I wanted to put a smiley at the end of that statement, but I realized I don't know how serious I am.

[14:11] *** kanishka left
[14:21] *** MayDaniel joined
[14:22] *** whiteknight joined
[14:27] *** Guest37415 left
[14:29] *** muixirt joined
[14:30] *** amkrankruleuen left
[14:30] <muixirt> Perl not in the top200? http://www.r-bloggers.com/google-ai-challenge-languages-used-by-the-best-programmers/

[14:30] <muixirt> Wonder why and how Perl 6 can change that :-)

[14:33] <masak> interesting set of graphs.

[14:40] *** Guest37415 joined
[14:44] *** cognominal left
[14:46] *** cognominal joined
[14:46] *** jaldhar left
[14:48] <flussence> I don't know if it went unnoticed yesterday... any opinions on this idea? http://irclog.perlgeek.de/perl6/2010-12-03#i_3052989

[14:49] <masak> flussence: .can ?

[14:50] <masak> I thought .can was all about methods, not types.

[14:51] <flussence> I guess what I'm getting at is whether duck typing would be a more useful default

[14:52] <jnthn> No.

[14:52] <jnthn> Also, .can is about methods, as masak++ said

[14:52] <jnthn> It expects a method name to be passed to it

[14:52] <jnthn> Not a type

[14:53] <masak> flussence: ~~ is already pretty flexible, in that it checks .does, which takes things like roles and subtypes into consideration.

[14:53] <jnthn> There's nothing to stop you creating duck types though

[14:53] <jnthn> masak: Eventually it ends up delegating to the meta-object.

[14:54] <jnthn> masak: So it'd be possible to implement duck-typing style things in Perl 6 :)

[14:54] <jnthn> duck Foo { method bar() { ... }; method baz() { ... } }

[14:54] <jnthn> And type-checking against Foo would do a bunch of .can checks on the object.

[14:55] <masak> rakudo: class Duck { method quack() { say "quack!" } }; subset Kwackable where { .can("quack") }; my Duck $duck .= new; if $duck ~~ Kwackable { $duck.quack }

[14:55] <jnthn> Once the meta-model re-working I'm doing is done with, that'll be not too hard to write in a module. :)

[14:55] <p6eval> rakudo : OUTPUT«quack!␤»

[14:55] <jnthn> Yes, there's also that way of course :)

[14:55] <jnthn> Depends how much sugar you want

[14:56] <masak> aye.

[14:56] <jnthn> I guess .can("quack" & "swim") could also be a nice way to list a bunch of methods you want :)

[14:56] <masak> oooh!

[14:56] * masak reluctantly likes junctions more and more

[14:57] * flussence has had his question thoroughly answered :)

[14:57] <masak> flussence: hope it was us :)

[14:57] <jnthn> masak: You're currently at a stage of liking and disliking them? :P

[14:57] <flussence> and I hadn't seen that "subset" thing before, I'll have to remember that one

[14:58] <masak> jnthn: no. yes.

[14:58] <masak> flussence: subsets rock.

[14:58] <masak> flussence: they're basically types with an open membership policy.

[14:59] <masak> rakudo: class A { has $.x is rw }; my $a = A.new(:x(42)); subset Fortytwoish where { .x == 42 }; say $a ~~ Fortytwoish; $a.x++; say $a ~~ Fortytwoish

[14:59] <p6eval> rakudo : OUTPUT«Bool::True␤Bool::False␤»

[15:00] <masak> flussence: imagine using that as a parameter type.

[15:01] <allbery_b> <haskell-geek>pity they're not true dependent types</haskell-geek>

[15:02] <masak> allbery_b: have you seen Perl 6's parametric roles?

[15:02] <allbery_b> yes, I'm just being snarky

[15:02] <masak> hard to tell with you haskell geeks. :P

[15:07] *** scorpil joined
[15:15] *** scorpil left
[15:25] <masak> currently tracking down a persistent alpha bug.

[15:26] *** aindilis joined
[15:26] <masak> symptoms most resemble a "poisoned" string variable which, when put into a .rindex call, yields the wrong result.

[15:28] *** [Coke] left
[15:29] *** smash joined
[15:30] <smash> hello everyone

[15:30] <masak> hi smash

[15:32] <smash> updated http://gil.di.uminho.pt/users/smash/rakudo-bench.html

[15:32] <smash> dice.pl is not working with the last release of rakudo star :\

[15:32] <masak> smash++

[15:32] <masak> smash: do you know why not?

[15:32] <smash> phenny: tell takadonet http://gil.di.uminho.pt/users/smash/rakudo-bench.html updated

[15:32] <phenny> smash: I'll pass that on when takadonet is around.

[15:32] <smash> masak: let me check

[15:33] *** kjeldahl left
[15:34] <masak> also, what is this trans-sprintf.pl whose time has gone up since last release?

[15:34] * masak finds the link

[15:34] <smash> masak: ahhh, http://nopaste.snit.ch/26508

[15:35] <masak> smash: ah, yes.

[15:35] <masak> I added that, rather than have it succeed by mistake.

[15:36] <masak> probably means that for one or two releases, it *shouldn't* have worked.

[15:37] <masak> .roll was implemented in Rakudo in September.

[15:37] * smash nods

[15:38] <masak> so the September and October releases should also have had errors, if the script has been the same all that time.

[15:38] * moritz_ back

[15:38] <smash> masak: let me double check

[15:40] <smash> masak: rakudo-star-2010.11 is the only one printing out the error

[15:41] *** [Coke] joined
[15:41] <masak> smash: yes, because I introduced that error message in November.

[15:41] <masak> all I'm saying is that the error *should* have been there from the start.

[15:41] <smash> oh, right

[15:42] <masak> difference between "should also have errors" and "should also have *had* errors" :)

[15:42] <smash> :)

[15:47] *** jferrero joined
[16:12] *** MayDaniel left
[16:15] *** risou joined
[16:25] *** ch3ck joined
[16:26] *** araujo left
[16:27] *** kst left
[16:28] *** kst joined
[16:37] *** molaf left
[16:40] *** drbean_ joined
[16:43] *** drbean left
[16:46] <masak> noms &

[16:46] *** masak left
[16:50] *** sftp_ joined
[16:51] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_cookbook_tablet

[16:51] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_regex_tablet

[16:51] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_basics_tablet

[16:51] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_meta_tablet

[16:51] *** sftp left
[16:53] *** envi left
[16:56] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_intro_tablet

[16:56] *** sftp joined
[16:57] *** sftp_ left
[16:59] *** envi joined
[17:01] *** sftp_ joined
[17:02] *** sftp left
[17:04] *** risou_ joined
[17:06] *** am0c left
[17:07] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_meta_tablet

[17:07] *** risou left
[17:07] *** sftp joined
[17:11] *** sftp_ left
[17:13] *** [Coke] left
[17:13] *** sftp left
[17:14] *** sftp joined
[17:19] *** [Coke] joined
[17:20] *** Guest37415 left
[17:23] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_variable_tablet

[17:23] *** sftp left
[17:23] *** sftp joined
[17:28] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_variable_tablet

[17:29] *** kulp left
[17:32] *** soroush_ is now known as soroush

[17:32] *** soroush left
[17:32] *** soroush joined
[17:36] *** jferrero left
[17:37] *** kst left
[17:38] *** kst joined
[17:43] *** lichtkind joined
[17:44] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[17:49] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[17:55] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[18:02] *** ggoebel left
[18:06] *** ggoebel joined
[18:11] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[18:16] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_lookup_tablet

[18:18] *** ggoebel left
[18:23] *** envi left
[18:29] *** cognominal left
[18:34] *** cognominal joined
[18:41] *** jferrero joined
[18:51] *** kst left
[18:51] *** kst joined
[19:05] *** risou joined
[19:05] *** risou left
[19:08] *** risou_ left
[19:16] *** risou joined
[19:17] *** s1n joined
[19:19] *** araujo joined
[19:22] *** jaldhar joined
[19:25] *** ch3ck left
[19:35] <sorear> good * #perl6

[19:35] <diakopter> hi

[19:37] *** cls_bsd joined
[19:39] *** soroush left
[19:41] *** soroush joined
[19:43] <lichtkind> same suspects as ever :)

[19:54] *** whiteknight left
[19:59] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_block_tablet

[20:01] <moritz_> phenny: tell colomon that Dec 04 is close to its end here (central europe), and we're still waiting for the advent post... might I ask you to hurry up a bit?

[20:01] <phenny> moritz_: I'll pass that on when colomon is around.

[20:02] <colomon> moritz_: post should have gone live 2 minutes ago

[20:02] <phenny> colomon: 20:01Z <moritz_> tell colomon that Dec 04 is close to its end here (central europe), and we're still waiting for the advent post... might I ask you to hurry up a bit?

[20:02] <colomon> hmmmm

[20:02] *** smash left
[20:02] <moritz_> colomon: did you press "publish"?

[20:03] <colomon> moritz_: I set a schedule for it.

[20:03] <colomon> supposed to fire at 20:00.

[20:03] <colomon> but I guess I can just press publish manually at this point.

[20:04] <colomon> It's up.

[20:04] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[20:05] <moritz_> colomon: if you just save as draft, it doesn't publish

[20:05] <colomon> ah

[20:05] <colomon> Do we have someone signed up for tomorrow's?

[20:06] <moritz_> no :(

[20:06] <moritz_> if nobody chimes in, I'll wipe something up

[20:10] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_delta_tablet

[20:10] <colomon> Do you have something in mind?

[20:10] <moritz_> predictive parsing

[20:11] *** wamba left
[20:37] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_language_design_tablet

[20:37] *** soroush left
[20:37] *** soroush joined
[20:37] <Tene> phenny: tell masak pong

[20:37] <phenny> Tene: I'll pass that on when masak is around.

[20:42] *** rindolf joined
[20:42] <rindolf> Hi all.

[20:42] <Tene> Juerd: you should perhaps look into adv_windowlist.pl irssi plugin

[20:46] <Tene> Juerd: http://allalone.org/adv_windowlist.png

[20:50] *** jaldhar left
[20:50] <dalek> roast: 744caf1 | (Solomon Foster)++ | integration/advent2010-day4.t:

[20:50] <dalek> roast: Add tests for 2010 Advent calendar day 4.

[20:50] <dalek> roast: review: https://github.com/perl6/roast/commit/744caf19df

[20:50] *** jaldhar joined
[20:51] <dalek> mu: 04ff529 | moritz++ | misc/perl6advent-2010/articles/predictive-parsing.pod:

[20:51] <dalek> mu: [advent] add article, possibly for tomorrow: predictive parsing

[20:51] <dalek> mu: review: https://github.com/perl6/mu/commit/04ff5298c4

[20:51] <moritz_> review and improvements welcome!

[20:51] <Tene> phenny: tell masak you may also be interested in adv_windowlist.pl for irssi: http://allalone.org/adv_windowlist.png

[20:51] <phenny> Tene: I'll pass that on when masak is around.

[20:52] <colomon> moritz_++

[20:53] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_basics_tablet

[20:55] *** PABIRGJ joined
[20:56] <moritz_> is that article interesting and understandable for the casual programmer?

[20:58] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_oop_tablet

[20:58] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_subroutine_tablet

[20:58] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_block_tablet

[20:58] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_io_tablet

[20:58] <colomon> My judgement is yes, but I'm not sure I'm a good judge here.

[20:58] <flussence> I like it, short and to the point

[21:03] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_language_design_tablet

[21:10] <lue> ohai o/

[21:12] <colomon> \o

[21:16] *** gbacon joined
[21:18] <lue> colomon: I think you meant 'preceded' (instead of 'proceeded') in your advent post, in the paragraph about the REPL.

[21:18] *** ch3ck joined
[21:20] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[21:21] *** dnewkirk joined
[21:22] <lue> rakudo: my @a = 1, .9, .99 ... *; say @a[^5];

[21:22] <p6eval> rakudo : OUTPUT«Method 'count' not found for invocant of class 'Failure'␤  in <anon> at line 835:CORE.setting␤  in main program body at line 1␤»

[21:26] <lue> rakudo: my @a := 1, .9, .99 ... *; say @a[^5];

[21:26] <p6eval> rakudo : OUTPUT«Method 'count' not found for invocant of class 'Failure'␤  in <anon> at line 835:CORE.setting␤  in 'List::at_pos' at line 1␤  in 'Any::postcircumfix:<[ ]>' at line 1742:CORE.setting␤  in <anon> at line 1␤  in 'Any::postcircumfix:<[ ]>' at line 1␤  in main program body at line 1␤»

[21:29] <Juerd> Tene: That'd take up way too much space with my >50 windows

[21:29] <Tene> Juerd: 'k

[21:33] <lichtkind> is

[21:33] <lichtkind> the dim command is gone right?

[21:33] <moritz_> dim? that's BASIC, not Perl

[21:33] <moritz_> DIM a AS INTEGER

[21:33] <jnthn> OH NO MY EYES

[21:33] <jnthn> :P

[21:37] <moritz_> jnthn: do you want to write something for the advent calendar?

[21:37] <lichtkind> moritz_: trust me once i read it in the syn  it was perl

[21:38] <jnthn> moritz_: Yes, pondering doing something on nested signatures, if that'd be interesting?

[21:38] <moritz_> jnthn: it sure would

[21:38] <moritz_> lichtkind: $ git log -p|ack -w dim|wc -l

[21:38] <moritz_> 0

[21:39] <moritz_> the perl6/specs git repo reaches back to 2006-02-24

[21:39] <moritz_> and it was never mentioned in that time

[21:39] <lichtkind> i did a search myself, thatswhy i asked, but not all is in history since specs moved out of pugs

[21:40] * moritz_ doesn't believe it until he sees prove of it

[21:40] <jnthn> grep for is dim in http://dev.perl.org/perl6/doc/design/exe/E02.html

[21:40] <jnthn> ;)

[21:41] <moritz_> trait, not command :-)

[21:42] <jnthn> Yeah, I can only ever think of it as a trait :)

[21:42] <jnthn> But even that's dead now.

[21:43] <lichtkind> jnthn: thanks, it was still living in the tablets

[21:43] <jnthn> Kill! Kill!

[21:44] <lichtkind> gone with the next save

[21:47] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_io_tablet

[21:47] <colomon> lue++

[21:53] <flussence> my @a := 1/1, { my $a = .denominator*10; ($a-1)/$a } ... *; say ~@a[^5];

[21:53] <flussence> rakudo: my @a := 1/1, { my $a = .denominator*10; ($a-1)/$a } ... *; say ~@a[^5];

[21:53] <p6eval> rakudo : OUTPUT«1 0.9 0.99 0.999 0.9999␤»

[21:54] <flussence> .oO( if ( Perl6.parse($irc) ) { eval_anyway } )

[21:54] <lue> .oO(Apparently '...' doesn't quite detect all geometric sequences then...)

[21:54] <flussence> isn't that a continued fraction?

[21:55] <flussence> or something not-quite-geometric...

[21:56] <lue> I guess maybe I put the 1 in by mistake.

[21:56] <lue> my @a := 0, .9, .99 ... *; say @a[^5];

[21:56] <lue> rakudo: my @a := 0, .9, .99 ... *; say @a[^5];

[21:56] <p6eval> rakudo : OUTPUT«Method 'count' not found for invocant of class 'Failure'␤  in <anon> at line 835:CORE.setting␤  in 'List::at_pos' at line 1␤  in 'Any::postcircumfix:<[ ]>' at line 1742:CORE.setting␤  in <anon> at line 1␤  in 'Any::postcircumfix:<[ ]>' at line 1␤  in main program body at line 1␤»

[21:57] <colomon> Neither one of those is a geometric sequence.

[21:57] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_io_tablet

[21:57] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[21:58] <colomon> mind you, I'm thinking those errors are incorrect.

[21:58] <lue> well, I know .999... is the sum of an infinite geometric sequence /me refreshes on his knowledge

[21:59] <colomon> .999.... is just 1

[22:00] <flussence> would be nice if it was smart enough to print Failure.exception along with those Failure.$method errors...

[22:00] <colomon> I suppose you can say it's .5 + .25 + .125, which is the sum of a geometric sequence.

[22:03] <colomon> flussence: I think it's a hole in the spec, actually.  It's not clear what happens if you give three numbers and they are neither an arithmetic or a geometric sequence.

[22:03] <colomon> I believe it used to specify that it defaulted to .succ

[22:03] *** masonkramer joined
[22:03] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_io_tablet

[22:03] <colomon> Certainly that's how it used to be implemented.

[22:08] <lue> oh, silly me, I see where I goofed up.

[22:09] <lue> rakudo: my @a := 0, .9, .09 ... *; say @a[^5];

[22:09] <p6eval> rakudo : OUTPUT«Method 'count' not found for invocant of class 'Failure'␤  in <anon> at line 835:CORE.setting␤  in 'List::at_pos' at line 1␤  in 'Any::postcircumfix:<[ ]>' at line 1742:CORE.setting␤  in <anon> at line 1␤  in 'Any::postcircumfix:<[ ]>' at line 1␤  in main program body at line 1␤»

[22:09] <lue> rakudo: my @a := 1, .9, .09 ... *; say @a[^5];

[22:09] <p6eval> rakudo : OUTPUT«Method 'count' not found for invocant of class 'Failure'␤  in <anon> at line 835:CORE.setting␤  in 'List::at_pos' at line 1␤  in 'Any::postcircumfix:<[ ]>' at line 1742:CORE.setting␤  in <anon> at line 1␤  in 'Any::postcircumfix:<[ ]>' at line 1␤  in main program body at line 1␤»

[22:10] <colomon> If your geometric series starts with 1 & .9, then the next in the sequence is

[22:10] <colomon> rakudo: say .9 * .9

[22:10] <p6eval> rakudo : OUTPUT«0.81␤»

[22:10] <colomon> rakudo: say (1, .9, .81 ... *)[^5].perl

[22:10] <p6eval> rakudo : OUTPUT«(1, 9/10, 81/100, 729/1000, 6561/10000)␤»

[22:11] <colomon> It's impossible to have a geometric sequence starting with 0.

[22:11] <lichtkind> is neutro successor of proto?

[22:11] <lue> colomon++ for his post, because it's reminds me I need to review geometric/arithemic sequences and such :)

[22:11] <colomon> lichtkind: parallel evolution

[22:11] <flussence> is it just my IRC session lagging, or is p6eval a *lot* faster than it used to be?

[22:11] <lichtkind> thanks

[22:12] <diakopter> flussence: dunno

[22:12] <diakopter> rakudo: say (1, .9, .81 ... *)[^5].perl

[22:12] <p6eval> rakudo : OUTPUT«(1, 9/10, 81/100, 729/1000, 6561/10000)␤»

[22:12] <colomon> lichtkind: but last time I checked, neutro worked and proto didn't.  But masak++ might have fixed proto in November.

[22:13] * moritz_ doubts it

[22:14] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[22:17] *** lumi_ joined
[22:17] *** lumi_ left
[22:19] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_io_tablet

[22:25] *** lamstyle left
[22:26] *** ch3ck3r joined
[22:28] *** rindolf left
[22:31] *** ch3ck left
[22:33] <lichtkind> moritz_: thanks for calendar texts 

[22:33] <moritz_> lichtkind: you're welcome

[22:34] *** lamstyle joined
[22:34] <moritz_> the one from yesterday was really by tadzik++, but i published it

[22:34] <moritz_> and I didn't find an option to attribute it to tadzik in tha wordpress admin interface

[22:40] <moritz_> post for tomorrow scheduled

[22:40] * moritz_ can go to sleep now :-)

[22:46] <diakopter> moritz_: o/

[22:46] <jnthn> moritz_: night

[22:46] <sorear> good * #perl6

[22:48] <dalek> 6model: 8fbb45c | diakopter++ | dotnet/compiler/ (3 files):

[22:48] <dalek> 6model: [dotnet] a descriptive commit message.  some changes/additions.

[22:48] <dalek> 6model: review: https://github.com/jnthn/6model/commit/8fbb45ce0e

[22:48] <dalek> 6model: 512cfdb | diakopter++ | / (4 files):

[22:48] <dalek> 6model: Merge branch 'master' of github.com:jnthn/6model

[22:48] <dalek> 6model: review: https://github.com/jnthn/6model/commit/512cfdb91e

[22:50] <lichtkind> good night

[22:50] <diakopter> 'nite

[22:51] <moritz_> (not quite in bed yet) diakopter, jnthn, sorear: feel free to claim slots in https://github.com/perl6/mu/blob/master/misc/perl6advent-2010/schedule

[23:00] <diakopter> I really should write one

[23:00] <diakopter> :(

[23:01] <diakopter> of the 25 last year's advent articles, how many are more targeted toward Perl 5 users than non-Perl 5 users, and vice versa?

[23:03] *** zb joined
[23:04] <lue> .oO(I'm going to claim a spot for teaching Temporal, when I get some practice with it.)

[23:23] *** kst left
[23:24] *** kst joined
[23:34] *** _kaare left
[23:37] <diakopter> in Soviet Russia, Chuck Norris makes Chuck Norris jokes about YOU.

[23:39] <dalek> 6model: 903fb1c | jonathan++ | dotnet/compiler/DNST (2 files):

[23:39] <dalek> 6model: [dotnet] Enhance DNST::Local so it will be able to play the role of DNST::Temp also.

[23:39] <dalek> 6model: review: https://github.com/jnthn/6model/commit/903fb1cf63

[23:39] <dalek> 6model: 2bb3773 | jonathan++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[23:39] <dalek> 6model: [dotnet] First couple of Temp => Local switches. Seems to work.

[23:39] <dalek> 6model: review: https://github.com/jnthn/6model/commit/2bb37732a5

[23:50] <dalek> 6model: a5467eb | jonathan++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[23:50] <dalek> 6model: [dotnet] Another batch of Temp => Local.

[23:50] <dalek> 6model: review: https://github.com/jnthn/6model/commit/a5467eb4ec

[23:57] *** mberends joined
[23:57] *** justatheory joined
[23:59] <dalek> 6model: 45d5376 | jonathan++ | dotnet/compiler/PAST2DNSTCompiler.pm:

[23:59] <dalek> 6model: [dotnet] Eliminate DNST::Temp usage completely from PAST2DNST.

[23:59] <dalek> 6model: review: https://github.com/jnthn/6model/commit/45d53769f5

[23:59] <dalek> 6model: cd7a4ff | jonathan++ | dotnet/compiler/DNST (2 files):

[23:59] <dalek> 6model: [dotnet] Eliminate DNST::Temp.

[23:59] <dalek> 6model: review: https://github.com/jnthn/6model/commit/cd7a4ff529

