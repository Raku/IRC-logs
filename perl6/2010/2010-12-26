[00:07] *** M_o_C left
[00:10] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[00:13] <sjn> whoa

[00:14] *** nadim left
[00:15] *** soroush joined
[00:16] *** shi joined
[16:39] *** ilogger2 joined
[16:39] *** ChanServ sets mode: +v ilogger2

[16:41] <pat_is_learning_> I personally liked http://www.youtube.com/view_play_list?p=C1B0B36F1196AF53 this playlist

[16:41] <pat_is_learning_> but I'm also kind of new to perl6, maybe there's something better out there

[16:45] <arcus> rakudo: say "hello"

[16:45] <p6eval> rakudo cae7f9: OUTPUT«hello␤»

[16:48] *** cotto joined
[16:48] <pat_is_learning_> what does «Null PMC access» in type() mean?

[16:50] <flussence> usually that someone needs to write a better error message there :)

[16:51] *** am0c joined
[16:54] *** MayDaniel joined
[16:56] *** am0c left
[16:57] <pumphaus> rakudo: print "Hello"

[16:57] <p6eval> rakudo cae7f9: OUTPUT«Hello»

[17:00] *** am0c joined
[17:06] <colomon> flussence: actually, "Null PMC access" means something is REALLY broken.

[17:10] <flussence> in my experience, it means I'm making some stupid and obvious mistake...

[17:13] <tadzik> it's rather like a segfault, but in Rakudo, ko?

[17:13] <tadzik> s/ko/no/

[17:13] <flussence> K.O.!

[17:15] <allbery_b> segfault in the prrot virtual machine

[17:15] <allbery_b> parrot even

[17:15] <allbery_b> some PIR did the equivalent of reading *((char *) 0)

[17:15] <arnsholt> Yeah, null PMC is essentially Parrot's NULL pointer

[17:16] <tadzik> that's what I thought

[17:16] <flussence> I got quite a lot of them when messing around with zavolaj

[17:16] <tadzik> :)

[17:17] <flussence> (and actual null-deref segfaults, too)

[17:17] *** sftp joined
[17:24] *** shabble joined
[17:26] <tadzik> when is star coming out?

[17:27] <flussence> in time for new year's day

[17:34] <colomon> \o/

[17:36] <tadzik> just read a 7th Dec #phasers, about moving a Rakudo development from place. Would it be hard to create a TODO list with knowlegde prerequisites for each thing? Or dividing it into subtasks, so it'd be easier to pick up for newbies like me :)

[17:39] <tadzik> Really important items – 1 ?     module installer

[17:39] <tadzik> hrm

[17:43] *** justatheory joined
[17:43] <tadzik> 2 ?     other S02 data types -- KeySet, KeyBag (A) – that souds doable

[17:46] <tadzik> colomon: got a while?

[17:49] <colomon> not exactly, but if you ask, I'll try to answer.

[17:50] <colomon> (computer set up in kitchen, working on cooking and cleaning)

[17:51] <tadzik> oh. I'd like to try implementing KeyHash for Rakudo, and I think whether inheriting from Hash is a right thing. According to my poor spec knowledge it shold do Associative, but my first (maybe wrong) thought is making it a special king of Hash

[17:51] <tadzik> s/king/kind/

[17:53] <colomon> my inclination is that's not the right approach -- violates liskov

[17:54] <colomon> my second inclination is to think I'm actually thinking of KeyBag, and I need to check the spec.

[17:54] <tadzik> liskov?

[17:55] <colomon> might be spelled wrong.

[17:55] <tadzik> KeyHash is a Hash that "nulls" a value when set to a default value

[17:55] *** icwiener joined
[17:55] <colomon> If A is a B, then you should be able to use A wherever you use B.

[17:55] <colomon> may be spelled wrong.

[17:56] <colomon> http://en.wikipedia.org/wiki/Liskov_substitution_principle

[17:57] <tadzik> ah, sure

[17:57] <colomon> I suspect they should be related classes,  but neither derived from the other.

[17:57] <colomon> but I certainly haven't looked closely into it!

[17:58] <tadzik> so, question for the insiders: Hash is EnumMap, not only does Associative. What is an EnumMap? Should KeyHash be an EnumMap too?

[18:04] *** Pacosani joined
[18:05] <tadzik> also, I'd feel glad to know what the user is trying to store when he/she is trying to store. Would that require some lowlevel mangling or what? I'd love some tips/guidance

[18:14] *** dsp_ joined
[18:15] *** vastak joined
[18:18] <colomon> tadzik: apologies that I don't have a better quick grasp on the different Associative types.

[18:19] <tadzik> colomon: no problem

[18:20] <colomon> at a quick notion: it might be better to make a quick and dirty module which provides the various Key types, just so that we can get some experience using them.

[18:21] <pat_is_learning_> rakudo: say .(3,1) given { $^a > 2 ?? &?ROUTINE($^a-1, $^b*$^a) !! $^b}

[18:21] <p6eval> rakudo cae7f9: OUTPUT«Could not find sub &?ROUTINE␤  in <anon> at line 22:/tmp/5KUgq6tfMo␤  in main program body at line 22:/tmp/5KUgq6tfMo␤»

[18:21] <pat_is_learning_> ??

[18:21] <pat_is_learning_> pugs: say .(3,1) given { $^a > 2 ?? &?ROUTINE($^a-1, $^b*$^a) !! $^b}

[18:21] <p6eval> pugs: OUTPUT«(timeout)»

[18:22] <tadzik> colomon: that's what I thought about, yet I have no luck locating any place in rakudo code when a value is assigned to a key in a hash, and that's what KeyHash needs to look into

[18:23] <colomon> tadzik: for a quick and dirty implementation, I might make it so KeyHash has Hash, rather than is.

[18:25] <tadzik> colomon: that would be the easiest one, yes

[18:28] <tadzik> but I still don't know what actually happens when someone does an assignment on a hash element: what gets called, what can I inspect

[18:29] *** niella joined
[18:29] *** niella left
[18:29] *** niella joined
[18:43] <tadzik> pugs: my $a is KeyHash; say $a.WHAT

[18:43] <p6eval> pugs: OUTPUT«Scalar␤»

[18:43] <tadzik> pugs: my $a is KeyHash = a => 5; say $a.WHAT

[18:43] <p6eval> pugs: OUTPUT«Pair␤»

[18:44] <tadzik> oh you

[18:44] <tadzik> pugs: my $a is KeyHash = a => 5, b => 7; say $a.WHAT

[18:44] <p6eval> pugs: OUTPUT«Pair␤»

[18:48] <tadzik> http://wklej.org/id/444886/ -- why is it so dead silent? It could at least crash, or something

[18:53] <flussence> the second "role KeyHash" defines that to the end of the file, put {}s after it (which will make it a lot more error-y)

[18:55] <tadzik> oh, ok

[18:55] <tadzik> so how do I create a "prototype" of this role, so the below line would know it's about ints?

[19:05] *** alyx joined
[19:10] *** Pacosani left
[19:20] *** Pacosani joined
[19:37] *** Psyche^ joined
[19:37] *** Psyche^ is now known as Patterner

[19:39] *** niella left
[19:48] <tadzik> quick offtopic survey for linuxers: which distro do you use?

[19:52] <alyx> tadzik: slackware on laptop, alpine everywhere else.

[19:53] <flussence> gentoo at home, ubuntu at $dayjob

[19:55] <flussence> ...and I got a printer yesterday, which means I have to reinstall everything with cups support :(

[19:55] <alyx> flussence: ouch O_o

[19:56] <tadzik> oh, I remember why I I lived Dentoo :)

[19:56] <flussence> "8 reinstalls"... oh well, not so bad.

[19:57] *** Axius joined
[19:57] <tadzik> erm, loved gentoo

[19:57] <tadzik> typing colemak is hard with a lad

[20:04] <tadzik> flussence: is no one caring about Parrot and Rakudo on Gentoo?

[20:07] <flussence> afaik, one of the devs wrote the ebuilds, but they don't bother updating them

[20:10] *** Axius left
[20:11] <flussence> (wait a minute, this printer takes sd cards. I don't even need to mess with my PC)

[20:11] <tadzik> oh come on! :)

[20:11] <flussence> yeah, I'm cheating a bit, but it's a kodak and from what I've been reading, they pretend Linux doesn't exist.

[20:12] <flussence> so I'll humour them

[20:12] <tadzik> :)

[20:16] *** Axius joined
[20:29] *** M_o_C joined
[20:29] *** Pacosani left
[20:37] *** born2frag joined
[20:49] *** am0c left
[20:51] *** masak joined
[20:52] <masak> hi, zebras.

[20:52] <tadzik> hi giraffe

[20:52] <masak> :)

[20:52] *** vastak left
[20:52] <masak> well, I do tend to stick my neck out...

[20:53] <masak> I made a blog post: http://strangelyconsistent.org/blog/im-doing-science-and-im-still-alive

[20:53] <tadzik> want to try touching KeyHash with me?

[20:53] <tadzik> I made some pityful trials

[20:54] <masak> I saw you had some questions about those things in the backlog.

[20:54] <masak> I'll be happy to share what little I've been able to figger out myself about it. :)

[20:55] <masak> don't be surprised if my connection fails though. I'm on a bus again.

[20:55] <masak> an EnumMap is a map of Enum objects. an Enum object is the smallest constituent of an enumeration: a key and a value.

[20:56] <masak> the big difference between an Enum and a Pair is that the latter's value is read-write.

[20:56] <masak> correspondingly, a Hash can have its values changed.

[20:59] <tadzik> but Hash is not just a bunch of Pairs

[21:00] *** coldhead joined
[21:00] <masak> be careful with that word, "is" :)

[21:01] <masak> there's a whole movement called E-Prime which strives to speak without the word "is" in its different forms. it sits at the bottom of a number of misunderstandings and logical errors, they maintain.

[21:02] <masak> a Hash can be thought of as a collection of unique-key Pairs. unless I missed something.

[21:03] <tadzik> well, the point is not being a list, O(1) access and stuff

[21:03] <masak> I didn't say it's a list.

[21:03] <masak> even you said "bunch". :)

[21:03] <tadzik> :)

[21:03] <tadzik> alright

[21:04] <masak> but anyway, having Hash derive from EnumMap always surprised me slightly.

[21:04] <masak> I kinda-sorta see why, with Hash being a read-write version of EnumMap.

[21:04] <masak> but to me, that's not a particularly overwhelming reason to derive stuff.

[21:08] *** masak` joined
[21:08] <masak`> dropped out. now I'm here again.

[21:08] <masak`> seems to me a KeyHash[::T] is a variant of a Hash, one that erases the differences between non-existent keys and keys with the default value of ::T.

[21:09] <tadzik> I thought alike

[21:09] <masak`> and then you essentially get KeySet and KeyBag for free, it seems.

[21:11] *** masak left
[21:11] *** masak` is now known as masak

[21:12] <masak> S32/Containers:1058: role KeyHash[::T, $default = Any]

[21:12] <masak> this seems wrongish to me.

[21:12] <masak> better would be to have type ::T know its default. it'll need to, anyway.

[21:13] *** Axius left
[21:14] *** masak` joined
[21:14] <tadzik> that mislead me too

[21:15] <masak`> I'm glad we seem to be following the same path here :)

[21:15] <masak`> 'course, S32 is hardly normative. :P

[21:16] <masak`> so maybe this is a good time to exercise good judgment and ignore or even change it.

[21:16] <masak`> imagine instantiating a KeyHash[Int]. it'll fail as soon as it tries to store an Any in an Int slot.

[21:17] <masak`> or a KeyHash[Int, "OH HAI"]. not too useful either.

[21:17] <tadzik> hmm

[21:17] *** M_o_C left
[21:18] *** masak left
[21:18] *** Pacosani joined
[21:20] *** masak`` joined
[21:20] *** masak`` is now known as masak

[21:20] <masak> the design, seems to me, is well-intended, but too complicated.

[21:20] <masak> role KeyHash[::T] would be better.

[21:22] <tadzik> so what would default be?

[21:22] <masak> it seems to me that formalizing what is meant by a "default" for all the built-in types would be useful, too.

[21:22] *** masak` left
[21:22] <tadzik> nothing by default?:)

[21:22] <masak> for Int it's 0, for Str it's "", for Bool it's False...

[21:22] <masak> we take this for granted, but it's nowhere in the spec.

[21:22] *** risou joined
[21:22] <masak> what's the default for a user-defined enumeration?

[21:23] <masak> the default for a user-defined class is probably the type object.

[21:23] *** masak` joined
[21:24] <masak`> but it's not for Int, which makes Int different somehow. and if it's different, it's different for a *reason*, for example because it's been stated explicitly somewhere in Int's definition.

[21:24] <tadzik> masak`: "0" is false too

[21:24] <masak`> rakudo: say ?"0"

[21:24] <p6eval> rakudo cae7f9: OUTPUT«Bool::False␤»

[21:25] *** masak`` joined
[21:25] <tadzik> that's what broke the same idea in my mind too :)

[21:25] <masak``> but I still think "" is the default for Str, not "0".

[21:27] *** masak left
[21:29] *** masak` left
[21:30] *** jhuni joined
[21:30] *** masak joined
[21:30] <masak> so, anyway.

[21:31] <arnsholt> masak: Interestingly, I find science to be just as much right-brain as left =)

[21:31] <masak> I can't argue *against* "0" being the default for Str, except that it "feels wrong".

[21:31] <masak> arnsholt: yes, I wrote it that way partly to provoke.

[21:32] *** masak`` left
[21:32] <tadzik> masak: I had the same feeling. Just "Pass a false value to erase won't work now"

[21:32] <masak> compared to being disciplined and following a TOTE cycle, science is a fairly unregulated activity. even if it, too, has a goal in mind.

[21:33] <pmurias> masak: i noticed you started submiting bugs for niecza, what's your experience of using niecza so far?

[21:33] *** y3llow_ joined
[21:33] <masak> tadzik: one current limitation of Hash in Rakudo is that they can only have Str keys.

[21:33] *** pothos_ joined
[21:33] <masak> pmurias: after the initial surprise at how far along it is, I'm delighted by being obstructed so much. :)

[21:34] <masak> haven't felt that with Rakudo since the alpha->ng transition, and even it was just a weak shadow of Rakudo in 2008.

[21:34] <tadzik> masak: oh, so we have it easier now :)

[21:34] *** y3llow_ is now known as y3llow

[21:34] <masak> boy. yes.

[21:35] <tadzik> a'right

[21:35] *** pothos_ is now known as pothos

[21:35] <masak> pmurias: example: found niecza didn't have any .split method. meant to make a small one myself with .index. found niecza didn't have .index either. ended up using ~~

[21:35] <pmurias> masak: and speed wise how does it compare?

[21:36] <masak> it's faster.

[21:36] <masak> which is refreshing.

[21:36] <masak> the parse phase is slow, though.

[21:36] <tadzik> but but. I copied all the Hash code into a new class, then I was trying to locate some method that sets the value so I'd be able to set a trap inside, but I couldn't find any

[21:38] <masak> rakudo: my $a = 3; $a &&= 4; say $a

[21:38] <p6eval> rakudo cae7f9: OUTPUT«4␤»

[21:39] <masak> tadzik: do it again, but simpler this time :)

[21:39] <tadzik> even simplier?

[21:39] <masak> yes.

[21:40] <tadzik> I tried to assign a "die" so it'd print a backtrace, but it didn't

[21:40] <masak> the smallest part of functionality you can think of, in the most controlled conditions you can think of.

[21:40] <masak> which for me is usually a one-liner on the terminal, but YMMV.

[21:41] <masak> hm. need to start packing up. almost at my destination now.

[21:42] <masak> see you on a more stable connection, #perl6.

[21:42] *** masak left
[21:42] <tadzik> oh look, his connection died again!

[21:43] <pmurias> what is the repo for the synopsis?

[21:46] <diakopter> perl6/specs

[21:50] <pmurias> thanks

[22:06] <lue> howdy #perl6

[22:28] *** shi joined
[22:32] <dalek> book: 738eb39 | (Przemysław Wesołek)++ | bin/book-to-latex:

[22:32] <dalek> book: TT sends output to STDOUT, removed extra print().

[22:32] <dalek> book: review: https://github.com/perl6/book/commit/738eb3979b

[22:43] *** vastak joined
[22:59] *** am0c joined
[23:02] <lue> how do you negate in a perl6 regex? Things like \S, except with a named regex (things like <snowman>)

[23:12] <lue> nvm, found it.

[23:12] *** Bucciarati is now known as Buccia`27C3

[23:12] <tadzik> so how? :)

[23:13] *** ggoebel joined
[23:15] <lue> with <-alpha> ( <!alpha> is counterintuitively not the solution )

[23:21] <dalek> book: c696fe7 | (Przemysław Wesołek)++ | lib/book.sty:

[23:21] <dalek> book: Added missing TeX dimension.

[23:21] <dalek> book: review: https://github.com/perl6/book/commit/c696fe7234

[23:24] *** ggoebel left
[23:25] <dalek> sprixel: 1e39860 | diakopter++ | / (14 files):

[23:25] <dalek> sprixel: sprixel/perlesque WIP commit

[23:25] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/1e39860ef3

[23:39] *** araujo joined
[23:39] *** araujo left
[23:39] *** araujo joined
[23:55] *** masak joined
[23:55] <masak> oh hai from a more stationary point of view ;)

[23:55] <masak> I find this Twitter exchange a relative success: http://twitter.com/sotechx/status/18477993152217088 http://twitter.com/carlmasak/status/18698308276981760 http://twitter.com/sotechx/status/18716138187792384 http://twitter.com/carlmasak/status/19019726873169920 http://twitter.com/sotechx/status/19039233339559936

[23:56] <masak> sometimes all people really want is straight answers.

[23:56] *** ggoebel joined
[23:58] *** [Coke] joined
