[00:02] *** f00li5h is now known as F00LI5H

[00:06] *** justatheory left
[00:14] *** simcop2387 is now known as SIMCOP2387

[00:18] *** araujo left
[00:22] <SpiceMan> has anyone noticed how *horrible* planetsix.perl.org renders on IE ?

[00:24] *** Schwern joined
[00:25] <flussence> the markup on that page is... ironic

[00:26] *** Util_ left
[00:26] *** Util joined
[00:27] <SpiceMan> ironic? is that the aim ? to look horrible on IE and ok in other browsers?

[00:27] <SpiceMan> (just ok, nothing great :P)

[00:27] <flussence> looking at the source, I'm amazed it renders at all...

[00:28] *** Schwern left
[00:40] *** araujo joined
[00:41] *** envi joined
[00:43] *** stkowski left
[00:47] *** justatheory joined
[00:52] *** Schwern joined
[00:55] *** stkowski joined
[01:00] *** QinGW joined
[01:16] *** _twitch left
[01:19] *** Entonian left
[01:24] <PerlJam>  Is there a time-lag for p6c?  Or a moderation bit set or something?

[01:28] *** meppl joined
[01:29] *** earth joined
[01:31] *** earth left
[01:45] *** higmotherQ joined
[01:47] *** higmotherQ left
[01:47] *** stkowski left
[01:49] *** d4l3k_ joined
[01:50] *** dalek left
[01:50] *** lestrrat left
[01:50] *** lestrrat joined
[01:50] *** wooden left
[01:51] *** larsen left
[01:51] *** ironcamel left
[01:51] *** d4l3k_ is now known as dalek

[01:51] *** ChanServ sets mode: +v dalek

[01:51] *** \xF0_ left
[01:52] *** betterworld left
[01:52] *** ironcamel joined
[01:52] *** mathw joined
[01:52] *** betterworld joined
[01:52] *** wooden joined
[01:58] *** whiteknight left
[02:00] *** larsen joined
[02:00] *** \xF0 joined
[02:01] *** _twitch joined
[02:05] *** stkowski joined
[02:05] *** stkowski left
[02:06] *** zostay left
[02:07] *** zostay joined
[02:16] *** zostay left
[02:17] *** zostay joined
[02:18] *** alester joined
[02:20] *** wolfman2000 joined
[02:20] *** Viper550 joined
[02:20] <Viper550> perl6?

[02:20] <wolfman2000> Evening. ...man, masak isn't here. drat.

[02:21] <wolfman2000> Viper550: I occasionally check up on this room to see how Perl6 is coming along. I know some web framework code was in development, so I wanted to check up on that.

[02:21] <wolfman2000> However, the main person to speak to on that, masak, isn't around right now

[02:21] <Viper550> catalyst?

[02:21] <wolfman2000> That's Perl5

[02:21] <wolfman2000> And...I've had issues with catalyst in the past.

[02:21] <wolfman2000> More of them were on me than the framework, however

[02:22] *** ggoebel left
[02:27] <PerlJam> Perl 6 is coming along nicely  :)

[02:28] <PerlJam> Rakudo release #34 came out today.  A new Rakudo Star release is due next week.

[02:28] <wolfman2000> Any ETAs til...let me think of the term...well, a proper beta?

[02:29] *** masonkramer left
[02:29] <PerlJam> wolfman2000: I don't quite understand what that means.  What's "proper" to you may not be "proper" to me (or anyone else).

[02:29] <Util> wolfman2000: Perl 6 will not have traditional alpha/beta/release cycles.

[02:29] <wolfman2000> Util: Please remind me of the terminology meant for here

[02:31] * Util is up late with a cold; take the following with a *small* grain of salt.

[02:31] <wolfman2000> *nods*

[02:32] <Util> Each Rakudo release (not R Star) strives to be production quality, without being feature-complete.

[02:33] *** wormwood_ is now known as wormwood

[02:33] <Util> So, if you are able to sling some customizing, and everything that Rakudo currently *does* is the feature set you need, then R is "release quality"

[02:34] <Util> Rakudo Star adds "all parts included, no customizing skills needed" spit-and-polish.

[02:35] <Util> If you need part of the Perl 6 spec that Rakudo does not implement yet (like threading/concurrency), then to you, Rakudo is not even pre-alpha

[02:36] <wolfman2000> Is there...well, a checklist of sorts to see what has been implemented?

[02:36] <Util> If you need speed comparable to Perl 5, then Rakudo is not "release quality" for you.

[02:37] <Util> See perl6.org 

[02:37] <Util> The "synopsis" are really the Specs, and there are linked to test results for each section of the spec.

[02:37] <Util> Very cool

[02:38] <jasonmay> what is the equivalent of a 4-arg select (or IO::Select) in rakudo star?

[02:38] <wolfman2000> okay, these docs look a bit familiar.

[02:38] *** nymacro joined
[02:39] <Util> Looking at http://perlcabal.org/syn/S06.html#Named_arguments , and clicking on "S06-signature/named-parameters.t lines 112-132"

[02:39] *** SIMCOP2387 is now known as simcop287

[02:39] *** simcop287 is now known as simcop2387

[02:39] <wolfman2000> ...not implemented yet. parsefail

[02:39] <wolfman2000> so named_array isn't up

[02:40] <Util> Right! Thanks for saving me the typing!

[02:41] <wolfman2000> I have dabbled a bit in Perl 5 and 6 before...I can at least recognize some of the tests

[02:41] <Util> jasonmay: I don't know. Let me look at the spec

[02:43] <jasonmay> I guess I'm not too worried about non-blocking sockets for now

[02:43] <jasonmay> looks like I could just use IO::Socket::INET

[02:43] <jasonmay> wnated to try my hand at learning the language by making a small MUD :)

[02:44] <Util> jasonmay: Good, because [S32]/IO says that all forms of select() have been removed, but I do not see any mention of a replacement (like poll()).

[02:45] <Util> [S16] is the main IO spec, but it is not complete yet.

[02:46] <jasonmay> I really like how the IO stuff is set up internally

[02:46] <Util> jasonmay: If you built it, please let us know. You will have some performance/size issues in the short term, but things are improving each month.

[02:47] <Util> We only recently started looking at performance *at* *all*!

[02:48] <jasonmay> :)

[02:48] <Util> I have not poked around at the IO internals, but if they are anything like the rest of the system, they are beautiful.

[02:48] <colomon> rakudo: sub named_array(:@x) { +«@x }; say named_array(:x(3, "5", 4)).perl;

[02:48] <p6eval> rakudo : OUTPUT«[3, 5, 4]␤»

[02:50] <Util> wolfman2000, jasonmay, Viper550: dabblers should be aware of the new site: http://try.rakudo.org/ ; it has read-eval-print loop with multiline memory *in* the browser.

[02:56] <colomon> Util, wolfman2000: Actually, the parsefail message there is nonsense.  It parses just fine atm, but the tests have normal fails.  Most of the issue seems to be that the tests expect :x to be like @x = (), but rakudo treats it as @x = Bool::True.

[02:57] <wolfman2000> ...I wonder if an empty array/list is supposed to be true in this language

[02:57] <Util> colomon: thanks for the piece of mind; I grab that as a good example of something that worked, and typed before checking that it *did* work.

[02:58] <Viper550> me and wolfman2000 were trying to pick a scripting language for a new forum script

[02:59] <wolfman2000> Viper550: I don't think Perl 6 is ready for us yet

[02:59] <wolfman2000> It was worth a shot though. Some languages grow by leaps and bounds

[02:59] *** xinming left
[03:00] <Util> wolfman2000: empty array/list is false, like in Perl 5.

[03:00] <Viper550> he was trying to get me off doing it in php

[03:00] <colomon> I'm starting to suspect these tests are prehistoric

[03:00] <Util> perl6: my @a; my @b = 42; say "a" if @a; say "b" if @b;

[03:00] <p6eval> pugs, rakudo : OUTPUT«b␤»

[03:00] *** xinming joined
[03:01] <wolfman2000> Viper550: I can't do everything in PHP. There is more out there.

[03:01] <Util> perl6: my @a; say ?@a;

[03:01] <p6eval> rakudo : OUTPUT«Bool::False␤»

[03:01] <p6eval> ..pugs: OUTPUT«␤»

[03:01] <Viper550> I was running under an assumption that not every free web host out there is properly tuned to use scripting languages other than php

[03:02] <wolfman2000> Viper550: We may have to pay. Don't restrict yourself to free

[03:02] <Viper550> I'm trying to make this something that could be easily adopted by as many people as possible

[03:07] <dalek> roast: 600cd40 | colomon++ | S06-signature/named-parameters.t:

[03:07] <dalek> roast: Update fudging.

[03:07] <dalek> roast: review: http://github.com/perl6/roast/commit/600cd403e0be6b2703ffcec9f9ee31b3503a312d

[03:17] *** colomon_ joined
[03:17] *** colomon left
[03:17] *** colomon_ is now known as colomon

[03:22] *** meppel joined
[03:26] *** meppl left
[03:27] <Util> colomon++

[03:28] *** kiithroen joined
[03:29] *** kiithroen left
[03:29] *** kiithroen joined
[03:30] *** k joined
[03:30] *** k left
[03:43] *** mberends left
[03:43] *** meppel left
[03:43] *** meppl joined
[04:11] *** Lorn left
[04:12] *** Lorn joined
[04:27] *** wolfman2000 left
[04:40] <dalek> 6model: 23c1a95 | mberends++ | java/runtime/ (4 files):

[04:40] <dalek> 6model: [java/runtime] catch up to the new Exceptions and leave_block() developments in dotnet/runtime.  The java/compiler bits are now lagging farther behind though.

[04:40] <dalek> 6model: review: http://github.com/jnthn/6model/commit/23c1a95a78195b6ac66cb3ba05dc9b4c07f5d20e

[04:45] <dalek> 6model: c556af5 | mberends++ | java/runtime/Rakudo/Runtime/Exceptions/LeaveStackUnwinderException.java:

[04:45] <dalek> 6model: [java] forgot the all important LeaveStackUndwinderException

[04:45] <dalek> 6model: review: http://github.com/jnthn/6model/commit/c556af5e88deede02c3aac2a39de0c3f4f502bbc

[04:50] *** kjeldahl joined
[04:54] *** shelling_lab left
[05:00] *** QinGW1 joined
[05:00] *** Viper550 left
[05:00] *** QinGW left
[05:07] *** nsh_ left
[05:09] *** nsh joined
[05:09] *** nymacro left
[05:37] *** nymacro joined
[05:38] *** tadzik left
[05:39] *** justatheory left
[05:49] *** alester left
[05:53] <sorear> good * #perl6

[06:00] *** kjeldahl left
[06:32] *** shelling_lab joined
[06:37] *** zby_home_ joined
[06:47] *** rgrau joined
[06:55] *** am0c^ joined
[07:24] *** jfried joined
[07:32] <jnthn> oh morning

[07:33] *** pnu joined
[07:36] <sorear> hello jnthn 

[07:36] * jnthn digs into $dayjob...and wishes he could be hacking on NQP.NET instead :-)

[07:42] *** jaldhar left
[07:42] *** jaldhar joined
[08:10] *** nymacro left
[08:13] <dalek> niecza/master: d2f388d | sorear++ | / (3 files):

[08:13] <dalek> niecza/master: Start port of EXPR

[08:13] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/d2f388daa1dff26a36939d6495e296719e691345

[08:41] <mathw> Morning

[09:17] *** mavrc joined
[09:20] *** wtw left
[09:22] *** masak joined
[09:22] <masak> oh hai, #perl6!

[09:24] <colomon> o/

[09:24] *** dakkar joined
[09:25] <masak> TheDamian++ # p6l email with implementation details (even code!) in it

[09:25] *** [Sec] left
[09:26] <mathw> oh hai, masak

[09:26] <masak> saluton, mathw.

[09:26] <masak> \o, colomon.

[09:34] <moritz_> o/

[09:34] <jnthn> o/ masak

[09:35] <masak> \o \o

[09:36] <colomon> o/ o/ o/

[09:37] *** buubot left
[09:37] *** buu left
[09:38] *** buu joined
[09:42] *** buubot joined
[09:46] *** timbunce joined
[09:47] <jnthn> *sigh* A version control system that doesn't detect changes to version controlled files that are made outside of the IDE is...just broken. :|

[09:50] <masak> jnthn: which one?

[09:50] <colomon> woah, that's beyond broken and well into junk

[09:55] <jnthn> TFS

[09:55] <jnthn> Yes. We just wasted an hour on a build breakage stemming directly from this brokenness.

[10:05] *** QinGW1 left
[10:18] <colomon> interesting LTA error here.

[10:18] <colomon> ah, I see

[10:18] <colomon> "Too many positional parameters passed; got 2 but expected 1"

[10:18] <colomon> the problem was I left the ($/) off of my action method declaration.  

[10:19] <moritz_> well, why is it LTA?

[10:19] <colomon> I guess it does all make sense.

[10:19] <moritz_> (it could include that one of the two is the invocant)

[10:19] <colomon> moritz_: took me 30 minutes to figure out what was going on, for one thing.  :)

[10:20] <colomon> I think including that one of the two was the invocant would definitely have helped

[10:21] <colomon> I guess if I'd looked at the line number given, I'd have seen that it was 

[10:21] <colomon>     method rest {

[10:22] <colomon> if it had said 

[10:22] <colomon> at 'ABC::Actions::tuplet' at line 46:lib/ABC/Actions.pm

[10:22] <colomon> called from 'ABC::Grammar::tuplet' at line 41:lib/ABC/Grammar.pm

[10:23] <moritz_> it didn't include the name of the method that was being called?

[10:23] <colomon> (both lines actually started with "in ABC::")

[10:23] <moritz_> then it was LTA

[10:23] <colomon> it did include it

[10:23] <moritz_> rakudo: say 'b'.uc("f)

[10:23] <p6eval> rakudo : OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 22␤»

[10:23] <moritz_> rakudo: say 'b'.uc("f")

[10:23] <p6eval> rakudo : OUTPUT«No applicable candidates found to dispatch to for 'uc'. Available candidates are:␤:(Mu ;; *%_)␤␤  in main program body at line 22:/tmp/rSo3GvkQWL␤»

[10:23] <colomon> but there wasn't any indication that that was the problem

[10:23] <colomon> if that makes sense

[10:24] <colomon> rakudo: sub foo { say "foo"; }; foo(10)

[10:24] <p6eval> rakudo : OUTPUT«Too many positional parameters passed; got 1 but expected 0␤  in 'foo' at line 1:/tmp/2rBAkERPBB␤  in main program body at line 22:/tmp/2rBAkERPBB␤»

[10:24] <moritz_> rakudo: class A { method b() { } };A.new.b(3)

[10:24] <p6eval> rakudo : OUTPUT«Too many positional parameters passed; got 2 but expected 1␤  in 'A::b' at line 22:/tmp/Tt9D_Nj56N␤  in main program body at line 22:/tmp/Tt9D_Nj56N␤»

[10:24] <colomon> Like that

[10:24] <colomon> if it had had the "no applicable candidates" message, I'd have instantly figured it out

[10:24] *** am0c^ left
[10:25] <colomon> I dunno, maybe as I do more p6 hacking it will become obvious to me.

[10:25] <moritz_> well, if it didn't include the method name, it's a bug

[10:26] <colomon> but the message as is didn't make me think "the first line is the function it was trying to call"

[10:26] <colomon> it did include the method name, but it was as part of the backtrace

[10:27] <colomon> that made me think the problem was something called from there, not the calling of that method

[10:27] <moritz_> hm

[10:27] <colomon> all the information was definitely present

[10:27] <colomon> it's just the that form of it didn't point me at the answer

[10:28] <colomon> in the future I'll know better (I hope)

[10:28] <colomon> but that's why I say LTA.  :)

[10:28] <moritz_> feel free to submit

[10:29] <colomon> rakudo: class A { method b() { } };A.new.b(3)

[10:29] <p6eval> rakudo : OUTPUT«Too many positional parameters passed; got 2 but expected 1␤  in 'A::b' at line 22:/tmp/vIlWzJwEGo␤  in main program body at line 22:/tmp/vIlWzJwEGo␤»

[10:29] <colomon> rakudo: class A { multi method b() { } };A.new.b(3)

[10:29] <p6eval> rakudo : OUTPUT«No candidates found to invoke for method 'b' on object of type 'A'; available candidates have signatures:␤:(Mu ;; *%_)␤␤  in main program body at line 22:/tmp/aqKYTGOUSC␤»

[10:30] <colomon> what's the subject line to use for LTA error message in RT?

[10:31] *** guest__ joined
[10:35] *** tzhs joined
[10:43] <moritz_> colomon: LTA error for ...

[10:44] <masak> I agree about not mentioning the invocant in that error message being LTA.

[10:44] <masak> it feels like an FAQ, even.

[10:46] *** oyse joined
[10:47] <moritz_> masak: my vocabulary coach now keeps state, and removes any words from the current session if it has been answered 5 times correctly in a row

[10:47] <masak> \o/

[10:47] <masak> that corresponds approximately to what I used to do manually when studying 汉字

[10:48] <moritz_> when I do it manually with cards, I have three "generations"

[10:48] <moritz_> one I know so well that I don't have to think about; those I set aside

[10:48] <moritz_> then one generation where I'm reasonably certain, but it's pretty new (or little-used) knowledge

[10:48] <moritz_> and one generation with new or unknown words

[10:52] *** ggoebel joined
[10:53] <masak> that makes sense.

[10:54] <masak> automating such generational handling seems to me to be the benefit of doing this on a computer.

[10:56] * moritz_ has a hard time remembering that 'ski' in Norwegian is femal

[10:57] <moritz_> e

[10:59] *** ggoebel left
[11:00] <masak> in Swedish, not many thing nouns are female.

[11:01] <moritz_> well, my wife's family speaks a dialect where most nouns are male too

[11:01] <jnthn> masak: In Swedish there isn't really female gender now though? Just common and neutered?

[11:01] <jnthn> *neuter

[11:01] <masak> :P

[11:01] <moritz_> neutralized!

[11:02] <masak> right, we only have N and T genders, male and female being baked into the former.

[11:03] <jnthn> aye

[11:03] <jnthn> I guess there were three once?

[11:04] * jnthn wonders if it'll ever collapse into just a single gender with a few archaic things.

[11:04] <moritz_> "the" is very handy :-)

[11:04] *** ggoebel joined
[11:07] <moritz_> http://www.perlmonks.org/?node_id=866667 the answers are hilarious :-)

[11:08] *** pythonian4000afk is now known as pythonian4000

[11:10] <masak> jnthn: aye; Wikipedia says Old Swedish had three genders.

[11:10] <masak> masculine, feminine and neuter.

[11:10] <masak> so we didn't really lose one; we lost two and gained one.

[11:11] <masak> jnthn: wow, it looks complicated! http://en.wikipedia.org/wiki/Old_Swedish#Early_Old_Swedish_2

[11:12] <masak> almost like Slovak or something...

[11:16] *** am0c joined
[11:18] <jnthn> Damm, why'd you have to change it :P

[11:19] <masak> I guess we had to bring Swedish closer to the IKEA ideal of simplicity.

[11:20] <jnthn> I guess it does make assembling sentences easier. :P

[11:20] <jnthn> meh, lamers

[11:20] <jnthn> Only four cases!

[11:20] <jnthn> Even in old Swedish.

[11:20] <jnthn> :-)

[11:20] <masak> :)

[11:20] <jnthn> Slovak had six. :-)

[11:20] <jnthn> *has

[11:21] <masak> I think we've never been big believers in cases.

[11:21] <masak> OTOH, the four we had, we really used to the fullest.

[11:22] <jnthn> I fully concede that dropping them makes the langauge easier to learn. :-)

[11:22] <masak> there's a waterbed thing going on between cases and prepositions. arguably, the latter is easier for foreigners to learn.

[11:23] <jnthn> A word is, for most people, much easier than a set of rules.

[11:24] <jnthn> And anyway, many uses of case in Slovak were tied to the preoposition too.

[11:24] <jnthn> "If you use this prep, but teh following noun into the X case"

[11:25] <masak> right. and sometimes one prep can go with many cases.

[11:26] <masak> it's a bit like a named parameter accepting different types, through several defined multies.

[11:26] <masak> multis*

[11:26] <jnthn> :-)

[11:26] <masak> see, we're almost not off-topic at all! :P

[11:26] <jnthn> Oddly, I seem to quite naturally find myself considering them two prepositions that happen to have the same spelling.

[11:26] <masak> huh. interesting.

[11:27] <jnthn> It's still more interesting that debating the differences between compilers and interpreters. :P

[11:27] <masak> I don't, but that's probably because I don't speak any such languages. not even German.

[11:29] *** kiithroen left
[11:56] <takadonet> morning all

[11:56] <masak> takadonet: morning!

[11:56] <masak> how are things in Canada?

[11:58] <takadonet> masak: getting colder but good. Probably doing a presentation on Perl6 and rakudo for my lab next friday

[11:58] <masak> \o/

[11:58] <masak> getting colder here too.

[12:00] <Juerd> Here too

[12:00] <masak> "Winter is coming." -- Stark family motto

[12:00] <Juerd> I might turn on the heating one of these days

[12:01] <masak> I might go shopping for long johns one of these days.

[12:03] * jnthn started wearing a jumper today

[12:03] <jnthn> Bit warm in the office, but cold enough outside by now to appreciate it.

[12:05] <Juerd> Wanna trade some warmth?

[12:05] <Juerd> It's cold in my office

[12:06] <jnthn> In theory, the law of thermodynamics takes care of this... :-)

[12:08] <masak> and don't anyone dare about the second law working too slowly! :)

[12:08] <masak> s/dare/dare complain/

[12:09] <Juerd> Hmmm

[12:10] <jnthn> It'd make a change from compaling about Rakudo working too slowly. ;-)

[12:10] <jnthn> er, complaining

[12:11] <masak> I hope Rakudo gets fast before I tire of complaining that Rakudo is slow.

[12:11] <masak> oh wait.

[12:11] <masak> yes, that makes sense.

[12:14] <takadonet> Rakudo really does need to speed up :)

[12:15] <takadonet> I can almost see the bytes change!

[12:15] <moritz_> jnthn++ is working on it

[12:15] <takadonet> i know :)

[12:15] <masak> and chromatic++

[12:15] <takadonet> patience....

[12:15] <masak> Rakudo needs to get faster faster! :P

[12:16] <jnthn> It just turns out that the two stratergies I'm concurrently working on for big wins are both big tasks.

[12:16] *** MayDaniel joined
[12:17] <jnthn> There's not really an incremental way to swap out either a meta-model implementation or a VM. :-)

[12:17] <takadonet> jnthn: and when they are done, the reward will be awesome!

[12:17] <masak> (hopefully)

[12:17] <takadonet> masak: no hopefully!

[12:18] <masak> by all means. put your expectations on the top shelf. I won't stop you. :)

[12:22] <oyse> Have the internal implementation of objects changed in Rakudo recently. I get a the following error when running the 02eval.t tests for blizkost: "Can't call method "HOW" without a package or object reference."

[12:22] <oyse> s/recently./recently?/

[12:29] <jnthn> Not so far as I know.

[12:29] <jnthn> I havne't been working on Rakudo master of late really

[12:29] <jnthn> And don't think anyone else will have done deep object model changes.

[12:32] <oyse> jnthn: Do you know if the 02eval.t ever worked? I can't remember if I have gotten it to run before.

[12:32] *** lamstyle left
[12:32] *** MayDaniel left
[12:35] *** lamstyle joined
[12:36] <jnthn> oyse: Don't know, sorry.

[12:36] <jnthn> sorear may know

[12:36] *** bluescreen joined
[12:37] <oyse> Ok. Thanks anyway

[12:42] *** alester joined
[13:02] *** am0c left
[13:09] *** alaun joined
[13:09] *** wamba joined
[13:15] <masak> people! this is a pre-announcement!

[13:15] <masak> on December 10th, I will make an announcement of some sort!

[13:15] <jnthn> Oooooh

[13:16] <takadonet> !!!!

[13:16] <masak> it will be a kind of "event", in which one can "participate".

[13:16] * jnthn marks the data in his calendar

[13:16] <masak> stay tuned. :)

[13:16] <takadonet> about perl6?

[13:16] <jnthn> BEER FESTIVAL!

[13:16] <takadonet> !!!

[13:16] <masak> takadonet: I'm not at liberty to say... but yes, about Perl 6.

[13:16] <jnthn> Aww. :-)

[13:16] <masak> jnthn: you'll be able to drink beer during, I'm sure. :)

[13:16] <jnthn> \o/

[13:17] * masak goes to pre-announce on Twitter, too

[13:18] <frettled> masak: I have a suspicion that you may have seen an episode or three of The Daily Show.  :)

[13:19] <masak> frettled: :)

[13:19] *** Patterner left
[13:19] * masak likes that show

[13:19] * frettled too.

[13:19] <moritz_> really old, but nice obfu (p5): http://www.perlmonks.org/?node_id=336462

[13:22] *** itz joined
[13:23] *** alester left
[13:26] *** chturne left
[13:27] *** chturne joined
[13:31] *** Psyche^ joined
[13:31] *** Psyche^ is now known as Patterner

[13:32] *** tzhs left
[13:35] *** Schwern left
[13:35] *** mkramer joined
[13:41] <masak> speaking of events; will there be a Perl 6 Advent Calendar this year as well?

[13:42] *** IRSeekBot joined
[13:42] <PerlJam> masak: I vote yes!

[13:42] <colomon> yes!

[13:42] <masak> is there something that would make it worthwhile for people who were faithful readers last year?

[13:42] <masak> (while not reducing the value for those who are tuning in this year)

[13:43] <PerlJam> masak: more Perly Goodness?

[13:43] <colomon> I assumed we'd cover different topics

[13:43] <colomon> or at least, different takes on topics

[13:43] <PerlJam> right.

[13:43] <masak> so, a repeat of last year, but with different topics.

[13:43] <mkramer> what is C<$thing>?

[13:44] <PerlJam> mkramer: a scalar?  Are you asking about the C<> notation?

[13:44] <masak> mkramer: could you give some more context?

[13:44] <mkramer> I'd be stoked for an advent calendar

[13:44] <mkramer> the C<> notation

[13:44] <masak> mkramer: that's Pod for "this is code".

[13:44] <mkramer> for instance, in the recent "Tweaking Junctions" post

[13:44] <mkramer> ahh, alright

[13:44] <mkramer> thanks

[13:44] <masak> TheDamian is very consistent in using it.

[13:45] <arnsholt> Holy crap, it's almost time for another advent calendar

[13:45] <masak> :)

[13:45] <arnsholt> The last one was just a few months ago ^^

[13:45] * PerlJam notes his post to p6c still hasn't made the round trip back to his mail box.

[13:45] <masak> PerlJam: p6c has well-known inexplicable delays.

[13:57] * moritz_ received it

[13:58] <masak> oh; I did, too.

[13:58] <PerlJam> good enough for me, I don't need another copy anyway  :)

[13:58] <moritz_> http://www.nntp.perl.org/group/perl.perl6.compiler/2010/10/msg6906.html

[14:12] *** Schwern joined
[14:20] *** MayDaniel joined
[14:44] *** mkramer left
[14:51] *** am0c joined
[14:58] *** tadzik joined
[15:02] <SpiceMan> what are the pir files exactly?

[15:03] *** rgrau_ joined
[15:04] <flussence> parrot-assembly language

[15:05] <oyse> SpiceMan: You can take a look here: http://docs.parrot.org/parrot/latest/html/docs/intro.pod.html

[15:05] <oyse> SpiceMan: See under the heading instruction formats

[15:06] <SpiceMan> ok, I wanted to take a look to hmm "core modules" ? where are they? :p

[15:07] <oyse> SpiceMan: What do you mean by core modules?

[15:07] *** timbunce_ joined
[15:09] <SpiceMan> well, I come from perl5... and wanted to take a peek to "perl 6 code

[15:09] *** timbunce left
[15:09] *** timbunce_ is now known as timbunce

[15:10] *** vapace joined
[15:10] <SpiceMan> so I inferred there must be some kind of libraries, that are not exactly part of the language but provide functionality

[15:10] <SpiceMan> like perl 5 core modules

[15:10] <flussence> get Rakudo Star, and have a look at some of the .pm files that come with it

[15:10] <moritz_> SpiceMan: currently there are three kind of core modules...

[15:10] <SpiceMan> that's what I'm looking for, exaclty

[15:11] <SpiceMan> so, I enetered a random library dir, and it had pir files :p

[15:11] <moritz_> those that you don't need to load, built into the compiler (like utf8 or UNIVERSALin perl5)

[15:11] <moritz_> those that you need to load, but that ship with the compiler (only Test.pm at the moment)

[15:11] <flussence> (they *were* pretty deep down the filesystem tree, last time I checked...)

[15:11] <moritz_> and those that only ship with distributions, not with the compiler

[15:11] <masak> Set.pm will be of the second type, too. loading it will get you Unicode operators.

[15:12] <moritz_> maybe I should blog about that

[15:12] <masak> moritz_: yes, please.

[15:12] <masak> also, please find good terminology distinguishing the three types of core. :)

[15:13] <flussence> Unicode? as in, all that nice-looking stuff around U+2200ish?

[15:15] <masak> :)

[15:15] <flussence> (somehow I guessed the right number!)

[15:15] <masak> *all* of it!

[15:15] <flussence> wow

[15:15] <SpiceMan> so, lets say for example, I'd like to implement a fastcgi module in perl 6... that'd be a ... third kind core module? 

[15:16] <masak> it could be, yes.

[15:16] <flussence> that sounds right, if it's core at all.

[15:16] <masak> that'd be one nice thing to include in a distribution.

[15:16] <masak> and note that anyone can create a distribution.

[15:17] *** wamba left
[15:17] <moritz_> currently the Rakudo * philosophy is to include what's useful for the user

[15:17] <moritz_> that's not very specific, but that's OK since our module portfolio isn't that huge yet

[15:17] <SpiceMan> that varies greatly among users

[15:17] <SpiceMan> right

[15:18] <moritz_> people come here and ask "is there a module for $JOB?"

[15:18] <moritz_> so we see a demand for certain things

[15:18] <SpiceMan> what's the popular demand?

[15:18] <moritz_> non-blocking IO and events

[15:18] <SpiceMan> I though of fastcgi because I saw libraries/CGI/Hashsomething and not fastcgi thing

[15:18] <moritz_> WEB-ish stuff like CGI, templates

[15:18] <moritz_> database access

[15:18] <SpiceMan> a POE/IO::Async kind of thing?

[15:19] <moritz_> right

[15:19] <SpiceMan> that's lot of work

[15:19] <moritz_> or AnyEvent or Ev or whatever your favorite solution in p5 is

[15:19] <moritz_> indeed

[15:19] *** vapace_ joined
[15:19] *** plainhao joined
[15:19] *** vapace left
[15:20] *** Schwern left
[15:21] <SpiceMan> ok, I'm kind of a average coder, and looking for someone project to contribute :p 

[15:21] <SpiceMan> stuff like parser, compilers etc are above me, right now

[15:21] <moritz_> I started a Perl 6 port of CGI::Application

[15:21] <moritz_> it needs a lot of work, like modules for handling cookies, integration with template engines etc.

[15:22] <plainhao> is there a separate cpan for perl6 modules?

[15:22] <moritz_> http://github.com/moritz/CGI-Application if you're interested

[15:22] <moritz_> plainhao: not yet

[15:22] <SpiceMan> moritz_: I'll take a look, won't promise anything

[15:22] <SpiceMan> I guess I'll have to get the hang of p6 first

[15:22] <plainhao> moritz_, does that mean there are plans to have a separate perl 6 cpan?

[15:22] <moritz_> plainhao: http://modules.perl6.org/ and one or two module installers

[15:22] <plainhao> thanks, moritz_

[15:23] <moritz_> plainhao: well, we'll try to re-use as much of the p5 cpan as possible

[15:23] <moritz_> but it's not clear to us yet to which extend that'll work

[15:23] <SpiceMan> btw: where can I sign to get rid of camelia ? :p

[15:23] *** vapace joined
[15:23] *** vapace_ left
[15:24] <SpiceMan> nevermind

[15:24] <masak> where's hugme when you need it?

[15:24] <moritz_> SpiceMan: come up with a better logo that meets all of larry's criteria mentioned in http://github.com/perl6/mu/blob/master/misc/camelia.txt#L48

[15:24] <moritz_> masak: pinin' for the fjords, probably

[15:24] <masak> seems that way.

[15:25] *** hugme joined
[15:25] *** ChanServ sets mode: +v hugme

[15:25] <SpiceMan> yeah, I know the requirements. I guess that's why I said get rid, not replace. at any rate, I see there's a p6-module-starter. good.

[15:26] <moritz_> hm, I should work on the module starter again

[15:26] <moritz_> it might not work well right now

[15:26] <moritz_> ETOOMANYPROJECTS

[15:26] <tadzik> moritz_: how about adding it to Module::Tools one day?

[15:26] <tadzik> It's a Module::Tool

[15:26] <pmichaud> good morning, #perl6

[15:27] <tadzik> good morning pmichaud 

[15:27] <moritz_> tadzik: good idea

[15:27] <SpiceMan> moritz_: to be fair. it *does* say "initial perl 6 module starter"

[15:27] *** am0c left
[15:27] <SpiceMan> maybe that's a better place to start with

[15:27] <SpiceMan> (for me, I mean)

[15:27] <tadzik> SpiceMan: oh, you want to read my blag toast

[15:28] <tadzik> SpiceMan: http://ttjjss.wordpress.com/2010/08/09/so-you-want-to-write-a-perl-6-module/

[15:28] <SpiceMan> good

[15:28] <SpiceMan> I'll take a look

[15:29] *** nymacro joined
[15:30] <masak> I wish this blog post had comments, so I could point out that it is wrong, and why: http://www.polettix.it/perlettix/id_perl6-junction

[15:35] <tadzik> hmm, I could add some mbuild info to that blogpost

[15:35] <pmichaud> I need to come up with a name for a new blog (for me).  

[15:36] <pmichaud> masak++ already took "Strangely Consistent" (an awesome blog name, btw :-)

[15:36] <masak> :)

[15:36] <moritz_> what about "Strangly Inconsistent"? :-)

[15:36] <masak> pmichaud: "Consistently Strange"? :P

[15:36] <pmichaud> heh

[15:37] <pmichaud> "Inconsistently strange" sounds like me.

[15:37] *** Schwern joined
[15:37] <moritz_> pumpking juice

[15:37] *** uniejo joined
[15:37] <pmichaud> I've been thinking about using the name of my Lego Rock Band:  "Plastic Flame"  :-)

[15:37] <masak> :)

[15:38] <masak> pmichaud: I think you should call the blog "Burn, Pop-Tart, Burn" :)

[15:39] *** am0c joined
[15:40] <masak> alternatively, something to do with grapes.

[15:43] <moritz_> why grapes?

[15:43] <masak> http://www.pmichaud.com/grape/

[15:44] <moritz_> "grapes are just unfermented wine"

[15:44] *** justatheory joined
[15:44] <pmichaud> aha!  "Unevenly Distributed"

[15:44] <masak> \o/

[15:44] <jnthn> :-)

[15:45] <masak> as in the future, Perl 6, and waterbeds! :)

[15:47] <jnthn> The Perl 6 team. Strangely consistent, unevenly distributed and with 6 guts. :-)

[15:47] *** meppl left
[15:49] * masak likes obra++'s "Perl 5 is Alive!" at http://www.youtube.com/watch?v=ECSu5Pu0qlk

[15:52] <pmichaud> I like "Unevenly Distributed", but it's a bit longish.  I'd generally tend towards something shorter.

[15:52] <masak> "Chunky Future"

[15:54] <moritz_> http://github.com/moritz/perlgeek.de/blob/master/source/blog-source-en/perl-6/how-core-is-core.txt any feedback before I publish?

[15:54] * masak reads

[15:55] <masak> moritz_: in connection with Perl 5, maybe mention "dual-life".

[15:55] *** cls_bsd left
[15:55] <pmichaud> yes, "dual-life" makes sense

[15:55] <moritz_> masak: how do they fit into the Perl 6 picture?

[15:56] *** MayDaniel left
[15:56] <masak> moritz_: Perl 6 avoids that problem by pushing things further from the core-most core.

[15:56] <pmichaud> I'm not sure that we "avoid the problem" so much as we accept that it's going to happen and figure out ways to mitigate it.

[15:57] <masak> yes, that's a better way of saying it.

[15:57] <masak> "try to avoid", "partially avoid"

[15:57] <masak> "try to partially avoid"

[15:57] <pmichaud> blog name:  "Partially Avoided"

[15:57] *** oyse left
[15:57] <pmichaud> "Partially Void"

[15:58] <pmichaud> "Practically Void"

[15:58] <masak> would need to be "Practically Sink" :P

[15:58] <tadzik> Unevenly Void

[15:59] <masak> pmichaud: maybe "Sink Context" is a good blog name. it's a bit like "tail -f blog > /dev/null" that I've seen somewhere.

[15:59] <pmichaud> Hmmmmm

[16:00] <SpiceMan> signed void

[16:01] *** Ross joined
[16:01] <tadzik> Sink Distributed

[16:01] *** MayDaniel joined
[16:01] *** mberends joined
[16:01] <tadzik> or Void Distributed, in this type

[16:01] <moritz_> paragraph on dual life modules added; published

[16:02] <moritz_> masak++

[16:02] <mberends> \o/ yayitsweekend!

[16:02] <masak> moritz_++

[16:02] <masak> yayitsmberends! \o/

[16:02] <moritz_> the Perl 6 ship - we Sink distributedly

[16:02] <moritz_> SCNR

[16:02] <masak> "Sink Unevenly"

[16:03] <masak> pmichaud: "The Waterbed Theory"

[16:03] <pmichaud> "Perl 6 -- we really do have a sink."

[16:03] * justatheory <- in waterbed

[16:03] <masak> std: KitchenSink

[16:03] <p6eval> std a194beb: OUTPUT«ok 00:01 118m␤»

[16:03] <masak> std: Waterbed

[16:03] <p6eval> std a194beb: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared name:␤    'Waterbed' used at line 1␤Check failed␤FAILED 00:01 117m␤»

[16:04] <moritz_> justawaterbedtheory!

[16:05] <SpiceMan> about core modules... space is cheap.

[16:05] <moritz_> right; but people's time is not.

[16:05] <tadzik> it's about maintemancemanship I think

[16:05] <moritz_> right

[16:05] <masak> right.

[16:05] <moritz_> it's also about stability

[16:05] <masak> pmichaud: "My Bikeshed is Blue"

[16:06] <SpiceMan> uhm

[16:06] <tadzik> also, Star ships plenty of modules

[16:06] <tadzik> but they are like "we don't come with any warranty, beware"

[16:08] *** risou joined
[16:08] <masak> pmichaud: "$pm.blog( all @thoughts )"

[16:09] <SpiceMan> tadzik: isn't that always the case with open source? :)

[16:09] <masak> pmichaud: "OH HAI" :)

[16:09] *** vapace_ joined
[16:09] *** vapace left
[16:10] <tadzik> SpiceMan: well, Perl 5 core modules get tested, and stuff :)

[16:10] <masak> pmichaud: "Spunky little sister"

[16:10] <tadzik> also, 2010.09 is around 10-30% faster than the last one

[16:10] <masak> pmichaud: http://spunkylittlesister.org/ is still available :)

[16:11] <pmichaud> still a bit too long for me, though :)

[16:11] <masak> "Spunky"

[16:11] <tadzik> Spunky Sis

[16:11] <masak> \o/

[16:11] <pmichaud> also, I'm thinking the blog may be more than just perl 6 articles

[16:12] <masak> then you should call it "Re:"

[16:12] <moritz_> maybe we should rename Perl 5 to "spicy perl" and Perl 6 to "spunky perl" *SCNR*

[16:12] <Juerd> SpiceMan: Well, for all my open source software, the user can get a full refund if they don't like it. (Of course, only when they got it directly from me.)

[16:12] *** vapace_ left
[16:12] <masak> moritz_: that's not a half-bad idea. I like it better than "Camelia Perl".

[16:13] <pmichaud> does Yapsi have a warranty?  ;-)

[16:13] * dukeleto waves

[16:13] <masak> we guarantee that you'll enjoy it fully, or get an official apology.

[16:13] <tadzik> dukeleto: o/

[16:13] <SpiceMan> doh, now I get it. i did git clone git://github.com/rakudo/rakudo.git

[16:13] <SpiceMan> so I have rakudo, not rakudo star?

[16:13] <moritz_> SpiceMan: correct

[16:14] <masak> SpiceMan++ # level up!

[16:14] <moritz_> SpiceMan: http://github.com/rakudo/star/downloads for the Star release

[16:14] <jnthn> masak: I'm tempted to fail to enjoy it now just to see if the official apology is as entertaining as the release notices. :-)

[16:14] <masak> jnthn: all part of the plan. that means you'll try it out :P

[16:14] * moritz_ wonders if he broke the yapsi build on p6eval 

[16:15] <pmichaud> <off-topic>  One of the downsides to supporting any political campaign for office is that you're then innundated with kooky email that assumes you're hyper-partisan.  </off-topic>

[16:15] <masak> jnthn: (the official apologies are *awesome*)

[16:15] <jnthn> Vote pmichaud!

[16:15] <moritz_> yapsi: say 1

[16:15] <p6eval> yapsi: OUTPUT«sh: /home/p6eval/rakudo-alpha/parrot_install/bin/alpha: not found␤»

[16:15] <masak> alpha?

[16:15] <SpiceMan> no wonder there was barely anything there :p

[16:15] <masak> that's a long time ago.

[16:15] <jnthn> nqpnet: say("ENOTYET") 

[16:15] <jnthn> :-)

[16:16] <masak> pmichaud: "»-partisan" :)

[16:16] *** vapace joined
[16:17] *** p6eval left
[16:17] <dalek> evalbot: cbc39d2 | moritz++ | evalbot.pl:

[16:17] <dalek> evalbot: yapsi now runs on current rakudo, masak++ says

[16:17] <dalek> evalbot: review: http://github.com/perl6/evalbot/commit/cbc39d219b7b83ba74c0af2a8e8d1ae1a1fd927b

[16:17] <moritz_> yapsi: say 1

[16:17] <moritz_> ugh, reconnect slow

[16:17] *** p6eval joined
[16:17] *** ChanServ sets mode: +v p6eval

[16:17] <moritz_> yapsi: say 1

[16:17] <p6eval> yapsi: OUTPUT«===SORRY!===␤Unable to find module 'Yapsi' in the @*INC directories.␤(@*INC contains:␤  lib␤  /home/p6eval/.perl6/lib␤  /home/p6eval/p1/lib/parrot/2.9.1-devel/languages/perl6/lib␤  .)␤»

[16:18] <moritz_> huh

[16:18] *** envi left
[16:18] <moritz_> the command line has PERL6LIB=lib in front of it

[16:21] *** zostay left
[16:21] <masak> what about the current directory?

[16:21] <moritz_> what about it?

[16:21] *** mkramer joined
[16:21] *** orafu left
[16:21] <masak> does it equal the directory that contains the lib/ directory?

[16:21] *** zostay joined
[16:21] <moritz_> no

[16:22] <moritz_> oh

[16:22] <moritz_> I hope so

[16:22] <mkramer> what if, instead of trying to statically analyze code to see if it can be parallelized, we were allowed to annotate loops, blocks, and subroutines as "pure"

[16:22] <masak> mkramer: 'hyper'

[16:23] <masak> S02:4519

[16:23] <masak> pmichaud: maybe just call the blog "Already Spec" :P

[16:23] <masak> pmichaud: or "Sixth Sense"

[16:24] *** vapace left
[16:26] *** cognominal left
[16:26] <moritz_> Sixth Nonsense!

[16:26] <masak> *lol*

[16:31] <mkramer> masak: I don't see how hyper operators are what I'm talking about

[16:31] <mkramer> or HyperWhatever

[16:31] <pmichaud> mkramer: I think he's referring to the "hyper" keyword/function.

[16:31] <masak> mkramer: then you should read the S02 reference I gave you.

[16:31] *** Axius joined
[16:32] <pmichaud> S02: "A variant of C<eager> is the C<hyper> list operator, which declares

[16:32] <pmichaud> not only that you want all the values generated now, but that you want

[16:32] <pmichaud> them badly enough that you don't care what order they're generated in.

[16:32] <pmichaud> That is, C<eager> requires sequential evaluation of the list, while

[16:32] *** lucs joined
[16:32] <pmichaud> C<hyper> requests (but does not require) parallel evaluation. ...

[16:33] <pmichaud> the idea is that   "map &block, @list"   would run sequentially, while  "hyper map &block, @list"  is an explicit indication that the map operation is "pure" and can be executed in parallel

[16:34] *** nymacro left
[16:34] <mkramer> Alright, now we're on the same page

[16:34] *** cognominal joined
[16:35] <mkramer> however, I would rather have the option at annotating at a higher level

[16:35] <mkramer> if I've annotated methods/subs as pure

[16:36] <mkramer> method foo is pure { ... };

[16:37] <moritz_> but what does "pure" actually mean?

[16:37] <moritz_> is it still pure if it reifies parts of a lazy list?

[16:39] *** am0c left
[16:39] <mkramer> I think so

[16:40] *** MayDaniel left
[16:40] <masak> I see a "pure"/hyper annotation as something saying "if there are side effects, I'm taking personal responsibility".

[16:41] <mkramer> at least, I should be able to say "I'm TELLING you that this is pure, so just treat it like it is"

[16:41] <masak> exactly.

[16:41] <masak> is not so much about annotating purity as not caring about possible side effects.

[16:41] <pmichaud> it's more like telling the compiler "you can optimize more aggressively by ignoring the possibility of side-effects"

[16:42] *** alester joined
[16:42] *** vapace joined
[16:44] <mkramer> It could be more than that

[16:45] <mkramer> hyper gather for @objects { take $^a.MethodNotMarkedAsPure() } ;

[16:45] <mkramer> could be a warning

[16:46] <pmichaud> no, because you said "hyper"

[16:46] <pmichaud> "hyper" is explicitly telling the compiler "I'm taking over here."

[16:46] <moritz_> you really want @objects>>.MethodNotMarkedAsPure()

[16:46] <masak> I'm not sure gather can ever be hyper.

[16:46] <mkramer> how can I hyper >>?

[16:46] <masak> 'for' can be, but not 'gather'.

[16:47] *** vapace left
[16:47] <mkramer> the spectest needs updating then

[16:47] <moritz_> masak: >> is hyper

[16:47] <mkramer> http://github.com/perl6/roast/blob/master/S03-metaops/eager-hyper.t#L34-L44

[16:47] *** vapace joined
[16:47] <masak> moritz_: tab fail?

[16:47] <moritz_> yes, meant mkramer 

[16:47] <moritz_> mkramer: correct, that test ist out of date

[16:48] <masak> it feels dissonant to me to put 'hyper' (or 'eager') there.

[16:48] <moritz_> mkramer: do you have a github ID? if yes, what is it?

[16:48] <masak> the 'take' mechanism of 'gather' is sequential in nature.

[16:48] <moritz_> masak: spectest are not about taste, but about exploring special cases

[16:49] <pmichaud> masak: you'd accept     gather hyper for @objects { take $^a.method; }      ?

[16:49] <masak> pmichaud: yes.

[16:49] <masak> moritz_: I'm not making a judgement about taste, I'm making a judgement about the physically possible.

[16:50] <moritz_> masak: well, hyper() doesn't guarantuee parallelism

[16:50] <masak> moritz_: and yet we agree that the test is out of date?

[16:50] <takadonet> http://www.reddit.com/r/programming/comments/duxm5/how_core_is_core/

[16:50] *** isBEKaml joined
[16:50] <moritz_> masak: yes

[16:50] <mkramer> moritz_: I just created a github account - name masonk

[16:50] <masak> moritz_: I fail to follow, then.

[16:51] <mkramer> moritz_: would you like me to update the spectest?

[16:51] <masak> moritz_: do you think that putting 'hyper' before 'gather' means anything at all?

[16:51] <masak> if so, what?

[16:51] <moritz_> mkramer: yes please; you have commit access now

[16:51] *** am0c joined
[16:51] <moritz_> masak: I think it's the same as 'eager', plus losing the guarantuee of sequentiality

[16:51] <mkramer> let's wait until this conversation plays out :)

[16:51] *** vapace left
[16:52] <masak> moritz_: please explain to me how the contents of an arbitrary gather loses the "guarantee of sequentiality".

[16:52] *** am0c left
[16:53] <mkramer> do you mean: what is the guarantee of sequentiality?

[16:53] <masak> no, I get what it is. for a 'for' loop. or a 'map'.

[16:53] <masak> not for a 'gather'.

[16:53] <masak> a 'gather' is not in itself a looping construct.

[16:53] <moritz_> hm, right

[16:53] <masak> it's just a block with some special 'take' semantics.

[16:54] <pmichaud> actually, it is a looping construct internally

[16:54] <moritz_> masak: but it could hand on the hyperness to its inner context

[16:54] <masak> pmichaud: if it is, it's not one that can "lose sequentiality".

[16:54] <pmichaud> masak: I agree with that.

[16:54] <masak> moritz_: right. but that's sugar.

[16:54] <masak> moritz_: then it means something else.

[16:55] <moritz_> hm...

[16:55] <masak> I don't think I'd like that kind of sugar, by the way.

[16:55] <masak> what if there are two for loops inside?

[16:55] *** cdarroch joined
[16:55] *** cdarroch left
[16:55] *** cdarroch joined
[16:55] <pmichaud> I agree with masak++ here.

[16:55] <masak> or three, but on different nesting depths?

[16:55] <moritz_> gather { hyper for { .&take } } # would produce weird results

[16:55] <moritz_> ok, I'm with masak++ too

[16:56] <masak> hokey. time for noms, then.

[16:56] <masak> o/

[16:56] *** masak left
[16:56] <pmichaud> yes, nom here also

[16:57] <moritz_> mkramer: so likely the tests are OK after all

[16:57] <isBEKaml> rakudo: for ^10 { (<une dos tres>).pick(1).say }

[16:57] <p6eval> rakudo : OUTPUT«une␤une␤dos␤dos␤tres␤tres␤une␤dos␤dos␤dos␤»

[16:57] <isBEKaml> rakudo: for ^10 { (<une dos tres>).pick(1).say }

[16:57] <p6eval> rakudo : OUTPUT«une␤tres␤dos␤une␤dos␤dos␤tres␤une␤une␤tres␤»

[16:58] <isBEKaml> .pick is not _very_ random, is it? :)

[16:58] <mkramer> moritz_: there's still "    my @test = hyper gather { for 1 .. 5 { $counter++; take $_; } }; " in the spectest

[16:59] <isBEKaml> [logs] wow, just when I was thinking I could start off where I left off of yapsi, there's some talk of it! :)

[16:59] <moritz_> isBEKaml: what's not very random about it?

[16:59] <moritz_> mkramer: we just came to the conclusion that 'hyper gather' has no effect, becase gather isnot a looping construct

[17:00] <isBEKaml> moritz_: I'm not sure, it just repeats the same thing the first time you try that. 

[17:00] <isBEKaml> I guess I don't have much entropy (does .pick use the system entropy? )

[17:00] <mkramer> moritz_: right, so why is "hyper gather" in the spectest?

[17:00] <moritz_> isBEKaml: une␤une␤dos␤dos␤tres␤tres␤une␤dos␤dos␤dos␤ ne une␤tres␤dos␤une␤dos␤dos␤tres␤une␤une␤tres

[17:00] *** Axius left
[17:01] <moritz_> mkramer: probably because of a misunderstanding of the original author

[17:01] *** estrabd left
[17:01] <moritz_> mkramer: still I think the tests are correct, even if they don't make very much sense

[17:01] <moritz_> better tests welcome!

[17:02] *** estrabd joined
[17:02] <isBEKaml> moritz_: not to pick(pun intended), but I was curious how .pick does it. 

[17:03] <moritz_> isBEKaml: afaict it seeds the PRNG with the current timestamp

[17:05] *** zostay left
[17:06] *** dakkar left
[17:06] * isBEKaml is surprised at how much memory the repl consumed. 79 megs of free space shot up to 409 megs soon after quitting the repl. 

[17:06] *** zostay joined
[17:06] *** skangas left
[17:07] <tadzik> isBEKaml: they're still tuning the new gc I think

[17:07] <isBEKaml> tadzik: saw that. Still I was surprised. I never looked at "free" all this time I ran the repl. 

[17:10] *** baux joined
[17:19] *** _twitch left
[17:22] <tadzik> isBEKaml: not monitoring memory usage makes tadzik a happy boy :)

[17:22] *** MayDaniel joined
[17:25] *** timbunce left
[17:27] *** enN_ joined
[17:27] *** enN_ left
[17:32] *** timbunce joined
[17:57] *** ruoso left
[17:58] *** ruoso joined
[17:58] *** Ross left
[17:58] *** Ross joined
[17:58] *** Ross left
[17:58] *** Ross joined
[18:08] *** uniejo left
[18:21] *** patspam joined
[18:30] *** sftp joined
[18:36] *** timbunce left
[18:37] *** stkowski joined
[18:42] *** timbunce joined
[18:50] *** takadonet left
[18:51] *** takadonet joined
[18:52] *** risou left
[18:55] *** icwiener joined
[19:03] *** takadonet left
[19:30] *** plainhao left
[19:35] *** envi joined
[19:42] *** MayDaniel left
[19:47] *** envi left
[19:58] *** Ross left
[20:01] *** Ross joined
[20:01] *** Ross left
[20:01] *** Ross joined
[20:04] *** Schwern left
[20:04] *** Ross left
[20:05] *** Ross joined
[20:05] *** Ross left
[20:05] *** Ross joined
[20:12] *** zby_home_ left
[20:41] *** stkowski left
[20:42] *** stkowski joined
[20:43] <diakopter> sorear++ excellent verbosication of EXPR

[20:44] *** MayDaniel joined
[20:45] <diakopter> verbosification

[21:00] <tadzik> jnthn: http://github.com/jnthn/6model/commit/9445e1 is there a pun in the commit message, or you accidentally a summary? :)

[21:01] <jnthn> tadzik: As if I'd pun. ;-)

[21:01] *** bluescreen left
[21:03] <sorear> diakopter: huh, I hadn't really thought of what I was doing as verbosification

[21:04] <sorear> I just wanted to get rid of the last LABEL dependency

[21:04] <diakopter> I suppose I should've said  clarification

[21:04] <sorear> good * #perl6

[21:05] <sorear> moritz_: talk to sartak about spaced repetition systems

[21:08] <Tene> supermemo ftw

[21:08] <Tene> wtc.

[21:08] <Tene> etc.

[21:09] * jnthn has various iPhone apps that do spaced repetition.

[21:09] *** pothos_ joined
[21:09] <jnthn> (for learning language vocab)

[21:10] <jnthn> Seems to sorta work for me. :-)

[21:11] *** pothos left
[21:24] <moritz_> sorear: huh?

[21:24] <moritz_> sorear: what's the context?

[21:24] <moritz_> ah

[21:25] <moritz_> "my" system seems to work fine for now

[21:25] <moritz_> let's see how it scales for more vocabs

[21:28] *** whiteknight joined
[21:28] *** dju left
[21:28] <dalek> 6model: 3d934db | jnthn++ | dotnet/runtime/ (6 files):

[21:28] <dalek> 6model: [dotnet] Add storage of exception handlers per block, sketch out a couple of ops for searching for exception handlers lexically and dynamically and a few other bits of stubbing in.

[21:28] <dalek> 6model: review: http://github.com/jnthn/6model/commit/3d934db2b5712ab30bf866ab4cc22b5ae300d076

[21:28] <dalek> 6model: 973c96d | jnthn++ | / (3 files):

[21:28] <dalek> 6model: [dotnet] Somewhat reluctantly move KnowHOWAttribute out of NQPSetting and into core. Having meta-object bodies and things that need them at BEGIN time in the same compilation unit doesn't work out and is blocking other progress.

[21:28] <dalek> 6model: review: http://github.com/jnthn/6model/commit/973c96d9275f79c761616b79618b7783015c62ab

[21:34] <dalek> 6model: 6a07cb2 | jnthn++ | common/NQP/NQPSetting.pm:

[21:34] <dalek> 6model: [common] Stub in a simple NQPException exception object and a die sub.

[21:34] <dalek> 6model: review: http://github.com/jnthn/6model/commit/6a07cb256cf55cc44926a4ccb6038441655f5237

[21:34] <dalek> 6model: 19770eb | jnthn++ | dotnet/runtime/Runtime/Ops.cs:

[21:34] <dalek> 6model: [dotnet] Add a missing null check to the exception handler locators. We can now die.

[21:34] <dalek> 6model: review: http://github.com/jnthn/6model/commit/19770eb4f4bff4c6c405a782a7be7703b7f8c350

[21:38] *** sftp left
[21:45] <diakopter> We can now die.

[21:46] <jnthn> I shoulda added parens. :P

[21:47] <tadzik> :)

[21:47] <tadzik> looks like "Whew, it's over"

[21:50] *** icwiener left
[21:50] <tadzik> changing for(1..100000) to loop (my $i = 0; $i < 100000; $i++) cut the execution time in about a half

[21:51] <tadzik> (and I don't think this one last iteration caused this :))

[21:51] <colomon> tadzik: that's completely expected at this point, alas.  :(

[21:51] <tadzik> I know :(

[21:52] <PerlJam> I didn't expect it.

[21:52] <PerlJam> Now my brain is out of callibration. 

[21:52] <tadzik> I have this stupid tests, in Perl 5, PIR, NQP and Perl 6. Only bare PIR is faster than Perl 5 atm, which is promising anyway :)

[21:52] <colomon> jnthn: I've been meaning to try to combine spaced repetition with an Irish tunes database.

[21:52] <jnthn> "Know your Irish tunes!"

[21:53] <jnthn> colomon: Trouble is, you'd keep getting tempted to forget about the ones you like, so you get to hear them more often. ;-)

[21:54] <PerlJam> tadzik: are you sure PIR is faster than Perl 5?  Maybe it was an anomalous execution?  Did you run it 20 times and calculate some statistics on the results?   

[21:54] <PerlJam> :-)

[21:54] *** icwiener joined
[21:55] <dalek> 6model: 06d78a2 | jnthn++ | common/NQP/NQPSetting.pm:

[21:55] <dalek> 6model: [common] Start to stub in a very barebones ClassHOW. This is enough that class Foo { } works.

[21:55] <dalek> 6model: review: http://github.com/jnthn/6model/commit/06d78a2f18f684bc55ff274e2f6936ed532ceadc

[21:55] <colomon> jnthn: nah, focus would be on remembering how to play them.  the ones I really like I play all the time anyway.  :)

[21:56] <jnthn> Oh, I see!

[21:57] <jnthn> Playing, not recognizing. :-)

[21:57] <tadzik> PerlJam: no, it really is :)

[21:58] <tadzik> like 2 times faster

[21:58] <tadzik> http://wklej.org/id/405567/

[21:58] <PerlJam> That's just noise.

[21:59] <PerlJam> (I won't actually believe it until there's an order of magnitude involved  :)

[21:59] <tadzik> that's just [+] (1..100000) :)

[21:59] <moritz_> hm, we should optimize [+] Range

[21:59] <tadzik> so that "benchmark" will go faster? :)

[22:00] <moritz_> yes :-)

[22:00] <moritz_> it's also something that people actually use

[22:00] <tadzik> but yeah, you're right. It'd even go faster than my loop () {} now :)

[22:00] <tadzik> is [+] Range just Range.sum?

[22:01] <tadzik> or is it some compiler magic I dunno how to touch? :)

[22:02] *** baux left
[22:02] <moritz_> [+] is, on the first level, just a dispatch to prefix:<[+]>

[22:03] <tadzik> it'd have to be added to Range.pm, yep?

[22:03] *** patspam left
[22:03] <moritz_> it's not that easy... the metaop logic will create a prefix:<[+]> if it doesn't exist

[22:04] <moritz_> but if you define one, you'll destroy the automatically generated one, unless you take special care

[22:17] *** alester left
[22:17] <dalek> 6model: 52f9692 | jnthn++ | dotnet/runtime/Metamodel/ (2 files):

[22:17] <dalek> 6model: [dotnet] Fail! .^find_method's signature should be :($obj, $name), not just :($name).

[22:17] <dalek> 6model: review: http://github.com/jnthn/6model/commit/52f9692dceb30346314d30eab9230038382d1c56

[22:17] <dalek> 6model: 4356d78 | jnthn++ | common/NQP/NQPSetting.pm:

[22:17] <dalek> 6model: [common] Add a VERY hacky but working version of method addition and dispatch into ClassHOW. Not even any inheritance yet. Mostly, it's got lots of TODOs for stuff I need to do next.

[22:17] <dalek> 6model: review: http://github.com/jnthn/6model/commit/4356d783155f5e28970cb7469e5371613367fa4c

[22:18] <jnthn> A minor landmark of sorts. :-)

[22:22] <dalek> 6model: 26184ae | jnthn++ | dotnet/runtime/Runtime/Exceptions/ExceptionDispatcher.cs:

[22:22] <dalek> 6model: [dotnet] Sketch out exception handler invocation, resume/don't resume decision and stack unwind call if needed.

[22:22] <dalek> 6model: review: http://github.com/jnthn/6model/commit/26184ae9ac073986ab3a7099fce73a367b55cb98

[22:25] <sorear> jnthn: here?

[22:26] <jnthn> sorear: Kinda, though my hands are getting achey from a week of $dayjob hacking and NQP.NET hacking every day. :-)

[22:26] <jnthn> So I think that's my last patch for tonight. :-)

[22:26] <jnthn> Much as I'd like to do much more. :-)

[22:26] *** MayDaniel left
[22:27] <jnthn> NQP.Net has reached the "addictive to hack on" phase.

[22:27] <sorear> it's the weekend so niecza will see lots of progress :)

[22:27] <jnthn> :-)

[22:27] <sorear> anyways, I wanted to talk about... types

[22:27] <jnthn> I'm taking sleeper train to England tomorrow night.

[22:27] <jnthn> And then probably muchly offline for a few days.

[22:27] <jnthn> OK, types. :-)

[22:28] <Tene> jnthn: any chance I can get a commit bit on 6model?

[22:28] <sorear> Q:CgOp { (newscalar (some_primitive (cast int (unbox num (@ {$arg1}))) (unbox str (@ {$arg2.str})))) } # I'm getting tired of writing this

[22:28] <jnthn> Tene: yes

[22:29] *** stkowski left
[22:29] <jnthn> Tene: Your github handle is just "tene"?

[22:29] <sorear> nam::some_primitive($arg1, $arg2) # I'd like to write this

[22:29] <Tene> yes

[22:29] <jnthn> Tene: You haz a commit bit. :-)

[22:29] <sorear> but I'm still thinking about how I want to handle all the boxing/unboxing...

[22:29] <jnthn> Tene: Have fun!

[22:30] <jnthn> sorear: Hmm...what you don't want to write looks a decent bit like what I've got it as on 6model.

[22:31] <sorear> I have a few primitive types

[22:31] <sorear> obj - pointer to Perl 6 object

[22:31] <sorear> var - pointer to Perl 6 container

[22:31] <sorear> num - System.Double

[22:31] <sorear> int - System.Int32

[22:31] <sorear> etc

[22:32] <jnthn> I have obj/num/int/str as primitives

[22:32] <sorear> all Perl 6 expressions generate a low-level expression of type 'var'

[22:32] <jnthn> Didn't yet differentiate containers.

[22:33] <jnthn> sorear: Is that CgOp creating a new scalar with...a boxed value in? Or unboxed? Or?

[22:33] *** timbunce left
[22:33] <sorear> newscalar = obj in, var out

[22:33] <sorear> with the ro bit set

[22:33] <sorear> afk

[22:34] <jnthn> ok

[22:36] * jnthn debates whether or not to take his laptop with him to England

[22:39] *** tadzik left
[22:45] <jnthn> ooh i can irc from my phone :)

[22:47] *** orafu joined
[22:54] *** mavrc left
[23:07] *** icwiener left
[23:07] *** ggoebel left
[23:08] *** Ross left
[23:18] *** pythonian4000 is now known as pythonian4000afk

[23:18] *** jferrero joined
[23:23] <colomon> jnthn: but you'll never be the first one with a pun if you have to type it out on a phone.

[23:25] <jnthn> I dunno. Some of them, anyone else would be too ashamed to write. ;-)

[23:27] <jnthn> Otherwise, you'll just have to get used to me being less punctual.

[23:28] <diakopter> and less homespun

[23:38] *** ggoebel joined
[23:41] *** jferrero left
[23:41] *** dduncan joined
[23:41] *** dduncan left
[23:42] *** pythonian4000afk is now known as pythonian4000

[23:50] *** isBEKaml left
[23:50] * jnthn -> sleep

