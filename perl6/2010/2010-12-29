[00:00] <sbp> rakudo: Array.^methods

[00:00] <p6eval> rakudo :  ( no output )

[00:00] <sbp> rakudo: say Array.^methods

[00:00] <p6eval> rakudo : OUTPUT«newat_posperlsplicedeletenewCaptureeagerelemsflatiteratorlistmunchBoolNumStrexistsfmtmapperlreverserotatesortpoppushshiftunshiftACCEPTSat_poshashofitemNumericIntNumStrelemsfmtlistNumericRealIntRatNumabsexploglog10sqrtrootsto-radiansfrom-radiansfloorceilingroundtruncatesigncisunpola…

[00:00] <masak> rakudo: say ~Array.^methods(:local)

[00:00] <p6eval> rakudo : OUTPUT«new at_pos perl splice delete␤»

[00:00] <masonkramer> what receives the dispatch?  What's the class implementing Array?

[00:01] <masonkramer> *metaclass

[00:01] <masak> right. Array.^methods is really Array.HOW.methods

[00:01] <masak> Array.HOW accesses the metaclass object of Array.

[00:02] <masak> this object knows about how Array is implemented; parents, methods, attributes...

[00:02] <masonkramer> rakudo: say ~Array.HOW

[00:02] <p6eval> rakudo : OUTPUT«Method 'Str' not found for invocant of class 'ClassHOW'␤  in main program body at line 7369:CORE.setting␤»

[00:02] <sbp> rakudo: say Array.HOW

[00:02] <p6eval> rakudo :  ( no output )

[00:03] <masak> that 'ClassHOW' there is a clue.

[00:03] <sbp> say Array.CLUES

[00:04] <masak> Rakudo implements metaclass objects with ClassHOW, written in nqp.

[00:04] <masak> jnthn++ is working on better, more strangely-loopy implementations with 6model.

[00:04] *** kst joined
[00:04] *** Chillance left
[00:05] *** dukeleto left
[00:06] *** dukeleto joined
[00:08] <diakopter> rakudo: say (~(Array.^methods(:local)))

[00:08] <p6eval> rakudo : OUTPUT«new at_pos perl splice delete␤»

[00:09] <masak> rakudo: say ~Array.^methods: :local

[00:09] <p6eval> rakudo : OUTPUT«new at_pos perl splice delete␤»

[00:09] <diakopter> neat

[00:10] <masak> I still remember the groans I inadvertently caused during szabgab's Perl 6 Beginners' course at YAPC::EU 2009.

[00:11] *** patspam joined
[00:11] *** patspam left
[00:11] <masak> I said something like "that's not an adverb colon, that's an invocant colon". people looked like their mental stacks were blown.

[00:13] * GinoMan tilts his head, a bell chimes once, then smoke comes out of his ears

[00:13] * diakopter has to wonder about language implementations (currently mine/perlesque) that have typed closures working before if-statements

[00:13] <masak> neat.

[00:14] <masak> no harm in having an unorthodox set of focal points, if you ask me.

[00:14] <diakopter> I'll add it to p6eval soon.. to replace the old perlesque that generated its own grammar/compiler upon every invocation

[00:14] <diakopter> this one uses an ANTLR-generated lexer/parser

[00:15] <masak> you seem to be iterating your way through parsing techniques.

[00:15] <diakopter> true.

[00:15] <sbp> you can probably model if-statements in typed closures if you think hard enough

[00:15] <diakopter> hee

[00:16] <diakopter> no, there's no comparisons/bools really at all

[00:16] <diakopter> only declarations and assignment and more assignment and invocations

[00:16] <masak> but we weren't talking about comparisons/bools -- we were talking about if statements :P

[00:16] * diakopter goes to add comparisons and if

[00:17] *** felliott joined
[00:18] <diakopter> yeah but if statements needs bools, which need comparisons (why test boolean of a constant) or variables that change until a termination point

[00:18] <diakopter> anyway, these are all quite quick to add

[00:19] <GinoMan> why not just borrow perl5's if-statement model

[00:20] <lue> hello fellow citizebras o/

[00:20] <masak> diakopter: what GinoMan said, kinda. if statements don't need bools, only something that can be construed as false and non-false.

[00:21] *** kst left
[00:21] <masak> diakopter: and bools don't need comparisons, as long as there is *some* way to produce bools.

[00:21] *** kst joined
[00:21] <masak> but I'm splitting hairs here.

[00:22] <diakopter> those poor hairs

[00:22] *** Chillance joined
[00:23] *** silug left
[00:23] <diakopter> "... quite quick to add..." (because ANTLR and runsharp (and perlesque's infinitely-flexible compilation/execution model) make it so darn easy)

[00:23] <diakopter> I'm going to start thinking of/describing perlesque as a much more powerful/expressive PIR

[00:25] *** cdarroch left
[00:26] <lue> masak: I drew those diagrams up without knowing the tuning fork metaphor existed.

[00:28] <lue> pmurias: I know it only applies if it is invoked as `perl', but 1) the spec doesn't clarify this point  2) How would a program be able to tell what you typed to call it? [ It may be that I simply don't know :) ]

[00:29] <masak> lue: yes, I guessed that. nice to see someone else blog about it.

[00:30] *** envi joined
[00:30] <masak> lue: S01:105: "The perl interpreter will assume that it is being fed Perl 5 code" -- there it is, clarified, right there.

[00:31] <masak> it's easy to miss, though. the operative words are "the *perl* interpreter" -- i.e. not the perl6 interpreter or the niecza interpreter...

[00:33] <lue> There, I read the word 'perl' as referring the language [e.g. an interpreter of perl], not the program name, although it is all lowercase [e.g. the interpreter invoked with the command `perl']

[00:36] <lue> Well, like I said earlier, it's a very interesting history :)

[00:41] *** cognominal joined
[00:44] <diakopter> masak: but that just doesn't sound right

[00:45] <diakopter> b/c a perl6 interpreter or the niecza interpreter can also be the "perl interpreter"

[00:45] <diakopter> hence my request for clarification

[00:45] <lue> I would say that in any case, the spec needs changing to reflect the times.

[00:45] <diakopter> yes, it's technically correct

[00:46] <diakopter> maybe I shouldn't ask for clarification.  Perhaps I should ask more for elucidation.

[00:46] <lue> My question is this: would anyone who started a Perl 6 interpreter today want to have their program install as `perl'?

[00:48] <diakopter> I agree with lue when he says "pmurias: I know it only applies if it is invoked as `perl', but 1) the spec doesn't clarify this point" except I'd replace "clarify" with "emphasize"

[00:48] <diakopter> in other words, it's that phrase "the perl interpreter" that trips us up.

[00:49] <masak> agreed.

[00:49] <masak> less ambiguity in the spec can only be a good thing.

[00:49] <diakopter> (b/c it can be installed as both "perl" and "niecza/pugs/rakudo/sprixel/etc")

[00:49] <lue> Maybe "if a Perl 6 interpreter is installed as `perl',..." ?

[00:50] <masak> and Perl 6 installing as `perl` may or may not be a breach of the Two-Languages-One-Family agreement.

[00:52] <lue> I'm just wondering, is this P5-by-default even an *issue* anymore?

[00:53] <diakopter> masak: that brings up a good question - does that agreement jive with the spec, in all realistic-ness?  I mean, can a p6 impl ever hope to truly implement all of (or embed) p5 while also making that p5 able to be updated/used *as p5* ?

[00:53] <masak> lue: not for me ;)

[00:53] <colomon> certainly not an issue for now

[00:54] <colomon> actually, in retrospect, sort of a bizarre issue to have worried about in the past.

[00:54] <masak> diakopter: I think we should neither blind ourselves with idealism ("Perl 6 will implement Perl 5, too!!!"), nor let ourselves be limited by current tech ("Perl 6 will never implement Perl 5, so there!!!")

[00:55] *** smash left
[00:55] <masak> the focus has certainly moved *away* from p5p6-compat in the past few years, yes.

[00:56] <masak> it used to be a big selling point.

[00:56] <colomon> what strikes me as weird about it is it doesn't seem to sit well with the "perl 5 is defined by an implementation but p6 is defined by a spec" thing.

[00:57] <masak> just look at http://dev.perl.org/perl6/doc/design/exe/E02.html : "In fact, that's only 40 characters (out of 1779) from being pure Perl 5. [...] 98% backwards compatibility even without an automatic p52p6 translator...pretty slick!" with the addendum "[Update: Well, it's not quite that backward compatible anymore.]"

[00:57] <masak> E02 is from May 2001.

[00:58] <colomon> Were people seriously thinking there would be one interpreter, whose behavior on the one hand would be bug-compatiability with p5 and on the other hand spec-compatiability with p6?  That seems like a very weird notion.

[00:59] <masak> colomon: last YAPC::EU, I seriously toyed with the idea of resurrecting Ponie in today's Parrot environment.

[00:59] <masak> colomon: but I think that idea is a year or two too early.

[00:59] <masak> and it'd need serious backing from the Perl 5 world to even have a shot at success.

[00:59] *** QinGW joined
[01:00] * masak looks at what he wrote and decides to write "serious" one more time

[01:01] <masak> hm. sleep beckons.

[01:01] <masak> 'night, zebras.

[01:01] <lue> I personally don't think a P6 interpreter should be forced to interpret P5 at all. It just seems like that says "Perl 6 is going to break compatability with Perl 5, cos that's one of it's design goals for progress! Unless, of course, you don't like change, here, have a nice use v5; block."

[01:01] <lue> gnight o/

[01:02] *** jhuni joined
[01:02] <masak> lue: the spec simply permits v5 integration.

[01:02] *** masak left
[01:05] <lue> Yeah, I'm just not so sure of it being a good idea. Of course, I haven't been around long, and I've never used Perl 5, so my views are biased :)

[01:10] <lue> I don't think it's the time to argue about P5 support, although I do believe the P5-by-default feature should be removed.

[01:11] <sorear> good * #perl6

[01:11] <colomon> \o

[01:14] <lue> hello o/

[01:14] <colomon> rakudo: say 4 ~~ any (1, 3, 4, 5)

[01:14] <p6eval> rakudo : OUTPUT«Bool::True␤»

[01:16] * mdxi wonders *which* Perl 5 masak would implement -- there's an irritating amount of distro-based fragmentation going on since 5.10 :-/

[01:16] *** masonkramer left
[01:16] *** masonkramer joined
[01:18] <mdxi> if you're on RHEL it's more like "Three Languages, One Family" with 5.8.8 being the one Old Woman Redhat keeps locked in the upstairs bedroom, that the rest of the family whispers about.

[01:18] *** redicaps joined
[01:22] *** xinming left
[01:24] *** rhr left
[01:30] *** rhr joined
[01:30] *** MayDaniel left
[01:33] *** icwiener left
[01:50] *** x19290 joined
[01:51] <x19290> hello.

[01:51] <x19290> I'm using rakudo-star-2010.11.

[01:51] <x19290> I posted following message to perl6-{language,users}@perl.org

[01:51] <x19290> ----

[01:51] <x19290> Hello.

[01:51] *** x19290 left
[01:51] *** x19290 joined
[01:52] <x19290> Hello.

[01:52] <x19290> ?

[01:53] <colomon> hello?

[01:53] *** x19290_ joined
[01:53] *** x19290_ left
[01:53] <sjohnson> hi

[01:54] <sjohnson> pastebin would have saved his connection

[01:54] <colomon> ah

[01:55] <x19290> Hello again.

[01:55] *** roen joined
[01:55] <x19290> I'm using rakudo-star-2010.11.

[01:55] <x19290> I posted following message to perl6-{language,users}@perl.org

[01:55] <x19290> ----

[01:55] <x19290> Hello.

[01:55] <colomon> posting messages here won't work.

[01:55] <x19290> Thanks.

[01:56] <x19290> My problem was,

[01:56] <x19290> my $h = open '/dev/urandom', :r

[01:56] <x19290> loop (;;) {

[01:56] <x19290> $h.getc;

[01:56] <x19290> }

[01:57] <colomon> oh, that message

[01:57] <x19290> spits Malformed UTF-8 string error.

[01:57] <x19290> Andrew Whitworth

[01:57] <x19290> told me to open a ticket at trac.parrot.org.

[01:57] <x19290> Moriz told me

[01:58] <x19290> it can be fixed by

[01:58] <x19290> my $h = open '/dev/urandom', :bin;

[01:58] <x19290> $*OUT.write: $h.read(10)

[01:58] <x19290> But Moriz's code spits same UTF-8 error.

[01:59] <x19290> So I'm planning to open a ticket at trac.parrot.org but

[01:59] *** Eth4n joined
[01:59] <x19290> I'm so novice to do this.

[01:59] <x19290> Any idea?

[01:59] <x19290> Thanks.

[01:59] <colomon> Does it spit out the error if you leave out the $*OUT part -- that is, if you just read the file without writing it out again?

[02:00] <x19290> Without $*OUT part, same error.

[02:01] <colomon> okay

[02:02] <colomon> anyone out there have advice on reporting Parrot bugs?

[02:03] <colomon> (though the most straightforward but least directly helpful suggestion might be to check on #parrot instead.)

[02:03] <sorear> go to trac.parrot.org, follow directions

[02:04] <colomon> that's on irc.perl.org, rather than freenode.

[02:04] <colomon> sorear: I don't see any obvious bug reporting directions there.

[02:04] *** noganex_ joined
[02:04] <sorear> colomon: it would be spelled "new ticket"

[02:04] *** rgrau left
[02:05] <sorear> pmurias-- # "it doesn't compile".  It would help if I knew the error, and a paste that expired in <24h isn't good enough

[02:05] <colomon> sorear: http://trac.parrot.org/parrot does not contain the phrase "new ticket" when I load it.

[02:05] *** Eth4n left
[02:06] <x19290> PARROT-SRC/parrotbug?

[02:06] *** Eth4n joined
[02:06] <colomon> sorear: it's almost like they don't actually want people reporting bugs...

[02:07] <sorear> colomon: it does for me.  did you remember to log in?

[02:07] *** noganex left
[02:07] <colomon> you have to log in to get instructions on reporting bugs?!

[02:07] <x19290> so how to create my account?

[02:08] <sorear> "Register"

[02:09] <sorear> colomon: welcome to the 21st century.  spammers love Trac.

[02:09] <sorear> I'm not happy about it either

[02:10] <x19290> I clicke "Register" and

[02:10] <x19290> get https://trac.parrot.org/parrot/parrot/register Not Found

[02:10] <colomon> that's serious suckage compared to "Bugs can be submitted by sending an email to [email@hidden.address]
[02:10] <sorear> "... and waiting two weeks for our overworked moderators to catch up with the queue."

[02:12] <x19290> again how about PARROT-SRC/parrotbug?

[02:12] <flussence> oh, the age-old problem of letting people in but keeping spambots out... :(

[02:12] <sorear> x19290: I recommend asking #parrot

[02:13] <x19290> ok i will join #parrot

[02:13] <x19290> Thanks.

[02:13] <x19290> Bye

[02:13] *** x19290 left
[02:28] *** lidden left
[02:30] *** silug joined
[02:37] *** Alias_ joined
[02:48] *** Eth4n left
[02:54] *** agentzh joined
[02:55] *** zorgnax joined
[02:55] *** a2n joined
[02:56] *** a2n left
[03:01] *** shi left
[03:04] *** Eth4n joined
[03:13] <[Coke]> email does work.

[03:15] <[Coke]> You can open a new parrot ticket by emailing tickets at parrot.org

[03:40] *** lichtkind left
[03:44] *** felliott left
[03:51] *** araujo left
[03:57] *** jimmy1980 joined
[03:59] *** jimmy1980 left
[04:04] *** jimmy1980 joined
[04:08] *** jimmy1980 left
[04:09] *** jimmy1980 joined
[04:25] *** fith joined
[04:45] *** GinoMan left
[04:48] *** orafu left
[04:48] *** OuLouFu joined
[04:48] *** OuLouFu is now known as orafu

[05:03] *** Tedd1 left
[05:13] *** jimmy1980 left
[05:20] *** _twitch joined
[05:23] *** araujo joined
[05:23] *** araujo left
[05:23] *** araujo joined
[05:26] *** awwaiid left
[05:51] *** [Coke] left
[05:58] *** kaare joined
[05:58] *** kaare is now known as Guest13706

[06:03] *** cjk101010 joined
[06:03] *** Guest13706 is now known as kaare_

[06:10] *** araujo left
[06:22] *** yarrak left
[06:24] *** Gryllida joined
[06:24] *** Agu10_ joined
[06:24] <Agu10_> hi

[06:25] <Gryllida> Agu10_: jenk gave wrong advice

[06:25] <Gryllida> ...

[06:25] *** araujo joined
[06:25] *** araujo left
[06:25] *** araujo joined
[06:25] <Agu10_> oh

[06:25] <Agu10_> Gryllida, are you sure?

[06:25] <Agu10_> Gryllida, I'll just try

[06:25] <Gryllida> yes.

[06:25] <jenk> my mistake

[06:25] <Gryllida> no.

[06:25] <Agu10_> I'll just try and

[06:25] <Agu10_> we'll se

[06:25] <Gryllida> no...

[06:25] <Gryllida> It's a Perl language channel.

[06:25] <Agu10_> uh? who should I trust?

[06:25] <sorear> Who is jenk?

[06:25] <Gryllida> the /topic

[06:25] <sorear> What is happening?

[06:26] <Gryllida> sorear: jenk told Agu10_ it's #flood-like channel

[06:26] <sorear> jenk isn't in the /topic

[06:26] <Gryllida> Agu10_: when in doubt, just stay within the /topic

[06:26] <Agu10_> Gryllida, it does not say wht I can or cannot do

[06:26] <Gryllida> Agu10_: flooding at #flood is ok, obviously :)

[06:26] <Agu10_> ok

[06:26] <Agu10_> Gryllida, thanks, I'll do that

[06:27] <Gryllida> Alright.

[06:27] <Agu10_> and where to troll?

[06:27] *** Agu10_ left
[06:28] *** Gryllida left
[06:59] *** gimix joined
[07:04] *** meteorjay joined
[07:17] *** Tedd1 joined
[07:21] *** tobar joined
[07:22] <sorear> TimToady: ping (following comments)

[07:22] <sorear> while trying to convert niecza to store only one copy of the symbol table, I ran into an inconsistancy with STD and the specs

[07:22] <sorear> consider 'module Foo; sub bar is export {}'

[07:22] <sorear> STD currently creates UNIT::EXPORT::DEFAULT::bar, which is not accessible from GLOBAL

[07:23] <sorear> S11:89 says that Foo::EXPORT::DEFAULT::bar should be created

[07:37] <dalek> niecza: 00b8bdc | sorear++ | src/ (2 files):

[07:37] <dalek> niecza: Derive STD syml from Niecza tables instead of saving both

[07:37] <dalek> niecza: review: https://github.com/sorear/niecza/commit/00b8bdcf02

[07:38] *** fhelmberger joined
[07:39] *** fhelmberger_ joined
[07:39] *** fhelmberger left
[07:43] <sorear> TimToady: What is the semantic difference between STD.is_known and STD.is_name ?

[07:52] *** LeifD joined
[08:07] *** bacek left
[08:09] *** Chillance left
[08:14] *** justatheory left
[08:21] *** snearch joined
[08:23] *** soroush_ joined
[08:24] *** soroush left
[08:31] <moritz_> good morning

[08:33] <sorear> hello moritz_

[08:33] <VXZ> g'mornin

[08:35] *** noganex_ is now known as noganex

[08:36] <tadzik> o/

[08:44] *** Alias__ joined
[08:44] *** tobar left
[08:45] *** kst` joined
[08:47] *** __rnddim__ joined
[08:47] *** LeifD left
[08:47] *** Alias_ left
[08:47] *** dukeleto left
[08:48] *** bartolin joined
[08:50] *** kst left
[08:50] *** lue left
[08:56] *** ponbiki joined
[08:59] *** elb0w joined
[08:59] *** dukeleto joined
[09:00] *** LeifD joined
[09:11] *** jhuni left
[09:20] *** am0c joined
[09:22] *** roen left
[09:40] *** xinming joined
[09:41] *** am0c^ joined
[09:43] *** redicaps left
[09:43] *** am0c left
[09:46] *** am0c^ left
[09:47] *** glow joined
[09:49] <dalek> niecza: 7ab22da | sorear++ | src/ (3 files):

[09:49] <dalek> niecza: Reload module info from nam files.  Remove storable dep.

[09:49] <dalek> niecza: review: https://github.com/sorear/niecza/commit/7ab22da574

[09:51] <diakopter> sorear: does niecza do labels/gotos

[09:52] <sorear> only at the codegen level

[09:52] <sorear> &goto isn't available, but regex code desugars to use goto/labels

[09:52] <diakopter> i'd test it with p6eval, but that seems broken at the moment

[09:53] <dalek> sprixel: e0ff4d4 | diakopter++ | / (9 files):

[09:53] <dalek> sprixel: if/unless/elsif/else lexical blocks working. no return values for those blocks, though, 'cuz I'm a hater. now for labels/gotos.

[09:53] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/e0ff4d44c8

[09:58] *** dukeleto left
[09:59] *** dukeleto joined
[10:03] <dalek> niecza: 7c0434c | sorear++ | src/CompilerDriver.pm:

[10:03] <dalek> niecza: Do not load dependant modules more than once

[10:03] <dalek> niecza: review: https://github.com/sorear/niecza/commit/7c0434cb10

[10:03] * sorear out

[10:04] <diakopter> cya

[10:06] *** QinGW left
[10:09] <dalek> sprixel: c2eb6f7 | diakopter++ | / (6 files):

[10:09] <dalek> sprixel: labels/gotos working :)

[10:09] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/c2eb6f761e

[10:23] <diakopter> but no, one cannot goto from an eval EXPR to an outer label ;).  cuz that would just be wrong.

[10:32] *** bacek joined
[10:34] *** am0c^ joined
[10:38] <TiMBuS> is time not a sub

[10:38] <TiMBuS> rakudo: say time

[10:38] <p6eval> rakudo : OUTPUT«1293619113␤»

[10:38] <TiMBuS> rakudo: say time()

[10:38] <p6eval> rakudo : OUTPUT«Could not find sub &time␤  in main program body at line 22:/tmp/3o9S_u7lUE␤»

[10:38] <TiMBuS> i uh

[10:38] <TiMBuS> what is this wizardry

[10:49] <diakopter> rakudo: say time

[10:49] <p6eval> rakudo : OUTPUT«1293619765␤»

[10:49] <diakopter> rakudo: say time.WHAT

[10:49] <p6eval> rakudo : OUTPUT«Int()␤»

[10:49] <diakopter> rakudo: say &time.WHAT

[10:49] <p6eval> rakudo : OUTPUT«Could not find sub &time␤  in main program body at line 22:/tmp/HvI4mKeKGK␤»

[10:53] <dalek> sprixel: 67fc74f | diakopter++ | / (6 files):

[10:53] <dalek> sprixel: implicitly typed lexical declaration/initialization (not actually type inference, it's really just magic).

[10:53] <dalek> sprixel: add file invocation option

[10:53] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/67fc74fba3

[10:55] *** Patterner left
[10:56] *** Psyche^ joined
[10:56] *** Psyche^ is now known as Patterner

[10:59] <dalek> sprixel: 89046db | diakopter++ | sprixel/Program.cs:

[10:59] <dalek> sprixel: fix file invocation option

[10:59] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/89046db71a

[11:05] *** snearch left
[11:07] *** Patterner left
[11:22] *** rgrau joined
[11:25] *** Demonen joined
[11:26] <Demonen> Hi all.

[11:27] <Demonen> I'm having truble finding precombiled rakudo binaries for Ubuntu 9.10.  Is there such a thing?

[11:29] *** ShaneC joined
[11:34] <diakopter> seems unlikely

[11:37] *** gimix left
[11:37] *** ShaneC left
[11:37] <dalek> sprixel: f3bd3d0 | diakopter++ | sprixel/sprixel.csproj:

[11:37] <dalek> sprixel: cut .dll references; more prep for p6eval. will need to upgrade mono on p6eval server to 2.8+

[11:37] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/f3bd3d02c8

[11:37] *** LeifD left
[11:38] <TiMBuS> the only place i could think of finding one would be on launchpad

[11:38] <TiMBuS> and a quick search there only finds a very old rakudo someone uploaded last year

[11:39] *** bluescreen joined
[11:39] *** bluescreen is now known as Guest72634

[11:43] *** LeifD joined
[11:49] <TiMBuS> rakudo: multi foo($a where {say 'hmm..'}){}; foo(1);

[11:49] <p6eval> rakudo : OUTPUT«hmm..␤hmm..␤»

[11:50] <TiMBuS> called twice?

[11:54] *** wamba joined
[11:59] <colomon> Don't put side effects in your where clauses.

[12:00] <colomon> I'm pretty sure there's no guarantee how often they will be called.

[12:01] *** ShaneC joined
[12:03] *** ShaneC left
[12:10] <colomon> rakudo: multi foo($a where {say 'hmm..'}){}; multi foo($a where {say 'Boo!'; 0; }) {}; say "go"; foo(1)

[12:10] <p6eval> rakudo : OUTPUT«go␤hmm..␤Boo!␤hmm..␤»

[12:15] <TiMBuS> i dont even know how i got to this, i was just trying to figure out why a where cause would never fail when i smartmatched a param against an empty hash..

[12:16] <colomon> rakudo: my %h; say "ten" ~~ %h

[12:16] <p6eval> rakudo : OUTPUT«Bool::False␤»

[12:16] <colomon> rakudo: my %h; say Any ~~ %h

[12:16] <p6eval> rakudo : OUTPUT«Bool::False␤»

[12:17] <TiMBuS> yeah thats what im not understanding

[12:17] <colomon> yeah, getting Bool::True there would seem very odd indeed.

[12:18] *** coldhead left
[12:19] <TiMBuS> multi method joined ( $ev where {$ev.who<nick> ~~ %messages} ) {

[12:19] <TiMBuS>     say $ev.who<nick>; #prints 'Clunky'

[12:19] <TiMBuS>     say %messages.perl; #prints '{}'

[12:20] <TiMBuS> eeegh i think ill figure it out tomorrow.

[12:20] *** noganex left
[12:22] *** noganex joined
[12:26] *** masak joined
[12:27] <masak> greetings, zebras.

[12:29] <masak> what in the name of Zarquon happened tonight to bring in so many newbies at once?

[12:31] * masak places his bets on Advent Calendar + vacation

[12:31] <masak> there is also more activity on p6u.

[12:32] *** nadim left
[12:33] *** Psyche^ joined
[12:33] *** Psyche^ is now known as Patterner

[12:34] *** envi left
[12:38] *** Patterner left
[12:39] *** Psyche^ joined
[12:39] *** Psyche^ is now known as Patterner

[12:40] *** mtk joined
[12:47] *** Patterner left
[12:48] *** Psyche^ joined
[12:48] *** Psyche^ is now known as Patterner

[12:51] *** pmurias joined
[12:53] *** nadim joined
[12:58] *** [Coke] joined
[12:58] *** am0c^ left
[13:12] *** Patterner left
[13:12] <shortcircuit> p6u?

[13:14] *** daxim joined
[13:14] <shortcircuit> masak: As a way to get a feel for developer perspectives, I mentioned the Perl 6 planet in a high-profile comment on the recent Slashdot article about Tim's advent post.

[13:14] <shortcircuit> (For whatever definitions of 'high profile' remain in Slashcode, anyway)

[13:15] <masak> shortcircuit: URL?

[13:15] *** Psyche^ joined
[13:15] *** Psyche^ is now known as Patterner

[13:15] <shortcircuit> sec

[13:15] <masak> Slashdot is an exercise in skewed perspectives, but any outlinks from it are a net win, if you ask me.

[13:15] <shortcircuit> http://developers.slashdot.org/story/10/12/24/1934221/23-Years-of-Culture-Hacking-With-Perl

[13:16] * shortcircuit nods

[13:16] <masak> thanks.

[13:16] *** masonkramer left
[13:16] <shortcircuit> RC more or less debuted with a Slashdot post. I was on a 'shared hosting' account at the time. That was a pretty mess.

[13:17] <masak> oh, that comment. yeah, I saw it. that might have contributed, true.

[13:17] <masak> I would have made the connection if you hadn't referred to TimToady as "Tim" :P

[13:17] <shortcircuit> Heh

[13:17] <frettled> nice one :D

[13:17] <masak> indeed. shortcircuit++

[13:18] <frettled> "Which Tim, Berners-Lee or Toady?"

[13:18] * shortcircuit avoids pinging people, by default

[13:18] <masak> why?

[13:19] <shortcircuit> For whatever reason, most people I've encountered on IRC don't like to be pinged unless they need to respond.

[13:20] * shortcircuit shrugs

[13:20] <shortcircuit> Anyway, it looks like the comment in which I linked to the planet isn't as highly-modded as I thought.

[13:21] <shortcircuit> Er, yes it is, but I forgot to linkify the reference. -.-

[13:21] <shortcircuit> I did specifically mention the IRC channel in another comment, though.

[13:24] *** Alias__ left
[13:25] *** dma joined
[13:25] *** dma is now known as Guest11053

[13:25] *** takadonet joined
[13:25] <takadonet> hey

[13:26] *** Patterner left
[13:26] <shortcircuit> o/

[13:26] *** Guest11053 left
[13:27] <takadonet> http://www.reddit.com/r/programming/comments/et20j/perl_6_in_2010/

[13:28] <takadonet> our lovely troll HIBOU is back

[13:29] <masak> I replied to him.

[13:29] <takadonet> he replied to your reply...

[13:30] <masak> I'm currently replying to Mr. "great way to make code unreadable" imperi

[13:31] <takadonet> you have to work faster masak :)

[13:32] <masak> :)

[13:33] <huf> the language isnt readable without learning the language! what're we going to dooooooo?!

[13:38] <takadonet> wow! lots of comments for only 4 up votes

[13:39] <masak> http://www.reddit.com/r/programming/comments/et20j/perl_6_in_2010/c1apbzt

[13:41] *** felliott joined
[13:41] *** Psyche^ joined
[13:41] *** Psyche^ is now known as Patterner

[13:47] <pmurias> masak: why do you insist on replying to stupid people?

[13:48] <masak> pmurias: because impressionable people are reading what they write.

[13:49] <masak> what seems stupid to you may seem "hm, maybe he's right" to J. Random Redditer.

[13:50] <pmurias> do we care about J. Random Redditer? ;)

[13:50] <masak> as a potential lurker and reformed contributor on #perl6, sure.

[13:50] *** Patterner left
[13:52] <masak> responding to stupid criticisms might be the best chance at PR we get, besides the Advent Calendar and release announcements of different kinds.

[13:58] * diakopter agrees with masak

[13:58] <diakopter> (at least until momentum gets huge)

[13:58] <pmurias> any one knows a sensible FRP (decently documented) library in *any* language?

[13:58] <masak> the *discussions* are often quite meaningless. but stepping up and defending Perl 6, the devs, or the community often isn't.

[13:58] <pmurias> s/sensible//

[13:59] <masak> Fibre-reinforced plastic?

[14:00] <masak> Flint River Presbytery?

[14:00] <masak> Federal Republic of the Philippines?

[14:03] *** Psyche^ joined
[14:03] *** Psyche^ is now known as Patterner

[14:04] <flussence> I was thinking the best thing to do with all these people who criticise p6 without using it, is tricking them into using it

[14:04] <flussence> give them a libp6cre and show them how easy it is to do stuff

[14:05] <takadonet> flussence:  libp6cre?

[14:05] <flussence> obviously it doesn't exist yet...

[14:05] *** mtk left
[14:06] *** mtk joined
[14:06] <flussence> just a basic library that can do grammars and actions, not necessarily perl 6 itself

[14:06] <flussence> like libxslt I guess

[14:07] <flussence> but easy enough for normal humans to understand :)

[14:07] *** Patterner left
[14:09] * masak has been thinking of writing a libp6cre

[14:10] <masak> flussence: I'm not a master at retorts, but something tells me it's counterproductive to insult people on a personal level on reddit: http://www.reddit.com/r/programming/comments/et20j/perl_6_in_2010/c1ape78

[14:10] <masak> s/at/of/

[14:10] <flussence> yes :(

[14:10] * flussence downvotes self and deletes

[14:11] <masak> somehow chromatic++ always succeds in replying on a factual level to things. even when he's being attacked.

[14:11] * moritz_ submitted to HN too: http://news.ycombinator.com/item?id=2048703

[14:11] <masak> moritz_++

[14:11] <masak> HN, a chance to be insulted by Lisp weenies rather than Python/Ruby weenies! :P

[14:12] <flussence> I shouldn't post things on reddit when I'm half-awake...  I seem to do better when I'm half-asleep

[14:12] *** icwiener joined
[14:13] *** cjk101010 left
[14:19] <VXZ> Why is p6 so poorly recieved by so many?  I don't hardly ever hear anyone talking about how exciting it is, or how cool it's going to be when it's production-ready.  Wtf?

[14:19] <masak> I'm hearing people saying they're excited by it. but the proportion is about 1 to 9 to all the cargo-culted bullying.

[14:20] <masak> incidentally, that's about the proportion of people who have a relatively open mind and go find things out by themselves... :)

[14:20] <sjn> VXZ: Start doing it yourself, then maybe some of your friends might too ;-)

[14:21] <pmurias> masak: functional reactive programming

[14:21] <VXZ> sjn: Unfortunately, I know no other programmers.

[14:21] <masak> pmurias: I've heard liqui talk about that on Twitter. maybe ask him.

[14:22] <sjn> VXZ: doesn't matter. if they hear "Wow this Perl 6 thing is cool", they might take the buzz to their friends that _are_ programmers :)

[14:22] <VXZ> Maybe it just needs to be packaged differently or something...p6 needs a marketing & pr department or something?

[14:22] <sjn> "Hey, I'm not a programmer, but I heard Perl 6 seems to be a cool thing, what do you think?"

[14:23] <sjn> marketing and pr dept's are for businesses.

[14:24] <sjn> if we're not willing to talk about what we think is cool, then there's something wrong with _us_

[14:24] <sjn> having a marketing dept fix that is hardly the right approach

[14:25] <masak> "We suck at marketing... but we think Perl 6 is pretty cool." :)

[14:26] *** LeifD left
[14:26] <VXZ> *shrug*  It's just a concept.  I don't think it has to only apply to businesses.  But if it makes you feel any better, I do make a point of talking about how cool I think p6 is when I sense a person might know what I'm talking about.

[14:26] *** xinming left
[14:27] *** xinming joined
[14:27] <sjn> VXZ: what do you usually say then?

[14:27] <sjn> i.e. what features do you chose to talk about?

[14:28] <pmurias> convincing people that a non-production ready language is cool is hard

[14:28] <VXZ> Metaops, hyperops, nicer regexes, ...

[14:30] <VXZ> sigil invariance, too, if I'm talking to a non-perl programmer

[14:30] <masak> best way I've seen so far is jnthn++'s "Solved in Perl 6" talks: http://jnthn.net/papers/2009-bpw-solved.pdf

[14:30] <sjn> pmurias: rubbish. things can be cool even if they're not written in stone ;)

[14:30] <takadonet> I'm lucky that I can use any programming language at work as long as i can justified why it's the best tool for the job.  Currently that only means small scripts. Speed is the only thing stopping me from using it in large projects.

[14:31] *** timbunce joined
[14:31] <masak> takadonet: you should toy around a bit with niecza, then.

[14:32] <takadonet> masak: already have :)

[14:32] <masak> takadonet: fewer features than rakudo, but the runtime speed is significantly higher.

[14:38] *** MayDaniel joined
[14:38] <takadonet> cya everyone later

[14:38] <takadonet> os re-install time 

[14:38] *** takadonet left
[14:41] <tadzik> Demonen: there are

[14:43] <huf> http://www.reddit.com/r/programming/comments/et20j/perl_6_in_2010/c1aph1c HUH?

[14:45] <tadzik> Demonen: but seems as it's Rakudo only, not Star: https://launchpad.net/~dexter/+archive/rakudo-pkg

[14:49] <masak> huf: it may be a contrary opinion, but at least it's coherent and not filled with bile.

[14:49] <huf> true, but it's the dumbest non-troll thing i've read all week

[14:50] <masak> really? I'm currently trying to reason out why I don't agree with it.

[14:50] <huf> where do these people live when they're not on the net spouting insanities? (the people that expect to know a language without learning it)

[14:51] <huf> you cant even say what's a nuance and what's not without first learning it properly...

[14:52] *** Psyche^ joined
[14:52] *** Psyche^ is now known as Patterner

[14:52] <masak> huf: I replied: http://www.reddit.com/r/programming/comments/et20j/perl_6_in_2010/c1api52

[14:53] <huf> masak: still, i feel the main point lots of them bring up is "hurr durr i cant read this just now, it must be gibberish"

[14:54] <huf> i feel something has to be done on that point

[14:54] <masak> there will always be people reasoning that way.

[14:55] <masak> in related news, why does Lisp have so many parentheses? :)

[14:55] <masak> they must really like parentheses or something.

[14:55] <huf> because back then they didnt have perl6 to do it right? :)

[14:57] <VXZ> If these "readability" people had their way, we'd be using loops and single-character comparisons instead of regular expressions.

[14:58] <huf> no, i suspect in most cases we'd be using regexes in python

[14:58] *** Patterner left
[14:58] <huf> because through some very very strange coincidence, the language they already grok is easily readable

[14:58] <huf> odd, that

[14:59] <colomon> I've got to say, IMO it's hard to imagine a more readable version of the Fib sequence than

[14:59] <colomon> 1, 1, 2, 3, 5, 8, *+* ... *

[15:00] <colomon> I suspect anyone who was familiar with the idea of the sequence and didn't have any preconceptions about programming could understand what that code does.

[15:01] <colomon> (without understanding the details at all, perhaps.)

[15:02] <huf> i think they could guess at best

[15:02] <huf> the *+* is odd if you dont know what it is

[15:02] *** soroush_ left
[15:02] <huf> not that you need to actually *do* much to understand it

[15:03] *** agentzh left
[15:03] <huf> i can grasp most of the example p6 code i see easily, and i've done almost nothing in the language

[15:03] <colomon> but that's looking at it like a programmer.  If you like at it like a mathematician, you know the sequence is defined by addition, and hey, there's a + sign there -- that must be what does the addition!

[15:03] *** soroush joined
[15:03] <huf> :)

[15:04] <Juerd> I think it's a bit easier to read as * + *

[15:04] <huf> i'll ask my dad if he can guess it

[15:04] <huf> (he's more of a mathematician than a programmer)

[15:04] <Juerd> *+* looks like an operator with metaoperators

[15:05] *** puge joined
[15:05] <szabgab> don't forget that operators are much harder to read tahn words if you are not familiar with them

[15:06] <VXZ> This is a good point about readability.  It assumes a lot to say one thing is 'more readable' than another in some supposed universally-true kind of sense.  I might even go so far as to say that kind of statement can be indicitive of short-sightedness, ignorance, or self-centeredness.

[15:06] <szabgab> so he fact that perl is so much operator driven indeed makes it easier to write for an expert and harder to read for a beginner

[15:06] <masak> szabgab: that's very true.

[15:07] <huf> hm, really? operators are that hard?

[15:08] <szabgab> the words you usually already know from other languages 

[15:08] <szabgab> the operators are a lot more different among languages

[15:08] <szabgab> and thay are definietly not used in English

[15:08] <Juerd> szabgab: hsao ntheurd anothpc asnoth

[15:08] <szabgab> or is that jus me who does not use punctuation ? 

[15:08] <Juerd> szabgab: In other words: that's not true, at all.

[15:08] <pmurias> made up words such as car and cdr are equally unreadable as operators

[15:08] <huf> hm, but knowing english doesnt really help with the wordy things either

[15:09] <Juerd> Words are equally impossible to read if you don't know them.

[15:09] <huf> but what's not a made-up-word in programming?

[15:09] <colomon> It seems to me that operators are definitely harder to just understand than words are, but I don't think it's a beginner / expert thing at all.

[15:09] <szabgab> Juerd: that's true

[15:09] <huf> everything has its own special meaning in the context of a proglang

[15:09] <colomon> You could teach all the basic operators you're likely to run into in p6 in an hour, I'd say.

[15:09] <szabgab> but  @qqrq.length is easier to read than $@qqrq

[15:09] <mdxi> in any notation system, symbolic concision is *always* a power/readability tradeoff.

[15:09] <szabgab> $#qqrq

[15:10] <huf> szabgab: but why?

[15:10] <huf> i'm not convinced at all

[15:10] <colomon> and once you have the operators, well-written code using them is usually quite an improvement in clarity.

[15:10] <huf> also $#array isnt the same as @array.length (i hope)

[15:10] <szabgab> it is easier for someone who knows english and maybe another programming language

[15:11] <Juerd> szabgab: Well, I associate "length" with lines, and # with numbers.

[15:11] <Juerd> szabgab: So for the *number* of elements, $#foo does make more sense to me.

[15:11] <huf> it probably wouldnt help anyone coming from c

[15:12] <huf> so yeah, "remaining similar to similar languages will help people coming from those languages"

[15:12] <huf> not sure that's a worthy goal 

[15:12] *** lidden joined
[15:12] <szabgab> huf: what I say is that I understand they have difficulty

[15:12] <Juerd> The word "length" only began to make sense to me, for arrays, when I already knew some programming

[15:12] <szabgab> coming from other languages

[15:13] <huf> szabgab: oh sure, i get that part. what i dont understand is where the arrogance comes from to say "i cant read it just now, so must be their fault"

[15:13] <szabgab> huf: I think it is a general human trait :)

[15:13] <pmurias> huf: how would you like it if ! was the addition operator?

[15:13] <huf> the reaction i'd expect in such cases is to quickly google for some tutorial, or at the least stfu ;)

[15:14] <huf> pmurias: it'd take some getting used to, but i hope i'd try to look up the rationale before spouting bile

[15:14] <huf> see, i wasnt entirely happy with the ??!! thing, but then i read why it had to be done, and i'm willing to accept it

[15:14] <szabgab> huf: I think it is very human to "I don't understand, this must be crap"

[15:14] <szabgab> not clever, but human

[15:15] <huf> eh ;)

[15:15] <huf> i dont like us.

[15:15] <szabgab> :)

[15:15] <szabgab> btw can you google for *+* ?

[15:15] <szabgab> ok, rephrashe: do you get any good results ?

[15:16] <Juerd> szabgab: But should you design a language around Google's capabilities?

[15:16] <Juerd> SEO for your programming language?

[15:16] *** am0c joined
[15:16] <huf> maybe duckduckgo could solve this for perl5 and 6

[15:17] <szabgab> Juerd: sure not but that is just anothr step we need in the education

[15:17] <flussence> huf: maybe they could forward /!perl6 (.*)/ to tryrakudo :)

[15:17] <szabgab> where to go to *easily* look up code snippets

[15:18] <huf> google's codesearch deals with punctuation better, but the results are... well

[15:18] <huf> a bit without context

[15:19] <Juerd> szabgab: A Perl documentation website should just have its own specific searchengine that, when you type *+*, says it's composed of * and +, mention their respective contexts and provide links to the more specific documentation

[15:19] <pmurias> there was a project trying to achive that

[15:21] <szabgab> Juerd: and any reasonable Perl IDE should have that capability :)

[15:23] *** soroush_ joined
[15:23] *** soroush left
[15:25] <Juerd> szabgab: I don't use IDEs myself so I don't think in that direction at all.

[15:36] *** hercynium joined
[15:41] *** Psyche^ joined
[15:41] *** Psyche^ is now known as Patterner

[15:42] *** roen joined
[15:46] * colomon just paused the blog post he was writing, so he can add a new function to List::Utils for use in the post.  :)

[15:47] *** MayDaniel left
[15:49] <masak> colomon++

[15:50] <masak> I'm curious which function... but I'm prepared to wait for the post :)

[15:52] <colomon> I'm calling it sorted-merge

[15:53] <masak> I get it.

[15:53] <masak> good name.

[15:53] <colomon> it's lazy.  :)

[15:54] <colomon> and it's pushed.

[15:54] <colomon> I don't think it's a particularly elegant implementation (heavily drugged once again today) but it seems to work.

[15:54] <masak> MJD would be proud :)

[15:55] <colomon> If only I could aspire to that level.  :)

[15:56] <masak> Perl 6 certainly makes it easier :)

[15:56] *** Patterner left
[15:58] <colomon> sure enough.

[15:58] <colomon> whoops!

[15:58] <colomon> and the logic is actually reversed from what I need for my blog post.

[15:58] <colomon> hmmm....

[15:58] *** Psyche^ joined
[15:58] *** Psyche^ is now known as Patterner

[15:59] <masak> this is why dogfooding is a good thing.

[16:01] <colomon> indeed!

[16:01] <colomon> guess I just need to make sorted-merge smarter.

[16:01] <masak> please make it as dunb as you can get away with. your users will thank you :)

[16:03] <colomon> when I say "smarter", I mean, add another (optional) parameter for comparison function

[16:03] <masak> I suspected that.

[16:04] <masak> just make sure the extra customizability doesn't get in the way of the most common uses.

[16:04] <masak> that's obvious, but I'm pointing it out anyway.

[16:04] <colomon> not, "I will use weak AI to try to guess how the lists in question are sorted"

[16:04] <colomon> :)

[16:05] <masak> no please no :)

[16:05] <colomon> see, you use the logic from the sequence operator... ;)

[16:05] <flussence> rakudo: say (1,2 XZXZXZ+ 3,4) ~ '   ' ~ (1,2 X+ 3,4) # what happens to the first one here?

[16:05] <p6eval> rakudo : OUTPUT«4 5 5 6   4 5 5 6␤»

[16:06] <masak> flussence: sir, you just blew my mental stack.

[16:06] <colomon> same here

[16:06] <masak> flussence: is the question serious?

[16:06] <flussence> I was just poking around, and wondering wtf happened myself

[16:06] <masak> flussence: when you find out, please let us know :P

[16:07] * masak likes p6u today

[16:09] *** Patterner left
[16:10] *** Psyche^ joined
[16:10] *** Psyche^ is now known as Patterner

[16:14] * colomon admits that *.abs R<=> *.abs is probably not completely obvious to someone who doesn't know p6 operators and whatever.

[16:15] <flussence> apart from the R, a lot of that makes sense in p5 terms...

[16:15] <masak> if the R metaop is in a &sort block, it can usually be replaced by a .reverse after the .sort

[16:16] <colomon> masak: but that definitely will not work for a sorted merge of two infinite lists.

[16:17] <masak> true.

[16:17] <masak> which... in some semi-twisted sense... is an argument for the R metaop. :)

[16:18] <colomon> it's definitely shorter (and once you understand it, probably clearer) than -> $a, $b { $b.abs <=> $a.abs }

[16:18] <colomon> I dunno, I can see reasons to favor both.

[16:18] <colomon> either.

[16:18] <masak> niecza: grammar G { token TOP { <para> ** [\n\n] }; token para { [ . <!before \n\n> ]+ } }; say ?G.parse("foo\nbar\n\nbaz")

[16:18] <p6eval> niecza 406e042: OUTPUT«Can't locate JSON.pm in @INC (@INC contains: /home/p6eval/niecza/src /etc/perl /usr/local/lib/perl/5.10.1 /usr/local/share/perl/5.10.1 /usr/lib/perl5 /usr/share/perl5 /usr/lib/perl/5.10 /usr/share/perl/5.10 /usr/local/lib/site_perl .) at /home/p6eval/niecza/src/NAMBackend.pm

[16:18] <p6eval> ..line 1…

[16:18] <masak> locally, "Bool::False".

[16:18] <masak> tell me, am I overlooking something here?

[16:19] <masak> or should that one match?

[16:20] <flussence> looks right from where I'm standing.

[16:20] * masak submits nieczabug

[16:23] <flussence> does it work for parsing a single <para>?

[16:23] <masak> it does.

[16:24] <flussence> hm

[16:24] <masak> it also works when I replace the [ . <!before \n\n> ]+ with \w+ (and remove the in-para \n)

[16:24] <[particle]> does it work in rakudo?

[16:24] <flussence> yes.

[16:24] *** flatwhatson joined
[16:24] <masak> rakudo: grammar G { token TOP { <para> ** [\n\n] }; token para { [ . <!before \n\n> ]+ } }; say ?G.parse("foo\nbar\nbaz")

[16:24] <p6eval> rakudo : OUTPUT«Bool::True␤»

[16:24] <[particle]> it's nice to have a reference implementation.

[16:25] <masak> s/a reference implementation/two implementations/

[16:25] <masak> :)

[16:25] <flussence> s/.*/competition of some sort/

[16:25] *** WonTu joined
[16:25] <[particle]> another implementation to reference. :P

[16:25] *** WonTu left
[16:26] <flussence> silly thought, but have you tried <para> ** "\n\n" instead of []s?

[16:26] <masak> yes.

[16:26] <masak> er, wait. no.

[16:27] <masak> that shouldn't matter at all.

[16:27] <masak> but it does! o.O

[16:27] <masak> flussence++

[16:28] <flussence> stranger things have happened :)

[16:28] <masak> niecza: grammar G { token TOP { <para> ** "\n\n" }; token para { [ . <!before \n\n> ]+ } }; say ?G.parse("foo\nbar\nbaz")

[16:28] <p6eval> niecza 406e042: OUTPUT«Can't locate JSON.pm in @INC (@INC contains: /home/p6eval/niecza/src /etc/perl /usr/local/lib/perl/5.10.1 /usr/local/share/perl/5.10.1 /usr/lib/perl5 /usr/share/perl5 /usr/lib/perl/5.10 /usr/share/perl/5.10 /usr/local/lib/site_perl .) at /home/p6eval/niecza/src/NAMBackend.pm

[16:28] <p6eval> ..line 1…

[16:28] <masak> locally, "Bool::True".

[16:28] <flussence> I got my xmms code to work just by replacing "-->"s with "returns"

[16:29] *** mtk left
[16:29] <flussence> it shouldn't matter, but we're not at that point yet :)

[16:29] <masak> true enough.

[16:29] <masak> also, I don't know enough about the parser in niecza to say whether it should matter or not.

[16:31] <flussence> I saw it as one of 3 things being wrong: ** not working, [] confusing **, or strings longer than 1 char confusing **. I guessed right that time :)

[16:33] <VXZ> So, 'say (1,2 XZXZXZXZXZXZXZXZXZXZXZXZXZXZXZXZXZXZXZXZXZXZ+ 3,4)' has been running for about 20 minutes, now...my laptop's fan sounds like a jet engine at this point...

[16:33] * [Coke] catches up, and imagines instead of a PAST outputting PIR, have it output highlighted HTML.

[16:35] <flussence> VXZ: I've no idea what it does, but the end result is always the same as $first-letter + $operator

[16:36] *** awwaiid joined
[16:37] <masak> flussence: you would have a great career in bug hunting. join me in my quest against bugs! :)

[16:37] <VXZ> flussence: Yeah, I thought that might be the case.  I did it to see if it was actually doing something with all the rest, which, apparently, it is.  Now I'm just kinda exercising my appreciation of absurdity.  :)

[16:40] <VXZ> What is it *supposed* to do?  I know what X and Z do, didn't know you could put them together like that.

[16:40] <flussence> now that I think about it... nothing

[16:41] <flussence> X takes a single pair, feeds it to another Z or X (no-op), then adds them

[16:44] <flussence> rakudo: say ( [[1, 2], [3, 4]] XZXZXZ=> [[5, 6], [7, 8]] ).perl

[16:44] <p6eval> rakudo : OUTPUT«((((((1 => 5)))), ((((2 => 6))))), (((((1 => 7)))), ((((2 => 8))))), (((((3 => 5)))), ((((4 => 6))))), (((((3 => 7)))), ((((4 => 8))))))␤»

[16:44] <masak> o.O

[16:45] <allbery_b> your pairs, they are nesting.  watch out for babies

[16:45] <flussence> that one's a bit easier to read if I take out the absurdity:

[16:46] <flussence> rakudo: say ( [[1, 2], [3, 4]] XZ=> [[5, 6], [7, 8]] ).perl

[16:46] <p6eval> rakudo : OUTPUT«((1 => 5, 2 => 6), (1 => 7, 2 => 8), (3 => 5, 4 => 6), (3 => 7, 4 => 8))␤»

[16:46] *** Patterner left
[16:46] *** mtk joined
[16:47] *** Psyche^ joined
[16:47] *** Psyche^ is now known as Patterner

[16:48] <VXZ> hm

[16:55] <huf> well, apparently {{{ 1, 1, 2, *+* ... * }}} is unreadable at first glance to a couple of rather experienced c/python coders i know (one of which also knows lisp/haskell); my dad (whose last serious programming experience was in some kind of asm) got it at once ;)

[16:55] <colomon> huf: just as I was (sort of) predicting.

[16:56] <colomon> and \o/, my code approximates pi a lot better if you subtract the atan(1/239) term rather than adding it.

[16:57] <huf> colomon: hmm?

[16:58] <colomon> just before drifting off for a vicodin-fueled mini-nap, my code was insisting 3.17506526160639 was a very good approximation for pi

[16:58] *** pmichaud joined
[16:58] <allbery_b> mmm, drug-mediated coding

[16:59] <pmurias> sorear: ping

[16:59] <colomon> that's because I was using PI/4 = atan(1) = 4 * atan(1/5) + atan(1/239) instead of the correct PI/4 = atan(1) = 4 * atan(1/5) - atan(1/239)

[16:59] <pmichaud> good morning, #perl6

[16:59] <colomon> pmichaud: \o/

[16:59] <colomon> rakudo: say atan(1/239)

[16:59] <p6eval> rakudo : OUTPUT«0.00418407600207472␤»

[16:59] <masak> pmichaud! \o/

[16:59] <colomon> rakudo: say pi + 2*atan(1/239)

[16:59] <masak> pmichaud: when you're gone, we miss you.

[16:59] <p6eval> rakudo : OUTPUT«3.14996080559394␤»

[16:59] <TimToady> * *, *

[17:00] <pmichaud> masak: sorry to have not been around much lately

[17:00] <colomon> TimToady: two terms in a row?

[17:00] <TimToady> I was speaking in English

[17:00] <colomon> rakudo: say pi + 8*atan(1/239)

[17:00] <p6eval> rakudo : OUTPUT«3.17506526160639␤»

[17:00] <flussence> the middle * represents XZXZXZXZXZ

[17:00] <masak> pmichaud: it's OK. will there be a Star release tomorrow?

[17:01] <pmichaud> today or tomororw, yes.

[17:01] <colomon> huf: it will all make sense when I get this blog post finished; and the blog post will be easier to finish now that I don't have to justify pi being 3.17506526160639

[17:01] <pmichaud> then one in jan, then we'll move to a 3-mo cycle

[17:02] <masak> VXZ: a Perl 5 user who likes Perl 6: http://twitter.com/blackfog/status/20159288743829504

[17:03] *** Trashlord left
[17:03] *** Trashlord joined
[17:05] <pmurias> masak: i'm adding $a -> {...} to niecza

[17:06] <masak> nice.

[17:06] <masak> I missed it for if statements, at the point where ~~ on a regex didn't set $/

[17:06] <masak> that was... days ago. :)

[17:07] *** Trashlord left
[17:08] *** Trashlord joined
[17:09] <pmichaud> have to leave (wife needs computer) -- bbl

[17:10] <masak> nom &

[17:10] *** masak left
[17:12] *** Guest72634 left
[17:12] *** hercynium left
[17:12] *** Patterner left
[17:12] *** Psyche^ joined
[17:12] *** Psyche^ is now known as Patterner

[17:17] <pmurias> sorear: Can't use an undefined value as an ARRAY reference at /home/pawel/niecza/src/NAMBackend.pm line 96.

[17:18] *** roen left
[17:18] <moritz_> niecza: say 1

[17:18] <p6eval> niecza 406e042: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unable to load setting SAFE. at /tmp/Xj2loUEggX line 1:␤------> [32m<BOL>[33m⏏[31msay 1[0m␤Undeclared routine:␤       'say' used at line 1␤Check failed␤»

[17:19] * moritz_ recompiles it

[17:19] *** molaf joined
[17:20] <moritz_>         lib/CLRBackend.cs(421,38): error CS0411: The type arguments for method `Niecza.CLRBackend.JScalar.A<T>(int, object, System.Func<object,T>)' cannot be inferred from the usage. Try specifying the type arguments explicitly

[17:20] <colomon> loliblogged: http://justrakudoit.wordpress.com/2010/12/29/series-and-sequences/

[17:21] *** hercynium joined
[17:22] <moritz_> colomon++

[17:23] *** cdarroch joined
[17:23] *** cdarroch left
[17:23] *** cdarroch joined
[17:23] *** roen joined
[17:25] <[Coke]> ooh, blogspam on blogs.perl.org. whee.

[17:26] *** MayDaniel joined
[17:27] <[Coke]> colomon++ - that was an interesting read, and not just for perl6. danke.

[17:28] <TimToady> ooh, it's snowing

[17:29] <TimToady> 'course, I am in Seattle now...

[17:29] *** takadonet joined
[17:30] *** Patterner left
[17:30] *** Psyche^ joined
[17:30] *** Psyche^ is now known as Patterner

[17:31] <dalek> sprixel: 3abb581 | diakopter++ | / (8 files):

[17:31] <dalek> sprixel: return statement, default return values from subs

[17:31] <dalek> sprixel: (last statement's return value (or 1 if the last statement returned void))

[17:31] <dalek> sprixel: hacked-in logical operators (need to be made short-circuiting and to

[17:31] <dalek> sprixel: use temp locals instead of this thrown-together way. about 20 min work, sometime.

[17:31] <dalek> sprixel: review: https://github.com/diakopter/sprixel/commit/3abb58188c

[17:31] <takadonet> yo

[17:32] *** takadonet left
[17:32] *** takadonet joined
[17:32] <TimToady> oy

[17:32] <[particle]> it's not snowing in this part of seattle :(

[17:34] <diakopter> it's not snowing in this part of sfbay

[17:34] *** takadonet left
[17:35] *** takadonet joined
[17:35] *** takadonet left
[17:35] *** takadonet joined
[17:37] *** roen left
[17:43] *** colomon joined
[17:44] *** Patterner left
[17:45] *** Psyche^ joined
[17:45] *** Psyche^ is now known as Patterner

[17:47] *** Eth4n left
[17:58] *** Patterner left
[17:58] *** Psyche^ joined
[18:00] *** Psyche^ is now known as Patterner

[18:03] *** Eth4n joined
[18:03] *** Eth4n left
[18:03] *** Eth4n joined
[18:06] *** Patterner left
[18:08] *** shi joined
[18:09] *** fhelmberger_ left
[18:12] *** robinsmidsrod joined
[18:14] *** Psyche^ joined
[18:14] *** Psyche^ is now known as Patterner

[18:16] <sorear> pmurias: hi

[18:18] *** Patterner left
[18:19] *** icwiener left
[18:22] <sorear> pmurias: I heard you had a compile problem yesterday, but you set the paste to expire before I woke up.  Very cruel.

[18:22] <sorear> good * #perl6

[18:22] *** dukeleto left
[18:23] *** dukeleto joined
[18:23] <takadonet> sorear: yo

[18:23] *** stkowski joined
[18:24] *** MayDaniel left
[18:24] *** GinoMan_ joined
[18:26] *** GinoMan_ left
[18:27] *** GinoMan_ joined
[18:27] *** GinoMan_ left
[18:29] *** robinsmidsrod left
[18:30] *** GinoMan joined
[18:31] *** robinsmidsrod joined
[18:33] <takadonet> wow lots of comments on that reddit post

[18:33] <colomon> takadonet: link, pretty please?

[18:33] <takadonet> colomon: http://www.reddit.com/r/programming/comments/et20j/perl_6_in_2010/

[18:34] <colomon> takadonet++

[18:35] <pmurias> sorear: i use App::Nopaste

[18:35] <pmurias> sorear: hi

[18:36] <pmurias> sorear: i solved the compile problem by upgrading to the newest mono

[18:37] <takadonet> never had soo many comments on a reddit post with less then 10 upvotes

[18:39] *** rgrau left
[18:40] *** LeifD joined
[18:40] <[Coke]> reddit question - they allow duplicate postings?

[18:40] <colomon> huh.  Is it just me, or is masak's p3 radically easier than p1, p2, or p5?  (Haven't actually looked at p4 yet.)

[18:41] <takadonet> if they are on different sub reddit yes

[18:41] <pmurias> sorear: the new one is Can't use an undefined value as an ARRAY reference at /home/pawel/niecza/src/NAMBackend.pm line 96.

[18:42] <takadonet> ic someone else posted a hour ago

[18:43] <[Coke]> e.g. http://www.reddit.com/search?q=perl+6&restrict_sr=off&sort=relevance - first 2 links are to the same URL.

[18:43] <pmurias> sorear: rm -fr obj;xbuild solves that too

[18:43] <takadonet> [Coke]: one is posted in r/programming and other is in r/perl

[18:44] <[Coke]> takadonet: ok. that raises other questions, but thank you.

[18:44] <colomon> I don't have a reddit id, but it might be worth pointing out that all the Haskell examples for fib are for the simpler case of an infinite Fib sequence, while the perl 6 version is explicitly terminating the sequence.  The perl 6 version without termination is simpler, naturally.

[18:47] <sorear> rakudo: grammar G { token TOP { <para> ** "\n\n" }; token para { [ . <!before \n\n> ]+ } }; say ?G.parse("foo\nbar\n\nbaz")

[18:47] <p6eval> rakudo : OUTPUT«Bool::True␤»

[18:47] <sorear> rakudo: grammar G { token TOP { <para> ** "\n\n" }; token para { [ . <!before \n\n> ]+ } }; say ~G.parse("foo\nbar\n\nbaz")

[18:47] <p6eval> rakudo : OUTPUT«foo␤ba␤»

[18:49] <flussence> rakudo: grammar G { token TOP { <para> ** "\n\n" }; token para { [ <!before \n\n> . ]+ } }; say ~G.parse("foo\nbar\n\nbaz")

[18:49] <p6eval> rakudo : OUTPUT«foo␤bar␤␤baz␤»

[18:49] <pmurias> sorear: what does setting the ->type for a block do?

[18:50] <sorear> enables odd special-case behavior

[18:51] <sorear> like 'init' blocks are automatically added to the phaser queue

[18:52] <sorear> "voidbare" and "mainline" blocks are subject to having their lexicals transformed into globals

[18:53] <sorear> there used to be a lot more uses of block type, but most of them seem to have died in the niecza/mm branch

[18:54] <pmurias> the ->type thing seems a bit crude

[18:54] <sorear> I agree

[18:54] <sorear> it's a hack that outlived its design life

[18:56] <pmurias> i'll finish if ... -> $a {...} and see what i can do about that

[18:56] <pmurias> sorear: would having a niecza backend to any member of the lisp family be helpfull?

[18:56] <sorear> it looks like there are only four used values of type

[18:56] * pmurias has to write a project in lisp for a course

[18:57] <TimToady> just convince them that Perl 6 is a dialect of Lisp

[18:57] <sorear> regex (Metamodel.pm 979), init/end (Metamodel.pm 964), voidbare (Metamodel.pm 1179)

[18:57] <sorear> after git grep -e '->type'

[18:58] <pmurias> TimToady: can i quote you?

[18:58] *** jay_ joined
[18:58] *** shi left
[18:58] <pmurias> ;)

[18:58] <TimToady> in general, I can't stop people from quoting me...

[18:59] <pmurias> hm, i could use liskell...

[19:00] <TimToady> perlisp

[19:00] <sorear> pmurias: the second backend would probably be important no matter what it targets

[19:00] <colomon> TimToady: sitting here pondering if p6 should have car and cdr methods...  (head and tail?) 

[19:00] <TimToady> iirc, elf had a clisp backend that you might learn something from

[19:00] <allbery_b> push/pop?

[19:01] <TimToady> .key and .value

[19:01] <moritz_> .[0] and .[1..*]

[19:01] <pmurias> TimToady: kp6 had a clisp backend

[19:01] <TimToady> what do you thing 1 => 2 => 3 => 4 is?

[19:01] *** [Coke] left
[19:01] <colomon> moritz_: yes, I know how to do it now.

[19:01] <moritz_> TimToady: a bad idea?

[19:01] <TimToady> :)

[19:01] <sorear> 1 => 2 => 3 => 4 => EMPTY

[19:02] <tadzik> rakudo: (1 => 2 => 3 => 4).perl.say

[19:02] <p6eval> rakudo : OUTPUT«1 => 2 => 3 => 4␤»

[19:02] <tadzik> <lookofdisapproval>

[19:02] <TimToady> rakudo: (1 => 2 => 3 => 4).value.perl.say

[19:02] <p6eval> rakudo : OUTPUT«2 => 3 => 4␤»

[19:02] <TimToady> there's your cdr

[19:03] <pmurias> :)

[19:03] <sorear> rakudo: sub foo { gather { take 1; return } }; my @x := foo; say "Hi"; say @x.perl

[19:03] <p6eval> rakudo : OUTPUT«Hi␤(Nil())␤»

[19:03] <TimToady> if you want it, after moritz_++'s mean remark :)

[19:03] <colomon> TimToady: I was rather hoping it would work on Lists, Arrays, etc.

[19:03] <sorear> rakudo: sub foo { gather { take 1; die "pie" } }; my @x := foo; say "Hi"; say @x.perl

[19:03] <p6eval> rakudo : OUTPUT«Hi␤pie␤  in <anon> at line 22:/tmp/cNFVK1mzJR␤  in 'Any::join' at line 1␤  in 'List::perl' at line 2772:CORE.setting␤  in main program body at line 22:/tmp/cNFVK1mzJR␤»

[19:04] <TimToady> obviously, you should put a coercion from those types into Any that turns it into a pair list

[19:04] <colomon> I admit, part of wanting it at the moment is just that .[1..*] doesn't actually work in Rakudo (so far as I know) 

[19:04] <moritz_> colomon: then use 1..*-1

[19:04] <colomon> moritz_: doesn't work on an infinite list.

[19:04] <sorear> TimToady: currently in niecza a nonlocal exit from a gather block is an untrappable fatal error.  How should it work?

[19:04] <TimToady> rakudo: say Inf - 1

[19:04] <p6eval> rakudo : OUTPUT«Inf␤»

[19:04] *** Chillance joined
[19:04] <TimToady> why not?

[19:05] <TimToady> :)

[19:05] <colomon> :p

[19:05] *** jay_ left
[19:05] <LeifD> rakudo: 1/0

[19:05] <p6eval> rakudo :  ( no output )

[19:05] <TimToady> sorear: it should work better :P

[19:06] <LeifD> I get Inf. Should it not be NaN or something?

[19:06] <moritz_> rakudo: say 1/0

[19:06] <p6eval> rakudo : OUTPUT«Inf␤»

[19:06] <TimToady> a gather that cannot be reentered should be GC'd eventually

[19:06] <pmurias> sorear: documenting the nam opcodes seems to be something that would help with adding a backend considerably

[19:07] <moritz_> LeifD: probably, yes

[19:07] <TimToady> rakudo: say -1/0

[19:07] <pmurias> sorear: what does Op::LetVar do?

[19:07] <p6eval> rakudo : OUTPUT«-Inf␤»

[19:07] <TimToady> rakudo: say -1/-0

[19:07] <p6eval> rakudo : OUTPUT«-Inf␤»

[19:08] *** _twitch left
[19:08] <TimToady> I guess rakudo assumes that large values of 0 are positive :)

[19:09] <LeifD> -0 = -1 * 0, so It should not be -Inf

[19:09] <colomon> What got me thinking about it was http://www.reddit.com/r/programming/comments/et20j/perl_6_in_2010/c1apj5e

[19:09] <colomon> fib = 0 : 1 : zipWith (+) fib (tail fib) 

[19:09] <colomon> my @fib := 0, 1, (@fib Z+ @fib[1..*]); # psuedo-p6 version

[19:10] <sorear> TimToady: the caller() of a gather block will in general have already returned by the time gather code is run

[19:10] <sorear> TimToady: so the gather has no place to return to

[19:11] <TimToady> yes, it's a bug that self-referential lists tend to crash in rakudo

[19:11] <sorear> TimToady: no, I'm asking about what gather { return } should do in niecza

[19:12] <TimToady> I was speaking to colomon 

[19:12] <sorear> oh

[19:12] <moritz_> when I fix the blizkost build problems related to newest parrot changes, it complains:

[19:12] <colomon> TimToady: would you expect that to work in ideal p6?

[19:12] <moritz_> src/pmc/bkmarshal.c:310: error: ‘my_perl’ undeclared (first use in this function)

[19:13] *** justatheory joined
[19:13] <moritz_> and indeed, that var is not declared, and I wonder how it has ever worked

[19:13] <moritz_> any ideas?

[19:13] <pmurias> sorear: gather {return} is invalid perl6 code

[19:13] <pmurias> without an enclosing sub

[19:13] <sorear> moritz_: your Perl was built without -DMULTIPLICITY

[19:13] <TimToady> sorear: perhaps gather could just trap any return like a sub def

[19:14] <moritz_> sorear: so my_perl is a global variable if -DMULTIPLICITY is set?

[19:14] <sorear> moritz_: no, it's an argument that is declared by the pTHX_ macro

[19:14] <moritz_> ah

[19:14] <TimToady> or we could just say you can't use return in a gather

[19:14] <sorear> TimToady: what about exceptions?

[19:14] <TimToady> colomon: I've already expected it to work :)

[19:14] <sorear> TimToady: if a gather block dies, where can it be caught?

[19:15] <TimToady> in whatever triggered the lazy list in the first place

[19:15] <TimToady> this is yet another reason why we are trying to de-emphasize exceptions in p6

[19:16] <TimToady> it is not clear whether there should be a way for a fail() to be propagated through a lazy list

[19:16] *** envi joined
[19:17] <TimToady> though it's be speculated more than once

[19:18] <TimToady> returning some sort of "caltrop" value that will pop your tires if you drive over it :)

[19:18] <Tene> TimToady: S02 implies that augment is a lexically-scoped modification:

[19:19] <Tene> Instead of defining macros directly you may also mix in one or more grammar rules by lexically scoped declaration of a new sublanguage:

[19:19] <Tene> augment slang Regex {  # derive from $~Regex and then modify $~Regex

[19:21] <TimToady> colomon: for example, if you look at http://rosettacode.org/wiki/Counting_in_factors#Perl_6 you'll see a lazy list that uses repeat/until with self-reference to @primes

[19:22] <TimToady> it works with the repeat, but it doesn't with the obvious ... implementation

[19:24] <colomon> I think I see another List::Util function coming on...  ;)

[19:24] * diakopter can't even parse the last hour of irclog

[19:24] *** snearch joined
[19:25] <colomon> https://gist.github.com/758929

[19:25] <colomon> any ideas?

[19:26] <TimToady> another example of lazy list self-reference that doesn't work is http://wall.org/~larry/hamming

[19:27] <TimToady> it seems that iterators cannot deal with an array that gets extended while iterating

[19:29] <pmurias> sorear: and what does Op::ImmedForLoop do, as the name is a bit cryptic?

[19:30] <sorear> pmurias: a for-loop that needs to be executed immediately

[19:30] <sorear> at statement lefel

[19:32] *** Vlavv_ joined
[19:33] <Tene> TimToady: Can you confirm that that implication is inaccurate, and should be fixed?

[19:33] *** shi joined
[19:33] <TimToady> what do you mean by "fixed"?

[19:33] <TimToady> all langage changes are lexically scoped

[19:33] <TimToady> language changes too

[19:34] <Tene> TimToady: Wait, so how does augment slang work as lexically-scoped, but augment class is a global modification?

[19:34] <sorear> pmurias: I started on some nam documentation earlier; I'll prioritize getting that up to date

[19:35] <TimToady> Tene: augment is just a declarator; it's up to the thing it's declaring to decide what it means, and slangs are always lexical

[19:35] <Tene> :/ okay.

[19:35] <TimToady> was just re-using the word to avoid inventing two more declarators

[19:35] <TimToady> how could a language redefinition work any other way than lexically?

[19:36] <TimToady> at best you can export to an outer lexical scope that is being compiled currently, but that is also lexical

[19:40] <TimToady> macros are essentially the same thing

[19:43] <takadonet> http://www.reddit.com/r/programming/comments/et7ew/rosetta_code_has_352_languages_and_counting/

[19:48] <TimToady> Tene: the other way to look at it is that augment does exactly what you expect, but slangs are dynamically scoped variables in the compiler, which comes out to lexically scoped in your program

[19:51] <Tene> TimToady: Hmm, okay, I guess that's reasonable.  Just seems awkward to have a single declarator have wildly different scoping rules, but perhaps I'm biased by being grumpy about the lack of lexically-scoped class modification.

[19:51] <TimToady> it's a good thing that you cannot change someone else's language out from under them without their cooperation

[19:51] <TimToady> as I said in that discussion, what's really lexically scope there is a different dispatcher

[19:52] <TimToady> *scoped

[19:52] <Tene> Sure.

[19:58] <sorear> TimToady: http://irclog.perlgeek.de/perl6/2010-12-29#i_3128582 ?

[20:00] <TimToady> still backlogging

[20:00] <colomon> wait (and maybe this was touched on back there in stuff I didn't realize I should be looking at) -- is gather supposed to return right where it is if used in a "lazy" context?

[20:01] <TimToady> there is no implicit return to gather

[20:01] <TimToady> it's often used as the last statement though

[20:01] <TimToady> if that's what you're asking

[20:02] <sorear> currently niecza treats gather { ... } as gather { ...; take EMPTY } and panics if the block ever returns

[20:03] <colomon> no.

[20:03] <colomon> I was looking at my @fib := 1, 1, (@fib Z+ @fib[1..*]); again.

[20:04] <colomon> It seems to me that only works if you start assigning to @fib (if that's the right way of saying it) before you get to the Z+ operator.

[20:04] <colomon> I mean, it's my @fib := 1, 1, zipwith(&[+], @fib,@fib[1..*]));

[20:05] <colomon> If you try to evaluate the zipwith before doing :=, the whole thing falls apart.

[20:05] <TimToady> yes, the := has to happen first somehow

[20:06] <TimToady> haskell does this by requiring strict laziness, iiuc

[20:06] <colomon> the reason I asked about gather is that zipwith uses it internally:

[20:07] <colomon> gather while ?$lhs-list && ?$rhs-list

[20:07] <TimToady> sure, but the problem is more likely at binding time

[20:07] <TimToady> my hamming example seems to indicate that

[20:07] <TimToady> there's no gather there at all, just recursion

[20:08] <TimToady> it seems to bind to a copy of the array, not the array itself, or to an iterator that commits too soon to the length of the array

[20:10] *** timbunce left
[20:11] <dalek> niecza: 8ac15dc | sorear++ | src/ (2 files):

[20:11] <dalek> niecza: Add a couple comments for pmurias++

[20:11] <dalek> niecza: review: https://github.com/sorear/niecza/commit/8ac15dc622

[20:11] <TimToady> sorear: I believe pmichaud's immutable iterator model discards the notion of an EMPTY sentinal

[20:12] <pmurias> sorear: you can merge in the if commit

[20:12] <colomon> maybe I'm missing something (had a lot of vicodin today), but it looks to me like the problem could also be the same thing I'm thinking of with the Fib. example -- Rakudo actually tries to evaluate the right-hand side before binding it.

[20:12] <colomon> it's not strictly lazy, as you say.

[20:12] <TimToady> we need some way of dialing in the correct amount of laziness, I think

[20:13] <sorear> TimToady: yes.  EMPTY is now used in niecza only for marking the end of gathers

[20:13] <sorear> my coroutines don't return; they can only yield values

[20:13] <TimToady> sorear: well, that seems like a fossil

[20:13] <sorear> Rakudo coroutines can return

[20:13] <sorear> s/Rakudo/Parrot/

[20:14] <TimToady> called to nom &

[20:15] <colomon> lolibloggedagain: http://justrakudoit.wordpress.com/2010/12/29/perl-6-fibonacci-versus-haskell/

[20:16] *** timbunce joined
[20:16] <jasonmay> colomon: haha, I dig the subtitle for the blog

[20:16] *** mtk left
[20:17] <sorear> colomon: "I'm not sure why he thought I was the expert on this"

[20:17] <sorear> colomon: 2 words

[20:17] <sorear> colomon: Numerics grant

[20:17] <colomon> jasonmay: I believe TimToady coined that.

[20:18] <takadonet> http://www.reddit.com/r/programming/comments/et94u/perl_6_fibonacci_versus_haskell/

[20:18] <colomon> sorear: yes, but that was basic math stuff, not obscure uses of the sequence operator. 

[20:18] <colomon> Admittedly, I did a bunch of the sequence operator implementation as well.  :)

[20:19] <colomon> takadonet: did you at least read it first?  remember, I'm juiced up on vicodin atm, I may be completely incoherent.  

[20:19] <colomon> ;)

[20:19] <takadonet> takadonet: i did :)

[20:19] <colomon> oh, good.

[20:19] <sjohnson> colomon: hi

[20:19] *** y3llow_ joined
[20:19] <colomon> sjohnson: o/

[20:19] <takadonet> colomon: your post is just a very long reddit reply :)

[20:19] *** pothos_ joined
[20:19] <colomon> takadonet: indeed it is.

[20:20] <takadonet> and you don't even have a reddit account :P

[20:20] *** daxim left
[20:20] *** mtk joined
[20:21] *** y3llow left
[20:21] *** y3llow_ is now known as y3llow

[20:21] *** yarrak joined
[20:22] *** pothos left
[20:22] *** pothos_ is now known as pothos

[20:23] *** Psyche^ joined
[20:25] *** Vlavv_ left
[20:25] <colomon> takadonet++

[20:26] *** MayDaniel joined
[20:27] <takadonet> karma takadonet

[20:27] <aloha> takadonet has karma of 24.

[20:27] *** Psyche^ left
[20:27] <colomon> takadonet++

[20:28] <colomon> # just because it was too low before

[20:28] *** Vlavv_ joined
[20:28] <takadonet> hehe

[20:29] <colomon> moritz_: you'd better watch it, I've got three of masak's problems working now.  :)

[20:30] <colomon> p5 looks really hard.

[20:31] *** __rnddim__ is now known as lue

[20:31] <lue> ohai o/

[20:32] <colomon> \o

[20:33] *** mtk left
[20:34] *** mtk joined
[20:34] <moritz_> colomon: I've got 4 submitted, and p4 good enough to pass base-test

[20:35] <colomon> p4 is the last one you haven't submitted?

[20:35] <moritz_> correct

[20:35] <moritz_> p5 is a solved problem, there are good algorithms for it

[20:35] <colomon> but not simple algorithms.

[20:37] *** Psyche^ joined
[20:37] *** Psyche^ is now known as Patterner

[20:42] *** Patterner left
[20:43] *** [Coke] joined
[20:46] *** mtk left
[20:49] <pmurias> sorear: is it possible to see the NAM in a pretty printed for or would i have to add that myself?

[20:51] *** mtk joined
[20:55] *** jaldhar joined
[21:01] *** LeifD left
[21:02] *** ggoebel joined
[21:02] *** snearch left
[21:05] *** coldhead joined
[21:08] *** Psyche^ joined
[21:08] *** Psyche^ is now known as Patterner

[21:08] <tadzik> hello girrafes

[21:08] *** dukeleto left
[21:09] *** dukeleto joined
[21:12] <lue> hello, fellow giraffe o/

[21:12] *** mtk left
[21:14] *** dju_ joined
[21:14] *** dju_ left
[21:14] *** dju_ joined
[21:14] *** mtk joined
[21:14] *** dju_ left
[21:17] *** spq1 joined
[21:20] <colomon> [||] sliding-window-wrapped(@.stones, 2).flat.map(* && *);

[21:21] <tadzik> "oh wow, this Perl thing is so unreadable!" :)

[21:23] <colomon> yeah, that may be a little excessive.  but it's too tasty to resist.

[21:23] <Tene> colomon: [||]?  why not &any?

[21:23] <colomon> Tene: because I'm junctophobic?

[21:24] <moritz_> rakudo: *.&say.(5)

[21:24] <p6eval> rakudo : OUTPUT«Whatever()<0x6e8de28>␤invoke() not implemented in class 'Boolean'␤  in main program body at line 22:/tmp/kxTX52BKEo␤»

[21:25] <moritz_> rakudo: *.say.(5)

[21:25] <p6eval> rakudo : OUTPUT«5␤»

[21:25] *** Patterner left
[21:25] * moritz_ submits rakudobug

[21:26] *** MayDaniel left
[21:29] <moritz_> rakudo: (*.&say).(5)

[21:29] <p6eval> rakudo : OUTPUT«Whatever()<0x6d86818>␤invoke() not implemented in class 'Boolean'␤  in main program body at line 22:/tmp/LtzDgrVirW␤»

[21:32] *** Psyche^ joined
[21:32] *** Psyche^ is now known as Patterner

[21:44] <pmurias> sorear: i'm writing a pretty printer for nam

[21:45] *** mtk left
[21:46] *** mtk joined
[21:48] *** mtk left
[21:49] *** yarrak left
[21:53] *** Patterner left
[21:53] *** GinoMan left
[21:58] <pmurias> sorear: shouldn't ann have the file position instead of the line number?

[21:59] <pmurias> ah there is #XXX marker for that

[22:08] <tadzik> http://www.reddit.com/r/programming/comments/et94u/perl_6_fibonacci_versus_haskell/c1ardzu

[22:08] <tadzik> *SCNR*

[22:08] <flussence> heh :)

[22:16] *** masak joined
[22:17] <lue> hai masak o/

[22:17] <masak> tadzik: we hug trolls on #perl6 -- please do not attempt to cleave them in twain with dripping sarcasm elsewhere: http://www.reddit.com/r/programming/comments/et94u/perl_6_fibonacci_versus_haskell/c1arfbk :)

[22:18] <masak> there will always be noise on reddit. let's not contribute to it unnecessarily.

[22:18] <lue> (I personally hesitate referring to Perl 6 as Perl, but that's just me.)

[22:19] <lue> I would think looking the same before & after encryption would be quite an acheivment. I read that as a compliment :)

[22:19] <masak> lue: I usually refer to Perl 6 as a Perl, but I no longer think of Perl as just a single language. it's more... fork-shaped.

[22:21] <colomon> masak: let me encourage you to respond to this one: http://www.reddit.com/r/programming/comments/et94u/perl_6_fibonacci_versus_haskell/c1arc7u

[22:21] * masak looks

[22:21] * colomon is still not registers on reddit

[22:21] <lue> Agreed. I just say "Perl 6" to avoid ambiguity/hatemail/etc. :)

[22:21] <colomon> masak: I think he means *+* instead of +

[22:22] <colomon> so it's a fine question to explain how simple ideas make powerful combinations in Perl 6

[22:22] <masak> *+* was problematic on HN too. I had to write it out as "star-plus-star"

[22:23] <masak> but since reddit uses Markdown, writing `*+*` should help.

[22:23] <masak> Markdown++

[22:25] * masak writes a reply

[22:25] <colomon> masak++

[22:27] <lue> rakudo: my $begin = DateTime.new("1963-11-23T17:15:00Z"); my $fiftyyears = DateTime.new("2013-11-23T17:15:00Z"); say $fiftyyears - $begin

[22:27] <p6eval> rakudo : OUTPUT«Can't take numeric value for object of type DateTime␤  in 'Any::Numeric' at line 1420:CORE.setting␤  in 'infix:<->' at line 7369:CORE.setting␤  in main program body at line 22:/tmp/cP0YBqpiFG␤»

[22:27] <lue> methinks that's a bug.

[22:27] *** wamba left
[22:29] <masak> http://www.reddit.com/r/programming/comments/et94u/perl_6_fibonacci_versus_haskell/c1arivp

[22:31] <masak> lue: I don't see anything about DateTime arithmetics in S32.

[22:31] <masak> lue: something in me agrees that that should work, though.

[22:34] <lue> I can see why $fiftyyears - 34 shouldn't work (34 what?), but two DateTime objects should.

[22:35] <masak> *nod*

[22:35] <masak> that's my take on it as well right now.

[22:35] <masak> at least two DateTime objects with proper time zones.

[22:36] *** Psyche^ joined
[22:36] *** Psyche^ is now known as Patterner

[22:37] <pmurias> masak: i wander what happened to the velociraptor/accelraptor perls proposal?

[22:37] <masak> pmurias: you should ask mst, its main champion.

[22:38] <pmurias> was it public or did i spill the secret? ;)

[22:38] <lue> I'm also curious on situations where you want to get the time 1 hour from now, maybe something like    + hours(1)    ? Anyway, shall I type up arithmetic for DateTime? Subtraction for sure, at least for now.

[22:40] <masak> lue: I don't know what a DateTime Duration analogoue would be called, but... constructing such a beast with some nice constructor syntax (Dur.new(:hours(1))) and then adding it, would be one way to do it.

[22:40] <masak> lue: also, I'm not sure that necessarily belongs in core.

[22:41] <masak> certainly anyone who specs it would have to provide a working implementation, too. :)

[22:42] <moritz_> especially for the interesting case of Duration.new(:month(1.5))

[22:42] <lue> yeah :) well, first things first, I think I should spec (and then implement in Rakudo) subtraction arithmetic for two DateTime objects.

[22:42] * moritz_ -> sleep

[22:42] <lue> night moritz_ o/

[22:43] <masak> colomon: I think this is for you to answer: http://www.reddit.com/r/programming/comments/et94u/perl_6_fibonacci_versus_haskell/c1arjk1

[22:44] <masak> moritz_: that's why it needs to be a DateTimeDuration and not a Duration. basically a lot of obvious laws of addition and subtraction would be broken.

[22:45] *** Trashlord left
[22:46] <lue> [and all I wanted to do was to take two DateTime objects and subtract them to see how slow my Pod parser currently is :)]

[22:46] <masak> I've done timings like that.

[22:46] *** Trashlord joined
[22:46] <masak> I think I used &now, though.

[22:46] <masak> rakudo: my $t1 = now; sleep 3; my $t2 = now; say $t2 - $t1

[22:46] <p6eval> rakudo : OUTPUT«3.20383275261324␤»

[22:47] <masak> wow, that's pretty inaccurate.

[22:47] <flussence> that's not pi at all!

[22:47] <masak> :)

[22:47] *** Patterner left
[22:48] <lue> I happened to take two times from &time and put them in DateTime objects to get a duration faster.

[22:48] *** Psyche^ joined
[22:48] *** Psyche^ is now known as Patterner

[22:48] <sorear> good * #perl6

[22:49] <masak> lue: Duration is atomic time, so by that reasoning you should have used &now.

[22:49] <masak> sorear! \o/

[22:49] <sorear> pmurias: I support this

[22:49] <lue> (7m53s for a 22 line document O.o)

[22:49] <lue> hello sorear o/

[22:50] <lue> an ill-formated document, but still (e.g. used =end when I should've typed =end head1)

[22:51] <masak> lue: if you're using 'regex' rather than 'token' or 'rule', your grammar may waste a lot of time doing useless backtracking.

[22:52] <lue> ah. Now that I fixed my test file, it parsed in an instant, but didn't parse the whole thing :)

[22:52] <flussence> the bit on the right of a ... is tested using ~~, right?

[22:53] <flussence> wait, that sounds wrong.

[22:53] <flussence> boolean?

[22:53] * flussence confuses self

[22:53] <masak> flussence: ~~

[22:53] <flussence> ok

[22:54] <masak> flussence: it wasn't always that way -- before, there was an exception which allowed you to write "100" rather than "* >= 100".

[22:54] *** Patterner left
[22:55] <lue> So I'll just s:g/regex/token/. When it breaks, I'll undo that until it stops breaking :P

[22:55] *** Psyche^ joined
[22:55] *** estrabd left
[22:56] <masak> lue: well, I'd recommend a bit more comprehension than that... :)

[22:56] <masak> ...but just mechanically substituting might be a good first thing to try.

[22:57] <diakopter> phenny: ask sorear (and moritz_) would you mind if I upgraded mono on host04 to 2.8 (for latest perlesque/sprixel)?  alternatively, I could build/install one just for perlesque/sprixel.

[22:57] <phenny> diakopter: I'll pass that on when sorear is around.

[22:57] <diakopter> hey reddit, I'm a doofus

[22:58] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_operator_tablet

[22:58] <dalek> niecza: a702187 | sorear++ | lib/ (2 files):

[22:58] <dalek> niecza: Allow exceptions to pass to coroutine dynamic callers (#17)

[22:58] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a702187186

[22:58] <pmurias> diakopter: niecza works on 2.8.1

[22:59] <masak> I'm not sure we've ever been as present in social media as we have been today. Reddit, HN, Twitter...

[22:59] <sorear> I seem to have accidentally depended on some aspect of gmcs 2.8+'s generic type inference

[22:59] <phenny> sorear: 22:57Z <diakopter> ask sorear (and moritz_) would you mind if I upgraded mono on host04 to 2.8 (for latest perlesque/sprixel)?  alternatively, I could build/install one just for perlesque/sprixel.

[23:00] *** Psyche^ left
[23:00] *** tty234 joined
[23:00] <diakopter> pmurias: okay... but what's installed on host04 is 2.6.something

[23:01] <diakopter> pmurias: so my question to sorear/moritz was "can I upgrade mono on my own server?" :P

[23:01] <diakopter> fsdo server

[23:02] <diakopter> to be precise, fsuo (for some *use* of) "server"

[23:03] <diakopter> I mean, maybe there's a mono 2.8 installed someplace I don't know about

[23:03] <sorear> pmurias: you don't seem to have actually committed anything for if $expr -> $true { }

[23:03] <diakopter> but the system one is 2.6

[23:03] * flussence attempts to answer that last reddit comment

[23:04] <pmurias> sorear: i noticed that right now, pushed

[23:05] *** araujo left
[23:06] *** araujo joined
[23:07] *** jferrero joined
[23:08] *** glow left
[23:08] <flussence> masak: what did you just tell me and tadzik? :)

[23:09] <masak> man, that was quick.

[23:09] <masak> to be fair, he deserves it. :/

[23:09] <masak> (we're discussing this: http://www.reddit.com/r/programming/comments/et94u/perl_6_fibonacci_versus_haskell/c1armxe )

[23:09] <flussence> I know :)

[23:09] <masak> note, though, that I'm not attacking *him*.

[23:10] <masak> kinda.

[23:10] <lue> masak: It's only because I haven't bothered to go "does this need backtracking?" for every regex in my grammar yet :) .

[23:10] <masak> lue: the general rule of thumb is that backtracking should be off by default and only switched on when you've determined you need it.

[23:11] <masak> lue: in that sense, 'token' is a nice declarator to start with.

[23:12] *** patrickas joined
[23:12] <patrickas> phenny?

[23:12] <phenny> patrickas: 03 Dec 14:23Z <smash> tell patrickas yes sir, running the scripts right now

[23:13] <patrickas> Thanks honey!

[23:13] <patrickas> AHOI!

[23:13] <masak> hi patrickas! \o

[23:14] <patrickas> masak \o/

[23:14] <masak> patrickas: it's that time of month again... :)

[23:14] <lue> Is there a way of creating a 'fallback' prototoken, similar to default in given/when statements? I have the feeling I may end up using it for ambient material...

[23:14] <masak> patrickas: and I keep thinking of the FUTURE...

[23:15] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[23:15] <patrickas> hehehe the PAST shall be left behind!

[23:16] *** rindolf joined
[23:16] <rindolf> Hi all.

[23:16] <sorear> pmurias: 'if (@{$true_block->body->signature->params}) {' doesn't do what you think

[23:16] <rindolf> Happy new year.

[23:16] *** lichtkind joined
[23:16] <sorear> Hello rindolf

[23:16] <rindolf> Will there be a Rakudo Star release this month?

[23:16] <sorear> pmurias: bare blocks have an implicit $_ parameter (possibly a STD buglet)

[23:17] <masak> rakudo: { say $_ }(42)

[23:17] <p6eval> rakudo : OUTPUT«42␤»

[23:17] <lichtkind> rakudo: say 'a' x 3

[23:17] <p6eval> rakudo : OUTPUT«aaa␤»

[23:17] <masak> sorear: bare blocks *do* have an implicit $_? parameter.

[23:18] <patrickas> Btw after commenting on reddit more than ever, I kind of think it is a shame that moritz++'s example that included the sequence oprator using the up to but excluding variant with Code as terminating condition ended up being the first encounter of many perople with the sequence op and perl 6, ETOOMANYNEWFEATURES

[23:18] <masak> indeed.

[23:18] <sorear> say 2 + 2; # *good* first example of Perl 6.

[23:19] <masak> I almost tweeted today: "Things I learned in 2010: if you want people to have an allergic reaction to Perl 6, show them the sequence operator."

[23:19] <lichtkind> sorear: thats how i started the ops section of my perl 6 tut :)

[23:20] <pmurias> masak: it does but if notices that the parameter is implicit

[23:20] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[23:21] <masak> pmurias: oh, true.

[23:21] <masak> rindolf: happy new year. yes, there will be a Rakudo Star release this month.

[23:21] <masak> pmichaud said so.

[23:22] <slavik1> ooh, that's a good one :D

[23:22] <pmurias> should i remove useless uses of eval from the spec tests?

[23:23] <masak> that's a question for moritz_++ to answer.

[23:23] <slavik1> is that a good resource to use? the perlfoundation link about? it is awesome!

[23:23] <patrickas> masak: Mabye introducing the sequence op where it is the only new concept can be much more digestable like: 0,1, sub ($a,$b) {$a+$b} ... Inf then moving onto more complex cases

[23:23] <masak> pmurias: I'd lean towards "yes", though.

[23:23] <pmurias> ask we have fudging now

[23:24] <patrickas> sorear: OK, point well taken :-)

[23:24] <masak> patrickas: even `1, 2, 4 ... Inf` is quite a bit nicer.

[23:24] <rindolf> masak: OK, thanks.

[23:24] <patrickas> masak: oh sure ... I meant the fibonacci example specifically

[23:24] <masak> oh, right.

[23:25] <colomon> I'd argue that talking about ... Inf is a mistake.

[23:25] <masak> well, empirical evidence suggests that the fibonacci example works on mathematicians, but not on Python, C++, and Ruby people.

[23:26] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_operator_tablet

[23:26] <colomon> It made sense when the sequence operator took a Numeric value and did an implicit less than with it.

[23:26] <arnsholt> I'd argue for using '... *' instead of '... Inf'

[23:26] <pmurias> sorear: would optional arguments be hard?

[23:26] <arnsholt> But of course that'd require introducing * first =)

[23:26] <colomon> but by the current sequence def, ... Inf is in prinicple no different than saying ... "blue"

[23:27] <masak> colomon: oh, is that your argument? then I don't buy it.

[23:27] <colomon> (assuming your sequence is of numbers, anyway.)

[23:27] <masak> colomon: 'Inf' is a perfect piece of documentation for any human reading that line of code.

[23:27] <masak> colomon: "blue" isn't.

[23:27] *** kaare_ left
[23:27] <patrickas> colomon: I get why ...Inf is not as good as ... Closure but why is it inferior to ... * ? the latter is not generating a closire ? so it is not helping in your case!

[23:28] *** timbunce left
[23:28] <colomon> Yes, but Inf implies it has some meaning to the sequence operator, and it doesn't.  It's just something that will never match.  (Unless it does, of course.)

[23:28] <diakopter> sorear: mono 2.8?

[23:29] <colomon> rakudo: say 1, 2, Inf, 3, 4 ... Inf

[23:29] <p6eval> rakudo : OUTPUT«12Inf␤»

[23:29] <colomon> rakudo: say 1, 2, Inf, 3, 4 ... *

[23:29] <p6eval> rakudo : OUTPUT«12Inf34»

[23:29] <colomon> rakudo: say 1, 2, *, 3, 4 ... *

[23:29] <patrickas> colomon: same with ...*

[23:29] <p6eval> rakudo : OUTPUT«12Whatever()<0x5a78d88>34»

[23:29] *** mdxi joined
[23:29] *** c1sung joined
[23:29] *** charsbr_ joined
[23:29] *** eternaleye joined
[23:29] *** sjohnson joined
[23:30] <colomon> no, ... * explicitly means "there is no terminal condition"

[23:30] *** Psyche^ joined
[23:30] *** Psyche^ is now known as Patterner

[23:30] <masak> colomon: I don't program to please the sequence operator. I program to make my code readable. `1, 2, 4 ... Inf` is readable.

[23:31] <masak> colomon: and don't come telling me it *doesn't* stop at infinity. :P

[23:31] *** IRSeekBot joined
[23:32] <sorear> pmurias: optional arguments are already available?

[23:33] <patrickas> colomon: I just think the "less guessing required with ... Inf" for people reading their first perl6 code ever is a win even if they happen to be accidentally parse it correctly for the wrong reasons.

[23:35] <masak> colomon: I'm not catering to the newcomer in writing "Inf". I'm using a value which I think represents the endpoint of my sequence more accurately than "*". your objection stems from being too intimate with the actual implementation of the sequence operator.

[23:35] <patrickas> not that I am advicating it is better used in actual code, just as a first contact in tutorials with the ... op

[23:35] *** timbunce joined
[23:35] <colomon> masak: I'm telling you that 1, 2, 4 ... Inf looks great, and is probably slightly more comprehensible to someone who knows nothing about Perl 6 -- but it gives a false impression of why it works, and that's apt to cause trouble further down the line.

[23:35] <masak> I agree with what you say up until the double dashes.

[23:36] <pmurias> sorear: nice

[23:36] <masak> as long as the meaning is received rightly, I don't care what impressions it gives as to the inner workings of infix:<...>. it's up to each and every programmer to educate themselves in how their language works.

[23:37] <arnsholt> The educator also has a certain degree of responsibility to make sure the student understands as much as possible

[23:38] <masak> put differently, I'm not willing to dumb my code down just because it might help other people learn Perl 6 better. I want to explore using Perl 6 as an unhampered tool for expressing algorithms nicely.

[23:39] *** timbunce left
[23:40] <dalek> niecza: 346f7a3 | pmurias++ | docs/nam.pod:

[23:40] <dalek> niecza: [nam] document ann

[23:40] <dalek> niecza: review: https://github.com/sorear/niecza/commit/346f7a35cb

[23:40] <dalek> niecza: 2b5ec16 | pmurias++ | / (2 files):

[23:40] <dalek> niecza: Missing part of d9e873f971397e132986c4cde663de461fde5dad

[23:40] <dalek> niecza: review: https://github.com/sorear/niecza/commit/2b5ec16ee6

[23:40] <dalek> niecza: 3ded8fd | sorear++ | / (7 files):

[23:40] <dalek> niecza: Merge remote branch 'pmurias/master'

[23:40] <dalek> niecza: review: https://github.com/sorear/niecza/commit/3ded8fd3f4

[23:40] <dalek> niecza: 229e491 | sorear++ | / (2 files):

[23:40] <dalek> niecza: Fix whitespace

[23:40] <dalek> niecza: review: https://github.com/sorear/niecza/commit/229e4917cc

[23:40] <pmurias> masak: if something is meant as an evangelizing blog post using every little Perl 6 trick might not the best thing

[23:41] *** silug left
[23:41] <masak> pmurias: of course not.

[23:42] <masak> but we're talking about `1, 2, 4, ... Inf` here, and the fact that `Inf` *really* means "a value that won't ever match" seems less important to me than the fact that it conveys "and it goes arbitrarily high" to the unacquainted user.

[23:43] <sorear> yes, much more readable than 1, 2, 4, ..., -1/12

[23:43] <masak> and even slightly more readable than `1, 2, 4 ... *`, in my opinion.

[23:43] <patrickas> or 1,2,4 ... 9 for that matter :-)

[23:43] <masak> because the star there is a Perl 6 idiom.

[23:44] <Tene> rakudo: say (1,2,4 ... 9)[1..10]

[23:44] <p6eval> rakudo : OUTPUT«2481632641282565121024␤»

[23:44] <Tene> rakudo: say (1,2,4 ... -42)[1..10]

[23:44] <p6eval> rakudo : OUTPUT«2481632641282565121024␤»

[23:44] <masak> the point that "blue", or "-1/12", or "9" all would work similarly well, is well taken.

[23:44] <masak> I still prefer "Inf" in this case.

[23:44] <masak> YMMV.

[23:44] <Tene> rakudo: say Inf > 10

[23:44] <p6eval> rakudo : OUTPUT«Bool::True␤»

[23:44] <Tene> rakudo: say -Inf > 10

[23:44] <p6eval> rakudo : OUTPUT«Bool::False␤»

[23:45] <patrickas> I suppose if the user is already familiar with "Whatever" colomon's point has more weight, I am just getting the feeling it is a shame that people are meeting it for the first time around the sequence operator.

[23:45] *** timbunce joined
[23:45] <patrickas> masak: I mention 9 because I am still of two minds about it

[23:46] <masak> Tene: having "Inf" and "-Inf" in the language as numeric values is a real asset, too. some algorithms expressed in language that don't have those contain lines of contortions to compensate for that lack.

[23:46] <masak> in Perl 6, those algorithms sometimes get embarassingly simple.

[23:47] <masak> ooh, I can definitely see a use for KeyHash[Num, Inf] now.

[23:47] <lue> if it were a long time ago, I'd point out that * is two less characters to type, and saves space. :)

[23:47] <colomon> o?

[23:47] <masak> so maybe it is a good idea to keep the $default parameter there.

[23:48] *** plobsing left
[23:48] *** silug joined
[23:48] <masak> but I still think it should default to ::T.^default

[23:48] <masak> colomon: there are some graph algorithms where hashes essentially start with all values at Inf...

[23:48] <lue> nom time, bye! o/

[23:49] *** plobsing joined
[23:49] <colomon> masak: ooo, cool.

[23:49] * colomon is trying to figure out how to elegantly work with rings of stones.

[23:50] *** timbunce left
[23:50] <patrickas> Anyways, good night, belated merry xmas and early happy new year to all ! :-)

[23:50] <colomon> merry new year!

[23:51] <masak> heh. it seems that p4 will be the big test for people. :)

[23:51] <colomon> really?  I think p5 is worse.

[23:51] <Tene> masak: To me, it feels like a language wart that unterminated sequences don't use that parameter.

[23:51] *** patrickas left
[23:51] <masak> colomon: I'm not ready to say too much before the contest ends, but I essentially screwed up and made p3 easier than I had planned.

[23:52] <colomon> p3 did seem very easy.

[23:52] <Tene> If you're not expecting it to terminate, then it shouldn't be checking against anything at all, not just "something that I as the programmer know will never match"

[23:52] <masak> Tene: I know what you mean.

[23:52] <masak> Tene: with Inf, it should be easy enough to put in an optimization...

[23:53] <Tene> masak: Intuitively, I'd suspect something like "In the case that the compiler can determine that it will never match, an implementation is allowed to generate items without checking for termination conditions" or something...

[23:53] <masak> something like that.

[23:53] <Tene> Feels kind of like it's not factored out quite right, though, but that may just be a consequence of fitting such a variety of behaviour in ...

[23:53] *** GinoMan_ joined
[23:53] <colomon> but note that it can't do that in the general case, because Inf is a value that might actually be reached.

[23:54] <masak> nod.

[23:54] <Tene> What operations generate Inf instead of NaN?

[23:54] <colomon> rakudo: say 1/0

[23:54] <p6eval> rakudo : OUTPUT«Inf␤»

[23:54] *** Patterner left
[23:54] <Tene> I thought that was supposed to generate NaN?

[23:54] <pmurias> what is else -> $c {...} supposed to do?

[23:54] <Tene> Perhaps I misremembered.

[23:54] <Tene> pmurias: context?

[23:55] *** Psyche^ joined
[23:55] *** Psyche^ is now known as Patterner

[23:55] <dalek> roast: 4ad13e0 | pmurias++ | S04-statements/if.t:

[23:55] <dalek> roast: remove test case duplicated in S04-statement-modifiers/if.t

[23:55] <dalek> roast: review: https://github.com/perl6/roast/commit/4ad13e0c73

[23:55] <dalek> roast: f256af3 | pmurias++ | S04-statements/if.t:

[23:55] <dalek> roast: add fudge markers for niecza

[23:55] <dalek> roast: review: https://github.com/perl6/roast/commit/f256af3ada

[23:55] <pmurias> if 1 {} else -> $c { what is $c supposed to contain }?

[23:56] <masak> Tene: my maths sense also tells me that should give NaN. but IEEE-something disagrees, IIRC.

[23:56] <colomon> and remember the sequence operator is general -- it can be a sequence of anything, generated by any arbitrary function.

[23:56] <Tene> pmurias: If anything, I'd expect it to contain the value of the last condition to not match.

[23:57] <pmurias> it does that

[23:57] <pmurias> sorear: what's a bit funny is that the test for notbinding $_ didn't notice the bug

[23:58] *** GinoMan_ left
[23:59] *** timbunce joined
