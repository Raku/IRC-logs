[00:00] *** orafu joined
[00:00] <ingy> star: $_ = 'hello'; .say()

[00:00] <p6eval> star 2010.09:  ( no output )

[00:01] <ingy> star: 'hi'.say

[00:01] <p6eval> star 2010.09:  ( no output )

[00:04] <ingy> star: say 'hi'

[00:04] <p6eval> star 2010.09:  ( no output )

[00:04] <sjohnson> rakudo: say 'hi'

[00:04] <p6eval> rakudo : OUTPUT«hi␤»

[00:04] <sjohnson> .oO(???)

[00:05] <ingy> rakudo: $_ = 'hi'; .say

[00:05] <p6eval> rakudo : OUTPUT«hi␤»

[00:05] <ingy> rakudo: $_ = 'hi'; .= ' world';.say

[00:05] <p6eval> rakudo : OUTPUT«===SORRY!===␤Confused at line 22, near ".= ' world"␤»

[00:05] <ingy> rakudo: $_ = 'hi'; $_ .= ' world';.say

[00:06] <p6eval> rakudo : OUTPUT«===SORRY!===␤Quoted method name requires parenthesized arguments at line 22, near ";.say"␤»

[00:11] *** risou_ left
[00:12] <ingy> sorear: what debian mono package should I install for niecza?

[00:13] <ingy> niecza: say 'sorear'

[00:13] <p6eval> niecza 914f55d: OUTPUT«sorear␤»

[00:13] *** orafu left
[00:14] *** orafu joined
[00:15] *** Chillance left
[00:25] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_lookup_tablet

[00:25] <diakopter> ingy: I didn't know there was one..

[00:26] *** hanekomu left
[00:28] *** orafu left
[00:29] *** orafu joined
[00:30] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_lookup_tablet

[00:33] *** masonkramer left
[00:36] <dalek> tpfwiki: (Herbert Breunung)++ | http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[00:56] <sorear> ingy: dunno, I installed from source.  I know you need libmono2.0-cil

[00:56] <sorear> moritz would have the full list

[00:58] <sorear> you'll also definitely need mono-gmcs and mono-xbuild

[00:59] <sorear> ah! mono-complete

[00:59] <sorear> "Install this package if you want to run software ... not ... from a Debian package"

[01:00] *** redicaps joined
[01:25] *** bluescreen joined
[01:25] *** bluescreen is now known as Guest49812

[01:26] *** nymacro joined
[01:30] *** Guest49812 left
[01:34] *** bluescreen_ joined
[01:37] *** bluescreen_ left
[01:40] *** bluescreen_ joined
[01:43] <sorear> TimToady: What do <( and )> do in subrules?

[01:48] *** bluescreen_ left
[01:50] <ingy> sorear: where is the name Niecza from?

[01:50] <sorear> masak

[01:50] <ingy> any idea what it means

[01:51] <sorear> it's a badly misremembered line from a joke dub of a music video on youtime

[01:51] <sorear> ube

[01:51] <ingy> cool

[01:53] <ingy> sorear: I just showed Damian the irc log

[01:54] <ingy> he thought I said Nietzsche earlier

[01:54] <ingy> and he thinks it should actually be called Nietzsche

[01:55] <colomon> "That which does not crash you makes you stronger."

[01:55] <ingy> that which requires mono-complete makes you stronger

[01:56] <colomon> ingy: ask Damian how his p6 modules are coming.  :)

[01:58] <sorear> ingy: which irc log?

[02:01] <sorear> also, the name Nietzsche is ... taken.

[02:05] * sorear can't imagine Niecza is very TheDamian-compatible

[02:06] *** bluescreen joined
[02:07] *** bluescreen is now known as Guest86192

[02:08] <TimToady> sorear: all they do is change .from and .to, as usual

[02:12] <sorear> TimToady: consider my regex foo { a )> b }; "abc" ~~ /<&foo>c/; "ab" ~~ /<&foo>b/

[02:12] <sorear> which one matches?

[02:19] *** TypeNameHere joined
[02:20] <TimToady> the second one does

[02:21] *** whiteknight joined
[02:21] <TimToady> what follows )> is like a lookahead

[02:25] <ingy> sorear: /tmp/tmp52a1123b.tmp: 1: viv: not found

[02:25] <ingy> what's viv?

[02:30] *** envi joined
[02:35] *** dd-sphere joined
[02:36] *** gimix joined
[02:45] *** TypeNameHere left
[03:06] *** Guest86192 left
[03:15] *** hercynium joined
[03:21] *** whiteknight left
[03:30] *** kanishka joined
[03:36] *** satyavvd joined
[03:37] *** QinGW joined
[03:41] *** [particle] joined
[03:55] *** plobsing joined
[04:00] *** plobsing left
[04:00] *** Chillance joined
[04:35] <sorear> ingy: still here?

[04:37] *** hercynium left
[04:47] * sorear waits for ingy to return.

[05:03] *** kanishka left
[05:26] *** cjk101010 joined
[05:39] *** plobsing joined
[06:06] *** _kaare joined
[06:08] *** sftp left
[06:11] *** stepnem joined
[06:17] <kthakore> Hello, is a perl6ier way of injecting scalar references into a callback's scope? In perl5 I do  $foo->set_callback( set{ _local_callback( @_, $local_in_scope_scalar ) } ) a lot.

[06:17] <kthakore> or does that just mean a bad design .... prolly the later ...

[06:18] <kthakore> oops also s/set/sub/g

[06:22] *** perimosocordiae joined
[06:22] <TimToady> my $lexical; $foo.set_callback( -> $param { whatever($param,$foo) } );

[06:22] <TimToady> er

[06:23] <TimToady> my $lexical; $foo.set_callback( -> $param { whatever($param,$lexical) } );

[06:23] <TimToady> the lexical comes from the lexical scope, the parameter is passed by the caller of the callback

[06:24] <kthakore> wow this is magic!

[06:24] <TimToady> just like in Perl 5, except you get to name your parameters

[06:24] <kthakore> I really need to get SDL working with Parrot

[06:25] <TimToady> seems to me it was long ago, but likely has suffered bitrot

[06:25] <kthakore> TimToady: parrotSDL ? I forked it a few months ago, but parrot was a moving target

[06:25] <kthakore> it was working for a while though

[06:26] <kthakore> so let me get this straight ... if I do -> $param { whatever ($param, $lexical ) }

[06:27] <kthakore> in whatever( ) I can just us $param and $lexical?

[06:27] <kthakore> use*

[06:27] <kthakore> no need to do 'my ($param, $lexical) = @_' ?

[06:27] <TimToady> yes, P6 has real parameters now

[06:28] <kthakore> .... -.-

[06:28] <kthakore> ok I really need to get parrotSDL caught up now

[06:28] <TimToady> well, $lexical isn't a parameter, but yes

[06:28] <kthakore> thanks TimToady 

[06:28] <TimToady> you could write it sub ($param) {...} if you want it to look more p5ish

[06:29] <kthakore> ok I am confused ... 

[06:29] <kthakore> sub ($param) ?

[06:29] <kthakore> is that like sub { my $param = shift ...

[06:29] <TimToady> yes

[06:29] <kthakore> ah ok

[06:29] <TimToady> you can have multiple parameters

[06:29] <kthakore> sorry if I didn't get that right away ... I am pulling an all nighter

[06:30] <kthakore> What I am really interested in is the perl 6 grammar stuff ... but I am not sure if it is the same as what I am thinking.

[06:31] <kthakore> A while ago I was making a context free grammar language in ANTLR for MAgic the Gathering card rules.

[06:31] <TimToady> p6 grammars are something like that

[06:32] <kthakore> Magic The Gathering Card rules are essentially ( {Target} {Action} {modifier} ... so on)

[06:32] <kthakore> TimToady: are as powerful as context free or similar to regular expressions?

[06:33] <kthakore> cause using regex for that stuff was really really painful

[06:33] <TimToady> they are as powerful as you want them to be

[06:34] <kthakore> hehe ... I should have seen that coming

[06:34] <TimToady> they can be context sensitive if you like

[06:34] <kthakore> context sensitive as in @_ or $ context?

[06:34] <TimToady> that depends on your language definition

[06:34] <kthakore> I meant context free grammars as in defining a way to 'parse' text rules

[06:34] <kthakore> I am not really good at this stuff bascially

[06:34] <kthakore> I want to be able to do this

[06:35] <kthakore> ' [Green Cards] {destroy} {turn} ' = Destroy all green cards this turn

[06:35] <kthakore> where ' [Green Cards] {destroy} {turn} ' is the card rule

[06:36] <kthakore> so this would be converted into a subroutine ...

[06:36] <kthakore> nah ... that would be crazy ...

[06:36] <kthakore> or possible?

[06:36] <TimToady> anything is possible, and some things are easy

[06:36] <sorear> doing NLP with Perl 6 is on the crazy side

[06:36] <sorear> but good crazy

[06:36] <kthakore> but is it NLP?

[06:36] <kthakore> because I use notations to tell what is the target

[06:36] <TimToady> sounds pretty restricted to me

[06:36] <sorear> oh

[06:36] <sorear> I misunderstood

[06:37] <sorear> thought you'd be parsing the card text

[06:37] <kthakore> no no

[06:37] <kthakore> that converted manually

[06:37] <kthakore> hold on let me see if I have the XML we converted

[06:39] <kthakore> yay! Found it!

[06:39] <kthakore> hold on getting it some place public

[06:39] * kthakore dusts off the xml

[06:39] <sorear> if you have xml why not use it?

[06:41] <kthakore> I will explain

[06:41] <kthakore> again you are too fast ;)

[06:42] <kthakore> sorear: TimToady http://sdlperl.ath.cx/mtg/

[06:42] <kthakore> C[Self: | Damage:Player,Waiting](Player:Waiting | Discard:1): is pretty much the 'rule' of the card 

[06:43] <kthakore> So it does 'Damage the waiting player and make the player discard a card'

[06:43] <kthakore> C means it is only works in a certain phase

[06:44] <kthakore> ... I forgot this ... wow this was sooo long ago

[06:44] <kthakore> sorear: I was trying to make a grammar for this in Antlr so I could make it applicable on the game state some how

[06:44] *** _twitch joined
[06:45] <kthakore> my plan was to 'parse' this XML into subroutines ...

[06:45] *** masak joined
[06:45] <masak> morning, #perl6!

[06:45] * kthakore stays quite now while people look at his stupid insane thing ....

[06:45] <kthakore> hi masak 

[06:49] *** justatheory left
[06:53] *** xinming joined
[06:53] <sorear> hi masak

[06:57] <kthakore> so ... is that language possible to parse in perl6 grammars? 

[06:57] <kthakore> or do I need to define my language better? 

[06:59] *** xinming left
[06:59] *** xinming joined
[07:00] *** __david__ joined
[07:02] *** nymacro left
[07:09] <kthakore> hmm I guess you guys are busy I am gonna head to sleep

[07:10] <masak> kthakore: not busy, just low activity right now.

[07:10] <masak> kthakore: I haven't finished backlogging. when I do, I'll have a look.

[07:11] <sorear> kthakore: perl 6 grammars contain a Turing complete language, so they can parse any recursively enumerable language

[07:11] <sorear> your question is not very meaningful

[07:14] <kthakore> sorear: you are right I guess... I don't know how to ask a meaningful question here. I guess my real question is 'Given a card game, with rules defined by each card in play. How to generate a subroutine based on it's rule? '

[07:14] <kthakore> I thought grammars was the way to go ... but maybe not

[07:15] <sorear> grammars are the way to go for inputting data from adhoc text files

[07:15] <sorear> if you have XML, you should use an XML parser.  Not a grammar.

[07:18] <kthakore> sorear: I don't think you understant ...

[07:18] <kthakore> I am not trying to parse XML

[07:18] <kthakore> http://sdlperl.ath.cx/mtg/EasyMTGCardsSyntax.xml

[07:19] <kthakore> see <Card> .... <Rule> C[Self: | Damage:Player,Waiting](Player:Waiting | Discard:1): </Rule> ....

[07:19] <sorear> ick

[07:19] <kthakore> the text I am trying to parse is ' C[Self: | Damage:Player,Waiting](Player:Waiting | Discard:1):  '

[07:19] <sorear> you combine all the disadvantages of ad-hoc text with all the disadvantages of XML

[07:19] <kthakore> sigh ...

[07:20] <kthakore> this is not about XML sorear 

[07:20] <kthakore> ignore the xml I am sorry I picked it too

[07:20] <masak> sjohnson: what's your criterion for a decent hex editor? would it be very hard to write one?

[07:20] <kthakore> sorear: I want to parse something like ' C[Self: | Damage:Player,Waiting](Player:Waiting | Discard:1):  '

[07:21] <kthakore> into a function that I can call like $card->apply_effect()

[07:21] <sorear> You'll confuse yourself less if you use an AST.

[07:22] * masak stands back and lets sorear++ handle this

[07:22] <sorear> Make a few classes, have the grammar produce a tree of objects representing the card, then write a recursive function to apply the effect

[07:23] <kthakore> ah ok

[07:24] <kthakore> so each node on the tree will have something like $node->target, $node->effect, $node->modifier ?

[07:24] <kthakore> and then I will work from the bottom of the tree up?

[07:25] <sorear> I'd have to see your code to decide thayt

[07:25] <kthakore> ok

[07:25] <kthakore> I am in design phase as my first prototype is in C# and ANTLR

[07:25] <kthakore> ... and I am looking for a better way to tokenize, parse, and make an AST

[07:26] <sorear> What does C[Self: | Damage:Player,Waiting](Player:Waiting | Discard:1): mean?

[07:26] <sorear> (it's been about 10 years since I last played M:tG)

[07:26] <kthakore> it means Damage the waiting player with same health as self ( the caller)

[07:27] <kthakore> and make tha same player discard a card

[07:27] <kthakore> sorear: the rules are very complex .... *sigh*

[07:27] <sorear> I know the rules, mostly

[07:27] <sorear> but I won't remember them without prompting

[07:27] <sorear> How does it say that?

[07:27] <kthakore> I had this for a third year design project (2 years ago) and it still haunts me

[07:27] <kthakore> sorear: in english?

[07:27] <sorear> Where does it say "same health"?

[07:27] <kthakore> Self: | Damage:Player,Waiting

[07:28] <sorear> kthakore: English would be ideal, yes

[07:28] <kthakore> yeah let me get that sorry

[07:28] <sorear> What are the other options?

[07:28] <kthakore> oops I forget C[ ] means a condition

[07:28] <kthakore> http://www.coolstuffinc.com/main_viewCard.php?Card_Name=Abyssal%20Specter&viewtype=Magic%20the%20Gathering%20Cards

[07:28] <sorear> What does Self: mean by itself?

[07:29] <kthakore> the player I guess

[07:29] <kthakore> my language making skills are really bad :(

[07:29] <kthakore> how do I define a good language for this ....

[07:29] <sorear> What does Damage:Player,Waiting mean?

[07:29] <kthakore> whenever abyssal specter deals damage to a player, that player discards a card.

[07:29] <kthakore> C[ ] is the condition ....

[07:30] <sorear> What is 2bb?

[07:30] <sorear> I remember what 2w, 2r, etc are

[07:30] <kthakore> 2 black mana 

[07:30] <kthakore> err

[07:30] <kthakore> 2 other cards

[07:30] <sorear> What's the difference between 2b and 2bb?

[07:30] <kthakore> blue and black

[07:30] <kthakore> bb = black

[07:30] <kthakore> yeah ... it is stupid ... 

[07:31] <kthakore> oh wait no no

[07:31] <kthakore> that is 2 any colored card and 2 black cards

[07:31] <kthakore> 2 bb 

[07:31] <sorear> so bbbb or bbww or bbrg etc?

[07:31] <kthakore> bbbb 4 black cards

[07:31] <kthakore> bbwww 2 black 2 white

[07:31] <kthakore> yeah

[07:32] <kthakore> the number means any mana color

[07:32] <sorear> I remember now

[07:32] <kthakore> so my real problem I guess is to define a better language for this?

[07:32] *** jummy joined
[07:32] *** jummy left
[07:32] <sorear> What does 'Waiting' mean in your example language?

[07:33] <kthakore> Player who is waiting to play

[07:33] <kthakore> other player

[07:33] <kthakore> I guess

[07:33] <kthakore> there is a playing player and waiting player

[07:35] <kthakore> sorear: I know I have to redesign the language. However I was wondering if going into perl6 grammar was the correct direction for the implementation of such a game?

[07:37] <moritz_> perl 6 grammars are good for parsing that kind of stuff

[07:37] <moritz_> the rest of the implementation should not be done with grammers :-)

[07:38] <kthakore> moritz_: indeed ... that will be done with other stuff

[07:39] <kthakore> ok I really need to go to sleep

[07:39] <kthakore> thank you folks 

[07:40] <sorear> kthakore: Every time I've played m:tg, there have been 5-10 players, and I've been allowed to attack any of them.  That's not standard form?

[07:40] <sorear> ok

[07:41] <masak> someone seems disappointed: http://twitter.com/predominant/status/7947907076460544

[07:42] <masak> but actually, Inf has some problems that we haven't yet resolved. the biggest one perhaps that it needs to act both as Int & Num & Str

[07:42] <kthakore> sorear: yeah but I have to start some where simple

[07:42] <kthakore> masak: bah don't listen to them 

[07:42] <kthakore> haha

[07:43] <masak> kthakore: I don't let my happiness be contingent on things people say on Twitter, but I do pay attention to them.

[07:43] <masak> kthakore: Twitter has this wonderful way of letting you hear things you might otherwise turn a blind eye to.

[07:44] <masak> s/blind eye/deaf ear/ # mixing of metaphors

[07:44] <sorear> I think I'd be doing something along the lines of class AbyssalSpecter does Card[power => 2, toughness => 3, type => 'specter', cost => '2bb'] { method onDamage($taget) { $target.discard } }

[07:44] <sorear> then use eval to load the card file

[07:45] <kthakore> sorear: ... 0o

[07:45] <kthakore> I couldn't do that in C# .... that is why I didn't consider eval!

[07:46] * kthakore curses

[07:46] <kthakore> omg ... shit ... wow .... I mader this soooooooooooooo hard

[07:46] * kthakore facepalms

[07:47] <kthakore> sorear: thank you ... so much ... and now I really need to go

[07:47] <masak> some harsh criticism here: http://www.reddit.com/r/programming/comments/ebpjt/perl_6_rakudo_star_201011_has_been_released/

[07:48] *** Trashlord joined
[07:50] <kthakore> masak: oh yeah I saw that ... but you know what that means ... they are disappointed ... because they had expectations !!!

[07:50] <kthakore> masak: so it is good hahah

[07:50] <masak> also, the criticism that isn't raving lunacy is often spot on.

[07:50] <masak> Rakudo has a high memory footprint and runs slowly.

[07:50] <kthakore> indeed but parrot is slimming up

[07:51] <kthakore> and I think rakudo and parrot feedback loop is gonna get it right soon ... ish

[07:51] <masak> whatever. until it's fixed, the criticism is valid.

[07:51] <masak> those are big problems, and they don't have easy fixes.

[07:51] <masak> yes, people are working on them.

[07:51] <kthakore> yeah

[07:51] <kthakore> please keep doing it!

[07:51] <kthakore> I can't wait to get SDL onto perl6

[07:51] <masak> but I have quite a lot of sympathy for those who write Rakudo off due to it being slow or memory-hungry.

[07:52] <kthakore> then have lots of games!

[07:52] <kthakore> in perl6

[07:52] <sorear> niecza: sub fib($n) { $n == 0 ?? 1 !! $n == 1 ?? 1 !! fib($n-1) + fib($n-2) }; say fib(25)

[07:52] *** am0c joined
[07:52] <p6eval> niecza 914f55d: OUTPUT«121393␤»

[07:53] <masak> the main reason for Rakudo not being faster and slimmer already is that developing Perl 6 is non-trivial.

[07:53] <masak> the past five years have been spent implementing and re-implementing tooling on Parrot just to be able to handle the requirements that Perl 6 poses.

[07:53] <masak> it takes time and effort, and it brought us to this point. that's awesome, but we're not done yet.

[07:54] <masak> most any outsider will look in and see that we're not done yet, but fail to see the massive amount of effort that went into getting us to this point.

[07:58] <kthakore> masak: I am an outsider (if you will grant me that), and you know what I see? Smart People working Real Hard.

[07:58] <kthakore> So I cut a lot of slack there

[07:58] <kthakore> seriously if people can't understand that ... well w/e 

[07:59] <kthakore> but there are some who do (i.e. me )

[07:59] <masak> indeed. kthakore++

[08:00] <masak> nevertheless, this is a case where deeds speak louder than words. if someone does something cool with Perl 6 (such as the URL dispatcher grammar last week), people will pay attention and get interested.

[08:00] <masak> and then the speed and memory footprint doesn't matter that much anymore.

[08:00] <kthakore> I mean I tried to help with string IO in parrot ... failed sooooo miserably

[08:00] <masak> perhaps not the simplest aspect to help with.

[08:00] <kthakore> masak: immutable string IO ? 

[08:00] <sorear> I don't like this notion of Smart People and Non-Smart People

[08:01] <kthakore> sorear: it is probably not right, but it is how I see it

[08:01] <masak> sorear: neither do I, but I tend to let it slip when it's a compliment. :)

[08:02] <kthakore> sorear: can I put it like this? People who are more competent and capable and productive at compiler design then I am working really hard on a problem

[08:02] <kthakore> hence proble not easy so give them slack.

[08:02] <kthakore> problem*

[08:02] <sorear> pmichaud and jnthn leave me utterly awed too, but I don't let that stop me from contributing

[08:03] <kthakore> I never said I won't contribute

[08:03] <kthakore> I have tried when I have time

[08:03] <kthakore> I do it in parrot at times

[08:03] <kthakore> I was just explaining how my last attempt to add a String IO bug feature was a total bust

[08:04] <kthakore> sorear: still hasn't stopped me :D I am just biding my time till xmas break to get back into parrot

[08:04] <kthakore> s/bug//g

[08:06] <sorear> in other news, making indexing efficient is... a lot harder than I expected

[08:07] *** cosimo joined
[08:07] <kthakore> sorear++ masak++ thanks guys and bye for real now ... 

[08:07] <sorear> more than half of STD's time is being spent in return if @*MEMOS[$¢.pos]<ws>:exists; now

[08:07] <masak> pmichaud and jnthn leave me utterly awed too, but I don't let that stop me from using my sledgehammer. :P

[08:09] <sorear> (in other other news, niecza-compiled STD is now outperforming viv on the "parse niecza lib/SAFE.setting" benchmark)

[08:09] <moritz_> \o/

[08:10] <masak> sorear: neat!

[08:10] *** perimosocordiae left
[08:12] <masak> I think the most useless entries by far in day-of-year articles on Wikipedia are those that chronicle the forming of US college fraternities. who, besides perhaps those that used to belong to it, cares?

[08:14] <moritz_> ... with greek TLAs, often without meaning

[08:14] <masak> exactly.

[08:15] <masak> Phi Sigma Sigma was founded today, 97 years ago. FSS!

[08:18] *** palik joined
[08:25] <jnthn> Writing talks the day I'm giving them. I do it for dotnet events too.

[08:25] <masak> :)

[08:25] * jnthn busily slide hacks

[08:30] * masak eyes $¢ warily. again.

[08:32] <sorear> ?

[08:32] *** QinGW left
[08:32] <jnthn> masak: Like to give us your 2 cents on that?

[08:33] <masak> sure.

[08:33] * moritz_ expected such a *pun*chline

[08:33] <masak> I completely missed that :P

[08:34] <masak> anyway, I don't see the rationale for making it a non-ASCII identifier just to make it one character long.

[08:35] <masak> we used to have a ¥ operator, but we decided against it. it became Z instead.

[08:35] <moritz_> I think the point is that it shouldn't be colliding with normal user-space variables

[08:36] <moritz_> rakudo: say '¢' ~~ /\w/

[08:36] <p6eval> rakudo : OUTPUT«␤»

[08:36] <moritz_> rakudo: say so '¢' ~~ /\w/

[08:36] <p6eval> rakudo : OUTPUT«Bool::False␤»

[08:36] <masak> right, so it's in the same class as $_ and $/

[08:36] <moritz_> right

[08:37] <masak> and those have to be one-char.

[08:41] <moritz_> maybe you could make it $¢/! but that wouldn't have any advantage over one char

[08:42] <masak> I was going to argue for $MATCH or some such, but I think I buy your argument about it needing to be a one-char non-\w identifier.

[08:43] <jnthn> I guess it'd be $CURSOR rtahre than $MATCH

[08:43] <moritz_> but that would be a bit much CURSing in the source

[08:43] <masak> jnthn: oh, right. thanks.

[08:46] *** Achilles14 joined
[08:47] <jnthn> moritz_: yeah, no shit.

[08:47] <Achilles14> hi all, is there a compiler that can compile perl6 source to .pbc file? I can not find it in perl6 command line options.

[08:48] <moritz_> Achilles14: rakudo can do it

[08:48] <moritz_> Achilles14: http://perlgeek.de/blog-en/perl-6/my-first-executable.writeback

[08:51] <Achilles14> moritz_: thanks, it works.

[08:52] <moritz_> \o/

[08:52] <moritz_> at some point somebody should write a --compile option or so for rakudo

[08:53] <jnthn> --target=pbc would be nais.

[08:53] <Achilles14> moritz_: I remember early parrot version have this tool.

[08:53] *** wallberg joined
[08:55] <Achilles14> another question: is there anything like java's CLASSPATH, that I can deploy my program and dependencies seperately?

[08:56] *** [particle] left
[08:57] <moritz_> there's a PERL6LIB environment variable

[08:57] <moritz_> rakudo: say ~@*INC

[08:57] <p6eval> rakudo : OUTPUT«lib /home/p6eval/.perl6/lib /home/p6eval/p1/lib/parrot/2.10.0-devel/languages/perl6/lib .␤»

[08:58] *** [particle] joined
[08:59] *** rjbs left
[09:00] <Achilles14> can lib be pbc? so any programming language can use it. I think PERL6LIB is not the answer. may be something like PARROT_LIB be.

[09:02] *** shabble joined
[09:02] *** shabble left
[09:02] *** shabble joined
[09:03] <Achilles14> "parrot -M./common.pbc main.pbc", something like this.

[09:04] <moritz_> Perl 6 libraries can be precompiled, but you still need the source around

[09:04] <moritz_> there are ways to load foreign libs, but currently they aren't as simple as we'd like them to be

[09:04] <wallberg> hi all

[09:05] <moritz_> hi wallberg 

[09:05] <masak> wallberg! \o/

[09:05] <Achilles14> wallberg! \o/

[09:07] *** rjbs joined
[09:08] <wallberg> masak: i've made up my mind now. i'll have a go at making a phylogenetic program in Perl 6, which is the best way I can contribute to Perl 6. but I will need some help, especially with the grammars to read a newick tree :-)

[09:08] <masak> wallberg: absolutely.

[09:08] <masak> wallberg: pro tip: write tests for your grammar.

[09:08] <masak> that way, you won't regress on silly things.

[09:09] <masak> beyond that, I'm more than willing to help with the nitty gritty stuff.

[09:09] *** wooden joined
[09:09] *** wooden left
[09:09] *** wooden joined
[09:09] <masak> so, I guess, are many others around here.

[09:09] <moritz_> wallberg: pro tip: read http://perlgeek.de/en/article/debug-a-perl-6-grammar :-)

[09:10] <masak> yeah, what moritz_++ said.

[09:10] <masak> understanding the difference between regex/token/rule is also important. but that only comes with using them in practice for a while.

[09:11] <wallberg> thanks guys. what editor is everyone writing their P6 code in these days? vim? Padre?

[09:12] * masak codes in vim

[09:12] * moritz_ uses vim too

[09:12] <masak> my general rule of thumb seems to be 'code in vim, write prose in Emacs' :)

[09:13] <masak> all other editors have left me wildly underwhelmed so far.

[09:13] <masak> come back when you have something with macros and scriptability, like vim and Emacs.

[09:13] <moritz_> masak: I'm curious, why the distinction?

[09:14] <moritz_> do you edit code more, while writing prose straight away?

[09:14] <masak> moritz_: it's deeper than that. a lot of subtle things make the whole user experience of the two programs more suitable for that kind of writing... at least for me.

[09:15] *** rgrau_ left
[09:15] <masak> moritz_: Emacs seems to "think" in paragraphs. vim has a lot of navigational and manipulative commands that are adjusted for code (or other hierarchical) primitives.

[09:16] <wallberg> well, I need something that tells me "nooooo!! you're doing it wroooong!!" as I type, so I'll start with Padre and see how it goes. or does vim have live syntax checking?

[09:17] <Achilles14> I suggest emacs.

[09:17] <masak> I emphatically don't need an editor to tell me I'm doing things wrong.

[09:18] * Tene vim

[09:18] <moritz_> wallberg: it highlits in real time, that's all

[09:19] <wallberg> masak: yeah, it would be nice with an editor that says "Good job!" every once in a while.

[09:20] <Tene> masak: {} in vim navigate by paragraphs.  also 'p' in object-select.  I haven't done much with emacs; what does emacs do differently there?

[09:20] <Tene> Also () and s for sentences.

[09:20] <masak> wallberg: reminds me of INTERCAL's insistence of prefixing an appropriate fraction of statements with "PLEASE " :)

[09:21] <masak> Tene: nod. I know that. seems in describing the quality I'm after, I botched it altogether.

[09:21] *** Achilles14 left
[09:21] <masak> Tene: vim is not bad for editing prose text either, it's just that I find Emacs to be more suited for it. YMMV.

[09:22] <Tene> masak: I was curious about your milage, not trying to assert anything about mine.

[09:22] <masak> Tene: and yes, I use {} a lot already. I've actually turned off the arrow navigation keys in order to become more mindful of navigation.

[09:22] <Juerd> vim is hard for prose because it doesn't support long lines

[09:22] <Juerd> I do use it, but with line wrapping and manual re-wrapping

[09:22] <Juerd> re-flowing even

[09:22] <Tene> I haven't used emacs much.

[09:22] <Juerd> Well, not really manual. I use gq.

[09:23] <Tene> I have vertical arrows mapped to gk and gj

[09:23] <Tene> I rarely use them.

[09:24] <Juerd> Ahhh. Thanks

[09:25] <Tene> Oh, I guess if you didn't know those, long lines might be a bit more awkward for you. :)

[09:27] <masak> Emacs is wonderful when it comes to re-flowing emails with those '>'s in them.

[09:27] <moritz_> #perl6 - learn something new about the editor you've been using for $n years

[09:27] <Tene> Every six months or so, I go read through the vim docs and look for something new to try using.

[09:28] <szbalint> sometimes I think there is too much to learn about vim

[09:28] <masak> oh, and the vim docs are awesome.

[09:28] <Tene> Marks were the biggest thing that stuck with me, since about 1.5 years ago.

[09:28] <szbalint> most of the features don't fit in my head.

[09:28] <tadzik> hello sixers

[09:28] <szbalint> I am happy with those that do, though :)

[09:28] <masak> tadzik: \o

[09:29] <Tene> I also try to do that with bash, but less-frequently.  alt+. is a nice hotkey that is severely underused.  ^R even more so.

[09:29] <mathw> o/

[09:29] <Tene> It pains me seeing people re-type things that they could call up with like three keystrokes.

[09:29] <moritz_> alt+. is last argument from last line, right?

[09:29] <mathw> I've got a friend who can never remember ^R

[09:29] <Tene> moritz_: repeat it to recall last arguments from previous commands in the history.

[09:29] <moritz_> right

[09:29] <mathw> but since I found out about it I've used it constantly

[09:29] <moritz_> I use Esc. which I guess is the same

[09:30] <Tene> Yeah, same.

[09:30] <mathw> Didn't know about alt+.

[09:30] * mathw tries it

[09:30] <mathw> AWESOME!

[09:30] <mathw> Tene++

[09:30] <Tene> You can also use ctrl+alt+y for arbitrary arguments from the previous command

[09:31] <Tene> Esc,3,ctrl+alt+y = recall the fourth word from the previous command

[09:31] <wallberg> hmm, I seem to have the ability to turn the whole channel off-topic. This isn't the first time :-)

[09:31] <Tene> Or even esc,-,2 for second from the end

[09:32] <Tene> I nearly never use it, but sometimes it's useful if there's a long url or something in there.

[09:32] <moritz_> wallberg: that's fine, as long as no ongoing p6 discussion is disturbed by it

[09:32] <mathw> And we're learning things

[09:32] <Tene> It's nice to look through: bind -p | grep -Ev 'not bound|self-insert'

[09:33] <Tene> I've got a co-worker who is very set in his ways, and very resistant to changing anything, and it's painful to pair with him

[09:34] <Tene> instead of ^Rfoo<enter>, he insists on using !foo:p<enter><mouse copy paste>

[09:36] <Tene> Wow, I never knew about alt-y.  I've wanted that many times.

[09:36] <Tene> "Rotate the kill-ring, and yank the new top. You can only do this if the prior command is yank or yank-pop."

[09:36] <Tene> http://www.gnu.org/software/bash/manual/html_node/Commands-For-Killing.html

[09:36] <moritz_> good news: all those commands are from readline, and every readline app gets the same by default

[09:37] <Tene> Yeah, readline++

[09:37] <Tene> Also, if you're not familiar with it, rlwrap is great.

[09:38] <Tene> I use it all over the place to use readline with programs that don't have it built in.

[09:44] <masak> wow! Tene++ # rlwrap

[09:46] <moritz_> .u phi

[09:46] <phenny> U+03D5 GREEK PHI SYMBOL (ϕ)

[09:47] *** kjeldahl joined
[09:51] <masak> getting heisenbug-like behaviour from the .trans thing.

[09:52] <masak> I have this habit when doing .trans changes to rip the whole bit of code out into a script, do MONKEY_TYPING and augment the Str class with a new 'trans' method.

[09:52] <masak> when I do it like that, it behaves as expected.

[09:53] <masak> but when I run exactly the same test on the old .trans, it fails.

[09:54] <moritz_> that's... weird

[09:55] <mathw> that's really quite disturbing

[09:55] <masak> I can't really explain that right now.

[09:55] <mathw> I hate that kind of bug

[09:55] <masak> anyone want to try the script?

[09:56] <moritz_> did you remove .trans from Str before monkeytyping?

[09:56] <masak> no.

[09:56] <masak> actually, it's in Cool.

[09:57] <moritz_> ah, when it's in Cool you can monkey-type it into Str

[09:57] <masak> here's the code: https://gist.github.com/716485

[09:58] <masak> first, I monkey-patch Str. then, I run all the Rakudo-enabled spectests.

[09:58] *** dakkar joined
[09:58] <masak> note that I call the experimental variant .xtrans to keep things straight.

[09:58] <masak> last two tests are the ones that differ. (and really shouldn't)

[10:02] <Tene> masak: Perhaps I'm misunderstanding, but afaict, that script doesn't modify .trans in Str, only adds .xtrans

[10:02] <masak> Tene: that's correct.

[10:02] <Tene> So, I'm not surprised that they differ

[10:02] <masak> Tene: but I just copied the code from Rakudo.

[10:03] <masak> it's the same code.

[10:03] <Tene> Ah.

[10:06] <masak> actually, the obvious conclusion is that it's not the same code. that would fit better with the observation.

[10:06] <masak> but why it wouldn't be, or how to test that it isn't, I don't know.

[10:07] *** timbunce joined
[10:07] <masak> there's only ever one definition of .trans in Rakudo, and that's in src/core/Cool-str.pm

[10:07] <mathw> Heisenbug indeed

[10:08] <Tene> Well, lemme update rakudo and check.

[10:09] <masak> sure thing.

[10:11] <masak> suspecting it might have something to do with the naming, I renamed 'xtrans' to 'trans' in my script. the 'trans' test succeeds then.

[10:12] <masak> which means it's unrelated to naming.

[10:12] <masak> which is disturbing, because then it's likely the core in itself that's causing this.

[10:13] <masak> oh! could be something related to Cool/Str.

[10:13] <Tene> That sounds to me like 'the version in core and the version augmented here differ'

[10:13] <masak> right.

[10:13] <Tene> You've recently had trouble with cached copies.  Is the compiled version different from the source?

[10:13] <Tene> As you mentioned augmenting instead of recompiling.

[10:14] <masak> rakudo: say "aaabbbccc".trans( / \s+ / => " " )

[10:14] <p6eval> rakudo : OUTPUT«aaa      ␤»

[10:14] <masak> I think that rules out any issues with my local Rakudo.

[10:15] <Tene> ... is that right?  That looks broken to me.  Why does 'b' match \s+ ?

[10:15] <masak> Tene: it's broken. that's the point.

[10:15] <masak> http://rt.perl.org/rt3/Ticket/Display.html?id=79778

[10:15] <masak> that's what I'm trying to diagnose and fix.

[10:16] <masak> that's what's going all heisen on me.

[10:16] <Tene> Oh, right, this is the part that takes FOREVER now. :(

[10:17] <Tene> So, the last two tests differ in behavior.  What is the difference?

[10:17] <masak> one goes to the augmented method, the other goes to the method in Cool in the setting.

[10:18] <Tene> I'm sorry.  What's the difference in behavior?

[10:18] <Tene> I'm still waiting on rakudo to build.

[10:19] *** redicaps left
[10:19] <moritz_> masak: fwiw your example works fine for me on the REPL

[10:19] <masak> Tene: ah. the setting one exposes the bug in the RT.

[10:19] <masak> Tene: the augmented one doesn't.

[10:19] <masak> moritz_: testing.

[10:19] <moritz_> and in a script too

[10:19] <tadzik> it semi-works for me

[10:19] <tadzik> > say "a  aab  bbccc".trans( / \s+ / => " " )

[10:19] <lambdabot>   <no location info>: parse error on input `+'

[10:19] <tadzik> a aab bbccc

[10:20] <moritz_> This is Rakudo Perl 6, version 2010.11-4-g90cb844 built on parrot 2.10.1 RELEASE_2_10_1-421-g73ceeb1

[10:20] <Tene> I thought we got rid of lambdabot?

[10:20] <moritz_> .u pi

[10:20] <phenny> U+A03A YI SYLLABLE PI (ꀺ)

[10:21] <Tene> π

[10:21] <masak> moritz_: hm. works on the REPL here too.

[10:21] <Tene> .u π

[10:21] <phenny> U+03C0 GREEK SMALL LETTER PI (π)

[10:22] <masak> I'm starting to suspect I simply have an old installed version of Rakudo.

[10:22] <masak> moritz_++

[10:22] <Tene> Rakudo compile supposed to take so much longer than it used to? :(

[10:23] <Tene> masak: As I said. :)

[10:23] <moritz_> Tene: on a new parrot it's supposed to be a bit faster again

[10:23] <Tene> moritz_: Ah, I'm just using whatever --gen-parrot fetches for me

[10:23] <moritz_> Tene: if you rakudo is new enough, you should get a "fast" parrot

[10:24] <masak> how do I configure Rakudo to install into /usr/local/bin/perl6 ?

[10:24] <moritz_> perl Configure.pl --gen-parrot --gen-parrot-prefix=/usr/local

[10:24] <masak> thanks.

[10:25] *** leprevost joined
[10:25] <Tene> masak: Both tests pass for me.

[10:25] <masak> good. then I seem to have nothing to worry about.

[10:25] <Tene> moritz_: I just pulled from git right before building, so latest rakudo master

[10:25] <masak> Tene++ # thanks for the help

[10:25] <masak> I'm glad it wasn't a real heisenbug.

[10:26] <moritz_> it seems rakudo rebuild on p6eval is busted

[10:26] <masak> that would explain that part of the mystery.

[10:26] <Tene> http://www.guardian.co.uk/science/2010/jun/14/distorted-body-image-back-hands# -- fascinating

[10:40] <masak> now everything works over here.

[10:40] <Tene> :D

[10:40] <masak> so there really was no problem with .trans

[10:41] <masak> I'm glad that's the case, because it felt like I fixed it last time :P

[10:42] <moritz_> $ perl evalbot/build.pl rakudo

[10:42] <moritz_> Can't handle revision 'RELEASE_2_10_1-477-gfa56f62

[10:43] <moritz_> ' at /home/p6eval/evalbot/build-scripts//rebuild-rakudo.pl line 43.

[10:43] <masak> I've recently switched to building with --gen-parrot, so I guess that's what confused me.

[10:43] <Tene> Ah.

[10:43] <masak> now November works (mostly) fine! \o/

[10:44] <Tene> \o/

[10:44] <mathw> wooo!

[10:44] <tadzik> wow!

[10:44] <tadzik> that means Web.pm too?

[10:45] <masak> no, but I will turn my attention to Web.pm in the weekend.

[10:46] <masak> got another reminder email from jhorwitz++ about Web.pm. I'll reply to that one today, and try to get the dreaded Week 20 done in the weekend.

[10:46] * masak replies now

[10:48] <tadzik> does Web.pm have HTTP headers parser?

[10:48] <masak> no.

[10:49] <masak> the Rack paradigm assumes that HTTP headers come in through the usual CGI manner, in environment variables.

[10:49] *** satyavvd left
[10:55] <tadzik> I feel like writing that

[10:55] <masak> please go ahead.

[10:55] <mathw> HTTP parsing is fun

[10:56] <Tene> tadzik: it's the job of whatever is running the rack-style app to handle parsing the HTTP headers.

[10:57] <Tene> In Web.pm case, usually HTTP::Daemon

[11:00] <tadzik> It also seems simple

[11:03] <tadzik> how funny it'd be to have a Plack-alike for Perl 6?

[11:07] <masak> lunch &

[11:13] <Tene> tadzik: Funny?  I think it's an admirable goal.

[11:13] * sorear out

[11:15] <moritz_> didn't mberends++ start a clone?

[11:20] <tadzik> server-simple-psgi, right

[11:21] <tadzik> Tene: it doesn't differ much for me :)

[11:21] <tadzik> https://github.com/mberends/http-server-simple/blob/master/examples/05-psgi-small.pl6 there it is

[11:25] *** nymacro joined
[11:36] *** fcojocaru joined
[11:37] <fcojocaru> any way a newbie to perl can help as a dumb tester?

[11:45] <colomon> absolutely!

[11:45] <masak> oh, that would *rock*.

[11:45] <masak> fcojocaru: even going through RT and just running stuff would help us.

[11:46] <fcojocaru> any wiki/trac page to get me started?

[11:46] <fcojocaru> what do you use to keep track of the tickets ?

[11:46] <tadzik> fcojocaru: newbie to Perl, or newbie to Perl 6?

[11:46] <masak> http://rt.perl.org/rt3/

[11:46] <fcojocaru> to perl unfortunately

[11:46] <colomon> fcojocaru: masak means the bug tracking software... checking filed bugs to see what they do now.

[11:46] <fcojocaru> so I can only help on low level stuff

[11:46] <fcojocaru> sorry

[11:47] <colomon> but also, you could provide valuable feedback on the book they are working on.

[11:47] <masak> we need all kinds of newbies. :)

[11:47] <fcojocaru> one at a time guys

[11:47] <tadzik> fcojocaru: go throught the Book (http://github.com/perl6/book) to learn your way around, it's quite probably you'll find some bugs/broken examples

[11:47] <tadzik> that'll also help you understand stuff

[11:47] <fcojocaru> good point

[11:48] <tadzik> Eventually you'll become a warrior in our MMORPG :)

[11:48] <fcojocaru> I send back issues to someone specific or use the http://rt.perl.org/rt3/?

[11:48] <fcojocaru> I'll have to decline the offer with the warrior

[11:49] <fcojocaru> I'm more of a bear thing you see

[11:49] <fcojocaru> so maybe a creep

[11:49] <fcojocaru> ?

[11:49] <tadzik> I don't think so

[11:49] <tadzik> loook at http://use.perl.org/~masak/journal/39445

[11:49] <masak> please don't link to use.perl anymore :P

[11:49] <tadzik> fcojocaru: OOC< how did you got interested in Perl6?

[11:49] <masak> http://strangelyconsistent.org/blog/perl-6-is-my-mmorpg

[11:49] * tadzik updates his bookmarks

[11:50] <masak> tadzik++

[11:50] <fcojocaru> quite easy , I'm trying to learn perl5 now and wanted to see the future

[11:51] <fcojocaru> since I'm out of ideas on what to write to get me around, testing a bunch of stuff for perl6 gives you lots of insight

[11:51] <masak> the future is here already. it's just unevenly distributed. :)

[11:51] <fcojocaru> so it seems a good thing to do , whenever I have the time

[11:51] *** daxim joined
[11:53] <fcojocaru> Thank y ou all for the welcome , I'll start going trough the book and hopefully be of some use to you

[11:53] <fcojocaru> Good Luck

[11:53] <masak> likewise.

[11:53] <masak> stop by often :)

[11:54] <fcojocaru> will do

[12:09] *** gimix left
[12:10] *** whiteknight joined
[12:30] <tadzik> phenny: "さようなら"?

[12:30] <phenny> tadzik: "Bye" (ja to en, translate.google.com)

[12:32] <masak> "sayōnara". guess it's the macron over the ō that makes it five characters, even though it's four syllables.

[12:34] <sbp> phenny: "さ よ う な ら"?

[12:34] <phenny> sbp: "That they are" (ja to en, translate.google.com)

[12:35] *** wamba joined
[12:46] <Tene> .u さようなら

[12:46] <phenny> Tene: U+3055 U+3088 U+3046 U+306A U+3089

[12:52] *** oha joined
[13:10] <jnthn> rakudo: (1, 1, * + * ... Inf)[0..10].join(', ').say

[13:10] <p6eval> rakudo : OUTPUT«1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89␤»

[13:15] *** bluescreen joined
[13:15] *** bluescreen is now known as Guest13659

[13:17] <masak> rakudo: say (1, 1, * + * ... Inf)[0..10].fmt(:separator(", "))

[13:17] <p6eval> rakudo : OUTPUT«1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89␤»

[13:17] <masak> \o/

[13:18] *** MayDaniel joined
[13:24] *** Patterner left
[13:26] *** sftp joined
[13:31] *** MayDaniel left
[13:32] *** mavrc joined
[13:35] *** takadonet joined
[13:35] *** Psyche^ joined
[13:35] *** Psyche^ is now known as Patterner

[13:43] <masak> *groan* you may take the au++ out of #perl6, but you can never take the #perl6 out of au: http://twitter.com/audreyt/status/8152126110826497

[13:43] <masak> punnery worthy of Worthington. :)

[13:46] *** mavrc left
[13:49] *** florz left
[13:49] *** buu left
[13:49] *** MindosCheng left
[13:49] *** _ilbot2 left
[13:49] *** estrabd left
[13:49] *** robinsmidsrod left
[13:50] *** kjeldahl left
[13:50] *** shabble left
[13:50] *** cjk101010 left
[13:50] *** Chillance left
[13:50] *** cotto left
[13:51] <jnthn> lol my talk went well

[13:51] <jnthn> (yes, I did manage to find a way to get the p6 evalbot into a .Net event talk... :-))

[13:51] <masak> nice

[13:51] *** mavrc joined
[13:52] *** kjeldahl joined
[13:52] *** shabble joined
[13:52] *** cjk101010 joined
[13:52] *** Chillance joined
[13:52] *** cotto joined
[13:52] *** florz joined
[13:52] *** buu joined
[13:52] *** MindosCheng joined
[13:52] *** HarryS joined
[13:52] *** simcop2387 joined
[13:52] *** f00li5h joined
[13:52] *** ashleydev joined
[13:52] *** mkramer1 joined
[13:52] *** knewt2 joined
[13:52] *** pothos joined
[13:52] *** lamstyle joined
[13:52] *** sunnavy joined
[13:52] *** Sarten-X joined
[13:52] *** huf joined
[13:52] *** sECuRE joined
[13:52] *** cookys joined
[13:52] *** Bucciarati joined
[13:52] *** _ilbot2 joined
[13:52] *** estrabd joined
[13:52] *** robinsmidsrod joined
[13:52] *** Maddingue joined
[13:52] *** nperez joined
[13:52] *** frodwith joined
[13:52] *** leguin.freenode.net sets mode: +v _ilbot2

[13:53] *** HarryS left
[13:53] *** kjeldahl left
[13:53] *** HarryS joined
[13:53] *** kjeldahl joined
[13:57] *** mavrc left
[14:00] *** estrabd left
[14:01] *** estrabd joined
[14:05] *** sftp left
[14:06] *** sftp joined
[14:12] *** mavrc joined
[14:12] <takadonet> i cannot wait for smash to do the benchmarking for the newest rakudo star version

[14:16] *** sftp left
[14:16] *** sftp joined
[14:16] *** mavrc left
[14:20] <colomon> takadonet: why?

[14:21] <takadonet> colomon: should see a huge speed up on startup times

[14:21] <colomon> ah

[14:21] <colomon> need to get smash to check in the scripts for running the benchmarks (if he hasn't already) so we can all duplicate them locally.

[14:22] <takadonet> ya

[14:23] *** mavrc joined
[14:23] <colomon> I don't see any trace of the harness in bench-scripts.  :(

[14:34] *** cookys left
[14:34] *** cookys joined
[14:34] *** zby joined
[14:35] *** timbunce left
[14:36] *** `26 left
[14:36] *** Eevee joined
[14:37] *** buu left
[14:38] *** buu joined
[14:38] *** rurban joined
[14:41] *** timbunce joined
[14:52] *** _kaare left
[14:54] *** Sarten-X left
[15:01] *** Sarten-X joined
[15:04] *** dual left
[15:08] <oha> am i missing something, or the parenthesis are mandatory for a method call, but not on a sub call?

[15:09] <jnthn> rakudo: 42.say

[15:09] <p6eval> rakudo : OUTPUT«42␤»

[15:09] <jnthn> oha: But if you want args, then yes

[15:10] <masak> well,

[15:10] <jnthn> oha: There's also this colon syntax. :)

[15:10] <oha> with args, yes

[15:10] <masak> right.

[15:10] <jnthn> But, well...

[15:10] <oha> jnthn: could you explain the colon syntax a bit?

[15:10] <jnthn> I think the colon is better left in smileys.

[15:10] <colomon> rakudo: $*OUT.say: 42

[15:10] <p6eval> rakudo : OUTPUT«42␤»

[15:10] <oha> ty

[15:10] <masak> rakudo: say 42.fmt: "%05.2f"

[15:10] <p6eval> rakudo : OUTPUT«42.00␤»

[15:11] <colomon> but yeah, I'm not a big fan of the colon form in general

[15:11] <jnthn> (Some people like the colon syntax a lot. It's not my preference...but I've nothing really against it either.)

[15:11] <colomon> still, TMTOWTDI

[15:11] <masak> kill it with fire. :)

[15:11] <jnthn> masak: -> #parrot

[15:11] <jnthn> ;)

[15:13] <masak> jnthn: what's this ':notdef:' thing? http://twitter.com/uasi/status/8174326008258560

[15:13] <masak> looks made up.

[15:15] <jnthn> .:notdef maybe once woulda worked?

[15:15] <jnthn> No, that still loosk wrong

[15:15] <jnthn> Looks made up to be :)

[15:15] <jnthn> There was a notdef method once.

[15:15] <MindosCheng> pugs: <sleep read>.pick()

[15:15] <p6eval> pugs:  ( no output )

[15:15] <MindosCheng> pugs: say <sleep read>.pick()

[15:15] <p6eval> pugs: OUTPUT«read␤»

[15:15] <MindosCheng> Okey...

[15:16] <jnthn> Perl 6. Solving your important life decisions.

[15:16] * masak replies to uasi

[15:16] <masak> perl6: say <work rest>.pick

[15:16] <p6eval> pugs: OUTPUT«rest␤»

[15:16] <p6eval> ..rakudo : OUTPUT«work␤»

[15:16] <masak> oh noes :)

[15:16] <jnthn> I like Pugs answer better here. :)

[15:17] <masak> the two implementations kinda reveal their current active status, too.

[15:17] <jnthn> :)

[15:17] <MindosCheng> masak++

[15:17] <jnthn> ooh, almost time for my next talk

[15:18] <mathw> ooh

[15:18] <mathw> what's it on

[15:18] <MindosCheng> jnthn++

[15:19] <masak> oh, there's a blog post too, containing a similar error: http://d.hatena.ne.jp/uasi/20101126/1290783645

[15:20] <masak> oh wait!

[15:20] <masak> :!defined: *does* work.

[15:20] <masak> but it... looks so wrong... :)

[15:20] <masak> the second colon is an invocant colon.

[15:21] <masak> the first is a pair constructor, along the same principles as :e

[15:21] * masak holds head in hands

[15:22] <masak> how does one designate "invocant undefined" using the :U syntax?

[15:23] <colomon> method blah(Frob:U $self:)  

[15:23] <colomon> (he guessed, no idea if this works)

[15:23] <masak> right. thanks.

[15:25] <colomon> rakudo: sub blah(Str:U $not-a-string) { say $not-a-string.defined }; blah(Str) 

[15:25] <p6eval> rakudo : OUTPUT«===SORRY!===␤Invalid typename in parameter declaration at line 22, near " $not-a-st"␤»

[15:25] <colomon> rakudo: sub blah(Str $not-a-string) { say $not-a-string.defined }; blah(Str) 

[15:25] <p6eval> rakudo : OUTPUT«Bool::False␤»

[15:25] <masak> that's what I got locally too.

[15:28] *** flussence joined
[15:31] *** MayDaniel joined
[15:35] <masak> rakudo: say 42.notdef

[15:35] <p6eval> rakudo : OUTPUT«Bool::False␤»

[15:35] <masak> I'm not sure I can submit a rakudobug for this one. :)

[15:36] <masak> for all I know, it's "extra functionality" that Rakudo provides, on top of the spec.

[15:37] *** whiteknight left
[15:38] *** nymacro left
[15:41] *** yuki_ joined
[15:54] *** clkao joined
[15:57] *** yuki_ left
[15:58] *** ch3ck3r joined
[16:02] *** dd-sphere left
[16:10] <moritz_> std: sub bla(Int:U $x) { $x }

[16:10] <p6eval> std a194beb: OUTPUT«ok 00:01 121m␤»

[16:12] *** __david__ left
[16:12] <tadzik> hello again

[16:19] <masak> std: class C { method bla($?CLASS:U $self:) {} }

[16:19] <p6eval> std a194beb: OUTPUT«===SORRY!===␤You may not use the ? twigil in a signature at /tmp/dF09kjh67D line 1:␤------> class C { method bla($⏏?CLASS:U $self:) {} }␤    expecting twigil␤Parse failed␤FAILED 00:01 120m␤»

[16:19] <masak> didn't think so.

[16:20] *** jferrero joined
[16:23] <masak> wow, JS to "borrow" the Perl 6 way of writing if/while/etc expressions without parens? http://twitter.com/Smylers2/status/8191234032013312

[16:25] <takadonet> the original post does not even talk about Perl 6 !

[16:25] <takadonet> http://brendaneich.com/2010/11/paren-free/

[16:26] *** risou joined
[16:30] *** sftp left
[16:31] *** timbunce left
[16:38] *** timbunce joined
[16:40] *** dual joined
[16:44] *** sftp joined
[16:47] *** ch3ck3r left
[16:49] <kthakore> masak: morning. 

[16:49] <masak> kthakore: hi there.

[16:50] <kthakore> I am trying to remember our convo last night (6 hrs ago)

[16:50] <kthakore> Where did you say most of perl6's memory gets into?

[16:50] *** mkramer joined
[16:50] *** fcojocaru left
[16:51] <kthakore> in parrot or perl6 land or a combination of both?

[16:51] <flussence> http://irclog.perlgeek.de/perl6/2010-11-26#i_3031080 ?

[16:52] *** mkramer1 left
[16:52] *** mila_ joined
[16:53] <kthakore> flussence: yeah but that makes no sense to me

[16:53] <kthakore> tooling?

[16:53] <kthakore> what is that?

[16:53] <masak> kthakore: I was thinking about the tools required to make Rakudo.

[16:53] <kthakore> ah ... ok

[16:53] <masak> nqp-rx being the most prominent example.

[16:53] <tadzik> „Learning Perl 6 has been fun. I already want to stop writing Perl 5.”. Hah, I'm not the only one

[16:54] <kthakore> masak: well where does perl6's memory useage mostly lie? Did anyone do a static analysis?

[16:54] <kthakore> tadzik: yay from reddit :D

[16:54] <masak> nqp-rx is the embodiment of lessons learned from PCT, which in turn profited from lessons learned from PGE and TGE.

[16:54] <masak> kthakore: yes, I'm sure chromatic has done memory footprint analyses.

[16:54] <tadzik> kthakore: which thing? :)

[16:55] <masak> kthakore: I think "a combination of both" is most fair.

[16:55] <kthakore> ok

[16:55] <masak> kthakore: we know of memory inefficiencies in Parrot, and in Rakudo.

[16:55] <tadzik> kthakore: yay for Game programming tutorial :)

[16:55] <kthakore> is a problem of design or just how it is implemented at the time?

[16:55] <kthakore> tadzik: :D have you seen SDL_Manual?

[16:56] *** mila__ left
[16:56] <kthakore> tadzik: I tried last night to get SDL onto parrot and Perl6 ... but the memory and CPU usage of perl6 is not ready for it yet

[16:58] *** mkramer1 joined
[16:58] <masak> kthakore: maybe you could try to conspire with either jnthn/nqpnet or sorear/niecza, either of which probably has a smaller memory footprint.

[16:59] <masak> nomz &

[16:59] *** masak left
[17:00] *** mkramer left
[17:12] <tadzik> kthakore: yes, I love it! I wouldn't mind it PDF'd though

[17:13] * moritz_ wonders if oha's p6l mail should have gone to p6u

[17:13] *** risou_ joined
[17:14] * tadzik wonders whether he should subscribe p6l

[17:14] <oha> moritz_: if i've written in the wrong place, i'm sorry

[17:15] <oha> tadzik: and sorry if my mail is annoying :(

[17:16] <moritz_> oha: no problem, I was just surprised because usually p6l posts contain some new suggestions for the language

[17:16] *** risou left
[17:16] <moritz_> oha: I haven't quite understood what you want do with the signature

[17:16] <tadzik> oha: I don't know, haven't read that yet

[17:17] <moritz_> did you try to get the names of the parameters?

[17:17] <oha> moritz_: it is what i did

[17:17] <moritz_> ah

[17:17] <moritz_> "TODO: i would like to find a way to use the Signature for table names"

[17:18] <moritz_> that's the part I didn't understand

[17:18] <oha> but if you consider a "select tab1.field1, tab2.field2"

[17:18] <moritz_> how would a calling example look like?

[17:18] <moritz_> ah

[17:18] <oha> then the signature couldn't be $x.y

[17:18] <moritz_> fully qualified table names

[17:18] <oha> yep

[17:18] <oha> (or aliases, whatever)

[17:18] * moritz_ finally understands

[17:19] * moritz_ has no idea how to do that

[17:19] *** buu left
[17:19] *** buubot left
[17:19] <oha> moritz_: i was thinking on nested signatures

[17:19] <oha> but i still can't find a way to name a nested sig

[17:20] <moritz_> of course you could define some substitution rules

[17:20] <moritz_> $me-foo becomes me.foo

[17:20] <tadzik> oha: what is your realname, so I can find your post?

[17:20] <moritz_> also ' is allowed in identifiers

[17:20] <oha> moritz_: yup. anyway i have to confess that i've started thinking how to do something like chagning the perl6 grammar

[17:20] <moritz_> tadzik: sender is Oha [email@hidden.address]
[17:21] <oha> tarzik: should be Oha

[17:21] <oha> moritz_: but then i've realized it could be done without, and i enjoyed it. feeling happy i tout it was good to share this :)

[17:21] <oha> moritz_: nice, the ' is the best candidate for

[17:22] <tadzik> doesn't look bad to me

[17:22] *** M_o_C joined
[17:23] <oha> well, time to go home for me. ty for your suggestion moritz_. bye all

[17:24] <moritz_> cia oha 

[17:24] <moritz_> oha: fwiw you might like to use placeholders instead of pointies

[17:24] *** oha left
[17:32] <moritz_> oatclip monads: http://chrisdone.com/posts/2010-11-25-lisk-lisp-haskell.html

[17:35] <moritz_> or rather, fingernails in oatmeal monads

[17:35] <moritz_> whatever

[17:35] * moritz_ is out of brainz

[17:41] *** oha joined
[17:57] *** lamstyle left
[18:01] *** daxim left
[18:04] *** timbunce left
[18:04] *** lamstyle joined
[18:10] *** dakkar left
[18:15] *** risou__ joined
[18:15] *** jferrero left
[18:15] *** mkramer joined
[18:15] *** mkramer2 joined
[18:16] *** risou_ left
[18:16] *** mkramer left
[18:17] *** mkramer2 left
[18:18] *** mkramer1 left
[18:18] *** mkramer joined
[18:23] *** takadonet left
[18:26] <tadzik> std: my @a; @a[-1]

[18:26] <p6eval> std a194beb: OUTPUT«===SORRY!===␤Unsupported use of [-1] subscript to access from end of array; in Perl 6 please use [*-1] at /tmp/OKV6umIuEc line 1:␤------> my @a; @a[-1]⏏<EOL>␤Parse failed␤FAILED 00:01 120m␤»

[18:27] *** cjk101010 left
[18:27] <tadzik> rakudo: my @a = 1, 2, 3; @a[-1];

[18:27] <p6eval> rakudo :  ( no output )

[18:27] <tadzik> rakudo: my @a = 1, 2, 3; @a[-1]; say $!

[18:27] <p6eval> rakudo : OUTPUT«Any()␤»

[18:28] <tadzik> rakudo: my @a = 1, 2, 3; try { @a[-1]; } say $!

[18:28] <p6eval> rakudo : OUTPUT«===SORRY!===␤Confused at line 22, near "try { @a[-"␤»

[18:28] <mkramer> rakudo: my @a = 1, 2, 3; say @a[-1];

[18:28] <tadzik> oh come on

[18:28] <p6eval> rakudo :  ( no output )

[18:28] <tadzik> ===SORRY!===

[18:28] <tadzik> Cannot use negative index -1 on Array

[18:28] <tadzik> so http://rt.perl.org/rt3/Public/Bug/Display.html?id=63986 can be closed, no?

[18:28] <jnthn> *-1

[18:28] <mkramer> my @a = 1, 2, 3; say @a[*-1];

[18:28] <mkramer> blah

[18:28] <tadzik> yeah, I meant the bug. It should fail, that's ok

[18:29] <mkramer> just make this damn bot print its last expression =P

[18:29] <tadzik> I can fix the error message so it will behave like STD and we can mark that bug fixed

[18:29] <jnthn> (from earlier) "how does one designate "invocant undefined" using the :U syntax"?

[18:30] <jnthn> method (Foo:U $self:) { ... } # works

[18:30] <jnthn> But also should

[18:30] <jnthn> method (::?CLASS:U $self:) { ... }

[18:32] <tadzik> I think this one also works now: http://rt.perl.org/rt3/Public/Bug/Display.html?id=66252

[18:33] <tadzik> this too: http://rt.perl.org/rt3/Public/Bug/Display.html?id=67374

[18:36] <oha> am i wrong or @a[-1] should not be the same error of $x=-1; @a[$x]; ?

[18:36] *** am0c left
[18:37] *** palik left
[18:37] <tadzik> hmm, it can't be in-grammar then

[18:37] * tadzik feels like fixing

[18:38] <oha> tadzik: right now, rakudo exit with the same error to me

[18:38] <tadzik> fail "Cannot use negative index $pos on {self.WHO}" if $pos < 0;

[18:38] <tadzik> in Any-List.pm. Looks good to me, I think the bug can be closed

[18:39] *** leprevost left
[18:40] *** envi left
[18:40] <tadzik> http://rt.perl.org/rt3/Public/Bug/Display.html?id=69218 -- closable to, methinks

[18:41] *** MayDaniel left
[18:45] *** PacoLinux joined
[18:45] *** ggoebel joined
[18:45] <tadzik> http://rt.perl.org/rt3/Public/Bug/Display.html?id=72968 and this

[18:45] *** ggoebel left
[18:45] <tadzik> ...is there a RT guy around?

[18:45] <tadzik> s/a/an/

[18:47] <tadzik> or this: http://rt.perl.org/rt3/Public/Bug/Display.html?id=73148

[18:49] *** wamba left
[18:52] <tadzik> std: say

[18:53] <p6eval> std a194beb: OUTPUT«Potential difficulties:␤  Unsupported use of bare 'say'; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument at /tmp/xyp8lC4b3r line 1:␤------> say⏏<EOL>␤ok 00:01 117m␤»

[18:53] <flussence> ooh, p5.13.7 just made a huge amount of my $dayjob code redundant.

[18:53] <moritz_> flussence: with which feature?

[18:54] <flussence> auto-dereferencing array/hashrefs in builtins

[18:54] <moritz_> ah

[18:56] <tadzik> http://rt.perl.org/rt3/Public/Bug/Display.html?id=74476 -- closable

[18:56] <moritz_> do we have tests enabled for that?

[18:59] <moritz_> ah yes, colomon++ unfudged some

[19:02] *** tylercurtis joined
[19:03] <tadzik> http://rt.perl.org/rt3/Public/Bug/Display.html?id=76238 -- closable

[19:04] *** patrickas joined
[19:05] <patrickas> moritz_ ping

[19:05] *** bpa joined
[19:06] <moritz_> patrickas: pong

[19:06] <patrickas> hello boss !

[19:06] <patrickas> did you work on getting rakudo to build after the parrot git migration?

[19:07] <tadzik> hey, it works

[19:07] <tadzik> moritz_: do you have RT access?

[19:09] <moritz_> patrickas: yes

[19:09] <moritz_> tadzik: yes

[19:09] <moritz_> tadzik: don't you?

[19:12] <patrickas> moritz_: there are a few things not working for me (on win32) and I am unable to build rakudo anymore which might be unrelated

[19:12] <moritz_> patrickas: I don't have a win32 dev machine, so any fixes are very welcome

[19:13] <tadzik> moritz_: nah

[19:13] <tadzik> I wanted to do some bugfixing today, but everything I check works alredy

[19:13] *** lamstyle left
[19:13] <patrickas> The thing is I am building from scratch and I want to make sure that it is not my setup that is messed up ... did anyone else coplain on win32 ?

[19:13] <moritz_> tadzik: step 1: create an RT account

[19:13] <patrickas> or rather ... did anyone build successfully on win32 ?

[19:13] <moritz_> tadzik: step 2: tell pmichaud about your account name, and request edit privs for the perl6 queue

[19:14] <moritz_> patrickas: jnthn did some testing, fixed a failure, did it RONG, I fixed it differently... I don't know what the final outcome was

[19:15] <patrickas> ok then I'll take it up with him then..t hanks!

[19:16] <tadzik> phenny: tell pmichaud may I get the access to perl 6 RT? I found like 10 bugs today which are alredy working and can be closed

[19:16] <phenny> tadzik: I'll pass that on when pmichaud is around.

[19:16] *** M_o_C left
[19:18] <moritz_> tadzik: go to http://rt.perl.org/rt3/ and create an account (follow the "Get a Bitcard account" link), and then also phennytell pmichaud your nick

[19:19] *** lamstyle joined
[19:24] <tadzik> moritz_: done that

[19:27] <bpa> I've been trying rakudo on and off, really liking what I see.  I'm wondering if I've missed a dropped feature, or if I just imagined it.  Did this work before?  for 1 .. 3 b $x ...

[19:27] <Juerd> Er...

[19:27] <bpa> that is supposed to be the -> unicode character

[19:27] <Juerd> Unless you're suggesting blinking text as syntax feature, you may want to send that line again.

[19:28] <bpa> I don't think my irc client supports it

[19:28] <bpa> sorry about that

[19:28] <Juerd> :)

[19:28] <flussence> “→”?

[19:28] <bpa> In code it looks like a nice right arrow

[19:29] <Juerd> I think it'd be madness to support arrows like that, since there are quite a few in Unicode.

[19:29] <bpa> so I was just imagining it then?

[19:29] <Juerd> I guess so, especially as the language operators fit in latin1

[19:29] <gfldex> bpa: or you might have visions. with perl6 you cant relly tell the difference :)

[19:30] <bpa> I may have used it with pugs, can't really remember

[19:30] <bpa> The hyper operator works though, and that isn't ascii

[19:30] <gfldex> perl6 requires unicode

[19:30] <Juerd> Still unlikely, bpa

[19:30] <gfldex> if you want to you could define operaters like that

[19:31] <Juerd> You can

[19:31] <flussence> »« aren't ascii, but they are in iso8859-1

[19:33] <bpa> I think I'll stick with the core operators and not confuse people who may come across my code

[19:33] *** justatheory joined
[19:34] <bpa> I do think its amazing that I could extend the grammar do to it if I really wanted though

[19:34] <bpa> (without editing the source that is)

[19:35] <dalek> rakudo: 82f3de0 | patrickas++ | build/gen_parrot.pl:

[19:35] <dalek> rakudo: extra check needed for gen_parrot on win32

[19:35] <dalek> rakudo: review: https://github.com/rakudo/rakudo/commit/82f3de068b

[19:39] <oha> rakudo: "a'b" ~~ /((\w+)\')?(\w+)/; say $/[0][0], "|", $/[0][0][0];

[19:39] <p6eval> rakudo : OUTPUT«a'|a␤»

[19:40] <oha> i expected to get 'a' with the $/[0][0]; why must I use $/[0][0][0]?

[19:40] <oha> is the ? which make an array here?

[19:40] <moritz_> yes

[19:41] <moritz_> every quantifier turns that capture into an array

[19:41] <oha> i had to realize it alone

[19:44] <sjohnson> hi pals

[19:44] *** lamstyle left
[19:47] <moritz_> oha: if you use too many nested captures, you should think about using (named) subrules

[19:51] <TimToady> or [] where you don't care to capture

[19:56] *** _twitch left
[19:56] *** patrickas left
[19:58] *** mkramer1 joined
[19:58] *** silug joined
[19:59] <oha> moritz_: i've used $<foo>=(...)

[19:59] *** mkramer left
[20:00] *** kjeldahl left
[20:00] <oha> can i do something similar to: -> %x<foo> { ... }

[20:02] <TimToady> such binding has been conjectured, though you can't have a subscript as a formal parameter name

[20:09] *** lamstyle joined
[20:10] *** Raynes joined
[20:16] *** `26 joined
[20:18] *** gbacon joined
[20:25] *** masak joined
[20:25] <masak> ahoy!

[20:26] <jnthn> ahoj, masak :)

[20:26] <tadzik> ahoj :)

[20:27] <jnthn> rakudo: sub foo($ where (my %x<h> = $_)) { say %x<h> }; foo(42); # curious...

[20:27] <p6eval> rakudo : OUTPUT«===SORRY!===␤Non-declarative sigil is missing its name at line 22, near "$ where (m"␤»

[20:27] <jnthn> rakudo: sub foo($x where (my %x<h> = $_)) { say %x<h> }; foo(42); # curious...

[20:27] <p6eval> rakudo : OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 22␤»

[20:27] <jnthn> oh...

[20:27] <jnthn> duh :)

[20:28] <jnthn> rakudo: sub foo($ where (my %x, %x<h> = $_)) { say %x<h> }; foo(42); 

[20:28] <p6eval> rakudo : OUTPUT«Constraint type check failed for parameter ''␤  in 'foo' at line 22:/tmp/asBHelsmTw␤  in main program body at line 22:/tmp/asBHelsmTw␤»

[20:28] <jnthn> Hmm. :)

[20:28] <silug> warren: i'm surprised there aren't any commercial entities taking enough of an interest in spamassassin to put some manpower behind it.

[20:28] <jnthn> rakudo: sub foo($x where (my %x, %x<h> = $x)) { say %x<h> }; foo(42); 

[20:28] <p6eval> rakudo : OUTPUT«Constraint type check failed for parameter '$x'␤  in 'foo' at line 22:/tmp/YkiX0jvns_␤  in main program body at line 22:/tmp/YkiX0jvns_␤»

[20:28] <silug> urk

[20:28] * jnthn gets curious what that ends up failing...

[20:29] <jnthn> It's still pretty nasty looking even if it worked though.

[20:30] <masak> I'm just going to blog a little, and then I'll go to bed.

[20:30] <masak> don't want to ruin my good sleep streak :)

[20:32] <masak> tadzik++ # digging around in RT

[20:32] <tadzik> masak: I wanted to fix some bugs, but all of them were alredy fixed :(

[20:33] <masak> tadzik: how terrible! :)

[20:33] <masak> jnthn: why was this again? http://twitter.com/uasi/status/8254037887549440

[20:34] <masak> jnthn: uasi thinks it's "once for (dispatch) search, once for calling". is that the truth?

[20:35] <masak> also, uasi++ made a brainfuck interpreter in Perl 6: https://gist.github.com/717036

[20:36] <tadzik> oh, that could be a Parrot language

[20:36] <dukeleto> there is already a br interpreter on Parrot

[20:36] <dukeleto> s/br/bf/

[20:37] <jnthn> I think there's (white)space for a br interpreter ;-)

[20:37] <jnthn> masak: Yes

[20:37] *** timbunce joined
[20:37] <jnthn> masak: It's something that I think can get optimized away but...

[20:37] <masak> ...but not easily.

[20:37] <jnthn> Grr. I forget the subtlety

[20:38] <jnthn> We *do* avoid re-doing the nominal type checks.

[20:38] <masak> ah.

[20:38] <TimToady> masak: the Japanese consider the ō to be two syllables (or mora, to be preciser)

[20:38] <jnthn> I suspect there's a comment in the binder somewhere hinting at where to stick a future optimization in this area.

[20:38] <masak> TimToady: ah, thanks. that makes sense.

[20:39] <masak> uasi++ is very inquisitive. I like replying to his tweets.

[20:39] <TimToady> in fact, they would count it that way in haiku as well

[20:39] <masak> TimToady: I was wondering about that.

[20:39] <TimToady> english can stuff a lot more into a haiku than japanese can...

[20:39] <tadzik> Hmm, brainfuck almost works

[20:53] *** bpa left
[21:01] *** ch3ck joined
[21:11] <lue> ohayo wurld o/

[21:11] <masak> hellue!

[21:11] *** kfo joined
[21:12] <sjohnson> hi

[21:14] <masak> sjohnson: \o

[21:14] <sjohnson> :)

[21:14] <lue> it's strange. While writing a few tests last night, I started writing tests for things that will fail, and I had the urge to make them pass. But I had to go to bed [curse you rotation of the Earth due to forces I cannot quite name at this moment!!]

[21:15] <masak> doesn't sound strange at all.

[21:15] <masak> you have to learn to pace yourself.

[21:15] <masak> for example, start writing tests earlier in the day :)

[21:16] <masak> then you'll have time to implement them.

[21:16] <lue> it's as if... TDD works, somehow... :)

[21:17] <masak> so it's rumoured.

[21:18] <oha> does "a $x b" get compiled as "a "~$x~" b"?

[21:18] <ch3ck> hej masak \o

[21:18] <oha> or the expansion does not pass thru ~?

[21:18] <masak> oha: more like "a " ~ ~$x ~ " b"

[21:19] <masak> ch3ck: godkväll.

[21:19] *** timbunce left
[21:19] * moritz_ knows enough bokmål to understand that :-)

[21:20] <moritz_> though I'd say "god kveld" :-)

[21:20] *** rurban left
[21:20] <ch3ck> this was swedish, not norwegian

[21:20] <masak> right. the language on which norwegian was based. :P

[21:21] * masak wonders whether frettled or arnsholt will slap him first :)

[21:21] <moritz_> uhm, I thought it was based on Danish

[21:22] <masak> a truly scary thought :)

[21:22] <masak> hm. seems my hobby today is as a language chauvinist.

[21:22] <frettled> hugme: hug masak

[21:22] * hugme hugs masak

[21:23] <masak> awww :)

[21:23] <masak> I'll quote Teratogen. "I'm a failed troll" :)

[21:24] <masak> blog post! http://strangelyconsistent.org/blog/november-26-2010-all-in-the-name-of-saucepans

[21:24] <dalek> roast: 52c1e70 | moritz++ | S02-builtin_data_types/array.t:

[21:24] <dalek> roast: [array.t] unfudge some tests that rakudo now passes

[21:24] <dalek> roast: review: https://github.com/perl6/roast/commit/52c1e701ce

[21:24] <masak> tadzik: did all those tickets that you yelled "closable" about ever get closed?

[21:24] <masak> tadzik: would you like an admin bit for RT?

[21:25] <moritz_> masak: I closed the first that tadzik++ yelled about, and claimed the second (because I know of no tests so far)

[21:25] <moritz_> then I got distracted

[21:25] <masak> oh, good-ish.

[21:25] <masak> moritz_+ # :)

[21:27] <lue> today's xkcd is hilarious.

[21:27] <moritz_> masak: :-)

[21:28] <frettled> Zack Weiner's guest comic is nice, yes.

[21:28] <frettled> And SMBC is often entertaining.

[21:29] <frettled> masak++ - positively good progress (blog)

[21:29] <masak> er.

[21:29] * masak is happy to have a clown nose:    :©)

[21:30] <masak> frettled: yes. and the weekend will be even positiver.

[21:31] <oha> what am i doing wrong here? multi sub infix:<~>(B $l, Any $r --> B) { ... 

[21:31] <lue> .oO(I knew the colon was copyrighted! I knew it!)

[21:31] <moritz_> oha: maybe rakudo doesn't knwo about --> yet?

[21:31] <masak> it does.

[21:31] *** tylercurtis left
[21:32] <masak> rakudo: class B {}; multi sub infix:<~>(B $l, Any $r --> B) { ... }; say "alive"

[21:32] <p6eval> rakudo : OUTPUT«alive␤»

[21:32] <masak> oha: from what I can see, you're doing nothing wrong.

[21:32] <masak> oha: please be more specific, or realize that you're doing it right. :)

[21:32] <oha> masak: but when i my $x = B.new; $x ~ 'foo'; the sub isn't called

[21:32] <masak> oha: I see.

[21:32] <masak> oha: can you demonstrate that with p6eval?

[21:33] <oha> i'm using rakudo here

[21:33] <masak> so is p6eval.

[21:33] <oha> oh ok

[21:33] <masak> (see above)

[21:34] <oha> i've understood what i was missdoing

[21:34] <oha> the sub was inside class B { 

[21:34] <oha> and probably interpreted as a method of B

[21:34] <masak> no.

[21:34] <masak> but it makes it lexical inside B.

[21:35] <oha> ohoh! got it

[21:35] <masak> oha: subs and methods are separate things, at least as far as declarations are concerned.

[21:35] <oha> therefore i must put it outside the class, and if i'm going to include it as a pm i must declare it 'is export' too?

[21:37] <masak> well, there's still a difference between the file and the scope of the module.

[21:37] <masak> but yes, most of the time.

[21:39] * masak sleeps

[21:40] *** masak left
[21:40] *** Guest13659 left
[21:43] <Teratogen> I'm a failed troll!?

[21:44] *** tylercurtis joined
[21:44] *** tylercurtis left
[21:47] *** TypeNameHere_ joined
[21:54] *** jferrero joined
[22:00] *** mkramer1 left
[22:24] <dukeleto> Teratogen: that is the worst kind of troll.

[22:24] <Teratogen> oh dear =(

[22:25] <lue> rakudo: say ":a<b>" ~~ Hash # most likely fails, just curious

[22:25] <p6eval> rakudo : OUTPUT«0␤»

[22:31] <jnthn>  /win 11

[22:31] <jnthn> ...fail!

[22:31] <sorear> good * #perl6

[22:31] *** `26 left
[22:32] <Tene> /fail 11

[22:32] <jnthn> :P

[22:32] <diakopter> sorear: good

[22:38] <lue> afk

[22:53] *** jferrero left
[22:54] *** `26 joined
[22:54] *** `26 left
[22:54] *** `26 joined
[23:00] <tadzik> bah, masak's gone

[23:00] <sorear> @part #perl6

[23:00] <sorear> aloha: seen kthakore

[23:00] <aloha> sorear: kthakore was last seen in #perl6 6 hours 3 mins ago saying "tadzik: I tried last night to get SDL onto parrot and Perl6 ... but the memory and CPU usage of perl6 is not ready for it yet".

[23:01] <kthakore> sorear: hi

[23:06] *** starcoder joined
[23:07] <eternaleye> phenny: tell masak Hey! I read HP & the methods of rationality too! I prticularly like how Draco was absolutely floored by muggles being the first humans on the moon.

[23:07] <phenny> eternaleye: I'll pass that on when masak is around.

[23:12] *** wallberg left
[23:13] <kthakore> sorear: ?? ok ...

[23:14] <kthakore> I have to head out to a class then

[23:21] *** gbacon left
[23:42] *** dual left
[23:44] *** dual joined
[23:56] *** jferrero joined
