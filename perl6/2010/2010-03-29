[00:04] *** sundar left
[00:07] *** rgrau left
[00:13] *** clintongormley left
[00:21] <lue> rakudo: say "test"

[00:21] <p6eval> rakudo 8f7d29:  ( no output )

[00:21] <lue> .oO(darn, still broken)

[00:24] *** mberends left
[00:27] *** TiMBuS left
[00:27] <lichtkind> hello lue 

[00:29] <lue> hi lichtkind o/

[00:29] <lichtkind> lue: i just finished regex modifier

[00:31] <pugssvn> r30233 | lue++ | [t/spec] added test for RT #73836 (Z infix operator) 

[00:31] <lue> \o/

[00:31] <lue> lichtkind++

[00:32] <lichtkind> lue: thank but i dont write code like you

[00:32] <lue> what do you mean?

[00:34] <lichtkind> lue: i didnt wrote any test nor implemented something just wrote in http://wiki.perl-community.de/Wissensbasis/Perl6TafelAnhangA

[00:36] <lue> ah, I see :)

[00:37] <lue> I personally think it's great somebody is willing to document Perl 6 :)

[00:38] <lichtkind> lue: thank you did you read my blog posts?

[00:38] <lue> I don't believe I have (been gone for a few days)

[00:38] <lichtkind> lue: its just releasing to me because german is almost in sync with english version again

[00:38] <lichtkind> lue: just wanted to ask if its boring written or too braging

[00:39] <lichtkind> especially since latest 2 post on planetsix.org are mine :)

[00:40] <snarkyboojum> planetsix.org? 

[00:40] <snarkyboojum> ah planetsix.perl.org

[00:40] * snarkyboojum is a bit slow this morning

[00:41] <lichtkind> snarkyboojum: and i was too lazy to write full name :)

[00:41] <snarkyboojum> :)

[00:43] <lichtkind> i would be glad for any feedback

[00:43] *** yinyin joined
[00:43] <snarkyboojum> lichtkind: from memory you mentioned the grok tool

[00:44] <snarkyboojum> what's the status of that do you know?

[00:44] <lue> lichtkind: good posts!

[00:44] <lichtkind> snarkyboojum: i never touched that project, it just takes something from me as input

[00:44] <lue> .u thumb

[00:44] <phenny> lue: Sorry, no results for 'thumb'.

[00:44] <lue> .u hand

[00:44] <phenny> U+270C VICTORY HAND (✌)

[00:44] <lue> .u 270D

[00:44] <phenny> U+270D WRITING HAND (✍)

[00:44] <lue> .u 270B

[00:44] <phenny> U+270B (No name found)

[00:45] <lichtkind> snarkyboojum: it also uses another project of mine

[00:46] <lichtkind> snarkyboojum: as far as i know it was a GSOC project and since soc 2009 was over i dint heard much of it

[00:47] <lichtkind> snarkyboojum: but i had a issue and hinrik responded

[00:47] <lichtkind> so i would tell he is still bit commited to that

[00:50] <snarkyboojum> lichtkind: would be cool to start using grok

[00:50] <lichtkind> snarkyboojum: for you ? :)

[00:51] <snarkyboojum> lichtkind: yeah

[00:51] <snarkyboojum> you using it?

[00:51] *** lestrrat is now known as lest_away

[00:51] <snarkyboojum> is this it? http://github.com/hinrik/grok/

[00:58] <lichtkind> yes

[00:58] <lichtkind> snarkyboojum: never did

[00:58] <snarkyboojum> lichtkind: sounds cool - I'll have to give it a try :)

[01:01] <lichtkind> yes i would say its good, so far i have seen

[01:01] <lichtkind> the sources ive seen looked good

[01:04] <lue> alpha: my @a=1,2,3; @a[3]:=@a[1]; @a[1]=4;say @a[3]; @a[3]=5; say @a[1]

[01:05] *** dalek left
[01:05] <lue> bye dalek! o/

[01:06] <lue> if things like @a[1]:=@a[2] are NYI, that would likely be my next project. (Alas, my vacation is nearing completion :( )

[01:06] <p6eval> alpha 30e0ed:  ( no output )

[01:07] *** dalek joined
[01:14] <pugssvn> r30234 | lwall++ | [STD] de-LTA messages on malformed pairs for moritz_++ 

[01:21] *** lest_away is now known as lestrrat

[01:22] *** vamped joined
[01:35] <lichtkind> good night fellas

[01:35] *** lichtkind left
[01:41] *** molaf_ joined
[01:43] <lue> night o/ (ETOOLATE)

[01:45] *** molaf left
[01:50] *** alester joined
[01:55] *** Psyche^ joined
[01:55] *** wknight8111 left
[01:59] *** Patterner left
[01:59] *** Psyche^ is now known as Patterner

[02:30] *** jhuni joined
[02:58] *** pausenclown joined
[02:58] <pausenclown> rakudo: "blah foo blah" ~~ / foo { make 'bar' } /; say $/;

[02:59] <p6eval> rakudo 8f7d29:  ( no output )

[03:00] <lue> akf

[03:00] <lue> OOPS afk

[03:02] <pausenclown> rakudo: "4" ~~ / (\d) { make $0.sqrt } /; say $/

[03:02] <p6eval> rakudo 8f7d29:  ( no output )

[03:02] <pausenclown> pugs: "4" ~~ / (\d) { make $0.sqrt } /; say $/

[03:03] *** gfx joined
[03:03] <p6eval> pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.14/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' trapped by operat…

[03:06] *** meppel joined
[03:10] *** meppl left
[03:19] *** molaf_ left
[03:31] *** p6eval left
[03:31] *** p6eval joined
[03:35] *** pausenclown left
[03:38] *** christine left
[03:42] *** synth left
[03:42] *** synth joined
[03:47] *** p6eval left
[03:47] *** p6eval joined
[03:49] *** diakopter joined
[03:51] <diakopter> p6eval can't resurrect itself currently.

[03:51] <diakopter> rakudo segfaulting

[03:53] *** mrsaturn joined
[03:54] <diakopter> meanwhile, Darmok and Jalad at Tanagra

[03:55] <diakopter> rakudo: say 'riding the clouds with abandon'

[03:55] <p6eval> rakudo 534afd: OUTPUT«riding the clouds with abandon␤»

[03:55] <diakopter> o goodie.

[03:56] <diakopter> Tene: yer back in biznus

[03:57] *** ChanServ sets mode: +o diakopter

[03:57] *** diakopter was kicked by diakopter (phonebooths are too cramped for outfit changing, anyway))
[03:59] <spinclad> thx diakopterKICKED++

[04:00] *** mrsaturn left
[04:00] <lue> yay! p6eval is back

[04:00] <lue> perl6: say "oh happy day"

[04:00] <p6eval> elf 30234, pugs, rakudo 534afd: OUTPUT«oh happy day␤»

[04:08] *** christine joined
[04:14] <sjohnson> diakopters been really rough on himself as of late

[04:16] <lue> seems that way :)

[04:17] <sorear> perl6 = elf?

[04:19] <lue> that's just one implementation of P6

[04:19] <lue> elf: say "hello"

[04:19] <p6eval> elf 30234: OUTPUT«hello␤»

[04:19] <sorear> perl6: say 42

[04:19] <sorear> is it random?

[04:19] <p6eval> elf 30234, pugs, rakudo 534afd: OUTPUT«42␤»

[04:20] <sorear> oh, it always does elf, pugs, rakudo

[04:27] <lue> .u foot

[04:27] <phenny> U+23CD SQUARE FOOT (⏍)

[04:30] <pugssvn> r30235 | vamped++ | Perl 5 thinko - changed  to bash for first regex match 

[04:31] <vamped> darn, that interpolated my message. Should have said "changed $1 to $0"

[04:33] <lue> oh well

[04:35] <lue> darn perl-like Bourne Again SHell :)

[04:47] <lue> anybody here?

[04:48] <vamped> nope

[04:48] <lue> :/ nobody's ever here when I ask [ :) ]

[04:49] <lue> if you have firefox, you login to and use the RT frequently, then try this: https://addons.mozilla.org/en-US/firefox/addon/116888/

[04:49] <vamped> it's too late US time and too early European time

[04:49] <lue> As of now, you need to be logged in to rt.perl.org to use it, but still, it's the first version.

[04:50] <vamped> who made it - you?

[04:52] <lue> yes, which is why it's not that good :)

[04:52] <vamped> I'll look into it, and congrats on creating your first (?) firefox add-on.

[04:53] *** synth left
[04:55] <lue> I plan on creating a P6 sidebar at some point, which takes care of the "has to be logged in" problem (among other things of course)

[04:56] <lue> rakudo: say (<a b c> Z [1,*]).perl

[04:56] <p6eval> rakudo 534afd: OUTPUT«GatherIterator.new()␤»

[05:00] *** colomon left
[05:04] *** colomon joined
[05:04] <lue> hi colomon o/

[05:04] <lue> afk

[05:18] *** ash_ left
[05:30] <lue> upon review, it seems that searching the Public interface works if you are either logged in or not...

[05:57] <lue> good night

[05:58] <colomon> o/

[05:58] <colomon> rakudo: say (<a b c> Z [1,*]).eager.perl

[05:58] <p6eval> rakudo 534afd: OUTPUT«("a", 1, "b", !whatever_dispatch_helper)␤»

[05:58] <colomon> rakudo: say (<a b c> Z 1...*).eager.perl

[05:59] <p6eval> rakudo 534afd: OUTPUT«("a", 1, "b", 2, "c", 3)␤»

[06:02] *** rv2733 joined
[06:02] *** alester left
[06:03] *** rv2733 left
[06:11] *** colomon left
[06:11] *** christine left
[06:11] *** sbp left
[06:11] *** nsh left
[06:11] *** justatheory left
[06:11] *** elmex left
[06:11] *** cognominal left
[06:11] *** LionMadeOfLions left
[06:11] *** eiro left
[06:11] *** c1sung left
[06:11] *** BinGOs left
[06:11] *** meppel left
[06:11] *** felipe left
[06:11] *** sunnavy left
[06:11] *** Trey left
[06:11] *** bkeeler left
[06:11] *** PZt left
[06:11] *** constant left
[06:11] *** yves left
[06:11] *** mdxi_ left
[06:11] *** buu left
[06:11] *** s1n left
[06:11] *** ewilhelm left
[06:11] *** tomaw left
[06:11] *** astinus left
[06:11] *** Khisanth left
[06:11] *** hicx174_ left
[06:11] *** jnthn left
[06:11] *** sorear left
[06:11] *** renormalist left
[06:11] *** f00li5h left
[06:11] *** gfx left
[06:11] *** yahooooo left
[06:11] *** jql left
[06:11] *** niros left
[06:11] *** mj41 left
[06:11] *** jrockway left
[06:11] *** rhr left
[06:19] *** uniejo joined
[06:28] *** mtve joined
[06:30] *** colomon joined
[06:30] *** christine joined
[06:30] *** meppel joined
[06:30] *** gfx joined
[06:30] *** yahooooo joined
[06:30] *** jql joined
[06:30] *** niros joined
[06:30] *** astinus joined
[06:30] *** felipe joined
[06:30] *** sbp joined
[06:30] *** nsh joined
[06:30] *** Khisanth joined
[06:30] *** sunnavy joined
[06:30] *** elmex joined
[06:30] *** hicx174_ joined
[06:30] *** jnthn joined
[06:30] *** sorear joined
[06:30] *** mj41 joined
[06:30] *** cognominal joined
[06:30] *** Trey joined
[06:30] *** jrockway joined
[06:30] *** renormalist joined
[06:30] *** bkeeler joined
[06:30] *** LionMadeOfLions joined
[06:30] *** f00li5h joined
[06:30] *** PZt joined
[06:30] *** eiro joined
[06:30] *** constant joined
[06:30] *** yves joined
[06:30] *** mdxi_ joined
[06:30] *** rhr joined
[06:30] *** BinGOs joined
[06:30] *** c1sung joined
[06:30] *** buu joined
[06:30] *** s1n joined
[06:30] *** ewilhelm joined
[06:30] *** tomaw joined
[06:30] *** card.freenode.net sets mode: +o jnthn

[06:34] <moritz_> good morning

[06:37] *** thowe left
[06:48] *** gabiruh left
[07:00] *** REPLeffect joined
[07:00] *** gabiruh joined
[07:06] *** rgrau joined
[07:06] *** vamped left
[07:12] *** Trashlord left
[07:12] *** Su-Shee joined
[07:13] *** Trashlord joined
[07:13] *** Trashlord is now known as Guest86159

[07:20] *** jaldhar left
[07:21] *** Guest86159 left
[07:21] *** Guest86159 joined
[07:21] *** Guest86159 is now known as Trashlord

[07:30] <mathw> Morning

[07:39] <moritz_> rakudo: say 1

[07:39] <p6eval> rakudo 534afd: OUTPUT«1␤»

[07:39] <moritz_> std: 1

[07:39] <p6eval> std 30235: OUTPUT«ok 00:01 107m␤»

[07:39] * mathw has pleasant daydreams of slowly eviscerating one of his colleagues who's made a mess in the SVN repo

[07:41] <mathw> I should write a song

[07:41] <mathw> In which someone checks in some build products and some code that doesn't compile

[07:42] <mathw> And suffers a horrible consequence

[07:42] <moritz_> std: :!$foo

[07:42] <p6eval> std 30235: OUTPUT«[31m===[0mSORRY![31m===[0m␤Malformed False pair at /tmp/4haUnosNxz line 1:␤------> [32m:![33m⏏[31m$foo[0m␤FAILED 00:01 105m␤»

[07:42] * moritz_ had to look up eviscerate

[07:43] <moritz_> it's a lovely word.

[07:44] <hejki> eviscerate reminds me too much of wow

[07:44] <hejki> depressing word :>

[07:46] <mathw> it's a good word for certain situations that don't come up all that often in real life

[07:47] <mathw> but we've got windows-specific code in something that's supposed to be cross-platform

[07:47] <mathw> and that's not on at all

[07:49] <hejki> i'm usually less discreet and use more .. depicting/descriptive words :)

[07:49] <hejki> like 'disembowel'

[07:49] <mathw> I tend to find 'disembowel' is something that's hard to imagine doing slowly

[07:50] <mathw> 'eviscerate' sounds slower

[07:50] <hejki> well disembowelment is pretty close to evisceration

[07:50] <hejki> disembowelment usually involves ripping out guts too

[07:51] <hejki> http://en.wikipedia.org/wiki/Disembowelment#Transanal_evisceration

[07:51] <mathw> yes

[07:57] <mathw> wikipedia truly does have everything

[07:58] <hejki> yes :>

[07:58] <hejki> only thing i'm not thinking about is that and rule #34

[07:58] <hejki> s/not// :>

[07:59] *** mikehh left
[08:00] <mathw> probably wise to not think about that too much

[08:00] <mathw> let's think about Perl instead

[08:01] *** gfx left
[08:01] <moritz_> speaking of which

[08:01] <moritz_> I've made some commits to the book yesterday night

[08:02] <moritz_> somebody with more English skillz than I could review them

[08:06] <mathw> I can do that

[08:06] <mathw> just... not today

[08:12] *** pnate joined
[08:12] *** dakkar joined
[08:15] *** iblechbot joined
[08:20] *** cotto joined
[08:22] *** [particle] left
[08:23] *** zibri joined
[08:24] *** [particle] joined
[08:26] *** proller joined
[08:32] *** proller left
[08:32] *** proller joined
[08:38] <moritz_> to all lurkers: If you are a student, Google might pay you to hack on fun Perl 6 projects

[08:38] <moritz_> we participate in this year's "Summer of Code" project

[08:39] <moritz_> if you're interested, raise your hand... erm, voice, and we'll think of a cool project

[08:45] *** [particle]1 joined
[08:46] *** [particle] left
[08:48] *** payload joined
[08:51] <hejki> a student

[08:51] <hejki> :<

[08:51] <hejki> i could've raised my hand otherwise :>

[08:52] <moritz_> hey, you can still hack on interesting things

[08:52] <moritz_> just the payment part might be problematic

[08:52] *** jaldhar joined
[08:52] <hejki> well i really don't need payment (in case the things i'm involved in doesn't require full-time attention either :))

[08:53] <hejki> also i've already contributed to the rakudo pre-ng

[08:53] <hejki> so payment isn't really an issue

[08:53] <hejki> my gf studies tho.. so i could sign up with her name? :)

[08:53] <moritz_> "Google defines a student as an individual enrolled in or accepted into an accredited institution including (but not necessarily limited to) colleges, universities, masters programs, PhD programs and undergraduate programs."

[08:53] <moritz_> :-)

[08:54] <hejki> btw.. does google retain ownership of the code or is it GPLed?

[08:54] <hejki> i'm not giving anything to google for free

[08:54] <moritz_> it needs to be open-sourced

[08:54] <moritz_> but you retain ownership

[08:55] <hejki> i prefer full GPL

[08:56] * hejki works in a company exploiting BSD/MIT-license :>

[08:56] *** rgrau left
[08:56] <hejki> licenses*

[08:56] <moritz_> (but that's again if you  participate in SOC, in which case google pays you anyway )

[08:56] <moritz_> hejki: there's no exploiting in using software under the terms it was published under

[08:57] <hejki> moritz_: by exploitation i refer to the fact software is chosen by licenses in certain situations

[08:57] <hejki> moritz_: and ofc the free for commercial-use licenses are the most appealing for a company offering services on a open source setup

[08:58] <hejki> also there are some border-cases where GPL is interpreted as badly as it can be :)

[08:58] <moritz_> I also find that legitimate

[08:58] <hejki> ofc it's legitimate, i just don't like it 

[08:58] <moritz_> now that's not so nice

[08:58] <hejki> i think this stuff should be GPLized

[08:58] <hejki> or at least parts of it

[08:58] <hejki> at least our transparent SMTP tagging proxy 

[08:59] <hejki> i wouldn't GPLize the perl code tho.. it's so awfully ugly :D

[08:59] <moritz_> :-)

[08:59] <hejki> well imagine compilation of 15k+ rows with no strict/no warnings

[09:00] <hejki> that's what i work with on daily basis :P

[09:00] <hejki> but the SoC sounds nice, how do i sign up? :>

[09:00] <hejki> (also this is something i might benefit from on my future career ;))

[09:01] <hejki> after all google is making unit in finland, i could work there :>

[09:01] *** alanhaggai joined
[09:01] <moritz_> well, there are two ways to participate

[09:01] <moritz_> either as student or as a mentor

[09:02] *** alanhaggai left
[09:02] <hejki> s/mentor/project manager/; ? :)

[09:02] <moritz_> as a student, you have to be a student (see <http://socghop.appspot.com/document/show/gsoc_program/google/gsoc2010/faqs>) somewhere

[09:02] <moritz_> yes, that's basically it

[09:02] <hejki> well i'm alreadya BEng so participating as a student isn't really the eligible option for me :P

[09:02] <moritz_> :(

[09:02] <moritz_> I'm going to be a PHD student soonish

[09:03] <moritz_> so I actually could participate as a student :-)

[09:03] <hejki> heh.. if i ever get Ph.D it's since i'm going to be a teacher :>

[09:03] <hejki> how's the mentor role in SoC? i guess they have some sort of requirements

[09:03] *** huf joined
[09:04] <moritz_> well, if a student choses a project that's interesting for you, and you want to mentor, you should have experience with the development of that project

[09:04] <moritz_> so that you can give the student directions (settiing up a development environment, introducing to other developers, organizing commit bits etc.)

[09:05] <hejki> oh

[09:05] <hejki> i don't want that.. i want to code

[09:05] <hejki> :D

[09:06] * moritz_ prefers coding to managing too

[09:06] <moritz_> but OTOH if it helps to get work done, I also do managing

[09:08] <hejki> if i couldn't code, i'd be a consult/specialist/analyst :>

[09:10] <moritz_> :-)

[09:11] *** payload left
[09:11] <hejki> well.. i'm a software specialist atm, but i do lots of coding too :P

[09:11] <hejki> but everytime we need something other, like new software/solutions i'm the guy going google frenzy ;>

[09:12] *** Helios left
[09:13] *** Helios joined
[09:14] *** rgrau joined
[09:20] *** snarkyboojum left
[09:27] *** pnate left
[09:38] *** yinyin left
[09:42] *** agentzh joined
[09:46] *** jhuni left
[09:56] *** clintongormley joined
[09:57] *** ruoso left
[10:06] *** Trashlord left
[10:08] <hejki> hmm.. i found myself a suitable coding table http://www.ergoquest.com/computer_table_7_ezg_1.jpg

[10:19] *** clintongormley left
[10:24] *** clintongormley joined
[10:32] *** agentzh left
[10:35] *** Helios left
[10:36] *** Helios joined
[10:54] *** lestrrat is now known as lest_away

[10:58] *** niros left
[11:04] * sorear prods jnthn at the latest blizkost commit

[11:05] *** eternaleye joined
[11:24] *** xomas left
[11:24] *** xomas joined
[11:31] *** nadim joined
[11:34] *** cotto_w0rk joined
[11:34] *** cotto_work left
[11:37] <jnthn> oh hai, 6folk.

[11:40] <m6locks> hai

[11:40] <m6locks> lunch time, bbl 

[11:44] *** renormalist left
[11:44] *** renormalist joined
[11:46] *** nadim left
[11:55] *** payload joined
[11:59] *** bluescreen joined
[12:03] *** Trashlord joined
[12:03] *** lest_away is now known as lestrrat

[12:03] *** Trashlord is now known as Guest63559

[12:03] *** envi^home joined
[12:06] *** masak joined
[12:06] <masak> oh hai, #perl6

[12:06] <jnthn> yayitsmasak!

[12:06] <hejki> rakudo: class Greet { has $.name is rw; method ohai { say "ohai $.name"; } };  my $g = Greet.new(name => 'masak'); $g.ohai();

[12:07] <p6eval> rakudo 534afd: OUTPUT«ohai masak␤»

[12:07] <masak> wow :)

[12:11] *** mikehh joined
[12:11] <mathw> we haz a masak!

[12:12] <frettled> \o/

[12:12] <masak> so... whoz op today?

[12:12] <frettled> masakfest!

[12:12] <frettled> jnthn := op

[12:13] <jnthn> Ja...jag har en kanelbrulle!

[12:13] * jnthn shares

[12:13] *** jnthn sets mode: +oo frettled masak

[12:13] <masak> '-bulle' :)

[12:13] <masak> (thanks)

[12:13] <jnthn> Aww!

[12:13] <jnthn> At least it's closer than kamelbullar.

[12:14] <frettled> I just got back from Gran Canaria (two-week cycling training camp), and read about pmichaud's woes.  Ow, that hurts.  :(  I really hope for the best for you, your wife and family!

[12:14] <mathw> masak does Op;

[12:14] <jnthn> .oO( The whirlpool approach to Swedish )

[12:14] <frettled> jnthn: kamelbrillar!

[12:14] <masak> jnthn: I'm not 100% sure, but it wouldn't surprise me if sv:'bulle' and en:'bun' were related.

[12:14] *** frettled sets mode: +o mathw

[12:14] <masak> jnthn: probably arnsholt can answer that. :)

[12:15] *** frettled sets mode: +o colomon

[12:20] <jnthn> :-)

[12:20] <jnthn> I believe bap has Scottish origins, but not sure about bun.

[12:22] <masak> lichtkind, snarkyboojum: [backlogging] grok is a nice application. it's used in Padre AFAIK. I'm always on the verge of providing content for it in the form of interlinked Pod articles. I will surely let myself be inspired at lichtkind++'s work when doing that.

[12:22] *** ruoso joined
[12:23] *** pausenclown joined
[12:24] <pausenclown> rakudo: "" ~~ / { make 'bar' } /; say $/

[12:24] <p6eval> rakudo 534afd: OUTPUT«␤»

[12:25] <pausenclown> rakudo: "" ~~ / { $0 = 'bar' } /; say $/

[12:25] <p6eval> rakudo 534afd: OUTPUT«Cannot assign to readonly value␤current instr.: '&die' pc 17189 (src/builtins/Junction.pir:399)␤»

[12:25] <jnthn> rakudo: "" ~~ / { make 'bar' } /; say $/.ast

[12:25] <pausenclown> darn

[12:25] <p6eval> rakudo 534afd: OUTPUT«␤»

[12:25] <jnthn> Oh.

[12:25] <jnthn> That one probably should work. :-/

[12:25] <jnthn> rakudo: "" ~~ / { make 'bar' } /; say ?$/

[12:25] <p6eval> rakudo 534afd: OUTPUT«1␤»

[12:26] <pausenclown> rakudo: "123" ~~ / \d* :: \d /; say $/

[12:26] <p6eval> rakudo 534afd: OUTPUT«:: not yet implemented at line 11, near " \\d /; say"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[12:27] <moritz_> alpha: "123" ~~ / \d* :: \d /; say $/

[12:27] <p6eval> alpha 30e0ed: OUTPUT«␤»

[12:27] <moritz_> (that's correct)

[12:29] <pausenclown> i have a question regarding my xml parse regarding parsed entities.

[12:30] <pausenclown> in xml, the parse shall treat parsed entities as if their values (which can contain other markup).

[12:31] <pausenclown> are noted where that entity occurs. that makes it a little tricky.  

[12:32] <masak> why?

[12:32] <masak> do you have a concrete example?

[12:32] * moritz_ doesn't grok the question

[12:33] <pausenclown> for instance i have <!ENTITY wt "<foo />"> which gets referred later as &wt;

[12:34] <pausenclown> the parser will have to creat a start tag event for foo, once it reads &wt;

[12:35] <moritz_> so you need to store an entity table

[12:35] <moritz_> probably with a code reference that you call in the action method

[12:35] <moritz_> (except for normal entities, which just contain a Str)

[12:36] <pausenclown> i'm not sure how to do that. my idea is to apply the grammar from within a closure when i have read an entity, feed its value to the grammar and assign the resulting parse tree to $0

[12:36] <moritz_> and this code ref triggers the start event for foo

[12:37] <moritz_> pausenclown: there's a slight problem with that: $/.from and $/.to will be totally unrelated to the original XML if you do a re-parse

[12:38] *** TiMBuS joined
[12:39] <pausenclown> why should something i do in a closure affect it's outside? or is a grammar a singleton?

[12:41] <moritz_> rakudo: sub foo { 1 }; sub foo($x) { 1; }

[12:41] <p6eval> rakudo 534afd:  ( no output )

[12:42] <pausenclown> interesting. which one wins?

[12:43] <moritz_> rakudo: sub foo { 1 }; sub foo($x) { 1; }; say foo()

[12:43] <p6eval> rakudo 534afd: OUTPUT«1␤»

[12:43] <moritz_> rakudo: sub foo { 1 }; sub foo($x) { 1; }; say foo(3)

[12:43] <p6eval> rakudo 534afd: OUTPUT«Too many positional parameters passed; got 1 but expected 0␤current instr.: 'foo' pc 222 (EVAL_1:89)␤»

[12:43] <moritz_> the first one

[12:43] <moritz_> actually it should error out

[12:43] <moritz_> RT #71810

[12:43] <masak> p6l email starting with 'It may not have any practical use, but [...]' -- masak stops reading :)

[12:44] <jnthn> The answer to that thread is, "All of these belong in modules."

[12:44] <moritz_> aye

[12:44] <moritz_> that's what we have multi dispatch for

[12:44] <moritz_> so that you can write your on infix:<cmp>(Complex, Complex)

[12:45] <colomon> Actually TimToady discussed an ordering for Complex with me a month ago, and I've already got plans to extend it to all Numerics.  ;)

[12:45] <colomon> afk --> noms

[12:49] *** ignacio_ joined
[12:54] <masak> good post by mst++ -- http://www.shadowcat.co.uk/blog/matt-s-trout/show-us-the-whole-code/

[12:55] <mathw> he always sets off my irc highlighter

[12:55] <masak> something in me wants to get up and cry, 'at least you have line numbers! :<'

[12:55] <mathw> why are people allowed to have the same first namea s me

[12:55] <pausenclown> rakudo: grammar G { rule TOP { 1 }; method parse { 0; } } G.parse("1");

[12:55] <moritz_> if anyone wants a LHF to write tests for: RT #64606 should be pretty simple

[12:55] <p6eval> rakudo 534afd: OUTPUT«Confused at line 11, near "grammar G "␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[12:57] <mathw> masak: that's a great link to poke people with when they argue about whether an extensible grammar is better than a source filter :)

[12:58] <masak> I like how all the details in that post conspire to give the client the wrong impression.

[12:58] <masak> and only a pro like mst can diagnose it and stay sane. :)

[12:58] <masak> er, stay on the same sanity level. :P

[13:01] *** riffraff joined
[13:04] <mathw> only somebody who's already tussled with Switch.pm

[13:07] <pausenclown> i dont get how to call up the inheritance chain.

[13:08] <jnthn> nextsame and friends.

[13:08] <masak> last time I looked, 'nextsame' and friends did three different things in different contexts.

[13:08] <masak> inheritance chain, multi dispatch, and wrapping.

[13:08] *** PacoLinux joined
[13:08] <jnthn> True; it's a general abstraction for "next best candidate".

[13:09] *** PerlJam joined
[13:09] <masak> it would be interesting to see what difficulties arise when these three are combined in different ways.

[13:10] <masak> let's say I want to go to the next MMD candidate while wrapping a method, for example.

[13:11] <jnthn> When you're in the wrapper of the wrappee?

[13:11] *** nadim joined
[13:11] <masak> the wrapper. the one where 'nextsame' means 'go into the wrappee'.

[13:12] <jnthn> Well, then you're probably screwed...

[13:12] <moritz_> so you need an adverb to nextsame() that tells you in which direction to walk... -)

[13:12] <jnthn> callnext(:pub);

[13:12] <moritz_> (smiley with eyes closed)

[13:14] <jnthn> Won't really work with

[13:14] <jnthn> er, with with

[13:15] <moritz_> callnext($pos, :$named):pub

[13:16] <masak> I mean, if you usify three concepts, you have to be prepared to waterbed the places where they're *not* like each other.

[13:18] <jnthn> Aye

[13:18] <jnthn> I don't know what the answer is there.

[13:18] <moritz_> our new meme: "waterbed" as a verb

[13:18] <jnthn> I waterbeded the whole Perl 6.

[13:31] <PerlJam> jnthn: does that mean you pushed something down in Perl 6 and it popped up somewhere else?  (like Ruby :)?

[13:31] *** rgrau` joined
[13:39] <pausenclown> rakudo: grammar G { 	has $.callback is rw; 	 	rule TOP { 		.+ 		{ say .callback; } 	} };  G.callback = { say "got" }; G.parse("123");

[13:39] <p6eval> rakudo 534afd: OUTPUT«Type objects are abstract and have no attributes, but you tried to access ␤current instr.: 'perl6;Attribute;accessor_helper_rw' pc 3559 (src/gen/Attribute.pir:423)␤»

[13:43] <pausenclown> is there any way to communicate to the outside from a grammar closure?

[13:43] *** dalek left
[13:45] *** dalek joined
[13:45] <pausenclown> nah forget that q. makes no sense.

[13:46] <masak> pausenclown: declare a lexical outside, assign to it inside.

[13:47] <masak> for some reason, people also like to declare dynamicals in this situation.

[13:48] <masak> perhaps it has something to do with TimToady's quote (paraphrasing) "a lexical nesting in the thing being parsed corresponds ot a dynamical nesting in the parser"

[13:49] <masak> s/ot/to/

[13:54] *** pmurias joined
[13:55] <pmurias> ruoso: ping

[13:56] *** colomon left
[13:58] <pausenclown> didnt mst promised to blog about perl6 regularly?

[13:58] <pmurias> mst?

[13:58] <masak> not that I know.

[13:58] <pausenclown> ah no, that was catalyst =)

[13:59] *** pmurias left
[14:01] *** Abraka joined
[14:01] <pausenclown> is the alpha branch RC for the * release?

[14:03] <pausenclown> oh and by the way, do we have an idea of the actual release date of *?

[14:03] *** Lorn left
[14:04] <masak> no, the alpha branch is the branch we used to call 'master' before we made the newer 'ng' branch master.

[14:05] <mathw> there is no branch for the * release

[14:05] <masak> we haven't pinned down the Rakudo * release date, but we're leaning towards "after April" right now. April used to be the preliminary target month, but it isn't anymore.

[14:05] <pausenclown> too bad, cause it supports :: in regex

[14:06] <pausenclown> what do you mean "there is no branch for the * release"?

[14:06] *** Abraka left
[14:07] <masak> there's no separate branch for the first Rakudo * release.

[14:07] <pausenclown> masak: good news (somehow). leaves me time to finish XML::Parser =)

[14:07] <jnthn> pausenclown: What's in master now is what we're hacking into shape to become Rakudo *.

[14:08] <pausenclown> that's what i meant.

[14:08] <jnthn> pausenclown: Yes, there's some things in the alpha branch that dodn't work in master yet, but they shoudl by Rakudo *.

[14:08] <pausenclown> who is working on the grammars?

[14:12] <jnthn> bkeeler++ and moritz_++ have both done some bits of late, with guidance from pmichaud++.

[14:12] *** Lorn joined
[14:14] <pausenclown> k. tx

[14:16] *** justatheory joined
[14:19] *** am0c joined
[14:21] <masak> ooh, bkeeler++ # http://rt.perl.org/rt3/Ticket/Display.html?id=73862

[14:22] <jnthn> BTW, does anybody know what the "build with distutils" patch is all about that's on the perl6-compiler list?

[14:25] <jnthn> bkeeler++ !!! :-D

[14:28] <ruoso> hmm... everytime I'll pong to pmurias, he already left the channel

[14:30] *** sorear left
[14:31] *** sorear joined
[14:31] *** ash_ joined
[14:33] <moritz_> jnthn: it's about removing the perl 5 dependency from the Rakudo build

[14:34] <jnthn> moritz_: Does it also replace the use of makefiles?

[14:35] *** mikehh left
[14:35] *** mikehh joined
[14:36] <moritz_> jnthn: yes

[14:36] *** nihiliad joined
[14:39] <jnthn> Oh.

[14:39] <jnthn> I'm...not sure how I feel about that.

[14:40] * moritz_ not either

[14:40] <jnthn> My initial reaction is "no".

[14:40] <jnthn> But would be good to see what pmichaud++ makes of it.

[14:40] *** abra joined
[14:41] <moritz_> it might get rid of some of our platform specific limitations in Makefile

[14:42] <jnthn> Specifically?

[14:42] *** uniejo left
[14:42] <ash_> it should be possible to make everything with platform independent makefiles and config files  

[14:42] <jnthn> Makefiles may not be perfect, but they're a known quantity, and I wouldn't say they've been a particular pain point for Rakudo.

[14:43] <ash_> not saying you need to change that, but its 'possible' lots of other projects can do it, i see no reason rakudo and parrot cant 

[14:43] *** dj_goku left
[14:43] *** dj_goku_ joined
[14:43] *** colomon joined
[14:43] <moritz_> jnthn: for example for splitting the compilation of core files, both mberends++ and I wanted some substitution rules

[14:43] <ash_> parrot is the more scary one, since it does so much code generation with perl 

[14:44] *** pmurias joined
[14:44] <jnthn> moritz_: Ah, OK.

[14:44] <moritz_> jnthn: or for example generic rules like "this is how you compile a .pm to a .pir file"

[14:44] <jnthn> *nod*

[14:46] *** TiMBuS left
[14:47] <moritz_> it seems that when compilation of the core files is splitted up, the next bottleneck will be compiling the actions

[14:48] <moritz_> which also takes up about 500M

[14:48] <jnthn> On 64-bit?

[14:48] * jnthn was getting more like 300M for that.

[14:48] <moritz_> jnthn: aye

[14:48] <jnthn> Aye, I'm 32, so...

[14:49] <jnthn> Well, my PC is...as for me... :-)

[14:49] <moritz_> :-)

[14:50] <ash_> i wonder how bad that is on non x86 platforms... like ppc or something 

[14:52] <moritz_> std: EMPTY

[14:52] <p6eval> std 30235: OUTPUT«ok 00:01 107m␤»

[14:53] *** molaf joined
[14:55] *** ignacio_ left
[14:56] *** proller left
[15:00] <masak> I'd just like to report that the stacktraces in Rakudo are back to being insanely long.

[15:00] <masak> I think they're even longer than when people were complaining about them being far too long last time, and someone fixed it.

[15:00] <moritz_> and are also back to be totally useless

[15:00] <masak> yes.

[15:00] * masak submits rakudobug

[15:01] <jnthn> I could make them shorter, but unless the Parrot folks hand chance to unbreak some bits yet, I can't see them being awesomely useful. :-/

[15:01] *** nacho joined
[15:01] <jnthn> To give you an idea of how bad current state is, unless it improved very recently: the PIR line numbers are useless because they point to the start of the sub.

[15:02] *** Guest63559 left
[15:02] <colomon> I was just wondering how hard it would be to buy a small PPC box.

[15:03] <colomon> I was thinking for my work, but it would be good to have Rakudo tested there regularly too, if it's not already...

[15:03] *** TiMBuS joined
[15:05] *** patspam1 joined
[15:05] *** patspam1 left
[15:06] *** am0c left
[15:07] * jnthn afk for a little bit

[15:10] <moritz_> phenny, tell mberends that I made some small progress on the separate compilation of core files, but accidentally pushed it to branch split-setting (which seemed to be identical to split-gen-setting-2 branch...)

[15:10] <phenny> moritz_: I'll pass that on when mberends is around.

[15:11] <masak> the new Rakudo master doesn't support <?{{ ... }}> assertions anymore, does it?

[15:13] <moritz_> that was... what? PIR interpolation?

[15:13] <masak> yes, with a boolean return which said whether to continue or not.

[15:16] <masak> rakudo: say "working yet?"

[15:16] <p6eval> rakudo 534afd: OUTPUT«working yet?␤»

[15:16] <masak> \o/

[15:18] <masak> rakudo: regex foo { (\d+) <?{ $0.chars > 4 }> '!' }; say $_ ~~ /<foo>/ for '1234!', '123456!'

[15:18] <p6eval> rakudo 534afd: OUTPUT«You can not add a regex to a module; use a class, role or grammar ␤current instr.: 'perl6;Perl6;Compiler;Module;methods' pc 29118 (src/gen/package_pm.pir:448)␤»

[15:18] * masak scowls

[15:18] <masak> rakudo: grammar G { regex foo { (\d+) <?{ $0.chars > 4 }> '!' } }; say $_ ~~ /<G::foo>/ for '1234!', '123456!'

[15:18] <p6eval> rakudo 534afd: OUTPUT«regex assertion not terminated by angle bracket at line 11, near "::foo>/ fo"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[15:19] <moritz_> masak: G::foo NYI

[15:19] <TimToady> std: grammar G { regex foo { (\d+) <?{ $0.chars > 4 }> '!' } }; say $_ ~~ /<G::foo>/ for '1234!', '123456!'

[15:19] * masak submits TODO rakudobug

[15:19] <p6eval> std 30235: OUTPUT«ok 00:02 111m␤»

[15:20] <TimToady> std: $42foo(43)

[15:20] <TimToady> std: :42foo(43)

[15:21] * TimToady wonders whether he crashed feather...

[15:21] <moritz_> p6eval doesn't run on feather :-)

[15:21] <p6eval> std 30235: OUTPUT«[31m===[0mSORRY![31m===[0m␤Whitespace is required between alphanumeric tokens at /tmp/x2RisKbAgL line 1:␤------> [32m$42[33m⏏[31mfoo(43)[0m␤»

[15:21] <p6eval> std 30235: OUTPUT«[31m===[0mSORRY![31m===[0m␤Extra argument not allowed; pair already has argument of 42 at /tmp/LcNIZovOFK line 1:␤------> [32m:42foo[33m⏏[31m(43)[0m␤FAILED 00:01 105m␤»

[15:21] <masak> rakudo: grammar G { regex TOP { (\d+) <?{ $0.chars > 4 }> '!' } }; say G.parse($_) for '1234!', '123456!'

[15:21] <p6eval> rakudo 534afd:  ( no output )

[15:22] <masak> :(

[15:25] <moritz_> rakudo: grammar G { regex TOP { (\d+) <?{ Bool::True }> '!' } }; say G.parse($_) for '1234!', '123456!'

[15:26] <p6eval> rakudo 534afd: OUTPUT«1234!␤123456!␤»

[15:26] <moritz_> rakudo: grammar G { regex TOP { (\d+) <?{ Bool::False }> '!' } }; say G.parse($_) for '1234!', '123456!'

[15:26] <p6eval> rakudo 534afd: OUTPUT«␤␤»

[15:26] <moritz_> masak: I suspect the problem is really $0 or $/

[15:27] <masak> how so?

[15:27] <moritz_> you see, it does matter if you return a true or false value

[15:27] <moritz_> rakudo: grammar G { regex TOP { (\d+) <?{ say $/ }> '!' } }; say G.parse($_) for '1234!', '123456!'

[15:27] <p6eval> rakudo 534afd: OUTPUT«1234␤1234!␤123456␤123456!␤»

[15:27] *** alester joined
[15:27] <moritz_> rakudo: grammar G { regex TOP { (\d+) <?{ say $0 }> '!' } }; say G.parse($_) for '1234!', '123456!'

[15:28] <p6eval> rakudo 534afd: OUTPUT«1234␤1234!␤123456␤123456!␤»

[15:28] <moritz_> rakudo: grammar G { regex TOP { (\d+) <?{ say $0.chars }> '!' } }; say G.parse($_) for '1234!', '123456!'

[15:28] <p6eval> rakudo 534afd: OUTPUT«4␤1234!␤6␤123456!␤»

[15:28] <moritz_> hurm

[15:28] <moritz_> but $/ seems to be just fine

[15:40] *** molaf left
[15:43] * masak senses pmichaud++'s presence through email

[15:45] <[particle]1> the force is strong in this one.

[15:45] *** nihiliad left
[15:45] *** stepnem joined
[15:48] <[particle]1> for some reason, i can't switch my nick to [particle]

[15:48] <pugssvn> r30236 | lwall++ | [STD] be a bit more explicit on what was expected after :! 

[15:49] *** pmurias is now known as [particle]

[15:49] <[particle]> [particle]1: i can ;)

[15:50] *** [particle] is now known as pmurias

[15:50] <[particle]1> interesting....

[15:51] * moritz_ bought an USB cable today to get that freakin' printer working... and now can't find the cable anywhere

[15:51] <TimToady> where did you put it?

[15:52] <[particle]1> is it plugged into the printer?

[15:52] <pmurias> [particle]1: what happens when you \nick [particle]

[15:52] <moritz_> ISTR in my pocket.. might have lost it on the bike ride home

[15:52] <moritz_> [particle]1: not that easy :)

[15:52] <[particle]1> pmurias: nothing, no response

[15:52] <pmurias> \nick [particle]

[15:53] <TimToady> the most typical hiding places in our house: under something, in something, at eye-level, or where-it-belongs...

[15:53] <moritz_> if you use irssi, change to window 1 after the attempted nick change

[15:53] <[particle]1> i'm using pidgin

[15:53] <[particle]1> maybe time to quit freenode and reattach

[15:53] <[particle]1> ah, heck, i'll just restart pidgin

[15:53] <TimToady> or on any random horizontal surface...

[15:54] * moritz_ found the cashier's receipt for the cable

[15:54] <[particle]1> ah, good, now you can return the missing cable and get one you can find.

[15:54] <TimToady> I sense a disturbance in the farce...

[15:55] *** [particle]1 left
[15:55] *** [particle] joined
[15:56] * moritz_ finds a round tuit in his pocket

[15:56] <moritz_> somebody handed those out in Copenhagen

[15:56] <TimToady> maybe you should have used a cable tie

[15:56] *** pyrimidine joined
[15:57] <TimToady> .oO(What has it got in its pocketses?  Cable or nothing...)

[15:57] <moritz_> don't punic!

[16:05] *** nacho left
[16:07] *** clintongormley left
[16:10] *** nihiliad joined
[16:10] <pyrimidine> moritz_: regarding GSoC, if anyone out there is interested in implementing some bioinformatics-based work in perl6 we (BioPerl and OBF) might have a slot available:

[16:10] <pyrimidine> http://blogs.perl.org/users/pyrimidine/2010/03/bioperl-and-the-google-summer-of-code.html

[16:11] <masak> ooh.

[16:12] <TimToady> isn't it about time to start coming up with April Fools jokes?

[16:13] <masak> dunno, people seem to think Perl 6 is funny enough as it is :P

[16:14] *** JimmyNeutron joined
[16:14] <TimToady> Polish government to donate $78M to Perl 6 project if they'll use .pl extension

[16:15] <masak> :P

[16:15] <masak> That joke probably needs some polish...

[16:16] <jnthn> .oO( Can we get Saint Pierre to join Poland in a bidding war? :-) )

[16:16] <TimToady> they might just both decide to cooperatively hire assassins instead :)

[16:16] <hejki> "Microsoft buys Perl6 for $88M to use in future projects"

[16:17] <TimToady> that one is more likely to be swallowed whole

[16:18] <TimToady> given that Microsoft probably has more money than the Polish government...

[16:18] <pausenclown> sad but true.

[16:20] <TimToady> s/future projects/new Microsoft phone platform/

[16:20] <masak> rakudo: class A { multi method new() { |%_ } }'

[16:21] <p6eval> rakudo 534afd: OUTPUT«Placeholder variables cannot be used in a method at line 11, near "}'"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[16:21] * masak submits rakudobug

[16:21] <pausenclown> Redmond: Microsoft to support Perl6.NET. Larry Wall now a member of the board. Stallman: "It was 'bout time, sweetie."

[16:21] <masak> rakudo: class A { method f() { |%_ } }'

[16:21] <p6eval> rakudo 534afd: OUTPUT«Placeholder variables cannot be used in a method at line 11, near "}'"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[16:22] <jnthn> D'oh.

[16:22] <TimToady> std: class A { method f() { |%_ } }'

[16:22] <jnthn> It's right, but obviously wrong. :_)

[16:22] <p6eval> std 30236: OUTPUT«[31m===[0mSORRY![31m===[0m␤Placeholder variable %_ cannot override existing signature () at /tmp/MGNBaqm09z line 1:␤------> [32mclass A { method f() { |%_[33m⏏[31m } }'[0m␤    expecting any of:␤     POST␤   postfix␤  postfix_prefix_meta_operator␤FAILED 00:01 109m␤»

[16:23] * jnthn sorta prefers Rakudo's message.

[16:23] <TimToady> why can't they be used in methods?

[16:23] <jnthn> When it's legitimate that is.

[16:23] <jnthn> Well, %_ is already defined in a method anyway.

[16:23] <masak> oh, is it the parens?

[16:23] <jnthn> But basically because a method already has a signature.

[16:23] <TimToady> std: class A { method f { |%_ } }'

[16:23] <p6eval> std 30236: OUTPUT«[31m===[0mSORRY![31m===[0m␤Missing punctuation (semicolon or comma?) after block at /tmp/xW0rYBO7Tu line 1:␤------> [32mclass A { method f { |%_ } }[33m⏏[31m'[0m␤    expecting any of:␤       POST␤   bracketed infix␤    horizontal whitespace␤    infix or meta-infix␤     

[16:23] <p6eval> ..postfix␤        postfix_prefi…

[16:23] <jnthn> The invocant implies it.

[16:23] <masak> rakudo: class A { method f(*%_) { |%_ } }'

[16:23] <p6eval> rakudo 534afd: OUTPUT«Placeholder variables cannot be used in a method at line 11, near "}'"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[16:24] <jnthn> That's certainly a bug

[16:24] *** clintongormley joined
[16:24] <TimToady> std: class A { method f(*%_) { |%_ } }'

[16:24] <p6eval> std 30236: OUTPUT«[31m===[0mSORRY![31m===[0m␤Missing punctuation (semicolon or comma?) after block at /tmp/i9MIpYULG6 line 1:␤------> [32mclass A { method f(*%_) { |%_ } }[33m⏏[31m'[0m␤    expecting any of:␤  POST␤   bracketed infix␤    horizontal whitespace␤    infix or meta-infix␤     

[16:24] <p6eval> ..postfix␤        postfix_…

[16:24] * masak thought the invocant always implied it.

[16:24] <TimToady> stdbug, I guess

[16:24] <masak> yay! two in one!

[16:24] <pausenclown> Larry is always right, except when he isnt't =)

[16:25] <TimToady> but the invocant doesn't imply a sig to me

[16:25] <jnthn> Oh

[16:25] <jnthn> Well, patches welcome. :-)

[16:25] *** clintongormley left
[16:25] <TimToady> the stdbug to which I refer is the "Missing punctuation"

[16:25] <TimToady> std: class A { method f(*%_) { |%_ } };'

[16:25] <p6eval> std 30236: OUTPUT«[31m===[0mSORRY![31m===[0m␤(Possible runaway string from line 1 to line 2)␤Bogus statement at /tmp/7Nt2v2xuSW line 1:␤------> [32mclass A { method f(*%_) { |%_ } };[33m⏏[31m'[0m␤FAILED 00:01 108m␤»

[16:25] *** clintongormley joined
[16:26] <TimToady> oh, it's the '

[16:26] <TimToady> std: class A { method f(*%_) { |%_ } }

[16:26] <p6eval> std 30236: OUTPUT«ok 00:01 107m␤»

[16:26] <TimToady> not a stdbug then

[16:26] <TimToady> std: method f { say $^a }

[16:26] <p6eval> std 30236: OUTPUT«ok 00:01 106m␤»

[16:26] <TimToady> std is fine with methods using placeholders

[16:27] <jnthn> Yeah, but std just has to parse. :-P

[16:28] <TimToady> in the case, no, it's analyzing the sig

[16:28] <TimToady> or lack thereof

[16:28] <jnthn> Well, as I said, patches welcome, or I'll get to it at some point.

[16:29] <TimToady> "patches welcome" doesn't work on me, when the whole point from the beginning was to kick me out of the Implementors Guild.  :)

[16:29] <ash_> all classes (without being explicit?) inherit from Any, right? but could you do class Foo is Mu ? and skip any? 

[16:30] <TimToady> sure, that's what Junctions do

[16:30] <jnthn> TimToady: It wasn't specifically to you, more a "I'd appreciate it if someone != me could look at it" :-)

[16:30] <TimToady> yeah, sure, ignore the pragmatics of "patches welcome"  :)

[16:30] <jnthn> ;-)

[16:30] <TimToady> reminds me of the *plonk* discussion

[16:31] <jnthn> I...never quite understood that meme.

[16:31] * PerlJam blames tchrist

[16:31] <ash_> anyone silly question, all objects have a HOW, but custom ones have a ClassHOW, is (for instance) Mu.HOW eqv Mu? and Str.HOW eqv Str? 

[16:31] <TimToady> that...could well be true...

[16:32] <PerlJam> (only because I haven't heard from him in a long while and he was the king of *plonk*)

[16:32] <ash_> s/aynone/another/

[16:32] <TimToady> there there are any number of good candidates for having invented *plonk*

[16:33] <PerlJam> google probably knows :)

[16:33] <ash_> > say Str.HOW.WHAT;

[16:33] <ash_> Str()

[16:33] <TimToady> that's just wrong

[16:33] <TimToady> Str.HOW is a metaclass, and should say it's a type object

[16:34] <TimToady> s/metaclass/metaclass instance/

[16:34] <jnthn> Yeah, that does look a tad dubious...

[16:34] <TimToady> grr

[16:34] <ash_> so... thats wrong? 

[16:34] <TimToady> s/should/shouldn't/

[16:34] <ash_> k 

[16:34] <jnthn> Probaly should say ClassHOW.

[16:34] <ash_> > say Str.HOW.blah;

[16:34] <ash_> Method 'blah' not found for invocant of class 'ClassHOW'

[16:34] <ash_> it does do that... 

[16:34] <ash_> so its really a ClassHOW? 

[16:34] <jnthn> It is.

[16:35] <ash_> hm, k 

[16:35] <jnthn> I guess ClassHOW but define WHAT. :-/

[16:35] <TimToady> rakudo: say ClassHOW.WHAT

[16:35] <p6eval> rakudo 534afd: OUTPUT«ClassHOW()␤»

[16:35] <jnthn> heh.

[16:35] <ash_> and all (probably all) Str's have the same instance of ClassHOW for WHAT? 

[16:35] <jnthn> Color me confused.

[16:35] <TimToady> rakudo: say ClassHOW.HOW.fofof

[16:35] <p6eval> rakudo 534afd: OUTPUT«Method 'fofof' not found for invocant of class ''␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[16:35] <jnthn> Heh

[16:35] <ash_> rakudo: say Mu.HOW.WHAT; 

[16:35] <p6eval> rakudo 534afd: OUTPUT«Mu()␤»

[16:36] <TimToady> also wrong

[16:36] <jnthn> rakudo: say ClassHOW.HOW.HOW

[16:36] <p6eval> rakudo 534afd:  ( no output )

[16:36] <jnthn> rakudo: say ClassHOW.HOW.HOW.WHAT

[16:36] <p6eval> rakudo 534afd: OUTPUT«P6metaclass()␤»

[16:36] <ash_> rakudo: say Mu.HOW.HOW.HOW.WHAT;

[16:36] <p6eval> rakudo 534afd: OUTPUT«P6metaclass()␤»

[16:36] <jnthn> Heh. Now we've reached the guts. :-)

[16:36] <ash_> :p

[16:37] *** payload1 joined
[16:37] <jnthn> The answer to ClassHOW.HOW may well want to be implementation specific, though.

[16:37] * ash_ is trying to figure out the guts, so i can put as little as possible of them in my nqp

[16:38] <masak> yayiblogged! http://use.perl.org/~masak/journal/40280

[16:38] <ash_> so... $a = Mu.HOW  ... later in the program ... $b = Mu.HOW; ($a eqv $b) eqv True?

[16:38] * masak goes swimming

[16:39] *** masak left
[16:39] <jnthn> Woulda thought so.

[16:39] <ash_> kk, just checking

[16:39] <pausenclown> rakudo: grammar G { rule TOP { <test(one)> }; rule one { 1 }; rule test($x) { $x }; }; say G.parse("1");

[16:40] <p6eval> rakudo 534afd: OUTPUT«␤»

[16:40] <pausenclown> rakudo: grammar G { rule TOP { <test(<one>)> }; rule one { 1 }; rule test($x) { $x }; }; say G.parse("1");

[16:40] <p6eval> rakudo 534afd: OUTPUT«␤»

[16:40] <pausenclown> mmh

[16:41] *** payload left
[16:41] <TimToady> class A { method f() { |%_ } }'

[16:41] <TimToady> oops

[16:41] <pausenclown> rakudo: grammar G { rule TOP { <test(<one>)> }; rule one { 1 }; rule test($x) { <x> }; }; say G.parse("1");

[16:41] <p6eval> rakudo 534afd: OUTPUT«Method 'x' not found for invocant of class 'G'␤current instr.: 'perl6;G;test' pc 1210 (EVAL_1:0)␤»

[16:41] *** payload1 left
[16:41] <TimToady> middle mouse button doesn't open a link in another irssi tab  :)

[16:42] <pausenclown> rakudo: grammar G { rule TOP { <test(<one>)> }; rule one { 1 }; rule test($x) { <$x> }; }; say G.parse("1");

[16:42] <p6eval> rakudo 534afd: OUTPUT«Malformed regex at line 11, near "test($x) {"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[16:43] *** payload joined
[16:43] <pausenclown> i think i've read somewhere about passing a rule to another rule.

[16:43] *** ash_ left
[16:45] <TimToady> std: grammar G { rule TOP { <test(<one>)> }; rule one { 1 }; rule test($x) { <$x> }; }; say G.parse("1");

[16:45] <p6eval> std 30236: OUTPUT«ok 00:01 110m␤»

[16:46] <pausenclown> nooooooooooooo

[16:46] <pausenclown> =)

[16:46] <TimToady> mind you, <test('one')> would work as well, nothing magically assertive about <one> as an expression

[16:46] *** mssm joined
[16:46] <PerlJam> TimToady: I was going to ask about how that <one> was parsed 

[16:47] <TimToady> inside of () is normal Perl expression

[16:47] <pausenclown> You mean '1' would work (as in matching successfully).

[16:47] *** riffraff left
[16:47] <TimToady> std: grammar G { rule TOP { <test(-e ** (-i * pi))> }; rule one { 1 }; rule test($x) { <$x> }; }; say G.parse("1");

[16:48] <p6eval> std 30236:  ( no output )

[16:48] <PerlJam> Hmm.  What do <0> and <1> mean in regex?

[16:49] <TimToady> to do a symbolic call you might need <::($x)>

[16:49] *** ignacio_ joined
[16:49] <TimToady> otherwise it's going to compile into /0/ or /1/

[16:49] <TimToady> <$x> is biased towards interpreting $x as regex

[16:50] <TimToady> $x is biased towards literal string

[16:50] <TimToady> but if $x contains a Regex, it's the same as <$x>

[16:50] <TimToady> however, 'one' is not a regex

[16:50] <TimToady> '&one' might be

[16:51] <TimToady> er, just bare &one

[16:53] <pausenclown> rakudo: grammar G { rule TOP { <test(<one>)> }; rule one { 1 }; rule test($x) { { say $x } }; }; say G.parse("1");

[16:53] <p6eval> rakudo 534afd: OUTPUT«one␤␤»

[16:53] *** diakopter joined
[16:53] <pausenclown> rakudo: grammar G { rule TOP { <test(<one>)> }; rule one { 1 }; rule test($x) { { say $x.WHAT } }; }; say G.parse("1");

[16:53] <p6eval> rakudo 534afd: OUTPUT«Str()␤␤»

[16:54] <PerlJam> I don't see a rule (pardon the pun) for a leading numeric char in S05

[16:54] <PerlJam> (e.g. <1>)

[16:54] <TimToady> std: /<1>/

[16:54] <p6eval> std 30236: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unrecognized regex assertion at /tmp/Hk8qH6a9nD line 1:␤------> [32m/<[33m⏏[31m1>/[0m␤    expecting any of:␤        assertion␤        name␤FAILED 00:01 106m␤»

[16:54] <TimToady> there's your rule :)

[16:54] <PerlJam> yeah, but I'm wondering if their might be some other use

[16:54] <diakopter> std: /<<>>/

[16:54] <pausenclown> rakudo: grammar G { rule TOP { <test(one)> }; rule one { 1 }; rule test($x) { { say $x.WHAT } }; }; say G.parse("1");

[16:54] <p6eval> std 30236: OUTPUT«ok 00:01 106m␤»

[16:55] <p6eval> rakudo 534afd: OUTPUT«␤»

[16:55] <PerlJam> <1> might be another way to write $1

[16:55] * TimToady channels MJD

[16:55] <diakopter> std: /<<<>>>/

[16:55] <p6eval> std 30236: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unrecognized regex assertion at /tmp/JCws7sBUEv line 1:␤------> [32m/<<<[33m⏏[31m>>>/[0m␤    expecting any of:␤     assertion␤        name␤FAILED 00:01 106m␤»

[16:55] *** pmurias left
[16:56] <diakopter> std: /<<<a>/

[16:56] <p6eval> std 30236: OUTPUT«ok 00:01 106m␤»

[16:56] <pausenclown> rakudo: grammar G { rule TOP { <test(<one>)> }; rule one { 1 }; rule test($x) { { say $x.WHAT } }; }; say G.parse("1");

[16:56] <p6eval> rakudo 534afd: OUTPUT«Str()␤␤»

[16:56] <pausenclown> shouldnt that say "Regex" or so?

[16:57] <TimToady> no, I just said that <> was special around the one

[16:57] <TimToady> wasn't

[16:57] <PerlJam> the only "advantage" I can see to that might be when you're writing code like pausenclown is attempting

[16:57] <TimToady> grr, my n't key is sticking again this morning...

[16:57] <diakopter> std: /<< < a>/

[16:57] <p6eval> std 30236: OUTPUT«ok 00:01 106m␤»

[16:57] <PerlJam> pausenclown: <> is being used as quote-words inside of the ()

[16:58] *** envi^home left
[16:58] <TimToady> PerlJam: thanks for being clear :)

[16:58] <diakopter> std: /<< < /d/a>/

[16:58] <p6eval> std 30236: OUTPUT«ok 00:01 106m␤»

[16:58] <pausenclown> so i dont pass a regex but its name and refer to that via <$x> which calls the regex

[16:59] <TimToady> which *doesn't* call the regex

[16:59] <PerlJam> heh

[16:59] <TimToady> <$x> has no freaking clue that $x contains the name of a regex

[16:59] <PerlJam> pausenclown: <@TimToady> to do a symbolic call you might need <::($x)>

[17:00] <pausenclown> oh, i overread that. sry

[17:00] <TimToady> std: <::($_)>

[17:00] <p6eval> std 30236: OUTPUT«ok 00:01 107m␤»

[17:00] <diakopter> std: /<< < ///////////a>/

[17:00] <p6eval> std 30236: OUTPUT«ok 00:01 106m␤»

[17:00] <pausenclown> rakudo: grammar G { rule TOP { <test(<one>)> }; rule one { 1 }; rule test($x) { <::($x)> }; }; say G.parse("1");

[17:00] <p6eval> rakudo 534afd: OUTPUT«Malformed regex at line 11, near "test($x) {"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[17:00] <TimToady> std: <."$x"()>

[17:00] <p6eval> std 30236: OUTPUT«ok 00:01 105m␤»

[17:00] <TimToady> or...

[17:01] <TimToady> std: my $x; /<."$x"()>/;

[17:01] <PerlJam> diakopter: trying to trick the parser?

[17:01] <p6eval> std 30236: OUTPUT«ok 00:01 107m␤»

[17:01] <diakopter> PerlJam: what else do I ever do

[17:02] <PerlJam> std: /< ///////////)>/

[17:02] <p6eval> std 30236: OUTPUT«ok 00:01 106m␤»

[17:02] <PerlJam> parser too smart

[17:02] <TimToady> std: my $x; / { $¢ = $¢."$x"() } /; #same thing

[17:02] <p6eval> std 30236: OUTPUT«ok 00:01 107m␤»

[17:02] <pausenclown> heh. nice.

[17:02] <diakopter> std: / sub foo { 3 } /

[17:02] <p6eval> std 30236: OUTPUT«ok 00:01 106m␤»

[17:03] *** Guest63559 joined
[17:03] <TimToady> the diafuzzer is broken

[17:07] <pausenclown> .oO( don't ask, your head will explode )

[17:09] <TimToady> std: my $x; /<.[0]>/;

[17:10] <p6eval> std 30236: OUTPUT«ok 00:01 109m␤»

[17:10] <TimToady> std: my $x; /<.++>/;

[17:10] <p6eval> std 30236: OUTPUT«ok 00:01 106m␤»

[17:10] <TimToady> though I doubt $¢ will take kindly to being incremented

[17:11] <TimToady> or to being subscript in the absence of a current $0

[17:11] <TimToady> *ed

[17:12] <diakopter> std: / die() /

[17:12] <p6eval> std 30236: OUTPUT«[31m===[0mSORRY![31m===[0m␤Null pattern not allowed at /tmp/jPZt8hlrOK line 1:␤------> [32m/ die([33m⏏[31m) /[0m␤FAILED 00:01 106m␤»

[17:13] *** Chillance joined
[17:13] <PerlJam> need more syntax to convert that into an actual call

[17:14] <PerlJam> the parser is still not so easily fooled.

[17:14] <TimToady> I suspect he knows that; he's just trying to get unhelpful error messages out of it.  :)

[17:15] <TimToady> it should say, "Missing braces around Perl code" or some such...  :)

[17:16] <PerlJam> that would make the parser preternaturally smart  ;)

[17:16] <TimToady> "You aren't programming in the language you think you're programming in, dufus!"  --MJDish

[17:17] <TimToady> "It's *you* that is confused at line 42"

[17:17] <PerlJam> there should be a "use snark" option to Perl 6 that should make it actually say these things

[17:18] <TimToady> it would actually be possible to make a parser that preternaturally smart with speculative parsing

[17:19] *** mikehh left
[17:20] <TimToady> but that only works if something actually goes wrong; it's even harder to catch the case where it parses right wrong, as in diakopter++'s first sub foo example

[17:21] <PerlJam> TimToady: then it should go interactive ...   "Are you writing a parser in Perl 6?  (Y/n)"

[17:21] <TimToady> in that case, the best it could do is report an ambiguity

[17:21] <TimToady> or yes, ask that.  :)

[17:22] <TimToady> however, the "Useless use of 3 in sink context" should eventually help there.

[17:22] <TimToady> calculating side effects or lack thereof is on my short list of things to do next to STD

[17:24] *** dakkar left
[17:24] <diakopter> bwahaha

[17:29] *** riffraff joined
[17:32] <jnthn> TimToady: Ooh, does that mean we'll be able to steal sink context detection from STD? :-)

[17:37] *** p6eval left
[17:38] *** p6eval joined
[17:42] <diakopter> ok, who bounced p6eval

[17:43] *** justatheory left
[17:45] <diakopter> oh.  server error.

[17:46] <diakopter> irc server, that is.

[17:46] <diakopter> whatevs

[17:49] *** pausenclown left
[17:50] *** JimmyNeutron left
[18:03] *** hercynium left
[18:10] * moritz_ returns and finds a huge backlog

[18:13] *** justatheory joined
[18:20] *** Guest63559 is now known as Trashlord

[18:20] *** Trashlord left
[18:20] *** Trashlord joined
[18:20] *** TiMBuS left
[18:23] *** mberends joined
[18:23] *** flity_ joined
[18:25] <diakopter> std: #`[/ . /␤a#`[a]]

[18:25] <p6eval> std 30236: OUTPUT«ok 00:01 104m␤»

[18:25] <diakopter> std: #`[/ . /␤a#`[a]

[18:25] <p6eval> std 30236: OUTPUT«[31m===[0mSORRY![31m===[0m␤(Possible runaway string from line 1)␤Couldn't find terminator ] at /tmp/aHgEdJgPSc line 2 (EOF):␤------> [32ma#`[a][33m⏏[31m<EOL>[0m␤FAILED 00:01 103m␤»

[18:25] <diakopter> std: #`[/ . /␤a#[a]

[18:25] <p6eval> std 30236: OUTPUT«[31m===[0mSORRY![31m===[0m␤(Possible runaway string from line 1)␤Couldn't find terminator ] at /tmp/sFqzTGz3Zl line 2 (EOF):␤------> [32ma#[a][33m⏏[31m<EOL>[0m␤FAILED 00:01 103m␤»

[18:25] <diakopter> std: #`[/ . /␤a[a]

[18:25] <p6eval> std 30236: OUTPUT«[31m===[0mSORRY![31m===[0m␤(Possible runaway string from line 1)␤Couldn't find terminator ] at /tmp/eFL9H1XHiP line 2 (EOF):␤------> [32ma[a][33m⏏[31m<EOL>[0m␤FAILED 00:01 103m␤»

[18:25] <diakopter> std: #`[/ . /␤a[]a]

[18:25] <p6eval> std 30236: OUTPUT«ok 00:01 104m␤»

[18:25] <diakopter> std: #`[/ . /␤a[]]a]

[18:25] <p6eval> std 30236: OUTPUT«[31m===[0mSORRY![31m===[0m␤(Possible runaway string from line 1)␤Confused at /tmp/yays4NAhyi line 2:␤------> [32ma[]]a[33m⏏[31m][0m␤    expecting any of:␤       argument list␤    statement modifier loop␤Undeclared routine:␤        'a' used at line 2␤FAILED 00:01 105m␤»

[18:25] <diakopter> std: #`[/ . /␤#a[]]a]

[18:25] <p6eval> std 30236: OUTPUT«[31m===[0mSORRY![31m===[0m␤(Possible runaway string from line 1)␤Confused at /tmp/9GoTvHjUpc line 2:␤------> [32m#a[]]a[33m⏏[31m][0m␤    expecting any of:␤      argument list␤    statement modifier loop␤Undeclared routine:␤        'a' used at line 2␤FAILED 00:01 105m␤»

[18:26] *** ChanServ sets mode: +o diakopter

[18:26] *** diakopter was kicked by diakopter (CEILING CAT WILL FIND YOU))
[18:27] <mberends> diakopter++ # spectacular exits

[18:27] <phenny> mberends: 15:10Z <moritz_> tell mberends that I made some small progress on the separate compilation of core files, but accidentally pushed it to branch split-setting (which seemed to be identical to split-gen-setting-2 branch...)

[18:33] <mberends> thanks moritz_. The separate compilation will resume after proto gets into some kind of workable state. Right now that is beginning to get on with Win32/Strawberry Perl :)

[18:33] *** clintongormley left
[18:34] *** clintongormley joined
[18:35] <moritz_> \o/

[18:35] <moritz_> anyway, all setting files now compile

[18:35] <mberends> \o/ 2

[18:36] <moritz_> it was just a matter of telling the files that Whatever is a type

[18:37] <mberends> its sounds so easy ...afterwards :)

[18:38] <moritz_> :-)

[18:43] <jnthn> Yeah, whatever.

[18:43] <jnthn> ;-)

[18:43] <jnthn> mberends++ # win32 support!

[18:44] <mberends> trying, anyway. (mingw32 isn't *really* win32) ;)

[18:44] <mberends> the M$ toolchain deserves a look as well, for people using ActiveState instead of Strawberry

[18:45] <jnthn> eww, minging!

[18:45] <jnthn> I use ActiveState on this machine.

[18:45] <jnthn> So I can try it there.

[18:45] *** masak joined
[18:46] <mberends> there is a kinda possibility of starting with just a single Perl 5 script called proto, that uses LWP and friends to download everything else.

[18:46] <masak> oh hai, mberends :)

[18:46] <mberends> masak: hi!

[18:47] <jnthn> yaytismasak!

[18:47] <masak> I noticed today that proto got an external CPAN dependecy :)

[18:47] <mberends> external?

[18:47] <masak> well, one that needs to be downloaded.

[18:48] *** abra left
[18:48] <mberends> actually I don't knwo what's external and what isn't

[18:48] *** frettled sets mode: +oo masak mberends

[18:48] <frettled> good afterdusk

[18:48] <mberends> hi frettled 

[18:48] <masak> File::Homedir, it was.

[18:49] *** hercynium joined
[18:49] <masak> I'm not saying we shouldn't depend on it. maybe that's what it takes to make Windows play nice with proto.

[18:49] *** sbp is now known as jeffarch

[18:49] <masak> if so, I think it's worth it.

[18:49] <mberends> masak: sorry about that, we can probably workaround

[18:49] <masak> no worries.

[18:49] <masak> I'm assuming there were reasons behind it :)

[18:50] <mberends> it was for Windows portability

[18:50] <masak> right. I guessed so.

[18:50] <masak> the gradient we've backed down a bit along is the One Click Shopping gradient.

[18:50] <mberends> heh

[18:51] <frettled> one click vulnerability gradient!

[18:52] <mberends> masak: we'll drop the File::HomeDir dependency, it's an unwelcome barrier

[18:52] <masak> I'm not even arguing for that, but sure :P

[18:53] <masak> we've backed down along it at other times, for what we considered to be good reasons.

[18:53] <mberends> practicality is more important, and it's a trivial piece to substitute using environment variables

[18:53] <masak> the 'oh hai I configured you, run me again to really get going' was one example. I really like that one.

[18:54] <masak> mberends: yes. all CPAN dependencies can -- at least theoretically -- be removed by inlining. :)

[18:54] <masak> not that that's always a good idea.

[18:56] *** alester left
[18:58] <arnsholt> If you want no external deps you could bundle it as well

[18:58] <masak> oh, indeed.

[18:58] <masak> mberends: your call.

[18:58] <moritz_> rakudo: return True if 1

[18:58] <p6eval> rakudo 534afd: OUTPUT«No exception handler and no message␤current instr.: '&return' pc 17244 (src/builtins/Junction.pir:420)␤»

[19:00] *** jeffarch is now known as sbp

[19:00] *** ShaneC joined
[19:02] <moritz_> rakudo: my $a; my @b; ($a, @b) = <1 2 3>; say @b.perl

[19:02] <p6eval> rakudo 534afd: OUTPUT«[["2", "3"]]␤»

[19:04] <moritz_> rakudo: say 6 >== 2

[19:04] <p6eval> rakudo 534afd: OUTPUT«Cannot assign to readonly value␤current instr.: '&die' pc 17189 (src/builtins/Junction.pir:399)␤»

[19:05] <masak> LTA.

[19:05] *** molaf joined
[19:05] <masak> std: 6 >== 2

[19:05] <p6eval> std 30236: OUTPUT«[31m===[0mSORRY![31m===[0m␤Can't make assignment out of >= because chaining operators are diffy at /tmp/tYk8vryGt4 line 1:␤------> [32m6 >==[33m⏏[31m 2[0m␤FAILED 00:01 108m␤»

[19:05] <jnthn> std: 6 >== 2

[19:05] <p6eval> std 30236: OUTPUT«[31m===[0mSORRY![31m===[0m␤Can't make assignment out of >= because chaining operators are diffy at /tmp/wODTcjnrYm line 1:␤------> [32m6 >==[33m⏏[31m 2[0m␤FAILED 00:01 106m␤»

[19:06] *** lichtkind joined
[19:11] <lichtkind> moritz_: i will read it today again and write you

[19:11] <lichtkind> mberends: hai

[19:12] <pyrimidine> rakudo: my $a; my @b; ($a, @b) = <1 2 3>; say @b.perl

[19:12] <p6eval> rakudo 534afd: OUTPUT«[["2", "3"]]␤»

[19:12] <mberends> hi lichtkind, what was that wiki page you wanted me to review?

[19:12] <pyrimidine> moritz_: is that correct?  

[19:12] <moritz_> nope

[19:12] <moritz_> there's a ticket in RT for it

[19:13] <pyrimidine> okay, that one bit me already, just making sure.

[19:15] <lichtkind> mberends: in a moment i opened it currently

[19:16] *** alester joined
[19:22] *** eiro left
[19:23] <lichtkind> shouldnt o in Ordered endpoints be a small o?

[19:25] *** pyrimidine left
[19:27] <lichtkind> if yes then i found a typo in S02

[19:28] *** eiro joined
[19:31] *** masak left
[19:43] <lichtkind> mberends: http://www.perlfoundation.org/perl6/index.cgi?perl_6_index_tablet

[19:43] <lichtkind> mberends: tablet B is still open

[19:43] <mberends> oki

[19:43] <lichtkind> mberends: please tell me if your ready :9

[19:45] *** clintongormley left
[19:46] *** tri1 joined
[19:47] <mberends> lichtkind: if you mean proofread the *whole* index, I would prefer to do that in the train tomorrow morning, and continue developing proto this evening :)

[19:47] <lichtkind> mberends: no just check the diff :)

[19:47] <lichtkind> what changend in last 3,4 edits

[19:48] <mberends> ok

[19:49] <lichtkind> mberends: thanks but you dont have to :)

[19:49] *** bluescreen left
[19:56] *** molaf left
[20:00] <mberends> lichtkind: so it's mainly BEGIN, CATCH, CHECK etc closure traits. They are all very clear. The linked closure traits list also looks very useful, short and sweet :)

[20:01] <lichtkind> mberends: thanks but its all about control statements and regex modifier but it was mainly in german version :)

[20:04] <lichtkind> mberends: its index , longer explanation you get in chapters :)

[20:04] *** bluescreen joined
[20:05] *** molaf joined
[20:05] <mberends> agreed, that's why this is good :)

[20:06] *** molaf left
[20:10] *** molaf joined
[20:14] *** molaf left
[20:14] *** pmurias joined
[20:14] <pmurias> ruoso: ping

[20:15] *** moritz_ sets mode: +oo pmurias ruoso

[20:15] * pmurias has to stay in the channel long enough

[20:32] *** mssm left
[20:33] *** dual left
[20:38] *** dual joined
[20:48] *** Chillance left
[20:50] *** REPLeffect left
[20:53] *** riffraff left
[20:55] *** ruoso left
[20:55] *** eternaleye left
[20:59] *** sundar joined
[21:03] *** REPLeffect joined
[21:05] *** wknight8111 joined
[21:07] *** sundar left
[21:08] *** payload left
[21:08] *** payload joined
[21:10] *** mberends left
[21:16] *** ignacio_ left
[21:18] *** payload left
[21:18] *** tri1 left
[21:24] <PerlJam> *yawn*

[21:25] <jnthn> PerlJam: I've felt like that all day. :-/

[21:26] *** doublec left
[21:26] *** bluescreen left
[21:27] <PerlJam> I've been feeling like that since Friday.   I spent all day Friday and half the day Saturday moving furniture and such.  Then I helped a friend with a BBQ for his mother until about 8:00pm.  And then I drove to Austin (about 3.5 hours).  I spent all day Sunday in a state of perpetual motion it seems and just now finished about half a day moving computer stuff from one building to another at work.

[21:28] <PerlJam> I'm a little  wired from the exercise, but also a little tired.

[21:29] *** mberends joined
[21:32] *** mikehh joined
[21:34] <mberends> hmm, Windows--   'C:\Documents' is not recognized as an internal or external command,

[21:34] <mberends> operable program or batch file.

[21:34] <mberends> Died at Configure.pl line 119.

[21:35] <arnsholt> Well, C:\Documents isn't a comment =)

[21:35] <mberends> sorry to share that, it just *had* to come out ;)

[21:36] *** ash_ joined
[21:36] * mberends copies and pastes lots of " inside strings

[21:37] *** Su-Shee left
[21:41] <jnthn> heh.

[21:41] <jnthn> mberends: Yes, that one bites me now and then too.

[21:42] <jnthn> PerlJam: That sounds exhausting.

[21:46] <mberends> jnthn: if patching proto for "C:\Documents and Settings" breaks it on Unix/Linux, the blame goes indirectly to *you*

[21:47] <jnthn> :-P

[21:47] <ash_> lol

[21:47] <ash_> as weird as it sounds, more people use windows than unix/linux... but do more perl 6 developers? :P 

[21:49] <mberends> more Rakudo newbies do, we must roll out the welcome mat. Brainwa^W helping them become more productive can happen later :P

[21:50] <m6locks> i'm kinda hoping for a working windows edition of rakudo

[21:50] <m6locks> right now, parrot won't work in this machine

[21:50] <m6locks> dunno why

[21:50] <jnthn> Odd, I run it fine on Windows.

[21:50] <jnthn> What're you trying to build with?

[21:51] <m6locks> i tried the precompiled binaries ;P

[21:51] <jnthn> Ah

[21:51] <jnthn> I've heard they work out for some people and not for others.

[21:51] <ash_> jnthn does work in visual studio, so he can help i am sure

[21:51] <jnthn> Yeah. I build with the MS VC++ compiler.

[21:52] <m6locks> aye

[21:52] <colomon> what perl do you use?

[21:52] <m6locks> how about parrot, you build it yourself too?

[21:52] <jnthn> Had to patch things up for Win7 a couple of months back, but should be good there now too.

[21:52] <jnthn> m6locks: Yeah, just --gen-parrot

[21:52] <jnthn> colomon: Got the ActiveState one on this machine, have also had Strawberry, but I think there was some oddities there.

[21:52] <m6locks> hmm ok

[21:53] <colomon> guess I can try building it again and see what happens....

[21:53] <jnthn> colomon: Since it's built with mingw and I was trying to build with the MS VC++ toolchain.

[21:53] <jnthn> And Parrot's configure takes some info from the way Perl was configured.

[21:55] <ash_> yeah, that doesn't sound good, telling the ms vc++ a mingw compiler option 

[21:55] <jnthn> Right.

[21:55] <jnthn> Thus the ActiveState Perl seems to work out better when building with that toolchain.

[21:56] <colomon> okay, I've got active state and ms vc++ on 64-bit vista.  just got a fresh rakudo clone...

[21:56] *** diakopter joined
[21:56] <ash_> can you build normal perl with ms vc++? 

[21:56] <mberends> jnthn: do you have download URLs for ms vc++ toolchain?

[21:57] <ash_> just wondering, more out of curiosity 

[21:57] <jnthn> ash_: I think so, not tried it.

[21:57] *** envi^home joined
[21:57] <jnthn> mberends: Not to hand, no, sorry.

[21:58] <lichtkind> i have an perl 6 quastion :)

[21:58] <diakopter> O__O

[21:58] <ash_> mberends: http://www.microsoft.com/express/downloads/ visual C++ 2008 express has the compiler in it

[21:58] <lichtkind> diakopter: ?

[21:58] <colomon> jnthn: perl Configure --gen-parrot just died.

[21:59] <mberends> ash_: thanks, hoping to add that to proto as well :)

[21:59] <diakopter> also the windows platform sdk has all the compilers without the gui, but it's a much bigger download, due to all the libs/headers

[21:59] <colomon> 'parrot_install' is not recognized as an internal or external command, operable program or batch file.

[21:59] <colomon> Died at Configure.pl line 119.

[21:59] <ash_> what the whole download? thats just silly, :P /sarcasm 

[22:00] <diakopter> lichtkind: I wasn't replying to you; I was just O__O

[22:00] <lichtkind> ahh

[22:00] <jnthn> colomon: Oh. :-/

[22:00] <lichtkind> can i build in perl 6 a complex data structure and some other variable points deep into the structure?

[22:00] <jnthn> colomon: Can you paste what you had up until there?

[22:01] <jnthn> I'm kinda curious.

[22:01] <ash_> lichtkind: define complex data structure? 

[22:01] <colomon> jnthn: looks like Parrot didn't build, actually.

[22:02] <lisppaste3> colomon pasted "Parrot configure failure?" at http://paste.lisp.org/display/97043

[22:02] <lichtkind> ash_: something like HoHoA

[22:03] <ash_> lichtkind: short answer, i don't see why not, long answer for a sane value of complex data structure you should be good, but i am sure there are edge cases that may be more difficult to build than others 

[22:03] <jnthn> colomon: Is cl in your path?

[22:03] <mberends> lichtkind: to point deep into a structure, use := to bind another variable

[22:03] <jnthn> colomon: Also try the Visual Studio Command Prompt shortbut.

[22:03] <jnthn> er, cut

[22:04] <colomon> jnthn: cl and devenv both work.

[22:04] <colomon> from the command line, I mean.

[22:04] *** nihiliad left
[22:04] *** nihiliad joined
[22:04] <ash_> lichtkind: you mean like my %a = { key => { array => [1, 2, 3] } }; say %a<key><array>[2]; # prints 3

[22:05] <ash_> rakudo: my %a = { key => { array => [1, 2, 3] } }; say %a<key><array>[2]; # prints 3

[22:05] <p6eval> rakudo 534afd: OUTPUT«3␤»

[22:05] <diakopter> jnthn: the dir of parrot's parrot_install is not in colomon's PATH ?

[22:05] <colomon> jnthn: probably not in my default path, however, so maybe it could be spawning another shell that doesn't know about them?

[22:05] <lichtkind> mberends: yes when the complex structure is build first, but in perl 5 you could compose a complex thing and include references of smaller var. haw you do thatt in perl 6 without references?

[22:05] <diakopter> child shells inherit parent shell's env

[22:06] <lichtkind> ash_: its deeper than that please see my post to mberends 

[22:06] <TimToady> it's not really true that Perl 6 doesn't have references; it's more like everything is a reference

[22:06] <ash_> rakudo: my %a; my $b = 5; %a<key> := 5; say %a<key>; $b = 6; say %a<key>; 

[22:06] <p6eval> rakudo 534afd: OUTPUT«:= binding of variables not yet implemented␤current instr.: '&die' pc 17189 (src/builtins/Junction.pir:399)␤»

[22:06] <lichtkind> TimToady: yes but i cant use it as reference

[22:07] <colomon> diakopter: that's a fine theory, but I'm not sure I'd want to count on it working in the hateful Windows Vista.

[22:07] <ash_> alpha: my %a; my $b = 5; %a<key> := 5; say %a<key>; $b = 6; say %a<key>;

[22:07] <p6eval> alpha 30e0ed: OUTPUT«rtype not set␤in Main (file <unknown>, line <unknown>)␤»

[22:07] <ash_> hmm

[22:07] <ash_> i think i have that right... 

[22:07] <ash_> pugs: my %a; my $b = 5; %a<key> := 5; say %a<key>; $b = 6; say %a<key>;

[22:07] <p6eval> pugs: OUTPUT«5␤5␤»

[22:07] <ash_> oops

[22:07] <ash_> doh, stupid me 

[22:08] <ash_> pugs: my %a; my $b = 5; %a<key> := $b; say %a<key>; $b = 6; say %a<key>;

[22:08] <p6eval> pugs: OUTPUT«5␤6␤»

[22:08] <ash_> lichtkind: you mean like that? 

[22:08] <ash_> so %a<key> points to $b, so when you update $b it updates what %a<key> is pointing to 

[22:08] <lichtkind> ash_: exactly

[22:09] <ash_> (as an example), same principle applies to other variables and the := operator

[22:09] <diakopter> colomon: I can't tell whether you're kidding.

[22:09] *** payload joined
[22:09] <lichtkind> ash_: but i would be even more happy doing that during composing the structure, because maybe i want to weave much more vars into it

[22:10] <jnthn> diakopter: Well, given we aren't getting so far as having a parrot_config, that's not the issue here... :-)

[22:10] <jnthn> colomon: OK...I only remember when I saw that one it was some path fail.

[22:10] <ash_> lichtkind: you can do that too, in theory, i don't know if its implemented yet though 

[22:10] <jnthn> diakopter: It doesn't need to be in the path with --gen-parrot too, fwiw.

[22:10] <lichtkind> ash_: and how you do it in theory? .)

[22:10] <diakopter> oh.

[22:10] <ash_> pugs: my $b = 5; my %a = { key => \$b }; say %a<key>; $b = 6; say %a<key>;

[22:10] <p6eval> pugs: OUTPUT«5␤5␤»

[22:11] <ash_> rakudo: my $b = 5; my %a = { key => \$b }; say %a<key>; $b = 6; say %a<key>;

[22:11] <p6eval> rakudo 534afd: OUTPUT«Capture()<0x2b128d102fa0>␤Capture()<0x2b128d102fa0>␤»

[22:11] <ash_> alpha: my $b = 5; my %a = { key => \$b }; say %a<key>; $b = 6; say %a<key>;

[22:11] <colomon> jnthn: I agree path fail seems likely, I just don't know how to explain it.

[22:11] <p6eval> alpha 30e0ed:  ( no output )

[22:11] <diakopter> ok; why would it try to run parrot_install if parrot didn't even succeed to build

[22:12] <ash_> \$b captures the variable, its similar in function to := 

[22:12] <colomon> jnthn: It seems like this sort of nonsense is always happening in Vista, which is why I bought the MacBook Pro...

[22:12] <ash_> lichtkind: http://perlcabal.org/syn/S08.html talks about captures

[22:13] <lichtkind> ash_: thank you very much but i do that later i just wanted solve that head problem, but im currently on immutable types

[22:13] <jnthn> colomon: Ah, looking at my laptop (Win 7)...I was indeed always using the Visual Studio Command Prompt rather than just the standard one. I guess that must set us up the everything.

[22:14] <jnthn> diakopter: Well, it's software, so it sucks.

[22:14] <jnthn> diakopter: I guess either missing or failed check for success of the Parrot build though.

[22:14] <colomon> jnthn: wait, there's a visual studio command prompt?  as in a shell?

[22:14] <jnthn> colomon: It's the same shell but it runs a batch file that sets a bunch of environment up.

[22:15] <colomon> jnthn: how do you get at it?

[22:15] <jnthn> colomon: For me, it's in the programs menu; Visual Studio 2008 => Tools.

[22:16] <jnthn> Ends up running vcvarsall.bat

[22:16] <colomon> and gets the exact same error.  :(

[22:16] <ash_> is there a difference between := $a and \$a ? other than implementation details?

[22:17] <ash_> i am not sure what the difference is, if there is one

[22:17] <jnthn> colomon: Aww. :-(

[22:17] <colomon> Generating Parrot ...

[22:17] <colomon> C:\Perl64\bin\perl.exe build/gen_parrot.pl --prefix=C:/tools/rakudo/parrot_install

[22:17] <colomon> The system cannot find the path specified.

[22:17] <colomon> Hadn't noticed that before, it seems to happen very early in the attempt to install parrot.

[22:19] *** nihiliad left
[22:20] <ash_> TimToady: is there a difference between := $a and \$a ? other than implementation details? 

[22:21] <TimToady> not really, they're both capturizers

[22:22] <TimToady> except := usually uses up the capture immediately

[22:22] *** rgrau` left
[22:22] <ash_> got ya, they seemed kinda similar, just wanted to make sure i didn't explain things wrong to lichtkind 

[22:23] *** iblechbot left
[22:27] <jnthn> [OT-ish, though it's for Perl 6] If anyone's ever given a tech talk and had somebody interpreting into another language, and has any tips, please pm me. I've not done it before and any input on how to not epic fail it would be welcome. :-)

[22:27] *** pmurias left
[22:28] <mberends> jnthn: just. talk. really.

[22:28] <mberends> jnthn: slowly.

[22:30] <jnthn> mberends: That advice holds for both simultaneous and consecutive interpretation?

[22:32] <mberends> jnthn: try to enable consecutive to occur, simultaneous is very lossy and requires more redundant repetition to avoid fail

[22:33] <mberends> some repetition is good though, all listeners innocently stop listening occasionally

[22:34] <jnthn> mberends: I've actually got one talk where I'm told it'll be simultaneous, and another where it'll be consecutive. :-)

[22:35] <mberends> if you know several ways to state the same thing, use that to make the repetition less obvious/boring/insulting

[22:35] <jnthn> I figure the consecutive way is kinda easier in that there's some feedback loop to the speaker.

[22:35] <jnthn> If the interpreter is breaking out into a sweat, it's time to slow down. :-)

[22:36] <jnthn> Anyway, yes, well-managed repetition is a nice tip.

[22:36] <mberends> jnthn: I would suggest largely ignoring the simultaneous process, otherwise it may trip your delivery up

[22:36] <jnthn> nod

[22:39] *** snarkyboojum joined
[22:42] *** envi^home left
[22:42] <lue> hello! .oO(who doesn't love a high wind warning, with max. gusts expected at ~ 65 mph?)

[22:43] <colomon> o/

[22:47] <pugssvn> r30237 | lwall++ | [Cursor] new <suppose X> rule that traps all warnings and errors 

[22:47] <pugssvn> r30237 | [STD] use suppose in place of custom try blocks in 2-terms and unexpected infix checkers

[22:47] <pugssvn> r30237 | [STD] use suppose to soften the warning about backtick-less embedded comments

[22:47] <pugssvn> r30237 | [STD] de-dup warnings

[22:48] <ash_> lue: its time to pull out the old kite and see if the string is graded for 65 mph gusts

[22:49] <lue> That's just the worst for the county, I checked in my city, and it's only ~ 41 (relative phew)

[22:50] <lue> I created a simple RT search engine for Firefox, let me change it to search the public interface (it preserves login if you are logged in)

[22:57] <lue> https://addons.mozilla.org/en-US/firefox/addon/116888/ should make life easier for those who search the RT a lot :)

[22:58] *** pausenclown joined
[22:58] *** mberends left
[22:59] <ash_> after an object has been created, would you ever need to call 'bless' again? 

[22:59] <ash_> i am just wondering why its a method on all objects...

[23:01] <pausenclown> rakudo: say [+] 1,2,3

[23:01] <p6eval> rakudo 534afd: OUTPUT«6␤»

[23:02] <pausenclown> rakudo: sub ff(@a) { say [+] @a }; ff(1,2,3);

[23:02] <p6eval> rakudo 534afd: OUTPUT«Nominal type check failed for parameter '@a'; expected Positional but got Int instead␤current instr.: 'ff' pc 182 (EVAL_1:77)␤»

[23:03] <pausenclown> rakudo: sub ff(*@a) { say [+] @a }; ff(1,2,3);

[23:03] <p6eval> rakudo 534afd: OUTPUT«6␤»

[23:04] <pausenclown> rakudo: sub ff(*@a) { ( [+] @a ) / @a.elems }; ff(1,2,3);

[23:04] <p6eval> rakudo 534afd:  ( no output )

[23:04] <pausenclown> rakudo: sub ff(*@a) { ( [+] @a ) / @a.elems }; say ff(1,2,3);

[23:04] <p6eval> rakudo 534afd: OUTPUT«2␤»

[23:04] <pausenclown> rakudo: sub ∅(*@a) { ( [+] @a ) / @a.elems }; say ∅(1,2,3);

[23:04] <p6eval> rakudo 534afd: OUTPUT«Confused at line 11, near "sub \u2205(*@a)"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[23:04] <pausenclown> rakudo: my $∅ = 1;

[23:04] <p6eval> rakudo 534afd: OUTPUT«Malformed my at line 11, near "$\u2205 = 1;"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[23:05] <pausenclown> std: my $∅ = 1;

[23:05] <p6eval> std 30237: OUTPUT«[31m===[0mSORRY![31m===[0m␤Confused at /tmp/UOayfWotnB line 1:␤------> [32mmy $[33m⏏[31m∅ = 1;[0m␤    expecting any of:␤ POST␤   bracketed infix␤    infix or meta-infix␤      postfix␤        postfix_prefix_meta_operator␤       shape definition␤       statement modifier

[23:05] <p6eval> ..loop␤    trait␤  twigil␤FAILED 00:01 …

[23:05] <ash_> invalid $ 

[23:05] <ash_> hmmm, wait no sorry

[23:05] <pausenclown> i thought unicode names are supported

[23:05] <ash_> thats a weird error, must be something with unicode 

[23:05] <ash_> rakudo: my $∑ = 5;

[23:05] <p6eval> rakudo 534afd: OUTPUT«Malformed my at line 11, near "$\u2211 = 5;"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[23:06] <lue> std: my $ĉ = 3;

[23:06] <p6eval> std 30237: OUTPUT«ok 00:01 106m␤»

[23:06] <lue> std: my $∅ = 3;

[23:06] <ash_> maybe its p6eval? 

[23:06] <p6eval> std 30237: OUTPUT«[31m===[0mSORRY![31m===[0m␤Confused at /tmp/QxHjkFrDbe line 1:␤------> [32mmy $[33m⏏[31m∅ = 3;[0m␤    expecting any of:␤ POST␤   bracketed infix␤    infix or meta-infix␤      postfix␤        postfix_prefix_meta_operator␤       shape definition␤       statement modifier

[23:06] <p6eval> ..loop␤    trait␤  twigil␤FAILED 00:01 …

[23:06] <arnsholt> If it's not alphanumeric, it's not a valid identifier I think

[23:06] <ash_> ah, good point 

[23:06] <lue> rakudo: my $ĉ=3;

[23:06] <p6eval> rakudo 534afd:  ( no output )

[23:06] <arnsholt> std: my $æøå = 1;

[23:06] <p6eval> std 30237: OUTPUT«ok 00:01 106m␤»

[23:07] <arnsholt> Yeah. Probably due to those characters not being alnums

[23:07] <lue> no bug, as far as I can tell (unless the spec specifically says "unicode is allowed as variable names")

[23:07] <pausenclown> too bad. no APL in Perl6.

[23:07] *** stepnem left
[23:07] <arnsholt> You could always define your own syntax though =D

[23:08] <lue> rakudo: my $ĥoro = "good"; say "Mia ĥoro estas $ĥoro." # my choir is [variable]

[23:08] <p6eval> rakudo 534afd: OUTPUT«Mia ĥoro estas good.␤»

[23:09] <lue> s/good/bona/ # i think

[23:11] *** stepnem joined
[23:12] *** ruoso joined
[23:12] <lue> rakudo: grammar G { regex foo { (\d+) <?{ $0.chars > 4 }> '!'} }; say $_ ~~ /<G::foo>/ for '1234!', '123456!'

[23:12] <p6eval> rakudo 534afd: OUTPUT«regex assertion not terminated by angle bracket at line 11, near "::foo>/ fo"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[23:13] <pausenclown> rakudo: multi sub postfix:<∅> (*@a) { ( [+] @a ) / @a.elems }; say (1,2,3) ∅;

[23:13] <p6eval> rakudo 534afd: OUTPUT«Confused at line 11, near "say (1,2,3"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[23:13] <pausenclown> rakudo: multi sub postfix:<∅> (*@a) { ( [+] @a ) / @a.elems };

[23:13] <p6eval> rakudo 534afd:  ( no output )

[23:14] <arnsholt> rakudo: multi sub postfix:<∅> (*@a) { ( [+] @a ) / @a.elems }; say((1,2,3) ∅);

[23:14] <p6eval> rakudo 534afd: OUTPUT«Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 11␤current instr.: 'perl6;Regex;Cursor;FAILGOAL' pc 1664 (ext/nqp-rx/src/stage0/Regex-s0.pir:907)␤»

[23:14] <pausenclown> multi sub postfix:<!>(Int $n) { [*] 1..$n; }; say 3!;

[23:15] <pausenclown> rakudo: multi sub postfix:<!>(Int $n) { [*] 1..$n; }; say 3!;

[23:15] <p6eval> rakudo 534afd: OUTPUT«6␤»

[23:15] <TimToady> a postfix may not have whitespace before it

[23:15] <pausenclown> rakudo: multi sub postfix:<∅> (*@a) { ( [+] @a ) / @a.elems }; say (1,2,3)∅;

[23:15] <arnsholt> Aha. That explains it

[23:15] <pausenclown> heh, i broke the bot.

[23:16] <lue> The brot boke itself (wait...)

[23:16] <p6eval> rakudo 534afd:  ( no output )

[23:16] <ash_> it times out eventually

[23:16] <ash_> then you normally get the " ( no output ) "

[23:16] <arnsholt> > multi sub postfix:<∅> (*@a) { ( [+] @a ) / @a.elems }; say (1,2,3)∅;

[23:16] <arnsholt> 2

[23:17] <arnsholt> On a couple of days old copy of Rakudo. So it should work =)

[23:17] <pausenclown> rakudo: multi sub prefix:<∅> (*@a) { ( [+] @a ) / @a.elems }; say ∅(1,2,3);

[23:18] <lue> that is the once-there-never-gone way of thinking. It doesn't work here :)

[23:18] <p6eval> rakudo 534afd: OUTPUT«2␤»

[23:18] <pausenclown> how to omit the parens?

[23:18] <pausenclown> rakudo: multi sub prefix:<∅> (*@a) { ( [+] @a ) / @a.elems }; say ∅ 1,2,3;

[23:19] <p6eval> rakudo 534afd:  ( no output )

[23:19] <lue> rakudo: multi sub prefix:<∅> (*@a) { ( [+] @a ) / @a.elems }; say ∅1,2,3

[23:20] <p6eval> rakudo 534afd: OUTPUT«123␤»

[23:20] <pausenclown> also: ugly

[23:20] <pausenclown> std: multi sub prefix:<∅> (*@a) { ( [+] @a ) / @a.elems }; say ∅ 1,2,3;

[23:21] <p6eval> std 30237: OUTPUT«ok 00:01 111m␤»

[23:21] <lue> rakudo: multi sub prefix:<∅> (*@a) { ( [+] @a ) / @a.elems }; my @a=1,2,3; say ∅@a

[23:21] *** ash_ left
[23:21] <p6eval> rakudo 534afd: OUTPUT«2␤»

[23:22] <pausenclown> anyway. conclusion is: APL in Perl6 is possible.

[23:22] <lue> of course it is! According to God, Lisp was hacked together with Perl! [see xkcd]

[23:23] <pausenclown> According to Larry, that's just a rumour =)

[23:23] <pausenclown> ( just kidding )

[23:25] <lue> The Perl of Great Price :)

[23:27] <pausenclown> but how do you import such a language enhancement?

[23:27] <pausenclown> i think i need to read up the sub export mechanism.

[23:27] *** Helios left
[23:28] *** Helios joined
[23:29] *** ascent__ left
[23:32] <pausenclown> rakudo: say 3!3

[23:32] <p6eval> rakudo 534afd: OUTPUT«Confused at line 11, near "say 3!3"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[23:32] <pausenclown> rakudo: say 3 ! 3

[23:32] <p6eval> rakudo 534afd: OUTPUT«Confused at line 11, near "say 3 ! 3"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[23:32] <pausenclown> rakudo: say ! 3

[23:32] <p6eval> rakudo 534afd: OUTPUT«0␤»

[23:37] <lue> rakudo: multi sub infix:<!jnthn!> ($a,$b) { say $a**$b;}; 3!jnthn!2 # should say 9

[23:37] <p6eval> rakudo 534afd: OUTPUT«Confused at line 11, near "3!jnthn!2 "␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[23:38] <lue> rakudo: multi sub infix:<!jnthn!> ($a,$b) { say $a**$b;}; 3 !jnthn! 2 # should say 9

[23:38] <p6eval> rakudo 534afd: OUTPUT«9␤»

[23:38] <jnthn> rakudo: multi sub infix:<!jnthn!> ($a,$b) { say $a**$b;}; my $a = 3; $a !jnthn!= 2; say $a;

[23:39] <p6eval> rakudo 534afd: OUTPUT«Null PMC access in invoke()␤current instr.: '!assign_metaop' pc 17030 (src/builtins/Junction.pir:319)␤»

[23:39] <jnthn> Aww!

[23:39] <jnthn> rakudo: our multi sub infix:<!jnthn!> ($a,$b) { say $a**$b;}; my $a = 3; $a !jnthn!= 2; say $a;

[23:39] <p6eval> rakudo 534afd: OUTPUT«9␤1␤»

[23:39] <jnthn> Grr.

[23:40] *** ascent_ joined
[23:41] <pausenclown> rakudo: multi sub Int foo { 1 }; multi sub Str foo ( 'one' ); var Str $s = foo; say $s

[23:41] <p6eval> rakudo 534afd: OUTPUT«Malformed multi at line 11, near "sub Int fo"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[23:42] <pausenclown> rakudo: multi sub Int foo() { 1 }; multi sub Str foo() ( 'one' ); var Str $s = foo; say $s

[23:42] <p6eval> rakudo 534afd: OUTPUT«Malformed multi at line 11, near "sub Int fo"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[23:42] <pausenclown> huh?

[23:42] <pausenclown> rakudo: sub Int x { 1 }

[23:42] <p6eval> rakudo 534afd: OUTPUT«Symbol '$ss_SS_S_S__S_S_s' not predeclared in <anonymous>␤current instr.: 'perl6;PCT;HLLCompiler;panic' pc 152 (compilers/pct/src/PCT/HLLCompiler.pir:108)␤»

[23:43] <pausenclown> std: sub Int x { 1 }

[23:43] <p6eval> std 30237: OUTPUT«[31m===[0mSORRY![31m===[0m␤Malformed block at /tmp/oBQadhrU7f line 1:␤------> [32msub Int [33m⏏[31mx { 1 }[0m␤    expecting any of:␤   block␤  routine_def␤        trait␤FAILED 00:01 107m␤»

[23:44] <lue> jnthn: hai!

[23:44] <TimToady> you can't put a type there

[23:44] <jnthn> Try our Int sub x() { }

[23:44] <jnthn> or sub x() returns Int { }

[23:44] <jnthn> or...there's a third...

[23:44] <jnthn> <brain whirring>

[23:44] <jnthn> oh

[23:44] <jnthn> sub x(--> Int) { }

[23:44] <TimToady> std: sub x (--> Int) { 1 }

[23:44] <p6eval> std 30237: OUTPUT«ok 00:01 106m␤»

[23:45] <pausenclown> rakudo: Int multi sub foo() { 1 }; Str multi sub foo() ( 'one' ); var Str $s = foo; say $s

[23:45] <p6eval> rakudo 534afd: OUTPUT«Confused at line 11, near "Int multi "␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[23:45] <lue> std: Int multi sub foo() { 1 }

[23:45] <p6eval> std 30237: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row at /tmp/8yaKQ4wnzv line 1:␤------> [32mInt [33m⏏[31mmulti sub foo() { 1 }[0m␤    expecting any of:␤      bracketed infix␤  infix or meta-infix␤      statement modifier loop␤FAILED 00:01 107m␤»

[23:45] <jnthn> TimToady: regex Foo { lolz }; # Currently in Rakudo, gives the "can only add a regex to a grammar" error.

[23:45] <jnthn> TimToady: IIUC...

[23:45] <lue> only the "third" one works

[23:46] <jnthn> ...it shouldn't be an error, just a warning?

[23:46] *** ascent_ left
[23:46] <jnthn> And it's supprssed by doing our or my before it? our regex ..., my regex ...?

[23:46] * jnthn notices this is getting in the way a lot and should probably try and fix it tomorrow.

[23:47] <pausenclown> so i cannot have a multi which dispatches taking the return type.

[23:48] <jnthn> Sure you can.

[23:49] <lue> I'm not a C/C++ guy (yet), so I must ask what the use of something like Int sub [etc.] is.

[23:49] <jnthn> The type-first syntax just always needs a scope declarator first.

[23:49] <pausenclown> rakudo: multi sub foo() { --> Int }; Str multi sub foo( --> Str ) ( 'one' ); var Str $s = foo; say $s

[23:49] <jnthn> var? :-)

[23:50] <p6eval> rakudo 534afd: OUTPUT«Unable to parse blockoid, couldn't find final '}' at line 11␤current instr.: 'perl6;Regex;Cursor;FAILGOAL' pc 1664 (ext/nqp-rx/src/stage0/Regex-s0.pir:907)␤»

[23:50] <lue> (p6eval is intermittently efficient it seems)

[23:50] <jnthn> pausenclown: You need my Str multi foo etc

[23:50] <jnthn> pausenclown: Putting the Str out fornt and inside may be an error though...

[23:50] <pausenclown> typo

[23:51] <pausenclown> sorry

[23:51] <jnthn> No worries. :-)

[23:51] <TimToady> std: my Str sub x (--> Int) {...}

[23:51] <pausenclown> rakudo: multi sub foo() { --> Int }; multi sub foo( --> Str ) { 'one' }; var Str $s = foo; say $s

[23:52] <TimToady> jnthn: yes, any method should warn if 'has' can't install a ref into a metaobject

[23:52] <TimToady> pausenclown: we don't dispatch on return type

[23:53] <pausenclown> ah too bad. but wouldnt it be neat?

[23:53] <TimToady> no, not in a language where context is lazy

[23:53] <p6eval> std 30237:  ( no output )

[23:53] <p6eval> rakudo 534afd: OUTPUT«Unable to parse blockoid, couldn't find final '}' at line 11␤current instr.: 'perl6;Regex;Cursor;FAILGOAL' pc 1664 (ext/nqp-rx/src/stage0/Regex-s0.pir:907)␤»

[23:53] <jnthn> pausenclown: YOu run into problems pretty quick. Consider foo(bar()) where foo is a multi and bar is expected to dispatch on expected return type.

[23:54] <jnthn> TimToady: OK, so people who wrote a plain "regex foo" should expect to have to add a scope declarator?

[23:54] <TimToady> std: my Str sub x () returns Int {...}

[23:54] <pausenclown> true

[23:54] <p6eval> std 30237: OUTPUT«[31m===[0mSORRY![31m===[0m␤Extra 'of' type; already declared as type Str at /tmp/XpwOdWt1Bg line 1:␤------> [32mmy Str sub x () returns Int [33m⏏[31m{...}[0m␤FAILED 00:01 107m␤»

[23:54] <TimToady> jnthn: correct

[23:54] <jnthn> TimToady: Thanks.

[23:55] *** Trashlord left
[23:55] <jnthn> Will try and deal with that tomorrow. Seems to be blocking masak++.

