[00:03] <colomon> rakudo: say 1/2 minmax 3/5

[00:03] <p6eval> rakudo 2ee5db: OUTPUT«0.5␤»

[00:04] <TimToady> oO

[00:04] <sjohnson> (* == *)

[00:05] <diakopter> rakudo: say 1/(2 minmax 3/5)

[00:05] <p6eval> rakudo 2ee5db: OUTPUT«0.5␤»

[00:06] <TimToady> rakudo: say [minmax] 1/2, 3,5

[00:06] <p6eval> rakudo 2ee5db: OUTPUT«0.5 1.5 2.5 3.5 4.5␤»

[00:06] <TimToady> rakudo: say [minmax] 1/2, 3/55

[00:06] <p6eval> rakudo 2ee5db: OUTPUT«0.0545454545454545␤»

[00:06] <TimToady> grrr

[00:06] <TimToady> rakudo: say [minmax] 1/2, 3/5

[00:06] <sjohnson> ┐( ¯3¯)┌

[00:06] <p6eval> rakudo 2ee5db: OUTPUT«0.5␤»

[00:06] <colomon> rakudo: say (1/2) minmax (3/5)

[00:06] <p6eval> rakudo 2ee5db: OUTPUT«0.5␤»

[00:06] <TimToady> why isn't it returning a range?

[00:06] <colomon> darned if I know.

[00:07] <colomon> time to look at the source

[00:07] <s_mosher> reciprocal difference (I hope): http://gist.github.com/610694

[00:08] <araujo> guys .. mm.. I have some kind of a dilemma here about a language feature ...

[00:08] <araujo> I hope it doesn't bother I ask here...

[00:08] *** stkowski left
[00:08] <araujo> a variable update inside a block can *ONLY* be modified inside that block scope, though it is visible and usable in deeper blocks unless it is overwritten by other block variables with the same name

[00:08] <araujo> does it sound sane?

[00:08] <sjohnson> ask hugme

[00:09] <sjohnson> or askme

[00:09] <TimToady> you're asking us about sanity?  US!?!?

[00:10] <araujo> hehehe

[00:10] *** am0c^ left
[00:10] <araujo> I thought designing a language was very objective ... but I sometimes feel it is a very subjective process .... that is bit scary

[00:11] <diakopter> it gets easier by the decade, I imagine

[00:11] <TimToady> welcome to the minefield; here, have some hand grenades

[00:12] <sjohnson> Rakudo Minefield

[00:12] <TimToady> .oO(let's see, if I tell him to make it like Perl, he'll steal all my users)

[00:12] <TimToady> I think you should do it differently from Perl

[00:13] <s_mosher> araujo, I've learned this about designing languages: when in doubt, be conservative in the amount of work you make for yourself.

[00:13] <TimToady> .oO(no wait, if it's the same as Perl, they won't have a reason to switch)

[00:13] <TimToady> I think you should make it the same as Perl

[00:13] <s_mosher> I haven't learned it well enough though. none of my designs have implementations I'm willing to show off

[00:14] <TimToady> my advice, if you want to have people user your language, is to do as much work on their behalf as you can.  :P

[00:14] <TimToady> *use

[00:14] <TimToady> there is no language advice that cannot be contradicted, with proponents on both sides

[00:15] <s_mosher> who needs users? they're terrible people.

[00:15] <s_mosher> I should know ;)

[00:16] <TimToady> unfortunately I am one of my users.

[00:17] *** mfollett joined
[00:18] <araujo> TimToady, hehehehe

[00:21] <s_mosher> TimToady, language designers must live where laziness and motivation unify

[00:21] <colomon> rakudo: say 1/2; say 3/5

[00:21] <p6eval> rakudo 2ee5db: OUTPUT«0.5␤0.6␤»

[00:22] <TimToady> say (1/2 minmax 3/5).max

[00:22] <TimToady> rakudo: say (1/2 minmax 3/5).max

[00:22] <p6eval> rakudo 2ee5db: OUTPUT«0.6␤»

[00:23] <colomon> rakudo: say (0.5 .. 0.6)

[00:23] <p6eval> rakudo 2ee5db: OUTPUT«0.5␤»

[00:23] <TimToady> there's the bug

[00:23] <TimToady> oh, wait

[00:23] <TimToady> hmm

[00:23] <TimToady> innersting

[00:23] <colomon> waiting patiently....

[00:24] <TimToady> it turns into 0.5, *+1 ...^ * > 0.6

[00:24] <TimToady> it's a list context

[00:24] <colomon> oh.

[00:25] <colomon> yes

[00:25] <colomon> rakudo: say (1/2 minmax 3/5).perl

[00:25] <p6eval> rakudo 2ee5db: OUTPUT«1/2..3/5␤»

[00:27] *** mfollett left
[00:27] *** mfollett joined
[00:27] <colomon> should we maybe define Range.Str to do something which doesn't involve printing out the entire list?  Seems like it might save a lot of confusion...

[00:28] <TimToady> does it even see .Str before it iterates the range?

[00:29] <colomon> there is no Range.Str right now, so now.

[00:29] <colomon> I mean, it's probably doing Iterable.Str or something like that.

[00:29] <TimToady> even if there were, it's it list context before it's in string context

[00:29] <colomon> ah, really?

[00:30] <TimToady> say is going to iterate its list, and then apply .Str

[00:30] <colomon> makes sense, I guess.

[00:32] <colomon> none of this explains why my $work code isn't working, mind you.  ;)

[00:39] *** am0c^ joined
[00:39] <colomon> $u ~~ (@.points[$_ - 1][0] minmax @.points[$_][0])

[00:39] <colomon> "Cannot modify readonly value"

[00:39] <colomon> something to do with the ACCEPTS

[00:41] <colomon> huh.  if I believe the line number, that's Block.ACCEPTS.

[00:41] *** Util joined
[00:42] <colomon> oh, that's the ACCEPTS in grep.

[00:43] *** risou joined
[00:46] *** kcwu left
[00:51] *** am0c^ left
[00:55] <colomon> rakudo: (0, 1, 3, 5).grep({ $_ ~~ 2..4 }).say

[00:55] <p6eval> rakudo 2ee5db: OUTPUT«3␤»

[00:56] <colomon> rakudo: my $u = 2; (0, 1, 3, 5).grep({ $u ~~ $_..4 }).say

[00:56] <p6eval> rakudo 2ee5db: OUTPUT«0135␤»

[01:04] *** lucas_ joined
[01:12] <colomon> staring at the minmax code has not yielded any flashes of insight.

[01:14] <lucas_> hi everyone

[01:15] <colomon> o/

[01:15] <lucas_> I can see the POD sources for the apocalypses in urls like http://dev.perl.org/perl6/doc/design/apo/*.pod

[01:15] <lucas_> but I was wondering if they are available in some repository as well?

[01:16] <colomon> yes

[01:16] <colomon> they're in github somewhere now.

[01:16] <plobsing> mu?

[01:16] <colomon> doubt it.

[01:16] <colomon> but I forget what the url is

[01:16] <lucas_> i didnt find it in mu

[01:17] *** simcop2387 left
[01:17] <lucas_> I understand they are historical and are not going to be edited

[01:17] <lucas_> but anyway, I just want to download them

[01:17] <lucas_> (easily :-)

[01:18] <colomon> hmmm.

[01:19] <colomon> I was thinking http://github.com/perl6/specs, but that's just the synopsis specs.

[01:19] <lucas_> yes

[01:20] <colomon> mu is http://github.com/perl6/mu  

[01:20] <colomon> but at a quick glance I don't see them there either.  sorry.

[01:22] <lucas_> thanks anyway

[01:22] <lucas_> You see, I have this fetish for table of contents

[01:22] <lucas_> and just wanted to do a grep '^=' *.pod in those files

[01:22] <lucas_> nothing important

[01:25] *** risou left
[01:30] *** simcop2387 joined
[01:35] <colomon> http://gist.github.com/610804 is a quick summary of the weirdness I'm seeing

[01:47] *** am0c^ joined
[01:48] *** awwaiid joined
[01:50] *** Sanitoeter joined
[01:50] *** mfollett left
[01:51] *** standz left
[01:51] *** standz joined
[02:04] *** am0c^ left
[02:07] *** wooden left
[02:08] *** wooden joined
[02:08] *** wooden left
[02:08] *** wooden joined
[02:09] <TimToady> colomon: $_ is rebound on the right side of ~~

[02:10] <TimToady> change it to $^a and I'll bet it works

[02:12] <colomon> TimToady++

[02:12] <colomon> you got it in one.

[02:13] <colomon> wonder why it used to work?

[02:13] <colomon> or at least to plausibly fail in such a way I didn't notice the difference.

[02:27] *** ggoebel left
[02:27] *** cggoebel left
[02:28] <ash_> rakudo: class A { has $.HOW; }; A.new(HOW => ClassHOW);

[02:28] <p6eval> rakudo 2ee5db: OUTPUT«Type objects are abstract and have no attributes, but you tried to access $!HOW␤  in main program body at line 22:/tmp/5a13gS9rTB␤»

[02:28] <ash_> rakudo won't let you modify the how :-( 

[02:30] <ash_> that seem like a bug to anyone else? 

[02:30] *** cls_bsd_ left
[02:30] *** [particle] left
[02:30] *** cls_bsd joined
[02:30] *** hercynium left
[02:31] *** [particle] joined
[02:34] *** meppl left
[02:35] *** meppl joined
[02:36] <lucas_> tip: what are perl6 github repositories?

[02:36] <lucas_> answer using github yaml webservice interface

[02:37] <lucas_> curl -s http://github.com/api/v2/yaml/repos/show/perl6 | sed -n 's/.*:name: //p' | sort

[02:37] *** ash_ left
[02:38] *** ash_ joined
[02:44] *** am0c^ joined
[02:50] *** ash_ left
[03:05] <sorear> lucas_: we have a list of them in a json file in the proto repository

[03:08] <sorear> TimToady: I see (and implement) $_-rebinding constructs as creating a non-capturing block, much like described at S02:1015 - S02:1032 .  Is this a sane semantics, or should I be looking to emulate "temp" more closely?

[03:09] <sorear> TimToady: I wonder if the essential difference between &[Xxx] and &infix:<Xxx> is that the former does meta ops?

[03:09] *** lucas_ left
[03:15] <TimToady> sorear: well, if it stays bound after, say, ~~ is done, then it's likely a problem

[03:16] <TimToady> well--one essential difference is that &[op] is specced to always be 2-ary

[03:18] *** mfollett joined
[03:18] <sorear> it's more like A ~~ B = (&[~~])(A, { B }.(A))

[03:20] <sorear> colomon: ovid is doing p6 stuff?  where?

[03:21] *** _twitch joined
[03:30] *** wooden left
[03:31] *** wooden joined
[03:36] *** wooden left
[03:37] *** Sarten-X left
[03:44] *** Sarten-X joined
[03:46] *** meppl left
[04:02] *** meppl joined
[04:05] *** justatheory left
[04:11] *** orafu joined
[04:12] *** satyavvd joined
[04:12] *** dju joined
[04:16] *** dju left
[04:17] <sorear> TimToady: btw, I finally understand CvPADLIST

[04:17] *** dju joined
[04:32] *** xinming joined
[04:35] *** envi joined
[04:57] *** agentzh joined
[05:00] *** orafu left
[05:04] *** aurora_ joined
[05:09] *** aurora_ left
[05:20] *** mfollett left
[05:24] *** orafu joined
[05:24] *** orafu left
[05:33] *** kaare joined
[05:33] *** kaare is now known as Guest93575

[05:44] *** masonkramer left
[05:45] *** masonkramer joined
[05:54] *** Guest93575 is now known as kaare_

[06:05] *** dream joined
[06:07] *** xabbu42 joined
[06:09] *** wtw joined
[06:10] <sorear> TimToady: How does Perl 6 feel about ad-hoc optimizations?  (e.g. I'm planning to generate special code for ^INTEGER_CONSTANT { .. })

[06:12] *** plobsing left
[06:13] <sorear> in the spirit of Perl 5.005's foreach (1 .. 1000000) { } optimization

[06:14] <moritz_> sorear: If you know that no other prefix:<^> multi competes with it, that's fine

[06:20] <sorear> semantically, sure; I'm wondering more philosophically

[06:54] <dalek> niecza/master: 2dd2dee | sorear++ | / (3 files):

[06:54] <dalek> niecza/master: Implement the is rw parameter trait

[06:54] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/2dd2dee5d866e5f10d0d9ba8b49c6c292034905c

[06:54] <dalek> niecza/master: c25514f | sorear++ | / (3 files):

[06:54] <dalek> niecza/master: Include sub names in backtraces

[06:54] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/c25514f952a394a0a4342de94f7bfdf8b8606eed

[06:54] <dalek> niecza/master: eeab430 | sorear++ | src/CSharpBackend.pm:

[06:54] <dalek> niecza/master: Let CgOp reference classes by Perl 6 name

[06:54] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/eeab430756ddd5e768e4b74117a71e813a49198d

[06:56] *** am0c^ left
[06:56] *** betterworld left
[06:58] *** agentzh left
[07:01] *** sftp left
[07:06] *** Mowah joined
[07:08] <sorear> Wait a second.  Doesn't Mu.bless($existing-object) break the entire gradual typing system? :/

[07:12] *** xabbu42 left
[07:14] *** araujo left
[07:32] <sorear> ping jnthn

[07:48] *** PZt left
[07:54] *** risou joined
[07:54] *** wamba joined
[08:04] *** betterworld joined
[08:08] <dalek> niecza/master: 36ef3b7 | sorear++ | / (6 files):

[08:08] <dalek> niecza/master: Implement typed variables (low level)

[08:08] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/36ef3b7854f169367e1cfd615aac6a13a7d84a51

[08:08] <dalek> niecza/master: 25a646d | sorear++ | lib/Kernel.cs:

[08:08] <dalek> niecza/master: Slightly improve error message for type errors

[08:08] <dalek> niecza/master: review: http://github.com/sorear/niecza/commit/25a646d5a06b46f0f8a5baba1787917993ad9bde

[08:08] <sorear> whee, I have my $x; $x = Mu; failing

[08:14] *** kaare__ joined
[08:15] *** kaare_ left
[08:20] *** nymacro joined
[08:20] <sorear> aloha: seen chromatic

[08:20] <aloha> sorear: chromatic was last seen in #parrot 9 days 13 hours ago joining the channel.

[08:23] *** flatwhatson_ left
[08:28] *** flatwhatson_ joined
[08:36] *** flatwhatson_ left
[08:37] *** dakkar joined
[08:39] *** xabbu42 joined
[08:41] *** flatwhatson_ joined
[08:47] *** pythonian4000 is now known as pythonian4000afk

[08:56] *** masak joined
[08:56] <masak> morning, #perl6

[09:01] <nymacro> moin

[09:02] * masak heeft een goede nachtrust

[09:05] *** agentzh joined
[09:08] *** timbunce joined
[09:10] *** wamba left
[09:11] *** kst left
[09:11] *** kst joined
[09:14] <masak> "There are only two hard problems in Computer Science: documentation and shutting the hell up."

[09:14] <masak> :)

[09:15] <masak> source: http://twitter.com/flangy/status/26192632417

[09:16] <mathw> That's a pretty good quote

[09:16] <masak> I like it. it's a variation of two other quotes I've seen floating around lately. the second of which is a parody of the first.

[09:17] <masak> the first goes "...: cache invalidation, and the fact that there aren't anough three-letter acronyms"

[09:17] <masak> the second one adds "...and off-by one errors"

[09:20] <mathw> I'm not sure that counts as an off-by-one error

[09:20] <mathw> <- pedant

[09:21] <masak> I know. that's why I didn't find the second version particularly funny.

[09:21] <masak> I liked this new one, though.

[09:22] *** icwiener joined
[09:22] <nymacro> masak, wasn't it cache invalidation and naming things? (the first)

[09:22] <masak> nymacro: that might well be so.

[09:23] <masak> I've had the quote told to me IRL as well, and then there was definitely a mention of TLAs. but it might indeed have been as a comment to "naming things".

[09:23] <mathw> naming things is definitely difficult

[09:24] * mathw decides that arguing with Apple fanboys about Microsoft's mobile OS strategy is just a good way to get a conviction for GBH

[09:24] <masak> I have a name looking for a project: "Vermin". any ideas?

[09:25] *** vipin joined
[09:27] *** vipin left
[09:29] *** vipin_ joined
[09:29] *** vipin_ left
[09:30] <nymacro> masak, all my ideas are inappropriate. Maybe you need another name :)

[09:31] <masak> I'll just put this name on hold and work on other names for now.

[09:32] <nymacro> As the Chinese Proverb goes: when the time comes, you'll know when to use them. Actually, I just made that up.

[09:41] <masak> making up Chinese proverbs is an old, time-honoured tradition.

[09:42] *** mavrc joined
[09:45] <masak> I'm very happy to read what Tom Legrady is doing with Rakudo in http://which-dwarf-are-you.blogspot.com/2010/09/exploring-perl6_30.html

[09:46] <masak> I wouldn't solve Sudoku like he does, but I like the Perl 6 in itself. quite advanced usages.

[09:46] <masak> it's a testament to Rakudo being quite mature that someone can just pick it up and do something like this.

[09:51] *** icwiener left
[09:58] <masak> TimToady: the way I've been understanding the Perl 6 model of methods and subs is that "it's all lambdas" underneath. is chromatic's opinion at http://www.reddit.com/r/programming/comments/dl58d/larry_wall_i_dont_really_know_much_about_python_i/c111vap at odds with that idea? seems to me he wants a distinction all the way down.

[09:59] <masak> hm, maybe I'm overinterpreting what he says. Perl 6 does distinguish subs and methods on the surface.

[09:59] <masak> much to the dismay of about half of the newcomers to Perl 6. :)

[09:59] *** icwiener joined
[10:00] <masak> anyway, interesting reddit thread.

[10:05] *** mberends left
[10:06] *** ggoebel joined
[10:06] *** cggoebel joined
[10:07] *** masak left
[10:11] *** agentzh left
[10:13] *** baux joined
[10:14] *** agentzh joined
[10:16] *** agentzh left
[10:22] *** ruoso left
[10:40] *** jest joined
[10:45] *** pythonian4000afk is now known as pythonian4000

[10:49] *** ab5tract joined
[10:53] *** Mowah left
[10:58] *** umphy joined
[10:59] *** umphy left
[11:03] *** dream left
[11:09] *** cjk101010 joined
[11:10] *** masonkramer left
[11:21] *** ab5tract left
[11:22] *** tylerni7 left
[11:47] *** icwiener left
[11:54] *** orafu joined
[12:04] *** Italian_Plumber joined
[12:08] *** M_o_C joined
[12:08] *** icwiener joined
[12:12] *** plobsing joined
[12:14] *** awwaiid left
[12:16] *** PZt joined
[12:17] *** satyavvd left
[12:17] *** cls_bsd left
[12:17] *** cls_bsd joined
[12:20] *** wtw left
[12:31] *** jest left
[12:32] *** jest joined
[12:48] *** ruoso joined
[13:00] *** lucas_ joined
[13:04] *** takadonet joined
[13:04] <takadonet> morning all

[13:04] <colomon> o/

[13:04] <takadonet> colomon: how are you sir?

[13:04] <colomon> sleepy

[13:04] <colomon> you?

[13:05] <takadonet> same

[13:12] <colomon> also, Ovid seems to be pulling well ahead from me in the Lacuna Expanse.  :\

[13:13] <colomon> I'm stuck at 27th place, while he seems to have gone from about 30th to 20th over the weekend.

[13:16] *** Patterner left
[13:24] *** risou_ joined
[13:24] *** risou left
[13:26] *** lucas_ left
[13:27] *** dream joined
[13:29] *** kaare__ left
[13:30] *** Psyche^ joined
[13:30] *** Psyche^ is now known as Patterner

[13:30] *** cjk101010 left
[13:35] *** mavrc left
[13:35] *** mavrc joined
[13:36] *** mfollett joined
[13:37] *** PerlPilo1 left
[13:37] *** PerlJam left
[13:38] *** PerlPilot left
[13:39] *** PerlJam joined
[13:42] *** mfollett left
[13:44] *** tylerni7 joined
[13:46] *** kst left
[13:46] *** kst joined
[13:53] *** Axius joined
[13:55] *** plainhao joined
[14:04] *** icwiener_ joined
[14:05] *** ruoso left
[14:06] *** icwiener left
[14:06] *** araujo joined
[14:09] *** ruoso joined
[14:15] *** M_o_C left
[14:17] *** M_o_C joined
[14:19] *** MayDaniel joined
[14:23] *** sftp joined
[14:33] *** ash_ joined
[14:35] <ash_> class A { has $.HOW; }; A.new(HOW => 3); # aren't you supposed to be able to write your own HOW's? 

[14:36] <ash_> rakudo

[14:36] <ash_> rakudo: class A { has $.HOW; }; A.new(HOW => 3); # fail typing right now

[14:36] <p6eval> rakudo 2ee5db: OUTPUT«Type objects are abstract and have no attributes, but you tried to access $!HOW␤  in main program body at line 22:/tmp/zx3piRPL08␤»

[14:36] <jnthn> ash_: Not like that.

[14:36] <ash_> oh...

[14:36] <jnthn> HOW is not meant to be a method.

[14:37] <jnthn> Rakudo's had that wrong for ages.

[14:37] <jnthn> It's fixed in the nom branch of nqp-rx though :-)

[14:37] <ash_> hmm, alright, well, i was still trying to make a PrototypeHOW, should i check out that branch of nqp-rx to test it with? 

[14:38] <ash_> can i use rakudo with that branch of nqp-rx? 

[14:38] <jnthn> ash_: It's a building site in there.

[14:38] <jnthn> ash_: Very unlikely - it fails too many nqp tests at the moment.

[14:38] <jnthn> It's in the middle of having its class keyword switched to using the new model.

[14:38] <jnthn> That aside, it *is* the place to play with such things.

[14:39] <jnthn> For one, because what exists of classes is implemented in there, in NQP.

[14:39] *** billgosh joined
[14:39] <jnthn> So at that level it already is supporting custom meta-classes, mostly because all of them are custom. ;-)

[14:40] <jnthn> We're just missing the stuff to make it convenient (e.g. slangs)

[14:40] <ash_> ya, i kinda stole a bunch of code from rakudo/docs/metamodel.pod and from the nom branch of nqp-rx (i saw your KnowHOW work and copied things from that) 

[14:40] <jnthn> But if you want to play, maybe fork nqp-rx's nom branch and patch in a declarator and install a mapping for it.

[14:40] *** pythonian4000 is now known as pythonian4000afk

[14:41] <jnthn> (Of course, I'm happy to review and incorporate any improvements too. :-))

[14:42] <ash_> if i make anything useful, i'll let you know

[14:42] <jnthn> :-)

[14:43] <jnthn> ClassHOW is probably the best thing to look at wrt how the WHAT/HOW are set up.

[14:43] <jnthn> especially the new_type method.

[14:44] <jnthn> Essentially though, anything you write in that pattern gets representation polymorphism "out of the box".

[14:44] <jnthn> But you may also choose to constrain it.

[14:45] <hudnix> I have implemented Knuth's "Dancing Links" algorithm in perl6.

[14:46] <hudnix> It solves small problems, slowly, but segfaults on anything largish.

[14:47] <TimToady> is there a rosettacode page for that problem?

[14:47] <ash_> jnthn: when a method lookup fails, what happens? does that throw an error? or...?

[14:48] <hudnix> I don't know. it's rather large for rosettacode.

[14:48] <colomon> hudnix++

[14:48] <colomon> hudnix: do a blog post or something, so the rest of us can see it?

[14:49] <TimToady> yes, colomon++ is getting lonely on planetsix

[14:49] <colomon> or, ooooo, make it a module!  :)

[14:49] <PerlJam> hudnix: and create a rosettacode page for it :)

[14:49] <colomon> TimToady: too true.  :)

[14:49] <hudnix> colomon: I will, I guess this is a good excuse to finally start a blog :)

[14:50] <hudnix> colomon: It is a module :)

[14:50] *** M_o_C left
[14:50] <colomon> hudnix++: which you will blog about!  lovely. 

[14:50] *** M_o_C joined
[14:51] <jnthn> ash_: Undecided. (more)

[14:51] <jnthn> ash_: The Parrot API wants us to return a sentinel from find_method saying it wasn't found.

[14:51] <jnthn> It uses PMCNULL

[14:51] <jnthn> But that's not something we want to start throwing around in Perl 6 land.

[14:51] *** M_o_C left
[14:52] <jnthn> I'm pondering that find_method throws an error and can returns a Nil-ish value or something like that.

[14:52] <hudnix> I need to find a place for my perl blog, though. I see "use perl;" is dead :(

[14:52] <colomon> hudnix: I've been very happy with Wordpress.  

[14:52] *** satyavvd joined
[14:52] <ash_> jnthn: what about AUTOLOAD like methods on package in p6? will those need some sort of special interaction with find_method to work? 

[14:52] <jnthn> I'm happily using Wordpress too.

[14:53] <hudnix> I've set up wordpress for friends. I hate it :)

[14:53] *** M_o_C joined
[14:53] <jnthn> ash_: I guess maybe Perl 6's ClassHOW will implement something in find_method.

[14:53] <jnthn> But maybe that's the wrong factoring.

[14:53] <ash_> my blog is in wordpress, because the hosting company i uses let me install it with 1 button and its easy and i can be lazy :P 

[14:54] *** sundar joined
[14:54] <hudnix> ash_: easy initial set up is it's big strenght :)

[14:54] *** mfollett joined
[14:55] <ash_> hudnix: i went through the phase of "ooh i need to make my own blog in X framework" and after finally realizing how much work the wordpress (insert other blogging system here) has done, i decided to not re-invent the wheel, because there is a good one already, or good enough for me

[14:57] <nymacro> the best way to implement software is don't

[14:58] <nymacro> I'm all for hanging out in caves and banging sticks together for entertainment

[14:58] <ash_> jnthn: i saw that a lot of the AUTO* stuff was removed from the spec's, didn't it used to have AUTO [SCALAR|ARRAY|HASH] etc...

[14:58] <ash_> S10 talks about CANDO now instead of AUTO* 

[14:58] <ash_> anyway, just a side thought 

[14:58] <hudnix> ash_: Yes, it's true. It's just that I had a bad experience with it once, setting it up for someone as their main site, and trying to customize it heavily so that it looked ... not like a wordpress blog. The experience left me slightly bitter about wordpress.

[14:59] <ash_> nymacro: when we work up to fire, it will be WEEKS of entertainment there, what happens when it goes out? what happens if i burn this leaf? how well do rocks taste boiled? 

[15:00] <nymacro> I know right. How interesting must life have been back then? I mean, you can't reinvent a wheel which hasn't even been invented yet anyway!

[15:00] <ash_> hudnix: ya, i worked for a web company before that did that, i hate when my boss wants to put a round peg in a square hole. there are some things that don't fit together no matter how hard you try 

[15:00] <colomon> bikeshedding was very boring then.

[15:00] *** timbunce left
[15:02] *** dream left
[15:03] *** Axius left
[15:03] <ash_> btw, if anyone in here uses textmate, i updated the perl syntax so it highlights p6 a bit better, its not prefect but its better than it was 

[15:03] <colomon> ash_++

[15:04] *** timbunce joined
[15:04] * hudnix is still trying to get emacs to indent P6 properly

[15:04] <frettled> ash_: "If it doesn't fit, you're not trying hard enough!" - because that MUST be why it doesn't fit.  It can't be the wrong solution, oh no.  :)

[15:05] <frettled> hudnix: are you using an updated Perl 6 mode thingy?

[15:05] <colomon> ash_: would it make sense to make a separate Perl 6 mode for TextMate instead?

[15:06] <ash_> colomon: well, it might, but all the filetypes already map .pl (and friends) to perl, plus the way i have it, perl5 highlighting still works fine (none of my changes really impact perl5) 

[15:07] <hudnix> frettled: I didn't know emacs had a perl 6 mode thingy.

[15:07] <ash_> it's more along the lines of where it used to expect package you can now say class|module|role and things like that

[15:08] <colomon> ash_: I'd happily give it a whirl here.  ;)

[15:08] *** timbunce_ joined
[15:10] <ash_> alright, one sec, let me put it on github

[15:11] *** cls_bsd left
[15:11] *** timbunce left
[15:11] *** timbunce_ is now known as timbunce

[15:11] *** cls_bsd joined
[15:13] <ash_> colomon: TextMate seems to have made my changes a diffs rather than a replacement for the old module and i haven't figured out how to make it not do that. So, http://github.com/ashgti/perl-tmbundle/downloads has the diffs, just unzip that and place it in ~/Library/Application\ Support/TextMate/Bundles/ 

[15:16] *** mavrc left
[15:19] *** sundar left
[15:21] *** spq1 joined
[15:23] *** M_o_C left
[15:23] *** risou joined
[15:24] *** M_o_C joined
[15:25] *** risou_ left
[15:29] <ash_> colomon: alright, i now have all of my changes merged with the perl bundle, if you do want you can just do: cd ~/Library/Application Support/TextMate/Bundles/ ; git clone git://github.com/ashgti/perl-tmbundle.git Perl.tmbundle 

[15:29] <colomon> ash_: sorry, got distracted reading about "Cubase64", doing modern digital audio on a Commodore 64 (sort of).

[15:30] <colomon> oh, cool.

[15:30] <frettled> hudnix: I think [particle] or someone else made one, which was in the pugs repository, but maybe it is in the P6 misc section on github now.

[15:30] <ash_> and re-start textmate (or reload bundles) 

[15:30] <hudnix> frettled: thanks

[15:31] <colomon> ash_: so what should look better now?

[15:31] <colomon> multi method recognized as keywords, it looks like...

[15:32] <ash_> well, http://gist.github.com/611732 is what i have been trying to get it to highlight properly

[15:32] <colomon> the thing that has been giving me fits is hyper ops.

[15:32] <hudnix> dancing links takes just under 5 minutes to find all 288 ways to place 6 '1's on a 6x6 sudoku, but segfaults trying to place 9 '1's on a standard 9x9 sudoku

[15:32] <ash_> ya, class is a keyword, it should recognize package names if you do: Foo.bar (Foo is the package component of that) 

[15:32] <ash_> haven't tried those yet

[15:33] <colomon> ash_++ # looks like a definite improvement!

[15:33] *** M_o_C left
[15:33] *** mavrc joined
[15:33] <ash_> if you have any issues you want me to address i am starting to get the hang of how textmate does all its syntax highlighting 

[15:33] <ash_> oh, the symbol list should be better too

[15:33] * [Coke] sees he's been beaten to the sudoku solver.

[15:33] * [Coke] is far too lazy.

[15:34] <ash_> err, just checked the symbol list, i think i broke it again, ill look into that 

[15:34] <ash_> it had the symbols sorted properly before, but i broke it some how, hmm... 

[15:36] <frettled> hudnix: Hrm, sorry, I can't find it there.  Let me see.

[15:37] *** M_o_C joined
[15:37] <frettled> hudnix: util/cperl-mode.el in the pugs repository, I think

[15:39] <frettled> hudnix: and it was renormalist++ who did it.

[15:41] <frettled> hudnix: This one may also work: http://github.com/jrockway/cperl-mode

[15:41] <ash_> colomon: can you give me an example of syntax that doesn't look right to you in textmate? and maybe a suggestion to what you think would look better? you mentioned hyper ops 

[15:47] *** Ross joined
[15:47] *** Ross left
[15:47] *** Ross joined
[15:47] <colomon> ash_: if you do <<*<< (say), textmate thinks it's a p5 << string

[15:47] <colomon> everything else I've just looked at looks pretty nice with your version.

[15:48] *** ruoso left
[15:48] <ash_> kk

[15:48] <ash_> i'll see if i can fix that one

[15:49] <ash_> so... what would that look like: @arr<<*<<(&say)  ? 

[15:49] <TimToady> std: @arr<<*<<(&say)

[15:49] <p6eval> std 237d266: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unable to parse quote-words subscript; couldn't find right double-angle quote at /tmp/zeDb52Amxr line 1 (EOF):␤------> [32m@arr<<*<<(&say)[33m⏏[31m<EOL>[0m␤Parse failed␤FAILED 00:01 120m␤»

[15:50] <jnthn> I think the (say) was meta :P

[15:50] *** fifthy joined
[15:50] <ash_> oh

[15:50] <ash_> i am not yet familiar with how to use hyper ops in practice 

[15:50] <jnthn> ash_: If I was feeling cruel I'd suggest

[15:51] <colomon> ash_: oh, oh, the (say) was text, not p6 code!

[15:51] <jnthn> say "$x.foo(Bar.new("lol"))"

[15:51] <jnthn> ;-)

[15:52] <jnthn> std: class Bar { }; my $x; say "$x.foo(Bar.new("lol"))"

[15:52] *** Ross left
[15:52] <p6eval> std 237d266: OUTPUT«ok 00:03 118m␤»

[15:52] <colomon> anything with a << in it comes out wrong in textmate -- unless you're actually doing a string that way.

[15:53] <TimToady> so use « like yer sposta

[15:53] <ash_> lol

[15:53] <colomon> TimToady has a point, « works fine.

[15:53] <PerlJam> or teach textmate LTM

[15:54] <colomon> oooo, looks like my << to « trick was specific to my version of textmate's perl bundle.

[15:54] *** Ross joined
[15:54] *** Ross left
[15:54] *** Ross joined
[15:55] *** jest left
[15:57] *** satyavvd left
[16:04] *** fifthy left
[16:09] *** ruoso joined
[16:13] *** M_o_C left
[16:13] <ash_> where are the numeric literals' speced? S02? 

[16:14] <TimToady> S02:3119

[16:20] *** jaldhar left
[16:24] *** risou_ joined
[16:26] *** risou left
[16:27] *** stkowski joined
[16:30] <ash_> std: 0d10e5;

[16:30] <p6eval> std 237d266: OUTPUT«[31m===[0mSORRY![31m===[0m␤Whitespace is required between alphanumeric tokens at /tmp/eCFO2V1oS2 line 1:␤------> [32m0d10[33m⏏[31me5;[0m␤Two terms in a row at /tmp/eCFO2V1oS2 line 1:␤------> [32m0d10[33m⏏[31me5;[0m␤    expecting any of:␤  POST␤   bracketed infix␤  

[16:30] <p6eval> ..infix or …

[16:30] *** cdarroch joined
[16:30] *** cdarroch left
[16:30] *** cdarroch joined
[16:32] *** gottreu left
[16:35] *** pyrimidine joined
[16:43] *** M_o_C joined
[16:45] <ash_> hmm does vim support << and >> ? it seems confused to me

[16:50] <flussence> as vim commands or in p6 code?

[16:51] <flussence> (both seem fine on mine...)

[16:54] *** nymacro left
[16:56] <shortcircuit> hudnix, PerlJam: We're finally drafting a page with guidelines on how to create tasks, so FYI: http://rosettacode.org/wiki/Rosetta_Code:Add_a_Task

[16:57] *** wooden joined
[16:57] *** wooden left
[16:57] *** wooden joined
[17:00] <ash_> flussence: as syntax in a pl file, as hyper ops not as here-docs 

[17:00] *** Mowah joined
[17:01] <flussence> oh, the *other* type of << >>s...

[17:01] <flussence> .oO( or other-other )

[17:02] *** wooden left
[17:03] *** dakkar left
[17:03] <flussence> it highlights >>+>> the same as »+» for me, but strangely ». doesn't seem to work.

[17:04] <flussence> I'm using the perl6.vim from vim-perl 7d9b2acba11, if it makes any difference

[17:09] *** justatheory joined
[17:11] <ash_> flussence: thats what  i am using in my vim, i am just trying to see if i can fix the highlighting in textmate, was going to see how perl6.vim figured it out 

[17:11] *** Axius joined
[17:12] <ash_> perl6 test suite S13-overloading/metaoperators.t looks funny to me

[17:12] <ash_> maybe there is an update to vim-perl

[17:13] <ash_> oh, ya, mines out of date

[17:13] <flussence> oh, I see

[17:13] <flussence> it's messed up for me too

[17:13] <ash_> hmmm, still not right

[17:14] *** ruoso left
[17:15] <flussence> seems like the <<>>/Z/R/X stuff works fine for simple things like +-/*, but not for things with text names...

[17:18] <flussence> oh, the infix operators are hardcoded at line ~180

[17:18] <flussence> that'd explain it

[17:23] <PerlJam> when parrot switches to git, will build/PARROT_REVISION switch to mean "you must have exactly this revision"?

[17:25] *** wamba joined
[17:25] <flussence> it might be nicer to use `git submodule` instead once it's available

[17:25] *** _twitch left
[17:26] *** Axius_ joined
[17:27] *** Axius left
[17:31] *** timbunce left
[17:31] <flussence> (that would mean I could run `git clean` instead of having to re-checkout the entire parrot repo to do a clean build...

[17:31] *** Tene joined
[17:31] *** Tene left
[17:31] *** Tene joined
[17:31] <flussence> # s/$/)/

[17:32] *** ash_ left
[17:34] *** billgosh left
[17:36] *** meraxes_ left
[17:37] *** timbunce joined
[17:38] <PerlJam> flussence: you'll probably have to do "git clean -f" and also run "make realclean"

[17:43] <sjohnson> GIT!

[17:44] *** zby joined
[17:50] <dukeleto> PerlJam: that is a very good question that I have been thinking about

[17:51] *** _twitch joined
[17:52] *** am0c^ joined
[17:52] *** zby left
[17:55] *** Axius joined
[17:58] *** baux left
[17:58] <PerlJam> dukeleto: have you come to any conclusions?

[18:01] *** xabbu42 left
[18:02] <PerlJam> If we have a copy of a parrot git-repo laying around we can see if the revision of parrot is a descendant of the revision mentioned in build/PARROT_REVISION

[18:02] <dukeleto> PerlJam: most people won't have a git-svn repo

[18:02] <PerlJam> but that's a big if

[18:02] <flussence> (Oh, I just remembered something!)

[18:02] <flussence> dukeleto: IIRC you're the person I need to bother about the graphs on http://smolder.parrot.org/app/graphs/start/5 not working...

[18:02] <dukeleto> PerlJam: parrot is going to try to use "git describe" output and some shenanigans

[18:03] *** tadzik joined
[18:03] <dukeleto> flussence: hmmm, hadn't noticed that. Can you create a Trac ticket?

[18:04] <tadzik> hi

[18:04] <dukeleto> flussence: smolder was a huge pain to get installed and running properly

[18:04] <dukeleto> flussence: that will require asking OSUOSL (who hosts Parrot) to fix some stuff

[18:04] <PerlJam> dukeleto: what sort of shenanigans?

[18:04] <flussence> ok, will do in a min...

[18:04] <dukeleto> flussence: our smolder rss feeds have broken links in them as well

[18:08] *** Axius left
[18:09] *** am0c^ left
[18:15] <flussence> dukeleto: done, ticket #1816

[18:15] <dukeleto> flussence++

[18:15] <dukeleto> PerlJam: since parrot version X.2.1 can come out after X.3.0, things are not simple. 

[18:15] *** mberends joined
[18:16] <dukeleto> PerlJam: i think it is possible to get something useful by appending a data to the output of "git describe"

[18:16] <dukeleto> PerlJam: so that the git repo won't be necessary to figure out if a recent enough parrot is present

[18:16] <dukeleto> PerlJam: a date, I meant

[18:17] <mberends> \o/ wifi @ Amsterdam.pm

[18:17] <PerlJam> dukeleto: sounds workable.

[18:20] <dukeleto> PerlJam: we shall see. The hardest part of parrot's git migration is porting the mk_language_shell/create_language scripts

[18:23] <tadzik> why is sort returning a Parcel? :(

[18:26] <TimToady> because most functions that return multiple values do?

[18:27] <tadzik> hmm, for some reason I thought it should be an Array. My bad then

[18:27] <TimToady> and because it shouldn't matter if the parcel is used in list context?

[18:28] *** Axius_ left
[18:28] <tadzik> Parcel has no munch(), that's what bothered me

[18:28] <TimToady> @array.=sort should return an array :)

[18:28] <tadzik> > [2,3,4].sort.WHAT

[18:28] <tadzik> Parcel()

[18:29] <TimToady> that's correct

[18:29] <tadzik> rakudo: say [2, 3, 4].map($_*$_) # what's wrong here?

[18:29] <p6eval> rakudo 2ee5db: OUTPUT«Use of uninitialized value in numeric context  in <anon> at line 22:/tmp/ty8rZQ57SS␤Use of uninitialized value in numeric context  in <anon> at line 22:/tmp/ty8rZQ57SS␤No candidates found to invoke for method 'map' on object of type 'Array'; available candidates have

[18:29] <p6eval> ..signatures:␤:(…

[18:29] <TimToady> no closure

[18:29] <tadzik> ah, right

[18:30] *** Entonian joined
[18:31] <colomon> rakudo: say [2, 3, 4].map(** *)

[18:31] <p6eval> rakudo 2ee5db: OUTPUT«===SORRY!===␤HyperWhatever (**) not yet implemented at line 22, near " *)"␤»

[18:31] <colomon> whoops

[18:31] <colomon> rakudo: say [2, 3, 4].map(* * *)

[18:31] <p6eval> rakudo 2ee5db: OUTPUT«6»

[18:31] *** meraxes joined
[18:31] <tadzik> yeah, *** is also bad for it

[18:31] <diakopter> rakudo: say map * * *, 2, 3, 4

[18:31] <p6eval> rakudo 2ee5db: OUTPUT«6»

[18:32] <diakopter> cool

[18:33] <diakopter> rakudo: say map * * *,2..4

[18:33] <p6eval> rakudo 2ee5db: OUTPUT«6»

[18:35] *** timbunce left
[18:36] *** icwiener joined
[18:38] *** icwiener_ left
[18:42] *** timbunce joined
[18:43] *** Entonian left
[18:43] *** Entonian joined
[18:43] *** _twitch left
[18:54] *** masak joined
[18:54] <masak> hi from Amsterdam.pm! \o/

[18:55] <Juerd> Hi from the other side of the table :)

[18:56] <masak> oh, there you are :)

[18:56] <masak> #phasers in 4?

[18:58] *** ash_ joined
[19:07] *** AABAY0W joined
[19:19] *** wamba left
[19:24] *** timbunce left
[19:24] *** timbunce joined
[19:26] <shortcircuit> For whoever maintains the docs...GeSHi, the syntax highlighting system Rosetta Code uses supports turning keyword matches into URLs. That means that any instances of keywords could be links to the official documentation for that keyword. That'd be a cool feature, IMHO. We're using the 1.0.x release of GeSHi; if anyone wants to go to the trouble of building an updated lang file, they could send it to BenBE, and it'd wind up on RC and in GeS

[19:26] <shortcircuit> (BenBE is the maintainer of GeSHi, and also manages the GeSHi install on RC's server.)

[19:28] <masak> shortcircuit++ # nice!

[19:29] <shortcircuit> Of course, that means writing a data structure in PHP...

[19:31] <ash_> shortcircuit: where can we go to find docs on how to do this? 

[19:32] <shortcircuit> sec

[19:32] * shortcircuit looks for the latest and greatest docs on the subject

[19:32] <shortcircuit> er. Phone

[19:34] *** M_o_C left
[19:38] <shortcircuit> ash_: Looks like this is the official word: http://qbnz.com/highlighter/geshi-doc.html#language-files

[19:41] <ash_> shortcircuit: i see someone has started a perl6 syntax already, i'll see if i can figure out how to add links

[19:41] <shortcircuit> Other useful resources are #rosettacode and #geshi

[19:42] <shortcircuit> ash_: You might grep through the language files for 'http', to find existing examples.

[19:43] <shortcircuit> Oh, God. "Regular expressions use the PCRE syntax (perl-style), not the ereg() style!" ... and I just threw the problem at Perl geeks. What have I done?!

[19:43] *** justatheory left
[19:44] <ash_> oh, perl6 has a completely new regex syntax, but not all of the changes are directly backwards compatible to pcre, so doing proper syntax highlighting of perl6 code is difficult... 

[19:45] *** pythonian4000afk is now known as pythonian4000

[19:46] <masak> to do *proper* syntax highlighting, you need something like STD.pm6.

[19:47] *** justatheory joined
[19:47] <masak> only Perl 6 can parse Perl 6.

[19:47] *** plainhao left
[19:48] *** lucas_ joined
[19:48] <ash_> but, it doesn't always have to by exact, as long as your close enough that its a bit easier on the eyes i think your doing good enough 

[19:49] *** xabbu42 joined
[19:49] *** xabbu42 left
[19:49] *** xabbu42_ joined
[19:52] <shortcircuit> masak: GeSHi language files are sourced PHP scripts...so write a Perl6 implementation in PHP, and parse from there? :P

[19:53] <shortcircuit> Might be easiest to implement PIR in PHP, and go from there. *whistles*

[19:53] <masak> :)

[19:55] <tadzik> that won't do it, you need perl6.pbc anyway

[19:55] <tadzik> . o O ( php on parrot, then force everyone to use it )

[19:56] <shortcircuit> Plausible if Perl6 can solve this task: http://rosettacode.org/wiki/Call_foreign_language_function

[19:58] <jnthn> shortcircuit: See Zavolaj

[20:00] *** lucas_ left
[20:00] <ash_> jnthn: NCI in parrot? 

[20:00] <shortcircuit> jnthn: I presume you're Jonathan Worthington? Care to solve the task I linked to? :D

[20:00] *** jaldhar joined
[20:01] <ash_> parrot has NCI built in, Zavolaj is a module that gives perl6 access to the parrot internals required to use it 

[20:01] *** Italian_Plumber left
[20:02] <jnthn> ash_: Zavolaj uses Parrot NCI

[20:02] <jnthn> I probably shoulda read the task before suggesting it... ;-)

[20:03] <jnthn> shortcircuit: Huh, who's he... :-)

[20:03] <tadzik> hmm, is NCI another Parrot thing that doesn't use this neat interface, so you can use things w/o any wrappers?

[20:04] <jnthn> tadzik: Well, in this case the Perl 6 wrapper is Very Awesome.

[20:04] <ash_> jnthn: create a string containing the words: "Hello World!" in that languages native format, then print it, if your calling C they suggest to use C's strdup and printf 

[20:04] <tadzik> well, I don't know how bare NCI looks. But I love it if it's awesomer :)

[20:04] <tadzik> heh, there's no strdup in C ;)

[20:05] <tadzik> hmm, or it is in c99?

[20:05] <jnthn> use NativeCall; sub strdup(Str $in) { ... } returns Str is native('libc'); say strdup('hello') # or something like this

[20:05] <jnthn> star: use NativeCall; sub strdup(Str $in) { ... } returns Str is native('libc'); say strdup('hello') # or something like this

[20:05] <p6eval> star 2010.09: OUTPUT«===SORRY!===␤Confused at line 22, near "sub strdup"␤»

[20:05] <ash_> their example is calling C, i bet you could get bonus points if you called another language... wait a minute... is parrot cheating? 

[20:05] <tadzik> not at all :)

[20:05] <jnthn> gah...I didn't have enough beer today...

[20:05] <jnthn> star: use NativeCall; sub strdup(Str $in) returns Str is native('libc') { }; say strdup('hello') # or something like this

[20:05] <shortcircuit> Looks like it's a POSIX thing.

[20:05] <p6eval> star 2010.09: OUTPUT«===SORRY!===␤The native library 'libc' required for 'strdup' could not be located␤»

[20:06] <jnthn> oh...

[20:06] <jnthn> star: use NativeCall; sub strdup(Str $in) returns Str is native('glibc') { }; say strdup('hello') 

[20:06] <p6eval> star 2010.09: OUTPUT«===SORRY!===␤The native library 'glibc' required for 'strdup' could not be located␤»

[20:06] <jnthn> heh

[20:06] <jnthn> star: use NativeCall; sub strdup(Str $in) returns Str is native('') { }; say strdup('hello') 

[20:06] <p6eval> star 2010.09: OUTPUT«hello␤»

[20:06] <jnthn> Heh :-)

[20:06] <tadzik> :)

[20:06] <tadzik> awesome

[20:06] <jnthn> '' just uses the current executable to make a call in

[20:06] <jnthn> Which, of course, has libc loaded. :-)

[20:07] <jnthn> Anyway, there's a solution for ya. ;-)

[20:07] <tadzik> star: use NativeCall; sub strdup(Str $in) returns Str is native('') { }; sub printf(Str $in, *@_) returns Int is native('') { }; printf(strdup('hello'))

[20:07] <p6eval> star 2010.09: OUTPUT«===SORRY!===␤Can not handle type Mu in an 'is native' signature.␤»

[20:07] <tadzik> :(

[20:07] <tadzik> star: use NativeCall; sub strdup(Str $in) returns Str is native('') { }; sub printf(Str $in) returns Int is native('') { }; printf(strdup('hello')) # I can has cheating?

[20:07] <p6eval> star 2010.09:  ( no output )

[20:07] <jnthn> It doesn't know how to do varargs yet.

[20:08] <ash_> star: use NativeCall; sub strdup(Str $in) returns Str is native('') { }; sub c_printf(Str $in) is native('') { }; c_printf(strdup('hello'));

[20:08] <p6eval> star 2010.09: OUTPUT«Could not locate symbol 'c_printf' in native library '(resident)'␤  in <anon> at line 110:/home/p6eval/rakudo-star-2010.09/install/lib/parrot/2.8.0/languages/perl6/lib/NativeCall.pm6␤  in main program body at line 22:/tmp/QEdC2_iEji␤»

[20:08] <ash_> hmm oops

[20:08] <jnthn> Curious, I'd have thought that'd work.

[20:08] <ash_> star: use NativeCall; sub strdup(Str $in) returns Str is native('') { }; sub printf(Str $in) is native('') { }; c_printf(strdup('hello'));

[20:08] <p6eval> star 2010.09: OUTPUT«Could not find sub &c_printf␤  in main program body at line 22:/tmp/4TwUrKzyRE␤»

[20:08] <ash_> star: use NativeCall; sub strdup(Str $in) returns Str is native('') { }; sub printf(Str $in) is native('') { }; printf(strdup('hello'));

[20:08] *** tylercurtis joined
[20:08] <p6eval> star 2010.09:  ( no output )

[20:09] <ash_> jnthn, my nci framework i wrote for the GSoC can do var_args

[20:09] <shortcircuit> What happens if you do something in the native call that triggers, e.g. a null-pointer dereference?

[20:09] <jnthn> shortcircuit: Segfault. 

[20:09] <tadzik> Suprise Segfault!

[20:09] <shortcircuit> And p6eval?

[20:10] <jnthn> Segfaults ;-)

[20:10] <jnthn> Well, no

[20:10] <jnthn> It spaws a Rakudo proccess to run stuff

[20:10] <ash_> and boom goes the dynamite... 

[20:10] <jnthn> p6eval itself is fine.

[20:10] <flussence> it'd be nice if there was a "prefer native()" that fell back on the p6 function if it fails to load...

[20:10] <jnthn> oooh!

[20:10] <jnthn> flussence: File an issue on the github issue tracker for Zavolaj if you like :-)

[20:10] <jnthn> That's quite a cool idea at first blush.

[20:11] <jnthn> star: use NativeCall; sub printf(Str $in) returns Int is native('') { }; printf("hello\n") 

[20:11] <p6eval> star 2010.09:  ( no output )

[20:11] <shortcircuit> In the stuff I work with at work, we have helper processes to gate off badly-written 3rd-party components that we're forced to use. Might be worth a thought. ;)

[20:11] <jnthn> hm

[20:11] <jnthn> I'd love to know why that printf doesn't work.

[20:11] <jnthn> Alas, I need to pack for going to .nl tomorrow, do more slides hacking and a couple of other bits.

[20:12] <tadzik> works in REPL

[20:12] <tadzik> > use NativeCall; sub printf(Str $in) returns Int is native('') { }; printf("hello\n")

[20:12] <tadzik> hello

[20:12] <tadzik> 6

[20:12] <tadzik> ...why 6?

[20:12] <shortcircuit> h-e-l-l-o-null

[20:12] *** alester joined
[20:12] <ash_> printf return'ed the number of caracters it wrote

[20:12] <shortcircuit> ah

[20:12] <shortcircuit> \n

[20:12] <tadzik> ah, and REPL printed that, right

[20:12] <jnthn> heh :-)

[20:12] <ash_> and the repl print's the value of the last expression 

[20:13] <jnthn> Ah, just a p6eval-y thing then.

[20:13] <jnthn> Oh, I maybe shouldn't have shown people how to call arbitrary system functions with p6eval. Oops. :-)

[20:13] <tadzik> ha-ha!

[20:13] <jnthn> "Oh, behave!"

[20:13] <tadzik> Starsafe.pm should forbid Zavolaj

[20:14] <ash_> try.rakudo.org doesn't have star's modules installed

[20:16] *** cognominal left
[20:16] <tadzik> Night.good

[20:16] *** tadzik left
[20:24] <flussence> thinking about that idea, would a separate "prefer native" even be needed? If something needs to fail there it could just specify the function body as "...".

[20:24] *** ash_ left
[20:27] *** jaldhar left
[20:28] <flussence> on the other hand, I'm not sure how that'd work if someone wants it to die with an error straight away.

[20:33] *** masak left
[20:34] <tylercurtis> flussence: !!! is to ... as &die is to &fail

[20:34] <flussence> I meant, if they want it to die at compile-time instead of when they try to call it

[20:36] <flussence> (sort of how LD_BIND_NOW works)

[20:43] *** mberends left
[20:46] *** pyrimidine left
[20:53] <diakopter> grrrr

[20:53] <diakopter> don' me' w' m' vps

[20:59] <jnthn> flussence: Not sure. The idea of an automatic fallback appealed to me more than the particular "prefer" name.

[21:02] *** Ross left
[21:03] *** MayDaniel left
[21:06] *** Italian_Plumber joined
[21:11] *** cggoebel left
[21:11] *** ggoebel left
[21:32] *** meteorjay joined
[21:42] <shortcircuit> I've seen mention of STD several times. What exactly is it? It sounds like a unit test suite.

[21:42] <sbp> shortcircuit: perl6 standard grammar

[21:42] <sbp> see http://github.com/perl6/std

[21:42] <tylercurtis> std: foo

[21:42] <p6eval> std 237d266: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤    'foo' used at line 1␤Check failed␤FAILED 00:01 114m␤»

[21:43] <tylercurtis> shortcircuit: also available on CPAN as STD and through p6eval(only for syntax checking in that last case).

[21:47] <shortcircuit> I remember somebody (masak?) mentioning something about the day STD builds, it'd be a magical day. Is that in reference to an effective 1.0 state of P6?

[21:47] <diakopter> eh

[21:50] <shortcircuit> Ah, found it.

[21:50] *** spq1 left
[21:51] <shortcircuit> < tylercurtis> lue: I don't think there are many Perl 6 implementations that can actually run STD. More accurately, I'm not sure if any other than viv can. Niecza is close, I think.

[21:51] <shortcircuit> < lue> The second one is able, it'll be a special day.

[21:52] *** Mowah left
[21:59] *** mberends joined
[22:01] *** tylercurtis left
[22:02] *** masak joined
[22:02] <diakopter> hoi

[22:02] <diakopter> mberends+masak

[22:03] <jnthn> o/ masak

[22:03] *** timbunce left
[22:03] <mberends> \o/ $home sweet $home again

[22:03] <masak> \o

[22:03] <masak> and soon $bed sweet $bed I'd think.

[22:04] *** awwaiid joined
[22:04] <jnthn> Holland. Where everything in sweet like stroopwafels.

[22:05] * jnthn is coming tomorrow night! o/

[22:05] <masak> \o/

[22:06] <masak> jnthn: departing tomorrow night from Lund and arriving .nl Thursday morning, right?

[22:06] <jnthn> masak: aye

[22:07] <jnthn> masak: Leaving from $dayjob in Malmo straight to Copenhagen, then it's a direct sleeper train to Utrecht from there. :-)

[22:07] <jnthn> If it's all on time, I'll arrive just a minute to ten.

[22:08] *** [Coke] left
[22:08] <jnthn> .oO( I'm on board, so it'll probably be pun-ctual... )

[22:08] * masak groans

[22:08] <jnthn> masak: Have you fully procrastinated?

[22:08] <jnthn> Or is it an ongoing proccess?

[22:09] * jnthn is still procrastinating and suspects he may have to do a bit more in .nl/.fr...

[22:10] <masak> jnthn: I'm somewhere between the planning step and the massive slideshacking step with both presentations.

[22:10] <jnthn> ah

[22:10] <jnthn> I'm slide-hacking on the second one.

[22:11] <masak> when I find the tuits, I will sit down and massively output slides.

[22:11] <masak> mberends++ keeps distracting me with nice IRL things, though :P

[22:11] <mberends> .oO( shacking with a slide? erm)

[22:12] <jnthn> Don't worry, it was probably just a Swedishs genitive... :-)

[22:12] <masak> today we did the Anne Frank museum, the canals, and then Amsterdam.pm

[22:12] <jnthn> ooh!

[22:12] <jnthn> Pretty :-)

[22:12] <mberends> masak++ is a good canal boat pilot. Better than me :)

[22:12] <jnthn> hehe :)

[22:12] <masak> or should I say ˟˟˟.pm

[22:13] <masak> the boat was quirky, though.

[22:13] <masak> at different points it would just go insane and turn right no matter what you did.

[22:13] <jnthn> That doesn't sound...right.

[22:13] <masak> we had to evolve mechanisms to compensate for that :)

[22:14] <masak> but yeah, steering was fun.

[22:14] <masak> I managed not to cause any major canal traffic accident or damage to the moored houseboats. \o/

[22:17] * rjbs ponders porting Test::Routine.

[22:19] <jnthn> masak: phew :-)

[22:20] *** PacoLinux left
[22:20] <jnthn> masak: Last time I took my mum on a boat on some lake, a storm appeared. She was terrified. I wasn't too comfortable. :-)

[22:20] <jnthn> Managed to survive that one too. :-)

[22:20] *** mfollett left
[22:21] <shortcircuit> For those interested, I brought up strdup's not being C. Looking for alternate options. Discussion here: http://rosettacode.org/wiki/Talk:Call_a_foreign-language_function

[22:23] <masak> rakudo: for 1, 2, 3 { .say }

[22:23] <p6eval> rakudo 2ee5db: OUTPUT«1␤2␤3␤»

[22:23] <masak> rakudo: for 1, 2, 3 { sub foo {}; .say }

[22:23] <p6eval> rakudo 2ee5db:  ( no output )

[22:23] <masak> o.O

[22:23] * masak submits rakudobug

[22:23] <masak> rakudo: for 1, 2, 3 { sub foo {}; .say }; say "alive"

[22:23] <p6eval> rakudo 2ee5db: OUTPUT«alive␤»

[22:24] <jnthn> ...wtf...

[22:24] <masak> yeah. not funny.

[22:24] <masak> please don't do that.

[22:24] <jnthn> unlol

[22:24] <masak> I have another one.

[22:24] <masak> rakudo: sub foo { .say }; given 42 { foo($_) }

[22:24] <p6eval> rakudo 2ee5db: OUTPUT«Too many positional parameters passed; got 1 but expected 0␤  in 'foo' at line 1:/tmp/kw9WhTJse1␤  in main program body at line 22:/tmp/kw9WhTJse1␤»

[22:25] * masak submits rakudobug

[22:25] <jnthn> erm

[22:25] <jnthn> Not sure if that's a bug.

[22:25] <jnthn> Does the implicit $_ apply to routines as well as blocks?

[22:25] <masak> oh wait.

[22:25] <masak> rakudo: sub foo($_) { .say }; given 42 { foo($_) }

[22:25] <p6eval> rakudo 2ee5db: OUTPUT«42␤»

[22:26] <masak> hm.

[22:26] <masak> yeah, scratch that one.

[22:26] <masak> that wasn't what I wanted to report.

[22:26] <sjohnson> rakudo: for (10 .. 1) { print }

[22:26] <p6eval> rakudo 2ee5db:  ( no output )

[22:27] <sjohnson> anyone's thoughts about making  x .. y syntax be able to count backwards?

[22:27] <masak> sjohnson: reverse x .. y

[22:27] <jnthn> Or use the series operator

[22:27] <s_mosher> sjohnson, I'm strongly opposed to that for subscripts

[22:28] <sjohnson> who mentioned anything about subscripts?

[22:29] <masak> sjohnson: just the other day someone came onto the channel saying that the ranges being empty when y>x would actually simplify his code. I agree, and I think that's designed right.

[22:29] <s_mosher> sjohnson, I don't want @a[4..2] to produce anything

[22:30] <masak> rakudo: given $_ { sub foo($text) { $text }; say foo($_) }

[22:30] <p6eval> rakudo 2ee5db: OUTPUT«Too many positional parameters passed; got 1 but expected 0␤  in main program body at line 22:/tmp/AwTm3RE33r␤»

[22:30] <masak> jnthn: what about now?

[22:31] <sjohnson> s_mosher: i dont se ethe harm in it

[22:31] <sjohnson> see the*

[22:31] <jnthn> masak: Something looks rotten there.

[22:31] <masak> rakudo: sub foo($text) { $text }; given $_ { foo($_) }

[22:31] <p6eval> rakudo 2ee5db:  ( no output )

[22:31] <jnthn> oh

[22:31] <masak> rakudo: sub foo($text) { $text }; given $_ { say foo($_) }

[22:31] <jnthn> leaky contextual?

[22:31] <p6eval> rakudo 2ee5db: OUTPUT«Any()␤»

[22:31] <masak> jnthn: no idea.

[22:31] <jnthn> Feels lajk.

[22:31] * masak submits rakudobug

[22:31] <jnthn> masak++

[22:32] <s_mosher> sjohnson, I've written code that depends on it

[22:32] <masak> jnthn: did I mention I passed 1024 just a day or so ago? :)

[22:32] <jnthn> masak: Yes. :P

[22:32] <s_mosher> I don't know if that code is correct, mind

[22:32] <jnthn> masak: Maybe we should get you a cake with 1024 candles ;-)

[22:32] <masak> jnthn: :)

[22:35] <sjohnson> rakudo: my @a = 1, 2, 3, 4; say ~@a[3, 1]

[22:35] <p6eval> rakudo 2ee5db: OUTPUT«4 2␤»

[22:35] <sjohnson> s_mosher: too late

[22:35] <sjohnson> oh

[22:35] <sjohnson> nevermind

[22:35] <sjohnson> you might be right

[22:35] <sjohnson> rakudo: my @a = 1, 2, 3, 4; say ~@a[3..1]

[22:35] <p6eval> rakudo 2ee5db: OUTPUT«␤»

[22:35] <sjohnson> masak++'s idea will do then

[22:35] <sjohnson> reverse technology(tm)

[22:35] <s_mosher> yeah that's the one

[22:36] <masak> sjohnson: I think you'll come to like that way of doing it.

[22:36] <masak> it reads very well; you can see from a distance that the range is reversed. because it says that it is :)

[22:37] <masak> rakudo: given $_ { sub foo($text) { $text }; say foo() }

[22:37] <p6eval> rakudo 2ee5db: OUTPUT«Too many positional parameters passed; got 1 but expected 0␤  in main program body at line 22:/tmp/r8koc0WU7W␤»

[22:37] <masak> there's just no way to please this error.

[22:38] <s_mosher> here's where I used it http://gist.github.com/610694

[22:39] *** ab5tract joined
[22:39] <masak> good night, #perl6

[22:40] <s_mosher> at some point the subscript becomes [1..0] which is a very natural way to progress to something that means [0]

[22:40] <jnthn> night o/

[22:40] <sjohnson> cya guys

[22:40] <s_mosher> 'night guys

[22:40] *** masak left
[22:41] <jnthn> nightly smoker? Gee, I thought smoking in bed was dangerous...

[22:43] *** ab5tract left
[22:48] *** buubot left
[22:48] <TimToady> with the new sequence semantics we no longer need a multi for http://rosettacode.org/wiki/Primality_by_trial_division#Perl_6

[22:48] *** kst left
[22:49] *** buu left
[22:49] *** kst joined
[22:49] *** mavrc left
[22:54] *** buubot joined
[22:56] <s_mosher> TimToady, Perl 6 needs^Wwants a source-to-$language translator which is then verified by an independent grammar when invoked with --verify-readability

[22:56] <TimToady> :)

[22:56] *** buu joined
[22:56] *** aloha left
[22:57] <TimToady> method calls would work better in Japanese though

[22:57] *** aloha joined
[22:57] <TimToady> and yes, ranges are non-reversing for just the degenerate reasons you pointed out...er, that didn't come out right...

[22:58] <TimToady> aloha, aloha

[22:58] <s_mosher> I'm glad you agree

[22:59] <TimToady> no, it's you that agree :P

[22:59] <s_mosher> I was terrified that it was going to think I meant something by that

[22:59] <s_mosher> haha :) fair point

[22:59] <TimToady> and actually, I was just agreeing with the design of Ada

[22:59] <TimToady> now if you'd used ... instead of .. it would have tried to dwym it

[23:00] <s_mosher> yeah, that's fine by me

[23:00] <s_mosher> and makes sense

[23:00] <TimToady> it'll probably be a FAQ nonetheless

[23:01] <s_mosher> I've been trying to solve that Thiele interpolation problem with very little success

[23:01] <TimToady> just cheat and print out pi three times  :)

[23:02] <TimToady> or was it four?

[23:02] <s_mosher> 3 I think

[23:02] <s_mosher> I got it to converge at one point, but not on the right thing

[23:03] <s_mosher> I suspect I'm misinterpreting something

[23:03] *** awwaiid left
[23:03] <s_mosher> maybe I should try to understand the why and how of it before implementing it

[23:04] <TimToady> I knew if I worked on it I'd never get my slides ready for Friday and Saturday

[23:04] <TimToady> (probably still won't :)

[23:06] * rjbs will be there Friday and expects his money's worth.

[23:06] <jnthn> The tyrany of slide writing. 

[23:06] * rjbs is writing his own slides now, too.

[23:07] <jnthn> What event is it this Fri/Sat?

[23:07] <rjbs> Pittsburgh Perl Workshop is Sat/Sun.

[23:07] <jnthn> Aha.

[23:07] <jnthn> French Perl Workshop is also :-)

[23:07] * jnthn going to that one.

[23:07] <jnthn> Little nearer by ;-)

[23:08] <TimToady> then going straight from Pitt to Tokyo...

[23:08] <jnthn> Ooh

[23:08] * jnthn woulda loved to do Tokyo again

[23:09] <jnthn> Have fun :-)

[23:09] <TimToady> likewise

[23:10] <jnthn> Thanks :-)

[23:10] <jnthn> Giving That Signatures Talk again.

[23:10] <jnthn> And some waffle about meta-models. 

[23:15] * jnthn -> sleep

[23:15] <TimToady> night

[23:15] <jnthn> o/

[23:16] *** alester left
[23:17] *** flatwhatson joined
[23:38] *** jaldhar joined
[23:40] *** icwiener_ joined
[23:40] *** Maddingu1 joined
[23:41] *** Maddingue left
[23:43] *** icwiener left
[23:49] *** stkowski left
[23:50] *** ash_ joined
[23:56] *** QAB5640 joined
[23:56] *** XAA159U joined
[23:58] *** icwiener_ left
