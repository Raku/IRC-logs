[00:01] <arnsholt> And he's perfectly right, of course

[00:01] <arnsholt> The sciences tend to underestimate the value of the humanities, and vice versa

[00:08] <sundar> Is the latest Rakudo source always supposed to build against the latest Parrot source? Right now it appears it doesn't. 

[00:09] <colomon> sundar: nope

[00:09] <arnsholt> No, there's a file in build/ that says which version it uses

[00:09] <colomon> build/PARROT_REVISION

[00:12] <sundar> Oh oh! Should I now svn up to the older revision and build parrot again then? 

[00:14] <pugssvn> r30362 | colomon++ | [t/spec] Add real-bridge tests for cis and unpolar. 

[00:16] *** payload1 left
[00:16] <dalek> rakudo: c99eeb3 | (Solomon Foster)++ | src/core/ (2 files):

[00:16] <dalek> rakudo: Tweak the Any versions of unpolar and cis, define Real versions of the same.

[00:16] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/c99eeb31d6bdb1f3f4032d66ddc273d4973ce357

[00:24] *** snarkyboojum left
[00:29] *** wknight8111 left
[00:37] <jnthn> ffs, the Swedish railways are even worse than the British ones. :-/

[00:43] <arnsholt> You should try the Norwegian ones. They've been massively underfunded for at least two decades now >.<

[00:44] <jnthn> In two years of living in Slovakia, the train between Bratrislava and Wien was late *once*.

[00:45] *** wknight8111 joined
[00:45] <arnsholt> Hmm. Is it possible to enable some sort of trace mode in NQP?

[00:46] <jnthn> arnsholt: Yeah

[00:46] <jnthn> <?DEBUG> token enables

[00:46] <jnthn> And <DEBUG(0)> disables

[00:47] <arnsholt> Mmmm. Tasty recursion.

[00:49] <colomon> jnthn: why does one of those have a ? and the other not?

[00:50] <jnthn> colomon: Actutally the first works fine without the ?

[00:52] <colomon> <DEBUG> and <DEBUG(0)>.  I might be able to remember that.  :)

[00:52] <colomon> I've noticed perlcabal still isn't properly updating half of the spec.

[00:54] <jnthn> <DEBUG> is the same as <DEBUG(1)> fwiw

[00:54] <jnthn> It's kinda like method DEBUG($on = 1) { .... }

[00:54] <colomon> jnthn: I guessed that.  :)

[00:55] <jnthn> Yes, pmichaud++ tends to get stuff as you'd expect it. :-)

[00:55] <colomon> pmichaud++

[00:55] *** envi^home joined
[00:56] <jnthn> grrr...9 hours until Moscow flight :-/

[00:58] * jnthn would maybe believe that the train delay was an unfortunate unusual occurence, apart from half the trains he takes here are also late.

[00:59] *** envi^home left
[01:03] <arnsholt> Haha!

[01:04] <arnsholt> Tentative liftoff for my parser ^^

[01:04] <colomon> \o/

[01:04] * jnthn sleep, provided my hotel in Moscow has internet access of some kind, then hopefully catch you all tomorrow. :-)

[01:05] <shyam_iyer> ++

[01:05] <shyam_iyer> ++; 

[01:05] <colomon> jnthn: o/

[01:08] *** holli left
[01:11] *** holli joined
[01:12] <sundar> the current rakudo source doesn't build here against the build/PARROT_REVISION mentioned.. is this a known issue? 

[01:12] <arnsholt> Are you using perl Configure.pl --gen-parrot, or something else?

[01:13] *** gfx joined
[01:13] <sundar> I have an inside-out setup, with rakudo in runtime/parrot/languages/ 

[01:14] <arnsholt> Hmm. Something isn't working

[01:14] * arnsholt goes to write a blog post instead

[01:15] <sundar> The error I get is: "Method 'postcircumfix:<[ ]>' not found for invocant of class 'Undef'" 

[01:16] <arnsholt> Never tried the inside-out thing before. Try checking out Rakudo on it's own and do --gen-parrot perhaps?

[01:19] <sundar> Ok, trying that now. Though, if that works, it would be a strange issue.. 

[01:31] <colomon> rakudo: say (4/3).floor

[01:31] <p6eval> rakudo c99eeb: OUTPUT«1␤»

[01:36] *** wknight8111 left
[01:49] *** holli left
[01:52] *** TiMBuS left
[01:56] *** Psyche^ joined
[01:59] *** nihiliad1 joined
[02:00] *** Patterner left
[02:00] *** Psyche^ is now known as Patterner

[02:01] *** nihiliad left
[02:06] *** snarkyboojum joined
[02:20] *** Guest94973 joined
[02:36] *** user_7310 left
[02:57] *** Sarten-X joined
[03:08] <lue> The only bad thing about watching Doctor Who is 1) That beat is stuck in my head (1,2,3,4) 2) I can't wait until Apr. 17

[03:09] <lue> (oh, and hai)

[03:11] <lue> rakudo: multi sub circumfix:<µ µ>($a,$b) { say "$a and $b";}; µ 4,7 µ

[03:11] <p6eval> rakudo c99eeb: OUTPUT«error:imcc:syntax error, unexpected '\n'␤  in file 'EVAL_1' line 58␤Confused at line 11, near "\x{b5} 4,7 \x{b5}"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[03:12] *** fridim joined
[03:17] *** jferrero left
[03:30] *** gfx left
[03:33] *** shyam_iyer left
[03:39] *** REPLeffect joined
[03:43] *** plobsing joined
[03:52] *** meppel joined
[03:56] *** meppl left
[03:57] <plobsing> is this the right place to submit patches for rakudo?

[03:58] <plobsing> http://nopaste.snit.ch/20240

[04:13] *** nihiliad1 left
[04:18] *** ian_ joined
[04:19] *** alester joined
[04:33] *** molaf joined
[04:35] *** simcop2387 joined
[04:38] *** rv2733 joined
[04:47] *** arlinius joined
[05:31] *** justatheory left
[05:35] *** sundar left
[06:55] *** alester left
[07:27] <mathw> Morning

[07:36] *** eternaleye_ joined
[07:37] *** eternaleye left
[07:43] *** meppel left
[07:50] *** _jaldhar left
[07:50] *** payload joined
[07:56] *** payload1 joined
[07:56] *** payload left
[07:59] *** iblechbot joined
[08:03] *** masak joined
[08:03] <masak> oh hai, #perl6

[08:04] *** Su-Shee joined
[08:04] <mathw> oh hai, masak

[08:04] * masak rolls eyes in non-surprised amusement at the underscores-vs-hyphens discussion on p6l :)

[08:13] <snarkyboojum> hi masak o/

[08:13] <mathw> it is of course absolutely ridiculous

[08:13] <mathw> except for the point that the setting should probably use one or t'other

[08:14] <masak> snarkyboojum: \o

[08:14] <masak> mathw: trust p6l to take any absolutely straightforward, already settled point, and elaborate it at great length.

[08:18] *** szabgabx joined
[08:19] <mathw> of course

[08:20] <mathw> isn't that what it's for?

[08:20] <diakopter> ____________________

[08:21] <diakopter> perlesque ftw

[08:21] <diakopter> sleep&

[08:26] *** sundar_ joined
[08:28] <masak> sundar_: hi!

[08:28] *** sundar_ is now known as sundar

[08:29] <sundar> hi masak! 

[08:29] *** payload1 left
[08:31] <masak> sundar: how goes the p6 exploration?

[08:36] <sundar> masak: started a program, only to realize I didn't even know the proper way to write loops. :) So started reading S04. Also searching for some digestible presentations (I like learning via presentations), though most seem to be outdated.

[08:37] <masak> sundar: http://jnthn.net/articles.shtml

[08:37] <masak> rakudo: for 1..10 -> $i { say 'number ', $i }

[08:37] <p6eval> rakudo c99eeb: OUTPUT«number 1␤number 2␤number 3␤number 4␤number 5␤number 6␤number 7␤number 8␤number 9␤number 10␤»

[08:38] <masak> rakudo: my $i = 1000; while $i >= 500 { say $i -= 100 }

[08:38] <p6eval> rakudo c99eeb: OUTPUT«900␤800␤700␤600␤500␤400␤»

[08:38] <sundar> wow! thanks a lot! is that linked anywhwere from perlfoundation.org? 

[08:38] <masak> rakudo: my $i = 1000; loop { say $i -= 100 }

[08:38] <p6eval> rakudo c99eeb:

[08:38] <p6eval> ..OUTPUT«900␤800␤700␤600␤500␤400␤300␤200␤100␤0␤-100␤-200␤-300␤-400␤-500␤-600␤-700␤-800␤-900␤-1000␤-1100␤-1200␤-1300␤-1400␤-1500␤-1600␤-1700␤-1800␤-1900␤-2000␤-2100␤-2200␤-2300␤-2400␤-2500␤-2600␤-2700␤-2800␤-2900␤-3000␤-3100␤-3200␤-3300␤-3400␤-3500␤-3600␤-3700␤-3800␤-3900␤-4000␤-4100␤-4200␤-…

[08:39] <masak> sundar: good question. most of our links nowadays are from perl6.org

[08:39] <masak> but I doubt it's even there.

[08:39] <masak> also, http://perlgeek.de/blog-en/perl-5-to-6/

[08:42] <masak> rakudo: my $i = 5; repeat { say $i } while $i--

[08:42] <p6eval> rakudo c99eeb: OUTPUT«5␤4␤3␤2␤1␤0␤»

[08:44] *** envi^home joined
[08:47] <sundar> masak: I've read through part of the perlgeek tutorial, but got several small doubts.. Felt the need for some searchable reference. Didn't have much luck with the Google search on Synopses.. 

[08:48] <masak> the best cure for doubts is a recent executable and a lot of one-liners :)

[08:48] <masak> also helps to discuss things here on-channel.

[08:48] <masak> er, sorry, I mean on_channel, of course :P

[08:49] *** agentzh joined
[08:50] <sundar> let's-go-the-lispy-way.. :)

[08:51] <masak> to be fair, I did reflect on the underscores being ported over from CPAN's DateTime, and how they didn't really befit a module in Perl 6 core...

[08:53] <sundar> masak: you had a feeling hyphens were the way to go in Perl 6 then itself? 

[08:54] <masak> I have an ongoing feeling that it's not my call. :)

[08:55] <masak> I personally use hyphens quite a lot in my code, but when I'm writing spec I have a slightly different hat on.

[08:57] *** xinming left
[08:58] <sundar> masak: how can you do that? as a developer, you're supposed to feel your conventions are the One True Way. ;)

[08:58] <masak> :)

[08:59] <masak> well, of course they are. the problem is that there are so many One True Ways...

[09:01] *** cognominal joined
[09:02] <sundar> masak: ah, you're mindful of the other True Ways. It must be a good hat that you have. :) 

[09:03] <masak> sundar: I try to read other people's code sometimes. what bugs me is not when people have conventions differing from mine, but when people have no conventions.

[09:05] *** dalek joined
[09:05] *** yjh left
[09:07] <sundar> masak: I understand.. if it compiles and sort of does what it's supposed to, it's good code for many. :) the "code is for people to read" SICP quote should be pasted on every programmer's desk. 

[09:07] <moritz_> good morning

[09:07] <masak> moritz_: \o

[09:07] <sundar> moritz_: good morning (though it's afternoon here)

[09:10] <sundar> moritz_: I remember you too have an inside-out rakudo-inside-parrot setup. Does the current rakudo build fine for you? 

[09:10] *** Su-Shee left
[09:11] <moritz_> sundar: I don't

[09:11] <moritz_> I did talk about it though :-)

[09:11] *** snarkyboojum left
[09:12] <masak> sundar: I see the "if it works, it's good code" mentality a lot at work. basically, those of us who care about how the code actually *looks* are perceived as very picky in comparison. :)

[09:14] <sundar> masak: yes.. people hated it when their code came to me for review.. they'd think having incomprehensible code is a 'trivial problem' and shouldn't delay a commit. :)

[09:15] <masak> exactly.

[09:16] <masak> might be there's some connection here to TDD too.

[09:17] <masak> when you can look at a diff and say, 'yup, this is a very small piece of code, and all it does is make that test over there pass', things feel kinda good.

[09:18] <sundar> moritz_: :( now I'll probably never know if I screwed up something or found some weird bug!

[09:18] <masak> oh, and it's four minutes after your last such commit, and three minutes before the next one :)

[09:18] <masak> sundar: I have Rakudo inside Parrot.

[09:19] *** snarkyboojum joined
[09:19] <masak> I'll build now and see if it works.

[09:20] <sundar> masak: TDD is one of those things that are good when applied properly, but are hard to consistently do that.. 

[09:20] <masak> yes, it's not for every kind of task.

[09:21] <masak> when you have something like a input/output filter, it's pretty much ideal, though.

[09:21] <masak> and a lot of things are that. a compiler is that.

[09:22] * moritz_ finds that Date modules are very well suited too

[09:22] <masak> moritz_++

[09:22] <masak> moritz_: how's it going?

[09:22] <moritz_> masak: didn't get past the constructor tests last night, went off to play some board games with friends

[09:23] <masak> what board games?

[09:24] <sundar> masak: people can (and will) still abuse it in such cases too, and special case things more than they're meant to.. :) 

[09:24] <masak> I always special case things if I can get away with it. :)

[09:24] <moritz_> masak: http://www.catan.com/catan-games/in-space/starfarers.html this one (thought the German original)

[09:25] <masak> nice. I know Catan.

[09:25] <masak> not the in-space version, though.

[09:25] <moritz_> it was the first time for me too

[09:25] * masak .oO( or is that 'in_space'? :P )

[09:25] <moritz_> btw Catan was invented about 20km away from where I live :-)

[09:26] <masak> ooh

[09:27] *** am0c joined
[09:28] * sundar thinks parents visiting bachelor rooms unexpectedly are heartless

[09:29] <sundar> I've got to go now (and clean up things), masak, could you tell how the build goes later? 

[09:29] <masak> seems fine so far.

[09:29] <masak> it's doing gen/core.pm now.

[09:31] <sundar> it fails for me at "/usr/local/bin/parrot  perl6.pbc --target=pir --output=Test.pir Test.pm" with "Method 'postcircumfix:<[ ]>' not found for invocant of class 'Undef'"

[09:31] <moritz_> sundar: did you reconfigure before building?

[09:31] <masak> oh, ok.

[09:32] <sundar> moritz_: no, should I? Why? 

[09:32] <masak> I recognize that error from some of my cheese masterporting.

[09:32] <moritz_> sundar: if you did a 'git pull', chances are that the makefile changed

[09:32] <moritz_> then you need to run Configure.pl again

[09:36] <sundar> moritz_: ah, when I did a configure on rakudo, it said the parrot revision is r45191, though I updated it to the needed 45386 before make-ing. perhaps I need to reconfigure parrot too? 

[09:36] <masak> sundar: builds here.

[09:36] <moritz_> sundar: yes

[09:36] *** cls_bsd left
[09:38] <moritz_> masak: I think you had a very interesting link to date calc algorithms back in the days... do you happen to still know it?

[09:39] <masak> might have been mberends++' interesting link.

[09:39] <masak> http://www.tondering.dk/claus/calendar.html

[09:39] <sundar> masak: ok, thanks... I'm trying here now. 

[09:40] <masak> or perhaps http://www.merlyn.demon.co.uk/daycount.htm

[09:40] <masak> moritz_: both of those are from the Pod of the alpha Temporal.

[09:40] <masak> mberends++ # always good Pod

[09:40] <masak> walk &

[09:40] *** masak left
[09:55] *** ive joined
[09:55] <sundar> how do I exit a perl6 REPL? 

[09:56] <sundar> exit does nothing, quit makes it "Confused".. 

[09:56] *** ive left
[09:56] <snarkyboojum> ctrl-c :)

[09:56] <moritz_> Ctrl+D

[09:57] <sundar> Ok, is supporting exit or quit in the plan? 

[09:57] <sundar> It seems quit is recognized as something special, given it didn't say "Could not find sub &quit" like it does for other random words... 

[09:59] <sundar> anything that starts with 'q' makes it confused instead of getting treated as a sub call... 

[10:00] <moritz_> ah

[10:00] <moritz_> quote parsing fail

[10:00] <moritz_> rakudo: qfoo

[10:00] <p6eval> rakudo c99eeb: OUTPUT«Confused at line 11, near "qfoo"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[10:00] <moritz_> rakudo: afoo

[10:00] <p6eval> rakudo c99eeb: OUTPUT«Could not find sub &afoo␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[10:00] <moritz_> that's a bug

[10:00] * moritz_ submits

[10:00] <moritz_> hm

[10:00] <moritz_> std: qfoo

[10:00] <p6eval> std 30362: OUTPUT«===SORRY!===␤Undeclared routine:␤      'qfoo' used at line 1␤Check failed␤FAILED 00:01 108m␤»

[10:01] <sundar> \o/ I finally found a genuine bug! :) 

[10:01] <moritz_> sundar++

[10:03] <sundar> moritz_: thanks.. :) also: any of "exit", "e", or "q" returns to the prompt without doing anything or invoking an error.. 

[10:04] <moritz_> rakudo: exit; say "foo"

[10:04] <p6eval> rakudo c99eeb:  ( no output )

[10:04] <moritz_> but I remember there's a ticket for this one

[10:04] <moritz_> rakudo: say e

[10:04] <p6eval> rakudo c99eeb: OUTPUT«2.71828182845905␤»

[10:04] <moritz_> that's fine

[10:04] <moritz_> rakudo: say q

[10:04] <p6eval> rakudo c99eeb: OUTPUT«Confused at line 11, near "say q"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[10:04] <moritz_> rakudo: q

[10:04] <p6eval> rakudo c99eeb: OUTPUT«Confused at line 11, near "q"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[10:05] <sundar> oh, e is an inbuilt constant? without use-ing any scientific or math module? is that a good thing? 

[10:07] *** M_o_C joined
[10:08] <moritz_> for some it is, for others it's not

[10:10] <sorear> e is in the setting

[10:11] <sorear> so it doesn't cause many problems if you don't use it

[10:11] <sorear> the setting is treated as an outer lexical scope, so if you define your own e (or any other predefined name), it'll just shadow the existing one, no problems

[10:11] <sorear> who invented the setting/circumlude system?

[10:12] <sorear> they need a ++

[10:12] <moritz_> TimToady, I think :-)

[10:12] <sundar> "e = 4" invokes a "Cannot assign to readonly value" error though... 

[10:12] <moritz_> sundar: and that's a good thing :-)

[10:13] <sorear> sundar: x = 2 is not how you define values in Perl6

[10:14] <sorear> rakudo: height = 66

[10:14] <p6eval> rakudo c99eeb: OUTPUT«Could not find sub &height␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[10:14] <sundar> ah, dang! even after so many years of Perl I do this.. sorry.. :) 

[10:14] <sorear> rakudo: constant e = 101; say e

[10:14] <p6eval> rakudo c99eeb: OUTPUT«Could not find sub &constant␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[10:14] <sorear> rakudo: my constant e = 101; say e

[10:14] <p6eval> rakudo c99eeb: OUTPUT«Malformed my at line 11, near "constant e"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[10:15] <sorear> apparently I don't remember the correct syntax either

[10:16] *** M_o_C left
[10:18] *** xinming joined
[10:22] *** |newbie| joined
[10:22] *** |newbie| is now known as jaffa4

[10:24] <jaffa4> !seen diakopter

[10:24] <moritz_> alpha: constant e = 101; say e

[10:24] <p6eval> alpha 30e0ed: OUTPUT«invoke() not implemented in class 'Integer'␤in Main (file <unknown>, line <unknown>)␤»

[10:24] *** cls_bsd joined
[10:24] <moritz_> sorear: constant is just NYI in rakudo master

[10:32] <sorear> ah

[10:32] <sorear> what about alpha?

[10:32] <sorear> is it broken there too?

[10:32] <jaffa4> !whatis alpha

[10:32] <moritz_> alpha: constant $x = 5; say $x

[10:32] <p6eval> alpha 30e0ed: OUTPUT«5␤»

[10:32] <moritz_> alpha: constant $x = 5; $x = 7;

[10:32] <p6eval> alpha 30e0ed: OUTPUT«Cannot assign to readonly variable.␤in Main (file <unknown>, line <unknown>)␤»

[10:32] <moritz_> alpha: constant a = 5; say a

[10:32] <p6eval> alpha 30e0ed: OUTPUT«5␤»

[10:32] <jaffa4> hi

[10:33] <jaffa4> what is alpha?

[10:33] <moritz_> sorear: in alpha it only conflicted with predefined routines

[10:33] <sorear> jaffa4: alpha is 2010/02 rakudo

[10:33] <sorear> er, /01

[10:33] <sorear> in /02 we rewrote rakudo to take advantage of new features in the compiler kit, like grammars

[10:33] <moritz_> rakudo: say 5 div 2

[10:33] <p6eval> rakudo c99eeb: OUTPUT«2␤»

[10:34] <sorear> there has been a certain amount of regression

[10:34] <jaffa4> rakudo : g:/f/;

[10:34] <jaffa4> rakudo:  g:/f/;

[10:34] <p6eval> rakudo c99eeb: OUTPUT«Confused at line 11, near "g:/f/;"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[10:35] <sorear> Does g:/f/; mean anything?

[10:35] <moritz_> std: g:/f/;

[10:35] <p6eval> std 30362: OUTPUT«===SORRY!===␤Confused at /tmp/Nsxjnenl7e line 1:␤------> g:⏏/f/;␤    expecting any of:␤   coloncircumfix␤   signature␤Undeclared routine:␤      'g' used at line 1␤Parse failed␤FAILED 00:01 110m␤»

[10:35] <jaffa4> no

[10:35] <jaffa4> I do not know now

[10:35] <jaffa4> rakudo: m:g/erer/

[10:35] <p6eval> rakudo c99eeb: OUTPUT«Confused at line 11, near "m:g/erer/"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[10:36] <jaffa4> std: m:g/erer/

[10:36] <p6eval> std 30362: OUTPUT«ok 00:01 108m␤»

[10:53] <moritz_> rakudo: my $x = rx { 1 2 3 }

[10:53] <p6eval> rakudo c99eeb: OUTPUT«Unable to parse blockoid, couldn't find final '}' at line 11␤current instr.: 'perl6;Regex;Cursor;FAILGOAL' pc 1664 (ext/nqp-rx/src/stage0/Regex-s0.pir:907)␤»

[10:53] <moritz_> std: my $x = rx { 1 2 3 }

[10:54] <p6eval> std 30362: OUTPUT«ok 00:01 110m␤»

[10:54] <moritz_> rakudo: rx { }

[10:54] <p6eval> rakudo c99eeb: OUTPUT«Could not find sub &rx␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[10:55] <moritz_> rakudo: my $x = rx{ 1 2 3 }

[10:55] <p6eval> rakudo c99eeb: OUTPUT«Unable to parse postcircumfix:sym<{ }>, couldn't find final '}' at line 11␤current instr.: 'perl6;Regex;Cursor;FAILGOAL' pc 1664 (ext/nqp-rx/src/stage0/Regex-s0.pir:907)␤»

[10:55] *** M_o_C joined
[11:00] * colomon broke infix:<==> on his local copy of Rakudo.  :(

[11:01] * moritz_ hands colomon and non-broken infix:<==> from the cool branch

[11:02] <colomon> how is cool coming? 

[11:02] <moritz_> ready for review/merge

[11:02] <colomon> sweet!

[11:02] <colomon> \o/

[11:04] <moritz_> something's wrong with multi methods called new() in master

[11:05] <colomon> moritz_: I understand Tuesday is going to be the day to bug jnthn++.  ;)

[11:06] <colomon> rakudo: say Bool ~~ Real

[11:06] <p6eval> rakudo c99eeb: OUTPUT«1␤»

[11:06] *** wknight8111 joined
[11:08] <colomon> Not sure how Bool got to be Real.  (Even though it might well be in the spec that way.)

[11:08] <moritz_> rakudo: say Int ~~ Real

[11:08] <p6eval> rakudo c99eeb: OUTPUT«1␤»

[11:08] <moritz_> that's how it got that way :-)

[11:09] <colomon> I know Bool is Int in theory; I don't see how it is in practice, however.

[11:09] <colomon> boolproto = p6meta.'new_class'('Bool', 'parent'=>'parrot;Boolean Any', 'does_role'=>abstraction)

[11:09] <colomon> no Int in there.

[11:09] <moritz_> afaict Bool is an evil hack in master :-)

[11:09] <moritz_> rakudo: say Bool ~~ Real

[11:09] <p6eval> rakudo c99eeb: OUTPUT«1␤»

[11:10] <sorear> what, we aren't going to use #t and #f?

[11:10] <moritz_> #w, #t, #f? :-)

[11:10] <colomon> afk for a minute or two...

[11:10] <moritz_> http://github.com/moritz/Date btw

[11:10] <moritz_> still in early stages

[11:10] <moritz_> the interesting stuff is all NYI

[11:15] <snarkyboojum> moritz_++, looks cool :)

[11:16] <snarkyboojum> I like how self-documenting well written test suites are

[11:16] <moritz_> rakudo: say 55257 % 7

[11:16] <p6eval> rakudo c99eeb: OUTPUT«6␤»

[11:17] <moritz_> rakudo: say (55257 + 3) % 7

[11:17] <p6eval> rakudo c99eeb: OUTPUT«2␤»

[11:17] <snarkyboojum> is this a Date::Simple-ish p6 port?

[11:17] <moritz_> yes

[11:17] <snarkyboojum> ah

[11:17] <moritz_> very much inspired by Date::Simple - I even stole most of their test suite :-)

[11:17] * snarkyboojum reads the comment for the repo ;)

[11:18] <snarkyboojum> very nifty :)

[11:18] <moritz_> (and wrote an email to ask them if they grant me permission to redistribute the test under AL2)

[11:18] <snarkyboojum> awesome

[11:24] <moritz_> implemented day of week :-)

[11:37] <colomon> rakudo: my $a = Bool::True; say $a.Num

[11:37] <p6eval> rakudo c99eeb: OUTPUT«Method 'Num' not found for invocant of class 'Bool'␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[11:37] *** agentzh left
[11:37] * colomon starts to hate Bool

[11:39] <moritz_> rakudo: say 3 >> 2

[11:39] *** dual joined
[11:39] <p6eval> rakudo c99eeb: OUTPUT«Unsupported use of >> to do right shift; in Perl 6 please use +> or ~> at line 11, near "2"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[11:40] *** payload joined
[11:43] <sundar> What is ~> supposed to do? Is it NYI? 

[11:44] <moritz_> it's supposed to be bit shift on a string

[11:44] <moritz_> rakudo: say '!a' ~> 1

[11:44] <p6eval> rakudo c99eeb: OUTPUT«Confused at line 11, near "say '!a' ~"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[11:44] <colomon> whoops.

[11:44] <dalek> rakudo: 9406f55 | (Solomon Foster)++ | src/core/ (3 files):

[11:44] <dalek> rakudo: Define Real versions of ceiling, floor, truncate, and round.  Plus infix:<+>, infix:</>, and infix:<==>.  Tweak Any versions, Real versions.

[11:44] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/9406f55c8e28b9528a82668d540100b9ed3d2aba

[11:44] <colomon> just pushed by accident, and it will break things.  sigh

[11:45] *** payload left
[11:45] *** payload joined
[11:45] <colomon> okay, pushed a patch for the known problem....

[11:46] <moritz_> in case of doubt, git revert :-)

[11:48] *** pmurias joined
[11:48] <colomon> well, it's Sunday morning.  hopefully I can spectest and fix any problems before they actually bother someone.

[11:48] <pmurias> ruoso: hi

[11:48] <colomon> *any remaining problems

[11:49] <pmurias> if i want to reduce the time mildew's test suit takes what are the options?

[11:50] <dalek> rakudo: ae2e81b | (Solomon Foster)++ | src/core/Bool.pm:

[11:50] <dalek> rakudo: Add Bool.Bridge, because Bool somehow manages to be an Int (and do Real) without having Int's methods.

[11:50] <dalek> rakudo: review: http://github.com/rakudo/rakudo/commit/ae2e81b286a025472f557c80a6dc9db2bfb2d025

[11:51] *** fridim left
[12:04] <sundar> How do I say "for x to y in steps of z {do this}"? 

[12:05] <moritz_> for $x, *+$z ... $y {  do this }

[12:05] <colomon> moritz_++

[12:06] <sorear> rakudo: for 1, 3 .. 21 { .say}

[12:06] <p6eval> rakudo c99eeb: OUTPUT«1␤3␤4␤5␤6␤7␤8␤9␤10␤11␤12␤13␤14␤15␤16␤17␤18␤19␤20␤21␤»

[12:06] <sorear> rakudo: for 1, 3, 9 .. 81 { .say}

[12:06] <p6eval> rakudo c99eeb: OUTPUT«1␤3␤9␤10␤11␤12␤13␤14␤15␤16␤17␤18␤19␤20␤21␤22␤23␤24␤25␤26␤27␤28␤29␤30␤31␤32␤33␤34␤35␤36␤37␤38␤39␤40␤41␤42␤43␤44␤45␤46␤47␤48␤49␤50␤51␤52␤53␤54␤55␤56␤57␤58␤59␤60␤61␤62␤63␤64␤65␤66␤67␤68␤69␤70␤71␤72␤73␤74␤75␤76␤77␤78␤79␤80␤81␤»

[12:06] <sorear> ok not quite fully working yet

[12:06] <sundar> sorear: pattern detection? :) 

[12:06] <sorear> sundar: it's specced to autodetect arithmetic and geometric series

[12:07] <colomon> fully working, you left out a .

[12:07] <colomon> rakudo: for 1, 3, 9 ... 81 { .say

[12:07] <sorear> rakudo: for 1, 3, 9 ... 81 { .say}

[12:07] <p6eval> rakudo c99eeb: OUTPUT«Unable to parse blockoid, couldn't find final '}' at line 11␤current instr.: 'perl6;Regex;Cursor;FAILGOAL' pc 1664 (ext/nqp-rx/src/stage0/Regex-s0.pir:907)␤»

[12:07] <p6eval> rakudo c99eeb: OUTPUT«1␤3␤9␤27␤81␤»

[12:07] <colomon> (okay, not really fully working, but you haven't found the fail cases yet.)

[12:08] <sundar> wow! That is cool.

[12:09] <colomon> rakudo: for 1, *+2 ... 21{ .say }

[12:09] <p6eval> rakudo c99eeb: OUTPUT«Missing block at line 11, near ""␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[12:09] <sorear> rakudo: ( 1, 1, { $^a + $^b} ... ).batch(20).say

[12:09] <p6eval> rakudo c99eeb: OUTPUT«Confused at line 11, near "( 1, 1, { "␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[12:09] <colomon> rakudo: for 1, *+2 ... 21 { .say }

[12:09] <p6eval> rakudo c99eeb: OUTPUT«1␤3␤5␤7␤9␤11␤13␤15␤17␤19␤21␤»

[12:10] <sorear> rakudo: ( 1, 1, { $^a + $^b } ... * ).batch(20).say

[12:10] <p6eval> rakudo c99eeb: OUTPUT«11235813213455891442333776109871597258441816765␤»

[12:10] <colomon> rakduo: for 1, 1, *+* ... 100 { .say }

[12:10] <sorear> rakudo: ( 1, 1, { $^a + $^b } ... * ).batch(20).join(", ").say

[12:10] <p6eval> rakudo c99eeb: OUTPUT«1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765␤»

[12:11] *** M_o_C left
[12:12] <colomon> rakudo: for 1, 1, *+* ... 100 { .say }

[12:12] <p6eval> rakudo c99eeb: OUTPUT«1␤1␤2␤3␤5␤8␤13␤21␤34␤55␤89␤»

[12:12] <wknight8111> nice

[12:13] <colomon> yeah, it works better when I spell rakudo correctly.  :)

[12:14] <sundar> rakudo: for 0, 1,  *+* ... 100 { .say }

[12:14] <p6eval> rakudo c99eeb: OUTPUT«1␤1␤1␤2␤3␤5␤8␤13␤21␤34␤55␤89␤»

[12:14] *** ruoso left
[12:14] <colomon> spectest passed!  \o/

[12:14] <sundar> Why did it change the first 0 to 1? 

[12:15] <colomon> good question.

[12:16] <snarkyboojum> rakudo: .say for 1, 1, *+* ... 100

[12:16] <p6eval> rakudo c99eeb: OUTPUT«1␤1␤2␤3␤5␤8␤13␤21␤34␤55␤89␤»

[12:17] <colomon> where's masakbot when you need him?

[12:18] <sorear> rakudo: ( 2, -> *@sofar { (grep { $_ !% none(@sofar) } (@sofar[*-1] ... *))[0] } ... * ).batch(20).join(", ").say

[12:18] <p6eval> rakudo ae2e81: OUTPUT«Unable to parse blockoid, couldn't find final '}' at line 11␤current instr.: 'perl6;Regex;Cursor;FAILGOAL' pc 1664 (ext/nqp-rx/src/stage0/Regex-s0.pir:907)␤»

[12:20] <sorear> rakudo: ( 2, -> *@sofar { (@sofar[*-1] ... *).first({ $^a !% none(@sofar) }) } ... * ).batch(20).join(", ").say

[12:21] <p6eval> rakudo ae2e81:  ( no output )

[12:21] <sorear> not lazy enough?

[12:21] <sundar> rakudo: for -1, 3,  *+* ... 100 { .say }

[12:21] <wknight8111> what is that line supposed to do?

[12:21] <p6eval> rakudo ae2e81: OUTPUT«3␤3␤2␤5␤7␤12␤19␤31␤50␤81␤»

[12:21] <sorear> wknight8111: sieve

[12:22] <sorear> generates an infinite list of prime numbers

[12:23] <moritz_> rakudo: sub f(*@sofar) { my $last = @sofar.pop; $last !%none(@sofar) }; say ~(2, &f ... *).batch(5)

[12:23] <p6eval> rakudo ae2e81: OUTPUT«2 0 0 0 0␤»

[12:25] <sundar> what all can possibly appear in place of *+* in the for statement above? none of -, * or +| seem to work. is it a special case that works with + alone? 

[12:26] <snarkyboojum> any infix op I would have thought

[12:29] <sundar> rakudo: for 3, 2, *-* ... 0 { .say }

[12:29] <p6eval> rakudo ae2e81: OUTPUT«Method 'Num' not found for invocant of class 'Block'␤current instr.: 'perl6;Mu;' pc -1 ((unknown file):-1)␤»

[12:31] <wknight8111> jnthn: ping

[12:32] <sundar> snarkyboojum: Is this a bug then? 

[12:34] <snarkyboojum> sundar: no idea :)

[12:36] <sundar> snarkyboojum: :) What should I do now? leave a message to masak or someone, or submit a bug, or leave it in these IRC logs hoping someone would dig it out? 

[12:37] <snarkyboojum> well masak++ seems to diligently trawl through the backlogs and submit bugs he finds, but I'm not sure it's polite to rely on that :)

[12:38] <moritz_> it's a known bug

[12:38] <snarkyboojum> there you go :)

[12:38] <moritz_> Whatever currying is not yet implemented in master, except for some common special cases

[12:43] *** isBEKaml joined
[12:45] <colomon> what moritz_++ said. 

[12:46] <colomon> to be slightly more precise, whatever currying is supposed to be a general thing which works with all operators.  

[12:46] *** nihiliad joined
[12:46] <colomon> we don't have that yet, but I implemented some of the common cases as special cases.

[12:46] <colomon> I think right now we have *+*, *+n, and *-n

[12:47] *** Kovensky joined
[13:10] *** nsh joined
[13:17] *** iblechbot left
[13:25] *** sundar left
[13:39] *** am0c left
[13:50] *** _jaldhar joined
[13:57] *** Guest94973 left
[14:01] *** pmurias left
[14:25] *** pmurias joined
[14:26] *** _Dot_ joined
[14:27] <_Dot_> hey there. what big improvements gonna have perl6?

[14:27] <moritz_> lots :-)

[14:27] <moritz_> vastly improved regexes and grammars

[14:27] <_Dot_> in that case, what are the most important?

[14:27] <_Dot_> oh, kk

[14:27] <moritz_> a language designed for extensibility

[14:28] <_Dot_> no improvement in oop? :(

[14:28] <moritz_> sure

[14:28] <_Dot_> oh, kk

[14:28] <moritz_> a very solid default object system, and the ability to change the object system via a meta object protocal

[14:28] <_Dot_> cause current oop isn't the most friendly

[14:28] <moritz_> *protocol

[14:29] <_Dot_> i see

[14:29] <moritz_> rakudo: class Hello { has $.name; method greet { say "Hello, $.name } }; Hello.new(:name<_Dot_>).greet

[14:29] <p6eval> rakudo ae2e81: OUTPUT«Unable to parse blockoid, couldn't find final '}' at line 11␤current instr.: 'perl6;Regex;Cursor;FAILGOAL' pc 1664 (ext/nqp-rx/src/stage0/Regex-s0.pir:907)␤»

[14:29] <moritz_> rakudo: class Hello { has $.name; method greet { say "Hello, $.name" } }; Hello.new(:name<_Dot_>).greet

[14:29] <p6eval> rakudo ae2e81: OUTPUT«Hello, _Dot_␤»

[14:29] <moritz_> better :-)

[14:30] <_Dot_> well, it resembles more common oop languages :>

[14:30] *** sundar joined
[14:32] <moritz_> yes

[14:32] <moritz_> Perl 5 was too bare bones

[14:32] <moritz_> unless you use some nice modules for OO, like Moose

[14:33] <_Dot_> perl6 will be released soon?

[14:33] *** M_o_C joined
[14:34] <moritz_> yes, christmas :-)

[14:34] <moritz_> there will be a big release in May or June

[14:34] <moritz_> usable, but not yet finished

[14:36] <_Dot_> and cpan compatibility?

[14:37] <moritz_> well, sorear is working on bridge between Perl 5 and parrot

[14:37] <_Dot_> i see

[14:37] <moritz_> so there's a chance of using Perl 5 modules from Perl 6

[14:38] <_Dot_> i hope perl popularity raises with perl 6

[14:38] * moritz_ hopes so too

[14:39] <moritz_> _Dot_: are you interested in helping us with Perl 6?

[14:39] *** ruoso joined
[14:39] <_Dot_> i'm not that good at programming :\

[14:39] <_Dot_> just starting

[14:39] <moritz_> well, there are other things that need doing

[14:39] <_Dot_> like what?

[14:40] <moritz_> like keeping websites up to date, organizing conferences or hackathons, try to organize funding...

[14:40] <_Dot_> there's any site with drafts, just to see what kind of "jobs" you have

[14:40] *** molaf left
[14:40] <_Dot_> ?

[14:41] <moritz_> not really :(

[14:41] <moritz_> I've been long planning to write such a web site, but other things always seemed to be either more urgent or more fun

[14:42] <_Dot_> i would like to help you hacking perl, but i lack practice on programming :\

[14:42] *** sorear left
[14:43] <_Dot_> btw, what sites are those to keep up to date?

[14:43] *** sorear joined
[14:44] <moritz_> <http://perl6.org/>, <http://www.perlfoundation.org/perl6/index.cgi?perl_6>, <http://dev.perl.org/perl6/> just to name the three most important ones

[14:44] <jaffa4> !seen diakopter

[14:44] *** ruoso left
[14:48] <_Dot_> with who i have to talk to have more info?

[14:49] <moritz_> _Dot_: more info about what?

[14:49] <_Dot_> about the sites updating

[14:49] *** dual left
[14:50] * moritz_ raises hand

[14:50] <_Dot_> xD

[14:50] <_Dot_> i can't give you an answer right now, but i plan to spare time for the sake of open source o.O/

[14:50] <moritz_> that's cool

[14:51] <moritz_> feel free to raise your voide here at any time

[14:51] <_Dot_> kk

[14:51] <_Dot_> also that would be nice at my curriculum :P

[14:51] <_Dot_> *in

[14:54] <_Dot_> hmmm, maintenance of those sites doesn't look a time consumer

[14:54] <moritz_> right

[14:55] <moritz_> you just have to follow the Perl 6 blogs, and see what changes inthe Perl 6 world

[14:55] <moritz_> and then from time to time you need to go over the sites, and see if anything is worth updating

[14:56] <_Dot_> i see... that looks interesting

[14:58] <_Dot_> in terms of developing itself, there is space for a noob eager for learning more? :P

[15:01] <moritz_> there is

[15:01] <moritz_> problem is, there is not very much introductory material for learning Perl 6

[15:02] <moritz_> for example there's a book being written at <http://github.com/perl6/book/>, but it targets people with some programming experience in other languages

[15:03] <_Dot_> i know some perl 5, c/c++, java and a bit of python

[15:03] <moritz_> well, that's a good start

[15:03] <moritz_> if you know perl 5, this might help you too: http://perlgeek.de/en/article/5-to-6

[15:04] <moritz_> (disclaimer: I wrote it)

[15:04] <_Dot_> what development i would be performing?

[15:04] *** pmurias left
[15:05] <moritz_> for example modules

[15:05] <moritz_> or built-in functions

[15:05] <_Dot_> sounds cool

[15:05] <_Dot_> well, actually i know a lot of perl 5

[15:05] <jaffa4> built-in functions?

[15:05] <jaffa4> Is some of them not implemented?

[15:06] <jaffa4> is=are

[15:06] <moritz_> yes

[15:06] <_Dot_> i read Learning Perl, Beginning Perl and currently i'm reading Extreme Perl

[15:06] <jaffa4> which ones?

[15:08] <isBEKaml> moritz_: This christmas? I remember Larry quoted something like "Perl6 will be released on Christmas. I won't tell the year..." or something like it. xD

[15:08] <_Dot_> xD

[15:08] <moritz_> isBEKaml: that's still true :-)

[15:09] <[particle]> and once perl 6 is released, every day will be christmas.

[15:09] <[particle]> audreyt++

[15:09] <moritz_> jaffa4: for example Str.sameaccent

[15:09] <isBEKaml> [particle]: true that. :)

[15:09] <_Dot_> so, Perl 6 will not be released 12/25/2010? xD

[15:09] <moritz_> _Dot_: nobody really knows

[15:11] <isBEKaml> _Dot_: This is like any other opensource project. It'll be released when it's good. =)

[15:11] <_Dot_> open source ftw oO/  no more m$ or crapple

[15:12] <sundar> isBEKaml: small correction, "It'll be released when we decide it's 'good enough'" :) 

[15:12] <isBEKaml> :)

[15:13] <_Dot_> heh

[15:15] *** sundar left
[15:17] *** iblechbot joined
[15:28] <_Dot_> if you want a laboral contribution from me, just ask :)

[15:31] <jaffa4> moritz_:  I wonder what does that do?

[15:33] <moritz_> jaffa4: don't wonder, look at the specs

[15:34] <moritz_> rakudo: run('uptime')

[15:34] <p6eval> rakudo ae2e81: OUTPUT« 15:19:07 up 179 days, 54 min,  0 users,  load average: 0.00, 0.19, 0.21␤»

[15:35] <moritz_> jnthn: uhm, lexical setting broke Safe.pm - any idea what I could do about it?

[15:37] *** justatheory joined
[15:41] <jaffa4> moritz_: reading it, well it is not clear yet. Pity that there are no examples.

[15:43] *** isBEKaml left
[15:45] <lue> oh hai!

[15:45] *** dual joined
[15:48] <lue> weird, I was under the impression s/// worked...

[15:53] <lue> rakudo: $_ = "oh hi there"; s/"hi"/"hai"/; say $_

[15:53] <p6eval> rakudo ae2e81: OUTPUT«oh hi there␤»

[15:53] *** Trashlord joined
[15:57] * lue thinks of a Perl6 implementation written in DNA...

[15:58] * diakopter doesn't

[15:58] <_Dot_> a gnewsense living thing? o.o''

[15:58] <lue> or maybe a DNA interpreter was written in P6, long ago...

[15:58] <lue> (it would explain why P6 comes naturally to most people)

[15:59] *** _Dot_ left
[16:00] *** p6eval left
[16:00] <lue> rakudo: say "I'm still here"

[16:01] <jaffa4> sprixel: say "hello"

[16:02] <jaffa4> sprixel: say "hello";

[16:02] <lue> .oO(we gather here today, for the loss of a valuable bot. Some say, p6eval was great, better than any bot made by Google, and he...)

[16:05] <diakopter> well

[16:05] <diakopter> hm

[16:06] <lue> .oO( aw, you can see little dents in the carpet where he used to stand :( )

[16:06] *** masak joined
[16:06] *** masak left
[16:06] <lue> now masak just bounced off the wall! /o\

[16:08] *** payload left
[16:09] *** TiMBuS joined
[16:13] *** p6eval joined
[16:14] <diakopter> rakudo: say "I'm still here"

[16:14] <p6eval> rakudo ae2e81: OUTPUT«I'm still here␤»

[16:16] <lue> :D

[16:16] <lue> #61980 is interesting. Is it working for me because I have ICU, or because it just works?

[16:17] *** mikehh left
[16:18] *** jferrero joined
[16:19] <lue> afk

[16:40] *** PacoLinux joined
[16:57] *** M_o_C left
[17:02] *** molaf joined
[17:07] *** masak joined
[17:07] <masak> lambda, grettingscamels.

[17:07] <masak> s/ett/eet/

[17:08] <moritz_> \o/

[17:08] * masak learned a new wavie from _Dot_: o.O/

[17:08] <masak> sort of astonished and greeting-y at the same time. :)

[17:09] <moritz_> btw I've mostly implemented the Date module

[17:10] <moritz_> apart from overloading operators it's 90% done

[17:10] <moritz_> and the operators are also LHF, once a certain rakudobug is fixed

[17:11] *** szabgabx left
[17:11] <masak> moritz_++

[17:13] <masak> moritz_: oh btw, you asked about the status of the Web.pm grant the other day. it is this: we've done 19 weeks out of a planned 20. we're unable to contact our grants manager. next step I think is to contact someone in TPF.

[17:13] *** gfldex left
[17:13] <lue> rakudo: $_ = "y oh hi"; s/'hi'/'hai'/; say $_

[17:14] <p6eval> rakudo ae2e81: OUTPUT«y oh hi␤»

[17:15] *** opx^away joined
[17:16] <lue> I was truly under the impression s/// worked (am I doing something wrong?)

[17:16] <masak> lue: it works.

[17:16] <masak> lue: just not in sink context.

[17:16] <masak> rakudo: my $a = 'y oh hi'; $a ~~ s/hi/hai/; say $a

[17:17] <p6eval> rakudo ae2e81: OUTPUT«y oh hai␤»

[17:17] <lue> ( and here I though #61980 was ready to close :) )

[17:17] <lue> rakudo: my $a = 'y oh hi'; $a ~~ tr/hi/hai/; say $a

[17:17] <p6eval> rakudo ae2e81: OUTPUT«Confused at line 11, near "$a ~~ tr/h"␤current instr.: 'perl6;HLL;Grammar;panic' pc 500 (ext/nqp-rx/src/stage0/HLL-s0.pir:328)␤»

[17:17] <lue> *cough* wrong bug number

[17:18] <lue> #62064

[17:19] *** envi^home left
[17:21] *** ruoso joined
[17:22] * masak laughs about cpedia's take on Perl 6 and related topics

[17:22] *** payload joined
[17:22] * lue looks up cpedia

[17:22] *** _jaldhar left
[17:23] <masak> it's on cpedia.com

[17:23] <masak> I'd describe it as a Wikipedia written by blind robots. it's made by automated aggregation of various web content.

[17:24] *** payload left
[17:25] <lue> I'm remembering my idea of placing the spec on wikibooks, but an actual programming book would be more useful :)

[17:25] <masak> yes. please don't fork the spec to wikibooks :P

[17:25] <masak> also, there's also a Perl 6 book on wikibooks.

[17:25] <masak> s:2nd/also/already/

[17:26] <lue> (any of you Phoenix Wright fans, cpedia has a very interesting introduction to the article on Damon Gant)

[17:28] <lue> masak: do you happen to know of a pronoun describing a hash-like structure? (for %_ of course)

[17:30] <lue> (I have currently resorted to either finding such a pronoun in another language or making a new word)

[17:39] *** _jaldhar joined
[17:40] *** Tene left
[17:43] *** pmurias joined
[17:49] *** meppl joined
[17:49] *** mberends joined
[17:49] * lue thinks of having two #rs meetings in one day, for those who can't make 19:00 UTC. Not sure how that would work, though.

[17:51] <masak> well, the original purpose of a meeting is to collect everyone's thoughts, so...

[17:51] *** Tene joined
[17:51] *** Tene left
[17:51] *** Tene joined
[17:52] <lue> I would love to contribute, but Tuesday at 11/12 my time (depending on DST) is when I'm in class :(

[17:53] <lue> And I don't want to suggest taking #rs away from people who are only around at that time of day.

[17:53] *** colomon left
[17:54] <lue> [ isn't i18n fun? :) ]

[17:54] * masak .oO( of all people, I'd expect lue to have very little problems with things colliding in time )

[17:56] <lue> when you have a 50 minute battery on your laptop...

[17:57] <lue> even if I brought my laptop with me, it wouldn't last the whole class :/

[17:58] <lue> .oO(it, them... doi. hets? tren? grrr)

[18:03] *** M_o_C joined
[18:03] <lue> .oO(I could buy a new laptop battery, or a bunch of Li-Ion batteries and perform an exercise in soldering...)

[18:05] <lue> _iff_ i were to have a blog added to the aggregator, would it end up showing every post I make, or automagically just the P6 ones?

[18:08] <masak> which aggregator?

[18:09] <masak> Planet Perl 6?

[18:09] <lue> yes (whichever is the one people are always referring to)

[18:10] <masak> people are sometimes referring to Iron Man as well.

[18:10] <masak> but ISTR that Planet Perl 6 mirrors everything.

[18:13] <lue> .oO[ $_'s annoying, how we can name @_ (@_ being various symbols in P6), except for %_ :( ]

[18:13] *** Kovensky left
[18:14] *** Kovensky joined
[18:14] *** sundar joined
[18:15] *** sundar left
[18:15] *** sundar joined
[18:18] *** colomon joined
[18:20] <lue> afk ( while considering what to call %_ :) )

[18:28] <masak> rakudo: class A { method foo {} }; say A.can("foo").WHAT

[18:28] <p6eval> rakudo ae2e81: OUTPUT«Method 'WHAT' not found for invocant of class 'P6Invocation'␤current instr.: '_block14' pc 29 (EVAL_1:0)␤»

[18:28] <masak> o.O

[18:28] * masak submits rakudobug

[18:30] <slavik> mason is awesome :) it should get ported to perl6 :D

[18:30] <diakopter> ooo; rakudo has a P6Invocation class; interesting

[18:33] *** colomon left
[18:36] <masak> what's it doing with my .can call? I thought the point of .can was *not* to have to do an invocation to find out if a method exists? :)

[18:37] *** mberends left
[18:38] <diakopter> rakudo: class A { }; say A.can("foo").WHAT

[18:38] <p6eval> rakudo ae2e81: OUTPUT«Parcel()␤»

[18:40] <diakopter> rakudo: class A { }; say A.can("foo").^methods

[18:40] <p6eval> rakudo ae2e81:  ( no output )

[18:40] <diakopter> timeout I guess

[18:46] *** mberends joined
[18:47] *** iblechbot left
[18:48] <masak> rakudo: say '!'; class A { }; say A.can("foo").^methods

[18:48] <p6eval> rakudo ae2e81: OUTPUT«!␤»

[18:48] <masak> seems so.

[18:52] <plobsing> who do I poke about getting a patch reviewed and applied?

[18:52] <moritz_> plobsing: probably jnthn at the moment

[18:52] <moritz_> more so if it's the one for bind.c

[18:53] <plobsing> what hours is he usually on?

[18:54] <moritz_> typically 12H UTC until midnight UTC or so

[18:55] <moritz_> but he's on a trip to Russia (or will be very soon), so things coudl be quite different

[18:58] *** M_o_C left
[19:01] <moritz_> plobsing: anyway, if you block on that patch for your parrot branch, I can apply it - it seems reasonably safe to me, although I don't fully understand the code

[19:04] <moritz_> testing it now

[19:05] *** colomon joined
[19:06] *** sundar left
[19:11] *** nihiliad left
[19:11] *** nihiliad joined
[19:11] *** rgrau joined
[19:12] *** colomon left
[19:14] *** colomon joined
[19:17] *** mikehh joined
[19:19] *** colomon left
[19:20] *** colomon joined
[19:26] *** frzntoz joined
[19:28] *** pmurias left
[19:42] *** molaf left
[19:42] *** molaf joined
[19:45] *** molaf_ joined
[19:45] * moritz_ has blogged: http://perlgeek.de/blog-en/perl-6/date-module.html

[19:47] *** molaf left
[19:47] <masak> moritz_++

[19:56] <masak> in a bikeshedding-heavy zone like the one we're in now, it's always nice to see actual, working code.

[19:57] * diakopter helped build an actual bikeshed, 13 years ago.

[19:58] <masak> what color was it?

[20:00] <diakopter> wood

[20:00] <masak> sounds like a Solomonian solution to the whole issue.

[20:01] <diakopter> yeah. those who want to see it a certain color can just wear tinted glasses

[20:02] <masak> :)

[20:03] * masak considers mentioning p6l... decides not to...

[20:04] <colomon> moritz_++

[20:06] *** masak left
[20:13] *** sundar_ joined
[20:14] <lue> hello! (I just met Arthur "Two Sheds" Jackson. must be getting serious.)

[20:18] *** sundar_ left
[20:18] *** sundar_ joined
[20:19] *** sundar_ left
[20:19] *** sundar joined
[20:32] *** sundar left
[20:36] *** molaf_ left
[20:46] *** smash_ joined
[20:46] <smash_> hello everyone

[20:47] *** meppl left
[21:05] *** patrickas joined
[21:11] *** patrickas left
[21:24] *** rjorge joined
[21:53] *** PacoLinux left
[21:54] *** tri1 joined
[21:59] *** jferrero left
[22:00] *** tri1 left
[22:04] *** snarkyboojum left
[22:05] *** snarkyboojum joined
[22:06] <lue> hello?

[22:06] <sorear> we're all in #parrot

[22:06] <lue> on MAGnet ?

[22:06] <lue> (coming)

[22:10] * lue wishes he knew what was happening at #parrot (the backlogs might help :P)

[22:11] <plobsing> lue: quarterly planning/review meeting

[22:12] <lue> ah ( would explain the draft in here :) )

[22:14] *** mberends left
[22:18] <colomon> I was playing with my boy and watching the masters.

[22:18] <colomon> *Masters

[22:23] <lue> rakudo: my $a = "hi"; say qqx/$a/

[22:23] <p6eval> rakudo ae2e81: OUTPUT«operation not permitted in safe mode␤current instr.: '&die' pc 17293 (src/builtins/Junction.pir:404)␤»

[22:23] <lue> ō.o

[22:25] <lue> I get the feeling it's not just a quoting construct, but there's only one mention in the spec, and it's not descriptive...

[22:25] <colomon> rakudo: my $a = "ls"; say qqx/$a/

[22:25] <p6eval> rakudo ae2e81: OUTPUT«operation not permitted in safe mode␤current instr.: '&die' pc 17293 (src/builtins/Junction.pir:404)␤»

[22:26] * arnsholt is happy

[22:26] <lue> > ./perl6 -e "my $a = 'ls'; say qqx/$a/"

[22:26] <lue> Malformed my at line 1, near "= 'ls'; sa"

[22:27] <arnsholt> Starting to write AST classes for Parrotlog ^^

[22:27] <lue> \o/

[22:27] <lue> now why do I get a malformed my?

[22:28] <lue> rakudo: run("ls")

[22:28] <p6eval> rakudo ae2e81: OUTPUT«build␤Configure.pl␤CREDITS␤docs␤dynext␤lib␤LICENSE␤Makefile␤parrot␤parrot_install␤perl6␤perl6.c␤perl6_group.c␤perl6_group.h␤perl6_group.o␤perl6.o␤perl6.pbc␤perl6.pir␤README␤src␤t␤Test.pir␤Test.pm␤tools␤»

[22:31] <snarkyboojum> lue: try ./perl6 -e 'my $a = "ls"; say qqx/$a/'

[22:31] <snarkyboojum> but yeah, not sure :)

[22:32] <arnsholt> rakudo: my $a = 'ls'; say qqx/$a/

[22:32] <p6eval> rakudo ae2e81: OUTPUT«operation not permitted in safe mode␤current instr.: '&die' pc 17293 (src/builtins/Junction.pir:404)␤»

[22:36] <lue> snarkyboojum++

[22:36] <lue> are there tests for qqx?

[22:37] *** IllvilJa left
[22:41] <lue> I have to know; what does LHF mean?

[22:42] <snarkyboojum> lhf = low hanging fruit?

[22:44] <lue> my guess has always been left hand [something]

[22:44] <lue> rakudo: my Int $x = +'2'

[22:44] <p6eval> rakudo ae2e81: OUTPUT«Type check failed for assignment␤current instr.: '&die' pc 17293 (src/builtins/Junction.pir:404)␤»

[22:44] *** patrickas joined
[22:47] <arnsholt> Something, somewhere, in my grammar is getting passed too many arguments. Is there a good way to figure out where it's happening?

[22:47] <arnsholt> 'Cause "too many positional arguments: 3 passed, 2 expected" is a bit diffuse

[22:48] <lue> what is it trying to do?

[22:49] <arnsholt> Parse something, seeing how it's a grammar =)

[22:50] <m6locks> add some debugging say-lines to see what arguments are passed

[22:50] <lue> well, what is it trying to parse :)

[22:51] <lue> C<say>ing things is the simplest form of debugging (but it works quite well)

[22:51] <arnsholt> m6locks: I suppose. But doing that to all the rules in my grammar is not really a very tractable option

[22:51] <m6locks> i hear ya

[22:52] <m6locks> i'm kinda in the same situation as you are 

[22:52] <arnsholt> Seeing how there are probably about 200 of them

[22:52] <lue> oh, so it's throughout the entire grammar? hm

[22:52] <arnsholt> lue: I don't know -where- in the grammar

[22:52] <arnsholt> That's the problem

[22:52] <m6locks> lue: how does that C<say> work?

[22:53] *** smash_ left
[22:54] <lue> that's just how you seperate a command in the documentation. C<> for commands, L<> for links, and so on.

[22:58] *** wknight81 joined
[23:01] *** wknight8111 left
[23:02] <m6locks> oh ok

[23:03] <lue> I use it when I don't want to risk ambiguity

[23:03] <snarkyboojum> C<> for code :)

[23:05] * lue thinks of writing syntax highlight files for P6, beginning with Kate, then emacs

[23:07] <sorear> lue: don't, we already have a syntax highlighter for P6

[23:07] <sorear> TimToady wrote it

[23:09] <lue> where?

[23:09] *** orafu left
[23:09] <sorear> src/perl6/std_hilite

[23:09] *** orafu joined
[23:11] <lue> I don't see how one could use that in kate. I can see it as a "highlight-'n'-output", but I meant as in while you're developing

[23:12] <lue> ( unless I completely miss the point of std_hilite :) )

[23:13] <sorear> you should port std_hilite to work with kate

[23:13] <sorear> the point of std_hilite is that it's std

[23:13] <sorear> it parses Perl, correctly

[23:17] <lue> hm, porting seems difficult :D . (Kate only needs an XML file, so I'm not too sure how to port it other than writing it on my own like planned)

[23:17] <lue> the only thing of use (to me) is the css file then.

[23:18] <lue> I can't use it because STD is not in the hilite's path, but it looks like it would produce an intersting image... are there any examples?

[23:35] *** kfo joined
[23:36] <lue> .oO(defining a list of operators in the kate syntax file could be a pain)

[23:36] *** Kovensky left
[23:37] *** patrickas left
[23:42] *** Kovensky joined
[23:42] *** rv2733 left
[23:47] *** rjorge left
[23:53] *** supernovus joined
[23:55] *** supernovus left
