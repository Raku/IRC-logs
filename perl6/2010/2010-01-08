[00:01] *** hugues23 left
[00:06] <Hurley> hi

[00:06] <sjohnson> hi Hurley 

[00:07] <Hurley> if i compile the perl6 developer version. Can i use perl5 modules?

[00:08] <sjohnson> i dont believe the use v5 translator is ready yet

[00:12] <frettled> That's right, it's not a top priority.

[00:13] <frettled> But as I understand it, it _is_ a priority, it's just that there are Perl 6 specific issues that are considered more important to fix first.

[00:13] <frettled> Strange that they want to finish fiddling with the actual language before adding legacy sugar, eh?  ;)

[00:19] <sjohnson> frettled: i suppose Perl 5 is something that'll be hard to say goodbye too :)

[00:19] <sjohnson> to*

[00:21] * sjohnson hugs perl 5.10 branch

[00:41] <dalek> book: 8fa9944 | chromatic++ | src/roles.pod:

[00:41] <dalek> book: Minor edits to the Roles chapter; some author notes.

[00:41] <dalek> book: review: http://github.com/perl6/book/commit/8fa994464b73131f008fa28fd2040cbd62cbca17

[00:58] *** douglashunter_ is now known as dugg

[01:15] *** xomas_ left
[01:17] *** Chillance left
[01:21] *** Exodist left
[01:24] *** cotto_work left
[01:25] *** cotto_work joined
[01:26] *** cdarroch left
[01:27] *** Exodist joined
[01:35] *** douglashunter left
[01:35] *** colomon___ left
[01:53] *** Hurley left
[01:56] *** Hurley joined
[01:58] *** nbrown joined
[01:58] *** colomon joined
[02:04] *** ShaneC left
[02:06] *** ShaneC joined
[02:17] *** ShaneC left
[02:17] *** xomas_ joined
[02:20] *** ShaneC joined
[02:21] *** dugg left
[02:29] *** ShaneC left
[02:33] *** ShaneC joined
[02:44] *** cognominal left
[02:44] *** cognominal joined
[02:54] *** stephenlb left
[03:12] *** agentzh joined
[03:19] *** justatheory left
[03:21] *** eternaleye joined
[03:27] *** cognominal left
[03:28] *** cognominal joined
[03:38] *** fridim_ left
[03:39] *** simcop2387_ joined
[03:40] *** ShaneC left
[03:48] *** simcop23- joined
[03:50] *** eternaleye left
[03:50] *** simcop2387 left
[03:50] *** simcop23- is now known as simcop2387

[03:54] *** Hurley left
[03:56] *** Baggiokwok joined
[04:01] *** simcop2387_ left
[04:07] *** eternaleye joined
[04:22] *** am0c joined
[04:27] *** justatheory_ joined
[04:47] *** patspam1 joined
[04:49] *** patspam left
[04:56] *** astinus left
[04:56] *** astinus joined
[04:57] *** patspam joined
[04:57] *** patspam1 left
[04:59] *** eternaleye left
[05:13] *** eternaleye joined
[05:39] *** ashizawa left
[05:45] *** meppl joined
[05:48] *** xinming_ joined
[05:49] <mberends> commute &

[05:55] *** mberends left
[06:04] *** xinming left
[06:08] <pugs_svn> r29475 | diakopter++ | [sprixel] better memoization & a bugfix. 

[06:15] <pugs_svn> r29476 | diakopter++ | [sprixel] cleanup old adhoc tests; add empty() and star() (greedy only for now) combinators 

[06:17] <saschi> g'morning!! ^^

[06:19] <diakopter> saschi: hi

[06:19] <saschi> hey there! :)

[06:22] <dalek> book: d0103a2 | duff++ | src/builtins.pod:

[06:22] <dalek> book: [builtins] minor typos

[06:22] <dalek> book: review: http://github.com/perl6/book/commit/d0103a290547fd6b9be52a2592aeec2711b0996e

[06:22] <dalek> book: 6ef4d99 | duff++ | src/preface.pod:

[06:22] <dalek> book: [preface] suggested sentence change by eternaleye++

[06:22] <dalek> book: review: http://github.com/perl6/book/commit/6ef4d998c08bf8db09c20ebb29f6f3cc6985811e

[06:22] <dalek> book: c8151a8 | duff++ | src/grammars.pod:

[06:23] <dalek> book: [grammars] add =begin/=end tags around code

[06:23] <dalek> book: review: http://github.com/perl6/book/commit/c8151a87bb889ab2fe09416c9f633e015fe90437

[06:30] <sjohnson> hi

[06:40] <pugs_svn> r29477 | diakopter++ | [sprixel] implement character range() (all unicode codepoints supported, but the unicode range macros/definitions aren't yet implemented).  will probably steal them from xregexp. 

[06:46] *** justatheory_ left
[06:54] <pugs_svn> r29478 | diakopter++ | [sprixel] begin to port the support for named pattern references/resolution (i.e. grammar declaration/construction) 

[07:07] *** mberends joined
[07:08] *** eternaleye left
[07:11] <mberends> ooh, Sprixel is on the boil again :-)

[07:11] *** uniejo joined
[07:12] *** Su-Shee joined
[07:12] *** eternaleye joined
[07:13] *** justatheory joined
[07:14] *** justatheory left
[07:15] <Su-Shee> good morning

[07:15] <mberends> gm Su-Shee, do you have any truffles for us today?

[07:17] <Su-Shee> mberends: no, but I can give you my todo list which involved mopping kitchen and bathroom. ;)

[07:19] * yath hands a roomba to Su-Shee 

[07:19] <Su-Shee> doesn't the thing just sweep and not mop? ;)

[07:20] <yath> yes, but there's a, hm

[07:20] <yath> there's something that mops, too

[07:20] * Su-Shee needs a cleaning lady. 

[07:20] <Su-Shee> plain and simple.

[07:20] <yath> and expensive

[07:21] <Su-Shee> not really. 

[07:21] <Su-Shee> the time I have to work to pay her is much less then the time I waste doing household on my own.

[07:21] <yath> hehe

[07:22] *** sjohnson sets mode: +oo Su-Shee mberends

[07:22] <Su-Shee> no, really. simple calculation. two technians, two technician salaries > cleaning lady once a week ;)

[07:23] *** patspam left
[07:28] <sjohnson> Su-Shee: do you do much Javascript stuff?

[07:28] *** xinming_ left
[07:29] *** xinming joined
[07:29] <sjohnson> was just thinking about how you also got that good book about the Good and Bad parts

[07:29] <sjohnson> i bought it as I have to use JS at work :|

[07:34] <pugs_svn> r29479 | diakopter++ | [sprixel] implement computeRefs and the first portion of Grammar.compile 

[07:35] *** kaare joined
[07:36] *** kaare is now known as Guest27641

[07:39] *** cognominal left
[07:43] <saschi> hey Su-Shee, sjohnson, yath, mberends ^^

[07:45] <Su-Shee> sjohnson: yes, I do. And I like it. 

[07:47] <sjohnson> Su-Shee: did you find a good book that kind of gives a good tutorial of JS other than the "Definitive Guide"?

[07:48] <sjohnson> i found it to be a bit lacking, even though it's a huge book

[07:48] <sjohnson> saschi: hi

[07:48] <mberends> hi saschi!

[07:48] <Su-Shee> sjohnson: how do you mean exactly? there's javascript, the language and "handling DOM with javascript"

[07:49] <Su-Shee> (and programming firefox, but that's really specific.)

[07:50] <sjohnson> Su-Shee: something like a... camel book, or something close to it

[07:51] <sjohnson> i keep hearing about jQuery maybe i should try it out

[07:51] <diakopter> sjohnson: http://www.amazon.com/dp/047022780X/

[07:51] <Su-Shee> well tutorial-wise, you usally go by subject you're interested in and use something from the web; js is really extremely well discussed. as an overview, a short reference should do. and there's a bunch of cookbook style books (I think, ORA has one)

[07:52] <Su-Shee> sjohnson: that's a framework doing web widget, ajax and such for you.

[07:52] *** rachelBROWN joined
[07:52] <diakopter> sjohnson: the one I linked above is written by the author I respect the most when it comes to JavaScript.

[07:53] <sjohnson> thanks u 2 will look into these

[07:53] <Su-Shee> hasn't john resig written some book?

[07:53] <diakopter> http://www.amazon.com/dp/193398869X/

[07:54] <diakopter> http://www.amazon.com/dp/1590597273/

[07:54] <diakopter> afk&

[07:55] <Su-Shee> sjohnson: ^^^ there. that's the guy who has written jquery and implemented processing in js. 

[07:56] <sjohnson> thanks

[07:56] <sjohnson> !

[07:58] *** cognominal joined
[07:58] *** cognominal left
[07:59] *** cognominal joined
[08:00] *** hcchien left
[08:01] *** eternaleye left
[08:03] *** bryan[c1] joined
[08:14] *** eternaleye joined
[08:14] *** eternaleye left
[08:15] *** eternaleye joined
[08:16] *** elkng joined
[08:18] *** payload left
[08:19] *** elkng left
[08:33] *** bcat joined
[08:36] *** soupdragon joined
[08:37] *** iblechbot joined
[08:37] *** bbkr joined
[08:42] *** partisan joined
[08:45] *** Baggiokwok left
[08:51] *** bryan[c1] left
[08:59] *** JohnDoe365 joined
[08:59] *** JohnDoe365 left
[09:04] <saschi> i hope in webgl ^-^

[09:08] *** bbkr left
[09:20] *** dakkar joined
[09:28] *** ihrd left
[09:30] *** bryan[c1] joined
[09:30] *** bryan[c1] is now known as Mantis

[09:39] *** bcat left
[09:40] *** ashizawa joined
[09:49] *** cognominal left
[10:01] *** cognominal joined
[10:02] *** Mantis left
[10:11] *** payload joined
[10:22] *** agentzh left
[10:26] <moritz_> good localtime() fellow #perl6 inhabitants

[10:26] <szbalint> hai2u

[10:38] *** lmc left
[10:38] *** Mantis joined
[10:38] *** lmc joined
[10:39] <frettled> rakudo: say localtime();

[10:39] <p6eval> rakudo 3867ff: Could not find non-existent sub localtime␤in Main (file src/gen_setting.pm, line 324)␤

[10:39] <frettled> :(

[10:39] <frettled> ;)

[10:44] *** lmc left
[10:53] <moritz_> rakudo: say time

[10:53] <p6eval> rakudo 3867ff: 1262947337.07978␤

[11:12] *** Mantis left
[11:36] *** patspam joined
[11:36] *** patspam left
[11:38] *** rhuxton joined
[11:44] *** cognominal left
[11:52] *** soupdragon left
[11:53] <lisppaste3> rhuxton pasted "Sorting a hash and splitting key/value at the same time" at http://paste.lisp.org/display/93141

[11:53] <rhuxton> Hi all - just spent my first hour playing with rakudo and it feels like Christmas already :-)  Is there a "perlish" way to sort a hash and split key/value at the same time?

[11:54] *** SmokeMachine joined
[11:54] <moritz_> rakudo: say (a => 3).kv.perl

[11:54] <p6eval> rakudo 3867ff: ["a", 3]␤

[11:55] <moritz_> rhuxton: how do you want to sort?

[11:55] <moritz_> rakudo: my %h = (c => 1, b => 2, c => 3); say %h.sort».kv

[11:55] <p6eval> rakudo 3867ff:  ( no output )

[11:56] <moritz_> don't know why p6eval doesn't like that

[11:56] <moritz_> rebuilding now, I think it should work

[11:56] <moritz_> $ perl6 -e 'my %h = (c => 1, b => 2, a => 3); say %h.sort».kv.perl' 

[11:56] <moritz_> [["a", 3], ["b", 2], ["c", 1]]

[11:57] <moritz_> $ perl6 -e 'my %h = (c => 1, b => 2, a => 3); say %h.sort.map({ @(.kv)}).perl'

[11:57] <moritz_> ["a", 3, "b", 2, "c", 1]

[11:57] <hejki> erm

[11:57] <hejki> my rakudo does the first one right

[11:57] <moritz_> might be a problem with the evalbot :(

[11:57] <hejki> oh

[11:57] <hejki> :>

[11:58] <hejki> btw.. >> > » :)

[11:58] *** payload left
[11:58] <moritz_> anyway, that sorts the pairs in the hash, and then turns the pairs into lists

[12:01] <rhuxton> Thanks moritz_ - I'm getting a "StopIteration" from rakudo after the first two pairs, but that's probably a buglet in the precise version of rakudo I grabbed. Off to read up about ">>" now :-)

[12:01] <moritz_> @array>>.method just calls method on every array element

[12:02] <moritz_> StopIteration is the less-than-awesome error message you often get when you iterate with two variables over an odd number of of elements

[12:02] <moritz_> rakudo: for 1, 2, 3 -> $a, $b { say "$a|$b" }

[12:02] <p6eval> rakudo 3867ff: 1|2␤StopIteration␤in Main (file <unknown>, line <unknown>)␤

[12:05] <rhuxton> Ah, then it's a bug in the precise version of rakudo I grabbed then (since the other ways of hash-sorting work fine). I'll do a "git pull" (if that's the equivalent of svn update) and try again later.

[12:06] <hejki> rakudo: for 1..4 -> $a, $b { if 1 % ($a|$b) { say "foo" } }

[12:06] <p6eval> rakudo 3867ff: foo␤foo␤

[12:06] <hejki> dang.. typo :P

[12:06] <hejki> rakudo: for 1..4 -> $a, $b { if 2 % ($a|$b) { say "foo" } }

[12:06] <p6eval> rakudo 3867ff: foo␤

[12:06] <hejki> najs

[12:06] <hejki> really najs :)

[12:08] *** pmurias joined
[12:09] <pmurias> diakopter: hi

[12:10] <rhuxton> [cue light-bulb going on sound-effect] Ah, the kv method is on Pair, as well as Hash.

[12:10] <moritz_> right

[12:10] <moritz_> there's even a .kv method on List

[12:10] <moritz_> rakudo: say <a b c>.kv.perl

[12:10] <p6eval> rakudo 3867ff: [0, "a", 1, "b", 2, "c"]␤

[12:11] <moritz_> arrays have keys also

[12:11] <moritz_> usually called index

[12:11] <rhuxton> OK, Next question: how do I find what methods Pair (or any other class) support? Happy enough using ack to rummage through source if necessary.

[12:11] <moritz_> ack is good :-)

[12:11] <moritz_> rakudo: say Pair.^methods».name.join(' ')

[12:11] <p6eval> rakudo 3867ff: perl ACCEPTS get_string Scalar fmt key value pairs kv atan ord acos :l eval chop tanh int atanh cosec :s chars roots uc reverse keys isa ucfirst tan log10 substr cos bytes pick fmt evalfile acosec join sinh asinh cosech trim asec chr acotanh floor sech asech rand truncate sort round

[12:11] <p6eval> ..rinde…

[12:12] <moritz_> rakudo: say Pair.^methods(:local)».name.join(' ')

[12:12] <p6eval> rakudo 3867ff: value pairs kv perl ACCEPTS get_string Scalar fmt key␤

[12:16] <rhuxton> Aha! Introspection. Good :) What's the caret mean there? I know of its use in regexps, closure-variable-thingummies and junctions.

[12:17] <moritz_> it means "call a method on the meta class"

[12:21] <rhuxton> Because "Pair" itself returns an instance of class Pair rather than an object representing the class, presumably.

[12:22] <moritz_> rhuxton: no, because introspection is handled by the meta class

[12:22] <moritz_> rakudo: say ~(a => 3).^methods(:local)».name

[12:22] <p6eval> rakudo 3867ff: get_string Scalar fmt key value pairs kv perl ACCEPTS␤

[12:22] <moritz_> that's with a Pair object, and it looks exactly the same

[12:24] <rhuxton> Hmm - time to restart the reading / playing cycle I think :-)

[12:24] <rhuxton> moritz_: thanks very much - most helpful.

[12:24] <moritz_> rhuxton: you're welcome. And feel free to continue asking

[12:26] *** ruoso joined
[12:34] *** payload joined
[12:46] *** iblechbot left
[12:50] *** mariano__ joined
[12:50] *** pmurias left
[12:53] <Su-Shee> if I role-d something into a class with a role and I inherit this class, do I get the roled in stuff with it or would I have to role in again?

[12:53] <moritz_> you get the composed methods an atributes

[12:54] <moritz_> composing a role is a lot like writint these methods and attributes in the class directly

[12:56] <Su-Shee> assume, I did a role somethere in class A, inherited it and now I'm including the same role in Class F (which already inherited everything) - are role methods and attributes overwritten? can they be overloaded?

[12:57] <Su-Shee> will I get some error like "Role XX already included" or something? 

[13:01] *** rodi joined
[13:03] <moritz_> the spec says something along the lines "a role may never conflict with itself"

[13:05] *** ignacio_ joined
[13:11] *** Baggiokwok joined
[13:12] *** Baggiokwok left
[13:14] <takadonet> morning all

[13:26] *** cognominal joined
[13:26] *** cognominal left
[13:27] *** cognominal joined
[13:34] *** fridim_ joined
[13:40] <mathw> heh

[13:40] <mathw> I just wrote some C++ code using the >> operator

[13:40] <mathw> keep thinking 'that's not right hyper syntax'

[13:42] <takadonet> hehe

[13:43] <mathw> almost wrote a hyper method call at one point

[13:45] <takadonet> I have not written any Perl 6 code in my Perl 5 yet....

[13:46] *** payload left
[13:46] <takadonet> Sometime I notice that a few places that a junction would be great right about now in my code

[13:47] <mathw> :)

[13:47] <mathw> I do that too

[13:47] <mathw> once you've used any() a couple of times in an if condition...

[13:52] *** payload joined
[13:55] *** pmurias joined
[14:08] <rodi> use Quantum::Superpositions # any() in Perl5, inspiration for any() in Perl6 IIRC.

[14:09] *** soupdragon joined
[14:09] <mathw> of course I could write myself an any() in C++

[14:10] *** elmex left
[14:13] *** elmex joined
[14:17] *** rhuxton left
[14:18] <PerlJam> rodi: you mean "use Perl6::Junctions" these days Q::S is old

[14:19] *** flip214 joined
[14:19] <flip214> Hello, short question again ...

[14:20] *** pmurias left
[14:21] <rodi> PerlJam++: mm, shiny :)  s/Junctions/Junction/ .

[14:21] <flip214> Is there a way to make a function signature that allows some parameter with a specified class (sub x(myClass obj))

[14:21] <flip214> which then accepts *only* this class, and not any derived?

[14:21] <flip214> But maybe that doesn't make sense ... or does it?

[14:22] <flip214> If an inherited class is passed as parameter, is it "dumbed down" to the lower-level class object before being passed?

[14:22] <flip214> I feel confused ...

[14:22] <mathw> standard OO polymorphism

[14:22] <mathw> it'll accept an instance of any derived type

[14:22] <mathw> you could use a where clause to do an exact check, I think

[14:22] <PerlJam> flip214: sub foo (my Thingy $x where { .isa(Thingy) })  { ... } 

[14:22] <mathw> but it should be very rare to need such a thing

[14:23] <mathw> as it's an indicator of a dodgy OO design

[14:23] <PerlJam> flip214: what mathw said.

[14:23] <flip214> thanks

[14:23] <flip214> perljam: but wouldn't that check the lower-level object already?

[14:23] *** colomon left
[14:24] <flip214> So that sub foo($x where { .isa(myClass) }) would work? Avoids the repetition, too.

[14:25] <PerlJam> yeah, that would work.

[14:26] <PerlJam> not sure about the order of the checks though; specifying the nominal type may avoid the constraint check entirely when you accidently pass some non-MyClass object.  But whatever ... that's probably a premature optimization  :)

[14:28] <PerlJam> Ha!  from #perl ...

[14:28] <PerlJam> < squeeky> perl6 actually exists. "cloud computing" is exactly what a cloud is. vapor.

[14:29] <flip214> Well, was just some thought. Thank you very much!

[14:29] *** flip214 left
[14:29] <PerlJam> Clearly we are making progress when people start saying "perl6 actually exists"  :)

[14:29] <mathw> yes

[14:29] <mathw> although without context it's impossible to tell if it was sarcastic

[14:29] *** Guest27641 left
[14:30] <mathw> I'm assuming it wasn't

[14:30] <PerlJam> It wasn't I don't think.  The text leading up to the statement had me all set to defend Perl 6 as not being vapor, but then he went in the unexpected direction to claim that it was cloud computing that was vapor

[14:30] *** colomon_ joined
[14:31] <takadonet> morning colomon

[14:31] <mathw> cool

[14:32] <mathw> For someone to say that in #perl who isn't one of us lot is definitely a step forward

[14:32] <soupdragon> one of us! one of us!

[14:32] *** rgrau_ joined
[14:33] *** payload left
[14:34] *** colomon_ left
[14:34] *** payload joined
[14:36] *** rodi left
[14:51] *** douglashunter joined
[14:51] *** douglashunter is now known as dwh

[14:51] *** dwh is now known as dugg

[14:57] *** payload left
[15:04] *** gbacon left
[15:07] *** soupdragon left
[15:08] *** soupdragon joined
[15:09] *** soupdragon left
[15:12] *** kaare_ joined
[15:12] *** payload joined
[15:12] *** mariano__ left
[15:13] *** rgrau_ left
[15:14] *** soupdragon joined
[15:16] *** soupdragon left
[15:21] *** mariano__ joined
[15:21] *** soupdragon joined
[15:33] *** payload left
[15:34] *** perlsyntax joined
[15:35] <perlsyntax> Does anyone know when perl 6 comeing out?

[15:36] *** jferrero joined
[15:36] <Gothmog_> They usually say it comes christmas.

[15:37] <perlsyntax> that long i thought it was this christms.

[15:37] <perlsyntax> thanks

[15:39] *** perlsyntax left
[15:39] *** iblechbot joined
[15:39] <PerlJam> blah

[15:39] *** Baggiokwok joined
[15:40] *** _jaldhar left
[15:40] *** cognominal left
[15:41] *** ash_ joined
[15:42] *** uniejo left
[15:45] *** Psyche^ joined
[15:45] *** Patterner left
[15:45] *** Psyche^ is now known as Patterner

[15:48] *** justatheory joined
[15:51] <pugs_svn> r29480 | masak++ | [S12-objects] various consistencifications 

[15:51] <pugs_svn> r29480 | 

[15:51] <pugs_svn> r29480 | - one case of 'enum type' which should be 'enumeration type'

[15:51] <pugs_svn> r29480 | - the C<.true> method is now called C<.so>, according to S32

[15:51] <pugs_svn> r29480 | - so is the function

[15:51] <pugs_svn> r29480 | - s/an an/an/

[15:51] <pugs_svn> r29480 | 

[15:51] <pugs_svn> r29480 | [S32] removed comment about musings about .true and .defined

[15:51] <pugs_svn> r29480 | 

[15:51] <pugs_svn> r29480 | The musings are actually addressed in some of the above corrected

[15:51] <pugs_svn> r29480 | paragraphs in S12.

[15:56] *** ignacio_ left
[16:00] *** payload joined
[16:01] *** ignacio_ joined
[16:10] *** ignacio_ left
[16:11] *** cognominal joined
[16:12] *** Levex joined
[16:15] *** Cyclops3590 joined
[16:21] *** hercynium joined
[16:21] *** Cyclops3590 left
[16:25] *** ignacio_ joined
[16:28] *** pmurias joined
[16:29] *** mberends left
[16:34] *** Baggiokwok left
[16:37] <TimToady> PerlJam: um, .isa is not going to an exact type check either, if that's what flip214 really wanted...

[16:37] *** Levex left
[16:38] <PerlJam> oh, I guess not.

[16:38] <PerlJam> that a was pre-caffienated PerlJam though.  He's crazy.

[16:42] <ash_> to do an exact match, you could check the object's WHAT

[16:43] <moritz_> right

[16:43] <moritz_> $obj.WHAT === ::Type

[16:44] <pugs_svn> r29481 | lwall++ | [S12] extra tweak to masak++'s tweak, now that "so" is less confusable as a value. 

[16:46] <TimToady> std: m:5x(42)//

[16:46] <p6eval> std 29480: ===SORRY!===␤Missing term at /tmp/uc8bkaITvF line 1 (EOF):␤------> m:5x(42)//⏏<EOL>␤    expecting any of:␤      prefix or term␤   standard stopper␤ term␤   terminator␤       whitespace␤FAILED 00:02 110m␤

[16:47] *** pmurias left
[16:48] *** pmurias joined
[16:53] <pmurias> TimToady: should things in STD_P5.pm hava a p5 prefix? like p5term?

[16:53] *** payload left
[16:57] <TimToady> pmurias: currently termish renames p5term to term; probably so that method EXPR doesn't get confused

[16:58] <TimToady> in general, it depends on how much we want to reuse the p6 code

[16:58] *** dakkar left
[16:59] <pmurias> TimToady: -e '1' doesn't work with STD_P5, is it expected?

[17:01] <TimToady> STD_P5 is only partially translated from a p6 parser to a p5 parser.  I wouldn't expect anything to work yet...

[17:09] *** colomon_ joined
[17:10] *** uniejo joined
[17:14] *** uniejo left
[17:14] *** uniejo joined
[17:17] <colomon_> takadonet: apologies for not returning your hello this morning.  I started to and then I got disconnected from the server and my software didn't want to reconnect.  And then I took a long nap because I am sick.

[17:17] *** IllvilJa left
[17:17] <takadonet> colomon_: np man

[17:17] <takadonet> was only mad for a few hours :P

[17:17] <colomon_> :p

[17:18] *** jackyf joined
[17:19] <diakopter> pmurias: hi

[17:20] <pmurias> diakopter: rehi

[17:20] <diakopter> what's up

[17:20] *** rodi joined
[17:21] <pmurias> diakopter: what would i need to make mildew-js use sprixel for rules?

[17:22] <diakopter> heh

[17:22] <Tene> I tried commenting on a post on blogs.perl.org

[17:22] <Tene> I got: Your comment submission failed for the following reasons: Text entered was wrong. Try again.

[17:22] <Tene> That's... great.

[17:23] <TimToady> MLTA

[17:23] <diakopter> captcha?

[17:23] <diakopter> pmurias: not much, probably; but *I* would have to do a lot (still) ;)

[17:23] <Tene> http://blogs.perl.org/users/ovid/2010/01/cool-things-in-perl-6.html -- I don't see a captcha...

[17:24] <moritz_> Tene: do you have javascript activated?

[17:24] <Tene> moritz_: yes.

[17:25] <diakopter> wow, that's utterly broken.

[17:25] <Tene> I was going to comment on not needing a closure, as 'where :f' is sufficient.

[17:25] <diakopter> I click "Sign in", and it loads a new page, but the back button is grayed out.

[17:26] <diakopter> and there's no "cancel" button/link on the sign-in page.

[17:26] <Tene> I just tried to comment anonymously.

[17:28] <takadonet> I love that the members of the community always want to post useful comments on anything that relates to Perl 6

[17:28] <PerlJam> Hmm. I wonder if subset Filename of Str where :f or die;  # works.   I would guess that it does not.

[17:28] <moritz_> being logged in it seems that I can comment

[17:28] <PerlJam> (or rather it "works" but doesn't do what I intend :)

[17:29] <Tene> where is :f documented anyway?

[17:29] <moritz_> in S32/IO somewhere, probably

[17:29] <moritz_> but it's outdated anyway

[17:29] *** uniejo_ joined
[17:30] <moritz_> it should .IO.f or where .IO ~~ :f or so

[17:30] * takadonet waiting for someone to post a comment...

[17:30] *** uniejo left
[17:30] <moritz_> rakudo: subset Filename of Str where :f; my Filename "/etc/password/";

[17:30] <p6eval> rakudo 3867ff: Malformed declaration at line 2, near "Filename \""␤in Main (file <unknown>, line <unknown>)␤

[17:30] <Tene> the ~~ :foo still seems a bit sketchy to me.  Is that Pair.ACCEPTS ?

[17:30] <TimToady> moritz_: did you ever see the comment on your Perl 6 in 2009 blogging?

[17:30] <moritz_> TimToady: yes

[17:31] <moritz_> Tene: it calls the 'foo' method on $_

[17:31] <Tene> moritz_: no, that's .foo, not :foo

[17:31] <Tene> yes?

[17:31] <moritz_> ... and does something with the return value

[17:32] <moritz_> XOR or so

[17:32] <moritz_> probably S03, smartmatch table

[17:32] <moritz_> $a ~~ :b($c)   is something like   $a.b() !xor $c

[17:34] *** cdarroch joined
[17:34] <ash_> PerlJam: I think someone on the mailing list was tlaking about Filename as a subset of Str like that, but they were using fail i think, not die 

[17:34] <PerlJam> ash_: that was me :)

[17:35] <ash_> oops, my bad

[17:35] <moritz_> rakudo: subset Filename of Str where :f; my Filename $x =  "/etc/password/";

[17:35] <p6eval> rakudo 3867ff:  ( no output )

[17:35] <moritz_> rakudo: subset Filename of Str where :f; my Filename $x =  "/etc/asdfasödf";

[17:36] <p6eval> rakudo 3867ff:  ( no output )

[17:36] <moritz_> so it doesn't seem to work

[17:36] * moritz_ aborts commenting

[17:37] <Tene> I've worried a little bit a few times about the length of the smartmatch table contradicting the stated goal of p6 to avoid memorizing arbitrary lists.

[17:37] <TimToady> the point is to put all the memorizing into one spot

[17:38] <PerlJam> and most of that table is "obvious"

[17:39] <PerlJam> the thing that it does is the thing you'd expect given the two sides of ~~

[17:39] <TimToady> and given that you don't expect symmetry, *cough*

[17:39] <PerlJam> well, that's part of the non-obvious :)

[17:40] <TimToady> and given that you don't expect lists to automatically any-fy themselves

[17:40] <Tene> Any ~~ Pair isn't quite obvious to me, I guess.  I'd expect to do method smartmatches with *.foo, not :foo

[17:40] <Tene> So I'm not quite convinced of the utility, but maybe I should think on it more.

[17:41] <TimToady> the :foo form is more easily negated, and arguably looks simpler in a junction

[17:41] * Tene nods.

[17:42] <TimToady> though a junction of closures oughta work, I suppose

[17:42] <Tene> Not a real objection at all, just thinking out loud.

[17:42] <TimToady> and p5 programmers are expecting a special form for filetests anyway

[17:43] <TimToady> it's easy to translate -f to :f in your head

[17:45] <Tene> :foo is :foo(1) or :foo(Bool::True) ?

[17:45] <PerlJam> yes  :)

[17:45] <Tene> :P

[17:45] <moritz_> True

[17:45] <moritz_> not 1

[17:45] *** ignacio_ left
[17:46] <moritz_> .oO( but not 1 is False, so that answer wasn't very helpful :-)

[17:46] <PerlJam> I'm probably going to write :foo(0) before I write :foo(False) though

[17:46] <PerlJam> (see? I just did it)

[17:46] <Tene> PerlJam: !:foo is standard for negated, iirc.

[17:47] <PerlJam> Tene: right.  I was just commenting on the :foo() form.

[17:48] *** pmurias left
[17:49] <TimToady> :!foo, not !:foo

[17:49] <TimToady> then there's :0foo

[17:50] <PerlJam> but that's :0fun

[17:50] <PerlJam> :)

[17:51] *** FCO joined
[17:51] <Tene> http://www.reddit.com/r/programming/comments/an337/cool_things_in_perl_6/c0ifk1y?context=1

[17:51] <TimToady> heh, the specs are still full of :by

[17:52] *** xinming_ joined
[17:53] <PerlJam> :fun  :nofun  ...  could we get some magic there?  (that'll probably be one of the grammar mods soon after people really start using Perl 6 if not)

[17:54] *** ignacio_ joined
[17:55] <TimToady> what's wrong with :!fun ?

[17:55] <diakopter> :frap

[17:55] <TimToady> and do you really want people to get confused by things like :none

[17:55] *** SmokeMachine left
[17:55] <TimToady> "don't go northeast?"  O_o

[17:55] <PerlJam> nothing at all, but someone always seems to introduce a "no" prefix to negate something

[17:56] <TimToady> someone is always wrong

[17:56] <TimToady> negation should not be inband with identifiers

[17:56] <PerlJam> inventory?

[17:57] <PerlJam> you have: no tea

[17:57] <PerlJam> It's all douglas adams' fault  :)

[17:57] <moritz_> should have used a Bag

[17:57] <TimToady> I'd rather have a Tea Set

[17:58] *** tylerni7 joined
[17:59] <TimToady> actually, at the moment I'd rather have a Hash

[17:59] <takadonet> need more people upvoting Tene comment on reddit!

[17:59] <diakopter> I was going to say, Tea Pot and Tea Hash seem redundant

[17:59] <TimToady> well, why didn't you?

[17:59] <diakopter> I guess we'll never know

[17:59] <huf> it's better if you blend the two, so no, not redundant

[18:00] <huf> but the tea bit is confusing me

[18:00] <cognominal> I am using the parrot/tools/dev/create_language.pl but want to use nqp instead of perl 6. I tweaked the generated Makefile but parrot does not want to compile the perl6 generated pir file :  /Users/stef/git/rakudo/parrot_install/bin/parrot -o psal.pbc src/Psal.pir

[18:00] <cognominal> error:imcc:syntax error, unexpected PREG, expecting '(' ('$P40')

[18:00] <cognominal> any idea what I am doing wrong

[18:00] <diakopter> probably something in what you're typing

[18:01] <moritz_> cognominal: uhm, I thought create_language.pl defaulted to NQP?

[18:01] <cognominal> moritz_, that's my point

[18:01] <moritz_> cognominal: so you want perl6 instead of nqp??

[18:01] <moritz_> s/'??'/?/ :-)

[18:02] <cognominal> but why a pir file generated by perl6 would not be acceptable to parrot?

[18:02] <moritz_> because rakudo needs some dynops

[18:02] <moritz_> that need to be loaded

[18:03] <cognominal> moritz_, hum, why that would explain a syntax error?

[18:03] *** lmc joined
[18:04] <Tene> cognominal: Parrot questions are more appropriate in #parrot on irc.perl.org

[18:04] <cognominal> I want perl6 because I can't remember the used subset. Also I am just refactoring code that worked before using the create_language tool chain

[18:04] *** rachelBROWN left
[18:05] <moritz_> cognominal: IMCC knows about operators. If it doesn't know about dynops => syntax error

[18:05] <Tene> cognominal: you need to make sure that rakudo is loaded before the generated PIR is parsed.

[18:05] <Tene> put "load_language 'perl6'" in a :immediate sub at the start of the file.

[18:06] <cognominal> thx, I will try it

[18:07] <cognominal> #perl6 and #haskell are probably both the most helpful channels on freenode :) 

[18:08] <cognominal> btw I am dabbling with some pir preprocessor  :)

[18:10] *** xinming left
[18:11] <diakopter> don't burn your navel into your retinas

[18:11] <diakopter> cognominal: sry; that wasn't directed at you

[18:12] <cognominal> is that a pun?  :)

[18:12] *** sirrobert joined
[18:12] <diakopter> a quip

[18:13] *** rachelBROWN joined
[18:15] * Su-Shee burns indian spices for dinner and reads snow catastrophy warnings. 

[18:15] <Su-Shee> good evening all.

[18:15] <takadonet> Su-Shee: evening

[18:18] <rodi> In S02, what should I infer about the inclusion of "Widget" on the list of Undefined types?

[18:18] *** stephenlb joined
[18:18] <moritz_> no idea

[18:19] <moritz_> probably "it was Cool at that time" SCNR :-)

[18:20] <rodi> LOL

[18:20] <rodi> Cool is on the list right before it, though :)

[18:28] <PerlJam> rodi: Just that you can get a typed but undefined value for any class in that manner I think

[18:29] <PerlJam> rodi: (no, there is no official Widget class  :)

[18:30] <cognominal> I asked TimToady :  <cognominal>	TimToady, btw, S02 mentions the class Widget twice without ever saying what it is

[18:30] <cognominal> his answer: 	widgets: http://www.perl.com/2003/07/16/graphics/slide72.jpg

[18:30] <Tene> That's such a useful answer.

[18:30] *** mj41 left
[18:30] <rodi> hahahahaha, thanks cognomial

[18:30] <PerlJam> escher++

[18:31] *** Chillance joined
[18:32] <cognominal> your master will answer clearly when you will have progressed in the path on enlightment. But then, you will need no master.

[18:35] <cognominal> http://www.perl.com/pub/a/2003/07/16/soto2003.html?page=7  # for more information...

[18:38] <cognominal> I realize that my pir preprocessor in perl6 is just that :  http://www.perl.com/2003/07/16/graphics/slide65.jpg

[18:39] <PerlJam> That's just the normal bootstrap picture. :)

[18:39] *** mj41 joined
[18:41] <PerlJam> people need to be reminded of this one today: http://www.perl.com/2003/07/16/graphics/slide61.jpg

[18:42] *** ShaneC joined
[18:45] <cognominal> "But what you really want to know about is the future state of Perl. That's nice. I don't know much about the future of Perl. Nobody does. That's part of the design of Perl 6. Since we're designing it to be a mutable language, it will probably mutate."

[18:45] <cognominal> Only change is for sure. Let's explain that to people who want a stable perl 6

[18:47] <rodi> I sure like the semantics of KeySet.

[18:48] <diakopter> tbf, that's a poor excuse. while *want*ing isn't a bad thing (demanding is), holding accountable to [poorly set/managed] expectations isn't always bad. just because one might want to adjust the expectations now doesn't mean they weren't mis-aligned in the past.

[18:48] <cognominal> tbf?

[18:48] <diakopter> to be frank

[18:49] <diakopter> "you are not allowed to have expectations. any expectations you may have had were misguided. nothing is certain. stop asking until we say it's okay"

[18:51] *** goksie joined
[18:51] <rodi> "the design process will be spiral, cooperative, and convergent. The rate of convergence is an emergent property, and cannot be forced, only encouraged."

[18:52] <cognominal> that's S01?

[18:52] <diakopter> those are very different messages

[18:54] *** goksie left
[18:58] <diakopter> "Only change is for sure. Let's explain that to people who want a stable perl 6" is caustic and communicates nothing but derision, futility, scorn, apathy, but most of all, _impunity_.

[19:00] <PerlJam> Hmm.

[19:01] <PerlJam> I think your projecting a tad much of yourself into those sentences.

[19:01] <PerlJam> s/your/you're/

[19:02] <diakopter> if that's true, it buttresses "it takes one to know one" :/

[19:03] <PerlJam> (or, put another way, I don't see derision, scorn, or apathy at all)

[19:03] <diakopter> oh

[19:03] <diakopter> I wasn't describing the denotation. I was describing the possible connotations.

[19:04] <cognominal> designing for change is just typical perl hubris...

[19:04] <PerlJam> Well, futility is something that most humans are going to need to learn anyway  :)

[19:05] *** IllvilJa joined
[19:06] <PerlJam> diakopter: Sure, those are all possibilities ... it all depends on what baggage the reader brings with them as to how they interpret the text.

[19:07] <diakopter> I agree. I think it's important to consider the reader's/hearer's baggage.

[19:09] <diakopter> inasmuch as it communicates futility & impunity, it can sting with derision/scorn/apathy.

[19:11] *** rgrau_ joined
[19:12] <PerlJam> It's a slippery fish no matter how you look at it.   You should consider the reader, but you can't be responsible for their take on your text.  They have to own up to their interpretation and you have to own up to possibly not being clear.  So then you dialog. 

[19:13] <cognominal> now I crash parrot :(

[19:13] <cognominal> at least load_language was the right thing

[19:13] <diakopter> I'm not claiming that a communicator is entirely responsible for the interpretation, but certainly largely.

[19:14] <diakopter> but "Only change is for sure." is just plain wrong

[19:14] <cognominal> good thing is that it is in load_language...

[19:14] <cognominal> diakopter:  plain wrong? I thought it as a tautology :)

[19:14] <diakopter> "only change is for sure" was true only prior to the first Apocalypse.

[19:15] *** nihiliad joined
[19:16] <PerlJam> depends on what you're talking about :)

[19:17] <diakopter> what are you talking about?

[19:17] <cognominal> what I was talking about? :)

[19:18] <diakopter> which was?

[19:18] *** uniejo_ left
[19:18] <cognominal> forgot the incantation to say to gdb wher to search for the sources :(

[19:21] <PerlJam> If you look at the world through the lens of Perl 6 development, "only change is for sure" was true well after the first Apocalypse.

[19:26] *** mberends joined
[19:41] <rodi> Another spec question: In S32/Containers, what can I infer from the "junction" heading being lowercase, when the rest the classes in that list are C<ucfirst>?

[19:42] <PerlJam> rodi: a typo?

[19:42] * PerlJam looks

[19:43] * diakopter something about a trout's lap

[19:43] <PerlJam> rodi: where exactly?

[19:44] <rodi> PerlJam: http://perlcabal.org/syn/S32/Containers.html#junction

[19:45] <PerlJam> yeah, I'd go with typo

[19:46] <rodi> Okay, TimToady usually fixes those, I guess?

[19:46] <PerlJam> rodi: do you have a commit bit for the pugs repo?

[19:46] <rodi> Yeah.

[19:47] <rodi> Or at least, I used to.

[19:47] *** rachelBROWN left
[19:47] <PerlJam> then you can fix it.

[19:47] <PerlJam> If it's wrong, someone will fix your fix :)

[19:47] <rodi> :)

[19:50] <ash_> isn't that normally reverting a change?

[19:50] <ash_> fixing a fix sounds recursive 

[19:51] *** Intensity left
[19:53] *** hercynium left
[19:53] *** sirrobert left
[19:55] *** cognominal left
[19:57] *** ignacio_ left
[19:58] *** rachelBROWN joined
[19:58] <pugs_svn> r29482 | rodi++ | C<ucfirst(junction)> with apologies if it was that way for a good reason. 

[20:03] *** ignacio_ joined
[20:03] <rodi> In another spec question, I am surfing between S02 and S32/Containers.  KeySet and KeyBag are on a list of Mutable types in S02, defined in terms of KeyHash.  KeyHash is not on that list, but has a very nice description in S32/Containers (as do KeySet and KeyBag).  Is KeyHash left off the S02 list by intent?

[20:06] <rodi> Oh, and did I mention I like the semantics of KeySet? :)

[20:07] *** cognominal joined
[20:09] *** somebody_ joined
[20:09] <rodi> I like it so much, I wish I could have a KeySet of KeySet.

[20:09] *** somebody_ left
[20:09] <saschi> hi

[20:09] *** soupdragon left
[20:09] <mberends> hi

[20:09] *** soupdragon joined
[20:10] <PerlJam> rodi: I think it was an error of omission WRT KeyHash in S02

[20:14] *** xalbo left
[20:22] *** patspam joined
[20:23] *** hercynium joined
[20:24] *** tarski joined
[20:26] *** avar left
[20:26] *** avar joined
[20:26] *** literal left
[20:26] *** literal joined
[20:27] *** tarski left
[20:33] <pugs_svn> r29483 | mberends++ | [vill] added and updated many files, but still not generating code properly 

[20:37] *** colomon_ left
[20:42] *** patspam left
[20:46] *** frederico left
[20:50] <dugg> mberends: does using viv + STD mean that vill will get STD's warnings and error messages by default?

[20:51] <mberends> dugg: yes, they are emitted to stderr, no matter what you do with the viv output.

[20:52] <dugg> mberends++;  # sweet

[20:53] *** am0c left
[20:57] *** bbkr joined
[21:01] *** takadonet left
[21:05] *** rachelBROWN left
[21:05] *** cj_ joined
[21:12] *** perimosocordiae joined
[21:12] *** cj_ left
[21:12] *** FCO left
[21:12] *** |JackYF| joined
[21:13] *** perimosocordiae left
[21:13] *** japhb left
[21:14] *** perimosocordiae joined
[21:15] *** tylerni8 joined
[21:16] *** tylerni7 left
[21:16] *** jackyf left
[21:18] * dugg suspects his ridiculously old laptop might take a minute to build llvm 2.6

[21:18] *** ashizawa left
[21:21] <ash_> the llvm is pretty big 

[21:22] <mberends> dugg: building llvm can take over 30 minutes on a young laptop, especially when configuring without the --enable-targets and --enable-optimized options, see file:///usr/share/doc/llvm-doc/html/GettingStarted.html#config

[21:24] <mberends> --enable-targets=host-only is the biggest time saver

[21:24] <Tene> http://www.reddit.com/r/programming/comments/an337/cool_things_in_perl_6/c0ifzfu

[21:24] <Tene> -- "anybody knows a good, short introductory text on Perl 6 for Perl 5 programmers?"

[21:25] <Su-Shee> Tene: are you just quoting or asking?

[21:26] <mberends> http://perlgeek.de/en/article/5-to-6 by moritz_++

[21:26] <Tene> Su-Shee: quoting.

[21:27] <Su-Shee> ah, ok.

[21:27] <Tene> mberends: thanks

[21:27] <Su-Shee> otherwise I would have said the same as mberends :)

[21:27] <saschi> need tomate soup

[21:28] <saschi> eh, tomato >_<

[21:30] *** xinming joined
[21:33] <rodi> std: my KeyHash of KeyHash %foo; #what does this mean?

[21:33] <p6eval> std 29483: ok 00:01 108m␤

[21:33] <rodi> std my KeySet of KeySet %foo; # I meant this, not the previous.

[21:34] <rodi> std: my KeySet of KeySet %foo; # I meant this, not the previous.

[21:34] <p6eval> std 29483: ok 00:01 106m␤

[21:34] <rodi> specifically, is this something which parses, but is nonsensical, or something that has semantics that I just can't grok?

[21:37] *** ive joined
[21:38] <dugg> mberends++: yeah, took that from your nice README

[21:38] <mberends> :) glad somebody reads docs

[21:44] <ash_> docs, what are those? i am not sick

[21:44] <ash_> </sarcasm> 

[21:44] <mberends> it's where jnthn++ hides his passwords ;-)

[21:47] *** ive left
[21:48] *** xinming_ left
[21:56] *** dbrock joined
[22:06] *** japhb joined
[22:12] *** ruoso left
[22:13] <dugg> compiled llvm 2.6 in 45 min 36 sec.  *whew*

[22:15] <ash_> sweet, did you build all the bindings? i like how it comes with C/C++ and OCaml bindings, i know very few people that know ocaml, seems odd

[22:17] <dugg> ash_: I didn't, it was a basic fulfillment of a vill requirement, and I followed the "build as fast as you can" style configure options for it from the vill/README.

[22:17] *** |JackYF| left
[22:18] <ash_> ah, well, as long as you have what you need then, i just like playing with programming languages, ocaml is interesting... syntax is odd though

[22:18] <dugg> Totally!  I'll blame you when no yaks in my area have hair.

[22:19] *** constant left
[22:19] <dugg> mberends:  In vill/Makefile I needed the make clean target to have: 

[22:19] <dugg> -       @find . -executable -type f -exec rm {} ';'  # er, executables?

[22:19] <dugg> +       @find . -perm +x -type f -exec rm {} ';'  # er, executables?

[22:20] <dugg> at line 363 or so.

[22:20] <dugg> My `find` didn't like -executable.

[22:20] *** bbkr left
[22:20] <mberends> dugg++: the testing has all been Linux based, this feedback is useful :)

[22:21] <dugg> ash_: They will have been shaved with Ocaml's razor [grin]

[22:22] *** ascent left
[22:22] *** ascent joined
[22:22] *** ascent left
[22:26] <pugs_svn> r29484 | mberends++ | [vill] 'make clean' tweak from dugg++, another TODO in link_codegen.cpp 

[22:27] *** ascent_ joined
[22:27] *** meppl left
[22:27] *** pmurias joined
[22:29] *** constant joined
[22:30] *** colomon_ joined
[22:33] *** soupdragon left
[22:42] <wayland76> I'm thinking about parallelism, and wondering if we've considered http://en.wikipedia.org/wiki/OpenCL

[22:45] <TimToady> not directly, but the reason we have hypers is to support such coprocessing easily; likewise feed operators are for cell processors really

[22:46] <TimToady> hypers are a natural for GPUs, though

[22:46] <TimToady> especially once we get compact arrays of native types

[22:49] <pugs_svn> r29485 | lwall++ | [STD] disallow :!foo(0) and :5bar[42] as suggested by masak++ 

[22:52] *** Su-Shee left
[23:02] *** pmurias left
[23:06] *** perimosocordiae left
[23:07] *** lmc left
[23:10] *** dukeleto joined
[23:16] *** iblechbot left
[23:16] *** mariano__ left
[23:18] *** alester left
[23:23] *** ash_ left
[23:28] *** mariano__ joined
[23:31] *** xomas_ left
[23:34] *** kaare_ left
[23:40] *** orafu left
[23:40] *** orafu joined
[23:56] <pugs_svn> r29486 | lwall++ | [S02,S09,S32] get rid of :by fossils 

