[00:01] <pmurias> diakopter: is that what you want?

[00:01] *** rgrau left
[00:02] *** rgrau joined
[00:02] *** constant joined
[00:04] <diakopter> pmurias: I guess, but I don't see any spectests displaying that syntax

[00:05] <pmurias> diakopter: it's specced in the synopses

[00:05] <pmurias> my int16 @array[100];

[00:05] <pmurias> sleep&

[00:05] *** pmurias left
[00:07] <diakopter> I don't see that anywhere in S02

[00:08] *** eiro joined
[00:08] *** REPLeffect left
[00:08] <diakopter> besides, how would you enforce that push/pop/unshift/shift/splice don't operate on a fixed-length Array?

[00:09] <diakopter> pugs: my Int @array[100]; say @array.elems;

[00:09] <p6eval> pugs: OUTPUT«0␤»

[00:10] <diakopter> rakudo: my Int @array[100]; say @array.elems;

[00:10] <p6eval> rakudo 1d4928: OUTPUT«Confused at line 10, near "[100]; say"␤in Main (file <unknown>, line <unknown>)␤»

[00:10] *** Limbic_Region joined
[00:10] <diakopter> .sigh

[00:11] <Limbic_Region> long time no chat diakopter - how's life?

[00:12] *** _ash left
[00:14] <diakopter> Limbic_Region: ok

[00:16] <diakopter> elf: my Int @array[100]; say @array.elems;

[00:16] <p6eval> elf 29594: OUTPUT«syntax error at (eval 124) line 3, near ";->postcircumfix__91_32_93"␤ at ./elf_h line 5881␤»

[00:16] <diakopter> mildew: my Int @array[100]; say @array.elems;

[00:16] <p6eval> mildew: OUTPUT«Can't open perl script "mildew": No such file or directory␤»

[00:16] <diakopter> mildew-js: my Int @array[100]; say @array.elems;

[00:16] <p6eval> mildew-js: OUTPUT«Can't open perl script "mildew": No such file or directory␤»

[00:16] <diakopter> ng: my Int @array[100]; say @array.elems;

[00:16] <p6eval> ng b8201f: OUTPUT«0␤»

[00:17] <diakopter> :|

[00:17] *** nihiliad left
[00:18] *** krunen joined
[00:23] *** wu1 left
[00:26] <diakopter> pugs: my Int @array[-1]; say @array.elems;

[00:26] <p6eval> pugs: OUTPUT«0␤»

[00:26] <diakopter> pugs: my Int @array[-33]; say @array.elems;

[00:26] <p6eval> pugs: OUTPUT«0␤»

[00:26] <diakopter> pugs: my Int @array[-33,-66]; say @array.elems;

[00:26] <p6eval> pugs: OUTPUT«0␤»

[00:26] <diakopter> augh

[00:28] <diakopter> I finally found S09.

[00:29] *** lumi left
[00:29] *** lumi joined
[00:34] <diakopter> TimToady: can the length of a fixed-size array be defined with a runtime value?   my $a = rand(99); my int @vals[$a];

[00:36] <diakopter> std: my $a = 99.rand; my int @vals[$a];

[00:36] <p6eval> std 29594: OUTPUT«ok 00:01 107m␤»

[00:36] <diakopter> std doesn't mind it

[00:37] <TimToady> in a meeting, but you'd need a BEGIN in there somewhere

[00:39] <TimToady> current spec assumes a compile-time $a, I think

[00:39] <TimToady> would be possible to relax that to elaboration time, I suppose

[00:40] *** athaba left
[00:40] *** meppel joined
[00:40] * diakopter wants compact arrays of runtime-defined fixed length

[00:42] <TimToady> assuming the constructors support it, shouldn't be too hard to hook to the declarative syntax

[00:42] <diakopter> seems like there should be a property (or attribute) on Array that specifies whether it's fixed-length

[00:42] <diakopter> , too

[00:42] <diakopter> or better, whether it's not fixed-length

[00:43] *** lichtkind_ joined
[00:44] <diakopter> std: my buf @array[@@array]

[00:44] <p6eval> std 29594: OUTPUT«ok 00:01 106m␤»

[00:44] *** lestrrat is now known as lest_away

[00:45] *** meppl left
[00:48] *** drbean joined
[00:50] *** mssm left
[00:51] *** Baggiokwok joined
[00:52] *** jferrero left
[00:55] *** Chillance joined
[01:00] <lichtkind_> anybody alive here?

[01:01] *** lichtkind left
[01:05] *** ihrd joined
[01:07] *** eternaleye joined
[01:11] *** lichtkind_ left
[01:11] *** lumi left
[01:11] *** lichtkind joined
[01:11] *** lumi joined
[01:12] <lichtkind> anybody here?

[01:18] *** meppel left
[01:19] *** Chillance left
[01:20] *** ihrd left
[01:21] *** lest_away is now known as lestrrat

[01:27] *** wjl_ left
[01:30] *** japhb left
[01:32] *** wayland76 joined
[01:33] <wayland76> When's the next release?

[01:34] <diakopter> wayland76: of?

[01:34] <diakopter> rakudo? the january one was skipped.

[01:34] *** lichtkind left
[01:35] *** colomon__ joined
[01:38] <wayland76> Ah, ok, so Februiary is the next Rakudo release (and yes, that was what I was asking; thanks for anticipating :) )

[01:40] *** colomon___ joined
[01:40] *** araujo left
[01:46] *** lumi left
[01:46] *** lumi joined
[01:52] *** LaVolta joined
[01:53] *** colomon left
[01:53] *** colomon___ is now known as colomon

[01:53] *** japhb joined
[01:58] *** colomon__ left
[02:01] *** nihiliad joined
[02:11] *** agentzh joined
[02:21] *** Baggiokwok left
[02:24] *** justatheory left
[02:26] *** cdarroch left
[02:30] *** lumi left
[02:30] *** lumi joined
[02:34] *** yahooooo joined
[02:36] *** orafu left
[02:37] *** orafu joined
[03:11] *** quietfanatic joined
[03:33] *** araujo joined
[03:38] *** araujo left
[03:40] *** araujo joined
[03:44] *** lumi left
[03:44] *** lumi joined
[03:45] *** Limbic_Region left
[03:48] *** niros left
[03:48] *** ab5tract left
[03:51] *** Ouse26698 left
[03:55] *** ShaneC left
[04:02] *** nihiliad left
[04:18] *** abokgb joined
[04:20] *** eternaleye left
[04:20] *** eternaleye joined
[04:21] *** abokgb left
[04:23] *** eternaleye left
[04:23] *** eternaleye joined
[04:31] *** pnate joined
[04:34] *** PZt left
[04:37] *** hercynium left
[04:40] <Tene> is augment lexically scoped in rakudo?

[04:41] *** araujo left
[04:44] *** lestrrat is now known as lest_away

[04:46] <sjohnson> damn abokgb

[04:46] <sjohnson> wasting my precious bandwidth

[04:49] *** jql joined
[04:54] *** lest_away is now known as lestrrat

[04:59] *** lestrrat left
[04:59] *** yinyin_ joined
[05:01] *** lestrrat joined
[05:05] *** lumi left
[05:05] *** lumi joined
[05:15] *** stephenlb left
[05:28] *** pnate left
[05:36] <diakopter> sigh

[05:37] <diakopter> at least those don't make it to moritz_'s ilbot irclog

[05:50] *** eternaleye left
[05:55] *** eternaleye joined
[05:59] <diakopter> TimToady: may I add the mention of my int @fixed_length[$a];  to S09?

[06:04] *** araujo joined
[06:08] *** Baggiokwok joined
[06:13] *** rgrau left
[06:38] *** Su-Shee joined
[06:39] *** diakopter sets mode: +o Su-Shee

[06:41] *** Baggiokwok left
[07:08] *** wu1 joined
[07:15] *** kaare joined
[07:15] *** kaare is now known as Guest55775

[07:19] *** cjk101010 joined
[07:23] *** yinyin_ left
[07:24] *** yinyin joined
[07:24] *** yinyin_ joined
[07:24] *** yinyin left
[07:25] *** lumi left
[07:25] *** lumi joined
[07:29] *** rgrau joined
[07:37] *** c0tt0 joined
[07:37] *** cottoo left
[07:39] *** ckruse joined
[07:40] *** cjk101010 left
[07:40] *** ckruse is now known as cjk101010

[07:44] *** LaVolta left
[07:54] *** drbean left
[08:06] *** ejs joined
[08:09] *** iblechbot joined
[08:11] *** lumi left
[08:11] *** lumi joined
[08:21] *** wu1 left
[08:27] *** wu1 joined
[08:29] *** [particle]1 joined
[08:38] *** ejs left
[08:45] *** [particle] left
[08:49] *** ejs joined
[08:58] *** wayland76 left
[08:59] *** ejs1 joined
[09:07] *** ejs left
[09:11] *** jan__ joined
[09:18] *** Porsbo joined
[09:18] *** Porsbo left
[09:19] *** jan__ left
[09:21] *** wu1 left
[09:22] *** dakkar joined
[09:25] *** jan_ left
[09:26] *** drbean joined
[09:28] *** nncl joined
[09:29] *** nncl left
[09:35] *** meppl joined
[09:36] *** nadim_ left
[09:36] *** Guest85607 left
[09:39] *** Chazz joined
[09:39] *** Chazz is now known as Guest46244

[09:42] *** lestrrat is now known as lest_away

[10:04] <sjohnson> fuckin versions!!!

[10:05] <sjohnson> *shakes first in air*

[10:07] *** drbean left
[10:09] *** mssm joined
[10:10] *** lumi left
[10:11] *** lumi joined
[10:12] *** broquaint left
[10:16] <moritz_> good morning

[10:16] <moritz_> can't we somehow disallow these CTCP VERSION requests?

[10:16] * moritz_ is not very familiar with IRC and channel modes

[10:20] <sjohnson> i will look into it

[10:21] <sjohnson> from what i can tell from Freenode docs

[10:21] <sjohnson> it might not be doable

[10:21] <sjohnson> where is that friendly ircop angel who hangs around here...

[10:21] <sjohnson> kloeri_ or something

[10:22] *** renormalist|work left
[10:23] *** renormalist|work joined
[10:23] *** yinyin_ left
[10:23] *** Guest46244 left
[10:23] *** jjore left
[10:23] *** stepnem left
[10:23] *** Helios left
[10:23] *** mssm left
[10:23] *** jjore joined
[10:23] *** mssm joined
[10:24] *** Helios joined
[10:25] *** Chazz joined
[10:25] *** renormalist|work left
[10:25] *** renormalist|work joined
[10:25] *** Chazz is now known as Guest52934

[10:30] *** stepnem joined
[10:31] *** renormalist|work left
[10:32] *** renormalist|work joined
[10:42] *** wu1 joined
[11:01] *** patspam left
[11:10] *** jan_ joined
[11:10] *** jan_ left
[11:11] *** bbkr left
[11:16] *** lumi left
[11:16] *** lumi joined
[11:17] *** jan_ joined
[11:18] *** iblechbot left
[11:28] <sjohnson> moritz_: tomorrow, when Seven is migrated to (ircd)

[11:28] <sjohnson> +C will disable these annoying CTCP's for chans

[11:29] <moritz_> sjohnson: thanks

[11:29] *** pdcawley joined
[11:34] <sjohnson> no worries

[11:37] *** LaVolta joined
[11:38] *** mjk joined
[11:43] *** pmurias joined
[11:51] *** payload left
[11:52] *** drbean joined
[12:22] *** macae joined
[12:23] *** stepnem left
[12:27] *** SmokeMachine joined
[12:30] *** stepnem joined
[12:36] *** payload joined
[12:38] *** LaVolta left
[12:38] *** LaVolta joined
[12:48] *** c0tt0 left
[12:48] *** c0tt0 joined
[12:48] *** bluescreen joined
[12:49] *** am0c left
[12:52] *** payload left
[12:53] *** payload joined
[12:55] *** lumi left
[12:55] *** lumi joined
[13:01] *** am0c joined
[13:06] *** ihrd joined
[13:07] *** ihrd left
[13:09] *** SmokeMachine left
[13:10] *** c0tt0 left
[13:11] <pugs_svn> r29595 | masak++ | typo 

[13:15] *** iblechbot joined
[13:18] *** payload left
[13:19] *** lichtkind joined
[13:20] *** lumi left
[13:20] *** lumi joined
[13:22] *** cotto joined
[13:24] *** cognominal joined
[13:31] *** SmokeMachine joined
[13:40] <dalek> book: 7b9d5cb | moritz++ | src/builtins.pod:

[13:40] <dalek> book: list some Str builtins

[13:40] <dalek> book: review: http://github.com/perl6/book/commit/7b9d5cb0725ff6de70efe06e7d152e1642001f51

[13:40] <dalek> book: 25b257d | moritz++ | src/ (4 files):

[13:40] <dalek> book: Merge branch 'master' of [email@hidden.address]
[13:40] <dalek> book: review: http://github.com/perl6/book/commit/25b257d02abbd6d2e727de1973d2c70bf993632f

[13:46] *** lumi left
[13:46] *** lumi joined
[13:56] *** ruoso joined
[13:58] <pmichaud> good morning, #perl6

[13:59] <moritz_> \o/

[13:59] <colomon> \o

[14:00] *** agentzh left
[14:03] *** rgrau left
[14:04] *** mahla joined
[14:04] <jnthn> morning, pmichaud 

[14:04] <pmichaud> jnthn: I figured out the flatten flag late last night :)

[14:04] <colomon> \o/

[14:04] <pmichaud> jnthn++   # you were right about caching

[14:05] <pmichaud> except instead of caching the flag on the instances, we cache it in the class object :)

[14:06] <pmichaud> so now it's just   $P0 = typeof value;  ...check/cache flatten in $P0...

[14:07] <pmichaud> even nicer is that a lot of our value pmcs now don't end up with prophashes

[14:08] <jnthn> pmichaud: :-D

[14:08] <jnthn> pmichaud: Nice.

[14:08] <jnthn> pmichaud: Was alongish the lines of what I was thinking. wfm. :-)

[14:08] <mathw> yay! that sounds like efficiency

[14:09] *** mahla left
[14:09] <pmichaud> yes, it should be fairly efficient, while also preserving the correct p6 semantics

[14:09] <pmichaud> so, we now know that Iterable objects flatten in list context.... do Iterators themselves flatten (unless masked in a scalar container)?

[14:11] *** mikehh left
[14:11] *** mikehh joined
[14:12] *** nihiliad joined
[14:15] *** [particle]1 left
[14:15] <colomon> Hmmm... we know we want to be able to create Arrays of Iterators, right?

[14:16] <pmichaud> yes

[14:16] <pmichaud> but in that case, each of the iterators would be masked by a scalar container

[14:16] *** [particle] joined
[14:16] <pmichaud> (the element of the array is a scalar container)

[14:16] <colomon> ah.

[14:17] <colomon> so that doesn't provide any useful insight.

[14:18] <pmichaud> I think I'm going to start out assuming that they do flatten... it simplifies list processing greatly if so

[14:18] <colomon> I think my instinct is that iterators flatten, but I don't know that I can justify it. 

[14:19] *** mjk left
[14:22] <colomon> pmichaud++ # JFDI and see what happens

[14:22] *** payload joined
[14:26] <mathw> As I haven't really looked into it, this is pure opinion, but I would expect iterators to act like the list they generate in appropriately listy situations

[14:26] <mathw> which means flattening, I guess

[14:28] <Su-Shee> (I've just read "flattering".. time to call it a day...)

[14:28] *** lumi left
[14:28] *** lumi joined
[14:31] *** k23z__ joined
[14:33] *** Guest55775 left
[14:34] *** mikehh left
[14:34] *** mikehh joined
[14:34] *** nihiliad left
[14:36] *** Baggiokwok joined
[14:37] *** drbean left
[14:41] *** tlb joined
[14:44] *** ejs2 joined
[14:47] *** astinus joined
[14:48] <mathw> hmm

[14:49] <mathw> bitwise OR in C++ now looks wrong to me

[14:49] <mathw> even though I've not written any perl 6 for a while, I keep thinking I'm making a junction

[14:49] *** Baggiokwok left
[14:49] <moritz_> :-)

[14:49] *** Baggiokwok joined
[14:50] <mathw> and it also feels wrong to use just one character for an operator which, most of the time, isn't actually used very often

[14:50] <colomon> :)

[14:50] <mathw> I should write some Perl 6

[14:50] *** moritz_ sets mode: +o colomon

[14:51] <mathw> My boss has suggested I run my Perl course again, but I don't think I could get away with upgrading it yet :(

[14:51] *** _ash joined
[14:52] *** hudnix left
[14:53] *** ejs1 left
[14:56] *** wasy_afk is now known as wasy

[15:01] *** hudnix joined
[15:02] *** corpogen joined
[15:03] <corpogen> hello guys im having a problems running somethig called celera software

[15:03] <moritz_> is that related to Perl 6 in any way?

[15:03] <corpogen> this is the routine and the output http://scsys.co.uk:8002/38696. 

[15:04] <moritz_> doesn't look like Perl 6 :/

[15:04] <moritz_> so you're in the wrong channel

[15:04] <corpogen> no idea

[15:05] <moritz_> now you know

[15:05] *** cjk101010 left
[15:10] *** bluescreen left
[15:10] *** lumi left
[15:10] *** lumi joined
[15:11] *** uniejo joined
[15:11] *** tlb left
[15:12] *** k23z__ left
[15:12] <sjn> corpogen: try asking in #perl and make sure you have all necessary info in that pastebin page (including the code that the error message refers to)

[15:13] *** tlb joined
[15:13] <sjn> corpogen: or, reimplement your tool in Perl 6, and hang around here ;-)

[15:15] *** Baggiokwok left
[15:15] *** payload left
[15:16] *** mikehh left
[15:18] *** nihiliad joined
[15:18] *** LaVolta left
[15:18] *** mikehh joined
[15:21] <pugs_svn> r29596 | colomon++ | [t/spec] More tests for RangeIterator. 

[15:25] *** corpogen left
[15:35] *** cognominal left
[15:37] *** Psyche^ joined
[15:37] *** _ash left
[15:40] *** cognominal joined
[15:41] *** lumi left
[15:41] *** lumi joined
[15:45] *** mikehh left
[15:45] *** mikehh joined
[15:52] *** jan_ left
[15:52] *** iblechbot left
[15:52] <PerlJam> guten Morgen

[15:53] <jnthn> PerlJam: Wie gehts?

[15:53] *** Patterner left
[15:53] <jnthn> ...or something... :-)

[15:54] <PerlJam> um .... I've already exhausted my conversation German, sorry  :)

[15:54] <PerlJam> *conversational

[15:54] <PerlJam> jnthn: But ... I'm fine, how are you?  :)

[15:57] <colomon> Bag(3,8,[2,Seq(9,3)],8) >>->> 1;         # Bag(2,7,[1,Seq(8,2)],7)

[15:57] <colomon> How is that even supposed to begin to be implemented?

[15:58] <PerlJam> colomon: magic, as usual :)

[15:59] <colomon> When I was looking at that yesterday, I was assuming the end result was a list.

[16:01] <PerlJam> colomon: is hyper really supposed to recurse like that?

[16:02] <jnthn> PerlJam: I'm...strangely exhausted.

[16:02] <colomon> PerlJam: that's start from the spec.

[16:02] <colomon> *straight

[16:03] <PerlJam> The fun of not always being detail oriented is that there's always these new little gems in the spec that surprise you.

[16:04] <PerlJam> (of course, the spec being in flux increases the surprise factor too :)

[16:06] <pmichaud> and the surprises have kept on coming, lately!  :-)

[16:07] *** mikehh left
[16:08] *** mikehh joined
[16:09] *** pnate joined
[16:09] <colomon> pmichaud: it's easy for me to see how to you can connect iterators and hyper operators.

[16:09] <colomon> but building up an identical structure afterward?!??

[16:09] *** lumi left
[16:10] *** lumi joined
[16:10] <pmichaud> I'm not sure about that "afterward" part, though.  It could be builtup/maintained as it runs.

[16:10] <colomon> either way, that's a lot more complicated than the current Iterator interface.

[16:11] <pmichaud> sure, but that's not a function of iterator anyway

[16:11] <pmichaud> The Bag sees four elements from its iterator

[16:11] <jnthn> colomon: It's not so hard maybe.

[16:11] <jnthn> colomon: I mean, it may be like

[16:11] <pmichaud> the third element is an Array, which is fed to its own hyperiterator invocation, which returns another array

[16:12] <jnthn> sub hyper_helper(::T @items) { ... } and you can do T.new(@result) in there or so.

[16:12] <pmichaud> that array itself has two elements, with the Seq being fed to yet another hyperoperator

[16:12] <jnthn> There's ways to write generic routines. :-)

[16:12] <jnthn> (I'm assuming a recursive approach there...I guess pm maybe is too.)

[16:12] <pmichaud> yes

[16:13] <pmichaud> basically it ends up acting like    Bag(3-1, 8-1, [2, Seq(9,3)] >>->> 1, 8-1)

[16:13] <pmichaud> which in turn

[16:13] <pmichaud>    Bag(3-1, 8-1, [2-1, Seq(9,3) >>->> 1], 8-1)

[16:13] <pmichaud> and then

[16:13] <pmichaud>     Bag(3-1, 8-1, [2-1, Seq(9-1, 3-1)], 8-1)

[16:14] <jnthn> I think the current impl may know how to do that.

[16:14] <jnthn> rakudo: say ([1, 2, [3, 4], 5] >>+>> 1).perl

[16:14] <pmichaud> oh, I doubt that part.  Anyway, the hyper metaop would just thread over the structures

[16:14] <p6eval> rakudo 1d4928: OUTPUT«[2, 3, [4, 5], 6]␤»

[16:15] <pmichaud> okay, looks like it does work :-)

[16:15] <jnthn> pmichaud: Well, it knows to recurse.

[16:15] <jnthn> pmichaud: Not about types though.

[16:15] <pmichaud> adding types wouldn't be too difficult, I don't think

[16:15] <jnthn> Me either.

[16:15] <jnthn> I think hypers on hashes work too.

[16:15] * jnthn used to be, like, productive.

[16:16] <jnthn> Hopefully Feb I'll me productive again too. :-)

[16:16] <jnthn> *be

[16:16] <pmichaud> I'm sure I will.

[16:16] <pmichaud> I'm being productive now, although only in terms of effort and not results :)

[16:16] <pmichaud> (although we're getting closer)

[16:17] <jnthn> Spending time on design is fine. :-)

[16:17] <pmichaud> more like "implementations that don't quite work"

[16:17] <jnthn> "research" :-)

[16:17] <pmichaud> I guess that makes me a "scout ant" for the time being.  :)

[16:18] <pmichaud> although I will be very happy to eliminate the 'flatten' flag here in a bit :-)

[16:19] *** cjk101010 joined
[16:20] <lichtkind> could anybody reset my pugs account?

[16:21] *** ejs2 left
[16:23] <pmichaud> ooops

[16:23] <pmichaud> I just realized the release announcement for Jan 2010 didn't make it off my machine

[16:23] <pmichaud> Should I resent?

[16:23] <pmichaud> *resend?

[16:24] *** bloonix joined
[16:27] <colomon> it seems like that ship has kind of sailed...

[16:27] *** Psyche^ is now known as Patterner

[16:27] *** Patterner left
[16:28] *** Patterner joined
[16:30] *** wu1 left
[16:30] <colomon> jnthn: looking at your hyper_helper back there... does that imply we can do it without support from the class itself other than an appropriate .new being available?

[16:32] <jnthn> colomon: Yes.

[16:32] <colomon> sweet.

[16:32] <jnthn> colomon: That's how the current impl works, iirc.

[16:39] *** fdwgulq joined
[16:39] *** fdwgulq left
[16:41] * colomon now studying the master implementation...

[16:44] *** lumi left
[16:44] *** lumi joined
[16:53] *** justatheory joined
[16:55] *** justatheory_ joined
[16:59] *** cognominal left
[17:00] *** cognominal joined
[17:00] <lisppaste3> frettled pasted "Blog entry about Rakudo ng as new master (feedback wanted)" at http://paste.lisp.org/display/94097

[17:01] <frettled> If I'm off the mark in any way, please whack me.

[17:01] <frettled> (I may have missed some goings-on in this channel due to some spamming, please bear with me.)

[17:03] *** nzb joined
[17:03] *** nzb left
[17:06] <pmichaud> frettled: I don't see anything wrong with the article, but it makes me think we ought to list what some of the improvements of ng are

[17:06] <diakopter> lichtkind: still there?

[17:06] <pmichaud> i.e., we're regressing, but we gain some very important stuff in return

[17:06] <frettled> pmichaud: yes, very good point, that would help add a more positive spin

[17:06] <pmichaud> for one, we'll have working laziness

[17:07] <pmichaud> we'll also have Parcel/List/Array/other types that fit the updated spec.  Rakudo master was very out of date there.

[17:07] *** PZt joined
[17:07] <pmichaud> The ng version will support protoregexes and a better form of longest token matching

[17:08] <pmichaud> metaoperators are truly meta -- and they're dynamically generated on-demand

[17:08] <pmichaud> we have a base object metamodel that is far closer to the specification than what we had before.  Also, major portions of the metamodel are written in Perl 6.

[17:09] <pmichaud> we should get some good speed improvements (many due to added laziness)

[17:09] <frettled> excellent talking points

[17:09] <jnthn> Also, from a Rakudo * point of view, many of the things Pm just mentioned directly address priority #1 ROADMAP items too.

[17:09] <pmichaud> we don't have it yet, but shortly we'll have the ability to embed closures in regexes

[17:10] <frettled> would it be correct to say that laziness will be "mostly working", or will it be complete?

[17:10] <pmichaud> and variable interpolations

[17:10] <jnthn> pmichaud: How about the auto-vivification things?

[17:10] <pmichaud> "mostly working".  The laziness spec itself is undergoing change.

[17:10] <pmichaud> Oh yes, array and hash elements will vivify properly.

[17:10] <jnthn> \o/

[17:10] <pmichaud> (they already do for arrays, although I'm still tweaking a bit there)

[17:10] *** justatheory left
[17:10] *** justatheory_ is now known as justatheory

[17:10] *** lumi left
[17:10] *** pmurias left
[17:11] <pmichaud> lexical subs and variables work properly

[17:12] <pmichaud> operators have the correct names (i.e., with angles).  subs have the correct sigils (i.e., with &'s)

[17:13] <pmichaud> we have working phasers

[17:13] <pmichaud> and a much improved phaser model

[17:14] *** lumi joined
[17:15] *** lmc joined
[17:15] <pmichaud> anyway, those are a few changes that could not be easily added to master

[17:15] <pmichaud> (indeed, the reason master doesn't have many of them was because it was proving so difficult to do them... thus ng resolves a lot of those issues)

[17:16] <pmichaud> afk, lunch

[17:18] <frettled> Brilliant, thanks a lot.

[17:18] <diakopter> lichtkind: do you still want your pugscode password reset?

[17:22] *** nothingmuch joined
[17:23] <diakopter> TimToady: may I add a mention of run-time-expression fixed-length array constructors to S09?

[17:24] <TimToady> yes, question is whether the actual construction is driven by autoviv

[17:24] <diakopter> oh

[17:24] <TimToady> and what happens if you happen to be in the scope of the declaration but not have executed it

[17:24] <frettled> There, blogified: http://howcaniexplainthis.blogspot.com/2010/01/rakudo-ng-what-will-it-mean-for-us.html

[17:25] <TimToady> does it just use the current value of $a whatever it is then?

[17:25] <TimToady> it's not just a walk in the park :)

[17:25] <frettled> I really like grabbing the good talking points from #perl6 and blogging about it, I like to think that there are some readers who don't follow things very closely here ;)

[17:26] <colomon> frettled++ 

[17:26] <TimToady> also, the type should probably be a container role instantiated with the particular shape

[17:26] <TimToady> so that the type of two such arrays is officially different

[17:27] <diakopter> I'd think it evaluates the expression at the time of initialization.

[17:27] *** synth left
[17:27] <TimToady> well, people are going to expect my @array[40]; to autoinit without an =

[17:28] <diakopter> oh; I meant declaration.

[17:28] <TimToady> while we don't assume .= new for scalar vars, maybe we can for autovivifiables

[17:29] *** pmurias joined
[17:31] <TimToady> .oO(Good design is a bitch, but I can hope it's my bitch.)

[17:32] <TimToady> anyhoo, it would be good if the lack of .= new could be made to fall out of autovivifiability without using an exception list of types

[17:33] *** athaba joined
[17:33] <frettled> :)

[17:34] <TimToady> just as $x[3] = 4 creates an array in $x if it needs to, speaking of which, we need a mechanism for that too

[17:35] <TimToady> rakudo: my $x; $x[3] = 4; say $x[3]

[17:35] <p6eval> rakudo 1d4928: OUTPUT«Method 'postcircumfix:[ ]' not found for invocant of class 'Failure'␤in Main (file src/gen_setting.pm, line 324)␤»

[17:35] <diakopter> I didn't know that

[17:35] <TimToady> Perl 5 does it

[17:35] <diakopter> pugs: my $x; $x[3] = 4; say $x[3]

[17:35] <p6eval> pugs: OUTPUT«4␤»

[17:36] <TimToady> basically, .[] on a Mu-filled scalar container should autoviv an array somehow

[17:37] *** lumi left
[17:37] *** lumi joined
[17:37] <TimToady> just as any element can autoviv a subarray

[17:37] <diakopter> ok.  since sprixel's first stage won't do autovivification, I can defer that..

[17:37] <colomon> pmichaud: I do still have a question on iterators and hyper.  What happens if you do something like >>-- to a hyper that works through iterators?  Is .get supposed to return something which is rw?

[17:38] <diakopter> I suppose that (my last msg) is a truism

[17:38] <TimToady> you can say that again

[17:38] <TimToady> that goes without saying

[17:38] *** cdarroch joined
[17:38] <diakopter> I mean, a tautology.

[17:38] <TimToady> I prefer tauntaologies

[17:39] <TimToady> s/ao/o/

[17:39] * TimToady blames his battery, which is running low, because he forgot his power cord at work yesterday...

[17:41] <diakopter> TimToady: maybe there's a different constructor that takes the expression

[17:43] <TimToady> and does what with it, is the question

[17:43] *** uniejo left
[17:45] <TimToady> instantiates a new role with that length (unless cached), and the creates the class for that role, and the calls the "real" constructor on that?

[17:46] *** plskyrzyrow joined
[17:46] <TimToady> do we want @a[2,2] to be a different type than @a[4]?  Seems so

[17:46] *** plskyrzyrow left
[17:47] <TimToady> er, @a[2;2] rather

[17:48] <jnthn> It sucks that the GNAA found a backdoor way to insert messages into your channel. :-/

[17:48] <jnthn> *our

[17:49] * jnthn backlogs recent discussion

[17:49] *** jan_ joined
[17:50] * TimToady will check back later &

[17:50] *** tlb left
[17:52] <diakopter> I'd think the types would differ by dimensionality only

[17:52] <jnthn> TimToady: I'd kinda seen us being able to do it as a role parameter too, fwiw.

[17:52] <jnthn> TimToady: Since I'd got caching of roles based upon ===-style identify of the type parameters, I think it should work.

[17:52] *** am0c left
[17:56] <lichtkind> diakopter: sorry had to go yes i still want the reset

[17:58] *** Chillance joined
[18:03] *** dakkar left
[18:04] *** ShaneC joined
[18:05] <diakopter> lichtkind: well apparently I've forgotten my password (again), so I can't :)

[18:05] <diakopter> but I'm sure someone else can

[18:06] <lichtkind> i hope so

[18:07] <lichtkind> moritz_: you have pugs acount?

[18:07] <Khisanth> jnthn: there is +R ...

[18:07] <jnthn> Khisanth: +R ? :-)

[18:07] * jnthn goes to look it up

[18:07] <Khisanth> silence unregistered

[18:08] <Khisanth> or the new ircd is supposed to have a mode that also stops the CTCP

[18:09] <jnthn> ah, cool.

[18:09] * jnthn ain't so clued up on IRC

[18:09] *** stephenlb joined
[18:09] *** lumi left
[18:09] *** lumi joined
[18:10] <lichtkind> jnthn: do you have pugs account?

[18:10] <jnthn> lichtkind: Yes.

[18:10] <lichtkind> jnthn: could you please reset my account?

[18:10] <jnthn> lichtkind: Ah, I thought diakopter++ had already done it?

[18:11] <jnthn> lichtkind: Hm. Is that a commitbit task...

[18:11] <lichtkind> jnthn: he need also a pwd reset :)

[18:11] <jnthn> ah, I guess it's reinvite

[18:12] <jnthn> lichtkind: done

[18:12] <jnthn> (hopefully) :-)

[18:13] <lichtkind> :)

[18:21] *** uniejo joined
[18:21] <lichtkind> jnthn: it warked thanks a lot

[18:23] *** jonasbn joined
[18:23] <pugs_svn> r29597 | lichtkind++ | included november wiki 

[18:23] <lichtkind> it does really work :)

[18:25] *** fda314925 left
[18:35] *** bartolin joined
[18:36] <colomon> Hmmm.  It seems like properly implementing the series operator, infix:<...>, requires an iterator internally, as the series may be large or infinite.

[18:36] <pmichaud> back

[18:36] <colomon> But what type should the series operator return?

[18:36] <pmichaud> colomon: a list

[18:37] <colomon> how do you wrap a list around an iterator?

[18:37] <pmichaud> a list *is* an iterator :-)

[18:37] <colomon> so you just return the iterator?

[18:38] <pmichaud> essentially, yes

[18:38] <colomon> what is the catch in that essentially?  :)

[18:38] <pmichaud> think of things in terms of gather/take... what does gather return?

[18:38] <pmichaud> it returns a list

[18:39] <pmichaud> the catch is that you have to return the iterator in a way that it will flatten

[18:39] <colomon> ah.

[18:39] <pmichaud> as opposed to in a scalar, where it won't flatten

[18:39] <colomon> right.

[18:39] <pmichaud> but if infix:<...> is written in terms of gather take, the gather handles all of that for you :-)

[18:39] <pmichaud> I should have a working gather/take soonish.

[18:40] <pmichaud> TimToady: we postulated earlier that iterators in list context flatten... does that sound rightish?  (An iterator in a scalar container wouldn't flatten, however.)

[18:40] <colomon> I guess this brings up the question of how often we should be going to be bare metal and directly coding an iterator, and how often we should just use gather/take.

[18:40] <pmichaud> bare metal when speed is an issue, I'd think

[18:40] <pmichaud> or when it's pretty easy to do so

[18:41] <pmichaud> or when there are optimizations available

[18:41] <pmichaud> there's also the question of "how bare is the metal?"

[18:41] <pmichaud> :-)

[18:41] <colomon> :)  Sure enough, I prefer my bare metal still in Perl 6 rather than Parrot.

[18:47] *** quietfanatic left
[18:50] *** rodi joined
[18:51] <colomon> I feel like iterators provide a target-rich environment for doing cool stuff, I'm just not sure where to tackle it.

[18:51] <pmichaud> it'll become clearer, soon, I hope. 

[18:51] <pmichaud> I'm fixing the failing 08-var-array.t test now (the error really doesn't have anything to do with arrays, though), next will be .map

[18:52] <pmichaud> that should get use pretty close back to the ng state

[18:52] <pmichaud> s/use/us/

[18:52] <Tene> pmichaud: how is ng1 coming?

[18:52] <colomon> I was just peering at STD.pm, trying to figure out how to bring the reduce meta operator into ng1, but I fear the grammar involved is still beyond me.

[18:52] <pmichaud> slow

[18:52] *** lumi left
[18:52] <pmichaud> but making good progress today.  Yesterday posed a few blockers.

[18:52] *** lumi joined
[18:55] <Tene> Might have some time after work today.  I don't think there's anything going on that needs me tonight.

[18:55] <pmichaud> okay, great!

[18:55] <Tene> Sorry I've been absent this week.

[18:55] <pmichaud> actually, ng1 has some good stuff with Range and RangeIterator

[18:55] <pmichaud> Tene: np, absence is a not-uncommon trait for us all :)

[18:56] <pmichaud> sometimes real life and/or other priorities just show up

[19:02] <pmichaud> ng1 now passes "make test"

[19:03] <pmichaud> short break, then I'll do .map

[19:04] <colomon> double \o/

[19:11] *** rodi left
[19:13] *** lmc left
[19:13] *** lmc joined
[19:17] *** macae left
[19:19] *** cognominal left
[19:20] *** cognominal joined
[19:29] *** cjk101010 left
[19:34] *** uniejo left
[19:35] *** lumi left
[19:35] *** lumi joined
[19:36] *** iblechbot joined
[19:37] *** _ash joined
[19:41] *** uniejo joined
[19:43] *** uniejo left
[19:49] *** pnate2 joined
[19:53] *** pnate left
[20:05] *** jferrero joined
[20:16] *** hkwnmlovbb joined
[20:17] *** hkwnmlovbb left
[20:22] *** lumi left
[20:22] *** lumi joined
[20:23] <lichtkind> what is vi?

[20:23] <lichtkind> i mean viv

[20:26] *** mikehh left
[20:26] *** mikehh joined
[20:27] *** ejs joined
[20:30] <lichtkind> diakopter: you some minutes for an interview?

[20:38] <pmichaud> ng: say 'alive'

[20:38] <p6eval> ng b8201f: OUTPUT«alive␤»

[20:43] *** alester joined
[20:43] <_ash> ah, cool, the eval bot is reading the chat logs again 

[20:43] *** _ash is now known as ash_

[20:44] <ash_> rakudo: say 'hi'

[20:44] <p6eval> rakudo 1d4928: OUTPUT«hi␤»

[20:44] <PerlJam> pmichaud: how goes the ng/ng1 ?

[20:44] <pmichaud> slow, but speeding up

[20:44] <pmichaud> I'm about to do (lazy) .map

[20:44] <pmichaud> almost have it ready, I think.

[20:46] <ash_> awesome, pmichaud++ 

[20:47] *** k23z__ joined
[20:47] <PerlJam> When's the Rakudo release?

[20:48] <pmichaud> already did it last week

[20:48] <PerlJam> oh, I guess I missed it.

[20:48] <pmichaud> apparently the announcement didn't leave my computer, though :-(

[20:48] <pmichaud> I've been wondering if I should go ahead and send now

[20:48] <ash_> pmichaud: i made a repository for my attempt at making a nqp-rx like language, based on the llvm, its only just started though, i am still learning flex/bision so it doesn't compile yet

[20:48] <pmichaud> ash_++

[20:49] *** lumi left
[20:49] *** lumi joined
[20:52] <PerlJam> pmichaud: I just read the release announcement.  I think the announcement itself is the most important part of the release  :-)

[20:52] <pmichaud> yeah, I'll send.

[20:52] <PerlJam> (so, by all means, send it!)

[20:52] <pmichaud> (re-send)

[20:54] *** cotto_work left
[20:56] *** cotto_work joined
[21:00] *** wu joined
[21:00] *** wu is now known as Guest27696

[21:01] *** lumi left
[21:02] *** lumi joined
[21:02] *** cotto_w0rk joined
[21:02] <ash_> pmichaud http://github.com/ashgti/nq-nqp-rx if your at all interested, i am gonna keep on chucking on that

[21:07] *** dukeleto joined
[21:09] <dukeleto> how does one invoke/call a lambda in perl 6? { ... }.invoke ?

[21:12] *** Su-Shee left
[21:16] *** cotto_work left
[21:18] <ash_> for a bare block? 

[21:19] <pmichaud> { ... }.()

[21:19] <pmichaud> ng:  say  { 3 + 4 }.();

[21:19] <p6eval> ng b8201f: OUTPUT«sh: ./perl6: No such file or directory␤»

[21:19] <pmichaud> bah

[21:19] <colomon> The dot is needed?

[21:21] <ash_> no, but its more explicit

[21:21] *** bloonix left
[21:21] <ash_> rakudo: -> $a { say $a; }.(5);

[21:21] <p6eval> rakudo 1d4928: OUTPUT«5␤»

[21:29] *** uniejo joined
[21:39] <colomon> rakudo: my $x = -> $a { say $a; }; $x.(5);

[21:39] <p6eval> rakudo 1d4928: OUTPUT«5␤»

[21:39] *** eternaleye left
[21:39] *** ruoso left
[21:47] <pmichaud> jnthn: (just in case you're around)....   Signatures are immutable, yes?

[21:48] <jnthn> pmichaud: I dearly hope so.

[21:48] <jnthn> pmichaud: You caught me just as I was about to log off and go to the pub. :-P

[21:48] <pmichaud> aha!

[21:48] <pmichaud> currently .params computes a new list everytime it's requested

[21:48] <jnthn> pmichaud: Yeah

[21:48] <pmichaud> should we perhaps cache the result somewhere?

[21:48] <pmichaud> same for count and arity?

[21:48] <jnthn> That was my intention, just never got around to it.

[21:48] <pmichaud> okay

[21:49] <jnthn> I completely intended to cache that result though.

[21:49] <jnthn> But wanted to compute it lazily too.

[21:49] <jnthn> Only got one out of two done. :)

[21:50] <jnthn> pmichaud: Anything else before I go pivovat?

[21:51] <lichtkind> jnthn: you mean pivovar :)

[21:52] *** SmokeMachine left
[21:52] <jnthn> lichtkind: Not unless I'm going to brewery. :-)

[21:52] <lichtkind> haha

[21:52] <jnthn> lichtkind: "pivovat" is actually slang, not real word :-)

[21:52] *** lumi left
[21:53] *** lumi joined
[21:53] <lichtkind> it seemes to me more like drinkin

[21:53] <jnthn> lichtkind: There's a bunch of Slovak verbs that end -ovat (not sure if in Czech too). :-)

[21:53] <jnthn> Drink is pit

[21:53] <jnthn> :-)

[21:53] *** cotto_w0rk left
[21:53] <jnthn> When I was in Prague the waiter called it a pivko. I laughed. :-)

[21:53] <lichtkind> jnthn: there is to but it indicates a verb

[21:53] *** cotto_w0rk joined
[21:53] <jnthn> aye. pivovat = to drink beer :-)

[21:53] <lichtkind> pivko means little beer

[21:54] <jnthn> Huh? I was drinking pints! :-P

[21:54] <lichtkind> jnthn: good then i understood right

[21:54] <jnthn> Maybe I shoulda asked for a velmi velke pivo :-)

[21:55] <lichtkind> jnthn: normal beer = pivo , small = pivko , eben smaller = pivičko

[21:55] <lichtkind> even smaller

[21:55] <jnthn> pivičko is a terrifying concept.

[21:55] <jnthn> Ok, idem do krcmy. See you all later :-)

[21:55] <lichtkind> have fun

[21:55] <pmichaud> jnthn: no, nothing else -- just was noticing that &block.count was failing and then saw "hey! that's expensive!"

[21:56] <jnthn> pmichaud: heh. Feel free to fix, or put on my task list. :-)

[21:56] * jnthn gone

[21:58] *** eternaleye joined
[21:58] *** cotto_w0rk left
[22:01] *** bartolin left
[22:03] *** PacoLinux left
[22:04] *** PacoLinux joined
[22:05] *** mikehh left
[22:05] *** mikehh joined
[22:09] <colomon> pmichaud: while you're messing around in there, have you noticed that grep (for instance) doesn't handle $_ properly in ng?

[22:13] *** cotto_w0rk joined
[22:24] *** ejs left
[22:24] *** k23z__ left
[22:28] <ash_> ng: grep { say $_; }, (1, 2);

[22:28] <p6eval> ng b8201f: OUTPUT«Mu()␤Mu()␤»

[22:28] <ash_> hmm 

[22:28] <ash_> i'd argue thats a bit off

[22:28] <colomon> ash_: yes, exactly.

[22:28] *** uniejo left
[22:29] <ash_> ng: grep { say @_; }, (1, 2);

[22:29] <p6eval> ng b8201f: OUTPUT«␤␤»

[22:30] <dalek> rakudo/ng: 22b55c4 | moritz++ | t/spectest.data:

[22:30] <dalek> rakudo/ng: re-enable anon_block.t and class-and-instance.t

[22:30] <dalek> rakudo/ng: review: http://github.com/rakudo/rakudo/commit/22b55c4811bfb22d654b697e6aa43a93334f3173

[22:38] *** mikehh left
[22:39] *** mikehh joined
[22:42] *** bhwmr joined
[22:42] *** bhwmr left
[22:43] *** jonasbn left
[22:43] *** ruoso joined
[22:43] *** TimToady sets mode: +vvvv buubot dalek hugme iblechbot

[22:43] *** TimToady sets mode: +vv ilogger2 IRSeekBot

[22:43] *** TimToady sets mode: +vvv lisppaste3 p6eval phenny

[22:43] *** TimToady sets mode: +v pugs_svn

[22:45] *** TimToady sets mode: +oooo [particle] araujo avar cognominal

[22:45] *** TimToady sets mode: +oooo colomon japhb Juerd justatheory

[22:45] *** TimToady sets mode: +oooo lichtkind lumi PerlJam pmurias

[22:45] *** TimToady sets mode: +oooo s1n spinclad wolverian xinming

[22:46] *** khisanth_ joined
[22:47] *** mikehh left
[22:47] *** quietfanatic joined
[22:47] *** mikehh joined
[22:51] *** khisanth_ left
[22:51] *** khisanth_ joined
[22:52] *** xinming left
[22:56] *** khisanth_ left
[22:56] <TimToady> ng: grep { say $^a; }, 1, 2;

[22:56] <p6eval> ng 22b55c: OUTPUT«Null PMC access in get_string()␤current instr.: 'perl6;Perl6Role;perl' pc -1 ((unknown file):-1)␤»

[22:56] <TimToady> ng: grep -> $a { say $a; }, 1, 2;

[22:56] <p6eval> ng 22b55c: OUTPUT«Null PMC access in get_string()␤current instr.: 'perl6;Perl6Role;perl' pc -1 ((unknown file):-1)␤»

[22:57] <TimToady> ng: grep -> $a { say $a; }, <a b>;

[22:57] <p6eval> ng 22b55c: OUTPUT«a␤b␤»

[22:57] *** Guest27696 left
[22:57] <TimToady> ng: say 1

[22:57] <p6eval> ng 22b55c: OUTPUT«1␤»

[22:57] <diakopter> ng: grep { say $^a; }, 1;

[22:57] <TimToady> ng: say 1, 2

[22:57] <p6eval> ng 22b55c: OUTPUT«Null PMC access in get_string()␤current instr.: 'perl6;Perl6Role;perl' pc -1 ((unknown file):-1)␤»

[22:57] <p6eval> ng 22b55c: OUTPUT«12␤»

[22:58] <pmichaud> looks like parameter issue

[22:58] *** mssmfs joined
[22:58] <pmichaud> ng:  { say $^a }.(1)

[22:58] <p6eval> ng 22b55c: OUTPUT«1␤»

[22:58] <TimToady> or an opaque container issue

[22:58] <pmichaud> or a grep problem

[22:59] <TimToady> ng: grep { say $^a.WHAT }, 1;

[22:59] <p6eval> ng 22b55c: OUTPUT«Null PMC access in get_string()␤current instr.: 'perl6;Perl6Role;perl' pc -1 ((unknown file):-1)␤»

[22:59] <pmichaud> > my $a = (2,3,4).map({ $_ * 3 }).iterator;  say $a.get; say $a.get;

[22:59] <pmichaud> 6

[22:59] <pmichaud> 9

[22:59] <TimToady> input side, not output

[22:59] <pmichaud> yay!

[22:59] <pmichaud> we can has lazy map

[23:00] *** mssm left
[23:03] *** patspam joined
[23:03] *** brrant left
[23:04] *** brrant joined
[23:04] *** lumi left
[23:04] *** lumi joined
[23:06] *** ash_ left
[23:15] *** iblechbot left
[23:18] <pugs_svn> r29598 | lwall++ | [perl6.org/index] demote Elf from the front page for lack of recent activity. 

[23:19] *** bloonix joined
[23:41] *** cognominal left
