[00:01] *** jerome_ left
[00:01] *** derrazo joined
[00:11] *** NamelessTee joined
[00:13] *** derrazo left
[00:13] *** jferrero left
[00:14] *** xenu_ joined
[00:15] *** jerome_ joined
[00:20] *** fgomez joined
[00:21] *** xenu_ left
[00:26] *** envi_ joined
[00:31] <sorear> good * #perl6

[00:31] * sorear ponders replying to Wenzel

[00:32] *** xenu_ joined
[00:40] *** NamelessTee left
[00:43] *** xenu_ left
[00:44] *** xenu joined
[00:44] *** xenu is now known as Guest1408

[00:52] *** wolfman2000 left
[00:54] *** scott_ joined
[00:54] *** scott_ is now known as Guest11254

[00:55] *** Guest1408 left
[00:56] <colomon> sorear, o/

[00:58] *** adu joined
[01:00] *** xenu_ joined
[01:04] *** fgomez left
[01:10] <adu> what does <x>: mean?

[01:10] *** sisar joined
[01:11] <TimToady> don't backtrack into it

[01:11] <phenny> TimToady: 08 May 22:48Z <diakopter> tell TimToady try  3875928375982735.383854792874359827349682.floor  on p6eval

[01:11] *** fgomez joined
[01:12] <TimToady> perl6: say 3875928375982735.383854792874359827349682.floor

[01:12] <p6eval> rakudo 415791: OUTPUT«3875928375982729␤»

[01:12] <p6eval> ..pugs, niecza v17-2-gb8fcf85: OUTPUT«3875928375982735␤»

[01:12] <adu> TimToady: you've been soo helpful today :)

[01:13] <TimToady> well, everyone here is that way because someone was helpful to them at some point

[01:14] *** lestrrat left
[01:14] *** envi_ left
[01:15] *** lestrrat joined
[01:19] *** xenu_ left
[01:24] *** tokuhirom joined
[01:26] *** xenu_ joined
[01:55] *** adu left
[01:56] *** adu joined
[01:58] *** whiteknight left
[02:01] *** xenu_ left
[02:03] <adu> why is this not working?

[02:03] <adu> "24" ~~ m{ \d ** 1..3 { +$0 < 256 or fail } }

[02:04] <TimToady> put () around the capture

[02:04] <TimToady> otherwise it doesn't get into $0

[02:05] <adu> YEY thanks :)

[02:05] <adu> that looks so much nicer on the eyes than [ \d | <[1..9]> \d | '1' \d \d | '2' <[0..4]> \d | '25' <[0..5]> ]

[02:06] <colomon> or it could be +$/, instead of $0    ?

[02:06] <colomon> oh, no, never mind

[02:06] <TimToady> and I'd write that <?{ $0 < 256 }> which tests a boolean expression more succinctly

[02:06] <adu> ok

[02:07] <TimToady> since it's not clear that 'or fail' is going to be the eventual backtrack trigger

[02:07] <colomon> TimToady++

[02:07] <TimToady> but <?{ ... }> will continue to work whatever

[02:07] <adu> "257" ~~ m{ \d ** 1..3 <?{+$/ < 256}> }

[02:07] <adu> YEY it fails :)

[02:08] *** localhost joined
[02:08] *** replore joined
[02:08] <adu> I've learned so much in one day

[02:08] <TimToady> don't worry, you'll forget most of it by tomorrow.  :)

[02:10] <sisar> moritz++ # range bugfix 

[02:16] <adu> how do I use tokens and rules in matches/regexes?

[02:18] <TimToady> wanting to usually means you should write a grammar instead, but there's some support for calling <Grammar::rule> I think

[02:18] <TimToady> generally a grammar is invoked with .parse though

[02:18] <adu> ok

[02:19] <TimToady> we may revise our view of that as we get more experience

[02:19] <adu> I'm having trouble loading the whole grammar

[02:20] <TimToady> syntactically?

[02:20] <adu> if I do use dreme::datum::Grammar then it says Cannot call 'trait_mod:<is>'; none of these signatures match...

[02:21] <adu> I probably suck at writing grammars

[02:22] <TimToady> well, it'd be nice if it told you the line number, but rakudo is a bit weak on that for run-time errors (and traits, though run at compile time, are basically run-time code)

[02:22] <adu> the only "is" is at the top

[02:22] <adu> grammar dreme::datum::Grammar is HLL::Grammar;

[02:22] <adu> should I delete the HLL::Grammar when testing with perl6?

[02:22] <TimToady> I don't know; is that from parrot somewhere?

[02:23] <adu> yes, well I started with parrot's language template

[02:24] <TimToady> it sounds like one of those bits of nqp that doesn't really translate to P6

[02:24] <TimToady> but I've never done anything with HLL::Grammar

[02:25] <TimToady> in theory, just declaring 'grammar' should give you whatever base classes are necessary for a normal grammar

[02:25] <adu> hmm

[02:26] <adu> ok, the "use" worked i think

[02:26] <adu> now how do I access this "parse" method?

[02:27] *** fgomez left
[02:30] *** sporous left
[02:30] *** sporous joined
[02:31] *** xenu joined
[02:32] *** xenu is now known as Guest98332

[02:36] *** orafu left
[02:36] <adu> ok http://perlcabal.org/syn/S32/Rules.html says for the Grammar API, See Abstractions.pod

[02:36] *** orafu joined
[02:36] *** isBEKaml left
[02:38] <adu> where is Abstractions.pod?

[02:42] <TimToady> beats me; I've never seen that file before, despite my name being on it...

[02:42] <TimToady> anyway, dinner &

[02:42] <TimToady> oh, another thing you might try is running it under niecza, which has a different set of not-yet-implementeds than rakudo

[02:43] <TimToady> bbl &

[02:43] *** wolfman2000 joined
[02:49] <adu> hmm

[02:50] *** tokuhirom left
[02:55] *** Guest11254 left
[03:01] *** scott_ joined
[03:01] *** scott_ is now known as Guest31955

[03:03] *** envi_ joined
[03:05] <adu> I keep getting Could not locate compile-time value for symbol dreme::datum::Grammar

[03:06] <adu> how do I load a grammar?

[03:13] *** benabik joined
[03:13] <adu> what's the difference between require and import?

[03:13] <adu> and need?

[03:13] <adu> and use?

[03:14] *** fgomez joined
[03:19] *** aindilis joined
[03:23] *** Guest31955 left
[03:25] *** Guest98332 left
[03:25] *** replore left
[03:32] *** scott_ joined
[03:33] *** scott_ is now known as Guest52272

[03:35] *** xenu joined
[03:36] *** xenu is now known as Guest89695

[03:39] * adu is so confused

[03:40] <diakopter> hm

[03:40] <PerlJam> adu: what about?

[03:40] *** leprevost joined
[03:40] <adu> import, require, use, need

[03:41] <diakopter> did you see S11?

[03:41] <adu> I'm reading S11 right now

[03:41] <adu> but I'm not sure if it applies

[03:41] <adu> because they seem to be for packages and modules

[03:41] <adu> and I'm trying to import a grammar

[03:42] <diakopter> about a 1/3 of the way through it it explains what need/import/use do

[03:42] <diakopter> and require

[03:42] <diakopter> just to be certain, you're reading http://perlcabal.org/syn/S11.html ?

[03:42] <adu> yes

[03:43] <adu> so I do this: use dreme::datum::Grammar;

[03:43] <adu> and perl6 says "Nil"

[03:43] <adu> then: dreme::datum::Grammar::TOP

[03:43] <adu> and perl6 says Could not find symbol 'dreme::datum::Grammar::&TOP'

[03:44] <PerlJam> adu: what's the name of the file that contains dreme::datum::Grammar?

[03:44] <adu> dreme/datum/Grammar.pm

[03:44] <diakopter> omg I just typed that exact question

[03:44] <adu> in the current dir

[03:44] <adu> I can pastebin it

[03:45] <PerlJam> adu: please do

[03:46] <PerlJam> adu: your grammar declaration needs to be  grammar dreme::datum::Grammar { ... }  too:q

[03:46] <adu> http://pastebin.com/dukkRaqd

[03:47] <diakopter> did you try the { } form

[03:47] <adu> hmm nope

[03:47] <diakopter> might be a bug that makes that necessary

[03:47] <adu> it would be nice if S11 mentioned grammars too

[03:47] *** eternaleye left
[03:47] <diakopter> agree

[03:48] *** Guest89695 left
[03:49] <adu> I'm still getting "Could not find symbol 'dreme::datum::Grammar::&TOP'"

[03:49] *** noam_ left
[03:49] <diakopter> can you pastebin the file that's using the grammar?

[03:49] *** noam_ joined
[03:49] <adu> I'm not importing it from a file

[03:50] <adu> I'm using rakudo's repl

[03:50] <diakopter> ah

[03:50] <diakopter> that has problems, I seem to recall

[03:51] <adu> ok I put it in a file

[03:52] <adu> http://pastebin.com/q55xnv6e

[03:52] <diakopter> I don't know that TOP will be accessible like that

[03:54] <adu> hmm ok

[03:54] <adu> how do I parse the grammar then?

[03:54] *** xenu_ joined
[03:54] <diakopter> r: https://gist.github.com/2641674

[03:54] <p6eval> rakudo 415791: OUTPUT«Could not find symbol 'dreme::datum::Grammar::&TOP'␤  in block <anon> at /tmp/ekUGDqcmae:88␤␤»

[03:55] <PerlJam> adu: dreme::datum::Grammar.parse($string);  # assuming you meant use the grammar to parse something

[03:55] <diakopter> r: https://gist.github.com/2641674

[03:55] <p6eval> rakudo 415791: OUTPUT«Method 'ww' not found for invocant of class 'dreme::datum::Grammar'␤  in regex ws at /tmp/aDpwCyHU4r:11␤  in regex datum at /tmp/aDpwCyHU4r:31␤  in regex TOP at /tmp/aDpwCyHU4r:3␤  in method parse at src/gen/CORE.setting:8932␤  in block <anon> at /tmp/aDpwCyHU4r:88…

[03:55] <diakopter> hmm

[03:56] <adu> PerlJam: that gives me: "Could not find symbol 'dreme::datum::&Grammar'"

[03:57] <adu> there must be something I'm missing about packages or importing

[03:57] <diakopter> it worked ("broke") in my gist

[03:57] <diakopter> maybe loading Grammars from another file doesn't work

[03:57] <diakopter> it might not be implemented

[03:57] <PerlJam> diakopter: it does work.

[03:57] <diakopter> or spec'd, for that matter

[03:57] <diakopter> oh

[03:58] <PerlJam> ww might not be implemented though

[03:58] <diakopter> adu: see my gist?

[03:59] <adu> so you put it in the same file

[03:59] <PerlJam> Hmm

[03:59] <adu> that'll do for now

[04:00] <PerlJam> adu: it works in separate files too, but it dies the same way as diakopter's gist

[04:00] <adu> this is why I wanted to run it :)

[04:00] <adu> so I could get feedback

[04:01] <PerlJam> something weird is going on with <ww>

[04:01] <diakopter> n: https://gist.github.com/2641674

[04:01] <p6eval> niecza v17-2-gb8fcf85: OUTPUT«Unhandled exception: Unable to resolve method ww in class Grammar␤  at /tmp/CR6C7oeO3w line 16 (Grammar.ws @ 3) ␤  at /tmp/CR6C7oeO3w line 36 (Grammar.datum @ 4) ␤  at /tmp/CR6C7oeO3w line 11 (Grammar.TOP @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line…

[04:01] <adu> I also have a lot of missing rules

[04:03] <adu> diakopter: PerlJam: thanks!

[04:05] <diakopter> yw

[04:11] *** vlixes joined
[04:14] <adu> bizarre,

[04:14] <adu> the first argument is @*ARGS[0]

[04:15] <adu> I thought it would be $*ARGS[0]

[04:15] <PerlJam> adu: but @*ARGS is an array

[04:16] <adu> must be thinking of perl5

[04:16] <adu> oops

[04:16] <PerlJam> yeah, in perl5 the sigil changes, not in Perl 6

[04:20] *** warp0x00 joined
[04:20] <warp0x00> is it ready yet

[04:20] <PerlJam> warp0x00: is what ready?

[04:21] <warp0x00> dinner

[04:21] <PerlJam> and ready for what exactly?

[04:21] <warp0x00> me to eat

[04:21] <diakopter> hm

[04:22] <adu> lol

[04:25] *** Entonian joined
[04:28] <warp0x00> perl6: say 3;

[04:28] <p6eval> pugs, rakudo 415791, niecza v17-2-gb8fcf85: OUTPUT«3␤»

[04:28] <warp0x00> perl5: say 3;

[04:29] <warp0x00> what is with the u+2424

[04:30] <warp0x00> i must be missing a font

[04:30] <PerlJam> you don't like newlines?

[04:30] <warp0x00> is that what that is

[04:30] <PerlJam> ah, yes.  that's a newline symbol

[04:30] <warp0x00> what font do i need for that

[04:30] <diakopter> small N and L

[04:30] <diakopter> depends on your platform

[04:31] <warp0x00> debian gnu/linux 6.0

[04:34] <warp0x00> so once various compilers pass all the tests

[04:34] <warp0x00> does that mean it its time to write more tests

[04:34] *** Entonian left
[04:35] <adu> I'm using gnu-unifont, and I can see NL just fine

[04:35] <warp0x00> idk what that is

[04:35] <warp0x00> and aptitude finds nothing

[04:36] <warp0x00> ah its just called unifont

[04:36] <adu> http://unifoundry.com/unifont.html

[04:36] <warp0x00> downloading

[04:36] *** bonsaikitten is now known as DrEeevil

[04:36] <warp0x00> i have a plush bonsai kitten

[04:37] <warp0x00> adu, welp i assume th next time i restart x or my client it will work

[04:38] <adu> if you're on linux, you might have to log out

[04:38] <adu> i dunno

[04:38] <warp0x00> more like bug out

[04:39] <warp0x00> just the program 

[04:39] <warp0x00> i can see it now

[04:40] <warp0x00> p6eval: print 3;

[04:41] <warp0x00> perl6: print 3;

[04:41] <p6eval> pugs, rakudo 415791, niecza v17-2-gb8fcf85: OUTPUT«3»

[04:41] <warp0x00> perl6: print 3.$\;

[04:41] <p6eval> niecza v17-2-gb8fcf85: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unsupported use of $\ variable; in Perl 6 please use the filehandle's :ors attribute at /tmp/ptYB9JlSQ2 line 1:␤------> [32mprint 3.$\[33m⏏[31m;[0m␤␤Parse failed␤␤»

[04:41] <p6eval> ..rakudo 415791: OUTPUT«===SORRY!===␤Unsupported use of $\ variable;  in Perl 6 please use the filehandle's :ors attribute␤at /tmp/2kezzu296Z:1␤»

[04:41] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "\\;"␤    expecting variable name␤    at /tmp/EfD6KxSIrZ line 1, column 10␤»

[04:41] <TimToady> just use say

[04:42] <TimToady> perl6: say 3

[04:42] <p6eval> pugs, rakudo 415791, niecza v17-2-gb8fcf85: OUTPUT«3␤»

[04:42] <warp0x00> you just use say

[04:42] *** eternaleye joined
[04:42] <adu> hmm

[04:43] <adu> how do I get ws to not match?

[04:43] <adu> I'm getting the match "number => <1 #|comment|#>"

[04:43] <TimToady> use token instead of rule maybe

[04:43] *** warp0x00 left
[04:44] *** inchok78 joined
[04:44] <inchok78> hello all

[04:45] <adu> hello

[04:47] *** xenu_ left
[04:47] *** jaldhar left
[04:49] <inchok78> can u recommend webpages with stories of Perl 6 used for production work?

[04:49] <inchok78> join #kubuntu

[04:51] <inchok78> (boy am I rusty)

[04:52] *** wolfman2000 left
[04:52] * sisar is having fun and wasting time with https://ie.microsoft.com/testdrive/Graphics/TouchEffects/

[04:54] <sorear> inchok78: 'stories' isn't really how stuff gets done.

[04:54] <sorear> masak might havge something, but he won't be here for a few more hours

[04:55] <sorear> also, 'production' is a pretty nebulous concept

[04:56] <sorear> we once had a user in #mono come in asking if it was production ready... after much harassing, I got them to admit their goal: create a website able to serve equal or greater traffic load to Wikipedia

[04:56] <inchok78> ok... non-technical people trying to get a 30000 feet feeling for whether Perl 6 is able to be a player in a project BEFORE the programmers get involved...

[04:57] <inchok78> this is about connecting a heart recording device to a remote database

[04:57] <diakopter> I think a good definition of used in production is: used in business or large-scale personal activities

[04:57] <inchok78> forgive my ignorance and if my tone is not right, forgive that too

[04:57] <diakopter> :)

[04:57] <diakopter> there's lots of forgiveness around here

[04:57] <sorear> inchok78: I'm not mad at you

[04:58] <inchok78> yeah. i used to do scripting in 5.8 or something, when the universe was young. now i do project for big research and haven't touched a proper programming lang. in 5 yrs 

[04:58] *** xenu joined
[04:59] <sorear> Perl 5 and Perl 6 are being developed concurrently

[04:59] *** xenu is now known as Guest45159

[04:59] <sorear> Perl 5 is still a lot faster and is less likely to break on you

[04:59] <inchok78> oh

[05:00] <inchok78> (i used to keep tabs on pugs back in the day)

[05:01] <sorear> for various regrettable reasons, Perl 6 did a lot of stalling back in the mid-2010s

[05:01] <diakopter> inchok78: to get that 30000 feet feeling would be difficult at this point, I think.

[05:02] <inchok78> mmhhhh

[05:03] <sorear> I'm the main developer of one of the currently active implementations and I have a lot of forest/trees problems, yeah

[05:03] <sorear> performance (broadly construed) of implmentations currently... in a word, inconsistantg

[05:04] <sorear> some things work compellingly better than Perl 5.  other things will cause major slowdows.  You don't get to know in advance

[05:04] <sorear> is this a project which requires certainty or high speed?  if so, definitely stay away from 6

[05:05] *** kboga left
[05:05] *** Guest45159 left
[05:05] <inchok78> got that. i will do my due diligence

[05:05] *** kboga joined
[05:05] <inchok78> just for curiosity, what is the implementation you're working on?

[05:05] *** Guest46584 left
[05:06] *** xenu_ joined
[05:06] <diakopter> niecza

[05:06] *** infosophy joined
[05:06] <diakopter> https://github.com/sorear/niecza

[05:07] *** infosophy is now known as Guest35406

[05:07] <inchok78> thanks... will look it up on the windows machine... this here kubuntu has no web access

[05:08] <sorear> fwiw, niecza works fine on mono

[05:09] <sorear> oh, wait, if you haven't looked it up yet you must not be commenting on that

[05:09] <inchok78> my wife is a mono guru. i am not currently into programming but want to get back on soooo badly

[05:09] *** sisar left
[05:10] <sorear> inchok78: I'm sorry I can't give a straight answer.  I won't say "use Perl 6" because there are a zillion things that are still very much broken with it.  I won't say "avoid it" because there are even more things that work fine.

[05:11] <inchok78> i guess that sums it up. looking niecza on the other computer, but pretty aware this is mostly to satisfy my curiosity at this point

[05:12] *** sisar joined
[05:12] *** xenu_ left
[05:13] <sorear> another note... popular perception of Perl 6 among programmers is still mostly at the "dismal failure" stage

[05:14] <diakopter> and they're probably mostly right, by their definition of dismal failure.

[05:14] <inchok78> i clearly recall that was the feeling on reddit a few years ago, but then left that too (...)

[05:14] <sorear> the community was in a sorry state 2-3 years ago, and sometimes information propagates amazingly slowly through the internet

[05:15] <adu> I think perl6 definitely needs more tutorials

[05:15] <TimToady> if success is eventually defined by not letting the bastards wear you down, we've gotten real good at that part of it :)

[05:15] <TimToady> the tutorials could use work though :)

[05:17] <diakopter> to amend my previous statement, I agree that there is also lots of false information believed.

[05:20] <adu> YEY

[05:20] <adu> http://pastebin.com/GJ3enmmw

[05:21] <adu> 0 to Scheme in less than a day!

[05:21] <diakopter> anyone like/dislike my definition of used in production?

[05:21] <diakopter> adu++ # most impressive

[05:22] <inchok78> may I say, usage of "production" differs slightly across segments of industry

[05:23] <inchok78> in my case, since it involves clinical/medical/veterinarian, a production system is one that has been validated to comply with applicable laws and regulations and is used to produce (quack!) information that is to be delivered to a customer

[05:23] *** shinobicl joined
[05:23] <TimToady> production, in the case of a language, also implies more commitment to backward compatibility than you're likely to find yet in Perl 6

[05:24] <adu> Go took that step recently

[05:24] <adu> they released "Go 1"

[05:24] <inchok78> (even though you'd be surprised what crap can be validated by the naive organization)

[05:24] <TimToady> yes, and we'll get there as soon as our implementations and specs/tests converge on each other

[05:26] <shinobicl> hi,,, i'm finished a module for perl6. i dont think it's ready for the ecosystem, though. But i think is good enough for a beta version. 

[05:26] <TimToady> at that point we'll also provide the user the ability to freeze at a particular semantic version, even if emulated by something newer

[05:26] <shinobicl> https://github.com/shinobi/p6/tree/master/Date-WorkdayCalendar

[05:26] <adu> diakopter: thanks

[05:26] *** shinobicl left
[05:27] <adu> diakopter: I think "used in production" has more to do with risk than business or large-ness

[05:27] *** xenu_ joined
[05:28] <diakopter> I think you and TimToady are defining "production ready", which is different from what I was defining

[05:29] <adu> like keeping 1 person's heart beating isn't large or busy, but the risk of railure is high

[05:29] <adu> fail

[05:29] <diakopter> that's definitely a business activity

[05:29] <adu> i suppose

[05:30] *** shinobicl joined
[05:32] *** shinobicl left
[05:34] *** carlin left
[05:35] *** inchok78 left
[05:36] *** shinobicl_ joined
[05:37] *** am0c joined
[05:37] <TimToady> shinobicl_: \o/

[05:38] * diakopter is still reading WorkdayCalendar.pm

[05:38] <shinobicl_> hi... had to switch computers...

[05:38] <shinobicl_> i'm on a tablet now :(

[05:38] <diakopter> ooo repeat-until

[05:39] *** leprevost left
[05:42] <diakopter> shinobicl++ # it looks neat

[05:42] <diakopter> shinobicl_: which implementation(s) did you develop on?

[05:42] <shinobicl_> rakudo only

[05:43] <shinobicl_> afaik niecza does not have Date yet

[05:43] <diakopter> oh

[05:43] <adu> crap

[05:43] <diakopter> I wish I knew enough to comment on how idiomatic it is

[05:44] <adu> parrot won't let me do that

[05:44] <shinobicl_> do what?

[05:46] *** kaleem joined
[05:48] <adu> have 2 languages

[05:55] <adu> ergh

[05:55] *** NamelessTee joined
[06:00] *** xenu_ left
[06:03] *** odoacre_ left
[06:05] *** xenu joined
[06:05] *** xenu is now known as Guest74289

[06:07] *** odoacre joined
[06:24] *** wtw joined
[06:27] *** Guest74289 left
[06:37] *** xenu joined
[06:38] *** xenu is now known as Guest51091

[06:39] *** fhelmberger joined
[06:47] <moritz> \o

[06:48] <adu> hi moritz 

[06:50] <moritz> r: say 241025348275725.3352

[06:50] <p6eval> rakudo 415791: OUTPUT«241025348164334␤»

[06:50] <moritz> r: say 241025348275725.3352.WHAT

[06:50] <p6eval> rakudo 415791: OUTPUT«Rat()␤»

[06:51] <moritz> wtbh

[06:51] <moritz> r: say 241025348275725.WHAT

[06:51] <p6eval> rakudo 415791: OUTPUT«Int()␤»

[06:51] <moritz> r: say 241025348275725

[06:51] <p6eval> rakudo 415791: OUTPUT«241025348275725␤»

[06:51] <adu> r: say (a=>1).WHAT

[06:51] <p6eval> rakudo 415791: OUTPUT«Pair()␤»

[06:52] <adu> r: say :a(1).WHAT

[06:52] <p6eval> rakudo 415791: OUTPUT«Pair()␤»

[06:52] <diakopter> wtbh?

[06:53] <adu> diakopter: which one?

[06:53] <diakopter> I'm asking what wtbh means

[06:53] <moritz> what the bloody hell

[06:54] <diakopter> oh; heh

[06:54] <adu> I'm guessing moritz is not from texas

[06:54] <moritz> no, I'm not

[06:54] * diakopter is

[06:54] <adu> wow

[06:54] <moritz> I'm closer to great britain than to use US, which might explain some of my vocabulary :-)

[06:55] <diakopter> but I live in Cali now

[06:55] <moritz> r: say 241025348275725.3352.perl

[06:55] <p6eval> rakudo 415791: OUTPUT«301281685344656669/1250␤»

[06:56] <moritz> so it's just Rat.Str that is broken

[06:56] <moritz> phew

[06:56] <moritz> for a moment I thought the number parsing code is off again

[06:56] *** goraki joined
[06:56] <diakopter> did you see TimToady's r2s?

[06:56] <moritz> no

[06:57] <diakopter> in the backlog he gisted one

[06:57] <moritz> ok

[06:57] <diakopter> but it didn't work in p6eval parrot because of different word size

[06:57] <diakopter> but it worked on TimToady's local rakudo

[06:58] *** vlixes left
[06:58] <diakopter> if I recall correctly

[06:59] <diakopter> me++ for exposing the bug

[07:00] <diakopter> well, masak++ too

[07:00] <diakopter> karma me

[07:00] <aloha> me has karma of 1.

[07:00] <diakopter> giggle

[07:00] <adu> lol

[07:00] <adu> karma adu

[07:00] <aloha> adu has karma of 1.

[07:00] <adu> yey

[07:02] <moritz> ok, the real problem is that Rat.floor falls back to Num, which it should not

[07:02] <jnthn> morning, #perl6

[07:02] <diakopter> ahoy

[07:02] <adu> hi jnthn 

[07:02] * jnthn is teaching today and will be fairly distracted. But I'm aboutish :)

[07:03] <moritz> \o jnthn 

[07:03] <moritz> r: say (-9) div 4

[07:03] <p6eval> rakudo 415791: OUTPUT«-2␤»

[07:04] *** zby_home joined
[07:04] <diakopter> r: say (-9) mod 4

[07:04] <sisar> ^ thats the same bug i reported a few days back :)

[07:04] <p6eval> rakudo 415791: OUTPUT«-1␤»

[07:04] <moritz> sisar: I know

[07:05] <moritz> sisar: and I have to take it into account when fixing Rat.floor

[07:05] <adu> how is that a bug?

[07:05] <sisar> oh right. :)

[07:05] <moritz> adu: div is supposed to round down

[07:05] <moritz> adu: not towards zero

[07:06] <sisar> adu: "$x div $y == floor($x/$y)"

[07:06] <sisar> yeah, what moritz++ said

[07:06] <adu> I wrote a blog entry about that

[07:06] <sisar> "round down" ~~ "round towards -Inf " :)

[07:06] <adu> http://straymindcough.blogspot.com/2012/02/survey-of-divmod.html

[07:07] *** fridim_ left
[07:08] <moritz> adu++ # nice survey

[07:08] <adu> :) thanks

[07:09] *** Guest51091 left
[07:10] *** alim joined
[07:10] *** xenu_ joined
[07:12] *** raiph joined
[07:13] *** shinobicl_ left
[07:14] *** lestrrat left
[07:15] *** daxim left
[07:15] *** lestrrat joined
[07:17] *** xenu_ left
[07:18] *** xinming_ joined
[07:21] *** xinming left
[07:22] *** kresike joined
[07:24] *** fglock joined
[07:26] *** NamelessTee left
[07:28] *** scott_ joined
[07:28] *** scott_ is now known as Guest11403

[07:28] *** Guest52272 left
[07:30] *** sisar left
[07:32] *** alim left
[07:35] *** raiph left
[07:43] *** lestrrat left
[07:44] *** lestrrat joined
[07:47] <moritz> n: say <1/3>.gist

[07:47] <p6eval> niecza v17-2-gb8fcf85: OUTPUT«0.33333333333333331␤»

[07:47] *** xenu joined
[07:48] *** xenu is now known as Guest71582

[07:48] *** Guest11403 left
[07:49] <dalek> rakudo/nom: 2abb9b7 | moritz++ | src/core/Rat.pm:

[07:49] <dalek> rakudo/nom: fix Rat.floor

[07:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2abb9b7205

[07:49] <dalek> rakudo/nom: b0cd3cb | moritz++ | src/core/Rat.pm:

[07:49] <dalek> rakudo/nom: rewrite Rat.Str to use code by TimToady++

[07:49] <dalek> rakudo/nom: 

[07:49] <dalek> rakudo/nom: in particular it does not go through Num now

[07:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b0cd3cbb00

[07:49] <dalek> rakudo/nom: 24ffc9c | moritz++ | src/core/Str.pm:

[07:49] <dalek> rakudo/nom: Revert "add native str concatenation op"

[07:49] <dalek> rakudo/nom: 

[07:50] <dalek> rakudo/nom: This reverts commit ad3a7b6403d430a681a497b9ec4b67d0eeeacd52.

[07:50] <dalek> rakudo/nom: It lead to occasional segfaults in splice.t

[07:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/24ffc9c725

[07:50] <dalek> roast: bc7e40e | moritz++ | S32-num/rat.t:

[07:50] <dalek> roast: test stringification of big Rats (RT #112822)

[07:50] <dalek> roast: review: https://github.com/perl6/roast/commit/bc7e40ec50

[07:50] <moritz> note that this fails a few tests in t/spec/S32-num/stringify.t; I'll take care of them later today

[07:50] <adu> nom nom

[07:52] <diakopter> p6eval: rebuild rakudo

[07:52] <diakopter> I forget the lingo

[07:52] <moritz> diakopter: that functionality is gone

[07:53] <diakopter> oh :)

[07:53] <moritz> diakopter: lost in the move to a different box

[07:56] <dalek> roast: 59349dc | moritz++ | S32-num/rounders.t:

[07:56] <dalek> roast: unfudge rounders.t for rakudo

[07:56] <dalek> roast: review: https://github.com/perl6/roast/commit/59349dcf48

[08:00] *** estrai left
[08:00] *** estrai joined
[08:02] *** daxim joined
[08:04] *** alim joined
[08:04] *** adu left
[08:07] *** bbkr1 left
[08:08] *** Guest71582 left
[08:10] *** rindolf joined
[08:13] <diakopter> n: $_="pattern"; s[pattern] = say(44)

[08:13] <p6eval> niecza v17-2-gb8fcf85: OUTPUT«44␤»

[08:13] <diakopter> interesting

[08:18] *** xenu_ joined
[08:18] <moritz> diakopter: what did you expect?

[08:19] <diakopter> oh; I was just testing out what I was reading in S05

[08:19] <diakopter> didn't have an expectation

[08:20] <diakopter> I guess "interesting" meant "interesting that it worked"

[08:21] *** xenu_ left
[08:24] *** fgomez left
[08:24] <moritz> that's the good kind of "interesting" :-)

[08:24] <moritz> afk

[08:26] *** odoacre left
[08:27] *** odoacre joined
[08:28] <dalek> Perlito: b8def8a | (Flavio S. Glock)++ | / (4 files):

[08:28] <dalek> Perlito: Perlito5 - javascript: add GLOB references

[08:28] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/b8def8ac37

[08:33] *** xenu_ joined
[08:37] *** carlin joined
[08:39] *** xenu_ left
[08:39] *** xenu joined
[08:40] *** xenu is now known as Guest82894

[08:42] *** Guest82894 left
[08:45] *** carlin left
[08:47] *** lestrrat left
[08:48] *** lestrrat joined
[08:52] <dalek> Perlito: 47648d1 | (Flavio S. Glock)++ | README-perlito5-js:

[08:52] <dalek> Perlito: Perlito5 - javascript data model: about compile-time lexicals

[08:52] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/47648d1033

[08:53] *** am0c left
[08:53] *** preflex left
[08:53] *** sporous left
[08:57] <colomon> moritz: DId you change Rat.floor and Rat.Str because Rat.Num is wrong?

[08:58] <moritz> colomon: because Rat.Num isn't precise enough for large rats

[08:59] *** xenu_ joined
[08:59] <colomon> won't that affect all uses of Rat.Num, not just those two?

[08:59] *** dakkar joined
[09:00] <moritz> no, I didn't touch Rat.Num

[09:00] <colomon> not your changes, the imprecision problem.

[09:00] <moritz> colomon: well, Num only has that much precision. Users of Rat.Num have to work with that.

[09:01] <moritz> it's not that Rat.Num is too imprecise, it's that Num is too imprecise

[09:04] <rindolf> fglock: here?

[09:05] <colomon> r: say 3875928375982735.383854792874359827349682.floor

[09:05] <p6eval> rakudo 24ffc9: OUTPUT«3875928375982735␤»

[09:05] <colomon> r: say 3875928375982735.383854792874359827349682.ceil

[09:05] <p6eval> rakudo 24ffc9: OUTPUT«Method 'ceil' not found for invocant of class 'Rat'␤  in block <anon> at /tmp/Zsk1OGwc_u:1␤␤»

[09:05] *** alim left
[09:06] <jnthn> ain't it .ceiling

[09:06] <colomon> r: say 3875928375982735.383854792874359827349682.ceiling

[09:06] <p6eval> rakudo 24ffc9: OUTPUT«3875928375982730␤»

[09:06] <fglock> rindolf: hi!

[09:06] <moritz> .ceiling not yet fixed

[09:07] <colomon> r: say 3875928375982735.383854792874359827349682.floor.Num

[09:07] <p6eval> rakudo 24ffc9: OUTPUT«3.87592837598274e+15␤»

[09:07] <rindolf> fglock: hi.

[09:07] <sorear> r: say 3875928375982735.383854792874359827349682.WHAT

[09:07] <p6eval> rakudo 24ffc9: OUTPUT«Rat()␤»

[09:07] <jnthn> .oO( ceiling still floored )

[09:07] <sorear> r: say '383854792874359827349682'.chars

[09:07] <p6eval> rakudo 24ffc9: OUTPUT«24␤»

[09:07] <fglock> :)

[09:07] <rindolf> fglock: what's up?

[09:08] <sorear> r: say 3875928375982735.383854792874359827349682.denominator

[09:08] <p6eval> rakudo 24ffc9: OUTPUT«500000000000000000000000␤»

[09:08] <sorear> r: say 3875928375982735.383854792874359827349682.denominator.chars

[09:08] <p6eval> rakudo 24ffc9: OUTPUT«24␤»

[09:08] <sorear> does rakudo know the difference between rats and fatrats?

[09:08] <fglock> rindolf: all is fine, hope you are well too

[09:08] <sorear> a number that long ought to be a Num

[09:09] <sorear> r: say (2**64).chars

[09:09] <p6eval> rakudo 24ffc9: OUTPUT«20␤»

[09:09] <rindolf> fglock: why are the Perlito -I  paths limited to 20 characters or so? I tried setting up a shell script to run it from its installation path (to test if some of my CPAN code works with it), and it trimmed the path and complained about missing modules.

[09:09] <colomon> n: say 3875928375982735.383854792874359827349682.WHAT

[09:09] <p6eval> niecza v17-2-gb8fcf85: OUTPUT«Num()␤»

[09:10] <sorear> r: say pi.WHAT

[09:10] <p6eval> rakudo 24ffc9: OUTPUT«Num()␤»

[09:10] <fglock> rindolf: that's perlito5, right? are you using perl5 or node.js backend?

[09:10] <rindolf> fglock: yes, it's Perlito5 - I think it happens with both.

[09:11] *** xenu_ left
[09:12] <fglock> rindolf: stupid bug:         $lib = substr($ARGV[0], 2, 10); # no idea why it is limited

[09:12] <fglock> I'll fix

[09:12] <rindolf> fglock: thanks!

[09:12] <masak> mornin', #perl6

[09:12] <fglock> I think it was copy-pasted from some other line

[09:12] *** xenu_ joined
[09:12] <sorear> hi masak.

[09:12] <tadzik> hi masak 

[09:13] <rindolf> masak: good morning.

[09:13] <sorear> (I will sleep& as soon as someone notices my Rakudo query, maybe sooner)

[09:14] <dalek> Perlito: 933767d | (Flavio S. Glock)++ | / (2 files):

[09:14] <dalek> Perlito: Perlito5 - unlimited -I path (rindolf++)

[09:14] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/933767d66d

[09:14] <sorear> sleep&

[09:15] <jnthn> Rakudo certainly makes a Rat/FatRat distinction. I think it 

[09:15] <jnthn> oops

[09:15] <jnthn> think it does it at the point of operation.

[09:15] <rindolf> fglock: ah, without a test. :-(

[09:16] *** xenu_ left
[09:17] <fglock> rindolf: btw about modules, Exporter.pm doesn't work yet because globs are still under implementation

[09:18] <rindolf> fglock: I see.

[09:19] <daxim> coke, you're my hero.  http://www.reddit.com/r/perl/comments/tdq8h/perl_6_compiler_passes_22k_of_24k_specification/

[09:19] <colomon> jnthn: looking at the code, it looks to me like Rakudo makes the Rat / FatRat distinction but only when doing operations on Rat; it appears to allow you to construct what should be illegal Rats.

[09:20] <colomon> r: say Rat.new(10, 45984695385934859843905893789385943859038590839485983).WHAT

[09:20] <p6eval> rakudo 24ffc9: OUTPUT«Rat()␤»

[09:20] <colomon> guess it is a bit of an interesting question what that should do

[09:20] <colomon> n: say Rat.new(10, 45984695385934859843905893789385943859038590839485983).WHAT

[09:20] <p6eval> niecza v17-2-gb8fcf85: OUTPUT«Num()␤»

[09:21] <masak> would someone like to help me put together a good reply to http://www.reddit.com/r/perl/comments/tdq8h/perl_6_compiler_passes_22k_of_24k_specification/c4lvyhw ?

[09:22] *** xenu_ joined
[09:22] <moritz> masak: I'm in a meeting, but after that I'll help you

[09:23] <masak> here's what I have so far: S29 specifies fork/wait.

[09:24] <masak> Rakudo certainly doesn't implement it. does Parrot have it? don't know. does Niecza implement it? will find out.

[09:24] <masak> Rakudo implements IO and sockets. don't know about Niecza -- guessing not. Rakudo doesn't have async stuffs yet.

[09:25] <masak> C embedding -- see zavolaj.

[09:25] *** xenu_ left
[09:25] <masak> CPAN -- see, to a limited extent, blizkost.

[09:25] <arnsholt> masak: In re ZeroMQ, it's in my inqueue of stuff to do

[09:25] <phenny> arnsholt: 08 May 18:57Z <moritz> ask arnsholt if anything is blocking the merge of the cstr branches

[09:26] <arnsholt> Just blocking on tuits

[09:26] <arnsholt> And that, right

[09:26] <arnsholt> No, nothing blocking to my knowledge. Just never got around to it

[09:31] <arnsholt> I'll try to get it merged today

[09:32] *** xenu_ joined
[09:34] <colomon> n: say "3875928375982735.383854792874359827349682".FatRat

[09:34] <p6eval> niecza v17-2-gb8fcf85: OUTPUT«3875928375982735.5␤»

[09:35] <colomon> r: say "3875928375982735.383854792874359827349682".FatRat

[09:35] <p6eval> rakudo 24ffc9: OUTPUT«Method 'FatRat' not found for invocant of class 'Str'␤  in block <anon> at /tmp/3yoEonTvzo:1␤␤»

[09:35] *** xenu_ left
[09:35] <colomon> r: say "3875928375982735.383854792874359827349682".Rat

[09:35] <p6eval> rakudo 24ffc9: OUTPUT«3875928375982735.383854792874359809218276␤»

[09:39] <tadzik> masak: Rakudo has .poll for non-blocking stuff though

[09:39] <tadzik> MuEvent uses those

[09:40] <tadzik> still, the .poll we have is quite LTA

[09:42] <masak> ok.

[09:42] <masak> arnsholt: ok, great.

[09:42] <tadzik> and I know of no fork besides the one we were using through NativeCall

[09:42] <masak> S29 specifies it.

[09:44] <arnsholt> masak: But if people want/need it, I'd be happy to provide help with Zavolajing up an interface

[09:47] <masak> \o/

[09:49] <arnsholt> Hmm. I should ask the missus if she'd consider a trip to Frankfurt in late August

[09:49] <arnsholt> Also, get around to submitting a Zavolaj talk

[09:50] *** xenu joined
[09:50] *** xenu is now known as Guest40955

[09:50] *** sisar joined
[09:55] <masak> \o/

[09:56] *** araujo left
[09:56] <masak> when I read https://6guts.wordpress.com/2012/05/08/since-the-hackathon/ this morning -- jnthn++ -- I got the feeling that, wow, we're really building up steam now. have we even been this productive?

[09:59] <dalek> tablets: cefc0f9 | (Herbert Breunung)++ | docs/appendix-a-index.txt:

[09:59] <dalek> tablets: add some links for regex modifier and num types

[09:59] <dalek> tablets: review: https://github.com/perl6/tablets/commit/cefc0f9a97

[10:03] <masak> r: my $var = 5; say $var; { say $var; temp $var = 42; say $var }; say $var

[10:03] <p6eval> rakudo 24ffc9: OUTPUT«5␤5␤42␤5␤»

[10:03] <masak> \o/

[10:04] * masak starts a background job in his brain to find out what fun uses 'temp' can be put to

[10:06] <tadzik> hmm

[10:07] <frettled> masak: I was very jnthn++ when I read about temp and let

[10:07] <tadzik> r: my $a = 3; sub transaction { temp $a = 7; say "a = $a. Commiting"; OUTER::$a = $a }; transaction(); say $a

[10:07] <p6eval> rakudo 24ffc9: OUTPUT«===SORRY!===␤Unable to parse blockoid, couldn't find final '}' at line 2␤»

[10:07] <frettled> I think I have around a bazillion use cases, give or take a few fantazillions.

[10:08] <tadzik> r: my $a = 3; sub transaction { temp $a = 7; say "a = $a. Commiting"; OUTER::<$a> = $a }; transaction(); say $a

[10:08] <p6eval> rakudo 24ffc9: OUTPUT«a = 7. Commiting␤3␤»

[10:08] <tadzik> meh

[10:08] <tadzik> oh, right

[10:08] <tadzik> r: my $a = 3; sub transaction { let $a = 7; say "a = $a. Commiting"; OUTER::<$a> = $a }; transaction(); say $a

[10:08] <p6eval> rakudo 24ffc9: OUTPUT«a = 7. Commiting␤7␤»

[10:11] <masak> r: my $a = 3; sub transaction { let $a = 7; say "a = $a. Commiting" }; transaction(); say $a

[10:11] <p6eval> rakudo 24ffc9: OUTPUT«a = 7. Commiting␤7␤»

[10:11] <masak> don't need the OUTER::<$a> thing.

[10:11] <masak> just make sure not to fail out of that block ;)

[10:12] <tadzik> huh

[10:12] <tadzik> okay, I don

[10:12] <tadzik> 't get it :)

[10:12] <masak> that's what "let" does. it's "set this variable to this value... but if we start backtracking/failing, revert it".

[10:13] <masak> r: my $a = 42; sub foo { let $a = "this will never stick"; say $a; fail }; say $a; foo; say $a

[10:13] <p6eval> rakudo 24ffc9: OUTPUT«42␤this will never stick␤this will never stick␤»

[10:13] <masak> o.O

[10:13] * masak submits rakudobug

[10:14] <tadzik> :>

[10:14] <masak> my hands are cursed.

[10:14] <masak> jus' gonna make sure that's how 'let' is actually spec'd.

[10:15] <masak> There is also a C<let> function that sets a

[10:15] <masak> hypothetical value.  It works exactly like C<temp>, except that the

[10:15] <masak> value will be restored only if the current block exits unsuccessfully.

[10:15] <masak> exhibit A.

[10:15] <moritz> r: sub f { LEAVE say 'leaving A' ; fail "foo"; }; f

[10:15] <p6eval> rakudo 24ffc9: OUTPUT«leaving A␤»

[10:16] <masak> In any case, returning an unthrown exception is considered failure

[10:16] <masak> from the standpoint of C<let>.

[10:16] <masak> exhibit B.

[10:16] <masak> it's a bug.

[10:18] *** avar joined
[10:18] *** avar left
[10:18] *** avar joined
[10:25] <moritz> r: sub f { UNDO say 'leaving A' ; fail "foo"; }; f

[10:25] <p6eval> rakudo 24ffc9:  ( no output )

[10:26] *** Guest40955 left
[10:26] *** sisar left
[10:27] *** xenu_ joined
[10:27] <masak> yeah. should trigger.

[10:28] <moritz> same underlying cause

[10:28] <jnthn> Hmm, what underlies that one?

[10:28] <moritz> because let uses an UNDO to restore the state

[10:28] <jnthn> And UNDO...doesn't trigger here?

[10:30] <colomon> std: 'abc  def' ~~ ms/abc def/

[10:30] <p6eval> std f4748eb: OUTPUT«Use of uninitialized value $x in pattern match (m//) at STD.pm line 66537.␤Use of uninitialized value $x in concatenation (.) or string at STD.pm line 66576.␤[31m===[0mSORRY![31m===[0m␤Bogus term at /tmp/uhlig4Lkiw line 1 (EOF):␤------> [32m'abc  def' ~~ ms/abc …

[10:30] <colomon> :\

[10:30] <colomon> n: 'abc  def' ~~ ms/abc def/

[10:30] <p6eval> niecza v17-2-gb8fcf85: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Bogus term at /tmp/a7iNtI9TEu line 1 (EOF):␤------> [32m'abc  def' ~~ ms/abc def/[33m⏏[31m<EOL>[0m␤␤Undeclared routines:␤     'def' used at line 1␤   'ms' used at line 1␤␤Parse failed␤␤»

[10:31] <colomon> std: 'abc  def' ~~ m:s/abc def/

[10:31] <p6eval> std f4748eb: OUTPUT«ok 00:00 42m␤»

[10:31] <colomon> n: 'abc  def' ~~ m:s/abc def/

[10:31] <p6eval> niecza v17-2-gb8fcf85:  ( no output )

[10:32] *** snearch joined
[10:34] *** snearch left
[10:36] <masak> are next/redo/last (or a subset of those) meant to trigger UNDO?

[10:36] <masak> it feels odd for them to trigger KEEP...

[10:37] <masak> though I seem to be able to say that with a bit more certainty about next and last than about redo. curious :)

[10:39] <tadzik> (Perl 5 question, or is it?) having a sub like "do_something_ok" used for testing, is there a way to, somehow, test if it fails?

[10:41] <masak> you want to test the testing function?

[10:41] <masak> (just trying to understand your question)

[10:42] <masak> depends how it fails, I guess.

[10:42] <tadzik> not really

[10:42] <tadzik> I have a function which does use ok() inside itself

[10:42] <tadzik> I want to test its opposite reaction, somehow. I expect this test to fail

[10:43] <tadzik> so I really want something like that_function_nok(), but it's not available

[10:43] <masak> right.

[10:43] <moritz> invokes_like &function, $result, $string;

[10:43] <masak> localize &ok to mean &nok :P

[10:44] <masak> though moritz++' proposal is probably saner.

[10:44] <tadzik> where does invokes_like come from?

[10:45] <moritz> tadzik: you write it

[10:45] <tadzik> :)

[10:45] *** NamelessTee joined
[10:45] *** xenu_ left
[10:46] *** xenu joined
[10:47] * masak .oO( aw man! no-one told me when I went into this software business that I'd have to write stuff on my own! :( )

[10:47] *** xenu is now known as Guest16604

[10:47] <tadzik> I just thought it might be an already-solved problem

[10:48] <masak> you wanted to re-use stuff? what are you, a hippie? :P

[10:48] <tadzik> ;)

[10:48] <masak> "That's not how we do things in an Enterprise environment."

[10:49] <mikec__> heh

[10:50] *** Guest16604 left
[10:53] *** alim joined
[10:56] *** xenu_ joined
[11:01] *** xenu_ left
[11:05] *** fridim_ joined
[11:07] *** am0c joined
[11:08] <colomon> phenny: tell TimToady Just looking over quote:mm in Niecza and std, wondering if there was a copy and paste mistake.  Seems to me that maybe quote:mm is implemented the way quote:ms should have been (it's not there at all) and quote:mm should also have .tweak(:mm) ?

[11:08] <phenny> colomon: I'll pass that on when TimToady is around.

[11:10] *** JimmyZ joined
[11:12] <colomon> phenny: tell TimToady errr... or does quote:mm not make any sense at all?  "The :mm (or :samemark) variant may be used on a substitution...."

[11:12] <phenny> colomon: I'll pass that on when TimToady is around.

[11:16] *** xenu_ joined
[11:24] <moritz> mm// would be m:ignoremark//

[11:24] <moritz> just as ms is m:sigspace and ss is s:samespace

[11:24] <moritz> afk

[11:25] *** rindolf left
[11:32] *** xenu_ left
[11:35] *** immortal joined
[11:35] *** immortal left
[11:35] *** immortal joined
[11:35] *** mdcw`_ joined
[11:37] *** kst` joined
[11:38] *** ponbiki joined
[11:38] *** risou_ joined
[11:39] *** ranguard_ joined
[11:39] *** PerlPilot joined
[11:39] *** BooK__ joined
[11:39] *** moritz_ joined
[11:39] *** sivoais_ joined
[11:39] *** szabgab_ joined
[11:39] *** sirhc_ joined
[11:39] *** sirhc_ left
[11:39] *** sirhc_ joined
[11:40] <cognominal> p6: my int $a = "1"  # this should not kick up from rakudo REPL

[11:40] <p6eval> niecza v17-2-gb8fcf85: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Malformed my at /tmp/0IDibzbhXB line 1:␤------> [32mmy[33m⏏[31m int $a = "1"  # this should not kick up[0m␤␤Parse failed␤␤»

[11:40] <p6eval> ..pugs, rakudo 24ffc9:  ( no output )

[11:42] <cognominal> r: my int $a = "1" ; say $a

[11:42] <p6eval> rakudo 24ffc9: OUTPUT«1␤»

[11:42] *** erkan left
[11:42] *** phenny left
[11:42] *** hugme left
[11:42] *** risou left
[11:42] *** buubot_backup left
[11:42] *** sivoais left
[11:42] *** PerlJam left
[11:42] *** moritz left
[11:42] *** sirhc left
[11:42] *** hillu joined
[11:42] <mikec__> eee

[11:42] <colomon> moritz: the sigspace.t file seems to claim mm// implies :sigspace as well.  but that doesn't make sense to me, and I don't see any trace of it in S05

[11:42] <cognominal> strange, maybe this is due to local modifs

[11:42] *** hugme joined
[11:42] <masak> colomon: that might be a fossil.

[11:42] *** ChanServ sets mode: +v hugme

[11:43] <colomon> masak: or a thinko?

[11:43] <masak> masak: ISTR that mm// used to mean "match sigspace".

[11:43] <colomon> oh!

[11:43] <masak> the spec commit log can probably be trawled to confirm this, but... orka!

[11:44] <colomon> orka?

[11:44] *** buubot_backup joined
[11:48] *** bruges_ left
[11:49] *** bruges joined
[11:50] <colomon> hmmm.... The line mentioning ms// changed 18 months after the surrounding lines.

[11:50] <colomon> and the quote:mm in STD.pm6 certainly makes more sense if it used to me m:s//

[11:53] *** alim left
[11:53] *** alim joined
[11:54] <colomon> masak: fossil indeed: https://github.com/perl6/specs/commit/cb5919320430371ca0d76b4bb7727466ff45fd25

[11:55] <colomon> so, am I brave enough to patch STD.pm6 myself?

[11:56] *** skids left
[11:58] <jnthn> r: sub f { UNDO say 1; Mu }; f

[11:58] <p6eval> rakudo 24ffc9: OUTPUT«1␤»

[11:58] *** alim_ joined
[11:58] <jnthn> r: sub f { UNDO say 1; fail }; f

[11:58] <p6eval> rakudo 24ffc9:  ( no output )

[11:58] <jnthn> r: sub f { UNDO say 1; fail }; say f.defined

[11:58] <p6eval> rakudo 24ffc9: OUTPUT«False␤»

[11:58] <jnthn> r: sub f { UNDO say 1; fail }; say f.DEFINITE

[11:58] <p6eval> rakudo 24ffc9: OUTPUT«True␤»

[11:58] *** xenu joined
[11:58] <jnthn> Hmmm...I wonder if UNDO is considering DEFINITE or defined.

[11:59] *** xenu is now known as Guest86594

[11:59] *** fridim_ left
[12:01] *** alim left
[12:01] *** alim_ is now known as alim

[12:02] <dalek> roast: 8a1e45c | (Solomon Foster)++ | S05-modifier/sigspace.t:

[12:02] <dalek> roast: Turns out mm// should have been switched to ms// years ago.

[12:02] <dalek> roast: review: https://github.com/perl6/roast/commit/8a1e45cb73

[12:03] <jnthn>     /* Otherwise, need to consider the definedness of the return value. */

[12:03] <jnthn>     if (IS_CONCRETE(result))

[12:03] <jnthn> ...yeah, that'll not get failures.

[12:05] *** Guest86594 left
[12:05] <jnthn> It's a very easy fix, but I'm at $classroom right now. 

[12:11] <dalek> std: 8632387 | (Solomon Foster)++ | STD.pm6:

[12:11] <dalek> std: Change quote:mm to quote:ms, update Copyright for 2012.

[12:11] <dalek> std: review: https://github.com/perl6/std/commit/86323873e8

[12:11] *** sisar joined
[12:20] *** xenu_ joined
[12:20] <dalek> tablets: 4e43cd1 | (Herbert Breunung)++ | docs/appendix-a-index.txt:

[12:20] <dalek> tablets: minor fixes

[12:20] <dalek> tablets: review: https://github.com/perl6/tablets/commit/4e43cd1e44

[12:20] <colomon> don't think I've ever committed to std before.  I feel very daring.... ;)

[12:20] <dalek> niecza: daf09af | (Solomon Foster)++ | src/ (2 files):

[12:20] <dalek> niecza: Switch quote:mm to quote:ms and add an action for it.

[12:20] <dalek> niecza: review: https://github.com/sorear/niecza/commit/daf09afb6f

[12:21] <sisar> colomon++

[12:23] *** ponbiki left
[12:23] *** xenu_ left
[12:25] <dalek> tablets: e6c936a | (Herbert Breunung)++ | docs/ (6 files):

[12:25] <dalek> tablets: rename file of appendix F

[12:25] <dalek> tablets: review: https://github.com/perl6/tablets/commit/e6c936aecd

[12:28] *** bacek joined
[12:29] *** shinobicl_ joined
[12:30] *** xenu_ joined
[12:32] *** phenny joined
[12:36] *** xenu_ left
[12:36] *** sisar left
[12:37] <frettled> yay

[12:37] *** xenu_ joined
[12:44] <[Coke]> moritz_: that alert is several weeks too late. Thanks. ;)

[12:44] <[Coke]> Oh. You added a dot.

[12:44] <[Coke]> ARGLEBARGLE.

[12:45] <[Coke]> moritz_: is that spec? it's different than P5, no?

[12:45] *** birdwindupbird joined
[12:46] <[Coke]> moritz_: updated.

[12:47] * jnthn has laregly picked up the impression that this is somewhere we *should* be different from P5 :)_

[12:47] <[Coke]> TimToady: FYI, I'm pretty sure most of those badly named parrot config items came from p5 about 12 years ago. ;)

[12:51] <[Coke]> daxim++

[12:52] *** xenu_ left
[12:53] *** xenu joined
[12:53] *** xenu is now known as Guest36722

[12:54] *** smash left
[12:56] *** PacoAir joined
[12:56] *** smash joined
[12:57] <smash> hello everyone

[12:58] *** PerlPilot left
[12:58] <frettled> Hello, smash!

[12:58] <[Coke]> au, sorear, colomon: recent rakudo advances are causing our percentages to slip!

[12:59] <masak> smash! \o/

[12:59] <masak> [Coke]: but... that's a *good* thing, right? I mean, the net number of features implemented in compilers has increased.

[13:00] <[Coke]> masak: ... I'm trying to guilt them into passing more tests.

[13:00] <masak> by the way, I like how at one point Niecza was 

[13:00] *** PerlJam joined
[13:00] <masak> at the same point as Rakudo, or even past it.

[13:00] <[Coke]> it's a common motivational technique that works better when I don't explain it in front of them. ;)

[13:00] <masak> and then the benefits of nom kicked in.

[13:00] <masak> [Coke]: oh, crap. sorry :P

[13:00] <colomon> [Coke]: I just got three more passing tests!

[13:01] <[Coke]> masak: also, hey... you owe me a pugs patch. ;)

[13:01] <[Coke]> colomon: WOOO

[13:01] <masak> [Coke]: I do?

[13:01] <[Coke]> btw, rakudo just got like 200+ yesterday. :(

[13:01] <masak> in the future, I'll try not to make it seem we're all on the same side here... :P

[13:01] <[Coke]> masak: yes. the only reason I started testing pugs was because you and ingy were going to hack on it!

[13:01] *** shinobicl_ left
[13:02] <masak> [Coke]: it's right there on my list of priorities.

[13:02] <smash> pugs still lives !?

[13:02] <masak> right below macros for Rakudo and finalizing p6cc2011.

[13:02] <[Coke]> smash:

[13:02] <[Coke]> # 05/08/2012 - rakudo++ (21760); niecza (93.61%); pugs (41.9%)

[13:02] <PerlJam> smash: pugs is still on life-support, but it lives  :)

[13:02] <[Coke]> those are yesterday's numbers. rakudo is over 22K before today's run, though.

[13:03] <smash> very nice

[13:03] <[Coke]> "Impl",      "pass","fail","todo","skip","plan","spec"

[13:03] <[Coke]> # 05/08/2012 - rakudo++ (21760); niecza (93.61%); pugs (41.9%)

[13:03] <[Coke]> "niecza",     20371,    16,   762,  1455, 22589, 24103

[13:03] <[Coke]> "pugs"  ,      9119,     9,  3339,  1555, 14022, 23964

[13:03] <[Coke]> "rakudo",     21760,    70,   709,  1884, 24423, 24113

[13:04] <[Coke]> rakudo's failure #'s slipping. wonder if that was due to the libpath issue.

[13:04] *** sivoais_ left
[13:04] *** sivoais joined
[13:05] *** araujo joined
[13:06] *** Guest36722 left
[13:07] *** xenu_ joined
[13:09] <tadzik> huh, why are "spec" numbers different between implementations?

[13:09] *** JimmyZ_ joined
[13:09] *** ocharles left
[13:09] *** JimmyZ left
[13:10] <masak> and why is Rakudo's "plan" higher than its "spec"?

[13:10] *** JimmyZ_ is now known as JimmyZ

[13:11] <mikec__> heh

[13:11] *** JimmyZ left
[13:11] <[Coke]> tadzik: I believe spec is "number of spec tests I looked at while running". different due to individual t/spectest.data

[13:11] *** xenu_ left
[13:11] *** envi_|2 joined
[13:12] <tadzik> mhm

[13:13] *** envi_ left
[13:14] <[Coke]> masak: Probably due to "no plan"

[13:14] *** JimmyZ joined
[13:14] <[Coke]> masak: I'm only guessing on that one.

[13:15] <masak> how would "no plan" make "plan" higher? :P

[13:15] <dalek> roast: 52e175f | (Solomon Foster)++ | S05-modifier/counted.t:

[13:15] <dalek> roast: Fix plan. (Suspect there may be a skip count problem under Rakudo.)

[13:15] <dalek> roast: review: https://github.com/perl6/roast/commit/52e175fe52

[13:16] <[Coke]> masak; t/spec/test_summary - I just run it.

[13:17] <daxim> [Coke], we can haz pugs on <http://perl6.org/compilers/features>?  is it enough to symlink roast as Pugs.hs/t/spec and then execute t/run_spectests?

[13:17] <[Coke]> daxim: check out HACKING in github.com/perl6/Pugs.hs

[13:18] <[Coke]> daxim - some enterprising soul could add pugs to compiler features, sure.

[13:18] <[Coke]> (probably not going to be me, at least not until June.)

[13:18] <[Coke]> masak: so, I don't see anything obvious there to explain your question.

[13:18] <daxim> what's so special about June?

[13:19] <[Coke]> daxim;I have a huge project due this month

[13:19] <[Coke]> $dayjob

[13:19] *** benabik left
[13:19] <daxim> aha

[13:20] <jlaire> n: module A { }; say A.WHAT

[13:20] <p6eval> niecza v17-3-gdaf09af: OUTPUT«Unhandled exception: System.NullReferenceException: Object reference not set to an instance of an object␤  at Niecza.STable.FindMethod (System.String name) [0x00000] in <filename unknown>:0 ␤  at Niecza.P6any.InvokeMethod (Niecza.Frame caller, System.String…

[13:20] <dalek> roast: 30c291b | (Solomon Foster)++ | S06-multi/proto.t:

[13:20] <dalek> roast: Refudge for niecza.

[13:20] <dalek> roast: review: https://github.com/perl6/roast/commit/30c291b77a

[13:21] *** localhost left
[13:22] *** carlin joined
[13:22] *** xenu_ joined
[13:23] *** skids joined
[13:26] *** ocharles joined
[13:27] *** xenu_ left
[13:27] *** xenu_ joined
[13:29] *** tyatpi joined
[13:30] <[Coke]> daxim - so, in the meantime, by all means, start hacking on that. ;)

[13:30] *** xenu_ left
[13:31] *** ocharles left
[13:32] *** ocharles joined
[13:32] *** xenu_ joined
[13:33] *** am0c left
[13:38] *** xenu_ left
[13:38] *** xenu_ joined
[13:41] *** sisar joined
[13:45] <colomon> moritz_: what's your justification for 241025348275725.3352.Str   ~~ /241025348275725\.33/  ?

[13:47] *** mdcw`_ is now known as mdcw`

[13:48] *** JimmyZ_ joined
[13:50] <dalek> roast: de9b0b4 | kboga++ | S05-modifier/counted.t:

[13:50] <dalek> roast: remove erroneous DOES marking, in answer to 52e175f

[13:50] <dalek> roast: review: https://github.com/perl6/roast/commit/de9b0b4ff5

[13:51] *** brrt joined
[13:52] *** JimmyZ left
[13:52] *** JimmyZ_ is now known as JimmyZ

[13:54] *** xenu_ left
[14:00] *** xenu joined
[14:00] *** xenu is now known as Guest76077

[14:01] *** sirhc_ is now known as sirhc

[14:04] <colomon> moritz_: actually, now reading what the spec actually say and getting worried that both approaches are incorrect....

[14:04] <dalek> roast: 0d67b20 | kboga++ | S05-modifier/counted.t:

[14:04] <dalek> roast: Oops, restore doc comment accidently removed in de9b0b4, kboga--

[14:04] <dalek> roast: review: https://github.com/perl6/roast/commit/0d67b20d10

[14:07] *** thou joined
[14:07] *** tokuhirom joined
[14:11] *** shinobicl joined
[14:15] *** brrt left
[14:17] *** adu joined
[14:20] *** sudokode left
[14:21] *** alim_ joined
[14:22] *** brrt joined
[14:22] <tadzik> oh, kboga++ keeps rocking :) https://github.com/rakudo/rakudo/pull/66

[14:22] *** PacoAir left
[14:22] <colomon> ack, there are mistakes all over the specs for Rat.perl and Rat.Str.  :(

[14:23] *** kaleem left
[14:24] <kboga> tadzik, mostly copy pasted from the ng branch, was just wondering why this wasn't in the nom branch yet :)

[14:24] <tadzik> kboga: nice catch :)

[14:24] <colomon> phenny: tell TimToady We need to talk about Rat.perl and Rat.Str....

[14:24] <phenny> colomon: I'll pass that on when TimToady is around.

[14:24] *** alim left
[14:24] *** alim_ is now known as alim

[14:24] <tadzik>     and nice patch

[14:24] <tadzik> (pun indented)

[14:24] *** sudokode joined
[14:24] <kboga> :)

[14:25] <tadzik> I'm at $work atm so I can't really give it a try though :(

[14:26] <kboga> np, also, the pack.t tests seem to require Buf to have a contents method, couldn't find it in the spec's tho...

[14:26] <tadzik> you should probably ask masak++ about it

[14:27] *** alim_ joined
[14:28] <masak> yeah, probably.

[14:28] <masak> masak claims he knows a bunch about pack/unpack and how to implement them in Perl 6.

[14:29] <masak> myself, I think he's just a poser. :P

[14:29] *** alim left
[14:29] *** alim_ is now known as alim

[14:29] *** sudokode left
[14:29] <kboga> didn't he implement that initial version I blatantly copy pasted? :)

[14:30] *** sudokode joined
[14:30] <masak> probably.

[14:30] <masak> I hear he's tried to port the Perl 5 tests to Perl 6 as well, but nothing concrete's even come of that.

[14:31] <masak> kboga: here's a gist from long ago about pack/unpack: https://gist.github.com/1239203

[14:31] <tadzik> hmmm. Doesn't perlito have a perl5-to-perl6 compiler?

[14:31] <PerlJam> Do we have a list of the things that were once implemented and working in Rakudo, but got left behind as we moved from alpha to ng to nom?

[14:32] *** Guest76077 left
[14:34] *** adu left
[14:35] *** kresike left
[14:35] *** crab2313 joined
[14:35] *** crab2313 left
[14:35] <jnthn> [Coke]: Is that 21xxx passing number you posted today from yesterday's run?

[14:36] * jnthn is curious where the increasing failures come from too...

[14:37] <brrt> r: sprintf("hello, %d", 42);

[14:37] <p6eval> rakudo 24ffc9:  ( no output )

[14:37] *** benabik joined
[14:37] <brrt> r: say(sprintf("hello, %d", 42));

[14:37] <p6eval> rakudo 24ffc9: OUTPUT«hello, 42␤»

[14:37] <jnthn> kboga++ 

[14:39] <kboga> masak: oh, so pack should really impose some kind of type restriction on the item its packing using a certain template rule?

[14:39] <kboga> test failures come from: t/spec/S32-num/stringify.t (so it seems)

[14:39] <jnthn> ah, ok

[14:40] <jnthn> Which I think moritz++ is on top of already

[14:40] <masak> kboga: yes, that's a good summary. Perl 6 is more type-constrained in this area than Perl 5. so it needs to disallow certain combinations.

[14:41] <masak> kboga: that said, we still want to make easy things easy, so it's a balance for sure. one we haven't found yet.

[14:42] <jnthn> .oO( it's like trying to balance a camel on the wings of a butterfly )

[14:43] <masak> metaphor++

[14:43] *** xenu_ joined
[14:44] <frettled> Are you trying to see how many metaphors you can balance on the head of a pin, or how big a metaphor you can phase through the eye of a needle?

[14:45] <colomon> actually, by current spec most of the Rat tests in stringify.t are wrong.

[14:46] <kboga> I'm curious about how compact structs will mix with pack & unpack. Somehow it reminds me of Convert::Binary::C.

[14:47] <gfldex> S03 says: "Any class composing the Pattern role may choose to provide a single ACCEPTS method to handle everything, which corresponds to those pattern types that have only one entry with an Any on the left above."

[14:47] *** xenu_ left
[14:47] <gfldex> yet i can't find any role named Pattern, is that NYI?

[14:50] *** kresike joined
[14:51] *** kresike left
[14:52] <jnthn> Wow, I didn't even know it existed...

[14:52] *** kresike joined
[14:53] * jnthn wonders if there's any spectests for it

[14:53] <jnthn> kboga: Compact structs should go fairly nicely with it.

[14:53] <jnthn> Well, they probably are an alternative I guess...

[14:54] <jnthn> Taking a Buf and using the data in it to populate the compact struct.

[14:54] <jnthn> Though, we could actually implement the data extraction from Buf using unpack I guess.

[14:57] *** spider-mario joined
[14:57] <jnthn> You get into all kinds of fun questions about what "compact" implies

[14:57] <jnthn> Like, does it mean "pack it as tightly as you can" or does it mean "pack it as tightly as the usual way to back a struct on the underlying architecture would allow"

[14:58] <jnthn> s/back/pack/

[14:58] *** kaare_ joined
[14:58] *** xenu joined
[14:59] *** xenu is now known as Guest78904

[15:02] *** JimmyZ_ joined
[15:02] *** Guest78904 left
[15:03] *** xenu_ joined
[15:04] *** JimmyZ left
[15:04] *** JimmyZ_ is now known as JimmyZ

[15:08] *** xenu_ left
[15:09] *** sporous joined
[15:10] *** preflex joined
[15:11] <[Coke]> how soon until I can use perl 6 instead of J2EE. bleargh.

[15:11] <[Coke]> jnthn: yes, yesterday's run (it's even got the date in it, sir. ;)

[15:14] *** wtw left
[15:14] *** sporous left
[15:14] <fglock> tadzik: perlito has some basic perl5-to-perl6 stuff implemented, just to try out and see what kind of problems would come up

[15:18] *** sporous joined
[15:18] *** sporous left
[15:18] *** sporous joined
[15:18] *** xenu_ joined
[15:19] *** sporous left
[15:19] *** sporous joined
[15:20] <fglock> tadzik: are you interested in p5-to-p6?

[15:23] *** sporous left
[15:23] *** sporous joined
[15:27] *** envi_|2 left
[15:27] *** envi_ joined
[15:28] *** xenu_ left
[15:29] *** xenu_ joined
[15:34] *** snearch joined
[15:35] *** brrt left
[15:35] *** bluescreen10 joined
[15:36] <sisar> if I recompile Rakudo, do I need to recompile _all_ my modules too ? coz i'm getting an error: "Missing or wrong version of dependency 'src/gen/Metamodel.pm'"

[15:37] *** sporous left
[15:37] *** fglock left
[15:38] <sisar> hmm, maybe i need to recompile panda first ?

[15:38] *** sporous joined
[15:38] *** sporous left
[15:38] *** sporous joined
[15:39] *** preflex left
[15:39] *** JimmyZ left
[15:40] *** xenu_ left
[15:40] *** localhost joined
[15:41] *** xenu_ joined
[15:41] *** preflex joined
[15:41] *** sisar left
[15:43] *** raiph joined
[15:52] *** Patterner left
[15:54] <gfldex> p6: my @data = $<1 2 3>, $<4 5 6>; say @data.perl;

[15:54] <p6eval> niecza v17-3-gdaf09af: OUTPUT«[Any, Any, Any, Any, Any, Any].list␤»

[15:54] <p6eval> ..rakudo 24ffc9: OUTPUT«Array.new(Any, Any, Any, Any, Any, Any)␤»

[15:54] <p6eval> ..pugs: OUTPUT«\(undef, undef, undef, undef, undef, undef)␤»

[16:00] *** xenu_ left
[16:00] *** thelazydeveloper joined
[16:00] *** mspaulding joined
[16:01] <colomon> interesting

[16:01] <colomon> guess that's $/{1 2 3} etc?

[16:03] <colomon> n: "abc" ~~ /(.)*/; my @data = $<1 2 3>; say @data.perl

[16:03] <p6eval> niecza v17-3-gdaf09af: OUTPUT«[Any, Any, Any].list␤»

[16:03] <colomon> n: "abc" ~~ /(.)*/; my @data = $<1 2 3>; say @data.per

[16:03] <p6eval> niecza v17-3-gdaf09af: OUTPUT«Unhandled exception: Unable to resolve method per in class Array␤  at /tmp/p4JczqkKid line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3840 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3841 (module-CORE @ 65) ␤  at /home/p…

[16:03] <colomon> bah

[16:04] <colomon> n: say 241025348275725.3352.WHAT

[16:04] <p6eval> niecza v17-3-gdaf09af: OUTPUT«Rat()␤»

[16:05] <gfldex> i think $<...> is just a syntax error but i would not wonder to be wrong

[16:05] *** xenu joined
[16:05] <colomon> std: $<1 2 3>

[16:05] <p6eval> std 8632387: OUTPUT«ok 00:00 40m␤»

[16:05] *** xenu is now known as Guest50086

[16:06] <colomon> n: my %hash = 1..10 X=> 3; say %hash<1 2 3>

[16:06] <p6eval> niecza v17-3-gdaf09af: OUTPUT«3 3 3␤»

[16:06] <gfldex> if it's not just a false positive on line noise i would it expect to do the same as $(1,2,3)

[16:06] <gfldex> *would expect

[16:07] *** xinming_ left
[16:07] <colomon> $a<1 2 3> is the same as $a{1, 2, 3}

[16:08] *** snearch left
[16:08] <gfldex> maybe TimToady can enlighten us here

[16:09] <colomon> I think (as I said) that $<1 2 3> ought to be the same as $/{1, 2, 3}  (where $/ is the match result)

[16:09] *** Guest50086 left
[16:10] <colomon> n: "456" ~~ /<digit>*/; say $<digit>

[16:10] <colomon> \

[16:10] <p6eval> niecza v17-3-gdaf09af: OUTPUT«#<match from(0) to(1) text(4) pos([].list) named({}.hash)> #<match from(1) to(2) text(5) pos([].list) named({}.hash)> #<match from(2) to(3) text(6) pos([].list) named({}.hash)>␤»

[16:11] <colomon> n: "456" ~~ /<1=digit><2=digit><3=digit>/; say $<123>

[16:11] <p6eval> niecza v17-3-gdaf09af: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unrecognized regex assertion at /tmp/t6CcR74EDi line 1:␤------> [32m"456" ~~ /<[33m⏏[31m1=digit><2=digit><3=digit>/; say $<123>[0m␤␤Parse failed␤␤»

[16:11] <colomon> n: "456" ~~ /<digit=3><digit=3><digit=3>/; say $<1 2 3>

[16:11] <p6eval> niecza v17-3-gdaf09af: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unrecognized regex assertion at /tmp/zs2UA3mvLT line 1:␤------> [32m"456" ~~ /<digit=[33m⏏[31m3><digit=3><digit=3>/; say $<1 2 3>[0m␤␤Parse failed␤␤»

[16:11] <gfldex> i found it http://perlcabal.org/syn/S02.html#Twigils

[16:12] <colomon> n: "456" ~~ /<d1=digit><d2=digit><d3=digit>/; say $<d1 d2 d3>

[16:12] <p6eval> niecza v17-3-gdaf09af: OUTPUT«#<match from(0) to(1) text(4) pos([].list) named({}.hash)> #<match from(1) to(2) text(5) pos([].list) named({}.hash)> #<match from(2) to(3) text(6) pos([].list) named({}.hash)>␤»

[16:12] *** brrt joined
[16:12] <colomon> n: "456" ~~ /<d1=digit><d2=digit><d3=digit>/; say ~$<d1 d2 d3>

[16:12] *** sjn joined
[16:12] <p6eval> niecza v17-3-gdaf09af: OUTPUT«4 5 6␤»

[16:12] <colomon> there you go

[16:13] <colomon> n: say 241025348275725.3352.nude

[16:13] <p6eval> niecza v17-3-gdaf09af: OUTPUT«301281685344656669 1250␤»

[16:13] <colomon> n: say 241025348275725.3352.Rat.nude

[16:13] <p6eval> niecza v17-3-gdaf09af: OUTPUT«258138148003301834 1071␤»

[16:13] <colomon> :\

[16:13] *** MayDaniel joined
[16:15] <colomon> this is going to be one stupid looking test in rat.t

[16:16] *** fglock joined
[16:16] <gfldex> as long as nobody tries to google for "nude rat" ...

[16:18] * jnthn back

[16:18] <colomon> gfldex: already plenty of hits for that without p6

[16:21] *** raiph left
[16:21] * colomon 's code is now .Rat.norm.nude anyway

[16:22] <colomon> ..... which NIecza doesn't implement yet.  Arrrrrgh!

[16:22] <colomon> this is quickly becoming a rathole

[16:22] *** MayDaniel left
[16:23] * TimToady might be awake enough to discuss rats

[16:23] <phenny> TimToady: 11:08Z <colomon> tell TimToady Just looking over quote:mm in Niecza and std, wondering if there was a copy and paste mistake.  Seems to me that maybe quote:mm is implemented the way quote:ms should have been (it's not there at all) and quote:mm should also have .tweak(:mm) ?

[16:23] <phenny> TimToady: 11:12Z <colomon> tell TimToady errr... or does quote:mm not make any sense at all?  "The :mm (or :samemark) variant may be used on a substitution...."

[16:23] <phenny> TimToady: 14:24Z <colomon> tell TimToady We need to talk about Rat.perl and Rat.Str....

[16:24] <colomon> TimToady: I think I sorted out the mm/ms thing -- when mm// became ms//, STD.pm6 was never updated to match.  (I have now done so.)

[16:24] <TimToady> I saw that

[16:24] * TimToady wonders if we should allow <1=digit> and such

[16:24] <TimToady> and maybe simplify <~~1> to <1>

[16:24] <colomon> well, I was just trying it to get $<1 2 3> to make sense

[16:25] *** kresike left
[16:25] <colomon> as for Rats -- my big question is, are we really serious about "The .perl method will produce a decimal number if the denominator is a power of 10, or normalizable to a power of 10 (that is, having factors of only 2 and 5 (and -1)). Otherwise it will normalize and return a rational literal of the form -47/3."  ?

[16:25] <colomon> (and that should be <-47/3>, right?)

[16:25] <colomon> the spec is not at all consistent on this.

[16:26] <TimToady> .oO(now they want the specs to be *consistent*, sheesh...)

[16:26] <colomon> I'm working on implementing a new Rat -> Str conversion that follows what the spec actually says.  :)

[16:27] <TimToady> well, the spec might be wrong :)

[16:27] <TimToady> it's happened once or twice

[16:27] <colomon> the spec certainly is wrong somewhere here... it's 100% definitely not consistent

[16:28] <masak> r: "foobarbaz" ~~ /$<foo>=(...)$<bar>=(...)$<baz>=(...)/; my (:$foo, :$bar, :$baz) := $/; .say for $foo, $bar, $baz

[16:28] <p6eval> rakudo 24ffc9: OUTPUT«===SORRY!===␤Binding to signatures in my declarations not yet implemented. Sorry. ␤at /tmp/S72cea3Vyz:1␤»

[16:28] <masak> huh!

[16:29] <masak> should the above work? or some equivalent of it?

[16:29] <masak> sometimes we want to mass-assign from Match objects.

[16:29] <TimToady> why not?  Captures are named that partly because they're like match objects

[16:29] <masak> r: "foobarbaz" ~~ /(...)(...)(...)/; my ($foo, $bar, $baz) = $/[^2]; .say for $foo, $bar, $baz

[16:29] <p6eval> rakudo 24ffc9: OUTPUT«=> <foo>␤␤=> <bar>␤␤Nil␤»

[16:30] <masak> r: "foobarbaz" ~~ /(...)(...)(...)/; my ($foo, $bar, $baz) = $/[^3]; .say for $foo, $bar, $baz

[16:30] <p6eval> rakudo 24ffc9: OUTPUT«=> <foo>␤␤=> <bar>␤␤=> <baz>␤␤»

[16:30] <masak> off-by-one fail ;)

[16:30] <jnthn> masak: The error message is accurate.

[16:31] <masak> that it's not yet implemented?

[16:31] <tadzik> fglock: it just came to my mind that it could be used to translate pack/unpacn tests to Perl 6

[16:31] <jnthn> masak: Yes.

[16:32] <jnthn> masak: It knows what it is, and it knows that it doesn't know how to do it :)

[16:32] <TimToady> tadzik: I seriously doubt that bit of the translator is implemented

[16:32] <colomon> TimToady: personally I like essence (as I take it) of the stated Rat rules; I just want to clean up the rest of the spec bits to match.

[16:32] <TimToady> or do you mean translate everything around the tests, but leave the formats the same?

[16:32] *** birdwind1pbird joined
[16:33] <tadzik> TimToady: possible; just a random thought

[16:33] <masak> jnthn: I think this used to work, in b, no?

[16:33] <jnthn> masak: "work"

[16:33] <PerlJam> TimToady: does <!~~1> exist?  If so, what would that become if <~~1> became <1>?

[16:33] <jnthn> masak: Also, the implementation of it was horrible.

[16:34] <masak> oki

[16:34] <tadzik> phenny: tell sisar yes, you need to recompile ALL THE THINGS

[16:34] <phenny> tadzik: I'll pass that on when sisar is around.

[16:34] <TimToady> reducing <~~1> to <1> doesn't help get rid of <~~foo> anyway, since <foo> means something different

[16:34] <TimToady> but <1=foo> is easier to read than $1=<foo>

[16:34] <jnthn> It's probably more consistent to leave it as <~~1>

[16:34] <jnthn> <1=foo> wfm though

[16:34] *** fridim_ joined
[16:35] <TimToady> as for <!...>, that's really a sort of metaoperator, and recursively calls <...>

[16:35] <TimToady> s/calls/parses/

[16:35] <TimToady> so you can pretty much put a ! in front of any assertion, even ones that don't make sense

[16:36] <TimToady> std: / <!foo=bar> /

[16:36] <p6eval> std 8632387: OUTPUT«ok 00:00 41m␤»

[16:36] <TimToady> that would set $<foo> then immediately fail if bar matched :/

[16:38] *** goraki left
[16:38] *** tyatpi left
[16:39] <TimToady> n: 'foobar' ~~ / <?foo=bar> /; say $/

[16:39] <p6eval> niecza v17-3-gdaf09af: OUTPUT«Unhandled exception: Unable to resolve method bar in class Cursor␤  at /tmp/RsVoOywMev line 1 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2803 (Regex.ACCEPTS @ 4) ␤  at /tmp/RsVoOywMev line 1 (mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.…

[16:39] <TimToady> duh

[16:39] <TimToady> n: 'foobar' ~~ / <?foo=ident> /; say $/

[16:39] <p6eval> niecza v17-3-gdaf09af: OUTPUT«#<match from(0) to(0) text() pos([].list) named({}.hash)>␤»

[16:39] <TimToady> n: 'foobar' ~~ / <?foo=ident> /; say $<foo>

[16:39] <p6eval> niecza v17-3-gdaf09af: OUTPUT«Any()␤»

[16:40] <masak> TimToady: maybe the ones that don't make sense could have nice error messages, like "you did A and B, but they don't make sense" :)

[16:40] <PerlJam> I don't know ... they makes sense, just not *useful* sense  :)

[16:41] <TimToady> maybe we could fill memory with nice error messages that most people will never see

[16:41] <TimToady> some things just have to be erroneous

[16:42] <masak> n: fork; say "alive"

[16:42] <p6eval> niecza v17-3-gdaf09af: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤      'fork' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1364 (die @ 3) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 33) ␤  at /home…

[16:42] *** sporous left
[16:43] <dalek> roast: eeb63aa | moritz++ | S32-num/stringify.t:

[16:43] <dalek> roast: fudge some Rat stringification tests for rakudo

[16:43] <dalek> roast: review: https://github.com/perl6/roast/commit/eeb63aaccd

[16:43] <TimToady> masak: easy to fix: just port blizkost to niecza, then call P5's fork

[16:44] <colomon> :p

[16:45] <jnthn> star: use NativeCall; sub fork() is native returns Int { * }; fork(); say "alive";

[16:45] <p6eval> star 2012.04: OUTPUT«alive␤»

[16:45] <jnthn> :)

[16:45] <TimToady> um, shouldn't it have said alive twice if it really worked?

[16:46] <TimToady> eval: fork; print "alive\n";

[16:46] <buubot_backup> TimToady: alive 1

[16:46] <jnthn> TimToady: It does, but p6eval doesn't capture the one from the subprocess.

[16:46] <TimToady> ah

[16:46] <TimToady> eval: sleep 1 if fork; print "alive\n";

[16:46] <buubot_backup> TimToady: alive 1

[16:47] <TimToady> how does it lose STDOUT from the grandkid?

[16:47] <masak> moritz_: I wrote a reply to http://www.reddit.com/r/perl/comments/tdq8h/perl_6_compiler_passes_22k_of_24k_specification/c4lvyhw

[16:49] <moritz_> masak++

[16:49] <moritz_> masak: sorry for abandonding you on this one

[16:49] *** sergot joined
[16:49] <sergot> hi o/

[16:50] <masak> sergocie! \o/

[16:50] <sergot> masak! \o/

[16:50] <masak> moritz_: no worries at all. I'm glad I remembered ;)

[16:50] <fglock> tadzik: t/op/pack.t uses simple perl5, it should be easy to re-edit to perl6 by hand (if the expected results are the same)

[16:51] <sergot> I'll be 'back' in few days. It'll be the end of school masak! :)

[16:52] <ingy> [Coke]: I've fallen into an ActivePit!

[16:53] *** PacoAir joined
[16:53] <masak> moritz_: what's the URL to your post about "no, passing all the spectests won't mean anything".

[16:54] <moritz_> masak: http://perlgeek.de/blog-en/perl-6/when-we-reach-100-percent-we-did-something-wrong.html

[16:54] <masak> thanks.

[16:54] <moritz_> it's easy to search for if you happen to remember the title :-)

[16:55] *** birdwind1pbird left
[16:55] *** dakkar left
[16:55] <TimToady> colomon: anyway, I've taken a dislike to the part of the spec that stringifies Rat via Num, which violates POLS by throwing away precision above the decimal point for largish numbers

[16:55] <masak> well, I tried ddg'ing before asking.

[16:56] <masak> moritz_: used your post in a reply here: http://www.reddit.com/r/perl/comments/tdq8h/perl_6_compiler_passes_22k_of_24k_specification/c4lzli7

[16:56] <moritz_> masak: I ddg'ed too. But I remembered the exact title :-)

[16:57] <masak> aye, that helps.

[16:57] <TimToady> I think a Rat.Str should always produce the integer part exactly, and how much of the fraction is negotiable

[16:58] *** birdwindupbird left
[16:58] <TimToady> of course, my stupid little routine doesn't handle :base, nor did it bother to round the last digit

[16:58] <TimToady> it was more a proof of concept

[16:59] <TimToady> and running 1/3 all the way out to 50 digits could be construed as antisocial :)

[17:00] *** preflex left
[17:06] *** Exodist joined
[17:07] *** wolfman2000 joined
[17:10] <fglock> p5-to-p6 would emit unmaintainable code that goes through an emulation layer, that's not good for translating tests (this is not a perlito specific problem)

[17:13] *** preflex joined
[17:15] <masak> nod.

[17:15] <masak> though for narrower use cases, it's still possible to get something useful out the other end.

[17:16] <TimToady> I could see a use for a translator that does the easy stuff, but just marks the hard stuff rather than trying to emulate it

[17:19] <fglock> hmm - that sounds... easy

[17:22] * TimToady contemplates the delicious disruption of putting overbars on the repeating digits of a rat that repeats...

[17:23] <TimToady> (and of reading those overbars correctly on input :)

[17:26] <sorear> good * #perl6

[17:26] <sorear> masak: the Mono documentation is pretty clear that calling fork() from inside Mono is a Bad Idea

[17:26] <sorear> something something finalizer threads not being copied to the new process

[17:34] <masak> oki

[17:48] <jlaire> I want to create and export many subs of the form   sub h1($x) { f('h1', $x) }   for various values of h1, any suggestions for a good way to do that? I'm using niecza

[17:49] <moritz_> jlaire: I could only help you with rakudo

[17:50] <jlaire> moritz_: that would be interesting to see, too

[17:50] <jlaire> I just don't have enough memory to compile rakudo at the moment

[17:51] <moritz_> jlaire: http://perlgeek.de/blog-en/perl-6/2012-rakudo-hack-dynamic-export-lists.html

[17:51] <jlaire> moritz_: thanks, I'll read it

[17:53] <jlaire> I'm trying to create a library/dsl for generating CSS, somewhat like lesscss but inside Perl 6

[17:54] <sorear> jlaire: it seems you can't use eval until I fix the newest bug

[17:54] <jlaire> sorear: okay

[17:54] <jlaire> I'm in no hurry with this

[17:55] <sorear> jlaire: try generating your subs using a closure, like sub make_foo($foo) { sub ($x) { f($foo, $x) } }

[17:55] <sorear> then poke them into $::EXPORT::DEFAULT::($foo) at BEGIN time; some trial and error will be needed, and it might not work at all

[17:55] <sorear> I have to leave now&

[17:56] <moritz_> n: trait_mod:<is>(sub f() { "oh hai" }, :export);

[17:56] <p6eval> niecza v17-3-gdaf09af: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤      'trait_mod:<is>' used at line 1␤␤Potential difficulties:␤  &f is declared but not used at /tmp/Sbb1hzPnKC line 1:␤------> [32mtrait_mod:<is>(sub f[33m⏏[31m() { "oh hai" }, :export);[0m␤␤Unhandled exce…

[17:56] <jlaire> thanks, I'll experiment

[17:57] <jlaire> at the moment I'm generating lesscss with a Perl 5 script, which is then translated to css; I'd love a single tool that does both steps

[17:58] <moritz_> in rakudo you can also put stuff into EXPORT packages

[17:59] <moritz_> r: module A { package EXPORT::DEFAULT { }; BEGIN EXPORT::DEFAULT::<&foo> := sub () { say 'OH SHARK' } }; import A; foo()

[17:59] <p6eval> rakudo 24ffc9: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&foo' called (line 1)␤»

[17:59] *** noam_ left
[18:00] *** noam_ joined
[18:00] <moritz_> oops.

[18:00] <moritz_> r: module A { our package EXPORT::DEFAULT { }; BEGIN EXPORT::DEFAULT::<&foo> := sub () { say 'OH SHARK' } }; import A; foo()

[18:00] <p6eval> rakudo 24ffc9: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&foo' called (line 1)␤»

[18:01] *** pyrimidine joined
[18:01] *** birdwindupbird joined
[18:03] <masak> TimToady: [backlog] in English, n-ple negation is considered nonstandard. in Polish, it's mandatory.

[18:03] <tadzik> hm?

[18:08] <daxim> "I don't know nobody!"

[18:09] <masak> tadzik: I'm no expert, but it seems to me there are often >1 negation in negated Polish sentences.

[18:09] <daxim> slavic is funny that way

[18:10] <masak> tadzik: words like "nobody", "nowhere" etc get used rather than "anybody", "anywhere" as would be the case in English.

[18:10] <masak> nom &

[18:10] *** daxim left
[18:11] <tadzik> I see

[18:11] <tadzik> yeah, double negation is normal :)

[18:12] <TimToady> masak: yes, English is in the minority on that issue

[18:13] <jnthn> moritz_: Hmm...why'd that import not find foo?

[18:13] <moritz_> jnthn: I don't know

[18:14] <moritz_> r: module A { sub f() is export { } }; import A; f()

[18:14] <p6eval> rakudo 24ffc9:  ( no output )

[18:14] <moritz_> r: module A { sub f() is export { } }; module B { }; import B; f()

[18:14] <p6eval> rakudo 24ffc9: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&f' called (line 1)␤»

[18:15] <moritz_> I thought it might wronly use the UNIT::EXPORT. It doesn#t

[18:15] <jnthn> yeah, that was top of my guess list. But glad it's not that :)

[18:15] <jnthn> r: module A { package EXPORT::DEFAULT { }; BEGIN OUR::EXPORT::DEFAULT::<&foo> := sub () { say 'OH SHARK' } }; import A; foo()

[18:15] <p6eval> rakudo 24ffc9: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&foo' called (line 1)␤»

[18:16] <jnthn> r: module A { package EXPORT::DEFAULT { }; BEGIN EXPORT::DEFAULT::<&foo> = sub () { say 'OH SHARK' } }; import A; foo()

[18:16] <p6eval> rakudo 24ffc9: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&foo' called (line 1)␤»

[18:16] <moritz_> r: module A { sub f() is export { } }; say A::EXPORT::DEFAULT::.keys

[18:16] <p6eval> rakudo 24ffc9: OUTPUT«&f␤»

[18:16] <jnthn> wt?

[18:17] <moritz_> r: module A { package EXPORT::DEFAULT { }; BEGIN EXPORT::DEFAULT::<&foo> = sub () { say 'OH SHARK' } }; say A::EXPORT::DEFAULT::.keys

[18:17] <p6eval> rakudo 24ffc9: OUTPUT«Could not find symbol 'A::EXPORT::&DEFAULT'␤  in block <anon> at /tmp/YcRu5ZDxGA:1␤␤»

[18:17] <moritz_> r: module A { our package EXPORT::DEFAULT { }; BEGIN EXPORT::DEFAULT::<&foo> = sub () { say 'OH SHARK' } }; say A::EXPORT::DEFAULT::.keys

[18:17] <p6eval> rakudo 24ffc9: OUTPUT«Could not find symbol 'A::EXPORT::&DEFAULT'␤  in block <anon> at /tmp/r9bbdlawoS:1␤␤»

[18:18] <jnthn> r: module A { package EXPORT { package DEFAULT { } }; BEGIN OUR::EXPORT::DEFAULT::<&foo> := sub () { say 'OH SHARK' } }; import A; foo()

[18:18] <p6eval> rakudo 24ffc9: OUTPUT«OH SHARK␤»

[18:18] <moritz_> r: our package A::EXPORT::DEFAULT { }; BEGIN A::EXPORT::DEFAULT::<&foo> = sub () { say 'OH SHARK' }; say A::EXPORT::DEFAULT::.keys

[18:18] <p6eval> rakudo 24ffc9: OUTPUT«&foo␤»

[18:18] <moritz_> r: our package A::EXPORT::DEFAULT { }; BEGIN A::EXPORT::DEFAULT::<&foo> = sub () { say 'OH SHARK' }; import A; f()

[18:18] <p6eval> rakudo 24ffc9: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&f' called (line 1)␤»

[18:18] <moritz_> r: our package A::EXPORT::DEFAULT { }; BEGIN A::EXPORT::DEFAULT::<&foo> = sub () { say 'OH SHARK' }; import A; foo()

[18:18] <p6eval> rakudo 24ffc9: OUTPUT«OH SHARK␤»

[18:20] <jnthn> moritz_: Looks like the package EXPORT::DEFAULT { } inside A does the wrong thing.

[18:21] <jnthn> moritz_: It's looking rather too hard for an EXPORT to already exist.

[18:21] <jnthn> And then finds UNIT::EXPORT.

[18:21] <moritz_> oh, right

[18:21] <jnthn> dinner, bbiab

[18:23] *** sporous joined
[18:31] *** shlomif joined
[18:31] *** brrt left
[18:31] *** birdwindupbird left
[18:31] *** shlomif is now known as rindolf

[18:35] *** tyatpi joined
[18:38] *** derrazo joined
[18:40] <colomon> TimToady: aiiii!  so not only are the spectests and examples in the spec wrong, the spec itself is wrong too?  yowsa!

[18:41] <colomon> TimToady: mind you, I think I agree with your basic idea.

[18:42] <fglock> I'm reading old stuff to find more about Perl5 implementation decisions

[18:42] <fglock> http://www.perl.com/pub/1999/09/topaz.html - I wonder why no perl5-in-perl5 at that time

[18:44] <[Coke]> r: sub f { UNDO say 'leaving A' ; die "foo"; }; f

[18:44] <p6eval> rakudo 24ffc9: OUTPUT«foo␤  in sub f at /tmp/DOMBKYe3eC:1␤  in block <anon> at /tmp/DOMBKYe3eC:1␤␤»

[18:51] <moritz_> does anybody know a nice palindrome which contains non-ASCII characters?

[18:53] <TimToady> http://en.wikipedia.org/wiki/Palindrome#Non-English_palindromes

[18:54] <[Coke]> moritz_: ΝΙΨΟΝ ΑΝΟΜΗΜΑΤΑ ΜΗ ΜΟΝΑΝ ΟΨΙΝ.

[18:54] * jlaire can't think of any finnish ones with ä or ö

[18:54] <[Coke]> (http://jeppesn.dk/utf-8.html) I probably should have run it through gtrans first. ;)

[18:55] <TimToady> something about "winds"

[18:56] <moritz_> TimToady++, [Coke]++

[18:56] <TimToady> phenny: gk en "ΝΙΨΟΝ ΑΝΟΜΗΜΑΤΑ ΜΗ ΜΟΝΑΝ ΟΨΙΝ"?

[18:56] <phenny> TimToady: "NIPSON sins MONAN NOT COVERED" (el to en, translate.google.com)

[18:57] <TimToady> oh, okay, that's an alpha privative on "laws", so "lawless"

[18:57] <jlaire> phenny: "saippuakivikauppias"?

[18:57] <phenny> jlaire: "soap stone dealer" (fi to en, translate.google.com)

[18:58] <TimToady> yeah, but that's ascii...

[18:58] <jlaire> right

[18:59] *** alim left
[19:00] <jlaire> สวัส is phonetically palindromic, kinda

[19:08] *** birdwindupbird joined
[19:12] *** fgomez joined
[19:17] * jnthn back from noms

[19:18] *** wolfman2000 left
[19:23] *** envi_ left
[19:26] *** derrazo left
[19:27] <rindolf> jnthn: hope you enjoyed your meal.

[19:32] *** preflex_ joined
[19:32] *** preflex left
[19:32] *** preflex_ is now known as preflex

[19:34] *** bluescreen10 left
[19:37] <jnthn> rindolf: yes, thanks :)

[19:37] <rindolf> jnthn: what did you have?

[19:39] <jnthn> rindolf: Some mushroomy pasta dish :)

[19:39] <rindolf> jnthn: ah.

[19:39] <rindolf> jnthn: with cream?

[19:40] <jnthn> Yeah. Cream, and some white pepper.

[19:45] <TimToady> perl6: https://gist.github.com/2648301

[19:45] <p6eval> rakudo 24ffc9, niecza v17-3-gdaf09af: OUTPUT«241025348275725.3352␤42.666667␤0.5␤0.333333␤0.25␤0.2␤0.166667␤0.142857␤»

[19:45] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected end of input␤    expecting operator␤    at /tmp/nEgANf2kzT line 10, column 25␤»

[19:46] <TimToady> this is more like what we should have by default for Rat.Str

[19:46] <TimToady> colomon: ^^

[19:47] * moritz_ will steal it for rakudo :-)

[19:47] <TimToady> the precision is determined by the size of the denominator remaining after removing the integer part

[19:48] <TimToady> but with a minimum of 6

[19:48] <TimToady> but that automatically gets shortened for things that go evenly into decimal

[19:48] <jnthn> TimToady++, moritz_++

[19:48] <rindolf> jnthn: nice.

[19:49] <TimToady> the funny thing is that it's using string increment to round the fractional part :)

[19:49] *** moritz_ is now known as moritz

[19:50] <TimToady> also, I'm sure the whole thing could be made considerably more efficient

[19:51] *** benabik left
[19:51] <TimToady> it's also possible all the hanky panky with %% 2 and %% 5 is unnecessary due to the +1 fudge

[19:53] *** kaare_ left
[19:55] *** shinobicl_ joined
[19:56] <dalek> rakudo/nom: 9a49814 | jnthn++ | src/ops/perl6.ops:

[19:56] <dalek> rakudo/nom: Consider .defined, not just .DEFINITE, when deciding whether to run KEEP/UNDO phasers. Fixes fail() not triggering UNDO, and that in turn fixes the 'let' handling.

[19:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9a49814bb0

[19:56] <moritz> jnthn++

[19:57] *** shinobicl left
[19:57] <TimToady> yes, it seems unnecessary, since multiplying by 2 or 5 can give at most one more digit, which the fudged length will catch even for 1/5000000000 and such

[19:59] <jnthn> Tagged the ticket for it testneeded too. Plus one about ff

[20:02] *** fglock left
[20:03] <TimToady> simplified the gist

[20:03] <TimToady> perl6: https://gist.github.com/2648301

[20:03] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "denominator"␤    expecting operator or "}"␤    at /tmp/N4yZd76w5k line 9, column 22␤»

[20:03] <p6eval> ..rakudo 24ffc9, niecza v17-3-gdaf09af: OUTPUT«0.0000000002␤0.0000000005␤»

[20:04] <TimToady> moritz: ^^ use this one instead

[20:04] <colomon> TimToady: interesting, your approach to this was very different than mine...

[20:04] *** alim joined
[20:05] <TimToady> if yours is faster and produces the same results, go for it

[20:05] <TimToady> I was more prototyping policy than anything else

[20:07] *** mspaulding left
[20:07] <TimToady> the important part is to leave the integer part out of the precision calculation entirely

[20:08] <TimToady> the rest is negotiable, but 6 digits for repeaters seems to fit with the %f format default

[20:09] <TimToady> and gets all the repeating digits for 1/7

[20:10] <TimToady> the important thing is that it never loses precision for denominators that are sufficiently decimal

[20:11] <TimToady> I *think* one digit of slop is enough to guarantee that, but I have no proof...

[20:12] <TimToady> anyway, the gist above has a rudimentary test of that out past the six digit minimum

[20:12] <TimToady> and seems to work for those two numbers anyway

[20:13] <TimToady> there's probably a faster way to take the log10 of the number than look at the length of the string conversion

[20:14] * jnthn figgers out what's up in #112624

[20:14] <colomon> well, my approach was very different, as I was only trying to get all the decimal digits for cases that were supposed to be exact according to the existing spec.

[20:14] <jnthn> Not sure I've got the energy to fix it tonight, though.

[20:14] * jnthn leaves it for tomorrow

[20:15] <TimToady> colomon: well, turns out you can get that for "free" with this approach

[20:17] <jnthn> moritz: I think https://rt.perl.org/rt3/Ticket/Display.html?id=112586 is taken care of now?

[20:18] <TimToady> it's also probably faster to compare the number with 1_000_000 than to stringify it and max with 6

[20:19] <TimToady> so that line would be something more like:

[20:19] <TimToady>         my $want = $r.denominator < 1_000_000 ?? 6 !! $r.denominator.Str.chars + 1;

[20:20] <TimToady> or maybe that wants to be 100_000, since we should fudge a large 6-digit number up to 7

[20:23] <TimToady> okay, gist revised again

[20:23] <TimToady> perl6: https://gist.github.com/2648301

[20:23] <p6eval> rakudo 9a4981, niecza v17-3-gdaf09af: OUTPUT«0.0000000002␤0.0000000005␤»

[20:23] <p6eval> ..pugs: OUTPUT«*** No such method in class Int: "&Str"␤    at /tmp/h4BykFVpxF line 9, column 15-81␤»

[20:23] *** PacoAir left
[20:24] <shinobicl_> hi all.... is there a way to get a "review" to a perl6 module i did, so it gets published in modules.perl6.org?

[20:28] <jnthn> shinobicl_: Does it already have a META.info?

[20:28] <shinobicl_> yes

[20:28] <shinobicl_> https://github.com/shinobi/p6/tree/master/Date-WorkdayCalendar

[20:28] <jnthn> Then it just needs to end up in https://github.com/perl6/ecosystem/blob/master/META.list

[20:28] *** sergot_ joined
[20:29] <shinobicl_> i just have a doubt about what to put exactly on the source-url field

[20:30] <dalek> ecosystem: 17179c6 | jonathan++ | META.list:

[20:30] <dalek> ecosystem: Add Date:WorkdayCalendar to ecosystem; shinobicl++.

[20:30] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/17179c6420

[20:31] <jnthn> shinobicl_: Put the URL of the git repo: git://github.com/shinobi/p6.git

[20:31] <shinobicl_> thanks!

[20:31] <shinobicl_> ok

[20:31] <jnthn> oh, wait...

[20:31] <jnthn> You have one repo for all Perl 6 stuff

[20:31] <jnthn> I think it's meant to be one per module

[20:31] <shinobicl_> oh i see

[20:32] <jnthn> yeah...otherwise I suspect panda won't know to look inside that "p6" directory

[20:32] *** shlomif joined
[20:33] <jnthn> I guess easiest solution is that GitHub lets you rename a repo, and then just do a commit that moves stuff out of the directoy into top-level

[20:33] *** rindolf left
[20:33] *** shlomif is now known as rindolf

[20:33] <shinobicl_> i'll create a new one then

[20:34] <jnthn> ah, ok

[20:34] *** sivoais_ joined
[20:34] <jnthn> Let me know when you're done and I can update the ecosystem list again.

[20:34] *** sergot left
[20:34] *** sivoais left
[20:34] *** bacek left
[20:34] *** hillu left
[20:34] *** tokuhiro4 left
[20:35] *** tokuhiro4 joined
[20:36] *** bacek joined
[20:39] *** bruges left
[20:39] *** hillu joined
[20:41] *** clkao_ joined
[20:41] *** sorear_ joined
[20:42] *** Util joined
[20:42] *** ingyfoo joined
[20:42] *** Tene_ joined
[20:42] *** Tene_ left
[20:42] *** Tene_ joined
[20:42] *** jnthn_ joined
[20:42] *** huf_ joined
[20:42] *** bruges joined
[20:42] *** shachaf_ joined
[20:42] *** bjarneh_ joined
[20:42] *** ddima_ joined
[20:42] *** moritz_ joined
[20:44] *** moritz left
[20:44] *** moritz_ is now known as moritz

[20:46] *** shinobicl_ left
[20:47] *** araujo left
[20:47] *** jnthn left
[20:47] *** ddima left
[20:47] *** Util_ left
[20:47] *** sorear left
[20:47] *** ranguard_ left
[20:47] *** shachaf left
[20:47] *** huf left
[20:47] *** ingy left
[20:47] *** Tene left
[20:47] *** cognominal left
[20:47] *** clkao left
[20:47] *** cognominal joined
[20:47] *** araujo joined
[20:47] *** birdwindupbird left
[20:50] *** ranguard joined
[20:53] *** bjarneh left
[20:56] *** jnthn_ is now known as jnthn

[20:56] *** aindilis left
[20:57] *** aindilis joined
[20:59] *** eiro left
[21:01] <TimToady> I think there's a bug in r2s for values that round up .9999 and such; it won't carry back to the integer part

[21:01] *** ocharles left
[21:06] *** shinobicl joined
[21:06] <shinobicl> ahh... another thing..... i'm using "Date" as the namespace for WorkdayCalendar

[21:06] *** drschumtzenberg left
[21:06] <shinobicl> should i use this namespace or "DateTime" instead?

[21:07] *** libertyprime left
[21:07] *** pomysl left
[21:07] <dalek> tablets: fab2926 | (Herbert Breunung)++ | docs/_nav- (2 files):

[21:07] <dalek> tablets: repair spacing in header and footer

[21:07] <dalek> tablets: review: https://github.com/perl6/tablets/commit/fab2926821

[21:08] *** eternaleye left
[21:10] *** ingyfoo is now known as ingy

[21:10] *** drschumtzenberg joined
[21:10] *** dalek left
[21:11] <shinobicl> i ask because there is a module listed as DateTime::Utils

[21:12] *** ivan`` joined
[21:12] *** skids left
[21:12] *** robinsmidsrod joined
[21:13] <moritz> if you work with dates, Date. If you work with dates and times, DateTime

[21:13] *** eiro joined
[21:16] <TimToady> well, maybe it's a "can't happen"

[21:16] *** dalek joined
[21:16] *** ocharles joined
[21:16] *** kranius left
[21:16] *** drschumtzenberg left
[21:16] *** dalek left
[21:16] *** Exodist left
[21:17] *** sjn left
[21:18] *** drschumtzenberg joined
[21:19] *** sjn joined
[21:24] *** drschumtzenberg left
[21:24] *** sjn left
[21:26] *** sjn joined
[21:26] *** sisar joined
[21:26] <TimToady> I can't come up with a case that forces it to carry back to the integer part

[21:27] <sergot_> 'night o/

[21:27] *** sergot_ left
[21:27] *** pomysl_ joined
[21:27] *** fhelmberger left
[21:27] *** libertyprime joined
[21:28] <spider-mario> in case you’re interested and you understand french, I’ve had a little discussion regarding the readability of a Perl 6 code vs. its Common Lisp equivalent

[21:28] <spider-mario> http://progmod.org/forum/sujet/333/message/3949/

[21:28] <spider-mario> (the Lisper is Zeta)

[21:28] <[Coke]> huh chrome offers to translate, says it has, but it's allf rench to me.

[21:28] * TimToady wonders if dalek will report the spec change I just pushed for Rat.Str

[21:28] *** kranius_ joined
[21:28] <[Coke]> TimToady++ # there you go

[21:28] <TimToady> oh, I don't care about the karma, I just wanted people to see it :)

[21:28] *** exodist_ joined
[21:28] <colomon> TimToady: just got a notification for it in my e-mail.  :)

[21:28] *** d4l3k_ joined
[21:28] <colomon> TimToady: why did you change it there and not in S02?

[21:28] <TimToady> lazy :)

[21:28] *** drschumtzenberg_ joined
[21:28] <colomon> BTW, S02 also seems to say that every number with a decimal point should either become a Rat or a RatStr.  Does that seem likely to stay to you?

[21:28] *** exodist_ is now known as Exodist

[21:28] *** lichtkind joined
[21:28] *** d4l3k_ is now known as dalek

[21:28] *** baest joined
[21:28] *** ggoebel left
[21:28] *** ggoebel joined
[21:32] <dalek> specs: e1cc4fa | larry++ | S02-bits.pod:

[21:32] <dalek> specs: also tweak Rat.Str description here for colomon++

[21:32] <dalek> specs: review: https://github.com/perl6/specs/commit/e1cc4fa93f

[21:32] <TimToady> where does it say that?

[21:32] <colomon> TimToady: search for "Allomorphic Rats"

[21:32] <lichtkind> TimToady: grrrreetings

[21:32] <lichtkind> what is actuall U ?

[21:32] <lichtkind> some sort of undefined?

[21:33] <TimToady> I do still think that .perl should try for decimal notation if it works.

[21:33] <colomon> TimToady: agreed.

[21:33] <TimToady> it means it's not a real object

[21:33] <colomon> TimToady: if it is exact

[21:33] <jnthn> lichtkind: As in, Any:U style things?

[21:33] <jnthn> lichtkind: It means it's a type object.

[21:34] <jnthn> Equivalent to checking that .DEFINITE is False

[21:34] <colomon> TimToady: should Rat.perl be one of either N.M or <N/M> ?

[21:35] <TimToady> yeah

[21:35] <lichtkind> jnthn: i dunno i just saw moritz to use the U method

[21:35] <TimToady> yes, only if it's exact do you get N.M

[21:35] <lichtkind> so its true if its a type object?

[21:36] <jnthn> lichtkind: Method? Oh...then I dunno :)

[21:36] <lichtkind> jnthn: what is this Any:Uß

[21:38] <jnthn> lichtkind: It's a type modifier.

[21:38] *** sftp left
[21:38] <jnthn> r: class A { }; sub foo(A) { say "ok" }; foo(A.new); foo(A);

[21:38] <p6eval> rakudo 9a4981: OUTPUT«ok␤ok␤»

[21:38] <TimToady> colomon: it doesn't say 'any number with a decimal', it says 'any rational literal'

[21:38] <jnthn> r: class A { }; sub foo(A:U) { say "ok" }; foo(A.new); foo(A);

[21:38] <p6eval> rakudo 9a4981: OUTPUT«Parameter '' requires a type object, but an object instance was passed␤  in sub foo at /tmp/V5K06_21PO:1␤  in block <anon> at /tmp/V5K06_21PO:1␤␤»

[21:38] <jnthn> r: class A { }; sub foo(A:D) { say "ok" }; foo(A.new); foo(A);

[21:38] <p6eval> rakudo 9a4981: OUTPUT«ok␤Parameter '' requires an instance, but a type object was passed␤  in sub foo at /tmp/lXw6kMrJui:1␤  in block <anon> at /tmp/lXw6kMrJui:1␤␤»

[21:39] <TimToady> but it does seem that pi.perl should probably print 3.141592653589793238 rather than the fractional form

[21:39] *** sftp joined
[21:39] <TimToady> or maybe it should return the .Str form

[21:39] <jnthn> Uh...pi should be a Num, no?

[21:39] <colomon> jnthn: that's what I'm asking.

[21:39] <jnthn> rakudo: say pi.Num

[21:39] <p6eval> rakudo 9a4981: OUTPUT«3.14159265394248␤»

[21:39] <jnthn> grr

[21:39] <jnthn> rakudo: say pi.WHAT

[21:39] <p6eval> rakudo 9a4981: OUTPUT«Num()␤»

[21:40] <colomon> I think TimToady has a real good case for making it a RatStr

[21:40] *** derrazo joined
[21:40] <TimToady> constant pi is export = 3.14159_26535_89793_23846_26433_83279_50288;

[21:40] <jnthn> Having an irrational number being a Rat is irrational!

[21:40] <TimToady> I see no 'e' there...

[21:40] *** derrazo left
[21:40] <jnthn> my constant pi = 3.14159_26535_89793_238e0;

[21:40] <jnthn> From Rakudo.

[21:40] <colomon> TimToady: pi.perl should totally return the .Str form

[21:41] <jnthn> pi.perl should probably do whatever $any-other-num.perl would do  ;)

[21:41] <TimToady> jnthn: well, that's not according to spec, then

[21:42] <jnthn> TimToady: Then I think the spec is being silly.

[21:42] <lichtkind> is pi officially part of prelude?

[21:43] <TimToady> yes, and so are e and i

[21:44] *** sivoais_ left
[21:45] *** sisar left
[21:45] <TimToady> it's fine by me if a RatStr also provides a pre-converted .Num value

[21:45] *** sisar joined
[21:45] * TimToady likes allomorphic literals

[21:45] <jnthn> Is RatStr still multiple inheritnace?

[21:46] <jnthn> ah, just found the bit in S02. Yes.

[21:46] <TimToady> last I heard

[21:47] *** zby_home left
[21:48] * jnthn remains unfond of ending up with MI being used in CORE.setting

[21:48] <jnthn> (It's not that it's a problem in any technical sense. I just...find MI uncomfortable.)

[21:49] <jnthn> (As does 6model, which takes "this is MI" to mean "skip these nice optimizations"...)

[21:49] <masak> something about this http://irclog.perlgeek.de/perl6/2012-05-09#i_5563296

[21:49] <masak> made me write this https://gist.github.com/2649172

[21:49] <masak> I don't know what you think. sometimes I just like stories. :)

[21:50] *** alim left
[21:53] <TimToady> putting on my lit crit hat, the ending seems a bit abrupt...

[21:53] <au> that reads like the first half of a story...

[21:54] <TimToady> why do I feel like that poor guy in Star Wars saying "Almost there...Almost there..."

[21:54] <masak> I'm sorry, I don't know the ending to this one.

[21:55] <TimToady> we need some young, over-confident whippersnapper to nail the heat exhaust port...

[21:55] <au> it may worth noting that both p5 and p6 now both meets and exceeds the scope of the initial apocalypse/exegesis vision, although I'm not exactly sure how to work that into the narrative. :)

[21:55] <diakopter> Stay on target ...

[21:56] *** ggoebel left
[21:56] <TimToady> well, I'm sure I can find some bits that P5 has ignored...

[21:56] <masak> au: I think that's all part of the tuning fork narrative. Perl split into 5 and 6, providing everything from redundancy to heterogeneity.

[21:57] *** huf_ is now known as huf

[21:57] <TimToady> 'course, there are some bits that P6 has ignored too...  :)

[21:57] <au> :)

[21:57] *** ggoebel joined
[21:58] *** tyatpi left
[21:58] *** wolfman2000 joined
[21:59] * TimToady had an interesting mental sideslip the other day, when he thought "tuning fork" and said "pitch fork" instead

[21:59] <TimToady> which...almost works...

[21:59] <masak> :D

[22:00] <diakopter> pitch ;pipe

[22:00] <masak> a pitch fork has more than two branches, right? we need more Perls.

[22:00] <masak> MOAR

[22:00] <masak> actually, I wish someone would develop more successful Perls.

[22:00] <diakopter> peace pipe

[22:01] <masak> but maybe there's not niches enough for more than Perl 5 and Perl 6?

[22:01] <TimToady> well, there are other attempts to revise Perl 5 out there

[22:01] <TimToady> hopefully they'll turn out to be better designed and less successful than PHP :D

[22:02] *** orphu joined
[22:02] <TimToady> s/and/or/

[22:02] <masak> there are parts about perl5i that reach halfway to Perl 6 and then stop.

[22:03] <masak> like, they have a Str.reverse

[22:03] <masak> that's about what you'd get if you stopped being inspired by Perl 6 about 2008, I guess :)

[22:04] <masak> hm, seems .flip was born in 2009.

[22:12] *** Chillance joined
[22:15] <jnthn> 'night #perl6

[22:15] <diakopter>  /

[22:15] <masak> 'night, #perl6

[22:15] <spider-mario> good night

[22:15] <tadzik> /

[22:15] <spider-mario> ffffuuu-

[22:15] <spider-mario> I broke it :(

[22:16] <tadzik> happens to the best of us

[22:16] <masak> tell me about it.

[22:16] *** rindolf left
[22:16] <tadzik> a sleepy-tale? Or how do you call it

[22:17] <dalek> tablets: a5200d9 | (Herbert Breunung)++ | docs/appendix- (2 files):

[22:17] <dalek> tablets: adding constants e i pi

[22:17] <dalek> tablets: review: https://github.com/perl6/tablets/commit/a5200d9888

[22:17] <huf> bedtime story?

[22:18] <tadzik> oh, yes

[22:19] <huf> i had to swap for a bit to find the phrase

[22:19] <tadzik> lichtkind: http://tablets.perl6.org/appendix-e-exciting.html#case-construct shouldn't "when 'g'" be "when /g/"?

[22:20] <tadzik> also, the top-left if seems to have some trailing }}

[22:20] <lichtkind> tadzik: depends if eq is nuff 'g' works too

[22:20] <tadzik> lichtkind: but the Perl 5 version uses =~ /g/

[22:20] <tadzik> so that's more like when /g/ than when 'g'

[22:21] <lichtkind> right

[22:21] <lichtkind> the braces are added in translation

[22:21] <lichtkind> i fix that

[22:21] <tadzik> http://tablets.perl6.org/appendix-e-exciting.html#objects-with-auto-generated-new-and-getters-and-setters

[22:22] <tadzik> that one probably wants has $.speed is rw;

[22:22] <tadzik> otherwise "$hg1.speed = 100;" is illegal

[22:23] <dalek> tablets: f337812 | (Herbert Breunung)++ | docs/appendix-e-exciting.txt:

[22:23] <dalek> tablets: fix case construct, tadzik++

[22:23] <dalek> tablets: review: https://github.com/perl6/tablets/commit/f337812b19

[22:24] <lichtkind> yes

[22:24] <tadzik> lichtkind++

[22:24] <dalek> tablets: ca4edcb | (Herbert Breunung)++ | docs/appendix-e-exciting.txt:

[22:24] <dalek> tablets: attr should be "is rw" tadzik++

[22:24] <dalek> tablets: review: https://github.com/perl6/tablets/commit/ca4edcb3c6

[22:25] <tadzik> oh, did you see the "Wrath of the Lichtking" I, khem, drawed? :P

[22:25] <lichtkind> my brother is a wow veteran all these jokes are long made :)

[22:25] <lichtkind> by myself :)

[22:25] <tadzik> http://i.imgur.com/V7z2j.jpg

[22:26] <lichtkind> hahha

[22:26] <tadzik> heh, should've suspected that

[22:26] <lichtkind> i keep that

[22:28] <tadzik> it's time for me too. Good knight #eplr6

[22:28] <tadzik> Some men, when in need to write something, think "I know, I'll use two hands!". Then they have #eplr6

[22:29] <huf> :)

[22:32] *** noam_ left
[22:32] *** noam_ joined
[22:42] *** ponbiki joined
[22:43] <lichtkind> haha

[22:43] <lichtkind> good night tadzik 

[22:47] *** sisar left
[22:47] *** sisar joined
[22:51] *** NamelessTee left
[22:53] *** kst` is now known as kst

[22:53] *** immortal left
[22:53] *** erkan joined
[22:53] *** erkan left
[22:53] *** erkan joined
[22:56] *** thou left
[22:58] *** fridim_ left
[23:00] *** thou joined
[23:05] *** noam_ left
[23:05] *** spider-mario left
[23:05] *** noam_ joined
[23:06] *** noam_ left
[23:06] *** noam_ joined
[23:07] *** ponbiki left
[23:07] *** shinobicl left
[23:08] *** noam_ left
[23:08] *** noam_ joined
[23:08] *** thou left
[23:28] *** yves_ left
[23:28] *** yves_ joined
[23:28] *** domidumont left
[23:28] *** tyatpi joined
[23:28] *** sorear_ is now known as sorear

[23:29] <sorear> good * #perl6

[23:29] *** domidumont joined
[23:36] <[Coke]> "I know, I'll use a J2EE container to house this app." Now I have ... well, more than 2 problems, anyway.

[23:41] *** whiteknight joined
[23:42] *** Chillance left
[23:51] *** Tene_ is now known as Tene__

[23:51] <sorear> Best Perl 5 error message:  (Do you need to predeclare my?)

[23:53] *** drschumtzenberg_ left
