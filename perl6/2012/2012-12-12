[00:08] *** fgomez joined
[00:09] *** robins joined
[00:12] *** bowtie left
[00:29] *** integral left
[00:30] *** integral joined
[00:30] *** integral left
[00:30] *** integral joined
[00:40] *** rickza joined
[00:40] *** rickza left
[00:40] *** skids joined
[00:53] *** kurahaupo joined
[00:58] *** hypolin joined
[01:03] *** armitage81 left
[01:06] *** anuby joined
[01:10] *** am0c joined
[01:58] *** whiteknight is now known as wknight8111

[01:58] *** wknight8111 left
[01:58] *** wknight8111 joined
[02:14] <mikemol> jnthn: Gah. Missed you again.

[02:15] *** FROGGS__ joined
[02:18] *** FROGGS_ left
[02:31] *** wknight8111 left
[02:31] *** Reini joined
[02:32] <Reini> https://github.com/blog/1302-goodbye-uploads - so not really a CPAN alternative anymore. new plans

[02:38] <sorear> argh

[02:40] <sorear> now how am I going to release niecza v25?

[02:42] <sorear> I guess I need to check the bootstrap files into git, and put the Windows standalone .zips on feather

[02:43] <skids> What's to stop people from just creating a -dist repo and checking *balls into it?

[02:48] <popl> "If this applies to you, we recommend using one of the many fantastic services that exist exactly for this purpose such as Amazon S3 / Amazon CloudFront."

[02:48] <popl> Are they shills?

[02:50] <popl> That's interesting, though.

[02:51] *** popl left
[03:02] <mikemol> .window 2

[03:14] <dalek> roast: fd42eb1 | coke++ | S05-modifier/perl5_0.t:

[03:14] <dalek> roast: rakudo fudge

[03:14] <dalek> roast: review: https://github.com/perl6/roast/commit/fd42eb1bdd

[03:14] <dalek> rakudo/nom: 78b53ac | coke++ | t/spectest.data:

[03:14] <dalek> rakudo/nom: run more tests.

[03:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/78b53aca83

[03:23] *** fgomez left
[03:38] *** fgomez joined
[03:48] <colomon> LTA error:

[03:48] <colomon> rn: my %words = KeyBag.new; %words{"the"} = "green";

[03:48] <p6eval> niecza v24-5-g599cbcb: OUTPUT«Unhandled exception: Unmatched key in Hash.LISTSTORE␤  at /tmp/V1lU00wC0A line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4208 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4209 (module-CORE @ 580) ␤  at /home/p6eval/niecz…

[03:48] <p6eval> ..rakudo 779703: OUTPUT«Odd number of elements found where hash expected␤  in method STORE at src/gen/CORE.setting:6553␤  in block  at /tmp/_Tvny9dl5w:1␤␤»

[03:49] <colomon> rn: my %words := KeyBag.new; %words{"the"} = "green";

[03:49] <p6eval> niecza v24-5-g599cbcb: OUTPUT«Unhandled exception: Cannot parse number: green␤  at /home/p6eval/niecza/lib/CORE.setting line 1435 (die @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3539 (ANON @ 10) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3541 (NumSyntax.str2num @ 5) ␤  at…

[03:49] <p6eval> ..rakudo 779703: OUTPUT«Cannot call 'Real'; none of these signatures match:␤:(Mu:U \v: Mu *%_)␤␤  in method Real at src/gen/CORE.setting:804␤  in method Real at src/gen/CORE.setting:2318␤  in sub infix:<>> at src/gen/CORE.setting:2825␤  in block  at src/gen/CORE.setting:11823␤  in any  at…

[03:49] <colomon> second one, first one was just a typo.

[03:49] <colomon> :)

[03:57] *** noggle_ joined
[04:01] *** noggle left
[04:11] *** bphillips left
[04:29] *** jaldhar_ joined
[04:46] <dalek> perl6-bench: 43ff984 | (Geoffrey Broadwell)++ | .gitignore:

[04:46] <dalek> perl6-bench: Add /components and /results to .gitignore

[04:46] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/43ff984e97

[05:09] *** Reini left
[05:10] *** bphillips joined
[05:14] <dalek> mu: f0eb6a9 | moritz++ | misc/perl6advent-2012/schedule:

[05:14] <dalek> mu: [p6advent] take day 12, since there is no post from PerlJam yet

[05:14] <dalek> mu: review: https://github.com/perl6/mu/commit/f0eb6a9b5f

[05:26] *** kurahaupo left
[05:28] <Woodi> morning

[05:29] <Woodi> moritz: IMO words doubled, paragraph 2, line 2...

[05:30] <moritz> Woodi: thanks, fixed

[05:32] *** telex left
[05:32] <diakopter> r: https://gist.github.com/4265098 # test the new gist

[05:32] <p6eval> rakudo 78b53a: OUTPUT«===SORRY!===␤Two terms in a row␤at /tmp/PGXYbtZvDA:1␤------> https⏏://gist.github.com/4265098 # test the ne␤    expecting any of:␤        argument list␤        postfix␤        infix or meta-infix␤        infix stopper␤        st…

[05:32] <diakopter> r: https://gist.github.com/4265098

[05:32] <p6eval> rakudo 78b53a: OUTPUT«44␤»

[05:32] <diakopter> huh; still works

[05:34] *** telex joined
[05:35] *** eric_bbly joined
[05:36] *** eric_bbly left
[05:40] *** Reini joined
[05:44] *** xinming_ joined
[05:44] *** Reini left
[05:47] *** xinming left
[05:47] *** SamuraiJack joined
[05:49] *** Nom- joined
[05:50] <Nom-> Hey Guys... was curious if there's a way in the Perl6 syntax to extend an integer?

[05:50] <moritz> Nom-: what do you mean by "extend"?

[05:50] <Nom-> So I could (for example) do 1.to_words => "one"

[05:51] <moritz> Nom-: not built in. We try to avoid languge-specific built-ins

[05:51] <moritz> I'm sure somebody is going to write a module for it eventually

[05:52] <Nom-> Well, yeah, that's what I wanted to do... extend that integer type with some code... so I can't write just Perl6 to do this, it'd have to be an extension to Rakudo or whatever?

[05:54] <moritz> Nom-: you can add methods to existing classes, but it is considered *very* bad style

[05:55] <moritz> r: use MONKEY_TYPING; augment class Int { method english() { 'one' } }; say 4.english

[05:55] <p6eval> rakudo 78b53a: OUTPUT«one␤»

[05:55] <moritz> it's better to just export a subroutine that does what you want

[05:58] <Nom-> Yeah, but sometimes you can enable some very useful functionality by doing it :)

[05:58] <moritz> in ruby, monkey patching is quite popular. And then two different libraries added incompatible json methods to the same classes, and BOOM

[05:58] <moritz> Nom-: yes, but you can also enable very useful functionality by other means

[05:58] <japhb> moritz, In Ruby, that problem is all over the damn place.

[05:59] <moritz> Nom-: in particular, you can only rely on the monkey-patched methods being there when you've loaded the module that does the monkey-patching

[05:59] <japhb> Getting just the right versions of Ruby libraries to work together is a massive pain -- which they "solved" by writing big bundling systems.

[05:59] <moritz> Nom-: and if you've loaded the module that does the monkey patching, you could just as well import a subroutine from it

[06:00] <Nom-> Yes, but that'd change the syntax right?

[06:00] <moritz> yes

[06:00] <Nom-> So if you were specifically going for that syntax, then monkey patching is the only option

[06:00] <moritz> yes

[06:00] <Nom-> Which I kind of expected, was just wondering if it was possible :)

[06:00] <moritz> so don't go specifically for that syntax

[06:00] <japhb> Nom-, while Perl 6 is deeply OO, that doesn't mean we insist all code written in Perl 6 look like method calls.  :-)

[06:00] <moritz> and multi subs give you the same kind of power that method dispatch gives you

[06:10] *** birdwindupbird joined
[06:10] *** Reini joined
[06:12] *** xinming_ is now known as xinming

[06:12] *** kaleem joined
[06:14] *** Reini left
[06:16] *** PZt left
[06:33] *** GlitchMr joined
[06:44] <moritz> https://github.com/blog/1302-goodbye-uploads # EEKS

[06:44] <moritz> both rakudo and star rely on github uploads for their releases

[06:45] <sorear> moritz: And niecza.

[06:45] <moritz> sorear: right

[06:46] <moritz> this is annoying, because any other upload service will have permissions separate from github

[06:57] <sorear> when Rakudo decides where they are moving, I'd like to follow

[07:04] <Nom-> Why not just tag a commit and provide the download from that?

[07:04] <Nom-> Or am I missing something.

[07:07] <sorear> Nom-: niecza does precompiled binary releases

[07:07] <sorear> which are 1.5MB zip files

[07:08] <Nom-> Ah right, yeah.. binaries are a problem

[07:09] <Nom-> Seems weird that Github would do that...

[07:10] *** Reini joined
[07:14] *** Reini left
[07:22] *** wamba joined
[07:27] <noggle_> uploads are PAIN!

[07:28] *** noggle_ is now known as noggle

[07:41] *** Reini joined
[07:45] *** Reini left
[07:50] <moritz> noggle: not having them is a pain

[08:05] <LoRe> noggle: just poked fun at the blog post

[08:09] *** GlitchMr left
[08:20] *** atrodo left
[08:23] *** robins is now known as robinsmidsrod

[08:27] *** rindolf joined
[08:39] *** rindolf left
[08:39] *** rindolf joined
[08:40] <tadzik> good morning #perl6

[08:40] <sorear> o/ tadzik

[08:46] *** sivoais left
[08:46] <FROGGS__> morning

[08:49] <moritz> \o

[08:49] *** rindolf left
[08:50] *** rindolf joined
[09:01] *** rindolf left
[09:01] *** rindolf joined
[09:09] *** rindolf left
[09:09] *** rindolf joined
[09:11] *** immortal joined
[09:11] *** immortal left
[09:12] *** Guest90497 joined
[09:12] *** Guest90497 left
[09:12] <jnthn> morning o/

[09:18] *** Kharec joined
[09:22] *** rindolf left
[09:23] *** rindolf joined
[09:32] <felher> Pokemon style :)

[09:34] <jnthn> .oO( I thought it was all about Gangnam style these days... )

[09:35] <moritz> well, I'm a bit old-fashioned

[09:36] *** cedrvint_ joined
[09:36] <cedrvint_> hello #perl6

[09:36] <cedrvint_> moritz++ # post about X

[09:37] *** rindolf left
[09:37] <cedrvint_> rn: sub foo { die }; foo; CATCH { when * { say 'catched' } }

[09:37] <p6eval> rakudo 78b53a: OUTPUT«␤  in sub foo at /tmp/YsgaDngZle:1␤  in block  at /tmp/YsgaDngZle:1␤␤»

[09:37] <p6eval> ..niecza v24-5-g599cbcb: OUTPUT«catched␤»

[09:38] *** rindolf joined
[09:38] <cedrvint_> hum, why this doesn't work with Rakudo?

[09:38] <cedrvint_> r: { sub foo { die }; foo; CATCH { when * { say 'catched' } } }

[09:38] <p6eval> rakudo 78b53a: OUTPUT«catched␤»

[09:39] <cedrvint_> it looks as if a file has no lexical scope wrt exceptions

[09:39] <moritz> that's weird

[09:40] <moritz> btw the past tense of "catch" is "caught"

[09:40] *** immortal joined
[09:40] *** immortal left
[09:40] *** immortal joined
[09:40] <cedrvint_> my english is borked :)

[09:41] <moritz> and the Borg speak English :-)

[09:42] <jnthn> Hm, tht first example really shoulda cutch the exception :)

[09:42] <jnthn> Probably deserves an RT

[09:43] <FROGGS__> .oO( resistance is futile )

[09:44] <cedrvint_> FROGGS__: wow! this is the (new) title of my Advent article ("Formula: resistance is futile")

[09:44] <cedrvint_> FROGGS__: are you a precog ? ;)

[09:45] <FROGGS__> no, always slept in professor trelawsneys classes ;o)

[09:46] <moritz> FROGGS__ i just a prefrog :-)

[09:50] <sorear> moritz is a tadpole.  "tadzik, however, is more than a tad..."

[09:50] * cedrvint_ submits rakudobug

[09:50] <tadzik> hehe

[09:52] <moritz> :-)

[09:53] *** dakkar joined
[09:53] *** fhelmberger joined
[09:55] *** sivoais joined
[09:57] *** wamba left
[09:57] *** wamba joined
[10:01] *** cedrvint_ left
[10:01] *** birdwindupbird left
[10:03] *** immortal left
[10:04] *** hypolin left
[10:04] *** wamba left
[10:05] *** wamba joined
[10:06] *** anuby left
[10:07] * moritz has written   sub { sub { 1 } }   in production Perl 5 code today :-)

[10:08] *** sivoais left
[10:09] *** wamba left
[10:09] <grondilu>  what does 'PMC' stands for in "Null PMC access in find_method('subst')"?

[10:13] *** erkan joined
[10:13] *** erkan left
[10:13] *** erkan joined
[10:15] *** Psyche^ joined
[10:15] *** Psyche^ is now known as Patterner

[10:20] <moritz> Parrot Magical Cookie

[10:21] <moritz> parrot's idea of an object

[10:23] <jnthn> Or really any heap-allocated thing.

[10:29] *** FROGGS_ joined
[10:41] *** groky joined
[10:42] <moritz> aren't strings heap-allocated and non-PMCs?

[10:43] <jnthn> Ah, true

[10:43] <jnthn> I was thinking of arrays and hashes and so forth

[10:44] <moritz> but those are PMCs too, no?

[10:44] <jnthn> yes.

[10:44] <moritz> and objects :-)

[10:44] <moritz> ah well, never mind my ramblings

[10:44] <jnthn> or mine :)

[10:45] *** groky left
[10:50] *** jfried joined
[10:50] *** Ulti joined
[10:51] *** cognominal left
[10:55] *** Bucciarati left
[10:56] *** xinming left
[10:57] *** wamba joined
[10:57] *** Bucciarati joined
[10:57] *** xinming joined
[10:59] *** Kharec left
[11:00] *** gootle left
[11:05] *** Su-Shee_ joined
[11:06] <dalek> perl6-examples: ae7dbb3 | (L. Grondin)++ | rosalind/ctbl-grondilu.pl:

[11:06] <dalek> perl6-examples: [rosalind] CTBL

[11:06] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/ae7dbb3e3e

[11:09] *** Su-Shee left
[11:19] *** sivoais joined
[11:21] *** kivutar joined
[11:25] *** bphillips1 joined
[11:27] *** bphillips left
[11:27] *** mtk left
[11:28] *** PZt joined
[11:44] *** Su-Shee_ is now known as Su-Shee

[11:54] *** bowtie joined
[12:01] *** gootle joined
[12:15] *** fgomez left
[12:23] <grondilu> with monkey typing, I can augment classes but how can I augment roles?

[12:23] <jnthn> You can't.

[12:24] <jnthn> Roles are immutable. End of story.

[12:25] <jnthn> Note that augmenting a role would NOT add methods to any classes that compose the role.

[12:25] <jnthn> Even if it were possible.

[12:26] <grondilu> ok

[12:26] <grondilu> rn: use MONKEY_TYPING; augment class Range { method encode(Int $n is copy) { gather while $n > 0 { take self[$n mod self.elems]; $n div= self.elems } } }; say ("a".."i").encode:  2012

[12:26] <p6eval> rakudo 78b53a, niecza v24-5-g599cbcb: OUTPUT«f h g c␤»

[12:27] <jnthn> So even if we put aside "the spec says roles are immutable" it'd still be fairly useless or at the very least confusing... 

[12:27] *** mtk joined
[12:31] *** mtk left
[12:31] *** mtk joined
[12:33] *** wamba1 joined
[12:34] *** wamba left
[13:06] <pmichaud> (github downloads)  I suppose we could put the tarballs on the rakudo.org server, although I'd be a bit concerned about bandwidth usage

[13:06] <pmichaud> we could certainly start that way and see if it's a problem

[13:09] <moritz> you can get a bandwidth estimate by looking at the github download pages, and sum up the number of downloads

[13:09] <moritz> rakudo-star-2012.09.msi is nearly 10MB and had nearly 4k downloads => 40GB traffic from that file

[13:11] <moritz> https://wordpress.org/extend/plugins/free-cdn/ # nice idea, maybe we can use that too?

[13:13] <pmichaud> let me see what the bandwidth usage has been on my server... 40GB doesn't sound too bad

[13:17] <timotimo> interesting, so it's a research project?

[13:17] <timotimo> and that means you can use it for free?

[13:17] <timotimo> pretty neat

[13:17] <timotimo> that way you get service for free and they get research data for ... almost free :)

[13:22] *** SamuraiJack left
[13:28] <pmichaud> looks like my server is currently serving 40GB/month, so adding rakudo star downloads would effectively double that. (more)

[13:28] <pmichaud> but since I have a 2TB/month limit, I think I'd be safe for a while :)

[13:29] <moritz> yes, sounds good :-)

[13:29] <moritz> if we exceed that, I can also ask my current employer if they are willing to host open source stuff

[13:29] <jnthn> Sounds like a fine solution for the time being

[13:29] <jnthn> moritz++

[13:29] <jnthn> er

[13:29] <jnthn> pmichaud++ even :)

[13:30] <jnthn> but moritz always deserves karma anyways :)

[13:30] <moritz> they hinted that might be a possiblity in my first interview

[13:30] <moritz> pmichaud++ indeed

[13:31] <pmichaud> I'll get copies of the existing tarballs downloaded onto the server

[13:32] <pmichaud> I'll be a little sad to lose the download statistics, though.

[13:32] <pmichaud> maybe I can set something up for that on the server too.

[13:35] <rindolf> I'd like to thank all of you for the Perl 6 Advent calendar of this year.

[13:36] * moritz bows

[13:36] <moritz> speaking of which: pmichaud, do you happen to want to take day 24?

[13:38] *** gaussblurinc_ joined
[13:39] <timotimo> https://rt.perl.org/rt3/Ticket/Display.html?id=77074 - if this is considered a bug, how do the lazyness semantics have to work in order for this to be fixed? o_O

[13:40] <pmichaud> http://rakudo.org/downloads/star/

[13:40] <timotimo> easy fix: let the webserver download the corresponding file from github parallel to the user downloading it from rakudo.org

[13:40] <timotimo> voila: instant correct download statistics

[13:42] <pmichaud> timotimo: ...except github is getting rid of their downloads section

[13:42] <pmichaud> (or I'm not understanding what you wrote)

[13:42] <timotimo> oh, that was the missing part

[13:42] <timotimo> didn't know about that

[13:42] <pmichaud> that's the whole reason for the move in the first place :-)

[13:43] <pmichaud> I think RT #77074 is wrong in terms of what it expects.

[13:43] <pmichaud> the first @in[1] should definitely be 2, not 20

[13:43] <pmichaud> because array assignment is mostly eager

[13:44] <pmichaud> I think it could be closed as "not a bug"

[13:44] <timotimo> i'll copypaste this irc snippet and close it, k?

[13:45] <jnthn> my @out := @in.map({$_*=10;}); # this binding means we don't evaluate the map eagerly, since binding is not mostly eager

[13:45] <jnthn> So yeah, think it's not a bug.

[13:46] <timotimo> "rejected" is the right status for "not a bug"?

[13:46] <moritz> yes

[13:50] *** drbean left
[13:51] *** wamba1 left
[13:52] *** drbean joined
[13:56] <pmichaud> http://rakudo.org/downloads/rakudo/

[13:56] <pmichaud> Now we just need a process for uploading tarballs to the server.

[13:57] <jnthn> pmichaud: The MSIs seem to be missing from there?

[13:57] <jnthn> oh, wait...you did rakudo, not star :)

[13:58] <pmichaud> http://rakudo.org/downloads/star/

[13:58] <pmichaud> 13:40 <pmichaud> http://rakudo.org/downloads/star/

[13:58] <jnthn> ah, yes

[13:59] <jnthn> Sorry, a bit bogged down prep'ing for next ocuple of days teaching, so only half following :)

[13:59] <pmichaud> I guess we'll just manage public ssh keys on the server and handle it via scp

[14:03] <pmichaud> (day 24)  I'll need a day to think about it.

[14:04] <pmichaud> since I'm having to travel Dec 20-Dec 23, I'd be happy if someone else wanted to take 12/24  :-)

[14:04] <moritz> so far we haven't had trouble filling the slots

[14:04] <pmichaud> moritz++

[14:05] <cedrvint> r: ("A" ... "AA").say

[14:05] <p6eval> rakudo 78b53a: OUTPUT«A B C D E F G H I J K L M N O P Q R S T U V W X Y Z AA␤»

[14:05] <cedrvint> r: ("B" ... "AA").say

[14:05] <p6eval> rakudo 78b53a: OUTPUT«Decrement out of range␤  in method Str at src/gen/CORE.setting:10198␤  in method Stringy at src/gen/CORE.setting:825␤  in sub infix:<eq> at src/gen/CORE.setting:1137␤  in method ACCEPTS at src/gen/CORE.setting:3806␤  in block  at src/gen/CORE.setting:12137␤  in blo…

[14:06] <cedrvint> ^ is it a bug?

[14:06] <moritz> no

[14:06] <moritz> hm

[14:06] <moritz> well, not sure

[14:07] <moritz> infix:<...> uses infix:<cmp> to compare the end points, but .chars()-first comparison for end detection, or some such

[14:07] <moritz> I'm not sure what the spec says

[14:08] <pmichaud> S03:  For functions deduced when there is only one value on the left, the final value is used to determine whether *.succ or *.pred is more appropriate. The two values are compared with cmp to determine the direction of the progression.

[14:09] <pmichaud> since  'B' cmp 'AA'  is Decrease, the progression is decrease.

[14:09] *** dakkar left
[14:09] <cedrvint> r: "B" cmp "AA"

[14:09] <p6eval> rakudo 78b53a:  ( no output )

[14:09] <cedrvint> r: ("B" cmp "AA").say

[14:09] <p6eval> rakudo 78b53a: OUTPUT«Decrease␤»

[14:09] *** gaussblurinc__ joined
[14:09] <cedrvint> r: ("A" cmp "AA").say

[14:09] <p6eval> rakudo 78b53a: OUTPUT«Increase␤»

[14:09] <pmichaud> afk, kid ride to school

[14:09] *** dakkar joined
[14:09] *** gaussblurinc_ left
[14:10] <cedrvint> moritz, pmichaud: thanks!

[14:10] *** kaleem left
[14:11] *** wamba joined
[14:13] *** cognominal joined
[14:17] *** PacoAir joined
[14:23] *** bluescreen10 joined
[14:25] *** gaussblurinc___ joined
[14:25] *** gaussblurinc__ left
[14:25] *** jaldhar_ left
[14:25] *** ponbiki left
[14:27] *** ponbiki joined
[14:28] *** ponbiki is now known as Guest31156

[14:28] *** benabik left
[14:30] *** mtk left
[14:33] *** Reini joined
[14:36] *** kaare_ joined
[14:42] *** mtk joined
[14:46] *** Reini left
[14:47] *** atrodo joined
[14:55] *** stopbit joined
[15:00] <Woodi> maybe torrenting perl6 packballs be possible ?

[15:02] <moritz> possible, but inconvenient

[15:02] <Woodi> anyway, looking on star download stats it looks once per year, around summer, stats spikes... it is features related or some other reason can be ?

[15:03] *** kivutar left
[15:04] <jnthn> Woodi: YAPC

[15:04] <Woodi> moritz: oo... they force ppls to do such tings there ?

[15:05] <Woodi> err, /moritz/jnthn/

[15:05] <jnthn> Woodi: Did you mean me? But no, not force at all. Just that a bunch of folks coming to Perl 6 talks may inspire them to go download things and try it out :)

[15:05] <jnthn> It may well not be all of it, just a guess :)

[15:07] *** kaleem joined
[15:07] <Woodi> YM(ore)PCs would be nice :)

[15:16] *** gaussblurinc___ left
[15:16] *** Reini joined
[15:20] <Woodi> would be good to find (few) thing(s) where using Perl6 will be irrepleceable or choice #1 for everyone :)

[15:20] *** Reini left
[15:20] *** GlitchMr joined
[15:21] <Su-Shee> it will be for "everything with data", if placed properly into this realm.

[15:21] <Su-Shee> hello everyone.

[15:21] <Woodi> o/ Su-Shee :)

[15:23] <Woodi> first what comes to mind is using grammars for replace text in files when sed s/a/b/g is to simple...

[15:24] <Woodi> like personalized spam mails maybe :)

[15:24] <skids> grammars will probably be one of the stronger distinguishing features, yes, but not quite for that simple a task.

[15:24] <Woodi> except it is evil and needs good performance :)

[15:25] <Su-Shee> I actually mean the combination of new regexes, grammars, operators and the way unicode etc. is handled. that makes it uniquely nice to handle "data".

[15:25] <cognominal> need to correlate download and jnthn trips over the world :)

[15:25] <Su-Shee> plus the usal density, whipuptitude and conciseness of perl in general..

[15:26] <cognominal> *rakudo downloads

[15:26] * skids trips over the world every day.  starting with the cat.

[15:29] <Woodi> so we need to hijack mass business raportings from raw data...

[15:32] *** skids left
[15:46] *** Reini joined
[15:51] *** Reini left
[15:53] *** Reini joined
[15:53] *** Reini left
[15:55] *** kaare_ left
[16:06] <colomon> r: my $set = set 1, 2, 3; my $set2 = 2, 4, 6; say $set ∩ $set2;

[16:06] <p6eval> rakudo 78b53a: OUTPUT«===SORRY!===␤Two terms in a row␤at /tmp/AsbAGyGu7a:1␤------> t 1, 2, 3; my $set2 = 2, 4, 6; say $set ⏏∩ $set2;␤    expecting any of:␤        postfix␤        infix or meta-infix␤        infix stopper␤        statement end␤       …

[16:06] <colomon> nr: my $set = set 1, 2, 3; my $set2 = 2, 4, 6; say $set ∩ $set2;

[16:06] <p6eval> niecza v24-5-g599cbcb: OUTPUT«Unhandled exception: Cannot coerce 2 to a Set; use set(2) to create a one-element set␤  at /home/p6eval/niecza/lib/CORE.setting line 1435 (die @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2090 (to-set @ 6) ␤  at /home/p6eval/niecza/lib/CORE.setting …

[16:06] <p6eval> ..rakudo 78b53a: OUTPUT«===SORRY!===␤Two terms in a row␤at /tmp/TbXrOkWvQm:1␤------> t 1, 2, 3; my $set2 = 2, 4, 6; say $set ⏏∩ $set2;␤    expecting any of:␤        postfix␤        infix or meta-infix␤        infix stopper␤        statement end␤       …

[16:06] <colomon> nr: my $set = set 1, 2, 3; my $set2 = set 2, 4, 6; say $set ∩ $set2;

[16:06] <p6eval> niecza v24-5-g599cbcb: OUTPUT«set(2)␤»

[16:06] <p6eval> ..rakudo 78b53a: OUTPUT«===SORRY!===␤Two terms in a row␤at /tmp/4WNIdKQWaz:1␤------>  2, 3; my $set2 = set 2, 4, 6; say $set ⏏∩ $set2;␤    expecting any of:␤        postfix␤        infix or meta-infix␤        infix stopper␤        statement end␤       …

[16:07] <colomon> nr: my $set = set 1, 2, 3; my $set2 = set 2, 4, 6; say $set (&) $set2;

[16:07] <p6eval> niecza v24-5-g599cbcb: OUTPUT«set(2)␤»

[16:07] <p6eval> ..rakudo 78b53a: OUTPUT«===SORRY!===␤Two terms in a row␤at /tmp/uYnjz77nX6:1␤------>  2, 3; my $set2 = set 2, 4, 6; say $set ⏏(&) $set2;␤    expecting any of:␤        postfix␤        infix or meta-infix␤        infix stopper␤        statement end␤     …

[16:07] <colomon> rakudo doesn't even have the Texas set operators?

[16:08] <TimToady> used to, I think

[16:09] <moritz> rakudo currently doesn't have any set operators

[16:09] <colomon> this presents some difficulties with the advent post I am working on.

[16:10] <moritz> well, mention that it's niecza-only

[16:10] *** wamba left
[16:10] * colomon is starting to think he is going to have to hack on both niecza and rakudo to get the examples to work in both....

[16:10] *** wamba joined
[16:10] <TimToady> I wonder how rakudos setops got clobbered...

[16:10] <TimToady> *do's

[16:11] <moritz> they were simply never ported to nom

[16:11] <TimToady> I'm pretty sure they were

[16:13] <moritz> git log -p src/core/Set.pm # first mention of 'infix' is cfff0c802d14a2eacd5dde912da0155c162c2fa6

[16:13] <moritz> which is the "replace old files with nom files"

[16:13] *** sirrobert joined
[16:13] <sirrobert> hi p6

[16:14] <moritz> \o sirrobert

[16:19] <colomon> moritz: I remember there was a technical reason why the non-ascii set operators wouldn't work, but is there any reason not to include the Texas variants? 

[16:20] <moritz> I don't think so

[16:21] <colomon> okay, I'll add that to my list.  :)

[16:22] <colomon> errr, I'll get off my ass and do it right now, actually.  :)

[16:22] <moritz> ++colomon

[16:29] <sirrobert> in a string that looks like this: "this is my string\n\nand it has two newlines in it."

[16:29] <sirrobert> how do I match up to the two newlines?

[16:29] <sirrobert> here's a better string...

[16:29] <sirrobert> in a string that looks like this: "this is\nmy string\n\nand it has two newlines in it."

[16:30] <sirrobert> I want to catch single newlines, but not double... I can't seem to figure out how to write the grammar token

[16:30] <moritz> (.*?)\n\n

[16:30] *** MayDaniel joined
[16:30] <sirrobert> well, I want to match it again after.  It's a double-newline delimited text

[16:30] <moritz> r: $_ = "this is\nmy string\n\nand it has two newlines in it."; /(.*?)\n\n/ and say $0

[16:31] <p6eval> rakudo 78b53a: OUTPUT«｢this is␤my string｣␤␤»

[16:31] <moritz> sirrobert: .split("\n\n") ?

[16:31] <sirrobert> moritz: yeah, that might work...

[16:31] <TimToady> there should probably be a paras to go with lines

[16:31] <sirrobert> moritz:  I'm trying to parse a file with a grammar.  It's entered as "plain text" (with light markup), and translated into HTML.

[16:32] <moritz> sirrobert: IMHO there's nothing wrong with breaking up a text into chunks before parsing each chunk with a grammar

[16:32] <moritz> and if the delimiter can't appear inside the chunks, that's usually much simpler

[16:33] <TimToady> (.*?)+ %% [\n\n+]  or so maybe

[16:33] <sirrobert> moritz: split into array, then run the grammar on each element of the array?

[16:33] <sirrobert> https://gist.github.com/4269302

[16:33] <sirrobert> that's what I'm currently using, btw.

[16:33] <moritz> sirrobert: yes

[16:34] *** kaleem left
[16:34] <TimToady> you probably want + on the second \n

[16:34] <sirrobert> TimToady: yeah, that makes sense.  What does the %% do?

[16:34] <TimToady> since someone might put more than 2 newlines

[16:34] <sirrobert> moritz:  hmmm ok 

[16:35] <TimToady> makes the separator optional at the end

[16:35] <TimToady> as opposed to %

[16:35] <sirrobert> TimToady: what does % do? =)

[16:35] <TimToady> what you want :)

[16:35] <sirrobert> heh

[16:36] <TimToady> splits on a separator

[16:36] <sirrobert> ok

[16:36] <moritz> you can also do something like   token paragraph { [\N+ ]* % [\n <!before \n> ] }

[16:36] <TimToady> can't use \N

[16:36] <sirrobert> is [] negation?

[16:36] <TimToady> has to match solitary \n

[16:36] <moritz> sirrobert: [] is grouping

[16:37] <sirrobert> moritz: whew... that's what I thought =)

[16:37] <TimToady> [\N | \n<!before\n]+

[16:37] <TimToady> er, *

[16:37] <TimToady> bleah, need more coffee

[16:37] <moritz> TimToady: but that gobbles up single trailing newlines

[16:38] <TimToady> shouldn't it?

[16:38] <moritz> if the grammar is supposed to evolve a bit, that might hurt

[16:38] <moritz> dunno

[16:39] <moritz> anyway, splitting is way easier :-)

[16:39] *** pmurias joined
[16:39] *** kaare_ joined
[16:39] <TimToady> but doesn't compose into other grammars

[16:40] <moritz> aye

[16:40] <sirrobert> how do I do negation?  the equivalent of [^x] in p5?

[16:40] <TimToady> almost nothing in regex is the same as p5

[16:41] <sirrobert> so I've found =)

[16:41] <sirrobert> that's why I don't know how to do negation ;)

[16:41] <TimToady> which means that, even if you avoid reading all the other synopses, reading the first half of S05 is probably useful

[16:41] <sirrobert> will go now

[16:42] <sirrobert> reading

[16:42] <moritz> <-[ ... ]> is the negated character class

[16:42] <TimToady> in specific, <-[x]> is what it is now

[16:42] <sirrobert> moritz: makes sense now that I see it

[16:42] <TimToady> oops, moritz beat me to the specific answer

[16:42] *** Chillance joined
[16:43] <TimToady> moritz++ noticed I could be construed as unconstructive before I noticed :)

[16:43] <moritz> TimToady: speaking of unconstructive.. (sink observation upcoming)

[16:43] <sirrobert> heh

[16:44] <colomon> first attempt to add setops blows up Rakudo compile.

[16:44] <colomon> maximum recursion depth exceeded

[16:44] <colomon> current instr.: 'Stringy' pc 13 ((file unknown):436) (src/gen/CORE.setting:162)

[16:44] <colomon> called from Sub 'infix:<~>' pc 36 ((file unknown):693911056) (src/gen/CORE.setting:1125)

[16:44] <colomon> called from Sub 'Str' pc 83 ((file unknown):25876508) (src/gen/CORE.setting:822)

[16:44] <colomon> called from Sub 'Str' pc 11718 (src/gen/perl6-symboltable.pir:4276) (src/Perl6/World.pm:750)

[16:44] <moritz> TimToady: some of the errors I fixed in the qast-sink-1 branch (in rakudo and in roast) were like   try something();  sub something { for @values { die if /foo/ } }

[16:44] *** kaleem joined
[16:45] <moritz> 'for' is now lazy (in the branch), so &something returns a lazy list

[16:45] <moritz> so when it blows up, the try doesn't catch it

[16:45] <moritz> which surprises people, including me :-)

[16:45] <moritz> colomon: all multis in the setting need an explicit proto

[16:46] <colomon> moritz: these are onlys

[16:46] <colomon> onlies?

[16:46] <moritz> oh, and I think if you add operators to the setting, you need to also add them to src/Perl6/Grammar.pm

[16:46] * jnthn wonders if adding operators in the setting that aren't declared up front in the grammar works.

[16:46] *** leont joined
[16:46] <colomon> oh

[16:46] <moritz> the fudging-the-grammar might have some bootstrappy issues

[16:47] *** bphillips1 left
[16:47] <jnthn> Yeah, suggest adding them explicitly in Grammar.pm

[16:47] <colomon> where?

[16:48] <moritz> iirc the operators are roughly sorted by precedence

[16:48] <jnthn> Yeah...just look for infix:sym<+> or something.

[16:48] <moritz> so you can use that as a rough guideline

[16:48] <colomon> yeah, just found it.

[16:49] <jnthn> It may have worked at some point, but I suspect that the work I did to get us user-defined precedence levels and the correct leixcal scoping of them and unbust pre-comp...may have somehow regressed this aspect of things.

[16:49] *** pmurias left
[16:51] <TimToady> masak, jnthn: the intent is that heredoc indent is a textual feature, not a shortcut for a run-time feature

[16:52] <TimToady> yes it's harder, but STD does it that way (and so niecza, I think)

[16:53] <jnthn> TimToady: That means...breaking the string up and indenting each piece of it separately and knowing not to if the piece in question doesn't contain a new line :/

[16:53] <colomon> TimToady: should infix:<∈> really be "chaining infix" in precedence? 

[16:53] <jnthn> I guess the AST already has it that was so it's "just" a bit more post-processing.

[16:53] <TimToady> jnthn: only a textual newline

[16:53] <jnthn> *way

[16:53] *** am0c left
[16:53] <jnthn> TimToady: textual as in the source?

[16:54] <TimToady> yes

[16:54] <jnthn> TimToady: It's a pain and I think it's too clever for it's own good. It's doable I guess.

[16:54] <TimToady> it's what the user wants, not the implementor

[16:54] <jnthn> As I user I like semantics I can easily grok 

[16:54] <TimToady> this is easy to grok

[16:54] <jnthn> As a teacher I like semantics I can easily explain

[16:54] <jnthn> "It forms the string and does what indent would do" is easy.

[16:55] <TimToady> there's an artificial left boundard at that point

[16:55] <TimToady> just move the line over

[16:55] <TimToady> *boundary

[16:55] <TimToady> what you see is what you get, if you just moved the text over to the left margin

[16:55] <jnthn> Hm, true

[16:55] <moritz> is that boundary determined by the indention of the heredoc terminator, or by the left border of the content?

[16:55] *** SamuraiJack joined
[16:55] <TimToady> it's visually the right thing to do

[16:55] <TimToady> terminator

[16:56] <TimToady> heredoc indent is only for not forcing the user to outdent heredocs like you have to do in p5

[16:57] <TimToady> or however you say that in English

[16:57] <TimToady> it's an aid to formatting code, is all

[16:57] <colomon> rakudo compile taking a very long time now....

[16:58] <colomon> and the same error as before.  :(

[16:58] <TimToady> and it's easy enough to call indent explicitly if you really want the run-time semantics

[16:59] <colomon> oh!  whoops....

[16:59] <jnthn> colomon: argh, I thought you were only going to add the texas ones

[16:59] <colomon> jnthn: I was

[16:59] <colomon> but I called one of the non-defined, non-Texas ones.

[16:59] <colomon> blows up the compile very nicely

[16:59] * TimToady looks forward to the day when the setting can be written in Perl 6 :P

[17:00] <jnthn> Yeah, well, every time I spend a few hours hunting down setting circularity sawing issues and then the rest of the day fixing them, it's a day that coulda been spent on something user-facing...

[17:08] <colomon> > 4 (elem) set 1, 2, 3

[17:08] <colomon> False

[17:08] <colomon> > 4 (elem) set 1, 2, 3, 4

[17:08] <colomon> True

[17:08] <jnthn> \o/

[17:08] <jnthn> colomon++

[17:08] <Woodi> do heredocs can be taken from file ? :) I know files are considered not-here but want it becouse of marketing simplicity...

[17:09] <colomon> do rakudo setting bugs always blow things up, or is something about doing things which are valid p6 but not supported by rakudo?

[17:10] <TimToady> jnthn: well, I have a great deal of sympathy and/or empathy with the vicarious sufferings of implementors, but the lack of set ops could also be construed as user-facing :)

[17:10] <jnthn> colomon: There's some cases that blow up nastily.

[17:10] <jnthn> TimToady: Yes, I was talking about hunting down the bad failure modes that can happen when adding stuff in the setting, not the set ops. :)

[17:10] *** leont left
[17:11] *** leont joined
[17:11] *** leont left
[17:11] <TimToady> and to someone naïve like me, it seems like another bootstrap step might help with that, at the cost of another bootstrap step, of course :)

[17:13] <jnthn> TimToady: It may, but it also brings the tricky issue of the setting's stuff really wanting to be in a single lexical scope.

[17:13] <jnthn> Maybe there's a good way to do somehting import-y...

[17:14] <TimToady> sometimes it feels like we're still trying to do N bootstrapping steps by putting N blocks of text into the setting; I see you point about the scoping, but maybe there's some way around that

[17:14] <jnthn> Well, CORE.setting today is one single file when the compiler gets it

[17:15] <jnthn> That there's any file split at all is just a developer convenience. They're all concatenated and compiled as one.

[17:16] <jnthn> The only step outside of that is the chunk of NQP code that assembles some of the most basic things by doing various MOP calls, then exports what it made, and the first thing CORE.setting does is import that.

[17:18] *** cognominal left
[17:18] <TimToady> I'm not so worried about the mechanics of that as I am about not really being sure what language we're in at any point; it'd be nice if we could know we were in something very close to full Perl 6 by the middle somewhere

[17:19] <TimToady> you can file that in the IWBNI bucket, of course :)

[17:19] <jnthn> Oh, I don't doubt it'd be nice. Just...tuit allocation. :)

[17:20] *** cognominal joined
[17:20] <TimToady> sure, just some yaks are more equal than others :)

[17:22] * TimToady stops tickling the guy in the torture device

[17:23] <jnthn> Don't worry, writing WPF demo code is actually a worse torture :P

[17:30] <colomon> > 1, 2, 3 (|) 2, 4, 6

[17:30] <colomon> set(1, 2, 3, 4, 6)

[17:42] *** cognominal left
[17:50] *** kaleem left
[17:54] <jnthn> dinner time, bbl

[17:58] *** larks left
[18:01] *** larks joined
[18:09] *** benabik joined
[18:14] *** ggoebel_ joined
[18:16] *** dakkar left
[18:23] *** kst` is now known as kst

[18:40] *** spider-mario joined
[18:41] *** popl joined
[18:52] <GlitchMr> Just wondering, now that GitHub deprecated downloads, where Rakudo and Niecza will store downloads now?

[18:52] <popl> GlitchMr: I think they were discussing this in the channel yesterday. Peruse the logs.

[18:53] <popl> It might be there.

[18:54] <GlitchMr> My download newest stable Perl 6 script was depending on GitHub, but whatever. It's just my problem.

[18:55] <popl> No, it's not just your problem. It's a big hassle.

[18:55] <popl> But it can happen, I guess.

[18:55] <GlitchMr> I guess hosting it on feather is not an option.

[18:57] <jnthn> GlitchMr: Rakudo downloads will be hosted on rakudo.org from now on; pmichaud++ got them copied over there earlier.

[19:01] *** ggoebel_ left
[19:02] *** skids joined
[19:09] *** sirrobert left
[19:09] *** sirrobert joined
[19:16] *** fhelmberger left
[19:17] *** FROGGS_ left
[19:20] <flussence> if bandwidth becomes a problem, I've got a suggestion: recompressing star 2012.11 using xz instead of gzip is about 30% smaller (5.3MB).

[19:22] * [Coke] has never heard of xz. Coke was still on bz.

[19:23] <jnthn> geez, you missed all of cz through wz too?!

[19:24] <FROGGS__> hehe

[19:24] <flussence> it's just a unix-ified version of the 7z format (which I believe sorts before all of them :)

[19:24] *** FROGGS__ is now known as FROGGS

[19:24] <[Coke]> r: say ('a'..'z').pick(1) ~ 'zip'

[19:24] <p6eval> rakudo 78b53a: OUTPUT«fzip␤»

[19:24] <GlitchMr> lol

[19:25] <GlitchMr> Randomly choose 'ZIP' format

[19:26] <GlitchMr> The problem with FZIP is that... it's just ZIP... with different extension.

[19:26] <GlitchMr> Used for Foxit Reader add-ons

[19:27] <BinGOs> extensions are so 20th century

[19:28] <GlitchMr> r: https://gist.github.com/4251559

[19:28] <p6eval> rakudo 78b53a: OUTPUT«===SORRY!===␤Cannot negate in because it is not iffy enough␤at /tmp/Jrrik3DuIY:9␤------> say 'lol'  !in⏏ 'face';␤»

[19:28] <GlitchMr> Even with new Gist page, getting gist still works :-).

[19:28] <diakopter> GlitchMr: yes; fortunate

[19:29] <FROGGS> BinGOs: mime magic++, and it is pretty easy for Perl 6

[19:29] <GlitchMr> I thought you meant that add-ons are so 20th century ;-).

[19:33] <FROGGS> I was thinking of file extensions.... pluggable add-ons are useful and will be ever

[19:36] *** zby_home_ joined
[19:38] *** awwaiid joined
[19:38] *** larks left
[19:38] *** larks joined
[19:43] *** fgomez joined
[19:47] <moritz> colomon: regarding your advent calendar post, you can replace $*ARGFILES.slurp with simply slurp()

[19:47] <GlitchMr> Wouldn't simply `slurp` work?

[19:48] <diakopter> r: say slurp

[19:48] <p6eval> rakudo 78b53a: OUTPUT«Land der Berge, Land am Strome,␤Land der Äcker, Land der Dome,␤Land der Hämmer, zukunftsreich!␤Heimat bist du großer Söhne,␤Volk, begnadet für das Schöne,␤vielgerühmtes Österreich,␤vielgerühmtes Österreich!␤␤Heiß umfehdet, wild umstritten␤liegst dem Erdteil du inmi…

[19:48] *** popl left
[19:48] <huf> huh?

[19:48] <diakopter> r: say slurp slurp slurp slurp slurp slurp

[19:48] <moritz> r: say slurp.uc

[19:48] <p6eval> rakudo 78b53a: OUTPUT«Unable to open filehandle from path 'Land der Berge, Land am Strome,␤Land der Äcker, Land der Dome,␤Land der Hämmer, zukunftsreich!␤Heimat bist du großer Söhne,␤Volk, begnadet für das Schöne,␤vielgerühmtes Österreich,␤vielgerühmtes Österreich!␤␤Heiß umfehdet, wild …

[19:48] <p6eval> rakudo 78b53a: OUTPUT«LAND DER BERGE, LAND AM STROME,␤LAND DER ÄCKER, LAND DER DOME,␤LAND DER HÄMMER, ZUKUNFTSREICH!␤HEIMAT BIST DU GROSSER SÖHNE,␤VOLK, BEGNADET FÜR DAS SCHÖNE,␤VIELGERÜHMTES ÖSTERREICH,␤VIELGERÜHMTES ÖSTERREICH!␤␤HEISS UMFEHDET, WILD UMSTRITTEN␤LIEGST DEM ERDTEIL DU IN…

[19:49] <GlitchMr> Also, I see Moritz had to put his "Exceptions" post. Why perlpilot haven't yet put his Perl 6 Advent article.

[19:49] <huf> why the austrian anthem?

[19:49] *** popl joined
[19:49] <moritz> GlitchMr: in this case, it works. But if there's something after it that could be parsed either as infix or prefix, it might go wrong

[19:49] <popl> Can someone hit me with some UTF-8 please?

[19:49] <huf> éáí

[19:49] <moritz> huf: we had to use something :-)

[19:50] <GlitchMr> popl: żółć łódź

[19:50] <moritz> popl: ␤ is the newline character

[19:50] <huf> moritz: is anyone austrian or is there some other reason?

[19:50] <moritz> huf: I think there was a YAPC::EU in Vienna or something

[19:50] <popl> GlitchMr: That renders nicely.

[19:50] <huf> ah :)

[19:50] <moritz> not sure if it's connected

[19:50] <popl> GlitchMr: Thanks for the suggestion.

[19:51] <GlitchMr> No problem. I use that font for coding and terminall.

[19:51] <GlitchMr> terminal*

[19:51] <popl> I like the braces.

[19:53] <GlitchMr> I only don't like dot and comma in DejaVu Sans Mono, but other than that, it's nice font.

[19:54] <huf> i quite like this anthem

[19:54] <huf> now that i read the translation

[20:03] *** SamuraiJack left
[20:11] <sergot> hi ! o/

[20:21] *** ggoebel_ joined
[20:22] *** leont joined
[20:22] *** leont left
[20:45] *** Rotwang joined
[20:45] <Rotwang> hi

[20:46] *** Rotwang left
[20:46] *** Rotwang joined
[20:47] <Rotwang> I'm trying to query p6eval but it doesn't work :C

[20:47] <Rotwang> so basicaly my question is: why 500 ~~ Int is True

[20:47] <Rotwang> but 1000/2 ~~ Int is False?

[20:48] <moritz> r: say (1000/2).WHAT

[20:48] <p6eval> rakudo 78b53a: OUTPUT«Rat()␤»

[20:48] <moritz> Rotwang: does that answer your question?

[20:49] <Rotwang> quite

[20:50] <Rotwang> thank you

[20:50] <moritz> you're welcome

[20:54] *** daniel-s joined
[20:57] *** _daniel-s__ left
[20:58] *** Chillance left
[20:58] *** gaussblurinc joined
[20:59] *** Rotwang left
[21:02] *** wamba left
[21:04] *** popl left
[21:04] *** DarthGandalf left
[21:06] *** GlitchMr left
[21:07] *** popl joined
[21:13] *** DarthGandalf joined
[21:13] *** gaussblurinc__ joined
[21:13] *** gaussblurinc left
[21:14] *** Rotwang joined
[21:19] <Rotwang> so how do I check if scalar contains an integer?

[21:19] *** daniel-s_ joined
[21:21] *** zby_home_ left
[21:22] *** colomon_ joined
[21:22] *** colomon left
[21:22] *** colomon_ is now known as colomon

[21:22] <felher> r: my $int = 1000; my $rat = $int/2; say $int ~~ Int; say $rat ~~ Int;

[21:22] <p6eval> rakudo 78b53a: OUTPUT«True␤False␤»

[21:22] *** spider-mario left
[21:22] *** daniel-s left
[21:23] *** spider-mario joined
[21:23] <felher> Rotwang: you can check if a $variable is an Int with '~~ Int'. The problem is, that '$int/2' is not an Int. If you want to know if '$int/2' is equivalent to an integer, you may do:

[21:23] <colomon> moritz: please tell me my advent post didn't post while I was at bell rehearsal...

[21:23] <felher> r: my $rat = 1000/2; say $rat == $rat.Int

[21:23] <p6eval> rakudo 78b53a: OUTPUT«True␤»

[21:24] * felher doesn't know if there is a better way :)

[21:24] *** wamba joined
[21:24] <moritz> colomon: it didn't

[21:24] <colomon> whew!

[21:24] <moritz> colomon: but I read the preview

[21:25] <colomon> the half-finished preview, as I paused to implement needed features in rakudo.  :)

[21:25] <jnthn> Blog Post Driven Development :)

[21:26] * jnthn ended up fixing something in the debugger while writing the debugger post :)

[21:26] <moritz> wouldn't be the first time

[21:26] <jnthn> hah!

[21:26] <Rotwang> felher: thank you

[21:27] <Rotwang> perl6 has really steep learning curve

[21:27] *** rindolf left
[21:27] *** spider-mario_ joined
[21:27] <Rotwang> maybe because there is not yet camel book equivalent

[21:28] *** spider-mario left
[21:29] <felher> Rotwang: may be :)

[21:29] *** colomon left
[21:31] *** gaussblurinc__ left
[21:32] *** ggoebel_ left
[21:32] <felher> Good night, #perl6

[21:32] *** colomon joined
[21:32] *** hash_table joined
[21:33] <popl> Good night, John Boy!

[21:36] *** DarthGandalf left
[21:42] <masak> good late evening, #perl6.

[21:42] <popl> afternoon, masak 

[21:42] <jnthn> dobry vecer, masak

[21:42] <popl> I just ate lunch.

[21:43] <popl> Now I am eating cookies. And telling the world about it!

[21:44] *** DarthGandalf joined
[21:45] <sorear> o/ masak

[21:46] <masak> Q: do three days of teaching wear you out? A: yes, but probably not as much as five days of teaching.

[21:46] <masak> stand by for final results.

[21:47] *** spider-mario_ left
[21:47] <jnthn> We thank you for participating in this research project.

[21:50] *** benabik left
[21:56] *** wamba left
[21:57] *** cxreg2 is now known as cxreg

[21:58] *** spanner joined
[22:01] *** spanner left
[22:06] *** hash_table left
[22:11] *** skids left
[22:19] *** DrEeevil left
[22:19] *** bonsaikitten joined
[22:19] *** moritz left
[22:20] *** moritz joined
[22:21] <masak> 'night, #perl6

[22:22] <diakopter> o/

[22:31] <grondilu> damn, would you guys please have a look at this attempt to create a modular integer class?  https://gist.github.com/4272252 

[22:32] <grondilu> It used to work, but for some reason it does not work anymore.  It tells me there is no candidate for infix:<+> where I do $a.Bridge + $b.Bridge

[22:33] <diakopter> does .Bridge return an Int?

[22:33] <grondilu> it should

[22:34] <diakopter> try specifying that it does?

[22:34] * grondilu checks

[22:34] <grondilu> I'd like something very generic.  I'm considering using any group, not just integers.

[22:35] <diakopter> yeah but % would need defined for that

[22:35] *** kaare_ left
[22:36] <grondilu> I've checked:  .Bridge does return an int

[22:36] <grondilu> *Int

[22:37] <grondilu> (assuming the object was created with something like Modular.new: $SomeInt, :$modulus;

[22:37] <grondilu> )

[22:37] <diakopter> oh, you've redefined <+>($, $)

[22:37] <grondilu> well I want to

[22:37] <timotimo> so, assuming i would like to try to improve the error message you get for trying to use . to concatenate strings in rakudo. how difficult is that? how many different places would i have to look at and/or touch? is there some good place to just look at to see how it's done?

[22:38] <grondilu> diakopter: but I didn't expect perl6 to forget about usual addition with integers :/

[22:38] <diakopter> what if you comment those protos

[22:39] <grondilu> then it does not export. But I guess I could repeat the export for each multi.

[22:39] <diakopter> I'd try that

[22:40] <grondilu> oh indeed now it works

[22:40] <jnthn> timotimo: Look for infix:sym<.> in STD. See if you can't incorporate that into Rakudo's Grammar.pm.

[22:41] <timotimo> i'll try

[22:41] <grondilu> so I must avoid redefining protos when extending arithmetics operators.  I'll try to remember that.

[22:41] <grondilu> it's kind of annoying that I have to repeat the export trait, though.

[22:42] <diakopter> you need a macro :P

[22:43] <grondilu> wow, that'd be weird

[22:44] <grondilu> I don't want to rant, but honnestly it should be easier to overload arithmetic operators.  It's much easier in Perl5, for instance.

[22:44] *** whiteknight joined
[22:45] <timotimo> std: "foo" . "bar"

[22:46] <jnthn> grondilu: Provided your proto was an onlystar one, I think it shoulda just taken the candidates and merged them. I guess Rakudo just ain't that smart yet.

[22:46] <p6eval> std a8bc48f: OUTPUT«===SORRY!===␤Unsupported use of . to concatenate strings; in Perl 6 please use ~ at /tmp/zC97NlkRd3 line 1:␤------> "foo" . ⏏"bar"␤Parse failed␤FAILED 00:00 42m␤»

[22:46] <jnthn> r: "foo" . "bar"

[22:46] <p6eval> rakudo 78b53a: OUTPUT«===SORRY!===␤Two terms in a row␤at /tmp/nYSb2oKljx:1␤------> "foo" ⏏. "bar"␤    expecting any of:␤        postfix␤        infix or meta-infix␤        infix stopper␤        statement end␤        statement modifier␤        stateme…

[22:46] <timotimo> ijust wanted to find the error message

[22:46] <jnthn> yeah :)

[22:46] <jnthn> Just seeing we didn't already do it

[22:46] <timotimo> i checked in advance :D

[22:46] <timotimo> wait, i was getting "confused"

[22:47] <jnthn> Your Rakudo is probably a little older then.

[22:47] <timotimo> yes, indeed

[22:47] <timotimo> it appears to be a 2012.10

[22:47] <jnthn> The TTIAR thing is very recent.

[22:47] <jnthn> Like, within the last few days.

[22:47] <jnthn> It's not quite right either yet...shouldn't have said TTIAR there. That's on my todo list... :)

[22:48] <jnthn> But, $dayjob nommed all the tuits again today, and will tomorrow also 

[22:48] *** daniel-s__ joined
[22:48] <jnthn> Guess I should get an early night...gotta do an early commute and for some reason the rail network here isn't very well built for cold weather...

[22:49] <jnthn> 'night o/

[22:49] <diakopter> o/

[22:49] <timotimo> what is a tuit?

[22:49] <diakopter> "get around to it"

[22:50] <timotimo> oooh

[22:50] *** daniel-s_ left
[22:51] *** MayDaniel left
[22:51] <diakopter> so a round tuit is an available unit of work capacity

[22:53] *** kurahaupo joined
[22:54] *** kurahaupo left
[22:54] <timotimo> interesting. the code seems to already be in place, but gives a different error

[22:56] *** kurahaupo joined
[22:59] *** PacoAir left
[23:07] <timotimo> r: 'foo'.'bar'

[23:07] <p6eval> rakudo 78b53a: OUTPUT«===SORRY!===␤Quoted method name requires parenthesized arguments␤at /tmp/IjfEWs5nEm:1␤------> 'foo'.'bar'⏏<EOL>␤»

[23:07] <timotimo> i've added 'use ~ to concatenate strings' to that

[23:07] <timotimo> but i don't quite know how to catch 'foo' . 'bar'

[23:07] *** stopbit left
[23:08] <timotimo> oh, i didn't look right

[23:14] *** Rotwang left
[23:14] <timotimo> are those kind of thing supposed to have unit tests?

[23:17] <timotimo> so i added this line here:     token infix:sym<.>    { <.obs('. to concatenate strings', '~')> }

[23:18] <timotimo> but when trying to make, i get a huge amount of the same error message over and over: Error while constructing error object:Could not locate compile-time value for symbol X::Comp::AdHoc

[23:18] <timotimo> and then it runs out of memory :|

[23:18] *** bluescreen10 left
[23:19] <timotimo> ah, using «.» instead made it work i think

[23:19] <timotimo> nope, same error. no clue what's going on to be honest

[23:20] <timotimo> oh, the first error is cannot create an X::Obsolete object

[23:22] <dalek> roast: aadc834 | (Solomon Foster)++ | S03-operators/set.t:

[23:22] <dalek> roast: Fudge for rakudo.

[23:22] <dalek> roast: review: https://github.com/perl6/roast/commit/aadc834ba1

[23:24] <timotimo> backslashing the . seems to be the right thing to do

[23:24] <timotimo> curses! wrong again :(

[23:26] <timotimo> disregard all that please

[23:29] <timotimo> i need to go see a doctor about my eyesight i believe

[23:29] *** benabik joined
[23:30] <timotimo> it would appear my infix up there was being matched everywhere

[23:34] <timotimo> it would seem i'm not allowed to commit to rakudo/rakudo

[23:36] <timotimo> http://t.h8.lv/0001-warn-about-obsolete-use-of-.-to-concatenate-strings.patch - anyone may feel free to commit this, or give me the right to push to rakudo/rakudo (github user name is timo)

[23:37] *** skids joined
[23:46] <timotimo> rakudo: $.

[23:46] <p6eval> rakudo 78b53a: OUTPUT«===SORRY!===␤Non-declarative sigil is missing its name␤at /tmp/cqBc08AEwZ:1␤------> $⏏.␤    expecting any of:␤        statement list␤        prefix or term␤        prefix or meta-prefix␤»

[23:46] <timotimo> so, i improved that message to say Unsupported use of $. variable;  in Perl 6 please use the filehandle's .line method

[23:46] <timotimo> std: / $. /

[23:46] <p6eval> std a8bc48f: OUTPUT«===SORRY!===␤Unsupported use of $. variable; in Perl 6 please use the filehandle's .line method at /tmp/HgOnZDrYaa line 1:␤------> / $.⏏ /␤Parse failed␤FAILED 00:00 42m␤»

[23:46] <timotimo> not that one yet, though

[23:47] <timotimo> couldn't find another occurence of that string in std, though, so not sure how to make that one match as well

[23:50] <grondilu> rn: role Foo does Numeric { method Bridge { 42 } }; use Test; is 5 but Foo, 42;

[23:50] <p6eval> niecza v24-5-g599cbcb: OUTPUT«not ok 1␤# /tmp/j7elaC3MkK line 1␤#    Failed test␤#           got: 5␤#      expected: 42␤»

[23:50] <p6eval> ..rakudo 78b53a: OUTPUT«not ok 1 - ␤#      got: '5'␤# expected: '42'␤»

[23:52] <grondilu> rn: class Foo does Numeric { method Bridge { 42 } }; use Test; is Foo.new, 42;

[23:52] <p6eval> niecza v24-5-g599cbcb: OUTPUT«not ok 1␤# /tmp/DbihpOq1nZ line 1␤#    Failed test␤#           got: Foo()<instance>␤#      expected: 42␤»

[23:52] <p6eval> ..rakudo 78b53a: OUTPUT«not ok 1 - ␤#      got: 'Foo<-1855941745>'␤# expected: '42'␤»

[23:54] <grondilu> rn: role Foo does Numeric { method Bridge { 42 }; method Str { "42" } }; use Test; is 5 but Foo, 42;

[23:54] <p6eval> niecza v24-5-g599cbcb: OUTPUT«ok 1␤»

[23:54] <p6eval> ..rakudo 78b53a: OUTPUT«ok 1 - ␤»

[23:55] <grondilu> rn: class Foo does Numeric { method Bridge { 42 } }; use Test; is_approx Foo.new, 42;

[23:55] <p6eval> rakudo 78b53a: OUTPUT«(timeout)»

[23:55] <p6eval> ..niecza v24-5-g599cbcb: OUTPUT«Unhandled exception: Cannot use value like Foo as a number␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.setting line 293 (Any.Numeric @ 6) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/Test.pm6 line 155…

[23:55] <grondilu> rn: role Foo does Numeric { method Bridge { 42 } }; use Test; is_approx 5 but Foo, 42;

[23:56] <p6eval> rakudo 78b53a: OUTPUT«not ok 1 - ␤# got:      5␤# expected: 42␤»

[23:56] <p6eval> ..niecza v24-5-g599cbcb: OUTPUT«not ok 1␤# /tmp/S4DJz19f2m line 1␤# got:      5␤# expected: 42␤»

