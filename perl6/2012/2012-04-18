[00:15] *** lestrrat left
[00:16] *** lestrrat joined
[00:20] *** replore joined
[00:22] <sorear> good * #perl

[00:22] <sorear> 6

[00:23] <TimToady> happy tax day

[00:29] <colomon> o/

[00:32] <sorear> o/

[01:04] *** szbalint joined
[01:16] *** wolfman2000 joined
[01:18] *** zhutingting joined
[01:24] *** vlixes left
[01:28] *** scott___ joined
[01:30] <[Coke]_> jnthn++ moritz++ doing all the hard work on the release announcements. ;)

[01:31] *** [Coke] left
[01:31] *** [Coke]_ is now known as [Coke]

[01:33] *** tadzik joined
[01:36] *** scott___ left
[01:36] *** scott_ joined
[01:37] *** scott_ is now known as Guest32155

[01:39] *** liuchong joined
[01:58] *** Guest32155 left
[01:59] *** scott___ joined
[02:01] *** whiteknight left
[02:03] *** scott___ left
[02:03] <[Coke]> was interested to see http://www.warrenellis.com/?p=13931 re: markdown

[02:06] *** tokuhirom left
[02:06] *** thou left
[02:06] *** scott___ joined
[02:17] *** vlixes joined
[02:21] *** scott___ left
[02:23] *** samlh joined
[02:28] *** scott___ joined
[02:29] <samlh> So, I was wondering whether there is a way for a function to accept a LoL other than a **@foo argument. Actually, I'm not sure how LoL stuff is supposed to work in general.

[02:30] * [Coke] sighs, as he has to revert some of his pugs patches from earlier this week.

[02:31] <[Coke]> seen dalek?

[02:31] <aloha> dalek was last seen in #perl6 12 hours 38 mins ago saying "roast: review: https://github.com/perl6/roast/commit/84b3895ce1".

[02:37] *** scott___ left
[02:37] *** scott_ joined
[02:38] *** scott_ is now known as Guest47433

[02:38] <sorear> Can't call method "quote" on an undefined value at modules/irc/seen.pm line 173.

[02:38] <sorear> p6eval@feather3:~/dalek$ 

[02:38] <sorear> freenode << :sjn!~nn@hagbart.nvg.ntnu.no PRIVMSG #perl6 :!seen pmichaud 

[02:38] <sorear> sjn--

[02:39] *** dalek joined
[02:39] *** ChanServ sets mode: +v dalek

[02:40] *** uvtc joined
[02:42] *** Guest47433 left
[02:50] *** scott___ joined
[02:52] *** cognominal joined
[02:52] *** cognominal_ left
[02:53] <uvtc> [Coke], Markdown is quite nice. Well, it's spoiled *me* anyway. :)

[02:54] *** scott___ left
[02:55] *** rking joined
[02:59] *** orafu left
[02:59] *** orafu joined
[02:59] *** scott___ joined
[03:03] *** scott___ left
[03:10] *** scott___ joined
[03:15] *** scott___ left
[03:20] *** scott___ joined
[03:25] *** scott___ left
[03:26] *** cognominal left
[03:27] *** samlh left
[03:28] *** cognominal joined
[03:29] *** scott___ joined
[03:35] <zhutingting> what [ ] mean in p6 regex? like ( )?

[03:35] <zhutingting> like ( ) but not catch in $\ ？

[03:35] <benabik> I think [] is non-capturing ()

[03:36] <zhutingting> yeah thx~

[03:38] <sorear> [] is the same as (?:) used to be

[03:41] *** replore left
[03:45] *** cognominal left
[03:46] *** cognominal joined
[03:46] *** derrazo left
[03:46] *** samlh joined
[03:46] *** scott___ left
[03:46] *** scott_ joined
[03:47] *** scott_ is now known as Guest24250

[03:51] *** bbkr_ joined
[03:51] *** att_ joined
[03:51] *** att_ left
[03:52] *** att left
[03:52] *** bbkr left
[03:54] <[Coke]> sorear: I don't understand your negative karma there.

[03:56] *** scott___ joined
[03:57] *** Guest24250 left
[03:57] <sorear> sjn crashed dalek

[03:58] <diakopter> o_O

[04:02] *** thou joined
[04:04] *** envi_ left
[04:27] <samlh> I've made some notes from reading list specs and tinkering with Rakudo. I'd appreciate any comments :). https://gist.github.com/2411012

[04:33] <TimToady> reifying immutable lists can also cache reified values, they're just not writeable; in fact, we rely on this for constant lazy lists

[04:34] <TimToady> esp recursively defined ones (though aspects of that remain unimplemented)

[04:37] *** scott___ left
[04:37] *** scott_ joined
[04:37] *** wolfman2000 left
[04:38] *** scott_ is now known as Guest79903

[04:46] <samlh> r: my @a = 1,2,3; @a[3]; say @a.DUMP; say @a.perl

[04:46] <p6eval> rakudo 561682: OUTPUT«Array<712166686>(:items(RPA<705579559>(▶1, ▶2, ▶3)), :nextiter(▶Mu))␤Array.new(1, 2, 3)␤»

[04:46] <samlh> r: say [1,2,3].DUMP; say [1,2,3].perl

[04:46] <p6eval> rakudo 561682: OUTPUT«Array<1143850692>(:items(RPA<1143834356>(▶1, ▶2, ▶3)), :nextiter(▶Mu))␤[1, 2, 3]␤»

[04:47] <samlh> How does it know which is which in .perl?

[04:49] <samlh> Is there a flatten flag?

[04:50] <TimToady> it's probably wrapped in a 'Scalar of' or some such

[04:51] <samlh> TimToady: Ah, thank you.

[04:51] <TimToady> r: my @a = 1,2,3; my $a = @a; say $a.perl

[04:51] <p6eval> rakudo 561682: OUTPUT«[1, 2, 3]␤»

[04:52] *** araujo left
[04:56] <samlh> r: my $a := 1,(2,3); for @$a {.say}; $a.tree.perl.say

[04:56] <p6eval> rakudo 561682: OUTPUT«1␤2␤3␤(1, [2, 3]).list␤»

[04:58] <samlh> TimToady: reifying immutable lists should stay hidden, that is the above should continue to work despite the reification behind the scenes?

[05:03] *** replore_ joined
[05:10] <TimToady> it would seem to be working right there

[05:11] <samlh> TimToady: yes. So, the cache, if any, must remain invisible?

[05:11] *** Timbus joined
[05:12] <TimToady> the cache belongs to the @, not to the $a

[05:12] <TimToady> $a is just an immutable parcel

[05:13] <samlh> r: my @a := 1,(2,3); for @a {.say}; @a.tree.perl.say

[05:13] <p6eval> rakudo 561682: OUTPUT«1␤2␤3␤(1, [2, 3]).list␤»

[05:13] <TimToady> if the parcel caches, it shouldn't assume anything about flattening

[05:13] <samlh> r: my @a = 1,(2,3); for @a {.say}; @a.tree.perl.say

[05:13] <p6eval> rakudo 561682: OUTPUT«1␤2␤3␤(1, 2, 3).list␤»

[05:14] <TimToady> list assignment flattens

[05:14] <samlh> r: constant @a = 1,(2,3); for @a {.say}; @a.tree.perl.say

[05:14] <p6eval> rakudo 561682: OUTPUT«1␤2␤3␤(1, [2, 3]).list␤»

[05:15] <TimToady> pseudo-assignment for initialization tends to be more like binding

[05:15] <TimToady> but arguably that should flatten anyway

[05:16] <samlh> Ah, so that is how you are supposed to be able to get an immutable, but cached, list.

[05:16] <samlh> r: constant @a = 1,(2,3); @a.tree.perl.say

[05:16] <p6eval> rakudo 561682: OUTPUT«(1, [2, 3]).list␤»

[05:16] <samlh> What about this? Should this flatten too?

[05:16] <TimToady> I'm inclined to think so

[05:17] <TimToady> especially since one could use := to mean the other thing

[05:17] <samlh> Ok, makes sense. Thanks!

[05:17] <TimToady> and flattening is more useful for a lot of sequence definitions

[05:18] <samlh> r: constant @a = 1,(2..*); @a.tree.perl.say

[05:18] <p6eval> rakudo 561682: OUTPUT«(timeout)»

[05:18] <samlh> r: my @a := 1,(2..*); @a.tree.perl.say

[05:18] <p6eval> rakudo 561682: OUTPUT«(timeout)»

[05:19] <TimToady> I'm still hopeful to get the hamming sequence to work right:

[05:19] <TimToady> constant @hamming = 1, dedup (@hamming X* 2) M (@hamming X* 3) M (@hamming X* 5);

[05:20] <samlh> Ah well, I think I understand the goal a little better now, I'll try updating my notes now. :)

[05:20] <TimToady> if that doesn't flatten, the dedup will return a single parcel that subverts the process

[05:20] *** spaceships left
[05:21] <TimToady> at the same time, the = must be understood as definition, so that @hamming refers to the same abstraction on both sides

[05:21] <TimToady> no good replacing a pointer like := does

[05:22] <samlh> So constant @a = does list assignment that guarantees laziness, but @a cannot be written to

[05:22] <TimToady> yes, that's my story, and I'm sticking to it

[05:23] <samlh> Gotcha

[05:26] *** scott_ joined
[05:26] *** Guest79903 left
[05:26] *** scott_ is now known as Guest72026

[05:28] *** mikemol joined
[05:31] *** kaleem joined
[05:35] *** raiph left
[05:45] *** mucker joined
[05:46] *** uvtc left
[05:53] *** NamelessTee joined
[05:58] <samlh> r: constant @a = 1,@a; @a.DUMP.say

[05:58] <p6eval> rakudo 561682: OUTPUT«===SORRY!===␤Variable @a is not declared␤at /tmp/tgU3GkFWsR:1␤»

[05:58] <samlh> r: my @a = 1; @a.push(@a); @a.DUMP.say

[05:58] <p6eval> rakudo 561682: OUTPUT«Array<-666740515>(:items(RPA<-662546955>(▶1, ▶1)), :nextiter(▶Mu))␤»

[06:06] *** wtw joined
[06:07] *** vlixes left
[06:08] *** tarch joined
[06:09] *** tarch left
[06:13] *** birdwindupbird joined
[06:15] *** lestrrat left
[06:16] *** lestrrat joined
[06:19] *** cognominal left
[06:21] *** cognominal joined
[06:21] *** replore_ left
[06:30] *** bbkr joined
[06:30] *** bbkr_ left
[06:46] *** kaleem left
[06:48] *** cognominal left
[06:49] *** cognominal joined
[06:50] *** kaleem joined
[06:54] <sjn> oh my, I crashed dalek? 

[06:54] <sjn> sorry about that :-/

[07:04] *** zhutingting left
[07:05] *** brrt joined
[07:16] *** kaleem left
[07:19] *** kaleem joined
[07:26] <dalek> nqp: 1b1106c | moritz++ | tools/build/PARROT_REVISION:

[07:26] <dalek> nqp: bump parrot revision to 4.3.0

[07:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1b1106c242

[07:27] *** NamelessTee left
[07:30] *** fglock_ joined
[07:32] *** kaleem left
[07:35] *** stepnem joined
[07:36] *** araujo joined
[07:36] *** araujo left
[07:36] *** araujo joined
[07:44] *** kaleem joined
[07:49] *** stepnem left
[07:53] *** stepnem joined
[08:02] *** stepnem left
[08:02] <masak> o/, #perl6

[08:04] *** daxim joined
[08:04] *** stepnem joined
[08:04] *** jferrero joined
[08:05] <moritz> \o masak

[08:10] *** stepnem left
[08:13] *** stepnem joined
[08:19] <masak> <jnthn> ooh, my French Perl Workshop talk got accepted. Now I've gotta go!

[08:19] <masak> <eiro> sure: i did it to be sure you'll join us :)

[08:19] * masak .oO( "we didn't care much for the talks themselves..." ) :P

[08:20] <bonsaikitten> masak: conferences are all about beer and food

[08:20] <bonsaikitten> the rest is just bonus features

[08:24] <masak> yes, but eiro is one of the organizers. aren't they expected to keep up appearances? :)

[08:27] <bonsaikitten> ... why? :)

[08:34] <masak> I am unable to think up an answer to that question, even a funny one.

[08:34] <masak> organizers: it's OK! you can drop all pretenses! we're just in it for the beer and food, and you're just in it for the speakers!

[08:36] <bonsaikitten> hey, that's the greatest idea I've heard this week

[08:36] <bonsaikitten> The Ultimate Geek Grill And Beer Festival (without any other distractions)

[08:39] <masak> you sign up as a speaker, but you arrive with a thirst and barbecue cutlery.

[08:40] <daxim> eat the audience!

[08:41] <daxim> bodhidarma advises: when you meet the b33r on the conference, drink it.

[08:42] * masak .oO( there's a whole audience at steak here! )

[08:43] * daxim *groan*

[08:44] *** zhutingting joined
[08:46] <zhutingting> r: sub infix:<mean> ($a, $b) { ($a + $b) / 2 } $a mean $b;

[08:46] <p6eval> rakudo 561682: OUTPUT«===SORRY!===␤Confused␤at /tmp/cwiOlFX3Gy:1␤»

[08:46] <zhutingting> perl6: sub infix:<mean> ($a, $b) { ($a + $b) / 2 } $a mean $b;

[08:46] <p6eval> niecza v16-21-g1b64073: OUTPUT«===SORRY!===␤␤Strange text after block (missing comma, semicolon, comment marker?) at /tmp/mH2H65Qkqv line 1:␤------>  infix:<mean> ($a, $b) { ($a + $b) / 2 }⏏ $a mean $b;␤␤Parse failed␤␤»

[08:46] <p6eval> ..pugs: OUTPUT«*** Undeclared variable: ("$a",MkPad (padToList [("$_",PELexical {pe_type = (mkType "Scalar"), pe_proto = <Scalar:0xf6df7289>, pe_flags = MkEntryFlags {ef_isContext = True}, pe_store = <ref:0xf6df8e1d>}),("@_",PELexical {pe_type = (mkType "Array"), pe_proto = <Array:0xf6df7…

[08:46] <p6eval> ..rakudo 561682: OUTPUT«===SORRY!===␤Confused␤at /tmp/ofPWHl96AX:1␤»

[08:47] <zhutingting> how to code infix?

[08:47] *** dakkar joined
[08:49] <zhutingting> perl6: sub infix:<mean> ($a, $b) { ($a + $b) / 2 } say 2 mean 4;

[08:49] <p6eval> pugs: OUTPUT«3␤»

[08:49] <p6eval> ..niecza v16-21-g1b64073: OUTPUT«===SORRY!===␤␤Strange text after block (missing comma, semicolon, comment marker?) at /tmp/GdHnDfpjv6 line 1:␤------>  infix:<mean> ($a, $b) { ($a + $b) / 2 }⏏ say 2 mean 4;␤␤Parse failed␤␤»

[08:49] <p6eval> ..rakudo 561682: OUTPUT«===SORRY!===␤Confused␤at /tmp/bt_irURYAh:1␤»

[08:51] <sjn> http://code.foo.no/2012/04/18/coding-dojos

[08:53] <jnthn> Hey, this geek beer and grill thing sounds like a good idea...

[08:53] <jnthn> I mean, er, morning #perl6

[08:53] <jnthn> :)

[08:55] <gfldex> geek beer like in http://www.wired.com/wiredscience/2010/08/science-geek-beers/all/1 ?

[08:57] <jnthn> ooh

[08:57] <bonsaikitten> gfldex: that looks like hipster beer

[08:58] <bonsaikitten> ice from the antarctic? 

[08:58] <daxim> I participated in a coding dojo.  that's programming by committee.  it was awful

[08:58] * bonsaikitten likes a boring Rochefort 10 ... :)

[08:58] <jnthn> Tssk, it's 11am and that page has made me want beer :P

[08:59] * jnthn tries to forget about it and get on with $dayjob

[08:59] <gfldex> so you are blaming the internet for wanting beer now?

[08:59] <bonsaikitten> jnthn: and that's a problem why?

[09:00] <gfldex> jnthn: you sound a little like a politican now

[09:01] <jnthn> bonsaikitten: Hmm, good question... :)

[09:02] <jnthn> heh..."Polygamy Porter (Why have just one?)"

[09:02] * jnthn notes all of the ones on that page are from the US, and ponders whether Europe has similarly geeky beers 

[09:03] <bonsaikitten> jnthn: yes

[09:03] <bonsaikitten> there's even Open Source Beer, where you get the full recipe ... 

[09:15] *** noam left
[09:15] *** noam joined
[09:27] <fglock_> good morning #perl6  .oO( I'm up for the grill && beer )

[09:29] <sjn> jnthn: just fyi, I've organized so you and masak and pmichaud can have a meeting room at RL to work in on Friday

[09:29] <sjn> jnthn: it'll be available all day, from 09:00 to 17:00

[09:29] <sjn> jnthn: damian will be giving a class next door too

[09:31] *** d4l3k_ joined
[09:33] *** dalek left
[09:33] *** d4l3k_ is now known as dalek

[09:34] <jnthn> sjn: Oh, wonderful!

[09:34] <jnthn> sjn: Thanks for thinking to do that.

[09:35] *** zhutingting left
[09:39] <masak> sjn++!

[09:40] <tadzik> nice :)

[09:40] <phenny> tadzik: 17 Apr 22:43Z <uvtc> tell tadzik Oh, I had the "name" field in the META.info file wrong --- it's supposed to be a module name, not the project name. Corrected.

[09:40] <masak> tadzik! \o/

[09:48] <tadzik> \o/

[09:48] <tadzik> we're arriving with fsergot on some crazy hour friday morning

[09:53] <tadzik> I'll have to visit my office, then I have to do some geocaching and I can hack from that time on :)

[10:06] *** Guest72026 left
[10:08] * masak decommutes

[10:28] <samlh> gist updated with my understanding of iteration might work :). again, comments welcome https://gist.github.com/2411012

[10:29] *** thou left
[10:29] <samlh> *of how

[10:29] *** xinming_ joined
[10:32] *** xinming left
[10:37] *** NamelessTee joined
[10:47] *** fgomez left
[10:48] *** fgomez joined
[10:48] *** birdwindupbird left
[10:49] *** birdwindupbird joined
[10:49] *** fgomez left
[10:50] *** fgomez joined
[11:11] *** brrt left
[11:22] *** pernatiy joined
[11:23] *** mucker left
[11:26] <masak> samlh: interesting.

[11:31] *** lichtkind joined
[11:32] <lichtkind> moin

[11:32] <lichtkind> moritz: can you tell me please how often the cron runs?

[11:33] <moritz> lichtkind: once per hour

[11:34] <lichtkind> moritz: very good 

[11:35] <lichtkind> moritz: after the next run please to the cleanup all files have their supposed final name just have to adapt some links

[11:35] <lichtkind> but the github but doesnt seemed to work yesterday

[11:36] <moritz> lichtkind: I have trouble deciphering what you write. Could you please be more careful?

[11:36] <moritz> what is the "github but"?

[11:37] <lichtkind> i meant bot sorry

[11:37] <lichtkind> i do a commit in 2 min then we wills ee

[11:37] <lichtkind> see

[11:40] <moritz> 2 minutes passed, no commit reported

[11:40] * masak .oO( The Github Butt is the ugly part of Github, but fortunately it's facing away from you while you're talking to Github )

[11:42] <lichtkind> moritz: it was just 1 min :)

[11:44] <dalek> tablets: ec38a21 | (Herbert Breunung)++ | docs/index.txt:

[11:44] <dalek> tablets: updated toc(is index now) links to other tablets

[11:44] <dalek> tablets: review: https://github.com/perl6/tablets/commit/ec38a21cfe

[11:44] <lichtkind> oh

[11:44] <lichtkind> what was going on yesterday

[11:45] *** lichtkind left
[11:46] <moritz> dalek had an outage

[11:48] <masak> better than a dalek having an outrage.

[11:51] *** brrt joined
[11:53] <dalek> tablets: 11b7eed | (Herbert Breunung)++ | docs/appendix-g-glossary.txt:

[11:53] <dalek> tablets: added dummy for glossary

[11:53] <dalek> tablets: review: https://github.com/perl6/tablets/commit/11b7eed208

[11:53] <dalek> tablets: b599a0b | (Herbert Breunung)++ | docs/styles.css:

[11:53] <dalek> tablets: changed placeholder to a more passive color

[11:53] <dalek> tablets: review: https://github.com/perl6/tablets/commit/b599a0bb1c

[11:53] *** lichtkind joined
[11:58] <dalek> tablets: 7cb006a | (Herbert Breunung)++ | docs/introduction.txt:

[11:58] <dalek> tablets: updated history a bit

[11:58] <dalek> tablets: review: https://github.com/perl6/tablets/commit/7cb006a3d5

[11:58] <lichtkind> masak: se were funny today?

[12:01] *** FACEFOX left
[12:03] *** facefox3 joined
[12:04] <masak> yeah. sorry to butt in like that.

[12:05] <lichtkind> i have not the impression you sorry is serious

[12:06] <masak> if you are truly miffed and require an apology, you have it. sorry.

[12:06] <lichtkind> just trying be funny myself

[12:07] <masak> phew :)

[12:08] <masak> when I get challenged like that, I try to be safe and apologise, so as not to make things worse. online communication is narrow-banded and brittle.

[12:08] *** bluescreen10 joined
[12:09] *** ponbiki joined
[12:11] <masak> also, we all have bad days when we prefer not to be the butt of someone else's wordplay :)

[12:12] <frettled> :)

[12:15] <lichtkind> tables are so much easier in markdown

[12:15] <lichtkind> its almost worth the effort

[12:16] <tadzik> are they?

[12:16] <tadzik> they're awesome in Pod :)

[12:16] <moritz> tadzik: I think lichtkind means "in comparison to the socialtext abomination"

[12:17] <tadzik> oh, maybe :)

[12:17] *** mucker joined
[12:17] <dalek> tablets: 0866ddf | (Herbert Breunung)++ | docs/ (12 files):

[12:17] <dalek> tablets: simplify and update most headings

[12:17] <dalek> tablets: review: https://github.com/perl6/tablets/commit/0866ddf5b8

[12:17] *** pernatiy left
[12:17] <lichtkind> yes it was cruel

[12:20] *** pernatiy joined
[12:20] *** jaldhar left
[12:21] *** att joined
[12:22] <dalek> tablets: f9966af | (Herbert Breunung)++ | docs/index.txt:

[12:22] <dalek> tablets: refining TOC

[12:22] <dalek> tablets: review: https://github.com/perl6/tablets/commit/f9966afe4a

[12:26] *** liuchong left
[12:27] <dalek> tablets: a414666 | (Herbert Breunung)++ | docs/index.txt:

[12:27] <dalek> tablets: explaining appendix B better

[12:27] <dalek> tablets: review: https://github.com/perl6/tablets/commit/a414666357

[12:28] <lichtkind> allright slowly we getting somewhere sane

[12:28] <lichtkind> later :)

[12:28] <masak> o/

[12:29] *** facefox joined
[12:31] *** facefox3 left
[12:32] *** brrt left
[12:38] *** tokuhirom joined
[12:39] <dalek> tablets: 9e8d9e1 | (Herbert Breunung)++ | docs/ (2 files):

[12:39] <dalek> tablets: fixing broken markdown and placeholder are visible again

[12:39] <dalek> tablets: review: https://github.com/perl6/tablets/commit/9e8d9e15b2

[12:45] *** lichtkind left
[12:46] <Woodi> allo

[12:47] <Woodi> sjn: ping, you have new mail...

[12:50] <[Coke]> sorear: sjn++ dalek--

[12:50] <moritz> indeed

[12:51] <jnthn> Yeah. :!seen foo should not cause a crash.

[12:52] <moritz> after all it's just a negated :seen :-)

[12:53] *** kaleem left
[12:53] *** kaleem joined
[12:54] *** lestrrat left
[12:55] *** lestrrat joined
[12:56] <masak> :)

[12:56] <masak> std: :!seen<pmichaud>

[12:56] <p6eval> std 3d13d53: OUTPUT«===SORRY!===␤Extra argument not allowed; pair already has False argument at /tmp/CyIrWkjSc0 line 1:␤------> :!seen⏏<pmichaud>␤Parse failed␤FAILED 00:00 40m␤»

[12:56] <masak> dang :)

[12:56] *** kaleem left
[12:56] <masak> good error message, though.

[12:56] <moritz> r: :!seen<pmichaud>

[12:56] <p6eval> rakudo 561682: OUTPUT«===SORRY!===␤Argument not allowed on negated pair␤at /tmp/hM_B9k9mzb:1␤»

[12:57] <moritz> r: try eval ':!seen<pmichaud>'; say $!.perl

[12:57] <p6eval> rakudo 561682: OUTPUT«X::Syntax::NegatedPair.new(filename => "eval_0", line => 1, column => Any)␤»

[12:57] * moritz can't resist showing off a bit

[12:57] *** answer_42 joined
[12:58] <tadzik> cool

[12:59] *** brrt joined
[12:59] *** PacoAir joined
[13:00] <masak> moritz++

[13:00] *** pmurias joined
[13:00] <pmurias> fglock: hi

[13:01] <pmurias> $ node perlito5.js  -e 1

[13:01] <pmurias> Warning: Died: Can't find Perlito5/strict.pm in @INC

[13:03] <sjn> Woodi: ook!

[13:03] <fglock_> pmurias: hi!

[13:04] <fglock_> strict.pm is now a "real" module, you need to specify the path to the libs (see README-perlito5)

[13:04] *** ponbiki left
[13:04] *** benabik left
[13:05] <pmurias> fglock_: thanks, that fixes the problem

[13:05] <fglock_> node perlito5.js -I./src5/lib -e 1

[13:05] <pmurias> fglock_: but why is strict used here? ;)

[13:06] <fglock_> this will compile "package main; no strict; 1"

[13:09] *** brrt left
[13:10] *** fglock_ left
[13:17] *** awwaiid joined
[13:20] *** cognominal_ joined
[13:22] *** mucker left
[13:24] *** cognominal left
[13:25] *** fhelmberger joined
[13:29] *** cognominal joined
[13:29] *** cognominal_ left
[13:30] *** att left
[13:35] *** preflex_ joined
[13:36] *** preflex_ is now known as preflex

[13:41] *** kaleem joined
[13:41] *** fglock_ joined
[13:42] *** att joined
[13:46] <pmurias> fglock_: perl -Ilib5 perlito5.pl -Cjs src5/util/perlito5.pl > perlito5.js

[13:46] <pmurias> Syntax Error in sub 'precedence_parse' at lib5/Perlito5/Grammar.pm line 1302.

[13:46] *** envi_ joined
[13:47] <fglock_> looking (you need -I src5/lib before -Cjs)

[13:48] <fglock_> adding -Isrc5/lib silences the error (still looking)

[13:50] *** NamelessTee left
[13:51] *** answer_42 left
[13:51] <fglock_> it may be an error while trying to 'use' a lib, it is failing to find an alternate interpretation and gives a "syntax error" :P

[13:53] <fglock_> hmm, no - 'use' errors seem to work

[13:56] <pmurias> fglock_: what are the $negate and $depends arguments to proclaim?

[13:59] <fglock_> I don't know; this file is a direct translation of http://svn.openfoundry.org/pugs/ext/Test/lib/Test.pm

[14:00] <pmurias> I'm considering just copying over the p5 test.pl and adapting it for the missing features

[14:01] <fglock_> yes, that would be better

[14:01] <fglock_> it can than be fixed in small steps

[14:02] <fglock_> I'm getting 426 pass with the tweaked test.pl

[14:04] *** spider-mario joined
[14:05] <pmurias> fglock_: are you working on copying over the orginal test.pl or should i do that?

[14:05] <fglock_> please do

[14:06] <fglock_> pmurias++

[14:07] <pmurias> ok

[14:08] <pmurias> fglock_: none of the tests we ran currently use test.pl?

[14:09] <fglock_> you mean in t5, no - I'm running the perl test suite in t

[14:09] <fglock_> and moving to t5 whatever works

[14:11] *** kaleem left
[14:12] <fglock_> (t5 does use Test.pm though)

[14:27] *** PacoAir left
[14:28] *** fgomez left
[14:31] *** colomon joined
[14:31] *** fgomez joined
[14:38] *** fgomez left
[14:47] *** lichtkind joined
[14:48] *** benabik joined
[14:50] *** fsergot joined
[14:50] <fsergot> Hi o/

[14:52] *** wooden joined
[14:52] <colomon> \o

[14:53] <[Coke]> phenny: tell au if you do add something for bless or anythign else, be sure to do a spectest first; I found some (to me) surprising) breakage, especially missing multi variants.

[14:53] <phenny> [Coke]: I'll pass that on when au is around.

[14:54] *** lichtkind left
[14:59] *** kaleem joined
[15:05] *** kaleem left
[15:06] *** kaare_ joined
[15:09] *** birdwindupbird left
[15:10] *** wtw left
[15:10] *** trexy joined
[15:11] *** NamelessTee joined
[15:12] <pmurias> fglock_: node perlito5.js -I./src5/lib  -e 1

[15:12] <pmurias> started throwing the can't find strict error again :/

[15:14] <fglock_> pmurias: maybe you are under t/ (check just in case)

[15:15] <fglock_> it happened to me

[15:17] *** lichtkind joined
[15:17] <pmurias> git stashing everything helped

[15:18] <sjohnson> git stash save 'my project' # i use all the time!

[15:18] <lichtkind> moritz: would you please do now a reset?

[15:19] <moritz> lichtkind: it's done on every cron job executiong

[15:19] <dalek> tablets: b07546b | (Herbert Breunung)++ | docs/ (3 files):

[15:19] <dalek> tablets: massive link repair

[15:19] <dalek> tablets: review: https://github.com/perl6/tablets/commit/b07546b828

[15:20] <lichtkind> moritz: you mean deleting all the old stuff?

[15:20] <moritz> yes

[15:50] *** ilogger2 joined
[15:50] *** ChanServ sets mode: +v ilogger2

[15:50] <lichtkind> moritz there was just an refresh and old html is still there

[15:51] <jnthn> .oO( I'm anschnur what he meant... )

[15:52] <moritz> lichtkind: now gone

[15:53] <lichtkind> thank you

[15:53] <lichtkind> jnthn: ++++ that was great

[15:54] *** Psyche^ joined
[15:54] *** Psyche^ is now known as Patterner

[16:01] *** kaleem joined
[16:08] *** uvtc joined
[16:10] <uvtc> tadzik, ping

[16:10] <tadzik> uvtc: pong

[16:10] *** xinming joined
[16:10] <uvtc> tadzik, Hi, I sent you a pile of emails last night.

[16:13] <uvtc> Do you think that little guide for creating and distributing modules is still sensible after the minor additions I mentioned?

[16:13] <moritz> uvtc: do you have commit access to modules.perl6.org?

[16:13] <uvtc> hi moritz. Y'know, I used to. But no longer.

[16:13] <moritz> uvtc: what's your github ID?

[16:13] <uvtc> uvtc

[16:13] <uvtc> But moritz,

[16:13] <uvtc> Just wanted to briefly discuss something.

[16:13] <uvtc> The topic of the Socialtext Perl 6 wiki has come up here before.

[16:13] <moritz> nothing wrong with discussions, but now you have commit access too :-)

[16:13] <uvtc> Oh, great. Thanks.

[16:14] <uvtc> I've used the SocialText wiki a couple of times, but did not ever get back to it

[16:14] <tadzik> uvtc: yeah, I saw them :) I'm just little fscked over with univesity stuff right now, expect my feedback tomorrow afternoon in the worst case

[16:14] <uvtc> .

[16:14] <uvtc> tadzik, Great, thanks.

[16:14] * moritz hates that wiki

[16:14] <lichtkind> haha

[16:15] * uvtc is not crazy about it either.

[16:15] <lichtkind> uvtc: klöng

[16:15] <uvtc> Anyhow, I tried out gitit last night, and was pretty blown away.

[16:15] <lichtkind> uvtc: by what?

[16:15] <lichtkind> uvtc: http://tablets.perl6.org/index.html have a look

[16:16] <lichtkind> it gets slowly in shape

[16:16] <lichtkind> ther was still so much broken

[16:16] <lichtkind> but i currently but ass of to fix it

[16:16] <uvtc> lichtkind, (I see. Yes, it's looking good. Just a sec though, I want to finish this thouht.)

[16:17] <moritz> uvtc: I wouldn't mind a migration, under the conditions that 1) I don't have to do it (I'm fine with installing software though), 2) we don't end up with two versions of the same stuff (ie the old wiki must go away) and 3) the URLs continue to work in some way (preferably redirects)

[16:17] <uvtc> So, I just wanted to chime in (an initial chime I suppose), that gitit was pretty amazing. I started making a list of what I liked about it, but the list became probably too long to post here.

[16:18] <moritz> under those conditions I would be very much in favor of such a migration, actually :-)

[16:19] <moritz> uvtc: how does gitit handle access control?

[16:19] <uvtc> moritz, I'm not necessarily suggesting a migration... I don't have an easy way to convert content from one wiki to the other. I converted lichtkind's tablets primarily by-hand, but that was over the weekend, and I don't think I'll have that many tuits available for a while.

[16:19] <moritz> ok

[16:21] <uvtc> moritz, access control is simple --- I like it. For the account creation page, you can set a security question (and answer). If you set the answer to be something unguessable, then all you have to do is have interested parties email you for the unguessable answer. And you can of course change the unguessable answer at any time. :)

[16:22] <moritz> that sounds like it's fine, as long as you don't need to scale

[16:23] <uvtc> I've tried using various wiki's in the past. Gitit is the one. It's easy to run, easy to configure, stores each page as a file on disk ... (gah, I need to write a blog post about it).

[16:23] *** thelazydeveloper joined
[16:24] <uvtc> That's an interesting supposition. I'm curious how many folks end up contributing to wiki's. My hunch is that, at first, you'd get a flurry of a 10 or 20 people asking to register, but,

[16:25] <moritz> my experience is that there are (nearly) no useful edits from outsiders

[16:25] <uvtc> not sure, but I get the impression that, you end up over time with a core group who contributes to the wiki, and a slow trickle of membership requests after that.

[16:26] <uvtc> moritz, That's what I'm getting it. That's why I think gitit's approach will work.

[16:28] <moritz> uvtc: I don't think it's a problem of the underlying software or of the UI

[16:28] <uvtc> Anyway, the setup looks easy. You just run gitit, and it has its own webserver (based on Haskell's happstack). It comes with instructions on what to add to your apache config to get mod_proxy to pass requests to it.

[16:28] <moritz> uvtc: it's simply that outsiders usually don't have anything interesting to share, or don't care. If they care, they quickly cease to be outsiders

[16:28] <samlh> lichtkind: I have some updates to the tablets

[16:29] <samlh> lichtkind: would you prefer a patch, a pull request, or something else?

[16:29] <moritz> samlh: what's your github ID?

[16:29] <uvtc> moritz, I think that's a good point about outsider ceasing to be outsiders.

[16:29] <samlh> samlh

[16:30] <moritz> samlh: you now have commit access, fwiw

[16:30] *** mikemol joined
[16:30] <samlh> moritz: ok, thanks!

[16:30] <uvtc> Well, the long and the short of it about the wiki issue, I think, is this:

[16:30] <moritz> to most of the repos in the perl6 organization, because we're too lazy for finer-graded access control :-)

[16:32] <uvtc> * few here like or will use the socialtext wiki, * most here like Markdown pretty well, * gitit is only an apt-get away, and perhaps a few minutes of configuring to make look like a Perl 6 wiki (just replace the logo, change the wiki title in the config, and it's ready to roll),

[16:32] <uvtc> It supports "subpages" nicely by just creating a directory behind the scenes and putting the page file in that directory.

[16:32] <uvtc> Allows file uploads, supports math rendering

[16:33] <uvtc> (moritz, math rendering worked out of the box for me)

[16:33] <uvtc> (moritz, that is, you can write $x^2 + y^2$ and it works)

[16:33] *** kaleem left
[16:34] <uvtc> Syntax highlighting for Perl 5 works, but not Perl 6 --- it uses Kate's (the editor) filetype definitions for syntax highlighting. I don't think Perl 6 syntax highlighting would be too far off if someone were to have a look at it.

[16:35] <uvtc> Anyway, sorry, I'll stop gushing. I'm just pretty enamored with it, given the other wiki's I've tried.

[16:35] * moritz chuckles briefly (re p6 syntax hilighting)

[16:35] <moritz> yes, sounds like somebody has found True Love

[16:36] * uvtc is singing it from the rooftops

[16:37] *** Vlavv` joined
[16:37] <uvtc> Getting around to a point though, regarding that "create & distribute modules" doc I wrote, if you set up the wiki, I could just add it there.

[16:38] <moritz> or you could simply add the .html file to the modules.perl6.org repo

[16:38] <moritz> then it would be on the same domain

[16:38] <uvtc> Regarding the domain, gitit comes with instructions on how to make wiki.perl6.org proxy to gitit...

[16:39] <uvtc> Is this all on feather? Does feather run apache?

[16:39] *** fglock joined
[16:39] <moritz> thing is, I'm kinda reluctant to fragment the p6 doc space even more. If there are plans to move other stuff to the new wiki, that's fine. If there's a plan for one page, that's not too convincing

[16:39] <moritz> I should have said "on the same subdomain"

[16:39] <moritz> it's on feather2. And yes, apache2

[16:41] <moritz> though there's nothing to stop us from mod_proxy'ing to an installation on feather1

[16:41] <uvtc> I can understand your reluctance. My hunch is that the opposite of fragmentation will happen. I think people will *like* using gitit a lot, and if there's a choice between, "oh, should I host this myself, or just put it on the Perl 6 gitit wiki", they'll go with the wiki. I know I would.

[16:42] <uvtc> Sorry, I'm unfamiliar with the infrastructure. I don't know how many Perl 6 servers there are, or what runs on which.

[16:42] <moritz> brief summary, because it might interest others too: Juerd++ has donated a box (feather0), on which three VMs (feather1,2,3) run

[16:43] <moritz> what we usually call "feather" around here is feather1. Any p6 hacker can get a shell account on it

[16:43] <moritz> and it runs perlcabal.org and a few other websites

[16:44] <moritz> feather2 is intended to be more secure, hosts *.perl6.org and hugme (because hugme has access tokens to several github accounts)

[16:44] <moritz> feather3 runs p6eval and try.rakudo.org (when it happens not to be down)

[16:45] <moritz> perl.org and perlfoundation.org are run on totally different machines by totally different people

[16:45] <uvtc> (this is exactly something I'd take 2 minutes to put up somewhere on the gitit wiki. Also, I have no interest in editing the Socialtext wiki.)

[16:46] <uvtc> moritz, thanks for that info!

[16:48] <benabik> moritz++ # feather infodump

[16:55] *** vlixes joined
[16:55] <uvtc> moritz, here's some notes I was keeping, in case I were to write a blog post about gitit. They're just some sloppy notes: http://www.unexpected-vortices.com/doc-notes/benefits-of-gitit.html

[16:55] *** birdwindupbird joined
[16:55] *** PacoAir joined
[16:55] *** kaleem joined
[17:19] *** ilogger2 joined
[17:19] *** ChanServ sets mode: +v ilogger2

[17:21] *** Chillance joined
[17:23] <arnsholt> o/

[17:26] <uvtc> moritz, sorry, missed some of your comments before. You wrote "I just realized that this is a bad idea ...". I think it would be very rare for users to want direct access to files on the filesyst (ssh in, edit, use git directly).

[17:27] <uvtc> s/filesyst/filesystem/

[17:27] <uvtc> moritz, It's the sort of thing that's there if you need it, but you generally won't ever need it for typical wiki editing.

[17:29] *** thou_ joined
[17:43] *** mucker joined
[17:43] *** Moukeddar joined
[17:47] *** bbkr1 joined
[17:49] *** fsergot joined
[17:49] <fsergot> o/

[17:52] *** thou_ left
[17:55] *** thou joined
[18:00] <moritz> uvtc: http://wiki.perl6.org/

[18:03] <uvtc> Oh yeah. :D

[18:03] <uvtc> moritz, a couple of config items:

[18:04] <uvtc> run `gitit --print-default-config > p6-wiki.conf`

[18:04] <benabik> Looks like gitit is blatantly stealing^W^Wborrowing wikipedia's look.

[18:04] <eiro> gitit \o/

[18:04] <fsergot> \o/

[18:05] <eiro> hello everybody 

[18:05] <uvtc> moritz, then edit a couple of items: 1, change wiki-title to "Perl 6 Wiki" or somesuch

[18:08] <uvtc> 2. change access-question to something like, "Answer to this security question?", and add a crazy string to access-question-answers.

[18:08] <uvtc> Then quit gitit and restart it as `gitit -f p6-wiki.conf`

[18:14] *** spider-mario joined
[18:14] <moritz> for now I haven't used a terribly crazy question or answer

[18:14] *** jaffa4 joined
[18:17] *** spaceships joined
[18:18] <uvtc> moritz, Next: grab this file http://www.unexpected-vortices.com/temp/logo.png and copy it to static/img

[18:18] <uvtc> I resized it. Should work nicely.

[18:19] <moritz> done

[18:20] <jaffa4> Hi

[18:20] <uvtc> Nice!

[18:21] <samlh> moritz: s/use use/you use/ ?

[18:21] <uvtc> moritz, I think that, if you don't add an unguessable answer, then it's just going to generate work for you later. My 2 cents.

[18:21] <uvtc> Account created!

[18:22] <benabik> Unguessable isn't required.  Not parsable by spambots is.

[18:22] <benabik> (IMHO)

[18:23] <benabik> Actual people generally don't spend much time adding spam.  It generally only gets bad when a script can do it.

[18:23] <moritz> any idea for a question and answer that's guessable only if you know Perl 6, but still has a pretty unique answer?

[18:23] * [Coke] FIRST!

[18:24] <uvtc> Oh, you beat me to it!

[18:25] <jaffa4> moritz: who are you asking?

[18:26] <moritz> jaffa4: everybody

[18:26] <jaffa4> Why are you asking?

[18:27] <benabik> TIMTOWTDI makes "unique" a difficult part of that question.  :-D

[18:27] <[Coke]> jaffa4: check the backscroll.

[18:27] <moritz> because I need such a question for protecting a wiki from spam

[18:27] <moritz> benabik: that's why i haven't found anything yet

[18:28] <moritz> maybe "which operator would you use to calculate the product of all items of a list?"

[18:28] <jaffa4> What is the name of most popular perl compiler?

[18:28] <benabik> It could be a small piece of code with the output as answer.  If the spambots are written in P6 then we're winning anyway.  :-D

[18:28] <benabik> jaffa4: perl

[18:28] <jaffa4> What is the name of most popular perl 6 compiler?

[18:28] <jnthn> "When will Perl 6 be done?" "Christmas" :)

[18:29] <[Coke]> jnthn++

[18:29] <jaffa4> You could say, it is already one, we are just extending it

[18:29] *** facefox3 joined
[18:29] *** facefox3 left
[18:29] <jaffa4> one-> done

[18:31] *** facefox3 joined
[18:32] <tadzik> o/

[18:32] <uvtc> moritz, I don't know much Perl 6 yet, but perhaps a "fill-in-the-blank", such as, "I never ___ I didn't like".

[18:34] <[Coke]> metapunned?

[18:34] <tadzik> :P

[18:34] * moritz has something now

[18:35] <uvtc> (metaop)

[18:36] *** Moukeddar left
[18:39] <masak> #perl6! \o/

[18:40] *** havenn_ joined
[18:41] <moritz> \o masak 

[18:41] *** birdwindupbird joined
[18:42] <tadzik> \o/

[18:42] <masak> jaffa4: the name of the most popular Perl 6 compiler is "Rakudo". but having said that, I think Niecza deserves more popularity than it currently has, and I have thought so for almost a year now.

[18:44] *** icwiener joined
[18:46] <uvtc> Hi tadzik. I added the create and distribute modules page to [the new wiki](http://wiki.perl6.org).

[18:46] <tadzik> oh, we have a new wiki?

[18:46] <uvtc> :)

[18:46] <tadzik> so cool

[18:46] <uvtc> Ice cold.

[18:47] <tadzik> are you going to Oslo, by any chance?

[18:47] <uvtc> me?

[18:47] <tadzik> aye

[18:48] <uvtc> Added http://wiki.perl6.org/Server%20Infrastructure

[18:48] *** thou left
[18:48] *** goksie joined
[18:48] <uvtc> Alas, no. I'm not employed at the moment, and so am not in a position to travel. Would love love to take my family there sometime though. Sounds lovely.

[18:49] <tadzik> I hope you'll be joining us online at least :)

[18:49] *** thou joined
[18:50] <uvtc> tadzik, aw, thanks. :) Though, I don't yet know enough Perl 6 to be of much help at a hackathon.

[18:50] <tadzik> that

[18:50] <tadzik> 'd be a good occasion :)

[18:50] <tadzik> anyway, if you are eager to hack on modules stuff, we need every pair of hands :)

[18:50] <masak> Perl 6 knowledge not a strict requirement! :D

[18:50] <tadzik> I'd really like to bring emmentaller back to life

[18:51] <tadzik> we _do_ need it, especially those days

[18:51] <tadzik> and it was mostly perl 5 (back in the days when it worked)

[18:52] <jaffa4> How to iterate through a perl6 hash?

[18:52] <dalek> tablets: b0b04c8 | (Herbert Breunung)++ | docs/appendix-b-grouped.txt:

[18:52] <dalek> tablets: repair mardown tables

[18:52] <dalek> tablets: review: https://github.com/perl6/tablets/commit/b0b04c8b7c

[18:53] <lichtkind> jaffa4: you meant through all pairs or keys?

[18:53] <jaffa4> all pars.

[18:53] <lichtkind> for (@(%h)) { }

[18:54] <lichtkind> for pairs %h {}

[18:54] <lichtkind> i think thats the best

[18:54] <lichtkind> and if you want a named var insted of $_

[18:54] <lichtkind> for pairs %h -> $p  {}

[18:54] <benabik> r: .say for pairs { a => 1, b => 2 }

[18:54] <p6eval> rakudo 561682: OUTPUT«"a" => 1␤"b" => 2␤»

[18:54] <spider-mario> what about kv ?

[18:55] <spider-mario> r: .say for kv {a => 1, b => 2}

[18:55] <p6eval> rakudo 561682: OUTPUT«a␤1␤b␤2␤»

[18:55] <spider-mario> yeah, right

[18:55] <spider-mario> r: .say @_ for kv {a => 1, b => 2}

[18:55] <p6eval> rakudo 561682: OUTPUT«===SORRY!===␤Confused␤at /tmp/rA1WBC_fKj:1␤»

[18:55] <spider-mario> oops

[18:55] <lichtkind> it gives you a key value list

[18:55] <spider-mario> r: say @_ for kv {a => 1, b => 2}

[18:55] <p6eval> rakudo 561682: OUTPUT«===SORRY!===␤Cannot use placeholder parameter @_ in the mainline␤at /tmp/HaWjKdRjht:1␤»

[18:55] <spider-mario> r: say list $_ for kv {a => 1, b => 2}

[18:55] <p6eval> rakudo 561682: OUTPUT«a␤1␤b␤2␤»

[18:55] <jaffa4> r: for %*ENV.kv -> $a,$b { say $a,$b}

[18:56] <p6eval> rakudo 561682: OUTPUT«PERLBREW_VERSION0.42␤MAIL/var/mail/p6eval␤USERp6eval␤SHLVL1␤HOME/home/p6eval␤OLDPWD/home/p6eval␤PERLBREW_ROOT/home/p6eval/perl5/perlbrew␤PERLBREW_MANPATH/home/p6eval/perl5/perlbrew/perls/perl-5.14.1/man␤LOGNAMEp6eval␤_./run.sh␤TERMscreen␤PATH/home/p6eval/perl5/perl…

[18:56] <jnthn> A nice way is

[18:56] <jnthn> yeah, that one :)

[18:56] <spider-mario> that’s what I was about to write

[18:56] <TimToady> r: -> $k, $v { say "$k $v" } for %*ENV.kv

[18:56] <p6eval> rakudo 561682: OUTPUT«PERLBREW_VERSION 0.42␤MAIL /var/mail/p6eval␤USER p6eval␤SHLVL 1␤HOME /home/p6eval␤OLDPWD /home/p6eval␤PERLBREW_ROOT /home/p6eval/perl5/perlbrew␤PERLBREW_MANPATH /home/p6eval/perl5/perlbrew/perls/perl-5.14.1/man␤LOGNAME p6eval␤_ ./run.sh␤TERM screen␤PATH /home/p6eva…

[18:57] <jaffa4> Rotated version?

[18:57] <TimToady> r: { say "$^k $^v" } for %*ENV.kv

[18:57] <p6eval> rakudo 561682: OUTPUT«PERLBREW_VERSION 0.42␤MAIL /var/mail/p6eval␤USER p6eval␤SHLVL 1␤HOME /home/p6eval␤OLDPWD /home/p6eval␤PERLBREW_ROOT /home/p6eval/perl5/perlbrew␤PERLBREW_MANPATH /home/p6eval/perl5/perlbrew/perls/perl-5.14.1/man␤LOGNAME p6eval␤_ ./run.sh␤TERM screen␤PATH /home/p6eva…

[18:59] <dalek> modules.perl6.org: 920735f | tadzik++ | web/index.tmpl:

[18:59] <dalek> modules.perl6.org: Link to a more appropriate module writing guide

[18:59] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/920735f6af

[18:59] <tadzik> uvtc++

[19:00] <uvtc> And Bingo was his name-o.

[19:00] <uvtc> tadzik, thanks.

[19:00] <uvtc> p6eval, nice to see you back.

[19:01] <uvtc> moritz++ for making the wiki happen!

[19:03] *** Alano joined
[19:03] *** Alano left
[19:07] *** kaare__ joined
[19:08] <jaffa4> How to define an infix operator within a grammar if I could not find a decent example....

[19:10] <moritz> token myinfix { '+' | '-' }; token term { <termish> [ <infix> <termish> ]* }

[19:10] <moritz> s:2nd/infix/myinfix/

[19:11] <jaffa4> I thought there is a build in operator parser...

[19:11] <jaffa4> and one can specify precedence levels..

[19:14] *** mdupont joined
[19:15] <masak> yeah, that bothers me too.

[19:15] <masak> there's too little reach into the built-in optable parser.

[19:15] <jaffa4> Not implemented, or not in the spec?

[19:15] <masak> a little as if it were only to be used by Perl 6 itself.

[19:18] *** mucker left
[19:19] *** s1n joined
[19:28] <dalek> tablets: 9a22b66 | (Herbert Breunung)++ | docs/appendix- (2 files):

[19:28] <dalek> tablets: fixed all special var

[19:28] <dalek> tablets: review: https://github.com/perl6/tablets/commit/9a22b66c38

[19:32] *** noam_ joined
[19:34] *** kaare_ joined
[19:34] *** kaare__ left
[19:42] <masak> jaffa4: it's not in the spec.

[19:43] *** havenn_ left
[19:43] <masak> jaffa4: the only way to create operators is to put them into the language grammar currently being parsed. I know of no mechanism to put them into a user-defined grammar for later use.

[19:43] <masak> jaffa4: clearly there should *be* a way, but... there isn't.

[19:53] *** raiph joined
[19:56] *** havenn joined
[19:59] <TimToady> the P6 dependencies in STD's EXPR method are commented with "# XXX P6", if anyone cares to try figuring out how to make a generic version

[19:59] *** pmurias joined
[20:02] *** havenn left
[20:03] *** noam_ left
[20:04] *** s1n left
[20:04] *** noam_ joined
[20:06] <masak> sounds like a nice project for a rainy day.

[20:07] <sjohnson> masak.project

[20:08] <pmurias> fglock_: what do you intent to use Perlito5 for? or is mainly -Ofun?

[20:08] <moritz> masak.schedule: Project.new('generalize STDs precedence parser')

[20:08] <icwiener> szabgab: Did you see that your media links are broken? http://szabgab.com/download/media/perl6_01.avi

[20:09] <moritz> .oO( 'schedule' -- word that can be both verb and noun. Not good. )

[20:09] <szabgab> icwiener: I thought I removed those links  :(

[20:09] <icwiener> szabgab: http://szabgab.com/perl6.html#screencast

[20:09] <icwiener> There they are.

[20:10] <szabgab> icwiener: thanks for telling me, I'll remove the links for now

[20:10] <szabgab> till I find the files :)

[20:10] <icwiener> You lost the files? :D

[20:12] *** cognominal_ joined
[20:12] *** brrt joined
[20:13] *** fsergot left
[20:13] <szabgab> icwiener: probably not, I jus t moved server and have not copid the files so I think they are somewhere on my desktop computer :)

[20:13] *** fsergot joined
[20:14] <arnsholt> star: use NativeCall; my $arr = CArray[int].new(); $arr[0] = 1; say $arr[0];

[20:14] <p6eval> star 2012.02: OUTPUT«(signal SEGV)»

[20:14] *** noam_ left
[20:14] *** noam_ joined
[20:14] <jnthn> arnsholt: Wow...

[20:15] <jnthn> arnsholt: I thougth CArray had passing tests...

[20:15] <arnsholt> Yeah. Didn't really expect that

[20:16] <arnsholt> There are some tests, but none with int, now that I look

[20:16] <arnsholt> star: use NativeCall; my $arr = CArray[num].new(); $arr[0] = 1.2; say $arr[0];

[20:16] <p6eval> star 2012.02: OUTPUT«Cannot unbox argument to '$v' as a native num␤  in method <anon> at /home/p6eval/star/lib/parrot/4.1.0/languages/perl6/lib/NativeCall.pm6:159␤  in <anon> at src/gen/Metamodel.pm:2891␤  in block <anon> at /tmp/1V9eTk6lWB:1␤␤»

[20:16] <arnsholt> Oh, right

[20:17] <arnsholt> star: use NativeCall; my $arr = CArray[num].new(); $arr[0] = 1.2e0; say $arr[0];

[20:17] <p6eval> star 2012.02: OUTPUT«(signal SEGV)»

[20:17] <arnsholt> None of the tests try just creating an array and reading back from it, so that might be it

[20:17] <icwiener> szabgab: Ah, ok. :)

[20:17] *** s1n joined
[20:18] <jnthn> arnsholt: Hm, they only pass it?

[20:18] <jnthn> Aren't there tests for returning an array too? :)

[20:18] <jnthn> Very curious, anyway

[20:18] <jnthn> Do you know why it SEGVs?

[20:18] <arnsholt> Null pointer

[20:19] <arnsholt> This is a smaller version of the problem in my CStruct test, I'm reasonably sure

[20:19] <arnsholt> But yeah, there are tests for returning an array, and for passing an array

[20:20] *** bruges joined
[20:20] <arnsholt> But no test simply creating and then reading from the array

[20:20] <jnthn> heh, but not reading on you made yourself...

[20:20] <jnthn> *one

[20:21] * jnthn blames the guy who wrote the tests.

[20:21] <arnsholt> ^_^

[20:22] <arnsholt> But I'm not entirely sure what could be going on. I suppose it could be some kind of spooky action-at-a-distance making the get return garbage, but not sure why the NULL pointer shows up in P6int, not CArray

[20:28] <arnsholt> Hmm. One possible explanation: bug is related to CArray reading from an array CArray created

[20:29] <jnthn> I suspect it is that

[20:29] <arnsholt> Return array test passes, so reading of at least some arrays does indeed work

[20:29] *** birdwindupbird left
[20:29] <jnthn> There's the two modes, one where the array is managing its own memory and another where it isn't.

[20:29] <arnsholt> Similarly, passing array test passes, so layout appears to be correct as well

[20:29] <jnthn> I'm wondering if it's a confusion between the two.

[20:31] <arnsholt> I have a CArray[int], and stepping in the getter

[20:31] <arnsholt> elem_size is 8

[20:31] <jnthn> That's fine on 64 bit

[20:31] <arnsholt> Right. Not that then

[20:31] <arnsholt> Kind is 1

[20:31] <jnthn> But it's what the computed offset gets added to taht must be null

[20:34] <jnthn> oh, wait, is it in at_pos_boxed when it explodes, or at_pos_ref?

[20:34] <arnsholt> The explosion is in P6int.c

[20:34] <jnthn> yeah, I see it now

[20:35] <jnthn> Or, partially

[20:35] <arnsholt> The get is at_pos_ref

[20:35] <jnthn> oh

[20:35] <jnthn> That's the correct one then

[20:35] <jnthn> So is body->storage NULL?

[20:36] <arnsholt> Nope

[20:37] <jnthn> star: use NativeCall; my $arr = CArray[int].new(); $arr[0] = 1; $arr[1] = 2; say $arr[0];

[20:37] <p6eval> star 2012.02: OUTPUT«1␤»

[20:37] <jnthn> OK, two problems

[20:37] <jnthn>     if (body->allocated && index >= body->elems)

[20:37] <jnthn>         return NULL;

[20:37] <jnthn> That's an off-by-one

[20:37] <jnthn> Should be >

[20:37] <jnthn> star: use NativeCall; my $arr = CArray[int].new(); say $arr[0];

[20:37] <p6eval> star 2012.02: OUTPUT«(signal SEGV)»

[20:38] <jnthn> Second, at_pos_ref can return NULL if there's no element at that reference.

[20:38] <jnthn> I'm guessing that this case is not being handled.

[20:38] <arnsholt> Yeah

[20:39] <jnthn> It doesn't crash in the tests because we can't bounds-check a return value.

[20:39] <arnsholt> Yup

[20:39] <jnthn> (Because C arrays don't communicate their size.)

[20:40] <arnsholt> But >= should be right, no?

[20:40] <arnsholt> It's elems that's wrong I think

[20:41] <arnsholt> In my session with a one-element array, elems is 0

[20:42] <jnthn> oh

[20:42] <jnthn> yeah, you're right.

[20:42] * masak .oO( "...and off-by-one errors" )

[20:43] <arnsholt> Oh, I see it

[20:44] <arnsholt> if (index >= body->elems) body->elems = index;

[20:44] <arnsholt> There's the off-by-one

[20:44] <arnsholt> It should be = index+1

[20:47] *** kaare_ left
[20:47] <jnthn> aha!

[20:47] <jnthn> good find :)

[20:47] <arnsholt> Thanks =)

[20:47] <jnthn> arnsholt++ # oneing in on the bug

[20:48] <arnsholt> I'll leave the accessor-returns-NULL issue to you =)

[20:49] <arnsholt> I'll add a test and fix in master and pull that back into my branch

[20:49] <arnsholt> With a bit of luck my structs will work then

[20:53] *** arlinius joined
[20:54] *** alester joined
[20:56] <uvtc> moritz, new wiki down?

[20:56] *** dalek joined
[20:56] *** ChanServ sets mode: +v dalek

[20:57] <uvtc> moritz, oh, it's back.

[20:58] <lichtkind> raiph: hai

[20:58] *** p6eval joined
[20:58] *** ChanServ sets mode: +v p6eval

[20:59] <raiph> lichtkind: hi

[20:59] <dalek> perl6.org: 97cecea | (John Gabriele)++ | source/community/index.html:

[20:59] <dalek> perl6.org: Added link to new Perl 6 wiki

[20:59] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/97cecea272

[20:59] <lichtkind> very much changed :)

[21:00] <dalek> nqp: 769b277 | (Arne Skjærholt)++ | src/6model/reprs/CArray.c:

[21:00] <dalek> nqp: Fix off-by-one bug in CArray.c.

[21:00] <dalek> nqp: review: https://github.com/perl6/nqp/commit/769b2773e8

[21:00] *** ggoebel joined
[21:00] <lichtkind> who is john gabriele?

[21:00] *** Juerd joined
[21:00] <uvtc> hi

[21:00] <uvtc> that's me

[21:01] *** tadzik joined
[21:02] *** [Coke] joined
[21:02] *** Util joined
[21:02] *** hugme joined
[21:02] *** PerlJam joined
[21:02] *** ChanServ sets mode: +v hugme

[21:02] <arnsholt> There. Fix pushed

[21:02] <jnthn> yay

[21:02] *** masak joined
[21:02] <tadzik> heh. Everyone loses connection and gets back to the channel. arnsholt: "There. Fix pushed"

[21:03] <tadzik> I feel updated

[21:03] *** Chillance left
[21:03] *** Chillance joined
[21:04] <arnsholt> ^_^

[21:04] <arnsholt> And even better, my CStruct with CArray test case now works properly

[21:04] * arnsholt celebrates a bit

[21:05] <Juerd> Just a bit? For arrays and structs I'd expect at least a few bytes.

[21:05] <arnsholt> =D

[21:05] <tadzik> heh, where do I have this..

[21:05] <jnthn> Maybe grab a nibble to eat...

[21:05] <tadzik> http://goo.gl/VBMbr

[21:05] <jnthn> Anyway, word up!

[21:05] <tadzik> aye, here

[21:06] <jnthn> tadzik: :P

[21:06] <dalek> perl6.org: 9ac8a61 | (John Gabriele)++ | source/documentation/index.html:

[21:06] <dalek> perl6.org: Updated link to Perl 6 Tablets

[21:06] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/9ac8a6145c

[21:07] <tadzik> rseen tadzik?

[21:07] <tadzik> heh, rseen would be nice. Then I could write "tadzik. Providing not-really-related images from the internets since 200x"

[21:07] <[Coke]> please see the rseen(1) and rseen.conf(5) man pages for full documentation.

[21:08] <tadzik> so there is hope :)

[21:09] <dalek> nqp/cstruct-work: 3a23406 | jnthn++ | src/6model/reprs/CStruct.c:

[21:09] <dalek> nqp/cstruct-work: Don't try to allocate 0 bytes in CStruct REPR.

[21:09] <dalek> nqp/cstruct-work: review: https://github.com/perl6/nqp/commit/3a23406005

[21:09] <dalek> nqp/cstruct-work: 1b1106c | moritz++ | tools/build/PARROT_REVISION:

[21:09] <dalek> nqp/cstruct-work: bump parrot revision to 4.3.0

[21:09] <dalek> nqp/cstruct-work: review: https://github.com/perl6/nqp/commit/1b1106c242

[21:09] <dalek> nqp/cstruct-work: 769b277 | (Arne Skjærholt)++ | src/6model/reprs/CArray.c:

[21:09] <dalek> nqp/cstruct-work: Fix off-by-one bug in CArray.c.

[21:09] <dalek> nqp/cstruct-work: review: https://github.com/perl6/nqp/commit/769b2773e8

[21:09] <dalek> nqp/cstruct-work: b85e904 | (Arne Skjærholt)++ | / (3 files):

[21:09] <dalek> nqp/cstruct-work: Merge branch 'master' into cstruct-work

[21:09] <dalek> nqp/cstruct-work: review: https://github.com/perl6/nqp/commit/b85e9046e2

[21:09] <dalek> nqp/cstruct-work: 682e311 | (Arne Skjærholt)++ | src/6model/reprs/CStruct.c:

[21:09] <dalek> nqp/cstruct-work: Implement setting of CArray members in CStructs.

[21:09] <dalek> nqp/cstruct-work: 

[21:09] <dalek> nqp/cstruct-work: Confirmed working in Perl 6-land, C-land working or breakage to be determined.

[21:09] <dalek> nqp/cstruct-work: review: https://github.com/perl6/nqp/commit/682e311bdc

[21:10] <arnsholt> Proper testcases in Zavolaj can wait 'till tomorrow

[21:10] <tadzik> writing something that generates Perl 6 modules from .h files could be a nice thing for the hackathon

[21:11] *** havenn joined
[21:11] <arnsholt> Quite. We should discuss that on friday =)

[21:11] <tadzik> certainly :)

[21:11] <arnsholt> See you folks in cyberspace tomorrow, and some even in meatspace on friday =D

[21:11] <tadzik> o/

[21:11] * arnsholt &

[21:12] * jnthn looks forward to it

[21:12] <jnthn> o/, arnsholt 

[21:13] *** alester left
[21:17] <uvtc> Who handles updates to rakudo.org?

[21:18] *** libertyprime joined
[21:18] <jnthn> Any of the folks who have a login to it and time.

[21:18] <jnthn> I know myself, pmichaud and moritz have access.

[21:19] <uvtc> I was going to suggest that I think it should have a separate heading for Rakudo Star.

[21:19] *** nif joined
[21:20] <jnthn> ah, not a bad idea.

[21:20] <uvtc> Would be useful to link new users directly to a R* page there.

[21:20] <uvtc> Currently, the "How to get Rakudo Perl 6" is mostly about building the compiler release.

[21:21] <uvtc> There's also still a "How to get Rakudo nom" heading there.

[21:21] <uvtc> Gah. My time for now just ran out. Gotta go. o/

[21:21] <raiph> \o

[21:23] *** Chillance left
[21:24] *** Chillance joined
[21:24] *** brrt left
[21:24] *** libertyprime left
[21:24] *** libertyp1ime joined
[21:25] *** brrt joined
[21:27] *** pmurias left
[21:32] *** libertyp1ime left
[21:37] <dalek> tablets: 23d1466 | (Herbert Breunung)++ | docs/introduction.txt:

[21:37] <dalek> tablets: update content of into to recent order

[21:37] <dalek> tablets: review: https://github.com/perl6/tablets/commit/23d1466be4

[21:37] <dalek> tablets: 4b4f95c | (Herbert Breunung)++ | docs/ (3 files):

[21:37] <dalek> tablets: moved it terms to glossary

[21:37] <dalek> tablets: review: https://github.com/perl6/tablets/commit/4b4f95cbcf

[21:39] <lichtkind> raiph: ping?

[21:41] <lichtkind> moritz: is it to every full hour?

[21:42] *** thou left
[21:42] *** thou joined
[21:46] *** fridim_ joined
[21:54] *** jaffa4 left
[21:56] *** tokuhirom joined
[22:00] *** tokuhirom left
[22:02] <fsergot> good night o/

[22:02] *** fsergot left
[22:03] *** tokuhirom joined
[22:03] *** brrt left
[22:10] *** libertyprime joined
[22:23] *** mdupont left
[22:23] *** mdupont joined
[22:24] <diakopter> phenny: tell masak Whether you believe you can autopun or not, you are right.

[22:24] <phenny> diakopter: I'll pass that on when masak is around.

[22:25] *** localhost joined
[22:27] <raiph> phenny, ask phenny (and lichtkind) is this pong an autopun?

[22:27] <phenny> Hey, I'm not as stupid as Monty you know!

[22:28] <lichtkind> raiph: no just wanta know if your still around

[22:28] <masak> diakopter: belief doesn't come into it! I think you're veering too close to self-reference right now ;)

[22:28] <phenny> masak: 22:24Z <diakopter> tell masak Whether you believe you can autopun or not, you are right.

[22:28] <masak> diakopter: the key is use/mention collapsing.

[22:29] <masak> like "Whr dd ll m vwls g?"

[22:29] <masak> (though that particular one is quite tired)

[22:29] <diakopter> Whether you believe this is an autopun or not, you are right.

[22:30] <TimToady> speaking of which, have you seen http://imgur.com/r/funny/4r8uO ?

[22:30] <masak> yeah. typical self-reference.

[22:31] <diakopter> I skimmed an explanation somewhere; I don't remember it.

[22:31] <jnthn> Ouch!

[22:31] <masak> that one is nice because you can actually start down the problem, do a few iterations on it, and then go "oh, I see what you did there..."

[22:31] <jnthn> ...it was instantly funny then I started thinking about it :)

[22:32] <masak> but srsly. if you do a Monte Carlo on that one, you're bound to get a probability out, aren't you?

[22:32] <masak> and since it's a computer program, you have to make assumptions, and it's those assumptions that determine that answer.

[22:33] <diakopter> I don't see how all puns about autopunning aren't autopuns

[22:33] <masak> the one assumption that matters here seems to be "to what degree are (A) and (D) 'the same'?"

[22:33] <TimToady> .oO(This car no autopun.)

[22:33] <masak> TimToady: :P

[22:34] <masak> diakopter: well, the trick isn't to get "autopun" in there somewhere. it's to collapse a mention into a use and catching the listener slightly unawares.

[22:34] <masak> "We can repair anything. (Please knock hard on the door, the doorbell doesn't work.)"

[22:35] <TimToady> well, but that one depends on assumptions too

[22:35] <TimToady> "can" == "always do"

[22:35] <diakopter> Teach a man to autopun, you'll feed him for a lifetime.

[22:36] * diakopter is hungry

[22:36] <masak> TimToady: well, they don't have to make perfect sense. just tickle the imagination enough so that it connects the dots.

[22:36] <masak> TimToady: and not repairing the doorbell in this case has a certain sense of "heal thyself" justice to it that I think makes people smile.

[22:37] <masak> diakopter: aww :) I love to see you try, though.

[22:37] <diakopter> AUTOFAIL

[22:39] <TimToady> I think any autopunnyness of the multiple choice question hinges on use/mention of the concept of "correct"

[22:40] <masak> oh, you consider the multi-choice question an autopun? I just see it as an Epimeaniness.

[22:41] <diakopter> still I struggle with the definition

[22:41] <masak> yeah. me too.

[22:41] <diakopter> use/mention collapsing

[22:41] <masak> ok, a clear example.

[22:41] <TimToady> self-reference always involves some degree of use/mention, but I can see where it doesn't tickle you enough to call it a pun

[22:42] <TimToady> it certainly tickles me :)

[22:42] <TimToady> and part of the is the garden-pathology of it, when you see the second 25%

[22:43] *** uvtc joined
[22:44] <masak> "...you think 'I know, I'll use multithreading! Nothhw tpe yawrve ..."

[22:44] <masak> er

[22:44] <masak> "...you think 'I know, I'll use multithreading!' Nothhw tpe yawrve ..."

[22:44] <uvtc> haha

[22:44] <masak> see? :)

[22:44] <masak> diakopter: the 'multithreading' is the mention.

[22:44] <masak> diakopter: the garbled characters are the use.

[22:45] <masak> diakopter: the fact that the garbled characters *enter the reality of the joke* is the collapse.

[22:45] <jnthn> "I reviewed your code and found two errors. It is an off-by one."

[22:46] <huf> :))))))

[22:46] <TimToady> btw, off-by-one is just a naming problem

[22:46] <diakopter> "masak reviewed your autopun and didn't get it. He laughed."

[22:47] <diakopter> s/your/this/

[22:47] <diakopter> argh.

[22:47] <diakopter> still I mix too much self-reference

[22:48] <diakopter> also, the fact it's not funny makes it use the mention.

[22:51] *** whiteknight joined
[22:52] *** raiph left
[22:53] <diakopter> There are only 10 kinds of people - those who understand autopuns and those who don't.

[22:54] <masak> :D

[22:55] <masak> just by using fixed snowclone-ish joke templates like that, you can approximate funny pretty well :)

[22:56] <diakopter> "To autopun or not to autopun"

[22:57] <masak> the "...and 9 other kinds!" joke is funny because it (a) deviates from the pattern at the last moment when the listener has already committed down the garden path, and (b) in retrospect puts the speaker squarely in the category of "doesn't understand binary", closing the autopun loop.

[22:59] <diakopter> Self-reference alone or even mentioning autopuns as well does not make an autopun.

[22:59] <sjohnson> diakopter: hi

[22:59] *** spider-mario left
[23:00] <diakopter> sjohnson: hello from the punfailer

[23:00] <sjohnson> punfailer eh

[23:00] <sjohnson> i haven't told any bad puns today tho!

[23:01] <diakopter> I meant myself

[23:01] <sjohnson> hmm, i wonder if i can whip up a purposely corny pun

[23:02] * masak .oO( just put enough maize in it )

[23:02] <diakopter> just assume everything you read intends to self-refer

[23:02] * masak .oO( you're in a corny maize of twisty little autopuns, all alike )

[23:03] <sjohnson> a maze of maize! HAHAHAHAHA

[23:03] <sjohnson> bbl 

[23:03] *** cognominal joined
[23:03] * masak .oO( he got a sudden urge to make popcorn )

[23:04] *** silug joined
[23:05] <diakopter> as soon as masak teaches me to autopun, I'll make one.

[23:06] *** cognominal_ left
[23:06] <diakopter> YAFAIL

[23:06] <diakopter> pretty soon here TimToady will correctly label me as perseverating

[23:09] *** javascriptnewbie joined
[23:10] <masak> javascriptnewbie: oh hai!

[23:10] <javascriptnewbie> hi!

[23:11] *** flussence joined
[23:11] <masak> welcome to our humble channel.

[23:11] <TimToady> diakopter: I keep doing that.

[23:11] *** fridim_ left
[23:11] <diakopter> :)

[23:12] <masak> there! see!?

[23:12] <masak> TimToady is like, built out of autopuns.

[23:12] <javascriptnewbie> i'm shinobicl... i'm just asking stuff on the #javascript channel :)  .... with no luck :(

[23:12] <masak> oh.

[23:13] <masak> carry on, then.

[23:13] <javascriptnewbie> i'm just here to ask... i finished a module (WorkdayCalendar) and i want to "publish" it

[23:13] * flussence was slightly confused there until checking the ir clogs

[23:13] <javascriptnewbie> what should i do? is there a tool for that?

[23:14] <uvtc> javascriptnewbie, http://wiki.perl6.org/Create%20and%20Distribute%20Modules

[23:14] <javascriptnewbie> thanks :D uvtc

[23:15] <uvtc> javascriptnewbie, sure, y/w

[23:16] *** icwiener left
[23:16] <javascriptnewbie> is that a wiki written in haskell?

[23:17] <uvtc> Yes.

[23:17] <javascriptnewbie> oh... nice... well got to go now... i'll upload my module this week :) good night all!

[23:18] <uvtc> g'night

[23:19] <diakopter> I don't see why the use/mention of autopuns can't be an autopun. :| too directly self-referential?

[23:20] <diakopter> no pun intended.

[23:20] <masak> ;)

[23:20] <diakopter> I think.

[23:20] <masak> I guess it could be an autopun, it's more like... it isn't automatically one.

[23:20] <masak> it doesn't become an autopun because it's a self-reference, or because you throw in the word "autopun" in there somewhere.

[23:21] *** javascriptnewbie left
[23:22] *** daniel-s joined
[23:22] *** mspaulding joined
[23:23] *** awwaiid joined
[23:24] *** Chillance left
[23:26] <sorear> good * #perl6

[23:26] <diakopter> howdy

[23:27] <lichtkind> uvtc: i have trouble with the anchors

[23:27] <uvtc> What's the trouble?

[23:28] *** sftp joined
[23:30] <uvtc> sorry, have to go

[23:30] *** uvtc left
[23:30] <sorear> diakopter: heya

[23:32] <lichtkind> good bye

[23:32] <lichtkind> they dont work :)

[23:35] *** libertyprime left
[23:35] *** jnthn_ joined
[23:39] *** libertyprime joined
[23:40] *** sftp left
[23:44] *** flussence left
[23:46] *** jnthn_ is now known as jnthn

[23:47] *** sftp joined
[23:49] *** libertyprime left
[23:50] *** libertyprime joined
[23:51] *** alvis joined
[23:51] *** pochi joined
[23:51] *** yeltzooo7 joined
[23:51] *** libertyprime left
[23:52] *** flussence joined
[23:56] *** thou left
[23:57] *** thou joined
[23:58] *** daemon left
[23:59] *** awwaiid left
[23:59] *** awwaiid joined
