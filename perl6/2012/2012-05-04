[00:03] *** vlixes joined
[00:05] *** spider-mario left
[00:08] *** jerome_ left
[00:14] *** bsb left
[00:16] *** risou left
[00:18] *** risou joined
[00:20] *** eviltwin_b joined
[00:22] *** allbery_b joined
[00:23] *** geekosaur left
[00:25] *** jerome_ joined
[00:26] *** eviltwin_b left
[00:28] *** risou left
[00:28] *** ashleydev left
[00:29] *** risou joined
[00:34] <lichtkind> _sri: core of perl 6 is rather slim (before prelude) but just the attitude see everything as parsing grammars isnt metn to be minimal like tcl :)

[00:36] *** ashleydev joined
[00:40] <_sri> lichtkind: looking through rakudo it appears to still be years away from becoming truly usable, just trying to find the silver lining :/

[00:40] <lichtkind> _sri: i understand

[00:41] *** risou left
[00:43] <lichtkind> _sri: i wasnt even able to write a simple rakudo patch

[00:43] *** risou joined
[00:44] *** eviltwin_b joined
[00:44] *** allbery_b left
[00:56] *** Khisanth joined
[01:00] <sorear> good * #perly6

[01:03] *** thelazydeveloper left
[01:07] *** eviltwin_b left
[01:09] *** eviltwin_b joined
[01:16] *** scott_ joined
[01:16] *** scott_ is now known as Guest67706

[01:20] *** bsb joined
[01:20] *** tokuhirom joined
[01:25] *** orafu left
[01:25] *** geekosaur joined
[01:25] *** orafu joined
[01:27] *** eviltwin_b left
[01:29] *** eviltwin_b joined
[01:32] *** geekosaur left
[01:43] <dalek> rakudo/nom: 7eae9b2 | pmichaud++ | src/ (2 files):

[01:43] <dalek> rakudo/nom: Fix [|] and [&] to provide flat junctions (RT #112696, masak++).

[01:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7eae9b2740

[01:47] <dalek> tablets: 631e78c | (Herbert Breunung)++ | docs/appendix-a-index.txt:

[01:47] <dalek> tablets: better desciption of A and polish comparator ops

[01:47] <dalek> tablets: review: https://github.com/perl6/tablets/commit/631e78c71c

[01:51] *** whiteknight left
[01:54] *** allbery_b joined
[01:56] *** eviltwin_b left
[01:57] *** eviltwin_b joined
[02:00] *** allbery_b left
[02:05] *** allbery_b joined
[02:06] <dalek> rakudo/nom: 2d2584a | pmichaud++ | src/core/metaops.pm:

[02:06] <dalek> rakudo/nom: Implement triangle forms for junction reducers:   [\|]  and [\&]

[02:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2d2584a625

[02:07] *** eviltwin_b left
[02:08] *** tyatpi joined
[02:26] <dalek> tablets: d43436b | (Herbert Breunung)++ | docs/appendix-a-index.txt:

[02:26] <dalek> tablets: enforce new format rule (links to glossary are italic) and (put markdown formating of links inside the square brackets )

[02:26] <dalek> tablets: review: https://github.com/perl6/tablets/commit/d43436bd47

[02:26] <dalek> tablets: bd655c2 | (Herbert Breunung)++ | docs/ (2 files):

[02:26] <dalek> tablets: densify report table

[02:26] <dalek> tablets: review: https://github.com/perl6/tablets/commit/bd655c292c

[02:26] *** allbery_b left
[02:28] *** ponbiki joined
[02:28] *** geekosaur joined
[02:30] *** ponbiki left
[02:31] *** ponbiki joined
[02:31] *** zb joined
[02:32] <dalek> tablets: b1997ef | (Herbert Breunung)++ | README.md:

[02:32] <dalek> tablets: add cowens to authors list

[02:32] <dalek> tablets: review: https://github.com/perl6/tablets/commit/b1997ef7ef

[02:39] *** vlixes left
[02:43] <dalek> tablets: d1abda7 | (Herbert Breunung)++ | docs/appendix-a-index.txt:

[02:43] <dalek> tablets: categorization has to be linked to B if possible

[02:43] <dalek> tablets: review: https://github.com/perl6/tablets/commit/d1abda7c0a

[02:43] *** orafu left
[02:45] *** orafu joined
[02:45] *** fgomez left
[02:53] *** tyatpi left
[03:01] *** Lorn joined
[03:06] *** tyatpi joined
[03:08] *** eviltwin_b joined
[03:11] *** geekosaur left
[03:17] *** wutawutawhat joined
[03:17] <wutawutawhat> how close are you guys to 1.0?

[03:18] <dalek> tablets: a8fc6d5 | (Herbert Breunung)++ | docs/appendix- (2 files):

[03:18] <dalek> tablets: repair links in the contextualizer table

[03:18] <dalek> tablets: review: https://github.com/perl6/tablets/commit/a8fc6d5235

[03:18] <lichtkind> wutawutawhat: you mean that question serious?

[03:19] <lichtkind> wutawutawhat: actually nobody knows, its very complex progress is made dayle and case it which Perl 6 is usable all growing all the time

[03:20] <lichtkind> wutawutawhat: but finished product needs some years more since has a  depths like no othe rlanguage im aware of

[03:21] *** allbery_b joined
[03:21] <sorear> wutawutawhat: Numbers mean nothing.  I released version 17.0 three days ago.

[03:23] *** eviltwin_b left
[03:24] *** lichtkind left
[03:27] <sorear> (for generous values of "I")

[03:30] <colomon> masak++

[03:38] *** eviltwin_b joined
[03:39] <_sri> s/1.0/stable/

[03:40] <_sri> my bet would be on 5-10 years

[03:41] *** allbery_b left
[03:42] *** allbery_b joined
[03:43] <PerlJam> _sri: does that include CP6AN ?

[03:43] <_sri> i don't consider CP6AN that important, it will happen on its own once the base system is stable

[03:44] <_sri> in fact, the whole embedding perl5 nonsense is completely unnecessary imo

[03:45] *** eviltwin_b left
[03:46] *** REPLeffect joined
[03:46] <PerlJam> you don't think that a perl 6 implementation should run perl 5 programs?  or something else?

[03:47] <_sri> prove you have a stable perl6 core with enough documentation for everyone to pick up the language and everything will be ported in no time

[03:48] <_sri> just look at the excitement about the p5-mop effort, the whole community is desperately waiting for progress

[03:48] *** raiph joined
[03:49] <_sri> but i guess perl6 is an all-or-nothing project... so who knows, maybe it will never reach that point

[03:51] <sisar> phenny, tell tadzik, "perl6 version 2012.04.1-20-g0059aa6 built on parrot 4.3.0 revision RELEASE_4_3_0-12-gf983396" (32-bit Ubuntu). I get the warnings whenever I try to install any module.

[03:51] <phenny> sisar: I'll pass that on when tadzik is around.

[03:51] <phenny> sisar: 03 May 17:44Z <lichtkind> tell sisar "just have a look section C is much larger than average so the C heading as a backling to the to looses its functionality if you have to scroll too much, so I added some C (second letter a-m)"

[03:51] <phenny> sisar: 03 May 17:44Z <lichtkind> tell sisar "and Cn for second letter N-z"

[03:51] <phenny> sisar: 03 May 20:05Z <tadzik> tell sisar which Rakudo is that? I don't get any warnings in Panda, with or without line numbers

[03:51] <PerlJam> as long as we have an interested and talented group of implementors, perl 6 will eventually mature into "stable"

[03:52] <sisar> phenny, tell lichtkind, ah, thanks for explaining that.

[03:52] <phenny> sisar: I'll pass that on when lichtkind is around.

[03:54] <_sri> PerlJam: i wouldn't be too sure about that, the focus seems to be on experimenting with exciting new features, not stabilizing the project

[03:55] <_sri> looking through the commit history i'm mostly just thinking "oh, that's a fun looking feature, but i have no idea what i would ever use it for"

[03:55] <PerlJam> _sri: What "exciting new features" have people been experimenting with? 

[03:55] <sisar> phenny, tell tadzik, maybe its time to start version nos for panda ?

[03:55] <phenny> sisar: I'll pass that on when tadzik is around.

[03:56] * sisar afk

[03:57] <_sri> PerlJam: magical documentation comes to mind

[03:58] <_sri> comments that result in documentation based on their context

[03:58] <_sri> sure that's fun... but damn... is that why i have to wait 10 years for perl6?

[03:59] <_sri> imo stuff like that should be kicked from the language core and added later on with incremental updates

[04:01] <PerlJam> I've never really thought of that feature as the main focus of Rakudo development.  It's an implementation detail that found a champion.

[04:01] <_sri> yea, there's a complete lack of focus

[04:02] <PerlJam> Things like nailing down lists, laziness, parcels, etc. have been the main focus in my eyes.

[04:03] <_sri> like, why is there no canonical todo list that defines exactly what needs to be done for perl6 to be considered stable?

[04:04] <benabik> _sri: It's a fallacy to assume because someone implemented feature B, it slowed down feature A.

[04:04] <_sri> benabik: you can't say the opposite either though

[04:05] *** benabik left
[04:05] <PerlJam> _sri: would you contribute more if there were such a list?

[04:05] <_sri> PerlJam: almost certainly

[04:06] *** benabik joined
[04:07] <PerlJam> I don't think anyone but Larry has a feel for the general shape of Perl 6. (what it *must* have to be Perl 6.0.0)

[04:07] <_sri> PerlJam: but i'm getting the impression that the goal is not so much a stable perl6 but researching language design

[04:07] <PerlJam> The only thing that irks me slightly about any of the Perl 6 implementations (but particularly Rakudo) is that they are still too slow

[04:08] *** eviltwin_b joined
[04:09] <benabik> _sri: I can't say the opposite?  What's the opposite of what I said?

[04:09] <_sri> PerlJam: define a smaller core language, release a stable but slow version, and people will make it faster

[04:10] <PerlJam> _sri: who decides what makes the cut for that smaller core?

[04:10] <_sri> PerlJam: that's the big question :)

[04:10] <benabik> _sri: A list of things to do: https://github.com/rakudo/rakudo/blob/nom/docs/ROADMAP

[04:11] *** allbery_b left
[04:12] <benabik> What needs to be done to have a stable "Perl 6" is to have a complete implementation.  Most of the changes to the spec are done in response to someone trying to make it work.

[04:12] <_sri> that's very important information

[04:13] <PerlJam> benabik++ 

[04:13] <_sri> so perl6 is still in the design phase

[04:13] <PerlJam> I had forgotten about the ROADMAP since I haven't had my Perl-6-implementor hat on in so long

[04:14] <benabik> perl6 is not using the waterfall development model.

[04:14] <_sri> how can there be a roadmap if those features are not completely designed?

[04:14] <benabik> design and implementation happen in cycles

[04:14] <PerlJam> _sri: implementations inform the design and vice versa

[04:15] <_sri> that's very frustrating

[04:16] <_sri> this is exactly wat gives the impression that perl6 will never be "stable"

[04:16] <PerlJam> This is exactly how Agile works only Perl 6 doesn't have the pressure of deadlines and budgets.

[04:17] <_sri> even more reason to cut the losses and settle for a smaller language

[04:18] <_sri> that's what i meant with all-or-nothing project

[04:19] <benabik> _sri: We have a smaller language.  We call it Perl 6.  It works.  Today.  People use it.

[04:19] <_sri> that's just not true

[04:19] <PerlJam> It is true.

[04:19] *** allbery_b joined
[04:20] *** eviltwin_b left
[04:21] <PerlJam> Maybe you object to the fact that we can probably name all of the people who regularly use perl 6 so it's not "generally used" like python or php or ruby or perl or haskell or ...

[04:22] *** alester joined
[04:22] <PerlJam> Still ... we have some early adopters.  Just not the critical mass needed to cross the chasm yet

[04:22] <_sri> what is the deprecation policy on stable rakudo releases then?

[04:23] <_sri> where is the canonical language reference i can use to ensure i only depend on supported features?

[04:24] <PerlJam> _sri: the Synopses are the language reference

[04:25] <_sri> so i can use everything that's in the synopses?

[04:25] <PerlJam> everything that works  :)

[04:25] <_sri> that's what i mean

[04:25] <benabik> _sri: Welcome to a small open source project.  If you want strict depreciation policies, this is not the best place to be.

[04:26] <_sri> i just want what perl5 provides, a little more modern

[04:26] *** MContagious joined
[04:26] *** wutawutawhat left
[04:26] <PerlJam> _sri: what do you want the current perl 5s don't have?

[04:27] <PerlJam> s/the/that/

[04:27] <_sri> you just can't say perl6 is ready, it would be silly to make people bet their businesses on a language that's still being developed

[04:27] <PerlJam> "make people"?

[04:27] <PerlJam> People make their own choices

[04:27] <_sri> PerlJam: deprecation policies and reliable references of supported languages features

[04:28] <PerlJam> _sri: perl 5 has those things.  What "little more modern" things do you want from perl 5?

[04:28] <_sri> "stable" release i can rely on

[04:28] <PerlJam> _sri: maybe Perl 5 already has everything you need and you really have no need of Perl 6

[04:29] <_sri> PerlJam: type system, exceptions and a few smaller things

[04:29] <_sri> yes, i'm mostly happy with perl5, but it will never have a type system or good exceptions

[04:30] <PerlJam> perl5 has multiple type systems on CPAN  ;)

[04:30] <_sri> i'm not mentioning sensible oo-system since p5-mop can solve that

[04:30] <_sri> PerlJam: right ;p

[04:31] <PerlJam> Perhaps perl 5 can grow a type system like it's growing p5-mop

[04:31] *** eviltwin_b joined
[04:31] <_sri> that seems very unlikely

[04:32] <PerlJam> p5-mop seemed highly unlikely just a few years ago.

[04:34] *** allbery_b left
[04:34] *** geekosaur joined
[04:37] *** eviltwin_b left
[04:39] *** ponbiki left
[04:54] *** rurban left
[04:55] *** rurban joined
[05:01] *** birdwindupbird joined
[05:04] *** MContagious left
[05:09] *** sisar left
[05:15] *** eviltwin_b joined
[05:16] *** eviltwin_b left
[05:16] *** eviltwin_b joined
[05:17] *** geekosaur left
[05:28] *** eviltwin_b left
[05:28] *** geekosaur joined
[05:32] <moritz> \o

[05:36] *** alester left
[05:38] *** geekosaur left
[05:39] *** geekosaur joined
[05:47] *** kaleem joined
[05:57] *** raiph left
[06:00] *** woosley joined
[06:03] *** wolfman2000 left
[06:07] <dalek> DBIish: 66f1aca | moritz++ | / (2 files):

[06:07] <dalek> DBIish: [Pg] basic grammar-based tokenization of SQL

[06:07] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/66f1acacd3

[06:23] *** tokuhirom left
[06:23] *** tokuhirom joined
[06:23] *** woosley left
[06:26] *** plobsing left
[06:26] *** geekosaur left
[06:28] *** geekosaur joined
[06:32] *** wtw joined
[06:44] *** eviltwin_b joined
[06:44] *** fglock left
[06:44] *** MContagious joined
[06:45] *** Guest67706 left
[06:47] *** geekosaur left
[06:53] *** scott_ joined
[06:53] *** scott_ is now known as Guest96768

[06:56] <tadzik> May the 4th be with you, #perl6

[06:56] <phenny> tadzik: 03:51Z <sisar> tell tadzik "perl6 version 2012.04.1-20-g0059aa6 built on parrot 4.3.0 revision RELEASE_4_3_0-12-gf983396" (32-bit Ubuntu). I get the warnings whenever I try to install any module.

[06:56] <phenny> tadzik: 03:55Z <sisar> tell tadzik maybe its time to start version nos for panda ?

[07:00] *** brrt joined
[07:03] *** pmurias joined
[07:04] *** geekosaur joined
[07:06] *** eviltwin_b left
[07:07] *** woosley joined
[07:07] <pmurias> _sri: re "just want what perl5 provides, a little more modern" there have been a few implementations that aimed at providing a usable subset of perl6 v6.pm, perlito6 (some by translation to perl5) but people (here) weren't interested

[07:11] *** eviltwin_b joined
[07:11] <moritz> I guess that subset implementations have a different target audience than full iplementations

[07:14] *** geekosaur left
[07:15] *** xinming_ joined
[07:15] *** Entonian joined
[07:18] *** xinming left
[07:19] <dalek> DBIish: c4f91e1 | moritz++ | lib/DBDish/Pg.pm6:

[07:19] <dalek> DBIish: [Pg] small refactor

[07:19] <dalek> DBIish: 

[07:19] <dalek> DBIish: move statement preparation out of submethod BUILD to get better error handling

[07:19] <dalek> DBIish: use grammar-based tokenizer for rewriting placeholders

[07:19] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/c4f91e1c9a

[07:21] *** fhelmberger joined
[07:22] *** fglock joined
[07:27] *** plobsing joined
[07:30] *** woosley left
[07:30] *** sporous left
[07:31] <dalek> DBIish: 251b9bf | moritz++ | t/99-common.pl6:

[07:31] <dalek> DBIish: [t] Hi, this is your son's school. We're having some computer trouble.

[07:31] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/251b9bfed3

[07:32] *** sporous joined
[07:36] <dalek> panda: d00a058 | tadzik++ | lib/Panda/ (2 files):

[07:36] <dalek> panda: Avoid some uninitialized variable warnings, sisar++

[07:36] <dalek> panda: review: https://github.com/tadzik/panda/commit/d00a058586

[07:36] *** sporous left
[07:36] *** sporous joined
[07:37] <tadzik> phenny: tell sisar d00a058586 should fix the warnings, let me know if everything's allright

[07:37] <phenny> tadzik: I'll pass that on when sisar is around.

[07:38] <tadzik> phenny: tell sisar I'm all for versioning panda, but I wanted to do some bin/panda refactors first

[07:38] <phenny> tadzik: I'll pass that on when sisar is around.

[07:40] <moritz> seems the fix for the warnings line number was good enough to be useful :-)

[07:40] <tadzik> indeed :)

[07:40] <tadzik> which commit is that? I don't think I noticed it

[07:41] *** fgomez joined
[07:41] <moritz> 1972721e4675a8a65e0b6d671e02fb7ce6f0cf53

[07:42] <moritz> yesterday

[07:42] <tadzik> ha, nice one

[07:42] <tadzik> moritz++

[07:44] *** fgomez left
[07:44] *** fgomez joined
[07:44] <dalek> DBIish: ebda4c2 | moritz++ | lib/DBDish/mysql.pm6:

[07:44] <dalek> DBIish: [mysql] did your really name your son robert'); drop table students;--

[07:44] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/ebda4c2763

[07:45] <tadzik> karma students;

[07:45] <aloha> students; has karma of 0.

[07:54] *** allbery_b joined
[07:57] *** eviltwin_b left
[08:09] *** REPLeffect left
[08:14] *** geekosaur joined
[08:17] *** allbery_b left
[08:17] *** kresike joined
[08:21] *** eviltwin_b joined
[08:22] *** REPLeffect joined
[08:24] *** allbery_b joined
[08:24] *** geekosaur left
[08:27] *** eviltwin_b left
[08:30] *** eviltwin_b joined
[08:33] *** allbery_b left
[08:33] *** geekosaur joined
[08:35] *** eviltwin_b left
[08:46] <dalek> Perlito: 4d56b5d | (Flavio S. Glock)++ | / (6 files):

[08:46] <dalek> Perlito: Perlito5 - add $ENV{PERL5LIB} to @INC

[08:46] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/4d56b5d868

[08:50] *** eviltwin_b joined
[08:50] *** geekosaur left
[08:52] *** liuchong joined
[08:56] *** tokuhirom left
[09:05] *** thelazydeveloper joined
[09:09] *** mucker joined
[09:11] <dalek> Perlito: dc1a0ec | (Flavio S. Glock)++ | TODO-perlito5:

[09:11] <dalek> Perlito: Perlito5 - TODO update

[09:11] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/dc1a0ece09

[09:18] *** cogno joined
[09:19] *** geekosaur joined
[09:20] *** sreejit joined
[09:22] <dalek> DBIish: 2a0dfe4 | moritz++ | README:

[09:22] <dalek> DBIish: revamp README. Chose a 2-clause BSD license

[09:22] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/2a0dfe4d02

[09:22] *** eviltwin_b left
[09:22] *** daxim joined
[09:22] *** bbkr joined
[09:27] *** plobsing left
[09:29] *** cogno left
[09:34] *** eviltwin_b joined
[09:34] *** geekosaur left
[09:36] *** eviltwin_b left
[09:38] *** geekosaur joined
[09:40] *** bbkr left
[09:40] *** bbkr joined
[09:41] *** BlueT_ left
[09:41] *** BlueT_ joined
[09:41] <jnthn> oh shark o/

[09:42] <fglock> jnthn: hi!

[09:43] <moritz> lolshark!

[09:44] <daxim> needs moar lazzz0rs on their friggin heads

[09:44] <moritz> jnthn: any LHFs in rakudo that you are aware of?

[09:44] <moritz> jnthn: I mean, low for me, not for you :-)

[09:46] <mucker> fglock: when I use rakudo against it gives an error. Is that expected ?

[09:46] <mucker> against src6

[09:47] <dalek> star: f4960ac | moritz++ | / (2 files):

[09:47] <dalek> star: ship DBIish instead of MiniDBI

[09:47] <dalek> star: review: https://github.com/rakudo/star/commit/f4960ac1af

[09:47] <fglock> mucker: I haven't tried for a while, so it is kind of expected - I'll try to reproduce, but it will take a while to setup things here

[09:48] <fglock> mucker: last time I tried I got a parrot error

[09:49] <fglock> (installing rakudo star)

[09:50] <mucker> cd src6;export PERL5LIB=lib

[09:50] <mucker> perl6 util/perlito6.pl

[09:50] <mucker> Unable to parse blockoid, couldn't find final '}' at line 106

[09:50] <mucker> zsh: exit 1     perl6 util/perlito6.pl

[09:51] <mucker> the line 106 looks pretty reasonble to me

[09:51] <moritz> the real error might be before that

[09:52] <jnthn> moritz: Well, if it's test passes you want, maybe look at some of: S02-types/keyhash.t, S02-types/keyweight.t, S03-sequence/limit-arity-2-or-more.t 

[09:52] <fglock> mucker: I think you mean PERL6LIB instead of PERL5LIB

[09:52] <jnthn> moritz: For something slightly more adventurous, working on import lists would be worthwhile.

[09:52] <jnthn> moritz: And should be somewhat in reach.

[09:53] <moritz> jnthn: oh, import lists sound nice

[09:53] <mucker> fglock: yeah PERL6LIB, same error

[09:53] <jnthn> moritz: Just curious - did you add $?FILE and $?LINE?

[09:53] <moritz> r: say $?FILE, $?LINE

[09:53] <p6eval> rakudo 2d2584: OUTPUT«/tmp/S9hzqkbpVF1␤»

[09:53] <jnthn> moritz: Noticed we don't run S02-magicals/file_line.t yet

[09:54] <moritz> jnthn: did you forget to git pull?

[09:54] <moritz> jnthn: it's in t/spectest.data 

[09:54] <jnthn> huh, just pulled...

[09:55] <jnthn> oh, so it is.

[09:55] <jnthn> Sorry. :)

[09:55] <jnthn> moritz++

[09:55] <moritz> no problem :-)

[09:56] <moritz> jnthn: before I approach import lists, there is a TODO comment in traits.pm about EXPORT_SYMBOL

[09:56] <moritz> # TODO: Make this much less cheaty. That'll probably need the

[09:56] <moritz> # full-blown serialization, though.

[09:56] <jnthn> yeah, it's those $*W calls

[09:56] <moritz> jnthn: what kind of non-cheatyness did you have in mind?

[09:57] <jnthn> moritz: The reason it makes the $*W calls is becase before bs we had to explicitly record the package creations as events so we'd get deserialization code generated.

[09:58] <jnthn> moritz: Now there's no reason to do that.

[09:58] <moritz> jnthn: and now that's not true anymore, it should just copy stuff into packages?

[09:58] <jnthn> Yeah

[09:58] <jnthn> For example:

[09:58] <jnthn> $*W.pkg_compose($install_in);

[09:58] <jnthn> That can just become

[09:58] <fglock> mucker: why are you running it with rakudo? (is is self-hosting)

[09:58] <jnthn> $install_in.HOW.compose($install_in);

[09:58] <fglock> mucker: it should work though

[09:58] *** mucker left
[09:59] <jnthn> Easy way is just to look at what the $*W methods in question do :)

[09:59] *** am0c joined
[10:00] <moritz> jnthn: on the p6 level, how are exports supposed to be organized?

[10:00] <moritz> jnthn: I gather that there's a list (or a hash?) of tags in a (which one?) package somehow

[10:01] <jnthn> moritz: S11 is LTA. But to a first approximation...

[10:01] *** mucker joined
[10:01] <jnthn> UNIT has a lexical package EXPORT. 

[10:01] <jnthn> The tags are below this.

[10:01] <jnthn> Everything that's ever exported goes into ALL

[10:01] <jnthn> Things that are just tagged "is export" go into DEFAULT

[10:02] <jnthn> Do the default import list is in EXPORT::DEFAULT

[10:02] <jnthn> The full one in EXPORT::ALL, etc.

[10:02] <moritz> and for a Foo tag, we create a EXPORT::Foo... what? List?

[10:02] <jnthn> Package

[10:02] <moritz> ok

[10:02] <jnthn> sub foo is export(:KiwiFruit) { }

[10:02] *** eoh| joined
[10:03] <jnthn> Installs a EXPORT::KiwiFruit::<&foo>

[10:03] <moritz> and then 'use Test;' at compile time stubs in a  'my &ok', and at some later point, does &ok ::= Test::EXPORT::<&ok> ?

[10:03] <jnthn> use does a need and an import

[10:03] <moritz> and need does the stubbing

[10:03] <moritz> and import the binding

[10:04] <jnthn> No

[10:04] <jnthn> need is purely loading the module.

[10:04] <jnthn> See line 758 in Grammar.pm.

[10:04] <moritz> ok

[10:04] <jnthn> It calls $*W.load_module - this does the loading of the module and triggers GLOBAL merging.

[10:04] <jnthn> Then it calls do_import

[10:04] <jnthn> Which gets passed the arglist

[10:05] <jnthn> That in turn calls $*W.import

[10:05] <jnthn> The import method in world stubs and binds.

[10:05] <jnthn> That is, all the binding is done right away at compile time.

[10:05] <moritz> allright

[10:05] *** sivoais left
[10:05] <jnthn> Thus why...

[10:05] <jnthn> r: use Test; BEGIN { plan 42 }

[10:05] <p6eval> rakudo 2d2584: OUTPUT«1..42␤# Looks like you planned 42 tests, but ran 0␤»

[10:05] <arnsholt> r: role W[$s] { method q { say $s; nextsame } }; ([but] class {}, <hacker Perl6 another Just>.map: W[*]).q

[10:05] <jnthn> Works.

[10:05] <p6eval> rakudo 2d2584: OUTPUT«Method 'count' not found for invocant of class 'W'␤  in <anon> at src/gen/Metamodel.pm:1176␤  in method reify at src/gen/CORE.setting:4753␤  in method reify at src/gen/CORE.setting:4678␤  in method reify at src/gen/CORE.setting:4678␤  in method gimme at src/gen/COR…

[10:05] *** eoh left
[10:06] <moritz> arnsholt: * doesn't autocurry inside a postcircumfix

[10:06] <jnthn> arnsholt: That won't...what moritz said

[10:06] <arnsholt> Oh, right. Dang =)

[10:07] <jnthn> r: role W[$s] { method q { say $s; nextsame } }; ([but] class {}, <hacker Perl6 another Just>.map: {W[$_]}).q

[10:07] <p6eval> rakudo 2d2584: OUTPUT«Just␤another␤Perl6␤hacker␤»

[10:07] <moritz> jnthn: so if I want to implement   import SomeClass;  that would just be a call to do_import?

[10:07] <arnsholt> There we go. Thanks =)

[10:07] <moritz> people sometimes want to write   class A { sub f is export {... } }; import A; f()

[10:08] <arnsholt> It's still a bit too long for a sigline though

[10:08] <jnthn> moritz: That's where things start getting murkier. The "is export" trait is also meant to install things in the export table of all pakcages we're nested in, finally cascading up to the top level UNIT::EXPORT

[10:08] *** eviltwin_b joined
[10:08] *** geekosaur left
[10:08] <jnthn> moritz: EXPORT_SYMBOL does not do that yet.

[10:09] <moritz> jnthn: is there a convenient way to walk the outer chain of a package?

[10:09] <arnsholt> r: role W[$s] { method q { say $s; nextsame } }; ([but] class {}, W[$_] for <hacker Perl6 another Just>).q

[10:09] <p6eval> rakudo 2d2584: OUTPUT«Method 'q' not found for invocant of class 'List'␤  in block <anon> at /tmp/V6zOZ1ONNe:1␤␤»

[10:11] <jnthn> moritz: Not at the moment, but it should be easy to create/maintain one.

[10:11] *** Guest96768 left
[10:11] <moritz> jnthn: allright. Now I have stuff to think about and hack on :-)

[10:11] <jnthn> moritz: Just push onto it pkg_create_mo and pop from it in pkg_compose, in World. :)

[10:12] <jnthn> Yay :)

[10:14] <jnthn> Oooh, pmichaud++ fixed a bug while I was sleeping too :)

[10:16] *** geekosaur joined
[10:19] *** eviltwin_b left
[10:19] *** am0c left
[10:21] <moritz> does $*W.add_object adds it to the list of objects to be serialized?

[10:27] *** plobsing joined
[10:27] <moritz> r: use Test; use Test;

[10:27] <p6eval> rakudo 2d2584: OUTPUT«===SORRY!===␤Cannot import symbol '&plan', since it already exists in the lexpad␤»

[10:28] <moritz> r: use Test; say &ok.package.^name

[10:28] <p6eval> rakudo 2d2584: OUTPUT«Test␤»

[10:30] <sjn> that message should read "Cannot import symbol '&plan' from package 'Test', ...(etc)"

[10:31] <moritz> sjn: that's what I'm trying to do :-)

[10:31] <sjn> awesome \o/

[10:34] *** stepnem left
[10:34] * jnthn suspects an extra arg to $*W.import(...) may be the best way

[10:35] <jnthn> Since the error most usefully will have what the user wrote in their use/import statement

[10:35] <jnthn> &ok.package.^name approaches would lead to a less useful error in the case of, say, re-exporting.

[10:35] <moritz> right

[10:36] <sjn> what's $*W, btw?

[10:37] *** geekosaur left
[10:37] *** eviltwin_b joined
[10:37] <moritz> the World, ie the place where all the declarations live

[10:37] <sjn> sounds scary

[10:37] <sjn> and big

[10:38] <jnthn> sjn: Grammar: the syntax. Actions: the execution/semantics. World: the declarations.

[10:39] <jnthn> It's just separation of concerns :)

[10:40] <moritz> sjn: it's scary and big, but letting all that stuff floating around without abstraction would be much more scary and big :-)

[10:41] <jnthn> Yes. We've already tried that. :)

[10:44] <estrai> how can one access $*W? I tried this C<< perl6 -e '$*W.perl.say' >> and it said "Dynamic variable \$*W not found"

[10:45] <tadzik> it's in the compiler itself, not a program being ran

[10:48] <jnthn> Right. Programs aren't meant to access $*W. It's a compiler implementation detail.

[10:48] <jnthn> (Though a quite important one to know about if you're going to work on Rakudo.)

[10:51] *** Veeru joined
[10:52] *** Veeru left
[10:57] *** sreejit left
[11:02] <fglock> mucker: I can reproduce the blockoid error now; I don't think it will work in rakudo though, because of the "Redeclaration of symbol" errors (perlito depends on open classes to work)

[11:02] <fglock> the would take quite some time to rewrite

[11:02] <mucker> ok :)

[11:03] <mucker> glad to help out if its simple enough

[11:03] *** JimmyZ joined
[11:04] *** geekosaur joined
[11:04] *** sisar joined
[11:04] *** brrt left
[11:05] *** Guest50704 left
[11:05] <jnthn> r: class Foo { }; augment class Foo { }

[11:05] <p6eval> rakudo 2d2584: OUTPUT«===SORRY!===␤augment not allowed without 'use MONKEY_TYPING'␤at /tmp/d4edpnkZir:1␤»

[11:05] <jnthn> r: use MONKEY_TYPING; class Foo { }; augment class Foo { }

[11:05] <p6eval> rakudo 2d2584:  ( no output )

[11:06] <jnthn> fglock: Rakudo supports open classes like ^

[11:07] <sisar> tadzik++

[11:07] <phenny> sisar: 07:37Z <tadzik> tell sisar d00a058586 should fix the warnings, let me know if everything's allright

[11:07] <phenny> sisar: 07:38Z <tadzik> tell sisar I'm all for versioning panda, but I wanted to do some bin/panda refactors first

[11:07] *** eviltwin_b left
[11:08] *** geekosaur left
[11:12] *** eoh| left
[11:12] *** eoh joined
[11:14] <JimmyZ> is there a way to forbid augment class?

[11:14] <fglock> r:  method emit_perl6 { @.or_list.>>emit_perl6() }

[11:14] <p6eval> rakudo 2d2584: OUTPUT«===SORRY!===␤Unable to parse blockoid, couldn't find final '}' at line 2␤»

[11:14] <fglock> this is the blockoid error

[11:15] <jnthn> JimmyZ: It's forbidden by default; you have to use the pragma to allow it.

[11:15] <jnthn> flussence: Did you mean @.or_list>>.emit_perl6() ?

[11:15] <jnthn> er, sorry

[11:15] <jnthn> fglock: ^^

[11:15] *** pernatiy joined
[11:15] <jnthn> r: method emit_perl6 { @.or_list>>.emit_perl6() }

[11:15] <p6eval> rakudo 2d2584: OUTPUT«Useless declaration of a has-scoped method in mainline␤»

[11:16] <sisar> tadzik, yup! No more warnings.

[11:16] <tadzik> \o/

[11:17] <sisar> tadzik, how do i remove a module ?

[11:17] <fglock> jnthn: I don't know which class will be loaded first; can I just "augment" a class before declaring?

[11:18] <sisar> tadzik: (using panda)

[11:18] <fglock> r: use MONKEY_TYPING; augment class Foo { }; augment class Foo { }

[11:18] <p6eval> rakudo 2d2584: OUTPUT«===SORRY!===␤You tried to agument class Foo, but it does not exist␤at /tmp/h27o_OCwam:1␤»

[11:18] <jnthn> fglock: Don't think so, however...

[11:19] <jnthn> r: use MONKEY_TYPING; class Foo { ... }; augment class Foo { }

[11:19] <p6eval> rakudo 2d2584:  ( no output )

[11:19] *** stepnem joined
[11:19] <jnthn> If you can stub all the classes with the ... syntax first, you can augment them beyond there.

[11:19] <fglock> ah, nice

[11:20] *** xenu joined
[11:20] *** xenu is now known as Guest29268

[11:23] <dalek> Perlito: 6650db6 | (Flavio S. Glock)++ | TODO-perlito6:

[11:23] <dalek> Perlito: Perlito6 - add TODO: rakudo fixes suggested by jnthn++

[11:23] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/6650db6d3e

[11:26] *** kaare__ joined
[11:26] *** tyatpi left
[11:27] *** geekosaur joined
[11:35] <tadzik> sisar: that's Not Yet Implemented :) But I do have plans for that

[11:35] *** Entonian left
[11:36] <tadzik> want to hack on it a bit? Shouldn't be too hard

[11:36] *** thelazydeveloper left
[11:36] *** thelazydeveloper joined
[11:38] *** Entonian joined
[11:38] *** ponbiki joined
[11:40] <timotimo> i'm looking to write a little tool that gives me an overview over git and hg repositories on my two computers as well as bitbucket and github. is there a module that helps me handle ssh in perl6 or do i have to do everything with "shell execution quotes" and the ssh commandline tool?

[11:41] *** geekosaur left
[11:41] *** eviltwin_b joined
[11:42] <moritz> I believe we have stuff like File::Find

[11:43] <tadzik> We don't have anything about ssh

[11:48] <timotimo> OK

[11:48] <timotimo> wondering if i should do it in python (which does have those modules that would be helpful) or in perl6 (for practice)

[11:49] <timotimo> in perl6 it would probably end up as a very glorified shell script :)

[11:50] *** geekosaur joined
[11:53] *** eviltwin_b left
[11:53] <tadzik> use NativeCall, write Net::SSH :)

[11:54] <JimmyZ> Net::expect

[11:56] *** lichtkind joined
[11:57] <dalek> rakudo/nom: d337e35 | moritz++ | src/Perl6/ (2 files):

[11:57] <dalek> rakudo/nom: carry around the name of the to-be-imported module, and use it in an error message

[11:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d337e35ac1

[11:58] *** sporous left
[11:59] <dalek> Perlito: f490f1a | (Flavio S. Glock)++ | / (21 files):

[11:59] <dalek> Perlito: Perlito6 - method hyper syntax use >>. instead of .>>

[11:59] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/f490f1ac30

[12:00] *** sporous joined
[12:01] *** skids left
[12:07] <colomon> tadzik: I'm running emmentaler on niecza ...

[12:07] <tadzik> colomon: \o/

[12:07] <colomon> tadzik: mind you, that's literal, no idea how well it works yet

[12:08] <colomon> but it's busy trying

[12:08] <moritz> colomon: want to conspire with me to get DBIish backends working on niecza?

[12:08] <colomon> ooooo

[12:09] *** geekosaur left
[12:09] *** eviltwin_b joined
[12:09] <colomon> moritz: would love love love love to, but my tuits may be a bit scarce for a few days....

[12:09] <moritz> colomon: I primarily need (1) some pointers on how to install modules on mono

[12:10] <moritz> C# based modules, that is

[12:10] <moritz> (2) do a niecza-specific search paths

[12:10] <moritz> (3) some pointers on how to marshall arguments from/to .NET land

[12:10] <colomon> moritz: ah, seems to me the actual issues may be a bit meta

[12:10] <moritz> colomon: I'm fine with doing most of the work myself

[12:11] *** mucker left
[12:12] <colomon> moritz: that is to say, 1) there's no "official" way to run modules in niecza 2) there's no official way to install both rakudo and niecza modules on the same system

[12:13] <colomon> My current method is to use ~/.niecza for niecza modules

[12:13] <moritz> colomon: it's not just about installing. Something like a NIECZALIB env variable would already help

[12:13] <colomon> and support it "manually" by adding -I/Users/colomon/.niecza/lib to my niecza command line

[12:14] <colomon> yes, that's true.

[12:14] <colomon> hmmm

[12:14] *** jaldhar left
[12:15] <moritz> I've recently added RAKUDOLIB to rakudo for just that purpose

[12:16] <colomon> moritz++

[12:16] *** BlueT_ left
[12:16] *** BlueT_ joined
[12:16] <colomon> moritz: gotta go nom breakfast, but I'll take a peek at the niecza source when I get back

[12:18] *** geekosaur joined
[12:20] <moritz> colomon: but when I want to install like sqlite bindings for C#, how do I do that?

[12:20] *** eviltwin_b left
[12:25] <colomon> moritz: mono handles all that...I don't quite remember the details, but it was pretty straightforward

[12:26] <moritz> colomon: any keywords I can search for?

[12:26] <moritz> colomon: "mono install package" just shows me lots of installation instructions for mono

[12:26] <moritz> same with other phrases I tried :/

[12:27] <colomon> "global assembly cache"

[12:27] <colomon> http://www.mono-project.com/Assemblies_and_the_GAC

[12:28] *** JimmyZ left
[12:28] *** JimmyZ joined
[12:29] <colomon> though system.data.sqlite recommends not using it, for reasons I do not understand

[12:29] *** MContagious left
[12:30] <moritz> colomon: but does that mean I first have to install stuff manually, and then run gacutil to install it?

[12:30] <moritz> or is there some 'install it from monoPAN right away' command?

[12:30] <colomon> there's no monoPAN so far as I know

[12:31] <colomon> so yeah, that's how I've done it -- build and then install using gacutil

[12:33] <colomon> hmmm, there's other suggestions on that page

[12:34] * colomon is very close to a complete mono / .NET neophyte

[12:34] *** spider-mario joined
[12:36] *** thelazydeveloper left
[12:36] <moritz> meh, system.data.sqlite comes with a .bat file for building :/

[12:36] <colomon> tadzik: apparently niecza works better than rakudo!  http://www.harmonyware.com/perl/emmentaler.html  ;)

[12:37] <moritz> :-)

[12:37] *** ponbiki left
[12:38] <moritz> oh, it seems that mono already comes with Mono.Data.Sqlite

[12:40] <colomon> mono++

[12:40] <tadzik> colomon: yay, awesome! :)

[12:40] <colomon> that should provide a good start for you, I hope

[12:40] <jnthn> NativeCall works on Niecza? :)

[12:40] <colomon> jnthn: Everything works on Niecza!

[12:41] <colomon> including modules that don't work period!

[12:41] <jnthn> Wow!

[12:41] <colomon> it's no doubt powered by nanotechnology! 

[12:41] <colomon> or s-circuits!

[12:42] <colomon> or even transistors!

[12:42] *** thelazydeveloper joined
[12:42] <tadzik> *gasp*

[12:44] <moritz> rod logic!

[12:46] <[Coke]> here's a perl 6 irc bot project: write a bot that talks to the people who drop in to say "is perl6 production ready yet?"

[12:47] <moritz> [Coke]++ # nice idea

[12:47] <moritz> ooh, aloha is silent!

[12:48] <[Coke]> "What do you mean, $ready?"

[12:48] <[Coke]> moritz: bacek++ fixed her yesterday.

[12:48] <[Coke]> more like, "spayed"

[12:48] <moritz> \o/

[12:49] <flussence> .oO( spayesian filtering )

[12:50] *** spaceships joined
[12:53] <colomon> tadzik: any chance you can post a really short projects.json for testing purposes?  I'm trying to edit down the one I have, but it's giving my editor fits....

[12:58] <tadzik> colomon: not right now, I'm at $work. But you should be able to 'json_pp < projects.json' and then remove everything but Acme::Meow, or such

[12:58] <colomon> tadzik: no worries, I just figured something out

[12:58] <tadzik> okay

[12:58] <colomon> tadzik++

[13:01] *** PacoAir joined
[13:03] <colomon> oh!

[13:03] <colomon> my problem is that you're depending on Panda.stage, which didn't exist in the version of Panda I forked to make panda-niecza

[13:04] <tadzik> ha

[13:04] <colomon> no wonder the results are so good!

[13:04] <tadzik> we really shouldn't have separate panda-niecza

[13:04] <tadzik> once you merge the upstream, could you paste somewhere the diff from my tree to yours?

[13:06] <colomon> sure, but we'll still have all the organizational issues to figure out.

[13:06] * colomon has no clear idea how to merge the upstream...

[13:07] * colomon just found the instructions on github.

[13:07] <tadzik> hm, neither have I :)

[13:07] <colomon> http://help.github.com/fork-a-repo/

[13:07] <tadzik> . o O ( panda upstream )

[13:08] <gfldex> is there an emacs mode that actually works?

[13:08] <moritz> if no emacs mode would work, people wouldn't use emacs, no?

[13:09] <gfldex> i'm quite sure there are plenty of folk that have modes and use emacs

[13:09] <jnthn> I'm guessing gfldex's question has an implicit "well for Perl 6" at the end. ;)

[13:09] <colomon> tadzik: conflicts everywhere!

[13:09] <gfldex> i have the one from pugs repro and a simple "where 0 < * < 12" breakes it

[13:11] <tadzik> colomon: http://ragefac.es/43

[13:11] <tadzik> gfldex: did you try the one listed on perl6.org?

[13:13] <gfldex> tadzik: i just did, same result

[13:13] <pmichaud_> good morning, #perl6

[13:13] <moritz> good am, pm_

[13:14] <tadzik> good afternoon, pmichaud 

[13:14] <pmichaud> "stable" / documentation ---   I wonder if it's worthwhile for us to come up with a tool/documentation set that simply copies the parts of the synopsis that Rakudo implements.

[13:14] *** geekosaur left
[13:14] <pmichaud> then when someone says "where's the documentation for Rakudo", we point them to that

[13:15] <pmichaud> when we add a feature, we incorporate that section of the synopsis into the "Rakudo set"

[13:15] *** geekosaur joined
[13:15] <jnthn> hi, pmichaud o/

[13:15] <jnthn> Hmm. Not a bad idea. :)

[13:15] <pmichaud> if we want to know what pieces aren't implemented, we do a diff between the rakudo set and the synopses

[13:15] * jnthn wonders how much effort it'd be to keep it sync'd up :)

[13:15] <moritz> I'm kinda skeptical

[13:15] <[Coke]> make the tool like roast where multiple implementations can mark something as "WFM"

[13:15] <moritz> 1) maintenance effort

[13:16] <pmichaud> if we incorporate sections by reference as opposed to actually copying text, that could work

[13:16] <moritz> 2) you often need parts of the specs that are poorly implemented to even understand the other stuff

[13:16] <pmichaud> I'm not sure that #2 is much of an issue; perhaps I'm wrong there though.

[13:17] <pmichaud> and, of course, we can always say "refer to the master synopses for the full detail set"

[13:17] <moritz> and 3) the spec isn't meant as user docs

[13:17] <pmurias> there used to be a version of the spec with links to test results

[13:17] <pmichaud> the spec isn't meant as user docs, but it's what we have right now.

[13:17] *** geekosaur left
[13:17] *** eviltwin_b joined
[13:17] <pmichaud> I don't know when "user docs" will arrive, nor of a plan to deliver them (beyond the "Using Perl 6" book which seems stalled)

[13:18] <pmichaud> I mean, I have a fair bit of skepticism about this approach also, but it might be worth a shot to see what happens

[13:19] <pmichaud> it might help out in quite a few user-community issues

[13:19] <pmichaud> and if the tool is built correctly, it'd be possible for niecza++ and other future p6 implementations to use as well

[13:19] <pmichaud> so yes, similar to roast is done  (Coke++)

[13:20] <pmichaud> *to how

[13:21] <tadzik> or maybe we could use the feature matrix instead of roast

[13:22] <pmichaud> the feature matrix is good in that it gives a high-level picture of what is done and isn't done

[13:22] <pmichaud> but somewhere we need a more detailed description that says "this is exactly what version X of Rakudo supports"

[13:23] <pmichaud> In looking at the synopsis text, I think I might have an idea of how to do a first-pass of what I'm thinking of

[13:23] <pmichaud> maybe I'll prototype a tool a bit later

[13:23] <pmichaud> might even do it in p6 :-)

[13:24] <pmurias> pmichaud: do you remember the smartlinks tool (which seems to have bitrotted) that used to show which parts of the synopsis pass their respective tests

[13:25] <pmichaud> pmurias: yes

[13:25] <moritz> pmurias: it seems to be fine, because it is what generates the HTML version of perlcabal.org/syn/

[13:25] <moritz> pmurias: it's just not connected to a smoker right now

[13:25] <pmichaud> pmurias: but that tool seems to go the opposite direction of what I'm thinking

[13:26] <pmichaud> there probably is a way to unify   synopses + roast tests + implementation feature matrix    into a single system, but I don't see the path for that yet.

[13:27] *** geekosaur joined
[13:28] <arnsholt> The first two at least might be amenable to some kind of literate-ish approach, I suppose

[13:28] <arnsholt> This is the spec, and these are the tests for this bit of spec

[13:29] <pmichaud> arnsholt: thus far it's been really difficult to organize roast directly according to the spec (at least, to any greater degree than it is organized now)

[13:30] *** eviltwin_b left
[13:30] * JimmyZ thinks the speed still is a block

[13:30] <moritz> jnthn: I don't think anybody disagrees with that

[13:30] <moritz> erm, meant JimmyZ 

[13:31] <moritz> sorry, badtab

[13:31] <pmichaud> tab--

[13:31] <colomon> tadzik: okay, this merge is sooooo not happening today

[13:31] <tadzik> :)

[13:31] *** geekosaur left
[13:31] *** eviltwin_b joined
[13:34] <[Coke]> # 05/03/2012 - rakudo++ ; niecza (94.32%); pugs (42.23%)

[13:34] <arnsholt> pmichaud: Yeah, that's the hard part

[13:34] <[Coke]> no real change in the past few days

[13:35] * [Coke] updates that so it shows how many the winner is passing...

[13:35] <[Coke]> # 05/04/2012 - rakudo++ (21610) ; niecza (94.32%); pugs (42.23%)

[13:35] <pmichaud> [Coke]: are those stats logged somewhere?

[13:36] <pmichaud> ooc?

[13:37] <[Coke]> pmichaud: https://gist.github.com/1476841#file_perl6_pass_rates

[13:37] <sjn> pmichaud: reimbursement should arrive soon, btw :)

[13:37] <[Coke]> that gist is setup to run daily at noonish my time.

[13:37] <sjn> pmichaud: sent you the funds yesterday

[13:37] *** JimmyZ_ joined
[13:38] <sjn> tadzik: still need the receipts from you

[13:38] <sjn> (and fsergot)

[13:38] <pmichaud> sjn: receipts were mailed out yesterday morning

[13:38] <pmichaud> sjn: thanks much for everything

[13:39] <tadzik> sjn: right

[13:39] *** JimmyZ left
[13:39] *** kaleem left
[13:39] *** JimmyZ_ is now known as JimmyZ

[13:39] <tadzik> sjn: still haven't figured how to get non-hungarian wizzair invoice, will take a closer look today

[13:39] <PerlJam> greetings #perl6!

[13:40] *** kaleem joined
[13:41] *** kaleem left
[13:41] <huf> tadzik: why hungarian?!

[13:41] <tadzik> huf: hungarian airline

[13:42] <PerlJam> tadzik: google translate  :)

[13:43] <jnthn> .oO( Hungarian notation )

[13:43] <huf> wizzair is hungarian?

[13:43] <huf> hoo

[13:43] <tadzik> aye

[13:43] *** bluescreen10 joined
[13:44] <huf> well, i'm not surprised then :) it's probably as bad as the country :)

[13:45] *** sivoais joined
[13:45] <daxim> don't be a jerk

[13:45] *** geekosaur joined
[13:46] <huf> what, i live here, i *know* what it's like :()

[13:48] *** eviltwin_b left
[13:51] *** geekosaur left
[13:51] *** eviltwin_b joined
[13:53] *** eviltwin_b is now known as geekosaur

[14:03] *** mikemol joined
[14:04] *** alester joined
[14:09] *** eviltwin_b joined
[14:09] *** geekosaur left
[14:10] *** eviltwin_b is now known as geekosaur

[14:17] *** benabik left
[14:19] *** eviltwin_b joined
[14:19] *** geekosaur left
[14:19] *** benabik joined
[14:20] *** eviltwin_b is now known as geekosaur

[14:24] *** tokuhirom joined
[14:26] *** thou joined
[14:27] *** plobsing left
[14:34] *** wtw left
[14:34] *** PacoAir left
[14:38] *** kresike left
[14:39] *** Guest29268 left
[14:40] *** lestrrat left
[14:40] *** lestrrat joined
[14:42] <dalek> tablets: 48da665 | (Herbert Breunung)++ | docs/appendix- (2 files):

[14:42] <dalek> tablets: backlink smartmatch table

[14:42] <dalek> tablets: review: https://github.com/perl6/tablets/commit/48da665a22

[14:44] *** xenu joined
[14:44] *** xenu is now known as Guest14743

[14:51] *** raiph joined
[14:53] *** kresike joined
[15:02] *** skids joined
[15:06] *** birdwindupbird left
[15:07] *** NamelessTee joined
[15:13] <dalek> roast: f9c119d | moritz++ | S14-roles/parameterized-type.t:

[15:13] <dalek> roast: RT #101426, roles as default argument to role parameters

[15:13] <dalek> roast: review: https://github.com/perl6/roast/commit/f9c119d16a

[15:13] <moritz> that was a typical masakbug :-)

[15:14] *** tokuhirom left
[15:17] <masak> hey hey hey

[15:18] <masak> yes, that one looks like mine :P

[15:19] * masak admits to being fond of nesting things

[15:19] *** estrabd joined
[15:20] <jnthn> Yo dawg, I heard you like roles...

[15:25] *** liuchong left
[15:26] *** plobsing joined
[15:31] *** pernatiy left
[15:33] *** kresike left
[15:36] *** pernatiy joined
[15:36] *** eviltwin_b joined
[15:36] *** geekosaur left
[15:36] *** eviltwin_b is now known as geekosaur

[15:39] *** pernatiy left
[15:40] *** pernatiy joined
[15:46] *** mspaulding joined
[15:47] *** mdupont joined
[15:51] *** Patterner left
[15:54] *** Psyche^ joined
[15:54] *** geekosaur left
[15:54] *** eviltwin_b joined
[15:55] *** eviltwin_b is now known as geekosaur

[15:57] *** JimmyZ left
[15:58] *** eviltwin_b joined
[15:58] <dalek> tablets: 8348dbd | raiph++ | README.md:

[15:58] <dalek> tablets: fix typo

[15:58] <dalek> tablets: review: https://github.com/perl6/tablets/commit/8348dbd4e2

[15:58] <dalek> tablets: 02da222 | (It's secret to everybody)++ | README.md:

[15:58] <dalek> tablets: Merge pull request #4 from raiph/master

[15:58] <dalek> tablets: 

[15:58] <dalek> tablets: fix typo

[15:58] <dalek> tablets: review: https://github.com/perl6/tablets/commit/02da222e55

[15:58] *** geekosaur left
[15:58] *** eviltwin_b is now known as geekosaur

[16:01] *** havenn joined
[16:02] <dalek> tablets: 157eadf | (Herbert Breunung)++ | docs/appendix- (3 files):

[16:02] <dalek> tablets: fixed formating in G and links context ops

[16:02] <dalek> tablets: review: https://github.com/perl6/tablets/commit/157eadf799

[16:02] <dalek> tablets: f13437e | (Herbert Breunung)++ | README.md:

[16:02] <dalek> tablets: Merge branch 'master' of github.com:perl6/tablets

[16:02] <dalek> tablets: review: https://github.com/perl6/tablets/commit/f13437e5de

[16:06] *** geekosaur left
[16:08] *** geekosaur joined
[16:11] <dalek> tablets: 4aa68fb | (Herbert Breunung)++ | docs/appendix-b-grouped.txt:

[16:11] <dalek> tablets: harmonize Operator Associativity table with tablets syntax rules

[16:11] <dalek> tablets: review: https://github.com/perl6/tablets/commit/4aa68fb608

[16:18] *** Vlavv` joined
[16:19] *** Vlavv_ left
[16:27] <dalek> roast: 73407b7 | moritz++ | S06-multi/proto.t:

[16:27] <dalek> roast: RT #111454, our proto visible from the outside

[16:27] <dalek> roast: review: https://github.com/perl6/roast/commit/73407b7120

[16:27] *** fhelmberger left
[16:29] <moritz> wow, the spec is pretty silent on Foo:: being the stash of Foo

[16:29] <masak> yes.

[16:29] <moritz> ack only finds two instances of \w::\s

[16:29] <moritz> and both refer to built-in ones (COMPILING:: and CALLER::)

[16:31] <jnthn> Does it not talk about Foo::<$x> and the line?

[16:31] <jnthn> *like

[16:31] <jnthn> ?

[16:31] <jnthn> That pretty much implies it.

[16:31] <moritz> well, it could be that Foo::<..> is a special form

[16:31] <jnthn> True.

[16:32] <jnthn> But it isn't, per STD, which is semi-spec. :)

[16:32] *** Guest14743 left
[16:32] *** Psyche^ is now known as Patterner

[16:32] <TimToady> S02:2895

[16:32] <TimToady> and scanning for \w::\s when most code is in C<>

[16:33] <TimToady> doesn't work too good

[16:34] *** daxim left
[16:34] *** fglock_ joined
[16:39] *** geekosaur left
[16:42] *** pernatiy left
[16:42] <dalek> roast: d70ee4c | moritz++ | S02-packages/package-lookup.t:

[16:42] <dalek> roast: explicit tests for Package:: lookup

[16:42] <dalek> roast: review: https://github.com/perl6/roast/commit/d70ee4c3b9

[16:43] <dalek> rakudo/nom: 637197e | moritz++ | t/spectest.data:

[16:43] <dalek> rakudo/nom: run new test file

[16:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/637197eacb

[16:45] *** adu joined
[16:46] <dalek> rakudo/nom: ef715f0 | moritz++ | t/spectest.data:

[16:46] <dalek> rakudo/nom: [t/spectest.data] bring back in asciibetical order

[16:46] <dalek> rakudo/nom: 

[16:46] <dalek> rakudo/nom: also delete reference to outdated S07 test

[16:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ef715f03ce

[16:48] *** PacoAir joined
[16:51] <dalek> specs: c964fd8 | moritz++ | S02-bits.pod:

[16:51] <dalek> specs: [S02] use a better example for process globals

[16:51] <dalek> specs: 

[16:51] <dalek> specs: %*PID is not mentioned or explained anywhere else

[16:51] <dalek> specs: review: https://github.com/perl6/specs/commit/c964fd8d8d

[16:54] *** geekosaur joined
[16:56] *** wooden left
[16:58] *** geekosaur left
[16:58] *** eviltwin_b joined
[16:59] *** eviltwin_b is now known as geekosaur

[17:01] *** eviltwin_b joined
[17:01] *** geekosaur left
[17:02] *** eviltwin_b is now known as geekosaur

[17:08] <lichtkind> moritz: are you sure you last spec commit wasnt a typo?

[17:08] <phenny> lichtkind: 03:52Z <sisar> tell lichtkind ah, thanks for explaining that.

[17:08] *** xenu joined
[17:08] *** xenu is now known as Guest55778

[17:10] *** Chillance joined
[17:10] <moritz> lichtkind: which part of it?

[17:11] <moritz> oh, it already uses $*UID above

[17:11] <moritz> lichtkind++

[17:12] <dalek> specs: b57a05b | moritz++ | S02-bits.pod:

[17:12] <dalek> specs: [S02] do not use the same variable twice as example, moritz-- lichtkind++

[17:12] <dalek> specs: review: https://github.com/perl6/specs/commit/b57a05b0e9

[17:17] *** eviltwin_b joined
[17:17] *** geekosaur left
[17:18] *** eviltwin_b is now known as geekosaur

[17:20] *** noam left
[17:20] *** noam joined
[17:21] *** noam left
[17:21] *** noam joined
[17:23] *** geekosaur left
[17:23] <lichtkind> moritz: also thought about that pull request on specs but im not sure what to make of it

[17:24] *** orphu joined
[17:25] *** adu left
[17:26] * moritz neither

[17:27] *** noam left
[17:27] <moritz> r: say ::A.new; class A { method Str { 'Hello World' } };

[17:27] <p6eval> rakudo ef715f: OUTPUT«===SORRY!===␤Could not locate compile-time value for symbol A␤»

[17:27] *** plobsing left
[17:27] *** noam joined
[17:27] <moritz> it seems that rakudo doesn't support ::Foo to refer to undeclared typenames at all

[17:28] *** geekosaur joined
[17:30] <lichtkind> moritz: yeah but thats a bug request not pull request :)

[17:31] <moritz> well, I don't even know what the desired behavior is, so I don't know if that's a bug

[17:33] <dalek> tablets: eb3b5fb | (Herbert Breunung)++ | docs/appendix-b-grouped.txt:

[17:33] <dalek> tablets: double linkfix in Contextualizers op table

[17:33] <dalek> tablets: review: https://github.com/perl6/tablets/commit/eb3b5fb4d5

[17:37] *** birdwindupbird joined
[17:38] <jnthn> r: say ::('A').new; class A { method Str { 'Hello World' } };

[17:38] <p6eval> rakudo ef715f: OUTPUT«A.new()␤»

[17:38] <jnthn> Can always be explicit. :)

[17:38] <jnthn> r: say ::<A>.new; class A { method Str { 'Hello World' } };

[17:38] <p6eval> rakudo ef715f: OUTPUT«A.new()␤»

[17:38] <jnthn> Or like that.

[17:39] * jnthn is happy enough with ::A meaning "introduce a type variable" in contexts where it makes sense to do so, and not meaning something in others, fwiw.

[17:40] <masak> +1

[17:40] *** Entonian left
[17:40] <jnthn> If we can settle on that, we can even give the above an awesomer error saying just that. :)

[17:43] *** geekosaur left
[17:43] *** Entonian joined
[17:47] <dalek> roast: d395085 | moritz++ | S04- (2 files):

[17:47] <dalek> roast: rakudo unfudges

[17:47] <dalek> roast: review: https://github.com/perl6/roast/commit/d395085565

[17:48] <moritz> autounfudge++

[17:52] *** geekosaur joined
[17:54] <dalek> tablets: fa87451 | (Herbert Breunung)++ | docs/report.pl:

[17:54] <dalek> tablets: report also heading number

[17:54] <dalek> tablets: review: https://github.com/perl6/tablets/commit/fa87451059

[17:55] * colomon could really use given / when in his current bit of C++ code

[17:58] <dalek> roast: a65f9a2 | moritz++ | S02-names/caller.t:

[17:58] <dalek> roast: fudge caller.t for rakudo

[17:58] <dalek> roast: review: https://github.com/perl6/roast/commit/a65f9a2763

[17:58] <dalek> rakudo/nom: bc520af | moritz++ | t/spectest.data:

[17:58] <dalek> rakudo/nom: run caller.t test

[17:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bc520af168

[18:00] *** geekosaur left
[18:00] *** eviltwin_b joined
[18:01] *** eviltwin_b is now known as geekosaur

[18:03] *** Entonian left
[18:03] <moritz> r: say 'f fo foo fooo' ~~  m:2nd/fo+/

[18:03] <p6eval> rakudo ef715f: OUTPUT«=> <foo>␤␤»

[18:03] <moritz> r: say 'f fo foo fooo' ~~  m:2th/fo+/

[18:03] <p6eval> rakudo ef715f: OUTPUT«=> <fo>␤␤»

[18:03] *** Celelibi joined
[18:04] <Celelibi> hi

[18:04] <jnthn> r: my sub modify { $CALLER::foo++ }; my $foo is dynamic = 42; modify; say $foo

[18:04] <p6eval> rakudo ef715f: OUTPUT«43␤»

[18:04] <moritz> hello Celelibi

[18:04] <jnthn> Thought so...

[18:04] <Celelibi> Is there an almost complete implementation of perl6?

[18:04] * jnthn takes a closer look at why #?rakudo todo 'CALLER + rw'

[18:04] <moritz> Celelibi: there are two, for some values of "almost"

[18:05] <moritz> Celelibi: both rakudo and niecza are nice to use at this point

[18:06] <Celelibi> humhum... what is paroot?

[18:06] <Celelibi> parrot*

[18:06] <moritz> Celelibi: a virtual machine, on which rakudo runs

[18:06] <Celelibi> ok

[18:07] <masak> hi, Celelibi 

[18:07] <Celelibi> hi masak

[18:07] <Celelibi> BTW, perl6 looks pretty amazing. :)

[18:07] <dalek> tablets: ee78585 | (Herbert Breunung)++ | docs/report.pl:

[18:07] <dalek> tablets: use smarter formating

[18:07] <dalek> tablets: review: https://github.com/perl6/tablets/commit/ee7858509b

[18:08] <moritz> Celelibi: glad you think so. I agree :-)

[18:08] <jnthn> moritz: lives_ok { modify() }, ...

[18:08] <moritz> jnthn: eeks.

[18:08] <jnthn> moritz: That ain't gonna work because now the CALLER is that closure, not the place where my $foo is declared.

[18:08] <masak> Celelibi: Perl 6 is amazing. most people who come in here are amazed. :)

[18:08] <moritz> jnthn: right

[18:08] <masak> Celelibi: can I demo some things to you?

[18:08] <Celelibi> :)

[18:09] <Celelibi> I have a question before.

[18:09] <masak> s/can/may # before jnthn++ corrects me :P

[18:09] <masak> Celelibi: ask it.

[18:09] <jnthn> rakudo: say "I can AND may be demonstrated"

[18:09] <p6eval> rakudo ef715f: OUTPUT«I can AND may be demonstrated␤»

[18:09] <Celelibi> are the operators used with the [] reduce meta-operator forced to be endomorphisms?

[18:09] <masak> nope.

[18:10] <masak> the ones used with the = meta-operator are, though.

[18:10] <masak> for some value of "endo" and "morphism" :P

[18:10] <masak> Celelibi: are you a Haskellite?

[18:10] <Celelibi> nop.

[18:10] <moritz> r: say 'f fo foo fooo' ~~  m:2rd/fo+/

[18:10] <p6eval> rakudo ef715f: OUTPUT«=> <foo>␤␤»

[18:11] <jnthn> moritz: I'm dinnering now, feel free to fix, or I can diddle it later :)

[18:11] <Celelibi> The only functionnal language I used is O'Caml.

[18:11] *** eviltwin_b joined
[18:11] *** geekosaur left
[18:11] <masak> Celelibi: oh, that makes sense too.

[18:11] <Celelibi> (and the functionnal features of perl5)

[18:11] *** eviltwin_b is now known as geekosaur

[18:11] <masak> I was wondering why someone would think of endomorphisms when hearing about meta-ops.

[18:12] <Celelibi> Just the math word that describe best what I have in mind. :)

[18:12] *** geekosaur left
[18:13] <moritz> r: say 'f fo foo foo' ~~ m:3rd/ <ident> /

[18:13] <p6eval> rakudo bc520a: OUTPUT«=> <foo>␤ ident => <foo>␤␤»

[18:13] <Celelibi> If I want (for example) to make a tree out of a list (using some AVL or so) can I use the meta-operator [] ?

[18:13] <dalek> tablets: 7952320 | (Herbert Breunung)++ | docs/appendix-b-grouped.txt:

[18:13] <dalek> tablets: Contextualizers are prefix, not infix

[18:13] <dalek> tablets: review: https://github.com/perl6/tablets/commit/7952320669

[18:14] <moritz> r: say ([=>] 1, 2, 3, 4 ).perl

[18:14] <p6eval> rakudo bc520a: OUTPUT«1 => 2 => 3 => 4␤»

[18:14] <moritz> meh, Pair .perl fail

[18:14] *** geekosaur joined
[18:14] *** estrabd left
[18:14] <masak> moritz: istn't that right, though?

[18:15] <moritz> r: say ((a => 1) => 2).perl

[18:15] <p6eval> rakudo bc520a: OUTPUT«"a" => 1 => 2␤»

[18:15] <masak> moritz: I mean, that's what you'd expect if [] honors direction of associativity.

[18:15] <moritz> r: say (a => (1 => 2)).perl

[18:15] <p6eval> rakudo bc520a: OUTPUT«"a" => 1 => 2␤»

[18:15] <masak> oh, that is fail indeed.

[18:15] <moritz> masak: .perl doesn't know anything about associativity

[18:15] <masak> moritz: rightright, but that doesn't mean that the first output was fail.

[18:15] *** adu joined
[18:16] <masak> because if all reduce does (conceptually) is replace the commas with => ops, that's not a bad representation of the result.

[18:18] *** eoh left
[18:18] *** eoh joined
[18:18] <Celelibi> what does the => operator here ?

[18:18] *** eoh left
[18:18] <moritz> Celelibi: construct a Pair

[18:18] <masak> Celelibi: it's a Pair construc... what moritz++ said.

[18:19] <dalek> roast: 672ef55 | moritz++ | S05-modifier/counted.t:

[18:19] <dalek> roast: remove lots of wrong :x() tests

[18:19] <dalek> roast: review: https://github.com/perl6/roast/commit/672ef55996

[18:19] *** mtk left
[18:20] <colomon> moritz++

[18:20] <moritz> those tests were just Oh So Wrong

[18:20] <masak> \o/

[18:20] <dalek> rakudo/nom: 8fff4e7 | moritz++ | t/spectest.data:

[18:20] <dalek> rakudo/nom: run counted.t test file

[18:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8fff4e7d65

[18:20] <Celelibi> All these bots lines are quite annoying...

[18:20] <tadzik> 'evening

[18:20] <moritz> they tested that :x(3) matched, but expected $/ to hold only one match

[18:21] <tadzik> Celelibi: they are also very helpful to developers. YOu are free to ignore them if you mind them :)

[18:21] <moritz> Celelibi: /ignore dalek   should help

[18:21] <colomon> n: say ([=>] 1, 2, 3, 4).perl

[18:21] <p6eval> niecza v17-2-gb8fcf85: OUTPUT«1 => 2 => 3 => 4␤»

[18:21] <masak> moritz: reading the first few ones. what was wrong about those?

[18:22] <masak> ok($data ~~ m:1th/fo+/, 'Match 1th');

[18:22] <colomon> n: say ([R=>] 1, 2, 3, 4).perl

[18:22] <p6eval> niecza v17-2-gb8fcf85: OUTPUT«4 => 3 => 2 => 1␤»

[18:22] <masak> looks kosher to me.

[18:22] <moritz> masak: there's no :th pair

[18:22] <moritz> masak: there's just :nth

[18:22] <masak> you mean, there's no :th pair *any more*?

[18:22] <masak> there certainly used to be one.

[18:23] <masak> :st :nd :rd and :th

[18:23] <moritz> oh wait

[18:23] <masak> and they all mapped back to :nth.

[18:23] <masak> when did that change?

[18:23] <moritz> moritz--

[18:23] <moritz> I just grepped for examples, and found none

[18:23] <masak> and if it did, can we remove the silly rule about :<digit>pair

[18:23] <moritz> second moritz-grep fail

[18:23] <masak> because that's the only reason it's there, for :2nd and its ilk.

[18:24] <masak> sounds like a revert is upcoming ;)

[18:24] <moritz> a parital one

[18:24] <moritz> the :x tests were still wrong

[18:24] <masak> aye.

[18:24] <masak> that's because no-one except pmichaud understands :x :P

[18:24] *** mtk joined
[18:24] <masak> I don't understand it, and I've re-implemented PGE from scratch once.

[18:25] <moritz> akshually I understand it, and I have implemented it in rakudo

[18:25] <masak> oh, good. then there's two of you ;)

[18:25] <moritz> want an explanation?

[18:26] <tadzik> seen sisar 

[18:26] <aloha> sisar was last seen in #perl6 7 hours 8 mins ago saying "tadzik: (using panda)".

[18:26] *** plobsing joined
[18:26] <sisar> tadzik, yes ?

[18:26] <tadzik> oh, I feared that "wanna hack?" scared you :P

[18:26] <tadzik> so, wanna hack on Panda?

[18:27] <sisar> yeah, actually i did look at the source code of panda.

[18:27] <masak> moritz: just tell me this, please: how does :x relate to :nth and :g ?

[18:27] <sisar> looked kinda understandable

[18:27] <tadzik> I have sort of a plan for uninstalling panda modules, which should be quite easy to bring to dayling

[18:27] <tadzik> s/ng/ght/

[18:28] <tadzik> I'm glad to hear that :)

[18:28] <moritz> masak: all of :x, :nth and :g make the regex engine search for more than one match

[18:28] <tadzik> so the first thing we need is to keep track of the files we install

[18:28] <sisar> ok, go on

[18:28] <masak> moritz: go on.

[18:28] <moritz> masak: both :nth and :x filter the matches afterwards, and possibly fail the whole thing

[18:28] <masak> oh!

[18:28] <tadzik> so I guess Installer.pm has to take care of a file with all the files it installs, and to what modules they belong

[18:29] <masak> so, what's :nth(2) :x(3) mean?

[18:29] <moritz> masak: a match that always fails

[18:29] <tadzik> I'm all for some dead-simple format here, something along Module::Name\nfile\nfile\n\nAnother::Module... and so on

[18:29] <masak> moritz: why?

[18:29] <moritz> masak: because the :nth(2) filter only leaves the second match, and then there can be no 3 matches

[18:29] <tadzik> once we know that, we can think about adding an uninstall method to Panda::Installer, which will remove files and the database entry

[18:30] <masak> moritz: so you're saying, :nth filers first, and then :x checks for multiplicity.

[18:30] <masak> filters*

[18:30] <moritz> masak: correct

[18:30] <tadzik> my dream, and the reason to have both 'installed' and 'installed-dep' in the .panda/state file is that we should be able to remove unnecessary dependencies after removing the module that pulled them in

[18:30] <moritz> masak: though :nths is lazy

[18:30] <masak> moritz: why is that behavior... oh.

[18:30] <tadzik> in a sortof mark and sweep manner, if you know what I mean

[18:31] <moritz> so   :nth(1, 3 ... *) :x(5)   can match, and stops when 5 filtered matches are found

[18:31] *** geekosaur left
[18:31] *** eviltwin_b joined
[18:31] <tadzik> a thing to keep in mind is that we probably want to skip updating the database if the modules are installed to some temporary location; imagine a debian packager who does panda install --destdir=/temporary/location

[18:31] <masak> moritz: this makes sense.

[18:31] *** eviltwin_b is now known as geekosaur

[18:31] <tadzik> sisar: does that make sense so far?

[18:32] <masak> moritz: and :g never disallows a match, right? only :x does?

[18:32] <masak> moritz: and I guess :nth can, too.

[18:32] *** ponbiki joined
[18:32] <moritz> masak: correct

[18:32] *** yohan joined
[18:32] <masak> moritz: does :x(*) mean :g?

[18:33] <sisar> tadzik: yeah i get it, but... i'm a bit tired today. I'll think about what you said, and ask you more questions tomorrow. Ok?

[18:33] <tadzik> sisar: sure

[18:33] <yohan> hi i heard on perl6 today, is it a better perl5? or a separate language for different uses?

[18:33] <moritz> masak: I think so. Not sure if we support :x(*)

[18:33] <tadzik> I'm going for a dogwalk right now, and will probably do some panda hacking later, but not related to module installation

[18:33] <sisar> tadzik: great. Tomorrow some panda hacking !

[18:33] <tadzik> \o/

[18:33] *** mtk left
[18:33] <masak> tadzik: dog walk? where are you? :)

[18:33] <sisar> good night #perl6

[18:34] * sisar zzz...

[18:34] <tadzik> masak: in Izabelin, near the forest :)

[18:34] <moritz> yohan: better for some uses, worse for others

[18:34] <tadzik> sisar: good knight. Dream of pandas :)

[18:34] <masak> tadzik: oh, just like I thought!

[18:34] <masak> tadzik: wave hello to Pando from me!

[18:34] <masak> er, Panda*

[18:34] *** mtk joined
[18:34] <tadzik> masak: I was actually considering getting a dog recently, a real one, not the toy I have now ;)

[18:34] <yohan> moritz: where should/shouldn't it be used?

[18:34] <sorear> good * #perl6

[18:34] * masak knows the name, just can't spell

[18:34] <tadzik> but I'm far to seldom in my flat to care about it properly

[18:34] <tadzik> hello sorear 

[18:35] <masak> sorear! \o/

[18:37] <colomon> o/

[18:37] <colomon> dogs++

[18:38] <moritz> yohan: sorry, have to leave for dinner; I hope somebody else answers you

[18:39] <yohan> moritz: oh sure enjoy your dinner

[18:40] <masak> yohan: let me try and assist you.

[18:41] <yohan> masak: that would be great

[18:41] <masak> yohan: we can't answer "yes, it's a better Perl 5", because that's not the political party line.

[18:42] <masak> and in fact, I wonder if that answer isn't giving the wrong impression anyway.

[18:42] <masak> Perl 6 isn't what you get if you take Perl 5 and make it better.

[18:42] <masak> Perl 6 is what you get if you take Perl 5, extract the Perl from the accidents, then purify it for 12 years, and think really hard about how to do things better.

[18:43] <masak> that said, I think Perl 5 is great language. I use it more or less every day.

[18:43] <yohan> masak: when do you usually use perl6?

[18:44] <masak> right now, in the first half of 2012, we tend to say this: learn, use, and love Perl 5. you'll never regret being good at it. but if you're an adventorous spirit with a curious heart and a tolerance for pain, do try Perl 6 out. we think it's great.

[18:44] <sorear> yohan: Perl 6 is our attempt to redo Perl in a less awkward way

[18:44] <masak> yohan: I usually use Perl 6 when I have plenty of time, don't mind hittin a few snags, and want to explore some ideas with my favorite syntax and semantics.

[18:44] <masak> hitting*

[18:45] <yohan> sorear: do you find perl5 awkward? 

[18:45] <masak> some parts of it undoubtedly are.

[18:45] <masak> note that that doesn't make Perl 5 useless by any means.

[18:45] <masak> just less-than-perfect sometimes. :)

[18:46] <masak> Perl 6 is less of "Perl 5 plus one" and more of "Perl, again, in new ways".

[18:46] <spider-mario> and it’s not comparable with python 2 vs. 3

[18:46] <adu> I'm new to perl, and I'd rather start with perl6 than perl5, are there tutorials for people like me?

[18:46] <masak> adu: yes.

[18:46] <spider-mario> it’s another level of reengineering :)

[18:47] <masak> adu: hold on, getting you links.

[18:47] <adu> I'm familiar with a few dozen other languages, if that helps

[18:47] <lichtkind> python 3 brought less new stuff then 5.10 :)

[18:47] <spider-mario> :D

[18:47] <masak> adu: http://strangelyconsistent.org/blog/june-1-2011-input-and-output

[18:47] <yohan> as i found by googling perl6 project is more than 10 years old! why is it taking too long to come to live?

[18:47] <masak> adu: http://perl6.org/documentation/

[18:48] <masak> yohan: because people keep expecting it to be as good as Perl 5, and Perl 5 is 25 years old ;)

[18:48] <masak> well, that lineage is.

[18:48] <sorear> yohan: larry and pm got cancer in the middle of those ten year

[18:48] *** havenn left
[18:48] <masak> sorear: pm didn't. family of pm's did.

[18:48] <sorear> right, why do I keep making that mistake

[18:48] <adu> I've heard perl6 has amazing grammar sublanguage

[18:48] <yohan> larry has cancer? oh :(

[18:49] <masak> adu: that is true.

[18:49] <masak> adu: wanna see some?

[18:49] *** kaleem joined
[18:49] <adu> masak: yeah

[18:49] <masak> adu: https://github.com/moritz/json/blob/master/lib/JSON/Tiny/Grammar.pm

[18:49] <pmichaud> as far as pm concerned, "family of pm has cancer"  is almost equivalent to "pm has cancer", at least in terms of pm tuit supply :)

[18:49] *** kaleem left
[18:49] <masak> adu: this little file parses JSON.

[18:50] * masak hugs pmichaud 

[18:50] <adu> masak: is TOP builtin?

[18:50] *** brrt joined
[18:50] <masak> adu: no, it's just the default top rule.

[18:50] <yohan> it feels like the perl6 is something like php6.. everybody talks about it but it never becomes a reality..

[18:50] <sorear> yohan: AFAIK, Larry is in decent shape now

[18:50] <adu> or is it just capitalized so people know which module export to use

[18:50] <pmichaud> perl6 is reality now

[18:51] <masak> adu: but everything with capital letters is special somehow.

[18:51] <pmichaud> it kind of bugs me that we hear "perl6 never becomes reality" when it's been shipping releases for 4+ years

[18:51] <sorear> yohan: has php6 been making monthly preview releases for several eyars now?

[18:51] <adu> masak: so you don't have to use JSON::Tiny::Grammar::TOP, just JSON::Tiny::Grammar?

[18:51] <masak> yohan: what pmichaud said. it's kind of depressing to us working on Perl 6 to hear people think that it isn't a reality.

[18:51] <masak> adu: right. it dispatches to TOP automatically.

[18:51] <colomon> adu:  https://github.com/colomon/ABC/blob/master/lib/ABC/Grammar.pm

[18:52] <adu> I know it's a reality, I'm not that new

[18:52] <masak> adu: see https://github.com/moritz/json/blob/master/lib/JSON/Tiny.pm#L50 for how it's done.

[18:52] <yohan> forgive me for saying that, but i said it is not a reality because i never saw it being used anywhere!

[18:52] <gfldex> folk like to have opinions much more then they like to have a clue

[18:52] <gfldex> trolls are best to be ignored

[18:53] <pmichaud> there was a time when linux "wasn't being used anywhere"

[18:53] <masak> yohan: I've been using Perl 6 to drive my blog for going on two years.

[18:53] <adu> I started using parrot about 3 years ago, back when "make install" gave an anoying warnings

[18:53] <pmichaud> or sometimes "anywhere" really means "anywhere outside of <insert bubble here>"

[18:54] <pmichaud> I'm not intending to pick on yohan++ here -- I saw this same conversation come up in the overnight logs

[18:55] <yohan> mmm.. i am just trying to convince myself to use it..

[18:55] <pmichaud> people who say "perl6 doesn't exist" are just denying reality.  a far more helpful comment is "okay, perl6 exists, but I can't use it yet because <insert reason here>"

[18:55] <pmichaud> and "<insert reason here>" can be "not enough other people are using it yet"

[18:55] <masak> pmichaud: outsiders' discourse always seems binary and black/white to me.

[18:56] <pmichaud> masak: yeah, I think people are too busy trying to simplify things into binary yes/no sorts of things

[18:56] <masak> so naturally newbies will have the same thinkos before we corrupt^Wacclimatize them.

[18:56] <pmichaud> well, I continue to here it from people that I wouldn't consider to be "newbie" in the Perl community (or even in the context of Perl 6 stuff)

[18:56] <pmichaud> s/here/hear

[18:56] <masak> pmichaud: nodnod

[18:57] <yohan> i like this community you belive in perl6 very much :)

[18:57] <adu> if that's so, then C# doesn't exist

[18:57] <pmichaud> anyway, more errands here

[18:57] <pmichaud> bbl

[18:58] <sorear> wait, c# doesn't exist?

[18:58] <sorear> I've been using it regularly for years

[18:58] <yohan> when is perl6 going to be production ready? **i think the answer will be.. "when its ready" ;)

[18:58] <spaceships> i heard it would be done by christmas

[18:58] <sorear> yohan: 'define production'

[18:59] *** geekosaur left
[18:59] *** eviltwin_b joined
[18:59] *** eviltwin_b is now known as geekosaur

[18:59] <sorear> I think we're a long way away from "you could write the next Facebook in Perl6 instead of PHP and it would be fine"

[18:59] <yohan> sorear: when will i be able to use it on my mission critical servers like i do with perl5 

[18:59] <masak> pmichaud: mst has made me surprised/disappointed in that way a few times. see http://strangelyconsistent.org/blog/idiomatic-perl-6

[19:00] <sorear> yohan: perl6 is already quite *reliable*

[19:00] <sorear> yohan: if your mission critical servers have a low request rate, you may already be able to do that

[19:00] <yohan> sorear: do you use it in your own career? 

[19:00] <masak> ahahaha

[19:00] <sorear> I don't have a career yet.  Do you know where I could find one?

[19:01] * masak waves to sorear from Sweden

[19:01] <adu> masak: this JSON example is awsome, I've written parsers in Haskell, Python, and Go, and I already see it being easier in Perl6

[19:01] <[Coke]> hugme: hug pmichaud 

[19:01] * hugme hugs pmichaud

[19:01] <masak> adu: there you go, then.

[19:01] <brrt> sorear: western europe, mostly

[19:01] <masak> adu: if you really want your noodle blown, have a look at STD.pm6

[19:02] <brrt> skilled computer programmers are in huge demand right now

[19:02] <masak> yup.

[19:02] <masak> (we're hiring)

[19:02] <yohan> sorear: oh i thought you have a day job sorry

[19:02] <brrt> masak: who is 'we'? 

[19:02] <gfldex> yohan: i play an internet spaceship game as an internet spaceship producer. I use perl6 to do the numbers. For my internet spaceship production, Perl 6 is quite ready.

[19:02] <masak> brrt: http://edument.se/

[19:02] <[Coke]> (hiring) as are we.

[19:03] <masak> brrt: a Perl 6-friendly consulting/teaching startup in southern Sweden.

[19:03] <brrt> seems fun.. i just speak so little of swedish :-p

[19:04] <masak> gfldex: that's funny, I have a friend who uses Perl 6 for his Eve statistics ;)

[19:04] <moritz> brrt: that's not too hard to learn, it's a Germanic language too

[19:04] <dalek> rakudo/nom: cf40f24 | moritz++ | src/core/Str.pm:

[19:04] <dalek> rakudo/nom: [Str.match] add :th as alias for :nth

[19:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cf40f24d09

[19:04] <jnthn> You...have to learn Swedish to work at Edument? Nobody told me! :P

[19:04] <gfldex> masak: nice, could you ask him if gfldex ever shot him?

[19:04] <masak> brrt: in Sweden we speak English quite well, and that's the lingua franca in programming anyway.

[19:04] <dalek> roast: 24aff96 | moritz++ | S05-modifier/counted.t:

[19:04] <dalek> roast: restore :th tests, masak++

[19:04] <dalek> roast: review: https://github.com/perl6/roast/commit/24aff96f8f

[19:04] <adu> hahaha there are 26 precedence levels

[19:04] <masak> gfldex: I'll do that.

[19:04] <masak> adu: there used to be fewer ;)

[19:05] <moritz> masak: there also used to be more :-)

[19:05] <masak> we've done it all, baby.

[19:06] *** thou left
[19:06] *** kaare__ left
[19:07] <sorear> adu: do you see those equal signs?  you can add your own

[19:07] <Woodi> gfldex: you do T[1234] or you on other side of Launcher ? :)

[19:08] <gfldex> Woodi: sorry i dont get you there

[19:08] <Woodi> do you use PLEXes or sell manufacture them ? :)

[19:09] <sorear> n: sub infix:<@>($x,$y) is tighter<+> { $y * 5 + 3 }; say 1 @ 2 + 3; say 1 @ 2 * 3

[19:09] <brrt> masak: if you're still hiring whenever i'm finished studying i'll keep it in mind

[19:09] <p6eval> niecza v17-2-gb8fcf85: OUTPUT«Potential difficulties:␤  $x is declared but not used at /tmp/5zKkXkHiWj line 1:␤------> [32msub infix:<@>([33m⏏[31m$x,$y) is tighter<+> { $y * 5 + 3 }; say[0m␤␤16␤33␤»

[19:09] <gfldex> i did not pay CCP for more then 3 years

[19:09] <masak> brrt: sounds good.

[19:09] <sorear> adu: INFINITE PRECEDENCE LEVELS

[19:09] *** bluescreen10 left
[19:09] <sorear> CCP?  CCCP?

[19:10] <adu> sorear: wow

[19:10] <Woodi> time is worth something...

[19:10] <masak> sorear: CCP makes Eve Online.

[19:10] <masak> sorear: Icelandic company.

[19:10] <Woodi> anyway do we have tail calls recursion somewhere in compilers ?

[19:10] <gfldex> Woodi: there is a difference between income and profit. I prefere profits.

[19:11] <masak> and it's not CCCP, it's СССР.

[19:11] <masak> :P

[19:11] <Woodi> I just hate skilling :)

[19:12] <gfldex> Woodi: and since i have crossed 100MSP on two chars quite some time ago, I can turn my time into ISK fairly efficient.

[19:12] <dalek> roast: f70f5c1 | moritz++ | S02-names/caller.t:

[19:12] <dalek> roast: fix caller.t

[19:12] <dalek> roast: 

[19:12] <dalek> roast: it used lives_ok and dies_ok on stuff that inspected CALLER. jnthn++

[19:12] <dalek> roast: review: https://github.com/perl6/roast/commit/f70f5c113b

[19:13] <jnthn> moritz: heh, I'd just opened that in my editor :)

[19:13] <jnthn> moritz++

[19:13] <Woodi> pls tell what you use Perl6 for ?

[19:13] <sorear> Anything, so long as it doesn't need to be fast.

[19:13] <masak> code.

[19:13] <Woodi> o, as we are about spaceships....  http://www.luminous-landscape.com/articleImages/space_images/Image_021.jpg

[19:14] * jnthn mostly uses Perl 6 to implement Perl 6, and to write shiny things to show off at conferences. ;)

[19:14] <Woodi> UI is quite button heavy...

[19:14] <moritz> Woodi: I use it for small day-to-day tasks, usually oneliners

[19:14] <Woodi> right, but I was asking gfldex for specifics...

[19:15] <tadzik> gosh, forest is dark this hour

[19:16] <yohan> jnthn: do you find perl6 more magical than perl5? :)

[19:16] <dalek> tablets: 48aa63a | (Herbert Breunung)++ | docs/ (6 files):

[19:16] <dalek> tablets: adding a FAQ page

[19:16] <dalek> tablets: review: https://github.com/perl6/tablets/commit/48aa63a52d

[19:16] *** orphu left
[19:16] <lichtkind> yohan: different kind of magic :)

[19:17] <yohan> i used to show off with my perl5 one liners :)

[19:17] *** adu left
[19:17] <jnthn> yohan: Depends what you mean by "magical". In a "wow, I can do X in a very neat way" then yes. In a "huh that's semantically spooky" sense, not really...Perl 6 is pretty consistent. :)

[19:18] <dalek> tablets: b908633 | (Herbert Breunung)++ | docs/_nav- (2 files):

[19:18] <dalek> tablets: linkfix for nav header

[19:18] <dalek> tablets: review: https://github.com/perl6/tablets/commit/b908633a1b

[19:19] <yohan> jnthn: so its kinda perl trying to get a pythonic flavour i suppose :)

[19:19] <masak> not really :)

[19:20] <masak> Python is an OK language, but philosophically it puts itself opposite to Perl in many ways.

[19:20] <masak> to the extent that such differences matter at all, Perl 6 isn't much closer to Python than Perl 5 is.

[19:20] <tadzik> wow, we got like 4 new people this evening, if I count correctly

[19:20] <tadzik> where is this favourite face of mine...

[19:20] *** havenn joined
[19:21] <tadzik> http://ragefac.es/154

[19:21] <yohan> that means perl6 is getting popular 

[19:21] *** havenn left
[19:21] <yohan> tadzik: its strange how 9gag has affected all the world..

[19:21] *** bluescreen10 joined
[19:21] <tadzik> yohan: oh, I'm pretty sure this one is way older than 9gag

[19:22] <dalek> tablets: 72a97f3 | (Herbert Breunung)++ | docs/appendix-f- (2 files):

[19:22] <dalek> tablets: forgot to rename appendix F page

[19:22] <dalek> tablets: review: https://github.com/perl6/tablets/commit/72a97f3173

[19:22] <yohan> which means you know of it as well :)

[19:22] <tadzik> I've been using it for longer than 9gag exists. Trendy sites come and go, memes are usually old

[19:23] <tadzik> well, maybe not longer than it exists, as I checked now, but you know the drill

[19:23] <tadzik> yohan: and re popularity, yes, I've noticed that too

[19:23] <yohan> tadzik: i understand :)

[19:24] <yohan> i spend more time on dwarf fortress :)

[19:24] <tadzik> so, what brought you to Perl 6?

[19:25] <yohan> i heard of it today while talking to a friend .. i never knew there is another perl project in parallel with perl5

[19:26] <masak> tadzik: I have a feeling the Rakudo Star release is the ultimate cause of the influx.

[19:26] <tadzik> you think so?

[19:27] <masak> I think so.

[19:27] <tadzik> it didn't get many downloads as I look at it

[19:27] *** noam left
[19:27] *** noam joined
[19:28] <yohan> oh rakudo star is available in the fedora repositories cool :)

[19:28] *** wolfman2000 joined
[19:28] <yohan> where can a find a quick tutorial?

[19:28] <masak> tadzik: well, it can still get publicity.

[19:28] <masak> yohan: http://perl6.org/

[19:29] <yohan> oh now i see butterflies!

[19:29] <colomon> fedora's R* probably isn't the most recent, is it?

[19:29] <_sri> it would get more downloads if there was a reason to use perl6 for anything else than language research

[19:30] <[Coke]> I picture a p6 logo with camelias floating around some poor confused programmer's head.

[19:30] <[Coke]> _sri: help us out! write a module that you think people will use.

[19:30] <brrt> the using perl 6 book is pretty good

[19:30] <_sri> [Coke]: i will, as soon as there's a "stable" release with deprecation policy and reference of supported features

[19:30] <masak> it could be better. :) and more complete.

[19:31] <yohan> hahahaha [Coke] !

[19:31] <yohan> colomon: 0.0.2011.07_3.6.0-1.fc16

[19:31] <pmichaud> _sri: "stable" is meaningless.

[19:31] <_sri> pmichaud: then perl6 is not usable yet

[19:31] <pmichaud> a reference of supported features:    http://perl6.org/compilers/features

[19:31] <colomon> yohan: yeah, the most recent rakudo star is 2012.04

[19:32] <pmichaud> I'm working on an even more detailed reference now.

[19:32] <yohan> colomon: oh ! who is the maintainer? he is too lazy :)

[19:32] <_sri> you keep asking for big awesome projects to use perl6 but don't provide a stable platform, that's not gonna work

[19:32] <pmichaud> _sri: I don't recall asking for big awesome projects to use perl6

[19:32] <pmichaud> _sri: I don't know where you're getting that from.

[19:32] <_sri> not you specifically

[19:33] <masak> _sri: you keep saying Perl 6 isn't stable but don't give more detailed examples of what you mean. that's not gonna work.

[19:33] <moritz> pmichaud: btw, have you seen https://gist.github.com/2346494?

[19:33] <pmichaud> _sri: what is the "you" you're referring to, then?

[19:33] <_sri> masak: deprecation policy and reference of features affected by it

[19:33] <brrt> masak: you wrote the perl 6 book?

[19:33] <masak> _sri: you're just yet another outsider thinking you know how to "fix" the Perl 6 effort.

[19:33] <pmichaud> _sri: I'll be happy to put together a deprecation policy.  

[19:34] <masak> brrt: I have authored parts of it.

[19:34] <pmichaud> _sri: at this stage, I'll even be happy to follow it

[19:34] <yohan> what perl6 book?!

[19:34] <yohan> are there published perl6 books?!

[19:34] <masak> yohan: http://github.com/perl6/book

[19:34] <pmichaud> _sri: would you be willing to draft a deprecation policy for us, ooc?

[19:34] <masak> yohan: not published, yet.

[19:34] <pmichaud> or at least tell us what you expect such a policy to have?

[19:34] <_sri> masak: alright, then i'll just shut up

[19:34] <moritz> yohan: it's published in the sense that we had releases

[19:35] <masak> _sri: no no, listen to pmichaud instead :)

[19:35] <colomon> there is a published perl 6 book, but it was VERY premature

[19:35] <masak> _sri: he's much more diplomatic than I am.

[19:35] <brrt> i read the poker example

[19:35] <brrt> (subtypes)

[19:35] <yohan> moritz: cool this is great 

[19:35] <brrt> and i was wondering if i should be scared or in awe

[19:35] <pmichaud> I'm not joking or being sarcastic -- it would be a great help to have an "outsider's" view of what the deprecation policy should look like.

[19:35] <masak> brrt: both :)

[19:35] <tadzik> brrt: the border is thin :)

[19:35] <pmichaud> also, I think that Rakudo is indeed "stable" enough to be able to follow a sane deprecation policy

[19:36] <yohan> and to build the book you will need perl5 .. ironic :)

[19:36] <pmichaud> so, if lack of a deprecation policy is a barrier for some, let's get one.

[19:36] <masak> pmichaud: for a great deal of features, Rakudo is stable enough.

[19:36] <brrt> perl5 obviously comes with a lot more modules

[19:36] <brrt> like, insanely many

[19:36] <masak> we don't have threading/events/concurrency yet.

[19:36] <masak> I don't imagine macros are stable in the spec yet.

[19:36] <pmichaud> I do wish to restate my earlier comment that perl 1.0, 2.0, 3.0, and even 4.0 (to some extent) did not have modules.

[19:37] *** eviltwin_b joined
[19:37] *** geekosaur left
[19:37] <masak> nod.

[19:37] <pmichaud> Modules didn't arise with Perl's birth.  Also, Perl was considered "stable" long before it had modules.  :-)

[19:37] *** eviltwin_b is now known as geekosaur

[19:37] <pmichaud> gotta pick up kids from school -- bl

[19:37] <pmichaud> *bbl

[19:38] <pmichaud> _sri: I'm quite serious that any input you could give on a deprecation policy would be a big help.

[19:38] <pmichaud> bb;

[19:38] <pmichaud> bbl

[19:39] *** thou joined
[19:42] <yohan> i remember a PHP﻿ Girl talking about """'Perl's Unicorn support'"""" :) i am still looking for her

[19:43] <moritz> :-)

[19:43] <masak> aww

[19:43] <yohan> http://www.youtube.com/watch?v=oeghXnAGJV4&feature=related

[19:43] *** MayDaniel joined
[19:43] <dalek> tablets: a446cfe | (Herbert Breunung)++ | docs/appendix-b-grouped.txt:

[19:43] <dalek> tablets: restructure appendix B a bit

[19:43] <dalek> tablets: review: https://github.com/perl6/tablets/commit/a446cfe158

[19:44] *** ponbiki left
[19:46] <flussence> random thought: to be a *good* language, we need to be at least better than Perl 5. To be a *popular* language, we only need to beat PHP at its own game.

[19:46] <masak> uh-oh, Perl v. Python... :)

[19:46] <yohan> masak:  ;)

[19:47] <timotimo> what, perl5 is the lower bound for what's "good languages"?

[19:47] <masak> flussence: to be a *cute* language, we need to have nicer idioms than Ruby. :)

[19:47] <timotimo> i don't think perl5 is that bad

[19:47] <masak> timotimo: it isn't generally, but for Perl 6, I'd say it is.

[19:47] <timotimo> that's an acceptable metric

[19:47] *** sosey joined
[19:48] <sosey> hi

[19:48] <masak> sosey: hi!

[19:48] <masak> what is this, September? :P

[19:48] <moritz> it's the month after a Star release, it seems :-)

[19:48] <sosey> @masak: sosey is my surname, i dont know what it means 

[19:48] *** LylePerl joined
[19:48] <yohan> All material in this repository is licensed under a CC-by-nc-sa license: <http://creativecommons.org/licenses/by-nc-sa/2.5/> (attribution, noncommercial, share-alike), unless explicitly stated otherwise.

[19:49] *** havenn joined
[19:49] <yohan> what does that exactly mean?

[19:49] <moritz> yohan: what it says

[19:50] <moritz> yohan: or put differently, which part is unclear to you?

[19:50] <yohan> cc-by-nc-sa :)))

[19:50] <Celelibi> Is there a Data::Dumper module in perl6 ?

[19:50] <jnthn> Celelibi: Built in; just use the .perl method

[19:50] <moritz> r: say (1, "foo").perl

[19:50] <p6eval> rakudo cf40f2: OUTPUT«(1, "foo")␤»

[19:50] <jnthn> r: [1, { a => 2, b => 3}].perl.say

[19:50] <p6eval> rakudo cf40f2: OUTPUT«[1, {"a" => 2, "b" => 3}]␤»

[19:50] <Celelibi> ok :)

[19:50] <masak> yohan: cc-by-nc-sa is just a shorthand for "Creative Commons, Attribution, Non-Commercial, Share-Alike" :)

[19:50] *** sosey left
[19:51] <Celelibi> then, what happened to the range operator ?

[19:51] <yohan> ah ok i hate these shortnames

[19:51] <Celelibi> r: say (1 .. 3).perl

[19:51] <moritz> Celelibi: it now constructs a Range object

[19:51] <p6eval> rakudo cf40f2: OUTPUT«1..3␤»

[19:51] <Celelibi> ok

[19:51] <moritz> r: .say for 1..3

[19:51] <p6eval> rakudo cf40f2: OUTPUT«1␤2␤3␤»

[19:52] <Celelibi> what's this .say ?

[19:52] <moritz> it's short for $_.say

[19:52] <yohan> time to go back to forth.. goodbye

[19:52] <tadzik> bye o/

[19:53] <Celelibi> you mean every object has a say method ?

[19:53] *** yohan left
[19:53] *** snearch joined
[19:53] <masak> the Python guy is so mean. :)

[19:53] <Celelibi> is everything object in perl6 ?

[19:54] <masak> Celelibi: yes. even things which are not objects, are objects.

[19:54] <tadzik> objects are objects too

[19:54] <Celelibi> ok.

[19:54] *** mikemol left
[19:54] <jnthn> Native types are not objects, but those will autobox if you try to use them as an object.

[19:54] <jnthn> r: my int $x = 42; $x.say

[19:54] <p6eval> rakudo cf40f2: OUTPUT«42␤»

[19:54] <Celelibi> Then... Where can I find documentation about the native types wrappers ?

[19:55] <masak> Celelibi: S12.

[19:55] <jnthn> Well, guess S02 and S09 specs various aspects of native types too.

[19:55] <masak> troo

[19:56] <pmichaud> there are at least a few areas in which Perl 6 is "better than" Perl 5.  :-)

[19:56] <pmichaud> oops, scroll error

[19:56] <masak> still worth pointing out ;)

[19:56] <pmichaud> I was responding to 

[19:56] <pmichaud> 19:46 <flussence> random thought: to be a *good* language, we need to be at least better than Perl 5. To be a *popular* language, we only need  to beat PHP at its own game.

[19:57] <masak> there are at least a few areas where Perl 6 beats PHP at its own game, too. but that's more of an all-or-nothing matter, I guess.

[19:57] <masak> what we need is a PHP-killer Rakudo distro.

[19:57] <masak> but we know that.

[19:57] <tadzik> I don't think anything could kill PHP

[19:58] <jnthn> tadzik: What if Chuck Norris and PHP got in a fight?

[19:58] <moritz> tadzik: you're right. Even the PHP folks have tried very hard, and have failed :-)

[19:58] <tadzik> jnthn: Chuck will probably say "huh, it's dead already" and move on ;)

[19:58] <jnthn> ;)

[19:59] <Celelibi> Actually I wonder what remains of perl5 in perl6?

[19:59] <moritz> or "I don't fight with children"

[19:59] <brrt> i so badly want to chime in with something mean about php

[19:59] <brrt> just everything has been said already

[19:59] <tadzik> Celelibi: the spirit :)

[19:59] <flussence> "server-side AOL"

[19:59] *** adu joined
[20:00] <moritz> Celelibi: lots of things. Like 'my' and 'our' for lexical and package variables, sigils, strings with interpolation, m/../, s///

[20:00] <moritz> Celelibi: subroutines with 'sub', arrays with [], hashes and blocks with {}

[20:00] <Celelibi> there are... small syntatic details.

[20:01] <gfldex> brrt: you don't need to say anything mean about PHP, the folk guilty of making PHP do all the work for you: http://www.kb.cert.org/vuls/id/520827

[20:01] <moritz> Celelibi: curious. Most people make a big deal about disliking sigils :-)

[20:01] <Celelibi> the more I read about perl6 the more I think I will have to learn it as a new language, and not as an improvment of perl5.

[20:01] <gfldex> Celelibi: that's a pretty good idea

[20:02] <masak> Celelibi: yes.

[20:02] <moritz> Celelibi: anyway, there lots of perlish ideas (not necessary perl5ish ideas) that are also in p6. TIMTOWTDI, DWIM, safe defaults, the ability to write "baby perl"

[20:02] <moritz> Celelibi: and the fact that operators dictate the type of operations, not the type of the operands

[20:02] <masak> Celelibi: but I still place Perl 5 and Perl 6 in the same mental compartment in some way, even though they are very much distinct languages with different semantics.

[20:02] <moritz> (most dynamic languages do that differently)

[20:02] <brrt> gfldex: o good lord

[20:03] <gfldex> brrt: keep in mind that there are quite a few sites that have SQL login in the PHP source

[20:04] <Celelibi> Wht about refs? In perl6 ?

[20:04] <brrt> brrt: i know. most, in fact, in some way or another

[20:04] <Celelibi> It looks like lists of lists now exists and are not flattened.

[20:04] <masak> Celelibi: everything is refs, so you don't see them.

[20:04] *** geekosaur left
[20:04] <masak> Celelibi: lists of lists still flatten.

[20:04] *** geekosaur joined
[20:04] <moritz> Celelibi: http://perl6advent.wordpress.com/2011/12/16/where-have-all-the-references-gone/

[20:04] <masak> r: my @a = 1, 2, (3, 4, 5); say +@a

[20:04] <p6eval> rakudo cf40f2: OUTPUT«5␤»

[20:05] *** yohan joined
[20:05] <Celelibi> r: (1, 2, (3, 4), 5).perl.say

[20:05] <p6eval> rakudo cf40f2: OUTPUT«(1, 2, (3, 4), 5)␤»

[20:05] <masak> well, they didn't flatten yet there.

[20:05] <masak> they will if you assign it to an array.

[20:05] <yohan> i tried to build the book,, i got this : Pod::PseudoPod::LaTeX version 1.10165 required--this is only version 1.000 at lib/Perl6BookLatex.pm line 7 .. is there a ready pdf version with latest content?

[20:05] <masak> or do some other stuff.

[20:06] <moritz> yohan: the pdf in the download section on github is not too much out of date

[20:06] <moritz> yohan: ie there hasn't been much improvement since that last version

[20:06] * brrt is still working on a p6 epub book builder

[20:07] <yohan> moritz: i see.. it is strange that my Pod::PseudoPod::LaTeX that comes with fedora 16 is not new enough to build the book

[20:07] <Celelibi> hum... ok. It's not the construction of the data structure that flatten the list of lists, its the assignment to an array.

[20:07] <masak> right.

[20:07] <Celelibi> But the... Why?

[20:08] <masak> :)

[20:08] <gfldex> Celelibi: you may want to watch http://ontwik.com/perl/perl-6-update/

[20:08] <masak> Celelibi: because sometimes we want the non-flattening behavior.

[20:08] <moritz> yohan: well, I too find it strange that Fedora insists on shipping such an old version

[20:08] <gfldex> Celelibi: or in general http://wiki.perl6.org/Categorized%20External%20Videos

[20:08] <yohan> moritz: fedora 17 will have 1.000 as well

[20:08] <Celelibi> why would it be different to use @a than the data itself? No one would expect that.

[20:09] <moritz> Celelibi: note that nearly all uses will show the flattened behavior

[20:09] <Celelibi> gfldex: your first video is 1 hour long. I won't watch it now.

[20:10] <moritz> r: say (1, 2, (3, 4, 5))[2]

[20:10] <p6eval> rakudo cf40f2: OUTPUT«3␤»

[20:10] <moritz> see? it pretends it's falt

[20:10] <moritz> *flat

[20:10] <moritz> so unless you write .tree or so, you won't even notice the nesting

[20:10] <moritz> but it's there if you need it.

[20:10] *** yohan left
[20:10] <flussence> r: say $(1, 2, (3, 4, 5))[2]

[20:10] <p6eval> rakudo cf40f2: OUTPUT«3␤»

[20:10] <flussence> r: say (1, 2, $(3, 4, 5))[2]

[20:11] <p6eval> rakudo cf40f2: OUTPUT«3 4 5␤»

[20:11] <flussence> there

[20:11] <moritz> one of the design principles of Perl 6 is not to forget stuff too quickly

[20:11] <moritz> in p5, if you do   my $x = @a;   then $x doesn't know anything about @a except the number of elements

[20:11] *** geekosaur left
[20:11] *** eviltwin_b joined
[20:11] <moritz> in p6, you have full information of @a in $x, but if you use $x as a number, it works just like in p5

[20:11] *** eviltwin_b is now known as geekosaur

[20:12] <moritz> so, best of all worlds

[20:12] <Celelibi> hum... ok

[20:12] * moritz thinks he has explained those things quite a few times by now :-)

[20:14] *** havenn left
[20:16] *** havenn joined
[20:16] <Celelibi> And what's this $ in (1, 2, $(3, 4, 5)) ?

[20:16] <moritz> r: multi trait_mod:<is>($m, :$a!) { multi y(|$) { say $m }; $m.wrap(&y) }; sub foo is a {}; foo

[20:16] <p6eval> rakudo cf40f2: OUTPUT«sub+{wrapped} foo() { ... }␤»

[20:16] <flussence> Celelibi: that's like saying [] in p5

[20:16] <moritz> Celelibi: it's the "I'm a scalar, don't flatten me" marker

[20:17] <Celelibi> ok

[20:17] <flussence> r: say (1, 2, $(3, 4, 5)).flat.perl

[20:17] <p6eval> rakudo cf40f2: OUTPUT«(1, 2, $(3, 4, 5)).list␤»

[20:17] <moritz> star: multi trait_mod:<is>($m, :$a!) { multi y(|$) { say $m }; $m.wrap(&y) }; sub foo is a {}; foo

[20:17] <p6eval> star 2012.04: OUTPUT«Null PMC access in find_method('gist')␤  in sub say at src/gen/CORE.setting:6555␤  in sub y at /tmp/zLdGhbLqGY:1␤  in any enter at src/gen/Metamodel.pm:2685␤  in method postcircumfix:<( )> at src/gen/CORE.setting:1601␤  in <anon> at src/gen/BOOTSTRAP.pm:815␤  in any…

[20:18] <moritz> star: multi modify($m) { multi y(*@) { say $m }; $m.wrap(&y) }; modify sub foo { }; foo

[20:18] <p6eval> star 2012.04:  ( no output )

[20:19] <moritz> hm, seems I really need a trait to reproduce that bug :/

[20:19] <moritz> star: multi modify($m) { multi y(*@) { $m }; $m.wrap(&y)}; modify sub foo { }; say foo() ~~ Callable

[20:19] <p6eval> star 2012.04: OUTPUT«False␤»

[20:20] <moritz> star: multi trait_mod:<is>($m, :$a!) { multi y(|$) { $m }; $m.wrap(&y) }; sub foo is a {}; say foo()  ~~ Callable

[20:20] <p6eval> star 2012.04: OUTPUT«False␤»

[20:20] <moritz> and I need say() too? 

[20:21] *** geekosaur left
[20:21] *** eviltwin_b joined
[20:21] <moritz> star: sub identity($x) { $x }; multi trait_mod:<is>($m, :$a!) { multi y(|$) { identity($m) }; $m.wrap(&y) }; sub foo is a {}; say foo()  ~~ Callable

[20:21] <p6eval> star 2012.04: OUTPUT«Nominal type check failed for parameter '$x'; expected Any but got Mu instead␤  in sub identity at /tmp/aOztWShfn1:1␤  in sub y at /tmp/aOztWShfn1:1␤  in any enter at src/gen/Metamodel.pm:2685␤  in method postcircumfix:<( )> at src/gen/CORE.setting:1601␤  in <anon> …

[20:21] *** eviltwin_b is now known as geekosaur

[20:22] * moritz too tired to test and close https://rt.perl.org/rt3/Ticket/Display.html?id=112664

[20:23] <masak> g'ah, Perl guy in video knocks Esperanto. :/

[20:24] <masak> implicitly ridiculing it as "purist". wtf... :)

[20:25] *** raiph left
[20:25] *** birdwindupbird left
[20:25] *** geekosaur left
[20:25] *** eviltwin_b joined
[20:25] *** uvtc joined
[20:26] *** eviltwin_b is now known as geekosaur

[20:27] *** plobsing left
[20:31] <rurban> FWIW Building perl6 with AddressSanitizer needs max 4.8G RAM (64-bit DEBUGGING src/gen/CORE.setting).

[20:32] *** fglock_ left
[20:33] <masak> Python guy's #1 reason for Python being better is "It's available". even people who know better use binary black/white rhethoric. :/

[20:34] *** eviltwin_b joined
[20:34] *** geekosaur left
[20:34] <masak> I'll also not that in general, the Perl guy focused on the strengths of Perl, whereas the Python guy kept coming back to how Python beats Perl in various ways.

[20:35] <masak> of course, it's in line with Perl being Python's "nemesis language" -- but the reverse is not true.

[20:35] *** eviltwin_b is now known as geekosaur

[20:35] <Celelibi> Who cares about that actually? :)

[20:35] <Celelibi> I started to learn python last tuesday.

[20:36] <Celelibi> (But sorry, I won't drink pepsi, Coke FTW! :p)

[20:37] <dalek> nqp/toqast: 6f91998 | jnthn++ | src/QAST/Block.nqp:

[20:37] <dalek> nqp/toqast: Generate compilation-unit unique IDs for QAST::Blocks (or allow explicit setting of one).

[20:37] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/6f91998d96

[20:37] <dalek> nqp/toqast: feb325c | jnthn++ | src/QAST/Compiler.nqp:

[20:37] <dalek> nqp/toqast: Code-gen for outer chain.

[20:37] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/feb325c91c

[20:37] <dalek> nqp/toqast: 5f34bad | jnthn++ | src/QAST/Compiler.nqp:

[20:37] <dalek> nqp/toqast: Generate with :anon flag to avoid a Parrot namespace installation.

[20:37] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/5f34bade11

[20:37] <sjn> ooh! *binary* black/white rethoric! Does that mean there's no middle-ground there too? How about grey areas? :D

[20:37] <sjn> THAT'S AWSOME/HORRIBLE! :)

[20:37] *** MayDaniel left
[20:38] <Celelibi> If you can actually merge pepsi and coke and make something edible, you can't really merge Perl and Python and make something runnable. :)

[20:38] *** pmurias_ joined
[20:39] * sjn wonders what the "Pepsi" programming language would like

[20:39] <Celelibi> Where is your grey now? :p

[20:39] <sjn> would look* like

[20:40] * sjn is too late at $work, need to get home (brain apparently turned off)

[20:40] <masak> sjn: I would be surprised if there weren't at least two languages out there called "Pepsi".

[20:40] <masak> it's just too good a name to pass up.

[20:41] <sjn> Pepsi: The next "P" language!

[20:41] <Celelibi> this website doesn't know them : http://99-bottles-of-beer.net/

[20:42] <uvtc> masak, what's this in regards to: " I'll also not that in general, the Perl guy focused on the strengths of Perl, whereas the Python guy"?

[20:42] <masak> er, note*

[20:42] *** pmurias left
[20:42] <masak> uvtc: a video that I just saw that was posted in the backlog.

[20:43] <masak> uvtc: http://www.youtube.com/watch?v=oeghXnAGJV4

[20:43] <uvtc> masak, ah. missed th...

[20:43] <uvtc> well there it is.

[20:43] <uvtc> oh yeah, I remember that.

[20:49] <uvtc> masak, You answered _sri a couple of days ago: http://irclog.perlgeek.de/perl6/2012-05-02#i_5530090 . Then earlier today you wrote http://irclog.perlgeek.de/perl6/2012-05-04#i_5542058 .

[20:50] <dalek> tablets: dcf63ba | (Herbert Breunung)++ | docs/index.txt:

[20:50] <dalek> tablets: polish index

[20:50] <dalek> tablets: review: https://github.com/perl6/tablets/commit/dcf63bad67

[20:51] <uvtc> If there's no "good example" of what a Perl 6 module should look like, then potential module authors are going to take that as a sign that Perl 6 is not yet ready for them to be writing modules for it.

[20:51] <jnthn> lichtkind: Will there be a czech index too?

[20:51] <uvtc> masak, and you're going to get those "not yet a reality" sentiments.

[20:51] <pmichaud> surely modules.perl6.org has some "good examples" ?

[20:51] <lichtkind> jnthn: to vis ze ne

[20:52] <pmichaud> or, I suppose that we expect "best practices" to be established before there's been a lot of practice.  :-/

[20:52] <uvtc> You've gotta start somewhere.

[20:53] <pmichaud> I think my point is that the start has already occurred.  http://modules.perl6.org

[20:53] <uvtc> pmichaud, I wrote this a few days ago: http://wiki.perl6.org/Create%20and%20Distribute%20Modules

[20:53] <pmichaud> uvtc++ # excellent!

[20:54] <uvtc> pmichaud, it's actually already linked to from modules.perl6.org.

[20:54] <pmichaud> I wonder if that page would be better maintained in the modules repo itself

[20:54] <pmichaud> instead of on the perl6 wiki

[20:55] <pmichaud> come to think of it... what's the origin of the Perl 6 wiki?  I don't think I've ever really seen that before.

[20:55] <pmichaud> s/Perl 6 wiki/wiki.perl6.org/

[20:56] <masak> uvtc: I was saying to _sri that we don't have distributions.

[20:56] <masak> uvtc: we do have plenty of modules. but they're just that: modules.

[20:56] <masak> we haven't really bootstrapped our way up to distributions yet.

[20:56] <uvtc> pmichaud, A few days ago, I linked to a previous version of that article, and mentioned that if there was a wiki, I'd put it there, but I didn't want to use SocialText.

[20:56] <masak> (well, Rakudo Star is a distribution, but that's a different kind)

[20:57] <uvtc> A number of others chimed in about not really being interested in the previous wiki. Some (like me) liked the idea of writing in markdown.

[20:57] <uvtc> pmichaud, anyway, long story short, the wiki software is very nice, easy to install (moritz set it up), and uses a particularly nice flavor of markdown (pandoc-markdown).

[20:58] <pmichaud> uvtc: I agree that the previous wiki was very un-usable.

[20:58] <uvtc> masak, when you write, "we haven't really bootstrapped our way up to distributions yet.", you mean module distributions?

[20:58] *** noam left
[20:59] *** noam joined
[20:59] <pmichaud> uvtc: by "module distribution" do you perhaps mean "module releases"?

[20:59] <uvtc> pmichaud, most everyone polled agreed. And markdown seemed popular.

[20:59] <pmichaud> uvtc: my comment is more along the lines of "we tend to use github for all of our other shared projects.... why a wiki at all?"

[21:00] <pmichaud> although the ability to make links between pages is likely a big selling feature of wiki over github

[21:00] <pmichaud> anyway, the "create and distribute modules" page looks to me like something that is easier to maintain as a part of the perl6/modules repository than separately in the wiki.  but that's just me.

[21:00] <dalek> nqp/toqast: 7de618b | jnthn++ | src/QAST/ (2 files):

[21:00] <dalek> nqp/toqast: First crack at code-gen for :op('call').

[21:00] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/7de618b82f

[21:01] <uvtc> pmichaud, the wiki that was set up uses gitit. gitit uses pandoc to process the markdown into html, and supports important enhancements making it suitable for writing larger docs (such as tables, definition lists, ...)

[21:01] *** skids left
[21:01] <uvtc> pmichaud, gitit and pandoc are a pretty amazing combination. I sold moritz on it.

[21:02] *** geekosaur left
[21:02] *** eviltwin_b joined
[21:02] *** eviltwin_b is now known as geekosaur

[21:02] <uvtc> pmichaud, I even started writing some documentation there: http://wiki.perl6.org/Mostly%20Harmless%20Docs/Main

[21:02] <pmichaud> uvtc: okay, I'll look into it a bit more.

[21:04] <uvtc> pmichaud, the way I see it now though, the Perl 6 effort is sending 2 pretty strong signals that it's "not yet ready" for everyone to start using.

[21:04] *** geekosaur left
[21:04] *** eviltwin_b joined
[21:05] *** eviltwin_b is now known as geekosaur

[21:05] <uvtc> it. Using it.

[21:05] * pmichaud waits for the description of the two strong signals

[21:06] <uvtc> Oh, Ok. One is the issue I just remarked about above, re masak and modules.

[21:06] <pmichaud> can you summarize that issue?  I didn't get a clear understanding of it.

[21:06] <uvtc> If potential module authors are told, "no real standard yet", it's sending the signal, "not yet done".

[21:07] <pmichaud> standards should be drafted after experience is obtained, not before.

[21:07] <pmichaud> see:  Internet standards

[21:07] <uvtc> Unfortunately, if you don't give potential module authors *something*, it sends the signal that Perl 6 is not yet ready.

[21:07] *** geekosaur left
[21:07] *** eviltwin_b joined
[21:08] <pmichaud> fair enough, what should that something look like?  (more)

[21:08] *** eviltwin_b is now known as geekosaur

[21:08] <pmichaud> it seems to me that http://wiki.perl6.org/Create%20and%20Distribute%20Modules  is pretty much that something, yes?

[21:08] <moritz> I thought we've long had something

[21:08] <moritz> and it's been linked to from modules.perl6.org for quite some time too

[21:08] <moritz> what exactly is the problem now?

[21:09] <uvtc> The problem is that someone came here asking "what's a good example module", and there was no answer. That sends the signal "not yet ready to contribute modules".

[21:09] <pmichaud> did someone at least suggest looking at modules.perl6.org ?

[21:10] <masak> yes.

[21:10] <moritz> uvtc: example module != instructions

[21:10] <pmichaud> what kind of answer would you like to have seen that would indicate "ready to contribut modules"?

[21:10] <pmichaud> *contribute

[21:10] <moritz> in all honesty, when somebody asked me what a good example p5 module was, I wouldn't have any idea either

[21:11] <uvtc> pmichaud, "Here's the document explaining how to do it, and here's an example. Get to it!".

[21:11] <uvtc> Create a trivial example module if you have to.

[21:11] <pmichaud> uvtc: so, you're saying it would have to be a specific module example, as opposed to pointing to the set of available modules?

[21:11] <pmichaud> uvtc: what answer would you give for Perl 5 for that question, ooc?

[21:11] <pmichaud> "What's a good example module for Perl 5?"

[21:11] <masak> Acme::Bleach.

[21:12] <masak> :P

[21:12] <moritz> Acme::EyeDrops

[21:12] <pmichaud> (I'm asking because the answer will guide us into what we ought to provide that would be at least familiar to P5 module authors.)

[21:12] <uvtc> (sorry, just a sec, {family})

[21:14] <pmichaud> I'm looking through learn.perl.org for "What's a good example module?"  and not finding anything that really answers that.  :-/

[21:16] <pmichaud> I have to go for a while again... but a comment on

[21:16] <moritz> maybe Date::Simple, if you want something with a bit of XS and a bit of perl too

[21:16] <pmichaud> 21:11 <uvtc> pmichaud, "Here's the document explaining how to do it, and here's an example. Get to it!".

[21:16] <pmichaud> okay, we have a document explaining how to do it, at http://wiki.perl6.org/Create%20and%20Distribute%20Modules.  

[21:17] <pmichaud> for the other part, we need a line that says "A good example module is <modulename>"   in the modules.perl6.org page.

[21:17] <pmichaud> or there can be a badge that indicates a module particularly well suited for understanding

[21:17] <uvtc> pmichaud, what I was saying is that, if a user asks on IRC "hey, any good examples", there needs to be one to point them to. A link in that module creation doc would be fine.

[21:18] <pmichaud> I think a link on the modules page itself would be good, too.

[21:18] <pmichaud> I also wonder if there are any good p6 examples in   http://github.com/perl6/perl6-examples

[21:18] <pmichaud> s/p6/modules/

[21:18] <uvtc> Otherwise they leave and think, "geez, it's been **10 years** and no one can even point me to a good example module?! Bah."

[21:18] <pmichaud> uvtc: nobody's pointed me at a good p5 module yet. 

[21:19] <pmichaud> "maybe Date::Simple"

[21:19] <pmichaud> is the best I have so far.

[21:19] <uvtc> pmichaud, in P5 land, I think there's dist::zilla, no?

[21:19] <pmichaud> you think dist::zilla is a good example module for people to learn how to write modules?

[21:20] <uvtc> I mean this: Perl 6 needs module authors. They either have to create a module from scratch or use a tool to create one. Perl 5 has tools for this. Perl 6 doesn't yet.

[21:20] <rurban> Dist::Zilla is cleartly the worst of all

[21:20] <pmichaud> dist::zilla doesn't strike me as being a good "example module" for newbies... but perhaps I don't understand it

[21:20] <rurban> Numbers to verify this at my latest blog post

[21:21] <uvtc> I don't mean to use dist::zilla as an example. My understanding was that it was a good idea to use it, but I don't use a lot of Perl 5 these days.

[21:21] <rurban> http://blogs.perl.org/users/rurban/2012/04/big-module-sizes.html

[21:21] <pmichaud> uvtc: my point is that nobody here seems to be able to >quickly< answer the question of "What's a good example module for Perl 5?"   either

[21:21] <lichtkind> jnthn: but i already pondered to use more words like germing hungry..

[21:22] <uvtc> pmichaud, right. And I think that's a problem, and it sends a signal to potential users (module authors).

[21:23] <pmichaud> if p5 doesn't have a good answer for it, I'm not sure it's something that can be quickly answered for p6

[21:23] <rurban> http://search.cpan.org/dist/Task-Kensho/ is a typical recommendation for modern perl

[21:23] <pmichaud> not to say we can't work on it, but it's also a little disingenuous to say "p6 should already have these answers ready" when the p5 universe doesn't seem to have them.

[21:24] <uvtc> pmichaud, ok. I think the documentation on it is much more important than the example anyway. I'm I'm glad it's there. I only hope it can be kept updated and that new users will be pointed to it.

[21:25] <rurban> http://www.enlightenedperl.org/

[21:25] <pmichaud> thus back to my original response:  "Did someone at least suggest looking at modules.perl6.org?" 

[21:25] <pmichaud> If yes, then that page contains the link that explains how to create modules, as well as providing some modules to look at.

[21:26] *** plobsing joined
[21:27] <uvtc> pmichaud, no, I don't think so.

[21:28] <pmichaud> you don't think someone answered modules.perl6.org, you mean?

[21:29] <uvtc> pmichaud, it starts here at http://irclog.perlgeek.de/perl6/2012-05-02#i_5530090 .

[21:30] *** havenn left
[21:30] <uvtc> pmichaud, The other signal which Perl 6 sends (which suggests it's not ready/reality) is the lack of user docs. I realize this has come up many times before, but regardless, it's a signal to new users.

[21:30] <pmichaud> uvtc: at http://irclog.perlgeek.de/perl6/2012-05-02#i_5529240, moritz++ had already suggested modules.perl6.org to _sri

[21:31] <pmichaud> perhaps it needed to be repeated at _5530090

[21:31] <pmichaud> the lack of user docs is due to a lack of user doc authors.  I'm not sure how to resolve that.

[21:32] <pmichaud> althouch lichtkind++ and a few others are working on some pieces of that puzzle

[21:34] <pmichaud> I'm sure a userdoc champion for perl 6 exists somewhere; we just don't know who it is yet (and the champion likely doesn't know yet either)

[21:34] *** geekosaur left
[21:34] *** geekosaur joined
[21:35] <pmichaud> still, I think that "lack of user documentation" is an entirely valid complaint.  Our current team doesn't seem to have that slot filled I guess.

[21:35] <pmichaud> s/complaint/criticism/

[21:35] <uvtc> pmichaud, regarding how to resolve the user docs issue, I don't know how to resolve it either. :( But here's been my experience: I started writing those "mostly harmless" docs I linked to earlier. My problem though was that the Synopses are very long, detailed, and dense. They are not tutorial in nature. So it was either toil away trying to understand them, or ask questions here...

[21:36] *** brrt left
[21:37] <lichtkind> pmichaud: im working on al of it :) just today added a FAQ section

[21:37] <pmichaud> yes, I agree with your experience.  many people have expressed similar tales.

[21:37] <uvtc> pmichaud, and eventually it annoys people to be barraged with questions.

[21:37] <pmichaud> I don't know that that's true on #perl6, though.  We generally like questions here, even barrages.

[21:38] <pmichaud> still, it's annoying to the newcomer to have to ask lots of basic questions

[21:38] <uvtc> pmichaud, yes. it makes them feel like they're being annoying.

[21:38] <pmichaud> I find it odd (and a little frustrating) that it seems to be hard to come up with good written tutorial examples for Perl 6.

[21:39] <pmichaud> although teaching is/was my profession, written exercises/teaching was never my forte.  I'm at my best in a lecture/presentation environment.

[21:39] <lichtkind> uvtc: you can help me restore my perl 6 tutorial

[21:39] <lichtkind> its really easy entry

[21:39] <rurban> my parrot https://github.com/rurban/parrot/commit/1e5f20eefce patch seems to have fixed overflow http://nopaste.snit.ch/137433

[21:39] <PerlJam> pmichaud: I started on another book entitled "Pragmatic Perl 6" that was supposed to be a "get you started in Perl 6" kind of book.  It was meant to show how to install the Perl 6 implementations and do useful, practical things (open files, parse data, etc.)

[21:40] <PerlJam> pmichaud: I never got very far with it though

[21:40] <pmichaud> if I had some sort of forum where I could give lectures on Perl 6 and have them videotaped and then transcribed, that would end up making for a good userdoc basis, I suspect.

[21:40] <lichtkind> PerlJam: yes its lot of work

[21:41] <pmichaud> the problem is that to even get out of the basics takes hours of presentation

[21:41] *** geekosaur left
[21:41] *** eviltwin_b joined
[21:41] <PerlJam> I wonder what it would take to get merlyn and bdf to actually finish "Learning Perl 6"

[21:41] *** eviltwin_b is now known as geekosaur

[21:41] <pmichaud> well, there's a bit of a disconnect here worth exploring (more)

[21:41] <pmichaud> a lot of people come to Perl 6 already knowing a language, so they want a tutorial that lets them get to the cool stuff quickly

[21:42] *** pmurias_ left
[21:42] <pmichaud> but something like "Learning Perl 6" tends to start a lot more basic than that, I suspect.

[21:43] <dalek> tablets: e5ec4dc | (Herbert Breunung)++ | docs/appendix-a-index.txt:

[21:43] <dalek> tablets: just enforce new formating rules

[21:43] <dalek> tablets: review: https://github.com/perl6/tablets/commit/e5ec4dc0a3

[21:43] <pmichaud> I should also review the tutorial materials that TheDamian++ did in his P6 tutorials at OSCON a couple of years ago

[21:43] <uvtc> pmichaud, if you're not up for writing, then perhaps a series of screencasts.

[21:44] <pmichaud> uvtc: I've not had much luck with screencasts.  I somewhat need an audience to tell me where I'm overlooking stuff.

[21:44] <pmichaud> although maybe I'm selling myself a little short there.

[21:44] <uvtc> pmichaud, I think you may be. :)

[21:44] <PerlJam> szabgab did some screencasts ...  maybe use them for inspiration?

[21:44] <pmichaud> anyway, even as screencasts I suspect it's on the order of many weeks of work just to get out of the basics

[21:44] <PerlJam> (or get him to do more)

[21:45] <uvtc> pmichaud, perhaps add examples to http://wiki.perl6.org/Mostly%20Harmless%20Docs/Main ?

[21:45] <uvtc> I'd love to see people add to that.

[21:45] *** eviltwin_b joined
[21:45] *** geekosaur left
[21:45] <pmichaud> I'd like to see that page and perl6-examples unified better, maybe.

[21:45] *** eviltwin_b is now known as geekosaur

[21:46] <pmichaud> however, that page already has  "are looking for lots of examples, see perl6-examples"

[21:46] <PerlJam> pmichaud: why do you think it takes so long to get out of the basics?

[21:46] <pmichaud> PerlJam: Nature of the beast.  I suspect that's true for any language, not just p6.

[21:47] <pmichaud> PerlJam: think about how many college-level lectures it takes before students are able to write programs in a new (to them) language

[21:47] <PerlJam> pmichaud: It seems to me that with some judicious omission you could wend a path out of the basics relatively quickly, then introduce the omitted concepts later when you're covering something that needs them.

[21:47] <uvtc> pmichaud, *Right*. I was hoping for the mostly harmless docs to be a distillation of examples that someone could work through in a reasonable amount of time and end up with a grasp of the basics.

[21:48] <uvtc> PerlJam,++

[21:48] <pmichaud> I think that perl6-examples (which was somewhat stale until the oslo hackathon) is aiming for the same sort of thing

[21:48] <uvtc> PerlJam++

[21:48] <pmichaud> PerlJam: "judicious omission" is the really hard part, though, if you don't have an audience handy to let you know when your "judicious omission" ends up being the hurdle

[21:48] <uvtc> pmichaud, perl6-examples looks pretty huge to me. You want to be able to point new users to a concise set of examples that will guide them through learning Perl 6. Not just a giant collection of examples.

[21:49] <pmichaud> uvtc: I'm saying that perl6-examples needs a reorganization, yes.

[21:49] <PerlJam> pmichaud: what I just described is how I remeber every math lecture I was ever in:  "Here's how you do X (but really I'm lying to you and we'll tell you to do X correctly in Calc. III)"

[21:49] <PerlJam> or some such

[21:49] <pmichaud> PerlJam: sure, but each math lecture tends to cover one very small topic

[21:49] <pmichaud> (more)

[21:49] <pmichaud> Consider that to get through Calculus I takes  on the order of 47 hours

[21:49] <pmichaud> of lecture time

[21:50] *** bluescreen10 left
[21:50] <pmichaud> if you just take the first 20% of the course, that's about 9 hours of lecture time

[21:50] <lichtkind> uvtc: where you get the #=> syntax from?

[21:50] <uvtc> pmichaud, perhaps what would help you is to create a sort of syllabus --- organize how you might group topics (one per screencast), include subtopics you plan to cover, and post a gist here of the overview. Then you could get feedback aot.

[21:51] <pmichaud> uvtc: well, in some sense a syllabus just looks like the table of contents for Learning Perl or Programming Perl, but revised for P6

[21:51] <uvtc> lichtkind, Not sure. I may have made it up? Seemed appropriate.

[21:52] <uvtc> pmichaud, Right. I suggested it because you said writing wasn't your forte. So, write the ToC, see how everyone here feels about it, then start the screencasts.

[21:53] <PerlJam> pmichaud: stealing ideas from others is always encouraged :)

[21:53] <pmichaud> sure... my response is that it still requires hours of screencasts.  for me, those are (precious) hours that I can either use screencasting or that I can use to fix bugs and continue some of the heavy programming lifting for rakudo 

[21:53] <PerlJam> pmichaud: how long would it take to do a single screencast do you think?  (total time)

[21:54] <lichtkind> uvtc: just wanted know if its a kind of standard

[21:54] <pmichaud> also, I suspect that there's at least a 3x factor involved for good screencasting -- i.e., a 1-hour screencast requires about 2 addt'l hours of prep

[21:54] <pmichaud> well, prep and/or post-edit

[21:54] <PerlJam> A good screencast won't be 1 hour long :)

[21:54] <PerlJam> but I agree with your estimation.

[21:54] <pmichaud> see my point earlier about lecturing

[21:54] *** alester left
[21:55] <PerlJam> though the factor of 3 probably decreases with time.

[21:55] <pmichaud> there's a reason that college courses use up 40+ hours of lecture/contact time

[21:56] <pmichaud> one can do smaller screencasts -- e.g., one screencast per subchapter of the syllabus... but that doesn't reduce the overall amount of time needed to cover the topics

[21:57] <PerlJam> pmichaud: Sure, just amortize it over a year or two.

[21:58] <uvtc> pmichaud, you may find that, once you've gotten yourself set up, they go pretty quick. A 5-minute one here, 10-minute one there. There could be a wiki page to categorize them, sorta like http://wiki.perl6.org/Categorized%20External%20Articles .

[21:58] <PerlJam> It feels like you're looking at the mountain and saying "that's too big" rather than looking at the steps in front of you an saying "I can manage that".

[21:59] <PerlJam> sure it takes away from Perl 6 hacking (or other activities), but at (say) 30 minutes a week, it's probably worth it.

[21:59] *** geekosaur left
[21:59] *** eviltwin_b joined
[21:59] <pmichaud> PerlJam: given that my p6 hacking over the last eight months has averaged about 30 minutes per week.... that's saying a lot.

[21:59] *** eviltwin_b is now known as geekosaur

[21:59] <PerlJam> pmichaud: okay, perhaps I'm being a bit optimistic  :)

[21:59] <uvtc> pmichaud, There's another hidden value in doing them: someone may come after you and transcribe them. :)

[22:00] <PerlJam> uvtc: or someone else may take up the torch!

[22:00] <pmichaud> uvtc: I'm not disputing they'd be valuable.  I'm disputing my $tuit availability to make it happen.

[22:01] <PerlJam> pmichaud: there's the rub.   I'd encourage you to do the screencasts because I know you'd be excellent at it, but there's only so many hours in the day.

[22:01] <uvtc> pmichaud, Well, I don't mean to try and convince you. All I can say is that not having user docs implicitly sends a message of "not ready yet". And you're good at exposition.

[22:03] <PerlJam> though if someone could plan out a series of screencasts and get a little community feedback, I wonder if we could convince sazbgab to deliver them.

[22:03] <pmichaud> I agree with you that not having user docs is a problem.  I'm not sure I'm in a position to directly address that problem as things stand now.  If there's an overwhelming sense from the rakudo team that my time would be best spent working on userdocs/screencasts, I'd likely be amenable to that.

[22:03] <PerlJam> pmichaud: if that means less hacking from you, I'm totally against it ;)

[22:04] <pmichaud> but I'm pretty sure that people would prefer me to do (1) critical regex engine fixes, (2) finish documenting lists / S07   first

[22:04] *** NamelessTee left
[22:04] <PerlJam> yep

[22:04] <pmichaud> PerlJam: it absolutely would mean less core code generation and hacking from me, as things stand now in my personal life.

[22:05] <uvtc> IMO, user docs > screencasts.

[22:05] <uvtc> Screencasts take longer to get information from. I think they came up because Pm suggested having lectures taped.

[22:05] <uvtc> (Erm. Recorded. Did I say taped? No, I'm not old enough to remember "tape".)

[22:06] * PerlJam wonders if we can get Salman Khan to do some Perl 6 screencasts ;)

[22:07] <pmichaud> uvtc: anyway, your suggestions are duly noted and very much appreciated.  This conversation has been helpful, to me at least.  I don't know that we have any immediate answers for what we can do differently in our current situation, but at least there's some agreement on the issues.

[22:07] <masak> PerlJam: that would be awesome.

[22:08] <pmichaud> I have to head off now.  if anyone reading logs/backscroll has comments, I'll try to remember to read the backscroll (or email/msg me them directly :)

[22:08] <pmichaud> afk  #errands

[22:08] <PerlJam> I would be *really* awesome if we had a Perl 6 learning site that was just like khanacademy.org

[22:09] *** uvtc left
[22:09] *** bluescreen10 joined
[22:10] <PerlJam> oops, home time for me.

[22:10] * PerlJam *poof*

[22:11] <masak> 'night, #perl6

[22:12] *** wolfman2000 left
[22:16] *** eviltwin_b joined
[22:16] *** geekosaur left
[22:16] *** eviltwin_b is now known as geekosaur

[22:30] *** mspaulding left
[22:31] *** thou left
[22:34] <dalek> tablets: f19d179 | (Herbert Breunung)++ | docs/appendix-f-faq.txt:

[22:34] <dalek> tablets: some questions for the faq

[22:34] <dalek> tablets: review: https://github.com/perl6/tablets/commit/f19d179cc2

[22:34] <dalek> tablets: 3d5674f | (Herbert Breunung)++ | docs/appendix-f-faq.txt:

[22:34] <dalek> tablets: format faq

[22:34] <dalek> tablets: review: https://github.com/perl6/tablets/commit/3d5674f490

[22:34] <dalek> tablets: 51625b1 | (Herbert Breunung)++ | docs/appendix- (2 files):

[22:34] <dalek> tablets: still more format fixes and more to come

[22:34] <dalek> tablets: review: https://github.com/perl6/tablets/commit/51625b1f05

[22:39] *** mtk left
[22:44] *** skids joined
[22:46] *** eviltwin_b joined
[22:46] *** geekosaur left
[22:46] <rurban> There is regression in S05-modifier/counted.rakudo tests 71-80 matched values 1-7

[22:46] *** poincare101 joined
[22:51] <dalek> tablets: 436fded | (Herbert Breunung)++ | docs/ (2 files):

[22:51] <dalek> tablets: all G links are now formatted

[22:51] <dalek> tablets: review: https://github.com/perl6/tablets/commit/436fdedd01

[22:57] *** adu left
[22:59] *** eviltwin_b left
[23:02] *** snearch left
[23:03] *** geekosaur joined
[23:05] *** whiteknight joined
[23:15] *** geekosaur left
[23:16] *** geekosaur joined
[23:19] *** araujo left
[23:19] *** eviltwin_b joined
[23:19] *** geekosaur left
[23:19] *** eviltwin_b is now known as geekosaur

[23:30] *** eviltwin_b joined
[23:30] *** geekosaur left
[23:31] *** eviltwin_b is now known as geekosaur

[23:46] *** geekosaur left
[23:46] *** eviltwin_b joined
[23:46] *** eviltwin_b is now known as geekosaur

