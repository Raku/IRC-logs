[00:03] *** rurban_ left
[00:21] *** wamba left
[00:28] *** takesako left
[00:32] <jnthn> phenny: tell pmurias !cursor_next handles it; the bstack survives and it hands back a 1 for restart, which makes the generated code jump straight to fail (and thus it backtracks and produces the next feasible cursor)

[00:32] <phenny> jnthn: I'll pass that on when pmurias is around.

[00:32] <phenny> jnthn: 24 Nov 08:35Z <moritz> tell jnthn currently nqp::can(module { }, 'something') dies; that blocks my current sink efforts; any idea how to fix that?

[00:41] *** mtk left
[00:59] *** whiteknight left
[01:00] *** nebuchadnezzar joined
[01:00] *** grondilu joined
[01:01] <grondilu> jnthn: with zavolaj, it's not possible to send a Buf as char* string, is it?

[01:02] <arnsholt> Nope

[01:03] <arnsholt> If you need to send arbitrary byte arrays to C, you'll have to use CArray[int] (and do the byte packing yourself) ATM

[01:03] <arnsholt> It's a known sore spot, unfortunately

[01:15] *** rurban_ joined
[01:23] *** HarryS left
[01:23] *** rafl left
[01:23] *** rafl joined
[01:23] *** tomaw joined
[01:25] *** HarryS joined
[01:25] *** HarryS left
[01:44] *** kurahaupo joined
[01:53] *** cognominal joined
[02:02] *** kurahaupo left
[02:04] *** PacoAir left
[02:15] *** jaldhar left
[02:17] *** kurahaupo joined
[02:20] *** grondilu left
[02:23] *** HarryS joined
[02:29] *** tokuhiro_ left
[02:29] *** tokuhiro_ joined
[02:34] *** FROGGS__ joined
[02:38] *** FROGGS_ left
[02:38] *** Exodist joined
[02:49] *** Kharec left
[02:54] *** jaldhar joined
[02:59] *** tokuhiro_ left
[03:00] *** tokuhiro_ joined
[03:03] *** ryutin joined
[03:08] *** kurahaupo left
[03:21] *** replore joined
[03:38] *** cognominal left
[03:39] *** rurban_ left
[03:47] *** thou joined
[03:49] *** tokuhiro_ left
[03:50] *** tokuhiro_ joined
[03:53] *** raiph joined
[04:16] *** fgomez left
[04:22] *** benabik left
[04:23] *** benabik joined
[04:26] *** ryutin left
[04:27] *** replore left
[04:28] *** fgomez joined
[04:36] *** Psyche^ joined
[04:39] *** Patterner left
[04:39] *** Psyche^ is now known as Patterner

[04:50] *** replore_ joined
[05:04] *** cooper_ joined
[05:05] *** cooper_ is now known as cooper

[05:21] *** Chillance left
[05:24] *** telex left
[05:31] *** replore_ left
[05:35] *** replore_ joined
[05:41] *** telex joined
[05:42] *** xilo_ left
[05:45] *** replore_ left
[06:01] *** benabik_ joined
[06:02] *** Gruber joined
[06:04] *** exodist_ joined
[06:05] *** [Coke]_ joined
[06:05] *** mj41_ joined
[06:05] *** pmichaud_ joined
[06:06] *** rjbs- joined
[06:06] *** Gothmog__ joined
[06:10] *** cibs left
[06:10] *** telex left
[06:10] *** Khisanth left
[06:10] *** kcwu left
[06:10] *** lorn left
[06:10] *** thou left
[06:10] *** colomon left
[06:10] *** prammer left
[06:10] *** geekosaur left
[06:10] *** rurban left
[06:10] *** cooper left
[06:10] *** sivoais left
[06:10] *** Tene left
[06:10] *** _ilbot left
[06:10] *** raiph left
[06:10] *** REPLeffect left
[06:10] *** benabik left
[06:10] *** Exodist left
[06:10] *** xilo left
[06:10] *** ruoso left
[06:10] *** Gothmog__ is now known as Gothmog_

[06:10] *** benabik_ is now known as benabik

[06:11] *** telex joined
[06:12] *** Woodi joined
[06:12] *** Yappocall_ joined
[06:12] *** p6eval joined
[06:19] *** cibs joined
[06:19] *** Krunch joined
[06:19] *** cooper joined
[06:19] *** sivoais joined
[06:19] *** Tene joined
[06:19] *** _ilbot joined
[06:19] *** kst joined
[06:19] *** c1sung joined
[06:19] *** geekosaur joined
[06:19] *** rurban joined
[06:19] *** s1n joined
[06:19] *** twinshadow joined
[06:19] *** rummik joined
[06:19] *** tff joined
[06:19] *** groky joined
[06:19] *** jfried joined
[06:19] *** Ulti joined
[06:19] *** lestrrat joined
[06:20] *** ChanServ sets mode: +v p6eval

[06:21] *** xilo_ joined
[06:21] *** thou joined
[06:21] *** colomon joined
[06:21] *** prammer joined
[06:21] *** Pompel joined
[06:21] *** timotimo joined
[06:21] *** krunen joined
[06:21] *** ironcamel joined
[06:21] *** hugme joined
[06:21] *** Util joined
[06:21] *** doy joined
[06:21] *** pjcj joined
[06:21] *** rhr joined
[06:21] *** charsbar_____ joined
[06:21] *** `patch` joined
[06:21] *** cameron.freenode.net sets mode: +v hugme

[06:21] *** ruoso joined
[06:21] *** replore joined
[06:21] *** Khisanth joined
[06:21] *** kcwu joined
[06:21] *** lorn joined
[06:22] *** crazedpsyc joined
[06:22] *** ggoebel joined
[06:22] *** sorear joined
[06:22] *** tadzik joined
[06:22] *** Hor|zon joined
[06:22] *** quietfanatic joined
[06:22] *** szbalint joined
[06:22] *** shachaf joined
[06:22] *** smash joined
[06:22] *** replore is now known as 3JTAAA0LC

[06:22] *** REPLeffect joined
[06:24] *** sivoais left
[06:25] *** 3JTAAA0LC left
[06:25] *** sivoais joined
[06:33] <TimToady> bad net weather today...

[06:35] *** replore_ joined
[06:56] *** raiph joined
[07:02] *** cognominal joined
[07:10] *** replore_ left
[07:14] *** replore joined
[07:25] *** replore left
[07:25] *** Fuad joined
[07:25] *** fgomez left
[07:26] <Fuad> Hi, folks.

[07:28] <sorear> Heya Fuad.

[07:30] *** SamuraiJack joined
[07:35] <moritz> \o

[07:35] <phenny> moritz: 24 Nov 23:55Z <FROGGS_> ask moritz if he can please look at https://github.com/perl6/nqp/commits/throw_unrecognized_metachar and https://github.com/rakudo/rakudo/pull/90

[07:40] <moritz> FROGGS__: if the branch works, I'm fine with merging (I'm having trouble building NQP right now :( )

[07:40] *** Fuad left
[07:42] *** thou left
[07:44] *** replore joined
[07:48] *** replore left
[07:52] *** fgomez joined
[08:01] *** rindolf joined
[08:06] *** drbean joined
[08:11] *** GlitchMr joined
[08:13] *** wamba joined
[08:16] *** grondilu joined
[08:17] <grondilu> rn: die "was expecting HOSTNAME" unless %*ENV<HOSTNAME> :exists

[08:17] <p6eval> niecza v22-36-g19fa03a: OUTPUT«Unhandled exception: was expecting HOSTNAME␤  at /home/p6eval/niecza/lib/CORE.setting line 1443 (die @ 5) ␤  at /tmp/8pKfcfiLJQ line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4211 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting…

[08:17] <p6eval> ..rakudo 50be5d: OUTPUT«was expecting HOSTNAME␤  in block  at /tmp/7I_c_99q2L:1␤␤»

[08:18] <dalek> nqp: bc22f6b | (Tobias Leich)++ | src/QRegex/P6Regex/Grammar.nqp:

[08:18] <dalek> nqp: throwing warning from method to support typed exceptions

[08:18] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bc22f6bae3

[08:19] <dalek> rakudo/nom: 784cb73 | (Tobias Leich)++ | / (3 files):

[08:20] <dalek> rakudo/nom: throwing typed exception for unrecognized metacharacters in regexes

[08:20] <dalek> rakudo/nom: 

[08:20] <dalek> rakudo/nom: bumps NQP revision

[08:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/784cb73856

[08:21] *** fgomez left
[08:22] <moritz> FROGGS__++

[08:36] *** cognominal left
[08:38] <dalek> roast: fcc3f59 | moritz++ | S05-metasyntax/unknown.t:

[08:38] <dalek> roast: robuster tests for RT #77110, #77386

[08:38] <dalek> roast: review: https://github.com/perl6/roast/commit/fcc3f59453

[08:44] *** cognominal joined
[08:44] *** cognominal left
[08:44] *** cognominal joined
[08:54] *** kurahaupo joined
[08:55] *** fgomez joined
[09:08] <moritz> std: / /

[09:08] <p6eval> std a8bc48f: OUTPUT«===SORRY!===␤Null regex not allowed at /tmp/YisX7SNB99 line 1:␤------> / /⏏<EOL>␤Check failed␤FAILED 00:00 41m␤»

[09:17] *** zby_home_ joined
[09:22] *** fgomez left
[09:26] <dalek> nqp: c0ddc72 | moritz++ | src/QRegex/P6Regex/Grammar.nqp:

[09:26] <dalek> nqp: add an indirection for "null pattern not allowed" errors

[09:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c0ddc72b11

[09:26] *** kurahaupo left
[09:27] <dalek> rakudo/nom: e6e1585 | moritz++ | / (3 files):

[09:27] <dalek> rakudo/nom: typed exception for "Null regex not allowed"

[09:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e6e1585a0d

[09:28] <FROGGS__> hmmm, I got an error message when trying to do .throw_unrecognized_metachar, I had to prepend 'self'

[09:28] *** FROGGS__ is now known as FROGGS

[09:29] <moritz> .foo defaults to $_

[09:29] <moritz> $.foo calls the method on self

[09:29] <moritz> FROGGS: oh, I see what you mean. The difference is that I call it as a grammar rule directly, not inside a {} block

[09:30] <FROGGS> ahh, true

[09:36] <sorear> \o/ niecza just built from clean and passed internal tests

[09:36] <sorear> time to commit the new makefile &c

[09:37] <FROGGS> sorear++

[09:37] <moritz> \o/

[09:42] *** fgomez joined
[09:43] <dalek> niecza: 9c2a362 | sorear++ | / (6 files):

[09:43] <dalek> niecza: Finish bootstrapping of bootstrap changes

[09:43] <dalek> niecza: review: https://github.com/sorear/niecza/commit/9c2a362516

[09:45] <sorear> tomorrow: some more polish.  precompile system modules, add "make install" and "make boot-from-installed", steal the csharp.exe line editor (which sadly is neither readline nor editline) for the Niecza REPL

[09:45] <sorear> get the Niecza REPL working again

[09:45] <sorear> monday: v24!

[09:46] <sorear> 2 years since the inital announcement D:

[09:46] <moritz> wow

[09:47] <moritz> how time flies, and all that

[09:50] *** dbr joined
[10:03] <moritz> sorear: with parallel make, it fails with

[10:03] <moritz> NIECZA_KEEP_IL=1 mono boot/run/Niecza.exe --obj-dir run -I src -C GetOptLong

[10:03] <moritz> Unhandled exception: System.TypeLoadException: Could not load type 'NieczaGrammar.6fc92cec-63fa-4e8b-84cb-eafc7d123c95'.

[10:03] <moritz> serial make works

[10:12] <sorear> -jwhat?

[10:12] <moritz> -j4

[10:12] * sorear tries a fix

[10:15] <dalek> niecza: 4eaf916 | sorear++ | Makefile:

[10:15] <dalek> niecza: Dependency generation fix

[10:15] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4eaf91601d

[10:15] <sorear> -j2 succeeded with that

[10:16] * moritz tries again

[10:18] <moritz> speaking of which

[10:19] <moritz> is there any literature on how to design a build system?

[10:19] <moritz> I mean, tool indepent

[10:19] <moritz> *independent

[10:19] <moritz> just like there's language-agnostic literature on software construction

[10:21] <moritz> sorear: build succeeded with make -j4

[10:21] <sorear> I am not aware of any, but I haven't looked very well

[10:21] <sorear> yay \o/

[10:24] <sorear> coming month: exploration for nativecall and C runtime

[10:24] <moritz> WANT

[10:28] <sorear> but for now, I think sleep would be prudent

[10:28] <sorear> &

[10:28] <moritz> good night, sleep of parallel builds and C runtime

[10:33] *** cognominal left
[10:39] *** cognominal joined
[10:43] <FROGGS> wow, having nativecall in niecza too would be awesome

[10:53] *** spider-mario joined
[11:05] *** Su-Shee_ joined
[11:06] *** kurahaupo joined
[11:08] *** Kharec joined
[11:09] *** Su-Shee left
[11:14] *** birdwindupbird joined
[11:24] *** MayDaniel joined
[11:30] *** cognominal left
[11:30] *** cognominal joined
[11:39] *** tokuhiro_ left
[11:40] *** tokuhiro_ joined
[11:51] *** kurahaupo left
[11:54] *** snearch joined
[11:59] *** kaare_ joined
[12:03] <dalek> roast: 49868a5 | (Tobias Leich)++ | S32-exceptions/misc.t:

[12:03] <dalek> roast: RT #77118, test for obsolete use of diamond operator

[12:03] <dalek> roast: 

[12:03] <dalek> roast: https://rt.perl.org/rt3/Ticket/Display.html?id=77118

[12:03] <dalek> roast: review: https://github.com/perl6/roast/commit/49868a5291

[12:41] *** Su-Shee_ is now known as Su-Shee

[13:00] *** colomon left
[13:04] *** cognominal left
[13:07] *** azawawi joined
[13:07] <azawawi> star: say "Hello #perl6!";

[13:07] <p6eval> star 2012.10: OUTPUT«Hello #perl6!␤»

[13:08] <moritz> \o

[13:11] <azawawi> 

[13:11] *** azawawi left
[13:16] *** nyuszika7h left
[13:16] *** nyuszika7h joined
[13:19] <felher> Is "TEST_JOBS=8 make spectest" in Rakudo supposed to give me a "Result: PASSED"? Because I get http://bpaste.net/show/60263/

[13:20] <moritz> felher: did you build with libicu?

[13:21] *** PacoAir joined
[13:23] <felher> moritz: I think so. I didn't specify anything about libicu though. How do I check?

[13:23] <moritz> $ ./install/bin/parrot_config has_icu

[13:23] <moritz> 1

[13:24] <felher> moritz: yep, i get a 1, too :)

[13:24] <moritz> weird

[13:24] <moritz> cause I have ICU too, and all tests pass here

[13:25] <moritz> felher: what's the revision of your t/spec checkout?

[13:26] <felher> moritz: top commit: 49868a5291088819db1e3a0f401b2e7c7523f97e (from today)

[13:27] <moritz> hm, so it's not stuck

[13:28] <felher> moritz: right

[13:28] *** wamba left
[13:28] <felher> moritz: well, i'll do a fresh checkout of Rakudo and try again :)

[13:37] *** dayangkun joined
[13:38] *** dayangkun left
[14:07] *** hoelzro|away is now known as hoelzro

[14:21] *** wamba joined
[14:21] *** pmurias joined
[14:33] *** am0c joined
[14:38] *** ruoso left
[14:39] *** ruoso joined
[15:06] *** SamuraiJack left
[15:11] *** SamuraiJack joined
[15:16] <felher> Would someone be so kind as to review, and maybe even apply, a patch about letting Rakudo handle tabs in heredocs? This patch has some problems. One is that it always counts tabs as 8 spaces (according to spec, it should be $?TABSTOP // 8, but I didn't know how to do that, since $?TABSTOP doesn't seem to exist there). The other is that there might already be a function that counts the number of a particular

[15:16] <felher> character in a string, which should be used instead of the while loop.

[15:16] <felher> patch : https://gist.github.com/4143705/e2a5a9d41e1cbff9f6ee94c43172d9a3a0677391

[15:17] <felher> This patch doesn't introduce any new spectest failures on my machine.

[15:20] *** hoelzro is now known as hoelzro|away

[15:25] *** bowtie joined
[15:36] <moritz> felher: I believe the patch is not correct

[15:36] <felher> moritz: how so?

[15:36] <moritz> felher: if you have two blanks followed by a tab, that should count as an indentation of 8 spaces, not 10

[15:38] <felher> moritz: if this is the case, then the patch is incorrect, yes. I guess i have misunderstood "Hard tabs will be assumed to be ($?TABSTOP // 8) spaces, but as long as tabs and spaces are used consistently that doesn't matter." from the specs, then?

[15:39] <moritz> felher: a tab doesn't mean $?TABSTOP spaces, but alignment to the next multiple of $?TABSTOP

[15:42] <felher> moritz: well, I know that this is the case in editors and such. I misunderstood the spec then, because i though the above sentence states otherwise. My bad :)

[15:42] <felher> moritz: but thanks for the clarification :)

[15:42] <moritz> felher: I guess the spec isn't very forthcoming about it

[15:43] <moritz> felher: the idea is simply that the parser should see the indention the same as the terminal or text editor

[15:44] <felher> moritz: okay. I agree :)

[15:45] *** spider-mario left
[15:46] <dalek> specs: 562cc05 | moritz++ | S02-bits.pod:

[15:46] <dalek> specs: [S02] clarify tabstop semantics

[15:46] <dalek> specs: 

[15:46] <dalek> specs: in accordance to how most consoles and text editors interpret them.

[15:46] <dalek> specs: felher++

[15:46] <dalek> specs: review: https://github.com/perl6/specs/commit/562cc05409

[15:46] <felher> moritz: thanks :)

[15:49] *** Chillance joined
[15:56] *** sisar joined
[15:57] *** Kharec left
[16:31] *** snearch left
[16:35] *** rurban_ joined
[16:53] *** thou joined
[16:55] <dalek> roast: e87efa1 | (Tobias Leich)++ | S32-exceptions/misc.t:

[16:55] <dalek> roast: RT #76742, added test for 'does with type object'

[16:55] <dalek> roast: 

[16:55] <dalek> roast: https://rt.perl.org/rt3/Ticket/Display.html?id=76742

[16:55] <dalek> roast: review: https://github.com/perl6/roast/commit/e87efa1901

[17:00] *** birdwindupbird left
[17:18] *** au joined
[17:23] *** kurahaupo joined
[17:24] *** rurban_ left
[17:34] *** cognominal joined
[17:51] *** colomon joined
[17:53] <dalek> roast: 47eec67 | (Tobias Leich)++ | S32-exceptions/misc.t:

[17:53] <dalek> roast: RT #76956, linked ticket (placeholder in mainline)

[17:53] <dalek> roast: 

[17:53] <dalek> roast: https://rt.perl.org/rt3/Ticket/Display.html?id=76956

[17:53] <dalek> roast: review: https://github.com/perl6/roast/commit/47eec67fb7

[18:02] *** kurahaupo left
[18:03] *** benabik left
[18:06] *** cognominal left
[18:13] *** cognominal joined
[18:14] *** rurban_ joined
[18:19] *** wamba left
[18:19] *** wamba joined
[18:20] *** popl joined
[18:22] <dalek> perl6-bench: 6347060 | (Geoffrey Broadwell)++ | bench:

[18:22] <dalek> perl6-bench: Fix missed change in previous refactor of automatic tag extraction

[18:22] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/6347060ea9

[18:22] <dalek> perl6-bench: 7b0b37f | (Geoffrey Broadwell)++ | components.json:

[18:22] <dalek> perl6-bench: 'make realclean' before 'make' when building niecza

[18:22] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/7b0b37fc8f

[18:22] <dalek> perl6-bench: ce24bc6 | (Geoffrey Broadwell)++ | timeall:

[18:22] <dalek> perl6-bench: Don't override niecza dir when timing it

[18:22] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/ce24bc6bb5

[18:25] <japhb> phenny, tell sorear This micro-benchmark is particularly slow on Niecza:  my $s = ""; for (1 .. 100000) { $s ~= "x" }

[18:25] <phenny> japhb: I'll pass that on when sorear is around.

[18:25] <japhb> (Yes, I know the parens are unnecessary there.  As with several of the benchmarks in perl6-bench, they exist to try to minimize the Hamming distance from the Perl 5 version.)

[18:26] <japhb> Actually, I guess that's Levenshtein distance.  :-)

[18:27] *** cognominal left
[18:33] *** cognominal joined
[18:44] <popl> Leven*shteen*!

[18:44] <popl> ;)

[18:44] *** cognominal left
[18:51] *** cognominal joined
[18:59] *** cognominal left
[19:03] *** cognominal joined
[19:06] *** SamuraiJack left
[19:14] <sorear> good * #perl6

[19:14] <phenny> sorear: 18:25Z <japhb> tell sorear This micro-benchmark is particularly slow on Niecza:  my $s = ""; for (1 .. 100000) { $s ~= "x" }

[19:18] *** cognominal left
[19:27] *** rurban_ left
[19:37] *** rindolf left
[19:44] <grondilu> what's the syntax already for named unicode characters? 

[19:46] <grondilu> like if I want to display the 'BLACK STAR' one?

[19:53] <sorear> n: say "\c[BLACK STAR]"

[19:53] <p6eval> niecza v22-37-g9c2a362: OUTPUT«★␤»

[19:55] <grondilu> sorear: thanks

[19:55] *** telex left
[19:56] *** telex joined
[19:57] <FROGGS> nr: say "\c[65]"

[19:57] <p6eval> rakudo e6e158, niecza v22-37-g9c2a362: OUTPUT«A␤»

[20:08] *** spider-mario joined
[20:09] *** am0c left
[20:19] <grondilu> in S32/Temporal, ".truncated-to" is mentionned but in rakudo it seems to be ".truncate"

[20:19] <grondilu> rn: say now.truncate: :day;

[20:20] <p6eval> niecza v22-37-g9c2a362: OUTPUT«Unhandled exception: Unable to resolve method truncate in type Instant␤  at /tmp/WEFl4eCcMj line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4211 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4212 (module-CORE @ 578) ␤  at…

[20:20] <p6eval> ..rakudo e6e158: OUTPUT«1353874833␤»

[20:20] <grondilu> n: say now.truncated-to: :day;

[20:20] <p6eval> niecza v22-37-g9c2a362: OUTPUT«Unhandled exception: Unable to resolve method truncated-to in type Instant␤  at /tmp/cNRhmvvcB5 line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4211 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4212 (module-CORE @ 578) ␤…

[20:28] *** sftp left
[20:32] *** sftp joined
[20:35] <moritz> r: say DateTime.now.truncated-to(:day).Instant

[20:35] <p6eval> rakudo e6e158: OUTPUT«Instant:1353805235␤»

[20:35] <moritz> r: say DateTime.now.truncated-to(:day)

[20:35] <p6eval> rakudo e6e158: OUTPUT«DateTime.new(year => 2012, month => 11, day => 25, hour => 0, minute => 0, second => 0, timezone => $*TZ)␤»

[20:39] <grondilu> r: say .WHAT for now, DateTime.now;

[20:39] <p6eval> rakudo e6e158: OUTPUT«Instant()␤DateTime()␤»

[20:39] <grondilu> ok

[20:45] *** cooper left
[20:48] <dalek> niecza: e67f09f | sorear++ | src/niecza:

[20:48] <dalek> niecza: Hopefully fix REPL startup crash

[20:48] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e67f09fd35

[20:53] *** raiph left
[21:00] *** zby_home_ left
[21:02] *** GlitchMr left
[21:12] <felher> Hm, why doesn't the following die due to type errors?

[21:12] <felher> r: my (Str $a, Str $b) = "blar", 3

[21:12] <p6eval> rakudo e6e158:  ( no output )

[21:12] <tadzik> r: my Str $a = 3

[21:12] <p6eval> rakudo e6e158: OUTPUT«Type check failed in assignment to '$a'; expected 'Str' but got 'Int'␤  in block  at /tmp/_TXQVQdWz6:1␤␤»

[21:12] <tadzik> r: my (Str $a, Str $b) = ("blar", 3)

[21:12] <p6eval> rakudo e6e158:  ( no output )

[21:12] <tadzik> r: my (Str $a, Str $b) = "blar", 3; say $b.perl

[21:12] <p6eval> rakudo e6e158: OUTPUT«3␤»

[21:13] <tadzik> ok, dunno :)

[21:13] <FROGGS> r: my (Str $a, Str $b) = "blar", 3; say $b.WHAT

[21:13] <felher> :)

[21:13] <p6eval> rakudo e6e158: OUTPUT«Int()␤»

[21:13] <FROGGS> hmmm

[21:13] <tadzik> yeah, it lies

[21:13] <tadzik> it probably loses type checks if you declare stuff massively;

[21:13] <tadzik> r: my (Str $a, Str $b); $a = 5; say $a.WHAT

[21:13] <p6eval> rakudo e6e158: OUTPUT«Int()␤»

[21:14] <tadzik> r: my (Str $a); $a = 5; say $a.WHAT

[21:14] <p6eval> rakudo e6e158: OUTPUT«Int()␤»

[21:14] <tadzik> r: my Str $a; $a = 5; say $a.WHAT

[21:14] <p6eval> rakudo e6e158: OUTPUT«Type check failed in assignment to '$a'; expected 'Str' but got 'Int'␤  in block  at /tmp/PkQusTacHb:1␤␤»

[21:14] <tadzik> r: use Test; eval_dies_ok 'my (Str $a); $a = 5';

[21:14] <p6eval> rakudo e6e158: OUTPUT«not ok 1 - ␤»

[21:14] <tadzik> there, a testcase :)

[21:17] *** kaare_ left
[21:20] <felher> I will submit a test and submit a rakudo bug tomorrow :)  Now I really need to get $work done and then go to sleep :)

[21:20] <felher> good night, #perl6 :)

[21:24] *** Kharec joined
[21:33] *** rindolf joined
[21:54] <ggoebel> niecza revival, parrot green threads coming to nqp and rakudo, steady rakudo improvements... it must be Christmas again :-)

[21:57] <sorear> o/

[21:57] <japhb> o/

[21:58] *** Kharec left
[21:59] <sorear> japhb: is your benchmark intended to motivate me to add ropes? :D

[21:59] *** Kharec joined
[22:00] <japhb> sorear, well that would certainly be awesome, but no, it's just surprisingly out of whack with the niecza's performance on all the other benchmarks.  I figured there might be some "obvious in retrospect" problem there.

[22:01] <japhb> Especially since I added that benchmark because *rakudo* had gotten a bad rap for its performance doing that.

[22:02] <japhb> (v22 niecza was taking 22x as long as 2012.11 rakudo, even after subtracting startup time)

[22:02] <sorear> oh huh

[22:03] <sorear> japhb: is the behavior much different if you use a counting loop rather than a range loop?

[22:04] <japhb> sorear, I'll check

[22:04] <sorear> range loops are known to be silly slow in niecza

[22:06] <japhb> sorear, well, a lot of the other benchmarks use range loops as well, and they don't display the problem to the degree this one does.

[22:07] *** popl left
[22:09] <dalek> perl6-roast-data: c4033a5 | coke++ | / (4 files):

[22:09] <dalek> perl6-roast-data: today (automated commit)

[22:09] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/c4033a55fc

[22:11] <japhb> OK, changing 'for (1 .. 100000)' to 'my $i = 0; while ++$i <= 100000' changed the total run time from 68.443s to 55.366s (startup time is around 1.7-1.75 seconds on this machine)

[22:11] <japhb> Meanwhile, rakudo does the while version in 6.894 s

[22:12] <tadzik> which benchmark is that?

[22:12] <japhb> (rakudo 2012.11's startup time is about .74 seconds)

[22:12] <japhb> The concat benchmark I mentioned to sorear earlier; based on harbud3's comments on reddit

[22:15] <japhb> tadzik, see https://github.com/japhb/perl6-bench/blob/master/timeall#L221

[22:23] <japhb> d'oh! hold on, need to correct the while times for niecza above; had the wrong (slower) mono in path

[22:24] <[Coke]_> sorear: today, for the first time in a while, niecza failed 3352 tests.

[22:24] *** [Coke]_ is now known as [Coke]

[22:25] <[Coke]> looks like it was on commit 4eaf916

[22:26] <sorear> japhb: clearly there is room for optimization

[22:27] <sorear> [Coke]: I'll be running some spectests later

[22:27] <[Coke]> hokay.

[22:28] <japhb> sorear, quite.  Like I said, this one was just way out of normal for the niecza's performance profile, so figured it was worth mentioning.

[22:28] <japhb> Huh.  My supposedly faster mono build is somewhat *slower*.  I wonder what's up with that?

[22:28] <sorear> japhb: what is the profile like these days? :D

[22:30] *** benabik joined
[22:30] <japhb> sorear, In several ov the micro-benchmarks it was ~10% slower than Rakudo; in a few more, 1.6-3.7x slower, and then a couple up to 9x slower.  And then this one, at 22x.

[22:30] <japhb> Mind you, those are all micro-benchmarks.

[22:31] <japhb> In the one application benchmark I have so far, it's ~ 10x *faster* than Rakudo.

[22:32] <japhb> So that leaves the question of what more I need to measure in the micro-benchmarks to capture why niecza is running away with the prize in the app benchmark.

[22:33] <japhb> FWIW, 2012.11 was a "performance jump" release for Rakudo.  In several benchmarks it is now faster than all other rakudo and niecza releases in ~14 months.

[22:34] <sorear> :(

[22:34] <japhb> Rakudo's big slowdown right now in the microbenchmarks is while loops, which have been a problem for quite some time.

[22:35] <sorear> where am I going to get a sense of purpose if we lose the speed edge?

[22:36] <japhb> I suspect that since my current suite of micro-benchmarks is heavy on for-range, speeding up that pairing would win you back the crown in several, just because the slowdown of the for-range is swamping the speedup of the block's operation.

[22:37] <flussence> before I ask a stupid question, is niecza git expected to be in a usable state right now?

[22:39] <flussence> oh, I was running it wrong. never mind

[22:39] *** leont joined
[22:43] <sorear> flussence: it wasn't yesterday but it is now

[22:43] <flussence> yeah, I had a shell alias that was doing "mono-sgen Niecza.exe" and that makes it freak out. Not sure why I had that there :)

[22:46] *** dedis joined
[22:51] *** rindolf left
[23:02] *** SSC joined
[23:03] *** ircmouser joined
[23:07] *** SSC left
[23:08] *** gootle left
[23:08] *** gootle joined
[23:09] *** MayDaniel left
[23:11] <dalek> niecza: 64f16b5 | sorear++ | / (6 files):

[23:11] <dalek> niecza: Support multiple object directories

[23:11] <dalek> niecza: 

[23:11] <dalek> niecza: It is now possible to have a per-user object cache and still share

[23:11] <dalek> niecza: precompilations of the setting and any other syste-wide installed

[23:11] <dalek> niecza: modules.

[23:11] <dalek> niecza: review: https://github.com/sorear/niecza/commit/64f16b59e5

[23:27] *** spider-mario left
[23:50] <[Coke]> n: my $r;

[23:50] <p6eval> niecza v22-39-ge67f09f: OUTPUT«Potential difficulties:␤  $r is declared but not used at /tmp/P9kGc85jpr line 1:␤------> my ⏏$r;␤␤»

[23:50] <[Coke]> n: my $r; #ok

[23:50] <p6eval> niecza v22-39-ge67f09f: OUTPUT«Potential difficulties:␤  $r is declared but not used at /tmp/H4RM2C2Jga line 1:␤------> my ⏏$r; #ok␤␤»

[23:51] <[Coke]> n: my $r #ok;

[23:51] <p6eval> niecza v22-39-ge67f09f: OUTPUT«Potential difficulties:␤  $r is declared but not used at /tmp/U7uyre1HMi line 1:␤------> my ⏏$r #ok;␤␤»

[23:51] <[Coke]> how to disable that warning?

[23:51] <flussence> n: my $r #ok not used

[23:51] <p6eval> niecza v22-39-ge67f09f: OUTPUT«Potential difficulties:␤  $r is declared but not used at /tmp/AkOHgON9_l line 1:␤------> my ⏏$r #ok not used␤␤»

[23:51] <flussence> hm.

[23:51] <flussence> std: my $r

[23:51] <p6eval> std a8bc48f: OUTPUT«ok 00:00 41m␤»

[23:52] <flussence> I dunno, it used to be a magic comment string...

[23:53] <[Coke]> n: my $r #OK no used

[23:53] <p6eval> niecza v22-39-ge67f09f: OUTPUT«Potential difficulties:␤  $r is declared but not used at /tmp/E1wmkYQswO line 1:␤------> my ⏏$r #OK no used␤␤»

[23:53] <[Coke]> n: my $r #OK not used

[23:53] <p6eval> niecza v22-39-ge67f09f:  ( no output )

[23:53] <[Coke]> flussence++

[23:57] <dalek> roast: 5a39d8b | coke++ | integration/weird-errors.t:

[23:57] <dalek> roast: avoid unused declaration warning.

[23:57] <dalek> roast: 

[23:57] <dalek> roast: (now passes on niecza)

[23:57] <dalek> roast: review: https://github.com/perl6/roast/commit/5a39d8b480

