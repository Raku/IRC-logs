[00:06] *** stopbit left
[00:19] *** cognominal left
[00:21] *** buubot_backup joined
[00:22] *** DarthGandalf joined
[00:25] *** cognominal joined
[00:30] *** Chillance left
[00:40] *** buubot_backup left
[00:41] *** buubot_backup joined
[00:44] *** tokuhiro_ joined
[00:49] *** tokuhiro_ left
[00:52] *** anuby joined
[00:52] *** am0c joined
[00:53] *** whiteknight left
[00:54] *** benabik left
[01:00] *** immortal joined
[01:00] *** immortal left
[01:00] *** immortal joined
[01:01] *** erkan left
[01:02] *** atrodo left
[01:03] *** kurahaupo1 joined
[01:08] *** hypolin joined
[01:10] *** benabik joined
[01:11] *** immortal left
[01:14] *** erkan joined
[01:14] *** erkan left
[01:14] *** erkan joined
[01:18] *** ifim left
[01:19] *** erkan left
[01:28] *** erkan joined
[01:30] *** bowtie left
[01:45] *** kurahaupo1 left
[01:48] *** erkan left
[01:48] <[Coke]> phenny: tell isBEKaml to ping rurban about cygwin parrot - cygwin was his main platform at some point.

[01:48] <phenny> [Coke]: I'll pass that on when isBEKaml is around.

[01:48] <phenny> [Coke]: 11 Nov 10:59Z <isBEKaml> tell [Coke] ok, nvm - I'm just about to give up on pugs+windows. :)

[01:53] <[Coke]> phenny: tell isBEKaml Nevermind. ;)

[01:53] <phenny> [Coke]: I'll pass that on when isBEKaml is around.

[01:53] *** fgomez left
[01:53] *** erkan joined
[01:53] *** erkan left
[01:53] *** erkan joined
[01:53] *** fgomez joined
[01:56] *** fgomez_ joined
[01:57] *** fgomez left
[02:00] *** kurahaupo joined
[02:09] *** ifim joined
[02:21] *** DarthGandalf left
[02:22] *** DarthGandalf joined
[02:24] *** clkao_ joined
[02:32] *** cognominal left
[02:35] <diakopter> [Coke]: queue up replies 'til done logbacking

[02:36] *** eternaleye left
[02:40] <diakopter> later transactions may obviate earlier ones

[02:45] *** alienswamp joined
[02:45] *** alienswamp left
[02:48] *** fgomez_ left
[02:49] *** fgomez joined
[02:51] <dalek> perl6-roast-data: 207bbe8 | coke++ | / (3 files):

[02:51] <dalek> perl6-roast-data: today (automated commit)

[02:51] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/207bbe8160

[02:51] <dalek> perl6-roast-data: 906b9f5 | coke++ | / (3 files):

[02:51] <dalek> perl6-roast-data: today (automated commit)

[02:51] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/906b9f53bd

[02:51] <dalek> perl6-roast-data: a98362d | coke++ | / (3 files):

[02:51] <dalek> perl6-roast-data: today (automated commit)

[02:51] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/a98362dbd5

[02:53] *** cognominal joined
[02:55] <[Coke]> phenny: tell sorear - niecza failed all tests today with "Unhandled exception: System.MissingMethodException: Method not found: 'Niecza.Kernel.CreateHash'."

[02:55] <phenny> [Coke]: I'll pass that on when sorear is around.

[02:55] <sorear> bah, I should fix that someday if I ever figure out how

[02:55] <phenny> sorear: 02:55Z <[Coke]> tell sorear - niecza failed all tests today with "Unhandled exception: System.MissingMethodException: Method not found: 'Niecza.Kernel.CreateHash'."

[02:58] <[Coke]> sorear: https://github.com/coke/perl6-roast-data/blob/master/niecza_summary.out has a stacktrace if that helps.

[02:58] <sorear> [Coke]: I've seen this problem before, it's a stale compiled file slipping through the cracks

[02:58] <sorear> rm -r ~/.local/share/NieczaModuleCache

[03:05] <dalek> perl6-roast-data: 1198e62 | coke++ | bin/niecza.sh:

[03:05] <dalek> perl6-roast-data: Remove stale file on every build.

[03:05] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/1198e62eca

[03:09] <[Coke]> sorear++ - 

[03:12] <sorear> what?  %FOO ||= built_foo; doesn't work in p5?

[03:21] *** DarthGandalf left
[03:21] <doy> sorear: sure it does

[03:22] <sorear> doy: Can't modify private hash in logical or assignment (||=) at -e line 1,

[03:22] <sorear> might be because my perl is ancient

[03:22] *** DarthGandalf joined
[03:23] <sorear> eval: my %FOO; sub bar { 1,2 }; %FOO ||= bar

[03:23] <buubot_backup> sorear: ERROR: Can't modify private hash in logical or assignment (||=) at (eval 20) line 2, at EOF 

[03:23] <sorear> eval: $^V

[03:23] <buubot_backup> sorear: bless( {original => "v5.16.0",qv => 1,version => [5,16,0]}, 'version' )

[03:24] <doy> sounds like a bug to me

[03:25] <doy> hmmm

[03:25] <doy> maybe not

[03:25] <doy> well

[03:25] <doy> at the very least, that's a terrible error message

[03:26] <doy> i think the problem is that || supplies scalar context

[03:27] <doy> because you can't evaluate the truth value of a list

[03:28] <doy> and that just causes all kinds of confusion because now you're treating the scalarified temporary version of that hash as an lvalue

[03:29] <doy> or something

[03:32] *** Entonian joined
[03:33] <[Coke]> sorear: https://gist.github.com/4063778 - current niecza failures

[03:36] *** Entonian left
[03:43] *** BaggioKwok joined
[03:44] * colomon has been slacking off on checking niecza spectests

[03:47] *** BaggioKwok left
[03:56] *** orafu left
[03:57] *** orafu joined
[04:07] *** gootle joined
[04:09] *** isBEKaml joined
[04:11] <isBEKaml> phenny: tell rurban that I can now build parrot+rakudo successfully on cygwin. it was a line ending issue from msysgit, installing cygwin's git and a fresh checkout resolved them all. 

[04:11] <phenny> isBEKaml: I'll pass that on when rurban is around.

[04:11] <phenny> isBEKaml: 01:48Z <[Coke]> tell isBEKaml to ping rurban about cygwin parrot - cygwin was his main platform at some point.

[04:11] <phenny> isBEKaml: 01:53Z <[Coke]> tell isBEKaml Nevermind. ;)

[04:12] *** fgomez left
[04:18] *** fgomez joined
[04:20] *** tokuhiro_ joined
[04:22] *** DarthGandalf left
[04:25] *** tokuhiro_ left
[04:26] *** DarthGandalf joined
[04:28] *** isBEKaml left
[04:42] *** cognominal left
[04:43] *** sftp left
[04:46] *** cognominal joined
[04:49] *** marloshouse left
[04:52] *** marloshouse joined
[04:55] *** Guest28559 left
[05:04] *** xinming_ joined
[05:07] *** erkan left
[05:07] *** xinming left
[05:08] *** marloshouse left
[05:08] *** am0c left
[05:17] *** am0c joined
[05:17] *** telex left
[05:22] *** DarthGandalf left
[05:23] *** telex joined
[05:24] *** Patterner left
[05:28] *** DarthGandalf joined
[05:33] *** Psyche^ joined
[05:33] *** Psyche^ is now known as Patterner

[05:41] *** scottp joined
[05:52] *** erkan joined
[05:52] *** erkan left
[05:52] *** erkan joined
[05:59] *** daniel-s joined
[06:08] *** birdwindupbird joined
[06:13] *** xinming_ left
[06:19] *** xinming joined
[06:26] *** cognominal left
[06:32] *** cognominal joined
[06:36] *** ifim left
[06:48] *** SamuraiJack joined
[06:50] *** SamuraiJack left
[06:53] *** SamuraiJack joined
[06:54] *** cognominal left
[07:00] *** cognominal joined
[07:16] *** daniel-s_ joined
[07:20] *** topo left
[07:20] *** topo joined
[07:20] *** daniel-s left
[07:21] *** jlaire left
[07:25] *** kurahaupo left
[07:26] *** jlaire joined
[07:35] *** domidumont joined
[07:47] *** domidumont left
[07:56] *** sorenso joined
[07:56] *** tokuhiro_ joined
[07:58] <moritz> \o

[08:01] *** am0c left
[08:01] *** tokuhiro_ left
[08:01] <sorear> o/

[08:01] *** am0c joined
[08:03] *** domidumont joined
[08:12] *** domidumont left
[08:13] *** domidumont joined
[08:21] *** cognominal left
[08:21] *** kst left
[08:22] *** kst joined
[08:24] *** fhelmberger joined
[08:29] *** flightrecorder joined
[08:34] *** FROGGS joined
[08:36] *** obra left
[08:36] *** clkao_ left
[08:38] *** kresike joined
[08:38] <kresike> hello all you happy perl6 people

[08:42] <FROGGS> morning

[08:44] <sorear> heya

[08:44] <tadzik> hello hello

[09:05] *** domidumont left
[09:05] *** domidumont joined
[09:11] *** domidumont left
[09:15] *** domidumont joined
[09:24] <dalek> niecza: 8864bf6 | sorear++ | lib/ (6 files):

[09:24] <dalek> niecza: Top removal: SubInfo.ctor, STable.ctor

[09:24] <dalek> niecza: review: https://github.com/sorear/niecza/commit/8864bf6117

[09:25] *** xenoterracide joined
[09:29] <xenoterracide> so today I was thinking I wonder what my ideal language would look like... I mean I'd kinda like ruby except for all of those ugly 'end' statements, (ramble) and then I thought... oh that's right the language I wish I was using looks like Perl 6. So i thought I'd pop in here and say ... keep on truckin'

[09:30] <tadzik> come join the fun :)

[09:30] <bonsaikitten> xenoterracide: so basically python, but more fun? ;)

[09:30] <sorear> welcome to #perl6, xenoterracide

[09:32] <xenoterracide> bonsaikitten: no I think I hate python more... the (ramble) was about python

[09:32] <bonsaikitten> amusing

[09:32] <tadzik> to me python just isn't exciting. It's like writing Java a bit

[09:33] <tadzik> anyway, are you writing some Perl 6 code, xenoterracide?

[09:33] <xenoterracide> about this time it also occurred to me that one of our developers either really likes python... because he's trying to make his closing braces as condensed as possible...

[09:33] <xenoterracide> or he's just being a dick

[09:33] <xenoterracide> either way I hate whitespace based... harder to read imo

[09:33] <sorear> xenoterracide: is it possible he's an elderly LISP programmer?

[09:33] <xenoterracide> tadzik: no

[09:34] <sorear> (foo

[09:34] <sorear>   (bar

[09:34] <sorear>     (baz)))

[09:34] <tadzik> oh I hate this style :)

[09:34] <xenoterracide> sorear: though I think I saw that he does lisp

[09:34] <bonsaikitten> tadzik: I prefer boring ;) exciting means someone calls me saturday morning at 6am because the pritner is on fire

[09:34] <xenoterracide> so yes

[09:34] <sorear> is standard LISP whitespace style

[09:34] <xenoterracide> a young lisp programmer

[09:34] <bonsaikitten> whitespace is mandatory anyway

[09:34] <bonsaikitten> so why not make it do something useful

[09:34] <xenoterracide> I corrected it with judicious use of perltidy

[09:35] <dalek> niecza: 3db2fe1 | sorear++ | lib/ (3 files):

[09:35] <dalek> niecza: Top removal: inferior runloop system

[09:35] <dalek> niecza: review: https://github.com/sorear/niecza/commit/3db2fe1808

[09:35] <xenoterracide> readability is useful

[09:35] <xenoterracide> unfortunately I have not seen that python accomplished that

[09:36] <huf> hey, python's pretty readable. it's just that almost everything is pretty readable.

[09:36] <huf> aint nothing special

[09:36] <moritz> OTRS source code is not pretty readable.

[09:36] <huf> OTRS?

[09:37] <xenoterracide> OTR's?

[09:37] <moritz> a bug tracker

[09:37] <sorear> I have never used python so I can't say I have an opinion on it

[09:37] <xenoterracide> I've only dabbled

[09:37] <moritz> it's written in perl 5 with no particularly advanced features

[09:37] <huf> sorear: i can read it about as well as any other language i dont know :D

[09:37] <xenoterracide> but all the python I've seen is not very good

[09:37] <tadzik> I'm doing my uni project in python now, it's okay

[09:37] <huf> sorear: not as well as a language i know. surprising :)

[09:37] <sorear> huf: yeah, all ALGOL clones read the same

[09:37] <moritz> but it's a big codebase, and uses pseudo OO designed by people who do't understand OO

[09:37] <arnsholt> Python is OK. I'm used to Perl so it annoys me a bit when I can't do things exactly as I would in Python, but as a language it's pretty good

[09:38] <moritz> and no choice of language would make such code readable

[09:38] * tadzik mumbles something about scoping

[09:38] <sorear> huf: how are you with Haskell or the APL family? :p

[09:38] <arnsholt> There are some scoping-related things I don't like, but that's pretty much it

[09:38] <arnsholt> tadzik: Yeah, 's what happens when you don't explicitly declare variables =)

[09:38] <moritz> and I can't get my head around join being a string method, not a list method

[09:39] <sorear> J is the only language I've touched this year that was non-trivial to learn

[09:39] <xenoterracide> digresses that I haven't used it enough to really make a fair judgment about it, and now I've been perling for a while

[09:39] *** eternaleye joined
[09:39] <bonsaikitten> moritz: OTRS stuff grew over the years- mostly customer-demand-driven

[09:39] <xenoterracide> though I'm fairly frustrated with the py2k py3k thing

[09:40] <bonsaikitten> moritz: and since it works for their internal uses why change it

[09:40] <sorear> xenoterracide: p5 p6 is worse

[09:40] <xenoterracide> sorear: yeah but I'm not sure I think of them as the same "language" anymore

[09:40] <tadzik> I have a feeling that py2k py3k is more like p5.10 p5.12 than p5 p6

[09:41] <xenoterracide> tadzik: yeah, with use strict enabled implicitly and it changed each time

[09:41] <moritz> bonsaikitten: I'm not saying that it should be rewritten; what I wanted to express is that readability is usually more a matter of the architecture of the application, less a matter of the programming language

[09:41] <tadzik> I don't think python takes backwards compat seriously

[09:41] <tadzik> We'll invent Python 3 so we can do backwards-incompatibile changes!

[09:42] <tadzik> And then they roll out 2.7 which breaks 2.6 code

[09:42] <xenoterracide> lol

[09:42] <bonsaikitten> moritz: yes, and it shows the usual lack of discipline of commercial projects

[09:42] <bonsaikitten> tadzik: py3 is academic wankery, about 2/3rds of all packages are still 2.x only

[09:42] <bonsaikitten> it's like declaring that the new version of ruby is perl5, and you better like it!

[09:42] <tadzik> bonsaikitten: my use case is purely academic wanking, so I'm okay with using py3 ;)

[09:43] <bonsaikitten> tadzik: as long as you don't rely on many external libs that's usually ok

[09:43] <xenoterracide> I wanted to use py3, but pyside is 2 only...

[09:43] <xenoterracide> and I didn't want to be gpl

[09:43] <bonsaikitten> still all the "big" libs aren't migrated

[09:43] <xenoterracide> oh... and then I wanted to checkout sql alchemy

[09:43] <xenoterracide> 2 only

[09:43] <tadzik> bonsaikitten: I just need to write an mbox parser from scratch, I'm not likely to use any libs at all

[09:44] <xenoterracide> but the default python on arch is 3?

[09:44] <bonsaikitten> xenoterracide: yes, and you better like it

[09:44] <tadzik> well, arch is... adventurous

[09:44] <bonsaikitten> xenoterracide: they don't care about "working" anymore

[09:44] <tadzik> did they ever?

[09:44] <bonsaikitten> yes

[09:44] <xenoterracide> actually I generally have no problem with working

[09:44] <xenoterracide> outside of this damn network driver

[09:44] <bonsaikitten> that's how they got big, now the devs are just ... wtf ... users are not idiots you can yell at for fun

[09:44] <xenoterracide> which is entirely lkml

[09:45] <tadzik> I think they got big by the "simplicity" marketing, they never had really mature and responsible maintainers

[09:45] <tadzik> not in the last 5(?) years at least

[09:46] <arnsholt> So speaking of Arch, what's a good distro these days?

[09:46] <tadzik> debian's okay I guess

[09:46] <xenoterracide> it's better than what I have to deal with when I've used fedora or ubuntu

[09:46] <xenoterracide> I'd rather arch any day

[09:46] <tadzik> I don't like russian rulette on updates

[09:46] <arnsholt> I suppose I can live with Debian. I never warmed to apt and friends though

[09:46] <xenoterracide> though I haven't reinstalled since they went all manual

[09:47] <moritz> arnsholt: the key is to only use them on the command line :-)

[09:47] <FROGGS> ubuntu LTS is quiet good, but the 12.10 is just too new

[09:47] <tadzik> arnsholt: well, you don't use apt to often, do you :)

[09:47] <bonsaikitten> FROGGS: I disagree

[09:47] <tadzik> you install stuff with it and forget about it, not that you use it every 10 minutes

[09:47] <arnsholt> My last experience with Ubuntu was terrible. For some reason it's the one Linux I've worked with in recent memory that required the most wizardry to get working

[09:47] <xenoterracide> I don't like the idea of doing a painful upgrade every 6 months

[09:48] <xenoterracide> so I stay away from release distro's

[09:48] <bonsaikitten> s/upgrade/reinstall/

[09:48] <bonsaikitten> upgrade only works on "new" unmodified installs, half the time

[09:48] <tadzik> ah, the "rolling release" hype

[09:48] <bonsaikitten> tadzik: it's the only way to avoid stupid reinstalling

[09:48] <arnsholt> tadzik: Before trying apt I was used to portage, which on the whole was a lot simpler to work with

[09:48] <moritz> "trolling release"

[09:48] <xenoterracide> hey it works for me

[09:48] <arnsholt> (Even if compiling stuff from source takes forever)

[09:48] <tadzik> bonsaikitten: I don't remember ever reainstalling a debian installation

[09:48] <xenoterracide> arnsholt: um... arch is not binary

[09:48] <xenoterracide> err..

[09:49] <xenoterracide> arch is* binary

[09:49] <FROGGS> bonsaikitten: I have 12.10 x86_64 on a "brand new" dell laptop (from july or so), I have problems almost every day with Xorg and plymouth for example

[09:49] <bonsaikitten> thanks to "stable enterprisey release" I'm stuck with things like bash 3.2 with custom patches, kernel 2.6.18+idiocy, etc.etc.

[09:49] <bonsaikitten> FROGGS: I've never seen plymouth work properly

[09:49] <arnsholt> xenoterracide: Portage is Gentoo

[09:49] <tadzik> I prefer working on my OS, not working "on my os", if you know what I mean

[09:49] <xenoterracide> arnsholt: I know

[09:49] <bonsaikitten> I call it "segfault generator"

[09:49] <bonsaikitten> arnsholt: and that's an advantage! ;)

[09:49] <xenoterracide> arnsholt: I used it for more than half a decade

[09:50] <bonsaikitten> tadzik: I hate compiling, that's why I use Gentoo

[09:50] <sorear> what is plymouth?

[09:50] <tadzik> I don't see the logic, but I don't think that matters :)

[09:50] <xenoterracide> idk, can't stand "release" and "repository" distro's that's my whole thing... give me a rolling distro with centralized repositories

[09:50] <bonsaikitten> sorear: an attempt at a fancy bootsplash

[09:50] <tadzik> my point is: the distro is my tool to work with, not something I need to work on and take care of

[09:51] <xenoterracide> probably also why I like CPAN

[09:51] <bonsaikitten> tadzik: on debian I *always* end up manually compiling things, which is just tedious, so I upgrade to gentoo

[09:51] <sorear> xenoterracide: can you stand cpanminus?

[09:51] <tadzik> bonsaikitten: never happened to me

[09:51] <sorear> oh, misread

[09:51] <xenoterracide> sorear: that's what I use

[09:51] <bonsaikitten> tadzik: well, their nginx is broken, bash used to be crippled, etc.

[09:51] <tadzik> I don't mind old (kernel|bash|whatever), I'm not a (kernel|bash|whatever) developer

[09:52] <bonsaikitten> I dislike segfaults and scripts not working

[09:52] <tadzik> ok, maybe. I never had any problems

[09:52] <moritz> I hate bashs too old to prog1 |& less

[09:52] <tadzik> that's what everyone says though, about systems they use

[09:52] <bonsaikitten> and when upstream tells me "stop using that old shit, man" then, well, I have to fix things

[09:52] <tadzik> do you happen to be using Debian Stale?

[09:52] <xenoterracide> is there any other?

[09:53] <bonsaikitten> no, the only debianish things I need to coerce into cooperation at the moment are ubuntu, and that's ... augh

[09:53] <xenoterracide> the only thing older than debian is rhel

[09:53] <bonsaikitten> such a severe lack of any idea of QA :(

[09:53] <xenoterracide> and cent

[09:53] <tadzik> xenoterracide: there are 2 other

[09:53] <tadzik> xenoterracide: I'm running testing, and I'm getting 10+ updates a day or so

[09:53] <xenoterracide> sounds like fun

[09:53] <tadzik> there's also unstable for the adventurers

[09:54] <tadzik> labeled as "yes, this may break"

[09:54] <bonsaikitten> too old ;) I'm using KDE 4.9.80 at the moment

[09:54] <huf> debian sid doesnt break all that often actually

[09:54] <huf> once every handful of months at most, in my experience

[09:54] <xenoterracide> oh I'm only running 4.9.3

[09:55] <xenoterracide> yeah I've not had many problems with arch breaking, and usually when they do it they tell me

[09:55] <sorear> 10!

[09:55] <dalek> niecza: a2d37f7 | sorear++ | lib/ (2 files):

[09:55] <dalek> niecza: Misc top removal 2

[09:55] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a2d37f793d

[09:55] <xenoterracide> very rarely have I had a pants down moent

[09:55] <xenoterracide> moment*

[09:56] <bonsaikitten> I have sacrificial machines that are there to catch errors

[09:56] <bonsaikitten> makes life a lot easier :)

[09:57] <xenoterracide> I don't have that, but I have lots of backups

[09:57] <tadzik> I can't stand updates breaking vim

[09:57] <xenoterracide> the worst pants down in the last year was a failing hard disk

[09:57] <xenoterracide> and that's not the OS's fault

[09:58] <xenoterracide> I haven't had updates break vim?

[09:58] <tadzik> I did, back in Arch days

[09:58] <tadzik> but then again, not much point in rambling about it now :)

[09:59] <sorear> I had a hilarious update failure BITD that broke, of all things, df

[09:59] <bonsaikitten> my solution to that is to become distro maintainer of packages I care about ;)

[10:00] *** dakkar joined
[10:00] <sorear> the free block counts were replaced with pseudo-random int64_t values (yes, signed)

[10:00] <xenoterracide> tadzik: oh was that when they were unfucking there implementation of vim?

[10:01] <tadzik> xenoterracide: No idea. I only cared since it broke me dev environment

[10:01] <tadzik> as a user I don't even want to know what they're doing and why

[10:01] <xenoterracide> I remember when I started using arch vim was pretty fucked as to how they implemented it differently from everyone else

[10:01] <sorear> how does one implement vim differently?

[10:01] <xenoterracide> so I spanked some people until they stopped using an example config as the default

[10:02] <sorear> it's off the shelf software...

[10:02] <xenoterracide> sorear: you use the "example" config as a default system config

[10:02] <xenoterracide> which vim states do not do

[10:02] <moritz> that's a matter of distribution, not implementation

[10:03] <sorear> I *expect* different distributions to have different system defaults for any moderately complex piece of software

[10:03] <xenoterracide> well there's slightly different and crazy does not work how you expect at all different

[10:03] <xenoterracide> like vim from cent to suse to debian is slightly different

[10:03] *** hypolin left
[10:04] <xenoterracide> but back then in arch it was so different it confused even experienced vim users

[10:04] <xenoterracide> the trick was stop using a sample config and let vim have its own defaults

[10:04] <xenoterracide> at some point they also switched vi to an actual vi implentation

[10:04] <xenoterracide> no idea why

[10:05] <xenoterracide> so vi isn't vim

[10:05] <sorear> well, most distro software doesn't work at all how I expect period because all the major distros have decided that software should mimic Windows by default

[10:05] <sorear> damn bootsplashes

[10:05] <xenoterracide> sorear: well there's that

[10:05] <sorear> rc.d must always give a process log

[10:05] <bonsaikitten> sorear: you sound like a gentoo user ;)

[10:06] <xenoterracide> I prefer it

[10:06] <xenoterracide> the process log

[10:06] <sorear> bonsaikitten: I have never used gentoo.  my first linux was Debian woody, and it is an improvement on everything I have used since

[10:06] <xenoterracide> though I liked gentoo's process log on pretty background best

[10:06] <bonsaikitten> sorear: hmm, I think you'd complain about it

[10:07] <bonsaikitten> but it doesn't force silly defaults on you - 30MB mem use after boot on a "default" install

[10:08] <sorear> bonsaikitten: a fresh install of Debian woody will boot in 4MB, you need 8 if you want to run any programs after booting

[10:08] <sorear> still that's pretty good for what's available now

[10:08] *** mtymula joined
[10:08] <sorear> I will have to give it a try next time I'm on Linux

[10:08] *** am0c left
[10:08] <bonsaikitten> sorear: kernel needs about 10MB already

[10:09] <mtymula> HELLo!!

[10:09] <bonsaikitten> 4MB doesn't sounds realistic for anything modern, unless you totally strip it down and customize it to hell

[10:09] <moritz> hello mtymula 

[10:09] <jnthn> morning, #perl6

[10:09] <moritz> bonsaikitten: debian woody is anything but modern :-)

[10:09] <moritz> \o jnthn 

[10:10] <mtymula> mortiz do you have any opinion about http://perl6maven.com/tutorial/perl6-introduction

[10:10] <bonsaikitten> moritz: I prefer things where I can use upstream bugtrackers

[10:10] <mtymula> i am trying to lern perl6... 

[10:10] <moritz> mtymula: it's good

[10:10] <tadzik> hello mtymula 

[10:11] <mtymula> ok thanks, any more tutorials that you would recomend?

[10:11] <tadzik> bonsaikitten: back on gentoo days I built a kernel which was below 1.44 MB and covered everything I needed for my laptop :)

[10:11] *** xinming left
[10:11] *** fgomez left
[10:11] *** gootle left
[10:11] *** mikemol left
[10:11] *** daxim left
[10:11] *** araujo left
[10:11] *** nyuszika7h left
[10:11] *** flussence left
[10:12] *** _ilbot left
[10:12] *** c1sung left
[10:12] *** sjohnson left
[10:12] *** avar left
[10:12] *** huf left
[10:12] *** cibs left
[10:12] *** mtymula left
[10:12] *** p6eval left
[10:12] *** [Coke] left
[10:12] *** sizz left
[10:12] *** bapa left
[10:12] *** lue left
[10:12] *** BillySeth left
[10:12] *** pmichaud left
[10:12] *** odoacre left
[10:12] *** rjbs left
[10:12] <tadzik> not if you leave :/

[10:12] <sorear> tadzik: it's called a netsplit

[10:12] <sorear> it's not eir fault

[10:12] <tadzik> ah, netsplit

[10:12] <sorear> 02:00 [freenode] -mrmist(~mrmist@freenode/staff/amazing.groupcat)- [GLOBAL  NOTICE] - In a few minutes there will be some network disruption  whilst we sort out some internal routing issues.  It shouldn't take  too long, but could be a bit noisy.  Thank you for your patience. 

[10:12] <tadzik> indeed

[10:15] *** mtymula joined
[10:15] *** xinming joined
[10:15] *** fgomez joined
[10:15] *** gootle joined
[10:15] *** mikemol joined
[10:15] *** daxim joined
[10:15] *** sizz joined
[10:15] *** araujo joined
[10:15] *** nyuszika7h joined
[10:15] *** bapa joined
[10:15] *** lue joined
[10:15] *** flussence joined
[10:15] *** huf joined
[10:15] *** avar joined
[10:15] *** sjohnson joined
[10:15] *** c1sung joined
[10:15] *** _ilbot joined
[10:15] *** cibs joined
[10:15] *** BillySeth joined
[10:15] *** p6eval joined
[10:15] *** [Coke] joined
[10:15] *** pmichaud joined
[10:15] *** odoacre joined
[10:15] *** mj41 joined
[10:15] *** prammer joined
[10:15] *** rjbs joined
[10:15] *** Grrrr joined
[10:15] *** Yappocall_ joined
[10:15] *** crazedpsyc joined
[10:15] *** groky joined
[10:15] *** rajaniemi.freenode.net sets mode: +v p6eval

[10:15] *** flightrecorder left
[10:16] *** flightrecorder joined
[10:16] <tadzik> mtymula: http://perl6.org/documentation/ covers about all the best things we have

[10:16] * xenoterracide reads over this tutorial and thinks this is very strange multiline comment

[10:16] <sorear> #`()?

[10:17] *** nyuszika7h left
[10:17] <bonsaikitten> tadzik: bzImage is compressed, it'll still eat quite a bit of RAM when it actually boots

[10:17] <bonsaikitten> sadly on amd64 it appears impossible to get below 3MB without losing functionality

[10:18] <sorear> also, that's just the text

[10:18] <xenoterracide> sorear: yeah, I find it a bit odd

[10:18] <xenoterracide> the example give is actualy #`(())

[10:19] <sorear> bss (does the kernel use this?) and dynamic allocation (which the kernel definitely uses heavily) is not accounted for in the image

[10:19] <xenoterracide> is there a p6pan yet?

[10:19] <sorear> yes, it's spelled panda

[10:19] <sorear> modules.perl6.org

[10:19] <xenoterracide> ah

[10:20] *** PerlJam left
[10:20] *** SamuraiJack left
[10:20] *** buubot_backup left
[10:20] *** ironcamel left
[10:20] *** Gothmog_ left
[10:20] *** hugme left
[10:20] *** Util left
[10:20] *** dakkar left
[10:20] *** eternaleye left
[10:20] *** anuby left
[10:22] *** dakkar joined
[10:22] *** eternaleye joined
[10:22] *** SamuraiJack joined
[10:22] *** anuby joined
[10:22] *** buubot_backup joined
[10:22] *** ironcamel joined
[10:22] *** PerlJam joined
[10:22] *** Gothmog_ joined
[10:22] *** hugme joined
[10:22] *** Util joined
[10:22] *** larks joined
[10:22] *** doy joined
[10:22] *** `patch` joined
[10:22] *** charsbar_____ joined
[10:22] *** rhr joined
[10:22] *** Tene joined
[10:22] *** jfried joined
[10:22] *** Ulti joined
[10:22] *** lestrrat joined
[10:22] *** pjcj joined
[10:22] *** perigrin joined
[10:22] *** rking joined
[10:22] *** rajaniemi.freenode.net sets mode: +v hugme

[10:22] *** flightrecorder left
[10:22] *** flightrecorder joined
[10:22] <sorear> mtymula: hi!

[10:23] *** aloha left
[10:23] *** _jaldhar_ left
[10:23] *** [particle]1 left
[10:23] *** Vlavv left
[10:23] *** rurban left
[10:24] *** aloha joined
[10:24] *** _jaldhar_ joined
[10:24] *** [particle]1 joined
[10:24] *** Vlavv joined
[10:24] *** rurban joined
[10:24] *** twinshadow joined
[10:24] *** rummik joined
[10:25] *** nyuszika7h joined
[10:25] *** dakkar left
[10:25] *** eternaleye left
[10:25] *** anuby left
[10:25] *** jfried left
[10:25] *** lestrrat left
[10:25] *** Ulti left
[10:25] <tadzik> bonsaikitten: well, do you really need it below 3MB on amd64?

[10:26] <xenoterracide> well maybe I should try playing with Perl 6

[10:26] <sorear> you need it below 1.44 to make a netboot floppy that can be read with standard hardware

[10:26] <bonsaikitten> tadzik: "need" - no, my smallest boot devices are still >>32MB, but the constant increase in needs is annoying

[10:26] *** SamuraiJack left
[10:26] *** buubot_backup left
[10:26] *** ironcamel left
[10:26] *** Gothmog_ left
[10:26] *** hugme left
[10:26] *** Util left
[10:26] *** larks left
[10:26] *** doy left
[10:26] *** pjcj left
[10:26] *** Tene left
[10:26] *** rhr left
[10:26] *** charsbar_____ left
[10:26] *** `patch` left
[10:26] *** dakkar joined
[10:26] *** eternaleye joined
[10:26] *** anuby joined
[10:26] *** jfried joined
[10:26] *** Ulti joined
[10:26] *** lestrrat joined
[10:27] *** SamuraiJack joined
[10:27] *** buubot_backup joined
[10:27] *** ironcamel joined
[10:27] *** Gothmog_ joined
[10:27] *** hugme joined
[10:27] *** Util joined
[10:27] *** larks joined
[10:27] *** doy joined
[10:27] *** pjcj joined
[10:27] *** Tene joined
[10:27] *** rhr joined
[10:27] *** charsbar_____ joined
[10:27] *** `patch` joined
[10:27] *** rajaniemi.freenode.net sets mode: +v hugme

[10:27] *** flightrecorder left
[10:27] *** flightrecorder joined
[10:28] *** ggoebel left
[10:28] *** sorear left
[10:28] *** tadzik left
[10:28] *** dalek left
[10:28] *** SmokeMachine left
[10:28] <xenoterracide> gods the nqp repo is huge...

[10:28] *** ggoebel joined
[10:28] *** sorear joined
[10:28] *** tadzik joined
[10:28] *** dalek joined
[10:28] *** SmokeMachine joined
[10:28] *** Hor|zon joined
[10:28] *** quietfanatic joined
[10:28] *** szbalint joined
[10:28] *** shachaf joined
[10:28] *** smash joined
[10:28] *** BooK joined
[10:28] *** rajaniemi.freenode.net sets mode: +v dalek

[10:28] *** flightrecorder left
[10:29] *** flightrecorder joined
[10:29] <xenoterracide> wow parrots impressively even bigger

[10:30] *** broquaint left
[10:30] *** snarkyboojum left
[10:30] *** Krunch left
[10:30] *** Krunch joined
[10:30] *** broquaint joined
[10:30] *** snarkyboojum joined
[10:30] *** steven joined
[10:33] <mtymula> who can I ask about development kit for perl6 :) on windows?? i've installed dwimperl-5.14.2.1-v7-32bit.exe on my XP32 and added some features for perl6... and then it cruches... 

[10:33] <mtymula> ;(

[10:33] <mtymula> *crushes

[10:33] <sorear> dwimperl, was that Gabor's?

[10:34] <moritz> yes

[10:34] <moritz> see http://szabgab.com/contact.html for contact options

[10:34] <dalek> niecza: f2586f9 | sorear++ | lib/ (2 files):

[10:34] <dalek> niecza: Separate responsibilities of NewTypedScalar / NewAnyMuScalar

[10:34] <dalek> niecza: review: https://github.com/sorear/niecza/commit/f2586f9497

[10:34] <mtymula> are there any other options or only dwimperl ?? 

[10:34] <jnthn> https://github.com/rakudo/star/downloads has an MSI

[10:35] <jnthn> Includes Rakudo Perl 6 compiler, some modules, etc.

[10:35] <jnthn> Debugger :)

[10:36] <mtymula> in a fancy nice GUI style or just command line?? 

[10:37] <moritz> fancy nice command line :-)

[10:37] <mtymula> i would be great to have sth like eclipse... :p

[10:38] *** domidumont left
[10:38] <xenoterracide> curious I heard a rumor of a feature in node... of if you `require`ed a module you didn't have, it would simply download and install it for you at require time. Some people seem to like this... bad idea?

[10:38] <mtymula> but this dwimperl gives me lots of problems... 

[10:38] <moritz> xenoterracide: great for development, horrible for production

[10:39] <sorear> I am using node and I have not encountered that

[10:39] <xenoterracide> it is a rumor, perhaps I do not know what I'm talking about

[10:39] <xenoterracide> because I haven't gotten around to trying node

[10:40] <sorear> http://nodejs.org/api/modules.html#modules_all_together

[10:40] <sorear> documentation says the rumor is false

[10:40] <sorear> (node's documentation is not trustworthy)

[10:40] <mtymula> ok, need to restart the system... will be back to add some more stupid questions;p 

[10:41] <dalek> niecza: 3ffe64c | sorear++ | lib/ (2 files):

[10:41] <dalek> niecza: Top removal: NewMuAnyScalar

[10:41] <dalek> niecza: review: https://github.com/sorear/niecza/commit/3ffe64c5af

[10:43] <xenoterracide> sorear: maybe I didn't understand what they were talking about... or they didn't... 

[10:44] * xenoterracide stress tests my system by compiling and checking for dupes at the same time

[10:44] <sorear> sleep&

[10:44] * xenoterracide pretends UI should be responsive... yes?

[10:49] *** domidumont joined
[10:56] <xenoterracide> make && make test ran ok

[10:56] <xenoterracide> but where would make install have put this stuff

[10:57] <xenoterracide> it didn't end up in my path

[10:58] <xenoterracide> oh maybe it just put it in ./install

[10:59] *** mtymula left
[11:07] *** gootle left
[11:07] *** rindolf joined
[11:08] *** domidumont left
[11:08] *** gootle joined
[11:08] *** domidumont joined
[11:10] *** gootle left
[11:17] *** marloshouse joined
[11:18] *** anuby left
[11:31] *** cognominal joined
[11:32] *** cognominal left
[11:33] *** cognominal joined
[11:33] *** tokuhiro_ joined
[11:33] *** mtymula joined
[11:33] <masak> g'day, #perl6

[11:34] * masak has a Perl 6 day today o/

[11:34] *** marloshouse left
[11:34] <mtymula> good for you:) 

[11:34] * moritz still haz no internez at $HOME :(

[11:35] <masak> moritz: :/

[11:36] <mtymula> here you have a guestion... why my *.pl file with utf-8 coding does not fire when i make perl6 *.pl

[11:37] <moritz> well, if you write  perl6 *.pl and there are multiple of them, it will only launch the first

[11:37] *** tokuhiro_ left
[11:37] <moritz> and take the other files names are command line arguments to the first

[11:37] <mtymula> no... :) i just wrote it here

[11:38] <mtymula> let's say it is test.pl

[11:38] <mtymula> test.pl has utf-8 coding  

[11:38] <jnthn> mtymula: Perhaps because a handful of Windows programs seem to think utf-8 needs a byte order mark at the start of the file. :/

[11:39] <mtymula> i get ===SORRY!=== Confused at line 1, near "\ufeffuse v6;\r\n"

[11:39] <jnthn> hah, yes.

[11:39] <jnthn> \ufeff

[11:39] <mtymula> what shall i do??

[11:40] <jnthn> Get rid of the \ufeff at the start of the file.

[11:40] <mtymula> come on... there is no such thing

[11:41] <mtymula> the whole file is:

[11:41] <moritz> yes there is there

[11:41] <mtymula> use v6;  my $liczba = prompt "Podaj liczbe od 41 do 49 włacznie: ";

[11:41] <moritz> your editor just doesn't show you

[11:41] <jnthn> It's in the output you pasted...and what moritz said.

[11:41] <moritz> use a hex editor to confirm, if you want

[11:41] <moritz> and a better text editor

[11:41] <mtymula> well i use notepad ++ 

[11:42] <jnthn> mtymula: Me too

[11:42] <jnthn> Oh...

[11:42] <jnthn> On the encoding menu select "UTF-8 without BOM"

[11:42] * jnthn thought that was the default...

[11:43] <mtymula> <hahaha>

[11:43] <mtymula> ok 

[11:43] <mtymula> it fiered 

[11:43] <mtymula> but

[11:44] <mtymula> in the output my polish charaters are displayed incorrectly

[11:44] <mtymula> ł

[11:44] <mtymula> instead of them i see some kind of forest.... 

[11:44] <moritz> maybe your console/shell doesn't understand UTF-8?

[11:45] <moritz> r: say "włacznie"

[11:45] <p6eval> rakudo 72a27f: OUTPUT«włacznie␤»

[11:45] <tadzik> włącznie

[11:45] <moritz> phenny: "włacznie"?

[11:45] <phenny> moritz: "inclusive" (pl to en, translate.google.com)

[11:45] <tadzik> that's incorrect

[11:45] <tadzik> it's włącznie, not włacznie

[11:45] <mtymula> :) 

[11:46] <mtymula> tadzik how do you know that??

[11:46] <mtymula> ;p

[11:46] <tadzik> mtymula: z doświadczenia życiowego ;)

[11:46] <mtymula> pozdrowienia, jesteśmy wszędzie:) 

[11:46] <tadzik> yep, there's at least few of us here

[11:46] <tadzik> Woodi, Gli<TAB><TAB>

[11:47] <tadzik> sergot too

[11:47] <mtymula> so oh... nice:) 

[11:48] *** brrt joined
[11:48] <mtymula> are you located in poland or somewhere else??

[11:48] *** marloshouse joined
[11:49] <jnthn> cmd.exe does pretty awfully at utf-8

[11:49] <tadzik> mtymula: Warsaw

[11:49] <jnthn> chcp 65001 # sorta helps

[11:50] <mtymula> cmd.exe it is

[11:50] <mtymula> tadzik:  me Rzeszow

[11:50] <tadzik> nice

[11:51] <mtymula> i was here several times (meaning on this IRC)

[11:52] <mtymula> and every time i came accross something that blows my mind:) 

[11:52] <tadzik> hehe

[11:52] <mtymula> i really start loving this perl community:) 

[11:52] <tadzik> yeah, it's awesome

[11:53] <masak> utf-8 files with a BOM has to be one of the stupidest things ever.

[11:53] <mtymula> loving << not quite English...

[11:53] <mtymula> masak whatever you say... i have no idea 

[11:54] *** grondilu joined
[11:54] <mtymula> to be honest i am new at this all stuff especially perl6

[11:54] <grondilu> r: say <foo bar longstring>.max( *.chars <=> *.chars );'

[11:54] <p6eval> rakudo 72a27f: OUTPUT«===SORRY!===␤Unable to parse expression in quote:sym<apos>; couldn't find final "'" at line 2, near ""␤»

[11:54] <FROGGS> masak: can you determine the endianess withouth the bom?

[11:54] <grondilu> r: say <foo bar longstring>.max( *.chars <=> *.chars );

[11:54] <p6eval> rakudo 72a27f: OUTPUT«longstring␤»

[11:54] *** pmurias joined
[11:55] * grondilu whishes he could just write:  say <foo bar longstring>.max( *.chars );'

[11:55] <masak> FROGGS: yes. see https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8

[11:55] *** tokuhiro_ joined
[11:55] <FROGGS> ahh I see

[11:55] <masak> I wonder why we shouldn't simply strip the BOM in Rakudo if we find it.

[11:55] <FROGGS> stupid thing it is then

[11:55] <masak> would make for fewer surprised first-time users.

[11:56] <masak> we could even put it in the grammar, and just ignore it.

[11:56] <FROGGS> I'd say that skipping is better than actually modifying some code

[11:56] <masak> that's what I'm suggesting.

[11:57] <masak> sorry, I have an FP background; "strip" doesn't mean "modify original" to me :P

[11:57] <jnthn> Yes, we could diddle the grammar.

[11:57] <mtymula> thx for help:) 

[11:58] <mtymula> i will give up writing in polish it is to damn complicated anyway:) 

[11:58] <masak> *or* we could flag it up with a dedicated error message, if we were so inclined.

[11:58] <masak> just not "Confused" :(

[11:58] * masak submits rakudobug

[11:58] <jnthn> masak: Confused is how I feel about utf-8 having a BOM :P

[11:58] <masak> :P

[11:58] <jnthn> I suggest we make things just work.

[11:59] <masak> me too.

[11:59] <mtymula> ;)

[11:59] <FROGGS> "===SORRY!=== Please remove that stupid BOM at line 1 at ..." ?

[11:59] <FROGGS> DWIM++

[11:59] <jnthn> Should be a one-line patch, but I'm currently writing slides for a talk this evening :P

[11:59] <mtymula> ===SORRY!=== Rakudo is confused please don't do that..."

[12:00] <FROGGS> btw, I made a pull request ages ago about me beeing a rakudo release-manager... I guess I still want to do it

[12:03] <masak> weighing in on the discussion about "readable Python". any language can be written in an obfuscated manner. http://p-nand-q.com/python/obfuscated_python.html -- most encouragement for "writing things well" must come from the community.

[12:04] *** pmurias left
[12:04] <brrt> chiming in a bit on python, i find that the standards of code for perl (5) are much higher than that on python

[12:04] <brrt> i.e., no cpan module comes without a test suite

[12:04] <brrt> or very few, maybe

[12:05] <brrt> hardly any python modules come with decent tests, or documentation

[12:05] <masak> FROGGS: cool!

[12:05] <masak> FROGGS: for November?

[12:05] <FROGGS> right

[12:05] *** pmurias joined
[12:06] <masak> tadzik: is it OK if I move you to February?

[12:06] <tadzik> masak: sure

[12:06] * masak makes it so

[12:06] <moritz> \o/ new release managers

[12:06] <mtymula> tadzik i see that pmurias i also... ONE OF US...;pp 

[12:06] <masak> yay, instead of 0 planned release slots, we now have 4 :)

[12:06] <tadzik> right :)

[12:06] <FROGGS> k, so I'll try to bundle everything these days to be prepared on 22nd

[12:06] <FROGGS> there is a msi-howto these days?

[12:07] <masak> mtymula: ja tez mowie po polsku :)

[12:07] <masak> (hm, that's probably not exactly right...)

[12:08] <mtymula> prove it ;p

[12:09] <dalek> rakudo/nom: 0aca028 | masak++ | docs/release_guide.pod:

[12:09] <dalek> rakudo/nom: [docs/release_guide.pod] FROGGS++ November release

[12:09] <dalek> rakudo/nom: 

[12:09] <dalek> rakudo/nom: Bumped tadzik forward to February.

[12:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0aca028ff0

[12:09] <mtymula> masak: udowodnij;p

[12:09] <tadzik> last time I checked masak distinguished tą and tę correctly :)

[12:09] <mtymula> oh!! 

[12:09] <masak> oh, 's easy.

[12:10] * masak says "OONNGG", "EENNGG"

[12:10] <masak> oh, you mean grammatically?

[12:10] <tadzik> right

[12:10] <mtymula> so read this: stół z powyłamywanymi nogami

[12:10] <tadzik> also, "last time I checked" was what, 1.5 year ago? ;)

[12:13] <mtymula> wtf... i see I don't know perl6 more than i suspected... 

[12:13] <mtymula> i wrote my $kwadrat_roznicy = $robocza^2;

[12:13] <mtymula> where $kwadrat_roznicy had value of 8

[12:13] <masak> tadzik: yeah, almost.

[12:13] <jnthn> Raise to power is **

[12:14] <mtymula> and i surely did't suspected that i t will be  one(8, 2)

[12:14] <masak> mtymula: ^ is a junctive operator.

[12:14] <mtymula> what does it mean... never mind i will find out

[12:15] *** pmurias left
[12:15] <masak> mtymula: I can say "powyłamywanymi" aloud, but only very slowly. probably 1/5 the speed you can.

[12:15] <mtymula> but after that i see that this will be a loooooooong journey

[12:15] <masak> mtymula: you can do things like this: 'if $answer == 2 | 3 | 5'

[12:15] <mtymula> masak:  try  chsząszcz brzmi w trzcinie

[12:15] <masak> those are junctions. they allow you to do several similar computations at the same time.

[12:16] <masak> mtymula: did you mean "chrząszcz"? :)

[12:16] <mtymula> masak: thats nice

[12:16] <mtymula> masak: yea you got it

[12:17] <masak> mtymula: "rz" doesn't scare me much. I've been to the Czech republic, too.

[12:17] <mtymula> masak: and do you know what does it mean szukać ?? 

[12:18] <masak> "quest", "look for"?

[12:18] <mtymula> google translate, huh?

[12:18] <mtymula> ;p

[12:18] <masak> oh yes.

[12:18] <masak> what tipped you off?

[12:18] * masak is curious

[12:18] <arnsholt> That's kind of similar to "seek".

[12:19] <mtymula> hm... 

[12:19] * arnsholt wonders what sounds changes happened in Slavic

[12:19] <masak> arnsholt: I was thinking the same.

[12:19] <mtymula> a deeeeeelay and two meanings;p

[12:19] <arnsholt> To the textbooks!

[12:19] <masak> mtymula: the delay will be taken care of once people find a way to implant Google Translate into my brain.

[12:19] <mtymula> and any one of you know what does it mean i n Czech republic??

[12:19] <masak> mtymula: something naughty, I'll bet.

[12:20] <jnthn> mtymula: I think in Slovak it sounds like the word "to fuck" at least.

[12:20] <mtymula> masak; i am also looking forward to it

[12:20] <mtymula> gooood:) you won pride

[12:20] <Woodi> afternoon ppls

[12:20] * masak .oO( she said she'll go look for him, and she's been gone for a long time... )

[12:21] <mtymula> ^^

[12:21] <masak> Woodi! \o/

[12:21] <masak> Woodi: we're having a Polish moment here.

[12:21] <masak> join us.

[12:21] *** pmurias joined
[12:21] <Woodi> :)

[12:21] <mtymula> indeed

[12:21] <Woodi> I am 3 more screens from here... sec...

[12:22] <mtymula> and it is my foult 

[12:22] <masak> hey, don't go taking all the blame there! :P

[12:23] <mtymula> i am worried it will go to some kind of a repository of posts 

[12:23] <jnthn> And hey, many folks here like natural languages as well as programming languages. :)

[12:23] * masak likes it what the BOM is spelled "feff" -- that summarizes his feelings for it

[12:23] <mtymula> ok, I will not

[12:23] <jnthn> masak: *lol*...never noticed that :)

[12:23] <huf> mtymula: the channel is logged publicly on the web :)

[12:23] <arnsholt> masak: At least in the transition PIE->Balto-Slavic g would be preserved as g, not g->k as in Germanic, so it's not an inherited word (unless g->k happens later in the development of Polish of course)

[12:23] <mtymula> good one

[12:23] <huf> mtymula: when the revolution comes, you wont be able to deny being polish :)

[12:23] <arnsholt> Might be a German loan

[12:24] <mtymula> what revolution ??

[12:24] <huf> mtymula: oh you know, the next one, whatever it will be about.

[12:25] * masak Perl 6: a predominantly Polish project...

[12:25] <huf> why, do you want to hide your polishicity?

[12:25] <mtymula> beside that why would i like to deny being polish

[12:25] <huf> "Perl 6: Polished"

[12:25] <huf> could be a tv series

[12:25] <masak> arnsholt: cool.

[12:26] <mtymula> and with two meanings

[12:26] <mtymula> nice

[12:27] <mtymula> ok since we came into poland tell me who want's to come to Rzeszów, dring some beer;p 

[12:28] * tadzik mumbles something about Polish Perl Workshop

[12:28] <jnthn> ooh, beer!

[12:29] *** pmurias left
[12:29] *** brrt left
[12:29] <masak> Polish beer! \o/

[12:29] <jnthn> I'd go to Poland and drink beer :)

[12:29] <jnthn> Even with the flight factored in it's probably cheaper than drinking here in Sweden :P

[12:30] * jnthn pokes tadzik to get the Polish Perl Workshop planned :D

[12:30] <masak> jnthn: well, you can calculate how much beer you'd have to drink... :)

[12:30] <moritz> jnthn: for your next Perl 6 introduction talk, write a script that calculates how much... what masak said

[12:30] <huf> why calculate? experiment!

[12:30] <jnthn> hah!

[12:30] <moritz> masak: don't be so creepy and think the same things I do :-)

[12:31] <jnthn> I can't remember whether the cheapest beer I ever had was in a village just over the Czech side of the Czech/Slovak border, or in Shanghai. I do know which of these two were better :P

[12:31] <mtymula> experiment?? it is called an practical observation of chemical influence over sate of ones mind and financial status

[12:32] <moritz> nothing wrong with experiments; science is based on them

[12:32] <huf> yes, "science" mythbusters style :)

[12:32] <mtymula> indeed

[12:32] <huf> in this case

[12:32] * moritz did what the scientists call "computer experiments"

[12:32] <masak> moritz: whenever you end up in an entangled state like that, the clue is to make lots of random measurements to disentangle. like, turn on the radio on a random channel :P

[12:33] <tadzik> jnthn: yeah, we'll think about it ;)

[12:33] <mtymula> or drink random beer at random places??

[12:33] <moritz> masak: given that 99% of our total communication volume is not on IRC, that should happen automatically

[12:34] <Woodi> quest: intro: one of the popes on his dying-bed wanted "piwa di Polonia"... (pl: piwo = beer) They who hear this was probably consternated and they started talking: "O, Santa Piva di Polonia!"... Quest-todo: find polish beer which is such good you want it on dying-bed :)

[12:34] <mtymula> oh, you've made my day :) 

[12:35] *** Psyche^ joined
[12:35] * Woodi confirms "stół z powyłamywanymi nogami" is important test in polish-speed-talking :)

[12:35] <mtymula> "find polish beer which is such good you want it on dying-bed" now this is not so tuff task...

[12:36] <Woodi> ehm... this was few centuries ago... do good beer stil left here ? :)

[12:36] <mtymula> tuff  << nqe

[12:36] <mtymula> yes Woodi, there are lots of it 

[12:37] <mtymula> aspeically in when someone is making it for himself;p 

[12:37] <mtymula> by himself

[12:37] <mtymula> or herself

[12:38] <mtymula> whatever

[12:38] <Woodi> heh :) /me just do nalewki :)

[12:38] <mtymula> księżycówki??

[12:38] <mtymula> you can lite it up wuith fire??

[12:38] <mtymula> *with

[12:39] <Woodi> hmm, no, probably... just fruits and spirit...

[12:39] *** Patterner left
[12:39] *** Psyche^ is now known as Patterner

[12:39] <mtymula> it is this amount of a ghost (spirit) that i am worried ...

[12:39] <masak> moritz: in that case, there's a disproportionate amount of entanglement going on between our brains. cause for worry, I'd say. :P

[12:41] <Woodi> ok, speeking about method modifiers eg. before - I have no idea how callsame replace it in deterministic way... 

[12:42] <masak> r: class C { method foo { say "C" } }; class D is C { method foo { say "before"; callsame; say "after" } }; D.new.foo

[12:42] <p6eval> rakudo 72a27f: OUTPUT«before␤C␤after␤»

[12:42] <masak> like that.

[12:42] <Woodi> before and after are clear but method call dispatch and find right method. then callsame find next same method...

[12:42] <jnthn> same here means "same arguments"

[12:42] <masak> right.

[12:43] <jnthn> contrasted with nextwith where you get to diddle the arguments

[12:43] <Woodi> but call same means: go up in hierarchy and find next like it ?

[12:44] <Woodi> naive view of before and after is they are wrappers. inheritance not needed...

[12:47] *** masak left
[12:47] *** masak joined
[12:48] *** cosimo joined
[12:54] <Woodi> anybody here ?

[12:54] <mtymula> ofc

[12:54] <tadzik> yes

[12:54] <rindolf> Woodi: hi.

[12:55] <Woodi> just probably me not grasping things again :)

[12:56] <moritz> Woodi: (I hope that I'm not telling you bullshit here) in the case of single dispatch, nextsame just goes to the next method of the same name by walking the MRO

[12:56] <moritz> Woodi: in the case of multi dispatch, it goes to the next-looser candidate

[12:57] <Woodi> moritz: ok. that start my problem with it :)

[12:57] *** lumi_ left
[12:57] <Woodi> it find first. what it if finds other one and later that "first" ? it is not clear comparing to "before" etc

[12:57] *** lumi_ joined
[12:58] * moritz doesn't quite understand the question

[12:58] <Woodi> dispach is like magic box

[12:58] <moritz> ah, it's not :-)

[12:58] <Woodi> with inheritance it is clear

[12:58] <moritz> I think S06 has something on how dispatch works

[12:59] <moritz> basically it sorts the signatures by narrowness

[12:59] <Woodi> k :)

[12:59] <Woodi> but signature is same..

[12:59] <moritz> in which example?

[12:59] <Woodi> < jnthn> same here means "same arguments"

[12:59] <moritz> arguments != signature

[13:00] <moritz> sub f(Int $x) { say $x}; f 5;

[13:00] <moritz> (Int $x)  here is a signature

[13:00] <moritz> and 5 is an argument

[13:00] <jnthn> The way to understand it is that whenever you make a call, there are a set of possible things that could be called for those arguments.

[13:00] <jnthn> By default you just call the best one

[13:00] <jnthn> The [next|call][with|same] just let you pass contorl to the next best one.

[13:00] <jnthn> It's like iterating through a list of possible things.

[13:01] <Woodi> it's non-quite-determistic for me so far..

[13:01] <moritz> iterating a list is quite deterministic

[13:04] <moritz> Woodi: if S06 doesn't help you, come up with some examples, and we can explain why candidates are sorted the way they are

[13:04] <jnthn> The list doesn't mutate with time, if that helps.

[13:06] <Woodi> k, will read in sec. but "callsame" means call another with same signature. but defining function with same signature (with absence of inheritance) is error for me

[13:06] *** sftp joined
[13:06] <moritz> no

[13:06] * Woodi is shocked here :)

[13:06] <moritz> callsame means call another subroutine with the same PARAMATERS

[13:06] <moritz> not with the same signature

[13:07] <moritz> you need to clearly distinguish signatures and paramaters, otherwise you're lost

[13:07] <Woodi> ahh... Int -> Numeric -> Any... something like this ?

[13:07] <jnthn> class A { method m($a) { say "in A with $a" } }; class B is A { method m($x) { say "in B with $x"; nextsame; } }; B.m

[13:07] <jnthn> r: class A { method m($a) { say "in A with $a" } }; class B is A { method m($x) { say "in B with $x"; nextsame; } }; B.m

[13:07] <p6eval> rakudo 72a27f: OUTPUT«Not enough positional parameters passed; got 1 but expected 2␤  in method m at /tmp/kyFlgCdmSa:1␤  in block  at /tmp/kyFlgCdmSa:1␤␤»

[13:07] <jnthn> r: class A { method m($a) { say "in A with $a" } }; class B is A { method m($x) { say "in B with $x"; nextsame; } }; B.m(42)

[13:07] <p6eval> rakudo 72a27f: OUTPUT«in B with 42␤in A with 42␤»

[13:08] <moritz> note that those two methods m don't have the same signature, because they have an implicit invocant argument

[13:08] <Woodi> jnthn: you used inheritance here :)

[13:08] *** mikemol left
[13:09] <Woodi> call same is like call SUPER or call-Any-after-calling-int ?

[13:09] <moritz> r: multi f(Cool $x) { say "In f(Cool) with $x"; }; multi f(Int $x) { say "in f(Int) with $x"; nextsame }; f 42

[13:09] *** rindolf left
[13:09] <p6eval> rakudo 0aca02: OUTPUT«in f(Int) with 42␤In f(Cool) with 42␤»

[13:10] <jnthn> Woodi: Yes, and nextsame took you do the next thing up the inheritance tree.

[13:10] <jnthn> *to

[13:10] <Woodi> ok, so reading and learning is essential :)

[13:10] <masak> news at 11.

[13:13] *** krunen joined
[13:17] *** avar left
[13:17] *** avar joined
[13:17] *** avar left
[13:17] *** avar joined
[13:19] *** timotimo joined
[13:19] *** colomon left
[13:21] *** groky left
[13:23] *** groky joined
[13:23] *** bbkr left
[13:23] *** bbkr__ joined
[13:25] * Woodi just found "proto" which looks like begin&after :)

[13:36] * moritz wants to send a present to whoever invented git reflog

[13:38] <masak> git reflog ejects some git concerns orthogonally from the ordinary git usage. it's like the AOP of git. :)

[13:38] <moritz> it's like an implicit try/catch around git rebase -i to me :-)

[13:39] <moritz> most of the time, at least

[13:40] <moritz> it's so good to see that even some apparently destructive operations can be undone in git

[13:41] *** colomon joined
[13:42] <shachaf> git reflog is the future

[13:42] <shachaf> (Well, the past. Whatever.)

[13:43] <jnthn> It's a window back to the past's alternative futures. :)

[13:44] <shachaf> Traversals are the future, though!

[13:45] *** Gothmog_ left
[13:48] * moritz looks into the future and sees... errors

[13:57] <mtymula> :)

[13:57] *** tokuhiro_ left
[13:58] *** tokuhiro_ joined
[13:59] *** benabik left
[13:59] *** yves__ left
[13:59] *** benabik joined
[13:59] *** tokuhiro_ left
[14:00] *** tokuhiro_ joined
[14:04] *** tokuhiro_ left
[14:05] *** PacoAir joined
[14:06] *** tokuhiro_ joined
[14:06] *** tokuhiro_ left
[14:06] *** tokuhiro_ joined
[14:08] *** atrodo joined
[14:11] *** tokuhiro_ left
[14:11] *** FROGGS left
[14:11] *** flightrecorder left
[14:13] *** flightrecorder joined
[14:20] *** benabik left
[14:24] *** FROGGS joined
[14:30] *** yves_ joined
[14:32] *** bowtie joined
[14:33] *** GlitchMr joined
[14:34] *** isBEKaml joined
[14:37] <dalek> roast: 7adc0af | masak++ | S02-lexical-conventions/bom.t:

[14:37] <dalek> roast: [S02-lexical-conventions/bom.t] new .t file

[14:37] <dalek> roast: 

[14:37] <dalek> roast: Tests that an implementation can handle/ignore a BOM

[14:37] <dalek> roast: at the start of the file.

[14:37] <dalek> roast: review: https://github.com/perl6/roast/commit/7adc0afa72

[14:37] <dalek> roast: 42e1808 | masak++ | .gitignore:

[14:37] <dalek> roast: [.gitignore] ignore S32-io/server-ready-flag

[14:37] <dalek> roast: review: https://github.com/perl6/roast/commit/42e18080b5

[14:39] <isBEKaml> we lost a bom!

[14:39] <dalek> rakudo/nom: fc349a9 | masak++ | / (3 files):

[14:39] <dalek> rakudo/nom: ignore a BOM at the beginning of a file

[14:39] <dalek> rakudo/nom: 

[14:39] <dalek> rakudo/nom: Now when somebody sets up us it, all their base

[14:39] <dalek> rakudo/nom: will be belong to Rakudo.

[14:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fc349a9dd6

[14:40] <masak> that surely was easy.

[14:40] * masak goes on to close the RT ticket

[14:41] <FROGGS> masak: but it just ignores it when it is at the beginning of a file, right?

[14:41] <geekosaur> bom be bomp

[14:42] <masak> FROGGS: right.

[14:42] <FROGGS> good, thanks ;o)

[14:42] <masak> beginning of a compilation unit, even. so you can put it at the start of your &eval strings, too.

[14:49] <isBEKaml> rn: my @foo = "foo" xx 5; @foo.perl.say; @foo.say;

[14:49] <p6eval> rakudo 0aca02: OUTPUT«Array.new("foo", "foo", "foo", "foo", "foo")␤foo foo foo foo foo␤»

[14:49] <p6eval> ..niecza v22-29-g3ffe64c: OUTPUT«["foo", "foo", "foo", "foo", "foo"].list␤foo foo foo foo foo␤»

[14:50] <isBEKaml> Oh, something.perl now gives the type info too?

[14:51] *** isBEKaml left
[14:52] *** rindolf joined
[14:56] <moritz> ironcamel: well, it's supposed to spit out something that, when eval()ed, produces an object of the same type as before

[14:56] <moritz> erm, meant isBEKaml, sorry

[14:58] <Woodi> r: sub foo() { say "Foo!" }; foo

[14:58] <p6eval> rakudo 0aca02: OUTPUT«Foo!␤»

[14:58] <Woodi> f: sub detect-foo() { syslog("WARNING! Foo fires at " ~ Time::HiRes::now() ); }

[14:58] <Woodi> f: sub-detect-detect-foo() { ... }

[14:59] <Woodi> how do this with (next|call)same

[14:59] <Woodi> ?

[14:59] <moritz> you don't; there's no call to a function of the same name in your example

[15:00] <Woodi> f sub detect-foo() before foo() { ... }

[15:00] <geekosaur> wrap()?

[15:00] <mtymula> is it something in the air or programming in perl6 is so fkng gooooooood:) 

[15:00] <mtymula> ??

[15:00] <Woodi> mtymula: no idea :)

[15:01] <Woodi> but all that after|before and call same discusion is about not doing after|before becouse callsame & co do the same... 

[15:02] <moritz> r: sub trait_mod:before(&c) { &c.wrap(sub {"WARNING: {&c.name} fires at " ~ now; nextsame }) };

[15:02] <p6eval> rakudo 0aca02:  ( no output )

[15:02] <mtymula> but to be honest it is easier to start writing code than in c# or java... at least for me:) 

[15:02] <moritz> Woodi: something like that

[15:03] <Woodi> ok :) so no idea why callsame & co are mentioned in before|after context

[15:04] *** stopbit joined
[15:07] <Woodi> and about that Debian offtopic: one I was working in firm where Debian was used (good!). but admin there was using dselect! it so distracting as he would be using fedora tools... I like apt-get :) and ppls like aptitude and it is quite religious difference :)

[15:08] <Woodi> and when you add stable|testing|sid difference it is like debian was realy general-something

[15:08] *** sorenso left
[15:09] <Woodi> btw. I am addicted to daily apt-get update ; apt-get upgrade ; apt-get dist-upgrade to the level I was missing it using OpenBSD

[15:10] <Woodi> now, when back on debian I quite miss 1 or 2 erratas by year :)

[15:11] *** kaare_ joined
[15:14] *** obra joined
[15:27] <mtymula> someone said before that uses notepad++ 

[15:27] <mtymula> do anyone has a knowladge about plugin to make syntax of perl6 look nice in this editor??

[15:28] * Woodi just saw wrap example use nextsame...

[15:28] <Woodi> mtymula: perl6 syntax is hard thing

[15:28] <tadzik> mtymula: one '?' is usually sufficient to make a question :)

[15:28] <tadzik> mtymula: something for Perl 5 may work okay

[15:29] <tadzik> personally I prefer to have no syntax hilighting, esp. for Perl 6

[15:30] <mtymula> ?? < work related. It is just how i do it. I just cannot resist to make it double... 

[15:30] <mtymula> tadzik: why?

[15:30] <mtymula> ;p

[15:31] <tadzik> I tried it for a week and now syntax hilighted code looks awful for me :)

[15:31] <tadzik> are you working for Gadu-Gadu perhaps? ;)

[15:31] <Woodi> tadzik: maybe other "theme" can help :)

[15:32] <tadzik> I like my "everything is yellow" theme :)

[15:32] <mtymula> i contact my friends at work via GG, my clients and my friends... so... ;pp

[15:32] <Woodi> mtymula: it's not secure :)

[15:33] <mtymula> what?? GG??

[15:33] <mtymula> ;p

[15:33] <Woodi> or some encryption is now implemented ?

[15:33] <Woodi> however emails have same lvl of security :)

[15:33] <mtymula> no, it is not secure. 

[15:33] <mtymula> but great for fast contact

[15:33] <Woodi> right

[15:34] <tadzik> emails are usually ssl'd between you and the mail server

[15:34] <mtymula> because, and i hate that fact, everyone has it

[15:34] <tadzik> you don't go with a phone/laptop to a shopping mall, open wireshark and read people's emails

[15:34] <tadzik> *cough*, yeah

[15:34] <Woodi> but server <-> server it is clear text

[15:34] <tadzik> no. It's not guaranteed to be something more than clear text.

[15:34] <tadzik> same with xmpp

[15:38] *** bapa left
[15:38] *** bapa joined
[15:39] *** brrt joined
[15:39] <Woodi> r: sub foo() { say "abc foo" }; sub trait_mod:before(&c) { &c.wrap(sub {"WARNING: {&c.name} fires at " ~ now; nextsame }) }; before(foo); foo

[15:39] <p6eval> rakudo fc349a: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&before' called (line 1)␤»

[15:41] *** brrt left
[15:41] *** brrt joined
[15:42] <moritz> if you want to call it like that, don't make it a trait (but a normal sub), and call it as   before(&foo)

[15:44] <Woodi> moritz: for now I have no idea how to use trait so just used call :)

[15:44] <arnsholt> r: sub foo { say "foo" }; sub trait_mod:<is>(Routine $wrapper, :$before!) { $before.wrap($wrapper) }; sub bar is before(&foo) { say "bar"; nextsame; }; foo # Another option

[15:44] <p6eval> rakudo fc349a: OUTPUT«bar␤foo␤»

[15:45] <Woodi> r: sub foo { say "foo" }; sub trait_mod:<is>(Routine $wrapper, :$before!) { $before.wrap($wrapper) }; sub bar is  before(&foo) { say "bar"; };

[15:45] <p6eval> rakudo fc349a:  ( no output )

[15:46] <Woodi> r: sub foo { say "foo" }; sub trait_mod:<is>(Routine $wrapper, :$before!) { $before.wrap($wrapper) }; sub bar is  before(&foo) { say "bar"; }; foo

[15:46] <p6eval> rakudo fc349a: OUTPUT«bar␤»

[15:47] <tadzik> r: sub foo { say "foo" }; sub trait_mod:<is>(Routine $wrapper, :$before!) { $before.wrap(sub { $wrapper(); nextsame }) }; sub bar is before(&foo) { say "bar"; }; foo

[15:47] <p6eval> rakudo fc349a: OUTPUT«bar␤foo␤»

[15:48] <Woodi> if I use wrap then nextsame feels strange for me. this is "wrap" not another like one before...

[15:48] <geekosaur> dunno, it makes sense to me...

[15:48] <arnsholt> You need to explicitly state where to invoke the wrapped sub

[15:49] <arnsholt> Since the compiler can't automatically infer what goes before and what goes after

[15:50] <Woodi> yes, but something like "callwrapped" would be natural. but here is used more general mechanism probably

[15:55] <masak> "callwrapped" seems a weird break on the current nomenclature.

[15:55] <masak> given that the other two variants are "-same" and "-with".

[16:09] *** grondilu left
[16:17] *** benabik joined
[16:17] <kresike> bye folks

[16:17] *** kresike left
[16:17] *** benabik left
[16:17] *** benabik joined
[16:21] <PerlJam> Woodi: then use "callsame" instead of "nextsame"  (but I see what you're saying wrt feeling weird)

[16:22] *** MayDaniel joined
[16:29] *** spanner joined
[16:32] *** fgomez left
[16:38] *** sisar joined
[16:38] <sisar> o/

[16:39] <masak> sisar! \o/

[16:39] *** mikemol joined
[16:40] <masak> mikemol! \o/

[16:40] <mikemol> o/

[16:40] <PerlJam> r: sub foo { say "foo" }; &foo.wrap(sub { say "bar" });

[16:40] <p6eval> rakudo fc349a:  ( no output )

[16:41] <PerlJam> Hmm

[16:41] <TimToady> welcome back shortci^W<window closed>

[16:41] <masak> :P

[16:41] <sisar> my @a = 1, 2, 3, 4; say sqrt(@a); #how do I make sqrt apply to all the elements of @a?

[16:41] <sisar> rn: my @a = 1, 2, 3, 4; say sqrt(@a); #how do I make sqrt apply to all the elements of @a?

[16:41] <masak> sisar: a for loop? :)

[16:41] <p6eval> rakudo fc349a, niecza v22-29-g3ffe64c: OUTPUT«2␤»

[16:41] <masak> rn: my @a = 1..4; say @a>>.sqrt

[16:42] <p6eval> rakudo fc349a: OUTPUT«1 1.4142135623731 1.73205080756888 2␤»

[16:42] <p6eval> ..niecza v22-29-g3ffe64c: OUTPUT«1 1.4142135623730951 1.7320508075688772 2␤»

[16:42] <masak> rn: my @a = 1..4; say (sqrt $_ for @a)

[16:42] <p6eval> rakudo fc349a: OUTPUT«1 1.4142135623731 1.73205080756888 2␤»

[16:42] <p6eval> ..niecza v22-29-g3ffe64c: OUTPUT«1 1.4142135623730951 1.7320508075688772 2␤»

[16:42] <sisar> masak: yeah, ithink i was looking for the >> thingy

[16:42] <masak> people always look for the >> thingy.

[16:42] <sisar> what is it called ?

[16:42] <masak> hyper method call.

[16:43] <sisar> masak: thanks.

[16:43] *** fgomez joined
[16:45] *** grondilu joined
[16:46] <grondilu> Check out my version of the evolutionary algorithm:  http://rosettacode.org/wiki/Evolutionary_algorithm#Perl_6

[16:46] <grondilu> it's much shorter than in other languages

[16:47] <masak> grondilu: nice!

[16:47] <masak> grondilu++

[16:48] * masak always enjoys seeing max :by

[16:48] * grondilu is glad you like it

[16:48] <TimToady> it would be easier to follow in the log if you didn't check in *quite* so often :)

[16:48] <masak> sorry...

[16:49] <masak> grondilu: nice implicit loop with 'mutate($parent) xx C', too.

[16:49] <TimToady> I guess I can just do a manual diff on the two versions though...

[16:49] <grondilu> TimToady: sorry, I just happen to have little ideas coming one at a time

[16:49] <TimToady> happens to me sometimes too, just something to bear in mind

[16:49] <grondilu> masak: I quite hesitated to use 'xx' but it seems ok

[16:50] <masak> yeah. the semantics to re-eval the lhs is relatively new.

[16:50] *** sorenso joined
[16:50] <masak> (and an improvement, if you ask me)

[16:50] <grondilu> I wonder how it knows whether the lhs is deterministic or not, though

[16:51] <masak> it doesn't.

[16:52] <masak> at least not current implementations.

[16:52] <masak> they just re-eval the thunk regardless.

[16:52] <masak> rn: say (2.rand.Int) xx 5

[16:52] <grondilu> ah ok

[16:52] <p6eval> rakudo fc349a: OUTPUT«1 0 1 1 0␤»

[16:52] <p6eval> ..niecza v22-29-g3ffe64c: OUTPUT«1 1 1 0 1␤»

[16:53] <masak> oops, superstitious parens.

[16:53] <masak> rn: say (2.rand.Int xx 5).join

[16:53] <p6eval> niecza v22-29-g3ffe64c: OUTPUT«01000␤»

[16:53] <p6eval> ..rakudo fc349a: OUTPUT«01001␤»

[16:53] *** sqirrel joined
[16:53] <masak> rn: say Bool.roll xx 5

[16:53] <p6eval> rakudo fc349a: OUTPUT«False False True True True␤»

[16:53] <p6eval> ..niecza v22-29-g3ffe64c: OUTPUT«False True False False True␤»

[16:54] <masak> (if that were an iterated prisoner's dilemma, Niecza would come out on top) :P

[16:54] <PerlJam> r: https://gist.github.com/4066950

[16:54] <p6eval> rakudo fc349a: OUTPUT«foo␤No such method 'wrap' for invocant of type 'Bool'␤  in block  at /tmp/zvbNpHDRp5:5␤␤»

[16:54] <PerlJam> there we go

[16:55] <PerlJam> IS that a known bug?

[16:55] *** tipdbmp joined
[16:55] <masak> PerlJam: yes.

[16:55] <masak> try a semicolon at the end of the first sub declaration.

[16:56] <PerlJam> crazy

[16:56] <masak> it's in RT. I'm looking.

[16:56] <tipdbmp> Where can I find a grammar that can parse mathematical expressions? I would like to learn a bit about grammars and thought that Perl 6 would be a nice way to do it. Should I start with math exprs in the first place?

[16:57] <TimToady> I guess my first question would be, "mathematical expressions" in what language?

[16:57] <masak> tipdbmp: sounds like a nice exercise, yes.

[16:58] <PerlJam> tipdbmp: Do you mean grammars in general, or just Perl 6 grammars?

[16:58] <TimToady> real "mathematical expressions" are not strings

[16:58] <TimToady> since mathematicians tend to use 2-dimensional notations

[16:58] <PerlJam> (Perl 6 will hide some details and make things easier for you than you'd get from other tools like yacc or bison)

[16:59] <tipdbmp> Simple math exprs: 1 + 2 * (3 / 4), for now.

[17:00] <TimToady> have a look at http://rosettacode.org/wiki/Arithmetic_evaluation#Perl_6

[17:00] <PerlJam> tipdbmp: the "best" way to learn about grammars is to try to write a parser from scratch  ;)

[17:01] <masak> tipdbmp: I wrote one for this post: http://strangelyconsistent.org/blog/what-you-can-do-with-ggeoptable-that-you-couldnt-without

[17:01] <masak> it's linked from it.

[17:01] <TimToady> (though that example may have bitrotted since it was put there)

[17:02] <masak> tipdbmp: 

[17:02] <masak> r: grammar Math { rule TOP { <add> }; rule add { <mul>+ % <addop> }; rule mul { <term>+ % <mulop> }; token addop { <[+-]> }; token mulop { <[*/]> }; token term { \-? \d+ } }; say Math.parse("4 + 2 * 5")

[17:02] <p6eval> rakudo fc349a: OUTPUT«｢4 + 2 ｣␤ add => ｢4 + 2 ｣␤  mul => ｢4 ｣␤   term => ｢4｣␤  addop => ｢+｣␤  mul => ｢ 2 ｣␤   term => ｢2｣␤␤»

[17:03] <masak> oops. :/

[17:03] <masak> interesting. I should run this through jnthn's debugger... :)

[17:04] <grondilu> instead of 'max :by( *.&fitness <=> *.&fitness )', I whish I could have written just:  'max :by(*.&fitness)'

[17:05] *** domidumont left
[17:06] <masak> er. you can.

[17:06] <masak> :by(&fitness), even.

[17:06] <grondilu> r: say max :by(*.chars), <foo bar long>;

[17:06] <p6eval> rakudo fc349a: OUTPUT«long␤»

[17:07] <grondilu> I thought I had tried that.  Don't know why it failed.

[17:08] <masak> r: say max :by(*.&chars), <foo bar long>

[17:08] <p6eval> rakudo fc349a: OUTPUT«long␤»

[17:08] <masak> r: say max :by(&chars), <foo bar long>

[17:08] <p6eval> rakudo fc349a: OUTPUT«long␤»

[17:09] <PerlJam> grondilu: writing something that utilizes an evolutionary algorithm?

[17:09] <FROGGS> [17:46 ]<grondilu> Check out my version of the evolutionary algorithm:  http://rosettacode.org/wiki/Evolutionary_algorithm#Perl_6

[17:09] <PerlJam> FROGGS++ thanks :)

[17:10] <grondilu> PerlJam: No.  Just having fun writting stuff in RosettaCode

[17:10] * benabik finds the *.foo version clearer than *.&foo or &foo

[17:11] <TimToady> this seems inefficient to me, insofar as it's going to recalculate the parent's fitness each time

[17:11] <grondilu> TimToady: yeah I considered using a cache.  But I'm not sure it worths it.

[17:11] <TimToady> I'd put them into pairs, where the key is the fitness, and the value the individual, and the max should work straight on it

[17:12] <TimToady> rn: say (3 => 'foo', 3 => 'bar', 4 => 'long').max

[17:12] <p6eval> rakudo fc349a, niecza v22-29-g3ffe64c: OUTPUT«4 => "long"␤»

[17:13] <TimToady> well, maybe it doesn't matter much inside max

[17:14] <TimToady> it's not like sort, where it's doing a lot of repeated comparisons

[17:14] *** kurahaupo joined
[17:14] <TimToady> (which does a schwartzian transform anyway, so nevermind)

[17:14] * TimToady looks around for more caffeine...

[17:15] <grondilu> it's true that the code needs optimization.  It might be short but it's terribly slow.

[17:15] <TimToady> actually, it's the optimizer that needs the optimization :)

[17:16] <TimToady> one place we should optimize, for instance, is when you write *+*, it just probably replace it with &infix:<+>.

[17:17] <TimToady> and *.&foo should just turn into &foo as appropriate

[17:18] <grondilu> I couldn't use &foo directly because it was inside a binary (it was: *.&foo op *.&bar)

[17:18] <TimToady> perhaps more importantly, we can optimize out all the lazy apparatus when we know the data values don't need it

[17:19] <benabik> Does &foo automatically look for methods?

[17:19] *** birdwindupbird left
[17:20] <TimToady> no, but neither does *.&foo

[17:20] *** domidumont joined
[17:22] *** brrt left
[17:23] <TimToady> re optimizing away laziness, we often speak disparagingly of Perl 5's model of propagating context down the syntax tree, but this is primarily because we don't want the user to worry about it.  It is still, however, very much in the province of the optimizer to propagate such information downward, since vast simplifications are possible when you know your lazy expression is in one of sink, item, eager, hyper, or race context

[17:24] <masak> agreed.

[17:24] <TimToady> [+] foo Zeq bar is obviously putting the Z into an eager context, for instance

[17:24] <benabik> grondilu: You keep using & in IRC, but it's not there in the code since you're calling methods.

[17:24] *** atrodo left
[17:25] <masak> I guess the difference is that whereas Perl 5 propagates a kind of context inwards which changes the final return value of the inner thing, what we're talking about here is propagating optimization information.

[17:25] <grondilu> benabik: are you sure you're looking at the most recent version?

[17:26] *** atrodo joined
[17:26] <masak> which is how most optimizations work, I'd bet: (1) look at the surrounding context, and if it allows some optimization, (2) do it.

[17:26] <benabik> grondilu: I wasn't aware you were refactoring it that aggressively after posting it.  :-D

[17:26] *** ifim joined
[17:28] <TimToady> note that you can't simply turn a Zeq into a »eq« though, since the semantics are different

[17:29] <TimToady> what you can do with Zeq, however, is have a version that is allowed to examine the lengths of each side first, when you know it's eager

[17:29] <masak> right. eageer things are allowed to look ahead any amount they want.

[17:30] <TimToady> and then it can call into »eq« efficiently for the comparable prefixes, if that's going to be faster

[17:30] *** cognominal left
[17:30] <TimToady> or into whatever does fast memory-to-memory comparisons...

[17:31] <TimToady> that is presumably also used by »eq« in those cases where it can be fast

[17:32] <TimToady> especially when comparing two compact arrays (also an optimization that is not done yet)

[17:34] <TimToady> amid all the other important work that is going on, I just don't want to lose sight of the fact that performance is still the main blocker to widespread adoption of Perl 6

[17:34] <masak> and CPAN/Perl 5 integration.

[17:34] <diakopter> both++

[17:34] <masak> can you actually reduce infix:<eq> to a memory comparison? what about combining characters and NFG and stuff?

[17:35] <diakopter> if they're already NFG then the comparison just works

[17:36] <TimToady> if Perl 6 were fast enough, we couldn't stop people from translating Perl 5 CPAN into Perl 6 CPAN in droves

[17:36] <colomon> TimToady++

[17:38] <grondilu> I tried to use Perl6 on rosalind.info.  I couldn't.  It was too slow for most problems.  I had to use Perl5.  So yeah I think performance improvement would be awesome.

[17:38] <masak> I dunno. there's something to be said for just using a CPAN module (well-tested, developed for years) across the p5-p6 chasm rather than having to port it.

[17:38] <masak> if there were excellent p5-p6 integration, so that the p5 half ran reasonably fast, maybe the slowness of p6 would be less of an issue.

[17:39] <TimToady> masak: if two NFG strings are eq, they will have an identical sequence of integers.  if the integers are unequal, and any of them are negative, then you have to do more work.  if none of the integers are negative, you have fast falsification too

[17:39] <masak> TimToady: yeah, that's what I thought.

[17:40] <TimToady> p5-p6 integration is important, but will always impose an overhead that may outweigh the performance benefits of using p5

[17:40] *** grondilu left
[17:40] *** arlinius joined
[17:40] *** rurban left
[17:41] <doy> honestly, a lot of things on cpan could really benefit from the opportunity for a rewrite too

[17:41] <doy> (:

[17:41] <PerlJam> for long running programs, that don't need to shuttle data across the p5/p6 barrier very much, the overhead would be worth it

[17:43] <TimToady> there's also cultural overhead :)

[17:43] <doy> yeah, similar to why swig always produces such terrible results

[17:44] <tipdbmp> What's the $^y variable?

[17:44] <PerlJam> tipdbmp: it's a self-declared variable in the current block

[17:44] <PerlJam> tipdbmp: unless you're asking about perl5, then I have no idea :)

[17:44] <tipdbmp> =)

[17:46] *** sorenso left
[17:47] *** kurahaupo left
[17:48] <sorear> good * #perl6

[17:48] <TimToady> o/

[17:49] <masak> sorear! \o/

[17:58] <masak> Perl 5 is great to a large extent because of CPAN. in some sense, it doesn't *matter* if the CPAN module I'm using is up for a rewrite. someone solved the problem, I can download the module and make use of that prior work.

[17:58] *** dakkar left
[17:59] <masak> if by $magic-wand Perl 6 would have access to all that today, Perl 6 would be a lot more attractive to a lot of people, I think.

[18:00] <TimToady> yes, but it's the opposite of Einstein's idea; it's a wireless with an actual cat transmitting the signals

[18:01] * TimToady thinks in his more arrogant moments that Perl 5 is great because it was designed to allow a CPAN to develop...

[18:01] <colomon> o/, sorear 

[18:01] <nwc10> masak: my assumption (not verified) is that much of the useful stuff on CPAN ends up depending indirectly on something XS on CPAN.

[18:02] <nwc10> masak: if so, I'm then not sure whether it's going to be easier to rewrite those XS dependencies in Perl 6 than to write a general XS thunking layer that's "good enough" for a sufficiently polished and reliable value of "good enough"

[18:02] <doy> presumably, if it were a p5 bridge (rather than a rewrite of p5 in p6), xs stuff would continue to work

[18:03] <nwc10> the sort of anti Inline::Rakudo

[18:03] <nwc10> well, inverse

[18:04] <nwc10> yes. but still "who knows" on the complexity/cost trade off

[18:04] <TimToady> in addition to transmission overhead, and maybe marshalling overhead, there's the difficulty of reconciling the type systems

[18:05] <TimToady> part of the "cultural overhead" I was referring to earlier

[18:05] <masak> nwc10: that assumption sounds very testable. maybe I should write a blog post.

[18:06] <TimToady> every string would have to be translated between utf8 and nfg

[18:06] <diakopter> (but possibly only once if it can be cached/versioned)

[18:06] <masak> TimToady: there will always be translation. what Tene's work on Parrot interop showed (or what I learned, at least), is that translation is something that the host language has to solve in-situ when talking to the embedded language.

[18:07] <TimToady> assuming we can even guess which p5 strings should turn into Str, and which into Buf

[18:07] <masak> (as opposed to it being a global one-size-fits-all solution)

[18:08] <TimToady> so yeah, the exact API will have to be specified from the p6 side, which can make the type distinctions, and presumably is written by someone who can guess the intent of the p5 code in question

[18:09] <doy> guessing between Str and Buf will almost certainly lead to a whole lot of pain

[18:10] <diakopter> I believe that the bridge is the best option, perhaps with a custom/forked build of perl with the same configure options

[18:10] <doy> probably better to just pick one and let the person writing the p6 side do the translation manually based on what's expected

[18:12] <TimToady> oh, re Stringy in the backlog, the intent is not just that Cat be Stringy, but also Buf.  in fact, Stringy was invented with Buf in mind more than Cat (at least in one mind, senile though it is getting)

[18:13] *** _jaldhar_ left
[18:13] <diakopter> (same configure options as the perl available when configure of p6 is run, so it can use the same installed libraries)

[18:15] *** FROGGS left
[18:16] *** flightrecorder left
[18:22] * TimToady keeps wondering whether we should steal ^ from exclusive-or and use something else for that

[18:23] <TimToady> how do mathematician's write exclusive-or?

[18:23] <TimToady> *cians

[18:24] <TimToady> ⊻ or ⊕ it would appear

[18:24] <sorear> .u ⊕

[18:24] <phenny> U+2295 CIRCLED PLUS (⊕)

[18:25] <sorear> I've never seen the former

[18:25] <sorear> mostly it's either ⊕ or +

[18:25] <TimToady> infix:<o>   # "one of"  ;)

[18:25] <sorear> not (Texas) functional composition?

[18:26] <sorear> sub infix:<o>($f,$g) { -> \x { f(g(x)) } }

[18:26] <masak> I don't think there's a need for infix:<^>. I hardly ever use &one.

[18:27] <TimToady> well, we don't build in infix:<⚪> either...

[18:27] <masak> maybe just leave infix:<^> unclaimed for people who want to define a nice short operator.

[18:27] <TimToady> or make it do what people expect :)

[18:30] *** sisar left
[18:31] <TimToady> but whatever xor turns into would need a single char form like o, so we can have the related forms like oo and +o

[18:32] *** _jaldhar_ joined
[18:34] * masak looks at the symbols on his keyboard and draws a blank

[18:34] *** spider-mario joined
[18:35] <TimToady> well, we certainly can't use the +, so I went with the o

[18:35] <sorear> meh, xor is just + on GF(2)

[18:36] <TimToady> GF(2) can overload + however it likes, but it's not Perl(6)  :)

[18:36] <benabik> .u ⚪

[18:36] <phenny> U+26AA MEDIUM WHITE CIRCLE (⚪)

[18:37] <benabik> That has funny shading on my computer that makes it look like a sphere.  :-/

[18:39] <huf> it's a square here :)

[18:39] <huf> fitting.

[18:40] <diakopter> are you seriously considering making xor solely use a non-ascii character?

[18:40] <PerlJam> that's odd, it's a dodecahedron here.

[18:41] <PerlJam> ;-P

[18:41] <doy> 'o' doesn't look very non-ascii to me

[18:41] <diakopter> doy: I guess I wasn't addressing only TimToady...

[18:42] *** sqirrel left
[18:42] *** snearch joined
[18:44] <sorear> wait, I think there's something wrong with my display, all my characters are two-dimensional

[18:44] <sorear> no spheres or dodecahedrons, or rhododendrons

[18:45] <diakopter> .u 2331

[18:45] <phenny> U+2331 DIMENSION ORIGIN (⌱)

[18:46] <diakopter> (I have no idea what that looks like)

[18:46] <diakopter> oh.

[18:53] <TimToady> well, as with hypers, we could have ⊕ be the preferred form, and define a Texas version of that; I was thinking of o as the Texas form of ⊕ becuase of things like +⊕, ~⊕, and ⊕⊕ would come out really strange if we used a digraph

[18:53] *** sorenso joined
[18:53] *** sjohnson left
[18:54] <TimToady> +o+ or o+o+ just don't work too well

[18:56] *** SamuraiJack left
[18:58] <masak> I think I've used +^ in Perl 6 code once.

[18:58] <masak> I've never used ^ or ^^ -- and I don't think I will.

[18:59] *** benabik left
[18:59] *** ifim left
[19:02] <PerlJam> er, why would we take back ^ in the first place?  What's the motivation there?

[19:03] *** benabik joined
[19:03] *** rindolf left
[19:03] *** sjohnson joined
[19:06] <dalek> perl6-roast-data: 17f2d1e | coke++ | / (4 files):

[19:06] <dalek> perl6-roast-data: today (automated commit)

[19:06] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/17f2d1e289

[19:08] *** risou left
[19:08] *** risou joined
[19:08] <[Coke]> rakudo is choking on t/spec/S03-sequence/basic.t

[19:14] <TimToady> the discussion in http://en.wikipedia.org/wiki/Exclusive_or#Alternative_symbols is interesting

[19:16] <TimToady> PerlJam: it produces very confusing results if the user expects exponentiation, and is badly huffmanized from the standpoint of frequency of use

[19:18] *** Chillance joined
[19:20] <TimToady> also, infix ^ has no relation to prefix ^ to preserve

[19:22] <TimToady> so an alphabetic operator becomes a possibility, unlike operators that must also work as prefixes

[19:22] <PerlJam> okay.

[19:23] <TimToady> which is why I was thinking about o

[19:23] <TimToady> oh, another benefit of such a change:

[19:24] <TimToady> reduces the ambiguity with ~^ and such

[19:24] <TimToady> when used as prefix

[19:25] <TimToady> rn: say ^20; say ~^20; say ~ ^20;

[19:25] <p6eval> niecza v22-29-g3ffe64c: OUTPUT«0..^20␤Unhandled exception: Buffer bitops NYI␤  at /home/p6eval/niecza/lib/CORE.setting line 1443 (die @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3350 (prefix:<~^> @ 4) ␤  at /tmp/fnoDLBIh4P line 1 (mainline @ 5) ␤  at /home/p6eval/niecza/lib/COR…

[19:25] <p6eval> ..rakudo fc349a: OUTPUT«0..^20␤prefix:<~^> NYI␤  in method gist at src/gen/CORE.setting:10149␤  in sub say at src/gen/CORE.setting:7460␤  in block  at /tmp/KnLqQXn0xH:1␤␤»

[19:25] <TimToady> heh, well, potential ambiguity

[19:25] <TimToady> rn: say ^20; say ~ ^20;

[19:25] <p6eval> rakudo fc349a, niecza v22-29-g3ffe64c: OUTPUT«0..^20␤0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19␤»

[19:26] <TimToady> well, actual ambiguity, with a LTA result, I guess

[19:26] *** snearch left
[19:27] <GlitchMr> Shouldn't it be contamination of say function and 0..19 range?

[19:27] <GlitchMr> (lol wrong word)

[19:27] <GlitchMr> concatenation*

[19:28] <TimToady> no, because the ~ is where a prefix is expected, not an infix

[19:29] *** sisar joined
[19:29] <PerlJam> (context is still king in Perl :-)

[19:30] *** daniel-s__ joined
[19:33] *** Chillance left
[19:34] *** daniel-s_ left
[19:34] *** Chillance joined
[19:39] * jnthn back

[19:40] <sorear> yay jnthn 

[19:40] <jnthn> shesh, how much backlog while I went to teach folks git... :P

[19:40] <jnthn> *sheesh

[19:41] * jnthn sees what he missed

[19:41] *** brrt joined
[19:45] <[Coke]> Since jnthn is in the room, is S03-sequence/basic.t failing for any other rakudoers?

[19:45] *** cognominal joined
[19:47] <jnthn> Looks good to be (at ca9c30, anyway)

[19:52] *** rindolf joined
[19:52] <jnthn> [Coke]: Just built latest and it's also seeming happy.

[19:59] *** kurahaupo joined
[20:01] <jnthn> oh noes, operator changes /o\

[20:02] <jnthn> Though thankfully to one probably rarely used :)

[20:04] <masak> jnthn: nothing's changed yet :)

[20:04] <jnthn> :)

[20:05] <jnthn> I kinda like the symmetry of &, | and ^ all being one-char non-\w operators.

[20:05] <masak> aye.

[20:05] <jnthn> Though there's precedent for not having ^ in so far as there's nothing for none

[20:06] <masak> Perl 5 does fine without a symbolic (boolean) xor operator.

[20:12] *** kst left
[20:13] *** kst joined
[20:21] *** domidumont left
[20:22] <TimToady> one must have the bitwise ops though, somehow

[20:23] <PerlJam> If we go by huffman, the bitwise ops are way too short for the amount of use they get

[20:24] <TimToady> we already doubled them from p5 :)

[20:24] <PerlJam> still :)

[20:25] *** kaare_ left
[20:26] *** ifim joined
[20:28] <PerlJam> I'd be perfectly happy with awkward-to-type or Texas-sized bitwise ops as the default.  If someone happens to need bitwise ops frequently, they can always use a slang 

[20:29] <jnthn> otoh, I doubt we can do anything more sensible with those chars :)

[20:30] <tipdbmp> How can I check what type an object is? class MyClass { } my $c = MyClass.new; # how can I checknow if $c's class is really MyClass?

[20:31] <[Coke]> r: class MyClass {}; my $c = MyClass.new; say $c.WHAT;

[20:31] <p6eval> rakudo fc349a: OUTPUT«MyClass()␤»

[20:32] <[Coke]> r: class MyClass {}; my $c = MyClass.new; say $c.WHAT; say MyClass.WHAT;

[20:32] <p6eval> rakudo fc349a: OUTPUT«MyClass()␤MyClass()␤»

[20:32] <jnthn> r: class MyClass { }; my $c = MyClass.new; say $c ~~ MyClass; my $a = 42; say $a ~~ MyClass;

[20:32] <p6eval> rakudo fc349a: OUTPUT«True␤False␤»

[20:32] <jnthn> Use ~~ for type checking

[20:32] <jnthn> .WHAT will tell you what it is, if you're curious. But for type checking, use ~~

[20:32] <jnthn> (question coulda meant either :))

[20:32] <tipdbmp> tnx =)

[20:33] *** Moukeddar joined
[20:34] <sorear> o/ Moukeddar 

[20:35] <Moukeddar> \o/ sorear :)

[20:35] <Moukeddar> how are you doing, Sir!

[20:36] <sorear> very good

[20:36] <rindolf> Moukeddar: hi.

[20:36] <rindolf> Moukeddar: what does "Moukeddar" mean?

[20:37] *** wamba joined
[20:37] <Moukeddar> Hola rindolf, it's in arabic, it's my last name, it doesn't have a specific meaning actually ;)

[20:38] <rindolf> Moukeddar: ah, OK.

[20:38] <Moukeddar> it's pretty unique, therefor i use it as a nickname 

[20:38] <rindolf> Moukeddar: ah.

[20:38] <rindolf> Moukeddar: where are you from?

[20:38] <Moukeddar> Morocco, you?

[20:38] <rindolf> Moukeddar: unfortunately with this respect my last name is "Fish".

[20:38] <rindolf> Moukeddar: I'm from Israel.

[20:39] <PerlJam> Moukeddar: you know, every time I see your nick, I transliterate the k and the d in my head for some reason.

[20:39] <rindolf> http://www.shlomifish.org/ - but I'm using a Fish emblem here.

[20:39] <rindolf> And elsewhere.

[20:40] <sorear> PerlJam: transpose?

[20:40] <Moukeddar> PerlJam, even people here have problem with my name, i guess it's a curse lol

[20:40] *** brrt left
[20:40] <sorear> rindolf: does fish (he) mean the same as fish (en) ?

[20:41] *** tipdbmp left
[20:41] <Moukeddar> rindolf, nice website ;) , you too people have problems with hebrew support 

[20:42] <rindolf> sorear: no, there is no word "Fish" in Hebrew.

[20:42] <rindolf> Moukeddar: Hebrew support is usually not a problem.

[20:42] <Moukeddar> rindolf, talking about RTL ;)

[20:42] <rindolf> Moukeddar: but I prefer that most of my home site will be in English.

[20:42] <rindolf> Moukeddar: yes, I know.

[20:43] <rindolf> Moukeddar: see http://www.shlomifish.org/meta/FAQ/#website_in_english .

[20:43] <rindolf> sorear: my last name is not Hebrew. It is German in origin or something.

[20:43] <rindolf> sorear: maybe English.

[20:44] <rindolf> sorear: my grandfather came from Poland.

[20:44] <tadzik> ha, fellow :)

[20:44] <Moukeddar> rindolf, good reasons ;) i could borrow them ;)

[20:44] <TimToady> my ancestors lived in Poland about 5 generations ago

[20:44] <TimToady> on the way from Belgium to Ukraine...

[20:45] <PerlJam> < rindolf> sorear: no, there is no word "Fish" in Hebrew.

[20:45] <tadzik> wow

[20:45] <PerlJam> Do they not eat fish?  Do fish not exist in hebrew?

[20:45] <geekosaur> I think this is use/mention

[20:46] <sorear> PerlJam: rindolf's last name is F-I-S-H

[20:46] <sorear> PerlJam: I wondered if those letters meant something in Hebrew

[20:46] <benabik> PerlJam: Don't feel bad, that was my first thought on reading that sentence too.

[20:47] <Moukeddar> Watch out, #perl6 is turning into Language analytics :)

[20:47] <geekosaur> wasn't it always?

[20:47] * PerlJam wonders if he should use more emoticons in his writing on IRC

[20:47] <sorear> they need seafood words, if for no other reason than to explain the rules on what is and isn't edible :p

[20:47] *** tipdbmp joined
[20:47] <geekosaur> "dag"

[20:48] <TimToady> .oO(and Jonah was swallowed by a great <mumble>)

[20:49] <PerlJam> "large legless water-dwelling animal bigger than an elephant"

[20:49] * Moukeddar thinks PerlJam could use some more emotions 

[20:49] <PerlJam> Moukeddar: my wife tells me that all the time  :)

[20:50] <sorear> rindolf: interesting favicon you have there

[20:51] <rindolf> PerlJam: the Hebrew name for Fish is "דג" - "Dag".

[20:52] <[Coke]> Yo, Dag.

[20:52] <PerlJam> heh

[20:53] <PerlJam> rindolf: you must be pleased to be so important to the inner workings of git.  :)

[20:53] <TimToady> if a Cat is a list pretending to be a string, maybe a Dog is a string pretending to be a list

[20:53] <rindolf> PerlJam: heh.

[20:53] <sorear> Hai dag

[20:53] <GlitchMr> Why not both?

[20:53] <sorear> </injoke>

[20:53] <[Coke]> TimToady: Sounds Fishy.

[20:54] <PerlJam> TimToady: the PDL folks use cat/dog as opposites too IIRC

[20:54] <rindolf> sorear: in Hebrew F and P share the same letter, and when it is stressed it is "P". And it is stressed at the beginning of a word.

[20:54] *** skids joined
[20:54] <rindolf> sorear: http://en.wikipedia.org/wiki/Pe_%28letter%29

[20:55] <geekosaur> dag nabbit?

[20:55] <sorear> rindolf: I am not sure what you are replying to

[20:55] <Moukeddar> you guys are hilarious 

[20:55] <rindolf> sorear: to the Fish discussion.

[20:55] <rindolf> sorear: in Hebrew, you cannot start a word with "f".

[20:56] <rindolf> sorear: it must start with a "p".

[20:56] <GlitchMr> https://gist.github.com/4068343

[20:56] <GlitchMr> Python is too limited for that...

[20:57] <GlitchMr> But perhaps with complex hacks...

[20:57] <sorear> rindolf: do Hebrew first-languagers call you /piʃ/ ?

[21:00] <TimToady> and is that really [pʰiʃ] as an English speaker would pronounce it?

[21:00] <rindolf> sorear: no, they don't.

[21:00] <sorear> dunno, my skillz don't extend to the ʰ level

[21:01] <TimToady> rindolf: then do they call you "דג"?

[21:02] *** kst left
[21:02] <rindolf> TimToady: no, they call me "Fish"

[21:02] <diakopter> doubling-- bitwise-- again--

[21:02] <rindolf> Well, my first name is Shlomi.

[21:02] *** kst joined
[21:03] *** _jaldhar_ left
[21:03] *** jaldhar joined
[21:04] * geekosaur grumbles, having suddenly noticed that his irc client didn;t rtl properly

[21:05] *** sisar left
[21:07] *** GlitchMr left
[21:09] *** jaldhar left
[21:11] *** fhelmberger left
[21:11] *** jaldhar joined
[21:12] *** nebuchadnezzar joined
[21:23] *** jlaire left
[21:29] *** Moukeddar left
[21:29] *** rindolf left
[21:35] *** jlaire joined
[21:35] *** gaussblurinc_ joined
[21:44] *** benabik left
[21:45] <tipdbmp> Where does one place the regex modifiers? if $str ~~ m/:i something / { "doesn't seem to work" }

[21:46] <masak> rn: say "aBc" ~~ m:i/ AbC /

[21:46] <p6eval> rakudo fc349a: OUTPUT«｢aBc｣␤␤»

[21:46] <p6eval> ..niecza v22-29-g3ffe64c: OUTPUT«#<match from(0) to(3) text(aBc) pos([].list) named({}.hash)>␤»

[21:46] <masak> rn: say "aBc" ~~ m/ :i AbC /

[21:46] <p6eval> rakudo fc349a: OUTPUT«｢aBc｣␤␤»

[21:46] <p6eval> ..niecza v22-29-g3ffe64c: OUTPUT«#<match from(0) to(3) text(aBc) pos([].list) named({}.hash)>␤»

[21:46] <masak> either outside or inside works.

[21:47] <tipdbmp> Oh, ok.

[21:53] *** kst left
[21:53] *** kst joined
[21:59] *** ifim left
[22:13] *** japhb_ joined
[22:15] <japhb_> grondilu++ # Very nice work on http://rosettacode.org/wiki/Evolutionary_algorithm#Perl_6

[22:16] <japhb_> That feels like the kind of thing that should go in snippet rotation on www.perl6.org.  Um, when one of us makes that work ...

[22:16] <japhb_> ETOOMANYTASKS

[22:17] *** cognominal left
[22:17] * jnthn wonders which task is most intstresting... :)

[22:18] <masak> -Ointeresting

[22:18] <japhb_> TimToady, re: http://irclog.perlgeek.de/perl6/2012-11-13#i_6149996 , I couldn't agree more.  The top two blockers at my $day_job are definitely performance and breadth of ecosystem.

[22:19] *** ifim joined
[22:23] *** cognominal joined
[22:24] *** spider-mario left
[22:24] *** sorenso left
[22:25] *** lawrmcfa joined
[22:25] *** lawrmcfa left
[22:26] *** lawrmcfa joined
[22:28] <tipdbmp> How can one subtract character classes? Say: <[a..z]> - <[aeiou]>

[22:29] <jnthn> inside the angles

[22:29] <jnthn> <[a..z]-[aeiou]>

[22:29] <tipdbmp> no space between ]-[?

[22:29] <jnthn> Up to you

[22:29] <tipdbmp> Ah, ok. tnx =)

[22:30] <masak> can also do + between the [], and a + or - before the first one.

[22:31] *** telex left
[22:32] <sorear> but space between < and [ is likely to confuse things

[22:32] *** telex joined
[22:33] <jnthn> Yes, that's not optional. :)

[22:33] <jnthn> Otherwise it'll get taken as quote words I guess...

[22:34] <sorear> n: say grep /<[0-z]^:Letter>/, <0 a ð …>

[22:34] <p6eval> niecza v22-29-g3ffe64c: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unsupported use of - as character range; in Perl 6 please use .. at /tmp/JTfZjDs1sn line 1:␤------> [32msay grep /<[0-z[33m⏏[31m]^:Letter>/, <0 a ð …>[0m␤␤Parse failed␤␤»

[22:34] <sorear> n: say grep /<[0..z]^:Letter>/, <0 a ð …>

[22:34] <p6eval> niecza v22-29-g3ffe64c: OUTPUT«0 ð␤»

[22:34] <sorear> \o/

[22:37] *** gaussblurinc_ left
[22:37] <masak> nice.

[22:40] <[Coke]> can you deparse that for me?

[22:41] <sorear> < [0..z] ^ :Letter > ?

[22:41] <[Coke]> (ah, there's a nice module to have. regex::deparse)

[22:42] <sorear> regex::deparse sounds like it converts a Regex object back to text

[22:43] <[Coke]> so, that's "Any thing that's a letter or in the range 0..z, but not both" ?

[22:47] <[Coke]> (looks like.)

[22:48] <flussence> xor.

[22:49] <[Coke]> the spec calls it by a more set-like name, but yah.

[22:51] <masak> "symmetric set difference"?

[22:51] <[Coke]> Aye.

[22:51] <masak> just a stab in the dark. :P

[22:52] *** wamba left
[22:58] *** cognominal left
[23:01] *** lawrmcfa left
[23:02] *** lawrmcfa joined
[23:05] *** alester left
[23:06] *** wamba joined
[23:14] *** mtk left
[23:19] *** am0c joined
[23:24] *** MayDaniel left
[23:29] *** am0c left
[23:36] *** jlaire left
[23:37] *** wamba left
[23:43] *** fgomez left
[23:44] *** jlaire joined
[23:48] *** Chillance left
[23:49] *** lawrmcfa left
[23:54] *** sjohnson left
[23:54] *** sjohnson joined
[23:55] *** nebuchadnezzar left
[23:56] *** am0c joined
