[00:01] *** att__ joined
[00:01] *** att__ left
[00:05] *** Entonian joined
[00:06] *** whiteknight joined
[00:11] *** raiph joined
[00:13] *** Chillance left
[00:21] *** hypolin joined
[00:29] *** SHODAN left
[00:29] *** SHODAN joined
[00:31] *** Entonian left
[00:32] *** tokuhiro_ joined
[00:35] *** cognominal_ joined
[00:37] *** cognominal left
[00:57] *** daniel-s_ left
[01:09] *** anuby joined
[01:20] *** cognominal joined
[01:21] *** cognominal_ left
[01:45] *** atrodo left
[02:03] *** benabik left
[02:03] *** benabik joined
[02:05] *** sqirrel_ joined
[02:09] *** sqirrel left
[02:14] *** arlinius left
[02:18] *** whiteknight left
[02:37] *** raiph left
[02:46] <am0c> r: <<<a b c >>>.WHAT.say

[02:46] <p6eval> rakudo f81716: OUTPUT«Any()␤»

[02:47] <am0c> r: <a b c>.WHAT.say

[02:47] <p6eval> rakudo f81716: OUTPUT«Parcel()␤»

[02:52] *** cognominal_ joined
[02:53] *** cognominal left
[02:53] <diakopter> r: <<<a b c >>> >>+<>>

[02:53] <p6eval> rakudo f81716: OUTPUT«===SORRY!===␤Preceding context expects a term, but found infix >>+<>> instead␤at /tmp/mNguyXIXMM:1␤»

[02:53] <diakopter> hee

[03:17] *** tokuhiro_ left
[03:18] *** rindolf joined
[03:18] *** am0c left
[03:19] *** am0c joined
[03:30] *** rindolf left
[03:33] *** am0c left
[03:41] *** cognominal_ left
[03:46] *** cognominal_ joined
[04:01] *** DarthGandalf joined
[04:03] *** cognominal_ left
[04:05] *** rindolf joined
[04:06] *** geekosaur left
[04:06] *** eviltwin_b joined
[04:06] *** eviltwin_b is now known as geekosaur

[04:09] *** cognominal_ joined
[04:13] *** SamuraiJack joined
[04:26] *** DarthGandalf left
[04:28] *** DarthGandalf joined
[04:31] *** cognominal_ left
[04:35] *** aindilis joined
[04:37] *** dayangkun left
[04:37] *** SamuraiJack left
[04:42] *** cognominal_ joined
[04:42] *** SamuraiJack joined
[04:45] *** rindolf left
[04:45] *** rindolf joined
[04:47] *** rindolf left
[04:56] *** SamuraiJack left
[05:06] *** tokuhiro_ joined
[05:11] *** tokuhiro_ left
[05:21] *** cognominal_ left
[05:21] *** skids left
[05:23] *** cognominal joined
[06:02] *** wamba joined
[06:35] *** GlitchMr joined
[06:43] *** kaleem joined
[07:07] *** domidumont joined
[07:15] *** SamuraiJack joined
[07:15] *** kurahaupo left
[07:19] *** kaleem left
[07:19] *** kaleem joined
[07:32] *** SHODAN left
[07:33] *** SHODAN joined
[07:37] *** SHODAN left
[07:37] *** SHODAN joined
[07:40] *** domidumont left
[07:43] *** wamba left
[07:49] *** Woodi joined
[07:56] *** wtw left
[08:01] *** brrt joined
[08:05] *** wtw joined
[08:17] *** fhelmberger joined
[08:31] *** kaleem left
[08:31] *** flightrecorder joined
[08:31] *** kaleem joined
[08:38] *** awwaiid joined
[08:42] *** tokuhiro_ joined
[08:47] *** tokuhiro_ left
[08:47] *** herald2 joined
[08:48] *** dayangkun joined
[08:50] *** herald2 left
[08:58] *** domidumont joined
[09:09] *** cognominal left
[09:15] *** cognominal joined
[09:20] *** HarryS joined
[09:46] *** hypolin left
[09:46] *** dakkar joined
[09:55] *** GlitchMr left
[10:13] *** woosley left
[10:14] *** cognominal left
[10:21] *** fhelmberger left
[10:27] *** jerome left
[10:29] *** plobsing left
[10:33] *** cognominal joined
[10:40] *** anuby left
[10:45] *** jerome joined
[10:55] *** chee left
[10:58] *** bowtie joined
[11:07] *** rindolf joined
[11:10] *** birdwindupbird joined
[11:14] *** brrt left
[11:15] *** brrt joined
[11:15] *** kresike joined
[11:16] <kresike> hello all you happy perl6 people

[11:19] *** brrt left
[11:26] *** grondilu joined
[11:31] <grondilu> rn: my @a = (^3).roll: 3; say { @a Z=> ^@a }.keys;

[11:31] <p6eval> rakudo f81716, niecza v22-19-gd874a8e: OUTPUT«0␤»

[11:31] <grondilu> rn: my @a = (^3).roll: 3; say { @a Z=> ^@a }.perl;

[11:31] <p6eval> niecza v22-19-gd874a8e: OUTPUT«{ ... }␤»

[11:31] <p6eval> ..rakudo f81716: OUTPUT«Block.new()␤»

[11:31] <grondilu> rn: my @a = (^3).roll: 3; say { @a Z=> ^@a }.WHAT;

[11:31] <p6eval> rakudo f81716, niecza v22-19-gd874a8e: OUTPUT«Block()␤»

[11:31] <grondilu> why isn't it a Hash?

[11:32] <grondilu> I wanted to make a list of the elements of @a, but without repetition.

[11:33] <grondilu> .oO(maybe I should use Set)

[11:33] <tadzik> r: <a b c d c>.uniq.perl.say

[11:33] <p6eval> rakudo f81716: OUTPUT«("a", "b", "c", "d").list␤»

[11:33] <grondilu> rn: my @a = (^3).roll: 10; say @a.uniq;

[11:33] <p6eval> rakudo f81716: OUTPUT«2 1 0␤»

[11:33] <p6eval> ..niecza v22-19-gd874a8e: OUTPUT«1 0 2␤»

[11:33] <grondilu> cool

[11:33] <grondilu> thanks

[11:33] *** foobar293 joined
[11:35] *** mtk left
[11:35] *** foobar293 left
[11:36] <jnthn> It ain't a hash 'cus it has a placeholder parameter, which tells the block vs hash distinguisher "this is a block"

[11:36] <jnthn> Maybe 'cus of the Z=> not being recognized as contributing to hashness too...

[11:37] *** fhelmberger joined
[11:44] <grondilu> r: say { 'foo' => 'bar' }.WHAT;

[11:44] <p6eval> rakudo f81716: OUTPUT«Hash()␤»

[11:45] <grondilu> r: say { ('foo',) Z=> ('bar',) }.WHAT;

[11:45] <p6eval> rakudo f81716: OUTPUT«Block()␤»

[11:45] <grondilu> wtf

[11:45] <grondilu> n: say { ('foo',) Z=> ('bar',) }.WHAT;

[11:46] <p6eval> niecza v22-19-gd874a8e: OUTPUT«Block()␤»

[11:51] <jnthn> grondilu: See "Anonymous hashes vs blocks" in S06

[11:57] <felher> r: say << a b c d 'ab cd' >>.perl;

[11:57] <p6eval> rakudo f81716: OUTPUT«(("a", "b", "c", "d"), "ab cd")␤»

[11:58] <jnthn> r: .say for << a b c d 'ab cd' >>

[11:58] <p6eval> rakudo f81716: OUTPUT«a␤b␤c␤d␤ab cd␤»

[11:59] <felher> ^ @ jnthn : after reading the spec a little (after talking with sorear), this striked me as odd.

[11:59] <jnthn> felher: Note that when you iterate over it, it flattens.

[11:59] *** brrt joined
[11:59] <jnthn> Same if you were to list assign it.

[12:00] <jnthn> r: my %h = a => 1, b => 2; say %h.kv.perl

[12:00] <p6eval> rakudo f81716: OUTPUT«(("a", 1), ("b", 2)).list␤»

[12:00] <felher> jnthn: yes, this is kinda what sorar said to. But the spec states (in S02, Relationship between <> and «») that this probably should be equivalent to ('a', 'b', 'c', 'd', 'ab cd').

[12:01] <jnthn> .kv there is another example or something that flattens but has some internal parcel structure...

[12:01] <jnthn> felher: Well, and semantically it typically will be.

[12:01] <felher> jnthn: yep, but the spec also specs .tree.

[12:01] <felher> Oh, damn it, i have an appointment now. Sorry. 

[12:02] * felher back later.

[12:02] <jnthn> np

[12:03] <felher> goldfist1

[12:03] <felher> re for a few minutes, i guess

[12:05] <felher> jnthn: i thought, since the spec specs both << >> and .tree, it isn't exaclty as specced, since << >>.tree gives you something different (than at least I :) ) would expect :)

[12:05] <jnthn> Hm, true.

[12:06] <jnthn> Thing is

[12:06] <jnthn> << $foo >>

[12:06] <jnthn> will also split

[12:06] <jnthn> It does it by a call to .words which is certainly going to end up creating a nested parcel too

[12:07] <jnthn> While I can see how to fix the other case, this one is...not so easy.

[12:07] *** bluescreen10 joined
[12:08] <felher> jnthn: i see. Well, it isn't really a big problem. I just wanted to mention it.

[12:08] <felher> my appointment is ready now. so i'm afk again.

[12:08] <jnthn> o/

[12:09] * jnthn notices that we don't seem to have a Parcel transform that gives back a flattened out *Parcel*, but that's probably 'cus it'd interact badly with lazy things...

[12:11] <grondilu> n: say { pair ('foo',) Z ('bar',) }.WHAT;

[12:11] <p6eval> niecza v22-19-gd874a8e: OUTPUT«===SORRY!===␤␤Undeclared routine:␤     'pair' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1437 (die @ 5) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 37) ␤  at /hom…

[12:11] <grondilu> r: say { pair ('foo',) Z ('bar',) }.WHAT;

[12:12] <p6eval> rakudo f81716: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&pair' called (line 1)␤»

[12:12] <grondilu> r: say hash(('foo',) Z=> ('bar',)).WHAT;

[12:12] <p6eval> rakudo f81716: OUTPUT«Hash()␤»

[12:12] <grondilu> that will do

[12:13] <jnthn> .oO( need more bracket constructs in ASCII )

[12:14] <grondilu> r: say %(('foo',) Z=> ('bar',)).WHAT;

[12:14] <p6eval> rakudo f81716: OUTPUT«Hash()␤»

[12:14] *** am0c joined
[12:15] <grondilu> that will do too :)

[12:15] <jnthn> that desugars to (('foo',) Z=> ('bar',)).hash, fwiw :)

[12:15] *** am0c left
[12:15] *** wamba joined
[12:19] *** tokuhiro_ joined
[12:23] *** tokuhiro_ left
[12:28] <grondilu> do you know the equivalent of @a.uniq in P5?

[12:28] <tadzik> List::Util(s) uniq() mayhaps

[12:30] <grondilu> nevermind.  I'll use a 'my %auniq; $auniq{$_}++ for @a;'

[12:32] *** wamba left
[12:32] *** wamba1 joined
[12:38] *** Patterner left
[12:39] *** Psyche^ joined
[12:39] *** Psyche^ is now known as Patterner

[12:40] *** wamba1 left
[12:46] *** chee joined
[12:46] *** am0c joined
[12:47] *** tokuhiro_ joined
[12:50] *** GlitchMr joined
[12:51] *** wamba joined
[13:07] *** jaldhar_ left
[13:11] *** SamuraiJack left
[13:39] *** SHODAN left
[13:39] *** PacoAir joined
[13:41] *** SHODAN joined
[13:47] *** am0c left
[13:54] *** atrodo joined
[13:55] *** clkao_ left
[13:59] *** rindolf left
[13:59] *** rindolf joined
[14:00] *** wamba left
[14:00] *** fhelmberger left
[14:01] *** grondilu left
[14:01] *** fhelmberger joined
[14:02] *** fhelmberger left
[14:09] *** flightrecorder left
[14:10] *** flightrecorder joined
[14:27] *** rindolf left
[14:27] *** rindolf joined
[14:31] *** SHODAN left
[14:32] *** SHODAN joined
[14:43] *** pmurias joined
[14:47] *** kaleem left
[14:54] <pmurias> hi

[14:54] *** gaussblurinc joined
[14:56] <jnthn> o/ pmurias 

[14:57] <pmurias> jnthn: I got test 24 (modules) to pass at last ;)

[14:57] <jnthn> \o/

[14:57] <pmurias> the next one is classes ;)

[14:58] <jnthn> How much of 6model / the REPRs did you port so far? :)

[14:59] * jnthn will be curious to see how that looks in JavaScript...

[15:00] <pmurias> jnthn: will be porting parts of that while implementing classes

[15:00] *** benabik left
[15:01] <pmurias> I was distracted by other stuff from rakudo-js so I didn't get much done

[15:03] <jnthn> OK

[15:03] *** flightrecorder left
[15:03] *** kaleem joined
[15:03] *** stopbit joined
[15:06] *** tokuhiro_ left
[15:09] *** mtk joined
[15:09] *** xinming left
[15:14] *** obra joined
[15:14] *** xinming joined
[15:22] *** kaleem left
[15:25] *** cognominal left
[15:26] *** cognominal joined
[15:27] *** choips joined
[15:27] *** choips left
[15:37] *** wamba joined
[15:43] *** Pleiades` left
[15:45] *** wamba left
[15:46] *** Pleiades` joined
[15:53] <dalek> perl6-roast-data: 0651b8c | coke++ | / (4 files):

[15:53] <dalek> perl6-roast-data: today (automated commit)

[15:53] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/0651b8cdff

[15:53] <dalek> perl6-roast-data: 7f8062f | coke++ | / (3 files):

[15:53] <dalek> perl6-roast-data: today (automated commit)

[15:53] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/7f8062f206

[15:56] *** brrt left
[15:58] <jnthn> [Coke]++

[15:58] <jnthn> Dang, if IO-Socket-INET.t hadn't failed we've have cleared 24,100 passes mark :P

[16:05] *** sqirrel_ left
[16:06] *** Entonian joined
[16:08] *** Entonian left
[16:09] <[Coke]> that one seems to be sporadic.

[16:09] <[Coke]> (we're bouncing between 2 and 16 failuresd)

[16:09] <flussence> maybe it's hitting the 20 second timeout randomly?

[16:10] <jnthn> You'd have to have a slow box for it to take 20 seconds...

[16:10] <[Coke]> it's feather.

[16:10] <jnthn> Ah... :)

[16:11] *** domidumont left
[16:11] <[Coke]> heh. so maybe? ;)

[16:12] <jnthn> Still feels like a stretch :)

[16:12] <[Coke]> niecza down to : niecza (86.24%)

[16:18] <kresike> bye folks

[16:18] *** kresike left
[16:19] *** skids joined
[16:20] *** benabik joined
[16:27] *** domidumont joined
[16:32] *** benabik left
[16:33] *** benabik joined
[16:33] *** benabik left
[16:33] *** benabik joined
[16:34] <Ulti> rakudo-js is p. cool, you could have an all perl6 web framework where you dont even touch JS

[16:35] <Ulti> and one compiler

[16:47] <Ulti> jnthn: with Nativecall I get an install error with libicuuc.48.dylib not found, on OSX I have v49 any harm in me just linking this?

[16:49] <jnthn> What is it with OSX and linking... :)

[16:49] <jnthn> Ulti: I'm not sure why NativeCall would somehow expose an ICU related linking issue.

[16:50] <jnthn> Ulti: I mean, not unless your Rakudo otherwise has one...

[16:50] <Ulti> nope

[16:50] <Ulti> its weird

[16:50] <jnthn> Indeed. What are you doing to trigger the error?

[16:51] <Ulti> heh "panda install Nativecall"

[16:51] <jnthn> Ah

[16:51] <jnthn> Where does it fail?

[16:51] <jnthn> In the tests?

[16:51] <jnthn> That may be less weird.

[16:51] <jnthn> The tests compile C code.

[16:51] <Ulti> Trace/BPT trap: 5

[16:51] <jnthn> And then make sure nativecall can be used to call it.

[16:52] <Ulti> I'll just grab the github directly and check it out

[16:52] <jnthn> See it installing it with --notests helps

[16:52] <jnthn> panda --notests install NativeCall # or so

[16:52] <Ulti> same thing

[16:52] <jnthn> OK, then it makes no sense to me...

[16:53] <Ulti> heh yeah dont worry I'll rule out all the oddities of OSX before pestering you further

[16:53] <jnthn> Yeah...I'm pretty sure others have had nativecall working on OSX.

[16:53] <jnthn> Think arnsholt++ did some work on that.

[16:53] <Ulti> I have too only with the release a month ago

[16:54] <Ulti> rakudo* release not nativecall

[16:54] <jnthn> Weird...

[16:55] <Ulti> jnthn: I take it all back my perl6 build is broken beyond all recognition

[16:55] <Ulti> *sigh* sorry

[16:55] <jnthn> Ah...

[16:56] <jnthn> Well, that makes more sense at least...

[16:56] <Ulti> yeah, unicode problems in Nativecall... wat

[16:57] *** zby_home_ joined
[16:57] <Ulti> I should probably source rc my shells more often than never

[17:09] *** MayDaniel joined
[17:09] *** MayDaniel left
[17:09] *** MayDaniel joined
[17:14] *** Chillance joined
[17:16] *** jaffa4 joined
[17:17] <jaffa4> hi

[17:17] <jaffa4> What is ref in perl6?

[17:17] <flussence> $obj.WHAT

[17:17] <jaffa4> n: my @a = 1,2;  [romt @a.WHAT;

[17:17] <p6eval> niecza v22-19-gd874a8e: OUTPUT«===SORRY!===␤␤Unable to parse array composer at /tmp/RU3B3YUlLu line 1:␤------> my @a = 1,2;  [⏏romt @a.WHAT;␤Couldn't find final ']'; gave up at /tmp/RU3B3YUlLu line 1 (EOF):␤------> my @a = 1,2;  [romt @a.WHAT;[…

[17:18] <jaffa4> n: my @a = 1,2;  print @a.WHAT;

[17:18] <p6eval> niecza v22-19-gd874a8e:  ( no output )

[17:18] <jaffa4> r: my @a = 1,2;  print @a.WHAT;

[17:18] <p6eval> rakudo f81716: OUTPUT«use of uninitialized variable $v of type Array in string context  in block  at /tmp/ETfUBkU4mY:1␤␤»

[17:19] <jaffa4> r: my @a = 1,2;  print (\@a).WHAT;

[17:19] <p6eval> rakudo f81716: OUTPUT«use of uninitialized variable $v of type Capture in string context  in block  at /tmp/L2F97cIhFL:1␤␤»

[17:19] <jaffa4> n: my @a = 1,2;  print (\@a).WHAT;

[17:19] *** benabik left
[17:19] <p6eval> niecza v22-19-gd874a8e: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/lib/CORE.setting line 1295 (warn @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 266 (Mu.Str @ 15) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.settin…

[17:19] <felher> r: my @a = 1,2; say @a.WHAT;

[17:19] <p6eval> rakudo f81716: OUTPUT«Array()␤»

[17:20] <felher> r: my @a = 1,2; print @a.WHAT.gist;

[17:20] <p6eval> rakudo f81716: OUTPUT«Array()»

[17:20] <felher> jaffa4: here you go :)

[17:20] * felher has to leave now

[17:20] <PerlJam> r: my @a = 1,2;  print @a.WHAT;

[17:20] <p6eval> rakudo f81716: OUTPUT«use of uninitialized variable $v of type Array in string context  in block  at /tmp/ZnPEkmapiT:1␤␤»

[17:20] <felher> bye folks :)

[17:20] *** birdwindupbird left
[17:20] <PerlJam> ah, print is broken?

[17:20] <felher> PerlJam: I think the problem is that print uses .Str and say uses .gist

[17:21] * felher -> afk

[17:21] <jnthn> Behaving as designed.

[17:21] <jaffa4> n: my @a = 1,2;  print (\@a).WHAT.gst;

[17:21] <p6eval> niecza v22-19-gd874a8e: OUTPUT«Unhandled exception: Unable to resolve method gst in type Capture␤  at /tmp/plXqWvcpYU line 1 (mainline @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4211 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4212 (module-CORE @ 578) ␤  at /hom…

[17:21] <jaffa4> n: my @a = 1,2;  print (\@a).WHAT.gist;

[17:21] <p6eval> niecza v22-19-gd874a8e: OUTPUT«Capture()»

[17:21] <PerlJam> jnthn: so the message is just LTA?

[17:21] *** tomaw joined
[17:21] <jnthn> Not that I really like the design though. I wish say was print + \n

[17:22] <jnthn> PerlJam: The message is correct too.

[17:22] <jnthn> Oh, the $v is dubious...

[17:22] <PerlJam> aye, that one

[17:22] <jnthn> But the uninitialized bit is right.

[17:22] <PerlJam> right

[17:23] <jnthn> ooh, venue for YAPC::EU next year is picked :)

[17:28] <jaffa4> Do you know how to  use exceptions in Perl6?

[17:28] <jnthn> Well, I gave a talk on them... :)

[17:28] <jnthn> http://jnthn.net/papers/2012-yapceu-exceptions.pdf

[17:31] <jaffa4> ok

[17:34] <jaffa4> so I can use note or die to raise an exception right?

[17:34] <jnthn> die

[17:34] <jnthn> Using "note" just writes to stderr

[17:36] <jaffa4> I asw an example as elsewhere

[17:36] <jaffa4> exception n;

[17:38] <jaffa4> r: exception n;

[17:38] <p6eval> rakudo f81716: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&n' called (line 1)␤Undefined routine '&exception' called (line 1)␤»

[17:38] <dalek> Perlito: caf3b30 | (Flavio S. Glock)++ | / (4 files):

[17:38] <dalek> Perlito: perlito5 - parser - fix "sub _" should be in package "main"

[17:38] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/caf3b30085

[17:39] *** skids left
[17:40] <dalek> rakudo/nom: 9f32f0a | jnthn++ | src/Perl6/Actions.pm:

[17:40] <dalek> rakudo/nom: Fix thinko in shell words post-processing.

[17:40] <dalek> rakudo/nom: 

[17:40] <dalek> rakudo/nom: This fixes the TODO'd tests for << foo "bar $baz" >> style things.

[17:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9f32f0af8a

[17:40] <dalek> roast: 747a9d6 | jnthn++ | S02-literals/quoting.t:

[17:40] <dalek> roast: Rakudo unfudge.

[17:40] <dalek> roast: review: https://github.com/perl6/roast/commit/747a9d6d07

[17:41] *** nyuszika7h left
[17:42] *** skids joined
[17:43] <dalek> Perlito: 94163c8 | (Flavio S. Glock)++ | TODO-perlito5:

[17:43] <dalek> Perlito: perlito5 - parser - tweak TODO list

[17:43] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/94163c8188

[17:46] *** nyuszika7h joined
[17:47] <jaffa4> jnthn: IS there forward declaration in Perl6?

[17:51] <jnthn> r: class A { ... }; sub foo(A $x) { }; class A { method m() { } }; # things like this?

[17:51] <p6eval> rakudo f81716:  ( no output )

[17:52] <dalek> rakudo/nom: 0961b71 | jnthn++ | src/Perl6/ (2 files):

[17:52] <dalek> rakudo/nom: Fix issue that blocked q:c working.

[17:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0961b71ea5

[17:52] <jaffa4> jnthn: yes

[17:53] <jnthn> jaffa4: Yes, it's supported, but with some limitations (like, if you stub a type then try to inherit from it you'll hit issues)

[17:53] *** armitage81 joined
[17:54] *** armitage81 left
[17:54] *** armitage81 joined
[17:56] *** dakkar left
[18:02] *** PacoAir left
[18:05] *** wamba joined
[18:10] *** armitage81 left
[18:10] *** armitage81 joined
[18:11] *** armitage81 left
[18:11] *** armitage81 joined
[18:12] *** kaare_ joined
[18:12] <dalek> Perlito: de61f09 | (Flavio S. Glock)++ | / (3 files):

[18:12] <dalek> Perlito: perlito5 - parser - remove old Perl6 code

[18:12] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/de61f09606

[18:23] *** rindolf left
[18:26] *** wamba left
[18:30] *** grondilu joined
[18:30] <grondilu> r: say constant tau = 2*pi

[18:30] <p6eval> rakudo 0961b7: OUTPUT«6.28318530788496␤»

[18:31] <grondilu> Should Perl6 follow the "Pi is wrong" movement and define a tau constant?

[18:31] <grondilu> http://www.youtube.com/watch?v=83ofi_L6eAo

[18:32] *** wamba joined
[18:37] <pmurias> grondilu: no

[18:38] <grondilu> why not?  It would be cool.  And tau is not much used anyway.  It won't pollute the namespace much.

[18:41] <[Coke]> seems like it would be perlier to have both Pi and Tau.

[18:42] <grondilu> agreed.  A nice application of the "There is more than one way to do it"

[18:43] <masak> evenin', #perl6

[18:44] <grondilu> Also, for a post-modern language, being aware of such a recent mathematic controversy should be natural.

[18:45] *** wamba left
[18:45] <masak> I would rather see a Perl 6 without a tau constant.

[18:45] <masak> if you really care, push a Constant::Tau module to modules.perl6.org.

[18:46] <[Coke]> do we have a Pi constant?

[18:46] <masak> if the Perl 6 community finds it's really useful to Perl 6 programmers, we might lift it into core.

[18:46] <masak> [Coke]: yes.

[18:46] <masak> nr: say pi

[18:47] <p6eval> rakudo 0961b7: OUTPUT«3.14159265394248␤»

[18:47] <p6eval> ..niecza v22-19-gd874a8e: OUTPUT«3.1415926535897931␤»

[18:47] *** rindolf joined
[18:47] <masak> or did you really mean "Pi" with a capital P?

[18:47] *** leont joined
[18:47] <[Coke]> phenny: ask au if she can fix Pugs on feather.

[18:47] <phenny> [Coke]: I'll pass that on when au is around.

[18:47] <masak> in that case, "no". :)

[18:47] <cotto> r: say pie

[18:47] <p6eval> rakudo 0961b7: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&pie' called (line 1)␤»

[18:47] *** leont left
[18:47] * [Coke] sees jnthn trying to sneak rakudo over the 24100 limit.

[18:48] *** SamuraiJack joined
[18:49] <jnthn> [Coke]: That one probably did it, but justin case I'm working on S03-operators/subscript-adverbs.t :)

[18:50] <jnthn> Up to 29 out of 64 passing so far...

[18:51] *** cognominal left
[18:51] <dalek> rakudo/nom: ba05e3c | jnthn++ | src/core/Any.pm:

[18:51] <dalek> rakudo/nom: First crack at :k, :kv and :p on .[ ].

[18:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ba05e3c51d

[18:51] *** xinming left
[18:52] <jnthn> Time to cook some nomz...

[18:53] *** xinming joined
[18:53] <masak> jnthn++ # adverbs galore

[18:57] *** cognominal joined
[18:59] *** sivoais left
[19:00] <masak> grondilu: before we leave the topic completely: I find the arguments for tau to be... not convincing.

[19:00] *** sivoais joined
[19:01] *** benabik joined
[19:04] <[Coke]> I actually found the arguments to be compelling; the trick is weighing them against the status quo, which is "eh, good good enough."

[19:07] <[Coke]> s/good//

[19:07] <grondilu> I totally remember that when I learned trigonometry when I was young, I was confused by the choice of a demi-circle.  I always had to do some intellectual gymmnastics to figure out where sin and cosin had their extremum.  I've been reading jjtauday.com/tau-manifesto and I've been very quickly convinced.

[19:08] * doy agrees with [Coke] 

[19:09] <grondilu> The area of a disk being 1/2 tau r**2 has a direct geometric interpretation, since an infinitesimal sector is triangular, thus the 1/2 factor.

[19:09] <grondilu> ^ only this could be enough to convince me.

[19:09] <pmurias> grondilu: is tau used by a lot of people?

[19:09] <grondilu> pmurias: Is perl6 used by a lot of people?

[19:10] * grondilu does not believe in argumentum ad populum

[19:10] <flussence> Is PHP used by a lot of people?

[19:10] <grondilu> "argumetum ad populum" sucks

[19:11] <pmurias> for inclusion into the setting they are valid

[19:11] <pmurias> we want things which are commonly used in the setting

[19:12] <masak> pmurias++

[19:13] <masak> also, a constant with a manifesto is likely to be cute today and silly in ten years.

[19:13] <pmurias> and it only saves one character

[19:13] <pmurias> tau as opposed to 2*pi

[19:14] <grondilu> no.  It saves "constant tau = 2*pi" for those who want to use tau.

[19:15] <masak> grondilu: all is fair if you predeclare.

[19:15] <grondilu> predeclare?

[19:15] <pmurias> declare before usage

[19:15] <masak> load a module. or declare the constant in your program.

[19:16] *** cognominal left
[19:16] <grondilu> yeah but I'll have to do it.  That's unfair compared to pi user who can use pi straight away.

[19:17] <masak> no, it's not unfair. pi is a million times more commonly used than tau.

[19:17] <grondilu> ok, I was exagerating a bit.

[19:18] <masak> "constant tau = 2*pi" seems to me to be a very fair huffmanization for tau enthusiasts.

[19:18] <masak> look how easy it is to define tau! nice!

[19:19] <grondilu> Perl aims to be consise.   I can't be concise if I want to use tau since I'll have to predeclare it.  I'll have to use pi.

[19:19] <masak> you can even do it with the greek letter itself, τ.

[19:19] <masak> grondilu: correct.

[19:19] <masak> nr: constant τ = 2 * pi; say τ

[19:19] <p6eval> niecza v22-19-gd874a8e: OUTPUT«6.2831853071795862␤»

[19:19] <p6eval> ..rakudo ba05e3: OUTPUT«6.28318530788496␤»

[19:21] *** japhb_ joined
[19:21] <masak> grondilu: you're essentially complaining that your toy constant isn't included in core. when all you have to do to use it is to declare one line at the beginning of your program. that's a lot less than most other proponents of missing paradigms have to declare.

[19:21] <japhb_> use MoMathMoProblems;

[19:21] <masak> just think of all the disgruntled Prolog programmers who have to put all their backtracking logic into grammars...

[19:22] <masak> dude, your tau problems pale in comparison!

[19:22] <grondilu> then if it's such a little piece of code, why not just put it in the core?

[19:22] <grondilu> I mean, your argument goes both ways.

[19:24] <masak> I can think of a lot of mathematical constants I'd sooner have in core.

[19:24] <sorear> o/

[19:24] <masak> sorear! \o/

[19:24] <flussence> argumentam ad nauseam sucks.

[19:24] <grondilu> well, I won't insist any more.

[19:25] <masak> the golden ratio. the Euler–Mascheroni constant γ. Conway's constant λ. Khinchin's constant K.

[19:25] <masak> all those *add* something. tau doesn't; we already have pi, and tau can be (very trivially) defined from it. the above ones can't.

[19:25] <grondilu> I mean, you guys do such an awesome work with perl6, I really don't want to upset you.  So I don't mind at all if you don't want to put tau.

[19:26] <masak> I'm not upset. :)

[19:26] <masak> I enjoy arguing against such what I percieve to be a very silly and easily refuted request.

[19:26] <masak> but my word isn't law. if you already have a commitbit, you can patch in tau at this moment into Rakudo.

[19:27] <masak> or into the spec.

[19:27] <masak> if you don't have a commitbit, someone could give you one. or you could send a pull request.

[19:27] <masak> (but I still think the idea of putting tau into Perl 6 is silly.)

[19:28] <masak> s/such what/what/

[19:28] <sorear> masak! \o/

[19:28] <diakopter> I thought the symbol tau could already mean several other things

[19:28] <flussence> .oO( even Rust doesn't have it, and their language revolves around 1-character-shorter abbreviations... )

[19:29] <sorear> (does grondilu have an active CLA?

[19:29] <sorear> )

[19:29] <masak> diakopter: Wikipedia says it's a protein, a lepton, a constellation, a mutation in a kinase, and an UML modeling tool. :)

[19:30] <sorear> well \gamma means even more things so that's hardly an argument against

[19:30] <sorear> I'm a fan of \tau but I think that adding it to the core today would be....more confusing than helpful.

[19:31] <doy> nr: say π

[19:31] <p6eval> niecza v22-19-gd874a8e: OUTPUT«===SORRY!===␤␤Undeclared routine:␤     'π' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1437 (die @ 5) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 37) ␤  at /home/p…

[19:31] <p6eval> ..rakudo ba05e3: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&π' called (line 1)␤»

[19:31] <masak> sorear: ooh, that's another argument against, actually. adding tau and then having to explain it to everyone would heap on the already big pile of having to explain how and why Perl 6 is different from everything else.

[19:32] <sorear> masak: that's what I meant by what I just said

[19:32] <sorear> ^_^

[19:32] <masak> yes, I thought so.

[19:33] <masak> also, is that the first time I see you make an Asian smiley...?

[19:35] * [Coke] is not sure that calling tau "silly" helps me take masak's position more seriously.

[19:36] <[Coke]> but then, I have a commitbit, and I'm not going to bother adding it.

[19:38] <masak> [Coke]: sorry. "silly" was the first word that came to mind. maybe I mean something more like "not pulling its weight in core".

[19:38] <japhb_> I joked earlier, but I'm serious in saying that if we have to pull in the Set operators using a module, we might as well have a module for loads of useful constants.

[19:39] <japhb_> .oO( aleph-null?)

[19:39] <masak> sure. does it have to be core?

[19:39] <japhb_> The Set operators are core, correct?  (Not using this as an argument, just trying to remember)

[19:39] <masak> then again, I saw expmod and is-prime flash by among the spec commits, and I'm not sure those are pulling their weight in core either...

[19:39] <japhb_> core as in, the module is shipped with base Perl 6

[19:40] <masak> japhb_: right.

[19:40] <rjbs> Does one report Rakudo bugs at Github?

[19:40] <masak> rjbs: no, [email@hidden.address]
[19:41] <rjbs> Thanks.

[19:41] <pmurias> re core module, aren't we moving away from shipping a predefined set of core modules?

[19:41] *** jaffa4 left
[19:41] <japhb_> I almost think having such a module as core is valuable in that you don't end up with a lot of not-quite-correct definitions.  But on the flip side, you prevent everyone from choosing the definition that makes sense for them depending on their use case ... as a Num, as a FatRat to some crazy precision, as a continued fraction

[19:41] <[Coke]> rjbs: it's pretty much exactly like perlbug@...

[19:42] <masak> pmurias: the notion seems to have re-appeared as the core grew into what it is today.

[19:43] <japhb_> Setting v. core module v. ecosystem is a hard decision to make sometimes.  OK, more than sometimes.

[19:43] <masak> &

[19:44] <rjbs> [Coke]: I just sent it a message.

[19:45] <rjbs> [Coke]: Where will that turn up?  rt.perl6.org sent me to perl6.org

[19:45] <japhb_> List::Util and Time::HiRes I think were pretty clearly obvious candidates for inclusion in the setting.  But I already wonder about stuff like output capturing, IO to strings, etc.

[19:45] <rjbs> Aha!  https://rt.perl.org/rt3/Ticket/Display.html?id=115658

[19:46] <pmurias> japhb_: what I'm unsure does a core module vs ecosystem distinction make sense

[19:46] *** armitage81 left
[19:47] <[Coke]> rjbs: we use the same RT instance p5 does. just a different queue.

[19:47] <rjbs> Yeah, I realized that when I remembered moderating messages to it :)

[19:47] <[Coke]> p5, rakudo, TPF grants... one more I have access to whose name eludes me.

[19:48] <japhb_> pmurias, I think so, but it is a fuzzy boundary.  I'm thinking about where I would draw the line.

[19:53] <japhb_> I guess my feelings come down to: Setting: gets used quite often (sometimes surpisingly so), or needs to be on chummy terms with the compiler in order to be implemented efficiently or at all.  Core module: Used often, but has a more specific set of use cases (like Set operators), and does *not* need to be chummy with the compiler to work at all, but may need to be chummy to be efficient or for bootstrapping purposes (Test).  Ecosystem: Used for very spe

[19:53] <japhb_> cific purposes and/or will work across any compiler that supports the full spec. 

[19:53] <japhb_> But that feels like I've only examined one dimension, and there are more to be looked at.

[19:54] <japhb_> Term::ANSIColor feels very ecosystem, even though I use it all the time.

[19:55] *** armitage81 joined
[19:55] <japhb_> The only argument for pulling it into core is if the debugger got pulled in.  :-)

[19:56] *** cognominal joined
[20:01] *** PacoAir joined
[20:01] <jnthn> The debugger won't get pulled in, I don't think.

[20:02] <jnthn> Because in the long run it'll probably be *a* debugger.

[20:02] <jnthn> Also because having it in the ecosystem is a good way of knowing we're keeping our compiler architecture modular enough.

[20:04] <sorear> +1

[20:04] *** PacoAir left
[20:05] *** gaussblurinc left
[20:06] *** armitage81 left
[20:10] <pmurias> jnthn: pulled in = living in the rakudo repo?

[20:11] <jnthn> Presumably if we call something core then it lives in the repo, yeah.

[20:11] <jnthn> Hmm

[20:11] <jnthn>     is +(@array[0]:k), 1,

[20:11] <jnthn>         ":k on an array returned an one-elem array";

[20:12] <jnthn> This test somehow expects :k to behave like a slice would

[20:12] <jnthn> However, normal array indexing of a single thing hands back the thing, not a parcel of things.

[20:13] <jnthn> The spec doesn't say the adverb cases should be unlike normal indexing in this regard.

[20:13] <jnthn> Anyone want to argue the spectest is correct?

[20:15] <jnthn> hm, the spectest isn't even internally consistent. It expects @array[0]:p to return the Pair directly

[20:21] <PerlJam> I think perhaps the spec needs some clearer language.

[20:22] <skids> jnthn: maybe the spectest is more confused about (item) collapsing than the behavior it is testing.

[20:22] <jnthn> PerlJam: Perhaps yes ;)

[20:24] <PerlJam> S02:2451 "(Of course, any of these forms also work in the degenerate case of a slice containing a single index.)" 

[20:24] <PerlJam> The preceding examples all return parcels, why not the degenerate case?

[20:25] <jnthn> PerlJam: Because normal array indexing doesn't.

[20:25] <jnthn> r: my @a = 1,2; say @a[0].WHAT; say @a[0,1].WHAT

[20:25] <p6eval> rakudo ba05e3: OUTPUT«Int()␤Parcel()␤»

[20:25] <PerlJam> I'm just saying the language isn't exactly definitive.  It can be read multiple ways.

[20:26] <jnthn> PerlJam: Yes, but at lesat choose a consistent way for :k and :p 

[20:26] <PerlJam> oh, indeed.  Something is definitely broken there :)

[20:26] <skids> r: my @a = 2,2,3; print +@a[0..0], +@a[0]

[20:26] <p6eval> rakudo ba05e3: OUTPUT«12»

[20:28] <dalek> rakudo/nom: a5c0b31 | jnthn++ | src/core/Any.pm:

[20:28] <dalek> rakudo/nom: Give :v on slices the expected semantics.

[20:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a5c0b31e67

[20:30] <masak> r: my @a = 2, 2, 3; say +@a[(0,)]

[20:30] <p6eval> rakudo ba05e3: OUTPUT«1␤»

[20:31] <dalek> roast: 83f68a3 | jnthn++ | S02-literals/quoting.t:

[20:31] <dalek> roast: Another unfudge.

[20:31] <dalek> roast: review: https://github.com/perl6/roast/commit/83f68a3a9c

[20:31] <dalek> roast: 1ec7050 | jnthn++ | S03-operators/subscript-adverbs.t:

[20:31] <dalek> roast: Test treatment of single indexes consistently.

[20:31] <dalek> roast: review: https://github.com/perl6/roast/commit/1ec7050343

[20:33] * PerlJam wonders about the extra parens.

[20:33] *** rindolf left
[20:33] <jnthn> OK, now we pass all the .[] adverb tests in that file. Guess now we need the .{} ones...

[20:35] <masak> \o/

[20:35] <masak> r: my @a = 2, 2, 3; say +@a[0,]

[20:35] <p6eval> rakudo ba05e3: OUTPUT«1␤»

[20:36] <masak> PerlJam: turns out the extra parens were superstitious.

[20:36] <PerlJam> perhaps it's just a really strong meme that () means "list"  (LISP has infected our collective brains)

[20:38] <masak> aye.

[20:38] <masak> well, .() does sort of mean "argument list" ;)

[20:39] *** grondilu left
[20:40] <skids> my @a = 2, 2, 3; say +@a[()], +@a[] # except when they aren't

[20:41] <diakopter> s/brains/brain/

[20:42] *** wk joined
[20:42] *** wk is now known as Guest62895

[20:43] *** domidumont left
[20:43] <masak> skids: well, those *would* mean the same if zen slices weren't specialized syntax.

[20:44] *** kaare_ left
[20:45] <skids> masak: Only people that construe and eval() codestrings will be menaced.  I shed no tears. :-)

[20:47] *** vlixes joined
[20:49] <dalek> roast: e789a62 | jnthn++ | S03-operators/subscript-adverbs.t:

[20:49] <dalek> roast: Fix .{} tests like the .[] ones were.

[20:49] <dalek> roast: review: https://github.com/perl6/roast/commit/e789a6277f

[20:53] *** bbkr joined
[20:53] <dalek> rakudo/nom: bd576ab | jnthn++ | src/core/Any.pm:

[20:53] <dalek> rakudo/nom: :k, :kv, :v and :p for .{} subscripting.

[20:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bd576ab1c8

[20:53] <dalek> rakudo/nom: 09e308d | jnthn++ | t/spectest.data:

[20:53] <dalek> rakudo/nom: Run S03-operators/subscript-adverbs.t.

[20:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/09e308da87

[20:53] <dalek> rakudo/nom: ca9c30d | jnthn++ | docs/ChangeLog:

[20:53] <dalek> rakudo/nom: Update ChangeLog.

[20:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ca9c30d8d2

[20:54] *** rindolf joined
[21:01] *** GlitchMr left
[21:06] *** kshannon left
[21:10] *** benabik_ joined
[21:10] *** benabik left
[21:10] *** benabik_ is now known as benabik

[21:10] *** eternaleye left
[21:11] *** SamuraiJack left
[21:12] *** eternaleye joined
[21:22] * skids ponders that the etymology of "subscript" in CS will become less obvious to future generations (unless a language that actually uses subscripts for indexing emerges)

[21:23] <PerlJam> skids: why do you say that?

[21:23] <sorear> skids: TeX uses [] to notate subscripts

[21:24] <skids> Well, eventually I think a lot of math will end up being taught in code, rather than in typesetting.

[21:24] <sorear> and if you read the literature subscripting is still in super-common use

[21:25] <skids> The younger kids learn to use code, the more likely they will respond better to notations that utilize what they already know.

[21:25] <PerlJam> skids: we just need to make sure that they learn math first  :)

[21:26] <skids> I think that nus already left.

[21:26] <skids> *bus

[21:26] * sorear tries to figure out why x^(2*3^i) + x^3^i + 1 seems to be irreducable over GF(2) for all values of i (checked up to 10,000)

[21:30] <masak> but i is a natural number, right?

[21:31] <sorear> yes, natural number

[21:32] <masak> n: say "x^({2 * 3**$_}) + x^{3 ** $_} + 1" for 1..5

[21:32] <p6eval> niecza v22-19-gd874a8e: OUTPUT«x^(6) + x^3 + 1␤x^(18) + x^9 + 1␤x^(54) + x^27 + 1␤x^(162) + x^81 + 1␤x^(486) + x^243 + 1␤»

[21:38] <sorear> also checked i=10^5, 10^6, 10^7 as singular values

[21:38] <sorear> this problem is probably worth starting a blog over :p

[21:39] <masak> heh :)

[21:50] *** PacoAir joined
[21:51] *** PacoAir left
[21:51] *** PacoAir joined
[21:51] <masak> '♞, #perl6

[21:54] <cotto> that's terrible

[21:57] * japhb_ finds it interesting that masak identifies with the dark knight instead of the white knight ...

[21:58] *** skids left
[22:00] * flussence finds it interesting that I can make out that glyph even though it's a 4×6px smudge

[22:01] * sorear haz a complete proof

[22:08] *** atrodo left
[22:16] *** bluescreen10 left
[22:20] <colomon> \o/, sorear

[22:20] <sorear> o/ colomon

[22:20] <colomon> what were you proving?

[22:20] <cotto> japhb_, he doesn't want to get confused with whiteknight

[22:23] <sorear>  13:26  * sorear tries to figure out why x^(2*3^i) + x^3^i + 1 seems to be  irreducable over GF(2) for all values of i (checked up to 10,000)

[22:23] <sorear> e.g x^162 + x^81 + 1

[22:24] <sorear> just a random little thing that's been bugging me all week.  I thought I'd mention it when masak brought up math

[22:25] *** telex left
[22:29] *** pmurias left
[22:29] <sorear> dunno what to do with it now though.  I guess I should write it down

[22:36] *** telex joined
[22:38] <[Coke]> sure, blog it.

[22:39] <dalek> perl6-roast-data: acd8ef1 | coke++ | / (3 files):

[22:39] <dalek> perl6-roast-data: today (automated commit)

[22:39] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/acd8ef1d2d

[22:47] <[Coke]> ah. I can now see in the roast data that for 11/08 and /09 we were running against the same test suite.

[22:47] <[Coke]> (and that the 09 run didn't include jnthn's unfudges in roast.)

[22:48] <jnthn> Yeah, but it passed 24100 thanks to the INET ones not failing... :)

[22:48] <jnthn> Think I won another 69 today overall. :)

[22:50] <japhb_> Go jnthn, go jnthn

[22:51] <japhb_> jnthn++ # Keeps giving me good enough reasons to recompile everything, even on this slow box.  :-)

[22:56] *** Guest62895 left
[23:04] *** benabik left
[23:06] *** wamba joined
[23:13] *** zby_home_ left
[23:14] *** leont joined
[23:27] *** tokuhiro_ joined
[23:30] *** stopbit left
[23:45] *** leont_ joined
[23:47] *** leont_ left
[23:48] *** leont left
[23:48] *** leont_ joined
[23:59] <jnthn> 'night, #perl6

