[00:04] *** bip` is now known as geistteufel

[00:04] *** whiteknight joined
[00:04] *** whiteknight is now known as Guest84531

[00:05] *** s1n left
[00:17] *** wolfman2000 joined
[00:20] *** xinming left
[00:20] *** s1n joined
[00:22] *** xinming joined
[00:23] *** fgomez joined
[00:29] *** mikemol joined
[00:30] *** havenn left
[00:34] <diakopter> Guest84531: you around?

[00:35] <diakopter> whiteknight: you around?

[00:36] <Guest84531> yessir

[00:36] *** Guest84531 is now known as wknight8111

[00:36] <diakopter> I tried out your patches for nqp&rakudo for PackfileView 

[00:37] *** wknight8111 left
[00:37] *** wknight8111 joined
[00:37] <wknight8111> they need work, I'm re-doing them

[00:37] <diakopter> oh

[00:40] *** imarcusthis joined
[00:40] <wknight8111> what did you see with them?

[00:41] *** fgomez left
[00:41] <diakopter> I manually applied each change so as not to get the whitespace & stage0 changes; it passed all tests in nqp, then tried to build rakudo with that nqp (also applying the changes to rakudo), and it failed many spectests

[00:43] <diakopter> see https://github.com/diakopter/rakudo/commit/bbf0170df9f91112998dad46222bbafe18b5f5c9 and https://github.com/perl6/nqp/commit/d3a9cc242f306ebb88b5a312ea7d331ad7bb8d93

[00:46] <diakopter> afk&

[00:47] <wknight8111> okay, thaks

[00:48] <wknight8111> thanks

[00:51] *** fgomez joined
[00:55] *** Chillance left
[01:03] *** wknight8111 left
[01:04] *** scott_ joined
[01:05] *** scott_ is now known as Guest44470

[01:05] *** cognominal left
[01:07] *** cognominal joined
[01:11] *** thou joined
[01:18] *** thou left
[01:22] <skids> r: (1, (4,4), h => (3,3)).perl.say;

[01:22] <p6eval> rakudo aeca2f: OUTPUT«(1, (4, 4), "h" => $(3, 3))␤»

[01:23] <skids> Why the $ nowadays?

[01:24] <sorear> the right side of => has been forced to be an item

[01:25] <skids> thanks.

[01:25] *** wolfman2000 left
[01:32] *** alester joined
[01:34] *** bsb left
[01:39] *** fgomez left
[01:40] *** icwiener left
[01:44] *** cognominal left
[01:46] *** cognominal joined
[01:52] *** thou joined
[01:52] <skids> sorear: may want to fix the url in the niecza release announcements to include the 'v' in the newer download url.

[01:53] *** derrazo joined
[01:56] *** derrazo_ joined
[01:56] <sorear> skids: hmm?  github changed something?

[01:57] <sorear> ah, I see

[01:58] *** derrazo_ left
[01:59] *** derrazo left
[02:02] *** lestrrat left
[02:03] *** lestrrat joined
[02:18] *** tokuhirom joined
[02:24] *** sisar joined
[02:30] *** vlixes joined
[02:30] *** orafu left
[02:30] *** orafu joined
[02:41] *** tokuhirom left
[02:42] *** tokuhirom joined
[02:46] *** tokuhirom left
[02:56] *** benabik joined
[03:24] *** wooden left
[04:22] *** adu joined
[04:27] *** cognominal left
[04:29] *** cognominal joined
[04:32] *** broquaint left
[04:43] *** alester left
[04:46] *** broquaint joined
[04:48] <adu> diakopter?

[04:48] <phenny> adu: 13 May 17:28Z <moritz> tell adu that .join is a method on lists, not strings, so it won't appear in S32::Str

[04:49] <adu> o right

[05:19] *** preflex left
[05:20] *** preflex_ joined
[05:20] *** preflex_ is now known as preflex

[05:21] <diakopter> adu

[05:21] <adu> hi

[05:22] <adu> i was  going to tell you about the man/boy test

[05:22] <diakopter> oh?

[05:22] <adu> droscheme maxes out at about 15

[05:23] *** birdwindupbird joined
[05:25] <adu> I just learned something very interesting from rosettacode.org

[05:26] <adu> Grammar.parse takes an action argument!

[05:26] <adu> I wish I had known that earlier

[05:29] <moritz> adu: we have the man-or-boy test in the official Perl 6 test suite, integration/man-or-boy.t

[05:30] <adu> moritz: I'll check it out

[05:33] *** jaldhar left
[05:50] *** NamelessTee joined
[05:53] *** alim joined
[05:54] *** Khisanth left
[05:55] <TimToady> it's also on rosettacode.org

[06:03] *** broquaint left
[06:04] *** mucker joined
[06:04] *** Khisanth joined
[06:04] *** icwiener joined
[06:09] *** broquaint joined
[06:10] *** cognominal left
[06:11] *** cognominal joined
[06:24] *** vlixes left
[06:30] *** fhelmberger joined
[06:31] *** cognominal left
[06:31] *** kaleem joined
[06:31] *** cognominal joined
[06:44] *** adu left
[06:52] *** raiph joined
[06:59] *** sisar left
[07:10] *** brrt joined
[07:11] <Timbus> a

[07:14] <sorear> b

[07:15] <tadzik> c

[07:16] <tadzik> r: say DateTime.new('2012-05-14T12:53:20').posix

[07:16] <p6eval> rakudo aeca2f: OUTPUT«1337000000␤»

[07:16] <Timbus> heh

[07:17] *** alim left
[07:18] <mikec_> hehe

[07:21] *** fgomez joined
[07:21] *** kresike joined
[07:24] *** fglock joined
[07:31] <jnthn> oh shark, #perl6

[07:32] <moritz> shark it's jnthn!

[07:32] <tadzik> shark shark

[07:43] *** icwiener left
[07:43] *** sergot joined
[07:43] <sergot> hi o/

[07:44] <sorear> o/

[07:45] *** fgomez left
[07:47] <tadzik> \o

[07:49] *** bacek joined
[07:53] *** alvis```` left
[08:03] *** lestrrat left
[08:05] *** lestrrat joined
[08:06] *** mucker left
[08:09] *** mucker joined
[08:18] *** alim joined
[08:27] *** erkan left
[08:31] *** erkan joined
[08:31] *** erkan left
[08:31] *** erkan joined
[08:32] <moritz> http://sayspy.blogspot.de/2012/05/my-very-shallow-thoughts-on-dart.html

[08:33] <moritz> quite a refereshingly different perspective from the usual "OMG Dart sucks" rants on the internez

[08:44] *** dakkar joined
[08:49] *** thou left
[08:55] *** daxim joined
[08:57] <dalek> roast: 11ffc02 | moritz++ | S16-filehandles/chmod.t:

[08:57] <dalek> roast: remove a test that is just duplicated inside an eval

[08:57] <dalek> roast: review: https://github.com/perl6/roast/commit/11ffc0239a

[08:59] <dalek> rakudo/nom: a144e29 | moritz++ | / (3 files):

[08:59] <dalek> rakudo/nom: implement chmod as a function

[08:59] <dalek> rakudo/nom: 

[08:59] <dalek> rakudo/nom: because a test file wants it that way :-). Run that test file

[08:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a144e29b70

[08:59] * jnthn will be curious to run that one on Windows this evening :)

[09:00] <moritz> it checks $*OS and does a skip_all; exit

[09:00] <jnthn> ah :)

[09:02] <tadzik> moritz: what's that change in 

[09:02] <tadzik>  tools/update_passing_test_data.pl

[09:02] <tadzik> ?

[09:03] <moritz> tadzik: that was accidental :(

[09:04] <dalek> roast: 470da6d | moritz++ | S14-roles/super.t:

[09:04] <dalek> roast: remove test for SUPER::, which has been unspecced

[09:04] <dalek> roast: review: https://github.com/perl6/roast/commit/470da6d0c9

[09:05] <tadzik> yeah, I asked Justin Case

[09:06] <moritz> tadzik: yes, thanks

[09:06] <moritz> tadzik: though I consider leaving it in

[09:06] <moritz> basically it reduced the output

[09:06] <moritz> which was fine when we had many test files which we didn't run

[09:09] <dalek> roast: 21f9cd3 | moritz++ | S06-signature/multidimensional.t:

[09:09] <dalek> roast: remove a wrong test, update test plan

[09:09] <dalek> roast: review: https://github.com/perl6/roast/commit/21f9cd3e3b

[09:09] <dalek> rakudo/nom: 4ea6d60 | moritz++ | t/spectest.data:

[09:09] <dalek> rakudo/nom: run another test file

[09:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4ea6d60824

[09:10] *** jaldhar joined
[09:13] <dalek> roast: 59ce8bb | moritz++ | S12-methods/lvalue.t:

[09:13] <dalek> roast: fix lvalue method tests

[09:13] <dalek> roast: review: https://github.com/perl6/roast/commit/59ce8bb4a2

[09:14] <moritz> colomon: that commit might lead to some passing TODOs in niecza (because the tests were simply wrong before)

[09:16] <dalek> rakudo/nom: 56e86dd | moritz++ | t/spectest.data:

[09:16] <dalek> rakudo/nom: run method lvalue tests

[09:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/56e86dd27c

[09:18] <moritz> p6: eval 'END { say "its over" }'; say 'end of main line';

[09:18] <p6eval> pugs, rakudo a144e2, niecza v17-4-ge5b869e: OUTPUT«end of main line␤its over␤»

[09:19] <dalek> roast: 4ba3eed | moritz++ | S04-exceptions/die-and-end.t:

[09:19] <dalek> roast: remove a wrong, short test file that is not easy to fix

[09:19] <dalek> roast: 

[09:19] <dalek> roast: in particular it assumes that END blocks inside an eval run when the eval

[09:19] <dalek> roast: is returned, but they are truly run as late as possible.

[09:19] <dalek> roast: Probably needs testing with Test::Util

[09:19] <dalek> roast: review: https://github.com/perl6/roast/commit/4ba3eed517

[09:24] *** bacek left
[09:48] *** jerome_ left
[09:50] <moritz> r: say zip((1, 2); (8, 9))

[09:50] <p6eval> rakudo a144e2: OUTPUT«1 8 2 9␤»

[09:58] *** localhost left
[10:00] *** localhost joined
[10:04] *** cognominal_ joined
[10:06] *** sporous left
[10:07] *** cognominal left
[10:09] <moritz> r: say [1, 2, 3] Z <a b>

[10:09] <p6eval> rakudo a144e2: OUTPUT«1 a 2 b␤»

[10:09] <moritz> I'm pretty sure that's wrong

[10:10] *** sporous joined
[10:12] <dalek> roast: a42f0a6 | moritz++ | S32-container/roundrobin.t:

[10:12] <dalek> roast: redo roundrobin tests; delete tests for unspecced features

[10:12] <dalek> roast: review: https://github.com/perl6/roast/commit/a42f0a6fc7

[10:12] *** cognominal_ left
[10:12] <colomon> moritz: worrong how?

[10:12] <colomon> wrong how?

[10:13] <moritz> colomon: simply confused variables/values

[10:13] <moritz> copy/paste errors

[10:13] *** cognominal joined
[10:13] <colomon> moritz: no, I meant the 1 a 2 b.  (But thanks for the heads up on the other thing!)

[10:14] <moritz> [1, 2, 3] is a single item

[10:14] <moritz> zip shouldn't flatten it

[10:18] *** Guest44470 left
[10:19] <dalek> rakudo/nom: abb8f3a | moritz++ | / (2 files):

[10:19] <dalek> rakudo/nom: basic implementation of &roundrobin; tests

[10:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/abb8f3ab03

[10:30] <dalek> roast: 31af067 | moritz++ | S (2 files):

[10:30] <dalek> roast: fix some uses of eval

[10:30] <dalek> roast: 

[10:30] <dalek> roast: those were still assuming that eval catches exceptions

[10:30] <dalek> roast: review: https://github.com/perl6/roast/commit/31af067f97

[10:30] <moritz> there might be some niecza unfudges possible after this commit too

[10:31] *** cognominal left
[10:32] *** cognominal joined
[10:40] *** bacek joined
[10:40] *** not_gerd joined
[10:40] <not_gerd> r: say +<foo bar>.grep({$_ ~~ "foo"}); say +<foo bar>.grep(* ~~ "foo")

[10:40] <phenny> not_gerd: 12 May 15:20Z <[Coke]> ask not_gerd if there's a ticket for the intval/opcode_t bug in parrot

[10:40] *** bacek left
[10:40] <p6eval> rakudo 56e86d: OUTPUT«1␤0␤»

[10:40] <not_gerd> bug?

[10:42] <jnthn> r: say (* ~~ "foo").WHAT

[10:42] <p6eval> rakudo 56e86d: OUTPUT«Bool()␤»

[10:42] <not_gerd> phenny: tell [Coke] the intval/opcode_t but is filed as https://github.com/parrot/parrot/issues/705

[10:42] <phenny> not_gerd: I'll pass that on when [Coke] is around.

[10:43] <jnthn> Seems ~~ doesn't auto-curry...

[10:43] *** jerome_ joined
[10:43] <jnthn> Wonder if it's spec'd as not doing so or if this is a bug.

[10:44] <tadzik> it's certainly confusing

[10:48] <not_gerd> any comments on https://gist.github.com/2693261

[10:48] <not_gerd> it's a version of the regex-dna benchmark that works on current Rakudo by not using .subst()

[10:53] *** goraki joined
[10:54] <colomon> moritz: you were right about niecza passing todos in lvalue.t.  :)

[10:58] *** bacek joined
[10:58] *** JimmyZ joined
[11:00] <dalek> perl6-examples: 220cec7 | (Gerhard R)++ | shootout/regex-dna.p6-v2.pl:

[11:00] <dalek> perl6-examples: [shootout/regex-dna] add version that works on Rakudo

[11:00] <dalek> perl6-examples: 

[11:00] <dalek> perl6-examples: the .subst() call is what causes the excessive memory consumption

[11:00] <dalek> perl6-examples: of the original version

[11:00] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/220cec796d

[11:03] * bbkr does not understand this "but" magic in this regexp

[11:05] <jnthn> bbkr: It mixes in a method Str that returns the string after the but.

[11:07] <bbkr> thanks, looks like I have to re-read spec about "but" operator

[11:10] <bbkr> rakudo: my $x = 1 but "foo"; say +$x;

[11:10] <p6eval> rakudo 56e86d: OUTPUT«foo␤»

[11:10] <Timbus> butt operator

[11:10] <Timbus> ⍵

[11:10] <bbkr> hm, why it invoked mixed-in Str method in numeric context?

[11:11] <bbkr> or my understanding of "but" operator is incorrect

[11:11] <not_gerd> bbkr: + probably returned the original value as it still is numeric

[11:12] <Timbus> r: my $x = 1; $x does role { method Str {"foo"} }; say +$x; say "$x";

[11:12] <p6eval> rakudo 56e86d: OUTPUT«foo␤foo␤»

[11:12] <Timbus> pf

[11:13] <bbkr> looks like bug to me

[11:14] <jnthn> What bit of spec is in not in line with?

[11:14] <Timbus> my $x = 1 but "foo"; say $x.Int;

[11:14] <Timbus> uh

[11:14] <Timbus> r: my $x = 1 but "foo"; say $x.Int;

[11:14] <p6eval> rakudo abb8f3: OUTPUT«foo␤»

[11:14] <not_gerd> r: my $x = 1 but "foo"; say $x * 1;

[11:14] <p6eval> rakudo abb8f3: OUTPUT«1␤»

[11:14] <jnthn> Right, Int.Int is identify

[11:15] <not_gerd> careful with optimizing the *1 away

[11:18] *** lestrrat left
[11:19] <not_gerd> r: say +((42 but "foo") but role { method gist { self + 0 } })

[11:19] <p6eval> rakudo abb8f3: OUTPUT«42␤»

[11:20] *** lestrrat joined
[11:20] *** NamelessTee left
[11:21] <colomon> r: my $x = 1 but "foo"; say +$x

[11:21] <p6eval> rakudo abb8f3: OUTPUT«foo␤»

[11:22] <bbkr> ok, now I understand this operator :)

[11:22] <bbkr> thanks

[11:23] *** mtk joined
[11:31] <dalek> roast: 9c53615 | moritz++ | S02-lexical-conventions/comments.t:

[11:31] <dalek> roast: rakudo unfudge

[11:31] <dalek> roast: review: https://github.com/perl6/roast/commit/9c5361568c

[11:33] <not_gerd> r: +Int.^methods.grep(*.name eq "Str")

[11:33] <p6eval> rakudo abb8f3: OUTPUT«(signal SEGV)»

[11:34] <moritz> SEGV is the new NPMCA :/

[11:34] <moritz> r: say Int.^methods.WHAT

[11:34] <p6eval> rakudo abb8f3: OUTPUT«Parcel()␤»

[11:34] <moritz> r: say Int.^methods[0].WHAT

[11:34] <p6eval> rakudo abb8f3: OUTPUT«Method()␤»

[11:35] <moritz> r: say Int.^methods.map(*.WHAT).gist

[11:35] <p6eval> rakudo abb8f3: OUTPUT«Method 'count' not found for invocant of class 'Whatever'␤  in method reify at src/gen/CORE.setting:4818␤  in method reify at src/gen/CORE.setting:4743␤  in method reify at src/gen/CORE.setting:4743␤  in method gimme at src/gen/CORE.setting:5130␤  in method eager a…

[11:35] <moritz> r: say Int.^methods.map({ say .name}).eager

[11:35] <p6eval> rakudo abb8f3: OUTPUT«Method 'gist' not found for invocant of class 'String'␤  in sub say at src/gen/CORE.setting:6630␤  in block <anon> at /tmp/bDS8a1geuo:1␤␤»

[11:35] <moritz> ok, at some point it returns a parrot String instead of a Str

[11:36] <jnthn> Method calls should auto-coerce return values though

[11:36] <jnthn> I wonder if that's being missed out for the .foo form.

[11:37] <jnthn> r: say Int.^methods.map({ say $_.name}).eager

[11:37] <p6eval> rakudo abb8f3: OUTPUT«Int␤Num␤Rat␤FatRat␤abs␤Bridge␤chr␤succ␤pred␤sqrt␤base␤floor␤round␤ceiling␤sign␤conj␤rand␤sin␤asin␤cos␤acos␤tan␤atan␤atan2␤sec␤asec␤cosec␤acosec␤cotan␤acotan␤sinh␤asinh␤cosh␤acosh␤tanh␤atanh␤sech␤asech␤cosech␤acosech␤cotanh␤acotanh␤unpolar␤cis␤Complex␤log␤exp␤trunca…

[11:37] <jnthn> Yes.

[11:39] *** icwiener joined
[11:40] <not_gerd> r: say Int.^methods.grep({ $_.name eq "Str"}).[0].(42)

[11:40] <p6eval> rakudo abb8f3: OUTPUT«42␤»

[11:40] <not_gerd> what's the sane way to do that?

[11:41] <moritz> 42.Str :-)

[11:41] <moritz> or

[11:41] <moritz> r: say Int.^can('Str')[0](42)

[11:41] <p6eval> rakudo abb8f3: OUTPUT«42␤»

[11:42] <moritz> r: say Int.^find_method('Str')(42) # more efficient and less specced

[11:42] <p6eval> rakudo abb8f3: OUTPUT«42␤»

[11:45] <not_gerd> r: my $foo = (42 but "foo") but role { method gist { Int.^find_method("Str").(self) } }; .say for $foo, +$foo, ~$foo

[11:45] <p6eval> rakudo abb8f3: OUTPUT«42␤42␤foo␤»

[11:45] <not_gerd> bbkr, Timbus: ^^

[11:47] <Timbus> hah

[11:48] <jnthn> .^find_method will end up spec when I get around to spec'ing MOP bits, I suspect.

[11:50] <not_gerd> r: my $foo = (42 but "foo") but role { method Numeric { self + 0 } }; .say for $foo, +$foo, ~$foo

[11:50] <p6eval> rakudo abb8f3: OUTPUT«foo␤42␤foo␤»

[11:57] *** jerome_ left
[12:03] *** JimmyZ left
[12:06] *** icwiener left
[12:07] *** JimmyZ joined
[12:10] *** jerome_ joined
[12:10] *** skids left
[12:18] <bbkr> not_gerd: thanks for nice example

[12:21] *** araujo left
[12:21] *** araujo joined
[12:26] <masak> <Timbus> man domt tell me .* was re-specced

[12:26] <masak> <Timbus> because that would pretty much ruin all of the things i did in perl 6 D:

[12:26] <masak> (fortunately .* wasn't re-spec'd)

[12:26] * Timbus peers in

[12:26] <Timbus> excellent

[12:26] <masak> protos were :)

[12:27] <masak> but this brings up a risk that no-one ever brings up, I think:

[12:27] <masak> as the totality of the spec congeals and solidifies.

[12:27] <masak> we're ever more restricted in what changes we *can* bring in without losing downstream happy-appy peeps.

[12:28] <masak> it's like we're building up a baggage of ecosystem, and we have to take care of it by not doing too much of the upheaval thing.

[12:28] *** tokuhirom joined
[12:29] <Timbus> well thats fine. i just dont want useful things to keep vanishing.

[12:29] <Timbus> :I

[12:29] <masak> that might be my single biggest critique of the OKness proposal -- it's not that it doesn't have good intentions, or even will lead to improvements in how the language works.

[12:29] <masak> but to me it feels "too late" in some sense to introduce such a big change into the spec.

[12:30] *** birdwindupbird left
[12:30] *** birdwindupbird joined
[12:31] <mikec_> i think as a user you accept that to some degree

[12:31] <jnthn> masak: Yes, but by re-spec'ing protos the upshot is that the behavior of .* will be different on multis.

[12:31] *** pernatiy joined
[12:31] <masak> jnthn: right but it's still not like Timbus' nightmare that it disappeared altogether. the code can probably be rewritten to still use .* in a way that works.

[12:32] <masak> I'm sure TimToady++ has considered the delay that such a change would introduce to the whole universe of compilers and modules and apps. he seems to be more willing to take such a cost than I am.

[12:33] *** BinGOs joined
[12:34] <Timbus> well it would be nice to have modules dispatching to events via some kind of.. existing dispatch mechanism. is all.. the larger scope and implications of this okness thing. waaay over my head

[12:34] *** mikemol left
[12:35] <masak> jnthn: wouldn't an appropriate proto in the base class make Timbus' code runnable again?

[12:36] <masak> r: class A { multi foo(Int $b) { say $b } }; A.*foo("OH HAI")

[12:36] <p6eval> rakudo abb8f3:  ( no output )

[12:36] <masak> hm, why does this survive but Timbus' case die?

[12:37] <Timbus> r: class A { multi foo(Int $b) { say $b } }; A.new.*foo("OH HAI")

[12:37] <p6eval> rakudo abb8f3:  ( no output )

[12:37] * Timbus shrugs

[12:38] <flussence> r: class A { multi method foo(Int $b) { say $b } }; A.new.*foo("OH HAI")

[12:38] <p6eval> rakudo abb8f3: OUTPUT«Cannot call 'foo'; none of these signatures match:␤:(A , Int $b, Mu *%_)␤␤  in method foo at src/gen/CORE.setting:310␤  in method dispatch:<.*> at src/gen/CORE.setting:839␤  in block <anon> at /tmp/yYQz6hx3Rv:1␤␤»

[12:38] <Timbus> oh

[12:38] <Timbus> method 

[12:39] <jnthn> masak: 'cus you missed the method :)

[12:39] <jnthn> masak: (appropriate proto) huh? protos don't disambiguate any more...

[12:39] <jnthn> uh, serve as fallbacks I mean...

[12:40] * [Coke] drinks coffee.

[12:40] <phenny> [Coke]: 10:42Z <not_gerd> tell [Coke] the intval/opcode_t but is filed as https://github.com/parrot/parrot/issues/705

[12:40] *** cognominal_ joined
[12:40] <masak> whaddya mean "missed the method"? wasn't Timbus' case also just a failed signature binding?

[12:41] <jnthn> masak: Timbus one also just had "multi", not "multi method"

[12:41] <jnthn> flussence++ got it right :)

[12:41] <masak> oh!

[12:42] <masak> silly masak, missed typing "method".

[12:42] <masak> jnthn: and you're saying adding a proto method won't fix that? :(

[12:42] *** cognominal left
[12:43] <masak> ok, let me broaden the question then: how should the base class look for Timbus-style hooks in deriving classes to be possible? without getting those failed signature binding errors.

[12:44] <masak> [backlog] hm, should .trans have a case-insensitivity flag? or will that create more trouble than it soaks up?

[12:44] <jnthn> masak: I don't get what you mean about "adding a proto method". There already *is* a proto method - the generated one.

[12:45] <jnthn> If you want any dispatch to work out, just write in the base class a multi foo(|$) { }

[12:45] <masak> ah. yes.

[12:45] <jnthn> That'll sort looser than anything else.

[12:45] <masak> \o/

[12:46] <jnthn> You could probably even write a trait so you can do proto method foo(|$) is failless { * }

[12:47] <jnthn> (and it just adds the candidate I suggested above)

[12:47] <masak> r: sub foo(Bool $b = sub { False }) {}; say "alive"

[12:47] <p6eval> rakudo abb8f3: OUTPUT«alive␤»

[12:48] <masak> jnthn: would it be possible to get a compiler warning (or even an error) for the case of non-smartmatching defaults?

[12:48] <jnthn> r: sub foo(Bool $b = sub { False }) {}; foo(); say "alive"

[12:48] <p6eval> rakudo abb8f3: OUTPUT«Nominal type check failed for parameter '$b'; expected Bool but got Sub instead␤  in sub foo at /tmp/y1PGydjjlZ:1␤  in block <anon> at /tmp/y1PGydjjlZ:1␤␤»

[12:48] <jnthn> phew

[12:48] <masak> :)

[12:48] <jnthn> masak: If you mean "non-typechecking"?

[12:48] <jnthn> Then probably, yes.

[12:49] <jnthn> If we know the type of the RHS, which we do in this case.

[12:49] <jnthn> Guess an error is fine.

[12:49] *** PacoAir joined
[12:49] <masak> aye.

[12:49] <jnthn> I mean, if it's gonna fail anyway... :)

[12:49] <masak> not necessarily.

[12:49] <masak> not if you always call it with the argument provided.

[12:49] <masak> but it's a ticking bomb, for sue.

[12:49] <masak> sure*

[12:50] * masak .oO( and some angry end user might sue, for sure )

[12:50] <masak> jnthn: will you be helped by me submitting a TODO RT ticket 'bout it?

[12:50] <masak> should I make a spec change saying that we should explicitly check for this?

[12:50] <masak> s/we/compilers/

[12:52] <jnthn> masak: We don't tend to spec such things as "must". But a TODO RT is fine.

[12:52] <jnthn> Or just implement it...it's only gonna be 3 or so lines of code. :)

[12:53] * masak submits TODO rakudobug, and might come around to implementing it leytur

[12:53] <jnthn> (in parameter action method...you already have the nominal_type to hand, and can see if the default has a known compile time value, which we already consider anyway)

[12:54] <masak> jnthn: that's cool. means I can probably do it all by myself ;)

[12:56] *** pmurias joined
[12:56] <pmurias> fglock: hi

[12:57] <pmurias> fglock: i want to hook in an optimalisation pass/backend to Perlito5 as an external process what's the best way to do that?

[13:04] *** quicoju joined
[13:04] *** not_gerd left
[13:05] <dalek> tablets: a9ae891 | (Herbert Breunung)++ | docs/appendix-g-glossary.txt:

[13:05] <dalek> tablets: polish entry for sigil

[13:05] <dalek> tablets: review: https://github.com/perl6/tablets/commit/a9ae891e02

[13:06] * masak .oO( many Polish entries )

[13:08] <pmurias> shouldn't the tablets be linked to the spec?

[13:11] *** Psyche^ joined
[13:11] *** Psyche^ is now known as Patterner

[13:29] <masak> pmurias: by "be linked to", do you mean "link to"?

[13:35] *** mucker left
[13:37] *** mucker joined
[13:37] *** skids joined
[13:37] <pmurias> masak: yes

[13:41] <masak> sure, why not?

[13:45] *** tyatpi joined
[13:49] <pmurias> i'm not volunteering for that just suggesting ;)

[13:50] *** benabik left
[13:50] *** kaleem left
[13:51] *** mikemol joined
[13:53] <fglock> pmurias: hi

[13:53] <fglock> I think you could use the -Cast-perl5 output

[13:55] <fglock> alternately you need to plug it in at the compiler itself, in 2 places: perlito5.pl, and eval()

[13:56] *** snearch joined
[13:59] <pmurias> fglock: what's i'm currently doing is adding an -Cast-hs option

[13:59] <pmurias> i want to write the optimizer in haskell so i can't use the hoopl library

[14:00] <fglock> you will probably want to read the AST back to emit code, it should be easy to add a new switch that does that

[14:00] <fglock> nice

[14:00] <fglock> or just run haskell!

[14:01] <fglock> p5 -> AST -> haskell -> bootstrap :)

[14:03] <pmurias> how will BEGIN block be handled in Perlito5?

[14:05] <fglock> it is executed by eval(), and the result is serialized - the details are a bit more complicated, see README-perlito5-js#Compile-time / Run-time interleaving (TODO)

[14:07] *** mucker left
[14:10] *** NamelessTee joined
[14:11] <fglock> the -Cast-* output happens after all BEGIN and "use", it should be ready to run (but there is a long way ahead implementing all these)

[14:13] <pmurias> BEGIN {$foo = create_a_complicated_object()} is most concerning thing

[14:14] <pmurias> fglock: we will serialize the whole environment? (like kp6 used to do?)

[14:15] *** pernatiy left
[14:16] <fglock> yes

[14:17] <fglock> and if you need eval(), we throw in a compiler too

[14:20] *** pernatiy joined
[14:20] <fglock> (perlito is a kp6 without the slow parts)

[14:30] *** PacoAir left
[14:40] <[Coke]> # 05/13/2012 - rakudo++ (22080); niecza (92.24%); pugs (35.26%)

[14:40] <masak> p6: say (2, 3, 4) leg (2..4)

[14:40] <p6eval> rakudo abb8f3, niecza v17-4-ge5b869e: OUTPUT«Same␤»

[14:40] <p6eval> ..pugs: OUTPUT«0␤»

[14:40] <masak> p6: say (2, 4) leg (2..4)

[14:40] <p6eval> pugs: OUTPUT«1␤»

[14:40] <p6eval> ..rakudo abb8f3, niecza v17-4-ge5b869e: OUTPUT«Decrease␤»

[14:40] *** pernatiy left
[14:43] *** pernatiy joined
[14:45] *** thou joined
[14:48] *** kaare_ joined
[14:48] *** tyatpi left
[14:54] *** tyatpi joined
[14:57] <dalek> roast: 03de2f7 | (Kyle Hasselbacher)++ | S32-num/base.t:

[14:57] <dalek> roast: [base.t] Test for RT 11290

[14:57] <dalek> roast: review: https://github.com/perl6/roast/commit/03de2f7d0b

[15:04] <[Coke]> hurm. I can't build rakudo with --gen-parrot behind work proxy.

[15:04] <moritz> :(

[15:04] <moritz> [Coke]: does 'git pull' work for both ssh and git:// URLs?

[15:05] *** sudokode left
[15:05] <[Coke]> [email@hidden.address] works. git:// does not.

[15:05] <[Coke]> the former goes through the http proxy correctly.

[15:06] <masak> [Coke]: I've had the same at times.

[15:06] <masak> I just do the pull manually, and re-run the Configure.pl --gen-parrot

[15:06] <masak> if it finds a new enough nqp and parrot, it doesn't try to git-pull it.

[15:07] <tadzik> I can't use git protocol on my university either

[15:07] <moritz> [Coke]: if you clone parrot once with the right URL yourself, rakudo will re-use the right URL

[15:07] <[Coke]> I'd rather make the proxy work. ah well.

[15:10] *** spaceships joined
[15:12] *** pyrimidine joined
[15:13] *** crab2313 joined
[15:19] *** snearch left
[15:30] *** apejens left
[15:31] *** apejens joined
[15:32] <dalek> roast: 8ba936c | (Kyle Hasselbacher)++ | S32-str/split-simple.t:

[15:32] <dalek> roast: [split-simple.t] Test for RT 112868

[15:32] <dalek> roast: review: https://github.com/perl6/roast/commit/8ba936c0f7

[15:32] *** sisar joined
[15:33] *** fglock left
[15:34] <[Coke]> if we switched to using git submodules, would git clean -xdf in rakudo not wipe out t/spec, nqp/, and parrot/ ?

[15:36] <masak> does anyone actually use git submodules?

[15:36] <masak> (honest question, not trying to be sarcastic)

[15:37] <masak> r: class A { has $!x; submethod BUILD { my $!x = 42 }; method foo { say $!x } }; A.new.foo

[15:37] <p6eval> rakudo abb8f3: OUTPUT«===SORRY!===␤Cannot use ! twigil on my variable␤at /tmp/8Zmo0LUNcp:1␤»

[15:37] <masak> :)

[15:38] *** tokuhirom left
[15:38] *** tokuhirom joined
[15:38] <masak> b: class A { has $!x; submethod BUILD { my $!x = 42 }; method foo { say $!x } }; A.new.foo

[15:38] <p6eval> b 922500: OUTPUT«42␤»

[15:38] <masak> right.

[15:39] <[Coke]> masak: I don't.

[15:40] <moritz> there's a newish tool, 'git subtree', which supports a slightly different working style and which has been praised by many people

[15:40] <moritz> I haven't used it myself, can't comment on how good or how fitting it is

[15:40] <tadzik> masak: my coworker was using them some time ago, he was mostly cursing and getting rid of them

[15:42] *** tokuhirom left
[15:43] <JimmyZ> git subtree is a good tool

[15:44] <moritz> but would it be a good fit for rakudo to include parrot and nqp as subtrees?

[15:44] <masak> I've also heard about 'git subtree'. maybe worth checking out. but I'm not actually sure there's a problem there that particularly needs fixing.

[15:45] <masak> I mean, company proxies will exist even if we employ 'git subtree'.

[15:45] <moritz> troo

[15:45] <masak> and otherwise things seem to be working pretty well.

[15:45] *** paul_tyler joined
[15:45] <moritz> because we've written our own tools, which we still need to maintain

[15:45] <masak> yeah.

[15:46] <JimmyZ> moritz: masak see https://github.com/zhuomingliang/skytools, there is a lib dir , but I don't how it works

[15:47] *** cognominal joined
[15:48] <[Coke]> rakudo seems happy enough building with perl 5.16

[15:48] <[Coke]> (OS X 10.7.3)

[15:48] <moritz> [Coke]++ for testing

[15:48] *** cognominal___ joined
[15:48] <moritz> I'm not surprised, our configure system doesn't do anything "fancy"

[15:49] *** cognominal_ left
[15:52] *** cognominal left
[15:56] <jnthn> decommute, at last &

[15:57] <bbkr> std: /[]/

[15:57] <p6eval> std 8632387: OUTPUT«[31m===[0mSORRY![31m===[0m␤Null pattern not allowed at /tmp/MMjcI7Gz6a line 1:␤------> [32m/[[33m⏏[31m]/[0m␤    expecting regex atom␤Parse failed␤FAILED 00:00 41m␤»

[15:59] *** JimmyZ left
[16:00] <[Coke]> building rakudo is probably the most complicated thing I use perl5 for in a week.

[16:00] <[Coke]> *sadface*

[16:00] <goraki> [Coke]: Do you not have problems building from nom on Lion?

[16:01] <[Coke]> I'm using 10.7.3. I'm sorry, I have no idea if that's lion.

[16:01] <goraki> os x, right?

[16:02] *** brrt left
[16:02] <[Coke]> 11:48 < [Coke]> (OS X 10.7.3)

[16:02] <bbkr> 10.7.x = Lion, 10.8.x = Mountain Lion

[16:02] <goraki> yeah, that. (-: it's Lion, also the same subversion I'm running - which is why I asked.

[16:03] <[Coke]> goraki: works fine here, using rakudo nom, i686-apple-darwin11-llvm-gcc-4.2 (GCC) 4.2.1 

[16:03] <[Coke]> you having a build issue?

[16:03] <goraki> yeah.

[16:03] <goraki> during the building of parrot it seems.

[16:04] <goraki> (during perl Configure.pl --gen-parrot)

[16:04] <[Coke]> throw the build log somewhere I can see it?

[16:05] <bbkr> also tell us which XCode do you use

[16:05] <goraki> XCode Version 4.3.2 (4E2002)

[16:06] <goraki> build log coming.

[16:06] *** kaleem joined
[16:06] *** benabik joined
[16:07] <bbkr> have you installed it directly from AppStore on clean system or over 4.2 standalone series?

[16:08] <goraki> it wasn't a clean system I'm afraid.

[16:08] <[Coke]> my gcc is from xcode 4.3 (4E109)

[16:09] <goraki> this is an upgrade from a 10.6.x, and I've been upgrading Xcode since I got the machine (a couple of years ago).

[16:12] <masak> niecza: say 4 ~~ Failure ?? 5 !! 42

[16:12] <p6eval> niecza v17-4-ge5b869e: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Expecting a term, but found either infix ?? or redundant prefix ?␤  (to suppress this message, please use space between ? ?) at /tmp/3SRuSARtcP line 1:␤------> [32msay 4 ~~ Failure ??[33m⏏[31m 5 !! 42[0m␤␤Parse failed␤␤»…

[16:12] <masak> sorear: why do I get this? Failure is a term, no?

[16:12] <masak> std: say 4 ~~ Failure ?? 5 !! 42

[16:12] <p6eval> std 8632387: OUTPUT«ok 00:00 41m␤»

[16:12] * masak submits nieczabug

[16:14] <bbkr> goraki: I remember that after Xcode 4.3 upgrade I had to explicitly select Xcode version to use (despite the fact that I uninstalled standalone 4.2). "sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer/" - as far as I remember

[16:15] *** spaceships left
[16:15] <goraki> bbkr: I've uninstalled the old version, so in theory there should be no conflict.

[16:15] *** cognominal___ left
[16:15] <goraki> however I'll double check.

[16:15] *** thelazydeveloper joined
[16:16] *** cognominal___ joined
[16:16] <geekosaur> in theory.  in practice, uninstalling doesn't remove saved state (like the xcode-select -switch value) etc.

[16:16] <geekosaur> ...which will be /Developer if you have used an earlier Xcode

[16:17] <bbkr> hence explicit selection of AppStore version in Applications/

[16:17] *** aindilis left
[16:17] *** icwiener joined
[16:18] *** cognominal___ left
[16:18] <goraki> right, going to check that now.

[16:18] <goraki> in the mean time, here's the end of the build log.

[16:18] <goraki> http://pastebin.com/NBnaQ24s

[16:18] <goraki> I can post the rest of it if you like, but it's long, obviously.

[16:19] <sorear> masak: Failure is an unknown name, so it's treated as a postdeclared listop ;)

[16:19] *** cognominal joined
[16:20] <masak> ah.

[16:20] <sorear> masak: also, dunno if you saw, but you got the first link in announce.v17 wrong

[16:20] <masak> :/

[16:22] <bbkr> goraki: do you build 2012.04 release or HEAD version?

[16:23] <goraki> bbkr: I can build 2012.04 fine. HEAD doesn't.

[16:23] <goraki> bbkr: that's the odd thing.

[16:23] <dalek> niecza: fe453ec | sorear++ | docs/release.txt:

[16:23] <dalek> niecza: fix small glitch in release.txt skids++

[16:23] <dalek> niecza: review: https://github.com/sorear/niecza/commit/fe453ec079

[16:26] <masak> sorear: I'm not quite synched up with the backlog yet..

[16:27] *** aindilis joined
[16:27] *** spider-mario joined
[16:29] <masak> sorear: ah. see https://github.com/sorear/niecza/commit/b8fcf8502562cf1245dfaf3ed6a9ca72b2ac4a31 -- this was the only place where the release guide led me wrong. I could fix it in FETCH_URL -- didn't even think about the announcement, which was already sent at that point.

[16:29] <masak> I don't remember exactly what it was about the release guide that was confusing. only that it was.

[16:29] * jnthn home

[16:30] <masak> jnthn! \o/

[16:30] <dalek> tablets: 590b09c | (Herbert Breunung)++ | docs/appendix- (2 files):

[16:30] <dalek> tablets: getting quoting terms in better shape

[16:30] <dalek> tablets: review: https://github.com/perl6/tablets/commit/590b09ccf1

[16:30] *** s1n left
[16:31] *** adu joined
[16:31] *** alim left
[16:31] <masak> greetings, adu.

[16:31] <colomon> masak: no Failure in niecza

[16:32] <colomon> niecza: Failure

[16:32] <p6eval> niecza v17-4-ge5b869e: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared name:␤ 'Failure' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1364 (die @ 3) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 33) ␤  at /home…

[16:32] <goraki> bbkr: so far no joy switching the Xcode instance, I've done everything apart from reboot.

[16:32] <bbkr> goraki: file from your backlog that causes trouble is in NQP, not Parrot

[16:33] <goraki> ahhh, right, sorry.

[16:33] <masak> colomon: yeah, sorear explained.

[16:33] *** kaleem left
[16:34] <masak> no &fail either, IIRC.

[16:35] <sorear> o/ colomon

[16:35] <sorear> [ good * #perl6 ]

[16:35] <[Coke]> looks like one of the 3rd party libraries isn't quite up to date with latest xcode. wonder if there's a later version we can merge in.

[16:36] <jnthn> [Coke]: Which one, ooc?

[16:36] <bbkr> goraki: unfortunately I know very little about NQP :(

[16:36] <goraki> bbkr: okay, well don't worry about it. (-:

[16:37] <goraki> bbkr: before looking at it seriously I'm going to upgrade Xcode and double check that there is no legacy stuff hanging around, otherwise I could be chasing ghosts.

[16:37] <dalek> tablets: 5eed3a4 | (Herbert Breunung)++ | docs/appendix-g-glossary.txt:

[16:37] <dalek> tablets: prepare to wrap up argument related terms

[16:37] <dalek> tablets: review: https://github.com/perl6/tablets/commit/5eed3a4a0b

[16:37] <jnthn> [Coke]: ah, nm, just saw the link to the log

[16:37] <goraki> bbkr++: thanks for your help.

[16:38] <jnthn> Hmm. dyncall related...

[16:39] * geekosaur is on his second "newer xcode breaks stuff" in 12 hours... increasingly glad he stayed at 4.2.1

[16:39] <geekosaur> (mind, would be nice to be able to use it, but so much stuff still breaks...)

[16:43] <sorear> why does xcode break stuff?

[16:44] <tadzik> 'evening

[16:44] <sorear> greetings tadzik.

[16:45] <masak> tadziku! \o/

[16:46] *** s1n joined
[16:47] <tadzik> masaku, sorearze!

[16:48] <geekosaur> sorear, Apple moved the internals of Xcode around in the 4.3 releases; a lot of stuff that refers to said internals has not caught up yet

[16:48] <sorear>  are those declensional endings?

[16:48] * ingy waves

[16:48] <geekosaur> ideally nothing would refer to them directly, in practice it's still necessary sometimes

[16:48] <tadzik> sorear: yes

[16:48] *** PacoAir joined
[16:49] <geekosaur> although the changes in 4.3 should hopefully make it less necessary once stuff is rewritten to use it...

[16:49] <masak> sorear: vocative.

[16:49] <tadzik> if "declensional" is what I think it is :)

[16:49] *** kaleem joined
[16:50] <masak> yes.

[16:51] *** birdwindupbird left
[16:51] *** havenn joined
[16:51] <masak> there's a metaphor going on there, about how nouns are being "bent" (declined) for various purposes.

[16:52] <PerlJam> masak: so ... someone who does that can be reasonably considered a "bender"?

[16:53] *** derrazo_ joined
[16:53] <masak> grammar. it's addictive.

[16:53] <dalek> roast: efd9d5b | (Kyle Hasselbacher)++ | S05-mass/rx.t:

[16:53] <dalek> roast: [S05-mass] Test for RT 112450

[16:53] <dalek> roast: review: https://github.com/perl6/roast/commit/efd9d5baea

[16:53] <dalek> roast: cb72ab0 | (Kyle Hasselbacher)++ | S05-mass/rx.t:

[16:53] <dalek> roast: [S05-mass/rx.t] Test for RT 112454

[16:53] <dalek> roast: 

[16:53] <dalek> roast: These are the only tests in this file that use $/, so maybe they should

[16:53] <dalek> roast: be somewhere else.

[16:53] <dalek> roast: review: https://github.com/perl6/roast/commit/cb72ab0184

[16:53] <sorear> masak: What is 'sorearze

[16:53] *** derrazo_ is now known as derrazo

[16:53] *** derrazo left
[16:53] <sorear> masak: What is 'sorearze'?  w:Polish_morphology#Nouns doesn't mention -ze

[16:54] *** az5112 joined
[16:54] <masak> I bet it's also the vocative.

[16:54] *** s1n left
[16:54] <masak> the vocative doesn't seem regular, though I bet there are patterns.

[16:54] <masak> haven't figgered them out yet.

[16:55] <masak> it's "masaku" and "tadziku" but "sergocie" and "sorearze".

[16:55] <sergot> :)

[16:57] <sorear> https://en.wikipedia.org/wiki/Vocative#Polish

[16:57] <tadzik> sorear: I can't really tell how this works. sorearze is like "boże" or "serze", "bóg" and "ser" being god and cheese consequently

[16:57] * sorear nods

[16:58] <tadzik> I have to admit that I never learned the rules behind those things, I just can use them properly

[16:59] * masak decommutes

[17:01] *** pernatiy left
[17:04] *** kresike left
[17:04] <moritz> http://moritz.faui2k3.org/tmp/changelog-lines.svg # number of changelog entries per rakudo release

[17:05] <moritz> for that I've lumped the 2012.04.1 and the 2012.05 releases together

[17:07] <moritz> https://gist.github.com/2695100 is what I used to extract that info

[17:08] <az5112> Funny, I have just checked and google translate thinks that both sorear and sergot are females :)

[17:08] <sorear> does polish have the silly gramattical gender = social gender for humans thing?

[17:09] <moritz> az5112: well, 'sorear' is neither a word nor a traditional name, and 'sergot' is a lst name

[17:12] <moritz> jnthn++ # Grammar::Trace

[17:12] <az5112> Yeah, but I entered "My dear Sorear/Sergot" to force the translator to assign the gender (for the adjective), and it always picks the adjective form for the female; so I guess there must be some variable controlling political correctness somewhere in the translator :)

[17:12] *** s1n joined
[17:14] <moritz> :-)

[17:15] *** fhelmberger left
[17:16] *** dakkar left
[17:17] *** s1n left
[17:18] <az5112> Funny... It doesn't do that for French though...

[17:19] *** raiph left
[17:19] <az5112> My dear sorear is Mon cher sorear

[17:20] <az5112> Nor for Russian

[17:20] *** Chillance joined
[17:21] <az5112> Nor for Slovak

[17:21] <az5112> Nor Slovenian!

[17:22] <az5112> So it's either the bug or they have a female programmer on the team! :D

[17:22] *** araujo left
[17:22] <spider-mario> it’s a shame google can’t translate from or to lojban !

[17:22] <spider-mario> -' '

[17:22] <spider-mario> I’m too used to putting a space before “!”, “?”, “;” and “:”

[17:22] <spider-mario> we do in French

[17:23] <spider-mario> (a thin non-breakable space, more specifically)

[17:23] <jnthn> moritz: Nice graph!

[17:23] <sorear> it can't do Japanese either :|

[17:24] <dalek> roast: a4148aa | (Kyle Hasselbacher)++ | S29-context/eval.t:

[17:24] <dalek> roast: [eval.t] Test for RT 112472 -- bad error message for eval of bogus language

[17:24] <dalek> roast: review: https://github.com/perl6/roast/commit/a4148aaec5

[17:24] *** KyleHa joined
[17:24] <KyleHa> Hi #perl6.

[17:24] <sorear> graph? where?

[17:24] <tadzik> hi KyleHa 

[17:24] <sorear> Hello, KyleHa

[17:24] <tadzik> http://moritz.faui2k3.org/tmp/changelog-lines.svg

[17:24] <tadzik> sorear: ^

[17:25] <jnthn> o/ KyleHa 

[17:25] <KyleHa> Hey, jnthn, you can help me!

[17:25] <sorear> masak: I have a vague desire to see that integrated.

[17:25] <KyleHa> I put a test for this bug:  https://rt.perl.org/rt3/Ticket/Display.html?id=112472

[17:25] <sorear> moritz: I have a vague desire to see that integrated.

[17:26] <KyleHa> I want to know if the test is good enough to close the ticket, or if it needs to check more.

[17:27] *** araujo joined
[17:27] *** araujo left
[17:27] *** araujo joined
[17:27] <jnthn> KyleHa: Looks decent to me.

[17:27] <KyleHa> Thanks jnthn!

[17:28] <KyleHa> Is Moritz in the house?

[17:30] <KyleHa> My stomach is burning. I'll come back when I'm fed.

[17:30] *** KyleHa left
[17:30] <jnthn> ooh, getting fed is a good idea..

[17:31] *** Chillance_ joined
[17:32] *** goraki left
[17:32] *** s1n joined
[17:32] *** jferrero joined
[17:35] *** Chillance left
[17:36] *** s1n left
[17:40] *** havenn left
[17:41] *** havenn joined
[17:48] *** crab2313 left
[17:49] <adu> masak: greetings

[17:50] * TimToady intercepts masak's greetings en passant and replies o/ on behalf of mashark^Wmasak

[17:50] *** s1n joined
[17:51] * TimToady is attempting to backlog with migraine jaggies, but at least they've moved off my fovea now

[17:51] *** slavik1 joined
[17:51] *** thelazydeveloper left
[17:52] <adu> ooo the chess rule nobody knows about

[17:53] <adu> I realize now that masak's hello was over an hour ago

[17:54] <adu> TimToady: have you tried Aspirin?

[17:55] *** slavik1 left
[17:56] *** slavik1 joined
[17:56] <TimToady> I am not allowed to take aspirin; I get GI bleeding

[17:56] <TimToady> no NSAIDs for me, except aceteminaphen

[17:57] * TimToady doesn't really want to end up in the hospital again

[17:57] <geekosaur> ...which isn;t an NSAID :p

[17:57] <PerlJam> TimToady: Every time I hear about some health issue that you have, the more I think Perl a miracle.

[17:57] <TimToady> geekosaur: it's non-steroidal, and it's somewhat anti inflammatory :P

[17:58] <sorear> is it 'only' an antipyretic/analgesic?

[17:58] <TimToady> fortunately this is (I hope) just an ophthalmic migraine

[17:58] <geekosaur> (and it doesn't do anything noticeable to me unless I take so much that I'm risking worse liver problems than the stomach issues from NSAIDs...)

[17:58] <TimToady> so while I have the "mean feeling" of a migraine, it doesn't really hurt

[17:59] <geekosaur> ah, bodies.  more ways to be messed up than there are people...

[17:59] <TimToady> well, eventually your doctors give you completely contradictory advice, and then you die :)

[17:59] <geekosaur> they already have, a few times.

[18:00] <TimToady> well, then you're gonna die :P

[18:00] * geekosaur 's social circle somewhat encourages talking about  "the last time my doctor tried to kill me"

[18:00] <adu> TimToady: like "get plenty of rest" while you're working 60-hour work weeks

[18:01] <TimToady> sure, but they didn't tell you to work the 60-hour work week

[18:02] <TimToady> I'm supposed to eat a low-fat diet because of family history, and I'm suppoed to eat a high-fat diet because of having had a partial gastrectomy

[18:02] <slavik1> TimToady: eat something in between?

[18:02] <slavik1> medium fat diet?

[18:02] <TimToady> mostly I try to eat healthy fats along with the unhealthy ones :)

[18:03] <slavik1> potato chips for the win :)

[18:03] <[Coke]> TimToady: bleargh. i do wish I could just have food handed to me. I do a terrible job picking out things that I should eat.

[18:04] <sorear> Life with organs is hard.  Brain in a jar sounds like a pretty good deal to me.

[18:04] <TimToady> except it's pretty hard to clone yourself without sacrificing brain tissue that way

[18:07] <TimToady> plus bits of your brain can also be construed as organs

[18:08] <TimToady> the problem isn't so much organs and organics...

[18:08] <ingy> date +%s|cut -b1-4

[18:08] <TimToady> s/and/as/

[18:09] <TimToady> ingy++ is caught redhanded lurking

[18:09] <sorear> Yeah.  Down with organics.

[18:09] <[Coke]> ... if you're caught redhanded, does that make you move more gingerly next time?

[18:10] <sorear> caught redheaded!

[18:10] <TimToady> oddly, pipe organs are mostly not organic

[18:10] <TimToady> but organ pipe cactuses are, go figure...

[18:11] *** mucker joined
[18:11] * [Coke] runs igny's command. nifty.

[18:11] <ingy> It's 1337 week!

[18:11] *** fglock joined
[18:12] *** kaleem left
[18:12] <sorear> o/ fglock

[18:12] <TimToady> is this something intended to offset Mother's Day?

[18:12] <fglock> o/

[18:17] <moritz> niecza: say (4 ~~ Failure) ?? 5 !! 42

[18:17] <p6eval> niecza v17-4-ge5b869e: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared name:␤ 'Failure' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1364 (die @ 3) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 33) ␤  at /home…

[18:17] <moritz> masak: ^^ Failure is simply not declared in niecza

[18:17] <TimToady> Failure is not an option...

[18:18] <adu> ingy: is that unix timestamp?

[18:18] <spider-mario> r: (True ^^ True).perl.say

[18:18] <p6eval> rakudo abb8f3: OUTPUT«Nil␤»

[18:18] <masak> moritz: yes, I know. sorear++ explained it.

[18:18] *** cogno joined
[18:18] <masak> and then colomon.

[18:18] <sorear> adu: yes

[18:18] <masak> it's quite amazing that Niecza is as developed as it is, and yet doesn't have the Failure type.

[18:20] *** daxim left
[18:20] <adu> oo the second billenium is in 2033

[18:21] *** fgomez joined
[18:22] <masak> :P

[18:23] <adu> we should plan a huge party somewhere

[18:23] <moritz> wow, I've got a /msg on perlmonks "Perl6 grammar capability is simply beautiful!" about that gist that parses the ChangeLog

[18:23] <masak> I'm reading the diakopter/gfldex discussion from yesterday, and I want to jump in and make all the miscommunication go away, but I can't because it happened in the backlog, not now.

[18:23] <adu> moritz: well, it is

[18:24] <masak> moritz: where's the gist? /me curious

[18:24] <moritz> in the backlog :-) https://gist.github.com/2695100

[18:24] *** cogno left
[18:24] <gfldex> masak: could we ease your pain by pretending it never happened? :->

[18:24] <moritz> I used it to produce http://moritz.faui2k3.org/tmp/changelog-lines.svg

[18:25] <masak> nah. I'm not wired that way.

[18:25] *** s1n left
[18:25] <masak> but it would be interesting to heard what you learned from it.

[18:25] <jnthn> hah, moritz++ also used Grammar::Tracer to debug it :D

[18:25] *** shinobicl joined
[18:26] <masak> gfldex: you held and defended a staunchly fixed and fiercly wrong opinion against a compiler implementor. what was the fallout of that?

[18:26] <masak> moritz: thanks. I'm not done with the lackbog yet. :)

[18:26] <masak> that's why I'm looking so confused and underinformed.

[18:26] <gfldex> there was no fallout on my side, at least non that i could notice

[18:27] <moritz> jnthn: heh, yes. My grammar worked from the very start, except that it failed at the very end of the string (because there's no newline after the last changelog entry)

[18:27] <jnthn> moritz: oh :)

[18:27] <diakopter> niecza: my $b = ->($a=->{}) { say $a }; $b($b)

[18:27] <p6eval> niecza v17-4-ge5b869e: OUTPUT«Unhandled exception: Unable to resolve method Capture in class Block␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/NBMArHlyvZ line 0 (ANON @ 1) ␤  at /tmp/NBMArHlyvZ line 1 (mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3842 (ANON @ 3) …

[18:27] <masak> gfldex: hm, I just meant "fallout" as in "the world events that this resulted in". i.e. maybe you realized something.

[18:28] <moritz> jnthn: and once I ran it with Grammar::Debugger, it took so long that I figured out the solution on my own before the run finished

[18:28] <masak> <gfldex> $ is a marker for the compiler that tells it it's not a function

[18:28] <diakopter> oh boy

[18:28] <masak> gfldex: I actually see where you're coming from with this one.

[18:29] <masak> gfldex: but you made a crappy job at explaining it so that diakopter understood the point of it :)

[18:29] <diakopter> I understood the point; my point was the statement equally applies to %,@

[18:30] <masak> granted.

[18:30] <masak> gfldex's point seems to have been about sigils being noun markers.

[18:30] <dalek> tablets: 9d0bd55 | (Herbert Breunung)++ | docs/appendix- (2 files):

[18:30] <dalek> tablets: sharpening some bits

[18:30] <dalek> tablets: review: https://github.com/perl6/tablets/commit/9d0bd55a8f

[18:31] <masak> but he mucked it up by going on a tangent about holding function values at runtime.

[18:32] <gfldex> because the person who asked the original question seam to have a fixation on types, what failed for him when he tried to understand $

[18:33] <sorear> masak: see also me getting frustated with the direction the convo was going and leaving

[18:33] <masak> aye.

[18:34] <masak> sorear: but you got frustrated with Araq.

[18:40] <masak> I'm surprised that the discussion mentioned "Perl 6 won't make sigils optional" without once mentioning the new \ sigil and how it makes sigils optional.

[18:41] <TimToady> "won't make optional" is code for "won't banish them"

[18:41] <masak> I guess.

[18:42] <TimToady> but I'm also a bit surprised

[18:42] *** s1n joined
[18:42] <masak> when I see someone arguing for banishing sigils in Perl 6, I flip the bozo bit.

[18:42] *** lichtkind joined
[18:42] <gfldex> masak: i did mention \

[18:42] <lichtkind> is it declaring to a .. or declaring as a .. ?

[18:42] <lichtkind> ha

[18:42] <masak> gfldex: oh! url?

[18:43] <masak> lichtkind: what's the full sentence?

[18:43] <masak> lichtkind: it's like asking "is it 'passing in a ...' or 'passing over a ...'?" both are correct.

[18:43] <gfldex> http://irclog.perlgeek.de/perl6/2012-05-13#i_5587077

[18:43] <lichtkind> masak: the keyword role declares the following block to a role

[18:44] <gfldex> and i would still like to know what parcel binding is for

[18:44] <masak> gfldex: oh, I missed that because I was feeling sorry for diakopter at that point, who had to counter your strange arguments :)

[18:44] <TimToady> for leaving out the sigil :)

[18:44] <gfldex> that is just nasty!

[18:45] <masak> don't do it, then.

[18:45] <TimToady> in my experience, masak++ is much more interested in the truth than in being nasty

[18:46] <diakopter> I didn't know about \

[18:46] <moritz> gfldex: the idea is that you sometimes just want to pass something on without any modifications. But binding something to a sigiled variable always implies context

[18:46] <masak> TimToady: oh, I thought "nasty" was a reaction to "for leaving our the sigil", not what I said.

[18:46] <TimToady> maybe it was ;)

[18:46] <gfldex> could very well be

[18:47] <masak> :P

[18:47] <gfldex> when you use the intarweb anything is possible!

[18:47] <masak> in this instance I'm interested in doing an autopsy on a discussion with cross purposes and good intentions.

[18:47] <masak> people who are benign can still fail to reach each other and make a genuine connection on IRC.

[18:48] <diakopter> std: sub foo(label1: say 1; say 2) {} 

[18:48] <p6eval> std 8632387: OUTPUT«Use of uninitialized value $x in pattern match (m//) at STD.pm line 66537.␤Use of uninitialized value $x in concatenation (.) or string at STD.pm line 66576.␤[31m===[0mSORRY![31m===[0m␤In parameter declaration, typename 'label1' must be predeclared (or marked as …

[18:48] <masak> diakopter: I never cease to admire the twistedness of your mind :)

[18:49] <diakopter> stdbug

[18:49] <diakopter> let

[18:49] <sorear> masak: I can't say with certainty how much of my snapping was caused by Araq, how much was caused by gfldex, and how much was caused by RL stress

[18:49] <sorear> n:  sub foo(label1: say 1; say 2) {}

[18:49] <p6eval> niecza v17-4-ge5b869e: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤In parameter declaration, typename 'label1' must be predeclared (or marked as declarative with :: prefix) at /tmp/5FRaY137_j line 1:␤------> [32msub foo(label1[33m⏏[31m: say 1; say 2) {}[0m␤␤Parse failed␤␤»

[18:49] <diakopter> stdbuglet being the unitialized $x warning

[18:50] <masak> right.

[18:50] <masak> diakopter: but signatures are their own slang. why would 'label1:' even make sense there?

[18:50] <diakopter> sry; it doesn't...

[18:50] <masak> that colon is bound to end up meaning 'invocant marker'.

[18:50] <diakopter> I'm exploring semilist

[18:50] <masak> ok.

[18:51] <masak> I'm just assuming when I see that that you know something I don't :)

[18:51] <moritz> r: say roundrobin(<a b c>; <d e>; <f g h i>)

[18:51] <p6eval> rakudo abb8f3: OUTPUT«a d f b e g c h i␤»

[18:51] <sorear> std: say(label1: say 1; say 2)

[18:51] <p6eval> std 8632387: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared routine:␤ 'label1' used at line 1␤Check failed␤FAILED 00:00 42m␤»

[18:51] <TimToady> ==SORRY!== A diakopterism has been discovered at line 42; please seek a bomb shelter at your earliest convenience.

[18:51] <sorear> std: say[label1: say 1; say 2]

[18:51] <p6eval> std 8632387: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of bare 'say'; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument at /tmp/RIf5LyAuDt line 1:␤------> [32msay[33m⏏[31m[label1: say 1; say 2][0m␤Check failed␤FAILED 00:00 41m␤»…

[18:51] * geekosaur needs to figure out how to get x11-xchat to display higher unicode...

[18:51] <sorear> std: die[label1: say 1; say 2]

[18:51] <p6eval> std 8632387: OUTPUT«ok 00:00 41m␤»

[18:51] <colomon> TimToady++

[18:52] <geekosaur> (I did manage to get it to do the ANSI escapes... makes std and niecza errors more comprehensible)

[18:52] <sorear> do you have a decision procedure for diakopterisms

[18:53] <TimToady> well, first step would be to translate "Confused" to that, but it wouldn't help in this case...

[18:54] <diakopter> niecza: 2[; 5[5]]

[18:54] <p6eval> niecza v17-4-ge5b869e: OUTPUT«Use of uninitialized value in numeric context␤  at /home/p6eval/niecza/lib/CORE.setting line 1226 (warn @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 262 (Any.Numeric @ 6) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.se…

[18:54] <TimToady> diakopter: but yes, an arglist is not a statement or sequence of statements

[18:55] <diakopter> k

[18:57] <TimToady> what would foo(1,2,3 if $x) mean anyway?

[18:58] <TimToady> same kinda issue

[18:58] *** birdwindupbird joined
[18:58] <masak> az5112: no, gender assignment doesn't have to have human intent behind it in Google Translate. it's all statistical translation based on large corpora of text. so if there's a lot of "my dear <female name>", maybe the algorithms catch on and think that's a rule.

[18:58] <masak> az5112: there are funny cases of this. en fr "New York"? translating to "Paris" at some point, for example.

[18:58] <masak> phenny: en fr "New York"?

[18:58] <phenny> masak: "New York" (en to fr, translate.google.com)

[18:59] <masak> now it gets it right :)

[18:59] <masak> phenny: en sv "mockingbird"?

[18:59] <phenny> masak: "glassbil" (en to sv, translate.google.com)

[18:59] <tadzik> phenny: en pl "Homer Simpson"?

[18:59] <phenny> tadzik: "Homer Simpson" (en to pl, translate.google.com)

[18:59] <masak> *lol*

[18:59] <arnsholt> Glassbil?!

[18:59] <masak> that word in Swedish means "ice cream van".

[18:59] <masak> how in the...?

[18:59] * [Coke] hopes masak has seen http://translationparty.com/

[19:00] <tadzik> . o O ( to kill an ice cream van )

[19:00] *** cogno joined
[19:00] <masak> [Coke]: ooh. no, I hadn't.

[19:01] <[Coke]> to kill an ice cream van -> translation party -> To kill the ice cream fans

[19:01] <masak> :P

[19:01] <tadzik> Lasagna... working on my laptop, eat at the same time!

[19:01] <tadzik> eat laptop?!?!?

[19:02] <arnsholt> masak: But yes, Google translate is all based on statistics

[19:03] <tadzik> all? So it reads webpages in two languages and compares them?

[19:03] <moritz> basically, yes

[19:03] <tadzik> amazing

[19:04] <moritz> though it's much more sophisticated, of course :-)

[19:04] * masak gets off this train, onto a bus, to eventually end up on another train. exciting!

[19:04] <[Coke]> urk. why can I not select the text at the top block in perl6.org?

[19:04] <tadzik> naturally

[19:04] <tadzik> [Coke]: I can

[19:04] <moritz> [Coke]: dunno. I can.

[19:04] <[Coke]> ah. I can as well, but it is not showing as hilighted.

[19:05] <[Coke]> bad css. no donut.

[19:05] <cogno> I am trying to backlog. What is the okness proposal?

[19:05] *** wolfman2000 joined
[19:05] <moritz> cogno: it's a proposal by TimToady to overhaul the types that can indicate success and failure

[19:06] * [Coke] translation party's the first sentence of perl6.org and gets:

[19:06] <[Coke]> Hi, my name is Camelia. I'm the spokesbug for Perl 5, Perl 6, sexy sister.

[19:06] <moritz> cogno: for example False, Failure, Nil and a fals Match object can express some kind of failed test/check

[19:06] <tadzik> :)

[19:07] <moritz> cogno: and TimToady wants to change that... somehow. The details were a bit scary to me, but I think I agree now with the overall goals

[19:07] *** az5112 left
[19:08] <moritz> there was a gist which summarized it all.. does anybody have the URL handy?

[19:11] <cogno> I suppose that a smart compiler will eventually able weed out the uneeded part of the overloaded value. So if it makes life easier for the programmer I am all for that kind of thins

[19:12] <cogno> Oops i am a loosy typist, but with the iPad it gets even worse.

[19:13] <TimToady> https://gist.github.com/1828667

[19:15] <cogno> Thx

[19:15] <TimToady> getting a bit of "normal" migraine, so better go sleep it off... &

[19:17] *** KyleHa joined
[19:17] <KyleHa> Hi #perl6.

[19:17] <tadzik> welcome back

[19:18] <KyleHa> Thank you.

[19:18] <moritz> \o KyleHa 

[19:19] <KyleHa> Moritz! Question for you... I see now that spectest .t files have numeric plans everywhere and 'done;' at the end. Did "plan *" and "done_testing;" have a problem?

[19:20] <sorear> KyleHa: yes

[19:20] <sorear> KyleHa: we need to be able to count tests without running them

[19:20] <moritz> KyleHa: the main "problem" was that people wanted to know how many tests we had, and had a hard time figuring it out

[19:21] <KyleHa> Spending a few minutes running the suite was not a good solution?

[19:21] <tadzik> "few minutes", hehe

[19:21] *** grondilu joined
[19:21] <sorear> 1. the entire suite cannot be run

[19:21] <moritz> KyleHa: so, not my decision, but I relented to the majority

[19:21] <sorear> 2. I think you mean a few hours

[19:21] *** cogno left
[19:21] <moritz> depens very much on the machine

[19:21] *** tyatpi left
[19:21] * jnthn spectets in 3-4 minutes :)

[19:22] <moritz> it's more like 5-10 minutes here on 4 cores

[19:22] <KyleHa> I think it was less than ten minutes the last time I timed it, yesterday.

[19:22] <sorear> good for you

[19:22] <flussence> on my netbook it's most definitely >1h

[19:23] <KyleHa> Do we still need "done;" if there's now a numeric plan?

[19:23] <moritz> no

[19:23] <moritz> just a left-over that wasn't removed

[19:23] <KyleHa> OK.

[19:24] *** fglock left
[19:25] <KyleHa> WOW, roast/TODO hasn't changed since I did some cursory update in 2011.

[19:25] <moritz> it's probably very out of date now

[19:30] *** libertyprime left
[19:30] *** libertyprime joined
[19:32] *** havenn left
[19:38] *** mdcw` left
[19:39] *** cogno joined
[19:40] <dalek> roast: 5b9b4c7 | (Solomon Foster)++ | S12-methods/lvalue.t:

[19:40] <dalek> roast: Unfudge tests that now work in Niecza.

[19:40] <dalek> roast: review: https://github.com/perl6/roast/commit/5b9b4c7424

[19:43] *** penglin joined
[19:43] *** penglin left
[19:46] *** cogno left
[19:46] *** mucker left
[20:03] <dalek> tablets: 612a102 | (Herbert Breunung)++ | docs/appendix-g-glossary.txt:

[20:03] <dalek> tablets: explaining the term role, please check it

[20:03] <dalek> tablets: review: https://github.com/perl6/tablets/commit/612a102bc5

[20:05] *** NamelessTee left
[20:06] *** NamelessTee joined
[20:10] *** grondilu left
[20:11] <colomon> perl6: say 'abc'.split('').perl

[20:11] <p6eval> pugs: OUTPUT«("a", "b", "c")␤»

[20:11] <p6eval> ..niecza v17-4-ge5b869e: OUTPUT«["", "a", "b", "c", ""].list␤»

[20:11] <p6eval> ..rakudo abb8f3: OUTPUT«("a", "b", "c").list␤»

[20:12] <colomon> spectests seem to now claim all these answers are wrong?

[20:12] <jnthn> wat

[20:12] <moritz> well

[20:12] <jnthn> The pugs and Rakudo ones look reasonable.

[20:13] <moritz> I think we have special-cased that in rakudo

[20:13] <KyleHa> I wrote that test earlier today.

[20:13] <moritz> so, what is expected now

[20:14] <KyleHa> It was based on a ticket with a discussion in which TimToady had said "xyz".split('') should be ("", "x", "y", "z").

[20:14] <moritz> there are more leading than trailing empty strings on a string? :-)

[20:15] <PerlJam> trailing are elided, right?

[20:15] <moritz> no

[20:15] <moritz> anyway

[20:15] <moritz> rakudo implements split with strings differently than split with regexes

[20:15] <moritz> (ie uses index)

[20:16] <moritz> so the only possible zero-width match there is ''

[20:16] <moritz> so we special-case that anyway

[20:17] <moritz> we can make it do whatever we want, but I don't see how ('', 'x', 'y', 'z') makes any more sense than any other option

[20:18] <KyleHa> Here's the discussion I saw:  https://rt.perl.org/rt3/Ticket/Display.html?id=112868

[20:20] <moritz> KyleHa: I see. I'm still not convinced. Maybe I'll be convinced tomorrow :-)

[20:20] * moritz -> sleep

[20:20] <KyleHa> Rules were made to be rewritten.

[20:20] <PerlJam> I could argue that there are an infinite number of emptry strings between each character in a string too  ;)

[20:21] <jnthn> moritz: Think I've got the roles pre-comp thing fixed locally. :)

[20:21] <KyleHa> I hope we'd do that split lazily!

[20:22] <PerlJam> I could also argue that split('') should elicit a warning and function as if it were split(/''/)

[20:23] <dalek> nqp: 3ab8ab1 | jnthn++ | / (2 files):

[20:23] <dalek> nqp: Add an OwnedResizablePMCArray, along the same lines as OwnedHash.

[20:23] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3ab8ab1f00

[20:23] <dalek> nqp: 5308279 | jnthn++ | src/6model/serialization.c:

[20:23] <dalek> nqp: Deserialize RPAs with their object ownership. This seems to fix the leak that saw parametric roles and pre-comp sometimes interact badly.

[20:23] <dalek> nqp: review: https://github.com/perl6/nqp/commit/530827945a

[20:29] <colomon> KyleHa: just reading that link you posted again, it's not clear to me what TimToady was trying to say.

[20:30] <colomon> "arguably niecza is more consistent with how /''/ would split"

[20:30] <colomon> perl6: say 'abc'.split(/''/).perl

[20:30] <p6eval> niecza v17-4-ge5b869e: OUTPUT«["", "a", "b", "c", ""].list␤»

[20:30] <p6eval> ..rakudo abb8f3: OUTPUT«("", "a", "b", "c", "").list␤»

[20:30] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20120203/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** Can't locate P…

[20:31] *** birdwindupbird left
[20:31] * PerlJam wishes there was a way to say "perl6: ..." and only have the non-error ones output

[20:32] <colomon> PerlJam: but errors are sometimes important too...

[20:32] <PerlJam> colomon: sure.  I'm wishing for more, not less

[20:32] <colomon> PerlJam: oh, gotcha.  perl6filtered: or something

[20:32] <PerlJam>  aye

[20:33] <KyleHa> I think TimToady was saying that split('') should do the same thing as split(/''/) does, which produces a leading empty string.

[20:33] <PerlJam> maybe "perl6!:" 

[20:33] <PerlJam> KyleHa: leading and trailing, yes?

[20:34] <PerlJam> perl6: say "abc".split(/''/);

[20:34] <p6eval> rakudo abb8f3, niecza v17-4-ge5b869e: OUTPUT« a b c ␤»

[20:34] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20120203/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** Can't locate P…

[20:34] <KyleHa> Oh. Duh. How did I not see the trailing empty string ten times?

[20:34] <PerlJam> perl6: say "abc".split(/''/).perl;

[20:34] <p6eval> niecza v17-4-ge5b869e: OUTPUT«["", "a", "b", "c", ""].list␤»

[20:34] <p6eval> ..rakudo abb8f3: OUTPUT«("", "a", "b", "c", "").list␤»

[20:34] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20120203/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** Can't locate P…

[20:34] <dalek> rakudo/nom: d1f5db2 | jnthn++ | / (2 files):

[20:34] <dalek> rakudo/nom: Bump NQP_REVISION to get bs fixes; a small tweak in Rakudo to account for the change too.

[20:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d1f5db2fa3

[20:34] *** skids left
[20:35] <slavik1> doesn't that say that there is an assumed "" in the beginning of every string?

[20:35] <KyleHa> I'll "fix" the test in a few minutes.

[20:37] <PerlJam> slavik1: It's all somewhat arbitrary if you ask me.  Why do we care about certain zero-width assertions in regex, but not others?  Why are ^ and $ so important?

[20:37] <PerlJam> Why not ^^ and $$ too?

[20:37] <dalek> rakudo/nom: 570f2bb | jnthn++ | docs/ChangeLog:

[20:37] <dalek> rakudo/nom: Few ChangeLog updates.

[20:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/570f2bb599

[20:37] <PerlJam> why not <ww> or <wb>? 

[20:42] <dalek> rakudo/nom: 7d33ee1 | kboga++ | / (2 files):

[20:42] <dalek> rakudo/nom: Adds a slightly adjusted but mostly copy pasted version of ng's pack & unpack

[20:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7d33ee1c50

[20:42] <dalek> rakudo/nom: f2e5c38 | jonathan++ | / (2 files):

[20:42] <dalek> rakudo/nom: Merge pull request #66 from kboga/ng-pack-unpack

[20:42] <dalek> rakudo/nom: 

[20:42] <dalek> rakudo/nom: Adds a slightly adjusted but mostly copy pasted version of ng's pack & unpack.

[20:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f2e5c38f87

[20:42] *** sudokode joined
[20:42] *** mdupont joined
[20:44] <dalek> roast: 1641f44 | (Kyle Hasselbacher)++ | S04-phasers/end.t:

[20:44] <dalek> roast: [S04-phasers/end.t] Test for RT 112408 -- Can use END as a bareword hash key

[20:44] <dalek> roast: review: https://github.com/perl6/roast/commit/1641f444b2

[20:44] <dalek> roast: 4e65cd6 | (Kyle Hasselbacher)++ | S12-methods/what.t:

[20:44] <dalek> roast: [S12-methods/what.t] Test for RT 112364 -- Parse Foo:: correctly

[20:44] <dalek> roast: review: https://github.com/perl6/roast/commit/4e65cd6130

[20:44] <dalek> roast: fead744 | (Kyle Hasselbacher)++ | S32-str/split-simple.t:

[20:44] <dalek> roast: [split-simple.t] Change test for RT 112868

[20:44] <dalek> roast: review: https://github.com/perl6/roast/commit/fead744ef7

[20:44] <dalek> roast: 01fd0e8 | (Kyle Hasselbacher)++ | S12-methods/lvalue.t:

[20:44] <dalek> roast: Merge branch 'master' of github.com:perl6/roast

[20:44] <dalek> roast: review: https://github.com/perl6/roast/commit/01fd0e8843

[20:45] *** fibo joined
[20:50] *** mathw joined
[20:50] *** kaare_ left
[20:51] <dalek> rakudo/nom: eb05804 | jnthn++ | docs/ChangeLog:

[20:51] <dalek> rakudo/nom: Note pack and unpack in ChangeLog.

[20:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eb0580491d

[20:53] *** Woodi joined
[20:54] <Woodi> hallo everyone

[20:54] *** immortal joined
[20:54] *** immortal left
[20:54] *** immortal joined
[20:55] <slavik1> PerlJam: I would say that ^ and $ anchors are special case for regex, since that is the notation for "begins with" and "ends with" vs. contains

[20:55] *** erkan left
[20:55] *** immortal left
[20:57] <geekosaur> there's the whole huffmanization thimng, ^ and $ are extremely common

[21:03] *** mikemol left
[21:06] <PerlJam> slavik1: so why not ^^ and $$? Those are "begins with" and "ends with" for a line.

[21:07] <slavik1> PerlJam: are they the same for Perl5? this might be why I am confused (I haven't played with Perl6 much since rakudo* came out).

[21:10] <PerlJam> r: say "".^methods.map(*.name);

[21:10] <p6eval> rakudo abb8f3: OUTPUT«BUILD Int Num chomp chop substr pred succ ll-match match-list ords lines samecase samespace trim-leading trim-trailing trim words encode capitalize trans indent WHICH Bool Str ACCEPTS Numeric gist perl comb match subst split␤»

[21:11] <PerlJam> r: say rx/''/.^methods.map(*.name);

[21:11] <p6eval> rakudo abb8f3: OUTPUT«Unmarshallable foreign language value passed for parameter '$x0'␤  in block <anon> at /tmp/XI_iIC5rVM:1␤␤»

[21:11] <PerlJam> That's not quite what I expected

[21:12] <PerlJam> r: say rx//.^methods.map(*.name);

[21:12] <p6eval> rakudo abb8f3: OUTPUT«===SORRY!===␤Unrecognized regex metacharacter (must be quoted to match literally) at line 1, near ".^methods."␤»

[21:12] <PerlJam> I guess the rx/''/ was split paranoia on my part

[21:13] <PerlJam> r: grammar X { }; say X.^methods(:all).map(*.name);

[21:13] <p6eval> rakudo abb8f3: OUTPUT«Method 'name' not found for invocant of class 'NQPRoutine'␤  in block <anon> at /tmp/NVxKNGVJ8g:1␤␤»

[21:16] <PerlJam> So ... classes are fully Perl6ified, but grammars aren't I guess?  They still leak their implementation.

[21:16] <PerlJam> n: say rx//.^methods.map(*.name);

[21:16] <p6eval> niecza v17-4-ge5b869e: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Null pattern not allowed at /tmp/aInKYKf0rS line 1:␤------> [32msay rx/[33m⏏[31m/.^methods.map(*.name);[0m␤␤Parse failed␤␤»

[21:16] <PerlJam> n: grammar X { }; say X.^methods(:all).map(*.name);

[21:16] <p6eval> niecza v17-4-ge5b869e: OUTPUT«Unhandled exception: Unable to resolve method methods in class ClassHOW␤  at /tmp/s_QYhQBmzt line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3842 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3843 (module-CORE @ 65) ␤  at …

[21:16] <jnthn> PerlJam: It's not grammars at issue. It's code objects generally, I think.

[21:16] *** KyleHa left
[21:16] <PerlJam> ok

[21:17] <jnthn> Welcome to the exciting world of circularities.

[21:18] <PerlJam> I had an idea to annotate strings with which grammar rules would match where, but if I can't get a list of rules, that makes it slightly more difficult.

[21:19] <jnthn> Why can't you get a list of rules?

[21:19] <PerlJam> I don't know how I guess.

[21:19] * masak home

[21:19] <jnthn> r: grammar Foo { token TOP { <foo> }; token foo { xxx } }; Foo.^methods(:local)>>.say

[21:19] <p6eval> rakudo eb0580: OUTPUT«foo␤TOP␤»

[21:20] <jnthn> shark, masak 

[21:20] <masak> orca!

[21:21] * jnthn whales at the pun

[21:21] <PerlJam> this obsession with sea creatures makes little sense to me too

[21:21] <jnthn> PerlJam: I is a little bit fishy...

[21:21] <jnthn> er, It is... :)

[21:22] <diakopter> I won't carp about it

[21:22] <masak> jnthn: neither the whale nor the orca are actually... oh, fuggedaboutit...

[21:22] <PerlJam> I guess both orca and sharks are in the same phylum, so ... maybe there's some sense to be had.

[21:22] <masak> heh.

[21:23] <masak> PerlJam: your mom is in the same phylum!

[21:23] <PerlJam> masak: as is yours!

[21:23] <masak> :P

[21:23] <PerlJam> one good fish deserves another

[21:23] <masak> srsly toothless "your mom" insults, part 18.

[21:24] * masak .oO( sushi: a dish best served cold )

[21:26] <diakopter> you can't bait me to join the puns

[21:27] <masak> hook, line, and sinker.

[21:27] *** adu left
[21:28] <PerlJam> diakopter: #perl6 casts a wide net.

[21:29] <PerlJam> (though, if we were doing word association, "hook, line, and sinker." makes me immediatly think of "lock, stock, and barrel.")

[21:30] <PerlJam> though it doesn't improve my spelling.

[21:30] <diakopter> If this were #csharp I could make a pun on sealed

[21:31] <masak> car repair guy: "looks like you've blown a seal" -- car owner: "hey, leave my personal life out of this!"

[21:32] <diakopter> you otter keep that one to yourself

[21:32] <pmichaud> jnthn: ping

[21:33] <masak> diakopter: I'll keep things above the waterline from now on.

[21:33] <jnthn> pmichaud: pong

[21:34] *** alvis joined
[21:34] <masak> .u 乒乓

[21:34] <phenny> U+4E52 CJK UNIFIED IDEOGRAPH-4E52 (乒)

[21:34] <phenny> U+4E53 CJK UNIFIED IDEOGRAPH-4E53 (乓)

[21:34] <pmichaud> got your email -- I still plan to have mark commit done before release (which I know is Thursday)

[21:35] <spider-mario> .u ௹

[21:35] <phenny> U+0BF9 TAMIL RUPEE SIGN (௹)

[21:35] <PerlJam> masak: just tread softly.

[21:35] <spider-mario> .u ৳

[21:35] <phenny> U+09F3 BENGALI RUPEE SIGN (৳)

[21:35] <pmichaud> things here have been more-than-the-usual busy-ness... but nothing too problematic

[21:35] <jnthn> pmichaud: ooh :)

[21:35] <jnthn> pmichaud: OK :)

[21:35] <diakopter> masak: I keep herring the puns wrongly

[21:36] <masak> PerlJam: and carry a big floatation device? :)

[21:36] <PerlJam> :)

[21:37] <masak> diakopter: are you familiar with http://www.songlyrics.com/kip-addotta/wet-dream-lyrics/ ?

[21:38] <diakopter> no

[21:38] <masak> feels relevant.

[21:38] <diakopter> haha

[21:39] <masak> :)

[21:45] *** bruges_ joined
[21:46] *** erkan joined
[21:47] *** bruges left
[21:47] <pmichaud> "Wet Dream" is an awesome song :)

[21:49] *** spider-mario left
[21:57] <diakopter> in a coffee shop, whose rights prevail, the person who has a medically necessary dog, or the person with dog allergies?

[21:58] *** fibo left
[21:58] <diakopter> the manager is negotiating with them now.

[21:58] *** derrazo joined
[21:58] <diakopter> that's California for you.

[22:01] *** PacoAir left
[22:05] <tadzik> oh, precomp fixes

[22:09] <masak> diakopter: seems a Solomonian problem. just cut the dog in half!

[22:11] <diakopter> the person with the allergies won; seems the no-pets rule of the coffee shop can apply if the person is not waiting in line or for a drink.

[22:12] <masak> 'night, #perl6

[22:12] <tadzik> 'night

[22:12] <slavik1> diakopter: in other words, the dude who has not given his money away (yet) has right of way everywhere

[22:12] <slavik1> night

[22:13] <masak> dream of medically necessary allergic dogs waiting in line for a drink.

[22:13] *** NamelessTee left
[22:13] <slavik1> ...

[22:15] <diakopter> well, technically Starbucks reserves the right to refuse service to anyone, but it also has a corporate image/goodwill to uphold.

[22:17] <slavik1> as in "don't do evil"?

[22:17] <diakopter> anyone, *with some exceptions*.

[22:18] <diakopter> http://www.legalzoom.com/us-law/equal-rights/right-refuse-service

[22:20] *** jferrero left
[22:20] *** am0c joined
[22:21] <geekosaur> as in "getting a reputation as being assholes to special needs customers can hurt their business"

[22:24] *** BlueT_ left
[22:24] *** BlueT_ joined
[22:25] *** skids joined
[22:30] *** derrazo left
[22:37] *** havenn joined
[22:40] *** jaldhar left
[22:42] *** sergot left
[22:49] * jnthn -> sleep o/

[22:50] *** cognominal left
[22:51] *** s1n left
[22:52] *** cognominal joined
[22:56] *** whiteknight joined
[22:56] *** whiteknight is now known as Guest60472

[22:56] *** icwiener left
[22:57] *** jaldhar joined
[22:57] *** thelazydeveloper joined
[23:00] *** integral left
[23:06] *** s1n joined
[23:09] *** integral joined
[23:09] *** integral left
[23:09] *** integral joined
[23:09] <cognominal> about the okness gist. how do one compare a gist and a fork of that gist?

[23:11] *** lichtkind left
[23:12] <[Coke]> cognominal: check them both out and do a diff is the low tech way, I guess.

[23:12] *** s1n left
[23:17] <cognominal> :(

[23:17] *** pmurias left
[23:19] *** derrazo joined
[23:19] *** derrazo left
[23:19] <dalek> tablets: 49ac38e | (Herbert Breunung)++ | docs/appendix-g-glossary.txt:

[23:19] <dalek> tablets: pilish role entry and add new

[23:19] <dalek> tablets: review: https://github.com/perl6/tablets/commit/49ac38ee8a

[23:22] <geekosaur> does seem like something github *ought* to provide, but I see no way to do it

[23:23] <geekosaur> (also, the idea looks quite sane to me.  certainly no scarier than smartmatches already are...)

[23:26] *** s1n joined
[23:27] <am0c> cognominal, add forked gist remote, and pull to another branch. finally, diff two branches. (I guess)

[23:27] *** mikemol joined
[23:28] <cognominal> thx. I hoped that github would have helped here

[23:29] <cognominal> github has some weird blind spots.

[23:43] *** s1n left
[23:50] *** baest left
[23:51] *** lestrrat left
[23:52] *** cognominal left
[23:52] *** lestrrat joined
[23:53] *** cognominal joined
[23:55] *** baest joined
[23:58] *** s1n joined
[23:59] *** skipper joined
