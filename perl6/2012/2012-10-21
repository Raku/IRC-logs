[00:01] *** simcop2387 left
[00:03] <RandalSchwartz> well - there's not enough time to do everything I want, sadly

[00:03] <japhb> RandalSchwartz, [Coke]: This is known, though I don't know if it's been rakudobug'ed.

[00:03] *** simcop2387 joined
[00:03] <RandalSchwartz> ahh!

[00:03] <RandalSchwartz> hey japhy

[00:03] <japhb> RandalSchwartz, different guy.  :-)

[00:03] <RandalSchwartz> oh - that's not japhy

[00:03] <RandalSchwartz> nick collision in first four chars!

[00:03] <japhb> Anyway, the problem is:

[00:03] <japhb> When Rakudo had to revert back from Parrot 4.7 or 4.8 back to 4.4, we discovered that Rakudo's build process

[00:04] <japhb> does not properly deal with a rewind of the required Parrot version.

[00:04] <japhb> Best I've seen is: git clean -dxf; rm -rf parrot nqp installl

[00:04] <japhb> er, s/l$//;

[00:05] <[Coke]> ah. so maybe my comment about that not getting removed was correct.

[00:05] <japhb> After that, the normal build process should work fine.

[00:05] <japhb> [Coke], yep, pretty much.

[00:05] <RandalSchwartz> japhb - didn't

[00:05] <RandalSchwartz> rm -rf parrot, then that file got deleted by something early in the cycle

[00:05] <RandalSchwartz> so I had to go in and reset hard

[00:05] <RandalSchwartz> then it worked

[00:06] <RandalSchwartz> so something in the "fetch parrot" part of rakudo is breaking that file

[00:06] <RandalSchwartz> at least for me

[00:06] <japhb> Did you do all the stuff I had above? In particular, there was the nuke of the nqp directory as well as the parrot one.

[00:06] <japhb> I don't know the details of what is broken, but that pair of commands fixed it in all the places I saw it.

[00:06] <RandalSchwartz> I did git clean -dfx and that resets it back to the checkout

[00:07] <RandalSchwartz> unless nqp is in the checkout, then it was gone

[00:07] * japhb shrugs in the face of illogical reality

[00:08] <japhb> You are way more than welcome to investigate the real cause of the fail and fix it.  ;-)

[00:08] <RandalSchwartz> yeay!  perl6 fires up

[00:08] <[Coke]> RandalSchwartz: I would just double check next time that the -xdf really did remove parrot.

[00:08] <RandalSchwartz> it did.  I saw it say that. :)

[00:08] <RandalSchwartz> oh - but maybe it said that but didn't do it?  never seen that before.

[00:08] <[Coke]> ugh I'm now at 41% of downloading parrot from my initial attempt to rebuild for you. :)

[00:08] <RandalSchwartz> but now I have an updated "live" tag, so I'm happy

[00:09] <RandalSchwartz> you should come over here... lots of bandwidth

[00:09] <[Coke]> I'm in Ballston Spa NY just now. You?

[00:09] <RandalSchwartz> a bit aways from that :)

[00:10] <[Coke]> next time for sure. :)

[00:11] <[Coke]> getting 156 KiB/s to github!

[00:11] <RandalSchwartz> woo!

[00:12] <japhb> Ugh.  Big long error trace from Parrot, looks like possibly GC corruption.  I did not feel like golfing GC problems tonight ...  :-/

[00:12] <diakopter> r: X[X]

[00:12] <p6eval> rakudo b86628: OUTPUT¬´===SORRY!===‚ê§Method 'parameterize' not found for invocant of class 'Perl6::Metamodel::PackageHOW'‚ê§¬ª

[00:13] <diakopter> phenny: tell masak  r: X[X]  # LTA error imho

[00:13] <phenny> diakopter: I'll pass that on when masak is around.

[00:14] <diakopter> phenny: tell moritz disect_longname in rakudo should be dissect_longname :)

[00:14] <phenny> diakopter: I'll pass that on when moritz is around.

[00:14] *** kst` joined
[00:16] *** kst left
[00:16] <diakopter> phenny: tell masak same for  r: sub foo(X of X) { }

[00:16] <phenny> diakopter: I'll pass that on when masak is around.

[00:17] * RandalSchwartz wanders off

[00:18] *** RandalSchwartz left
[00:24] <diakopter> phenny: tell masak vivify fail for scalar; work with @ sigil thoughr:  my Array of Associative $a; $a.push({});

[00:24] <phenny> diakopter: I'll pass that on when masak is around.

[00:27] <[Coke]> anyone know the rakudo command line to build a parrot amenable to gdb'ing off the top of their head?

[00:27] <[Coke]> parrot&perl6

[00:28] <diakopter> phenny: tell masak hash allowed in array? r: say {} ~~ Positional; my Array of Positional @a; @a.push({}); say @a.perl

[00:28] <phenny> diakopter: I'll pass that on when masak is around.

[00:29] <[Coke]> (i'm getting function names, but no args or line #s)

[00:40] <[Coke]> got it.

[00:41] <[Coke]> bug: reconfiguring rakudo with new parrot build options doesn't force a parrot rebuild.

[00:48] *** fgomez left
[00:50] *** xinming left
[00:51] *** xinming joined
[01:01] *** fgomez joined
[01:05] *** PacoAir left
[01:13] <[Coke]> phenny: ask TimToady to comment on https://rt.perl.org/rt3/Ticket/Display.html?id=63778 (marked as a spec ticket)

[01:13] <phenny> [Coke]: I'll pass that on when TimToady is around.

[01:18] *** CharellKing joined
[01:21] <[Coke]> Can someone on openbsd double check https://rt.perl.org/rt3/Ticket/Display.html?id=85750 ?

[01:31] *** colomon joined
[01:31] <colomon> o/

[01:35] <sorear> colomon! \o/

[01:35] <colomon> o\

[01:36] <colomon> sorear: how goes it?

[01:41] <dalek> roast: 970a119 | coke++ | S01-perl-5-integration/basic.t:

[01:41] <dalek> roast: Add test for RT #77596, fudge for rakudo

[01:41] <dalek> roast: review: https://github.com/perl6/roast/commit/970a119d0c

[01:42] <sorear> colomon: good

[01:43] <dalek> rakudo/nom: e765c99 | coke++ | t/spectest.data:

[01:43] <dalek> rakudo/nom: Run test for RT #77596

[01:43] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e765c99f4c

[01:43] <colomon> just realized I'm way behind the times.  you're back at school now?

[01:43] *** MikeFair__ left
[01:44] *** MikeFair_ joined
[01:50] <gfldex> it is

[01:50] <gfldex> nvm

[01:54] *** bro_grammer joined
[01:56] *** hash_table left
[01:58] <sorear> colomon: no, taking a break from that.  I has dayjob now

[01:59] *** hash_table joined
[02:02] *** sizz joined
[02:02] *** sizz_ left
[02:02] *** bro_grammer left
[02:03] *** Chillance left
[02:04] <grondilu> rn: my @a = ^4; for @a -> $l is rw { @a¬ª++; say $l };

[02:05] <p6eval> rakudo b86628, niecza v22-14-g136ddcf: OUTPUT¬´1‚ê§3‚ê§5‚ê§7‚ê§¬ª

[02:06] <grondilu> rn: for my @a = ^4 -> $l is rw { @a¬ª++; say $l++ };

[02:06] <p6eval> rakudo b86628, niecza v22-14-g136ddcf: OUTPUT¬´1‚ê§3‚ê§5‚ê§7‚ê§¬ª

[02:09] <colomon> sorear: ah, hope that is going well.

[02:19] *** armitage81 left
[02:26] *** orafu left
[02:26] *** orafu joined
[02:41] *** kst`` joined
[02:41] <japhb> loop-over-run crash golfed!

[02:42] <japhb> See https://gist.github.com/3925501 and comments

[02:42] <japhb> Rakudobug filed.

[02:42] *** kst` left
[02:53] *** kst`` is now known as kst

[02:57] <CharellKing> Hi everyone

[02:57] <CharellKing> maybe you are at night

[02:58] <CharellKing> now we are daytime

[03:01] <sorear> hello CharellKing

[03:01] <sorear> we got folks all over

[03:02] <sorear> it's evening for me, early morning for jnthn et al

[03:06] <CharellKing> yeah

[03:06] <CharellKing> you get up so early

[03:06] <CharellKing> which country are you from 

[03:09] <CharellKing> Maybe sleep early is good for you

[03:11] *** jaldhar joined
[03:19] *** xinming left
[03:19] *** bloonix joined
[03:31] *** cognominal left
[03:37] *** thou joined
[03:38] *** [particle] left
[03:40] <raiph> phenny, tell masak r: say "@a[]" # Null PMC access. New bug?

[03:40] <phenny> raiph: I'll pass that on when masak is around.

[03:41] *** cognominal joined
[03:44] *** Targen left
[03:49] *** Targen joined
[03:50] *** bloonix left
[03:55] *** raiph left
[04:08] *** xinming joined
[04:30] *** telex left
[04:34] *** Entonian joined
[04:36] *** telex joined
[04:36] *** Entonian left
[04:51] <diakopter> rn: say [][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]

[04:51] <p6eval> rakudo e765c9, niecza v22-14-g136ddcf: OUTPUT¬´‚ê§¬ª

[04:54] <diakopter> rn: say []{}{}*^[]

[04:54] <p6eval> rakudo e765c9: OUTPUT¬´0‚ê§¬ª

[04:54] <p6eval> ..niecza v22-14-g136ddcf: OUTPUT¬´‚ê§¬ª

[05:20] <cognominal> rn: | 1

[05:20] <p6eval> rakudo e765c9: OUTPUT¬´===SORRY!===‚ê§CHECK FAILED:‚ê§Undefined routine '&prefix:<|>' called (line 1)‚ê§¬ª

[05:20] <p6eval> ..niecza v22-14-g136ddcf: OUTPUT¬´Unhandled exception: Unable to resolve method Capture in type Int‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 3287 (prefix:<|> @ 4) ‚ê§  at /tmp/NsEVCEIuwM line 1 (mainline @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4215 (ANON @ 3) ‚ê§  at /home/p‚Ä¶

[05:26] <cognominal> rn:      sub compare (|args, Num $x, Num $y --> Bool) { ... }

[05:26] <p6eval> niecza v22-14-g136ddcf: OUTPUT¬´Potential difficulties:‚ê§  $x is declared but not used at /tmp/A7d5EszBEj line 1:‚ê§------> [32msub compare (|args, Num [33m‚èè[31m$x, Num $y --> Bool) { ... }[0m‚ê§  $y is declared but not used at /tmp/A7d5EszBEj line 1:‚ê§------> [32msub compare (|args, Num ‚Ä¶

[05:26] <p6eval> ..rakudo e765c9: OUTPUT¬´===SORRY!===‚ê§Cannot put required parameter $x after variadic parameters‚ê§at /tmp/0P6c7R4cU2:1‚ê§¬ª

[05:40] <cognominal> rn: my Int \x = 6 ; my \y = 4;  sub foo (\x, \y) { x = y; };   foo x, y ; 

[05:40] <p6eval> niecza v22-14-g136ddcf: OUTPUT¬´Unhandled exception: Writing to readonly scalar‚ê§  at /tmp/kJpyMqje4a line 1 (foo @ 3) ‚ê§  at /tmp/kJpyMqje4a line 1 (mainline @ 6) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4215 (ANON @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 4216 (module-C‚Ä¶

[05:40] <p6eval> ..rakudo e765c9: OUTPUT¬´Cannot assign to a non-container‚ê§  in sub foo at /tmp/veIlpp_CCP:1‚ê§  in block  at /tmp/veIlpp_CCP:1‚ê§‚ê§¬ª

[05:48] *** hash_table left
[06:15] <dalek> perl6-bench: 91def7b | (Geoffrey Broadwell)++ | components.json:

[06:15] <dalek> perl6-bench: Add regex for finding release tags to components.json

[06:15] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/91def7b174

[06:15] <dalek> perl6-bench: f6ce8a9 | (Geoffrey Broadwell)++ | bench:

[06:15] <dalek> perl6-bench: Refactor handling of COMPONENTS_DIR and checking whether setup has been done

[06:15] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/f6ce8a9bc9

[06:15] <dalek> perl6-bench: 21065ad | (Geoffrey Broadwell)++ | bench:

[06:15] <dalek> perl6-bench: Add extract-releases command; start filling in build command

[06:15] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/21065ad2ef

[06:18] *** sizz left
[06:18] *** sizz joined
[06:21] *** kaare_ joined
[06:23] *** VXZ joined
[06:24] *** cognominal left
[06:26] *** sizz left
[06:26] *** sizz joined
[06:30] *** cognominal joined
[06:33] <cognominal> shoud I file a bug for the erros when typing 'my $a' on the rakudo shell? or has that been already done?

[06:34] <moritz> moritz@jacq:~/p6/rakudo>./perl6 

[06:34] <phenny> moritz: 00:14Z <diakopter> tell moritz disect_longname in rakudo should be dissect_longname :)

[06:34] <moritz> my $a> my $a

[06:34] <moritz> Any()

[06:34] <moritz> doesn't look terribly wrong to me

[06:37] <cognominal> moritz: https://gist.github.com/3926154

[06:38] <moritz> that's known and submitted

[06:39] <cognominal> oops

[06:40] <cognominal> sorry that was 'my int $a'

[06:50] *** cognominal left
[06:50] *** cognominal joined
[06:57] *** CharellKing left
[07:10] *** aindilis left
[07:19] *** LordVorp left
[07:21] *** LordVorp joined
[07:36] *** CharellKing joined
[07:36] <CharellKing> HI

[07:40] <sorear> Hello

[07:42] <CharellKing> you are always here

[07:42] <CharellKing> Maybe 24 hours

[07:44] *** azawawi joined
[07:44] <azawawi> hi

[07:45] <azawawi> how do I enable history on perl6 rakudo REPL? i.e. like bash shell being able to go back to previous typed commands.

[07:46] <sorear> install readline, then rebuild rakudo from scratch

[07:46] <sorear> need to make sure parrot/ is deleted before rebuilding

[07:46] *** thou left
[07:46] <sorear> *install readline development files

[07:49] * azawawi installs http://packages.debian.org/search?keywords=libreadline-dev

[07:50] *** mucker joined
[07:52] * azawawi installs libicu-dev and libreadline-dev

[07:53] <azawawi> sorear: thx

[07:53] *** GlitchMr joined
[07:56] <Woodi> allo today

[07:56] <cognominal> nr:  use Test;  my @data = 'a' .. 'z';   my @out  = <a e i o u y>;     @data ==> grep {/<[aeiouy]>/} ==> is($(*), $(@out), 'basic test for $(*)');

[07:56] <p6eval> niecza v22-14-g136ddcf: OUTPUT¬´Unhandled exception: Feed ops NYI‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 1443 (die @ 5) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 3360 (infix:<==>> @ 4) ‚ê§  at /tmp/5vaWsUQADg line 1 (mainline @ 6) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting li‚Ä¶

[07:56] <p6eval> ..rakudo e765c9: OUTPUT¬´Cannot call 'is'; none of these signatures match:‚ê§:(Mu $got, Mu $expected, $desc = { ... })‚ê§‚ê§  in block  at /tmp/ZuGOrbgStY:1‚ê§‚ê§¬ª

[07:58] <Woodi> CharellKing: there is good chance that there is someone here not being afk each hour in the day :) you know, it's like ICQ but better :)

[08:04] *** cognominal left
[08:06] *** jaffa4 joined
[08:06] <jaffa4> hi

[08:07] <Woodi> backlogging last two days make me think that perl6.org don't contain things we working on or wanting to appear. I mean something like projects or infrastructure parts needed to be improved eg. "we want modules.perl6.org rewrited/merged somewhere else"

[08:07] <jaffa4> Can someone tell me how to  push a new element into array in a hash?

[08:07] <Woodi> like: http://trac.parrot.org/parrot

[08:07] <Woodi> o/ jaffa4 

[08:09] <Woodi> jaffa4: so you have hashes as array elements ? 

[08:09] <jaffa4> no arrays as values in a hash.

[08:12] *** cognominal joined
[08:13] <Woodi> rn: my %h;  my @a = (a,b,c); %h{'a'} = @a; push %h{'a'}, 'd'; say %h{'a'};

[08:13] <p6eval> rakudo e765c9: OUTPUT¬´===SORRY!===‚ê§CHECK FAILED:‚ê§Undefined routine '&a' called (line 1)‚ê§Undefined routine '&b' called (line 1)‚ê§Undefined routine '&c' called (line 1)‚ê§¬ª

[08:13] <p6eval> ..niecza v22-14-g136ddcf: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Undeclared routines:‚ê§    'a' used at line 1‚ê§     'b' used at line 1‚ê§     'c' used at line 1‚ê§‚ê§Unhandled exception: Check failed‚ê§‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 1437 (die @ 5) ‚ê§  at /home/p6eval/niecza/src/STD.pm6

[08:13] <p6eval> ..li‚Ä¶

[08:13] <Woodi> rn: my %h;  my @a = <a,b,c>; %h{'a'} = @a; push %h{'a'}, 'd'; say %h{'a'};

[08:13] <p6eval> rakudo e765c9, niecza v22-14-g136ddcf: OUTPUT¬´a,b,c d‚ê§¬ª

[08:14] <Woodi> something wrong

[08:14] <jaffa4> well, well

[08:15] <jaffa4> r:y %h;  my @a = (a,b,c); %h{'a'} = @a; push %h{'a'}, 'd'; say %h{'a'};

[08:15] <jaffa4> r:y %h;  my @a = (a,b,c); %h{'a'} = @a; push %h{'a'}, 'd'; say %h{'a'};

[08:15] <jaffa4> test

[08:16] <Woodi> you say r:y

[08:17] <Woodi> and ('a','b','c') need to be used

[08:18] <jaffa4> r: my %h;  my @a = 1,2,3 ; %h{'a'} = @a; push %h{'a'}, 'd'; say %h{'a'};

[08:18] <p6eval> rakudo e765c9: OUTPUT¬´1 2 3 d‚ê§¬ª

[08:18] <Woodi> or with < and > braces for auto-quote acording to my asymptotical knowledge :)

[08:18] <Woodi> oo :)

[08:18] <Woodi> or just with , :)

[08:19] <jaffa4> thank you

[08:20] <Woodi> np

[08:20] * Woodi deserve coffe :)

[08:23] *** cognominal left
[08:23] <jaffa4> r: my %h;  my @a = 1,2,3 ; %h{'a'} = @a; %h{'a'}.push 'd'; say %h{'a'};

[08:23] <p6eval> rakudo e765c9: OUTPUT¬´===SORRY!===‚ê§Confused‚ê§at /tmp/HMPX8U9Jxq:1‚ê§¬ª

[08:24] <jaffa4> r: my %h;  my @a = 1,2,3 ; %h{'a'} = @a; %h{'a'}.push( 'd'); say %h{'a'};

[08:24] <p6eval> rakudo e765c9: OUTPUT¬´1 2 3 d‚ê§¬ª

[08:25] *** wamba joined
[08:26] *** mucker left
[08:30] *** SamuraiJack joined
[08:31] *** cognominal joined
[08:38] <cognominal> What is the syntax to reference an non infix op√©rator to do some introspection?

[08:39] <GlitchMr> cognominal: &prefix:<+>?

[08:40] <GlitchMr> Optionally without `&` if all you want to do is call it

[08:44] *** cognominal left
[08:49] *** cognominal joined
[08:54] *** colomon left
[08:54] *** xinming left
[08:54] *** kaare_ left
[09:00] *** cognominal left
[09:07] *** cognominal joined
[09:12] *** mberends joined
[09:25] *** cognominal left
[09:31] <masak> hi, #Perl6

[09:31] <phenny> masak: 00:13Z <diakopter> tell masak  r: X[X]  # LTA error imho

[09:31] <phenny> masak: 00:16Z <diakopter> tell masak same for  r: sub foo(X of X) { }

[09:31] <phenny> masak: 00:24Z <diakopter> tell masak vivify fail for scalar; work with @ sigil thoughr:  my Array of Associative $a; $a.push({});

[09:31] <phenny> masak: 00:28Z <diakopter> tell masak hash allowed in array? r: say {} ~~ Positional; my Array of Positional @a; @a.push({}); say @a.perl

[09:31] <phenny> Further messages sent privately

[09:32] <masak> r: say "@a[]"

[09:32] <p6eval> rakudo e765c9: OUTPUT¬´Null PMC access in find_method('postcircumfix:<[ ]>')‚ê§  in block  at /tmp/lGMvG30Y3D:1‚ê§‚ê§¬ª

[09:32] <masak> oh wow.

[09:32] * masak submits rakudobug

[09:32] *** cognominal joined
[09:37] <masak> r: X[X]

[09:37] <p6eval> rakudo e765c9: OUTPUT¬´===SORRY!===‚ê§Method 'parameterize' not found for invocant of class 'Perl6::Metamodel::PackageHOW'‚ê§¬ª

[09:37] * masak submits rakudobug

[09:38] <masak> r: XX

[09:38] <p6eval> rakudo e765c9: OUTPUT¬´===SORRY!===‚ê§CHECK FAILED:‚ê§Undefined routine '&XX' called (line 1)‚ê§¬ª

[09:39] <masak> r: X

[09:39] <p6eval> rakudo e765c9:  ( no output )

[09:42] <masak> std: X[X]

[09:42] <p6eval> std 64edd1c: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Undeclared name:‚ê§    'X' used at line 1,1‚ê§Check failed‚ê§FAILED 00:00 42m‚ê§¬ª

[09:43] <masak> r: sub foo(X of X) { }

[09:43] <p6eval> rakudo e765c9: OUTPUT¬´===SORRY!===‚ê§Method 'parameterize' not found for invocant of class 'Perl6::Metamodel::PackageHOW'‚ê§¬ª

[09:43] * masak submits rakudobug

[09:43] <masak> std: sub foo(X of X) { }

[09:43] <p6eval> std 64edd1c: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§In parameter declaration, typename 'X' must be predeclared (or marked as declarative with :: prefix) at /tmp/npYhuHAAfP line 1:‚ê§------> [32msub foo(X[33m‚èè[31m of X) { }[0m‚ê§Parse failed‚ê§FAILED 00:00 42m‚ê§¬ª

[09:44] *** MayDaniel joined
[09:45] <masak> r: my Array of Associative $a; $a.push({});

[09:45] <p6eval> rakudo e765c9: OUTPUT¬´Type check failed in assignment to '$a'; expected 'Array+{TypedArray}' but got 'Array'‚ê§  in sub infix:<=> at src/gen/CORE.setting:11732‚ê§  in method push at src/gen/CORE.setting:1253‚ê§  in block  at /tmp/2SicZ3R81i:1‚ê§‚ê§¬ª

[09:46] <masak> r: my Array of Associative @a; @a.push({});

[09:46] <p6eval> rakudo e765c9:  ( no output )

[09:46] <masak> if the former worked and the latter didn't, I'd be less surprised.

[09:46] <masak> the latter should declare an array of arrays of associative.

[09:47] <masak> r: say {} ~~ Positional; my Array of Positional @a; @a.push({}); say @a.perl

[09:47] <p6eval> rakudo e765c9: OUTPUT¬´False‚ê§Array+{TypedArray}.new({})‚ê§¬ª

[09:47] <masak> yeah, I don't follow. something feels weird here.

[09:47] <masak> I won't submit rakudobugs on that until someone explains it to me :)

[09:52] <jaffa4> if I use our in a sub, it still get variable not found in another sub. .Is that correct?

[09:54] <jaffa4> masak?

[09:55] *** CharellKing left
[09:56] *** Su-Shee_ is now known as Su-Shee

[09:56] *** MayDaniel left
[09:57] <azawawi> Found a bug in File::Spec https://github.com/FROGGS/p6-File-Spec/issues/1

[09:58] <masak> jaffa4: that is correct.

[09:59] <masak> jaffa4: you have to declare variables, even our variables, in order to be able to use them.

[09:59] <masak> however...

[09:59] <masak> r: sub foo { our $x = 42 }; sub bar { say our $x }; foo; bar

[09:59] <p6eval> rakudo e765c9: OUTPUT¬´42‚ê§¬ª

[09:59] <masak> there *is* some cross-lexpad communication going on.

[09:59] <jaffa4> our declares in global scope

[09:59] <masak> yeah, that's where you're wrong.

[09:59] <jaffa4> It should be visible in another subs, should it not?

[10:00] <masak> see eval above.

[10:00] <lumi__> jaffa4: No, it declares a package variable, but the name is only in scope lexically, I think

[10:00] <masak> correct.

[10:00] *** spider-mario joined
[10:01] <jaffa4> that is interesing

[10:02] *** tokuhiro_ joined
[10:02] <jaffa4> I see potentials bugs in here for future Perl 6 developers

[10:02] <masak> actually, we had a narrowing in semantics exactly there as part of the switch over to nom.

[10:02] <masak> jaffa4: yeah, one has to think a little differently about 'our' compared to Perl 5, that is true.

[10:03] <masak> personally, I've bought into the reasons for the change. YMMV.

[10:03] <lumi__> Lexicalize all the things!

[10:04] <masak> that's us.

[10:05] <masak> jaffa4: and yes, the change makes 'our' variables one notch less useful in Perl 6, in the sense that people will end up using them less often. such is life. we have other, nicer features that people can rely on instead.

[10:06] <jaffa4> Like what?

[10:06] <masak> from my point of view, the main reason to use 'our' in Perl 6 is to make a variable (or sub) visible from outside of a package.

[10:07] <masak> as to what other features to use instead of 'our', I don't have a ready-made answer. :) generally, I'm not so inclined to use 'our' in that way in the first place.

[10:07] <masak> so all the examples I can think of are artificial.

[10:07] <masak> &

[10:08] <jaffa4> &?

[10:12] <au> (&, as in fading to background)

[10:27] * azawawi farabi6 can now launch its webserver and the editor is visible in the browser :)

[10:28] <jnthn> azawawi: ooh :)

[10:28] *** daniel-s left
[10:35] *** MayDaniel joined
[10:35] * azawawi integrates Perlito with Farabi6

[10:43] *** cognominal_ joined
[10:46] *** cognominal left
[10:47] *** PacoAir joined
[10:49] <cognominal_> http://irclog.perlgeek.de/perl6/2012-10-21#i_6083925  thx GlitchMr, I hae a loosy connexion and there is no way to know if what I type in xhchat will have make it. I answered to myself as I often did but ig got lost.

[10:50] <cognominal_> one should not type the operator as in the grammar, say  infix:sym<,>  but infix:<,>

[10:55] *** fgomez left
[10:58] *** colomon joined
[10:59] *** am0c joined
[11:05] *** Su-Shee_ joined
[11:09] *** Su-Shee left
[11:10] *** fgomez joined
[11:14] *** Moukeddar joined
[11:24] <dalek> nqp/kill-nqpattr: 8bbf1cb | jnthn++ | src/QRegex/P6Regex/ (2 files):

[11:24] <dalek> nqp/kill-nqpattr: Give P6Regex code objects in standalone mode.

[11:24] <dalek> nqp/kill-nqpattr: 

[11:24] <dalek> nqp/kill-nqpattr: This means that it now no longer depends on BlockMemo, and thus will

[11:24] <dalek> nqp/kill-nqpattr: not use nqpattr either.

[11:24] <dalek> nqp/kill-nqpattr: review: https://github.com/perl6/nqp/commit/8bbf1cbd69

[11:24] <dalek> nqp/kill-nqpattr: 8d698e3 | jnthn++ | src/stage0/ (9 files):

[11:24] <dalek> nqp/kill-nqpattr: Update bootstrap.

[11:24] <dalek> nqp/kill-nqpattr: review: https://github.com/perl6/nqp/commit/8d698e3111

[11:24] <dalek> nqp/kill-nqpattr: e0d7900 | jnthn++ | src/QRegex/Cursor.nqp:

[11:24] <dalek> nqp/kill-nqpattr: Remove remaining nqpattr calls.

[11:24] <dalek> nqp/kill-nqpattr: review: https://github.com/perl6/nqp/commit/e0d7900761

[11:27] <am0c> jnthn++

[11:29] *** am0c left
[11:39] *** Moukeddar left
[11:40] <dalek> nqp/kill-nqpattr: 4248b7f | jnthn++ | src/QRegex/P5Regex/ (2 files):

[11:40] <dalek> nqp/kill-nqpattr: Update P5Regex to avoid BlockMemo/nqpattr.

[11:40] <dalek> nqp/kill-nqpattr: review: https://github.com/perl6/nqp/commit/4248b7f7ab

[11:40] <dalek> nqp/kill-nqpattr: 94ff05c | jnthn++ | src/core/NQPRoutine.pm:

[11:40] <dalek> nqp/kill-nqpattr: Remove two more (now-unused) nqpattr methods.

[11:40] <dalek> nqp/kill-nqpattr: review: https://github.com/perl6/nqp/commit/94ff05c75e

[11:40] <dalek> nqp/kill-nqpattr: 903ce78 | jnthn++ | / (3 files):

[11:40] <dalek> nqp/kill-nqpattr: Eliminate QAST::BlockMemo, now nqpattr is gone.

[11:40] <dalek> nqp/kill-nqpattr: 

[11:40] <dalek> nqp/kill-nqpattr: It was always just a hack to provide for nqpattr, and has no other

[11:40] <dalek> nqp/kill-nqpattr: purpose.

[11:40] <dalek> nqp/kill-nqpattr: review: https://github.com/perl6/nqp/commit/903ce78ebd

[11:40] *** xinming joined
[11:48] <dalek> nqp/kill-nqpattr: 2957383 | jnthn++ | src/stage0/ (9 files):

[11:48] <dalek> nqp/kill-nqpattr: Another bootstrap update.

[11:48] <dalek> nqp/kill-nqpattr: 

[11:48] <dalek> nqp/kill-nqpattr: Fully eliminates nqpattr usage and QAST::BlockMemo.

[11:48] <dalek> nqp/kill-nqpattr: review: https://github.com/perl6/nqp/commit/295738389d

[11:48] <dalek> nqp/kill-nqpattr: 68aa467 | jnthn++ | / (3 files):

[11:48] <dalek> nqp/kill-nqpattr: Eliminate nqpattr cheat implementation.

[11:48] <dalek> nqp/kill-nqpattr: 

[11:48] <dalek> nqp/kill-nqpattr: With this, we're down to just 2 .pir non-generated .pir files in NQP.

[11:48] <dalek> nqp/kill-nqpattr: review: https://github.com/perl6/nqp/commit/68aa4679ae

[11:48] *** Chillance joined
[11:50] *** mucker joined
[11:56] *** mucker left
[11:56] *** xdbr joined
[11:57] *** xinming left
[11:59] *** xinming joined
[12:05] *** Su-Shee_ is now known as Su-Shee

[12:06] *** cognominal_ left
[12:12] <dalek> nqp/kill-nqpattr: d8ff663 | jnthn++ | src/QRegex/P5Regex/ (2 files):

[12:12] <dalek> nqp/kill-nqpattr: Copy of copy-pastos; kboga++.

[12:12] <dalek> nqp/kill-nqpattr: review: https://github.com/perl6/nqp/commit/d8ff663255

[12:13] *** cognominal_ joined
[12:27] *** domidumont joined
[12:28] *** SamuraiJack_ joined
[12:28] *** rindolf joined
[12:28] *** SamuraiJack left
[12:36] <azawawi> what's the expected things for rakudo 2012.10? more performance? more p6 support?

[12:38] *** domidumont left
[12:39] <jnthn> azawawi: The 2012.10 compiler release is already cut, so the Rakudo Star that ships with it will have the things in the ChangeLog for 2012.10. :) But yes, the things you mention plus bug fixes.

[12:39] *** domidumont joined
[12:41] * azawawi looks at the changelog

[12:41] <jnthn> The debugger goes into R* and that has some improvements this month too.

[12:42] * jnthn is working on a blog post about those

[12:45] * azawawi advocates https://github.com/azawawi/farabi6 :)

[12:46] <GlitchMr> azawawi: http://glitchmr.github.com/perl-6-changes-2012W40.html, http://glitchmr.github.com/perl-6-changes-2012W41.html and http://glitchmr.github.com/perl-6-changes-2012W42.html

[12:46] <GlitchMr> That would be 2012.10

[12:46] <GlitchMr> Everything in those posts was added in 2012.10

[12:47] <azawawi> GlitchMr: thx

[12:49] <GlitchMr> https://bugs.php.net/bug.php?id=55371

[12:49] <GlitchMr>  /* if (PHP_VERSION < 6) {

[12:49] <GlitchMr>     $theValue = get_magic_quotes_gpc() ? stripslashes($theValue) : $theValue;

[12:49] <GlitchMr>   }*/

[12:49] <GlitchMr> WTH?

[12:49] <GlitchMr> I through that most of PHP code is bad... but that goes above bad.

[12:54] <[Coke]> Where should a test for https://rt.perl.org/rt3/Ticket/Display.html?id=76946 go? I have a test, but it seems like we need a "weird rakudo regression" spectest file. :)

[12:56] <[Coke]> ah. integration/weird_errors, I suppose.

[13:04] *** Psyche^ joined
[13:04] <jnthn> [Coke]: There or where the other tests for .= are (I guess in S12-methods somewhere)

[13:07] *** Patterner left
[13:07] *** Psyche^ is now known as Patterner

[13:07] <[Coke]> r: https://gist.github.com/3926907

[13:07] <p6eval> rakudo e765c9: OUTPUT¬´===SORRY!===‚ê§Missing block‚ê§at /tmp/eNfJQ9VFpO:7‚ê§¬ª

[13:08] <[Coke]> Can someone point out what I'm doing wrong there?

[13:10] <azawawi> I have a question about panda... where does it install other shared files... e.g. lib/YourFiles/share

[13:11] <azawawi> and what is the ~/.perl6 for?

[13:13] <jnthn> r: say X::Adhoc

[13:13] <p6eval> rakudo e765c9: OUTPUT¬´Could not find symbol '&Adhoc'‚ê§  in method <anon> at src/gen/CORE.setting:9955‚ê§  in  at src/gen/Metamodel.pm:2401‚ê§  in any find_method_fallback at src/gen/Metamodel.pm:2389‚ê§  in any find_method at src/gen/Metamodel.pm:925‚ê§  in  at src/gen/BOOTSTRAP.pm:827‚ê§  in any ‚Ä¶

[13:13] <jnthn> r: say X::AdHoc

[13:13] <p6eval> rakudo e765c9: OUTPUT¬´X::AdHoc()‚ê§¬ª

[13:13] <jnthn> [Coke]: Capitalization.

[13:13] <[Coke]> That seems LTA.

[13:14] *** tokuhiro_ left
[13:16] <[Coke]> jnthn++

[13:17] <jnthn> STD manages a better error there. I think we have a ticket about getting Rakudo to.

[13:17] <dalek> nqp/kill-nqpattr: e6b9101 | jnthn++ | src/QRegex/Cursor.nqp:

[13:17] <dalek> nqp/kill-nqpattr: Don't booleanize code objects in Cursor.

[13:17] <dalek> nqp/kill-nqpattr: 

[13:17] <dalek> nqp/kill-nqpattr: Now that $!regexsub is the actual code object, boolifying it doesn't

[13:17] <dalek> nqp/kill-nqpattr: play well with Perl 6 code objects.

[13:17] <dalek> nqp/kill-nqpattr: review: https://github.com/perl6/nqp/commit/e6b9101c92

[13:17] <dalek> nqp/kill-nqpattr: deb59ee | jnthn++ | src/QRegex/P6Regex/Actions.nqp:

[13:17] <dalek> nqp/kill-nqpattr: Do store the NFA of standalone regexes.

[13:17] <dalek> nqp/kill-nqpattr: 

[13:17] <dalek> nqp/kill-nqpattr: Turns out that the current way we do gen_op in Rakudo needs that. (Yes,

[13:17] <dalek> nqp/kill-nqpattr: this will change soon, but this is the easiest way for now.)

[13:17] <dalek> nqp/kill-nqpattr: review: https://github.com/perl6/nqp/commit/deb59eeab0

[13:18] <[Coke]> jnthn: excellent, I'm trying to close a ticket, I didn't want to opena new one! :)

[13:19] *** kaare_ joined
[13:25] <felher> rn: say 'ABC' ~~ / :i ^ < a b c abc > $ /

[13:25] <p6eval> rakudo e765c9: OUTPUT¬´#<failed match>‚ê§¬ª

[13:25] <p6eval> ..niecza v22-14-g136ddcf: OUTPUT¬´#<match from(0) to(3) text(ABC) pos([].list) named({}.hash)>‚ê§¬ª

[13:27] <dalek> roast: 33c0502 | coke++ | integration/weird-errors.t:

[13:27] <dalek> roast: Add test for RT #76946

[13:27] <dalek> roast: review: https://github.com/perl6/roast/commit/33c05029ec

[13:27] *** rindolf left
[13:28] <jnthn> r: "ABC" ~~ / ABC /

[13:28] <p6eval> rakudo e765c9:  ( no output )

[13:28] <jnthn> r: say "ABC" ~~ / :i abc /

[13:28] <p6eval> rakudo e765c9: OUTPUT¬´ÔΩ¢ABCÔΩ£‚ê§‚ê§¬ª

[13:28] <jnthn> r: say "ABC" ~~ / :i [ a | abc ] /

[13:28] <p6eval> rakudo e765c9: OUTPUT¬´ÔΩ¢ABCÔΩ£‚ê§‚ê§¬ª

[13:28] <jnthn> r: say "ABC" ~~ / :i < a abc > /

[13:28] <p6eval> rakudo e765c9: OUTPUT¬´#<failed match>‚ê§¬ª

[13:28] <jnthn> wtf. The latter is meant to be syntactic sugar for the first.

[13:29] <dalek> Heuristic branch merge: pushed 32 commits to nqp by jnthn

[13:30] <dalek> rakudo/nom: d4a9b19 | jnthn++ | / (4 files):

[13:30] <dalek> rakudo/nom: Rakudo updates for nqpattr removal.

[13:30] <dalek> rakudo/nom: 

[13:30] <dalek> rakudo/nom: Also bumps NQP_REVISION to get the kill-nqpattr merge. gen_op gets a

[13:30] <dalek> rakudo/nom: bit messier in this, but the categorically-better branch eliminates

[13:30] <dalek> rakudo/nom: the code that needed an update here anyway.

[13:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d4a9b19daa

[13:32] <felher> jnthn: i could imagine this being the same problem as either https://rt.perl.org/rt3//Public/Bug/Display.html?id=76500 or https://rt.perl.org/rt3//Public/Bug/Display.html?id=77410 ?

[13:33] <dalek> rakudo/nom: 978492e | jnthn++ | src/Perl6/Actions.pm:

[13:33] <dalek> rakudo/nom: Respect :i in < foo bar > syntax.

[13:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/978492eb1d

[13:34] <jnthn> felher: Wasn't actually the deep problem I already fixed, just needed a tweak to the < foo bar > compilation.

[13:35] <felher> jnthn++ :)

[13:38] *** kAm0t3 joined
[13:38] <dalek> roast: 63938fd | jnthn++ | S05-modifier/ignorecase.t:

[13:38] <dalek> roast: Add test for :i and quote words.

[13:38] <dalek> roast: review: https://github.com/perl6/roast/commit/63938fd83a

[13:39] *** hash_table joined
[13:40] <[Coke]> I don't know if it's peculiar to the perl installation of RT, but the auto-wrapping of emails is painful. as is the unicode mangling.

[13:40] <[Coke]> I have no desire to switch over to github, but blah.

[13:40] <[Coke]> (I wouldn't mind /being on github/), but switching? no.

[13:42] *** flightrecorder joined
[13:43] <dalek> rakudo/categorically-better: b866287 | moritz++ | src/Perl6/Grammar.pm:

[13:43] <dalek> rakudo/categorically-better: RT #115356: redeclaring a class as a role

[13:43] <dalek> rakudo/categorically-better: review: https://github.com/rakudo/rakudo/commit/b866287671

[13:43] <dalek> rakudo/categorically-better: e765c99 | coke++ | t/spectest.data:

[13:43] <dalek> rakudo/categorically-better: Run test for RT #77596

[13:43] <dalek> rakudo/categorically-better: review: https://github.com/rakudo/rakudo/commit/e765c99f4c

[13:43] <dalek> rakudo/categorically-better: d4a9b19 | jnthn++ | / (4 files):

[13:43] <dalek> rakudo/categorically-better: Rakudo updates for nqpattr removal.

[13:43] <dalek> rakudo/categorically-better: 

[13:43] <dalek> rakudo/categorically-better: Also bumps NQP_REVISION to get the kill-nqpattr merge. gen_op gets a

[13:43] <dalek> rakudo/categorically-better: bit messier in this, but the categorically-better branch eliminates

[13:43] <dalek> rakudo/categorically-better: the code that needed an update here anyway.

[13:43] <dalek> rakudo/categorically-better: review: https://github.com/rakudo/rakudo/commit/d4a9b19daa

[13:43] <dalek> rakudo/categorically-better: 978492e | jnthn++ | src/Perl6/Actions.pm:

[13:45] <[Coke]> jnthn: you were right, it's already reported as 88748

[13:47] <jnthn> :)

[13:47] <jnthn> Time for a break, bbl

[13:48] <masak> diakopter: your latest sets of fuzzings makes me feel like Rakudo has more lingering "early warts" (a la 2008) than I thought.

[13:49] <masak> of course, you're not following the common paths, which is kind of the point.

[13:49] <masak> but still.

[13:57] <[Coke]> is there a way to CATCH a "CHECK FAILED" error?

[13:57] <jnthn> masak: How do you conclude that?

[13:57] <jnthn> masak: They all look like LTA errors, aside from the "@foo[]" one.

[13:57] <[Coke]> (there must be because the REPL doesn't die.)

[13:58] <jnthn> masak: And diakopter may well have found that one by reading the comment in Actions.pm that explains this issue and why it's not immediately easy to fix.

[13:58] <masak> jnthn: yes. the "@a[]" one was perhaps the most surprising.

[13:58] <masak> oh!

[13:58] * masak hunts down that comment

[14:00] <masak> # XXX Move to HLL::Actions after NQP gets QAST.

[14:00] <masak> heh :)

[14:00] <masak> someone could do that now :)

[14:01] *** flightrecorder left
[14:07] <masak> no, I didn't find a comment in Actions.pm regarding why "@a[]" is non-trivial.

[14:07] <masak> hints welcome.

[14:08] <jnthn> huh, it's the only hit for "@ in the file...

[14:08] <jnthn> [Coke]: They can be caught like any error if you're eval'ing code 

[14:08] <masak> jnthn: found it.

[14:09] <jnthn> You can't catch them for the current file because it never makes it to runtime. :)

[14:10] <masak> I don't understand the problem.

[14:10] *** birdwindupbird joined
[14:10] <masak> if it's "@a", it shouldn't interpolate. if it's "@a[]", it should, and thus the variable needs to exist.

[14:15] *** am0c joined
[14:18] <jnthn> And at the point you're in the action method for @a, you didn't parse the [] yet.

[14:18] <jnthn> I think the comment is really saying "at the point we do the check, we don't know what's coming up"

[14:19] <jnthn> Good starting point for a fix is probably to look at if STD gets it right, and if so how.

[14:19] <masak> clearly you can't do the right thing before you've parsed the []

[14:20] <masak> because you'll only be doing the declaredness check if there is one.

[14:20] <masak> so you'll have to establish a "conditional promise" or something.

[14:20] <masak> hm, that's an interesting notion. kind of like a phaser.

[14:21] *** rindolf joined
[14:25] <masak> but you don't need a language construct for that, I think. just closures :)

[14:28] *** crab2313 joined
[14:30] <jnthn> STD does it with the $*VAR contextual

[14:30] <jnthn> See termish

[14:32] <masak> aye. I see it.

[14:32] <masak> seems sensible.

[14:32] <masak> the "conditional promise" is conveyed through the contextual.

[14:34] <jnthn> *nod*

[14:34] <jnthn> If you feel like hacking on it some time, feel free :)

[14:34] <masak> ok :)

[14:35] <jnthn> If your Rakudo tuits aren't too tired up with macros ;)

[14:35] <masak> "tired up" is a nice melange of "tired" and "tied up" :P

[14:37] *** xinming left
[14:39] <jnthn> hah...I meant tied :P

[14:39] *** spider-mario left
[14:40] * masak .oO( the 's' and 'm' modifiers are gone. probably the memory of them was too painful... )

[14:41] <azawawi> old question; how much is std.pm can rakudo run?

[14:41] *** xinming joined
[14:41] <azawawi> old question; how much from std.pm can rakudo run?

[14:42] *** kAm0t3 left
[14:42] <masak> quite a lot.

[14:42] <masak> maybe... all of it, at this point?

[14:42] <jnthn> Not sure

[14:43] <jnthn> I know that even NQP can manage a good bit of it though

[14:43] <azawawi> Since in Farabi i have to use viv to report errors accurately and use rakudo/niecza as a runtime

[14:43] <jnthn> It's kind of a convergence process :)

[14:45] *** xinming left
[14:52] *** xinming joined
[15:06] *** azawawi left
[15:09] *** [particle] joined
[15:13] *** GlitchMr left
[15:13] *** GlitchMr joined
[15:17] *** GlitchMr is now known as era32

[15:22] *** fglock left
[15:24] *** crab2313 left
[15:25] *** nyuszika7h left
[15:28] *** nyuszika7h joined
[15:38] *** wamba left
[15:42] *** Moukeddar joined
[15:42] *** flightrecorder joined
[15:43] *** FROGGS joined
[15:56] *** wamba joined
[16:01] *** [particle]1 joined
[16:02] *** azawawi joined
[16:03] *** [particle] left
[16:03] <azawawi> https://github.com/azawawi/farabi6/commit/c80952c054a1d47b5ecfca3158e106dff1bf64af

[16:03] <azawawi> # Run Perl 6 code using Perltio 6 JS

[16:04] <azawawi> # in Farabi6 :)

[16:09] <au> azawawi: I wonder if one can create a gh-pages branch and move lib/Farabi6/files/* into the root directory :)

[16:09] <au> i.e. so it can run as a single-page app in http://azawawi.github.com/farabi6/

[16:14] <azawawi> au: right now im experimenting with a perl 6 backend

[16:16] <au> *nod*

[16:17] <azawawi> panda does not seem to bundle stuff well

[16:18] <azawawi> im confused about the .perl6 directory and what it should contain

[16:20] <azawawi> if bundle js resources under lib/XYZ/files... where should it be installed?

[16:20] <azawawi> s/if/if i/

[16:30] *** benabik joined
[16:30] *** azawawi left
[16:32] <moritz> r: say '√ü'.uc

[16:32] <p6eval> rakudo 978492: OUTPUT¬´√ü‚ê§¬ª

[16:32] <moritz> n: say '√ü'.uc

[16:33] <p6eval> niecza v22-14-g136ddcf: OUTPUT¬´√ü‚ê§¬ª

[16:33] <moritz> rakudo--

[16:33] <moritz> niecza--

[16:33] <moritz> p: say '√ü'.uc

[16:33] <p6eval> pugs: OUTPUT¬´√ü‚ê§¬ª

[16:33] <moritz> pugs--

[16:34] *** am0c left
[16:37] <jnthn> prn: say "wir sind alle schei√üe in deutsch".uc

[16:37] <p6eval> rakudo 978492, niecza v22-14-g136ddcf, pugs: OUTPUT¬´WIR SIND ALLE SCHEI√üE IN DEUTSCH‚ê§¬ª

[16:37] <jnthn> Hm, how on earth do we make that work in the NFA, I wonder...

[16:38] <jnthn> That'll need some care.

[16:38] <jnthn> :)

[16:39] *** jaldhar left
[16:39] <moritz> jnthn: as [√ü|SS]

[16:40] <jnthn> moritz: Yeah, will just have to take special notice of those cases.

[16:40] <moritz> well, actually [√ü|SS|Ss|sS|ss]

[16:40] <jnthn> o.O

[16:41] <jnthn> Really? sS too?

[16:41] <masak> scheisSe.

[16:41] <jnthn> Das ist es.

[16:42] * jnthn wonders what these things foldcase too

[16:42] <moritz> $ perl -CS -Mutf8 -wE 'say "sS" =~ /√ü/i'

[16:42] <moritz> 1

[16:42] <moritz> jnthn: to ss all

[16:45] *** circlepuller left
[16:45] *** fgomez left
[16:45] *** circlepuller joined
[16:47] <nwc10> $ perl -le 'print "\x{DF}\x{100}" =~ /ss/i'

[16:47] <nwc10> 1

[16:47] <nwc10> $ perl -le 'print "\x{DF}\x{100}" =~ /(s)(s)/i'

[16:47] <nwc10> $

[16:48] <nwc10> (this IRC client isn't sure how to do Unicode)

[16:48] <nwc10> but the character class inversion of \x{DF} is quite fun too.

[16:49] <nwc10> (case insensitively)

[16:49] <nwc10> (conceptually)

[16:59] *** fgomez joined
[16:59] *** colomon left
[17:03] *** birdwindupbird left
[17:09] *** cognominal_ left
[17:14] *** cognominal_ joined
[17:22] *** Celelibi left
[17:31] *** Celelibi joined
[17:32] <era32> I want to do http://codegolf.stackexchange.com/questions/8696/print-this-diamond

[17:32] <era32> Currently I've this: say " "x(9-$_),(1 x$_)**2 for 1..9,(8...1)

[17:32] <era32> Any ideas how can I shorten it?

[17:35] *** mars joined
[17:35] *** mars is now known as Guest82398

[17:38] *** Celelibi left
[17:42] <jnthn> era32: Hm, that's already quite short... :)

[17:43] <jnthn> x(9-$_) doesn't need the parens I think

[17:43] <jnthn> Still need a space between x and 9, but it can save a char I think

[17:44] <era32> Thanks :-)

[17:45] * moritz likes the (1 x $_) ** 2 trick

[17:45] <jnthn> I was trying to work out a way to have 0..8 or so so that you can use ^8 there

[17:46] <era32> http://codegolf.stackexchange.com/a/8768/3103

[17:46] <era32> :-)

[17:46] <diakopter> masak: I don't know about that; my perspective hasn't changed. I don't think they're big deals enough to call warts

[17:47] <era32> I find this " " ugly, but whatever

[17:47] <diakopter> maybe moles

[17:47] <era32> In Perl 5, I would do $", but I don't think I can do that in Perl 6 ;-)

[17:47] <diakopter> although moles implies more permanent; maybe pimple is better

[17:47] *** spider-mario joined
[17:49] <moritz> you can still write chr(20) instead :-)

[17:49] <era32> Except that's longer

[17:49] <era32> This is code golf

[17:49] <moritz> I know, hence the smiley :-)

[17:50] <era32> 20.chr would be shorter, but still too long

[17:51] <era32> I was thinking about using map, but 1. it would be longer, 2. isn't map lazy?

[17:51] <moritz> it is

[17:52] <era32> Also: http://codegolf.stackexchange.com/questions/6768/shortest-code-that-return-sigsegv-among-the-given-languages

[17:53] <era32> I find it interesting that the shortest solution looks like: main;

[17:53] <era32> I'm surprised to see it compiles

[17:53] <jaffa4> IS this a regular experssion error message: Preceding context expects a term, but found infix / instead?

[17:53] <jaffa4>  

[17:54] *** Celelibi joined
[17:54] *** colomon joined
[17:54] <era32> But... shouldn't / in context of term a regular expression?

[17:54] <era32> std: a / b /

[17:55] <p6eval> std 64edd1c: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Undeclared routine:‚ê§ 'a' used at line 1‚ê§Check failed‚ê§FAILED 00:00 42m‚ê§¬ª

[17:55] <era32> std: print / b /

[17:55] <p6eval> std 64edd1c: OUTPUT¬´ok 00:00 42m‚ê§¬ª

[17:55] <jaffa4> std: /^\-p=(.+)$/ 

[17:55] <p6eval> std 64edd1c: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unrecognized regex metacharacter = (must be quoted to match literally) at /tmp/MOF8j5EIf9 line 1:‚ê§------> [32m/^\-p=[33m‚èè[31m(.+)$/[0m‚ê§Unable to parse regex; couldn't find final '/' at /tmp/MOF8j5EIf9 line 1:‚ê§------> [32m/^\-p=[33‚Ä¶

[17:55] <jaffa4> raudo: /^\-p=(.+)$/ 

[17:55] <jaffa4> r: /^\-p=(.+)$/ 

[17:55] <p6eval> rakudo 978492: OUTPUT¬´===SORRY!===‚ê§Preceding context expects a term, but found infix / instead‚ê§at /tmp/MsgRqZ6v6o:1‚ê§¬ª

[17:56] <jnthn> Hmm

[17:56] <era32> what the...

[17:56] <diakopter> rn: foo (sub foo { })

[17:56] <era32> Rakudo usually has less detailed error messages...

[17:56] <p6eval> rakudo 978492: OUTPUT¬´Too many positional parameters passed; got 1 but expected 0‚ê§  in sub foo at /tmp/8wUGlOvxVJ:1‚ê§  in block  at /tmp/8wUGlOvxVJ:1‚ê§‚ê§¬ª

[17:56] <p6eval> ..niecza v22-14-g136ddcf:  ( no output )

[17:56] <era32> The error is about =, but...

[17:56] <era32> This error message is really wrong

[17:57] <jnthn> My guess is that somehow the parser ends up falling out of regex parsing, at which point you get the "huh, I didn't find any term" error.

[17:57] <era32> I mean, "but found infix 'whatever'"  doesn't even normally happen in Rakudo. Usually all I see is "Confused"

[17:57] <felher> Shouldn't that work (i.e: just write binary, not encode anything to utf-8): http://bpaste.net/show/52645/ ?

[17:57] <jnthn> era32: It's trying to do better than "Confused" here

[17:58] <jaffa4> not very useful error message

[17:58] <jnthn> jaffa4: It can be.

[17:58] <era32> Rakudo currently doesn't have very good error messages for syntax errors.

[17:58] <era32> Usually Niecza is better at that.

[17:58] <jnthn> But it shouldn't have failed to parse the regex in this way here.

[17:59] <era32> But it's first "but found instead" error message I've seen from Rakudo

[17:59] <era32> r: /=/

[17:59] <p6eval> rakudo 978492: OUTPUT¬´===SORRY!===‚ê§Unrecognized regex metacharacter = (must be quoted to match literally) at line 2, near "/"‚ê§¬ª

[17:59] <jnthn> Right, it gets it in this case.

[17:59] <era32> r: /p=/

[17:59] <p6eval> rakudo 978492: OUTPUT¬´===SORRY!===‚ê§Preceding context expects a term, but found infix / instead‚ê§at /tmp/sK7JYdNG8b:1‚ê§¬ª

[17:59] <era32> ok

[17:59] <jnthn> Hmm

[17:59] <era32> > /

[18:00] <era32> Preceding context expects a term, but found infix / instead

[18:00] <era32> That would make sense

[18:00] <jnthn> Yeah

[18:00] <jnthn> I'm not sure what's going on

[18:00] <jnthn> I guess --rxtrace -e "/p=/" may be interesting to study.

[18:01] *** jaldhar joined
[18:01] <era32> Perhaps it backtracks at =... it backtracks so much that it thinks it's not regular expression

[18:01] <era32> And because it's not regular expression, it sees / that is infix operator.

[18:01] <era32> And reports error message

[18:02] <jnthn> era32: Yes, that's what's happening

[18:02] <jnthn> Something is missing to stop it backtracking so far.

[18:03] <jaffa4> What about this: print <<EOF;

[18:04] <era32> We don't have shell style heredocs anymore

[18:04] <era32> I think we have q:to today

[18:05] <jaffa4> ok

[18:05] <era32> Yet, I think that STD.pm6 should have error when it detects something that looks like heredoc

[18:06] <era32> ... but that would be difficult as << >> are quotes

[18:06] <era32> niecza> << a {'a b'}>>.perl 

[18:06] <era32> ("a", "a", "b").list

[18:07] <era32> r: << a {'a b'}>>.perl.say

[18:07] <p6eval> rakudo 978492: OUTPUT¬´("a", "\{'a", "b'}")‚ê§¬ª

[18:07] <era32> What could happen here?

[18:07] <era32> Oh, lack of interpolation

[18:07] <jnthn> Not implemented those yet.

[18:07] * jnthn has been looking at quoting stuff overall recently and is planning to take on some of it

[18:08] <jnthn> That and heredocs are two of the things I want to do.

[18:08] <flussence> I can haz q:to? :D

[18:08] <jnthn> flussence: Yeah. I wanna get through the categoricals fixes/improvements I'm working on first, though.

[18:09] <flussence> of course, I can wait :)

[18:10] <jaffa4> q:to is not implemented, right?

[18:10] <flussence> n: say q:to<a>‚ê§b‚ê§a‚ê§

[18:10] <p6eval> niecza v22-14-g136ddcf: OUTPUT¬´b‚ê§‚ê§¬ª

[18:11] <era32> I would like to have some <<HEREDOC detection in STD.pm6... perhaps detection of ' or " after <<...

[18:11] <era32> Or some uppercase word character?

[18:11] <flussence> for certain values of the junction "implemented", almost everything is...

[18:12] <era32> Perhaps forcing space just after << (qw, but with interpolation) would work

[18:12] *** _jaldhar joined
[18:13] <era32> ¬´ ¬ª form of those is preffered anyways. And interpolation in qw[] isn't something you use often... but perhaps that's because of lack of implementation in Rakudo.

[18:13] *** jaldhar left
[18:13] <era32> Perhaps force space unless character after << is $ or @ or % or {?

[18:14] *** thou joined
[18:15] <era32> Also, is it just me, or Niecza appears to be more complete Perl 6 implementation?

[18:16] <era32> compared to Rakudo

[18:16] *** cosimo joined
[18:17] <era32> But perhaps it's just because Rakudo's parser still isn't even close to STD.pm6.

[18:17] <flussence> depends on what your criteria for completeness is. Right now I've got code sitting around that works in neither

[18:18] <era32> When Niecza uses slightly modified version of STD.pm6

[18:19] <jnthn> era32: See http://www.perl6.org/compilers/features for an overview of features

[18:19] <era32> All Niecza really lacks for me is socket support

[18:19] <era32> I wonder if calling C# methods directly would work

[18:20] <era32> s/C\#/.NET/

[18:21] <era32> https://raw.github.com/mj41/Perl-6-GD/master/export/Summary%20-%20Compilers'%20features%20-%20GoodData.png

[18:21] <era32> This says that Rakudo is 83%... but I have feeling that another 17% will take longer time than that 83%...

[18:22] <jnthn> era32: The problem is that the things in that list take hugely different amounts of time to implement.

[18:22] <era32> Implementing heredocs would be 1% further the goal

[18:23] <era32> Yeah. .rand, .pick and .roll sound very easy to implement.

[18:23] <jnthn> Yes, and it would also take a bunch less effort than, say, compact arrays

[18:23] <era32> Similarly, trigonometric functions are even easier.

[18:23] <era32> ... but there is a catch

[18:24] <era32> Perl 6 has lots of trig functions!

[18:24] <jnthn> Thankfully, those are already green :)

[18:24] <era32> And is TrigBase implemented in Rakudo or Niecza?

[18:24] *** havenn joined
[18:25] <jnthn> Not sure off hand

[18:25] <era32> Isn't TrigBase required to be green in trigonometric functions?

[18:25] <era32> Perhaps it should be replaced with yellow...

[18:25] *** havenn left
[18:25] <jnthn> Or a separate item, maybe.

[18:26] <era32> Whatever I do, it will decrease number of percents

[18:26] <era32> Unless I do nothing about that

[18:26] <sorear> good * #perl6

[18:26] <jnthn> Well, the features page only captures one angle of things too.

[18:27] <jnthn> "there's a bug in some corner case" doesn't prevent giving a thing green. Overall it's "what can I expect to basically work"

[18:27] <sorear> rn: say 1, 2 X[+] 10, 20

[18:28] <p6eval> rakudo 978492, niecza v22-14-g136ddcf: OUTPUT¬´11 21 12 22‚ê§¬ª

[18:28] <era32> At least this feature page doesn't have nonsense like .chars method.

[18:28] * jnthn gets back to working towards turning one more of the reds into a green

[18:28] <era32> Obviously if you implement string type you should have basic methods like .chars.

[18:28] <jnthn> Well, the yak shaving for... :)

[18:28] <moritz> hasn't TrigBased been removed?

[18:29] <era32> moritz: http://perlcabal.org/syn/S32/Numeric.html#Trigonometric_functions

[18:29] <era32> It's still in specification

[18:29] <sorear> era32: niecza has basic socket support now

[18:29] <era32> :-)

[18:29] <tadzik> good evening

[18:29] <era32> Is it good enough to let's say... create IRC bot?

[18:30] <jnthn> o/ tadzik 

[18:30] *** jaldhar_ joined
[18:30] <tadzik> there are irc bots running already

[18:30] <sorear> o/ tadzik 

[18:30] *** _jaldhar left
[18:31] <jnthn> tadzik: Some panda question in the backlog

[18:31] *** havenn joined
[18:31] <era32> https://gist.github.com/3928017

[18:31] <era32> I still have no idea what .arg method does in Ruby...

[18:31] <era32> Ruby is so confusing

[18:32] <tadzik> jnthn: care to copypaste? I'm on the phone, sorry

[18:33] <jnthn> tadzik: azawawi wanted to know about bundling additional files so that they get installed. Details at http://irclog.perlgeek.de/perl6/2012-10-21#i_6084570

[18:36] <era32> Also... matching /(s)(s)/i sounds impossible...

[18:36] <era32> This is the problem with characters like √ü

[18:39] <tadzik> azaw<TAB><TAB>

[18:39] <tadzik> :(

[18:41] *** benabik left
[18:42] <dalek> panda: 97572e5 | moritz++ | ext/Test__Mock/lib/Test/Mock.pm:

[18:42] <dalek> panda: [Test::Mock] update to new version that does not warn

[18:42] <dalek> panda: review: https://github.com/tadzik/panda/commit/97572e5a52

[18:43] *** benabik joined
[18:51] *** colomon left
[18:52] *** kristina_83 joined
[18:57] *** rindolf left
[18:58] *** kristina_83 left
[18:58] *** nyuszika7h left
[19:17] *** domidumont left
[19:25] *** azawawi joined
[19:27] <benabik> era32: From ruby-doc.org: arg, angle, phase = Returns 0 if the value is positive, pi otherwise

[19:28] *** cosimo left
[19:31] *** azawawi left
[19:33] *** SamuraiJack_ left
[19:35] *** nyuszika7h joined
[19:39] *** jaffa4 left
[19:42] *** Exodist left
[19:52] *** bro_grammer joined
[19:53] *** azawawi joined
[19:53] <azawawi> tadzik: ping :) TAB TAB

[19:54] *** havenn left
[19:55] *** hash_table left
[19:55] * masak .oO( he was tabbed in the back! )

[19:55] <azawawi> masak: :)

[19:58] *** Guest82398 left
[19:58] *** hash_table joined
[19:58] *** bro_grammer left
[19:59] <azawawi> masak: so im using now IO::Socket::INET in Farabi6... directly to do HTTP requests... i filed a couple of bugs regarding HTTP::Client and LWP::Simple

[19:59] <masak> nice.

[19:59] <masak> azawawi++

[19:59] <azawawi> so when is the expected date for rakudo 2012.10 release?

[20:00] <jnthn> The Rakudo Star release for a month is typically made in the week following the compiler release.

[20:00] <jnthn> So, sometime in the coming week

[20:00] <jnthn> Not sure who'll make it.

[20:01] <azawawi> a quick question. How do i list modules in the Setting? the ones that i cant 'use'  before using :)

[20:01] <azawawi> i need that for autocomplete and Help POD generation

[20:03] <masak> azawawi: check which ones are defined in src/core in Rakudo?

[20:03] <grondilu> rn: .say for <a b> SX[~] <c d>;

[20:03] <p6eval> niecza v22-14-g136ddcf: OUTPUT¬´ac‚ê§ad‚ê§bc‚ê§bd‚ê§¬ª

[20:03] <p6eval> ..rakudo 978492: OUTPUT¬´No such method 'postcircumfix:<( )>' for invocant of type 'List'‚ê§  in  at src/gen/BOOTSTRAP.pm:852‚ê§  in any  at src/gen/BOOTSTRAP.pm:836‚ê§  in block  at /tmp/CiS1Tm0Jrc:1‚ê§‚ê§¬ª

[20:03] <grondilu> NYI I guess

[20:04] <jnthn> r: say CORE::.keys.grep(/^\w/) 

[20:04] <p6eval> rakudo 978492: OUTPUT¬´Match Buf GatherIter Numeric Stringy Rational i Backtrace Mu Failure Any Cool Attribute Signature Parameter Code AST MapIter Block CallFrame Range Routine Sub Method tai-utc Submethod Duration Regex Instant Str Int Num DateTime Date Parcel Dateish Iterable Iterator‚Ä¶

[20:05] *** havenn joined
[20:07] <azawawi> masak: i dont see any POD in rakudo/src/core

[20:07] <masak> azawawi: no, there's just module files.

[20:07] <masak> I meant "defined" as in "defined in code".

[20:07] * azawawi takes a look at https://github.com/perl6/doc

[20:12] <dalek> nqp: f8df485 | jnthn++ | src/core/NQPRoutine.pm:

[20:12] <dalek> nqp: Add some missing methods in NQPRegex.

[20:12] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f8df485033

[20:12] <dalek> nqp: 8aa7fe1 | jnthn++ | src/ (4 files):

[20:12] <dalek> nqp: Handle genericity of NFAs for regexes in roles.

[20:12] <dalek> nqp: 

[20:12] <dalek> nqp: Make it so that if you have a regex that mentions a variable that is

[20:12] <dalek> nqp: a role parameter, then a generic version of the NFA will be saved. As

[20:12] <dalek> nqp: the regex is incoprorated into the concrete role, this generic NFA is

[20:12] <dalek> nqp: turned into a concrete one with the value of the role parameter being

[20:12] <dalek> nqp: substituted in.	Thus it participates fully in LTM.

[20:12] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8aa7fe1d58

[20:13] *** flightrecorder left
[20:13] <jnthn> That was a mildly fiddly patch to write... :)

[20:14] <masak> :)

[20:15] *** FROGGS left
[20:15] <masak> oh wow, I hadn't even *thought* of regexes with role parameters in them.

[20:15] <jnthn> Things you didn't realize STD relied on... ;)

[20:16] <jnthn> Now I've just gotta deal with these braids...

[20:16] *** era32 left
[20:17] <sorear> masak: Worse, STD relies on regexes with role parameters participating fully in LTM

[20:17] <masak> oh, right.

[20:18] <masak> I did know that part, actually.

[20:18] <masak> things having to do with stoppers and stuff are parameterizable.

[20:18] <jnthn> sorear: Yeah, that's the bit I just implemented. :)

[20:19] <jnthn> If we're really lucky, I even got it rightish...

[20:19] *** kaare_ left
[20:20] <azawawi> so to use panda and p6doc which are bundled inside rakudo star 2012.09, the PATH variable needs to includes modules/panda/bin and modules/doc/bin, right?

[20:22] <azawawi> p6doc is not in rakduo/install/bin. any reason why?

[20:22] <azawawi> im asking too many questions, right?

[20:24] <jnthn> azawawi: The questions are fine, I just suspect the folks who could answer them are pmichaud or maybe moritz, and they ain't here right now.

[20:25] <jnthn> My guess at the answers is "seems so" and "not sure, maybe no good reasons as making people add multiple things to their path seems odd"

[20:32] *** havenn left
[20:46] <dalek> rakudo/categorically-better: 70b4b22 | jnthn++ | src/Perl6/ (2 files):

[20:46] <dalek> rakudo/categorically-better: Get eval with custom operators to work again.

[20:46] <dalek> rakudo/categorically-better: 

[20:46] <dalek> rakudo/categorically-better: It stopped working because it relied on global grammar modification

[20:46] <dalek> rakudo/categorically-better: before, which won't fly now we're doing mixins.

[20:46] <dalek> rakudo/categorically-better: review: https://github.com/rakudo/rakudo/commit/70b4b22f79

[20:53] *** mberends left
[20:53] <tadzik> azawawi: TAB TAB

[20:53] <azawawi> tadzik: hi

[20:53] <tadzik> hellio

[20:54] <tadzik> so, you have JS in lib/

[20:54] <azawawi> tadzik: thanks first for panda... great work! :)

[20:54] <tadzik> thank you :)

[20:54] <azawawi> yeah lib/Farabi6/files

[20:55] <azawawi> https://github.com/azawawi/farabi6/tree/master/lib/Farabi6/files to be exact

[20:55] <azawawi> panda install seems not to put them in ~/.perl6

[20:55] <tadzik> yes

[20:56] <tadzik> I only made panda handle .pm(6) and .pod

[20:56] <tadzik> didn't really expect anything else in lib/ :)

[20:56] <tadzik> it should probably copy over all the things it doesn't recognize

[20:57] <azawawi> yup

[20:57] <tadzik> I don't know how it is in Perl 5

[20:57] <azawawi> it is basically that or share directory

[20:57] <flussence> I dunno about the *right* way to do it, but $dayjob just runs things from the source directory...

[20:58] <azawawi> farabi6 is basically a perl6 backend with a js editor frontend

[20:58] <azawawi> so i need to find out where it is stored via $?FILE

[20:59] <azawawi> i know it is installed in src in rakudo though but that is weird

[20:59] <azawawi> since i bundled it inside lib/Farabi6 to get namespace protection

[21:03] <dalek> nqp: d3b8c89 | jnthn++ | src/QRegex/NFA.nqp:

[21:03] <dalek> nqp: Fix a thinko.

[21:03] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d3b8c896e1

[21:05] <dalek> rakudo/categorically-better: 2ad86ea | jnthn++ | src/Perl6/Grammar.pm:

[21:05] <dalek> rakudo/categorically-better: Remove premature optimization.

[21:05] <dalek> rakudo/categorically-better: 

[21:05] <dalek> rakudo/categorically-better: Need to always update %?LANG.

[21:05] <dalek> rakudo/categorically-better: review: https://github.com/rakudo/rakudo/commit/2ad86ea0b3

[21:06] *** cognominal_ left
[21:08] *** PacoAir left
[21:13] *** havenn joined
[21:13] *** benabik left
[21:18] *** Exodist joined
[21:26] *** rindolf joined
[21:45] <dalek> rakudo/categorically-better: 78cf73f | jnthn++ | src/Perl6/World.pm:

[21:45] <dalek> rakudo/categorically-better: Process categoricals at import time.

[21:45] <dalek> rakudo/categorically-better: review: https://github.com/rakudo/rakudo/commit/78cf73f7fa

[21:55] <masak> 'night, #perl6

[21:58] <Hor|zon> masak: night

[21:59] *** Moukeddar left
[22:04] *** timbunce_ joined
[22:08] <dalek> nqp: f90a081 | jnthn++ | src/ (3 files):

[22:08] <dalek> nqp: Fix interaction of action methods and ::(...).

[22:08] <dalek> nqp: 

[22:08] <dalek> nqp: This gets custom circumfixes working again in categorically-better.

[22:08] <dalek> nqp: review: https://github.com/perl6/nqp/commit/f90a0814a0

[22:11] *** rindolf left
[22:16] *** rindolf joined
[22:16] <jnthn> sleep &

[22:16] <rindolf> Hi all.

[22:16] <rindolf> jnthn: night.

[22:21] <japhb> o/

[22:21] <rindolf> japhb: what's up?

[22:22] *** bapa joined
[22:22] *** spider-mario left
[22:23] *** azawawi left
[22:24] <japhb> rindolf, just finishing catching up with IRC, about to hop back into perl6-bench coding

[22:24] <japhb> you?

[22:26] <rindolf> japhb: been working on http://fc-solve.shlomifish.org/ 

[22:28] <japhb> rindolf, ah, looks like a fun pastime.  :-)

[22:29] <dalek> perl6-bench: a880c85 | (Geoffrey Broadwell)++ | components.json:

[22:29] <dalek> perl6-bench: Add build steps for rakudo and niecza to components.json.  Currently the rakudo build steps are vastly more paranoid than niecza's.

[22:29] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/a880c85942

[22:29] <dalek> perl6-bench: fd9e390 | (Geoffrey Broadwell)++ | bench:

[22:29] <dalek> perl6-bench: Continue fleshing out build command

[22:29] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/fd9e3901e6

[22:34] *** gaussblurinc joined
[22:36] <gaussblurinc> hello! what about news of perl6? is there any good news or upcoming events?

[22:38] *** bapa left
[22:38] *** bapa joined
[22:38] <japhb> gaussblurinc, You happen to have stopped by when the most active event-goers amongst us are asleep.

[22:39] <japhb> gaussblurinc, How far back since the last time you looked for news on Perl 6?

[22:40] <gaussblurinc> 2010, may, yapc :\

[22:40] <japhb> gaussblurinc, Ah, it's been quite a while then!  A lot of good implementation work has been going on over the last 2 1/2 years.

[22:40] <japhb> Have you tried a recent Rakudo Star release?

[22:41] <gaussblurinc> no, find it on github now and starting to download

[22:42] <japhb> Perfect.  It's a monthly release, and the stuff it's dependent on has already released for this month, so 2012.10 should be coming in the next week or so.

[22:44] <gaussblurinc> good, what about 'happy birthday' or something? is it really stable release?

[22:47] <japhb> It's an iterative release.  In the Perl 6 world, we generally don't have big landmark releases.  We just release something better, month after month, for several years now.

[22:48] <japhb> There are bugs; we fix them.  There are omissions; we fill them.  And so it goes.

[22:56] *** Celelibi left
[23:00] <gaussblurinc> thanks for information!

[23:01] *** Celelibi joined
[23:11] *** MayDaniel left
[23:20] *** grondilu left
[23:21] *** rindolf left
[23:30] *** sunnavy joined
[23:30] *** sunnavy_ left
[23:32] *** gaussblurinc left
[23:44] *** havenn left
[23:47] *** imarcusthis left
