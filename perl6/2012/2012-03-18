[00:35] *** localhost left
[00:36] *** localhost joined
[00:54] *** tyatpi left
[01:20] *** simcop2387 left
[01:21] *** whiteknight left
[01:22] *** simcop2387 joined
[01:28] *** cognominal left
[01:28] *** cognominal joined
[01:32] *** sisar joined
[01:45] *** wolfman2000 joined
[01:51] *** shinobicl___ left
[01:54] *** Chillance left
[01:54] *** alester joined
[02:02] *** PacoAir left
[02:05] *** mucker joined
[02:37] *** plobsing joined
[02:41] *** bacek left
[02:44] *** mucker left
[02:49] *** tyatpi joined
[03:00] <japhb> In Rakudo's src/core/Bool.pm, why are prefix:<!> and prefix:<not> defined in terms of *both* nqp::p6bool() and ternary (returning 0 and 1) instead of just ternary (returning Bool::False and Bool::True directly)?

[03:03] <japhb> And is there any performance difference between spelling it Bool::False/Bool::True versus just False/True?

[03:07] *** dbrx left
[03:20] *** sisar left
[03:38] <sorear> japhb: yes, I think

[03:38] <sorear> unless rakudo constant folds it, which it probably should eventually

[03:38] <sorear> last I checked, rakudo always compiles Foo::Bar into a runtime hash lookup

[03:56] *** orafu left
[03:56] *** orafu joined
[04:02] *** sunnavy left
[04:02] *** kcwu left
[04:06] *** sunnavy joined
[04:06] *** kcwu joined
[04:18] *** birdwindupbird joined
[04:21] *** omgub joined
[04:46] *** sisar joined
[05:23] <TimToady> at a guess, the first thing might be a bootstrapping issue, or it might be a fossil

[05:56] *** alester left
[06:12] *** NamelessTee joined
[06:13] *** tokuhiro_ joined
[06:19] <moritz> \o

[06:24] <sorear> o/

[06:27] <moritz> fwiw True and Bool::True now generate identical lookup paths

[06:28] <moritz> though Bool is special-cased in the grammar as a temporary cheat

[06:58] <dalek> roast: ba26d03 | moritz++ | S04-phasers/pre-post.t:

[06:58] <dalek> roast: remove outdated DBCish PRE/POST tests

[06:58] <dalek> roast: 

[06:58] <dalek> roast: also fudges for rakudo

[06:58] <dalek> roast: review: https://github.com/perl6/roast/commit/ba26d0301c

[07:27] *** birdwindupbird left
[07:28] *** Trashlord left
[07:30] *** Trashlord joined
[07:45] <japhb> sorear, TimToady, moritz: Thanks for the info.  Up for next round of tuits: seeing if I can knock off the top few items in this profile trace.

[08:07] *** maja joined
[08:08] *** maja left
[08:09] *** sisar left
[08:40] *** kaare_ joined
[08:40] *** bacek joined
[08:56] *** sisar joined
[09:26] *** fglock joined
[09:29] *** bacek left
[09:42] *** bacek joined
[09:46] *** MayDaniel joined
[09:47] <fsergot> o/

[09:55] *** birdwindupbird joined
[10:10] *** MayDaniel left
[10:17] *** bacek left
[10:26] <moritz> \o

[10:26] <moritz> std: PRE $_ > 5

[10:26] <ranguard> moritz: redirects are live, Ask pointed out I hadn't kept the old redirects, if you find you are getting quite a few 404's the redirects to impliment are here: https://github.com/perlorg/perlweb/blob/29fa1e5a462f5372aa2da66d1ce99f600fb835c1/docs/dev/.htredirects (replacing /perl6/ with /archive where relevant :)

[10:26] <p6eval> std 1ad3292: OUTPUT«ok 00:01 111m␤»

[10:26] <moritz> ranguard: ok, thanks

[10:26] <ranguard> morning btw :)

[10:26] <moritz> and good morning to you too :-9

[10:27] <moritz> rakudo: sub a($x) { PRE $x > 5; $x ** 2 }; say a 10; say a 4

[10:27] <p6eval> rakudo eccc61: OUTPUT«100␤Precondition failed␤  in sub a at /tmp/kFf4qYcDV3:1␤  in block <anon> at /tmp/kFf4qYcDV3:1␤␤»

[10:27] *** kmp joined
[10:32] *** sisar left
[10:33] *** bacek joined
[10:33] *** bacek left
[10:34] *** bacek joined
[10:34] *** bacek left
[10:51] *** bacek joined
[10:52] *** bacek left
[10:52] <moritz> jnthn: any idea why http://moritz.faui2k3.org/tmp/pre-post-typed-exceptions.patch segfaults when running a PRE block, indendently of whether the precondition fails or not?

[10:53] *** bacek joined
[10:53] <moritz> it segfaults in Parrot_oo_get_class

[10:53] <moritz> and also with --ll-exception

[10:53] *** bacek left
[10:58] <moritz> rakudo: sub a() { PRE 2 }; say a

[10:58] <p6eval> rakudo eccc61: OUTPUT«Nil␤»

[10:58] *** mj41 joined
[11:03] <moritz> oh, one thing I'm doing wrong is class X::Phaser::PrePost not inheriting from X::Base

[11:10] *** bacek joined
[11:11] *** bacek left
[11:20] <masak> good postnoon, #perl6

[11:22] *** tokuhiro_ left
[11:27] *** bacek joined
[11:27] *** fglock left
[11:37] *** tyatpi left
[11:37] *** _ilbot left
[11:37] *** _ilbot joined
[12:04] <dalek> rakudo/nom: 5264177 | moritz++ | t/spectest.data:

[12:04] <dalek> rakudo/nom: run pre-post.t

[12:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5264177fe4

[12:11] *** whiteknight joined
[12:38] <moritz> hm, fixed the inheritance issue, and still segfaults :(

[12:41] <moritz> oh, it segfaults during the compilation

[12:58] *** PacoAir joined
[13:00] *** sporous left
[13:00] *** sporous joined
[13:04] *** shinobicl___ joined
[13:04] <moritz> but it doesn't segfault inside the changed code

[13:05] <masak> spooky segfault at a distance.

[13:05] <masak> you wrote such exquisitely beautiful code that some unrelated code felt jealous and went on strike.

[13:05] <timotimo> no segfault in the changed code? sign of smashed stack/heap state?

[13:06] <moritz> yes, but I only touched fairly high-level code

[13:07] <timotimo> hm :|

[13:09] <moritz> http://moritz.faui2k3.org/tmp/pre-post-typed-exceptions.patch is the patch

[13:10] <moritz> and it segfaults with --target=pir , but not with -c

[13:10] <moritz> so it must be during codegen

[13:11] <moritz> but it gets to the return PAST::Var.new(:name('Nil'), :scope('lexical_6model'));

[13:11] *** [particle]1 joined
[13:11] *** arnsholt_ joined
[13:13] *** snarkyboojum_ joined
[13:13] *** colomon_ joined
[13:13] *** mj41_nb joined
[13:14] *** robins joined
[13:14] *** pyrimidine1 joined
[13:19] *** mj41 left
[13:19] *** Trashlord left
[13:19] *** att_ left
[13:19] *** colomon left
[13:19] *** [particle] left
[13:19] *** robinsmidsrod left
[13:19] *** pyrimidine left
[13:19] *** arnsholt left
[13:19] *** snarkyboojum left
[13:19] *** Yappoko____ left
[13:19] *** colomon_ is now known as colomon

[13:19] *** snarkyboojum_ is now known as snarkyboojum

[13:20] *** att_ joined
[13:20] *** Yappoko____ joined
[13:20] *** Trashlord joined
[13:21] *** FACEFOX left
[13:23] *** whiteknight left
[13:25] *** robins is now known as robinsmidsrod

[13:27] <Teratogen> what the

[13:28] *** FACEFOX joined
[13:57] *** birdwindupbird left
[13:58] <masak> as seen on Twitter: "I caught my mate drinking brake fluid. He said 'Don't worry, I can stop whenever I like.'"

[14:00] <masak> autopun interwoven with clich?.

[14:04] *** whiteknight joined
[14:04] <shinobicl___> hi... i have this derived class that works as i expect.... but it only have one issue:

[14:04] <shinobicl___> nom: class D is Date { has Int $.x is rw; method new(:$year!, :$month!, :$day!, :$x!) { say "values: $year, $month, $day, $x"; my $D = callwith(year=>$year, month=>$month, day=>$day); $D.x = $x; return $D; }; method perl { say "D.new($.year, $.month, $.day, $.x)"; }; }; my $var = D.new(year=>2012, month=>12, day=>2, x=>99); say $var.^attributes; say $var.perl; say $var.get-daycount();

[14:04] <p6eval> rakudo 526417: OUTPUT«values: 2012, 12, 2, 99␤$!x $!year $!month $!day $!daycount␤D.new(2012, 12, 2, 99)␤True␤56263␤»

[14:04] <shinobicl___> the issue is that i want D to be inmmutable. But i don't know how to remove the "is rw" from x and still makeit work

[14:09] <jnthn> Good morning :)

[14:09] <jnthn> Just droping by for a moment...

[14:09] <jnthn> moritz: The issue is that find_symbol returns the actual symbol, not a PAST node to look it up.

[14:10] <jnthn> moritz: Need a self.get_ref(...) around the find_symbol to make it work

[14:10] *** lichtkind joined
[14:12] <lichtkind> moin

[14:13] *** xinming joined
[14:14] *** Vespakoen joined
[14:15] * jnthn disappears again

[14:15] *** ab5tract joined
[14:15] <gfldex> shinobicl___: class A { has $!x; }; my $a = A.new(:x(10)); $a.x = 11;

[14:17] <gfldex> and you should be careful about anything being inmutable that is not a constant

[14:19] <shinobicl___> my priority is that it should be inmutable. moritzs suggested that if the base clase is inmutable, i should try to make the derived one inmutable too.

[14:21] <kmp> Hi guys. Could I ask if there are any known Radoku test failures at the moment? I was just having a look around the source, built it and saw that the 01-load test failed for me.

[14:22] <lumi__> shinobicl___: I think you're meant to write your own submethod BUILD() and not method new

[14:24] <gfldex> kmp: Rakudo as in git pull?

[14:25] <kmp> Yeah. Should I be surprised at a failing test?

[14:26] <gfldex> make test should work

[14:26] <gfldex> i'm building right now, can tell you in a few minutes if it works for me

[14:26] <kmp> Good stuff. Thanks.

[14:35] <gfldex> kmp: This is perl6 version 2012.02-183-g5264177 built on parrot 4.1.0 revision RELEASE_4_1_0-105-gd923903

[14:35] <gfldex> fails at t/02-embed/01-load.t ............... No subtests run

[14:35] <gfldex> i would not worry tho

[14:38] *** GlitchMr joined
[14:40] *** Chillance joined
[14:41] *** xinming left
[14:44] *** Teratogen left
[14:45] <kmp> Yep, that's the one. I'll keep on exploring. Thanks.

[14:50] *** xinming joined
[14:54] *** xinming left
[14:56] *** tyatpi joined
[15:03] *** Vespakoen left
[15:08] *** xinming joined
[15:11] <masak> gfldex: you can't pass non-public attributes to the default .new

[15:13] <masak> also, having things be immutable-but-not constant is perfectly fine; the main thing is that the clas upholds an invariant of some sort.

[15:14] <masak> immutable types can even have hidden moving parts, if it serves them. for caching purposes, for example.

[15:14] <masak> of course, you should never be able to tell from the outside.

[15:20] *** tyatpi left
[15:29] <kmp> quit

[15:29] *** kmp left
[15:29] *** Vespakoen joined
[15:36] *** catalin joined
[15:37] *** catalin left
[15:38] *** mj41_nb left
[15:45] *** catalin joined
[15:46] *** Psyche^ joined
[15:49] *** Patterner left
[15:49] *** Psyche^ is now known as Patterner

[15:52] *** lichtkind left
[15:52] *** GlitchMr42 joined
[15:53] *** FACEFOX left
[15:54] *** catalin left
[15:54] *** FACEFOX joined
[15:55] *** catalin joined
[15:55] *** GlitchMr left
[15:55] *** catalin_ joined
[15:55] *** catalin left
[15:55] *** catalin_ left
[15:55] *** catalin joined
[15:57] *** catalin left
[15:57] *** [particle]1 is now known as [particle]

[16:03] <masak> quiet day today.

[16:06] *** fglock joined
[16:10] <felher> indeed it is.

[16:13] *** s1n joined
[16:13] *** s1n left
[16:15] *** noteventime joined
[16:18] <moritz> \o

[16:20] <felher> o/

[16:25] *** GlitchMr joined
[16:29] *** GlitchMr42 left
[16:30] * TimToady blames jnthn for taking good care of himself...  :)

[16:31] *** xinming left
[16:32] *** xinming joined
[16:34] *** birdwindupbird joined
[16:37] *** Vespakoen left
[16:37] *** Vespakoen joined
[16:39] *** ab5tract left
[16:40] *** [particle] left
[16:45] <dalek> rakudo/nom: d1505ae | moritz++ | src/ (2 files):

[16:45] <dalek> rakudo/nom: Typed exceptions from PRE/POST failures

[16:45] <dalek> rakudo/nom: 

[16:45] <dalek> rakudo/nom: jnthn++ for the help

[16:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d1505aee7c

[16:47] *** mj41_nb joined
[16:48] *** leprevost left
[16:50] *** GlitchMr42 joined
[16:53] *** GlitchMr left
[16:56] * masak .oO( jnthn is relaxing, breathing Good Air... )

[16:57] *** plobsing left
[16:57] <moritz> evalbot rebuild nom

[16:57] <p6eval> NOT OK (maybe a rebuild is already in progress?)

[16:58] <masak> evalbot rebuild secret robot army bent on destroying the world

[16:58] <p6eval> OK (started asynchronously)

[16:58] <dalek> Rebuild of secret complete.

[16:58] <masak> o.O

[16:59] <benabik> Now the secret is out.  Careful, masak, they'll be after you first for revealing them.

[16:59] <masak> at least the bots are named, reassuringly, p6eval and... dalek. O.O

[17:01] <dalek> evalbot: 07d32e8 | moritz++ | evalbot.pl:

[17:01] <dalek> evalbot: be a wee bit stricter in checking compiler names for rebuild

[17:01] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/07d32e8c56

[17:01] *** mj41_nb left
[17:01] *** p6eval left
[17:03] <dalek> evalbot: 4f8355b | moritz++ | evalbot.pl:

[17:03] <dalek> evalbot: fix regression

[17:03] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/4f8355bf1d

[17:03] *** p6eval joined
[17:03] *** ChanServ sets mode: +v p6eval

[17:03] <benabik> dalek: Where is the Doctor?

[17:03] <moritz> who?

[17:03] <moritz> SCNR

[17:04] <moritz> r: sub a($x) { PRE $x > 0; say $x.sqrt }; a 9; a -9

[17:04] <p6eval> rakudo d1505a: OUTPUT«3␤Precondition ' $x > 0' failed␤  in sub a at /tmp/2279kWnNQ4:1␤  in block <anon> at /tmp/2279kWnNQ4:1␤␤»

[17:04] *** MayDaniel joined
[17:05] <moritz> r: sub a($x) { PRE { $x > 0 }; say $x.sqrt }; a 9; a -9

[17:05] <benabik> Doctor Who's on first?

[17:05] <p6eval> rakudo d1505a: OUTPUT«3␤Precondition ' { $x > 0 }' failed␤  in sub a at /tmp/CN2Pz3OkVy:1␤  in block <anon> at /tmp/CN2Pz3OkVy:1␤␤»

[17:05] <moritz> r: sub a($x) { PRE { $x > 0 }; say $x.sqrt }; try a -9; say $!.perl

[17:05] <p6eval> rakudo d1505a: OUTPUT«X::Phaser::PrePost.new(what => "Precondition", condition => " \{ \$x > 0 }")␤»

[17:20] *** DarthGandalf left
[17:21] <dalek> roast: efa9610 | moritz++ | S32-exceptions/misc.t:

[17:21] <dalek> roast: typed exceptions for PRE/POST failures

[17:21] <dalek> roast: review: https://github.com/perl6/roast/commit/efa96102e4

[17:24] *** DarthGandalf joined
[17:32] *** MayDaniel left
[17:39] *** rihegher joined
[17:48] *** havenn joined
[17:49] <masak> moritz: that's just so cool. it prints the code.

[17:49] <masak> moritz: did you notice, however, that there's a stray space in the beginning of the code string?

[17:49] <moritz> masak: it's not stray, but neither is it pretty

[17:50] <moritz> it comes verbatimly from the <blorst> rule that is used to parse the text after the PRE

[17:50] <masak> I can see how it occurs. but that's an explanation, not a good reaso... right.

[17:51] <masak> maybe apply a .trim somewhere?

[17:52] <moritz> I think I should, yes

[17:52] <moritz> I also think that I should pass the phaser name to the exception object, and do the PRE -> precondition  translation inside the error message, not inside Perl6::World

[17:53] <masak> nod.

[17:53] * masak has been discovering this weekend exactly what can and can't be done in modern webapps without a mouse

[17:53] <masak> as far as I can see, there's no way to sign out of Gmail in Chrome without a mouse.

[17:53] <moritz> wow

[17:53] <masak> also as far as I can see, there's no way to give a github issue a label, save for pressing Tab 34 times. :) but I'm less sure about that one.

[17:54] <moritz> I think I'd use some browser extension like hit-a-hint for mouseless browsing

[17:54] <arnsholt_> masak: If you're mouseless, an extension like vimium might be in order (if you can install it without a mouse =)

[17:55] <moritz> ah yes, vimperator and the likes

[17:55] <moritz> I don't have it installed because my wife wants to use my browser too :-)

[17:55] <arnsholt_> =D

[17:56] <masak> moritz: http://www.siftsoft.com/ claims to be a port of Hit-a-Hint. I'll try it out.

[17:57] *** rihegher left
[17:59] <masak> it works! \o/

[17:59] <masak> moritz++ arnsholt_++

[18:01] <tadzik> 'evening humans

[18:02] <moritz> \o tadzik 

[18:03] <masak> tadzik: good evening, carbon-based life form.

[18:03] *** GlitchMr joined
[18:04] <dalek> rakudo/nom: 924712d | moritz++ | src/ (2 files):

[18:04] <dalek> rakudo/nom: move PRE/POST error message logic to the error class; trim condition text

[18:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/924712d262

[18:04] <dalek> roast: 9831233 | moritz++ | S32-exceptions/misc.t:

[18:04] <dalek> roast: track phaser error changes in rakudo

[18:04] <dalek> roast: review: https://github.com/perl6/roast/commit/9831233761

[18:04] <moritz> evalbot rebuild nom

[18:04] <p6eval> OK (started asynchronously)

[18:04] *** wolfman2000 left
[18:05] *** att_ left
[18:05] *** GlitchMr42 left
[18:05] <moritz> masak: that commit should make you even more happy :-)

[18:06] <moritz> I wonder if there are other places where it would help to include the original source code in the error message

[18:07] <masak> this is the first time I see the throws_like assertion. it does indeed make me happy. :)

[18:07] <masak> moritz++

[18:07] <moritz> erm, I meant the rakudo commit :-)

[18:07] *** havenn left
[18:09] <moritz> fwiw throws_like is currently defined in that test file; once I get more feedback about it, I'll move it to Test.pm and S24

[18:10] <dalek> Rebuild of nom complete.

[18:11] <moritz> it is very useful, but it seems to be on a different level than the other Test.pm functions

[18:11] *** GlitchMr42 joined
[18:11] <moritz> in particular it runs several TAP tests per call to the test function

[18:12] <moritz> I wonder if it should go into Test::Util instead of Test

[18:14] *** GlitchMr left
[18:14] *** fglock left
[18:15] *** notevent` joined
[18:17] *** noteventime left
[18:19] *** kmp joined
[18:21] *** havenn joined
[18:23] *** kmp left
[18:26] <masak> probably.

[18:32] * [Coke] yawns

[18:37] *** bacek left
[18:45] <[Coke]> https://gist.github.com/1476841#file_perl6_pass_rates

[18:46] <[Coke]> both niecza and pugs are now passing less tests- I wassume this is because someone removed passing tests from the suite.

[18:53] *** bacek joined
[19:03] <moritz> yes, I removed some that were part of deprecated features

[19:05] *** dwierenga left
[19:06] *** cogno joined
[19:09] *** birdwindupbird left
[19:09] *** GlitchMr42 left
[19:18] *** havenn left
[19:30] *** cogno left
[19:31] *** benabik left
[19:32] *** cogno joined
[19:32] *** benabik joined
[19:41] *** benabik left
[19:41] *** benabik joined
[19:43] *** pernatiy left
[19:43] *** benabik left
[19:43] *** havenn joined
[19:44] *** benabik joined
[19:52] *** pernatiy joined
[19:57] *** kmp joined
[20:01] *** havenn left
[20:04] *** mj41_nb joined
[20:09] *** maxiozzi joined
[20:17] *** y3llow_ joined
[20:17] *** bruges_ joined
[20:18] *** bruges left
[20:19] *** y3llow left
[20:19] *** y3llow_ left
[20:20] *** y3llow joined
[20:21] *** y3llow left
[20:22] <dalek> roast: 2608abd | jonathan++ | S (2 files):

[20:22] <dalek> roast: Merge branch 'master' of github.com:/perl6/roast

[20:22] <dalek> roast: review: https://github.com/perl6/roast/commit/2608abdba1

[20:22] <dalek> roast: b4d5c62 | jonathan++ | S04-phasers/pre-post.t:

[20:22] <dalek> roast: Toss outdated TODO comment.

[20:22] <dalek> roast: review: https://github.com/perl6/roast/commit/b4d5c62e74

[20:22] *** y3llow joined
[20:24] *** y3llow left
[20:24] *** y3llow joined
[20:37] *** xinming left
[20:37] *** xinming joined
[20:41] *** havenn joined
[20:44] *** donaldh joined
[20:50] <jnthn> I can't see anything in the spec that indicates that POST phasers run in the opposite order to PRE phasers. The tests don't expect it either; a comment in the tests says the spec seems to indicate otherwise, yet I can't find where the spec indicates at all

[20:50] *** [particle] joined
[20:51] *** [particle] left
[20:54] *** donaldh left
[21:04] *** xinming left
[21:06] <dalek> rakudo/nom: 8f4a063 | jonathan++ | src/ (2 files):

[21:06] <dalek> rakudo/nom: POST block gets $_ set to the result.

[21:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8f4a063196

[21:06] <dalek> roast: 2339d22 | jonathan++ | S04-phasers/pre-post.t:

[21:06] <dalek> roast: Unfudge a test for Rakudo.

[21:06] <dalek> roast: review: https://github.com/perl6/roast/commit/2339d22abb

[21:08] *** plobsing joined
[21:09] <moritz> reverse order?

[21:10] <moritz> is there anything wrong with running them in the order that they appear?

[21:10] <jnthn> moritz: Like END blocks do

[21:10] <jnthn> moritz: Not that is immediately clear to me.

[21:10] <moritz> a POST is more like a LEAVE than an END

[21:11] <jnthn> LEAVE also has LIFO semantics, iirc

[21:11] <moritz> hm

[21:15] <dalek> rakudo/nom: 1968b89 | jonathan++ | src/ops/perl6.ops:

[21:15] <dalek> rakudo/nom: If one POST fails, don't run any more. The spectest for this still fails as it expects POST to run in declaration order, not reverse order.

[21:15] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1968b89b59

[21:15] <jnthn> At least, we implement LEAVE with those semantics.

[21:15] *** tadzik is now known as CptKirk

[21:15] *** CptKirk is now known as tadzik

[21:16] <moritz> I don't really see the use case for multiple POST phasers in the same block, so I can't comment on the desired semantics

[21:16] <moritz> I mean when you write POST foo; POST bar; you can juste write POST foo and bar;

[21:19] <jnthn> OK

[21:20] <jnthn> Well, once it's decided, it should just be a case of changing the tests or changing an unshift to a push :)

[21:23] *** xenu left
[21:23] *** xenu joined
[21:24] *** cogno left
[21:27] * jnthn heads to the part of town that's rumored to have proper beer o/

[21:43] *** cogno joined
[21:45] *** shinobicl___ left
[21:46] *** havenn left
[21:51] *** raszym joined
[21:56] <masak> yes, END and LEAVE and POST have LIFO semantics. it feels somehow right/consistent that they all do.

[21:57] <masak> 'night, #perl6

[22:00] <japhb> Anyone around that can walk me through Rakudo's gimme/reify/REIFY code?

[22:07] *** havenn joined
[22:14] *** shinobicl___ joined
[22:14] *** cogno left
[22:19] *** benabik left
[22:19] *** benabik joined
[22:20] *** benabik left
[22:23] *** kaare_ left
[22:25] *** havenn left
[22:28] *** cogno joined
[22:33] *** NamelessTee left
[22:34] *** jferrero left
[22:35] *** jferrero joined
[22:36] *** raszym left
[22:37] *** jferrero left
[22:45] *** NamelessTee joined
[22:52] *** bacek_at_work left
[22:56] *** aloha left
[22:59] *** aindilis joined
[23:07] <sorear> goood * #perl6

[23:07] *** cogno left
[23:14] *** cogno joined
[23:15] *** aloha joined
[23:19] *** NamelessTee left
[23:20] *** mj41_nb left
[23:46] *** cogno left
[23:49] *** xinming joined
[23:50] *** havenn joined
[23:51] *** PacoAir left
