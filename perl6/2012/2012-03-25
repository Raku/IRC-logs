[00:01] *** spider-mario left
[00:01] *** shinobicl__ left
[00:06] *** isBEKaml left
[00:16] <TimToady> perl6: say (1, 1.000000000001, 1.000000000002 ... *)[10]

[00:16] <p6eval> rakudo a4c78f, niecza v15-6-gefda208: OUTPUT«1.00000000001␤»

[00:16] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "["␤    at /tmp/UtrSMuGBxC line 1, column 46␤»

[00:20] <sorear> .000000000001 is larger than 2**-64

[00:31] *** thou left
[00:32] *** whiteknight joined
[00:32] <TimToady> just making sure what I said on p6l was troo

[00:33] <colomon> perl6: say (1, 1.000000000001, 1.000000000002 ... *)[^10]

[00:33] <p6eval> rakudo a4c78f, niecza v15-6-gefda208: OUTPUT«1 1.000000000001 1.000000000002 1.000000000003 1.000000000004 1.000000000005 1.000000000006 1.000000000007 1.000000000008 1.000000000009␤»

[00:33] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "[^"␤    at /tmp/4ddP672TH0 line 1, column 46␤»

[00:33] *** wolfman2000 joined
[00:35] *** localhost left
[00:37] *** localhost joined
[00:42] *** wooden left
[00:49] *** wooden joined
[00:52] <tadzik> masak: pong :)

[00:52] <tadzik> colomon: still around?

[00:52] <colomon> yes

[00:52] <tadzik> had some questions about panda?

[00:53] <colomon> was trying to figure out how the ecosystem works.

[00:53] <tadzik> http://feather.perl6.nl:3000/projects.json now has Math::ContinuedFractions; it's updated hourly

[00:53] <colomon> but it seems to have sorted itself out.

[00:53] <colomon> yes.

[00:53] <tadzik> there's a script on feather which collects everything from the perl6/ecosystem repo and puts it in one big JSON for module manager's sake

[00:53] <tadzik> s/manager's/managers'/

[00:53] <colomon> I just wasn't patient

[00:54] <tadzik> impatience is one of our virtues :)

[00:55] <japhb> (backlogging) colomon, yes, I've seen panda running exceptionally slowly on Rakudo.  My current mini-benchmark is 'panda list', which takes ~23s on my local machine.  Analyzing the profile, I saw most of the aggregate time went to JSON parsing; of that, a lot of time spent in QRegex, but a lot more just doing general list slinging operations -- I concluded (among other things) that Rakudo pays dearly performance-wise for its current lazine

[00:55] <japhb> ss design.

[00:55] <colomon> also, at least on my system, saying   panda search Math     is ludicrously slow.

[00:56] <tadzik> fwiw, JSON is really a piece of cake in all this

[00:56] <colomon> It only takes 6 seconds on niecza, so it doesn't seem like your algorithms are at fault.  :)

[00:56] <tadzik> loading modules, on the other hand...

[00:56] <tadzik> SVG::Plot took 20.5 seconds to generate a pacman chart

[00:56] <tadzik> 20 to load SVG::Plot, 0.5 to generate a chart

[00:56] <colomon> woof

[00:56] <tadzik> yeah

[00:57] <tadzik> so really, I don't even worry about json these days

[00:58] *** ponbiki joined
[00:58] <japhb> (backlogging still) TimToady, would it help to have an index page on perl6.org for links to examples in various places, including a more useful (to us) index of Perl 6 code on RosettaCode?

[01:00] <japhb> TimToady, FWIW, I was running Forest Fire under both Niecza and Rakudo yesterday, from one of your gists.  Under Rakudo it's interesting but slow.  Under Niecza, a smallish map is updated fast enough to look truly animated.

[01:01] <TimToady> japhb: yes, an index with #perl6 tags would be useful

[01:01] <TimToady> and yes, niecza runs it 20x faster than rakudo currently

[01:02] <japhb> '#perl6 tags'?  Oh, you mean, links that go directly to that fragment ID.

[01:02] <TimToady> yeah

[01:02] <TimToady> kinda bums me that RC doesn't do that autmatically for language pages

[01:02] <japhb> Yeah, that's what I'd meant.  OK, where is the repo for perl6.org?

[01:02] <japhb> That is kinda odd.

[01:03] <japhb> Isn't mikemol (an|the) admin there?

[01:03] <colomon> TimToady: forest fire doesn't seem to work for me?

[01:03] <TimToady> [email@hidden.address]
[01:04] <TimToady> colomon: I haven't updated it with a working version yet, if you're talking about the RC version

[01:04] <colomon> ah, yes

[01:04] <TimToady> hang on a sec

[01:04] <colomon> that would tend to cause problems.  :)

[01:08] <TimToady> okay, the version there now should work under either niecza or rakudo

[01:11] <TimToady> japhb: actually, they are #Perl_6 tags

[01:12] <japhb> TimToady, gotcha.  I would have checked.  ;-)

[01:13] <colomon> TimToady: works for me now, danke.

[01:13] <TimToady> colomon: I particularly like the take // next idiom that gets rid of the conditional that used to be in the list comprehension

[01:13] *** zhutingting joined
[01:14] <colomon> take-rw // next, you mean, right?

[01:14] <TimToady> in this case, yes, but I was speaking one step more generically

[01:14] <colomon> TimToady++

[01:16] * colomon is trying to understand this code

[01:29] <sorear> I am now replying to Jon Lang to say "Interval arithmetic _by default on all Nums_ is highly unlikely to ever happen"

[01:29] <sorear> someone speak up if I'm being blatantly wrong here.

[01:30] <colomon> +1

[01:30] <colomon> If he wants it, he's free to implement it himself as a library.

[01:43] *** jferrero joined
[01:44] <sorear> I've decided to try being the voice of "that will never happen" on p6l

[01:44] <sorear> maybe I can inject a little sanity

[01:45] <colomon> It strikes me as a thankless job.  sorear++

[01:48] *** am0c joined
[01:52] *** benabik left
[01:54] <TimToady> well, there are far too many people who *only* naysay, but sorear++ has done enough yeaysaying to have earned the right to naysay from time to time :)

[01:55] *** alester joined
[02:10] *** benabik joined
[02:18] *** cogno joined
[02:23] *** whiteknight left
[02:30] *** cogno left
[02:38] *** colomon left
[02:40] *** colomon joined
[02:43] *** tokuhiro_ joined
[02:47] *** xinming left
[02:49] *** xinming joined
[02:56] *** Patterner left
[02:57] *** NamelessTee left
[03:02] *** ponbiki left
[03:03] *** cogno joined
[03:04] *** Psyche^ joined
[03:04] *** Psyche^ is now known as Patterner

[03:04] *** noteventime left
[03:10] *** orafu left
[03:11] *** orafu joined
[03:16] *** am0c left
[03:24] *** Chillance left
[03:28] *** Chillance joined
[03:44] *** PacoAir left
[03:52] *** flussence left
[04:23] <moritz> \o

[04:23] *** Su-Shee_ joined
[04:24] <moritz> there is one sane-ish proposal hidden deep in that thread "How to make a new operator"

[04:24] <moritz> that is, make sequence detection work with Rats and Ints, but not with Nums

[04:25] <moritz> I'm not sure what to think of it

[04:25] <moritz> thing is, Num *can* represent a huge number of commonly used values accurately

[04:25] <moritz> and can do arithmetic without the dreaded/stigmatized floating point errors

[04:27] *** Su-Shee left
[04:27] *** slavik1 left
[04:28] <moritz> so I kinda think we played our part in preventing floating point errors by making Rat the default for numbers like 0.1

[04:29] <moritz> and it's overly pessimistic to pessimize the sequence operator to barf on Nums

[04:41] <sorear> hmm, I am trying to evaluate if David Green's messages would benefit from a reply

[04:42] <sorear> the only intelligible reply I can make to the second one is "I like the name, it reminds me of pattern matching in the functional programming sense, which it kind of is"

[04:42] <sorear> the first one I can only say ARGH HAVEN'T WE GONE OVER THIS A MILLION TIMES to

[04:43] <sorear> also, infinite regress.  What's 1 + 1e-50 > 1 ?

[04:44] <sorear> if that's an error, then what should happen with abs($x - 1) < 0.2 if $x happnens to be exactly 1.2e0?

[04:50] <moritz> sorear: hey, I know the perfect reply for it

[04:51] <moritz> n: multi infix:<==>($a, $b, :$prec) { abs($a-$b) < $prec }; say 1 == 2 :prec(5);

[04:51] <p6eval> niecza v15-6-gefda208: OUTPUT«True␤»

[04:54] <moritz> p6: say pi.WHAT

[04:54] <p6eval> rakudo a4c78f, niecza v15-6-gefda208: OUTPUT«Num()␤»

[04:54] <p6eval> ..pugs: OUTPUT«Rat␤»

[04:55] * moritz replies

[05:17] *** tokuhiro_ left
[05:31] <sorear> moritz: "before taken into consideration before" - I think you forgot to finish writing a paragraph

[05:55] *** Chillance left
[05:59] *** tokuhiro_ joined
[06:10] *** havenn joined
[06:12] *** birdwindupbird joined
[06:24] *** alester left
[06:33] <cogno> perl6: say rx|a| || rx|b|

[06:33] <p6eval> rakudo a4c78f: OUTPUT«===SORRY!===␤Confused␤at /tmp/LO9SXq1ps8:1␤»

[06:33] <p6eval> ..pugs: OUTPUT«<Regex>␤»

[06:33] <p6eval> ..niecza v15-6-gefda208: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/lib/CORE.setting line 1226 (warn @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 234 (Mu.Str @ 10) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.setting…

[06:44] *** HarryS left
[06:51] *** HarryS joined
[07:03] *** cogno left
[07:07] *** kaare_ joined
[07:23] *** zhutingting left
[07:32] *** ggoebel left
[07:53] *** havenn left
[07:56] *** mucker joined
[08:23] *** birdwindupbird left
[08:28] *** ggoebel joined
[08:33] *** Su-Shee_ is now known as Su-Shee

[08:35] *** Su-Shee left
[09:14] *** MayDaniel joined
[09:26] *** mucker left
[09:26] *** mucker joined
[09:27] *** jlaire left
[09:27] *** fsergot joined
[09:27] *** jlaire joined
[09:27] <fsergot> hi #perl6 o/

[09:27] <tadzik> hi fsergot 

[09:37] *** NamelessTee joined
[09:38] <mikemol> japhb: Yes, I'm an admin on Rosetta Code. Owner and chief admin, if you prefer.

[09:39] <mikemol> japhb: Also, if you link to "Pagename#Perl%206", that should take the visitor directly to the anchor named "Perl 6", which should be at the top of any perl 6 code on RC.

[09:44] <masak> morning, #perl6

[09:44] * masak grumbles about DST

[09:45] <dalek> perl6.org: f4744f1 | (Geoffrey Broadwell)++ | source/community/rosetta_code.html:

[09:45] <dalek> perl6.org: Add first ideas for Rosetta Code community page; will need discussion and expansion before being linked into rest of site.

[09:45] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/f4744f145f

[09:47] <japhb> mikemol, The above commit is the beginnings of a Rosetta Code launch page for perl6.org.  It's clearly not very filled in, but hopefully the concept is clear.  Once we fill it in more completely, hopefully it can be linked in and become visible to passerby.  :-)

[09:48] <moritz> japhb: please don't use underscores in URLs

[09:48] <moritz> either no joiner (just like rosettacode.org), or use a - instead

[09:48] <japhb> Ah, sorry, got used to looking at all the wiki links on RC itself ...

[09:48] <fsergot> hi masak o/

[09:49] <mikemol> Yeah. MW is stupid about _ and " ". -.-

[09:49] <japhb> moritz, would you like me to rename and push, or are you already doing so?

[09:51] <japhb> I don't have the energy to do it tonight (I'm already up way later than I'd intended), but the CSS links on the site should be made relative, so that it is easier to see styled pages locally ....

[09:53] * japhb doing the rename ...

[09:54] <dalek> perl6.org: 035bdbc | (Geoffrey Broadwell)++ | source/community/rosetta (2 files):

[09:54] <dalek> perl6.org: Rename rosetta_code.html -> rosettacode.html, as per moritz++

[09:54] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/035bdbc659

[10:01] <japhb> The update bot has pushed it: http://perl6.org/community/rosettacode.html

[10:03] <japhb> Comments appreciated!  Before I spend too much energy filling it in, I want to be sure consensus is that I'm on the right track.  Or alternately, that someone goes in and fixes it while I sleep.

[10:03] <japhb> Which I should do.  :-)

[10:04] <japhb> Will backlog.  &

[10:04] <mikemol> I can give feedback on RC's structure, but not much else.

[10:05] *** mj41 joined
[10:07] <moritz> japhb++ # I like it

[10:07] <moritz> japhb: fwiw please use http://perl6.org/community/rosettacode as the URL, the .html is merely an implementation detail

[10:10] *** spider-mario joined
[10:19] <tadzik> phenny: tell sorear is it normal that I have to run 'make' on niecza twice? See https://gist.github.com/2192705

[10:19] <phenny> tadzik: I'll pass that on when sorear is around.

[10:24] *** fgomez left
[10:35] *** zhutingting joined
[10:41] <colomon> tadzik: do you have make set up to be parallel by default?

[10:45] <tadzik> yes, I think that's the problem

[10:48] <colomon> I suppose that means the Makefile issue is a missing dependency?

[10:49] <tadzik> I think so

[10:56] *** MayDaniel left
[10:56] *** mj41 left
[10:57] <colomon> tadzik: I've got what I think might be a solution, but looking at the Makefile I suspect it's not how sorear++ would do it.  Guess we should wait for him to wake up.

[11:03] *** zipf joined
[11:04] *** MayDaniel joined
[11:05] *** zipf left
[11:06] *** whiteknight joined
[11:08] *** lestrrat left
[11:09] *** lestrrat joined
[11:12] *** zipf joined
[11:20] <masak> japhb++ # http://perl6.org/community/rosettacode

[11:20] *** BruceZu joined
[11:21] <masak> BruceZu: hi.

[11:28] <dalek> perl6.org: ce406f7 | moritz++ | README:

[11:28] <dalek> perl6.org: [README] update my IRC nick

[11:28] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/ce406f7927

[11:28] <dalek> perl6.org: 47ca947 | moritz++ | README:

[11:28] <dalek> perl6.org: [README] link to URLs without .html extension

[11:28] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/47ca94741c

[12:10] *** derrazo left
[12:12] <felher> japhb++ # nice new page :)

[12:13] *** zipf left
[12:31] <gfldex> masak: is Web.pm supposed to build under cygwin?

[12:35] <masak> gfldex: as far as I know, yes.

[12:35] <masak> gfldex: but it's not under active development, so it may simply have bit-rotted.

[12:35] <gfldex> ===SORRY!===

[12:35] <gfldex> Dynamic variable %*VM not found

[12:35] <gfldex> looks a little rottish to me :)

[12:37] <tadzik> gfldex: try https://github.com/tadzik/web maybe

[12:37] <tadzik> I did some effort to make it compile and run a while ago

[12:37] * gfldex tries

[12:38] <gfldex> tadzik: same result

[12:40] <tadzik> okay, no idea then

[12:40] <tadzik> phenny: pl en "bezoki jeleń"?

[12:40] <phenny> tadzik: "eyeless deer" (pl to en, translate.google.com)

[12:40] <masak> r: say %*VM

[12:40] <p6eval> rakudo a4c78f: OUTPUT«Failure.new(exception => X::AdHoc.new(payload => "Dynamic variable \%*VM not found"))␤»

[12:41] <masak> moritz: is it meant to .perl the Failure like that, rather than throw its exception?

[12:47] <gfldex> is there any other module that does get('http://your.url/here') ?

[12:50] *** PacoAir joined
[12:50] <tadzik> bailador does

[12:51] *** REPLeffect left
[12:51] <tadzik> https://github.com/tadzik/bailador

[12:51] <tadzik> see a pastebin app for example: https://github.com/tadzik/Bailador/blob/master/examples/pastebin.pl

[12:51] * gfldex starts to dance a little

[12:52] *** REPLeffect joined
[12:57] *** REPLeffect left
[12:59] <masak> :)

[12:59] *** REPLeffect joined
[13:00] <tadzik> phenny: en es "gfldex starts to dance a little"?

[13:00] <phenny> tadzik: "gfldex comienza a bailar un poco" (en to es, translate.google.com)

[13:00] *** leprevost left
[13:00] *** Trashlord left
[13:00] *** Trashlord joined
[13:00] <felher> Could someone take a quick look at http://paste.pocoo.org/show/570964/ before i mess up the spec? :)

[13:06] <colomon> I might say "stringifies its arguments by calling .gist on them".

[13:08] *** GlitchMr joined
[13:08] <GlitchMr> perl6: qr/ a /

[13:08] <p6eval> niecza v15-6-gefda208: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Regex not terminated at /tmp/Kl0VNYHwzi line 1 (EOF):␤------> [32mqr/ a /[33m⏏[31m<EOL>[0m␤␤Undeclared routine:␤      'qr' used at line 1␤␤Parse failed␤␤»

[13:08] <p6eval> ..rakudo a4c78f: OUTPUT«===SORRY!===␤Preceding context expects a term, but found infix / instead at line 1, near ""␤»

[13:08] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected end of input␤    expecting "\\", variable name or "/"␤    at /tmp/x0lGrHDcs8 line 2, column 1␤»

[13:08] <GlitchMr> Oh right... rx...

[13:09] <felher> colomon: http://paste.pocoo.org/show/570969/ ?

[13:10] <colomon> felher

[13:10] <GlitchMr> But hint would be nice :P.

[13:10] <colomon> felher++

[13:10] <felher> colomon++ for the review :)

[13:12] <dalek> specs: e338a6f | (Felix Herrmann)++ | S32-setting-library/IO.pod:

[13:12] <dalek> specs: [S32/IO] change say to use .gist instead of .Str

[13:12] <dalek> specs: review: https://github.com/perl6/specs/commit/e338a6f414

[13:12] <gfldex> i tried LWP::simple now and that doesn't work either

[13:12] <gfldex> use LWP::simple;

[13:12] <gfldex> Method 'at_key' not found for invocant of class 'Any'

[13:12] *** leprevost joined
[13:12] <gfldex> that error message could do with a little more line numbering

[13:12] <gfldex> luckily i got some icecream so i don't bother to much

[13:13] <tadzik> iirc a broken URI is a reason for broken LWP::Simple

[13:13] <tadzik> https://github.com/perl6/ecosystem/wiki/State-of-modules-on-nom should contain some pointers

[13:14] <gfldex> oh well

[13:14] <gfldex> i think i will retreat to wget then :)

[13:15] *** mucker left
[13:30] *** flussence joined
[13:39] *** mucker joined
[13:43] <masak> I just noticed that the methods <created modified accessed changed> never got ported to nom. probably due to lack of spectests.

[13:43] <masak> psyde++ for picking that up.

[13:44] <tadzik> they were never specced, afair

[13:44] <masak> right. too bad, because they read really well in code.

[13:44] <tadzik> aye

[13:44] <masak> I'd like to reintroduce them, along with the also-unspec'd .copy and .move

[13:44] <tadzik> iirc it was me who implemented them :)

[13:44] <masak> where can I read more about constants such as pir::const::STAT_ISDIR?

[13:45] <masak> that seems to be the piece missing for implementing them.

[13:45] <masak> Beijing's implementation is in the form of `multi method created() { ::Instant.from-posix($.stat.createtime) }`

[13:46] <masak> but nom's IO doesn't have a $.stat attribute (probably wise).

[13:46] <masak> so we have to get the stat info through pir::stat__Isi

[13:50] *** SHODAN left
[13:52] *** SHODAN joined
[13:57] <masak> blog post! \o/ http://strangelyconsistent.org/blog/counting-t4-configurations

[13:58] <masak> it's not *the* t4 blog post, but rather a pre-t4 post.

[14:07] *** szbalint joined
[14:10] <masak> walk &

[14:11] *** zipf joined
[14:23] *** derrazo joined
[14:24] *** mucker left
[14:26] *** zipf left
[14:30] *** tokuhiro_ left
[14:32] *** mucker joined
[14:38] *** spider-mario left
[14:39] *** mucker left
[14:49] *** zhutingting left
[14:49] *** birdwindupbird joined
[14:57] *** VXZ joined
[15:00] <awwaiid> masak, "[The elephant] looked small in comparison." ... genious quote. Wonderful way to explain how an exploration of the mind can be so engaging and powerful.

[15:05] *** mdupont left
[15:08] *** derrazo left
[15:12] *** mucker joined
[15:16] *** mdupont joined
[15:16] <masak> awwaiid: thanks. :) it's so typical of me to be spending parts of my beach paradise vacation inside my notebook.

[15:19] *** mucker left
[15:32] <masak> ooh: http://www.git-legit.org/

[15:39] *** fsergot left
[15:42] *** mucker joined
[15:45] *** mucker left
[15:45] *** mucker joined
[15:50] *** Patterner left
[15:51] *** Psyche^ joined
[15:51] *** Psyche^ is now known as Patterner

[16:00] *** mucker left
[16:07] *** mucker joined
[16:12] *** pomysl_ joined
[16:12] *** pomysl left
[16:12] <GlitchMr> ?^$value # now I'm confused...

[16:13] <GlitchMr> perl6: print $^1

[16:13] <p6eval> rakudo a4c78f: OUTPUT«===SORRY!===␤Non-declarative sigil is missing its name␤at /tmp/RM3KcichZG:1␤»

[16:13] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "^"␤    expecting "::"␤    at /tmp/n5ZsGE_7_q line 1, column 8␤»

[16:13] <p6eval> ..niecza v15-6-gefda208: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Non-declarative sigil is missing its name at /tmp/Uf3tRgP24B line 1:␤------> [32mprint [33m⏏[31m$^1[0m␤␤Use of uninitialized value in string context␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1222 (warn @ 3) ␤  a…

[16:13] <GlitchMr> perl6: print ?^1

[16:13] <p6eval> niecza v15-6-gefda208: OUTPUT«False»

[16:13] <p6eval> ..rakudo a4c78f: OUTPUT«True»

[16:13] <p6eval> ..pugs:  ( no output )

[16:13] <GlitchMr> True... what?

[16:13] <GlitchMr> It's just for consistency, right?

[16:14] <masak> what is for consitency? what is your question?

[16:14] <GlitchMr> "?^" operator

[16:14] <masak> no operator is there "just" for some reason.

[16:14] <benabik> r: say ^1

[16:14] <p6eval> rakudo a4c78f: OUTPUT«0..^1␤»

[16:14] <benabik> I think ?^1 is just ?(^1)

[16:15] <GlitchMr> According to S03, it's boolean not...

[16:15] <benabik> I could be wrong, I'll admit.

[16:15] * masak submits rakudobug

[16:15] <GlitchMr> ... I don't mean upto operator...

[16:15] <masak> benabik: there is a prefix:<?^> operator.

[16:16] <masak> but it might be missing in Rakudo.

[16:16] <sorear> good * #perlt6

[16:16] <phenny> sorear: 10:19Z <tadzik> tell sorear is it normal that I have to run 'make' on niecza twice? See https://gist.github.com/2192705

[16:16] <sorear> good * #perl6

[16:16] <masak> sorear! \o/

[16:16] <sorear> colomon: hi.

[16:16] *** Patterner left
[16:16] <benabik> prefix:<?^> == prefix:<!> 

[16:16] <benabik> ?

[16:16] <sorear> colomon: what I would do is to add a .NOTPARALLEL: at the end ;)

[16:17] <sorear> colomon: what's your idea?

[16:17] <GlitchMr> I couldn't find ?^ in tests...

[16:17] <sorear> p6: say !(True | False)

[16:17] <p6eval> rakudo a4c78f, niecza v15-6-gefda208: OUTPUT«False␤»

[16:17] <p6eval> ..pugs: OUTPUT«␤»

[16:17] <sorear> p6: say ?^(True | False)

[16:17] <p6eval> niecza v15-6-gefda208: OUTPUT«any(Bool::False, Bool::True)␤»

[16:17] <p6eval> ..rakudo a4c78f: OUTPUT«False␤»

[16:17] <p6eval> ..pugs: OUTPUT«␤»

[16:17] *** Psyche^ joined
[16:17] *** Psyche^ is now known as Patterner

[16:18] *** havenn joined
[16:18] <GlitchMr> But that's weird... Perl 5 had medium-precedence and low-precedence logical  operators. Perl 6 adds high-precedence logical operators...

[16:20] <masak> GlitchMr: the unique thing about the ops starting with ? is that they coerce to Bool.

[16:20] <GlitchMr> I guess that concept of Perl 6 is "more of everything"...

[16:20] <masak> as long as the additions carry their own weight, sure.

[16:21] <masak> answering your original question, the ?^ ?& ?| operators are there partly for consistency with the ones starting with + and ~

[16:21] <GlitchMr> Perl 6 grammar is full of various ambiguities, but I guess that "longest token matching" helps with those...

[16:22] <masak> be careful with the term "ambiguity", which is something one *really* doesn't want in a grammar.

[16:25] <GlitchMr> But I like certain parts of grammar

[16:25] <GlitchMr> | '<<<<<<<' :: <?before [.*? \v '=======']: .*? \v '>>>>>>>' > <.sorry: 'Found a version control conflict marker'> \V* \v

[16:25] <GlitchMr> :P

[16:25] <masak> yeah, we were inspired there by clang ;)

[16:25] <GlitchMr> Nice to see that Perl 6 blocks running programs with version control conflict markers...

[16:25] <masak> clang++

[16:26] * masak wonders if Rakudo does that yet...

[16:26] <GlitchMr> Is it one of those "helpful messages" (well, I guess it's more helpful than just normal "Syntax error")

[16:27] <GlitchMr> Or worse... pass...

[16:27] *** mucker left
[16:27] *** mucker joined
[16:29] <benabik> masak: Rakudo seems to think it's a list.

[16:29] *** havenn left
[16:30] <GlitchMr> Heh, I would like to see something like B::Deparse for Perl 6, but I guess that custom grammars would make utility like this nearly impossible...

[16:30] *** eggzeck joined
[16:30] <masak> benabik: how unfortunate.

[16:30] <masak> eggzeck: o/

[16:30] <moritz> nom: say %*foo

[16:30] <p6eval> rakudo a4c78f: OUTPUT«Failure.new(exception => X::AdHoc.new(payload => "Dynamic variable \%*foo not found"))␤»

[16:30] <eggzeck> masak: o/

[16:30] <GlitchMr> ... but... perhaps normal grammar debugger which would mark boundaries between tokens...

[16:31] <moritz> masak: that's a an unthrown Failure, and you see its .gist, which happens to be the same as its .perl

[16:33] <masak> moritz: ah. somehow I expected that .gist'ing a Failure would trigger its exception.

[16:34] <masak> eggzeck: new around here? welcome!

[16:35] <moritz> masak: that's doable too

[16:36] <eggzeck> masak: Yes I am, thank you for the welcome! :-)

[16:37] *** birdwindupbird left
[16:37] <masak> moritz: I'm not saying my expectation is correct -- just that that's what it is. IIUC the thing with Failures is that they should triggered basically as soon as they're "used", and .gist is using.

[16:38] <masak> moritz: from a higher level, I'd rather see the actual error message than the Failure .gist, nice as the latter one is.

[16:38] <jnthn> o/

[16:39] <moritz> r: sub f { fail 'foo }; f() + f()

[16:39] <p6eval> rakudo a4c78f: OUTPUT«===SORRY!===␤Unable to parse blockoid, couldn't find final '}' at line 2␤»

[16:39] <moritz> r: sub f { fail 'foo' }; f() + f()

[16:39] <p6eval> rakudo a4c78f: OUTPUT«Cannot call 'Numeric'; none of these signatures match:␤:(Mu:U \$v, Mu %_!)␤␤  in method Numeric at src/gen/CORE.setting:644␤  in sub infix:<+> at src/gen/CORE.setting:2284␤  in block <anon> at /tmp/vXxhVZn3ZH:1␤␤»

[16:39] <moritz> \o jnthn

[16:39] <moritz> r: sub f { fail 'foo' }; f() ~ f()

[16:39] <p6eval> rakudo a4c78f: OUTPUT«foo␤  in method Str at src/gen/CORE.setting:8086␤  in method Stringy at src/gen/CORE.setting:673␤  in sub infix:<~> at src/gen/CORE.setting:960␤  in block <anon> at /tmp/Pqb2jHJ5Kk:1␤␤»

[16:39] <sorear> GlitchMr: are you deliberately making inflammatory comments?

[16:40] <sorear> Is anyone here knowledgable on universal hashing?

[16:41] <sorear> moritz: hi

[16:41] <moritz> o/ sorear 

[16:41] <GlitchMr> OK, I had to look for "inflammatory" in dictionary...

[16:42] <GlitchMr> Perhaps, I don't know...

[16:42] <sorear> moritz: your last mail to p6l - I think you forgot to finish typing the second paragraph

[16:42] <sorear> it ends with a sentence fragment

[16:42] <moritz> sorear: oh, that happens to me, I should reread it

[16:42] <moritz> sorear: thanks

[16:44] *** Chillance joined
[16:44] *** wolfman2000 left
[16:45] <moritz> sorear: replied

[16:58] *** birdwindupbird joined
[17:12] *** GlitchMr42 joined
[17:15] *** GlitchMr left
[17:21] <japhb> moritz, masak, felher: Thank you, glad you like the new page.  :-)

[17:22] <japhb> moritz, Understood regarding no trailing .html in site links.

[17:22] <masak> keep up the good work!

[17:22] <japhb> Thank you, I think I will.  :-)

[17:23] <japhb> Any nominations for "Community Favorites"?

[17:23] <japhb> The left column is going to get rather long, so we should have a few more in the right column.

[17:23] *** havenn joined
[17:24] <masak> maybe http://rosettacode.org/wiki/Last_Fridays_of_year#Perl_6 ?

[17:25] *** havenn left
[17:25] *** havenn_ joined
[17:27] *** patspam joined
[17:29] <japhb> Masak, yes, I think that qualifies.  :-)

[17:30] <masak> I think TimToady will have further suggestions...

[17:30] *** mtk left
[17:33] <moritz> masak: I'm now spectesting a fix for some of the Failure stuff

[17:34] *** cognominal left
[17:35] <masak> yay

[17:44] *** havenn joined
[17:44] *** cognominal joined
[17:45] *** MayDaniel left
[17:48] <japhb> What is our current preferred term for the group of languages including both Perls, Python, Ruby, JavaScript, etc.?

[17:48] <tadzik> dynamic languages?

[17:49] <japhb> tadzik, WFM

[17:55] <moritz> you could also say "scripting languages", but "dynamic" sounds less negative

[17:56] <dalek> perl6.org: 1527e4c | (Geoffrey Broadwell)++ | source/community/rosettacode.html:

[17:56] <dalek> perl6.org: Add masak++'s suggestion of Last Fridays of Year to 'Community Favorites' list

[17:56] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/1527e4c15e

[17:56] <dalek> perl6.org: ced0a2e | (Geoffrey Broadwell)++ | README:

[17:56] <dalek> perl6.org: Merge branch 'master' of github.com:perl6/perl6.org

[17:56] <dalek> perl6.org: review: https://github.com/perl6/perl6.org/commit/ced0a2ec00

[17:57] <japhb> moritz, yeah, "scripting languages" was what I was trying to avoid.

[17:58] <japhb> OK, I'm off to try to find a new desk for my eldest.

[17:58] <japhb> &

[18:14] *** havenn_ left
[18:15] *** noteventime joined
[18:16] <sorear> I think dynamic/scripting is a bit too broad

[18:16] <sorear> Perl, Ruby, JavaScript, and Python are all very closely related

[18:16] <sorear> witness C'Dent

[18:19] *** spider-mario joined
[18:19] *** GlitchMr42 is now known as GlitchMr

[18:30] *** mucker left
[18:31] *** spider-mario left
[18:36] *** Patterner left
[18:39] <GlitchMr> perl6: print ([1,2,3;4,5,6]).perl

[18:39] <p6eval> rakudo a4c78f, niecza v15-6-gefda208: OUTPUT«[4, 5, 6]»

[18:39] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "["␤    expecting expression or ")"␤    at /tmp/yW0cVYIUvR line 1, column 8␤»

[18:39] *** Psyche^ joined
[18:39] <colomon> sorear: my idea was on the technically wrong but probably (I think) mostly effective side -- change .fetch-stamp: FETCH_URL to be .fetch-stamp boot/obj/Run.CORE.ser: FETCH_URL

[18:39] *** Psyche^ is now known as Patterner

[18:39] <colomon> sorear: I'd not heard of NOTPARALLEL before.  :)

[18:47] *** havenn_ joined
[19:02] * [Coke] catches up.

[19:02] *** patspam left
[19:05] <GlitchMr> perl6: print (/|foo|bar|baz/).perl

[19:05] <p6eval> rakudo a4c78f: OUTPUT«regex _block1011(Mu , Mu %_!) { ... }»

[19:05] <p6eval> ..niecza v15-6-gefda208: OUTPUT«regex ANON(Any \self) { ... }»

[19:05] <p6eval> ..pugs: OUTPUT«{regex}»

[19:06] <GlitchMr> perl6: print ~/what/

[19:06] <p6eval> niecza v15-6-gefda208: OUTPUT«Regex()<instance>»

[19:06] <p6eval> ..rakudo a4c78f: OUTPUT«_block1011»

[19:06] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20111008/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HANDLE>' tra…

[19:06] <GlitchMr> oh wait... I forgot to use qr

[19:06] <GlitchMr> *rx

[19:06] *** spider-mario joined
[19:12] *** fsergot joined
[19:12] *** patspam joined
[19:19] *** nwc10 joined
[19:20] <nwc10> so it seems that as fast as the masakbot reports bugs, the Pmbot fixes them.

[19:22] <nwc10> I suspect that reality is not as pleasing as this, but thanks for maintaining the illusion whilst you can.

[19:22] <nwc10> (but don't burn out)

[19:23] *** GlitchMr left
[19:23] <masak> there are also jnthnbot, and moritzbot, and sorearbot.

[19:24] <masak> all with their special skills and features.

[19:24] <nwc10> "drinks beer"

[19:24] *** mj41 joined
[19:26] <nwc10> although, really, I think it's more "makes you think that he's only drinking beer, when actually he's coding hard"

[19:28] <sorear> not I.

[19:29] <nwc10> all beer is actually an illusion? :-)

[19:29] <dalek> rakudo/typed-ex-hash: d34720f | moritz++ | src/core/Failure.pm:

[19:29] <dalek> rakudo/typed-ex-hash: make Failure throw more consistently

[19:29] <dalek> rakudo/typed-ex-hash: review: https://github.com/rakudo/rakudo/commit/d34720f641

[19:29] <moritz> oops, wrong branch agian

[19:29] <dalek> rakudo/nom: 06b4eca | moritz++ | src/core/Failure.pm:

[19:29] <dalek> rakudo/nom: make Failure throw more consistently

[19:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/06b4eca92a

[19:31] *** Patterner left
[19:32] *** havenn left
[19:32] *** Psyche^ joined
[19:32] *** Psyche^ is now known as Patterner

[19:34] <moritz> .u eject

[19:34] <phenny> U+23CF EJECT SYMBOL (⏏)

[19:36] *** MayDaniel joined
[19:40] *** eggzeck left
[19:43] <moritz> nom: say X.WHO.keys

[19:43] <p6eval> rakudo a4c78f: OUTPUT«AdHoc Constructor Routine Hash Buf IO Comp OS Syntax Pod NYI OutOfRange Signature Placeholder Attribute Redeclaration Undeclared Phaser Obsolete Parameter Method Bind Value Declaration Anon Augment Package␤»

[19:44] <moritz> nom: my $a = X::Phaser::PrePost.new(); say 'alive';

[19:44] <p6eval> rakudo a4c78f: OUTPUT«alive␤»

[19:44] <moritz> nom: my $a = sub { fail X::Phaser::PrePost.new() }.(); say a.WHAT

[19:44] <p6eval> rakudo a4c78f: OUTPUT«===SORRY!===␤Confused␤at /tmp/4u2qCkQHfw:1␤»

[19:44] <moritz> nom: my $a = (sub { fail X::Phaser::PrePost.new() }).(); say a.WHAT

[19:44] <p6eval> rakudo a4c78f: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&a' called (line 1)␤»

[19:44] <moritz> nom: my $a = (sub { fail X::Phaser::PrePost.new() }).(); say $a.WHAT

[19:44] <p6eval> rakudo a4c78f: OUTPUT«Failure()␤»

[19:45] <moritz> nom: my $a = (sub { fail X::Phaser::PrePost.new() }).(); say $a.payload

[19:45] <p6eval> rakudo a4c78f: OUTPUT«Precondition failed␤  in method <anon> at src/gen/CORE.setting:8091␤  in <anon> at src/gen/Metamodel.pm:2250␤  in any find_method_fallback at src/gen/Metamodel.pm:2248␤  in any find_method at src/gen/Metamodel.pm:822␤  in block <anon> at /tmp/eEnHIuCYHb:1␤␤»…

[19:45] <moritz> nom: my $a = (sub { fail X::Phaser::PrePost.new() }).(); say $a.payload.WHAT

[19:45] <p6eval> rakudo a4c78f: OUTPUT«Precondition failed␤  in method <anon> at src/gen/CORE.setting:8091␤  in <anon> at src/gen/Metamodel.pm:2250␤  in any find_method_fallback at src/gen/Metamodel.pm:2248␤  in any find_method at src/gen/Metamodel.pm:822␤  in block <anon> at /tmp/CcyuVwYlxn:1␤␤»…

[19:45] <moritz> eeks

[19:45] <masak> oops.

[19:47] <masak> 'the jibe operator'. yeah, I could probably live with that.

[19:47] <masak> "it doesn't smartmatch, sire." -- "it doesn't jibe, dude."

[19:49] * moritz hasn't even bothered to read that mail.

[19:49] <moritz> should I?

[19:50] <masak> nah.

[19:50] *** MayDaniel left
[19:50] <colomon> worst kind of bikeshedding

[19:50] <masak> let p6l rename our operators if they want. ;)

[19:50] <masak> see if that helps.

[19:50] <moritz> nom: say '3 foo' + 'bar'

[19:50] <p6eval> rakudo a4c78f: OUTPUT«Cannot call 'Numeric'; none of these signatures match:␤:(Mu:U \$v, Mu %_!)␤␤  in method Numeric at src/gen/CORE.setting:644␤  in sub infix:<+> at src/gen/CORE.setting:2284␤  in sub infix:<+> at src/gen/CORE.setting:2284␤  in block <anon> at /tmp/P3WwKSsoVM:1␤␤»…

[19:50] <moritz> evalbot rebuild nom

[19:50] <p6eval> OK (started asynchronously)

[19:55] *** mj41 left
[19:56] <dalek> Rebuild of nom complete.

[19:59] <dalek> rakudo/nom: 008dd40 | moritz++ | src/core/ (3 files):

[19:59] <dalek> rakudo/nom: start to fail() with typed exceptions from Str.Numeric

[19:59] <dalek> rakudo/nom: 

[19:59] <dalek> rakudo/nom: somewhere along the way it still stringifies though :(

[19:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/008dd40862

[20:00] *** birdwindupbird left
[20:01] <moritz> jnthn: any reason why that Q:PIR block inside &fail (in Failure.pm) isn't just   try die $value; $ex = $!;  ?

[20:06] <masak> r: try die "whee!"; say $!; say "stayin' alive!"

[20:06] <p6eval> rakudo a4c78f: OUTPUT«whee!␤  in block <anon> at /tmp/Hw9fxnHW92:1␤␤stayin' alive!␤»

[20:07] <masak> r: try die "ah " x 4; say $!; say "stayin' alive!" xx 2

[20:07] <p6eval> rakudo a4c78f: OUTPUT«ah ah ah ah ␤  in block <anon> at /tmp/PHYt4PGp2L:1␤␤stayin' alive! stayin' alive!␤»

[20:07] <masak> :P

[20:07] <masak> r: try die "ah " x 4; say $!.payload; say "stayin' alive!" xx 2

[20:07] <p6eval> rakudo a4c78f: OUTPUT«ah ah ah ah ␤stayin' alive! stayin' alive!␤»

[20:07] * masak is so easily amused

[20:11] *** nwc10 left
[20:24] *** NamelessTee left
[20:26] <moritz> nom: use fatal; try +'5 foo'; say $!.WHAT

[20:26] <p6eval> rakudo a4c78f: OUTPUT«X::AdHoc()␤»

[20:26] <moritz> evalbot rebuild nom

[20:26] <p6eval> NOT OK (maybe a rebuild is already in progress?)

[20:29] <moritz> nom: class A is Exception { }; my $x = fail A.new; say $x.exception.WHAT

[20:29] <p6eval> rakudo a4c78f: OUTPUT«X::AdHoc()␤»

[20:32] <moritz> nom: class A is Exception { }; use fatal; try fail A.new; say $!.WHAT

[20:32] <p6eval> rakudo 008dd4: OUTPUT«A()␤»

[20:35] <jnthn> moritz: May be hysterical raisons.

[20:36] <jnthn> moritz: e.g. from before mls++ patched a bunch of exception handling issues.

[20:37] *** NamelessTee joined
[20:40] <sorear> masak: I'm starting the thankless task of trying to be the naysayer on p6l.

[20:40] <moritz> sorear: only do it where it makes sense; don't exhaust yourself

[20:40] <sorear> now, I wish there were a good p6l equivalent of /me stares at Damian and yary blankly

[20:41] <dalek> roast: d720afa | moritz++ | S32-exceptions/misc.t:

[20:41] <dalek> roast: test that Str numification error message survives through infix:<+>

[20:41] <dalek> roast: review: https://github.com/perl6/roast/commit/d720afa0b6

[20:41] *** patspam left
[20:42] *** kaare_ left
[20:43] <masak> sorear: what moritz said. I'd rather we try our best to make use of the well-meaning but silly people on p6l than alienate them by repeatedly pointing out their obvious irrelevance to them ;)

[20:44] <moritz> I do wonder if, at some point, I should compose a politely formulated "raising the bar" mail

[20:44] <moritz> where I point out that we've raised the bar to change basic stuff

[20:45] <moritz> and that, if you propse changes with far-reaching consequences, we'll only take you seriously if you've prototyped it (which is usually quite possible, if you really care)

[20:45] <masak> it's been pointed out a few times already.

[20:45] <moritz> but then again it's probably again just wasted time

[20:45] <masak> possibly.

[20:45] <moritz> masak: happy with the error message in https://rt.perl.org/rt3/Ticket/Display.html?id=111960 ?

[20:46] <masak> the people who engage in p6l bikesheds/pie-in-the-sky moments do so because they aren't aware Perl 6 has moved on to a more solid phase of matter.

[20:46] *** Transformer joined
[20:46] <masak> moritz: ah, I was wondering what you were using the ⏏ symbol for. moritz++

[20:47] <moritz> for ejecting people from p6l. Silently :-)

[20:49] *** havenn_ left
[20:49] *** Transformer left
[20:54] *** havenn joined
[20:56] <masak> I had a different "raising the bar" thought earlier today. but it's not fully formed yet.

[20:57] <masak> it's vaguely shaped like creating a prize/stipend/grant for people who take charge of clearing up fuzzy parts of the spec.

[21:00] <jnthn> "Delete stuff! Get paid!"

[21:01] <moritz> I have a commit like this coming up. Except the "Get paid!" part :-)

[21:02] <masak> no, the "delete stuff" we seem to do fairly well ourselves. it's the "spec I/O" and "spec threading" that needs a push.

[21:02] <masak> imagine if we could somehow nudge p6l into helping us there -- constructively, I mean.

[21:02] <masak> these are still parts of the spec that need a bit of bikeshedding.

[21:03] <moritz> one could do fine experimenting with IO classes and roles in rakudo

[21:04] <moritz> one could even do 99% of the prototyping out-of-core to avoid long recompilation phases

[21:04] <moritz> maybe even 100%

[21:05] <moritz> hey, you can write your own sub say, and have it picked up by all of your programs. How cool is that?

[21:07] *** havenn left
[21:09] <masak> I know!

[21:10] <moritz> and you can even add your own lexical IO class

[21:10] <moritz> and so on

[21:10] <masak> I once thought that would be a really cool use case for macros, but... turns out you can do it with just a sub.

[21:17] *** patspam joined
[21:19] *** PacoAir left
[21:24] <dalek> rakudo/nom: 34c3e35 | moritz++ | src/core/Failure.pm:

[21:24] <dalek> rakudo/nom: replace a wad of PIR code with Perl 6; also preserves the argument type of &fail

[21:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/34c3e35285

[21:31] <fsergot> good night #perl6 o/

[21:31] *** fsergot left
[21:33] <jnthn> yay, more Q:PIR banished

[21:34] <tadzik> I like the 'try die'

[21:40] <dalek> roast: 2f179c1 | moritz++ | S04-exceptions/fail.t:

[21:40] <dalek> roast: test that fail() can handle typed exceptions

[21:40] <dalek> roast: review: https://github.com/perl6/roast/commit/2f179c1212

[21:49] *** patspam_ joined
[21:50] *** patspam left
[21:50] *** patspam joined
[21:51] *** patspam left
[21:52] *** spider-mario left
[21:54] *** patspam_ left
[21:58] <dalek> rakudo/nom: 57a6818 | pmichaud++ | src/core/ (3 files):

[21:58] <dalek> rakudo/nom: Merge branch 'nom' of github.com:rakudo/rakudo into nom

[21:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/57a6818729

[21:59] *** derrazo joined
[22:01] <masak> heh, a merge. :)

[22:02] <pmichaud> yeah, sorry about that.

[22:02] <pmichaud> I forgot to push earlier and then .... 

[22:02] <sorear> moritz: How does raising the bar apply to the idea of renaming smartmatching to doorfrozzling?  Its doability is self-evident, as is the fact that it will break no code whatsoever

[22:04] <jnthn> ...somebody suggested renaming it to doorfrozzling?!

[22:04] * jnthn knows what a door is but has no idea how to frozzle one...

[22:06] * masak decides that "doorfrozzling" is perfect as a coinage for "fruitlessly discussing unimportant language trivia on p6l"

[22:08] <jnthn> .oO( The ideas never enter the house of spec, they just frozzle at the door )

[22:10] <masak> "I'm sorry, but this thread is just so full of doorfrozzle."

[22:12] <sorear> jnthn: no, but they've suggested everything else

[22:12] <sorear> I thought Damian Conway was supposed to be somewhat sane, but he just dashed my hopes by proposing 'jibe' :|

[22:14] <colomon> doorfrozzle.  doorfrozzle. Doorfrozzle!  (tune: Bicycle by Queen)

[22:16] <masak> sorear: I liked 'jibe', but the whole thing sort of presupposes that there's a problem somewhere that needs solving. which I don't really see.

[22:16] <masak> colomon++

[22:25] *** fgomez joined
[22:30] <jnthn> Dinner time &

[22:38] *** NamelessTee left
[22:42] *** NamelessTee joined
[22:53] <masak> 'night, #perl6

[22:57] *** NamelessTee left
[23:50] *** awwaiid left
[23:51] *** tokuhiro_ joined
[23:56] *** joe_everyman joined
[23:56] *** joe_everyman left
[23:59] *** noteventime left
