[00:02] *** jeffreykegler left
[00:15] *** MayDaniel left
[00:20] *** PacoAir left
[01:07] *** bowtie left
[01:18] *** tcpr1347 left
[01:19] *** tcpr1347 joined
[01:29] *** am0c left
[01:37] *** quester joined
[02:00] *** LordVorp joined
[02:03] *** Abcxyz joined
[02:05] <Abcxyz> r: my $i = 0; (while $i++ < 5 { ^$i } ).perl.say

[02:05] <p6eval> rakudo 7d3e01: OUTPUT«Bool::False␤»

[02:06] <Abcxyz> In S04 it says: "Unlike in Perl 5, if a final statement in Perl 6 is a conditional that does not execute any of its branches, it doesn't matter what the value of the conditional is, the value of that conditional statement is always Nil. If there are no statements in the block at all, the result is also Nil."

[02:07] <Abcxyz> Is this supposed to return "1 2 3 4 5" instead?

[02:08] <Abcxyz> or even: "0 0 1 0 1 2 0 1 2 3 0 1 2 3 4 0 1 2 3 4 5" ?

[02:08] <sorear> I think the long version is the correct one

[02:08] <Abcxyz> Then it should be a bug now.

[02:09] <Abcxyz> I will record it, and send it later.

[02:12] <colomon> n:  my $i = 0; (while $i++ < 5 { ^$i } ).perl.say

[02:12] <p6eval> niecza v24-12-g8e50362: OUTPUT«Nil␤»

[02:19] <Abcxyz> I don't know whether it SHOULD return a list of all loops last statement value, or should it return Nil

[02:20] <Abcxyz> But it seems to me Nil should only apply to if / unless statements, when the corresponding branch doesn't exist.

[02:20] <Abcxyz> Otherwise while loops should always return Nil, and it provides no information at all.

[02:28] <sorear> colomon: well known nieczabug.  I'm suprised it doesn't work in rakudo

[02:30] <Abcxyz> Both outputs are bugs, right?

[02:41] *** FROGGS_ joined
[02:44] *** FROGGS left
[03:04] *** orafu left
[03:04] *** orafu joined
[03:09] *** araujo left
[03:09] *** JJ_Brain joined
[03:28] *** JJ_Brain left
[03:28] <alec> Ayiko, i can't get your solution to rosalind/REVP to work

[03:28] <alec> it returns a whole lot of "1 4\n1 4\n1 4\n"

[03:31] *** xinming_ left
[03:32] *** xinming joined
[03:49] *** xinming left
[03:51] <quester> r: say chr 0xd7ff;

[03:51] <p6eval> rakudo 7d3e01: OUTPUT«퟿␤»

[03:51] <quester> r: say chr 0xd800;

[03:51] <p6eval> rakudo 7d3e01: OUTPUT«Invalid character for UTF-8 encoding␤␤  in block  at /tmp/4vc9WgzuyR:1␤␤»

[03:55] *** xinming joined
[04:40] *** thou left
[04:46] <quester> r: say chr 0xfdfd;

[04:46] <p6eval> rakudo 7d3e01: OUTPUT«﷽␤»

[04:50] *** thou joined
[05:10] *** Kharec joined
[05:23] *** Kharec left
[05:24] *** Kharec joined
[05:40] *** araujo joined
[05:40] *** araujo left
[05:40] *** araujo joined
[05:47] *** DarthGandalf joined
[06:33] *** arkydo joined
[06:37] *** tcpr1347 left
[06:38] *** tcpr1347 joined
[06:42] *** Chillance left
[06:44] *** rindolf joined
[07:11] *** quester left
[07:18] *** Abcxyz left
[07:26] *** JJ_Brain joined
[07:30] *** SamuraiJack joined
[07:31] *** JJ_Brain left
[07:31] *** JJ_Brain joined
[07:33] *** elcric joined
[07:37] <elcric> Hello, I am new to perl 6, I been trying to get Rakudo Star Perl 6 to work. I have it downloaded. It will respond to say commands and simple math but that is about it. Where can I find information on how to use Perl 6 on Rakudo Star?

[07:37] <doy> phenny: tell jnthn actually, the more i think about it, the more i really don't like that the default behavior for say $foo or "blah $foo blah" can be to just die - this makes writing robust error handling fairly difficult - how do you generate an error message for an invalid value when that value could potentially be an incomplete role type object?

[07:37] <phenny> doy: I'll pass that on when jnthn is around.

[07:39] <moritz> elcric: there's a UsingPerl6.pdf document that comes with rakudo star

[07:39] <elcric> Moritz, oops did not see it.

[07:39] *** SamuraiJack left
[07:39] <moritz> elcric: also perl6.org/documentation/ has some interesting links

[07:41] <elcric> Moritz, thanks, I will look at those two sources, thank you very much.

[07:41] <moritz> elcric: and of course, hang out here and ask questions :-)

[07:42] *** SamuraiJack joined
[07:42] <elcric> Moritz, thanks, afk, looking at what you recommended now.

[07:45] *** SamuraiJack left
[07:48] *** JJ_Brain left
[07:59] *** alec left
[07:59] *** alec joined
[08:04] <tadzik> good morning #perl6

[08:18] *** Kharec left
[08:21] <moritz> \o tadzik 

[08:21] <rindolf> tadzik: morning.

[08:22] *** elcric left
[08:31] *** Abcxyz joined
[08:32] *** kaare_ joined
[08:43] *** alec left
[08:49] <FROGGS_> morning

[08:49] *** FROGGS_ is now known as FROGGS

[08:49] *** Kharec joined
[08:59] *** JJ_Brain joined
[09:07] <sorear> morning FROGGS

[09:10] *** GlitchMr joined
[09:16] *** JJ_Brain left
[09:19] *** JJ_Brain joined
[09:24] *** JJ_Brain left
[09:30] *** Abcxyz left
[09:39] *** denisboyun_ joined
[09:42] *** Psyche^ joined
[09:44] *** denisboyun_ left
[09:45] *** Patterner left
[09:45] *** Psyche^ is now known as Patterner

[09:46] <moritz> r: say 1 <=> 2 <=> 3

[09:46] <p6eval> rakudo 7d3e01: OUTPUT«[31m===[0mSORRY![31m===[0m␤"<=>" and "<=>" are non-associative and require parens␤at /tmp/dxWsIv1bsX:1␤------> [32msay 1 <=> 2 <=>[33m⏏[31m 3[0m␤»

[09:53] *** denisboyun_ joined
[09:56] <Woodi> morning dear # :)  # is using 'dear' and 'tea' and 'bloody' influenced by Engl-ish aristocracy tradition ? :)

[09:58] *** JJ_Brain joined
[09:58] <Woodi> just got idea ! we need to have 'deb ftp://ftp.rakudo.org /debian/ stable main contrib non-free' in /etc/apt/sources.list !

[09:58] <Woodi> and .deb maintainers :)

[09:58] <Woodi> and pmichaud++ permisions ofc...

[09:59] <Woodi> and slashdot article :)

[09:59] *** kcwu left
[10:00] *** denisboyun_ left
[10:01] <moritz> Woodi: first somebody needs to build the .deb packages reliably

[10:02] <moritz> and regularly

[10:02] <moritz> once that's done, we can start thinking about how to distribute them

[10:05] *** JJ_Brain left
[10:08] *** kcwu joined
[10:08] <Ayiko> 'morning #perl6

[10:09] <moritz> good morninig Ayiko 

[10:11] <dalek> rakudo/nom: 13e8052 | moritz++ | src/ (2 files):

[10:11] <dalek> rakudo/nom: throw typed exception for non-associative operators

[10:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/13e8052795

[10:11] <Ayiko> phenny, tell alec I edited my solution there, thanks for reporting it. Removed [  ]* and also changed literal fail to <!> even though f never appears in DNA string

[10:11] <phenny> Ayiko: I'll pass that on when alec is around.

[10:11] <dalek> roast: ee14752 | moritz++ | S32-exceptions/misc.t:

[10:11] <dalek> roast: test X::Syntax::NonAssociative

[10:11] <dalek> roast: review: https://github.com/perl6/roast/commit/ee147523b1

[10:16] <FROGGS> what exactly does onlystar mean?

[10:16] <FROGGS> is it a proto without dispatchees?

[10:16] <FROGGS> or is it a single dispatchee

[10:24] *** elcric joined
[10:25] <FROGGS> okay, reading irclog tells me that dispatchers/protos can be, but what is an onlystar proto and a non-onlystar proto?

[10:26] <elcric> Hello perl6. I am new. I just got Radudo Star to work. How do I write to a file and read from a file?

[10:26] <moritz> elcric: you can read and write entire files with   my $contents = slurp('filename');  spurt('filename', $contents)

[10:27] <moritz> elcric: and you can do the clasic open/read or write/close

[10:27] <moritz> you can write with $file.get (one line) or $file.lines (lazy list of all lines, read on demand)

[10:27] <moritz> and write $file.print() and $file.say()

[10:28] <elcric> Moritz: Thanks! I will go use those now. Thank you very much.

[10:37] *** JJ_Brain joined
[10:39] <raiph> s/write with/read with/

[10:39] *** skids left
[10:49] *** denisboyun_ joined
[10:50] <elcric> moritz: What code do I use to have Rokudo Star execute a Perl 6 script?

[10:51] <moritz> elcric: you just invoke   perl6 <yourscriptname> on the command line

[10:51] *** skids joined
[10:52] *** JJ_Brain left
[10:52] <elcric> Moritz: Thanks, I been trying to figure these easy things out on my own for weeks.

[10:58] *** arkydo left
[11:00] *** elcric left
[11:07] *** denisboyun_ left
[11:10] <FROGGS> r: proto foo(|) { * }; say &foo.onlystar

[11:10] <p6eval> rakudo 7d3e01: OUTPUT«True␤»

[11:10] <FROGGS> r: proto foo(|) { 42 }; say &foo.onlystar

[11:10] <p6eval> rakudo 7d3e01: OUTPUT«False␤»

[11:10] <FROGGS> ahh

[11:14] *** tcpr1347 left
[11:31] *** JJ_Brain joined
[11:38] *** Kharec left
[11:39] *** Kharec joined
[11:45] *** Kharec left
[11:46] *** Kharec joined
[12:10] *** nyuszika7h left
[12:12] *** xinming left
[12:12] *** MayDaniel joined
[12:14] *** nyuszika7h joined
[12:21] *** hash_table joined
[12:26] <Woodi> moritz: let say we want to .deb Star releases. we can write script which will transform tarballs into .deb's (parrot, nqp and rakudo). for start 'make install' step can be handled by 'checkinstall' :)

[12:29] *** werwerwer left
[12:31] <Woodi> I had  https://github.com/slunski/spi   3 years ago (wow!) and it was just Makefile for do all this... now Star releases can be used as only code source...

[12:37] <Woodi> is there some way to 'ask' precompiled module: with witch compiler version you was compiled ?

[12:38] <Woodi> file magic number or something ? :)

[12:38] *** denisboyun_ joined
[12:52] *** spider-mario joined
[12:53] <hoelzro> afternoon #perl6

[12:56] <Woodi> o/

[12:57] <hoelzro> on line 227 of S05-regex.pod in the spec, it talks about :sigspace; shouldn't this be talking about :samecase instead?

[12:57] <hoelzro> (I know I've asked this already, but I haven't received an answer yet =S)

[12:59] <rindolf> hoelzro: aloha.

[12:59] <rindolf> hoelzro: good localtime().

[13:01] *** JJ_Brain left
[13:01] <moritz> Woodi: then do it (make the scriptss that create .deb files)

[13:03] <hoelzro> rindolf: howdy

[13:04] <rindolf> hoelzro: suppity sup?

[13:07] <hoelzro> nothing much; working on my Perl6 syntax highlighter

[13:16] <moritz> nr: say 1, 2 Z <a b> X <A B>

[13:16] <p6eval> niecza v24-12-g8e50362: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤"Z" and "X" are non-associative and require parens at /tmp/dzx1AEK5zQ line 1:␤------> [32msay 1, 2 Z <a b> X [33m⏏[31m<A B>[0m␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1443 …

[13:16] <p6eval> ..rakudo 13e805: OUTPUT«1 a 2 A␤»

[13:18] <moritz> nr: say 1, 2 Z <a b> Z <A B>

[13:18] <p6eval> rakudo 13e805, niecza v24-12-g8e50362: OUTPUT«1 a A 2 b B␤»

[13:18] <moritz> how would I define an operator that is list-associative with itself, but non-associative with others?

[13:18] <moritz> or are all list-associative operators supposed to be that way?

[13:27] *** werwerwer joined
[13:43] <moritz> std: my ::MyType ::= :(Num, Str)

[13:43] <p6eval> std a8bc48f: OUTPUT«[31m===[0mSORRY![31m===[0m␤Multiple prefix constraints not yet supported at /tmp/pprM0r3wLU line 1:␤------> [32mmy ::MyType ::[33m⏏[31m= :(Num, Str)[0m␤Illegal redeclaration of symbol 'MyType' (see line 1) at /tmp/pprM0r3wLU line 1:␤------> [32mmy ::MyType[…

[13:45] <moritz> r: my ::MyType ::= :(Num, Str)

[13:45] <p6eval> rakudo 13e805: OUTPUT«[31m===[0mSORRY![31m===[0m␤Cannot use :: as a type name␤at /tmp/ECoHa_8Wwa:1␤------> [32mmy ::MyType ::[33m⏏[31m= :(Num, Str)[0m␤    expecting any of:␤        scoped declarator␤»

[13:47] <moritz> std: class class {}; say class.new.perl

[13:47] <p6eval> std a8bc48f: OUTPUT«ok 00:00 42m␤»

[13:51] <moritz> rakudo: role Maybe[::T] { role Just[T] {} }; say Maybe[Int].new()

[13:51] <p6eval> rakudo 13e805: OUTPUT«Maybe.new()␤»

[13:52] <moritz> rakudo: role Maybe[::T] { role Just[T] {} }; say Maybe[Int].new() say Maybe[Str].new

[13:52] <p6eval> rakudo 13e805: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row␤at /tmp/5_17o4C71w:1␤------> [32mrole Just[T] {} }; say Maybe[Int].new() [33m⏏[31msay Maybe[Str].new[0m␤    expecting any of:␤        method arguments␤        argument list␤        postfix␤        infix or meta-…

[13:52] <moritz> rakudo: role Maybe[::T] { role Just[T] {} }; say Maybe[Int].new(); say Maybe[Str].new

[13:52] <p6eval> rakudo 13e805: OUTPUT«Maybe.new()␤Maybe.new()␤»

[13:52] <moritz> jnthn++ # ttiar error messages

[14:06] *** am0c joined
[14:14] *** Rix joined
[14:19] <moritz> nr: say Bool ~~ Int

[14:19] <p6eval> rakudo 13e805: OUTPUT«False␤»

[14:19] <p6eval> ..niecza v24-12-g8e50362: OUTPUT«True␤»

[14:21] <colomon> moritz++

[14:22] <moritz> r: say ((1,2) X <a b>).perl

[14:22] <p6eval> rakudo 13e805: OUTPUT«((1, "a"), (1, "b"), (2, "a"), (2, "b")).list␤»

[14:22] <moritz> r: say [(1,2) X <a b>].perl

[14:22] <p6eval> rakudo 13e805: OUTPUT«[1, "a", 1, "b", 2, "a", 2, "b"]␤»

[14:25] <moritz> rakudo: my $b = &time; say &$b;

[14:25] <p6eval> rakudo 13e805: OUTPUT«[31m===[0mSORRY![31m===[0m␤Undeclared name:␤    &time used at line 1␤␤»

[14:25] <moritz> rakudo: my $b = &sin; say &$b;

[14:25] <p6eval> rakudo 13e805: OUTPUT«sub sin() { ... }␤»

[14:27] <jnthn> o/

[14:27] <phenny> jnthn: 29 Dec 22:20Z <[Coke]> ask jnthn about implementing the math ops - I have the project open in eclipse, docs say that some of the math ops are already implemented, so I was going to use that as a basis to implement the missing ones. - but I can't see where Math or sin is used, e.g. help me help you!

[14:27] *** PacoAir joined
[14:27] <phenny> jnthn: 29 Dec 22:23Z <[Coke]> ask jnthn - I'm assuming that the others are more builtin, somehow. If you could point me at one of those math ops, I can knock out the rest.

[14:27] <phenny> jnthn: 07:37Z <doy> tell jnthn actually, the more i think about it, the more i really don't like that the default behavior for say $foo or "blah $foo blah" can be to just die - this makes writing robust error handling fairly difficult - how do you generate an error message for an invalid value when that value could potentially be an incomplete role type object?

[14:27] *** att__ left
[14:29] <jnthn> phenny: tell [Coke] if you look in JASTCompiler.nqp you'll see a line like "QAST::OperationsJAST.map_classlib_core_op('sin_n', ...)" which maps sin_n to a JVM class library built-in. But for other math ops the class lib's Math class lacks such a method.

[14:29] <phenny> jnthn: I'll pass that on when [Coke] is around.

[14:29] *** att__ joined
[14:31] <jnthn> phenny: tell [Coke] you'd need to implement those extra ones (in terms of simpler things) in the org.perl6.nqp.runtime.Ops, then add mappings in JASTCompiler; for an example of mapping to something in the Ops class, see the line like "QAST::OperationsJAST.map_classlib_core_op('what', ...)"

[14:31] <phenny> jnthn: I'll pass that on when [Coke] is around.

[14:32] <jnthn> phenny: tell doy I'm starting to wonder if we shouldn't allow punning of partial roles and they just fail at the point you call one of the undefined methods.

[14:32] <phenny> jnthn: I'll pass that on when doy is around.

[14:33] *** JJ_Brain joined
[14:34] <jnthn> FROGGS: onlystar means that it is a trivial proto that just immediately starts looking through the candidate list, thus we can safely merge as there's no confusion over what the proto does.

[14:34] <jnthn> FROGGS: If two modules defined protos with some interesting logic in, we probably bad better not pick one at random :)

[14:34] <jnthn> So I think that case should continue to die.

[14:44] <FROGGS> k

[14:44] <FROGGS> got it

[14:46] <jnthn> ah, gotta go...back later &

[14:46] <FROGGS> have fun

[14:51] *** denisboyun_ left
[14:57] *** denisboyun_ joined
[15:05] *** denisboyun_ left
[15:08] *** denisboyun_ joined
[15:20] *** JJ_Brain left
[15:20] *** JJ_Brain joined
[15:22] *** arkydo joined
[15:24] *** JJ_Brain left
[15:28] <timotimo> finally some time to program some perl6 :)

[15:32] <colomon> \o/

[15:36] * colomon is desperately trying to find his niecza-based MP3 tools... need to do some tag editing! 

[15:39] <hoelzro> the pygments lexer now properly handles code embedded in (regex|token|rule)

[15:39] <hoelzro> \o/

[15:40] *** arkydo_ joined
[15:40] *** arkydo_ left
[15:41] <moritz> \o/

[15:41] *** arkydo left
[15:48] *** JJ_Brain joined
[15:50] <hoelzro> you can do qw:s /.../ and such, right?

[15:50] <hoelzro> the abbreviated forms still allow adverbs?

[15:52] <moritz> std: qw:s/.../

[15:52] <p6eval> std a8bc48f: OUTPUT«ok 00:00 41m␤»

[15:52] <moritz> r: qw:s/.../

[15:53] <p6eval> rakudo 13e805:  ( no output )

[15:53] <moritz> hoelzro: yes, you can :-)

[15:53] <hoelzro> ok, cool

[15:54] <moritz> r: my $a = 'a b'; say qw:s/x $a y/.perl

[15:54] <p6eval> rakudo 13e805: OUTPUT«("x", "a", "b", "y").list␤»

[15:54] <moritz> rakudo++

[16:04] *** JJ_Brain left
[16:12] <hoelzro> Perl 6 code is written in Unicode, but the encoding isn't defined, is it?

[16:13] <moritz> so far all compiler assume UTF-8

[16:14] <hoelzro> oh, really?

[16:14] <hoelzro> but that's not in the spec?

[16:14] <moritz> no

[16:14] <hoelzro> ok

[16:15] <hoelzro> then I'll make the default encoding for the lexer utf-8, but allow an override

[16:20] <hoelzro> did anyone see my question about the typo in S05 earlier?

[16:21] * moritz didn't

[16:21] <hoelzro> hang on

[16:21] <hoelzro> on line 227 of S05-regex.pod in the spec, it talks about :sigspace; shouldn't this be talking about :samecase instead?

[16:22] <moritz> no

[16:22] <hoelzro> does ms/.../ only apply to :sigspace, or are there other valid abbreviations for m/.../ and s/.../.../ as well?

[16:23] <moritz> std: mi/a/

[16:23] <p6eval> std a8bc48f: OUTPUT«[31m===[0mSORRY![31m===[0m␤Bogus term at /tmp/8PZV08ISnW line 1 (EOF):␤------> [32mmi/a/[33m⏏[31m<EOL>[0m␤Undeclared routines:␤     'a' used at line 1␤     'mi' used at line 1␤Parse failed␤FAILED 00:00 42m␤»

[16:23] <moritz> seems not

[16:23] <hoelzro> ok, I was just wondering because it was talking about :samecase in that paragraph

[16:23] <hoelzro> ok

[16:26] <timotimo> finally some time to program some perl6 :)

[16:27] *** PacoAir left
[16:27] *** PacoAir_ joined
[16:27] *** JJ_Brain joined
[16:30] *** JJ_Brain left
[16:36] <doy> phenny: tell jnthn that might be reasonable. it's a bit questionable conceptually, but it does make calling methods on role type objects behave the way i'd expect (mostly because i wouldn't really expect punning to actually be necessary, except for the case of things like .new that need to use metamodel bits)

[16:36] <phenny> doy: I'll pass that on when jnthn is around.

[16:36] <phenny> doy: 14:32Z <jnthn> tell doy I'm starting to wonder if we shouldn't allow punning of partial roles and they just fail at the point you call one of the undefined methods.

[16:39] <doy> phenny: tell jnthn the only thing i could think of that might be weird is «my $class; role Foo { method bar {...}; method baz { $class = self } }; Foo.baz», which would now give a class type object in $class that still has an unfulfilled required method. this may just be a case of "don't do that then", it's fairly obscure.

[16:39] <phenny> doy: I'll pass that on when jnthn is around.

[16:39] <hoelzro> Grammar.pm is a great test for this lexer

[16:40] <moritz> STD.pm6 would be even better

[16:40] <moritz> Grammar.pm is written in NQP

[16:41] * jnthn back for another little bit :)

[16:41] <phenny> jnthn: 16:36Z <doy> tell jnthn that might be reasonable. it's a bit questionable conceptually, but it does make calling methods on role type objects behave the way i'd expect (mostly because i wouldn't really expect punning to actually be necessary, except for the case of things like .new that need to use metamodel bits)

[16:41] <phenny> jnthn: 16:39Z <doy> tell jnthn the only thing i could think of that might be weird is «my $class; role Foo { method bar {...}; method baz { $class = self } }; Foo.baz», which would now give a class type object in $class that still has an unfulfilled required method. this may just be a case of "don't do that then", it's fairly obscure.

[16:41] <jnthn> doy: Punning is required because all roles are generic.

[16:42] <jnthn> That is, it they have incomplete bits. Specifically, the invocant is a type variable.

[16:42] <jnthn> This has to be "filled in" by some type.

[16:43] <jnthn> Which is the type of the class that the role gets composed into

[16:43] <hoelzro> does {} have a special meaning in a regex?

[16:43] <moritz> I wonder if that leads to some conceptual similarities to quasis and role bodies

[16:43] <hoelzro> other than a very small closure?

[16:43] <moritz> hoelzro: yes, it introduces a code block

[16:43] <hoelzro> moritz: I see a bunch of empty ones in Grammar.pm

[16:43] <hoelzro> why is that?

[16:43] <jnthn> moritz: Typically used to force end of declarative prefix.

[16:43] <moritz> for terminating LTM

[16:43] <jnthn> er, hoelzro ^^

[16:43] <hoelzro> oh, ok

[16:44] <jnthn> r: say 'abcd' ~~ / a \w+ | abc /

[16:44] <hoelzro> just checking to see if I should color them specially

[16:44] <p6eval> rakudo 13e805: OUTPUT«｢abcd｣␤␤»

[16:44] <jnthn> r: say 'abcd' ~~ / a {} \w+ | abc /

[16:44] <p6eval> rakudo 13e805: OUTPUT«｢abc｣␤␤»

[16:44] <jnthn> hoelzro: No, they really are just code blocks.

[16:44] <hoelzro> ok, good

[16:44] <hoelzro> less work for me =)

[16:44] <jnthn> The empty use to terminate LTM is just a useful idiom.

[16:45] <moritz> isn't there a :: or ::: or so that's meant to terminate LTM

[16:45] <hoelzro> I see

[16:45] <hoelzro> the lexer is getting pretty good =)

[16:45] <jnthn> moritz: Were it implemented, :: would also do it but has other consequences

[16:46] <hoelzro> after it's able to hilight Grammar.pm and Actions.pm "well enough", I'll make an announcement for people to try it

[16:46] <jnthn> iirc, anyways

[16:52] *** fgomez left
[16:58] <doy> jnthn: isn't the invocant also a type variable when you call methods on a class type object?

[17:00] <jnthn> No

[17:00] <jnthn> Type object != type variable

[17:00] <doy> oh, i see

[17:00] <jnthn> sub foo(::T $x) { }

[17:00] <doy> right

[17:00] <jnthn> The ::T is a type variable

[17:01] <doy> but why is that necessary?

[17:01] <doy> couldn't that just be the role?

[17:01] *** Abcxyz joined
[17:02] <jnthn> No, because then we'd get multi-dispatch wrong.

[17:03] *** Chillance joined
[17:03] <doy> even in the case of method dispatch?

[17:08] <jnthn> Well, it's multi-method dispatch in particular that's the issue

[17:09] <jnthn> All the candidates are considered together. One composed into a subclass should, all else being equal, beat one composed into a superclass

[17:10] <doy> sure, but when would a punned class ever have a subclass?

[17:11] <jnthn> At the time a role is declared, we've no idea how it will be used. The things have to be generic for the composition case.

[17:11] <jnthn> family stuff, bbl

[17:16] *** GlitchMr left
[17:17] *** GlitchMr joined
[17:25] <masak> hola, #perl6

[17:25] *** am0c left
[17:26] <moritz> \o masak

[17:40] *** fgomez joined
[17:43] <tadzik> hola hola

[17:43] <flussence> I don't think I'm experienced enough yet to post something here: http://www.reddit.com/r/ProgrammingLanguages/comments/15ofha/

[17:44] <tadzik> no everyone will be to humble to reply there :)

[17:45] <moritz> "comefrom" comes to mind

[17:45] <moritz> junctions

[17:45] <moritz> grammars

[17:47] <moritz> http://www.i-programmer.info/professional-programmer/i-programmer/5255-niecza-perl-6-implemented-in-net.html

[17:54] <flussence> tadzik: is there a way I can tell panda not to use precompilation? I don't mind it being really slow if it actually runs

[17:55] <tadzik> hm, we can make one :)

[17:57] <masak> flussence: lexical scoping. it's one of these features that grow cooler the more you stick to it.

[17:59] <moritz> ~ .

[18:00] <flussence> ooh, lexical scoping. good idea

[18:00] <tadzik> I for one very like Go's channels :)

[18:01] <moritz> type inference

[18:02] <masak> subroutines :)

[18:03] <flussence> right after I posted I remembered an even better one: first class functions

[18:05] <Abcxyz> unroll loops :)

[18:05] <flussence> (someone else can have that one :)

[18:08] * moritz 's reply: http://www.reddit.com/r/ProgrammingLanguages/comments/15ofha/what_are_the_coolestbest_features_ever_created_in/c7obmgd

[18:10] *** Liao joined
[18:12] *** Liao left
[18:32] *** rindolf left
[18:35] *** GlitchMr left
[18:35] *** GlitchMr joined
[18:40] *** alec joined
[19:12] *** mtk left
[19:16] <timotimo> what exactly causes the parse of a rule called "take" to call the regular take method?

[19:25] <[Coke]> jnthn: Argh. my eclipse project search doesn't search *.nqp files by default, no wonder I couldn't find the sin. :)

[19:25] <phenny> [Coke]: 14:29Z <jnthn> tell [Coke] if you look in JASTCompiler.nqp you'll see a line like "QAST::OperationsJAST.map_classlib_core_op('sin_n', ...)" which maps sin_n to a JVM class library built-in. But for other math ops the class lib's Math class lacks such a method.

[19:25] <phenny> [Coke]: 14:31Z <jnthn> tell [Coke] you'd need to implement those extra ones (in terms of simpler things) in the org.perl6.nqp.runtime.Ops, then add mappings in JASTCompiler; for an example of mapping to something in the Ops class, see the line like "QAST::OperationsJAST.map_classlib_core_op('what', ...)"

[19:27] *** alec left
[19:38] <timotimo> i'm running into great ideas and then great problems all the time :D

[19:39] <[Coke]> jnthn: do the functions in ops need to take {SixModelObject}s or are doubles fine?

[19:46] *** pmurias joined
[19:46] <pmurias> jnthn: if I want to serialize the serialization context (to js) how should I extra the data from it?

[19:52] *** snearch joined
[19:53] <pmurias> s/extra/extract/

[19:54] <pmurias> jnthn: is just reading the serialized binary data the best option?

[19:54] *** thou left
[19:54] *** fgomez left
[20:05] *** wooden left
[20:06] *** tcpr1347 joined
[20:08] *** thou joined
[20:20] *** ilogger2 joined
[20:20] *** ChanServ sets mode: +v ilogger2

[20:24] *** ponbiki joined
[20:24] *** ponbiki is now known as Guest340

[20:32] *** alext joined
[20:32] <alext> hi everyone

[20:32] <Ulti> hi

[20:33] <alext> I would like to know more about how I can help 

[20:33] <alext> perl language development

[20:33] <alext> ?

[20:33] <moritz> well, the easiest way to help is to write Perl 6 modules

[20:34] <moritz> and maybe writing documentation

[20:34] <Ulti> alext: there is a list of them linked from here http://perl6.org/getting-started/involved

[20:34] <moritz> harder ways include hacking the compilers

[20:35] <alext> I am new to perl language but I have strog background in assembly language,C,C++ and java

[20:35] <alext> so it won't be problem for me to learn fast

[20:36] <alext> Ulti: tnx for link

[20:38] <tadzik> alext: if you are fluent with JVM then you might look at the JVM port

[20:38] <tadzik> not sure how Java is that :)

[20:41] *** alexrem joined
[20:43] <Ulti> tadzik not very ;) at least my degree which covered Java never actually touched on bytecode or the VM

[20:46] <alext> Actually, when worked with java and when I was learning I needed to think like compiler and to understand JVM to details

[20:47] <alext> and need to agree with Ulti, it's not just Java

[20:48] <alexrem> Hi I have just installed Rakudo Perl6 Via windows msi. Can not find any editor, Nor Can find any Docs to learn the Syntax. 

[20:49] <moritz> alexrem: you can use any text editor you want

[20:49] *** bro_grammer joined
[20:49] <moritz> alexrem: and there should be a UsingPerl6.pdf installed somewhere

[20:50] <moritz> if not, you can lots of pointers to documentation on http://perl6.org/documentation/

[20:50] <moritz> *you can find

[20:52] <Ulti> alexrem: you might want to check out Padre it has support for highlighting perl6 syntax

[20:52] <alexrem> I was hopping to learn the basic like what the file extensions should be. and an editor to help fixing Syntax. Also I also have installed Activeperl and do they conflict?

[20:53] <moritz> they don't conflict

[20:53] <moritz> modules have the extension .pm or .pm6

[20:54] <moritz> and scripts usually .p6 or .pl, but you can really call them whatever you like

[20:54] <alexrem> <ulti> I did but can not down load editor ony it gives you the whole package and it is 5.14...

[20:56] <Ulti> alexrem: yeah but thats just the install of perl5

[20:56] <Ulti> its strawberry perl with some extra modules

[20:57] <alexrem> do I need do any cpan calls or other calls to install other downloaded Rakudo included mod's or parts?

[20:57] <alexrem> I did but can not down load editor ony it gives you the whole package and it is 5.14...

[20:58] <Ulti> alexrem: this might be a good post to checkout http://szabgab.com/getting-started-with-perl-6.html

[20:59] <alexrem> I ask all to for give my eerors in this IRC channel  as this my first IRC chat ever. :)

[20:59] <Ulti> alexrem: CPAN is all perl5, for perl6 there is a tool called panda to install perl6 modules

[20:59] <Ulti> afaik

[21:00] <moritz> yes, correct

[21:00] <alexrem> Thank to all. I will go and check the above and get back on. I will sill be on line so anyone can help please comment. Thanks again.

[21:00] <Ulti> does panda work in windows?

[21:04] <alexrem> <moritz> how do I set real name in the chanel?

[21:15] <alexrem> .

[21:17] *** alexrem left
[21:20] <moritz> alext: I think you have to register your nick. See https://freenode.net/faq.shtml#contents-userregistration

[21:24] <alext> moritz: Yes, I will register a nick. Tnx. I didn't use irc for a while 

[21:30] *** alec joined
[21:54] *** tcpr1347 joined
[22:56] *** am0c joined
[23:05] *** hbg joined
[23:07] *** wamba joined
[23:07] *** hbg left
[23:07] *** alext left
[23:11] *** hbg joined
[23:11] <hbg> clear

[23:18] *** hbg left
[23:23] *** hbg joined
[23:24] *** Khisanth joined
[23:28] *** am0c left
[23:30] *** bro_grammer left
[23:35] *** hbg left
[23:38] *** MikeFair joined
[23:39] *** Khisanth left
[23:50] *** alec left
[23:52] *** Khisanth joined
