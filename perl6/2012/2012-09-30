[00:03] *** MayDaniel left
[00:08] *** MikeFair_ joined
[00:15] <[Coke]> nqp: INIT {my %foo := Hash.new()} ; %foo{3} :=4; say %foo.perl;

[00:15] <p6eval> nqp: OUTPUT«(signal SEGV)»

[00:15] <[Coke]> BOOYAH

[00:16] <[Coke]> (the my should be outside of the INIT block)

[00:18] <[Coke]> opened as nqp#57

[00:25] *** stopbit left
[00:34] *** erkan left
[01:13] *** sftp_ left
[01:16] *** sftp joined
[01:30] *** sftp left
[01:30] *** sftp joined
[01:35] *** sftp left
[01:36] *** sftp joined
[01:37] *** ServerSage left
[01:37] *** xinming left
[01:37] *** odoacre left
[01:42] *** ServerSage joined
[01:42] *** xinming joined
[01:42] *** odoacre joined
[01:46] *** _jaldhar_ left
[01:49] *** sizz_ joined
[01:52] *** ServerSage left
[01:52] *** xinming left
[01:52] *** odoacre left
[01:58] *** ServerSage joined
[01:58] *** xinming joined
[01:58] *** odoacre joined
[01:59] *** _jaldhar_ joined
[02:07] *** xdbr left
[02:09] *** odoacre_ joined
[02:09] *** sftp left
[02:11] *** odoacre left
[02:11] *** sftp_ joined
[02:21] *** macae joined
[02:26] *** JTAAEIDW joined
[02:28] *** macae left
[02:31] *** macae joined
[02:39] *** am0c joined
[02:43] *** armitage81 joined
[02:43] *** macae left
[02:46] *** orafu left
[02:46] *** PacoAir left
[02:46] *** orafu joined
[02:48] *** PacoAir joined
[02:50] *** armitage81 left
[02:52] *** PacoAir left
[02:54] *** PacoAir joined
[02:55] *** macae joined
[02:56] *** tokuhiro_ joined
[02:59] *** PacoAir left
[03:01] *** macae left
[03:41] *** Tanktalus left
[03:48] *** thou joined
[03:53] *** Tanktalus joined
[04:00] *** popl joined
[04:01] *** rurban left
[04:02] <[Coke]> anyone know how I can invoke a sub in nqp when I have the /name/ of the sub in a var? "command"(@args) works, but my $a := 'command'; "$a"(@args) # fails.

[04:04] *** rurban joined
[04:12] <sorear> [Coke]: how is the sub defined?

[04:13] <sorear> maybe some variation on pir::find_lex__PS($a)(@args)

[04:14] *** telex left
[04:14] <[Coke]> in a .pm that is precompiled to pir and then use'd

[04:14] <[Coke]> (and the sub is exported, so it's visible)

[04:16] <[Coke]> nqp: sub v($a) {say($a)}; pir::find_lex__PS("v")(4);

[04:16] <p6eval> nqp: OUTPUT«(signal SEGV)»

[04:17] <sorear> nqp: sub v($a) {say($a)}; pir::find_lex__PS("foo")(4);

[04:17] <p6eval> nqp: OUTPUT«(signal SEGV)»

[04:17] <sorear> nqp: sub v($a) {say($a)}; pir::find_lex__PS("&v")(4);

[04:17] <p6eval> nqp: OUTPUT«4␤»

[04:17] * [Coke] opens issue#58 for that.

[04:17] <sorear> nqp: pir::find_lex__PS("v")(4);

[04:17] <p6eval> nqp: OUTPUT«(signal SEGV)»

[04:18] <sorear> found a working version and golfed the crash \o/

[04:18] <[Coke]> me updates.

[04:19] <sorear> if you put lines ``` before and after the irc log chunk, github's markdown parser won't eat it

[04:19] * sorear fixed the issue

[04:20] <[Coke]> fixed.

[04:21] <[Coke]> sorear: the find lex doesn't find it.

[04:21] <[Coke]> works fine in a single .pm, but not when things are being use'd and exported.

[04:22] *** rurban left
[04:22] <[Coke]> trying get_global__PS

[04:23] <[Coke]> nope.

[04:23] <[Coke]> (segfaults trying to exec, presumably having found nothing)

[04:25] <sorear> [Coke]: the obvious workaround is to make a hash of coderefs

[04:25] <sorear> alternatively, use a class and nqp::findmethod somehow

[04:26] *** telex joined
[04:26] <sorear> maybe obvious is not quite the right word.  simplest?

[04:26] <[Coke]> (hash of coderefs)... which is what I had in parrot-nqp, s/hash/namespace/ ;)

[04:28] <[Coke]> I'm just getting further and further away from the VM here.

[04:28] *** gfldex joined
[04:29] <[Coke]> -> zzz

[04:29] <[Coke]> sorear++

[04:29] *** rurban joined
[04:49] *** gfldex left
[04:51] *** gfldex joined
[05:08] *** Tanktalus left
[05:22] *** Tanktalus joined
[05:25] *** gfldex left
[05:25] <moritz> good morning

[05:25] <dalek> rakudo/nom: 30a13c1 | moritz++ | / (2 files):

[05:25] <dalek> rakudo/nom: implement :60[..] with decimal dot

[05:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/30a13c1189

[05:26] <sorear> good morning moritz.

[05:27] *** gfldex joined
[05:56] *** Chillance left
[05:56] *** am0c left
[06:15] *** popl left
[06:28] *** gfldex left
[06:30] *** gfldex joined
[07:05] *** Tanktalus left
[07:09] <jnthn> afternoon o/

[07:09] <diakopter> o/

[07:19] *** Tanktalus joined
[07:34] *** Psyche^ joined
[07:38] *** Patterner left
[07:38] *** Psyche^ is now known as Patterner

[07:42] <jnthn> So...been segfaulting NQP have we... :)

[07:46] <sorear> o/ jnthn

[07:47] <sorear> yes, [Coke]++ has been continuing his heroic efforts to get tcl running on new-nqp

[07:47] <TimToady> .oO(All progress depends on the unreasonable man...)

[07:51] <jnthn> Think I can see why we get the unreasonable segfaults...

[07:54] <dalek> nqp: 81e9c47 | jonathan++ | src/pmc/nqplexpad.pmc:

[07:54] <dalek> nqp: Fix a NULL-o.

[07:54] <dalek> nqp: review: https://github.com/perl6/nqp/commit/81e9c47bb1

[07:54] <diakopter> I'll return you

[07:55] <jnthn> Now the segfault is fixed, lemme see about detecting undeclared variables properly :)

[07:56] <diakopter> n: say 1.1.<><>

[07:56] <p6eval> niecza v22-6-g9e5350d: OUTPUT«␤»

[07:56] <diakopter> n: say 1.1.<m>

[07:56] <p6eval> niecza v22-6-g9e5350d: OUTPUT«Unhandled exception: Cannot use hash access on an object of type Rat␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.setting line 352 (Any.at_key @ 9) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/W3E0hrvsCd line 1 (mainline…

[07:59] <diakopter> rn: say .--, .--, .--

[07:59] <p6eval> niecza v22-6-g9e5350d: OUTPUT«0-1-2␤»

[07:59] <p6eval> ..rakudo 30a13c: OUTPUT«===SORRY!===␤Method 'unshift' not found for invocant of class 'NQPMu'␤»

[07:59] <jnthn> wtf :)

[07:59] <jnthn> More code is valid Perl 6? :P

[07:59] <diakopter> we so valid

[08:00] <TimToady> rn: ---...---

[08:00] <p6eval> niecza v22-6-g9e5350d: OUTPUT«===SORRY!===␤␤"--" and "--" are not associative at /tmp/I4F3j0n6rE line 1:␤------> ---...--⏏-␤␤Unhandled exception: "--" and "--" are not associative at /tmp/I4F3j0n6rE line 1:␤------> ---...--⏏-␤␤  at…

[08:00] <p6eval> ..rakudo 30a13c: OUTPUT«===SORRY!===␤Confused␤at /tmp/2Vp0k488jr:1␤»

[08:00] <sorear> r: .--

[08:00] <p6eval> rakudo 30a13c: OUTPUT«===SORRY!===␤Method 'unshift' not found for invocant of class 'NQPMu'␤»

[08:00] <TimToady> rn: ...---...

[08:00] <p6eval> rakudo 30a13c:  ( no output )

[08:00] <p6eval> ..niecza v22-6-g9e5350d: OUTPUT«Unhandled exception: >>>Stub code executed␤  at /tmp/dQF2FPJwkL line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4198 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4199 (module-CORE @ 574) ␤  at /home/p6eval/niecza/lib/CORE…

[08:00] <TimToady> rn: say ...---...

[08:00] <p6eval> niecza v22-6-g9e5350d: OUTPUT«Unhandled exception: >>>Stub code executed␤  at /tmp/hue1zcpNor line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4198 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4199 (module-CORE @ 574) ␤  at /home/p6eval/niecza/lib/CORE…

[08:00] <p6eval> ..rakudo 30a13c:  ( no output )

[08:01] <diakopter> rakudo? no newline?

[08:01] <sorear> no, because ... has the effect of a &return in Rakudo

[08:01] <sorear> it's a kind of &fail

[08:03] <diakopter> rn: say {}[]()

[08:03] <p6eval> niecza v22-6-g9e5350d: OUTPUT«Unhandled exception: Unable to resolve method postcircumfix:<( )> in type Hash␤  at /tmp/eGPe2svuiN line 1 (mainline @ 9) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4198 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4199 (module-CORE @ 574…

[08:03] <p6eval> ..rakudo 30a13c: OUTPUT«No such method 'postcircumfix:<( )>' for invocant of type 'List'␤  in  at src/gen/BOOTSTRAP.pm:827␤  in any  at src/gen/BOOTSTRAP.pm:811␤  in block  at /tmp/OypVFFQGLk:1␤␤»

[08:03] <diakopter> Hash vs List

[08:04] <diakopter> rn: say {}[].WHAT

[08:04] <p6eval> niecza v22-6-g9e5350d: OUTPUT«Hash()␤»

[08:04] <p6eval> ..rakudo 30a13c: OUTPUT«List()␤»

[08:04] <diakopter> who so right

[08:04] <jnthn> Rakudo I think

[08:04] <jnthn> You did a zen slice

[08:06] <diakopter> rn: say (8, 7)[* * *]

[08:06] <p6eval> niecza v22-6-g9e5350d: OUTPUT«Unhandled exception: No value for parameter 'anon_1' in 'ANON'␤  at /tmp/_QrmS8WAg8 line 0 (ANON @ 1) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/_QrmS8WAg8 line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4198 (ANON @ 3) ␤  at …

[08:06] <p6eval> ..rakudo 30a13c: OUTPUT«Nil␤»

[08:08] *** GlitchMr joined
[08:08] <sorear> rn: [1..10][&say]

[08:08] <p6eval> niecza v22-6-g9e5350d: OUTPUT«10␤»

[08:08] <p6eval> ..rakudo 30a13c: OUTPUT«Cannot coerce Inf to an Int␤  in method Numeric at src/gen/CORE.setting:9927␤  in sub infix:<==> at src/gen/CORE.setting:2602␤  in sub infix:<xx> at src/gen/CORE.setting:5856␤  in method postcircumfix:<[ ]> at src/gen/CORE.setting:1303␤  in block  at /tmp/t4kuYEMPr…

[08:09] <sorear> what.

[08:09] * diakopter titters

[08:09] <jnthn> heh

[08:10] <jnthn> r: say &say.arity

[08:10] <p6eval> rakudo 30a13c: OUTPUT«0␤»

[08:10] <jnthn> r: say &say.count

[08:10] <p6eval> rakudo 30a13c: OUTPUT«Inf␤»

[08:12] <diakopter> r: say Confused .

[08:12] <p6eval> rakudo 30a13c: OUTPUT«===SORRY!===␤Confused␤at /tmp/cmFVtqiHTv:1␤»

[08:12] <diakopter> XD

[08:19] <diakopter> n: say (1 !??! !! !1 !! 1).WHAT

[08:19] <p6eval> niecza v22-6-g9e5350d: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1289 (warn @ 5) ␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 266 (Mu.Str @ 15) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/boot/l…

[08:19] <diakopter> n: 1 !??! !! !1 !! 1

[08:19] <p6eval> niecza v22-6-g9e5350d: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1289 (warn @ 5) ␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 266 (Mu.Str @ 15) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/boot/l…

[08:20] <diakopter> sorear: _._

[08:20] *** Tanktalus left
[08:21] <diakopter> n: say 1 ??! !! !0 !! 1

[08:21] <p6eval> niecza v22-6-g9e5350d: OUTPUT«False␤»

[08:22] <diakopter> this confusez me.

[08:22] <sorear> diakopter: ^.^?

[08:22] <diakopter> :)

[08:22] <diakopter> which !! goes with the ?? above

[08:22] <sorear> n: say 1 ?? (! !! !0) !! 1

[08:23] <p6eval> niecza v22-6-g9e5350d: OUTPUT«False␤»

[08:23] <sorear> std: say ! !! !0

[08:23] <p6eval> std 77327a4: OUTPUT«ok 00:00 42m␤»

[08:23] <sorear> std: say 1 ??! !! !0 !! 1

[08:23] <p6eval> std 77327a4: OUTPUT«ok 00:00 42m␤»

[08:23] <diakopter> k

[08:25] <diakopter> n: say !?!!?!1??1!??!!?!?!?1!!1!!1

[08:25] <p6eval> niecza v22-6-g9e5350d: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1289 (warn @ 5) ␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 266 (Mu.Str @ 15) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/boot/l…

[08:26] <diakopter> where is Mu

[08:29] <diakopter> n: say 1??1!??1!!1 # golfed

[08:29] <p6eval> niecza v22-6-g9e5350d: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1289 (warn @ 5) ␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 266 (Mu.Str @ 15) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/boot/l…

[08:30] <diakopter> std: say 1??1!??1!!1 # golfed

[08:30] <p6eval> std 77327a4: OUTPUT«===SORRY!===␤Cannot negate ?? !! because conditional operators are too fiddly at /tmp/cKY74ZkZyp line 1:␤------> say 1??1!??1!!⏏1 # golfed␤Cannot negate ??1!! because conditional operators are not iffy enough at /tmp/cKY74ZkZyp li…

[08:30] <diakopter> rn: say - - -

[08:31] <p6eval> niecza v22-6-g9e5350d: OUTPUT«===SORRY!===␤␤Prefix requires an argument at /tmp/mWzDlRpKj4 line 1 (EOF):␤------> say - - -⏏<EOL>␤␤Parse failed␤␤»

[08:31] <p6eval> ..rakudo 30a13c: OUTPUT«===SORRY!===␤Preceding context expects a term, but found infix - instead␤at /tmp/qoHP4LFvX0:1␤»

[08:31] <diakopter> rn: say - - - 1

[08:31] <p6eval> rakudo 30a13c, niecza v22-6-g9e5350d: OUTPUT«-1␤»

[08:31] <diakopter> rn: say - - - -- - - --- - -- - -- - -- - -- 1

[08:31] <p6eval> rakudo 30a13c: OUTPUT«Cannot assign to a non-container␤  in sub prefix:<--> at src/gen/CORE.setting:2869␤  in block  at /tmp/RdW4wdgT_p:1␤␤»

[08:31] <p6eval> ..niecza v22-6-g9e5350d: OUTPUT«Unhandled exception: Writing to readonly scalar␤  at /tmp/qYmFSIT49a line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4198 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4199 (module-CORE @ 574) ␤  at /home/p6eval/niecza/lib…

[08:31] <diakopter> rn: say - - - -- - - --- - -- - -- - -- - -- $_

[08:31] <p6eval> rakudo 30a13c: OUTPUT«Cannot assign to a non-container␤  in sub prefix:<--> at src/gen/CORE.setting:2869␤  in block  at /tmp/4VNeSp0Mqj:1␤␤»

[08:31] <p6eval> ..niecza v22-6-g9e5350d: OUTPUT«Unhandled exception: Writing to readonly scalar␤  at /tmp/BsfCoOwyCx line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4198 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4199 (module-CORE @ 574) ␤  at /home/p6eval/niecza/lib…

[08:31] <diakopter> rn: say $_ - - - -- - - --- - -- - -- - -- - -- $_

[08:32] <p6eval> rakudo 30a13c: OUTPUT«Cannot assign to a non-container␤  in sub prefix:<--> at src/gen/CORE.setting:2869␤  in block  at /tmp/x7M5wZF6mr:1␤␤»

[08:32] <p6eval> ..niecza v22-6-g9e5350d: OUTPUT«Unhandled exception: Writing to readonly scalar␤  at /tmp/Yt0Plzwihb line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4198 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4199 (module-CORE @ 574) ␤  at /home/p6eval/niecza/lib…

[08:32] <diakopter> rn: say $_ - - - --$_

[08:32] <p6eval> rakudo 30a13c, niecza v22-6-g9e5350d: OUTPUT«0␤»

[08:32] <diakopter> rn: say $_ - -- --$_

[08:32] <p6eval> niecza v22-6-g9e5350d: OUTPUT«0␤»

[08:32] <p6eval> ..rakudo 30a13c: OUTPUT«Cannot assign to a readonly variable or a value␤  in sub prefix:<--> at src/gen/CORE.setting:2869␤  in block  at /tmp/_HXhuoLF2B:1␤␤»

[08:32] <diakopter> rn: say -- --$_

[08:32] <p6eval> rakudo 30a13c: OUTPUT«Cannot assign to a readonly variable or a value␤  in sub prefix:<--> at src/gen/CORE.setting:2869␤  in block  at /tmp/U2tTBDkgkk:1␤␤»

[08:32] <p6eval> ..niecza v22-6-g9e5350d: OUTPUT«-2␤»

[08:32] <diakopter> rn: say --$_

[08:32] <p6eval> rakudo 30a13c, niecza v22-6-g9e5350d: OUTPUT«-1␤»

[08:33] <diakopter> oops

[08:33] <diakopter> didn't mean to spam the channel

[08:33] <diakopter> srry

[08:33] <diakopter> thought I was in a different window

[08:33] <diakopter> how embracing

[08:33] <dalek> nqp: a0b4c57 | jonathan++ | src/NQP/Actions.pm:

[08:33] <dalek> nqp: Catch undeclared variables properly.

[08:33] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a0b4c579cb

[08:34] <diakopter> jnthn: see this:

[08:34] <diakopter> rn: say --$_

[08:34] <p6eval> rakudo 30a13c, niecza v22-6-g9e5350d: OUTPUT«-1␤»

[08:34] *** Tanktalus joined
[08:34] <diakopter> rn: say -- --$_

[08:34] <p6eval> rakudo 30a13c: OUTPUT«Cannot assign to a readonly variable or a value␤  in sub prefix:<--> at src/gen/CORE.setting:2869␤  in block  at /tmp/nIC_JBTffj:1␤␤»

[08:34] <p6eval> ..niecza v22-6-g9e5350d: OUTPUT«-2␤»

[08:34] <diakopter> I don't know which is right

[08:35] <jnthn> diakopter: In Rakudo it returns the value I guess

[08:36] <diakopter> rn: say $_++++

[08:36] <p6eval> niecza v22-6-g9e5350d: OUTPUT«Unhandled exception: Writing to readonly scalar␤  at /tmp/41t8iE5qKh line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4198 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4199 (module-CORE @ 574) ␤  at /home/p6eval/niecza/lib…

[08:36] <p6eval> ..rakudo 30a13c: OUTPUT«Cannot assign to a non-container␤  in sub postfix:<++> at src/gen/CORE.setting:2873␤  in block  at /tmp/3yPUyjWxAU:1␤␤»

[08:36] <diakopter> they both return the value for post

[08:39] <jnthn> phenny: tell [Coke] both tickets resolved

[08:39] <phenny> jnthn: I'll pass that on when [Coke] is around.

[08:41] *** tgt joined
[08:41] <diakopter> rn: say %$_

[08:41] <p6eval> niecza v22-6-g9e5350d: OUTPUT«Unhandled exception: Unmatched key in Hash.LISTSTORE␤  at /home/p6eval/niecza/lib/CORE.setting line 388 (Any.hash @ 3) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/f2Ue8uLohI line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4198 …

[08:41] <p6eval> ..rakudo 30a13c: OUTPUT«Odd number of elements found where hash expected␤  in method STORE at src/gen/CORE.setting:6341␤  in method hash at src/gen/CORE.setting:1147␤  in block  at /tmp/VNAXiOjJBV:1␤␤»

[08:44] *** erkan joined
[08:44] *** erkan left
[08:44] *** erkan joined
[08:45] <diakopter> r: say %1 * 3

[08:45] <p6eval> rakudo 30a13c: OUTPUT«use of uninitialized variable $v of type Any in numeric context  in block  at /tmp/uwX4eggWmn:1␤␤0␤»

[08:46] <diakopter> rn: say -1 +& -2

[08:46] <p6eval> niecza v22-6-g9e5350d: OUTPUT«-2␤»

[08:46] <p6eval> ..rakudo 30a13c: OUTPUT«0␤»

[08:46] <diakopter> sorear: ^^

[08:47] <diakopter> rn: say -1 +& -3

[08:47] <p6eval> niecza v22-6-g9e5350d: OUTPUT«-3␤»

[08:47] <p6eval> ..rakudo 30a13c: OUTPUT«-1␤»

[08:47] <diakopter> eh

[08:48] <GlitchMr> >>> -1 & -2

[08:48] <GlitchMr> -2

[08:48] <GlitchMr> That sounds right

[08:48] <diakopter> poor rakudo

[08:49] <GlitchMr> It's negative integer, so everything gets reversed

[08:49] <sorear> I probably ought to disable my highlight on niecza

[08:50] <sorear> I like to know when people are talking about niecza but I don't like to know when diakopter is fuzz testing

[08:50] <sorear> is it possible to tell irssi to not trigger highlights on anything p6eval generates?

[08:50] <diakopter> I try not to fuzz on the channel; I just put things to the channel I find interesting

[08:51] *** crab2313 joined
[08:51] <sorear> interesting things will be immediately forgotten if they're sent here

[08:51] <sorear> there must be a better way

[08:51] <GlitchMr> I mean, on -1 & -2 Python and Ruby say me -2. So it's right

[08:51] <GlitchMr> And it makes sense. -1 is ~0.

[08:51] <diakopter> GlitchMr: right, so rakudo is different

[08:52] <sorear> remember precedence....

[08:52] <GlitchMr> -1 (with 8-bit integers) is 0xFF, -2 is 0xFE

[08:53] <GlitchMr> 0xFF & 0xFE == 0xFE

[08:53] <GlitchMr> of course, Perl 6 has infinite length integers

[08:53] <GlitchMr> But it still works like that

[08:53] <sorear> but niecza does bitops in 32-bit

[08:53] <sorear> n: say 2**31 +| 1

[08:53] <p6eval> niecza v22-6-g9e5350d: OUTPUT«-2147483647␤»

[08:53] <sorear> n: say 2**30 +| 1

[08:53] <p6eval> niecza v22-6-g9e5350d: OUTPUT«1073741825␤»

[08:53] <sorear> n: say 2**32 +| 1

[08:53] <p6eval> niecza v22-6-g9e5350d: OUTPUT«-2147483647␤»

[08:53] <GlitchMr> Yeah, that sounds like a bug

[08:54] <GlitchMr> Ruby and Python can do bitwise operations on infinite length integers

[08:55] <GlitchMr> But 0 definitely isn't right

[08:55] <GlitchMr> Somehow I have feeling that Rakudo has different number representation or something

[08:56] <diakopter> rn: say -1 +& 2**190

[08:56] <p6eval> niecza v22-6-g9e5350d: OUTPUT«-2147483648␤»

[08:56] <p6eval> ..rakudo 30a13c: OUTPUT«1569275433846670190958947355801916604025588861116008628224␤»

[08:57] <GlitchMr> Everything looks like Rakudo has separate negative flag

[08:57] *** flightrecorder joined
[08:57] *** FROGGS joined
[08:58] <GlitchMr> In C, negative version of i is ~i + 1

[08:59] <GlitchMr> I find infinite integers really confusing when dealing with bitwise operations, especially ~.

[08:59] <GlitchMr> Or when dealing with bitwise operations and negative integers

[09:01] <sorear> GlitchMr: niecza represents integers either as two's complement 32-bit if that fits, or else as bigint with separate negative flag.  but it tries to hide this; bitops are one place it doesn't

[09:02] <sorear> I haven't touched the bitop code since the old days when niecza had only Num

[09:02] <diakopter> rn: say (2**2**17).chars

[09:02] <p6eval> rakudo 30a13c, niecza v22-6-g9e5350d: OUTPUT«39457␤»

[09:02] <sorear> and bitops worked Javascript-style

[09:02] <sorear> sleep&

[09:02] <GlitchMr> But well, bitwise operations on infinite integers make sense...

[09:02] <GlitchMr> As long you don't at values

[09:03] <dalek> roast: e267414 | jonathan++ | S05-modifier/perl5_2.t:

[09:03] <dalek> roast: Re-fudge some m:P5/.../ tests.

[09:03] <dalek> roast: review: https://github.com/perl6/roast/commit/e267414689

[09:05] <GlitchMr> rn: say -1 +> 42

[09:05] <p6eval> niecza v22-6-g9e5350d: OUTPUT«-1␤»

[09:05] <p6eval> ..rakudo 30a13c: OUTPUT«0␤»

[09:05] <GlitchMr> It should be -1

[09:05] <GlitchMr> Becuase infinity

[09:05] *** Tanktalus left
[09:06] *** thou left
[09:08] <diakopter> rn: say +^^^^ -1

[09:08] <p6eval> niecza v22-6-g9e5350d: OUTPUT«===SORRY!===␤␤Expecting a term, but found either infix ^^ or redundant prefix ^␤  (to suppress this message, please use space between ^ ^) at /tmp/WV9CFqxIln line 1:␤------> say +^^^⏏^ -1␤␤Parse failed␤␤»…

[09:08] <p6eval> ..rakudo 30a13c: OUTPUT«-1␤»

[09:08] <diakopter> rn: say +^^^ -1

[09:08] <p6eval> niecza v22-6-g9e5350d: OUTPUT«===SORRY!===␤␤Expecting a term, but found either infix ^^ or redundant prefix ^␤  (to suppress this message, please use space between ^ ^) at /tmp/fZ0ufLAHKl line 1:␤------> say +^^^⏏ -1␤␤Parse failed␤␤»

[09:08] <p6eval> ..rakudo 30a13c: OUTPUT«-1␤»

[09:09] <diakopter> rn: say +^^ -1

[09:09] <p6eval> rakudo 30a13c, niecza v22-6-g9e5350d: OUTPUT«-1␤»

[09:10] <GlitchMr> oh... wait... JavaScript says that -1 >> whatever is -1...

[09:10] <GlitchMr> But >>> makes math properly

[09:10] <GlitchMr> Interesting

[09:11] <GlitchMr> Arithmetic right shift doesn't make sense in languages with infinite length integers, but well, JavaScript isn't one of those

[09:11] <GlitchMr> I meant, logical

[09:12] <GlitchMr> >>> sounds like a hack anyways

[09:12] <diakopter> rn: say 8.80000000000000000000000000000000000000000000001-8.8

[09:13] <p6eval> rakudo 30a13c: OUTPUT«1.00000000000002e-47␤»

[09:13] <p6eval> ..niecza v22-6-g9e5350d: OUTPUT«-1.7763568394002505E-15␤»

[09:15] <GlitchMr> The floating point world is world without rules.

[09:15] <diakopter> rakudo is closer

[09:15] <GlitchMr> Probably bigger precission of something

[09:16] <GlitchMr> rn: say 1e-1 + 2e-1 - 3e-1

[09:16] <p6eval> rakudo 30a13c, niecza v22-6-g9e5350d: OUTPUT«0␤»

[09:17] <GlitchMr> 0? But isn't it floating point number?

[09:17] <GlitchMr> rn: say 1e-1 + 2e-1 - 3e-1 * 1e20

[09:17] <p6eval> rakudo 30a13c: OUTPUT«-3e+19␤»

[09:17] <p6eval> ..niecza v22-6-g9e5350d: OUTPUT«-3.0000000000000004E+19␤»

[09:17] <GlitchMr> oops

[09:17] <GlitchMr> Precedence

[09:17] <GlitchMr> rn: say (1e-1 + 2e-1 - 3e-1) * 1e20

[09:17] <p6eval> rakudo 30a13c, niecza v22-6-g9e5350d: OUTPUT«0␤»

[09:18] *** Tanktalus joined
[09:18] *** spider-mario joined
[09:23] <moritz> r: say :60[1, 2, 3]

[09:23] <p6eval> rakudo 30a13c: OUTPUT«3723␤»

[09:23] <moritz> r: say :60[1, 2, 3, '.', 6]

[09:23] <p6eval> rakudo 30a13c: OUTPUT«3723.1␤»

[09:24] <TimToady> \o/

[09:24] <dalek> rakudo/nom: 3b883b6 | jonathan++ | t/spectest.data:

[09:24] <dalek> rakudo/nom: Run S05-modifier/perl5_2.t.

[09:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3b883b617a

[09:24] <dalek> rakudo/nom: 3d31af9 | jonathan++ | tools/build/NQP_REVISION:

[09:24] <dalek> rakudo/nom: Bump NQP revision for m:P5 improvements.

[09:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3d31af9447

[09:25] <moritz> TimToady: we aim to please, occasionally :-)

[09:25] <moritz> and it was a LHF

[09:29] *** cognominal joined
[09:31] *** cognominal_ joined
[09:33] <FROGGS> r: say :16[1, 2, 3]

[09:33] <p6eval> rakudo 30a13c: OUTPUT«291␤»

[09:33] <FROGGS> thats cool

[09:34] *** cognominal left
[09:34] <FROGGS> but I cant remember als these twigils and signs :|^*

[09:35] <FROGGS> Perl 6 is not turning into a language like brainfuck, no?

[09:36] <jnthn> No; bf is minimal :P

[09:37] <TimToady> you just have to learn them, then it's easy to remember them :P

[09:37] <FROGGS> hehe

[09:37] <FROGGS> I remember the | to flatten args on function calls though

[09:39] <FROGGS> appending ! to an arg to make it a required one seems good, but : doesnt speak for itself when prepending it to something like the example above

[09:55] <TimToady> it's supposed to look like a pair, and the two dots are indicating the pairness of it

[09:55] <TimToady> % is also like that, with the two circles

[09:56] <TimToady> so a hash is a bunch of pairs :)

[09:57] <FROGGS> ohh, never seen it like this

[10:02] *** cognominal joined
[10:03] *** cognominal_ left
[10:10] <TimToady> visual metaphors Я us

[10:11] *** MayDaniel joined
[10:11] <TimToady> looks like the typhoon is just missing us, except for the breeze; nearly all the rain has been to the west of us

[10:13] <diakopter> good thing it didn't become a hurricane

[10:18] <jnthn> That woulda blown

[10:29] *** cognominal left
[10:32] *** cognominal joined
[10:38] *** cognominal left
[10:49] *** crab2313 left
[10:52] *** cognominal joined
[10:58] *** cognominal left
[11:02] *** bbkr1 joined
[11:05] *** bbkr1 left
[11:05] *** Su-Shee_ joined
[11:08] *** Su-Shee left
[11:14] *** replore joined
[11:24] *** am0c joined
[11:37] *** tokuhiro_ left
[11:40] *** benabik joined
[11:40] *** mucker joined
[11:41] *** cognominal joined
[11:41] *** cognominal left
[11:47] *** jlaire joined
[11:55] *** cognominal joined
[11:56] *** jlaire left
[11:59] <cognominal> nqp:  my $s := "<toto>&lt;";      $s := nqp::substr($s, 0, 10);  say($s);   $s := subst($s, '&', / '&amp;' /, :global); say($s);

[11:59] <p6eval> nqp: OUTPUT«<toto>&lt;␤Method 'ACCEPTS' not found for invocant of class 'String'␤current instr.: 'match' pc 855 (src/stage2/gen/NQPCORE.setting.pir:400) (src/stage2/NQPCORE.setting:346)␤»

[11:59] <cognominal> What I am doing wrong?

[12:00] <cognominal> ho

[12:00] <cognominal> I am not awake apparently

[12:01] <cognominal> nqp:  my $s := "<toto>&lt;";      $s := nqp::substr($s, 0, 10);  say($s);   $s := subst($s, / '&' /,  '&amp;' , :global); say($s);

[12:01] <p6eval> nqp: OUTPUT«<toto>&lt;␤<toto>&amp;lt;␤»

[12:01] <cognominal> everything works fine

[12:02] *** sftp_ left
[12:04] *** jlaire joined
[12:05] <cognominal> subst second argument cannot be a string. To get around that, I ended putting the slash in the wrong place. :(

[12:13] *** sftp_ joined
[12:32] *** cognominal_ joined
[12:32] *** cognominal left
[12:37] *** cognominal__ joined
[12:38] *** cognominal_ left
[12:42] *** Su-Shee_ is now known as Su-Shee

[12:46] *** sftp_ left
[12:50] *** sisar joined
[12:50] <sisar> hi #perl6 !

[12:50] *** benabik left
[12:51] *** benabik joined
[12:52] <sisar> r: my $x = Int.new; say $x; $x = 'a'; say $x;

[12:52] <p6eval> rakudo 3d31af: OUTPUT«0␤a␤»

[12:53] <sisar> ^ Why is assigning 'a' to $x not an error ?

[12:53] <jnthn> Why would it be?

[12:53] *** sftp joined
[12:53] <jnthn> You didn't constrain $x in any way

[12:53] <jnthn> r: my Int $x = Int.new; say $x; $x = 'a'; say $x;

[12:53] <p6eval> rakudo 3d31af: OUTPUT«0␤Type check failed in assignment to '$x'; expected 'Int' but got 'Str'␤  in block  at /tmp/aK_JdshNA1:1␤␤»

[12:54] <jnthn> That's how you get constraints.

[12:54] <sisar> jnthn: ok

[12:56] <sisar> ah, assigning 'a' replaces the Int object which $x referred to earlier.

[12:56] <jnthn> Yes

[12:56] <sisar> silly me :-)

[13:02] *** Tanktalus left
[13:04] *** daniel-s__ joined
[13:05] *** cognominal__ left
[13:07] *** daniel-s left
[13:13] *** cognominal joined
[13:16] *** Tanktalus joined
[13:31] *** preflex left
[13:32] <GlitchMr> r: my Real $number = 42; $number = '42'; # sure?

[13:32] <p6eval> rakudo 3d31af: OUTPUT«Type check failed in assignment to '$number'; expected 'Real' but got 'Str'␤  in block  at /tmp/DwS_vK0gW9:1␤␤»

[13:32] <GlitchMr> r: my Cool $number = 42; $number = [42]; # sure?

[13:32] <p6eval> rakudo 3d31af:  ( no output )

[13:32] <GlitchMr> That worked?

[13:33] <GlitchMr> oh ok, Cool is really wide

[13:34] <GlitchMr> r: my Cool $number = 42; $number = \42; # sure?

[13:34] <p6eval> rakudo 3d31af: OUTPUT«Type check failed in assignment to '$number'; expected 'Cool' but got 'Capture'␤  in block  at /tmp/08ZJbKYqjj:1␤␤»

[13:37] *** PacoAir joined
[13:37] *** PacoAir left
[13:37] *** PacoAir joined
[13:40] *** Tanktalus left
[13:52] *** Tanktalus joined
[13:56] *** cognominal_ joined
[13:58] *** cognominal left
[14:01] *** jlaire left
[14:08] *** jlaire joined
[14:12] *** kaare__ joined
[14:17] *** cognominal joined
[14:17] *** cognominal_ left
[14:21] *** benabik left
[14:21] *** telex left
[14:22] *** telex joined
[14:24] *** cognominal left
[14:25] *** cognominal joined
[14:29] *** xinming left
[14:31] *** xinming joined
[14:34] <tadzik> good afternoon, #perl6

[14:38] *** spider-mario left
[14:43] <cognominal> good afternoon, tadzik et al.

[14:47] <[Coke]> jnthn: thanks.

[14:47] <phenny> [Coke]: 08:39Z <jnthn> tell [Coke] both tickets resolved

[14:48] *** ChoHag left
[14:49] <tadzik> jnthn: do you plan to look at the threads issue?

[14:51] *** cognominal left
[14:52] *** birdwindupbird joined
[14:53] *** benabik joined
[15:02] *** cognominal joined
[15:14] *** ChoHag joined
[15:16] *** daniel-s__ left
[15:17] *** daniel-s__ joined
[15:19] *** am0c left
[15:20] *** benabik left
[15:22] *** benabik joined
[15:28] *** tgt left
[15:32] *** cognominal_ joined
[15:33] *** cognominal left
[15:33] *** mucker left
[15:33] *** tgt joined
[15:39] <GlitchMr> yes \ | cat -n | while read a; do expr $a % 2 > /dev/null && echo $a; done

[15:39] <GlitchMr> Those examples on Rosetta Code are interesting...

[15:39] <GlitchMr> I wonder how feasible it would be have something like that in Perl 6...

[15:39] *** cognominal_ left
[15:40] <GlitchMr> 1 .. * ==> grep * %2

[15:40] <GlitchMr> hmmm... ok

[15:40] *** bbkr_ joined
[15:41] *** bbkr left
[15:50] *** cognominal_ joined
[15:51] *** Ulti joined
[15:52] <Ulti> does split in Perl6 give you an iterator?

[15:53] <Ulti> or lazy list whichever is the more correct term

[15:53] *** birdwindupbird left
[15:53] *** phenny left
[15:56] *** benabik left
[16:00] *** cognominal_ left
[16:00] *** cognominal joined
[16:02] *** isBEKaml joined
[16:03] *** robinsmidsrod left
[16:04] *** robinsmidsrod joined
[16:08] <gfldex> i got a problems to build rakudo on cygwin

[16:08] <gfldex> Using /home/dex/rakudo/install/bin/parrot (version RELEASE_4_4_0).

[16:08] <gfldex> sh: line 0: cd: 3rdparty/dyncall: No such file or directory

[16:09] <pmichaud> good morning, #perl6

[16:09] <gfldex> what's a lie

[16:09] <gfldex> well, the morning is quite good actually :)

[16:09] <pmichaud> was anyone able to look at the panda issue?

[16:11] <pmichaud> http://irclog.perlgeek.de/perl6/2012-09-29#i_6027864 

[16:14] *** lithos joined
[16:15] *** lithos left
[16:15] *** _edwin joined
[16:16] <_edwin> nr: say "abcd".substr(2,Inf)

[16:16] <p6eval> rakudo 3d31af: OUTPUT«This type cannot unbox to a native integer␤  in method substr at src/gen/CORE.setting:3639␤  in block  at /tmp/e1suZY_eRd:1␤␤»

[16:16] <p6eval> ..niecza v22-6-g9e5350d: OUTPUT«Str()␤»

[16:17] <_edwin> hi perl6!

[16:17] <_edwin> I wonder if the above is a rakudobug, as rakudo itself suggests that Inf should be ok:

[16:18] <_edwin> rakudo: say "abcd".substr(2,-1)

[16:18] <p6eval> rakudo 3d31af: OUTPUT«Length argument to substr out of range. Is: -1, should be in 0..Inf; use *-1 if you want to index relative to the end␤  in method gist at src/gen/CORE.setting:9929␤  in sub say at src/gen/CORE.setting:7250␤  in block  at /tmp/aulbhMTy3U:1␤␤»

[16:19] *** Circlepuller_ joined
[16:19] <pmichaud> _edwin: looks rakudobug-ish to me

[16:20] <_edwin> ok, will try to file a ticket

[16:20] *** replore left
[16:20] *** cognominal left
[16:20] *** Circlepuller left
[16:21] *** replore_ joined
[16:24] *** cognominal joined
[16:27] * pmichaud files pandaissue

[16:28] <tadzik> oh, I can has

[16:28] <tadzik> btw, I have spectest failures https://gist.github.com/3807433

[16:29] <pmichaud> tadzik: what version of rakudo/parrot ?

[16:29] <tadzik> rakudo HEAD, parrot is probably somewhat ancient

[16:29] <tadzik> This is Parrot version 4.7.0-devel built for amd64-linux

[16:29] <tadzik> nqp didn't complain though :)

[16:30] <pmichaud> well, nqp shouldn't complain, as the minimum is 4.4.0  :)

[16:30] <tadzik> :)

[16:30] * _edwin reported https://rt.perl.org/rt3/Public/Bug/Display.html?id=115086

[16:30] <pmichaud> I'll test it here.

[16:30] <tadzik> this one is the threads branch, but it shouldn't affect anything

[16:30] <pmichaud> _edwin++

[16:30] <pmichaud> oh, it wouldn't surprise me if the threads branch *does* affect stuff.  I don't know if io_rewrite was merged into threads branch

[16:31] <pmichaud> io_rewrite would likely explain the IO-Socket-INET.t failures

[16:32] <pmichaud> (rakudo head currently expects a parrot without the io_rewrite merge

[16:32] <pmichaud> )

[16:32] <tadzik> ah, right

[16:32] <pmichaud> tadzik: any chance that Panda::Tester will be fixed in the next couple of hours?

[16:32] <tadzik> oh, without

[16:33] <tadzik> pmichaud: absolutely

[16:33] <pmichaud> okay, I'll hold the star release for that.

[16:33] *** cognominal left
[16:33] <pmichaud> I definitely want to release star in the next 7 hours, though  (so that we're still 09-30-2012 UTC)

[16:33] <pmichaud> er, 2012-09-30 UTC  :)

[16:34] <tadzik> I'll fix that within 30 minutes

[16:35] *** tgt left
[16:36] *** cognominal joined
[16:39] <tadzik> ugh, running on debugging parrot w/o --optimize is quite awful

[16:42] <pmichaud> all spectests pass for me with rakudo HEAD and Parrot 4.4.0

[16:43] *** replore_ left
[16:47] *** thou joined
[16:50] *** tgt joined
[16:55] *** cognominal_ joined
[16:55] *** cognominal left
[16:57] *** wk joined
[16:59] <dalek> panda: c731c4d | tadzik++ | lib/Panda/Tester.pm:

[16:59] <dalek> panda: [Panda::Tester] Use $*EXECUTABLE_NAME instead of hardcoded "perl6"

[16:59] <dalek> panda: review: https://github.com/tadzik/panda/commit/c731c4df2d

[17:00] <tadzik> pmichaud: there, ready

[17:13] *** isBEKaml left
[17:17] <dalek> star: 9dd84dd | pmichaud++ | tools/star/Makefile:

[17:17] <dalek> star: 4.6.0 is in the supported/ directory instead of devel/  .  :-|

[17:17] <dalek> star: review: https://github.com/rakudo/star/commit/9dd84dd665

[17:18] *** birdwindupbird joined
[17:18] <pmichaud> tadzik: testing, and thanks

[17:21] *** cognominal_ left
[17:23] *** cognominal joined
[17:26] *** grondilu joined
[17:28] *** cognominal left
[17:31] *** tgt left
[17:34] *** Kim_Breitwieser joined
[17:34] *** Kim_Breitwieser left
[17:34] *** cognominal joined
[17:34] *** Kim_Breitwieser joined
[17:39] *** sizz_ left
[17:39] *** sizz joined
[17:40] *** tokuhiro_ joined
[17:42] *** cognominal left
[17:43] *** ggoebel joined
[17:46] *** Chillance joined
[17:48] *** sizz left
[17:48] *** sizz joined
[17:49] *** spider-mario joined
[17:51] *** cognominal joined
[17:51] <pmichaud> tadzik: method build in lib/Panda/Builder.pm seems to make the same mistake

[17:52] <pmichaud> tadzik: line 50

[17:55] <grondilu> I noticed that TimToady uses the sigilless style a lot on rosettacode.  Since "my var = Whatever" is a syntax error anyway, what about making it a shortcut for "my \var = Whatever"? 

[17:56] <diakopter> well, there's something to be said for something to make such things stand out on declaration

[17:56] <diakopter> since the \ is a sort of sigil

[17:57] <pmichaud> it's also not the case that anything "sigilless" automatically ought to be a declaration

[17:58] <grondilu> pmichaud: sure, but the shortcut would concern only declarations, precisely.

[17:58] <pmichaud> other unsigilled terms can follow the 'my', though.

[17:58] *** cognominal left
[17:59] <pmichaud> if someone enters     my Type = Whatever    when they intended it to be    my Type $x = Whatever    we ought to catch that.

[17:59] <pmichaud> instead of just assuming that "Type" is being declared.

[18:00] <grondilu> indeed.  Haven't thought of that.

[18:00] <diakopter> rn: my \sub = 3; say sub;

[18:00] <p6eval> rakudo 3d31af: OUTPUT«===SORRY!===␤Missing block␤at /tmp/DWRbAPHvEJ:1␤»

[18:00] <p6eval> ..niecza v22-6-g9e5350d: OUTPUT«===SORRY!===␤␤Malformed block at /tmp/ojYQwBA7ny line 1:␤------> my \sub = 3; say sub⏏;␤␤Parse failed␤␤»

[18:02] <tadzik> pmichaud: indeed, fixing

[18:05] <dalek> panda: 2ef186a | tadzik++ | lib/Panda/Builder.pm:

[18:05] <dalek> panda: [Panda::Builder] Use $*EXECUTABLE_NAME instead of hardcoded "perl6", pmichaud++

[18:05] <dalek> panda: review: https://github.com/tadzik/panda/commit/2ef186a4e0

[18:05] <grondilu> diakopter: I doubt you can overwrite keywords semantic.  Even Perl6 is not that cool :)

[18:06] *** cognominal joined
[18:07] <diakopter> rn: class class { }; say class.new()

[18:07] <p6eval> rakudo 3d31af: OUTPUT«===SORRY!===␤Unable to parse $*PKGDECL definition at line 2, near ".new()"␤»

[18:07] <p6eval> ..niecza v22-6-g9e5350d: OUTPUT«class.new(...)␤»

[18:07] <moritz> r: sub if() { say '42' }; if()

[18:07] <p6eval> rakudo 3d31af: OUTPUT«42␤»

[18:09] <grondilu> r: sub sub { 42 }; say sub;

[18:09] <p6eval> rakudo 3d31af: OUTPUT«===SORRY!===␤Missing block␤at /tmp/stKkyhsmHV:1␤»

[18:09] <grondilu> r: sub sub { 42 }; say sub();

[18:09] <p6eval> rakudo 3d31af: OUTPUT«42␤»

[18:10] <grondilu> My bad.

[18:13] *** cognominal left
[18:13] *** cognominal joined
[18:14] *** cognominal left
[18:14] <grondilu> on second thought, even with a type, it might work.  "my Type var = Whatever;' is a syntax error.  And 'my Type = Whatever' doesn't mean anything unless we meen Type to be the name of the variable.

[18:16] *** sftp left
[18:16] <diakopter> he's saying the compiler wouldn't know whether you meant Type to be the name of the variable, or whether you accidentally the variable name (and thus should warn)

[18:16] *** sftp joined
[18:17] *** sftp left
[18:17] <grondilu> you mean "accidentally forgot"?

[18:17] <pmichaud> "doesn't know yet"

[18:17] <pmichaud> consider

[18:17] <pmichaud>     my XYZ = some_expression

[18:17] <pmichaud> the compiler hasn't seen "XYZ" before

[18:17] <pmichaud> maybe it's a type that the programmer failed to declare

[18:17] <pmichaud> maybe it's meant to be a declaration

[18:18] <pmichaud> the compiler can't know.

[18:18] <grondilu> well, if XYZ hasn't been defined yet, then it's a variable declaration.

[18:18] <pmichaud> unless the programmer meant to write   "my XYZ $x = some_expression"

[18:19] <grondilu> does the compiler really have to assume the programmer may have made a typo?

[18:20] <grondilu> I mean, forgetting to write "$x" is a big omission.

[18:20] <pmichaud> sure

[18:21] <pmichaud> I'm of the opinion that anytime you create something that is sigiless, it should happen explicitly and not by accident

[18:21] <pmichaud> we already have  keywords, types, and subroutine calls that are sigiless

[18:21] <pmichaud> *sigilless

[18:21] *** bbkr joined
[18:22] <pmichaud> oh, and operators

[18:22] <grondilu> I know.  I wouldn't have suggested that if I hadn't noticed that TimToady himself seems to lik sigilless variables.

[18:23] <pmichaud> right, but the declaration of sigilless things happens explicitly, by virtue of the \

[18:24] <pmichaud> anyway, as you point out, TimToady likes sigilless things so it wouldn't surprise me if the \ becomes optional in declarations... but at this stage of the game it seems potentially fragile, which argues we shouldn't rush to do it without looking at all of the ramifications first

[18:24] <pmichaud> such as things accidentally becoming declarations when they weren't intended to be

[18:24] <_edwin> nr: my %h; %h{Any}

[18:24] <grondilu> Notice that if you declare a variable this way:  my foo = "bar",  the fact that foo is sigilless is kind of explicit as well.

[18:25] <p6eval> rakudo 3d31af: OUTPUT«use of uninitialized variable $key of type Any in string context  in block  at /tmp/EIgCvnrmcc:1␤␤»

[18:25] <p6eval> ..niecza v22-6-g9e5350d: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/lib/CORE.setting line 1289 (warn @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 266 (Mu.Str @ 15) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/KNRCAl21vP line 1 (mainline @ 3…

[18:26] <_edwin> rakudo's message mentioning "$key" seems strange to me

[18:27] <grondilu> Honnestly, when you declare foo like this:  "my \foo = 'bar'", then one miht expect to encounter foo in this form  "\foo" in the rest of the code, and not "\foo".  A non initiated programmer might wonder why the backslash has disappeared.  So using '\' is actually less explicit than not using one.  IMHO.

[18:28] <diakopter> rn: my \foo = 44; say \foo

[18:28] <p6eval> niecza v22-6-g9e5350d: OUTPUT«\(44)␤»

[18:28] <p6eval> ..rakudo 3d31af: OUTPUT«44␤»

[18:28] <diakopter> hmm

[18:28] <grondilu> s/and not "\foo"/and not "foo"/

[18:28] <pmichaud> well, propose the change to TimToady, see what he thinks.  :-)

[18:30] <grondilu> I would not dare.  He's kind of intimidating :)   He's Larry Wall, right?

[18:33] <pmichaud> sure, but he's pretty straightforward.  I've certainly been on the wrong side of Rule 1 many times.  So has he, which is why Rule 2 exists.  :-P

[18:36] *** sisar left
[18:41] <grondilu> The thing is also that if we start to use sigilless variables a lot, at some point one question will pop out:   do we actually really need sigils after all?  I mean, they could be nothing more than a convention in variable names.  $foo and @foo would just be two different variables names that differ only by their first character.

[18:45] <grondilu> But I've just remember that sigils provide scalar or lit context and that it's kind of useful.  So forget about what I said.

[18:49] <grondilu> lol  If I wasn't so scared of losing some karma, it would make a nice troll to post on perlmonks.org  :)

[18:52] *** sirrobert joined
[18:53] *** benabik joined
[18:53] *** bbkr left
[18:57] *** sftp joined
[19:06] <pmichaud> yay, all star tests finally pass

[19:06] <tadzik> \o/

[19:06] <sirrobert> nice =)

[19:07] <sorear> good * #perl6

[19:10] <colomon> o/

[19:11] *** grondilu left
[19:11] <sorear> pmichaud: how was the io_rewrite situation resolved?

[19:12] <pmichaud> sorear: by reverting back to an older version of Parrot for 2012.09

[19:13] * colomon just explained to his son how the Thomas the Tank Engine turntable works (simple gears) and he immediately asked, "Is that how the tractor beam works?"  Ummm.....

[19:14] <tadzik> :)

[19:14] <pmichaud> colomon: it's still gears, they're just really really small.  :-)

[19:15] <colomon> pmichaud++

[19:15] *** cognominal joined
[19:24] *** cognominal left
[19:31] *** cognominal joined
[19:34] *** rummik joined
[19:34] *** benabik left
[19:35] *** benabik joined
[19:45] <dalek> glitchmr.github.com: 01685ad | GlitchMr++ | _posts/2012-09-30-perl-6-changes-2012W39.md:

[19:45] <dalek> glitchmr.github.com: Perl 6 changes for this week.

[19:45] <dalek> glitchmr.github.com: 

[19:45] <dalek> glitchmr.github.com: I know I'm late, but I totally forgot about that.

[19:45] <dalek> glitchmr.github.com: review: https://github.com/GlitchMr/glitchmr.github.com/commit/01685adb6f

[19:46] <dalek> glitchmr.github.com: ac1b532 | GlitchMr++ | _posts/2012-09-30-perl-6-changes-2012W39.md:

[19:46] <dalek> glitchmr.github.com: Remove leftover sentence completely.

[19:46] <dalek> glitchmr.github.com: review: https://github.com/GlitchMr/glitchmr.github.com/commit/ac1b5323f1

[19:48] <dalek> glitchmr.github.com: 88e9eb6 | GlitchMr++ | _posts/2012-09-30-perl-6-changes-2012W39.md:

[19:48] <dalek> glitchmr.github.com: Add link to expmod documentation

[19:48] <dalek> glitchmr.github.com: review: https://github.com/GlitchMr/glitchmr.github.com/commit/88e9eb60a8

[19:49] *** _edwin left
[19:51] *** tokuhiro_ left
[19:51] <dalek> glitchmr.github.com: 71246dd | GlitchMr++ | _posts/2012-09-30-perl-6-changes-2012W39.md:

[19:51] <dalek> glitchmr.github.com: Add link to Signature documentation

[19:51] <dalek> glitchmr.github.com: review: https://github.com/GlitchMr/glitchmr.github.com/commit/71246ddef8

[19:52] *** GlitchMr left
[19:53] <dalek> star: f7ffa9a | pmichaud++ | tools/ (2 files):

[19:53] <dalek> star: Add note to update version number in Makefile.in.

[19:53] <dalek> star: review: https://github.com/rakudo/star/commit/f7ffa9a465

[19:53] <dalek> star: 5e9d266 | pmichaud++ | modules/panda:

[19:53] <dalek> star: Bump panda version to get perl6 $*EXECUTABLE fixes (tadzik++).

[19:53] <dalek> star: review: https://github.com/rakudo/star/commit/5e9d266ce7

[19:58] *** replore_ joined
[20:01] *** Kim_Breitwieser left
[20:01] *** replore_ left
[20:02] *** whiteknight joined
[20:03] <gfldex> did anybody test the next star on cygwin?

[20:04] <gfldex> because i still have problems to build rakudo and it's not the rebase problem

[20:05] <pmichaud> gfldex: I don't have a way to test it on cygwin

[20:05] <pmichaud> remind me of the problem / workaround again and I can check

[20:06] <gfldex> pmichaud: https://gist.github.com/3808313

[20:07] <gfldex> the directory in question does exist and seams to be quite happy

[20:09] <pmichaud> I wonder if the makefile/shell doesn't like  "3rdparty/dyncall" as one argument.

[20:11] <pmichaud> doesn't seem likely, though.

[20:12] <pmichaud> other places in the makefile use the "cd foo/bar" syntax.

[20:12] <gfldex> my guess would be it's in the wrong directory

[20:12] <pmichaud> gfldex: have you been able to get earlier versions of rakudo to build with cygwin?

[20:12] <gfldex> it was working yesterday or the day before

[20:16] <pmichaud> I'm kind of stumped then, afaict none of the relevant makefiles have changed at all

[20:16] <gfldex> pmichaud: there is no makefile yet

[20:16] <gfldex> so it can't be in it :)

[20:16] <pmichaud> oh, that's true

[20:17] <pmichaud> it's in the middle of NQP's Configure.pl

[20:17] <pmichaud> wait, huh?

[20:19] * pmichaud is confused

[20:20] <pmichaud> are you using a fresh checkout of rakudo, or from a tarball, or what?

[20:20] <gfldex> did a fresh clone

[20:20] <pmichaud> I don't see how it can be "in the wrong directory", though.

[20:21] <pmichaud> what happens if you try it without the "nice" and the "&&", ooc?

[20:21] <gfldex> it's dies in line 128

[20:22] <gfldex> i will try that

[20:22] <pmichaud> you're using a fresh nqp clone?

[20:23] <pmichaud> well, put it this way -- cd nqp and tell me the first line of "git log"

[20:23] <pmichaud> I want to know what commit the nqp instance is on

[20:23] <gfldex> commit a0b4c579cb03fde2f4a3bc3b0c24e0ee75f67cae

[20:24] <pmichaud> somehow your system is using the most recent nqp, instead of 2012.09.1

[20:24] <pmichaud> just a sec

[20:25] <gfldex> that's why git clone https://github.com/rakudo/rakudo.git is fetching

[20:25] <pmichaud> oh, jnthn++ bumped NQP_REVISION

[20:25] <pmichaud> if I give you a star candidate tarball, can you test it?

[20:26] <gfldex> i can do that

[20:26] <gfldex> what's the nqp github url?

[20:26] <pmichaud> http://pmichaud.com/sandbox/rakudo-star-2012.09-rc3.tar.gz

[20:26] <pmichaud> nqp is at http://github.com/perl6/nqp

[20:27] *** PacoAir_ joined
[20:28] *** PacoAir left
[20:28] *** PacoAir_ is now known as PacoAir

[20:28] <gfldex> i did a cygwin update yesterday too

[20:28] <gfldex> that might have caused it

[20:28] <gfldex> very odd tho

[20:28] <pmichaud> well, this month's star release has already taken far too much time and effort from me

[20:29] <pmichaud> I'm having to chase down and troubleshoot lots of platforms and bugs for systems I don't have access to

[20:33] *** armitage81 joined
[20:36] *** birdwindupbird left
[20:36] *** kst` left
[20:37] <gfldex> pmichaud: same problem with that tar ball

[20:37] <gfldex> likely a cygwin problem

[20:37] <gfldex> i will try to track it down

[20:37] <pmichaud> I'm going to guess a cygwin problem, yes; especially if it showed up after a cygwin update

[20:38] <pmichaud> we really haven't made any changes to the build system in the last month

[20:46] <gfldex> pmichaud: i just did a cygwin update again and installed a very suspicious new perl-vendors* package

[20:47] <gfldex> looks like star is building now

[20:47] <gfldex> you may want to add a line about that in the release notes

[20:47] <gfldex> them perl porters don't want us bored :)

[20:48] <gfldex> .o(perl5 sabotage?)

[20:49] <gfldex> nope, still not building nqp

[20:54] <dalek> star: 72b0780 | pmichaud++ | docs/announce/2012.09:

[20:54] <dalek> star: Update release announcement a bit (to avoid copying error into next month's release).

[20:54] <dalek> star: review: https://github.com/rakudo/star/commit/72b07809ad

[20:55] *** whiteknight left
[20:58] <pmichaud> star 2012.09 released

[21:00] <ggoebel> pmichaud++

[21:04] *** kaare__ left
[21:08] *** flussence left
[21:11] *** replore_ joined
[21:13] <sirrobert> r: sub foo (:$str) { say $str; }; foo str=>'bar'; foo 'str' => 'baz';

[21:13] <p6eval> rakudo 3d31af: OUTPUT«bar␤Too many positional parameters passed; got 1 but expected 0␤  in sub foo at /tmp/YfQ_C9TkHY:1␤  in block  at /tmp/YfQ_C9TkHY:1␤␤»

[21:14] <sirrobert> how can I pass a Str as a var name?

[21:16] *** replore_ left
[21:16] <sirrobert> n: sub foo (:$str) { say $str; }; foo str=>'bar'; foo 'str' => 'baz';

[21:16] <p6eval> niecza v22-6-g9e5350d: OUTPUT«bar␤Unhandled exception: Excess arguments to foo, used 0 of 1 positionals␤  at /tmp/0e8TeQvKa4 line 0 (foo @ 1) ␤  at /tmp/0e8TeQvKa4 line 1 (mainline @ 6) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4198 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.se…

[21:16] <FROGGS> r: sub foo (:$str) { say $str; }; foo str=>'bar'; foo( |('str' => 'baz') )

[21:16] <p6eval> rakudo 3d31af: OUTPUT«bar␤baz␤»

[21:16] <sirrobert> ooh... that's funky

[21:17] <sirrobert> thanks, FROGGS

[21:17] <FROGGS> proud to help ;o)

[21:18] <sirrobert> writing a nice li'l datetime math module =)

[21:18] <sirrobert> DateTime.new('1994-11-05T08:15:30-0500') - days=>4;

[21:18] <FROGGS> little and datetime

[21:18] <sirrobert> (and so on)

[21:18] <FROGGS> is that possibleẞ

[21:18] *** kurahaupo joined
[21:18] <sirrobert> heh

[21:18] <FROGGS> ?

[21:19] <sirrobert> thankfully p6 validates dates inside the DateTime module

[21:19] <sirrobert> so I just have to creatively abuse that

[21:19] <sirrobert> but right now I can do:   my $tomorrow = $today + d=>1;

[21:19] *** kst joined
[21:20] <sirrobert> <d day days dd>

[21:20] <FROGGS> what about $today++?

[21:20] <sirrobert> good idea

[21:20] <sirrobert> easy enough to implement, I'll just pipe the postfix:<++> to the method that handles infix:<+> with an arg of 1

[21:21] <sirrobert> metaphorical pipe =)

[21:21] <FROGGS> ya

[21:21] <FROGGS> gnight

[21:21] <sirrobert> night

[21:45] *** ChoHag left
[21:57] *** cognominal left
[22:03] *** cognominal joined
[22:10] *** tgt joined
[22:13] <raiph> sirrobert: fyi: I posted a couple comments on 6ing.org

[22:22] <cognominal> is there a hash composer in nqp?

[22:23] <cognominal> it seems interpreted as a block

[22:25] <cognominal> and the grammar hints as much :      token circumfix:sym<{ }> { <?[{]> <pblock> }

[22:27] *** spider-mario left
[22:28] <TimToady> a hash composer is a block, it just gets called automatically

[22:28] <TimToady> dunno if nqp does that though

[22:33] <cognominal> I don't see anything in the action file that would interpret it as a hash

[22:33] <cognominal> and, I don't remember seeing a hash composer in nqp ffiles.

[22:35] <sorear> nqp-rx at least did not support any kind of hash literal syntax

[22:41] *** PacoAir left
[22:47] *** ChoHag joined
[22:48] *** cognominal left
[22:48] *** cognominal joined
[22:51] <[Coke]> pmichaud: any suggestions on how to get at a top level sub by name in nqp?

[22:52] <[Coke]> the best alternative I have at this point is to put all those subs in as class methods on something.

[22:58] *** cognominal left
[23:02] *** ChoHag left
[23:14] *** ChoHag joined
[23:23] *** stepnem left
[23:36] <diakopter> n: say **

[23:36] *** replore joined
[23:36] <p6eval> niecza v22-6-g9e5350d: OUTPUT«Unhandled exception: System.NullReferenceException: Object reference not set to an instance of an object␤  at Niecza.StashCursor.Core (System.String key, Boolean final, Niecza.StashCursor& sc, Niecza.Variable& v, Niecza.Variable bind_to) [0x00000] in <filen…

[23:36] <sorear> diakopter: you found that last week, too

[23:36] <diakopter> oh :) I'd forgotten I guess

[23:41] <diakopter> rn: my $a; BEGIN { $a = {a=>44}; }; die $a; CATCH { say 55 }; say 66

[23:41] <p6eval> rakudo 3d31af: OUTPUT«a 44␤  in block  at /tmp/6stTfrfaZh:1␤␤»

[23:41] <p6eval> ..niecza v22-6-g9e5350d: OUTPUT«55␤Unhandled exception: {"a" => 44}␤  at /home/p6eval/niecza/lib/CORE.setting line 1437 (die @ 5) ␤  at /tmp/_ZzBoz8Wgn line 1 (mainline @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4198 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 419…

[23:41] <diakopter> I suppose it's time I learn how catch works

[23:42] <diakopter> why does niecza say 55 but rakudo doesn't

[23:47] *** rindolf joined
[23:47] <rindolf> Hi all.

[23:48] <diakopter> o/

[23:48] <rindolf> diakopter: what's up?

[23:49] *** replore left
[23:49] <diakopter> atomics, fences, lock-free, parallelized

[23:50] <rindolf> diakopter: where?

[23:50] <diakopter> in my brain mostly

