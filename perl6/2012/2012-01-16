[00:02] *** ksi left
[00:05] *** thou joined
[00:07] *** molaf left
[00:12] *** tokuhirom left
[00:14] *** wolfman2000 left
[00:20] *** arlinius left
[00:22] *** molaf joined
[00:24] *** replore joined
[00:24] *** arlinius joined
[00:31] *** tokuhirom joined
[00:42] *** hundskatt left
[00:50] *** tokuhirom left
[00:56] *** hundskatt joined
[01:01] *** panterax joined
[01:01] *** replore left
[01:03] *** panterax left
[01:04] *** lestrrat left
[01:05] *** panterax joined
[01:05] *** lestrrat joined
[01:07] <dalek> niecza: 82ae125 | (Paweł Murias)++ | lib/Perl5Interpreter.cs:

[01:07] <dalek> niecza: Fix memory leak.

[01:07] <dalek> niecza: review: https://github.com/sorear/niecza/commit/82ae125800

[01:34] <colomon> \o/

[01:43] *** Chillance left
[01:49] *** zjmarlow left
[02:03] *** pmurias left
[02:07] *** whiteknight left
[02:25] *** DarthGandalf left
[02:26] *** xinming joined
[02:32] *** DarthGandalf joined
[02:41] *** DarthGandalf left
[02:45] *** wolfman2000 joined
[02:45] *** DarthGandalf joined
[03:00] <sorear> huh, Rakudo's attributive parameters use assignment

[03:07] <sorear> std: my $x = 5; $x but= role { }; # oops

[03:07] <p6eval> std dc62e1d: OUTPUT«[31m===[0mSORRY![31m===[0m␤Cannot make assignment out of but because structural infix operators are diffy at /tmp/lGmrcw3CN_ line 1:␤------> [32mmy $x = 5; $x but=[33m⏏[31m role { }; # oops[0m␤Check failed␤FAILED 00:01 110m␤»

[03:14] <TimToady> STD doesn't like to generate type-changing operators

[03:18] *** dku joined
[03:22] <[Coke]> https://gist.github.com/1476841 ... soooo close.

[03:22] <dalek> roast: 764ef9e | (Solomon Foster)++ | S32-trig/generate-tests.pl:

[03:22] <dalek> roast: Add FatRat tests (appropriately fudged for Rakudo), remove fudging for Niecza.

[03:22] <dalek> roast: review: https://github.com/perl6/roast/commit/764ef9e3b8

[03:22] <sorear> 14:37 < [Coke]> # 01/15/2012 - niecza at 98.54%

[03:23] <colomon> [Coke]: I've got more coming in a minute or two

[03:23] <sorear> is there supposed to be a new(er) line in the gist?

[03:24] <dalek> roast: 5ce04dc | (Solomon Foster)++ | S32-trig/ (13 files):

[03:24] <dalek> roast: Add FatRat tests (appropriately fudged for Rakudo), remove fudging for Niecza.

[03:24] <dalek> roast: review: https://github.com/perl6/roast/commit/5ce04dc084

[03:24] <colomon> [Coke]: there, that last push should be 13 * 8 or so more passing tests for niecza.

[03:26] <[Coke]> I'll do a quick check for some LHF and rerun.

[03:32] <dalek> roast: 9ebc638 | coke++ | S05-metasyntax/interpolating-closure.t:

[03:32] <dalek> roast: fudge for niecza

[03:32] <dalek> roast: review: https://github.com/perl6/roast/commit/9ebc638b38

[03:32] <dalek> niecza: f9b2ede | coke++ | t/spectest.data:

[03:32] <dalek> niecza: run S05-metasyntax/interpolating-closure.t

[03:32] <dalek> niecza: review: https://github.com/sorear/niecza/commit/f9b2ede6fd

[03:36] *** orafu left
[03:37] *** ponbiki joined
[03:37] <sorear> std: :(:$!bar)

[03:37] <p6eval> std dc62e1d: OUTPUT«ok 00:01 109m␤»

[03:38] *** Psyche^ joined
[03:38] *** orafu joined
[03:40] <sorear> std: :(:$!bar = 10, :$!baz?)

[03:40] <p6eval> std dc62e1d: OUTPUT«[31m===[0mSORRY![31m===[0m␤Cannot put optional positional parameter after variadic parameters at /tmp/F9ScIONWFQ line 1:␤------> [32m:(:$!bar = 10, :$!baz?[33m⏏[31m)[0m␤Check failed␤FAILED 00:01 111m␤»

[03:40] <TimToady> o.O

[03:41] *** Patterner left
[03:41] *** Psyche^ is now known as Patterner

[03:55] <sorear> found the bug... testing fix

[03:55] <sorear> what did you mean by? 19:14 < TimToady> STD doesn't like to generate type-changing operators

[03:56] <TimToady> I put operators into that category that return a different type from their inputs

[03:57] <TimToady> so they don't make a lot of sense for change-in-place operations

[04:07] *** ponbiki left
[04:20] *** eclipse_11 joined
[04:22] <[Coke]> colomon, sorear: updatd.

[04:22] <[Coke]> # 01/15/2012 - niecza at 99.31%

[04:23] <[Coke]> b: say 19058-18927

[04:23] <p6eval> b 1b7dd1: OUTPUT«131␤»

[04:23] <colomon> ah, man

[04:24] <colomon> I really need to go to bed instead of trying to find those last 131 tests...

[04:24] <colomon> afk 

[04:26] *** agentzh joined
[04:26] *** agentzh left
[04:27] *** agentzh joined
[04:28] *** agentzh left
[04:31] <[Coke]> also updated https://docs.google.com/spreadsheet/ccc?key=0Ahm1zTZwW0VHdE1NN19GdE1fTmZZYnpGdURFM1A0cHc

[04:49] <dalek> niecza: 4fbf388 | sorear++ | / (7 files):

[04:49] <dalek> niecza: Add support for attributive parameters, & role constraint

[04:49] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4fbf38826c

[04:49] <dalek> roast: 6755bea | sorear++ | S (2 files):

[04:49] <dalek> roast: [S12-attributes/instance,S06-signature/code] Unfudge for niecza

[04:49] <dalek> roast: review: https://github.com/perl6/roast/commit/6755bea046

[04:49] <[Coke]> sorear: estimate on how many more that gives us?

[04:51] <sorear> 10? 20?

[04:51] <sorear> probably closer to 10

[04:51] <sorear> niecza: class { has ($!x, $!y) }

[04:51] <p6eval> niecza v13-266-g6383a22: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unhandled parameter twigil ! at /tmp/zes9sdHpve line 1:␤------> [32mclass { has ($!x[33m⏏[31m, $!y) }[0m␤␤Unhandled parameter twigil ! at /tmp/zes9sdHpve line 1:␤------> [32mclass { has ($!x, $!y[33m⏏[31m) }[0m␤␤Use…

[04:53] <sorear> niecza: class { has $x }

[04:53] <p6eval> niecza v13-266-g6383a22:  ( no output )

[04:53] <[Coke]> I have 42 more unfuding shorting.

[04:53] <[Coke]> *unfudging shortly.

[04:54] <dalek> roast: 9b324ea | coke++ | S05-metasyntax/angle-brackets.t:

[04:54] <dalek> roast: fudge for niecza

[04:54] <dalek> roast: review: https://github.com/perl6/roast/commit/9b324ea647

[04:54] <dalek> niecza: 0e97331 | coke++ | t/spectest.data:

[04:54] <dalek> niecza: run S05-metasyntax/angle-brackets.t

[04:54] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0e97331196

[04:59] *** zjmarlow joined
[05:01] <dalek> roast: 239510c | coke++ | S05-metasyntax/longest-alternative.t:

[05:01] <dalek> roast: fudge for niecza

[05:01] <dalek> roast: review: https://github.com/perl6/roast/commit/239510c515

[05:01] <dalek> niecza: a638258 | coke++ | t/spectest.data:

[05:01] <dalek> niecza: run S05-metasyntax/longest-alternative.t

[05:01] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a6382583d8

[05:01] <[Coke]> 19 more..

[05:03] *** s1n joined
[05:11] *** zjmarlow left
[05:11] *** zjmarlow joined
[05:13] <dalek> roast: 06bb994 | coke++ | S05-match/capturing-contexts.t:

[05:13] <dalek> roast: fudge for niecza

[05:13] <dalek> roast: review: https://github.com/perl6/roast/commit/06bb994090

[05:13] <dalek> niecza: 6b78f00 | coke++ | t/spectest.data:

[05:13] <dalek> niecza: run S05-match/capturing-contexts.t

[05:13] <dalek> niecza: review: https://github.com/sorear/niecza/commit/6b78f0071c

[05:13] <[Coke]> 25 more...

[05:18] *** zjmarlow_ joined
[05:18] *** zjmarlow left
[05:18] <dalek> roast: cef0c9a | coke++ | S05-metasyntax/regex.t:

[05:18] <dalek> roast: niecza fudge

[05:18] <dalek> roast: review: https://github.com/perl6/roast/commit/cef0c9af5b

[05:19] <dalek> niecza: 4d79458 | coke++ | t/spectest.data:

[05:19] <dalek> niecza: run S05-metasyntax/regex.t

[05:19] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4d794580dd

[05:19] <[Coke]> 22 more...

[05:21] *** zjmarlow__ joined
[05:24] *** zjmarlow_ left
[05:25] *** birdwindupbird joined
[05:25] *** zjmarlow__ left
[05:26] *** hundskatt left
[05:26] *** zjmarlow__ joined
[05:28] *** woosley joined
[05:30] *** eclipse_11 left
[05:31] <dalek> niecza: bf92914 | coke++ | t/spectest.data:

[05:31] <dalek> niecza: run S12-methods/attribute-params.t

[05:31] <dalek> niecza: review: https://github.com/sorear/niecza/commit/bf929142c0

[05:31] <[Coke]> 13..

[05:33] *** zjmarlow__ left
[05:34] *** zjmarlow__ joined
[05:38] *** dku left
[05:47] *** odoacre left
[05:47] *** zjmarlow__ left
[05:48] *** odoacre joined
[05:52] *** zjmarlow joined
[05:57] <[Coke]> # 01/16/2012 - niecza at 100.02%

[05:57] <[Coke]> BOOYAH!

[05:57] <sorear> \o/

[05:58] <[Coke]> gist updated, google doc not. zzzzz.

[06:04] <moritz> \o/

[06:05] <moritz> sorear++ [Coke]++ colomon++

[06:05] <moritz> congratulations everybody

[06:19] *** koban joined
[06:36] *** raiph joined
[06:37] *** hundskatt joined
[06:39] *** lestrrat left
[06:40] *** lestrrat joined
[06:44] *** Trashlord left
[06:46] *** Trashlord joined
[06:50] *** kaleem joined
[07:00] *** c1sung joined
[07:01] <sorear> std: our ($A::b, $C::d)

[07:01] <p6eval> std dc62e1d: OUTPUT«[31m===[0mSORRY![31m===[0m␤Malformed parameter at /tmp/qZP7Jq7DgE line 1:␤------> [32mour ($A::[33m⏏[31mb, $C::d)[0m␤    expecting any of:␤ formal parameter␤       named_param␤Parse failed␤FAILED 00:01 109m␤»

[07:01] <sorear> std: our $A::b

[07:01] <p6eval> std dc62e1d: OUTPUT«ok 00:01 108m␤»

[07:02] <dalek> roast: 631d013 | moritz++ | integration/error-reporting.t:

[07:02] <dalek> roast: RT #76986, multiple anon vars in the same scope

[07:02] <dalek> roast: review: https://github.com/perl6/roast/commit/631d0134e1

[07:02] *** wtw joined
[07:03] *** GlitchMr joined
[07:06] <sorear> niecza: has $x

[07:06] <p6eval> niecza v13-275-ga638258: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Attribute $!x declared outside of any class at /tmp/vSJlcG2LFj line 1 (EOF):␤------> [32mhas $x[33m⏏[31m<EOL>[0m␤␤Potential difficulties:␤  'has' declaration outside of class at /tmp/vSJlcG2LFj line 1:␤------> [32mhas…

[07:06] <masak> wow, Easter is early this year.

[07:06] <masak> sorear++ [Coke]++ colomon++

[07:07] <sorear> o/ masak

[07:07] *** jeffreykegler joined
[07:14] *** jeffreykegler left
[07:15] <masak> sorear: \o

[07:18] * sorear ponders splitting up NieczaActions into a couple of semi-arbitrary pieces

[07:26] *** benabik joined
[07:27] *** benabik left
[07:31] <masak> sorear: how's the work on 6model convergence going? the v13 announcement says that's a future direction.

[07:31] <sorear> masak: the role implementation work was a large part of that

[07:32] <sorear> the main remaining hurdle is allowing users to write their own metaclasses ...

[07:32] <moritz> niecza: say 1.HOW

[07:32] <p6eval> niecza v13-275-ga638258: OUTPUT«ClassHOW.new(...)␤»

[07:32] <moritz> niecza: say 1.HOW.HOW

[07:33] <p6eval> niecza v13-275-ga638258: OUTPUT«ClassHOW.new(...)␤»

[07:33] <moritz> circularity++

[07:33] <moritz> niecza: say Numeric.^HOW

[07:33] <p6eval> niecza v13-275-ga638258: OUTPUT«Unhandled exception: Unable to resolve method HOW in class ClassHOW␤  at /tmp/fROk3wKHj3 line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3013 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3014 (module-CORE @ 59) ␤  at /h…

[07:33] <moritz> niecza: say Numeric.HOW

[07:33] <p6eval> niecza v13-275-ga638258: OUTPUT«ClassHOW.new(...)␤»

[07:33] <sorear> niecza's ClassHOW is a thin wrapper over a C# class ... that can't even usefully be subclassed at the C# level

[07:33] <moritz> is Numeric a class?

[07:33] <sorear> and there's only one of it, with an 'int type;' field that can be CLASS, ROLE, etc

[07:34] <sorear> no

[07:34] <moritz> so ClassHOW handles roles too?

[07:34] <sorear> yes

[07:34] <sorear> most of the '6model' tasks from here on is refactoring ClassHOW to expose more of its interface as Perl 6 methods that can be overriden

[07:35] *** thou left
[07:35] <sorear> and break it up into separate ClassHOW, RoleHOW, CurriedRoleHOW, ParametricRoleHOW, PackageHOW, ModuleHOW, and SubsetHOW classes

[07:36] <moritz> SomeHOW sounds like and interesting task :-)

[07:36] *** justatest joined
[07:37] <sorear> another problem is dealing with the 'cascading augment' feature that niecza has classically had

[07:38] <moritz> what's cascading augment?

[07:38] <sorear> right now in niecza you can say augment class Any { method pies() { 5 } } and the new method instantly shows up on every Any-derived class in the system and calling it is no slower than if it were defined on the class in the first place

[07:38] <sorear> making this work properly requires weak references and a fair amount of support from ClassHOW

[07:41] <sorear> oh, it also heavily colludes with the serializer

[07:41] <masak> sorear: and EnumHOW :)

[07:41] <sorear> There is no EnumHOW.  Enums have no metamodel features that distinguish them from other classes.

[07:42] *** justatest left
[07:42] <masak> hm.

[07:42] <moritz> so what do they have? a custom superclass?

[07:42] <sorear> yes

[07:42] <moritz> an enum needs to get its .pick method from somewhere...

[07:43] <sorear> will probably be refactored into a role someday

[07:43] <moritz> sorear: and where is that superclass determined?

[07:43] <moritz> in ClassHOW?

[07:43] *** daxim joined
[07:45] <sorear> moritz: in the action method

[07:45] <sorear> enum foo < a > desugars to class foo is Int is IntBasedEnum { ... }

[07:46] <sorear> (actually, the bulk of the logic in the action method concerns constructing the 'constant's inside the enum)

[07:46] <sorear> (which is a WHO issue, not a HOW issue, anyway)

[07:47] <moritz> rakudo has a separate metaclass for enums, but I guess both approaches work

[07:47] <moritz> commute&

[07:48] <sorear> nom: class Foo { has $x; say $x }

[07:48] <p6eval> nom 326de8: OUTPUT«Can only use repr_get_attr_obj on a SixModelObject␤  in <anon> at /tmp/gjsC6z7cwU:1␤  in block <anon> at /tmp/gjsC6z7cwU:1␤  in <anon> at /tmp/gjsC6z7cwU:1␤»

[07:53] *** muixirt joined
[07:53] <muixirt> good morning

[07:54] <sorear> good morning muixirt

[07:54] <muixirt> I mentioned y'day the merge_sort example on rosetta code

[07:55] *** lestrrat left
[07:55] <muixirt> it still doesn't work with nom

[07:56] *** lestrrat joined
[07:56] <muixirt> if you change one line: my @r = merge_sort @a[ $m ..^ @a ];

[07:57] <muixirt>  to: my @r = merge_sort @a[ $m ..^ @a.elems ];

[07:57] <muixirt> then it works, any explanations?

[07:58] <sorear> I guess ..^ isn't numifying the rhs right

[07:59] <TimToady> how old is your nom?  This bug was fixed recently, I think

[07:59] <sorear> o/ TimToady

[08:00] <muixirt> TimToady: brand new (and several things were fixed, jnthn++)

[08:00] *** koban left
[08:01] <TimToady> maybe it has regressed; rebuilding latest here

[08:01] <muixirt> y'day Util's version didn't work, now it works

[08:05] <TimToady> are you sure $m is an Int?

[08:05] <muixirt> no

[08:08] <muixirt> Int()

[08:08] <TimToady> .. only upgrades the rhs to numeric if the left side is

[08:08] <TimToady> hmm

[08:08] *** fridim left
[08:08] <TimToady> nom: my @a = 1,2,3,4,5; say (3..^@a).list

[08:08] <p6eval> nom 326de8: OUTPUT«3 4␤»

[08:08] <TimToady> that seems right

[08:09] <TimToady> nom: my @a = 1,2,3,4,5; say @a[ 3..^@a ]

[08:09] <p6eval> nom 326de8: OUTPUT«4 5␤»

[08:09] <muixirt> TimToady: did you try it?

[08:09] <TimToady> that also seems right

[08:09] <TimToady> not the whole thing

[08:10] <dalek> niecza: 16b6b2e | sorear++ | / (5 files):

[08:10] <dalek> niecza: Implement has $x creating an alias pseudo-lexical

[08:10] <dalek> niecza: review: https://github.com/sorear/niecza/commit/16b6b2e02b

[08:10] <muixirt> that's why I'm asking, I couldn't reproduce the bug with a smaller code snippet

[08:10] <dalek> roast: 86cfd86 | sorear++ | S (2 files):

[08:10] <dalek> roast: Unfudges for sorear/niecza@16b6b2e

[08:10] <dalek> roast: review: https://github.com/perl6/roast/commit/86cfd86052

[08:19] *** domidumont left
[08:20] * sorear -> sleep

[08:23] *** domidumont joined
[08:30] <masak> 'night, sorear.

[08:30] <masak> dream of specific HOWs.

[08:34] <masak> sorear's comment made me wonder why we have an EnumHOW in Rakudo :)

[08:36] <moritz> I think one goal was to move some of the actions logic to the meta class

[08:36] <moritz> where it can be generalized more easily

[08:37] <moritz> the second thing that I just remembered is that enums have specialized mixin rules

[08:37] <moritz> $thing but True # overrides method $thing.Bool

[08:38] <masak> oh!

[08:54] <jnthn> Different declarator = Different HOW.

[08:56] *** bacek left
[08:57] <jnthn> And yes, .^composalize for getting a composable thingy from the EnumHOW is a nice way to factor the role thingy in a very general way.

[08:57] *** nornagest joined
[09:00] <masak> "composalize". beautiful coinage.

[09:01] <masak> jnthn: could I use E.^add_enum_value( $some-value ) to change an Enum at runtime?

[09:03] *** preflex joined
[09:03] <moritz> nom: enum A <b c>; A.^add_enum_value(6'); A.^compose; say A.enums

[09:03] <p6eval> nom 326de8: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 2␤»

[09:03] <moritz> nom: enum A <b c>; A.^add_enum_value(6); A.^compose; say A.enums

[09:03] <p6eval> nom 326de8: OUTPUT«Method 'value' not found for invocant of class 'Int'␤  in add_enum_value at src/gen/Metamodel.pm:2375␤  in method dispatch:<.^> at src/gen/CORE.setting:788␤  in block <anon> at /tmp/UGrRSNXZvY:1␤  in <anon> at /tmp/UGrRSNXZvY:1␤»

[09:03] <moritz> nom: enum A <b c>; A.^add_enum_value("x" => 6); A.^compose; say A.enums

[09:03] <p6eval> nom 326de8: OUTPUT«("b" => 0, "c" => 1, "x" => 6).hash␤»

[09:04] <moritz> it seems you can; not sure if you should can though.

[09:04] <jnthn> Normal meta-programming rule applies

[09:04] <jnthn> You can if you understand the consequences.

[09:05] <daxim> coinages are the translator's nightmare

[09:06] <daxim> perl6: so algol, we invent a whole new language for our whole new language!

[09:06] <p6eval> pugs b927740: OUTPUT«*** ␤    Unexpected "new"␤    expecting ":" or "("␤    at /tmp/Vh53pSCHIJ line 1, column 56␤»

[09:06] <p6eval> ..niecza v13-275-ga638258: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unsupported use of C++ constructor syntax; in Perl 6 please use method call syntax at /tmp/KALejEFN9W line 1:␤------> [32mo algol, we invent a whole new language [33m⏏[31mfor our whole new language![0m␤␤Undeclared routi…

[09:06] <p6eval> ..rakudo 326de8: OUTPUT«===SORRY!===␤Unsupported use of C++ constructor syntax; in Perl 6 please use method call syntax at line 1, near "for our wh"␤»

[09:06] <masak> moritz++ # should can

[09:07] <masak> daxim: indeed. see http://strangelyconsistent.org/blog/the-ghost-of-algol-68

[09:07] <daxim> I know this

[09:08] <moritz> (totally unrelated): http://de.arxiv.org/PS_cache/arxiv/pdf/1201/1201.2801v1.pdf

[09:08] *** bacek joined
[09:09] *** JustMe04_ left
[09:13] *** ponbiki joined
[09:14] <tadzik> good morning

[09:15] <masak> good actual morning, tadzik. :)

[09:15] <tadzik> what an exceptional day

[09:15] <masak> moritz: I am confused by the term "metamaterial" :)

[09:15] <masak> tadzik: truly a remarkable set of 24 hours.

[09:16] <moritz> masak: it's jargon for a solid that is structered on a smaller scale then the wavelength of light

[09:16] <moritz> masak: which can lead to weird effects, like negative refractive index

[09:16] <masak> right.

[09:16] * daxim slaps the material scientists with a greek dictionary

[09:17] <masak> so, "micromaterial" would've been OK :)

[09:17] <moritz> more like "nano"

[09:17] <masak> yeah! we should introduce the term "nanomaterial" :P

[09:18] <moritz> but "nano" is already taken by a different branch of material scientists

[09:18] * masak starts cranking out "hands off my 'meta'" stickers

[09:19] <daxim> it's perfectly cromulent to talk about nano-scale material even if it does not come out of a drexler-type nano-factory

[09:19] <daxim> context etc.

[09:20] * daxim pokes george clooney.   want "diamond age" film, now.

[09:27] *** bacek left
[09:34] *** ponbiki left
[09:34] *** dakkar joined
[09:35] <masak> wow, Zavolaj! jnthn++

[09:40] *** bacek joined
[09:41] *** donri joined
[09:48] * muixirt wonders if rosetta code Anagrams was ever tested with perl6 and the original data file

[09:52] *** GlitchMr42 joined
[09:52] <mathw> I think 'nanomaterial' might already mean something else

[09:52] <mathw> although somethign that probably blurs into 'metamaterial' along the way

[09:53] <jnthn> masak: You...only just discovered Zavolaj? :)

[09:53] <mathw> jnthn: I for one only discovered with your blog post how awesome it's got

[09:53] <masak> jnthn: no, but I like the recent improvements.

[09:53] <jnthn> Ah. :)

[09:53] <jnthn> And there's more to come yet. :)

[09:53] *** GlitchMr left
[09:53] *** GlitchMr42 is now known as GlitchMr

[09:53] <moritz> are nested structs already implemented?

[09:54] <jnthn> moritz: Not yet.

[09:54] <mathw> arrays of structs with arrays of structs containing structs in them!

[09:54] <mathw> (instant headache time)

[09:54] <jnthn> mathw: Should be possible once I'm done.

[09:55] <mathw> jnthn: hopefully it gets to the point where the extra levels just happen thanks to the existing mechanisms

[09:55] <masak> HN is currently discussing HN's recent "kindness scaling" trouble: http://news.ycombinator.com/item?id=3469453

[09:55] <masak> interesting discussion.

[09:56] <jnthn> masak: Yeah, that's how the design is meant to fall out. Of course, implementation is where we see how well that works out. :)

[09:58] <jnthn> er, mathw ^^

[09:58] <jnthn> tab fail strajks again

[09:58] *** mj41 joined
[10:02] <mathw> :)

[10:03] *** woosley left
[10:03] <mathw> well it would be a pretty poor design if you had to hand-code it for every possible depth level

[10:03] <mathw> and that's not the kind of thing you'd do

[10:06] *** geekosaur left
[10:06] *** jrockway_ joined
[10:06] *** eviltwin_b joined
[10:06] *** clkao_ joined
[10:06] *** itz_ joined
[10:07] *** shachaf_ joined
[10:07] *** zostay_ joined
[10:07] *** LoRe_ joined
[10:07] *** mj41 left
[10:07] *** clkao left
[10:07] *** rafl left
[10:08] *** nornagest left
[10:08] *** mj41 joined
[10:09] *** rafl joined
[10:09] *** tomaw joined
[10:14] *** shachaf_ is now known as shachaf

[10:15] *** mj41 left
[10:15] *** muixirt left
[10:16] <Timbus> timbus@timbox:~/Projects/rakudo/zavolaj$ ../perl6 examples/sqlite3.p6 

[10:16] <Timbus> open status 0

[10:16] <Timbus> hoho

[10:17] <moritz> jnthn: it seems that all the test files in zavolaj abort with "relocation R_X86_64_32 against `.rodata' can not be used when making a shared object; recompile with -fPIC:

[10:17] <Timbus> changed the pointer to pointer into an CArray[int]

[10:17] <Timbus> i feel bad but it works

[10:18] <Timbus> i hate that error :<

[10:24] <Timbus> jnthn, how about letting CPtr take a single attribute? that would be a pretty good way to build pointer chains when needed. I assume that's probably already the plan though

[10:34] *** bacek left
[10:36] <moritz> jnthn: I have two small commits to zavolaj that fix the test compilation with gcc. Could you please give me a commit bit?

[10:40] <moritz> jnthn: there's another problem; on linux the library loader doesn't seem to look into the current working directory, and thus fails to load the test .so files

[10:40] <moritz> when I run  LD_LIBRARY_PATH=. prove -e perl6  then all tests pass (with my fixes)

[10:42] *** domidumont left
[10:47] *** bacek joined
[10:49] *** panterax left
[10:50] *** panterax joined
[10:50] <jnthn> sorry, had meeting

[10:50] * moritz not in a hurry

[10:51] <jnthn> moritz: You now have a commit bit

[10:51] <dalek> zavolaj: ecf0ae4 | moritz++ | t/05-arrays.c:

[10:51] <dalek> zavolaj: get rid of a GCC warning

[10:51] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/ecf0ae46ff

[10:51] <dalek> zavolaj: 7ec2386 | moritz++ | t/CompileTestLib.pm:

[10:51] <dalek> zavolaj: [t] fix compilation of shared libraries with GCC

[10:51] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/7ec2386eaa

[10:51] * moritz is not afraid to use it

[10:51] <jnthn> \o/ 

[10:52] <jnthn> moritz++

[10:52] <moritz> I just hope I didn't break compilation on windows :-)

[10:52] <jnthn> Timbus: Is your use case that you need to be able to chase pointers?

[10:52] <jnthn> Timbus: Something with CPointer repr can hold a pointer

[10:56] *** raiph left
[10:56] * jnthn guesses he's missing something

[10:57] <jnthn> Timbus: Anyway, if you make changes to get sqlite working, I'd be happy to look over them and find a way to neaten things

[10:58] <moritz> http://www.perlmonks.org/?node_id=948107

[11:01] <Timbus> jnthn, sqlite takes a ptrptr

[11:01] <Timbus> and sets the inner ptr

[11:01] <jnthn> Timbus: ah, ok

[11:01] <Timbus> i know of many libraries that do

[11:01] <jnthn> *nod*

[11:01] <jnthn> Yeah, that's something Zavolaj should support in a better way.

[11:01] <Timbus> it's not really that I need the value or anything, but yeah

[11:01] <Timbus> it needs to allocate the space

[11:02] <Timbus> ... and i probably do need the value too (haven't thought that far ahead)

[11:04] *** Chillance joined
[11:04] <mathw> I'd be surprised if you didn't need it later

[11:05] <jnthn> lunch &

[11:06] <Timbus> i don't normally capitalize my 'i' so the effect was lost (what i meant was, i myself, won't need the value. i just gotta pass it back to the library wanting the handle)

[11:07] <Timbus> i do need to pull it out of the returned ptrptr, yes

[11:09] <mathw> Well you need it in the sense that you need it to use the library...

[11:09] <mathw> Or, the library needs it in order to work

[11:09] <mathw> Or something

[11:09] <mathw> It's Monday...

[11:10] <masak> moritz: that PerlMonks post makes a *great* comparison. self-accelerating change.

[11:13] * masak made a comment

[11:31] *** domidumont joined
[11:41] *** DarthGandalf left
[11:52] *** fridim joined
[11:55] <flussence> nice post, raiph++

[12:00] <flussence> I notice parallels between perl6 and web development all the time... we even have a Mozilla/Chrome/IE situation. No prizes for guessing which is which :)

[12:09] *** bkolera left
[12:14] *** nornagest joined
[12:16] *** bluescreen10 joined
[12:17] * masak .oO( Yapsi is a web browser implemented entirely in JavaScript )

[12:18] *** DarthGandalf joined
[12:18] <arnsholt> Running in another browser =)

[12:20] <jnthn> Like Mozilla, Rakudo even has excessive memory usage :P

[12:25] <flussence> yeah, but at least I can still compile rakudo in 1GB. Firefox has gone way off the deep end there :(

[12:25] <masak> arnsholt: or itself, ultimately.

[12:26] <arnsholt> Yeah, and ultimately in itself. IIRC there are a couple of Common Lisp compilers that require a CL compiler to build

[12:27] <masak> this is the first time I've gotten a clear picture of what made chromatic give up on Rakudo Star: http://www.perlmonks.org/?node_id=940679

[12:27] <colomon> [Coke]++ sorear++

[12:31] <arnsholt> masak: Nice find. I'm kinda curious what kind of project it is/was

[12:33] *** bluescreen10 left
[12:34] <masak> something to do with Onyx Press, I hazard.

[12:35] <masak> well, that's basically a given unless chromatic owns several firms. :)

[12:38] <jnthn> The whole reason for *not* releasing a Rakudo Star based on nom so far was because we didn't want to cause a bunch of breakage to existing stuff, or at least keep it down to a manageable level. :/

[12:39] <masak> well, as some other node in that thread diagnoses, chromatic suffered "early adopter burnout".

[12:39] <colomon> sure... but if he was counting on regular progress on R*....

[12:40] <colomon> that is, R* being stable but getting better.

[12:40] <moritz> well, thing is, he wanted to use listen to user feedback, and act accordingly to it

[12:40] <moritz> and all the users said "make it faster"

[12:40] <moritz> so we do

[12:40] <moritz> but that doesn't find mr. chromatic's approval

[12:40] <jnthn> Well, quite.

[12:41] <masak> there's no question about the nom refactor being the right thing to do in the long run.

[12:41] <colomon> right

[12:41] <masak> I'm not enough of a core hacker to know whether it could've been made smaller/more isolated from other simultaneous refactors.

[12:41] <masak> (list semantics, parsing)

[12:42] <masak> maybe it could. maybe not.

[12:42] <jnthn> Well, the list changes and QRegex didn't need to be part of it. 

[12:42] <masak> right.

[12:42] <jnthn> They weren't in my original plan, pmichaud just felt it was the time for him to do them. Which was great while he actually had tuits. And became not so great very shortly after he stopped having them.

[12:42] <moritz> but it would have been more work to first restore the old semantics and then rework them

[12:42] <jnthn> (Not casting any blame here, it's just the unfortunate way things came out.)

[12:43] *** nornagest left
[12:43] <jnthn> moritz: Yes, that could also have been true in various cases.

[12:43] <jnthn> In the end, it all needed doing.

[12:43] <jnthn> It's basically a throughput vs latency situation.

[12:43] <jnthn> Doing it in one go had better throughput, but higher latency.

[12:43] *** nornagest joined
[12:44] <jnthn> If we'd done it in smaller chunks, we'd have put out more incremental changes, but getting to the current point would have taken longer, and probably resulted in worse code quality.

[12:44] <dalek> roast: 3a0067e | (Solomon Foster)++ | S06-signature/sub-ref.t:

[12:44] <dalek> roast: Fudge for niecza.

[12:44] <dalek> roast: review: https://github.com/perl6/roast/commit/3a0067eb0c

[12:46] <colomon> if we'd had the resources, the "right thing" to do would probably have been to keep a couple programmers working on the ng branch and doing quasi-regular R* releases from it until nom was ready.

[12:46] <colomon> but that's a big "if"

[12:46] *** lutok joined
[12:46] <dalek> niecza: 0247a8a | (Solomon Foster)++ | t/spectest.data:

[12:46] <dalek> niecza: Turn on S06-signature/sub-ref.t.

[12:46] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0247a8a35f

[12:47] <masak> thinking about it, I'm *very* relieved Rakudo managed to get "escape velocity" enough to survive the (temporary, at least) loss of a core dev.

[12:47] <masak> that's not a give. cf Pugs.

[12:47] <masak> given*

[12:47] *** bluescreen10 joined
[12:48] *** fridim left
[12:48] <jnthn> colomon: I'd *love* Rakudo to have had the resources to make that feasible.

[12:48] <moritz> nom: say 367 / 594

[12:48] <p6eval> nom 326de8: OUTPUT«0.617845117845118␤»

[12:48] <colomon> yeah, and I'd love it if TPF would pay all of us fulltime, too. ;)

[12:49] <moritz> so about 60% of the tests that rakudo runs are fudged

[12:50] <jnthn> moritz: Test *files*?

[12:50] <moritz> jnthn: yes

[12:50] <jnthn> moritz: Is there any easy way for me to see which tests we don't run at all?

[12:50] <jnthn> er, test files we don't run at all :)

[12:51] <moritz> nom: say 318 /594 # better estimate

[12:51] <p6eval> nom 326de8: OUTPUT«0.535353535353535␤»

[12:51] <moritz> jnthn: I can make such a list if you want

[12:51] <jnthn> moritz: Would be interesting to see.

[12:52] <jnthn> I discovered pseudo.t somewhere in S02 the other day which has 140 or so tests if I implement a bunch of the pseudo packages. :)

[12:52] <dalek> rakudo/nom: 30b27ed | moritz++ | t/spectest.data:

[12:52] <dalek> rakudo/nom: fix spelling of test file name

[12:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/30b27ed120

[12:53] <masak> jnthn: you'd better; I hear Niecza is close to running as many tests as Rakudo! :P

[12:53] <jnthn> masak: :

[12:53] <jnthn> :P

[12:54] <masak> hurry before it's too late

[12:54] * jnthn isn't sure whether to find that motivating of demotivating. :)

[12:54] <jnthn> *or

[12:55] <colomon> motivating!

[12:57] <moritz> jnthn: I'm generating that list now, it was an easy modification to tools/update_passing_test_data.pl

[12:57] <jnthn> moritz: yay :)

[12:58] <moritz> jnthn: http://moritz.faui2k3.org/tmp/tests.txt

[12:58] <moritz> those with [SPA] can probably directly added to t/spectest.data

[12:58] * moritz works on it

[12:59] <moritz> a plan of 0 usually means that the file failed to compile

[13:00] <jnthn> int eresting;

[13:00] *** jferrero left
[13:02] <dalek> rakudo/nom: acee932 | moritz++ | t/spectest.data:

[13:02] <dalek> rakudo/nom: run 3 more test files

[13:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/acee932af2

[13:02] <moritz> I think I fudged some of those files and then forgot to add them to t/spectest.data. distractions--

[13:05] <moritz> oh, and autounfudge also finds a few things to remove

[13:05] <jnthn> :)

[13:06] <jnthn> moritz: Do those three you added to spectest.data really all pass, or do they need fudging?

[13:06] <moritz> jnthn: they pass as-is (fudged)

[13:06] <jnthn> nice :)

[13:07] <jnthn> moritz: [SPA] (  5/6  ) t/spec/S05-metasyntax/interpolating-closure.t

[13:07] <jnthn> also

[13:08] <moritz> I've fixed the spelling of that file in 30b27ed

[13:08] <moritz> so that's already accounted for

[13:08] <jnthn> ah, ok

[13:08] <jnthn> [SPA] (  1/1  ) t/spec/S24-testing/0-compile.t

[13:08] <jnthn> also

[13:08] <jnthn> ...1 test ;)

[13:08] <jnthn> [SP ] ( 26/76 ) t/spec/S32-num/stringify.t

[13:09] <jnthn> That sounds like a good candidate for fudging.

[13:09] <moritz> I'm looking at that one

[13:09] <moritz> it's... weird

[13:09] *** pmurias joined
[13:09] <jnthn> Also [SPA] (  1/1  ) t/spec/S29-context/exit-in-if.t

[13:09] <moritz> we seem to be failing about 40 (!) stringifiation tests in there because we produce '1 + 2i' instead of '1+2i' in Complex.Str

[13:10] <moritz> and I wonder where that's specced

[13:10] <dalek> niecza: bfb4205 | (Paweł Murias)++ | / (3 files):

[13:10] <dalek> niecza: Sending string with nulls in the middle from p5 land works.

[13:10] <dalek> niecza: review: https://github.com/sorear/niecza/commit/bfb4205036

[13:11] <jnthn> moritz: I think TimToady++ did a spec commit on that like, really recently.

[13:12] <moritz> that commit didn't spec Complex.Str though

[13:12] *** jferrero joined
[13:13] <dalek> roast: 077c384 | (Paweł Murias)++ | S01-perl-5-integration/strings.t:

[13:13] <dalek> roast: Test passing string with unicode and nulls to/and from perl5.

[13:13] <dalek> roast: review: https://github.com/perl6/roast/commit/077c384490

[13:13] <moritz> nom: say Complex.new(1, Inf).Str

[13:13] <p6eval> nom 326de8: OUTPUT«1 + Infi␤»

[13:13] <jnthn> moritz: it does

[13:13] <jnthn>    383  +Returns a string representation of the form "C<1+2i>", without 

[13:13] <jnthn>    384  +internal spaces.  (C<Str> coercion also returns this.) 

[13:13] <pmurias> one more passing test file for niecza ;)

[13:13] <moritz> oh

[13:13] * moritz blind

[13:14] <pmurias> moritz: blind?

[13:15] <moritz> pmurias: I've read through the diff and still missed the thing I was actually looking for

[13:15] * pmurias is slow today

[13:16] * jnthn isn't doing so bad, but you'd hope so by the 5th cup of black coffee :)

[13:16] <mathw> on the bright side, you can now fix it :D

[13:18] <arnsholt> My hands usually start shaking from too much caffeine around the fifth cup ^_^

[13:20] <masak> everybody knows you empty the cup, and then you throw it against the wall. shouting "we need to do something to energize the community!"

[13:20] <felher> colomon: I just looked into your Math::Prime module. That lazy-list with the next-prime function ist quite cool :) 

[13:21] <jnthn> Well, at this place I'm more likely to shout, "write f'ing commit messages!!1!!!" :)

[13:21] <jnthn> But maybe I should try throwing mugs...nothing else I've tried has worked yet. :)

[13:23] *** takadonet joined
[13:27] <masak> jnthn: commit messages only start to make sense after atomic commits start to make sense.

[13:28] <jnthn> masak: Well, yeah, that's the underlying issue.

[13:28] <jnthn> (I tend to talk about the two together.)

[13:29] <masak> and atomic commits... aren't obvious. they have to be discovered.

[13:29] <masak> in particular, they're not the natural state of being if your VCS happens to suck.

[13:30] <jnthn> TFS. :'(

[13:30] <dalek> roast: 3bf5bff | (Paweł Murias)++ | S01-perl-5-integration/subs.t:

[13:30] <dalek> roast: Add missing plan.

[13:30] <dalek> roast: review: https://github.com/perl6/roast/commit/3bf5bffc4a

[13:32] <dalek> niecza: 96a7a50 | (Paweł Murias)++ | t/ (3 files):

[13:32] <dalek> niecza: Add t/run_spectests_p5 which runs the spec tests for p5 integration.

[13:32] <dalek> niecza: review: https://github.com/sorear/niecza/commit/96a7a50eb4

[13:32] <masak> jnthn: ah.

[13:34] <pmurias> moritz: all spec test should have an explicit plan?

[13:34] <moritz> pmurias: most

[13:34] <mathw> TFS?

[13:35] <moritz> ie those that can be easily (-ish) be verified by a human

[13:36] <jnthn> mathw: Team Foundation System. The crappy Microsoft one that's just a tiny bit less crappy than SourceSafe, but still mostly awful.

[13:36] <mathw> ah that

[13:36] <masak> s/System/Server/

[13:36] <mathw> I've never had the displeasure

[13:36] <mathw> We use git at my place \p/

[13:37] <mathw> \o/

[13:37] <mathw> git and thoroughly modern C#

[13:37] <jnthn> masak: heh, you don't work with it and you know better than me :P

[13:37] <mathw> it's not quite as good as Perl 6, Haskell or Lisp

[13:37] <mathw> but it's pretty groovy

[13:37] * jnthn likes C#

[13:37] * jnthn loves Git :)

[13:37] <mathw> Git is cool

[13:37] * arnsholt likes C# as well

[13:37] <mathw> although we've got some weird problems with it

[13:37] <mathw> like my TortoiseGit has stopped being able to rebase properly

[13:38] <mathw> and my GitExtensions in VS2010 has decided that including the committer name is too much trouble (it worked fine before)

[13:39] <mathw> but in general I like it, and although my colleague hasn't quite grasped all of it yet I like how we can throw branches around with wild abandon and it just copes :D

[13:40] <mathw> and C# having closures is the most awesome thing, especially when you start playing with the Reactive Framework

[13:40] <mathw> We'd both like to use F# but in some ways it's actually quite primitive and the tool support is certainly very clunky

[13:44] <flussence> blah, VCSes. I'm still stuck on svn at $dayjob... but I use git for all new projects without telling anyone :)

[13:45] <moritz> "guerilla git"

[13:46] <moritz> wouldn't that make a great book title? :-)

[13:46] <flussence> it'd probably be a short book :)

[13:47] <flussence> .oO( "1. Use git! 2. Don't let anyone catch you." )

[13:47] *** zjmarlow left
[13:49] <dalek> roast: 645f735 | moritz++ | / (4 files):

[13:49] <dalek> roast: 5 rakudo unfudges found by autounfudge.pl

[13:49] <dalek> roast: review: https://github.com/perl6/roast/commit/645f735df1

[13:49] <dalek> rakudo/nom: e7c5034 | moritz++ | t/spectest.data:

[13:49] <dalek> rakudo/nom: run exit-in-if.t

[13:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e7c50342c9

[13:49] <moritz> flussence: it could talk about git-svn, git-cvs, git-hg and whatever, how to adapt to their branching models etc.

[13:50] <masak> flussence: I do the same. I can fruitfully use git to organize my own commits, and then interact in whatever way necessary with other people's VCS, or lack of it.

[13:51] *** nornagest left
[13:51] <flussence> I tried git-svn once... the prehistoric svn server here *really* didn't like it for some reason. I ended up having to fix corrupted XML strings in a repo dump by hand. :(

[13:52] <mathw> I tried it, it went strange

[13:53] <colomon> yeah, I didn't lose anything, but it got kind of wonky over time

[13:53] <moritz> nom: my num $x = 1.2e0; say "foo $x $bar"

[13:53] <p6eval> nom acee93: OUTPUT«===SORRY!===␤Variable $bar is not predeclared at line 1, near "\""␤»

[13:53] <moritz> nom: my num $x = 1.2e0; say "foo $x bar"

[13:53] <p6eval> nom acee93: OUTPUT«foo 1.2 bar␤»

[13:58] <moritz> t/spec/S12-attributes/defaults.t has a line   has $.self_in_code = { self.echo };

[13:58] <moritz> is that allowed?

[13:58] <moritz> (I'd say "no", but I'm not 100% sure)

[13:59] <colomon> we had a bunch of discussions touching on that yesterday

[14:01] <colomon> my impression is "no one knows"

[14:02] <colomon> in general, that test file is weird and I'm not sure completely thought out

[14:04] <colomon> like, is there really a difference between what's going on in line 28 and line 29?  Isn't 28 required to be a thunk?

[14:04] <colomon> in which case the line 43 test is wrong

[14:04] <colomon> and also, making it an eval instead of just a normal class is unnecessary

[14:05] *** estrabd joined
[14:05] <dalek> roast: c831c95 | moritz++ | S (2 files):

[14:05] <dalek> roast: fudge kv.t for rakudo

[14:05] <dalek> roast: review: https://github.com/perl6/roast/commit/c831c9514d

[14:07] * masak disfondly remembers A12's weird ideas about how blocks and attribute initialization would work together

[14:08] <masak> I'm glad we evolved those ideas :)

[14:09] <moritz> colomon: the eval is even wrong, because then the compiler complains that Foo is only stubbed

[14:09] <moritz> colomon: in my last roast commit I sneakily included a small patch that removed the eval

[14:11] <moritz> colomon: erm, yes. After a closer review I'd just like to delete that test file

[14:12] *** nornagest joined
[14:13] <moritz> nobody seems to have touched that file except for general-purpose cleanup

[14:13] <dalek> roast: 25075dc | moritz++ | S12-attributes/defaults.t:

[14:13] <dalek> roast: remove outdated test file

[14:13] <dalek> roast: review: https://github.com/perl6/roast/commit/25075dceff

[14:14] <colomon> eh, I'd have been in favor of rewriting it to current standard.  but it might indeed be easier to start from scratch.

[14:16] <moritz> feel free to revert+rewrite

[14:17] <moritz> but IMHO those "test how many times this closure has been executed" tests are fragile and not very benefitial

[14:17] <moritz> it's the kind of test you write if you don't really understand the feature at hand

[14:19] *** kaleem left
[14:29] <colomon> hmmm.  It seems like a reasonable sort of test to me; my complaint was just that it got all the details wrong.

[14:30] <colomon> very wrong

[14:43] *** sayu joined
[14:43] <tadzik> 'afternoon

[14:43] <dalek> roast: 9e48a8d | moritz++ | S32-num/stringify.t:

[14:43] <dalek> roast: fudge S32-num/stringify.t for rakudo

[14:43] <dalek> roast: review: https://github.com/perl6/roast/commit/9e48a8dd34

[14:43] <dalek> roast: 5d4cfd4 | (Solomon Foster)++ | integration/error-reporting.t:

[14:43] <dalek> roast: Refudge for niecza.

[14:43] <dalek> roast: review: https://github.com/perl6/roast/commit/5d4cfd4e8c

[14:44] <masak> tadzik: \o

[14:45] <dalek> rakudo/nom: b75ebed | moritz++ | src/core/Complex.pm:

[14:45] <dalek> rakudo/nom: update Complex.Str to match current spec

[14:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b75ebedfd4

[14:45] <dalek> rakudo/nom: 2c1d2f9 | moritz++ | t/spectest.data:

[14:45] <dalek> rakudo/nom: run S32-num/strintify.t

[14:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2c1d2f9c3e

[14:46] <felher> tadzik: o/

[14:50] <colomon> moritz: I've reverted your change and started rewriting the tests locally.  :)

[14:50] <colomon> moritz: but I'm going to go skiing before I finish, I think.   ;)

[14:51] <moritz> colomon: have fun!

[14:55] *** eviltwin_b is now known as geekosaur

[14:58] <colomon> oh!  if the default value is explicitly a closure, then you're assigning the closure to the attribute, right?

[14:59] * colomon had not fully appreciated how incredibly wrong that test file was

[15:01] <colomon> afk # off to City Forest

[15:02] *** birdwindupbird left
[15:03] *** PacoAir joined
[15:03] *** xinming_ joined
[15:03] <[Coke]> niecza: say ("ACHOO")x10;

[15:03] <p6eval> niecza v13-279-g16b6b2e: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Whitespace is required between alphanumeric tokens at /tmp/iMGUgMfcAD line 1:␤------> [32msay ("ACHOO")x[33m⏏[31m10;[0m␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 919 (die @ …

[15:03] <[Coke]> aw.

[15:06] *** xinming left
[15:07] <PerlJam> Does latest NQP not build against lated Parrot?

[15:07] <tadzik> I doubt it

[15:09] <masak> niecza: say "ACHOO"x 10

[15:09] <p6eval> niecza v13-279-g16b6b2e: OUTPUT«ACHOOACHOOACHOOACHOOACHOOACHOOACHOOACHOOACHOOACHOO␤»

[15:09] <masak> niecza: say "ACHOO"x\10

[15:09] <p6eval> niecza v13-279-g16b6b2e: OUTPUT«Unhandled exception: Cannot use value like Capture as a number␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.setting line 211 (Any.Numeric @ 5) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.settin…

[15:09] <masak> niecza: say "ACHOO"x\ 10

[15:09] <p6eval> niecza v13-279-g16b6b2e: OUTPUT«ACHOOACHOOACHOOACHOOACHOOACHOOACHOOACHOOACHOOACHOO␤»

[15:10] <PerlJam> ah ... :instanceof was removed from P

[15:10] <PerlJam> er PIR

[15:16] <jnthn> er...

[15:17] <jnthn> And replaced with...?

[15:17] <PerlJam> dunno.  I just read the parrot log

[15:17] <tadzik> whiteknight's to be asked, I guess

[15:17] <PerlJam> Though, this looks relevant: https://github.com/parrot/parrot/issues/560

[15:18] *** kaare__ joined
[15:25] *** kaleem joined
[15:27] <jnthn> NQP's multi-dispatch uses it.

[15:28] * jnthn didn't know about the ticket :(

[15:29] <jnthn> Anyway, looks like next NQP release will just have to be against the previous month's Parrot. It's non-trivial to change NQP to avoid using :instanceof.

[15:31] *** Trashlord left
[15:33] <moritz> huh, is the broken parrot already released?

[15:33] <moritz> or is it too close to the release already?

[15:34] <PerlJam> the parrot release is tomorrow isn't it?

[15:34] <moritz> aye

[15:44] <jnthn> moritz: Well, we could ask them to revert the removal too

[15:45] <jnthn> eek, I thought the release was next week. Calendar reading fail. :/

[15:47] <PerlJam> jnthn: what exactly is :instanceof used for?  It looks like a compile-time note that says the subroutine is a DispatcherSub rather than the normal Sub and then there's code that relies on knowing what sort of sub its dealing with.  Is there no other compile-time  (or, earlier-than-run-time) way to attach this information?

[15:47] <jnthn> PerlJam: Not so far as I know.

[15:48] <jnthn> PerlJam: I mean, it's not jsut attaching info, but it's creating it as a different PMC type

[15:48] <jnthn> Turning it into the subtype would be messy.

[15:49] <jnthn> I can find a way, it's just...not a great use of time given how many real issues exist.

[15:49] *** wtw left
[15:49] <PerlJam> so, to replace it now, would mean that you'd have to "manually" create DispatcherSubs and make sure they are created early enough to be useful?

[15:50] <jnthn> PerlJam: It'd mean in-place type changing the existing Sub PMCs, I think.

[15:50] <[Coke]> I think we can just start with "hey, we were using that, do you mind?"

[15:50] <PerlJam> [Coke]: indeed.

[15:50] <jnthn> [Coke]: Yes, worth a try.

[15:51] <PerlJam> Maybe whiteknight has a quick solution too  </hopeful>

[15:51] <jnthn> In the long run, I don't really want to be using :instanceof.

[15:52] * [Coke] opened the dialog.

[15:52] <jnthn> [Coke]: Thanks.

[15:52] <masak> [Coke]++

[15:53] <[Coke]> ah, so did benabik++, apparently. 

[15:53] <jnthn> I would rather not have to deal with its removal just yet, though.

[15:53] * [Coke] doesn't want to run the compiler spec stats again after all those nom commits!

[15:54] <jnthn> ;)

[15:55] * [Coke] looks for some LHF first. ;)

[15:56] <jnthn> [Coke]: Why isn't Rakudo allowed to be ahead some days? :)

[15:56] *** molaf left
[15:58] <felher> Could someone please explain to me the difference between the following statements?

[15:58] <felher> nom: sub x() { say "x"; } x();

[15:58] <p6eval> nom 2c1d2f:  ( no output )

[15:59] <felher> nom: sub y() { say "x"; } y();

[15:59] <p6eval> nom 2c1d2f: OUTPUT«===SORRY!===␤Confused at line 1, near "sub y() { "␤»

[15:59] <felher> Ah...

[15:59] <felher> because 'x' is also the string-repetition operator?

[15:59] <moritz> felher: both should be mis-parses

[15:59] <moritz> oh right, yes

[15:59] <moritz> need a ; after }

[16:00] <felher> moritz: thnx :)

[16:01] <felher> I tested it for about 10 minutes and the second in poste it here it i realize that 'x' is the string-repetition operator ...

[16:02] *** bluescreen10 left
[16:03] *** am0c left
[16:04] <jnthn> std: sub x() { say "x"; } x()

[16:04] <p6eval> std dc62e1d: OUTPUT«ok 00:01 111m␤»

[16:04] <jnthn> Even STD sees it as the string repetition operator :)

[16:05] <moritz> std: sub y() { say "x"; } y()

[16:05] <p6eval> std dc62e1d: OUTPUT«[31m===[0mSORRY![31m===[0m␤Strange text after block (missing comma, semicolon, comment marker?) at /tmp/OhIFilLcmU line 1:␤------> [32msub y() { say "x"; }[33m⏏[31m y()[0m␤    expecting any of:␤  bracketed infix␤        infix or meta-infix␤    statement modifier loop␤Pa…

[16:05] <jnthn> Teaches you to call your sub something better than x :P

[16:05] <felher> indeed :)

[16:06] <jnthn> ok, home time &

[16:07] *** mj41 joined
[16:29] * masak decommutes

[16:33] *** kaleem left
[16:38] *** Chillance left
[16:39] *** molaf joined
[16:42] *** kaleem joined
[16:42] * jnthn home

[16:52] <colomon> perl6: class Foo { has $.a = { say "NicGaviskey"; }; }; my $f = Foo.new; $f.a()

[16:52] <p6eval> pugs b927740, rakudo 2c1d2f, niecza v13-279-g16b6b2e:  ( no output )

[16:52] <colomon> perl6: class Foo { has $.a = { say "NicGaviskey"; }; }; my $f = Foo.new; $f.a()()

[16:52] <p6eval> pugs b927740, rakudo 2c1d2f, niecza v13-279-g16b6b2e: OUTPUT«NicGaviskey␤»

[16:52] <colomon> jnthn: reckon that's correct behavior?

[16:53] *** thou joined
[16:54] <jnthn> colomon: Looks fine to me.

[16:54] <jnthn> The parens on $f.a() are invoking the method a

[16:54] <colomon> right

[16:55] *** Trashlord joined
[16:56] <TimToady> but see S02:2426

[16:56] <colomon> nooooo!

[16:56] <TimToady> perl6: class Foo { has $.a = { say "NicGaviskey"; }; }; my $f = Foo.new; $f.a.()

[16:56] <p6eval> pugs b927740, rakudo 2c1d2f, niecza v13-279-g16b6b2e: OUTPUT«NicGaviskey␤»

[16:57] <colomon> that's also correct?

[16:57] <TimToady> but see S02:2426

[16:57] <colomon> I'm looking but not seeing

[16:58] <TimToady> $.foo.()    # means $.foo().()

[17:00] <colomon> I gathered as much, I'm just not seeing justification for that in S02:2426.  Maybe the stupid software took me to the wrong line number?

[17:02] <TimToady> should just be the paragraph before that example

[17:02] <TimToady> done a git pull lately?

[17:03] <TimToady> or is the ir clog link not working?

[17:03] <colomon> did you mean S12:2426?

[17:03] <colomon> I do see a reference there in S12

[17:05] <TimToady> no S02, the section Ampersand and invocation

[17:05] <mikemol> Kinda reading a lot of backlog. If you assume all numbers have a string representation, why does that imply inclusion of a string pointer with the number? Couldn't you generate that on-demand, possibly storing the representation in a cache as an optimization for subsequent calls?

[17:06] <colomon> TimToady: ah, if I jump to that title I see it.

[17:06] <mikemol> I mean, if being lazy is a virtue, be lazy, dangit!

[17:06] <TimToady> colomon: so obviously the line link is screwed up somehow

[17:07] <colomon> TimToady: yeah

[17:07] <TimToady> mikemol: but we don't want to kludge up the representation all numbers just to handle val() allomorphism

[17:07] <TimToady> this is one tail that should not wag the dog

[17:07] <TimToady> so I think MI is a better solution

[17:09] <dalek> roast: c411376 | jnthn++ | S12-class/literal.t:

[17:09] <dalek> roast: Fix a test that thought a type object should be boolean true.

[17:09] <dalek> roast: review: https://github.com/perl6/roast/commit/c411376a4a

[17:10] <TimToady> and maybe it's not so bad if we get an ambiguous dispatch out of an IntStr; that's why + and ~ are single character coercers, after all...

[17:11] <TimToady> and we can always get smarter down the road; failing the ambiguous dispatch is the conservative thing to do for 6.0

[17:12] <TimToady> sorear: ^^ you can put it back on your todo list :)

[17:13] <mikemol> I just got a boatload of tuit drains finally covered; the OMGWTF busy season is finally over. Need to do a little wedding planning, possibly prep for a Penguicon presentation, a tweak to RC's syntax highlighting to allow highlighting to be switched off...but then I should be able to look at p6 specs again.

[17:13] *** xinming_ left
[17:14] <colomon> Penguicon!

[17:14] <mikemol> I just presented on IPv6 at MDLUG, and they want me to submit to present on IPv6 at Penguicon. So, yeah. :)

[17:15] <colomon> cool

[17:15] <colomon> I presented on p6 last year.

[17:15] <colomon> but haven't gotten beyond thinking about ConFusion this year.  ;)

[17:16] <dalek> rakudo/nom: 86bb3ae | jnthn++ | src/ (3 files):

[17:16] <dalek> rakudo/nom: Make sure we don't generate a throwaway GLOBAL in an eval - just use the one currently in force.

[17:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/86bb3ae2a4

[17:16] <dalek> rakudo/nom: 6f9a909 | jnthn++ | t/spectest.data:

[17:16] <dalek> rakudo/nom: Run S12-class/literal.t.

[17:16] <mikemol> Only realy question in my mind is if I'll have enough time to divide my talk into each of IPv6 and your {server|home network|enterprise network|software}...Each case has different takes on capabilities and considerations.

[17:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6f9a90915c

[17:23] <dalek> roast: 26d151e | (Solomon Foster)++ | S12-attributes/defaults.t:

[17:23] <dalek> roast: Revert "remove outdated test file", to provide a starting framework for developing a sensible modern version of these tests.

[17:23] <dalek> roast: 

[17:23] <dalek> roast: This reverts commit 25075dceff423a637e93e97642a9efe6b5653317.

[17:23] <dalek> roast: review: https://github.com/perl6/roast/commit/26d151e626

[17:23] <dalek> roast: 15bfd0d | (Solomon Foster)++ | S12-attributes/defaults.t:

[17:23] <dalek> roast: Rewrite test to conform to current standard.  moritz++, other p6ers, please code review.

[17:23] <dalek> roast: review: https://github.com/perl6/roast/commit/15bfd0d16a

[17:24] <dalek> niecza: 68084c6 | (Solomon Foster)++ | lib/CORE.setting:

[17:24] <dalek> niecza: Borrow Rakudo's implementation of categorize.

[17:24] <dalek> niecza: review: https://github.com/sorear/niecza/commit/68084c6a4f

[17:24] <dalek> niecza: a59163d | (Solomon Foster)++ | t/spectest.data:

[17:24] <dalek> niecza: Turn on S32-list/categorize.t.

[17:24] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a59163df12

[17:24] <dalek> niecza: 83e8bea | (Solomon Foster)++ | t/spectest.data:

[17:24] <dalek> niecza: Turn on S12-attributes/defaults.t.

[17:24] <dalek> niecza: review: https://github.com/sorear/niecza/commit/83e8beab88

[17:27] <[Coke]> http://neoformix.com/spot/#/perl6 - new visualization tool for twitter. (perl6 is kind of a light topic for it, try just "perl")

[17:27] * [Coke] restarts the niecza spectest run. ;)

[17:29] * [Coke] sees that his gist was tweeted. huh.

[17:29] * [Coke] would have gussied it up.

[17:30] <colomon> tweeted by whom?

[17:30] <[Coke]> https://twitter.com/#!/audreyt/status/158862020580610049

[17:30] <[Coke]> she appears to be patient zero.

[17:31] <colomon> danke

[17:33] <colomon> [Coke]: to be fair, S12-attributes/defaults.t probably works on Rakudo now, too, they just haven't had a chance to add it to spectest.data.  Give them a bonus 32 or so.

[17:35] *** GlitchMr42 joined
[17:35] *** daxim left
[17:37] * [Coke] will check them for LHF.

[17:37] <[Coke]> ... but later. ;)

[17:38] *** GlitchMr left
[17:40] *** zjmarlow joined
[17:41] <masak> zjmarlow: hi!

[17:42] *** GlitchMr42 left
[17:50] <zjmarlow> Hello.

[17:51] *** packetknife joined
[17:57] *** Chillance joined
[17:58] <dalek> roast: 66892d4 | jnthn++ | integration/advent2009-day22.t:

[17:58] <dalek> roast: Remove bogus type constraint, which could never have worked (ng wasn't good at checking attribute type constraints though).

[17:58] <dalek> roast: review: https://github.com/perl6/roast/commit/66892d4943

[18:00] *** ksi joined
[18:03] *** dakkar left
[18:10] <dalek> roast: ff3141d | jnthn++ | S02-types/capture.t:

[18:10] <dalek> roast: nom re-fudging

[18:10] <dalek> roast: review: https://github.com/perl6/roast/commit/ff3141d7ea

[18:10] <dalek> rakudo/nom: 98c9ddf | jnthn++ | src/core/Parameter.pm:

[18:10] <dalek> rakudo/nom: Another couple of tweaks to make Signature.perl a little less wrong.

[18:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/98c9ddfc8c

[18:10] <dalek> rakudo/nom: d032415 | jnthn++ | src/core/Parcel.pm:

[18:10] <dalek> rakudo/nom: Improve Parcel.Capture.

[18:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d032415631

[18:10] <dalek> rakudo/nom: 5bc4fdc | jnthn++ | t/spectest.data:

[18:10] <dalek> rakudo/nom: Turn on two more integration tests.

[18:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5bc4fdc1c4

[18:11] <[Coke]> b: say 19182-19131

[18:11] <p6eval> b 1b7dd1: OUTPUT«51␤»

[18:11] <[Coke]> rakudo has pulled ahead again. ;)

[18:12] <[Coke]> I am not doing another "official" run until tomorrow though. ;)

[18:19] *** fridim_ joined
[18:22] *** fsergot joined
[18:31] *** zjmarlow left
[18:47] *** spine joined
[18:54] *** sayu left
[19:01] *** mj41 left
[19:01] *** molaf left
[19:02] *** nornagest left
[19:02] *** kaleem left
[19:03] *** takadonet left
[19:06] *** GlitchMr joined
[19:06] *** revdiablo joined
[19:06] *** revdiablo left
[19:06] *** revdiablo joined
[19:08] <felher> Any comments on: https://gist.github.com/1622404 ? Otherwise i put it on rosetta-code (http://rosettacode.org/wiki/Miller-Rabin_primality_test) in a few hours.

[19:12] <moritz> felher: !%% is a bit weird for %

[19:14] <felher> moritz: oh, yeah. It first was only %% at a different position. Than i copied it up and made it to !%% instead of %. good point :)

[19:14] <moritz> felher: you don't need any parens around the condition of the 'while'-loop

[19:15] <felher> moritz: another good point :)

[19:15] <moritz> my $x = $a ** $d mod $n; # in the underlying math library that we use for bigint we have a special function for that... but it's not exposed to p6 space :/

[19:16] <felher> moritz: yeah. I also looked for a math-module but there doesn't seem to be one that handles that case, yet. :)

[19:17] * felher looks into math::bigint... maybe.... :)

[19:19] <colomon> p6's math::bigint module is quite obsolete now.  :)

[19:19] <felher> Nope, no modpow in there :)

[19:20] <dalek> specs: dc8b0a4 | larry++ | S02-bits.pod:

[19:20] <dalek> specs: Revise val() semantics to use MI

[19:20] <dalek> specs: 

[19:20] <dalek> specs: And we'll conservatively leave ambiguities ambiguous for now.

[19:20] <dalek> specs: review: https://github.com/perl6/specs/commit/dc8b0a4faf

[19:20] <dalek> specs: c4a5930 | larry++ | S02-bits.pod:

[19:20] <dalek> specs: Provide rationale for one-pass parsing

[19:20] <dalek> specs: review: https://github.com/perl6/specs/commit/c4a593015d

[19:21] <TimToady> re modpow, see http://rosettacode.org/wiki/Modular_exponentiation#Perl_6

[19:22] *** kmwallio joined
[19:23] *** packetknife left
[19:24] *** packetknife joined
[19:25] <TimToady> felher: ^^

[19:25] <TimToady> I only just added that a few days ago

[19:25] <felher> TimToady: Oh, thnx. Yeah, i'll use that :)

[19:25] <felher> TimToady++

[19:26] <masak> oh, so *that's* the hard lesson of source filters!

[19:27] <TimToady> people seldom generalize that lesson sufficiently

[19:27] <masak> I thought it was something like "don't treat language as strings without structure" :)

[19:27] <TimToady> == treat as a different language

[19:28] <jnthn> moritz: ($a ** $d mod $n) if we expose the bigint op as an nqp op then we can probably get the optimizer to do the re-writing of it.

[19:29] <moritz> jnthn: I'll take care of exposing it as nqp op

[19:29] <TimToady> it's not clear whether that should be done unless you know you're in Int

[19:30] <jnthn> TimToady: Oh, I was planning on re-writing at the opcode level

[19:30] <jnthn> TimToady: That implies that we already inlined ** and mod.

[19:31] <TimToady> what if they're floaters?

[19:31] <jnthn> TimToady: What? :)

[19:31] <jnthn> TimToady: As in, floating point?

[19:32] <TimToady> or Rats

[19:32] <jnthn> TimToady: Inlining implies a compile time multiple dispatch.

[19:32] <jnthn> TimToady: That implies static knowledge that we have an Int.

[19:32] <jnthn> TimToady: And that no overriding candidates that'd bust things have been introduced.

[19:33] <TimToady> .oO(gee, how come when I add an Int declaration at line 42, line 8927 doesn't run out of memory?)

[19:33] <jnthn> TimToady: I'm only proposing the transform take place on the (low level) opcodes that operate on bigints.

[19:33] <TimToady> which makes it very mysterious

[19:34] <TimToady> the user now has to predict the behavior of the optmizer

[19:34] <jnthn> Only in so far as gradual typing is mysterious. :)

[19:34] <TimToady> though I suppose one could view it as a strange form of strength reduction

[19:34] <jnthn> TimToady: Maybe I missed something - I thought what moritz was suggesting was replacing two operations with a single, more efficient one.

[19:35] <TimToady> is it always more efficient?

[19:35] <moritz> fsvo "always" :-)

[19:35] <jnthn> :_)

[19:36] <moritz> I know that it'll be always more runtime efficient with a single op in rakudo

[19:36] <jnthn> Even if the operation isn't greatly so, not creating an intermediate result only to throw it away again will be.

[19:36] <jnthn> Ints are GC-able.

[19:36] <jnthn> (And escape analysis etc is a little way off. :))

[19:37] *** birdwindupbird joined
[19:37] <TimToady> but maybe it's a bit wrongish to only apply to Int; three Rats or Nums that happen to be integers could also benefit

[19:37] <moritz> jnthn: btw did you see my comments on the zavolaj tests under linux?

[19:38] <TimToady> so maybe you should *always* turn it into a modexp of some sort, and let it decide

[19:38] <moritz> TimToady: doing that optimization for three floats that happen to be int could change the result

[19:38] <TimToady> as in make it more correct? :P

[19:38] <moritz> because they can overflow in the ** part

[19:38] <moritz> aye :-)

[19:38] <moritz> fsvo "correct" :-)

[19:43] <TimToady> certainly FatRats should always produce an exact result

[19:44] <TimToady> well, at least with integer powers

[19:44] <TimToady> FatRat ** Int % FatRat should be exact

[19:46] *** Vlavv` joined
[19:49] <TimToady> btw, I think http://rosettacode.org/wiki/Modular_exponentiation#Perl_6 really shines in helping the reader understand the algorithm

[19:49] *** Vlavv_ left
[19:49] <TimToady> assuming they know how 'repeat' and assignops work...

[19:51] *** Trashlord left
[19:51] <moritz> aye; reads much nicer than the libtommath code :-)

[19:52] <dalek> nqp: 97760d4 | moritz++ | / (3 files):

[19:52] <dalek> nqp: nqp::expmod_I

[19:52] <dalek> nqp: review: https://github.com/perl6/nqp/commit/97760d4540

[19:53] *** pnu left
[19:53] *** pnu joined
[19:53] *** itz_ left
[19:56] *** jferrero left
[19:57] *** kmwallio left
[19:57] *** revdiablo left
[19:57] *** geekosaur left
[19:57] *** hundskatt left
[19:57] *** localhost left
[19:57] *** cooper left
[19:57] *** overrosy_ left
[19:57] *** sivoais left
[19:57] *** drbean left
[19:57] *** groky left
[19:57] *** BinGOs left
[19:57] *** moritz left
[19:57] *** ruoso joined
[19:57] *** moritz joined
[19:57] *** sivoais joined
[19:57] *** cj joined
[19:57] *** overrosy joined
[19:57] *** cooper joined
[19:57] *** revdiablo joined
[19:57] *** revdiablo left
[19:57] *** revdiablo joined
[19:57] *** cosimo joined
[19:57] *** kmwallio joined
[19:57] *** geekosaur joined
[19:57] *** prammer joined
[19:57] *** hundskatt joined
[19:57] *** drbean joined
[19:58] *** groky joined
[19:58] *** localhost joined
[20:00] *** itz joined
[20:07] *** BinGOs joined
[20:09] *** fsergot left
[20:13] <felher> aye

[20:15] *** GlitchMr42 joined
[20:17] *** jferrero joined
[20:18] *** GlitchMr left
[20:20] <sorear> good * #perl6

[20:20] <felher> o/ sorear 

[20:21] <masak> sorear! \o/

[20:24] *** birdwindupbird left
[20:28] <masak> perl6: say "foo" ~~ / f (o) $0 /

[20:28] <p6eval> niecza v13-285-g83e8bea: OUTPUT«#<match from(0) to(3) text(foo) pos([#<match from(1) to(2) text(o) pos([].list) named({}.hash)>].list) named({}.hash)>␤»

[20:28] <p6eval> ..pugs b927740: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20111008/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HAND…

[20:28] <p6eval> ..rakudo 5bc4fd: OUTPUT«=> <foo>␤ 0 => <o>␤␤»

[20:30] <masak> in Perl 5, having backreferences be spelled $1 rather than \1 would require a special case, because the "natural" thing for Perl 5 to do would be to interpolate the *last* $1 during regex compilation.

[20:31] *** fsergot joined
[20:32] <masak> the \1 backreferences come from sed, right?

[20:32] <jnthn> buubot_backup: eval print "foo" =~ /f(o)$0/

[20:32] <buubot_backup> jnthn: 1

[20:33] <jnthn> er :)

[20:33] <jnthn> buubot_backup: eval print "foo" =~ /f(o)$1/

[20:33] <buubot_backup> jnthn: o1

[20:33] <masak> it works? great. :)

[20:33] <jnthn> buubot_backup: eval print "foo" =~ /f(o)\1/

[20:33] <buubot_backup> jnthn: o1

[20:33] <masak> (no print needed)

[20:34] <jnthn> oh!

[20:35] <moritz> buubot_backup: eval 'foo' =~ /f(o)\1/; $&

[20:36] <buubot_backup> moritz: foo

[20:36] <moritz> buubot_backup: eval 'foo' =~ /f(o)$1/; $&

[20:36] <buubot_backup> moritz: fo

[20:36] <moritz> buubot_backup: use warnings; eval 'foo' =~ /f(o)$1/; $&

[20:36] <buubot_backup> moritz: Couldn't match input.

[20:36] <moritz> buubot_backup: eval use warnings; 'foo' =~ /f(o)$1/; $&

[20:36] <buubot_backup> moritz: Use of uninitialized value $1 in regexp compilation at (eval 20) line 1. fo

[20:36] <sorear> eval 2

[20:36] <buubot_backup> sorear: 2

[20:37] <masak> ah; moritz++

[20:37] <masak> so they don't work.

[20:38] <moritz> eval use warnings; $_= 'fo'; s/(o)/\1$1/; $_

[20:38] <buubot_backup> moritz: \1 better written as $1 at (eval 20) line 1. foo

[20:41] <masak> right, so "use \1 here, use $1 there" :)

[20:42] <masak> or, as A05 has it, "Tell me again, when do I say \1, and when do I say $1? Why are they different?"

[20:50] *** alester joined
[21:01] *** rjbs- joined
[21:02] *** fridim_ left
[21:02] * flussence is currently crawling through two screens of gdb asm dumps and scary 128-bit code... trying to get my browser to not crash on the nyan cat YT video

[21:03] *** pat_js joined
[21:04] <flussence> I can't really complain about rakudo's lack of error message line numbers after this :)

[21:05] *** zby_home joined
[21:06] * masak can :)

[21:08] <rsimoes1> Has Scheme's numeric tower ever been looked at for Perl 6?

[21:09] <rsimoes1> abstracting numeric type relationships away from the system's representation of them is a pretty neat idea

[21:09] *** GlitchMr42 left
[21:10] <rsimoes1> http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-6.html

[21:10] *** kaare__ left
[21:13] *** Trashlord joined
[21:13] <tadzik> something broke panda

[21:14] * tadzik golfing

[21:14] <jnthn> oh crap, I removed the bamboo!

[21:14] *** zjmarlow joined
[21:14] *** spine left
[21:15] <jnthn> tadzik: What's the failure mode?

[21:15] <tadzik> rakudo: https://gist.github.com/1623088

[21:15] <p6eval> rakudo 5bc4fd: OUTPUT«Type check failed in assignment to '$v'; expected 'Mu' but got 'Command'␤  in method REIFY at src/gen/CORE.setting:5142␤  in method reify at src/gen/CORE.setting:4335␤  in method reify at src/gen/CORE.setting:4335␤  in method gimme at src/gen/CORE.setting:4699␤  in…

[21:15] <tadzik> jnthn: as above

[21:15] <jnthn> WTF?!

[21:16] <tadzik> you have a kickass machine, you bisect it :P

[21:17] *** pat_js left
[21:17] * tadzik peeks at CORE.setting

[21:17] <jnthn> tadzik: Needn't, I already know where it is

[21:17] <tadzik> cool

[21:21] *** LoRe_ is now known as LoRe

[21:21] <PerlJam> surely that would have been caught by a failed test?

[21:24] <jnthn> PerlJam: You'da thunk so

[21:24] <masak> rsimoes1: Perl 6 has more of a "numeric comb" -- everything's Numeric, and then there are subtypes under that.

[21:24] <jnthn> tadzik: Any chance of a test?

[21:24] <masak> rsimoes1: I don't think anyone ever considered a tower. seems a bit too abstract for Perl 6, perhaps.

[21:25] <masak> rsimoes1: people sometimes have the expectation that an Int will be a Num or a Rat.

[21:26] <tadzik> jnthn: surely

[21:26] <rsimoes1> in the tower, an Int isa Number and does Rat, does Real, does Complex

[21:26] <dalek> rakudo/nom: e700b91 | jnthn++ | src/core/ (2 files):

[21:26] <dalek> rakudo/nom: Fix regression in usage message generation introduced by workaround for usage message generation when working around changes to Parameter.

[21:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e700b9159a

[21:26] *** pat_js joined
[21:27] <tadzik> wait, wat

[21:27] <jnthn> It's, er, what happened. :)

[21:28] <rsimoes1> I guess the tower is mapped to the numeric set relations

[21:28] <sorear> rsimoes1: niecza's overload resolution mechanism was conciously modeled on the r(5)rs numeric now

[21:28] <rsimoes1> oh, groovy

[21:29] <sorear> s/now/tower/

[21:29] <sorear> I still haven't read r6rs

[21:29] <sorear> "I feel old"

[21:29] <rsimoes1> the tower was preserved in r6rs

[21:29] <rsimoes1> so that's a relief =]

[21:29] <masak> rsimoes1: right, people sometimes expect the Perl 6 numeric type system to map to numeric set relations. it doesn't.

[21:31] <rsimoes1> complex is non-real, right?

[21:31] <sorear> right

[21:32] <rsimoes1> eh, easy enough to remember

[21:35] <dalek> specs: 962cd09 | sorear++ | S03-operators.pod:

[21:35] <dalek> specs: [S03] fix tiny typo

[21:35] <dalek> specs: review: https://github.com/perl6/specs/commit/962cd093aa

[21:37] *** packetknife left
[21:37] *** packetknife joined
[21:41] *** Trashlord left
[21:53] *** cognominal left
[21:58] *** molaf joined
[22:09] *** kmwallio left
[22:16] <dalek> roast: ab726ff | tadzik++ | S06-other/main-usage.t:

[22:16] <dalek> roast: Add a test for a freshly discovered regression

[22:16] <dalek> roast: review: https://github.com/perl6/roast/commit/ab726ff915

[22:24] <jnthn> tadzik: Thanks. :)

[22:28] *** donaldh joined
[22:36] <donaldh> Hi jnthn

[22:37] <jnthn> o/ donaldh 

[22:37] <donaldh> I'm just reading today's irc log about Zavolaj

[22:37] <jnthn> :)

[22:37] <donaldh> I _had_ sqlite working with zavolaj v1.

[22:38] <jnthn> donaldh: OK. In theory, it should not be a difficult port. If it is, I'd like to understand why so I can fix things.

[22:38] <donaldh> Yep, I'm just reading v2 to understand it.

[22:39] <jnthn> (e.g. is native('...') is still the same, OpaquePointer is still there, etc.)

[22:39] <jnthn> Arrays changed somewhat.

[22:40] <donaldh> If you look at branch out_params on github, I used 'is rw' to mark out params.

[22:40] <donaldh> sub sqlite3_open_v2( Str $filename, OpaquePointer $ppDB is rw, Int $flags, Str $zVfs )

[22:40] *** alester left
[22:41] <donaldh> It was a bit hacky because I was learning and seemed to be hitting issues with parrot NCI at the time.

[22:42] <jnthn> Oh... :)

[22:42] <jnthn> Yeah, I only got the stuff in Zavolaj 1 master in place.

[22:43] <jnthn> You can hack it by doing:

[22:43] *** am0c joined
[22:43] <donaldh> If I'd 'finished' what I did on out_params I'd have asked you to merge it :)

[22:44] <jnthn> my $ppDB := CArray[Int].new; $ppDB[0] = 0;

[22:44] <jnthn> And then passing that

[22:44] <jnthn> Need to do out params properly really though.

[22:44] <jnthn> Should be easier to do it in a good way now.

[22:45] <donaldh> I think we'll need a new type map for 'is rw' parameters.

[22:45] <donaldh> And maybe some magic to create an instance of the correct type when the pointer is null.

[22:46] <donaldh> Is that possible from a type extracted from a signature?

[22:46] <donaldh> s/from/on/

[22:46] <jnthn> All the stuff I've done so far uses type objects to handle C NULLs.

[22:46] <jnthn> (So yes.)

[22:48] <sorear> o/ donaldh

[22:48] *** donri left
[22:48] <donaldh> o/

[22:53] *** panterax left
[22:53] *** panterax joined
[22:54] <dalek> niecza: 0ae0fa0 | (Paweł Murias)++ | / (2 files):

[22:54] <dalek> niecza: Enable specifing list context to p5 subs (we still support only one return value).

[22:54] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0ae0fa0e23

[22:56] <pmurias> sorear: how can we support my $foo=123;eval('print $foo',:lang<perl5>)?

[23:09] <sorear> That's a bit beyond my competence.  Better to ask #p5p

[23:11] <jnthn> niecza: role R { }; my $x = 0; $x does R; say $x.WHAT

[23:11] <p6eval> niecza v13-285-g83e8bea: OUTPUT«Int+R()␤»

[23:11] <jnthn> niecza: role R { }; my $x = 0; $x does R; say 0.WHAT

[23:11] <p6eval> niecza v13-285-g83e8bea: OUTPUT«Int+R()␤»

[23:11] <jnthn> Oops. :)

[23:11] <jnthn> (Rakudo has same issue.)

[23:19] <dalek> roast: 2327d69 | jnthn++ | S14-roles/mixin.t:

[23:19] <dalek> roast: Unfudge a test for Rakudo. Along the way, make it not attempt to mix in to constants (which should fail, but currently doesn't in Rakudo nor Niecza).

[23:19] <dalek> roast: review: https://github.com/perl6/roast/commit/2327d69df9

[23:19] <dalek> rakudo/nom: 44d5f15 | jnthn++ | src/ (2 files):

[23:19] <dalek> rakudo/nom: Implement 0 but Answer(42) style of mixing in (for does also).

[23:19] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/44d5f15d5e

[23:20] <sorear> urp, I thought I fixed that alreay

[23:24] <jnthn> sorear: How are you planning to fix it?

[23:24] <jnthn> That is, how to we decide what we can/can't mix in to?

[23:24] <jnthn> Rakudo has had a "fix me" comment there for months...

[23:28] <sorear> jnthn: I mean I thought I fixed the test :)

[23:29] <jnthn> sorear: oh :)

[23:29] <sorear> my best idea for the real issue has been an 'Immutable' tag role

[23:29] <sorear> incidentally, I need this for constant folding too

[23:29] <jnthn> My word, these trait tests are bitrotten

[23:35] <jnthn> Yeah, the constant folder I started hacking on the other day mostly went off "do we have a known compile time value for this thingy", which is too loose.

[23:39] <dalek> roast: 60cabaf | jnthn++ | S14-traits/routines.t:

[23:39] <dalek> roast: Correct routine trait test (which didn't even parse!) and todo one test for Rakudo.

[23:39] <dalek> roast: review: https://github.com/perl6/roast/commit/60cabaf5e1

[23:39] <dalek> roast: ebfbce1 | jnthn++ | S14-traits/attributes.t:

[23:39] <dalek> roast: Fix a concatenation that was presumably meant to be a smartmatch operator.

[23:39] <dalek> roast: review: https://github.com/perl6/roast/commit/ebfbce1a89

[23:39] <dalek> rakudo/nom: fb11366 | jnthn++ | src/core/Attribute.pm:

[23:39] <dalek> rakudo/nom: Add missing accessor to Attribute.

[23:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fb113662ef

[23:39] <dalek> rakudo/nom: 77e31ae | jnthn++ | t/spectest.data:

[23:39] <dalek> rakudo/nom: Turn on a couple of traits tests.

[23:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/77e31aee31

[23:41] *** Trashlord joined
[23:46] *** pmurias left
[23:48] *** tokuhirom joined
[23:56] *** ksi left
[23:57] *** PacoAir left
