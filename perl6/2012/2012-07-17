[00:01] *** benabik joined
[00:03] <thou> does method DESTROY() work in nom? seems it's not getting called for me, and i just noticed that none of the modules in rakuod-star use it....

[00:03] <flussence> nope

[00:03] <thou> okay

[00:03] <flussence> and I don't know a good way to emulate it either :(

[00:04] *** atrodo left
[00:04] <flussence> the general consensus seems to be that it's unimplementable in rakudo with the way current GC works

[00:04] <benabik> There's been experiments in Parrot about running finalizers during GC runs, but it's not as simple as appears on first glance.

[00:05] *** Vlavv` joined
[00:16] <thou> thanks, it seems i should have picked up on this before, but ... that's how it is. :-)

[00:21] <thou> hi, anyone have a moment to clear up my confusion about BUILD vs. new:  https://friendpaste.com/53MKnWboUIKj7JwCqIi6Ym

[00:22] <thou> i think i'm calling self.bless() wrong, or ... something.

[00:28] <thou> hmmm, i add a submethod BUILD(:$!stdscr) {} and it works

[00:28] <thou> i thought that would be generated for me, even if method new() is defined explicitly

[00:29] <benabik> I think you're generally supposed to define BUILD, not new.

[00:32] *** daniel-s_ left
[00:39] <thou> benabik: thanks; i think generally, but afaik there's no way to do something like this without it:  https://friendpaste.com/53MKnWboUIKj7JwCqIi4tx    or am i missing the obvious?

[00:40] <benabik> thou: I think the default new has a slurpy hash and passes all the args to BUILD.  So you can IIRC, basically remove the code from new to BUILD.

[00:44] <thou> i thought for sure i'd tried that and gotten an error. but ... yes, you're right, it does work!

[00:45] *** prettyrobots left
[00:51] *** zhutingting joined
[00:51] *** prettyrobots joined
[01:03] <thou> ah, and found another typo, so now i've got it working with UTF-8.

[01:04] <thou> pretty sloppy code at the moment, but it works :-)

[01:12] *** scott___ joined
[01:19] *** alvis` joined
[01:21] *** alvis left
[01:48] *** raiph left
[01:50] <[Coke]> p6: my %h = (1=>2, 3=>4); for keys %h { say $_ ; say $_.WHAT}

[01:50] <p6eval> rakudo 1fe39c, niecza v19-13-g442e075: OUTPUT«1␤Str()␤3␤Str()␤»

[01:52] <[Coke]> pugs: my %h = (1=>2, 3=>4); for keys %h { say $_ ; say $_.WHAT}

[01:52] <p6eval> pugs: OUTPUT«3␤Str␤1␤Str␤»

[01:57] *** Patterner left
[01:57] *** nsh joined
[02:00] *** tokuhiro_ left
[02:05] *** sudokode joined
[02:08] *** colomon_ joined
[02:08] *** zhutingting left
[02:08] *** hypnokode joined
[02:08] *** colomon left
[02:08] *** colomon_ is now known as colomon

[02:09] *** sudokode left
[02:09] *** hypnokode is now known as sudokode

[02:13] *** zhutingting joined
[02:15] *** zhutingting left
[02:16] *** zhutingting joined
[02:23] *** zhutingting left
[02:23] *** nsh left
[02:23] *** teee joined
[02:25] *** nsh joined
[02:25] *** zhutingting joined
[02:26] *** nsh left
[02:26] *** nsh joined
[02:28] *** zhutingting left
[02:33] *** zhutingting joined
[02:33] *** orafu left
[02:33] *** orafu joined
[02:33] *** nsh left
[02:34] *** Psyche^ joined
[02:34] *** Psyche^ is now known as Patterner

[02:36] *** nsh joined
[02:37] *** nsh left
[02:37] *** nsh joined
[02:38] *** _jaldhar_ joined
[02:42] *** nsh left
[02:44] *** nsh joined
[02:49] *** nsh left
[02:49] *** nsh joined
[03:04] *** kaare_ joined
[03:08] <thou> https://github.com/softmoth/Term-Curses

[03:08] *** araujo left
[03:12] <benabik> Term?  Curses!

[03:13] *** thou left
[03:28] <[Coke]> p: say 9160/22933

[03:28] <p6eval> pugs: OUTPUT«0.399424410238520908734138577595604587276␤»

[03:28] <[Coke]> aaaaargh

[03:29] <benabik> ?

[03:29] <[Coke]> not quite 40%

[03:30] *** patspam joined
[03:30] *** godfrey999 joined
[03:31] <benabik> Hm.  Looks like about 14 short.

[03:31] <[Coke]> p: say 22933*.4-9160

[03:31] <p6eval> pugs: OUTPUT«13.2␤»

[03:31] <[Coke]> good eye.

[03:31] <benabik> I pulled up a calculator and started upping the number...

[03:32] <benabik> Your way was smarter.  :-D

[03:33] *** patspam left
[03:36] *** patspam joined
[03:43] *** alester joined
[03:49] *** patspam left
[03:50] * [Coke] finds one more file with 14 tests. yay.

[03:50] *** patspam joined
[03:50] *** patspam left
[03:51] <[Coke]> p: say 9170/22933 # crap!

[03:51] <p6eval> pugs: OUTPUT«0.3998604630881262809052457157807526272184␤»

[03:51] *** patspam joined
[03:51] * [Coke] must have miscounted.

[04:00] *** zhutingting left
[04:05] *** teee left
[04:13] <[Coke]> pugs: 9174/22933

[04:13] <p6eval> pugs:  ( no output )

[04:13] <[Coke]> pugs: 9174/22933.say

[04:13] <p6eval> pugs: OUTPUT«22933␤»

[04:13] <[Coke]> pugs: say 9174/22933

[04:13] <p6eval> pugs: OUTPUT«0.4000348842279684297736885710548118431954␤»

[04:13] <[Coke]> there we go. as long as rakudo doesn't pass any more tests before noon eastern, I'm probably good. ;)

[04:14] <dalek> roast: ec8593e | coke++ | integration/advent2009-day14.t:

[04:14] <dalek> roast: Compare the type, not the stringified type.

[04:14] <dalek> roast: review: https://github.com/perl6/roast/commit/ec8593efa4

[04:14] <dalek> roast: abc9cbd | coke++ | / (15 files):

[04:14] <dalek> roast: pugs fudge

[04:14] <dalek> roast: review: https://github.com/perl6/roast/commit/abc9cbd0b8

[04:14] <dalek> Pugs.hs: 851241f | coke++ | t/spectest.data:

[04:14] <dalek> Pugs.hs: run fudged tests

[04:14] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/851241f9ce

[04:15] * [Coke] is really scraping the barrel here on fudging vs. actually writing haskell.

[04:16] <[Coke]> http://feather.perl6.nl/~coke/unrun - all the tests that pugs isn't running. the ones showing more than about 5 passes are all tricky to fudge.

[04:29] *** skids left
[04:40] *** alester left
[04:40] <[Coke]> . o O (zzz)

[04:53] *** zhutingting joined
[05:04] *** am0c_ joined
[05:11] *** HarryS left
[05:22] *** prettyrobots left
[05:24] *** teee joined
[05:26] *** prettyrobots joined
[05:37] *** prettyrobots left
[06:00] *** au left
[06:00] *** au___ joined
[06:05] *** GlitchMr joined
[06:10] *** brrt joined
[06:10] *** wtw joined
[06:13] *** nodmonkey joined
[06:14] *** kresike joined
[06:14] <kresike> good morning all you happy perl6 people

[06:17] <kresike> `

[06:20] *** brrt left
[06:20] *** HarryS joined
[06:21] *** brrt joined
[06:23] *** brrt1 joined
[06:23] *** brrt left
[06:24] *** au___ is now known as au

[06:27] *** nodmonkey left
[06:30] *** godfrey999 left
[06:31] *** patspam left
[06:32] *** brrt1 left
[06:33] *** brrt joined
[06:39] *** ggoebel left
[06:40] *** brrt left
[06:40] *** zhutingting left
[06:55] <moritz> \o

[06:56] *** hoelzro|away is now known as hoelzro

[06:57] *** ggoebel joined
[06:58] *** nsh left
[07:01] *** simcop2387 left
[07:02] <moritz> short backlog is short

[07:03] *** simcop2387 joined
[07:15] *** brrt joined
[07:23] *** patspam joined
[07:23] *** patspam left
[07:23] *** patspam joined
[07:27] *** patspam left
[07:27] *** patspam joined
[07:31] *** araujo joined
[07:35] *** daxim joined
[07:36] <daxim> rare interview with christopher tolkien:  http://sedulia.blogs.com/sedulias_translations/2012/07/was-first-felt.html

[07:41] *** kaare_ left
[07:45] *** zhutingting joined
[07:59] *** fhelmberger joined
[08:01] <diakopter> hm

[08:05] <diakopter> too much coffee today

[08:09] <masak> bonan matenon, #perl6

[08:09] <kresike> hello masak o/

[08:10] <masak> hello, S-ro kresike.

[08:10] <masak> phenny: eo en "S-ro kresike"?

[08:10] <phenny> masak: "Mr. kresike" (eo to en, translate.google.com)

[08:10] <masak> \o/

[08:11] <masak> phenny: eo en "gesinjoroj!"?

[08:11] <phenny> masak: "ladies and gentlemen !" (eo to en, translate.google.com)

[08:11] <kresike> :)

[08:11] <masak> \o/

[08:11] <kresike> eo means esperanto, right ?

[08:11] <masak> jes.

[08:12] <kresike> masak, ooc, how many languages do you speak ?

[08:12] <masak> I'm back from one week of teaching it, so I'm a bit, hm, soaked in it right now.

[08:12] <kresike> human languages I mean ...

[08:13] *** birdwindupbird joined
[08:13] <masak> kresike: Swedish, English, Esperanto fluently. French and German listening is rather good, but speaking is crap. I've studied but mostly forgotten Russian. I can talk to Italians and Spaniards thanks to Esperanto, but the communication is not perfect, of course. I can survive in China with my Mandarin.

[08:14] <masak> oh, and I took one year of Latin, though I wouldn't say I speak it, nor write it. I can sometimes decipher Latin phrases.

[08:15] <kresike> that's one hell of a list :)

[08:15] <masak> most of us here are into languages :)

[08:15] <kresike> yes, I noticed

[08:16] <masak> I've listened to enough Norwegian to understand it fairly well. it's easier than the local Swedish dialect here. :) Danish is still hard, but possible.

[08:16] * moritz should brush up his bokmål

[08:16] <masak> many languages in Eastern Europe, including Polish, has that "uncanny valley" thing going with Russian, which in me triggers a constant fascination with them. I don't speak them, but I always try to learn new things about them.

[08:16] <masak> I think my favorite among those is Slovenian.

[08:17] <masak> at some point, I know I will tackle Estonian, Greek, Sanskrit, and Tibetan. I haven't yet, though.

[08:17] <GlitchMr> Heh, that's long list

[08:17] <kresike> masak, I thought you're belgian ... albeit some say there is no such thing :)

[08:18] <masak> I was born in and still live in .se

[08:18] <kresike> hmmm, my mistake

[08:18] <brrt> .... who was the dude that was belgian

[08:19] <brrt> the super-european guy

[08:19] * masak .oO( does "super-european" mean "clamoring for a bigger Europe"? ) :P

[08:20] <GlitchMr> I only know two languages

[08:20] <moritz> .oO( Russian, rude Russian and very rude Russian )

[08:21] <GlitchMr> I wonder how many people only know one language...

[08:21] <diakopter> o/

[08:21] <moritz> GlitchMr: too many

[08:21] <daxim> sons, I am very disapoint… if you don't brush up your russian for yapc2013

[08:22] <masak> :)

[08:22] <daxim> пиво - beer

[08:23] <daxim> Я очень рад, ведь я, наконец, возвращаюсь домой  -  ♪ Trololo ♫

[08:23] <bonsaikitten> brrt: "super-european" ? what a nice way to put it

[08:23] <GlitchMr> But, I think I know many programming languages... but I still cannot understand C++...

[08:23] <bonsaikitten> I consider myself depatriated

[08:23] <diakopter> masak: I thought you submitted a talk for yapc::eu - I don't see your name on the list of 56 accepted talks

[08:23] <bonsaikitten> GlitchMr: no worries, most C++ coders can't either

[08:23] <GlitchMr> It's... a mess

[08:24] <kresike> GlitchMr, there's always perl* :)

[08:25] <GlitchMr> I know :)

[08:25] <GlitchMr> Perl is actually nice and readable* language

[08:25] <GlitchMr> * if you write it properly

[08:25] <daxim> the * is a fool's cap bell

[08:25] * daxim jingles

[08:26] <GlitchMr> PERL is unreadable, but Perl is readable

[08:26] <brrt> bonsaikitten: you're welcome :-)

[08:27] <diakopter> masak: I don't see any Perl 6 names on there actually, except fglock, but his talk is about p5 perlito

[08:27] * brrt personally thinks european integration is by itself a very noble goal

[08:27] <brrt> the implementation of which is messy

[08:28] <bonsaikitten> brrt: no one wants integration... 

[08:28] <moritz> integration is harder than derivation

[08:28] <moritz> bonsaikitten: but people want the benefits from integration

[08:28] <bonsaikitten> moritz: only by a constant factor ;)

[08:28] <bonsaikitten> moritz: yes, everyone wants benefits, but no one wants to pay for it

[08:28] <brrt> moritz: much harder

[08:29] <brrt> ... maybe my words are wrong

[08:30] <diakopter> I was thinking of going to yapc::eu this year, but with no Perl 6 talks...

[08:30] <masak> diakopter: I submitted four talks. I hope a proper subset of them get accepted.

[08:30] *** GlitchMr left
[08:31] <masak> diakopter: they have a "rolling schedule" of accepting talks, methinks.

[08:31] <daxim> Acme::Inline::PERL     # on backpan

[08:31] <moritz> diakopter: I submitted two, jnthn two, pmichaud one (afaict)

[08:31] <masak> so they may simply not have gotten to it yet.

[08:31] <brrt> whut no perl6 talks?

[08:31] <daxim> masak has one

[08:31] <moritz> brrt: not one approved yet

[08:31] <brrt> ah that is too bad

[08:31] <diakopter> masak: oh.

[08:31] *** hoelzro left
[08:32] <brrt> i was planning on going but i have yet to find a cheap-and-fast way to travel to frankfurt

[08:33] *** GlitchMr joined
[08:34] <BinGOs> pigeon

[08:34] <moritz> trebuchet

[08:34] <daxim> if it's your first yapc, you can apply for funding through send-a-newbie

[08:34] <brrt> it is my first in fact :-)

[08:35] <brrt> well, i have google funds in principle

[08:35] <brrt> but most of these will go to tuition

[08:35] <tadzik> my last trip to yapc, which is my first one, was covered by gsoc funds as well

[08:35] <daxim> what's google funds, specifically?

[08:36] <daxim> ah, gsoc

[08:36] *** dakkar joined
[08:36] <daxim> tadzik, I meant to ask you how many people are participating in that farm game(?) competition.  I forgot all the details

[08:37] <masak> curious.

[08:37] <masak> we were just gearing up to PR the competition into existence :)

[08:37] <masak> famr currently doesn't run on latest nom, according to tadzik :/

[08:37] <masak> farm*

[08:38] <masak> I will investigate during the day.

[08:38] <diakopter> I count 21.6 hours of accepted talks

[08:38] <brrt> surpisingly, bahn costs more if you take a slower train

[08:38] <masak> diakopter: that doesn't say much since there may be N tracks.

[08:39] <kresike> brrt, they probably charge the time you sat in their chair :)

[08:39] *** bbkr1 joined
[08:41] <brrt> it seems that way

[08:41] <tadzik> fortunately it doesn't work for planes

[08:41] <tadzik> I saved like 50% on flight costs for being fine with taking 4 flights instead of 2

[08:41] <tadzik> I get twice the take-off excitement for half the price!

[08:42] *** godfrey999 joined
[08:44] <brrt> flying is nice, just so... wasteful

[08:45] <masak> I can't imagine it'll last.

[08:45] <masak> we live in a previous window of history.

[08:45] <masak> precious*

[08:45] <masak> the window of cheap international flight.

[08:46] <tadzik> wasteful, money-wise?

[08:46] <moritz> time and resource wise

[08:46] *** hoelzro joined
[08:46] <tadzik> true

[08:46] <sorear> I hope to see transatlantic rail travel within my lifetime

[08:46] <tadzik> shame it's actually cheaper than trains

[08:46] <sorear> that will be less wasteful

[08:47] <masak> tadzik: there is only a finite amount of compressed organic carbon remains in the ground. we're burning it up faster every year. it'll run out in our lifetimes, more likely in a few decades. where "run out" is a gradual, difficult thing rather than a sudden shock, of course.

[08:48] <sorear> hmm, I need to get back to Mattijsen

[08:49] <masak> the two centuries around 1950 will be remembered in history as a crazy Bell curve of oil consumption.

[08:49] <masak> sorear: you definitely do.

[08:49] <masak> sorear: over here, she's known as "Liz", by the way :)

[08:49] <tadzik> masak: yeah, I know

[08:50] <masak> s/Bell/bell/

[08:50] <tadzik> that's why it surprises me how trains manage to be so awfully expensive in comparison

[08:51] <moritz> tadzik: maintenance of the railroad network

[08:51] <tadzik> ah, that could be, yes

[08:51] <sorear> masak: compressed organic matter is not the only way to run an airplane.

[08:51] <masak> so if we made better tracks, it would all be cheaper?

[08:52] <brrt> whats better?

[08:52] <masak> sorear: indeed. solar airplanes are coming along.

[08:52] <sorear> solar is problematic from a power/weight ratio

[08:52] <brrt> you are going to have to lay down very long iron bars on a solid ground for many , many miles no matter how you do it

[08:52] <brrt> hydrogen airplanes, that could work :-)

[08:52] <masak> but with all the investing that goes into alternative power sources, I'm wondering if the totality of it isn't still "too little, too late" from a global energy needs perspective.

[08:52] <sorear> I was thinking more in terms of synthetic fueled jet engines

[08:53] <sorear> masak: the next few decades are going to be an interesting time

[08:53] <masak> there are some alternative-energy deployment efforts that we should ideally start *right now*, even though technologies will improve before we're done deploying.

[08:53] <masak> sorear: yeah :/

[08:53] <masak> in the Chinese curse sense.

[08:54] <sorear> once we get a bit further into the Hubbart downslope, deployment of non-oil energy sources is going to go way up

[08:54] <masak> indubitably.

[08:54] <sorear> and there will be a market shock far beyond my ability to predict the consequences of

[08:54] <masak> aye.

[08:54] <masak> almost seems what markets do is get shocked :P

[08:55] <bonsaikitten> brrt: hydrogen is surprisingly bad

[08:55] <brrt> ... yes, i've heard, now that i think  of it is pretty stupid

[08:55] <bonsaikitten> generating methane or heavier hydrocarbons has higher energy density andbetter storage

[08:55] <brrt> what about ethanol?

[08:55] <bonsaikitten> e.g. hydrogen leaks, so you lose ~30% in transport

[08:55] <bonsaikitten> the containers need to be heavy and pressurized

[08:55] <masak> nuclear could possibly be made very clean and very safe.

[08:55] <masak> it has a bad rep though, at least in these parts.

[08:55] <bonsaikitten> masak: if there were no greed and corruption maybe

[08:55] <sorear> hydrogen has problems, I'm not denying that

[08:56] <Timbus> gen 4 nuclear reactors are just great

[08:56] <sorear> ethanol has differentproblems

[08:56] <masak> Timbus: url?

[08:56] <sorear> masak: A nuclear reactor on a plane strikes me as very stupid

[08:56] <Timbus> i uh,

[08:56] * Timbus points at wikipedia i guess

[08:56] <Timbus> sorry

[08:56] <sorear> masak: weight constraints will force you to skimp on shielding, and what happens if the plane crashes?

[08:57] <masak> Timbus: no problem.

[08:57] <lumi_> Re formatting slangs, there's Common Lisp's format

[08:57] <sorear> masak: now, we can't just run wires up to the plane, which leaves two choices: 1. wireless power 2. synthetic ethanol/hydrogen/whatever is fashionable in 20 years

[08:57] <masak> sorear: I wasn't talking about planes in particular, just the energy demand problem.

[08:57] <masak> lumi_: url?

[08:58] <sorear> note that beaming the 100MW or so a plane needs up to the plane as focused microwaves is not a walk in the park either

[09:00] <lumi_> masak:  http://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm 

[09:01] <masak> sorear: I've always wondered about that. Tesla liked the idea. it seems rife with problems to me. I wouldn't like to be a bird in-between, for one.

[09:01] * masak looks

[09:01] <masak> lumi_: um, it's just *another* string format. which is interesting, but doesn't solve the problem at hand.

[09:02] <sorear> masak: I had a friend once who was a US Navy radar operator.  They do in fact kill birds.

[09:02] <masak> sorear: aye.

[09:02] <sorear> (I asked)

[09:02] <masak> sorear: I have a friend who told me about a crisply toasted seagull that had to be pried off the radar.

[09:03] <diakopter> fried then pried. then pied.

[09:03] <sorear> hmm, wikipedia page for the A380 does _not_ list total engine power consumption

[09:03] <sorear> I was able to find the energy content of a full A380 tank though (10.5 TJ)

[09:04] <sorear> but the cruise range is listed in km, not s

[09:04] <sorear> *sigh*

[09:04] <lumi_> masak: http://okmij.org/ftp/typed-formatting/index.html then?

[09:06] <sorear> mjultiplying the 'maximum operating speed' by the 'total engine thrust' gets 336 MW

[09:06] <sorear> which is a very questionable calculation, but meh

[09:06] <Timbus> http://www.wolframalpha.com/input/?i=A380+Range+%2F+A380+cruise+speed

[09:07] <masak> lumi_: yeah, that's more like it :)

[09:07] <Timbus> :3

[09:07] <sorear> Timbus: very questionable also, since the range includes takeoff fuel consumptin

[09:08] <lumi_> masak: I think that could look much nicer in modern Haskell, with overloaded strings, so it won't require 'lit's

[09:09] <sorear> lifting 560,000 kg of aluminum to cruising altitude (which incidentally is also not listed) requires energy

[09:10] <sorear> given g = 10, h = 1e4 -> 56 GJ

[09:12] <sorear> Timbus' calculation gets 179 GW, which is close enough to mine to feel better about both

[09:12] <sorear> 179 MW I mean

[09:14] <Timbus> we're gunna need a bigger solar panel...

[09:14] <kresike> or an antigrav field generator :)

[09:15] * masak was gonna say "there is no free lunch", but the truth is probably that we humans are tapping the universe in very awkward ways still

[09:15] <sorear> alternate proposal

[09:15] *** sergot joined
[09:15] <sergot> hi o/

[09:16] <masak> sergocie! \o/

[09:16] <sergot> masaku \o/

[09:16] <sergot> ! :)

[09:16] <sorear> use a very large linear motor with on-site power generation to boost a magnetically levitated train onto a suborbital elliptical path to the destination

[09:16] <sorear> no transatlantic tracks needed

[09:18] <kresike> masak, we (humans) need to learn physics.

[09:18] <sorear> masak: the funny thing is that people talk about using energy when energy cannot be consumed.

[09:19] <sorear> I do not beleive there is any fundamental limit on the entropy requirement of moving objects

[09:20] <sorear> (which isn't necessarily saying much, the only fundamental entropy bound I know of is the one on irreversable computation)

[09:20] <masak> sorear: everyday use of physics terminology is just rife with similar mis-applications of concepts. that's what you get when non-experts get to use very specific language.

[09:20] <brrt> sorear: entropy is the limit on free energy, which can be consumed

[09:20] <brrt> which you know of course, its just

[09:20] <masak> I'm actually more peeved by the whole new-age use of "energy", and the fact that I bought into it even a little for a few years.

[09:20] <brrt> its not so silly a discussion if you put 'free' in front of every 'energy' :-)

[09:23] <sorear> if you put an identical linear motor on the other end run as a generator, and both were 100% efficient, and there were no air in the way, the entire process would occur with no usage of free energy.

[09:25] <sorear> one interesting thing about high-speed rail is that it actually uses more fuel than planes, because there's so much more air.

[09:25] <sorear> I want to see development of evacuated subways

[09:27] * jnthn imagines evacuating them, keeping them that way, and dealing with the resulting safety issues isn't particularly cheap.

[09:27] <sorear> yeah :|

[09:28] <sorear> life in the present is so full of annoying tradeoffs.

[09:28] <brrt> or, we just keep where we are for the most part

[09:28] <brrt> and communicate by sending electrons / photons

[09:29] <jnthn> Or just be patient and wait for the next super-continent to form. Then there won't be this inter-continental travel problem. :P

[09:29] <sorear> NEUTRINOS

[09:30] <masak> sorear: heh, "life in the present". our top priority should be to get out of this gravity well and populate another heavenly body.

[09:31] <brrt> liveable versions of which, are ample

[09:31] <sorear> masak: Much as I support the goal of space colonization it won't solve the problem of there only being so many seconds in a kilosecond.

[09:31] <sorear> "although it may increase the number of seconds in a day"

[09:31] * masak .oO( 1000 )

[09:32] <sorear> brrt: I know!  Isn't it amazing!

[09:32] <masak> sorear: the problem of never being bored is not such a bad one, relatively speaking.

[09:32] <brrt> :-)

[09:32] <brrt> its just sad

[09:32] <brrt> we have such a beautiful living planet

[09:32] <brrt> and for our own hunger

[09:32] <brrt> we burn it

[09:34] <sorear> I rather think that the biosphere will surive global warming

[09:34] <masak> oh, sure.

[09:35] <masak> but "survive" != "it'll be fun".

[09:35] <masak> for humans, specifically.

[09:36] <sorear> it already hasn't been, at least if you assume that things like the Ethiopian droughts and crop failures of the 90s were related

[09:37] <sorear> we are in the middle of a mass extinction now, they're never fun

[09:37] <masak> *nod*

[09:38] <brrt> global warming is not really the issue

[09:38] <brrt> hunger will be

[09:38] <masak> overpopulation.

[09:38] <masak> unequal distribution of resources.

[09:39] <sorear> I am not convinced overpopulation will necessarily be a problem in the medium-long term

[09:40] <brrt> overpopulation combined with the ability to literally use all resources you can think of

[09:40] <brrt> that is dangerous

[09:40] <sorear> there is a lot of uncertainty in demographic projections.

[09:41] <sorear> what will happen to India's birthrate once their per capita GDP reaches European levels?

[09:42] <sorear> at least global warming theory only requires the physical sciences

[09:42] <sorear> and even that's hard enough

[09:42] <masak> if you educate women, birth rate drops. that's generalizing, of course, but it seems to hold up.

[09:43] <sorear> and then there are questions about the questions

[09:44] <sorear> _will_ India's per capita real GDP eventually reach European levels, or is the general upward trend we're seeing now entirely an artefact of cheap oil?

[09:46] <brrt> whats european levels to start

[09:46] <brrt> the differences between european countries are pretty sizable

[09:47] <sorear> the level where birthrates start to go below 2

[09:47] <sorear> here's another one for you.

[09:47] *** mucker joined
[09:48] <sorear> there have, AFAIK, been no fundamentally new antibiotics discovered in the last N years, where N is suprisingly large

[09:48] <sorear> will evolution of multidrug-resistant bacteria cap human populations at a level low enough for food to be a complete non-issue?

[09:48] <brrt> no

[09:48] <brrt> because even though infections are an important cause of death

[09:49] <brrt> the amount of 'young people' dying from infections is low

[09:49] <sorear> *now*

[09:49] <brrt> hygiene is much more important

[09:50] <sorear> the Spanish flu had the highest mortality rate for people in their twenties, even accounting for the differences in infection rates

[09:50] <sorear> ok, that's not a bacterium

[09:50] <masak> I'm concerned about multidrup-resistant bacteria, too. that one is a losing battle for humans.

[09:50] <sorear> hygiene will help.  will it be enough?

[09:50] <brrt> no, and in the immunologicial specificities of the flu infection, its not even that weird

[09:51] <brrt> i believe death rates will be higher

[09:52] <masak> I hear people in southern Europe are buying antibiotics and eating them almost for preventive purposes. educating about proper antibiotics usage might help, or at least delay the inevitable.

[09:53] <jnthn> Whoa.

[09:53] <masak> everytime I see a new antibacterial cleaning fluid in commercials, I get a little angry. this happens every few years.

[09:53] * jnthn tends to only take such things if he really needs them

[09:53] <masak> that's the proper usage, yes.

[09:53] <jnthn> And when I do I'm like, "damn, I hate having to take these"

[09:53] <masak> listen to the word. it *kills life* in your body.

[09:53] <jnthn> Normally because they're incompatible with things I like. :)

[09:54] <masak> if you take them regularly, your body will only contain the outlaws that have evolved to take that kind of beating.

[09:54] <masak> Darwin called, and he's peeved too.

[09:54] <brrt> you need antibiotics when you have some sort of internal infection, otherwise, you don't

[09:54] <masak> right.

[09:55] <brrt> a bigger problem that southern-european-pill-poppers is probably bio-industrial farmers with the same behavior

[09:55] <moritz> and even then you only need it in some cases

[09:56] <brrt> abcesses, bladder infections

[09:56] <brrt> most respitory infections are viral so they can't be helped

[09:58] <sorear> "we can fix that one by just eliminating meat production"

[09:59] <brrt> we can fix most things by eliminitaing meat production

[09:59] <masak> I sigh and weep for the GM industry. GM grains and stuff is actually not such a bad idea in theory, but the players on the market are ruthless and essentially ready to kill to establish themselves.

[09:59] <brrt> most problems of overpopulation

[10:01] <moritz> there are other ways to fix overpopulation problems...

[10:01] <brrt> as friendly as not eating meat?

[10:01] <moritz> no, not as friendly.

[10:03] <masak> overpopulation will "fix" itself. we probably want to have some say in the solutions chosen, though.

[10:06] <gfldex> i vote for space exploration

[10:07] *** scott___ left
[10:21] *** fhelmberger left
[10:22] *** fhelmberger joined
[10:42] *** _jaldhar_ left
[10:49] <teee> Could Panda(Perl6) run on Win32? I could'nt install any module with it...

[10:50] <tadzik> do you get any particular error?

[10:51] <tadzik> panda is reported to work on windowses, but none of the main developers work on windows I think

[10:58] *** snearch joined
[11:01] *** jaldhar joined
[11:14] *** jaldhar left
[11:15] *** jaldhar joined
[11:21] *** JimmyZ joined
[11:26] *** godfrey999 left
[11:28] *** spider-mario joined
[11:42] *** kaare_ joined
[12:03] *** Coleoid left
[12:16] <brrt> r: pir::load_language("nqp");

[12:16] <p6eval> rakudo 1fe39c: OUTPUT«"load_language" couldn't find a compiler module for the language 'nqp'␤  in block <anon> at /tmp/IS17AgIUzL:1␤␤»

[12:16] *** JimmyZ_ joined
[12:18] *** JimmyZ left
[12:18] *** JimmyZ_ is now known as JimmyZ

[12:23] <arnsholt> jnthn: ping?

[12:28] <[Coke]> see au?

[12:28] <[Coke]> aloha: seen au

[12:28] <aloha> [Coke]: au was last seen in #perl6 1 days ago joining the channel.

[12:28] <[Coke]> ooh, sneaky!

[12:29] *** lue left
[12:32] * [Coke] pastes au's sig from the pugs readme into google translate, clicks "play", and hears his wife's maiden name. (Coke then realizes that he's translated Audrey into *polish*, and asked for /that/ pronounciation, which is probably not what he intended.)

[12:35] <masak> otori tan.

[12:37] <daxim> detect fail.  text says correctly feng, audio says otori

[12:38] <masak> I'm not surprised.

[12:38] <masak> (au had a post once about how some Japanese Perlers rendered her name as 'otori-tan', which reminded her about https://en.wikipedia.org/wiki/OS-tan )

[12:38] <[Coke]> polish Feng sounded like english "Fink" to me.

[12:39] <[Coke]> just reading http://pugs.blogs.com/audrey/2009/04/post.html, aye.

[12:39] <jnthn> arnsholt: pong

[12:40] <au> o/

[12:40] <phenny> au: 06 Jul 17:13Z <[Coke]> tell au - come back to pugs, we miss you. ;)

[12:40] <au> I guess the first step is to port everything to mtl-2.*, otherwise it won't even build on this rMBP ;)

[12:40] <au> (+latest haskell platform)

[12:42] *** lue joined
[12:42] <arnsholt> jnthn: Pointers to PMCs can change over time, right?

[12:43] <dalek> Pugs.hs: 8dd7fa4 | au++ | pugs-DrIFT/pugs-DrIFT.cabal:

[12:43] <dalek> Pugs.hs: * Get pugs-DrIFT on mtl>=2.

[12:43] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/8dd7fa4aa0

[12:43] <daxim> [Coke], any junior jobs?  I could perhaps delegate to some haskell beginners at the local lambdaheads group

[12:44] <masak> au! \o/

[12:44] <au> 👽/

[12:44] <[Coke]> daxim: A good place to start is perhaps: https://github.com/perl6/Pugs.hs/issues?direction=desc&sort=created&state=open

[12:44] <masak> .u 👽

[12:44] <phenny> U+1F47D (No name found)

[12:44] <jnthn> arnsholt: No, the GC doesn't move objects.

[12:44] <arnsholt> Oh, excellent

[12:45] <masak> oh, EXTRATERRESTRIAL ALIEN :)

[12:45] <au> :D

[12:45] * masak hugs au :)

[12:45] <jnthn> arnsholt: It can't, it's conservative.

[12:46] * [Coke] successfully adds Complex.Complex() to pugs. yay.

[12:46] * au pugs a pugged pugs :)

[12:47] <arnsholt> jnthn: Right, that's one of those things I know means something related to GCs, but I'm not sure what =)

[12:47] <dalek> Pugs.hs: 3b5a25d | au++ | pugs-compat/pugs-compat.cabal:

[12:47] <dalek> Pugs.hs: * Bring pugs-compat to mtl>=2

[12:47] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/3b5a25d6cf

[12:50] * [Coke] is not used to having to rebase with another pugs committer! o/

[12:50] * [Coke] makes sure his new thing still works with au's commits.

[12:51] <arnsholt> Anyways, I think I'll try to use a hash table to store pairs of sub PMCs and callback data, so that we don't leak memory all over the place

[12:51] <masak> [Coke]++ # rebasing

[12:51] <dalek> Pugs.hs: 82ede96 | au++ | / (4 files):

[12:51] <dalek> Pugs.hs: * Upgrade everything to mtl2.

[12:51] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/82ede96cb8

[12:52] <[Coke]> ... ok I'll just wait a minute. ;)

[12:52] <au> I'll let you know when done ;)

[12:53] <[Coke]> au: pugs will, as of today, be really close to the 40% mark of rakudo in terms of passing spectests.

[12:53] *** tokuhiro_ joined
[12:53] <arnsholt> And since I'm not sure if Parrot's hash tables want to store bare C-land data I might end up implementing my own hash tables, in which case using the PMC pointer adresses as keys might be convenient

[12:53] <jnthn> arnsholt: Mostly it means that it doesn't always know where all of the pointers to things are, or what things are or aren't pointers. But that's OK - you only have to find one pointer to at least all of the living things :)

[12:53] <[Coke]> I suspect with someone who knows the code base, that could go up pretty quickly.

[12:53] <jnthn> arnsholt: Well, another way is to use the Pointer PMC 

[12:53] <jnthn> arnsholt: Then you can use the Parrot-y hash tables.

[12:53] <[Coke]> au++ - most of that 40% is just me fudging tests.

[12:53] <jnthn> arnsholt: A Pointer PMC lets you hang any data you want off it.

[12:53] <arnsholt> Parroty hash tables would be nice

[12:54] <arnsholt> The less stuff I have to implement the better

[12:54] <jnthn> Yes, I'd rather we don't have our own hash table implementation too :)

[12:56] <[Coke]> ah, crap. my Complex addition doesn't work anyway, as it's breaking some other use of Complex elsewhere.

[12:56] * [Coke] backs it out and opens a ticket. :P

[12:57] *** PacoAir joined
[12:58] * au decides to switch to the experimental "cabal install -j" branch

[12:58] *** atrodo joined
[13:00] * [Coke] notes that you don't have to worry about me on Pugs.hs master.

[13:00] * [Coke] wants you to commit more, not less. ;)

[13:01] <[Coke]> https://github.com/perl6/Pugs.hs/issues/17 in case au, masak, or moritz get bored. First step in getting us a few hundred more tests.

[13:03] <masak> [Coke]++

[13:03] <timotimo> what's the strength of pugs? it doesn't seem like it's "amount of features"

[13:03] <dalek> Pugs.hs: d95d83a | au++ | Pugs/src/Pugs/Cont.hs:

[13:03] <dalek> Pugs.hs: * mtl2 compat.

[13:03] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/d95d83a6db

[13:03] <dalek> Pugs.hs: abcaf74 | au++ | Pugs/Pugs.cabal:

[13:03] <dalek> Pugs.hs: * Allow building without Perl5 embedding.

[13:03] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/abcaf74b2f

[13:04] <au> timotimo: "amount of tolkien poetry"

[13:04] <[Coke]> au++

[13:04] <[Coke]> timotimo: first to market

[13:04] <[Coke]> seriously, though, it's pretty fast.

[13:05] <moritz> and it did used to be the one compiler that that supported most features

[13:05] <[Coke]> moritz: AND IT WILL BE AGAIN! MUAHAHAHAHA

[13:05] <timotimo> that's pretty cool in that case :)

[13:05] *** godfrey999 joined
[13:06] <au> [Coke]: think I'm done committing to master for now

[13:06] <au> compiling works; linking still doesn't work, but I suspect it's a clang issue... will work it out during commuting.

[13:06] <[Coke]> au: thanks for the commits!

[13:07] <au> glad to help! clean compilation is now sub-two-minutes

[13:07] <au> should be sub-30-seconds with cabal-install -j

[13:07] <au> that's... quite refreshing :)

[13:10] <dalek> Pugs.hs: a879f45 | au++ | Pugs/Pugs.cabal:

[13:10] <dalek> Pugs.hs: * Bump cabal version.

[13:10] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/a879f4583a

[13:11] <au> commute &

[13:12] *** moukeddar joined
[13:26] *** snearch left
[13:27] <dalek> Pugs.hs: 3a3bb78 | au++ | Pugs/Configure.PL:

[13:27] <dalek> Pugs.hs: * Always prefer system perl with embedding Perl5 on OSX.

[13:27] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/3a3bb7830a

[13:29] *** bluescreen10 joined
[13:29] *** skids joined
[13:33] <dalek> Pugs.hs: e7ce2ab | au++ | t/fudgeandrun:

[13:33] <dalek> Pugs.hs: * en_US.ISO-8859-1 doesn't exist on OSX, so use "C".

[13:33] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/e7ce2ab2ef

[13:34] <geekosaur> ...s/-//

[13:35] <dalek> Pugs.hs: 2ffbe10 | au++ | t/fudgeandrun:

[13:35] <dalek> Pugs.hs: * < geekosaur> ...s/-//

[13:35] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/2ffbe102fa

[13:36] <geekosaur> :)

[13:38] <au> geekosaur++

[13:39] <au> t/run_spectests # Tests=14178, 190 wallclock secs

[13:39] <tadzik> woow

[13:40] <masak> o.O

[13:42] *** fgomez left
[13:42] *** seldon joined
[13:42] <au> with test_jobs=8... # Tests=14178, 60 wallclo[Dck secs

[13:44] <masak> wait... that was *without* test_jobs=8? o.O

[13:44] * masak reels

[13:46] <tadzik> impossibru

[13:46] <tadzik> I have to try that

[13:48] <kresike> bye all

[13:48] <tadzik> bye bye

[13:48] *** kresike left
[13:50] *** JimmyZ left
[13:50] <[Coke]> now, pugs is only passing 2/5ths of the tests... but still. ;)

[13:51] <[Coke]> (2/5 of rakudo, not 2/5 of 14178)

[13:51] *** JimmyZ joined
[13:51] <[Coke]> au++

[13:52] <masak> au++

[13:52] <tadzik> au++ indeed

[13:52] <[Coke]> au - that setting was finicky before - we'll see if it does any harm to the daily run.

[13:52] <[Coke]> (on feather, from inside cron)

[13:52] <au> k

[13:53] * [Coke] reads the patch and sees it'll be really hard for that to break feather. ;)

[13:53] <au> indeed :)

[13:54] <[Coke]> au++

[13:54] *** gdonald left
[13:54] *** gdonald joined
[13:55] <au> ghc++ actually # and intel++ too, I guess

[13:55] <masak> ghc++

[14:04] *** godfrey999 left
[14:17] *** lue left
[14:18] *** thou joined
[14:18] <dalek> Pugs.hs: 2877e1d | au++ | Pugs/src/Pugs/Prim.hs:

[14:18] <dalek> Pugs.hs: * Implement .Complex for #17

[14:18] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/2877e1d365

[14:18] *** wtw left
[14:19] <[Coke]> YAY!

[14:19] <[Coke]> au++ ;)

[14:20] <[Coke]> I encourage you to run t/spec/S32-trig/cos.t and see what else fails. ;)

[14:21] <[Coke]> ah. my naive version left off the other types in the last block, because "I only want it for .Complex". whoops.

[14:22] *** moukeddar left
[14:26] *** am0c_ left
[14:29] *** lue joined
[14:34] <dalek> roast: 3bb074f | coke++ | S03-operators/precedence.t:

[14:34] <dalek> roast: pugs unfudge

[14:34] <dalek> roast: review: https://github.com/perl6/roast/commit/3bb074f796

[14:48] *** fhelmberger left
[14:49] *** xinming left
[14:56] <masak> Guido will talk about Python 3 in Amsterdam tomorrow. http://uvaguido.eventbrite.com/

[14:56] *** birdwindupbird left
[14:57] <hoelzro> I think my skin would start to smolder if I got within 100m of him

[14:57] <hoelzro> interestingly enough, that's not too far from my apartment

[14:58] <moritz> hoelzro: hm, why? I don't love python, but I'd visit such a talk if I got near it by chance

[14:59] *** xinming joined
[14:59] <jnthn> "Learn how not to be a troll!" :D

[14:59] <masak> moritz: +1

[14:59] <brrt> yeah, moritz beat me to it, as usual

[14:59] * jnthn suspects hearing any designer of a widely used langauge speak about it would be interesting.

[14:59] <hoelzro> moritz: because I'm Perl to the core =)

[15:00] <jnthn> Whatever you think of the langauge itself.

[15:00] <hoelzro> I make the smoldering comment jokingly =)

[15:00] <jnthn> :-)

[15:00] *** crab2313 joined
[15:00] <brrt> i'd love to hear from the guy who made php

[15:00] <brrt> what he thinks

[15:01] <brrt> rasmussen i believe?

[15:01] <tadzik> array_map($array, $callback) vs array_filter($callback, $array)

[15:01] <brrt> stuff like that

[15:01] <tadzik> rasmus-something?

[15:01] <tadzik> yeah

[15:01] <flussence> htmlspecialchars()!

[15:01] <brrt> if anyone has an idea about well, messy software, its that guy

[15:01] <masak> Rasmus Lerdorf

[15:02] <daxim> he doesn't care.  watch the 2012 talk

[15:02] <brrt> srsly

[15:02] <brrt> ? :-o

[15:02] <daxim> worse is better, dontchaknow.

[15:03] <brrt> not to a fault

[15:03] <brrt> worse is better as long as it is 'good enough'

[15:03] <brrt> but the space in which php is 'good enough' is not so large

[15:03] <brrt> and economically speaking, it is shrinking

[15:20] *** spider-mario left
[15:23] *** spider-mario joined
[15:35] *** thelazydeveloper joined
[15:37] *** nsh joined
[15:38] *** nsh left
[15:38] *** nsh joined
[15:44] <[Coke]> au: https://github.com/perl6/Pugs.hs/issues/18, which I again stumble over edge cases with.

[15:44] * [Coke] rants that the trg tests need OO and "bless" in order to work.

[15:44] <[Coke]> s/trg/trig/

[15:46] <hoelzro> I think I actually have a commit in that repo!

[15:46] <moritz> it has inherited many commits from the old pugs svn repo

[15:47] <hoelzro> apparently mine didn't make it =(

[15:47] *** kaleem joined
[15:48] <moritz> hoelzro: probably because the source file you touched was modified, and then didn't survive the filtering into the new repo

[15:49] <moritz> hoelzro: but not all commits that wander are lost: https://github.com/perl6/mu/commit/b4b8eabb6e6f6747ef37705644abd8e36c9cefee

[15:52] <hoelzro> victory!

[15:52] <moritz> and also 59f6d2c291dcd44ec88ee6ab5d058919e3c65f94 (tests)

[15:53] <[Coke]> hoelzro: fresher commits are, of course, welcome. ;)

[15:54] <hoelzro> hehe

[15:54] <hoelzro> we'll see when I get the time =)

[15:54] <hoelzro> I have a list of things I'd like to do

[15:54] <hoelzro> first I need to finish my bot

[15:54] * [Coke] wonders how evil it would be to make pugs's .FatRat just return a Rat for now.

[15:54] <moritz> is pugs' rat fat?

[15:55] <[Coke]> pugs: say sqrt(123.14124124124124124).Rat

[15:55] <p6eval> pugs: OUTPUT«11.0969023263810537827112057129852473735809␤»

[15:55] <[Coke]> rakudo: say sqrt(123.14124124124124124).Rat

[15:55] <moritz> pugs: say sqrt(123.14124124124124124).Rat.perl

[15:55] <p6eval> rakudo 1fe39c: OUTPUT«11.096903␤»

[15:55] <p6eval> pugs: OUTPUT«6247000647757063/562949953421312␤»

[15:55] <moritz> pugs: say (sqrt(123.14124124124124124).Rat  ** 8).perl

[15:55] <p6eval> pugs: OUTPUT«2319382669772109656382902212965816736317420595048961834512373182489853409320490673944578697499502275172380277672512821715619521/10086913586276986678343434265636765134100413253239154346994763111486904773503285916522052161250538404046496765518544896␤»

[15:55] <moritz> looks fat, yes :-)

[15:55] <[Coke]> that's pretty fat. ;)

[15:55] <dalek> Pugs.hs: b1f0f20 | au++ | Pugs/src/Pugs/Prim.hs:

[15:55] <dalek> Pugs.hs: * .Str for #18

[15:55] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/b1f0f2062b

[15:55] <[Coke]> ok.

[15:55] <[Coke]> whoa!

[15:56] <moritz> pugs: say 10086913586276986678343434265636765134100413253239154346994763111486904773503285916522052161250538404046496765518544896.log(2)

[15:56] <p6eval> pugs: OUTPUT«*** No compatible multi variant found: "&log"␤    at /tmp/E_2y74roNw line 1, column 5 - line 2, column 1␤»

[15:56] <[Coke]> crap, I better open a LOT of tickets today. ;)

[15:56] <moritz> r: say 10086913586276986678343434265636765134100413253239154346994763111486904773503285916522052161250538404046496765518544896.log(2)

[15:56] <p6eval> rakudo 1fe39c: OUTPUT«392␤»

[15:57] * [Coke] wonders how often p6eval rebuilds pugs.

[15:57] * moritz wonders too

[15:59] *** kaleem left
[16:00] *** JimmyZ left
[16:03] *** brrt left
[16:05] <masak> today's mini-challenge: I have a list of <h2> and <h3> tags. what's the nicest/quickest/cleanest way to get a DOM of correctly nested <ul> and <li> tags representing an index of these?

[16:05] <moritz> masak: I have a deja-vu

[16:06] <masak> I asked a similar question the other day.

[16:06] <masak> but not the same one.

[16:06] <moritz> masak: I asked a similar question the other day

[16:06] <moritz> and we discussed lagging pointers :-)

[16:06] <masak> yes, that was the similar question.

[16:06] <dalek> roast: f3096ce | coke++ | S32-num/stringify.t:

[16:06] <dalek> roast: pugs unfudge

[16:06] <dalek> roast: 

[16:06] <dalek> roast: au++

[16:06] <dalek> roast: review: https://github.com/perl6/roast/commit/f3096ce84c

[16:06] <masak> oh! that's what you wanted to do :)

[16:06] <[Coke]> masak: is jQuery allowed? ;)

[16:07] <masak> [Coke]: I'm using Perl, but whatever floats your boat.

[16:07] <masak> just thinking of a nice algorithm for this.

[16:07] <masak> yes, maybe lagging variables are the answer :/

[16:07] <moritz> masak: no, I wanted to group successive <li>-eleemnts in a common <ul>...</ul> frame

[16:07] <masak> though thinking about it now, it feels like lagging variables seem like the answer because the question is posed too procedurally.

[16:08] <masak> moritz: well, that's basically a subproblem of my problem. or could be, at least.

[16:09] <masak> hm, probably I should just isolate each <h3> and the contents under it. then solve nestedly for <h2>...

[16:09] <moritz> masak: https://github.com/perl6/doc/blob/master/htmlify.pl#L103 is what I wrote for extracting pod subsections

[16:09] <moritz> another very similar thing

[16:09] <moritz> and https://github.com/perl6/doc/blob/master/htmlify.pl#L80 to call it

[16:10] *** hoelzro is now known as hoelzro|away

[16:11] <masak> moritz: Haskell has a "chunks-grep", but with another name.

[16:11] <masak> maybe they called it "group" or something.

[16:12] *** _ilbot left
[16:12] *** _ilbot joined
[16:14] <masak> er, I meant the other way with <h2> and <h3> above... :)

[16:14] <moritz> I just assumed you meant the right thing :-)

[16:17] <[Coke]> masak: can we assume that the h2's and h3's are siblings?

[16:18] <[Coke]> ah, not necessary.

[16:19] *** cenuij2 joined
[16:21] <dalek> rakudo/toqast: 5c96d7d | jnthn++ | src/QPerl6/Actions.pm:

[16:21] <dalek> rakudo/toqast: Fix CATCH blocks that also did smart-matching. This also unbusts Test::Util, which wins back quite a lot of tests too.

[16:21] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/5c96d7da7e

[16:21] <masak> [Coke]: you can assume that they've been extracted and that you're only seeing a stream of <h2> and <h3>

[16:23] *** nsh left
[16:30] <[Coke]> masak: http://feather.perl6.nl/~coke/foo.html

[16:31] <[Coke]> that pulls out the h2, h3, and then loops over them, making a list of the ordered h2 elements (just saving the inner html), and an object of h2s -> child h3s.

[16:31] <[Coke]> which could then be converted to a ul/li (but isn't)

[16:33] <masak> [Coke]: cool.

[16:33] <masak> clearly leverages the DOM a bit, too.

[16:33] <masak> probably better than thinking of it as just text.

[16:35] *** _cxx_ joined
[16:36] *** MayDaniel joined
[16:36] <[Coke]> well, the only dom going on there is just $("h2,h3"), and it sounds like you've done that

[16:37] *** _cxx_ left
[16:39] *** zhutingting left
[16:39] *** daxim left
[16:39] *** kst left
[16:39] *** preflex left
[16:39] *** Exodist left
[16:39] *** aloha left
[16:39] *** rsimoes left
[16:39] *** c1sung left
[16:39] *** baest left
[16:39] *** domidumont left
[16:39] *** wolong left
[16:39] *** Tene left
[16:39] *** pnu left
[16:40] *** daxim joined
[16:41] <masak> [Coke]: no, I actually iterated on the lines of the HTML. I knew what generated it, so I could assume headings were all on one line.

[16:43] *** nodmonkey joined
[16:44] <masak> &

[16:46] *** bluescreen10 left
[16:46] <flussence> when in doubt, cheat :)  http://www.whatwg.org/specs/web-apps/current-work/multipage/sections.html#outlines

[16:49] *** birdwindupbird joined
[16:50] <moritz> [Coke]: could you please invoke your planetsix-superpowers and add http://perl6maven.com/atom to the feed?

[16:50] *** prettyrobots joined
[16:50] <moritz> [Coke]: that's by szabgab++

[16:55] <[Coke]> done.

[16:55] <moritz> [Coke]++

[16:57] *** kst joined
[16:57] *** preflex joined
[16:57] *** Exodist joined
[16:57] *** aloha joined
[16:57] *** rsimoes joined
[16:57] *** c1sung joined
[16:57] *** baest joined
[16:57] *** domidumont joined
[16:57] *** wolong joined
[16:57] *** Tene joined
[16:57] *** pnu joined
[16:57] <daxim> what kind of lame power is heart^Wadding feeds, anyway?

[16:59] <moritz> daxim: Wielder Of 300 Visitors Per Post power, or so

[16:59] *** GlitchMr left
[17:00] *** GlitchMr joined
[17:00] *** dakkar left
[17:08] *** birdwindupbird left
[17:09] <dalek> nqp/toqast: b4a78bf | jnthn++ | src/QAST/Operations.nqp:

[17:09] <dalek> nqp/toqast: Fix various bits of bustage in loop construct code-gen.

[17:09] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/b4a78bfdfa

[17:09] <dalek> rakudo/toqast: 49cd752 | jnthn++ | src/QPerl6/Actions.pm:

[17:09] <dalek> rakudo/toqast: Fix xor and ^^.

[17:09] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/49cd7521d1

[17:09] <dalek> rakudo/toqast: 2a2a1d0 | jnthn++ | src/QPerl6/Actions.pm:

[17:09] <dalek> rakudo/toqast: Thinko.

[17:09] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/2a2a1d023f

[17:09] <dalek> rakudo/toqast: e88fe15 | jnthn++ | src/QPerl6/Actions.pm:

[17:09] <dalek> rakudo/toqast: Somewhat fix %_ and @_.

[17:09] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/e88fe15fbe

[17:10] *** birdwindupbird joined
[17:19] <[Coke]> hurm. one of the pugs tests hung during the daily smoke.

[17:21] <[Coke]> bah. another one, looks like they're going to 100% CPU, and then just sitting there.

[17:24] <sorear> good * #perl6

[17:25] <moritz> \o sorear 

[17:25] *** fgomez joined
[17:28] *** Chillance joined
[17:33] <jnthn> o/ sorear 

[17:33] <colomon> \p\o

[17:33] <masak> sorear! \o/

[17:34] <moritz> lol I blo^Wranted: http://perlgeek.de/blog-en/perl-6/2012-stop-the-rewrites.html

[17:35] <geekosaur> indeed

[17:36] *** cenuij2 left
[17:36] * geekosaur does wonder if that's a misapplication of a "don't do rewrites like crap managers do dilbert-esque reorgs" 

[17:36] <jnthn> Really? People are *still* whining about the nom do-over? :/

[17:37] <diakopter> "but you should've gotten it right the first time"

[17:37] <[Coke]> just like HTML did!

[17:37] <moritz> indeed we should have. And we should all be riding supersonic, organic Unicorn ponies for transport.

[17:38] <dalek> rakudo/toqast: 1036e02 | jnthn++ | src/QPerl6/Grammar.pm:

[17:38] <dalek> rakudo/toqast: Catch remaining PAST -> QAST in Grammar.

[17:38] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/1036e02727

[17:38] <dalek> rakudo/toqast: cd31481 | jnthn++ | src/QPerl6/Actions.pm:

[17:38] <dalek> rakudo/toqast: Fix our $*x

[17:38] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/cd31481e7f

[17:38] <dalek> rakudo/toqast: fe13b09 | jnthn++ | src/QPerl6/World.pm:

[17:38] <dalek> rakudo/toqast: Update module loading load dependency handling.

[17:38] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/fe13b09d6b

[17:38] <dalek> rakudo/toqast: efeba05 | jnthn++ | src/QPerl6/Actions.pm:

[17:38] <dalek> rakudo/toqast: Fix try in the case where there's no CATCH block already in there.

[17:38] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/efeba05ad2

[17:39] *** sergot left
[17:42] <jnthn> It's also worth point out that bs was delivered with zero spectest regressions. qbootstrap and altnfa were delivered with no spectest regressions OR module space regressions. The post-nom Rakudo is living up quite well to being a good base to evolve things without huge ongoing upheavel.

[17:42] <jnthn> *pointing

[17:44] <[Coke]> there's no point in worrying about nom at this point. we can worry about it if we have to do a nom-like rewrite later and how to plan for that.

[17:46] <masak> I'm not whining about the nom do-over. but it *did* have regressions, even though it was meant to be a rather easier transition than alpha->ng. I'm less interested in talking about blame than in making sure it doesn't happen again.

[17:46] * masak now reads moritz' post

[17:46] <moritz> jnthn: I'll add a note or two

[17:47] <flussence> as an end user I find parrot's flakiness causes me more headaches than the alpha→nom→etc.

[17:48] <masak> ah. simple, straightforward post about something I already agree with. moritz++

[17:48] <jnthn> flussence: heh, same as a developer :P

[17:49] <jnthn> Parrot doesn't do bad in terms of not falling in a heap these days though.

[17:49] <flussence> nom *did* break some of my code, but that was because I was playing around with nativecall at the time :)

[17:49] <masak> I also think rewrites are necessary. and maybe regressions are necessary too. regressions will be less and less tolerated as Perl 6 matures, in the sense that having them will seriously turn production users off in a bad way.

[17:49] <masak> which means that we should rewrite all we can while we can :)

[17:50] <flussence> .oO( hasn't mozilla rewritten its JS VM at least 4 times in recent memory? )

[17:50] <sjohnson> i believe so

[17:51] <[Coke]> flussence: but how much of that caused user rewrites?

[17:51] <seldon> Javascript users are historically used to incompatibilities, though.

[17:52] <GlitchMr> JavaScript incompatibilities?

[17:52] <GlitchMr> I through that DOM is main problem

[17:53] <jnthn> flussence: Well, NativeCall also changed quite a bit too :)

[17:53] <diakopter> there are plenty of JS engine quirks

[17:54] <GlitchMr> I know that there are problem with edge case in .split() function. Anything else?

[17:54] <GlitchMr> are edge cases*

[17:54] <flussence> jnthn: that was well worth rewriting everything, considering how much nicer my code is afterwards :)

[17:54] <diakopter> GC differences

[17:54] <jnthn> flussence: :)

[17:56] *** vmspb joined
[17:56] * [Coke] gets a lot of perl5/6 hate on another chat server.

[17:57] <GlitchMr> But most of those edge cases are like (?!(a)) so whatever

[17:57] <seldon> GlitchMr: == and != changed their meanings between 1.2 and 1.3. Also changed there: var arr = new Array(10); -- in 1.2, array with arr[0] = 10, from 1.3 on an array with 10 elements. Don't ask me for a comprehensive list; I'm not a webdesigner.

[17:58] <GlitchMr> 1.2 and 1.3 are very old JS versions

[17:58] <GlitchMr> Nobody uses Netspace 4 anymore

[17:58] <GlitchMr> Netscape*

[17:59] <GlitchMr> Also, in very old JS versions if (a = b) {} was actually if (a == b) {}, but well...

[17:59] <moritz> jnthn: btw it's not quite true that bs didn't cause fallout

[18:00] *** mucker left
[18:01] <GlitchMr> Also, I'm not aware of "changing meanings"

[18:01] <GlitchMr> I know that they have put === operator, but have they changed meaning of == operator?

[18:01] <diakopter> in JQuery there are several workarounds for various browsers to release memory in different cases. Also, there is detection/workaround of a Chrome over-optimization of recursive functions

[18:01] <seldon> == behaved like === originally. Your browser might have varied, though.

[18:02] <seldon> wild west days.

[18:02] <jnthn> moritz: I said no spectestregressions. :)

[18:02] <moritz> jnthn: ah, right

[18:02] <jnthn> moritz: I distinguished it from altnfa/qbootstrap which additionally had no module space regressions.

[18:02] <jnthn> moritz: I wish we'd had Emmentaller for bs.

[18:03] <jnthn> I'm certainly glad we'll have it for toqast :)

[18:03] <masak> I wish we'd had Emmentaler for alpha :)

[18:03] <moritz> well, both ng and nom implemented pretty drastic spec hanges too

[18:03] <moritz> *changes

[18:04] <GlitchMr> "In JavaScript 1.2, == and != operators (equality operators) performed this strict equality comparison. But, to comply with ECMA, in JavaScript 1.3, the equality operators have changed, and two new strict equality operators have been added. These new operators are not part of the current ECMA specification, but will be included in the next version."

[18:04] <GlitchMr> Oh, I see

[18:04] <dalek> rakudo/toqast: d4b53db | jnthn++ | src/QPerl6/Actions.pm:

[18:04] <dalek> rakudo/toqast: Unbust feeds compilation.

[18:04] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/d4b53db5df

[18:04] <dalek> rakudo/toqast: d40a3bd | jnthn++ | src/QPerl6/Actions.pm:

[18:04] <dalek> rakudo/toqast: Use correct variant of die op.

[18:04] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/d40a3bdd1f

[18:04] <thou> hi, does anyone have a solution to the problem commented in the BEGIN block here: https://github.com/softmoth/Term-Curses/blob/master/lib/Term/Curses/Raw.pm   for example, maybe a way at compile time to try { } "is native('various-lib-names')" until finding one that works?

[18:04] <dalek> nqp/toqast: 1700236 | jnthn++ | src/QAST/Operations.nqp:

[18:04] <dalek> nqp/toqast: Fix die_s signature.

[18:04] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/1700236f2e

[18:05] <GlitchMr> But did it matter? If == was matching before, it would match with === too

[18:05] * [Coke] wonders who here would work on perl6 full time if they could.

[18:05] <seldon> GlitchMr: Be aware that IE6 died only recently. Javascripters had to deal with ancient stuff for very long.

[18:05] <GlitchMr> I don't mean IE6

[18:05] <GlitchMr> IE6 is fine

[18:05] <seldon> Ha!

[18:05] <GlitchMr> Aside of edgecases

[18:05] <arnsholt> thou: You may be interested in knowing that one of the things on my TODO list is fixing the bundle/dylib mess on OS X

[18:06] <GlitchMr> If you aren't touching DOM, IE6 is fine in JS

[18:06] <thou> arnsholt: ok, cool. maybe i will just ignore that problem for now, then, and assume it works inside NativeCall

[18:06] <jnthn> Now up to 19889 in toqast. And that's on my box with no ICU support.

[18:06] <moritz> jnthn: want me to spectest on an icu-enabled box?

[18:06] <flussence> GlitchMr: string concat is something like O(n²) speed/mem in IE6 :)

[18:07] <diakopter> [Coke]: well, I'd work on a VM for Perl 6 if I had a commit bit and agreed with the general trajectory :)

[18:07] <diakopter> (full time)

[18:07] <arnsholt> thou: For development, I'd probably just ignore it for now, yeah

[18:07] <GlitchMr> On short strings it doesn't matter

[18:07] <Tene> [Coke]: I'd love to work on Perl 6 full time.

[18:07] <thou> arnsholt: i was just hoping to get something i could put on modules.perl6.org

[18:07] <arnsholt> The problem is that ATM, is native('foo') essentially just turns into dlopen('foo') (modulo some magicks)

[18:08] <jnthn> moritz: Go for it. There's still some amount of breakage.

[18:08] <arnsholt> And dlopen will only try for .bundle stuff automatically. To get dylibs you have to be explicit (like you do)

[18:08] <jnthn> moritz: But probably a heck of a lot less than last time you tried :)

[18:08] <_sri> moritz: it's not the rewrites, but being told perl6 is "usable" over and over that's annoying

[18:09] <flussence> GlitchMr: true, but I had to find this out the hard way because one of those strings was inserting a large <table> in .innerHTML (because... DOM)

[18:09] <moritz> _sri: well, others disagree

[18:09] <GlitchMr> DOM is bad API

[18:10] <flussence> that I can agree on

[18:10] <arnsholt> So essentially, we have to trap load errors on OS X and try an alternative before failing outright

[18:10] <flussence> even when it is implemented correctly :)

[18:11] * moritz added another paragraph to http://perlgeek.de/blog-en/perl-6/2012-stop-the-rewrites.html

[18:11] <diakopter> folks have very different definitions of usable. My bar for 'usable' is quite high, relative to how it's used around here usually.

[18:12] <GlitchMr> As for .innerHTML

[18:12] <moritz> right

[18:12] *** sergot joined
[18:12] <GlitchMr> It's not standard, it's Microsoft invention

[18:12] <GlitchMr> But it's way more usable than DOM

[18:12] <moritz> and saying outright that stuff is *not* usable is also wrong, because it deters people that might otherwise try it out, and like it

[18:12] <moritz> we need a balance.

[18:12] <[Coke]> we need better marketers and more tuits, clearly.

[18:13] <_sri> moritz: but i think a disclaimer like "you can play with it already, but not use it for production code yet" would go a long way

[18:14] <moritz> _sri: but some people do use it for production code, and are happy with it

[18:15] <_sri> we have very different definitions of production code i suppose

[18:15] <moritz> yes, and that's part of the problem

[18:16] <GlitchMr> Most of features are implemented

[18:16] <GlitchMr> The only real problem is performance

[18:17] <_sri> GlitchMr: strongly disagree

[18:17] <_sri> the I/O system is a mess

[18:17] <_sri> concurrency does not exist

[18:17] <diakopter> as I've said before, I think a good definition of used in production is: used in business activities or large-scale personal activities

[18:18] <GlitchMr> Concurrency is mostly for performance

[18:18] <moritz> and there you have it

[18:18] <moritz> people have totally different requirements

[18:20] <GlitchMr> https://github.com/mj41/Perl-6-GD/raw/master/export/Summary%20-%20Compilers'%20features%20-%20GoodData.png

[18:20] <GlitchMr> Well, 83% is good enough

[18:20] <[Coke]> it doesn't matter how many features we add, because we haven't got "basic" stuff like threads. It doesn't matter how elegant we are, because perl is crap anyway. Doesn't matter how fast we do it, because we should have been done already.

[18:21] <diakopter> GlitchMr: the remaining features are huge.

[18:22] <diakopter> natively typed variables, compact arrays are enormous requirements for just about everyone who does data processing, I claim

[18:24] <GlitchMr> JavaScript has those natively typed arrays

[18:24] <diakopter> [Coke]: why do the 2nd two statements go with the first one?

[18:25] <flussence> diakopter: all 3 go in a <sarcasm> tag? :)

[18:25] <_sri> looking at ruby, python and javascript, concurrency might be the feature that makes or breaks perl6

[18:26] <_sri> at least from a marketing point of view

[18:26] <moritz> aye, it could make a huge difference

[18:26] <[Coke]> from a makering POV, perl6 is already broken, I think.

[18:26] <GlitchMr> http://paste.uk.to/980163fe

[18:26] <[Coke]> *marketing

[18:27] <diakopter> well, javascript doesn't have multithreading, but the event loop (implemented through threads or otherwise) can be used for some sense of concurrency

[18:27] <GlitchMr> I wonder how hard it would be to implement something like this

[18:27] <_sri> [Coke]: not yet imo

[18:27] <geekosaur> massive uphill battle to fix the image, yes,I'm afraid :(

[18:27] <GlitchMr> Also, setTimeout(function () { }, 0)

[18:27] <GlitchMr> You have concurrency

[18:27] <_sri> [Coke]: people are very forgiving if you deliver something awesome in the end

[18:27] <[Coke]> _sri: YMMV. I get a lot of negative feedback about sixperl from my nerdy friends.

[18:27] <[Coke]> and perl in general.

[18:27] <diakopter> GlitchMr: that's not concurrency. NO javascript engine can utilize more than one CPU core.

[18:28] <GlitchMr> Well, I know

[18:28] <[Coke]> nerdy *acquaintances, that is.

[18:28] <geekosaur> perl in general, I think it gets a lot of crap because it's successful in a world where everyone wants Shiny New Hawtness

[18:28] <GlitchMr> But it's usually better than threading

[18:28] <[Coke]> +# 07/17/2012 - rakudo++ (22934); niecza (89.88%); pugs (40%)

[18:28] <[Coke]> +"niecza",     20615,     0,   737,  1472, 22824, 24361

[18:28] <[Coke]> +"pugs"  ,      9175,     1,  3378,  1693, 14247, 24222

[18:28] <[Coke]> +"rakudo",     22934,     6,   645,  1830, 25415, 24361

[18:28] <diakopter> GlitchMr: actually, I take that back, there are hacks of node/v8 that do strange things to enable parallelism

[18:29] <[Coke]> rakudo still has 6 failures.

[18:29] <geekosaur> in particular I sometimes wonder if there's some specific anti-perl evangelism rampant in the ruby community because that seems to be where a lot of it comes from... and rubyists also seem to engage in anti-evangelism for any project for which a ruby alternative is available

[18:29] <GlitchMr> Also, noed.js can use fork()

[18:29] <GlitchMr> node.js*

[18:29] <GlitchMr> I guess that fork() counts as concurrency

[18:30] <masak> [Coke]: I'm not sure there was a way to develop Perl 6 and not have a marketing failure along the way. the project was very ambitious from day one, and would take years no matter what. people had high expectations, and would be disappointed no matter what.

[18:30] <diakopter> GlitchMr: not if they don't share memory.

[18:30] *** tokuhiro_ left
[18:31] <diakopter> it was believed/promised to take less than a year

[18:31] *** tokuhiro_ joined
[18:31] <PerlJam> masak: there was a way to not have a marketing failure, but it may have ended up as a failure-failure

[18:31] <[Coke]> diakopter: who believed and or promised that?

[18:32] <PerlJam> masak: The way was "only talk about Perl 6 to the 'right' people" and not announce it until there was something more concrete.  That would have negatively impacted Perl 5 and Perl 6 though

[18:32] <diakopter> [Coke]: see page 16 of http://blob.perl.org/perlweb/dev/perl6/talks/2001/dconway-Perl6.pdf

[18:33] <PerlJam> masak: on the whole, the marketing failure was worth the innovations we got (in p5 and p6) IMHO

[18:33] <masak> PerlJam: the announcement of Perl 6 was public because it was the answer to "we need to do something to make people not walk away".

[18:33] <diakopter> "We expect to have alpha code a year from now, for

[18:33] <diakopter> some definition of 'alpha'."

[18:33] <diakopter> (page 20)

[18:33] <masak> PerlJam: agree about worth it.

[18:33] <masak> diakopter: whatever happened to the code that would've been that alpha code?

[18:34] *** Vlavv` left
[18:35] <_sri> PerlJam: i don't think the separation of the communities was worth it in the end

[18:35] *** tokuhiro_ left
[18:36] <PerlJam> _sri: I'm not sure how much stock to put into the "separation of communities" ... many of us have feet in both camps.

[18:36] <colomon> Anyone out there have an idea what a ===SORRY!=== No STable at index 8 error means in Rakudo?

[18:36] *** Vlavv_ joined
[18:37] <PerlJam> _sri: or ... this is when I get to say "you can't make an omelette without breaking some eggs"  :-)

[18:37] <_sri> now i'm hungry :S

[18:38] <sorear> colomon: that error is caused by Rakudo's compilation cache manager bugging out.  The workaround is to find and delete precompiled modules

[18:40] <PerlJam> _sri: What if, I drew analogy between Perl5/Perl6 and Catalyst/Mojolicious where you play Larry's part in the second one?

[18:40] <PerlJam> (would it make sense?  Would you accept that it was worth it?)

[18:40] <diakopter> masak: did you read the .pdf?

[18:40] <diakopter> (not accusing, just asking)

[18:41] <_sri> PerlJam: i would say that it was unfortunate things had to develop the way they did

[18:41] <PerlJam> _sri: okay, on that we can agree 100%

[18:42] <masak> diakopter: yes, last time you linked to it.

[18:42] <diakopter> oh; heh

[18:43] <diakopter> ...I'd forgotten...

[18:43] <masak> :/

[18:43] <masak> as to "separation of communities", I definitely self-identify as a sixer. but I feel quite at home with Perl 5, too. I wrote some earlier today.

[18:43] <diakopter> masak: to answer your question, I don't know precisely.. do you know?

[18:44] <colomon> sorear: did that, and it still happens.

[18:44] *** kaare__ joined
[18:44] *** kaare_ left
[18:46] <[Coke]> diakopter: huh. I've been working with parrot and perl 6 since 2001 and I never saw that document.

[18:47] <[Coke]> damian is definitely sending an unfortunate (in retrospect) message there.

[18:48] <diakopter> well, it was published in 2001..

[18:48] <PerlJam> [Coke]: Are you sure you hadn't seeen it but forgotten about it?  (I'm pretty sure that's what happened to me ;)

[18:49] <[Coke]> Disbelief is pretty much where a lot of the detractors I meet are these days. (page 23)

[18:49] <masak> diakopter: all I know is that eventually the Parrot people decided they needed a separate Perl 6 pumpking, pmichaud was brought in (in 2004), PGE was started, and the perl6-on-parrot effort did a full reboot and eventually got the name "Rakudo".

[18:49] <[Coke]>  PerlJam: is there anyway I can truthfully answer that I forgot it?

[18:49] <PerlJam> [Coke]: depends on how long you can remember your answer ;)

[18:50] <[Coke]> PerlJam: I am reasonably certain I have never read this document before now.

[18:50] <diakopter> masak: well yeah, but I thought there were several abortive/rewrite starts at VMs/implementations before parrot got situated

[18:50] <masak> diakopter: probably the Parrot git logs go far enough back to give some answers. I believe I did follow them back all the way once in search of the then Perl 6 implementation. but I don't remember much of what I found. it wasn't that much, though.

[18:51] <PerlJam> Feb 2001, Perl 6 was barely more than an idea with some momentum at that point.

[18:51] <masak> when did Parrot get started?

[18:51] <diakopter> The first release of Parrot, 0.0.1, was released in September 2001

[18:51] <masak> oldest Parrot commit is from 29 Aug 2001.

[18:52] <[Coke]> Wed Aug 29 11:36:49 2001 

[18:52] <masak> I think it's safe to assume there was no Perl 6 implementation before that.

[18:52] <[Coke]> and that post-dates the initial work simon did.

[18:52] <PerlJam> masak: Does Topaz count as a Perl 6 implementation?  :-)

[18:52] <masak> [Coke]: the, um, Sapphire one?

[18:52] <masak> PerlJam: no.

[18:53] <masak> PerlJam: it explicitly chose not to take the name Perl 6 until it got somewhere.

[18:53] <masak> it didn't get anywhere.

[18:53] <masak> (though it was probably a worthwhile experiment)

[18:53] <masak> 'The Topaz project, a rewrite of Perl 5 internals, was eventually abandoned. I asked Larry why, and he replied that "reimplementing insanity is insane". (Meaning "don't try to extend the Perl 5 internals into Perl 6".)' -- http://strangelyconsistent.org/blog/happy-10th-anniversary-perl-6

[18:53] <[Coke]> masak: chip was sapphire, I think.

[18:53] <masak> no, Chip was Topaz.

[18:54] <masak> same blog post.

[18:54] <PerlJam> http://www.perl.com/pub/2000/09/sapphire.html

[18:54] <[Coke]> I mean, I think simon worked on a bit before it got checked in at all

[18:54] <masak> also, <masak> chip left a comment on my blog the other day, to the effect that he called Topaz Topaz precisely so that it shouldn't taint the name 'Perl 6' with bad PR.

[18:56] <[Coke]> yah, dude, we already have that covered. ;)

[18:56] <masak> :P

[18:56] *** birdwindupbird left
[18:57] <masak> "Perl 6: making the Perl 5 guys look rather good at marketing."

[18:57] <PerlJam> those were the days when Bryan Warnock was a real person rather than just an expression

[18:58] <moritz> I'm pretty sure mr. Warnock is still a real person :-)

[18:58] <masak> I'm young enough in the community for "Warnock" to have a mythological ring to it.

[18:58] <masak> except when the newsletters were still being written and I read "Warnock applies" and thought it was this really prolific coder who just went around and applied commits whenever someone asked something :P

[18:59] <PerlJam> heh

[18:59] <masak> turns out, no.

[18:59] <rurban> Topaz was a C++ vtable hack.

[19:00] <rurban> To allow vtable calls change at run-time.

[19:02] *** jaldhar left
[19:07] *** daxim left
[19:10] *** GlitchMr left
[19:15] <masak> I found another bug in last year's game: 'examine flashlight' works even before the flashlight has been revealed in the car.

[19:17] * moritz has icreasing problems to keep 6ism out of p5 code

[19:18] <moritz> just wrote ... if $ENV<PROJECT_DEBUG>;

[19:21] *** kst left
[19:22] *** xinming left
[19:24] <arnsholt> I have troubles with the parens at times too

[19:25] <arnsholt> Haven't tried to do pointies for dereferencing yet though

[19:28] *** jaldhar joined
[19:29] <masak> why is the summary from Test.pm '# Looks like you failed 1 tests of 93'? why the uncertainty about whether I actually failed tests or not?

[19:29] <mauke> because 100% certainty doesn't exist

[19:30] * masak .oO( I'm sure it doesn't! )

[19:30] <felher> *lol*

[19:39] *** kaare__ left
[19:41] <moritz> quick question, what should a REST API return when a POST request failed to create a resource?

[19:41] *** jaldhar left
[19:42] <masak> 412 Precondition Failed, perhaps?

[19:43] <masak> but I would guess it depends a bit.

[19:43] <flussence> I usually go with 400, for lack of a more correct thing

[19:43] <flussence> if it's the client's fault, 4xx, server's fault, 5xx

[19:43] <jnthn> If the resource to create was coffee, then there's 418 I'm a teapot

[19:44] *** jaldhar joined
[19:46] <moritz> flussence: in general, I don't know if it's the client's or server's fault :(

[19:52] <masak> then 450 ;)

[19:52] <masak> or 900.

[19:52] <jnthn> moritz: But is there a "more likely" notion?

[19:53] <moritz> jnthn: more likely client side error

[19:53] <jnthn> moritz: Then I'd go with something in the 4xx.

[19:54] <jnthn> 400 bad request is pretty generic but many of the other options are quite specific.

[19:55] <moritz> jnthn: fwiw my toqast rakudo+nqp build still fails fatally on warnings

[19:55] <moritz> (latest nqp + rakudo)

[19:56] *** hoelzro|away is now known as hoelzro

[19:56] <hoelzro> hi Perl6 folk

[19:56] <masak> hi, hoelzro! \o

[19:57] <hoelzro> o/

[19:57] <hoelzro> I think I found another bug =/

[19:57] <dalek> rakudo/toqast: f0832bc | jnthn++ | src/QPerl6/Actions.pm:

[19:57] <dalek> rakudo/toqast: Smartmatching can use a local, not lexical, for temporary.

[19:57] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/f0832bcb9a

[19:57] <dalek> rakudo/toqast: fb3a4b0 | jnthn++ | src/QPerl6/Actions.pm:

[19:57] <dalek> rakudo/toqast: Fix whatever curry analysis up, so we don't regress in any of the whatever tests now. Also this probably gets meta-ops righter than before.

[19:57] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/fb3a4b01be

[19:57] <jnthn> moritz: How can I reproduce?

[19:57] <hoelzro> https://gist.github.com/3131624

[19:57] <hoelzro> that program crashes with a fun error message on Rakudo Star 2012.06

[19:57] <jnthn> moritz: warn 'foo'; say 42 # says foo\n42\n

[19:58] *** [Coke]_ joined
[19:58] *** mathw_ joined
[19:58] <moritz> jnthn: my parrot is RELEASE_4_5_0-111-g96d2ffd, what's yours?

[19:58] *** telex_ joined
[19:58] *** patspam_ joined
[19:58] *** crab2313 left
[19:58] *** lue left
[19:58] *** patspam left
[19:58] *** telex left
[19:58] *** Pleiades` left
[19:58] *** cosimo left
[19:58] *** risou left
[19:58] *** risou_ joined
[19:59] <jnthn> moritz: -V gives "This is Parrot version 4.5.0-devel"

[19:59] <moritz> $ ./qperl6 -e '+"foo"; say 42'

[19:59] <moritz> 42

[19:59] *** cosimo joined
[19:59] <moritz> jnthn: git describe --tags in the parrot repo

[19:59] <moritz> $ ./qperl6 -e '+Any; say 42'

[19:59] <moritz> use of uninitialized value of type Any in numeric contextNo such method 'message' for invocant of type 'Any'

[19:59] <jnthn> moritz: RELEASE_4_5_0

[19:59] <moritz> then a backtrace, and no 42

[19:59] *** Pleiades` joined
[19:59] <moritz> jnthn: I'll try that one then

[20:00] <jnthn> moritz: odd, I just tried that qperl6 -e "+Any; say 42" and it comes out with the 42 also.

[20:01] *** crab2313 joined
[20:02] <jnthn> hoelzro: What's the error?

[20:03] *** pyrimidine is now known as deafleppard

[20:03] *** rnddim joined
[20:03] *** teee left
[20:03] <moritz> star: https://gist.github.com/3131624

[20:03] <p6eval> star 2012.06: OUTPUT«Cannot locate native library 'libsqlite3.so'␤  in method postcircumfix:<( )> at /home/p6eval/star/lib/parrot/4.5.0/languages/perl6/lib/NativeCall.pm6:102␤  in <anon> at src/gen/BOOTSTRAP.pm:811␤  in any <anon> at src/gen/BOOTSTRAP.pm:807␤  in method connect at /home…

[20:04] *** deafleppard is now known as pyrimidine

[20:06] <hoelzro> jnthn: I just commented on my gist with the error message and trace

[20:06] *** birdwindupbird joined
[20:07] <jnthn> hoelzro: Thanks.

[20:08] <hoelzro> I'm compiling Rakudo Star + Parrot with debugging on to see if that sheds some light on the subject

[20:10] <masak> hoelzro++

[20:16] <moritz> jnthn: still the same with parrot 4.5.0

[20:17] <jnthn> moritz: Very odd.

[20:17] <jnthn> moritz: You're using the qperl6 executable?

[20:17] <moritz> jnthn: yes

[20:18] <jnthn> oh...

[20:18] <jnthn> I think I just reproduced it.

[20:18] <jnthn> oh, but the perl6 executable does the same.

[20:19] <jnthn> It's not just that CORE.setting my branch lags behind the one in master a bit?

[20:19] <jnthn> *in

[20:19] <moritz> oh, that might be

[20:19] <jnthn> moritz: It lags by some way

[20:19] <jnthn> moritz: And merging isn't very convenient for me.

[20:21] <moritz> jnthn: what about cherry-picking a few commits that fix that?

[20:23] <jnthn> moritz: Guess that's possible.

[20:23] <jnthn> moritz: Is it breaking many tests, though?

[20:23] *** brrt joined
[20:23] <jnthn> Oh, maybe my spectests are quite old too :)

[20:24] <moritz> jnthn: I think so, yes

[20:25] <moritz> jnthn: 'git diff 53fc0ae 50774a3' is the patch I'd like to cherry-pick

[20:25] <moritz> it's actually a mini branch

[20:26] <jnthn> moritz: That should be fine.

[20:29] <moritz> jnthn: I'll spectest with and without and see what the difference is

[20:34] <hoelzro> I'm guessing that this is related to NativeCall

[20:35] <moritz> Files=682, Tests=21973, 854 wallclock secs # toqast with ICU

[20:36] <moritz> and t/spec/S05-modifier/counted-match.rakudo loops, 'cause it misses some setting patches by pmichaud++

[20:37] <hoelzro> is there a way to force the GC to run in Rakudo?

[20:38] <jnthn> moritz: Hmm, the [Coke] number for mater earlier was 22934...is that the right number?

[20:39] <jnthn> moritz: If so that'd seem to suggest the difference is now < 1000 tests.

[20:39] <moritz> hoelzro: pir::gcdebug__vI(1); 1 + 1; pir::gcdebug__vI(0)

[20:39] <moritz> hoelzro: untested

[20:40] <moritz> r: pir::gcdebug__vI(1); 1 + 1; pir::gcdebug__vI(0); say 'alive'

[20:40] <p6eval> rakudo 1fe39c: OUTPUT«use of uninitialized value of type Mu in string context  in any <anon> at src/gen/BOOTSTRAP.pm:104␤␤use of uninitialized value of type Mu in string context  in any <anon> at src/gen/BOOTSTRAP.pm:104␤␤===SORRY!===␤error:imcc:syntax error, unexpected IREG, expecting …

[20:40] <hoelzro> also, is there a way to print the PMC location in memory for an object?

[20:40] <jnthn> hoelzro: .WHERE

[20:40] <moritz> r: pir::gc_debug__vI(1); 1 + 1; pir::gc_debug__vI(0); say 'alive'

[20:40] <p6eval> rakudo 1fe39c: OUTPUT«alive␤»

[20:40] <moritz> with underscore

[20:41] <hoelzro> damn, that doesn't trigger the error

[20:51] <hoelzro> this one is sans DBIish: https://gist.github.com/3131993

[20:58] <masak> lol, I blog'd! \o/ http://strangelyconsistent.org/blog/july-17-2012-getting-things-from-the-car

[20:59] *** kst joined
[20:59] *** simplx joined
[21:02] *** birdwindupbird left
[21:03] *** sirrobert joined
[21:04] *** kst left
[21:04] <sirrobert> how can I access a class property whose name is contained within a variable?  e.g. ...

[21:05] <sirrobert> class A { has $!foo; method speak () { my $bar = 'foo'; say $!$bar; } }

[21:05] <masak> r: class A { method foo { say "OH HAI" } }; my $method = "foo"; A.new."$method"()

[21:05] <p6eval> rakudo 1fe39c: OUTPUT«OH HAI␤»

[21:05] <masak> like that.

[21:05] <sirrobert> from within the class, though

[21:05] <masak> same.

[21:06] <masak> oh, an attribute.

[21:06] <sirrobert> yeah

[21:06] <masak> not a method.

[21:06] <masak> no, not without MOP.

[21:06] <sirrobert> hmm

[21:06] <sirrobert> ok, I can unDRY my code, then =)

[21:06] <masak> r: class A { has $!foo }; say A.^attributes

[21:06] <p6eval> rakudo 1fe39c: OUTPUT«$!foo␤»

[21:06] * jnthn wonders "why"

[21:06] <jnthn> :)

[21:07] <felher> masak++ #blogpost / crypt hacking

[21:07] *** hoelzro is now known as hoelzro|away

[21:08] <masak> \o/

[21:08] <jnthn> (It's hard to give a good answer without a little more context.)

[21:08] <sirrobert> jnthn:  the output of a Str() function varies depending on a few considerations.  method Str() { if $!.a eq any(<foo bar baz>) { return "$!{$.a} is fun!"} }

[21:09] <sirrobert> $!foo $!bar and $!baz are all proeprties of the class

[21:09] <sirrobert> (err class properties =)

[21:09] <sirrobert> thanks, masak -- looking at MOP stuffs now

[21:09] <arnsholt> jnthn: I'm pretty close to having callbacks in a state where I can start testing things, if you were curious

[21:09] <jnthn> arnsholt: oooh!

[21:09] <jnthn> arnsholt: Awesome progress.

[21:10] <arnsholt> Annoyingly, the marshalling code is almost but not quite possible to share between invocation and callbacks

[21:10] <arnsholt> But that's life I guess =)

[21:11] <sirrobert> I *love* that hyphens can be used in variable names, btw.  

[21:12] *** kst joined
[21:12] <masak> it's not so bad.

[21:13] <arnsholt> jnthn: BTW, is there a standard way of getting at PARROT_INTERP without getting it passed as an argument?

[21:13] <masak> kst: welcome back :)

[21:13] <masak> long time no see.

[21:13] <arnsholt> I need the interp object to do some operations in the callback handler, so ATM the interp from the call is passed in the userdata, but that feels a bit wrong

[21:14] <arnsholt> Also, smells like it could explode hilariously if we ever get threads and several interpreters in the mix

[21:16] <jnthn> arnsholt: arnsholt What operations, ooc?

[21:16] <jnthn> arnsholt: Agree it's a whole loads of fun if the interp could be running, though, rather than in a "waiting" state...

[21:17] <arnsholt> Lemme check. Can't remember off-hand

[21:18] <jnthn> arnsholt: Parrot has some *very* restricted (signature wise) callback handling that worked at some point and may still function somewhat. It could be interesting to look at for how it handles the interp, but it looks like it stashes it like you are. src/interp/inter_cb.c is the place to look.

[21:18] <arnsholt> jnthn: The marshaling operations (make_*_result) need interp, also setting up and invoking the sub call

[21:19] <jnthn> OK, that's the things I expected. 

[21:20] <arnsholt> Cool

[21:20] *** brrt left
[21:21] <arnsholt> As an aside, it's a bit annoying that the generated _ops.c file doesn't get #line annotations

[21:22] *** brrt joined
[21:24] <moritz> iirc there's a configure option to emit those, but it's not very reliable

[21:24] *** skids left
[21:25] *** vmspb left
[21:25] <arnsholt> Ah, right. That explains why it's not standard

[21:26] <arnsholt> Anyways, the proper fix for my annoyance would be to fix the ops code so that compilation doesn't result in five pages of warnings =)

[21:27] <moritz> nqp.ops?

[21:28] <arnsholt> nqp_dyncall.ops in my case

[21:28] *** fgomez left
[21:29] *** fgomez joined
[21:32] <moritz> nqp_dyncall_ops.c:119:8: warning: no previous prototype for ‘get_nc_repr_id’ [-Wmissing-prototypes]

[21:32] <moritz> does that mean that function should either be in a header file, or 'static'?

[21:34] <arnsholt> Yeah, it means I've forgotten to add the header file to nqp_dyncall.ops

[21:34] <moritz> it's not in any header file, it's just defined in the .ops file

[21:34] <moritz> and used nowhere else

[21:34] <moritz> so should be static

[21:34] <arnsholt> Oh

[21:35] <arnsholt> Yeah, probably

[21:35] <moritz> I'll try to remove some of those warnings

[21:35] <arnsholt> I just unstaticed it along with the other get_*_repr_id functions probably

[21:35] <arnsholt> The others were necessary for structs in structs and such

[21:35] <arnsholt> Or you could add it to the appropriate header file, for symmetry

[21:36] <arnsholt> I suspect it'll be necessary for handling callback functions sent from C to Perl

[21:36] <moritz> ok, header file then

[21:37] <arnsholt> Anyways, thanks for the help. It's one of those things that're on my list but other things keep being more interesting =)

[21:37] <arnsholt> moritz++

[21:39] <moritz> so the prototype for make_cstruct_result goes into ../6model/reprs/CStr.h, right?

[21:39] <arnsholt> No, that feels wrong I think

[21:40] <moritz> or should we have a separate nqp_dyncall.h?

[21:40] <jnthn> The latter sounds more like it.

[21:40] <jnthn> We could even more some stuff out of the ops file into a separate .c file if it helps/is cleaner.

[21:40] <jnthn> The Rakudo binder is bundled in like that for example.

[21:41] <arnsholt> make_cstruct_result is prototyped in src/6model/reprs/dyncall_reprs.h

[21:41] <moritz> oh

[21:41] <jnthn> ah, I guess that's OK too

[21:41] <arnsholt> But yeah, what jnthn suggests might be cleaner, actually

[21:42] <arnsholt> Dunno

[21:42] <dalek> nqp: af917c3 | moritz++ | src/ops/nqp_dyncall.ops:

[21:42] <dalek> nqp: include a header file to avoid some warnings

[21:42] <dalek> nqp: review: https://github.com/perl6/nqp/commit/af917c3be1

[21:45] *** brrt left
[21:49] <sergot> good night o/

[21:49] *** sergot left
[21:51] <masak> dobranoc, o sergocie.

[21:51] <dalek> nqp: 1950d07 | moritz++ | src/6model/reprs/NativeCall.h:

[21:51] <dalek> nqp: be more specific about type of NativeCallBody.lib_handle -- avoids a few more compiler warnings

[21:51] <dalek> nqp: review: https://github.com/perl6/nqp/commit/1950d07dca

[22:01] *** rnddim is now known as __rnddim__

[22:01] <dalek> nqp: fffa108 | moritz++ | src/ (2 files):

[22:01] <dalek> nqp: avoid more warnings in C code

[22:01] <dalek> nqp: review: https://github.com/perl6/nqp/commit/fffa108a11

[22:01] *** __rnddim__ is now known as lue

[22:02] <moritz> I have no idea what to do about the -Wstrict-aliasing stuff

[22:03] *** gfldex left
[22:03] <mauke> what are the warnings?

[22:04] <moritz> warning: dereferencing type-punned pointer might break strict-aliasing rules [-Wstrict-aliasing]

[22:04] <mauke> for what code?

[22:04] <moritz> CStructBody     *body      = (CStructBody *) OBJECT_BODY(obj)

[22:05] *** orafu left
[22:05] <mauke> yeah, well ... don't do that then? :-)

[22:05] *** gfldex joined
[22:06] *** orafu joined
[22:06] <moritz> what should i do instead?

[22:07] <mauke> what are you trying to achieve?

[22:07] <moritz> clear up compiler warnings in src/ops/nqp_dyncall.ops

[22:07] <mauke> remove -Wstrict-aliasing

[22:07] <mauke> or compile with 2>/dev/null

[22:08] <moritz> well, removing warnings is non-trivial, since they are inherited from parrot's configure

[22:09] <arnsholt> I'm not sure that particular warning is avoidable

[22:09] <mauke> it is trivially avoidable by redirect stderr to /dev/null

[22:10] <mauke> however, that is not what you're trying to achieve

[22:10] <mauke> if you're sane

[22:10] <arnsholt> Yeah

[22:10] <arnsholt> The goal is clearing up the compile output so that it's not pages and pages of warnings

[22:10] <mauke> wrong

[22:10] <mauke> the goal is working code

[22:11] <benabik> Pages of warnings make it difficult to notice errors.  Optimize for programmer happiness.

[22:11] <mauke> the compiler is telling "hey, your code is shit and I'm going to murder it to death"

[22:11] <mauke> those warnings are errors

[22:11] <arnsholt> Working code is nice too, true. But the proximal goal here is just to make it easier to find errors

[22:11] <mauke> er, *telling you

[22:11] <mauke> this is an error

[22:12] <arnsholt> moritz: If you're looking for LHF, I think there are a bunch of switches with no default that get duplicated several times in the ops section

[22:12] *** orafu left
[22:12] *** benabik left
[22:13] *** benabik joined
[22:14] <moritz> arnsholt: and what's the correct default? an "internal error" exception?

[22:15] *** orafu joined
[22:15] <arnsholt> Yeah, probably

[22:16] *** MayDaniel left
[22:20] <mauke> if you can't fix the broken code, -fno-strict-aliasing is a workaround

[22:26] <dalek> nqp: cbc33cd | moritz++ | src/ops/nqp_dyncall.ops:

[22:26] <dalek> nqp: avoid more compiler warnings

[22:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/cbc33cda0f

[22:27] <moritz> arnsholt: I didn't get rid of all those warnings, because dyncall_wb_cs has no access to interp, so I can't throw an exception

[22:27] <sorear> passport application complete

[22:30] <masak> 'night, #perl6

[22:30] <sorear> 'night, masak

[22:33] <dalek> rakudo/toqast: 574a8fa | moritz++ | src/core/Backtrace.pm:

[22:33] <dalek> rakudo/toqast: Merge branch 'ex-hardening' into toquast

[22:33] <dalek> rakudo/toqast: 

[22:33] <dalek> rakudo/toqast: (Actually a cherry pick, not a merge. Makes warnings non-fatal again)

[22:33] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/574a8fa0da

[22:34] <moritz> that's another 1.5k tests for me

[22:46] *** prettyrobots left
[22:52] *** prettyrobots joined
[23:00] *** PacoAir left
[23:18] *** Ex joined
[23:28] *** seldon left
[23:37] *** cenuij2 joined
[23:46] <[Coke]_> (warnings) I have access to update parrot's warning code. if it makes sense to add more warnings or eliminate old warnings, lemme know.

[23:48] *** [Coke]_ is now known as [Coke]

[23:52] *** skids joined
[23:56] *** zhutingting joined
[23:59] *** Chillance left
[23:59] *** nodmonkey left
