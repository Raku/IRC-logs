[00:00] *** alec left
[00:07] <timotimo> i was just made aware of the "secret perl operators" page and am amused/bewildered

[00:08] <arnsholt> Hehe. Several of them aren't operators, but there are some neat tricks around ^_^

[00:08] <timotimo> yes, indeed

[00:09] <timotimo> i'm amused because i know how the eskimo greeting operator works

[00:10] <arnsholt> The joys of #perl6 (and macros =D)

[00:12] <timotimo> are there crazy combinations like those in perl6 already?

[00:13] <arnsholt> Well, there are hyperops =)

[00:13] <arnsholt> And metaops

[00:13] <timotimo> those are straightforward, kind of.

[00:14] <arnsholt> In a way, yeah

[00:15] <timotimo> did you see how =()= desugars?

[00:17] *** rummik left
[00:17] *** rummik joined
[00:18] <arnsholt> Yeah, it's neat

[00:19] <timotimo> opaque is what i'd call it :)

[00:19] <timotimo> gives perl its reputation i'd say :P

[00:19] *** lorn left
[00:19] <spider-mario> it seems that rakudo‚Äôs debugger fails to build on my machine

[00:20] <spider-mario> Missing or wrong version of dependency 'src/stage2/QRegex.nqp'

[00:20] <spider-mario> http://paste.awesom.eu/eGJ

[00:20] <timotimo> did you make sure to make install your nqp?

[00:21] *** rking left
[00:21] <spider-mario> yes, I did

[00:22] *** lorn joined
[00:22] *** whiteknight joined
[00:24] *** pmurias left
[00:25] *** rking joined
[00:28] *** spider-mario left
[00:30] <timotimo> someone just competently explained the the goatse operator

[00:33] <timotimo> i think i can make a lightning talk about perl6 equivalents of the horrible abominations that are the secret perl operators

[00:33] <colomon> +1

[00:34] <timotimo> would anyone be ready to help me?

[00:36] <tadzik> sure

[00:36] <timotimo> great

[00:38] <timotimo> i think the first slide will be: "forcing contexts is now simple"

[00:39] <skids> Not sure the eskimo op is germain, maybe use it to introduce phasers (and the less sleazy perl5 one-liner uses END{})

[00:43] *** PacoAir_ joined
[00:43] *** PacoAir left
[00:43] *** PacoAir_ is now known as PacoAir

[00:45] <grondilu> rn:  sub prefix:<‚ôÄ> { 0 + $^x }; say ‚ôÄ43

[00:45] <p6eval> rakudo 930369, niecza v24-12-g8e50362: OUTPUT¬´43‚ê§¬ª

[00:45] *** PacoAir left
[00:46] *** PacoAir joined
[01:14] <timotimo> grondilu: tgat's excellent

[01:33] *** thou left
[01:33] <skids> r: print "\c[ARABIC LETTER HEH GOAL] inchworm!"

[01:33] <p6eval> rakudo 930369: OUTPUT¬´€Å inchworm!¬ª

[01:37] <skids> r: print "\c[ARABIC LETTER HEH GOAL WITH HAMZA ABOVE] angry inchworm!"

[01:37] <p6eval> rakudo 930369: OUTPUT¬´€Ç angry inchworm!¬ª

[01:56] <timotimo> will not get a spot for the lightning talk tomorrow, i believe.

[01:59] *** fgomez joined
[02:26] *** labster left
[02:28] *** slayer101_ joined
[02:42] *** FROGGS_ joined
[02:46] *** FROGGS left
[02:52] *** fgomez left
[02:54] *** fgomez joined
[03:05] *** orafu left
[03:05] *** orafu joined
[03:15] *** slayer101_ left
[03:17] *** slayer101_ joined
[03:29] *** PacoAir left
[04:02] *** alec_ joined
[04:03] <alec_> if i want to read in some strings and turn them into urls, what's a good way to do that?

[04:03] <alec_> for instance, the urls look like:

[04:03] <alec_> www.uniprot.org/uniprot/XXXXXX.fasta

[04:04] <alec_> i'm completely new to perl; i'd never wanted to use it until i saw perl6

[04:04] <alec_> i tried:

[04:04] <sorear> mm, FASTA

[04:05] <alec_> my $urlbase = "http://www.uniprot.org/uniprot"; my $id = "B5ZC00"; my $ext = ".fasta"; shell('wget $urlbase$id$ext')

[04:05] <alec_> but that didn't work of course

[04:06] <sorear> $url isn't interpreted in single quotes

[04:06] <japhb> alec_, you're missing a slash.

[04:06] <sorear> single quotes suppress most magical behavior

[04:06] <japhb> shell("wget $urlbase/$id.$ext");

[04:07] <sorear> "wget $url$base$id$ext" will work better

[04:07] <alec_> yeah, i knew that, sorear, but i'm just a bit shaky with the whole thing

[04:07] <alec_> ok

[04:07] <alec_> double quotes

[04:07] <alec_> true, japhb

[04:07] <japhb> Punctuation. We haz it.  :-)

[04:07] <alec_> ok

[04:08] <alec_> great, works fine

[04:08] <alec_> thank you

[04:08] <japhb> np

[04:09] * japhb is teaching his eldest some Perl 6  :-)

[04:09] *** whiteknight left
[04:20] <alec_> how old is your eldest, japhb?

[04:23] <japhb> 9

[04:24] *** labster joined
[04:30] <alec_> does rx/^^ just mean 'here's a regex?'

[04:35] <flussence> pretty much

[04:36] <alec_> ok

[04:36] <alec_> having trouble figuring out what Num.new does in this line:

[04:37] <alec_> take Num.new: 100*$dna.comb.grep(any(<G C>)).elems / $dna.chars;

[04:38] <alec_> i know what the code's doing, i just don't know how it does it

[04:38] <alec_> i don't really understand take

[04:38] <alec_> it's used two lines up in the same code like this:

[04:38] <sorear> alec_: rx/^^ means "regex anchored to the begining of the line"

[04:38] <alec_> { take ~.[0];

[04:38] <alec_> ok, sorear, thank you

[04:39] <alec_> why two ^'s?

[04:39] <sorear> because one ^ anchors to the beginning of the string

[04:39] <alec_> ahh

[04:39] <alec_> ok

[04:39] <sorear> ^ is more commonly used, so it gets to be shorter

[04:40] <alec_> yes

[04:40] <alec_> makes sense to me

[04:42] *** quester joined
[04:57] <skids> r: my $d = 1/2; $d.WHAT.say; Num.new($d).WHAT.say; # it ensures the result is coerced to Num rather than Rat

[04:57] <p6eval> rakudo 930369: OUTPUT¬´Rat()‚ê§Num()‚ê§¬ª

[04:58] *** am0c joined
[04:58] <alec_> i think i see, skids

[04:58] <skids> (And actually just Num() works, but is not a method, so Num.new allows the colon listform arguments)

[04:59] <alec_> ok

[04:59] <alec_> but in the line:

[04:59] <alec_> take Num.new: 100*$dna.comb.grep(any(<G C>)).elems / $dna.chars;

[04:59] <alec_> why is there a colon after take? is that standard?

[04:59] <alec_> er, after Num.new?

[05:00] <skids> It's the listform method arguments.  You can say Obj.method: <args> instead of Obj.method(<args>).  It eliminates a set of parens so some people like it that way.

[05:01] <skids> It makes mnemonic sense given in signatures, an invocant is followed by colon.

[05:05] <alec_> ok, thanks skids

[05:05] <alec_> the lights are starting to go on now

[05:10] <alec_> what exactly does this match?

[05:10] <alec_> (<[\nAGCT]>*)

[05:10] <alec_> what do the < > do? and the *?

[05:11] <alec_> it's roughly the same as [AGCT]+ right?

[05:13] <sorear> <> are not separate tokens

[05:13] <sorear> <[ and ]> are one unit

[05:13] <sorear> <[\nAGCT]> matches a newline, A, G, C, or T

[05:13] <sorear> <[\nAGCT]>* matches zero or more of the above

[05:13] <alec_> ok

[05:14] <sorear> (<[\nAGCT]>*) matches the same, but stores a copy into the next $0, $1, ...

[05:14] <alec_> ahh, ok

[05:36] <Woodi> morning # :)

[05:36] <Woodi> Util: no, I do not want 3D text editor :)

[05:39] <Woodi> Util: maybe programming environment to do 3D code-objects visualisation and manipulation... I have only spark of idea...

[05:41] <Woodi> Util: but to be less theoretical: on your 3D holographic personal display you want to do programming - visualising code as plain paper sheet will be waste of "pixels" :)

[05:46] <Woodi> Util: anyway, maybe it can have more sense in modyfing *complicated* code at runtime in multithread or "multistream" configurations (let say you cannot restart it)... future will come! :) 

[05:48] *** TreyRust left
[05:49] *** thou joined
[05:54] *** jokar joined
[05:55] *** kaare_ joined
[05:57] <Woodi> btw. I read somewhere "describing idea prevents patenting it later by someone" - it works ? :)

[06:01] <alec_> what does take ~.[0] mean?

[06:04] *** Chillance left
[06:07] <Timbus> it means take(  $_.[0].Str )

[06:09] <alec_> ok

[06:13] <raiph> alec_: do you understand each of these? take; [pre|in|post|circum|postcircum] fix; ~; the postcircumfix .[]; .Str; $_ ?

[06:14] <alec_> i understand $_ up to a point, but all of them are a bit hazy

[06:14] <alec_> i've just basically decided to learn perl6 from scratch; i have no previous experience with perl

[06:14] <Timbus> oh

[06:15] <alec_> i'm trying to learn how to use take and gather because they seem useful

[06:17] *** jokar left
[06:18] *** am0c left
[06:18] <raiph> i pretty much view $_  as the same as "it" in English.

[06:18] *** am0c joined
[06:18] <alec_> yes, i can see how that's true

[06:18] <alec_> it's a bit pronounish

[06:19] <raiph> right. otherwise known in p6 speak as "the topic"

[06:19] <alec_> ok

[06:19] <raiph> given <a b> say $_

[06:19] <raiph> nr: given <a b> say $_

[06:20] <p6eval> rakudo 930369: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Missing block‚ê§at /tmp/By1QhEqct7:1‚ê§------> [32mgiven <a b> [33m‚èè[31msay $_[0m‚ê§    expecting any of:‚ê§        postfix‚ê§        infix or meta-infix‚ê§        infix stopper‚ê§        parameterized block‚ê§¬ª

[06:20] <p6eval> ..niecza v24-12-g8e50362: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Missing block at /tmp/Oczy91yro7 line 1:‚ê§------> [32mgiven <a b> [33m‚èè[31msay $_[0m‚ê§‚ê§Parse failed‚ê§‚ê§¬ª

[06:20] <raiph> nr: say $_ given <a b>

[06:20] <p6eval> rakudo 930369, niecza v24-12-g8e50362: OUTPUT¬´a b‚ê§¬ª

[06:20] <alec_> ...i can't seem to write a valid regex for strings like 0484ABU_494BT... i'm using (<[A..Z0..9_]>*)

[06:22] <Timbus> .say for gather given <a b> { take $_ }

[06:22] <Timbus> r: .say for gather given <a b> { take $_ }

[06:22] <p6eval> rakudo 930369: OUTPUT¬´a‚ê§b‚ê§¬ª

[06:22] <Timbus> heh.

[06:22] <alec_> nice

[06:22] <alec_> why .say?

[06:22] <Timbus> because im calling it on $_  :P

[06:22] <alec_> ok

[06:23] <raiph> Obj.method is a method call

[06:23] <Timbus> im being confusing on purpose fyi. you sort of have to learn all of the building blocks of the language to see what it is doing

[06:24] <raiph> if you omit the Obj, p6 assumes you mean to apply the method to "it"

[06:24] <alec_> yes, i can see that now raiph

[06:25] <alec_> can anyone figure out why that regex isn't matching? or doesn't seem to be?

[06:25] <raiph> r: say "0484ABU_494BT" ~~ /<[A..Z0..9_]>*/

[06:25] <p6eval> rakudo 930369: OUTPUT¬´ÔΩ¢0484ABU_494BTÔΩ£‚ê§‚ê§¬ª

[06:25] <skids> r: my $g; my $d; $g = gather do { $d = (take(1), 2, take(3), take(4))}; $g.say; $d.say; # simple gather/do example, which does not show laziness

[06:25] <p6eval> rakudo 930369: OUTPUT¬´1 3 4‚ê§1 2 3 4‚ê§¬ª

[06:26] <raiph> what is making you think it doesn't match?

[06:26] <alec_> dunno raiph maybe i'm just using gather wrong... i'm using it with gather

[06:27] <alec_> my %hashtable = gather for $s.match ( rx/^^ (<[A..Z0..9_>*) \n /, :g) { take ...

[06:29] <raiph> alec: do you know what a pastebin or similar is? 

[06:29] <alec_> yes, i can pastebin it

[06:32] *** am0c left
[06:33] <alec_> www.pastebin.com/s0faD7hE

[06:33] <skids> r: my %hashtable = gather for "0484ABU_494BT\nOHAI\n".match( rx/^^ (<[A..Z0..9_]>*) \n /, :g) { take ($_.from => ~$_) }; %hashtable.gist.say

[06:33] <p6eval> rakudo 930369: OUTPUT¬´("0" => "0484ABU_494BT\n", "14" => "OHAI\n").hash‚ê§¬ª

[06:33] <alec_> nice

[06:34] <alec_> i will remember %hashtable.gist.say

[06:36] <raiph> alec_: you know what "gist" (as an English word) means, right?

[06:37] <alec_> yes

[06:38] <alec_> english is my native tongue

[06:38] <Timbus> i dont really know, but i get the general, core, underling meaning of the word :p

[06:38] <alec_> lol

[06:38] <alec_> the gist of it

[06:39] <skids> alec: You are up late. :-)

[06:39] <alec_> 12:39, so sorta late

[06:39] <raiph> Timbus: lol 

[06:39] <alec_> where are you, skids?

[06:39] *** yeltzooo joined
[06:40] <raiph> 1:39am here (New Hampshire, US)

[06:40] <skids> alec: MA

[06:41] <skids> So I am up later.

[06:43] <alec_> gotcha

[06:44] *** am0c joined
[06:46] <raiph> r: my $h = gather for "A2Z669\nB5ZC00\n".match( rx/^^ (<[_A..Z0..9]>*) \n /, :g ) { take $_ }; say $h

[06:46] <p6eval> rakudo 930369: OUTPUT¬´A2Z669‚ê§ B5ZC00‚ê§‚ê§¬ª

[06:47] *** dalek joined
[06:47] *** ChanServ sets mode: +v dalek

[06:54] *** SamuraiJack joined
[07:01] *** Bucciarati joined
[07:05] *** Ayiko left
[07:06] *** Ayiko joined
[07:07] *** BooK joined
[07:12] *** slayer101_ left
[07:18] *** slayer101_ joined
[07:24] *** thou left
[07:29] *** kaare_ left
[07:33] *** raiph left
[07:38] *** slayer101_ left
[08:16] <moritz> \o

[08:17] <dalek> roast: e225c9d | moritz++ | S32-exceptions/misc.t:

[08:17] <dalek> roast: test X::Obsolete error for s///i

[08:17] <dalek> roast: review: https://github.com/perl6/roast/commit/e225c9d826

[08:22] *** quester left
[08:46] *** rindolf joined
[08:53] <FROGGS_> morning moritz 

[08:54] *** FROGGS_ is now known as FROGGS

[09:03] <tadzik> good morning #perl6

[09:03] <FROGGS> morning tadzik 

[09:03] <phenny> FROGGS: 28 Dec 23:02Z <jnthn> tell FROGGS the reason you get odd results is probably 'cus it looks like you add the other proto to the candidate list, rather than the other proto's dispatchees.

[09:03] <phenny> FROGGS: 28 Dec 23:03Z <jnthn> tell FROGGS also you should only do this auto-merging for onlystar dispathcers; real competition to "own the proto" is a problem, I suspect.

[09:04] <rindolf> Good morning everybody.

[09:11] *** denisboyun_ joined
[09:11] *** rindolf left
[09:11] *** rindolf joined
[09:16] *** GlitchMr joined
[09:16] *** GlitchMr left
[09:17] *** GlitchMr joined
[09:18] *** am0c left
[09:19] *** PacoAir joined
[09:23] *** rindolf left
[09:23] *** rindolf joined
[09:30] * alec_ bows to grondilu

[09:30] <alec_> i finally finished solving rosalind/mprt

[09:30] <alec_> grondilu, your solution is elegant; code like that is the whole reason i want to learn this language

[09:33] <alec_> it's weird because i had a dream about a year ago about perl being a good language for bioinformatics

[09:35] *** rindolf left
[09:35] *** rindolf joined
[09:36] *** Kharec joined
[09:39] *** spider-mario joined
[09:42] *** Psyche^ joined
[09:45] *** Patterner left
[09:45] *** rindolf left
[09:45] *** Psyche^ is now known as Patterner

[09:46] *** denisboyun_ left
[09:46] *** rindolf joined
[09:48] *** alec_ left
[09:50] *** alec_ joined
[09:50] *** alec_ left
[09:53] *** denisboyun_ joined
[09:55] *** kivutar joined
[09:59] *** labster left
[10:00] *** rindolf left
[10:01] *** rindolf joined
[10:07] *** GlitchMr_ joined
[10:08] *** GlitchMr left
[10:08] *** rindolf left
[10:09] *** rindolf joined
[10:18] *** rindolf left
[10:18] *** rindolf joined
[10:23] *** spider-mario left
[10:36] *** denisboyun_ left
[10:38] <masak> good morrow, #perl6

[10:38] <masak> time to close up p6cc2012 registration :)

[10:40] *** rindolf left
[10:41] *** rindolf joined
[10:45] *** denisboyun_ joined
[10:48] <masak> hm, seems I don't usually blog on registration closing, I just assume people will stop registering.

[10:49] <masak> very well. people, stop signing up! :P

[10:55] *** rindolf left
[10:55] *** rindolf joined
[10:56] <[Coke]> good morning!

[10:56] *** rindolf left
[10:56] <[Coke]> or rather, good night. Time to finally go to bed.

[10:56] *** rindolf joined
[10:58] <masak> :)

[11:23] *** rindolf left
[11:31] <GlitchMr_> I guess that loop { } in Perl 6 is defined behavior, unlike C++

[11:33] *** rindolf joined
[11:37] <Ayiko> according to S04, loop {...} is equivalent to the Cish idiom: loop (;;) {...}

[11:38] <rindolf> Infinite loop.

[11:39] <Timbus> now people say it goes to infinity, but ive never seen it get there

[11:44] *** MayDaniel joined
[11:55] *** rindolf left
[11:55] *** GlitchMr_ left
[12:00] *** rindolf joined
[12:10] *** rindolf left
[12:10] *** rindolf joined
[12:13] <grondilu> How do I leave a message to someone who's not here right now?  (there's a "tell later" command I think but I don't know the exact syntax)

[12:14] <colomon> phenny: tell grondilu This is how.

[12:14] <phenny> colomon: I'll pass that on when grondilu is around.

[12:15] <grondilu> phenny: tell alec Glad you liked it.  Thanks.

[12:15] <phenny> grondilu: I'll pass that on when alec is around.

[12:15] <phenny> grondilu: 12:14Z <colomon> tell grondilu This is how.

[12:26] *** kaare_ joined
[12:32] *** rindolf left
[12:32] *** rindolf joined
[12:42] *** rindolf left
[12:44] *** rindolf joined
[12:44] *** rindolf left
[12:44] *** shlomif joined
[12:45] *** shlomif is now known as rindolf

[12:47] *** GlitchMr joined
[12:57] *** werwerwer joined
[13:04] <masak> jnthn: ok, merged multi/LEAVE and multi/temp RT tickets.

[13:10] <masak> Timbus: since the spec *says* it goes to infinity, I think the burden of proof rests on you if you want to claim it doesn't. :P

[13:13] <masak> (sometimes I think "infinity" sends people down the wrong garden path. maybe in PL design we should speak of "bounded" and "unbounded" instead.)

[13:14] <Timbus> ehhhn sounds like effort. ill just write a program to determine if it finishes or not

[13:14] <masak> I see no potential difficulties with that. none whatsoever.

[13:19] *** rindolf left
[13:32] *** rindolf joined
[13:43] *** rindolf left
[13:45] *** rindolf joined
[13:45] *** rindolf left
[14:17] <dalek> roast: 639a766 | moritz++ | S06-other/anon-hashes-vs-blocks.t:

[14:17] <dalek> roast: RT #68298, $_ in block makes it not a hash

[14:17] <dalek> roast: review: https://github.com/perl6/roast/commit/639a766415

[14:34] *** denisboyun_ left
[14:54] * masak replied to http://perl6advent.wordpress.com/2012/12/23/day-23-macros/#comment-2437

[14:54] *** am0c joined
[14:59] *** am0c left
[14:59] *** am0c joined
[15:01] *** shlomif joined
[15:01] *** shlomif left
[15:01] *** shlomif_ joined
[15:02] *** shlomif_ left
[15:02] *** rindolf joined
[15:10] *** spider-mario joined
[15:11] <moritz> how do I create a non-associative operator in rakudo?

[15:12] *** kivutar left
[15:14] <masak> r: sub infix:<@>($a, $b) is assoc<non> { $a + $b }; say 1 @ 2 @ 3

[15:14] <p6eval> rakudo 930369: OUTPUT¬´6‚ê§¬ª

[15:14] <masak> like that, but it isn't enforced.

[15:14] * masak submits rakudobug

[15:16] <masak> r: say 4 but role {} but role {}

[15:16] <p6eval> rakudo 930369: OUTPUT¬´4‚ê§¬ª

[15:16] <masak> seems non-associativity in general, even among built-in operators, isn't enforced.

[15:16] <masak> std: say 4 but role {} but role {}

[15:16] <p6eval> std a8bc48f: OUTPUT¬´ok 00:00 43m‚ê§¬ª

[15:16] <masak> hm.

[15:16] <masak> std: 1 <=> 2 <=> 3

[15:16] <p6eval> std a8bc48f: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§"<=>" and "<=>" are non-associative and require parens at /tmp/p70idsTt5F line 1:‚ê§------> [32m1 <=> 2 <=> [33m‚èè[31m3[0m‚ê§Check failed‚ê§FAILED 00:00 42m‚ê§¬ª

[15:17] <masak> r: 1 <=> 2 <=> 3

[15:17] <p6eval> rakudo 930369:  ( no output )

[15:21] * masak .oO( every topic of discussion is a potential rakudobug )

[15:21] *** zby_home joined
[15:27] *** rindolf left
[15:27] *** rindolf joined
[15:34] *** gcole left
[15:35] <colomon> n: 1 <=> 2 <=> 3

[15:35] <p6eval> niecza v24-12-g8e50362: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§"<=>" and "<=>" are non-associative and require parens at /tmp/cpMV12aAKz line 1:‚ê§------> [32m1 <=> 2 <=> [33m‚èè[31m3[0m‚ê§‚ê§Unhandled exception: Check failed‚ê§‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 1443 (die @ ‚Ä¶

[15:35] *** zby_home left
[15:39] *** bowtie joined
[15:52] *** Chillance joined
[15:53] *** xinming_ joined
[15:56] *** rindolf left
[15:56] *** rindolf joined
[15:56] *** xinming left
[16:02] <masak> today's useful neologism: "squoval". not quite square, not quite oval. :)

[16:02] <felher> :D

[16:07] <masak> like a fingernail, for example.

[16:08] *** hash_table joined
[16:08] *** |Ares| joined
[16:11] *** |Ares| left
[16:18] <pmichaud> good morning, #perl6

[16:18] * pmichaud builds a .msi

[16:18] <moritz> \o

[16:20] *** arkydo joined
[16:20] <arkydo> t

[16:21] <masak> t, arkydo.

[16:22] <flussence> \t

[16:22] <flussence> (u+xxxx waving giraffe with hat)

[16:24] <FROGGS> masak: you might enjoy "deeper meaning of liff"

[16:24] <FROGGS> brb

[16:24] <masak> FROGGS: yes, I've enjoyed both those books a number of times.

[16:24] <colomon> o/, pmichaud 

[16:25] <masak> I have fond memories of sitting in mberends' living room quoting from TMoL.

[16:25] <masak> I even remember some of mberends' comments to some of the terms. :)

[16:25] *** thou joined
[16:26] <pmichaud> o/ colomon

[16:26] *** SamuraiJack left
[16:28] * moritz has found a rakudobug that triggers in some of the remaining PIR code :(

[16:35] <arkydo> hello , masak 

[16:35] <masak> greetings, arkydo 

[16:40] <masak> arkydo: I was going to ask if it's your first time here, but I see you've been her twice before.

[16:40] <masak> welcome back :)

[16:41] *** raiph joined
[16:47] *** werwerwer left
[16:50] <arkydo> masak: I'm glad beeing here, with such nice people.

[16:51] *** werwerwer joined
[16:55] <dalek> roast: 9d4767b | moritz++ | S06-traits/is-assoc.t:

[16:55] <dalek> roast: tests for "is assoc" trait

[16:55] <dalek> roast: review: https://github.com/perl6/roast/commit/9d4767b12d

[16:56] <dalek> rakudo/nom: c7479c3 | moritz++ | t/spectest.data:

[16:56] <dalek> rakudo/nom: run tests for "is assoc" trait

[16:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c7479c3eb6

[16:58] <masak> arkydo: and such nice people are glad to have you here! :)

[16:59] <masak> moritz++ # writing tests

[17:05] *** Kharec left
[17:06] *** Kharec joined
[17:08] <pmichaud> rakudo star 2012.12 windows .msi uploaded:  http://rakudo.org/downloads/star/

[17:08] *** grondilu left
[17:13] *** hash_table left
[17:14] <hoelzro> does anyone mind if I merge my pull request for NQP?

[17:14] <pmichaud> which request?

[17:14] <hoelzro> https://github.com/perl6/nqp/pull/69

[17:17] <pmichaud> hmmm.... I'm very wary of a bootstrap update in a pull request.  What if someone has updated the bootstrap since the pull request was created?

[17:17] <hoelzro> hmm

[17:17] <hoelzro> fair enough.

[17:18] <hoelzro> would you like me to cherry pick my "real" changes, apply them to master, rebuilt bootstrap, and push?

[17:20] <pmichaud> ...thinking...

[17:21] <pmichaud> Parrot uses "--dynext"  instead of "--dynext-path" for its option to do the same thing... should we perhaps use the same option switch?

[17:21] <hoelzro> that sounds like a good idea

[17:22] <moritz> pmichaud++ # star .msi

[17:24] <pmichaud> hoelzro: so yes, change to '--dynext', cherry pick real changes and apply to master

[17:24] <pmichaud> then rebuild bootstrap if needed

[17:25] <hoelzro> ok

[17:27] <rindolf> Hi all. Please back me up here - http://en.wikipedia.org/wiki/Wikipedia:Articles_for_deletion/Tom_Christiansen .

[17:28] <moritz> isn't "author of a pretty popular book" reason for notability?

[17:30] <masak> or having invented the term "Schwartzian transform" and coined the expression "only perl can parse Perl"?

[17:31] <masak> *I* think tchrist is a notable individual. I don't know enough about how Wp editors think to convince them :)

[17:33] <rindolf> masak: well, I added a comment there.

[17:33] <rindolf> You can add ones too.

[17:33] <rindolf> masak: http://www.shlomifish.org/humour/bits/How-many-Wikipedia-Editors/ . :-)

[17:36] <masak> rindolf: I like your comment. I have nothing to add.

[17:37] <pmichaud> rindolf: you may have more success if you point to some secondary sources.

[17:37] <pmichaud> secondary sources count more than primary sources when establishing notability

[17:38] <moritz> http://www.perl.org/advocacy/white_camel/1999.html might be a nice secondary source

[17:38] <moritz> or is that primary again?

[17:39] *** pmurias joined
[17:40] <pmichaud> whether it's primary or secondary is less important than the fact that he received a community-recognition award, there

[17:40] <pmichaud> so definitely include the white_camel reference

[17:41] <pmichaud> definitely falls under WP:ANYBIO

[17:42] <pmichaud> also WP:AUTHOR in terms of "created a significant or well-known work"

[17:44] <pmichaud> I'm afk for a while

[17:47] *** Kharec left
[17:47] *** Kharec joined
[17:50] <hoelzro> apparently I can't push to nqp?

[17:50] <hoelzro> =(

[17:51] <pmurias> hoelzro: github problems or lack of commit bit?

[17:51] <hoelzro> pmurias: I'm guessing the latter, but I'm a member of the perl6 org

[17:52] <pmurias> hoelzro: I think something else is needed for that?

[17:53] <hoelzro> I can push to roast, afaik

[17:53] <pmurias> hoelzro: you can always pull request and me or jnthn will apply your changes

[17:53] <hoelzro> ok, I'll just do that

[17:54] <hoelzro> pmurias: fresh commits are in the PR

[17:54] <hoelzro> https://github.com/perl6/nqp/pull/69

[17:56] <dalek> nqp: aac87bb | (Rob Hoelz)++ | src/NQP/ (2 files):

[17:56] <dalek> nqp: Allow appending to dynext load path from NQP

[17:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/aac87bbd37

[17:56] <dalek> nqp: cd6c574 | (Rob Hoelz)++ | src/HLL/Compiler.pm:

[17:56] <dalek> nqp: Add libpaths.pasm to generated PIR

[17:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/cd6c57485e

[17:56] <dalek> nqp: 9781b25 | (Rob Hoelz)++ | src/stage0/ (9 files):

[17:56] <dalek> nqp: Update bootstrap.

[17:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9781b2508e

[17:56] <dalek> nqp: e5e58d3 | (Rob Hoelz)++ | src/NQP/World.pm:

[17:56] <dalek> nqp: Use constant instead of magic number for dynext path

[17:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e5e58d3169

[17:56] <dalek> nqp: bcd4f82 | (Pawel Murias)++ | src/ (12 files):

[17:56] <dalek> nqp: Merge pull request #69 from hoelzro/master

[17:56] <dalek> nqp: 

[17:56] <dalek> nqp: Add --dynext-path option

[17:56] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bcd4f820e6

[17:56] <hoelzro> \o/

[17:56] <hoelzro> thanks

[17:56] <hoelzro> now to get my Rakudo * request merged ;)

[17:56] <pmurias> can't help with that

[17:57] <hoelzro> heh

[17:58] *** am0c left
[18:15] * hoelzro needs to add highlighting for token { ... }, but has been putting it off

[18:16] *** spider-mario left
[18:16] *** am0c joined
[18:24] <masak> watching http://vimeo.com/6624203 -- Steele just sort of mentions in passing that mergesort and quicksort are duals, in that one does structural recursion on the input and the other on the output. whoa.

[18:33] <arnsholt> Neat!

[18:33] <arnsholt> I never knew

[18:38] <pmichaud> hoelzro: hoelzro:  Your Rakudo * request still uses --dynext-path, if I'm reading it correctly.

[18:38] <masak> arnsholt: the rest of the talk is interesting too. I've only ever read the slides before.

[18:38] <masak> but the message is beginning to sink in, I think.

[18:38] <masak> I still really like the three-way unshuffle example.

[18:44] <hoelzro> it does?

[18:45] <hoelzro> ah, the title does, but the code has been changed

[18:45] <hoelzro> pmichaud: ^^

[18:46] <masak> monoid caching, hm...

[18:47] <pmichaud> hoelzro: I checked the code

[18:47] <pmichaud> https://github.com/hoelzro/rakudo-star/commit/efc626a3bf14b35aaaaa49a8f1cd767465976493   still uses --dynext-path

[18:48] <hoelzro> pmichaud: I just realized that! I thought you were talking about the NQP pull request

[18:49] * hoelzro is helping out in the kitchen

[18:50] <hoelzro> pmichaud: it should be good now!

[18:50] <hoelzro> ugh

[18:50] <hoelzro> hang on one second

[18:50] <hoelzro> ok, done.

[18:51] <hoelzro> cooking &

[18:51] <pmichaud> merged.

[18:51] <dalek> star: 5d804c4 | (Rob Hoelz)++ | tools/build/Makefile.in:

[18:51] <dalek> star: Remove DESTDIR prefix from bin-install line

[18:51] <dalek> star: 

[18:51] <dalek> star: If using DESTDIR to package up Rakudo Star in an RPM or similar

[18:51] <dalek> star: format, the Makefile currently ends up writing the package build

[18:51] *** dalek left
[18:52] *** dalek joined
[18:52] *** ChanServ sets mode: +v dalek

[18:58] *** fgomez left
[19:00] <pmichaud> moritz: ooc, did you run "modules-test" for the 2012.12 star release?

[19:00] *** fgomez joined
[19:00] <hoelzro> yay!

[19:02] <jnthn> Good evening o/

[19:03] <pmichaud> jnthn: o/

[19:03] <hoelzro> ahoy jnthn 

[19:03] <jnthn> hi, pmichaud, hoelzro :)

[19:03] <masak> jnthn! \o/

[19:03] * jnthn is with UK family :)

[19:04] <jnthn> r: role Foo { }; Foo.gist

[19:04] <p6eval> rakudo c7479c:  ( no output )

[19:04] <jnthn> r: role Foo { method gist() { 42 }; }; say Foo.gist

[19:04] <p6eval> rakudo c7479c: OUTPUT¬´42‚ê§¬ª

[19:05] <jnthn> r: role Foo { method gist() { 42 }; method blah() { ... } }; say Foo.gist

[19:05] <p6eval> rakudo c7479c: OUTPUT¬´Method 'blah' must be implemented by Foo because it is required by a role‚ê§  in  at src/gen/Metamodel.pm:2127‚ê§  in compose_method_table at src/gen/Metamodel.pm:2118‚ê§  in any apply at src/gen/Metamodel.pm:2136‚ê§  in  at src/gen/Metamodel.pm:2271‚ê§  in any compose at sr‚Ä¶

[19:05] <masak> jnthn: I brought you this big basket of RT tickets :>

[19:05] <jnthn> A role that is not fully defined may not be punned into a class, and additionally "cheating" somehow will just create another problematic situation.

[19:05] <jnthn> So I'm inclined to reject that ticket as not a bug.

[19:06] <masak> jnthn: we're not punning it, we're doing .perl

[19:06] <masak> or .gist

[19:06] <jnthn> masak: That puns it.

[19:06] <masak> then my question is, "why?"

[19:06] <masak> why does it have to pun it there?

[19:06] <masak> doesn't feel strictly necessary.

[19:06] <pmichaud> masak: we brought you this new Rakudo release full of RT-ticketable items :>

[19:06] <jnthn> You can't call methods on a role.

[19:07] <jnthn> It always has to be punned.

[19:07] <masak> jnthn: I guess I feel it should be different because we're dealing with the type object.

[19:07] <jnthn> I guess I don't.

[19:07] <pmichaud> type objects are just instances of the role/class

[19:07] <masak> that's my intuition. that the type object of a role doesn't require punning.

[19:07] <masak> pmichaud: yes, I know.

[19:07] <jnthn> Er

[19:07] <pmichaud> and one cannot instantiate a role

[19:08] <doy> jnthn: so if i have this incomplete role type object, and i want to introspect it while debugging

[19:08] <doy> what do i do?

[19:08] <masak> doy++ # the right question to ask

[19:08] <pmichaud> my guess is that it'd have to be meta-program inspected.

[19:08] <jnthn> The ONLY REASON SomeRole.new works is because the self by the time we get into .new is the class punned from the role.

[19:08] <doy> r: role Foo { method bar {...} }; say Foo.^name

[19:08] <p6eval> rakudo c7479c: OUTPUT¬´Method 'bar' must be implemented by Foo because it is required by a role‚ê§  in  at src/gen/Metamodel.pm:2127‚ê§  in compose_method_table at src/gen/Metamodel.pm:2118‚ê§  in any apply at src/gen/Metamodel.pm:2136‚ê§  in  at src/gen/Metamodel.pm:2271‚ê§  in any compose at src‚Ä¶

[19:08] <doy> pmichaud: ^^

[19:09] <jnthn> r: role Foo { method bar {...} }; say Foo.HOW.name(Foo)

[19:09] <p6eval> rakudo c7479c: OUTPUT¬´Foo‚ê§¬ª

[19:09] <jnthn> It works.

[19:09] <doy> huh

[19:09] <jnthn> Guess the .^ sugar wants implementing differently...

[19:09] <doy> yeah

[19:09] <doy> i thought those two were equivalent

[19:09] <pmichaud> r: role Foo { method bar {...} };  say Foo.^name(Foo)   # curious

[19:09] <p6eval> rakudo c7479c: OUTPUT¬´Method 'bar' must be implemented by Foo because it is required by a role‚ê§  in  at src/gen/Metamodel.pm:2127‚ê§  in compose_method_table at src/gen/Metamodel.pm:2118‚ê§  in any apply at src/gen/Metamodel.pm:2136‚ê§  in  at src/gen/Metamodel.pm:2271‚ê§  in any compose at src‚Ä¶

[19:09] <jnthn> At the moment it rewrites to .dispatch:<^> or so

[19:09] <pmichaud> yeah, I suspect the .^ sugar

[19:10] <jnthn> Which causes a pun.

[19:10] <jnthn> I'd kinda feared we'd get caught out on that at some point...

[19:10] <jnthn> Anyway, that's what needs fixing.

[19:10] <doy> yeah, that works for me

[19:10] <jnthn> As opposed to breaking role punning.

[19:10] <jnthn> I really don't want a bunch of special cases there.

[19:11] <pmichaud> agreed

[19:11] <masak> agreed.

[19:11] <doy> agreed

[19:11] <doy> (:

[19:11] <jnthn> OK, I put it on the todo list.

[19:11] *** Chillance left
[19:11] <jnthn> :)

[19:12] <jnthn> That non-assoc one is a missing throw in EXPR, fwiw.

[19:12] *** Chillance joined
[19:12] <jnthn> I noticed it wasn't there when I was updating EXPR to handle the adverb stuff, then promptly forgot about it.

[19:14] * jnthn takes a look at adding it.

[19:14] <pmichaud> I'm afk for a bit

[19:16] <rindolf> jnthn: hi.

[19:17] <jnthn> o/ rindolf 

[19:25] <FROGGS> to the experts: is it possible to add things to the match object from within a grammar rule/token?

[19:26] <pmichaud> btw, comments and/or discussion on https://github.com/perl6/specs/issues/26  would be greatly welcomed.  I don't feel comfortable with the 2012.12 release as things stand now.

[19:27] <masak> r: "" ~~ / { $<something> = 'foo' } /; say $/

[19:27] <p6eval> rakudo c7479c: OUTPUT¬´Cannot assign to a non-container‚ê§  in block  at /tmp/yXntO44FIc:1‚ê§‚ê§¬ª

[19:27] <masak> r: "" ~~ / { $<something> := 'foo' } /; say $/

[19:27] <p6eval> rakudo c7479c: OUTPUT¬´No such method 'bind_key' for invocant of type 'Match'‚ê§  in method postcircumfix:<{ }> at src/gen/CORE.setting:1493‚ê§  in block  at /tmp/Sk86z7d64j:1‚ê§‚ê§¬ª

[19:27] <masak> aww

[19:33] <jnthn> pmichaud: looking

[19:36] <jnthn> pmichaud: Clearly, beaking that many modules is Not Good. Do you know the origin of the change?

[19:38] <jnthn> pmichaud: I ask because in the Rakudo commits between the two, I don't find any socket changes...

[19:38] <jnthn> (that is, 2012.11 - 2012.12)

[19:39] <arnsholt> moritz++ prodded #parrot about it an hour ago or so. No response so far though

[19:39] <jnthn> And git log says last changes to src/core/Socket* were in October.

[19:39] <jnthn> So yeah, musta come in via a NQP bump, which and he corresponding Parrot bump.

[19:40] <arnsholt> This could be rooted in Parrot, similar to the newline thing earlier this year

[19:41] *** GlitchMr left
[19:42] *** GlitchMr joined
[19:47] <masak> today's autopun: https://twitter.com/TheRealSheldonC/status/285097302320889856

[19:47] <jnthn> heh :)

[19:53] <Ulti> why not have a buffered read too

[19:55] <jnthn> Got a patch for the non-assoc thing, but I messed up the error message. D'oh

[19:57] <Ulti> though I dont understand what someone expects when reading from a socket.. if you ask for 1024 bytes and only 512 were ever sent is .read expected to block forever or was there previously an implicit time out?

[20:00] <FROGGS> Ulti: if you request 2049 bytes, then you actually get 512b, 512b, 512b, 1b, and not 2049b a piece

[20:01] <Ulti> so you get it broken on packets as a list?

[20:01] <FROGGS> it is like the maximum chunksize

[20:01] <FROGGS> I dont understand

[20:01] <FROGGS> you get several chunks, as long as there is data

[20:02] <Ulti> right

[20:02] <FROGGS> but the parameter is some sort of useless if it is greater 512

[20:02] <FROGGS> than*

[20:03] <masak> raiph: I fear http://perl6advent.wordpress.com/2012/12/23/day-23-macros/#comment-2515 is not an ideal place to discuss changes to the spec. that said, suggestions noted.

[20:03] <FROGGS> for simplicity of end user programs I'd say the implementation has to concat the chunks to the size the user wants

[20:03] <FROGGS> so not everyone has to do it

[20:04] <jnthn> r: say 1 <=> 2 <=> 3

[20:04] <p6eval> rakudo c7479c: OUTPUT¬´Increase‚ê§¬ª

[20:04] <Ulti> yeah thats what I'd expect

[20:04] <Ulti> but the bug reported was about not getting the full ammount of bytes, which I think is fine, its the difference between buffered IO and not

[20:05] *** alec joined
[20:05] <alec> i've got some perl6 code here that i can't get to work with rakudo

[20:05] <phenny> alec: 12:15Z <grondilu> tell alec Glad you liked it.  Thanks.

[20:05] <alec> ah, thanks, phenny

[20:07] <FROGGS> alec: can you nopaste it?

[20:07] <masak> alec: could you ... what FROGGS++ said :)

[20:07] <Ulti> oh I see FROGGS bbkr__ is saying you just get the first 512 because its the first element in the list

[20:08] <FROGGS> masak: I am #sdl trained first level guy ;o)

[20:09] <alec> nopaste is like pastebin?

[20:09] *** nyuszika7h left
[20:09] <masak> alec: https://gist.github.com/

[20:09] <masak> (but yes, any pastebin will do, that's just our favorite)

[20:10] *** nyuszika7h joined
[20:10] <dalek> nqp: 8ea7814 | jonathan++ | src/HLL/Grammar.pm:

[20:10] <dalek> nqp: Complain when non-assocs get associated.

[20:10] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8ea7814afd

[20:12] <timotimo> what cool things have i missed during the last three days?

[20:12] <alec> www.pastebin.com/NSNkE7w2

[20:12] <alec> when i try running it i get this error:

[20:13] <alec> unidentified routine '&rx' called: line 4

[20:14] <masak> timotimo: about half of Kwanzaa, for one!

[20:14] <masak> alec: there should be no space after 'rx'.

[20:14] *** spider-mario joined
[20:15] <masak> alec: if there is, Perl 6 syntax says what you're doing is a function call.

[20:15] <FROGGS> r: my $rx = rx / /;

[20:15] <p6eval> rakudo c7479c:  ( no output )

[20:15] <timotimo> oh, yes, kwanzaa, sure. what about perl6 related cool things, though?

[20:16] <FROGGS> r: my $Nglycosylation = rx / N <-[P]> <[ST]> <-[P]> /;

[20:16] <p6eval> rakudo c7479c:  ( no output )

[20:16] <FROGGS> n: my $Nglycosylation = rx / N <-[P]> <[ST]> <-[P]> /;

[20:16] <p6eval> niecza v24-12-g8e50362: OUTPUT¬´Potential difficulties:‚ê§  $Nglycosylation is declared but not used at /tmp/nWWRvfKigT line 1:‚ê§------> [32mmy [33m‚èè[31m$Nglycosylation = rx / N <-[P]> <[ST]> <[0m‚ê§‚ê§¬ª

[20:16] * FROGGS .oO( E_NOSUCHPROBLEM )

[20:17] <masak> timotimo: if only there were regular summaries that one could simply go and read somewhere... :)

[20:17] <FROGGS> alec: your racudo is not the latest version I suppose?

[20:17] <alec> no, FROGGS

[20:17] <FROGGS> rakudo*

[20:17] <FROGGS> k

[20:17] <alec> lemme check

[20:18] <alec> 2012.04.1

[20:18] <moritz> that's a bit old

[20:18] <moritz> like, 8 releases behind shiny new

[20:18] <alec> it was the one in the ubuntu 12.10 repos

[20:18] <alec> there should really be an ubuntu PPA, didn't see one

[20:19] <alec> i would use that to keep up to date if there were

[20:19] <FROGGS> hmmm

[20:19] <alec> i'm too lazy to compile stuff usually though

[20:19] <FROGGS> well, then remove the space and pray, cause I dont think there is a ppa yet

[20:20] <alec> lol

[20:20] <alec> which space?

[20:20] <moritz> 21:14 < masak> alec: there should be no space after 'rx'.

[20:20] <moritz> 21:15 < masak> alec: if there is, Perl 6 syntax says what you're doing is a  function call.

[20:20] <alec> ah, didn't see that, sorry

[20:20] <alec> ok

[20:21] <FROGGS> it treats it like: rx() / ...

[20:22] <alec> ok

[20:22] <alec> thank you

[20:22] <alec> it does work now

[20:22] <alec> i'm curious about $*IN.lines

[20:23] <alec> is that the normal way to grab text from stdin?

[20:23] <moritz> yes

[20:23] <alec> cool

[20:23] <alec> i like it

[20:23] <masak> FROGGS: no, it treats it like rx( / ... / )

[20:23] <dalek> rakudo/nom: 7d3e01f | jonathan++ | / (2 files):

[20:23] <dalek> rakudo/nom: Mark %structural as non-assoc.

[20:23] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7d3e01f1ea

[20:24] <alec> but it automatically splits at line beaks, doesn't it? $*IN.lines

[20:24] <jnthn> There's one masakbug down :P

[20:24] <alec> can i use it to read a whole shakespeare play in as a giant string?

[20:24] <moritz> you'd use $*IN.slurp for that

[20:24] <masak> alec: $*IN.slurp

[20:24] <alec> ok

[20:24] <alec> i see

[20:25] <masak> alec: or just slurp(), which defaults to $*IN

[20:25] <alec> ahhhh

[20:25] <masak> just as lines() defaults to $*IN.

[20:25] <moritz> not quite actually

[20:25] <masak> oh right

[20:25] <moritz> it defaults to $*IN if there are no command line arguments

[20:25] <alec> yes

[20:25] <moritz> if there are, they are treated as file names and read instead

[20:25] <masak> moritz++ # usually corrects me on this :)

[20:25] <moritz> like Perl 5's magical <> file handle

[20:26] <alec> hmm, well i used this script i'm playing with on a file instead of piping text via stdin, and it's just sitting there

[20:27] <alec> so i take it $*IN.lines doesn't handle opening files

[20:27] <moritz> right, only lines() does

[20:27] <alec> is there an easy way to rewrite the script so it does both automagically?

[20:27] <moritz> and slurp() does too, I think

[20:27] <moritz> r: say slurp().chars

[20:27] <p6eval> rakudo c7479c: OUTPUT¬´616‚ê§¬ª

[20:28] * moritz wanted to change p6eval's STDIN to an Austrian Christmas song for the advent time, but forgot

[20:29] <jnthn> Thankfully, advent is a renewable resource :)

[20:29] <FROGGS> awwww

[20:29] <arnsholt> Put in a note in your Google calendar for next year, so you remember then ¬¥=

[20:29] <arnsholt> Er, =)

[20:29] <FROGGS> there should be more easter eggs...

[20:30] <jnthn> Is there any interest in nqp-jvm-prep commits getting reported here, btw?

[20:30] * FROGGS loves VLC for its christmas hat

[20:30] <moritz> jnthn: OH YES

[20:30] <jnthn> (aside from "jnthn is interested in moar karma :P"

[20:30] <jnthn> )

[20:30] <FROGGS> hehe

[20:30] *** Kharec left
[20:31] <[Coke]> jnthn-- #there, that should balance it out.

[20:31] <FROGGS> jnthn++ # for helping me

[20:31] <dalek> nqp-jvm-prep: bc84245 | jonathan++ | src/org/perl6/nqp/sixmodel/ (5 files):

[20:31] <dalek> nqp-jvm-prep: Get storage_spec REPR function in place.

[20:31] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/bc84245928

[20:31] <dalek> nqp-jvm-prep: 2fc7df2 | jonathan++ | src/org/perl6/nqp/ (2 files):

[20:31] <dalek> nqp-jvm-prep: Get BOOTInt and BOOTNum in place.

[20:31] <dalek> nqp-jvm-prep: 

[20:31] <dalek> nqp-jvm-prep: Also a small refactor to avoid some code duplication.

[20:32] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/2fc7df2916

[20:32] <dalek> nqp-jvm-prep: bd560b5 | jonathan++ | / (2 files):

[20:32] <dalek> nqp-jvm-prep: Add ops to get KnowHOWAttr and BOOT types.

[20:32] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/bd560b53f7

[20:32] <FROGGS> fair

[20:32] <jnthn> yay, it worked first time :)

[20:32] <nwc10> ooh, that's an interesting branch name

[20:32] <jnthn> nwc10: It's a repo rather than a branch :)

[20:33] <arnsholt> Indeed it is, now you mention it

[20:33] * arnsholt goes to look

[20:33] <jnthn> nwc10: Its contents will likely end up in nqp repo eventually, but this means I can get on with stuff without figuring out the details of that.

[20:34] <masak> ...can always merge git histories later... ;)

[20:35] <arnsholt> Indeed. I learned how to do that kind of stuff a while back, but now I've forgotten again

[20:35] <moritz> git-filter-branch probably

[20:36] <moritz> that's the swiss army chainsaw of mass history rewrite

[20:36] <jnthn> masak: I hear you know something about that ;)

[20:36] <masak> yeah :)

[20:37] <arnsholt> moritz: Yeah, that sounds familiar

[20:37] <masak> moritz: I tend to use git-filter-branch when I'm splitting repositories, and format-patch/am when I'm merging them.

[20:38] <arnsholt> It was splitting a repo (or extracting a subdir for external release, really) I did as well

[20:38] <moritz> masak: well, I've only done one merge so far, and that consisted simply of adding the second repo as a remote, and doing a merge

[20:39] <masak> yeah, that works too.

[20:39] <masak> depending on how "live" you want that merge to be, you might also want to consider subtrees.

[20:41] *** alec left
[20:42] <dalek> roast: 80239a7 | moritz++ | S06-traits/is-assoc.t:

[20:42] <dalek> roast: unfudge and label test for RT #116238

[20:42] <dalek> roast: review: https://github.com/perl6/roast/commit/80239a716d

[20:46] <doy> jnthn: also, things like this:

[20:46] <doy> r: role Foo { method bar {...} }; say defined Foo

[20:46] <p6eval> rakudo c7479c: OUTPUT¬´Method 'bar' must be implemented by Foo because it is required by a role‚ê§  in  at src/gen/Metamodel.pm:2127‚ê§  in compose_method_table at src/gen/Metamodel.pm:2118‚ê§  in any apply at src/gen/Metamodel.pm:2136‚ê§  in  at src/gen/Metamodel.pm:2271‚ê§  in any compose at src‚Ä¶

[20:47] <doy> makes it hard to do things with role type constraints

[20:47] <jnthn> That is really calling .defined

[20:47] <doy> right

[20:47] <jnthn> Role type constraints?

[20:47] <doy> has Foo $.foo

[20:47] <doy> if you don't pass a value for foo to the constructor

[20:47] <doy> it gets the Foo type object

[20:48] <jnthn> Ah

[20:48] <jnthn> and // uses .defined

[20:48] <doy> right, among other things

[20:48] <jnthn> Not .DEFINITE

[20:48] <jnthn> Hmm.

[20:48] <jnthn> Good point.

[20:48] <jnthn> That issue probably wants waving in TimToady's direction :)

[20:48] <doy> (:

[20:52] <doy> .DEFINITE does appear to be a usable workaround for the moment though

[20:52] <jnthn> Yeah

[20:52] <jnthn> It asks "is this a type object or not"

[20:53] <doy> is there a type constraint for that, actually?

[20:53] <jnthn> I'm wondering if punning a role with ... should be made to work, but calling any of those methods explodes.

[20:53] <doy> that's something else i was wondering about

[20:53] <doy> if i want an attribute that holds classes or roles or whatever

[20:53] <jnthn> Yeah, but not fully implemented yet

[20:53] <doy> okay

[20:54] <jnthn> I figured out how to do it, but it only works in the special caes of parameters

[20:54] <jnthn> (as in, I figured out how to have a general solution...)

[20:54] <jnthn> Will probably do it in January once I get back from family trips, along with adding coercion types, which need changes in similar places.

[20:56] <doy> it does make it a bit confusing to ask "has this attribute been set" when it can only hold undefined values

[20:57] <doy> worked around that by requiring that the roles do a certain other role, but a better solution would be nice

[20:59] *** GlitchMr left
[21:28] *** bruges joined
[21:30] *** bruges_ left
[21:31] *** zby_home joined
[21:31] <dalek> nqp-jvm-prep: 1f8d60c | jonathan++ | / (2 files):

[21:31] <dalek> nqp-jvm-prep: Implement nqp::list and basic positional ops.

[21:31] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/1f8d60ce62

[21:31] <dalek> nqp-jvm-prep: fb3030a | jonathan++ | t/qast.t:

[21:31] <dalek> nqp-jvm-prep: A couple of list/positional op tests.

[21:31] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/fb3030ac66

[21:45] *** alec joined
[21:54] *** arkydo left
[22:03] <dalek> nqp-jvm-prep: 90472b0 | jonathan++ | / (2 files):

[22:03] <dalek> nqp-jvm-prep: Implement nqp::hash and atkey/bindkey.

[22:03] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/90472b0201

[22:03] <dalek> nqp-jvm-prep: 928da15 | jonathan++ | t/qast.t:

[22:03] <dalek> nqp-jvm-prep: Test nqp::hash and basic hash usage.

[22:03] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/928da1565f

[22:03] <dalek> nqp-jvm-prep: 7cfd727 | jonathan++ | docs/ROADMAP:

[22:03] <dalek> nqp-jvm-prep: Update ROADMAP.

[22:03] <dalek> nqp-jvm-prep: review: https://github.com/jnthn/nqp-jvm-prep/commit/7cfd727d83

[22:03] <jnthn> enough for today &

[22:05] *** tcpr1347 joined
[22:11] <hoelzro> on line 227 of S05-regex.pod in the spec, it talks about :sigspace; shouldn't this be talking about :samecase instead?

[22:15] <tadzik> omg, it is happens :>

[22:20] <[Coke]> phenny: ask jnthn about implementing the math ops - I have the project open in eclipse, docs say that some of the math ops are already implemented, so I was going to use that as a basis to implement the missing ones. - but I can't see where Math or sin is used, e.g. help me help you!

[22:20] <phenny> [Coke]: I'll pass that on when jnthn is around.

[22:23] *** kaare_ left
[22:23] <[Coke]> phenny: ask jnthn - I'm assuming that the others are more builtin, somehow. If you could point me at one of those math ops, I can knock out the rest.

[22:23] <phenny> [Coke]: I'll pass that on when jnthn is around.

[22:24] <[Coke]> er, *implement* one of those...

[22:37] *** spider-mario left
[22:44] *** zby_home left
[22:51] *** pmurias left
[22:55] *** Khisanth left
[23:01] *** rindolf left
[23:09] *** Khisanth joined
[23:10] <japhb> Re: the WP AfD on Tom Christiansen, I fail to see how someone would establish NOTABILITY to the level Msnicki suggests -- what would a person outside the field have to say about him?  "Here's a man well-known in his community for 

[23:10] <japhb> *actually doing his research*"?

[23:11] <japhb> He writes articles and posts in various fora that are well known for *ending* conversation, because they become the definitive answer to a question.

[23:12] <japhb> But he's not an academic, so doesn't have classical peer-reviewed papers, and he's not a rock star, so doesn't have fawning articles written about him in well-known rags.

[23:13] <japhb> At some point, you have to apply common sense.

[23:14] <japhb> As, you know, stated at the top of WP:N

[23:14] <japhb> Sigh, </rant>

[23:36] *** nyuszika7h left
[23:38] *** nyuszika7h joined
[23:53] *** jeffreykegler joined
