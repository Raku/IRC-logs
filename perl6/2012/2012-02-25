[00:00] *** sergot joined
[00:00] *** sergot left
[00:12] *** whiteknight joined
[00:32] *** seanstickle left
[00:37] <dalek> specs: f1f6183 | larry++ | S02-bits.pod:

[00:37] <dalek> specs: clobber 'as' returns; use coercion types instead

[00:37] <dalek> specs: review: https://github.com/perl6/specs/commit/f1f6183880

[00:39] <dalek> roast: 9cb6c42 | larry++ | S02-types/type.t:

[00:39] <dalek> roast: delete tests of 'as' return type

[00:39] <dalek> roast: review: https://github.com/perl6/roast/commit/9cb6c423d9

[00:43] <dalek> roast: c084f3e | larry++ | S03-binding/scalars.t:

[00:43] <dalek> roast: cannot use sig syntax without using sig syntax!

[00:43] <dalek> roast: review: https://github.com/perl6/roast/commit/c084f3e11a

[00:46] *** Teratogen left
[00:49] <dalek> roast: 8b2e841 | larry++ | S03-operators/precedence.t:

[00:49] <dalek> roast: convert accidental nobreak space to normal

[00:49] <dalek> roast: review: https://github.com/perl6/roast/commit/8b2e841735

[00:49] <dalek> roast: 5864e49 | larry++ | S06-traits/as.t:

[00:49] <dalek> roast: convert 'as' tests to coercion tests

[00:49] <dalek> roast: 

[00:49] <dalek> roast: (file is still misnamed and misplaced)

[00:49] <dalek> roast: review: https://github.com/perl6/roast/commit/5864e49739

[00:58] <dalek> roast: 1f9686d | larry++ | integration/advent2009-day18.t:

[00:58] <dalek> roast: remove accidental interpolation in test message

[00:58] <dalek> roast: review: https://github.com/perl6/roast/commit/1f9686df4f

[00:58] *** Teratogen joined
[01:05] *** am0c joined
[01:08] *** mikemol joined
[01:08] *** Alias_ joined
[01:16] *** Alias_ left
[01:18] *** ascent_ joined
[01:19] *** ascent_ left
[01:23] *** seanstickle joined
[01:24] *** PacoAir left
[01:27] *** fridim_ left
[01:32] <dalek> roast: 6ee7d4a | coke++ | S32-list/map.t:

[01:32] <dalek> roast: pugs fudge

[01:32] <dalek> roast: review: https://github.com/perl6/roast/commit/6ee7d4a99f

[01:33] <dalek> Pugs.hs: 52a3ace | coke++ | Pugs/ext/Test/lib/Test.pm:

[01:33] <dalek> Pugs.hs: add nok() to Test.pm

[01:33] <dalek> Pugs.hs: 

[01:33] <dalek> Pugs.hs: Fixes #3

[01:33] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/52a3acee5c

[01:33] <dalek> Pugs.hs: cfa31fc | coke++ | t/spectest.data:

[01:33] <dalek> Pugs.hs: run fudged test

[01:33] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/cfa31fc702

[01:34] *** unobe left
[01:35] *** unobe joined
[01:43] *** seanstickle left
[02:09] *** whiteknight left
[02:15] *** jaldhar joined
[02:21] *** tokuhirom joined
[02:27] *** thou left
[02:37] *** wolfman2000 joined
[02:41] *** benabik left
[02:41] *** benabik joined
[02:43] *** benabik_ joined
[02:45] *** benabik left
[02:45] *** benabik_ is now known as benabik

[02:46] *** xinming left
[02:47] *** xinming joined
[02:50] *** NamelessTee left
[02:52] *** thou joined
[03:22] *** orafu left
[03:22] *** orafu joined
[03:26] *** bluescreen10 left
[03:27] *** sisar joined
[03:43] *** tokuhirom left
[04:09] *** Jerkwad left
[04:11] *** thou left
[04:13] *** araujo left
[04:17] *** araujo joined
[04:20] *** sisar left
[04:28] *** robinsmidsrod left
[04:29] *** robinsmidsrod joined
[04:29] *** snarkyboojum left
[04:30] *** snarkyboojum joined
[04:31] *** alvis left
[04:40] *** wooden joined
[04:40] *** wooden left
[04:40] *** wooden joined
[04:43] *** alvis joined
[05:06] *** am0c left
[05:09] *** birdwindupbird joined
[05:14] *** apejens left
[05:15] *** apejens joined
[05:21] *** Thursdaydoesntma joined
[05:39] *** Thursdaydoesntma left
[05:45] *** kevin__ joined
[05:46] *** colomon left
[05:54] *** kevin__ left
[06:20] *** colomon joined
[06:26] *** fsergot left
[06:36] *** bbkr_ joined
[06:36] *** bbkr left
[06:36] *** bbkr_ is now known as bbkr

[06:39] *** bbkr_ joined
[06:39] *** bbkr left
[06:39] *** bbkr_ is now known as bbkr

[06:48] *** fsergot joined
[06:57] *** fsergot left
[07:00] <moritz> \o

[07:01] <sorear> o/ moritz

[07:19] *** kaare_ joined
[07:34] <dalek> niecza: 956bfc5 | sorear++ | docs/announce.v15:

[07:34] <dalek> niecza: Add an empty annouce.v15 for pmurias

[07:34] <dalek> niecza: review: https://github.com/sorear/niecza/commit/956bfc55f5

[07:37] <sorear> phenny: tell pmurias It would be nice if you could add a description of your latest p5 interop stuff to announce.v15 sometime before Tue Feb 28 08:00:00 UTC 2012

[07:37] <phenny> sorear: I'll pass that on when pmurias is around.

[07:38] <sorear> date --utc -d "$( date -d 'next tuesday' )" # kind of suprised this works.  pity I needed two date calls, though

[07:43] *** dankodin left
[07:59] <geekosaur> one works for me, unless there's some corner case I'm missing (like you want the UTC of local "00:00 next tuesday")

[08:00] <sorear> geekosaur: that's exactly what I want

[08:00] <sorear> turns out date --utc -d 'TZ="America/Los_Angeles" next tuesda

[08:00] <sorear> y' also works

[08:00] <sorear> apparently --utc implies TZ="UTC" unless overrided inside -d

[08:01] <sorear> instead of just setting the output timezone, like I expected

[08:02] * sorear wonders what will happen if San Diego and Los Angeles stop agreeing on what timezone to use

[08:02] <moritz> people on twitter thinks that perl 6 is dead, because the activity on the mailing lists dropped

[08:02] <sorear> zoneinfo doesn't even have an America/San_Diego zone :|

[08:03] <sorear> tell them that the mailing lists are dead, and development is done on IRC now

[08:03] <au> "mailing list is dead, love live twitter"? j/k

[08:03] <sorear> o/ au

[08:03] <au> *long, even

[08:03] <au> /o sorear

[08:04] <geekosaur> the one downside of that astrology outfit dropping ts lawsuit over the Olson database is we've lost that impetus to kill timezones completely

[08:05] <sorear> apparently there are still people out there who think DST is a good idea

[08:07] <geekosaur> it's worse than that

[08:07] <geekosaur> in the US, DST is really standard time.  then there's xmas shopping time.

[08:07] <geekosaur> which is gradually being pushed closer and closer to "only during shopping silly season"

[08:16] *** birdwindupbird left
[08:19] *** fsergot joined
[08:19] <fsergot> Hi #perl6 o/

[08:19] <sorear> hello fsergot!

[08:22] *** sergot joined
[08:22] *** fsergot left
[08:23] <sorear> hello sergot!

[08:24] *** fsergot__ joined
[08:24] *** fsergot__ left
[08:25] <sorear> sergot: your connection is broken.

[08:27] *** sergot left
[08:40] *** tokuhir__ joined
[08:52] *** birdwindupbird joined
[08:54] *** thou joined
[09:06] *** MayDaniel joined
[09:07] *** MayDaniel left
[09:07] *** dukeleto left
[09:08] *** dukeleto joined
[09:15] *** Jerkwad joined
[09:17] *** Jerkwad left
[09:17] *** Jerkwad joined
[09:22] *** plutoid joined
[09:26] *** mj41 joined
[09:26] *** birdwindupbird left
[09:28] *** fsergot joined
[09:30] *** plutoid left
[09:31] *** plutoid joined
[09:40] *** tokuhirom3 left
[09:41] *** tokuhirom3 joined
[09:42] *** aindilis` left
[09:42] *** aindilis` joined
[09:44] *** TimToady left
[09:44] *** TimToady joined
[09:46] *** bkolera left
[09:54] *** NamelessTee joined
[10:10] <dalek> niecza: dc59468 | sorear++ | lib/Cursor.cs:

[10:10] <dalek> niecza: Quick hack to generate fewer unreachable NFA nodes

[10:10] <dalek> niecza: 

[10:10] <dalek> niecza: Now if <foo> generates something that blocks LTM, <foo> <bar> won't

[10:10] <dalek> niecza: generate nodes for <bar>.  Cuts 65% of the NFA nodes from the CORE

[10:10] <dalek> niecza: compilation; also reduces time from 61s to 51s and memory usage from

[10:10] <dalek> niecza: ~220m to ~170m.

[10:10] <dalek> niecza: review: https://github.com/sorear/niecza/commit/dc59468102

[10:10] *** MayDaniel joined
[10:25] *** Trashlord joined
[10:34] <colomon> sorear++

[10:35] *** unobe left
[10:35] *** unobe joined
[10:40] <sorear> o/ colomon

[10:40] <colomon> \o

[10:40] <colomon> you're up late, I'm up early.  :)

[10:40] <sorear> heh heh heh.

[10:41] <sorear> I've only been up for about 12h actually :|

[10:43] *** ascrazy joined
[10:51] *** revdiablo left
[10:51] *** revdiablo joined
[10:52] <colomon> btw, spectest looks good after that last change.  sorear++

[10:53] *** MayDaniel left
[10:53] *** JimmyZ joined
[10:59] <colomon> nom: say [a => 1, b => 17].map({ .key => .value + 1})

[10:59] *** ascrazy left
[10:59] <p6eval> nom 0f9695: OUTPUT«Method 'key' not found for invocant of class 'Any'␤  in block <anon> at /tmp/ypVzoimcdn:1␤␤»

[10:59] <colomon> nom: say [a => 1, b => 17].map({ ; .key => .value + 1})

[10:59] <p6eval> nom 0f9695: OUTPUT«a    2 b     18␤»

[11:00] *** marmalade joined
[11:00] *** pyrimidine left
[11:00] <moritz> nom: (a => 1, b => 17).map: -> $ (:$key, :$value) { $key => $value + 1 }

[11:00] <p6eval> nom 0f9695:  ( no output )

[11:01] <moritz> nom: say (a => 1, b => 17).map: -> $ (:$key, :$value) { $key => $value + 1 }

[11:01] <p6eval> nom 0f9695: OUTPUT«a    2 b     18␤»

[11:02] *** Jerkwad left
[11:02] <dalek> roast: 079dbfb | (Solomon Foster)++ | S32-list/map.t:

[11:02] <dalek> roast: Fix broken test by adding semicolon (so map gets a block and not a hash); unfudge for niecza and rakudo.

[11:02] <dalek> roast: review: https://github.com/perl6/roast/commit/079dbfba08

[11:02] *** pyrimidine joined
[11:02] <colomon> moritz: can you please check that map.t still works on the latest rakudo after that patch?  I did a speculative unfudge.  :)

[11:02] <moritz> colomon: will do

[11:02] <colomon> moritz++

[11:03] *** thou left
[11:03] * JimmyZ wonders why needs ';'

[11:04] <sorear> hash/block disambiguation is a bit dicey in niecza; it's specced in terms of concrete syntax but niecza implements it (brokenly) at the AST level

[11:04] <moritz> because compilers can't read minds

[11:04] <sorear> because the Perl 5 rule was too complicated and nobody feels like kicking either form out of ASCII

[11:04] <JimmyZ> nom: say [a => 1, b => 17].map({ .key => .value + 1; })

[11:04] <p6eval> nom 0f9695: OUTPUT«Method 'key' not found for invocant of class 'Any'␤  in block <anon> at /tmp/0GW0fa9v8f:1␤␤»

[11:05] <sorear> I would +1 a proposal to add unambiguous Unicode "block braces" and "hash braces", although I'm not certain I'd actually use it

[11:05] <sorear> niecza: { .key => .value + 1 }

[11:05] <p6eval> niecza v14-70-gdc59468: OUTPUT«Unhandled exception: Unable to resolve method key in class Any␤  at /tmp/jJR5yhNCMg line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3830 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3831 (module-CORE @ 65) ␤  at /home/p6…

[11:05] <sorear> niecza: { .key => .value + 1; }

[11:05] <p6eval> niecza v14-70-gdc59468: OUTPUT«Unhandled exception: Unable to resolve method key in class Any␤  at /tmp/kWrXvBsv1i line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3830 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3831 (module-CORE @ 65) ␤  at /home/p6…

[11:05] <sorear> niecza: {; .key => .value + 1 }

[11:05] <p6eval> niecza v14-70-gdc59468: OUTPUT«Unhandled exception: Unable to resolve method key in class Any␤  at /tmp/BA7hxkddOg line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3830 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3831 (module-CORE @ 65) ␤  at /home/p6…

[11:06] <moritz> we could allow &{ } for blocks

[11:07] <moritz> sorear: fwiw I don't like the "unable to resolve method" error. It leaves open the question if the method is there, and the compiler was unable to resolve it, or if the method is missing

[11:07] <moritz> niecza: foo

[11:07] <p6eval> niecza v14-70-gdc59468: OUTPUT«===SORRY!===␤␤Undeclared routine:␤     'foo' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1344 (die @ 3) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 33) ␤  at /home…

[11:08] <sorear> moritz: mm.  you think "Method not found" is better wording?

[11:08] <JimmyZ> nom: say [a => 1, b => 17].map( *.key => *.value + 1)

[11:08] <p6eval> nom 0f9695: OUTPUT«a    18␤»

[11:09] <moritz> sorear: yes, though "No such method" would be even clearer

[11:09] <moritz> hm

[11:09] <moritz> I'm sure others will have better suggestions on how to phrase it

[11:10] *** Chillance joined
[11:10] * JimmyZ couldn't understand why it outputs "a 18"

[11:11] <moritz> JimmyZ: because you give it a closure with two arguments

[11:11] <sorear> JimmyZ: the first * becomes a => 1, the second * becomes b => 17

[11:11] <moritz> JimmyZ: and it takes the .key of the first argument and the .value of the second one

[11:12] <JimmyZ> perl6: say [a => 1, b => 17].map( *.key => *.value + 1)

[11:12] <p6eval> pugs b927740: OUTPUT«*** No such method in class Num: "&key"␤    at /tmp/WPnQmP_q4n line 1, column 28-48␤»

[11:12] <p6eval> ..rakudo 0f9695: OUTPUT«a 18␤»

[11:12] <p6eval> ..niecza v14-70-gdc59468: OUTPUT«"a" => 18␤»

[11:13] <JimmyZ> moritz: thanks 

[11:16] <moritz> .oO( I could have answered again with "because compilers can't read minds"  :-)

[11:22] *** whiteknight joined
[11:23] *** p6eval left
[11:24] *** diakopter left
[11:24] *** TimToady left
[11:24] *** dalek left
[11:25] *** sorear left
[11:36] *** PacoAir joined
[11:48] *** p6eval joined
[11:48] *** ChanServ sets mode: +v p6eval

[11:49] *** dalek joined
[11:49] *** ChanServ sets mode: +v dalek

[11:49] *** TimToady joined
[11:49] *** sorear joined
[11:49] *** diakopter joined
[11:54] <dalek> niecza: 636d915 | sorear++ | lib/Cursor.cs:

[11:54] <dalek> niecza: Use a more compact representation for edge lists

[11:54] <dalek> niecza: review: https://github.com/sorear/niecza/commit/636d9157e8

[11:54] <dalek> niecza: f99bd59 | sorear++ | lib/Cursor.cs:

[11:54] <dalek> niecza: Avoid the need to constantly create singleton character classes

[11:54] <dalek> niecza: review: https://github.com/sorear/niecza/commit/f99bd59279

[11:55] <sorear> LTM is no longer leading the memory usage chart

[11:55] <sorear> memory usage is now led by Perl 6 objects

[11:55] <sorear> which means the Mono memory profiler isn't helping me anymore :|

[11:56] <sorear> I need to find a way to get, at least, a census by .mo.name of live P6opaque objects

[11:56] <sorear> possibly by hacking the mono heap profiler itself - yes I'm that crazy

[11:56] * sorear -> sleep

[12:04] *** plutoid left
[12:10] *** fridim_ joined
[12:12] *** noam left
[12:13] *** noam joined
[12:17] <moritz> perl6: say Any.?()

[12:17] <p6eval> pugs b927740: OUTPUT«*** ␤    Unexpected "?()"␤    expecting ".", "\187", ">>", "=", "^", operator name, qualified identifier, variable name, "...", "--", "++", "i", array subscript, hash subscript or code subscript␤    at /tmp/xdTXhaIBE1 line 1, column 9␤»

[12:17] <p6eval> ..rakudo 0f9695: OUTPUT«===SORRY!===␤Cannot use .? on a non-identifier method call at line 1, near ""␤»

[12:17] <p6eval> ..niecza v14-72-gf99bd59: OUTPUT«===SORRY!===␤␤Modified method calls can only be used with actual methods at /tmp/q5riTb6pfy line 1 (EOF):␤------> say Any.?()⏏<EOL>␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line…

[12:17] *** peterete1 left
[12:22] *** fsergot left
[12:26] <moritz> std: say Any.?()

[12:26] <p6eval> std a540d4e: OUTPUT«ok 00:01 108m␤»

[12:26] <moritz> is tere a good reason to disallow that?

[12:26] <moritz> *there

[12:26] <moritz> I can imagine that it's useful when optionally invoking a callback

[12:27] *** HarryS joined
[12:32] *** cognominal left
[12:39] *** cognominal joined
[12:44] *** seanstickle joined
[12:51] *** mikec joined
[12:51] *** mikec is now known as mcartmell

[12:56] *** birdwindupbird joined
[13:05] *** mj41 left
[13:07] <colomon> sorear: still up?

[13:13] *** fsergot joined
[13:19] *** MayDaniel joined
[13:40] *** fsergot left
[13:41] *** daemon left
[13:41] *** dalek left
[13:41] *** dalek joined
[13:41] *** ChanServ sets mode: +v dalek

[13:42] *** arnsholt_ joined
[13:42] *** Jerkwad joined
[13:43] *** marmalade left
[13:43] *** arnsholt left
[13:44] *** daemon joined
[13:56] *** tokuhir__ left
[14:07] *** fsergot joined
[14:15] *** fsergot left
[14:33] *** gfldex left
[14:35] *** gfldex joined
[14:39] <dalek> roast: d4cb58c | coke++ | S (12 files):

[14:39] <dalek> roast: pugs fudge

[14:39] <dalek> roast: review: https://github.com/perl6/roast/commit/d4cb58cef0

[14:39] <dalek> roast: 117ffc1 | coke++ | S32-list/map.t:

[14:39] <dalek> roast: Merge branch 'master' of github.com:perl6/roast

[14:39] <dalek> roast: review: https://github.com/perl6/roast/commit/117ffc1149

[14:39] <dalek> Pugs.hs: f1402c1 | coke++ | t/spectest.data:

[14:39] <dalek> Pugs.hs: run fudged tests

[14:39] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/f1402c1c76

[14:39] <[Coke]> b: say 3638-3158

[14:39] <p6eval> b 1b7dd1: OUTPUT«480␤»

[14:40] <[Coke]> another 480 PASS for pugs.

[14:40] <[Coke]> b: say 3638 / 20283

[14:40] <p6eval> b 1b7dd1: OUTPUT«0.179362027313514␤»

[14:41] <au> whee, ~18%

[14:41] <au> [Coke]++

[14:44] <[Coke]> au: we could get a few more if you wrote: https://github.com/perl6/Pugs.hs/issues/4 ;)

[14:46] <[Coke]> (though I can probably do that one, as it's all perl6.)

[14:47] <[Coke]> pugs feels fast, btw.

[14:47] <au> then by all means please do :)

[14:47] * au is still between $job and $job atm

[14:47] <[Coke]> I haven't done any timings, but it does seem to be running that 18% in less than 1/5 of the time.

[14:49] * au praises GHC 7.4 - 1.5x faster than GHC 7.0, which is yet much (~2x) faster than what we had in GHC 6.4 days.

[14:49] <au> (judicious uses of -fllvm flags would, presumably, make it even faster)

[14:49] <au> afk, bbiab

[14:50] <[Coke]> b: say 20283*.18-3638

[14:50] <p6eval> b 1b7dd1: OUTPUT«12.94␤»

[14:50] <[Coke]> b: say 20283*.2-3638

[14:50] <p6eval> b 1b7dd1: OUTPUT«418.6␤»

[14:52] <[Coke]> looks like another 1040 tests are passing in tests that at least parse. 

[14:52] <[Coke]> say (3638+1040)/20283 # theoretical LHF max at the moment.

[14:52] <[Coke]> b: say (3638+1040)/20283 # theoretical LHF max at the moment.

[14:53] <p6eval> b 1b7dd1: OUTPUT«0.230636493615343␤»

[14:56] *** birdwind1pbird joined
[14:59] *** fsergot joined
[15:10] *** seanstickle left
[15:13] *** birdwind1pbird left
[15:14] *** lateau__ left
[15:22] *** sisar joined
[15:26] * [Coke] wonders if feather is this slow or if I'm lagged.

[15:29] <dalek> roast: 7f7b55a | coke++ | S (2 files):

[15:29] <dalek> roast: pugs fudge

[15:29] <dalek> roast: review: https://github.com/perl6/roast/commit/7f7b55a4f3

[15:29] <dalek> Pugs.hs: 10975bd | coke++ | t/spectest.data:

[15:29] <dalek> Pugs.hs: run fudged tests

[15:29] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/10975bdebc

[15:34] *** sisar left
[15:40] <colomon> phenny: tell sorear Looking at GLib.Process.SpawnSync  for implementing run.  Do you have a suggested way to get GLib into niecza's core?  We could handle it the same way we do in the Gtk scripts, but I'm not sure if that's appropriate for the core....

[15:40] <phenny> colomon: I'll pass that on when sorear is around.

[15:44] *** Psyche^ joined
[15:44] *** Patterner left
[15:44] *** Psyche^ is now known as Patterner

[16:05] *** fridim_ left
[16:15] <felher> I spotted two parts in the spec of which i think that they are now fossils after TimToady++'s "clobber as". Sadly, i lack the expertise to fix it. For the second part i'm not even sure it is a fossil (maybe C<as> still works on something different than subroutines?). The two parts are:

[16:15] <felher> S02-bits.pod:1744

[16:15] <felher> S14-roles-and-parametric-types.pod:414

[16:15] <felher> Maybe someone would take a look at it? :)

[16:22] *** NamelessTee left
[16:23] *** NamelessTee joined
[16:26] *** Tedd1^ joined
[16:27] *** Tedd1 left
[16:34] <[Coke]> # 02/25/2012 - niecza++ ; pugs (18.43%); rakudo (99.17%)

[16:34] <[Coke]> "niecza",     20298,     8,   751,  1548, 22601, 23607

[16:34] <[Coke]> "pugs"  ,      3741,     5,  1822,   114,  5682, 23398

[16:34] <[Coke]> "rakudo",     20130,    33,   604,  1864, 22631, 23617

[16:35] *** Tedd1^ is now known as Tedd1

[16:35] *** Tedd1 is now known as Tedd1^

[16:35] *** Tedd1^ is now known as Tedd1

[16:46] *** miso_soup joined
[16:52] *** miso_soup left
[16:56] <dalek> rakudo/nom: 4f0ed5c | moritz++ | t/spectest.data:

[16:56] <dalek> rakudo/nom: stop running S06-traits/as.t, we do not implement the new syntax yet

[16:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4f0ed5cba0

[17:02] *** snearch joined
[17:09] *** Trashlord left
[17:15] *** birdwindupbird left
[17:17] *** wolfman2000 left
[17:19] *** mtk left
[17:23] <fsergot> perl6: sub infix:<&>(@a, @b) { my @r; for @a { @r.push($_) if $_ ~~ any(@b); }}; say <a b c> & <c d e>;

[17:23] <p6eval> niecza v14-72-gf99bd59: OUTPUT«Nil␤»

[17:23] <p6eval> ..rakudo 0f9695: OUTPUT«c␤»

[17:23] <p6eval> ..pugs b927740: OUTPUT«␤»

[17:25] <fsergot> nom: sub infix:<&>(@a, @b) { my @r; for @a { @r.push($_) if $_ ~~ any(@b); }; @r}; say(<a b c> & <c d e>);

[17:25] <p6eval> nom 0f9695: OUTPUT«c␤»

[17:25] <fsergot> nom: sub infix:<&>(@a, @b) { my @r; for @a { @r.push($_) if $_ ~~ any(@b); }}; say(<a b c> & <c d e>);

[17:25] <p6eval> nom 0f9695: OUTPUT«c␤»

[17:26] <TimToady> your if can be replaced by "when any(@b)"

[17:28] <TimToady> though smartmatching is not symmetrical, so your & is very commutative

[17:28] <TimToady> *not very

[17:29] <fsergot> TimToady++

[17:30] *** arnsholt_ is now known as arnsholt

[17:32] * fsergot will be back later

[17:32] <fsergot> o/

[17:42] *** MayDaniel left
[17:42] *** JimmyZ left
[17:45] <dalek> specs: 907649f | larry++ | S (2 files):

[17:45] <dalek> specs: dig up 'as' fossils found by fsergot++

[17:45] <dalek> specs: 

[17:45] <dalek> specs: These fossils will now be curated by the Github Museum.

[17:45] <dalek> specs: review: https://github.com/perl6/specs/commit/907649f122

[17:48] <TimToady> .oO(the making of coprolites is one way of reducing the design smell)

[17:48] *** skids left
[17:51] *** Tedd1 left
[17:56] *** seanstickle joined
[17:56] *** Tedd1 joined
[17:56] <cognominal> less tasty for the coprophages, though

[17:57] *** fglock joined
[17:57] <fglock> o/

[17:58] <TimToady> \o

[17:59] <fglock> is http://perlcabal.org/syn/ up to date?

[17:59] *** gfldex left
[17:59] <colomon> fglock: considering the spec changed 15 minutes ago, probably not

[17:59] <fglock> :P

[18:00] <fglock> I'm looking to the perl6 equivalent to perl5 "ref()"

[18:00] <fglock> get the class name as a astring

[18:00] <fglock> string

[18:01] <moritz> .WHAT.gist

[18:01] *** gfldex joined
[18:01] <moritz> in rakudo, one can also write $obj.^name

[18:01] <moritz> nom: say 1.^name

[18:01] <p6eval> nom 4f0ed5: OUTPUT«Int␤»

[18:01] <moritz> nom: say 1.WHAT.perl

[18:01] <p6eval> nom 4f0ed5: OUTPUT«Int␤»

[18:02] <fglock> $x.WHAT.perl seems to work best, it doesn't append "()"

[18:02] <fglock> thanks

[18:05] *** havenn joined
[18:09] <TimToady> note that the string cannot be used as a class name without some care

[18:10] <TimToady> p6 is much pickier about symbolic references

[18:11] <TimToady> if you say "Int".bless you're going to end up with a Str

[18:11] <moritz> perl6: say ::('Int').new.WHAT

[18:11] <p6eval> pugs b927740: OUTPUT«Int␤»

[18:11] <p6eval> ..rakudo 4f0ed5, niecza v14-72-gf99bd59: OUTPUT«Int()␤»

[18:12] <TimToady> perl6: say ::(Int).new.WHAT;  # curious

[18:12] <p6eval> rakudo 4f0ed5: OUTPUT«use of uninitialized value of type Int in string context␤Not enough positional parameters passed; got 1 but expected 2␤  in method new at src/gen/CORE.setting:7543␤  in block <anon> at /tmp/Sn2h_5_TGM:1␤␤»

[18:12] <p6eval> ..pugs b927740: OUTPUT«Int␤»

[18:12] <p6eval> ..niecza v14-72-gf99bd59: OUTPUT«Any()␤»

[18:13] <TimToady> some disagreement there :)

[18:13] * TimToady wonders if ::() should allow a hardref fallback on non-strings

[18:15] <TimToady> I suppose one could always write ::( $x ~~ Str ?? $x :: $x.WHAT.perl ) though

[18:15] <TimToady> doubtless a p5-to-p6 translator would want to macroize a number of p5 sloppinesses like that

[18:16] *** Teratogen left
[18:16] *** Teratogen joined
[18:18] <TimToady> actually, it would probably want to recognize the ref($x) || $x idiom and refactor it to the opposite in p6

[18:20] <TimToady> ($x ~~ Stringy ?? $x.WHAT !! $x).bless or some such

[18:20] <TimToady> and I see I used :: instead of !! the previous example :)

[18:24] <TimToady> bbl &

[18:25] <fglock> rakudo: class X { 123 }; my $v = {}; X.bless($v); $v.WHAT.perl

[18:25] <p6eval> rakudo 4f0ed5:  ( no output )

[18:26] <fglock> rakudo: class X { 123 }; my $v = {}; X.bless($v); say $v.WHAT.perl

[18:26] <p6eval> rakudo 4f0ed5: OUTPUT«Hash␤»

[18:28] <TimToady> rakudo: class X { 123 }; my $v = {}; X.bless($v).WHAT.say

[18:28] <p6eval> rakudo 4f0ed5: OUTPUT«Hash()␤»

[18:29] <TimToady> things like reblessing are usually done by mixins in P6

[18:30] <TimToady> rakudo: role X { 123 }; my $v = {}; ($v but X).WHAT.say

[18:30] <p6eval> rakudo 4f0ed5: OUTPUT«Hash+{X}()␤»

[18:30] <TimToady> &

[18:30] <fglock> TimToady: thanks

[18:33] <fglock> probably evil perl5-ish "bless":

[18:33] <fglock> rakudo: role X { 123 }; my $v = {}; $v but= eval "X"; $v.WHAT.say

[18:33] <p6eval> rakudo 4f0ed5: OUTPUT«Hash+{X}()␤»

[18:34] <fglock> perl6: role X { 123 }; my $v = {}; $v but= eval "X"; $v.WHAT.say

[18:34] <p6eval> rakudo 4f0ed5: OUTPUT«Hash+{X}()␤»

[18:34] <p6eval> ..pugs b927740: OUTPUT«*** Cannot cast from VStr "Land der Berge, Land am Strome," to VCode (VCode)␤    at Prelude.pm line 541, column 5-16␤»

[18:34] <p6eval> ..niecza v14-72-gf99bd59: OUTPUT«===SORRY!===␤␤Cannot make assignment out of but because structural infix operators are diffy at /tmp/AB3a5gpaly line 1:␤------> role X { 123 }; my $v = {}; $v but=⏏ eval "X"; $v.WHAT.say␤␤Unhandled exception: Check fail…

[18:36] <fglock> perl6: sub bless ($v is rw, $class) { $v = $v but eval $class }; role X { 123 }; my $v = {}; bless($v, "X"); $v.WHAT.say

[18:37] <p6eval> niecza v14-72-gf99bd59: OUTPUT«Unhandled exception: Role(s) being mixed in do not define precisely one, public attribute␤  at /home/p6eval/niecza/lib/CORE.setting line 1317 (infix:<does> @ 10) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1320 (infix:<but> @ 3) ␤  at /tmp/adPmhkWLWE l…

[18:37] <p6eval> ..pugs b927740: OUTPUT«*** Must only use named arguments to new() constructor␤    Be sure to use bareword keys.␤    at Prelude.pm line 541, column 5-16␤»

[18:37] <p6eval> ..rakudo 4f0ed5: OUTPUT«Hash+{X}()␤»

[18:37] <fglock> rakudo loves me more

[18:41] <fglock> maybe I could just create an object that contains the hash/array/scalar as an attribute

[18:47] *** Tedd1 left
[18:48] *** Tedd1 joined
[18:49] *** havenn left
[18:49] *** Tedd1 left
[18:50] <fglock> perl6: sub bless ($v is rw, $class) { $v = (eval $class).new(val=>$v) }; class X { has $.val }; my $v = {}; bless($v, "X"); $v.WHAT.say

[18:50] <p6eval> pugs b927740: OUTPUT«X␤»

[18:50] <p6eval> ..rakudo 4f0ed5, niecza v14-72-gf99bd59: OUTPUT«X()␤»

[18:51] <fglock> niecza: sub bless ($v is rw, $class) { $v = (eval $class).new(val=>$v) }; class X { has $.val }; my $v = {}; bless($v, "X"); $v.WHAT.say

[18:51] <p6eval> niecza v14-72-gf99bd59: OUTPUT«X()␤»

[18:51] <fglock> yay!

[18:52] *** havenn joined
[18:58] *** birdwindupbird joined
[19:07] *** xinming left
[19:08] *** xinming joined
[19:11] *** xinming_ joined
[19:11] *** xinming left
[19:28] <sorear> good * #perl6

[19:28] <phenny> sorear: 15:40Z <colomon> tell sorear Looking at GLib.Process.SpawnSync  for implementing run.  Do you have a suggested way to get GLib into niecza's core?  We could handle it the same way we do in the Gtk scripts, but I'm not sure if that's appropriate for the core....

[19:28] <sorear> fglock: \o/!! long time no see

[19:28] <sorear> fglock: how's perlito?

[19:28] <fglock> hi sorear!

[19:29] <fglock> I'm now working on the perl5-to-perl6 backend

[19:29] <fglock> perlito6 is getting very little attention these days :(

[19:29] <sorear> phenny: tell colomon I had in mind using a reflective load, falling back to ShellQuote if glib is not available try { Type.GetType("GLib.Process,glib more-bits") } catch(...) { ... }

[19:29] <phenny> sorear: I'll pass that on when colomon is around.

[19:32] <fglock> sorear: I'm looking for idioms in perl6 that behave like perl5's bless(), ref(), and so on

[19:33] <fglock> so that I can bootstrap the perl5 compiler in a perl6 backend

[19:34] <fglock> that is, run perl5 "natively" in a perl6 environment

[19:35] <sorear> that'll be a problem - there's nothing in native Perl 6 that behaves quite like bless()

[19:36] <fglock> see my test a few lines above - it seems to work

[19:36] <fglock> it wraps the hash in an object

[19:36] <sorear> I've been intending for a while to add a p5 compatibility mode to niecza's core VM, with, among other things, a p5 metaobject and bless

[19:36] <sorear> fglock: that's not at all how p5's bless works

[19:37] <sorear> p5's bless does not create objects

[19:37] <sorear> it changes the type of existing objects

[19:37] <sorear> a p5 hash is a typeless object, so you can't call methods against it

[19:37] <sorear> after bless(), all existing references continue to point to the same object, which now has a type

[19:38] <sorear> eval: package Foo; sub bar { 5 }; my $obj = { }; package main; bless $obj, 'Foo'; say $foo->bar

[19:38] <buubot_backup> sorear: ERROR: Can't call method "say" on an undefined value at (eval 20) line 1. 

[19:38] <sorear> eval: package Foo; sub bar { 5 }; my $obj = { }; package main; bless $obj, 'Foo'; print $foo->bar

[19:38] <buubot_backup> sorear: ERROR: Can't call method "bar" on an undefined value at (eval 20) line 1. 

[19:38] <fglock> I'm planning to use several levels of indirection to simulate that

[19:38] <sorear> eval: package Foo; sub bar { 5 }; my $obj = { }; package main; bless $obj, 'Foo'; print $obj->bar

[19:38] <buubot_backup> sorear: 51

[19:38] *** snearch left
[19:39] <fglock> it's the same problem in the javascript backend

[19:39] <fglock> "REF" will probably need to be a class itself

[19:40] <fglock> but a native p5 VM in dotnet would be very useful for perlito5

[19:41] <felher> After i had some luck finding fossils by searching for <as>, which were then removed by TimToady++, i searched with some other regexes and found a few typos. I will fix and commit them if someone tells me if the first two really are errors and that if i fixed them correctly.

[19:41] <felher> typos: http://paste.pocoo.org/show/556652/

[19:44] <fglock> niecza: sub bless ($v is rw, $class) { $v = (eval $class).new(val=>$v) }; class X { has $.val; method bar { 5 } }; my $v; bless($v, "X"); say $v.bar

[19:44] <p6eval> niecza v14-72-gf99bd59: OUTPUT«5␤»

[19:45] <fglock> $v is not really a reference in the line above; the actual implementation would be more complicated

[19:45] *** havenn left
[19:46] * [Coke] wonders how he got a merge commit in roast. whoops.

[19:46] <sorear> git pull?

[19:46] <sorear> felher: "git diff" output would have been easier to scan.

[19:47] <fglock> eval() and double-pointers will make things slower

[19:47] <fglock> I hope to find a better alternative

[19:47] <sorear> fglock: Why aren't you using ::()

[19:47] <sorear> ?

[19:47] <felher> sorear: okay, one moment :)

[19:48] <fglock> ah, that works - thanks!

[19:48] <sorear> felher: First is a typo, second is no.

[19:48] <sorear> not.

[19:50] <TimToady> whoops, felher++, wrong attribution...

[19:51] <felher> TimToady: np :)

[19:51] <TimToady> too many f-words :)

[19:51] <fglock> I also probably need REF-objects because ( @a.WHAT ) is the same as ( my $a = []; $a.WHAT )

[19:52] <fglock> so bless() will be a double-wrap

[19:53] <TimToady> maybe we just need an SV type in P6 :/

[19:53] *** not_gerd joined
[19:53] <[Coke]> perl6: eval die

[19:53] <p6eval> niecza v14-72-gf99bd59: OUTPUT«Unhandled exception: Died␤  at /home/p6eval/niecza/lib/CORE.setting line 1360 (die @ 3) ␤  at /tmp/eN5w25xrVD line 1 (mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3830 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3831 (module…

[19:53] <p6eval> ..rakudo 4f0ed5: OUTPUT«␤  in block <anon> at /tmp/oPMRaOPCPh:1␤␤»

[19:53] <p6eval> ..pugs b927740: OUTPUT«*** Died␤    at /tmp/FjfzLLYgYB line 1, column 6 - line 2, column 1␤»

[19:54] <felher> sorear: so "To capture to an outer lexical variable" is better than "To capture an outer lexical variable"? (if it isn't and just looked like it was in pastebin, i know that i should have given more context - or should have pasted a diff as you said in the first place :) )

[19:55] <not_gerd> nom: role Foo { method bar { say self<spam>; } }; sub bless5 ($obj, $role) { $obj does ::($role) }; bless5({ spam => 'eggs' }, 'Foo').bar;

[19:55] <p6eval> nom 4f0ed5: OUTPUT«eggs␤»

[19:56] <not_gerd> hello, #perl6

[19:56] <felher> o/

[19:57] <fglock> not_gerd++

[19:58] <colomon> sorear++ # not that I'm fully sure I understand that, but at least it's a place to start!

[19:58] <phenny> colomon: 19:29Z <sorear> tell colomon I had in mind using a reflective load, falling back to ShellQuote if glib is not available try { Type.GetType("GLib.Process,glib more-bits") } catch(...) { ... }

[20:00] *** pmurias joined
[20:01] <TimToady> felher: the 'capture to an outer' in S05 is probably a fossil anyway from before we had :my

[20:01] <pmurias> TimToady: we have a sort of SV type in niecza already which holds a p5 SV for interop purposes

[20:01] <phenny> pmurias: 07:37Z <sorear> tell pmurias It would be nice if you could add a description of your latest p5 interop stuff to announce.v15 sometime before Tue Feb 28 08:00:00 UTC 2012

[20:01] <fglock> not_gerd: why does it work, if the $obj argument to bless5 is not rw - I think aguments are not rw by default?

[20:01] <pmurias> fglock: hi

[20:01] <fglock> pmurias: hi!

[20:03] <TimToady> pmurias:  I presume that in P6 your SV is always an object, unlike in P5, and that the SV's methods will reflect many of the internal APIs of P5's SVs

[20:03] <au> fglock: $obj is not writable, but its content is

[20:03] <au> niecza: role Foo { method bar { say self<spam>; } }; sub bless5 ($obj, $role) { $obj = "not writable" }; bless5({ spam => 'eggs' }, 'Foo').bar;

[20:04] <p6eval> niecza v14-72-gf99bd59: OUTPUT«Potential difficulties:␤  $role is declared but not used at /tmp/oB49Aiud8K line 1:␤------>  say self<spam>; } }; sub bless5 ($obj, ⏏$role) { $obj = "not writable" }; bless5␤␤Unhandled exception: assigning to readonly value␤  at /tmp/oB4…

[20:04] *** whiteknight left
[20:04] <au> (i.e. a readonly hash value is still a mutable hash)

[20:05] <TimToady> alas :)

[20:05] <felher> TimToady: ah, great. Than i leave it as is for people who know what they are doing :)

[20:06] <pmurias> TimToady: currently it tries to expose a perl6ish interface, but a raw one could be helpfull too

[20:06] <sorear> felher: "To capture to an outer lexical variable" and "To capture an ..." mean completely different things

[20:06] * TimToady looks around to see if there's anyone here who knows what they're doing...

[20:06] <sorear> felher: in the former, "an ..." is an indirect object, in the latter it is a direct object

[20:07] <pmurias> TimToady: that's a wrong approach?

[20:07] <sorear> the direct object of "capture" in a S05 context is always some submatch, never a variable, so the latter form is semantically wrong

[20:07] <TimToady> pmurias: I'd guess it would be a hybrid of both

[20:08] <TimToady> and the 6ish bits would be built on 5ish bits that might or might not be accessible

[20:08] <felher> sorear: ah, big thanks for the explanation :)

[20:08] <sorear> pmurias: it's a fine approach but it's not relevant here

[20:09] <sorear> pmurias: fglock is looking to support Perl 5 directly at the C#/NQP/Perl6 level, *NOT* by linking to libperl

[20:10] <pmurias> sorear: i know ;)

[20:11] <pmurias> sorear: targeting C#/libperl would make much sense

[20:11] <sorear> fglock: the 'SimpleVariable' type in Niecza's core is conciously modelled on SV.

[20:11] <pmurias> sorear: wouldn't

[20:12] * jnthn home from $trip

[20:12] <sorear> fglock: it doesn't have all the features that are needed for P5, so a 'P5Variable' class is likely needed; both would inherit from the 'Variable' class (which already exists, and is used for TiedVariable)

[20:12] <sorear> Perl 6 has the nice feature that a variable can't switch between tied and not-tied after creation

[20:13] <sorear> o/ jnthn 

[20:13] <dalek> specs: d5f5207 | larry++ | S05-regex.pod:

[20:13] <dalek> specs: remove autodeclaration fossil from regex

[20:13] <dalek> specs: review: https://github.com/perl6/specs/commit/d5f5207ec5

[20:14] * TimToady read that as "jnthn home from strip"

[20:15] *** silug joined
[20:15] <TimToady> sorear: and P5 has the nice feature that it can (albeit with dire performance implications)

[20:16] <jnthn> TimToady: Ouch...well, depending on what meaning of strip you parsed it as :P

[20:16] <TimToady> well, the Vegas Strip is pretty painful...

[20:17] <jnthn> Indeed. Vegas, I discovered, was one of those places worth visiting once in a lifetime. *Only* once. :)

[20:17] <sorear> ȷnthn

[20:17] <dalek> specs: 0698449 | (Felix Herrmann)++ | S (6 files):

[20:17] <dalek> specs: fix a few typos

[20:17] <dalek> specs: review: https://github.com/perl6/specs/commit/0698449411

[20:17] <TimToady> but I will admit it was probably some freudian neuron that decided to read it as "strip"

[20:18] <Teratogen> Is it true that if you wander into a casino bar in Las Vegas, sit down and have a drink, almost immediately a hawt woman escort will be sitting next to you?

[20:18] <au> probably the same state-of-neurons that coded the original $calar @rray %ash mnemonic...

[20:19] * sorear begins looking into ways to hack the mono heap profiler

[20:20] * jnthn looks at the schedule for next week and sees two whole days just for doing Perl 6 stuff on it. o/

[20:20] <TimToady> Teratogen: no, for many values of no

[20:21] <sorear> my misogyny sense is tingling

[20:21] <TimToady> that's one of the values of no

[20:22] <Teratogen> Well ok then! =(

[20:24] * au goes headsdown a bit hacking some %@$&#|| code for $job

[20:24] <TimToady> HTAAOF

[20:24] <sorear> au: <3 J

[20:25] <TimToady> sorear: then why haven't you implemented S09 yet? :P

[20:26] <sorear> because I <3 other things more :P

[20:26] * TimToady knows the feelin'

[20:26] <au> (that "%@$&#||" was 31337 encoding for "haskell", btw, although J would be a fine language for the task too :p)

[20:27] <sorear> also, I've gotten hung up on the details of the @a[||@b] syntax - I have a problem with forests and trees

[20:27] * TimToady is dense, and didn't get au++'s 1337ness

[20:28] <sorear> 1337: still looks to me like a large prime number rather than words

[20:29] <sorear> and apparently my visual cortex ain't that great at recognizing primes either...

[20:29] <au> was about to say 7 * 191 :)

[20:29] <TimToady> the & is kind of a stretch, but %@S is great

[20:29] <TimToady> %@$ even

[20:29] <TimToady> maybe !! for the ll though

[20:29] <TimToady> to make it look more like swearing, of course

[20:30] *** abercrombie joined
[20:37] <fglock> p5-to-p6 passes 76 tests out of 165 - and low hanging fruits are getting higher

[20:41] <sorear> bleh.  MONO_GC_DEBUG='heap-dump=...' output doesn't include field values

[20:43] <sorear> time to do some *really* evil stuff and write a custom parser for log-profiler binary output.mlpd files

[20:44] *** silug left
[20:44] *** Jerkwad left
[20:44] *** revdiablo left
[20:44] *** wooden left
[20:44] *** preflex left
[20:44] *** felher left
[20:44] *** buubot_backup left
[20:44] *** pothos left
[20:44] *** BooK_ left
[20:44] *** SHODAN left
[20:44] *** nsh left
[20:44] *** phenny left
[20:44] *** clkao left
[20:44] *** rhr left
[20:44] *** zamolxes left
[20:44] *** chra left
[20:45] *** silug joined
[20:45] *** Jerkwad joined
[20:45] *** revdiablo joined
[20:45] *** wooden joined
[20:45] *** preflex joined
[20:45] *** felher joined
[20:45] *** buubot_backup joined
[20:45] *** pothos joined
[20:45] *** BooK_ joined
[20:45] *** SHODAN joined
[20:45] *** nsh joined
[20:45] *** phenny joined
[20:45] *** clkao joined
[20:45] *** rhr joined
[20:45] *** zamolxes joined
[20:45] *** chra joined
[20:45] *** pothos left
[20:46] *** pothos joined
[20:46] *** fglock left
[20:48] <[Coke]> I'm seeing a lot of class comparisons of {{ random.WHAT.gist }} to {{ Type.gist }} - is that the desired comparison, or can we just compare .WHAT to Type ?

[20:53] <sorear> It's a workaround for the fact that some compilers implement is using .Str, and all type objects .Str to ""

[20:55] *** noam left
[20:56] *** noam joined
[21:01] <au> whee, perlito-p5-to-p6 passes 83 out of 165 on niecza-14 -- more than halfway there

[21:01] <au> fglock++

[21:10] *** MayDaniel joined
[21:17] <dalek> rakudo/bs: 71afcfc | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[21:17] <dalek> rakudo/bs: Missed setting of scalar container type, which has to be outside of the bootstrap BEGIN.

[21:17] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/71afcfc7f0

[21:17] <dalek> rakudo/bs: 773135b | jnthn++ | src/Perl6/Actions.pm:

[21:17] <dalek> rakudo/bs: Disable create_lexical_capture_fixup for now - needs redoing but hopefully can think of something better...

[21:17] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/773135b54f

[21:18] *** unobe left
[21:19] *** unobe joined
[21:24] *** proller_ left
[21:24] <dalek> roast: 1b91866 | coke++ | S (2 files):

[21:24] <dalek> roast: Convert to explicit plan

[21:24] <dalek> roast: review: https://github.com/perl6/roast/commit/1b91866205

[21:24] <dalek> roast: 545136e | coke++ | / (8 files):

[21:24] <dalek> roast: pugs fudge

[21:24] <dalek> roast: review: https://github.com/perl6/roast/commit/545136e3ee

[21:25] <dalek> Pugs.hs: 0475e80 | coke++ | t/spectest.data:

[21:25] <dalek> Pugs.hs: run fudged tests

[21:25] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/0475e80acd

[21:25] *** birdwindupbird left
[21:26] * fsergot is back

[21:28] *** NamelessTee left
[21:29] <jnthn> o/ fsergot 

[21:29] <fsergot> o/ jnthn

[21:34] <dalek> rakudo/bs: 77f5f86 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[21:34] <dalek> rakudo/bs: Ensure that default stash types get set up. Gets us somewhat further (to about line 2000) into building CORE.setting.

[21:34] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/77f5f86dd7

[21:35] <dalek> roast: 454fdc3 | coke++ | S0 (2 files):

[21:35] <dalek> roast: pugs fudge

[21:35] <dalek> roast: review: https://github.com/perl6/roast/commit/454fdc33e1

[21:35] <dalek> Pugs.hs: 843ce54 | coke++ | t/spectest.data:

[21:35] <dalek> Pugs.hs: run fudged tests

[21:35] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/843ce545d8

[21:36] *** NamelessTee joined
[21:39] <[Coke]> "pugs"  ,      4023,     5,  1849,   164,  6041, 23430

[21:39] <[Coke]> so, I'll get it up to 20% by the weekend.

[21:39] <TimToady> when will it get to ++?  :)

[21:40] <[Coke]> that will require haskell programmers.

[21:40] <[Coke]> so far I've just been fudging tests. and I wrote a one line p6 function.

[21:41] <[Coke]> biggest lack I see right now is .gist

[21:41] <[Coke]> (and eval_lives_ok)

[21:41] *** PacoAir left
[21:42] *** PacoAir joined
[21:42] *** PacoAir left
[21:42] *** havenn joined
[21:42] *** PacoAir joined
[21:45] *** havenn_ joined
[21:45] *** havenn left
[21:50] *** thou joined
[21:53] *** thou left
[21:55] *** pmurias left
[21:57] *** y3llow left
[21:57] *** pothos left
[21:58] <dalek> nqp/bs: 9484f10 | jnthn++ | src/6model/serialization.c:

[21:58] <dalek> nqp/bs: Be sure deserialized closures are tagged with the SC they came from.

[21:58] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/9484f10f5e

[21:58] *** not_gerd left
[21:59] *** y3llow joined
[21:59] *** pothos joined
[22:01] *** y3llow left
[22:01] *** y3llow joined
[22:02] *** pothos left
[22:02] *** pothos joined
[22:03] *** y3llow left
[22:04] *** y3llow joined
[22:05] *** pothos left
[22:05] *** pothos joined
[22:05] *** aindilis` left
[22:06] *** y3llow left
[22:06] *** y3llow joined
[22:06] *** packetknife joined
[22:07] *** packetknife left
[22:08] *** mj41 joined
[22:12] <dalek> nqp/bs: 2ef1915 | jnthn++ | src/6model/serialization.c:

[22:12] <dalek> nqp/bs: D'oh...the serializer forgot to tag an outer context after it had seen it, meaning that we re-serialized it for every closure that pointed to it. This not only bulked up the serialization, but also busted stuff.

[22:12] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/2ef1915b07

[22:16] <dalek> rakudo/bs: fc64d28 | jnthn++ | src/Perl6/Metamodel/MultiMethodContainer.pm:

[22:16] <dalek> rakudo/bs: Improve a failure mode (though it seems hitting this failure mode is bogus...)

[22:16] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/fc64d2884f

[22:16] <dalek> rakudo/bs: aac93a1 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[22:16] <dalek> rakudo/bs: Move default parent type registration out of the bootstrap BEGIN. With this and the nqp/bs fixes it seems we make it through the parse/actions/object building of CORE.setting and explode right at the end (though that does *not* mean this is virtually done - still some trickiness to come!)

[22:16] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/aac93a19ec

[22:26] *** PZt left
[22:32] *** dukeleto left
[22:33] *** dukeleto joined
[22:33] *** dukeleto left
[22:33] *** dukeleto joined
[22:33] *** dukeleto left
[22:34] *** dukeleto joined
[22:34] *** dukeleto left
[22:34] *** dukeleto joined
[22:34] *** dukeleto left
[22:35] *** dukeleto joined
[22:35] *** dukeleto left
[22:35] *** dukeleto joined
[22:35] *** dukeleto left
[22:36] *** NamelessTee left
[22:36] *** dukeleto joined
[22:36] *** dukeleto left
[22:36] *** NamelessTee joined
[22:36] *** dukeleto joined
[22:36] *** dukeleto left
[22:37] *** dukeleto joined
[22:37] *** dukeleto left
[22:37] *** dukeleto joined
[22:37] *** dukeleto left
[22:38] *** dukeleto joined
[22:38] *** dukeleto left
[22:38] *** dukeleto joined
[22:38] *** dukeleto left
[22:39] *** dukeleto joined
[22:39] *** dukeleto left
[22:39] <dalek> rakudo/bs: ea2f595 | jnthn++ | src/Perl6/World.pm:

[22:39] <dalek> rakudo/bs: Re-organize/update Perl6::World.to_past so it actually calls the serializer and follows the new HLL::World API.

[22:39] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/ea2f595e07

[22:39] <dalek> rakudo/bs: 799d6c0 | jnthn++ | src/pmc/perl6lexinfo.pmc:

[22:39] <dalek> rakudo/bs: Update Perl6LexInfo to keep hold of the static code ref, just like NQPLexInfo does.

[22:39] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/799d6c0b7a

[22:39] *** dukeleto joined
[22:40] *** dukeleto left
[22:40] <dalek> nqp/bs: 894a1f7 | jnthn++ | src/6model/serialization.c:

[22:40] <dalek> nqp/bs: Enable handling of Perl6LexInfo instead of NQPLexInfo (perhaps wants some kinda better mechanism at some point).

[22:40] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/894a1f7bee

[22:40] *** dukeleto joined
[22:40] *** dukeleto left
[22:41] *** dukeleto joined
[22:41] *** dukeleto left
[22:41] *** dukeleto joined
[22:41] *** dukeleto left
[22:42] *** dukeleto joined
[22:42] *** dukeleto left
[22:42] *** dukeleto joined
[22:42] *** dukeleto left
[22:43] *** dukeleto joined
[22:43] *** dukeleto left
[22:43] *** dukeleto joined
[22:43] *** dukeleto left
[22:44] *** dukeleto joined
[22:44] *** dukeleto left
[22:44] *** dukeleto joined
[22:44] *** dukeleto left
[22:45] *** dukeleto joined
[22:45] *** dukeleto left
[22:45] *** dukeleto joined
[22:45] *** dukeleto left
[22:46] *** dukeleto joined
[22:46] *** dukeleto left
[22:46] *** dukeleto joined
[22:46] *** dukeleto left
[22:47] *** dukeleto joined
[22:47] *** dukeleto left
[22:47] *** dukeleto joined
[22:47] *** dukeleto left
[22:48] *** dukeleto joined
[22:48] *** dukeleto left
[22:48] *** dukeleto joined
[22:48] *** dukeleto left
[22:49] *** dukeleto joined
[22:49] *** dukeleto left
[22:50] *** dukeleto joined
[22:50] *** dukeleto left
[22:50] *** dukeleto joined
[22:50] *** dukeleto left
[22:51] *** dukeleto joined
[22:51] *** dukeleto left
[22:51] *** dukeleto joined
[22:51] *** dukeleto left
[22:51] *** kaare_ left
[22:52] *** dukeleto joined
[22:52] *** dukeleto left
[22:52] *** dukeleto joined
[22:52] *** dukeleto left
[22:53] *** dukeleto joined
[22:53] *** dukeleto left
[22:53] *** dukeleto joined
[22:53] *** dukeleto left
[22:54] *** dukeleto joined
[22:54] *** dukeleto left
[22:54] *** dukeleto joined
[22:54] *** dukeleto left
[22:55] *** dukeleto joined
[22:55] *** dukeleto left
[22:55] *** dukeleto joined
[22:55] *** dukeleto left
[22:56] *** dukeleto joined
[22:56] *** dukeleto left
[22:56] *** dukeleto joined
[22:56] *** ksi joined
[22:59] *** seanstickle left
[23:02] *** daemon left
[23:04] *** daemon joined
[23:22] *** marmalade joined
[23:23] *** noam_ joined
[23:24] *** Jerkwad left
[23:26] *** noam left
[23:28] *** havenn_ left
[23:39] *** havenn joined
[23:54] *** ribayr joined
