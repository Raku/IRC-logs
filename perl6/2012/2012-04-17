[00:02] *** flussence joined
[00:04] *** envi_ joined
[00:05] * colomon just added ties to the abc2ly.pl script in the ABC module.  Too easy!

[00:08] *** lestrrat joined
[00:21] *** bbkr joined
[00:25] *** plobsing joined
[00:26] *** espadrine joined
[00:26] <colomon> r: my $a = "hello "; $a.subst(/\s+$/, ")$0"); say $a;

[00:26] <p6eval> rakudo c4f9b1: OUTPUT«hello ␤»

[00:26] <colomon> r: my $a = "hello "; $a.subst(/\s+$/, "boo"); say $a;

[00:26] <p6eval> rakudo c4f9b1: OUTPUT«hello ␤»

[00:27] <colomon> n: my $a = "hello "; $a.subst(/\s+$/, "boo"); say $a;

[00:27] <p6eval> niecza v16-21-g1b64073: OUTPUT«hello ␤»

[00:27] * colomon wonders what stupid mistake he is now making

[00:27] <colomon> n: my $a = "hello "; $a.subst(/\s+/, "boo"); say $a;

[00:27] <p6eval> niecza v16-21-g1b64073: OUTPUT«hello ␤»

[00:27] <colomon> doh!

[00:27] <colomon> n: my $a = "hello "; say $a.subst(/\s+/, "boo");

[00:27] <p6eval> niecza v16-21-g1b64073: OUTPUT«helloboo␤»

[00:28] <colomon> n: my $a = "hello "; say $a.subst(/\s+$/, "boo");

[00:28] <p6eval> niecza v16-21-g1b64073: OUTPUT«helloboo␤»

[00:28] <colomon> n: my $a = "hello "; say $a.subst(/\s+$/, "boo$_");

[00:28] <p6eval> niecza v16-21-g1b64073: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/lib/CORE.setting line 1223 (warn @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 235 (Mu.Str @ 10) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.settin…

[00:28] <colomon> n: my $a = "hello "; say $a.subst(/\s+$/, "boo$/");

[00:28] <p6eval> niecza v16-21-g1b64073: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/lib/CORE.setting line 1223 (warn @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 235 (Mu.Str @ 10) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.settin…

[00:28] <colomon> n: my $a = "hello "; say $a.subst(/(\s+)$/, "boo$[0]");

[00:28] <p6eval> niecza v16-21-g1b64073: OUTPUT«===SORRY!===␤␤Non-variable $ must be backslashed at /tmp/p1dePGaETt line 1:␤------>  = "hello "; say $a.subst(/(\s+)$/, "boo⏏$[0]");␤␤Parse failed␤␤»

[00:28] <colomon> n: my $a = "hello "; say $a.subst(/(\s+)$/, "boo$0");

[00:28] <p6eval> niecza v16-21-g1b64073: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/lib/CORE.setting line 1223 (warn @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 235 (Mu.Str @ 10) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.settin…

[00:29] *** wolfman2000 joined
[00:29] <TimToady> "boo$0" is evaluated before the .subst is called

[00:31] <colomon> TimToady++

[00:31] <colomon> n: my $a = "hello "; say $a.subst(/(\s+)$/, { "boo$0" });

[00:31] <p6eval> niecza v16-21-g1b64073: OUTPUT«helloboo ␤»

[00:31] <colomon> r: my $a = "hello "; say $a.subst(/(\s+)$/, { "boo$0" });

[00:31] <p6eval> rakudo c4f9b1: OUTPUT«helloboo␤»

[00:34] <colomon> TimToady: and now slurs work too in the abc2ly, thanks to you.

[00:35] *** zhutingting joined
[00:39] <TimToady> just so they're PC slurs

[00:39] *** raiph joined
[00:41] <colomon> Mac, actually.  ;)

[00:50] <lichtkind> good night

[00:50] <lichtkind> separated glossary and main index + some other improvements that took unearthly efforts

[01:00] * [Coke] is reminded by the impending parrot release that he's up for rakudo this week.

[01:02] *** drbean joined
[01:05] <[Coke]> rakudo release coming up: please update the ChangeLog/ROADMAP, etc.

[01:05] <[Coke]> I am tempted to use my home PM for the name this month.

[01:05] *** scott____ joined
[01:06] <[Coke]> but will probably use Brazos Valley

[01:10] *** envi_ left
[01:24] *** raiph left
[01:28] <dalek> rakudo/nom: 424936c | coke++ | docs/announce/2012.04:

[01:28] <dalek> rakudo/nom: Add preliminary release announcement

[01:28] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/424936c740

[01:46] *** PZt joined
[01:48] *** wolfman2000 left
[01:55] *** espadrine left
[01:55] *** whiteknight left
[01:58] *** pjcj joined
[01:58] *** buubot_backup joined
[02:01] *** orafu joined
[02:12] *** uvtc joined
[02:14] *** godfrey999 joined
[02:22] *** bbkr left
[02:23] *** bbkr joined
[02:24] <uvtc> Anyone know if the [cheatsheet](https://raw.github.com/perl6/mu/master/docs/Perl6/Cheatsheet/cheatsheet.txt) is currently up-to-date?

[02:25] <sorear> I think it is

[02:26] <uvtc> I don't see "gather/take" on it. Excuse my ignorance, but should it be on there?

[02:27] <sorear> you'd have to ask TimToady; I know for a fact it was updated more recently than gather/take was added

[02:27] <sorear> I think last year

[02:27] <sorear> (there have no major syntax changes since then)

[02:27] <uvtc> Thanks, sorear.

[02:29] *** tokuhirom left
[02:55] *** raiph joined
[02:59] *** orafu left
[02:59] *** orafu joined
[03:08] <colomon> oh noez, seg fault in the ABC code (under Rakudo)

[03:13] <colomon> intermittent seg faults.  sigh.

[03:16] *** cognominal_ joined
[03:32] *** bbkr_ joined
[03:33] *** bbkr left
[03:41] *** jaldhar joined
[03:50] *** kborer joined
[03:59] *** mucker joined
[04:02] *** raiph left
[04:12] *** mucker left
[04:16] *** Qiang joined
[04:17] *** Qiang left
[04:33] *** envi_ joined
[04:49] *** raiph joined
[04:50] <raiph> phenny, tell lichtkind i chatted with uvtc. i agreed to do the lookup-to-index (b2a) etc. links to complete his conversion to Pandoc-Markdown. Then we can use that instead of socialtext or raw html.

[04:50] <phenny> raiph: I'll pass that on when lichtkind is around.

[04:51] <raiph> phenny, tell lichtkind if we go this route (please!) we'll want moritz to create a perl6 repo from http://www.unexpected-vortices.com/temp/tablet-docs.tar.gz (as published at http://www.unexpected-vortices.com/perl-6/temp-tablets/introduction.html) and stick to editing that repo. 

[04:51] <phenny> raiph: I'll pass that on when lichtkind is around.

[04:51] *** NamelessTee joined
[04:55] *** raiph left
[05:09] *** birdwindupbird joined
[05:09] *** sivoais joined
[05:11] *** odoacre joined
[05:11] *** Juerd joined
[05:12] *** hugme joined
[05:12] *** ChanServ sets mode: +v hugme

[05:12] *** [Coke] joined
[05:13] *** kaleem joined
[05:19] *** mucker joined
[05:24] *** plobsing left
[05:28] *** GlitchMr joined
[05:37] *** FACEFOX joined
[05:40] *** envi_ left
[05:42] *** machine2 joined
[05:55] *** NamelessTee left
[06:00] *** uvtc left
[06:08] *** lestrrat left
[06:09] *** lestrrat joined
[06:16] *** thou joined
[06:22] *** GlitchMr left
[06:23] *** plobsing joined
[06:26] *** thou_ joined
[06:26] *** thou left
[06:32] *** thou_ left
[06:35] *** thou joined
[06:41] *** thou left
[06:41] *** thou_ joined
[06:48] *** thou_ left
[06:48] *** thou joined
[06:52] *** thou left
[06:55] *** thou joined
[06:59] <tadzik> 52.56% in jaffa4's test

[06:59] <tadzik> I'm curious about the correct answers now

[07:01] *** thou_ joined
[07:01] *** thou left
[07:02] <zhutingting> perl6: multi sub identify(Int $a) { say "Int $a" } identify(42)

[07:02] <p6eval> pugs: OUTPUT«Int 42␤»

[07:02] <p6eval> ..rakudo 424936: OUTPUT«===SORRY!===␤Confused␤at /tmp/aIhOD4CiY0:1␤»

[07:02] <p6eval> ..niecza v16-21-g1b64073: OUTPUT«===SORRY!===␤␤Strange text after block (missing comma, semicolon, comment marker?) at /tmp/bj9v2RJAx7 line 1:␤------> ti sub identify(Int $a) { say "Int $a" }⏏ identify(42)␤␤Parse failed␤␤»

[07:03] <zhutingting> perl6: multi sub identify(Array @a) { say "Array" } identify(1..10)

[07:03] <p6eval> niecza v16-21-g1b64073: OUTPUT«===SORRY!===␤␤Strange text after block (missing comma, semicolon, comment marker?) at /tmp/MEwOon7HDJ line 1:␤------> i sub identify(Array @a) { say "Array" }⏏ identify(1..10)␤Other potential difficulties:␤  @a is decla…

[07:03] <p6eval> ..rakudo 424936: OUTPUT«===SORRY!===␤Confused␤at /tmp/8BBsFbQ3Le:1␤»

[07:03] <p6eval> ..pugs: OUTPUT«Array␤»

[07:04] <sorear> zhutingting: Array @a means an array of arrays

[07:05] <sorear> zhutingting: also, you need a semicolon after the closing brace for p6eval

[07:07] <zhutingting> can perl6bot remember my command?

[07:07] <tadzik> nope

[07:07] <zhutingting> perl6: my $a = 1

[07:07] <p6eval> niecza v16-21-g1b64073: OUTPUT«Potential difficulties:␤  $a is declared but not used at /tmp/KHSfvy4Xe5 line 1:␤------> my ⏏$a = 1␤␤»

[07:07] <p6eval> ..pugs, rakudo 424936:  ( no output )

[07:07] <zhutingting> perl6: $a.say

[07:07] <p6eval> rakudo 424936: OUTPUT«===SORRY!===␤Variable $a is not declared␤at /tmp/h9f2cYNwhx:1␤»

[07:07] <p6eval> ..niecza v16-21-g1b64073: OUTPUT«===SORRY!===␤␤Variable $a is not predeclared at /tmp/YVyELTAXAM line 1:␤------> <BOL>⏏$a.say␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1366 (die @ 3) ␤  at /home/p6eval/niec…

[07:07] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "."␤    expecting "::"␤    Variable "$a" requires predeclaration or explicit package name␤    at /tmp/aYRmYduETq line 1, column 3␤»

[07:07] *** brrt joined
[07:10] <zhutingting> one question about sort

[07:10] <zhutingting> perl6 give Schwartzian Transform for free

[07:11] <tadzik> sort of

[07:11] <zhutingting> so it generates a array ref or a hash %cache?

[07:11] <moritz> that's a statement, not a question

[07:11] <frettled> Well, not entirely.

[07:11] <tadzik> ( H A H A H A )

[07:12] <moritz> zhutingting: actually rakudo doesn't really implement the Schwartzian Transform, but something equivalent which is faster

[07:12] <moritz> zhutingting: it sorts the indexes of the original array

[07:12] <zhutingting> oh perl6 secret sort

[07:12] <moritz> zhutingting: so it doesn't have to allocate a data structure for every single array element

[07:14] *** xinming joined
[07:14] <moritz> see src/core/List.pm lines 243-264

[07:15] <zhutingting> thx moritz ;-)

[07:18] *** machine2 left
[07:18] *** fglock joined
[07:25] *** machine2 joined
[07:26] *** thou_ left
[07:26] *** thou joined
[07:33] *** wtw joined
[07:35] *** tarch joined
[07:37] *** kresike joined
[07:42] *** FACEFOX left
[07:42] *** FACEFOX joined
[07:49] <moritz> meh, chromatic blogs about bugs instead of submitting them

[07:51] <moritz> (doing both would be fine too :-0

[07:51] <moritz> s/0/)/

[07:51] *** thou left
[07:56] <jnthn> mornin'

[07:57] <moritz> \o jnthn 

[07:58] <jnthn> Submitting them would be much wiser. I read the bug tracker.

[07:59] <moritz> in this case it's about a p5 module

[08:05] <jnthn> oh 

[08:11] *** daxim joined
[08:23] <masak> ante-noon, #p6.

[08:23] <arnsholt> Moin, moin

[08:23] *** plobsing left
[08:23] <arnsholt> jnthn: Thanks for the enclueing yesterday

[08:24] <arnsholt> Setting a CArray child now works, but I've somehow triggered a NULL pointer in P6int.c when reading

[08:26] <jnthn> That's...a curious place to trigger a NULL pointer...

[08:26] <moritz> arnsholt: fwiw if your changes to nqp don't cause any regressions in existing code, it would be nice to merge them soonish, because the Rakudo (and thus nqp) release is on Thursday

[08:26] <arnsholt> That's what I thought as well

[08:27] <moritz> great

[08:27] *** dakkar joined
[08:27] <arnsholt> That last was actually intended for jnthn, but yeah. That too

[08:27] <moritz> :-)

[08:27] <jnthn> arnsholt: Stack trace would help

[08:28] <arnsholt> jnthn: 'sec

[08:28] <jnthn> I'm actually at $on-site-client today so can only give this so much attention at the moment.

[08:28] <arnsholt> Sure. I'm probably supposed to do worky stuff as well

[08:29] <jnthn> ;)

[08:30] <arnsholt> https://gist.github.com/2404545

[08:31] <arnsholt> So one thing I mulled over on the subway this morning is the lack of member typing on the CArray child of the CStruct

[08:32] <arnsholt> Had to kill that to stop Rakudo from complaining about type mismatches when binding

[08:33] <moritz> arnsholt: backtrace missing from the gist

[08:33] <moritz> (type bt\n in the debugger, but I guess you know that :-)

[08:34] <arnsholt> Derp

[08:34] <arnsholt> There. Copypasta braino

[08:41] *** bacek joined
[08:49] <zhutingting> perl6: sub star($a, *@a) { @a.say }; star(1, 2, 3);

[08:49] <p6eval> rakudo 424936: OUTPUT«2 3␤»

[08:49] <p6eval> ..pugs: OUTPUT«23␤»

[08:49] <p6eval> ..niecza v16-21-g1b64073: OUTPUT«Potential difficulties:␤  $a is declared but not used at /tmp/PZPMTpZRcK line 1:␤------> sub star(⏏$a, *@a) { @a.say }; star(1, 2, 3);␤␤2 3␤»

[08:50] <zhutingting> perl6: sub star($a, *@a) { @a.say }; star(1..10);

[08:50] <p6eval> niecza v16-21-g1b64073: OUTPUT«Potential difficulties:␤  $a is declared but not used at /tmp/TOF7Qdpz_U line 1:␤------> sub star(⏏$a, *@a) { @a.say }; star(1..10);␤␤␤»

[08:50] <p6eval> ..pugs, rakudo 424936: OUTPUT«␤»

[08:50] *** lestrrat left
[08:50] <zhutingting> how to sent an array as a list not ref in parameter transport?

[08:51] *** mdupont joined
[08:51] <moritz> perl6: sub star($a, *@a) { @a.say }; star | 1..10

[08:51] <p6eval> rakudo 424936: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&prefix:<|>' called (line 1)␤»

[08:51] <p6eval> ..niecza v16-21-g1b64073: OUTPUT«Potential difficulties:␤  $a is declared but not used at /tmp/XEx40Z2rYe line 1:␤------> sub star(⏏$a, *@a) { @a.say }; star | 1..10␤␤Unhandled exception: Unable to resolve method Capture in class Int␤  at /home/p6eval/niecza/lib/CORE.se…

[08:51] <p6eval> ..pugs: OUTPUT«␤»

[08:51] <moritz> perl6: sub star($a, *@a) { @a.say }; star |(1..10)

[08:51] <p6eval> rakudo 424936: OUTPUT«Method 'FLATTENABLE_LIST' not found for invocant of class 'Range'␤  in block <anon> at /tmp/c0_DgA4dH4:1␤␤»

[08:51] <p6eval> ..niecza v16-21-g1b64073: OUTPUT«Potential difficulties:␤  $a is declared but not used at /tmp/2Mj_tloExN line 1:␤------> sub star(⏏$a, *@a) { @a.say }; star |(1..10)␤␤Unhandled exception: Unable to resolve method Capture in class Range␤  at /tmp/2Mj_tloExN line 1 (main…

[08:51] <p6eval> ..pugs: OUTPUT«␤»

[08:52] *** lestrrat joined
[08:52] <zhutingting> perl6: sub star($a, *@a) { @a.say }; star(|1..10);

[08:52] <p6eval> rakudo 424936: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&prefix:<|>' called (line 1)␤»

[08:52] <p6eval> ..niecza v16-21-g1b64073: OUTPUT«Potential difficulties:␤  $a is declared but not used at /tmp/S02TcsIyiK line 1:␤------> sub star(⏏$a, *@a) { @a.say }; star(|1..10);␤␤Unhandled exception: Unable to resolve method Capture in class Int␤  at /home/p6eval/niecza/lib/CORE.s…

[08:52] <p6eval> ..pugs: OUTPUT«␤»

[08:52] <moritz> wow, that sucks. It should work that way

[08:52] <moritz> perl6: sub star($a, *@a) { @a.say }; star |(1..10).list

[08:52] <p6eval> niecza v16-21-g1b64073: OUTPUT«Potential difficulties:␤  $a is declared but not used at /tmp/xhSgZKPZ8E line 1:␤------> sub star(⏏$a, *@a) { @a.say }; star |(1..10).list␤␤2 3 4 5 6 7 8 9 10␤»

[08:52] <p6eval> ..rakudo 424936: OUTPUT«2 3 4 5 6 7 8 9 10␤»

[08:52] <p6eval> ..pugs: OUTPUT«␤»

[08:52] <moritz> that works in niecza and rakudo, though niecza warns about unused $1

[08:52] <moritz> erm, unused $a

[08:52] <moritz> perl6: sub star($, *@a) { @a.say }; star |(1..10).list

[08:52] <p6eval> pugs: OUTPUT«*** ␤    Unexpected ","␤    expecting formal parameter␤    at /tmp/BfKDmkDfRR line 1, column 11␤»

[08:52] <p6eval> ..rakudo 424936, niecza v16-21-g1b64073: OUTPUT«2 3 4 5 6 7 8 9 10␤»

[08:53] <zhutingting> use | preappend yeah

[08:56] <masak> oh wow. https://github.com/jmechner/Prince-of-Persia-Apple-II

[08:57] *** fhelmberger joined
[08:58] <masak> I would like to say "this brings back memories", but I'm not sure I ever quite forgot this game.

[09:01] *** araujo joined
[09:09] <jnthn> arnsholt:  data=0x0

[09:09] <jnthn> There's your problem...

[09:09] <jnthn> arnsholt: I'm guessing the CArray isn't set up properly somehow...

[09:10] * jnthn tries to work out for $dayjob, how is PIVOT query formed? how data get rotated? :)

[09:12] <moritz> fun

[09:23] *** plobsing joined
[09:28] *** icwiener joined
[09:29] *** alvis joined
[09:37] <masak> p6: say ord("𐌈")

[09:37] <p6eval> pugs, rakudo 424936, niecza v16-21-g1b64073: OUTPUT«66312␤»

[09:37] <masak> \o/

[09:39] *** mdupont left
[09:48] <bbkr_> moritz: I've spotted 2 new warnings on OS X: https://rt.perl.org/rt3/Ticket/Display.html?id=112492 and I'm not sure if those were caused by fix in https://rt.perl.org/rt3/Public/Bug/Display.html?id=112310

[09:48] <bbkr_> my C skills are way too rusty to verify that

[09:48] <moritz> bbkr_: the "function returns an aggregate

[09:48] <moritz> " thing is well known

[09:48] <moritz> yes, we return an aggregate. It's valid if you know how to handle it

[09:49] *** jaffa4 joined
[09:49] <jnthn> The fix is to turn off the warning.

[09:49] <jnthn> It's because old compilers could not handle it.

[09:49] <jnthn> This is 2012.

[09:49] <jaffa4> hi

[09:50] *** bacek left
[09:50] <masak> hi jaffa4

[09:50] <jaffa4> Can niecza handle grammars at all?

[09:50] <masak> yes.

[09:50] <masak> Niecza's Perl 6 parser is written with Perl 6 grammars.

[09:51] <jaffa4> I keep gettiong Cannot dispatch to a method on pq because it is not inherited or done by Cursor

[09:51] <masak> a minimal piece of code where you get this, posted to a pastebin, will help us diagnose that error for you.

[09:51] <bbkr_> ok, I copy pasted this decision to silence warning into ticket about aggregates

[09:52] <jaffa4> http://pastebin.com/uikRPgHy

[09:53] <masak> jaffa4: glancing quickly, I'd say problem is /<pq::S>/

[09:53] * moritz too

[09:53] <masak> I'm not sure the :: syntax figures in grammars at all any more.

[09:54] <moritz> well, it works(-ish) in rakudo again

[09:54] <masak> jaffa4: check S05 for how to use pq.parse instead.

[09:54] <masak> or MyGrammar.parse in general.

[09:54] <moritz> if pg.parse($str, :rule<S>) { ... }

[09:55] <jnthn> Rakudo handles <pq::S> style things pretty well these days

[09:55] <jnthn> We pass tests for them, anyways.

[09:55] <moritz> r: grammar pg { token identifier { hello }; rule S { <identifier> } }; say 'hello' ~~ /<pg::S>/

[09:55] <p6eval> rakudo 424936: OUTPUT«=> <hello>␤ pg::S => <hello>␤  identifier => <hello>␤␤»

[09:56] <jaffa4> n: grammar pg { token identifier { hello }; rule S { <identifier> } }; say 'hello' ~~ /<pg::S>/

[09:56] <p6eval> niecza v16-21-g1b64073: OUTPUT«Unhandled exception: Cannot dispatch to a method on pg because it is not inherited or done by Cursor␤  at /home/p6eval/niecza/lib/CORE.setting line 250 (Mu.dispatch:<::> @ 3) ␤  at /tmp/WxXGJ70Yxe line 1 (ANON @ 4) ␤  at /home/p6eval/niecza/lib/CORE.settin…

[09:57] <moritz> n: grammar pg { }; say pg ~~ Grammar

[09:57] <p6eval> niecza v16-21-g1b64073: OUTPUT«True␤»

[09:57] <moritz> n: grammar pg { }; say pg ~~ Cursor

[09:57] <p6eval> niecza v16-21-g1b64073: OUTPUT«True␤»

[09:57] <masak> I'm not sure I like that (mis-)use of ::

[09:57] <moritz> that looks like a nieczabug

[09:57] <masak> :: is for packages.

[09:57] <moritz> yes, but the error message says that pg doesn't do/is Cursor

[09:57] <moritz> but it is

[09:58] <masak> yeah.

[09:58] <masak> that's odd.

[09:59] <moritz> n: grammar pg { token identifier { hello }; rule S { <identifier> } }; pg.parse('hello', :rule<S>)

[09:59] <p6eval> niecza v16-21-g1b64073:  ( no output )

[09:59] <moritz> n: grammar pg { token identifier { hello }; rule S { <identifier> } }; say pg.parse('hello', :rule<S>)

[09:59] <p6eval> niecza v16-21-g1b64073: OUTPUT«#<match from(0) to(5) text(hello) pos([].list) named({"identifier" => #<match from(0) to(5) text(hello) pos([].list) named({}.hash)>}.hash)>␤»

[09:59] <moritz> n: grammar pg { token identifier { hello }; rule TOP { <identifier> } }; say pg.parse('hello')

[09:59] <p6eval> niecza v16-21-g1b64073: OUTPUT«#<match from(0) to(5) text(hello) pos([].list) named({"identifier" => #<match from(0) to(5) text(hello) pos([].list) named({}.hash)>}.hash)>␤»

[09:59] * masak decommutes

[09:59] <moritz> r: grammar pg { token identifier { hello }; rule S { <identifier> } }; say ('hello' ~~ /<pg::S>/).keys

[09:59] <p6eval> rakudo 424936: OUTPUT«pg::S␤»

[10:02] *** envi_ joined
[10:10] <felher> Hm, can someone confirm that './perl6 t/spec/S11-modules/require.t' fails?

[10:12] <moritz> confirmed

[10:12] <jaffa4> What is this MyGrammar.parse($string, :actions($action-object))?

[10:12] <jaffa4> action-object?

[10:12] <moritz> an object on which methods are called whenever a parsing rule finishes successfully

[10:12] <moritz> that's handy for building result objects

[10:13] <jaffa4> WHat should be the structure of that?

[10:13] <moritz> just a class with methods of the same name as grammar rules

[10:14] <moritz> I'm sure I've written an example somewhere, let me dig it up...

[10:14] <jaffa4> and they $/ argumentt?

[10:14] <jaffa4> and they have $/ formal argumentt?

[10:14] *** mdupont joined
[10:14] <moritz> well, you can call the parameter whatever you like

[10:15] <moritz> but $/ is usual, because the argument that is bound to that parameter is a Match object after all

[10:15] <moritz> oh of course, there's an example and some explanation in Using Perl 6

[10:15] *** bacek joined
[10:16] *** scott____ left
[10:16] <moritz> http://www.perlmonks.org/?node_id=842792 also has some examples

[10:17] <felher> Good so that was not introduced in my added exceptions. It may have been introduced with 1c862bc2bd3a222156cc443518291f4a2f135228 

[10:17] *** xinming left
[10:18] <jaffa4> What is the difference between a rule and a token?

[10:18] <moritz> jaffa4: see S05

[10:30] *** xinming joined
[10:37] *** zhutingting left
[10:40] *** NamelessTee joined
[10:41] <jaffa4> a good faq would not hurt

[10:42] *** kborer left
[10:46] <masak> jaffa4: both tokens and rules do ratcheting. additionally, rules consider whitespace to be significant.

[10:48] <masak> jaffa4: moritz is referring you to the spec all the time for the simple reason that the questions you ask often have very well-defined and precise answers in the spec. he is aware that you're averse to reading it, but he probably considers that it would save the both of you some time if you did.

[10:49] <masak> it's the germ of the "if you didn't do any research, why should we help you?" culture that I see in other places dedicated or partly dedicated to helping newcomers with questions.

[10:49] <masak> not saying it's good or bad. just saying it tends to establish itself as a cultural strain.

[10:52] <jaffa4> There are many ways of doing things including helping.

[10:52] <masak> indeed.

[10:53] <masak> I think the synthesis of it all is that "helping" is a bidirectional thing, where both parties have to listen and be adaptive.

[10:54] <jaffa4> Is this so in your culture?

[10:54] <gfldex> if it takes as long to answer the question then to say "RTFM" it might be better to just stay silent

[10:55] <gfldex> the spec is not the best documentation for a language one could wish for

[10:55] <masak> I remember alester++ reacting about the fact that esr's "How to ask questions the smart way" has too much of this "If you didn't do your homework, why should we help you" mentality.

[10:56] <masak> even the we/you distinction in there, which becomes increasingly clear as you read that text, is a little bothersome, if you ask me.

[10:56] <masak> gfldex: it's not meant as learning material or documentation for the language. but as it happens, it's still the best resource for that, in early 2012.

[10:57] <masak> jaffa4: I don't mean "culture" as in "Northern Europe". I mean "culture" as in "#perl6".

[10:57] <masak> this is very much an online/Internet/IRC thing.

[10:58] *** bbkr_ left
[10:58] *** bbkr joined
[10:58] <jaffa4> I met this approach of helping you are advocating.

[11:01] <jaffa4> By the way, you answered.

[11:03] <masak> I wasn't advocating the approach, I was explaining to you why you sometimes receive the answer "see S05" or a variation thereof.

[11:03] <masak> I was highlighting the social mechanisms behind such an answer.

[11:04] <jaffa4> I thought some else was behind it, not this.

[11:04] <masak> ooc, what did you think was behind it?

[11:04] <jaffa4> "I have no time for this.."

[11:06] <masak> oh, that's probably part of it.

[11:06] <masak> something like "I learned this from reading S05, so why couldn't you do the same?"

[11:07] <masak> it boils down to the same thing. the feeling that some questions are unwarranted because they're easy to find answers to, if you would just bother to look in the right place.

[11:15] <masak> again, I'm not taking sides.

[11:17] <jaffa4> ok

[11:19] <Woodi> allo

[11:20] *** att joined
[11:20] <masak> Woodi! \o/

[11:21] <Woodi> but in Unix and around and "use man pages" is so _the best_ answer. it's like looking for what '-x' means for 'command' and then you discover new, big and unknown universe...

[11:22] <Woodi> it like this with Perl6 in many cases

[11:23] <Woodi> just wanted to catch tadzik to ask about Oslo but something came up in bakery for Saterday...

[11:24] <masak> you have a bakery?

[11:24] <Woodi> family have :)

[11:24] <masak> awesome.

[11:25] <Woodi> not bad. and sweet :)

[11:25] <brrt> oh, btw

[11:25] <brrt> using perl 6 - i'd like to create an epub if that was ok.. and I'd like to create that using perl6

[11:25] <masak> go for it.

[11:25] <brrt> i just need ZIP support :-)

[11:26] <brrt> which i could write myself, but which will take time

[11:26] <brrt> and, specifically

[11:26] <brrt> I need a pack() unpack() replacement for

[11:26] <masak> maybe be pragmatic and do qx[zip]

[11:28] <brrt> masak: could not parse that

[11:28] <brrt> whats qx?

[11:29] <masak> shell command.

[11:29] <brrt> that could work

[11:29] <brrt> :-)

[11:30] <masak> in that vein, either run() or shell() (or both) are available, too.

[11:30] <masak> and might be more idiomatic than qx[] if you aren't interested in the output.

[11:30] <Woodi> but using C library from Perl6 should be possible now

[11:31] <brrt> any good xml handling libraries arround?

[11:31] <timotimo> use regex for xml for great win

[11:33] <moritz> jaffa4: once you've found out what the difference between regex, token and rules is, feel free to contribute it to https://github.com/perl6/faq/

[11:34] <moritz> good documentation comes from people writing the documentation, not from wishing there was one

[11:34] <brrt> yeah, that'll work :-) anyway, i'll figure it out

[11:34] <brrt> thanks

[11:34] * brrt has to go now, study

[11:39] * masak sure wishes there were p6<->C bindings to a good XML, so that he could do DOM/SAX/XSLT/XPath in Perl 6

[11:39] <arnsholt> Have you looked at the feasability of binding to libxml with zavolaj?

[11:41] <masak> no.

[11:41] <masak> maybe I should.

[11:41] *** godfrey999 left
[11:42] *** NamelessTee left
[11:43] *** noam joined
[11:47] *** joik joined
[11:48] *** joik left
[11:52] *** pernatiy joined
[11:55] *** benabik joined
[11:56] * masak wishes he woin't so busy

[11:58] *** icwiener left
[11:59] <sjn> masak: no worries, only a few more days, and you can have a relaxing weekend in Oslo :)

[11:59] <moritz> I thought we were supposed to hack, not relax :-)

[12:00] <sjn> stressful hacking? o_O

[12:00] * masak .oO( we're supposed to rehax )

[12:00] <masak> sjn: yes, I'm counting on winding down in Oslo. that doesn't prevent me from being wound up now :/

[12:01] <sjn> well, I can always ask krunen to bring drum he uses to keep the rowing slaves on his boat in tact. :)

[12:01] <moritz> :-)

[12:01] * masak .oO( 1 commit per beat )

[12:08] <jaffa4> r : sub postfix:<!> is equiv:<++> ( Int $x ) {}

[12:08] <jaffa4> r: sub postfix:<!> is equiv:<++> ( Int $x ) {}

[12:08] <p6eval> rakudo 424936: OUTPUT«===SORRY!===␤Missing block␤at /tmp/nwHPk3rvbf:1␤»

[12:08] <jaffa4> r: sub postfix:<!> is equiv:<++> ( Int $x ) { return 2;}

[12:08] <p6eval> rakudo 424936: OUTPUT«===SORRY!===␤Missing block␤at /tmp/_2QD8e2zjM:1␤»

[12:11] *** tokuhirom joined
[12:12] <tadzik> Woodi: 'sup?

[12:13] <Woodi> allo tadzik 

[12:14] <Woodi> can't go Oslo this year/week, need to repair something here

[12:17] <Woodi> but looking on subject for hack, few was meta-perl-like and I would like to add (not sub I hope) few thinks...

[12:19] <masak> "meta-perl-like"?

[12:19] <Woodi> need to sit and write yet

[12:19] <Woodi> marketing and other not technical :)

[12:20] <Woodi> not quite technikal :)

[12:21] <Woodi> nvm for now. but also no free, relaxing time for now :)

[12:22] <masak> sjn++ seems to want us to think about the non-technical bits.

[12:22] *** drbean left
[12:23] *** drbean joined
[12:28] *** sftp joined
[12:29] <sjn> masak: well, the non-technical bits have a very strong base in the technical bits :)

[12:30] <sjn> so we'll get to do both :)

[12:31] *** icwiener joined
[12:33] <masak> *nod*

[12:34] <Woodi> sjn: you organize impraza ?

[12:36] <Woodi> becouse I remember I mentioned one day pizza for p6 developers, would to so something about this if possible :)

[12:36] <sjn> Woodi: I don't know the word "impraza" :-/

[12:36] * sjn organizes this weekend's hackathon in Oslo

[12:36] <moritz> phenny: "impraza"?

[12:36] <phenny> moritz: "impraza" (it to en, translate.google.com)

[12:37] *** brrt1 joined
[12:37] *** brrt left
[12:37] <Woodi> hmm, sec

[12:38] <Woodi> festival or meeting with friends, or general for picnik like time :)

[12:38] <jaffa4> sjn: What are you going to do?

[12:39] *** sivoais left
[12:39] * Woodi realy need to go to some not text only display :)

[12:40] <masak> phenny: pl en "impraza"?

[12:40] <phenny> masak: "impraza" (pl to en, translate.google.com)

[12:41] *** LylePerl joined
[12:42] <Woodi> sjn: your mail is on kaizendo ?

[12:42] <felher> moritz: i tried to rewrite everything on True/Die which caused a lot of spectest to fail. I then tried everything with True/Failure which doesn't cause any spectest to fail. Also, i searched a bit in the specs. A few of the IO-Functions are spec'ed and those are spec'ed to return True/Failure. Maybe we should keep on that way?

[12:42] <sjn> Woodi: [email@hidden.address] is fine

[12:42] <Woodi> ook

[12:42] <sjn> the kaizendo mail ends up there anyway :)

[12:43] <moritz> felher: well, for now True/Failure is more risky, because our Failures don't explode in sink/void context

[12:43] <moritz> felher: which is why I'd prefer True/die until that issue is resolved

[12:46] *** birdwindupbird left
[12:47] *** LylePerl left
[12:48] <sjn> jaffa4: at the hackathon? mostly see if I can help someone with something :)

[12:48] <masak> sjn: you can help me with macros!

[12:48] <sjn> jaffa4: also, trying to get some stuff done wrt. how to make Perl 6 easier to pick up

[12:49] <jaffa4> I have to imagine a big rooom with lot of computers.. where people sit in pairss.

[12:49] <jaffa4> or alone

[12:49] <sjn> jaffa4: the venue is a bunch of meeting rooms and classrooms

[12:50] <sjn> so we get to choose where to sit :)

[12:50] *** LylePerl joined
[12:50] <tadzik> phenny: "impreza"?

[12:50] <phenny> tadzik: "event" (pl to en, translate.google.com)

[12:50] <masak> oh!

[12:50] <masak> tadzik++

[12:50] <sjn> that makes more sense :)

[12:52] *** PacoAir joined
[12:52] <jaffa4> everybody brings his laptop style or there are computers already.

[12:52] <moritz> laptops

[12:52] *** sivoais joined
[12:54] <sjn> laptop, that have been prepared with everything that's necessary to get stuff done :)

[12:54] <felher> moritz: i see :) 

[12:54] * moritz dearly hopes so

[12:54] <sjn> spending time at a hackathon on setting up your computer, is fail.

[12:54] <moritz> spending time at a hackathon on writing slides is also fail

[12:54] * moritz has done that too

[12:55] <felher> moritz: okay. So feel free give your opinions https://gist.github.com/2405788 whenever you have time :)

[12:55] <moritz> r: say 7.base(8)

[12:55] <p6eval> rakudo 424936: OUTPUT«7␤»

[12:56] <moritz> r: say 7.fmt("%03o")

[12:56] <p6eval> rakudo 424936: OUTPUT«007␤»

[12:56] <moritz> felher: that might be better to get at least 3 octal digits, as unix folks are used to

[12:56] <felher> moritz: oh, nice. Yes, surely an improvment :)

[12:57] <felher> +e

[12:58] <moritz> felher: apart from that it looks very nice

[12:59] <moritz> actually, even as it is now it's worth applying, but if you want to polish first, I'll wait for it

[13:00] <felher> moritz: yes, i will at least change it to use fmt instead of base :)

[13:00] <felher> moritz: can we expect everybody to think the mode is given in octal or should i keep the prefix '0o'?

[13:01] <moritz> felher: keep 0o for now

[13:01] <moritz> if people complain, we can still remove it

[13:04] *** bluescreen10 joined
[13:04] <[Coke]> we have no rakudo compiler releases allocated after this week.

[13:04] <[Coke]> so, please pick a month and put your name down. (docs/rel*)

[13:04] <jnthn> oh noes, does that mean this is the last release?!?!

[13:05] <[Coke]> thanks!

[13:05] <jnthn> plz sign up, folks ;-)

[13:05] <[Coke]> jnthn: aye. it better be a good one.

[13:06] <masak> yeah, let's see some new names on the list.

[13:06] <masak> show how much you love Rakudo :)

[13:06] <jaffa4> IS there a way to specify priority when overloading operands? (I found is tighter does not seem to be working)

[13:07] <moritz> is tighter works with niecza

[13:07] <dalek> rakudo/nom: b403135 | coke++ | docs/release_guide.pod:

[13:07] <dalek> rakudo/nom: allocate a release name.

[13:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b4031355bf

[13:07] <moritz> no support for that in rakudo yet

[13:07] <[Coke]> hey, sorear you wanna do a rakudo release? ;)

[13:11] <dalek> rakudo/nom: 95a6d8c | moritz++ | docs/ (2 files):

[13:11] <dalek> rakudo/nom: update changelog and release announcement a bit

[13:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/95a6d8c310

[13:12] <masak> surely Rakudo isn't so short on release managers that they try to enlist sorear now...? :P

[13:12] *** FACEFOX left
[13:12] <felher> moritz: okay, i updated the gist to use your fmt-idea. If you apply it, what about the spectest that will fail because of that?

[13:12] *** FACEFOX joined
[13:13] <moritz> felher: I can take care of them

[13:13] *** kborer joined
[13:14] *** birdwindupbird joined
[13:14] <felher> moritz: okay then. If you want a list of spectest that fail i'm currently spectesting and creating a log.

[13:15] <moritz> felher: great

[13:16] <moritz> I just noticed something odd

[13:16] <moritz> once we have a sink context,  try function_that_fails; will die

[13:17] * masak &

[13:17] <moritz> try won't react to the failure, return the return value of the function, and is then evaluated in sink context => boom

[13:20] <dalek> rakudo/nom: b401415 | moritz++ | docs/announce/2012.04:

[13:20] <dalek> rakudo/nom: [announce] note two incompatible changes in the release announcement

[13:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b401415d11

[13:21] <moritz> I'll leave the rest of the announcement fiddling to [Coke]++

[13:23] <jaffa4> moritz:  not for me

[13:26] <[Coke]> moritz++ for those bits.

[13:32] <felher> moritz: i added a complete 'make spectest' log to my gist

[13:36] <moritz> felher: thanks. Just 4 files, not too bad

[13:36] * felher &afk

[13:39] *** att left
[13:45] *** GlitchMr joined
[13:46] * jnthn smiles as he uses Perl to apply refactors to a C# codebase :)

[13:47] <moritz> :-)

[13:48] <moritz> I think I have the spectests sorted out, but running another pass just to be sure

[13:49] <moritz> most of it was Test::Util dieing on failed unlink()

[13:49] <jnthn> I'll try and look at my require.t bustage.

[13:49] <jnthn> Should have chance this evening.

[13:49] <jaffa4> jnthn: what do you use to refactor?

[13:52] <dalek> rakudo/nom: 36bbb40 | (Felix Herrmann)++ | src/core/ (2 files):

[13:52] <dalek> rakudo/nom: add a few typed IO exceptions

[13:52] <dalek> rakudo/nom: 

[13:52] <dalek> rakudo/nom: Signed-off-by: Moritz Lenz [email@hidden.address]
[13:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/36bbb4035c

[13:52] <dalek> roast: 84b3895 | moritz++ | / (3 files):

[13:52] <dalek> roast: [IO] handle dying unlink and mkdir

[13:52] <dalek> roast: 

[13:52] <dalek> roast: Rakudo now throws exceptions for failed &unlink and &mkdir calls.

[13:52] <dalek> roast: This is a deliberate deviation from the existing tests (and maybe spec),

[13:52] <dalek> roast: because we don't have sink context yet, which leads to failures silently

[13:52] <dalek> roast: being ignored.

[13:52] <dalek> roast: 

[13:52] <dalek> roast: This commit fudges two tests for rakudo, and makes Test::Util happy again.

[13:52] <dalek> roast: review: https://github.com/perl6/roast/commit/84b3895ce1

[13:58] *** NamelessTee joined
[13:59] <jnthn> jaffa4: Regexes :P The transform I wanted to apply was extrmely mechanical.

[13:59] <jnthn> (Basically, API changes as part of unifying two MVP frameworks.)

[14:02] *** tokuhirom left
[14:04] <[Coke]> MVP?

[14:05] <jnthn> Model View Presenter

[14:07] *** bacek left
[14:14] <sjn> !seen pmichaud 

[14:14] <sjn> seen pmichaud 

[14:14] <aloha> pmichaud was last seen in #perl6 5 days 23 hours ago saying "kthx".

[14:14] <sjn> right

[14:15] *** att joined
[14:17] * [Coke] reads again that YAPC::NA::2012's hackathon is sold olt.

[14:17] <[Coke]> *sold out

[14:18] <moritz> a hackathon can be sold out?

[14:18] <[Coke]> jnthn: ... is that the same thing as MVC?

[14:18] *** mucker left
[14:18] <[Coke]> moritz: http://blogs.perl.org/users/jt_smith/2012/04/hackathon-sold-out.html

[14:19] <sjn> moritz: yep, if there's limited space, and people are willing to pay for being there :)

[14:19] <jnthn> [Coke]: No, though they're in the same niche.

[14:19] <jnthn> (e.g. both are design patterns for factoring UIs)

[14:27] *** PacoAir left
[14:33] *** kaleem left
[14:35] *** raiph joined
[14:39] *** alester joined
[14:41] <alester> What branch in rakudo/rakudo is the one I should base work on?  The equivalent of master?  Is it "nom"?  And if so, what does "nom" mean?

[14:41] <tadzik> nom

[14:41] <tadzik> new object model

[14:41] <tadzik> it's the default branch

[14:41] <alester> OK

[14:42] <alester> There were some tickets that cmae through for quieting compiler warnings, and I was going to go after them.

[14:42] <moritz> \o/

[14:42] <PerlJam> alester++

[14:45] <alester> I'm sort of responsible for them anywya, if Rakudo uses Parrot's GCC flags.

[14:45] <jnthn> Yeah, it does.

[14:45] <jnthn> Apparently the "thingy returns an aggregate" one is quite noisy on GCC

[14:45] *** plutoid joined
[14:45] <jnthn> Though that's when compiling nqp, not Rakudo itself.

[14:45] <alester> Can someone point me at the current instructions for building Rakudo?

[14:45] *** prammer joined
[14:45] <moritz> (though note that the warnings come from clang in the case of these tickets)

[14:46] <jnthn> ah

[14:46] <moritz> alester: it's in the README, or on http://rakudo.org/how-to-get-rakudo/

[14:46] <alester> That was too easy.

[14:46] <alester> We should have the build instructions harder to find, like I assumed they were.

[14:46] <moritz> I'll work on it :-)

[14:47] <benabik> alester: You probably want to build NQP separately, rather than using --gen-nqp.

[14:47] <benabik> I find it's much easier to handle it that way.

[14:47] <alester> How does one do that?

[14:47] * jnthn uses the --gen stuff and finds it easy to handle :)

[14:47] <benabik> (For development.  For users the --gen- options are awesome)

[14:47] <jnthn> alester: --gen-parrot will build Parrot and NQP from git for you.

[14:48] <moritz> in nqp directory,  perl Configure.pl --with-parrot=$path/to/your/bin/parrot

[14:48] <moritz> but I disagree with benabik, just use the --gen- options for now

[14:48] * benabik does sometimes like doing things the hard way.

[14:49] <alester> If I build my own parrot outside of Rakudo, and install that, then will Rakudo use Parrot's GCC flags somehow?

[14:49] <tadzik> yes

[14:49] <alester> Because the way I build Parrot is even more jacked up with warnings than a standard Parrot build.

[14:49] <tadzik> it gets them from parrot_config I suppose

[14:49] <benabik> alester: It grabs info from parrot_config

[14:49] <alester> ok

[14:49] *** fsergot joined
[14:49] <alester> I build with GCC 4.8 from the dev snapshots.

[14:50] <alester> Latest add in there: --warn-unnecessary-casts (or something like that)

[14:50] <fsergot> Hello! o/

[14:50] <alester> Got to clean up lots of goodness because of that.

[14:50] <tadzik> hey fsergot 

[14:50] <jnthn> alester: ooc, does it warn about ones that a C++ compiler would need to have in there?

[14:50] <jnthn> (not that I really care that my C is also valid C++, I'm just being curious)

[14:51] <alester> It's a C++-only flag, as I recall.

[14:51] <alester> I build my parrot with both g++ and gcc

[14:51] <alester> g++ is typically more stringnet, but there are things that are gcc-only, too.

[14:52] <alester> Basically, I'm using gcc/g++ as static analysis tool more than code generation. :)

[14:57] <jnthn> ah :)

[14:57] * jnthn is aware that there are places that C doesn't care for casts, but C++ wants them

[14:58] <jnthn> Anyway, alester++ for working on warning cleanup

[14:58] <jnthn> Time to decommute here. bbl

[14:59] <tadzik> the worst thing is that you can't name a variable "new" ;)

[14:59] <moritz> that's not so easy in p6 either :-)

[15:00] <moritz> n: my \new = 3; say new

[15:00] <p6eval> niecza v16-21-g1b64073: OUTPUT«3␤»

[15:00] <moritz> n: my \new = 3; new = 5; say new

[15:00] <p6eval> niecza v16-21-g1b64073: OUTPUT«Unhandled exception: assigning to readonly value␤  at /tmp/ZNLfxMBiIG line 0 (mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3839 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3840 (module-CORE @ 65) ␤  at /home/p6eval/niecza/li…

[15:00] <moritz> n: my \new = 3; new := 5; say new

[15:00] <p6eval> niecza v16-21-g1b64073: OUTPUT«5␤»

[15:04] *** NamelessTee left
[15:07] *** jferrero joined
[15:10] *** ggoebel joined
[15:10] *** mucker joined
[15:12] *** wtw left
[15:15] *** kresike left
[15:17] *** cognominal_ left
[15:19] *** cognominal joined
[15:21] <alester> jnthn: What I've been finding in Parrot is casts from size_t to size_t.  

[15:21] <alester> For example.

[15:22] *** thou joined
[15:22] *** plutoid left
[15:24] <alester> It mostly just seems like detritus of things that were once necessary but no longer is.

[15:26] *** kborer left
[15:30] *** jaldhar left
[15:34] *** jaldhar joined
[15:35] *** spaceships joined
[15:35] *** HarryS joined
[15:39] *** fglock left
[15:45] *** lichtkind joined
[15:48] *** Psyche^ joined
[15:48] *** icwiener left
[15:49] <TimToady> I suspect prefix:<|> should supply a list context to its argument so that 1..10 flattens without the need for .list

[15:51] *** cxreg joined
[15:52] *** uvtc joined
[15:52] *** Psyche^ is now known as Patterner

[15:55] *** jaldhar left
[15:56] * jnthn home

[15:56] <jnthn> TimToady: If it supplies a list context, what about |$c and |%h ?

[15:57] <jnthn> (Answer: we'll end up passing only the list part of the capture, and positionally pass the pairs of the hash...or so it seems to me...)

[15:58] <TimToady> I see that

[15:58] *** jaldhar joined
[15:59] <jnthn> Don't disagree with the goal of 1..10 flattening.

[15:59] <jnthn> Just think it's not as simple as list context.

[15:59] <TimToady> nodnod

[15:59] <jnthn> In Rakudo I handle | in argument lists syntactically at the moment.

[16:00] <jnthn> (Since flatten flags need setting.)

[16:00] <jnthn> In fact, I find it hard to imagine an implementation that doesn't have to flag the flattening somehow.

[16:01] <TimToady> yes, it's rather cheaty wrt captures

[16:03] <TimToady> it's another one of those almost-eval escape-hatch things

[16:03] <pmichaud> good morning, #perl6

[16:03] <TimToady> howdydoo

[16:05] <pmichaud> well, I suspect that |$c shouldn't flatten, because of the $

[16:05] *** GlitchMr left
[16:05] <TimToady> then what is the point of using it?

[16:05] <jnthn> hi, pmichaud :)

[16:05] <pmichaud> oh, perhaps I misunderstood.  likely, since I'm definitely not anywhere close to 100% today

[16:05] <TimToady> it's obviously meant to be a deref of some sort

[16:06] <pmichaud> yeah, that makes sense.  nm.

[16:06] <TimToady> yes, well, mornings happen... :/

[16:06] * pmichaud <-- fighting allergies and losing

[16:08] <jnthn> pmichaud: Ouch :(

[16:08] * TimToady <-- dueling hay fever and spring fever...or maybe they're cooperating...

[16:08] <jnthn> TimToady: Ouch :(

[16:08] *** brrt1 left
[16:09] <uvtc> TimToady, is the [cheat sheet](https://raw.github.com/perl6/mu/master/docs/Perl6/Cheatsheet/cheatsheet.txt) current?

[16:09] <TimToady> course, doing taxes doesn't help either...

[16:09] <uvtc> I don't see gather/take in there.

[16:09] <TimToady> uvtc: pretty much; statement prefixes like gather didn't make the cut

[16:10] <uvtc> TimToady, how about [syntax for forcing context](http://perlgeek.de/blog-en/perl-5-to-6/06-contexts.html)?

[16:10] <uvtc> ~ ? + - $( ) @( ) ...

[16:10] <TimToady> those all still work

[16:11] <uvtc> No, I mean, I was looking for them in the cheat sheet but didn't see them ...

[16:11] <TimToady> there has to be *some* whitespace on the page :)

[16:11] *** machine2 left
[16:12] <TimToady> $() and @() are there on the right

[16:12] <uvtc> Clojure has a pretty amazing cheat sheet ... with a version in the wings that has nice pop-up mini-docs for each of the items in the cheat sheet:

[16:13] <uvtc> http://jafingerhut.github.com/cheatsheet-clj-1.3/cheatsheet-tiptip-cdocs-summary.html

[16:13] <TimToady> and + - ~ are listed in the precedence table

[16:13] <pmichaud> fortunately I got taxes out of the way weeks ago

[16:14] <TimToady> well, we were putting it off because we owe a lot this year, due to paying for house refurb from stock options

[16:15] <TimToady> I think maybe the IRS sorts their acceptance list into priority of how much money is being paid, because they accepted our returns last night in a couple hours rather than days

[16:15] *** thou left
[16:16] *** machine2 joined
[16:16] <TimToady> uvtc: maybe you should do a Clojure backend for Perl 6 :D

[16:17] <uvtc> TimToady, sorry, I'm not seeing those operators for forcing context in the "operator precedence" section of the cheat sheet. If they are there, I'm expecting to see a line like: "context: ~ ? + - $() @() %() @@()"

[16:17] *** skids joined
[16:18] <TimToady> "context" is not a precedence level, look for the line that starts "unary"

[16:20] <uvtc> If those operators (that syntax?) for forcing context are not a precedence level, why did you write above "and + - ~ are listed in the precedence table"?

[16:21] *** jaldhar left
[16:21] <uvtc> TimToady, re a Clojure backend for Perl 6, Clojure (well, "ClojureJVM") has a backend of its own: the JVM. And Perl 6 has got Niecza, of course.

[16:21] <TimToady> why do you insist on having a category for "forcing context"?  Everything forces context...

[16:22] <uvtc> TimToady, I was just reading a Perl 6 snippet somewhere and saw "-$foo" and thought, "oh, hm, what context does that thingy force again?", and then thought, "oh, I'll check the cheat sheet". That's all. I don't mean to insist. :)

[16:23] *** tarch left
[16:23] *** jaldhar joined
[16:24] <TimToady> compared to Perl 5, the notion of context is rather more nebulous, organic, functional, and lazy in Perl 6

[16:25] *** att left
[16:25] *** kaleem joined
[16:25] <TimToady> on some semantic level, a context is just a coercer that can do the identity transformation when no coercion is necessary

[16:26] <TimToady> the + in +42 is a no-op, really

[16:27] *** Trashlord joined
[16:28] <uvtc> TimToady, I don't know what you mean by "identity transformation".

[16:28] <TimToady> in +'42' it's really doing something, but in either case, it can be viewed as a mere function (albiet a multi)

[16:28] <TimToady> I mean it's a no-op

[16:28] <uvtc> Ah. Ok.

[16:28] <TimToady> it just returns what you passed it, if it doesn't need to change it

[16:29] <TimToady> just as a list in list context is in no need of additional listification

[16:30] <uvtc> Perl 6 has lazy lists, correct? If so, how do I tell Perl 6 that I want it to realize/unlazify the list?

[16:30] <TimToady> the closest things in Perl 6 to real contexts are the various ways of binding lists to parameters

[16:30] <TimToady> you can use eager for that

[16:31] <uvtc> (Sorry if that's off the main topic being discussed presently ... it seemed vaguely related)

[16:31] <TimToady> or you can just read the whole list and do something with it :)

[16:31] <uvtc> Ah. Right. :)

[16:31] <TimToady> eager() just does that then returns it for its "do something"

[16:32] <TimToady> effectively, anyway, though any given implementation might cheat in various ways

[16:33] *** kaleem left
[16:37] *** kaleem joined
[16:38] *** att joined
[16:38] *** godfrey999 joined
[16:38] *** thou joined
[16:39] *** pernatiy left
[16:44] *** thelazydeveloper joined
[16:45] *** birdwindupbird left
[16:46] <TimToady> moritz: re try failure(), in S04:1026 we have set_outer_caller's_bang(@handled) unless @unhandled; which should probably also force the return value to Nil when this CATCH's outer scope is going to be the unwind target

[16:47] *** kaleem left
[16:47] <pmichaud> yay, I get to head to the p6 patterns hackathon in oslo tomorrow!  Then I read this:  http://www.cnn.com/2012/04/17/travel/canada-disoriented-pilot/index.html?hpt=hp_t2   (Pilot sends plane into dive after mistaking Venus for oncoming plane)

[16:48] <TimToady> well, this happens periodically

[16:48] <PerlJam> pmichaud: uncanny timing ... Gary was just in my office asking about you  :)

[16:48] <pmichaud> Hi Gary!

[16:49] <pmichaud> (fortunately, the pilot managed to avoid hitting Venus.)

[16:49] <jnthn> ...Venus?! :)

[16:49] <TimToady> good thing he didn't climb instead

[16:49] <jnthn> That woulda been a long climb to avoid...

[16:50] *** kaleem joined
[16:52] *** PacoAir joined
[16:54] *** kaleem left
[16:57] *** cogno joined
[16:57] *** cogno left
[16:57] *** dakkar left
[16:58] *** cogno joined
[16:59] *** thou_ joined
[17:02] *** thou left
[17:04] *** Chillance joined
[17:09] *** icwiener joined
[17:12] <sorear> good * #perl6

[17:15] <fsergot> sorear: o/

[17:16] <sorear> moritz: the error message says that Cursor doesn't do/is pg

[17:16] <sorear> moritz: <pg::S> becomes $c.pg::S(), and at the time I stole that syntax from Rakudo, it was checking for MRO presense of pg in $c

[17:22] <moritz> sorear: "Cannot dispatch to a method on pg because it is not inherited or done by Cursor"

[17:22] <moritz> I read that as 'pg !~~ Cursor'

[17:22] *** machine2 left
[17:22] <moritz> and that's simply wrong

[17:22] <fsergot> nom: say $*IN.^methods.perl

[17:22] <p6eval> rakudo 36bbb4: OUTPUT«(method open(IO , Any , Mu %_!) { ... }, method close(IO , Mu %_!) { ... }, method eof(IO , Mu %_!) { ... }, method get(IO , Mu %_!) { ... }, method getc(IO , Mu %_!) { ... }, method lines(IO , Any $limit = { ... }, Mu %_!) { ... }, method read(IO:D , Cool:D $bytes…

[17:23] <moritz> nom: say ~$*IN.^method

[17:23] <fsergot> nom: say $*IN.^methods

[17:23] <p6eval> rakudo 36bbb4: OUTPUT«Method 'method' not found for invocant of class 'Perl6::Metamodel::ClassHOW'␤  in method dispatch:<.^> at src/gen/CORE.setting:784␤  in block <anon> at /tmp/5NaImo1KBJ:1␤␤»

[17:23] <p6eval> rakudo 36bbb4: OUTPUT«open close eof get getc lines read seek tell write opened print slurp d e f l r s t w x z copy chmod say <anon> <anon> <anon>␤»

[17:23] <fsergot> Why does $*IN have print method? 

[17:23] <benabik> nom: $*IN.print('hi')

[17:23] <p6eval> rakudo 36bbb4: OUTPUT«FileHandle is not opened for writing␤  in method print at src/gen/CORE.setting:6637␤  in block <anon> at /tmp/12_tWTtt57:1␤␤»

[17:23] <moritz> fsergot: because it's the saem class as $*OUT

[17:24] *** s1n joined
[17:24] <benabik> nom: $*IN.WHAT.say

[17:24] <p6eval> rakudo 36bbb4: OUTPUT«IO()␤»

[17:24] <moritz> fsergot: and it would be more confusing if the IO objects didn't have the methods, than the current error message

[17:24] <fsergot> Is there a meaning to write to $*IN

[17:24] <fsergot> ?

[17:24] <fsergot> moritz: Oh, ok. :)

[17:26] <fsergot> Thanks. :)

[17:27] <sorear> moritz: it's a passive sentence.  Would it be clearer to you if it said "because Cursor does not inherit or do pg"?

[17:29] <moritz> sorear: it would be clearer, but doesn't make any sense to me either

[17:29] *** machine2 joined
[17:29] <moritz> because it would mean you can't inject subclasses of Cursor anywhere

[17:30] <sorear> moritz: $c is an object of type Cursor, not an object of type pg

[17:30] <sorear> so when you say $c.pg::S(), you're trying to call a method that simply doesn't exist on $c

[17:30] <moritz> sorear: but the error message doesn't talk about $c, it talks about pg

[17:31] <sorear> The part of the system that generates that error message doesn't know the names of variables

[17:31] <TimToady> p5 would probably say "Can't locate method S via pg"

[17:32] <moritz> though of course the better fix would be to simply parse it as pg.S

[17:32] <moritz> as rakudo does today

[17:33] <sorear> I don't understand how that works

[17:36] <moritz> it parses anything of the form <name> [ '::' <name> ]+ as a special lookup

[17:36] <moritz> if the full name is a Grammar, it calls ThatGrammar.TOP

[17:37] <moritz> otherwise it takes the last of the names as the method name, and calls it on the rest of the name, taken as a package name

[17:37] <jnthn> moritz: Er, it always takes the last component as the rule name, iirc.

[17:37] <moritz> it does?

[17:37] <jnthn> I think that's how I implemented it.

[17:38] <jnthn> sorear: If it helps, it's using just about the same mechanism LANG does for langauge switching.

[17:38] <moritz> r: grammar A::B { token TOP { foo } }; say 'foo' ~~  /<A::B>/ 

[17:38] <p6eval> rakudo 36bbb4: OUTPUT«Method '!cursor_init' not found for invocant of class 'Any'␤  in any find_method at src/gen/Metamodel.pm:143␤  in method OTHERGRAMMAR at src/gen/CORE.setting:8784␤  in regex <anon> at /tmp/m8OutHTDrZ:1␤  in method ACCEPTS at src/gen/CORE.setting:8819␤  in block <an…

[17:38] <moritz> hm, right

[17:38] <moritz> r: grammar A::B { token TOP { foo } }; say 'foo' ~~  /<A::B::TOP>/ 

[17:38] <p6eval> rakudo 36bbb4: OUTPUT«=> <foo>␤ A::B::TOP => <foo>␤␤»

[17:38] <jnthn> moritz: I mean, we can make it work that way easy enough.

[17:38] <jnthn> moritz: It just ain't how it currently is.

[17:38] <moritz> ok

[17:38] <moritz> probably needs a spec clarification

[17:39] <jnthn> And I'm not aware of any spec or tests that expect it to be that way.

[17:39] *** mucker left
[17:39] *** fhelmberger left
[17:43] <sorear> jnthn: oh, so it actually switches language?

[17:43] <sorear> <foo::bar> in Rakudo works like STD expects [ :lang(foo) <bar> ]?  I can manage that

[17:44] <jnthn> sorear: yeah, basically that

[17:45] <sorear> jnthn: Incidentally, I'd rather not do any Rakudo releases just now ... :D 

[17:45] <jnthn> Though pretty sure we don't ahve the :lang sugar for doing it

[17:45] <jnthn> But it's how I'd expect to implement :lang too

[17:46] <sorear> do you know of any tests for the <foo::bar> behavior?

[17:47] <jnthn> I know we run some

[17:47] <jnthn> I forget where they are

[17:47] <jnthn> gotta afk for 10, can prolly find 'em when I'm back

[17:49] *** thou_ left
[17:49] *** thou joined
[17:54] *** cogno left
[18:08] *** godfrey999 left
[18:08] *** daxim left
[18:11] <jnthn> sorear: S05-grammar/namespace.t has one. It's todo'd for niecza.

[18:12] <jnthn> I recall some others, but don't see 'em right off.

[18:13] *** cogno joined
[18:17] *** fglock joined
[18:21] *** Eddie_Mty joined
[18:23] *** s1n left
[18:23] *** birdwindupbird joined
[18:26] *** cogno left
[18:30] <lichtkind> hai

[18:30] <phenny> lichtkind: 04:50Z <raiph> tell lichtkind i chatted with uvtc. i agreed to do the lookup-to-index (b2a) etc. links to complete his conversion to Pandoc-Markdown. Then we can use that instead of socialtext or raw html.

[18:30] <phenny> lichtkind: 04:51Z <raiph> tell lichtkind if we go this route (please!) we'll want moritz to create a perl6 repo from http://www.unexpected-vortices.com/temp/tablet-docs.tar.gz (as published at http://www.unexpected-vortices.com/perl-6/temp-tablets/introduction.html) and stick to editing that repo. 

[18:32] *** birdwind1pbird joined
[18:32] *** birdwindupbird left
[18:32] *** cognominal_ joined
[18:34] *** raiph left
[18:35] *** cognominal left
[18:37] *** s1n joined
[18:42] <uvtc> Where can I find the documention on the Test module. Specifically, docs on how to use Test?

[18:43] *** machine2 left
[18:43] <PerlJam> uvtc: Read the code?

[18:44] <PerlJam> uvtc: look at Test::More (perl 5 module) for ideas and inspiration?

[18:44] <PerlJam> uvtc: sorry I don't have any good answers.

[18:44] <PerlJam> uvtc: Look at existing code that uses Test.pm?

[18:44] <uvtc> Does P6's Test mimic P5's Test::More?

[18:44] <PerlJam> uvtc: it doesn't mimic exactly, but it's darn close

[18:44] <uvtc> Ok, thanks, PerlJam.

[18:49] *** sudokode joined
[18:49] *** NamelessTee joined
[19:00] <uvtc> I see that, at [the module directory](http://modules.perl6.org/) for documentation on creating your own modules, there's a link to tadzik's blog post from a little while back. I think that modules.perl6.org should have its own article on contributing modules. Perhaps this:

[19:00] <uvtc> http://www.unexpected-vortices.com/perl-6/create-distribute-modules.html

[19:01] <uvtc> The source of that is at the same url, just change .html to .txt.

[19:01] <uvtc> There may be errors in it. If so,

[19:01] <uvtc> please let me know.

[19:01] <uvtc> Feel free to take that and use it at modules.perl6.org, if you think it would be of use.

[19:02] <uvtc> (of course, if using, please remove the blockquote near the top)

[19:02] <lichtkind> uvtc: ping

[19:03] <uvtc> hi lichtkind.

[19:04] *** lumi_ joined
[19:04] <jnthn> Hmm....where has dalek got to?

[19:05] <jnthn> Anyway, I just pushed a fix for the require.t regression I accidentally the other day.

[19:08] *** spider-mario joined
[19:10] <[Coke]> O_o

[19:10] <lichtkind> jnthn: cheers

[19:12] *** birdwind1pbird left
[19:12] <jnthn> o/ lichtkind 

[19:13] *** benabik_ joined
[19:13] *** birdwindupbird joined
[19:14] *** benabik left
[19:14] *** benabik_ is now known as benabik

[19:15] <lichtkind> jnthn: im really in the mood to give you another microgrant :)

[19:21] <masak> evening, #perl6

[19:21] <spider-mario> \o

[19:22] <fsergot> masak \o/

[19:22] <masak> \o/

[19:22] <sorear> hi and bye, masak

[19:23] * masak $*IN, sorear $*OUT

[19:25] <uvtc> phenny, tell moritz http://irclog.perlgeek.de/perl6/2012-04-17#i_5457320 -- took info from tadzik's post. Hoping that might be useful to have at perl6/modules.perl6.org.

[19:25] <phenny> uvtc: I'll pass that on when moritz is around.

[19:27] *** thou left
[19:27] <fsergot> sorear o/

[19:31] *** mdupont left
[19:32] *** sftp left
[19:33] <masak> http://twitter.com/dsyme/status/192251427094138880 # CS autopun

[19:34] *** sftp joined
[19:35] <[Coke]> I don't get it.

[19:36] <lichtkind> moritz: ping

[19:36] <[Coke]> but tht's ok.

[19:37] *** vlixes joined
[19:37] *** benabik left
[19:37] <masak> [Coke]: I'm not expert at coinduction, but it essentially means infinitely unfoldable cursors.

[19:38] <PerlJam> I guess I'm starting to get to that age now.

[19:39] <PerlJam> Usually when I see a wikipedia article that starts with "In computer science ..."  I've at least heard the term before and had at least some vague idea what it was.

[19:39] <PerlJam> not so for coinduction.

[19:40] *** benabik joined
[19:40] <masak> PerlJam: do you have the sense that you've applied the concept indirectly without knowing what it was called?

[19:41] <PerlJam> yes ... ish

[19:41] <masak> :)

[19:42] <PerlJam> Actually, I'm pretty sure I've seen the term before, but it's not "connected" in my brain.

[19:43] *** ggoebel left
[19:43] <uvtc> It should be spelled co-induction (with the hyphen), IMO. I first thought it must have something to do with coins. :)

[19:44] *** ggoebel joined
[19:44] <masak> cöinduction :P

[19:44] <japhb> I can tell I'm getting old when somebody brings up a pattern, data structure, algorithm, etc. that I've never heard of, and I look it up on Wikipedia only to find it's been around long enough to get its own driver's license -- and that's still *AFTER* I graduated from college.

[19:44] <uvtc> abduction, reduction, coinduction

[19:44] <[Coke]> doesn't help that I didn't study CS, per se.

[19:45] <PerlJam> japhb: It only gets worse as you get older ...  "That sounds vaguely familiar..."  [later you realize that you wrote your thesis on the topic]    ;-)

[19:45] <japhb> *ouch*

[19:45] <uvtc> hahaha

[19:45] <japhb> I had that happen with a senior thesis a couple weeks ago, actually.  Damn.

[19:46] *** mdupont joined
[19:46] <[Coke]> huh. I also have no thesis. perhaps I'm hanging out in the wrong channel. ;)

[19:46] <PerlJam> [Coke]: It actually might help.  The older I get, the less surprised I am that people come at CS concepts from some non-CS direction.

[19:46] <japhb> [Coke], make up a thesis!  Most pundits do ...

[19:46] <[Coke]> PerlJam: it was computer systems engineering so it's not THAT far off. ;)

[19:47] <[Coke]> japhb: I briefly considered earlier this year going back for a master's or PHD. I just don't have the time.

[19:47] <[Coke]> (sad, given that I could probably get work to pay for it!)

[19:47] <PerlJam> [Coke]: that's even better!  I still have a hard time finding the science in computer science.

[19:47] <PerlJam> or computing science if you prefer

[19:48] <japhb> PerlJam, when I was first deciding what to eventually take in college, I couldn't pick "CS" because that wasn't really an available major at more than a few colleges.  Then thankfully that changed before I had to start applying, but my mother thought I was really lowering my sights when I told her I was no longer planning to double major in Math and Physics.

[19:48] <PerlJam> [Coke]: I used to be a "jack of all trades, master of none"  ... then I got a master's degree in computer science :)

[19:48] <japhb> PerlJam, so ... no change then?  ;-)

[19:49] <PerlJam> heh

[19:49] <PerlJam> japhb: btw, I tend to agree with your mother ;)

[19:50] *** leprevost joined
[19:50] *** nebuchadnezzar joined
[19:50] <japhb> Well, she may have had a point ... but I sure enjoyed myself more than I probably would have otherwise.

[19:51] <japhb> I only decided against a minor in Physics because of a class that I could tell from the course description was likely to cause me to go rather insane.

[19:52] <japhb> (which was of course required, as far as I could tell, as a form of hazing)

[19:52] <PerlJam> insanity and confusion are natural human states

[19:53] <huf> they're the only state we can be in :)

[19:54] <japhb> .oO( We're just insane enough to believe we're not confused *all* of the time ... )

[19:54] <huf> i think the insanity sometimes gets lost in the confusion and vice versa

[19:54] *** ggoebel left
[19:58] <masak> I consider hanging around here part of my rehabilitation from not having chosen a CS major.

[19:59] <jnthn> tadzik: I have this memory of you giving me a tarball with a set of modules that caused some crash/problem. Alas, I've misplaced it...searching the irclogs ain't helping so far either. Don't suppose you have it?

[19:59] <japhb> masak: I think you could switch the prefix before -habilitation and still have a valid statement.

[20:00] <japhb> Perhaps 'de-'?  :-)

[20:00] <masak> 'des-'? :P

[20:00] <jnthn> tadzik: never mind, found it. :)

[20:00] <masak> phenny: "deshabillé"?

[20:00] <phenny> masak: "dishabille" (es to en, translate.google.com)

[20:00] <huf> mis-?

[20:01] <masak> oh, it's

[20:01] <masak> phenny: "déshabillé"?

[20:01] <phenny> masak: "undressed" (fr to en, translate.google.com)

[20:02] <japhb> .oO( Mentally undressed )

[20:02] <japhb> Naked brains!

[20:03] *** ggoebel joined
[20:03] <geekosaur> zombie bait?

[20:05] *** att left
[20:06] <japhb> .oO( The Martians from Mars Attacks! would probably be the ultimate zombie bait )

[20:09] <masak> I think you are being very vivo-centric, assuming that a zombie will care about nakedness in any shape or form. :)

[20:10] <japhb> masak, well, naked in the sense of "no skull that might block the smell of those delicious brains"

[20:11] <japhb> Or if you prefer, naked as in singularity.

[20:15] * geekosaur was thinking the forer, no skull covering them

[20:15] * geekosaur kannot tipe

[20:17] <masak> interesting point.

[20:17] <masak> the zombies I know from the "literature" usually don't mind there being a skull in the way.

[20:18] <sjohnson> masak!

[20:18] <sjohnson> how's it goin

[20:19] *** thou joined
[20:21] <japhb> masak: Yes, but I'm thinking, they would be drawn to naked brains from much farther away.  Unless it was the "life force" following subtype, in which case all bets are off.

[20:24] <japhb> I'm clearly growing cynical as well.  I was thinking "Man, Duck Duck Go is getting really good" and that was immediately followed by "I wonder if they've gone evil yet?"

[20:24] *** FACEFOX left
[20:24] *** ggoebel left
[20:24] *** FACEFOX joined
[20:24] *** FACEFOX left
[20:25] <masak> sjohnson: hi! going well. busy today and tomorrow, but then... Oslo. \o/

[20:25] <masak> sjohnson: how're you?

[20:26] <sjohnson> good.. i keep getting whacked by the proverbial bamboo stick on #perl

[20:26] <sjohnson> but i'm starting to like it

[20:26] <sjohnson> makes me realize how wrong i was about many p5 things

[20:26] <PerlJam> sjohnson: kinky

[20:26] <sjohnson> heh, wait till i start asking questions here

[20:26] * masak .oO( sjohnson would like Singapore )

[20:26] <sjohnson> my back will be bloody, raw, bruised and sore

[20:26] *** FACEFOX joined
[20:26] *** FACEFOX left
[20:27] <masak> glad to hear you're having fun learning. :) we all should.

[20:28] <PerlJam> that's so true

[20:28] *** FACEFOX joined
[20:28] *** FACEFOX left
[20:28] <sjohnson> for sure

[20:29] *** fgomez joined
[20:29] <sjohnson> perl5 for me seems like unfathomable ocean

[20:29] <sjohnson> i can't imagine taking on p6 (yet)

[20:29] <masak> I'm not sure you need to think of it that way.

[20:29] <PerlJam> p5 is the ocean, p6 is space?

[20:30] <masak> both languages are big if you consider all the suburbs.

[20:30] <TimToady> p5 is the atlantic, p6 is the pacific

[20:30] *** FACEFOX joined
[20:30] *** FACEFOX left
[20:30] <PerlJam> TimToady: p6 has a ring of fire and some volcanic activity?

[20:30] <masak> like, Edument's Intermediate Perl (5) course is mostly about getting to CPAN, and then learning to use CPAN well.

[20:30] *** cooper joined
[20:31] *** icwiener left
[20:31] <masak> PerlJam: hell yeah!

[20:31] * masak it runs on geological time scales, though :/

[20:31] *** FACEFOX joined
[20:31] *** FACEFOX left
[20:31] <TimToady> not always; sometimes it'll make the earth move

[20:32] <masak> er, s/ (.*) / .oO( $1 ) /

[20:32] *** raiph joined
[20:32] <masak> gee, that was a p5 regex but with p6 insignificant whitespace. I should stop typing.

[20:32] <lichtkind> masak: do you have same rights as moritz?

[20:33] <PerlJam> lichtkind: moritz and masak are twins!  Can't you see?

[20:33] <TimToady> no, but he's got a wicket hook

[20:33] <masak> no, he lives in Germany.

[20:33] <TimToady> *wicked

[20:33] <PerlJam> They're both and m<tab> away

[20:33] <PerlJam> s/and/an/

[20:33] <lichtkind> masak: i just ask to change the cron job script for the tablets

[20:33] <masak> I consider moritz to be more righteous than me.

[20:33] *** att joined
[20:34] <masak> lichtkind: oh, I may have such rights, but tuits: no. sadly not.

[20:34] <masak> thanks for the flattering implication, though.

[20:35] <PerlJam> masak: so what rights to germans have that you do not?

[20:35] <jnthn> The right to cheap beer.

[20:35] <TimToady> cheap beer!

[20:35] <Araq> ... puns ... all I see is puns ...

[20:35] *** FACEFOX joined
[20:35] *** FACEFOX left
[20:35] *** cooper left
[20:36] *** HarryS left
[20:36] <masak> PerlJam: I'm not sure, actually. I'm not an expert at legal matters. but I'm pretty sure the rights differ somewhat.

[20:37] * TimToady blames the pun control lobby

[20:37] *** HarryS joined
[20:37] *** FACEFOX joined
[20:37] *** cooper joined
[20:38] <TimToady> the lobby has two door, y'see, and sometimes the incoming puns cancel, and sometimes they reinforce...

[20:39] * masak visualizes a ripple pattern of pun across the opposite Wall

[20:39] <masak> "professor, these puns refuse to decohere!"

[20:40] <masak> "just observe them until they do!"

[20:41] <TimToady> *doors

[20:42] <[Coke]> ooh, beer. I have some nice Hefe-Weiße waiting for me at home.

[20:42] <TimToady> "Why do you try to remove the splinter from someone else's eye when you have a Max Planck in your own eye?"

[20:42] <[Coke]> I see what you did there.

[20:42] <Araq> a beer is definitely a good idea ...

[20:43] <PerlJam> "a beer"?

[20:43] <[Coke]> PerlJam: every journey starts with a single beer.

[20:44] <PerlJam> .oO( I didn't know there was a such thing as a singular beer )

[20:44] <masak> TimToady: I didn't see the Max Planck because of measurement error!

[20:44] <TimToady> you have to get your beer atom from one or another of them

[20:45] <japhb> .oO( Atomic-powered beer )

[20:45] <Araq> "Paulaner Hefe-Weißbier -- naturtrüb", better PerlJam?

[20:45] *** ggoebel joined
[20:45] <japhb> .oO( "It's nuclear freakin' BEER!" )

[20:45] <TimToady> japhb: not going to be allowed in Germany soon

[20:45] <japhb> well played

[20:46] <masak> there you go. diff'rent rites.

[20:46] <TimToady> especially Down Under, where it's not the Rite of Spring

[20:46] *** birdwindupbird left
[20:47] <TimToady> but they know a thing or two about beer atoms

[20:48] * masak assumes the reference is http://www.imdb.com/title/tt0096486/

[20:49] <TimToady> yes, a close relative of Young Max Planck

[20:49] <japhb> .oO( "What is the neutron cross section of a beer atom?  What, all of you know?  OK ... uh ... Bruce, how about you?" )

[20:49] *** ggoebel left
[20:51] <japhb> Does beer made in a barn therefore have a higher neutron cross section?

[20:51] <TimToady> made in the loft, it'd be higher

[20:52] * TimToady should probably wander off before he does any more permanent damage...

[20:52] <TimToady> afk &

[20:53] <masak> japhb: :P

[20:53] <japhb> I was waiting for that ....

[20:53] * masak sat in on a nuclear physics course once, so he gets it

[20:53] <Araq> TimToady: too late, I'm drunk by now

[20:54] <PerlJam> he said *permanent* damage

[20:54] <jnthn> tadzik: Good news: I understand the problem. Bad news: I dunno how to fix it yet.

[20:55] <tadzik> uvtc: nice guidde you've got there; it should probably land on modules.perl6.org instead of my aged blog post

[20:55] *** ggoebel joined
[20:55] <tadzik> jnthn: yay! oh noes

[20:55] <japhb> So how is it that jnthn "I've tried beer in several dozen countries" manage to come in with an actual on-topic comment?

[20:56] <lichtkind> masak:  would you at least send us the cron file?

[20:56] <uvtc> tadzik, Thanks. I'm hoping it's useful. Can you please look it over and let me know what errors it contains? I have not published any Perl 6 modules, so doubtless it contains errors.

[20:57] <uvtc> tadzik, Yes, I had your blog post open in front of me while writing it.

[20:57] <jnthn> japhb: Because I haven't tried beer in any country yet today? :)

[20:57] <tadzik> uvtc: I'll take a closer look oncde I get back home

[20:57] * tadzik ircing from the metro. Take that, masak! :P

[20:58] <uvtc> tadzik, would appreciate it. Thanks. My email address is on my homepage (linked to at the top of the doc, in the blockquote).

[20:58] <jnthn> tadzik: Clue: replacing return Foo::Request.new; with return GLOBAL::Foo::Request.new; makes it go away.

[20:58] <tadzik> hmmm

[20:58] <jnthn> tadzik: Meh, that just means your metro isn't burried far enough underground :P

[20:59] <jnthn> tadzik: Anyway, now I understand why it's getting it wrong, I should be able to figure out a fix.

[20:59] *** thou_ joined
[21:00] <japhb> jnthn, that's just begging for a "series of tubes" joke ... which I would of course *never* stoop to ...

[21:00] <tadzik> jnthn: nah, it's just my provider who guarantees 3g or even 4g in the metro

[21:00] <tadzik> \o/

[21:00] <PerlJam> japhb: now you've made #perl go down the tubes

[21:00] <PerlJam> er, #perl6

[21:01] <japhb> *ouch*

[21:03] <jnthn> tadzik: Anyway, the issue is essentially that

[21:03] <jnthn> module Foo::Bar;

[21:03] <jnthn> use Foo;

[21:03] *** thou left
[21:03] *** uvtc left
[21:03] <jnthn> Here, the first line creates a package Foo, and then installs a Bar in its .WHO

[21:03] <jnthn> Then the "use Foo" actually brings in a class Foo

[21:04] <jnthn> The global merger actually gets it right - we end up with Bar inside of the class Foo's .WHO, and GLOBAL::Foo points to the class.

[21:04] <tadzik> cutw

[21:04] <jnthn> The only problem is that we also have a Foo installed in the lexpad by "module Foo::Bar;"

[21:04] <jnthn> Which doesn't get updated

[21:05] <jnthn> Anyway, that's why Bailador::Request goes missing.

[21:05] <tadzik> I see

[21:05] <jnthn> GLOBAL::Bailador::Request, OTOH, is right there.

[21:05] <jnthn> Took a little bit to work out...

[21:06] <jnthn> Now I just gotta figure how to deal with it.

[21:06] <tadzik> glad you've found it

[21:06] <[Coke]> jnthn++

[21:06] *** skids left
[21:07] <moritz> \o

[21:07] <phenny> moritz: 19:25Z <uvtc> tell moritz http://irclog.perlgeek.de/perl6/2012-04-17#i_5457320 -- took info from tadzik's post. Hoping that might be useful to have at perl6/modules.perl6.org.

[21:07] <jnthn> hi moritz 

[21:07] <jnthn> moritz: Do we still have issues with pre-compilation of things like MiniDBI, or is it fine these days?

[21:07] <tadzik> hello moritz 

[21:07] <jnthn> I know I fixed one issue in that space.

[21:08] <tadzik> oh oh

[21:08] * jnthn can test it if moritz doesn't have a "broken last I knew"

[21:08] <tadzik> dunno about MiniDBI, but eg SVG::Plot segfaults when you use it precompiled

[21:09] <jnthn> tadzik: With latest, after I fixed the over-serialization issues?

[21:09] *** cooper left
[21:09] <moritz> it was still broken after that

[21:09] <moritz> haven't tested it today though

[21:09] <jnthn> moritz: Which one, SVG::Plot?

[21:10] <moritz> both

[21:10] <jnthn> Hm

[21:10] <jnthn> Lemme see if I can reproduce...

[21:10] <jnthn> (the bug)

[21:13] <tadzik> mmm, sweet cold beer

[21:14] <tadzik> jnthn: at least on GPW it was still broken

[21:14] <tadzik> Where did dalek go?

[21:15] <jnthn> Yeah, reproduced the segfault here

[21:15] <tadzik> cool

[21:17] <fsergot> 'night #perl6!

[21:17] <tadzik> o/

[21:18] *** fsergot left
[21:19] *** zpmorgan joined
[21:19] <masak> what fsergot said.

[21:19] <masak> 'nyght

[21:20] <japhb> o/

[21:20] <tadzik> bye

[21:20] <tadzik> bah, uvtc gone

[21:21] <jnthn> o/

[21:22] *** thou_ left
[21:23] <tadzik> phenny: tell uvtc Few things: although there's actually no reason for having the project on github, I'm fine with recommending that :) I'd underline that it's recommended to write docs alongside the code itself, so the doc/ should be probably empty/nonexistent in 99% of the cases. Most people leave version : "*", and that's completely fine.

[21:23] <phenny> tadzik: I'll pass that on when uvtc is around.

[21:24] <tadzik> phenny: tell uvtc also, I'd note that the only things that are really necessary are either lib/ or bin/ and a META.info. Every other thing is completely optional. Aside from those it's great, way better than my blog post :)

[21:24] <phenny> tadzik: I'll pass that on when uvtc is around.

[21:26] *** thou joined
[21:28] *** zpmorgan left
[21:28] *** ggoebel left
[21:28] *** ggoebel joined
[21:29] *** bluescreen10 left
[21:31] *** zpmorgan joined
[21:34] *** fgomez left
[21:38] *** zpmorgan left
[21:39] *** zpmorgan joined
[21:46] *** fgomez joined
[21:50] *** uvtc joined
[21:50] <uvtc> hi

[21:50] <phenny> uvtc: 21:23Z <tadzik> tell uvtc Few things: although there's actually no reason for having the project on github, I'm fine with recommending that :) I'd underline that it's recommended to write docs alongside the code itself, so the doc/ should be probably empty/nonexistent in 99% of the cases. Most people leave version : "*", and that's completely fine.

[21:50] <phenny> uvtc: 21:24Z <tadzik> tell uvtc also, I'd note that the only things that are really necessary are either lib/ or bin/ and a META.info. Every other thing is completely optional. Aside from those it's great, way better than my blog post :)

[21:50] <uvtc> thanks phenny, you're the best. :)

[21:55] <tadzik> :)

[21:55] *** jferrero left
[21:56] <uvtc> tadzik, I added something about git/github being recommended. I don't know how one would share Perl 6 modules without github.

[21:56] <uvtc> tadzik, if there's a way, it's not included in this basic doc, I suppose.

[21:58] <uvtc> What license would you recommend module distributors use if they have no other preference? I think it's wise to suggest that authors provide a license file.

[21:58] <tadzik> uvtc: well, you can use any kind of git repo you want, as long as the source-url is correct

[21:58] <uvtc> Ah. Ok. So git is required then. Good to know.

[21:59] <tadzik> panda just clones whatever source-url points too. It could be gitorious as well, or whatever else

[21:59] <tadzik> I expect one day we'll want to support hg too

[21:59] <tadzik> about license, if you ask me personally I'd recommend MIT, but I think Perl Artistic is the way to go

[21:59] <uvtc> Ok, but for now, it's git. Very good.

[22:00] <uvtc> Ah, I see that Rakudo uses Artistic License 2.

[22:00] <uvtc> I'll add advice about that...

[22:01] <tadzik> cool

[22:01] <tadzik> It's time for me to take a sleep, I think. I'm looking forward to posting your guide tomorrow below the link to the module writing guide :)

[22:01] <tadzik> good night for today o/

[22:02] <jnthn> night, tadzik 

[22:02] <uvtc> added note about license. Thanks, tadzik 

[22:02] *** nif joined
[22:11] *** jaffa4 left
[22:13] *** spider-mario left
[22:13] *** spider-mario joined
[22:14] *** nif left
[22:14] <lichtkind> how to say thematically sorted in one word?

[22:14] <moritz> grouped

[22:15] <lichtkind> hai moritz

[22:15] <lichtkind> you surely heard of our undertakings

[22:15] <moritz> yes

[22:15] <lichtkind> we need a change in the cronjob

[22:15] <moritz> I know

[22:15] <lichtkind> but just after i renamed the files

[22:15] <moritz> but sick daughter takes priority

[22:15] <lichtkind> understand

[22:16] *** nif joined
[22:17] *** att left
[22:17] <lichtkind> during next week willbe enough

[22:17] *** spider-mario left
[22:17] *** nif left
[22:22] <jnthn> ooh, my French Perl Workshop talk got accepted. Now I've gotta go!

[22:23] <eiro> sure: i did it to be sure you'll join us :)

[22:24] <eiro> 'night all

[22:25] <lichtkind> good night

[22:25] *** localhost joined
[22:27] <moritz> ok, tablets are up

[22:28] *** PacoAir left
[22:28] <lichtkind> no :)

[22:28] <moritz> yes

[22:28] <moritz> just no index.html

[22:28] <lichtkind> moritz: what you mean by that?

[22:28] <lichtkind> moritz: thats one of the reasons why i rename currently

[22:29] <uvtc> Nice. I see them.

[22:29] <lichtkind> grouped was very good recommenation

[22:29] <lichtkind> moritz++

[22:29] <moritz> oh, one thing about the URLs

[22:29] <lichtkind> moritz++ and this one for moving

[22:29] <moritz> you can link to /io instead of /io.html

[22:30] <uvtc> Maybe have index.html redirect to introduction.html

[22:30] <lichtkind> to

[22:30] <lichtkind> i renamed toc to index

[22:30] <lichtkind> its meant to be the entry point

[22:31] <lichtkind> and itintro is  a preface which many dont like to read :)

[22:33] <jnthn> sleep &

[22:33] <lichtkind> jnthn: good dreams

[22:33] *** Eddie_Mty left
[22:34] <lichtkind> moritz: does the cron no run the python?

[22:34] <moritz> it does

[22:36] <lichtkind> moritz: great

[22:36] *** benabik left
[22:36] <lichtkind> uvtc: one of the main reasons i try to go with markdown is that we can convert to anything

[22:37] <lichtkind> moritz: and does it a cleanup i mean delete old files?

[22:37] <uvtc> lichtkind, Right. Pandoc can convert to lots of other formats.

[22:37] <moritz> lichtkind: no

[22:37] <moritz> but I can change that if you want

[22:37] <lichtkind> moritz: allright one manual sweep tomorrow would be enough

[22:40] <moritz> https://gist.github.com/2409568 that's the update script, now with cleanup

[22:40] * moritz -> sleep

[22:43] <uvtc> phenny, tell tadzik Oh, I had the "name" field in the META.info file wrong --- it's supposed to be a module name, not the project name. Corrected.

[22:43] <phenny> uvtc: I'll pass that on when tadzik is around.

[22:44] <lichtkind> moritz: good night

[22:46] <lichtkind> uvtc: still around?

[22:46] <uvtc> hi

[22:46] <lichtkind> https://github.com/perl6/tablets/tree/master/docs

[22:46] <lichtkind> can you live with that?

[22:47] <lichtkind> i think people can better understand content and better navigate in a dir with these names

[22:47] <lichtkind> i also updated nov

[22:47] <lichtkind> _nav

[22:47] <uvtc> Haha. :) It's, of course, not my project. I just did the translation to pandoc-markdown.

[22:48] <uvtc> I previously kept the names short, just because they were easier to type and lead to shorter urls. :)

[22:49] <uvtc> So, how often does the cron task run that updates tablets.perl6.org?

[22:49] <lichtkind> last time it was 5 min

[22:50] <lichtkind> allright let me rephrase

[22:50] <lichtkind> do you like the new namings

[22:50] <uvtc> Oh, sure, looks nice.

[22:51] <lichtkind> and i liked you put the quotes in boxes

[22:51] <lichtkind> sure colors are not optimal

[22:51] <lichtkind> but thats how i wanted it

[22:52] <uvtc> low-contrast :)

[22:52] <lichtkind> yes

[22:54] <uvtc> Hm. You said it updated 5 minutes ago, but I still don't see a tablets.perl6.org/index.html .

[22:54] <lichtkind> yes i noticed

[22:55] <lichtkind> and we can ask moritz tomorrow

[22:55] <uvtc> Yup. Ok, o/

[22:55] *** uvtc left
[22:55] <lichtkind> good night

[22:56] *** Chillance left
[22:56] *** skids joined
[23:00] *** alester left
[23:01] *** lichtkind left
[23:08] *** thelazydeveloper left
[23:12] *** fgomez left
[23:12] *** derrazo joined
[23:25] *** att joined
[23:28] *** fgomez joined
[23:31] *** NamelessTee left
[23:32] *** hugme left
[23:32] *** Juerd left
[23:34] *** [Coke] left
[23:35] *** [Coke] joined
[23:35] <[Coke]> Can't ssh into feather.

[23:45] *** benabik joined
[23:46] *** hugme joined
[23:46] *** ChanServ sets mode: +v hugme

[23:46] *** p6eval joined
[23:46] *** ChanServ sets mode: +v p6eval

[23:46] *** whiteknight joined
[23:50] *** Juerd joined
[23:51] *** PerlJam joined
[23:53] *** masak joined
[23:53] *** Util joined
[23:54] *** pmichaud joined
[23:54] *** [Coke]_ joined
[23:55] *** tokuhirom joined
