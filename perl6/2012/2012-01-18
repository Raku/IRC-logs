[00:02] *** PacoAir left
[00:10] *** alester left
[00:13] *** LlamaRider joined
[00:20] *** ksi left
[00:23] *** bacek left
[00:26] <colomon> anyone out there?

[00:27] <geekosaur> nobody but us camels

[00:27] <colomon> no butterflies?

[00:27] * TimToady flutters by

[00:27] *** replore joined
[00:28] <[Coke]> pong.

[00:28] <colomon> not a bad crowd at all!

[00:29] * colomon is watching basketball and trying to debug Panda under Niecza

[00:30] *** bacek joined
[00:30] <ggoebel> colomon++

[00:32] <LlamaRider> one llama is still lingering around too :p

[00:33] <sorear> *pop*

[00:34] <sorear> colomon: what do you think about the Rat.perl issues that came up earlier?

[00:34] <colomon> +<2/3> versus <2/3> ?  I wasn't paying too close attention

[00:34] <sorear> versus (2/3)

[00:35] <sorear> by current spec, <2/3> makes a RatStr, not a Rat

[00:35] <sorear> TimToady also offered a solution where <2/3> (without spaces) makes a pure Rat, but I'm not fond of that

[00:35] <sorear> my preferred choice is (2/3)

[00:36] <colomon> why (2/3) and not just 2/3?

[00:36] <sorear> precedence

[00:37] <colomon> ah, makes sense

[00:37] <colomon> (2/3) is easier on my eye

[00:37] <sorear> I'm not sure if we want to go down the Haskell showsParen rabbit hole

[00:38] *** thou left
[00:38] <colomon> and (2/3) doesn't seem to require extra logic in the grammar.

[00:38] <colomon> <2/3> would go completely away, other than as the same as <1> or <1.4>?

[00:40] <TimToady> I would still like to see that for a literal syntax

[00:40] <TimToady> it's a nice pill

[00:43] <TimToady> and it's kind of odd to use < ... > for a single string value in any case

[00:46] <colomon> sorear: did you have thoughts on fixing up my patch from this morning?  proper implementation of $*CWD and proper error handling on chdir?

[00:49] *** hundskatt left
[00:54] <sorear> colomon: I didn't understand what you meant

[00:55] <colomon> $*CWD is supposed to always be the current directory.  I suspect it should query the current directory each time.  (It's also supposed to be writable to do chdir, but I'm not looking to make that work today.)

[00:55] <colomon> If the C# system call in chdir throws, chdir's CATCH doesn't catch it.

[00:56] <colomon> you can try S32-io/chdir.t to see a demonstration of the latter.

[00:56] <sorear> any particular reason not to use a C#-level CATCH?

[00:57] <colomon> err.... not really, I suppose.

[00:57] <colomon> mostly that I thought the p6-level CATCH would get it

[00:57] <colomon> panda/fetcher.t now passes!  \o/

[00:57] *** overrosy left
[00:59] <sorear> oh, your problem is that there's nothing in the CATCH to actually catch the exception

[00:59] *** overrosy joined
[00:59] <sorear> if you just fall off the end of a CATCH block, it's assumed to be unhandled

[01:00] <sorear> CATCH blocks are supposed to contain when and default clauses

[01:00] <colomon> oh!

[01:01] <colomon> ah, that's why the "goto fail" in the other CATCH in CORE.setting works?

[01:02] <colomon> so something like CATCH { default { $ok_code = False; } } should work?

[01:05] *** overrosy left
[01:09] *** tokuhirom left
[01:12] *** overrosy joined
[01:22] <colomon> spectest seems very slow, or possibly looping?

[01:23] * colomon is glaring in moritz's direction...

[01:23] *** zjmarlow joined
[01:24] <colomon> someone added a bunch of Range.roll tests which will be deathly slow unless an optimized version of Range.roll has been added.  :\

[01:25] <sorear> perhaps that's the point :)

[01:26] <sorear> yes, default version will/should work

[01:26] <colomon> I'm sure it's the point of the test, but simply adding it just wasted about ten minutes plus a near complete spectest run for me

[01:28] <dalek> roast: 3480b41 | (Solomon Foster)++ | S32-list/ (2 files):

[01:28] <dalek> roast: Fudge tests that work but are deathly slow until we can optimize the functions.

[01:28] <dalek> roast: review: https://github.com/perl6/roast/commit/3480b41cb7

[01:34] * colomon wishes tadzik were around...

[01:39] *** Chillance left
[01:40] <dalek> niecza: e32f383 | (Solomon Foster)++ | lib/ (2 files):

[01:40] <dalek> niecza: Quick implementation of IO.copy.

[01:40] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e32f383da5

[01:40] <dalek> niecza: a19bc37 | (Solomon Foster)++ | lib/CORE.setting:

[01:40] <dalek> niecza: Fix CATCH statement in chdir.

[01:40] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a19bc370e0

[01:40] <dalek> niecza: dd8e178 | (Solomon Foster)++ | t/spectest.data:

[01:40] <dalek> niecza: Turn on S32-io/chdir.t.

[01:40] <dalek> niecza: review: https://github.com/sorear/niecza/commit/dd8e17811d

[01:52] <colomon> woo-hoo!  # basketball results, exciting finish

[01:53] *** xinming_ joined
[01:56] *** xinming left
[02:09] *** LlamaRider left
[02:09] *** drbean_ joined
[02:16] *** wolfman2000 joined
[02:18] <[Coke]> what's the perl6 word for "coerced" ?

[02:23] *** lestrrat left
[02:23] *** xinming joined
[02:24] *** lestrrat joined
[02:24] <[Coke]> also, I never got an answer to this: if you have an optional parameter, and someone passes in an undefined value, can you tell the difference between that and an invocation with no value provided?

[02:26] *** xinming_ left
[02:27] <colomon> I don't think so

[02:27] <sorear> yes, if your parameter has a defined default value

[02:27] *** dnewkirk left
[02:28] <[Coke]> any feedback on http://feather.perl6.nl/~coke/splice.diff ?

[02:28] <[Coke]> sorear: nope, just a straight $foo?

[02:30] <sorear> [Coke]: I think you should write $size = * - 0

[02:30] <sorear> or $size = Inf maybe

[02:31] <[Coke]> sure, that's better.

[02:32] *** whiteknight left
[02:35] *** whiteknight joined
[02:37] <[Coke]> sorear: slightly updated version.

[02:39] <sorear> no comment

[02:43] *** overrosy left
[02:44] *** overrosy joined
[02:45] *** drbean_ left
[02:54] *** whiteknight left
[02:58] <dalek> std: 2300df1 | larry++ | STD.pm6:

[02:58] <dalek> std: check for common (?) mistakes from p5

[02:58] <dalek> std: review: https://github.com/perl6/std/commit/2300df1c10

[02:58] <dalek> std: 6006414 | larry++ | STD.pm6:

[02:58] <dalek> std: make declarators parse the following initializer

[02:58] <dalek> std: review: https://github.com/perl6/std/commit/6006414f2d

[02:58] <dalek> std: 40d10f7 | larry++ | STD.pm6:

[02:58] <dalek> std: make initializer use item vs list assignment

[02:58] <dalek> std: review: https://github.com/perl6/std/commit/40d10f712c

[02:58] <TimToady> sorear, jnthn: okay, STD now parses initializers as part of the declaration

[03:01] *** overrosy left
[03:03] *** overrosy joined
[03:03] * sorear reviers

[03:06] * colomon wonders if that's a language he doesn't know, or a typo for reviews

[03:08] <colomon> sorear: presuming chmod requires the PosixWrapper.   Given http://docs.go-mono.com/?link=T%3aMono.Unix.Native.FilePermissions, how do I specify the types of the Func< > ?

[03:08] *** eclipse_11 joined
[03:08] <dalek> specs: 744f7ca | larry++ | S02-bits.pod:

[03:08] <dalek> specs: treat angle literals as slightly special

[03:08] <dalek> specs: 

[03:08] <dalek> specs: <1/2> and <+1-2i> now produce Rat and Complex as (slightly) special

[03:08] <dalek> specs: forms.  Use whitespace or french angles to get the other behavior.

[03:08] <dalek> specs: review: https://github.com/perl6/specs/commit/744f7ca348

[03:13] <sorear> colomon: the latter

[03:14] <colomon> latter?

[03:14] <TimToady> typo

[03:14] <sorear> typo for reviews

[03:14] <sorear> colomon: You can't.  That would need to use a MethodInfo and wrapper function

[03:14] <colomon> ah!

[03:15] <colomon> MethodInfo, hmmm, like in stat, eh?

[03:15] <colomon> let me see if I can reverse engineer it from that

[03:16] *** lutok left
[03:16] <TimToady> sorear: does the initializer rule seem workable to you?  jnthn has been pining for it for some time :)

[03:18] <TimToady> presumably each declarator can decide which of the extra forms make sense or not; 'my' will likely distingish '=' from ':=', while 'constant' probably won't, seems like

[03:21] <TimToady> hopefully this will take some of the pressure off of trying to guess what the operator means at reduce time

[03:21] <sorear> TimToady: tentatively looks ok

[03:21] <sorear> TimToady: I'll give a shot at implementing it later

[03:22] * TimToady will be interested to see how it works out

[03:23] <[Coke]> sorear, colomon: if I have a method in the setting, how can I check to see if one of the arguments is a whatevercode, and then how do I get its value? (.e.g getting -7 from *-7) 

[03:24] <colomon> [Coke]: look at substr

[03:25] <colomon> particularly $len

[03:27] *** overrosy left
[03:28] <[Coke]> danke.

[03:29] <colomon> sorear: I see obj_getstr, obj_getnum, obj_getbool

[03:29] <colomon> sorear: is there an obj_getint I'm missing somewhere?

[03:31] *** overrosy joined
[03:34] *** orafu left
[03:36] *** orafu joined
[03:37] <sorear> colomon: no

[03:38] <[Coke]> is there a way to auto-expand all the sections in lib/CORE.setting in vim?

[03:39] <sorear> zi

[03:39] * sorear is looking at :help z

[03:39] * [Coke] finds "set nofen"

[03:41] <sorear> looks like zR is the actual "expand all folds" command

[03:41] <[Coke]> I just never want that, will add nofen to my .vimrc.

[03:42] *** Patterner left
[03:43] <[Coke]> argh. stacktrace in niecza that isn't showing any of the lines I'm editing.

[03:43] *** Psyche^ joined
[03:43] *** Psyche^ is now known as Patterner

[03:45] <colomon> arrrgh, chmod's mode stuff isn't quite working

[03:50] *** kshannon left
[03:50] *** kshannon joined
[03:51] <colomon> bedtime

[03:58] <[Coke]> I'm trying to fudge a test that has a sub that runs 2 tests. the sub is prefixed with a #?DOES 2 - but if I later put a #?niecza todo 'eek' before an invocation of that sub, only 1 test is skipped.

[04:05] *** ruoso left
[04:06] *** ruoso joined
[04:10] *** ruoso left
[04:16] *** cognominal___ left
[04:17] <dalek> specs: 8d48c31 | coke++ | S32-setting-library/Containers.pod:

[04:17] <dalek> specs: minor update to clarify splice

[04:17] <dalek> specs: review: https://github.com/perl6/specs/commit/8d48c313f6

[04:17] *** cognominal joined
[04:18] *** ruoso joined
[04:19] <dalek> roast: 2718f25 | coke++ | S32-array/splice.t:

[04:19] <dalek> roast: Simplify tests, follow spec.

[04:19] <dalek> roast: 

[04:19] <dalek> roast: (e.g. error on negative args, take WhateverCode args..)

[04:19] <dalek> roast: review: https://github.com/perl6/roast/commit/2718f2521f

[04:22] *** molaf joined
[04:22] <dalek> niecza: 280d918 | coke++ | / (2 files):

[04:22] <dalek> niecza: add @array.splice

[04:22] <dalek> niecza: 

[04:22] <dalek> niecza: run S32-array/splice.t

[04:22] <dalek> niecza: review: https://github.com/sorear/niecza/commit/280d918ca8

[04:22] <[Coke]> there's 37 more tests.

[04:23] <[Coke]> my implementation can surely be simplified.

[04:28] <dalek> roast: 4e1c6fc | coke++ | / (2 files):

[04:28] <dalek> roast: unfudge now that we have splice.

[04:28] <dalek> roast: review: https://github.com/perl6/roast/commit/4e1c6fc6d2

[04:30] * [Coke] will fudge that for rakudo.

[04:34] <dalek> roast: 78b269a | coke++ | S32-array/splice.t:

[04:34] <dalek> roast: rakudo fudge

[04:34] <dalek> roast: review: https://github.com/perl6/roast/commit/78b269a6d1

[04:34] <[Coke]> phenny, tell masak the splice test has been updated, rakudo needs to be updated to pass it again (it's been fudged0

[04:34] <phenny> [Coke]: I'll pass that on when masak is around.

[04:41] *** ponbiki joined
[04:42] *** xinming left
[04:43] *** xinming joined
[04:45] *** carlin joined
[04:55] *** thou joined
[04:57] *** birdwindupbird joined
[04:57] *** molaf left
[05:00] *** am0c joined
[05:28] *** carlin left
[05:43] *** zjmarlow left
[05:49] <tadzik> g'morning

[05:51] <sorear> o/ tadzik

[05:54] *** drbean_ joined
[05:55] <tadzik> oh, nieczapanda working :)

[05:56] <tadzik> well, starting to

[06:03] <moritz> \o

[06:03] <phenny> moritz: 17 Jan 21:57Z <jnthn> ask moritz if he could run a spectest of Rakudo on latest NQP master to see if there's any serious regressions from fixing the backtracking into subrules. (I assume you have ICU, which I don't.)

[06:03] <dalek> rakudo/nom: 42068aa | moritz++ | src/core/Range.pm:

[06:03] <dalek> rakudo/nom: remove debugging statement, moritz-- kboga++

[06:03] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/42068aafbf

[06:04] *** drbean_ left
[06:05] <tadzik> hello moritz 

[06:06] <moritz> hello tadzik 

[06:06] *** am0c left
[06:14] *** kaleem joined
[06:26] *** replore left
[06:28] *** eclipse_11 left
[06:30] *** koban joined
[06:31] *** jeffreykegler joined
[06:33] *** jeffreykegler left
[06:39] *** wtw joined
[06:43] *** bacek left
[06:45] <jnthn> morning'

[06:46] <moritz> \o jnthn 

[06:46] <jnthn> oops, excessive apostrophe was excessive

[06:46] * jnthn isn't used to being up before the sun :)

[06:46] *** hundskatt joined
[06:46] <moritz> jnthn: running that spectest now

[06:46] <jnthn> moritz: OK. Hope it won't be too bad.

[06:48] *** bacek joined
[06:52] <moritz> jnthn: two hangs, S05-mass/stdrules.rakudo and S05-modifier/sigspace.rakudo

[06:52] <moritz> (at least they don't leak)

[06:52] <jnthn> hangs? :/

[06:54] *** dsag joined
[06:56] *** p4 joined
[06:57] *** am0c^ joined
[06:58] <jnthn> oh, seems that they have <.ws> in common

[06:59] *** GlitchMr joined
[07:03] <jnthn> heading to training center, bbiab

[07:08] *** lestaway joined
[07:10] *** zby_home_ left
[07:13] *** nornagest joined
[07:14] *** dsag left
[07:16] *** lestrrat left
[07:16] *** moritz left
[07:16] *** sivoais left
[07:16] *** lestaway is now known as lestrrat

[07:17] *** am0c joined
[07:17] *** sivoais joined
[07:17] *** moritz joined
[07:30] *** lutok joined
[07:30] *** koban left
[07:31] *** bacek left
[07:32] *** am0c^ left
[07:38] * jnthn her

[07:38] <jnthn> er, her

[07:38] <jnthn> *here

[07:38] <sorear> what about her?

[07:38] <sorear> o/ jnthn

[07:38] <jnthn> She's cute!

[07:38] <jnthn> :P

[07:39] <jnthn> Realized (I think) on the walk here what's going on...of course, <.ws> will match again and again every time you backtrack into it :)

[07:39] <jnthn> Need to see if that's something systemic or specific to the way ws has been written in QRegex.

[07:40] <jnthn> alas, gotta sort out for my class right now :)

[07:41] <jnthn> also, where on earth is the coffee machine...

[07:41] <moritz> is that the saem as quantified zero-width match?

[07:41] <sorear> jnthn: what is the symptoms?

[07:41] <moritz> a hang

[07:42] <jnthn> sorear: I'm pretty sure that it just goes back into .ws, which doesn't do anything about the restart flag.

[07:43] <jnthn>  And so it matches again...and again...and again... :)

[07:44] *** cognominal_ joined
[07:47] *** cognominal left
[07:48] <jnthn> oh...I think !cursor_pass sets the backtrack flag by default now, whereas it was done explicitly before.

[07:48] <jnthn> Will check later...

[07:49] <sorear> So you aren't just using a lazy list of cursors?

[07:55] <jnthn> sorear: Well, backtracking involves an invocation that creates a cursor, so I suspect there's some level of equivalence there

[07:55] <jnthn> sorear: You could see this problem as a never-ending iterator if you prefer to look at it from that angle :)

[07:55] *** xinming left
[07:56] *** jerome_ joined
[08:02] *** ponbiki left
[08:12] *** lestrrat left
[08:14] *** lestrrat joined
[08:14] *** nornagest left
[08:18] *** muixirt joined
[08:24] *** mj41 joined
[08:25] *** Exodist left
[08:27] <masak> mornin'

[08:27] <phenny> masak: 04:34Z <[Coke]> tell masak the splice test has been updated, rakudo needs to be updated to pass it again (it's been fudged0

[08:29] <moritz> jnthn: fwiw 'make qregex-test' in nqp also hangs

[08:30] <masak> oh dear -- some people judge overall Perl 6 activity by measuring the activity on p6l :( http://perlmonks.org/?node_id=948499

[08:37] <sorear> tell them that nobody cares about p6l anymore except fanboys and people who are developing their own vaporware languages

[08:38] <moritz> that's basically what I'm writing now

[08:39] <moritz> ... except that perlmonks doesn't accept my post, because of too high load

[08:39] *** cognominal_ left
[08:40] <masak> discussion at http://perlmonks.org/?node_id=948107 gets quite ugly at times.

[08:41] *** cognominal joined
[08:41] <masak> I try to steer clear of such discussions nowadays. they lead nowhere and cause blood to boil.

[08:42] *** cognominal_ joined
[08:44] *** drbean_ joined
[08:44] <masak> the *only* outcome that matters is putting Perl 6 to good use in various ways.

[08:45] * moritz should follow that line of thought more closely too

[08:45] *** cognominal left
[08:45] <moritz> nom: sleep Duration.new(1/2); say 'alive'

[08:45] <p6eval> nom 42068a: OUTPUT«alive␤»

[08:49] <cognominal_> perlmonks serves a purpose by being a magnet for pointless discussions so they do not pollute developper and pedagogical forums.

[08:51] <moritz> colomon: sorry for the slow tests; on rakudo without the optimizations they were slow, but managable; I forgot to test them on nieza

[08:52] <mj41> rakudo: class myDate is Date { }; my $a=myDate.new("2011-01-01"); my myDate $b = $a; say $b.WHAT; $b += 1;

[08:52] <p6eval> rakudo 42068a: OUTPUT«myDate()␤Type check failed in assignment to '$b'; expected 'myDate' but got 'Date'␤  in block <anon> at /tmp/lNj705hWlS:1␤  in <anon> at /tmp/lNj705hWlS:1␤»

[08:52] <moritz> mj41: oh, that seems Less Than Awesome

[08:53] <moritz> but why?

[08:54] <moritz> nom: class A { method new() { self.bless(*) } }; class B is A { }; say B.new.WHAT

[08:54] <p6eval> nom 42068a: OUTPUT«B()␤»

[08:54] <moritz> ah, it's the + that produces a Date

[08:54] <moritz> I'm afraid there's no good solution to that

[08:55] <mj41> moritz: sorry :-) ... workaround is easy https://github.com/mj41/FinMag/blob/master/finmag.p6#L102 but not nice

[08:56] *** nornagest joined
[08:56] <moritz> mj41: https://rt.perl.org/rt3/Ticket/Display.html?id=108052 is what happens when operators return objects of the type of their arguments, and not always a fixed type

[08:57] <moritz> I think the workaround is more desirable than a magic that can go so wrong

[09:03] <mj41> back at real $work :-( ... will backlog 8 hours later

[09:03] *** yves left
[09:05] * sorear -> sleep

[09:07] *** yves joined
[09:09] *** GlitchMr42 joined
[09:10] *** _dbr joined
[09:12] *** GlitchMr left
[09:15] *** drbean_ left
[09:27] *** spine_ joined
[09:28] *** cognominal_ left
[09:29] <jnthn> moritz: ah, good to know...thanks

[09:31] <moritz> I think I know why m/.../ and <prior> don't mix

[09:31] <moritz> m/.../ compiles to $/.match

[09:32] <moritz> which in turn calls Str.ll-match

[09:32] <jnthn> aha

[09:32] <moritz> where the call to Cursor::set_last_match should be

[09:32] <jnthn> yeah, that's prbably it

[09:32] <jnthn> right

[09:32] <jnthn> may have to re-order things a bit though - Cusrsor currently comes after Str.

[09:33] <jnthn> Note it's a private method on Cursor

[09:33] <jnthn> You'll have to add a trusts Str in Cursor also

[09:34] <dalek> rakudo/nom: ed943e6 | moritz++ | src/core/ (2 files):

[09:34] <dalek> rakudo/nom: stringify stuff before passing it to the regex engine

[09:35] <dalek> rakudo/nom: 

[09:35] <dalek> rakudo/nom: Otherwise lots of tests break; though not sure if this is the right solution

[09:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ed943e669a

[09:35] <jnthn> moritz: Another way woulda been to stringify orig in Match.Str

[09:36] <moritz> jnthn: no, it died in the regex engine

[09:36] <jnthn> moritz: oh.

[09:36] <moritz> so that would have been too late

[09:36] <jnthn> Then yeah, we'll have to do it beforehand.

[09:37] <jnthn> Yeah, I musta misread the stacktrace

[09:37] <moritz> ./perl6 -e 'try { die "foo" }; say $! ~~ /foo/'

[09:37] <moritz> now lives again

[09:37] *** sunnavy joined
[09:37] <jnthn> moritz++

[09:37] <moritz> but there are still some test failures related to matching against non-strings

[09:39] <jnthn> moritz: btw, were the hangs the only spectest failures the backtracking into subrules patches caused?

[09:40] <moritz> jnthn: no, see the link to the summary diff I pasted earlier

[09:40] <jnthn> huh, I musta missed that

[09:40] <moritz> http://moritz.faui2k3.org/tmp/spectest-summary.diff.txt

[09:42] <jnthn> oh, think we were on opposite sides of a netsplit when y ou posted it!

[09:42] <moritz> quite possible :/

[09:43] <jnthn> eek, lots of fail

[09:43] <moritz> indeed

[09:44] * jnthn hopes they have a small number of root causes in mind

[09:44] <jnthn> Like that there also some passing TODO in there too :)

[09:44] <jnthn> s/in mind//

[09:47] *** dakkar joined
[09:48] *** muixirt left
[09:49] *** flussence joined
[09:56] *** cognominal joined
[09:59] *** cognominal left
[10:01] *** cognominal joined
[10:05] *** nornagest left
[10:08] *** donri joined
[10:13] *** cognominal left
[10:14] *** cognominal joined
[10:14] *** xinming joined
[10:19] *** daxim joined
[10:25] *** flussence left
[10:27] *** flussence joined
[10:28] *** koban joined
[10:28] *** koban left
[10:38] *** donaldh joined
[10:57] *** GlitchMr joined
[10:59] *** thou left
[11:00] *** GlitchMr42 left
[11:07] *** pnu left
[11:13] *** drbean_ joined
[11:18] *** pnu joined
[11:29] *** xinming left
[11:29] *** xinming joined
[11:35] *** xinming left
[11:36] *** xinming joined
[11:37] *** jerome_ left
[11:48] *** nebuchadnezzar left
[11:49] *** nebuchadnezzar joined
[11:50] *** zjmarlow joined
[12:04] *** jerome_ joined
[12:08] *** GlitchMr42 joined
[12:12] *** GlitchMr left
[12:13] *** benabik joined
[12:18] <colomon> tadzik: ping?

[12:24] *** tokuhirom joined
[12:26] <tadzik> colomon: pong?

[12:27] <colomon> \o/

[12:27] <donri> pang!

[12:27] <jnthn> tadzik: traceroute?

[12:27] <jnthn> ;)

[12:27] <colomon> ecosystem.t, the last three tests -- where is that data being sent?

[12:27] <colomon> *set

[12:29] <tadzik> colomon: it's from t/panda/fakeprojects

[12:29] <colomon> where in the code is it being set?

[12:30] <tadzik> #6, especially #8

[12:31] <tadzik> it reads the projectsfile as a JSON list of projects

[12:31] <colomon> hmm, so maybe I've got a JSON bug here

[12:31] <colomon> danke

[12:31] <tadzik> bitte

[12:39] *** sunnavy left
[12:39] *** sunnavy joined
[12:40] *** xinming left
[12:40] *** xinming joined
[12:40] *** preflex left
[12:44] <colomon> perl6: class Foo { has @.bar; }; my $a = Foo.new(bar => [1, 2, 3]); say $a.bar.WHAT; say $a.bar[0].WHAT; say $a.perl

[12:44] <p6eval> pugs b927740: OUTPUT«Array␤Int␤\Foo.new(("bar" => [1, 2, 3]),)␤»

[12:44] <p6eval> ..niecza v13-300-g280d918: OUTPUT«Array()␤Array()␤Foo.new(...)␤»

[12:44] <p6eval> ..rakudo ed943e: OUTPUT«Array()␤Int()␤Foo.new(bar => Array.new(1, 2, 3))␤»

[12:44] <colomon> perl6: class Foo { has @.bar; }; my $a = Foo.new(bar => [1, 2, 3]); say $a.bar.WHAT; say $a.bar[0].WHAT; say $a.bar.perl

[12:44] <p6eval> rakudo ed943e: OUTPUT«Array()␤Int()␤Array.new(1, 2, 3)␤»

[12:44] <p6eval> ..pugs b927740: OUTPUT«Array␤Int␤[1, 2, 3]␤»

[12:44] <p6eval> ..niecza v13-300-g280d918: OUTPUT«Array()␤Array()␤[[1, 2, 3]].list␤»

[12:45] <colomon> ... I think that's a niecza-bug

[12:46] <colomon> niecza: class Foo { has @.bar; }; my $a = Foo.new(bar => <1 2 3>); say $a.bar.WHAT; say $a.bar[0].WHAT; say $a.bar.perl

[12:46] <p6eval> niecza v13-300-g280d918: OUTPUT«Array()␤Str()␤["1", "2", "3"].list␤»

[12:47] <masak> colomon: looks like.

[12:47] <colomon> niecza: class Foo { has @.bar; }; my $a = Foo.new(bar => <1 2 3>.map(+*)); say $a.bar.WHAT; say $a.bar[0].WHAT; say $a.bar.perl

[12:47] <p6eval> niecza v13-300-g280d918: OUTPUT«Array()␤Int()␤[1, 2, 3].list␤»

[12:47] <colomon> niecza: say <1 2 3>.map(+*).WHAT

[12:47] <p6eval> niecza v13-300-g280d918: OUTPUT«List()␤»

[12:48] *** skids left
[12:55] *** preflex joined
[12:57] *** xinming left
[12:57] *** xinming_ joined
[13:02] <dalek> niecza: 188b9c9 | (Solomon Foster)++ | lib/ (2 files):

[13:02] <dalek> niecza: Implementation of chmod using PosixWrapper.

[13:02] <dalek> niecza: review: https://github.com/sorear/niecza/commit/188b9c9bc9

[13:04] *** daemon left
[13:06] *** daemon joined
[13:08] *** Trashlord joined
[13:09] *** kaleem left
[13:11] *** GlitchMr joined
[13:14] *** GlitchMr42 left
[13:19] <dalek> niecza: 0f93f81 | (Solomon Foster)++ | lib/CORE.setting:

[13:19] <dalek> niecza: Whoops!  chmod was supposed to be a method on IO, not a free sub.

[13:19] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0f93f81116

[13:20] *** daemon left
[13:20] *** daemon joined
[13:21] *** p4 left
[13:21] *** daemon left
[13:23] *** molaf joined
[13:23] <colomon> tadzik: I now have all the panda tests working except the dependency thing.  Hmm... and I think I've got a cheesy workaround for that...

[13:23] *** daemon joined
[13:24] *** bluescreen10 joined
[13:24] <colomon> bingo!

[13:25] <colomon> all panda tests now pass

[13:25] *** xinming_ left
[13:25] *** jaldhar left
[13:25] *** xinming joined
[13:25] *** jaldhar joined
[13:26] <tadzik> nice!

[13:27] *** xinming left
[13:27] *** xinming joined
[13:27] <colomon> stubs.t doesn't pass yet, but soon...

[13:28] <colomon> ooo, retract that

[13:28] <colomon> I don't think the introspection it depends on is available in niecza yet

[13:28] <tadzik> ah, Test::Mock

[13:28] <colomon> yeah

[13:29] <colomon> of course, bootstrap still doesn't seem to work.  :)

[13:29] <colomon> wishes it conclusively failed rather than just not printing anything other than 

[13:29] <colomon> ==> Installing panda from a local directory '.'

[13:29] <colomon> Any()

[13:30] <colomon> oh, that's because of the try / CATCH.  hmmm

[13:31] *** pat_js joined
[13:31] *** jaldhar left
[13:31] <colomon> Unhandled exception: Nominal type check failed in binding self in Pies.resolve; got Str, needed Pies

[13:31] <colomon> I can figure that after breakfast

[13:32] <[Coke]> https://gist.github.com/1476841 - # 01/18/2012 - niecza at 100.86% (from a run at about midnight this morning my time that I left to run while I zz'd)

[13:32] <[Coke]> b: say 19053-19217

[13:32] <p6eval> b 1b7dd1: OUTPUT«-164␤»

[13:33] <[Coke]> b: say 186-57

[13:33] <p6eval> b 1b7dd1: OUTPUT«129␤»

[13:33] <[Coke]> sweet. so it's not entirely due to the extra failures in rakudo.

[13:35] *** drbean_ left
[13:36] *** bluescreen10 left
[13:37] <pat_js> hey is there a way to take CallFrame objects as keys in a hash (if there was a "column method this would be easy, but there isn't)?

[13:38] <moritz> pat_js: do you want to uniquely identify the caller's location?

[13:38] <pat_js> yup

[13:39] <moritz> pat_js: in rakudo, you can use nqp::callerid() for that (but it's non-standard)

[13:39] <pat_js> thought about it, and that way you cloud implement fff without makros

[13:39] <moritz> that's what infix:<ff> now uses

[13:40] <moritz> see src/core/operators.pm, lines 163 to 215

[13:41] *** zjmarlow left
[13:42] <pat_js> ah thanks

[13:43] <pat_js> and nqp::p6box_s is sort of a hash?

[13:43] <pat_js> *hashing algorithm

[13:43] *** xinming left
[13:43] <moritz> no, nqp::p6box_s turns a parrot-level strinig into a Perl 6 Str object

[13:43] *** xinming joined
[13:43] <moritz> *string

[13:43] <moritz> %ffv is an ordinary hash

[13:47] *** bluescreen10 joined
[13:48] *** aymardraoul joined
[13:50] <pat_js> but it's not short cirquiting

[13:50] <moritz> correct

[13:51] <masak> hashes? short-circuiting?

[13:51] <moritz> no, ff

[13:51] <masak> ahah

[13:52] <masak> nom: False ff (say "OH HAI")

[13:52] <p6eval> nom ed943e: OUTPUT«OH HAI␤»

[13:52] *** aymardraoul left
[13:52] <masak> right.

[13:53] <masak> so "there's a way to implement ff without macros" -- "however, it's not short-circuiting" -- "no, you need macros for that" :P

[13:56] *** bluescreen10 left
[13:56] <moritz> well, you can make do with custom action methods too :-)

[13:57] *** bluescreen10 joined
[13:58] <masak> moritz++ # p6u

[14:10] *** ab5tract joined
[14:14] *** pmurias joined
[14:15] <dalek> niecza: 9856167 | (Paweł Murias)++ | / (3 files):

[14:15] <dalek> niecza: Turn p5 undef into Nil.

[14:15] <dalek> niecza: review: https://github.com/sorear/niecza/commit/98561676f4

[14:17] <moritz> down to 94 mentions of trac.parrot.org in that branch

[14:18] *** pat_js left
[14:18] <[Coke]> ww ?

[14:19] <moritz> yes, should have gone to #parrot

[14:19] *** cognominal left
[14:20] *** donaldh left
[14:21] *** Woodi left
[14:21] *** fsergot left
[14:21] *** sayu joined
[14:23] *** cognominal joined
[14:24] *** donaldh joined
[14:24] *** bloonix joined
[14:26] <colomon> hmmm, seems to be a nextwith issue

[14:28] *** am0c left
[14:28] *** cognominal_ joined
[14:29] <[Coke]> Should splice be able to handle something like: my @a=<a b c>; splice(@a,1,1, (1..Inf)) ?

[14:30] *** bluescreen10 left
[14:30] <[Coke]> perl6: my @a=<a b c>; splice(@a,1,1, (1..Inf)) ?

[14:30] <tadzik> ach

[14:30] <p6eval> rakudo ed943e: OUTPUT«===SORRY!===␤Confused at line 1, near "splice(@a,"␤»

[14:30] <p6eval> ..niecza v13-302-g0f93f81: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Confused at /tmp/DLn2qTJRVV line 1:␤------> [32mmy @a=<a b c>; splice(@a,1,1, (1..Inf)) [33m⏏[31m?[0m␤␤Parse failed␤␤»

[14:30] <p6eval> ..pugs b927740: OUTPUT«*** ␤    Unexpected "?"␤    expecting operator␤    at /tmp/JWk9PLImkA line 1, column 41␤»

[14:30] <[Coke]> perl6: my @a=<a b c>; splice(@a,1,1, (1..Inf))

[14:30] <tadzik> ww

[14:30] <p6eval> niecza v13-302-g0f93f81: OUTPUT«(timeout)»

[14:30] <p6eval> ..pugs b927740: OUTPUT«pugs: out of memory (requested 1048576 bytes)␤»

[14:30] <p6eval> ..rakudo ed943e:  ( no output )

[14:31] <[Coke]> well, at least we're consistent. ;)

[14:31] *** cognominal left
[14:31] <masak> Pugs -- so fast it runs out of memory before it times out!

[14:32] *** cognominal_ left
[14:35] *** cognominal_ joined
[14:38] *** PacoAir joined
[14:38] *** pmurias left
[14:39] *** domidumont left
[14:41] *** domidumont joined
[14:49] *** xinming left
[14:50] <jnthn> nom: my @a=<a b c>; splice(@a,1,1, (1..Inf)); say @a[0,1,2,3]

[14:50] <p6eval> nom ed943e: OUTPUT«a c Any() Any()␤»

[14:50] <jnthn> o.O

[14:51] *** birdwindupbird left
[14:58] <[Coke]> niecza: my @a=<a b c>; splice(@a,1,1, (1..Inf)); say @a[0,1,2,3]

[14:58] <p6eval> niecza v13-302-g0f93f81: OUTPUT«(timeout)»

[15:06] <[Coke]> nom: my @a=<a b c>; splice(@a,1,1, (1..Inf)); say @a[*-1];

[15:06] <p6eval> nom ed943e: OUTPUT«c␤»

[15:06] <[Coke]> nom++

[15:07] <jnthn> I fear nom gets the right answer for the wrong reason :)

[15:08] *** wolfman2000 left
[15:08] <[Coke]> nom: my @a=<a b c>; splice(@a,1,1, (1..Inf)); say @a[10000];

[15:08] <p6eval> nom ed943e: OUTPUT«Any()␤»

[15:09] *** japhb left
[15:10] *** cognominal_ left
[15:10] *** cognominal_ joined
[15:14] *** kaare_ joined
[15:16] *** kaare_ left
[15:24] *** kaare_ joined
[15:24] *** japhb joined
[15:24] *** tokuhirom left
[15:24] *** kaare_ left
[15:24] *** kaare_ joined
[15:25] *** kaare_ left
[15:26] *** kaare_ joined
[15:29] <dukeleto> ~~

[15:34] <masak> o/

[15:34] <masak> I just realized I haven't seen lue in almost a month...

[15:36] <[Coke]> ho, duke.

[15:37] <colomon> dukeleto!

[15:39] *** wtw left
[15:45] <dukeleto> colomon: hola!

[15:45] *** zjmarlow joined
[15:46] *** ab5tract left
[15:55] *** kaare_ left
[15:55] *** kaare_ joined
[15:59] *** ab5tract joined
[16:01] *** Exodist joined
[16:01] <cognominal_> should I file bugs using track or rakudo is moving to github for issues like parrot does?

[16:02] <moritz> rakudo has never used trac

[16:02] <moritz> and it continues to use RT for now

[16:02] <moritz> and thus [email@hidden.address]
[16:02] <cognominal_> oops, I confused trac with rt.

[16:03] <moritz> we just use the github issue trackers for specs and roast

[16:04] <moritz> (you'll also notice that the rakudo project on github has the issue tracker disabled to avoid confusion)

[16:04] *** skids joined
[16:05] * masak likes RT

[16:05] <masak> once you get over the quirkiness of search, it's fine.

[16:06] <moritz> it has other quirks too

[16:06] <moritz> but I can handle those as well

[16:07] <moritz> for example the separate URLs for public and privileged ticket access can be quite annoying

[16:07] <masak> yeah; what's up with that? :)

[16:08] <[Coke]> at least it now prompts if you're logged in that you might want to switch.

[16:09] <jnthn> decommute &

[16:14] <[Coke]> jnthn: more failures in rakudo since yesterday.

[16:16] <[Coke]> http://feather.perl6.nl/~coke/rakudo_summary.out

[16:19] <masak> haven't been getting p6cc solutions for a few days now. how're things going for people?

[16:19] <[Coke]> masak: ... when's the deadline? ;)

[16:19] <moritz> soon!

[16:19] <masak> [Coke]: 2012-01-29.

[16:20] <[Coke]> ah, plenty of time. :|

[16:20] *** sayu left
[16:20] <moritz> nom: say Date.new('2012-01-29') - Date.today

[16:20] <p6eval> nom ed943e: OUTPUT«11␤»

[16:20] <masak> not really. :)

[16:20] <moritz> nom: say (Date.new('2012-01-29') - Date.today) / 5 # days left per problem

[16:20] <p6eval> nom ed943e: OUTPUT«2.2␤»

[16:20] <[Coke]> masak: what is the maximum number of solutions submitted for a single contestant so far?

[16:20] <masak> [Coke]: that's classified.

[16:20] <[Coke]> aw, I only want to do the minimum amount of work. ;)

[16:21] <masak> not possible.

[16:21] <[Coke]> b: say 11/4

[16:21] <masak> the game is set up so you'll be worried enough to submit all five tasks :)

[16:21] <p6eval> b 1b7dd1: OUTPUT«2.75␤»

[16:21] <masak> nom: .new('2012-01-29') - .today given Date

[16:21] <p6eval> nom ed943e:  ( no output )

[16:21] <masak> nom: say .new('2012-01-29') - .today given Date

[16:21] <p6eval> nom ed943e: OUTPUT«11␤»

[16:22] <moritz> masak: that's both cute and creepy somehow :-)

[16:22] <masak> :P

[16:22] <moritz> commute &

[16:23] *** kaare__ joined
[16:23] *** kaare_ left
[16:25] *** kaare__ is now known as kaare_

[16:27] <masak> nom: sub next-such-day(Str $wd) { my $date = Date.today; my $wdn = <Monday Tuesday Wednesday Thursday Friday Saturday Sunday>.pairs.first(*.value eq $wd).key or die "No such weekday"; $wdn++; $date++ until $date.day-of-week == $wdn; $date }; say next-such-day("Sunday")

[16:27] <p6eval> nom ed943e: OUTPUT«Date.new(2012, 1, 22)␤»

[16:27] <masak> a bit long, but it works :)

[16:28] <masak> there's some golf potential there, I guess.

[16:28] <[Coke]> nifty.

[16:28] <masak> nom: sub next-such-day(Str $wd) { my $date = Date.today; my $wdn = <Monday Tuesday Wednesday Thursday Friday Saturday Sunday>.pairs.first(*.value eq $wd).key or die "No such weekday"; $wdn++; $date += $wdn - $date.day-of-week; $date }; say next-such-day("Sunday")

[16:28] <p6eval> nom ed943e: OUTPUT«Date.new(2012, 1, 22)␤»

[16:28] <masak> oh course :)

[16:28] <masak> of*

[16:29] <masak> nom: sub next-such-day(Str $wd) { my $date = Date.today; my $wdn = <Mon Tues Wednes Thurs Fri Satur Sun>.pairs.first(*.value~"day" eq $wd).key or die "No such weekday"; $wdn++; $date += $wdn - $date.day-of-week; $date }; say next-such-day("Sunday")

[16:29] <p6eval> nom ed943e: OUTPUT«Date.new(2012, 1, 22)␤»

[16:30] *** x3nU left
[16:31] <skids> perl6: class A {}; A.DEFINITE.say;

[16:31] <p6eval> niecza v13-302-g0f93f81: OUTPUT«Unhandled exception: Unable to resolve method DEFINITE in class A␤  at /tmp/vm52QG_ycX line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3108 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3109 (module-CORE @ 64) ␤  at /hom…

[16:31] <p6eval> ..pugs b927740: OUTPUT«*** No such method in class A: "&DEFINITE"␤    at /tmp/hWrtB6tLaq line 1, column 13-27␤»

[16:31] <p6eval> ..rakudo ed943e: OUTPUT«Bool::False␤»

[16:34] <masak> skids: .DEFINITE only implemented in Rakudo as yet.

[16:35] *** kaleem joined
[16:39] <skids> If I'm getting it right, though, rakudo's output is correct, and classes themselves don't count as objects for the purpose of DEFINITE.  Which leaves me withthe question, how do you test if a class has been declared or not?

[16:40] <benabik> nom: say A.DEFINITE;

[16:40] <p6eval> nom ed943e: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&A' called (line 1)␤»

[16:40] <benabik> nom: say GLOBAL::<A>; class A {}; say GLOBAL::<A>

[16:40] <p6eval> nom ed943e: OUTPUT«Method 'at_key' not found for invocant of class 'GLOBAL'␤  in method postcircumfix:<{ }> at src/gen/CORE.setting:1188␤  in block <anon> at /tmp/bQBwArU3sL:1␤  in <anon> at /tmp/bQBwArU3sL:1␤»

[16:40] <benabik> Awh.

[16:41] <masak> skids: what is it you're trying to do?

[16:41] <masak> skids: if the class hasn't been declared yet, the program won't parse.

[16:42] <skids> work around "class A {}; class A {...}; failing for now, so load order of different files containing interdependent classes does not matter.

[16:42] <masak> just predeclare anything as 'class A { ... }' and be done with it.

[16:43] <skids> Except if I have already loaded a fail that declares "class A {}" then the "class A{...}" predeclaration does not work.

[16:43] <skids> *file

[16:44] <skids> .o0(loading fails does happen though)

[16:44] <masak> so, you predeclare stuff before you load stuff.

[16:44] <masak> that's what I ususally end up doing, anyway.

[16:45] <skids> Not good from a module usability perspective to ask users to do that.

[16:49] <skids> std: class A { }; class A {...};

[16:49] <p6eval> std 40d10f7: OUTPUT«[31m===[0mSORRY![31m===[0m␤Illegal redeclaration of symbol 'GLOBAL::<A>' (from line 1) at /tmp/1fesqH4qZ3 line 1:␤------> [32mclass A { }; class A [33m⏏[31m{...};[0m␤Check failed␤FAILED 00:01 107m␤»

[16:50] *** spine_ left
[16:51] <masak> skids: I don't really see how an end user of modules would end up in a bad situation -- even with the current state of the art -- if all modules do use statements "inwards" to a central module, which predeclares everything.

[16:55] <skids> masak: that might work.  No less ugly than "if <something> eval class A {...}" I suppose.

[16:56] <masak> skids: that alone wouldn't work anyway. when you eval, you're already past compilation.

[16:56] <masak> unless you eval in a BEGIN block, which is just a desperate thing to be doing.

[17:05] <masak> decommute &

[17:05] <PerlJam> still ... seems like it would be useful to have some sort of predeclaration mechanism that didn't care if it was already declared or not.

[17:06] *** thou joined
[17:06] <PerlJam> a defensive "I want to make sure this name is available"

[17:18] <colomon> #phasers in 12 minutes?

[17:20] *** kaleem left
[17:24] <benabik> Hm.  NQP seems to be hanging in the qregex tests.

[17:24] <sorear> good * #perl6

[17:25] <colomon> o/

[17:25] * benabik bisects.

[17:27] <sorear> EOBACKLOG

[17:37] *** spine joined
[17:40] <jnthn> benabik: known

[17:40] *** daxim left
[17:43] <benabik> jnthn: Alrighty then.

[17:43] *** bluescreen10 joined
[17:46] *** bluescreen100 joined
[17:46] *** bluescreen100 left
[17:46] *** bluescreen10 left
[17:46] *** bluescreen10 joined
[17:51] *** mj41 left
[17:56] <jnthn> benabik: I really shoulda done it in a branch.

[17:56] <benabik> jnthn: That would have been nice for this poor bastard that runs "make test" on everything.  ;-)

[18:02] *** dakkar left
[18:14] *** kboga joined
[18:19] *** dbr_ joined
[18:19] *** carlin joined
[18:20] *** _dbr left
[18:26] *** leprevost left
[18:27] *** kboga left
[18:29] <colomon> sorear: if you pull the latest colomon-panda (https://github.com/colomon/panda) and try running bootstrap.sh, you'll find it fails with a weird nextwith issue.  I'd appreciate it if you could take a look at it sometime.  No rush, it will probably be a good 8+ hours before I get a chance to work on panda again.  

[18:29] <colomon> thanks.

[18:39] *** leprevost joined
[18:39] *** zjmarlow left
[18:42] *** Chillance joined
[18:44] *** REPLeffect left
[18:52] * masak home

[18:52] <sorear> masak!

[18:53] * sorear wonders if @masakyst is any relation

[18:53] *** hundskatt left
[18:54] *** kaleem joined
[18:55] <dalek> niecza: 24441d8 | coke++ | t/spectest.data:

[18:55] <dalek> niecza: run fudged integration/99problems-21-to-30.t

[18:55] <dalek> niecza: review: https://github.com/sorear/niecza/commit/24441d80b7

[18:56] <dalek> roast: d4bdbd3 | coke++ | integration/99problems-21-to-30.t:

[18:56] <dalek> roast: niecza fudge

[18:56] <dalek> roast: review: https://github.com/perl6/roast/commit/d4bdbd3582

[18:56] *** shinobicl_ joined
[18:57] *** kaleem left
[19:09] *** kaare__ joined
[19:09] *** kaare_ left
[19:13] <masak> sorear: I've never met @masakyst, and doubt there's any relation ;)

[19:18] *** hundskatt joined
[19:22] * masak installs Strawberry Perl for the first time

[19:24] <arnsholt> Does panda work with nom these days?

[19:25] *** birdwindupbird joined
[19:25] <PerlJam> arnsholt: it didn't the last time I tried (a few days ago)

[19:26] <arnsholt> Right. I'll just assume it doesn't for the time being then. Not that many modules I need anyways

[19:35] *** REPLeffect joined
[19:40] *** not_gerd joined
[19:40] <not_gerd> hello, #perl6

[19:40] <not_gerd> how do I replay to a ticket (in particular https://rt.perl.org/rt3/Public/Bug/Display.html?id=64032 )?

[19:40] <not_gerd> ^reply

[19:41] <masak> not_gerd: need to be logged in to RT.

[19:41] <not_gerd> masak: no way to do this via mail?

[19:42] <masak> I think there is, if you have another mail from that ticket.

[19:42] <masak> but I may be mistaken.

[19:42] <masak> I always make my ticket comments via the web interface.

[19:45] *** Trashlord left
[19:48] *** `10 joined
[19:51] <masak> `10: greetings.

[19:53] <tadzik> masak: wow, I'd bet you never open your web browser to submit a bug

[19:56] *** tokuhirom joined
[19:56] *** zjmarlow joined
[19:57] <zjmarlow> hi all.  building on windows ... is mingw32-make not supported?  the nqp/Configure.pl only checks for nmake...

[19:59] <not_gerd> anyway, see https://gist.github.com/1635180 if someone wants to take a shot at unbreaking Cygwin...

[20:00] <masak> zjmarlow: it's quite possible that mingw32-make works but no-one has tried it yet.

[20:01] <not_gerd> zjmarlow: if you use Strawberry Perl, it might work out-of-the box

[20:01] <not_gerd> MSYS is not supported, though

[20:02] <jnthn> zjmarlow: The nmake check in there is a "make the dyncall build happy under the Microsoft toolchain on 64-bit" fix mostly.

[20:07] *** Trashlord joined
[20:09] *** tokuhirom left
[20:10] <jnthn> PerlJam: panda didn't work with nom? tadzik++ and I did some work to fix that a while back...

[20:14] <PerlJam> hold on, let me try again

[20:16] *** kaare__ left
[20:16] <PerlJam> jnthn: https://gist.github.com/1635283

[20:18] <jnthn> :(

[20:18] <tadzik> PerlJam: update your Rakudo

[20:18] <tadzik> jnthn: we've fixed that few days ago

[20:18] <tadzik> and there's a test in roast too'

[20:18] <PerlJam> ah.

[20:18] <jnthn> tadzik: oh, phew...it's just that one.

[20:19] * PerlJam makes a new rakudo

[20:20] *** donaldh left
[20:22] *** cognominal___ joined
[20:22] *** donaldh joined
[20:24] *** cognominal_ left
[20:25] *** wolfman2000 joined
[20:29] *** Trashlord left
[20:30] *** Trashlord joined
[20:32] <shinobicl_> q

[20:32] <shinobicl_> quit

[20:33] *** shinobicl_ left
[20:33] <jnthn> fail

[20:36] *** jakky joined
[20:37] *** mj41 joined
[20:42] *** birdwindupbird left
[20:43] <flussence> quite

[20:44] <flussence> .oO( grr... netbook ran out of memory twice in a row )

[20:55] *** fridim_ joined
[20:57] *** donaldh left
[20:59] *** GlitchMr left
[21:01] *** cognominal_ joined
[21:04] *** cognominal___ left
[21:07] <arnsholt> I'm getting errors running the test suite for Zavolaj on OS X

[21:07] <arnsholt> Looks like the flags in $*VM<config><ld_share_flags> and $*VM<config><ld_load_flags> conflict

[21:07] <jnthn> ugh ;(

[21:08] <arnsholt> -bundle and -dynamiclib are mutually exclusive, apparently

[21:08] <jnthn> hmm...maybe I should only be using one of those two

[21:08] <arnsholt> Yeah, on OS X at least the only difference between them is that one has dynamiclib and the other has bundle

[21:09] <jnthn> dynamiclib sounds like the right one :)

[21:09] <jnthn> Try deleting tother

[21:09] <arnsholt> Yeah, killing ld_share_flags gets me a step further

[21:10] <arnsholt> Now I just need to install libgmp =)

[21:10] *** not_gerd left
[21:11] <arnsholt> Or not. I just need to get the linker to find it, it seems

[21:11] <jnthn> libgmp?

[21:12] * jnthn is confused

[21:12] <jnthn> The Zavolaj tests don't use that.

[21:12] <moritz> arnsholt: on linux I needed to add LD_LIBRARY_PATH=. to the environment

[21:12] <moritz> otherwise 'make test' wouldn't find the newly compiled .so files

[21:13] <arnsholt> Yeah, I'll probably need that too

[21:13] <arnsholt> Right now it doesn't even get that far

[21:14] <dalek> nqp: 76377d0 | jonathan++ | src/Q (2 files):

[21:14] <dalek> nqp: Try to fix the hangs that implementing backtracking into subrules introduced.

[21:14] <dalek> nqp: review: https://github.com/perl6/nqp/commit/76377d0a6f

[21:15] <moritz> t/qregex/01-qregex.t (Wstat: 0 Tests: 611 Failed: 10) Failed tests:  23-25, 42, 44-45, 216, 545, 559, 611

[21:15] <arnsholt> Calling ld with -L/path/to/lib fixes it, but neither LD_LIBRARY_PATH nor DYLD_LIBRARY_PATH does

[21:15] * arnsholt ponders

[21:15] *** benabik left
[21:16] <jnthn> moritz: I'm not sure how many of those I've regressed, and how many failed before I started. Do you know if they all passed before by backtracking patches?

[21:16] <moritz> jnthn: I think so, yes

[21:17] <moritz> jnthn: but I can recheck

[21:18] <moritz> yes, all qregex tests pass in 97760d4540bb4cc06baea3b5a3b1194ed4f656ac

[21:19] <jnthn> :(

[21:19] *** ksi joined
[21:23] *** bluescreen10 left
[21:24] *** sunnavy left
[21:24] *** sunnavy joined
[21:25] *** shinobicl__ joined
[21:26] <shinobicl__> hi!: i used to use this alias for testing my p6 scripts: alias prove6='prove -e perl6 '

[21:27] <moritz> ufo && make test

[21:27] <shinobicl__> how i'm receiving an 'open3' error....: open3: exec of perl6 t/Schedule.t failed at /usr/share/perl/5.10/TAP/Parser/Iterator/Process.pm line .....

[21:28] <shinobicl__> oh, i see... thanks! i'll read about this 'ufo' then

[21:28] <moritz> shinobicl__: is perl6 in $PATH?

[21:29] <arnsholt> shinobicl__: It's in masak's github

[21:30] *** shinobicl__ left
[21:37] <dalek> nqp: baf0b9b | jonathan++ | src/QRegex/Cursor.nqp:

[21:37] <dalek> nqp: Fix for !BACKREF, which fixes test 42.

[21:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/baf0b9b279

[21:42] *** wolfman2000 left
[21:43] <jnthn> Need to fix more, but a bit tired for it now :(

[21:47] *** x3nU joined
[21:54] <jnthn> sleep &

[22:01] *** spine left
[22:01] *** skids left
[22:07] <masak> 'night, #perl6

[22:17] *** szbalint left
[22:17] *** baest_ joined
[22:17] *** rsimoes left
[22:17] *** szbalint joined
[22:18] *** baest left
[22:19] *** mls_ left
[22:19] *** mls joined
[22:20] *** rsimoes joined
[22:27] *** ab5tract left
[22:39] *** slavik left
[22:52] *** fridim_ left
[22:58] *** mj41 left
[22:59] <bacek_at_work> ~~

[22:59] <bacek_at_work> moritz, ping

[23:00] <bacek_at_work> perl6: $*IO.WHAT.say

[23:00] <p6eval> rakudo ed943e: OUTPUT«Failure()␤»

[23:00] <p6eval> ..niecza v13-302-g0f93f81: OUTPUT«Unhandled exception: Unable to resolve method say in class Any␤  at /tmp/kjmN40LWrr line 1 (mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3108 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3109 (module-CORE @ 64) ␤  at /home/p…

[23:00] <p6eval> ..pugs b927740: OUTPUT«Scalar␤»

[23:01] <bacek_at_work> perl6: say +$*IO.lines

[23:01] <p6eval> rakudo ed943e: OUTPUT«Method 'lines' not found for invocant of class 'Failure'␤  in block <anon> at /tmp/csO_RUU5fL:1␤  in <anon> at /tmp/csO_RUU5fL:1␤»

[23:01] <p6eval> ..niecza v13-302-g0f93f81: OUTPUT«Unhandled exception: Unable to resolve method lines in class Any␤  at /tmp/zN9VM2DZVQ line 1 (mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3108 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3109 (module-CORE @ 64) ␤  at /home…

[23:01] <p6eval> ..pugs b927740: OUTPUT«*** No such method in class Scalar: "&lines"␤    at /tmp/CV7OJg3iJI line 1, column 5 - line 2, column 1␤»

[23:01] <sorear> bacek_at_work: There is no $*IO

[23:01] <sorear> bacek_at_work: perhaps you meant $*IN?

[23:01] *** slavik joined
[23:01] <bacek_at_work> meh...

[23:01] <bacek_at_work> sorear, thanks

[23:01] <bacek_at_work> perl6: say +$*IN.lines

[23:01] <p6eval> rakudo ed943e, niecza v13-302-g0f93f81: OUTPUT«23␤»

[23:01] <p6eval> ..pugs b927740: OUTPUT«*** No such method in class Scalar: "&lines"␤    at /tmp/AuUGHPn_Wk line 1, column 5 - line 2, column 1␤»

[23:02] <bacek_at_work> perl6: "oof".reverse.say

[23:02] <p6eval> rakudo ed943e: OUTPUT«oof␤»

[23:02] <p6eval> ..pugs b927740: OUTPUT«foo␤»

[23:02] <p6eval> ..niecza v13-302-g0f93f81: OUTPUT«Unhandled exception: Unable to resolve method reverse in class Str␤  at /tmp/RND2cuhT_T line 1 (mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3108 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3109 (module-CORE @ 64) ␤  at /ho…

[23:02] <bacek_at_work> perl6: "oof".flip.say

[23:02] <p6eval> pugs b927740: OUTPUT«*** No such method in class Str: "&flip"␤    at /tmp/50E647pvne line 1, column 1 - line 2, column 1␤»

[23:02] <p6eval> ..rakudo ed943e, niecza v13-302-g0f93f81: OUTPUT«foo␤»

[23:03] <bacek_at_work> sorear, how is "reverse" spelled for strings?

[23:03] <bacek_at_work> ( apart from comb.reverse.join )

[23:05] *** am0c joined
[23:05] * bacek_at_work need more coffee... 

[23:05] *** sunnavy_ joined
[23:06] *** sunnavy left
[23:07] *** donri left
[23:11] *** arlinius left
[23:12] <sorear> bacek_at_work: flip

[23:12] *** arlinius joined
[23:14] *** PacoAir left
[23:14] *** PacoAir joined
[23:16] *** DataLinkDroid joined
[23:19] *** avar joined
[23:19] *** avar left
[23:19] *** avar joined
[23:26] *** donaldh joined
[23:28] *** sftp left
[23:30] *** sftp joined
[23:37] <bacek_at_work> sorear, thanks.

[23:38] <bacek_at_work> btw, looks like $*IO.get isn't properly specced.

[23:38] <bacek_at_work> At least not in S32-io

[23:38] <bacek_at_work> ah

[23:38] <bacek_at_work> my bad

[23:38] <bacek_at_work> found it

[23:40] *** DataLinkDroid left
[23:42] *** donaldh left
[23:48] *** PacoAir left
[23:55] *** mikemol is now known as rosettacode

[23:55] *** rosettacode is now known as mikemol

