[00:00] <jnthn> LlamaRider: Perl 6 queue is at https://rt.perl.org/rt3/Search/Results.html?Query=Queue%20%3D%20%27perl6%27%20AND%20%28Status%20%3D%20%27open%27%20OR%20Status%20%3D%20%27new%27%20OR%20Status%20%3D%20%27stalled%27%29

[00:00] <sorear> TimToady: flu still?

[00:00] <jnthn> ...eek!

[00:00] <sorear> :|

[00:00] <TimToady> yes, have had it all year

[00:00] <sorear> I hope you mean 12 days and not 365...

[00:01] <sorear> either way, that's a very long flu

[00:01] <sorear> :|

[00:01] *** Chillance left
[00:03] <sorear> niecza: { $^a => $^b }

[00:03] <p6eval> niecza v13-228-g54921c8: OUTPUT«Unhandled exception: No value in ANON available for parameter $a␤  at /tmp/btTFrVmKoX line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2988 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2989 (module-CORE @ 59) ␤  at /home…

[00:03] <japhb> (Somewhat off-topic, my apologies): My company is desperately looking for Perl (5) programmers, but I'd really like to pitch people who aren't just good Perl programmers, but have the kind of personality you find around here.  I want to hire people I would want to work with, I guess. :-)  Is there a place in the Perl 5 world known for our sort of folks?

[00:05] <japhb> (I'm already mining my local Perl Mongers quite heavily.  ;-)  )

[00:08] <sorear> where are ya?

[00:09] <japhb> sorear, Sonoma County, Northern California, USA

[00:09] *** molaf_ joined
[00:09] <sorear> bah, it's always norcal

[00:09] * sorear needs to get out of bleeping socal

[00:09] <japhb> sorear, YES PLEASE MOVE HERE.

[00:09] <japhb> ;-)

[00:10] *** tokuhirom joined
[00:12] <sorear> I don't know of anything on the Internet that approximates the composition of #perl6

[00:12] *** molaf left
[00:13] <japhb> sorear, I was afraid of that.  :-/

[00:13] <geekosaur> do I dare ask what kind of perl programming?

[00:13] <sorear> that said, I don't have much experience, so remember that thing about absense of evidence and evidence of absense

[00:14] <sorear> btw japhb how goes the val grammar project?  do you want me to take any initiative on this?

[00:15] <japhb> geekosaur, I work for Sonic.net, an ISP/Telecom.  Lots of infrastructure and internal tools programming.  There's other stuff as well, but that's the majority I think.

[00:16] <sorear> japhb: Didn't Sonic.net just buy TimToady?

[00:16] <TimToady> eh?

[00:16] <sorear> I remember NetLogic was bought... forgot who

[00:16] <TimToady> NetLogic was bought by Broadcom

[00:16] <japhb> sorear, re: Experience: I can honestly say that if anyone sane looked at the commit history of Niecza and didn't think you had "experience with large projects", they're one rock short of a load.

[00:17] <sorear> japhb: I meant experience in the sense of being acquanted with large parts of the Internet

[00:18] <sorear> I've only really been doing the social networking thing for about five years, and most of that's been gaming-related

[00:18] <dalek> rakudo/nom: 919912a | jnthn++ | src/Perl6/Actions.pm:

[00:18] <dalek> rakudo/nom: Compiler part of handling binding to array and hash elements.

[00:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/919912a778

[00:18] <dalek> rakudo/nom: 2ea20a2 | jnthn++ | src/core/ (2 files):

[00:18] <dalek> rakudo/nom: Support binding of hash elements.

[00:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2ea20a2bcf

[00:18] <dalek> rakudo/nom: f133a3b | jnthn++ | src/core/Any.pm:

[00:18] <dalek> rakudo/nom: Fix requiredo.

[00:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f133a3bab3

[00:18] <dalek> rakudo/nom: 47540c2 | jnthn++ | t/spectest.data:

[00:18] <dalek> rakudo/nom: Run S03-operators/binding-hashes.t.

[00:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/47540c2d9d

[00:18] * sorear checks how similar this is to the niecza solution

[00:19] <japhb> I WISH we could get TimToady (hi!), but I honestly don't even know how to use him for what he's worth.  (That said, TimToady, if you want to move back here and have any interest in working for us, LET ME KNOW.  ;-)  )

[00:19] <geekosaur> aha

[00:19] * geekosaur notes another place to send resume :)

[00:20] * jnthn is happy enough with it, given it passed the entire set of binding-hashes.t without fudging.

[00:20] <japhb> Re: val(), please do apply your skills.  My non-$dayjob time keeps getting blindsided this month, and I don't think I should be a blocker on this.

[00:20] <sorear> japhb: ok.

[00:20] <LlamaRider> I need to get a screen shot of this chat fragment, no one ( = BSc, MSc students at my uni) believes me that Perl employers exist other than in  real life ^^

[00:20] <geekosaur> (sysadmin/"system programmer" type, mostly infrastructure.  also have ISP experience but it's so far back in prehistory that it's unlikely to be applicable (1980s!)

[00:21] <LlamaRider> and I think I fell asleep at the end of that sentence :D "exist in real life"

[00:21] <sorear> LlamaRider: I think that came out wrong.  You said there are no fictional Perl employers.

[00:21] <sorear> LlamaRider: http://irclog.perlgeek.de/perl6/2012-01-13#i_4977005

[00:21] <LlamaRider> sorear: yep, need my sleep soon

[00:22] *** mikemol left
[00:22] *** motherbrain left
[00:22] <japhb> geekosaur, Yes, apply.  That experience is a good match for the team, methinks.

[00:23] <jnthn> *yawn* enough for today

[00:23] <jnthn> NativeCall hacking day tomorrow \o/

[00:23] <sorear> \o/

[00:23] <japhb> Sorry to drag this off channel off topic, but still glad I did anyway.  :-)

[00:23] <TimToady> sleep well

[00:23] <sorear> rest well.

[00:23] <japhb> jnthn, yay!

[00:24] <jnthn> Yes, not having to change bed at 6am should make this a better night's sleep than last night. :)

[00:24] <japhb> bleah

[00:24] <jnthn> Yeah. Stockholm to here is...a bit short for a sleeper train really.

[00:25] <jnthn> And the cold between the station and home was quite awakening ;)

[00:25] * jnthn potters off to rest :)

[00:27] <LlamaRider> that's a loooong queue for rakudo... 

[00:30] *** mikemol joined
[00:31] *** cognominal left
[00:36] *** LlamaRider left
[00:40] <dalek> niecza: 3101ab5 | sorear++ | / (3 files):

[00:40] <dalek> niecza: A block cannot be a hash if it contains placeholders

[00:40] <dalek> niecza: review: https://github.com/sorear/niecza/commit/3101ab5214

[00:40] <dalek> roast: 6a657c6 | sorear++ | S06-other/anon-hashes-vs-blocks.t:

[00:40] <dalek> roast: [S06-other/anon-hashes-vs-blocks] Unfudge for niecza

[00:40] <dalek> roast: review: https://github.com/perl6/roast/commit/6a657c600c

[00:41] <[Coke]> that's an awful URL for the bug queue.

[00:41] <[Coke]> http://rakudo.org/tickets/ is probably better.

[00:42] <[Coke]> ( imean, it's just long and hard to remember.)

[00:47] *** blott_ joined
[00:52] *** bacek joined
[00:53] *** rml` joined
[00:54] *** cognominal joined
[00:54] *** leprevost joined
[00:57] *** clkao_ joined
[00:58] *** krunen_ joined
[00:58] *** ascent__ joined
[00:58] *** Shozan joined
[00:59] *** panterax joined
[01:00] *** nsh joined
[01:01] *** abercrombie joined
[01:03] *** rml left
[01:03] *** felher left
[01:09] *** felher joined
[01:25] *** blott_ left
[01:27] <sorear> niecza: say (*.defined)(Mu)

[01:27] <p6eval> niecza v13-236-g3101ab5: OUTPUT«Unhandled exception: Nominal type check failed in binding anon_0 in ANON; got Mu, needed Any␤  at /tmp/CG0fw6cJmw line 0 (ANON @ 1) ␤  at /tmp/CG0fw6cJmw line 1 (mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2988 (ANON @ 3) ␤  at /home/p6e…

[01:33] *** benabik joined
[01:37] <ruoso> sorear: about postcircumfix:<( )>, the reason it receives a capture is because it is the only way for objects to implement the code invocation in a higher level, otherwise it's vm-specific

[01:38] <sorear> ruoso: I don't get it

[01:39] <sorear> what's vm-specific about method postcircumfix:<( )>($a, $b, :$c) { ... } ?

[01:41] *** tokuhirom left
[01:44] <ruoso> sorear: er... if this is a meta-method, how will you introspect the method arguments?

[01:45] <sorear> This is a completely ordinary method

[01:45] <sorear> In Niecza, $obj(5, 6) means $obj."postcircumfix:<( )>"(5, 6)

[01:46] <ruoso> so you don't build the capture... what happens when you do $obj(5,(5,6))?

[01:47] <ruoso> and the signature is *@a

[01:49] * ruoso needs to find the context of the original discussion

[01:49] * ruoso is sure there is more to it

[01:49] <sorear> @a gets bound to [5,5,6]

[01:49] <sorear> if you don't want flattenning, don't use *@a

[01:50] <dalek> niecza: 037f4b7 | sorear++ | / (4 files):

[01:50] <dalek> niecza: Make * a "blackhole" container that ignores writes

[01:50] <dalek> niecza: review: https://github.com/sorear/niecza/commit/037f4b757f

[01:58] <sorear> std: &infix:<R+>

[01:58] <p6eval> std dc62e1d: OUTPUT«ok 00:01 111m␤»

[01:58] <sorear> std: &infix:<***>

[01:58] <p6eval> std dc62e1d: OUTPUT«ok 00:01 111m␤»

[02:00] <sorear> perl6: &infix:<R+>

[02:00] <p6eval> pugs b927740: OUTPUT«*** Undeclared variable: ("&infix:R+",MkPad (padToList [("$_",PELexical {pe_type = (mkType "Scalar"), pe_proto = <Scalar:0x7f65b5d60a41>, pe_flags = MkEntryFlags {ef_isContext = True}, pe_store = <ref:0x7f65b5d6a789>}),("@_",PELexical {pe_type = (mkType "Array"), pe…

[02:00] <p6eval> ..niecza v13-236-g3101ab5: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤    'infix:<R+>' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 919 (die @ 2) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1143 (P6.comp_unit @ 32) ␤  a…

[02:00] <p6eval> ..rakudo 47540c: OUTPUT«===SORRY!===␤Symbol '&infix:<R+>' not predeclared in <anonymous> (/tmp/GURpbEHMI6:1)␤»

[02:00] <sorear> Is this a bug in niecza?

[02:00] *** am0c left
[02:00] <sorear> S02/whatever.t expects &infix:<R+> to work

[02:00] <sorear> niecza: &[R+]

[02:00] <p6eval> niecza v13-236-g3101ab5:  ( no output )

[02:01] <sorear> I would expect that to have been the syntax used

[02:01] *** rml` left
[02:03] <sorear> rakudo: say (*.defined)(Mu)

[02:03] <p6eval> rakudo 47540c: OUTPUT«Bool::False␤»

[02:04] *** thou left
[02:05] <sorear> TimToady: do you have an opinion on &[R+] vs &infix:<R+> ?

[02:05] <dalek> niecza: d22f880 | sorear++ | src/niecza:

[02:05] <dalek> niecza: Allow Mu-arguments to whatever closures

[02:05] <dalek> niecza: review: https://github.com/sorear/niecza/commit/d22f880a2e

[02:09] <sorear> perl6: say *.WHAT

[02:09] <p6eval> niecza v13-238-gd22f880: OUTPUT«Rebuild in progress␤»

[02:09] <p6eval> ..rakudo 47540c: OUTPUT«Whatever()␤»

[02:09] <p6eval> ..pugs b927740: OUTPUT«Num␤»

[02:10] <ruoso> sorear: hah! found the reason....

[02:10] <ruoso> http://irclog.perlgeek.de/perl6/2008-08-21#i_442175

[02:12] <ruoso> tell jnthn I found the original reason for .postcircumfix:<( )>($capture)... If it's not an enclosed capture, the invocant is always the Code object, and will override the actual invocant of the thing being called...

[02:12] <ruoso> @tell jnthn I found the original reason for .postcircumfix:<( )>($capture)... If it's not an enclosed capture, the invocant is always the Code object, and will override the actual invocant of the thing being called...

[02:12] * ruoso forgot the syntax for the bot

[02:13] <sorear> phenny: tell

[02:13] <shachaf> ruoso: "phenny: tell NICK MESSAGE"

[02:13] <ruoso> phenny: tell jnthn I found the original reason for .postcircumfix:<( )>($capture)... If it's not an enclosed capture, the invocant is always the Code object, and will override the actual invocant of the thing being called...

[02:13] <phenny> ruoso: I'll pass that on when jnthn is around.

[02:13] <sorear> o/ shachaf

[02:14] <ruoso> sorear: makes sense now?

[02:14] <sorear> ruoso: that's a moot point now, because invocants are no longer considered special

[02:14] <shachaf> G'day.

[02:14] <sorear> niecza: class A { method postcircumfix:<( )>($invocant, $arg) { say $invocant; say $arg } }; my $a = A.new; 5.$a();

[02:14] <p6eval> niecza v13-238-gd22f880: OUTPUT«Unhandled exception: No value for parameter $arg in A.postcircumfix:<( )>␤  at /tmp/TaWLhJsShL line 0 (A.postcircumfix:<( )> @ 1) ␤  at /tmp/TaWLhJsShL line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2991 (ANON @ 3) ␤  at /home/p6eva…

[02:14] <sorear> niecza: class A { method postcircumfix:<( )>($invocant, $arg) { say $invocant; say $arg } }; my $a = A.new; 5.$a(7);

[02:14] <p6eval> niecza v13-238-gd22f880: OUTPUT«5␤7␤»

[02:15] <sorear> 5.$a(7) means the same as $a(5, 7)

[02:15] * ruoso has a very confused memory right now..

[02:17] <ruoso> But I guess you may be right, I kinda remember being very upset about the change in the way capture worked

[02:17] <ruoso> a lot of things that made sense in that world simply stopped making sense...

[02:20] <ruoso> of course a lot of other things started making sense instead

[02:23] <ruoso> but wait... there's one more thing...

[02:23] * ruoso can't really think stright

[02:23] <geekosaur> things are supposed to make sense?

[02:24] <ruoso> $a(5,7) is supposed to have $a as the invocant

[02:24] <ruoso> which should not mix with the inner capture

[02:25] <sorear> A capture contains a list of positions and a hash of names

[02:25] <sorear> There's nothing called an invocant

[02:26] <dalek> roast: 3f6faba | sorear++ | S02-types/whatever.t:

[02:26] <dalek> roast: [S02-types/whatever.t] Unfudge passing tests for niecza

[02:26] <dalek> roast: review: https://github.com/perl6/roast/commit/3f6fabab43

[02:27] <ruoso> when the signature is (|$capture), do you get the invocant in $capture or not?

[02:28] <sorear> ruoso: I don't know what you mean by invocant

[02:29] <sorear> remember, I'm new here

[02:30] <ruoso> niecza: class A { method postcircumfix:<( )>(|$capture) { say $capture.perl() }; A(5,7)

[02:31] <p6eval> niecza v13-238-gd22f880: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unable to parse block at /tmp/q4hsUdeyf_ line 1:␤------> [32mclass A {[33m⏏[31m method postcircumfix:<( )>(|$capture) {[0m␤Couldn't find final '}'; gave up at /tmp/q4hsUdeyf_ line 1 (EOF):␤------> [32mcapture) { say $c…

[02:31] <ruoso> niecza: class A { method postcircumfix:<( )>(|$capture) { say $capture.perl() }}; A(5,7)

[02:31] <p6eval> niecza v13-238-gd22f880: OUTPUT«\(A, 5, 7)␤»

[02:31] <ruoso> if postcircumfix() is a meta-invocation, we should be able to clearly see the distinction between A and (5,7)

[02:32] *** wolfman2000 joined
[02:34] *** fsergot left
[02:35] <sorear> ruoso: What's a meta-invocation?

[02:35] <sorear> ruoso: niecza makes no distinction whatsoever between A and (5,7)

[02:36] <sorear> A is simply the first argument

[02:39] <ruoso> well, yeah... I guess it could be possible to just shift from the capture

[02:55] *** whiteknight left
[03:05] <dalek> niecza: 3798d2c | sorear++ | lib/Kernel.cs:

[03:05] <dalek> niecza: Try to make $CALLER:: more aware of thunk subs

[03:05] <dalek> niecza: review: https://github.com/sorear/niecza/commit/3798d2c71a

[03:06] <dalek> roast: 85c9478 | sorear++ | S06-signature/caller-param.t:

[03:06] <dalek> roast: [S06-signature/caller-param.t] Unfudge for niecza

[03:06] <dalek> roast: review: https://github.com/perl6/roast/commit/85c94783c3

[03:07] <sorear> rakudo: say eval 88, 88

[03:07] <p6eval> rakudo 47540c: OUTPUT«===SORRY!===␤CHECK FAILED:␤Calling 'eval' will never work with argument types (int, int) (line 1)␤    Expected: :(Str $code, Any :lang(:$lang))␤»

[03:07] <sorear> rakudo: say eval 88

[03:07] <p6eval> rakudo 47540c: OUTPUT«===SORRY!===␤CHECK FAILED:␤Calling 'eval' will never work with argument types (int) (line 1)␤    Expected: :(Str $code, Any :lang(:$lang))␤»

[03:08] <dalek> roast: 0251718 | sorear++ | S29-context/eval.t:

[03:08] <dalek> roast: [S29-context/eval.t] Needs parens to be correctly interpreted

[03:08] <dalek> roast: review: https://github.com/perl6/roast/commit/02517183c4

[03:12] <ruoso> sorear: "invocant" is the object in a method call

[03:14] <ruoso> niecza: class A { method postcircumfix:<( )>(|$capture) { my $self = $capture.shift(); say $self; say $capture.perl() }}; A(5,7)

[03:14] <p6eval> niecza v13-239-g3798d2c: OUTPUT«Unhandled exception: Unable to resolve method shift in class Capture␤  at /tmp/mSul8WUoNz line 1 (A.postcircumfix:<( )> @ 3) ␤  at /tmp/mSul8WUoNz line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2991 (ANON @ 3) ␤  at /home/p6eval/nie…

[03:15] <ruoso> wait... isn't capture read-only?

[03:17] <sorear> yes, captures are read-only

[03:19] <dalek> roast: 025936e | sorear++ | packages/Test/Util.pm:

[03:19] <dalek> roast: Do not use :DEFAULT in Test::Util ... it serves no purpose other than to raise the bar for usage

[03:19] <dalek> roast: review: https://github.com/perl6/roast/commit/025936eddd

[03:19] <ruoso> so you can't shift it to remove the code invocant...

[03:20] <sorear> why would you want to?

[03:21] <ruoso> If you are implementing a custom invocation and you don't want to enforce any context in the arguments

[03:21] <ruoso> you would use (|$capture) as signature

[03:21] <ruoso> and pass the capture as (|$capture) to the next invocation

[03:21] <sorear> what do you mean by a custom invocation?

[03:22] <ruoso> if you are implementing a custom Code type

[03:22] <ruoso> like a method trait

[03:22] <sorear> niecza: sub foo($x, |$y) { say $x.perl; say $y.perl }; foo(1,2,3,4)

[03:22] <p6eval> niecza v13-239-g3798d2c: OUTPUT«1␤\(1, 2, 3, 4)␤»

[03:23] <sorear> hmm, I think that's supposed to print \(2,3,4)

[03:23] <ruoso> I don't thikn that does what you meant

[03:23] <ruoso> |$capture always take the entire capture

[03:23] <sorear> apparently

[03:24] <ruoso> because getting the first element may enforce a specific context in the capture

[03:24] <sorear> I'm thinking I should change that

[03:24] <ruoso> I don't think it's even possible to have that signature

[03:24] <sorear> method foo(|$cap) means sub foo(self, |$cap)

[03:25] <ruoso> it does?

[03:26] <ruoso> I'm pretty confident it doesn't

[03:28] <TimToady> note we got rid of the sigils for \ and |

[03:28] <TimToady> S06:1140

[03:28] <ruoso> sorear: http://perlcabal.org/syn/S06.html#Invocant_parameters

[03:29] <ruoso> specially the last paragraph of the section

[03:30] <ruoso> so if postcircumfix:<( )> doesn't take the capture as a positional parameter you will potentially start processing a lazy list because you think there is an invocant

[03:30] <ruoso> because the method can be obtained as a code and called as a routine

[03:31] <sorear> ruoso: it's not QUITE the same - most importantly, the method form causes installation into the method table

[03:32] <ruoso> niecza: class A { method postcircumfix:<( )>(|$capture) { say $capture.perl() } }; my $code = A.^can('postcircumfix:( )'); $code(A,1,2,3);

[03:32] <p6eval> niecza v13-239-g3798d2c: OUTPUT«Unhandled exception: Excess arguments to CommonEnum.postcircumfix:<( )>, used 2 of 5 positionals␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (CommonEnum.postcircumfix:<( )> @ 1) ␤  at /tmp/4rI1lNE8A9 line 1 (mainline @ 5) ␤  at /home/p6eval/niecza/li…

[03:33] <ruoso> sorear: but in the end it's just a code object, independently on where it is installed

[03:33] <sorear> "can" is currently returning Bool

[03:33] <ruoso> niecza: class A { method postcircumfix:<( )>(|$capture) { say $capture.perl() } }; my $code = A.^method('postcircumfix:( )'); $code(A,1,2,3);

[03:33] <p6eval> niecza v13-239-g3798d2c: OUTPUT«Unhandled exception: Unable to resolve method method in class ClassHOW␤  at /tmp/T0hZx3pJdj line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2991 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2992 (module-CORE @ 59) ␤  at…

[03:33] <sorear> niecza: my $code; class A { $code = method postcircumfix:<( )>(|$capture) { say $capture.perl() } };  $code(A,1,2,3);

[03:33] <ruoso> nom: class A { method postcircumfix:<( )>(|$capture) { say $capture.perl() } }; my $code = A.^can('postcircumfix:( )'); $code(A,1,2,3);

[03:34] <p6eval> niecza v13-239-g3798d2c: OUTPUT«\(A, 1, 2, 3)␤»

[03:34] <p6eval> nom 47540c: OUTPUT«Method 'postcircumfix:<( )>' not found for invocant of class 'Parcel'␤  in <anon> at src/gen/Metamodel.pm:3377␤  in block <anon> at /tmp/r19HQXj0eo:1␤  in <anon> at /tmp/r19HQXj0eo:1␤»

[03:35] <ruoso> sorear: ok, now I'm confused... what just happened?

[03:35] <sorear> ruoso: in niecza or in nom?

[03:35] <ruoso> in niecza

[03:35] <sorear> niecza's binder has a bug that caused |$capture to get all the arguments, including the one that was already eaten by self

[03:36] <ruoso> well... that was actually the behavior I expected

[03:36] <ruoso> |$capture should include the invocant, which is just what happened

[03:37] <ruoso> niecza: class A { method postcircumfix:<( )>(|$capture) { say $capture.perl() } }; my $code = A.^method('postcircumfix:( )'); $code(A,1,(2,(3,4)));

[03:37] <p6eval> niecza v13-239-g3798d2c: OUTPUT«Unhandled exception: Unable to resolve method method in class ClassHOW␤  at /tmp/reVSIUVL0H line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2991 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2992 (module-CORE @ 59) ␤  at…

[03:37] <ruoso> meh... wrong line to copy

[03:37] <sorear> in nom, you want .^find_method

[03:37] <ruoso> niecza: my $code; class A { $code = method postcircumfix:<( )>(|$capture) { say $capture.perl() } };  $code(A,1,(2,(3,4)));

[03:37] <p6eval> niecza v13-239-g3798d2c: OUTPUT«\(A, 1, (2, (3, 4)))␤»

[03:38] <sorear> huh, I'm suprised that worked

[03:38] <sorear> niecza's .perl has known issues with nested Parcels

[03:39] <sorear> TimToady: looking at S06:1166 - what would you say would happen if |args were moved after $self: ?

[03:39] *** orafu left
[03:41] <ruoso> niecza: my $code; class A { $code = method postcircumfix:<( )>($capture) { say $capture.perl() } };  $code(A,1,(2,(3,4)));

[03:41] <p6eval> niecza v13-239-g3798d2c: OUTPUT«Unhandled exception: Excess arguments to A.postcircumfix:<( )>, used 2 of 3 positionals␤  at /tmp/pWux1TY_kI line 0 (A.postcircumfix:<( )> @ 1) ␤  at /tmp/pWux1TY_kI line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2991 (ANON @ 3) ␤  …

[03:41] *** Patterner left
[03:41] <TimToady> "The C<|> parameter takes a snapshot of the current binding state"

[03:41] *** orafu joined
[03:43] *** Psyche^ joined
[03:43] *** Psyche^ is now known as Patterner

[03:44] *** thowe joined
[03:44] <ruoso> TimToady: does that mean that method foo(|$capture) {...} will not result in $capture having the invocant?

[03:45] <TimToady> as I currently read it, | leaves out the invocant, but \ would include it

[03:46] <TimToady> er, actually, current spec only has \ on individual args

[03:46] <ruoso> well, in that case not having capture as a positional arg to postcircumfix:( ) is ok... since you won't need to modify the capture inside the sub

[03:47] <TimToady> but it's possible we need a really raw invocation hook

[03:47] <ruoso> although http://perlcabal.org/syn/S06.html#Argument_list_binding seems to imply otherwise

[03:48] <TimToady> we could special case (|cap) to include the invocant, or allow (|cap:)

[03:49] <sorear> someday we also need to figure out what \|foo means

[03:49] * ruoso is really confused right now

[03:49] <sorear> the current spec is not consistant

[03:49] <TimToady> at the moment \| is not in the spec

[03:49] <TimToady> iirc

[03:50] <cognominal> in rakudo foo(|$) leaves the invokant

[03:50] <ruoso> leaves in the capture or outside the capture/

[03:51] <ruoso> "method addto (|$args ($self: @x)) { trace($args); $self += [+] @x }" <--- from the spec

[03:51] <ruoso> the inner signature to the capture includes the invocant

[03:52] <ruoso> nom: class A { method foo (|$cap) { say $cap.perl }}; A.foo(1,2,3);

[03:52] <p6eval> nom 47540c: OUTPUT«Capture.new()␤»

[03:52] <ruoso> nom: class A { method foo (|$cap) { say $cap }}; A.foo(1,2,3);

[03:52] <p6eval> nom 47540c: OUTPUT«1 2 3␤»

[03:52] <TimToady> we had to get rid of the $ for sanity, since it sometimes implies itemizing

[03:53] <ruoso> uh?

[03:53] <TimToady> listop 1,2,$cap,4 does not behave correctly

[03:53] <TimToady> likewise for \ parcels

[03:53] *** packetknife left
[03:53] <ruoso> I guess that's why we had the capture sigil idea

[03:54] <TimToady> cap should not imply a decision on flattening/non-flattening

[03:54] <cognominal> hum, sorry, the example in List are special, they use  pir::perl6_current_args_rpa__P() to get at the positional parameters

[03:54] <TimToady> it turns out it's just a constant declaration in strange form

[03:54] <ruoso> oh.. so just without sigil

[03:54] <TimToady> yes, but parsed as a term

[03:54] <ruoso> nom: class A { method foo (|cap) { say cap }}; A.foo(1,2,3);

[03:54] <p6eval> nom 47540c: OUTPUT«===SORRY!===␤Malformed parameter at line 1, near "|cap) { sa"␤»

[03:54] <TimToady> you can still do foo() or +foo or whatever

[03:54] <ruoso> std: class A { method foo (|cap) { say cap }}; A.foo(1,2,3);

[03:54] <p6eval> std dc62e1d: OUTPUT«[31m===[0mSORRY![31m===[0m␤Malformed parameter at /tmp/pR3oO7K1xv line 1:␤------> [32mclass A { method foo ([33m⏏[31m|cap) { say cap }}; A.foo(1,2,3);[0m␤    expecting any of:␤    method_def␤     name␤   parameter␤      signature␤Parse failed␤FAILED 00:01 109m␤»…

[03:55] <TimToady> nyi

[03:55] <TimToady> been too sick to reimplement that yet

[03:55] <TimToady> I'm only well enough to rewrite all the specs :)

[03:56] * sorear will try to implement |foo and foo in the near future

[03:56] <ruoso> ok... so (|cap) in the signature returns an iterator to wherever the HOW left when deciding how to invoke the method

[03:57] <ruoso> that also makes it compatible with the fact that the capture itself is readonly

[03:59] <ruoso> which basically means we have the same semantics as LISP

[03:59] <sorear> ruoso: HOW doesn't enter into this at all.

[04:00] <ruoso> sorear: the HOW is the thing doing the method dispatch

[04:00] <TimToady> but we need to be able to take the snapshot further down the arg list as well; this is how partial binding for map -> $a, $b etc are supposed to work eventually

[04:00] <TimToady> allow the binding to decide how far to bind, not do introspection on the signature

[04:01] <sorear> ruoso: no, the HOW decides which method to dispatch to, but the actual signature binding is done by a different module, the "binder"

[04:01] <ruoso> of course we still have the problem of being able to backtrack in the binding

[04:01] <ruoso> sorear: yeah... but the HOW could consume something from the capture while deciding... 

[04:01] <sorear> Not in 6model it can't.

[04:02] <ruoso> I guess we ended up with the two-step invocation then

[04:03] <sorear> yes, two steps

[04:03] <sorear> $foo.bar(5) ==> my $method = $foo.^find_method('bar'); $method($foo, 5)

[04:03] <sorear> with a small complication due to nextsame

[04:05] <ruoso> because $method is actually an iterator

[04:05] <sorear> right

[04:06] *** araujo left
[04:07] <thowe> Has there been any work done which might have made it so I can compile Rakudu without running out of memory?

[04:07] <sorear> Rakudo

[04:07] <sorear> how much memory do you have?

[04:07] <thowe> 2.5 gig

[04:07] <sorear> then probably yes

[04:07] <thowe> I last tried about a month ago...

[04:08] <sorear> and yet you ran out?

[04:08] <thowe> Yeah.  Not sure if it is a gcc version thing...  Or maybe an OpenBSD thing...

[04:08] <thowe> Maybe I should submit some kind of bug report.

[04:10] <thowe> It keeps bumming me out every time I see mention of Perl6.  I'm sensitive that way ever since I had kids.  It's weird for me too.

[04:11] <ruoso> nom: multi foo($a) { $a };  multi foo($a,$b,|$cap) { return foo($a + $b,|$cap) }; say foo(1,2,3,4,5,6);

[04:11] <p6eval> nom 47540c: OUTPUT«===SORRY!===␤CHECK FAILED:␤Calling 'foo' will never work with argument types (int, int, int, int, int, int) (line 1)␤    Expected any of:␤    :(Any $a)␤    :(Any $a, Any $b, |$cap)␤»

[04:11] <ruoso> TimToady: so was this supposed to work in the new semantics?

[04:12] <sorear> that absolutely should work

[04:14] <dalek> niecza: 15fb3de | sorear++ | lib/CORE.setting:

[04:14] <dalek> niecza: Add undefine

[04:14] <dalek> niecza: review: https://github.com/sorear/niecza/commit/15fb3ded99

[04:14] <sorear> niecza: say eval("").perl

[04:14] <p6eval> niecza v13-239-g3798d2c: OUTPUT«Nil␤»

[04:16] <dalek> niecza: 0569a05 | sorear++ | t/spectest.data:

[04:16] <dalek> niecza: Run S32-scalar/undef.t

[04:16] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0569a05b40

[04:16] <dalek> roast: 33dd00a | sorear++ | S32-scalar/undef.t:

[04:16] <dalek> roast: Fudge S32-scalar/undef.t for niecza

[04:16] <dalek> roast: review: https://github.com/perl6/roast/commit/33dd00acee

[04:17] *** cooper left
[04:17] *** cooper joined
[04:21] *** raiph joined
[04:24] *** thou joined
[04:50] *** leprevost left
[04:52] <colomon> sorear: darn, I was hoping you'd gotten is_run working in niecza.  though I guess it should have occurred to me to skip that one test in undef.t to get the rest of that file!

[04:54] <sorear> we should rewrite that anyway- using is_run to check for the absense of warnings is completely insane when we have CONTROL

[04:55] <sorear> although I'm sort of tending to just nuke undef.t, most of what it's testing is nonsense

[04:57] <colomon> 'night!  happy hacking!

[05:20] <raiph> moritz's irclog has S06:1166 link to http://perlcabal.org/syn/S06.html#line_1166 

[05:21] <raiph> might be nice if it linked to https://github.com/perl6/specs/blame/master/S06-routines.pod#LID1166

[05:22] <raiph> i'm guessing he already knows that, but thought i'd note it just in case that's helpful

[05:37] <kshannon> I'm not sure that the blame view is the best.  Hmm,  but it may be the only one which works.  blob dies on quite a few 

[05:37] <benabik> The rendered version on perlcabal is more readable for the average person.

[05:48] *** Khisanth joined
[05:52] *** thowe left
[05:56] *** cognominal_ joined
[05:59] *** cognominal left
[06:15] *** kaleem joined
[06:23] *** birdwindupbird joined
[06:54] <raiph> benabik: ok. separate point: the "Official Perl 6 Documentation" on perlcabal is over 2 months old...

[06:55] *** mtk left
[06:56] <sorear> raiph: do you have a feather account yet/

[06:56] <sorear> raiph: perlcabal is hosted by the #perl6 community server.  Everyone here can access the web server.

[06:57] <sorear> raiph: this isn't something maintained by the nebulous "them".  it's YOUR system.

[07:00] *** cognominal joined
[07:01] *** cognominal_ left
[07:02] <sorear> there's an hourly cronjob to update the specs.  lemme see why it's not working

[07:02] * moritz is on it

[07:04] <sorear> moritz: have you done anything yet?

[07:10] *** raiph left
[07:10] <japhb> Anyone around who compiles Rakudo on Windows?  I'm trying to help someone get started, and he's having problems with the autogenerated parrot -- but we don't know if it's a failure of the Parrot itself, or the way it is auto-generated.

[07:10] <japhb> s/the Parrot/the Parrot build/

[07:10] <sorear> o/ japhb

[07:12] <japhb> o/ sorear

[07:12] <japhb> Oy, now he's managed to (seemingly) get past the parrot generation and is stuck at the NQP generation.  SIGH

[07:12] <moritz> sorear: I've run the script manually, no error

[07:13] <sorear> moritz: I did the same thing, no error

[07:13] <moritz> japhb: complaining about missing libparrot.dll or so?

[07:13] <moritz> sorear: I've also added logging to the cron job

[07:13] <sorear> I don't see why the /var/spool/cron/crontabs/pugscode isn't working

[07:13] <moritz> is cron running?

[07:13] <sorear> ...no!

[07:13] <moritz> seems like "no"

[07:14] <moritz> sorear: should I, or will you?

[07:14] <sorear> I will

[07:14] <japhb> moritz, That was the first problem.  He finally just gave up and copied the cygparrot DLL directly into install/bin, and that made parrot happier.  Now NQP's configuration is dying in the dyncall setup step saying unsupported OS ....

[07:14] <sorear> cron is *installed*...

[07:16] <japhb> Ah, nqp/3rdparty/dyncall/configure needed to be hacked to recognize new version/platform for cygwin.  Over-restrictive check.

[07:16] <japhb> ... and on to the next fail.

[07:18] <sorear> huh.  /var/log/syslog hasn't been written to since Oct 21

[07:19] <sorear> -rw-r----- 1 root        adm          9362 Aug 19  2012 debug.0

[07:20] <sorear> auth.log also hasn't been touched since Oct21.  WTF

[07:24] *** donri joined
[07:34] *** thou left
[07:36] <sorear> ok, I got logging to start again with a killall -HUP

[07:36] <sorear> what idiot disabled syslog? :|

[07:39] <sorear> I would like to whine at audreyt for setting up two cronjobs with 1-minute spacing

[07:40] *** xinming left
[07:40] <sorear> meh, it seems to be working now

[07:43] *** raiph joined
[07:47] <raiph> sorear++ # fixing feather

[07:51] *** wtw joined
[07:59] <dalek> niecza: 8b7ad1c | sorear++ | src/ (2 files):

[07:59] <dalek> niecza: Ensure that $*EXECUTABLE_NAME gets a path too.

[07:59] <dalek> niecza: review: https://github.com/sorear/niecza/commit/8b7ad1c11b

[08:01] <sorear> rakudo: say $*OS

[08:01] <p6eval> rakudo 47540c: OUTPUT«linux␤»

[08:08] <geekosaur> sorear, if feather is old enough it may have a buggy syslogd

[08:12] *** xinming joined
[08:15] <moritz> geekosaur: it's debian unstable, and updated every 6 months or so

[08:16] <moritz> geekosaur: but the fact that cron wasn't running *and* syslogd wasn't logging points at a different cause

[08:17] <moritz> (whatever it may be, it's likely to be the same cause for both; like an upgrade gone wrong, an out-of-control OOM killer or something)

[08:18] <geekosaur> ah

[08:22] <sorear> geekosaur: tell me more about this syslog bug.

[08:22] * sorear pulls up to the fire

[08:28] <dalek> niecza: a6fc7ac | sorear++ | lib/ (2 files):

[08:28] <dalek> niecza: Add a rather crude $*OS

[08:28] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a6fc7ac54e

[08:28] <sorear> this is enough that get_out from Test::Util works

[08:29] <moritz> \o/

[08:29] <sorear> is_run doesn't work; what seems to be happening is some approximation to "the proto is being exported, but none of the multis are

[08:29] <sorear> "

[08:29] <moritz> huh?

[08:29] <moritz> I thought it was the proto's job to interface with the rest of the world, thus also handling exporting

[08:30] <sorear> yeah, this shouldn't be happening

[08:31] <sorear> I wonder how nom handles exporting of protos

[08:31] <sorear> / exporting of multis in general really

[08:33] <sorear> niecza's multi system wants each multi candidate to have a unique name, which works fine for regexes but doesn't quite work otherwise

[08:33] <moritz> I'm fine with simplifying Test::Util if that helps niecza

[08:34] <moritz> (and doesn't break rakudo :-)

[08:34] <sorear> meh, MMD export needs to work anyway

[08:36] <sorear> currently niecza tacks a unique integer on the end of every multi candidate name

[08:36] <sorear> this... won't really work across modules

[08:37] <moritz> depends on how unique those integers are :-)

[08:37] <sorear> say you import something and then define a new candidate - it might shadow a random candiate from the other module

[08:37] *** spine_ joined
[08:37] <sorear> moritz: Sequentially increasing from 0 in each new file

[08:37] <sorear> These aren't UUIDs :-)

[08:37] <moritz> not unique enough, then :-)

[08:38] *** raiph left
[08:45] <moritz> nom: say &time

[08:45] <p6eval> nom 47540c: OUTPUT«===SORRY!===␤Symbol '&time' not predeclared in <anonymous> (/tmp/GkXOcW_pa1:1)␤»

[08:45] <moritz> nom: say &term:sym<time>

[08:45] <p6eval> nom 47540c: OUTPUT«===SORRY!===␤Symbol '&term:sym<time>' not predeclared in <anonymous> (/tmp/4cSCgte9SS:1)␤»

[08:45] *** mj41 joined
[08:46] <moritz> nom: sub f { 6 }; my $b = &f; say &$b()

[08:46] <p6eval> nom 47540c: OUTPUT«6␤»

[08:46] <sorear> nom: say time

[08:46] <p6eval> nom 47540c: OUTPUT«1326441952␤»

[08:47] <sorear> huh

[08:47] <sorear> oh

[08:47] <sorear> nom: say &term:<time>

[08:47] <p6eval> nom 47540c: OUTPUT«sub term:<time>() { ... }␤»

[08:47] <sorear> nom: say &term:<time>()

[08:47] <p6eval> nom 47540c: OUTPUT«1326441971␤»

[08:47] <moritz> nom: my $b = &term:<time>; &$b()

[08:47] <p6eval> nom 47540c:  ( no output )

[08:48] *** Trashlord joined
[08:49] *** Shozan is now known as SHODAN

[08:54] <sorear> ISTR that once upon a time, you could define an only method in a role, and a proto in the class, and the role's method would magically become multi

[08:54] <sorear> Did this get removed from the spec?

[08:55] <sorear> hmm, no, it's still in specs but not roast

[08:57] * sorear -> sleep

[08:57] <sorear> will finish this tromorro

[09:01] *** snearch joined
[09:09] <sorear> niecza: my $b =&time; say&$b();

[09:09] <p6eval> niecza v13-243-ga6fc7ac: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unsupported use of bare 'say'; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument at /tmp/PHeJOjQAq1 line 1:␤------> [32mmy $b =&time; say[33m⏏[31m&$b();[0m␤␤Undeclared routine:␤  'time' u…

[09:33] <moritz> niecza: my $b =&time; say &$b();

[09:33] <p6eval> niecza v13-243-ga6fc7ac: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤    'time' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 919 (die @ 2) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1143 (P6.comp_unit @ 32) ␤  at /hom…

[09:48] <dalek> roast: fe0dfd6 | moritz++ | S05-grammar/inheritance.t:

[09:48] <dalek> roast: refudge file for rakudo

[09:48] <dalek> roast: review: https://github.com/perl6/roast/commit/fe0dfd6dd5

[09:48] *** daxim joined
[09:50] *** Trashlord left
[09:58] *** Moukeddar joined
[10:00] <Moukeddar> o/ guys

[10:06] *** Moukeddar left
[10:09] *** spine_ left
[10:11] *** spine_ joined
[10:12] *** Trashlord joined
[10:31] <jnthn> morning, #perl6

[10:31] <phenny> jnthn: 02:13Z <ruoso> tell jnthn I found the original reason for .postcircumfix:<( )>($capture)... If it's not an enclosed capture, the invocant is always the Code object, and will override the actual invocant of the thing being called...

[10:33] <moritz> \o

[10:35] <dalek> roast: 160bc8b | moritz++ | S13-overloading/operators.t:

[10:35] <dalek> roast: test for overriding invoke with postcircumfix:<( )>

[10:35] <dalek> roast: review: https://github.com/perl6/roast/commit/160bc8b7d0

[10:44] <jnthn> nom: multi foo($a) { $a };  multi foo($a,$b,|$cap) { return foo($a + $b,|$cap) }; say foo(1,2,3,4,5,6);

[10:44] <p6eval> nom 47540c: OUTPUT«===SORRY!===␤CHECK FAILED:␤Calling 'foo' will never work with argument types (int, int, int, int, int, int) (line 1)␤    Expected any of:␤    :(Any $a)␤    :(Any $a, Any $b, |$cap)␤»

[10:44] <jnthn> Naughty optimizer.

[10:49] <moritz> nom: multi foo($a) { $a };  multi foo($a,$b,|$cap) { return foo($a + $b,|$cap) }; say ::('&foo')(1,2,3,4,5,6);

[10:49] <p6eval> nom 47540c: OUTPUT«No applicable candidates found to dispatch to for 'foo'. Available candidates are:␤:(Any $a)␤:(Any $a, Any $b, |$cap)␤␤  in sub foo at /tmp/U0IQcCGsg2:1␤  in block <anon> at /tmp/U0IQcCGsg2:1␤  in <anon> at /tmp/U0IQcCGsg2:1␤»

[10:49] *** am0c joined
[10:49] *** panterax left
[10:50] *** panterax joined
[10:50] <moritz> seems not only the optimizer is naughty :/

[10:51] <jnthn> moritz: No, turns out that | wasn't being treated as giving the multi slurpy arity

[10:51] *** daxim left
[10:57] *** Patterner left
[11:01] *** Psyche^ joined
[11:01] *** Psyche^ is now known as Patterner

[11:02] <dalek> rakudo/nom: 2b07f6a | jnthn++ | src/binder/multidispatch.c:

[11:02] <dalek> rakudo/nom: A | should imply slurpy arity in a multi.

[11:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2b07f6a427

[11:02] <dalek> roast: f1c60ac | jnthn++ | S06-multi/syntax.t:

[11:02] <dalek> roast: Add test for multi-dispatch involving a | in the signature.

[11:02] <dalek> roast: review: https://github.com/perl6/roast/commit/f1c60ac546

[11:02] <moritz> jnthn: I've been thinking about sink context detection a bit...

[11:03] <moritz> jnthn: seems we have a list of statements which we want to execlude (assignment, binding, assignment meta-ops)

[11:04] <moritz> and otherwise add a  .sink or &sink call to the statement if the return value can't be used

[11:04] <moritz> should that logic go into the optimizer?

[11:05] <jnthn> moritz: Which bit of logic in particular? 

[11:05] <jnthn> moritz: The optimizer shouldn't really be where we put semantic things though...the optimizers job is to increase performance while conserving semantics. :)

[11:06] <jnthn> (Or complain about code that'd never work, in some cases...)

[11:08] <moritz> jnthn: finding statements and putting them in sink context

[11:08] <jnthn> moritz: No, that doesn't sound like it should go in the optimizer really.

[11:08] <moritz> a separate stage then?

[11:09] <jnthn> moritz: Perhaps, but can we not do it in the actions, when we hit the end of a non-immediate block?

[11:10] *** cognominal_ joined
[11:10] <moritz> jnthn: thight might work too

[11:11] <jnthn> moritz: The problem with separate stage is that we'd have to take some special care to make sure it's run in time whenever we do run some code at BEGIN time

[11:11] <jnthn> moritz: Which isn't such an ordeal I guess...

[11:12] <jnthn> Oh, the nasty is in tracking that we didn't already fiddle with the PAST when we re-run it.

[11:13] <jnthn> Which is again manageable...but I think we avoid those two if we do it at the appropriate point during the actions.

[11:13] *** cognominal left
[11:16] *** kaleem left
[11:19] *** sayu joined
[11:20] *** Patterner left
[11:22] *** Psyche^ joined
[11:23] *** Psyche^ is now known as Patterner

[11:30] * jnthn finds 5 more tickets to tag testneeded

[11:34] *** sayu left
[11:36] <dalek> nqp/bigint-type: c4af401 | moritz++ | src/ops/nqp_bigint.ops:

[11:36] <dalek> nqp/bigint-type: give most nqp_bigint_* an additional parameter for the type of the return value

[11:36] <dalek> nqp/bigint-type: 

[11:36] <dalek> nqp/bigint-type: Also regularize the signature of from_str to have the type object come last,

[11:36] <dalek> nqp/bigint-type: as all other ops do.

[11:36] <dalek> nqp/bigint-type: review: https://github.com/perl6/nqp/commit/c4af40182d

[11:36] <dalek> nqp/bigint-type: 8266846 | moritz++ | src/PAST/NQP.pir:

[11:36] <dalek> nqp/bigint-type: fix signatures in NQP.pir

[11:36] <dalek> nqp/bigint-type: review: https://github.com/perl6/nqp/commit/82668468bd

[11:36] <dalek> nqp/bigint-type: e05dc77 | moritz++ | t/nqp/60-bigint.t:

[11:36] <dalek> nqp/bigint-type: adapt tests to new bigint usage

[11:36] <dalek> nqp/bigint-type: review: https://github.com/perl6/nqp/commit/e05dc77aa8

[11:36] <moritz> that's the branch to fix the scary-int stuff that masak++ RT'ed

[11:38] <jnthn> moritz++ # yay!

[11:39] <jnthn> Thanks for jumping on that. :)

[11:45] *** xinming left
[11:49] <masak> g'day, #perl6

[11:52] <masak> mwhaha -- I snuck ASCII art into the perl6 queue in RT: http://rt.perl.org/Public/Bug/Display.html?id=69312 :D

[12:00] *** GlitchMr joined
[12:00] *** domidumont joined
[12:01] <masak> lots of nice talk about hiring in the backlog. ;)

[12:02] <masak> as usual, if anyone here is interested in moving to southern Sweden and working with jnthn and me, give us a ping. we'd be very happy to extend our in-house Perl 6 group.

[12:04] <tadzik> :)

[12:06] <masak> in other news, in 10 days I'll be giving my first Perl course to a client. I'm excited and ever so slightly nervous. ;)

[12:07] <cognominal_> I would wish the =~ to be recycled as a string append operator instead of carping. It could still carp if the right operand is a regex

[12:09] <masak> cognominal_: try ~=

[12:10] <flussence> multi sub infix:<=~>($a, $b) { $a ~= $b } :)

[12:10] <masak> flussence: won't do you much good if the grammar intercepts such uses ;)

[12:11] <cognominal_> I meant prepend

[12:11] <jnthn> OK, that's my ticket fun for today

[12:11] <jnthn> testneeded list is up to 98 tickets. Total queue is 678.

[12:11] <flussence> nom: say 'a' R~ 'b'

[12:11] <p6eval> nom 2b07f6: OUTPUT«ba␤»

[12:11] <jnthn> nom: say 678 - 98

[12:11] <p6eval> nom 2b07f6: OUTPUT«580␤»

[12:14] <flussence> I like the little things you can do with the R op, but I've yet to come across a use that makes me go "holy crap, what just happened?"

[12:15] *** snearch left
[12:16] <jnthn> bbi15

[12:17] <masak> cognominal_: that's a horrible idea :)

[12:22] <masak> flussence: that's a very open attitude. szabgab asked me during a course he gave what could possibly be the use of R

[12:24] *** xinming joined
[12:41] <jnthn> Not all things in a language will crop up equally often. R is probably one of those "occasionally cute and really useful" things

[12:53] <colomon> cross!

[12:53] <colomon> Xop and Rop go together very nicely sometimes

[12:53] * colomon knew there was an example somewhere in the depths of his memory...

[12:54] <arnsholt> R- serves the same purpose as 1- in Haskell (CL has it as well IIRC)

[12:54] <dalek> rakudo/nom: 45c44ba | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[12:54] <dalek> rakudo/nom: Disallow 'is rw' on optional parameters, as per spec.

[12:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/45c44bafbf

[12:55] <colomon> niecza: say 1..4 X 'a'..'d'

[12:55] <p6eval> niecza v13-243-ga6fc7ac: OUTPUT«1 a 1 b 1 c 1 d 2 a 2 b 2 c 2 d 3 a 3 b 3 c 3 d 4 a 4 b 4 c 4 d␤»

[12:55] <colomon> niecza: say 1..4 X~ 'a'..'d'

[12:55] <p6eval> niecza v13-243-ga6fc7ac: OUTPUT«1a 1b 1c 1d 2a 2b 2c 2d 3a 3b 3c 3d 4a 4b 4c 4d␤»

[12:55] <colomon> niecza: say 1..4 RXR~ 'a'..'d'

[12:55] <p6eval> niecza v13-243-ga6fc7ac: OUTPUT«1a 2a 3a 4a 1b 2b 3b 4b 1c 2c 3c 4c 1d 2d 3d 4d␤»

[12:55] <masak> perl6: sub infix:<R->($a, $b) { $a - $b * 2 }; say 4 R- 5

[12:55] <flussence> ooh

[12:55] <p6eval> pugs b927740, rakudo 2b07f6, niecza v13-243-ga6fc7ac: OUTPUT«-6␤»

[12:56] <masak> \o/

[12:56] <masak> colomon: nice!

[12:57] <colomon> masak: not original to me...

[12:58] <masak> niecza: sub foo($x? is rw) {}; foo(); say "alive"

[12:58] <p6eval> niecza v13-243-ga6fc7ac: OUTPUT«Potential difficulties:␤  $x is declared but not used at /tmp/HJ38TLkE8q line 1:␤------> [32msub foo([33m⏏[31m$x? is rw) {}; foo(); say "alive"[0m␤␤Unhandled exception: Binding $x? is rw in foo, cannot bind read-only value to is rw parameter␤  at /tmp…

[13:00] <moritz> that is correct, even if confusing

[13:00] <masak> aye.

[13:00] <jnthn> It's meant to be a compile time error, iiuc.

[13:00] <jnthn> Or so said the ticket.

[13:01] <moritz> niecza: sub foo(\$x?) {}; foo(); say "alive"

[13:01] <p6eval> niecza v13-243-ga6fc7ac: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unable to parse signature at /tmp/JXPjbFzAU6 line 1:␤------> [32msub foo([33m⏏[31m\$x?) {}; foo(); say "alive"[0m␤Couldn't find final ')'; gave up at /tmp/JXPjbFzAU6 line 1:␤------> [32msub foo(\$x[33m⏏[31m?) {}; foo…

[13:01] <masak> seems I claimed it should.

[13:01] <moritz> niecza: sub foo($x? is parcel) {}; foo(); say "alive"

[13:01] <p6eval> niecza v13-243-ga6fc7ac: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unhandled trait rwt at /tmp/ypLNFC3qT2 line 1:␤------> [32msub foo($x? is parcel[33m⏏[31m) {}; foo(); say "alive"[0m␤␤Potential difficulties:␤  $x is declared but not used at /tmp/ypLNFC3qT2 line 1:␤------> [32msub foo…

[13:01] <jnthn> rwt? :)

[13:01] <moritz> "Unhandled trait rwt"? I don't recall using that trait

[13:02] <dalek> zavolaj: 25cbbb8 | jnthn++ | TODO:

[13:02] <dalek> zavolaj: Remove a todone.

[13:02] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/25cbbb8a19

[13:07] <dalek> roast: a7ff6d7 | moritz++ | S0 (3 files):

[13:07] <dalek> roast: rakudo unfudges

[13:07] <dalek> roast: review: https://github.com/perl6/roast/commit/a7ff6d75f2

[13:07] *** leprevost joined
[13:10] *** cognominal_ left
[13:11] *** cognominal joined
[13:13] <masak> this looks like an interesting paper, and maybe even relevant to my grant work: http://lambda-the-ultimate.org/node/2987

[13:17] *** jaldhar left
[13:26] <colomon> sorear, [Coke]: t/spec/S06-multi/syntax.t hangs for me with the latest niecza

[13:26] <dalek> rakudo/bigint-type: 5c64344 | moritz++ | / (4 files):

[13:26] <dalek> rakudo/bigint-type: switch to new bigint API

[13:26] <dalek> rakudo/bigint-type: review: https://github.com/rakudo/rakudo/commit/5c6434405a

[13:26] <moritz> colomon: jnthn++ added a test, maybe that's to blame

[13:27] <moritz> niecza: multi with_cap($a) { $a }; multi with_cap($a, $b, |$cap) { with_cap{ $a + $b, |$cap) }; say with_cap(1, 2, 3, 4, 5, 6)

[13:27] <p6eval> niecza v13-243-ga6fc7ac: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unable to parse subscript at /tmp/lFekSOVANR line 1:␤------> [32multi with_cap($a, $b, |$cap) { with_cap{[33m⏏[31m $a + $b, |$cap) }; say with_cap(1, 2, 3[0m␤Couldn't find final '}'; gave up at /tmp/lFekSOVANR line 1:␤-…

[13:27] <moritz> niecza: multi with_cap($a) { $a }; multi with_cap($a, $b, |$cap) { with_cap( $a + $b, |$cap) }; say with_cap(1, 2, 3, 4, 5, 6)

[13:28] <p6eval> niecza v13-243-ga6fc7ac: OUTPUT«(timeout)»

[13:28] <moritz> colomon: fudging that last test should fix the hang for you

[13:28] <jnthn> 05:41 < sorear> that absolutely should work

[13:28] <jnthn> :D

[13:29] <moritz> perl6: say so 'aa' ~~ /(.)$1/

[13:30] <p6eval> niecza v13-243-ga6fc7ac: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/lib/CORE.setting line 958 (warn @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 187 (Mu.Str @ 10) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/zaMzjhqNnS line 1 (ANON @ 7) ␤…

[13:30] <p6eval> ..pugs b927740: OUTPUT«*** No such subroutine: "&so"␤    at /tmp/G6E_0iXl27 line 1, column 5 - line 2, column 1␤»

[13:30] <p6eval> ..rakudo 2b07f6: OUTPUT«Bool::False␤»

[13:30] <moritz> rakudo++

[13:30] *** cognominal left
[13:32] *** cognominal joined
[13:35] <dalek> nqp: 049712e | jnthn++ | src/6model/reprs/NativeCall.c:

[13:35] <dalek> nqp: Fix NativeCall REPR's copy_to function.

[13:35] <dalek> nqp: review: https://github.com/perl6/nqp/commit/049712ec29

[13:37] *** am0c left
[13:40] <[Coke]> anyone else having trouble viewing http://perlcabal.org/syn/S32/Temporal.html ? getting "connect fail" here.

[13:41] <[Coke]> looks like the box is up, but the webserver isn't.

[13:42] * [Coke] wonders if this related to sorear's cron poking.

[13:42] <flussence> dead here too

[13:42] <masak> here too.

[13:42] * moritz tries to fix it

[13:43] <moritz> [Fri Jan 13 14:42:55 2012] [notice] Apache/2.2.9 (Debian) configured -- resuming normal operations

[13:44] <moritz> he, there's an apache listening on the tcp6 port :::80 :-)

[13:47] <[Coke]> http://www.smbc-comics.com/index.php?db=comics&id=2491 - batman vs. programming.

[13:47] <moritz> ugh, I'm on the wrong feather host :/

[13:50] <moritz> ok, perlcabal.org "fixed"

[13:50] <moritz> problem was that /etc/apache2/sites-available/dev.pugscode.org was gone

[13:50] <moritz> but the symlink in sites-enabled was still there

[13:50] <moritz> I removed it, but I'm not sure if that's the right fix

[13:51] <moritz> does anybody remember if there was something valuable on that site?

[13:53] <masak> ISTR it was a page with links to other things, a bit like perl6.org is now.

[13:54] *** daxim joined
[13:59] <moritz> jnthn: some recent nom commit broke USAGE or MAIN. For example  S06-other/main.t dies with "This type cannot unbox to a native string", and the backtrace contains the get_string vtable override from Mu, QRegex and the usage generator

[14:00] <jnthn> eek

[14:00] <moritz> ah, I see it now

[14:01] <moritz> my $constraints = ~$param.constraints

[14:01] <jnthn> ah

[14:01] <moritz> my $simple-const = $constraints && $constraints !~~ /^_blkc/

[14:01] <jnthn> Yeah, the tests seemed to wants .constraints to return a junction...

[14:03] <cognominal> nom: (sub a{}).map: { ~.name }

[14:03] <p6eval> nom 45c44b:  ( no output )

[14:04] <cognominal> nom: (sub a{}).map: { say ~.name }

[14:04] <p6eval> nom 45c44b:  ( no output )

[14:04] <cognominal> nom: (sub a{}).map: { say .name }

[14:04] <p6eval> nom 45c44b:  ( no output )

[14:06] <kshannon> moritz: Re dev.pugscode.org,  I think there was some discussion on #parrot and even #parrotsketch related to getting rid of it,  but I might be misremembering...

[14:07] <dalek> roast: 9c407b7 | moritz++ | S (4 files):

[14:07] <dalek> roast: rakudo unfudges, plus a test for RT #70007

[14:07] <dalek> roast: review: https://github.com/perl6/roast/commit/9c407b76b7

[14:08] <moritz> kshannon: #parrot discussing pugscode? seems unlikely... maybe it was parrotcode.org, the old home before parrot.org?

[14:09] <moritz> anyway, if anybody is interested in resurrecting dev.pugscode.org, they must speak up, then I might investigate further

[14:11] <moritz> (re main breakage) it bothers me a bit that the get_string vtable override shows up in the trace. Shouldn't  $p6object ~~ $regex entirely avoid that codepath?

[14:12] <moritz> seems we don't avoid it

[14:12] <jnthn> moritz: That sounds bothersome.

[14:12] <moritz> we just blindly pass the topic to Cursor.'!cursor_init'

[14:12] <jnthn> ah

[14:12] <jnthn> Well, that does get orig correct at least...

[14:13] <dalek> zavolaj: 77580da | jnthn++ | examples/win32-api-call.p6:

[14:13] <dalek> zavolaj: Update Win32 API example.

[14:13] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/77580da25c

[14:13] <dalek> zavolaj: b3e94c4 | jnthn++ | lib/NativeCall.pm6:

[14:13] <dalek> zavolaj: Restore auto-appending the .dll or .so rather than requiring it be mentioned.

[14:13] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/b3e94c4d10

[14:13] <dalek> zavolaj: bcbdb85 | jnthn++ | lib/NativeCall.pm6:

[14:13] <dalek> zavolaj: Overload of the native trait_mod that handles the 'call in current executable' functionality (though probably needs a tweak in NQP lib too).

[14:13] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/bcbdb85dfa

[14:13] <dalek> zavolaj: 9ce75d1 | jnthn++ | t/CompileTestLib.pm:

[14:13] <dalek> zavolaj: Add a library that can compile very simple C libraries for usage during testing.

[14:13] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/9ce75d1713

[14:13] <dalek> zavolaj: f73fd24 | jnthn++ | t/01-argless. (2 files):

[14:13] <dalek> zavolaj: First new test using new testing infrastructure. Passes.

[14:13] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/f73fd24b09

[14:13] <moritz> \o/. call, call, call!

[14:16] <dalek> zavolaj: 6e86d2f | jnthn++ | .gitignore:

[14:16] <dalek> zavolaj: Update .gitignore.

[14:16] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/6e86d2f99a

[14:16] <dalek> zavolaj: 9e592fc | jnthn++ | / (4 files):

[14:16] <dalek> zavolaj: Remove existing test-related files (though will likely steal bits from them while building up the new set).

[14:16] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/9e592fc705

[14:16] <dalek> zavolaj: cdfbfa9 | jnthn++ | Makefile:

[14:16] <dalek> zavolaj: Toss Makefile. We don't need it now for building test libraries, and the library is otherwise simple enough for Panda to install.

[14:16] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/cdfbfa9306

[14:19] <cognominal> interrupted by a phone call.  Here, the first and second one crashes on decontainerisation (aas hinted a few days ago by jnthn) but not the third. I don't know where to search

[14:19] <kshannon> moritz:  Yep I was misremembering,  they shut down parrotblog.org ...

[14:19] <cognominal> the problematic object is unsurprisingly a string.

[14:21] *** bluescreen10 joined
[14:25] *** mtk joined
[14:29] <dalek> roast: 303fbca | coke++ | S06-multi/syntax.t:

[14:29] <dalek> roast: skip this hanging test for niecza

[14:29] <dalek> roast: review: https://github.com/perl6/roast/commit/303fbca9c6

[14:30] <[Coke]> phenny: tell sorear I skipped the last test in S06-multi/syntax.t because it was hanging; let me know if you want a ticket opened.

[14:30] <phenny> [Coke]: I'll pass that on when sorear is around.

[14:30] <[Coke]> colomon: danke.

[14:36] *** kboga joined
[14:37] <kboga> nom: my %hash = Crow => 'bar', Bar => 'crow'; %hash{<Crow Bar>} := 'a';

[14:37] <p6eval> nom 45c44b: OUTPUT«Null PMC access in get_pmc_keyed_str()␤  in method postcircumfix:<{ }> at src/gen/CORE.setting:1175␤  in method postcircumfix:<{ }> at src/gen/CORE.setting:1165␤  in block <anon> at /tmp/GwW8ORimny:1␤  in <anon> at /tmp/GwW8ORimny:1␤»

[14:37] <kboga> I believe this needs another way to die? :)

[14:38] <moritz> it does

[14:38] <kboga> https://github.com/rakudo/rakudo/commit/f133a3bab3

[14:38] <kboga> there's a ! in front of BIND, that shouldn't be there i believe

[14:39] <moritz> oh, the one before. Somhow I thought you meant the one after

[14:39] <moritz> stupid me

[14:39] <moritz> yes, looks like it

[14:39] <moritz> I'll fix that after I'm done with some other tests

[14:40] <moritz> ERAKUDOCOMPILETOOSLOW

[14:40] <kboga> great, would this need a test too?

[14:40] <moritz> I'm not sure that list binding is specced

[14:40] <moritz> so the question is what the test should test

[14:43] <masak> discussion point: quoting literal hash keys in Perl 5 -- for or against?

[14:43] <flussence> $a{'b'}? too much typing.

[14:43] <masak> kboga: can I submit that to RT, or will you?

[14:43] <moritz> my %h = (foo => 1); # no quoting unless necessary

[14:44] <masak> moritz: oh, sorry, I only meant in hash indexing.

[14:44] <masak> should've been clearer about that.

[14:44] <kboga> moritz: oh, didn't know it was not specced

[14:45] <dalek> nqp: a346d8d | jnthn++ | src/ops/nqp_dyncall.ops:

[14:45] <dalek> nqp: Handle mapping empty library name to a NULL (thus looking in current assembly).

[14:45] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a346d8d7a3

[14:45] <dalek> zavolaj: 4ed29ae | jnthn++ | lib/NativeCall.pm6:

[14:45] <dalek> zavolaj: Fixes to loading from current executing module functionality.

[14:45] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/4ed29aed1c

[14:45] <dalek> zavolaj: 41aaf3d | jnthn++ | t/02-simple-args-and-returns. (2 files):

[14:45] <dalek> zavolaj: Various tests related to passing integer arguments.

[14:45] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/41aaf3de79

[14:46] *** PacoAir joined
[14:46] <moritz> kboga: I just said I'm not sure :-)

[14:46] * masak submits rakudobug

[14:46] *** jdv79_ joined
[14:46] <kboga> masak: i have no idea how to submit that to RT, ofcourse you can :)

[14:46] <masak> kboga: already on it ;)

[14:46] <moritz> simple, send an email to [email@hidden.address]
[14:47] <jnthn> Huh, I thought I had added a case for %hash{<Crow Bar>} and made it die?!

[14:47] <moritz> jnthn: you did, but it was b0rked

[14:47] <jnthn> Oh :/

[14:48] <jdv79_>  does rakudo support "IO" yet?  like forking, IPC, etc...

[14:48] *** snearch joined
[14:49] <moritz> no

[14:49] <moritz> it supports reading and writing from/to streams, including binary

[14:50] <jdv79_> is there an equivalent to Capture::Tiny?

[14:50] <moritz> what does Capture::Tiny do?

[14:50] <jdv79_> as in, "get me stdout and/or stderr whatever happens in this block"

[14:51] <moritz> no

[14:51] *** zhangkaizhao joined
[14:51] <jdv79_> it will capture writes to out and err from the current proces or any subprocess

[14:51] <jdv79_> ok, that's why i can't use perl6 in real life - just my 2 cents.

[14:51] <moritz> noted

[14:51] <arnsholt> Well, it might be possible to implement it

[14:52] <jdv79_> its not duct tapey enough yet i guess

[14:52] * moritz wouldn't know how to implement it in a portable way

[14:52] <arnsholt> Yeah, it'd probably be Rakudo/Niecza-specific

[14:53] <dalek> nqp: ce7821c | moritz++ | / (3 files):

[14:53] <dalek> nqp: Merge remote branch 'origin/bigint-type'

[14:53] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ce7821c552

[14:54] <jdv79_> my $out = Capture::Tiny { system( 'echo foo' ); }; would be vm specific?

[14:54] <arnsholt> ATM

[14:54] <jdv79_> ah

[14:54] <arnsholt> Due to what is implemented and not

[14:55] *** Woodi left
[14:55] <dalek> rakudo/nom: 5c64344 | moritz++ | / (4 files):

[14:55] <dalek> rakudo/nom: switch to new bigint API

[14:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5c6434405a

[14:55] <dalek> rakudo/nom: 8e66366 | moritz++ | src/core/Main.pm:

[14:55] <dalek> rakudo/nom: ugly hack to unb0rk MAIN_HELPER

[14:55] <arnsholt> So you'd probably have to do a bit of hackery to do the stream manipulation

[14:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8e663668e1

[14:55] <dalek> rakudo/nom: 1b1cf94 | moritz++ | / (5 files):

[14:55] <dalek> rakudo/nom: Merge branch 'bigint-type' into nom

[14:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1b1cf9442b

[14:55] <dalek> rakudo/nom: 645fd3e | moritz++ | tools/build/NQP_REVISION:

[14:55] <dalek> rakudo/nom: bump to an NQP revision with new bigint API

[14:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/645fd3ea6b

[14:55] <dalek> rakudo/nom: 435334f | moritz++ | src/ (2 files):

[14:55] <dalek> rakudo/nom: Merge branch 'nom' of git://github.com/rakudo/rakudo into nom

[14:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/435334f591

[14:55] <moritz> sorry for the bit noisy double-merge

[14:55] <moritz> I should have done a pull --rebase first

[14:56] <arnsholt> I think we'll survive =)

[14:56] *** araujo joined
[14:56] *** araujo left
[14:56] *** araujo joined
[14:57] <dalek> rakudo/nom: 01c488c | moritz++ | src/core/Any.pm:

[14:57] <dalek> rakudo/nom: unbork error message in hash slice binding, kboga++

[14:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/01c488cc44

[14:58] *** packetknife joined
[14:58] <moritz> evalbot rebuild nom

[14:58] <p6eval> OK (started asynchronously)

[14:58] *** xinming_ joined
[15:01] <dalek> zavolaj: bee23d5 | jnthn++ | t/02-simple-args (4 files):

[15:01] <dalek> zavolaj: Test file 2 will just be for args; add tests for float, double and string passing.

[15:01] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/bee23d5a7d

[15:02] *** xinming left
[15:03] <flussence> perl6: https://gist.github.com/1606837

[15:04] <p6eval> rakudo 45c44b: OUTPUT«def␤abc␤␤»

[15:04] <p6eval> ..niecza v13-243-ga6fc7ac: OUTPUT«abc␤def␤␤»

[15:04] <p6eval> ..pugs b927740: OUTPUT«abc␤*** No such method in class Scalar: "&buf"␤    at /tmp/IvJJ0nwddM line 12, column 12-21␤»

[15:06] <[Coke]> Unless there's a big jump from rakudo in the past day, niecza is now over 99%.

[15:06] *** birdwindupbird left
[15:06] <[Coke]> (rakudo only on makes it into S06 before niecza finishes, will take a little while to get the final numbers.)

[15:07] <dalek> Rebuild of nom complete.

[15:08] <moritz> nom: my %h = a => 1, b => 2; %h<a b> := (4, 5)

[15:08] <p6eval> nom 45c44b: OUTPUT«Null PMC access in get_pmc_keyed_str()␤  in method postcircumfix:<{ }> at src/gen/CORE.setting:1175␤  in method postcircumfix:<{ }> at src/gen/CORE.setting:1165␤  in block <anon> at /tmp/hEUk_khPus:1␤  in <anon> at /tmp/hEUk_khPus:1␤»

[15:08] <moritz> huh.

[15:10] <moritz> ah, still not on latest nom

[15:11] *** leprevost_ joined
[15:13] *** xinming_ left
[15:14] *** leprevost left
[15:14] <moritz> now it says  Cannot bind to a hash slice

[15:14] <moritz> as it should

[15:14] <moritz> jnthn++ kboga++

[15:15] <jnthn> \o/

[15:17] <dalek> roast: 8014b12 | moritz++ | S03-operators/binding-hashes.t:

[15:17] <dalek> roast: RT #108160

[15:17] <dalek> roast: review: https://github.com/perl6/roast/commit/8014b12dbf

[15:17] *** Woodi joined
[15:17] *** JimmyZ joined
[15:18] <dalek> zavolaj: 64ca08b | jnthn++ | lib/NativeCall.pm6:

[15:18] <dalek> zavolaj: Fix sized int/num returns.

[15:18] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/64ca08bd3b

[15:18] <dalek> zavolaj: beb2796 | jnthn++ | t/03-simple-returns. (2 files):

[15:18] <dalek> zavolaj: Tests for returning int/num/string types.

[15:18] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/beb27967dc

[15:24] *** GlitchMr42 joined
[15:24] *** GlitchMr left
[15:24] *** GlitchMr42 is now known as GlitchMr

[15:25] *** wtw left
[15:25] *** LlamaRider joined
[15:25] <[Coke]> https://gist.github.com/1476841  01/13/2012 - niecza at 98.47% - there were some rakudo gains since yesterday.

[15:25] <masak> aw :)

[15:26] <masak> go Niecza go Rakudo

[15:26] <masak> give us a show!

[15:27] <[Coke]> still, the numbers are trending up.

[15:31] <dalek> roast: 07b5ab2 | coke++ | S05-interpolation/regex-in-variable.t:

[15:31] <dalek> roast: fudge for niecza

[15:31] <dalek> roast: review: https://github.com/perl6/roast/commit/07b5ab2f13

[15:32] <dalek> niecza: 90c0e5c | coke++ | t/spectest.data:

[15:32] <dalek> niecza: run S05-interpolation/regex-in-variable.t

[15:32] <dalek> niecza: review: https://github.com/sorear/niecza/commit/90c0e5cab9

[15:33] <[Coke]> There's another 27;

[15:35] <[Coke]> t/spec/S29-context/die.t seems to suffer from the "eval no longer catches" bug.

[15:36] <dalek> zavolaj: 6424f48 | jnthn++ | lib/NativeCall.pm6:

[15:36] <dalek> zavolaj: Unbust voids.

[15:36] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/6424f48fd8

[15:36] <dalek> zavolaj: dd2d02b | jnthn++ | t/04-pointers. (2 files):

[15:36] <dalek> zavolaj: Tests for OpaquePointer.

[15:36] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/dd2d02bc59

[15:39] <dalek> roast: f693e93 | coke++ | S29-context/die.t:

[15:39] <dalek> roast: niecza fudge

[15:39] <dalek> roast: review: https://github.com/perl6/roast/commit/f693e93df7

[15:40] <dalek> niecza: 45c7a3c | coke++ | t/spectest.data:

[15:40] <dalek> niecza: run S29-context/die.t

[15:40] <dalek> niecza: review: https://github.com/sorear/niecza/commit/45c7a3c76c

[15:41] <[Coke]> 12 more.

[15:42] *** RobiX joined
[15:44] *** alester joined
[15:45] <[Coke]> colomon: 60 more tests to get us to 99%. ;)

[15:46] *** xinming joined
[15:46] <jnthn> Niecza is the 99%

[15:46] <jnthn> ;)

[15:46] <jnthn> .oO( Yapsi is the 1% )

[15:47] <masak> hey, Yapsi creates jobs!

[15:48] <jnthn> Yeah, but it should be paying more tax!

[15:49] * [Coke] ponders adding pugs to the list.

[15:49] *** RobiX left
[15:49] <[Coke]> eh. too much work for now.

[15:50] <slavik> [Coke]: what list?

[15:51] <[Coke]> https://gist.github.com/1476841

[15:51] <cognominal> masak++ # at least for you :)

[15:51] <masak> not for quite some time now, though.

[15:51] <masak> too much $work :)

[15:51] * masak <-- a dull boy

[15:52] <cognominal> 99% of what?  http://perl6.org/compilers/features does not fare as good in that chart

[15:53] <[Coke]> cognominal: niecza is close to passing 99% of the number of spec tests that rakudo passes.

[15:53] *** xinming left
[15:53] <[Coke]> no info has yet been compiled about which portions of the spec test suite fare better under which compiler.

[15:53] <masak> that would be highly interesting.

[15:53] * jnthn would like that too

[15:54] <masak> as a complement to the feature matrix, that is.

[15:54] *** xinming joined
[15:54] <[Coke]> I can easily do this at the "SYN" level, as that information is already summarized.

[15:55] <[Coke]> Is that sufficient for your needs, or do you need test-level granularity?

[15:59] *** LlamaRider left
[15:59] <jnthn> [Coke]: Both are interesting, but the first is certainly a helpful start.

[16:01] <colomon> [Coke]: hey, there's an interesting stat.  Niecza now passes as many tests as Rakudo did two weeks ago today.

[16:03] <masak> test file granularity would be interesting too. and perhaps easier to process.

[16:04] *** thou joined
[16:04] *** cognominal left
[16:05] *** cognominal joined
[16:05] *** leprevost_ left
[16:07] *** zipf joined
[16:08] *** Trashlord left
[16:11] <[Coke]> here's a one off on the numbers in the gist:

[16:11] <[Coke]> https://docs.google.com/a/coleda.com/leaf?id=0Bxm1zTZwW0VHODI0MWEwMjMtOTNiZC00NmE4LWFmNGQtYzhkYWZmYWExYzBk&hl=en_US

[16:13] <colomon> ooo, very interesting

[16:13] <colomon> [Coke]++

[16:14] *** zipf left
[16:14] *** sayu joined
[16:14] *** MayDaniel joined
[16:14] <masak> [Coke]++ # nice!

[16:15] <jnthn> Meh. Rakudo is quite behind on regex stuff.

[16:15] <[Coke]> I can probably automate that a bit. (that's a screen grab of excel.)

[16:15] <masak> Niecza is in the lead with S02..S05, and integration.

[16:16] <[Coke]> and S24, though that's not at all obvious. (niecza has 1 test there, rakudo, 0)

[16:17] <masak> hah! :)

[16:17] <masak> oh, the testing synopsis.

[16:17] <tadzik> hello #perl6

[16:18] <jnthn> o/ tadzik 

[16:19] * [Coke] will see about making that more automatable if folks enjoy that sort of thing.

[16:20] *** ggoebel left
[16:24] *** packetkn_ joined
[16:25] *** packetknife left
[16:25] *** ggoebel joined
[16:26] *** packetkn_ left
[16:26] *** daxim left
[16:30] *** kmwallio joined
[16:34] <[Coke]> Here's a non-snapshot version with a google doc:

[16:34] <[Coke]> https://docs.google.com/spreadsheet/ccc?key=0Ahm1zTZwW0VHdE1NN19GdE1fTmZZYnpGdURFM1A0cHc

[16:35] <[Coke]> (click on the Chart tab to see the image.)

[16:36] <[Coke]> that, I can just paste in the results of test_summary

[16:38] *** GlitchMr left
[16:40] <dalek> roast: de7a72e | moritz++ | S02-types/sigils-and-types.t:

[16:40] <dalek> roast: RT #74654

[16:40] <dalek> roast: review: https://github.com/perl6/roast/commit/de7a72e4c3

[16:41] *** MayDaniel left
[16:45] *** icwiener joined
[16:46] *** JimmyZ left
[16:48] <masak> o/ tadzik 

[16:50] *** kaare_ joined
[16:54] *** hundskatt left
[17:03] <dalek> roast: 8d772aa | moritz++ | S06-signature/positional-placeholders.t:

[17:03] <dalek> roast: RT #73688, invocable positional placeholder

[17:03] <dalek> roast: review: https://github.com/perl6/roast/commit/8d772aa9c4

[17:06] *** snearch left
[17:06] *** mj41 left
[17:28] <[Coke]> quiet in here today.

[17:29] * jnthn is quietly hacking on nativecall stuff

[17:31] * colomon is trying to get some $work done, after spending all morning cleaning the house, shoveling the driveway, and watching his father-in-law fix the snowblower.

[17:31] * masak is writing a Perl course for $work

[17:32] <masak> colomon: you have snow? nice.

[17:32] <colomon> Finally!

[17:32] <masak> colomon: we just have darkness, some rain, and wind.

[17:32] <colomon> Good solid four inches overnight, first time the grass has been completely covered this season.

[17:32] *** REPLeffect left
[17:32] <masak> \o/

[17:32] <colomon> it's really pretty outside here atm

[17:33] * jnthn wants snow!

[17:33] <jnthn> Even Stockholm didn't have any.

[17:34] <colomon> If I can get enough $work done, I'm going to go cross counter skiing in a few hours.

[17:34] *** REPLeffect joined
[17:34] <jnthn> nice!

[17:36] * masak a bit jealous, and surprised at this

[17:37] <colomon> *country

[17:40] *** kaleem joined
[17:43] *** MayDaniel joined
[17:46] *** wolfman2000 left
[17:50] *** spine_ left
[17:50] *** sayu left
[17:54] *** xinming left
[17:56] *** MayDaniel left
[17:59] <colomon> niecza: my %h = a => 1, b => 2; %h<a b> := (4, 5); say %h.perl

[17:59] <p6eval> niecza v13-243-ga6fc7ac: OUTPUT«{"a" => 1, "a b" => $(4, 5), "b" => 2}.hash␤»

[18:00] <colomon> !!

[18:00] *** Chillance joined
[18:02] <jnthn> oops!

[18:02] <jnthn> nom: my %h = a => 1, b => 2; %h<a b> := (4, 5); say %h.perl

[18:02] <p6eval> nom 01c488: OUTPUT«Cannot bind to a hash slice␤  in method postcircumfix:<{ }> at src/gen/CORE.setting:1178␤  in block <anon> at /tmp/5JGoPpB_SN:1␤  in <anon> at /tmp/5JGoPpB_SN:1␤»

[18:03] <colomon> niecza: my %h = a => 1, b => 2; %h{"a", "b"}> := (4, 5); say %h.perl

[18:03] <p6eval> niecza v13-243-ga6fc7ac: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Preceding context expects a term, but found infix := instead at /tmp/LtclDzH9Zt line 1:␤------> [32mmy %h = a => 1, b => 2; %h{"a", "b"}> [33m⏏[31m:= (4, 5); say %h.perl[0m␤␤Parse failed␤␤»

[18:03] <colomon> niecza: my %h = a => 1, b => 2; %h{"a", "b"} := (4, 5); say %h.perl

[18:03] <p6eval> niecza v13-243-ga6fc7ac: OUTPUT«{"a" => 1, "a b" => $(4, 5), "b" => 2}.hash␤»

[18:04] <colomon> stubborn bug!

[18:05] <dalek> roast: 3be949a | (Solomon Foster)++ | S0 (3 files):

[18:05] <dalek> roast: Refudge for niecza.

[18:05] <dalek> roast: review: https://github.com/perl6/roast/commit/3be949a253

[18:07] <cognominal> given a method and its arguments (a capture), what is the way to get the slected method signature instead of calling it?

[18:08] *** simcop2387_ joined
[18:09] *** simcop2387 left
[18:09] *** simcop2387_ is now known as simcop2387

[18:10] <sorear> good * #perl6

[18:10] <phenny> sorear: 14:30Z <[Coke]> tell sorear I skipped the last test in S06-multi/syntax.t because it was hanging; let me know if you want a ticket opened.

[18:11] <colomon> o/

[18:13] *** pyrimidine joined
[18:14] *** pyrimidine left
[18:15] *** pyrimidine joined
[18:16] *** GlitchMr joined
[18:17] <sorear> nom: my @x; @x[1,2] := (3,4)

[18:17] <p6eval> nom 01c488:  ( no output )

[18:17] <sorear> nom: my @x; @x[1,2] := (3,4); say @x.perl

[18:17] <p6eval> nom 01c488: OUTPUT«Array.new()␤»

[18:18] <jnthn> Didn't do arrays yet.

[18:18] <jnthn> Well

[18:18] <jnthn> Half did them :)

[18:20] <dalek> nqp: cec7bc0 | jnthn++ | src/ (2 files):

[18:20] <dalek> nqp: Ops for object case of positional REPR API.

[18:20] <dalek> nqp: review: https://github.com/perl6/nqp/commit/cec7bc0214

[18:20] <dalek> nqp: 427aa42 | jnthn++ | src/ops/nqp.ops:

[18:20] <dalek> nqp: Add missing write barrier.

[18:20] <dalek> nqp: review: https://github.com/perl6/nqp/commit/427aa42087

[18:20] <dalek> nqp: c8c19e4 | jnthn++ | src/6model/reprs/CArray. (2 files):

[18:20] <dalek> nqp: Basic support for arrays of strings, and groundwork for arrays of other C thingies.

[18:20] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c8c19e472d

[18:20] <dalek> zavolaj: f2f21b1 | jnthn++ | t/05-arrays. (2 files):

[18:20] <dalek> zavolaj: Tests for passing/returning array of doubles.

[18:20] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/f2f21b1f03

[18:20] <dalek> zavolaj: 731f841 | jnthn++ | lib/NativeCall.pm6:

[18:20] <dalek> zavolaj: NativeCall library additions to prepare for arrays of strings.

[18:20] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/731f841208

[18:20] <dalek> zavolaj: 6437bbb | jnthn++ | t/05-arrays. (2 files):

[18:20] <dalek> zavolaj: Tests for passing and returning arrays of strings.

[18:20] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/6437bbb8f4

[18:21] <dalek> niecza: 1ae3990 | sorear++ | lib/Kernel.cs:

[18:21] <dalek> niecza: Carp when binding hash slices, colomon++

[18:21] <dalek> niecza: review: https://github.com/sorear/niecza/commit/1ae3990d94

[18:21] <sorear> o/ GlitchMr

[18:21] <colomon> aw, I was just looking at a failing test

[18:21] <GlitchMr> Hi, sorear 

[18:22] <sorear> niecza: my $f = anon sub fib($x) { $x < 2 ?? 1 !! fib($x-1)+fib($x-2) }; say $f(5)

[18:22] <p6eval> niecza v13-243-ga6fc7ac: OUTPUT«8␤»

[18:23] <sorear> Thanks for bringing the Javascript feature to our attention, I thought it would make a great addition :>

[18:23] <GlitchMr> sorear, which JavaScript feature?

[18:23] <GlitchMr> That weird feature?

[18:24] <GlitchMr> named anonymous functions?

[18:24] <jnthn> niecza: my $f = anon sub fib($x) { sub fib() { }; $x < 2 ?? 1 !! fib($x-1)+fib($x-2) }; say $f(5)

[18:24] <p6eval> niecza v13-243-ga6fc7ac: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Illegal redeclaration of routine 'fib' (see line 1) at /tmp/si5E9GGcBJ line 1:␤------> [32mmy $f = anon sub fib($x) { sub fib[33m⏏[31m() { }; $x < 2 ?? 1 !! fib($x-1)+fib($x-[0m␤␤Unhandled exception: Check failed␤␤  at …

[18:25] <sorear> GlitchMr: yeah, the one you were talking about the other day

[18:25] <GlitchMr> Yeah, I was finding it weird

[18:26] <jnthn> OK, NativeCall on nom now does everything that NativeCall on ng did, plus much more. :) Time for shopping and dinner. :)

[18:28] <colomon> jnthn++

[18:28] <GlitchMr> Hopefully Perl 6 will not implement everything what is possible. I wouldn't want to see anonymous classes and next day anonymous named classes. (and third day anonymous named global local classes)\

[18:29] <dalek> roast: b097088 | (Solomon Foster)++ | S03-operators/binding-hashes.t:

[18:29] <dalek> roast: Unfudge now-working test.

[18:29] <dalek> roast: review: https://github.com/perl6/roast/commit/b097088c94

[18:29] <jnthn> nom: say (anon class OhLook { }).^name

[18:29] <p6eval> nom 01c488: OUTPUT«OhLook␤»

[18:29] <[Coke]> colomon: one? you need to go faster! ;)

[18:30] <GlitchMr> ... we have those already O_o

[18:31] <jnthn> ok, really afk for a bit :)

[18:32] *** ksi joined
[18:33] *** zhangkaizhao left
[18:44] *** MayDaniel joined
[18:55] <kboga> hey rakudo dev's, I've just opened a pull request to support "binding to array elements": https://github.com/kboga/rakudo/pull/1 (Could anyone take a look at it and tell me what I did wrong? :P)

[18:56] <kboga> oops, pull request to the wrong repo... sec

[18:57] <[Coke]> kboga: what's with the commented out code?\

[18:57] <kboga> yea, i wonder too, uncommented out it makes the multidispatcher unhappy

[18:57] <[Coke]> I mean, why not just remove it?

[18:58] <kboga> because, I want it uncommented out, since that would give us better error messages

[18:59] <kboga> the multidispatcher doesn't like it and I'm curious why, so i thought i'd leave it in and ask here why it happens

[18:59] <kboga> but yea, this is the proper pull request: https://github.com/rakudo/rakudo/pull/53

[19:00] <[Coke]> heh. you say that, my phone flashes "kboga".

[19:02] *** MayDaniel left
[19:05] <kboga> I suppose jnthn might know what is happening with this multidispatch related error when uncommenting out those multi-candidates?

[19:08] *** araujo left
[19:09] *** araujo joined
[19:10] <[Coke]> more likely than me, yes.

[19:10] <jnthn> kboga: I'm guessing it may be related to https://rt.perl.org/rt3/Ticket/Display.html?id=107638 - I didn't get around to looking into that one yet.

[19:11] <sorear> o/ jnthn

[19:11] <jnthn> kboga: The patch is probably right otherwise though.

[19:11] <jnthn> o/ sorear 

[19:11] <kboga> jnthn: cool :)

[19:13] <moritz> should I apply it, including the commented out code?

[19:15] <jnthn> moritz: If you wish

[19:15] * moritz is annoyed by the S03-operator/binding-*.t test files. Somebody could rename them to just S03-binding/*.t

[19:16] * jnthn mostly concentrating on cooking at the moment :)

[19:17] <kboga> jnthn: enjoy your meal!

[19:23] *** fridim joined
[19:26] *** pomysl left
[19:26] *** GlitchMr left
[19:26] *** pomysl joined
[19:26] *** pomysl left
[19:26] *** pomysl joined
[19:31] <dalek> rakudo/nom: dadd463 | kboga++ | / (3 files):

[19:31] <dalek> rakudo/nom: Support binding of array elements

[19:31] <dalek> rakudo/nom: 

[19:31] <dalek> rakudo/nom: Also runs the new binding-nested.t file.

[19:31] <dalek> rakudo/nom: 

[19:31] <dalek> rakudo/nom: Signed-off-by: Moritz Lenz [email@hidden.address]
[19:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dadd46373c

[19:31] <moritz> kboga: I've squashed in commit that adds that test file to t/spectest.data, otherwise it's your commit unchanged

[19:32] *** am0c joined
[19:33] <kboga> moritz: thanks

[19:49] <[Coke]> argh, stop adding tests. ;)

[19:50] *** Trashlord joined
[19:53] <jnthn> omnomnom :)

[20:03] <moritz> speaking of tests...

[20:03] <dalek> roast: cd9065c | moritz++ | S03-operators/binding-arrays.t:

[20:03] <dalek> roast: rakudo unfudges

[20:03] <dalek> roast: review: https://github.com/perl6/roast/commit/cd9065cb64

[20:03] <[Coke]> O_o

[20:05] <colomon> niecza: my @o = 1..5; say (@o>>.?not_here).perl

[20:05] <p6eval> niecza v13-246-g1ae3990: OUTPUT«[Nil, Nil, Nil, Nil, Nil].list␤»

[20:06] <colomon> niecza: my @o = 1..5; say (@o>>.?not_here).join(", ")

[20:06] <p6eval> niecza v13-246-g1ae3990: OUTPUT«, , , , ␤»

[20:06] <kboga> looks like my patch wasn't perfect, something is still awry =/

[20:06] <[Coke]> nom:"O".ord.say

[20:07] <[Coke]> nom: "O".ord.say

[20:07] <p6eval> nom dadd46: OUTPUT«79␤»

[20:08] <jnthn> kboga: How so?

[20:08] <jnthn> kboga: Just about to look at the multi-dispatch ticket

[20:09] <kboga> I'm not sure, it looks like weird interaction between assignment and binding or maybe off-by-one

[20:10] *** MayDaniel joined
[20:15] <kboga> omg, all the self.gimme's need $pos + 1 as parameter instead of $pos, dunno why tho...

[20:17] <jnthn> kboga: 'cus it's the number of elements to reify, not the index to reify up to.

[20:17] <kboga> oooh that makes sense :)

[20:18] <kboga> uhm, well with that change all tests but the delete related (todo'd) should pass

[20:19] <kboga> in S03-operators/binding-arrays.t, that is

[20:20] *** kmwallio left
[20:25] <jnthn> kboga: Got a pull request for that change?

[20:26] <kboga> in a sec

[20:27] *** birdwindupbird joined
[20:30] *** birdwind1pbird joined
[20:31] *** birdwindupbird left
[20:31] *** birdwind1pbird left
[20:31] *** birdwind1pbird joined
[20:32] <dalek> roast: 8513e82 | (Solomon Foster)++ | S12-methods/parallel-dispatch.t:

[20:32] <dalek> roast: Rewrite some tests so they no longer depend on is_deeply.  Fudge for niecza.

[20:32] <dalek> roast: review: https://github.com/perl6/roast/commit/8513e82381

[20:33] <dalek> niecza: f49fadb | (Solomon Foster)++ | t/spectest.data:

[20:33] <dalek> niecza: Turn on S12-methods/parallel-dispatch.t.

[20:33] <dalek> niecza: review: https://github.com/sorear/niecza/commit/f49fadb481

[20:33] <[Coke]> \o/!

[20:38] *** birdwind1pbird left
[20:39] <kboga> there we go: https://github.com/rakudo/rakudo/pull/54

[20:39] * kboga always ends up making a new fork and wonders how it should really be done

[20:40] *** birdwindupbird joined
[20:41] <dalek> rakudo/nom: 8550c4e | kboga++ | src/core/Array.pm:

[20:41] <dalek> rakudo/nom: Fix array element binding's off by one error introduced in dadd463

[20:41] <dalek> rakudo/nom: 

[20:41] <dalek> rakudo/nom: The wise jnthn++ spoke: "cus it's the number of elements to reify, not the index to reify up to"

[20:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8550c4eb92

[20:41] <dalek> rakudo/nom: cb1c756 | jonathan++ | src/core/Array.pm:

[20:41] <dalek> rakudo/nom: Merge pull request #54 from kboga/array-element-binding-gimme-obione

[20:41] <dalek> rakudo/nom: 

[20:41] <dalek> rakudo/nom: Fix array element binding's off by one error introduced in dadd463

[20:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cb1c75698e

[20:44] *** kaare_ left
[20:45] *** Trashlord left
[20:50] *** kaleem left
[20:53] *** dan joined
[20:54] *** dan is now known as Guest52883

[20:56] <dalek> roast: feccc1a | (Solomon Foster)++ | S12-methods/multi.t:

[20:56] <dalek> roast: Partial fudging for niecza.

[20:56] <dalek> roast: review: https://github.com/perl6/roast/commit/feccc1a3a7

[20:57] <Guest52883> hello, i suppose sm people here know some assembly (ok i could not find irc for assem)..  i have a line like this: fstp qword ptr[ebx+000007c0] i need the value stored to that address (ebx+000007c0) to be set to something else, say 123456, is there an easy way to do that?

[20:59] <dalek> roast: 52ac90c | kboga++ | S03-operators/binding-arrays.t:

[20:59] <dalek> roast: un-fudge&-todo tests after 8550c4e

[20:59] <dalek> roast: review: https://github.com/perl6/roast/commit/52ac90ccd1

[21:01] <sorear> Guest52883: sounds like an XY problem to me

[21:02] <Guest52883> sorear: am 15 can you explain more a little please?

[21:02] <sorear> Guest52883: it sounds like you had one problem, then you tried to fix it, and now you're in way over your head

[21:02] <sorear> it would be easier if you could go back to your original problem

[21:04] <Guest52883> sorear: no this is no problem i just need to edit this line so it stores something else instead of what is already set in top of stack 

[21:05] <colomon> sorear: I pushed my partial fudge of S12-methods/multi.t so you could take a look at the test that is failing now.  It's either a nasty hole in niecza's role support or a very broken test....

[21:05] <sorear> http://meta.stackoverflow.com/questions/66377/what-is-the-xy-problem

[21:06] *** bluescreen10 left
[21:07] <sorear> Guest52883: I am extremely amazed that whoever is teaching you did FSTP before MOV

[21:07] <masak> Guest52883: what is it that you're building?

[21:08] <sorear> Guest52883: but, eh, now that I know you're not trying to cheat on freshman college homework

[21:08] <sorear> Guest52883: mov qword ptr [ebx+0x7c0], 123456

[21:08] <Guest52883> sorear: you saved my live :(

[21:08] <sorear> seriously, wtf at your teacher

[21:09] <sorear> mov should have been the first thing they went over

[21:11] <Guest52883> is saying mov qword ptr [ebx+0x7c0], 9687225 is not valid command sorear 

[21:12] <sorear> maybe your assembler doesn't like the 0x

[21:12] <sorear> I mostly used nasm when I was 15, and I mostly haven't touched assembly since

[21:12] <dalek> rakudo/nom: bb10869 | jnthn++ | tools/build/NQP_REVISION:

[21:12] <dalek> rakudo/nom: Bump to latest NQP, with various native calling improvements.

[21:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bb10869239

[21:12] <dalek> rakudo/nom: 03bd280 | jnthn++ | src/core/Parameter.pm:

[21:12] <dalek> rakudo/nom: Don't suppress display of type on 'is parcel' parameters.

[21:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/03bd280fee

[21:12] <dalek> rakudo/nom: e3106b4 | jnthn++ | src/core/ (2 files):

[21:12] <dalek> rakudo/nom: Fix IO.WHAT.say.

[21:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e3106b4f1e

[21:12] <colomon> sorear: on examination, it looks to me like the section "multi Routines" in S12 suggests niecza is wrong on the S12-methods/multi.t issue.

[21:12] <dalek> rakudo/nom: b432fa9 | jnthn++ | src/binder/multidispatch.c:

[21:12] <dalek> rakudo/nom: Fix bug in narrowness calculation for native types.

[21:12] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b432fa9e4c

[21:12] <dalek> roast: 984611e | jnthn++ | S06-multi/type-based.t:

[21:12] <dalek> roast: Add test for RT#107638.

[21:12] <dalek> roast: review: https://github.com/perl6/roast/commit/984611e4fa

[21:14] <sorear> colomon: yeah, something's up

[21:14] <jnthn> kboga: Think b432fa9 will have solved the issue that made you have to comment out those subs; trying a build/test with them uncommented now.

[21:19] *** bluescreen10 joined
[21:20] <dalek> rakudo/nom: 125512e | jnthn++ | src/core/Any.pm:

[21:20] <dalek> rakudo/nom: Uncomment error reporting candidates for array binding by kboga++ now that the native narrowness calc bug is fixed.

[21:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/125512e27d

[21:31] *** fsergot joined
[21:37] <sorear> colomon: urk!  I just realized I've been misreading the error message all this time, and it's actually an entirely reasonable if LTA error

[21:37] <sorear> nom: role A { multi method d() { } }; class B does A { }; say B.^find_method('d')

[21:37] <p6eval> nom 125512: OUTPUT«d␤»

[21:37] <dalek> roast: 3b1a696 | kboga++ | S02-lexical-conventions/comments.t:

[21:37] <dalek> roast: fudge for rakudo

[21:37] <dalek> roast: review: https://github.com/perl6/roast/commit/3b1a69657a

[21:37] <sorear> nom: role A { multi method d() { } }; class B does A { }; say B.^find_method('d').signature.perl

[21:37] <p6eval> nom 125512: OUTPUT«:(Any, Any, Mu %_!)␤»

[21:38] <sorear> nom: role A { multi method d() { } }; class B does A { multi method e() { } }; say B.^find_method('e').signature.perl

[21:38] <p6eval> nom 125512: OUTPUT«:(Any, Any, Mu %_!)␤»

[21:38] <sorear> nom: role A { multi method d() { } }; class B does A { multi method e() { } }; say B.^find_method('e').perl

[21:38] <p6eval> nom 125512: OUTPUT«method e(Any, Any, Mu %_!) { ... }␤»

[21:38] <sorear> nom: role A { multi method d() { } }; class B does A { multi method e(Int) { } }; say B.^find_method('e').perl

[21:38] <p6eval> nom 125512: OUTPUT«method e(Any, Any, Mu %_!) { ... }␤»

[21:38] *** MayDaniel left
[21:38] <sorear> nom: role A { multi method d() { } }; class B does A { multi method e(Int) { } }; say B.^can('e').perl

[21:38] <p6eval> nom 125512: OUTPUT«(method e(Any, Any, Mu %_!) { ... },)␤»

[21:39] <sorear> nom: role A { multi method d() { } }; class B does A { multi method e(Int $x, Str $y) { } }; say B.^can('e').perl

[21:39] <jnthn> ...this signature printing is...er... :)

[21:39] <p6eval> nom 125512: OUTPUT«(method e(Any, Any, Mu %_!) { ... },)␤»

[21:39] <sorear> jnthn: what?

[21:39] <TimToady> consistent :/

[21:39] <sorear> nom: role A { method d() { } }; class B does A { multi method e(Int $x, Str $y) { } }; say B.^can('d').perl

[21:39] <p6eval> nom 125512: OUTPUT«(method d(B, Mu %_!) { ... },)␤»

[21:39] <jnthn> sorear: It's not putting in the invocant colon and other stuff.

[21:39] <sorear> that's what I was looking for

[21:40] <sorear> jnthn: (Any, Any, Mu %_!) is quite strange, I guess the fundamental weirdness of dispatchers is confusing it

[21:40] *** wolfman2000 joined
[21:40] <jnthn> sorear: Maybe but I know Signature.perl ain't right yet

[21:40] <moritz> Signature.perl is not very reliable

[21:41] <sorear> it looks like nom fudges method signatures in roles so that ::?CLASS becomes the actual class

[21:41] <jnthn> sorear: That's part of role composition.

[21:42] <sorear> I'm going to put this under the framework of "generic types are NYI", colomon

[21:42] <jnthn> It's not a "fudge", it's one of the key things that was wrong with role composition in ng that got fixed in nom.

[21:43] <jnthn> moritz: Think that S14-role/submethods.t regression was my fault. Looking into it.

[21:47] *** bkolera joined
[21:47] *** Moukeddar joined
[21:49] *** Guest52883 left
[21:50] *** birdwindupbird left
[21:52] *** birdwindupbird joined
[21:53] <kboga> passing test files for rakudo: https://github.com/rakudo/rakudo/pull/55

[21:57] *** nallar joined
[21:59] <kboga> or... must niecza first outrun rakudo in tests? ;-) (ehm, added niecza to the Perl 6 wikipedia page, because it was missing)

[21:59] <dalek> rakudo/nom: 67fc756 | kboga++ | t/spectest.data:

[21:59] <dalek> rakudo/nom: run fudged test files

[21:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/67fc756e64

[21:59] <dalek> rakudo/nom: 7d1b60c | moritz++ | t/spectest.data:

[21:59] <dalek> rakudo/nom: Merge pull request #55 from kboga/passingtests

[21:59] <dalek> rakudo/nom: 

[21:59] <dalek> rakudo/nom: run fudged test files

[21:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7d1b60c09d

[21:59] *** birdwindupbird left
[22:00] <jnthn> kboga: The main advantage of running more tests is we find out mroe quickly when something gets busted accidentally. :)

[22:01] <kboga> Bool::True

[22:03] <sorear> muahahaa.

[22:04] <sorear> kboga++ maintaining perl 6 wikipedia

[22:04] <kboga> More implementations running more tests is beneficial for all implementations, because by comparison faulty spectests can be found.

[22:04] <kboga> sorear: noooooo...... i did not just..... (its horribly outdated)

[22:06] <dalek> rakudo/nom: 7507a8c | jnthn++ | src/Perl6/Metamodel/ (4 files):

[22:06] <dalek> rakudo/nom: Fix up submethod handling in role composition.

[22:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7507a8cda2

[22:09] *** nnunley joined
[22:27] *** araujo left
[22:32] *** Ross joined
[22:33] *** nallar left
[22:34] *** tokuhirom joined
[22:36] *** nallar joined
[22:36] *** nallar left
[22:36] *** nallar joined
[22:37] *** Ross left
[22:37] <dalek> roast: 2de5711 | jnthn++ | S14-roles/submethods.t:

[22:37] <dalek> roast: Some extra submethod in role tests.

[22:37] <dalek> roast: review: https://github.com/perl6/roast/commit/2de5711f06

[22:37] <dalek> roast: 738c6c8 | jnthn++ | S03-operators/identity.t:

[22:37] <dalek> roast: Unfudge some binding tests.

[22:37] <dalek> roast: review: https://github.com/perl6/roast/commit/738c6c843c

[22:39] <dalek> roast: 1e302d7 | kboga++ | S12-methods/parallel-dispatch.t:

[22:39] <dalek> roast: untodo a passing test

[22:39] <dalek> roast: review: https://github.com/perl6/roast/commit/1e302d74b8

[22:40] <dalek> rakudo/nom: 260f803 | jnthn++ | src/Perl6/World.pm:

[22:40] <dalek> rakudo/nom: Fix obscure bug with binding to lexicals declared with signature form.

[22:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/260f803123

[22:40] <dalek> rakudo/nom: 1b20a9a | jnthn++ | t/spectest.data:

[22:40] <dalek> rakudo/nom: Run S03-operators/identity.t.

[22:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1b20a9a535

[22:43] *** snearch joined
[22:45] *** fsergot left
[22:47] *** whiteknight joined
[22:50] *** panterax left
[22:50] *** panterax joined
[22:53] *** wolfman2_ joined
[22:55] *** donri left
[22:56] *** wolfman2000 left
[22:56] *** bkolera left
[22:56] *** bluescreen10 left
[22:57] <dalek> roast: d72cc1c | kboga++ | S28-named-variables/cwd.t:

[22:57] <dalek> roast: fix spectest

[22:57] <dalek> roast: review: https://github.com/perl6/roast/commit/d72cc1ca9b

[22:58] <kboga> rakudo runs that now too

[23:02] <masak> 'night, #perl6

[23:02] *** Moukeddar left
[23:03] <kboga> night masak

[23:06] <dalek> rakudo/nom: 2c56dc9 | jnthn++ | t/spectest.data:

[23:06] <dalek> rakudo/nom: Fix a weird ordering.

[23:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2c56dc95f7

[23:06] <dalek> rakudo/nom: 066252e | jnthn++ | t/spectest.data:

[23:06] <dalek> rakudo/nom: Run S04-phasers/begin.t, which apparently was fudged for Rakudo, but never added to spectest.data.

[23:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/066252e549

[23:06] <dalek> rakudo/nom: 9493f9b | jnthn++ | t/spectest.data:

[23:06] <dalek> rakudo/nom: Turn on S28-named-variables/cwd.t (kboga++).

[23:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9493f9b7b9

[23:06] *** spine joined
[23:12] <jnthn> Hmm...if sitting at the computer starts to ache, that probably means I did enough of it for the day. :)

[23:12] <djanatyn> mi ba casnu la lojban ki'u lo nu mi fliba

[23:12] <djanatyn> errm, sorry, mischan

[23:12] <jnthn> :)

[23:13] * jnthn back tomorrow

[23:14] <kboga> good night jnthn & p6

[23:15] *** kboga left
[23:18] *** wolfman2_ left
[23:21] *** localhost left
[23:22] *** localhost joined
[23:24] *** alester left
[23:39] *** PacoAir_ joined
[23:40] *** nebuchad` joined
[23:40] *** baest_ joined
[23:40] *** nsh_ joined
[23:40] *** snearch left
[23:42] *** clkao joined
[23:42] *** wooden_ joined
[23:42] *** wooden_ left
[23:42] *** wooden_ joined
[23:43] *** overrosy_ joined
[23:43] *** orafu left
[23:43] *** orafu joined
[23:48] *** panterax left
[23:48] *** am0c left
[23:48] *** fridim left
[23:48] *** PacoAir left
[23:48] *** mtk left
[23:48] *** cooper left
[23:48] *** nsh left
[23:48] *** clkao_ left
[23:48] *** overrosy left
[23:48] *** jakky left
[23:48] *** nebuchadnezzar left
[23:48] *** baest left
[23:48] *** japhb left
[23:48] *** wooden left
[23:48] *** PacoAir_ is now known as PacoAir

[23:52] *** fridim joined
[23:52] *** jakky joined
[23:52] *** am0c joined
[23:52] *** panterax joined
[23:53] *** japhb joined
[23:53] *** cooper joined
[23:53] *** mtk joined
[23:54] *** am0c is now known as Guest91403

[23:56] *** spine left
