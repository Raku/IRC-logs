[00:07] <diakopter> jeffreykegler: you're right; S03 explicitly says that's a syntax error

[00:08] <diakopter> std: my $x = 1 ;  say  42 ?? $x = 43 !! $x = 44

[00:08] <p6eval> std 235f71b: OUTPUT«===SORRY!===␤Precedence of = is too loose to use between ?? and !!; please use parens around inner expression at /tmp/aQYhWXB4eP line 1:␤------> my $x = 1 ;  say  42 ?? $x =⏏ 43 !! $x = 44␤Parse failed␤FAILED 00:00 43m␤»…

[00:09] <jeffreykegler> Yeah.  I'm looking into ternaries from a parsing point of view.

[00:09] <jeffreykegler> The Perl 6 standard diverges from Perl 5 and C in NOT allowed an assignment as the middle term

[00:09] <jeffreykegler> *allowed => allowing

[00:10] <jeffreykegler> A fact well known, I am sure, to at least some of the authors of S03

[00:12] <jeffreykegler> And my guess is that Perl 6 was intended to break from the tradition in parsing the middle term of ternaries

[00:13] <japhb> std: my $x = 1 ;  say  $x = 42 ?? 43 !! 44;   say 42 ?? ($x = 43) !! ($x = 44)

[00:13] <p6eval> std 235f71b: OUTPUT«ok 00:00 43m␤»

[00:13] *** Guest5491 joined
[00:13] *** Guest5491 left
[00:13] <japhb> jeffreykegler, note that both of the above work ^^

[00:14] <jeffreykegler> Noted

[00:15] *** ObseLeTe joined
[00:28] *** drbean left
[00:39] *** ObseLeTe left
[00:41] *** ObseLeTe joined
[00:41] <dalek> panda: 2e350d1 | (Geoffrey Broadwell)++ | TODO:

[00:41] <dalek> panda: Greatly expand TODO with tadzik++ geoffb++ sirrobert++ #perl6 discussions of last couple days

[00:41] <dalek> panda: review: https://github.com/tadzik/panda/commit/2e350d1f6f

[00:46] *** HarryS joined
[01:01] *** spider-mario left
[01:17] *** dayangkun joined
[01:29] *** dayangkun left
[01:34] *** ObseLeTe left
[01:34] *** ObseLeTe joined
[01:50] *** ObseLeTe left
[02:05] *** Guest12385 left
[02:13] <diakopter> p6: die "wut."

[02:13] <p6eval> rakudo 48e5e4: OUTPUT«wut.␤  in block  at /tmp/0HmMDA_Cix:1␤␤»

[02:13] <p6eval> ..niecza v19-21-gc86e8e5: OUTPUT«Unhandled exception: wut.␤  at /home/p6eval/niecza/lib/CORE.setting line 1414 (die @ 5) ␤  at /tmp/isIvdN3qtp line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3929 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3930 (module…

[02:40] *** jaldhar joined
[02:41] *** orafu left
[02:41] *** orafu joined
[02:50] *** leprevost joined
[03:14] *** cognominal left
[03:14] *** tokuhiro_ joined
[03:26] *** mattp_ left
[03:27] *** [particle] left
[03:46] *** thelazydeveloper left
[03:50] *** cognominal joined
[04:04] *** benabik joined
[04:18] *** jaldhar left
[04:18] *** jaldhar joined
[04:27] *** birdwindupbird joined
[04:29] *** kaare_ joined
[04:32] *** [particle] joined
[04:45] *** Khisanth left
[04:58] *** Khisanth joined
[05:08] <benabik> Is there some fundamental difference between $foo and \foo parameters?

[05:09] <benabik> It's strange to see so much perl code without $ on the variables...

[05:17] <japhb> benabik, the \foo does not imply a context.  It means "whatever this thing is, pass it through".

[05:18] <japhb> $ treats the parameter as a scalar

[05:19] <benabik> So it's somehow more generic than $?  Or does the compiler do/not do something for it?

[05:20] <dalek> doc: b538abe | moritz++ | lib/X/ (6 files):

[05:20] <dalek> doc: more exception classes

[05:20] <dalek> doc: review: https://github.com/perl6/doc/commit/b538abed61

[05:20] <dalek> doc: 5698d53 | moritz++ | lib/ObjAt.pod:

[05:20] <dalek> doc: stub ObjAt documentation

[05:20] <dalek> doc: review: https://github.com/perl6/doc/commit/5698d535ea

[05:20] <dalek> doc: 13d7f52 | moritz++ | lib/X/Comp.pod:

[05:20] <dalek> doc: some more X::Comp notes

[05:20] <dalek> doc: review: https://github.com/perl6/doc/commit/13d7f52e6d

[05:21] <dalek> doc: 3e51487 | moritz++ | lib/ (2 files):

[05:21] <dalek> doc: X::Placeholder::Mailine. Explain "mainline" in the glossary

[05:21] <dalek> doc: review: https://github.com/perl6/doc/commit/3e514877d8

[05:21] <dalek> doc: f308c62 | moritz++ | lib/X/ (10 files):

[05:21] <dalek> doc: document more exception classes

[05:21] <dalek> doc: review: https://github.com/perl6/doc/commit/f308c62248

[05:21] <dalek> doc: ae41ef8 | moritz++ | lib/operators.pod:

[05:21] <dalek> doc: [operators] describe some circumfix and postcircumfixes

[05:21] <dalek> doc: review: https://github.com/perl6/doc/commit/ae41ef8a17

[05:21] <japhb> It is in a sense more generic, yes.

[05:22] <japhb> In this case, you could almost consider the \ to be a sigil in the sense that Mu is a type.  Both imply the absolute minimum they can about a variable or object, respectively.

[05:23] <japhb> And in answer to the question about whether the compiler does not do something, I believe you are correct -- sufficiently so that a \ parameter is faster than a $ parameter in Rakudo.

[05:24] * benabik wonders if  params and variables will become normal usage...

[05:25] <moritz> \ parameters bind whatever was passed to them, be it value or container

[05:25] <moritz> a normal $ parameter always creates a ro-container

[05:26] <benabik> :(\foo) is to :($foo) as := is to = ?

[05:26] <benabik> japhb++ moritz++

[05:27] <moritz> benabik: not really. :($foo) implies read-onlyness of $foo

[05:41] *** benabik left
[05:46] *** jeffreykegler left
[05:48] *** benabik joined
[05:51] *** leprevost left
[05:52] *** mathw left
[06:07] *** mattp_ joined
[06:08] *** JimmyZ_ joined
[06:08] <JimmyZ_> moritz: hello

[06:08] <JimmyZ_> moritz: http://irclog.perlgeek.de/parrot/2012-08-17#i_5904334, FYI

[06:09] *** gongyiliao joined
[06:29] <tadzik> good morning

[06:45] *** tokuhiro_ left
[06:54] <diakopter> jnthn: pong

[07:01] *** thou left
[07:12] *** SamuraiJack joined
[07:15] *** tarch joined
[07:15] *** tarch left
[07:24] <moritz> JimmyZ_: thanks

[07:33] <jnthn> morning, #perl6

[07:33] <tadzik> oh hai

[07:34] <jnthn> tadzik: How goes the winderspanda? :)

[07:34] <moritz> "winder is coming" -- Ned Stark

[07:35] <tadzik> jnthn: nah, no way to work on it now; I'm now sober again

[07:41] <jnthn> There Will Be Alcohol.

[07:43] <dalek> rakudo/parrot-iocleanup1-take2: 942e670 | moritz++ | src/core/IO/Socket/INET.pm:

[07:43] <dalek> rakudo/parrot-iocleanup1-take2: explicitly set encoding on sockets

[07:43] <dalek> rakudo/parrot-iocleanup1-take2: review: https://github.com/rakudo/rakudo/commit/942e670caf

[07:43] <dalek> rakudo/parrot-iocleanup1-take2: 7090070 | moritz++ | src/core/IO/Socket.pm:

[07:43] <dalek> rakudo/parrot-iocleanup1-take2: Do not trans_encoding in IO::Socket.recv

[07:43] <dalek> rakudo/parrot-iocleanup1-take2: review: https://github.com/rakudo/rakudo/commit/709007078e

[07:49] <jnthn> tadzik: Hmm...concatenating stuff with cwd() here doesn't seem to show the problem we were seeing last night

[07:49] <jnthn> tadzik: Was there some other ingredient that I'm missing?

[07:54] <jnthn> std: m:P5/./

[07:54] <p6eval> std 235f71b: OUTPUT«ok 00:00 47m␤»

[07:54] <jnthn> std: m:P5/-/

[07:54] <p6eval> std 235f71b: OUTPUT«ok 00:00 47m␤»

[07:54] <jnthn> std: m/-/

[07:54] <p6eval> std 235f71b: OUTPUT«===SORRY!===␤Unrecognized regex metacharacter - (must be quoted to match literally) at /tmp/yS3b8sPtXh line 1:␤------> m/-⏏/␤Can't call method "from" on unblessed reference at STD.pm line 55008.␤FAILED 00:00 41m␤»

[07:55] <tadzik> jnthn: perl6 -e '%*ENV<FOO> = cwd; say %*ENV<FOO>.perl'?

[07:57] *** kst left
[07:58] <jnthn> tadzik: oops, yes

[08:05] <moritz> jnthn: http://moritz.faui2k3.org/tmp/windows-env.patch

[08:05] <moritz> jnthn: shot in the dark, maybe that fixes it

[08:10] <tadzik> jnthn: https://gist.github.com/3385175 any idea why this haens?

[08:11] <jnthn> tadzik: No. Hm.

[08:12] <moritz> maybe because the result is a binary blob, not UTF-8?

[08:14] <jnthn> Hm, yeah...does it return a bunch of bytes or does it encode it?

[08:17] <tadzik> oh, good questions

[08:18] <tadzik> binary blob I guess

[08:19] *** Psyche^ joined
[08:20] <moritz> r: say nqp::p6box_i(pir::find_encoding__Is('utf8'))

[08:20] <p6eval> rakudo 48e5e4: OUTPUT«3␤»

[08:22] *** Patterner left
[08:22] *** Psyche^ is now known as Patterner

[08:25] *** cognominal left
[08:26] <dalek> rakudo/nom: 9db2d9b | jonathan++ | src/core/IO.pm:

[08:26] <dalek> rakudo/nom: Fix cwd() to transncode the result. Avoids a problem that gets in the way of Panda on Windows.

[08:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9db2d9beb7

[08:29] <tadzik> \o/

[08:29] <pmichaud> ....I don't quite understand why 9db2d9b is necessary.

[08:29] <tadzik> neither did we

[08:29] <jnthn> pmichaud: nor do I 

[08:30] <jnthn> *mumble*windows*mumble*ucs2*mumble*

[08:30] <tadzik> :>

[08:30] <moritz> because something is broken and cares about the internal encoding of parrot strings that really shouldn't

[08:31] *** tipdbmp joined
[08:32] <tipdbmp> ?eval [+] 1 .. 10;

[08:32] <tadzik> r: say [+] 1..10

[08:32] <p6eval> rakudo 48e5e4: OUTPUT«55␤»

[08:32] <tadzik> tipdbmp: welcome

[08:33] <tipdbmp> hi

[08:33] <tipdbmp> r: say [+] 1 .. 10

[08:33] <p6eval> rakudo 48e5e4: OUTPUT«55␤»

[08:33] <tipdbmp> r: say [+] 1..10

[08:33] <p6eval> rakudo 48e5e4: OUTPUT«55␤»

[08:33] <tipdbmp> r: say [+] 1..5

[08:33] <p6eval> rakudo 48e5e4: OUTPUT«15␤»

[08:35] <tipdbmp> r: for 1 .. 3 -> $x { say $x }

[08:35] <p6eval> rakudo 48e5e4: OUTPUT«1␤2␤3␤»

[08:35] <tipdbmp> xD

[08:35] *** pmurias joined
[08:36] <tipdbmp> for 3 .. 1 -> $x { say $x }

[08:36] <tipdbmp> r: for 3 .. 1 -> $x { say $x }

[08:36] <p6eval> rakudo 48e5e4:  ( no output )

[08:36] <tipdbmp> :/

[08:37] <tipdbmp> Why is the range operator not working that way?

[08:39] *** SamuraiJack left
[08:41] <tipdbmp> r: for (1 .. 3).reverse -> $x { say $x }

[08:41] <p6eval> rakudo 48e5e4: OUTPUT«3␤2␤1␤»

[08:41] <pmichaud> ranges are always ascending.  for a descending sequence, use the sequence operator

[08:41] <pmichaud> r: for 3...1 -> $x { say $x }

[08:41] <p6eval> rakudo 48e5e4: OUTPUT«3␤2␤1␤»

[08:41] <tipdbmp> Oh ok tnx.

[08:44] <tipdbmp> r: [<] (3, 2, 1, 6, 7)

[08:44] <p6eval> rakudo 48e5e4:  ( no output )

[08:45] <moritz> see also: http://doc.perl6.org/type/Range

[08:45] <tipdbmp> tnx

[08:47] <moritz> and http://doc.perl6.org/op/infix/... for the sequence operator

[08:48] <pmichaud> moritz++   op/infix/...

[08:48] <pmichaud> can we get  op/... to work/disambiguate someday?

[08:48] <moritz> it's already on my TODO

[08:49] <moritz> note that http://doc.perl6.org/+ already works

[08:49] <moritz> no idea why http://doc.perl6.org/... doesn't

[08:49] <diakopter> .. means dir up

[08:49] <moritz> yes, but ... ne ..

[08:50] <diakopter> maybe it doesn't LTM :)

[08:50] <moritz> :-)

[08:52] <tipdbmp> r: say 1 / 0

[08:52] <p6eval> rakudo 48e5e4: OUTPUT«Divide by zero␤  in sub infix:<div> at src/gen/CORE.setting:2851␤  in method floor at src/gen/CORE.setting:7851␤  in method Str at src/gen/CORE.setting:7869␤  in method gist at src/gen/CORE.setting:2336␤  in sub say at src/gen/CORE.setting:7086␤  in block  at /tmp/…

[08:54] <tipdbmp> r: say [**] (1 .. 10)

[08:54] <p6eval> rakudo 48e5e4: OUTPUT«1␤»

[08:54] <dalek> doc: 5175565 | pmichaud++ | lib/operators.pod:

[08:54] <dalek> doc: Fix copy/pasto in ??? and !!! listops.

[08:54] <dalek> doc: review: https://github.com/perl6/doc/commit/517556582f

[08:54] <dalek> doc: c61ad58 | moritz++ | lib/operators.pod:

[08:54] <dalek> doc: typo

[08:54] <dalek> doc: review: https://github.com/perl6/doc/commit/c61ad581dd

[08:55] <tipdbmp> r: say 2 ** 2;

[08:55] <p6eval> rakudo 48e5e4: OUTPUT«4␤»

[08:55] <tipdbmp> r: say [+] (1 .. 10);

[08:55] <p6eval> rakudo 48e5e4: OUTPUT«55␤»

[08:55] <tipdbmp> r: say [**] (1 .. 10);

[08:55] <p6eval> rakudo 48e5e4: OUTPUT«1␤»

[08:55] <tipdbmp> r: say [*] (1 .. 10);

[08:55] <p6eval> rakudo 48e5e4: OUTPUT«3628800␤»

[08:56] <tipdbmp> r: say (3, 2, 1, 6, 7).sort;

[08:56] <p6eval> rakudo 48e5e4: OUTPUT«1 2 3 6 7␤»

[08:58] <tipdbmp> r: for 1 .. 10 -> { say (-1, 0, 1).roll }

[08:58] <p6eval> rakudo 48e5e4: OUTPUT«Too many positional parameters passed; got 1 but expected 0␤  in block  at /tmp/yByzW92IIB:1␤␤»

[08:58] <pmichaud> drop the '->' there, probably.

[08:59] <moritz> right

[08:59] <tipdbmp> r: for 1 .. 10 { say (-1, 0, 1).roll }

[08:59] <p6eval> rakudo 48e5e4: OUTPUT«-1␤1␤1␤-1␤0␤1␤0␤1␤1␤-1␤»

[08:59] <moritz> r: .say for (-1, 0, 1).roll(10)

[08:59] <p6eval> rakudo 48e5e4: OUTPUT«-1␤0␤0␤0␤1␤1␤1␤-1␤0␤1␤»

[09:00] *** birdwindupbird left
[09:01] <tipdbmp> r: say for (-1, 0, 1).roll(10)

[09:01] <p6eval> rakudo 48e5e4: OUTPUT«␤␤␤␤␤␤␤␤␤␤»

[09:02] <tipdbmp> The dot is required before say? ".say"

[09:02] <moritz> tipdbmp: that makes it default to $_

[09:03] <moritz> otherwise it's parsed as say() for ...

[09:03] <tipdbmp> r: say for 1.. 10;

[09:03] <p6eval> rakudo 48e5e4: OUTPUT«␤␤␤␤␤␤␤␤␤␤»

[09:03] <tipdbmp> r: .say for 1.. 10;

[09:03] <p6eval> rakudo 48e5e4: OUTPUT«1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤»

[09:03] *** darkwolf joined
[09:04] <tipdbmp> r: say for (1.. 10);

[09:04] <p6eval> rakudo 48e5e4: OUTPUT«␤␤␤␤␤␤␤␤␤␤»

[09:08] *** darkwolf left
[09:18] *** MayDaniel joined
[09:26] *** ObseLeTe joined
[09:28] <moritz> r: class A { has $.x; }; say A.new(x => 5)>>.x

[09:28] <p6eval> rakudo 9db2d9: OUTPUT«5␤»

[09:30] <moritz> http://doc.perl6.org/op/[%20]

[09:30] <moritz> preliminary support only

[09:30] *** darkwolf joined
[09:31] *** darkwolf is now known as DarkWolf84

[09:34] <DarkWolf84> r: say ""

[09:34] <p6eval> rakudo 9db2d9: OUTPUT«␤»

[09:35] <DarkWolf84> unicode problems again :(

[09:36] <tadzik> how so?

[09:36] <moritz> probably on the client side of DarkWolf84 

[09:37] <tadzik> .u ␤

[09:37] <phenny> U+2424 SYMBOL FOR NEWLINE (␤)

[09:37] <DarkWolf84> my irc transport isue

[09:38] <DarkWolf84> I never tried to join irc from half year maybe

[09:40] <DarkWolf84> it's strange utf-8 encoding don't works for freenode

[09:41] <tadzik> it's not freenode's problem

[09:41] <moritz> DarkWolf84: "works for me"

[09:41] <DarkWolf84> ic

[09:41] <tadzik> it's something on your side

[09:42] *** DarkWolf84 left
[09:43] *** darkwolf84 joined
[09:44] <darkwolf84> r: ""

[09:44] <p6eval> rakudo 9db2d9:  ( no output )

[09:44] <tadzik> r: say "zażółć gęślą jaźń"

[09:44] <p6eval> rakudo 9db2d9: OUTPUT«zażółć gęślą jaźń␤»

[09:45] <huf> polish has squiggles at the bottom of letters too?

[09:45] <tadzik> yep

[09:45] <huf> huh.

[09:45] <tadzik> they're called "tails"

[09:45] <tadzik> phenny: pl en "ogonki"?

[09:45] <phenny> tadzik: "tails" (pl to en, translate.google.com)

[09:46] <huf> and the ones on top are ears?

[09:46] <tadzik> hehehe

[09:46] <tadzik> I don't think they have a name

[09:46] <tadzik> they're just kreski

[09:46] <tadzik> phenny: pl en "kreski"?

[09:46] <phenny> tadzik: "line" (pl to en, translate.google.com)

[09:46] <tadzik> lines, phenny 

[09:48] *** darkwolf84 left
[09:49] *** darkwolf joined
[09:49] *** darkwolf is now known as DarkWolf84

[09:49] <DarkWolf84> It's bug in my client

[09:50] <DarkWolf84> sorry for my spam

[09:51] <tadzik> no problem

[09:56] <DarkWolf84> r: @(1|2|3).perl

[09:56] <p6eval> rakudo 9db2d9:  ( no output )

[09:56] <DarkWolf84> @(1|2|3).perl.say

[09:57] <DarkWolf84> r: @(1|2|3).perl

[09:57] <p6eval> rakudo 9db2d9:  ( no output )

[09:57] <DarkWolf84> r: @(1|2|3).perl.say

[09:57] <p6eval> rakudo 9db2d9: OUTPUT«any(1, 2, 3)␤»

[09:57] <DarkWolf84> hm

[09:58] <DarkWolf84> (1|2|3).array.perl.say

[09:59] <DarkWolf84> r: (1|2|3).array.perl.say

[09:59] <p6eval> rakudo 9db2d9: OUTPUT«No such method 'array' for invocant of type 'Int'␤  in sub AUTOTHREAD_METHOD at src/gen/CORE.setting:1863␤  in <anon> at src/gen/Metamodel.pm:2296␤  in block  at /tmp/t8ltMoACto:1␤␤»

[09:59] <DarkWolf84> is there any way to make junction array?

[10:00] <DarkWolf84> or list

[10:01] *** ObseLeTe left
[10:02] <DarkWolf84> r: (1|2|3).^methods(:local).say

[10:02] <p6eval> rakudo 9db2d9: OUTPUT«new BUILD postcircumfix:<( )> Bool Str ACCEPTS gist perl␤»

[10:03] <DarkWolf84> :(

[10:03] <moritz> DarkWolf84: http://faq.perl6.org/#eigenstate

[10:04] <DarkWolf84> reading...

[10:05] <DarkWolf84> thanks, moritz

[10:06] <DarkWolf84> r: eigenstates(1|2|3).perl.say

[10:06] <p6eval> rakudo 9db2d9: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&eigenstates' called (line 1)␤»

[10:07] <tipdbmp> r: say "A" if 1 == 2|1;

[10:07] <p6eval> rakudo 9db2d9: OUTPUT«A␤»

[10:08] <DarkWolf84> r: eigenstates(1|2|3).join(", ").say

[10:08] <p6eval> rakudo 9db2d9: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&eigenstates' called (line 1)␤»

[10:09] <DarkWolf84> oops

[10:09] <DarkWolf84> maybe rakudo don't have eigenstates

[10:10] <moritz> DarkWolf84: did you actually read that FAQ?

[10:10] <DarkWolf84> not the all

[10:11] <DarkWolf84> still reading

[10:12] <DarkWolf84> the FAQ says that is wrong thing

[10:14] <DarkWolf84> I see

[10:14] <DarkWolf84> eigenstates is just a sub defined before

[10:15] <DarkWolf84> my bad

[10:20] <DarkWolf84> :r my @states.push(1|2|3); @states.perl.say;

[10:20] <tipdbmp> r: if [<](2,1,3) { say "as" }

[10:20] <p6eval> rakudo 9db2d9:  ( no output )

[10:20] <tipdbmp> r: if [<](1,2,3) { say "as" }

[10:20] <p6eval> rakudo 9db2d9: OUTPUT«as␤»

[10:21] <DarkWolf84> r: my @states.push(1|2|3); @states.perl.say;

[10:21] <p6eval> rakudo 9db2d9: OUTPUT«===SORRY!===␤Confused␤at /tmp/V4bJs0JaDn:1␤»

[10:22] <DarkWolf84> r: my @states; @states.push(1|2|3); @states.perl.say;

[10:22] <p6eval> rakudo 9db2d9: OUTPUT«Array.new(any(1, 2, 3))␤»

[10:23] <tipdbmp> r: say "@{[ 1 .. 10]}";

[10:23] <p6eval> rakudo 9db2d9: OUTPUT«@1 2 3 4 5 6 7 8 9 10␤»

[10:25] <tipdbmp> r: use DateTime;

[10:25] <p6eval> rakudo 9db2d9: OUTPUT«===SORRY!===␤Could not find DateTime in any of: /home/p6eval/.perl6/lib, /home/p6eval/nom-inst/lib/parrot/4.4.0-devel/languages/perl6/lib␤»

[10:25] <tipdbmp> r: use v5; use DateTime;

[10:25] <p6eval> rakudo 9db2d9: OUTPUT«===SORRY!===␤Could not find DateTime in any of: /home/p6eval/.perl6/lib, /home/p6eval/nom-inst/lib/parrot/4.4.0-devel/languages/perl6/lib␤»

[10:25] <moritz> tipdbmp: DateTime is built in

[10:25] <moritz> r: say DateTime.now

[10:25] <p6eval> rakudo 9db2d9: OUTPUT«DateTime.new(year => 2012, month => 8, day => 18, hour => 12, minute => 25, second => 49, timezone => $*TZ)␤»

[10:25] <moritz> r: say DateTime.now.Str

[10:25] <p6eval> rakudo 9db2d9: OUTPUT«2012-08-18T12:25:56-0200␤»

[10:27] <tipdbmp> Oh =).

[10:27] <tipdbmp> tnx

[10:27] <DarkWolf84> r: my @states; @states.push(1|2|3); @states.perl.say;

[10:27] <p6eval> rakudo 9db2d9: OUTPUT«Array.new(any(1, 2, 3))␤»

[10:27] <DarkWolf84> r: my @states; @states.push: Any(1|2|3); @states.perl.say;

[10:27] <p6eval> rakudo 9db2d9: OUTPUT«No such method 'Any' for invocant of type 'Int'␤  in sub AUTOTHREAD_METHOD at src/gen/CORE.setting:1863␤  in <anon> at src/gen/Metamodel.pm:2296␤  in <anon> at src/gen/BOOTSTRAP.pm:812␤  in any <anon> at src/gen/BOOTSTRAP.pm:809␤  in block  at /tmp/sFSqd1wJMb:1␤␤»…

[10:28] <tipdbmp> r: say "date: @{[ DateTime.ymd ]} | time: @{[ DateTime.hms ]}"

[10:28] <p6eval> rakudo 9db2d9: OUTPUT«No such method 'ymd' for invocant of type 'DateTime'␤  in block  at /tmp/jQOxjG6r0K:1␤␤»

[10:28] <moritz> bug. WHere's masak?

[10:28] <diakopter> flying

[10:28] <DarkWolf84> r: my @states; @states.push(Any(1|2|3)); @states.perl.say;

[10:28] <p6eval> rakudo 9db2d9: OUTPUT«No such method 'Any' for invocant of type 'Int'␤  in sub AUTOTHREAD_METHOD at src/gen/CORE.setting:1863␤  in <anon> at src/gen/Metamodel.pm:2296␤  in <anon> at src/gen/BOOTSTRAP.pm:812␤  in any <anon> at src/gen/BOOTSTRAP.pm:809␤  in block  at /tmp/JNiJ8OrzJ7:1␤␤»…

[10:29] <DarkWolf84> Is that a bug?

[10:29] <DarkWolf84> r: my @states; @states.push(Any(1,2,3)); @states.perl.say;

[10:29] <p6eval> rakudo 9db2d9: OUTPUT«No such method 'Any' for invocant of type 'Parcel'␤  in <anon> at src/gen/BOOTSTRAP.pm:817␤  in <anon> at src/gen/BOOTSTRAP.pm:814␤  in any <anon> at src/gen/BOOTSTRAP.pm:809␤  in block  at /tmp/5WFn2sKjTF:1␤␤»

[10:30] <DarkWolf84> r: my @states; @states.push(any(1,2,3)); @states.perl.say;

[10:30] <p6eval> rakudo 9db2d9: OUTPUT«Array.new(any(1, 2, 3))␤»

[10:30] <DarkWolf84> ok

[10:33] <DarkWolf84> r: my @states; -> Any $s {@states.push $s}.(1|2|3)

[10:33] <p6eval> rakudo 9db2d9: OUTPUT«===SORRY!===␤Unable to parse blockoid, couldn't find final '}' at line 2, near [email@hidden.address]
[10:34] <DarkWolf84> r: my @states; -> Any $s { @states.push $s }.(1|2|3); @states.perl.say

[10:34] <p6eval> rakudo 9db2d9: OUTPUT«===SORRY!===␤Unable to parse blockoid, couldn't find final '}' at line 2, near [email@hidden.address]
[10:34] *** birdwindupbird joined
[10:35] <tipdbmp> r: say chr 0x00D6;

[10:35] <p6eval> rakudo 9db2d9: OUTPUT«Ö␤»

[10:35] <DarkWolf84> r: my @states; -> Any $s {@states.push $s}.(any(1,2,3))

[10:35] <p6eval> rakudo 9db2d9: OUTPUT«===SORRY!===␤Unable to parse blockoid, couldn't find final '}' at line 2, near [email@hidden.address]
[10:35] <DarkWolf84> r: my @states; -> Any $s {@states.push: $s}.(1|2|3)

[10:35] <p6eval> rakudo 9db2d9:  ( no output )

[10:36] <DarkWolf84> r: my @states; -> Any $s {@states.push $s}.(1|2|3); @states.perl.say

[10:36] <p6eval> rakudo 9db2d9: OUTPUT«===SORRY!===␤Unable to parse blockoid, couldn't find final '}' at line 2, near [email@hidden.address]
[10:36] *** cognominal joined
[10:36] <DarkWolf84> r: my @states; -> Any $s {@states.push; $s}.(1|2|3); @states.perl.say

[10:36] <p6eval> rakudo 9db2d9: OUTPUT«Array.new()␤»

[10:37] <DarkWolf84> r: my @states; -> Any $s {@states.push: $s}.(1|2|3); @states.perl.say

[10:37] <p6eval> rakudo 9db2d9: OUTPUT«Array.new(1, 2, 3)␤»

[10:37] <DarkWolf84> uf

[10:37] <DarkWolf84> it worked

[10:39] <DarkWolf84> but I don't get what makes a junction flat in that code

[10:42] *** spider-mario joined
[10:44] *** cognominal left
[10:45] <tipdbmp> r:  say join(" ", map { chr } (ord "\x{1F0A1}" .. ord "\x{1F0DE}"))'

[10:45] <p6eval> rakudo 9db2d9: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 2, near "(ord \"\\x{1"␤»

[10:45] <tipdbmp> r:  say join(" ", map { chr }, (ord "\x{1F0A1}" .. ord "\x{1F0DE}"))'

[10:45] <p6eval> rakudo 9db2d9: OUTPUT«===SORRY!===␤Unrecognized backslash sequence: '\x' at line 2, near "{1F0A1}\" ."␤»

[10:45] *** DarkWolf84 left
[10:49] <tipdbmp> r:  say join(" ", map { chr }, (ord 0x1F0A1 .. ord 0x1F0DE))'

[10:49] <p6eval> rakudo 9db2d9: OUTPUT«===SORRY!===␤Confused␤at /tmp/SkkNutuHzS:1␤»

[10:50] <tipdbmp> r:  say join(" ", map { chr }, (0x1F0A1 .. 0x1F0DE))'

[10:50] <p6eval> rakudo 9db2d9: OUTPUT«===SORRY!===␤Confused␤at /tmp/76g8gs5TFT:1␤»

[10:51] <tipdbmp> r: say 0x1 .. 0x5;

[10:51] <p6eval> rakudo 9db2d9: OUTPUT«1..5␤»

[10:51] <tipdbmp> r: say 1 .. 5;

[10:51] <p6eval> rakudo 9db2d9: OUTPUT«1..5␤»

[10:51] <tipdbmp> r: say (1 .. 5);

[10:51] <p6eval> rakudo 9db2d9: OUTPUT«1..5␤»

[10:51] <tipdbmp> r: say (1 .. 5).join(" ");

[10:51] <p6eval> rakudo 9db2d9: OUTPUT«1 2 3 4 5␤»

[10:51] <tipdbmp> r: say (0x1 .. 0x5).join(" ");

[10:52] <p6eval> rakudo 9db2d9: OUTPUT«1 2 3 4 5␤»

[10:52] <tipdbmp> r: say join(" ", map { $ ** 2}, (1 .. 4))

[10:52] <p6eval> rakudo 9db2d9: OUTPUT«===SORRY!===␤Non-declarative sigil is missing its name␤at /tmp/HhqMm8TSWc:1␤»

[10:52] <tipdbmp> r: say join(" ", map { $_ ** 2}, (1 .. 4))

[10:52] <p6eval> rakudo 9db2d9: OUTPUT«1 4 9 16␤»

[10:53] <tipdbmp> r:  say join(" ", map { chr }, (0x1F0A1 .. 0x1F0DE))'

[10:53] <p6eval> rakudo 9db2d9: OUTPUT«===SORRY!===␤Confused␤at /tmp/c2HSeHPtzF:1␤»

[10:57] <tipdbmp> r:  say join(" ", map { chr($_) }, (0x1F0A1 .. 0x1F0DE))'

[10:57] <p6eval> rakudo 9db2d9: OUTPUT«===SORRY!===␤Confused␤at /tmp/cagxL0bRjz:1␤»

[10:57] <tipdbmp> What's going on?

[11:01] <topo> You have a ' that doesn't belong

[11:03] <tipdbmp> r:  say join(" ", map { chr($_) }, (0x1F0A1 .. 0x1F0DE))

[11:03] <p6eval> rakudo 9db2d9: OUTPUT«🂡 🂢 🂣 🂤 🂥 🂦 🂧 🂨 🂩 🂪 🂫 🂬 🂭 🂮 🂯 🂰 🂱 🂲 🂳 🂴 🂵 🂶 🂷 🂸 🂹 🂺 🂻 🂼 🂽 🂾 🂿 🃀 🃁 🃂 🃃 🃄 🃅 🃆 🃇 🃈 🃉 🃊 🃋 🃌 🃍 🃎 🃏 🃐 🃑 🃒 🃓 🃔 🃕 🃖 🃗 🃘 🃙 🃚 🃛 🃜 🃝 🃞␤»…

[11:03] <tipdbmp> Oh

[11:04] *** daniel-s_ left
[11:04] <tipdbmp> r:  say (map { chr($_) }, (0x1F0A1 .. 0x1F0DE)).roll

[11:04] <p6eval> rakudo 9db2d9: OUTPUT«🃒␤»

[11:04] <tipdbmp> r:  say " @{[ (map { chr($_) }, (0x1F0A1 .. 0x1F0DE)).roll ]} "

[11:04] <p6eval> rakudo 9db2d9: OUTPUT« @🃞 ␤»

[11:05] <tipdbmp> r:  say " ", (map { chr($_) }, (0x1F0A1 .. 0x1F0DE)).roll, " "

[11:05] <p6eval> rakudo 9db2d9: OUTPUT« 🂥 ␤»

[11:05] <tipdbmp> r:  say " ", (map { chr($_) }, (0x1F0A1 .. 0x1F0DE)).roll, "  "

[11:05] <p6eval> rakudo 9db2d9: OUTPUT« 🃛  ␤»

[11:10] *** SamuraiJack joined
[11:13] <tipdbmp> r: for 1 .. 11 -> $x, $y, $z { say "$x $y $z" }

[11:13] <p6eval> rakudo 9db2d9: OUTPUT«1 2 3␤4 5 6␤7 8 9␤Not enough positional parameters passed; got 2 but expected 3␤  in block  at /tmp/nwY3UJLlAM:1␤␤»

[11:38] *** erkan left
[11:49] *** erkan joined
[12:03] <dalek> doc: 0da2f33 | moritz++ | lib/Pair.pod:

[12:03] <dalek> doc: [Pair] elaborate on literals; add X<> anchors

[12:03] <dalek> doc: review: https://github.com/perl6/doc/commit/0da2f33dde

[12:08] *** ObseLeTe joined
[12:11] *** sftp left
[12:12] *** sftp joined
[12:22] *** brrt joined
[12:27] *** whiteknight joined
[12:27] *** whiteknight is now known as Guest44433

[12:37] <pmurias> does http://pastie.org/4543888 work with current rakudo?

[12:38] <benabik> r: sub foo($a) { my multi bar($f) { say 1 } ; my multi bar($f, $b) { say 2 } ; &bar } ; say foo(100).perl

[12:38] <p6eval> rakudo 9db2d9: OUTPUT«sub bar(Mu ) { ... }␤»

[12:39] <benabik> r: sub foo($a) { my multi bar($f) { say 1 } ; my multi bar($f, $b) { say 2 } ; &bar } ; my &c = foo(1); c(1); c(1,2)

[12:39] <p6eval> rakudo 9db2d9: OUTPUT«1␤2␤»

[12:39] <benabik> pmurias: ^^

[12:40] <pmurias> thanks, must have been fixed

[12:42] <tadzik> I'm sad to declare panda being completely unsupported on windows. Sorry

[12:43] <tadzik> I fail to cooperate with it completely

[12:48] *** birdwindupbird left
[12:48] <pmurias> tadzik: anything hard to port to windows, or is just testing there annoying?

[12:48] <tadzik> pmurias: my dev environment stopped working overnight

[12:48] <tadzik> suddenly I'm unable to git pull, to build rakudo, to build parrot

[12:49] <tadzik> I'm sorrounded with people who develop on windows daily and it's still hard and confusing

[12:49] <tadzik> ah

[12:49] <tadzik> okay, I'm trying once again

[12:51] <moritz> r: sub f(\x) { say x }; f 42

[12:51] <p6eval> rakudo 9db2d9: OUTPUT«42␤»

[12:59] <dalek> star: c4afc58 | pmichaud++ | skel/README:

[12:59] <dalek> star: Change install recommendation for Debian/Ubuntu to want "build-essential" instead of explicit gcc and make.  mst++

[12:59] <dalek> star: review: https://github.com/rakudo/star/commit/c4afc586ed

[13:00] <pmurias> what do nqp hashes take as keys?

[13:01] <moritz> parrot strings

[13:03] <moritz> today's autopun: "can you do that superlativer?"

[13:03] <pmurias> how can I fake object keys?

[13:03] <moritz> you can use nqp::where get a memory address

[13:04] <moritz> and then use the result as a hash key

[13:04] <pmurias> won't that change during gc?

[13:04] <moritz> no, we're not compacting

[13:04] <pmurias> ok

[13:05] <dalek> doc: 95ca006 | moritz++ | type-graph.txt:

[13:05] <dalek> doc: [type-graph] update for new inheritance relations, japhb++

[13:05] <dalek> doc: review: https://github.com/perl6/doc/commit/95ca0067f5

[13:07] <diakopter> tadzik: I'd be glad to work on windows compat, just not in the next 2 months; I have a crazy project that's kicking my butt

[13:08] <diakopter> tadzik: I have the MSVC/activeperl build environment as well as gcc/strawberry

[13:15] *** kaare__ joined
[13:16] *** kaare_ left
[13:18] <dalek> rakudo/macros-d2: 0512eca | masak++ | src/ (3 files):

[13:18] <dalek> rakudo/macros-d2: intermediate commit

[13:18] <dalek> rakudo/macros-d2: 

[13:18] <dalek> rakudo/macros-d2: Pushed to help jnthn debug a hang.

[13:18] <dalek> rakudo/macros-d2: review: https://github.com/rakudo/rakudo/commit/0512ecae3e

[13:18] <masak> morning, #perl6

[13:21] *** Circlepuller_ joined
[13:21] <dalek> nqp/jnthn-debug-macros-d2-on-this: 1be56d4 | masak++ | src/QAST/ (9 files):

[13:21] <dalek> nqp/jnthn-debug-macros-d2-on-this: intermediate code for debugging

[13:21] <dalek> nqp/jnthn-debug-macros-d2-on-this: 

[13:21] <dalek> nqp/jnthn-debug-macros-d2-on-this: For some reason, this hangs inside src/QAST/Unquote.nqp

[13:21] <dalek> nqp/jnthn-debug-macros-d2-on-this: review: https://github.com/perl6/nqp/commit/1be56d43bb

[13:22] *** Circlepuller__ joined
[13:23] *** Circlepuller left
[13:25] <dalek> rakudo/nom: 2bbe527 | jonathan++ | src/core/IO.pm:

[13:25] <dalek> rakudo/nom: Fix a few more Windows/OS PMC/encoding issues for tadzik++.

[13:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2bbe527235

[13:26] *** Circlepuller_ left
[13:27] *** UncleFester6 joined
[13:30] <JimmyZ_>  早上好，麦高

[13:33] *** xinming_ joined
[13:35] *** JimmyZ_ left
[13:35] <tadzik> diakopter: I hope to solve this issues during the YAPC, but it'd be great if there was someone who knows this environment and could keep an eye or submit smoketest results

[13:36] *** xinming left
[13:36] *** gongyiliao left
[13:39] *** Circlepuller__ left
[13:39] *** Circlepuller__ joined
[13:42] *** Circlepuller joined
[13:44] *** kaare__ is now known as kaare_

[13:44] *** Circlepuller__ left
[13:51] <dalek> panda: 9c4e4cf | tadzik++ | ext/File__Tools/lib/Shell/Command.pm:

[13:51] <dalek> panda: Update File::Tools with patches from sergot++

[13:51] <dalek> panda: review: https://github.com/tadzik/panda/commit/9c4e4cf988

[13:57] *** leont joined
[14:03] *** leont left
[14:03] *** brrt left
[14:04] *** brrt joined
[14:05] *** ObseLeTe left
[14:06] *** leont joined
[14:14] <leont> masak: can you send me that link we just discussed?

[14:24] *** leont left
[14:24] *** leont joined
[14:26] *** JimmyZ joined
[14:36] <tadzik> panda now works on windows \o/

[14:36] <tadzik> it's not commited yet

[14:37] <JimmyZ> \o/

[14:37] *** leont left
[14:37] *** leont joined
[14:39] <sorear> #perl6: know that I am safe and sound in .de

[14:39] <diakopter> how was your airplane experience

[14:40] <diakopter> now all other flights will seem quite short

[14:42] <sorear> pff.  I still want to take a trip to Mars someday.

[14:43] <sorear> 2 excellent, 1 tolerable

[14:44] <pmichaud> tadzik++

[14:44] *** preflex_ joined
[14:45] *** preflex left
[14:45] *** preflex_ is now known as preflex

[14:47] *** brrt left
[14:47] *** thelazydeveloper joined
[14:56] *** sweet|kid left
[15:00] <dalek> niecza: 7832503 | sorear++ | js/ (2 files):

[15:00] <dalek> niecza: Start putting in the framework for developing the javascript kernel

[15:00] <dalek> niecza: review: https://github.com/sorear/niecza/commit/7832503579

[15:00] <dalek> niecza: 4647c66 | sorear++ | js/ (2 files):

[15:00] <dalek> niecza: Int/String thaw logic and compatible version checking

[15:00] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4647c66c57

[15:00] <dalek> niecza: 49c157f | sorear++ | js/niecza.js:

[15:00] <dalek> niecza: First draft of a deser method

[15:00] <dalek> niecza: review: https://github.com/sorear/niecza/commit/49c157f25f

[15:00] <dalek> niecza: c248dcf | sorear++ | lib/ (3 files):

[15:00] <dalek> niecza: Preliminary Buf support

[15:00] <dalek> niecza: 

[15:00] <dalek> niecza: Supports encode, decode, and bytes, should be enough for a web server.

[15:00] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c248dcf50a

[15:01] *** sweet|kid joined
[15:02] <pmurias> sorear: how do you plan to support coroutines under javascript?

[15:09] <pmurias> sorear: for server side i'm think of faking them with fibers in rakudo-js

[15:10] *** perl6fan joined
[15:11] *** leont left
[15:12] *** Guest44433 left
[15:12] *** perl6fan left
[15:18] *** UncleFester6 left
[15:18] *** UncleFester6 joined
[15:19] <dalek> panda: 1d9a80a | tadzik++ | / (7 files):

[15:19] <dalek> panda: Make panda work on windows. szabgab++ for supplying a windows machine

[15:19] <dalek> panda: review: https://github.com/tadzik/panda/commit/1d9a80a82e

[15:20] *** crab2313 joined
[15:22] *** JimmyZ left
[15:22] <gfldex> p6: my %h = '1' => 10, '2' => 20; "%1; abc %2;".subst(m:g/'%'(.+?)';'/, -> $m { %h{$m[0].Str} }).say;

[15:22] <p6eval> niecza v19-21-gc86e8e5: OUTPUT«===SORRY!===␤␤Regex modifier g not yet implemented at /tmp/5tXDETFPZw line 1:␤------> > 10, '2' => 20; "%1; abc %2;".subst(m:g⏏/'%'(.+?)';'/, -> $m { %h{$m[0].Str} }).␤␤Unhandled exception: Check failed␤␤  at /home/p6ev…

[15:22] <p6eval> ..rakudo 2bbe52: OUTPUT«No such method 'match' for invocant of type 'Any'␤  in block  at /tmp/1ShpqqTmOQ:1␤␤»

[15:22] <gfldex> i like nieczas error message much better :)

[15:24] *** UncleFester6 left
[15:41] *** cognominal joined
[16:08] <dalek> ecosystem: 9956d47 | tadzik++ | META.list:

[16:08] <dalek> ecosystem: Use MIME::Base64 from moritz++'s repo (it works)

[16:08] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/9956d47287

[16:10] *** leont joined
[16:11] <tadzik> argh, that doesn't help

[16:13] *** tokuhiro_ joined
[16:15] *** jeffreykegler joined
[16:16] *** leont left
[16:17] *** tokuhiro_ left
[16:18] *** Circlepuller_ joined
[16:20] *** Circlepuller left
[16:53] *** jeffreykegler left
[16:53] *** jeffreykegler joined
[16:56] *** MayDaniel left
[17:02] *** xinming_ is now known as xinming

[17:16] *** MayDaniel joined
[17:21] *** jeffreykegler left
[17:29] *** UncleFester6 joined
[17:31] <UncleFester6> tadzik: https://github.com/ronaldxs/Perl6-MIME-Base64 should work ...

[17:35] <UncleFester6> See also my discussion on #parrot explaining problems with the parrot MIME::Base64 library which make me inclined to write/bring back a pure perl6 implementation that dtr.

[17:36] <UncleFester6> See here http://irclog.perlgeek.de/parrot/2012-08-18#i_5907630 and further discussion with dukeleto

[17:42] *** crab2313 left
[17:42] *** sorda joined
[17:44] *** UncleFester6 left
[17:47] *** crab2313 joined
[18:11] *** crab2313 left
[18:27] <japhb> tadzik, is panda now fully Windows compatible?

[18:28] *** sorda left
[18:34] <japhb> Module idea: a few methods that figure out the OS-appropriate path for user's home directory, (global and user) settings root, (global and user) settings dir for a project <foo>, etc.  Seems like it could go into File-Tools, actually ....

[19:12] *** sorda joined
[19:22] *** birdwindupbird joined
[19:29] *** SamuraiJack left
[19:32] *** cognominal left
[19:35] *** benabik left
[19:35] *** benabik joined
[19:47] <pmichaud> rn: my @a = 1,2,3;  my $s := @a;  say $s =:= @a;  

[19:47] <p6eval> niecza v19-25-gc248dcf: OUTPUT«False␤»

[19:47] <p6eval> ..rakudo 2bbe52: OUTPUT«True␤»

[19:49] *** tokuhiro_ joined
[19:51] <jnthn> japhb: afaik, it works on Windows fully now

[19:51] <jnthn> and a couple of Rakudo issues fixe don the way :)

[19:52] *** cognominal joined
[19:53] *** tokuhiro_ left
[19:54] <sorear> pmurias: niecza/js, if it goes anywhere, will be mostly stackless

[19:55] *** benabik left
[19:57] *** benabik joined
[19:59] *** MayDaniel left
[20:00] <pmichaud> rn: my @a = 1,2,3;  my $s := @a; my $t := @a; say $s =:= $t;  

[20:00] <p6eval> rakudo 2bbe52, niecza v19-25-gc248dcf: OUTPUT«True␤»

[20:04] <TimToady> (mst) he left his laptop unattended but you guys are awesome - somebody tell him please

[20:06] *** hoelzro|away is now known as hoelzro

[20:07] *** jeffreykegler joined
[20:11] <diakopter> was that mst typing as TimToady or TimToady typing about mst?

[20:11] <moritz> mst typing on TimToady's machine, afaict

[20:13] *** kaare_ left
[20:14] <moritz> nr: my @a = 1, 2, 3; my $s := @a; say $s =:= @a

[20:14] <p6eval> niecza v19-25-gc248dcf: OUTPUT«False␤»

[20:14] <p6eval> ..rakudo 2bbe52: OUTPUT«True␤»

[20:16] <pmichaud> rn: my @a = 1,2,3;  my $s := @a;  say $s =:= @a;  

[20:16] <p6eval> niecza v19-25-gc248dcf: OUTPUT«False␤»

[20:16] <p6eval> ..rakudo 2bbe52: OUTPUT«True␤»

[20:17] <moritz> tadzik: MIME::Base64 merged

[20:17] *** kst joined
[20:18] <pmichaud> rn: my $s = [1,2,3];  my @a := $s;  say $s =:= @a;

[20:18] <p6eval> rakudo 2bbe52: OUTPUT«False␤»

[20:18] <p6eval> ..niecza v19-25-gc248dcf: OUTPUT«True␤»

[20:20] <jeffreykegler> I have a question about S05's discussion of <~~>

[20:21] <jeffreykegler> Quoth S05: <~~> "is implicitly anchored to the end of the operator as any other subrule would be. Despite the fact that the outer rule scans the string, the inner call to it does not."

[20:21] <jeffreykegler> I believe this is trying to say that the inner rule does not restart the scan

[20:21] <TimToady> or continue it

[20:21] <moritz> it basically means that <~~> is implicitly anchored

[20:22] <jeffreykegler> "to the end of the operator"?

[20:22] <jeffreykegler> Does operator here mean the "<~~>"

[20:23] <tadzik> japhb: yes, I claim so

[20:23] <tadzik> japhb: File::HomeDir from Perl 5, and yes, we need that methinks

[20:24] <jeffreykegler> My problem is that my interpretation of the phrase "implicityly anchored" either has it stating the obvious, or has it saying something completely mysterious

[20:25] <jeffreykegler> * "implicityly" -> implicitly

[20:25] <jeffreykegler> And the second statement that the inner call "does not [scan the string]", I simply cannot make sense of, unless I read "scan" as "rescan" or "restart the scan"

[20:26] <sorear> n: my $s = [1,2,3]; my @a := $s; say +[@a] # seems pmichaud found an actual "bug"

[20:26] <p6eval> niecza v19-25-gc248dcf: OUTPUT«1␤»

[20:26] <sorear> for values of "bug" where it disageees with my ideas of how this should work, anyway

[20:28] <moritz> jeffreykegler: "scanning the string" means "searching for where the regex starts to match"

[20:29] <moritz> jeffreykegler: and it doesn't do that, because it's anchored

[20:29] <moritz> and yes, that's completely obvious

[20:29] <jeffreykegler> moritz: Aha!

[20:29] <TimToady> when you /foo/ it's implicitly /^ .*? foo <~~>/; it's just trying to say there's no implicit .*? in that case, so it's equivalen to /foofoo.../ not /foo.*?foo.../

[20:29] <sorear> n: my $s = [1,2,3]; my @a := $s; say @a.plrl ; say $s.perl

[20:29] <p6eval> niecza v19-25-gc248dcf: OUTPUT«Unhandled exception: Unable to resolve method plrl in type Array␤  at /tmp/_c5IhcT63h line 1 (mainline @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3946 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3947 (module-CORE @ 567) ␤  at /home…

[20:29] <jeffreykegler> OK, now I understand

[20:29] <sorear> n: my $s = [1,2,3]; my @a := $s; say @a.perl ; say $s.perl

[20:29] <p6eval> niecza v19-25-gc248dcf: OUTPUT«[1, 2, 3]␤[1, 2, 3]␤»

[20:29] <moritz> note that <~~> is pretty low on our priority list

[20:30] <sorear> NewBoundVar is not doing its job

[20:31] <jeffreykegler> In my Marpa-based implementation of the Perl 6 syntax, <~~> is high on the priority list, and I wanted to make sure I understood what I was trying to implement

[20:31] <moritz> ok

[20:31] <moritz> nr: say so m/foo<~~>/ for 'foofoo', 'foo a foo'

[20:31] <p6eval> rakudo 2bbe52: OUTPUT«False␤False␤»

[20:31] <p6eval> ..niecza v19-25-gc248dcf: OUTPUT«===SORRY!===␤␤Action method assertion:sym<~~> not yet implemented at /tmp/9c8t0PxELr line 1:␤------> say so m/foo<~~⏏>/ for 'foofoo', 'foo a foo'␤␤Unhandled exception: Unable to resolve method oplift in type Any␤  at /h…

[20:32] <moritz> huh, why does rakudo fails for the first one

[20:32] *** quietfanatic joined
[20:33] <moritz> oh

[20:33] <masak> quietfanatic! \o/

[20:33] <moritz> nr: say so m/foo [<~~> | <?> ]/ for 'foofoo', 'foo a foo'

[20:33] <p6eval> niecza v19-25-gc248dcf: OUTPUT«===SORRY!===␤␤Action method assertion:sym<~~> not yet implemented at /tmp/xb9Eoezhn0 line 1:␤------> say so m/foo [<~~⏏> | <?> ]/ for 'foofoo', 'foo a foo'␤␤Unhandled exception: Unable to resolve method oplift in type A…

[20:33] <p6eval> ..rakudo 2bbe52: OUTPUT«True␤True␤»

[20:33] <quietfanatic> hi masak

[20:33] <masak> moritz: that shows nothing, it just takes the <?> branch both times... :)

[20:34] <moritz> masak: I just realized, yes

[20:34] <quietfanatic> heh, I intended to just view the logs but I instinctively logged onto the webchat.

[20:34] <moritz> nr: say so m/foo [<~~> | <?> ] $/ for 'foofoo', 'foo a foo'

[20:34] <p6eval> rakudo 2bbe52: OUTPUT«True␤True␤»

[20:34] <p6eval> ..niecza v19-25-gc248dcf: OUTPUT«===SORRY!===␤␤Action method assertion:sym<~~> not yet implemented at /tmp/U5rZvznGpJ line 1:␤------> say so m/foo [<~~⏏> | <?> ] $/ for 'foofoo', 'foo a foo'␤␤Unhandled exception: Unable to resolve method oplift in type…

[20:34] <colomon> niecza/js, eh?

[20:36] <masak> moritz: seems to me <~~> is either NYI, or simply crazily I.

[20:36] <moritz> nr: say so m/^foo [<~~> | <?> ] $/ for 'foofoo', 'foo a foo'

[20:36] <p6eval> niecza v19-25-gc248dcf: OUTPUT«===SORRY!===␤␤Action method assertion:sym<~~> not yet implemented at /tmp/lyP6cIOXUv line 1:␤------> say so m/^foo [<~~⏏> | <?> ] $/ for 'foofoo', 'foo a foo'␤␤Unhandled exception: Unable to resolve method oplift in typ…

[20:36] <p6eval> ..rakudo 2bbe52: OUTPUT«False␤False␤»

[20:37] <jeffreykegler> moritz: Marpa loves to recurse, so <~~> is a natural in that context

[20:37] <moritz> r: say so m/^foo <~~>?  $/ for 'foofoo', 'foo a foo'

[20:37] <p6eval> rakudo 2bbe52: OUTPUT«False␤False␤»

[20:37] <moritz> masak: I think we have a passing test for it.

[20:37] <moritz> r: use Test; plan 1; ok('1.2.' ~~ /\d+\. <~~> | <?>/, 'recursive regex using whole pattern')

[20:37] <p6eval> rakudo 2bbe52: OUTPUT«1..1␤ok 1 - recursive regex using whole pattern␤»

[20:37] <moritz> meh

[20:38] <moritz> it simply scopes the | <?> to the whole regex

[20:38] <sorear> colomon: little somthing I was playing with on the plane. idea, how hard to get _full_ p6 (no matter how slow) in a browser context for try.perl6

[20:38] <colomon> sorear++

[20:38] <sorear> colomon: not sure I'll do more with it for quite a whhile.  other priorities have been raised.

[20:39] <colomon> well, you still have a flight home.

[20:39] <pmichaud> rn: my $x := 3;  my $y := $x;  say $x =:= $y;

[20:39] <p6eval> rakudo 2bbe52, niecza v19-25-gc248dcf: OUTPUT«True␤»

[20:39] <colomon> though now you've got me curious about the other priorities, if you can say anything about them...

[20:39] *** birdwindupbird left
[20:40] <tadzik> hah, LWP::SImple's broken itself

[20:40] <tadzik> No such method 'bytes' for invocant of type 'Str'

[20:40] <tadzik> did we change the socket api recently?

[20:41] <sorear> we did change Str recently

[20:41] <moritz> right, Str.bytes is gone

[20:42] <moritz> .oO( nobody reads deprecation notices anyway :( )

[20:50] <masak> we should put them in IGNOREME or something.

[20:50] <tadzik> SECRET_COREOPS_NOTES_DO_NOT_READ

[20:51] <sorear> am I allowed to tell colomon about our secret priorities?

[20:53] <dalek> niecza: 025a6e6 | sorear++ | lib/CodeGen.cs:

[20:53] <dalek> niecza: Rw bindings to lists were being mishandled, pmichaud++

[20:53] <dalek> niecza: review: https://github.com/sorear/niecza/commit/025a6e6160

[20:53] <masak> sorear: I... I think so.

[20:53] <colomon> \o/

[20:53] <masak> this meeting is not very sekkrit.

[20:54] <jnthn> First rule of sektrit meeting is not to talk about sekrit meeting :P

[20:54] <pmichaud> n: my @a;  say @a.defined;

[20:54] <p6eval> niecza v19-25-gc248dcf: OUTPUT«True␤»

[20:54] <masak> n: my &c; say &c.defined

[20:54] <p6eval> niecza v19-25-gc248dcf: OUTPUT«False␤»

[20:54] <masak> n: my &c; &c()

[20:54] <p6eval> niecza v19-25-gc248dcf: OUTPUT«Unhandled exception: Unable to resolve method postcircumfix:<( )> in type Any␤  at /tmp/O85uy0v6oi line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3946 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3947 (module-CORE @ 567…

[20:55] <masak> n: my &c; say &c ~~ Callable

[20:55] <p6eval> niecza v19-25-gc248dcf: OUTPUT«False␤»

[20:55] <masak> sorear: ^

[20:56] <moritz> r: my &c; say &c ~~ Callable

[20:56] <p6eval> rakudo 2bbe52: OUTPUT«False␤»

[20:56] <moritz> masak: ^

[20:56] <jnthn> Yeah, that's probably wrong.

[20:57] *** UncleFester6 joined
[20:58] <masak> moritz: :)

[20:58] <masak> it's interesting that $ and & values start their lives as undefined, but @ and % values do not.

[20:59] <UncleFester6> my fork of LWP::Simple should work https://github.com/ronaldxs/perl6-lwp-simple

[20:59] <masak> I'm guessing pmichaud++ did the eval above because he's thinking about these matters again.

[21:00] <colomon> sorear: I promise not to tell anyone anything they shouldn't know....

[21:02] <tadzik> UncleFester6: trying

[21:02] <UncleFester6> I asked a couple of people for feedback and am still waiting ... so if anyone wants to look and get back to me - thanks

[21:05] <pmichaud> masak:  you're correct.  and discussing things with TimToady++ and sorear++

[21:05] <pmichaud> and jnthn++

[21:05] <pmichaud> I'm afk for a bit for a walk

[21:06] *** UncleFester6_ joined
[21:06] <tipdbmp> r: say "@{[ DateTime.now.ymd ]}";

[21:06] <p6eval> rakudo 2bbe52: OUTPUT«No such method 'ymd' for invocant of type 'DateTime'␤  in block  at /tmp/qfoAzUGEQe:1␤␤»

[21:06] *** UncleFester6 left
[21:06] *** UncleFester6_ is now known as UncleFester6

[21:07] <tipdbmp> r: say "@{[ DateTime.now.year ]}";

[21:07] <p6eval> rakudo 2bbe52: OUTPUT«@2012␤»

[21:07] <tipdbmp> r: say "@{[ DateTime.now.month ]}";

[21:07] <p6eval> rakudo 2bbe52: OUTPUT«@8␤»

[21:07] <tipdbmp> r: say "@{[ DateTime.now.ymd(".") ]}";

[21:07] <p6eval> rakudo 2bbe52: OUTPUT«No such method 'ymd' for invocant of type 'DateTime'␤  in block  at /tmp/cmMPKirmss:1␤␤»

[21:08] *** UncleFester6 left
[21:08] <masak> pmichaud: discussing things here briefly with moritz++, we seem to feel that too much autoviv magic is not a good thing.

[21:08] <masak> more precisely, autoviv makes sense one or more levels down in a data structure, but it makes much less sense in an actual variable container.

[21:09] <masak> not just writes have to vivify, but also reads. and that's can-of-worms problematic.

[21:09] <pmichaud> masak: I'm leaning that way also.  moritz++'s arguments are fairly persuasive.

[21:09] <masak> aye.

[21:09] <masak> I've been leaning both ways at different times with this question.

[21:18] *** cognominal left
[21:18] *** cognominal joined
[21:18] <tadzik> phenny: tell UncleFester6 your LWP::Simple doesn't seem to build for me: "Serialization Error: Unimplemented object type 'ByteBuffer' passed to write_ref"

[21:18] <phenny> tadzik: I'll pass that on when UncleFester6 is around.

[21:18] <tadzik> phenny: thank you darling

[21:25] <sorear> colomon: so Liz and Wendy gathered two dozen of us in Perl for a small meeting to discuss stuff related to the future of Perl 5 and Perl 6 and making it work out

[21:26] <colomon> oooo, interesting

[21:27] *** cognominal left
[21:27] <sorear> and when I say Perl I'm talking about a German town of 7,000 within walking distance of both .fr and .lu

[21:30] *** hoelzro is now known as hoelzro|away

[21:30] *** hoelzro|away is now known as hoelzro

[21:31] *** MayDaniel joined
[21:35] *** hoelzro is now known as hoelzro|away

[21:37] *** jeffreykegler left
[21:40] *** jeffreykegler joined
[21:43] *** cognominal joined
[21:45] *** sorda left
[21:56] <pmurias> sorear: no matter how slow: why not try enscripten

[21:57] <pmurias> on mono

[21:58] * colomon is dying to get the full story on this meeting of the Perls, but reluctantly recognizes it might not be the best time to talk about it.  Here's hoping some sort of cunning plan was worked out!

[22:02] <pmurias> sorear: a google search seems to imply using enscripten for that might be not worth the trouble

[22:07] *** whiteknight joined
[22:07] *** whiteknight is now known as Guest25919

[22:08] <sorear> I care about size to a much greater extent than speed

[22:08] *** tokuhiro_ joined
[22:13] *** tokuhiro_ left
[22:15] *** tokuhiro_ joined
[22:32] *** topo left
[22:32] *** topo joined
[22:48] *** MayDaniel left
[22:51] *** jeffreykegler left
[22:51] *** renormalist left
[22:52] *** renormalist joined
[22:53] *** jeffreykegler joined
[23:04] *** Circlepuller joined
[23:07] *** Circlepuller_ left
[23:09] *** benabik left
[23:11] *** benabik joined
[23:26] <jeffreykegler> A question about implementing precedence in Perl 6 syntax

[23:27] <jeffreykegler> I take it that the proper way to do things is the one described in S06 

[23:27] <jeffreykegler> The tighter/looser/equiv traits and all that

[23:28] <jeffreykegler> And that the other mechanisms in STD.pm are just scaffolding to get things going

[23:50] <dalek> nqp: 6255819 | pmichaud++ | src/QAST/Operations.nqp:

[23:50] <dalek> nqp: Enable parsing of :nohandler in QAST::Op while/etc loops.

[23:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/62558198bb

[23:50] <dalek> nqp: b1d897d | pmichaud++ | src/QAST/Operations.nqp:

[23:50] <dalek> nqp: Add :nohandler option to PAST::Op loop nodes.

[23:50] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b1d897df70

[23:52] *** pmurias left
[23:58] *** tokuhiro_ left
