[00:00] *** snearch left
[00:06] <bacek_at_work> seen moritz

[00:06] <aloha> moritz was last seen in #perl6 2 hours 28 mins ago saying "hugme: add Siddhant to perl6".

[00:07] <bacek_at_work> phenny, tell moritz nqp t/nqp/60-bigint.t is failing on my box. Debian Linux/i386.

[00:07] <phenny> bacek_at_work: I'll pass that on when moritz is around.

[00:10] *** araujo joined
[00:10] *** araujo left
[00:10] *** araujo joined
[00:17] *** tokuhirom3 joined
[00:19] <colomon> japhb: as far as I know, no.  I was busy working on getting panda to work, and I don't think I took the time to properly golf and report it.

[00:28] * colomon now feels guilty

[00:29] *** Tedd1 left
[00:30] *** plobsing left
[00:32] *** plobsing joined
[00:37] *** Trashlord left
[00:55] *** icwiener left
[00:55] *** NamelessTee joined
[01:10] *** noteventime left
[01:10] <dalek> nqp/new_getprop: 242f6e5 | bacek++ | / (6 files):

[01:10] <dalek> nqp/new_getprop: Update to new version of getprop op

[01:10] <dalek> nqp/new_getprop: review: https://github.com/perl6/nqp/commit/242f6e5997

[01:10] <dalek> nqp/new_getprop: aef7cd8 | bacek++ | src/stage0/ (7 files):

[01:10] <dalek> nqp/new_getprop: Reboostrap to use new getprop op

[01:10] <dalek> nqp/new_getprop: review: https://github.com/perl6/nqp/commit/aef7cd852a

[01:11] <bacek_at_work> phenny, tell moritz feel free to merge nqp new_getprop branch if it works for you :)

[01:11] <phenny> bacek_at_work: I'll pass that on when moritz is around.

[01:13] *** scott__ joined
[01:22] *** lutok left
[01:34] * sorear re-reads S09.

[01:40] *** tokuhirom left
[01:41] <sorear> std: 4:map

[01:41] <p6eval> std 292f669: OUTPUT«ok 00:01 109m␤»

[01:42] * sorear ponders how best to implement the my @ary[4:map(*%4)] syntax

[01:43] <sorear> at issue is that :map will try to modify the "4", and fail because 4 isn't a call

[01:43] <sorear> my @ary[$x + $y :map(*%4)] needs to, somehow, avoid passing :map to &infix:<+>

[01:44] * sorear skips over the compact struct stuff since jnthn++ is worrying about selecting semantics for that

[01:46] * TimToady ponders whether my @ary[:map(*%4) $x + $y] might improve matters

[01:46] <benabik> Is the map supposed to apply to the postfix:<[ ]> ?

[01:46] *** wolfman2000 left
[01:46] <TimToady> it supposed to apply to each attempt at subscripting

[01:46] <benabik> oh.  declarative.

[01:47] <TimToady> we could just pull the :map back out of whatever is on top, if we keep the original syntax

[01:47] <sorear> TimToady: I don't think that will even parse

[01:47] <TimToady> that's the point

[01:47] <TimToady> it's available

[01:48] <sorear> TimToady: yeah, the issue is finding a good factoring of "deferring the adverb"

[01:49] <TimToady> well, it used to have a hardwired % for modular subscripting, but we generalized it...

[01:49] *** ponbiki joined
[01:49] <sorear> does my @foo[*;*] declare a rectangular or jagged array?

[01:50] <sorear> what happens if you try to put a multidimensional array in iteratey context?

[01:50] <TimToady> jagged

[01:50] <TimToady> well, we could return ((),()) and let the context decide

[01:51] <TimToady> otoh, [*] returns the top level

[01:51] <TimToady> so flat wouldn't be terrible

[01:52] <TimToady> or [**] is flat, and .list defaults to [*]

[01:52] <TimToady> anybody's guess how these things are really going to be used, but APL is a data point

[01:56] *** thou joined
[01:57] <TimToady> my gut feel is that you if you can force flat/shaped then the default wants to be finessed with parcels

[01:58] <TimToady> if explicit slicing is going in the PDL direction, then [*] might return ([],[],[])

[01:59] <TimToady> and those subarrays might actually be the subarrays if the top level is declared *

[01:59] <TimToady> well, whenever the sub-bits are really Arrays

[02:01] <TimToady> to go PDLish, we want to maintain transparency through the slice to the original as much as possible

[02:01] <TimToady> but that's not an FPish view, since the only reason for such is to do cool things with mutability

[02:02] <TimToady> so possibly available under some declarative regime, and not otherwise

[02:05] <sorear> Slicing returns something that acts like a multi-D array, right?

[02:05] <sorear> What would .keys do with a multi-d array?

[02:05] <TimToady> depends on what .values does :)

[02:06] <TimToady> if .values is flat, .keys would be (0,0), (0,1), etc

[02:07] <sorear> Would the return value actually be a multidimensional array, responding to .shape .[0;1;2] etc?

[02:07] <sorear> What is the relationship between multidimensional arrays and lists of (parcels of (parcels))?

[02:08] <TimToady> you'd at least like to be able to reconstitute your array from the keys and values, so something that doesn't lose too much info

[02:08] * sorear wonders if there should be a way to declare that lists of user-defined indexes are recursive, not just recursively enumerable

[02:09] <sorear> my @foo[1..*]; @foo[0] # this would hang in a naive implementation

[02:09] <sorear> my @foo[1,1,*+*, ... *]; @foo[4] # this would hang a smart one; maybe there is a less-contrived example

[02:09] <TimToady> that's contrary to the spirit of S09, which doesn't use [] to declare non-zero-based

[02:10] <TimToady> my @foo[list] is okay though

[02:10] <sorear> sorry, tr/[]/{}/

[02:10] <TimToady> oops

[02:10] <TimToady> mee tooo

[02:10] <TimToady> I believe there's a requirement for monotonicity

[02:11] <TimToady> or could be

[02:11] <sorear> what if the keys are not integers?

[02:11] <TimToady> you still need to be able to determine when you've overshot

[02:11] * sorear gets to S09:601

[02:12] <sorear> I thought @array[] was the same as @array

[02:12] <sorear> how eagerly is storage supposed to be allocated for multidimensional non-jagged arrays?

[02:13] <TimToady> it's possible we should have a different method for {} shape

[02:13] <sorear> s/supposed/expected/ # of course impls can cheat on this if they have a *compelling* reason

[02:13] <TimToady> I'm assuming it would be allocated asap if that is likely to run faster

[02:14] <sorear> my @huge[ ||(2 xx 128) ]; # DIHWIDT?

[02:14] <TimToady> a sparse impl can of course default elsewise

[02:14] <TimToady> my @huge[...] is SparseArray

[02:15] <TimToady> at least that's how we originally envisioned swapping out the Array for something else

[02:15] <TimToady> in this case 'is' is not derivation

[02:15] <sorear> at S09:628, does "unallocated elements" have a precise meaning?  if my impl preallocates everything it can, should it hide this?

[02:16] <TimToady> 'is' is possibly too overloaded for specifying impl of the container

[02:17] * sorear wonders how to implement S09:694

[02:18] <sorear> doesn't :724 need ||?

[02:18] <TimToady> unallocated is only meaningful for arrays of container types that can represent Nil

[02:18] <TimToady> a preallocated native array doesn't have nullable pointers, of course

[02:19] <sorear> is Nil an attribute of the container?

[02:19] <TimToady> hmm, I didn't write the *{foo} bit

[02:20] <TimToady> Nil meaning the absense of a container, if representable, or if preallocated, some bit that says "I'm not officially here"

[02:20] *** ponbiki left
[02:20] <sorear> How is this related to the notion of CORE::Nil as a type and a type object?

[02:21] <TimToady> only in the sense that = Nil might well set one of these values back to that state

[02:21] <TimToady> but it might well be putting 0 into a pointer

[02:21] <TimToady> or setting a bit in the container

[02:21] <TimToady> "I

[02:21] <TimToady> "I'm not here, use the default for the array"

[02:22] <TimToady> I think :724 is intending the * and ** to take on some of the aspects of | and ||

[02:23] <TimToady> maybe it was intended as a special form

[02:24] <TimToady> ah, that bit was all pmichaud++

[02:25] <TimToady> I think that workover of S09 was when I was suffering from severe anemia and didn't realize it; so I have little memory of it

[02:33] * sorear wanders back

[02:34] <sorear> TimToady: does @foo[1, ||@bar] mean anything?

[02:34] <sorear> I think || needs to be an immediate child of a semilist to do anything useful

[02:35] <TimToady> uh, I'd read that as @foo[1; @bar[0]; @bar[1]...

[02:36] <sorear> I'd write thaat as @foo[1; ||@bar]

[02:36] <sorear> I'm ignoring PDL stuff for now

[02:37] <TimToady> is fine for readonly semantics in the FP style

[02:37] <TimToady> or do you mean something else?

[02:37] <sorear> TimToady: what are you saying the difference between @foo[1; ||@bar] and @foo[1, ||@bar] is?

[02:37] <TimToady> I guess we have 'is PDL' as explicit right now

[02:38] <TimToady> none; just assuming the || takes it back to ; level

[02:38] <sorear> Can you elaborate on that?

[02:39] <TimToady> it will supply a missing ; if we dwim it

[02:39] <TimToady> we can require the ; for now if that's easier

[02:39] <sorear> Currently || is just a prefix operator

[02:39] <TimToady> but it must work a meta-level to a list

[02:39] <sorear> Are you suggesting making it a terminator instead, with special handling in the semilist production?

[02:40] <TimToady> well, I guess it's a normal operator if ; is a normal operator :)

[02:41] <sorear> What should happen when iterating a multidimensional hash?

[02:42] <TimToady> same thing, only different :)  # sorry, mind wandering...

[02:43] <TimToady> but as much like Arrays as possible

[02:43] <TimToady> and as much like flat Hashes as possible too

[02:43] <TimToady> or somewhere in the muddle^Wmiddle

[02:44] <TimToady> so if .values is flat, .keys are composite subscripts that could be looked up again with {||$key}

[02:46] <TimToady> probably, Hash subscripts declared with shape {Stuff; 0..*; Nonsense} would really be HoAoH

[02:50] <sorear> I think I have a mostly clear mental model now, except for the Nil bits

[02:51] <sorear> thanks

[02:52] *** envi_ joined
[02:52] <TimToady> just trying to keep a bit of a P5ish flavor on those array types that can support missing containers, but I wouldn't worry about it too hard; it's possibly something that can't be portably supported

[02:53] <sorear> it's more the semantic model of '$foo = Nil' that I don't get

[02:57] <TimToady> it just means container.reset-to-default-value, which for a normal containers default to Any

[02:57] <TimToady> but for something like a KeySet, would presumably default to False, or a KeyBag to 0

[02:57] <TimToady> Nil means "there's the absense of a value here"

[02:58] <TimToady> which assignment takes to mean something like "delete whatever's there"

[02:58] <benabik> '$f = Nil':p6 ~~ 'undef $f':p5 ??

[02:58] *** envi_ left
[02:58] <sorear> TimToady: what happens with 'my @foo; @foo[0] = 5; @foo[1] := @foo[0]; @foo[1] = Nil' ?

[02:59] <TimToady> I'd think they both to the same container, which has the value Any

[03:02] <TimToady> to me that's more like, assuming a native ptr type: my ptr @foo; @foo[0].assign(5); @foo[1] = @foo[0]; @foo[1].reset

[03:02] <TimToady> where ptr is pointing to scalar containers

[03:03] *** envi_ joined
[03:03] <TimToady> eventually we invent pointer types as natives, on some level :)

[03:03] <sorear> Is .reset different from .STORE(Nil)?

[03:03] <TimToady> though that's problemantic on a JVM, of course

[03:03] *** whiteknight left
[03:04] <TimToady> I imagine it's the same

[03:04] <TimToady> since @foo[1] = $x might have a Nil bound to $x

[03:04] <sorear> After 'my $x; my $y; $x = Nil; $y = Any; oracle($x,$y)' can &oracle tell the difference between its arguments?

[03:05] <TimToady> I don't believe so, at the language level

[03:05] <sorear> What happens when assigning Nil to aggregates?  There are bits in the spec about @foo.defined changing

[03:05] <TimToady> if an impl differentiates a real Any there from a 0 pointer, a sufficiently advance magic could tell the difference, but I don't think Perl 6 differentiates

[03:06] <TimToady> (if we do defaults right)

[03:06] *** plobsing left
[03:08] <TimToady> I suppose there's an argument that if the outermost container of @foo is really a $foo-ish thing with a default of an instantiated array, then = Nil can't undefine the default

[03:09] <TimToady> much like @foo[1] = Nil can't undefine @foo[1] if @foo defaults its subcomponents to 0

[03:09] <TimToady> but it can also be argued that the implicit scalar holding @foo has no default of Array, and = Nil really throws away the array if it's there

[03:10] <TimToady> in that mindset, @foo can become undefined

[03:10] <TimToady> so I can argue it both ways :)

[03:13] *** orafu left
[03:17] *** orafu joined
[03:17] <TimToady> dinner &

[03:17] <sorear> I've always imagined the implicity scalar holding @foo as a read-only thing, like how sub foo($x) { $x = Nil } doesn't do anything relevant

[03:19] <TimToady> I daresay that's more amenable to optimiztion

[03:19] <TimToady> but it kinda means @foo := @bar is illegal

[03:19] <TimToady> (by default)

[03:19] <TimToady> which seems a bit wrongish

[03:20] <sorear> niecza allows that because it's modifying the lexpad, not the implicit scalar

[03:20] <sorear> but I'll let you eat :)

[03:21] <TimToady> family here, so TimToady is in line for the microwave :)

[03:25] *** kshannon left
[03:25] *** kshannon joined
[03:48] *** kshannon left
[03:55] *** kshannon joined
[04:03] *** lestrrat left
[04:05] *** lestrrat joined
[04:08] *** kshannon left
[04:09] *** kshannon joined
[04:13] *** envi_ left
[04:40] *** stepnem left
[04:41] *** djanatyn left
[04:41] *** djanatyn joined
[04:46] *** stepnem joined
[04:52] *** NamelessTee left
[05:11] *** birdwindupbird joined
[05:27] *** skids left
[05:39] *** marmalade left
[05:50] *** Tedd1 joined
[05:51] *** lestrrat left
[05:52] *** lestrrat joined
[06:03] *** NamelessTee joined
[06:07] *** xinming left
[06:08] *** Trashlord joined
[06:09] *** xinming joined
[06:33] *** GlitchMr joined
[06:51] *** takesako left
[06:52] *** takesako joined
[06:59] *** NamelessTee left
[07:11] *** tarch joined
[07:11] *** wtw joined
[07:21] *** GlitchMr left
[07:24] <sorear> TimToady: what would you say about my @foo[4,:map(*%4)] ?

[07:25] <sorear> TimToady: that has the advantage of *no* special syntax -> makes Array.new(shape => ...) work better

[07:28] *** simcop2387 left
[07:32] *** simcop2387 joined
[07:33] *** tarch left
[07:38] *** `10 left
[07:52] *** `10 joined
[07:55] *** scott__ left
[08:08] *** thou left
[08:24] *** NamelessTee joined
[08:37] *** fglock joined
[08:38] <sorear> fglock1

[08:38] <sorear> !

[08:39] <fglock> sorear: o/

[08:41] <fglock> got some nice progress in perlito5 internals; most of it can be ported back (or forward) to perlito6

[08:48] <fglock> js compiled size was reduced to 420k; recompiles itself in ~11s

[08:49] <fglock> no progress in packaging for cpan

[08:51] *** slavik1 left
[08:55] *** mj41 joined
[08:56] *** am0c joined
[09:04] *** krunen left
[09:06] *** envi_ joined
[09:09] * sorear -> sleep

[09:10] <fglock> g'night

[09:24] *** lestrrat left
[09:24] *** overrosy joined
[09:25] *** lestrrat joined
[09:36] *** alester_ joined
[09:39] *** alester left
[09:39] *** alester_ is now known as alester

[09:39] *** alester left
[09:40] *** alester joined
[09:59] *** dakkar joined
[10:05] <bacek> phenny, tell jnthn Do you have any unspoken feelings to nqp's Makefiles? Or I can make them less tedious?

[10:05] <phenny> bacek: I'll pass that on when jnthn is around.

[10:10] *** nwc10 joined
[10:44] *** kaleem joined
[11:01] *** djanatyn left
[11:02] *** Tene left
[11:45] *** Tene joined
[11:46] *** djanatyn joined
[11:55] *** xinming left
[11:55] *** xinming joined
[11:56] <jnthn> phenny: tell bacek plesae don't change Makefile for now, I have a bunch of re-org of it in a branch, and I don't want to have to re-do that.

[11:56] <phenny> jnthn: I'll pass that on when bacek is around.

[11:56] <phenny> jnthn: 04 Mar 07:14Z <bacek> tell jnthn Any objections on merging nqp's kill_props_vtables branch?

[11:56] <phenny> jnthn: 10:05Z <bacek> tell jnthn Do you have any unspoken feelings to nqp's Makefiles? Or I can make them less tedious?

[11:57] <jnthn> phenny: tell bacek kill_props_vtables branch should be fine

[11:57] <phenny> jnthn: I'll pass that on when bacek is around.

[11:58] <jnthn> phenny: tell bacek oh, I see moritz++ already sorted stuff out wrt that branch :)

[11:58] <phenny> jnthn: I'll pass that on when bacek is around.

[11:58] <dalek> rakudo/nom: bc677b4 | jonathan++ | src/ (3 files):

[11:58] <dalek> rakudo/nom: Add storage space in Block for phasers, plus some methods for adding/grabbing them.

[11:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bc677b4be0

[11:58] <dalek> rakudo/nom: 753fbc5 | jonathan++ | src/Perl6/World.pm:

[11:58] <dalek> rakudo/nom: Start to break some parts of create_code_object out in to separate Perl6::World methods.

[11:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/753fbc51bd

[11:58] <dalek> rakudo/nom: 428f954 | jonathan++ | src/Perl6/World.pm:

[11:58] <dalek> rakudo/nom: Toss now-unused $slot variables.

[11:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/428f954ec4

[11:58] <dalek> rakudo/nom: a9209d1 | jonathan++ | src/Perl6/World.pm:

[11:58] <dalek> rakudo/nom: Replace some pir:: with nqp::.

[11:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a9209d1071

[11:58] <dalek> rakudo/nom: 05464d4 | jonathan++ | src/Perl6/World.pm:

[11:58] <dalek> rakudo/nom: Split the final setup of a code object out; create_code_object becomes a helper method that just delegates to the methods implemetning the various steps.

[11:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/05464d4046

[11:58] <dalek> rakudo/nom: c5e9349 | jonathan++ | src/Perl6/ (2 files):

[11:58] <dalek> rakudo/nom: Swtich routines over to creating code object and putting it in $*DECLARAND before we go parsing the body.

[11:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c5e93490c0

[11:58] <dalek> rakudo/nom: 060b8ea | jonathan++ | src/Perl6/ (2 files):

[11:58] <dalek> rakudo/nom: Similar refactor for methods and regexes.

[11:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/060b8ea29e

[11:58] <colomon> yow!

[11:59] <jnthn> o/ from GPW

[11:59] <moritz> \o

[11:59] <phenny> moritz: 00:07Z <bacek_at_work> tell moritz nqp t/nqp/60-bigint.t is failing on my box. Debian Linux/i386.

[11:59] <phenny> moritz: 01:11Z <bacek_at_work> tell moritz feel free to merge nqp new_getprop branch if it works for you :)

[11:59] <tadzik> \o

[11:59] * jnthn got wifi to work at last :)

[12:00] <colomon> o/

[12:00] <masak> o/

[12:00] <masak> I m hving keybord problem. ome key don't ork.

[12:00] <masak> :/

[12:01] <nwc10> \o/

[12:01] <tadzik> keys don't ork? orka

[12:01] <masak> nd thi i my *portble* keybord, the one I lug round becue the one on my lptop doen't ork properly...

[12:02] <masak> there' ome ort of itutionl irony in there, I'm ure.

[12:03] <jnthn> An awfuly awkard situation.

[12:04] <tadzik> afully akard

[12:05] <jnthn> It must be  pin in the 

[12:06] *** aloha left
[12:06] *** bacek_at_work left
[12:06] <nwc10> how come the perl6 hackathon seems to be at the back of this talk, not in the other room?

[12:07] <tadzik> I think it's not yet, the hackathon

[12:08] <masak> no, it hn't trted yet

[12:10] <moritz> nwc10: the hackathon officially starts in 20 minutes

[12:11] <jnthn> So we're hacking unofficially in the back of another room for now.

[12:12] <colomon> unofficial hacking!  on noez!

[12:12] <colomon> *oh

[12:13] <jnthn> Barely legal commits!

[12:14] <masak> Brely uble keybord...

[12:14] <jnthn> At least I know he can't here an assassin...

[12:14] <jnthn> *hire

[12:15] <moritz> perl6: say <good fast cheap>.pick: 2

[12:15] <p6eval> rakudo 42695e: OUTPUT«good fast␤»

[12:15] <p6eval> ..pugs b927740: OUTPUT«cheapgood␤»

[12:15] <p6eval> ..niecza v15-3-g1c4b5a7: OUTPUT«fast cheap␤»

[12:15] <masak> ell, Ctrl+V till ork, it' jut not lo going.

[12:16] <masak> er, /not//

[12:16] * masak demonstrates: "assassin..."

[12:32] *** bacek_at_work joined
[12:40] *** krunen joined
[12:40] *** aloha joined
[12:47] *** bluescreen10 joined
[12:47] *** NamelessTee left
[12:53] *** krunen left
[12:53] *** pernatiy left
[12:55] <masak> keyboard functionality restored. (GPW organizers)++

[12:57] *** krunen joined
[13:02] *** krunen left
[13:04] <moritz> bedivere++ in particular

[13:05] *** krunen joined
[13:06] <masak> ah, yes. bedivere++

[13:13] *** xinming left
[13:14] <masak> TimToady: was there ever a REDO phaser?

[13:15] <masak> or would UNDO cover more or less the same ground?

[13:15] *** xinming joined
[13:18] *** Trashlord left
[13:18] *** noteventime joined
[13:19] <masak> I guess the need for REDO isn't as big, because a redo is always triggered explicitly in the code, whereas NEXT and LAST might activate implicitly by normal loop control.

[13:20] *** Trashlord joined
[13:27] <timotimo> when i do ./perl6 doesnotexist.pl, the perl6 process just eats memory until it's OOM'd. what's going on there?

[13:28] <timotimo> this is rakudo.

[13:28] <moritz> timotimo: probably a failure in the exception handling

[13:28] <jnthn> Probably.

[13:28] <jnthn> There was a patch to that recently.

[13:28] <timotimo> i just pulled the latest nom from git

[13:28] <jnthn> So that patch musta been a bit off

[13:28] <timotimo> may be

[13:32] <moritz> I'm testing reverting that patch now

[13:33] *** simcop2387 left
[13:35] *** simcop2387 joined
[13:36] <dalek> nqp: 3332c0a | moritz++ | src/HLL/Compiler.pm:

[13:36] <dalek> nqp: Revert "Merge pull request #30 from sergot/master"

[13:36] <dalek> nqp: 

[13:36] <dalek> nqp: This reverts commit 990347106f770bec366eb27a27cbabfceb85589a, reversing

[13:36] <dalek> nqp: changes made to d44ab2eba183738e8d58079901479e5393bed7db.

[13:36] <dalek> nqp: 

[13:36] <dalek> nqp: This actually didn't produce nicer error messages, just looped infinitely.

[13:36] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3332c0a3f9

[13:37] <dalek> rakudo/nom: 192c8f5 | moritz++ | tools/build/NQP_REVISION:

[13:37] <dalek> rakudo/nom: bump NQP to improve error messages

[13:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/192c8f50fc

[13:38] <moritz> timotimo++ # fixed

[13:38] <timotimo> thanks

[13:38] *** am0c left
[13:50] <masak> how do I compare a returned value against Nil in src/Perl6/Actions.pm ?

[13:50] *** pernatiy joined
[13:56] <dalek> rakudo/macros3: fc713e3 | masak++ | src/ (2 files):

[13:56] <dalek> rakudo/macros3: check whether an AST comes from a quasi or not

[13:56] <dalek> rakudo/macros3: review: https://github.com/rakudo/rakudo/commit/fc713e301b

[13:56] <masak> moritz: the test you added now passes.

[13:58] <dalek> roast: 40ea90b | masak++ | S06-macros/macros-d1.t:

[13:58] <dalek> roast: [S06-macros/macros-d1.t] unfudged for Rakudo

[13:58] <dalek> roast: review: https://github.com/perl6/roast/commit/40ea90bbd3

[13:59] <moritz> masak: \o/

[13:59] <masak> \o/

[13:59] <masak> I want to make one more commit. then I want to run a full spectest.

[13:59] <masak> but in principle, we're ready to merge macros3.

[14:00] *** GlitchMr joined
[14:00] *** _ilbot left
[14:00] *** _ilbot joined
[14:02] <[Coke]> MACROSS 3!

[14:02] <masak> well...

[14:03] <masak> I have gifted bug-finders in the same room.

[14:03] * nwc10 read that as maros3, and wondered why we need 2 more

[14:03] <masak> they found a problem with my branch :)

[14:03] <jnthn> mwaha

[14:03] <jnthn> nqp::istype($thingy, $*W.find_symbol(['Nil']))

[14:04] *** nwc10 left
[14:07] <masak> danke.

[14:08] <moritz> nom: say Nil.WHAT

[14:08] <p6eval> rakudo 192c8f: OUTPUT«Nil␤»

[14:11] <masak> nom: say Nil.HOW.WHAT

[14:11] <p6eval> rakudo 192c8f: OUTPUT«Method 'gist' not found for invocant of class 'Perl6::Metamodel::ClassHOW'␤  in sub say at src/gen/CORE.setting:6168␤  in block <anon> at /tmp/009gPae7oF:1␤␤»

[14:12] <masak> aww

[14:12] <masak> nom: say Nil.HOW.^name

[14:12] <jnthn> :P

[14:12] <p6eval> rakudo 192c8f: OUTPUT«Method 'dispatch:<.^>' not found for invocant of class 'Perl6::Metamodel::ClassHOW'␤  in block <anon> at /tmp/xiN_OGT3SC:1␤␤»

[14:12] <masak> nom: say Nil.HOW.name

[14:12] <p6eval> rakudo 192c8f: OUTPUT«too few positional arguments: 1 passed, 2 (or more) expected␤  in any name at src/gen/Metamodel.pm:58␤  in block <anon> at /tmp/8qL935oVK_:1␤␤»

[14:12] <masak> oh right.

[14:12] <masak> not what I wanted.

[14:12] <moritz> it's Perl6::Metamodel::ClassHOW :-)

[14:12] <masak> d'oh :)

[14:12] <moritz> it says so in the error message, you know :-)

[14:12] <masak> :)

[14:13] <masak> how do I get a list of methods of Perl6::Metamodel::ClassHOW?

[14:14] <jnthn> masak: With difficulty at the moment, since you'd get back a list of Parrot subs.

[14:14] <jnthn> Which won't tend to do the right thing.

[14:15] *** tokuhirom joined
[14:23] <tadzik> jnthn: https://gist.github.com/1978512

[14:30] <noteventime> I can't quite seem to figure out the state of Perl6 support in the cperl-mode shipped with emacs24.

[14:33] <noteventime> Do I need to install some patched version?

[14:33] <tadzik> I think there's a special Perl 6 mode for emacs

[14:33] <tadzik> there's something linked on http://perl6.org/whatever/

[14:35] <masak> noteventime: cperl-mode doesn't have any explicit Perl 6 support, AFAIK.

[14:36] <masak> however, in my experience it's fault-tolerant enough to do a decent job at highlighting arbitrary Perl 6 code.

[14:36] <masak> it's a rewrite with the explicit goal of being fault-tolerant. they did a good job.

[14:40] <noteventime> I'll just go with the default cperl-mode until I have any issues with it then

[14:45] <masak> two outstanding problems with the macros3 branch:

[14:45] *** skids joined
[14:45] <masak> (1) variable lookup doesn't work across a macro boundary

[14:46] <masak> (2) empty macro doesn't return quasi {} properly

[14:47] <moritz> I don't think that (1) should block merging

[14:50] *** xinming left
[14:52] *** xinming joined
[14:52] <masak> here's an example:

[14:53] <masak> macro foo($a) { $a }; my $x = 42; say $x

[14:53] <masak> er

[14:53] <masak> macro foo($a) { $a }; my $x = 42; say foo $x

[14:53] <masak> that gives a Null PMC access.

[14:55] <moritz> oooh, the good ol' times of Null PMC Access are back \o/

[14:55] <masak> it just took macros to make that "feature" work again. :)

[14:57] *** PacoAir joined
[14:58] <masak> nom: say ~Nil

[14:58] <p6eval> rakudo 192c8f: OUTPUT«␤»

[14:58] <masak> niecza: ~nil

[14:58] <p6eval> niecza v15-3-g1c4b5a7: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤      'nil' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1362 (die @ 3) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 33) ␤  at /home/…

[14:58] <masak> niecza: ~Nil

[14:58] <p6eval> niecza v15-3-g1c4b5a7:  ( no output )

[15:00] <dalek> rakudo/macros3: c781128 | masak++ | src/Perl6/Actions.pm:

[15:00] <dalek> rakudo/macros3: allow macros to return Nil

[15:00] <dalek> rakudo/macros3: 

[15:00] <dalek> rakudo/macros3: Nil will be inserted into the mainline. This isn't spec, but

[15:00] <dalek> rakudo/macros3: it makes for shorter macro definitions. :-)

[15:00] <dalek> rakudo/macros3: review: https://github.com/rakudo/rakudo/commit/c78112819d

[15:00] <masak> that's problem (2), fix'd. jnthn++

[15:01] <masak> as to problem (1), I don't understand why it's occurring.

[15:01] * masak works on his talk a little

[15:04] <masak> random thought: maybe macros should be able to return several AST objects, comma-separated?

[15:09] <timotimo> would they be collated at the level above that? if so, why not do that collation in the macro itself? (if so, why not let the comma operator do that?)

[15:10] <masak> nom: my @a = 1, 2, 3; say @a.item

[15:10] <p6eval> rakudo 192c8f: OUTPUT«1 2 3␤»

[15:10] <masak> nom: my @a = 1, 2, 3; say $@a

[15:10] <p6eval> rakudo 192c8f: OUTPUT«===SORRY!===␤Invalid hard reference syntax at line 1, near "@a"␤»

[15:10] <masak> nom: my @a = 1, 2, 3; say $(@a)

[15:10] <p6eval> rakudo 192c8f: OUTPUT«1 2 3␤»

[15:15] *** jaldhar left
[15:15] *** _jaldhar joined
[15:21] *** _jaldhar left
[15:22] *** tokuhirom left
[15:30] *** noteventime left
[15:33] <moritz> .u checkmark

[15:33] <phenny> moritz: Sorry, no results for 'checkmark'.

[15:34] <jnthn> .u tick

[15:34] <phenny> U+27E4 WHITE SQUARE WITH LEFTWARDS TICK (⟤)

[15:34] <flussence> .u 2713

[15:34] <phenny> U+2713 CHECK MARK (✓)

[15:34] <flussence> (I have the number memorised for some reason :)

[15:37] <dalek> roast: 31a78c0 | jonathan++ | S04-phasers/start.t:

[15:37] <dalek> roast: Rakudo unfudge.

[15:37] <dalek> roast: review: https://github.com/perl6/roast/commit/31a78c09a3

[15:38] <rafl> having made the mistake of not involving perl 6 folks as much as i should've in last year's summer of code organisation, i'm trying to do better this time around

[15:38] <rafl> https://github.com/rafl/tpf-soc/blob/master/org-application is the application as an organisation i'll be sending to google in a few days

[15:39] <rafl> if any one of you had any input on that, i'd love to hear it

[15:39] *** slavik1 joined
[15:39] <masak> .u 047C

[15:39] <phenny> U+047C CYRILLIC CAPITAL LETTER OMEGA WITH TITLO (Ѽ)

[15:41] <moritz> hugme: list projects

[15:41] <hugme> moritz: I know about Math-Model, Math-RungeKutta, MiniDBI, bench-scripts, book, gge, hugme, ilbot, java2perl6, json, modules.perl6.org, november, nqp-rx, nqpbook, perl6, perl6-examples, perl6-wtop, proto, pugs, rakudo, star, svg-matchdumper, svg-plot, tardis, try.rakudo.org, tufte, ufo, web, yapsi

[15:41] <moritz> hugme: add tadzik to svg-plot

[15:41] * hugme hugs tadzik. Welcome to svg-plot!

[15:42] * moritz should teach hugme to merge pull requests too :-)

[15:45] *** Psyche^ joined
[15:46] *** wtw left
[15:48] <[Coke]> http://feather.perl6.nl/~coke/fudge.diff , .spec_config

[15:49] *** Patterner left
[15:49] *** Psyche^ is now known as Patterner

[15:49] <[Coke]> I'm also tempted to move fudge to bin/fudge in roast.

[15:50] <moritz> [Coke]: can you give a verbal summary of what .spec_config does?

[15:51] <[Coke]> abstracts out "how to run perl6"

[15:51] <[Coke]> so that we can more easily share testing tools.

[15:51] <moritz> then I'm all for it :-)

[15:51] <[Coke]> Since the top 3 each have their own invocation, and pugs is getting more complex every time I talk to au. ;)

[15:51] <moritz> :-)

[15:52] <[Coke]> I'm happy for a better name.

[15:52] <moritz> we should make Test::Util read that file too

[15:52] <[Coke]> https://gist.github.com/1511810

[15:52] <[Coke]> ah, packages/Test/Util ?

[15:53] <moritz> yes

[15:53] <[Coke]> ah, sure.

[15:55] <[Coke]> moritz: make it available as %Test::Util::Config ?

[15:56] *** bluescreen10 left
[15:57] *** att left
[15:57] <moritz> something like that

[15:57] <[Coke]> moritz: make it available as %Test::Util::Config ?

[15:57] <[Coke]> ww.

[15:58] *** kaare_ joined
[15:58] *** envi_ left
[15:59] <[Coke]> Urk. Test::Util is perl6.

[15:59] <[Coke]> (I was trying to include it in the perl5 fudge ;)

[15:59] <dalek> rakudo/nom: eebcd27 | jonathan++ | src/Perl6/ (2 files):

[15:59] <dalek> rakudo/nom: Refactor pblock and block to make the code object before parsing the block.

[15:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eebcd27c37

[15:59] <dalek> rakudo/nom: 3479bec | jonathan++ | src/Perl6/Grammar.pm:

[15:59] <dalek> rakudo/nom: Add stub parsing for missing phasers and re-organize them to follow the ordering in STD.

[15:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3479bec9bd

[15:59] <dalek> rakudo/nom: b771b34 | jonathan++ | src/Perl6/ (2 files):

[15:59] <dalek> rakudo/nom: Small refactor to phaser handling so we'll be able to attach phasers to blocks.

[15:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b771b344dd

[15:59] <dalek> rakudo/nom: a6d75bc | jonathan++ | src/Perl6/ (3 files):

[15:59] <dalek> rakudo/nom: First crack at implementing ENTER phasers.

[15:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a6d75bccbd

[15:59] <dalek> rakudo/nom: 1a49d73 | jonathan++ | src/Perl6/ (3 files):

[15:59] <dalek> rakudo/nom: Implement START phaser.

[15:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1a49d73e06

[15:59] <dalek> rakudo/nom: 84e7c42 | jonathan++ | t/spectest.data:

[15:59] <dalek> rakudo/nom: Run S04-phasers/start.t.

[15:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/84e7c42ab8

[16:01] <masak> perl6: say .5

[16:01] <p6eval> pugs b927740, rakudo 192c8f, niecza v15-3-g1c4b5a7: OUTPUT«0.5␤»

[16:01] <masak> perl6: say 5.

[16:01] <p6eval> pugs b927740: OUTPUT«*** ␤    Unexpected end of input␤    expecting ".", "\187", ">>", "=", "^", operator name, qualified identifier, variable name, "...", "--", "++", "i", array subscript, hash subscript or code subscript␤    at /tmp/iD6hsLvD05 line 1, column 7␤»

[16:01] <p6eval> ..niecza v15-3-g1c4b5a7: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Confused at /tmp/Ee6jP8KUUL line 1:␤------> [32msay 5[33m⏏[31m.[0m␤␤Parse failed␤␤»

[16:01] <p6eval> ..rakudo 192c8f: OUTPUT«===SORRY!===␤Confused␤at /tmp/TzDyMsPyDv:1␤»

[16:02] <masak> why is "5." disallowed again?

[16:02] <masak> (besides it being quite a useless way of writing a Num, I guess)

[16:02] <moritz> probably to avoid ambiguity with other stuff

[16:02] <masak> yeah, that's my thought.

[16:03] *** NamelessTee joined
[16:03] <moritz> just allow it locally, and see what breaks :-)

[16:03] <masak> ah, things like "5..abs" would be ambiguous.

[16:03] *** MayDaniel joined
[16:03] <moritz> well, LTM would disambiguate it

[16:03] <moritz> but... not the way that people would want

[16:04] *** Grrrr left
[16:05] <masak> :)

[16:06] <masak> I'm not sure LTM would help, if some number rule already gobbled the "5."

[16:06] <moritz> well, tne number rule eats the '5.', so it parses as (5.).abs

[16:07] <PerlJam> ranges would need whitespace

[16:08] *** jferrero joined
[16:09] <jnthn> That'd kinda suck.

[16:10] *** bluescreen10 joined
[16:14] <masak> yeah. better to outlaw "5.", I think.

[16:15] <dalek> specs: 3fbe6f7 | larry++ | S09-data.pod:

[16:15] <dalek> specs: subscript mapping now [4,:map(*%4)], sorear++

[16:15] <dalek> specs: review: https://github.com/perl6/specs/commit/3fbe6f7afc

[16:15] <masak> the subscript mappring syntax keeps jumping around :)

[16:16] <masak> mapping*

[16:16] *** marmalade joined
[16:19] *** kaleem left
[16:19] <TimToady> this can be matched with a signature, which can also enforce a single "positional"

[16:19] <TimToady> and it's obvious what the syntax of additional modifiers might be

[16:20] <[Coke]> S16-filehandles/open.t - shouldn't there be a close between the open and unlink?

[16:20] <colomon> [Coke]: yes

[16:21] <TimToady> either that, or it's intended to fail on Windows :)

[16:21] <[Coke]> pugs doesn't error out, but isn't deleting the files, either.

[16:21] <[Coke]> I suspect that many usages of unlink() in roast need to be updated.

[16:22] <TimToady> they should not be depending on Unix semantics

[16:24] <dalek> rakudo/nom: 4e02c27 | jonathan++ | src/Perl6/ (2 files):

[16:24] <dalek> rakudo/nom: Attach FIRST/NEXT/LAST phasers to blocks, though we don't do anything with them yet.

[16:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4e02c27195

[16:24] <dalek> rakudo/nom: b4b9971 | jonathan++ | src/core/MapIter.pm:

[16:24] <dalek> rakudo/nom: Run the NEXT and LAST phasers for for loops.

[16:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b4b9971207

[16:25] <masak> jnthn++

[16:25] <[Coke]> yikes.

[16:29] <masak> [Coke]: hackathon :)

[16:29] <[Coke]> ahhhh.

[16:29] <colomon> get FIRST working!  get FIRST working!  ;)

[16:29] <[Coke]> let me know when you close up shop for the day, I'll kick off a spectestrun.

[16:29] * masak .oO( jnthn++ does FIRST last )

[16:29] <jnthn> :D

[16:30] * jnthn is hacking on FIRST now

[16:32] * [Coke] really should just automate the daily run on feather.

[16:32] <colomon> +1

[16:32] <masak> aye.

[16:33] * [Coke] should also push this all into a repo in github.

[16:34] <[Coke]> (rather than just the results in a gist)

[16:34] *** havenn joined
[16:34] <[Coke]> 1st things 1st.

[16:34] *** fglock left
[16:34] <masak> a gist *is* a repo in github ;)

[16:37] *** NamelessTee left
[16:37] <cognominal_> there may be no activity on #phasers but jthn is active on phasers.

[16:37] <colomon> is his work stunning?

[16:38] <masak> jnthn: it's nice to see Rakudo finally having ENTER phasers :)

[16:38] *** thou joined
[16:38] <masak> (Yapsi has had them for almost a year now)

[16:39] <jnthn> colomon: I wouldn't bank on it.

[16:42] *** Grrrr joined
[16:43] <skids> .oO(disruptors?)

[16:44] <TimToady> phenny: tell Radvendii http://irclog.perlgeek.de/perl6/2012-03-04#i_5244895 is why we always use looser/tighter precedence instead of higher/lower; it's clearer which way the metaphor maps, especially when your precedence table is printed upside-down

[16:44] <phenny> TimToady: I'll pass that on when Radvendii is around.

[16:47] <[Coke]> masak: well, make it a "real" repo. right now the gist is just the one file, though I have other things... hiding in it.

[16:47] <[Coke]> (in my local copy)

[16:48] <[Coke]> ok, if I have a crontab on feather... does it respect my timezone? 

[16:48] <[Coke]> (I'd like to have it always run at, say, noon EST.)

[16:49] * TimToady has never heard of such a thing

[16:49] <TimToady> it would be pretty easy to write a filter though

[16:59] *** jferrero left
[17:01] * [Coke] sets it for sixpm featherlocal. seems to be running now.

[17:01] *** huf is now known as libeleral

[17:01] * [Coke] did everything but "paste to IRC" and "git push" (since one requires a bot and the other requires a password)

[17:02] *** jferrero joined
[17:03] *** libeleral is now known as huf

[17:12] <sorear> good * #perl6

[17:13] *** fglock joined
[17:13] <colomon> \o

[17:13] <fglock> o/

[17:15] *** birdwindupbird left
[17:15] <TimToady> ⌽

[17:16] <TimToady> (samurai about to attack)

[17:16] <sorear> ø

[17:17] <sorear> φ θ

[17:18] * TimToady notes the association of "line" with "death" and "knife" in 列

[17:19] <masak> Ꝋ ø

[17:20] <TimToady> "Add stub parsing for missing phasers" --> "Next time you miss phasers we'll make you parse stubs"

[17:24] <jnthn> :D

[17:25] *** mj41 left
[17:27] *** cogno joined
[17:27] <jnthn> Actually, will be on way home from GPW at the time of the next #phasers...

[17:27] <jnthn> Looks like I'll be parsing stubs all flight long.

[17:28] <masak> I'll be helping you.

[17:29] <jnthn> phew, parsing stubs alone would suck

[17:31] *** cogno left
[17:34] *** simcop2387 left
[17:34] <dalek> rakudo/nom: 5c1b4e6 | jonathan++ | src/ (4 files):

[17:34] <dalek> rakudo/nom: Implement FIRST.

[17:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5c1b4e612f

[17:34] <dalek> rakudo/nom: 53aa9c6 | jonathan++ | t/spectest.data:

[17:34] <dalek> rakudo/nom: Run S04-phasers/first.t.

[17:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/53aa9c6c48

[17:35] *** simcop2387 joined
[17:36] <dalek> features: 4f01872 | jonathan++ | features.json:

[17:36] <dalek> features: Couple of phasers updates for Rakudo.

[17:36] <dalek> features: review: https://github.com/perl6/features/commit/4f01872349

[17:36] <colomon> FIRST!  \o/

[17:36] <jnthn> SECOND! \o/

[17:36] * masak .oO( jnthn didn't implement FIRST first )

[17:37] <masak> I'll buy a beer to the first person who proof-of-concepts the SECOND phaser.

[17:37] <masak> jnthn tells me adding custom phasers is entirely feasible.

[17:37] <jnthn> I didn't say it wsa entirely easy. :)

[17:41] <tadzik> seen jasonmay

[17:41] <aloha> jasonmay was last seen in #perl6 16 days 8 hours ago joining the channel.

[17:42] <TimToady> and the SECOND phaser would fire off every second, right ;)

[17:42] <masak> :P

[17:42] <masak> then someone should implement SECOND_LAST :>

[17:43] <[Coke]> so, kicked off the tri-spec run at noon. niecza is nearly done (S32) pugs is long done. rakudo is still at S14.

[17:43] <TimToady> SECOND_TO_LAST would be a bit harder

[17:43] <tadzik> is there a short for writing something equal to »foo => 'foo'«?

[17:44] *** lestrrat left
[17:44] <TimToady> pugs sees the fire and the faucet and the bucket, says "It can be proven", and falls back asleep

[17:44] *** lestrrat joined
[17:45] <masak> tadzik: no, and I'm not sure there should be. :)

[17:46] <TimToady> tadzik: not unless you happen to have a $foo variable containing 'foo'

[17:46] <masak> :'foo'

[17:46] <masak> :P

[17:46] *** vlkv joined
[17:46] *** vlkv is now known as gv

[17:46] <masak> that's the syntax I'd think it should have if I thought it should have any.

[17:47] <sorear> pfffness

[17:47] <TimToady> perl6: say (foo => 'foo).kv.all == 'foo'

[17:47] <p6eval> pugs b927740: OUTPUT«*** ␤    Unexpected "foo"␤    expecting term postfix, operator or ")"␤    at /tmp/tQcMz9oXlJ line 1, column 30␤»

[17:47] <p6eval> ..niecza v15-3-g1c4b5a7: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Two terms in a row at /tmp/7anuUpYV3g line 1:␤------> [32msay (foo => 'foo).kv.all == '[33m⏏[31mfoo'[0m␤␤Parse failed␤␤»

[17:47] <p6eval> ..rakudo b4b997: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 2␤»

[17:47] <sorear> jnthn is getting further ahead :D

[17:47] <sorear> std: my @foo[2+2]

[17:47] <p6eval> std 292f669: OUTPUT«ok 00:01 111m␤»

[17:47] <TimToady> aww, pairs oughta have a .kv method...

[17:47] <sorear> std: my @foo[--> int]

[17:47] <p6eval> std 292f669: OUTPUT«[31m===[0mSORRY![31m===[0m␤Preceding context expects a term, but found infix > instead at /tmp/pQo9xE98rI line 1:␤------> [32mmy @foo[--[33m⏏[31m> int][0m␤Parse failed␤FAILED 00:01 110m␤»

[17:48] <jnthn> sorear: Don't worry, I'm going on vacation later this month :)

[17:48] <sorear> TimToady: 'foo ?  I think you have lisp on the brane again :p

[17:48] <masak> sorear: we've plugged him into a Perl 6 treadmill, and he's been running all day! o.O

[17:48] <TimToady> perl6: say (foo => 'foo').kv.all == 'foo'

[17:48] <p6eval> rakudo b4b997: OUTPUT«all(True, True)␤»

[17:48] <p6eval> ..pugs b927740: OUTPUT«all(VBool True)␤»

[17:48] <p6eval> ..niecza v15-3-g1c4b5a7: OUTPUT«Unhandled exception: Cannot parse number: foo␤  at /home/p6eval/niecza/lib/CORE.setting line 1362 (die @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3401 (ANON @ 10) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3403 (NumSyntax.str2num @ 4) ␤  at /…

[17:48] <TimToady> \o/

[17:48] <sorear> n: say (foo => 'foo').kv.all eq 'foo'

[17:48] <p6eval> niecza v15-3-g1c4b5a7: OUTPUT«all(Bool::True, Bool::True)␤»

[17:49] <TimToady> oh, duh

[17:49] <PerlJam> niecza++

[17:49] <PerlJam> :-)

[17:49] <masak> moritz++ # one-letter aliases for everything

[17:49] <TimToady> n is for nom, right?  :)

[17:50] <masak> no, silly. b is for rakudo :P

[17:50] <sorear> I maintain that ŋ is for rakudo

[17:51] *** kaleem joined
[17:52] <masak> then č is for Nieča :)

[17:52] <jnthn> Guess Rakudo could be ㅇ too in that case :)

[17:52] * [Coke] wonders where mail sent on feather goes to.

[17:52] <sorear> .u ㅇ

[17:52] <phenny> U+3147 HANGUL LETTER IEUNG (ㅇ)

[17:54] <sorear> what is the rationale for that?

[17:54] *** mj41 joined
[17:54] <sorear> 楽: say "Hello, world"

[17:54] <jnthn> Pronounced ng

[17:54] <jnthn> iirc

[17:55] <TimToady> obviously perlito should be º

[17:55] <[Coke]> # 03/05/2012 - rakudo++ ; niecza (96.32%); pugs (30.97%)

[17:55] <[Coke]> "niecza",     20306,     9,   749,  1540, 22604, 23759

[17:55] <[Coke]> "pugs"  ,      6529,    36,  2838,  1645, 11047, 23568

[17:55] <[Coke]> "rakudo",     21080,    30,   621,  1886, 23617, 24026

[17:56] <sorear> NINETY SIX?  *sobs melodramatically*

[17:56] <TimToady> obviously std must be 蝶

[17:57] <masak> sorear: I'm secretly rooting for your team. hang in there.

[17:57] <sorear> mm, Ydie2 Wjeob チョウ butterfly

[17:59] *** Chillance joined
[17:59] <[Coke]> new url for the gist is https://gist.github.com/1476841#file_perl6_pass_rates

[18:00] <[Coke]> (unfortunately, it failed to update the file properly when run via cron.

[18:04] <[Coke]> (fixed)

[18:06] <[Coke]> masak: when you're done boosting rakudo with macros work, could use your help with my pugs problem. ;)

[18:06] <dalek> roast: eb9656a | jonathan++ | S04-phasers/ascending-order.t:

[18:06] <dalek> roast: Correct a test.

[18:06] <dalek> roast: review: https://github.com/perl6/roast/commit/eb9656aeda

[18:07] *** ksi joined
[18:08] <dalek> rakudo/nom: 98f9b74 | jonathan++ | src/Perl6/ (2 files):

[18:08] <dalek> rakudo/nom: Fix use of phasers in the mainline.

[18:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/98f9b74176

[18:08] <dalek> rakudo/nom: 3c5838b | jonathan++ | t/spectest.data:

[18:08] <dalek> rakudo/nom: Run S04-phasers/ascending-order.t.

[18:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3c5838ba29

[18:08] <jnthn> Team hackathon are now going for food and BEER. \o/ o/

[18:13] *** dakkar left
[18:15] *** havenn left
[18:19] <dalek> rakudo/world-API: f1b49f2 | moritz++ | src/ (4 files):

[18:19] <dalek> rakudo/world-API: start passing $/ to Perl6::World methods to make error reporting easier

[18:19] <dalek> rakudo/world-API: review: https://github.com/rakudo/rakudo/commit/f1b49f2159

[18:21] <moritz> n: constant fib = 1, 1, { $^a + $^b } ... *; say fib[10]

[18:21] <p6eval> niecza v15-3-g1c4b5a7: OUTPUT«Unhandled exception: System.NullReferenceException: Object reference not set to an instance of an object␤  at Niecza.Kernel.ToComposable (Niecza.STable arg, Niecza.STable cls) [0x00000] in <filename unknown>:0 ␤  at Niecza.Kernel.ApplyRoleToClass (Niecza.ST…

[18:26] *** havenn joined
[18:27] *** cogno joined
[18:30] <TimToady> moritz: niecza still needs the sigil there

[18:34] *** cogno left
[18:49] *** kaleem left
[18:52] *** ggoebel left
[18:52] *** localhost left
[18:54] *** localhost joined
[18:55] *** MayDaniel left
[18:56] *** ggoebel joined
[19:01] *** noteventime joined
[19:10] *** xenu left
[19:13] *** xenu joined
[19:13] *** birdwindupbird joined
[19:23] <GlitchMr> perl6: /\p{Zs}/

[19:23] <p6eval> niecza v15-3-g1c4b5a7: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unsupported use of \p{Zs}; in Perl 6 please use <+isZs> at /tmp/B16ggwOIAZ line 1:␤------> [32m/\p{Zs}[33m⏏[31m/[0m␤␤Parse failed␤␤»

[19:23] <p6eval> ..rakudo 3c5838: OUTPUT«===SORRY!===␤Unrecognized backslash sequence at line 1, near "{Zs}/"␤»

[19:23] <p6eval> ..pugs b927740: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20111008/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HAND…

[19:23] <GlitchMr> Thanks :)

[19:24] <GlitchMr> niecza: /\x{09}/

[19:24] <p6eval> niecza v15-3-g1c4b5a7: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unrecognized regex backslash sequence at /tmp/zbxou4P0yp line 1:␤------> [32m/\[33m⏏[31mx{09}/[0m␤␤Action method backslash:oops not yet implemented at /tmp/zbxou4P0yp line 1:␤------> [32m/\x[33m⏏[31m{09}/[0m␤␤Unsuppor…

[19:24] <TimToady> hmm, that's probably obsolete

[19:24] <TimToady> or escent

[19:25] <GlitchMr> I wanted to check what should I use instead.

[19:25] <TimToady> anyhoo, it'll be changing to <:Zs>

[19:25] <TimToady> don't know if anyone implements it that way yet

[19:26] <TimToady> perl6: say 'A' ~~ /<:Lu>/

[19:26] <p6eval> rakudo 3c5838: OUTPUT«=> <A>␤␤»

[19:26] <p6eval> ..niecza v15-3-g1c4b5a7: OUTPUT«#<match from(0) to(1) text(A) pos([].list) named({}.hash)>␤»

[19:26] <p6eval> ..pugs b927740: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20111008/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HAND…

[19:26] <TimToady> okay, looks like they do; the error message is rong

[19:27] <GlitchMr> How can I match Unicode character beyond first 256 characters?

[19:27] <TimToady> just put it in your program, for one

[19:27] <TimToady> Perl 6 programs are Unicode

[19:27] <GlitchMr> But I want to match BOM

[19:27] <TimToady> \x works

[19:27] <TimToady> \xFFEF

[19:27] <GlitchMr> I see...

[19:28] <TimToady> or \x[FFEF]

[19:28] <TimToady> er, FEFF

[19:29] <TimToady> or \c[ZERO WIDTH NO-BREAK SPACE]

[19:30] <GlitchMr> perl6: /<[\s]>/ ~~ ' '

[19:30] <p6eval> rakudo 3c5838, niecza v15-3-g1c4b5a7:  ( no output )

[19:30] <p6eval> ..pugs b927740: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20111008/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HAND…

[19:30] <GlitchMr> ... makes sense...

[19:30] <GlitchMr> perl6: print /<[\s]>/ ~~ ' '

[19:30] <p6eval> rakudo 3c5838, niecza v15-3-g1c4b5a7: OUTPUT«False»

[19:30] <p6eval> ..pugs b927740: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20111008/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HAND…

[19:31] <GlitchMr> I guess I will have to do it outside group

[19:31] <GlitchMr> ... Or maybe I have switched the order...

[19:41] *** localhost left
[19:53] *** pernatiy left
[19:59] *** jferrero left
[20:00] *** fglock left
[20:02] *** jferrero joined
[20:05] *** havenn left
[20:15] <dalek> std: 1ad3292 | larry++ | STD.pm6:

[20:15] <dalek> std: give modern advice on \p and \P

[20:15] <dalek> std: review: https://github.com/perl6/std/commit/1ad3292d73

[20:18] *** M_o_C joined
[20:20] *** kmwallio joined
[20:21] <[Coke]> Aloha: seen au?

[20:21] <aloha> [Coke]: au was last seen in #perl6 1 days ago joining the channel.

[20:23] *** Trashlord left
[20:26] *** birdwindupbird left
[20:27] *** pyrimidine joined
[20:40] *** pernatiy joined
[20:49] *** y3llow left
[20:49] *** pothos left
[20:50] *** y3llow joined
[20:50] *** pothos joined
[20:51] *** y3llow left
[20:52] *** y3llow joined
[20:53] *** pothos left
[20:53] *** pothos joined
[20:54] *** y3llow left
[20:54] *** y3llow joined
[20:56] *** y3llow left
[20:57] *** y3llow joined
[20:57] *** pothos left
[20:57] *** pothos joined
[20:59] *** y3llow left
[20:59] *** y3llow joined
[21:00] *** pothos left
[21:00] *** pothos joined
[21:01] *** y3llow left
[21:02] *** y3llow joined
[21:03] *** pothos left
[21:03] *** pothos joined
[21:04] *** y3llow left
[21:04] *** y3llow joined
[21:06] *** pothos left
[21:06] *** y3llow left
[21:06] *** pothos joined
[21:07] *** y3llow joined
[21:09] *** y3llow left
[21:09] *** y3llow joined
[21:09] *** pothos left
[21:09] <TimToady> pothos, y3llow: your connections are flapping

[21:10] *** pothos joined
[21:11] <TimToady> std: /\p{Lu}/

[21:11] <p6eval> std 292f669: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of \p{Lu}; in Perl 6 please use <+isLu> at /tmp/oE_10basgQ line 1:␤------> [32m/\p{Lu}[33m⏏[31m/[0m␤Parse failed␤FAILED 00:01 109m␤»

[21:11] *** y3llow left
[21:11] <TimToady> evalbot rebuild std

[21:11] <p6eval> OK (started asynchronously)

[21:11] <moritz> why not <:Lu> ?

[21:11] <TimToady> ^^

[21:11] *** y3llow joined
[21:12] <moritz> oh :-)

[21:12] *** pothos left
[21:13] *** GlitchMr left
[21:13] *** pothos joined
[21:13] <dalek> Rebuild of std complete.

[21:13] <TimToady> std: /\p{Lu}/

[21:13] <p6eval> std 1ad3292: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of \p{Lu}; in Perl 6 please use <:Lu> at /tmp/8ID3nkdwSa line 1:␤------> [32m/\p{Lu}[33m⏏[31m/[0m␤Parse failed␤FAILED 00:01 109m␤»

[21:14] *** y3llow left
[21:14] *** y3llow joined
[21:15] *** pothos left
[21:16] *** pothos joined
[21:16] *** y3llow left
[21:16] *** y3llow joined
[21:18] *** pothos left
[21:18] *** y3llow left
[21:19] *** pothos joined
[21:19] *** y3llow joined
[21:19] *** alester left
[21:21] *** pothos left
[21:21] *** kaare_ left
[21:22] *** pothos joined
[21:22] *** jferrero left
[21:24] *** pothos left
[21:24] *** pothos joined
[21:25] *** jferrero joined
[21:27] *** pothos left
[21:27] *** pothos joined
[21:32] *** wooden joined
[21:32] *** wooden left
[21:32] *** wooden joined
[21:36] *** havenn joined
[21:44] *** ksi left
[21:50] *** bluescreen10 left
[21:56] *** autarch joined
[21:56] <autarch> TimToady: ping

[21:56] <autarch> I'm writing an article for LWN about the state of Perl 5

[21:56] <autarch> it has a section on 5 vs 6 - I'd love to have you review that (and the rest if you're interested)

[21:59] <autarch> seen TimToady

[21:59] <aloha> TimToady was last seen in #perl6 46 mins 13 seconds ago saying "std: /\p{Lu}/".

[22:02] *** lestrrat left
[22:03] <autarch> TimToady: there's another part about your relationship to Perl 5 I'd also like your review on

[22:03] *** lestrrat joined
[22:11] *** skids left
[22:15] <autarch> the article is here in case anyone else wants to look - http://paste.scsys.co.uk/185314

[22:24] *** envi_ joined
[22:25] <PerlJam> autarch: nice article from what I've read so far

[22:25] <PerlJam> (up to the history section)

[22:25] <pyrimidine> autarch: nice summary.

[22:25] <autarch> cool, thanks

[22:26] <autarch> I'd really like TimToady's blessing before it goes to publication

[22:26] <pyrimidine> autarch: small typo: " and will be responsible the 5.16.0 release." (missing 'for')

[22:27] <[Coke]> autarch: +1 from me.

[22:27] <autarch> cool, I wanted to make sure it wasn't misrepresenting Perl 6, since obviously i'm not too involved in it

[22:27] <PerlJam> autarch: you might mention that Larry took time away from Perl 6 to update "Programming Perl"

[22:28] <PerlJam> well ...  maybe not with that phrasing :)

[22:28] <autarch> I'm not sure where I'd put that

[22:28] <autarch> I'm already over their soft word limit ;)

[22:28] <PerlJam> oh

[22:29] <autarch> it's 1,700 words, they said around 1,500

[22:29] <autarch> I don't think they'll ask for huge cuts, but I'm reluctant to add more stuff ;)

[22:29] <PerlJam> it seems like it would make a good parenthetical just after " Nowadays, his focus is almost exclusively on Perl 6."

[22:30] <autarch> it's interesting information, but not vital

[22:30] <autarch> if I had more words I'd add it ;)

[22:31] <PerlJam> I don't know, the more mentions that that Perl 5 Camel has been updated, the better IMHO

[22:31] <PerlJam> (it helps stave off the "perl is dead" meme just a little bit more)

[22:35] *** gv left
[22:36] *** kmwallio left
[22:42] <PerlJam> autarch++

[22:43] <tadzik> great article, autarch++ indeed

[22:44] <pyrimidine> tend to agree with PerlJam re: Larry and 'Programming Perl', but the article hits all the necessary points

[22:46] <autarch> it's not that I disagree, it's just that I feel like the article is a bit overstuffed already

[22:47] <autarch> I could easily have written twice as much, but I really tried to pare it down to the minimal amount of stuff

[22:49] <pyrimidine> autarch: I agree.  In fact, (as mentioned on #moose) I think some of the Perl 6 background could be trimmed, but that's a difficult decision as it's needed for context

[22:49] <pyrimidine> but it's an excellent read.  autarch++

[22:49] <autarch> I think one of the most common questions non-insiders have is "what's up with Perl 6"

[22:50] <autarch> so I think anything on the state of Perl 5 needs to address Perl 6

[22:50] <autarch> if only to say "I'm not going to talk about Perl 6" ;)

[22:50] <pyrimidine> right

[22:53] *** M_o_C left
[22:54] *** NamelessTee joined
[23:00] *** PacoAir left
[23:03] *** marmalade left
[23:07] *** marmalade joined
[23:13] *** skipper joined
[23:14] *** PacoAir joined
[23:17] *** havenn left
[23:22] *** marmalade left
[23:22] *** skipper left
[23:25] *** whiteknight joined
[23:28] *** marmalade joined
[23:28] *** skids joined
[23:33] <TimToady> autarch: it all seems fine to me

[23:33] <autarch> cool, thanks for looking at it

[23:33] <autarch> I'll leave the channel, if anyone else has comments later please PM me

[23:33] *** autarch left
[23:34] *** LemonLoaf joined
[23:37] <timotimo> rakudo: my @l = <a b c>; say @l(2|3);

[23:37] <p6eval> rakudo 3c5838: OUTPUT«Method 'postcircumfix:<( )>' not found for invocant of class 'Array'␤  in <anon> at src/gen/BOOTSTRAP.pm:812␤  in any <anon> at src/gen/BOOTSTRAP.pm:808␤  in block <anon> at /tmp/5Kv_oIIf77:1␤␤»

[23:37] <timotimo> rakudo: my @l = <a b c>; say @l[2|3];

[23:37] <p6eval> rakudo 3c5838: OUTPUT«any(c, Any())␤»

[23:37] <timotimo> rakudo: say Any();

[23:37] <p6eval> rakudo 3c5838: OUTPUT«Method 'Any' not found for invocant of class 'Parcel'␤  in <anon> at src/gen/BOOTSTRAP.pm:805␤  in <anon> at src/gen/BOOTSTRAP.pm:802␤  in any <anon> at src/gen/BOOTSTRAP.pm:797␤  in block <anon> at /tmp/0nO_SpQjxl:1␤␤»

[23:37] <timotimo> so i just write rakudobug and someone finds it, yes?

[23:37] <timotimo> niecza: my @l = <a b c>; say @l[2|3];

[23:37] *** marmalade left
[23:37] <p6eval> niecza v15-3-g1c4b5a7: OUTPUT«any("c", Any)␤»

[23:38] <timotimo> niecza: say Any;

[23:38] <p6eval> niecza v15-3-g1c4b5a7: OUTPUT«Any()␤»

[23:38] *** PacoAir left
[23:38] <timotimo> niecza: say Any();

[23:38] <p6eval> niecza v15-3-g1c4b5a7: OUTPUT«Unhandled exception: Unable to resolve method postcircumfix:<( )> in class Any␤  at /tmp/WAzAsyoMzX line 1 (mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3838 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3839 (module-CORE @ 65)…

[23:39] <timotimo> can i call this nieczabug, too?

[23:39] <TimToady> it's correct behavior, if a poor message

[23:39] <TimToady> Any() is a coercion without anything to coerce

[23:40] *** noteventime left
[23:40] <TimToady> perl6: say Any.perl

[23:40] <p6eval> rakudo 3c5838, niecza v15-3-g1c4b5a7: OUTPUT«Any␤»

[23:40] <p6eval> ..pugs b927740: OUTPUT«::Any␤»

[23:41] <TimToady> the output of Perl is what the real Perl code is; note the absense of parens

[23:41] <timotimo> mhm

[23:41] <TimToady> the parens are there, in fact, to remind you that it's not a real value

[23:42] <TimToady> if it meant anything in Perl 6, Any() would be a coercion type from Any to Any, which doesn't make a lot of sense

[23:42] <timotimo> all right

[23:42] <TimToady> you're getting a different message from rakudo because it recently installed a failover from Type() to ().Type

[23:43] <timotimo> i do not know what that means, but you're LW, so you're most probably right!

[23:49] <TimToady> I wish there was some available typography to indicate undefinedness of a name, strikethrough or overbar, but Unicode isn't really up to either of those, so we use empty parens

[23:55] *** tokuhirom joined
