[00:01] *** y3llow left
[00:01] *** y3llow joined
[00:03] *** y3llow left
[00:04] *** cognominal_ joined
[00:04] *** y3llow joined
[00:06] *** y3llow left
[00:06] *** cognominal left
[00:06] *** y3llow joined
[00:08] *** y3llow left
[00:09] *** y3llow joined
[00:11] *** y3llow left
[00:11] *** y3llow joined
[00:13] *** whiteknight joined
[00:13] *** y3llow left
[00:13] *** y3llow joined
[00:15] *** y3llow left
[00:16] *** y3llow joined
[00:17] *** raiph joined
[00:18] *** wolfman2000 joined
[00:18] *** y3llow left
[00:18] *** y3llow joined
[00:20] *** y3llow left
[00:21] *** y3llow joined
[00:23] *** y3llow left
[00:23] *** y3llow joined
[00:25] *** y3llow left
[00:25] *** y3llow joined
[00:27] *** y3llow left
[00:28] *** y3llow joined
[00:29] *** silug left
[00:29] *** japhb_ joined
[00:30] *** y3llow left
[00:30] *** y3llow joined
[00:31] <japhb_> phenny, tell jnthn In the if block at https://github.com/rakudo/rakudo/commit/4de6f1d16b#L0R1217 , it looks like 'if @name' is a redundant test in the second if.

[00:31] <phenny> japhb_: I'll pass that on when jnthn is around.

[00:32] *** japhb_ left
[00:32] *** y3llow left
[00:33] *** y3llow joined
[00:34] *** y3llow left
[00:35] *** y3llow joined
[00:37] *** y3llow left
[00:37] *** y3llow joined
[00:39] *** y3llow left
[00:39] *** y3llow joined
[00:41] *** y3llow left
[00:42] *** y3llow joined
[00:43] *** y3llow left
[00:44] *** y3llow joined
[00:46] *** y3llow left
[00:46] *** y3llow joined
[00:48] *** y3llow left
[00:49] *** y3llow joined
[00:49] *** bluescreen10 left
[00:50] *** y3llow left
[00:51] *** y3llow joined
[00:51] *** silug joined
[00:53] *** y3llow left
[00:53] *** y3llow joined
[00:55] *** y3llow left
[00:55] *** y3llow joined
[00:57] *** clkao_ is now known as clkao

[00:57] *** y3llow left
[00:58] *** y3llow joined
[01:00] *** y3llow left
[01:00] *** y3llow joined
[01:02] *** y3llow left
[01:02] *** y3llow joined
[01:04] *** y3llow left
[01:05] *** y3llow joined
[01:07] *** y3llow left
[01:07] *** y3llow joined
[01:09] *** y3llow left
[01:09] *** y3llow joined
[01:11] *** y3llow left
[01:11] *** y3llow joined
[01:13] *** y3llow left
[01:14] *** y3llow joined
[01:16] *** y3llow left
[01:16] *** y3llow joined
[01:19] *** y3llow left
[01:19] *** y3llow joined
[01:22] *** y3llow left
[01:22] *** y3llow joined
[01:25] *** y3llow left
[01:25] *** y3llow joined
[01:28] *** y3llow left
[01:28] *** y3llow joined
[01:31] *** y3llow left
[01:31] *** y3llow joined
[01:34] *** y3llow left
[01:34] *** y3llow joined
[01:37] *** y3llow left
[01:37] *** y3llow joined
[01:40] *** y3llow left
[01:40] *** y3llow joined
[01:43] *** y3llow left
[01:44] *** y3llow joined
[01:46] *** y3llow left
[01:47] *** y3llow joined
[01:48] <timotimo> o_O

[01:49] *** y3llow left
[01:50] *** y3llow joined
[01:51] *** _jaldhar left
[01:52] *** y3llow left
[01:53] *** y3llow joined
[01:54] *** Chillance left
[01:55] *** _jaldhar joined
[01:55] *** whiteknight left
[01:55] *** y3llow left
[01:56] *** y3llow joined
[01:58] *** y3llow left
[01:59] *** y3llow joined
[02:02] *** y3llow left
[02:02] *** y3llow joined
[02:05] *** y3llow left
[02:05] *** y3llow joined
[02:08] *** raiph left
[02:08] *** y3llow left
[02:08] *** y3llow joined
[02:11] *** y3llow left
[02:11] *** y3llow joined
[02:16] *** orafu left
[02:18] *** orafu joined
[02:20] *** fgomez left
[02:28] *** xinming joined
[02:30] *** tokuhirom joined
[02:31] *** xinming_ left
[02:33] *** tyatpi joined
[02:38] *** raiph joined
[02:38] *** fgomez joined
[02:40] *** cognominal___ joined
[02:44] *** cognominal_ left
[02:47] <raiph> phenny tell lichtkind FYI: open source git-backed-wiki written by/for github. Supports Markdown | ReST | etc. More details at https://github.com/features/projects/wikis.

[02:47] <phenny> raiph: 08 Apr 13:18Z <lichtkind> tell raiph the topics of tablets 2 can be made in the same wash :)

[02:50] <raiph> phenny: tell lichtkind FYI: open source git-backed-wiki written by/for github. Supports Markdown | ReST | etc. More details at https://github.com/features/projects/wikis.

[02:50] <phenny> raiph: I'll pass that on when lichtkind is around.

[03:03] *** tyatpi left
[03:05] <mucker> p6: my $long‚Ä¶list = 5;

[03:05] <p6eval> rakudo 3bd91f: OUTPUT¬´===SORRY!===‚ê§Confused‚ê§at /tmp/JzHA9q6vzb:1‚ê§¬ª

[03:05] <p6eval> ..pugs: OUTPUT¬´*** ‚ê§    Unexpected "\8230"‚ê§    expecting word character, "?", "!", trait, "=", infix assignment, term postfix or operator‚ê§    at /tmp/6JbKzV1R3B line 1, column 9‚ê§¬ª

[03:05] <p6eval> ..niecza v15-6-gefda208: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Confused at /tmp/9Os0KqFOZb line 1:‚ê§------> [32mmy $long[33m‚èè[31m‚Ä¶list = 5;[0m‚ê§‚ê§Parse failed‚ê§‚ê§¬ª

[03:08] <mucker> p6: say "‚à¥ foo" if 1;

[03:08] <p6eval> pugs, rakudo 3bd91f, niecza v15-6-gefda208: OUTPUT¬´‚à¥ foo‚ê§¬ª

[03:11] <sorear> mucker: you can only use alpanumeric characters in names, with a small number of exceptions

[03:11] <mucker> p6: my $Œ±Œ≤ = "5";

[03:11] <p6eval> niecza v15-6-gefda208: OUTPUT¬´Potential difficulties:‚ê§  $Œ±Œ≤ is declared but not used at /tmp/fUGmtIuDEb line 1:‚ê§------> [32mmy [33m‚èè[31m$Œ±Œ≤ = "5";[0m‚ê§‚ê§¬ª

[03:11] <p6eval> ..pugs, rakudo 3bd91f:  ( no output )

[03:12] <mucker> by alphanumeric do you mean alphabet in any language and numeric in any language ?

[03:12] <mucker> or just [A-Za-z0-0]

[03:13] <geekosaur> as defined by the Unicode spec

[03:14] <geekosaur> (your Greek example worked, you got a defined-but-not-used warning)

[03:14] <mucker> gr8 .. just wanted to confirm with the blead versions

[03:16] <mucker> is niecza an experiment ? or is it a serious attempt at perl6 on clr ?

[03:17] <geekosaur> "yes" (I think it started as the former and is now the latter but don't quote me)

[03:17] <sorear> that's about where I'd put it too

[03:17] <sorear> if you told me when I started that I'd be working on this thing for two years I'd have laughed

[03:17] <mucker> awesome :) two competing implementations

[03:17] <geekosaur> ...ohai

[03:18] <sorear> ?

[03:18] <geekosaur> three if you count pugs, then there's perlito as well.

[03:18] <benabik> Two and two halves?

[03:18] <geekosaur> that's a major part of the intent of perl6, that there isn't a single implmentation

[03:19] *** PacoAir left
[03:23] * mucker reading the unicode spec (and I thought only lawyers would wade through 1000 pages of jargon)

[03:23] *** overrosy_ joined
[03:23] <benabik> mucker: If we don't hear from you, we'll send out the search dogs.  ;-)

[03:23] *** cxreg2 joined
[03:24] <sorear> Better 1000 pages of jargon than the alternative...

[03:24] *** yeltzooo7 joined
[03:24] <sorear> most language specs are that long or longer; there's a reason we call people "language lawyers"

[03:25] * mucker tried reading common lisp spec in one sitting. had hallucinations the next day.

[03:26] *** yeltzooo left
[03:26] *** BinGOs left
[03:26] *** felipe left
[03:26] *** overrosy left
[03:26] *** cxreg left
[03:26] *** pernatiy_ left
[03:26] <sorear> You should have read R5RS instead

[03:26] *** pernatiy joined
[03:26] <sorear> It's the odd one, only around 50 pages

[03:27] *** buubot_backup left
[03:27] <mucker> I Plan on reading the r7. Should be out soon me hopes.

[03:28] <sorear> I hear they abandoned the shortness that made r5 so awesome

[03:28] <benabik> Wasn't R6RS not worthwhile?

[03:29] <mucker> r6 was huuge. they splan on making r7 in the spirit of r5

[03:29] <mucker> But no matter what the spec, every fucking language is a FAIL at building a CPAN.

[03:30] *** FACEFOX left
[03:31] *** FACEFOX joined
[03:31] *** IngisKahn left
[03:32] *** buubot_backup joined
[03:38] * mucker the horror ! the horror !

[03:40] *** raiph left
[03:43] *** BinGOs joined
[03:47] *** kranius left
[03:59] *** thelazydeveloper left
[03:59] *** preflex left
[04:01] *** preflex joined
[04:31] *** birdwind1pbird joined
[04:44] *** mucker left
[04:45] *** birdwind1pbird left
[04:59] *** IngisKahn joined
[05:04] *** araujo left
[05:04] *** raiph joined
[05:05] <raiph> phenny: tell lichtkind for example, something along the lines of https://github.com/raiph/tablets/wiki

[05:05] <phenny> raiph: I'll pass that on when lichtkind is around.

[05:07] <moritz> \o

[05:15] *** spaceships left
[05:19] <raiph> moritz: hi and goodnight

[05:20] *** raiph left
[05:30] *** zhutingting joined
[05:51] *** cognominal___ left
[05:52] *** cognominal joined
[06:00] *** oiig_ left
[06:00] *** oiig_ joined
[06:04] *** bacek left
[06:13] *** fgomez left
[06:13] *** sisar joined
[06:17] *** bacek joined
[06:30] *** zhutingting left
[06:39] *** tokuhirom left
[06:39] *** tokuhirom joined
[06:42] *** lestrrat left
[06:43] *** lestrrat joined
[06:44] *** tokuhirom left
[07:01] *** rsimoes left
[07:01] *** rsimoes joined
[07:13] *** orafu left
[07:13] *** orafu joined
[07:16] *** BooK__ is now known as BooK

[08:01] *** mucker joined
[08:09] *** answer_42 joined
[08:13] <tadzik> o/

[08:19] *** answer_42 left
[08:23] *** thou left
[08:24] *** grondilu joined
[08:26] <mucker> \o

[08:34] <grondilu> perl6:  my (Int $a, Int $b);

[08:34] <p6eval> pugs, rakudo 3bd91f:  ( no output )

[08:34] <p6eval> ..niecza v15-6-gefda208: OUTPUT¬´Potential difficulties:‚ê§  $a is declared but not used at /tmp/9PTOqdZrh2 line 1:‚ê§------> [32mmy [33m‚èè[31m(Int $a, Int $b);[0m‚ê§  $b is declared but not used at /tmp/9PTOqdZrh2 line 1:‚ê§------> [32mmy [33m‚èè[31m(Int $a, Int $b);[0m‚ê§‚ê§¬ª

[08:34] <grondilu> How can I define a bunch of variables of the same type, without repeating the type?

[08:36] <mucker> use an array ?

[08:36] <sorear> p6: my Int ($a, $b) #OK

[08:36] <p6eval> pugs, rakudo 3bd91f, niecza v15-6-gefda208:  ( no output )

[08:36] <sorear> looks like that is at least valid syntax

[08:37] <tadzik> p6: my Int ($a, $b); $b = "foo";

[08:37] <p6eval> pugs:  ( no output )

[08:37] <p6eval> ..rakudo 3bd91f: OUTPUT¬´Type check failed in assignment to '$b'; expected 'Int' but got 'Str'‚ê§  in block <anon> at /tmp/mQXHoO3AJ9:1‚ê§‚ê§¬ª

[08:37] <p6eval> ..niecza v15-6-gefda208: OUTPUT¬´Potential difficulties:‚ê§  $a is declared but not used at /tmp/r5gr4kRIPR line 1:‚ê§------> [32mmy Int [33m‚èè[31m($a, $b); $b = "foo";[0m‚ê§‚ê§¬ª

[08:38] *** alvis``` joined
[08:39] *** alvis`` left
[08:54] <grondilu> sorear: indeed.  Silly of me not to have tried that.

[08:59] *** birdwindupbird joined
[09:05] *** zhutingting joined
[09:11] *** fsergot joined
[09:11] <fsergot> Hi #perl6 o/

[09:14] <tadzik> hello hello

[09:17] <sorear> o/

[09:40] *** odoacre left
[09:41] *** odoacre joined
[09:56] <fsergot> nom: say (my $s = "abc");

[09:56] <p6eval> rakudo 3bd91f: OUTPUT¬´abc‚ê§¬ª

[10:10] *** grondilu left
[10:11] *** Patterner left
[10:14] *** jaffa4 joined
[10:14] *** sisar left
[10:14] *** overrosy_ left
[10:15] *** Psyche^ joined
[10:15] *** Psyche^ is now known as Patterner

[10:15] *** overrosy joined
[10:26] *** zhutingting left
[10:27] *** zhutingting joined
[10:30] *** araujo joined
[10:30] *** araujo left
[10:30] *** araujo joined
[10:31] *** whiteknight joined
[10:33] *** cognominal left
[10:35] *** cognominal joined
[10:36] *** baest_ is now known as baest

[11:00] *** JimmyZ joined
[11:25] *** bluescreen10 joined
[11:32] *** NamelessTee joined
[11:36] *** JimmyZ left
[11:52] *** PacoAir joined
[12:01] <mucker> is there a way to to have non-alphnumeric character in a variable name by some escape mechanism like using a \

[12:01] <mucker> before the uni character ?

[12:01] *** answer_42 joined
[12:04] *** answer_42 left
[12:09] *** Chillance joined
[12:11] *** leprevost joined
[12:12] *** baest left
[12:23] *** spider-mario joined
[12:25] *** bluescreen10 left
[12:28] *** thelazydeveloper joined
[12:33] *** _jaldhar left
[12:35] <masak_> mucker: I think you can always quote variable names and thus put anything you want in them.

[12:35] <masak_> (hi, #perl6)

[12:35] <arnsholt> mucker: Don't think so. But identifiers can contain more than [a-zA-Z_0-9]

[12:35] <masak_> mucker: then there's the apostrophe-dash exception.

[12:36] <masak_> r: say my $foo'bar-akbar = 42

[12:36] <p6eval> rakudo 3bd91f: OUTPUT¬´42‚ê§¬ª

[12:36] *** mdupont joined
[12:39] <arnsholt> r: use NativeCall; class Foo is repr('CStruct') { has Mu $.obj; }; say('alive');

[12:39] <p6eval> rakudo 3bd91f: OUTPUT¬´===SORRY!===‚ê§Could not find NativeCall in any of: lib, /home/p6eval/.perl6/lib, /home/p6eval/nom-inst2/lib/parrot/4.2.0-devel/languages/perl6/lib, .‚ê§¬ª

[12:40] <masak_> std: my Int ($a, $b, Str ($c, $d)) #OK

[12:40] <p6eval> std 1ad3292: OUTPUT¬´ok 00:00 42m‚ê§¬ª

[12:41] <fglock> I think it possible to add random unicode using string interpolation in variable names with the $::("xyz") syntax

[12:41] <masak_> there's an interesting tension between "wow, declaration syntax and signature syntax are unified. that's pretty neat" and "g'ah, this doesn't apply at all! what were we thinking?"

[12:42] <masak_> fglock: yeah, that's what I was groping for above.

[12:45] *** masak_ is now known as masak

[12:49] <arnsholt> Well, that was odd

[12:50] <arnsholt> Compiler internals hacking is always interesting =)

[13:00] *** birdwindupbird left
[13:04] <arnsholt> jnthn: *prod*?

[13:06] *** JimmyZ joined
[13:13] <jnthn> arnsholt: Did you mean "star:" ?

[13:13] <phenny> jnthn: 00:31Z <japhb_> tell jnthn In the if block at https://github.com/rakudo/rakudo/commit/4de6f1d16b#L0R1217 , it looks like 'if @name' is a redundant test in the second if.

[13:15] <arnsholt> jnthn: Indeed

[13:15] <arnsholt> But I've come across something else

[13:15] *** Shozan left
[13:16] *** Shozan joined
[13:16] <arnsholt> Should REPR_name_to_id be available from a REPR?

[13:16] <jnthn> arnsholt: May be challening to call from a dynamic REPR.

[13:17] <jnthn> arnsholt: You have the name available in REPR(obj)->name though, iirc.

[13:17] <arnsholt> It is. I get a run-time error from the linker when the code tries to call it =)

[13:17] <jnthn> Yeah, not surprised

[13:17] *** Shozan is now known as SHODAN

[13:18] <jnthn> That's why certain things are passed in explicitly to dynamic representations.

[13:18] <arnsholt> Right

[13:18] <jnthn> What do you need the ID for, ooc?

[13:18] <arnsholt> Checking for the REPR of a member in the CStruct REPR

[13:18] <arnsholt> To handle CPointer/CArray appropriately

[13:19] <jnthn> You could always compare the name.

[13:19] <arnsholt> Troo

[13:20] <masak> arnsholt: what're you building?

[13:20] <jnthn> Zavolaj improvements, it seems :D

[13:21] <arnsholt> I'd like to be able to embed CPointer/CArray in CStruct

[13:21] <jnthn> Embedding a pointer to a CStruct in a CStruct shouldn't be hard either if you're doing those bits :)

[13:21] <jnthn> .oO( I heard you liked CStrcuts... )

[13:21] *** baest joined
[13:22] <arnsholt> Oooh, that's an idea as well

[13:22] <arnsholt> Possibly the best place to start, come to think of it

[13:22] <jnthn> They're relatively similar.

[13:22] <jnthn> Pointers are the easiest.

[13:23] <arnsholt> 'k

[13:23] <jnthn> Since you need never keep any "shadow references" around.

[13:23] <jnthn> To be clearer

[13:23] <jnthn> my $x = SomeCStruct.new();

[13:23] <jnthn> my $y = SomeCStruct.new();

[13:23] <jnthn> $x.lemonade = $y;

[13:24] <jnthn> Here we have a choice

[13:24] <jnthn> The memory in this case is managed. 

[13:24] <arnsholt> Right

[13:24] <jnthn> That is, if we don't have the GC trace the reference to $y through $x, we'll end up with the underlying struct being freed

[13:25] <arnsholt> Yup

[13:25] <jnthn> But the O(1) marshalling means that what we store inside the CStruct of $x (in the bit of the memory we pass off to C land) has to be the pointer to *inside* of $y

[13:25] <jnthn> So we have to keep $y around too

[13:25] <arnsholt> Definitely

[13:25] <jnthn> Pointers lack this complexity

[13:26] <jnthn> Because they just...point somewhere

[13:26] <jnthn> There's no memory being managed.

[13:26] <arnsholt> So, $y has to go in child_objs, and $y.actual_c_struct into $x's struct layout, no?

[13:27] <jnthn> Right

[13:27] <jnthn> Something like that.

[13:27] <arnsholt> And similarly for CArray and CPointer

[13:27] <jnthn> CArray, certainly

[13:27] <jnthn> CPointer - good question.

[13:28] <jnthn> I guess if we want to be able to write stuff like

[13:28] <jnthn> my $x = SomeCStruct.new();

[13:28] <jnthn> my $p = pointer-to($x);

[13:28] <jnthn> Then yeah, we need to consider it having a child_obj too

[13:29] <jnthn> I've only really handled CPointer in the case it's retunred from a library and thus we aren't managing the memory of the thing it points to.

[13:29] <jnthn> arnsholt++ # digging in to this fun :)

[13:30] <arnsholt> Yeah, this is a layer or two of abstractions below what I usually do, so it's quite enlightening =)

[13:30] <arnsholt> (Interestingly, this can be tied in with the webby trend of what people want to do for the Oslo hackathon)

[13:32] <arnsholt> Since I'd like to talk to Mongrel2, which works over ZMQ

[13:33] <jnthn> ooh :)

[13:34] <arnsholt> The idea was to abstract away the whole deal of talking HTTP yourself

[13:34] <arnsholt> So that a Perl 6 webapp can focus on logic rather than HTTP and such

[13:35] <arnsholt> But that requires being able to talk to Mongrel2 in the first place

[13:35] <arnsholt> Thus, Zavolaj hacking

[13:36] <jnthn> Happy yak is happy.

[13:36] <jnthn> .oO( I'm naming this yak "Shawn" )

[13:37] <arnsholt> Hmm. Maybe I'll rename my local branch shawn =D

[13:38] * masak .oO( And this over here I'll dub "Shorn" )

[13:39] <felher> moritz: ICMP ECHO REQUEST

[13:42] <tadzik> hugme: add sergot to ecosystem

[13:42] <hugme> tadzik: sorry, I don't know anything about project 'ecosystem'

[13:42] <tadzik> hrm

[13:43] <fsergot> What is the ecosystem? :)

[13:43] <tadzik> https://github.com/perl6/ecosystem

[13:43] <tadzik> list of our modules lives here

[13:43] * masak popularized the term

[13:44] <tadzik> I like it

[13:44] <masak> the idea being that yes, we find bugs directly in the compilers, but many bug reports actually flow in from the set of community modules.

[13:44] <jnthn> masak things about everything in terms of bug reports :P

[13:44] <jnthn> *thinks

[13:44] <masak> the more we can *harness* that and do things like regularly smoke the ecosystem, the sooner we'll fix those bugs.

[13:45] <moritz> hugme: add sergot to perl6

[13:45] * hugme hugs sergot. Welcome to the perl6 github organization

[13:45] <moritz> felher: ICMP ECHO RESPONSE

[13:46] <masak> jnthn: bug reports are merely the digital reification of community love :)

[13:46] <fsergot> \o/ !

[13:47] *** zhutingting left
[13:48] <felher> moritz: https://gist.github.com/2384508 | if you don't have any objections, you use/apply the Exception.Bool patch. I can push the spectest-patch myself i think, since i have a perl6 commit bit :)

[13:50] <felher> moritz: i did do make spectest after the patch and the only things it breaks are the things that i patched in the spectest-patch

[13:50] <dalek> rakudo/nom: 1fa8fb5 | (Felix Herrmann)++ | src/core/Exception.pm:

[13:50] <dalek> rakudo/nom: Make Exception.Bool return True

[13:50] <dalek> rakudo/nom: 

[13:50] <dalek> rakudo/nom: Signed-off-by: Moritz Lenz [email@hidden.address]
[13:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1fa8fb5841

[13:51] <moritz> felher: no objections

[13:51] <felher> \o/ :)

[13:53] <dalek> roast: 0eba93a | (Felix Herrmann)++ | S (4 files):

[13:53] <dalek> roast: rewrite tests that rely on Exception to return False on .Bool

[13:53] <dalek> roast: review: https://github.com/perl6/roast/commit/0eba93afbb

[13:58] *** felipe joined
[13:59] *** tokuhirom joined
[13:59] <masak> the part of dalek that finds the lowest common denominator between changed paths shouldn't split things in the middle of a path fragment.

[14:00] <moritz> .√§

[14:01] <masak> Ronja, that you?

[14:02] <tadzik> :)

[14:05] <moritz> it was her, yes

[14:06] <masak> funny, it's what I imagine a young child would say, too.

[14:06] <masak> ".√§!"

[14:07] <moritz> .u ÔøΩ

[14:07] <phenny> U+FFFD REPLACEMENT CHARACTER (ÔøΩ)

[14:07] <jnthn> If anybody wants to spectest the name-cleanup branch and confirm it looks clean, I may as well merge it. I can do the changes beyond that fairly undisruptively in nom.

[14:09] <dalek> roast: 4d5e023 | jnthn++ | S02-names-vars/variables-and-packages.t:

[14:09] <dalek> roast: Remove test for removed SUPER and fix tests that check you can't declare the pseudo-packages.

[14:09] <dalek> roast: review: https://github.com/perl6/roast/commit/4d5e02332b

[14:09] <arnsholt> Grumblegrumble

[14:10] <arnsholt> jnthn: NQP and Rakudo are too thorough in making sure the versions match up =)

[14:10] <mucker> probably a silly thing, but can I send eval to a perl6 bot in private ?

[14:10] <masak> yes, you can.

[14:10] <jnthn> mucker: /msg p6eval r: say "yay"

[14:11] <jnthn> arnsholt: ;)

[14:11] <mucker> (:

[14:11] <jnthn> Actually testing the branch will be a pain because we'll get confused with the exceptions fixes that just went in, whihc it doesn't have.

[14:11] <moritz> jnthn: I'll first run a spectest with felher++'s changes, then with name-cleanup

[14:11] <jnthn> I'll just merge it and hope I didn't miss anything :)

[14:11] <moritz> (I planned to merge the branch locally before spectesting

[14:13] <jnthn> moritz: Am running that build/test here

[14:14] <jnthn> moritz: I just reviewed the commits...there really should be nothing platform specific in there.

[14:16] *** lichtkind joined
[14:17] <lichtkind> moritz: ok gitit failed it broke syntax almost like socialtext, i will go on with html

[14:17] <phenny> lichtkind: 02:50Z <raiph> tell lichtkind FYI: open source git-backed-wiki written by/for github. Supports Markdown | ReST | etc. More details at https://github.com/features/projects/wikis.

[14:17] <phenny> lichtkind: 05:05Z <raiph> tell lichtkind for example, something along the lines of https://github.com/raiph/tablets/wiki

[14:18] <lichtkind> k will test gollum too

[14:18] <mucker> p6: @::("long‚Ä¶list") = 1,2,3; print @::("long‚Ä¶list"); #following fglocks advice ! n works fine

[14:19] <p6eval> rakudo 3bd91f: OUTPUT¬´Symbol '@::long‚Ä¶list' not found‚ê§  in method <anon> at src/gen/CORE.setting:8229‚ê§  in <anon> at src/gen/Metamodel.pm:2256‚ê§  in any find_method_fallback at src/gen/Metamodel.pm:2254‚ê§  in any find_method at src/gen/Metamodel.pm:828‚ê§  in block <anon> at /tmp/VqeLeBgU7a‚Ä¶

[14:19] <p6eval> ..niecza v15-6-gefda208: OUTPUT¬´123¬ª

[14:19] <p6eval> ..pugs: OUTPUT¬´*** Undeclared variable: ("@long\226\128\166list",MkPad (padToList [("$_",PELexical {pe_type = (mkType "Scalar"), pe_proto = <Scalar:0xf6ed9505>, pe_flags = MkEntryFlags {ef_isContext = True}, pe_store = <ref:0xf6ede2a5>}),("@_",PELexical {pe_type = (mkType "Array"), pe_pro‚Ä¶

[14:19] <mucker> ‚Ä¶ is unicode for ...

[14:20] * mucker also going to install n on my sys

[14:20] <masak> I think it's just NYI in Rakudo.

[14:25] <masak> interesting quip in an interesting thread. http://news.ycombinator.com/item?id=3840145 -- discuss.

[14:26] <moritz> if Eliezer succeeds, then yes :-)

[14:26] * jnthn wonders why it works on n.

[14:27] <jnthn> I mean, looks like an undeclared variable to me.

[14:27] <masak> I sure hope that Elezier won't have to do *all* the heavy lifting himself :)

[14:27] <moritz> r: my $a::('!!'); say $a::('!!)

[14:27] <p6eval> rakudo 3bd91f: OUTPUT¬´===SORRY!===‚ê§Cannot declare a variable by indirect name (use a hash instead?)‚ê§at /tmp/IZAN79oGtz:1‚ê§¬ª

[14:28] <tadzik> p6: my %a = any('a', 'b') => 3; say %a<b>; say %a<a>

[14:28] <p6eval> niecza v15-6-gefda208: OUTPUT¬´Unhandled exception: Unmatched key in Hash.LISTSTORE‚ê§  at /tmp/fQcWzhuQiS line 0 (mainline @ 1) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 3842 (ANON @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 3843 (module-CORE @ 65) ‚ê§  at /home/p6eval/niecza‚Ä¶

[14:28] <p6eval> ..pugs: OUTPUT¬´‚ê§‚ê§¬ª

[14:28] <p6eval> ..rakudo 3bd91f: OUTPUT¬´3‚ê§Any()‚ê§¬ª

[14:28] <moritz> anyway, that can't work in the general case, only when the expression is constant-foldable

[14:28] <tadzik> nah, almost :)

[14:28] *** xinming_ joined
[14:29] <moritz> because lexpads are immutable at run time

[14:29] <mucker> n: my $a::('!!'); say $a::('!!')

[14:29] <p6eval> niecza v15-6-gefda208: OUTPUT¬´Use of uninitialized value in string context‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 1222 (warn @ 3) ‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 230 (Mu.Str @ 10) ‚ê§  at <unknown> line 0 (ExitRunloop @ 0) ‚ê§  at /home/p6eval/niecza/src/Ni‚Ä¶

[14:29] <mucker> n: $a::('!!'); say $a::('!!')

[14:29] <p6eval> niecza v15-6-gefda208: OUTPUT¬´Any()‚ê§¬ª

[14:29] <mucker> n: $a::('!!')=5; say $a::('!!')

[14:29] <p6eval> niecza v15-6-gefda208: OUTPUT¬´5‚ê§¬ª

[14:30] <mucker> "Use of uninitialized value in string context‚ê§" what does this error mean ??

[14:30] <mucker> i get this even when I init the value

[14:31] <mucker> n: $my a::('!!')=5; say $a::('!!'); #but only when I use my at the beg

[14:31] <p6eval> niecza v15-6-gefda208: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Variable $my is not predeclared at /tmp/RFG9yCErdc line 1:‚ê§------> [32m<BOL>[33m‚èè[31m$my a::('!!')=5; say $a::('!!'); #but on[0m‚ê§‚ê§Two terms in a row at /tmp/RFG9yCErdc line 1:‚ê§------> [32m$my [33m‚èè[31ma::('!!')=5; say ‚Ä¶

[14:31] <mucker> n: my a::('!!')=5; say $a::('!!'); #but only when I use my at the beg

[14:31] <p6eval> niecza v15-6-gefda208: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§GLOBAL::a does not name any package at /tmp/Hh8TnOqoKe line 1:‚ê§------> [32mmy a::('!!')[33m‚èè[31m=5; say $a::('!!'); #but only when I use[0m‚ê§‚ê§A type must be provided at /tmp/Hh8TnOqoKe line 1:‚ê§------> [32mmy a::('!!')[33‚Ä¶

[14:31] <mucker> n: my $a::('!!')=5; say $a::('!!');

[14:31] <p6eval> niecza v15-6-gefda208: OUTPUT¬´Use of uninitialized value in string context‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 1222 (warn @ 3) ‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 230 (Mu.Str @ 10) ‚ê§  at <unknown> line 0 (ExitRunloop @ 0) ‚ê§  at /home/p6eval/niecza/src/Ni‚Ä¶

[14:31] <moritz> it might be related to niecza implemting 'no strict', and assuming that it's a package variable or so

[14:32] <mucker> oh ok.

[14:32] *** xinming left
[14:32] <mucker> sorry for clobbering the screen

[14:32] * mucker still a noob with irc

[14:33] <JimmyZ> good evening, #perl6

[14:36] <masak> JimmyZ! \o/ ÈóÆÂÄôÔºÅ

[14:36] <JimmyZ> È∫¶È´òÔºö ‰∏ãÂçàÂ•ΩÔºÅ

[14:37] <masak> ‰∏ãÂçàÂ•Ω,‰∏ãÂçàÂ•Ω.

[14:38] <masak> JimmyZ: ‰Ω†‰ΩèÂú®Âì™ÈáåÔºüÂπøÂ∑ûÔºüÊàëÂøò‰∫Ü„ÄÇ

[14:38] <JimmyZ> masak: ÊàëÂú®Ê∑±Âú≥

[14:38] <masak> ÂïäÔºåÂØπ„ÄÇ

[14:38] *** kranius joined
[14:39] <masak> ÊàëÊÉ≥Ëµ∑‰∫ÜÂÖ®ÁúÅÊ≠£Á°Æ :)

[14:55] *** JimmyZ_ joined
[14:57] *** JimmyZ left
[14:58] *** JimmyZ_ is now known as JimmyZ

[15:01] <dalek> Heuristic branch merge: pushed 16 commits to rakudo/nom by jnthn

[15:03] <jnthn> moritz: In a recent patch: ".HOW.WHAT is the same as just .HOW. Simplify"

[15:03] <jnthn> moritz: That's not actaully the case.

[15:03] <jnthn> moritz: In this case you get away with it though.

[15:04] <jnthn> moritz: But the meta-object will usually be an instance.

[15:04] * felher spectests that merge ooc.

[15:09] <dalek> rakudo/nom: ac083c5 | jnthn++ | docs/ChangeLog:

[15:09] <dalek> rakudo/nom: Fill out ChangeLog a little more.

[15:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ac083c5d28

[15:10] <jnthn> Mostly, the branch started cleaning up name handling

[15:10] <jnthn> Of note, not re-parsing longname in a bunch of places

[15:14] *** lestrrat left
[15:15] *** lestrrat joined
[15:27] <felher> jnthn/moritz: i got two fails: "t/spec/S32-exceptions/misc.rakudo ......................... Failed 2/282 subtests", namely "not ok 216 - right exception type (X::Augment::NoSuchType)" and "not ok 67 - right exception type (X::Redeclaration)"

[15:41] *** vlixes joined
[15:44] <TimToady> n: my \term:<‚òª> = 42; say ‚òª

[15:44] <p6eval> niecza v15-6-gefda208: OUTPUT¬´42‚ê§¬ª

[15:44] <TimToady> mucker: ^^^

[15:46] <mucker> (:

[15:47] *** alvis``` left
[15:48] <jnthn> TimToady: In S02:

[15:48] <jnthn> MY          # Symbols in the current lexical scope (aka $?SCOPE)

[15:48] *** Psyche^ joined
[15:48] <jnthn> TimToady: Just to clarify, does this mean if you do MY::<$x> it means anything *visible* from that scope?

[15:49] <jnthn> TimToady: As opposed to anything declared precisely in that scope?

[15:49] <jnthn> On a similar note, what about MY::.keys?

[15:50] *** tokuhirom left
[15:50] <TimToady> std: my $good; say MY::<$good>; my $bad; { say MY::<$bad> }

[15:50] <p6eval> std 1ad3292: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Variable MY::<$bad> is not predeclared at /tmp/Wi8jY37TKR line 1:‚ê§------> [32m $good; say MY::<$good>; my $bad; { say [33m‚èè[31mMY::<$bad> }[0m‚ê§Check failed‚ê§FAILED 00:00 42m‚ê§¬ª

[15:50] <jnthn> I assume that OUR:: really *is* just $?PACKAGE and no more magical than that?

[15:50] <TimToady> ^^

[15:51] <jnthn> n: my $good; say MY::<$good>; my $bad; { say MY::<$bad> }

[15:51] <p6eval> niecza v15-6-gefda208: OUTPUT¬´Potential difficulties:‚ê§  $good is declared but not used at /tmp/HXuYtn5iOc line 1:‚ê§------> [32mmy [33m‚èè[31m$good; say MY::<$good>; my $bad; { say M[0m‚ê§  $bad is declared but not used at /tmp/HXuYtn5iOc line 1:‚ê§------> [32mmy $good; say MY::<$good>; my‚Ä¶

[15:51] <jnthn> n: my $good; say MY::<$good>; my $bad; { say MY::<$bad> } #OK

[15:51] <p6eval> niecza v15-6-gefda208: OUTPUT¬´Any()‚ê§Any()‚ê§¬ª

[15:51] <jnthn> n: my $good = 1; say MY::<$good>; my $bad = 2; { say MY::<$bad> } #OK

[15:51] <p6eval> niecza v15-6-gefda208: OUTPUT¬´1‚ê§2‚ê§¬ª

[15:51] <jnthn> So, it finding 2 is wrong here?

[15:51] <TimToady> interesting divergence from STD there...

[15:51] *** Patterner left
[15:51] *** Psyche^ is now known as Patterner

[15:52] <jnthn> TimToady: Yeah, I'm just reviewing pseudo.t and the spec before implementing various of the pseudo-packages.

[15:52] <jnthn> TimToady: My question applies to OUTER and CALLER too

[15:52] <jnthn> Well, and UNIT and SETTING :)

[15:52] <jnthn> I know DYNAMIC has to be different and go scanning. As does ::<$x>

[15:53] *** fgomez joined
[15:53] <jnthn> std: my $good = 1; say MY::<$good>; { say OUTER::<$good> }

[15:53] <p6eval> std 1ad3292: OUTPUT¬´ok 00:00 42m‚ê§¬ª

[15:54] <jnthn> std: my $bad; { my $good; say MY::<$good>; { say OUTER::<$good>; say OUTER::<$bad>; }

[15:54] <p6eval> std 1ad3292: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Variable OUTER::<$bad> is not predeclared at /tmp/TsZLX9aMEf line 1:‚ê§------> [32m MY::<$good>; { say OUTER::<$good>; say [33m‚èè[31mOUTER::<$bad>; }[0m‚ê§Unable to parse block at /tmp/TsZLX9aMEf line 1:‚ê§------> [32mmy $bad; [33m‚èè[31m‚Ä¶

[15:54] <jnthn> Guess that's my answer.

[15:54] <jnthn> For OUTER at least.

[15:54] <TimToady> well, we'll have to negoitiate MY with sorear++ I guess

[15:54] <TimToady> *got

[15:55] <jnthn> n: my $x; { my $y; say MY::.keys } # curious

[15:55] <p6eval> niecza v15-6-gefda208: OUTPUT¬´Potential difficulties:‚ê§  $y is declared but not used at /tmp/s2Rfs0SdX7 line 1:‚ê§------> [32mmy $x; { my [33m‚èè[31m$y; say MY::.keys } # curious[0m‚ê§  $x is declared but not used at /tmp/s2Rfs0SdX7 line 1:‚ê§------> [32mmy [33m‚èè[31m$x; { my $y; say MY::.‚Ä¶

[15:55] <jnthn> n: my $x; { my $y; say MY::.keys } # curious #OK

[15:55] <p6eval> niecza v15-6-gefda208: OUTPUT¬´0‚ê§¬ª

[15:55] <jnthn> Hm.

[15:55] <jnthn> I worry if we give it the Niecza meaning then .keys will be *huge* :)

[15:56] <TimToady> nodnod

[15:56] <jnthn> And useless for walking the pads.

[15:57] <mucker> what is the p6 equivalent of *foo{NAME} (p5) ?

[15:59] *** JimmyZ_ joined
[16:00] *** JimmyZ left
[16:01] *** JimmyZ joined
[16:01] *** fgomez left
[16:01] <mucker> TimToady : is \term an experimental extension in n ??

[16:02] <jnthn> mucker: It's spec, though a relatively recent addition. Rakudo didn't get around to adding it yet.

[16:02] <jnthn> It's not hard.

[16:02] <jnthn> Just nobody got a round tuit.

[16:03] <mucker> It's a neat feature :) no other lang has it me thinks

[16:04] *** JimmyZ_ left
[16:04] <TimToady> the hard bit is generating a new lexer/parser at that point

[16:05] <TimToady> re *foo{NAME} Perl 6 doesn't have typeglobs, so there's no equivalent

[16:15] *** geistteufel joined
[16:16] <TimToady> actually, we know how to generate a new language at that point; what we don't know yet is how best to avoid regenerating lexers that are trivially different from the previous when that will turn out to be unnecessary

[16:16] <TimToady> or how to avoid regenerating lexers that are identical to the one we generated last time we compiled this program

[16:16] <TimToady> either of those might speed up a Perl 6 parser greatly

[16:17] <cognominal> geistteufel, hello to the devil

[16:18] <geistteufel> hi from hell :)

[16:18] <TimToady> programming in PHP, are you? :)

[16:19] <masak> or maintaining a major VB.NET code base...

[16:20] *** plobsing left
[16:20] <tadzik> guys, guys, there are ladies in the room :/

[16:20] <TimToady> sorry

[16:22] <masak> we don't talk about lexer generation in front of ladies now?

[16:22] <tadzik> don't we?

[16:23] <masak> well, what bit of the conversation above was it that you :/-ed on?

[16:23] <tadzik> but, well, VB.NET? There are limits, y'know

[16:23] <masak> oh, I see now.

[16:23] <masak> yeah, sorry.

[16:23] <tadzik> concrete joke I guess ;)

[16:24] * masak .oO( if the joke was concrete, that explains why I got it so slowly... )

[16:24] <dalek> ecosystem: 830a24d | tadzik++ | META.list:

[16:24] <dalek> ecosystem: Add Text::T9

[16:24] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/830a24d04b

[16:24] <TimToady> .oO(went over like a concrete balloon...)

[16:25] * TimToady wonders how big a concrete balloon would have to be before the volume effects overcome the surface effects...

[16:26] <TimToady> I suppose it depends on how thinly you can pour concrete and still call it concrete

[16:26] <TimToady> "yeah, it's concrete, but it's reinforced with fiberglass and epoxy"

[16:27] <masak> that's legit, in my book.

[16:27] <masak> because you usually do that.

[16:28] <TimToady> well, in the abstract, anyway

[16:28] <TimToady> most concrete is not reinforced that way concretely

[16:29] <masak> :)

[16:29] <TimToady> .oO(masak's new hobby: trying to trick people into autopunishment)

[16:29] *** xdbr left
[16:30] *** xdbr joined
[16:30] <masak> most funny things I've seen in the past few days have turned out to be non-auto puns on closer inspection.

[16:31] <masak> this one, fr'ex: http://twitter.com/sharonGOONer/status/190872900570595328

[16:31] <TimToady> that's why I hedged it with "trying to"  :P

[16:33] <TimToady> well, not unless the *facepsalm* is also a reaction to making a bad pun

[16:33] <TimToady> which I can read it as

[16:34] <TimToady> just because you can argue yourself out of an autopun doesn't make it right :)

[16:38] *** spider-mario left
[16:38] <TimToady> and anything as far into the realm of pragmatics as *facepalm* will be subject to more than just semantic analysis; it is not enough that you did a facepalm, but that you must be seen doing a facepalm by the reader, with the explicit intent of producing an almost whiplash reaction in the reader

[16:40] <TimToady> and anything in the realm of pragmatics takes its meaning from wherever the hearer can find it in the context

[16:40] *** cognominal left
[16:40] <TimToady> but this is highly variable from hearer to hearer

[16:41] <TimToady> swearwords like PHP and VB.NET work the same way

[16:41] *** cognominal joined
[16:42] <arnsholt> There. The basics of my code seems to be in place

[16:44] <tadzik> my $perl = ':(';

[16:44] <tadzik> Signature.pm is sad

[16:44] <jnthn> heh :)

[16:45] <jnthn> I think I wrote that line, then was like, "lol"

[16:45] <tadzik> .WHY _must_ use this for subs

[16:45] * tadzik dives in

[16:49] <masak> TimToady: what was interesting to me wasn't that tadzik++ implied that PHP and VB.NET were swearwords, which is easy to grok, but that he did it by invoking 'dudes, not in front of the ladies', which is an antiquated meme in Sweden.

[16:51] <TimToady> it's antiquated here too

[16:51] <TimToady> for some definition of "here" that may not include the midwest :)

[16:51] <masak> heh.

[16:51] * masak imagines a torus-shaped US

[16:52] <masak> I've also noted that the concentration of blonde jokes is slightly higher in Poland.

[16:53] <TimToady> .oO(Missouri, the Doughnut Hole State)

[16:53] <TimToady> or maybe that's Iowa

[16:54] *** JimmyZ_ joined
[16:54] <TimToady> the usual joke here is that the midwest is "Flyover Country"

[16:54] *** JimmyZ_ left
[16:55] <TimToady> funny how far the midwest is from the mideast though...

[16:55] <arnsholt> jnthn: What roughly is the purpose of initialize_slots?

[16:55] <jnthn> arnsholt: Context?

[16:56] <arnsholt> Durr, sorry. In CStruct.[ch]

[16:56] *** JimmyZ left
[16:57] <arnsholt> CStructREPRData has an int array called initialize_slots, whose purpose I'm not quite able to figure out

[16:57] <jnthn>     /* Slots holding flattened objects that need another REPR to initialize

[16:57] <jnthn>      * them; terminated with -1. */

[16:57] <jnthn>     INTVAL *initialize_slots;

[16:57] <jnthn> That one

[16:58] <jnthn> arnsholt: See the initiailize REPR function

[16:58] <arnsholt> Yah

[16:58] <jnthn> arnsholt: initialize is basically "set up this memory like it needs to be if we're making a fresh object"

[16:59] *** thou joined
[16:59] <jnthn> arnsholt: It's the way that we end up with integer slots defualting to 0, num slots defaulting to NaN, etc.

[16:59] <jnthn> arnsholt: In P6opaque if you inline something like a bigint that needs some fancier initialization, it takes care of doing that.

[16:59] <arnsholt> Right, right.

[16:59] <jnthn> arnsholt: Basically, it's just delegation to flattened in REPRs.

[16:59] <jnthn> It only applies to things you flatten in. But you are working with reference types.

[17:00] <arnsholt> Cool. So I'll probably need another similar array to set up the child objects

[17:00] <jnthn> No

[17:00] <jnthn> Oh

[17:00] <jnthn> Yeah. 

[17:00] <jnthn> :)

[17:00] <jnthn> Sorry, misunderstood at first :)

[17:00] <jnthn> Note that I already prepared some of the way though

[17:01] <jnthn>     /* GC-marked objects that our C structure points into. */

[17:01] <jnthn>     PMC **child_objs;

[17:01] <arnsholt> Yeah, my code allocates that memory now

[17:01] <jnthn> But that is currenlty unused.

[17:01] <jnthn> oh, cool :)

[17:03] *** isBEKaml joined
[17:04] <masak> isBEKaml! \o/

[17:04] <isBEKaml> hola, masak! Hi, #perl6! :)

[17:05] <masak> good, we're all here. today's agenda: taking over the world.

[17:05] <moritz> start by reading http://halfhalf.posterous.com/dont-work-be-hated-love-someone :-)

[17:05] *** cxreg2 is now known as cxreg

[17:06] <isBEKaml> masak: did something just happen? :D

[17:08] <isBEKaml> moritz: oh, I was just reading a blog post from adzerk this afternoon, similar things said (the title was a bit of a bait, though)

[17:09] <arnsholt> jnthn: Is where a given child should be placed what you intended to use the CSTRUCT_ATTR_* #defines for?

[17:10] <jnthn> arnsholt: yeah

[17:10] <jnthn> Well, if by "where it should be placed" you mean "where the shadow copy goes"

[17:10] <jnthn> arnsholt: IN_STRUCT just means it's a value we return directly.

[17:11] <masak> moritz: nice one. I got my current job from play -- ultimately from getting to know jnthn++ here on #perl6.

[17:11] <masak> isBEKaml: you must have missed many meetings, sir. we've been trying to take over the world for years :P

[17:12] <isBEKaml> masak: Yes, I hope I'm not too late to the party!

[17:13] <isBEKaml> moritz: Yes, that was a good read (resonated with me as much as Job's SHSF talk). 

[17:14] <geistteufel> TimToady: well, I'm just playing with my nickname. I'm a perl5 developer

[17:14] <geistteufel> I let PHP behind several years behind

[17:14] <isBEKaml> moritz: erm, SHSF -- Stay Hungry, Stay Foolish. 

[17:16] <masak> isBEKaml: you're not too late to the party. just find a passion and go with the flow.

[17:16] <TimToady> I'd categorize perl5 programming as more like purgatory... :)

[17:16] *** GlitchMr joined
[17:17] <isBEKaml> TimToady: If I understand the word purgatory, that's weird coming from you. :)

[17:17] <masak> not really.

[17:17] <masak> TimToady has been biased towards Perl 6 for several years now. :)

[17:18] <TimToady> purgatory: seems real nice when you first come from hell...

[17:18] <arnsholt> jnthn: Quite, quite. And "return directly" is the flatteing we have ATM, right?

[17:18] <isBEKaml> masak: I know, maybe I'm just surprised he used that word. :)

[17:18] <jnthn> arnsholt: Yeah.

[17:19] <masak> isBEKaml: "people, please! there are atheists around!" :P

[17:19] <isBEKaml> *lol*

[17:19] <arnsholt> That reminds me, I need to finish the last half of Paradiso =)

[17:19] <arnsholt> Maybe I'll get around to that roughly around the same time as Perl 6.0.0

[17:20] <arnsholt> That'd be an excellent conincidence ^_^

[17:20] <TimToady> we're trying to finish the last half of Paradisio too, as it were

[17:20] <TimToady> or maybe it's the third 80% by now

[17:21] <cognominal> masak:  and ignostic (note the initial) too because atheism is a very intolerant sect

[17:21] <cognominal> *initial i

[17:22] * cognominal is probably a gnostic ignostic. The two sides don't come from the same part of thebrain.

[17:22] <TimToady> well, a lot of folks are antignostic: they don't wanna know :)

[17:23] <masak> cognominal: ignosticism, not to be confused with apatheism :P

[17:23] <cognominal> :)

[17:23] <isBEKaml> masak: There's something about #perl6 that keeps bringing all that fun back... :)

[17:23] <masak> isBEKaml: I know!

[17:23] <TimToady> I care!

[17:24] <cognominal> the feat is doing it without coming immediately to insults.

[17:24] <TimToady> ah, the French, always worried about insults...

[17:24] <TimToady> in what other language can you insult someone by saying "I insult you!"

[17:24] *** fgomez joined
[17:25] <isBEKaml> smooth insults? o_O

[17:25] <masak> oh, I just realize that that old joke is an autopun: "Is it ignorance or apathy? I don't know, and I don't care."

[17:25] <masak> realized*

[17:26] <masak> it's something as unusual as a *tandem* autopun!

[17:26] * arnsholt idly wonders why there's an i in ignorance

[17:26] <TimToady> it's more ignoble that way

[17:26] <masak> arnsholt: er, it negates "gnosis"?

[17:26] <masak> as in "not knowing".

[17:27] <TimToady> probably derives linguistically from the in- negator

[17:27] <isBEKaml> masak: shouldn't that be agnorance? I don't care about "gnosis"!

[17:27] *** awwaiid left
[17:27] <arnsholt> Well, yeah. But the greek negative prefix is a(n)

[17:27] <cognominal> masak:  "er", as german inchative?

[17:27] <TimToady> inconceivable!

[17:27] <isBEKaml> ergnorance! 

[17:27] <masak> isBEKaml: shouldn't be "irrogance"? I don't know about "rogance"!

[17:28] <arnsholt> But yeah, probably what TimToady suggests. Greek root with Latin negation

[17:28] <masak> er, shouldn't that be "ipathy"? I don't know about "pathy"!

[17:28] <isBEKaml> masak: Bah! It's all greek and latin to me!

[17:28] <benabik> Reminds me of a T-shirt: "Polyamory is wrong! It's either multiamory or or polyphilia. But mixing Greek and Latin roots? Wrong!"

[17:28] <masak> hah!

[17:28] <masak> well, "hexadecimal" is just as wrong.

[17:28] *** bluescreen10 joined
[17:29] *** wolfman2000 left
[17:29] <isBEKaml> so is saying "runny nose" and "smelly feet"!

[17:29] <isBEKaml> back to engreesh, forget g and l.

[17:30] <TimToady> and don't be "hypersensitive"

[17:30] <masak> language is fundamentally broken. it's causes side effects in people's brains. not FP at all.

[17:30] <masak> ideally, we should do language in a monad.

[17:30] <arnsholt> Oxford Latin Dictionary to the rescue. It is indeed in-gnotus, from Greek agnostos

[17:31] <benabik> OED++

[17:31] <isBEKaml> OLD++

[17:31] <arnsholt> benabik: I need to get that shirt! =D

[17:31] <TimToady> actually, I have no problem with mixing roots; we borrow productive language bits, not fossils, and there's no rule that says the new language cannot mix and match

[17:31] <benabik> isBEKaml: Maybe it should be Oxford++

[17:32] <moritz> Oxfnord :-)

[17:32] <arnsholt> TimToady: Yeah. This is where my prescriptivist and descriptivist brains start to disagree =)

[17:32] <TimToady> OED is hyperlikeable

[17:32] <TimToady> not to mention superlikeable

[17:33] <isBEKaml> or supralikeable

[17:33] <arnsholt> Hehe

[17:34] <masak> moritz: Oxfnord -- that's why I keep forgetting it exists!

[17:34] <tadzik> r: my $a = method (Str $a) { ... }; say $a.perl

[17:35] <p6eval> rakudo 3bd91f: OUTPUT¬´method <anon>(Mu , Str $a, Mu %_!) { ... }‚ê§¬ª

[17:35] *** awwaiid joined
[17:35] <jnthn> tadzik: huh, the $_! is wrong

[17:35] <tadzik> the first and the last parameter are surely correct, yet not really friendly

[17:35] <jnthn> tadzik: Should be *%_

[17:35] <tadzik> yeah, should be... exactly

[17:35] <moritz> and Mu :

[17:35] <jnthn> Right.

[17:35] <isBEKaml> jnthn: I vaguely recall you saying that back when nom was in the works. That's still in?

[17:35] <TimToady> this fossilish view of language works elsewhere too; I predict that other languages will borrow the syntax of Perl 6's meta-operators without borrowing the idea of meta-operators

[17:36] <tadzik> I wonder if Pod::To::Text should just use Method.perl for pretty-printing them for docs

[17:36] <tadzik> that seems like the most obvious way, but I suppose the output can be shorter and more clear

[17:36] <moritz> tadzik: in time, that will include the source code :/

[17:36] <isBEKaml> And, I don't see why we need the Mu before Str in the signature.. 

[17:36] <tadzik> oh, then it's a no-go anyway

[17:36] <tadzik> isBEKaml: the invocant

[17:36] <moritz> isBEKaml: that's the invocant marker gone wrong

[17:37] <isBEKaml> ah

[17:38] <tadzik> I wonder if I should skip the invocant when printing the method in --doc

[17:38] <tadzik> or maybe just look into it and add a 'Class method' or 'Instance method' marker to it

[17:46] *** NamelessTee left
[17:47] <tadzik> https://gist.github.com/2386191 -- this deliberately skips the invocant marker for the sake of readability and no confusion. Thoughts?

[17:48] <dalek> nqp/cstruct-work: 51a3250 | (Arne Skj√¶rholt)++ | src/6model/reprs/CStruct.c:

[17:48] <dalek> nqp/cstruct-work: Start letting CStruct have CArray members.

[17:48] <dalek> nqp/cstruct-work: review: https://github.com/perl6/nqp/commit/51a3250d24

[17:48] <dalek> nqp/cstruct-work: 6700db0 | (Arne Skj√¶rholt)++ | .gitignore:

[17:48] <dalek> nqp/cstruct-work: Ignore OS X bundles.

[17:48] <dalek> nqp/cstruct-work: review: https://github.com/perl6/nqp/commit/6700db086a

[17:48] <moritz> tadzik: +1

[17:49] <tadzik> +1 from my mentor; settled then :)

[17:49] <arnsholt> jnthn: https://github.com/perl6/nqp/commit/51a3250d24c460ff99f8a2a2fa6d72b940c76aa1 # First commit in branch cstruct-work

[17:49] <benabik> method outside of a class is a warning, not an error?

[17:49] <tadzik> warning

[17:50] <moritz> and only if it's named

[17:50] <tadzik> you can my $a = method(); and then A.^add_method

[17:50] <moritz> r: my $x = method () { };

[17:50] <p6eval> rakudo 3bd91f:  ( no output )

[17:50] <arnsholt> Oh, right. dalek++ prints all the commits here as well. I forgot =)

[17:50] <moritz> r: my $x = method foo() { };

[17:50] <p6eval> rakudo 3bd91f: OUTPUT¬´Useless declaration of a has-scoped method in mainline‚ê§¬ª

[17:51] <jnthn> arnsholt: "The initialize_slots member in the REPRData needs to be more complex" - not sure it does...

[17:51] <jnthn> arnsholt: At least, not for the CArray case stuff you're doing

[17:51] <TimToady> it's interesting to see ‰∏ãÂçà "down noon" for afternoon, when I just learned yesterday that ÊòÉ means both "afternoon" and "decline".  Are these both references to the sun starting down from the zenith?

[17:51] <jnthn> arnsholt: Since that isn't "flattened in"

[17:52] <TimToady> I suppose I should ask that when it isn't in the middle of the night in China

[17:53] <dalek> rakudo/nom: 73ce76a | tadzik++ | lib/Pod/To/Text.pm:

[17:53] <dalek> rakudo/nom: [Pod::To::Text] Print subs and methods prettier

[17:53] <dalek> rakudo/nom: 

[17:53] <dalek> rakudo/nom: This delibarately skips invocant and optional named params in method

[17:53] <dalek> rakudo/nom: signature for the sake of readability and the least amount of confusion.

[17:53] <dalek> rakudo/nom: 

[17:53] <dalek> rakudo/nom: We're not using simply Sub.perl and Method.perl since they may contain

[17:53] <dalek> rakudo/nom: the source code one day, and we almost certainly don't need that.

[17:53] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/73ce76a49a

[17:53] <tadzik> this is cool. I can now write "#= get a list of words from @words matching $input" and it formats nicely

[17:53] <moritz> \o/

[17:53] <arnsholt> jnthn: Right. In that case, initialize() needs to be more clever, since right now it passes the sub-initializer a pointer directly into the cstruct blob

[17:54] <arnsholt> I just couldn't think of a way to do that without a bit more information

[17:57] <jnthn> arnsholt: But a pointer to an array is a reference type, so there's no need to call a sub-initializer.

[17:57] <jnthn> arnsholt: It just starts life NULL.

[17:57] <jnthn> arnsholt: And if it's requested, we know the type object.

[17:58] <arnsholt> Oh, right. Good point =)

[18:06] <masak> TimToady: no, there's just a general space/time synesthesia meme in China, saying that time moves downwards, like in a schedule app.

[18:07] <masak> TimToady: there is interesting research proving that such a synesthesia exists for exactly those groups that have such metaphors in their language.

[18:07] <masak> s/proving/strongly indicating/

[18:09] <sorear> good * #perl6

[18:10] <sorear> jnthn: It succeeds in n because n doesn't enforce use strict for runtime lookups - it goes to GLOBAL

[18:10] <TimToady> though ÊòÉ breaks down into "sun" and "slant", and we can say "the slanting sun"

[18:12] <TimToady> and I do believe in "Metaphors We Live By", I kinda doubt your synesthesia thesis in this particular case, since time flows uphill for ‰∏äÂçà  :)

[18:12] <TimToady> *and while

[18:12] <dalek> nqp/cstruct-work: 3bde5a3 | (Arne Skj√¶rholt)++ | src/6model/reprs/CStruct.c:

[18:12] <dalek> nqp/cstruct-work: Remove some TODOs since they weren't actually necessary. jnthn++

[18:12] <dalek> nqp/cstruct-work: review: https://github.com/perl6/nqp/commit/3bde5a38df

[18:12] <sorear> masak: My impression of Eliezer is that he is far more concerned with stopping other people from getting there first than actually doing anything himself

[18:13] <masak> TimToady: nono, that's to be read as "above noon".

[18:13] <masak> sorear: really? I hadn't gotten that impression so far. :/

[18:14] <moritz> jnthn: fwiw I got the same spectest results as felher. One is probably due to a test stupidity, the other one might be a regression that an error previously thrown with a dedicated type is now just a string

[18:14] <jnthn> moritz: I knew there was something with misc so I ignored it, but I may well have caused a regression.

[18:14] <moritz> jnthn: no, it's an actual regression

[18:14] <moritz> ./perl6 -e 'use MONKEY_TYPING; augment class NoSuchClass { }'

[18:14] <moritz> ===SORRY!===

[18:14] <moritz> get_pmc_keyed_str() not implemented in class 'LongName'

[18:15] <jnthn> Oh

[18:15] <moritz> jnthn: I fixed the failure in misc.t that we had for a few weeks

[18:15] <jnthn> yeah, I pass soemthing that was a string before that is now an object

[18:15] <moritz> d0568017e25387bfe78831eb9e2f5b54e507c391 from yesterday

[18:15] <sorear> .go SIAI scary idea

[18:16] <sorear> huh, I thought phenny had that feature.

[18:16] <moritz> jnthn: if you fix that one, I'm +1 to merging, and will handle the other test failure in misc.t

[18:16] <moritz> though the wrong other test that fails hides a real error

[18:16] <moritz> class A { }; subset A of Any;

[18:16] <moritz> doesn't die, but should

[18:18] *** eoh| joined
[18:18] *** eoh| left
[18:18] *** eoh left
[18:18] *** eoh joined
[18:18] *** eoh left
[18:18] <sorear> masak: not 100%, but relevant: http://multiverseaccordingtoben.blogspot.com/2010/10/singularity-institutes-scary-idea-and.html

[18:23] <jnthn> moritz: Will take care of it.

[18:24] <cognominal> jnthn, have you looked at  https://gist.github.com/2343861?

[18:25] <jnthn> no

[18:25] <jnthn> (looking)

[18:26] <lichtkind> jnthn: do you have any clue why slightest change even innocent like my $var = 3; in rakudo made it uncompileable?

[18:26] <jnthn> cognominal: Interesting to see. Unfortunately I suspect it'll slow parsing down a lot if we apply it right now.

[18:26] <cognominal> That's could be a good comment

[18:26] <jnthn> cognominal: But we want that stuff written in NQP in the end.

[18:27] <cognominal> my point is not that it could replace existing code today but that it should compile.

[18:27] <jnthn> cognominal: Well, the QAST work and the NQP::Optimizer that'll come after it should help :)

[18:28] *** lichtkind left
[18:29] <jnthn> moritz: fixed locally

[18:29] <moritz> jnthn: \o/

[18:29] <moritz> jnthn: I'm working on improved tests too

[18:29] <jnthn> cognominal: OK, I don't know why the NQP compiler would be unhappy at first glance.

[18:29] *** lichtkind joined
[18:30] <jnthn> ooh, dinner time...I should find something to eat :)

[18:30] * jnthn has some work towards pseudopackage stuff locally...hopefully land some of those later tonight :)

[18:30] <dalek> roast: c9e3611 | moritz++ | S32-exceptions/misc.t:

[18:30] <dalek> roast: more robust name clash tests

[18:30] <dalek> roast: review: https://github.com/perl6/roast/commit/c9e3611358

[18:33] *** leprevost left
[18:36] <geistteufel> I wonder perl6 is now in development since several years, and seems completly a new language. this language will be ready for production someday ? in years ? month ? is they a cpan for perl6 or perl6 include already so much stuff that cpan is not really a need actually ?

[18:37] <masak> geistteufel: it's a gradual thing.

[18:37] <moritz> geistteufel: "ready for production" greatly depends on the production. It's already useful for some kinds of production environment

[18:38] <masak> geistteufel: I'm using Perl 6 for things that I would consider to be "in production". it's ready for some things, not for others.

[18:38] <moritz> geistteufel: and we're slowly evoliving a module system. module.perl6.org give a short overview

[18:38] <geistteufel> I see, but they is not yet interpretor with good speed, right ?

[18:38] <masak> geistteufel: the progress is not defined so much by "we need to put this feature in place" but by "we need to make things smaller, faster, and more polished".

[18:39] <masak> geistteufel: try Niecza, it's got surprisingly good runtime speed. try Rakudo, it's got surprisingly good startup time :)

[18:39] *** birdwindupbird joined
[18:41] <geistteufel> actually we can use it with command line tools only. Or solve stuff with math. But not really open for the web. They is a Plack equivalent, CGI ? FCGI ?

[18:41] <sorear> the main thing is that all known Perl 6 implementations have agonizingly slow parsers

[18:41] <sorear> We have a rudimentary Plack equivalent

[18:42] <geistteufel> and connection to db, like MySQL, PostgreSQL, MongoDB?

[18:43] <sorear> rudiments of those too

[18:43] <masak> yeah. we have stuff, but it's not always up-to-date, or very powerful.

[18:44] <masak> really what we need is more hands to use stuff, and fix things up rather than get frustrated about their current shoddiness :)

[18:44] <sorear> I think a lot of the library stuff hasn't matured because nobody wants to build on such slow interpreters... but this is probably a self-serving delusion, since my research focus is speeding up the parsers ;)

[18:44] <masak> some of it is bitrot.

[18:44] <masak> bitrot has a slightly demotivational effect on ecosystem people. :)

[18:44] * sorear wonders if masak is interested in the Goertzel link

[18:45] <geistteufel> I have take a look of the coding. It's really impressive.

[18:46] <geistteufel> The good point with perl5 is that they is 1 interpreter, so every energy is focus on this one.

[18:46] <masak> sorear: I am. haven't read it yet. will react to it when I have.

[18:46] <geistteufel> have multiple interpreter spare the effort, so it is slower to get something fast

[18:46] <tadzik> 9 women can't birth a child in a month

[18:46] <benabik> geistteufel: The downside is that perl5 is defined by the interpreter, so future versions have to be bug-compatable.

[18:47] <moritz> geistteufel: that's a common fallacy

[18:47] <moritz> geistteufel: you can only try a single design with a single compiler

[18:47] <benabik> (Or perhaps bug-compatable isn't quite it.  "Implementation quirk" compatible, perhaps.)

[18:47] <geistteufel> but if an interpreter can do stuff, and not the over, it will be like having multiple browser. IE / Mozilla / Opera / Chrome ... a really complain of implementation of the language for developer ?

[18:48] <moritz> that's why we have a test suite, and bugreports for missing features

[18:48] <TimToady> every implementation has blind spots, and if there is only one implementation, these blinds spots get set in concrete

[18:48] <TimToady> to mix a metaphor or two

[18:48] <geistteufel> ok so any interpreter will have to follow the last implementation?

[18:48] <moritz> no

[18:48] <moritz> there's a spec

[18:48] <geistteufel> if all interpreter do the same stuff the same way, what are the point to have many one ?

[18:49] <tadzik> what's the point of clang if there's gcc?

[18:49] <moritz> geistteufel: doing something isn't the same as doing it well

[18:49] <TimToady> there are many ways to do the same thing

[18:49] <geistteufel> That"s the modo of perl language :)

[18:50] <cognominal> grosso motto

[18:50] <sorear> *motto

[18:50] <geistteufel> that's funny. It's really a new way to do. Write spec, let over people to implement the spec. It is more open

[18:51] <moritz> well, it's not quite so unidirectional as you make it sound

[18:51] <TimToady> that's more of a waterfall descriptiong than a whirlpool description

[18:52] <TimToady> nobody is smart enough to spec Perl 6 in advance

[18:52] <geistteufel> TimToady: I'm not english native (like you should have notice), so it's hard for me to understand the metaphore

[18:52] <geistteufel> I see.

[18:52] <TimToady> so there has to be feedback from implementations back to spec too

[18:53] <TimToady> and there is a lot of useful information going side-to-side between the different implementations too

[18:53] *** fsergot left
[18:54] <geekosaur> multiple implementations is key to this as well:  it helps distinguish "hard in this implementation" from "hard in general"

[18:54] <geistteufel> ok. I see.

[18:54] <moritz> oh, and we are at the point where the implementation can exchange code

[18:55] <TimToady> especially the bits written in Perl 6 :)

[18:55] <moritz> because both are partially written in Perl 6

[18:55] <geistteufel> So interpreter say "perl6 - spec 20120425 compatible" or something like that

[18:55] <TimToady> none of them are yet spec compatible, or even test-suite compatible

[18:55] <geistteufel> and so they is compiler; can we compile our perl6 code ?

[18:56] <geistteufel> I create a pm, and it build a pmc or something ?

[18:56] <TimToady> so far we just say "works in niecza 2012-04-14" and such

[18:57] <TimToady> but we'll converge on the test suite eventually

[18:57] <geistteufel> some of them implement already some part of the spec, over one over part. if we need feature of part impleted in 2 separate compiler, we are bloody annoying ?

[18:57] <moritz> the compiler writers know that the spec writer are annoying :-)

[18:58] <TimToady> especially that snotty guy that wrote the STD parser :)

[18:58] <sorear> tadzik++ "9 women cannot birth a child in a month"

[18:59] <geistteufel> I'm just curious, having multiple compiler, multiple implentation, sound like 'HTML & CSS' interpreter. And It's sometime hell to solve stuff for all interpreter version. That is why I wonder how can that work for perl6.

[18:59] <sorear> geistteufel: "waterfall" means https://en.wikipedia.org/wiki/Waterfall_model

[18:59] <masak> sorear: Brooks takes that further. he says there are O(N**2) costs in making a team bigger.

[18:59] <geistteufel> sorear: we can't parallelize everything :)

[18:59] <tadzik> sorear: oh, "birth" was gramatically correct in this context?

[18:59] <cognominal> TimToady, is your secret projet is to get a language capable to translate the bible in any language?

[19:00] <cognominal> *project

[19:00] <masak> tadzik: maybe "gestate" covers it better. but I'm no native speaker either :)

[19:00] <sorear> tadzik: I think so?  I'm not fretting it

[19:00] <tadzik> ok then. I wasn't sure :)

[19:01] <TimToady> cognominal: no, my not-so-secret project is to translate theological concepts into the society of hackers

[19:01] <sorear> geistteufel: "whirlpool" is a metaphorical contrast to a waterfall, where water moves in every direction, not just one

[19:02] <geistteufel> I get it; the waterfall model (I use this at work) is not always nice to apply, and it take time to release something concistant.

[19:02] <cognominal> TimToady, that's ambitious indeed.

[19:03] <TimToady> geistteufel: there's only one person smart enough to design things in advance, and He's theological... :)

[19:04] <tadzik> eek

[19:04] <TimToady> so all we can do is approximate that with time travel

[19:04] <geistteufel> so the language progress with experience.

[19:04] <dalek> ecosystem: 3b739ab | tadzik++ | META.list:

[19:04] <dalek> ecosystem: Add Grammar::Debugger

[19:04] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/3b739abe09

[19:04] <TimToady> geistteufel: yes

[19:05] <cognominal> geistteufel, whirlpool is about feedback

[19:05] <TimToady> fortunately, the future is unevenly distrubuted, so we can steal ideas from the future to help the other parts catch up :)

[19:05] <cognominal> the pi factor in waterfall projects is due to lack of appropriate feedback.

[19:06] *** u2012 joined
[19:06] <geistteufel> I have to read a book on it

[19:06] <TimToady> it's difficult to come up with a good strange attactor in real life because of inertia

[19:06] <geistteufel> and try it a little, just play around

[19:06] <geistteufel> the issue is to find something interesting I can build with it.

[19:07] <TimToady> but to get good feedback at all scales requires that our "particles" stay light-on-their-feet so they can turn quickly

[19:07] *** fsergot joined
[19:07] <geistteufel> I love create API, working with REST or Plack. And I don't know if I can create this kind of stuff with perl6

[19:07] <TimToady> you can, eventually :)

[19:07] <moritz> you can now

[19:08] <masak> right now, the answer is, "you can, but it might not be 100% smooth"

[19:08] <moritz> though maybe not as easily as with p5 right now

[19:08] <TimToady> but we have to help redistribute that future to you :)

[19:08] <geistteufel> with rakudo ?

[19:08] <moritz> yes

[19:08] <masak> for example.

[19:09] <geistteufel> the guy of rakudo working hard to implement fully the spec, or to speedup their interpreter right now ?

[19:09] <tadzik> huh. Does Grammar::Tracer work for you?

[19:09] <TimToady> geistteufel: it's not either/or, but both/and

[19:09] *** NamelessTee joined
[19:09] <geistteufel> I thing if they is a really fast interpreter, they will be a lot more active developer on the language

[19:10] *** u2012 left
[19:10] <masak> geistteufel: a few months back, startup time got significantly faster in Rakudo. and yes, that does make a huge difference, just as you say.

[19:10] <moritz> masak: where "a few" is "less than two"

[19:11] *** uvtc joined
[19:11] <geistteufel> they is something like Test::Simple for perl6 ?

[19:11] <TimToady> but Perl 6 has the opposite problem from Perl 5.  Perl 5 is a big glob of premature optimizations, while Perl 6 is a big glob of postmature optimizations."

[19:11] <moritz> use Test;

[19:12] <masak> but it's more like Test::More :)

[19:13] <uvtc> Is there a shortcut for referring to a particular message on this channel in the irclog?

[19:13] <geistteufel> yeah I have to read a book, I think it is like learning a new language. with perl5 based. The hard stuff is to switch back afterwhile :)

[19:13] <moritz> uvtc: the timestamp on the left is a link to that particular line

[19:13] <TimToady> uvtc, look at the timestamp in the log

[19:14] <uvtc> Right, but I mean, instead of copying/pasting that link into #perl6, I thought there might be a special syntax that gets recognized. The way S02 gets recognized.

[19:14] <uvtc> For example.

[19:14] <moritz> uvtc: nope

[19:14] <uvtc> moritz, k, thanks.

[19:16] <moritz> hm, it's possible

[19:16] <moritz> we could make an irclog:<id here> syntax

[19:17] <moritz> and since it's the irclog that renders it, it can look up channel and day too

[19:17] <tadzik> is there anything known to be broken with nom grammars? Like, regressions against b?

[19:17] <uvtc> moritz, All you'd need is some ‚çü's.

[19:17] <uvtc> ;)

[19:17] <moritz> but that would only be useful if there was an easy way to get at the ID

[19:17] <tadzik> Text::CSV is broken, Config::INI too, and I just figured that Text::CSV grammar behaves correctly on niecza

[19:17] <masak> geistteufel: I regularly switch between Perl 5 and Perl 6. sometimes I slip, but it's fairly benign.

[19:17] <moritz> tadzik: yes

[19:18] <tadzik> moritz: what are those?

[19:18] <masak> geistteufel: I did a Perl 5 course last week. kept writing `perl -e 'say ...'` :)

[19:18] <TimToady> -E works better there

[19:18] <moritz> tadzik: match object construction is sometimes incomplete... lemme find the ticket

[19:18] <masak> TimToady: exactly.

[19:18] <TimToady> Exactly.

[19:18] <tadzik> moritz: in this case it's overcomplete :)

[19:18] <masak> :P

[19:18] *** u2012 joined
[19:19] <moritz> tadzik: could be the same underlying issue

[19:19] <jnthn> Most of the issues boil down to the mark_commit fix that's needed

[19:19] <tadzik> https://gist.github.com/2387188

[19:19] <masak> TimToady: sometimes I think your brain runs on puns and autopuns...

[19:20] <masak> tadzik: that looks like old '**' syntax, for one thing.

[19:20] <masak> doesn't Niecza implement the new syntax?

[19:20] <tadzik> niecza warns about that, yes. What's the new one?

[19:21] <tadzik> just '%'? Just '%' doesn't work at all

[19:21] <masak> tadzik: quantifier and '%'

[19:21] <tadzik> oh

[19:21] <masak> that's why the new syntax is better. see also, ingy ;)

[19:21] <tadzik> okay, but Rakudo still fails here :)

[19:22] <moritz> tadzik: https://rt.perl.org/rt3/Ticket/Display.html?id=107254

[19:22] <tadzik> moritz: thanks

[19:22] <masak> oh, it's that one :/

[19:22] <masak> yeah, that one's basically blocking on pmichaud-shaped tuits, I think.

[19:24] <tadzik> masak: https://github.com/masak/csv/pull/1

[19:24] <jnthn> pmichaud shaped tuits or jnthn to drink enough... :)

[19:24] <jnthn> Hopefully the pmichaud shaped tuits will show up at the upcoming hackathon though :)

[19:24] <tadzik> if not, we'll just get you drunk ;P

[19:24] <jnthn> The same fix will unblock a bunch of qbootstrap issues

[19:25] <jnthn> tadzik: Is *Oslo*? :)

[19:25] <tadzik> is there something about Oslo I need to know?

[19:25] <jnthn> tadzik: *mumble*beer price*mumble*

[19:25] <jnthn> s/Is/In/

[19:26] <tadzik> aww

[19:26] <lichtkind> am i late for exorcism?

[19:27] <geekosaur> (jnthn-plus?)

[19:27] <TimToady> no, just for the seance, but that's okay

[19:27] <TimToady> we need someone late at the seance

[19:28] <uvtc> lichtkind, re. http://irclog.perlgeek.de/perl6/2012-04-14#i_5442414 , can you tell where gitit failed?

[19:28] *** brrt joined
[19:29] <masak> tadzik: https://github.com/masak/csv/commit/9b731b3b1fa290937a66611e4e37d976e3163e2e

[19:29] <uvtc> lichtkind, s/can you tell/can you tell me/

[19:30] <cognominal> https://rt.perl.org/rt3//Public/Bug/Display.html?id=107254 seems releated to my pet bug https://rt.perl.org/rt3/Public/Bug/Display.html?id=111288

[19:30] <dalek> rakudo/nom: 03edce1 | moritz++ | docs/running.pod:

[19:30] <dalek> rakudo/nom: document --doc

[19:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/03edce17cb

[19:30] *** imarcusthis left
[19:33] * masak fondly remembers Ciechan Maciejowe... :)

[19:33] <lichtkind> uvtc: yes i could not create with it a simple appendix a entry, my example was to create a bold triangle meta op within a marker that tells you to place here your operator which has the same syntax like a html tag , there seems to be no way to get this,  i though how to use other brackets but i need all 3 kinds for various meanings

[19:33] *** imarcusthis joined
[19:34] <moritz> I find src/core/IO/ArgFiles.pm quite confusing

[19:35] <jnthn> .oO( it makes me say arg! )

[19:36] <jnthn> moritz: In what way is it confusing?

[19:36] * jnthn has just glanced through it now

[19:36] <masak> sometimes I wish we'd called .IO ".File"

[19:36] <masak> $path.File

[19:36] <moritz> jnthn: it keeps state in $!args, $!io and $!io.opened

[19:39] <uvtc> lichtkind, sent you a private msg so as not to clog up this channel

[19:42] <moritz> jnthn: how can I distinguish an exhausted IO::ArgFiles object from an empty one, ie one that is supposed to read only from $*IN?

[19:42] *** mucker left
[19:43] <jnthn> moritz: Hmmm. It just does: $!filename = $!args ?? $!args.shift !! '-';

[19:43] <jnthn> So, once it's eaten up all the args...it can't.

[19:44] <jnthn> Is it meant to read from STDIN after exhausting the list of files?

[19:44] <moritz> no

[19:44] <jnthn> 'cus that's what it looks like it's doing today...

[19:44] <moritz> it doesn't

[19:44] <jnthn> $.args not containing a Positional could be done way

[19:44] <jnthn> Though maybe that's a bit evil

[19:45] <moritz> anyway, that's why I find it confusing

[19:46] *** NamelessTee left
[19:47] *** ggoebel left
[19:48] *** ggoebel joined
[19:55] <masak> sorear: "provably safe" is ridiculous, for the reasons TimToady touch upon in http://www.wall.org/~larry/pm.html

[19:55] <masak> sorear: I can imagine a "hard takeoff", but, hm, http://www.scottaaronson.com/blog/?p=346

[19:57] <masak> these days, my priors tell me we're more likely to have a disastrous global "event" caused by an energy crisis than we're to have it caused by awesome AI emerging out of a lab somewhere.

[19:58] *** u2012 left
[19:58] <timotimo> either energy crisis or any other resource. metals, say

[19:59] <timotimo> kind of sad to think this might happen in my lifetime :|

[19:59] <timotimo> noone's getting a break

[19:59] <masak> "might" feels kinda weak here.

[19:59] <timotimo> either you're old now and you've had a war in your life or you're young and you'll have energy crisis or any other resource shortage ruining a part of your life

[20:00] <moritz> "(Also, if the Singularity ever does arrive, I expect it to be plagued by frequent outages and terrible customer service.)"

[20:00] <masak> Scott++

[20:00] <sorear> I'm sypathetic to the Hubbardian model of no hard runnings-out

[20:00] *** ggoebel left
[20:01] <sorear> we won't go from copper to no copper overnight - as nice mines are exhausted, the price will rise until it becomes economical to mine landfills, at which point it will be unpleasantly high but stationary

[20:01] <cognominal> today we would need 1000 "human energy slaves" for each human being if we were to consume as much energy as today without machines to transform whatever in energy.

[20:02] <sorear> cognominal: I couldn't parse that.

[20:02] <cognominal> transitively probably more because one need infrastructure to care for these "slaves".

[20:02] <masak> sorear: yes, but while increases are often steady and smooth, decreases seldom are.

[20:02] *** GlitchMr left
[20:02] *** ggoebel joined
[20:02] <dalek> rakudo/nom: e60c80c | moritz++ | src/core/IO/ArgFiles.pm:

[20:02] <dalek> rakudo/nom: implement ArgFiles.slurp

[20:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e60c80c5fc

[20:02] <dalek> rakudo/nom: 9d489dd | moritz++ | src/core/ (2 files):

[20:02] <dalek> rakudo/nom: rename ArgFiles to IO::ArgFiles

[20:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9d489dd22c

[20:02] <dalek> rakudo/nom: d9753c1 | moritz++ | src/core/IO (2 files):

[20:02] <dalek> rakudo/nom: implement zero-arg slurp

[20:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d9753c1c3c

[20:03] <masak> sorear: for rough declines, see http://cluborlov.blogspot.se/2010/11/peak-oil-is-history.html

[20:03] *** machine2 left
[20:04] <cognominal> sorear: to produce the energy you use (thru manufactured objects and you daily life like transportation), you would need 1000 human on bicyles with dynamos, working 12 hours a day. 

[20:04] <masak> key idea "Planet Earth Can't Import Oil".

[20:05] <sorear> I think that the human future, if there is one, will qualitatively resemble the distant past - equilibrium state with carrying capacity

[20:05] * moritz wonders if "Brave New World" is considered post-singularity, from a philosophical point of view

[20:05] <cognominal> there is still slavey today but not that kind of slavery.

[20:05] <timotimo> if only human civilization growth had been controlled so much sooner :|

[20:05] <masak> sorear: it has to. exponential growths aren't sustainable.

[20:06] <sorear> cognominal: that's just stupid.  Every step you go up the food pyramid loses 90%.  Do away with the slaves and just burn their food in a power-plant boiler.  Better yet, avoid the 99% losses from croppery and build solar.

[20:06] <masak> I find it interesting that previous generations worried about a nuclear threat. this generation worries about exponential curves hitting various roofs. population, global warming, oil consumption...

[20:07] <sorear> cognominal: once you've eliminated the factor of 1000+ inefficiency of using humans as an energy source, it doesn't seem so bad

[20:08] <cognominal> photovoltaic is build in China with coal so it has a big carbon footprint and it cannot provide enery when we need it and we don't know how to store energy except in hydroelectric barrage (pumping up in low cost hours).

[20:08] <sorear> In the natural world, when a species is introduced into a new environment, it grows exponentially until it hits a roof, then stabilizes

[20:09] <timotimo> sorear: i think the problem with humans is the kind of connectedness. with civilizations growing in developed countries, they are more likely to exploit third world countries even more than they already do

[20:09] <cognominal> s/barrage/dam/

[20:10] <cognominal> timoto: so true

[20:12] <masak> sorear: yeah. there's some overdue "stabilization" up ahead, that's the main point. :/

[20:13] <sorear> there's pain ahead, but I don't see the need for nihilistic despair.

[20:13] <masak> in that vein, anyone who hasn't seen http://www.youtube.com/watch?v=F-QA2rkpBSY probably should.

[20:13] <timotimo> so we're heading towards a stabilization - do we have any idea how it'll pan out, given that we are kind of overstaying our welcome, so to speak?

[20:13] <masak> sorear: no, despair won't help at all, and I'm not suggesting that. preparing helps, but the uncertainties makes it a bit vague what to do.

[20:14] <cognominal> some cynic peiple contend that the recent slow down due to fincancial bubbles exploding has been beneficial because it has had a big impact on the energy comsumption.with the slowing of the global economy.

[20:14] <masak> timotimo: let's just say there will be no more Apple stores.

[20:14] <masak> cognominal: I doubt the effect has been that noticeable.

[20:15] <cognominal> unemployed people don't drive cars to work.

[20:15] <masak> I doubt the energy consumption has gone down by more than, say, 15%.

[20:15] <sorear> masak: I have a student in a class of mine who rants about how the 2011 Tohoku earthquake and tsunami was a plot by environmentalists to forestall overpopulation.  It's a bit depressing

[20:15] <masak> cognominal: it's industries that consume the most energy, compared to individuals.

[20:15] <cognominal> masak, probablt less than that, but noticable though

[20:16] <masak> sorear: I hear that and think "only in the US..."

[20:16] <timotimo> sorear: we have the power to make earthquakes? or does he mean the earthquake was used - via mismanagement - to get as much damage as possible done?

[20:18] *** Araq joined
[20:18] <sorear> masak: he's on visa from Kuwait; I don't know how much US culture has poisoned him

[20:19] <masak> huh.

[20:19] <masak> anyway, that's nuts.

[20:20] <moritz> there are known cases where geothermal drilling has caused earthquakes, but on a much smaller scale

[20:21] * moritz wonders if availability of TV and birth rates are correlated

[20:21] <masak> so it's claimed.

[20:21] * masak has no plans to get a TV :)

[20:22] <moritz> if so, there's a much more effective (and equally cruel :) way to prevent overpopulation

[20:22] <timotimo> wait, in what direction would they corellate?

[20:22] <timotimo> corelate*

[20:23] <masak> more TV, lower birth rates.

[20:23] <sorear> meh, we all know affluence lowers birth rates

[20:23] <masak> allegedly because they both occupy the "something fun to do in the evening" niche.

[20:24] <jnthn> What on earth could be on TV that's so interesting?!

[20:24] <sorear> (I know several people who argue that rising world standards of living will cause US population to tank before it reaches the stabilization point)

[20:24] <cognominal> lower birth rates but dumb kids not informed about contraception

[20:24] * masak plans to even out the no TV with some affluence :)

[20:25] <masak> cognominal: you get your contraception information through the tube in France?

[20:25] <masak> we got it at school, as I recall. no TV required.

[20:25] <geistteufel> is it normal that "make spectest" in rakudo doesn't pass all tests ?

[20:25] <lichtkind> geistteufel: in nomeni patri et fili et spiritus sancti ... :)

[20:25] <masak> geistteufel: it's worth mentioning here.

[20:26] <masak> geistteufel: which test files?

[20:26] <geistteufel> I copy the test result

[20:26] <geistteufel> in pastbin

[20:26] <masak> thank you.

[20:26] <masak> (phew) :)

[20:27] *** simcop2387 left
[20:27] <masak> lichtkind: he's an *un*holy ghost, judging by the nick... ;)

[20:28] <geistteufel> http://pastebin.com/HedmJBTy

[20:28] * masak looks

[20:28] <masak> ah, lots of "dubious" ones.

[20:28] <jnthn> geistteufel: Windows?

[20:28] <geistteufel> I working a lot in test since the last hackaton at Paris, last week. :)

[20:28] <masak> Linux?

[20:28] <geistteufel> MacOS Lion

[20:28] <masak> ah.

[20:28] <jnthn> Oh, interesting.

[20:28] *** simcop2387 joined
[20:28] <geekosaur> also notice breeding lots of kids because (1) high neonatal death rates (2) more help around the farm

[20:29] <masak> they all seem to be of that kind.

[20:29] <jnthn> Those tests are all the ones that use Test::Util.

[20:29] <masak> geekosaur: right, both of which are obsoleted by rising affluence.

[20:29] <geekosaur> bothof which tend to go away with the level of affluence (and free time) that enables buying/watching a TV

[20:29] <masak> what geekosaur said ;)

[20:29] <moritz> geekosaur: can you please run ./perl6 t/spec/S32-scalar/undef.rakudo and nopaste the output from that too?

[20:30] <masak> s/geekosaur/geistteufel/ ? :)

[20:30] *** brrt left
[20:30] <geistteufel> no

[20:30] <moritz> yes, sorry

[20:30] <geistteufel> I'm not a geekosaur :)

[20:31] <moritz> geistteufel: can you pleae do it anyway? :-)

[20:31] <masak> geistteufel++

[20:31] <geistteufel> yep

[20:31] <geistteufel> sorry :)

[20:31] <geistteufel> ok

[20:31] <geistteufel> I do it

[20:31] <masak> as soon as he's done being offended that you mis-tabbed him :)

[20:32] <geekosaur> :p

[20:32] <geekosaur> should we both be offended?

[20:32] <geistteufel> http://pastebin.com/qZm1WPjc

[20:32] <masak> geekosaur: you should be offended in equal and opposite directions :P

[20:33] <masak> geistteufel: there's your error, right there.

[20:33] <masak> question is why it runs the ICU tests when you don't have ICU installed.

[20:34] <moritz> because it's not marked as # icu

[20:34] <geistteufel> um, what's that ?

[20:34] <geistteufel> unicode

[20:34] <masak> oh!

[20:34] <geistteufel> ok, and should I install something ?

[20:34] <moritz> yes, icu (and its headers)

[20:34] <moritz> and then reconfigure and recompile everything

[20:35] <moritz> though we should really warn about missing ICU much earlier

[20:35] <geistteufel> yep

[20:35] *** birdwindupbird left
[20:36] <masak> maybe it's time to make ICU a hard requirement.

[20:36] <masak> wasn't that discussed recently on parrot ML?

[20:36] <geistteufel> I start install it. I need to rebuild perl6 from scratch ?

[20:37] <jnthn> masak: Or just implement NFG :)

[20:37] <moritz> geistteufel: you need to even rebuild parrot

[20:37] <moritz> rm -rf parrot

[20:37] <moritz> perl Configure --gen-parrot && make # should do it

[20:37] <moritz> erm

[20:37] <moritz> sorry

[20:37] <moritz> rm -rf install/

[20:37] <moritz> deleting parrot doesn't help, but doesn't hurt too much either

[20:38] <dalek> rakudo/nom: 2676549 | jnthn++ | / (2 files):

[20:38] <dalek> rakudo/nom: Start to sketch out a PseudoStash that will handle many of the pseudo-packages. Not yet wired up, let alone complete.

[20:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2676549540

[20:38] <dalek> rakudo/nom: 1c862bc | jnthn++ | src/Perl6/ (2 files):

[20:38] <dalek> rakudo/nom: Start to clean up indirect lookup handling a little. Also fix a bug in the compile time handling of indirect lookups.

[20:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1c862bc2bd

[20:38] <dalek> rakudo/nom: 68df8f5 | jnthn++ | src/ (3 files):

[20:38] <dalek> rakudo/nom: Switch indirect name lookups to use the new root PseudoStash approach. Still much missing in PseudoStash to make that work yet, mind. Also a little more elimination of duplicate logic.

[20:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/68df8f5ae6

[20:38] <dalek> rakudo/nom: 7f28736 | jnthn++ | src/Perl6/Grammar.pm:

[20:38] <dalek> rakudo/nom: Unbust a typed exception.

[20:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7f28736c09

[20:38] <dalek> rakudo/nom: 5a31737 | jnthn++ | src/core/PseudoStash.pm:

[20:38] <dalek> rakudo/nom: Get things like ::('MY::$a') and $::('OUTER::b') working.

[20:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5a31737d07

[20:38] <dalek> rakudo/nom: c59411c | jnthn++ | src/ (2 files):

[20:38] <dalek> rakudo/nom: Flesh out pseudo-package handling a bit more. Now all of the interpolated lookup tests that now take a similar code path all pass again (and we should handle a bunch more cases now).

[20:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c59411ceee

[20:38] <geistteufel> icu is a hudge program

[20:39] <geistteufel> downloading ...

[20:40] *** mdupont_ joined
[20:41] <masak> Unicode is a huge standard.

[20:41] * masak almost said "Unicode is a huge WOMAN WITH BUNNY EARS"

[20:43] <huf> and then you did

[20:44] *** vlixes left
[20:44] <TimToady> if meta-saying something is the same as saying it, we're all gonna be in deep trouble

[20:44] <huf> i know, i know, use-mention error

[20:44] <masak> I was almost going to say that.

[20:44] <TimToady> you can almost say that again

[20:45] <masak> that almost goes without saying.

[20:45] <geekosaur> didn't G√∂del have something to say about that too?

[20:45] <huf> but perhaps we're all in deep trouble.

[20:45] <TimToady> +1 to NFG anyway

[20:46] <masak> geekosaur: G√∂del showed that all you need in order to make "say"/"meta-say" collapse, is integer arithmetic.

[20:46] <TimToady> after which great hilarity ensues

[20:46] <masak> well, something like that but more formally.

[20:48] <TimToady> "you can either be stupid or look stupid--pick two"

[20:48] *** uvtc left
[20:48] <geekosaur> except they don't quite collapse.  you can encode omega but you still can't write it (that is in fact the point)

[20:55] *** alvis joined
[20:58] <masak> right.

[20:59] <masak> the system becomes powerful enough to encompass theorems with a self-reference (albeit through the encoding mechamism), and that makes it either incomplete or inconsistent.

[21:00] *** oiig_ left
[21:00] *** NamelessTee joined
[21:02] *** fgomez left
[21:08] *** fgomez joined
[21:12] <geistteufel> I have install icu4c on mac, then add export LDFLAGS='-L/usr/local/Cellar/icu4c/4.8.1.1/lib' CPPFLAGS='-I/usr/local/Cellar/icu4c/4.8.1.1/include'

[21:13] <geistteufel> but still the same issue

[21:13] <moritz> what is icu4c?

[21:13] <geistteufel> I have do "make distclean", Configure, make, make spectest

[21:13] <geistteufel> icu4c is the package for icu

[21:14] <geistteufel> icu4c 4.8.1.1

[21:14] <moritz> geistteufel: did you remove the install/ dir?

[21:14] <geistteufel> http://site.icu-project.org/

[21:14] <geistteufel> make distclean ?

[21:14] *** Araq left
[21:14] <moritz> distclean doesn't remove the install directory

[21:14] <masak> make realclean, more like.

[21:14] <masak> or the git clean -dfx thing.

[21:14] <moritz> neither

[21:15] <moritz> yes, git clean -xdf would work

[21:15] *** noam joined
[21:15] <masak> and realclean wouldn't? huh.

[21:15] <moritz> distclean = realclean + deleting Makefile

[21:15] <geistteufel> ok I do both now

[21:15] <moritz> note that the install location can be /usr/local/ too

[21:15] <geistteufel> compiling agaib :)

[21:16] <geistteufel> again

[21:16] <moritz> you don't want any make target to rm -rf /usr/local/

[21:16] <moritz> or /usr/ or / for tha matter :-)

[21:16] * moritz -> sleep

[21:16] <jnthn> 'night, moritz 

[21:16] <moritz> \o

[21:16] *** NamelessTee left
[21:17] <geistteufel> why Configure compile stuff ?

[21:20] <masak> because it's building parrot and nqp.

[21:20] <jnthn> It's not Configure that does so itself; if you give it the right flags it just triggers the building of the dependencies for you.

[21:22] <jnthn> Wow. Stopping term:sym<name> from re-parsing the name etc. seems to knock a little off the spectest time...

[21:24] <masak> oh, and I believe people here might appreciate http://www.philosophersnet.com/games/identity.php

[21:24] <cognominal> geistteufel, rakudo pulls to other github distribution, one for parrot and one for nqp, that it compiles.

[21:25] <cognominal> parrot is the vm, nqp is used to bootstrap rakudo. Some nqp libraries are used by rakudo too.

[21:25] <cognominal> s/pulls to/pulls from/

[21:26] <geistteufel> ok

[21:31] <geistteufel> well, it still doesn't work

[21:31] <geistteufel> same issue

[21:31] <geistteufel> can't solve the ICU stuff

[21:32] <dalek> rakudo/nom: b82d905 | jnthn++ | src/Perl6/ (3 files):

[21:32] <dalek> rakudo/nom: Further clean up term:sym<name>, so we don't do any of the reparsing and don't rebuild the LongName object. Since we encounter this rule a fair amount, this seems to improve compilation performance a little.

[21:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b82d9053e3

[21:33] * tadzik surived :)

[21:33] *** vlixes joined
[21:34] *** lichtkind_ joined
[21:36] *** NamelessTee joined
[21:36] *** lichtkind left
[21:36] *** lichtkind_ is now known as lichtkind

[21:39] <geistteufel> some mac user just disactivate the ICU stuff.

[21:39] <geistteufel> the make test work

[21:42] <geistteufel> I will try to find out later

[21:55] *** lestrrat left
[21:57] *** lestrrat joined
[21:59] *** bluescreen10 left
[22:01] *** spadger joined
[22:02] *** spadger left
[22:13] <fsergot> 'night! o/

[22:13] <sorear> o/

[22:13] *** fsergot left
[22:13] <tadzik> 'night

[22:14] *** fgomez left
[22:15] *** fgomez joined
[22:16] *** jaffa4 left
[22:21] <dalek> rakudo/nom: 84f4fd4 | jnthn++ | src/Perl6/ (2 files):

[22:21] <dalek> rakudo/nom: Implement ::<$x> style accesses, and make OUTER::<$x>, CALLER::<$x> and MY::<$x> work.

[22:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/84f4fd40a6

[22:21] <dalek> rakudo/nom: 9b4f785 | jnthn++ | src/core/PseudoStash.pm:

[22:21] <dalek> rakudo/nom: Fix DYNAMIC, so it now basically works.

[22:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9b4f785db5

[22:23] *** localhost left
[22:25] *** localhost joined
[22:25] <cognominal> jnthn,  what the diff between nqp::clone and pir::repr_clone?

[22:26] <jnthn> cognominal: First currently maps to the Parrot clone v-table

[22:27] <jnthn> Latter maps to a 6model primitive.

[22:27] <jnthn> Expect some unification (in favor of the latter) down the line :)

[22:27] <cognominal> thx

[22:29] <masak> 'night, #perl6

[22:29] <tadzik> 'night

[22:29] <tadzik> good knight

[22:34] *** jferrero left
[22:34] *** jferrero joined
[22:40] <lichtkind> uvtc++

[22:40] <lichtkind> he really showed that appendix aA is possible with markup

[22:41] <lichtkind> but maybe its not worth the effort since the effort to write such markup is almost harder than html which some proper defined css styles

[22:41] <lichtkind> masak: hai

[22:42] <dalek> rakudo/nom: c384ab7 | jnthn++ | src/core/PseudoStash.pm:

[22:42] <dalek> rakudo/nom: First crack at OUR.

[22:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c384ab7272

[22:55] *** uvtc joined
[22:57] <dalek> roast: 5021c60 | jnthn++ | S02-names-vars/names.t:

[22:57] <dalek> roast: Todo a slightly dubious test; unfudge a couple that we now pass.

[22:57] <dalek> roast: review: https://github.com/perl6/roast/commit/5021c60007

[22:57] <dalek> roast: 2c98b03 | jnthn++ | S0 (2 files):

[22:57] <dalek> roast: A few more OUTER:: unfudges for Rakudo.

[22:57] <dalek> roast: review: https://github.com/perl6/roast/commit/2c98b03a1e

[23:04] <dalek> roast: 4b79581 | jnthn++ | S02-names/symbolic-deref.t:

[23:04] <dalek> roast: One more unfudge.

[23:04] <dalek> roast: review: https://github.com/perl6/roast/commit/4b795818a7

[23:05] *** PacoAir left
[23:10] <jnthn> More tomorrow...night o/

[23:14] <sorear> ooops, missed jnthn

[23:25] *** pochi_ left
[23:45] *** pochi joined
[23:48] <lichtkind> it reall looks promising

[23:48] <lichtkind> already the second who want to help with docs

