[00:07] *** proller_ left
[00:12] *** proller joined
[00:19] *** snearch left
[00:28] <sorear> "prefix or term" is a major offender with 12201

[00:29] <sorear> now, "prefix or term" only needs enough syntax to tell whether it's looking at a prefix or at a term ... but it has enough LTM info to parse the *entire* term

[00:29] <sorear> in many cases

[00:32] *** shinobicl___ left
[00:53] *** Trashlord left
[00:58] *** plutoid joined
[00:58] *** leprevost left
[01:03] <colomon> sorear: Does "having changed the behavior, STD is quite completely broken.  This is not an easy fix." mean that you know that your latest patches lead to about 20 failing test files in spectest?

[01:08] <sorear> which latest patches?  I've had to revert everything I've tried so far

[01:08] * sorear screams in fury

[01:11] <sorear> I want to just abandon the project... I've lost almost all hope that it will ever be usable

[01:12] <sorear> maybe you mean my changes yesterday - which files are having trouble?

[01:14] *** leprevost joined
[01:15] * sorear is tempted to abandon STD and write a faster parser from scratch

[01:18] <sorear> this experiment in combining the parser with the lexer using a LTM engine is a complete failure

[01:18] *** scott_ joined
[01:19] *** scott_ is now known as Guest5869

[01:22] *** noam__ left
[01:22] *** noam__ joined
[01:25] *** thou joined
[01:28] *** whiteknight left
[01:28] *** whiteknight joined
[01:42] * TimToady creeps back into the room and hopes nobody notices him...

[01:42] <phenny> TimToady: 19 Feb 23:24Z <sorear> tell TimToady I would like explicit confirmation that in [ <a> || <b> ], <a> is supposed to be visible to LTM.

[01:42] <TimToady> oops

[01:42] <TimToady> busted by phenny

[01:43] <TimToady> I believe STD's current semantics depend on <a> being visible

[01:44] * TimToady thinks about ways to reduce the state space...

[01:44] <TimToady> cat we figure out what percentage of the tokens start with identifiers?

[01:46] <TimToady> it seems there's some way there that, having run the top-level lexer, you shouldn't have to build an sublexers that are a part of it

[01:46] <TimToady> the fates were a partial attempt to do that, but I'm not sure it actually prevented the sublexers from building

[01:47] <TimToady> just from running

[01:49] <TimToady> what are the possibilities that a more compact and/or lazy representation of the state space might help?

[01:49] <TimToady> how much of the lexer for "standard" STD can be precomputed

[01:51] <TimToady> would it help sorear++'s sanity if we bought em a supercomputer so ey can think about this in eir hindbrane for a while? :)

[01:52] * TimToady hopes there are paths forward from the 999th light bulb to the 1000th...

[01:53] <mikemol> I just got a slick Fermi-based video card with over 300 cores, and nothing to run on it. Would that count?

[01:53] <mikemol> Just give me a good reasoning engine I can throw at it. >.>

[01:53] <colomon> sorear: sorry for disappearing on you there.  I pulled the latest niecza before dinner and spectest it.  You've not pushed any changes since.  Give me a minute and I'll try to get a closer look at what is happening.

[01:55] <colomon> sorear: t/spec/integration/error-reporting.t .. Unhandled exception: Unable to locate module Test::Util in @path

[01:55] *** whiteknight left
[02:00] *** lestrrat left
[02:01] <colomon> sorear: looks like we're having problems loading modules?

[02:01] <colomon> at least, that's every error I've looked into so far, not just Test::Util

[02:02] *** lestrrat joined
[02:07] <colomon> or, it might be that BEGIN isn't working properly?

[02:09] *** Chillance left
[02:15] *** am0c joined
[02:21] <colomon> ade397a9fa95cf8fd3ca83b54bb110e0a2aa91d1 is the commit which introduced the problem

[02:31] <TimToady> taking someone near and dear to the airport to visit daughters... &

[03:08] *** woosley joined
[03:29] *** orafu left
[03:29] *** orafu joined
[03:34] *** Bucciarati joined
[03:36] *** thou left
[03:37] *** preflex joined
[03:40] *** thou joined
[03:41] *** thou left
[03:56] *** thou joined
[04:00] *** araujo left
[04:05] *** att_ left
[04:17] *** etneg joined
[04:17] <TimToady> Heh. "In science, if you know what you are doing, you should not be doing it. In engineering, if you do not know what you are doing, you should not be doing it. Of course, you seldom, if ever, see either pure state."  —Richard Hamming, The Art of Doing Science and Engineering

[04:20] <TimToady> especially here...

[05:04] *** mucker joined
[05:04] *** kaleem joined
[05:06] *** mucker left
[05:06] *** mucker joined
[05:07] *** birdwindupbird joined
[05:39] *** plutoid left
[05:52] <Teratogen> Meanwhile, in Finland:

[05:52] <Teratogen> http://i.imgur.com/0ORNp.jpg

[06:00] *** araujo joined
[06:00] *** araujo left
[06:00] *** araujo joined
[06:07] *** lestrrat left
[06:08] *** lestrrat joined
[06:35] *** ribayr left
[06:37] *** dbr joined
[06:59] *** JimmyZ_ joined
[07:02] *** jferrero left
[07:19] *** lestrrat left
[07:20] *** plutoid joined
[07:21] *** lestrrat joined
[07:27] *** MayDaniel joined
[07:28] *** MayDaniel left
[07:37] <dalek> niecza: 3474558 | sorear++ | / (3 files):

[07:37] <dalek> niecza: Redo @*INC handling in a slightly more sane way that is compatible with parse tree pruning

[07:37] <dalek> niecza: review: https://github.com/sorear/niecza/commit/3474558d96

[07:42] *** proller left
[07:45] *** tarch joined
[07:56] *** JimmyZ_ left
[08:07] *** noam__ left
[08:07] *** noam__ joined
[08:08] <sorear> heh, it seems that DFA caching is broken in niecza

[08:09] <sorear> maximum number of NFA nodes resident after a full collection: 351596

[08:10] <sorear> maximum number of DFA nodes resident after a full collection: 3834

[08:14] <sorear> I am now thinking intently about NFA representations using shared substructure (since most of that 351596 is just copies of the <term> protoregex lexer)

[08:15] <au> that's what Colm does, apparently

[08:15] <sorear> Colm?

[08:15] <au> (direct substructure sharing instead of tree hashing)

[08:15] <sorear> .oO( not Köln )

[08:15] <au> http://www.complang.org/colm/ http://www.complang.org/colm/thurston-phdthesis.pdf

[08:16] <au> similar to rules engine, with autobuilt state rollback on backtracking

[08:16] <sorear> It sounds like ey reinvented Prolog.

[08:16] <sorear> Universal state rollback on backtracking is a very cool feature

[08:16] <au> ey also claims it's rather fast and memory efficient, though.

[08:17] <au> (as compared to traditional nondet)

[08:17] <au> from the paper looks like a simple copy-on-write sharing to me 

[08:17] <au> (it's been a while since I looked at colm's code, not exactly sure about implementation details.)

[08:19] <sorear> this is a rather big break for me because it means that one of the most constraining optimizations was totally premature

[08:19] <sorear> also, o/ au

[08:20] <au> /o

[08:27] *** c1sung joined
[08:34] *** roland333 joined
[08:35] <roland333> Evening everyone.

[08:35] <sorear> Hello (and welcome?) roland333.

[08:35] <roland333> Beginning my perl journey and heard about this channel from the web.

[08:36] <roland333> Whats everybody's proficiency level?

[08:36] <roland333> thats a confirm on the welcome sorear.  This is my first time here, as you've gathered(I assume?).

[08:37] <sorear> Sometimes I fail to remember people. :)

[08:37] <sorear> This is the channel where a bunch of young'uns work on developing the language that will carry the flag of "Perl" for the next 20 years.

[08:38] <roland333> Ahh, could you recommend a channel for beginning users?  Maybe i'll come back to this channel in a year or so.

[08:38] <sorear> I would not say this is a bad place for *beginners*.

[08:39] <roland333> Good!

[08:39] <sorear> It's more a question of your goals - are they located in the present, or the medium future?

[08:39] <roland333> medium

[08:40] <roland333> I'm trying to find my calling and I have a friend who is a master(no hyperbole) perl programmer who convinced me to dive in.

[08:41] <roland333> i'm planning on devoting as much of my free time as possible to the art.  To cultivate an obsession if you will. 

[08:41] *** bacek joined
[08:41] <sorear> I've been part of the Perl 6 effort for about two years now

[08:41] <roland333> Let me ask you this, I have Perl 5 installed on my macbook, is it worth installing Perl 6?

[08:42] *** mj41 joined
[08:42] <roland333> If only for experience working with terminal and getting used to fucking around in the deep.

[08:42] * Teratogen is waiting patiently for perl 6.0.0

[08:42] <sorear> Perl 6 is not an upgrade to Perl 5

[08:42] <roland333> haha

[08:42] <sorear> It was supposed to be, once

[08:43] <roland333> What is the purpose then?

[08:43] <roland333> to be an addendum?

[08:43] <sorear> It will carry the flag of Perl for the next 20 years

[08:43] <roland333> Why couldn't Perl 5 carry the flag of Perl for the next 20 years?

[08:43] <Teratogen> Perl 5 is being developed ferociously

[08:44] <sorear> Because Perl 5 has major design problems and it was collectively decided in 2001 that it would be better to attempt a redesign

[08:44] <Teratogen> sorear, that is not stopping the Perl 5 development team from plopping out new versions.

[08:44] <sorear> Unfortunately, Larry and Patrick both had major life crises, which has slowed down Perl 6 a lot

[08:44] <roland333> Ahh, okay.  SO let me understand you right.

[08:45] <roland333> Perl 6 is not an upgrade, its a re-design.  from the ground up?

[08:45] <sorear> sometime around 2006 a group of people gave up waiting and forked Perl 5

[08:45] <sorear> Yes.

[08:45] <sorear> Teratogen: I don't blame #p5p for doing the most practical thing

[08:46] <sorear> so at this point we have two teams working in parallel under the name "Perl"

[08:46] <roland333> So does it make any difference if I learn to code in 5 or 6?  I'm assuming the function and syntax will be identical?

[08:46] <roland333> *functions

[08:47] <sorear> the folks in #p5p are working on the same 'ol codebase from 1987

[08:47] <cognominal___> sorear, I did not know there was a new perl 5 fork.

[08:47] <roland333> I really have the most rudimentary understanding of the most basic programming concepts as you can tell.

[08:47] <sorear> roland333: Syntax is not identical, but they're close enough that you can switch between them without much effort

[08:48] <roland333> Okay, cool.

[08:48] <roland333> HI szabgag.  Thanks for the video!

[08:48] <Teratogen> nom: say 1+1

[08:48] <p6eval> nom ac5d99: OUTPUT«2␤»

[08:48] <Teratogen> it works!

[08:49] <sorear> There's a general conception in Perl 5 circles that we're a bunch of idealists who will never amount to anything

[08:49] <sorear> They may be right

[08:49] <roland333> haha.

[08:50] <roland333> Isn't idealism one of the main tenets of Perl?

[08:50] <sorear> If you want to throw a lot of your time at an extremely friendly community, in a setting that's still wet enough for you to make a significant impression, then #perl6 is the right place for you

[08:50] <roland333> thats the idea I got from my buddy, but he may be guilty of transferrence

[08:50] <sorear> might be good to look at some of TimToady's talks.  whipitupitude, manuplexity...

[08:51] <roland333> was that @ me?

[08:51] <sorear> yes

[08:51] <roland333> Alright, i'll bookmark that.

[08:51] <sorear> you've probably heard of the Three Virtues of Programmers already

[08:51] <roland333> nope

[08:52] <roland333> my friend is unorthodox.

[08:52] <roland333> and has no discernable virtue.

[08:52] <roland333> to the orthodox eye at least.

[08:52] <roland333> thankfully neither of mine are.

[08:52] <roland333> or none I should say, considering the third eye.

[08:53] <jnthn> morning, #perl6

[08:53] <au> /o jnthn

[08:54] <sorear> the Three Virtues of Programmers, as found in the Llama Book and probably other sources, are Lazyness, Impatience, and Hubris

[08:54] <sorear> I guess idealism falls under Hubris.

[08:54] <roland333> haha

[08:54] <sorear> o/ jnthn

[08:54] <roland333> I think he did mention that actually.  Friday night. I was drunk and high and he was massively sideways.

[08:55] <roland333> Timtoady is larry wall, just to confirm?

[08:55] <sorear> Yep

[08:55] <roland333> I watched his talk on his linguistics background.

[08:56] <roland333> LOVED the joke about how english borrows from etc, etc, and japanese, "a skosh".

[08:56] <sorear> Although if you ask him, he will twist words to make you think he is denying it.

[08:56] <roland333> haha

[08:56] *** noam__ left
[08:56] <roland333> I like jokes that test your intelligence and that was one of the best examples i've heard.

[08:56] *** noam__ joined
[08:57] *** thou left
[08:57] * sorear was quite suprised to learn that "tycoon" and "typhoon" are actually from Japanese, although if they were borrowed post-Hepburn they would be spelled taifun and taikun

[08:57] <roland333> I was similarly amazed to discover the same of "skosh"

[08:58] <Teratogen> sorear, what parts of Perl 6 are you working on?

[08:58] <Teratogen> you've piqued my curiosity.

[08:58] <roland333> How rude.  I hope it was decent.

[08:59] <sorear> Teratogen: I created niecza?

[08:59] <Teratogen> cool

[08:59] <sorear> maybe I have not been advertizing this fact enough.

[08:59] <roland333> never forget hubris

[09:00] <sorear> yeah, I'm going on way too much deeply-ingrained modesty

[09:00] <roland333> Would you recommend learning perl or beginning perl as a starter book for a beginner?

[09:00] <Timbus> laughed

[09:00] <Timbus> which parts? all the parts

[09:01] <sorear> although I seem to have impatience down pat; I worked myself into a crying fit last night over repeatedly failing to make niecza any faster

[09:01] <sorear> roland333: which one has a llama on the front?  that's the only one I've read

[09:01] <roland333> thats learning.

[09:02] <au> ..."[Lazyness, Impatience, and Hubris] are virtues of passion. They are also virtues of an individual. They are not, however, virtues of community. The virtues of community sound like their opposites: diligence, patience, and humility."

[09:02] <Timbus> i keep getting this dumb urge to try putting nqp on llvm

[09:02] <roland333> thats the one my friend recommended.  They both look good so I suppose i'll read both. 

[09:02] <sorear> in Perl circles the main books are universally known as the Llama Book, the Camel Book, and the Alpaca(?) Book

[09:02] <Timbus> i just want to know how much faster it could get

[09:02] <roland333> Yeah, i'm savvy.

[09:02] <sorear> which one is "beginning"?

[09:02] <sorear> I don't think I've ever heard of "Beginning Perl"

[09:03] <roland333> I get the sense that they're both well written but beginning is the one featured for free on perl.org

[09:03] <au> sorear: it's Simon Cozens's take

[09:03] <roland333> http://learn.perl.org/books/beginning-perl/

[09:03] <roland333> au, do you have an opinion?

[09:03] <au> similar to scope to chromatic's take "Modern Perl"

[09:04] <roland333> a bit of context, i'm very new.  No pubes inexperienced.

[09:04] <sorear> roland333: I recommend you /whois everybody

[09:04] <roland333> ahh! thanks.

[09:04] <au> roland333: I'd recommend Modern Perl, if only because it has a PDF version. http://onyxneon.com/books/modern_perl/modern_perl_a4.pdf

[09:05] <sorear> "Modern Perl" is kind of sort of the name adopted by the community that rebooted Perl 5

[09:05] <au> but if you like paper version, a new edition is at http://www.amazon.com/gp/product/0977920178 

[09:05] <Timbus> here is a site made recently: http://perl-tutorial.org/

[09:05] <sorear> roland333: au and jnthn you may know of under other names

[09:06] <Timbus> it was made because googling 'perl tutorial' would get you tutes written before 2000

[09:06] *** zby_home left
[09:06] <roland333> hey...does anyone know scottie D?

[09:06] <sorear> roland333: stupid question, how much do you know about programming in general?

[09:06] <sorear> who?

[09:06] <roland333> deindorfer?

[09:07] <sorear> phenny: "deindorfer"?

[09:07] <phenny> sorear: "your dorf" (de to en, translate.google.com)

[09:07] <sorear> phenny: "dorf"?

[09:07] <roland333> haha

[09:07] <phenny> sorear: "village" (de to en, translate.google.com)

[09:07] <roland333> thats amazing

[09:08] <sorear> what about my village?

[09:08] <au> Timbus: wow, thx for the link, didn't know of that before. it also contains a link to the PDF version of the new edition. http://modernperlbooks.com/drafts/modern_perl/modern_perl_2011_2012_draft.pdf

[09:08] <roland333> The reason I mention your village is he is the friend who is getting me into programming

[09:08] <Teratogen> my only claim to fame:

[09:08] <Teratogen> http://www.users.qwest.net/~intertwingled/hooters/

[09:08] <Teratogen> picturs of me and Randal Schwartz having lunch at H@@TERS

[09:09] * sorear blinks

[09:09] <Timbus> ahaha

[09:09] <roland333> He's friends with some notorious python(I think) programmers in england.

[09:09] <Timbus> thank you internet

[09:09] <roland333> But anyhow to answer your question, I learned a little basic and pascal in high school like 10 years ago.

[09:09] <Teratogen> there is a great story about that waitress

[09:10] <moritz> Teratogen: if there's no immediate connection to Perl 6, it might not be on topic here (hint, hint)

[09:10] <Teratogen> well, it's still a pretty good story

[09:10] <Teratogen> but ok!

[09:10] <sorear> I would not have expected hooters to be mentioned here.  It seems to be quite incongruous on the gender-politics axis.

[09:11] <Teratogen> Randal loves H@@TERS

[09:11] <roland333> haha.  I need to invite my friend into this chat, he would love the way you speak sorear.  

[09:11] <colomon> sorear++: spectests are fine now.  thank you!

[09:12] <roland333> although, i think gender politics axes would be a better term.

[09:13] * sorear is 21, a little directionless in life

[09:14] <sorear> probably my biggest claim to fame is having been a founding developer of xmonad.  Irrationally, I am irked at dons for doing as much as he did to make xmonad universally known

[09:14] <roland333> i find that difficult to believe, at least for in the same sense i am directionless.

[09:14] <au> sorear: “The essential thing "in heaven and earth" is . . . that there should be long obedience in the same directionlessness; there thereby results, and has always resulted in the long run, something which has made life worth living.”

[09:15] <roland333> source?

[09:15] <au> Nietzsche, quoted by TimToday, 2nd State of the Onion ("-lessness" mine)

[09:15] <au> *TimToady

[09:16] <roland333> i think the -lessness improves the thing

[09:16] <au> :)

[09:17] <roland333> let me ask this to all europeans.  Hows the market for perl programmers where you are?

[09:17] <sorear> yeah, I'm just not thrilled with being as tied down and meansless as I am

[09:17] <sorear> I keep having to turn down invitations to Norway

[09:17] <roland333> WHY WOULD YOU DO THAT?

[09:17] <roland333> oh, you're in sweden

[09:18] <roland333> nvm mind

[09:18] <sorear> No, I'm in California

[09:18] <roland333> Im in america.

[09:18] <roland333> alright, the comment stands

[09:18] <roland333> question i mean

[09:18] <sorear> Servers don't have anything to do with geography, they're handed out randomly

[09:18] <roland333> ahh

[09:19] <roland333> thats interesting.

[09:19] * moritz accepts invitations to Norway

[09:19] <roland333> im surprised at that fact

[09:19] <sorear> You've been assigned the CO server, but your IP resolves to Windber PA

[09:19] <roland333> how'd you find out where my ip resolves to?

[09:20] <sorear> 1. /whois roland333

[09:20] <sorear> 2. 01:18 [freenode] -!- roland333 [62dba5dd@gateway/web/freenode/ip.98.219.165.221]

[09:20] <sorear> 3. http://www.ip2location.com/98.219.165.221

[09:20] <roland333> okay experimenting.....

[09:21] <sorear> It won't work on me because my local ISP sucks and I'm forwarding my connection through a colo in the East

[09:21] <sorear> (I'm in San Diego btw)

[09:21] <roland333> still.  for the experience.

[09:21] <roland333> brb

[09:21] <Teratogen> San Diego!

[09:21] <Teratogen> That's Ron Burgundy country!

[09:21] <roland333> Hooters!

[09:22] <roland333> ha

[09:22] <sorear> trouble is, I don't know thing one about travelling on my own :|

[09:22] *** woosley left
[09:22] <moritz> sorear: time to start gathering experience :-)

[09:22] <Teratogen> sorear: go shunpiking

[09:22] <roland333> +1

[09:23] <roland333> to moritzs comment

[09:23] <sorear> and I have been strongly advised that I should not make my first trip be trans-Atlantic

[09:24] <moritz> sorear: then sign up for this year's YAPC::NA, or visit colomon++ or so :-)

[09:24] <roland333> fuck that noise

[09:24] <sorear> (the last time this came up, YAPC::EU was in Latvia and it came with a side order of "Also, I don't like former Soviet republics.".  People...)

[09:24] <arnsholt> sorear: Traveling on your own isn't too hard

[09:24] <arnsholt> Can be quite relaxing in fact

[09:25] <roland333> depends on your personality.

[09:25] <sorear> I'm one of those losers who has never not lived with parents nor held a job in eir life.

[09:25] <roland333> sorear: why did i get this location back from ip2location:  UNITED STATES, DISTRICT OF COLUMBIA, WASHINGTON ?

[09:25] <Teratogen> join the Air Force

[09:25] <roland333> ugh

[09:25] <roland333> i say again fuck that noise.

[09:26] <sorear> roland333: quality of information in geoip databases varies widely

[09:26] * au recommends Bose QuietComfort 3 noise-cancellation earphone for that purpose.

[09:26] <sorear> I've never seen the country be wrong, but anything below that is uncertain

[09:26] <moritz> for me, traveling always has cycles of stress (getting to the next means of transport) and relaxation (waiting for said means of transport, or waiting for it to arrive)

[09:27] <au> (where "that purpose" means long distance traveling. (any other earphones with noise cancellation will do, really.))

[09:27] <roland333> well, i skipped step 2

[09:27] <roland333> and just cp'd your ip.

[09:28] <roland333> au, i disagree.

[09:28] <roland333> best to experience the sights and sounds fully.

[09:28] <roland333> but to each their own.

[09:28] <au> *nod*

[09:28] <sorear> roland333: what, then, did you mean by "fuck that noise"?

[09:29] <sorear> roland333: try 72.207.121.125

[09:29] <roland333> haha, an expression that basically means I disagree with everything about that idea, event, situation.

[09:29] <au> oh. the irc equivalent would be /ignore :)

[09:29] <sorear> roland333: the ip you have from freenode is the ip for a VPS provided by appflux.net

[09:29] <roland333> how would i divine that information without you telling me?

[09:30] <roland333> btw, that gave me poway as your location.

[09:30] <sorear> I guess you could make a fake court order for connection logs and send it off to AppFlux

[09:30] <roland333> riding cox's cable.

[09:30] <roland333> lol.

[09:31] <sorear> poway, close enough

[09:31] <roland333> yeah, looked close to me on gmaps.

[09:31] <sorear> I'm in a suburb in eastern SD county

[09:31] <sorear> not the city proper

[09:31] <sorear> (not Poway.  I won't tell you which one)

[09:31] <roland333> haha, i'm not worried about that.

[09:32] <Teratogen> We used to travel from Phoenix to San Diego to vacation when I was a kid, we made the obligatory pit stops at Yuma and El Centro.

[09:33] *** dakkar joined
[09:33] *** grondilu joined
[09:33] *** JimmyZ_ joined
[09:33] * grondilu couldn't compile rakudo :(

[09:33] <masak> good antenoon, #perl6

[09:33] <roland333> 'ello 'ello

[09:33] <sorear> g'day masak.

[09:34] <roland333> So did anyone have any other input about the job market for perl programmers where they are?  Especially people in Europe?

[09:34] <au> ⟉ masak

[09:34] <roland333> parabola forward slash?  What is the meaning of that

[09:34] <JimmyZ_> good afternoon, masak!

[09:34] <jnthn> o/ masak 

[09:34] <sorear> I misread that as づ

[09:34] <au> roland333: it's one-half of the full ⟈⟉ gesture. :)

[09:35] <jnthn> masak: Is the meaning of "antenoon" something like "I got up late and don't want to admit it's almost afternoon"? :)

[09:35] <roland333> still no idea of the meaning au.

[09:35] <au> roland333: ok. if you see \o/ around here, the \ / parts are arms and "o" is head.

[09:36] <sorear> I think au is trying to tell us that she has a very wide head.

[09:36] <roland333> yeap, got that.

[09:36] <au> so o/ means, roughly, waving hello (or goodbye, depending on rtl/ltr'ness).

[09:36] <roland333> so o/ is going up for a high five?

[09:36] <roland333> ahh.

[09:36] <roland333> close, gives you an insight to my mentality.

[09:36] <au> :)

[09:36] <roland333> and rtl/ltr?

[09:36] *** tarch_ joined
[09:36] <sorear> don't worry, we're all a little mental.

[09:36] <roland333> haha

[09:36] <sorear> lefttoright

[09:36] <masak> jnthn: sir, you know me too well. :)

[09:36] <roland333> ahhh.

[09:37] <roland333> My friend scott would fit right in too.

[09:37] <roland333> Completely mental.

[09:37] <sorear> roland333: masak and jnthn are in Sweden

[09:37] *** tarch left
[09:37] <masak> that's mental in itself.

[09:37] <roland333> Swedes!  Do you need perl programmers here?

[09:37] <sorear> for values of "in" that may not include "right now"

[09:37] <roland333> *there?

[09:38] <roland333> sorear you lost me.

[09:38] <roland333> meaning they're travelling?

[09:38] <masak> well, I can't speak for all of Sweden, but the more Perl programmers, the better.

[09:38] * masak is in Sweden *right now*

[09:38] <roland333> haha

[09:38] <sorear> the eurozone has no internal borders.  it's very common for people to make trips across national lines for purposes like shopping or going to work

[09:39] <roland333> Gotcha.  Knew that but couldn't make the connection clearly.

[09:39] *** jerome_ joined
[09:39] <sorear> I happen to know that masak and jnthn are currently employed in Sweden, but this gives me incomplete information about where they live or currently are

[09:39] <sorear> although I admit it's unlikely masak lives in Portugal.

[09:39] <roland333> masak, seriously though, if I turned myself into a rip-ass perl programmer do you think I could get a job in sweden/europe?

[09:40] * sorear wonders if they have a rail tunnel through the Pyrennes yet

[09:40] <roland333> two wise perlheads told me to go learn python but i'm stubborn.

[09:40] <sorear> I haven't bothered to learn Python yet.

[09:40] <roland333> If i can earn enough to feed myself and have a roof over my head doing something interesting i'm happy.

[09:40] <sorear> I can get away with this because I know more languages than I can easily count.

[09:40] <roland333> haha

[09:41] <roland333> how many fingers do you have?

[09:41] <sorear> 10

[09:41] <roland333> well shit, i'm impressed.

[09:41] <roland333> is perl your favorite?

[09:41] <sorear> semantically difficult, that is.  Should I count mc68000 assembly and x86 assembly as different languages?

[09:42] <roland333> incomplete data.

[09:42] <roland333> $sorear:

[09:42] <sorear> I don't really have a "favorite" as such.

[09:42] <sorear> I've been using Perl, C#, and C a lot lately.

[09:42] <roland333> Wait, didn't you say you've never had a job?

[09:42] <moritz> somehow that reminds of bacek++, who says that English is his fourth language, after Russion, rude Russian and very rude Russian :-)

[09:42] <sorear> Yes.

[09:42] <roland333> lol

[09:43] <roland333> why aren't you making money with you skill?

[09:43] <sorear> Once you've mastered the fundamentals of programming, picking up additional languages is no big deal.

[09:44] <sorear> J took me four days, and that's about as exotic a language as you can get without getting into deliberately-obfuscated territory.

[09:45] <sorear> Learning at least one assembly language helps a lot and I recommend it to anyone.

[09:46] <jnthn> sorear: Note, Sweden ain't in the eurozone. It is in the EU though. (Eurozone is that slightly hosed single currency thing.)

[09:46] <jnthn> And yes, I can freely live/work in any EU country. :)

[09:46] <sorear> ah, right

[09:47] <sorear> I'm thinking of the Maastrict treaty maybe?  this is what I get for trying to talk about a place I don't live in at 2am

[09:47] <roland333> Dutch dutch dutch.  

[09:48] <roland333> So, sorear.  Why no make the money?  

[09:48] <arnsholt> sorear: Schengen (modulo spelling), probably

[09:48] <masak> roland333: I think you could get a job in Sweden. I also think you should learn Perl really well. start now.

[09:49] <roland333> Masak.  THank you sir.  I take your meaning and had the same thought.  I will be back later.

[09:49] <arnsholt> Schengen is the one that establishes passport-free travel and such

[09:49] <masak> roland333: but the two may or may not have any causal relation. I wouldn't say there are extremely many Perl jobs here, compared to, say .NET jobs.

[09:49] <masak> there aren't 0 Perl jobs either. but you have to look around a bit.

[09:49] <sorear> arnsholt: yes, looked it up and that's definitely what I mean

[09:49] <jnthn> There's more .Net jobs than decent .net developers here :)

[09:49] <roland333> Masak, i'm gonna go study perl for awhile.  

[09:50] <jnthn> Though I can't say the jobs are always decent. ;)

[09:50] <roland333> I'll be back tomorrow hopefully.  

[09:50] <sorear> I wonder if I count as a decent .net developer.

[09:50] <grondilu> compiling rakudo:  Unrecognized nqp:: opcode 'nqp::div_In' at line 6640, near ");\n    }\n "

[09:50] <sorear> My use of the placeform is certainly unorthodox.

[09:50] <roland333> Night all, Thanks for being so interesting and personable.  See ya!

[09:50] <sorear> bye roland333.

[09:50] <roland333> "goodbye, world"

[09:50] <sorear> I, too, require the zees.

[09:51] <sorear> dmr :(

[09:51] <roland333> *"goodbye, world/n";

[09:51] <roland333> :)

[09:51] *** roland333 left
[09:51] * sorear out

[09:51] <jnthn> 'night, sorear 

[09:52] <Teratogen> sleep? just take more caffeine!

[09:52] <moritz> grondilu: that means your NQP is too old

[09:52] <grondilu> so what should I do?

[09:52] <grondilu> --gen-nqp?

[09:53] <au> --gen-parrot ?

[09:53] * grondilu tries perl Configure.pl --gen-parrot --gen-nqp

[09:55] <jnthn> That should do it

[09:55] * grondilu had totally forgotten that this should be done from times to times

[09:56] <arnsholt> If you skim the list of changed files when you pull, and NQP_REVISION is updated, you have to redo NQP

[09:56] <moritz> erm

[09:56] <arnsholt> Or perhaps not?

[09:56] <moritz> doesn't the build even complain if NQP is too old?

[09:57] <moritz> but yes, when NQP_REVISION changes, you have to rebuild nqp

[09:57] *** _dbr joined
[09:57] <arnsholt> Configure complains, IIRC

[09:57] <grondilu> I had no compaint whatsoever :/

[09:57] <moritz> ah, I think it only complains if Makefile is out of date

[09:57] <arnsholt> But if you just git pull && make it'll chug along I think

[09:57] <grondilu> I did git pull && make and no complain :/

[09:59] *** dbr left
[10:00] <moritz> grondilu: are you building in parallel (ie MAKE_OPTIONS contains a -j flag or so)?

[10:00] *** kaleem_ joined
[10:02] <moritz> thing is, when I locally change my NQP_REVISION, I get

[10:02] *** kaleem left
[10:02] <moritz> $ make

[10:02] <moritz> NQP 2012.01-10-g7f521e3 is too old (2012.01-165-g790fc9a required), run something like

[10:02] <moritz> ...

[10:02] <grondilu> moritz: I doubt so, but I would have to check the makefile to make sure

[10:03] *** plutoid left
[10:03] <moritz> grondilu: don't check the makefile, it's either in your environment, or not at all

[10:04] *** PerlPilot joined
[10:04] *** dakkar left
[10:04] *** orafu left
[10:04] *** pothos left
[10:04] *** PerlJam left
[10:04] <grondilu> then no.

[10:04] *** dakkar joined
[10:04] *** yves joined
[10:05] *** jfried joined
[10:06] *** pothos joined
[10:06] <moritz> then I don't understand what's wrong :(

[10:07] <moritz> but I've seen lots of build fail due to this particular NQP revision bump, much more than with any other single one before

[10:07] <grondilu> I'm still waiting for the second attempt to end anyway.  Maybe it'll work fine with the new NQP

[10:07] <moritz> hm, curious, the new NQP revision is 10 commits after the last NQP tag

[10:08] <moritz> if some function compares it lexicographically instead of as a number, that might explain it...

[10:08] <masak> sounds like a decent guess.

[10:09] *** orafu joined
[10:09] <grondilu>  AHHH it still failed :(

[10:10] <moritz> but cmp_rev uses <=>, not cmp

[10:12] <grondilu> full error log:  http://s0.barwen.ch/~grondilu/err-rakudo

[10:13] <moritz> grondilu: what does   ./install/bin/nqp -v  report as nqp version?

[10:14] <grondilu> This is nqp version 2012.01-10-g2246b9d built on parrot 4.0.0 revision RELEASE_4_0_0-85-g8a1265a

[10:14] <grondilu> hum not as new as expected, right?

[10:15] <moritz> oh wtf

[10:16] <moritz> git log 2012.01-10-g2246b9d   reports as first commit  2246b9dd83c89d06e9fee678b226562fec08eaa0   Fix preclim handling in operator precedence parser

[10:16] <moritz> but

[10:17] <moritz> $ git describe origin/master 

[10:17] <moritz> 2012.01-10-g7f521e3

[10:17] <grondilu> actualy when I do perl Configure --gen-parrot --gen-nqp I get only a short message.   It doesn't seem to be compiling anything.

[10:17] <moritz> note that it's a different short sha1

[10:17] *** fsergot left
[10:17] <grondilu> git describe origin/master => ZA-1975-gb2cd763

[10:18] <moritz> grondilu: in nqp, not in rakudo

[10:18] <moritz> so, there are two different commits that describe themselves as 2012.01-10-something

[10:18] <grondilu> 2012.01-10-g2246b9d

[10:18] <moritz> even though they appear in the same branch

[10:19] <grondilu> I did a 'git pull' inside nqp and I got a weird message about branches

[10:19] <moritz> yes, because you're not a branch yet

[10:20] * grondilu is confused

[10:20] <moritz> git checkout master

[10:20] <moritz> git pull

[10:20] <moritz> should help

[10:21] <moritz> oh, I guess I know what's happening

[10:22] <moritz> jnthn++ cherry-picked a commit from master to another branch, where it then got a higher commit count since the last tag

[10:22] <grondilu> ./install/bin/nqp -v still tells me 2012.01-10-g2246b9d

[10:23] <dalek> nqp: bcde9c4 | moritz++ | README:

[10:23] <dalek> nqp: bump copyright year in README

[10:23] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bcde9c4138

[10:23] <grondilu> any other idea?

[10:23] <moritz> grondilu: just a sec

[10:24] <dalek> rakudo/nom: c1243d6 | moritz++ | tools/build/NQP_REVISION:

[10:24] <dalek> rakudo/nom: bump NQP revision, in the hope that this fixes the build

[10:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c1243d6ae8

[10:24] <moritz> grondilu: try to git pull rakudo, and then try again to perl Configure.pl --gen-nqp

[10:25] <grondilu> ok now it seems that nqp is actually getting compiled :)

[10:26] <grondilu> so I guess that should help

[10:26] <grondilu> thanks

[10:30] <grondilu> unfortunately I'm running out of battery power so I won't be able to tell you today if it finally worked out.

[10:31] <moritz> no hurry; though I do think it'll work out fine

[10:31] <moritz> and for the release we make a new nqp tag, so that won't go wrong

[10:35] * grondilu is trying to compile rakudo now despite his low battery status

[10:38] *** Trashlord joined
[10:38] *** daxim joined
[10:40] *** kaleem_ left
[10:40] *** kaleem joined
[10:42] *** pernatiy left
[10:42] <jnthn> Guess next release is only a few days away. :)

[10:43] <moritz> yes. We should really find a release manager

[10:43] <jnthn> Yes.

[10:43] <moritz> I've done the last two releases, and while I might be able to chime in, I'd rather not be *the* release manager :-)

[10:44] <jnthn> Aye

[10:44] <jnthn> Would be good to spread the load here

[10:45] * jnthn is happy to do the Star one this month

[10:45] <jnthn> Would be good to spred that one too of course

[10:50] <tadzik> I can probably make a release

[10:51] <Teratogen> please release Perl 6.0.0

[10:51] <tadzik> We could name it 6.0.0 if you wish, but I don't think that'd help anything

[10:52] <Teratogen> ok =(

[10:56] *** fsergot joined
[10:58] <fsergot> o/

[10:58] *** lateau__ joined
[10:59] <tadzik> \o

[10:59] <jnthn> hi, fsergot 

[10:59] <grondilu> ok, compilation succeeded.  Thanks.

[11:00] <grondilu> gotta go now

[11:00] <moritz> \o

[11:00] *** grondilu left
[11:13] *** Guest5869 left
[11:18] *** mucker left
[11:20] *** _dbr left
[11:25] <lateau__> perl6: -+-+1

[11:25] <p6eval> pugs b927740, rakudo c1243d, niecza v14-51-g3474558:  ( no output )

[11:25] *** retupmoca left
[11:26] *** soimort joined
[11:28] *** soimort left
[11:28] <lateau__> perl6: ++1

[11:29] <p6eval> rakudo c1243d: OUTPUT«Cannot assign to a non-container␤  in sub prefix:<++> at src/gen/CORE.setting:2553␤  in block <anon> at /tmp/oHSrEWM60_:1␤␤»

[11:29] <p6eval> ..pugs b927740: OUTPUT«*** Can't modify constant item: VInt 1␤    at /tmp/PPld51YZjX line 1, column 1 - line 2, column 1␤»

[11:29] <p6eval> ..niecza v14-51-g3474558: OUTPUT«Unhandled exception: Writing to readonly scalar␤  at /tmp/AmZRBCCdT3 line 0 (mainline @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3783 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3784 (module-CORE @ 65) ␤  at /home/p6eval/niecza/lib…

[11:29] <lateau__> perl6: say -(-(1));

[11:29] <p6eval> pugs b927740, rakudo c1243d, niecza v14-51-g3474558: OUTPUT«1␤»

[11:30] *** soimort joined
[11:30] *** soimort left
[11:31] <moritz> note that the longest prefix is supposed to win, which is why ++$i parses as prefix:<++>($i) and not as +(+($i))

[11:32] <moritz> LTM++

[11:32] <fsergot> perl6: say - -1;

[11:32] <p6eval> pugs b927740, rakudo c1243d, niecza v14-51-g3474558: OUTPUT«1␤»

[11:33] *** lestrrat left
[11:33] <fsergot> :)

[11:33] <flussence> perl6: say +\+1

[11:33] <p6eval> pugs b927740, rakudo c1243d: OUTPUT«1␤»

[11:33] <p6eval> ..niecza v14-51-g3474558: OUTPUT«Unhandled exception: Cannot use value like Capture as a number␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.setting line 255 (Any.Numeric @ 5) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/98HEC5vlG4 line 1 (mainline @ 2…

[11:33] <flussence> perl6: say +\ +1

[11:33] <p6eval> pugs b927740, niecza v14-51-g3474558: OUTPUT«1␤»

[11:33] <p6eval> ..rakudo c1243d: OUTPUT«===SORRY!===␤You can't backslash that at line 1, near " +1"␤»

[11:33] <flussence> yes I can :(

[11:34] *** lestrrat joined
[11:34] <lateau__> :)

[11:34] <fsergot> hmm

[11:35] <moritz> .oO( but I won't parse you if you do )

[11:35] <fsergot> nom: - \-0

[11:35] <p6eval> nom c1243d:  ( no output )

[11:35] <fsergot> nom: say - \-0

[11:35] <p6eval> nom c1243d: OUTPUT«-1␤»

[11:35] <fsergot> -1 :)

[11:35] <fsergot> ?

[11:35] <moritz> WAT?

[11:35] <moritz> nom: say \-0

[11:35] <p6eval> nom c1243d: OUTPUT«0␤»

[11:36] <moritz> perl6: say - \-0

[11:36] <p6eval> niecza v14-51-g3474558: OUTPUT«Unhandled exception: Cannot use value like Capture as a number␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.setting line 255 (Any.Numeric @ 5) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/ld6qURXNU7 line 1 (mainline @ 2…

[11:36] <p6eval> ..rakudo c1243d: OUTPUT«-1␤»

[11:36] <p6eval> ..pugs b927740: OUTPUT«0␤»

[11:36] <fsergot> rakudo's bug?

[11:36] <moritz> nom: say (\-0).WHAT

[11:36] <p6eval> nom c1243d: OUTPUT«Capture()␤»

[11:36] <moritz> fsergot: no, might be legit

[11:36] <moritz> fsergot: prefix \ creates a capture, with value 0

[11:36] <moritz> and prefix:<-> then numifies it

[11:37] <moritz> which evaluates the the number of elements

[11:37] <moritz> which is 1

[11:37] <moritz> and then that 1 is negated

[11:37] <fsergot> What is legit?

[11:37] <masak> "legitimate"

[11:37] <masak> means about the same as "allowed", "correct".

[11:37] <moritz> legit, I, mate!

[11:38] <fsergot> masak++ thanks.

[11:38] <masak> the word stems from Latin lēgitimāre, "to make lawful"

[11:38] <fsergot> nom: -say  \- -4

[11:38] <p6eval> nom c1243d: OUTPUT«4␤»

[11:38] <fsergot> nom: say - \- -4

[11:38] <p6eval> nom c1243d: OUTPUT«-1␤»

[11:40] <fsergot> It will be always -1? :)

[11:40] *** retupmoca joined
[11:41] <fsergot> nom: say (\-100).WHAT;

[11:41] <p6eval> nom c1243d: OUTPUT«Capture()␤»

[11:45] *** domidumont joined
[11:55] <fsergot> perl6: say- 1;

[11:56] <p6eval> niecza v14-51-g3474558: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unsupported use of bare 'say'; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument at /tmp/AEdyEzBzZx line 1:␤------> [32msay[33m⏏[31m- 1;[0m␤␤Unhandled exception: Check failed␤␤  at /home/…

[11:56] <p6eval> ..pugs b927740, rakudo c1243d: OUTPUT«␤»

[11:56] <fsergot> nom: say+ 1;

[11:56] <p6eval> nom c1243d: OUTPUT«␤»

[11:58] <fsergot> It should return an error, shouldn't it? :)

[12:04] *** dbr joined
[12:04] <JimmyZ_> fsergot: I don't think so

[12:05] <fsergot> JimmyZ_: why? :)

[12:05] <JimmyZ_> nom: say (say+ 1); say (say- 1);

[12:05] <p6eval> nom c1243d: OUTPUT«␤2␤␤0␤»

[12:06] <JimmyZ_> nom: say (say);  say +(say); 

[12:06] <p6eval> nom c1243d: OUTPUT«␤True␤␤1␤»

[12:07] <fsergot> Oh, right.

[12:07] <fsergot> I didn't think about it.

[12:07] <fsergot> JimmyZ_++

[12:08] <moritz> nom: say (\-1).perl

[12:08] <p6eval> nom c1243d: OUTPUT«Capture.new()␤»

[12:13] * moritz tries to come up with a better Capture.perl

[12:13] <fsergot> nom: say ().perl

[12:13] <p6eval> nom c1243d: OUTPUT«()␤»

[12:14] *** dbr left
[12:15] *** Trashlord left
[12:26] *** dbr joined
[12:26] *** dbr left
[12:28] *** pernatiy joined
[12:36] *** sisar joined
[12:46] <moritz> nom: say Capture.new(:list<a b c>)

[12:46] <p6eval> nom c1243d: OUTPUT«get_iter() not implemented in class 'Parcel'␤  in method gist at src/gen/CORE.setting:3972␤  in sub say at src/gen/CORE.setting:6065␤  in block <anon> at /tmp/Cke7sM8_Do:1␤␤»

[12:49] <jnthn> That's probably a bug in Capture.new

[12:49] <moritz> yes

[12:49] <jnthn> Or a NYI Capture.new

[12:49] <moritz> well, Capture as a submethod BUILD

[12:50] <moritz> but it doesn't account for the fact that :list will be a perl 6 list, while it internally uses an RPA

[12:50] <jnthn> ah

[12:50] <jnthn> yeah, it'll need to figger that out

[12:50] * moritz tries

[12:51] * jnthn swears lots at $dayjob

[12:51] <moritz> jnthn: is there an easy way to fail a match that has already succeeded (for :exhaustive)

[12:52] <jnthn> This thingy compiles sufficiently slowly that it makes Rakduo's CORE.setting compilation feel nippy...

[12:52] <moritz> woah

[12:52] <jnthn> moritz: Not sure sure what you mean by "already suceeded"

[12:53] <moritz> consider m:exhaustive/.+/

[12:53] <moritz> I thought the appraoch would be to have simply match once

[12:53] <moritz> collect the Match object

[12:53] <moritz> and then force the engine to backtrack

[12:54] <moritz> ah, "force to backtrack" is probably what I meant by "fail"

[12:54] <jnthn> $match.CURSOR.'!cursor_next'() should do that, iirc

[12:54] <moritz> oh

[12:54] <moritz> I'll try that

[12:55] <jnthn> nom: my $m = 'abc' ~~ /.+/; say $m; my $m2 = $m.CURSOR.'!cursor_next'().MATCH; say $m2

[12:55] <p6eval> nom c1243d: OUTPUT«=> <abc>␤␤=> <ab>␤␤»

[12:55] <moritz> \o/

[12:55] <moritz> then I'll try to hack in :exhaustive

[12:56] <jnthn> moritz: How hard is <~~> ooc?

[12:56] <jnthn> moritz: You may find <( and )> quite accessible too

[12:58] *** tokuhirom joined
[12:59] <moritz> yes, I thought about <( and )> too

[13:00] *** jferrero joined
[13:01] <moritz> iirc <~~> requires the step from Match object to the part of the regex that produced it

[13:02] *** xinming left
[13:05] <dalek> rakudo/nom: 92aeec2 | moritz++ | docs/ROADMAP:

[13:05] <dalek> rakudo/nom: add :exhaustive to ROADMAP

[13:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/92aeec2c96

[13:05] <dalek> rakudo/nom: 4130f6f | moritz++ | src/core/Capture.pm:

[13:05] <dalek> rakudo/nom: Capture.perl and fix Capture.BUILD

[13:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4130f6fe9f

[13:05] *** shinobicl_ joined
[13:08] *** xinming joined
[13:13] *** bbkr joined
[13:19] *** skids left
[13:22] <moritz> https://gist.github.com/1869161 # exhaustive regex matching, as prototyped outside the setting

[13:23] <moritz> nom: https://gist.github.com/1869161

[13:23] <p6eval> nom c1243d: OUTPUT«abracadabbra␤abracada␤abraca␤abra␤   acadabbra␤   acada␤   aca␤     adabbra␤     ada␤       abbra␤»

[13:23] <masak> nice!

[13:25] <moritz> that's another example why I just love Perl 6 :-)

[13:32] <jnthn> moritz++

[13:32] <moritz> I just fear that integrating it with Str.match is going to be pain

[13:34] <moritz> because there are so many cases to consider when various adverbs interact

[13:37] <moritz> I think the best possible approach to implementing Str.match properly is 3-layered

[13:37] <moritz> lowest level abstracts away matching of regexes vs. matching of strings

[13:37] <moritz> one level above handles :g, :ov, :ex

[13:38] <moritz> and the highest level then handles :x, :nth and all that fun

[13:47] *** tarch__ joined
[13:50] <dalek> specs: 96bd7e5 | moritz++ | S09-data.pod:

[13:50] <dalek> specs: [S09] standard hashes coerce the keys to Str

[13:50] <dalek> specs: 

[13:50] <dalek> specs: They don't type check against Str

[13:50] <dalek> specs: review: https://github.com/perl6/specs/commit/96bd7e5cbe

[13:50] <dalek> specs: 208eabf | moritz++ | S05-regex.pod:

[13:50] <dalek> specs: [S05] be a bit more precise in :nth wording

[13:50] <dalek> specs: review: https://github.com/perl6/specs/commit/208eabfaee

[13:51] *** tarch_ left
[13:57] *** sftp left
[14:00] <masak> both those spec commits look like feedback into the spec from implementing bits of it :)

[14:01] <moritz> yes-ish

[14:02] <moritz> (partially just pondering how to implement it)

[14:05] <masak> ah.

[14:05] *** sftp joined
[14:09] *** tokuhirom left
[14:09] <masak> niecza: my $s = 'foo'; substr($s, 2, 1) = '!'; say $s

[14:09] <p6eval> niecza v14-51-g3474558: OUTPUT«fo!␤»

[14:09] <masak> \o/

[14:09] <masak> nom: my $s = 'foo'; substr($s, 2, 1) = '!'; say $s

[14:09] <p6eval> nom 4130f6: OUTPUT«Cannot assign to a non-container␤  in block <anon> at /tmp/YSOMy8l_ep:1␤␤»

[14:10] <masak> I'm a bit surprised that people are not asking more often for this feature.

[14:10] <masak> it's totally horrible, and a special case, and ugly, but it's very convenient when you need it.

[14:10] <moritz> it's easy enough to do with four-arg substr, no?

[14:10] <masak> nom: my $s = 'foo'; substr($s, 2, 1, '!'); say $s

[14:10] <p6eval> nom 4130f6: OUTPUT«Too many positional parameters passed; got 4 but expected between 2 and 3␤  in sub substr at src/gen/CORE.setting:1896␤  in block <anon> at /tmp/BHbvQsKsPJ:1␤␤»

[14:10] <moritz> hm

[14:10] * masak grins

[14:10] <moritz> maybe not :-)

[14:10] <jnthn> It's most horrible because you don't know when you're going to need it, so have to always pessimize.

[14:11] <jnthn> I guess we can multi-dispatch on rw-ness or something...maybe.

[14:11] <moritz> but shouldn't be too hard to implement in the four-arg way

[14:11] *** xinming left
[14:11] *** xinming joined
[14:14] *** kranius left
[14:15] <masak> jnthn: would it help to make it syntactical? so we only allow the 'substr($s, 2, 1) =' form, but not passing it around as a portable lvalue?

[14:15] <masak> if that helps, I still think that covers 99% of all the needs.

[14:16] * moritz is pretty sure it would help

[14:16] <felher> moritz: about your ex-gist: whats that '!cursor_next'()?

[14:16] <moritz> we could dispatch it to a separate lvalue-substr routine

[14:16] <moritz> felher: it's part of the low level API of the regex engine

[14:16] <moritz> felher: a way to force it backtrace

[14:16] <felher> moritz: ah, okay, thanks :)

[14:17] <moritz> syntactically it's a method call with a non-identifer

[14:17] <moritz> nom: my $to-call = <sin, sqrt>.pick; say 4."$to-call"()

[14:17] <p6eval> nom 4130f6: OUTPUT«Method 'sin,' not found for invocant of class 'Int'␤  in block <anon> at /tmp/eElo6BP7fx:1␤␤»

[14:17] <moritz> nom: my $to-call = <sin sqrt>.pick; say 4."$to-call"()

[14:17] <p6eval> nom 4130f6: OUTPUT«2␤»

[14:17] <moritz> nom: my $to-call = <sin sqrt>.pick; say 4."$to-call"()

[14:17] <p6eval> nom 4130f6: OUTPUT«2␤»

[14:17] <moritz> nom: my $to-call = <sin sqrt>.pick; say 4."$to-call"()

[14:17] <p6eval> nom 4130f6: OUTPUT«2␤»

[14:17] <moritz> nom: my $to-call = <sin sqrt>.pick; say 4."$to-call"()

[14:17] <p6eval> nom 4130f6: OUTPUT«-0.756802495307928␤»

[14:18] <jnthn> Took a while to be random... :)

[14:19] <felher> moritz: does the '!' has anything to do with 'private'. Or is the whole '!cursor_next' just a name?

[14:19] <flussence> I can sort of picture in my head how substr can work... return an lvalue sub that also does .Str

[14:20] <flussence> I've no idea how hard actually doing that is, mind you

[14:20] <flussence> (that also has the advantage of making it lazy :)

[14:21] <moritz> felher: the whole thing is just a name, but the ! indicates private-by-convention

[14:22] *** JimmyZ_ is now known as JimmyZ

[14:26] *** plutoid joined
[14:27] *** plutoid left
[14:27] <felher> moritz: how would i declare such a method? Do i need to go meta for that?

[14:28] <masak> nom: class A {}; A.^add_method('!foo', sub { say "OH HAI" }); A.'!foo'()

[14:28] <p6eval> nom 4130f6: OUTPUT«Too many positional parameters passed; got 1 but expected 0␤  in sub <anon> at /tmp/RlwV0JFN62:1␤  in block <anon> at /tmp/RlwV0JFN62:1␤␤»

[14:29] <masak> nom: class A {}; A.^add_method('!foo', sub -> $self { say "OH HAI" }); A.'!foo'()

[14:29] <p6eval> nom 4130f6: OUTPUT«===SORRY!===␤Malformed block at line 1, near "-> $self {"␤»

[14:29] <masak> nom: class A {}; A.^add_method('!foo', sub ($self) { say "OH HAI" }); A.'!foo'()

[14:29] <p6eval> nom 4130f6: OUTPUT«OH HAI␤»

[14:29] <moritz> felher: yes, go meta, or do it in NQP :-)

[14:29] <felher> Okay, meta it isl

[14:29] <felher> moritz++, masak++: Thanks folks :)

[14:30] <masak> phenny: sv en "gå och meta"?

[14:30] <phenny> masak: "go meta" (sv to en, translate.google.com)

[14:30] <masak> really means "go fishing".

[14:30] <felher> :D

[14:32] *** skids joined
[14:35] <fsergot> will be later. o/

[14:35] *** fsergot left
[14:35] <JimmyZ> looks like 'method !foo() { ... } ' works in nqp, but not in rakudo

[14:36] <moritz> huh?

[14:36] <jnthn> JimmyZ: It works *properly* in Rakudo.

[14:36] <jnthn> JimmyZ: NQP has a cheating version.

[14:37] <moritz> nom: class A { method !foo() { say 'in !foo' }; method x { self!foo } }; A.new.x

[14:37] <p6eval> nom 4130f6: OUTPUT«in !foo␤»

[14:37] <moritz> seems to work just fine

[14:38] <JimmyZ> sorry, misunderstand 

[14:38] *** att_ joined
[14:40] *** shinobicl_ left
[14:45] <moritz> std: sub f(:x(:$y)) { }

[14:45] <p6eval> std 52f3895: OUTPUT«ok 00:01 109m␤»

[14:45] <moritz> std: sub f(:$x(:$y)) { }

[14:45] <p6eval> std 52f3895: OUTPUT«ok 00:01 109m␤»

[14:45] <moritz> should that really parse?

[14:45] <moritz> perl6: sub f(:$x(:$y)) { }

[14:45] *** PacoAir joined
[14:45] <p6eval> pugs b927740: OUTPUT«*** ␤    Unexpected "(:$"␤    expecting word character, "?", "!", trait, "=", default value, "-->" or ")"␤    at /tmp/7zrpYE03OB line 1, column 10␤»

[14:45] <p6eval> ..niecza v14-51-g3474558: OUTPUT«Potential difficulties:␤  $x is declared but not used at /tmp/FVOhpT8Ra4 line 1:␤------> [32msub f(:[33m⏏[31m$x(:$y)) { }[0m␤  $y is declared but not used at /tmp/FVOhpT8Ra4 line 1:␤------> [32msub f(:$x(:[33m⏏[31m$y)) { }[0m␤  &f is declared but n…

[14:45] <p6eval> ..rakudo 4130f6:  ( no output )

[14:45] <masak> no idea.

[14:45] <moritz> or is that parsed as a subsignature?

[14:46] <masak> maybe.

[14:46] *** lestrrat left
[14:46] *** lestrrat joined
[14:47] *** lestrrat left
[14:47] <moritz>    

[14:48] *** lestrrat joined
[14:50] *** tarch__ left
[14:51] *** kaleem left
[14:58] * moritz just had an awesome idea

[14:59] <moritz> you know, recompiling the setting always takes ages on my machine

[14:59] <moritz> so I prototype stuff outside the setting

[14:59] <moritz> but then I have trouble running tests

[14:59] <moritz> so, the solution is to put the prototype stuff in SAFE.setting

[14:59] <moritz> and hack the harness to run ./perl6 --setting=SAFE

[15:00] <moritz> now i can use 'make spectest' and 'make localtest' AND have faster compilation cycles

[15:00] <jnthn> :)

[15:01] *** ascrazy joined
[15:06] *** birdwindupbird left
[15:06] <moritz> nom: my @a := 1..*; @a := @a[1, 3 ... *].list

[15:06] <p6eval> nom 4130f6: OUTPUT«Method 'gimme' not found for invocant of class 'Range'␤  in method postcircumfix:<[ ]> at src/gen/CORE.setting:1159␤  in block <anon> at /tmp/dJ08aEvIzI:1␤␤»

[15:06] <moritz> nom: my @a = 1..*; @a := @a[1, 3 ... *].list

[15:06] <p6eval> nom 4130f6: OUTPUT«(timeout)»

[15:07] <moritz> nom: say Range ~~ Positional

[15:07] <p6eval> nom 4130f6: OUTPUT«True␤»

[15:07] <moritz> well, then the binding should work

[15:07] <moritz> nom: my @a := 1..3

[15:07] <p6eval> nom 4130f6:  ( no output )

[15:07] <moritz> nom: my @a = 1...*; @a := @a[1, 3 ... *].list

[15:08] <moritz> nom: my @a := 1...*; @a := @a[1, 3 ... *].list

[15:08] <p6eval> nom 4130f6: OUTPUT«(timeout)»

[15:08] <moritz> nom: my @a := 1...*; @a := @a[1, 3 ... *]

[15:08] <p6eval> nom 4130f6: OUTPUT«(timeout)»

[15:08] <moritz> nom: my @a := 1...*; @a := @a[1, 3 ... 11].list; say @a.perl

[15:08] <p6eval> nom 4130f6: OUTPUT«(2, 4, 6, 8, 10, 12).list␤»

[15:09] * jnthn wonders if indexing is lazy.

[15:09] <moritz> nom: say (1..3)[1, 3 ... 11].perl

[15:09] <p6eval> nom 4130f6: OUTPUT«(2,)␤»

[15:09] <jnthn> oh, but maybe the * there should be treated differently

[15:10] * moritz submits rakudobug for the gimme not found error earlier

[15:10] <masak> moritz++

[15:11] <jnthn> nom: say (1..3)[1]

[15:11] <p6eval> nom 4130f6: OUTPUT«2␤»

[15:11] <moritz> yes, that's the weird thing. It works, unless bound to a @-variable first

[15:11] <jnthn> nom: my @a := 1..3; say @a[1]

[15:11] <p6eval> nom 4130f6: OUTPUT«2␤»

[15:12] <jnthn> Not that simple :)

[15:12] <moritz> nom: my @a := 1..3; say @a[1, 2]

[15:12] <p6eval> nom 4130f6: OUTPUT«2 3␤»

[15:12] *** lestrrat left
[15:13] <jnthn> nom: my @a := 1..*; say @a[1]

[15:13] <p6eval> nom 4130f6: OUTPUT«2␤»

[15:13] <jnthn> nom: my @a := 1..*; say @a[1...*]

[15:13] <p6eval> nom 4130f6: OUTPUT«Method 'gimme' not found for invocant of class 'Range'␤  in method postcircumfix:<[ ]> at src/gen/CORE.setting:1159␤  in block <anon> at /tmp/6GKqkBGBmp:1␤␤»

[15:13] <jnthn> nom: say (1..3)[1...*]

[15:13] <p6eval> nom 4130f6: OUTPUT«Method 'gimme' not found for invocant of class 'Range'␤  in method postcircumfix:<[ ]> at src/gen/CORE.setting:1159␤  in block <anon> at /tmp/dnb73Jt93d:1␤␤»

[15:13] <jnthn> Doesn't need binding after all.

[15:13] <jnthn> nom: say (1, 2, 3)[1...*]

[15:13] <p6eval> nom 4130f6: OUTPUT«2 3␤»

[15:13] *** lestrrat joined
[15:14] <jnthn> nom: say (1..3)[1..*]

[15:14] <p6eval> nom 4130f6: OUTPUT«Method 'gimme' not found for invocant of class 'Range'␤  in method postcircumfix:<[ ]> at src/gen/CORE.setting:1159␤  in block <anon> at /tmp/biKNhuOQid:1␤␤»

[15:14] <jnthn> nom: say (1..3)[1]

[15:14] <p6eval> nom 4130f6: OUTPUT«2␤»

[15:14] <jnthn> nom: say (1..3)[1,2]

[15:14] <p6eval> nom 4130f6: OUTPUT«2 3␤»

[15:14] <jnthn> nom: say (1..3)[*]

[15:14] <p6eval> nom 4130f6: OUTPUT«1 2 3␤»

[15:14] <jnthn> nom: say (1..3)[]

[15:14] <p6eval> nom 4130f6: OUTPUT«1 2 3␤»

[15:14] <jnthn> Hm.

[15:15] <moritz> ah

[15:15] <moritz> needs infinite in the index

[15:25] *** leprevost left
[15:25] <masak> nom: say (1..3)[Inf]

[15:25] <p6eval> nom 4130f6: OUTPUT«No applicable candidates found to dispatch to for 'Numeric'. Available candidates are:␤:(Mu:U \$v, Mu %_!)␤␤  in method Numeric at src/gen/CORE.setting:657␤  in sub infix:<+> at src/gen/CORE.setting:2249␤  in method exists at src/gen/CORE.setting:4797␤  in method at_p…

[15:25] *** lestrrat left
[15:25] <masak> nom: say (1..3)[1..Inf]

[15:25] <p6eval> nom 4130f6: OUTPUT«Method 'gimme' not found for invocant of class 'Range'␤  in method postcircumfix:<[ ]> at src/gen/CORE.setting:1159␤  in block <anon> at /tmp/A0qqMpQbnp:1␤␤»

[15:26] *** kaare_ joined
[15:26] *** lestrrat joined
[15:41] <moritz> nom: say nqp::list() ~~ Positional

[15:41] <p6eval> nom 4130f6: OUTPUT«(signal SEGV)»

[15:41] <moritz> ouch

[15:41] <jnthn> Well, that's just asking for it.

[15:41] <jnthn> nqp::list is making an RPA.

[15:41] <arnsholt> Heh. I don't think that's supposed to happen ^_^

[15:41] <jnthn> Not a Perl 6 list.

[15:42] <jnthn> arnsholt: I'm not particularly surprised it does.

[15:42] <arnsholt> Yeah, when you say it's an RPA I'm less surprised

[15:43] <moritz> well, if you use nqp:: opcodes, you

[15:43] <moritz> 're on your own

[15:43] <arnsholt> Reaching in and touching C-ish guts tend to do weird stuff

[15:43] <jnthn> Yeah. SEGV is a bit harsh.

[15:43] <masak> nom: say nqp::list().^methods

[15:43] <p6eval> nom 4130f6: OUTPUT«Method 'dispatch:<.^>' not found for invocant of class 'ResizablePMCArray'␤  in block <anon> at /tmp/H1obtRwkL0:1␤␤»

[15:43] <masak> nom: say nqp::list().WHAT

[15:43] <p6eval> nom 4130f6: OUTPUT«Can only use get_what on a SixModelObject␤  in block <anon> at /tmp/AUR2kaZzwr:1␤␤»

[15:43] <jnthn> But nothing good comes from breaking the type system.

[15:43] <masak> nom: say nqp::list()

[15:43] <p6eval> nom 4130f6: OUTPUT«Method 'gist' not found for invocant of class 'ResizablePMCArray'␤  in sub say at src/gen/CORE.setting:6078␤  in block <anon> at /tmp/CJCkCk3qdi:1␤␤»

[15:43] <masak> nom: say nqp::list() + 2

[15:43] <p6eval> nom 4130f6: OUTPUT«(signal SEGV)»

[15:44] * moritz wants a .[] that can deal with infinite series

[15:45] *** Patterner left
[15:46] <jnthn> moritz: Trouble is that we expect .[] to return a Parcel.

[15:46] * masak wants http://c2.com/cgi/wiki?PimcPiflPire

[15:46] <jnthn> iirc anyway

[15:47] <moritz> jnthn: I know. But it means I have to re-implement slicing for :nth

[15:48] <jnthn> ah.

[15:48] * jnthn can kinda see the utility of it

[15:48] <jnthn> (generally, not just for :nth)

[15:49] <moritz> I wouldn't mind a List.lazy-monotonic-slice method or so

[15:49] <jnthn> masak: Patches welcome ;)

[15:49] *** Psyche^ joined
[15:49] *** Psyche^ is now known as Patterner

[15:49] <jnthn> masak: Or maybe it's be better in a module :P

[15:50] <arnsholt> masak: Oooh, now I want it too =)

[15:50] * jnthn didn't know those existed. Curious even if impossible :)

[15:51] <arnsholt> But hyper can be used to do pmc (if not pimc =) at least

[15:51] *** lestrrat left
[15:52] <jnthn> Something that can crack any crypto system in instantly would be a great killer app though. I'm sure if we did that, Perl 6 would get instant adoption from governments worldwide :)

[15:52] *** lestrrat joined
[15:53] <masak> yes. I've always loved how those three (pire possibly excluded) are tantalizingly close to being possible. :)

[15:53] <masak> (in a "maybe in a parallel universe" sense)

[15:55] <arnsholt> Yeah, pimc and pifl can be sort-ofed with lazy collections, but pire really hinges on the whole "parallel infinite" thing in a different way

[15:55] *** lestrrat left
[15:56] *** lestrrat joined
[15:56] *** lestrrat left
[15:57] <masak> right.

[15:57] <masak> sort of makes me feel like there are Cantorian cardinalities of impossibility :)

[15:57] *** lestrrat joined
[15:58] <masak> iota_0, iota_1, iota_2...

[15:59] <masak> oh wait. wrong alphabet.

[15:59] <masak> yodh_0, yodh_1, yodh_2...

[16:01] <moritz> d'oh^1, d'oh^2, d'oh^3

[16:02] *** JimmyZ left
[16:04] *** JimmyZ joined
[16:06] <masak> :P

[16:09] <arnsholt> masak: IIRC there are actually classes of different trans-Turing computability classes

[16:10] *** thou joined
[16:11] <masak> arnsholt: yes. I wish I knew more about computability classes.

[16:13] *** MayDaniel joined
[16:13] *** zipf joined
[16:13] *** zipf left
[16:17] *** tarch__ joined
[16:23] * masak decommutes

[16:24] * jnthn also

[16:28] * TimToady suspects backlogging involves one of those cardinalities of impossibility; you guys say too many interesting things while I'm asleep...

[16:40] *** sisar left
[16:41] *** am0c left
[16:52] <pmichaud> good mroning, #perl6

[16:53] <pmichaud> *morning

[16:54] <TimToady> lots of good moroning last night too :)

[17:03] <JimmyZ> morning, pmichaud 

[17:05] *** JimmyZ left
[17:08] *** GlitchMr joined
[17:08] <dalek> roast: 247a066 | coke++ | S (6 files):

[17:08] <dalek> roast: niecza (auto)unfudge

[17:08] <dalek> roast: review: https://github.com/perl6/roast/commit/247a066284

[17:18] *** birdwindupbird joined
[17:19] *** pernatiy left
[17:20] <[Coke]> pmichaud: hio.

[17:21] <ascrazy> hello, in perl6 i can bind Callable object to some context?

[17:21] <ascrazy> such as bind in javascript or ruby

[17:23] *** birdwindupbird left
[17:26] <TimToady> perl6: sub foo (&doit,$toit) { doit $toit }; say foo &cos, pi

[17:26] <p6eval> pugs b927740, rakudo 4130f6, niecza v14-51-g3474558: OUTPUT«-1␤»

[17:26] <TimToady> do you mean like that?

[17:27] <TimToady> or are you talking about fake dynamic scopes of some sort?

[17:29] <TimToady> the word "context" is very, very overloaded in the realm of language design

[17:29] <TimToady> so we'll need an example of what you mean

[17:29] <TimToady> like a rosettacode page or something

[17:30] *** lestrrat left
[17:31] *** lestrrat joined
[17:32] <ascrazy> in ruby

[17:32] <ascrazy> class A; attr_accessor :name; end;

[17:32] <ascrazy> a = A.new; a.name = "Hello';

[17:32] <ascrazy> Proc.new{ print self.name }.bind(a).call #=> "Hello"

[17:33] <ascrazy> this block called in context 'a'

[17:33] <TimToady> looks like an anonymous method to me

[17:36] *** birdwindupbird joined
[17:37] <ascrazy> i can not found it in http://perlcabal.org/syn/

[17:37] <ascrazy> if you know where to look, please help me

[17:37] <TimToady> perl6: class A { has $.name is rw }; my A $a .= new; $a.name = "Hello"; (method () { say $.name }).assuming($a).()

[17:37] <p6eval> rakudo 4130f6, niecza v14-51-g3474558: OUTPUT«Hello␤»

[17:37] <p6eval> ..pugs b927740: OUTPUT«*** ␤    Unexpected "{"␤    expecting operator, ":", "," or ")"␤    at /tmp/gP6R3kPU3X line 1, column 77␤»

[17:38] <TimToady> there you go

[17:38] <TimToady> pretty much an exact equivalent, I think

[17:39] <TimToady> we don't default attributes to rw, and methods are really just functions that treat their first argument as the object, so normal partial application is used for your "bind"

[17:39] <TimToady> and there's no call method, you just call it :)

[17:40] <TimToady> in other words, postcircumfix:<( )> is the call method

[17:41] <ascrazy> great, thanks

[17:42] *** am0c joined
[17:47] <TimToady> pugs: class A { has $.name is rw }; my A $a .= new; $a.name = "Hello"; (method foo () { say $.name }).assuming($a).()

[17:47] <p6eval> pugs b927740: OUTPUT«*** ␤    Unexpected "{"␤    expecting operator, ":", "," or ")"␤    at /tmp/ulOt6_tEsN line 1, column 81␤»

[17:47] *** kaleem joined
[17:47] <TimToady> I guess pugs doesn't grok method declarators there

[17:48] <TimToady> pugs: class A { has $.name is rw }; my A $a .= new; $a.name = "Hello"; do { method foo () { say $.name } }.assuming($a).()

[17:48] <p6eval> pugs b927740: OUTPUT«pugs: Missing invocant parameters in '&foo': 0 received, 1 missing␤»

[17:48] <TimToady> now it's just messing up on the .assuming

[17:54] <TimToady> moritz: yes, sub f(:$x(:$y)) { } is parsing as a subsignature; it's the parses-line-noise problem people keep complaining about in Perl :)

[17:59] <TimToady> jnthn: the main point of lol is to have lists of lazy lists for subscripting; we can't get far on S09 without that

[17:59] *** simcop2387 left
[18:00] <TimToady> this also feels related to the problem of why we can't define recursive arrays like @hamming

[18:01] <TimToady> perl6: my @foo; @foo := 1, @foo; say @foo[2]

[18:01] <p6eval> rakudo 4130f6: OUTPUT«Nil␤»

[18:01] <p6eval> ..niecza v14-51-g3474558: OUTPUT«Any()␤»

[18:01] <p6eval> ..pugs b927740: OUTPUT«␤»

[18:01] *** simcop2387 joined
[18:03] <TimToady> well, TimToady was gonna recaulk his shower today, and he's still in his pajamas...

[18:04] <TimToady> laters &

[18:04] *** dakkar left
[18:13] *** ksi joined
[18:19] *** MayDaniel left
[18:22] *** mj41 left
[18:31] *** birdwindupbird left
[18:33] *** fridim_ joined
[18:33] *** birdwindupbird joined
[18:38] *** kaleem left
[18:52] *** mj41 joined
[19:05] *** gv joined
[19:18] *** PacoAir left
[19:20] <skids> nom: Capture.^roles.say;

[19:20] <p6eval> nom 4130f6: OUTPUT«␤»

[19:23] *** GlitchMr left
[19:29] *** tarch__ left
[19:47] *** Vlavv` joined
[19:50] *** MayDaniel joined
[19:59] *** PacoAir joined
[20:01] *** daxim left
[20:17] *** ribayr joined
[20:17] *** ribayr left
[20:17] *** ribayr joined
[20:23] *** MayDaniel left
[20:32] <TimToady> perl6: constant @factorial = 1, [\*] 1 ... *; say @factorial[1];

[20:32] <p6eval> niecza v14-51-g3474558: OUTPUT«(timeout)»

[20:32] <p6eval> ..pugs b927740: OUTPUT«*** ␤    Unexpected "@factorial"␤    expecting "=", context, ":" or "("␤    at /tmp/webLGgGwFX line 1, column 10␤»

[20:32] <p6eval> ..rakudo 4130f6: OUTPUT«===SORRY!===␤Cannot handle constant @factorial with non-literal value yet at line 1, near "; say @fac"␤»

[20:32] <TimToady> sorear: ^^ nieczabug

[20:33] *** pernatiy joined
[20:33] *** localhost left
[20:34] <TimToady> nom: my @factorial := 1, [\*] 1 ... *; say @factorial[1];

[20:34] <p6eval> nom 4130f6: OUTPUT«1␤»

[20:34] <TimToady> nom: my @factorial := 1, [\*] 1 ... *; say @factorial[5];

[20:34] <p6eval> nom 4130f6: OUTPUT«120␤»

[20:34] <TimToady> niecza: my @factorial := 1, [\*] 1 ... *; say @factorial[5];

[20:34] <p6eval> niecza v14-51-g3474558: OUTPUT«Any()␤»

[20:34] <TimToady> pugs: my @factorial := 1, [\*] 1 ... *; say @factorial[5];

[20:34] <p6eval> pugs b927740: OUTPUT«*** ␤    Unexpected " say"␤    at /tmp/djW2iOUnfS line 1, column 34␤»

[20:34] *** localhost joined
[20:35] <TimToady> pugs: my @factorial := 1, [\*](1 ... *); say @factorial[5];

[20:35] <p6eval> pugs b927740: OUTPUT«*** ␤    Unexpected ";"␤    at /tmp/WP1XGTLhPa line 1, column 34␤»

[20:35] <TimToady> pugs: my @factorial := (1, [\*] 1 ... *); say @factorial[5];

[20:35] <p6eval> pugs b927740: OUTPUT«*** ␤    Unexpected ";"␤    at /tmp/zPWrL4zG76 line 1, column 35␤»

[20:36] <TimToady> pugs: my (@factorial) := (1, [\*] 1 ... *); say @factorial[5];

[20:36] <p6eval> pugs b927740: OUTPUT«*** ␤    Unexpected ";"␤    at /tmp/qtEBbcoUaS line 1, column 37␤»

[20:36] <TimToady> well, enough spam

[20:44] *** birdwindupbird left
[20:44] *** GlitchMr joined
[20:47] <TimToady> perl6: my (*@factorial) ::= 1, [\*] 1 ... *; say @factorial[5];

[20:47] <p6eval> rakudo 4130f6: OUTPUT«===SORRY!===␤Cannot use bind operator with this left-hand side␤at /tmp/BNaePvnVLO:1␤»

[20:47] <p6eval> ..niecza v14-51-g3474558: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Cannot use bind operator with this LHS at /tmp/Kb6OAQw4LQ line 1:␤------> [32mmy (*@factorial) ::= 1, [\*] 1 ... *[33m⏏[31m; say @factorial[5];[0m␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/COR…

[20:47] <p6eval> ..pugs b927740: OUTPUT«*** ␤    Unexpected " say"␤    at /tmp/ZJkTrREChV line 1, column 38␤»

[20:47] *** PerlPilot left
[20:47] <TimToady> whyever not?

[20:48] *** PerlJam joined
[20:50] <skids> does rakudo do signatures in declarations yet?  I thought that was NYI?

[21:02] *** GlitchMr left
[21:04] *** am0c left
[21:06] *** bkolera joined
[21:08] <tadzik> 'evening #perl6

[21:16] <moritz> \o

[21:16] <tadzik> oh, moritz moritz 

[21:17] <tadzik> I got an email from someone of GPW, and I don't know what it says, and google translate doesn't make much sense :)

[21:17] <moritz> an invoice?

[21:17] <tadzik> no idea :) privmsg-ing you now

[21:19] <awwaiid> skids, what sort of signature/declarations do you mean?

[21:22] *** proller_ joined
[21:22] *** gv left
[21:23] <[Coke]> gpw?

[21:24] <moritz> German perl Workshop

[21:24] <[Coke]> ah.

[21:25] *** PacoAir left
[21:29] *** proller_ left
[21:30] *** proller_ joined
[21:32] *** PacoAir joined
[21:38] *** lestrrat left
[21:39] *** lestrrat joined
[21:52] <skids> awwaiid: I was answering TimToady's "whyever not?"  WRT my (*@factorial) ::=

[21:53] <awwaiid> ah

[21:55] *** jferrero left
[21:57] *** lestrrat left
[21:58] *** lestrrat joined
[22:00] *** jferrero joined
[22:08] <sorear> good * #perl6

[22:09] *** PacoAir left
[22:21] *** skids left
[22:23] *** kaare_ left
[22:28] <sorear> niecza: ([\*] 1 ... *)[5]

[22:28] <p6eval> niecza v14-51-g3474558:  ( no output )

[22:28] <sorear> niecza: say ([\*] 1 ... *)[5]

[22:28] <p6eval> niecza v14-51-g3474558: OUTPUT«720␤»

[22:28] <sorear> niecza: say @(1, ([\*] 1 ... *))[5]

[22:28] <p6eval> niecza v14-51-g3474558: OUTPUT«Any()␤»

[22:28] <masak> evenin', #perl6

[22:28] <sorear> niecza: say (@(1, ([\*] 1 ... *)))[5]

[22:28] <p6eval> niecza v14-51-g3474558: OUTPUT«Any()␤»

[22:28] <sorear> o/ masak

[22:29] * sorear wonders if roland333 will wait a week to come back

[22:31] <ascrazy> nom: ([\*] 1, 1, 2, 3...*)[5]

[22:31] <p6eval> nom 4130f6:  ( no output )

[22:32] <ascrazy> nom: ([\*] 1, 1, 2, 3...*)[5].sat

[22:32] <p6eval> nom 4130f6: OUTPUT«Method 'sat' not found for invocant of class 'Int'␤  in block <anon> at /tmp/BZBipQds0o:1␤␤»

[22:32] <ascrazy> nom: ([\*] 1, 1, 2, 3...*)[5].say

[22:32] <p6eval> nom 4130f6: OUTPUT«120␤»

[22:33] <masak> sorear: because studying Perl takes one week? :)

[22:33] <ascrazy> nom: (1, [\*] 1 ...*)[5]

[22:33] <p6eval> nom 4130f6:  ( no output )

[22:33] <ascrazy> nom: (1, [\*] 1 ...*)[5].say

[22:33] <p6eval> nom 4130f6: OUTPUT«120␤»

[22:37] *** bkolera left
[22:37] <jnthn> evening, #perl6

[22:38] <tadzik> 'evening jnthn 

[22:38] <jnthn> TimToady: When I mentioned Parcel I was talking about what's returned from a slicing operation.

[22:38] <jnthn> hi tadzik 

[22:39] <jnthn> o/ pmichaud, if you're still about :)

[22:41] <sorear> o/ jnthn

[22:43] <jnthn> hi sorear 

[22:46] *** fsergot joined
[22:46] <fsergot> o/

[22:49] <masak> fsergot! \o/

[22:53] *** lue joined
[22:53] <lue> blag post! https://rdstar.wordpress.com/2012/02/20/two-years-of-perl-6/

[22:53] <lue> And hello #perl6 ! o/

[22:55] <sorear> o/ fsergot

[22:55] <sorear> o/ lue

[22:56] <masak> lue! \o/

[22:58] <masak> nice post.

[22:58] <masak> lue++

[22:58] <au> o/ lue++ welcome back to this interactive non-fiction! 

[22:58] <lue> :) hello masak, sorear, and au o/

[22:58] <sorear> o/ ao!

[22:59] <sorear> au rather

[22:59] <au> /o

[22:59] * sorear hopes au is not too ao

[23:01] <masak> lue: a single page is easier to Ctrl+F than paginated lists with 10 per page.

[23:01] <masak> lue: and it's not like browsers are running out of vertical space :)

[23:03] <fsergot> lue++ :-)

[23:03] <sorear> oh, oops, ao is a kun thing

[23:04] <lue> masak: ah, all true.

[23:04] <masak> "a kun thing"?

[23:04] <jnthn> Rakudo Death Star :D

[23:04] <fsergot> all modules on one page suits me :-)

[23:04] <masak> set phasers to death!

[23:05] <masak> "I find your lack of speed... disappointing." -- "gggghrk!"

[23:05] <TimToady> 青い read as 日本語, I presume

[23:05] <masak> ah.

[23:05] <lue> in retrospect, I've found CPAN quite annoying to use before (or at least, not super-simple)

[23:06] <masak> lue: you should try metacpan.

[23:06] * lue looks

[23:06] <masak> lue: nowadays I mostly interact with metacpan through DuckDuckGo.

[23:06] <masak> I just go '!cpan YAML' in the address field, and it magically finds stuff for me.

[23:06] <sorear> cpanminus?

[23:06] <lue> not that I've used CPAN more than a couple of times (aside from when I'm linked to a module's page there)

[23:06] <masak> sorear: different axis :)

[23:07] <masak> metacpan is the improved online presence, cpanminus is the improved module install client.

[23:07] * lue will remember !cpan the next time he needs it

[23:08] <masak> well, it works in Chrome after I set ddg as the default search engine.

[23:08] <sorear> TimToady: are you still using ibus + anthy?

[23:08] <TimToady> はい！

[23:08] <masak> the bang syntax is particular to DuckDuckGo.

[23:09] <lue> I've been using DuckDuckGo for a while now :) [not perfect, but great]

[23:09] <sorear> TimToady: what do you do to enter » ?

[23:09] <TimToady> Compose > >

[23:09] <sorear> funny.

[23:10] <sorear> on my system, Compose doesn't work if I have ibus running.

[23:10] *** jferrero left
[23:10] <sorear> I have to kill ibus for compose to wrok again

[23:10] <TimToady> works fine here

[23:10] *** jferrero joined
[23:10] <TimToady> I do have "Input method off" though

[23:11] <TimToady> I don't think that kills ibus

[23:11] <lue> I use uim. Uim and X's compose key work great together everywhere for me, except emacs :/ (since I use compose way more often, I use env when starting emacs)

[23:11] <TimToady> since the little keyboard is still there

[23:13] <sorear> "little keyboard"?

[23:13] <TimToady> sorear: the widget in the top bar

[23:13] <TimToady> if I look in preferences/advanced there, I have checked "Use system keyboard layout"

[23:14] <TimToady> maybe you need that to get Compose? (as well as having the compose key set up elsewhere)

[23:15] <TimToady> IBus 1.3.9, running under Gnome

[23:15] <sorear> hmm, interesting

[23:15] <sorear> Compose works in gnome-terminal but stopped working in urxvt

[23:16] <TimToady> I'm in gnome-terminal

[23:17] <sorear> maybe I'll switch then.

[23:17] * TimToady has been putting off upgrading his laptop to the latest Ubuntu, after the fiasco with the server...

[23:18] <sorear> oww, black on white

[23:18] *** colomon left
[23:18] <TimToady> not for me

[23:18] <sorear> 青 » :>

[23:18] <TimToady> there's a white-on-black you can pick

[23:19] <TimToady> \ö/

[23:26] *** lateau__ left
[23:27] *** tarch__ joined
[23:28] *** tarch__ is now known as tarch

[23:28] *** ksi left
[23:28] *** ascrazy left
[23:36] *** colomon joined
[23:40] *** whiteknight joined
[23:42] <dalek> nqp/bs: 69ccfc7 | jnthn++ | src/ (2 files):

[23:42] <dalek> nqp/bs: Stubs need a fresh LexInfo for closure serialization to work. Gets us a little further with role serialization.

[23:42] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/69ccfc7c25

[23:44] *** sisar joined
[23:47] *** mj41 left
[23:48] *** rsimoes11 left
[23:52] *** betterworld joined
[23:55] <masak> 'night, #perl6

[23:55] <jnthn> 'night o/

[23:58] *** rsimoes1 joined
[23:58] *** tarch left
