[00:00] <sorear> jnthn: even so, he has been off irc for pushing a day now... uncharacteristic.

[00:00] <sorear> :)

[00:02] *** lestrrat left
[00:03] *** lestrrat joined
[00:06] *** whiteknight joined
[00:06] *** whiteknight is now known as Guest85916

[00:07] *** fridim_ left
[00:10] *** Chillance left
[00:14] <colomon> loliblogged: http://justrakudoit.wordpress.com/2012/05/21/optimizing-abc2ly-pl/

[00:16] <jnthn> colomon++

[00:16] <jnthn> OK, sleep...hopefully I'll have time/energy to do something useful here tomorrow :)

[00:16] <colomon> o/

[00:19] <felher> colomon++

[00:25] *** sisar left
[00:25] *** cognominal_ joined
[00:27] *** cognominal left
[00:27] *** replore_ joined
[00:45] *** tokuhirom joined
[00:45] <dalek> niecza: 33cedc2 | sorear++ | lib/Kernel.cs:

[00:45] <dalek> niecza: Fix secondary InvalidCastException when validating module cache fails (#121)

[00:45] <dalek> niecza: review: https://github.com/sorear/niecza/commit/33cedc22b0

[00:49] *** tokuhirom left
[00:55] *** s1n left
[01:03] *** tokuhirom joined
[01:07] <sorear> errrrh.  I forgot how little I understand this code

[01:09] *** imarcusthis left
[01:11] *** pmichaud joined
[01:11] *** s1n joined
[01:15] <dalek> niecza: 519e787 | sorear++ | lib/ (2 files):

[01:15] <dalek> niecza: Tweak dependency calculation for evals; no, I do not know what I am doing (fixes #121)

[01:15] <dalek> niecza: review: https://github.com/sorear/niecza/commit/519e787a70

[01:16] *** s1n left
[01:16] *** imarcusthis joined
[01:17] <sorear> o/ pmichaud

[01:18] <pmichaud> o/ sorear

[01:21] <dalek> niecza: d747643 | sorear++ | lib/CORE.setting:

[01:21] <dalek> niecza: Consistantly return values of type Match from Grammar.parse (#92)

[01:21] <dalek> niecza: review: https://github.com/sorear/niecza/commit/d747643325

[01:25] <sorear> p6: class Foo { has @.bar; }; say Foo.new(bar => [1, 2, 3]).item.perl

[01:25] <p6eval> rakudo dca0fa: OUTPUT«Foo.new(bar => Array.new(1, 2, 3))␤»

[01:25] <p6eval> ..pugs: OUTPUT«Foo.new((\("bar", \(1, 2, 3)),)␤»

[01:25] <p6eval> ..niecza v17-14-g33cedc2: OUTPUT«Foo.new(...)␤»

[01:25] <sorear> p6: class Foo { has @.bar; }; say Foo.new(bar => [1, 2, 3]).bar.item.perl

[01:25] <p6eval> niecza v17-14-g33cedc2: OUTPUT«[[1, 2, 3]]␤»

[01:25] <p6eval> ..rakudo dca0fa: OUTPUT«[1, 2, 3]␤»

[01:25] <p6eval> ..pugs: OUTPUT«\(1, 2, 3)␤»

[01:25] <sorear> It is unclear to me what the correct semantics of this is

[01:26] <sorear> obviously, n is wrong, but the model r is using is not clear

[01:28] <sorear> whee, found it

[01:31] *** s1n joined
[01:33] <dalek> niecza: 99bda95 | sorear++ | lib/Builtins.cs:

[01:33] <dalek> niecza: Always unpack arrays passed to Mu.new (fixes #104)

[01:33] <dalek> niecza: review: https://github.com/sorear/niecza/commit/99bda9544f

[01:35] *** s1n left
[01:44] *** Guest85916 left
[01:45] <sorear> n: s[x].=flip

[01:45] <p6eval> niecza v17-14-g33cedc2: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Malformed assignment operator at /tmp/KZr0bgP5DF line 1:␤------> [32ms[x].=[33m⏏[31mflip[0m␤␤Parse failed␤␤»

[01:45] <sorear> n: s[x] .= flip

[01:45] <p6eval> niecza v17-14-g33cedc2: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Malformed assignment operator at /tmp/BR7ZYVQpoe line 1:␤------> [32ms[x] .=[33m⏏[31m flip[0m␤␤Parse failed␤␤»

[01:45] <sorear> std: s[x] .= flip

[01:45] <p6eval> std 8632387: OUTPUT«ok 00:00 42m␤»

[01:46] <sorear> std: s[x] .=flip

[01:46] <p6eval> std 8632387: OUTPUT«ok 00:00 42m␤»

[01:46] <sorear> std: s[x].=flip

[01:46] <p6eval> std 8632387: OUTPUT«ok 00:00 42m␤»

[01:50] *** s1n joined
[01:56] *** s1n left
[01:57] <sorear> std: s[x] + 5;

[01:57] <p6eval> std 8632387: OUTPUT«ok 00:00 42m␤»

[01:58] *** scott_ joined
[01:58] *** scott_ is now known as Guest33396

[01:59] <dalek> niecza: eacfab8 | sorear++ | src/STD.pm6:

[01:59] <dalek> niecza: Copy TimToady++ fix for [.rotate], fixes #113

[01:59] <dalek> niecza: review: https://github.com/sorear/niecza/commit/eacfab81c6

[02:01] *** pat_js left
[02:05] *** lestrrat left
[02:06] *** lestrrat joined
[02:07] *** sivoais left
[02:09] *** plobsing_ joined
[02:09] *** aloha left
[02:09] <colomon> sorear++ # lots of patches today!

[02:10] *** s1n joined
[02:12] *** plobsing left
[02:17] *** aloha joined
[02:18] <colomon> sorear: though it looks like we're failing more spectests than usual now.

[02:22] *** orafu left
[02:22] *** orafu joined
[02:23] <colomon> sorear: Unhandled exception: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.DllNotFoundException: libglib-2.0.0.dylib

[02:23] <colomon> though that may be because I switched monos?  I haven't spectested since I did so.

[02:24] <colomon> problem is happening during a q:x call in quoting.t

[02:25] *** thou joined
[02:27] <dalek> niecza: a5f35dc | sorear++ | src/ (2 files):

[02:27] <dalek> niecza: Implement s[].=flip form (fixes #112)

[02:27] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a5f35dcb76

[02:27] <sorear> qx works locally; I blame mono changes :p

[02:28] <sorear> perhaps also a gtk update

[02:30] <colomon> I don't know why it can't find it, libglib-2.0.0.dylib is in /opt/local/lib

[02:30] <sorear> perhaps when you updated mono you installed the new version in a different way with a different search path

[02:32] <colomon> huh.

[02:32] <colomon> it's also in one of the 2.10.9 directories, but locate didn't find it.

[02:32] <sorear> exactly same spelling?

[02:33] <colomon> yes

[02:36] <colomon> dang, googling that error message is not helpful at all

[02:36] *** thou left
[02:39] <sorear> {ktrace,strace,dtrace,truss,whatever OSX uses now} maybe?

[02:43] <sorear> when was the nom switchover?

[02:44] <moritz> 2011.09 was the first nom-based compiler release

[02:44] *** leprevost left
[02:45] <moritz> but the first nom-based star was 2012.01

[02:51] <colomon> sorear: trying dtruss now

[02:53] *** wolfman2000 left
[02:53] *** mikemol left
[02:56] *** leprevost joined
[02:57] <colomon> sorear: maybe I'm doing something wrong with dtruss, but I see several open calls listed in the output, but *none* of them is the libglib.  First appearance of that name is in the error message

[02:58] <colomon> scratch that, better results with a second try

[02:58] <sorear> colomon: what about access or stat calls?

[02:59] <colomon> yes, I'm trying to sort out the calls now

[03:00] <colomon> okay, it's not in the first place it looks...

[03:01] <colomon> and then it looks in the current directory, /Users/colomon/lib, /usr/local/lib, /usr/lib ...

[03:01] *** leprevost left
[03:06] *** wolfman2000 joined
[03:15] <colomon> sorear: I'm going to sleep with this mystery unsolved.  Talk to you tomorrow...

[03:24] <dalek> niecza: 0308871 | sorear++ | lib/CORE.setting:

[03:24] <dalek> niecza: Quick fix to do something more useful with sequence closures that return multiple values (fixes #109)

[03:24] <dalek> niecza: review: https://github.com/sorear/niecza/commit/03088712fb

[03:36] *** sivoais joined
[03:39] *** lestrrat left
[03:39] *** lestrrat joined
[03:42] <sorear> r: my %foo = a => 1, b => 2; say %foo{*}.perl

[03:42] <p6eval> rakudo dca0fa: OUTPUT«(1, 2)␤»

[03:59] *** localhost left
[04:00] *** apejens left
[04:00] *** takesako left
[04:00] *** takesako joined
[04:00] *** xinming left
[04:01] *** localhost joined
[04:01] *** TimToady left
[04:01] *** TimToady joined
[04:02] *** xinming joined
[04:02] *** revdiablo joined
[04:27] *** apejens joined
[04:43] <araujo> rakudo: say "hello".substr(0, -1);

[04:43] <p6eval> rakudo dca0fa: OUTPUT«Negative length argument (-1) to .substr␤  in method gist at src/gen/CORE.setting:9059␤  in sub say at src/gen/CORE.setting:6802␤  in block <anon> at /tmp/JhMNl86Ic2:1␤␤»

[04:43] <araujo> shouldn't that work?

[04:46] <geekosaur> I think you're supposed to use *-1 type things these days?

[04:46] <geekosaur> r: say "hello".substr(0, *-1)

[04:46] <p6eval> rakudo dca0fa: OUTPUT«hell␤»

[04:47] <araujo> mm...

[04:47] <araujo> geekosaur, was following the rosettacode examples .. :P

[04:48] <geekosaur> rosettacode is known to sometimes be out of date

[04:48] <araujo> geekosaur, what is the "*" all about?

[04:48] <araujo> yeah right

[04:49] <geekosaur> so, in this case, part of the idea is that you don't want a fencepost error or something to convert a normal selection to an inverted one, so the inverted one has a distinct syntax.

[04:51] <geekosaur> in general, perl 6 avoids magic values.  so, treating a negative number differently from a positive one is bad and should instead be done by using a distinctive mechanism (the Whatever, aka *)

[04:51] <geekosaur> (sorry for delay, network here is favoring longer outages instead of the usual 45 seconds tonight...)

[04:53] <geekosaur> for more of an explanation you want someonewith a better handle on the logic (i.e. @Larry) although I think this stuff is covered in the apocalypses (if with very out of date syntax)

[04:57] <araujo> I see, thanks geekosaur 

[05:14] <sorear> right.

[05:14] <sorear> perl 6 thinks that perl 5's dwim went too far

[05:14] <sorear> perl 5 tries to find a sensible way to interpret *anything* you throw at it

[05:15] <sorear> perl 6 is happy to double-check you

[05:17] *** adu joined
[05:36] *** kaleem joined
[05:49] *** replore_ left
[05:55] *** Guest33396 left
[06:06] *** tyatpi left
[06:07] *** ab5tract joined
[06:12] <dalek> niecza: a900903 | sorear++ | lib/ (3 files):

[06:12] <dalek> niecza: Implement [*] style zen slices (fixes #111)

[06:12] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a900903b23

[06:13] *** wtw joined
[06:15] *** mucker joined
[06:25] <dalek> niecza: 5192417 | sorear++ | / (2 files):

[06:25] <dalek> niecza: Make self available in initializer thunks, fixes #93

[06:25] <dalek> niecza: review: https://github.com/sorear/niecza/commit/51924175e9

[06:25] <dalek> niecza: fb775fb | sorear++ | test.pl:

[06:25] <dalek> niecza: s|substr|$/-rw| where needed in test.pl

[06:25] <dalek> niecza: review: https://github.com/sorear/niecza/commit/fb775fb523

[06:33] *** scott_ joined
[06:34] *** scott_ is now known as Guest49940

[07:16] *** fhelmberger joined
[07:25] *** cognominal joined
[07:28] *** cognominal_ left
[07:30] *** japhb joined
[07:32] *** adu left
[07:33] *** brrt joined
[07:36] *** mucker left
[07:38] *** mucker joined
[07:39] *** japhb left
[07:55] *** daxim joined
[08:33] *** cognominal left
[08:38] *** Chillance joined
[08:44] <sorear> sleep&

[08:44] *** cognominal joined
[08:49] *** dakkar joined
[08:51] <jnthn> morning, #perl6 o/

[08:52] <moritz> \o jnthn 

[08:54] <tadzik> hello hello

[08:58] <jnthn> Is anybody up for putting out a * release this week? I'll be able to find tuits for it if nobody else can.

[09:00] <moritz> I could do some work on it, but can't promise to do it all the way

[09:00] <moritz> it also depends on tadzik++ unbreaking panda, otherwise there's not much point in it, IMHO

[09:07] *** lumi_ joined
[09:18] <tadzik> I did unbreak it yesterday

[09:18] <moritz> \o/

[09:19] <tadzik> and we have new http://tjs.azalayah.net/new.html

[09:20] *** domidumont joined
[09:21] <tadzik> what is the correct way to write something like '('(<digit>+) {} [<t_elem>* <stem>] % { +$0 }?

[09:22] <moritz> you want a list of stuff separated by the digit that was parsed before it?

[09:23] <tadzik> colomon does, I think :)

[09:23] <tadzik> it's from ABC

[09:23] <bbkr> very nice page with this module list

[09:23] <moritz> or more like ** { +$0 }  (ie number used as a repetition count)?

[09:24] <dalek> emmentaler: 4da24c0 | tadzik++ | template.tt:

[09:24] <dalek> emmentaler: Link to emmentaler repo on the generated page

[09:24] <dalek> emmentaler: review: https://github.com/tadzik/emmentaler/commit/4da24c019d

[09:24] <tadzik> moritz: oh, yes, that what it was initially

[09:25] <tadzik> I now confuse those two, hm

[09:25] <moritz> tadzik: I think it should work as ** { $0 }, but it doesn't work in rakudo

[09:25] <moritz> because rakudo doesn't implement the ** { closure } form

[09:25] <tadzik> I see

[09:25] <jnthn> I think PerlJam++ was working on implementing that last week.

[09:26] <jnthn> Not sure how far it got.

[09:26] <moritz> last time I tried to work around it, I tried   <stuff>* <?{ $<stuff>.elems == $0 }>, but it didn't work either

[09:26] <moritz> I think lumi_++ found a workaround, something evil :-)

[09:26] <tadzik> :>

[09:27] <tadzik> idea: sorting modules on emmentaler page by workingness

[09:28] <moritz> idea: add a flag to those modules included in star

[09:28] <jnthn> Hm, or grouped by workingness

[09:28] <moritz> so that it's easy to see if the next star distribution regressed a module

[09:28] <jnthn> ooh, yes

[09:28] <moritz> I just manually checked the list

[09:29] <moritz> (result: LWP::Simple depends on URI, which sometimes failed to load. Precomp stuff)

[09:29] <tadzik> idea: do me SE homework, due today, 4:30 hours

[09:29] <tadzik> :/

[09:29] <moritz> SE?

[09:29] <tadzik> software engineering

[09:29] <moritz> ah

[09:29] <tadzik> UMLs everywhere

[09:29] *** mdupont left
[09:30] *** sergot joined
[09:31] <sergot> hi! o/

[09:31] <tadzik> hello

[09:33] <dalek> star: fa545bf | moritz++ | / (4 files):

[09:33] <dalek> star: bump some version numbers in preparation of 2012.05 star release

[09:33] <dalek> star: review: https://github.com/rakudo/star/commit/fa545bfaa9

[09:34] *** xinming_ joined
[09:34] *** mdupont joined
[09:37] *** xinming left
[09:47] <lumi_> r:  say("2 abcde" ~~ regex  { (\d+)\s* :my $p; { $p = $/.CURSOR.pos} (\w *)  <?at: $p+$0>}) # something evil for tadzik

[09:47] <p6eval> rakudo dca0fa: OUTPUT«=> <2 ab>␤ 0 => <2>␤ 1 => <ab>␤␤»

[09:48] <masak> good noon, #perl6

[09:48] <phenny> masak: 20 May 06:47Z <sorear> tell masak http://erikdemaine.org/papers/NCL_TCS/paper.pdf - §4.2, the rectangular version of t4 ("Rush Hour") is PSPACE-complete.

[09:48] <phenny> masak: 20 May 06:48Z <sorear> tell masak Call a t4-puzzle /restricted/ if it has no blocks in the (say) left-right orientation.

[09:48] <phenny> masak: 20 May 06:49Z <sorear> tell masak Restricted t4-puzzles are in one to one correspondence with Rush Hour puzzles, and are solvable iff the corresponding Rush Hour puzzle is.  Proof left as an exercise to the reader

[09:48] <phenny> masak: 20 May 06:49Z <sorear> tell masak ergo, t4 (with the usual size generalization caveat) is PSPACE-complete

[09:49] <jnthn> o/ masak

[09:49] <tadzik> lumi_: ohh, horrible :)

[09:49] * masak feels sought :)

[09:49] <tadzik> hello masak 

[09:49] <masak> sorear++

[09:57] <masak> sorear: there seems to be a treasure trove of insights to be had just from playing around with different representations of t4, like you just did. mapping the two diagonal directions to a rectangular space hadn't occurred to me. even though I love the hexagonal topology and feel at home in it.

[09:59] <masak> sorear: though Salvador made a similar transformation, mapping from hex to rect using :horizontal<horizontal>, :slash-diag<vertical>, :backslash-diag<backslash-diag>

[10:05] <masak> sorta-kinda. the diagonals of the hex board are 60°, whereas the rect diagonals are 45° :)

[10:13] *** Guest49940 left
[10:16] <masak> sorear: so... PSPACE-compelte is actually worse than NP-complete, from a cursory glance at the Wikipedia page.

[10:16] <masak> complete*

[10:21] *** birdwindupbird joined
[10:27] *** kresike joined
[10:27] *** mucker left
[10:27] <kresike> #freeswitch

[10:27] <kresike> oops, forgot the /j ... sorry

[10:30] *** sunny_ joined
[10:30] <sunny_> Hi..

[10:31] <moritz> hi sunny_, kresike 

[10:31] *** sunny_ left
[10:32] <kresike> hello moritz 

[10:33] <masak> hi kresike :)

[10:34] <kresike> hello masak

[10:34] * moritz loves it when lurkers speak up, even if by accident :-)

[10:34] <kresike> moritz, :)

[10:36] <kresike> you guys are at a level in perl, that I just wish to reach ... but probably never will

[10:36] <masak> hey, don't self-limit like that. reach! :)

[10:36] <kresike> It's a pleasure to see perl6 take shape though 

[10:36] <masak> yeah.

[10:37] <kresike> masak, will do :)

[10:38] <kresike> the reaching I mean ...

[10:40] <masak> there's some nice middle ground there right between self-limiting and "positive thinking": a kind of empirical honesty that helps one improve and learn.

[10:40] *** cognominal_ joined
[10:41] <kresike> I think I'm sitting in the middle of that middle ground right now.

[10:41] <masak> actually, both self-limiting and positive thinking are manifestations of the same basic mistake: rooting one's abilities in a mental model rather than in what's actually the case.

[10:42] <jnthn> Positive thinking is a basic mistake? :)

[10:42] <masak> sure it is! :P

[10:43] * jnthn starts considering everything negatively :P

[10:43] <masak> <whoosh>

[10:43] *** cognominal left
[10:44] <masak> (sound of the point flying over jnthn's head) :P

[10:44] <kresike> jnthn, don't worry, making mistakes means being human :)

[10:44] <masak> +1

[10:44] <masak> the road to a total success is littered with partial failures.

[10:44] <masak> (the problem with sayings like that is that the road to total failure is also littered with partial failures) :)

[10:45] <kresike> masak, the definition of total success being ?

[10:45] <masak> (same problem with ghandicon)

[10:45] <masak> kresike: depends on the project or context or ambition.

[10:45] <masak> kresike: but the point is that progression happens through failing and learning from that.

[10:46] <masak> most people don't progress like that because they have something against failure.

[10:48] <kresike> masak, what happens if one doesn't fail ?

[10:48] <masak> then you're not trying hard enough :P

[10:49] <kresike> :)

[10:50] <masak> alternatively, if you're one of those people who actually get design and code and tests and models right on the first try: we're hiring ;)

[10:50] <masak> we have an opening for a Flawless Guy ;)

[10:50] <masak> or Gal.

[10:50] <kresike> well looking at my perl code written a few years ago, I don't think I was talking about myself ... besides, I don't believe there is a human being on this ball of dust that hasn't made a mistake in his life

[10:51] <masak> right.

[10:51] <kresike> I'm a guy, but sorry, not the flawless one you're thinking of

[10:52] <masak> more realistically, I think one becomes a Flawless Guy or Gal by first making all the mistakes, then thinking about them, and then deciding to do things better. and even then one will invariable make mistakes and have to learn more.

[10:52] <kresike> would like to become one though

[10:52] <kresike> but the human lifetime is too short for that, I'm afraid

[10:52] <masak> from where I'm standing, it's more important to aim for ability to realize one's failings, than not having any in the first place :)

[10:53] <tadzik> "Don't be perfect, be Very Good" :)

[10:53] <kresike> when You know where You failed, You have the problem 99% solved

[10:53] <masak> tadzik: ooh

[10:54] *** kubrat joined
[10:54] <masak> kresike: someone said on twitter that almost all debugging sessions seem to end with "...aaaaand I'm an idiot". :)

[10:55] <kresike> funny, my debugging sessions end in me banging my head against the wall :)

[10:55] <tadzik> :0

[10:55] <tadzik> Alternatively: don't be perfect, but try to be perfect

[10:56] <masak> tadzik: I think even trying to be perfect is slightly dangerous. that's why people tend to say that the perfect is the enemy of the good.

[10:56] <kresike> but the principle is the same nevertheless, the one from twitter is a little less painful

[10:57] <masak> tadzik: I like the Cult of Done because it formalizes "release early, release often" into a principle of creativity.

[10:57] <kresike> there is no problem with being perfect, the problem is with thinking of yourself as perfect !

[10:57] <masak> kresike: "Those who think they know everything are a great annoyance to those of us who do." -- Isaaac Asimov

[10:58] <tadzik> troo

[10:59] <kresike> +1

[11:06] <colomon> tadzik: it's the number of repetitions, not a digit separator.  So for a triplet, you can say (3ccc and for a quintuplet (5cdefg ...

[11:06] <tadzik> I see

[11:09] *** tyatpi joined
[11:10] <brrt> hello all

[11:11] <tadzik> hello brrt 

[11:12] <brrt> i was wondering - after this summer is over, and supposing i'm succesful, who would be interested in perl6 web hosting?

[11:12] <brrt> coupled, in all likelihood, to at least a postgresql database instance

[11:12] <tadzik> huh, emmentaler will be :)

[11:13] <tadzik> Perl 6 ecosystem in general

[11:13] <brrt> :-) chance happens that i'm forced into an internet connection with much more mbit/s than i could ever need

[11:14] <tadzik> the most required thing will be brute CPU power and security sandboxing, I think

[11:15] <brrt> i'm not a great fan of brute cpu power, tends to suck energy

[11:15] <tadzik> well, you do need some to compile and test 100 Perl 6 modules :)

[11:16] <brrt> patience? :-p

[11:16] <brrt> seriously though

[11:16] <tadzik> that too :)

[11:16] <tadzik> no, I'm exagarrating, you don't need that much horsepower

[11:17] <brrt> depends, of course, on how much traffic you get

[11:17] <tadzik> it currently takes 19 minutes on my cheap c2d

[11:17] <tadzik> and things are doomed to get a lot faster

[11:17] <brrt> perfect world, i'd have a series of cheap powerefficient amd fusion chips

[11:18] <brrt> or something with a better ops / watt rate

[11:21] *** alim joined
[11:25] * moritz shouts ARM, ARM

[11:25] <brrt> right

[11:26] <brrt> although that would be nice

[11:27] <brrt> compact, too

[11:28] <masak> diakopter: [backlog] I would guess "goheadn" works as a semi-hypnotic suggestion on people so that they'll follow instructions better over the telephone. also, it's a bit of redundancy/buffering at the start of a sentence.

[11:33] *** Woodi joined
[11:35] <masak> Woodi: [backlog] methods can totally have methods. it just gives them a narrower scoping, is all.

[11:36] <jnthn> Adding a method is a call on the meta-object, which is held in a contextual. It'd be a pain not to make it work...

[11:36] <masak> r: class A { method foo { my $a = 42; method bar { say $a } } }; given A.new { .bar; .foo; .bar }

[11:36] <p6eval> rakudo dca0fa: OUTPUT«Any()␤42␤»

[11:37] <moritz> jnthn: one could reset the contextual in a routine_def. And then $!attrib inside the method probably stops working...

[11:37] <masak> it works :)

[11:37] <Woodi> masak: I was wondering just in case ending }\n} can be removed for cleaner code :) probably I started inventing s/}/\t/g :)

[11:37] <moritz> a mechanism like HAS_SELF might work, but it would be extra work

[11:38] <masak> Woodi: not sure what braces you're trying to remove. but check out file-scoped class declarations.

[11:39] *** cognominal_ left
[11:39] <jnthn> moritz: Right, which was kinda my point. It works naturally and we have to add things to break it. It makes life harder, not easier.

[11:39] <jnthn> (Makes life harder to make it not work, that is.)

[11:40] *** cognominal joined
[11:41] <masak> Woodi: [backlog] using class inheritance to "just add a few more methods" is a design smell.

[11:41] <Woodi> masak: just wondered do new 'metod' word can start new method... instead of: http://pastebin.com/kXudy9mh   but NVM

[11:42] <Woodi> ah..

[11:42] <masak> I don't see what's strange about lines with only '}' on them.

[11:42] <Woodi> masak: it was kind a 'closed' discusion, in universe without accesors :)

[11:42] *** cognominal_ joined
[11:43] <masak> though it's probably a good idea to some extent to try to keep scopes small and indentation shallow.

[11:43] <masak> the reason I qualify that is that delegation jungles and scattering of responsibilities are also real risks.

[11:44] <Woodi> but look: you have two nearly identical classes - they use priv fields. you extract super class and BUM...

[11:45] <masak> sorear: Wikipedia defines operational semantics as "a way to give meaning to computer programs in a mathematically rigorous way". sounds like an algebra for program behavior.

[11:45] *** cognominal left
[11:47] <masak> or a way to deal with such algebras, more likely.

[11:50] <brrt> is it possible that rakudo HEAD contains an infinite loop

[11:51] <brrt> because i'm at 100% CPU for five minutes at least, after optimize

[11:52] <masak> how much RAM do you have?

[11:52] <brrt> never mind

[11:52] <brrt> but, for the record, 4G, dualcore

[11:53] <masak> ok.

[11:54] * brrt thinks again about throwing ARM at perl6

[11:54] <tadzik> :)

[11:54] <brrt> one could always cross-compile

[11:54] <tadzik> did you note the "The following step can take quite a long time" warning?

[11:55] *** thou joined
[11:55] <tadzik> snarkyboojum was once running Rakudo on his N900, which has 600 MHz ARM and 1 GB or RAM

[11:55] <brrt> i did, it was just... longer than i had expected

[11:55] * masak de-trains &

[11:56] <brrt> wait

[11:56] *** mdupont left
[11:56] <brrt> i probably don't even need to cross-compile.... we're running on a virtual machine, after all

[11:57] <kresike> brrt, have you quantified "a long time" ? :)

[11:57] *** skids left
[11:59] *** sporous left
[12:00] *** sporous joined
[12:01] *** xinming_ left
[12:01] *** mdupont joined
[12:03] <brrt> in this case, about two, three minutes

[12:11] *** grondilu joined
[12:11] <grondilu> p6: say 100 > 100/2 ?? "ok" !! "oops"

[12:11] <p6eval> pugs, niecza v17-23-gfb775fb: OUTPUT«ok␤»

[12:11] <p6eval> ..rakudo dca0fa: OUTPUT«oops␤»

[12:13] *** snearch joined
[12:14] *** wolfman2000 left
[12:17] *** bluescreen10 joined
[12:18] *** Chillance left
[12:19] <jnthn> hmmm...

[12:19] <jnthn> multi sub infix:«>»(Int:D \$a, Rational:D \$b) { $a * $b.denominator > $b.numerator * $a

[12:19] <jnthn> }

[12:21] <grondilu> r: say pack "l", 4213;

[12:21] <p6eval> rakudo dca0fa: OUTPUT«Unrecognized directive l␤  in block <anon> at src/gen/CORE.setting:6786␤  in method reify at src/gen/CORE.setting:4897␤  in method reify at src/gen/CORE.setting:4792␤  in method reify at src/gen/CORE.setting:4792␤  in method gimme at src/gen/CORE.setting:5179␤  in …

[12:21] <grondilu> I added an implementation for packing/unpacking signed integers on my repo.  How can I post it?

[12:24] <jnthn> grondilu: Easiest way is to push it to a fork on github, and send a pull request.

[12:25] <grondilu> Ok.  I'll try to do that.

[12:25] <jnthn> Thanks

[12:25] <jnthn> grondilu++ # improving pack/unpack

[12:30] *** Chillance joined
[12:32] <brrt> segmentation fault in perl6, thats probably parrot, right?

[12:32] <tadzik> not neceserilly

[12:32] <brrt> hmm

[12:33] <brrt> i'm rebuilding anyway

[12:35] *** raiph joined
[12:41] *** icwiener joined
[12:44] *** lestrrat left
[12:44] *** Khisanth left
[12:45] *** lestrrat joined
[12:47] <grondilu> branching and forking is different on github, right?  I mean, I forked rakudo on github but can I use a local branch as a repo for this fork?  

[12:48] <tadzik> when you fork, you start owning a copy of the repo, with all its branches

[12:48] *** fhelmberger left
[12:49] <grondilu> ahh

[12:49] <jnthn> Right, and the difference is you can push to your copy.

[12:50] <tadzik> so you can start a new branch in your copy, and then tell us "please merge this remote branch I created"

[12:55] *** PacoAir joined
[12:59] *** Khisanth joined
[13:01] <lumi_> Can grammars be run on a streaming input?

[13:02] <masak> they're meant to can that.

[13:02] <masak> but no impl does it yet.

[13:02] *** araujo left
[13:03] *** NamelessTee left
[13:03] <grondilu> I made my copy on the main branch of my fork.  I add to copy my modifs manually because somehow I could not push as I do with my other repos.  I hope it's ok.  http://github.com/grondilu/rakudo   It's in src/core/Buf.pm

[13:03] *** araujo joined
[13:03] <grondilu> s/I add to copy/I had to copy/

[13:04] <masak> lovely typo.

[13:06] <grondilu> There was also a bug in dealing with pack 'H', ...   s/if $hexstring % 2/if $hexstring.ords % 2/'

[13:07] *** Psyche^ joined
[13:08] <masak> ooh

[13:08] <masak> grondilu++

[13:09] *** Patterner left
[13:09] *** Psyche^ is now known as Patterner

[13:11] *** jaldhar left
[13:12] *** jaldhar joined
[13:17] <grondilu> glad to help :)

[13:19] <jnthn> masak: There was a Rat/Int bug a few moments back that you may not have submut also.

[13:22] <masak> I'm not fully backlag yet.

[13:22] *** grondilu left
[13:25] *** skids joined
[13:26] <lumi_> jnthn: I've found some issues with grammar-debugger, it loops on missing rules

[13:26] <[Coke]> masak: idiot. ZOMG thank goodness it's not just me.

[13:27] <jnthn> lumi_: Ouch. That should be fixed.

[13:27] <jnthn> lumi_: Please do file a github issue.

[13:28] <lumi_> jnthn: Sure

[13:30] *** domidumont left
[13:32] *** fhelmberger joined
[13:34] * masak .oO( "idiot"? ) :)

[13:34] <masak> [Coke]: a good day to you too, sir :P

[13:44] *** domidumont joined
[13:46] *** icwiener left
[13:46] <PerlJam> chromatic has just indeirectly changed my thinking about "Using Perl 6"

[13:47] <masak> go on.

[13:47] <PerlJam> The last sentence of http://www.modernperlbooks.com/mt/2012/05/programming-breaks-things.html --  "That's also one reason why Modern Perl: The Book uses small test programs to demonstrate language features: working in small steps is too important to ignore."

[13:48] <PerlJam> The chapters in UP6 aren't small enough steps

[13:48] <PerlJam> the contents of the chapters (not all of them, but most I think) aren't small enough steps

[13:49] <masak> agreed.

[13:50] *** mikemol joined
[13:51] <sjn> PerlJam++ # good thoughts about UP6

[13:53] <PerlJam> I realized it's one of the reasons I haven't worked on it lately.  Even making a small contribution has a too-large barrier to entry in that it must "fit" within the general framework of the book.  for instance, each chapter expounds upon a single bit of code, so, to illustrate something it has to fit into the code or be indirectly explainable by relating to the code.

[13:53] <masak> bug reports deserve to be small. commits deserve to be atomic. book examples deserve to be simple.

[13:54] *** kaleem left
[13:56] *** sisar joined
[13:57] <[Coke]> masak: in context it was something about de bugging sessions ending in "oh, and I'm an idiot."

[13:58] <[Coke]> I cannot tell you how many times that has happened to me, almost to a wrd.

[13:58] <[Coke]> *word

[13:58] <masak> [Coke]: my internal dialogue is never that harsh, but I guess I have some equivalent of that, too.

[13:58] <masak> (and yes, I presumed you were referring to that tweet)

[13:59] <colomon> [Coke]++

[14:00] *** sergot left
[14:01] *** NamelessTee joined
[14:01] *** NamelessTee left
[14:01] *** NamelessTee joined
[14:02] <[Coke]> the best part is when I invariably am not running the version of the code I just edited.

[14:02] <[Coke]> who knew there were so many ways to test the wrong thing.

[14:03] <masak> colleague calls that "chasing ghosts".

[14:05] <kresike> did you guys notice, that a bug seems such a simple thing after one squashes it ?

[14:06] *** icwiener joined
[14:07] <jnthn> kresike: Quite often, but not always. Some things are genuinely complicated.

[14:09] <masak> a bug seems a simple thing after one golfs it ;)

[14:10] <kresike> jnthn, If it's genuinely complicated, it can't be a bug. If it is both, then the one who created it was poking where he wasn't supposed to.

[14:14] <jnthn> kresike: A bug indicates there's a defect. Sometimes, it feels like a silly mistake led to the defect. Sometimes, though, it raises a deeper issue that may not have been obvious up front, and doesn't really feel obvious even with hindsight.

[14:17] <Woodi> but maybe in future before even writing a subroutine or modifing a line there will be design stage ? somethink like in Bell/Lucent telephony software - before someone change line he need to put half page comment why :)

[14:17] <masak> I've seen bugs with genuinely complicated fixes.

[14:17] *** raiph left
[14:17] <jnthn> I guess some bugs are a result of implementation errors, and some are a result of design errors.

[14:18] <masak> Woodi: I try not to make code changes without knowing why I'm making them. does that count? :)

[14:18] <masak> Woodi: similarly, when I'm ready to commit, I do a 'git diff' and check what it is I'm committing. if it's not coherent, I fix the commit first.

[14:18] <Woodi> but sometimes code is written 'in hurry'...

[14:18] <masak> right.

[14:19] <masak> that mostly just means that you end up with a model that may not be consistent and may not carry subsequent changes well, instead of the sane model you took pains designing.

[14:20] <masak> the argument "we don't have time to model/write tests/think" is a bit self-defeating, I think. (do you really have time to debug a lot, then?) it's easy to make, though.

[14:21] <Woodi> btw. how you imagine 3d code ? :) for now we have 1D. meta-objects can be seen as 2D. if someone paint code meta would be 'under' for me. what should be 'up' ? :)

[14:21] <masak> meta-objects are "up" for me. and reprs are "down".

[14:22] <Woodi> such pictured editor would be nice for understending

[14:22] *** xdbr joined
[14:22] <Woodi> but reps are kind outside a language...

[14:25] <Woodi> imagine your vim session morph into 3D view like Compiz...

[14:25] <jnthn> Meta-objects and reprs are kinda in a space that's to the side of the normal objects you work with. And within that space they point at right-angles.

[14:26] <masak> fairy nuff.

[14:26] <masak> in that sense, having them point at right angles is important in itself.

[14:26] <jnthn> Yes

[14:26] <jnthn> That's how repr poly arises. :)

[14:27] <flussence> .oO( firefox has a button for that )

[14:27] <Woodi> flussence: but no 'semantics' yet :)

[14:28] <mikec_> a 3d mode?

[14:30] *** PacoAir left
[14:31] <flussence> it only shows you DOM tree nesting as depth (which I don't find all that useful), but yeah

[14:38] *** wtw left
[14:47] *** amkrankruleuen joined
[14:52] <masak> amkrankruleuen! \o/

[15:00] <dalek> nqp/qbootstrap: aee8809 | pmichaud++ | src/Q (2 files):

[15:00] <dalek> nqp/qbootstrap: Fix bug with subcaptures receiving empty hash entries from outer match quantified captures (RT #111286).

[15:00] <dalek> nqp/qbootstrap: review: https://github.com/perl6/nqp/commit/aee88091bd

[15:00] <dalek> nqp/qbootstrap: dfb6d5a | tadzik++ | VERSION:

[15:00] <dalek> nqp/qbootstrap: bump VERSION to 2012.05

[15:00] <dalek> nqp/qbootstrap: review: https://github.com/perl6/nqp/commit/dfb6d5a3a3

[15:00] <dalek> nqp/qbootstrap: 770e9f2 | moritz++ | src/Regex/P6Regex/ (2 files):

[15:00] <dalek> nqp/qbootstrap: implement <|w> and <|c> regex assertions

[15:00] <dalek> nqp/qbootstrap: review: https://github.com/perl6/nqp/commit/770e9f28cc

[15:00] <dalek> nqp/qbootstrap: 31fdcee | moritz++ | / (3 files):

[15:00] <dalek> nqp/qbootstrap: oops, should have implemented <|w> in qregex right away. With basic tests this time

[15:00] <dalek> nqp/qbootstrap: review: https://github.com/perl6/nqp/commit/31fdceea60

[15:00] <dalek> nqp/qbootstrap: 4bac8c3 | jnthn++ | / (8 files):

[15:00] <dalek> nqp/qbootstrap: Merge branch 'master' into qbootstrap

[15:00] <dalek> nqp/qbootstrap: review: https://github.com/perl6/nqp/commit/4bac8c34bf

[15:00] <jnthn> huh, merge detection fail...

[15:01] <masak> well, it *is* a heuristic :)

[15:01] *** brrt left
[15:04] <jnthn> ah, troo

[15:04] <amkrankruleuen> masak: Hi!

[15:06] <masak> amkrankruleuen: how's things?

[15:07] <amkrankruleuen> Okay :D

[15:08] *** [hds] joined
[15:09] *** [hds] left
[15:09] *** [hds] joined
[15:10] <masak> r: enum Goodness <Terrible Lousy Bad Okay Good Excellent>; say +Goodness::Okay

[15:10] <p6eval> rakudo dca0fa: OUTPUT«3␤»

[15:10] <masak> "I give it a 3 out of 5." :P

[15:10] *** tokuhirom left
[15:11] *** tokuhirom joined
[15:13] <amkrankruleuen> masak: Joke, I programming for hobby because i am a student and i don't have time for seriously program, maybe soon because i have a holiday :x

[15:14] <masak> :)

[15:15] <TimToady> r: Method.^methods(:all).say

[15:15] <p6eval> rakudo dca0fa: OUTPUT«No such method 'gist' for invocant of type 'Sub'␤  in method gist at src/gen/CORE.setting:4429␤  in sub say at src/gen/CORE.setting:6802␤  in method say at src/gen/CORE.setting:700␤  in block <anon> at /tmp/S2TVD8PgLv:1␤␤»

[15:15] *** tokuhirom left
[15:16] <TimToady> that's what I think when you ask "Can methods have methods?"

[15:16] <TimToady> not, "Can methods contain method declarations?"

[15:17] <masak> huh. that never crossed my mind.

[15:17] <masak> well, if "everything is an object", then methods can have methods almost by definition :)

[15:17] <TimToady> maybe you have a lexical mind

[15:17] <masak> my mind sure doesn't feel too dynamic right now... :)

[15:18] <jnthn> Also, that error is due to a bootstrap leakage.

[15:19] * [Coke] wonders if sorear's finals are over. ;)

[15:19] <[Coke]> (what with all the commits)

[15:19] <[Coke]> sorear++

[15:21] <[Coke]> # 05/20/2012 - rakudo++ (22246); niecza (91.72%); pugs (34.8%)

[15:21] <[Coke]> "niecza",     20406,     7,   760,  1448, 22621, 24113

[15:21] <[Coke]> "pugs"  ,      7743,  1970,  2978,  1297, 13988, 23974

[15:21] <[Coke]> "rakudo",     22246,    30,   640,  1891, 24807, 24113

[15:21] <[Coke]> colomon, sorear: niecza is failing 7 tests atm. done from 30ish.

[15:22] <[Coke]> *down 

[15:23] <sjn> seen pmichaud 

[15:23] <aloha> pmichaud was last seen in #perl6 14 hours 5 mins ago saying "o/ sorear".

[15:25] <colomon> [Coke]: \o/  sorear++'s fixes, I presume.

[15:27] *** paul_tyler1 left
[15:27] <[Coke]> also made a little ground on passing more tests, but rakudo is still increasing.

[15:27] <[Coke]> pugs could use a little love. ;)

[15:30] *** colomon left
[15:31] *** birdwindupbird left
[15:32] <masak> wasn't it up to 40% at one point?

[15:37] <flussence> I spent a few hours travelling without net access over the weekend, so I made a thing while I was waiting: github.com/flussence/perl6-Version

[15:37] <flussence> (it doesn't currently do much because I'm really bad at writing grammar-related code)

[15:39] <sisar> o/

[15:41] <sisar> so here is the same code in perl6 and python: https://gist.github.com/2762953. While the perl6 the loop terminates, in pyhton it is an infinite loop. Though both behaviour have their reasons, I can't decide which is better.

[15:42] <estrai> sisar: is the typo there intentional?

[15:42] <sisar> why python's behaviour is logical, perl6's behaviour is trying to prevent one from potentially infinite loops

[15:42] <sisar> estrai: which one?

[15:42] <estrai> @rray

[15:43] <sisar> oh, no, not intentional. Just missed an 'a' !

[15:44] <sisar> so, perl6 makes a temporary copy of @array before it even starts looping. Why ?

[15:44] <kresike> bye all

[15:45] *** kresike left
[15:45] <flussence> it counts the array then iterates over it

[15:45] *** joeb_ joined
[15:45] <sisar> (typo fixed)

[15:45] <flussence> copying every array just to loop over it would be crazy inefficient, I think only PHP does that (and only because it uses copy on write)

[15:46] <sisar> flussence: what are merits of that, counting before iterating ?

[15:46] *** joeb_ left
[15:46] *** job_ joined
[15:47] <sisar> flussence: aye, making a copy would be super inefficient.

[15:47] *** am0c joined
[15:47] <flussence> if you have an SQL result pretending to be an array, you don't want it going off and calling a .count that does "select count(*)" on every iteration

[15:48] *** job_ left
[15:48] <sisar> flussence: i'm sorry i'm not familiar with SQL

[15:49] <geekosaur> don't worry about it.  point is that an array might not be an array, it might be a big chunk of code pretending to be an array

[15:49] <geekosaur> and you don't want to hammer that big chunk of code pointlessly

[15:49] <flussence> it'd be like calling strlen() in C on a really big string

[15:50] <sisar> geekosaur, flussence: would you say pyhton is wrong(ish) ?

[15:50] <sisar> *python

[15:51] <TimToady> the whole point of lazy lists is that you never ask for the size of something you're iterating over if you can help it

[15:52] <TimToady> and I think an array iterator should be able to track a growing array without snapshotting the old length

[15:54] <flussence> that makes sense, but I can't imagine it being fun to implement :)

[15:54] <geekosaur> sisar, I am not sure I'd say that; there are tradeoffs in language design and implementation

[15:55] *** kaare_ joined
[15:55] <sisar> TimToady: so it is a genuine bug? fwiw, both niecza and rakudo iterate only twice.

[15:56] <TimToady> I think so

[15:57] *** xinming joined
[15:59] *** thou left
[16:00] *** thou joined
[16:03] *** [hds] left
[16:04] <masak> r: my @a = < A B C >; @a = @a.map: { lc $_ }; .say for @a

[16:04] <p6eval> rakudo dca0fa: OUTPUT«a␤b␤c␤»

[16:04] <masak> r: my @a = < A B C >; @a = @a.map: { .lc }; .say for @a

[16:04] <p6eval> rakudo dca0fa: OUTPUT«a␤b␤c␤»

[16:04] <masak> r: my @a = < A B C >; @a = @a.map: &lc; .say for @a

[16:04] <p6eval> rakudo dca0fa: OUTPUT«a␤b␤c␤»

[16:05] <masak> r: my @a = < A B C >; @a = @a».lc; .say for @a

[16:05] <p6eval> rakudo dca0fa: OUTPUT«a␤b␤c␤»

[16:05] <masak> r: my @a = < A B C >; @a».=lc; .say for @a

[16:05] <p6eval> rakudo dca0fa: OUTPUT«a␤b␤c␤»

[16:06] <masak> r: my @a = < A B C >; @a = (.lc for @a); .say for @a

[16:06] <p6eval> rakudo dca0fa: OUTPUT«a␤b␤c␤»

[16:06] * sisar has reported rakudobug

[16:06] <masak> sisar++

[16:06] *** alim left
[16:07] *** icwiener left
[16:07] *** NamelessTee left
[16:08] <sisar> masak: how do i find out the version of my local niecza?

[16:08] <flussence> niecza -v

[16:09] <TimToady> p6: my @array = 1,2; for @array { .say; @array.plan: $_ + 2 }

[16:09] <p6eval> niecza v17-23-gfb775fb: OUTPUT«1␤2␤»

[16:09] <p6eval> ..rakudo dca0fa: OUTPUT«1␤No such method 'plan' for invocant of type 'Array'␤  in block <anon> at /tmp/9veQNyHOzw:1␤␤»

[16:09] <p6eval> ..pugs: OUTPUT«1␤*** No such method in class Array: "&plan"␤    at /tmp/eSBO0uvJ4n line 1, column 37-57␤»

[16:09] <sisar> flussence: That gives "This is Niecza Perl 6 (unknown)"

[16:09] <TimToady> nom doens't have .plan ?

[16:10] <flussence> that's weird. maybe it only works with a git tree or something

[16:10] <sisar> heck, i'll just report the SHA-1 of the last commit in my niecza clone

[16:11] *** NamelessTee joined
[16:12] *** japhb joined
[16:16] * sisar reported nieczabug

[16:16] <sisar> my nieczabug report is much better than rakudo's

[16:17] <sisar> bug reporting is an art :)

[16:17] <sisar> masak++ for his tireless bugreporting

[16:18] <masak> hey, thanks :)

[16:19] <sisar> masak: can I edit my rakudo bug report ?

[16:19] <sisar> github allows you to edit it

[16:20] <jnthn> TimToady: Not yet, afaik

[16:25] *** amkrankruleuen left
[16:37] <jnthn> It'd be nice of rakudobug reports had a code example...

[16:37] <jnthn> As well as "got" and "expected"

[16:38] *** daxim left
[16:39] *** colomon joined
[16:45] <sisar> jnthn: I know, and i'm sorry for the shabiness. Soon after filing my bug report i realised that it was a horrible bug report. Compare that to my niecza report, which is probably what you wanted: https://github.com/sorear/niecza/issues/124

[16:46] <sisar> but there is no way to edit the RT report, is there ?

[16:46] <jnthn> sisar: Can always just post a follow-up to it

[16:47] <sisar> jnthn: right . i'll do that.

[16:47] <sisar> jnthn++ teaching even the small thing :)

[16:47] <sisar> *things

[16:49] * jnthn suspects that given it's a lists issue, pmichaud++ will probably have something to say about it :)

[16:57] *** PacoAir joined
[16:58] *** zby_home_ joined
[16:59] *** domidumont left
[17:00] *** plobsing joined
[17:02] *** kaleem joined
[17:02] *** plobsing_ left
[17:04] *** libertyprime left
[17:05] *** erkan left
[17:05] *** s1n left
[17:10] *** dakkar left
[17:19] <[Coke]> n: (lc <A B C>).perl.say

[17:19] <p6eval> niecza v17-23-gfb775fb: OUTPUT«"a b c"␤»

[17:19] * [Coke] works on a reply to raiser.

[17:20] *** s1n joined
[17:23] <[Coke]> is there a shorter way to write: @a = @a>>.lc ?

[17:24] <TimToady> yeah, use » instead :P

[17:25] <TimToady> p6: my @a = <A B C>; @a».=lc; say @a

[17:25] <p6eval> pugs: OUTPUT«ABC␤»

[17:25] <p6eval> ..rakudo dca0fa, niecza v17-23-gfb775fb: OUTPUT«a b c␤»

[17:26] <TimToady> hmm, I wonder what pugs is thinking

[17:26] <[Coke]> huh. I wonder why my first attempt at that in rakudo's repl failed. 

[17:26] <[Coke]> timtoady++

[17:26] <TimToady> p6: my @a = <A B C>; @a>>.=lc; say @a

[17:26] <p6eval> pugs: OUTPUT«ABC␤»

[17:26] <p6eval> ..rakudo dca0fa, niecza v17-23-gfb775fb: OUTPUT«a b c␤»

[17:27] <TimToady> maybe you tried putting space into the postfix?

[17:27] *** slavik1 left
[17:28] <moritz> REPL+Unicode issue?

[17:29] <TimToady> not if he used >>

[17:30] <[Coke]> eh. works now. email sent. no worries. (that's the syntax I thought I tried to use, so I didn't even have to change my mind!)

[17:37] <Woodi> I have method !__parse_result() in parent class and now I want use it in subclass but do not want to make it public, just usable for subclasses. how I can do it ?

[17:37] *** kaleem left
[17:38] <masak> Woodi: there is no "just for subclasses" in Perl 6.

[17:38] <jnthn> Woodi: "trusts TheSubclass;" in the parent class, then fully qualify the call.

[17:38] <jnthn> Note that you have to predeclare the subclass.

[17:38] <[Coke]> jnthn++

[17:38] <masak> but a parent class mentioning a subclass feels odd.

[17:38] <jnthn> masak: Yes. :)

[17:39] <masak> it's O(subclasses), if nothing else.

[17:39] <Woodi> I can say it is secure :)

[17:39] <masak> also, you generally don't want a dependency in that direction.

[17:39] <jnthn> Well, this is the point where I start asking things like, "is inheritance the right thing here?" :)

[17:40] <Woodi> yes, it is natural in many cases

[17:40] <jnthn> masak: Well, the "protected" keyword in things like C#/Java gives you dependencies in that direction, without having to declare them upfront. I guess that's arguably worse. :)

[17:41] <Woodi> all that OO programming is just twiking and fixing and using methods from classes up in hierarchy...

[17:41] <Woodi> I feel like P6 classes are instantiated objects somehow...

[17:43] <Woodi> but big thanx jnthn++ for answer :) I tried notation for trust but missed allowance part

[17:48] <sorear> good * #perl6

[17:48] <sorear> masak! You live! :)

[17:49] <TimToady> or at least undies...

[17:55] *** PacoAir left
[17:56] *** PacoAir joined
[17:56] *** mucker joined
[17:57] <masak> sorear: I was away in .uk, and didn't have much energy for IRC...

[17:58] <masak> sorear: interesting direction you're planning to take Niecza.

[17:59] *** mucker left
[18:00] <sorear> Niecza used to have VM portability as a goal, but now I'm thinking I should cede that niche to Rakudo and focus on what I can do *without* VM portability

[18:00] *** fhelmberger left
[18:00] <sorear> two compilers trying to occupy the same niche is less than useful

[18:01] *** daxim joined
[18:02] <masak> agreed.

[18:02] <masak> which is why it's an interesting direction :)

[18:02] *** libertyprime joined
[18:03] <masak> libertyprime: ahoj.

[18:03] *** dukeleto joined
[18:03] <dukeleto> o/

[18:04] <[Coke]> masak, sorear: i missed what direction this is.

[18:04] <[Coke]> was it.. move more into C#?

[18:05] <sorear> yes

[18:05] <sorear> o/ dukeleto

[18:06] *** spider-mario joined
[18:06] <dukeleto> sorear: good localtime()

[18:06] <sorear> o/ spider-mario

[18:06] <spider-mario> \o

[18:07] *** fridim_ joined
[18:13] <TimToady> otoh, niecza already had an interesting direction in terms of trying to bootstrap a compiler in Perl 6, which rakudo is not trying to do (at least, not yet)

[18:14] <TimToady> eventually, I'd like to see your C# compiler actually written in the C# subset of Perl 6.  :)

[18:14] <jnthn> TimToady: How's that differ from Rakudo's compiler being written in the NQP subset of Perl 6? :)

[18:16] <TimToady> not that much different, but I'd rather think we're converging on eating our own dogfood than someone else's

[18:17] <jnthn> Ah, OK :)

[18:17] <TimToady> to the extent to which NQP is better for this than Perl 6 is, to that extent Perl 6 has not yet attained my long-term goal :)

[18:18] <TimToady> I recognize the need for scaffolding though

[18:20] <TimToady> I also recognize that my ideal Perl 6 is not something that is actually possible, and there will always be things that other languages (nqp included) are likely to be better at

[18:21] <TimToady> but at some point "close enough" becomes "close enough to pay the price for convergence"

[18:21] <TimToady> native types will help a lot there, when we get things ironed out a little better

[18:22] <jnthn> *nod*

[18:22] <jnthn> NQP will get native types in the near future.

[18:23] <jnthn> Well

[18:23] <jnthn> Natively typed lexicals

[18:23] <jnthn> It already has the attributes.

[18:24] *** pyrimidine left
[18:26] <TimToady> sorear: another approach would be to write a P6-to-C# translator, and write your compiler in a dialect that translates easily, much like the STD-to-p5 trick.

[18:27] <TimToady> with support for a restricte set of native types, say...

[18:27] <TimToady> *ted

[18:28] <TimToady> that can, of course, be done from the other end too, writing in C#, and then backfilling the P6 that could translate to that

[18:29] <dalek> nqp/qbootstrap: 56d136a | jnthn++ | src/QRegex/NFA.nqp:

[18:29] <dalek> nqp/qbootstrap: First crack at making LTM transitivity extend into protoregexes. Basically, just builds an alternation, as suggested by pmichaud++. Seems to help some with the NQP tests.

[18:29] <dalek> nqp/qbootstrap: review: https://github.com/perl6/nqp/commit/56d136a432

[18:29] <jnthn> pmichaud: ping

[18:29] *** cognominal_ left
[18:29] <TimToady> this might influence the subsequent design of the native type system, of course

[18:30] * TimToady considers it a feature that he does not always distinguish vision from wishful thinking... :)

[18:32] <sorear> TimToady: I thought about that approach, but thought it was too close to what Rakudo was already doing

[18:33] <jnthn> phenny: tell pmichaud 56d136a takes a crack at extending LTM transitivity into protoregexes. It adds time to build the NFA (a good bit for term), but OTOH seems that we trim a load more early. We'd probably do better if <ident> got an NFA - suggestions?

[18:33] <phenny> jnthn: I'll pass that on when pmichaud is around.

[18:34] * TimToady also wonders to what extent writing a Perl 6 compiler in C# will end up merely inventing another Perl 6 interpreter...

[18:35] <sorear> interpreter, compiler, there isn't much difference

[18:37] *** zby_home_ left
[18:38] *** dukeleto left
[18:39] *** [particle] left
[18:42] *** [particle] joined
[18:45] <dalek> roast: 8eec946 | (Kyle Hasselbacher)++ | S04-statements/for.t:

[18:45] <dalek> roast: [for.t] Test for RT 113026: array iterator does not track a growing array

[18:45] <dalek> roast: review: https://github.com/perl6/roast/commit/8eec946697

[18:51] <masak> an interpreter is a switch statement in a loop. :) a compiler feels like the result of applying caching techniques to an interpreter.

[18:55] *** araujo left
[19:02] *** raiph joined
[19:02] *** s1n left
[19:04] <masak> though that's a rather obtuse way of expressing that a compiler is a semantics-preserving transformation function between two languages.

[19:04] *** cognominal joined
[19:16] *** s1n joined
[19:17] *** japhb left
[19:18] *** bluescreen10 left
[19:20] *** kresike joined
[19:20] <kresike> evening

[19:22] *** alester joined
[19:23] <sorear> o/ kresike

[19:24] <kresike> sorear, o/

[19:30] *** havenn joined
[19:41] *** brrt joined
[19:43] <masak> [Coke]: oh sorry, I replied to Parrot Raiser's p6u message, but I must've forgotten to cc p6u.

[19:44] * masak doesn't like the new "reply" affordances of Gmail

[19:45] <TimToady>  /metoo

[19:46] <TimToady> and I wish there were an option to pull addresses out of a forwarded message as if it had been directly to the forwardee

[19:46] * benabik has no problem with gmail, but he just uses it as an IMAP server.

[19:47] *** tokuhirom joined
[19:57] <sorear> has google figured out a way to serve ads over IMAP?

[19:57] <Woodi> TimToady: you mentioned ideal Perl6 - maybe you have few ideas no one hear yet && you can && want to share ? :)

[20:00] <Khisanth> sorear: Y! does so I don't see why Google be able to if they want ...

[20:01] <tadzik> yay, I should be able to go to FPW :)

[20:01] <jnthn> yay :)

[20:01] <tadzik> the last exam is 28th of June

[20:02] * jnthn needs to sort out travel there...

[20:02] <tadzik> so I'll have to fly fast :)

[20:02] *** impious joined
[20:04] <tadzik> downside: they'll want me to make a Dancer talk :P

[20:04] <tadzik> seen eiru

[20:04] <aloha> eiru was last seen in  15481 days 20 hours ago .

[20:04] <tadzik> hrm

[20:04] <masak> eiro.

[20:04] <sorear> ohai, stalker

[20:04] <tadzik> right :)

[20:04] <tadzik> seen eiro

[20:04] <aloha> eiro was last seen in #perl6 11 days 23 hours ago joining the channel.

[20:04] <sorear> :)

[20:06] *** impious left
[20:06] *** DreamingInCode joined
[20:09] *** plobsing left
[20:10] <sorear> o/ DreamingInCode

[20:16] *** birdwindupbird joined
[20:21] *** sergot joined
[20:21] <sergot> hi !:)

[20:22] <sorear> o/ sergot

[20:23] <masak> sergocie! \o/

[20:23] <tadzik> \o/

[20:23] <sergot> \o/

[20:24] *** bruges joined
[20:25] <masak> pmichaud++ # p6u reply

[20:27] *** bruges_ left
[20:38] <cognominal> p6u?

[20:38] <geekosaur> perl6-users list

[20:38] <dalek> perl6-examples: 5da3bb3 | sergot++ | other/combinations.pl:

[20:38] <dalek> perl6-examples: [other/combinations.pl] POD added.

[20:38] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/5da3bb3815

[20:39] *** havenn left
[20:39] *** mdupont_ joined
[20:44] <dalek> roast: 295034d | (Kyle Hasselbacher)++ | S29-context/die.t:

[20:44] <dalek> roast: Updated test for RT 67374

[20:44] <dalek> roast: review: https://github.com/perl6/roast/commit/295034dc8e

[20:45] <dalek> perl6-examples: 497edda | sergot++ | template.pod:

[20:45] <dalek> perl6-examples: Please use this template when adding new examples.

[20:45] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/497eddac45

[20:46] <dalek> perl6-examples: d27e331 | sergot++ | template_pod:

[20:46] <dalek> perl6-examples: Err..

[20:46] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/d27e331cc2

[20:46] <sorear> Juerd: ping

[20:48] <dalek> perl6-examples: 605eee0 | sergot++ | template.pod:

[20:48] <dalek> perl6-examples: Forgot to delete first template.

[20:48] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/605eee04e8

[20:48] <TimToady> I think you meant p6c, but yes, pmichaud++

[20:50] <masak> pretty sure I meant p6u.

[20:50] <TimToady> if so, I ain't got it

[20:50] *** s1n left
[20:50] <TimToady> or my mailer classified it some other way

[20:51] <sorear> DreamingInCode++ on PM raises an interesting point

[20:51] *** araujo joined
[20:51] <sorear> cpan6.org is actively harmful to Perl 6's image and needs to be taken down

[20:52] <sorear> does anyone have current contact info for Mark Overmeer?

[20:52] <dalek> perl6-examples: 4b31bc8 | sergot++ | README:

[20:52] <dalek> perl6-examples: Please use POD.

[20:52] <dalek> perl6-examples: review: https://github.com/perl6/perl6-examples/commit/4b31bc8a63

[20:52] <sorear> the site says he's an active member of amsterdam.pm, which is why I ping Juerd

[20:52] *** araujo left
[20:53] <sorear> ISTR someone saying that he's not reachable by email from the old address

[20:53] <sorear> not certain if this is correct

[20:53] <diakopter> someone donated 30k€ to it!?!

[20:53] <sorear> even if it isn't, the Dutch personal site makes me nervous about my ability to communicate

[20:54] <tadzik> sorear: he was on GPW, I'll see if there's an email to him on the wobsite

[20:56] *** daxim left
[20:56] <diakopter> I wonder where the 30k€ went.

[20:58] *** araujo joined
[20:59] *** araujo left
[21:00] *** mikemol left
[21:04] *** s1n joined
[21:04] *** brrt left
[21:05] <sorear> DreamingInCode: come on in, the water's fine

[21:05] <diakopter> I don't understand https://github.com/perl6/roast/commit/8eec946697

[21:06] <sorear> diakopter: what about it don't you understand?

[21:07] <sorear> it looks like sisar wants index semantics for List iterators, rather than the current copy semantics

[21:07] <DreamingInCode> heh, apologies. Punjabii tandoor is best enjoyed away from expensive keyboards P:

[21:07] *** kaare_ left
[21:07] <masak> sorear: that's what I thought as well.

[21:07] *** leprevost joined
[21:08] <masak> sorear: index semantics will never work anyway for something like `for @a, @b`

[21:08] <masak> well, it could, perhaps, but it would be complex and probably violate someone's Least Surprise.

[21:08] <sorear> masak: I think that for @a, @b can be made to do something unsuprising

[21:08] *** tyatpi left
[21:08] <sisar> um, what are 'index' and 'copy' semantics ?

[21:09] *** havenn joined
[21:09] *** cognominal_ joined
[21:09] *** araujo joined
[21:09] *** birdwindupbird left
[21:09] <diakopter> I don't understand why the intended result should be 1 2 3 4 5 6 7 8 9 10 1 3 5 7 9 1 5 9 5 5

[21:10] *** skids left
[21:10] *** s1n left
[21:10] <DreamingInCode> anyhow, from the corporate "getting shit done" perspective, perl6 offers a pleasing siren song to those looking for a more futureproof toolbox than perl5 is prepared to offer. Unfortunately with the lack of a clear and authoritative perl 6 cpan presence, it becomes relegated to "someday" status

[21:11] <sorear> r: my @list = 1..10; my $index = 0; while ($index < @list) { push @list, @list[$index] if $index %% 2; $index++ } ; say @list

[21:11] <p6eval> rakudo dca0fa: OUTPUT«1 2 3 4 5 6 7 8 9 10 1 3 5 7 9 1 5 9 5 5␤»

[21:11] <DreamingInCode> certainly that's the case for my company anyway.

[21:11] <sorear> that's why, diakopter

[21:11] *** cognominal left
[21:11] *** buubot_backup left
[21:12] *** cognominal_ left
[21:12] * [Coke] doesn't see any send from pmichaud to p6u since may 8th.

[21:12] <diakopter> sorear: ok, thanks

[21:12] <sorear> I just googled 'punjabii tandoor' and got a bunch of places offering to sell it to me but nothing about what it *is*

[21:12] <sorear> I conjecture it may be a subconcept of 'food'

[21:13] <DreamingInCode> heh, it's a hole-in-the-wall indian place in mira mesa (San Diego)

[21:13] <[Coke]> try "tandoori chicken" as a more likely hit.

[21:13] *** cognominal joined
[21:13] <geekosaur> diakopter, every other from the original list ++ every other from that ++ every other from that, etc. until the additions no longer add enough for there to be an every other (hence "5 5" at the end)

[21:13] <[Coke]> not quite the same, but will give you a flavor (HA) about what the food DreamingInCode's place might be like.

[21:13] <sisar> sorear: Punjabi tandoor refers to Chicken dish originating from Punjab, India or Punjab, Pakistan

[21:14] <sisar> s/dish/preparation

[21:14] <[Coke]> rant: I can't have indian for dinner tonight!

[21:15] <sisar> [Coke]: your favorite Indian dish is ?

[21:15] <DreamingInCode> all of them?

[21:16] <sisar> :)

[21:16] <sisar> .ety tandoor

[21:16] <phenny> "1660s, from Turkish pronunciation of Pers. and Arabic tannur oven, portable furnace (see tandoori)." - etymonline.com

[21:16] <sisar> ^thats the etymology of tandoor

[21:17] <[Coke]> sisar; I like the lamb phaal, though it's painfully hot. many need to step down from the super hot version.

[21:17] <[Coke]> if I want something with great flavor but not as much heat, the korma is a good choice.

[21:18] <[Coke]> but mainly I like the buffet where I can do what DreamingInCode said. ;)

[21:18] <[Coke]> er, s/many/I may/

[21:19] <[Coke]> (phaal) First time I got "extra spicy" where I was SURE they were not holding back. ;)

[21:19] <DreamingInCode> lol, if only cpan6 was half as robust as this food-related conversation.

[21:20] <tadzik> patches welcome

[21:20] <[Coke]> phaal welcome.

[21:21] <DreamingInCode> would be happy to contribute, but I think it's more of a marketing problem

[21:21] *** spider-mario left
[21:22] *** fridim_ left
[21:23] *** NamelessTee left
[21:23] *** wooden left
[21:24] <DreamingInCode> Given that CPAN is the lifeblood of perl 5, In my opinion, cpan6.org's stunning lack of direction is actively damaging perl6's credibility.

[21:25] <masak> DreamingInCode: only if you think cpan6.org has anything to do with Perl 6.

[21:25] <[Coke]> DreamingInCode: see modules.perl6.org

[21:25] <diakopter> "CPAN6 is not even usable on the moment (as is Perl6)."

[21:25] <DreamingInCode> exactly

[21:26] <flussence> perl6 works fine

[21:26] *** s1n joined
[21:26] <flussence> cpan6 appears to be an attention-seeking domain squatter

[21:26] <tadzik> :)

[21:26] <masak> flussence: a bit more than that... but not much.

[21:26] <DreamingInCode> well, whoever, whatever the reason... it's the first place most people go when considering perl6 ( myself included )

[21:26] <masak> really?

[21:26] <masak> why?

[21:26] <diakopter> not just attention-seeking; it appears to have stolen 30k€

[21:26] <[Coke]> someone should write mark overmeer a nice note asking him to update that page and at least link to the official perl6 site (instead of the old tpf site.)

[21:27] <masak> aye.

[21:27] <flussence> wait, what?

[21:27] <diakopter> masak: that was one of the first places I found years ago

[21:27] <masak> :(

[21:27] <DreamingInCode> well, I can only speak for myself, but from the perspective of a company looking to get stuff done, CPAN is a godsent

[21:27] <diakopter> "the foundation Stichting NLnet contributes 30k€ to support the initial development of code and user community"

[21:27] <diakopter> with nothing to show for it

[21:28] <masak> "CPAN6" doesn't even make much sense as an acronym. neither does "6PAN", which I see sometimes.

[21:28] <masak> linguistically, it feels like "hm, CPAN did something right, let's copy the name".

[21:28] <masak> ...badly.

[21:28] <[Coke]> diakopter: that may be referring to nlnet's initial parrot support.

[21:28] <DreamingInCode> I don't suppose it matters what the domain is, only that it's the loudest voice in the room ( or on a google search at least )

[21:29] <[Coke]> DreamingInCode: what did you google for?

[21:29] <tadzik> I don't see how that's the loudtest voice in the room

[21:29] <[Coke]> not "perl6". 

[21:29] <DreamingInCode> been a while since I've dug into it... but would have been something to the effect of cpan perl 6

[21:30] <DreamingInCode> certainly I've not heard much commotion about something more authoritative

[21:30] <diakopter> http://nlnet.nl/project/cpan6/how.html

[21:30] <diakopter> [CPAN6 -- concluded on 2011/02]

[21:30] <diakopter> The NLnet Foundation supports Mark Overmeer to promote the design and to start implementing CPAN6 with 30,000 euro.

[21:30] <masak> wow.

[21:30] <DreamingInCode> a tidy sum

[21:31] <[Coke]> holy CRAP!

[21:31] <masak> well, he does know how to make a living, I'll give him that.

[21:31] <flussence> .oO( maybe I should start accepting funds for a php PECL6... )

[21:31] <diakopter> I wonder what "concluded on 2011/02" means.

[21:31] <masak> but CPAN6 isn't really targeted for Perl 6's needs, and never was.

[21:31] <sorear> how long can you live in .nl on 30k€?

[21:32] <DreamingInCode> to me, an authoritative and well marketed CPAN style archive hub (distributed or otherwise) is the field of dreams for perl6

[21:32] <DreamingInCode> If you build it, they will come

[21:32] <flussence> sorear: afaik, cost of living there is average for .eu

[21:32] <DreamingInCode> until then, for businesses at least, it's "someday"

[21:32] <diakopter> 2002-present, free-lancer

[21:32] <DreamingInCode> or worse: Ruby

[21:32] <diakopter> Currently a free-lancer working under the name MARKOV Solutions . My interests lie primarily in the area of the unusually complex software.

[21:33] <[Coke]> so, anyway, his email address is probably [email@hidden.address]
[21:33] <masak> DreamingInCode: I think any module repository for Perl 6 will have to evolve in a by-need/pain-driven manner.

[21:33] <flussence> does ruby use something besides ad-hoc github repos?

[21:33] <[Coke]> if anyone does email him, I encourage them to use the same tone they'd use in channel.

[21:33] <diakopter> [email@hidden.address] seems prominent on his business website

[21:33] <masak> 'night, #perl6

[21:33] <[Coke]> even better.

[21:33] <[Coke]> masak: WAIT!

[21:33] * masak waits

[21:34] <[Coke]> masak: buenos suenos!

[21:34] *** tyatpi joined
[21:34] <flussence> great, now you've got him stuck in a busy loop.

[21:34] <[Coke]> . o O (stupid ascii keyboard)

[21:34] <masak> [Coke]: gracias. buenas noches.

[21:34] <sergot> good night! o/

[21:34] *** sergot left
[21:34] *** [particle]1 joined
[21:35] <masak> 'branoc, sergocie who logs out too fast.

[21:35] <masak> 'n

[21:35] <tadzik> ;)

[21:35] *** s1n left
[21:35] <tadzik> k'night

[21:35] *** wooden joined
[21:35] *** wooden left
[21:35] *** wooden joined
[21:36] *** lestrrat left
[21:36] <DreamingInCode> adios masak

[21:37] *** lestrrat joined
[21:37] *** [particle] left
[21:37] *** buubot_backup joined
[21:42] * [Coke] decommutes

[21:44] <kresike> good night everyone

[21:44] *** kresike left
[21:47] *** sisar left
[21:48] <araujo> anybody knows a good link for different char replacements in a string? ... I am interested to know about a way to replace different patterns at once with a value for a single string

[21:49] * jnthn takes an early night 

[21:49] <jnthn> o/

[21:49] <tadzik> araujo: trans is the way to go I guess

[21:50] <tadzik> r: say "foobar".trans(<a b c> => <A B C>)

[21:50] <p6eval> rakudo dca0fa: OUTPUT«fooBAr␤»

[21:50] <tadzik> ha, I even know how to use this :)

[21:50] *** s1n joined
[21:52] <araujo> tadzik, aah, already knew trans, though I was wondering if that was the preferred way , .... I was looking more for something like s/<pattern>/<value>/ , ...

[21:52] <araujo> mm...

[21:53] * tadzik sleeps too

[21:53] <tadzik> g'night

[21:58] *** PacoAir left
[22:15] *** snearch left
[22:15] <diakopter> niecza: package foo { package bar { say foo } }

[22:15] <p6eval> niecza v17-23-gfb775fb: OUTPUT«Unhandled exception: System.NullReferenceException: Object reference not set to an instance of an object␤  at Niecza.STable.FindMethod (System.String name) [0x00000] in <filename unknown>:0 ␤  at Niecza.P6any.InvokeMethod (Niecza.Frame caller, System.Strin…

[22:15] <diakopter> niecza: package foo { say foo }

[22:15] <p6eval> niecza v17-23-gfb775fb: OUTPUT«Unhandled exception: System.NullReferenceException: Object reference not set to an instance of an object␤  at Niecza.STable.FindMethod (System.String name) [0x00000] in <filename unknown>:0 ␤  at Niecza.P6any.InvokeMethod (Niecza.Frame caller, System.Strin…

[22:16] <diakopter> r: package foo { say foo }

[22:16] <p6eval> rakudo dca0fa: OUTPUT«foo()␤»

[22:16] <sorear> interstring

[22:19] <diakopter> n: say my $.bar

[22:19] <p6eval> niecza v17-23-gfb775fb: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unable to resolve method add_method in class Any at /tmp/GFZUGw9w1N line 1 (EOF):␤------> [32msay my $.bar[33m⏏[31m<EOL>[0m␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1364 (di…

[22:23] <diakopter> r: say my $.bar

[22:23] <p6eval> rakudo dca0fa: OUTPUT«Useless declaration of a has-scoped method in mainline␤Any()␤»

[22:24] *** wolfman2000 joined
[22:31] <diakopter> r: say Rat.new(Inf,0)

[22:31] <p6eval> rakudo dca0fa: OUTPUT«Nominal type check failed for parameter '$nu'; expected Int but got Num instead␤  in method new at src/gen/CORE.setting:7441␤  in block <anon> at /tmp/sIwTUnJEcN:1␤␤»

[22:31] <diakopter> n: say Rat.new(Inf,0)

[22:31] <p6eval> niecza v17-23-gfb775fb: OUTPUT«Inf␤»

[22:36] *** Chillance left
[22:37] <diakopter> r: for my $/ ();

[22:37] <p6eval> rakudo dca0fa: OUTPUT«===SORRY!===␤Contextual %*PARAM_INFO not found␤»

[22:37] <diakopter> LTA error

[22:40] <diakopter> r: for our $:: ();

[22:40] <p6eval> rakudo dca0fa: OUTPUT«===SORRY!===␤ResizablePMCArray: index out of bounds!␤»

[22:40] <diakopter> LTA error

[22:40] *** skids joined
[22:41] <diakopter> phenny: tell masak see the r: LTA errors in irclogs

[22:41] <phenny> diakopter: I'll pass that on when masak is around.

[22:41] <cognominal> p6:  'abc' ~~ m/(a) $<x>=[ $<b>=b  c ]/; say $/.caps.list.values>>.keys;

[22:41] <p6eval> rakudo dca0fa: OUTPUT«0 b x␤»

[22:41] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20120203/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** Can't locate P…

[22:41] <p6eval> ..niecza v17-23-gfb775fb: OUTPUT«Capture b starts at 1 overlaps x at 3␤  at /home/p6eval/niecza/lib/CORE.setting line 1239 (warn @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2749 (Match.caps @ 21) ␤  at /tmp/DVaE3hcSN4 line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setti…

[22:43] *** rsimoes left
[22:43] <cognominal> I would have expected "0 b\n"

[22:43] <cognominal> I mean "0 x\n"

[22:45] <cognominal> back reading S05

[22:46] <cognominal> p6: 'abc' ~~ m/(a) $<x>=( $<b>=b  c )/;  say $/.perl.list.values>>.keys;

[22:46] <p6eval> pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20120203/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** Can't locate P…

[22:46] <p6eval> ..rakudo dca0fa, niecza v17-23-gfb775fb: OUTPUT«0␤»

[22:48] <diakopter> n: for my $|{ say 3 } { say 4 } # sorear wth am I doing here

[22:48] <p6eval> niecza v17-23-gfb775fb: OUTPUT«4␤»

[22:48] <cognominal> p6: 'abc' ~~ m/(a) $<x>=( $<b>=b  c )/;  say $/.caps.list.values>>.keys;

[22:48] <p6eval> niecza v17-23-gfb775fb: OUTPUT«0 0␤»

[22:48] <p6eval> ..pugs: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20120203/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** Can't locate P…

[22:48] <p6eval> ..rakudo dca0fa: OUTPUT«0 x␤»

[22:49] <cognominal> ok, [] just groups, it does not introduce a new capture. Makes sense.

[22:50] <diakopter> n: for my $|||{} { say 4 }

[22:50] <p6eval> niecza v17-23-gfb775fb: OUTPUT«4␤»

[22:54] *** ab5tract left
[22:54] *** thou left
[23:06] *** lutok joined
[23:10] *** lutok left
[23:12] *** sivoais left
[23:12] *** sivoais joined
[23:14] *** cognominal_ joined
[23:17] <Juerd> sorear: markov on irc.perl.org

[23:17] *** tyatpi left
[23:17] <Juerd> sorear: Also, good luck.

[23:18] *** cognominal left
[23:23] *** [particle]1 left
[23:23] *** cognominal joined
[23:23] *** Chillance joined
[23:23] <sorear> is anyone working on a letter yet?

[23:23] *** [particle] joined
[23:26] *** cognominal_ left
[23:32] <dalek> tablets: 76e45c4 | (Herbert Breunung)++ | docs/index.txt:

[23:32] <dalek> tablets: update and fix TOC (index)

[23:32] <dalek> tablets: review: https://github.com/perl6/tablets/commit/76e45c48a1

[23:33] *** lichtkind joined
[23:37] <diakopter> n: say():[]

[23:37] <p6eval> niecza v17-23-gfb775fb: OUTPUT«Unhandled exception: Excess arguments to gistcat, unused named ␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (gistcat @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1249 (say @ 4) ␤  at /tmp/R4gB6677Xj line 1 (mainline @ 2) ␤  at /home/p6eval/nie…

[23:39] <diakopter> n: say(3;)

[23:39] <p6eval> niecza v17-23-gfb775fb: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Slicel lists are NYI at /tmp/tRgIME6mCF line 1 (EOF):␤------> [32msay(3;)[33m⏏[31m<EOL>[0m␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1364 (die @ 3) ␤  at /home/p6eval/niecza/…

[23:39] <diakopter> hm

[23:41] *** plobsing joined
[23:47] *** whiteknight joined
[23:47] *** whiteknight is now known as Guest28222

[23:52] *** leprevost left
