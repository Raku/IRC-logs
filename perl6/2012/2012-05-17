[00:03] *** flussence left
[00:07] *** ispeak left
[00:09] *** lestrrat left
[00:10] *** lestrrat joined
[00:20] *** fgomez left
[00:20] *** fgomez joined
[00:22] *** flussence joined
[00:24] *** sftp left
[00:35] *** tokuhirom joined
[00:36] *** leprevost joined
[00:40] *** tokuhirom left
[00:46] *** fgomez left
[00:49] *** fibo left
[00:50] *** benabik joined
[00:59] *** fgomez joined
[01:04] *** sftp joined
[01:11] *** s1n left
[01:11] *** scott_ joined
[01:12] *** scott_ is now known as Guest56888

[01:14] *** shinobicl joined
[01:27] *** vinian joined
[01:31] *** Guest1540 left
[01:36] *** tokuhirom joined
[01:40] *** tokuhirom left
[01:49] *** s1n joined
[01:52] *** mattp_ left
[01:53] *** mattp_ joined
[01:53] *** s1n left
[01:59] *** sisar left
[02:00] *** shinobicl left
[02:05] *** fgomez left
[02:09] *** s1n joined
[02:22] *** colomon joined
[02:23] *** tokuhirom joined
[02:27] *** orafu left
[02:27] *** orafu joined
[02:31] *** fgomez joined
[02:36] *** skids joined
[02:53] *** tokuhirom left
[02:54] *** tokuhirom joined
[02:58] *** tokuhirom left
[03:07] *** sergot joined
[03:07] <sergot> hi! :)

[03:07] <sergot> o/

[03:10] *** Chillance left
[03:14] *** sergot left
[03:49] *** wolfman2000 left
[03:51] *** Entonian joined
[03:54] *** Entonian left
[04:01] *** localhost joined
[04:23] *** thou joined
[04:27] *** shinobicl joined
[04:36] *** shinobicl left
[04:36] *** kaare_ joined
[04:39] *** leprevost left
[04:39] *** sergot joined
[04:46] *** orphu joined
[05:12] *** xinming joined
[05:20] *** birdwindupbird joined
[05:47] *** kaleem joined
[05:53] *** cognominal left
[05:59] <tadzik> 'morning

[06:08] <sorear> o/

[06:11] <tadzik> hello sorear 

[06:20] *** _sri left
[06:21] *** _sri joined
[06:29] *** sergot left
[06:30] *** mucker joined
[06:31] *** sergot joined
[06:43] *** alim joined
[06:50] *** NamelessTee joined
[06:52] *** b1rkh0ff joined
[07:00] *** dalek left
[07:03] *** dalek joined
[07:03] *** ChanServ sets mode: +v dalek

[07:03] *** lestrrat left
[07:03] <sorear> n: my $x = Int ( 3 / 2); say $x;

[07:04] <sorear> p6eval?

[07:04] <p6eval> niecza v17-4-ge5b869e: OUTPUT«(timeout)»

[07:04] <sorear> n: my $x = Int ( 3 / 2); say $x;

[07:04] <p6eval> niecza v17-4-ge5b869e: OUTPUT«Rebuild in progress␤»

[07:04] <sorear> what.

[07:04] *** lestrrat joined
[07:09] *** dalek left
[07:10] *** dalek joined
[07:10] *** ChanServ sets mode: +v dalek

[07:10] *** thou left
[07:11] *** alim left
[07:14] *** alvis` joined
[07:15] *** kresike joined
[07:16] *** alvis left
[07:20] *** Tedd1 left
[07:22] *** DarthGandalf left
[07:28] *** sisar joined
[07:30] *** alim joined
[07:53] *** dalek left
[07:55] *** dalek joined
[07:55] *** ChanServ sets mode: +v dalek

[07:58] *** goraki joined
[08:00] *** Util left
[08:02] *** mucker left
[08:06] *** Util joined
[08:10] <diakopter> wow, quiet evening here

[08:10] <goraki> I'm still waking up.

[08:11] <diakopter> I woke up 17 hours ago

[08:11] <sergot> ;)

[08:14] <goraki> diakopter: yeah, but it *is* the morning here.

[08:14] <diakopter> Europe?

[08:14] <goraki> yes.

[08:15] <bonsaikitten> what a strange idea

[08:15] <diakopter> ...

[08:15] <goraki> timezones?

[08:20] <jnthn> good morning :)

[08:20] <diakopter> ohy

[08:20] <sergot> jnthn: morning! :)

[08:21] <jnthn> o/ sergot 

[08:21] <goraki> mornings.

[08:21] *** alim left
[08:25] <tadzik> hello

[08:26] *** mucker joined
[08:26] *** mucker left
[08:27] *** rgrau joined
[08:29] *** icwiener joined
[08:32] *** mucker joined
[08:32] *** mucker left
[08:38] *** mucker joined
[08:38] *** mucker left
[08:44] *** mucker joined
[08:44] *** mucker left
[08:45] <sergot> tadzik: o/

[08:46] *** Tedd1 joined
[08:46] <masak> good antenoon, #perl6

[08:49] *** mucker joined
[08:49] *** mucker left
[08:50] *** dakkar joined
[08:50] *** icwiener left
[08:50] *** icwiener joined
[08:52] <goraki> good

[08:52] <goraki> good morning to you.

[08:53] <tadzik> \o

[08:54] *** mucker joined
[09:03] *** DarthGandalf joined
[09:06] *** gee joined
[09:06] <moritz> \o

[09:07] <tadzik> it's release day \o/

[09:08] <mikec_> ooh

[09:08] <masak> do we know more about pmichaud's commits?

[09:11] *** alim joined
[09:12] <tadzik> moritz | when I save a .t file and immediately after that I run fudge, the test file is gone from the disc

[09:13] <tadzik> moritz: that's vim's fault, I've had the same thing on my old hdd

[09:13] <tadzik> masak: I don't

[09:17] *** gee left
[09:17] *** mucker left
[09:17] <masak> mistab?

[09:17] <tadzik> nope

[09:17] <masak> oh, you don't know more about pmichaud's commit.

[09:17] <tadzik> ywis

[09:17] <masak> well, then we just sit tight, I guess.

[09:18] *** mucker joined
[09:18] *** mucker left
[09:24] *** mucker joined
[09:29] *** mucker left
[09:31] <dalek> rakudo/method-not-found: 47497c4 | moritz++ | src/core/Exception.pm:

[09:31] <dalek> rakudo/method-not-found: fix control exception catcher

[09:31] <dalek> rakudo/method-not-found: review: https://github.com/rakudo/rakudo/commit/47497c46e0

[09:33] *** mucker joined
[09:37] <pmichaud> good morning, #perl6

[09:38] <jnthn> pmichaud: Whoa...early morning there :)

[09:38] <pmichaud> yes... something came up last night so mark_commit is an early-morning job now :)

[09:39] <jnthn> \o/

[09:39] * moritz waits with the branch merge until after the release

[09:39] <jnthn> moritz: wtf

[09:39] <jnthn> er

[09:39] <jnthn> moritz: wfm

[09:40] <jnthn> ...oops. :)

[09:40] * jnthn drinks more coffee and tries to feel awake

[09:40] <moritz> :-)

[09:45] *** mucker left
[09:46] *** mucker joined
[09:51] *** REPLeffect left
[09:52] <tadzik> hello pmichaud 

[09:53] * masak is curious about what exactly mark_commit is...

[09:54] <masak> jnthn: could you explain? I don't want to disturb pmichaud while he implements it :)

[09:54] <pmichaud> mark_commit is the opcode that handles ratcheting

[09:54] <masak> ok, gotcha.

[09:55] <pmichaud> essentially, it has to throw away backtracking state but preserve captures

[09:55] <masak> right.

[09:55] <masak> and those are generally slightly coupled, so the challenge is to decouple them some.

[09:57] <pmichaud> right.  As I've been working on it and thinking on it heavily the past couple of days, I'm a little surprised it's the ratcheting that is causing issues.  usually it's the non-ratcheting case that is problematic.

[09:58] <masak> yeah.

[09:59] * masak remembers the headache of *finally* understanding and implementing backtracking and quantifiers for GGE... about five times :P

[09:59] <jnthn> pmichaud: https://github.com/perl6/nqp/commit/87bb1c3b6e199b38a4ccaa209e840440307849fd

[09:59] <jnthn> pmichaud: You may want to revert that commit before solving things the "proper way" :)

[10:00] *** jferrero joined
[10:01] <pmichaud> jnthn: thanks, you're correct

[10:03] <tadzik> and I wonder if I want to do something parsing related for my engineer degree

[10:04] *** REPLeffect joined
[10:05] <masak> sounds like great fun.

[10:05] *** sergot left
[10:07] <pmichaud> okay, in QRegex the relevant code is "regex_commit"

[10:07] <pmichaud> ....which I never finished.  :-(

[10:07] <tadzik> yeah, I'm quite sure I don't like any of the predefined topics, so I must figure out some great fun and a not bad mentor

[10:10] * masak .oO( ever tried to put a mentor in a bottle of Diet Coke? ) :P

[10:10] <pmichaud> I think that causes the mentor to spew.

[10:10] *** sergot joined
[10:10] <masak> well, some kind of reaction is assured.

[10:10] <pmichaud> it's much easier to get a Diet Coke into a mentor than vice-versa, though.  :)

[10:11] <tadzik> ;)

[10:13] *** Guest56888 left
[10:20] *** araujo left
[10:21] *** b1rkh0ff left
[10:22] *** mtk left
[10:26] *** sergot left
[10:34] *** am0c joined
[10:34] *** b1rkh0ff joined
[10:37] *** araujo joined
[10:39] *** mucker left
[10:40] *** vinian left
[10:44] <moritz> jnthn: S11 says "Every C<UNIT> gets a lexically scoped C<EXPORT> package automatically.

[10:44] <moritz> "

[10:45] <moritz> jnthn: but we give it an our-scoped EXPORT package, so that it can be accessed from the outside

[10:45] <moritz> jnthn: should I change the spec? or is our implementation just a shortcut?

[10:47] <moritz> another weird thing:

[10:48] <moritz> Any C<proto> declaration that is not declared C<my> is exported by default.

[10:48] <moritz> but 'my' is usually the default

[10:48] <jnthn> moritz: Huh?

[10:48] <jnthn> moritz: Our UNIT::EXPORT is lexical.

[10:48] <jnthn> I'm sure it is...

[10:49] <moritz> so 'my proto' usually behaves just the same as 'proto', except when exporting is considered?

[10:49] <moritz> jnthn: oh, I might be wrong here

[10:49] <jnthn> moritz: proto defaults to "my" too, since it's a sub

[10:50] <moritz> yes that's the odd thing about that statement

[10:50] <jnthn> (methods aside, which default to has)

[10:50] <jnthn> Yeah

[10:50] <jnthn> S11 has a few dubious parts ;)

[10:50] <jnthn> That part feels like it was written before we changed subs to be lexically scoped by default.

[10:51] <jnthn> I mean, we can detect explicit "my" and export it but...it feels weird.

[11:11] *** JimmyZ_ joined
[11:28] *** JimmyZ_ left
[11:30] *** JimmyZ_ joined
[11:31] *** benabik left
[11:32] *** benabik joined
[11:33] <Woodi> hallo

[11:34] <Woodi> I got that now .get on socket strips last \n but not \r

[11:34] <Woodi> it is intentional or should I check eg. on Linux ?

[11:34] *** benabik left
[11:35] <moritz> it's not intentional, I think

[11:35] <moritz> but I don't know how it is supposed to work

[11:35] <moritz> ie on which level the \r\n gets transformed to \n

[11:35] <masak> should it strip things at all?

[11:35] <masak> .get sounds fairly low-level

[11:35] <moritz> .get is what gives you a line

[11:36] <moritz> and autochomp is the default

[11:36] <Woodi> it removed both in November I think

[11:43] *** jaldhar joined
[11:44] *** spider-mario joined
[11:47] <Woodi> moritz: I think that it is better that send/get use \r\n form becouse in net protocols OS related fixes can not be right thing to do...

[11:49] *** JimmyZ_ left
[11:50] *** brrt joined
[11:50] *** JimmyZ_ joined
[11:51] *** JimmyZ_ left
[11:56] *** JimmyZ_ joined
[11:57] <tadzik> maybe it wants a named param, (:$separator = "\n") or so

[11:58] <tadzik> something equivalent to $/

[12:02] * Woodi hides in coffee making place...

[12:02] *** JimmyZ_ left
[12:02] <masak> a... coffee grinder?

[12:03] <pmichaud> a... coffee brewer?  Sounds hot.

[12:03] <mikec_> dangerous

[12:03] *** bluescreen10 joined
[12:04] *** JimmyZ_ joined
[12:04] *** JimmyZ_ left
[12:05] *** JimmyZ_ joined
[12:09] *** JimmyZ_ is now known as JimmyZ

[12:10] *** bluescreen100 joined
[12:13] * Woodi so far use bialetti.com tool :)

[12:13] <pmichaud> okay, I have the new regex_commit working in nqp... spectesting rakudo now

[12:13] <masak> \o/

[12:13] <tadzik> hurra!

[12:14] <jnthn> pmichaud: yay! :)

[12:14] * jnthn hopes it Fixes Some Stuff :)

[12:15] <pmichaud> http://gist.github.com/2718518  # some stuff fixed -- from RT #107254

[12:15] <masak> we could host an RT queue party! :D

[12:15] <jnthn> \o/

[12:15] <jnthn> pmichaud++

[12:15] *** benabik joined
[12:16] <jnthn> I'll probably pull this into qbootstrap later today and see how far it helps there.

[12:16] <pmichaud> this still doesn't have transitive LTM yet

[12:16] <pmichaud> I'm not likely to get that before today's release.

[12:16] <jnthn> Yes, that's the other thing qbootstrap needs.

[12:16] <pmichaud> but I'm not as concerned about that from a release perspective -- it's not really a user-facing bug like #107254 is.

[12:17] <jnthn> Right.

[12:17] <pmichaud> http://gist.github.com/2718535   # also from RT #107254

[12:17] <pmichaud> (formerly RT #112148)

[12:19] <pmichaud> all spectests pass in rakudo

[12:19] <pmichaud> looks like it's time to commit and push :)

[12:21] <Woodi> pmichaud: from where map gets $_ in last gist ? it to functional for my mind yet...

[12:22] <pmichaud> Woodi: you mean in the 2718518 gist?

[12:22] <Woodi> yes

[12:22] <Woodi> and what $match realy is ? list ?

[12:22] <pmichaud> Woodi: from ($match, $match<w1>, $match<w2>, $match<w3>)

[12:23] <pmichaud> $_ is set to each of those values one at a time

[12:23] <masak> r: .say for map { $_ * 10 }, <1 2 3 4>

[12:23] <p6eval> rakudo b390e8: OUTPUT«10␤20␤30␤40␤»

[12:23] <masak> Woodi: ^^

[12:23] <pmichaud> $match is a Match object -- it contains the result of the match.

[12:24] <dalek> nqp: 67c15eb | pmichaud++ | t/qregex/rx_captures:

[12:24] <dalek> nqp: Add some tests for RT #107254.

[12:24] <dalek> nqp: review: https://github.com/perl6/nqp/commit/67c15ebc79

[12:24] <dalek> nqp: 799f465 | pmichaud++ | src/ (2 files):

[12:24] <dalek> nqp: Revert 87bb1c to re-implement ratchet/capture semantics in regex_commit.

[12:24] <dalek> nqp: review: https://github.com/perl6/nqp/commit/799f465d0c

[12:24] <dalek> nqp: 6f6555f | pmichaud++ | src/ops/nqp.ops:

[12:24] <dalek> nqp: Documentation fix.

[12:24] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6f6555f178

[12:24] <dalek> nqp: 485d4f2 | pmichaud++ | src/ (2 files):

[12:24] <dalek> nqp: Convert QAST::Compiler.regex_commit to use opcode form.

[12:24] <dalek> nqp: review: https://github.com/perl6/nqp/commit/485d4f2d25

[12:24] <dalek> nqp: 215243f | pmichaud++ | src/ops/nqp.ops:

[12:24] <masak> r: .say for (1, 2, 3, 4).map({$_ * 10})

[12:24] <dalek> nqp: Update nqp_rxcommit to preserve captures at point of commit.

[12:24] <dalek> nqp: review: https://github.com/perl6/nqp/commit/215243f822

[12:24] <p6eval> rakudo b390e8: OUTPUT«10␤20␤30␤40␤»

[12:24] <pmichaud> r: say (1,2,3,4).map({$_ * 10})

[12:24] <p6eval> rakudo b390e8: OUTPUT«10 20 30 40␤»

[12:24] <pmichaud> (more like the gist example)

[12:25] <pmichaud> or even

[12:25] <pmichaud> r: say (1,2,3,4).map({$_ * 10}).join(',')

[12:25] <p6eval> rakudo b390e8: OUTPUT«10,20,30,40␤»

[12:25] <Woodi> it looks there is no order in Perl6, things works from left to right and in other directions too :)

[12:25] <pmichaud> there's more than one way to order it, yes.  :)

[12:25] <masak> Woodi: the idea is that it's up to you, the programmer, to tell the story in an order that makes sense.

[12:26] <pmichaud> sometimes "subject verb" makes the most sense, sometimes "verb subject" makes more sense.  Perl 6 allows both.  :-)

[12:27] <moritz> \o/ commits

[12:27] <masak> in story-telling around the camp fire, it seems that there's some use to end-loading sentences for suspense. in programming, suspense isn't often what you want to achieve, and up-front details are preferable.

[12:27] <masak> hence for example .subst(:g, q["], q[']) from yesterday.

[12:27] <jnthn> .oO( Lightning talk: writing Perl 6 like Yoda would )

[12:27] *** REPLeffect left
[12:27] *** bluescreen__ joined
[12:28] <masak> jnthn: many ways in Perl 6 to write things, there are!

[12:28] *** bluescreen100 left
[12:28] *** bluescreen10 left
[12:28] *** bluescreen__ left
[12:28] *** bluescreen10 joined
[12:29] <tadzik> that's an awesome idea :)

[12:29] <Woodi> I was probably parsing it as method call chain but was trying to apply some fp becouse of map...

[12:29] <pmichaud> nobody's bumped NQP_REVISION to include 4.4.0 yet?  

[12:29] <pmichaud> well, it is a method call chain :-)

[12:29] <masak> Woodi: see also ==> and <==

[12:29] <pmichaud> (10,20,30,40) is a list

[12:29] <pmichaud> .map({"$_"})  is a method on that list, producing a new list

[12:29] <jnthn> r: <all the things> ==> say

[12:29] <p6eval> rakudo b390e8: OUTPUT«all the things␤»

[12:29] <jnthn> ;)

[12:30] <masak> r: (1, 2, 3, 4) ==> map({ $_ * 10 }) ==> say

[12:30] <p6eval> rakudo b390e8: OUTPUT«10 20 30 40␤»

[12:30] <moritz> r: say <== <all the things>

[12:30] <p6eval> rakudo b390e8: OUTPUT«== <all the things␤»

[12:30] <masak> r: say <== map({ $_ * 10 }) <== (1, 2, 3, 4)

[12:30] <p6eval> rakudo b390e8: OUTPUT«===SORRY!===␤Preceding context expects a term, but found infix <== instead at line 1, near " map({ $_ "␤»

[12:30] * pmichaud bumps NQP_REVISION, respectests

[12:30] <masak> huh!

[12:30] <jnthn> r: say() <== <all the things>

[12:30] <p6eval> rakudo b390e8: OUTPUT«all the things␤»

[12:30] <masak> r: say() <== map({ $_ * 10 }) <== (1, 2, 3, 4)

[12:30] <p6eval> rakudo b390e8: OUTPUT«10 20 30 40␤»

[12:30] <masak> :)

[12:31] <masak> why did moritz' `say <== <all the things>

[12:31] <moritz> masak: LTM

[12:31] <masak> ` work, but not my `say <== map({ $_ * 10 }) <== (1, 2, 3, 4)`?

[12:31] <jnthn> masak: Parsed as a qouting construct.

[12:31] <jnthn> masak: It had a closing >

[12:31] <moritz> <all the things>   is a longer match than <==

[12:31] <jnthn> masak: Yours didn't

[12:31] <masak> hrm :)

[12:32] <moritz> r: say() <== ( (1, 2, 3, 4) ==> map({$_ * 10}) )

[12:32] <p6eval> rakudo b390e8: OUTPUT«10 20 30 40␤»

[12:32] <masak> r: say() <== (1, 2, 3, 4) ==> map({$_ * 10})

[12:32] <jnthn> WAT? :)

[12:32] <p6eval> rakudo b390e8: OUTPUT«10 20 30 40␤»

[12:32] <masak> :P

[12:32] <moritz> Perl 6: sending your data around in zigzaggs :-)

[12:32] <timotimo> a parrot that flies like a rabbit ...

[12:33] <pmichaud> You are in a maze of twisty feed operators, all different.

[12:33] <masak> run away! run away!

[12:34] <colomon> you have been eaten by a grue

[12:36] <moritz> in sovjet russia, you eat the grue!

[12:38] <masak> no no, that's not how you do a Soviet Russia joke... :)

[12:38] *** JimmyZ left
[12:39] *** JimmyZ joined
[12:39] <colomon> in Soviet Russia, the joke does you!

[12:39] <masak> :P

[12:40] * colomon has a terrible urge to abandon all the things he should be doing and hack on ABC instead

[12:40] *** REPLeffect joined
[12:45] <tadzik> in jokes, you do soviet russia?

[12:47] <masak> ...and here's one at least two steps removed from the proper form :)

[12:47] *** JimmyZ left
[12:49] <tadzik> two levenshtein steps? :)

[12:50] <dalek> rakudo/nom: d438760 | pmichaud++ | tools/build/NQP_REVISION:

[12:50] <dalek> rakudo/nom: Bump NQP_REVISION to get regex fixes for RT #107254.

[12:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d438760742

[12:50] <masak> tadzik: taking the appropriate thing as a unit of change, yes.

[12:51] <moritz> a tiny step for a man, but a big step for levensthein!

[12:51] <pmichaud> tadzik: okay, I'm going to look briefly at #111286, but the main patch I wanted to see done is now in.

[12:53] <masak> <TimToady> maybe we should rename it to "promise" or some such

[12:53] <masak> suggest "DEFER"

[12:53] <tadzik> sounds good

[12:53] <tadzik> pmichaud: take your time, I won't start releasing til I'm back from work anyway

[12:53] <moritz> +1

[12:53] <moritz> or LATER :-)

[12:53] <tadzik> so in about 3 hours

[12:54] <pmichaud> tadzik: perfect, works for me.  Apologies for causing the delay.

[12:54] <jnthn> Do we allow computing the thing in parallel, on another thread?

[12:54] <jnthn> Then it's basically a way of doing futures.

[12:54] <tadzik> pmichaud: you're not causing the delay :)

[12:55] <moritz> pmichaud++ # mark_commit fix

[12:55] <masak> jnthn: I thought it wasn't a question of that, but of a by-need kind of semantics.

[12:55] <masak> moritz: what I like about DEFER is that it's a transitive verb and so the block that comes after naturally becomes its direct object.

[12:56] *** derrazo joined
[12:57] <moritz> masak: I like it too. And I wasn't quite serious with LATER

[12:57] <lumi_> "SOON"

[12:57] <moritz> "later" is too vague

[12:57] <jnthn> masak: True. It's two different semantics really.

[12:57] *** PacoAir joined
[12:57] <jnthn> masak: Probably futures want something else.

[12:58] <moritz> AT-YOUR-CONVENIENCE { do costly calculation }

[12:58] <tadzik> lumi_: :D

[12:58] <jnthn> ponder { ... } # :)

[12:58] <tadzik> IF-YOU-FEEL-LIKE-IT { }

[12:59] <tadzik> std: sub your { }; take your time

[12:59] <p6eval> std 8632387: OUTPUT«ok 00:00 41m␤»

[13:00] <tadzik> heh. "take your time" – "ok 00:00 41m"

[13:00] <masak> that's "megs" though, not "minutes" :)

[13:00] <tadzik> TIL

[13:01] <moritz> somehow this discussion reminds me of http://de3.eu.apcdn.com/full/44103.jpg

[13:02] <tadzik> nice one

[13:03] <masak> though someone misunderstood what "periphery" means.

[13:04] <masak> and that doesn't seem like "proper Englishman" English to me as much as overly elaborate ways of saying stuff.

[13:04] <moritz> aye

[13:04] <masak> but that was probably the whole point, in which case "ha ha"

[13:04] <moritz> still nice :-)

[13:05] *** JimmyZ joined
[13:05] <jnthn> I object to the insinuation that we Englishmen say every sentence in such a spiffingly considerate manner.

[13:05] *** skids left
[13:05] *** goraki left
[13:05] <tadzik> of course. You forgot a comma :P

[13:05] <moritz> jnthn: objection sustained

[13:05] <tadzik> (at least according to Polish rules)

[13:06] <jnthn> :P

[13:06] *** Psyche^ joined
[13:07] <masak> tadzik: ooc, where? before 'that'?

[13:07] *** mtk joined
[13:07] <moritz> tadzik: maybe you need to polish your rules a bit :-)

[13:07] <tadzik> we, Englishmen

[13:08] <tadzik> "Śmiem poddać pod wątpliwość teorię, iż my, Polacy, wypowiadamy każde zdanie w niezmiernie wysublimowany sposób" ;)

[13:08] <masak> oh!

[13:09] <tadzik> ...and I probably added an extra comma ;)

[13:09] <jnthn> phenny: "niezmiernie"?

[13:09] <phenny> jnthn: "extremely" (pl to en, translate.google.com)

[13:09] <masak> no, there shouldn't be a comma there in the English sentence.

[13:09] <tadzik> I see

[13:09] <masak> phenny: en pl "an extreme"?

[13:09] <phenny> masak: "ekstremalne" (en to pl, translate.google.com)

[13:09] <tadzik> that's too casual

[13:09] <jnthn> phenny: en pl "spiffing"?

[13:09] <phenny> jnthn: "spiffing" (en to pl, translate.google.com)

[13:09] <jnthn> Dang :)

[13:10] <masak> dang, thought it'd be "zmier" or something.

[13:10] *** Patterner left
[13:10] *** Psyche^ is now known as Patterner

[13:10] <tadzik> I improvised a bit

[13:10] <tadzik> masak: niezmiernie is like "uncountably"

[13:10] <tadzik> phenny: warm up

[13:10] <masak> phenny: en pl "to count"?

[13:10] <phenny> masak: "liczyć" (en to pl, translate.google.com)

[13:10] <tadzik> phenny: pl en "Śmiem poddać pod wątpliwość teorię, iż my, Polacy, wypowiadamy każde zdanie w niezmiernie wysublimowany sposób"?

[13:10] <phenny> tadzik: "I dare to be questioned the theory that we, Poles, speak every sentence in an extremely sophisticated way" (pl to en, translate.google.com)

[13:10] <tadzik> good job!

[13:10] <masak> spiffing.

[13:11] <jnthn> http://s3.amazonaws.com/ragefaces/85cbfbcb8f496826ca8867bd28e0d3b9.png

[13:11] <tadzik> :D

[13:12] <tadzik> didn't see that one coming

[13:13] *** skids joined
[13:13] <tadzik> or: I did not suspect the sudden appearance of this entity 

[13:16] <moritz> all spectests pass

[13:16] <masak> \o/

[13:16] <masak> time to write more spectests!

[13:16] <masak> :P

[13:17] * [Coke] envisions a nice relaxing vacation where he can hack on perl 6 instead of $dayjob.

[13:17] *** JimmyZ_ joined
[13:18] * masak read that as "...inside of $dayjob"

[13:18] <masak> vacation by creative escapism!

[13:21] *** JimmyZ left
[13:21] *** JimmyZ_ is now known as JimmyZ

[13:21] <au> "perl 6 hacking: an inside job"

[13:21] <masak> au! \o/

[13:21] <au> heya \o

[13:22] *** derrazo left
[13:23] <masak> people come in here asking "when will it be ready/stable/production?"

[13:23] <masak> and then you ask what they mean, and they say "1.0".

[13:23] <masak> http://irclog.perlgeek.de/perl6/2012-05-12#i_5583298

[13:24] <tadzik> is 2012.05 not enough? :)

[13:24] <masak> if you ask me, 2012.05 is the best ever.

[13:24] <masak> but enough? :)

[13:24] <masak> I dunno...

[13:24] <masak> I think we can do more! :)

[13:24] <[Coke]> eh. there's some reasonable bit of "we cannot decide when it is production for you". But we can decide when it is for us. Is anyone here using it for $dayjob?

[13:25] * masak o/

[13:25] <[Coke]> I am not. I suppose I could start using it for $otherstuff, though.

[13:25] *** isBEKaml joined
[13:26] <masak> I shouldn't overstate my use of it for $dayjob. there are occasions when Perl 5 is the perfect tool, and occasions when Perl 6 is.

[13:27] * [Coke] wonders if rakudo consulting is using it.

[13:27] <isBEKaml> rakudo consulting LLC? :D

[13:32] <dalek> roast: 18e1f80 | moritz++ | S05-capture/subrule.t:

[13:32] <dalek> roast: subrule capturing, RT #107254

[13:32] <dalek> roast: review: https://github.com/perl6/roast/commit/18e1f8066c

[13:32] <dalek> roast: 0431f79 | moritz++ | S05-capture/subrule.t:

[13:32] <dalek> roast: more subrule capturing, RT #112148

[13:32] <dalek> roast: review: https://github.com/perl6/roast/commit/0431f794f9

[13:32] *** Chillance joined
[13:32] <masak> moritz: re https://rt.perl.org/rt3/Ticket/Display.html?id=61764

[13:33] <masak> moritz: ff implemented, fff still missing

[13:33] <masak> moritz: is fff LHF?

[13:33] <jnthn> huh

[13:33] <jnthn> I did fff earlier this month

[13:33] <jnthn> We pass tests on it.

[13:33] <masak> oh!

[13:33] * masak closes ticket

[13:33] <masak> r: .say when 4 fff 8 for 1..10

[13:33] <p6eval> rakudo d43876: OUTPUT«1␤2␤»

[13:34] <masak> er.

[13:34] <masak> r: .say if $_ == 4 fff $_ == 8 for 1..10

[13:34] <p6eval> rakudo d43876: OUTPUT«4␤5␤6␤7␤8␤»

[13:34] <masak> I wish there was some shorthand there...

[13:34] <moritz> write a macro!

[13:35] <masak> *sigh* :)

[13:35] <masak> no, but I wish there were a shorthand.

[13:35] <masak> the nice thing about 4..8 in Perl 5 is that it defaults to $.

[13:35] <isBEKaml> masak: you won't write a *macro*??  :P

[13:36] <jnthn> r: .say when /4/ fff /8/ for 1..10

[13:36] <p6eval> rakudo d43876:  ( no output )

[13:36] <jnthn> heh :)

[13:36] <moritz> it might get the wrong $_

[13:36] <jnthn> Yeah, that won't work :)

[13:36] <masak> I was sighing over the fact that I'm now "that guy". macros are a good idea, but they're not the automatic answer to every design proposal.

[13:36] <jnthn> masak: No, but they may actually let you do the right thing in this particular case :)

[13:36] *** am0c left
[13:36] <masak> dangit, can't Perl 6 just DWIM for me? :)

[13:37] <tadzik> change Perl 6!

[13:37] <jnthn> I'm not sure making ff and fff do smartmatch by default is a good idea.

[13:37] <isBEKaml> masak: * Perl6! 

[13:38] <jnthn> Maybe we need a ~ff~ and a ~fff~ :)

[13:38] <moritz> ~f~f~f~

[13:38] * masak /ignores everyone :)

[13:39] *** cognominal joined
[13:40] <masak> r: .say for (1..10).sort(&rand)

[13:40] <p6eval> rakudo d43876: OUTPUT«Too many positional parameters passed; got 1 but expected 0␤  in sub rand at src/gen/CORE.setting:3257␤  in method reify at src/gen/CORE.setting:4860␤  in method reify at src/gen/CORE.setting:4755␤  in method gimme at src/gen/CORE.setting:5142␤  in method eager at …

[13:40] <masak> there's a ticket about this. (0-arg functions passed to .sort)

[13:40] <moritz> r: .say for (1..10).sort( -> $, $ { rand })

[13:40] <p6eval> rakudo d43876: OUTPUT«8␤7␤9␤1␤10␤6␤5␤2␤3␤4␤»

[13:41] <masak> it ends with me saying "I don't see why this shouldn't work".

[13:41] <masak> maybe I should put my money where my mouth is and just implement it.

[13:41] <moritz> maybe

[13:41] * masak will *implement* something! shock! horror!

[13:41] <moritz> though of course you could just .pick(*)

[13:41] <masak> for this particular case, yes.

[13:41] <tadzik> is there any other case

[13:41] <tadzik> ?

[13:42] <moritz> well, there aren't that many useful nullary functions

[13:42] <masak> now :)

[13:42] <moritz> oh come on.

[13:42] <tadzik> for sorting? Come on

[13:42] <masak> :P

[13:42] <masak> I could make any number of custom nullary functions which aren't &rand or &now, and pass them into &sort

[13:43] <masak> it basically gives me APL-like "order things according to these indices"

[13:43] <moritz> and how could they do useful sorting, without seeing the values?

[13:43] <Juerd> An iterator could be useful to get randomish, but not quite random, results.

[13:44] <masak> ok, I fold. the 0-ary case isn't worth its weight. closing ticket.

[13:47] <masak> r: say Failure; say Failure.new

[13:47] <p6eval> rakudo d43876: OUTPUT«Failure()␤Not enough positional parameters passed; got 1 but expected 2␤  in method new at src/gen/CORE.setting:8977␤  in block <anon> at /tmp/X4bll7XI28:1␤␤»

[13:47] <masak> r: say Failure; say Failure.new("blah")

[13:47] <p6eval> rakudo d43876: OUTPUT«Failure()␤Method 'throw' not found for invocant of class 'Str'␤  in method gist at src/gen/CORE.setting:9000␤  in sub say at src/gen/CORE.setting:6765␤  in block <anon> at /tmp/rdRpyBg5gi:1␤␤»

[13:48] <Ulti> r: my num @nums[1]; @nums[1] = 'a';

[13:48] <p6eval> rakudo d43876: OUTPUT«===SORRY!===␤Shaped variable declarations not yet implemented. Sorry. ␤at /tmp/PT0gw60KI4:1␤»

[13:48] <masak> r: say Failure; say Failure.new(X.new)

[13:48] <p6eval> rakudo d43876: OUTPUT«Failure()␤You cannot create an instance of this type␤  in method bless at src/gen/CORE.setting:588␤  in method new at src/gen/CORE.setting:575␤  in block <anon> at /tmp/1nCdEn_yjj:1␤␤»

[13:48] <Ulti> r: my num @nums; @nums[1] = 'a';

[13:48] <p6eval> rakudo d43876: OUTPUT«Null PMC access in set_number_native()␤  in block <anon> at /tmp/82tBkS2lpO:1␤␤»

[13:48] <moritz> r: say Failure.new(X::AdHoc.new(:payload<foo>))

[13:48] <p6eval> rakudo d43876: OUTPUT«foo␤  in method gist at src/gen/CORE.setting:9000␤  in sub say at src/gen/CORE.setting:6765␤  in block <anon> at /tmp/BubtaX1S5H:1␤␤»

[13:49] <jnthn> Ulti: Compact arrays are NYI

[13:49] <Ulti> okedoke

[13:50] <jnthn> On the todo list, just a bit fiddly

[13:50] <Ulti> though it looks like its setup to be right? assuming set_number_native is doing what it hints at but is a stub?

[13:50] <jnthn> It...probably shouldn't be doing that.

[13:50] <Ulti> heh

[13:51] <masak> rakudo: say 0..WHAT

[13:51] <p6eval> rakudo d43876: OUTPUT«===SORRY!===␤CHECK FAILED:␤Calling 'WHAT' will never work with no arguments (line 1)␤    Expected: :(\$x)␤»

[13:51] <jnthn> I can kinda guess why it ends up trying but...yeah, that won't work out.

[13:51] * masak closes https://rt.perl.org/rt3/Ticket/Display.html?id=72822

[13:51] <Ulti> really cool thats an eventual feature of vanilla perl6 though, I can get my supervisor to stop using horrible C libraries from perl5

[13:51] <PerlJam> good $localtime all

[13:52] <masak> PerlJam! \o/

[13:52] <jnthn> Well, thanks to NativeCall, using C from Perl 6 ain't too nasty, even if he wants to continue. :)

[13:52] <jnthn> o/ PerlJam 

[13:52] <PerlJam> how does one get the return value from a code block in PAST?

[13:52] *** goraki joined
[13:54] <pmichaud> I've just noticed that the .gist for Match objects looks.... backwards.

[13:54] <moritz> pmichaud: it's optimized for large Match trees

[13:54] <masak> pmichaud: you mean with the => in the beginning?

[13:54] <masak> pmichaud: I can't say I'm a fan of it either.

[13:54] <pmichaud> r: grammar XYZ { token TOP { [ $<a>='x' ]? $<b>='y' } };   say XYZ.parse('xyz')

[13:54] <moritz> pmichaud: but you're not the first to complain

[13:54] <p6eval> rakudo d43876: OUTPUT«=> <xy>␤ a => <x>␤ b => <y>␤␤»

[13:55] <pmichaud> I mean with the fact that the 'x', and 'y' are in angles

[13:55] <pmichaud> even though they aren't keys

[13:55] <jnthn> PerlJam: As in, invoke it?

[13:55] <masak> pmichaud: I don't understand that criticism.

[13:55] <pmichaud> how does one get to the 'x' there?  By using $<a>

[13:55] <masak> pmichaud: <x> means "the string 'x'"

[13:55] <moritz> a and b are the keys, that's why the appear left of =>

[13:56] <jnthn> PerlJam: Just wrap a PAST::Op.new( :pasttype('call'), ...the thing... ) around it

[13:56] <pmichaud> <x> means "the string 'x'"  as long as there aren't any spaces in it.

[13:56] <jnthn> PerlJam: If you mean what I think you mean :)

[13:56] <masak> pmichaud: it's the .gist format, not .perl

[13:56] <pmichaud> r: grammar XYZ { token TOP { [ $<a>='x y' ]? $<b>='z' } };   say XYZ.parse('x yz')

[13:56] <p6eval> rakudo d43876: OUTPUT«=> <x yz>␤ a => <x y>␤ b => <z>␤␤»

[13:56] <masak> it's not meant to be Perl code.

[13:56] <PerlJam> jnthn: *I* don't know what I think I mean  :)

[13:56] <pmichaud> it just seems like an odd use of angles to me, that's all.

[13:57] <moritz> pmichaud: what would you prefer?

[13:57] <PerlJam> jnthn: If I've got PAST::Op.new(:pasttype<call>, $code); and I want to checkthe return type of executing that code, how do I do it?

[13:57] <pmichaud> I'd be okay if it was some other bracketing character that didn't accidentally pun with the meaning of $<...>

[13:57] <masak> pmichaud: how about ''?

[13:58] <pmichaud> I'm wondering if q[...]  might be better.

[13:58] <masak> that would highlight the string nature of the strings.

[13:58] <masak> yeah, q[] wfm too.

[13:58] <jnthn> PerlJam: Use the :pirop('type_check__IPP') node that I mentioned the other way around it, and then you can put that in an if node.

[13:59] <pmichaud> anyway, the angles keep throwing me off because instinctively they look like keys or <subrule>  thingies.

[13:59] <jnthn> PerlJam: Assuming you mean "check the return type it produces at runtime when we run it"

[13:59] <PerlJam> jnthn: aye

[13:59] <pmichaud> or, more to the point

[13:59] <pmichaud> r:  grammar XYZ { token TOP { <alpha> } };  say XYZ.parse("alpha");

[13:59] <p6eval> rakudo d43876: OUTPUT«=> <a>␤ alpha => <a>␤␤»

[13:59] <jnthn> PerlJam: You may want to bind the result of doing the call into a register though

[14:00] <jnthn> (see :scope('register') for examples)

[14:00] <PerlJam> jnthn: but I ... right! that's it  :)

[14:00] <pmichaud> that "alpha => <a>"  looks weird, given that it was <alpha> in the source.

[14:00] <PerlJam> jnthn: thanks

[14:00] *** snearch joined
[14:00] <jnthn> PerlJam: Since you'll want to test its type and then later use it.

[14:00] <masak> pmichaud: so, "<alpha> => q[a]" ?

[14:00] <jnthn> pmichaud: Agree...and if you find it confusing as the regex engine hacker, heck knows how others will find it :)

[14:00] <pmichaud> I'd be fine with "alpha => q[a]", I think.

[14:01] <masak> ok.

[14:01] *** snearch left
[14:01] <pmichaud> that way it at least looks like a pair

[14:01] <jnthn> +1 to q[...]

[14:01] <masak> pmichaud: I can fix it if you have more important stuffs to do.

[14:01] *** snearch joined
[14:01] <pmichaud> sure, it's a low-priority nit for me :)

[14:01] * masak fixes it

[14:01] <moritz> maybe not right before the release

[14:01] <moritz> just in case somebody depends on it

[14:02] <masak> ok, I'll fix it in a branch.

[14:02] <pmichaud> I doubt people should be depending on .gist :)

[14:02] <masak> "should be" !=== "are" :P

[14:02] <PerlJam> hmm.  I find that statement about .gist quite odd.

[14:02] <pmichaud> well, at least to this level.

[14:02] <masak> I doubt it too.

[14:02] <pmichaud> yes, I suppose it does make sense to depend on .gist, since it's the canonical 'say' output format.

[14:02] <masak> but I'll be happy to be careful if it pleases moritz.

[14:03] <pmichaud> as I said, minor nit, so pre- or post- release are both fine with me. 

[14:03] * masak .oO( people who get the .gist output and parse it o.O )

[14:03] <moritz> well, just go ahead if you want

[14:05] <masak> I'm doing it in a branch.

[14:07] <moritz> mathematicians do it in groups. programmers in branches :-)

[14:07] <dalek> Heuristic branch merge: pushed 62 commits to nqp/qbootstrap by jnthn

[14:14] *** birdwind1pbird joined
[14:23] <moritz> .u dolphin

[14:23] <phenny> moritz: Sorry, no results for 'dolphin'.

[14:23] *** kaleem left
[14:23] <dalek> rakudo/match-gist-fixup: 762996e | masak++ | src/core/Match.pm:

[14:23] <dalek> rakudo/match-gist-fixup: [src/core/Match.pm] changed <> to q[] in .gist

[14:23] <dalek> rakudo/match-gist-fixup: 

[14:23] <dalek> rakudo/match-gist-fixup: Suggested by pmichaud++. It may or may not be worth it to also

[14:23] <dalek> rakudo/match-gist-fixup: escape all ']' in the matched text itself.

[14:23] <dalek> rakudo/match-gist-fixup: review: https://github.com/rakudo/rakudo/commit/762996e848

[14:23] <dalek> rakudo/match-gist-fixup: 194f846 | masak++ | src/core/Match.pm:

[14:23] <dalek> rakudo/match-gist-fixup: [src/core/Match.pm] removed root-level '=> '

[14:23] <dalek> rakudo/match-gist-fixup: review: https://github.com/rakudo/rakudo/commit/194f846aed

[14:23] <masak> I ran the spectests on that. all tests pass.

[14:24] <masak> (and it takes 4 minutes on this box, with TEST_JOBS=8) :)

[14:24] <dalek> nqp/qbootstrap: 44e1c14 | jnthn++ | src/QHLL/Grammar.pm:

[14:24] <dalek> nqp/qbootstrap: Update QHLL to not use ** with a separator.

[14:24] <dalek> nqp/qbootstrap: review: https://github.com/perl6/nqp/commit/44e1c14e3f

[14:24] <dalek> nqp/qbootstrap: 7a76f20 | jnthn++ | src/NQPQ/Grammar.pm:

[14:24] <dalek> nqp/qbootstrap: NQPQ's Grammar used the ** ',' syntax, which is now gone from QRegex, but it builds this in stage 1 too, using the old regex engine which doesn't do %. So, eliminate those two cases for something a little more verbose.

[14:24] <dalek> nqp/qbootstrap: review: https://github.com/perl6/nqp/commit/7a76f20fb2

[14:25] *** alester joined
[14:25] <jnthn> Why on earth would a test run just fine from the command line, but parse fail when run with prove? :S

[14:25] <jnthn> (yes, used --exec)

[14:26] <jnthn> pmichaud: Seems we get a performance win in qbootstrap now you've done that commit stuff.

[14:26] <moritz> \o/

[14:27] <pmichaud> yes, there should be a good sized performance win

[14:27] <pmichaud> well, maybe not huge, but at least a small bit

[14:27] <pmichaud> since we're freeing quite a bit more off the stack on commits now, I suspect.

[14:27] <tadzik> jnthn: just 'prove -e foo <file>'?

[14:28] <jnthn> nqp t\nqp\56-role.t # passes all

[14:28] <jnthn> prove -e nqp t\nqp\56-role.t # doesn't even make it thorugh the parse

[14:28] *** kresike left
[14:28] <moritz> prove -e nqp t/nqp/56-role.t   ?

[14:29] <jnthn> moritz: Same result

[14:29] <moritz> :(

[14:29] <moritz> does it use the same nqp?

[14:29] <jnthn> If anyone wants to try and reproduce, just grab qbootstrap branch

[14:29] <jnthn> moritz: That's what I wondered too..

[14:29] *** birdwind1pbird left
[14:29] <jnthn> prove -e .\nqp t\nqp\56-role.t # also fails

[14:31] * moritz compiles

[14:33] <jnthn> t\nqp\32-protoregex.t and t\nqp\52-vtable.t suffer the same odd fate.

[14:33] *** araujo left
[14:37] <moritz> t/nqp/52-vtable.t parsefails here when run directly

[14:37] <moritz> the other two are fine both directly and with prove here

[14:37] <moritz> 52-vtable.t also parsefails when run through prove

[14:38] <moritz> t/nqp/52-vtable.t .. Confused at line 48, near "$a.init();"

[14:38] <jnthn> Oddness

[14:39] <tadzik> wtf

[14:39] * tadzik builds

[14:39] <tadzik> qbootstrap, si?

[14:40] <jnthn> aye

[14:41] *** thou joined
[14:43] *** kresike joined
[14:44] <tadzik> huh. I did perl Configure.pl --gen-parrot and it started building nqp too

[14:46] <moritz> yes

[14:47] <tadzik> I didn't expect that, I thought --gen-nqp will build nqp and parrot, not --gen-parrot

[14:47] <pmichaud> have to have an nqp to build rakudo

[14:47] <tadzik> sure

[14:48] <pmichaud> --gen-parrot implies --gen-nqp, I think.

[14:48] <tadzik> okay

[14:48] <tadzik> t/nqp/56-role.t works for me

[14:48] <pmichaud> Configure.pl:58:      # --with-parrot and --gen-parrot imply --gen-nqp

[14:49] <tadzik> t/nqp/52-vtable.t doesn't work either way

[14:49] *** mikemol joined
[14:49] <tadzik> and 32-protoregex.t works either way

[14:50] <tadzik> sniff sniff. Is that non-deterministic compilation striking again?

[14:50] *** kaleem joined
[14:50] <moritz> tadzik: I have the same results as you

[14:50] <moritz> I suspect that jnthn has some local mess

[14:51] <jnthn> Oddness

[14:51] <tadzik> right

[14:51] <jnthn> git diff shows up nothing here.

[14:51] <jnthn> What's odd is that the vtable.t one does run here

[14:52] <tadzik> jnthn: and git status?

[14:53] <jnthn> Nothin'.

[14:54] <Ulti> jnthn: can you have autoindexed multi dimension arrays in rakudo? or has no one touched Synopsis 9 at all because its quite out there compared with everything else

[14:55] <jnthn> That bit of S09 is decidedly untouched so far. :)

[14:56] <Ulti> heh, did you check your magic synopsis 9 ball for that answer?

[14:56] *** icwiener left
[14:57] <Ulti> my @grid[**]; # Any number of dimensions   x___X

[14:58] <masak> though that's kinda the default.

[14:59] <Ulti> uh oh sparseness is mixed in too

[14:59] <Ulti> that looks impossible to implement wholistically

[15:00] <spider-mario> expected Positional but got Array instead

[15:00] <spider-mario> how come?

[15:00] <tadzik> hehe

[15:00] <spider-mario> r: say Array ~~ Positional

[15:00] <tadzik> odd. Code?

[15:00] <p6eval> rakudo d43876: OUTPUT«True␤»

[15:01] <spider-mario> I’ll try to reproduce it with a smaller code

[15:01] <spider-mario> r: sub f(Int @x) {}; f([])

[15:01] <p6eval> rakudo d43876: OUTPUT«Nominal type check failed for parameter '@x'; expected Positional but got Array instead␤  in sub f at /tmp/_pcsDu1aLu:1␤  in block <anon> at /tmp/_pcsDu1aLu:1␤␤»

[15:02] <jnthn> grr, really need to fix that to say Positional[Int]

[15:02] <masak> spider-mario: the error message is misleading.

[15:02] <masak> spider-mario: what jnthn said.

[15:02] <spider-mario> ok

[15:02] *** ponbiki joined
[15:02] <masak> r: sub f(Int @a) {}; my Int @a; f(@a)

[15:02] <p6eval> rakudo d43876:  ( no output )

[15:02] <masak> r: sub f(Int @a) {}; my Int @a; f(@a); say "alive"

[15:02] <p6eval> rakudo d43876: OUTPUT«alive␤»

[15:02] <spider-mario> r: sub f(Int @x) {}; f([5])

[15:02] <p6eval> rakudo d43876: OUTPUT«Nominal type check failed for parameter '@x'; expected Positional but got Array instead␤  in sub f at /tmp/Dcwv_lS7OH:1␤  in block <anon> at /tmp/Dcwv_lS7OH:1␤␤»

[15:02] <jnthn> r: say Positional[Int].WHAT

[15:02] <p6eval> rakudo d43876: OUTPUT«Positional()␤»

[15:02] <jnthn> r: say Positional[Int].name

[15:02] <p6eval> rakudo d43876: OUTPUT«Method 'name' not found for invocant of class 'Positional'␤  in <anon> at src/gen/Metamodel.pm:1176␤  in block <anon> at /tmp/04Z0xZtoCU:1␤␤»

[15:02] <masak> spider-mario: array literals are always untyped.

[15:02] <jnthn> r: say Positional[Int].^name

[15:02] <p6eval> rakudo d43876: OUTPUT«Positional␤»

[15:02] <spider-mario> oh

[15:02] <spider-mario> ok.

[15:03] <tadzik> eek

[15:03] <masak> spider-mario: so you can't expect to pass one in like that. you need to declare it.

[15:03] * masak submits rakudobug

[15:03] <tadzik> that makes sub (Int @k) much less useful

[15:03] <spider-mario> r: my Int @x = [5]

[15:03] <p6eval> rakudo d43876:  ( no output )

[15:03] <masak> tadzik: yes.

[15:03] <spider-mario> r: my Int @x = ['a']

[15:03] <p6eval> rakudo d43876:  ( no output )

[15:03] <tadzik> although I see the point

[15:03] <masak> spider-mario: skip the []

[15:03] *** sudokode is now known as autotune

[15:03] <spider-mario> r: my Int @x = 'a'

[15:03] <p6eval> rakudo d43876:  ( no output )

[15:06] <masak> tadzik: it would be a little better if there was some argument syntax that said "I promise that this array is an Int array"

[15:08] *** autotune is now known as sudokode

[15:08] <tadzik> right

[15:08] <tadzik> well, casting

[15:10] * [Coke] hurls http://www.smbc-comics.com/index.php?db=comics&id=2613 

[15:11] *** sudokode left
[15:11] *** sudokode joined
[15:13] *** sudokode left
[15:13] * tadzik decomutees

[15:15] *** HarryS left
[15:19] *** sudokode joined
[15:19] *** sudokode left
[15:27] *** s1n left
[15:35] <dalek> nqp: aee8809 | pmichaud++ | src/Q (2 files):

[15:35] <dalek> nqp: Fix bug with subcaptures receiving empty hash entries from outer match quantified captures (RT #111286).

[15:35] <dalek> nqp: review: https://github.com/perl6/nqp/commit/aee88091bd

[15:36] <pmichaud> re-spectesting rakudo now.

[15:39] * jnthn peers curiously at the patch

[15:39] * masak peers curiously at the RT ticket

[15:40] <pmichaud> captures normally keep track of $!regexsub, which is the sub that created the capture

[15:40] <pmichaud> then the CAPHASH uses information from the $!regexsub to populate empty arrays

[15:41] <pmichaud> thus:    regex abc { <a>* }   will end up with an entry in the 'a' hash slot

[15:41] <pmichaud> even if no <a>'s actually match

[15:41] *** s1n joined
[15:41] <pmichaud> but in the case of

[15:41] <pmichaud>     regex abc { <a>*  $<b>=b }

[15:41] <pmichaud> the $<b> match object really shouldn't be tied to the 'abc' regex

[15:42] <pmichaud> it's a "subcapture", which is only just the text of the capture

[15:42] <pmichaud> what was happening was that the match object for $<b> kept the reference to the outer $!regexsub

[15:42] <pmichaud> which meant that when someone asked for hash entries, it would construct an empty list to represent the quantified <a> captures

[15:43] <jnthn> oh!

[15:43] <pmichaud> somewhat telling is something like:

[15:44] <pmichaud> r:  grammar XYZ { rule TOP { [ $<a>=x ]?  $<b>=y  [ $<c>=z ]? } };  XYZ.parse('xyz').<b>.keys.say

[15:44] <p6eval> rakudo d43876: OUTPUT«0␤»

[15:44] <pmichaud> ummm.

[15:44] <pmichaud> r:  grammar XYZ { regex TOP { [ $<a>=x ]?  $<b>=y  [ $<c>=z ]? } };  XYZ.parse('xyz').<b>.keys.say

[15:44] <p6eval> rakudo d43876: OUTPUT«a c␤»

[15:44] <pmichaud> there.

[15:45] <pmichaud> the $<b> match object was tied to the TOP regex, and thus it thought it needed empty lists for $<a> and $<c>.

[15:45] <dalek> roast: 343a61d | (Solomon Foster)++ | S (2 files):

[15:45] <dalek> roast: Fudge for niecza.

[15:45] <dalek> roast: review: https://github.com/perl6/roast/commit/343a61dbe0

[15:45] <pmichaud> anyway, the patch eliminates that, as well as makes the subcapture case much more optimal than before.

[15:46] <jnthn> Nice

[15:46] <jnthn> It's a very nice short patch too :)

[15:46] <pmichaud> Aye.

[15:46] <masak> pmichaud++

[15:46] <pmichaud> all of today's patches have been (1) short and (2) cleaner than what was before.

[15:46] <pmichaud> so I'm happy.  :-)

[15:46] <jnthn> pmichaud++

[15:47] <jnthn> This is all very nice to have. :)

[15:47] *** trexy joined
[15:47] <pmichaud> oh, and looks like we pass a TODO

[15:47] <jnthn> And great that we have them just in time for the release. :)

[15:47] <jnthn> \o/

[15:48] <pmichaud> oh, maybe not.  That's weird.

[15:48] <pmichaud> anwyay, bumping NQP_REVISION

[15:49] <moritz> JITforrelease hacking :-)

[15:49] <dalek> rakudo/nom: 0ed00f0 | pmichaud++ | tools/build/NQP_REVISION:

[15:49] <dalek> rakudo/nom: Bump NQP_REVISION to get fix for RT #111286.

[15:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0ed00f07d8

[15:49] <pmichaud> ...and with that I'm afk for a while... should be back again tomorrow

[15:50] <pmichaud> phenny: tell tadzik I'm done with my patches... release when ready

[15:50] <phenny> pmichaud: I'll pass that on when tadzik is around.

[15:51] *** kresike left
[15:51] *** s1n left
[15:54] *** tokuhirom joined
[15:55] <[Coke]> I actually don't like "just before release hacking", as he fears not-enough-testing. (but that's when /i/ am the one writing the code. ;)

[15:56] <PerlJam> [Coke]: I feel the same way.  But then I think, "the next release is only a month away"

[15:56] <PerlJam> (Now, for an R* release it would worry me more)

[15:56] <moritz> [Coke]: I agree. Which is why I asked masak++ to do the Match.gist change in a branch

[15:57] *** cognominal_ joined
[15:57] <moritz> and I did some stuff in branches too

[15:57] <moritz> I mean, branching *is* easy in git. The hardest part is not to forget the branches :-)

[15:58] *** jabberz joined
[15:59] *** cognominal left
[16:01] *** JimmyZ left
[16:01] *** jabberz left
[16:02] *** tokuhirom left
[16:04] *** kaleem left
[16:04] *** sudokode joined
[16:05] *** sudokode left
[16:06] *** s1n joined
[16:08] *** goraki left
[16:09] <skids> r: role A [::T = Int] { method a (:$myt = T) { T.WHAT.say; } }; class B does A[Rat] { }; my B $a .= new; $a.a(:myt(Str))

[16:09] <p6eval> rakudo d43876: OUTPUT«(timeout)»

[16:09] <skids> huh. well, that doesn't spin locally.

[16:09] *** thelazydeveloper joined
[16:10] <masak> should be OK, though.

[16:10] <masak> but the :myt argument is completely unnecessary, of course.

[16:10] <skids> locally the above gives "Rat()" when I expected "Str()"

[16:11] <masak> r: role A [::T = Int] { method a { T.WHAT.say; } }; class B does A[Rat] { }; my B $a .= new; $a.a

[16:11] <p6eval> rakudo d43876: OUTPUT«Rat()␤»

[16:11] <moritz> skids: then mzabe zou should say $myt.WHAT.say

[16:11] <masak> zes. :)

[16:11] <moritz> *maybe

[16:11] <moritz> instead of T.WHAT.say

[16:11] <skids> Ah.

[16:12] <masak> doesn't explaing why it gets a timeout, though.

[16:13] <moritz> maybe high load on the server

[16:13] <skids> Anyway that's beside the point of what I was going to type next: if you invoke .a() you get an "Cannot type check against type variable T" error.

[16:14] *** REPLeffect left
[16:17] *** icwiener joined
[16:17] *** HarryS joined
[16:18] <skids> (and aside from that, line numbers on multidispatch error messages don't seem to always end up at the offending candidate)

[16:18] <masak> r: .say for (1, 2, 3) xx 4

[16:19] <p6eval> rakudo d43876: OUTPUT«1␤2␤3␤1␤2␤3␤1␤2␤3␤1␤2␤3␤»

[16:19] <masak> that... was slow.

[16:20] <tadzik> pmichaud: roger that

[16:20] <phenny> tadzik: 15:50Z <pmichaud> tell tadzik I'm done with my patches... release when ready

[16:21] <tadzik> release name?

[16:22] *** REPLeffect joined
[16:22] *** HarryS left
[16:23] <skids> .oO(Today is the 110th anniversary of the archeological discovery of the Antikythera mechanism)

[16:24] <[Coke]> tadzik: there's a list of options, no? or did it get exhausted?

[16:24] <tadzik> there are two I think

[16:24] <tadzik> if anyone wants to decide, go ahead :)

[16:27] <moritz> skids: well, they can't come from the offending candidate, but multi dispatch error means there isn't exactly one best candidate

[16:28] <moritz> so there's also not one offending candidate

[16:28] <moritz> the error should come from the calling location

[16:29] <skids> Well, OK, s/multidispatch errors/type check errors/ then, which occur during multidispatch(?).

[16:30] <skids> Because said above error message gives a line number of a candidate that doesn't have the :myt parameter.

[16:30] *** quicoju left
[16:31] *** brrt left
[16:31] <sorear> good * #perl6

[16:32] <colomon> o/

[16:32] *** s1n left
[16:32] <masak> sorear! \o/

[16:32] <moritz> skids: example?

[16:32] <moritz> \o sorear 

[16:32] <skids> well, at the risk of another timeout:

[16:33] <colomon> sorear: I've added substr-rw to my copy of niecza, waiting on my getting the spectest running a bit cleaner before pushing.

[16:33] <skids> r: role A [::T = Int] { method a (:$myt = T) { $myt.WHAT.say; } }; class B does A[Rat] { }; my B $a .= new; $a.a()

[16:33] <p6eval> rakudo 0ed00f: OUTPUT«Cannot type check against type variable T␤  in any type_check at src/gen/Metamodel.pm:271␤  in method a at /tmp/hZvTT9L7TH:1␤  in block <anon> at /tmp/hZvTT9L7TH:1␤␤»

[16:33] <skids> That error will appear with a line number of a different candidate (if you provide more candidates in a file with line numbers)

[16:33] *** kboga left
[16:34] <sorear> colomon: cool.  are you also going to remove rw functionality from substr/

[16:34] <colomon> sorear: oh.  didn't realize it was there.

[16:34] <colomon> sorear: hmmm.

[16:35] * colomon may completely change his approach to this....

[16:35] <moritz> skids: that error seems to be bogus to me; I don't see where a type-check against T happens anyway

[16:36] <skids> yes that's what I initially sought to show, but also the error line number is wrong as well.

[16:38] <skids> If I was smart enough, I'd know how to generate a legitimate error so as to separate the issues :-)

[16:39] <TimToady> er, why use q[] when there's ''?

[16:39] <TimToady> (backlogging)

[16:41] <TimToady> masak: I'm referring to your Match.gist patch

[16:41] <PerlJam> '' are so boring ;)

[16:42] <TimToady> q[] just seem like it'll clutter both alphabetic and non-alphabetic strings by interfering with both parts of your brain

[16:43] <TimToady> or use some nice Unicode brackets

[16:44] <TimToady> ｢foo｣

[16:45] * skids wonders what alphabet TimToady would use during a field sobriety test

[16:45] <dalek> nqp: dfb6d5a | tadzik++ | VERSION:

[16:45] <dalek> nqp: bump VERSION to 2012.05

[16:45] <dalek> nqp: review: https://github.com/perl6/nqp/commit/dfb6d5a3a3

[16:45] <TimToady> 何だ？

[16:47] * [Coke] slows gets used to the control key being back in the "right" spot.

[16:47] <[Coke]> *slowly

[16:48] <sorear> colomon: eep, were you trying to implement substr-rw using Proxy?

[16:48] <colomon> sorear: yes

[16:48] <colomon> sorear: I'm sure the substr version that existed is better

[16:48] <colomon> (at least, massively more efficient)

[16:48] *** s1n joined
[16:49] <TimToady> Perl 6, a referentially translucent language...

[16:49] <TimToady> fsdo translucent...

[16:50] <tadzik> jnthn, pmichaud: are we still lacking some autoviv bits?

[16:51] <jnthn> tadzik: I thought Pm did all the auto-viv in the last release

[16:51] <jnthn> We have green for it in features too

[16:52] <tadzik> I thought so

[16:53] <tadzik> so, are we still regressing anywhere compared to 2011.07?

[16:53] * TimToady is tempted to define ｢foo｣ as equivalent to Q[foo]

[16:55] *** tokuhirom joined
[16:55] <[Coke]> module!

[16:55] <jnthn> tadzik: Not as far as I know.

[16:56] <tadzik> fine :)

[16:56] <jnthn> tadzik: Oh, wait, one place...

[16:56] <jnthn> capture ~~ signature case of smartmatch

[16:56] <tadzik> ah, that one

[16:56] <TimToady> [Coke]: no, I mean that Q[] is too useful not to have a shortcut like q[] or qq[]

[16:57] <TimToady> it's not just for being cute

[16:57] <jnthn> Not sure it's worth calling out that we're still missing that tough.

[16:57] <[Coke]> TimToady: ok. as long as it's not JUST ute.

[16:57] <TimToady> *c

[17:00] <[Coke]> ... these 2 utes.

[17:02] *** am0c joined
[17:02] *** tokuhirom left
[17:03] *** s1n left
[17:03] *** dakkar left
[17:05] <dalek> rakudo/nom: 3866972 | tadzik++ | tools/build/NQP_REVISION:

[17:05] <dalek> rakudo/nom: Bump NQP revision

[17:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/386697227d

[17:05] <dalek> rakudo/nom: 8004748 | tadzik++ | docs/release_guide.pod:

[17:05] <dalek> rakudo/nom: Update release guide

[17:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8004748aec

[17:05] <dalek> rakudo/nom: 64dc550 | tadzik++ | docs/announce/2012.05:

[17:05] <dalek> rakudo/nom: Add a release announcement for 2012.05

[17:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/64dc550004

[17:05] <tadzik> patches to the release announcement are welcome

[17:06] <jnthn> and is able import by tag name

[17:06] <jnthn> able *to* import...

[17:07] <moritz> "is now functional" might be ambiguous

[17:07] <jnthn> tadzik: Probably worth a note taht there's been some regex engine improvements too

[17:08] <tadzik> true

[17:08] <jnthn> There's been the pmichaud++ fixes, but also that /<$x>/ catching improvement, <( and )>, <~~>...

[17:08] <jnthn> *caching

[17:09] <jnthn> Also should mention more prominently that . is no longer in the default library path

[17:09] <tadzik> right

[17:09] <moritz> lib

[17:09] <moritz> . was already removed in 2010.04.1

[17:10] <dalek> rakudo/nom: 4f48183 | moritz++ | docs/announce/2012.05:

[17:10] <dalek> rakudo/nom: [announce] mention regex improvements; wording

[17:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4f48183ed1

[17:10] <sisar> tadzik: "ff have been improved" <--- s/have/has (?)

[17:10] <moritz> hm, maybe both should be mentioned

[17:10] <jnthn> moritz: ah, yeah, it was that way around :)

[17:10] <moritz> sisar: you're too slow :-)

[17:10] <jnthn> yes, has

[17:10] <tadzik> whoa, slow down :)

[17:10] <jnthn> +On behalf of the development team, I encourage you to try the new release.

[17:10] <jnthn> +have fun, and let us know about your experience.

[17:10] <jnthn> That wants a comma, or a capital H

[17:10] <jnthn> :)

[17:10] <sisar> moritz: dang :/

[17:10] *** birdwindupbird left
[17:12] <sisar> maybe split the changes into "What's new?" and "What's been fixed/improved?" #bikeshedding :)

[17:13] <moritz> sisar: each fix is something new #bikeshedding

[17:13] <tadzik> dalek, wake up

[17:13] *** adu joined
[17:13] <tadzik> I've pushed some new changes to the release annoucement. Anything else to fix?

[17:13] <sisar> moritz: aye

[17:14] * PerlJam wants to see the list of things that have been unimproved  ;)

[17:14] <sisar> moritz: aye-ish

[17:14] <dalek> rakudo/nom: b6d1c8e | tadzik++ | docs/announce/2012.05:

[17:14] <dalek> rakudo/nom: Some more fixes to the release announcement

[17:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b6d1c8e872

[17:15] *** b1rkh0ff left
[17:15] *** snearch left
[17:16] *** HarryS joined
[17:18] *** s1n joined
[17:18] <dalek> specs: cb82d5a | larry++ | S02-bits.pod:

[17:18] <dalek> specs: Spec halfwidth corner brackets for Q[] equivalent

[17:18] <dalek> specs: 

[17:18] <dalek> specs: This is primarily to improve output of strings that mostly want

[17:18] <dalek> specs: to be complete quoted, to avoid cluttering such output with Q[].

[17:18] <dalek> specs: But to allow it for .perl output, we have to allow it on input too.

[17:18] <dalek> specs: review: https://github.com/perl6/specs/commit/cb82d5aa72

[17:19] <masak> as long as things have an ASCII equivalent (possible longer), it's all good...

[17:19] <jnthn> masak: Q[...] :)

[17:19] <icwiener> In the announcement, "-I and -M command-line options" stands a bit lonely there, no? I mean, another half-sentence explaining what those options do, might be nice.

[17:19] <masak> right.

[17:19] <masak> but this is the first thing in the spec that isn't latin-1, no? correct me if I'm wrong.

[17:20] <jnthn> Hmm. Good point.

[17:20] <icwiener> "Rakudo now also includes the lib.pm module." is also very lonely. :)

[17:22] <moritz> well, in the end the announcement is a list of changes, not a narrative

[17:23] <icwiener> moritz: True. Just while reading, I asked myself what that change actually does.

[17:23] <TimToady> masak: no, we've got set operators already

[17:24] <TimToady> and I've decided the Latin-1 restriction is becoming largely unnecessary in the modern world

[17:24] *** cognominal___ joined
[17:25] *** tyatpi left
[17:25] * colomon has finally taken some steps to figure out how to make UTF 8 work portably in his C++ code.

[17:26] <TimToady> the world has largely settled on UTF-8 for interchange now, at least for languages without legacy 16-bit character sets

[17:26] <TimToady> and they're at least Unicode aware

[17:26] <tadzik> icwiener: good motivation to find out, eh?

[17:26] <tadzik> :)

[17:27] <adu> TimToady: any by "world" you mean everywhere except China

[17:27] <icwiener> tadzik: hehe, good point. :D

[17:27] *** cognominal_ left
[17:28] <TimToady> adu: um, I just said that

[17:29] <TimToady> "legacy 16-bit"

[17:29] <colomon> well, and Windows

[17:30] <TimToady> that's the part of the world that isn't "largely" settled on UTF-8

[17:30] <adu> TimToady: GB 18030 is neither legacy nor 16-bit

[17:31] *** b1rkh0ff joined
[17:31] <TimToady> yes, but those languages have legacy 16-bit, even if they have others

[17:31] <icwiener> Typo in changelog: "arguemnts"

[17:32] <tadzik> refresh?

[17:32] <sorear> TimToady: so India is all on board the UTF-8 train?

[17:32] <tadzik> I don't see it

[17:32] <adu> TimToady: also, technically GB 18030 is 12-bit, not 16-bit

[17:33] <icwiener> tadzik: Hmm, I am looking at https://github.com/rakudo/rakudo/blob/b6d1c8e872cd3c7c602c2297436cc0e28c3ee076/docs/ChangeLog

[17:33] <icwiener> tadzik: And it's still there.

[17:34] <adu> GB 18030 was designed to replace UTF-8, and hence it isn't "legacy"

[17:34] <TimToady> sorear: India is getting there

[17:34] <tadzik> because you're looking at this specific revision which had it :)

[17:34] <tadzik> oh, wait

[17:34] <tadzik> that's Changlog

[17:34] <TimToady> adu: I fail to see how this contradicts what I said :)

[17:35] *** am0c left
[17:35] <icwiener> tadzik: I saw that hash, so I navigated there again te be sure to have the newest version. :)

[17:35] <tadzik> okay :)

[17:35] <tadzik> you're right

[17:35] <dalek> rakudo/nom: c4fd56d | tadzik++ | docs/ChangeLog:

[17:35] <dalek> rakudo/nom: [Changelog] Fix a tyop

[17:35] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c4fd56d353

[17:35] <tadzik> so, anything else we want about the release announcement?

[17:36] <icwiener> I am done being pedantic. ;)

[17:36] <tadzik> icwiener++

[17:36] <tadzik> okay :)

[17:36] <adu> TimToady: I just don't want you to assume that China will someday use UTF-8, it's never going to happen

[17:37] <dalek> rakudo/nom: 1a5a46f | tadzik++ | VERSION:

[17:37] <dalek> rakudo/nom: Bump VERSION

[17:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1a5a46fe0f

[17:37] <TimToady> I don't assume it

[17:37] <tadzik> karmacoaster

[17:37] <TimToady> which is why I said what I said

[17:37] *** s1n left
[17:42] *** leprevost joined
[17:43] *** brrt joined
[17:45] <TimToady> and GB 18030 looks like kind of a botch to me that companies will support because they have to, but will end up preferring some other encoding for interchange when they can get away with it

[17:47] *** lucas_ joined
[17:47] <TimToady> GB 18030 can be seen as a lousy attempt at a compression encoding of Unicode

[17:47] *** am0c joined
[17:48] <TimToady> using legacy codepoints as a proxy for needing Huffman shortness

[17:50] <sisar> tadzik: i made an About page for Rakudo to sync with your release :). Its actually just a copy paste from the READMEs ;) http://rakudo.org/about/

[17:50] *** mikemol left
[17:51] *** s1n joined
[17:51] <lucas_> Hello all

[17:52] <adu> TimToady: I agree it's not ideal, but I don't live in China, so maybe it is

[17:52] <lucas_> I see that Perl 6 embraces operators that are not ASCII. This design decision is documented somewhere?

[17:52] <sisar> comments welcome 

[17:53] <TimToady> lucas_: yes, S02 says: In the abstract, Perl is written in Unicode, and has consistent Unicode

[17:53] <TimToady> semantics regardless of the underlying text representations.

[17:54] <TimToady> ASCII is so, like, 2nd millenium :)

[17:55] <TimToady> actually, I malign the 2nd millenim, which used a far richer character set than ASCII, at least until typewriters were invented

[17:55] <TimToady> *nium

[17:56] <TimToady> so chalk it up to 20th century madness

[17:56] <PerlJam> 19th century even.  We're still living with the legacy of Herman Hollerith

[17:56] <adu> like crosses and double crosses and backwards Ps

[17:56] * TimToady is waiting for the whine about characters being hard to type now :)

[17:57] <adu> I love unicode

[17:58] <Woodi> hmm, I just tried my $in = open "input.txt";

[17:58] <Woodi> my $out = open "output.txt", :w;

[17:58] <Woodi> for $in.lines -> $line {

[17:58] <Woodi> }ops

[17:59] <Woodi> ...tried http://rosettacode.org/wiki/File_IO#Perl_6

[17:59] <Woodi> pasted up there...

[17:59] <Woodi> and open in that form do not work...

[18:00] <Woodi> err is: Unable to open filehandle from path 'input.txt'

[18:00] <diakopter> jnthn: did pmichaud tackle backtracking into a subrule?

[18:00] <TimToady> well, is there an input.txt file in your current directory?

[18:01] <Woodi> err, no :)

[18:01] <tadzik> https://github.com/downloads/rakudo/rakudo/rakudo-2012.05.tar.gz uploaded

[18:01] <lucas_> I don't know how to reproduce unicode characters in text editors and text input fields. How do you people do it?

[18:01] <PerlJam> Woodi: then it sounds like it's working perfectly to me :)

[18:01] <TimToady> there it is!

[18:01] <sisar> lucas_ : which OS ?

[18:01] <lucas_> sisar: linux

[18:01] <TimToady> and which editor?

[18:02] *** cognominal___ left
[18:02] <Woodi> ok, seems to work with input... must test more

[18:02] <PerlJam> lucas_: I use digraphs in vim or compose them "manually" (ubuntu)

[18:02] <lucas_> In the console and KDE env. Vim and Kate...

[18:02] <moritz> tadzik++ # release

[18:02] <jnthn> diakopter: No, I did that in the end.

[18:02] <sisar> lucas_: which linux ?

[18:02] <sisar> oh KDE

[18:02] <jnthn> diakopter: Well... pmichaud++ had wired up a bunch of it

[18:02] <TimToady> in vim, say :digraphs to see a list of digraphs

[18:02] <jnthn> diakopter: I did the final bits 

[18:03] <jnthn> Was...fiddly ;)

[18:03] <moritz> and you can enter them with ctrl+k <first> <second>

[18:03] *** cognominal___ joined
[18:03] <diakopter> jnthn: oh! I should go find the commits to study them

[18:03] <TimToady> under Gnome, there's a CTRL-SHIFT u 263a sequence to enter any char you know the code of

[18:03] <TimToady> I generally use a Compose key in the termianl to get characters like «»

[18:04] <tadzik> and the release's done

[18:04] <TimToady> I use an input method like anthy to get characters like 漢字.

[18:04] <lucas_> Oh, I must learn all these ways of entering chars...

[18:04] <tadzik> thanks for flying with tadzikair, I wish you an enjoyable stay in #53, "MadMongers"

[18:04] <TimToady> sometimes I use a little program that scans the Unicode database for names, and then cut and paste

[18:04] <TimToady> often there's already an example of a charcter you can reuse from the current window

[18:05] <TimToady> or the current file

[18:05] <TimToady> anyway, TMTOWTDI applies

[18:05] <lucas_> thanks for the tips

[18:06] <diakopter> my cow-orker doesn't like me calling my Java program with a 500-line main() method a "script".

[18:06] <TimToady> I supsect input methods will standardize a bit more over the years

[18:06] <PerlJam> speaking of cut-n-paste #perl6 irclogs make for some good input for strange characters ;)

[18:06] <moritz> and a good test case for my IR clogs

[18:06] <TimToady> you mean like 𪚥 and such?

[18:07] *** s1n left
[18:08] <TimToady> (that's four dragon radicals crammed into one character, for those playing along at home)

[18:09] <PerlJam> looks like a box on irclogs  :)

[18:09] <TimToady> oh, that's another thing, I have a radical database that I can look up any Unicode character in by the names of the radical

[18:09] <TimToady> so I just said "rad 4.dragon" to find that character

[18:10] *** lucas_ left
[18:10] *** spider-mario left
[18:10] *** Util left
[18:10] *** colomon left
[18:10] *** Tene left
[18:10] <TimToady> PerlJam: if it looks like a box rather than a whole bunch of small lines, your fonts are not up to snuff

[18:10] *** spider-mario joined
[18:10] <sisar> TimToady: i remember you saying a few days back that overbars don't display correctly in the GNOME terminal. But they look fine on my en. (U+3035). What problem do you have?

[18:10] *** lucas_ joined
[18:10] *** Util joined
[18:10] *** colomon joined
[18:10] *** Tene joined
[18:10] <sisar> *end

[18:11] <diakopter> [Coke]: lol  ... these 2 utes.

[18:11] <TimToady> sisar: huh, they look better here to, so maybe they just fixed it

[18:11] <TimToady> *too

[18:11] <sisar> :)

[18:12] *** kboga joined
[18:12] <PerlJam> TimToady: Do you have some recommended font package(s) for ubuntu?

[18:12] <sisar> now we can have overbars in Perl6 for repeating decimals ? :)

[18:12] <TimToady> but o̿ still is botched here

[18:13] <moritz> that displays as o with two overbars here in my xterm

[18:13] <moritz> but firefox doesn't display it correct (it shows the double overbar on the right of the o)

[18:13] <sisar> .u ̿

[18:13] <phenny> U+033F COMBINING DOUBLE OVERLINE (◌̿)

[18:14] <sisar> TimToady: it looks fine on my GNOME terminal . Strange.

[18:14] <sisar> i mean i get an o with two overbars, if that is what you are expecting

[18:15] <sisar> (my GNOME Terminal version is 3.4.1.1)

[18:17] <geekosaur> firefox has long had a problem with combining characters

[18:17] <sisar> ok 'f' with two overbars is botched up. The two overbars cut right through the top of it !

[18:18] <TimToady> n: https://gist.github.com/2720715

[18:18] <p6eval> niecza v17-4-ge5b869e: OUTPUT«241025348275725.3352␤0.00011̅4̅2̅8̅5̅7̅␤18446744073709551616.0103092783505154639175257731958762886597938144329896907216494845360824742260̅1̅0̅3̅0̅9̅2̅7̅8̅3̅5̅0̅5̅1̅5̅4̅6̅3̅9̅1̅7̅5̅2̅5̅7̅7̅3̅1̅9̅5̅8̅7̅6̅2̅8̅8̅6̅5̅9̅7̅9̅3̅8̅1̅4̅4̅3̅2̅9̅8̅9̅6̅9̅0̅7̅2̅1̅6̅4̅9̅4…

[18:19] <TimToady> except the overbars still screw up by 1 column here...

[18:19] <PerlJam> yeah, bummer

[18:19] <TimToady> the first overbar is over the 4 rather than the 1

[18:19] <sisar> oh

[18:19] <diakopter> they look okay here

[18:20] <TimToady> looks good on FF except for the cut-through-ness

[18:21] <TimToady> hmm, looks like my algorithm doesn't like a repeat right after the .

[18:23] <sisar> TimToady: for me the first overbar is over 1, & not 4.

[18:23] *** s1n joined
[18:24] <geekosaur> huh, and those overbars don't combine here

[18:25] <sisar> geekosaur: gnome terminal v3.4.1.1 ?

[18:26] <Woodi> I got http://pastebin.com/dCXjRdFs from .get() on socket... on file io looks ok

[18:26] <geekosaur> xchat 2.8.8 x11 on os x

[18:26] *** lucas_ left
[18:26] <sisar> i'm using xchat too. It's unicode support is not good.

[18:26] <geekosaur> bouncing through znc although that "shouldn't" matter

[18:26] <Woodi> ...using Rakudo Star 2012.04

[18:27] <geekosaur> probably doesnt use pango properly (if at all), same problem firefox has

[18:28] <geekosaur> in theory a plugin could work around it; don't think I'm that interested in fixing it (although I did do a plugin to make niecza/std errors work)

[18:28] *** s1n left
[18:28] <sisar> geekosaur: i'm interested in your niecza/std plugin. Could you share it ?

[18:29] <geekosaur> http://dl.dropbox.com/u/8376576/unansi.pl

[18:30] <sisar> thanks. i'll try it :)

[18:30] <geekosaur> maps the ANSI escapes to mIRC colors... there's a simpler thing if you just want to strip them

[18:30] <TimToady> n: https://gist.github.com/2720715

[18:30] <p6eval> niecza v17-4-ge5b869e: OUTPUT«241025348275725.3352␤0.0001̅4̅2̅8̅5̅7̅␤18446744073709551616.0̅1̅0̅3̅0̅9̅2̅7̅8̅3̅5̅0̅5̅1̅5̅4̅6̅3̅9̅1̅7̅5̅2̅5̅7̅7̅3̅1̅9̅5̅8̅7̅6̅2̅8̅8̅6̅5̅9̅7̅9̅3̅8̅1̅4̅4̅3̅2̅9̅8̅9̅6̅9̅0̅7̅2̅1̅6̅4̅9̅4̅8̅4̅5̅3̅6̅0̅8̅2̅4̅7̅4̅2̅2̅6̅8̅0̅4̅1̅2̅3̅7̅1̅1̅3̅4̅0̅2̅0̅6̅1̅8̅5̅5̅6̅7̅␤»…

[18:30] <TimToady> that's better

[18:33] * colomon votes to not put that in the setting.  though dang, that's cool

[18:34] <TimToady> yes, we'd already decided to go with rounding by default

[18:34] <TimToady> that one is only for 1/97, so just think how long the representation of a longish prime denominator would be...

[18:34] <PerlJam> Though a module that can be included in R* woudl be nice 

[18:35] <colomon> PerlJam: sure, it's great for a module!

[18:35] <sisar> TimToady: apart from wrong overbats, your earlier gist also gave wrong output for 1/7000 :)

[18:36] <sisar> *bars

[18:36] <TimToady> yes, same bug

[18:36] <TimToady> was doing the substr wrong

[18:36] <sisar> oh, right

[18:36] <PerlJam> .oO( what would an overbat signify? )

[18:36] <sisar> i'm under the care of batman ?

[18:36] <TimToady> Twinkle, twinkle, little bat!  How I wonder what you're at!

[18:37] *** brrt left
[18:37] <TimToady> Up above the world so high, like a teatray in the sky...

[18:38] * TimToady likes overbats better than sharks

[18:38] <TimToady> though I'm not sure I'd like to be bitten by either

[18:39] *** birdwindupbird joined
[18:39] <sisar> p6: say +'foo';

[18:39] <TimToady> The prospect of imminent mastication by a member of either species fills me with dread.

[18:39] <p6eval> niecza v17-4-ge5b869e: OUTPUT«Unhandled exception: Cannot parse number: foo␤  at /home/p6eval/niecza/lib/CORE.setting line 1366 (die @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3405 (ANON @ 10) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3407 (NumSyntax.str2num @ 4) ␤  at /…

[18:39] <p6eval> ..pugs, rakudo 1a5a46: OUTPUT«0␤»

[18:40] <sisar> which is correct? throwing an error like niecza or returning zero like pugs+rakudo ?

[18:40] <diakopter> teat-ray? tea-tray? neither flying makes sense to me

[18:41] <sisar> (it is known that the spec is unclear on that)

[18:41] <TimToady> diakopter: one might almost label it 'nonsense'

[18:42] <diakopter> I was at least looking for a pun, I generally assume you're making one if there is any ambiguity of interpretation

[18:42] <TimToady> some of my puns are unintentional

[18:42] <TimToady> in this case I just misspelled "tea tray"

[18:43] *** s1n joined
[18:43] <TimToady> http://en.wikipedia.org/wiki/Twinkle,_Twinkle,_Little_Bat for those who have no idea what we're talking about

[18:43] <adu> how many XML packages are there for perl5?

[18:43] <diakopter> TimToady: oh; I didn't know about that parody

[18:43] <TimToady> adu: dunno, I only wrote the first one, and then largely ignore the subject

[18:44] <TimToady> *ignored

[18:44] <sisar> adu: that is a vague question. Maybe this will help: https://metacpan.org/search?q=XML

[18:44] <colomon> diakopter: apparently many of the poems in Carroll are parodies, but that's one of the few were most people today know the original

[18:45] <colomon> *still know

[18:45] <adu> wow

[18:45] <TimToady> prolly due to the catchy tune

[18:45] *** crazedpsyc joined
[18:45] <TimToady> and composers going nuts with Variations on a Theme involving that tune

[18:46] * masak still remembers learning about https://en.wikipedia.org/wiki/Jam_tomorrow

[18:48] * colomon had forgotten that one, but relatively recently read the Humpty Dumpty chapter as a bedtime story.

[18:49] <masak> oh, that's an excellent idea!

[18:50] <masak> tadzik++ # release!

[18:50] *** Util left
[18:50] *** colomon left
[18:50] *** Tene left
[18:51] <masak> really, this is the best Perl 6 implementation ever released!

[18:51] <moritz> sisar: I think it's correcter to throw

[18:51] *** Util joined
[18:51] *** colomon joined
[18:51] *** Tene joined
[18:52] <sisar> moritz: yeah, but... still if we had some spec backing us, it would be better.

[18:52] <moritz> aye

[18:52] <moritz> then we'd probably do it in rakudo pretty soon

[18:52] <sisar> aye

[18:53] <moritz> and do a huge cleanup of the test suite

[18:53] <TimToady> correcterer to fail

[18:54] * sisar anticipates a spec change soon :)

[18:54] <sisar> s/change/update

[18:54] * moritz anticipates a big fallout

[18:55] <TimToady> 🍄

[18:56] <TimToady> ooh, FF font fail!

[18:56] <moritz> .u �

[18:56] <phenny> U+FFFD REPLACEMENT CHARACTER (�)

[18:56] <TimToady> 1F344	MUSHROOM

[18:56] <dalek> rakudo/nom: 65f9d95 | moritz++ | src/core/Exception.pm:

[18:56] <dalek> rakudo/nom: avoid some boxing in print_control

[18:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/65f9d95d53

[18:56] <dalek> rakudo/nom: 8254a60 | moritz++ | src/core/Exception.pm:

[18:56] <dalek> rakudo/nom: typed exception for "method not found" error

[18:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8254a6008e

[18:56] <dalek> rakudo/nom: 47497c4 | moritz++ | src/core/Exception.pm:

[18:57] <dalek> rakudo/nom: fix control exception catcher

[18:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/47497c46e0

[18:57] <dalek> rakudo/nom: 7165ff5 | moritz++ | src/core/Exception.pm:

[18:57] <dalek> rakudo/nom: Merge remote branch 'origin/method-not-found' into nom

[18:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7165ff5e73

[18:57] <benabik> .u cloud

[18:57] <phenny> U+2601 CLOUD (☁)

[18:57] <benabik> 🍄☁

[18:57] <TimToady> that looks more like a new fireball coming up

[18:59] *** tyatpi joined
[19:01] <adu> that's actually in color on my screen

[19:01] *** alim left
[19:02] *** Chillance left
[19:02] *** Chillance joined
[19:03] *** s1n left
[19:04] <adu> .u PILE OF POO

[19:04] <phenny> adu: Sorry, no results for 'PILE OF POO'.

[19:04] <benabik> Yeah.  The mushroom is in color for me too.  It's kind of strange.

[19:04] <dalek> specs: 1b8b0ab | larry++ | S03-operators.pod:

[19:04] <dalek> specs: mention that prefix:<+> returns failure on failure

[19:04] <dalek> specs: review: https://github.com/perl6/specs/commit/1b8b0ab987

[19:04] * [Coke] wonders what he added to this release.

[19:04] *** tyatpi left
[19:04] <sisar> yay ! #spec-change

[19:04] <TimToady> adu: phenny doesn't know characters outside the BMP, I believe

[19:05] <moritz> [Coke]: one commit after the least release

[19:05] <adu> benabik: I think Apple did that primarily for the Japanese market, every phone there has color emoji

[19:05] <sisar> where is phenny

[19:05] <sisar> *phenny's source code ?

[19:05] <adu> can we add characters?

[19:05] <sisar> phenny: give me your source code

[19:06] <[Coke]> moritz: except you did an interim release.

[19:06] <moritz> phenny: source?

[19:06] <TimToady> only if you can teach Python to do better with Unicode, I suspect

[19:06] <moritz> [Coke]: yes, but the script that crawls the log of contributors doesn't know anything about that

[19:06] <[Coke]> moritz: way to screw everything up! ;)

[19:06] <sisar> phenny: source ?

[19:07] * sisar thought a space would change things 

[19:07] <adu> I think I did a good job modularizing the XML grammar

[19:08] <adu> http://img837.imageshack.us/img837/9867/xml.png

[19:08] <sisar> phenny: your source code is at https://github.com/sbp/phenny :p

[19:09] *** leprevost left
[19:09] <[Coke]> aloha: phenny

[19:09] <[Coke]> aloha: phenny?

[19:10] <TimToady> rakudo: aloha: phenny

[19:10] <[Coke]> phenny: remind me in 2m to say "eek"

[19:11] <p6eval> rakudo 1a5a46: OUTPUT«(timeout)»

[19:11] <adu> karma phenny

[19:11] <aloha> phenny has karma of 6.

[19:11] <adu> karma aloha

[19:11] <aloha> aloha has karma of -69.

[19:12] <TimToady> aloha *= 2

[19:12] <dalek> specs: f7e01b5 | moritz++ | S32-setting-library/Str.pod:

[19:12] <dalek> specs: [S32::Str] split off substr-rw

[19:12] <dalek> specs: 

[19:12] <dalek> specs: that way you only pay for what you use

[19:12] <dalek> specs: review: https://github.com/perl6/specs/commit/f7e01b5206

[19:12] <[Coke]> moritz: shouldn't that commit have come before the changes to rakudo/roast?

[19:13] <moritz> [Coke]: in the waterfall model, yes

[19:13] <moritz> [Coke]: in reality we often experiment and wait for feedback until we spec stuff

[19:14] <moritz> though maybe I should have waited with the roast commit, true

[19:14] *** lichtkind joined
[19:14] * TimToady doesn't care, as long as everything converges eventually

[19:16] <sisar> now that is a weird reason to not to work on an open source project: https://github.com/sbp/phenny/issues/10 !

[19:16] <[Coke]> http://www.youtube.com/watch?feature=player_embedded&v=aJXWOiXDFS8 - be very careful with container types.

[19:17] *** s1n joined
[19:18] *** kaare_ left
[19:18] <sisar> [Coke]: lol... or the camel  will get scared :)

[19:19] <adu> oh style

[19:19] <masak> r: my @a = 1, 2, 3; say @a

[19:19] <p6eval> rakudo 7165ff: OUTPUT«1 2 3␤»

[19:20] <benabik> sisar: That's... strange.

[19:20] <sisar> benabik: what ?

[19:20] <benabik> sisar: The issue you linked to.

[19:20] <adu> sisar: it looks like unicodedata is part of Python

[19:21] <sisar> oh the issue I mentioned..gotcha

[19:21] <masak> r: my @bin; @bin does role { method empty { !self } }; say "AAAARGH HALP!" if @bin.empty

[19:21] <p6eval> rakudo 7165ff: OUTPUT«AAAARGH HALP!␤»

[19:21] <masak> :P

[19:21] <moritz> n: 1.foo

[19:21] <p6eval> niecza v17-4-ge5b869e: OUTPUT«Unhandled exception: Unable to resolve method foo in class Int␤  at /tmp/ZgTU9m1vxO line 1 (mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3842 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3843 (module-CORE @ 65) ␤  at /home/p6e…

[19:21] <adu> so it might fix itself with a UTF-32 build, or one might port phenny to a different unicode database

[19:22] <TimToady> n: say "\x[PILE OF POO]"

[19:22] <p6eval> niecza v17-4-ge5b869e: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unrecognized backslash sequence: '\x' at /tmp/w4Zf3fkVjR line 1:␤------> [32msay "\x[33m⏏[31m[PILE OF POO]"[0m␤␤Use of uninitialized value in string context␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1224 (warn @…

[19:22] <TimToady> oops

[19:22] <TimToady> n: say "\c[PILE OF POO]"

[19:22] <p6eval> niecza v17-4-ge5b869e: OUTPUT«💩␤»

[19:22] <adu> :)

[19:22] <TimToady> you could port phenny to that

[19:23] <adu> but wouldn't that require an irc library?

[19:24] <TimToady> just a SMOP

[19:26] <lichtkind> oh rakudo doesnt know qx

[19:27] <lichtkind> TimToady: could you explain to me the exact p6 meaning of the term reify sir?

[19:27] <moritz> lichtkind: my rakudo knows qx

[19:27] <dalek> roast: dbba400 | moritz++ | S02-types/lists.t:

[19:27] <dalek> roast: remove test that checks for exact error message wording

[19:27] <dalek> roast: review: https://github.com/perl6/roast/commit/dbba4009a8

[19:29] <sisar> who has access to our phenny ?

[19:29] <lichtkind> moritz: but it acts like an lias of qqx :)

[19:30] <moritz> lichtkind: that's something completely different than not knowing it

[19:31] <lichtkind> moritz: yes but after my first tests lokked like not existing

[19:31] *** LylePerl joined
[19:32] <moritz> lichtkind: did you read the error messages you were getting?

[19:32] <dalek> tablets: 6e0ec21 | (Herbert Breunung)++ | docs/appendix- (2 files):

[19:32] <dalek> tablets: straigth out qx and qqx

[19:32] <dalek> tablets: review: https://github.com/perl6/tablets/commit/6e0ec21280

[19:34] <dalek> roast: b585e67 | moritz++ | S32-exceptions/misc.t:

[19:34] <dalek> roast: test for method not found exception

[19:34] <dalek> roast: review: https://github.com/perl6/roast/commit/b585e672ff

[19:36] *** bluescreen10 left
[19:39] <dalek> roast: 2454421 | moritz++ | S05-capture/named.t:

[19:39] <dalek> roast: RT #111286 (named captures) and some other small fixes

[19:39] <dalek> roast: review: https://github.com/perl6/roast/commit/245442176e

[19:39] *** am0c left
[19:39] *** am0c joined
[19:42] <moritz> r: +'foo'.Numeric(:strict)

[19:42] <p6eval> rakudo 7165ff: OUTPUT«Cannot convert string to number: does not look like a number in '⏏foo' (indicated by ⏏)␤  in method Numeric at src/gen/CORE.setting:9019␤  in sub prefix:<+> at src/gen/CORE.setting:2232␤  in block <anon> at /tmp/LVXHpdNmpW:1␤␤»

[19:42] <moritz> r: say ''.Numeric(:strict)

[19:42] <p6eval> rakudo 7165ff: OUTPUT«Cannot convert string to number: does not look like a number in '⏏' (indicated by ⏏)␤  in method gist at src/gen/CORE.setting:9021␤  in sub say at src/gen/CORE.setting:6765␤  in block <anon> at /tmp/9cphSASCGc:1␤␤»

[19:42] <lichtkind> did qx really die ?

[19:42] <moritz> who says qx died?

[19:43] <TimToady> lichtkind: it means to stop being lazy about the next element of a lazy list

[19:43] *** alim joined
[19:43] <masak> I hope qx didn't die! :)

[19:43] <lichtkind> moritz: its not mentioned as seperate op anymore in spec

[19:43] <masak> lichtkind: that can't be right.

[19:43] <lichtkind> wait

[19:44] <moritz> S02:3747:(Note that C<qx//> doesn't interpolate.)

[19:44] <lichtkind> yes but doesnt say what it actually is

[19:44] <masak> so it's dead?

[19:44] <masak> lichtkind: it works like in Perl 5.

[19:45] <colomon> sorear: dang, your substr worked much better than moritz's substr-rw.  :)

[19:45] <lichtkind> masak: yes but whatfore we have then qqx

[19:45] <masak> lichtkind: except it doesn't interpolate :)

[19:45] <lichtkind> this whole thing smells liek a bug

[19:45] <colomon> moritz++'s, I should have said. 

[19:45] <masak> lichtkind: a bit like q[] and qq[], you know.

[19:45] <masak> lichtkind: it's not a bug. it's spec.

[19:45] <lichtkind> i understand now

[19:45] <masak> colomon: how do you mean, "worked much better"?

[19:46] <lichtkind> but neverteless that was changes some time ago

[19:46] <masak> lichtkind: no.

[19:46] <lichtkind> without me noticing

[19:46] <masak> it really wasn't.

[19:46] <colomon> masak: all the TODOs suddenly passed when I switched

[19:46] <colomon> masak: that's in niecza, of course.

[19:46] <colomon> sorear++'s substr(-rw) is not pure Perl 6

[19:47] <lichtkind> TimToady: thank you but wheres the difference to eager context ?

[19:47] <moritz> eager context reifies

[19:47] <moritz> but reifying not only occurs in eager context

[19:47] <moritz> but also when accessing elements of lazy lists

[19:48] <moritz> or iterating them

[19:48] *** alim left
[19:50] *** am0c left
[19:50] <TimToady> eager reifies all the remaining elements, if it can

[19:51] <masak> eager takes a lazy list and follows it all the way to the bottom.

[19:51] <masak> if any.

[19:52] *** bluescreen10 joined
[19:52] <masak> put differently, 'eager' is the boring variant between 'lazy' and 'hyper' :P

[19:52] <TimToady> well, hyper is boring compared to race

[19:53] <lichtkind> TimToady: so its nothing more then compute or give me the next element?

[19:53] <masak> lichtkind: nono, *all* the elements

[19:53] <TimToady> it just means "make it real"

[19:53] <masak> COMPUTE ALL THE ELEMENTS

[19:53] <TimToady> masak: he's asking about "reify"

[19:54] <masak> oh!

[19:54] <masak> yes, that's Latin for "make real".

[19:54] <dalek> roast: 32d960d | moritz++ | / (2 files):

[19:54] <dalek> roast: remove some tests that rely on numifying non-numbers

[19:54] <dalek> roast: review: https://github.com/perl6/roast/commit/32d960dd69

[19:54] <masak> or "make into a thing".

[19:54] <masak> like "rez" in Tron :)

[19:54] <adu> r: say +"1"+1;

[19:54] <p6eval> rakudo 7165ff: OUTPUT«2␤»

[19:56] <TimToady> reify means to actually cook the recipe and end up with a substance

[19:56] <TimToady> hopefully edible

[19:56] <lichtkind> like in alchemy :)

[19:56] <TimToady> well, don't cook the recipe, cook the ingredients specified by the recipe

[19:56] <jnthn> .oO( reifry )

[19:57] <adu> lead + stone = gold!

[19:57] <moritz> cookify

[19:57] <TimToady> lichtkind: exactly, except for the part about ending up with something real :)

[19:57] <lichtkind> but i  asked about perl 6 : reify @a gives me an element or just computes it?

[19:58] <lichtkind> i know lot of people question reality of alchemy thats ok :)

[19:59] <TimToady> "reify" is a concept, not an officially specced API

[19:59] <lichtkind> ah

[19:59] <lichtkind> thank you 

[19:59] <TimToady> (so far)

[19:59] <lichtkind> its for the glossary, there are 39 terms more to go :)

[19:59] <TimToady> this may change when pmichaud++ gets around to redoing S07

[20:00] <masak> adu: no, no! it's lead + sulphur! :P

[20:01] <TimToady> lead + pretty much anything + a collapsing supernova will do it for ya

[20:02] <masak> that's what they were missing

[20:03] <lichtkind> masak: no no no its much more complicated :)

[20:03] <masak> TWO supernovas?

[20:04] <lichtkind> masak: nowhere in the literature i own they speak about supernovas

[20:04] <masak> O RLY?

[20:04] <moritz> that's what they are missing

[20:04] <masak> *lol*

[20:04] <moritz> lichtkind: you own the wrong literature :-)

[20:04] <masak> clearly.

[20:04] <masak> moritz has all the witty comebacks tonight.

[20:04] <lichtkind> i just spoke about alchemical literature i have books about physics too

[20:05] * masak .oO( al-physics )

[20:05] <lichtkind> you clearly not evolved ebough for alchemy :)

[20:05] <lichtkind> ah enough

[20:05] <TimToady> well, I have my chemistry textbooks, and I don't recall that they mention supernovas either...

[20:05] <masak> lichtkind: is a skeptical mind a no-go for doing alchemy?

[20:06] <masak> if so, I'm probably toast as far as my alchemical career goes...

[20:06] <moritz> lichtkind should tell the folks on lesswrong.com :-)

[20:06] <masak> that's a discussion I'd pay to see.

[20:07] * moritz not

[20:07] <PerlJam> masak: wouldn't that be "alphysy" to parallel alchemy ?

[20:07] <lichtkind> masak: being close minded is a no go :)

[20:07] <moritz> eeks, it seems that deduction of string sequences relies on numeric comparisons :/

[20:08] <masak> moritz: by the way, only 15 days left to the next HPMoR update! :D

[20:08] <moritz> masak: /o\

[20:08] <masak> lichtkind: if you open your mind too much, your brain will fall out.

[20:08] <lichtkind> what is HPMoR?

[20:08] <masak> PerlJam: oh, true.

[20:08] <masak> lichtkind: boy, you're in for a treat.

[20:08] <[Coke]> masak: for some definition of treat.

[20:09] <masak> lichtkind: take a week off and curl up in a nice sofa.

[20:09] <moritz> lichtkind: http://hpmor.com/ # imagine Harry Potter as the son of a scientist

[20:09] <lichtkind> masak: why you come up with that worn out jokes?

[20:09] <PerlJam> lichtkind: the H and P stand for Harry and Potter  ;)

[20:09] <masak> lichtkind: it's not a joke.

[20:09] *** icwiener left
[20:09] <PerlJam> wow, I haven't looked at that site in a while.  Looks a tad more "professional" these days.

[20:10] <lichtkind> i have nothing against rationality, but once you amstered it its time to go on

[20:10] <moritz> PerlJam: that site is quite new. The old was fanction.not

[20:10] <lichtkind> mastered

[20:10] <PerlJam> ah

[20:10] <PerlJam> lichtkind: and here I was wondering if that was just your accented way of saying "hamstered"

[20:11] <diakopter> I've always been very scared of getting into fan fiction.

[20:11] <PerlJam> (and then I was wondering about "hamster" as a verb ;)

[20:11] <lichtkind> PerlJam: it exists in german

[20:12] <lichtkind> it means grab and keep it

[20:12] *** ponbiki left
[20:12] <TimToady> oh, I thought it'd be a stir-fry of pig, but that'd be hamstir...

[20:12] <TimToady> though I suppose that does mean you'd have grab and keep the pig

[20:13] *** am0c joined
[20:13] <masak> diakopter: why?

[20:14] <TimToady> .oO(his brane will fall out)

[20:14] <masak> diakopter: also, from what little I know of fan fiction, HPMoR is quite the outlier.

[20:14] <diakopter> masak: I've been scared I'd spend all my days on it

[20:14] <masak> heh :)

[20:14] <dalek> roast: b032eeb | moritz++ | S (3 files):

[20:14] <dalek> roast: remove more tests that rely on numification of non-number strings

[20:14] <dalek> roast: review: https://github.com/perl6/roast/commit/b032eeb686

[20:14] *** ggoebel left
[20:14] <masak> lichtkind: we have that meaning of "to hamster" in Swedish as well.

[20:14] <masak> phenny: sv de "hamstra"?

[20:14] <phenny> masak: "horten" (sv to de, translate.google.com)

[20:15] <moritz> as you can probably guess, I'm preparing for strict-by-default Str.Numeric

[20:15] <diakopter> phenny: sv en "hamstra"?

[20:15] <phenny> diakopter: "hoard" (sv to en, translate.google.com)

[20:15] <masak> phenny: sv de "hamster"?

[20:15] <phenny> masak: "Hamster" (sv to de, translate.google.com)

[20:15] <PerlJam> sorry ... I can only conjure bizarre sexual practices as possible meanings for "to hamster"  ;->

[20:15] <moritz> it's just that the range and sequence code needs some updating to use less numeric comparisons

[20:16] <TimToady> PerlJam: TMI

[20:16] <masak> no, tell us more :P

[20:16] <PerlJam> It's rumored you'll have to ask Richard Gere.

[20:16] <masak> o.O

[20:17] <isBEKaml> phenny: de en "hamster"?

[20:17] <phenny> isBEKaml: "hamster" (de to en, translate.google.com)

[20:17] *** ggoebel joined
[20:17] <isBEKaml> thankfully. :-)

[20:17] <moritz> phenny: de en "hamstern"?

[20:17] <phenny> moritz: "hoard" (de to en, translate.google.com)

[20:17] <TimToady> next thing you're gonna tell us that ham'n'swiss isn't a Swiss word

[20:17] <isBEKaml> uhh, hoarding isn't stealing... 

[20:18] <masak> who said it was?

[20:18] <isBEKaml> lichtkind.

[20:18] <lichtkind> isBEKaml: i never said that hamstern has only the conotation to keep more than you need

[20:18] <TimToady> the Commons of whose Tragedy we speak says so

[20:18] <diakopter> phenny: en de "gank"?

[20:18] <phenny> diakopter: "Gank" (en to de, translate.google.com)

[20:18] <diakopter> phenny: en sv "gank"?

[20:18] <phenny> diakopter: "gank" (en to sv, translate.google.com)

[20:19] <TimToady> are you guys trying to _wear out_ phenny?

[20:19] * masak .oO( phenny was totally hamstered... )

[20:19] <lichtkind> (stanford press)++

[20:20] <isBEKaml> lichtkind: ah, I read grab as steal

[20:20] *** tyatpi joined
[20:20] <dalek> roast: 942eb9e | moritz++ | S03-operators/comparison.t:

[20:20] <dalek> roast: remove another wrong numification test

[20:20] <dalek> roast: review: https://github.com/perl6/roast/commit/942eb9ed71

[20:21] *** LylePerl left
[20:21] <TimToady> well, you can grab something that isn't property, but you can also grab something that is

[20:21] <TimToady> and it might be your property, or someone else's, is all

[20:22] <TimToady> I mean, before, not after :)

[20:22] <adu> property grab?

[20:22] <masak> hoarding to me has the connotations of people buying and stocking things because everyone else is doing the same.

[20:22] <TimToady> land grab, back in the days when no one was thought to own the land

[20:23] <TimToady> and grabbing your own hammer is certainly not stealing

[20:23] <adu> TimToady: or when criminals infiltrate the EPA and declare a city to be a "natural habitat reserve" and kick millions of people out of their condos

[20:24] <TimToady> adu: sounds like an interesting novel

[20:25] <PerlJam> adu: what makes the people "criminals"?

[20:26] <isBEKaml> TimToady: sure, "grab and keep" sounds a lot like stealing to me. :)

[20:26] <adu> TimToady: http://www.washingtontimes.com/news/2012/mar/21/editorial-ending-epas-land-grab/

[20:27] <adu> anyways

[20:27] <adu> has anyone seen whiteknight?

[20:28] <geekosaur> thank you for today's USAn political interlude for the day

[20:29] <PerlJam> adu: on #parrot earlier today

[20:29] <benabik> seen whiteknight

[20:29] <aloha> whiteknight was last seen in #parrot 2 hours 11 mins ago saying "nine: Have you had any other thoughts about the windows build? Come the weekend, I have a windows VM but no VisualStudio and no debugger".

[20:31] <TimToady> adu: the "millions" still needs a bit of citation; also this is obviously the previous president's fault since it happened in 2007 :)

[20:32] <adu> I'm not good with numbers

[20:32] <TimToady> me either, that's why I use computers :)

[20:32] <adu> s/millions/zillions/ :)

[20:39] <adu> and done

[20:39] <adu> https://github.com/andydude/p6-xml

[20:40] * moritz clones and tests

[20:41] <adu> oh

[20:41] <adu> the tests all take 1 argument

[20:42] <moritz> oh, they don't produce TAP

[20:42] <adu> TAP?

[20:42] <moritz> Test Anything Protocol

[20:42] <adu> I don't know what that is

[20:42] <moritz> that's what all our test files produces

[20:42] <adu> I'd love to do that tho

[20:42] *** tokuhirom joined
[20:42] <masak> \o/

[20:42] <moritz> and what you get from   use Test; plan $number_of_tests; and then calls to is(), ok() etc.

[20:42] <masak> we'd love for you to do that.

[20:43] <adu> masak: heh

[20:43] <diakopter> adu+_+

[20:43] <diakopter> er

[20:43] <adu> so use Test; and ok()

[20:43] <diakopter> adu++

[20:43] <adu> diakopter: :)

[20:43] <masak> +_+ looks like someone who has had a long day at work.

[20:43] <moritz> adu: example: https://github.com/perl6/roast/blob/master/S02-lists/tree.t

[20:44] <adu> next step will be some kind of SAX/DOM, or I've been considering another interface

[20:44] <moritz> adu: http://perlcabal.org/syn/S24.html # more thorough description

[20:44] <diakopter> Charset.pm took a lot of typing

[20:45] <adu> diakopter: yes

[20:47] <moritz> adu: and when your .t files emit TAP, you can install https://github.com/masak/ufo/ and then simply run 'ufo && make test' to get a nice test summary and precompilation of your modules

[20:47] <adu> moritz: cool, thanks

[20:48] * moritz -> sleep

[20:48] <adu> good night

[20:52] <masak> dream of precompiled modules all running TAP.

[20:55] *** tyatpi left
[20:57] <tadzik> 'evening

[20:57] <masak> tadziku! \o/

[20:57] <tadzik> masaku! \o/

[21:00] <masak> u! \o/

[21:05] *** jaldhar left
[21:06] *** aindilis left
[21:07] <tadzik> that was a nice evening

[21:07] <masak> glad to hear it.

[21:07] <tadzik> 3/4 geocaches found :)

[21:09] *** tokuhirom left
[21:11] *** cognominal_ joined
[21:11] *** tyatpi joined
[21:12] <masak> yay

[21:14] *** cognominal___ left
[21:17] *** birdwindupbird left
[21:20] <adu> ok

[21:22] <adu> I wonder if I could use XML::Writer

[21:23] *** aindilis joined
[21:23] <adu> how do I write an actions class?

[21:24] <adu> like say I wanted to write an action class that wrote the output of XML::Document.parse() as an XML string?

[21:24] <lichtkind> the distinction between array and list is stillthe same array is the container and lists are what perl handles all the time internally ?

[21:25] <adu> masak: is that a towel on your head?

[21:26] <tadzik> haha

[21:26] <isBEKaml> adu: he's ford prefect

[21:27] <adu> from don't panic?

[21:27] <adu> uh, I mean whatzitcalled...

[21:27] <isBEKaml> yeah. :D

[21:27] <tadzik> adu: did you see http://perl6advent.wordpress.com/2009/12/21/day-21-grammars-and-actions/?

[21:28] <adu> I think my problem is that (1) I don't understand how to get stuff from $/, and (2) I don't know what kind of return is expected

[21:29] <adu> when I tried to write parrot-nqp actions, it complained greatly that I wasn't returning PAST nodes

[21:29] <jnthn> You don't return, but rather "make". And you take $/ as a parameter.

[21:29] <masak> adu: it's a towel. so here's the thing.

[21:30] <masak> adu: I had lost that towel the previous night. literally lost it.

[21:30] <masak> turned out in the pitch darkness of the sauna, someone else had accidentally nicked it.

[21:30] <masak> I got it back, and I was so happy to have it back that I put it on my head.

[21:30] *** s1n left
[21:30] <adu> so I know $<value> is the same as $/{'value'} but whenever I try $/{'value'}{'subvalue'} I would expect it to work, but it doesn't

[21:30] <masak> I like that picture because I'm looking suitably annoyed by having my picture taken.

[21:31] <adu> masak: lol

[21:31] <masak> showing a face that seems to say "you've never seen a guy with a towel on his head before?"

[21:32] <masak> adu: probably $/{'value'} is a list, and you need to do [0] or something in between.

[21:32] <adu> another thing, is when I "say $x.parse()", is it dumping the $/ corresponding to TOP? and is it a hash? or a list?

[21:32] <masak> adu: reason for $/{'value'} being a list: you used a quantifier, like * or ?

[21:33] <masak> adu: the thing that comes out of .parse is always a single Match.

[21:33] <masak> adu: think of a Match as having both hash and array nature.

[21:33] <dalek> tablets: 3f0f838 | (Herbert Breunung)++ | docs/appendix- (3 files):

[21:33] <dalek> tablets: now qx and qqx are right and linked

[21:33] <dalek> tablets: review: https://github.com/perl6/tablets/commit/3f0f8384d9

[21:33] <dalek> tablets: ec10b86 | (Herbert Breunung)++ | docs/appendix-g-glossary.txt:

[21:33] <dalek> tablets: explain reify

[21:33] <dalek> tablets: review: https://github.com/perl6/tablets/commit/ec10b86fd0

[21:33] <masak> that is, you can both .{} and .[] it

[21:34] <adu> hmm

[21:36] *** am0c left
[21:36] <masak> r: grammar BoxLogic { rule TOP { <box>* }; rule box { 'box'\d } }; BoxLogic.parse("box1 box2 box3"); say ~$<box>[2]

[21:36] <p6eval> rakudo 7165ff: OUTPUT«box3␤»

[21:36] *** am0c joined
[21:37] <adu> is ~ coercing to Str?

[21:38] <masak> aye.

[21:38] <masak> r: grammar BoxLogic { rule TOP { <box>* }; rule box { 'box'\d } }; BoxLogic.parse("box1 box2 box3"); say $<box>[2]

[21:38] <p6eval> rakudo 7165ff: OUTPUT«=> <box3>␤␤»

[21:38] <masak> not coercing gives you the original Match object.

[21:41] <masak> r: grammar BoxLogic { rule TOP { <box>* }; rule box { 'box'\d } }; BoxLogic.parse("box1 box2 box3"); say $/

[21:41] <p6eval> rakudo 7165ff: OUTPUT«=> <box1 box2 box3>␤ box => <box1 >␤ box => <box2 >␤ box => <box3>␤␤»

[21:42] <masak> it looks clearer on a terminal with multiple-line output :)

[21:45] <adu> hmm

[21:45] <adu> so parse should accept 2 parameters, right?

[21:45] <adu> parse($string, $actions)?

[21:47] <jnthn> It's a named parameter

[21:47] <jnthn> :actions(...)

[21:47] <adu> :actions(

[21:47] <adu> oh

[21:47] <adu> I think I saw it called as :$actions, that explains it

[21:48] <masak> 'night, #perl6

[21:48] <adu> masak: night, ford prefect

[21:48] *** tokuhirom joined
[21:50] *** jferrero left
[21:51] *** s1n joined
[22:00] *** PacoAir left
[22:01] *** orphu left
[22:07] *** am0c left
[22:08] *** am0c joined
[22:11] *** bacek left
[22:11] *** bacek joined
[22:17] <[Coke]> # 05/17/2012 - rakudo++ (22178); niecza (91.82%); pugs (34.92%)

[22:18] <[Coke]> down from the 16th at 22193

[22:19] <adu> how hard would it be to write a perl6fmt tool?

[22:19] <jnthn> [Coke]: Due to failures, or due to an overall decrease in the number of tests?

[22:19] <jnthn> [Coke]: I know moritz++ has been removing some dubious number ones.

[22:25] <[Coke]> "rakudo",     22178,    30,   712,  1891, 24811, 24121

[22:25] <[Coke]> "rakudo",     22193,    30,   722,  1858, 24803, 24113

[22:26] <[Coke]> .. which doesn't tell us anything if new tests were added as old were remoed.

[22:26] <[Coke]> *removed. no more failures, though.

[22:28] *** araujo joined
[22:30] *** araujo left
[22:31] *** dduncan joined
[22:31] *** dduncan left
[22:34] *** cognominal joined
[22:36] *** cognominal left
[22:37] *** cognominal_ left
[22:39] *** jferrero joined
[22:41] *** araujo joined
[22:41] *** araujo left
[22:41] *** araujo joined
[22:42] * jnthn -> sleep o/

[22:48] *** benabik_ joined
[22:49] <lichtkind> jnthn: good night

[22:49] <dalek> tablets: 787dc2b | (Herbert Breunung)++ | docs/appendix- (3 files):

[22:49] <dalek> tablets: still fixing qx and qqx

[22:49] <dalek> tablets: review: https://github.com/perl6/tablets/commit/787dc2bfbc

[22:52] *** benabik left
[22:52] *** benabik_ is now known as benabik

[23:00] *** b1rkh0ff left
[23:05] *** Woodi left
[23:12] <dalek> tablets: ce5a64b | (Herbert Breunung)++ | docs/appendix- (2 files):

[23:12] <dalek> tablets: regularize qp

[23:12] <dalek> tablets: review: https://github.com/perl6/tablets/commit/ce5a64b0af

[23:14] *** sudokode joined
[23:17] <lichtkind> TimToady:  are you sure we should allow Q :regex // since its an own grammar anyway, im even tempted to rename $~Main sometimes but its so special that i fel $~MAIN is good

[23:20] *** benabik left
[23:20] *** Woodi joined
[23:20] *** Chillance left
[23:21] *** NamelessTee left
[23:29] *** isBEKaml left
[23:31] <TimToady> adu: trivial, if you don't want it to do anything :)

[23:31] <TimToady> if you spec what you want, it might be a little harder

[23:33] *** tokuhirom left
[23:34] <TimToady> viv -6 used to do the trivial reproduction of the code from the parse tree, so that's not entirely a joke

[23:34] <TimToady> might be somewhat bitrotted though

[23:34] <TimToady> yeah, seems a bit busted

[23:36] <skids> Today I spent a small amount of time considering whether providing a write-direction complement to Grammar.parse/:actions might be a good first step towards using grammars backwards.

[23:36] *** NamelessTee joined
[23:36] <skids> Or at least, just give people a place to hook their emitters.

[23:40] *** spider-mario left
[23:41] *** NamelessTee left
[23:42] *** cognominal joined
[23:49] *** lestrrat left
[23:50] *** lestrrat joined
[23:53] *** whiteknight joined
[23:53] *** whiteknight is now known as Guest595

