[00:01] *** erkan left
[00:03] *** erkan joined
[00:03] *** erkan left
[00:03] *** erkan joined
[00:03] *** sudokode left
[00:05] *** sudokode joined
[00:52] *** tokuhiro_ joined
[00:53] *** zhutingting joined
[01:01] *** benabik left
[01:01] *** benabik joined
[01:03] <diakopter> phenny: ask TimToady should .codes return the original number of codes as inputted, or the number of codes it will output when it's outputted as NFC+marks?

[01:03] <phenny> diakopter: I'll pass that on when TimToady is around.

[01:06] <diakopter> phenny: ask TimToady or some other formula I can't imagine at the moment? :)

[01:06] <phenny> diakopter: I'll pass that on when TimToady is around.

[01:07] <sorear> if the string is logically stored as code points, it should return the number of code points

[01:08] <sorear> if the string is logically stored as graphemes, .codes() should error

[01:08] <sorear> because we already have .codes('NFC') and .codes('NFD')

[01:09] <diakopter> I thought Perl 6 strings were logically stored as NFG

[01:10] <sorear> we've gone back and forth on that several times

[01:11] <diakopter> I was pretty certain TimToady still wants NFG

[01:14] *** Exodist left
[01:16] *** erkan left
[01:17] *** erkan joined
[01:17] *** erkan left
[01:17] *** erkan joined
[01:17] <diakopter> no?

[01:19] <sorear> I gave you two options just in case

[01:19] <dalek> perl6-roast-data: 1c24077 | coke++ | / (4 files):

[01:19] <dalek> perl6-roast-data: today

[01:19] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/1c240773b2

[01:19] <dalek> perl6-roast-data: e035a93 | coke++ | / (4 files):

[01:19] <dalek> perl6-roast-data: today

[01:19] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/e035a93161

[01:20] <diakopter> oh

[01:20] *** erkan left
[01:21] <diakopter> well, that answers my question - the original lengths don't need retained

[01:22] *** erkan joined
[01:22] *** erkan left
[01:22] *** erkan joined
[01:22] <diakopter> phenny: tell TimToady sorear answered it; see the log..

[01:22] <phenny> diakopter: I'll pass that on when TimToady is around.

[01:22] <[Coke]> +S32-array/splice.rakudo 36 - negative offset dies

[01:22] <sorear> the main thing that makes me nervous about NFG is whether it will make it more expensive to manipulate short strings like the names of variables

[01:22] <sorear> ropes, too

[01:23] <[Coke]> That sad feeling when you git pull and there's nothing new. :|

[01:23] <diakopter> well, strings that have codepoints that fit in 8-bit can still be stored as 8-bit

[01:24] * [Coke] ponders trying to fix the next partcl-nqp bug.

[01:25] * [Coke] considers cleaning up the makefile instead. :P

[01:25] <diakopter> a string with 10m ascii chars with one negative synthetic in the middle can be stored as 3 segments

[01:25] *** whiteknight left
[01:26] <diakopter> I imagine such ropey things would add some space overhead to all string objects

[01:28] <diakopter> so a forced-GC-reachable depth-limited cache-stack of string objects could save on allocations and frees

[01:30] *** MikeFair_ joined
[01:31] *** am0c joined
[01:31] <diakopter> MikeFair_: howdy

[01:31] <MikeFair_> diakopter: Hey there! :)

[01:35] <sorear> Does PCT have a future

[01:35] <sorear> ?

[01:35] <diakopter> what's your guess/opinion?

[01:35] <diakopter>  /vote

[01:36] <MikeFair_> sorear: Hehe - I'm trying to use it now

[01:36] <MikeFair_> sorear: If you mean will people want to use it to make DSLs, then, yes, I do

[01:38] <diakopter> sorear: the other day you were talking about languages' niches. What's Perl 6's niche(s)?

[01:39] <sorear> diakopter: i suspect PCT may be moribund because #perl6 is developing QAST and #parrot is developing PACT, both of which can supplant PCT

[01:39] * diakopter hasn't heard of PACT

[01:39] <sorear> perl 6 is a solution looking for a problem

[01:39] <MikeFair_> sorear:  OHHHH, in that case, I don't think so

[01:40] <MikeFair_> sorear: I'll can say that after reading up more on Perl6 Grammars I wanted to use it to replace A lot of ETL tools

[01:41] <sorear> ??ETL

[01:41] <MikeFair_> Extract Transform Load

[01:41] <sorear> all the systems we're developing using p6grammars for parsing

[01:41] <MikeFair_> The simple act of extracting data from one system, transforming it and shipping it to another, and loading it into the remote system

[01:42] <MikeFair_> sorear: Usually it involves "This system needs it in this format, but that system can only export it in that format, and god forbid we ever need to change the interface of this spec so we better get the fields right the first time"

[01:43] <diakopter> sorear: ETL's one of those industry buzzwords from 10-20 years ago that spawned large commerical software products that still have tons of customers today.  Also there are some open source ones.

[01:43] <MikeFair_> diakopter: Without meaning any offense to any of them, I haven't found one that I really like

[01:44] <MikeFair_> diakopter: A coworker and I were discussing yet another ETL tool and we both agreed that the Perl script I wrote to do the job 6 years ago is still better than anything the tools can do

[01:44] <benabik> sorear: QAST and PACT are, to my mind, are really just next versions of PCT.

[01:44] * MikeFair_ is thinking like benabik.

[01:45] <sorear> *shrug* seems like a pretty common problem, and one p6 is fairly well suited to due to integrated grammars and a focus on data rearranging

[01:46] *** imarcusthis left
[01:47] <MikeFair_> Currently they all seem to think Java is the right tool to do the job, my favorites (at least from a feature set and structure point of view) are MuleESB and Pentaho/Kettle

[01:47] <diakopter> re PACT I see a disassembler and a decompiler.. but no compiler tools?

[01:47] <sorear> at yapc I asked TimToady what the release criteria for perl 1.0.0 were.  "Practical Extraction and Reporting Language.  Extraction and reporting.  Regexes and formats.  That's it."

[01:47] *** imarcusthis joined
[01:48] <diakopter> benabik: how far along would you say PACT is

[01:50] <MikeFair_> sorear: Speaking of QAST, is there anything I can mimic out there in the wild?  I'm having a difficult time with finding out where all this "magic" seems to be coming from in the PCT.  For instance I'm still not seeing where the definition of <EXPR> comes from

[01:51] <sorear> MikeFair_: in one of the PIR files there is .sub 'EXPR'

[01:51] <sorear> it's a hundred lines or so of hand-written parrot assembly

[01:51] <sorear> QAST is currently only used by Rakudo, I think

[01:51] <sorear> but the folks in .no are working to build up examples

[01:52] <benabik> diakopter: Very very early stages.  This was not a productive summer for me.

[01:52] <MikeFair_> sorear: I don't really care if my language runs on rakudo or parrot at this point, and a lot of the semantics I want are straight from Perl6

[01:53] <sorear> benabik: oh, was PACT your gsoc project?

[01:53] <benabik> diakopter: But it's also starting from "replace PIR" and encountering lots of "interesting" corner cases in rarely (directly) used bits of Parrot.

[01:53] <benabik> sorear: Yes.

[01:53] <benabik> sorear: It's _reading_ packfiles now, but I never got to generation.  :-(

[01:53] *** tokuhiro_ left
[01:54] <MikeFair_> sorear: Ok, so does that make <sym> the same kind of thing?

[01:57] <MikeFair_> ok

[01:57] <diakopter> sym is a special placeholder for the operator matched by the proto

[01:57] * MikeFair_ finds everything in src/gen_grammar.pir

[01:58] <sorear> erm

[01:58] <MikeFair_> except for perhaps "sym"

[01:58] <sorear> I think that's a compiler output file

[01:58] *** scott__ joined
[01:58] <sorear> what repository are you looking in?

[01:58] *** FROGGS_ joined
[01:58] <benabik> IIRC, gen_grammar.pir is generated from Grammar.pm

[01:58] <MikeFair_> sorear: I think you're right

[01:59] <MikeFair_> ok

[01:59] <MikeFair_> it's in src, but after running parrot setup.pir

[02:01] <MikeFair_> I ran perl mk_language_shell.pl safire (I couldn't think of a language name so I followed "pearl, ruby, ..."

[02:01] <MikeFair_> moved into the safire directory

[02:01] <sorear> is it deliberately misspelled?

[02:01] <MikeFair_> yes

[02:01] <sorear> ok then

[02:01] <MikeFair_> ;)

[02:02] <MikeFair_> fewer keystrokes and less google collisions this way (not that this will ever hit google, I'll likely have to start over with something new before then)

[02:02] *** FROGGS left
[02:04] <MikeFair_> but anyway, I made a few edits to Grammar/Action/Runtime to create "put" (basically simply a clone of 'say') and ran parrot setup.pir

[02:05] <MikeFair_> I think that's when the gen_grammar.pir showed up

[02:06] <benabik> MikeFair_: If you're trying to understand PCT, I might suggest https://github.com/Benabik/cish  Several people have said it's a valuable addition to the squaak tutorial.

[02:12] <MikeFair_> Definitely! thanks benabik++

[02:12] <MikeFair_> sorear++ 

[02:12] <MikeFair_> I almost forgot about the squaak tutorial

[02:12] <sorear> sorear++?

[02:13] <sorear> what did I do?

[02:13] <MikeFair_> sorear: You've just helped me a lot over the past few days 

[02:13] <diakopter> K is Karma; it's good enough for me

[02:13] <diakopter> *for

[02:14] <MikeFair_> diakopter++ # 'Cause I couldn't leave diakopter out

[02:14] *** Circlepuller_ joined
[02:15] <MikeFair_> sorear: Oh btw, I looked it up again and you were right that I was definitely thinking about IEnumerable with its yield statement and not System.enum

[02:15] <MikeFair_> sorear: not that I'm suprised, I just thought i'd let you know

[02:15] *** Circlepuller left
[02:22] <MikeFair_> benabik: I'm only about 25% of the way through, but so for it seems cish is EXACTLY what I was looking for

[02:22] <MikeFair_> well this cish tutorial

[02:27] *** orafu left
[02:27] *** orafu joined
[02:47] *** daniel-s_ joined
[02:50] *** daniel-s left
[02:57] *** popl joined
[03:04] *** benabik left
[03:05] *** zhutingting1 joined
[03:05] *** benabik joined
[03:08] *** zhutingting left
[03:20] *** Circlepuller joined
[03:22] *** Circlepuller_ left
[03:23] *** cjbot left
[03:26] *** cjbot joined
[03:31] *** popl left
[03:38] *** zhutingting1 left
[04:23] *** skids left
[04:33] *** zhutingting joined
[04:46] *** kaleem joined
[04:50] *** crab2313 joined
[05:01] *** wk left
[05:11] *** thou joined
[05:11] *** crab2313 left
[05:36] *** marmay joined
[05:40] *** dayangkun joined
[05:41] *** dayangkun left
[05:48] *** dayangkun joined
[05:57] *** daniel-s_ is now known as daniel-s

[06:00] *** zhutingting left
[06:02] *** wtw joined
[06:10] *** wamba joined
[06:13] *** cjbot left
[06:16] *** cjbot joined
[06:31] *** odoacre_ is now known as odoacre

[06:38] *** Circlepuller left
[06:39] *** FROGGS_ left
[06:39] *** Circlepuller joined
[06:44] *** birdwindupbird joined
[06:56] *** kurahaupo left
[06:56] *** wtw left
[07:01] *** SamuraiJack joined
[07:06] *** MayDaniel joined
[07:06] *** brrt joined
[07:13] *** GlitchMr joined
[07:20] *** FROGGS joined
[07:20] <FROGGS> gmorning

[07:22] <arnsholt> moin

[07:24] <moritz> good morning

[07:26] *** wamba left
[07:28] *** hoelzro|away is now known as hoelzro

[07:34] *** wamba joined
[07:37] *** kresike joined
[07:37] <kresike> good morning all you happy perl6 people

[07:38] <FROGGS> good morning

[07:40] *** cjbot left
[07:41] <masak> good morning!

[07:43] *** cjbot joined
[07:49] *** wk joined
[07:59] *** REPLeffect left
[08:02] *** wtw joined
[08:04] <tadzik> bad  morning

[08:04] <tadzik> yet I hope it's a good morning to you :)

[08:04] <FROGGS> whats up?

[08:05] <FROGGS> my morning wasnt that bad, just the night (ill kid)

[08:05] <tadzik> neh, just don't feeling to well

[08:05] <FROGGS> ohh, I'm sorry

[08:06] <tadzik> it's alright

[08:06] <tadzik> thanks for looking into Bailador yesterday

[08:07] <FROGGS> I'm doing it right now too

[08:07] <FROGGS> its behaving a little different today O.o

[08:09] <FROGGS> ohh no, it doesnt

[08:10] *** kaur joined
[08:10] <FROGGS> when running the first test, the routes stay defined, the second test case resets the routes somewhere

[08:12] *** lestrrat left
[08:13] *** simcop2387 left
[08:13] *** rjbs left
[08:13] *** lorn_ left
[08:14] *** cjbot left
[08:16] *** cjbot joined
[08:17] *** PZt left
[08:19] *** lestrrat joined
[08:19] *** Psyche^ joined
[08:20] *** lorn joined
[08:21] *** rjbs joined
[08:22] *** Patterner left
[08:22] *** Psyche^ is now known as Patterner

[08:24] *** rjbs left
[08:25] *** lorn left
[08:25] *** lestrrat left
[08:27] *** rjbs joined
[08:28] *** lorn joined
[08:28] *** lestrrat joined
[08:30] *** simcop2387 joined
[08:32] *** dakkar joined
[08:32] *** Liz_ joined
[08:34] *** Liz_ left
[08:34] <GlitchMr> Just wondering, does Perl 6 have something like $^O?

[08:34] <moritz> nr: say $*PERL

[08:34] <GlitchMr> I would like to port File::Spec

[08:35] <p6eval> rakudo f3d2b5: OUTPUT«("name" => "rakudo", "compiler" => {"name" => "rakudo", "ver" => "2012.08-25-g71fc9c5", "release-number" => "", "build-date" => "2012-08-28T00:15:37Z", "codename" => ""}).hash␤»

[08:35] <p6eval> ..niecza v21-1-ga8aa70b: OUTPUT«Any()␤»

[08:35] <moritz> nr: say $*EXECUTABLE_NAME

[08:35] <p6eval> niecza v21-1-ga8aa70b: OUTPUT«/home/p6eval/niecza/run/Niecza.exe␤»

[08:35] <p6eval> ..rakudo f3d2b5: OUTPUT«./nom-inst/bin/perl6␤»

[08:35] <moritz> that one

[08:35] <GlitchMr> But, I don't see operating system information there

[08:36] <moritz> erm wait, I thought you meant $^X

[08:36] <moritz> nr: say $*OS

[08:36] <p6eval> niecza v21-1-ga8aa70b: OUTPUT«Unix␤»

[08:36] <p6eval> ..rakudo f3d2b5: OUTPUT«linux␤»

[08:36] <GlitchMr> ok :)

[08:37] <FROGGS> GlitchMr: if you need the osnames of other system I have several virtual machines

[08:37] <FROGGS> like BSDs, windows and mac

[08:37] <GlitchMr> ;)

[08:37] <FROGGS> just need to install rakudo

[08:37] <FROGGS> but I wanted to do that anyway some day

[08:38] <jnthn> morning o/

[08:38] *** lorn left
[08:38] <masak> jnthn! \o/

[08:40] *** lorn joined
[08:41] <GlitchMr> Just wondering, where $*OS is in spec?

[08:41] *** simcop2387 left
[08:42] <pmichaud> good morning, #perl6

[08:42] <moritz> S28

[08:42] <GlitchMr> Except it isn't

[08:42] <jnthn> nqp: my %h; say(%h<a><b><c>);

[08:42] <p6eval> nqp: OUTPUT«␤»

[08:42] <jnthn> nqp: my %h; say(pir::typeof__SP(%h<a><b><c>));

[08:42] <p6eval> nqp: OUTPUT«Undef␤»

[08:42] <jnthn> nqp: my %h; say(pir::typeof__SP(%h<a><b>));

[08:42] <p6eval> nqp: OUTPUT«Undef␤»

[08:42] <jnthn> nqp: my %h; say(pir::typeof__SP(%h<a>));

[08:42] <p6eval> nqp: OUTPUT«Undef␤»

[08:43] <pmichaud> I think $*OS might nwo be $*DISTRO

[08:43] *** orafu left
[08:43] <moritz> WTF?

[08:43] <jnthn> pmichaud: Should I make NQPMu have the above semantics?

[08:43] <pmichaud> (in S02)

[08:43] <GlitchMr> I guess that $*DISTRO || $*OS will work?

[08:43] <jnthn> pmichaud: That is, let it do keyed lookups and evaluate to itself?

[08:43] <jnthn> (Yes, we have code that depends on this behavior.)

[08:43] <FROGGS> nr: say $*KERNEL.name

[08:43] <p6eval> niecza v21-1-ga8aa70b: OUTPUT«Unhandled exception: Unable to resolve method name in type Any␤  at /tmp/7wy6D92Jbn line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4138 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4139 (module-CORE @ 571) ␤  at /home/p6…

[08:43] <p6eval> ..rakudo f3d2b5: OUTPUT«Dynamic variable name not found␤  in method <anon> at src/gen/CORE.setting:9784␤  in <anon> at src/gen/Metamodel.pm:2304␤  in any find_method_fallback at src/gen/Metamodel.pm:2302␤  in any find_method at src/gen/Metamodel.pm:843␤  in block  at /tmp/OAMB76Ls7b:1␤␤»…

[08:44] *** simcop2387 joined
[08:44] <FROGGS> hmm

[08:44] <pmichaud> jnthn: well, in earlier versions that behavior was part of the ast, not the type.

[08:44] <pmichaud> I'm not sure that belongs in NQPMu

[08:44] <jnthn> pmichaud: I don't think it was...

[08:44] <pmichaud> I'm certain that Undef didn't have a .at_key equivalent.

[08:44] <jnthn> pmichaud: No, we still go through the v-table

[08:47] *** cjbot left
[08:48] <pmichaud> r: my $a;  say $a.at_key('hello');

[08:48] <p6eval> rakudo f3d2b5: OUTPUT«Any()␤»

[08:48] <pmichaud> r: my $a = 5;  say $a.at_key('hello');

[08:48] <p6eval> rakudo f3d2b5: OUTPUT«postcircumfix:<{ }> not defined for type Int␤  in method gist at src/gen/CORE.setting:9779␤  in sub say at src/gen/CORE.setting:7140␤  in block  at /tmp/vuycaC4X1x:1␤␤»

[08:50] *** cjbot joined
[08:53] <moritz> how is the star coming along?

[08:53] *** Circlepuller_ joined
[08:54] *** PZt joined
[08:55] *** Circlepuller left
[08:58] *** lorn left
[08:58] *** simcop2387 left
[08:58] *** lestrrat left
[08:59] *** rjbs left
[09:00] *** brrt left
[09:01] *** rjbs joined
[09:01] <thou> hi, i'd like to test that i'm not recursing too deep in some code. i can tell with { note Backtrace.new }, but i'm trying to get a count. this is giving some weird numbers: { my $b = Backtrace.new; note +@$b; }, see this example code:  https://gist.github.com/3508824

[09:01] *** lestrrat joined
[09:01] *** fhelmberger joined
[09:01] *** lorn joined
[09:01] <thou> is it possible (with callframe or Backtrace) to get a count of how many frames there are?

[09:01] *** SamuraiJack left
[09:03] *** simcop2387 joined
[09:03] <thou> ok Backtrace.new.elems < 10, "Call stack not too deep";  # This is what I want to write

[09:04] <thou> or, better, callframe.depth or something

[09:06] <moritz> thou: sorry, but that's totally the wrong approach

[09:06] *** simcop2387 left
[09:06] <moritz> thou: you should have a dynamic variable (or a temp'ed variable) to track the depth

[09:06] <moritz> thou: backtrace can callframe count block levels too

[09:07] <GlitchMr> > canonpath 'a'

[09:07] <GlitchMr> CHECK FAILED:

[09:07] <GlitchMr> Calling 'canonpath' will never work with argument types (str) (line 1)

[09:07] <GlitchMr>     Expected: :($first, @rest)

[09:07] <GlitchMr> huh?

[09:07] <GlitchMr> sub canonpath($first, @rest) is export {

[09:07] <moritz> did you mean ($first, *@rest) ?

[09:08] <GlitchMr> oh, I forgot

[09:08] <jnthn> CHECK time checking for the win :)

[09:08] <thou> moritz: right, i know it's brittle in that way. what i'm looking at is a kind of event stream, the event listeners can fire events. i want to ensure that the code that processes those events is iterative and not being recursive

[09:09] <pmichaud> (star)  I think it's in good shape.  Anyone know if tadzik was able to get Bailador updated?  (I haven't read backscroll yet; too many other things in the way at the moment.)

[09:09] <masak> I think he said he might have tuits tonight.

[09:09] *** lorn left
[09:09] <tadzik> I'll be home around 17, it seems

[09:09] <pmichaud> okay.

[09:09] <pmichaud> 17... utc?  utc+* ?

[09:09] <thou> so i can fire off an event chain, use the counter like you suggest, and bail out after, say 1000 events get triggered. but at that point, i want to ensure that the call frame is roughly the same as when i started the event chain.

[09:09] <tadzik> erm

[09:09] <tadzik> in 6 hours

[09:10] <thou> i'm OK with leaving this test out

[09:10] <pmichaud> tadzik++

[09:10] <thou> just was wondering if it's possible....

[09:10] <tadzik> FROGGS++ did some investigation on the issue

[09:10] <moritz> thou: the default Backtrace stringification tries hard to filter out callframes a normal human isn't interested in

[09:10] <moritz> thou: try .full if you want to see all the gory details

[09:10] <thou> right, i saw the .full() method

[09:10] <pmichaud> my schedule has gotten really weirdish in the last three hours.  (more)

[09:11] *** lorn joined
[09:11] *** simcop2387 joined
[09:11] <pmichaud> I'm going to go ahead and finish up the build work, document it, and build a candidate tarball containing the broken bailador.

[09:11] *** lestrrat left
[09:11] <thou> i could count the \n in the Backtrace.Str. just weird that .elems (or .end) is so far off.

[09:11] *** simcop2387 left
[09:11] <pmichaud> others can test the candidate tarball and see if there are other issues or problems.

[09:11] <dalek> nqp/toqast: e817f40 | jonathan++ | src/how/NQPClassHOW.pm:

[09:11] <dalek> nqp/toqast: Fix vtable mapping handling so that it doesn't ignore mappings of handlers from attributes.

[09:11] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/e817f409a4

[09:11] <dalek> nqp/toqast: 884d509 | jonathan++ | src/core/NQPMu.pm:

[09:11] <dalek> nqp/toqast: Give NQPMu a default at_pos and at_key for type object invocants, like we have for Any in Rakudo.

[09:11] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/884d509bb5

[09:11] <moritz> thou: simply don't got that way

[09:12] *** lestrrat joined
[09:12] <pmichaud> I don't know if I'll have time later tonight, tomorrow, or friday to make a new star tarball.  You all can decide whether to (1) release the tarball I create today, (2) create a new tarball, (3) postpone until later.

[09:12] <thou> like the elems is 91312, and the number of frames is 13

[09:12] <thou> moritz: ok, i'll drop that idea

[09:13] *** simcop2387 joined
[09:14] *** GlitchMr left
[09:18] *** lorn left
[09:18] *** rjbs left
[09:18] *** lestrrat left
[09:19] *** simcop2387 left
[09:20] *** am0c left
[09:21] *** simcop2387 joined
[09:21] *** dayangkun left
[09:21] *** lestrrat joined
[09:22] *** lorn joined
[09:22] *** MikeFair_ left
[09:26] *** simcop2387 left
[09:26] <jnthn> r: my $*DEPTH := 0; sub foo() { ENTER $*DEPTH++; LEAVE $*DEPTH--; say $*DEPTH; foo() if $*DEPTH <= 10; }; foo()

[09:26] <p6eval> rakudo f3d2b5: OUTPUT«===SORRY!===␤Cannot use bind operator with this left-hand side␤at /tmp/tYrsFFLIAJ:1␤»

[09:26] <jnthn> er

[09:26] <jnthn> r: my $*DEPTH = 0; sub foo() { ENTER $*DEPTH++; LEAVE $*DEPTH--; say $*DEPTH; foo() if $*DEPTH <= 10; }; foo()

[09:26] <p6eval> rakudo f3d2b5: OUTPUT«1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤11␤»

[09:26] <jnthn> Too much NQP :)

[09:26] *** rjbs joined
[09:27] <moritz> r: my $depth = 0; sub foo { temp $depth; $depth++; say $depth; foo() if $depth < 10 }; foo

[09:27] <p6eval> rakudo f3d2b5: OUTPUT«1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤»

[09:27] <moritz> r: my $depth = 0; sub foo { temp $depth++; say $depth; foo() if $depth < 10 }; foo

[09:27] <p6eval> rakudo f3d2b5: OUTPUT«1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤Cannot assign to a readonly variable or a value␤  in sub foo at /tmp/EbHBBheTNI:1␤  in sub foo at /tmp/EbHBBheTNI:1␤  in sub foo at /tmp/EbHBBheTNI:1␤  in sub foo at /tmp/EbHBBheTNI:1␤  in sub foo at /tmp/EbHBBheTNI:1␤  in sub foo at /tmp/EbHBB…

[09:27] <moritz> r: my $depth = 0; sub foo { ++temp $depth; say $depth; foo() if $depth < 10 }; foo

[09:27] <p6eval> rakudo f3d2b5: OUTPUT«1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤»

[09:28] <moritz> r: my $depth = 0; sub foo { ++temp $depth; say $depth; foo() if $depth < 10; say $depth }; foo

[09:28] <p6eval> rakudo f3d2b5: OUTPUT«1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤10␤9␤9␤9␤9␤9␤9␤9␤9␤9␤»

[09:28] <moritz> oops.

[09:28] <moritz> r: my $depth = 0; sub foo { temp $depth; $depth++; say $depth; foo() if $depth < 10; say $depth }; foo

[09:28] <p6eval> rakudo f3d2b5: OUTPUT«1␤2␤3␤4␤5␤6␤7␤8␤9␤10␤10␤9␤9␤9␤9␤9␤9␤9␤9␤9␤»

[09:28] <moritz> EBUG

[09:28] <FROGGS> explain that^^ :P

[09:28] <aloha> positive: nothing; negative: nothing; overall: 0.

[09:29] <moritz> FROGGS: which part?

[09:29] <FROGGS> the output, why do I see 10 9 9 9 ...

[09:29] <moritz> because of a rakudobug

[09:29] <FROGGS> about temp vars?

[09:29] <jnthn> More about UNDO, iirc.

[09:30] <jnthn> (which temp vars are implemented with)

[09:30] <hoelzro> so...looking at the "how to help page", I'd say I fall under the "Developers willing to learn Parrot".  Uh...how do I get started?

[09:30] *** marmay left
[09:31] <pmichaud> heh

[09:31] <cjbot> @Erebuss tweeted 'J'ai hate qu'on parle des failles de PERL 6 ... ca voudra dire qu'il est sortie :D'

[09:31] *** lestrrat left
[09:31] *** lorn left
[09:32] *** rjbs left
[09:33] <pmichaud> hoelzro: I wonder if we still want/need the "Developers willing to learn Parrot" part, though.

[09:33] * pmichaud looks at the page.

[09:33] <moritz> hoelzro: read the sources and the docs, hang out on #parrot, ask questions

[09:33] <pmichaud> we might want to say "Developers willing to learn NQP" :-)

[09:33] <hoelzro> heh

[09:34] <hoelzro> I've taken a (small) look at NQP

[09:34] <pmichaud> is there anything on the ROADMAP that looks interesting to you?

[09:36] *** lestrrat joined
[09:37] *** simcop2387 joined
[09:37] * hoelzro looks

[09:37] *** lorn joined
[09:38] <hoelzro> I suppose I wouldn't mind starting with fixing some of the bugs I found, so my chat bot can work ;)

[09:38] <pmichaud> that's an excellent start.

[09:39] *** simcop2387 left
[09:39] <hoelzro> I could use some guidance on how to fix fully qualified method calls to methods implemented by roles, then ;)

[09:39] <hoelzro> I have a test in roast

[09:39] <hoelzro> S12-methods/qualified.t, iirc

[09:40] <pmichaud> looking

[09:40] *** wamba left
[09:40] *** simcop2387 joined
[09:40] <hoelzro> thanks =)

[09:41] <pmichaud> looks like I need to rebuild rakudo... doing that now.

[09:41] * hoelzro has noticed how much easier things are when the project lead is in your timezone

[09:42] *** rjbs joined
[09:42] <jnthn> hoelzro: I've been pondering how to fix that. It's...not too easy because we need to find the applicable concrete role; the reason past attempts didn't work is 'cus we tried to do it on the parametric role.

[09:44] <hoelzro> I see

[09:45] <hoelzro> I'm willing to put in some effort to fix it (I think I'd be a cool exercise in helping me to figure out how everything works), but help is definitely appreciated along the way =)

[09:46] <cjbot> @dwarf_power tweeted 'RT @Erebuss: J'ai hate qu'on parle des failles de PERL 6 ... ca voudra dire qu'il est sortie :D'

[09:50] <pmichaud> I just got another segfault while compiling nqp-mo.pir

[09:50] <pmichaud> That's something we really really need to fix :-(

[09:50] <pmichaud> when did it start showing up, ooc?

[09:50] * masak .oO( cjbot, the latest in p6 troll injection technology )

[09:50] <dalek> nqp/toqast: 39b2a95 | jonathan++ | src/NQP/Actions.pm:

[09:50] <dalek> nqp/toqast: Avoid the global NQPMu thing, which is a Very Bad Idea in a bootstrapping compiler. What was I thinking?!

[09:50] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/39b2a95427

[09:50] <dalek> nqp/toqast: b39cf30 | jonathan++ | / (10 files):

[09:50] <dalek> nqp/toqast: Update the stage0 to the QAST-based NQP. \o/

[09:50] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/b39cf30df3

[09:53] <moritz> jnthn++

[09:53] <tadzik> woo :)

[09:53] <jnthn> Next up is getting Rakudo to build on it :)

[09:56] <pmichaud> hoelzro: the qualified.t bug you found is likely going to require jnthn++'s guidance to fix

[09:58] *** cjbot left
[09:58] <arnsholt> jnthn: Are these the changes you're expecting to change how to access the nativesize stuff?

[10:01] *** cjbot joined
[10:01] <pmichaud> afk, lunchtime here

[10:01] <jnthn> arnsholt: No, this is getting NQP using QAST

[10:01] <pmichaud> (instead of PAST)

[10:02] <arnsholt> Right, right

[10:02] <cjbot> @daveoflynn tweeted '@rioter @surfichris If the base don't want to go, how do you propose to drag them? cf. Python 3,  Perl 6'

[10:03] * masak .oO( we sneak in in the middle of the night and remove Perl 5 from their computers )

[10:04] <tadzik> [Coke]: maybe cjbot could give tweet urls as well?

[10:04] <FROGGS> you just need to release a buggy CPAN.pm...

[10:04] <huf> meh, concentrate on the new generation. the old ones will die out eventually ;)

[10:05] <huf> it's way too hard to change ideas inside people's heads

[10:05] <masak> I don't want the Perl 5 people to die out.

[10:05] <tadzik> thing is, they are reproducting :)

[10:05] <tadzik> *reproducing?

[10:05] <masak> "if they're dead, how can I steal their ideas?" -- mst

[10:05] <huf> :D

[10:05] <arnsholt> mst is very quote-worthy

[10:06] <FROGGS> and watch-worthy... I want that video!!

[10:06] <FROGGS> now!

[10:06] <tadzik> did you miss the keynote?

[10:07] <FROGGS> no, but I wanna show my wife

[10:07] <FROGGS> tadzik: I fixed the second test btw

[10:08] <tadzik> FROGGS: \o/

[10:08] <tadzik> awesome

[10:08] <FROGGS> just two lines btw -.-

[10:09] <tadzik> looking forward to seeing the patch

[10:09] <tadzik> did it fix everything else too?

[10:09] <FROGGS> ya

[10:09] <tadzik> thought so

[10:09] <tadzik> FROGGS++

[10:09] <tadzik> care to send a pull request?

[10:09] <FROGGS> well, nr 1 and 3 passes, nr4 has a problem with path. but it looks like its the same problem, compiling right now

[10:10] <FROGGS> ya, I wanna clone your repo in a minute

[10:10] <FROGGS> s/clone/fork/

[10:11] <tadzik> awesome, thanks

[10:14] *** scott__ left
[10:14] *** xinming_ joined
[10:17] *** xinming left
[10:18] *** ppabian joined
[10:21] *** cjbot left
[10:24] *** cjbot joined
[10:26] <ppabian> r: X::AdHoc.new.throw # some weird errors (or it is not supposed to be used this way)

[10:26] <p6eval> rakudo f3d2b5: OUTPUT«No such method 'VAR' for invocant of type 'Any'␤  in method Str at src/gen/CORE.setting:726␤  in method message at src/gen/CORE.setting:8840␤  in block  at /tmp/X2XxpIZFqW:1␤␤»

[10:26] <moritz> ppabian: it is not

[10:26] *** ppabian is now known as bbkr

[10:26] <tadzik> r: try die "omg noez"; say $!.perl

[10:26] <p6eval> rakudo f3d2b5: OUTPUT«X::AdHoc.new(payload => "omg noez")␤»

[10:26] <moritz> right, that's the easy way

[10:26] <moritz> the hard way is

[10:26] <tadzik> r: X::AdHoc.new(payload => "argd").throw

[10:26] <p6eval> rakudo f3d2b5: OUTPUT«argd␤  in block  at /tmp/IWpp2YT7QA:1␤␤»

[10:26] <moritz> correct

[10:26] <moritz> tadzik++

[10:26] <tadzik> LTA error though

[10:27] <bbkr> yes, should warn about required payload

[10:27] * bbkr reports

[10:27] <moritz> now, you shouldn't use X::AdHoc yourself

[10:27] <moritz> s/now/no/

[10:27] *** daxim joined
[10:28] <bbkr> oh, ok

[10:28] <cjbot> @carlmasak tweeted '"There is much work yet to be done in [designing programming languages]..." https://t.co/LBvQcfHM That's what Perl 6 has taught me, too.'

[10:29] <masak> in a good way, I might add.

[10:30] <moritz> right, there's room for improvement

[10:31] *** brrt joined
[10:32] <tadzik> FROGGS: I looked at the path, and I wonder if it's not add_route that's actually broken

[10:33] <tadzik> it should probably add routes to the app it's invoked on, not on $current

[10:33] <tadzik> but this whole Bailador::App business is a really hand-wavey shamanism atm, so it doesn't matter much :)

[10:34] <masak> I rather like living in a world where we're not done yet designing and evolving our languages. I think many people don't consider the opportunities in mucking around on the language design level. :)

[10:34] <FROGGS> tadzik: see https://github.com/FROGGS/Bailador/commit/d6d17114ba62358c9b56a20491477519674e3ca0

[10:34] <tadzik> oh

[10:34] <tadzik> hm

[10:34] <dalek> rakudo/nom: d703632 | moritz++ | src/Perl6/Grammar.pm:

[10:34] <dalek> rakudo/nom: warn on obsolete use of \ and | with sigilled parameter

[10:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d7036329db

[10:35] <FROGGS> tadzik: I cant explain why pushing to and reading from %.routes doesnt work

[10:35] <tadzik> I only read the first part of your path, that confused me

[10:35] <tadzik> yeah, I have no idea either

[10:35] <tadzik> odd

[10:36] <tadzik> okay, but it's fixed and we can ship it :)

[10:36] <tadzik> or, or

[10:36] <FROGGS> not yet, patching the 4th test right now

[10:36] <tadzik> or, hm

[10:36] <tadzik> ok

[10:37] <FROGGS> you are trying to open views/simple.tt but you are not in folder Bailador

[10:37] <FROGGS> cwd is rakudo-2012.08, so two level up

[10:40] <tadzik> huh

[10:40] <tadzik> I don't think that should matter

[10:41] <tadzik> Bailador::import should fetch the directory the file's in

[10:41] <tadzik> and then load templates relatively

[10:41] <FROGGS> location is unset

[10:41] <FROGGS> hmmm

[10:42] <tadzik> I'm afraid that if you write an accessor method which does $current.location it'll work

[10:42] <tadzik> something somewhere's horribly broken with our objects

[10:45] <thou> stealing masak's idea to write if as a fun way to learn (early stages): https://github.com/softmoth/p6-if

[10:49] *** tokuhiro_ joined
[10:54] <masak> ooh

[10:55] <masak> thou: are you blogging about it, too?

[10:55] *** PZt left
[10:56] <thou> ===SORRY!=== blog NYI

[10:57] <thou> :-)

[10:57] <thou> but, yeah, i really should

[10:58] <dalek> nqp/toqast: 8c12e83 | jonathan++ | src/core/NQPMu.pm:

[10:58] <dalek> nqp/toqast: Eliminate call to nqp_set_nqpmu.

[10:58] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/8c12e83d67

[10:58] <masak> thou: yeah, you really should. :)

[11:03] *** gv joined
[11:08] *** thou left
[11:16] <dalek> rakudo/nqpqast: 54d1cf4 | jonathan++ | src/Perl6/ (6 files):

[11:16] <dalek> rakudo/nqpqast: First round of PIR op fixes, plus changing some to nqp::.

[11:16] <dalek> rakudo/nqpqast: review: https://github.com/rakudo/rakudo/commit/54d1cf40f4

[11:18] *** gv left
[11:31] *** cjbot left
[11:34] *** cjbot joined
[11:36] *** marmay joined
[11:38] *** cjbot left
[11:41] *** cjbot joined
[11:44] *** skids joined
[11:56] *** wamba joined
[11:57] *** skids left
[11:57] *** wamba left
[11:59] *** wamba joined
[12:00] *** bbkr left
[12:03] <dalek> nqp/toqast: da99914 | jonathan++ | src/NQP/ (2 files):

[12:03] <dalek> nqp/toqast: Ensure --vmlibs takes effect for on-demand compiled code.

[12:03] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/da99914749

[12:12] <jnthn> nqp: class Foo { }; BEGIN { say(Foo.HOW.name(Foo)) }

[12:12] <p6eval> nqp: OUTPUT«Foo␤»

[12:13] <dalek> star/build3: 900c0c4 | pmichaud++ | tools/ (2 files):

[12:13] <dalek> star/build3: Add script to run module tests.

[12:13] <dalek> star/build3: review: https://github.com/rakudo/star/commit/900c0c422b

[12:13] <dalek> star/build3: 03ba312 | pmichaud++ | docs/announce/2012.08:

[12:13] <dalek> star/build3: Update draft release announcement for 2012.08.

[12:13] <dalek> star/build3: review: https://github.com/rakudo/star/commit/03ba312a5f

[12:15] <moritz> r: say ucfirst 'foo'

[12:15] <p6eval> rakudo d70363: OUTPUT«Foo␤»

[12:16] <pmichaud> ah, ucfirst isn't gone.

[12:16] <pmichaud> fixing.

[12:16] <moritz> r: say lcfirst 'FOO'

[12:16] <p6eval> rakudo d70363: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&lcfirst' called (line 1)␤»

[12:17] <moritz> pmichaud: did you see docs/deprecations in rakudo?

[12:17] <pmichaud> no.

[12:18] <moritz> but it seems that the star announcement has all of those

[12:18] <pmichaud> I think I looked at the rakudo release announcement.

[12:21] *** cjbot left
[12:23] <dalek> star/build3: 20d5676 | pmichaud++ | README.star:

[12:23] <dalek> star/build3: Update README.star with pointers to new build process.

[12:23] <dalek> star/build3: review: https://github.com/rakudo/star/commit/20d56766c5

[12:23] <dalek> star/build3: 641a630 | pmichaud++ | / (2 files):

[12:23] <dalek> star/build3: Update README, exclude README.star from distribution tarballs.

[12:23] <dalek> star/build3: review: https://github.com/rakudo/star/commit/641a630663

[12:24] *** cjbot joined
[12:26] <diakopter> cjbot: a/s/l

[12:27] <diakopter> 32/M/SFO here

[12:28] <dalek> nqp/toqast: 8ac7d80 | jonathan++ | src/NQP/Actions.pm:

[12:28] <dalek> nqp/toqast: Optimize some type lookups.

[12:28] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/8ac7d80230

[12:28] <dalek> rakudo/nqpqast: 2874f19 | jonathan++ | src/Perl6/Metamodel/ (5 files):

[12:28] <dalek> rakudo/nqpqast: Fixes to get metamodel to compile with updated NQP.

[12:28] <dalek> rakudo/nqpqast: review: https://github.com/rakudo/rakudo/commit/2874f19744

[12:28] <dalek> rakudo/nqpqast: 89aefb2 | jonathan++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[12:28] <dalek> rakudo/nqpqast: A couple of fixes to BOOTSTRAP, though it doesn't yet work.

[12:28] <dalek> rakudo/nqpqast: review: https://github.com/rakudo/rakudo/commit/89aefb2fe4

[12:29] <dalek> star/build3: 17285bb | pmichaud++ | docs/announce/2012.08:

[12:29] <dalek> star/build3: Correct ucfirst notes in announcement.

[12:29] <dalek> star/build3: review: https://github.com/rakudo/star/commit/17285bbe39

[12:29] * masak guesses cjbot is 0/B/Internet

[12:31] <flussence> is there any way I can lie to parrot about how much RAM I have? having to manually modify nqp/Makefile every time I do a git pull is pretty tiring...

[12:31] <pmichaud> ...modify nqp/Makefile?

[12:32] <pmichaud> what sort of modification are you doing?

[12:32] <flussence> to work around that gc bug that's been happening for months

[12:32] <tadzik> what gc bug? :|

[12:32] <flussence> core.setting stage2 doesn't build without -G

[12:33] <dalek> star/build3: 651aa54 | pmichaud++ | tools/build/Makefile.in:

[12:33] <dalek> star/build3: Add modules-test target.

[12:33] <dalek> star/build3: review: https://github.com/rakudo/star/commit/651aa547ec

[12:39] *** JimmyZ joined
[12:39] <[Coke]> tadzik: should the URL show up first? last?

[12:40] * [Coke] guesses first to avoid wrapping issues.

[12:41] <tadzik> good point

[12:41] <tadzik> or in separate line, as dalek does it

[12:46] <dalek> nqp/toqast: 9834252 | jonathan++ | src/how/NQPClassHOW.pm:

[12:46] <dalek> nqp/toqast: Fix thinko that broke initialization of @ and % attributes.

[12:46] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/9834252a5d

[12:47] *** cjbot left
[12:48] * [Coke] tries "url : text" since the url has the from_user in it.

[12:49] <sirrobert> I've got a snippet that gets into a runaway loop (and shouldn't, I think).  If I demo it here it won't break anything, right?

[12:49] <masak> it won't break anything.

[12:50] <sirrobert> r: class A { method Str () { say self.WHAT; return 'foo'; }; method gist () { return self.Str; }; }; print A.new;

[12:50] <p6eval> rakudo d70363: OUTPUT«(timeout)»

[12:50] <sirrobert> the line "say self.WHAT" is causing the loop

[12:50] <sirrobert> but self shouldn't be passed into Str again, self.WHAT should, right?

[12:51] <sirrobert> well, I guess I didn't need the gist in this version =)

[12:51] <pmichaud> self.WHAT for a type object is self

[12:51] <pmichaud> and note that you're defining Str() for the type object as well.

[12:51] <arnsholt> say probably calls .gist on the .WHAT which will call Str, which will call say, which will call..

[12:51] <sirrobert> well, it breaks here too

[12:52] <pmichaud> you probably want   method Str (A:D:) { ... }

[12:52] <sirrobert> r: class A { method Str () { say self.WHAT; return 'foo'; }; }; print A.new;

[12:52] <p6eval> rakudo d70363: OUTPUT«A()␤foo»

[12:52] <[Coke]> cjbot: help

[12:52] *** SamuraiJack joined
[12:52] <sirrobert> pmichaud: hmm... let me process that, one sec

[12:52] <sirrobert> so Str is a class method as well?

[12:52] <pmichaud> yes.

[12:52] *** cjbot joined
[12:53] <pmichaud> and A is an instance of the class (it happens to be the undefined type instance)

[12:53] <[Coke]> cjbot: help

[12:53] <[Coke]> O_o

[12:53] <[Coke]> cjbot: help

[12:53] <sirrobert> pmichaud: ok, I didn't know that methods were instance- AND class-methods

[12:53] <sirrobert> that's kind of weird-cool

[12:53] <cjbot> Run by Coke, I relay tweets about Perl 6 from http://search.twitter.com/search.json?q=%23perl6%20OR%20%23p6p5%20OR%20%23p5p6%20OR%20%22perl%206%22

[12:54] <[Coke]> cjbot, you're slow.

[12:54] <frettled> oh no, another chatty bot ;)

[12:54] <sirrobert> but attributes aren't class attributes

[12:54] <[Coke]> hurm. I should rework that so it takes you to the user facing one.

[12:55] <sirrobert> pmichaud:  is there a way to define a class attribute?  Or is it just a scoped var in the class definition?

[12:56] <pmichaud> scoped var, mainly.

[12:56] <sirrobert> ok, cool.  thanks

[12:56] *** cjbot left
[12:59] *** cjbot joined
[12:59] <dalek> star/build3: f9632ae | pmichaud++ | / (2 files):

[12:59] <dalek> star/build3: More release guide updates.

[12:59] <dalek> star/build3: review: https://github.com/rakudo/star/commit/f9632ae5ac

[13:01] <[Coke]> tadzik: updated.

[13:03] <tadzik> \o/

[13:03] *** marmay left
[13:04] *** wamba left
[13:05] *** Vlavv` joined
[13:09] *** Vlavv_ left
[13:15] <moritz> http://www.reddit.com/r/programming/comments/yz83s/why_is_clean_code_suggesting_avoiding_protected/ I was quite surprised to see the top comment quoting me :-)

[13:16] <pmichaud> ...possible commit flood.

[13:16] <dalek> Heuristic branch merge: pushed 40 commits to star by pmichaud

[13:16] <pmichaud> ...or not.

[13:16] * [Coke] gives dalek a scooby snack.

[13:19] <jnthn> :)

[13:21] <moritz> Bailador works on rakudo HEAD, it seems

[13:21] <moritz> at least the tests pass

[13:21] <tadzik> FROGGS/Bailador, or tadzik/Bailador?

[13:21] <moritz> tadzik/Bailador

[13:21] <tadzik> ehh

[13:21] <moritz> oh, I might have old, precompiled .pir files there

[13:22] <tadzik> please check

[13:22] <pmichaud> thinking about it a bit, though, I'm not sure Bailador belongs in Star releases.

[13:22] <moritz> ok, I'm now seeing the test failures

[13:22] <tadzik> ok, then I still don't understand stuff :)

[13:22] *** ObseLeTe joined
[13:22] <moritz> pmichaud: what stuff belongs into star releases?

[13:22] <tadzik> pmichaud: it's a question of what we want to actually put in Star Releases

[13:22] <pmichaud> I suppose it can go in the star releases; but it would feel a bit weird for Dancer to be in a Perl 5 release.  :-/

[13:22] <tadzik> well

[13:23] <moritz> pmichaud: well, ActiveState includes stuff like Dancer

[13:23] <sirrobert> r: say 4.isa: Num;

[13:23] <p6eval> rakudo d70363: OUTPUT«False␤»

[13:23] <moritz> perl 5 core doesn't, but it's not really a distribution

[13:23] <tadzik> I thought we were putting just generally Useful Modules in there

[13:23] <pmichaud> useful modules++

[13:23] <sirrobert> Why isn't 4 a Num?  (and can I see what else 4 is besides Int?)

[13:23] <tadzik> see also: Math::Model

[13:23] <pmichaud> anyway, it can remain for now.

[13:23] <pmichaud> sirrobert: Num are floating point values

[13:23] <sirrobert> pmichaud: ohh... 

[13:23] <moritz> r: say 4.^mro

[13:23] <p6eval> rakudo d70363: OUTPUT«Int() Cool() Any() Mu()␤»

[13:24] <pmichaud> r: say 4.isa: Numeric

[13:24] <p6eval> rakudo d70363: OUTPUT«False␤»

[13:24] *** wamba joined
[13:24] <sirrobert> moritz: ahh cool, thanks

[13:24] <moritz> r: say 4 ~~ Numeric

[13:24] <p6eval> rakudo d70363: OUTPUT«True␤»

[13:24] <moritz> r: say 4 ~~ Real

[13:24] <p6eval> rakudo d70363: OUTPUT«True␤»

[13:24] *** wamba left
[13:24] <tadzik> pmichaud: now we have a problem with it not working :)

[13:24] <moritz> r: say 4.^roles

[13:24] <p6eval> rakudo d70363: OUTPUT«Real()␤»

[13:24] <sirrobert> r: say 4.isa: Float;

[13:24] <p6eval> rakudo d70363: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&Float' called (line 1)␤»

[13:24] <moritz> sirrobert: it's spelled Num :-)

[13:24] *** wamba joined
[13:24] <sirrobert> out of curiosity, why "Num" instead of Float?

[13:24] <sirrobert> (since "Num" seems slightly inaccurate)

[13:25] <pmichaud> not entirely sure.  Might be because it's 3-chars, like Int Str Buf Any   etc.

[13:25] <moritz> sirrobert: http://doc.perl6.org/images/type-graph-Real.svg

[13:25] <pmichaud> it's also possible that at one time Num wasn't going to have to be a float

[13:25] *** wamba left
[13:25] <pmichaud> (it might even be possible _now_ that Num doesn't represent floats for some implementations)

[13:25] <pmichaud> Num really means "number that isn't int nor rat"

[13:25] <moritz> pmichaud: I'm pretty sure the spec says it's a floating point

[13:26] <pmichaud> from S02:  "    Num         Perl number (approximate Real, generally via floating point)

[13:27] <moritz> hm

[13:27] <pmichaud> to me, "generally" implies "perhaps not"  :-)

[13:27] *** wamba joined
[13:27] <sirrobert> r: say 4.^mro

[13:27] <p6eval> rakudo d70363: OUTPUT«Int() Cool() Any() Mu()␤»

[13:27] <sirrobert> Why doesn't that include "Real" or "Numeric" >?

[13:27] <pmichaud> Real and Numeric are roles

[13:27] <sirrobert> oh

[13:27] <moritz> which is also why .isa doesn't work

[13:28] <sirrobert> ohhh that's why they're blue

[13:28] <sirrobert> in the diagram

[13:28] <moritz> r: say 4.^mro>>.^roles

[13:28] <p6eval> rakudo d70363: OUTPUT«Real()   ␤»

[13:28] <sirrobert> w

[13:28] <sirrobert> wrong window =)

[13:29] <dalek> star: 5c86ef5 | pmichaud++ | tools/star/release-guide.pod:

[13:29] <dalek> star: Add first version of Star release guide.

[13:29] <dalek> star: review: https://github.com/rakudo/star/commit/5c86ef586a

[13:35] <dalek> star: ca657ae | pmichaud++ | tools/star/release-guide.pod:

[13:35] <dalek> star: Finish up the release-guide.pod file.

[13:35] <dalek> star: review: https://github.com/rakudo/star/commit/ca657ae9dd

[13:36] <daxim> moritz++ for the funny yellow hat phrase/concept

[13:36] *** gongyiliao left
[13:37] *** skids joined
[13:37] *** fgomez left
[13:41] <pmichaud> Star 2012.08 release candidate at http://pmichaud.com/sandbox/rakudo-star-2012.08-rc1.tar.gz 

[13:41] <pmichaud> this one is created using the new build tools, so testing would be welcomed.

[13:42] * moritz kicks off a build

[13:43] <colomon> pmichaud: what's the status of your new t-shirt design?

[13:46] <pmichaud> colomon: I tried uploading to cafepress but ran into some issues.  Want me to just post the files somewhere?

[13:46] <pmichaud> or I could try zazzle/spreadshirt/other

[13:46] *** kaare__ joined
[13:47] <colomon> hmmm.... I don't want you to waste too much time on it, but I'd like to have a t-shirt.

[13:47] <pmichaud> I'm sure I'll get them online at cafepress eventually; I was running into network issues when I worked on it a few days ago (from my hotel)

[13:48] <colomon> oh, I can be patient, if that's the only problem!

[13:49] * colomon is at least willing to pretend his patient....  

[13:49] <colomon> *he is

[13:56] *** colomon left
[13:57] *** FROGGS left
[14:00] *** fgomez joined
[14:02] <dalek> nqp/toqast: 1fbf703 | jonathan++ | src/NQP/Actions.pm:

[14:02] <dalek> nqp/toqast: Optimize package lookups where the first part is lexical; also fixes them inside of BEGIN blocks.

[14:02] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/1fbf7033f8

[14:02] <dalek> nqp/toqast: 602bf23 | jonathan++ | src/QAST/Compiler.nqp:

[14:02] <dalek> nqp/toqast: Fix compilation of parameter lists with nameds and positional slurpies.

[14:02] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/602bf238b2

[14:02] <dalek> nqp/toqast: 017a3d3 | jonathan++ | t/nqp/37-slurpy.t:

[14:02] <dalek> nqp/toqast: Add a test for slurpy/named interaction.

[14:02] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/017a3d33e4

[14:03] <jnthn> git st

[14:03] <jnthn> oops

[14:03] <dalek> rakudo/nqpqast: 71916b5 | jonathan++ | src/Perl6/Metamodel/ (7 files):

[14:03] <dalek> rakudo/nqpqast: Various bits of initialization cleanup.

[14:03] <dalek> rakudo/nqpqast: review: https://github.com/rakudo/rakudo/commit/71916b5652

[14:03] <dalek> rakudo/nqpqast: 1b076c8 | jonathan++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[14:03] <dalek> rakudo/nqpqast: Diddle BOOTSTRAP.pm enough for it to build.

[14:03] <dalek> rakudo/nqpqast: review: https://github.com/rakudo/rakudo/commit/1b076c82ed

[14:03] <dalek> rakudo/nqpqast: ebc4a05 | jonathan++ | src/Perl6/World.pm:

[14:03] <dalek> rakudo/nqpqast: World needs a BUILD (can revisit after refactoring HLL::World, though).

[14:03] <dalek> rakudo/nqpqast: review: https://github.com/rakudo/rakudo/commit/ebc4a05d91

[14:05] *** fgomez left
[14:06] *** colomon joined
[14:08] *** stopbit joined
[14:09] *** FROGGS joined
[14:09] <FROGGS> tadzik: I made a pull request

[14:10] <FROGGS> tadzik: there is a patch for MIME::Base64 (and a pull request made by moritz); if this get applied too all tests are fine

[14:13] <FROGGS> tadzik: you maybe use moritz's fork instead since snarkyboojum isnt that active as it seems

[14:17] *** kaleem left
[14:17] <moritz> pmichaud: Testing modules/jsonrpc...

[14:17] <moritz> t/client.t .. ===SORRY!===

[14:17] <moritz> Missing or wrong version of dependency 'src/gen/CORE.setting'

[14:17] <moritz> seems some precompilation stuff is broken

[14:17] <pmichaud> ummmmm....

[14:18] <pmichaud> did you make -j, ooc?

[14:18] <moritz> (I have a perl6 binary in $PATH)

[14:18] <arnsholt> jnthn: My alias is just git s for that (assuming it is what I think it is =)

[14:18] <moritz> pmichaud: I did make -j, and make install without -j

[14:18] <moritz> (as used to work in previous stars

[14:18] <pmichaud> hmmm.

[14:18] <moritz> retrying with make

[14:18] <pmichaud> afaik all of the paths are fully qualified

[14:18] <pmichaud> but let me check.

[14:21] * pmichaud really dislikes the "Missing or wrong version" error.  It should either say "Missing" or "Wrong version" but not leave me guessing which it is.

[14:23] <dalek> rakudo/nqpqast: bbda747 | jonathan++ | src/Perl6/World.pm:

[14:23] <dalek> rakudo/nqpqast: Use 'new' to construct statix lexpad properly.

[14:23] <dalek> rakudo/nqpqast: review: https://github.com/rakudo/rakudo/commit/bbda747a01

[14:23] <dalek> rakudo/nqpqast: 59bf84e | jonathan++ | src/Perl6/Actions.pm:

[14:23] <dalek> rakudo/nqpqast: Harden parameter trait handling.

[14:23] <dalek> rakudo/nqpqast: review: https://github.com/rakudo/rakudo/commit/59bf84e99d

[14:23] <jnthn> arnsholt: status :)

[14:24] <arnsholt> Yep. I'm lazy enough to abbreviate it as s

[14:24] <arnsholt> And diff as d

[14:24] <arnsholt> Since that's -all I do- in git (or at least so it seems, at times)

[14:25] <[Coke]> phenny: tell alester I'm seeing "technical debt" mentioned in several presentations at this $dayjob-internal conference. \o/

[14:25] <phenny> [Coke]: I'll pass that on when alester is around.

[14:26] <[Coke]> (missing or wrong version). if it's a result of a "make", it shouldn't be happening at all, we need to fix the make.

[14:26] *** orafu joined
[14:27] <moritz> it might be my precompiled modules in ~/.perl6

[14:28] *** Exodist joined
[14:29] *** mtk joined
[14:29] *** wamba left
[14:29] <[Coke]> ah, ok.

[14:30] *** fgomez joined
[14:30] * [Coke] wonders, if we're going to precompile to pir, if we shouldn't also REcompile to pir when needed.

[14:31] <[Coke]> (rather than just dying)

[14:31] <pmichaud> [Coke]: we're planning that, yes; the issue has always been one of how to manage a cache

[14:31] <dalek> nqp/toqast: deeca93 | jonathan++ | src/how/Archetypes.pm:

[14:31] <dalek> nqp/toqast: Make sure archetypes methods don't return nulls.

[14:31] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/deeca93f17

[14:32] <pmichaud> for one, where to write the .pir files?

[14:32] <pmichaud> anyway, jnthn and I plotted out a strategy last week for having dynamically managed cache(s) of .pir files

[14:33] <pmichaud> I'm fairly happy with it, now it's just a matter of tuits :)

[14:33] <[Coke]> ah, good

[14:33] <moritz> perl Configure.pl  --gen-parrot && make modules-test

[14:33] <moritz> now dies with

[14:34] <moritz> Could not execute (/home/moritz/tmp/rakudo-star-2012.08/install/bin/perl6 t/01-route-existance.t): open3: exec of /home/moritz/tmp/rakudo-star-2012.08/install/bin/perl6 t/01-route-existance.t failed at /home/moritz/perl5/perlbrew/perls/perl-5.16.0/lib/5.16.0/TAP/Parser/Iterator/Process.pm line 168.

[14:34] <moritz> etc.

[14:34] <moritz> do I have to do a separe make step first?

[14:34] *** wk left
[14:35] *** fgomez left
[14:35] <pmichaud> shouldn't.

[14:36] <moritz> now I get:  /home/moritz/tmp/rakudo-star-2012.08/install/bin/nqp --target=pir --output=src/gen/perl6-bootstrap.pir --encoding=utf8 \ --vmlibs=perl6_ops src/gen/BOOTSTRAP.pm

[14:36] <moritz> make[1]: *** [blib/Perl6/BOOTSTRAP.pbc] Segmentation fault

[14:37] <moritz> and a next 'make' step says "Nothing to be done for `all'.

[14:37] <pmichaud> I wonder if that segfault is the same as what we've been seeing in other places.

[14:38] <jnthn> If so, it's probabalistic and trying again helps. :/

[14:38] <moritz> well, not this time

[14:38] *** fhelmberger left
[14:39] <moritz> since trying again didn't even re-attempt the step

[14:39] <pmichaud> star makefiles aren't really able to introspect to rebuild in the face of errors

[14:39] <pmichaud> any chance you could do the build process _exactly_ as documented once before we start trying all of the advanced cases? 

[14:40] <moritz> I can

[14:40] <moritz> I just tried to simulate the average user :-)

[14:41] <pmichaud> I suppose I can potentially improve things a bit by making sure PERL6LIB isn't set for a lot of these steps; especially when precompiling modules and the like.

[14:41] <pmichaud> that could eliminate interference from things like ~/.perl6 and the like

[14:42] <masak> rn: for 0..20 -> $i { say (-1)**$i / (2 * $i + 1) }

[14:42] <p6eval> niecza v21-1-ga8aa70b: OUTPUT«1␤-0.33333333333333331␤0.2␤-0.14285714285714285␤0.1111111111111111␤-0.090909090909090912␤0.076923076923076927␤-0.066666666666666666␤0.058823529411764705␤-0.052631578947368418␤0.047619047619047616␤-0.043478260869565216␤0.04␤-0.037037037037037035␤0.0344827586…

[14:42] <p6eval> ..rakudo d70363: OUTPUT«1␤-0.333333␤0.2␤-0.142857␤0.111111␤-0.090909␤0.076923␤-0.066667␤0.058824␤-0.052632␤0.047619␤-0.043478␤0.04␤-0.037037␤0.034483␤-0.032258␤0.030303␤-0.028571␤0.027027␤-0.025641␤0.024390␤»

[14:43] <masak> rn: say [+] map -> $i { say 4 * (-1)**$i / (2 * $i + 1) }, 1..20

[14:43] <p6eval> niecza v21-1-ga8aa70b: OUTPUT«-1.3333333333333333␤0.8␤-0.5714285714285714␤0.44444444444444442␤-0.36363636363636365␤0.30769230769230771␤-0.26666666666666666␤0.23529411764705882␤-0.21052631578947367␤0.19047619047619047␤-0.17391304347826086␤0.16␤-0.14814814814814814␤0.13793103448275862␤-0.…

[14:43] <p6eval> ..rakudo d70363: OUTPUT«-1.333333␤0.8␤-0.571429␤0.444444␤-0.363636␤0.307692␤-0.266667␤0.235294␤-0.210526␤0.190476␤-0.173913␤0.16␤-0.148148␤0.137931␤-0.129032␤0.121212␤-0.114286␤0.108108␤-0.102564␤0.097561␤20␤»

[14:43] <moritz> ~/.perl6/lib is in @*INC without any interference from PERL6LIB

[14:43] <pmichaud> yes, I was just noticing that.

[14:43] <pmichaud> That's.... not ideal.

[14:43] <masak> rn: say [+] (map -> $i { say 4 * (-1)**$i / (2 * $i + 1) }, 1..20)

[14:43] <p6eval> niecza v21-1-ga8aa70b: OUTPUT«-1.3333333333333333␤0.8␤-0.5714285714285714␤0.44444444444444442␤-0.36363636363636365␤0.30769230769230771␤-0.26666666666666666␤0.23529411764705882␤-0.21052631578947367␤0.19047619047619047␤-0.17391304347826086␤0.16␤-0.14814814814814814␤0.13793103448275862␤-0.…

[14:43] <p6eval> ..rakudo d70363: OUTPUT«-1.333333␤0.8␤-0.571429␤0.444444␤-0.363636␤0.307692␤-0.266667␤0.235294␤-0.210526␤0.190476␤-0.173913␤0.16␤-0.148148␤0.137931␤-0.129032␤0.121212␤-0.114286␤0.108108␤-0.102564␤0.097561␤20␤»

[14:43] <moritz> pmichaud: I pointed that out per email some weeks ago

[14:44] <masak> hm... why does the above not reduce to a single sum?

[14:44] <masak> rn: say (map -> $i { say 4 * (-1)**$i / (2 * $i + 1) }, 1..20).reduce(&[+])

[14:44] <p6eval> niecza v21-1-ga8aa70b: OUTPUT«-1.3333333333333333␤0.8␤-0.5714285714285714␤0.44444444444444442␤-0.36363636363636365␤0.30769230769230771␤-0.26666666666666666␤0.23529411764705882␤-0.21052631578947367␤0.19047619047619047␤-0.17391304347826086␤0.16␤-0.14814814814814814␤0.13793103448275862␤-0.…

[14:44] <p6eval> ..rakudo d70363: OUTPUT«-1.333333␤0.8␤-0.571429␤0.444444␤-0.363636␤0.307692␤-0.266667␤0.235294␤-0.210526␤0.190476␤-0.173913␤0.16␤-0.148148␤0.137931␤-0.129032␤0.121212␤-0.114286␤0.108108␤-0.102564␤0.097561␤20␤»

[14:44] <masak> oh! :/

[14:44] <moritz> masak: you have &say in your map

[14:44] <masak> rn: say (map -> $i { 4 * (-1)**$i / (2 * $i + 1) }, 1..20).reduce(&[+])

[14:44] <p6eval> niecza v21-1-ga8aa70b: OUTPUT«-0.81081521772240528␤»

[14:44] <p6eval> ..rakudo d70363: OUTPUT«-0.81081521772240527␤»

[14:44] <masak> just noticed. masak--

[14:44] <pmichaud> moritz: mail to p6c?

[14:45] <moritz> pmichaud: no, private mail (before PRS)

[14:45] <pmichaud> checking

[14:45] <masak> rn: say (map -> $i { 4 * (-1)**$i / (2 * $i + 1) }, 0..20).reduce(&[+])

[14:45] <p6eval> niecza v21-1-ga8aa70b: OUTPUT«3.1891847822775947␤»

[14:45] <p6eval> ..rakudo d70363: OUTPUT«3.18918478227759473␤»

[14:46] <masak> rn: say (map -> $i { 4 * (-1)**$i / (2 * $i + 1) }, 0..2000).reduce(&[+])

[14:46] <p6eval> rakudo d70363: OUTPUT«3.1420924036898␤»

[14:46] <p6eval> ..niecza v21-1-ga8aa70b: OUTPUT«3.1420924036835247␤»

[14:46] <masak> \o/

[14:47] <moritz> nr: say [+] map -> $i { 4 * (-1)**$i / (2 * $i + 1) },  0..200

[14:47] <p6eval> niecza v21-1-ga8aa70b: OUTPUT«3.1465677471829547␤»

[14:47] <p6eval> ..rakudo d70363: OUTPUT«3.14656774718923␤»

[14:48] <pmichaud> (precompilation and @INC)  what jnthn++ and I discussed is that rakudo can trigger precompilation, but I want it to be via a pluggable api whereby we can change the module management code easily.  I don't want module precompilation to be horribly integral to rakudo itself (more)

[14:49] <pmichaud> we'll need to have some sort of environment variable that tells rakudo where it can cache precompiled PIR

[14:49] <moritz> I see @*INC and precompilation as somewhat orthogonal in this case

[14:50] <pmichaud> yes, they're orthogonal, in that @*INC says where to look for source modules, while precompilation says where to put binaris

[14:50] <pmichaud> *binaries

[14:50] <colomon> does any of the current implementations actually provide "lift"?

[14:50] <colomon> *do

[14:50] <dalek> rakudo/nqpqast: d3af128 | jonathan++ | src/Perl6/Metamodel/B (2 files):

[14:50] <dalek> rakudo/nqpqast: Last couple of null hardenings needed in order to get CORE.setting to build again.

[14:50] <dalek> rakudo/nqpqast: review: https://github.com/rakudo/rakudo/commit/d3af1289a8

[14:50] <dalek> rakudo/nqpqast: e691019 | jonathan++ | src/Perl6/World.pm:

[14:50] <dalek> rakudo/nqpqast: Eliminate a hack we no longer need in the code for finding the NQP module loader.

[14:50] <dalek> rakudo/nqpqast: review: https://github.com/rakudo/rakudo/commit/e6910194e9

[14:50] * colomon is pondering Math::Polynomial issues

[14:50] <pmichaud> one key part is that the source is always authoritative; i.e., we only get a precompiled form by first going through the source (e.g. a sha1 hash or equiv)

[14:51] <jnthn> colomon: not afaik

[14:51] <smash> pmichaud: (rakudo-star-2012.08-rc1) make rakudo-test.. All tests successful.

[14:52] <pmichaud> anyway, this would solve the problem of module dependencies being wrong, but (you're correct) it doesn't solve the problem of rakudo finding things in ~/.perl6/lib when we don't want it to.

[14:58] *** thou joined
[14:59] *** wtw left
[15:00] <eiro> rn: eager %INC.values.map: { .say }

[15:00] <p6eval> rakudo d70363: OUTPUT«===SORRY!===␤Variable %INC is not declared␤at /tmp/7Yva7VqGvH:1␤»

[15:00] <p6eval> ..niecza v21-1-ga8aa70b: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Variable %INC is not predeclared at /tmp/LemmbWSJyv line 1:␤------> [32meager [33m⏏[31m%INC.values.map: { .say }[0m␤␤Undeclared routine:␤     'eager' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza…

[15:01] <jnthn> %*INC

[15:01] <eiro> rn:  for %*INC.keys {.say}

[15:01] <p6eval> rakudo d70363, niecza v21-1-ga8aa70b: OUTPUT«0␤»

[15:02] <eiro> damn!

[15:03] *** erkan left
[15:03] <pmichaud> I think I'm convinced that we have to get rid of ~/.perl6/lib as being a "always on" search for modules.  It should only be available via PERL6LIB or the like.

[15:03] *** erkan joined
[15:03] *** erkan left
[15:03] *** erkan joined
[15:04] <jnthn> r: say @*INC

[15:04] <p6eval> rakudo d70363: OUTPUT«/home/p6eval/.perl6/lib /home/p6eval/nom-inst/lib/parrot/4.7.0-devel/languages/perl6/lib␤»

[15:05] <eiro> there is no %*INC ? 

[15:05] <masak> I just re-read S04's descriptiong of "lift". I think I get the way it works. I'm not sure how it'd be implemented in practice. I don't have a clue when I'd want to use the feature.

[15:05] <PerlJam> eiro: S28:215

[15:06] <eiro> thx 

[15:07] <eiro> haha PerlJam how to jump to 215 ? you use the source ?

[15:07] <PerlJam> eiro: read the surrounding text too.  Particularly the part below that table.

[15:07] <masak> in short, "lift" detaches free variables in the routine and causes them to be looked up in the caller's scope (possibly light-years and eons away).

[15:07] <masak> and for the purposes of that description, operators not bound in the routine itself are free variables, too.

[15:07] <PerlJam> eiro: http://perlcabal.org/syn/S28.html#line_215

[15:08] <pmichaud> "lift" was added to resolve some issues dealing with with metaops or something like that, iirc.

[15:08] <geekosaur> eiro, if you use the irc logs (see the /topic) I believe it hyperlinks those to the documentation

[15:08] <eiro> oh cool :)

[15:08] <PerlJam> eiro: Or you can click on the link ... what geekosaur said

[15:08] <pmichaud> we'd need to find the examples that led to the addition of "lift" (which would be in the ir clogs)

[15:10] <masak> pmichaud: it was added on 2009-02-27.

[15:10] <eiro> ok thanks PerlJam 

[15:12] <eiro> any ftplugin/perl6.vim ? i'm starting mine using ftplugin/perl.vim 

[15:12] <hoelzro> eiro: petdance maintains one

[15:12] <masak> this seems to be where it was thought up: http://irclog.perlgeek.de/perl6/2009-02-26#i_941831

[15:13] <[Coke]> so, I found a reference to my current partcl-nqp build error - jnthn mentioned getting it when doing the cutover to new nqp. :P

[15:13] <hoelzro> I have a fork on GH as well; it's a start on syntax-based folding

[15:13] <[Coke]> http://irclog.perlgeek.de/perl6/2012-03-02#i_5235568

[15:13] *** plobsing joined
[15:14] <masak> yes, I see now how "lift" would help with metaoperators.

[15:14] <eiro> hoelzro, http://fossies.org/windows/misc/vim73rt.zip:a/vim/vim73/ftplugin/perl6.vim isn't updating the path: i need it

[15:14] <eiro> i'll fix mine and take contact with petdance

[15:14] <masak> I define &infix:<$$$> in my own "caller" scope, and I immediately expect Z$$$ and [$$$] to work.

[15:15] <pmichaud> actually, it looks to me like 'lift' was implemented in response to whatever-ranges

[15:15] <pmichaud> and whatever-subscripts in ranges

[15:15] <pmichaud> which since we've solved those differently, seems to have sidestepped the need for lift, at least for that.

[15:15] <masak> hm, yes.

[15:16] *** erkan left
[15:16] <cjbot> https://twitter.com/barcelonapm/status/240830032652677121 : RT @PerlWeekly: perl6.announce: ANNOUNCE: Niecza Perl 6 v21 by Stefan O'Rear http://t.co/v7Ap88zZ

[15:16] *** fernandocorrea left
[15:17] *** fernandocorrea_ joined
[15:17] <pmichaud> I've never particularly liked 'lift', fwiw.  :-)

[15:17] <masak> pmichaud: what, you prefer to get your compile-time errors... at compile time? :P

[15:17] <geekosaur> mmm, upvar

[15:17] <[Coke]> tadzik: is that better?

[15:18] <masak> geekosaur: tcl?

[15:18] * [Coke] pounces. 

[15:18] <[Coke]> tcl??

[15:18] <geekosaur> yeh

[15:18] * masak .oO( different languages have different names for the same sin... )

[15:18] <geekosaur> tcl has upvar (bind to a vweriable in an outer scope) and uplevel (run a block in an outer scope)

[15:18] *** fgomez joined
[15:18] <masak> geekosaur: not outer. caller.

[15:18] <geekosaur> ^vwer^var

[15:18] <geekosaur> ...yeh

[15:19] *** JimmyZ left
[15:20] *** _jaldhar left
[15:20] <[Coke]> geekosaur: would you like to see tcl working on top of parrot (or nqp?)

[15:20] <geekosaur> not really, that was more of a remembered nightmare ;)

[15:21] <[Coke]> awww. :(

[15:21] <masak> geekosaur: that was the wrong answer, now you made the [Coke] sad... :)

[15:21] <[Coke]> jnthn: do you have any recollection about how you addressed the Serialization Errors?

[15:22] <geekosaur> I do recall seeingthere's a Tcl implementation on top of parrot

[15:22] <geekosaur> I'm just not quite that masochistic :p

[15:22] <PerlJam> geekosaur: yeah, partcl (Coke's project in need of some more love)

[15:24] <geekosaur> (I already have one job opening in my queue that wants OS/2 skills... it seems to be Past History Day)

[15:25] *** JimmyZ joined
[15:26] <jnthn> [Coke]: I think it may be a bug in NQP.

[15:29] <[Coke]> jnthn: ok. can I help get a test going? It's currently just under 5Klines of nqp.

[15:29] *** sftp left
[15:30] *** sftp joined
[15:30] <jnthn> [Coke]: I believe that trying to --target=pir something with an our sub in it may do it

[15:31] <[Coke]> ok. I only have 8 of those left.

[15:31] <[Coke]> let me see if I can work around it.

[15:31] <jnthn> oh, but NQP has some of those so...hm.

[15:33] <kresike> bye all

[15:33] *** kresike left
[15:33] <tadzik> [Coke]: yeah, looks cool

[15:33] <[Coke]> removing the remaining "our" subs (changing to just "sub") makes no change in the error message.

[15:35] <jnthn> The error messaging being?

[15:35] *** JimmyZ left
[15:36] *** fgomez left
[15:37] <[Coke]> http://feather.perl6.nl/~coke/err.txt

[15:37] <[Coke]> Serialization Error: could not locate static code ref for closure '_block1005'

[15:38] <[Coke]> there are 16 _block1005's in pir.

[15:39] <[Coke]> (that's sans the remaining our subs. I'm not sure if the backtrace is different that when I still had the "our" subs.)

[15:40] <jnthn> hmm

[15:40] *** tokuhiro_ left
[15:42] *** wamba joined
[15:43] *** wamba left
[15:48] *** FROGGS left
[15:49] <tadzik> Bailador's fixed now

[15:49] <tadzik> FROGGS++

[15:49] <tadzik> and HTTP::Easy seems working as well

[15:49] <tadzik> star unblocked :)

[15:50] <[Coke]> tadzik++ FROGGS++

[15:51] <jnthn> \o/

[15:52] *** fgomez joined
[15:52] <masak> yay! \o/

[15:59] *** GlitchMr joined
[15:59] *** hoelzro is now known as hoelzro|away

[16:01] *** brrt left
[16:03] *** fgomez left
[16:05] *** fgomez joined
[16:06] *** ObseLeTe left
[16:07] *** deritchie joined
[16:08] <sirrobert> Undefined routine '&eq' called

[16:08] *** deritchie left
[16:08] <sirrobert> works when I 'perl6' the file, fails when I 'prove' the file

[16:08] <jnthn> sirrobert: Is prove running it with Perl 6 or Perl 5? :)

[16:09] <sirrobert> -e perl6

[16:09] <sirrobert> well, wait

[16:09] <sirrobert> when I fixed the number of tests in the plan, the error went away

[16:09] <sirrobert> but that's a weird error to get for a bad plan

[16:11] <sirrobert> lunch &

[16:12] <masak> sirrobert: sounds like you might have been missing a semicolon somewhere.

[16:12] <masak> maybe it's one of the remaining '}' parsing bugs that bit you.

[16:13] *** mucker joined
[16:13] <dalek> rakudo/nqpqast: a98bc62 | jonathan++ | src/Perl6/Metamodel/ (11 files):

[16:13] <dalek> rakudo/nqpqast: Make sure we use NQP's BUILDALL in the meta-objects to avoid some differences in build protocol (can unify them later). Now this branch builds and make test all passes.

[16:13] <dalek> rakudo/nqpqast: review: https://github.com/rakudo/rakudo/commit/a98bc62738

[16:13] *** mucker left
[16:13] *** mucker joined
[16:13] <dalek> nqp/toqast: 851a4e0 | jonathan++ | src/QAST/Compiler.nqp:

[16:13] <dalek> nqp/toqast: Bump up register allocation window so it ain't far too small.

[16:13] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/851a4e02a2

[16:19] *** uvtc joined
[16:20] <uvtc> Quick idea regarding moritz's recent experiments with adding snippets to perl6.org:

[16:20] <uvtc> Maybe use a javascript galley widget of some sort to give the visitor access to multiple snippets, if they so choose.

[16:21] <uvtc> s/galley/gallery/

[16:21] <moritz> quick idea: make that without javascript, and simple static links

[16:21] <jnthn> nqp: our %blah; INIT { %blah<a> := 1; }; say(%blah<a>)

[16:21] <p6eval> nqp: OUTPUT«1␤»

[16:21] <moritz> and get the one random sample from http://perl6.org/snippet via SSI

[16:21] * moritz hates unnecessary JS

[16:21] <tadzik> but shiny

[16:22] *** Liz joined
[16:22] <pmichaud> okay, I now know why having codepoint > 256 causes rakudo parsing to become so slow.

[16:22] <tadzik> what is it?

[16:22] *** Liz is now known as Guest52236

[16:23] <pmichaud> the regex engine is indeed using ucs4 when performing the match, as it's supposed to.

[16:23] <pmichaud> however, the original string remains utf8, so when requesting the stringified form of a match, it has to do a substring lookup on a (very long) utf8 string

[16:23] <tadzik> oh

[16:23] <pmichaud> I can have the original source string convert to ucs4... but that ends up causing lots of string constants to suddenly be in ucs4 as well.

[16:24] <uvtc> moritz: I'm not crazy about excess JS either. That said, if you want to show off snippets, and you've got more than one that you think would make a good impression on visitors, a little mini gallery (with left/right clicky buttons to hop from one to the next) might be just the ticket.

[16:24] <pmichaud> anyway, doing spectest now.

[16:24] *** fgomez left
[16:25] <uvtc> moritz: If the random snippet that happens to come up via SSI doesn't strike the visitor's fancy, they might say, "well, they've got a few seconds of my attention --- let's see what else they've got {click}".

[16:25] <moritz> uvtc: I don't see why left/right clickies can't be static links

[16:26] <moritz> neither why a reload link can't be static

[16:27] <moritz> I'm fine with later adding more JS sugar that makes the transitions smoother or whatever

[16:27] <moritz> but whatever functionality can be provided without JS should be.

[16:27] <uvtc> moritz: they could. As tadzik points out though, "shiny" can be nicer if you've got just a few seconds to make an elevator pitch to a visitor.

[16:28] <uvtc> (er, whoops --- I added a bit to what tadzik pointed out. :) )

[16:28] <uvtc> This topic came up recently at http://blog.fogus.me/2012/08/23/minimum-viable-snippet/ .,

[16:29] *** Guest52236 left
[16:30] *** snearch joined
[16:31] <uvtc> IMO, the purpose of a snippet is like an advertisement to the prospective user that says, "Look how nice this is! You could be doing this *right now*. What are you waiting for?".

[16:32] <moritz> yes, sure, I'm all for it. I still think that the base version must work without JS.

[16:32] <uvtc> (Hm. So, in the future, perhaps it could even be a link to a try.perl6.org ...)

[16:33] <uvtc> I know only very little JS, but my understanding was that you could fall back on static snippets if the user doesn't have js enabled.

[16:37] <pmichaud> r: say 'bit' ~& 'wise'

[16:37] <p6eval> rakudo d70363: OUTPUT«bip␤»

[16:37] <PerlJam> uvtc: I think moritz doesn't want to fall back, he wants to fall forward.

[16:37] <pmichaud> n: say 'bit' ~& 'wise'

[16:37] <p6eval> niecza v21-1-ga8aa70b: OUTPUT«Unhandled exception: Buffer bitops NYI␤  at /home/p6eval/niecza/lib/CORE.setting line 1435 (die @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3328 (infix:<~&> @ 4) ␤  at /tmp/N4RfEiI6cB line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting…

[16:38] *** fgomez joined
[16:40] <uvtc> moritz: just curious, if you've got /snippet working, are you waiting on something else before adding the snippets to the front page? Maybe put it in the center of the page and shuck down "Specification" and the download button to make room.

[16:41] <moritz> uvtc: I'm waiting on masak++ who promised to work on it

[16:41] <moritz> or others that do it instead

[16:41] <uvtc> moritz: looks like you've got some html in place to syntax-highlight the snippets too...

[16:42] <uvtc> PerlJam: Ha ha. {slow golf clap} :)

[16:42] *** Patterner left
[16:42] <PerlJam> uvtc: glad you liked it  :)

[16:44] <cjbot> https://twitter.com/quietfanatic/status/240851560559693824 : RT @carlmasak: "There is much work yet to be done in [designing programming languages]..." https://t.co/LBvQcfHM That's what Perl 6 has taught me, too.

[16:46] *** uvtc left
[16:49] *** fhelmberger joined
[16:50] *** fgomez left
[16:53] *** fhelmberger left
[16:54] *** fgomez joined
[16:55] *** birdwindupbird left
[16:56] <sorear> good * #perl6

[16:56] *** Psyche^ joined
[16:56] *** Psyche^ is now known as Patterner

[16:59] *** b_jonas left
[17:00] *** b_jonas joined
[17:05] *** xinming_ left
[17:08] <masak> ohayo gosaimas, sorear.

[17:10] *** gongyiliao joined
[17:11] * [Coke] pokes jnthn to see if anything happens. ;)

[17:12] *** wamba joined
[17:14] *** dakkar left
[17:15] <masak> [Coke]: that's the longest way to spell "ping" I've seen ;)

[17:16] <sorear> o/ masak

[17:16] <sorear> o/ [Coke] too

[17:18] *** alester joined
[17:23] *** xinming joined
[17:27] *** leont joined
[17:28] * [Coke] tries to reduce this problem to a small test case.

[17:28] <[Coke]> привет, sorear.

[17:38] *** FROGGS joined
[17:39] <[Coke]> aha! the problem is in src/init.pm

[17:43] *** PZt joined
[17:46] *** kurahaupo joined
[17:53] <[Coke]> if I reduce src/init.pm to the following line, I still get the problem in my "rip everything out" branch. if I remove that line, no error.

[17:53] <[Coke]> GLOBAL::invoke := -> $command {}

[17:53] <[Coke]> so, what's wrong with that line?

[17:58] <masak> semicolon?

[17:58] <masak> or maybe storing things in GLOBAL?

[17:59] <masak> [Coke]: was the problem something with serialization?

[17:59] *** uvtc joined
[17:59] <masak> it looks weird to me that the rhs doesn't have a sigil, by the way.

[18:00] <uvtc> moritz, re. snippets on perl6.org, I suppose I was thinking of something like this http://unexpected-vortices.com/temp/perl6-snippets/index.html , but perhaps that looks a little cheesey.

[18:00] <[Coke]> the problem was an error like http://feather.perl6.nl/~coke/err.txt "Serialization Error: could not locate static code ref for closure '_block1005'

[18:00] <[Coke]> the original file is here:

[18:01] <[Coke]> https://github.com/partcl/partcl-nqp/blob/nqp/src/init.pm

[18:01] <[Coke]> (line in question from L86)

[18:01] <masak> [Coke]: right. then my guess is either (a) that something manages not to correctly store things in GLOBAL in the serialization context, or (b) that there really should be a sigil there, and it does *completely* the wrong thing and trips on itself in the process (but maybe it used to work in a prior nqp).

[18:01] <uvtc> (oh, whoops. Looks like I missed him.)

[18:01] *** leont left
[18:01] <[Coke]> masak: this all works in parrot-nqp

[18:02] <[Coke]> well, master branch did, and that line didn't change from master.

[18:02] <masak> right.

[18:03] *** daxim left
[18:03] <[Coke]> switching to $GLOBAL::, I still get the error.

[18:04] <masak> how about something like '&invoke := -> $command {}'?

[18:04] <masak> this might interest some on this channel: http://swizec.com/blog/the-birth-of-lisp-a-summary-of-john-mccarthys-original-paper/swizec/5075

[18:08] *** snearch left
[18:10] *** REPLeffect joined
[18:13] *** uvtc left
[18:16] <sirrobert> uvtc: I think snippets on perl6.org is a great idea.

[18:17] <sirrobert> uvtc: the important thing would be to think of them as an expo, rather than a utility

[18:17] <masak> +1

[18:17] <masak> things that make people go "ooh, this language is niiiice"

[18:17] <sirrobert> masak: nod

[18:18] <sirrobert> showcasing core language and useful modules

[18:18] <masak> ...in not too many lines of code. :)

[18:18] <sirrobert> heh nod

[18:18] <masak> that's what http://www.ruby-lang.org/ does.

[18:18] <masak> and does well.

[18:18] <sirrobert> yeah.  should be a soft limit of like ... 5 lines, with a hard limit of around 10

[18:18] *** gongyiliao left
[18:19] <masak> something like that.

[18:20] <sirrobert> is the website a github project?

[18:20] <sirrobert> *repo

[18:20] <masak> heh -- a friend of mine once explained that he really liked `5.times { ... }` in ruby... I replied frankly that I didn't think cutesy DSLishness was worth polluting the Integer type for :)

[18:20] <sirrobert> heh

[18:20] <masak> not sure my reply meant anything to him. :)

[18:21] <geekosaur> it mkes perfect sense, if you think like Smalltalk

[18:21] <[Coke]> hh

[18:21] <masak> yes, it feels like such an idea might come from Smalltalk.

[18:22] <masak> but it still doesn't rhyme with my idea of responsibilities and object-oriented design.

[18:22] <masak> the 5 there is not a place to put your control-flow mechanisms.

[18:23] <[Coke]> masak: Symbol '&invoke' not predeclared in <anonymous>

[18:23] <masak> [Coke]: ok.

[18:25] *** cjbot left
[18:28] <sorear> masak: Io is rather worse in that regard, every object that can possibly be coerced to Bool has an if() method

[18:28] <sorear> 5 if( "true!" print ) # not guaranteed to work

[18:29] *** cjbot joined
[18:29] <[Coke]> I pushed the "borked" branch to partcl-nqp which has the very reduced code base with the error confined to src/init.pm if you want to play, masak. 

[18:31] <masak> sorear: I feel I need to look into this Io.

[18:32] *** breakEM left
[18:36] *** popl joined
[18:39] *** kurahaupo left
[18:39] <rjbs> Somebody want to tell me how this works out in p6? https://gist.github.com/3516875

[18:41] <masak> r: my $x = any(1, 10); say "oops" if $x >= 5 - 1 and $x <= 5 + 1

[18:41] <p6eval> rakudo d70363: OUTPUT«oops␤»

[18:41] <masak> right.

[18:41] <masak> that's the semantics of conjunctions. they act as *either* of the values, if it gives it a chance to make a condition true.

[18:42] <masak> so, nothing-to-see-here-move-along, I guess.

[18:42] <rjbs> That's what I was thinking.  I wonder how often that sort of thing will cause end-user confusion.

[18:42] <sorear> rjbs: junction collapse in p6 happens at the point when a value is placed into boolean context

[18:43] <sorear> however, you're using a sub, and in p6, subs default to mapping over junctions

[18:43] <masak> rjbs: that's why my use of junctions is *very* restricted. asking them to do too much will cause issues like this.

[18:44] <masak> rn: sub close_enough($x, $y, $t) { $x >= $y - $t and $x <= $y + $t }; say "oops" if close_enough any(1, 10), 5, 1

[18:44] <p6eval> rakudo d70363, niecza v21-1-ga8aa70b:  ( no output )

[18:44] <masak> sorear++ has it right. the sub insulates against the junctional behavior here, by default.

[18:44] <sorear> because it turns into any(close_enough(1,5,1), close_enough(10,5,1))

[18:44] <masak> (because parameter types default to Any)

[18:44] <sorear> -> any(False,False)

[18:45] <sorear> which is a falsy value

[18:45] <rjbs> Thanks.

[18:45] <rjbs> I suspected that would happen.

[18:47] *** cjbot left
[18:50] *** cjbot joined
[18:54] *** birdwindupbird joined
[19:05] *** wk_ joined
[19:06] *** GlitchMr left
[19:23] *** leont joined
[19:34] <moritz> \o

[19:36] <masak> /o

[19:37] <sorear> o/

[19:37] <moritz> r: say so 5 - 1 <= any(1, 10) <= 5 + 1

[19:37] <p6eval> rakudo d70363: OUTPUT«True␤»

[19:37] <moritz> n: say so 5 - 1 <= any(1, 10) <= 5 + 1

[19:37] <p6eval> niecza v21-1-ga8aa70b: OUTPUT«True␤»

[19:38] <sorear> known bug

[19:39] <moritz> p: say so 5 - 1 <= any(1, 10) <= 5 + 1

[19:39] <p6eval> pugs: OUTPUT«any(VBool False,VBool True)␤»

[19:40] *** Liz joined
[19:40] *** Liz is now known as Guest2539

[19:42] *** wamba left
[19:43] <pmichaud> b:  say so 5 - 1 <= any(1, 10) <= 5 + 1

[19:43] <p6eval> b 922500: OUTPUT«Bool::True␤»

[19:43] <pmichaud> b:  say so (5 - 1) <= any(1, 10) <= (5 + 1)

[19:43] <p6eval> b 922500: OUTPUT«Bool::True␤»

[19:43] <pmichaud> oh yeah, I remember this one.

[19:46] <pmichaud> yay, bailador is reportedly fixed!

[19:46] * pmichaud tests.

[19:49] *** cjbot left
[19:49] <moritz> fwiw star RC1 has built fine for me

[19:49] <dalek> star: d8c8cae | pmichaud++ | modules/Bailador:

[19:49] <dalek> star: Update Bailador to current head.

[19:49] <dalek> star: review: https://github.com/rakudo/star/commit/d8c8cae649

[19:49] <pmichaud> building rc2 now.

[19:51] <pmichaud> http://pmichaud.com/sandbox/rakudo-star-2012.08-rc2.tar.gz

[19:51] <moritz> panda failed two test files here

[19:51] <moritz> t/panda/builder.t  (Wstat: 0 Tests: 5 Failed: 3) Failed tests:  1-2, 4

[19:51] <moritz> t/panda/tester.t   (Wstat: 0 Tests: 2 Failed: 1) Failed test:  1

[19:51] <moritz> (that's still RC1)

[19:51] *** cjbot joined
[19:52] <moritz> pmichaud: fwiw modules-test should depend on 'all'

[19:53] <pmichaud> it needs to depend on install.

[19:53] <moritz> ok, that then

[19:53] <pmichaud> I didn't want to do that, though, because "install" always installs.  Thus it'll recompile and reinstall all of the modules if we do that.

[19:54] *** plobsing left
[19:54] <sirrobert> r: role B { method Str () { return 'bar'; }; method gist () { return self.Str(); }; }; my %foo = {a=>1}; say (%foo but B); print (%foo but B); 

[19:54] <p6eval> rakudo d70363: OUTPUT«bar␤a     1»

[19:54] <sirrobert> why doesn't the "print" print 'bar' too?

[19:58] <moritz>  r: role B { method Str () { return 'bar'; }; method gist () { self.Str }; my %foo = a => 1; say (%foo but B).Str

[19:58] <p6eval> rakudo d70363: OUTPUT«===SORRY!===␤Unable to parse blockoid, couldn't find final '}' at line 2, near ""␤»

[19:58] <moritz>  r: role B { method Str () { return 'bar'; }; method gist () { self.Str } }; my %foo = a => 1; say (%foo but B).Str

[19:58] <p6eval> rakudo d70363: OUTPUT«bar␤»

[19:58] <moritz>  r: role B { method Str () { return 'bar'; }; method gist () { self.Str } }; my %foo = a => 1; say (%foo but B).Stringy

[19:58] <p6eval> rakudo d70363: OUTPUT«bar␤»

[19:59] * moritz has no idea

[19:59] <sirrobert> what is .Stringy?

[19:59] <sirrobert> r: role B { method Str () { return 'bar'; }; method gist () { self.Str } }; my %foo = a => 1; print (%foo but B).Stringy

[19:59] <p6eval> rakudo d70363: OUTPUT«bar»

[19:59] <sirrobert> r: role B { method Str () { return 'bar'; }; method gist () { self.Str } }; my %foo = a => 1; say (%foo but B).Stringy

[19:59] <p6eval> rakudo d70363: OUTPUT«bar␤»

[20:00] <sirrobert> r: role B { method Str () { return 'bar'; }; method gist () { self.Str } }; my %foo = a => 1; warn (%foo but B).Stringy

[20:00] <p6eval> rakudo d70363: OUTPUT«bar  in block  at /tmp/FvDPcSI4Tc:1␤␤»

[20:00] <moritz> an (IMHO unnecessary) layer of indirection

[20:00] <sirrobert> but it does fix the problem

[20:00] <sorear> .Stringy is a coerce method which returns a value doing the Stringy role

[20:00] <sirrobert> r: role B { method Str () { return 'bar'; }; method gist () { return self.Str(); }; }; my %foo = {a=>1}; print (%foo but B); print (%foo but B).Stringy;

[20:00] <p6eval> rakudo d70363: OUTPUT«a 1bar»

[20:00] <sorear> also, ==moritz

[20:01] <sorear> Stringy was introduced to solve the problem which we eventually solved using .gist

[20:01] <moritz> I think the idea is more that .Stringy can return either Str or Cat

[20:02] <sorear> I'm not sure Cat should be a type

[20:03] <sorear> we don't draw type differences between finite and infinite lists, or fixnums and bignums

[20:03] <sirrobert> r: role B { method Str () { return 'bar'; }; }; print ({a=>1} but B);

[20:03] <p6eval> rakudo d70363: OUTPUT«a 1»

[20:03] <sirrobert> that *should* output 'bar', right?

[20:03] <sirrobert> role B { method Str () { return 'bar'.Stringy; }; }; print ({a=>1} but B);

[20:03] <sirrobert> r: role B { method Str () { return 'bar'.Stringy; }; }; print ({a=>1} but B);

[20:03] <p6eval> rakudo d70363: OUTPUT«a 1»

[20:03] <sorear> n: role B { method Str () { return 'bar'; }; }; print  ({a=>1} but B);

[20:03] <p6eval> niecza v21-1-ga8aa70b: OUTPUT«bar»

[20:04] <sorear> I say it should output bar, yes

[20:04] <sorear> note that you can shorten tis to

[20:04] <moritz> sirrobert++ # bug finding

[20:04] <sorear> n: print ({a=>1} but 'bar')

[20:04] <p6eval> niecza v21-1-ga8aa70b: OUTPUT«bar»

[20:04] <moritz> r: print ({a => 1 } but 'bar')

[20:04] <p6eval> rakudo d70363: OUTPUT«a 1»

[20:05] <sirrobert> just as an interesting aside... this works:

[20:05] <sirrobert> nevermind; it doesn't =)

[20:05] <sirrobert> ok, whew

[20:05] <sirrobert> I'm glad it wasn't me... heh

[20:05] <sorear> moritz: suprised that works, I think by spec but 'bar' is _exactly_ equivalent to but role { method Str { 'bar' } }

[20:05] <PerlJam> r: role B { method Str() { say "Str";}; method gist() { say "gist" }; };  my %foo = {a=>1}; print (%foo but B); say "";

[20:05] <p6eval> rakudo d70363: OUTPUT«a 1␤»

[20:06] <moritz> sorear: it doesn'T work in rakudo

[20:06] <PerlJam> neither Str nor gist are called.

[20:06] <sorear> moritz: oh, oops

[20:06] <sirrobert> perlJam:  I used 'warns' to flag each method in an earlier incarnation.  no warns were fired

[20:06] <sorear> PerlJam: I think it calls the get_string vtable which goes to Stringy

[20:06] <PerlJam> This leads me to believe that print is doing something funky

[20:07] <PerlJam> sorear: sounds plausible

[20:08] <moritz> heh

[20:08] <sirrobert> ?

[20:08] <moritz> r: say ({ a => 1 } but 'foo') ~~ Str

[20:08] <p6eval> rakudo d70363: OUTPUT«False␤»

[20:08] <sirrobert> heh

[20:08] <sirrobert> r: say ({a => 1} but 'foo').^mro

[20:08] <p6eval> rakudo d70363: OUTPUT«Hash+{<anon>}() Hash() EnumMap() Iterable() Cool() Any() Mu()␤»

[20:08] <moritz> if that were true, I'd understand how something funky could have happened

[20:09] *** SamuraiJack left
[20:10] <sirrobert> moritz: want me to file that, or do you have it?

[20:11] <moritz> sirrobert: please do

[20:11] <sirrobert> ok

[20:11] * moritz 's nick starts with 'm', but he isn't masak++

[20:13] <sorear> right, morzak

[20:14] * masak is honored to be confused with moritz++

[20:14] <masak> what's the bug above, ooc?

[20:15] <moritz> nr: say {a => 1 } but 'foo'

[20:15] <p6eval> rakudo d70363: OUTPUT«("a" => 1).hash␤»

[20:15] <p6eval> ..niecza v21-1-ga8aa70b: OUTPUT«{"a" => 1}␤»

[20:15] *** breakEM joined
[20:15] <moritz> nr: print {a => 1 } but 'foo'

[20:15] <p6eval> rakudo d70363: OUTPUT«a 1»

[20:15] <p6eval> ..niecza v21-1-ga8aa70b: OUTPUT«foo»

[20:15] <moritz> masak: this one

[20:16] <sirrobert> in my "Masquerade" module, you can now do:    say %my-deep-hash but AsIf::YAML;

[20:16] <sirrobert> and it will print in YAML...

[20:16] <masak> moritz: ah.

[20:16] <sirrobert> but it won't work for print, just say =)

[20:16] * masak .oO( serves you people well for making 'print' and 'say' different... mumble grumble... )

[20:16] <sirrobert> heh

[20:17] <benabik> masak++

[20:17] <masak> s/well/right/

[20:17] * pmichaud 's nick starts with 'p', but he isn't always pmichaud++

[20:17] <sirrobert> your 'mumble grumble' reminded me of that little guy in the Legend of Zelda when you destroy his door with a bomb

[20:17] <sirrobert> heh

[20:17] <masak> ooh, we don't have a bot that raps people on the fingers for auto-karma-incring themselves?

[20:17] <masak> masak++

[20:17] <masak> heh :)

[20:17] <sorear> karma sorear

[20:17] <aloha> sorear has karma of 2198.

[20:17] <sorear> sorear++

[20:17] <sorear> karma sorear

[20:18] <aloha> sorear has karma of 2198.

[20:18] <masak> phew :)

[20:18] <sirrobert> heh

[20:18] <sorear> sorear--

[20:18] <sorear> karma sorear

[20:18] <aloha> sorear has karma of 2198.

[20:18] <rjbs> must be junctive

[20:18] <masak> sorear--

[20:18] <masak> karma sorear

[20:18] <aloha> sorear has karma of 2197.

[20:18] <rjbs> oh, wront channel. :)

[20:18] <masak> sorear++

[20:18] <felher> masak: ah, i forgot to take a look at your laptop while attending the yapc... i really wanted to see those 'rakudobug' and 'nieczaissue' keys ;)

[20:18] <rjbs> sorear++

[20:19] <sirrobert> karma sirrobert

[20:19] <aloha> sirrobert has karma of 14.

[20:19] <sirrobert> =)

[20:19] <sorear> and sometimes moritz is actually ronja :D

[20:19] <PerlJam> one day we won't be able to tell the difference  :)

[20:19] * masak .oO( ronja makes better use of the whole keyboard )

[20:20] <pmichaud> rc2, all tests pass for me!

[20:20] <sirrobert> r: ({a => 1} but 'foo').Str

[20:20] <p6eval> rakudo d70363:  ( no output )

[20:20] <sirrobert> r: print ({a => 1} but 'foo').Str

[20:20] <p6eval> rakudo d70363: OUTPUT«foo»

[20:20] <sirrobert> ok

[20:20] <sirrobert> decent workaround

[20:20] <pmichaud> I wasn't karma'ing myself -- it was that other guy.

[20:20] <moritz> pmichaud: URL to rc2?

[20:21] <pmichaud> http://pmichaud.com/sandbox/rakudo-star-2012.08-rc2.tar.gz

[20:21] <pmichaud> I wonder if my notebook is powerful enough to build a .msi

[20:23] * pmichaud gives it a try, expect failure and possible notebook meltdown.

[20:23] *** prammer left
[20:23] <sorear> try not to lose a leg in the process

[20:24] <moritz> or any other parts of the body :-)

[20:26] <sirrobert> appendix might be ok

[20:27] <sirrobert> man, I love sig-typed methods

[20:27] <sirrobert> multimethods

[20:28] <felher> masak: regarding macros: If you use a macro for DEBUGing instead of a subroutine, one does have the advantage (besides not needing to evaluate computationally-intensive-subroutine) that one can use $?LINE and $?FILE, doesn't one?

[20:29] *** mucker left
[20:29] <felher> ("doesn't one?" sounds odd...)

[20:30] <sirrobert> it just sounds odd because it's slightly antiquated 

[20:31] <felher> hmm. now that i think about it, i guess one doesn't. Since a macro returns an ast which doesn't occupy any lines, i don't think it is possible to get a $?LINE that makes any sense?

[20:32] <sorear> in a sub you can use C<caller.line>

[20:32] <felher> sorear: oh, okay. Thanks :)

[20:33] <sorear> n: sub foo { say CALLER::<$?LINE> }; ␤␤foo # i wonder if this form also works yet, it IS specced

[20:33] <p6eval> niecza v21-1-ga8aa70b: OUTPUT«Any()␤»

[20:33] *** leont left
[20:34] <masak> felher: hm, I'd expect $?LINE to be the current line in the macro...

[20:34] <felher> masak: okay, so it's actually quite the same as with subroutines? :)

[20:35] <felher> oh, the current line _in_ the macro? 

[20:35] <masak> waye.

[20:35] <masak> aye*

[20:36] <masak> $?LINE, I think, always expands to the line that $?LINE is on :)

[20:36] <moritz> I get this here on R* RC-2: http://perlpunks.de/paste/show/503e7d44.54b5.79

[20:36] <moritz> looks like a vim backup file

[20:37] <moritz> pmichaud: can you check if that's from your checkout somehow?

[20:37] <felher> masak: okay, so if a macro starts at line 20 and "say $?LINE" is the fifth line in the macro, it outputs 25 ? :)

[20:38] <tadzik> I'd expect it to say 20

[20:38] <tadzik> otherwise you get errors in the code you didn't write

[20:38] <tadzik> oh, wait, this time you did

[20:38] <tadzik> nvm

[20:39] <masak> felher: modulo an off-by-one error in that argument which would make it line 24, yes ;)

[20:39] <felher> masak: ah, of course. 24 :) Okay. Thanks for clarification :)

[20:39] <pmichaud> I'm guessing .msi will have to wait until I get to my home system.

[20:40] <masak> felher: caveat lector: I also have no idea, really. but what I proposed is what makes sense to me.

[20:42] <pmichaud> laptop is running really slow

[20:42] <pmichaud> moritz: I'll check on it in a sec

[20:42] <sirrobert> back in a min

[20:42] <pmichaud> (when I get my laptop back)

[20:42] *** sirrobert left
[20:42] * sorear wonders what pmichaud is writing from

[20:43] <pmichaud> only my irssi window is responding t the moment, and it's reallly slow

[20:44] <moritz> tar tzf says it's in the tar ball

[20:44] <felher> masak: fair enough :)

[20:44] <cjbot> https://twitter.com/daveoflynn/status/240912593798168577 : @shadowcat_mst That wasn't the original plan for Perl 6 though; it's evolved that way because ppl wouldn't upgrade from 5.

[20:45] <tadzik> I don't know the context, but the tweet sounds wrongish :)

[20:46] <jnthn> Somebody is wrong on the internet!!! o.O

[20:46] <tadzik> NOES!

[20:47] <benabik> Wasn't it more like "because people started really working on improving p5 again"?

[20:47] <felher> http://xkcd.com/386/ # a very nice xkcd. Though most people here probably know it by know :)

[20:47] <moritz> benabik: it was more like, nothing to upgrade to, for very long years

[20:48] <pmichaud> moritz: the *.swo file is in the Bailador repo.  :-/

[20:48] <moritz> oh wtf.

[20:48] *** Circlepuller joined
[20:49] <tadzik> uh-oh

[20:49] <tadzik> that's me

[20:49] <tadzik> git add . strikes back

[20:49] <moritz> wow, that is a really stupid idea :-)

[20:49] <moritz> removed in e14f75bd8e97d23fa4fa3c8c61a3f56d661c230d

[20:49] <pmichaud> I guess I should create a new tarball?  

[20:49] <pmichaud> *sigh*

[20:50] <tadzik> pushed

[20:50] <tadzik> ah, too lat

[20:50] <PerlJam> tadzik: Add .*.sw? to your git ignores

[20:50] <tadzik> moritz++, sorry for the mess

[20:50] <tadzik> PerlJam: yeah, I should

[20:51] *** Circlepuller_ left
[20:51] <tadzik> was probably git add lib/Bailador/Template, but still dumb

[20:51] <tadzik> tadzik--

[20:51] <dalek> star: f84a334 | pmichaud++ | modules/Bailador:

[20:51] <dalek> star: Bump Bailador to e14f75 commit (removing vim backup file).

[20:51] <dalek> star: review: https://github.com/rakudo/star/commit/f84a334bf0

[20:51] <jnthn> tadzik: tadzik in token pod_block:sym<paragraph_raw> {

[20:51] <jnthn> tadzik: It refers to a match $<spaces>

[20:51] <PerlJam> tadzik: I have that in my gitexcludes file so I don't have to keep ignoring it in each repo

[20:51] <jnthn>  But that isn't matched/captured anywhere

[20:52] <tadzik> d'oh

[20:52] <PerlJam> tadzik: though, if you add it to the .gitignore in each repo,  you get to share the ignorance with others :)

[20:53] <tadzik> that's not the only rule with this, too

[20:53] *** birdwindupbird left
[20:54] <pmichaud> http://pmichaud.com/sandbox/rakudo-star-2012.08-rc3.tar.gz  # rc3

[20:56] <sorear> tadzik: did you catch that bailador runs on niecza now?

[20:57] <tadzik> sorear: I think I recall you telling about it; didn't try it yet though

[20:57] <tadzik> sorear: also, if it didn't need todays patches to work correctly, then that convinces me that it was actually a Rakudobug, not Bailadorbug

[20:58] <sorear> tadzik: what were today's patches?

[20:58] <tadzik> I must try it when I get a while

[20:58] <sorear> wait, I can check

[20:59] <jnthn> tadzik: aye

[20:59] <jnthn> tadzik: I noticed 'cus it somehow ends up exploding in nqpqast

[20:59] <tadzik> long story short, attributes weren't filled in for whatever reason, so FROGSS++ workedaround it, so we can has working Bailador in star

[20:59] <tadzik> jnthn: I'm on it

[20:59] <sorear> tadzik: f609 is a genuine bailadorbug masked because niecza doesn't do ro methods yet

[20:59] <tadzik> I think on nom it just became something-which-numifies-to-0-anyway

[21:00] <tadzik> a-ha

[21:00] <tadzik> jnthn: I could check it myself now if nqp wasn't segfaulting for me on toqast :/

[21:01] <jnthn> tadzik: ah dang, I'd hoped we woulda eliminated the segfault somehow...

[21:01] <dalek> rakudo/nqpqast: efa7916 | jonathan++ | src/Perl6/Actions.pm:

[21:01] <dalek> rakudo/nqpqast: A few our => my (had no need to be our).

[21:01] <dalek> rakudo/nqpqast: review: https://github.com/rakudo/rakudo/commit/efa7916f07

[21:03] <dalek> nqp: 2b1bcbb | (Elizabeth Mattijsen)++ | docs/pir2nqp.todo:

[21:03] <dalek> nqp: A "todo" list to get rid of unneeded "pir::" references

[21:03] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2b1bcbbacd

[21:04] <tadzik> jnthn: care to try https://gist.github.com/3518937 ? I don't have a functioning rakudo atm

[21:07] <jnthn> will do, thanks

[21:07] <dalek> nqp/toqast: c7ae2e6 | jonathan++ | / (3 files):

[21:07] <dalek> nqp/toqast: Eliminate some of the now-unrequired PAST code.

[21:07] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/c7ae2e6369

[21:08] *** stopbit left
[21:13] <felher> moritz: ping

[21:14] * tadzik wonders if perl -e 'while (system("make install")) {}' will succeed to build nqp

[21:15] <tadzik> or I can just turn the GC off

[21:16] *** sirrobert joined
[21:17] *** bruges left
[21:19] *** bruges joined
[21:19] <masak> 'night, #perl6

[21:20] <tadzik> good knight masak'

[21:22] <felher> o/ masak 

[21:24] *** kaare__ left
[21:25] <pmichaud> rc3, all tests pass

[21:25] *** skids left
[21:29] * [Coke] waves from MCO.

[21:31] <pmichaud> mmmm, MCO

[21:31] <sirrobert> what's the command line syntax that corresponds to sub MAIN (%params={}) {...} ?

[21:31] <sirrobert> what is it looking for to populate %params?

[21:34] * [Coke] wonders if his npq issues have magically be fixed since he left the conference. ;)

[21:34] <[Coke]> @ARGV ?

[21:34] <pmichaud> well, MCO is close to a magical place, iirc.

[21:34] <sirrobert> hmmm I think MAIN args all default to Str

[21:35] <dalek> nqp/toqast: 8503dbe | jonathan++ | src/Q (4 files):

[21:35] <dalek> nqp/toqast: Eliminate rxtype pastnode.

[21:35] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/8503dbea90

[21:37] <pmichaud> well, I'm tired, so off to bed for me.  long day tomorrow.

[21:38] <sirrobert> wave

[21:38] <tadzik> ha, make test passes on toqast

[21:39] <[Coke]> pmichaud: I tried to reduce the amount of code required to trigger the serialization error. Looks related the to GLOBAL::foo ->  trick we used to avoid issues with control exceptions.

[21:39] <tadzik> on rakudo, I mean :0

[21:39] <tadzik> :)

[21:39] <[Coke]> pmichaud: night!

[21:45] *** thou left
[21:50] *** crab2313 joined
[21:52] <jnthn> tadzik: make spectest ain't awful either. Half way through S32 and only about 10 files with issues so far.

[21:53] <tadzik> yeah, seen this :)

[21:53] <tadzik> so where does the Pod thing hurt?

[21:54] <[Coke]> hurm. I wonder if I would do better reconstructing partcl from scratch on nqp than trying to port from parrot-nqp.

[21:54] <[Coke]> (stealing heavily where appropriate)

[21:54] <PerlJam> [Coke]: probably.  You build stuff better the second (or third) time around having made mistakes the first time and learned from them.

[21:55] *** sjohnson left
[21:55] <PerlJam> When porting, you're kind of copying your mistakes around and making them work in a new environment.

[21:55] <jnthn> tadzik: I think actually it's exposing some NQP issue.

[21:55] <PerlJam> (whether you realize it or not)

[21:55] <jnthn> ta	But early on, in S02

[21:55] <[Coke]> PerlJam: well, the problem isn't that, per se, just that parrot-nqp and nqp are apparently really really different. :P

[21:55] <[Coke]> plus, also, I've already rewritten partcl ... 5 times?

[21:56] <[Coke]> not to mention the incremental changes all the time.

[21:56] <PerlJam> [Coke]: Then what's another rewrite?  :)

[21:56] <[Coke]> .. come here and let me smack you. :P

[21:57] * PerlJam pencils in "expert tcl implementor" to Coke's resume

[21:57] <[Coke]> aloha: seen schwern

[21:57] <aloha> [Coke]: schwern was last seen in #perl6 455 days 2 hours ago leaving the channel.

[21:59] <sirrobert> ok, time for me to go.  wave

[21:59] *** sirrobert left
[22:03] *** spider-mario joined
[22:03] <[Coke]> ~~

[22:03] <[Coke]> cjbot: help

[22:05] *** MayDaniel left
[22:06] <cjbot> Run by Coke, I relay tweets about Perl 6 from https://twitter.com/#!/search/%23perl6%20OR%20%23p6p5%20OR%20%23p5p6%20OR%20%22perl%206%22

[22:06] *** sjohnson joined
[22:07] <dalek> nqp/toqast: 67fc54e | jonathan++ | src/ops/nqp.ops:

[22:07] <dalek> nqp/toqast: Toss an unused op.

[22:07] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/67fc54e4d2

[22:07] <dalek> nqp/toqast: e10bae4 | jonathan++ | src/how/NQPClassHOW.pm:

[22:07] <dalek> nqp/toqast: Eliminate an unused multi-dispatch code path from a previous factoring.

[22:07] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/e10bae4a15

[22:07] <dalek> nqp/toqast: e2dedb8 | jonathan++ | src/how/NQPClassHOW.pm:

[22:07] <dalek> nqp/toqast: Eliminate a bit more of the old multi code.

[22:07] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/e2dedb81b2

[22:07] <dalek> nqp/toqast: 5abcf1d | jonathan++ | src/stage0/ (9 files):

[22:07] <dalek> nqp/toqast: Update the bootstrap.

[22:07] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/5abcf1d430

[22:07] <dalek> nqp/toqast: 132adc6 | jonathan++ | src/ops/nqp.ops:

[22:07] <dalek> nqp/toqast: Toss a bunch of unused dynops.

[22:07] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/132adc6692

[22:07] *** whiteknight joined
[22:09] <[Coke]> wow. it took /3/ minutes for cjbot to respond. yikes.

[22:16] <sorear> that must be why it pings out so much

[22:16] <[Coke]> is there a known good "build a language on top of nqp" demo?

[22:16] <[Coke]> I bet it's over-using the 15s sleep idle task.

[22:26] *** alester left
[22:30] <dalek> nqp/toqast: b8e94a8 | jonathan++ | / (4 files):

[22:30] <dalek> nqp/toqast: Eliminate the now-unused DispatcherSub PMC.

[22:30] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/b8e94a85ca

[22:32] <jnthn> Time for some rest...leaving this pleasant, but somewhat mosquito-filled place :)

[22:33] <jnthn> (tomorrow in the morning, earlyish)

[22:34] <sorear> there are mosquitos in Norway? :|

[22:34] <sorear> so much for my wanting to live there :|

[22:35] * [Coke] boggles. nqp seems to be MUCH happier if I avoid compiling individual bits to pir.

[22:35] * [Coke] tries something obvious.

[22:39] <[Coke]> if I shove all the .pm into a single pm, running that pm gets me a partcl prompt.

[22:39] <[Coke]> (which then fails at runtime.)

[22:41] *** cjbot left
[22:44] *** cjbot joined
[22:48] *** crab2313 left
[22:53] *** skids joined
[22:53] *** sjohnson left
[22:53] *** sjohnson joined
[23:05] <sorear> [Coke]: did you try compiling the single big pm to pir?

[23:05] <sorear> the failure you had earlier was in code that I think is only run when saving pir

[23:06] *** dju left
[23:10] <rjbs> pir review.  pir pressure.

[23:11] *** dju joined
[23:15] <cognominal> ça va de pir en pir.

[23:18] *** cjbot left
[23:21] *** cjbot joined
[23:22] *** cognominal left
[23:22] *** cognominal joined
[23:25] *** fgomez left
[23:25] <cjbot> https://twitter.com/takeshita_kenji/status/240953126818041856 : @quietfanatic Like getting Perl 6 out the door?

[23:25] *** araujo left
[23:28] * Guest2539 is calling it a day as well…  travel time mostly tomorrow, patches to nqp after that

[23:28] *** japhb_ joined
[23:28] *** Guest2539 is now known as lizmat

[23:29] *** lizmat left
[23:29] <japhb_> Is there anything right now that will correctly syntax highlight Perl 6, even if it's really slow?

[23:30] <japhb_> I'm looking for offline highlighting for generating nice looking code blocks for web sites.

[23:30] <japhb_> In particular, perl6.org.  ;-)

[23:32] <japhb_> phenny, ask uvtc What did you use to syntax highlight the snippets at http://unexpected-vortices.com/temp/perl6-snippets/index.html ?

[23:32] <phenny> japhb_: I'll pass that on when uvtc is around.

[23:33] <au> Text::VimColor plus perl6.vim ( either builtin, or https://github.com/petdance/vim-perl )?

[23:33] <au> fsvo "correctly", of course :)

[23:34] <japhb_> au: Thank you, I'm taking a look at that.

[23:35] <au> glad to help

[23:37] *** cjbot left
[23:38] *** gongyiliao joined
[23:39] *** Pleiades` left
[23:39] <felher> 'night, #perl6

[23:40] <japhb_> o/

[23:40] *** Pleiades` joined
[23:40] *** cjbot joined
[23:49] *** popl left
[23:57] <cognominal> rakudo: say dir '/', :test( -> $_ { IO::Path.new($_).d })

[23:57] <p6eval> rakudo d70363: OUTPUT«Failed to get the directory contents of '/': Could not find symbol '&Path'␤  in block  at src/gen/CORE.setting:7432␤  in method <anon> at src/gen/CORE.setting:9784␤  in <anon> at src/gen/Metamodel.pm:2304␤  in any find_method_fallback at src/gen/Metamodel.pm:2302␤ …

[23:58] <cognominal> hum, I suppose that's protected for the bot.

[23:58] <cognominal> prints ". .." here which I found odd.

[23:58] <cognominal> A night of sleep will probably help

