[00:06] *** nub is now known as sudokode

[00:14] <masak> 'night, #perl6

[00:30] *** krunen joined
[00:37] *** spider-mario left
[00:37] *** jeffreykegler joined
[00:40] *** colomon joined
[00:51] *** orafu left
[00:51] *** sftp left
[00:58] *** orafu joined
[00:58] *** sftp joined
[00:58] *** BinGOs joined
[00:58] *** eiro_ joined
[00:58] *** eiro joined
[00:58] *** larks joined
[00:58] *** sftp left
[00:58] *** sftp joined
[01:03] *** orafu left
[01:04] *** orafu joined
[01:20] *** cognominal__ left
[01:21] *** cognominal joined
[01:23] *** jeffreykegler left
[01:23] *** Pleiades` left
[01:25] *** Pleiades` joined
[01:35] *** araujo left
[01:37] *** Guest45820 left
[01:59] *** benabik left
[02:00] *** benabik joined
[02:31] *** BinGOs_ joined
[02:31] *** BinGOs left
[02:31] *** eiro_ left
[02:31] *** eiro left
[02:32] *** eiro joined
[02:32] *** eiro_ joined
[02:38] *** Psyche^ joined
[02:41] *** Patterner left
[02:41] *** Psyche^ is now known as Patterner

[02:46] *** orafu left
[02:46] *** OuLouFu joined
[02:47] *** OuLouFu is now known as orafu

[03:11] *** thou left
[03:14] *** localhost left
[03:16] *** localhost joined
[03:19] *** mucker joined
[03:21] *** sftp left
[03:22] *** sftp joined
[03:30] *** skids joined
[03:31] *** Chillance left
[03:42] *** jaldhar joined
[03:43] *** mucker left
[03:47] *** thelazydeveloper left
[03:51] *** topo__ joined
[03:55] *** topo left
[04:42] <moritz> \o

[04:43] <sorear> o/

[04:50] *** kaare_ joined
[04:52] <japhb> o/

[04:55] <moritz> japhb: do you have any future plans for doc.perl6.org?

[04:55] <japhb> Some ideas, no firm plans.  Why do you ask?

[04:56] <moritz> just curiousity

[04:56] <sorear> o/ japhb 

[04:56] <moritz> and maybe to avoid conflicts, though my own ideas are pretty vague at that point

[04:57] <japhb> Hullo sorear.  :-)

[04:58] <japhb> I'll send a couple of the ideas in a few minutes -- I just got called to deal with something.  :-(

[04:58] <moritz> no hurry

[05:00] *** topo joined
[05:02] *** topo__ left
[05:02] <moritz> fwiw I plan to work a bit on operators

[05:02] *** JimmyZ joined
[05:06] <moritz> nr: say 42.Int(3, 4)

[05:06] <p6eval> rakudo cb065c: OUTPUT«Too many positional parameters passed; got 3 but expected 1␤  in method Int at src/gen/CORE.setting:2756␤  in block  at /tmp/j3iJNk3_z9:1␤␤»

[05:06] <p6eval> ..niecza v19-15-g051783d: OUTPUT«Unhandled exception: Excess arguments to Int.Int, used 1 of 3 positionals␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (Int.Int @ 1) ␤  at /tmp/xGKHv3WWqJ line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3929 (ANON @ 3) ␤  at /home…

[05:10] <moritz> nr: say 42.*Int(3, 4)

[05:10] <p6eval> niecza v19-15-g051783d: OUTPUT«===SORRY!===␤␤NYI dottyop form .* at /tmp/gheRBO_sbE line 1 (EOF):␤------> say 42.*Int(3, 4)⏏<EOL>␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1402 (die @ 5) ␤  at /home/p6eva…

[05:10] <p6eval> ..rakudo cb065c: OUTPUT«Too many positional parameters passed; got 3 but expected 1␤  in method Int at src/gen/CORE.setting:2756␤  in method dispatch:<.*> at src/gen/CORE.setting:878␤  in block  at /tmp/iAemIUbWor:1␤␤»

[05:12] <moritz> nr: say 42.*foo.WHAT

[05:12] <p6eval> rakudo cb065c: OUTPUT«Parcel()␤»

[05:12] <p6eval> ..niecza v19-15-g051783d: OUTPUT«===SORRY!===␤␤NYI dottyop form .* at /tmp/zBUm0lzRc4 line 1:␤------> say 42.*foo⏏.WHAT␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1402 (die @ 5) ␤  at /home/p6eval/niecza/src…

[05:17] *** guidj0s joined
[05:19] <moritz> nr: my $x; say $x++

[05:19] <p6eval> rakudo cb065c, niecza v19-15-g051783d: OUTPUT«0␤»

[05:20] <moritz> nr: my Str $x; say $x++

[05:20] <p6eval> rakudo cb065c: OUTPUT«Type check failed in assignment to '$x'; expected 'Str' but got 'Int'␤  in sub postfix:<++> at src/gen/CORE.setting:1358␤  in block  at /tmp/IYYEZ4Wi43:1␤␤»

[05:20] <p6eval> ..niecza v19-15-g051783d: OUTPUT«0␤»

[05:23] <dalek> doc: 2d026f8 | moritz++ | lib/operators.pod:

[05:23] <dalek> doc: document some operators

[05:23] <dalek> doc: review: https://github.com/perl6/doc/commit/2d026f87b4

[05:29] <japhb> moritz, I think for me the next doc things will probably be about HTML improvements and readability/usability -- right now it's hard for me to navigate and find my way around -- the very extensive TOC at the top of each page actually makes things worse sometimes because you have to scroll to get to the text; that sort of thing.

[05:30] <japhb> I'm not sure how much of that will be CSS, how much will be Pod::To::HTML, and how much just the generation of the Pod tree to get what we want

[05:33] <japhb> On a vaguely related note, I spoke to a designer at $day_job, and he had some interesting (constructive) things to say about perl6.org.  Not being a designer, I'm sure I'm not doing him justice, but here are some comments I remember:

[05:34] <japhb> The strong shadows, bold borders, and wide-radius rounded corners on a flat background give an effect like islands floating in space,

[05:35] <japhb> rather than cohesiveness.  Reducing these can make it feel more like sections of a page rather than sections *above* a page.

[05:35] <sorear> I think the single most important problem with perl6.org is the relative lack of content

[05:36] <sorear> moritz++ japhb++ writing content for perl6.org

[05:36] <japhb> When using strong colors, the eye doesn't like large areas of flat.  Gradients help, but texture (whether abstract or concrete, like a background "scene" is even better.

[05:37] <japhb> He also said to be aware of turning "fun for 7 year olds" into "condescending design".

[05:37] <sorear> imho we should try to have the various resources that are linked off perl6.org be stylistically cohesive in some sense

[05:39] <japhb> Plus which, the design goal does not fit the functionality: The function (on the front page) is a link farm, the design goal is fun and getting-to-know

[05:43] <TimToady> that last is very perceptive

[05:45] *** gongyiliao joined
[05:45] <sorear> I don't like how link-farmy it is

[05:46] <japhb> sorear, I agree with the stylistic cohesiveness desire.  Clearly there was an attempt to do that, whether or not it ended up perfect.

[05:46] <japhb> sorear, I agree.

[05:48] <japhb> I was kindof thinking that maybe we need to have the front and center be some kind of "this is what the language looks like" piece. A small window of rotating code samples, or even a screencast or the like.

[05:49] <japhb> It would be even nicer to be able to go to a 'try' site (I played with Try Ruby while I was thinking about this; it's pretty slick)

[05:51] *** cognominal left
[06:01] <japhb> Oh, and to the comment someone had posted saying that perl6.org could not be seen as professional and competent with Camelia on the front page, our designer pointed out that Github has done an excellent job of achieving a very professional and competent web/corporate image centered on the playful and fun Octocat.

[06:01] <JimmyZ> \o/, new modern fashion perl6.org?

[06:04] *** brrt joined
[06:05] <sorear> o/ JimmyZ

[06:05] <sorear> japhb: hmm, I'm almost inspired to spend some time working on our Javascript Perl 6 implementation technology

[06:06] <sorear> try.rakudo's problem was the backend subsystem that broke every other day

[06:06] <japhb> sorear, Oh please oh please oh please

[06:06] <japhb> ;-)

[06:06] <sorear> niecza was designed from the start to be silverlight-friendly

[06:07] <sorear> unfortunately Microsoft discontinued that platform and Mono followed quickly

[06:08] <sorear> which leaves... javascript, javascript again^W^WActionScript(tm), Java, NaCl

[06:08] <sorear> mono allegedly has NaCl support but I've never heard of anyone using it

[06:09] <JimmyZ> \o/ V8 engine 

[06:10] <sorear> V8 is pretty cool but Javascript gives a rather large tail start by its design

[06:11] * JimmyZ heard that the js designer said that he hate js.

[06:11] <sorear> fwiw, $dayjob just had me learn Javascript last month

[06:11] <japhb> sorear, sure, but for the kinds of things a "try" widget needs to do, it could be dog slow as long as it was small enough to fit in the (rather tight) browser per-script memory limits and functional enough to show the flavor of the language -- most users would be trying such simple stuff, the slowness issue would be mostly a non-issue.

[06:12] <japhb> sorear, well now you're qualified.  ;-)

[06:12] <sorear> browser memory limits are not as small as I once imagined

[06:12] <sorear> $dayjob_application has about 1.5MB of client-side code and it works fine

[06:13] <japhb> I've run into them rather spectacularly while doing visualization of largish data sets.

[06:13] <sorear> I think we have different definitions of largish

[06:14] <japhb> It may be that code and heap space have separate limits; mine would have been heap or more specifically deserialized JSON space

[06:14] <sorear> when P6-on-JS was first broached here, I expected problems to start somewhere around 64k

[06:14] <japhb> Oh.  I get surprised whenever something locks down a single digit number of MB.

[06:14] <japhb> "Less than 16 MB?  WHY?"

[06:16] <dalek> std: c40482d | larry++ | / (4 files):

[06:16] <dalek> std: push +% cheat out of parser into codegen

[06:16] <dalek> std: 

[06:16] <dalek> std: translate STD_P5 to use +% instead of **

[06:16] <dalek> std: also, fix missing initializer on signature declarator that snuck into boot

[06:16] <dalek> std: review: https://github.com/perl6/std/commit/c40482dbc4

[06:17] <sorear> interestingly, chrome on my machine will happily let you allocate a 1GB typed array

[06:17] <sorear> (I was trying to implement a scrypt variation in js last week)

[06:17] <japhb> The first thing I think of when I hear that is "Threaded interpreter with functionally unlimited space!"

[06:19] <japhb> Well, in any case, it sounds like the limits aren't tight enough to keep you from making it happen, so please do.  I think it would be a very, very good thing.

[06:20] <sorear> did some more experimentation, can make a javascript Array with 64Mi initialized elements no problem

[06:21] <japhb> OK, looks like I'm headed AFK for the night.

[06:21] <sorear> (naturally, it's two orders of magnitude slower than the TypedArray version, which could fill 1GB in a couple seconds, this one is going around 4MB/s)

[06:21] <japhb> eww.

[06:22] <japhb> G'night all.  &

[06:22] <sorear> I am, however, getting 'aw snap's left and right during this testing

[06:22] <sorear> 'night japhb

[06:22] <TimToady> o/

[06:23] * TimToady has got the +% pushed down about as far as he can without doing the requisite rewrite of REPSEP* to support other quantifiers and %%

[06:26] <TimToady> getting to be too many degrees of freedom to just keep writing more PLUS[gfr] routines and such

[06:26] *** topo left
[06:27] *** gongyiliao left
[06:27] *** guidj0s left
[06:29] *** thou joined
[06:32] *** alvis joined
[06:35] *** raiph joined
[06:37] *** tokuhiro_ joined
[06:41] *** thou left
[06:42] *** kst joined
[06:46] *** brrt left
[06:48] <sorear> phenny: tell japhb I screwed up those microbenchmarks.  Doing it less improperly, untyped arrays are only twice as slow for integer data

[06:48] <phenny> sorear: I'll pass that on when japhb is around.

[06:52] *** topo joined
[06:55] *** jeffreykegler joined
[06:57] *** jeffreykegler left
[06:58] *** araujo joined
[07:08] *** raiph left
[07:09] <dalek> std: c3e944a | larry++ | STD.pm6:

[07:09] <dalek> std: change from token to rule made some ws buglets

[07:09] <dalek> std: review: https://github.com/perl6/std/commit/c3e944a752

[07:09] * TimToady should not stay up till 2am four nights in a row

[07:09] <TimToady> zzz &

[07:21] *** JimmyZ_ joined
[07:22] *** JimmyZ left
[07:22] *** JimmyZ_ is now known as JimmyZ

[07:29] *** alvis` joined
[07:31] *** alvis left
[07:32] *** SamuraiJack joined
[07:45] *** BinGOs_ is now known as BinGOs

[07:45] *** BinGOs left
[07:45] *** BinGOs joined
[07:59] *** fgomez joined
[08:11] *** stepnem joined
[08:14] *** fgomez left
[08:16] *** fgomez joined
[08:19] *** leont joined
[09:12] *** sergot joined
[09:12] <sergot> hi o/

[09:17] <moritz> sorear, japhb: the reason for perl6.org being a link collection is that that's much easier to maintain than having more content

[09:19] <moritz> when I started it, all other resources on Perl 6 were somewhat out of date, so I searched for some form which would be easier to prevent from bitrot

[09:20] <moritz> so if we depart from that model, it should be done very slowly, so that we can see if we manage to keep it all up to date

[09:25] <masak> good morning, #perl6

[09:26] <moritz> good am, ma<tab>

[09:26] <masak> :<tab>

[09:30] * moritz finally remembered the old domain name for the content that is now perl6.org

[09:30] <moritz> it was perl6-projects.org

[09:30] <moritz> seems I still hold that domain

[09:31] * moritz should let it expire

[09:31] <moritz> unless somebody else wants to do anything productive with it

[09:34] <tadzik> hello #perl6

[09:34] <sorear> moritz: if we have stylistic consistency, it won't feel like a collection of links

[09:34] <sorear> it'll still be hypertext of course :D

[09:34] <sorear> o/ masak !

[09:37] <moritz> sorear: so, what would be a way to achieve stylistic consistency? some kind of templating style that all Perl 6 related web pages can use (and vary to some degree)?

[09:37] <moritz> \o tadzik 

[09:38] <moritz> nr: say Any ** 2

[09:38] <p6eval> rakudo cb065c: OUTPUT«use of uninitialized value of type Any in numeric context  in block  at /tmp/_xvFWTCjw1:1␤␤0␤»

[09:38] <p6eval> ..niecza v19-15-g051783d: OUTPUT«Use of uninitialized value in numeric context␤  at /home/p6eval/niecza/lib/CORE.setting line 1272 (warn @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 296 (Any.Numeric @ 8) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/d6n7b98yP_ line 1 (mainli…

[09:38] <moritz> nr: say 2 ** Any

[09:38] <p6eval> rakudo cb065c: OUTPUT«use of uninitialized value of type Any in numeric context  in block  at /tmp/e8r8WsVDNq:1␤␤1␤»

[09:38] <p6eval> ..niecza v19-15-g051783d: OUTPUT«Use of uninitialized value in numeric context␤  at /home/p6eval/niecza/lib/CORE.setting line 1272 (warn @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 296 (Any.Numeric @ 8) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/xOCEVHN8BN line 1 (mainli…

[09:38] *** MayDaniel joined
[09:43] *** fgomez left
[09:45] <dalek> doc: 508642f | moritz++ | lib/operators.pod:

[09:45] <dalek> doc: [operators] infix **, prefix ? and !

[09:45] <dalek> doc: review: https://github.com/perl6/doc/commit/508642f67f

[09:45] *** fgomez joined
[09:46] *** fgomez left
[09:46] *** fgomez joined
[09:46] <sorear> moritz: I was thinking more in terms of "informal agreement"

[09:47] <sorear> sleep&

[09:51] *** cognominal joined
[09:52] <moritz> fwiw I wouldn't object to somebody moving my 5-to-6 series to perl6.org

[09:53] <moritz> but currently I'm not motivated to do it, I can spend my 6y tuits better in other ways

[09:53] * JimmyZ wonders who owns perl7.org

[09:55] *** MayDaniel left
[09:57] *** icwiener joined
[10:04] *** Gothmog__ joined
[10:04] *** topo__ joined
[10:04] *** sivoais_ joined
[10:04] <moritz> Jeff Prothero

[10:05] <masak> "This page last updated 14 March 1998" -- and looks it, too. :)

[10:07] <JimmyZ> Created On:13-Aug-2005

[10:08] *** ivan``_ joined
[10:09] *** topo left
[10:09] *** sivoais left
[10:09] *** ivan`` left
[10:09] *** Gothmog__ is now known as Gothmog_

[10:10] *** topo__ is now known as topo

[10:21] *** JimmyZ left
[10:25] *** thelazydeveloper joined
[10:26] *** JimmyZ joined
[10:39] *** mucker joined
[10:51] <moritz> nr: my %h = a => 1, b => 2; say (|%h).perl

[10:51] <p6eval> rakudo cb065c: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&prefix:<|>' called (line 1)␤»

[10:51] <p6eval> ..niecza v19-15-g051783d: OUTPUT«\(|{"a" => 1, "b" => 2})␤»

[10:54] <moritz> n: my %h = a => 1, b => 2; say (||%h).perl

[10:54] <p6eval> niecza v19-15-g051783d: OUTPUT«Unhandled exception: Slicels NYI␤  at /home/p6eval/niecza/lib/CORE.setting line 1414 (die @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3312 (prefix:<||> @ 4) ␤  at /tmp/mHphPZomyT line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting lin…

[10:56] <jnthn> o/

[10:57] *** birdwindupbird joined
[10:57] <moritz> \o jnthn 

[10:58] <moritz> jnthn: did you see the thing about codegen that uses vtables in the backlog (or the ticket)?

[10:59] *** icwiener left
[10:59] <jnthn> moritz: yes

[10:59] <moritz> nr: say ?^ (1|2)

[10:59] <p6eval> niecza v19-15-g051783d: OUTPUT«any(Bool::False, Bool::False)␤»

[10:59] <p6eval> ..rakudo cb065c: OUTPUT«False␤»

[11:00] * moritz would argue that rakudo has that one right

[11:02] <moritz> S03:714

[11:02] <moritz> Constructs a range of C<0 ..^ +$limit> or locates a metaclass as a shortcut

[11:02] <moritz> for C<$limit.HOW>.  See L</Range and RangeIter semantics>.

[11:02] <moritz> wtf?

[11:02] <moritz> does the confuse prefix ^ with postfix ^ ?

[11:04] <dalek> specs: 6aa4943 | moritz++ | S03-operators.pod:

[11:04] <dalek> specs: [S03] remove confused fossil about prefix:<^>

[11:04] <dalek> specs: review: https://github.com/perl6/specs/commit/6aa4943b3b

[11:04] <moritz> version 256 \o/

[11:10] <jnthn> moritz: "seemed cute at the time" :)

[11:16] *** brrt joined
[11:16] <dalek> doc: d2acc93 | moritz++ | lib/operators.pod:

[11:16] <dalek> doc: [operators] add several prefix operators

[11:16] <dalek> doc: review: https://github.com/perl6/doc/commit/d2acc939c6

[11:17] <colomon> moritz++

[11:18] *** spider-mario joined
[11:18] <moritz> nr: say ^5

[11:18] <p6eval> rakudo cb065c, niecza v19-15-g051783d: OUTPUT«0..^5␤»

[11:23] <moritz> colomon: is there a name for operations (like sqrt, log, sin etc.) that generally return an irrational number?

[11:25] <colomon> yes, give my brain a moment....

[11:26] <colomon> "Transcendental function"

[11:26] <colomon> though sqrt may not be one...

[11:27] <colomon> yes, is not.

[11:27] <shachaf> sqrt is algebraic.

[11:27] <colomon> so maybe that's not the precise word you're looking for

[11:27] <shachaf> Also, that doesn't mean "generally", it means "ever".

[11:27] <shachaf> Well, it doesn't mean that precisely either.

[11:29] <colomon> it doesn't mean that at all, most (all?) trig functions can return rational numbers

[11:31] <leont> Well, all of them can return 0, I think

[11:45] *** kaare_ left
[11:52] <moritz> nr: say 10 %% any(2, 3)

[11:53] <p6eval> rakudo cb065c: OUTPUT«any(True, False)␤»

[11:53] <p6eval> ..niecza v19-15-g051783d: OUTPUT«any(Bool::True, Bool::False)␤»

[12:08] <dalek> nqp: 23731de | jnthn++ | src/QAST/Compiler.nqp:

[12:08] <dalek> nqp: Register type inference fix.

[12:08] <dalek> nqp: review: https://github.com/perl6/nqp/commit/23731debda

[12:08] <dalek> nqp: 83e2a14 | jnthn++ | src/QAST/Operations.nqp:

[12:08] <dalek> nqp: Add some missing op variants.

[12:08] <dalek> nqp: review: https://github.com/perl6/nqp/commit/83e2a14cc9

[12:09] <dalek> rakudo/use_unbox: cb8904d | jnthn++ | src/Perl6/Ops.pm:

[12:09] <dalek> rakudo/use_unbox: Switch set for unbox_i.

[12:09] <dalek> rakudo/use_unbox: review: https://github.com/rakudo/rakudo/commit/cb8904dfcc

[12:09] <dalek> rakudo/use_unbox: dbeaeaa | jnthn++ | src/core/ (2 files):

[12:09] <dalek> rakudo/use_unbox: Various tweaks to avoid trying to unbox things that aren't 6model objects.

[12:09] <dalek> rakudo/use_unbox: review: https://github.com/rakudo/rakudo/commit/dbeaeaa5da

[12:10] <jnthn> moritz: In theory this helps...in practice "use v6" now hangs :/

[12:12] *** JimmyZ left
[12:14] *** whiteknight joined
[12:15] *** whiteknight is now known as Guest44047

[12:16] *** JimmyZ joined
[12:22] *** xinming joined
[12:24] *** xinming_ left
[12:41] <dalek> rakudo/use_unbox: 2219b21 | jnthn++ | src/Perl6/Ops.pm:

[12:41] <dalek> rakudo/use_unbox: Make p6bool a bit smarter.

[12:41] <dalek> rakudo/use_unbox: review: https://github.com/rakudo/rakudo/commit/2219b21b31

[12:41] <dalek> rakudo/use_unbox: e84c9a8 | jnthn++ | src/core/MapIter.pm:

[12:41] <dalek> rakudo/use_unbox: Fix something we got away with but probably should not have.

[12:41] <dalek> rakudo/use_unbox: review: https://github.com/rakudo/rakudo/commit/e84c9a8889

[12:47] <dalek> rakudo/use_unbox: 3695086 | jnthn++ | src/core/Mu.pm:

[12:47] <dalek> rakudo/use_unbox: Fix mixins.

[12:47] <dalek> rakudo/use_unbox: review: https://github.com/rakudo/rakudo/commit/369508648c

[12:47] *** gongyiliao joined
[12:48] *** brrt left
[13:00] *** MayDaniel joined
[13:06] <moritz> jnthn++

[13:06] <dalek> doc: a075be8 | moritz++ | lib/Numeric.pod:

[13:06] <dalek> doc: [Numeric] explain "widest type" rule

[13:06] <dalek> doc: review: https://github.com/perl6/doc/commit/a075be84ed

[13:06] <dalek> doc: 062e3be | moritz++ | lib/operators.pod:

[13:06] <dalek> doc: [operators] add some multiplicative precedence operators

[13:06] <dalek> doc: review: https://github.com/perl6/doc/commit/062e3be3bf

[13:10] <dalek> rakudo/use_unbox: ad03484 | jnthn++ | src/core/List.pm:

[13:10] <dalek> rakudo/use_unbox: Add missing coercions.

[13:10] <dalek> rakudo/use_unbox: review: https://github.com/rakudo/rakudo/commit/ad0348433a

[13:10] <dalek> rakudo/use_unbox: effbe85 | jnthn++ | src/core/Temporal.pm:

[13:10] <dalek> rakudo/use_unbox: Fix for new use of unbox_i.

[13:10] <dalek> rakudo/use_unbox: review: https://github.com/rakudo/rakudo/commit/effbe85b60

[13:12] <masak> ("link farm" vs "fun and getting-to-know" mismatch detection)++

[13:13] <moritz> I agree with the analysis, but disagree with the word "link farm" :-)

[13:13] <masak> it's a bit dismissing, agreed.

[13:13] <moritz> it's not like we grow links there, or aggregate them mindlessly

[13:14] <masak> substitude your own positive term. I really mean that term.

[13:14] <moritz> s/farm/collection/ and I'm happy :-)

[13:14] <moritz> so, I see two approaches

[13:14] <masak> fwiw, "a small window of rotating code samples" is what I always really liked about Ruby's home page.

[13:14] <jnthn> .oO( little animal collection )

[13:14] <moritz> 1) make the page more fun

[13:14] <moritz> or

[13:15] <moritz> 2) make the design a bit less "fun"

[13:15] <moritz> masak: deal: you provide a few code samples, and I find a way to integrate them into the site

[13:15] <jnthn> moritz: use_unbox should eliminate all set op usages for the integer case. Smoke at your leisure. :)

[13:16] <moritz> jnthn: recompilation is already running :-)

[13:17] <masak> moritz: I'll start building a gist with attractive code samples. I'd also like to extend the challenge to others to help with that. but I'll make three or four that we can start with.

[13:18] <moritz> ++masak

[13:18] <masak> by the way, "small" is 10 lines or less, and not so wide either. :)

[13:18] <moritz> masak: I guess others will chime in once they see them on the front page

[13:18] <masak> yeah.

[13:18] <masak> let's do this.

[13:18] * masak writes the gist

[13:19] <moritz> using examples from rosettacode is also allowed :-)

[13:19] <masak> ooh

[13:20] <dalek> doc: ce570d0 | moritz++ | lib/operators.pod:

[13:20] <dalek> doc: [operators] additive and replication precedence

[13:20] <dalek> doc: review: https://github.com/perl6/doc/commit/ce570d094d

[13:21] <jnthn> moritz: oh, I didn't bump NQP_REVISION in that branch...

[13:22] <moritz> jnthn: I used newest nqp

[13:22] <moritz> jnthn: I'm used to branches requiring newest nqp, even if they don't bump the revision

[13:24] *** fgomez left
[13:25] <jnthn> moritz: OK, great :)

[13:25] <masak> one: https://gist.github.com/3324433

[13:25] * jnthn is spectesting pulling in of the STD fix for the repeat bug

[13:25] <moritz> repeat bug?

[13:26] <jnthn> RT #114432 

[13:27] <dalek> doc: 5951b2a | moritz++ | lib/operators.pod:

[13:27] <dalek> doc: [operators] concatenation, junctive operators

[13:27] <dalek> doc: review: https://github.com/perl6/doc/commit/5951b2a2b4

[13:27] <moritz> jnthn: all spectests pass in the use_unbox branch

[13:28] <jnthn> moritz: Nice

[13:28] <moritz> http://doc.perl6.org/language/operators # far from complete, but much more than before :-)

[13:29] <jnthn> moritz++

[13:29] <jnthn> Hmm, the anchor tags don't work out on Firefox.

[13:29] <moritz> I know :(

[13:30] <moritz> iirc it wants some weird handling of spaces

[13:30] <dalek> rakudo/nom: 39b18fa | jnthn++ | src/Perl6/Grammar.pm:

[13:30] <dalek> rakudo/nom: Pull in C<repeat> parsing fix from STD.

[13:30] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/39b18fa421

[13:32] <dalek> rakudo/nom: cb8904d | jnthn++ | src/Perl6/Ops.pm:

[13:32] <dalek> rakudo/nom: Switch set for unbox_i.

[13:32] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cb8904dfcc

[13:32] <dalek> rakudo/nom: dbeaeaa | jnthn++ | src/core/ (2 files):

[13:32] <dalek> rakudo/nom: Various tweaks to avoid trying to unbox things that aren't 6model objects.

[13:33] <moritz> jnthn++

[13:33] *** dalek joined
[13:33] *** ChanServ sets mode: +v dalek

[13:36] <dalek> doc: d1e3098 | moritz++ | lib/operators.pod:

[13:36] <dalek> doc: [operators] add "is assoc" trait for operators that are not left-associative

[13:36] <dalek> doc: review: https://github.com/perl6/doc/commit/d1e309805e

[13:36] <masak> two: https://gist.github.com/3324433

[13:38] <moritz> my $age-in-years = floor $age-in-days / 365; # that discounts leap years

[13:38] <masak> aye.

[13:38] <masak> which made me think it might not be such a good example after all :/

[13:39] <masak> though I could just subtract the years and then compare month/day.

[13:39] <masak> maybe that's better

[13:39] <moritz> my $age-in-years = Date.today.truncated-to(:year) - $birth-date.truncated-to(:year)

[13:39] <moritz> hm

[13:39] <moritz> easier to do Date.today.year - $birth-date.year

[13:39] <moritz> and then fix up

[13:40] <masak> yeah.

[13:40] <moritz> based on month and year

[13:40] * masak changes to that

[13:40] <masak> moritz++ # feedback

[13:41] <masak> r: say Date.today.day-of-year

[13:41] <p6eval> rakudo cb065c: OUTPUT«224␤»

[13:41] <masak> \o/

[13:42] <moritz> oh

[13:42] <moritz> that makes the code easier than to compare month and day separately

[13:42] <masak> which is sort of the whole point of a DateTime API... :)

[13:43] <masak> fixed: https://gist.github.com/3324433

[13:43] <moritz> masak++

[13:43] <moritz> I'd even use a statement-modifying 'if' here

[13:43] <moritz> but I know you disagree :-)

[13:44] <masak> would you write it as `my $age = $today.year - $birth-date.year - ($today.day-of-year > $birth-date.day-of-year);`? :)

[13:44] <masak> that works too.

[13:45] <moritz> on a completely different subject, what's a good use case for 'temp' in Perl 6?

[13:45] <masak> er, '<'

[13:45] <moritz> I mean, one where dynamic vars aren't better

[13:45] <moritz> masak: no, I just meant   $age-- if $birth-date.day-of-year < $today.day-of-year;

[13:45] <masak> yes, I know you meant that.

[13:46] <moritz> and no, I wouldn't write it with a - in one statement

[13:46] <masak> to me that gives too much head weight to $age--. but I know you know I think that. :)

[13:46] <moritz> that exceeds the number of the number of concepts I can easily reconcile a statement

[13:47] <jnthn> moritz: Situations where you care to know what the original value was.

[13:47] <jnthn> (That is, preserve it.)

[13:49] <dalek> doc: 19de2cf | moritz++ | lib/operators.pod:

[13:49] <dalek> doc: [operators] let and temp

[13:49] <dalek> doc: review: https://github.com/perl6/doc/commit/19de2cf4de

[13:50] <moritz> reviews of that commit are very welcome

[13:50] <moritz> I've noticed I've never used either of those, and don't know very well how to describe their effect

[13:51] <jnthn> We ain't had them in Rakudo all that long.

[13:51] <moritz> I know

[13:52] <moritz> hm, maybe indentation and recursion thingy

[13:52] * jnthn hasn't found much chance to use them yet

[13:52] <dalek> rakudo/nom: 3a24210 | jnthn++ | src/Perl6/ (2 files):

[13:52] <dalek> rakudo/nom: Fix double-quoted strings used in regexes; they now interpolate their contents properly (and are parsed with the right language).

[13:52] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3a24210b33

[13:52] <masak> yes, indentation is the prototypical example for dynamical/process variables for me.

[13:53] <masak> though nowadays I would probably do that with an inner sub, actually.

[13:53] <jnthn> I'd use .indent :P

[13:53] <masak> hah!

[13:53] <moritz> my $indentation = 0; sub recurse($a) { ++ temp $indentation; say ' ' x $indentation, $a.Str; recurse($_) for $a.children }

[13:53] <moritz> something like that

[13:54] <jnthn> Anyone remember if we ever issued a deprecation warning for https://rt.perl.org/rt3/Public/Bug/Display.html?id=104026 ?

[13:55] <moritz> I don't think we did

[13:56] <moritz> but based on the feedback we have received so far (which is basically none), I'm inclined to just change it immediately, and put the change notice in the release announcement

[13:57] <dalek> rakudo/nom: ea5f78c | jnthn++ | docs/ROADMAP:

[13:57] <dalek> rakudo/nom: Remvoe a completed ROADMAP item.

[13:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ea5f78cb4f

[13:57] <jnthn> OK, maybe I'll look at it this weekend then.

[13:58] <moritz> though if you have other stuff to hack on, we could just deprecate it now and change it after 2012.08

[13:58] <jnthn> I've *always* got other stuff to hack on :)

[13:58] <jnthn> I just noticed the ticket in the queue as an LHF.

[13:59] <masak> three: https://gist.github.com/3324433

[13:59] <jnthn> (More generally, I'm trying to do my share of fixing RTs :))

[14:04] <moritz> r: https://gist.github.com/3324433

[14:04] <p6eval> rakudo cb065c: OUTPUT«When were you born (yyyy-mm-dd)?Invalid Date string 'Land der Berge, Land am Strome,'; use yyyy-mm-dd instead␤  in method new at src/gen/CORE.setting:10887␤  in block  at /tmp/wdxjm0RMj5:2␤␤»

[14:04] *** Chillance joined
[14:05] <masak> yes, 'Land der Berge, Land am Strome,' is not an ISO date.

[14:07] <jnthn> "you don't say?" :)

[14:08] <diakopter> rn: say 0 ^ ^ 5

[14:08] <p6eval> rakudo cb065c, niecza v19-15-g051783d: OUTPUT«one(0, 0..^5)␤»

[14:08] <diakopter> rn: say 0 ^^ 5

[14:08] <p6eval> rakudo cb065c: OUTPUT«5␤»

[14:08] <p6eval> ..niecza v19-15-g051783d: OUTPUT«Unhandled exception: Unable to resolve method postcircumfix:<( )> in type Any␤  at /tmp/wo2SGLKpyf line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3929 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3930 (module-CORE @ 564…

[14:09] <diakopter> ^^ who's right

[14:09] <diakopter> pugs: say 0 ^^ 5

[14:09] <p6eval> pugs: OUTPUT«5␤»

[14:11] <colomon> diakopter: niecza is certainly wrong...

[14:14] <moritz> nr: my $a = [1, 2, 3]; $a.=[0]; say $a

[14:14] <p6eval> rakudo cb065c, niecza v19-15-g051783d: OUTPUT«1␤»

[14:16] <jnthn> '/win 14

[14:16] <jnthn> oops

[14:16] <diakopter> '/win 44823

[14:18] <jnthn> .oO( If you have that many, it's a /fail )

[14:20] *** kaare_ joined
[14:20] <masak> four: https://gist.github.com/3324433

[14:20] <masak> I'll leave it at that for now.

[14:21] <masak> more suggestions from others are welcome/appreciated, of course.

[14:21] *** sivoais_ left
[14:21] *** sivoais joined
[14:22] <diakopter> rn: say !!2+|??!!1

[14:22] <p6eval> niecza v19-15-g051783d: OUTPUT«===SORRY!===␤␤Expecting a term, but found either infix ?? or redundant prefix ?␤  (to suppress this message, please use space between ? ?) at /tmp/HojHgySiv0 line 1:␤------> say !!2+|??⏏!!1␤␤Parse failed␤␤»…

[14:22] <p6eval> ..rakudo ea5f78: OUTPUT«1␤»

[14:25] <diakopter> rn: say 1!|1

[14:25] <p6eval> niecza v19-15-g051783d: OUTPUT«False␤»

[14:25] <p6eval> ..rakudo ea5f78: OUTPUT«===SORRY!===␤Cannot negate | because it is not iffy enough at line 2, near "1"␤»

[14:25] <diakopter> rn: say 1!+1

[14:25] <p6eval> rakudo ea5f78: OUTPUT«===SORRY!===␤Cannot negate + because it is not iffy enough at line 2, near "1"␤»

[14:25] <p6eval> ..niecza v19-15-g051783d: OUTPUT«===SORRY!===␤␤Cannot negate + because additive operators are not iffy enough at /tmp/atfj3xrErV line 1:␤------> say 1!+⏏1␤␤Parse failed␤␤»

[14:25] <diakopter> masak: is the !| a rakudobug or just NYI

[14:26] *** brrt joined
[14:26] <diakopter> (or nieczabug)

[14:26] <dalek> rakudo/nom: 7ec7a2b | jnthn++ | src/Perl6/ModuleLoader.pm:

[14:26] <dalek> rakudo/nom: Explicitly disallow pre-compilation of a module unless its dependencies have been pre-compiled already. Instead, fail with an informative error message. Before, we went ahead with the pre-compilation, but the resulting output would not work.

[14:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7ec7a2bcfd

[14:26] *** thou joined
[14:28] <masak> five: https://gist.github.com/3324433

[14:29] <masak> diakopter: I have no idea. what did you expect it to emit?

[14:29] <diakopter> heh

[14:29] * diakopter shrugs wide-eyed frowning eyebrows raised

[14:31] <diakopter> r: [~~] n for m,m,

[14:31] <p6eval> rakudo ea5f78: OUTPUT«===SORRY!===␤Confused␤at /tmp/jk8PSf59WD:1␤»

[14:31] <diakopter> oh nm

[14:33] <diakopter> n: [!~~] 5,6 for m,m,

[14:33] <p6eval> niecza v19-15-g051783d: OUTPUT«Unhandled exception: Unable to resolve method arity in type SmartMatch␤  at /home/p6eval/niecza/src/Operator.pm6 line 203 (MetaNot.arity @ 5) ␤  at /home/p6eval/niecza/src/Operator.pm6 line 44 (Operator.wrap_in_function @ 5) ␤  at /home/p6eval/niecza/src/O…

[14:35] *** scottdware joined
[14:35] <spider-mario> is .chrs just ».chr.join?

[14:36] <spider-mario> and .ords ↔ .split('')».ord?

[14:37] * jnthn afk for a bit

[14:37] <spider-mario> p6: say (116, 101, 115, 116).chrs.perl, " and ", (116, 101, 115, 116)».chr.join.perl;

[14:37] <p6eval> rakudo ea5f78: OUTPUT«No such method 'chrs' for invocant of type 'Parcel'␤  in block  at /tmp/Q0wFLrDKXy:1␤␤»

[14:37] <p6eval> ..niecza v19-15-g051783d: OUTPUT«"test" and "test"␤»

[14:37] <spider-mario> p6: say (116, 101, 115, 116).list.chrs.perl, " and ", (116, 101, 115, 116)».chr.join.perl;

[14:37] <p6eval> rakudo ea5f78, niecza v19-15-g051783d: OUTPUT«"test" and "test"␤»

[14:38] <spider-mario> those methods don’t seem very useful to me

[14:38] <spider-mario> do they exist for performance reasons?

[14:39] <JimmyZ> it will be useful for others, me thinks

[14:42] <diakopter> rn: say [&] 7 # masak <--

[14:42] <p6eval> rakudo ea5f78: OUTPUT«all(7)␤»

[14:42] <p6eval> ..niecza v19-15-g051783d: OUTPUT«all(7, )␤»

[14:42] <masak> what am I looking at?

[14:42] <diakopter> I dunno. I don't know what niecza means by ,

[14:43] <masak> neither do it.

[14:43] <moritz> one-element parcel

[14:45] <masak> rn: say (7, )

[14:45] <p6eval> rakudo ea5f78, niecza v19-15-g051783d: OUTPUT«7␤»

[14:45] <masak> rn: say (7, ).perl

[14:45] <p6eval> niecza v19-15-g051783d: OUTPUT«(7, )␤»

[14:45] <p6eval> ..rakudo ea5f78: OUTPUT«(7,)␤»

[14:46] *** tokuhiro_ left
[14:46] <diakopter> rn: say <4>.WHAT

[14:46] <p6eval> niecza v19-15-g051783d: OUTPUT«Int()␤»

[14:46] <p6eval> ..rakudo ea5f78: OUTPUT«Str()␤»

[14:47] *** tokuhiro_ joined
[14:47] *** ChoHag joined
[14:47] <ChoHag> How can I do what foo(@bar) would have done in perl 5?

[14:48] * diakopter 's warnocked detector has an extremely short timer

[14:48] <ChoHag> ie. pass a list by value.

[14:48] <ChoHag> Or rather, values.

[14:48] <diakopter> foo(|@bar) I think.

[14:49] <diakopter> rn: my @bar = 3,4,5; say(|@bar); say(@bar)

[14:49] <p6eval> rakudo ea5f78, niecza v19-15-g051783d: OUTPUT«345␤3 4 5␤»

[14:50] *** nebuchadnezzar left
[14:50] <spider-mario> I’ve just seen in the logs that .ords/.chrs have already been talked about, sorry for bringing the topic back. :>

[14:50] *** gongyiliao left
[14:51] *** tokuhiro_ left
[14:51] <masak> yes, foo(|@bar)

[14:51] *** gongyiliao joined
[14:52] * JimmyZ didn't see old ords/chrs topic

[14:52] * colomon didn't see new ords/chrs topic

[14:53] <spider-mario> http://irclog.perlgeek.de/perl6/2012-07-04#i_5783727

[14:54] <spider-mario> and today: http://irclog.perlgeek.de/perl6/2012-08-11#i_5891780

[14:54] <diakopter> rn: say (*&*).WHAT

[14:54] <p6eval> rakudo ea5f78: OUTPUT«Junction()␤»

[14:54] <p6eval> ..niecza v19-15-g051783d: OUTPUT«{ ... }␤»

[14:54] *** thou left
[14:54] <diakopter> no clue on that one

[14:55] <spider-mario> (sorry, can’t help it) self-reference: http://irclog.perlgeek.de/perl6/2012-08-11#i_5891839

[14:55] *** nebuchadnezzar joined
[14:55] <diakopter> niecza says it's a Block; rakudo says it's a Junction

[14:56] <masak> unless the junction operators are special somehow, I'd think it'd be a WhateverCode.

[14:56] <spider-mario> rakudo must think it’s all(*, *), when niecza understands it ± as -> $a, $b {$a & $b}

[14:56] <diakopter> rn: say (*&*)(7,8)

[14:56] <p6eval> rakudo ea5f78: OUTPUT«No such method 'postcircumfix:<( )>' for invocant of type 'Whatever'␤  in <anon> at src/gen/BOOTSTRAP.pm:824␤  in any <anon> at src/gen/BOOTSTRAP.pm:820␤  in method postcircumfix:<( )> at src/gen/CORE.setting:1809␤  in <anon> at src/gen/BOOTSTRAP.pm:824␤  in any <a…

[14:56] <p6eval> ..niecza v19-15-g051783d: OUTPUT«all(7, 8)␤»

[14:56] <diakopter> spider-mario: yeah

[14:57] <diakopter> masak: oops yeah I meant WhateverSomething

[14:57] <diakopter> er, s/meant/failed to remember/

[14:57] <colomon> rn: say (*&*)(7)

[14:57] <p6eval> niecza v19-15-g051783d: OUTPUT«Unhandled exception: No value for parameter 'anon_1' in 'ANON'␤  at /tmp/9jDi0wTxuA line 0 (ANON @ 1) ␤  at /tmp/9jDi0wTxuA line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3929 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting lin…

[14:57] <p6eval> ..rakudo ea5f78: OUTPUT«No such method 'postcircumfix:<( )>' for invocant of type 'Whatever'␤  in <anon> at src/gen/BOOTSTRAP.pm:824␤  in any <anon> at src/gen/BOOTSTRAP.pm:820␤  in method postcircumfix:<( )> at src/gen/CORE.setting:1809␤  in <anon> at src/gen/BOOTSTRAP.pm:824␤  in any <a…

[14:58] <diakopter> it might be more readable if the results from rnp: were always in the same order

[14:58] <diakopter> (for me) :D

[14:59] <colomon> looks like niecza didn't properly update its version number for the v20 release, too.

[14:59] <diakopter> I guess it could be a TimToady question

[15:00] <diakopter> ( what (*&*) should be )

[15:01] <colomon> seems to me there's a list of what operators are supposed to get whatevercoded somewhere in the spec...  I know I've had to answer other versions of that question before.

[15:02] <colomon> S02, search on whatevercode

[15:02] <colomon> looks like a rakudobug to me.

[15:02] *** JimmyZ left
[15:03] <diakopter> rn: say (* ?? * !! *).WHAT

[15:03] <p6eval> rakudo ea5f78, niecza v19-15-g051783d: OUTPUT«Whatever()␤»

[15:03] <colomon> either that or it's a specbug....

[15:06] *** scottdware left
[15:06] <diakopter> rn: say 1 <<<>> 2

[15:06] <p6eval> rakudo ea5f78, niecza v19-15-g051783d: OUTPUT«True␤»

[15:07] <diakopter> rn: say 2 <<<<<>>>> 1

[15:07] <p6eval> rakudo ea5f78: OUTPUT«Nominal type check failed for parameter '$op'; expected Any but got Mu instead␤  in sub METAOP_HYPER at src/gen/CORE.setting:11878␤  in block  at /tmp/4N6zz_BLkb:1␤␤»

[15:07] <p6eval> ..niecza v19-15-g051783d: OUTPUT«False␤»

[15:08] <TimToady> I don't see how it's useful for * & * to mean anything other than a WhateverCode

[15:09] <diakopter> the * & could cancel out ...

[15:10] <TimToady> so I think niecza has it right

[15:10] <diakopter> who's right for say 2 <<<<<>>>> 1

[15:12] <spider-mario> it’s so much easier to read with « and »

[15:12] <TimToady> niecza, almost certainly, because it uses the STD parser(ish)

[15:12] <spider-mario> n: say 2 ««<»» 1

[15:12] <p6eval> niecza v19-15-g051783d: OUTPUT«False␤»

[15:13] <diakopter> oh :)

[15:13] <diakopter> spider-mario: thx

[15:13] <TimToady> spider-mario: sure, and I'd always write it that way, but some people are Uniphobes

[15:13] <diakopter> rn: $_="n"; say s/n/n/

[15:13] <p6eval> niecza v19-15-g051783d: OUTPUT«True␤»

[15:13] <p6eval> ..rakudo 7ec7a2: OUTPUT«n␤»

[15:15] <diakopter> or at least if the p6eval outputs printed in the specified order

[15:17] <diakopter> r: n;n # this doesn't need to duplicate the line number in the error

[15:17] <p6eval> rakudo 7ec7a2: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&n' called (lines 1, 1)␤»

[15:17] <diakopter> well, I guess it could be helpful

[15:18] <colomon> rn: $_="n"; say s/n/n/; say $_

[15:18] <p6eval> rakudo 7ec7a2: OUTPUT«n␤n␤»

[15:18] <p6eval> ..niecza v19-15-g051783d: OUTPUT«True␤n␤»

[15:19] <diakopter>  rn: $_="n"; say s/n/n/.WHAT

[15:19] <p6eval> niecza v19-15-g051783d: OUTPUT«Bool()␤»

[15:19] <p6eval> ..rakudo 7ec7a2: OUTPUT«Str()␤»

[15:20] <diakopter> rn: say "{{}.WHAT}"

[15:20] <p6eval> niecza v19-15-g051783d: OUTPUT«Unhandled exception: Cannot unbox a VarHash from an object of repr P6opaque␤  at /home/p6eval/niecza/lib/CORE.setting line 1854 (Hash.list @ 4) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1858 (Hash.Str @ 4) ␤  …

[15:20] <p6eval> ..rakudo 7ec7a2: OUTPUT«use of uninitialized value of type Hash in string context  in block  at /tmp/dLY0htK0_U:1␤␤␤»

[15:20] <TimToady> rn: $_ = 'n'; say so s/n/0/

[15:20] <p6eval> rakudo 7ec7a2: OUTPUT«False␤»

[15:20] <p6eval> ..niecza v19-15-g051783d: OUTPUT«True␤»

[15:20] <diakopter> jnthn: Cannot unbox a VarHash from an object of repr P6opaque?

[15:22] <masak> today's autopun: http://twitter.com/mjdominus/status/234307472612024320

[15:23] <diakopter> rakudo : how is the Hash uninitialized there?

[15:24] <diakopter> jnthn: oops, that error was niecza's :)

[15:25] <diakopter> anyone know what is an uninitialized hash?

[15:26] <diakopter> rn: say {}.WHAT

[15:26] <p6eval> rakudo 7ec7a2, niecza v19-15-g051783d: OUTPUT«Hash()␤»

[15:26] <TimToady> masak: not sure that's an autopun, though it may refer to something that resembles one

[15:26] <diakopter> rn: say "{ {}.WHAT }"

[15:26] <p6eval> niecza v19-15-g051783d: OUTPUT«Unhandled exception: Cannot unbox a VarHash from an object of repr P6opaque␤  at /home/p6eval/niecza/lib/CORE.setting line 1854 (Hash.list @ 4) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1858 (Hash.Str @ 4) ␤  …

[15:26] <p6eval> ..rakudo 7ec7a2: OUTPUT«use of uninitialized value of type Hash in string context  in block  at /tmp/vu72evpVVJ:1␤␤␤»

[15:26] *** brrt left
[15:28] <masak> TimToady: hm, yes. I was also a little unsure.

[15:34] <diakopter> rn: say "{ [].WHAT }"

[15:34] <p6eval> rakudo 7ec7a2: OUTPUT«use of uninitialized value of type Array in string context  in block  at /tmp/Wg0oF8UrMT:1␤␤␤»

[15:34] <p6eval> ..niecza v19-15-g051783d: OUTPUT«␤»

[15:39] <diakopter> rn: say sub { 5 }()

[15:39] <p6eval> niecza v19-15-g051783d: OUTPUT«5␤»

[15:39] <p6eval> ..rakudo 7ec7a2: OUTPUT«===SORRY!===␤Confused␤at /tmp/CUV6nwoMFP:1␤»

[15:54] <masak> std: say sub { 5 }()

[15:54] <p6eval> std c3e944a: OUTPUT«ok 00:00 41m␤»

[15:54] * masak submits rakudobug

[15:54] <masak> diakopter++

[16:04] <masak> p6eval: help

[16:04] <p6eval> masak: Usage: <(star|pugs|nqp|std|niecza|rakudo|b|toqast|nom|npr|n|r|perl6|prn|rn|p|rnp|nrp|pnr|rpn|t|p6|nr)(?^::\s) $perl6_program>

[16:10] *** crab2313 joined
[16:12] *** raiph joined
[16:15] *** brrt joined
[16:18] *** brrt left
[16:27] *** birdwindupbird left
[16:33] *** jeffreykegler joined
[16:33] <felher> jnthn++ # 3a24210b33431720ac89187add77461e7d5501eb was just what i wanted to use a a few hours ago :)

[16:51] *** raiph left
[16:55] <masak> rn: foo($x) { my $x }; say "alive"

[16:55] <p6eval> rakudo 7ec7a2: OUTPUT«===SORRY!===␤Variable $x is not declared␤at /tmp/Y5BMq9m5Zy:1␤»

[16:55] <p6eval> ..niecza v19-15-g051783d: OUTPUT«===SORRY!===␤␤Variable $x is not predeclared at /tmp/SvHtl4jDaG line 1:␤------> foo(⏏$x) { my $x }; say "alive"␤␤Unexpected block in infix position (two terms in a row, or previous statement missing semicolon?) at /tmp/…

[16:56] <masak> rn: sub foo($x) { my $x }; say "alive"

[16:56] <p6eval> niecza v19-15-g051783d: OUTPUT«Potential difficulties:␤  Useless redeclaration of variable $x (see line 1) at /tmp/daxC0D1QLE line 1:␤------> sub foo($x) { my $x ⏏}; say "alive"␤  $x is declared but not used at /tmp/daxC0D1QLE line 1:␤------> sub foo(⏏$…

[16:56] <p6eval> ..rakudo 7ec7a2: OUTPUT«===SORRY!===␤Redeclaration of symbol $x␤at /tmp/CvGu_m6_2z:1␤»

[16:58] *** brrt joined
[17:05] <dalek> doc: 928d718 | moritz++ | htmlify.pl:

[17:05] <dalek> doc: [htmlify] process lib/operators.pod, write disambiguation files for it

[17:05] <dalek> doc: review: https://github.com/perl6/doc/commit/928d71858a

[17:05] <dalek> doc: 1a5fbcb | moritz++ | htmlify.pl:

[17:05] <dalek> doc: make timestamps the same on every file

[17:05] <dalek> doc: review: https://github.com/perl6/doc/commit/1a5fbcb6a0

[17:05] <ChoHag> Does perl6 automatically give me an incrementing counter in map blocks?

[17:05] <ChoHag> ISTR reading that somewhere.

[17:06] <moritz> no

[17:06] <moritz> but you can easily do   @vaues.kv.map( -> $index, $_ { say "values with index $index is $_ } )

[17:07] <ChoHag> Is there any shortcut way of specifiying (in perl 5 syntax) %has = map ( $counter++ => $_ } @foo?

[17:07] <masak> r: my @foo = <a b c>; my %hash = map { state $counter++ => $_ }, @foo; say %hash.perl

[17:07] <moritz> my %hash = ^* Z=> @foo

[17:07] <p6eval> rakudo 7ec7a2: OUTPUT«===SORRY!===␤Preceding context expects a term, but found infix + instead␤at /tmp/aSfkl4UmNV:1␤»

[17:08] <masak> 'infix +'?

[17:08] <moritz> r: my %h = ^* Z <a b c>; say %h.perl

[17:08] <p6eval> rakudo 7ec7a2: OUTPUT«Cannot call 'Numeric'; none of these signatures match:␤:(Mu:U \$v, Mu *%_)␤␤  in method Numeric at src/gen/CORE.setting:697␤  in block  at /tmp/sPsvxWG1tf:1␤␤»

[17:08] <moritz> r: my %h = 0..* Z <a b c>; say %h.perl

[17:08] <p6eval> rakudo 7ec7a2: OUTPUT«("0" => "a", "1" => "b", "2" => "c").hash␤»

[17:08] <moritz> ChoHag: are you happy with that? :-)

[17:09] <masak> r: r: my %h = ^Inf Z <a b c>; say %h.perl

[17:09] <p6eval> rakudo 7ec7a2: OUTPUT«===SORRY!===␤Confused␤at /tmp/xfyAT3eeOq:1␤»

[17:09] <masak> r: my %h = ^Inf Z <a b c>; say %h.perl

[17:09] <p6eval> rakudo 7ec7a2: OUTPUT«("0" => "a", "1" => "b", "2" => "c").hash␤»

[17:09] <masak> arguably, ^* should work, too.

[17:09] <moritz> probably easy to fix

[17:09] <masak> r: my %h = <a b c>.kv; say %h.perl

[17:09] <p6eval> rakudo 7ec7a2: OUTPUT«("0" => "a", "1" => "b", "2" => "c").hash␤»

[17:09] <masak> \o/

[17:09] <moritz> n: say (^*).perl

[17:09] <p6eval> niecza v19-15-g051783d: OUTPUT«{ ... }␤»

[17:09] <moritz> r: say (^*).perl

[17:09] <p6eval> rakudo 7ec7a2: OUTPUT«Cannot call 'Numeric'; none of these signatures match:␤:(Mu:U \$v, Mu *%_)␤␤  in method Numeric at src/gen/CORE.setting:697␤  in block  at /tmp/E0b49OGyff:1␤␤»

[17:09] <moritz> hm, niecza Whatever-curries it

[17:10] <TimToady> rn: my %hash = <a b c>.pairs; say %h.perl

[17:10] <p6eval> niecza v19-15-g051783d: OUTPUT«===SORRY!===␤␤Variable %h is not predeclared at /tmp/ZHhBiAwkyM line 1:␤------> my %hash = <a b c>.pairs; say ⏏%h.perl␤␤Potential difficulties:␤  %hash is declared but not used at /tmp/ZHhBiAwkyM line 1:␤------> my…

[17:10] <p6eval> ..rakudo 7ec7a2: OUTPUT«===SORRY!===␤Variable %h is not declared␤at /tmp/FznqJPXJDR:1␤»

[17:10] <TimToady> rn: my %hash = <a b c>.pairs; say %hash.perl

[17:10] <p6eval> niecza v19-15-g051783d: OUTPUT«{"0" => "a", "1" => "b", "2" => "c"}.hash␤»

[17:10] <p6eval> ..rakudo 7ec7a2: OUTPUT«("0" => "a", "1" => "b", "2" => "c").hash␤»

[17:10] <moritz> oh, even nicer :-)

[17:10] <geekosaur> have to admit I was just thinking zipping against a sequence like that to form a list of pairs, haskell-style, not forming an intermediate hash

[17:10] <moritz> rn: my %hash = <a b c>.kv; say %hash.perl

[17:10] <p6eval> niecza v19-15-g051783d: OUTPUT«{"0" => "a", "1" => "b", "2" => "c"}.hash␤»

[17:10] <p6eval> ..rakudo 7ec7a2: OUTPUT«("0" => "a", "1" => "b", "2" => "c").hash␤»

[17:10] <moritz> even shorter :-)

[17:11] <moritz> geekosaur: afaict the goal was to create a hash

[17:11] <moritz> nothing intermediate here

[17:11] <TimToady> rn: %(<a b c>.pairs).perl.say

[17:11] <p6eval> niecza v19-15-g051783d: OUTPUT«{"0" => "a", "1" => "b", "2" => "c"}.hash␤»

[17:11] <p6eval> ..rakudo 7ec7a2: OUTPUT«("0" => "a", "1" => "b", "2" => "c").hash␤»

[17:11] <moritz> masak: what's up with 'infix +'?

[17:11] <geekosaur> ah, I see, I went with th eintiial question and not the example

[17:12] <ChoHag> Can the key be changed?

[17:12] <ChoHag> Count from something else, prepend/append a token?

[17:12] <moritz> nr: my %h =  ('foo' X~  5..*) Z <a b c>; say %h.perl

[17:12] <p6eval> rakudo 7ec7a2: OUTPUT«("foo5" => "a", "foo6" => "b", "foo7" => "c").hash␤»

[17:12] <p6eval> ..niecza v19-15-g051783d: OUTPUT«{"foo5" => "a", "foo6" => "b", "foo7" => "c"}.hash␤»

[17:12] <moritz> ChoHag: like this? :-)

[17:13] *** jaldhar left
[17:13] <ChoHag> This channel is knackering my terminal...

[17:13] <moritz> nr: my %h =  ('foo5' ... *) Z <a b c>; say %h.perl

[17:13] *** jaldhar joined
[17:13] <p6eval> rakudo 7ec7a2: OUTPUT«("foo5" => "a", "foo6" => "b", "foo7" => "c").hash␤»

[17:13] <p6eval> ..niecza v19-15-g051783d: OUTPUT«{"foo5" => "a", "foo6" => "b", "foo7" => "c"}.hash␤»

[17:13] <TimToady> ChoHag: you'll be happier with a UTF-8 terminal, I suspect

[17:14] <moritz> ChoHag: maybe your browser has less problems, see for example http://irclog.perlgeek.de/perl6/2012-08-11#i_5892094

[17:14] <masak> moritz: I don't know what's up with 'infix +'. that program looks OK to me.

[17:15] <TimToady> r: my @foo = <a b c>; my %hash = map { (state $counter)++ => $_ }, @foo; say %hash.perl

[17:15] <p6eval> rakudo 7ec7a2: OUTPUT«(signal SEGV)»

[17:15] <ChoHag> Bah! Didn't work because of bloody bash quoting...

[17:15] <TimToady> yow

[17:15] <moritz> wow, a segfault

[17:15] <TimToady> uow

[17:16] <ChoHag> So what's the Z operator?

[17:16] <TimToady> zip

[17:16] <moritz> ChoHag: zipping two (or more) lists

[17:16] <ChoHag> It looks madly cool but I haven't seen it defined.

[17:16] <TimToady> meshes two lists like a zipper

[17:16] <moritz> r: say (<a b c> Z <d e f> Z~ 1..3)

[17:16] <p6eval> rakudo 7ec7a2: OUTPUT«ad1 be2 cf3␤»

[17:16] <ChoHag> I saw Z in some docs, but Z is sort of hard to search for...

[17:17] <moritz> ChoHag: in the future, I want doc.perl6.org/Z to take you straight to it

[17:17] <moritz> ChoHag: I'm not quite there yet though :(

[17:17] <TimToady> S03:1688 talks about Z

[17:17] <ChoHag> Docs are a lot harder than code.

[17:17] <ChoHag> I wish some of our devs would appreciate that...

[17:17] <moritz> both are hard :-)

[17:18] *** crab2313 left
[17:18] <TimToady> and S03:4708 talks about the Z metaoperator

[17:21] *** brrt left
[17:21] <TimToady> ChoHag: what are you using for an IRC client?

[17:24] *** brrt joined
[17:27] *** jaldhar left
[17:28] *** jaldhar joined
[17:33] <ChoHag> irssi, screen and putty.

[17:33] <ChoHag> Most of which I haven't bothered to configure correctly.

[17:33] *** leont left
[17:33] *** MayDaniel left
[17:34] * jnthn does the same, and the only tweak he made as to set PuTTY to do utf-8.

[17:34] <jnthn> *was

[17:34] *** MayDaniel joined
[17:34] *** ChoHag_ joined
[17:34] <brrt> hey, whats Cat?

[17:35] <brrt> p6 has Rat and Cat 

[17:35] <ChoHag_> Maybe that's done it. Somebody say something weird and UTFey.

[17:35] <ChoHag_> r: say (<a b c> Z <d e f> Z~ 1..3)

[17:35] <p6eval> rakudo 7ec7a2: OUTPUT«ad1 be2 cf3␤»

[17:37] *** ChoHag left
[17:37] *** ChoHag_ left
[17:37] *** ChoHag joined
[17:38] <ChoHag> r: say something.

[17:38] <p6eval> rakudo 7ec7a2: OUTPUT«===SORRY!===␤Confused␤at /tmp/UNlwJD4PO1:1␤»

[17:40] *** ChoHag left
[17:40] *** ChoHag joined
[17:40] <ChoHag> r: shake it all about

[17:40] <p6eval> rakudo 7ec7a2: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&about' called (line 1)␤Undefined routine '&it' called (line 1)␤Undefined routine '&shake' called (line 1)␤»

[17:41] *** Moukeddar joined
[17:41] *** Moukeddar left
[17:54] <TimToady> http://rosettacode.org/wiki/Pragmatic_directives#Perl_6

[17:54] *** brrt left
[17:57] <dalek> doc: c8e2caf | moritz++ | htmlify.pl:

[17:57] <dalek> doc: fix(-ish) operator links

[17:57] <dalek> doc: review: https://github.com/perl6/doc/commit/c8e2cafd0e

[17:57] <dalek> doc: a8994ba | moritz++ | htmlify.pl:

[17:57] <dalek> doc: fixup

[17:57] <dalek> doc: review: https://github.com/perl6/doc/commit/a8994ba101

[17:57] <dalek> doc: 36b1138 | moritz++ | htmlify.pl:

[17:57] <dalek> doc: [htmlify] progress report for per-routine files

[17:57] <dalek> doc: review: https://github.com/perl6/doc/commit/36b1138b80

[17:58] <moritz> http://doc.perl6.org/+ now works in chromium

[17:58] <moritz> I mean, the links there

[17:58] *** mtk joined
[18:01] <dalek> rakudo/nom: 0dd82c7 | jnthn++ | src/Perl6/Actions.pm:

[18:01] <dalek> rakudo/nom: If symbols are declared in a block, it certainly cannot be a hash constructor. Fixes segfault discovered by ChoHag++.

[18:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0dd82c7b15

[18:03] <dalek> roast: af688d3 | jnthn++ | S06-other/anon-hashes-vs-blocks.t:

[18:03] <dalek> roast: Test to cover declaring symbols in a block making it a hash for sure.

[18:03] <dalek> roast: review: https://github.com/perl6/roast/commit/af688d33a0

[18:04] <jnthn> shop, dinner, etc. &

[18:16] *** Celelibi left
[18:21] *** Celelibi joined
[18:27] *** jeffreykegler left
[18:31] *** jeffreykegler joined
[18:31] <colomon> phenny: tell brrt Cat is a hypothetical lazy string type.  (Unless someone implemented it while I was on vacation.)

[18:31] <phenny> colomon: I'll pass that on when brrt is around.

[18:43] <masak> no-one implemented Cat while you were on vacation, colomon.

[18:44] <colomon> shucks.

[18:44] <masak> also, welcome back from vacation. :)

[18:49] <colomon> thanks!

[18:59] <colomon> anything exciting happen this week on #perl6?

[18:59] <colomon> other than attacks on our fashion sense?

[19:00] <moritz> depends on whether you find doc.perl6.org progress exciting :-)

[19:00] <masak> submitted a few rakudobugs. business as usual.

[19:00] <diakopter> colomon: she took down the photo

[19:00] <colomon> .... not in the sense I meant, but it is heartening, at the very least.

[19:00] <diakopter> oh

[19:01] <diakopter> colomon: sry; I misread "other than attacks"

[19:02] <colomon> diakopter: I think we might have gotten crossed there.  I was responding to moritz.  :)  

[19:02] <colomon> but I'm glad to hear she took down the picture.

[19:02] <diakopter> colomon: :) I knew you were responding to moritz there; I just realized I had misread..

[19:02] *** cognominal left
[19:03] *** cognominal joined
[19:03] <moritz> but she was sloppy; the text still refers to the pictures that aren't there anymore

[19:03] <diakopter> well, at least the link to the originals is still there on my comment

[19:08] <cosimo> programming in "cargo pants and hackaton t-shirt" is totally awesome if you ask me

[19:08] <masak> especially, you know, at a hackathon.

[19:08] <moritz> :-)

[19:08] *** jeffreykegler left
[19:09] * moritz would also like to note that he is happily married and with offspring, no need to impress (other) girls anymore :-)

[19:14] * colomon would like to note he literally meant "our" fashion sense: wasn't in the picture, but was wearing one of the t-shirts found in the picture the day he learned about the post.

[19:15] <colomon> who was in the picture other than moritz++?

[19:16] <moritz> arnsholt++, tadzik++, jnthn++

[19:16] <moritz> maybe sjn++ too, dunno which part she showed

[19:16] <masak> only sjn++'s shoulder.

[19:17] <colomon> an august assemblage!  

[19:23] *** jeffreykegler joined
[19:28] <TimToady> colomon: the sigspace upgrade to STD finally landed, as well as (most of) the +% upgrade

[19:28] <colomon> TimToady++

[19:30] <moritz> phenny: en de "august"?

[19:30] <phenny> moritz: "August" (en to de, translate.google.com)

[19:30] <moritz> phenny: en de "August"?

[19:30] <phenny> moritz: "August" (en to de, translate.google.com)

[19:30] <moritz> meh

[19:30] <moritz> phenny: de en "erhaben"?

[19:30] <phenny> moritz: "sublime" (de to en, translate.google.com)

[19:30] <moritz> phenny: de en "illuster"?

[19:30] <phenny> moritz: "illustrious" (de to en, translate.google.com)

[19:31] <moritz> I don't think it will ever ansewr with "august" :-)

[19:33] <masak> phenny: sv en "august"?

[19:33] <phenny> masak: "august" (sv to en, translate.google.com)

[19:33] <masak> :)

[19:34] <moritz> now that's cheating :-)

[19:35] <masak> now that's technique :P

[19:35] <colomon> when is YAPC Europe?

[19:35] *** benabik left
[19:36] <dalek> doc: 10971d0 | moritz++ | htmlify.pl:

[19:36] <dalek> doc: [htmlify] fix wording

[19:36] <dalek> doc: review: https://github.com/perl6/doc/commit/10971d0e6b

[19:36] <dalek> doc: 8fa2a48 | moritz++ | htmlify.pl:

[19:36] <dalek> doc: write per-operator files

[19:36] <dalek> doc: review: https://github.com/perl6/doc/commit/8fa2a48ff2

[19:36] <dalek> doc: f297b42 | moritz++ | htmlify.pl:

[19:36] <dalek> doc: simplify some code

[19:36] <dalek> doc: review: https://github.com/perl6/doc/commit/f297b42d80

[19:36] <moritz> colomon: in 9 days

[19:36] <masak> oh man. slides.

[19:36] * masak does a very graceful panic

[19:36] <moritz> just CATCH it, you'll be fine :-)

[19:37] *** benabik joined
[19:37] * colomon is worried about having his http://en.wikipedia.org/wiki/Slide_(tune_type) ready for that week.  :)

[19:38] <moritz> colomon: in ABC?

[19:38] <colomon> moritz: well, I'll be using ABC (and the p6 ABC module) to print sheet music.

[19:39] <colomon> I'm teaching workshops at a local folk music festival

[19:39] <moritz> wow, cool

[19:39] <colomon> it's fun.

[19:39] * colomon secretly just wants to get the other players in the area playing more tunes he likes.  ;)

[19:40] <sorear> good * #perl6

[19:41] <moritz> good UGT morning, sorear 

[19:41] <dalek> doc: d6bacd0 | moritz++ | htmlify.pl:

[19:41] <dalek> doc: [htmlify] simplify code a wee bit

[19:41] <dalek> doc: review: https://github.com/perl6/doc/commit/d6bacd0882

[19:46] *** birdwindupbird joined
[19:48] *** Guest44047 left
[19:51] <colomon> \o

[19:58] <moritz> nr: say 4 cmp 4.0

[19:58] <p6eval> rakudo 0dd82c, niecza v19-15-g051783d: OUTPUT«Same␤»

[19:58] <moritz> nr: say (a => 3) cmp (a => 4)

[19:58] <p6eval> rakudo 0dd82c, niecza v19-15-g051783d: OUTPUT«Increase␤»

[20:00] <dalek> doc: bef4357 | moritz++ | lib/operators.pod:

[20:00] <dalek> doc: [operators] start with Nonchaining Binary Precedence

[20:00] <dalek> doc: review: https://github.com/perl6/doc/commit/bef4357a66

[20:03] <sorear> o/ colomon

[20:05] <colomon> sorear: how have you been?

[20:08] * colomon just found a spam e-mail claiming to be from Amazon.com but with what looks to be a malicious script in it.

[20:11] *** jeffreykegler left
[20:27] *** jeffreykegler joined
[20:29] *** jeffreykegler left
[20:31] *** benabik left
[20:32] *** benabik joined
[20:34] *** cognominal_ joined
[20:35] *** cognominal left
[20:36] *** kaare_ left
[21:02] *** thou joined
[21:03] *** SamuraiJack left
[21:06] *** bruges_ joined
[21:08] *** bruges left
[21:10] *** spider-mario left
[21:12] *** birdwindupbird left
[21:41] *** sergot left
[21:48] <masak> 'night, #perl6

[22:36] *** Targen left
[22:36] <TimToady> http://rosettacode.org/wiki/Parse_an_IP_Address#Perl_6

[22:38] <jnthn> wow, a RosettaCode task I understand from the title! \o/

[22:39] <jnthn> Also, that code would make a nice module :)

[22:39] <jnthn> TimToady++

[22:39] <TimToady> we now have 444 pages

[22:40] <jnthn> wow!

[22:44] *** spider-mario joined
[22:44] <colomon> TimToady: looking at the IPv6 token (for example), you've got the | alternative symbol at the beginning of each line.  Is the first one meaningless and just there for style?  Is this a P6 idiom I've missed thus far?

[22:46] <diakopter> I can't tell whether the REXX one is cheating (like Go)

[22:48] <TimToady> colomon: yes, it's just stylistic

[22:50] <colomon> TimToady++

[22:51] *** jeffreykegler joined
[22:51] <TimToady> okay, just posted a new version that also work with niecza

[22:52] *** thou left
[22:52] <colomon> TimToady: what was the change?

[22:53] <TimToady> doesn't know how to +$/, so switched to $0 instead

[22:53] <TimToady> if you go to history, you can get diff listings

[22:54] <colomon> found it!  it was the last place I looked.  ;)

[22:55] <TimToady> oh, I also just decide I could count the hexdigits directly to validate

[22:55] <TimToady> *decided

[22:55] <TimToady> since only hexdigits are allowed, anything <= 4 chars is valid

[22:55] <diakopter> I wonder if the other grammar-based ones accept invalid input

[22:56] <TimToady> this one doesn't go out of its way to tell you what went wrong

[22:56] <colomon> wait, the Go version uses a standard library call to do the actual parsing, and it's still longer than the p6 version?!

[23:03] <diakopter> TimToady: did you write the grammar from looking at the spec..?  Hm I guess the only alternative would be "from memroy"

[23:03] <TimToady> I wrote it looking at the test cases

[23:04] <TimToady> and a little bit of remembering

[23:04] <TimToady> the test cases are stolen from the Python entry

[23:04] <TimToady> but I ignored everyone else's solution

[23:05] <TimToady> I was tempted to defined ipv6 recursively, but then it could falsely allow multiply nested brackets

[23:05] <TimToady> originally I was going to traverse the returned match tree, but it turned out easier to just set some dynavars

[23:06] <TimToady> nap &

[23:11] *** mathw joined
[23:11] *** avar joined
[23:11] *** avar left
[23:11] *** avar joined
