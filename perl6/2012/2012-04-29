[00:02] *** allbery_b left
[00:04] *** havenn joined
[00:10] *** havenn left
[00:25] <diakopter> oh shark

[00:26] <sorear>  what?

[00:26] <diakopter> hee; see the backscroll a few lines

[00:26] <sorear> ah

[00:27] <dalek> tablets: 2240d04 | (Herbert Breunung)++ | docs/appendix- (2 files):

[00:27] <dalek> tablets: backlink metachars and test ops

[00:27] <dalek> tablets: review: https://github.com/perl6/tablets/commit/2240d0452f

[00:27] <sorear> moin, diakopter

[00:29] <diakopter> "you have a face good for irc"

[00:36] *** sudokode joined
[00:51] <sorear> diakopter: huh?

[00:51] <diakopter> nm

[00:51] <sorear> did someone say that?

[00:56] <diakopter> ha; no

[01:17] *** sudokode left
[01:17] *** sudokode joined
[01:35] *** geekosaur joined
[01:47] *** PacoAir joined
[01:51] *** PacoAir left
[01:51] *** PacoAir joined
[02:00] *** erkan left
[02:04] *** Chillance left
[02:07] *** dbr left
[02:07] <dalek> tablets: a7502b7 | (Herbert Breunung)++ | docs/appendix- (3 files):

[02:07] <dalek> tablets: complete metachar table and add 2 missind metachars into index

[02:07] <dalek> tablets: review: https://github.com/perl6/tablets/commit/a7502b7963

[02:07] *** whiteknight left
[02:12] *** oiig_ joined
[02:25] *** PacoAir left
[02:25] *** eviltwin_b joined
[02:28] *** geekosaur left
[02:36] *** geekosaur joined
[02:39] *** eviltwin_b left
[02:48] *** lichtkind_ left
[02:49] *** orafu left
[02:51] *** orafu joined
[02:53] *** jaldhar left
[03:03] *** thelazydeveloper left
[03:03] *** thou joined
[03:21] *** eviltwin_b joined
[03:23] *** Su-Shee_ joined
[03:24] *** geekosaur left
[03:27] *** Su-Shee left
[03:29] *** JimmyZ_ joined
[03:32] *** allbery_b joined
[03:34] *** libertyprime left
[03:34] *** eviltwin_b left
[03:54] *** libertyprime joined
[03:56] *** JimmyZ_ left
[04:01] *** plutoid joined
[04:15] *** eviltwin_b joined
[04:18] *** allbery_b left
[04:21] *** eviltwin_b left
[04:21] *** eviltwin_b joined
[04:21] *** kaare__ joined
[04:25] *** geekosaur joined
[04:28] *** eviltwin_b left
[04:32] *** thou left
[04:38] *** thou joined
[04:40] *** eviltwin_b joined
[04:41] *** geekosaur left
[04:45] *** eviltwin_b is now known as geekosaur

[04:47] *** kaare__ is now known as kaare_

[04:47] *** geekosaur left
[04:48] *** geekosaur joined
[04:48] <[Coke]> hai is also japanese for yes.

[04:58] * [Coke] sees a ticket thread in gmail for p5 with Jesse (Luehrs) and James (Keenan). anyone know what popped into my head?

[04:58] *** oiig_ left
[04:59] *** oiig_ joined
[05:24] *** sisar joined
[05:27] *** birdwindupbird joined
[05:44] *** FACEFOX-DOT-COM left
[05:51] *** FACEFOX-DOT-COM joined
[05:54] *** xdbr joined
[05:57] *** FACEFOX-DOT-COM left
[05:58] *** eviltwin_b joined
[06:01] *** geekosaur left
[06:04] *** geekosaur joined
[06:04] *** eviltwin_b left
[06:09] *** FACEFOX-DOT-COM joined
[06:18] *** FACEFOX-DOT-COM left
[06:22] <sisar> how can I do an advanced search of bug reports on RT ?

[06:27] <jlaire> hai is also finnish for shark

[06:27] *** FACEFOX-DOT-COM joined
[06:32] *** plutoid left
[06:37] *** birdwindupbird left
[06:38] <sisar> r: say -8 div 3;

[06:38] <p6eval> rakudo 2a962e: OUTPUT«-2␤»

[06:38] <sisar> ^ known rakudobug ?

[06:38] <sisar> (expected "-3")

[06:41] *** FACEFOX-DOT-COM left
[06:45] <jlaire> r: say (-8) div 3

[06:45] <p6eval> rakudo 2a962e: OUTPUT«-2␤»

[06:47] <tadzik> oh shark, #perl6

[06:47] <phenny> tadzik: 28 Apr 23:15Z <uvtc> tell tadzik http://irclog.perlgeek.de/perl6/2012-04-28#i_5512561

[06:50] <sorear> tadzik!

[06:51] <tadzik> sorear!

[06:52] *** FACEFOX-DOT-COM joined
[06:55] <tadzik> gfldex++ # nice blog post(s)

[06:56] *** eviltwin_b joined
[06:57] *** spaceships left
[06:59] *** geekosaur left
[06:59] *** NamelessTee joined
[07:02] *** FACEFOX-DOT-COM left
[07:07] *** NamelessTee left
[07:07] *** NamelessTee joined
[07:08] *** allbery_b joined
[07:12] *** eviltwin_b left
[07:13] *** FACEFOX-DOT-COM joined
[07:13] *** FACEFOX-DOT-COM left
[07:18] *** FACEFOX-DOT-COM joined
[07:18] *** FACEFOX-DOT-COM left
[07:23] *** FACEFOX-DOT-COM joined
[07:28] *** eviltwin_b joined
[07:30] *** FACEFOX-DOT-COM left
[07:31] *** allbery_b left
[07:32] *** allbery_b joined
[07:35] *** eviltwin_b left
[07:38] *** FACEFOX-DOT-COM joined
[07:38] *** erkan joined
[07:38] *** erkan left
[07:38] *** erkan joined
[07:40] *** FACEFOX-DOT-COM left
[07:49] *** Su-Shee_ is now known as Su-Shee

[07:55] *** FACEFOX-DOT-COM joined
[08:04] *** araujo left
[08:23] *** eviltwin_b joined
[08:24] <moritz> \o

[08:27] *** allbery_b left
[08:29] *** cognominal_ joined
[08:32] *** allbery_b joined
[08:33] *** cognominal left
[08:35] *** eviltwin_b left
[08:37] *** thou left
[08:45] *** tokuhirom joined
[09:01] *** sisar left
[09:08] *** kst left
[09:17] *** fhelmberger joined
[09:21] *** kst joined
[09:35] <arnsholt> moritz: I've killed one of the valgrind warnings now

[09:35] <arnsholt> Still one to go, but probably same kind of issue I think

[09:39] <arnsholt> And as a nice side-effect, the patch refactored the write-barrier functions to the better IMO

[09:39] <arnsholt> 57 insertions and 46 deletions, so not much more code was needed in the end either

[09:40] *** plutoid joined
[09:40] *** pluto_ joined
[09:45] *** pluto_ left
[09:48] <moritz> arnsholt: which repo? nqp?

[09:49] <arnsholt> Haven't pushed yet

[09:49] <moritz> ok

[09:49] <arnsholt> But the actual bug isn't dead yet, even if the valgrind complaints are :/

[09:54] *** eviltwin_b joined
[09:54] *** tadzik is now known as StrazDzienna

[09:55] <arnsholt> And valgrind doesn't give me any more leads to work on. Still behaves differently in valgrind though

[09:56] *** StrazDzienna is now known as tadzik

[09:57] *** allbery_b left
[09:59] <moritz> if you push it, I can try some different test files

[10:00] <arnsholt> Yeah, I think I'll push it. Just gonna fix CStruct as well

[10:00] <arnsholt> But looking at the the sqlite DBD, I think this problem with strings is something different

[10:01] <arnsholt> The DBD's fetchrow_array calls sqlite3_column_text, and there're no arrays involved tehre

[10:01] <arnsholt> So I think the problem is elsewhere

[10:02] <moritz> phenny: ask jnthn to please add http://feather3.perl6.nl:5000/dalek?t=freenode,perl6 as a post-commit hook URL in zavolaj

[10:02] <phenny> moritz: I'll pass that on when jnthn is around.

[10:03] <moritz> arnsholt: fwiw I've now moved on to https://github.com/perl6/DBIish (but the native calling stuff is the same as in MiniDBI)

[10:04] <arnsholt> Okies

[10:04] *** allbery_b joined
[10:04] <dalek> nqp/dyncall-wb: 2fb45b9 | (Arne Skjærholt)++ | src/ops/nqp_dyncall.ops:

[10:04] <dalek> nqp/dyncall-wb: Handle non-concrete objects properly in write barriers.

[10:04] <dalek> nqp/dyncall-wb: review: https://github.com/perl6/nqp/commit/2fb45b97ab

[10:04] <dalek> nqp/dyncall-wb: bcf4b25 | (Arne Skjærholt)++ | src/6model/reprs/CArray.c:

[10:04] <dalek> nqp/dyncall-wb: [CArray] Handle non-concrete objects correctly in bond_pos_boxed.

[10:04] <dalek> nqp/dyncall-wb: review: https://github.com/perl6/nqp/commit/bcf4b25328

[10:04] <arnsholt> That should fixes the write-barrier weirdness

[10:05] <moritz> and I guess s/bond/bind/ :-)

[10:05] <arnsholt> But this other problem, along with your malformed utf issue seems to suggest something's a bit off in string handling

[10:05] <arnsholt> Durr, yeah

[10:05] <arnsholt> Too late to rewrite history now

[10:06] <moritz> well, you can alwys win. History is written by the winners :-)

[10:07] *** eviltwin_b left
[10:09] <dalek> panda: e106529 | tadzik++ | TODO:

[10:09] <dalek> panda: Add TODO

[10:09] <dalek> panda: review: https://github.com/tadzik/panda/commit/e106529b70

[10:09] <dalek> panda: dccd200 | tadzik++ | bin/ufobuilder:

[10:09] <dalek> panda: Remove ufobuilder

[10:09] <dalek> panda: review: https://github.com/tadzik/panda/commit/dccd2006ee

[10:09] <dalek> panda: e815355 | tadzik++ | bin/masstest:

[10:09] <dalek> panda: [masstest] Use a new template, improve this and that

[10:09] <dalek> panda: review: https://github.com/tadzik/panda/commit/e815355173

[10:10] <tadzik> oh, works

[10:10] *** kaare_ left
[10:10] <tadzik> moritz++ # commit url

[10:10] <tadzik> it was still linking to appflux.something

[10:11] <moritz> it's all in misc/dalek-push.txt in the mu repo

[10:14] <moritz> arnsholt: I still get "invalid read of size 1" in the DBIish sqlite tests

[10:15] *** eviltwin_b joined
[10:16] <jnthn> Good...hmm...afternoon, it seems.

[10:16] <phenny> jnthn: 10:02Z <moritz> ask jnthn to please add http://feather3.perl6.nl:5000/dalek?t=freenode,perl6 as a post-commit hook URL in zavolaj

[10:17] <jnthn> moritz: Should I remove http://host04.appflux.net:5000/dalek?t=freenode,perl6 ?

[10:17] <moritz> jnthn: yes, that's outdated

[10:18] <jnthn> done and done.

[10:18] *** geekosaur joined
[10:19] *** allbery_b left
[10:19] <dalek> DBIish: caf7ba9 | moritz++ | t/99-common.pl6:

[10:19] <dalek> DBIish: update introspection for tests

[10:19] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/caf7ba9e65

[10:19] <moritz> jnthn++

[10:19] <jnthn> arnsholt: Note that STRING *s are GC-able and need the writing object to get the write-barrier treatment. Dunno if that helps.

[10:21] <dalek> DBIish: 6ee56c4 | moritz++ | lib/DBDish/SQLite.pm6:

[10:21] <dalek> DBIish: [SQLite] fix typo

[10:21] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/6ee56c497e

[10:21] *** eviltwin_b left
[10:23] *** cognominal_ left
[10:24] *** cognominal_ joined
[10:31] *** liuchong joined
[10:34] <arnsholt> moritz: Yeah, I get that one too. But the stack trace is so garbled I'm not sure what's going on

[10:34] <arnsholt> jnthn: No idea, TBH

[10:35] <arnsholt> But the function that has varying behaviour depending on valgrind or not is (OpaquePointer, int) -> Str

[10:36] <masak> oh shark, #perl6

[10:36] <phenny> masak: 28 Apr 23:03Z <uvtc> tell masak Thanks for the link to the slides to your November talk.

[10:38] *** PacoAir joined
[10:38] <moritz> lolsharkmasak!

[10:39] *** liuchong left
[10:44] <dalek> DBIish: 7632716 | moritz++ | t/99-common.pl6:

[10:44] <dalek> DBIish: [t] be more careful about finishing statement handles

[10:44] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/7632716e25

[10:44] <dalek> DBIish: 1d4930b | moritz++ | t/99-common.pl6:

[10:44] <dalek> DBIish: [t] avoid trailing zeros in numbers for now

[10:44] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/1d4930b863

[10:46] *** cognominal_ left
[10:47] *** cognominal joined
[10:48] *** Jdoneright joined
[10:48] *** whiteknight joined
[10:49] <Jdoneright> my $actio = {say 'hi'};         #what can this mean in Perl 6?

[10:50] <moritz> r: my $action = { say 'hi' }; say $action.WHAT

[10:50] <p6eval> rakudo 2a962e: OUTPUT«Block()␤»

[10:51] <moritz> r: my $action = { say 'hi' }; $action()

[10:51] <p6eval> rakudo 2a962e: OUTPUT«hi␤»

[10:51] <moritz> Jdoneright: does that answer your question?

[10:52] <Jdoneright> ^__^'' yes!

[10:52] <Woodi> so 'sub' seems little deprecated with that ?

[10:53] <jnthn> Woodi: Note that a block is transparent to return.

[10:53] *** eviltwin_b joined
[10:56] *** geekosaur left
[10:56] <moritz> blocks are meant for small pieces of cdoe, routines for larger organizational units

[10:56] <tadzik> my &foo = { say "hai" }; say "oh"; foo()

[10:56] <tadzik> r: my &foo = { say "hai" }; say "oh"; foo()

[10:56] <p6eval> rakudo 2a962e: OUTPUT«oh␤hai␤»

[10:58] *** JimmyZ joined
[11:00] <moritz> tadzik: did you mean my &foo = { say 'shark' }; ?

[11:02] <masak> :P

[11:02] * masak .oO( I preferred pandas and butterflies. with this new shark meme, is #perl6 finally losing its innocense? ) :P

[11:03] <tadzik> :P

[11:03] <masak> Jdoneright: welcome back! haven't seen you in a year or so.

[11:06] <Jdoneright> thanks! did'nt mean to get remembered though ))

[11:07] <Jdoneright> Just some J evangelism

[11:07] <masak> your nick *is* some J evangelism :P

[11:08] <masak> anyway, I like return customers. let me know how we can help either corrupt you with more Perl 6, or corrupt Perl 6 with more J. ;)

[11:08] <Jdoneright> =^__^=

[11:10] <dalek> DBIish: c4a9e93 | moritz++ | lib/DBDish/SQLite.pm6:

[11:10] <dalek> DBIish: [SQLite] finish statement handle in .do

[11:10] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/c4a9e93e68

[11:10] <dalek> DBIish: 3100834 | moritz++ | t/20-CSV-common.t.not.ready:

[11:10] <dalek> DBIish: remove outdated test file

[11:10] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/31008343cf

[11:10] <dalek> DBIish: e0ca68b | moritz++ | t/99-common.pl6:

[11:10] <dalek> DBIish: [t] start to compare numbers numerically

[11:10] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/e0ca68b428

[11:18] *** eviltwin_b left
[11:18] *** eviltwin_b joined
[11:21] *** araujo joined
[11:21] *** araujo left
[11:21] *** araujo joined
[11:29] *** thelazydeveloper joined
[11:35] <gfldex> is there a skeleton for perl6 modules somewhere on the intarwebs?

[11:37] <masak> 'module MyModule;' <-- presto, skeleton

[11:38] <gfldex> i was more thinking about a directory structre with all the files you need

[11:38] <jnthn> Hmm...I thought there was a good blog post on that somewhere...

[11:38] <jnthn> yes

[11:38] <jnthn> http://wiki.perl6.org/Create%20and%20Distribute%20Modules

[11:38] <jnthn> Linked from modules.perl6.org \o/

[11:39] * gfldex cleans his glasses

[11:39] *** eviltwin_b left
[11:40] <jnthn> Wasn't saying "you shoulda looked", just happy I came accross it in the first place I thought to look :)

[11:40] *** geekosaur joined
[11:40] <gfldex> i don't got you like that 

[11:40] <gfldex> i was looking at modules.perl6.org

[11:41] <gfldex> but could not see :o

[11:41] *** Jdoneright left
[11:41] *** eviltwin_b joined
[11:41] <araujo> hello

[11:41] <araujo> :)

[11:42] <jnthn> o/ araujo 

[11:43] <araujo> hello jnthn , how that goes?

[11:43] *** grondilu joined
[11:43] <grondilu> p6: proto foo { {*} };

[11:43] <p6eval> pugs:  ( no output )

[11:43] <p6eval> ..rakudo 2a962e: OUTPUT«===SORRY!===␤{*} may only appear in proto at line 1, near " };"␤»

[11:43] <p6eval> ..niecza v16-23-gaa61ed5: OUTPUT«Potential difficulties:␤  &foo is declared but not used at /tmp/eIUTsRdytW line 1:␤------> [32mproto foo [33m⏏[31m{ {*} };[0m␤␤»

[11:44] <jnthn> araujo: Pretty good today. :)

[11:44] <jnthn> p6: proto foo { * }

[11:44] <p6eval> pugs, rakudo 2a962e:  ( no output )

[11:44] <p6eval> ..niecza v16-23-gaa61ed5: OUTPUT«Potential difficulties:␤  &foo is declared but not used at /tmp/NiI0_i10xu line 1:␤------> [32mproto foo [33m⏏[31m{ * }[0m␤␤»

[11:44] <grondilu> r: proto foo { {*}; 42 };

[11:44] <p6eval> rakudo 2a962e: OUTPUT«===SORRY!===␤{*} may only appear in proto at line 1, near "; 42 };"␤»

[11:44] *** geekosaur left
[11:44] <jnthn> Hmm.

[11:44] <jnthn> That one should prolly work.

[11:44] <jnthn> Guess just a NYI.

[11:45] <arnsholt> jnthn: I think the dyncall stuff reuses some freed memory or something

[11:45] <jnthn> arnsholt: "the dyncall stuff"? :)

[11:45] <jnthn> arnsholt: As in, libdyncall?

[11:45] <arnsholt> Er no, sorry. The nqp_dyncall.ops stuff

[11:45] <jnthn> Ah.

[11:46] <jnthn> Yeah, often ends up being buffer overruns. Or at least, a couple I found were that.

[11:47] <jnthn> arnsholt: What are the symptoms of the current issue?

[11:47] *** mucker joined
[11:47] <arnsholt> It's moritz++ who uncovered it

[11:48] <arnsholt> Some data is inserted into sqlite, and getting it back works when run under valgrind, but not without it

[11:48] <arnsholt> Although, what if it's the inserting that doesn't work...

[11:48] * arnsholt goes to check that

[11:49] <arnsholt> Indeed. Looks like it's the inserting that fails

[11:51] *** fhelmberger left
[11:52] <jnthn> Does Valgrind not complain?

[11:52] <jnthn> e.g. it both works under valgrind and and doesn't get complained about?

[11:53] <moritz> there are "Invalid read of size 1" messages, with mostly useless backtraces

[11:54] <jnthn> Can I see one of them? :)

[11:55] <arnsholt> Sec

[11:55] <arnsholt> https://gist.github.com/2549841

[11:55] <jnthn> My suspicion though is that it "works" because somewhere we're reading past the end of a buffer.

[11:55] <jnthn> And the value that happens to be there when it's read under valgrind is such that it doesn't cause a crash.

[11:55] <arnsholt> There's a bajillion things from Parrot's GC stuff, but that's the salient one

[11:56] <moritz> memory debuggers and virtual machines often don't mix too well

[11:56] <arnsholt> moritz: I'm assuming the -1 sent in to sqlite3_bind_text means "the string is NULL terminated"?

[11:56] <moritz> arnsholt: indeed, when I manually insert stuff into sqlite, and then read it back via my rakudo-based script, it works fine

[11:56] <moritz> arnsholt: correct

[11:57] <jnthn> Hm, so it's something that we're passing off to sqlite that in turn causes it to do bad things.

[11:58] <arnsholt> Yeah. Parrot_str_to_encoded_cstring makes NULL-terminated strings, right?

[11:58] <jnthn> Which encoding?

[11:58] <jnthn> utf8?

[11:58] <jnthn> Should do, though.

[11:58] <moritz> sqlite3 expects UTF-8

[11:59] <jnthn> k

[11:59] <jnthn> But it is crashing in sqlite3_step...

[11:59] <arnsholt> The argument in the Perl code is a plain Str, so that should give UTF-8, no?

[12:00] <jnthn> arnsholt: Well, the call to encode it to a UTF8 C string certainly should work out.

[12:00] <jnthn> Is sqlite3_step about reading?

[12:00] <jnthn> That is, the insert took place and the crash is when trying to read it back?

[12:00] <moritz> it's about executing the statement and/or advancing to the next row

[12:00] <jnthn> ah, so it crashes when executing the insert?

[12:01] <arnsholt> It doesn't crash. It just inserts bad data

[12:01] <arnsholt> Or no data, rather

[12:01] <moritz> afaict it dies with "Malformed UTF-8 string" while reading back the result

[12:02] <jnthn> Where is the data passed?

[12:02] <moritz> on the p6 level, it's

[12:02] <moritz> my $sth = $dbh.prepare('INSERT INTO t (y, z) VALUES (?, ?)');

[12:02] <moritz> $sth.execute($a, $b) # in a loop

[12:03] <jnthn> No, at sqlite level

[12:03] <jnthn> sqlite3_step doesn't take the query

[12:03] <moritz> at the C level, that runs sqlite3_prepare_v2

[12:03] <jnthn> OK, is there any chance that we're seeing:

[12:03] <moritz> followed by sqlite3_bind

[12:03] <jnthn> 1) sqlite3_prepare_v2 is called, passing in the query as a string

[12:03] <moritz> for each param

[12:04] <jnthn> 2) That string we passed in is freed

[12:04] <jnthn> 3) We call the follow-up functions, and they're operating on freed memory

[12:04] <jnthn> ?

[12:04] <moritz> that sounds possible

[12:04] <jnthn> Whereas sqlite expects that string to last for the whole sequence, and doesn't copy it?

[12:05] <moritz> what we do on the p6 level is    for @params.kv -> $k, $v { sqlite3_bind($handle, $k, $v + 1) }

[12:05] <arnsholt> Yes, that's it!

[12:05] <jnthn> arnsholt: In NativeCall.pm6, find the line:

[12:05] <jnthn> nqp::bindkey($result, 'free_str', nqp::unbox_i(1));

[12:05] <jnthn> And change that 1 to a 0.

[12:06] <arnsholt> Or, it sounds very plausible, at least

[12:06] <jnthn> See if that helps.

[12:06] <moritz> so shouldn't the string inside $v be still insdie @params?

[12:06] <moritz> *inside

[12:06] <moritz> or is there a new string being created somewhere?

[12:06] <jnthn> New

[12:07] <jnthn> Parrot_str_to_encoded_cstring makes a fresh string.

[12:07] <jnthn> With the correct encoding.

[12:07] <moritz> oh.

[12:08] <arnsholt> Yup. Not freeing the string fixes it

[12:08] <jnthn> arnsholt: For clarification of what's going on inside, see handling of "char **free_strs = NULL;" in op nqp_native_call.

[12:08] <arnsholt> Yeah, I've skimmed that bit of code. Just didn't think hard enough about it to make the connection

[12:09] <jnthn> I made it in the nqp op so it's configurable whether it frees it or expects the library to at some point.

[12:09] <jnthn> But didn't do a trait to expose that.

[12:09] <jnthn> But it probably can be just like the "which encoding to use" trait.

[12:09] *** cognominal_ joined
[12:10] <arnsholt> Yeah, that makes sense

[12:10] <jnthn> But...I worry a bit still

[12:10] <jnthn> When will that string be freed?

[12:10] <moritz> so, $x is managed_by_caller ?

[12:10] <jnthn> moritz: For what you want, "is managed_by_callee" is more accurate.

[12:11] <jnthn> moritz: The default is to free a marshalled string right after the call.

[12:11] <arnsholt> is cmanaged?

[12:11] <jnthn> Which for a bunch of cases is right.

[12:11] <jnthn> But not this one.

[12:11] <moritz> jnthn: ah, right

[12:11] <jnthn> Will sqlite actually free it at some point?

[12:11] <moritz> I don't think so

[12:11] <jnthn> Ugh.

[12:12] <jnthn> Then we'll fix the problem, but leak memory.

[12:12] <moritz> oh, wait

[12:12] <moritz> http://sqlite.org/c3ref/bind_blob.html says "If the fifth argument is the special value SQLITE_STATIC, then SQLite assumes that the information is in static, unmanaged space and does not need to be freed."

[12:12] *** cognominal left
[12:12] <moritz> one can read that as "usually we do free the memory for you", but I'm not quite sure that's the case

[12:12] *** mikemol joined
[12:13] *** mikemol left
[12:13] <jnthn> Hmm...if it's freeing *and* we're freeing then it's gonna be a double free.

[12:15] <moritz> maybe http://sqlite.org/c3ref/clear_bindings.html does?

[12:16] <jnthn> Not convinced...it'd probably say something about freeing.

[12:20] <arnsholt> I think SQLITE_STATIC is just a magic value used to indicate noop

[12:21] <arnsholt> Memory is not freed, and if you want it to be freed, you need to pass a destructor callback

[12:25] <arnsholt> In our case, that means we just want to pass a pointer to free, but I'm not sure what the easiest way to do that is

[12:30] * masak cheers on the efforts to get DBIish things to work on Rakudo

[12:30] *** birdwindupbird joined
[12:38] <moritz> how about we introduce a Pool object

[12:38] <moritz> and then we do   $param is managed-by($pool);

[12:38] <jnthn> Hm.

[12:38] <moritz> and once we know we don't need that memory anymore, we call $pool.free

[12:39] <arnsholt> Hm, indeed

[12:39] <jnthn> Or we have an explicit CStr that we just have to be sure we hold on to a reference to for long enough.

[12:40] <arnsholt> Yeah, or that

[12:40] <jnthn> So you CStr.new($the_perl6_str, $which-encoding)

[12:40] <jnthn> And it marshalls it right away.

[12:40] <jnthn> And frees the marshalling of it once that CStr gets GC'd.

[12:40] <jnthn> So you just have to store it somewhere for the duration of your querying.

[12:41] <jnthn> Feels rather lighter than introducing pools. :)

[12:41] <arnsholt> Yeah, I think that's a good way

[12:42] *** grondilu left
[12:43] <arnsholt> So then we'll need a new REPR, and refactor the current code dealing with strings, no?

[12:44] <jnthn> arnsholt: Yeah, I just wonder how to make it non-ugly from a Perl 6 point of view.

[12:45] <jnthn> As in, I don't want to make the common case any more complicated than it is today.

[12:46] <jnthn> I wonder if we can do it such that we actually have a role mixed into a normal Str, which has an attribute that is something with the CStr REPR.

[12:46] <arnsholt> Yeah, that's the thing. Perhaps Zavolaj could marshal Strs into CStrs on the fly?

[12:46] <jnthn> Well, no, that misses solving the problem :)

[12:46] <jnthn> We need to sometimes let the caller explicitly say "I want to keep this CStr around"

[12:46] <jnthn> e.g. they need to control things a bit more

[12:47] <arnsholt> Well, yeah. But in that case you could crete the CStr yourself

[12:47] <jnthn> Yeah...

[12:47] <arnsholt> s/crete/create

[12:47] <jnthn> I'm more thinking about the signature.

[12:47] <jnthn> sub foo(Str $s) is native(...) { * }

[12:47] <jnthn> vs

[12:47] <arnsholt> Good point. Forgot about that

[12:47] <jnthn> sub foo(CStr $s) is native(...) { * }

[12:47] <jnthn> Feels icky.

[12:48] <arnsholt> Yeah. They're the same function, so there shouldn't be more than one entry point

[12:48] <jnthn> Well, also teaching people when to write which one.

[12:48] <jnthn> I think I'd prefer...

[12:48] <arnsholt> Not to mention that, yeah

[12:48] <jnthn> You declare it with Str always.

[12:48] <jnthn> We provide a function like:

[12:49] <arnsholt> Having the parameter always be Str feels best, yeah

[12:49] <jnthn> my $resource-handle = get-string-handle($some_str);

[12:49] <jnthn> no, not that...

[12:49] <jnthn> manually-manage-str($some_str);

[12:50] <jnthn> It mixes a role into Str

[12:50] <jnthn> Which in turn has an attribute of some type with CStr REPR.

[12:50] <jnthn> This REPR just points off to the marshalled C string.

[12:51] <jnthn> And we always use that same marshalling in every single call done with this string.

[12:51] <arnsholt> Yeah, that sounds good. Are Strs constant?

[12:51] <jnthn> And it doesn't get cleared up until $some_str is freed

[12:51] <jnthn> Yes, Str is immutable.

[12:51] <arnsholt> Excellent

[12:51] <jnthn> Which is important for this to actually work. :)

[12:51] <arnsholt> Kinda, yeah =)

[12:52] <jnthn> Then we just have to document when to use manually-manage-str (and I'm open to better names)

[12:52] <arnsholt> Yet another example that immutable strings are important =)

[12:52] <jnthn> Yeah.

[12:52] <arnsholt> So far my best suggestion for a name is manually-manage

[12:53] <jnthn> Hm

[12:53] <jnthn> That does have the advantage that if we find we need a similar mechanism in the future, we just make it a multi.

[12:53] <arnsholt> Yup

[12:53] <jnthn> e.g. for now we just have a candidate that is like multi manually-manage(Str $s) { ... }

[12:53] <jnthn> May as well multi it from the start

[12:53] <jnthn> +1

[12:54] <arnsholt> Troo. And we'll need to specify the encoding as well

[12:54] <jnthn> Could pass as a named.

[12:54] <jnthn> Or

[12:54] <arnsholt> Yeah, that's what I was thinking

[12:54] <jnthn> Well, no, that's orthogonal to management.

[12:55] <jnthn> We already *have* a way to specify encoding.

[12:55] <arnsholt> True. If it hasn't been specified we can just default to UTF-8

[12:55] <jnthn> And it's not like manually-manage has to actually marshall immediately

[12:56] <arnsholt> Good point. Defer all the work

[12:56] <jnthn> All the work!

[12:56] <jnthn> Yes, NativeCall.pm6:22

[12:56] <jnthn> That says default is utf8 today if unspecified.

[12:57] <arnsholt> Oh, we have .? right

[12:57] <arnsholt> I'll have to steal that =)

[13:01] *** brrt joined
[13:02] <dalek> tablets: ae91215 | (Herbert Breunung)++ | docs/report.pl:

[13:02] <dalek> tablets: adding script for a internal status report, helps me to save much time but  reall i dide this soemtimes manually

[13:02] <dalek> tablets: review: https://github.com/perl6/tablets/commit/ae9121561f

[13:02] *** geekosaur joined
[13:06] *** eviltwin_b left
[13:06] *** allbery_b joined
[13:06] *** lichtkind joined
[13:08] *** mucker left
[13:08] *** geekosaur left
[13:11] *** plutoid left
[13:15] *** tokuhirom left
[13:28] *** sergot joined
[13:28] <sergot> hi o/

[13:30] <masak> sergocie! \o/

[13:31] <masak> O Rekin! Jak się dzisiaj czujesz? :P

[13:33] *** tokuhirom joined
[13:34] <moritz> so, what's the plan now?

[13:34] <moritz> a function that mixes a role into a string

[13:34] *** Chillance joined
[13:34] <moritz> which makes it keep a reference to the marshalled string?

[13:35] <arnsholt> Yeah, pretty much

[13:36] <arnsholt> Right now I'm trying to figure out how to do it all =)

[13:38] <moritz> my mental image is:

[13:38] <moritz> a role ManagedCString { has $!marshalled }

[13:38] <moritz> and when you marshall a string, and that string .^does(ManagedCString), it sets $!marshalled to the newly marshalled thing

[13:39] <moritz> so that the GC doesn't get

[13:39] *** tokuhirom left
[13:39] <jnthn> Basically that, yeah.

[13:39] <jnthn> Then you just have to keep the string around long enough.

[13:39] *** ZAZEN_co1pute left
[13:39] <jnthn> So long as your program references it, the marshalled version will stay around.

[13:40] *** brrt left
[13:42] *** buubot_backup left
[13:47] <gfldex> jnthn: another note about RT112666, if I stick Role and trait into a module it stops working alltogether

[13:49] <sergot> masak: Rekin? :) Dobrze się czuję. A Ty? :)

[13:50] <jnthn> gfldex: I assume you added "is export" to the trait?

[13:50] <gfldex> yes

[13:50] <jnthn> ok

[13:52] <dalek> roast: 5e75fe9 | ronaldxs++ | fudge:

[13:52] <dalek> roast: The ~~ smart match requires Perl 5.10 and rakudo is supposed to be OK with Perl 5.8. Don't see why =~ isn't enough.

[13:52] <dalek> roast: review: https://github.com/perl6/roast/commit/5e75fe9c26

[13:52] <dalek> roast: 2e5a21c | (It's secret to everybody)++ | fudge:

[13:52] <dalek> roast: Merge pull request #19 from ronaldxs/patch-1

[13:52] <dalek> roast: 

[13:52] <dalek> roast: The ~~ smart match requires Perl 5.10 

[13:52] <dalek> roast: review: https://github.com/perl6/roast/commit/2e5a21c61a

[13:52] <masak> sergot: Tadzik zaczął mówić o rekinów. Zobacz zaległości.

[13:54] <gfldex> jnthn: it on github for easy access https://github.com/gfldex/perl6-signal

[13:54] *** sergot left
[13:58] *** kaare_ joined
[13:59] *** sisar joined
[14:00] *** havenn joined
[14:02] <sisar> moritz, http://irclog.perlgeek.de/perl6/2012-04-29#i_5513397 and the following 3-4 lines

[14:03] <moritz> sisar: what's the bug?

[14:03] <moritz> -8 = -2 + (-2) * 3

[14:03] <sisar> expected is -3 not -2

[14:03] <sisar> n: -8 div 3;

[14:03] <p6eval> niecza v16-23-gaa61ed5:  ( no output )

[14:04] <sisar> say -8 div 3 ;

[14:04] <sisar> arrgh

[14:04] <moritz> n: say -8 div 3

[14:04] <p6eval> niecza v16-23-gaa61ed5: OUTPUT«-3␤»

[14:04] <sisar> n: say -8 div 3 ;

[14:04] <p6eval> niecza v16-23-gaa61ed5: OUTPUT«-3␤»

[14:04] <moritz> oh, I'm confusing div and mod

[14:04] <moritz> p6: say (-8) div 3

[14:04] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "div"␤    expecting operator, ":" or ","␤    at /tmp/wMavy8_09r line 1, column 10␤»

[14:04] <p6eval> ..niecza v16-23-gaa61ed5: OUTPUT«-3␤»

[14:04] <p6eval> ..rakudo 2a962e: OUTPUT«-2␤»

[14:04] <masak> huh!

[14:05] <masak> I think Rakudo is right here.

[14:05] <masak> it's truncate-towards-0, not round-down semantics.

[14:05] <masak> p6: say 8 div 3

[14:05] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "div"␤    expecting operator, ":" or ","␤    at /tmp/tDrs2OIBKO line 1, column 7␤»

[14:05] <p6eval> ..rakudo 2a962e, niecza v16-23-gaa61ed5: OUTPUT«2␤»

[14:05] * masak submits nieczabug

[14:05] <sisar> masak: no. the spec says "In general, div should give the same result as:   $x div $y == floor($x/$y) "

[14:06] <sisar> masak, wait

[14:06] <masak> oh!

[14:06] <sisar> verdict ?

[14:06] * masak unsubmits the nieczabug and submits rakudobug

[14:06] <sisar> masak++

[14:06] <moritz> r: say ((-8 * 2**65) div (3 * 2**65) / 2 ** 65

[14:06] <p6eval> rakudo 2a962e: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 2␤»

[14:06] <moritz> r: say ((-8 * 2**65) div (3 * 2**65)) / 2 ** 65

[14:06] <p6eval> rakudo 2a962e: OUTPUT«-5.42101086242752e-20␤»

[14:07] <sisar> masak, how do i an advaced search on RT ?

[14:08] <moritz> sisar: I think the first step is to log in

[14:08] <arnsholt> jnthn: https://gist.github.com/2550626#file_gistfile1.txt # What I'm basing my string stuff around. Look ok so far?

[14:08] <sisar> moritz, next ?

[14:09] <moritz> sisar: then we you do a simple search, you can click on 'Advanced'

[14:09] *** cognominal___ joined
[14:09] <moritz> sisar: and then you need magic :/

[14:09] <arnsholt> moritz: Feel free to have a look at that gist as well =)

[14:09] * sisar tries

[14:09] <masak> oh come on, it's not that hard.

[14:09] <moritz> you can click on the 'edit search' link

[14:10] <masak> here's my general method for finding things in RT.

[14:10] <arnsholt> I'm not too happy with the name CStrRole, so suggestions welcome

[14:10] <jnthn> arnsholt: looking

[14:10] <moritz> arnsholt: new CStr($x); looks suspicious

[14:10] <masak> search for a keyword. enter the 'edit search' page. ignore the amazing collection of GUI controls.

[14:10] <masak> select queue: perl6. click 'add and search'.

[14:11] <moritz> std: role CStr { }; new CStr(my $x)

[14:11] <jnthn> This ain't C++ :P

[14:11] <p6eval> std fab64fc: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of C++ constructor syntax; in Perl 6 please use method call syntax at /tmp/wqslNkPF2C line 1:␤------> [32mrole CStr { }; new CStr[33m⏏[31m(my $x)[0m␤Parse failed␤FAILED 00:00 40m␤»

[14:11] <masak> sort things according to reverse temporal order by clicking the appropriate table heading twice.

[14:11] <jnthn> Maybe name it ManuallyManagedNativeStr or something

[14:11] <jnthn> PUtting "Role" in the name of the role is kinda weird.

[14:11] <arnsholt> Oh, I derped. CStr.new of course

[14:11] <jnthn> It doesn't matter if the name is a bit long.

[14:11] <jnthn> As people will never type it by hand anyway.

[14:12] <moritz> and CStr is repr($something_custom) ?

[14:12] <arnsholt> Yeah, class CStr is repr('CStr')

[14:12] *** cognominal_ left
[14:13] <tadzik> masak: you're lovely with your Polish :)

[14:14] <moritz> p6: my $x = 2**65; say (-8 * $x div 3 * $x) div $x

[14:14] <p6eval> niecza v16-23-gaa61ed5: OUTPUT«-98382635059784275286␤»

[14:14] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "div"␤    expecting operator or ")"␤    at /tmp/NJqoGMWonm line 1, column 29␤»

[14:14] <p6eval> ..rakudo 2a962e: OUTPUT«-98382635059784275285␤»

[14:14] <moritz> erm.

[14:14] <moritz> is that correct?

[14:14] <masak> tadzik: today I might've been completely off. it looked good, though.

[14:14] <tadzik> I assume you meant "backlog" as "zaległości"?

[14:14] <masak> yeah... sounds like I was off, then.

[14:15] <masak> phenny: "zaległości"?

[14:15] <phenny> masak: "up" (pl to en, translate.google.com)

[14:15] <tadzik> hmm

[14:15] <masak> heh.

[14:15] <arnsholt> jnthn: Having a horrible long name will encourage people to use manually-managed as well, in case that ends up doing more magic =)

[14:15] <tadzik> it's like something that was due last week, but you still didn't do it

[14:15] <tadzik> like my SE assignment

[14:15] <tadzik> if you have things like this, then you have "zaległości"

[14:15] <masak> ah, like the "backlog" of Scrum.

[14:16] <masak> yeah. in retrospect, it was presumptious of me to think that GT would find the right word for "backlog".

[14:16] <masak> phenny: en pl "chat log"?

[14:16] <phenny> masak: "czat zalogować" (en to pl, translate.google.com)

[14:16] <masak> hah. "czat".

[14:16] <tadzik> I would expect it to find one, but OTOH, I can't find one myself

[14:17] *** jferrero joined
[14:17] <tadzik> czat is not really a Polish word

[14:17] <tadzik> phenny: "zapis rozmowy"?

[14:17] <phenny> tadzik: "a conversation" (pl to en, translate.google.com)

[14:17] <masak> it's a sound loan.

[14:17] <tadzik> aye

[14:17] <tadzik> also, we don't really have a word for a backlog

[14:17] <masak> neither does Swedish. I'd just say "logg", I believe.

[14:17] <tadzik> there's a meaning of "protokół" which means a log of something

[14:18] <tadzik> also, fsergot clearly has zaległości with #perl6 memes

[14:18] <tadzik> if you know what I mean, and I think you do now :)

[14:18] <masak> clearly. :)

[14:18] <tadzik> as in, he's not up to date with them

[14:18] <masak> nodnod

[14:19] <masak> he has "things do to".

[14:19] <masak> phenny: eo en "farendaĵoj"?

[14:19] <phenny> masak: "farendaĵoj" (eo to en, translate.google.com)

[14:19] <masak> dåligt.

[14:20] <masak> eo far + end + aĵ + oj = do + must + thing + (pl) = "things to do"

[14:22] <moritz> whiteknight: fwiw your patch isn't complete enough

[14:23] <moritz> whiteknight: PERL6LIB=lib ./perl6 --ll-exception t/spec/integration/error-reporting.rakudo |&less

[14:23] <moritz> whiteknight: seems the ModuleLoader must be patched too

[14:25] *** geekosaur joined
[14:27] *** allbery_b left
[14:29] *** isBEKaml joined
[14:29] <isBEKaml> Sharkey, #perl6!

[14:30] <masak> :D

[14:30] <moritz> isn't there a Unicode character for shark?

[14:30] <masak> probably nowadays.

[14:30] <isBEKaml> .u shark

[14:30] <phenny> isBEKaml: Sorry, no results for 'shark'.

[14:30] *** UncleFester6 joined
[14:31] <masak> r: say "Ultimate {$_}itude" given "shark"

[14:31] <p6eval> rakudo 2a962e: OUTPUT«Ultimate sharkitude␤»

[14:31] <gfldex> http://www.fileformat.info/info/unicode/char/9c76/index.htm

[14:31] <moritz> but phenny knows only the first 0xFFFF chars

[14:31] <moritz> oh 鱶

[14:32] <isBEKaml> .u 'a shark' 

[14:32] <phenny> isBEKaml: U+0027 U+0061 U+0020 U+0073 U+0068 U+0061 U+0072 U+006B U+0027 U+0020

[14:32] <isBEKaml> huh... :D

[14:32] <moritz> .u 鱶

[14:32] <phenny> U+9C76 CJK UNIFIED IDEOGRAPH-9C76 (鱶)

[14:33] <UncleFester6> perl6: my $x = qqx[ nonesuch ]; print "before\nduring: $x\nafter\n";

[14:33] <p6eval> pugs: OUTPUT«*** No such subroutine: "&qqx"␤    at /tmp/FDrsqwED6I line 1, column 4-24␤»

[14:33] <p6eval> ..niecza v16-23-gaa61ed5: OUTPUT«Unhandled exception: System.InvalidOperationException: File name has not been set␤  at System.Diagnostics.Process.Start_common (System.Diagnostics.ProcessStartInfo startInfo, System.Diagnostics.Process process) [0x00000] in <filename unknown>:0 ␤  at Syste…

[14:33] <p6eval> ..rakudo 2a962e: OUTPUT«qx, qqx is disallowed in safe mode␤  in sub restricted at src/SAFE.setting:2␤  in sub QX at src/SAFE.setting:9␤  in block <anon> at /tmp/Bu9HPkYYyw:1␤␤»

[14:34] <UncleFester6> When I try that qqx command on my system it captures STDERR.  Is it supposed to?

[14:34] *** wolfman2000 left
[14:34] <moritz> UncleFester6: it doesn't on my machine

[14:34] <moritz> erm, wait

[14:35] <moritz> my test was flawed

[14:35] *** eviltwin_b joined
[14:35] <moritz> it does

[14:35] <moritz> i guess it shouldn't

[14:35] <moritz> even though that behavior can be useful at time :-)

[14:35] <moritz> *at times

[14:36] <UncleFester6> OK - thanks - I'll file the bug.  I have been looking at Rakudo Star.

[14:36] <masak> UncleFester6++

[14:36] <moritz> UncleFester6++

[14:37] <isBEKaml> UncleFester6: do it fast. before masakbot does! :)

[14:37] *** geekosaur left
[14:37] <UncleFester6> many of the packaged module tests fail for me on 32 bit Ubuntu.  Is there a make spectest for modules yet or planned?

[14:37] <arnsholt> Right. Managed to compile an NQP with my repr in it

[14:38] <moritz> UncleFester6: I'm not aware of specific plans

[14:38] <moritz> UncleFester6: though tadzik is working on a script which smoke-tests modules independently of rakudo star

[14:39] <UncleFester6> I'll take it up with tadzik maybe some time - thx.

[14:40] <UncleFester6> tadzik++

[14:40] <sisar> r: say sin(pi);

[14:40] <p6eval> rakudo 2a962e: OUTPUT«-3.52688866664137e-10␤»

[14:40] <sisar> r: say sin(pi/2);

[14:41] <p6eval> rakudo 2a962e: OUTPUT«1␤»

[14:41] <arnsholt> But the Rakudo compile exploded. Fun

[14:43] *** sisar left
[14:43] <masak> r: sub sic($x) { sin($x) + i * cos($x) }; say $_.&sic for 0, pi/8 ... 2 * pi

[14:43] <p6eval> rakudo 2a962e: OUTPUT«0+1i␤0.38268343240582+0.923879532494416i␤0.707106781248895+0.7071067811242i␤0.9238795325619+0.382683432242899i␤1-1.76344433332068e-10i␤0.923879532426932-0.382683432568741i␤0.707106780999506-0.707106781373589i␤0.382683432079978-0.923879532629384i␤-3.52688866664137e-…

[14:44] *** sisar joined
[14:45] *** buubot_backup joined
[14:45] <sisar> masak, sin(pi) not being zero, known bug ? #again, can't find on RT :/

[14:46] <moritz> sisar: not bug, just normal floating point inaccuracies

[14:46] <sisar> even, niecza gets it wrong

[14:46] <sisar> n: say sin(pi);

[14:46] <p6eval> niecza v16-23-gaa61ed5: OUTPUT«1.2246063538223773E-16␤»

[14:46] <moritz> r: use Test; is_approx sin(pi), 0, 'sin(pi) is cloase to 0'

[14:46] <p6eval> rakudo 2a962e: OUTPUT«ok 1 - sin(pi) is cloase to 0␤»

[14:46] <moritz> sisar: we don't do symbolic calculations, I'm afraid

[14:46] <sisar> moritz: hmm, but then how does sin(pi/2) is accurately 1 ?

[14:47] <moritz> r: printf '%.15f', sin(pi/2)

[14:47] <p6eval> rakudo 2a962e: OUTPUT«1.000000000000000»

[14:47] <moritz> r: say sin(pi/2) == 1

[14:47] <p6eval> rakudo 2a962e: OUTPUT«True␤»

[14:47] <moritz> sisar: luck

[14:47] <sisar> huh !

[14:47] <masak> sisar: what moritz said.

[14:47] <dalek> tablets: 076b928 | (Herbert Breunung)++ | docs/appendix- (3 files):

[14:47] <dalek> tablets: backlinks for regex modifier and quoting adverbs, updated entry words of A

[14:47] <dalek> tablets: review: https://github.com/perl6/tablets/commit/076b9282c2

[14:47] <masak> sisar: 1.2e-16 is "sufficiently zero".

[14:47] <moritz> r: say sin(2 * pi)

[14:48] <p6eval> rakudo 2a962e: OUTPUT«7.05377733328273e-10␤»

[14:48] <masak> sisar: if this surprises or disappoints you, I may send you some useful links.

[14:48] <arnsholt> jnthn: Is there a simple way to get an NQP script to load the dyncall ops?

[14:48] <moritz> r: say log(abs sin($n * pi)) for ^10

[14:48] <p6eval> rakudo 2a962e: OUTPUT«===SORRY!===␤Variable $n is not declared␤at /tmp/JkVVfeWyx2:1␤»

[14:48] <moritz> r: say log(abs sin($_ * pi)) for ^10

[14:48] <p6eval> rakudo 2a962e: OUTPUT«-Inf␤-21.7654348452065␤-21.0722876646465␤-20.6668221368208␤-20.3791404840866␤-20.155997184603␤-19.9736749562609␤-19.8195245162722␤-19.6859933035267␤-19.5682104077762␤»

[14:48] <sisar> had, sin(pi/2) been something like 0.999, i would have been happy with the output of sin(pi)

[14:48] <masak> why?

[14:49] <masak> sometimes you're lucky with floating-point roundings, sometimes you aren't.

[14:49] <moritz> r: say log(abs sin($_ * pi)).Int for 1..10

[14:49] <p6eval> rakudo 2a962e: OUTPUT«-21␤-21␤-20␤-20␤-20␤-19␤-19␤-19␤-19␤-19␤»

[14:49] <sisar> masak, yeah, the luck factor...

[14:49] <masak> sisar: you shouldn't ever compare exactly two floating-point numbers anyway.

[14:49] <masak> if you do, the floating point gods will smite you.

[14:50] *** allbery_b joined
[14:50] <isBEKaml> masak: goldberg?

[14:50] <isBEKaml> :D

[14:50] <sisar> masak, re good links, yes please

[14:50] * masak gathers some

[14:51] <sisar> masak++

[14:51] *** eviltwin_b left
[14:52] <masak> isBEKaml: right, yes. I just didn't know that was his name.

[14:52] <masak> sisar: http://docs.oracle.com/cd/E19422-01/819-3693/ncg_goldberg.html

[14:52] <sisar> .oO( if masak had a penny for every ++ he gets ... )

[14:52] <moritz> he might be able to buy a beer or two :-)

[14:53] <moritz> karam masak

[14:53] <moritz> karma masak

[14:53] <aloha> masak has karma of 706.

[14:53] <sisar> just a beer or two?

[14:53] <isBEKaml> moritz: beer is expensive!

[14:53] <moritz> in .se, yes

[14:53] <masak> that's more like 10 beers over here.

[14:53] <masak> oh wait.

[14:53] <masak> pennies.

[14:53] <masak> :/

[14:53] <sisar> karma sisar

[14:53] <aloha> sisar has karma of 6.

[14:53] <sisar> :/

[14:54] <moritz> sisar: you need write more patches :-)

[14:54] * sisar did not get a ++ for the div bug 

[14:54] <masak> sisar++

[14:54] <sisar> yay !

[14:55] <sisar> my vacations start from 2nd, so maybe i will have more tuits

[14:55] * sisar is a teenager, so has *many* distractions !

[14:56] * moritz giggles

[14:57] <masak> sounds kinda nice.

[14:57] <sisar> i meant, oh-do-many interests

[14:57] <sisar> *oh-so-many

[14:57] <masak> give them our regards :P

[14:57] <moritz> sisar: when you grow older, there will be many time consuming things that aren't distractions :-)

[14:58] <sisar> moritz: we'll see :p

[14:58] *** sergot joined
[14:59] <sisar> on second look, maybe that "distraction' part got out wrong !

[15:00] <sergot> ;]

[15:00] <moritz> sisar: I know what you mean, I've been a teenager too :-)

[15:00] * masak too

[15:00] <moritz> but once you've got a dayjob, wife and child(ren), things look pretty different

[15:00] <dalek> tablets: 5e6e147 | (Herbert Breunung)++ | docs/appendix-a-index.txt:

[15:00] <dalek> tablets: adding sort / did i really forget this?

[15:00] <dalek> tablets: review: https://github.com/perl6/tablets/commit/5e6e147c84

[15:01] <moritz> lichtkind: sort of :-)

[15:02] <lichtkind> moritz: these jokes will one day you you all, especially masak :)

[15:02] <sisar> so how much IEEE 754 -2008 conformation should I expect in P6 ?

[15:02] <masak> lichtkind: :P

[15:02] * masak .oO( what have I done now...? ) :P

[15:02] <moritz> sisar: as much as makes sense

[15:03] <masak> lichtkind: also, `sort &leg, @input` might be a useful intermediary step to showcase.

[15:03] *** eviltwin_b joined
[15:03] <masak> lichtkind: the first form you have is very p5-y, and the second form is very p6-y. but my suggested form is a bit of both.

[15:03] <sisar> ok. so the 754 standard says that sqrt(-0) should be -0 not, +0 ...

[15:03] <moritz> erm, sort &infix:<leg> ?

[15:03] <sisar> r: say sqrt(-0);

[15:03] <p6eval> rakudo 2a962e: OUTPUT«0␤»

[15:03] <masak> erm. yes.

[15:04] <masak> so &[leg] would also work.

[15:04] <lichtkind> masak: thats an excellent idea

[15:04] <masak> \o/

[15:04] <masak> you see. I don't just pun and tease :P

[15:04] * moritz is disappunted

[15:05] * masak is disteased

[15:06] *** allbery_b left
[15:06] <masak> sisar: also, http://www.cs.berkeley.edu/~wkahan/JAVAhurt.pdf

[15:06] <masak> read those two, and you'll be fine.

[15:07] <masak> sisar: whenever I give a course and it makes sense to say it, I tell people never to write a banking or accounting app with floating-point values for currency. I hope that this makes a little dent in the world.

[15:08] <sisar> masak, thanks. looks really good. maybe reading the IEEE standard directly will make me insae-nish :p

[15:09] *** brrt joined
[15:09] <masak> I've never tried that.

[15:09] <masak> I just used Java enough to have a feel for how it works.

[15:09] <sisar> masak, "give a course"? You teach?

[15:10] <sisar> masak, Java is fully 754 compliant ?

[15:10] <masak> sisar: I teach. I think I gave about 10 courses in 2011.

[15:11] <masak> sisar: I think Java floating-point numbers aim towards full IEEE 754 compatibility, yes.

[15:12] <masak> sisar: I work for http://edument.se/ -- we develop software, learn cool things about software, and then teach them. :)

[15:12] *** mucker joined
[15:12] <masak> we're very Perl 6-friendly.

[15:13] <sisar> masak, oh now i remember. I read your "menatl bug report system" on the companies blog. Really loved that

[15:13] <sisar> *mental

[15:13] <masak> thanks.

[15:14] *** jaldhar joined
[15:14] <sisar> i started to classify my mental bugreports into, amnesia, feature-needed, needs-confirmation, etc... :p

[15:15] <masak> that sounds quite different to what I wrote about, but nevertheless interesting.

[15:15] *** brrt left
[15:15] <sisar> masak, i was just extending the concept for fun :)

[15:16] <sisar> as in, how cool would it be if had a bug report management for my brain !

[15:16] <masak> you make a really good point.

[15:16] <masak> I for one wouldn't mind better brain management to make me effective and stuff.

[15:17] <sisar> exactly !

[15:17] <masak> I hear there are focus-increasing drugs these days.

[15:18] <sisar> i'm gonna try this out sometime, i'll set up a mental bug management system. Will really help with my amnesia !

[15:18] * sisar tries to avoid any types of drugs

[15:19] *** isBEKaml left
[15:19] <masak> well, me too. I haven't tried any of that.

[15:19] <dalek> tablets: b33d190 | (Herbert Breunung)++ | docs/appendix-a-index.txt:

[15:19] <dalek> tablets: polish sort entry; masak++

[15:19] <dalek> tablets: review: https://github.com/perl6/tablets/commit/b33d190085

[15:19] <sisar> .oO ( maybe i'll allow other people, like my family to file bugs too ! ;-) )

[15:20] * sisar afk

[15:20] * masak .oO( "you can't just file 'you're wrong!', you have to give steps to reproduce the mental bug! )

[15:21] <masak> er, s/ \)/" )/

[15:21] <sisar> hehe...

[15:21] * sisar really afk

[15:28] *** havenn left
[15:38] <masak> n: my $f1 = 1; my $f2 = 1; for ^20 { ($f1, $f2) = ($f2, $f1 + $f2); say $f2 / $f1 }

[15:38] <p6eval> niecza v16-23-gaa61ed5: OUTPUT«2␤1.5␤1.6666666666666667␤1.6␤1.625␤1.6153846153846154␤1.6190476190476191␤1.6176470588235294␤1.6181818181818182␤1.6179775280898876␤1.6180555555555556␤1.6180257510729614␤1.6180371352785146␤1.618032786885246␤1.6180344478216819␤1.6180338134001253␤1.61803405572…

[15:39] <tadzik> UncleFester6: still around?

[15:39] <masak> n: my $f1 = 1; my $f2 = 1; my $last_val = 0; for ^20 { ($f1, $f2) = ($f2, $f1 + $f2); last if $last_val == $f2 / $f1; $last_val = $f2 / $f1 }; say $last_val

[15:39] <p6eval> niecza v16-23-gaa61ed5: OUTPUT«1.618033985017358␤»

[15:39] <masak> n: my $f1 = 1; my $f2 = 1; my $last_val = 0; loop { ($f1, $f2) = ($f2, $f1 + $f2); last if $last_val == $f2 / $f1; $last_val = $f2 / $f1 }; say $last_val

[15:39] <p6eval> niecza v16-23-gaa61ed5: OUTPUT«1.6180339887498949␤»

[15:43] <UncleFester6> Hi tadzik

[15:43] <tadzik> hello

[15:44] <tadzik> so, want to look at module smoketesting?

[15:44] <UncleFester6> yes

[15:44] <tadzik> okay. The thing you can do right now is to clone the panda repository and run bin/masstest

[15:44] *** uvtc joined
[15:45] <tadzik> that should take some time (20 minutes on my machine), and produce an index.html which will look somewhat like this: http://tjs.azalayah.net/new.html

[15:45] <tadzik> oh, I was to re-run it

[15:45] <UncleFester6> Thanks - will try to look at it in the next few days

[15:45] <tadzik> that will be most appreciated

[15:46] <tadzik> the plan I have for this thing is to produce some JSON data we can process easily, and possibly include on modules.perl6.org

[15:46] *** mucker left
[15:47] <uvtc> Yow. With R* 2012.04,

[15:47] <uvtc> $ perl6 --doc=HTML foo.pl

[15:47] <uvtc> ===SORRY!===

[15:47] <uvtc> Could not find Pod::To::HTML in any of: /home/john/.perl6/lib, /home/john/opt/rakudo-star-2012.04/install/lib/parrot/4.3.0/languages/perl6/lib, .

[15:47] <uvtc> That didn't make it in to R*?

[15:47] <tadzik> apparently

[15:47] <tadzik> try panda install Pod::To::HTML

[15:48] *** JimmyZ left
[15:48] *** Psyche^ joined
[15:49] <uvtc> Yeah, I realize I can install it myself. Seems like it ought to come with R* though.

[15:49] *** plobsing joined
[15:51] <uvtc> tadzik, thanks.

[15:51] <tadzik> certainly

[15:51] * uvtc filed an R* issue for it

[15:52] *** Patterner left
[15:52] *** Psyche^ is now known as Patterner

[15:52] <tadzik> no need

[15:52] <dalek> star: 545b928 | tadzik++ | / (2 files):

[15:52] <dalek> star: Add Pod::To::HTML

[15:52] <dalek> star: review: https://github.com/rakudo/star/commit/545b928118

[15:52] <tadzik> uvtc++

[15:52] <uvtc> Now we're cookin' with gas!

[15:52] <uvtc> :)

[15:56] <dalek> tablets: cf4967b | (Herbert Breunung)++ | docs/appendix- (2 files):

[15:56] <dalek> tablets: preparing links of the topic of contexts to point to according planned glossary entries

[15:56] <dalek> tablets: review: https://github.com/perl6/tablets/commit/cf4967be15

[15:56] <lichtkind> uvtc: hai

[15:57] * masak .oO( shark )

[15:57] <tadzik> :)

[15:57] <uvtc> lichtkind, shark and hello

[15:58] <uvtc> (How do I ask the bot here to translate words from one human language to another?)

[15:58] <moritz> phenny: de en "hai"?

[15:58] <phenny> moritz: "shark" (de to en, translate.google.com)

[15:58] <tadzik> shark thar!

[15:59] <lichtkind> uvtc: any comments on recent developement?

[15:59] *** allbery_b joined
[16:00] <uvtc> Hi lichtkind, Sorry, I haven't been following recent Tablets development very closely. What's new?

[16:00] <uvtc> moritz, thanks.

[16:00] <uvtc> phenny: en de "hai"?

[16:00] <phenny> uvtc: "hai" (en to de, translate.google.com)

[16:01] <uvtc> phenny: en de "shark"?

[16:01] <phenny> uvtc: "Hai" (en to de, translate.google.com)

[16:02] *** eviltwin_b left
[16:02] <masak> phenny: en de "orca"?

[16:02] <phenny> masak: "orca" (en to de, translate.google.com)

[16:03] <lichtkind> uvtc: too much to say :)

[16:03] <masak> phenny: en de "killer whale"?

[16:03] <phenny> masak: "Killerwal" (en to de, translate.google.com)

[16:03] <masak> fair enough.

[16:04] <uvtc> lichtkind, Well, I see you're still using my low-contrast colorscheme, so at least masak is happy. :P

[16:05] <uvtc> tadzik, when having panda install Pod::To::HTML, I get one warning:

[16:05] <uvtc> ==> Building Pod::To::HTML

[16:05] <uvtc> use of uninitialized value of type Any in string context  in method Str at src/gen/CORE.setting:670

[16:06] <masak> uvtc: I read the github.com commits. github has a decent color scheme :P

[16:07] <tadzik> uvtc: I don't know where does that come from :P

[16:07] <sisar> uvtc, tadzik++ fixed it recently. Do you have a recent rakudo ?

[16:07] <whiteknight> moritz: Okay, I'll go re-look at it all

[16:07] <uvtc> sisar, R*

[16:07] <uvtc> sisar, 2012.04

[16:07] <tadzik> should be fine

[16:07] <tadzik> http://tjs.azalayah.net/new.html new test results

[16:07] <tadzik> colomon: here are your greens :)

[16:08] <sisar> uvtc: oh. ok. Then i don't know :)

[16:08] <tadzik> may be a Pod::To::HTML thing

[16:08] <uvtc> sisar, thanks.

[16:08] <moritz> tadzik: there's something wrong

[16:09] <moritz> tadzik: URI is all green

[16:09] <tadzik> shouldn't it?

[16:09] <moritz> tadzik: but it says LWP::Simple fails on prerequs

[16:09] <tadzik> oh

[16:09] <moritz> Dependency resolution has failed: stage test failed for URI

[16:09] <tadzik> wrong indeed

[16:10] <tadzik> seems that URI tests are non-deterministic :/

[16:10] <masak> &

[16:10] <tadzik> they indeed suceeded while building URI, and then failed while building LWP::Simple

[16:10] <tadzik> now I did two 'panda install URI' runs in a row, one failed, one passed

[16:13] <moritz> tadzik: what's the test failure?

[16:13] <tadzik>   Non-zero wait status: 11

[16:13] <tadzik>   Parse errors: No plan found in TAP output

[16:14] <tadzik> I'll run just this one

[16:14] <lichtkind> uvtc: backlings are almost ready many new terms were much more complete, formating of index is consolidating

[16:14] *** eviltwin_b joined
[16:14] <tadzik> maybe a segfault :/

[16:15] *** tyatpi joined
[16:15] <tadzik> ok, nailed it. It sometimes, depending on a mood, dies with No object at index 73

[16:16] <tadzik> depeding on a precompilation, actually. As if precompilation was non-deterministic

[16:17] *** allbery_b left
[16:17] <tadzik> now I've had a fail -> rebuild -> fail -> rebuild -> pass cycle

[16:18] *** rindolf joined
[16:20] *** rindolf left
[16:20] *** rindolf joined
[16:22] <uvtc> tadzik, I notice that Pod::To::HTML renders I<this> as <strong>this</strong>, and B<this> as <mark>this</mark>. Curious: why did you choose those instead of I<this> --> <em> and B<this> --> <strong>?

[16:23] <tadzik> uvtc: I didn't, ask flussence :)

[16:24] <tadzik> he did most of Pod::To::HTML

[16:25] *** whiteknight left
[16:26] <rindolf> Can I get help with Perlito5 here?

[16:27] <moritz> rindolf: if you happen to meet fglock, maybe

[16:27] <rindolf> moritz: ah.

[16:27] <uvtc> phenny, tell flussence http://irclog.perlgeek.de/perl6/2012-04-29#i_5514927 , (maybe enable issue tracker for that repo?)

[16:27] <phenny> uvtc: I'll pass that on when flussence is around.

[16:28] *** timotimo left
[16:33] *** UncleFester6 left
[16:36] *** fgomez joined
[16:42] *** tyatpi left
[16:44] *** uvtc left
[16:49] <dalek> tablets: f137f81 | (Herbert Breunung)++ | docs/report.pl:

[16:49] <dalek> tablets: report now also includes anchors and links and otehr appendices

[16:49] <dalek> tablets: review: https://github.com/perl6/tablets/commit/f137f81feb

[16:49] <dalek> tablets: 7fd2e73 | (Herbert Breunung)++ | docs/appendix- (3 files):

[16:49] <dalek> tablets: appendix B is now completely backlinked (where it makes sense) precedence table might also be linked

[16:49] <dalek> tablets: review: https://github.com/perl6/tablets/commit/7fd2e73fe0

[16:52] *** uvtc joined
[16:53] <uvtc> I see that I can get a listing of all, say, Str() methods by doing: `Str.^methods`. Is there yet any way to get Pod docs (if they exist) for a given Str methods, for example, something like, `doc(Str.comb)`?

[16:56] <tadzik> you could do Str.^find_method('comb')[0].WHY or such, but unfortunately, CORE is not documented at all for now

[16:56] <tadzik> and I'm not sure if it's possible yet (circularity, bla bla)

[16:58] <uvtc> Hm. So it's possible to use Pod to document individual methods, and conceivable that Str.^find_method('comb')[0].WHY would display that documentation.

[16:58] <benabik> r: Str.comb.WHAT.say

[16:58] <p6eval> rakudo 2a962e: OUTPUT«use of uninitialized value of type Str in string context  in method Str at src/gen/CORE.setting:670␤␤List()␤»

[16:58] <uvtc> but it's NYI.

[16:58] <uvtc> Ok.

[16:58] <tadzik> right

[16:59] <uvtc> Is anyone working on writing perldocs? Like Perl 5-style perldocs that you could run via `perl6 --doc perlstring` or somesuch?

[16:59] *** oiig_ left
[16:59] <tadzik> I was thinking about starting doing that

[17:00] <masak> \o/

[17:00] <uvtc> tadzik, I think that would be a *very good thing* (tm)

[17:00] *** tyatpi joined
[17:00] <tadzik> well, so much for a Secret Project :P

[17:00] <uvtc> Indeed. Sorry about that.

[17:00] <tadzik> I'm still thinking about it, but tuitage is low

[17:00] <tadzik> no worries ;)

[17:01] <tadzik> I was planning this before getting $job and all

[17:01] <uvtc> I think it's essential though. And I also suspect that others may consider it their secret project as well. They might even be ... among us.

[17:01] *** allbery_b joined
[17:02] *** eviltwin_b left
[17:02] <dalek> nqp/toqast: 6f1b074 | masak++ | / (3 files):

[17:02] <dalek> nqp/toqast: added bigint conversion op

[17:02] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/6f1b074724

[17:02] *** sergot left
[17:04] <moritz> uvtc: fwiw I have started or particpated in multiple such attempts

[17:04] <moritz> uvtc: which all starved, because nobody joined in, and eventually I moved on to different projects

[17:04] <uvtc> moritz, Right. This topic has come up before. (I may have been the one to bring it up one of those times).

[17:05] <uvtc> moritz, were they placed under the github.com/perl6 umbrella?

[17:06] <masak> documentation is tiring, thankless, and a huge undertaking.

[17:06] <TimToady> it's likely that the specs should evolve into those docs

[17:06] * TimToady goes back to hiding behind a 鮫

[17:06] * masak .oO( Shang Hai )

[17:07] <tadzik> Shang Shark!

[17:07] <uvtc> It's "hai week" on the discovery channel!

[17:07] <tadzik> :)

[17:07] <TimToady> phenny: jp en "hai"?

[17:07] <phenny> TimToady: "two" (vi to en, translate.google.com)

[17:07] <masak> 'vi'?

[17:07] <TimToady> phenny: ja en "hai"?

[17:08] <phenny> TimToady: "hai" (ja to en, translate.google.com)

[17:08] <TimToady> er...

[17:08] <TimToady> phenny: en ja "lung"?

[17:08] <phenny> TimToady: "肺" (en to ja, translate.google.com)

[17:08] <masak> when GT gets confuzzled, it defaults to preserving the original word.

[17:09] <TimToady> hai doesn't just mean "yes" in Japanese

[17:09] <masak> hai.

[17:09] <TimToady> lung, ash at least

[17:09] <TimToady> or actor, or 'put on a sword'

[17:09] <TimToady> or "high"  :)

[17:11] <TimToady> vi is obviously the language they speak in the Virgin Islands...

[17:11] <masak> in Mandarin: ocean, still/yet, to harm, *sigh*, alas, hey, *lol*, (excalamation of regret), child, helium, hydroxylamine, minced meat, tainted food, to astonish, bones of the body.

[17:11] <TimToady> well, with different tones, so that's cheating :)

[17:11] <masak> (fewer if you know the tone) :P

[17:14] <TimToady> funny that "lung" is written as "market meat"

[17:15] <masak> well, that left component may not be meat.

[17:15] *** irfan joined
[17:15] <irfan> hi

[17:15] <masak> hi, irfan.

[17:15] <irfan> I am runnign Mac OS and would like to use Perl6

[17:15] <masak> TimToady: though it probably is, considering the word.

[17:15] <masak> irfan: great! good luck!

[17:15] <irfan> I also got perl 5.14 installed on my machine

[17:15] <TimToady> that's how Unicode classifies it

[17:16] <irfan> does Perl6 installation will go into the same dir's?

[17:16] <TimToady> but yeah, meat/moon is often ambiguous

[17:16] <masak> yeah, and confused through history.

[17:16] <jnthn> .oO( Everyone knows the moon's made of meat... )

[17:16] <masak> irfan: yes, unless you set environment variables.

[17:16] <masak> or, um, Configure.pl flags, rather.

[17:16] <tadzik> irfan: no, it won't

[17:16] <irfan> what should I do to avoid it

[17:16] <tadzik> oh, wait

[17:17] <irfan> tadzik are you sure?

[17:17] *** birdwindupbird left
[17:17] <tadzik> well, now I'm not

[17:17] <tadzik> I'd bet it goes to Parrot dirs, which doesn't go to Perl 5 dirs

[17:18] <irfan> ok, let me try and confirm it back

[17:18] <tadzik> what Perl 6 are you installing?

[17:18] *** eviltwin_b joined
[17:21] <irfan> getting it from http://rakudo.org/how-to-get-rakudo/

[17:22] *** allbery_b left
[17:22] <tadzik> ok, cool

[17:22] <uvtc> masak, Yes, I agree that writing docs is tiring, thankless, and a huge undertaking. They're also time-consuming (to get wording (and speling) right) and difficult because sometimes you write something really great and someone else comes in and changes it in a way that you think botches it up.

[17:22] <uvtc> I suspect a winning combination for docs right now may be this:

[17:23] <uvtc> (A) create a github.com/perl6/perldocs project,

[17:23] <moritz> uvtc: some was in the mu (then pugs) repository

[17:23] <colomon> tadzik: I don't actually see any changes in the modules I have been looking at?

[17:23] <uvtc> moritz, perhaps those could be culled for useful bits and added to perl6/perldocs

[17:23] <uvtc> (B) keep it brief at first (have guidelines in the perl6/perldocs/README.md), mostly blocks of code examples showing commonly-needed functionality, with brief explanations interspersed as-needed

[17:24] <uvtc> (C) get at least a few of them partially written (perlstring, perlarry, perlhash)

[17:24] <uvtc> (D) make sure `perl6 --doc perlstring` can find them.

[17:24] <uvtc> (E) get them included in the next R*

[17:24] <uvtc> (F) parts of the Synopses could gradually find their way into the perldocs

[17:24] <moritz> hugme: add uvtc to star

[17:24] <hugme> moritz: You need to register with freenode first

[17:24] <uvtc> Personally, I'm not crazy about this because the docs wouldn't be in Markdown :), but it seems to me like the way forward for Perl 6 ... unless some prolific doc writer is planning a grand unveiling of heretofore unseen skunk-works docs.

[17:24] <moritz> hugme: add uvtc to star

[17:24] * hugme hugs uvtc. Welcome to star!

[17:25] <moritz> uvtc: you should now have commit access to rakudo/star. If not, please tell me

[17:25] <uvtc> What's ... happening to ... me .... feeling of power surging through ... my veins... must be another ... commit bit.

[17:25] <moritz> :-)

[17:27] <irfan> error: pathspec 'nqp/2012.04.1-1-gedd14da' did not match any file(s) known to git.

[17:27] <irfan> while building rakudo getting above error

[17:28] <uvtc> There's people all over writing docs. There's lots of content from blog posts that could be condensed down and used, there's advent calendar articles, blog posts by moritz, masak, szabgab, colomon, others. There's the Tablets which already have some proto-perldoc content in them...

[17:31] *** geekosaur joined
[17:32] <moritz> irfan: which rakudo are you building, what commands did you run?

[17:32] <moritz> irfan: cd nqp; git fetch;  # might or might not solve the problem

[17:34] *** eviltwin_b left
[17:34] <irfan> best one download https://github.com/downloads/rakudo/star/rakudo-star-2012.04.tar.gz

[17:35] <irfan> and run perl Configure.pl with dir of choice

[17:35] <moritz> what does "with dir of choice" mean?

[17:35] *** icwiener joined
[17:36] <irfan> i.e. perl Configure.pl  --prefix=<DIR> --gen-parrot --gen-nqp

[17:36] * moritz tries to reproduce

[17:36] <irfan> this will avoid clash with any existing Perl version running in system

[17:41] <moritz> hm, local copy now builds NAQP, and no such error has occured so far. Curious.

[17:41] <irfan> were u running mac os x

[17:42] <irfan> mine is 10.7.3

[17:47] *** geekosaur left
[17:49] *** geekosaur joined
[17:53] <dalek> star: d45be1b | (John Gabriele)++ | skel/README:

[17:53] <dalek> star: Made in clear in the README where the install/ dir is.

[17:53] <dalek> star: review: https://github.com/rakudo/star/commit/d45be1b558

[17:55] <sorear> good * #perl6

[17:59] <uvtc> If I close an issue at github, how do I link to the relevant commit without having to paste in the entire url for it?

[17:59] <benabik> Just give the SHA-1, abbreviated or whole.

[18:00] <benabik> Also, if you refer to the issue in the commit message, it will be linked to automatically.

[18:00] <uvtc> Oh, nice. Thanks, benabik.

[18:00] <sorear> and if you refer to it using the special syntax (closes #NNN), it will be closed automatically

[18:01] <uvtc> benabik, wait, how do I refer to the issue in the commit message? Using #NNN?

[18:01] <benabik> Yes.

[18:01] <uvtc> Great. Thanks again.

[18:11] *** eviltwin_b joined
[18:12] <irfan> make rakudo-spectest failed

[18:13] <irfan> Files=636, Tests=19464, 1325 wallclock secs ( 4.46 usr  2.54 sys + 1090.72 cusr 108.45 csys = 1206.17 CPU) Result: FAIL

[18:13] <moritz> irfan: can you please paste the summary above that line? (into a nopaste service like gist.github.com)

[18:14] *** geekosaur left
[18:14] <irfan> Test Summary Report ------------------- t/spec/S02-magicals/args.t                              (Wstat: 256 Tests: 3 Failed: 0)   Non-zero exit status: 1   Parse errors: Bad plan.  You planned 4 tests but ran 3. t/spec/S02-magicals/pid.t                               (Wstat: 256 Tests: 0 Failed: 0)   Non-zero exit status: 1   Parse errors: Bad plan.  You planned 1 tests but ran 0. t/spec/S02-names-vars/perl.rakudo                       

[18:16] <masak> looks familiar.

[18:16] <masak> I think it might be something to do with the Mac OS X platform.

[18:16] <moritz> and/or locales

[18:18] <moritz> wait no, wrong failing tests for locale issues

[18:21] *** tyatpi left
[18:24] *** irfan left
[18:37] *** geekosaur joined
[18:40] *** eviltwin_b left
[18:40] *** eviltwin_b joined
[18:40] <masak> n: .say for "foo(); bar++baz".split(/<|w>/)

[18:40] <p6eval> niecza v16-23-gaa61ed5: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Action method assertion:sym<|> not yet implemented at /tmp/zO4NP4bJH7 line 1:␤------> [32m.say for "foo(); bar++baz".split(/<|w[33m⏏[31m>/)[0m␤␤Unhandled exception: Unable to resolve method oplift in class Any␤  at /home…

[18:43] *** geekosaur left
[18:43] <moritz> is that the new(ish) word boundary syntax?

[18:47] *** birdwindupbird joined
[18:54] <sorear> yes

[19:02] *** havenn joined
[19:10] *** tyatpi joined
[19:10] <uvtc> Regarding my comments earlier about creating a github.com/perl6/perldocs repo, I think I was on the wrong track. Please disregard them. TimToady is right --- the specs will probably evolve into Perl 6 perldocs.

[19:10] *** rindolf left
[19:12] <tadzik> colomon: I think Testing is all green now

[19:14] *** fgomez left
[19:14] *** brrt joined
[19:20] *** ggoebel__ left
[19:21] *** ggoebel__ joined
[19:23] <sorear> masak: ping

[19:24] <moritz> runtime/parrot/include/ has lots of generated pasm files

[19:24] <[Coke]> ww.

[19:25] *** fgomez joined
[19:29] *** thou joined
[19:33] *** uvtc left
[19:35] *** allbery_b joined
[19:36] *** thou left
[19:38] *** eviltwin_b left
[19:46] *** tyatpi left
[19:47] <lichtkind> alias vor qx is gone ```?

[19:47] <lichtkind> alias vor qx is gone ```?i mean the p5 eval quotes

[19:48] <moritz> backticks are gone, yes

[19:50] <sorear> phenny: de "vor"?

[19:50] <phenny> sorear: "before" (de to en, translate.google.com)

[19:51] <moritz> I think lichtkind just meant 'for'

[19:51] <huf> pronounced nearly the same, so it should do :)

[19:52] <huf> okay... they maybe share one sound out of three :D

[19:53] *** xinming left
[19:53] *** ggoebel__ left
[19:54] <[Coke]> more if you speak a germanic language.

[19:54] *** ggoebel__ joined
[19:54] *** fglock joined
[19:54] <huf> [Coke]: doesnt german have a different r than english? and isnt the o in the german vor a different other o than the one in for in english?

[19:55] *** xinming joined
[19:58] <colomon> tadzik: you're right.  hmm.... I know I deleted Math::BigInt from the ecosystem days ago...

[19:58] <tadzik> hmm

[19:58] <sorear> o/ colomon

[19:59] <colomon> \o

[19:59] <tadzik> it

[19:59] <tadzik> 's still in the projects.json I have 

[19:59] <lichtkind> mäsak understand me :)

[19:59] <tadzik> ah, I saved the new one as projects.json.1 :/

[19:59] * tadzik reruns

[20:01] <dalek> tablets: 6835586 | (Herbert Breunung)++ | docs/appendix-b-grouped.txt:

[20:01] <dalek> tablets: optimize quoting ops table

[20:01] <dalek> tablets: review: https://github.com/perl6/tablets/commit/68355860f1

[20:02] <tadzik> ah, I can't really rerun it now. I will in an hour or so

[20:02] <tadzik> unless someone wants to do it :)

[20:13] *** brrt left
[20:13] *** kaare_ left
[20:17] *** PacoAir left
[20:19] *** PacoAir joined
[20:20] *** PacoAir left
[20:29] *** PacoAir joined
[20:30] *** fglock left
[20:41] *** thou joined
[20:41] <lichtkind> ordered things are derive from Seq right?

[20:42] <moritz> Seq is dead.

[20:43] <lichtkind> moritz: nobody told me + its still in spec

[20:43] <lichtkind> moritz: is iterator the new seq?

[20:43] <lichtkind> and why o why seq had to die?

[20:45] <moritz> we used to believe that user would practically never see a Parcel

[20:46] <moritz> and a Parcel assigned to a scalar becomes a Seq

[20:46] <moritz> but, it turns out that no matter how we do things, Parcels always leak out the user

[20:46] <moritz> so it seems simpler to just expose them, and remove the Parcel -> Seq magic

[20:47] <lichtkind> ah and seq will remain as a role or completely go?

[20:47] <moritz> probably go completely

[20:47] * jnthn expects the same as moritz 

[20:48] <jnthn> I'm glad the Parcel -> Seq magic went away too.

[20:48] <TimToady> Seq was supposed to be a "tuple" type, but tuples will likely end up being readonly shaped arrays rather than Seq

[20:49] <sorear> moritz: yet we still have magic in the same place, for Nil

[20:49] <moritz> sorear: aye

[20:50] <moritz> sorear: I'd rather remove that magic too, and let the undefine() function handler it

[20:51] <moritz> OTOH I see why that magic might be a good idea

[20:53] <arnsholt> jnthn: Is there a simple way to load the dyncall ops from NQP?

[20:54] <jnthn> arnsholt: --vm-libs=nqp_dyncall or some such as a command line fag to nqp

[20:54] <jnthn> *flag

[20:54] <jnthn> arnsholt: Then remember to call the init op (first one in nqp_dyncall.ops)

[20:54] <sorear> moritz: I don't like the way that "$x = $y" is non-transparent to Nil values, and this behavior has bitten me in the past

[20:55] <sorear> Nil cannot be passed through type-oblivious data-rearranging functions

[20:55] <lichtkind> i found never Seq a good name

[20:55] <lichtkind> too short and cryptic

[20:56] <moritz> S04 still talks about "Slice context". Does that still exist? or has it been replaced by LoL context?

[20:57] <arnsholt> jnthn: Cheers. I'm working on adding the CStr repr, and I think I destroyed something, since the Rakudo build suddenly fails =)

[20:57] <lichtkind> so SeqIter will die too?

[20:57] <jnthn> Yes, together with all the non-SeqIter puns

[20:58] <lichtkind> moritz: im currently burring Seq in the spec

[20:58] <lichtkind> push will come soon

[20:58] <lichtkind> jnthn: RangeIter too ?

[20:58] *** ggoebel__ left
[20:59] *** ggoebel__ joined
[20:59] <jnthn> lichtkind: RangeIter is gone, but only because Range itself can serve as a perfectly good iterator.

[20:59] <jnthn> lichtkind: GatherIter, MapIter and ListIter live on.

[21:00] <TimToady> how can Range serve as an iterator if it's immutable?

[21:00] <jnthn> Because iterators are immutable.

[21:00] <arnsholt> Huh. Just looks like it can't resolve the lib. Weird

[21:00] <arnsholt> Something to do for tomorrow I suppose

[21:00] <arnsholt> G'night

[21:01] <jnthn> 'night, arnsholt 

[21:01] <lichtkind> jnthn: GatherIter never were in the spec so i dont care :9

[21:02] <lichtkind> TimToady: so rangeiter stays?

[21:03] <lichtkind> phenny: tell masak "look into S02 #Backslash sequences - the is a bell"

[21:03] <phenny> lichtkind: I'll pass that on when masak is around.

[21:04] <lichtkind> TimToady: the snippets containing Seq i will not touch because i dont undertand them the rest will be gone in 10 min

[21:08] *** icwiener left
[21:09] *** havenn left
[21:14] <dalek> specs: e8134eb | (Herbert Breunung)++ | S (4 files):

[21:14] <dalek> specs: officially burry Seq, DANGER: some snippets are still in S02 S09 S32/container and numeric

[21:14] <dalek> specs: review: https://github.com/perl6/specs/commit/e8134ebd4f

[21:18] *** birdwindupbird left
[21:18] *** tyatpi joined
[21:24] <dalek> tablets: f274a07 | (Herbert Breunung)++ | docs/appendix- (3 files):

[21:24] <dalek> tablets: fixing B tables and polish ++ and --

[21:24] <dalek> tablets: review: https://github.com/perl6/tablets/commit/f274a07705

[21:24] <dalek> tablets: 203dfa8 | (Herbert Breunung)++ | docs/ (3 files):

[21:24] <dalek> tablets: delete Seq, its still insome signatures but spec has to lead the way

[21:24] <dalek> tablets: review: https://github.com/perl6/tablets/commit/203dfa88d2

[21:29] *** timotimo joined
[21:29] *** PacoAir left
[21:30] *** PacoAir joined
[21:31] *** [particle] left
[21:38] *** MayDaniel joined
[21:44] *** sergot joined
[21:45] *** PacoAir left
[21:46] *** sergot left
[21:57] *** [particle] joined
[21:59] *** MayDaniel left
[22:06] *** aloha left
[22:06] *** UncleFester6 joined
[22:07] *** aloha joined
[22:07] <UncleFester6> tadzik: ping

[22:08] *** rsimoes joined
[22:10] *** UncleFester6 left
[22:11] *** thou left
[22:20] <masak> sorear: pong

[22:20] <phenny> masak: 21:03Z <lichtkind> tell masak "look into S02 #Backslash sequences - the is a bell"

[22:20] * masak looks

[22:20] <masak> lichtkind: well, then. that's the answer to your question.

[22:21] <masak> lichtkind: but my point still stands. unless the spec explicitly *undefines* \a, Perl 6 has \a because Perl 5 has \a :)

[22:27] <sorear> masak: release tomorrow!  Did you say you wanted to be involved?

[22:27] <masak> ooh

[22:27] <masak> yeah, let's.

[22:27] <masak> I'll have some time for that tomorrow.

[22:44] *** uvtc joined
[22:44] <uvtc> masak, hi

[22:46] <uvtc> Oh, it must be quite late where you are. Will try again another time.

[22:46] <masak> I'm here.

[22:47] <diakopter> I don't see you

[22:47] *** rualdo11 joined
[22:47] <lichtkind> uvtc: there is one majo disadvantage for designs like http://tablets.perl6.org/appendix-b-grouped.html#quoting-ops that the lines get 180 chars long

[22:47] <masak> diakopter: in the online experience, we establish a metaphor wherein we borrow real-world concepts into the digial domain.

[22:47] <uvtc> masak, I think I found the remaining Perl 6 docs niche. Filling it here: http://wiki.perl6.org/Mostly%20Harmless%20Docs/Main

[22:48] <masak> ;)

[22:48] <uvtc> See what happens when it's shark week on #perl6?

[22:48] <masak> uvtc++

[22:48] * masak .oO( sharks pounce first, ask FAQs later )

[22:49] <sorear> masak: what will you be doing?  how can I help with it?

[22:49] <uvtc> lichtkind, at that point, maybe switch to multi-line table syntax.

[22:49] <masak> sorear: when do you think you'll be available tomorrow?

[22:50] <lichtkind> uvtc: no these look aweful

[22:50] <masak> sorear: I'll probably just get started on following the release guide, and if I hit a snag I'll ask you for assistance.

[22:50] <lichtkind> uvtc: in html all is fine just the sorcecode with the long links is 180 chars

[22:51] <uvtc> lichtkind, I don't recall the issue with multi-line tables. Maybe it's something some css could fix?

[22:51] <lichtkind> uvtc: no they go over full width and give even column with minimal content equal space

[22:51] <lichtkind> uvtc: im not sure if thats fixble

[22:52] <lichtkind> the appearance is fine just the rules of markdown syntax force us for single line tables write everathing in one line too which gets so long

[22:53] <sorear> masak: 1600-1800, 2300-0800, with fuzzy edges and a diner break

[22:53] <masak> gotcha.

[22:53] <uvtc> lichtkind, y'know, I've never tried using the grid table style. Maybe that renders more nicely?

[22:53] <masak> (is that dinner*, or will you go to an actual diner and take a break?)

[22:53] <uvtc> lichtkind, http://johnmacfarlane.net/pandoc/README.html#tables

[22:54] <sorear> hehehehe

[22:54] <uvtc> o/

[22:54] <sorear> o/

[22:54] *** uvtc left
[23:08] *** allbery_b left
[23:08] *** allbery_b joined
[23:12] *** NamelessTee left
[23:21] <masak> 'night, #perl6

[23:22] <lichtkind> good night

[23:22] <lichtkind> o/

[23:22] *** lichtkind left
[23:25] *** whiteknight joined
[23:27] *** whiteknight left
[23:30] *** whiteknight joined
[23:50] *** geekosaur joined
[23:51] *** eviltwin_b joined
[23:52] *** allbery_b left
[23:54] *** whiteknight left
[23:55] *** geekosaur left
[23:59] *** tyatpi left
