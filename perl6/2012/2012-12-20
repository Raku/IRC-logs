[00:05] *** slayer101_ joined
[00:07] *** fgomez joined
[00:12] <jnthn> 'night, #perl6

[00:13] <diakopter> o/

[00:15] *** slayer101_ left
[00:24] *** tomgj joined
[00:28] <tomgj> Howdy.  I've been having some trouble piecing together from public documents what kind of things it should be possible to declare in signatures using "returns" or -->

[00:29] *** cognominal_ joined
[00:29] <tomgj> This (admittedly marked out of date) describes it being very featureful http://www.dlugosz.com/Perl6/web/return.html

[00:30] <tomgj> but all the examples in roast an in the synopses seem to be limited to a single typed value.

[00:31] *** cognominal left
[00:37] *** bowtie left
[00:45] *** Juerd left
[00:45] *** Juerd joined
[00:50] *** thou left
[00:54] *** benabik joined
[00:55] <[Coke]> tadzik: tadzik 

[00:56] <[Coke]> tadzik: it is no longer broken. I cannot reproduce the error.

[01:03] *** cooper left
[01:05] *** slayer101_ joined
[01:07] *** benabik left
[01:11] *** cognominal_ left
[01:13] *** hypolin joined
[01:16] *** anuby joined
[01:27] *** benabik joined
[01:28] *** slayer101_ left
[01:33] *** slayer101_ joined
[01:41] *** slayer101_ left
[01:48] <[Coke]> me;

[01:49] *** slayer101_ joined
[01:56] <colomon> [Coke]: you;

[01:57] *** sbox left
[02:01] *** benabik left
[02:11] *** benabik joined
[02:13] *** hash_table joined
[02:21] *** hash_table left
[02:33] <timotimo> phenny: tell moritz that it'd be nice if you could click "summary" and then "previous page" in the irclog without having to re-click "summary" for every day

[02:33] <phenny> timotimo: I'll pass that on when moritz is around.

[02:35] <timotimo> also, it seems like the effort to summarise the perl6 channel talk has kind of died down. probably because it's too much work?

[02:37] *** hash_table joined
[02:45] *** WarmFemale joined
[02:45] *** WarmFemale left
[02:47] *** am0c joined
[03:00] *** sftp joined
[03:02] *** stopbit left
[03:09] *** Targen joined
[03:35] *** sftp left
[03:46] *** Psyche^ joined
[03:46] *** Psyche^ is now known as Patterner

[03:48] *** grondilu_ joined
[03:51] *** grondilu left
[04:02] *** hash_table left
[04:06] *** REPLeffect left
[04:07] *** benabik left
[04:19] *** REPLeffect joined
[04:23] *** jaldhar joined
[04:36] *** benabik joined
[04:54] *** mikemol left
[04:54] *** mikemol joined
[04:56] *** yakshavr left
[04:57] *** yakshavr joined
[05:04] *** uvtc joined
[05:07] *** jaldhar left
[05:09] *** jaldhar joined
[05:12] <uvtc> phenny: tell PerlJam thanks for the link to pmichaud's talk re. Lists and Parcels, though turns out that one was Part 2. I was looking for Part 1, which after a little bit of searching appears to be http://www.youtube.com/watch?v=mrfK1dtyD14

[05:12] <phenny> uvtc: I'll pass that on when PerlJam is around.

[05:13] *** benabik left
[05:13] *** kurahaupo left
[05:14] *** uvtc left
[05:14] *** benabik joined
[05:23] *** PerlPilot is now known as PerlJam

[05:24] <dalek> mu: df6526c | (Herbert Breunung)++ | misc/perl6advent-2012/schedule:

[05:24] <dalek> mu: Update misc/perl6advent-2012/schedule

[05:24] <dalek> mu: review: https://github.com/perl6/mu/commit/df6526c2f4

[05:30] *** slayer101_ left
[05:32] *** slayer101_ joined
[05:33] *** telex left
[05:35] *** telex joined
[05:38] *** sbox joined
[05:39] <PerlJam> phenny: tell uvtc, ah.  Thanks.  :-)

[05:39] <phenny> PerlJam: I'll pass that on when uvtc is around.

[05:39] <phenny> PerlJam: 05:12Z <uvtc> tell PerlJam thanks for the link to pmichaud's talk re. Lists and Parcels, though turns out that one was Part 2. I was looking for Part 1, which after a little bit of searching appears to be http://www.youtube.com/watch?v=mrfK1dtyD14

[05:51] <sbox> hi. Any documentation on mutually recursive classes?

[05:51] <benabik> It's a mistake, don't do it.  ;-)

[05:52] *** kurahaupo joined
[05:52] <sbox> let me clarify - class A has a method calling class B's constructor, and vice versa

[05:52] <sbox> is that what you thought I meant?

[05:53] <benabik> I thought I was being a small pain.  I think what you're looking for is a stub class.  class B {...}; class A { method foo() { B.new } }; class B { method bar { A.new } }  (IIRC)

[05:53] *** kaleem joined
[05:55] *** thou joined
[05:55] <sbox> ah cool. thanks :)

[05:56] <sbox> benabik: is that sort of thing regarded as bad practice? What did you mean by "mistake"?

[05:57] <benabik> sbox: I mostly meant that I have a poor sense of humor.  It's late.

[05:57] <sbox> kk :P

[05:57] <benabik> sbox: Although mutually dependent classes should be very carefully thought out.  Can get confusing easily.

[05:58] <benabik> Stub classes, AFAIK, are just a useful kind of circularity saw not code smell.

[06:06] <moritz> nr: say "I'm back (?)"

[06:06] <phenny> moritz: 02:33Z <timotimo> tell moritz that it'd be nice if you could click "summary" and then "previous page" in the irclog without having to re-click "summary" for every day

[06:06] <p6eval> rakudo 22518b, niecza v24-12-g8e50362: OUTPUT«I'm back (?)␤»

[06:13] <sorear> mutually dependant classes are an excellent example of (code smell) \ (always wrong)

[06:14] <sorear> in particular it's hard to do anything in the setting without them

[06:19] <sbox> what do you mean by "in the setting"?

[06:19] <moritz> the setting is the the collection of built-in stuff (routines, classes, roles etc.) that live in an outer scope of your program

[06:27] *** GlitchMr joined
[06:34] * jokar hello all

[06:34] <jokar> what is perl6 and what is difference between perl 5 and 6?

[06:34] <sorear> hello jokar

[06:34] <jokar> sorear:  Hi

[06:35] <jokar> sorear: why Perl 6 have own web site but Perl 5 not?

[06:35] <sorear> perl 6 is a comprehensive overhaul of perl 5, a new language from the same people intended to remove as many as possible of perl 5's warts

[06:35] <PerlJam> jokar: They are different languages that have some superficial syntactic similarity, but the same deep philosophical underpinings 

[06:35] <PerlJam> jokar: Perl 5 has perl.org and perl.com

[06:36] <jokar> PerlJam: it is loke python 2 and 3?

[06:36] <jokar> like*

[06:36] <jokar> PerlJam: Python 3X is a new version of Python 2X

[06:36] <sorear> like, but more so.

[06:37] <PerlJam> jokar: no.  The change differential is greater between Perl 5 and Perl 6 than between Python 2 and Python 3

[06:37] <sorear> compared to p6, py3k is very conservative

[06:37] <jokar> your mean is we have two version of perl

[06:37] <jokar> a line is Perl 5 and another line is Perl 6

[06:37] <PerlJam> jokar: two languages that are similar but different.

[06:37] <PerlJam> jokar: Just like C and C++ (for instance)

[06:37] <slayer101_> would you say perl6 is a superset of perl5? O.o

[06:37] <PerlJam> jokar: or Lisp and Scheme

[06:38] <jokar> PerlJam: How can i find Perl 6 developer?

[06:38] <PerlJam> slayer101_: no, I wouldn't say that.

[06:38] <jokar> I have some question about Perl6.org

[06:38] <PerlJam> jokar: this is the place to ask.

[06:38] <jokar> PerlJam: Can i send PM?

[06:39] <sbox> slayer101_: syntax for regexes, bitwise operators, loops and if statetments (to name a few) has changed from perl5.

[06:39] <sorear> jokar: most of the people in this room are perl 6 developers

[06:39] <slayer101_> sbox: didnt know that

[06:39] <PerlJam> jokar: you can, but I'll likely ignore it :)  What's wrong with talking on channel?

[06:40] *** dayangkun joined
[06:40] <slayer101_> how far along is perl6 these days?

[06:45] <PerlJam> slayer101_: There are about 4 implementations in various stages of development.

[06:45] <PerlJam> slayer101_: the two most active ones are Rakudo and Niecza

[06:46] *** adrian joined
[06:46] <PerlJam> slayer101_: actually, after thinking about it some, I might say that Perl 6 is an ideological superset of Perl 5.   Perl 6 has more useful ideas packed into the language.

[06:46] *** adrian is now known as Guest15318

[06:47] <benabik> PerlJam: + Pugs + ?

[06:47] <sorear> jokar: try typing "/whois sorear" without quotes into irc

[06:47] <popl> "/whois sorear" without quotes into irc

[06:48] <PerlJam> benabik: perlito

[06:48] <jokar> PerlJam: In your opinion we have not perl 7 in the next?

[06:48] <PerlJam> jokar: parse error.

[06:48] <popl> what does that even mean?

[06:49] <jokar> PerlJam: How can i take a permission for reserve a perl6 domain for my country?

[06:49] <PerlJam> er, what?

[06:49] <moritz> jokar: just do it

[06:49] <sorear> Ask someone from your country.

[06:49] <jokar> If i reserve it, Is it illegal ?

[06:50] <sorear> surely that depends on the laws of your country

[06:50] <sorear> as a general rule, though, governments have been amazingly slow at regulating the DNS

[06:50] <jokar> sorear: in your opinion all Perl user move to perl 6?

[06:50] <popl> sorear: They need to understand it first.

[06:52] <jokar> Is Perl 5 rare in the next?

[06:52] <popl> next what?

[06:52] <jokar> in the next year

[06:52] <sorear> I think jokar is asking if perl 6 is going to replace perl 5 i the long term

[06:53] <sorear> jokar: next year, perl 5 is pretty secure

[06:53] <popl> jokar: I don't think it will.

[06:53] <PerlJam> jokar: Are Scheme and Lisp both still around?  Perl 5 and Perl 6 will continue to coexist just like Lisp and Scheme or C and C++ , etc.

[06:53] *** kurahaupo left
[06:53] <sorear> jokar: perl 6 is not likely to replace perl 5 for most users for 5-10 years yet

[06:53] *** aloha left
[06:54] *** aloha joined
[06:54] <jokar> PerlJam:  Perl 7?

[06:54] <PerlJam> jokar: NST

[06:55] <sorear> :L

[06:55] <PerlJam> In 50 years or so I think Perl 6 will have replaced Perl 5 but mostly due to convergent evolution.

[06:55] <pmichaud> good morning, #perl6

[06:55] <sorear> (that was me attempting to exit vim and failing epically)

[06:56] <popl> sorear: That word is obsolete.

[06:57] <popl> It only shows up in Webster 1913.

[06:57] <sorear> I use the words I want to use and they mean what I want them to mean.

[06:57] <popl> What are you, Shakespeare?

[06:58] <PerlJam> popl: Where's your implementation of Perl 6?  ;>

[06:58] <sorear> Worse.  I'm a descriptive linguist.

[06:58] <pmichaud> I believe it was the Queen of Hearts who said that.  :-)

[06:59] <pmichaud> oh, wait, it was Humpty Dumpty

[07:00] <popl> PerlJam: I haven't written it yet, duh.

[07:00] <popl> sorear: neato

[07:00] <popl> pmichaud: I didn't knwo Humpty Dumpty said anything at all.

[07:01] <sorear> was Humpty Dumpty a Caroll character too?

[07:01] <pmichaud> http://en.wikipedia.org/wiki/Humpty_Dumpty#In_Through_the_Looking-Glass

[07:01] <popl> OH

[07:01] <popl> There

[07:01] <sorear> I thought that was one of the English folk songs from time immemorial

[07:01] <sorear> I see

[07:01] <popl> It is, sorear.

[07:02] <popl> all the kings horses...

[07:02] <popl> pmichaud: thanks

[07:02] <popl> John Tenniel is great.

[07:03] *** popl left
[07:12] *** sbox_ joined
[07:14] *** SamuraiJack joined
[07:15] *** sbox left
[07:19] *** GlitchMr left
[07:19] <sorear> sbox_: hmm, do we need a P-box now?

[07:20] <sbox_> not sure why my name changed...

[07:20] *** sbox_ is now known as sbox

[07:22] <sbox> sorear: haha. Actually my alias came about before I knew what s-boxes were.

[07:27] <sorear> sbox: normal IRC behavior.  your connection was lost, so your client automatically reconnected under a different name.

[07:28] *** jokar left
[07:29] <sbox> ohnoes - my noobness is showing =/   :P

[07:32] *** Patterner left
[07:34] <tadzik> masak++ # nice post :)

[07:34] <tadzik> good morning #perl6

[07:34] *** am0c left
[07:37] * sorear hugs sbox 

[07:37] <sorear> good morning tadzik

[08:17] *** FROGGS joined
[08:21] *** slayer101_ left
[08:21] *** Guest15318 left
[08:21] <FROGGS> morning

[08:39] *** kresike joined
[08:39] <kresike> hello all you happy perl6 people

[08:39] *** rollerpig joined
[08:40] *** rollerpig left
[08:41] <FROGGS> hi kresike 

[08:42] *** kresike left
[08:42] *** kresike joined
[08:42] <kresike> FROGGS, o/

[08:43] <kresike> ööö, note to self, Ctrl+w works different in xchat than it does in vim :)

[08:45] <moritz> Ctrl+w traditionally closes windows :-)

[08:47] <kresike> obviously I need more coffee !

[08:47] <sorear> hello all you kresikes

[08:47] <kresike> sorear, o/ :)

[08:48] *** hoelzro|away is now known as hoelzro

[08:48] <hoelzro> o/ #perl6

[08:56] <FROGGS> hello all you happy moritzes, sorears and hoelzros ;o)

[08:56] <hoelzro> ahoy FROGGS 

[08:58] <Su-Shee> good morning everyone :)

[08:59] <FROGGS> brb # christmas brunch at $work

[08:59] <moritz> good Su-Shee, morning

[09:00] <hoelzro> morgen Su-Shee 

[09:04] *** thou left
[09:25] *** Kharec joined
[09:32] <jnthn> god morgen, #perl6 :)

[09:32] <hoelzro> morning

[09:34] <hoelzro> so I managed to get make install DESTDIR=$dir working with Rakudo * last night

[09:34] <hoelzro> \o/

[09:34] <hoelzro> but I've encountered a fun new issue...

[09:35] <jnthn> yay, and uh-oh :)

[09:35] <hoelzro> the PIR files generated from precompiling the modules have a bunch of .annotate statements in them pointing to the package staging directory instead of where they'll be residing on disk

[09:35] <hoelzro> and they have hardcoded paths to their dependency PIR files

[09:36] <hoelzro> ex. "/home/rob/packages/rakudo-star/pkg/usr/lib/parrot/4.6.0/languages/perl6/lib/NativeCall.pir"

[09:36] <hoelzro> (from DBD::mysql)

[09:36] <hoelzro> so I'm wondering what would be the best way to solve that

[09:36] <hoelzro> also, I think I'm going to have to make a few changes to NQP; namely, allowing a user to tell NQP where to find dynext files as well as library files

[09:37] <hoelzro> this was the solution I had to resort to: https://github.com/hoelzro/rakudo-star/commit/977ee044e1bd04a9caae126001619ac4e75f1414

[09:37] <Su-Shee> tadzik: I'm getting an error when installing panda: No such method 'path' for invocant of type 'Any'

[09:38] <Su-Shee> panda is still THE module installer, isn't it? ;)

[09:41] <moritz> it is :-)

[09:42] *** Kharec left
[09:43] *** sbox left
[09:43] *** Psyche^ joined
[09:43] *** Psyche^ is now known as Patterner

[09:43] *** Kharec joined
[09:43] <Su-Shee> and it should work with any of the last let's say three rakudo stars?

[09:44] <moritz> well, each rakudo star comes with its own panda

[09:44] <moritz> and the shipped panda should work with the star it came with

[09:44] <Su-Shee> oh I already have panda!? ok.

[09:44] <jnthn> hoelzro: The .annotate stuff probably doesn't keep things from working since it's just used for error reporting. Where are you seeing the dependency paths?

[09:45] <jnthn> When I look at the compiled output for module loading it hasn't got hardcoded paths.

[09:46] <hoelzro> jnthn: I'm on a different machine at the moment, but I'll try to reproduce

[09:46] <Su-Shee> now that looks better: ==> Succesfully installed XML::Parser::Tiny

[09:46] *** sbox joined
[09:47] <hoelzro> huh.  apparently my fix for Rakudo * doesn't work on OS X

[09:48] <hoelzro> because of the case insensitive FS

[09:48] <hoelzro> well, all the more reason to add that feature to NQP =)

[09:49] *** dakkar joined
[09:50] <Su-Shee> masak_: a little Text::CSV problem.. http://scsys.co.uk:8002/219706

[09:54] *** d4l3k_ joined
[09:54] *** anuby_ joined
[09:56] <Su-Shee> hm. all modules but two failed so far to install :(

[09:56] *** Woodi_ joined
[09:57] *** tadzik1 joined
[09:58] *** dakkar_ joined
[10:01] *** hypolin left
[10:02] *** dakkar left
[10:02] *** dayangkun left
[10:02] *** anuby left
[10:03] *** skids left
[10:03] *** tadzik left
[10:03] *** p6eval left
[10:03] *** hugme left
[10:03] *** dalek left
[10:03] *** Woodi left
[10:03] *** rummik left
[10:03] *** silug left
[10:03] *** rurban left
[10:03] *** d4l3k_ is now known as dalek

[10:04] <felher> r: say "hello #perl6"

[10:04] <felher> Hm, something's wrong.

[10:04] <sorear> felher: p6eval is on the other side of the network

[10:04] <felher> sorear: ah, okay :)

[10:05] *** hugme joined
[10:05] *** ChanServ sets mode: +v hugme

[10:05] *** p6eval joined
[10:05] *** ChanServ sets mode: +v p6eval

[10:09] *** silug joined
[10:10] *** skids joined
[10:12] <hoelzro> jnthn: [11:08:48] rhoelz@Robs-MacBook-Pro.local /tmp/staging/tmp/parrot/lib/4.6.0/languages/perl6/lib/DBDish $ grep /tmp/staging mysql.pir  | grep -v annotate cur_sc."set_description"("/tmp/staging/tmp/parrot/lib/4.6.0/languages/perl6/lib/DBDish/mysql.pm6") 

[10:12] <hoelzro>    push $P5003, "/tmp/staging/tmp/parrot/lib/4.6.0/languages/perl6/lib/NativeCall.pm6"

[10:12] <hoelzro> oops

[10:12] <hoelzro> dammit, I *tried* to paste a link!

[10:13] *** dayangkun joined
[10:13] <hoelzro> http://scsys.co.uk:8002/219708

[10:13] <hoelzro> jnthn: that's for you

[10:13] <hoelzro> an example of hardcoded paths in PIR

[10:13] <hoelzro> I know that .annotate probably won't break anything, but I'd like to fix that if possible

[10:14] <jnthn> push $P5003, "/tmp/staging/tmp/parrot/lib/4.6.0/languages/perl6/lib/NativeCall.pm6"

[10:14] <jnthn> That's just pushing onto the string heap

[10:15] <jnthn> And the set_description is also just error reporting data, I believe.

[10:15] <jnthn> As in, I don't think they actually are used for lookup

[10:15] <jnthn> Since the PIR is text you can always post-process the paths :P

[10:15] <jnthn> I'm not immediately sure of a good solution

[10:16] *** SmokeMachine joined
[10:16] *** rindolf joined
[10:19] *** rindolf left
[10:20] *** rindolf joined
[10:22] *** Gruber joined
[10:23] *** SamuraiJack_ joined
[10:23] *** Timbus|Away joined
[10:23] *** scottp_ joined
[10:24] *** flussence_ joined
[10:24] *** risou_ joined
[10:24] *** jrockway_ joined
[10:25] *** jtpalmer joined
[10:25] *** sbox_ joined
[10:25] *** nuba_ joined
[10:26] *** diakopte1 joined
[10:26] *** fhelmberger joined
[10:29] *** flussence left
[10:29] *** risou left
[10:29] *** kresike left
[10:29] *** Celelibi left
[10:29] *** diakopter left
[10:29] *** cotto left
[10:29] *** sjn left
[10:29] *** Grrrr left
[10:29] *** scottp left
[10:29] *** renormalist left
[10:29] *** kresike joined
[10:29] *** jrockway left
[10:29] *** Timbus left
[10:29] *** sbox left
[10:29] *** SamuraiJack left
[10:29] *** hoelzro left
[10:29] *** jtpalmer_ left
[10:29] *** nuba left
[10:29] *** hoelzro joined
[10:29] *** Celelibi_ joined
[10:29] *** Timbus|Away is now known as Timbus

[10:29] *** cotto joined
[10:32] *** anuby joined
[10:33] *** anuby_ left
[10:33] *** bapa left
[10:34] *** sjn joined
[10:35] *** bapa joined
[10:38] *** anuby left
[10:40] *** anuby joined
[10:45] *** Gruber is now known as Grrrr

[10:48] *** Patterner left
[10:48] *** grondilu_ left
[10:49] *** Psyche^ joined
[10:50] *** Psyche^ is now known as Patterner

[10:51] *** Su-Shee left
[10:52] *** dayangkun left
[11:03] *** Patterner left
[11:04] *** Psyche^ joined
[11:04] *** Psyche^ is now known as Patterner

[11:04] *** dakkar_ is now known as dakkar

[11:13] *** Patterner left
[11:13] *** Psyche^ joined
[11:13] *** Psyche^ is now known as Patterner

[11:16] *** mtk left
[11:23] *** sbox_ left
[11:24] <hoelzro> so I have an array of hashes (my @AoH)

[11:24] <hoelzro> and I'd like to extract the value of a particular key from each hash

[11:24] <hoelzro> @AoH>>.<id> doesn't seem to do the trick; why is that?

[11:24] *** anuby left
[11:29] <sorear> hoelzro: the iteration recurses into the hash and applies .<id> to the individual values

[11:29] <hoelzro> oh, I see

[11:30] <hoelzro> it basically applies *.<id> to the flattened structure?

[11:31] <sorear> yes

[11:31] <sorear> (this is actually a bug, but a very long-standing one)

[11:31] <hoelzro> oh, seriously? so what I wrote *should* work?

[11:31] <jnthn> Yeah

[11:32] <jnthn> Well, the full story is: we had it that way, then the spec changed to say it should recurse into things.

[11:32] <jnthn> So Rakudo implemented that spec.

[11:32] <jnthn> Then it was realized that this appraoch does indeed suck, so the spec changed AGAIN.

[11:32] <hoelzro> heh

[11:32] <hoelzro> well, at least you guys realized that the approach isn't very good!

[11:33] <jnthn> So yeah, now things need updating in Rakudo again, and nobody got to it yet.

[11:37] <timotimo> this jokar person totally was a SEO expert, judging from his quit message

[12:09] *** bbkr__ left
[12:09] *** bbkr__ joined
[12:11] *** att__ left
[12:15] <jnthn> many errands &

[12:17] *** att__ joined
[12:17] *** tadzik1 is now known as tadzik

[12:20] *** Kharec left
[12:23] *** sftp joined
[12:26] *** Kharec joined
[12:31] *** SmokeMachine left
[12:34] *** SmokeMachine joined
[12:37] *** gfldex left
[12:38] *** gfldex joined
[13:07] *** mtk joined
[13:40] *** rummik joined
[13:43] *** Pleiades` left
[13:46] *** benabik left
[13:47] *** benabik joined
[13:48] *** skids left
[13:49] *** Pleiades` joined
[13:51] *** fgomez left
[13:51] *** BooK_ is now known as BooK

[13:56] * jnthn back

[13:57] *** bot48 joined
[14:00] <colomon> phenny: tell sorear Big sale on dotTrace profiler today.  http://www.jetbrains.com/profiler/index.html Should I get it for Niecza development?  (Should I get one for you for Niecza development?)

[14:00] <phenny> colomon: I'll pass that on when sorear is around.

[14:12] *** jfried left
[14:14] *** PacoAir joined
[14:21] *** cognominal joined
[14:24] *** cognominal left
[14:24] *** cognominal joined
[14:27] *** GlitchMr joined
[14:36] *** jfried joined
[14:44] *** pmurias joined
[14:54] *** jfried left
[15:00] *** stopbit joined
[15:02] *** benabik left
[15:02] *** benabik joined
[15:03] *** cognominal left
[15:03] *** SamuraiJack__ joined
[15:03] <pmichaud> good morning, #perl6

[15:03] *** SamuraiJack_ left
[15:04] <jnthn> morning, pmichaud o/

[15:09] *** Kharec left
[15:17] *** fhelmberger left
[15:18] *** cognominal joined
[15:19] *** sqirrel joined
[15:22] *** skids joined
[15:23] *** cognominal left
[15:25] *** stopbit left
[15:27] *** cognominal joined
[15:28] *** stopbit joined
[15:31] <hoelzro> what exactly does {} <infixish> mean in a grammar?

[15:31] <hoelzro> what's the {} for?

[15:31] <jnthn> Terminating LTM

[15:32] <hoelzro> sorry, LTM?

[15:32] <jnthn> Longest Token Matching

[15:32] <hoelzro> ah ha

[15:32] <jnthn> Means that the <infixish> will not be considered when computing the longest prefix.

[15:32] *** cognominal left
[15:32] <hoelzro> I see

[15:33] <hoelzro> but only <infixish>, rather than the rest of the pattern?

[15:33] <jnthn> Well, the current scope

[15:33] <jnthn> If it's in an alternation, it just means "the rest of the branch", for example

[15:33] <hoelzro> ok

[15:33] <jnthn> LTM works on alternation level and rule level

[15:34] <jnthn> r: say 'abcd' ~~ / 'abc' | 'a' \w+ /

[15:34] <p6eval> rakudo 22518b: OUTPUT«｢abcd｣␤␤»

[15:34] <jnthn> r: say 'abcd' ~~ / 'abc' | 'a' {} \w+ /

[15:34] <p6eval> rakudo 22518b: OUTPUT«｢abc｣␤␤»

[15:34] <jnthn> There's probably the simplest example to show the difference it makes.

[15:35] <hoelzro> oh

[15:35] <hoelzro> does that mean that | means the longest token?

[15:35] <hoelzro> s/token/alternation/

[15:35] <benabik> How does LTM break ties?

[15:35] <hoelzro> say 'abcd' ~~ / 'a' | 'ab' | 'abc' /

[15:35] <hoelzro> r: say 'abcd' ~~ / 'a' | 'ab' | 'abc' /

[15:35] <p6eval> rakudo 22518b: OUTPUT«｢abc｣␤␤»

[15:36] <hoelzro> interesting...I always thought it was first match

[15:36] <benabik> It was in P5.  || is first match in P6

[15:36] <hoelzro> ah

[15:36] <hoelzro> that explains things

[15:39] <FROGGS> r: say 'abcd' ~~ / 'a' || 'ab' || 'abc' /

[15:39] <p6eval> rakudo 22518b: OUTPUT«｢a｣␤␤»

[15:40] <hoelzro> I take that if an enthusiastic developer wanted to try and fix hyper operators wrt flattening, he/she should look at make_hyperop?

[15:40] <FROGGS> || just matches the first thing it matches, || tries all things, and returns the longest one

[15:40] <FROGGS> err

[15:40] <FROGGS> s/^||/|/

[15:40] <jnthn> hoelzro: More likely the code that needs to change is in src/core/metaops.pm

[15:40] *** cognominal joined
[15:41] <hoelzro> I see...

[15:41] <hoelzro> thanks for the tip

[15:41] <FROGGS> I'm talking crap, ignore me ;o)

[15:41] <jnthn> hoelzro: The "real work" is implemented in Perl 6, the stuff at AST level is just turning operators into calls and closures.

[15:41] <hoelzro> jnthn: Actions.pm *just* generates the AST, right?

[15:42] <benabik> FROGGS: Thankfully | is smarter than try everything, thanks to LTM.  It only tries the things that are most likely to work.

[15:43] <jnthn> hoelzro: "just", yes :)

[15:44] <FROGGS> benabik: then I have to re-read the calender-post about that :o)

[15:44] <benabik> It just does the hard work.  ;-)

[15:46] <jnthn> In short, it analyzes the declarative prefixes and builds an NFA that can order the options and trim away the ones that won't work efficiently.

[15:46] <hoelzro> jnthn: ok =) and then something walks the AST to generate the code, right? what class does the walking?  and instead of generating PIR directly, it makes calls to NQP stuff, right?

[15:46] <jnthn> These days, those NFAs are built at compile time and serialized

[15:46] <jnthn> hoelzro: The AST => PIR step lives in the NQP repository, in a class called QAST::Compiler

[15:47] <jnthn> There's another class called QAST::Operations which handles compiling/mapping all the QAST::Op things.

[15:47] <jnthn> There's a small intermediate layer between QAST and PIR called PIRT

[15:47] <hoelzro> ok

[15:47] <jnthn> Which makes QAST::Compiler just a tiny bit more pleasant to write.

[15:48] <jnthn> Not sure if pmurias++'s work on JavaScript goes through an intermediate layer or if it just does QAST to JavaScript; think it may be the latter.

[15:48] *** isBEKaml joined
[15:48] <hoelzro> jnthn: thanks for taking the time to explain all this; I'll probably pick your brain some more later =)

[15:48] <jnthn> np :)

[15:48] <jnthn> The more people understand this stuff, the better. :)

[15:49] <hoelzro> regarding that packaging issue, it looks like the /tmp/staging strings are pretty harmless.

[15:49] <benabik> Increasing bus number good!

[15:49] <hoelzro> I have a pull request for the packaging changes

[15:49] <hoelzro> so if someone wants to merge it, Rakudo * 2012.12 should be easier to build into an RPM =)

[15:50] <benabik> hoelzro++

[15:50] <jnthn> pmichaud: I don't feel like the right person to look at the hoelzro++ pull request for ^^, if you have a moment to glance at it that'd be great. :)

[15:50] <pmichaud> looking now

[15:50] <jnthn> Thanks :)

[15:51] <pmichaud> the first part of the request looked okay to me; I'm having to look deeper into the second commit

[15:51] *** lichtkind joined
[15:52] <isBEKaml> OHHAI, #perl6!

[15:52] <lichtkind> isBEKaml: cheers

[15:53] <jnthn> o/ isBEKaml 

[15:53] <pmichaud> 977ee04 won't work on Windows

[15:53] <isBEKaml> hello, lichtkind, jnthn

[15:53] <pmichaud> so I'd have to reject the request based on that alone.

[15:54] <lichtkind> looked anyone into https://gist.github.com/4341223 ?

[15:56] <pmichaud> 428f9a8 looks okay to me at first glance

[15:56] <jnthn> pmichaud: oh, ouch, that's actually the makefile we ship rather than just the one for building the star distro ain't it...

[15:56] <pmichaud> jnthn: yes.

[15:56] * jnthn got confused 

[15:56] <jnthn> I know that you can't do the release process on Windows, but yeah...this bit needs to work.

[15:59] *** cognominal left
[15:59] <pmichaud> anyway, I closed this pull request; reopen a new one when we have a better solution for the dynext stuff.

[16:01] <pmichaud> maybe need the equivalent of a -L option for nqp

[16:02] <pmichaud> (could even go into HLL::Compiler)

[16:05] <pmichaud> looks like NQP already has a --module-path option, perhaps that could resolve the Perl6 part of the patch

[16:07] <timotimo> is rakudo startup time comparatively good? just 'perl' starts up in an unmeasurable time, but perl6 has the object system and a couple of other things already at startup, while you'd have to wait for those to get use'd when you pull in most interesting perl modules...

[16:08] <pmichaud> timotimo: when I did a comparison in June for YAPC::NA, Rakudo's startup time was favorable when one considered equivalent modules

[16:08] <timotimo> wow, that's surprising. do you have a link?

[16:09] *** bowtie joined
[16:09] <pmichaud> lightning talk video at http://pmthium.com/2012/09/a-rakudo-performance/

[16:09] <timotimo> thank you :)

[16:09] <pmichaud> skip to 2:20 to see the startup stuff (but it makes more sense to view the whole take)

[16:10] <pmichaud> s/take/talk

[16:12] <pmichaud> I'm afk for a bit

[16:17] <timotimo> i like that talk. but the video quality is horrible and the audio/video is desync, at least in my html5-video-firefox :|

[16:17] <kresike> bye folks

[16:18] *** kresike left
[16:21] <pmichaud> yeah, the audio/video was out of sync.  nothing I could do about it, short of trying to resync things.  

[16:22] <pmichaud> on the other hand, given that all of the talk videos did finally make it onto the web.... that's a lot better than has been the case for most yapc's

[16:22] <pmichaud> so we should consider ourselves lucky that we have anything at all :)

[16:24] *** odoacre left
[16:26] <timotimo> :)

[16:26] <hoelzro> =(

[16:26] <hoelzro> it's a valid reason for rejection, though

[16:27] <hoelzro> actually, I also think it won't work on OS X

[16:27] *** odoacre joined
[16:27] <hoelzro> maybe I'll add the necessary stuff to NQP and it will be ready by 2013.01

[16:27] <timotimo> pmichaud: are you in theory able to re-upload that video? i might try my hand at kdenlive and put in less blurry slides, too

[16:27] <pmichaud> timotimo: it's not my video

[16:27] <timotimo> and move your head around a bit so it doesn't occlude text

[16:27] <timotimo> in that case it may be an exercise in timewasting

[16:27] <timotimo> oh well.

[16:28] <pmichaud> Here's where I got the video from:  http://www.youtube.com/watch?v=ILWrbvI8Qfg

[16:28] <pmichaud> all I did was trim out the part that was mine

[16:28] <timotimo> ah, i see.

[16:29] <pmichaud> it's possible I had some lossy conversion in the trimming... but I don't think there was much.

[16:29] <timotimo> oh, it's on your youtube account, so you could, in theory, re-upload the trimmed version

[16:29] <pmichaud> oh yes, I did upload the trimmed part

[16:29] <pmichaud> hmmmm

[16:29] <timotimo> ha! i clicked into the timeline and found you immediately

[16:31] <pmichaud> yeah, you'd have more success quality-wise to grab the original from the yapcna account and trim from there than to have me do it and re-upload

[16:31] <pmichaud> afk for a bit

[16:37] *** hash_table joined
[16:40] *** hoelzro is now known as hoelzro|away

[16:40] *** slavik1 joined
[16:41] *** kaleem left
[16:43] *** spider-mario joined
[16:44] *** steven___ left
[16:44] *** FROGGS left
[16:44] *** steven__ joined
[16:44] *** BinGOs left
[16:45] *** BinGOs joined
[16:46] *** isBEKaml left
[16:50] <timotimo> https://rt.perl.org/rt3//Ticket/Display.html?id=75640 - what exactly is the test supposed to test? that the code errors out when using nextsame? that {*} works in this case?

[16:53] <timotimo> also wondering how to test 75710. i guess a basic regression test would require an eval (because it's a parse error, right?) of basically what's in the last reply to the ticket?

[16:57] <pmichaud> gone for a while -- on way to airport

[17:00] <moritz> timotimo: yes. eval_lives_ok is your friend

[17:00] <moritz> (but leave out the say() in the code, it'll confuse the test harness)

[17:00] <timotimo> sure

[17:00] <timotimo> thank you :)

[17:03] <timotimo> oh, interesting

[17:03] *** thou joined
[17:04] <timotimo> there is a test case here in S02-names/identifier.t that checks for "sub order" which could fail if rakudo confuses it with "or" - it says "identifiers whos prefix is an alphanumeric infix operator" and x belongs in that category, doesn't it?

[17:09] <dalek> roast: 8625fc2 | (Timo Paulssen)++ | S06-multi/proto.t:

[17:09] <dalek> roast: test #76298: same-name proto/has.

[17:09] <dalek> roast: review: https://github.com/perl6/roast/commit/8625fc2520

[17:09] <dalek> roast: f0fb59d | (Timo Paulssen)++ | S02-names/identifier.t:

[17:09] <dalek> roast: test #75710: methods starting with x didn't work.

[17:09] <dalek> roast: review: https://github.com/perl6/roast/commit/f0fb59d351

[17:12] *** xinming_ joined
[17:14] *** fgomez joined
[17:15] *** xinming left
[17:15] *** kaare_ joined
[17:18] *** kaleem joined
[17:18] *** MayDaniel joined
[17:19] *** Celelibi_ is now known as Celelibi

[17:26] *** am0c joined
[17:27] *** Chillance joined
[17:29] *** FROGGS joined
[17:42] *** SamuraiJack joined
[17:43] <FROGGS> jnthn: how do I iterate over hashes in nqp and print key/value?

[17:43] *** SamuraiJack__ left
[17:51] <jnthn> nqp: my %h := nqp::hash(a => 1, b => 2); for %h { say($_.key ~ " = " ~ $_.value) }

[17:51] <p6eval> nqp: OUTPUT«1 = 2␤»

[17:51] <jnthn> oops

[17:51] <jnthn> nqp: my %h := nqp::hash('a', 1, 'b', 2); for %h { say($_.key ~ " = " ~ $_.value) }

[17:51] <p6eval> nqp: OUTPUT«a = 1␤b = 2␤»

[17:51] <jnthn> Iteration was correct, got nqp::hash wrong :)

[17:52] <FROGGS> thanks!

[17:55] <FROGGS> so le debugging continues ;o)

[17:58] *** dakkar left
[18:19] <dalek> rakudo-js: fa84a4e | (Paweł Murias)++ | / (2 files):

[18:19] <dalek> rakudo-js: extract rakudo-js leftovers

[18:19] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/fa84a4e71e

[18:19] <dalek> rakudo-js: ae8195c | (Paweł Murias)++ | runtime.js:

[18:19] <dalek> rakudo-js: Add nqp::isinvokable, pass the newest test 11.

[18:19] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/ae8195c149

[18:19] <dalek> rakudo-js: 26c410e | (Paweł Murias)++ | / (2 files):

[18:19] <dalek> rakudo-js: [nqp] refactor to give contexts and exceptions unique names

[18:19] <dalek> rakudo-js: review: https://github.com/pmurias/rakudo-js/commit/26c410e64d

[18:20] *** SamuraiJack left
[18:20] *** SamuraiJack_ joined
[18:24] <masak_> 'lo, #perl6

[18:25] *** japhb_ joined
[18:25] *** masak_ is now known as masak

[18:25] <japhb_> o/ masak 

[18:26] <timotimo> evening

[18:26] <FROGGS> hi masak, japhb, timotimo 

[18:26] <timotimo> how does one get from creating test cases to improving rakudo run speed or fixing crazy semantics bugs or implementing missing features like .= on attributes?

[18:27] <japhb_> o/

[18:28] <japhb_> timotimo, I'd go for an intermediate level of making improvements to the setting.

[18:28] <japhb_> I'm currently at the boundary -- the changes I next need to make in the setting require some guts work.

[18:28] <masak> rn: sub outer(&block) { my @*piles; &block() }; sub inner { say @*piles; CATCH { when /Dynamic/ { die "You can only use &inner in &outer" } } }; inner

[18:28] <p6eval> rakudo 22518b: OUTPUT«You can only use &inner in &outer␤  in block  at /tmp/k0rKXNUqDv:1␤  in method gist at src/gen/CORE.setting:10302␤  in sub say at src/gen/CORE.setting:7488␤  in sub inner at /tmp/k0rKXNUqDv:1␤  in block  at /tmp/k0rKXNUqDv:1␤␤»

[18:28] <p6eval> ..niecza v24-12-g8e50362: OUTPUT«Any()␤»

[18:29] <masak> \o/

[18:29] <timotimo> can you provide some examples for inbetween work? what improvements can still go into the setting?

[18:29] <masak> rakudo++

[18:29] <masak> sorear: that doesn't seem quite right.

[18:29] <masak> sorear: shall I submit a nieczue?

[18:29] <jnthn> o/ masak, japhb_ 

[18:29] <jnthn> timotimo: Well, I recommend beer... :)

[18:30] <japhb_> timotimo: well for example, I have a long-standing spare-time project to get val() into Rakudo.  That involves both some work in the setting (some of which I've already done, like improving Str.Numeric), and other parts require some minor guts work (making a single variable that can box and unbox a string and some other value at the same time)

[18:31] *** pat_js joined
[18:32] <jnthn> timotimo: Probably the best thing to do is pick a task that interests you, then try and get somebody with a betting understanding to tell you how hard it actually is and give you ocme pointers.

[18:32] <japhb_> timotimo, also, you can add tests to perl6-bench to help find out-of-whack performance problems, and then profile rakudo, niecza, etc. to figure out what is burning CPU.

[18:32] <timotimo> at this point i don't even know enough about perl6 to know what interests me :|

[18:32] <timotimo> that seems interesting.

[18:33] <doy> jnthn: by the way, is there a todo list or road map or anything for nqp?

[18:33] <timotimo> is finding performance problems an intuition thing or pure luck?

[18:34] <japhb_> I'm soon going to be moving perl6-bench from my personal account to the perl6 org on github, but until that happens just fork and submit pull requests, if that's what you'd like to help with.  :-)

[18:34] <japhb_> timotimo, Some is just testing lots of combinations of basic things, some is people mentioning "Gosh, this should have been quick by any reasonable mental model, but DANG it was slow in practice."

[18:35] <timotimo> i don't think i have a proper intuition for such speed things, unless they are really "DAYUM!" kind of deals. which i guess is what we're aiming for?

[18:36] <japhb_> Some is taking a slow-performing smallish script (like the rc-forest-fire test scripts in perl6-bench), and drilling down on pieces of it trying to find exactly what is causing the severe slowness.

[18:36] <japhb_> That's how I found that ^100 X ^100 is very slow in Rakudo

[18:37] <timotimo> right. i think i remember something about junctions being super slow compared to equivalent if statements (i had $x & $y == -1|0|1 back then, which was ridiculously slow compared to if -1 <= $x <= 1 etc etc)

[18:37] <timotimo> i may benchmark that to see if jnthns recent improvement to junctions changed that or if it was fixed in the mean time

[18:37] <japhb_> Also, comparing the performance envelope of Rakudo and Niecza has been very informative -- places where normally one or the other is slower by 2-5x, suddenly you find something where one is slower by 30x

[18:38] <japhb_> There is only one junction test in perl6-bench, many more welcome.  :-)

[18:38] <japhb_> Also, you can just play at the command line with little one-liners, and notice when you find some variant that changes a 2 second operation into a 2 minute operation.

[18:39] <timotimo> hah, that would be lucky indeed

[18:39] <japhb_> Right now there are still enough areas where one or both implementations were in "correct now, fast later" mode that you'd be surprised.  :-)

[18:40] <japhb_> Especially things that you think from a theoretical point of view should be equivalent turn out not to be -- different ways of looping the same number of times.

[18:40] <japhb_> (for example)

[18:41] <timotimo> is there a good pattern for doing one thing three different ways and timing them that is more lightweight than a benchmark framework?

[18:41] <timotimo> like checking argv for "a", "b" or "c" and going a different route and calling shell-time on it?

[18:41] <japhb_> or times when your intuition tells you one thing, but it turns out to be the opposite (or different for Niecza and Rakudo, like concat-in-a-loop versus push-in-a-loop-and-join-at-the-end)

[18:42] <japhb_> You can certainly do that.

[18:42] <japhb_> Make sure your test cases are large enough that whatever overhead you introduce is down in the noise of timing the actual test case.

[18:43] <japhb_> (And small enough that you don't swap your box -- I was reminded of that one rather spectacularly a few days ago.)

[18:45] *** kaleem left
[18:45] <japhb_> Also, one of the things I added to perl6-bench not too long ago was the ability to specify running only particular tests out of the whole suite.

[18:45] <japhb_> That made a HUGE difference for my productivity when working out new test cases.

[18:45] <japhb_> Especially since some of the tests on some compilers are REALLY SLOW.

[18:48] <japhb_> WTH?  I'm trying to nail down a problem with panda not bootstrapping properly after a Rakudo rebuild (which takes a LONG time on this old box), and I swear it's almost random.

[18:48] * japhb_ wonders if it's actually hitting an OOM somewhere and it depends on what else I'm running at the time.

[18:48] <japhb_> Hmmm ...

[18:49] <moritz> r: class A { has $.x = "abc"; method set { $!x .= uc } }; say A.new.set

[18:49] <p6eval> rakudo 22518b: OUTPUT«ABC␤»

[18:49] <moritz> timotimo: .= seems to work on attributes

[18:49] * japhb_ launches a couple more memory-hungry apps and rebuilds again

[18:49] <timotimo> oh, no i meant something more like this:

[18:50] <timotimo> r: class B {}; class A { has A $.x .= new }; A.new;

[18:50] <p6eval> rakudo 22518b: OUTPUT«===SORRY!===␤Cannot use .= to initialize an attribute␤at /tmp/o4Dycyg8yd:1␤------> class B {}; class A { has A $.x .= new⏏ }; A.new;␤    expecting any of:␤        method arguments␤»

[18:50] *** pmurias left
[18:50] <timotimo> so, my @coords = -50..50 X -50..50 isn't lazy?

[18:51] <moritz> no, assignment to arrays is only lazy when they are infinite

[18:51] <japhb_> timotimo, if you bind it with := it should be

[18:51] <timotimo> oh, i see

[18:51] <moritz> timotimo: then it's a three-stop process: 1) look at what ordinary attribute initialization does 2) find out where the error message comes from 3) apply 1) to the location of 2)

[18:52] <timotimo> now i'm getting a use of uninitialized variable $a but i have no mention of $a anywhere o_O

[18:53] <moritz> then it's use of an undfined value, where it's picking up the wrong variable name

[18:53] <moritz> either we need to fix it, or drop the reporting of the variable name

[18:53] <moritz> it's rather confusing when it goes wrong

[18:55] <timotimo> should i try to golf it?

[18:55] *** cognominal joined
[18:57] <timotimo> r: my @the-list = 1..2; my $the-val = @the-list[10]; given $the-val { when 10 { say "oops" } };

[18:57] <moritz> no

[18:57] <p6eval> rakudo 22518b: OUTPUT«use of uninitialized variable $a of type Any in numeric context  in block  at /tmp/cGBOCgY3na:1␤␤»

[18:58] <moritz> there many know instances of that error

[18:58] *** hash_table left
[18:59] <jnthn> argh, internet fail...

[18:59] * jnthn back now

[19:00] <masak> welcome back, jnthn's internet

[19:01] <jnthn> doy: Not for NQP at this point, no. For better or worse, NQP and the various things in the compiler toolchain improve as Rakudo needs them to improve.

[19:02] *** diakopte1 is now known as diakopter

[19:02] <jnthn> doy: I'd love for NQP to get emphasis/tuits to make it a strong product in its own right; it's just a resource issue really.

[19:02] <jnthn> Or resource allocation, anyways...

[19:02] <doy> jnthn: you had mentioned things about making nqp backend-independent and such

[19:02] <jnthn> doy: Yes, that's one of the "we want it for Rakudo" things :)

[19:03] <doy> i'm interested in doing things with nqp, but less interested in being tied to parrot

[19:03] <jnthn> *nod*

[19:04] <jnthn> I'm fairly optimistic we'll get to an NQP on JVM within the next couple of months.

[19:06] *** cognominal_ joined
[19:06] <doy> that would be pretty sweet

[19:06] *** cognominal left
[19:07] <doy> are there plans for a c backend?

[19:07] <diakopter> I'm sure someone's working on one somewhere

[19:07] <jnthn> heh :)

[19:07] <FROGGS> that would be sweet (and fast, and a lot more work)

[19:08] <jnthn> What FROGGS said :)

[19:08] <diakopter> MOAR WORK

[19:08] <moritz> parrot kinda is a C backend for NQP

[19:08] <jnthn> JVM first. Going from 1 to 2 is the biggest step.

[19:08] <doy> jnthn: true enough

[19:08] <jnthn> 2 to 3 will be work but less

[19:09] <timotimo> oh, i was thinking "this is actually quite fast!" but i was just measuring the startup time >_>

[19:10] <jnthn> timotimo: as a general note, working on trying to improve speed can be tricky in so far as it's easy to make things wronger as well as faster.

[19:11] <moritz> it's easier to focus on features first

[19:11] <doy> jnthn: so, i guess what i was originally asking is, if i'm interested in getting these sorts of things working, what can i do to help?

[19:11] <doy> (:

[19:12] <timotimo> so, $x & $y == -1|0|1 and $x & $y ~~ -1..1 are about the same speed (60 seconds vs 52 seconds), but if statements are way faster (8.5 seconds both)

[19:12] <timotimo> the if statements being if -1 <= $x <= 1 and -1 <= $y <= 1

[19:12] <timotimo> is this a valuable find?

[19:13] <jnthn> doy: Well, I wrote https://github.com/jnthn/nqp-jvm-prep/blob/master/docs/LHF.md for providing some easy jumping in points on the JVM stuff.

[19:13] *** djanatyn joined
[19:15] <masak> djanatyn! \o/

[19:15] <timotimo> mildly unsurprisingly, if -1 <= ($a & $b) <= 1 is about 35 seconds, so in between

[19:15] <timotimo> o/ djanatyn

[19:16] <FROGGS> timotimo: what you propose might be the job of the optimizer: convert these checks to faster forms in bolean context... (you still need to create ranges if you want to store -1..1 in an array)

[19:17] <djanatyn> masak: hey! :)

[19:17] <djanatyn> timotimo: hello!

[19:17] <moritz> masak: how's the rakudo release coming along?

[19:18] <timotimo> FROGGS: i don't think i understand what you mean with "to store -1..1 in an array"?

[19:18] <moritz> my @a = -1 .. 1; # you can't optimize out the Range the same way that you could for $x ~~  -1 .. 1

[19:18] <FROGGS> right

[19:19] <timotimo> ah, OK

[19:19] *** cognominal_ left
[19:20] <masak> moritz: I'm gonna do some $dayjob, then I'll enter us into releng mode.

[19:20] *** cognominal joined
[19:20] <FROGGS> fiddling with the optimizer might be a nice job, had no time to have a closer look at it

[19:21] <timotimo> in jnthn++'s talk about optimizing rakudo performance it seemed like "fun" :)

[19:21] <FROGGS> ya, jnthn is a hacker by heart, thats all fun to him I suppose *gg*

[19:21] <timotimo> :D

[19:22] <moritz> last I looked, the optimizer wasn't trivial code, but it wasn't opaque either

[19:22] <timotimo> so jnthn had PIR code of what he was optimizing on the slides. is there an easy way to obtain such code from any random rakudo run?

[19:22] <jnthn> Also, there's not a huge amount of optimizer code at the moment.

[19:23] <jnthn> timotimo: Well, the PIR code isn't what gets transformed, it's more that I was showing the results of the optimization on the output

[19:23] <jnthn> --target=pir shows you the output

[19:23] <timotimo> oh, ok

[19:23] <timotimo> is that a good thing to look at, though?

[19:23] <jnthn> But it's transforming at AST level

[19:24] <timotimo> or should i do --target=past instead?

[19:24] <jnthn> --target=pir is probably less verbose

[19:24] <jnthn> to be honest, I only look at those two as fairly last resorts when fixing things

[19:25] *** SamuraiJack_ left
[19:25] <jnthn> But for learning what is going on, they can be handy I think

[19:25] <timotimo> thank you :)

[19:26] *** cognominal left
[19:33] *** cognominal joined
[19:33] <diakopter> wait, did the world end yet

[19:33] <jnthn> diakopter: No, be patient.

[19:34] <masak> diakopter: I hear it's already started to end in Asia.

[19:34] <FROGGS> in which timezone will that happen?

[19:34] <masak> it's an incremental roll-out.

[19:34] <FROGGS> alright

[19:34] <FROGGS> hehe

[19:35] <jnthn> Gee, I bet Samoa are regretting their time zone change now. They would had a whole extra day of world if they hadn't done that. :P

[19:35] <timotimo> hm, so actually this is two different things. one is turning $x ~~ -1..1 into -1 <= $x <= 1 in boolean context and the other is doing autothreading at compile-time. does the latter make sense?

[19:36] <FROGGS> jnthn: well, they would have christmas one day early, thats not that bad

[19:36] <timotimo> er, not even "in boolean context", that already is boolean context

[19:36] <jnthn> -1 <= $x <= 1 doesn't involve auto-threading

[19:36] <jnthn> There's no junctions there.

[19:36] <timotimo> jnthn: yes, but $x & $y ~~ -1..1 does

[19:36] <jnthn> That's a chained comparision.

[19:36] <jnthn> Oh, in that case there's a junction, yes.

[19:37] *** silug left
[19:38] <timotimo> would probably be a job better suited for the autothreader?

[19:39] <jnthn> That will hit auto-threading at some point, yes

[19:39] <jnthn> To see what "the autothreader" actually means, look in src/core/Junction.pm :)

[19:40] <colomon> surely the world must be ending on Mayan Standard Time?

[19:42] *** hash_table joined
[19:43] <timotimo> jnthn: consult this helpful table of measurements: http://t.h8.lv/table.txt

[19:43] <jnthn> timotimo: Is that a Rakudo from before or after I optimized the auto-threader? :)

[19:44] <timotimo> after, it's been compiled yesterday i think.

[19:44] <jnthn> ok

[19:44] <timotimo> This is perl6 version 2012.11-88-g22518b8 built on parrot 4.10.0 revision RELEASE_4_10_0

[19:44] <jnthn> The top case used to be WAY slower

[19:44] <jnthn> I think part of the problem is that the sheer overhead of calling the auto-threader is what pushes up the time here.

[19:45] <timotimo> do you think it's sensible to try to use the optimiser to go from the 34s line to the 24s one automatically?

[19:46] *** Pleiades` left
[19:48] <jnthn> I think if we're going to do things where we reduce simple junctions, we want to just rewrite the junctions away altogether.

[19:49] <timotimo> so you're suggesting if it's known that the junction object doesn't "escape" to transform the AST into a big blown up logical statement?

[19:49] <jnthn> $x == -1|0|1 ==> $x == -1 || $x == 0 || $x == 1

[19:49] *** SmokeMachine left
[19:50] *** hash_table left
[19:50] *** cognominal left
[19:50] <jnthn> I think that's likely to get the biggest win and be most realistic to implement.

[19:50] <timotimo> is there a way to prototype this transformation in perl6 with actual data before going at the real optimizer code?

[19:50] *** SmokeMachine joined
[19:51] <timotimo> compile cycles on this laptop are quite drawn-out and i'm looking to try to do this on a train ride tomorrow :)

[19:54] <jnthn> timotimo: I can't think of anything quite close enough to give a very useful indication...

[19:55] *** SmokeMachine left
[19:55] *** cognominal joined
[19:55] *** Pleiades` joined
[19:55] <timotimo> hm, maybe this would be an interesting project for me. a past (qast? what's the difference?) transformation playground. seems quite gutsy (and guts-y, too), though for a beginner

[19:56] <doy> jnthn: haha, just noticed that you had just written that LHF.md document about an hour before i asked about it(:

[19:56] <benabik> timotimo: QAST is a re-write of PAST.

[19:56] <moritz> when we talk about past, we mostly mean qast

[19:57] <timotimo> benabik: so when i tell rakudo to --target=past, what i get is actually a QAST?

[19:57] <timotimo> OK

[19:57] <jnthn> doy: Aye...timing win :)

[19:57] <jnthn> timotimo: It's easy to remember: "PAST is the QAST of the past"

[19:57] <timotimo> that's cute :)

[19:57] <timotimo> so, since it seems like i can pir::regcomp__something('perl6') and do .eval on the object i get, can i tell that to eval something into a past and later give it a past to execute?

[19:57] <benabik> When I talk about PAST, I mostly mean PAST.  But I often tinker around in pure parrot land.

[19:59] *** cognominal left
[20:01] *** silug joined
[20:01] <timotimo> oh? the "edit summary" mode from the irclog has been made non-public?

[20:02] <timotimo> ah, NoScript

[20:02] <timotimo> need to get used to that some day

[20:04] <jnthn> timotimo: hm, good question...

[20:06] <jnthn> timotimo: You really need to write the transform in NQP

[20:06] <jnthn> But that's not really a show-stopper...

[20:06] <jnthn> Gimme a moment to try something.

[20:06] *** am0c left
[20:10] *** cognominal joined
[20:10] <timotimo> i tried my hand at summarizing today's happenings so far

[20:11] <jnthn> ok, a few moments... :)

[20:21] *** sftp left
[20:22] *** cooper_ joined
[20:23] *** cognominal left
[20:24] *** spider-mario left
[20:25] *** flussence_ is now known as flussence

[20:29] *** cognominal joined
[20:29] *** bruges_ joined
[20:30] *** sftp joined
[20:30] *** bruges left
[20:32] *** s1n joined
[20:33] *** s1n left
[20:34] <jnthn> timotimo: https://gist.github.com/4348324

[20:35] <jnthn> This lets you basically get what Perl6::Optimizer gets and do something instead.

[20:35] <timotimo> ooooh, that is *great*

[20:35] <timotimo> jnthn++

[20:35] <jnthn> You write the Perl 6 code to try compiling in the say 42, then you write your NQP code to do the transforming inside a sub

[20:36] <jnthn> oh, and wait...

[20:36] <masak> running spectests. getting big free()-related blowup on t/spec/S02-types/bool.t -- is this an oldie-but-goodie?

[20:36] <jnthn> yeah

[20:36] *** pat_js left
[20:37] <jnthn> well, but not very good :P

[20:37] <dalek> nqp: ba37573 | jnthn++ | src/NQP/Compiler.pm:

[20:37] <dalek> nqp: Make NQP compreg when loaded as a module.

[20:37] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ba3757329c

[20:37] <jnthn> timotimo: You need ^ too :)

[20:37] <jnthn> moritz: you may also find https://gist.github.com/4348324 of interest, or disgust :)

[20:38] <timotimo> it amazes me how fast that was.

[20:41] * jnthn returns to packing stuff for his UK trip tomorrow :)

[20:42] <timotimo> jnthn: you should totally make that gist more public

[20:42] <masak> summary of "I'm <mood> to present" phrases in Rakudo's release announcements: "pleased" for ages. changed to "happy" by [Coke] for 2010.07. changed to "glad" by tadzik for 2012.05. changed to "thrilled" by pmichaud for 2012.09. changed to "please" by masak for 2012.12.

[20:43] <masak> pleased*

[20:44] <jnthn> How...lagom.

[20:44] <colomon> what's the name of the ?? !! operator?

[20:44] *** hoelzro|away is now known as hoelzro

[20:45] * colomon is deep into tomorrow's Advent post now.

[20:45] <timotimo> i know it as "the ternary operator"

[20:45] <flussence> interrobang ternary? :)

[20:45] <colomon> timotimo++ flussence++

[20:46] <tadzik> :)

[20:46] <tadzik> hello hello

[20:47] <colomon> \o

[20:48] <masak> tadziku! \o/

[20:48] <japhb_> Bah, I can't get "panda install after rakudo rebuild" to fail again.  I don't know whether to be happy or annoyed at that ....

[20:48] <masak> tadzik: whenever you rez on the channel saying "hello hello", it's as if I can hear you saying it. makes me smile.

[20:50] <tadzik> (:

[20:51] *** kurahaupo joined
[20:51] <tadzik> whoa: https://github.com/jnthn/nqp-jvm-prep

[20:52] <tadzik> stuff's happening :)

[20:53] <tadzik> just when we got threads on parrot ;P

[20:53] <colomon> tadzik: the more the merrier!

[20:53] *** skids left
[20:54] <tadzik> :)

[20:55] <masak> "Now you've got two VMs with threads."

[20:55] <tadzik> :D

[20:55] <tadzik> oN woy'uevg tot owV sMw ti hhterda.s

[20:56] *** cotto left
[20:57] *** cotto joined
[20:57] *** kurahaupo left
[20:58] <masak> \/o

[20:58] <hoelzro> jnthn++ # Perl 6 on the JVM

[20:58] <masak> more like "NQP prep on the JVM" so far, but still :)

[20:58] <masak> jnthn++

[20:59] <masak> humans and gentlebots.

[20:59] <masak> let's begin tonight's release engineering of Rakudo.

[20:59] <jnthn> Yes, there's still a good bit of work before Rakudo runs there :)

[21:00] * masak pushes the big "thumping party beat" button

[21:00] <doy> does rakudo have any non-nqp dependencies?

[21:00] <tadzik> ack pir:: rakudo

[21:00] <tadzik> yep :)

[21:00] <hoelzro> jnthn, masak: still, a start is great!

[21:00] <hoelzro> tadzik++ # for using ack

[21:00] *** sjohnson left
[21:00] <tadzik> ackwesome

[21:00] <jnthn> yeah, those, and also some C code that does some bits with Parrot

[21:00] <jnthn> But still, it's a small percentage.

[21:01] <tadzik> we'll slowly build awesome and get there

[21:01] <jnthn> The majority of Rakudo is in NQP and Perl 6 :)

[21:01] <jnthn> Aye :)

[21:01] <dalek> rakudo/nom: 4423b87 | masak++ | docs/announce/2012.12:

[21:01] <dalek> rakudo/nom: [docs/announce/2012.12] added

[21:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4423b87684

[21:02] <masak> all hands on deck, please to review, kthx.

[21:02] * masak looks cute, in order to attract more attention for the announcement review :>

[21:02] *** sjohnson joined
[21:03] <FROGGS> hehe

[21:03] <tadzik> oh, Warszawa

[21:03] * jnthn reviews, but tbh has seen cuter :P

[21:03] <diakopter> command after (tadzik)

[21:03] <diakopter> er.

[21:03] <diakopter> comma

[21:03] <tadzik> and it mentions me. I'm flattered

[21:04] <masak> will fix. thank you.

[21:04] <tadzik> and 2012 wasn't very active on my side :(

[21:04] <jnthn> .oO( la mafia comma after tadzik! )

[21:04] <timotimo> i'd change "more accurate and more information given" to a full sentence: "they are more accurate and more information is given" if that isn't too long

[21:04] <dalek> rakudo/nom: ab1ff9c | masak++ | docs/announce/2012.12:

[21:04] <dalek> rakudo/nom: [docs/announce/2012.12] comma fix

[21:04] <dalek> rakudo/nom: 

[21:04] <dalek> rakudo/nom: diakopter++ noticed.

[21:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ab1ff9c7d7

[21:05] <masak> timotimo: oki.

[21:05] <jnthn> masak: yeah, what timotimo++ said

[21:05] <jnthn> Also may be worth mentioning the auto-threader speedup, since it was a common complaint.

[21:06] <masak> jnthn: oh, good idea.

[21:06] <timotimo> oh yes!

[21:06] <dalek> rakudo/nom: f015670 | masak++ | docs/announce/2012.12:

[21:06] <dalek> rakudo/nom: [docs/announce/2012.12] wording fix

[21:06] <dalek> rakudo/nom: 

[21:06] <dalek> rakudo/nom: timotimo++ suggested.

[21:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f015670232

[21:06] <jnthn> "assuming the world doesn't end today," :P

[21:06] <jnthn> Whoever makes next month's relesae is gonna be in for a surprise if they copy-paste last month's announce without watching too closely :P

[21:06] <FROGGS> masak: I can't complain about nothing...

[21:07] <jnthn> FROGGS: So...what can you complain about? :P

[21:07] <masak> jnthn: provided there is a next month... :P

[21:07] *** GlitchMr left
[21:07] <FROGGS> :P

[21:08] <dalek> rakudo/nom: 2c7c338 | masak++ | docs/announce/2012.12:

[21:08] <dalek> rakudo/nom: [docs/announce/2012.12] autothreding improvement

[21:08] <dalek> rakudo/nom: 

[21:08] <dalek> rakudo/nom: jnthn++ is right; an order-of-magnitude faster is massive

[21:08] <dalek> rakudo/nom: and should have a mention.

[21:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2c7c3385d3

[21:09] <timotimo> jnthn: isn't there at least one world-ends-today theory for each day of each year?

[21:09] <tadzik> but this one is The One

[21:10] <FROGGS> ya, the one one

[21:10] <tadzik> hide yo kids, hide yo wife

[21:10] *** sizz left
[21:11] <masak> tools/update-tai-utc.pl is spewing infinitely many 'Use of uninitialized value $lines[0] in pattern match (m//)' warnings here.

[21:12] <masak> can someone reproduce this?

[21:12] <masak> perl tools/update-tai-utc.pl src/core/tai-utc.pm # in the rakudo directory

[21:12] <tadzik> nope

[21:12] <jnthn> Can't locate Time/y2038.pm in @INC

[21:12] <tadzik> works for me

[21:13] <masak> tadzik: does it update the leap seconds for you?

[21:13] <tadzik> Updated.

[21:13] <tadzik> This program should next be run in February.

[21:13] <tadzik> git diff doesn't agree though :)

[21:13] <masak> ok, it was a null update, then :)

[21:13] <masak> proceeding.

[21:13] <tadzik> :)

[21:13] <masak> tadzik++

[21:13] <tadzik> masak++

[21:13] <FROGGS> masak: I thought it is like perl tools/update-tai-utc.pl > src/core/tai-utc.pm

[21:13] <tadzik> . o O ( ping - pong )

[21:13] <tadzik> Na

[21:14] <tadzik> $ARGV[0] ||= 'src/core/tai-utc.pm';

[21:16] <dalek> rakudo/nom: 927e71c | masak++ | docs/release_guide.pod:

[21:16] <dalek> rakudo/nom: [docs/release_guide.pod] upcoming release ascends

[21:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/927e71c95a

[21:23] <masak> according to the NQP release guide, I should *not* bump NQP's Parrot release to 4.11.

[21:26] <tomgj> Am I right in thinking that in signatures of routines you can only declare a single typed return value, and the situation is not nearly as generalised as whatever this doc was targeted at: http://www.dlugosz.com/Perl6/web/return.html

[21:26] <dalek> nqp: 6d4973f | masak++ | VERSION:

[21:26] <dalek> nqp: bump VERSION to 2012.12

[21:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6d4973f669

[21:27] <timotimo> tomgj: i think you can specify a junction as return value, like --> Bool|Int

[21:27] <tadzik> masak: do so anyway

[21:27] <jnthn> tomgj: I think several things in that article are a bit off.

[21:27] <tadzik> then Threads.pm will be certified to work on 2012.12 :)

[21:28] <timotimo> oh, you mean something different

[21:28] <tomgj> timotimo: ah, thanks, that is certainly a good start

[21:28] <jnthn> tomgj: You certainly can return multiple values.

[21:28] <masak> tadzik: the NQP release process just came to a screeching halt. if I am to contravene the release guide, I want independent confirmation from a core Rakudo/nqp developer.

[21:28] <masak> jnthn? :)

[21:29] <timotimo> r: sub what_type($a --> Bool|Int) { given $a { when 1 { return True }; when "foo" { return 100 } } }; say what_type(1).perl; say what_type("foo").perl;

[21:29] <p6eval> rakudo f01567: OUTPUT«===SORRY!===␤Missing block␤at /tmp/HGcz8qjWzl:1␤------> sub what_type($a --> Bool⏏|Int) { given $a { when 1 { return True ␤    expecting any of:␤        statement list␤        prefix or term␤        prefix or meta-prefix␤       …

[21:29] <tomgj> jnthn: sure, but there seems to be a bit of a disconnect between what you can return, and what you can promise the return will be in the signature of a method / subroutine

[21:29] <timotimo> std: sub what_type($a --> Bool|Int) { given $a { when 1 { return True }; when "foo" { return 100 } } }; say what_type(1).perl; say what_type("foo").perl;

[21:29] <p6eval> std a8bc48f: OUTPUT«ok 00:00 45m␤»

[21:29] <timotimo> seems like rakudo doesn't parse that yet

[21:29] <jnthn> tomgj: I think at the moment returns explicitly expects to parse a type name.

[21:29] <jnthn> timotimo: Pass it to STD also

[21:29] <timotimo> r: sub what_type($a) returns Bool|Int { given $a { when 1 { return True }; when "foo" { return 100 } } }; say what_type(1).perl; say what_type("foo").perl;

[21:29] <p6eval> rakudo f01567: OUTPUT«===SORRY!===␤Missing block␤at /tmp/hf5QyOwamE:1␤------> sub what_type($a) returns Bool⏏|Int { given $a { when 1 { return True }␤    expecting any of:␤        statement list␤        prefix or term␤        prefix or meta-prefix␤  …

[21:29] <jnthn> timotimo: that was r again :P

[21:30] <timotimo> i passed it to std, it said "ok"

[21:30] <jnthn> timotimo: oh, I missed that

[21:30] <timotimo> ;)

[21:30] <jnthn> Hm

[21:31] <jnthn> OK, my next question is what on earth does STD actually parse that as :)

[21:31] <masak> jnthn: should I bump NQP to use Parrot 4.11? NQP release guide says no, tadzik says do it anyway.

[21:31] <jnthn> masak: What's the issue?

[21:31] <masak> see above :)

[21:32] <tadzik> THREADS

[21:32] <tadzik> erem

[21:32] <jnthn> masak: But at the moment it's already 4_10_0

[21:32] <tadzik> you need to build parrot --without-threads anyway

[21:32] <masak> aye.

[21:32] <tadzik> so, mebbe it doesn't really matter :)

[21:32] <jnthn> masak: moment

[21:32] <tadzik> let it stay underground, wooooo

[21:32] <masak> ok, going ahead with doing nothing.

[21:33] <jnthn> moritz++ bumped it to 4.10.0 to fix a sockets issue

[21:33] <masak> I am doing all of this on a train, by the way.

[21:33] <jnthn> That was since the last release.

[21:33] <masak> will this be the first train-based Rakudo release? :D

[21:33] <timotimo> rakudo on rails, i see.

[21:33] <tadzik> :D

[21:33] *** tomgj left
[21:34] <jnthn> masak: yes, and that's gonna be a pain to one-up, but Norwegian do wi-fi on their planes, so... ;)

[21:34] <masak> jnthn: CHALLENGE ACCEPTED.

[21:34] <timotimo> i'd like to see a rakudo release from a hot weather balloon or a blimp

[21:34] <jnthn> OK, but it's my turn to have the window seat :P

[21:34] <timotimo> maybe a zeppelin, or even a quadcopter

[21:34] <masak> just need to book a Norwegian flight on a release day... :)

[21:35] <jnthn> masak: On the bump...hmm

[21:35] <jnthn> I think that advice dates back to when Parrot had broken readline.

[21:35] <jnthn> That is now fixed.

[21:35] <masak> let's put it this way.

[21:36] <masak> is there any overwhelming reason to upgrade Parrot?

[21:36] <jnthn> And I'm fairly comfortable it must be because everyone who's had HEAD since 29th Nov woulda seen the breakage if it was there...

[21:36] <masak> can we look into changing our release guide at some other point of the month? :)

[21:36] <jnthn> masak: Well, what will you relesae with it as?

[21:36] <masak> jnthn: parse error on your question.

[21:37] <masak> I will release according to the current release guide.

[21:37] <masak> Parrot 4.10.

[21:37] <jnthn> masak: OK, but that bump took place during this month. That's all I'm saying

[21:37] <jnthn> But yes, that's fine.

[21:37] <jnthn> We know it works sufficiently well...

[21:37] <masak> ok, good.

[21:37] <benabik> Readline has been fixed, as far as #parrot knows.  :-)

[21:39] *** tomgj joined
[21:40] <benabik> Or, at least, as far as I know from hanging around #parrot.

[21:40] <jnthn> tomgj: I've checked, the returns trait expects to parse a typename, and a typename is more restrictive than specifying, say, a signature

[21:40] <jnthn> tomgj: That doesn't mean you can't declare a subset type that checks the thing being returned against a signature, mind.

[21:41] <masak> "Upload the release tarball to Github's download area at L<http://github.com/perl6/nqp/downloads>." -- "We've recently deprecated this downloads section (manually uploaded files). Please read the blog post for more information." https://github.com/perl6/nqp/downloads

[21:41] <masak> :( :( :(

[21:41] <dalek> ecosystem: b80c908 | (Timothy Totten)++ | META.list:

[21:41] <dalek> ecosystem: Added Text::Table::List

[21:41] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/b80c908458

[21:41] <masak> this was what moritz tweeted about... :(

[21:41] <masak> NQP release process aborted due to abruptly changing reality. masak close to tears.

[21:42] <masak> *sniff*

[21:42] <masak> also, this train is heavily delayed.

[21:42] <tomgj> jnthn: ah, okay, thanks.  I may have been using the term "signature" wrongly.  Is it not correct to say that the returns part is part of the signature?

[21:42] <lichtkind> cheers masak

[21:42] <masak> lichtkind: ahoj!

[21:42] <tomgj> the question may apply to traits in general if returns is a trait

[21:43] * masak reads the bloody blog post in question

[21:43] <lichtkind> masak: looked into my gist?

[21:43] <tomgj> (this is a bit of a tangent - but thought I'd just check up on the vocab)

[21:43] <jnthn> tomgj: Yes, it's a trait.

[21:43] <masak> lichtkind: no...

[21:43] <jnthn> You can write it within the signature also though

[21:43] <masak> lichtkind: url?

[21:43] <jnthn> And actually the information lives in the signature.

[21:43] <jnthn> masak: For the Rakudo release, pmichaud++ set up rakudo.org to host them

[21:44] <jnthn> masak: I sent him a public key yesterday, I guess you didn't see about that in the backlog...

[21:44] <lichtkind> https://gist.github.com/4341223

[21:45] <masak> jnthn: no, I missed that.

[21:45] <masak> diakopter suggests perl6.org or perl6.com for the NQP release, on privmsg.

[21:45] <masak> jnthn: any objections or alternative suggestions?

[21:46] <masak> should we put the NQP release on rakudo.org too?

[21:46] <jnthn> masak: We could...

[21:46] <jnthn> pmichaud: ping? 

[21:46] <masak> lichtkind: aha, an advent post.

[21:46] <jnthn> masak: Mostly we need it somewhere for the Star release

[21:47] <masak> lichtkind: good job on writing one. a quick glance make it seem like it needs some editing.

[21:47] <lichtkind> masak: your a genious

[21:47] *** MikeFair___ left
[21:47] <lichtkind> feel free

[21:47] <masak> lichtkind: but I'm kinda busy right now...

[21:47] <lichtkind> but i ealready gone over it most  rough edges are already gone

[21:47] <masak> o rly? ok, then.

[21:47] <jnthn> masak: So we can always delay uploading the NQP tarball.

[21:48] <lichtkind> masak: jeah pperljam helped

[21:48] <masak> jnthn: ok. fine. as long as we don't forget it.

[21:48] <jnthn> email it to myself and Pm perhaps; one of us will figure something out :)

[21:48] <masak> lichtkind: something about it makes it not look ready for publishing. but I don't have time right now.

[21:48] <masak> jnthn: doing that now.

[21:48] <masak> lichtkind: thanks for thinking of me, though. I'm generally happy to look through people's articles. :)

[21:49] * masak re-focuses on NQP and Rakudo

[21:49] <jnthn> Pm set up the rakudo.org access with keys so I can't just give you the pssword... :/

[21:49] <masak> nodnod

[21:50] <lichtkind> masak: i also wanted to show you in case i am awy tomorrow the hole day you know where it is

[21:50] *** icebattle joined
[21:51] <FROGGS> we all will be away in some sense...

[21:51] <FROGGS> ... gone I mean

[21:51] <masak> :)

[21:51] <masak> ...and today is "the hole day" :P

[21:51] <lichtkind> FROGGS: common not even ufo magazins did panic in the last years

[21:51] <lichtkind> and btw it was topic for the last 30 years 

[21:51] * masak .oO( and those guys are craaazy )

[21:52] <lichtkind> its kinda burned hype

[21:52] <masak> lichtkind: you're implying that the world won't actually end in the very near future?

[21:52] <lichtkind> masak: especially the ones who deny the phenomena

[21:53] <masak> "nqp-2012.12.tar.gz contains an executable file. For security reasons, Gmail does not allow you to send this type of file." -- oh ffs

[21:53] <lichtkind> masak: i spoke with god and he didnt ordered any of that

[21:53] * masak hosts the file on his server and sends a link

[21:54] <FROGGS> masak: zip it with a passwd like 1234?

[21:54] <masak> FROGGS: that's the combination to my luggage!

[21:54] <jnthn> masak: Yes, I've hit that gmail restriction too. Bloody nuisance.

[21:54] <FROGGS> ha! $FROGGS haz now access to masak's secret underpants!

[21:55] <jnthn> ...er, what? :)

[21:56] <masak> de gustibus non est disputandum.

[21:56] <jnthn> gustibus...is that they the bus drives past and a gust sweeps you off your feet?

[21:57] <colomon> Hey, all, I've got a complete first draft on tomorrow's Advent post, and would appreciate comments and (if anyone is so inclined) additional scripts.  http://perl6advent.wordpress.com/?p=1790&preview=true

[21:57] <dalek> rakudo/nom: 1dd2a00 | masak++ | tools/build/NQP_REVISION:

[21:57] <dalek> rakudo/nom: [release] bump NQP revision

[21:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1dd2a00dec

[21:57] <dalek> rakudo/nom: 8a1836b | masak++ | VERSION:

[21:57] <dalek> rakudo/nom: [release] bump VERSION

[21:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8a1836b480

[21:58] <colomon> (the link probably won't work unless you've permission to edit the Advent calendar posts, sorry.)

[22:03] <masak> colomon: any particular reason you have the second (redundant) condition in { when * %% 2 { $_ / 2 }; when * !%% 2 { 3 * $_ + 1 }; } ?

[22:04] <colomon> masak: that was literally my first thought implementing it.  it goes away later in the post.

[22:04] <masak> ok :)

[22:04] <masak> also, % is shorter than !%%

[22:04] <masak> but I'll read the rest of the post.

[22:04] <colomon> (And the timing difference between the second when and a simple default is addressed.)

[22:05] <masak> nice.

[22:05] <masak> colomon++ # good post

[22:08] <masak> hm, I won't be able to run these stresstests before the train arrives.

[22:08] <colomon> danke.

[22:08] <bot48> good blog colomon 

[22:08] <masak> will need to detrain and then finish the release process when I'm home.

[22:09] <bot48> sorry hi all o/

[22:09] <hoelzro> do you guys and gals think that pygments should hilight MAIN like a keyword?

[22:09] <masak> hi, bot48.

[22:09] <hoelzro> or should I leave it as normal text?

[22:10] <jnthn> hoelzro: It's just a sub name

[22:10] <hoelzro> it's a slightly special one, though

[22:10] <masak> not special enough.

[22:10] <hoelzro> ok, cool

[22:10] <jnthn> The uppercase already carries the specialness

[22:10] <masak> thanks for checking :)

[22:10] * hoelzro ticks one thing off his TODO list for this

[22:11] *** silug left
[22:11] <masak> &

[22:13] *** sqirrel left
[22:16] <hoelzro> how can I get the length of a ResizableStringArray in NQP?

[22:16] <jnthn> nqp::elems(...)

[22:17] <hoelzro> ah ha

[22:23] *** gdey joined
[22:29] *** silug joined
[22:32] * [Coke] yawns from a "wait-for-the-kid-to-finish-his-extracurricular" wifi spot.

[22:35] <pmichaud> good afternoon, #perl6  (from 30,000 feet)

[22:37] <pmichaud> arggg, looks like I just missed masak++

[22:37] <hoelzro> ahoy pmichaud 

[22:38] <hoelzro> hey, there's that plane with wifi needed for the release =P

[22:38] <pmichaud> I can't handle the tarball upload from here, but I can handle it from my hotel room when I get there and have some free time

[22:39] <pmichaud> or if someone else wants to get to it, that works too.

[22:39] <jnthn> pmichaud: masak will be back

[22:39] <sorear> good * #perl6

[22:39] <phenny> sorear: 14:00Z <colomon> tell sorear Big sale on dotTrace profiler today.  http://www.jetbrains.com/profiler/index.html Should I get it for Niecza development?  (Should I get one for you for Niecza development?)

[22:40] <jnthn> o/ sorear 

[22:40] <pmichaud> I could use a publickey for masak++  :-)

[22:40] * masak is back

[22:40] <jnthn> right :)

[22:40] <masak> \o/

[22:40] <jnthn> masak: Quick! A key! A public key! :P

[22:40] <sorear> so how are we doing tarball uploads now, and can I get in on it?

[22:40] <masak> now, where was I?

[22:40] <colomon> \o sorear

[22:40] <jnthn> sorear: Hosting them at rakudo.org

[22:40] <masak> ah yes, start the stresstests.

[22:41] <masak> pmichaud: you require a public SSH key from me?

[22:41] <jnthn> pmichaud: Will we put nqp there also?

[22:41] <pmichaud> jnthn: yes, I think it makes sense to put nqp there also

[22:41] <jnthn> wfm

[22:41] <pmichaud> just create downloads/nqp, methinks

[22:42] <jnthn> *nod*

[22:42] <pmichaud> masak: with a publickey I can get you ssh/scp/sftp access to the rakudo.org server

[22:42] <pmichaud> or any of the other ringleaders that have access could do the upload

[22:42] <pmichaud> (yes, the fact that github is removing the downloads feature is a real pain)

[22:43] <pmichaud> (I really liked github's downloads option.)

[22:43] <jnthn> yeah, it's a pity

[22:43] *** PacoAir left
[22:43] <pmichaud> connecting from airplane wifi feels like being on a 300 baud modem again :-)

[22:44] <sorear> would it make any sense at all for niecza to use rakudo's download infrastructure?

[22:44] <pmichaud> sorear: I don't have a problem with that

[22:45] <pmichaud> if you'd like to use rakudo's infrastructure for that, I'll be glad to set it up.  We could even create a separate niecza domain/site if you want.

[22:45] <jnthn> pmichaud: Yeah, the latency is quite something...if it's anything like what we have on the flights here in Europe anyway :)

[22:48] * jnthn guesses his flight tomorrow probably doesn't have wifi :(

[22:48] <jnthn> Hm, probably worth a general note that I'm not gonna be about tomorrow probably at all, and not that much in the next several days.

[22:57] <pmichaud> masak++   # nqp release now at http://rakudo.org/downloads/nqp

[22:58] <hoelzro> masak: did you just remove all the extra options from src/NQP/Compiler.pm?

[22:58] <pmichaud> ooooh, nice view of grand canyon outside plane's window :)

[22:59] <jnthn> ooh, nice :)

[22:59] <pmichaud> ...nqp tarball is 1.2MB?  that seems... largish

[22:59] <hoelzro> oh, that was jnthn's fault.

[22:59] *** rindolf left
[22:59] <dalek> rakudo/nom: 55dbc07 | masak++ | docs/announce/2012.12:

[22:59] <dalek> rakudo/nom: [docs/announce/2012.12] new download URLs

[22:59] <dalek> rakudo/nom: 

[22:59] <dalek> rakudo/nom: Because GitHub has de-provided their upload function.

[22:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/55dbc07f67

[23:00] <pmichaud> I guess that's on the order of what it's been, but it still seems big.

[23:00] <jnthn> hoelzro: I just moved some stuff from MAIN to the mainline

[23:00] <jnthn> hoelzro: So taht if you load_language nqp, compreg happens.

[23:00] *** silug left
[23:00] <hoelzro> jnthn: I saw; no biggie, but I just had merge conflicts =(

[23:00] <masak> pmichaud: I created the tarball according to the release guide ;)

[23:00] <hoelzro> jnthn: I defer to your expertise =)

[23:01] <pmichaud> masak: yeah, I'll look at it later and see if I can figure out why it's so big.

[23:01] <jnthn> hoelzro: Well, I hope there was no functional changes from waht I did. But yeah, if you had changes in MAIN you'll get conflicts.

[23:01] <pmichaud> okay, plane is starting to descend now

[23:01] <hoelzro> jnthn: there shouldn't be; I'll try compiling

[23:02] <pmichaud> catch you all later -- perhaps several days later (depends on what else is happening during my trip)

[23:02] <hoelzro> just submitted my first pull request for NQP! \o/

[23:02] <pmichaud> hoelzro++   # pull requests

[23:02] <jnthn> pmichaud: have a nice trip!

[23:02] <hoelzro> indeed! enjoy!

[23:03] <pmichaud> jnthn: enjoy your vacations as well.  be back in a few days

[23:03] <jnthn> pmichaud: thanks, will do :) o/

[23:03] <masak> pmichaud: happy descent!

[23:04] <hoelzro> huh, I just realized that I can push to nqp's repo directly.

[23:04] <hoelzro> oh well, I think that the user review of my change would be good =)

[23:05] <colomon> pmichaud: have a good trip!

[23:06] <hoelzro> aaaand updated pull request for Rakudo *

[23:06] <hoelzro> no symlinks required!

[23:06] <hoelzro> \o\

[23:06] <hoelzro> /o/

[23:06] <hoelzro> \o/

[23:09] *** cognominal left
[23:10] <[Coke]> (github downloads) what if we pay, I wonder.

[23:10] <benabik> [Coke]: github seems to suggest you pay Amazon for S3 instead.

[23:10] *** kaare_ left
[23:11] <masak> Rakudo 2012.12 tagged and uploaded to http://rakudo.org/downloads/rakudo/

[23:11] <jnthn> \o/

[23:11] <jnthn> masak++

[23:12] <hoelzro> \o/

[23:12] <jnthn> The Rakudo release with the best parse errors ever :)

[23:12] <jnthn> * Until next months... ;)

[23:12] <flussence> "New feature: More errors!"

[23:13] *** cognominal joined
[23:13] <masak> p6c email sent.

[23:13] <[Coke]> OH. Has anyone thought to ask TPF?

[23:13] *** MayDaniel left
[23:14] <masak> ask TPF what?

[23:15] <masak> what release date do I put on the Wikipedia article? where I'm at, it's past midnight, so it's 2012-12-21.

[23:15] <masak> OTOH, by UTC, it's still before midnight.

[23:16] * masak is leaning towards 2012-12-20 because that's what the release guide says and he can rationalize it using UTC

[23:16] <hoelzro> good night p6 folk

[23:16] <masak> I convinced me. let's go with 2012-12-20.

[23:17] <[Coke]> masak: if they have infrastructure we could use to replace github for downloads.

[23:17] *** hoelzro is now known as hoelzro|away

[23:17] <dalek> perl6-bench: 1725416 | (Geoffrey Broadwell)++ | components.json:

[23:17] <dalek> perl6-bench: Add repo info for Perlito, NQP-JS, and perl5 components (can't build them yet, though)

[23:17] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/172541628c

[23:17] <dalek> perl6-bench: 5ce74ce | (Geoffrey Broadwell)++ | README:

[23:17] <dalek> perl6-bench: Add section on NETWORK TRAFFIC to README; add a mini-TOC at the top so people know where to look for quick info

[23:17] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/5ce74ce022

[23:18] <masak> Wikipedia article updated. both places.

[23:18] <masak> standing down release mode.

[23:19] <masak> folks, the eagle has shipped.

[23:19] <jnthn> masak++

[23:19] <jnthn> Go have a beer!

[23:19] <PerlJam> masak++

[23:19] * masak celebrates with a really dark imperial stout

[23:19] * [Coke] needs to find a wifi leech point with beer instead of big macs.

[23:20] <colomon> masak++

[23:21] <jnthn> Ok, I gotta get up in 5 hours or so to head to the airport so...guess I should sleep a little :)

[23:21] <jnthn> Probably be back in a day or so...we'll see :)

[23:21] <jnthn> 'night

[23:22] <dalek> perl6-bench: 82f0eb4 | (Geoffrey Broadwell)++ | README:

[23:22] <dalek> perl6-bench: Update README to suggest benchmarking new 2012.12 releases of NQP and Rakudo, masak++

[23:22] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/82f0eb4155

[23:22] <sorear> pmichaud: well, I'm definitely interested.

[23:22] <sorear> colomon: I do not have a pressing need for a new profiler

[23:23] <masak> yum, this beer.

[23:23] <japhb_> Good night, jnthn 

[23:23] <benabik> :n

[23:23] <benabik> ww

[23:24] <colomon> sorear: okay.

[23:24] *** cognominal left
[23:25] <masak> what's the right window for ':n'? #vimonirc? :)

[23:26] <benabik> The gVim window instead of my IRC client?  Although even there I would have gotten a "No write since last change"

[23:29] <masak> ah, of course. that's what I should've answered.

[23:29] *** cognominal joined
[23:33] <japhb_> sorear, when are you planning to release v25?

[23:33] <sorear> japhb_: this month or never

[23:34] <japhb_> *snirk*

[23:34] * [Coke] adds Perl 6 to his resume.

[23:34] <japhb_> Fair enough

[23:34] <benabik> v26 Release Notes:  There was no v25.

[23:35] <sorear> benabik: there was no v23

[23:36] *** cognominal left
[23:46] *** cognominal joined
[23:49] *** stopbit left
