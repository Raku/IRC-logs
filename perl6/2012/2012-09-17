[00:00] *** dayangkun left
[00:04] *** dayangkun joined
[00:08] *** wamba left
[00:13] *** wk__ joined
[00:15] *** fgomez left
[00:16] *** wk_ left
[00:35] <raiph> http://irclog.perlgeek.de/out.pl?channel=perl6;date=2012-09-15;summary=1 #perl6 curated backlog for 2012-09-15

[00:35] <raiph> http://irclog.perlgeek.de/out.pl?channel=perl6;date=2012-09-16;summary=1 #perl6 curated backlog for 2012-09-16

[00:36] <raiph> Use the existing navigation links above, and the "summary

[00:39] <raiph> The above links are what you get if you click to get to the corresponding day, then click the "summary" link that appears next to Camelia (or wraps if your screen is too narrow)

[00:41] *** fgomez joined
[00:43] *** Chillance left
[00:45] <raiph> phenny, tell moritz https://gist.github.com/3732447#gistcomment-574072

[00:45] <phenny> raiph: I'll pass that on when moritz is around.

[00:49] *** Circlepuller joined
[00:52] *** Circlepuller__ left
[01:03] *** anuby joined
[01:05] *** dayangkun left
[01:07] *** Circlepuller_ joined
[01:10] *** Circlepuller left
[01:11] *** hypolin joined
[01:18] *** jaldhar left
[01:19] *** fgomez left
[01:25] *** cognominal left
[01:28] *** thou left
[01:31] *** cognominal joined
[01:39] *** whiteknight left
[01:39] *** cognominal left
[01:40] *** cognominal joined
[01:41] *** fgomez joined
[01:46] *** jeffreykegler joined
[01:50] *** FROGGS__ joined
[01:53] *** flightrecorder left
[01:54] *** flightrecorder joined
[01:55] *** FROGGS_ left
[01:58] *** dayangkun joined
[02:04] *** jaldhar joined
[02:05] *** orafu left
[02:05] *** orafu joined
[02:09] *** yarp joined
[02:09] *** _jaldhar joined
[02:10] *** jaldhar left
[02:15] *** jeffreykegler left
[02:18] *** _jaldhar left
[02:19] *** _jaldhar joined
[02:20] *** gootle joined
[02:22] *** thou joined
[02:32] *** pmurias left
[02:33] *** thou left
[02:36] *** thou joined
[02:39] <yarp> r: @*INC.say;

[02:39] <p6eval> rakudo 5aa57b: OUTPUT«/home/p6eval/.perl6/lib /home/p6eval/nom-inst/lib/parrot/4.7.0-devel/languages/perl6/lib␤»

[03:38] *** ponpon left
[03:44] *** fgomez left
[03:53] *** fgomez joined
[04:01] <skids> r: (0x1800000000000000 +& (+^0x1000000000000000)).fmt("%x").say

[04:01] <p6eval> rakudo 5aa57b: OUTPUT«0␤»

[04:02] <skids> hmmmm.  that gives me f800000000000000 locally (star08).  I wonder what's hosed.

[04:02] <TimToady> r: (0x1800000000000000 - (+^0x1000000000000000)).fmt("%x").say

[04:02] <p6eval> rakudo 5aa57b: OUTPUT«1␤»

[04:10] <sorear> skids: the perl6 executable on p6eval is 32-bit

[04:10] <sorear> skids: I think rakudo uses machine integers for bitops

[04:11] <sorear> which is kind of odd because both feather1 and feather3 are x86_64

[04:11] <sorear> but we have:

[04:11] <sorear> sorear@feather3:~$ ls ~p6eval/nom-inst/bin/perl6 -lh

[04:11] <sorear> -rwxr-xr-x 1 p6eval p6eval 57K Sep 17 06:08 /home/p6eval/nom-inst/bin/perl6

[04:11] <sorear> sorear@feather3:~$ file ~p6eval/nom-inst/bin/perl6

[04:11] <sorear> /home/p6eval/nom-inst/bin/perl6: ELF 32-bit LSB executable, Intel 80386, version

[04:14] <TimToady> Perl 6 shuld just do bitops in arbitrary precision by pretending it's infinite precision 2's complement

[04:15] <TimToady> a negative number just has an infinitude of 1's instead of 0's

[04:16] <skids> That does work to some extent.

[04:17] <skids> I think there's some problems when things are near the 64-bit border and representations might be promoted/demoted.

[04:17] <TimToady> of course, if you know you're gonna store the result in a native location, you can optimize

[04:18] <TimToady> we want fast crypto too :)

[04:18] <skids> r: (0x1800000000000000 +& (0xffffffffffffffff +^ 0x1000000000000000)).fmt("%x").say # workaround, works locally here.

[04:18] <p6eval> rakudo 5aa57b: OUTPUT«0␤»

[04:18] <skids> hrm.

[04:26] <skids> r: (0x1800000000000000 +& (0xfffffffffffffffff +^ 0x1000000000000000)).fmt("%x").say

[04:26] <p6eval> rakudo 5aa57b: OUTPUT«0␤»

[04:34] *** fgomez left
[04:42] *** fgomez joined
[04:45] *** satyavvd joined
[04:47] *** raiph_ joined
[04:48] *** raiph_ left
[04:48] <moritz> good morning

[04:48] <phenny> moritz: 16 Sep 17:09Z <raiph> tell moritz https://gist.github.com/3732447

[04:48] <phenny> moritz: 16 Sep 18:20Z <not_gerd> tell moritz there appears to be some confusion on left<->right in the section on item assignment of http://doc.perl6.org/language/operators

[04:48] <phenny> moritz: 16 Sep 21:16Z <raiph> tell moritz What about logmarks? Click time field toggles a logmark. Logmark'd lines are highlighted. Does everything we need for phase 1. Very simple. What's not to love?

[04:48] <phenny> moritz: 00:45Z <raiph> tell moritz https://gist.github.com/3732447#gistcomment-574072

[04:49] *** _jaldhar left
[04:50] *** _jaldhar joined
[04:54] *** pjcj joined
[05:06] <raiph> http://blogs.perl.org/users/perl_6_reports/2012/09/perl6-summary-now-built-in-to-irclog-software.html

[05:07] <moritz> what's not to love? that clicking on the time already has another function that I'd like to preserve

[05:07] *** wk__ left
[05:09] *** adu joined
[05:23] <sorear> moritz: could have a separate mode for raiph, no?

[05:23] <raiph> moritz: ok.

[05:24] <raiph> sorear: that's basically what's there now. works great.

[05:25] <raiph> (but I don't let "works great" for certain use cases get in the way of "works better" for more use cases)

[05:26] <raiph> moritz: forgetting clicking on time, what do you think of the basic approach? click a line, it's logmarked. that's it.

[05:27] <moritz> raiph: it'd like to hear more feedback on the summary mode from others first

[05:27] <moritz> raiph: if it's something that most people don't bother with, I don't want to integrate it that tightly with the rest of the page

[05:28] <moritz> if it's something most users pick up, I'm all for tighter integration

[05:31] <raiph> moritz: "more feedback". makes sense.

[05:38] *** yarp left
[05:42] <raiph> moritz: While I hugely want this new summary mode to be successful, I don't want it to rely on me.

[05:42] <raiph> moritz: I'm already concerned because no one but me has done the summarizing in the day since you enabled the feature.

[05:43] <raiph> moritz: While that may of course change, it's not an auspicious start.

[05:43] <raiph> moritz: It doesn't take long to do a whole day, maybe an hour or two, but it's all relative.

[05:45] <raiph> I was really hoping for an approach that would lend itself to communal summarizing.

[05:47] <raiph> We shall of course see. I'm doing my best to encourage folk to help out. For example my latest blog:

[05:48] <raiph> http://blogs.perl.org/users/perl_6_reports/2012/09/perl6-summary-now-built-in-to-irclog-software.html

[05:48] <raiph> Here's hoping.

[05:51] <raiph> *communal and continuous (up-to-the-minute) summarizing

[05:57] *** skids left
[05:59] *** fgomez left
[06:00] *** fgomez joined
[06:04] *** FROGGS__ left
[06:05] *** adu left
[06:05] *** flightrecorder left
[06:09] *** tokuhiro_ joined
[06:25] *** fgomez left
[06:26] *** mdupont left
[06:35] *** wtw joined
[06:37] *** kaleem joined
[06:38] *** raiph left
[06:40] *** fgomez joined
[06:42] *** mdupont joined
[06:46] *** Cooqle joined
[06:47] *** Cooqle left
[06:49] *** fhelmberger joined
[06:51] *** kaleem left
[06:56] *** thou left
[06:56] *** tokuhiro_ left
[06:56] *** tokuhiro_ joined
[07:01] *** tokuhiro_ left
[07:04] *** thou joined
[07:13] *** brrt joined
[07:15] *** kaleem joined
[07:15] *** flightrecorder joined
[07:16] *** FROGGS joined
[07:21] <FROGGS> good morning

[07:25] <sorear> o/

[07:27] *** marmay joined
[07:33] *** thou left
[07:34] *** wk_ joined
[07:45] *** kresike joined
[07:46] <kresike> good morning all you happy perl6 people

[07:46] <sorear> o/

[07:49] <mathw> Good morning

[08:00] <anuby> 0/

[08:05] <brrt> \o kresike

[08:20] *** Psyche^ joined
[08:23] *** Patterner left
[08:23] *** Psyche^ is now known as Patterner

[08:24] <dalek> Perlito: 408fa18 | (Flavio S. Glock)++ | Makefile:

[08:24] <dalek> Perlito: Perlito5 - add "make minify"

[08:24] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/408fa18d79

[08:24] *** dakkar joined
[08:36] *** tokuhiro_ joined
[08:44] *** yarp joined
[08:44] <yarp> nr:  my Num @number=<3  4  5  6>; @number[4] = [+] @number; @number.say;

[08:44] <p6eval> niecza v21-11-g09989b4: OUTPUT«3 4 5 6 18␤»

[08:44] <p6eval> ..rakudo 5aa57b: OUTPUT«Type check failed in assignment to '$v'; expected 'Num' but got 'Int'␤  in block  at /tmp/ByQwh5XleO:1␤␤»

[08:50] *** Chillance joined
[08:50] *** Chillance left
[08:51] *** Chillance joined
[08:52] *** Chillance left
[08:53] *** Chillance joined
[08:53] *** Chillance left
[08:53] *** return joined
[08:54] <return> r: '1a2b3c4d5'.subst(/(\d+)/,{$0~$0},:g)

[08:54] <p6eval> rakudo 5aa57b: OUTPUT«use of uninitialized value of type Any in string context  in block  at /tmp/SpZ3bZi89C:1␤␤use of uninitialized value of type Any in string context  in block  at /tmp/SpZ3bZi89C:1␤␤use of uninitialized value of type Any in string context  in block  at /tmp/SpZ3bZi89…

[08:55] <return> r: '1a2b3c4d5'.subst(/(\d+)/,{$1~$1},:g)

[08:55] <p6eval> rakudo 5aa57b: OUTPUT«use of uninitialized value of type Any in string context  in block  at /tmp/C9vHJNhAY9:1␤␤use of uninitialized value of type Any in string context  in block  at /tmp/C9vHJNhAY9:1␤␤use of uninitialized value of type Any in string context  in block  at /tmp/C9vHJNhAY…

[08:56] <return> n: '1a2b3c4d5'.subst(/(\d+)/,{$0~$0},:g)

[08:56] <p6eval> niecza v21-11-g09989b4:  ( no output )

[08:57] <return> hello \o/  perl6, why the code wrong?

[08:57] *** kaleem left
[08:59] *** cognominal left
[09:00] <return> n: say  '1a2b3c4d5'.subst(/(\d+)/,{$0~$0},:g)

[09:00] <p6eval> niecza v21-11-g09989b4: OUTPUT«11a22b33c44d55␤»

[09:01] <return> |o/ n++

[09:01] <jnthn> morning o/

[09:02] <return> morning jnth \o\

[09:02] <return> n: say  '1a2b3c4d5'.subst(/(\d+)/,{sprintf("%02d",$0)},:g)

[09:02] <p6eval> niecza v21-11-g09989b4: OUTPUT«01a02b03c04d05␤»

[09:03] <return> r: say  '1a2b3c4d5'.subst(/(\d+)/,{sprintf("%02d",$0)},:g)

[09:03] <p6eval> rakudo 5aa57b: OUTPUT«No such method 'Int' for invocant of type 'Any'␤  in any  at src/gen/BOOTSTRAP.pm:91␤  in sub sprintf at src/gen/CORE.setting:2131␤  in block  at /tmp/SyyL1YY6LX:1␤␤»

[09:04] <jnthn> r: say  '1a2b3c4d5'.subst(/(\d+)/,-> $/ {sprintf("%02d",$0)},:g)

[09:04] <p6eval> rakudo 5aa57b: OUTPUT«01a02b03c04d05␤»

[09:05] <return> oh r++

[09:08] <FROGGS> hi jnthn

[09:09] <return> jnthn: thanks.

[09:09] *** mucker joined
[09:10] *** return left
[09:22] *** kaleem joined
[09:30] *** mucker left
[09:41] *** Chillance joined
[09:42] *** Chillance left
[09:53] *** tokuhiro_ left
[09:54] *** tokuhiro_ joined
[09:59] *** tokuhiro_ left
[10:04] *** dorlamm joined
[10:05] *** cognominal joined
[10:05] *** hypolin left
[10:06] *** cognominal left
[10:09] *** gootle left
[10:11] *** gootle joined
[10:16] *** anuby left
[10:20] *** wamba joined
[10:32] *** dayangkun left
[10:45] *** cognominal joined
[10:51] *** cognominal left
[10:52] *** daxim joined
[10:53] *** dayangkun joined
[10:55] *** Targen left
[10:56] *** tokuhiro_ joined
[11:00] *** tokuhiro_ left
[11:00] *** tokuhiro_ joined
[11:01] *** cognominal joined
[11:01] *** tokuhiro_ left
[11:02] *** tokuhir__ joined
[11:05] *** dorlamm left
[11:08] <jnthn> std: -foo => 'bar'

[11:08] *** Su-Shee left
[11:08] <p6eval> std b842bb3: OUTPUT«ok 00:00 41m␤»

[11:09] <jnthn> std: +foo => 'bar'

[11:09] <p6eval> std b842bb3: OUTPUT«ok 00:00 41m␤»

[11:10] *** Su-Shee joined
[11:10] *** gootle left
[11:11] <jnthn> In http://glitchmr.github.com/perl-6-changes-2012W37.html it mentions that -foo => 'bar' pair form is now supported, but the commit was to STD_P5, not STD: https://github.com/perl6/std/commit/942bb1cfc5bf29d1b09bc5ae4fb32c41e9956a74

[11:11] <jnthn> Otherwise, nice summary :)

[11:13] *** am0c joined
[11:14] *** Chillance joined
[11:14] *** Chillance left
[11:19] *** am0c left
[11:24] *** pmurias joined
[11:27] *** _jaldhar left
[11:31] *** am0c joined
[11:32] *** Chillance joined
[11:32] *** Chillance left
[11:34] *** Chillance joined
[11:34] *** Chillance left
[11:35] *** Chillance joined
[11:35] *** Chillance left
[11:37] <pmurias> jnthn: does nqp -e 'use nqp' work for your?

[11:39] <jnthn> pmurias: No; I fixed the compreg approach though

[11:39] <jnthn> (The one you were originally trying)

[11:40] <pmurias> thanks, worked

[11:51] <sirrobert> what mechanism is there for class-level variables?

[11:51] <jnthn> sirrobert: You, er, declare a variable inside of the class. :-)

[11:51] <hoelzro> sirrobert: I think you can just do this:

[11:51] <sirrobert> via closure?

[11:52] <hoelzro> class MyClass { my $foo; }

[11:52] <jnthn> Right. :)

[11:52] <sirrobert> then manually do an accessor to get it from outside?

[11:52] <jnthn> my $.foo; # generates an accessor for you

[11:52] <Su-Shee> that's what $.foo is for..

[11:52] <sirrobert> ohhhhhhhhhhhhhhhhhhhhh

[11:52] <sirrobert> not *has* $.foo

[11:52] <sirrobert> *my* $.foo

[11:53] <jnthn> Right, "has" means "one per instance"

[11:53] <sirrobert> yeah

[11:53] <sirrobert> ok, that's great

[11:53] <sirrobert> trying it out now =)

[11:53] <FROGGS> ohh, good to know

[11:53] *** dayangkun left
[11:53] <sirrobert> that's great.

[11:54] <sirrobert> I notice that "my $.bar" doesn't need "is rw" the same way "has $.bar" does.

[11:54] <Su-Shee> I thought rw is default anyways?

[11:54] <sirrobert> not for "my $.foo" (at least not in my version of rakudo =)

[11:55] <moritz> Su-Shee: no, default is ro

[11:55] <jnthn> defualt is ro. Hm. :)

[11:55] <jnthn> I think that wants to be the case for the "my" one too but...we don't really have variable traits yet. Unless moritz++ added 'em...

[11:56] *** cognominal left
[11:56] <Su-Shee> ah well, I rarely use instance/class vars anyways.... :) d

[11:57] <moritz> jnthn: no, I haven't

[11:57] <jnthn> oh, you did constants...

[11:57] <moritz> the problem is really that traits work at compile time, but at compile time we only see the entry in the proto lexpad

[11:57] <moritz> so there's not much we can do in terms of traits that affect the value of a variable

[11:58] <jnthn> Well, traits are more about the container I geuss

[11:58] <jnthn> *guess

[11:58] *** am0c left
[11:59] *** JimmyZ joined
[11:59] *** satyavvd left
[12:03] *** crab2313 joined
[12:04] *** cognominal joined
[12:12] *** cognominal left
[12:19] *** cognominal joined
[12:22] *** mucker joined
[12:26] *** cognominal left
[12:27] *** atrodo joined
[12:28] * [Coke] sees "since the day you enabled the feature" in backlog, and wonders what feature, and if you want it to be more noticed, mentioning someplace other than backscroll is a good idea.

[12:29] <[Coke]> esp. since feather was rebooted in the past week.

[12:34] *** GlitchMr joined
[12:36] *** cognominal joined
[12:38] *** mucker left
[12:38] <FROGGS> is there a way to open pipes?

[12:38] <[Coke]> jnthn: no worries on the autoviv thing for now; I already worked around that in partcl-nqp there weren't many cases of it.

[12:38] <FROGGS> my $fh = open( "| cc -xc -", :w ) doesnt work for me :/

[12:38] <moritz> FROGGS: I think there's an unspecced adverb to open() that does that

[12:39] <[Coke]> jnthn, pmichaud: latest stick on partcl-nqp update is issue #53 on nqp, but also: converting PAST to QAST is not straightforward.

[12:39] *** adu joined
[12:39] <moritz> FROGGS: search for pipe in src/core/IO.pm in rakudo

[12:39] <FROGGS> thanks

[12:42] <jnthn> [Coke]: What are you finding non-straightforward, ooc?

[12:42] <[Coke]> jnthn: many of the :adverbs are missing.

[12:42] <[Coke]> lack of docs on both versions makes it hard to say "oh, this is now spelled that way"

[12:42] <jnthn> Lack of docs is a problem, yes.

[12:43] <[Coke]> Doesn't help that pmichaud setup most of the original PAST, so I had it handed to me the first time.

[12:43] <jnthn> Ah

[12:43] <[Coke]> jnthn: for example, here's one that i just ripped out but probably shouldn't have:

[12:43] <FROGGS> moritz: this is working:  my $fh = open( "cc -xc -", :w, :p ) 

[12:44] <[Coke]> QAST::Var.new( :name<lexpad>, :scope<register>, :isdecl ...

[12:44] <jnthn> :scope<local> :decl<var>

[12:44] <jnthn> er, with the comma

[12:45] <jnthn> Problem is that PAST treated parameter as a scope.

[12:45] <jnthn> Which meant you couldn't have parameters that went into registers.

[12:45] <jnthn> You were forced to do lexicals

[12:45] <jnthn> Which ain't always desirable.

[12:46] <[Coke]> jnthn: thank you.

[12:46] <[Coke]> what about :viviself(...) ?

[12:46] *** wamba left
[12:48] <jnthn> That one really did get killed. It also did a couple of distinct things. If you were using it on an isdecl, just do a bind to the thing you're declaring. If you really did want to do some kind of "if it's null" logic per lookup (discouraged unless you must do it), see VarWithFallback

[12:49] <[Coke]> how to do the bind? :bind<thing> ?

[12:49] *** yarp_ joined
[12:49] <jnthn> QAST::Op.new( :op('bind'), ... )

[12:49] <jnthn> First arg is the QAST::Var, second is the thing to bind

[12:50] <[Coke]> Thanks.

[12:51] <[Coke]> what about :hll ?

[12:51] *** yarp left
[12:51] *** yarp_ is now known as yarp

[12:51] <jnthn> There's now a QAST::CompUnit that wraps the entire thing to be compiled, and the :hll goes on that.

[12:52] <jnthn> QAST::CompUnit.new( :hll('tcl'), $top-level-block )

[12:57] *** wamba joined
[12:57] *** Chillance joined
[12:57] *** Chillance left
[12:58] <Woodi> raiph: just learned today about summarizer and reports and like both :)

[13:00] <Woodi> but me thinks joins can be filtered out in summary view or maybe displayed in smallest rows ?

[13:01] *** mucker joined
[13:01] <Woodi> and maybe "navigation links" can use bigger font ?

[13:01] *** PacoAir joined
[13:09] <moritz> why would the summary contain joins?

[13:09] <moritz> just don't add them to the summary :-)

[13:18] *** crab2313 left
[13:25] <sirrobert> r: class A { my  $.foo; has $.foo is rw; }; A.foo = "bar"; my $a = A.new; $a.foo = "baz";     say $a.foo; say A.foo;

[13:25] <p6eval> rakudo 5aa57b: OUTPUT«baz␤baz␤»

[13:25] <sirrobert> Is there a way to have a class version separate from an instance version ?

[13:26] *** PerlJam joined
[13:27] <jnthn> By calling them different things? :)

[13:28] <sirrobert> I'm hoping for something like setting something at the class level (at runtime) as a default for instances.  In particular, db config stuff

[13:29] <jnthn> That's fine, just have a my $.foo-default; has $.foo = $foo-default;

[13:29] <jnthn> or something

[13:29] <sirrobert> fair enough

[13:31] <moritz> (the accessors are just regular methods, which is why you can't have accessors for two attributes of the same name)

[13:31] *** orafu left
[13:31] <sirrobert> ok, that makes sense =)

[13:34] *** tokuhir__ left
[13:34] *** tokuhiro_ joined
[13:38] *** yarp_ joined
[13:39] *** tokuhiro_ left
[13:40] *** yarp left
[13:40] *** yarp_ is now known as yarp

[13:42] *** sisar joined
[13:50] *** skids joined
[13:56] *** stopbit joined
[13:57] <pmurias> jnthn: what does --vmlibs=perl6_group,perl6_ops do?

[13:59] <jnthn> pmurias: Ensures that .loadlib directives for the Perl 6 PMCs and dynops are emitted.

[13:59] <pmurias> does it stop the nqp via compreg from working?

[13:59] *** flightrecorder left
[14:00] <jnthn> Don't see why it'd do that; they feel quite orthogonal.

[14:00] <pmurias> jnthn: I get http://pastie.org/4738542

[14:01] <pmurias> Makefile: http://paste.ubuntu.com/1211092/

[14:01] <jnthn> bah, I get an Application error when looking at that paste...

[14:01] *** FROGGS left
[14:01] <pmurias> jnthn: which one?

[14:02] *** flightrecorder joined
[14:03] <jnthn> the first one

[14:05] <yarp> r: my Num @number = <1 2 3 4>; @number[4] = [+] @number;

[14:05] <p6eval> rakudo 5aa57b: OUTPUT«Type check failed in assignment to '$v'; expected 'Num' but got 'Int'␤  in block  at /tmp/uqd_5X2XmR:1␤␤»

[14:05] <yarp> nr: my Num @number = <1 2 3 4>; @number[4] = [+] @number;

[14:05] <p6eval> rakudo 5aa57b: OUTPUT«Type check failed in assignment to '$v'; expected 'Num' but got 'Int'␤  in block  at /tmp/00B337Ld2O:1␤␤»

[14:05] <p6eval> ..niecza v21-11-g09989b4:  ( no output )

[14:05] *** kaare__ joined
[14:06] <yarp> nr: my Num @number = <1 2 3 4>; @number[4] = [+] @number; @number.say;

[14:06] <p6eval> niecza v21-11-g09989b4: OUTPUT«1 2 3 4 10␤»

[14:06] <p6eval> ..rakudo 5aa57b: OUTPUT«Type check failed in assignment to '$v'; expected 'Num' but got 'Int'␤  in block  at /tmp/Vr6pUabaJ7:1␤␤»

[14:07] *** benabik left
[14:07] <cognominal> jnthn, would be possible to derive a rakudo grammar from HLL::Grammar ? Currently, it is only possible from nqp

[14:08] <jnthn> No.

[14:08] <cognominal> one cannot use at once nqp and rakudo pbc?

[14:09] <jnthn> Well, maybe you can load it, but then the bigger problem is that HLL::Gramamr ultimately derives from NQPCursor and thus NQPMu, and so you'd get NQP match objects, not Perl 6 ones.

[14:09] <cognominal> ha, thx

[14:10] <jnthn> We could either:

[14:10] <jnthn> 1) factor this with roles instead

[14:10] <jnthn> 2) make a Perl 6 module with some of the HLL stuff in and put it on modules.perl6.or

[14:10] <jnthn> *org

[14:11] <jnthn> I suggest doing it as roles though

[14:11] <jnthn> A QuoteParsing role, a ExpressionParsing one, etc. Could be quite nice.

[14:11] <jnthn> pmichaud++ may have other suggestions

[14:12] <moritz> btw the name conflict between methods in Any and grammar rules really bothers me

[14:13] <moritz> r: grammar A { token TOP { <tree> }; token tree { a } }; say A.parse('a')

[14:13] <p6eval> rakudo 5aa57b: OUTPUT«Cannot call 'tree'; none of these signatures match:␤:(Any:U : Mu *%_)␤:(Any:D : Mu *%_)␤:(Any:D : &c, Mu *%_)␤:(Any:D : Cool $count, Mu *%_)␤␤  in method tree at src/gen/CORE.setting:1224␤  in any !reduce at src/stage2/QRegex.nqp:582␤  in any !cursor_pass at src/st…

[14:13] *** FROGGS joined
[14:13] <moritz> and I wonder why. Isn't A much more specific than Any?

[14:13] <moritz> r: grammar A { token TOP { <tree> }; token tree { a } }; say A.^mro

[14:13] <p6eval> rakudo 5aa57b: OUTPUT«A() Grammar() Cursor() Any() Mu()␤»

[14:17] <jnthn> moritz: The problem is that we ended up with Any in $*ACTIONS

[14:17] <jnthn> cognominal++ already pointed out this issue once before

[14:18] <jnthn> So it calls Any.tree as an action method

[14:19] *** tomaw_ joined
[14:19] <moritz> I wonder if we could set $*ACTIONS to a singleton that either doesn't have any methods, or on which we don't call methods

[14:19] <pmurias> jnthn: error re paste: http://pastie.org/4738666

[14:20] <moritz> hm, or maybe a catch-all method that doesn't do any harm

[14:20] <moritz> doesn't sound very convincing to me though :(

[14:22] *** kaleem left
[14:23] <jnthn> pmurias: That appears when you add the --vmlibs line?

[14:24] *** tomaw_ is now known as tomaw

[14:24] *** doy joined
[14:24] <jnthn> Can't reproduce that here

[14:25] <jnthn> nqp -e "pir::compreg__Ps('nqp').compile('say(42)')()"

[14:25] <jnthn> 42

[14:25] <jnthn> nqp --vmlibs=perl6_group -e "pir::compreg__Ps('nqp').compile('say(42)')()"

[14:25] <jnthn> 42

[14:26] <pmurias> jnthn: I got confused

[14:26] <moritz> I could imagine that another process might be having trouble to compreg('nqp') without loading those libs first, no?

[14:26] <pmurias> yes, that is likely what's happening

[14:27] <jnthn> moritz: But if this *is* NQP... :)

[14:27] <moritz> but then I don't think that NQP doesn't emit the necessary compreg__SP call to allow that in first place

[14:27] <jnthn> moritz: but yeah, there's an issue here in that compreg is so global it oversteps the global boundary...

[14:27] <jnthn> moritz: It does :)

[14:27] <moritz> it does?

[14:28] <moritz> where?

[14:28] <jnthn> $nqpcomp.language('nqp');

[14:28] <jnthn> .language calls compreg

[14:29] <moritz> but that only happens if you call that method, no?

[14:29] <moritz> I mean, if I load the compiled NQP .pir file, it's not called, is it?

[14:29] <masak> oh hai, #perl6

[14:29] <moritz> so I can use compreg from within an nqp process

[14:30] *** Celelibi left
[14:30] <moritz> but I can't use it load the compiler from another process that loads NQP.pbc

[14:30] <moritz> oh hai masak

[14:30] <FROGGS> hi masak

[14:31] *** benabik joined
[14:32] *** Celelibi joined
[14:33] * masak been teaching git today :)

[14:34] <jnthn> moritz: ah, I see what you mean. Yeah, that's an issue

[14:34] *** spider-mario joined
[14:37] <sirrobert> r: class A { has $.foo; submethod BUILD { say "FOO: $!foo"; } }; say A.new(foo => 'bar');

[14:37] <p6eval> rakudo 5aa57b: OUTPUT«use of uninitialized value of type Any in string context  in submethod BUILD at /tmp/IdJh1JxoqR:1␤␤FOO: ␤A.new(foo => Any)␤»

[14:37] <tadzik> ohhai

[14:37] <sirrobert> some day I'll grok build... =)   How can I access $!foo with value "bar" in this build?

[14:37] <Su-Shee> masak: I wish git would make its interface as nice and clean as darcs' made theirs.

[14:37] <jnthn> sirrobert: BUILD runs *before* any defaults are applied

[14:38] <jnthn> sirrobert: You need to take :$foo as an argument in the BUILD

[14:38] <sirrobert> ahhhh ok, thanks

[14:38] <sirrobert> I did something like that but wrong syntax

[14:38] <jnthn> ah :)

[14:38] <masak> Su-Shee: git's interface is its weak spot, yes.

[14:39] <sirrobert> is there anything that runs after defaults are applied?

[14:40] <moritz> I don't think so

[14:40] <sirrobert> ok, thanks

[14:40] <moritz> note that if you write

[14:40] <moritz> submethod BUILD(:$!foo) { }

[14:40] <moritz> then it will fill in the attribute at the time that BUILD is called

[14:40] <moritz> (ie before the body of BUILD is run)

[14:41] <moritz> see also: http://doc.perl6.org/language/objects#Object+Construction

[14:43] *** cognominal left
[14:44] <[Coke]> jnthn: thanks for the pointers. I will fixup all that after $DAYJOB and see what's left.

[14:44] <jnthn> [Coke]: you're welcome :)

[14:48] *** cognominal joined
[14:49] <kresike> bye folks

[14:49] *** kresike left
[14:50] *** kst left
[14:50] *** yarp left
[14:51] *** yarp joined
[14:59] *** thou joined
[14:59] *** fasfdsafadsfas joined
[15:01] *** adu left
[15:01] *** adu joined
[15:02] *** yarp left
[15:03] *** adu left
[15:04] *** adu joined
[15:05] <felher> Is the callsame/nextsame/... stuff for methods borrowed from lisp?

[15:05] * moritz has no idea

[15:06] * jnthn would have to reach for AMOP to remember how similar their factoring of it is

[15:08] *** stopbit left
[15:08] <felher> Hm, AMOP sounds interesting :)

[15:08] * moritz would love some more (especially non-lispy) literature on MOPs

[15:09] <jnthn> Yeah, somebody should totally write some... :)

[15:09] * jnthn volunteers the guy who did 6mo...oh, wait...darn :)

[15:09] <felher> :P

[15:10] *** stopbit joined
[15:11] <jnthn> felher: AMOP is a nice read, if you can pretend to know LISP while you read it :)

[15:11] <masak> 6mo is so metacircular that even the guy who wrote it ends up pointing to himself :P

[15:11] <jnthn> I managed to pretend well enough to follow what was going on :)

[15:11] <masak> also, this line of jokes is so metacircular it ends up being mostly about itself, too. :P

[15:12] * masak gets sucked into a vortex of self-reference!

[15:12] <tadzik> you put yourself in it yourself!

[15:12] <tadzik> er, I mean,

[15:12] <jnthn> That must drive one loopy...

[15:13] * felher adds AMOP to his to-read-queue

[15:13] <sirrobert> so, I have a bit of code from Config::INI.  There's a method that gets run twice.  The first time, Config::INI::parse_file(...) works fine.  The second time it complains "Could not find symbol 'Config::INI::&parse_file'.  What would cause that?

[15:13] <sirrobert> err a bit of code that uses Config::INI

[15:13] <moritz> missing 'use' statement?

[15:13] <moritz> or the precompilation bug?

[15:13] <sirrobert> no, it works the first time (so it's being used and parse_file works)

[15:14] <sirrobert> I'm not precompiling

[15:14] <tadzik> uh-oh, that'

[15:14] <tadzik> s my module :P

[15:14] <sirrobert> let me see if I can put together a gist that reproduces it ...

[15:14] <moritz> that would be helpful, yes

[15:14] <sirrobert> tadzik: it doesn't "feel" like a problem with Config::INI ... =)

[15:14] <tadzik> good :)

[15:14] * tadzik decomutees

[15:15] *** kaare__ left
[15:16] <masak> tadzik: the best moment of this summer was when I realized that I could put the helmet in the helmet, and it would just *disappear* from the room, because it was now hidden in itself.

[15:16] <moritz> woah, carving out a piece of reality into a circulary graph!

[15:17] <FROGGS> masak: I've got the key from "the lost room" at home, I can put these things there if I dont need them anymore ;o)

[15:17] *** kaare_ joined
[15:18] <FROGGS> but its not that cool anyway

[15:19] <moritz> wow, I've got an email with subject 'Perl6 Help', and before opening it I thought "if you want help, go to the mailing lists or IRC". Then I opened it, and found that it was from somebody who actually wants to help us :-)

[15:19] *** ivan``_ joined
[15:19] <FROGGS> heh

[15:20] <FROGGS> BANG! surprise!

[15:20] <sirrobert> =)

[15:21] <FROGGS> and? where is he or she?

[15:21] <PerlJam> moritz: "Hi, I'm an independantly wealthy person who happens to love the direction Perl 6 is going; how do I contribute some $$$ to the Perl 6 effort?"

[15:21] <PerlJam> </dream>

[15:22] <moritz> PerlJam: nah, "just" offering some proof-reading / copy editing of documentation for now

[15:22] <skids> I'd settle for "I'm an independently wealthy person"

[15:22] *** sqirrel joined
[15:22] <PerlJam> heh, I was just about to write:  more likely, "I can write, Perl 6 needs docs, how can I help?"

[15:26] *** fasfdsafadsfas left
[15:27] <masak> "I took the liberty of finishing Perl 6 last Thursday between laundry and dinner. Merry Christmas!"

[15:27] <daxim> I'm *so* going to quote you out of context

[15:28] <GlitchMr> https://gist.github.com/3737998

[15:28] <GlitchMr> wow, I've made "serious" PHP code

[15:29] <masak> daxim: if you quote me, remember to use two layers of quotes.

[15:29] <daxim> »_«

[15:31] <daxim> did you design this, GlitchMr?

[15:31] <GlitchMr> perl6: print ｢\ // welcome \\ to // the \\ world /｣

[15:31] <p6eval> rakudo 5aa57b: OUTPUT«===SORRY!===␤Confused␤at /tmp/YegGFWLqdf:1␤»

[15:31] <p6eval> ..niecza v21-11-g09989b4: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unsupported use of bare 'print'; in Perl 6 please use .print if you meant $_, or use an explicit invocant or argument at /tmp/I2aaIhloJI line 1:␤------> [32mprint[33m⏏[31m ｢\ // welcome \\ to // the \\ world /｣[0m␤␤Confu…

[15:31] <GlitchMr> daxim: yes

[15:31] <PerlJam> GlitchMr: next, get rid of the named function requirement  :)

[15:31] <GlitchMr> std: print ｢\ // welcome \\ to // the \\ world /｣

[15:31] <p6eval> std b842bb3: OUTPUT«ok 00:00 41m␤»

[15:31] <daxim> I'd spell whatever - any

[15:32] <brrt> GlitchMr: yay kill php!

[15:32] <GlitchMr> Actually, 'off-rails.php' code itself is better

[15:32] *** flightrecorder left
[15:32] <GlitchMr> That was just example

[15:32] <GlitchMr> https://gist.github.com/3738030

[15:33] *** FROGGS left
[15:34] <PerlJam> GlitchMr: you've got to have the function that handles the dispatch called "crazy_train"

[15:37] <GlitchMr> Hmmm... I've feeling I could make this more awesome

[15:42] *** rhr left
[15:44] *** M_o_C joined
[15:45] *** Circlepuller joined
[15:45] *** Circlepuller_ left
[15:59] <sirrobert> ha

[15:59] <GlitchMr> https://gist.github.com/3738030

[16:00] <sirrobert> I isolated the problem... making a gist now

[16:00] <GlitchMr> Now it looks like average PHP code, doesn't it?

[16:00] <sirrobert> oohhhh... oneupsgistship, eh?

[16:00] <sirrobert> GlitchMr:  Yep, looks phpish =)

[16:01] <GlitchMr> I even put "die or die" because normal "exit" is boring :-)

[16:01] <sirrobert> What's interesting about the file?

[16:03] *** wk_ left
[16:03] <GlitchMr> Now, I should push this to GitHub

[16:04] *** brrt left
[16:06] <sirrobert> ok!  https://gist.github.com/3738213 shows the (weird) error I'm getting

[16:06] <sirrobert> I think it's a bug in 'require'

[16:07] <jnthn> What's in Loader?

[16:07] <jnthn> But yeah, weird.

[16:08] <PerlJam> .oO( something that stomps on Config::INI::parse_file )

[16:09] <sirrobert> nothing is in Loader

[16:09] *** JimmyZ left
[16:09] <sirrobert> or you can put junk in it... it doesn't really matter

[16:09] <sirrobert> the point is, "requiring" any file causes Config::INI::parse_file to break

[16:10] *** am0c joined
[16:11] <jnthn> oh, hmmmm

[16:11] <GlitchMr> https://gist.github.com/3738233

[16:11] <GlitchMr> I hope this README is realistic

[16:16] <daxim> it's terrible

[16:16] <daxim> seriously, this needs so much improvement I don't know where to start the critique

[16:17] <GlitchMr> that's the point

[16:17] <GlitchMr> Also, https://github.com/GlitchMr/php-off-the-rails

[16:18] <tadzik> I don't quite see why are you doing this :)

[16:19] <GlitchMr> To get PHP badge on Coderwall... perhaps?

[16:19] <daxim> no, I'm saying your English writing sucks donkey balls and this reflects poorly on your code crafting

[16:19] <daxim> do you want help?

[16:19] <tadzik> I'd be ashamed of such thing

[16:19] <GlitchMr> But it works!

[16:20] <GlitchMr> I mean, it works with simple "Hello, world!" programs

[16:20] <daxim> answer me

[16:21] <GlitchMr> No

[16:21] <GlitchMr> I know that my English sucks

[16:21] <jnthn> sirrobert: golfed it

[16:21] <sirrobert> looking (thanks)

[16:22] <jnthn> sirrobert: And think I found the fail

[16:23] <GlitchMr> If you would like to see anything more serious I've made, I would look into my JavaScript, Perl 6 or AWK code

[16:24] <GlitchMr> (too bad that GitHub doesn't recognize AWK)

[16:24] <timotimo> GlitchMr: i don't know php any more. what does your thingie do? :\

[16:24] <GlitchMr> timotimo: It works like Dancer, except it's worse

[16:25] <timotimo> so it's a small web framework?

[16:26] <timotimo> never tried dancer before

[16:26] <GlitchMr> Well, yes

[16:26] <GlitchMr> I can do stuff like

[16:26] *** benabik left
[16:26] <GlitchMr> get('/', function () { echo 'Hello, world!' })

[16:26] *** rhr joined
[16:26] <GlitchMr> And it shows "Hello, world!" on main page of site

[16:27] *** benabik joined
[16:28] <sirrobert> jnthn: back (impromptu meeting).  What's the skinny?

[16:28] <timotimo> mhm, that reminds me of the microframeworks they have in the python world

[16:28] <jnthn> sirrobert: Seems some mess in handling of GLOBAL

[16:29] <sirrobert> hm ok.  Can I help? =)

[16:29] <jnthn> sirrobert: I think I can see what needs fixing.

[16:29] <sirrobert> jnthn: cool, thanks-- I have a workaround in place in the meantime...  but it's ugly =)

[16:30] <GlitchMr> http://glitchmr.github.com/php-off-the-rails/

[16:30] <GlitchMr> :-)

[16:30] <jnthn> yeah, I can patch the issue this evening, I think

[16:30] <sirrobert> (not -- in the decrement sense =)

[16:33] <jnthn> sirrobert: Got a fix locally. spectesting

[16:33] <sirrobert> cool, thanks

[16:34] <sirrobert> jnthn++

[16:34] <jnthn> One of those "how did we not spot this before" things... 

[16:34] *** flightrecorder joined
[16:34] *** FROGGS joined
[16:35] <FROGGS> hi there

[16:36] <jnthn> hi FROGGS 

[16:38] <dalek> rakudo/nom: ec413ef | jnthn++ | src/Perl6/ModuleLoader.pm:

[16:38] <dalek> rakudo/nom: Fix busted GLOBAL preservation code.

[16:38] <dalek> rakudo/nom: 

[16:38] <dalek> rakudo/nom: Fixes a bug whereby require would clobber GLOBAL, discovered by

[16:38] <dalek> rakudo/nom: sirrobert++.

[16:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ec413efe4f

[16:38] <dalek> roast: efbc8d7 | jnthn++ | S11-modules/require.t:

[16:38] <dalek> roast: Test for require / GLOBAL.

[16:38] <dalek> roast: review: https://github.com/perl6/roast/commit/efbc8d7451

[16:44] *** ajoe joined
[16:45] *** ajoe left
[16:45] <daxim> https://rt.perl.org/rt3/Ticket/Display.html?id=114946

[16:45] <PerlJam> jnthn: What's the difference between get_hll_global and get_root_global ?

[16:46] *** ajoe joined
[16:46] *** MayDaniel joined
[16:46] *** kaare__ joined
[16:46] <jnthn> PerlJam: Where it looks

[16:46] <PerlJam> jnthn: I ask because there's also a get_hll_global on line 273 of ModuleLoader.pm that I wonder if it also shouldn't be changed.

[16:46] <jnthn> PerlJam: We were preserving GLOBAL in NQP land

[16:47] *** kaare_ left
[16:47] *** ajoe is now known as docdoctor

[16:49] <jnthn> PerlJam: er...yes

[16:50] * jnthn updates it and spectests again

[16:51] <jnthn> daxim: On that ticket, I'm not sure the point is optimizability so much as it is stopping people changing the arguments and accidentally updating things in the caller, unless that's specifically declared as being the intent.

[16:53] <daxim> the topic is currently under discussion on p5p, you should add your comment to the ticket

[16:54] <moritz> nr: sub f($x) { $x := 5; say $x }; f(42)

[16:54] <p6eval> niecza v21-11-g09989b4: OUTPUT«5␤»

[16:54] <p6eval> ..rakudo 5aa57b: OUTPUT«===SORRY!===␤Cannot use bind operator with this left-hand side␤at /tmp/RzWynDDFS4:1␤»

[16:55] *** dakkar left
[16:59] *** wk_ joined
[17:00] *** kaare_ joined
[17:00] *** kaare__ left
[17:04] *** leont joined
[17:08] *** kaare__ joined
[17:08] *** daxim left
[17:09] *** kaare_ left
[17:14] *** xinming_ joined
[17:17] *** xinming left
[17:17] <jnthn> dalek: done so

[17:18] <jnthn> er, daxim^^

[17:18] <jnthn> dinner &

[17:23] *** REPLeffect joined
[17:25] *** thou left
[17:30] <FROGGS> are here any perl6 windows ppl?

[17:30] <FROGGS> is there something I need to care about when installing rakudo?

[17:36] *** tgt joined
[17:38] <[Coke]> #perl6 seems to like reddit, neh?

[17:44] *** thou joined
[17:46] *** fhelmberger left
[17:48] <moritz> it's a love/hate relationship, I think :-)

[17:53] <dalek> glitchmr.github.com: 0cd0e94 | GlitchMr++ | _posts/2012-09-16-perl-6-changes-2012W37.md:

[17:53] <dalek> glitchmr.github.com: The message is actually more detailed - instead of "value" it shows variable name.

[17:53] <dalek> glitchmr.github.com: review: https://github.com/GlitchMr/glitchmr.github.com/commit/0cd0e94f08

[17:54] <dalek> glitchmr.github.com: 6973c33 | GlitchMr++ | _includes/footer.html:

[17:54] <dalek> glitchmr.github.com: Add my realname to footer

[17:54] <dalek> glitchmr.github.com: review: https://github.com/GlitchMr/glitchmr.github.com/commit/6973c33cb8

[17:58] <GlitchMr> http://glitchmr.github.com/perl-6-changes-2012W37.html

[17:59] <GlitchMr> I have feeling that Disqus is broken

[17:59] <GlitchMr> It shows "2 comments" but I only see one

[17:59] <GlitchMr> Second one is my comment

[18:02] <GlitchMr> Perhaps they have delays or something

[18:12] *** daniel-s__ joined
[18:13] *** kaare__ is now known as kaare_

[18:14] *** daniel-s_ left
[18:14] *** adu left
[18:15] *** adu joined
[18:17] *** kikulli joined
[18:18] <sisar> can someone point out what the problem is: https://gist.github.com/3738874 ? I'm unable to add a path to $PATH using export in Cygwin.

[18:19] <PerlJam> sisar: bogus (invisible) characters at the start of your command?

[18:20] <GlitchMr> eval: print "\302\226"

[18:20] <buubot_backup> GlitchMr: Â1

[18:20] <GlitchMr> eval: "\302\226"

[18:20] <buubot_backup> GlitchMr: Â

[18:20] <GlitchMr> that... makes sense

[18:21] <sisar> PerlJam: yes. I had just copy-pasted that from GlitchMr++'s page (http://glitchmr.github.com/how-i-learned-to-stop-worrying-and-install-the-panda.html). Typing by hand solved it. Thanks.

[18:22] *** leont left
[18:23] <GlitchMr> Wait... invisible characters on my page?

[18:23] <GlitchMr> That doesn't sound right

[18:24] <PerlJam> GlitchMr: It probably isn't on your page.  I just tried to reproduce by cut-n-paste and couldn't

[18:24] <GlitchMr> What is your browser?

[18:24] <PerlJam> I'm on chrome

[18:24] <sisar> GlitchMr: Firefox, 15.0

[18:25] <sisar> PerlJam: i selected that line by triple-click.

[18:25] <sisar> *triple-left-click

[18:25] <GlitchMr> Weird, it works for me

[18:26] <GlitchMr> Also Firefox 15.0, triple left click

[18:26] <GlitchMr> (well, I use Opera as my main browser, but other browsers are useful for testing stuff)

[18:26] <sisar> GlitchMr: maybe Cygwin has some problme ?

[18:26] <GlitchMr> Well, invisible characters wouldn't appear from nowhere

[18:26] <PerlJam> sisar: maybe you had some invisible stuff on the line prior to pasting?  Can you reproduce?

[18:27] <GlitchMr> But I'm on Linux, so perhaps it's something specific to Windows version of Firefox

[18:27] <sisar> PerlJam: yes, i can reproduce consistently.

[18:27] <PerlJam> could be.

[18:27] <sirrobert> exit

[18:27] <sirrobert> woops =)

[18:27] *** sirrobert left
[18:29] <GlitchMr> glitchmr@strawberry ~/g/g/_posts> file 2012-09-15-how-i-learned-to-stop-worrying-and-install-the-panda.md

[18:29] <GlitchMr> 2012-09-15-how-i-learned-to-stop-worrying-and-install-the-panda.md: ASCII text

[18:29] <GlitchMr> Interesting...

[18:30] <GlitchMr> It could be postprocessing, except when using hex editor I don't see anything strange near `export` command.

[18:33] <sisar> GlitchMr: after I have exported, how do make the changes to $PATH permanent ? Just opening and closing the Cygwin terminal does not help.

[18:33] <GlitchMr> Modify .bashrc?

[18:34] <GlitchMr> I guess

[18:34] <GlitchMr> It should be there

[18:34] <GlitchMr> Or... oh, you're on Windows

[18:34] <GlitchMr> Enter into Control Panel and modify system env variables

[18:34] <moritz> cygwin probably reads a .bashrc or _bashrc

[18:34] <sisar> GlitchMr: Cygwin has its own .bashrc. I'll try modifying that.

[18:35] <GlitchMr> sisar: or you may try http://support.microsoft.com/kb/310519

[18:36] * jnthn back

[18:37] <GlitchMr> glitchmr@strawberry ~/g/g/_site> perl -C -E 'while ($_ = getc) { say ord if $_ gt "\x7E" }' < how-i-learned-to-stop-worrying-and-install-the-panda.html 

[18:37] <GlitchMr> 960

[18:37] <dalek> rakudo/nom: 43ceae0 | jnthn++ | src/Perl6/ModuleLoader.pm:

[18:37] <dalek> rakudo/nom: Also fix setting loading; PerlJam++.

[18:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/43ceae0282

[18:37] <GlitchMr> That would be two pi symbols

[18:37] * sisar has to go to all this trouble to run perl6 on windows because Ubuntu just won't dual boot on my new Ultrabook :/

[18:38] <jnthn> sisar: Did you use the MSI, or are you doing source builds?

[18:38] <GlitchMr> Except... that wouldn't make sense because it also should find "☺"

[18:38] <sisar> jnthn: source builds

[18:39] <jnthn> OK. Was just asking in case the reaction was, "oh, there's an MSI?" :)

[18:39] *** stopbit left
[18:40] *** stopbit joined
[18:40] <GlitchMr> glitchmr@strawberry ~/g/g/_site> perl -CSDL -0nE 'for (split //) {say ord if $_ gt "\x7E"}' how-i-learned-to-stop-worrying-and-install-the-panda.html 

[18:40] <GlitchMr> 960

[18:40] <GlitchMr> 9786

[18:40] <GlitchMr> ... no invisible characters

[18:40] <GlitchMr> (except for spaces and linebreaks)

[18:41] <sisar> GlitchMr: its ok. Don't fret over it :-)

[18:41] <GlitchMr> :-)

[18:42] <GlitchMr> I've no idea why it happens, but it's not my site

[18:42] <GlitchMr> (I like having static HTML pages)

[18:42] <sisar> jnthn: lets say I install Rakudo using .msi. But then i will have to use the Windows Command prompt right ? Which sucks, btw. Or is there a better command shell for Windows ?

[18:43] <GlitchMr> sisar: yes, you can download git

[18:43] <GlitchMr> It includes bash

[18:43] <GlitchMr> This thing (http://msysgit.github.com/) includes bash

[18:43] <jnthn> sisar: You can use anything that will invoke the perl6.exe :)

[18:43] <sisar> jnthn: what do u use ?

[18:43] <sisar> cmd.exe ?

[18:43] <GlitchMr> I mean, "msysGit", not so called "Git for Windows"

[18:44] <jnthn> sisar: yes

[18:44] <jnthn> sisar: I don't really recommend it :P

[18:44] <sisar> :-)

[18:44] <GlitchMr> I have used bash.exe

[18:44] <GlitchMr> When I was using Windows

[18:45] <jnthn> I can run Rakudo just fine from the bash included with msysGit, anyways. 

[18:45] <GlitchMr> http://dl.dropbox.com/u/63913412/bytheway.png

[18:45] <jnthn> .oO( maybe I should switch to using that more often...if only my fingers can unlearn what they're used to... )

[18:45] <GlitchMr> I've found this screenshot

[18:46] <GlitchMr> It's rather old, but it shows bash from msysgit

[18:46] <GlitchMr> (just a word of warning - msysgit includes perl.exe - I would remove it and use some real Perl (such as Strawberry Perl))

[18:46] <GlitchMr> (well, ok, that Perl is real too, but it's old - 5.8)

[18:47] *** sirrobert joined
[18:47] <GlitchMr> o/

[18:49] <pmichaud> good afternoon, #perl6

[18:49] <tadzik> god evening #perl6

[18:50] <jnthn> afternoon, pmichaud  :)

[18:50] *** adu left
[18:51] *** kikulli left
[18:51] * pmichaud does test builds of rakudo+nqp on latest parrot

[18:52] <GlitchMr> glitchmr@strawberry:~$ `echo echo 42`

[18:52] <GlitchMr> 42

[18:52] <jnthn> ooh, I should re-test the latest Parrot too...

[18:52] <GlitchMr> Who needs eval when you have backticks ;-)

[18:52] <pmichaud> I'm testing both linux and win32 (strawberry/gmake)

[18:52] <jnthn> win32/msvc here

[18:52] <pmichaud> we could use a msv.... right :-)

[18:52] <pmichaud> also a 64-bit test.

[18:53] <pmichaud> (my windows is 32 bit)

[18:53] <jnthn> I'm on 64-bit here

[18:57] <jnthn> yeah, it built here today

[18:57] * jnthn installs it and builds an NQP and Rakudo against it.

[19:04] <jnthn> pmichaud: Builds went fine.

[19:04] *** alester joined
[19:05] *** docdoctor left
[19:06] <pmichaud> builds seem to be okay here too... spectesting

[19:06] <pmichaud> I get one fail under linux

[19:07] <pmichaud> t/spec/S02-types/declare.rakudo                         (Wstat: 256 Tests: 40 Failed: 0)

[19:07] <jnthn> oh, that's not just me

[19:07] <pmichaud>   Parse errors: Bad plan.  You planned 79 tests but ran 40.

[19:07] *** yarp joined
[19:08] <pmichaud> ...we don't have anyone scheduled for this month's release?

[19:08] <jnthn> r: use Test; my KeySet $paxa; isa_ok($paxa,KeySet  );

[19:08] <p6eval> rakudo ec413e: OUTPUT«Parameter '' requires an instance, but a type object was passed␤  in submethod perl at src/gen/CORE.setting:11396␤  in sub isa_ok at lib/Test.pm:151␤  in block  at /tmp/h24rarP9vl:1␤␤»

[19:09] <jnthn> wtf

[19:10] <jnthn> r: use Test; my KeySet $paxa; say $paxa

[19:10] <p6eval> rakudo ec413e: OUTPUT«Parameter '' requires an instance, but a type object was passed␤  in submethod gist at src/gen/CORE.setting:11395␤  in sub say at src/gen/CORE.setting:7173␤  in block  at /tmp/RuoSzyOCb3:1␤␤»

[19:10] <jnthn> r: use Test; my KeySet $paxa; say $paxa.WHAT

[19:10] <p6eval> rakudo ec413e: OUTPUT«Parameter '' requires an instance, but a type object was passed␤  in submethod gist at src/gen/CORE.setting:11395␤  in sub say at src/gen/CORE.setting:7173␤  in block  at /tmp/hJI7SFasBs:1␤␤»

[19:10] <jnthn> r: use Test; my KeySet $paxa; say $paxa.^name

[19:10] <p6eval> rakudo ec413e: OUTPUT«KeySet␤»

[19:10] *** M_o_C left
[19:10] *** docdoctor joined
[19:12] <jnthn> oh...

[19:12] <jnthn> commit de96bae506667ba3e639dcddbcb81bdb08fda955 Unfudge KeySet test for Rakudo

[19:12] <jnthn> GlitchMr: ^^ seems to have been a wrong unfudge?

[19:13] <GlitchMr> > KeySet.new

[19:13] <GlitchMr> keyset()

[19:13] <GlitchMr> huh?

[19:13] <GlitchMr> > my KeySet $fail = KeySet.new

[19:13] <masak> nr: keyset(); say "alive"

[19:13] <jnthn> pmichaud: Looks like an unfudging of a still failing test rather than a regression

[19:13] <GlitchMr> keyset()

[19:13] <p6eval> niecza v21-11-g09989b4: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤     'keyset' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1435 (die @ 5) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 37) ␤  at /h…

[19:13] <p6eval> ..rakudo 43ceae: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&keyset' called (line 1)␤»

[19:13] <jnthn> GlitchMr: Try just say KeySet

[19:14] <GlitchMr> This appears to be Rakudo bug

[19:14] <pmichaud> jnthn: wfm.  I'm getting fails in the windows build.

[19:14] <pmichaud> (doesn't look like anything major.)

[19:14] <jnthn> pmichaud: Mostly what's left is line endings issues

[19:14] <jnthn> pmichaud: I cleared up some of them this week.

[19:14] <GlitchMr> KeySet type is implemented, isn't it?

[19:14] <jnthn> Yeah

[19:14] <jnthn> submethod gist(Any:D $ : --> Str) { "keyset({ %!elems.keys».gist.join(', ') })" }

[19:15] <jnthn> Why is that a submethod rather than a multi method like all the other gist methods?

[19:15] <dalek> panda: 5e4ee61 | (Tobias Leich)++ | bin/panda.bat:

[19:15] <dalek> panda: batch wrapper for windows guys

[19:15] <dalek> panda: review: https://github.com/tadzik/panda/commit/5e4ee61bc4

[19:15] <dalek> panda: 56149b2 | tadzik++ | bin/panda.bat:

[19:15] <dalek> panda: Merge pull request #17 from FROGGS/master

[19:15] <dalek> panda: 

[19:15] <dalek> panda: added bin/panda.bat

[19:15] <dalek> panda: review: https://github.com/tadzik/panda/commit/56149b23b1

[19:15] <tadzik> FROGGS++

[19:15] <FROGGS> a bitch rapper, err batch wrapper

[19:16] *** brrt joined
[19:16] <tadzik> :P

[19:17] <FROGGS> but it doesnt fetch

[19:17] <FROGGS> ==> Fetching File::Spec

[19:17] <FROGGS> Too many arguments.

[19:17] <tadzik> :|

[19:17] <FROGGS> so there will be another pull request in a minute

[19:17] <FROGGS> :o)

[19:18] <tadzik> you fix it, I don't have a windows env :P

[19:18] <tadzik> okay :)

[19:18] <jnthn> pmichaud: Seeing if I can fix the bug rather than re-fudge the test :)

[19:19] <pmichaud> jnthn: I'm fine with either solution.  :)

[19:20] <jnthn> Got a patch here, spectesting it to make sure nothing else breaks :)

[19:21] *** brrt left
[19:22] <dalek> nqp/kill-nqpattr: 87eb6c8 | jnthn++ | src/core/NQPRoutine.pm:

[19:22] <dalek> nqp/kill-nqpattr: Stub in an NQPRegex type.

[19:22] <dalek> nqp/kill-nqpattr: 

[19:22] <dalek> nqp/kill-nqpattr: This will serve as the code object for regexes, rules and tokens, and

[19:22] <dalek> nqp/kill-nqpattr: will come to hold the caps, NFA, etc.

[19:22] <dalek> nqp/kill-nqpattr: review: https://github.com/perl6/nqp/commit/87eb6c88c2

[19:22] <dalek> nqp/kill-nqpattr: b24e129 | jnthn++ | src/NQP/World.pm:

[19:22] <dalek> nqp/kill-nqpattr: Enable create_code to creates code object types besides NQPRoutine.

[19:22] <dalek> nqp/kill-nqpattr: review: https://github.com/perl6/nqp/commit/b24e12996b

[19:22] <dalek> nqp/kill-nqpattr: 024c643 | jnthn++ | src/NQP/Actions.pm:

[19:22] <dalek> nqp/kill-nqpattr: Start creating regexes as NQPRegex.

[19:22] <dalek> nqp/kill-nqpattr: review: https://github.com/perl6/nqp/commit/024c643a40

[19:25] <FROGGS> how do I get a .pir out of a .pm again?

[19:25] <dalek> rakudo/nom: 690dadc | jnthn++ | src/core/Set.pm:

[19:25] <dalek> rakudo/nom: Fix 'say KeySet'.

[19:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/690dadc9cc

[19:25] <jnthn> perl6 --target=pir --output=Foo.pir Foo.pm

[19:25] <FROGGS> thanks

[19:25] <jnthn> pmichaud: That should do it.

[19:26] <pmichaud> jnthn++

[19:27] <jnthn> pmichaud: Planning to eliminate nqpattr, but not before this month's releases.

[19:28] <pmichaud> jnthn: that sounds excellent to me

[19:28] <jnthn> Then we'll be down to just one cheat. :)

[19:29] <pmichaud> when we no longer cheat, will we still be able to play this game?  ;-)

[19:30] <jnthn> Don't worry, I'm only counting the cheats that are actually in src/cheats :P

[19:30] <pmichaud> so, we don't count the cheats where we cheat on calling them cheats

[19:31] <jnthn> Right. We're cheating at cheating.

[19:31] <jnthn> Which is fine as we don't get caught not getting caught.

[19:31] <pmichaud> I have a fairly long list of win fails

[19:32] <pmichaud> https://gist.github.com/3739287

[19:35] <tadzik> jnthn: do you need some testing on kill-nqpattr?

[19:35] <tadzik> I'm rebuilding the toolchain anyway

[19:35] *** snearch joined
[19:36] <jnthn> tadzik: oh, not for a good while yet

[19:36] <tadzik> okay

[19:36] <jnthn> tadzik: This branch will probably take some time...I sure won't get through it today

[19:36] <jnthn> pmichaud: Hmm...that's a couple more than I get

[19:36] <tadzik> okay, sure

[19:37] <pmichaud> I'm afk, kid pickup

[19:39] <sorear> good * #perl6

[19:39] <tadzik> hi sorear 

[19:40] <masak> sorear! \o/

[19:41] *** docdoctor left
[19:50] <FROGGS> damn it, there is no prove on windows

[19:50] <tadzik> ah

[19:50] <GlitchMr> FROGGS: do you have Perl 5 installed?

[19:50] <tadzik> I was wondering whether it'd be better to use parrot-prove

[19:50] <FROGGS> who can I bug to have stuff in rakudo/bin?

[19:50] <jnthn> There...there isn't? :)

[19:50] <GlitchMr> prove is part of Perl 5

[19:50] <FROGGS> GlitchMr: I have several, but not in PATH right now, shouldnt it work without perl5?

[19:51] <GlitchMr> Add prove to PATH and it should be there

[19:51] <FROGGS> thats not the point

[19:51] <tadzik> FROGGS: obtw, we'll need some Test Harness in Perl 6 sooner or later :)

[19:51] <GlitchMr> glitchmr@strawberry ~/g/perl6-Text-Abbrev> prove -eperl6

[19:51] <GlitchMr> t/00-basic.t .. ok   

[19:51] <GlitchMr> All tests successful.

[19:52] <GlitchMr> It just works!

[19:52] *** cognominal left
[19:52] <FROGGS> GlitchMr: IMO it would make sense that rakudo comes with its own prove

[19:52] <masak> (Nicholas Clark)++ # https://rt.perl.org/rt3//Public/Bug/Display.html?id=114946

[19:53] <GlitchMr> Perhaps somebody could make App::Prove or something

[19:53] <FROGGS> tadzik: I believe thats to heavy for me to do

[19:53] <GlitchMr> But that isn't that important - Perl 5's prove works

[19:55] <jnthn> masak: aye, interesting ticket

[19:55] <jnthn> Two approaches enter. Which will leave? :)

[19:55] <masak> ULTIMATE IMPLEMENTOR SMACKDOWN

[19:56] <jnthn> That sounds painful :P

[19:56] <masak> it's for the benefit of the users!

[19:56] <tadzik> FROGGS: dang. That means I'll have to ;)

[19:56] <tadzik> ...try

[19:56] <FROGGS> meh

[19:56] <FROGGS> can't we get schwern to do it?

[19:57] <tadzik> hehe

[19:59] <pmichaud> jnthn: (#114946) .... ummm, I don't remember Rakudo working the way it appears to be working now.

[19:59] <pmichaud> (snapshot semantics)

[19:59] <jnthn> pmichaud: It's been that way ever since nom, when we eliminated chains of containers.

[20:00] <pmichaud> I don't remember eliminating chains of containers, either.

[20:00] <masak> ...which was a big improvement, IIRC.

[20:00] <pmichaud> I'm guessing that happened during my absence.

[20:00] <jnthn> I...thought we discussed the nom container model and agreed on it, way back? 

[20:00] *** cognominal joined
[20:01] <jnthn> I'm fairly sure there was some discussion on this.

[20:01] <pmichaud> I don't remember eliminating the chaining effect for ::=, no.

[20:02] <jnthn> :/

[20:02] <jnthn> Well, clearly the current model is good enough to go a year without anybody noticing anything amiss.

[20:02] <pmichaud> we even had spectests for the previous model

[20:04] <pmichaud> what does niecza think?

[20:04] *** docdoctor joined
[20:04] *** GlitchMr left
[20:04] <pmichaud> n: my $x = 3;  sub abc() { $x = 4; };  sub def($y) { say $y; abc(); say $y; };  def($x);  say $x;

[20:04] <p6eval> niecza v21-11-g09989b4: OUTPUT«3␤3␤4␤»

[20:04] <pmichaud> okay, niecza agrees with the current model.

[20:05] <jnthn> rn: my $x = 3;  sub abc() { $x = 4; };  sub def($y) { say $y; abc(); say $y; };  def($x);  say $x;

[20:05] <p6eval> rakudo 43ceae, niecza v21-11-g09989b4: OUTPUT«3␤3␤4␤»

[20:05] <pmichaud> r: my $x = 3;  sub abc() { $x = 4; };  sub def(\y) { say y; abc(); say y; };  def($x);  say $x;

[20:05] <p6eval> rakudo 43ceae: OUTPUT«3␤4␤4␤»

[20:06] <pmichaud> well, if rakudo and niecza both agree, I think I'm okay with the new semantic.  I'm just surprised by the change, is all.

[20:06] <jnthn> *nod*

[20:06] <pmichaud> the spec might need to be clarified on this point, though.

[20:07] * jnthn will wait and see what TimToady++ has to say

[20:08] <pmichaud> in particular, "Parameters and arguments" in S06 leads off with "By default, all parameters are readonly aliases to their corresponding arguments--the parameter is just another name for the original argument, but the argument can't be modified through it."

[20:08] <jnthn> Yeah, the current model contradicts that.

[20:09] <masak> hm, wow. that doesn't sound like pass-by-value to me.

[20:09] <pmichaud> right, it's not.

[20:09] <pmichaud> as I said, that's why the change surprises me.  :)

[20:09] <jnthn> If we have to do that, I'd rather find a way to track non-modifiability that doesn't involve multi-leve containers.

[20:09] <jnthn> *level

[20:09] <pmichaud> for readonly I don't think we need multi-level.

[20:09] <jnthn> For readonly we'd better be able to statically analyze a bunch of cases.

[20:09] <pmichaud> i.e., only add a container if the argument is rw

[20:10] <jnthn> Well, then we gotta be careful we don't get things bound into $foo that will flatten.

[20:10] <jnthn> Unless the model we have there makes that a non-issue.

[20:11] <pmichaud> it's still an issue but might end up not being one

[20:11] <jnthn> OK

[20:11] *** cognominal left
[20:11] <pmichaud> the other possibility is for readonly parameters to collapse any chains they find

[20:12] <pmichaud> although that might be tricky as well.

[20:12] <jnthn> Well, yeah

[20:12] <jnthn> We get a lot of conceptual simplicity out of knowing it's 1-deep

[20:13] <pmichaud> anyway, I suspect that technically speaking, RT #114946 is a legitimate bug per the spec, so either the spec has to change or the implementation does.

[20:13] <jnthn> Agree

[20:14] * TimToady still would like to see an ownership or capability model of writing such that passing an item out of a domain automatically defaults to readonly

[20:14] <dalek> panda: 6b188a2 | (Tobias Leich)++ | lib/Panda/Fetcher.pm:

[20:14] <dalek> panda: quote dest dir

[20:14] <dalek> panda: 

[20:14] <dalek> panda: There can be spaces in path like in the default directory under windows. HOME under windows is `C:\Documents and Settings\...`

[20:14] <dalek> panda: review: https://github.com/tadzik/panda/commit/6b188a2c27

[20:14] <dalek> panda: 978dec0 | tadzik++ | lib/Panda/Fetcher.pm:

[20:14] <dalek> panda: Merge pull request #18 from FROGGS/master

[20:14] <dalek> panda: 

[20:14] <dalek> panda: Quoting $dest dir

[20:14] <dalek> panda: review: https://github.com/tadzik/panda/commit/978dec0a7f

[20:14] <tadzik> FROGGS: are you developing on windowse usually?

[20:14] <jnthn> TimToady: How would the case discussed in the ticket work out with that, ooc?

[20:15] <pmichaud> TimToady: ah yes, I remember that discussion now.  I need to think on that one a bit more.

[20:15] <TimToady> I would need to look at it, but am a bit distracted at the moment...

[20:15] <jnthn> no hurry :)

[20:15] <pmichaud> yeah, I need to fold the yapc::eu discussions into my mental model a bit.

[20:16] <pmichaud> I remember the outlines of the ownership model we discussed; I just need to follow the ramifications a bit further.

[20:18] <pmichaud> essentially the idea was to eliminate the rw flag altogether in favor of a "who owns (i.e. can write to) this thing" model.

[20:18] <sorear> this ties into the question of how we're ever going to handle readonly aggregates

[20:19] <jnthn> bbi10

[20:19] * sorear will wait for pmichaud to understand the capability model before doing anything with it

[20:19] <pmichaud> sorear: that seems very reasonable; it'll undoubtedly require some negotiated exploring here :)

[20:19] <pmichaud> I'm afk also for a while

[20:19] *** cognominal joined
[20:20] <FROGGS> tadzik: last pull request for today ;o)

[20:20] <pmichaud> between europe trip and local stuff, my office is a disaster that needs cleaning + organizing

[20:20] <pmichaud> it's lowering my productivity by a noticeable amount

[20:20] <FROGGS> tadzik: I used to, but since a year ore more I'm on linux, but still have a few VMs for testing

[20:22] <tadzik> nice

[20:22] *** marmay left
[20:22] <FROGGS> its good to have these things, otherwise I wouldnt be able to test File::Spec right

[20:22] <FROGGS> I have Mac OSX and several BSD's too

[20:25] <dalek> panda: 7fce5bc | (Tobias Leich)++ | bin/panda.bat:

[20:25] <dalek> panda: using absolute path to original panda script file

[20:25] <dalek> panda: review: https://github.com/tadzik/panda/commit/7fce5bcb8f

[20:25] <dalek> panda: 50c4156 | (Tobias Leich)++ | lib/Panda/Fetcher.pm:

[20:25] <dalek> panda: Merge branch 'master' of github.com:FROGGS/panda

[20:25] <dalek> panda: review: https://github.com/tadzik/panda/commit/50c4156efd

[20:25] <dalek> panda: 2db413d | tadzik++ | bin/panda.bat:

[20:25] <dalek> panda: Merge pull request #19 from FROGGS/master

[20:25] <dalek> panda: 

[20:25] <dalek> panda: Using absolute path to panda script

[20:25] <dalek> panda: review: https://github.com/tadzik/panda/commit/2db413dc31

[20:25] <tadzik> FROGGS++ on hacking spree :)

[20:27] <FROGGS> btw, panda should make bat files too when copying stuff to bin on windows

[20:27] <tadzik> hm

[20:27] <FROGGS> in perl5 there is a pl2bat

[20:28] <tadzik> probably, yes

[20:28] *** kst joined
[20:28] <FROGGS> I mean, its not that important right now since there are not that many modules carrying stuff in bin around

[20:29] <tadzik> we'll need that eventually

[20:37] *** cognominal left
[20:39] *** benabik left
[20:40] *** benabik joined
[20:42] * tadzik sleeps. Good night #perl6

[20:42] *** mdupont left
[20:43] <FROGGS> gnight tadzik

[20:43] <felher> night tadzik 

[20:43] *** sqirrel left
[20:46] *** cognominal joined
[20:47] *** yarp left
[20:47] *** thou left
[20:47] *** kaare_ left
[20:48] *** orafu joined
[20:51] *** mucker left
[20:53] <masak> good knight o tadziku.

[20:54] *** mucker joined
[21:01] *** snearch left
[21:03] *** docdoctor left
[21:05] *** skids left
[21:06] *** mucker left
[21:06] *** flightrecorder left
[21:09] *** sivoais left
[21:14] *** FROGGS left
[21:14] *** tgt left
[21:21] *** sivoais joined
[21:29] <pmurias> .perl doesn't print out private attributes?

[21:31] <jnthn> No, by design

[21:31] <jnthn> (see long p6l discussion for more :))

[21:32] <pmurias> how can I print out them?

[21:32] <jnthn> Use the MOP

[21:32] <jnthn> .^attributes gives you attribute meta-objects, and you can call .get_value and pass in the object

[21:33] <pmurias> that's extremly annoying

[21:33] <jnthn> It's meant to be.

[21:34] <pmurias> and shouldn't .gist print out them?

[21:34] <jnthn> No.

[21:34] <jnthn> (We've already been there, and switched to keeping private things private.)

[21:35] <sorear> I think Damian even wanted to do away with get_value

[21:36] <pmurias> jnthn: where can I find the perl6 language thread?

[21:36] <jnthn> sorear: I think so

[21:37] <jnthn> pmurias: I forget the subject, and I don't know off hand where the best place to read the mailing list archive is

[21:37] <jnthn> I forget exactly when it was too. Hm

[21:38] <masak> sorear: Damian wanted encapsulation at the cost of the MOP.

[21:39] <jnthn> There needs to be an escape valve somewhere. I think we hid it reasonably well.

[21:39] <jnthn> It annoys pmurias++ sufficiently, at least. ;-)

[21:40] <pmurias> having to use a module for a common things seems annoying

[21:41] <masak> the thread is called "[perl6/specs] 58fe2d: [S12] spec setting and getting values of attribute..."

[21:42] <doy> isn't the point that externally accessing a private attribute *shouldn't* be a common thing?

[21:42] <jnthn> Exactly.

[21:47] <pmurias> doy: when debugging?

[21:47] <masak> when debugging, or when serializing, or when instantiating. that's when we typically like to break encapsulation.

[21:48] <masak> but .perl produces "normal" Perl 6 code, in some sense.

[21:48] <pmurias> and what about .gist?

[21:48] <jnthn> .oO( debugger feature idea! :) )

[21:50] <jnthn> hm, earlyish $dayjob tomorrow I guess 

[21:50] <jnthn> 'night

[21:54] <masak> 'night, jnthn

[21:57] *** thou joined
[21:57] <geekosaur> .gist is, as the name suggests, just the gist of it; it should probably print only enough to uniquely identify

[22:12] <masak> 'night

[22:15] *** am0c left
[22:18] *** whiteknight joined
[22:23] *** tharple joined
[22:25] *** tharple left
[22:28] *** raiph joined
[22:29] *** whiteknight left
[22:30] <raiph> hi all

[22:30] *** PacoAir left
[22:31] <sorear> hello raiph 

[22:31] <raiph> i'm curious to know who added the read only alias / ownership capability discussion to today's summary

[22:31] <raiph> hi sorear

[22:34] *** spider-mario left
[22:40] *** wamba left
[22:43] *** stopbit left
[22:48] *** pmurias left
[23:10] *** skids joined
[23:24] *** Circlepuller_ joined
[23:25] *** sisar left
[23:26] *** Circlepuller left
[23:28] *** fgomez left
[23:36] *** fgomez joined
[23:55] *** dayangkun joined
