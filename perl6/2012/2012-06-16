[00:06] *** spider-mario left
[00:09] *** whiteknight joined
[00:10] *** whiteknight is now known as Guest52318

[00:16] *** perlasshole joined
[00:17] *** ChanServ sets mode: +o diakopter

[00:26] *** perlasshole left
[00:32] *** ChanServ sets mode: -o diakopter

[00:33] *** Chillance left
[00:39] *** drbean joined
[00:50] *** PacoAir left
[01:00] *** cognominal left
[01:03] *** cognominal joined
[01:25] *** Guest52318 left
[02:06] *** tokuhiro_ joined
[02:11] *** tokuhiro_ left
[02:12] *** cognominal left
[02:14] *** cognominal joined
[02:24] *** Facefox left
[02:41] *** sisar joined
[02:41] <sisar> o/

[02:42] <sorear> o/

[02:42] *** adu left
[02:42] * sorear wonders whether to register for yapc::eu now or wait until committing

[02:50] *** quietfanatic joined
[02:51] <Timbus> r: <3 2 1> <<<>> <1 2 3> ==> say

[02:51] <p6eval> rakudo a2bacb: OUTPUT«False False True␤»

[02:52] <Timbus> i convinced someone that this is how you are supposed to lexicographically compare arry elements in p6

[02:52] <Timbus> haaa

[02:55] <sorear> o/ quietfanatic !

[02:56] <sorear> n: say qq:to(moo);␤   foo\n   bar␤   moo␤

[02:56] <p6eval> niecza v18-7-ga660099: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unable to resolve method postcircumfix:<( )> in type Any␤  at /tmp/QyyHeyq3dz line 1 (ANON @ 2) ␤  at <unknown> line 0 (ExitRunloop @ 0)  at /tmp/QyyHeyq3dz line 1:␤------> [32msay qq:to(moo)[33m⏏[31m;[0m␤␤Two terms in a …

[02:56] <sorear> n: say qq:to[moo];␤   foo\n   bar␤   moo␤

[02:56] <p6eval> niecza v18-7-ga660099: OUTPUT«foo␤   bar␤␤»

[03:05] <pmichaud> sorear:  are you thinking of giving a talk at yapc::eu ?

[03:08] *** Chillance joined
[03:18] <sorear> pmichaud: hadn't been

[03:21] <pmichaud> sorear: oh, I hope you will.  Even a 20 minute talk on Niecza would be awesome.

[03:22] <pmichaud> at any rate, registering for the conference isn't the same as purchasing a ticket -- that's typically a second step

[03:22] <pmichaud> and many yapc's will wave the ticket cost for speakers with accepted talks

[03:22] <pmichaud> *waive

[03:28] <sorear> *stares blankly*

[03:28] <sorear> I have never given a talk before ...

[03:28] <pmichaud> did you get to see any of the talk videos for yapc::na this week, ooc?

[03:32] <pmichaud> anyway, I don't want to be a pest or too pushy.  I know that a talk on niecza (from its primary author) would be incredibly well received, and I suspect many of us here on #perl6 would be extremely glad to help one take place.  :)

[03:36] <sorear> I haven't looked at any of them yet, no.  I want to do that eventually

[03:45] *** z3ndrag0n joined
[04:08] *** Chillance left
[04:17] *** mucker left
[04:21] *** gardnan joined
[04:34] *** gardnan left
[04:36] *** gardnan joined
[04:39] *** gardnan left
[04:40] *** gardnan joined
[04:53] *** crab2313 joined
[04:55] *** xinming joined
[05:21] <gardnan> perl6: say "Testing the eval bot";

[05:21] <p6eval> rakudo a2bacb, niecza v18-7-ga660099, pugs: OUTPUT«Testing the eval bot␤»

[05:24] <sisar> https://bugs.ruby-lang.org/issues/5011 -- "Add Perl 6-like main method definition support..." -- matz (Ruby's chief designer) will decide in July on the feature request's fate. Languages have started stealing ideas from perl6, yay !

[05:25] <gardnan> the main method definition was a pretty great idea, no wonder

[05:25] <sisar> gardnan: ate

[05:25] <sorear> gardnan: Hello and welcome to #perl6

[05:25] <sisar> *aye

[05:25] <gardnan> thanks

[05:31] <sisar> adu: is http://pastebin.com/W297Nn8m the latest version of your Go grammar ?

[05:36] *** cog__ left
[05:36] *** cog__ joined
[05:40] *** cognominal left
[05:40] *** cognominal joined
[05:41] <quietfanatic> Having a MAIN method is a convenient way to allow modules to be used either as modules or as programs.

[06:00] *** gardnan left
[06:02] <moritz> \o

[06:06] *** skids left
[06:07] * sorear haz a yapc::eu account

[06:07] <sorear> o/ moritz

[06:08] <pmichaud> moritz: o/

[06:19] *** adu joined
[06:20] *** simcop2387 is now known as philipjfry

[06:21] *** philipjfry is now known as simcop2387

[06:21] *** eternaleye is now known as eternaleye_

[06:21] *** eternaleye_ is now known as eternaleye__

[06:21] *** eternaleye__ is now known as eternaleye

[06:22] <dalek> specs: a712f0b | moritz++ | S03-operators.pod:

[06:22] <dalek> specs: [S03] remove sleep, abs and sin as examples of named unary operators

[06:22] <dalek> specs: 

[06:22] <dalek> specs: There seems to be no good rule for deciding which built-ins are named

[06:22] <dalek> specs: unaries, so now they are all listops.

[06:22] <dalek> specs: Except temp and let, whose typical usage requires tighter precedence

[06:22] <dalek> specs: than item assignment

[06:22] <dalek> specs: review: https://github.com/perl6/specs/commit/a712f0b6e4

[06:28] <sorear> rn: say defined 1 && 0

[06:28] <p6eval> rakudo a2bacb, niecza v18-7-ga660099: OUTPUT«True␤»

[06:28] <sorear> oh, that was fixed

[06:32] *** adu left
[06:32] *** birdwindupbird joined
[06:33] *** cog__ left
[06:34] *** cog_ joined
[06:44] <sorear> rn: say {;}.WHAT

[06:44] <p6eval> rakudo a2bacb, niecza v18-7-ga660099: OUTPUT«Block()␤»

[06:44] <sorear> rn: say {}.WHAT

[06:44] <p6eval> rakudo a2bacb, niecza v18-7-ga660099: OUTPUT«Hash()␤»

[06:45] <sorear> rn: say {; a => 2}.WHAT

[06:45] <p6eval> rakudo a2bacb, niecza v18-7-ga660099: OUTPUT«Block()␤»

[06:45] <sorear> rn: say { a => 2; }.WHAT

[06:45] <p6eval> rakudo a2bacb, niecza v18-7-ga660099: OUTPUT«Hash()␤»

[06:45] <sorear> rn: say { a => 2;; }.WHAT

[06:45] <p6eval> rakudo a2bacb, niecza v18-7-ga660099: OUTPUT«Block()␤»

[06:45] <sorear> rn: say { a => 2, }.WHAT

[06:45] <p6eval> rakudo a2bacb, niecza v18-7-ga660099: OUTPUT«Hash()␤»

[07:06] *** GlitchMr joined
[07:07] <sorear> o/ GlitchMr

[07:07] <GlitchMr> Hi

[07:10] <sisar> which are the other method(s) which, like the .infinite method, return True/False ?

[07:11] <sorear> .Bool, .defined, .^isa, .^does, ...

[07:11] <sisar> sorear: thanks

[07:13] <sisar> rn: (1..Inf).infinite.say;

[07:13] <p6eval> niecza v18-7-ga660099: OUTPUT«Unhandled exception: Unable to resolve method infinite in type Range␤  at /tmp/wORS5Tvx1i line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3917 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3918 (module-CORE @ 562) ␤  at /h…

[07:13] <p6eval> ..rakudo a2bacb: OUTPUT«True␤»

[07:13] <sisar> r: (1..Inf).finite.say;

[07:13] <p6eval> rakudo a2bacb: OUTPUT«No such method 'finite' for invocant of type 'Range'␤  in block <anon> at /tmp/ZVvMobxp21:1␤␤»

[07:14] <sisar> shouldn't there be a .finite method too ? after all, its shorter than .infinite .

[07:14] <sorear> I am not convinced end users should be touching .infinite at all

[07:14] * sorear pokes pmichaud

[07:15] <sisar> sorear: why ?

[07:16] <sorear> because it's unreliable

[07:17] <sorear> it's a hint to the list engine, not a hard fact about the list

[07:18] <sisar> sorear: its allowed to return Mu when it's not sure itself.

[07:18] <sisar> not sure about its finiteness

[07:20] <sisar> sorear: when is it unreliable ? example ?

[07:20] <sorear> I didn't know it supported unknownness

[07:20] <dalek> specs: ec2d4c8 | moritz++ | S03-operators.pod:

[07:20] <dalek> specs: [S03] more Named unary cleanup

[07:20] <dalek> specs: review: https://github.com/perl6/specs/commit/ec2d4c829b

[07:21] <sisar> sorear: have you seen pmichaud++'s talk on Iterators ? its really interesting.

[07:21] <sorear> sisar: not yet

[07:25] <sisar> it can be seen at http://www.youtube.com/watch?v=rsccacoabaE, pmichaud++ !

[07:27] <GlitchMr> nrrr: (1 .. 1e30).infinite

[07:27] <GlitchMr> nr: (1 .. 1e30).infinite

[07:27] <GlitchMr> heh

[07:27] <p6eval> niecza v18-7-ga660099: OUTPUT«Unhandled exception: Unable to resolve method infinite in type Range␤  at /tmp/X8WRt6oSva line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3917 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3918 (module-CORE @ 562) ␤  at /h…

[07:27] <p6eval> ..rakudo a2bacb:  ( no output )

[07:27] <GlitchMr> r: print (1 .. 1e30).infinite

[07:27] <p6eval> rakudo a2bacb: OUTPUT«False»

[07:28] <GlitchMr> (but, it's nearly infinite list)

[07:28] <sorear> r: print (1 .. 1e308).infinite

[07:28] <p6eval> rakudo a2bacb: OUTPUT«False»

[07:28] <sorear> r: print (1 .. 1e309).infinite

[07:28] <p6eval> rakudo a2bacb: OUTPUT«True»

[07:29] <sisar> i call bug ^

[07:29] *** crab2313 left
[07:29] <GlitchMr> nr: print 1e309

[07:29] <p6eval> rakudo a2bacb, niecza v18-7-ga660099: OUTPUT«Inf»

[07:29] <GlitchMr> It's infintity

[07:29] <GlitchMr> When number has e, it's floating point number

[07:29] <GlitchMr> So 1e0 is different to 1.0 and different to 1

[07:30] <GlitchMr> niecza> 1e0 !== 1.0

[07:30] <GlitchMr> False

[07:30] <GlitchMr> niecza> 1e0 === 1.0

[07:30] <GlitchMr> False

[07:30] <GlitchMr> what?

[07:30] <GlitchMr> nr: print 1e0 !== 1.0

[07:30] <p6eval> rakudo a2bacb, niecza v18-7-ga660099: OUTPUT«False»

[07:30] <GlitchMr> nr: print 1e0 === 1.0

[07:30] <p6eval> rakudo a2bacb, niecza v18-7-ga660099: OUTPUT«False»

[07:30] <sorear> nr: print 1e0 !=== 1.0

[07:30] <p6eval> rakudo a2bacb, niecza v18-7-ga660099: OUTPUT«True»

[07:31] <GlitchMr> !=== what?

[07:31] <sorear> !===, ![===]

[07:31] <sorear> meta-operator

[07:31] <sorear> != is a special case because it does not mean ![=]

[07:31] <sisar> oh !

[07:31] <sorear> but in all other cases you negate by prepending !

[07:32] <GlitchMr> That is... confusing...

[07:32] <sorear> perhaps we should warn on !==, it doesn't behave as a Python programmer would expect

[07:32] <GlitchMr> Python is not the case

[07:32] <sisar> r: say 5 !<= 5;

[07:32] <p6eval> rakudo a2bacb: OUTPUT«False␤»

[07:32] <GlitchMr> It's more about JavaScript and PHP programmers

[07:32] <GlitchMr> Python only has ==, !=, is and is not

[07:32] <sorear> oh

[07:32] <sorear> well Javascript and PHP programmers then :)

[07:33] <sorear> a bit rusty on all three

[07:33] <GlitchMr> And "is" is implementation-defined with immutable types in Python

[07:34] <GlitchMr> "1.0 is 1.0" could return True, but it also could return False

[07:35] <GlitchMr> http://paste.uk.to/b2b992f5

[07:35] <GlitchMr> ...

[07:40] <sorear> I guess something like

[07:40] <GlitchMr> === is also in Ruby, but it works completely differently than in PHP, JavaScript and Perl 6

[07:40] <sorear> 1. constants are interned within each compilation unit

[07:40] <sorear> 2. small integers are pre-allocated so that 1+1 is faster

[07:40] <GlitchMr> Yes, it's interning optimilization

[07:40] <sorear> 3. no such optimization exists for float

[07:41] <GlitchMr> Yes, and I think they're compared by object id, so 1.0 is 1.0 (just because first 1.0 is destroyed afer getting object id)

[07:42] *** cog__ joined
[07:43] <GlitchMr> In Ruby, === is more like ~~ in Perl (except somewhat less flexible)

[07:43] <dalek> niecza/non-bootstrap: 7cfd6b3 | sorear++ | lib/ (2 files):

[07:43] <dalek> niecza/non-bootstrap: Actions pt 8

[07:43] <dalek> niecza/non-bootstrap: review: https://github.com/sorear/niecza/commit/7cfd6b3eab

[07:45] *** cog_ left
[07:58] *** sergot joined
[07:59] <sergot> hi o/

[08:07] <sorear> o/

[08:10] *** cog_ joined
[08:13] *** cog__ left
[08:17] *** brrt joined
[08:28] *** GlitchMr left
[08:38] *** JimmyZ joined
[08:49] *** GlitchMr joined
[09:07] *** JimmyZ left
[09:10] *** MayDaniel joined
[09:16] *** MayDaniel left
[09:21] <GlitchMr> http://modules.perl6.org/

[09:21] <GlitchMr> Why I don't see badges aside of panda badge?

[09:23] <GlitchMr> Did it seriously depended on... masak/proto?

[09:24] <GlitchMr> https://github.com/perl6/ecosystem/commit/941013fd3bacaefeedeb3c8e47ffe4ea6e58d033

[09:24] <GlitchMr> ...

[09:25] <GlitchMr> what?

[09:27] <GlitchMr> proto is removed and everything breaks

[09:32] *** kaare_ joined
[09:37] *** brrt left
[09:47] *** Gesh joined
[09:59] *** brrt joined
[10:01] *** birdwindupbird left
[10:05] *** cog__ joined
[10:06] *** cog_ left
[10:07] *** sergot left
[10:12] *** JimmyZ joined
[10:19] <moritz> r: (1..*).map(&sqrt).infinite.say

[10:19] <p6eval> rakudo a2bacb: OUTPUT«Mu()␤»

[10:20] <timotimo> huh, perl6 can calculate the limit of any sequence when approaching infinity?

[10:22] *** whiteknight joined
[10:22] *** whiteknight is now known as Guest59957

[10:24] *** fridim_ joined
[10:26] <moritz> no

[10:28] *** spider-mario joined
[10:31] *** quietfanatic left
[10:34] *** infidel joined
[10:34] *** infidel left
[10:36] *** mberends joined
[10:37] <mberends> loliblogged! http://blogs.perl.org/users/martin_berends/2012/06/rakudo-perl-6-on-android-ics-403.html

[10:37] <phenny> mberends: 07 Dec 14:01Z <moritz> tell mberends that the timing code in Test.pm has a wee problem -- the assignment to $time_after changes the return value, which should be True for passing tests, and False for failed ones. Now it's just always a timestamp

[10:38] *** cog__ left
[10:39] <moritz> \o mberends 

[10:39] <colomon> mberends++

[10:39] <mberends> o/ moritz, all set?

[10:39] *** cog__ joined
[10:40] <moritz> mberends: modulo clothing, yes

[10:40] <mberends> o/ colomon

[10:42] <moritz> mberends++ # rakudo on android

[10:44] *** brrt left
[10:45] <moritz> I guess much of the disc space used is from parrot's .git dir

[10:45] <moritz> that's 120M on my machiine

[10:45] <mberends> the Linux Installer part was the most difficult. While I was digging in to make it work, I was thinking "I could do this better". It is large Yak in need of a shave.

[10:47] <mberends> aye, parrot's .git is 110M on android

[10:52] *** JimmyZ left
[10:53] *** JimmyZ joined
[10:57] <tadzik> ooh, it's mberends! \o/

[10:57] <mberends> yo tadzik!

[10:58] <tadzik> so I guess it's my turn for Rakudo on maemo :)

[10:58] <mberends> int.eresting

[10:58] <tadzik> snarkyboojum did that before I think

[11:01] *** harmil1 joined
[11:03] *** harmil left
[11:13] *** grondilu joined
[11:14] <grondilu> what would be the equivalent of Perl5's overload::constant?

[11:14] <moritz> what does that do?

[11:15] <grondilu> it overloads litteral values.

[11:15] <moritz> I don't think there's a convenient way right now

[11:16] <moritz> you can define your own 'is parsed' macros once that's implemented

[11:17] <grondilu> Ok.

[11:18] <moritz> though Perl 6 tries much harder not to mange stuff too much

[11:18] <moritz> grondilu: I'm curious, what's your use case?

[11:19] <grondilu> overloading string litteral to have them instantiate a class if they match a particular pattern.

[11:20] <grondilu> s/litteral/litterals/

[11:20] <GlitchMr> grondilu, 0 but True

[11:20] <moritz> grondilu: and what's your use case?

[11:21] <grondilu> it's for my bitcoin library.

[11:21] <moritz> and what do you need it for in your bitcoin library?

[11:22] <GlitchMr> use Math::BigInt is silly in Perl 5 as it blocks you from using floating point numerals.

[11:22] <GlitchMr> It's easier to explicitely declare classes

[11:22] <grondilu> I'd like to write something like:  my $addr = "1SomeBitsoinAddressxxxxx"; so that addr get automatically checked and instantiated as a Bitcoin::Address.

[11:23] <GlitchMr> ...

[11:23] <GlitchMr> This is abuse of language...

[11:23] <moritz> grondilu: that would be too magic for my taste, but I can see why want that

[11:24] * grondilu like some magic in his perl scripts :)

[11:24] <GlitchMr> my $addr = Bitcoin("1SomeBitsoinAddressxxxxx");

[11:24] <moritz> I'd just define a   sub prefix:<btc>($str) { Bitcoin::Address.new($str) }

[11:24] <GlitchMr> Why not just use constructor?

[11:24] <moritz> and then write   btc '1SomeBitsoinAddressxxxxx'

[11:24] <grondilu> GlitchMr: because it is much longer to type!

[11:25] *** PacoAir joined
[11:25] <grondilu> I did it in Perl5 and it works perfectly.

[11:25] <GlitchMr> prefix?

[11:25] <GlitchMr> It could be sub btc ($str) {} as well

[11:26] <grondilu> a prefix, maybe.  But not "btc".

[11:35] <moritz> GlitchMr: I proposed a prefix because of its tighter precedence, which might be desirable in this case

[11:37] <tadzik> grondilu: you could maybe make it work as my Bitcoin::Address $addr = "1SomeBitsoinAddressxxxxx"; without much magic

[11:37] <tadzik> or maybe with some

[11:39] <grondilu> the syntax « my Bitcoin::Address $addr .= new: "1btdcaddr...."; » is implemented already.

[11:39] <moritz> tadzik: I doubt it works without magic

[11:40] <grondilu> If user doesn't want magic, I can sill add a ':nomagic' option in the module's import.

[11:40] <tadzik> the type object would have to be a proxy and a factory

[11:41] <tadzik> grondilu: I'd rather have :yesmagic and sane defaults

[11:41] *** JimmyZ_ joined
[11:42] <timotimo> grondilu: will "my Foo $bar .= meth args" always desugar to my Foo $bar = Foo.meth args"?

[11:42] <grondilu> a "use Bitcoin :magic;" would look nice indeed.

[11:44] *** JimmyZ left
[11:44] *** JimmyZ_ is now known as JimmyZ

[11:44] <GlitchMr> nr: class Foo { method meth { print @_.perl } }; my Foo $bar .= meth 2, 2

[11:44] <p6eval> niecza v18-7-ga660099: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Two terms in a row (method call requires colon or parens to take arguments) at /tmp/AlPvH1oVu8 line 1:␤------> [32m print @_.perl } }; my Foo $bar .= meth [33m⏏[31m2, 2[0m␤␤Parse failed␤␤»

[11:44] <p6eval> ..rakudo a2bacb: OUTPUT«===SORRY!===␤Placeholder variables cannot be used in a method at line 2, near "}; my Foo "␤»

[11:44] <GlitchMr> nr: class Foo { method meth { print @_.perl } }; my Foo $bar .= meth(2, 2)

[11:44] <p6eval> niecza v18-7-ga660099: OUTPUT«Potential difficulties:␤  $bar is declared but not used at /tmp/aC41kf1tQS line 1:␤------> [32mmethod meth { print @_.perl } }; my Foo [33m⏏[31m$bar .= meth(2, 2)[0m␤␤(2, 2).listUnhandled exception: Nominal type check failed for scalar store; got Bool, …

[11:44] <p6eval> ..rakudo a2bacb: OUTPUT«===SORRY!===␤Placeholder variables cannot be used in a method at line 2, near "}; my Foo "␤»

[11:47] <grondilu> you need to use the ':' after the method name if you use arguments.

[11:48] *** birdwindupbird joined
[11:48] <grondilu> p6: class Foo { method new { self.Mu::new } }; my Foo $f .= new: Whatever;'

[11:48] <p6eval> niecza v18-7-ga660099: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Bogus statement at /tmp/uINz0VnVze line 1:␤------> [32mMu::new } }; my Foo $f .= new: Whatever;[33m⏏[31m'[0m␤␤Parse failed␤␤»

[11:48] <p6eval> ..rakudo a2bacb: OUTPUT«===SORRY!===␤Confused␤at /tmp/QLk6oS6Zug:1␤»

[11:48] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected end of input␤    expecting "\\", variable name or "'"␤    at /tmp/lyl6qZPQpe line 2, column 1␤»

[11:48] <grondilu> oops

[11:58] *** grondilu left
[11:58] *** grondilu joined
[11:58] *** grondilu left
[11:58] *** grondilu joined
[12:04] <grondilu> r: class Foo { method new($) { self.bless: * } }; say my Foo $f .= new: 1;

[12:04] <p6eval> rakudo a2bacb: OUTPUT«Foo.new()␤»

[12:06] *** sisar left
[12:12] *** mberends left
[12:16] *** crab2313 joined
[12:20] *** crab2313 left
[12:21] *** crab joined
[12:21] *** crab is now known as crab2313

[12:42] *** grondilu left
[12:43] *** grondilu joined
[12:45] *** n0den1te joined
[12:49] *** JimmyZ left
[12:51] <n0den1te> how can I enforce a type into a sub signature?

[12:51] <n0den1te> r: sub foo ($foobar, int :$foo) { my $blah //= $foobar // $foo; say $blah;}; foo "bummer"; foo 42.85;

[12:51] <p6eval> rakudo a2bacb: OUTPUT«bummer␤42.85␤»

[12:51] <n0den1te> r: sub foo ($foobar, Int :$foo) { my $blah //= $foobar // $foo; say $blah;}; foo "bummer"; foo 42.85;

[12:51] <p6eval> rakudo a2bacb: OUTPUT«bummer␤42.85␤»

[12:52] <n0den1te> r: sub foo ($foobar, Int :$foo) { my $blah //= $foobar; say $blah;}; foo "bummer"; foo 42.85;

[12:52] <p6eval> rakudo a2bacb: OUTPUT«bummer␤42.85␤»

[12:53] <n0den1te> r: sub foo ($foobar, Int :$foo) { say $foobar, "---", $foo; }; foo "bummer"; foo 42.85; foo 84;

[12:53] <p6eval> rakudo a2bacb: OUTPUT«bummer---Int()␤42.85---Int()␤84---Int()␤»

[12:54] <n0den1te> I was expecting Any()---84 in the last case. Am I totally off the mark here?

[12:56] *** tokuhiro_ joined
[12:57] *** JimmyZ joined
[12:59] *** n0den1te left
[13:00] *** cog__ left
[13:01] *** cog__ joined
[13:01] *** vmspb joined
[13:05] <vmspb> Hi

[13:05] <vmspb> I see Rakudo-2012.04 in Ubuntu Quantal (12.10), but it's broken

[13:05] <vmspb> rakudo-0.1~2012.04.1-2 [i386] depends on nqp-0.1~2012.04.1-2,

[13:05] <vmspb> but nqp-0.1~2012.04.1-2 don't exist, is only nqp-0.1~2012.04.1-3

[13:07] *** Gesh left
[13:13] *** Patterner left
[13:15] *** Psyche^ joined
[13:15] *** Psyche^ is now known as Patterner

[13:22] *** MayDaniel joined
[13:23] *** jaldhar left
[13:24] *** grondilu left
[13:30] *** JimmyZ left
[13:36] <tadzik> vmspb: that's probably Ubuntu maintainers' fault

[13:37] *** JimmyZ joined
[13:46] *** sisar joined
[14:00] *** JimmyZ_ joined
[14:01] *** JimmyZ left
[14:02] *** JimmyZ_ is now known as JimmyZ

[14:05] *** fgomez left
[14:07] *** cog__ left
[14:07] *** sergot joined
[14:08] *** skids joined
[14:09] *** cog_ joined
[14:09] *** cognominal left
[14:09] *** cognominal joined
[14:14] *** fgomez joined
[14:23] *** crab2313 left
[14:27] *** tomaw joined
[14:28] *** cog_ left
[14:28] *** cog_ joined
[14:35] *** cog_ left
[14:35] *** cog_ joined
[14:42] *** tokuhiro_ left
[14:43] *** tokuhiro_ joined
[14:45] *** zby_home joined
[14:47] *** carlin is now known as glass

[14:47] *** glass is now known as carlin

[14:47] *** tokuhiro_ left
[14:48] *** brrt joined
[14:56] *** pupoque joined
[15:00] *** jaldhar joined
[15:10] *** jaldhar left
[15:13] *** jaldhar joined
[15:20] *** cognominal left
[15:21] *** cognominal joined
[15:25] *** fridim_ left
[15:25] *** sergot left
[15:26] *** cognominal left
[15:27] *** cognominal joined
[15:31] *** pupoque left
[15:43] <pmichaud> good morning, #perl6

[15:46] *** brrt left
[15:47] <tadzik> good morning pmichaud 

[15:48] *** brrt joined
[15:50] *** tyatpi joined
[15:58] <sisar> pmichaud: http://irclog.perlgeek.de/perl6/2012-06-16#i_5732574

[15:59] <sisar> moritz: ping

[16:00] <sisar> moritz's Away Msg says: 'getting married' :)

[16:04] <sisar> can someone have a look at JSON:Tiny's grammar (https://github.com/moritz/json/blob/master/lib/JSON/Tiny/Grammar.pm) and tell me if it can handle an both representations of an empty arraylist indicated i.e. [] and [ ].

[16:04] <timotimo> oh, so that's the thing he's busy with and where he's inviting many people

[16:04] <sisar> *indicated by

[16:04] <timotimo> that's quite neat :)

[16:05] <sisar> timotimo: :)

[16:12] <sorear> good * #perl6

[16:12] <pmichaud> sisar: (JSON) looking

[16:12] <larks> is loop control, goto etc working? 

[16:12] <larks> don't know if it's perl6 or me >_>; 

[16:12] <sisar> sorear: \o

[16:13] <pmichaud> next / redo / last work.  LABELs don't work in Rakudo yet.

[16:13] <pmichaud> so, no "goto" yet.

[16:13] <larks> ah, so if I have a nested for loops and I want to skip to the next outer for loop, hhmm

[16:13] <pmichaud> yeah, that's something we need to put in place soonish

[16:14] <sisar> what's the blocker on "goto" ? modulo tuits, of course.

[16:14] <pmichaud> the blocker is being able to build the continuation

[16:15] <pmichaud> or exception handler.  not sure which yet.

[16:15] <pmichaud> "goto" isn't a simple branch, because a goto is allowed to leave the current lexical block.

[16:16] <pmichaud> (and lexical blocks in rakudo generally translate to parrot subs, which can't do direct inter-sub branching except via exceptions or continuations)

[16:17] <pmichaud> sisar: looks to me like [ ]  should work.

[16:17] <sisar> pmichaud: and [] too ?

[16:17] <pmichaud> sisar: yes.

[16:18] <sisar> pmichaud: ok. thanks.

[16:19] <pmichaud> sisar:  (.finite method)  I couldn't see having two methods that indicated finiteness.

[16:20] <pmichaud> when just one would do.

[16:20] <pmichaud> anyway, I have to board my plane now -- back in a couple of hours

[16:20] <sisar> pmichaud: .finite is just shorter, thats all.

[16:21] *** MayDaniel left
[16:34] *** JimmyZ left
[16:38] <sisar> tadzik: the module compilation error seems to have changed from 'No STable at ...' to 'Missing or wrong version of dependency 'src/gen/CORE.setting''

[16:39] <sisar> tadzik: which modules, other than LWP::Simple, fail to build because of this error ?

[17:01] *** cog__ joined
[17:01] *** PacoAir_ joined
[17:01] *** PacoAir left
[17:01] *** PacoAir_ is now known as PacoAir

[17:04] *** cog_ left
[17:15] *** araujo left
[17:28] *** crab2313 joined
[17:29] *** birdwindupbird left
[17:30] *** sergot joined
[17:32] *** araujo joined
[17:34] *** mucker joined
[17:40] <tadzik> sisar: all of them

[17:41] <tadzik> sisar: if you rebuild rakudo and not rebuild all modules

[17:41] <tadzik> precompilation is valid as long as rakudo stays the same

[17:41] <sisar> tadzik: what is 'precompilation' again ?

[17:50] <tadzik> sisar: that's when you turn .pm into .pir

[17:50] <tadzik> it speeds up startup _very_ significantly

[17:50] <tadzik> the downside is that each precompiled module is compatibile only with the rakudo on which it was compiled

[17:51] <sisar> right, makes sense.

[17:52] * tadzik afks again

[17:54] *** crab2313 left
[18:06] *** adu joined
[18:06] *** MayDaniel joined
[18:11] *** tyatpi left
[18:18] *** sudokode left
[18:21] *** snearch joined
[18:28] *** cog_ joined
[18:28] *** sudokode joined
[18:32] *** cog__ left
[18:37] *** vmspb left
[18:45] *** adu left
[18:48] *** sunflower joined
[18:51] *** uvtc joined
[18:52] *** tomaw left
[18:52] *** tomaw joined
[18:53] <uvtc> Anyone have a link to pmichaud's YAPC talk on lists/arrays/parcels? I've got the link to "Perl 6 Lists, the Good, the Ugly, and the Insanity", but that appears to be the 2nd one. I'm looking for the one that he did before that one.

[18:59] *** brrt left
[19:00] *** snearch left
[19:13] *** uvtc left
[19:30] *** kaare_ left
[19:37] *** GlitchMr left
[19:40] <sisar> uvtc: I don't think it's been released yet

[19:43] *** mucker left
[19:44] <pmichaud> I didn't see it when I looked a bit ago.  Not all of the talk videos have been posted yet

[19:44] *** cog__ joined
[19:45] *** cog_ left
[19:45] *** thou joined
[19:47] *** uvtc joined
[19:48] <uvtc> Thanks. Will be looking for that one.

[19:48] *** uvtc left
[19:54] <pmichaud> I suppose I could add that channel to my feed list :)

[19:55] *** birdwindupbird joined
[19:55] <pmichaud> new videos just started showing up in the past 40 minutes :)

[19:56] <sjn> o/

[19:56] <pmichaud> sjn: o/

[19:56] <sjn> pmichaud: any news from TPF? :)

[19:57] *** Telgalizer joined
[19:57] <pmichaud> sjn: not yet; Idon't know if krunen sent anything to karen yet.  I know that karen's mailbox was really full so she might have not read it yet

[19:57] <sjn> ook

[19:58] <pmichaud> (I will be boarding a plane in just a moment)

[19:58] *** sunflower left
[19:58] <sjn> right, I'll try to figure out stuff on my end

[19:59] <pmichaud> I know about the june 25 deadline so will definitely get as much known as I can this week.

[20:00] <sjn> great

[20:01] <pmichaud> okay, time to board -- bbl

[20:04] *** DarthGandalf left
[20:08] *** DarthGandalf joined
[20:08] *** cogno joined
[20:10] *** mikemol joined
[20:12] *** cogno left
[20:43] <tadzik> o/

[20:50] *** MayDaniel left
[21:01] *** Gesh joined
[21:01] *** MayDaniel joined
[21:08] *** gardnan joined
[21:08] *** bruges_ left
[21:09] *** bruges joined
[21:17] *** Vlavv` left
[21:19] *** Vlavv` joined
[21:21] *** immortal left
[21:22] *** erkan joined
[21:22] *** erkan left
[21:22] *** erkan joined
[21:23] *** Gesh left
[21:33] <tadzik> gah. Why does video black out on code examples on pmichaud's talk on youtube? :/

[21:44] <estrai> link?

[21:44] <sorear> o/ ta dzik

[21:44] <tadzik> http://www.youtube.com/watch?v=rsccacoabaE

[21:44] <tadzik> o/ so rear

[21:44] <flussence> that's the weirdest video ID I've seen yet

[21:45] <estrai> yeah, indeed :)

[21:46] <tadzik> same here

[21:46] <tadzik> that's why I rechecked it :P

[21:49] *** birdwindupbird left
[21:49] *** quietfanatic joined
[21:49] <sorear> o/ quietfanatic

[21:51] *** quietfanatic_ joined
[21:51] <quietfanatic_> microwaves.

[21:52] <quietfanatic_> good * #perl6

[21:53] *** quietfanatic left
[21:54] *** quietfanatic_ is now known as quietfanatic

[21:56] <sorear> o/ quietfanatic

[21:56] *** MayDaniel left
[21:57] <quietfanatic> o/ soreat

[21:57] <quietfanatic> r

[22:02] <sorear> p6: 2.::

[22:02] <p6eval> niecza v18-7-ga660099: OUTPUT«Unhandled exception: Cannot dispatch to a method on PseudoStash because it is not inherited or done by Int␤  at /tmp/vc2X0Rl_c4 line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3917 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting …

[22:02] <p6eval> ..pugs: OUTPUT«*** ␤    Unexpected "::"␤    expecting ".", "\187", ">>", "=", "^", operator name, qualified identifier, variable name, "...", "--", "++", "i", array subscript, hash subscript or code subscript␤    at /tmp/IhxkD3AkrT line 1, column 3␤»

[22:02] <p6eval> ..rakudo a2bacb: OUTPUT«===SORRY!===␤ResizablePMCArray: Can't pop from an empty array!␤»

[22:03] *** quietfanatic_ joined
[22:03] *** quietfanatic left
[22:05] <quietfanatic_> oh, that breaks rakudo

[22:05] <quietfanatic_> So I was thinking of reviving Link::C

[22:05] <quietfanatic_> only probably From::C is a better name

[22:06] <quietfanatic_> Now with native types and Zavolaj, it should be much simpler to implement.

[22:07] *** crab2313 joined
[22:08] *** crab2313 left
[22:18] <diakopter> quietfanatic_: have you seen NativeCall?

[22:20] <diakopter> nm, I see Zavolaj uses that now

[22:24] <quietfanatic_> Is NativeCall a lower level interface?

[22:24] <quietfanatic_> I'll look at it in any case

[22:24] *** gardnan left
[22:25] <quietfanatic_> Oh, no, NativeCall is Zavolaj.

[22:27] <quietfanatic_> gccxml cain't output to stdout.  That's a shame.

[22:33] <geekosaur> -o /dev/fd/1 ?

[22:35] <quietfanatic_> That sends it straight to my terminal

[22:35] *** fgomez left
[22:35] <quietfanatic_> I need it to be the output of a qqx//

[22:36] <quietfanatic_> Well, I was gonna cache code in a file anyway, so I guess it won't hurt to have another file.

[22:37] *** zby_home left
[22:38] *** quietfanatic_ is now known as quietfanatic

[22:42] *** fgomez joined
[22:48] <quietfanatic> Or maybe I should just make it an h2p6 program, like h2xs.

[22:48] <tadzik> that'd be quite cool

[22:51] <quietfanatic> only it'd actually work :)

[22:55] <sorear> quietfanatic: I think #parrot wrote a NQP-based C header parser

[23:01] <quietfanatic> I saw there was one in the Parrot repository many years ago

[23:01] <quietfanatic> is this the same or different?

[23:02] <quietfanatic> Previously I used a monster perl5 regex.  Now I'm trying to use gccxml.

[23:02] <sorear> this is different, it's less than two years old

[23:02] <quietfanatic> I should give it a whirl then

[23:03] *** aindilis left
[23:03] <timotimo> can't find the first talk by pmichaud :(

[23:05] <[Coke]> # 06/16/2012 - rakudo++ (22448); niecza (91.19%); pugs (34.51%)

[23:05] <[Coke]> no change since YAPC

[23:28] <sergot> good * ! o/

[23:29] <quietfanatic> hello sergot

[23:30] <sergot> quietfanatic: Oh, i'm going to sleep. :)

[23:30] <sergot> hava a nice time!

[23:31] <quietfanatic> oh, right then :)

[23:31] <sergot> I should have said 'good night' :)

[23:31] <sergot> bye! :)

[23:31] *** sergot left
[23:32] *** am0c joined
[23:39] <dalek> niecza/non-bootstrap: cc6277b | sorear++ | lib/ (3 files):

[23:39] <dalek> niecza/non-bootstrap: Actions pt 9

[23:39] <dalek> niecza/non-bootstrap: review: https://github.com/sorear/niecza/commit/cc6277b3bc

[23:50] *** ocharles left
[23:52] *** ocharles joined
