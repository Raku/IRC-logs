[00:03] *** ServerSage left
[00:10] *** pmurias left
[00:13] <lue> huf: interesting. Never would have thought of needing to do that.

[00:13] <huf> it's so frequent a question on #perl that there are multiple modules to make it nicer :)

[00:14] <lue> (although I fear I don't quite get what use lib is trying to do. /me researches use lib)

[00:14] <huf> BEGIN { push @INC, '....' }

[00:15] <lue> Ah. I'm getting the feeling a lot of my confusion stems from me not having ever needed to do this.

[00:16] <huf> :)

[00:20] <lue> Huh. running perl6 -e "require 'lib/lib.pm6';" in the base of rakudo's repo generates a "could not find" error.

[00:25] <lue> Which, IIRC, is wrong.

[00:33] <lue> .oO(And all this talk today when I thought I'd never have problems with P6's module system again...)

[00:35] *** MayDaniel left
[00:42] *** hjsteffens left
[00:49] *** sirrobert left
[00:52] *** anuby joined
[00:58] *** ServerSage joined
[01:04] *** pjcj left
[01:09] *** hypolin joined
[01:10] *** pjcj joined
[01:15] *** atrodo left
[01:16] *** benabik joined
[01:33] *** Pleiades` left
[01:34] *** tokuhiro_ left
[01:34] *** tokuhiro_ joined
[01:38] *** Pleiades` joined
[01:47] <[Coke]> r: say (1..20).grep(*.is-prime)

[01:47] <p6eval> rakudo 247f87: OUTPUT«2 3 5 7 11 13 17 19␤»

[01:47] <[Coke]> huh. that's failing locally.

[01:47] <[Coke]> r: say (1..100).grep(*.is-prime)

[01:47] <p6eval> rakudo 247f87: OUTPUT«2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97␤»

[01:56] <[Coke]> even weirder, the spectest fails, but the code 

[01:56] <[Coke]> snippet works in the REPL

[01:59] *** bowtie left
[01:59] *** anuby_ joined
[01:59] *** jerome left
[02:02] *** anuby left
[02:11] *** tokuhiro_ left
[02:11] *** tokuhiro_ joined
[02:19] *** Patterner left
[02:32] *** jerome joined
[02:36] *** jerome left
[02:45] <diakopter> [Coke]: that's subprime

[02:50] *** jerome joined
[02:51] *** cyclick2 joined
[03:01] *** hash_table joined
[03:03] <japhb> phenny, tell TimToady I've been tanking on S11 and the big discussion we had this afternoon.  I'm beginning to wonder if the 'use' statement isn't the right place to be specifying auth and ver, or at least not the only place to make that choice.

[03:03] <phenny> japhb: I'll pass that on when TimToady is around.

[03:05] <japhb> phenny, tell TimToady I understand the desire to say "I need this API version from my dependency." But it's the wrong place to specify it when you want to bundle, i.e. specify "These packages of software have been tested together", where you want to make a more project-global choice

[03:05] <phenny> japhb: I'll pass that on when TimToady is around.

[03:06] <japhb> phenny, tell TimToady I'll continue to tank on it, but input from your highly non-linear thinking patterns desired.

[03:06] <phenny> japhb: I'll pass that on when TimToady is around.

[03:06] <japhb> .oO( TimToady as non-deterministic oracle )

[03:09] *** noggle_ joined
[03:09] <cyclick2> is perl6 better then perl5 at character encodings?

[03:11] <sorear> yes in some regards

[03:11] <sorear> character strings and byte strings are no longer interchangable, so it's no longer possible to accidentally not handle encoding or handle it twice

[03:12] *** noggle left
[03:12] <sorear> however the encoding menu is much smaller, no current p6 impl supports EBCDIC

[03:15] *** hypolin left
[03:15] <cyclick2> is it possible to say all strings are utf-8 for example, no matter which module your are using?

[03:15] *** spiderweb joined
[03:16] <spiderweb> lo

[03:17] <japhb> cyclick2, character strings by default follow Unicode semantics in Perl 6. 

[03:17] <sorear> cyclick2: All strings can contain any Unicode character.

[03:17] <sorear> cyclick2: The encoding is an implementation detail - Niecza uses UTF-16

[03:18] <cyclick2> good

[03:18] *** hypolin joined
[03:24] *** cyclick2 left
[03:26] *** mikemol joined
[03:28] <sorear> mikemol! \o/

[03:34] <mikemol> o/

[03:40] *** orafu left
[03:44] *** orafu joined
[03:44] *** cyclick joined
[03:55] *** jaldhar joined
[04:05] *** gootle joined
[04:06] *** jaldhar left
[04:07] *** jaldhar joined
[04:19] *** hash_table left
[04:40] *** spiderweb left
[04:42] *** Quix0te joined
[04:54] *** Quix0te left
[05:25] *** SamuraiJack joined
[05:32] *** kaleem joined
[05:35] *** telex left
[05:36] *** telex joined
[05:36] *** sirrobert joined
[05:37] *** skids left
[05:37] <sirrobert>  lo

[05:41] *** sirrobert left
[05:46] *** raiph joined
[05:46] <raiph> hi sirrobert

[05:48] *** Kharec joined
[05:56] <moritz> \o

[06:13] *** araujo left
[06:14] *** birdwindupbird joined
[06:19] *** GlitchMr joined
[06:24] *** daniel-s left
[06:24] *** daniel-s joined
[06:26] *** daniel-s_ joined
[06:28] *** anuby joined
[06:29] *** daniel-s left
[06:31] *** anuby_ left
[06:39] *** SamuraiJack left
[06:39] *** SamuraiJack joined
[06:44] *** raiph left
[06:48] *** chee left
[06:48] *** nebuchadnezzar left
[06:48] *** daniel-s_ left
[06:49] *** chee joined
[06:50] *** daniel-s_ joined
[07:06] *** Kharec left
[07:07] *** Kharec joined
[07:18] *** GlitchMr left
[07:25] *** nebuchadnezzar joined
[07:30] *** cognominal joined
[07:36] *** FROGGS joined
[07:36] <FROGGS> good morning

[07:43] <sorear> good morning FROGGS 

[07:47] *** wamba joined
[07:54] <tadzik> good morning #perl6

[07:56] <FROGGS> tadzik, sorear o/

[07:59] *** Psyche^ joined
[07:59] *** Psyche^ is now known as Patterner

[08:00] *** DarthGandalf left
[08:00] *** atrodo joined
[08:03] *** brrt joined
[08:04] *** cognominal left
[08:06] *** atrodo left
[08:06] *** kurahaupo left
[08:08] *** DarthGandalf joined
[08:27] *** cognominal joined
[08:31] *** wamba left
[08:31] *** hoelzro|away is now known as hoelzro

[08:43] *** araujo joined
[08:43] *** araujo left
[08:43] *** araujo joined
[08:49] *** wamba joined
[08:58] *** sqirrel joined
[08:59] *** grondilu joined
[09:02] *** cyclick2 joined
[09:02] *** cyclick left
[09:10] *** rindolf joined
[09:13] *** dayangkun joined
[09:14] *** cognominal left
[09:21] *** cognominal joined
[09:32] <sqirrel> so, sp􏿽xFCler l􏿽xE4uft

[09:32] <sqirrel> oh sorry wrong window

[09:35] <hoelzro> hehe

[09:35] <hoelzro> #housework?

[09:35] <hoelzro> rather, #housework_de

[09:37] *** mtk left
[09:38] <FROGGS> ;o)

[09:38] <FROGGS> sqirrel++

[09:41] *** mtk joined
[09:45] <Su-Shee> I'm guessing either company inhouse irc or family available via chat ;)

[09:45] <huf> :)

[09:47] <sqirrel> yep, my life is boring *gg*

[09:48] <FROGGS> hey, just because I'm not at home :o)

[09:48] *** dakkar joined
[09:48] <sqirrel> yes froggs busy earning money for sqirrels expensive hobbies *gg* froggs++

[09:50] <FROGGS> *sigh*, there something tru 'bout that

[09:50] *** wamba left
[09:50] *** wamba joined
[09:51] *** kresike joined
[09:51] <kresike> hello all you happy perl6 people

[09:51] <FROGGS> kresike o/

[09:51] *** rindolf left
[09:52] *** fhelmberger joined
[09:53] *** Kharec left
[09:55] *** Kharec joined
[09:57] *** Kharec left
[09:58] *** Kharec joined
[09:58] *** Kharec left
[09:59] <kresike> FROGGS, o/

[10:01] *** Rix left
[10:01] *** Kharec joined
[10:04] *** hypolin left
[10:06] *** Rix joined
[10:08] *** cognominal left
[10:09] *** flue joined
[10:09] *** flue left
[10:21] <dalek> Perlito: a9955f1 | (Flavio S. Glock)++ | t5/op/index.t:

[10:21] <dalek> Perlito: Perlito5 - another 42 standard tests pass

[10:21] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/a9955f1985

[10:29] *** bowtie joined
[10:33] *** toebu joined
[10:34] <dalek> Perlito: 73d6564 | (Flavio S. Glock)++ | t5/ (3 files):

[10:34] <dalek> Perlito: Perlito5 - another ~200 standard tests

[10:34] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/73d65642dd

[10:39] *** PacoAir joined
[10:44] *** cognominal joined
[10:49] *** anuby left
[10:52] <dalek> Perlito: db3046c | (Flavio S. Glock)++ | / (4 files):

[10:52] <dalek> Perlito: Perlito5 - js2 - bit shift overflow fix

[10:52] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/db3046c4b2

[10:56] *** toebu left
[10:59] *** rindolf joined
[11:01] *** Rix left
[11:02] *** gootle left
[11:05] *** Su-Shee_ joined
[11:07] *** wamba left
[11:07] *** Su-Shee left
[11:07] *** Su-Shee_ is now known as Su-Shee

[11:08] *** wamba joined
[11:12] *** brrt left
[11:12] *** Rix joined
[11:17] *** ircmouser joined
[11:27] *** hoelzro is now known as hoelzro|away

[11:32] *** hoelzro|away is now known as hoelzro

[11:41] *** noggle_ is now known as noggle

[11:57] *** cognominal left
[12:17] *** brrt joined
[12:23] *** LordVorp left
[12:56] *** tokuhiro_ left
[12:56] *** tokuhiro_ joined
[13:05] *** grondilu left
[13:06] *** dayangkun left
[13:34] *** cognominal joined
[13:35] *** sftp joined
[13:37] *** evgi joined
[13:38] <evgi> hi

[13:38] <evgi> I have a question

[13:39] <evgi> When will Perl 6 be released?

[13:41] <moritz> evgi: there are two Perl 6 compilers that already have monthly releases

[13:41] <moritz> so in some sense, it already has been released

[13:41] <[Coke]> and a distribution built on top of one of them that has regularly (but not necessarily monthly) releases.

[13:41] <[Coke]> Is there a particular feature you're looking for?

[13:41] <moritz> though we haven't snapshotted a version of the spec yet and called it "Perl 6.0.0"

[13:42] <[Coke]> *regular, whoops.

[13:43] <evgi> I am working currently with Perl 5

[13:43] <evgi> I have a lot of code there

[13:43] <evgi> How stable Perl 6? 

[13:43] <moritz> first of all if you have lots of Perl 5 code, it doesn't make any sense to port it to Perl 6

[13:43] <evgi> How I can convert all my code (Perl 5) to Perl 6?

[13:44] <moritz> there's no automagic conversion, and Perl 5 won't go away

[13:44] <moritz> how stable is not? not as stable as Perl 5, by far

[13:44] <evgi> but Perl 6 has a many updates/improvments

[13:44] <evgi> like obkects and many more

[13:45] <moritz> yes

[13:45] <evgi> objects

[13:45] <moritz> but updating your code from Perl 5 to Perl 6 would be nearly complete rewrite

[13:45] <evgi> ohh

[13:46] *** geekosaur left
[13:46] *** noggle left
[13:46] *** shachaf left
[13:46] *** noggle_ joined
[13:46] <moritz> so, don't do that

[13:47] <moritz> use Perl 6 for new software, if it doesn't need to be tightly coupled with the existing code

[13:47] *** twinshadow left
[13:47] *** shachaf joined
[13:47] <evgi> ok, i'll try

[13:48] <evgi> thanks a lot

[13:48] <moritz> and note that if you do that, you're an early adaptor

[13:48] *** gugod joined
[13:48] *** twinshadow joined
[13:48] *** ingy joined
[13:49] *** evgi left
[13:49] <[Coke]> no, you are.

[13:50] <dalek> rakudo/nom: 7ede6cd | moritz++ | / (2 files):

[13:50] <dalek> rakudo/nom: remove ~/.perl6/lib from default @*INC

[13:50] <dalek> rakudo/nom: 

[13:50] <dalek> rakudo/nom: as the prophe^W deprecation notes predicted

[13:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/7ede6cdbcf

[13:50] *** pecastro joined
[13:52] <[Coke]> moritz: any idea why "is-prime" was giving me different answers locally?

[13:53] <moritz> [Coke]: not really :(

[13:53] <moritz> [Coke]: what test(s) fail?

[13:53] <[Coke]> REPL and ./perl6 seem fine. but that spec test was still failing. weird.

[13:53] *** colomon left
[13:53] <[Coke]> t/spec/S32-num/is-prime.t

[13:54] <moritz> [Coke]: first, check if t/spec/ might be stuck

[13:54] *** geekosaur joined
[13:54] <[Coke]> r: use Test; is (1..10).grep(*.is-prime), (2,3,5,7);

[13:54] <p6eval> rakudo 247f87: OUTPUT«ok 1 - ␤»

[13:54] <moritz> [Coke]: second, run ./perl6 -Ilib t/spec/S32-num/is-prime.

[13:54] <moritz> erm, 

[13:54] <moritz> [Coke]: second, run ./perl6 -Ilib t/spec/S32-num/is-prime.t

[13:55] *** immortal joined
[13:55] *** immortal left
[13:55] *** immortal joined
[13:55] <moritz> (just to check if it's a problem with the test harness, or with rakudo)

[13:55] <moritz> latest roast commit is 127f694a94d4e1087f94fc8b70bce6bffc1ff69f

[13:57] *** erkan left
[14:04] <dalek> nqp/gh67-threads: 6806339 | (Tobias Leich)++ | src/pmc/nqplexpad.pmc:

[14:04] <dalek> nqp/gh67-threads: checking for enum_class_Proxy instead of PARROT_HAS_THREADS

[14:04] <dalek> nqp/gh67-threads: 

[14:04] <dalek> nqp/gh67-threads: In parrot 4.4.0 enum_class_Proxy isnt defined but PARROT_HAS_THREADS is. So enum_class_Proxy would be added to the condition.

[14:04] <dalek> nqp/gh67-threads: review: https://github.com/perl6/nqp/commit/6806339701

[14:04] *** dalek left
[14:05] *** ker2x joined
[14:05] *** dalek joined
[14:05] *** ChanServ sets mode: +v dalek

[14:05] <ker2x> friendly greetings!

[14:06] *** atrodo joined
[14:06] *** tokuhiro_ left
[14:06] *** noggle_ left
[14:06] <moritz> hi ker2x 

[14:07] *** noggle joined
[14:07] *** tokuhiro_ joined
[14:11] <[Coke]> moritz: updated, verified, spec test still fails here.

[14:11] <[Coke]> weird.

[14:12] <moritz> [Coke]: does it also fail when you run ./perl6 -Ilib t/spec/S32-num/is-prime.t ? if yes, please nopaste the output

[14:20] <[Coke]> https://gist.github.com/4169395

[14:25] *** GlitchMr joined
[14:26] <[Coke]> urk? https://gist.github.com/4169433 - moritz, you'll LOVE that one.

[14:26] <[Coke]> Note that the first 2 tests are a cut and paste, and yet one passes and one fails.

[14:27] <[Coke]> (er, sorry, that one ended up with all 3 tests the same, first failing, 2nd passing.

[14:27] <[Coke]> (+3rd)

[14:28] <moritz> that is 'urk?' indeed

[14:28] <jnthn> o/ from vilnius

[14:28] <phenny> jnthn: 28 Nov 23:22Z <sirrobert> tell jnthn I think the perl6-debug in rakudo-star-2012.11-RC1 steps over method/function calls by default, instead of stepping into them.

[14:28] *** immortal left
[14:29] <jnthn> phenny: tell sirrobert be sure you're not trying to step into a pre-compiled module (ideally it would never use pre-compiled things and always compile debug versions...I'll make it do that eventually...)

[14:29] <phenny> jnthn: I'll pass that on when sirrobert is around.

[14:29] * jnthn yawns

[14:31] <moritz> \o

[14:31] *** hash_table joined
[14:35] *** brrt left
[14:35] *** isBEKaml joined
[14:35] <moritz> [Coke]: weird, the tests passes for me, even when I run the thing three times

[14:36] *** hash_table left
[14:38] <isBEKaml> 'evening, #perl6!

[14:38] *** colomon joined
[14:40] <moritz> \o isBEKaml 

[14:41] *** benabik left
[14:42] *** benabik joined
[14:42] <isBEKaml> hello, moritz

[14:43] <isBEKaml> [Coke]: I don't see failures here as well. That's after running it 5 times over seq.

[14:43] <isBEKaml> (win7 64 bit cygwin)

[14:46] <moritz> [Coke]: are you on a 32bit machine?

[14:51] *** bluescreen10 joined
[14:52] <dalek> Perlito: 3b33471 | (Flavio S. Glock)++ | t5/op/arith.t:

[14:52] <dalek> Perlito: Perlito5 - add standard test t/op/arith.t

[14:52] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/3b334713eb

[14:52] <dalek> Perlito: 283ea50 | (Flavio S. Glock)++ | / (6 files):

[14:52] <dalek> Perlito: Perlito5 - parser - precedence fix; Tests=863

[14:52] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/283ea501a5

[14:57] *** stopbit joined
[15:02] *** cognominal left
[15:03] *** kaare__ joined
[15:03] *** birdwindupbird left
[15:09] *** cognominal joined
[15:14] *** kaleem left
[15:16] *** BillySeth joined
[15:16] *** BillySeth left
[15:19] *** isBEKaml left
[15:20] <dalek> Perlito: 1fdfe81 | (Flavio S. Glock)++ | t5/01-perlito/ (5 files):

[15:20] <dalek> Perlito: Perlito5 - tests - "make test" is clean; Tests=876

[15:20] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/1fdfe81f2b

[15:26] <[Coke]> moritz: 64bit mac.

[15:28] *** Kharec left
[15:32] *** skids joined
[15:37] *** hash_table joined
[15:39] <[Coke]> the rakudo build I have right now is installed locally, and before I built it, I rm'd install/ nqp/ parrot/ . ('sweird.)

[15:40] *** wamba left
[15:40] *** wamba joined
[15:53] *** benabik left
[16:00] *** FROGGS left
[16:01] *** Kharec joined
[16:02] *** cyclick2 left
[16:05] *** benabik joined
[16:08] *** kcwu_ is now known as kcwu

[16:10] *** bluescreen10 left
[16:10] <skids> r: for (-8..-1) { printf("%x » %x / ",$_ +& 15, ($_ +> 1) +& 15) } # needs libtomath repr love

[16:10] <p6eval> rakudo 7ede6c: OUTPUT«8 » c / 9 » d / a » d / b » e / c » e / d » f / e » f / f » 0 / »

[16:12] <skids> The other ops have compensation for negatives; this one doesn't.

[16:13] *** benabik left
[16:14] <skids> (So this is different than the other int bitops problems up near the high bits.)

[16:15] *** Kharec left
[16:17] *** brrt joined
[16:19] <moritz> which op? +& or +> ?

[16:20] <skids> +>

[16:20] * moritz not very well concentrated

[16:20] <moritz> is there a bug report for that already?

[16:20] <moritz> if not, please open one

[16:21] <skids> Not sure.  I'm more saying I dug in enough to see that the fix for this one is probably easier than that other stuff.

[16:22] *** bluescreen10 joined
[16:23] *** FROGGS joined
[16:26] <moritz> a fix would also be welcome :-)

[16:26] *** benabik joined
[16:27] <skids> Oh.  It turns out you are more concentrated than me.

[16:27] <skids> r: for (-8..-1) { printf("(%i) %x » (%i) %x / ",$_, $_ +& 15, ($_ +> 1), ($_ +> 1) +& 15) }

[16:27] <p6eval> rakudo 7ede6c: OUTPUT«(-8) 8 » (-4) c / (-7) 9 » (-3) d / (-6) a » (-3) d / (-5) b » (-2) e / (-4) c » (-2) e / (-3) d » (-1) f / (-2) e » (-1) f / (-1) f » (0) 0 / »

[16:27] <skids> it is +&.

[16:31] *** brrt left
[16:31] *** erkan joined
[16:31] *** erkan left
[16:31] *** erkan joined
[16:33] <kresike> bye folks

[16:33] *** kresike left
[16:37] <skids> .oO(These are made harder to hunt given the limited range of fmt/printf directives.)

[16:40] *** hoelzro is now known as hoelzro|away

[16:40] <moritz> why not just use say() ?

[16:41] <moritz> r: say (-8).base(2)

[16:41] <p6eval> rakudo 7ede6c: OUTPUT«-1000␤»

[16:41] <moritz> r: say (-8 +> 1).base(2)

[16:41] <p6eval> rakudo 7ede6c: OUTPUT«-100␤»

[16:41] <moritz> r: say (-2 +> 1).base(2)

[16:41] <p6eval> rakudo 7ede6c: OUTPUT«-1␤»

[16:42] <moritz> r: given -2 { say .base(2); say ($_ +> 1).base(2) }

[16:42] <p6eval> rakudo 7ede6c: OUTPUT«-10␤-1␤»

[16:42] <moritz> r: given -1 { say .base(2); say ($_ +> 1).base(2) }

[16:42] <p6eval> rakudo 7ede6c: OUTPUT«-1␤0␤»

[16:42] <moritz> r: given -3 { say .base(2); say ($_ +> 1).base(2) }

[16:42] <p6eval> rakudo 7ede6c: OUTPUT«-11␤-1␤»

[16:43] <moritz> nr: given -3 { say .base(2); say ($_ +> 1).base(2) }

[16:43] <p6eval> rakudo 7ede6c: OUTPUT«-11␤-1␤»

[16:43] <p6eval> ..niecza v22-44-g0247fe5: OUTPUT«-11␤-10␤»

[16:45] <skids> r: for (1..8) { my $a = $_ - 0x10000000000000000; my $b = $a +> 1; $b = $b + 0x8000000000000000; printf("%x » %x / ", $a, $b); }

[16:45] <p6eval> rakudo 7ede6c: OUTPUT«1 » 1 / 2 » 1 / 3 » 2 / 4 » 2 / 5 » 3 / 6 » 3 / 7 » 4 / 8 » 4 / »

[16:46] <skids> There's the one, I think.  Unless I am being deceived again.  I'll try .base, thanks moritz++.

[16:47] *** colomon left
[16:51] <skids> (So to rescind my above statement, this might be tied to the longstanding higher bit problems after all.)

[16:59] *** wamba left
[17:04] *** wamba joined
[17:08] <masak> oh hai, #perl6

[17:08] <tadzik> hai masak 

[17:09] <masak> I am tired. just one more work day left.

[17:09] <masak> until le weekend, I mean.

[17:10] *** benabik left
[17:10] *** ker2x left
[17:10] *** bapa left
[17:10] *** takesako left
[17:10] *** mathw_ left
[17:10] *** stanley_ left
[17:10] *** lorn left
[17:10] *** mathw joined
[17:10] *** ker2x joined
[17:11] *** takesako joined
[17:11] *** stanley joined
[17:11] *** lorn joined
[17:12] *** bapa joined
[17:17] <masak> phenny: de en "so, spüler läuft"?

[17:17] <phenny> masak: "so dishwasher runs" (de to en, translate.google.com)

[17:17] <masak> hehe, "spüler" :)

[17:19] <masak> to a Swedish ear, that word sounds like "a thing that flushes". which I guess is actually the correct etymology.

[17:19] *** Kharec joined
[17:19] <masak> but I wouldn't use that word for a dishwasher, I'd use it for something like the thing that cleans the windshield of a car by squirting liquid on it.

[17:20] <perigrin> windshield washer

[17:20] <perigrin> English is only inventive when it's inconvient for learning.

[17:21] <masak> ker2x: friendly greetings back!

[17:22] <FROGGS> masak++

[17:22] <FROGGS> *gg*

[17:22] <masak> perigrin: both "dishwasher" and "windshield washer" seem like totally cromulent words to me.

[17:23] <FROGGS> phenny: de en "Spritzd􏿽xFCse"

[17:23] <FROGGS> phenny: de en "Spritzd􏿽xFCse"?

[17:23] <phenny> FROGGS: "nozzle" (de to en, translate.google.com)

[17:23] <FROGGS> masak^^

[17:24] <perigrin> masak: it's what we get from ebiggening teh language

[17:24] <FROGGS> btw, a dishwasher is squirting water to clean the dishes

[17:25] *** colomon joined
[17:26] <FROGGS> phenny: en de "cromulent"?

[17:26] <phenny> FROGGS: "cromulent" (en to de, translate.google.com)

[17:26] <FROGGS> wow, thanks -.-

[17:32] <masak> FROGGS: "cromulent" is a Simpsons neologism.

[17:33] <masak> https://en.wiktionary.org/wiki/cromulent

[17:36] *** colomon left
[17:41] *** fhelmberger left
[17:49] *** dakkar left
[17:57] *** pmurias joined
[18:01] <pmurias> japhb: re version and auth and bundles, picking the right versions of module without declarations of dependencies seems to be hard

[18:02] <pmurias> japhb: unless we just take the newest version of everything

[18:03] *** nebuchadnezzar left
[18:03] *** colomon joined
[18:03] <colomon> cromulent is a wonderful word.

[18:04] *** nebuchadnezzar joined
[18:04] *** cognominal left
[18:08] *** cognominal joined
[18:19] *** Pompel left
[18:20] *** Pompel joined
[18:28] *** Moukeddar joined
[18:29] <Moukeddar> Hello \o/ #perl6

[18:29] <PerlJam> o/

[18:30] <Moukeddar> how you doin' ?

[18:32] <PerlJam> a bit of a headache and a little hungry,  but otherwise fine  :)

[18:34] <Moukeddar> get well soon, i have the cold

[18:34] * PerlJam munches on some almonds.

[18:36] <Moukeddar> can i ask something, it's not really related to perl6 

[18:39] <FROGGS> well, can't hurt to ask

[18:41] <Moukeddar> we're studying HTML and CSS, it's fun, but all i think is : it's for designers,and with all what's popping in the web, what you learn today seems obsolete tomorrow, how to deal with it ?

[18:42] <FROGGS> well, I need to know HTML and CSS for example, cant say that it is obsolete, and I'm not a designer

[18:42] <masak> Moukeddar: learn principles that won't be obsolete tomorrow.

[18:43] <PerlJam> Moukeddar: the same way you deal with any technical knowledge ... continue to learn new things every day  :-)

[18:43] <PerlJam> Moukeddar: but like masak says, the principles are the important thing

[18:44] <masak> yes, I'm afraid constant learning is inevitable.

[18:44] <masak> but there are nice underlying currents to all the trivial details of web dev.

[18:44] <masak> like "why does IE6 suck att DOM node removal?" -- "because it uses a refcounting GC and its devs didn't realize that was a problem until the web started using Ajax".

[18:45] <FROGGS> btw, knowing HTML and CSS will help you writing a template engine for example, you always can reuse knowledge

[18:45] <masak> very true.

[18:45] <masak> and a template engine is just a compiler :)

[18:45] <Moukeddar> the one thing that frightens me, i'm not exactly a web dev guy, and the whole world seems to be moving faster than ever toward that 

[18:45] <PerlJam> *everything* is a compiler at some level  ;)

[18:45] *** SamuraiJack left
[18:46] <FROGGS> Moukeddar: what typ'o'guy are you?

[18:47] <Moukeddar> FROGGS, i don't know the definition, but i prefer to work on the back-end of something than the front end, even if it was a store lol

[18:47] <FROGGS> k

[18:47] <huf> lots of people are like that who are stuck working in web :)

[18:47] * moritz is sa text munging guy

[18:47] <moritz> *is a

[18:48] <FROGGS> but its always good to know a bit about what the ppl are doing you are working with

[18:48] <huf> my ideas about UI-s are so incompatible with what the r=1 users have been molded to want

[18:48] <PerlJam> moritz: you should have left it as an unintentional pun ;)

[18:48] <moritz> PerlJam: :-)

[18:48] <huf> that i shouldnt be put in a UI-related position anyway :D

[18:50] * masak likes to process heterogenous data

[18:50] <Moukeddar> lol, i'm not a complete ignorant in HTML or CSS, i know some basics, and i can build a good ui when i have to,not a website, but this whole HTML/CSS, and HTML5/CSS3 is just insane

[18:50] * FROGGS cant really describe what he likes

[18:51] <huf> Moukeddar: yep.

[18:51] <huf> i agree 100%

[18:51] <FROGGS> CSS is an improvement to HTML, a great one

[18:51] <huf> but i also see why it's spinning so fast

[18:51] <huf> 0deploy apps used to be a dream

[18:51] <huf> now they're commonplace with webapps

[18:51] * PerlJam never did grok CSS on a deep level.  

[18:52] <masak> quote from the course I gave today: "it's 2012 and HTML forms still don't have a date picker."

[18:52] <huf> PerlJam: it's like sql :D

[18:52] <masak> PerlJam: selector { declaration; declaration }

[18:52] <masak> PerlJam: there, done :)

[18:52] <Moukeddar> PerlJam, i never had the desire to go any deeper than basics too

[18:52] <huf> (worst simile of the day)

[18:52] <PerlJam> :-P

[18:53] <huf> SELECT DOM NODES FROM POO { UPDATE THEM HERE } :)

[18:53] <PerlJam> Mainly I can do simple components (with CSS), but when it comes to putting them together, I tend to fail  (it never looks like I expect or want)

[18:53] <Moukeddar> huf, wish there was some script like that 

[18:53] <huf> PerlJam: oh, that.

[18:53] <masak> PerlJam: no-one knows how to do that :P

[18:53] <huf> that's because you dont know about a million weird rules that are nowhere documented

[18:54] <huf> except in the source code of each render engine

[18:54] <Moukeddar> lol

[18:54] <PerlJam> masak: Eric Meyer does!  :)

[18:54] <huf> and are of course weirdly incompatible AND somewhat illogical

[18:54] * masak hugs Eric Meyer

[18:54] <huf> you could say, historical

[18:55] <masak> huf: I thought CSS had gotten lots better at those things.

[18:55] <masak> what with ACID2 and all those tests.

[18:55] <Moukeddar> seems like we got caught in the cross-fire inside a browser war

[18:55] <masak> several.

[18:55] <masak> the fact that JavaScript and CSS aren't better integrated than they are is a crying shame.

[18:56] *** sqirrel left
[18:57] <FROGGS> damn it, I have to 'bout that the whole day... can we talk about something cooler now please? :o)

[18:57] <Moukeddar> does it get on your nerves too ?

[18:57] <FROGGS> ya, 8 hours is enough

[18:58] <PerlJam> FROGGS: I'm contemplating making a workbench for my garage.

[18:58] <PerlJam> FROGGS: and I'm going to make a simple treadle lathe at some point.

[18:58] <Moukeddar> PerlJam to the rescue :)

[18:59] <PerlJam> (I made a spring-pole lathe completely out of wood (except for the rope) when I was a teenager, but I haven't really done much wood working in the last decade or so)

[18:59] <FROGGS> PerlJam: I like to build things too (a server case for a storage system lately, but also stuff for my kids with wood)

[19:00] <Moukeddar> server case with wood ?

[19:00] * masak .oO( why do only the kids with wood get stuff? )

[19:00] <FROGGS> no, aluminum

[19:00] <FROGGS> *gg*

[19:00] * masak slaps FROGGS with a British spelling

[19:01] <Moukeddar> oh

[19:01] <FROGGS> build a kitchen out of beechwood, with a illuminated glass hob

[19:01] <FROGGS> masak: wont help :o/

[19:10] *** MayDaniel joined
[19:11] <masak> from https://en.wikipedia.org/wiki/Css#CSS_4 -- "There is no such thing as CSS4." o.O

[19:11] <masak> I... never claimed there was...

[19:11] <tadzik> haha

[19:11] <tadzik> this paragraph almost says "There's no santa, kiddo"

[19:14] <masak> I feel like I'm reading The Hitchhiker's Guide when they have a *section* about something starting with "there is no such thing".

[19:19] <Woodi> hallo today :)

[19:19] *** spider-mario joined
[19:20] <Woodi> here something about possible versioning:  http://pastebin.com/e3CqAMQs

[19:21] <[Coke]> SFW perl tattoo? https://i.chzbgr.com/completestore/12/11/25/TsjQMvkFTE--N-I2YhU7LQ2.jpg

[19:22] <masak> one thing I've been thinking of: would it be possible to build a small simulation of module handling, including auth and ver and stuff.

[19:22] <masak> just outside of either of the compilers.

[19:22] <masak> sometimes it helps to prototype stuff outside of the compilers, just to make sure they're sane.

[19:22] <sorear> good * #perl6

[19:23] <masak> sorear! \o/

[19:27] <PerlJam> masak: until we get some implementations going *somehow* I fear we'll just have lots of guesses and about the pros and cons of various approaches and very little actual experiences.

[19:28] <masak> that's what I mean.

[19:28] <masak> a prototype might be the easiest way to gain some insight in how it'd all hang together.

[19:29] <masak> just the simplest thing that could possible emulate module authing and versioning, and where everything is to be stored.

[19:29] <masak> with proper tests to back it up and make sure it does what we want.

[19:29] <[Coke]> (always learning) I had an old boss who told me once you stop learning, you're dead. (and that's from when I stocked shelves at the grocery store!)

[19:31] <PerlJam> masak: I guess it would help if we had an API for the types of operations we'd expect of "module handling" with auths + versions

[19:32] <masak> yeah.

[19:34] <japhb> As I tanked on this yesterday evening, it struck me that there are a lot of *conflicting* ways that people want to use versioned modules/packages

[19:35] <japhb> I sketched out a few different designs, but each has drawbacks -- not least of which is that the design that handled the most use cases was also the most complex.

[19:35] *** Moukeddar left
[19:36] <sorear> worst part of being a language implementor: conflicting user demands

[19:36] <japhb> Because you don't get too far before you are taking about managed symlink farms (and not just the 'Any' stuff I was talking about yesterday, more like alternatives + more)

[19:36] <japhb> and other such complexities.

[19:37] <japhb> Lord help you if you want people to make S11 happy and FHS happy at the same time

[19:38] <japhb> pmurias: I'm not talking about not declaring dependencies.  Just that declaring dependencies per comp unit seems inappropriately granular.

[19:38] <PerlJam> japhb: I just want some sufficiently advanced technology so that I don't have to think so much about FS issues  :)

[19:38] <sorear> japhb: THANK YOU I HAVE BEEN SAYING THAT FOR YEARS

[19:39] <japhb> PerlJam: I think we can get close to that sufficiently advanced technology.  But my current designs unfortunately trade complexity, fragility, and limited expandability to get there.

[19:39] <japhb> Which sucks.

[19:40] <japhb> sorear, heh.  :-)

[19:40] <sorear> japhb: at this point I'm more than happy to let you think about this instead of me :p

[19:40] <Woodi> btw. 'auth' is branch like in git too. 

[19:41] <japhb> sorear, *exaggerated sigh*  Oh good, I've proven myself just competent enough to get assigned the task.  ;-)

[19:41] <Woodi> maybe we should think about modules as sub-languages, which are lexically scoped

[19:43] <japhb> Woodi, one of the big discussion items yesterday was that modules do not exist in a lexical vacuum in the real world.  They have other modules, share directories, scripts, and so on, that bundle them into a package.

[19:44] <masak> yes, 'package' (or 'project', or whatever) is an under-specified abstraction level.

[19:44] <masak> CPAN calls it "distribution", no?

[19:44] <japhb> ya

[19:47] <Woodi> but { use Module; code; code; } code; # is a way of seeing packages/distributions usage 

[19:53] <[Coke]> r: say so but do not;

[19:53] <p6eval> rakudo 7ede6c: OUTPUT«===SORRY!===␤Confused␤at /tmp/8Um_ZVCEQ1:1␤»

[19:53] <[Coke]> awww.

[19:53] <japhb> [Coke], attempting to become the new Perl 6 Poet Laureate?

[19:54] <masak> [Coke]: 'so' is a listop, and 'but' cannot appear in term position.

[19:55] <masak> r: say Whatever but do not Whatever;

[19:55] <p6eval> rakudo 7ede6c: OUTPUT«Whatever+{<anon>}()␤»

[19:55] <masak> r: say Rat but do not Cool;

[19:55] <p6eval> rakudo 7ede6c: OUTPUT«Cannot look up attributes in a type object␤  in block  at src/gen/CORE.setting:887␤  in method reify at src/gen/CORE.setting:5488␤  in method reify at src/gen/CORE.setting:5390␤  in method reify at src/gen/CORE.setting:5390␤  in method gimme at src/gen/CORE.setting…

[19:55] <masak> tee hee

[19:56] <sorear> r: die Rat

[19:56] <p6eval> rakudo 7ede6c: OUTPUT«use of uninitialized value of type Str in string context  in block  at /tmp/TJn1SfZWwM:1␤␤use of uninitialized variable  of type Rat in string context  in block  at /tmp/TJn1SfZWwM:1␤␤use of uninitialized value of type Str in string context␤use of uninitialized var…

[19:56] <sorear> r: der Rat

[19:56] <p6eval> rakudo 7ede6c: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&der' called (line 1)␤»

[19:56] <Woodi> maybe we just trying to avoiding work ? :) if we have versions then we must use defaults (newer or official-by-marked-somewhere) as defaults and specify exceptions or always/everywhere use version numbers 

[19:56] <sorear> note, masak, that Perl 6 actually insists on bad grammar. :p

[19:56] <Woodi> same with auth, just next letter to permutate

[19:58] <japhb> Woodi, I'm having a hard time trying to understand what you are saying that is different from S11.

[19:59] *** Chillance joined
[19:59] <Woodi> I am saying that adding versions to modules make system little more complicated and we looking for magic recipe. same with auth - next bit of complication.

[19:59] <Woodi> if we keep that additional bits we must manage them

[20:00] <Woodi> one level of abstraction can help, eg. sets

[20:00] <japhb> Woodi: Yes, I think we understand that, but I think you are underestimating the complexity, because there are a lot of use cases that want different things to be easy.

[20:00] <Woodi> very possible

[20:00] <japhb> In the waterbed theory of complexity, there are a lot of people pushing down on different spots on the bed.

[20:00] <japhb> Building a fair amount of pressure.  :-)

[20:00] *** am0c left
[20:02] <diakopter> heavy waterbed is underwater

[20:02] <Woodi> I think so far we wanted to resolve everything via directory hierarchies. some middle-something is needed

[20:02] <sorear> japhb: what does springing a leak and/or bursting correspond to in the analogy?

[20:03] <PerlJam> Enumerating the use-cases would at least allow us to group the compatible ones or segregate the incompatible ones.

[20:04] <japhb> Woodi, I think we pretty much agreed that directory hierarchies are not enough, that there needs to be some form of database (in the general sense) that disambiguates -- if nothing else, literally because filesystems suck compared to Perl 6.

[20:04] <PerlJam> japhb: aye

[20:04] <japhb> sorear, Someone running away screaming things about Elder Gods?

[20:04] <Woodi> japhb: ok. so for me way to prototype is open :)

[20:06] <japhb> PerlJam, I had sketched various use cases last evening, but nothing terribly coherent.  Hmmm, perhaps I should just post what I have.

[20:06] <japhb> Woodi, prototype away.  But I'd encourage you to post your design for us to look at before you spend a bunch of time on something that won't work for what we need.

[20:06] * japhb is very happy he didn't just go and implement his initial design.

[20:08] <Woodi> japhb: I think writting all requirements on web page is needed. you constantly scarry me and I now don't know what I don't know :)

[20:10] <japhb> https://gist.github.com/4171575

[20:10] <japhb> ^ my notes from yesterday evening

[20:10] <japhb> Woodi, It's always good to try to convert unknown unknowns into known unknowns.  ;-)

[20:10] <Woodi> wow :) I did not see this yet

[20:14] *** kurahaupo joined
[20:19] <Woodi> for me 'use Module;' just uses module from fs, everybody happy. now: how bin/* thingies make problems ? 'distributions' are installable things and bin/* components do not realy belong to "module-version-auth" problem, IMO... 

[20:20] <Woodi> they can installable outside of modules root

[20:20] <japhb> What if program A wants to run() a script from distribution B?  How does it specify which version of that script to run?

[20:20] <Woodi> scripts do not have versions

[20:21] <japhb> o.O

[20:21] <Woodi> distros have

[20:21] <japhb> OK, so how do you find the script that matches a certain version of a distro?

[20:22] <Woodi> installation location for bin/ and share/ need to be known

[20:22] <Woodi> I would like to keep things separate

[20:23] <japhb> Yes, so: how many different scripts of the same name are you planning to store in that bin?  ;-)

[20:25] <Woodi> ls /opt/lib/graft/

[20:25] <Woodi> graft-2.4  log parrot-4.6.0  parrot-4.9.0  star-2012.08  star-2012.09  star-2012.10

[20:25] <japhb> Ah, I see.  What about auth?  Just another hyphenated section of the name?

[20:28] <Woodi> for modules in modules repo yes: root/Foo/Bar.pm.0.98.auth

[20:28] <japhb> scripts and share directories also need to obey both auth and ver.

[20:28] <japhb> And we still want to have a PATH that doesn't explode a la rubygems

[20:30] *** LordVorp joined
[20:31] <Woodi> http://pastebin.com/zqDH7DhD :)

[20:31] <Woodi> we exploit fs or write intermediate vitual fs or db...

[20:33] <kurahaupo> Woodi: the point of "bin" directories is that the files therein can be invoked without the full pathname, because the directories are in the user's $PATH setting. If versions are that important, then keep the file in the package's "lib" or "libexec" directory with a version suffix in the name.

[20:35] * japhb trundles off to retrieve food ...

[20:36] <kurahaupo> Generally, if version N of script S in version N' of package X must invoke version M of script Q in version M' of package Y, then version N' package X should specify the a dependency on version M' of package Y.

[20:37] <Woodi> I refuse to parse... :)

[20:37] <kurahaupo> Short version: it becomes a package versioning problem, as a proxy for the script versioning problem

[20:39] <Woodi> kurahaupo: for me user can just switch used distribution... but probably we talking about few distros used at once...

[20:41] <Woodi> maybe just cloning like in git resolve this. user should build his working env. and for others he should deplay things...

[20:50] *** Kharec left
[21:01] <Woodi> I think deriving personal packages should be easy: install two packages, derive personal from it, add things from second

[21:03] *** rindolf left
[21:03] <colomon> has -I gone back to not working in Rakudo?

[21:03] <colomon> (command line -I, that is)

[21:04] <colomon> never mind, I think I just got the command line order wrong.

[21:04] <moritz> worked earlier today

[21:04] * colomon is having a long, if productive, day

[21:05] *** GlitchMr left
[21:07] * moritz finishes the day by producing coconut macraoons

[21:12] <masak> moritz: yum.

[21:13] *** bruges_ joined
[21:15] *** bruges left
[21:30] *** colomon left
[21:36] *** kaare__ left
[21:36] *** cognominal left
[21:49] *** colomon joined
[21:54] <masak> 'night, #perl6

[21:54] <sorear> knight masak

[21:56] <tadzik> good evenin

[21:57] <sorear> o/ tadzik!

[21:58] <tadzik> sorear! \o/

[21:59] *** ryutin joined
[22:00] <tadzik> I have to get up so early that going to sleep seems to be a waste of time

[22:00] <tadzik> but the experience says "no, go o sleep tadzik"

[22:02] *** hash_table left
[22:11] <dalek> perl6-roast-data: 5b135d0 | coke++ | / (4 files):

[22:11] <dalek> perl6-roast-data: today (automated commit)

[22:11] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/5b135d0266

[22:12] <tadzik> oh wow

[22:12] <tadzik> this Invalid Pointer in free() sounds scary

[22:28] <[Coke]> it's happening sporadically in rakudo.

[22:28] <[Coke]> (check the history of that file over the past week.)

[22:28] *** cognominal joined
[22:46] *** am0c joined
[22:50] *** sftp left
[22:55] *** spider-mario left
[22:55] *** grondilu joined
[22:55] <grondilu> rn: my @a = ^2; for @a -> $x is rw { $x++ }; say @a;

[22:55] <p6eval> rakudo 7ede6c, niecza v22-44-g0247fe5: OUTPUT«1 2␤»

[22:56] <grondilu> eval:  my @a = (0, 1); for my $x (@a) { $x++ }; print join ' ', @a;

[22:56] <buubot_backup> grondilu: 1 21

[22:56] <grondilu> hum

[22:57] <grondilu> hang on

[22:58] <grondilu> eval:  my %a = (foo => 0, bar => 1); for my $x (map { $a{$_} } qw(foo bar)) { $x++ }; %a;

[22:58] <buubot_backup> grondilu: 2/8

[22:59] <grondilu> eval:  my %a = (foo => 0, bar => 1); for my $x (map { $a{$_} } qw(foo bar)) { $x++ }; values %a;

[22:59] <buubot_backup> grondilu: 2

[22:59] <grondilu> eval:  my %a = (foo => 0, bar => 1); for my $x (map { $a{$_} } qw(foo bar)) { $x++ }; join ' ', values %a;

[22:59] <buubot_backup> grondilu: 1 0

[23:00] <grondilu> rn: my %a = (foo => 0, bar => 1); for %a<foo bar> -> $x is rw { $x++ }; say %a.perl;

[23:00] <p6eval> niecza v22-44-g0247fe5: OUTPUT«{"bar" => 2, "foo" => 1}.hash␤»

[23:00] <p6eval> ..rakudo 7ede6c: OUTPUT«("foo" => 1, "bar" => 2).hash␤»

[23:00] <grondilu> rn: my %a = (foo => 0, bar => 1); for %a<foo bar> -> $x is rw { $x++ }; say %a.values;

[23:00] <p6eval> rakudo 7ede6c, niecza v22-44-g0247fe5: OUTPUT«1 2␤»

[23:01] <grondilu> eval:  my %a = (foo => 0, bar => 1); for my $x (map { $a{$_} } qw(foo bar)) { $x++ }; join ' ', values %a;

[23:01] <buubot_backup> grondilu: 1 0

[23:02] <grondilu> rn: my %a = (foo => 0, bar => 1); for %a<foo bar>.clone -> $x is rw { $x++ }; say %a.values;

[23:02] <p6eval> niecza v22-44-g0247fe5: OUTPUT«Unhandled exception: cannot increment a value of type Parcel␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.setting line 270 (Mu.succ @ 9) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/OWJGVqv_6V line 1 (mainline @ 8) ␤  a…

[23:02] <p6eval> ..rakudo 7ede6c: OUTPUT«1 2␤»

[23:03] <grondilu> rn: my %a = (foo => 0, bar => 1); for [%a<foo bar>] -> $x is rw { $x++ }; say %a.values;

[23:03] <p6eval> niecza v22-44-g0247fe5: OUTPUT«Unhandled exception: cannot increment a value of type Array␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.setting line 270 (Mu.succ @ 9) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/bERBUAAlpt line 1 (mainline @ 7) ␤  at…

[23:03] <p6eval> ..rakudo 7ede6c: OUTPUT«No such method 'succ' for invocant of type 'Array'␤  in sub postfix:<++> at src/gen/CORE.setting:1611␤  in block  at /tmp/yTpKpSFcPm:1␤␤»

[23:03] <grondilu> ahh I give up

[23:05] <grondilu> oh I know

[23:05] <grondilu> rn: my %a = (foo => 0, bar => 1); for %a.map: <foo bar> -> $x is rw { $x++ }; say %a.values;

[23:05] <p6eval> rakudo 7ede6c: OUTPUT«No such method 'count' for invocant of type 'Parcel'␤  in method reify at src/gen/CORE.setting:5467␤  in method reify at src/gen/CORE.setting:5390␤  in method reify at src/gen/CORE.setting:5390␤  in method reify at src/gen/CORE.setting:5480␤  in method reify at src…

[23:05] <p6eval> ..niecza v22-44-g0247fe5: OUTPUT«Unhandled exception: Unable to resolve method postcircumfix:<( )> in type Parcel␤  at <unknown> line 0 (KERNEL map @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 363 (Any.map @ 4) ␤  at /tmp/VF7G3zBpPf line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/…

[23:05] *** MayDaniel left
[23:06] <grondilu> rn: my %a = (foo => 0, bar => 1); for %a.map(<foo bar>) -> $x is rw { $x++ }; say %a.values;

[23:06] <p6eval> rakudo 7ede6c: OUTPUT«No such method 'count' for invocant of type 'Parcel'␤  in method reify at src/gen/CORE.setting:5467␤  in method reify at src/gen/CORE.setting:5390␤  in method reify at src/gen/CORE.setting:5390␤  in method reify at src/gen/CORE.setting:5480␤  in method reify at src…

[23:06] <p6eval> ..niecza v22-44-g0247fe5: OUTPUT«Unhandled exception: Unable to resolve method postcircumfix:<( )> in type Parcel␤  at <unknown> line 0 (KERNEL map @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 363 (Any.map @ 4) ␤  at /tmp/Yatv3Fhadp line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/…

[23:06] <grondilu> silly

[23:07] <grondilu> rn: my %a = (foo => 0, bar => 1); for map { %a{$_} }, %a.keys -> $x is rw { $x++ }; say %a.values;

[23:07] <p6eval> rakudo 7ede6c, niecza v22-44-g0247fe5: OUTPUT«1 2␤»

[23:07] <grondilu> ??

[23:08] <grondilu> eval:  my %a = (foo => 0, bar => 1); for my $x (map { $a{$_} } qw(foo bar)) { $x++ }; join ' ', values %a;

[23:08] <buubot_backup> grondilu: 1 0

[23:08] <grondilu> see what's wrong here??

[23:09] <grondilu> rn: my %a = (foo => 0, bar => 1); for map { +%a{$_} }, %a.keys -> $x is rw { $x++ }; say %a.values;

[23:09] <p6eval> rakudo 7ede6c: OUTPUT«Cannot assign to a non-container␤  in sub postfix:<++> at src/gen/CORE.setting:3077␤  in block  at /tmp/4IyeXiUq9k:1␤␤»

[23:09] <p6eval> ..niecza v22-44-g0247fe5: OUTPUT«Unhandled exception: Writing to readonly scalar␤  at /tmp/8PhUi6niYt line 1 (mainline @ 9) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4211 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4212 (module-CORE @ 578) ␤  at /home/p6eval/niecza/li…

[23:10] <grondilu> rn:  for ^2 -> $x is rw { $x++ }

[23:10] <p6eval> niecza v22-44-g0247fe5:  ( no output )

[23:10] <p6eval> ..rakudo 7ede6c: OUTPUT«Cannot assign to a non-container␤  in sub postfix:<++> at src/gen/CORE.setting:3077␤  in block  at /tmp/6qPaqNLVpi:1␤␤»

[23:10] *** ircmouser left
[23:11] <pmurias> japhb: I agree, but that seems like something that is a responsibility of a tool like carton for p5

[23:15] *** Gothmog_ left
[23:18] * japhb has never used Carton ... (looks it up) ... oh of *course* it's Miyagawa!  Who else would it be?  :-)

[23:22] *** stopbit left
[23:28] *** Chillance left
[23:38] *** wamba left
[23:41] *** bluescreen10 left
[23:41] *** bluescreen10 joined
[23:48] *** bluescreen10 left
