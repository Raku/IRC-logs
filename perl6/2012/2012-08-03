[00:04] *** Chillance left
[00:20] *** whiteknight joined
[00:20] *** cognominal_ left
[00:20] *** whiteknight is now known as Guest83593

[00:27] *** gongyiliao left
[00:27] *** benabik joined
[00:50] *** leprevost joined
[01:25] *** alester_ joined
[01:25] *** alester left
[01:25] *** alester_ is now known as alester

[01:26] *** zhutingting joined
[01:44] *** Guest83593 left
[01:52] *** echo joined
[01:53] <moritz> japhb: sync'ed

[02:00] <echo> Hi, I am playing perl6 and find that 24*(1+0.06)**384.0 and 24*(1+0.06)**384 will give different answers. Is the later the wrong way to write? thanks.

[02:00] <echo> I am using rakudo 2012.07

[02:01] <benabik> r: say 24*(1+0.06)**384.0 ; say 24*(1+0.06)**384

[02:01] <p6eval> rakudo d71ad1: OUTPUT«125217060205.887␤125217060160.84␤»

[02:01] <moritz> nr: say 24*(1+0.06)**384.0 ; say 24*(1+0.06)**384

[02:01] <p6eval> niecza v19-15-g051783d: OUTPUT«125217060205.88733␤125217060205.88733␤»

[02:01] <p6eval> ..rakudo d71ad1: OUTPUT«125217060205.887␤125217060160.84␤»

[02:02] <moritz> that is... not good

[02:02] <moritz> echo: I fear that's an artifact of how our numbers are stored, and me being too stupid to properly implement arithmetics on them :(

[02:02] <benabik> r: say (1.06)**384.0 ; say (1.06)**384

[02:02] <p6eval> rakudo d71ad1: OUTPUT«5217377508.57864␤5217377506.70165␤»

[02:03] <moritz> that's Rat**Int which seems... less than awesome

[02:03] <moritz> r: 1.06.Num ** 384

[02:03] <p6eval> rakudo d71ad1:  ( no output )

[02:03] <moritz> r: say 1.06.Num ** 384

[02:03] <p6eval> rakudo d71ad1: OUTPUT«5217377508.57864␤»

[02:04] <moritz> that goes through floating point numbers

[02:05] <echo> I will always write the first one for the moment. Thanks.

[02:06] <echo> It is tricky. 

[02:08] <echo> another question. If I find something not normal,Is there any place to verify or find if anyone have found that before? 

[02:08] <moritz> https://rt.perl.org/rt3/ has a list of bugs

[02:09] <moritz> but the searchability of the RT queue is less than awesome

[02:09] <echo> I read a lot of your tutorial and really thanks.

[02:10] <moritz> you're welcome

[02:22] <colomon> echo: easiest thing to do is to ask here (about bugs).  :)

[02:22] <colomon> r: say (1.06)**384

[02:22] <p6eval> rakudo d71ad1: OUTPUT«5217377506.70165␤»

[02:22] <colomon> n: say (1.06)**384

[02:22] <p6eval> niecza v19-15-g051783d: OUTPUT«5217377508.578639␤»

[02:23] <colomon> n: say (1.06.FatRat)**384

[02:23] <p6eval> niecza v19-15-g051783d: OUTPUT«NaN␤»

[02:23] *** scott__ joined
[02:23] <colomon> n: say 1.06.FatRat

[02:23] <p6eval> niecza v19-15-g051783d: OUTPUT«1.06␤»

[02:23] <moritz> r: say 1.06.perl

[02:23] <p6eval> rakudo d71ad1: OUTPUT«53/50␤»

[02:24] <moritz> nr: say (53**384).chars

[02:24] <p6eval> rakudo d71ad1, niecza v19-15-g051783d: OUTPUT«663␤»

[02:24] <colomon> n: say ((1.06.FatRat)**384).perl

[02:24] <p6eval> niecza v19-15-g051783d: OUTPUT«FatRat.new(13241400660091156056334719701338260226764002303147813802454285456612311964653211447415649668659283876494128843861273631330687331673632294634852991128151336619315546065563567471038214779542711878205563401264431722452303302076085050815665733142294…

[02:24] <colomon> oh

[02:25] <moritz> why does it stringify as NaN then?

[02:25] <colomon> division issues, I'm guessing

[02:25] <moritz> anyway, the problem in Rakudo seems to be an inaccuracy in infix:</>(bigint, bigint)

[02:25] <moritz> r: say 1.06.FatRat ** 384

[02:25] <p6eval> rakudo d71ad1: OUTPUT«5217377508.57853678158367471577558896911296684033702009137685882134998813049278425115338102763067168317575441624721824489951738517181649000430145886166955575568251095916135729057151636896645750392722496766026338071272892232751692201166059811032002441617787626320865…

[02:30] <colomon> n: say ((1.06.FatRat)**384).numerator.Num

[02:30] <p6eval> niecza v19-15-g051783d: OUTPUT«Inf␤»

[02:30] <colomon> Ah, that's the problem.

[02:33] <echo> Thanks. If I want to read some source code, which part should I start? perl is my first language, then I learn a little bit haskell.

[02:33] <moritz> rakudo does it a bit smarter than first coercing both ints to Num

[02:34] <echo> to be frank, I do not know what your are talk about.

[02:34] <echo> about FatRat issues

[02:35] <moritz> echo: FatRat is a way to store rational numbers, with arbitrary precision numerator and denominator

[02:36] <moritz> echo: and niecza has trouble printing 1.06.FatRat ** 384, because both numerator and denominator are too large to fit into a floating point value

[02:36] <moritz> whereas rakudo can print it, but has trouble converting the result to a floating point value again

[02:36] <moritz> echo: so, what kind of source code you want to read?

[02:37] <colomon> moritz: you can't coerce that Int to a Num, that's the problem.

[02:37] <echo> If just the numeric part in rakudo?

[02:37] *** gongyiliao joined
[02:38] <moritz> echo: well, that's a bit spread out :-)

[02:38] <moritz> parsing of numbers is in src/Perl6/Grammar.pm

[02:38] <moritz> (number literals, that is)

[02:38] <moritz> the core types are defined in src/core/{Int,Rat,Num,Real,Numeric}.pm

[02:39] <moritz> and bigint stuff happens in nqp

[02:39] <moritz> colomon: yes. But you don't need to for stringification

[02:42] *** Psyche^ joined
[02:42] *** Psyche^ is now known as Patterner

[02:42] <colomon> moritz: oh, right, sorry, I read your "bit smarter than first coercing both ints to Num" exactly backwards.

[02:43] <echo> I happen to have a question. several days ago. there is a question in reddit. to get the 10000 digit after the decimal of sqrt(2). It is easy to get arbitrary Int. but it's not easy to get arbitrary precision of float. I just do not have any idea.

[02:44] *** gongyiliao left
[02:45] <moritz> fwiw code that leads to rakudo's wrong results is either in https://github.com/perl6/nqp/blob/master/src/ops/nqp_bigint.ops#L307 or https://github.com/perl6/nqp/blob/master/src/ops/nqp_bigint.ops#L22

[02:45] <moritz> echo: now what's your question?

[02:46] <echo> get the sqrt(2) but need 10000 digits after the decimal

[02:46] <colomon> right

[02:47] <moritz> echo: do it with integers

[02:47] <colomon> there's no built in way to get that info

[02:47] <moritz> basically you need to calculate   round(2 * 10^20000)

[02:47] <moritz> erm, sqrt(round(2 * 10 **20000))

[02:48] <moritz> and get the last digit

[02:48] <echo> I understand

[02:48] <echo> thanks.

[02:48] <moritz> our sqrt implementation isn't good enough for that, so you need to write your own iterative sqrt solver

[02:48] <colomon> .... that's a lot simpler solution than I was going to suggest

[02:48] <moritz> which isn't hard

[02:48] <colomon> oh, not so much.

[02:48] <echo> I know a little bit of it.

[02:49] <echo> but never think about to change it to an Int problem

[02:49] <echo> Thanks.

[02:49] <colomon> http://justrakudoit.wordpress.com/?s=pi+spigot might be a start for a different approach.  

[02:50] <moritz> oh right, spigot algorithms for sqrt(2) exist too

[02:50] <moritz> they are even easier than for pi, iirc

[02:50] <echo> thanks.

[02:51] <colomon> I need to get the continued fraction module up and running, that would make it easy.

[02:51] <echo> I am curious about your  background. You are a phd in physics if i am not wrong. How can you know so much about cs?

[02:51] <moritz> echo: it's my hobby :-)

[02:52] <moritz> also my minor subject

[02:52] <colomon> moritz++

[02:52] <echo> I am not a cs student too. but self learning is not easy. maybe i am not smart.

[02:53] <echo> which books are most useful to know something about the core stuff?

[02:54] <moritz> well, since we are now on the subject of programming and discrete math, Knuth is a good recommendation :-)

[02:54] <moritz> The Art of Computer Programming by D. Knuth

[02:54] <echo> they are too big. haha

[02:54] <benabik> But informative.

[02:54] <echo> I mean several volumes

[02:56] <moritz> https://gist.github.com/3243897 # spoiler

[02:57] <moritz> and it's slooooow

[02:57] <moritz> about a second per iteration  or so

[02:57] <echo> wow. thanks.

[02:57] <moritz> oh

[02:58] <moritz> one can start off a bit smarter

[02:58] <moritz> my Int $sqrt = 10 ** 10_000

[02:58] <moritz> starting with a guess in the right ballpark makes it run in 13s on my machine

[02:58] <moritz> instead of, like, forever :-)

[03:00] <moritz> nr: https://gist.github.com/3243897

[03:00] <p6eval> rakudo d71ad1, niecza v19-15-g051783d: OUTPUT«1␤»

[03:00] <moritz> so, that's your answer :-)

[03:00] <moritz> just hope it's correct :-)

[03:01] <echo> thanks. 

[03:01] <moritz> I haven't proven that my sqrt implementation converges on the right number

[03:01] *** orafu joined
[03:01] <TimToady> not sure rounding is the correct algorithm either

[03:02] <moritz> it would be much more robust to start with 2 * 10**20_002

[03:02] <TimToady> is the 4th digit of pi 5 or 6?

[03:02] <moritz> and take the second-to-last digit 

[03:03] <moritz> doing that still gives 1

[03:03] <moritz> so, lucky me :-)

[03:04] <moritz> niecza++ # running the thing in oly 3s

[03:04] <moritz> n: https://gist.github.com/3243897

[03:04] <p6eval> niecza v19-15-g051783d: OUTPUT«1␤»

[03:04] <moritz> now a wee bit robuster

[03:05] <moritz> now that $smallone is asleep again, I'll try to do the same

[03:05] <moritz> resleep&

[03:05] <echo> I do not know why start point is important?

[03:09] <echo> just for speed?

[03:10] <diakopter> TimToady: you and your rhetorical inquiries.. :P

[03:16] <echo> substr(*-2, 1)->substr(1,*-2)

[03:16] *** dayangkun joined
[03:18] <echo> why I have to put * in front of -2, instead of perl5's way?

[03:20] *** gongyiliao joined
[03:21] *** zhutingting left
[03:21] <colomon> echo: Perl 6 tries to get rid of all the "negative numbers do something magical" things like that.

[03:22] <diakopter> instead, * does something magical

[03:22] <colomon> So *-2 is a simple anonymous function, something like sub ($x) { $x - 2 }

[03:23] <colomon> and when functions like substr get a function where they expect to get an Integer, they apply the length of what they are dealing with to the function and use the result as their integer.

[03:23] <echo> understand. It is more uniform. kind of like section in haskell.

[03:23] <colomon> nr: my @a = 0..10; say @a[*-1]

[03:23] <p6eval> rakudo d71ad1, niecza v19-15-g051783d: OUTPUT«10␤»

[03:23] <colomon> nr: my @a = 0..10; say @a[*/2]

[03:24] <p6eval> rakudo d71ad1, niecza v19-15-g051783d: OUTPUT«5␤»

[03:24] <colomon> nr: my @a = 0..10; say @a[*.sqrt]

[03:24] <p6eval> rakudo d71ad1, niecza v19-15-g051783d: OUTPUT«3␤»

[03:25] <colomon> it's one more character to type, but it's more flexible and harder to trigger accidentally. 

[03:25] <echo> Yes. but  only if you understand. I think.

[03:26] <echo> Your answer help's a lot.

[03:26] <TimToady> n: say $_[-1]

[03:26] <p6eval> niecza v19-15-g051783d: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unsupported use of [-1] subscript to access from end of array; in Perl 6 please use [*-1] at /tmp/Ee_E8eyOZB line 1 (EOF):␤------> [32msay $_[-1][33m⏏[31m<EOL>[0m␤␤Parse failed␤␤»

[03:27] <TimToady> at least you can get a decent error message telling you what to do

[03:27] *** zhutingting joined
[03:27] <colomon> n: say substr("This is a test", *-2)

[03:27] <p6eval> niecza v19-15-g051783d: OUTPUT«st␤»

[03:27] <colomon> n: say substr("This is a test", -2)

[03:27] <p6eval> niecza v19-15-g051783d: OUTPUT«Str()␤»

[03:27] <colomon> ...sometimes...

[03:27] <diakopter> n: say $_[0-1]

[03:27] <p6eval> niecza v19-15-g051783d: OUTPUT«Any()␤»

[03:29] <diakopter> r: say $_[0-1]

[03:29] <p6eval> rakudo d71ad1: OUTPUT«Cannot use negative index -1 on Any␤  in method gist at src/gen/CORE.setting:9636␤  in sub say at src/gen/CORE.setting:7028␤  in block  at /tmp/rEWeoWV8NT:1␤␤»

[03:30] <diakopter> r: say [5][0-1]

[03:30] <p6eval> rakudo d71ad1: OUTPUT«Cannot use negative index -1 on Array␤  in method gist at src/gen/CORE.setting:9636␤  in sub say at src/gen/CORE.setting:7028␤  in block  at /tmp/Io2v_sy3oB:1␤␤»

[03:31] <diakopter> n: say [5][0-1]

[03:31] <p6eval> niecza v19-15-g051783d: OUTPUT«Any()␤»

[03:33] <echo> Is it possible to input multiline sub in the repl.

[03:33] <echo> for the moment, i can only input one line sub in the repl.

[03:33] <echo> thanks.

[03:34] *** zhutingting left
[03:35] *** zhutingting joined
[03:40] <echo>  my @a = 1..10; say @a[*/2-1] this works too.

[03:40] <echo>  my @a = 1..10; say @a[*/2-1] this works too

[03:41] <echo> easy way to get the median

[03:47] *** zhutingting1 joined
[03:48] <sorear> you need to sort it first

[03:48] <echo> yes. thanks.

[03:49] *** zhutingting left
[03:56] *** echo left
[04:02] *** echo joined
[04:03] *** echo left
[04:08] *** okiraku_neko joined
[04:11] *** okiraku_neko left
[04:15] *** dayangkun left
[04:21] *** xinming joined
[04:39] *** leprevost left
[04:45] *** skids left
[04:52] *** benabik left
[04:54] *** benabik joined
[05:13] <japhb> moritz++ # thank you for syncing the docs

[05:13] <japhb> jnthn, hopefully you will find http://doc.perl6.org/images/type-graph-Numeric.png more to your liking now.  :-)

[05:41] *** zhutingting1 left
[05:47] *** zhutingting1 joined
[05:57] <moritz> japhb++ # that one is really cool

[05:58] *** zhutingting joined
[05:59] *** zhutingting1 left
[05:59] *** wtw joined
[06:00] *** cxreg joined
[06:18] *** birdwindupbird joined
[06:21] *** jdrab joined
[06:35] *** kaleem joined
[06:53] *** kaleem left
[06:58] *** kaleem joined
[07:07] <cosimo> built the current rakudo. ready to get back on track, testing my modules at least :-)

[07:07] <cosimo> and good $morning, #perl6

[07:08] <moritz> \o cosimo 

[07:11] <moritz> MIME::Base64 is currently broken (on which LWP::Simple depends). Ive submitted a pull request, but snarkyboojum didn't merge it yet

[07:11] *** SamuraiJack joined
[07:15] <moritz> and LWP::Simply might need to replace $str.bytes with $str.encode.bytes

[07:16] <moritz> in fact, LWP::Simply should be switched to use Buf for binary data, but IO::Socket.recv can't handle that yet :(

[07:20] *** zhutingting left
[07:24] <sorear> o/ moritz

[07:29] <cosimo> moritz: saw that

[07:30] <cosimo> lately I was wondering if following the p5 model is the correct thing to do

[07:30] <cosimo> I mean, it would be easier I guess for people to try out something called LWP::Simple

[07:30] *** zhutingting joined
[07:30] <cosimo> but, is that really using the power of perl6?

[07:31] <cosimo> I've been reading a bit too many Alan Kay's articles lately :-)

[07:34] <moritz> for any non-Perl user, "LWP" is a terrible name

[07:34] *** spider-mario joined
[07:37] *** zhutingting left
[07:38] <diakopter> acronyms of acronyms usually are

[07:39] <diakopter> (imho)

[07:39] <cosimo> there is other perl6 http clients out there, right?

[07:39] <cosimo> I remember having seen one or two

[07:40] <moritz> https://github.com/supernovus/perl6-http-client/

[07:41] *** fhelmberger joined
[07:41] <sorear> moritz: so uh.  2 weeks.  I need to work out travel and lodging ASAP.  stress, ton of bricks, go.

[07:42] <cosimo> github is having some problems for me

[07:43] <cosimo> moritz: if that's good, we should probably let LWP::Simple die?

[07:44] <cosimo> meanwhile, make spectest is failing for me on t/spec/S02-types/version.t

[07:47] <moritz> that's an odd test to fail on

[07:49] <cosimo> I'm trying (and failing) to obtain verbose test results

[07:50] <moritz> ./perl6 -Ilib t/spec/S02-types/version.t

[07:50] <tadzik> good morning

[07:51] *** zhutingting joined
[07:53] <cosimo> moritz: doh

[07:55] <cosimo> moritz: http://paste.scsys.co.uk/204670

[07:57] <moritz> all those greek letters

[07:57] <moritz> cosimo: lemme guess, you don't have ICU installed?

[07:58] <moritz> r: say $*VM<config><has_icu>

[07:58] <p6eval> rakudo d71ad1: OUTPUT«1␤»

[07:59] <cosimo> moritz: has_icu=0

[08:03] *** GlitchMr joined
[08:05] <cosimo> moritz: what do you say of skipping those tests if has_icu=0 ?

[08:05] <cosimo> I can try to write a patch

[08:05] <cosimo> :)

[08:06] <moritz> it's just adding an # icu  marker to t/spectest.data

[08:12] *** b1rkh0ff joined
[08:16] *** xinming left
[08:19] <cosimo> moritz: ok

[08:23] <cosimo> am I the only one seeing "Something went wrong" all over the place at github?

[08:25] <cosimo> no files or commit info showing...

[08:25] <moritz> the things I've looked just now seem to work

[08:25] <cosimo> github.com/rakudo/rakudo/ for example is broken for me

[08:25] <tadzik> looks good from here

[08:26] <cosimo> ?

[08:26] <moritz> loks fiine here too

[08:27] <cosimo> my browser probably. using Opera 12.50 ;-)

[08:27] *** zhutingting left
[08:28] <moritz> browserbug!

[08:33] <cosimo> filed too

[08:33] <cosimo> 12.50 is not out yet

[08:34] <masak> good antenoon, #perl6

[08:35] <GlitchMr> You should expect surprises with dev version of browser

[08:36] <masak> moritz: I just found your RFC for the AST docs. (was a little distracted with $family yesterday.)

[08:36] <masak> moritz: it looks good overall.

[08:37] <masak> moritz: "partially processed" -- I'm thinking whether there is a more exact description than that.

[08:37] *** crab2313 joined
[08:37] <masak> also, it is a good bet that an API will emerge out of the macros work. the trick will be to have it be implementable across implementations.

[08:38] <cosimo> GlitchMr: I use our alphas all the time, even for mail :)

[08:39] <GlitchMr> "On this site, on IRC, and at YAPC::NA 2012 I heard many people comment that Windows users really wanted a binary install option."

[08:39] <GlitchMr> :)

[08:40] <GlitchMr> Well, I've moved to Linux, but it's nice nevertheless :)

[08:42] <cosimo> I'm on Linux too

[08:43] <sorear> i wanted a binary install option when I was on a Linux machine with 384 MB of RAM

[08:43] <hoelzro> that's actually an interesting point

[08:43] <GlitchMr> 384MB?

[08:43] <GlitchMr> That's... really low

[08:43] <sorear> now I'm on an OSX machine with 8G, and the need is less pressing

[08:43] <hoelzro> I can't install Rakudo Star on my VPS because I run out of RAM =(

[08:43] <GlitchMr> But, I guess I had 10 years machine with 128MB of RAM, so whatever

[08:43] <GlitchMr> years ago*

[08:43] <sorear> GlitchMr: tell that to kid51 and lue both of whom are still on 256

[08:44] <GlitchMr> Heh, I'm making a blog layout now :P

[08:44] <GlitchMr> http://dl.dropbox.com/u/63913412/webdesign.png

[08:44] <GlitchMr> I know that I'm not designer :P

[08:45] <tadzik> ha, Opera

[08:45] * tadzik approves

[08:45] <GlitchMr> Yes, it's a nice browser

[08:47] <GlitchMr> Just don't laugh at my site source: http://paste.uk.to/b220dee0 and http://paste.uk.to/abecce20

[08:47] <GlitchMr> Yes, testing

[08:47] <GlitchMr> Everything aside of layout is placeholder

[08:48] *** mucker joined
[08:49] <GlitchMr> ... actually... I just have noticed placeholderish url() in my CSS :P

[08:49] <cosimo> html5 yea

[08:49] <GlitchMr> I would call it pseudo HTML5

[08:50] <sorear> sleep&

[08:50] <GlitchMr> I mean, all it uses from HTML5 is DOCTYPE

[08:50] <jnthn> morning

[08:50] <tadzik> hello jnthn 

[08:51] <GlitchMr> jnthn proposed me to blog about this DuckDuckGo thing, so I'm now making layout for blog :P

[08:52] <jnthn> \o/

[08:52] <jnthn> GlitchMr++

[08:52] <GlitchMr> tadzik: I even use Opera Mini at my phone :P.

[08:52] <GlitchMr> Opera Link is so useful

[08:54] <jnthn> japhb++ # http://doc.perl6.org/images/type-graph-Numeric.png is awesome

[08:54] <GlitchMr> It would be nicer if bookmarks would sync between Opera Mini and Opera Desktop, but whatever. As long... "Quick Select" or whatever it is called in English version works it's fine

[08:58] <GlitchMr> Just wondering, would it be possible to add my blog to planetsix.perl.org when I will push it to server?

[09:03] *** mucker left
[09:03] *** mucker joined
[09:03] <masak> that would most certainly be possible, yes.

[09:03] <jnthn> Should be.

[09:03] <jnthn> I always forget who has the access to do it.

[09:03] <masak> well, if you have an RSS or Atom feed, at least.

[09:06] <GlitchMr> I can make RSS feed...

[09:11] *** Coleoid joined
[09:13] *** brrt joined
[09:30] <cosimo> GlitchMr: bookmarks do sync between desktop and mini

[09:31] *** lauper_cyndi joined
[09:31] <lauper_cyndi> I just talked to Keanu Reeves yesterday

[09:31] <lauper_cyndi> and he made this funny pic on the quickmeme http://i.qkme.me/3q1yr9.jpg

[09:31] <tadzik> heh, I just wanted to paste this as "Look what just appeared on #perl"

[09:39] <masak> it's funny, but untrue. I've been using Perl 6 for the past seven years and a half years. it's not impossible to implement.

[09:40] <masak> s/ years//

[09:40] <jnthn> But it's bloody hard!

[09:40] <jnthn> :P

[09:43] *** lauper_cyndi left
[09:44] <jnthn> .oO( If it was boringly easy, I'd probably not be here, though, so... :) )

[09:48] *** driador joined
[09:53] <felher> moritz: would you be so kind as to take a brief look and maybe even apply https://gist.github.com/3240741 ? It didn't introduce any spectest failures :)

[10:00] *** huf joined
[10:00] <masak> felher: looks good -- but allow me to play devil's advocate a little.

[10:01] <felher> masak: sure, go ahead :)

[10:01] <masak> felher: what's the use case? what's the worst thing that happens if we don't give Date.new these defaults?

[10:02] <masak> specifically, do you consider Date.new(2014, 5) more readable than Date.new(2014, 5, 1) ?

[10:02] <masak> or less?

[10:02] <jnthn> masak: This is the constructor taht takes named args

[10:02] <masak> oh!

[10:03] <masak> I immediately drop all my complaints.

[10:03] <felher> masak: this is only for the named parameters. So you may write Date.new(year => 1) instead of Date.new(year => 1, motnh =>1, day => 1)

[10:03] <felher> :)

[10:03] <masak> but we should maybe consider the option of making all three nameds obligatory instead of giving them defaults.

[10:03] <masak> though I admit my case for that is smaller than if they were positional.

[10:04] *** daxim joined
[10:05] *** SamuraiJack left
[10:06] *** SamuraiJack joined
[10:11] <felher> I like to be able to say Date.new(year => 2012). If this isn't used as a abbreviation for 2012-01-01 specifically (in wich case i really would write Date.new(2012,1,1)), it tells me that the other two values are either unimportant or will be filled in later.

[10:11] <felher> masak: i understand your point, though :)

[10:16] *** scott__ left
[10:23] *** xinming joined
[10:28] *** spider-mario left
[10:33] *** brrt left
[10:44] <felher> r: my @array = <blar blubb>; say "blar" ~~ /^ @array $/;

[10:44] <p6eval> rakudo d71ad1: OUTPUT«#<failed match>␤»

[10:44] <felher> Hm.. I guess array interpolation into regex is not working yet? :)

[10:47] <hoelzro> felher: I don't think any interpolation is working

[10:47] <hoelzro> wrt rakudo

[10:47] <hoelzro> also, wouldn't it be /^ @array[] /?

[10:47] * hoelzro is not sure

[10:47] <masak> I don't think regex interpolation needs the []

[10:48] *** MayDaniel joined
[10:48] <felher> hoelzro: thnx :)

[10:48] <hoelzro> oh, good to know!

[10:52] <felher> Hm, whatever. I just put a extra testfile in my testsuite, testing array interpolation and assuming it to fail. And as soon as rakudo gets to interpolate @arrays into regex, the test fails and i can substitute the old code with cute new code :)

[10:53] *** jdrab left
[10:53] *** alester left
[10:53] *** c1sung_ joined
[10:53] *** sftp_ joined
[10:53] *** mathw left
[10:53] *** Patterner left
[10:53] *** preflex_ joined
[10:53] *** sporous joined
[10:54] *** preflex_ is now known as preflex

[10:54] *** sorear joined
[10:54] *** robinsmidsrod joined
[10:55] *** alester_ joined
[10:55] *** jdrab_ joined
[10:55] *** mathw_ joined
[10:55] *** alester_ is now known as alester

[10:55] *** rhr_ joined
[10:55] <hoelzro> felher: try /^ <@array> $/, maybe

[10:55] <hoelzro> I'm pretty sure that works with scalars

[10:55] <hoelzro> r: my $o = 'o'; say 'foo' ~~ / <$o> /

[10:55] <p6eval> rakudo d71ad1: OUTPUT«q[o]␤␤»

[10:55] *** Psyche^ joined
[10:55] *** Psyche^ is now known as Patterner

[10:55] *** Pleiades` joined
[10:55] *** Pleiades` left
[10:55] *** Pleiades` joined
[10:56] <felher> r: my @array = <blar blubb>; say "blar" ~~ /^ <@array> $/;

[10:56] <p6eval> rakudo d71ad1: OUTPUT«#<failed match>␤»

[10:57] *** jevin joined
[10:57] <felher> hoelzro: thanks, but it doesn't seem to work :)

[10:59] <hoelzro> felher: well, that might not be interpolation-related

[10:59] <hoelzro> r: my @arry = <o>; say 'foo' ~~ / <@arry> /

[10:59] <p6eval> rakudo d71ad1: OUTPUT«q[o]␤␤»

[10:59] <gfldex> @array / is correct, see http://perlcabal.org/syn/S05.html#line_1265

[10:59] <hoelzro> your regex just doesn't match!

[10:59] <hoelzro> gfldex: ah, thank you

[11:00] <gfldex> if you want to match against the array "foo" ~~ @array will do

[11:00] *** cognominal joined
[11:00] <gfldex> if you want to match against a list of patterns you may be out of luck

[11:01] <GlitchMr> http://paste.uk.to/6ae1cd74

[11:01] <felher> hoelzro: i guess it is interpolated as a string, currently.

[11:01] <GlitchMr> Bored...

[11:01] <felher> r: my @array = <blar blubb>; say "blar blubb" ~~ /^ @array $/;

[11:01] <p6eval> rakudo d71ad1: OUTPUT«q[blar blubb]␤␤»

[11:01] <felher> \o/ 

[11:01] <felher> looks like string interpolation. :) Not the kind of interpolation i want, but you can't say @arrays don't get interpolated into regex ;)

[11:02] <gfldex> felher: it depends whatis in that variable

[11:02] <gfldex> if you got a Regexp object, it will call that subrule

[11:02] <gfldex> that should work for arrays too

[11:02] *** spider-mario joined
[11:03] <gfldex> there is some funky syntax to turn a string into a regexp object (and as such a subrule) on the fly

[11:04] <timotimo> r: my @array = <blar blubb>; say "blubb blar" ~~ /^ @array $/;

[11:04] <p6eval> rakudo d71ad1: OUTPUT«#<failed match>␤»

[11:04] <timotimo> heh.

[11:04] *** kaleem left
[11:04] *** kaleem joined
[11:05] <felher> gfldex: good to know, thnx :)

[11:06] <felher> timotimo: i guess @array gets interpolated into the regex as a string. And since "@array[]" gets you "blar blubb", it matches only "blar blubb", and not "blubb blar". :)

[11:06] <GlitchMr> huh?

[11:06] <GlitchMr> Shouldn't interpolating @array in regexp make alternations dynamically?

[11:06] <timotimo> it would certainly be pretty cool.

[11:06] <timotimo> r: my @array = <blar blubb>; my $alt = any(@array); say "blubb blar" ~~ /^ $alt $/;

[11:06] <p6eval> rakudo d71ad1: OUTPUT«Can not get non-existent attribute '$!pos' on class 'Cursor'␤  in regex  at /tmp/FSbHUNMFab:1␤  in method ACCEPTS at src/gen/CORE.setting:9866␤  in block  at /tmp/FSbHUNMFab:1␤␤»

[11:06] <GlitchMr> n: my @array = <blar blubb>; say "blubb blar" ~~ /^ @array $/;

[11:06] <timotimo> r: my @array = <blar blubb>; my $alt = any(|@array); say "blubb blar" ~~ /^ $alt $/;

[11:06] <p6eval> niecza v19-15-g051783d: OUTPUT«Match()␤»

[11:06] <p6eval> rakudo d71ad1: OUTPUT«Can not get non-existent attribute '$!pos' on class 'Cursor'␤  in regex  at /tmp/tyXz46lJbE:1␤  in method ACCEPTS at src/gen/CORE.setting:9866␤  in block  at /tmp/tyXz46lJbE:1␤␤»

[11:07] <felher> GlitchMr: it should. I just NYI, i guess :)

[11:07] <GlitchMr> n: my @array = <blar blubb>; say "blar blubb" ~~ /^ @array $/;

[11:07] <p6eval> niecza v19-15-g051783d: OUTPUT«Match()␤»

[11:07] <GlitchMr> n: my @array = <blar blubb>; say ">>" ~~ /^ @array $/;

[11:07] <p6eval> niecza v19-15-g051783d: OUTPUT«Match()␤»

[11:07] <GlitchMr> huh?

[11:07] <timotimo> heh, whoops

[11:07] <timotimo> that gist (?) of Match is pretty useless ;)

[11:08] <GlitchMr> Well, it seems to work in Niecza

[11:08] <GlitchMr> But why it still isn't implemented?

[11:09] <GlitchMr> http://paste.uk.to/3e88451e

[11:09] <gfldex> star: my @array = <blar blubb>; say "blubb blar" ~~ /^ @array $/;

[11:09] <GlitchMr> I'm crazy enough to use Jekyll

[11:09] <p6eval> star 2012.07: OUTPUT«#<failed match>␤»

[11:09] <GlitchMr> It shouldn't match ever

[11:09] <timotimo> n: say "blubb blar" ~~ /^ blubb|blar $/;

[11:09] <p6eval> niecza v19-15-g051783d: OUTPUT«#<match from(0) to(5) text(blubb) pos([].list) named({}.hash)>␤»

[11:10] <timotimo> that's very different from the one where you matched @array

[11:10] <timotimo> it seems Match() is nieczas way of saying "no match"

[11:10] <GlitchMr> timotimo: are you sure you wanted /[^ blubb]|[blah $]/

[11:10] <timotimo> i'm very much not

[11:10] <timotimo> but that would explain the match

[11:10] <timotimo> n: say "blubb blar" ~~ /^ (blubb|blar) $/;

[11:10] <p6eval> niecza v19-15-g051783d: OUTPUT«Match()␤»

[11:10] <timotimo> ah, in that case, it would even be correct

[11:11] <timotimo> n: my @array = <blar blubb>; say "blubb blar" ~~ /^ @array /;

[11:11] <p6eval> niecza v19-15-g051783d: OUTPUT«#<match from(0) to(5) text(blubb) pos([].list) named({}.hash)>␤»

[11:11] *** cognominal left
[11:12] <gfldex> is there any reason why you stick that stuff into a regexp?

[11:14] <GlitchMr> Just wondering, if my array would look like (/./, /../) would it match one or two charcters when inserted to regexp?

[11:14] <felher> gfldex: not for those little examples :) but for someting like "regex date { (\d\d?) '.'? \h* (@month-names) , to match someting like "7. Decemeber". :)

[11:15] <gfldex> i would do that with a subrule

[11:15] <gfldex> because i doubt the month-names change at runtime

[11:16] <GlitchMr> ('a', 'b') should be converted into ['a'|'b'] dynamically

[11:16] <GlitchMr> Simple as that

[11:17] <GlitchMr> If I do / @array+ / it should do what I mean

[11:17] <GlitchMr> And + only on last element isn't what I mean

[11:18] <felher> gfldex: if you need @month-names somewhere else in your program, you already got it. There is no need for writing them down again.

[11:18] <felher> Yeah, according to spec /@array/ is the same as /[@array[0] | @array[1] | ... ]/

[11:21] *** JimmyZ_ joined
[11:24] *** crab2313 left
[11:31] *** kaleem left
[11:41] *** birdwindupbird left
[11:43] *** mtk joined
[11:46] *** jaldhar joined
[11:49] *** birdwindupbird joined
[11:52] *** cognominal joined
[11:52] *** b1rkh0ff left
[12:05] *** b1rkh0ff joined
[12:07] *** Coleoid left
[12:09] <dalek> rakudo/nom: 1f662c9 | (Felix Herrmann)++ | src/core/Temporal.pm:

[12:09] <dalek> rakudo/nom: change constructor of Date to use default values for year/month/day

[12:09] <dalek> rakudo/nom: 

[12:09] <dalek> rakudo/nom: Signed-off-by: Moritz Lenz [email@hidden.address]
[12:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1f662c9aa6

[12:13] <felher> moritz++ :)

[12:13] <moritz> felher++ for the patch

[12:13] <JimmyZ_> rn: for (1, 2, 3, 4, 5) -> $x, $y? = 0 { say "$x $y";}

[12:14] <p6eval> niecza v19-15-g051783d: OUTPUT«1 2␤3 4␤»

[12:14] <p6eval> ..rakudo d71ad1: OUTPUT«1 2␤3 4␤5 0␤»

[12:14] *** jaldhar left
[12:14] <moritz> r: say Date.new(2012)

[12:14] <p6eval> rakudo d71ad1: OUTPUT«Default constructor only takes named arguments␤  in method new at src/gen/CORE.setting:609␤  in block  at /tmp/xz3q5yj59f:1␤␤»

[12:16] <dalek> doc: a90f472 | moritz++ | lib/Date.pod:

[12:16] <dalek> doc: [Date] fix/update constructor signature

[12:16] <dalek> doc: review: https://github.com/perl6/doc/commit/a90f47293b

[12:18] *** jdrab_ left
[12:19] *** JimmyZ_ left
[12:24] <moritz> http://continuousdelivery.com/2012/08/why-software-development-methodologies-suck/

[12:26] <arnsholt> r: sub foo { nqp::isnull([]) }

[12:26] <p6eval> rakudo d71ad1:  ( no output )

[12:26] *** tokuhiro_ joined
[12:26] *** gongyiliao left
[12:29] <moritz> ok, bad news: I can't attend YAPC::EU

[12:29] <moritz> and I have two of the four accepted Perl 6 talks :(

[12:29] <dalek> nqp: 553ee86 | (Arne Skjærholt)++ | src/ (2 files):

[12:29] <dalek> nqp: Expose nativecall write-barriering through an nqp::op.

[12:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/553ee862f3

[12:29] <moritz> does anybody want to do one of my talks for me? (or both :-)

[12:29] <moritz> I have one on exceptions (40 minutes) and one on documentation (20 minutes)

[12:30] <moritz> http://act.yapc.eu/ye2012/talk/4055

[12:30] <moritz> http://act.yapc.eu/ye2012/talk/4202

[12:35] <dalek> zavolaj: 3bf6712 | (Arne Skjærholt)++ | / (3 files):

[12:35] <dalek> zavolaj: Expose refresh op through function, tests for refresh().

[12:35] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/3bf67129e4

[12:36] <masak> moritz: aww :(

[12:36] *** mucker left
[12:37] *** mucker joined
[12:39] <moritz> "aww" indeed

[12:39] <tadzik> sad :(

[12:39] <jnthn> :(

[12:39] <jnthn> moritz: Woulda been really nice to see you again. Hopefully some other time... :)

[12:40] <masak> moritz: if jnthn takes one of your talks, I'll volunteer to take the other. unless pmichaud wants the other.

[12:40] <moritz> or tadzik maybe?

[12:40] <masak> or tadzik.

[12:40] <tadzik> but I'm scared of talks! :)

[12:40] <masak> anyway, I volunteer to one of them.

[12:40] <masak> ok, tadzik clearly wants one.

[12:41] <moritz> masak: nothing against you, but you already have two talks accepted, no?

[12:41] <masak> aye. consider me a last resort.

[12:41] <GlitchMr> http://dl.dropbox.com/u/63913412/commenting.png

[12:41] <GlitchMr> Seems to work...

[12:41] <moritz> tadzik: which one do you want? :-)

[12:41] <masak> GlitchMr: nice!

[12:41] <GlitchMr> I'm testing comments box :)

[12:42] <GlitchMr> This is very simple blog layout, but as long it works

[12:42] <moritz> jnthn, pmichaud: what about you? want to take over a talk from me?

[12:43] <moritz> starting simple is good

[12:44] <GlitchMr> The only CSS3 thing there is box-shadow

[12:44] * masak <3 the Perl 6 community

[12:44] <GlitchMr> But that's really small thing :)

[12:44] <tadzik> GlitchMr: is that written in Perl 6?

[12:44] <GlitchMr> No, it isn't

[12:45] <GlitchMr> I plan to use glitchmr.github.com for that

[12:45] <GlitchMr> So, it uses Jekyll...

[12:45] <tadzik> cool

[12:45] <tadzik> moritz: why, a shorter one :)

[12:45] <GlitchMr> I just want something that works...

[12:45] <GlitchMr> mowyw would work too, but whatever :)

[12:45] <tadzik> if there's no one better to take it

[12:45] <tadzik> I didn't even contribute to the docs yet

[12:46] <moritz> docs is shorter :-)

[12:46] <moritz> let's wait until pmichaud shows up

[12:47] <moritz> tadzik: take is a cue to start contributing to docs :-)

[12:47] <masak> GlitchMr: my blogging platform is based on Jekyll. (that's why it's called "psyde", like "Perl Six Mr Hyde", get it?)

[12:47] <masak> GlitchMr: but I'm not yet ready to package it and recommend it to others.

[12:48] <GlitchMr> I like design of your site, masak

[12:48] <masak> thank you.

[12:48] <GlitchMr> Especially typography

[12:49] <masak> I stole fairly liberally from http://tomayko.com/ , to be honest.

[12:49] <GlitchMr> Actually, I should use less gray in my layouts, but whatever :P

[12:50] <GlitchMr> It's still more colorful than my pastebin (paste.uk.to?)

[12:51] <GlitchMr> I have feeling that this title won't be possible to search on Google or DuckDuckGo, but I don't care about SEO :P

[12:56] <moritz> https://twitter.com/_Tomalak/status/231305055742070784/photo/1

[12:58] <moritz> and http://www.codinghorror.com/blog/2006/11/this-is-what-happens-when-you-let-developers-create-ui.html

[12:58] <moritz> in the latter I like it that there's another button for "Pro Mode" :-)

[12:58] <GlitchMr> This is obviously the webpage done correct way: http://glitchmr.pl/~smith/

[12:58] <GlitchMr> (well, actually it's old thing, but whatever :P)

[13:00] <moritz> Su-Shee's twitter feed is a regular source of delight for me :-)

[13:00] <GlitchMr> ... finally that "Bulk Rename Utility" picture loaded...

[13:00] <GlitchMr> You know, I would prefer command line interface

[13:01] <GlitchMr> You know, Perl

[13:01] <GlitchMr> Or even... PHP

[13:02] <moritz> rename 's/\.txt$/.log/' *

[13:02] <moritz> yes, perl is handy :-)

[13:02] <GlitchMr> You know, foreach(new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir))) { }

[13:03] <GlitchMr> But seriously... RecursiveIteratorIterator O_o?

[13:03] <jnthn> yo dawg...

[13:04] <GlitchMr> as $file

[13:04] <GlitchMr> Forgot about this, but whatever

[13:04] <GlitchMr> Without RecursiveIteratorIterator it works... except it's not recursive

[13:06] <masak> I read a quotation today: "It isn't that they can't see the solution. It is that they can't see the problem." -- G. K. Chesterton, The Scandal of Father Brown (1935)

[13:06] <GlitchMr> I once attempted to make recursive PHP tokenizer

[13:06] <masak> made me think about PHP.

[13:06] <GlitchMr> Result: https://github.com/Dirbaio/ABXD/blob/master/tools/lib/recursivetokenizer.php

[13:07] <GlitchMr> This is my attempt to statistically parse PHP files in order to generate tools which for example generate translations

[13:08] <GlitchMr> But... somehow it works

[13:13] <moritz> r: say Iterable.^mro

[13:13] <p6eval> rakudo 1f662c: OUTPUT«Iterable() Cool() Any() Mu()␤»

[13:13] <moritz> r: say Iterator.^mro

[13:13] <p6eval> rakudo 1f662c: OUTPUT«Iterator() Iterable() Cool() Any() Mu()␤»

[13:14] <moritz> pmichaud: I find it dubious that Iterable inherits from Cool. That might work out well for core types, but might cause problems for non-core types that want to be iterable

[13:14] <jnthn> I think Iterable is meant to be a role 

[13:14] <jnthn> Eventually

[13:16] <moritz> and Iterator too?

[13:16] <jnthn> No, Iterator is probably a class.

[13:16] <moritz> I think roles fit better for both of them

[13:19] <moritz> r: say Range.^mro

[13:19] <p6eval> rakudo 1f662c: OUTPUT«Range() Iterable() Cool() Any() Mu()␤»

[13:20] <moritz> I thought Range was also its own iterator? shouldn't it inherit from Iterator then?

[13:20] *** bluescreen10 joined
[13:20] <moritz> r: say Hash.^mro

[13:20] <p6eval> rakudo 1f662c: OUTPUT«Hash() EnumMap() Iterable() Cool() Any() Mu()␤»

[13:23] *** JimmyZ joined
[13:29] *** kaxing joined
[13:31] *** skids joined
[13:37] *** thou joined
[13:41] <arnsholt> jnthn: BTW, I've been thinking of starting on some proper documentation for Zavolaj. You have any thoughts on what the proper way to do that would be?

[13:44] * masak .oO( show, don't tell )

[13:45] <arnsholt> Troo

[13:45] <arnsholt> But also thinking of purely practical matters, like where the docs live

[13:45] <moritz> pod6 in NativeCall.pm6

[13:45] <masak> +1

[13:46] <arnsholt> I could go with inline POD, but a lot of the things we want to document are actually not implemented in Zavolaj, but NQP

[13:46] <moritz> a user doesn't care where it's implemented

[13:46] <arnsholt> Although, I guess that's not necessarily a problem

[13:47] <moritz> a user cares for the API she uses

[13:47] <JimmyZ> pod6 in NQP

[13:47] <arnsholt> No. Docs in NQP are definitely not an option

[13:48] <arnsholt> moritz: Definitely

[13:49] <JimmyZ> docs dir in Zavolaj ?

[13:49] <masak> arnsholt: here's the thing: your job is to pretend really hard to be a user thirsting for information, and then putting the information where the user is likely to go, and have it be of the nature that the user is likely to need.

[13:49] <arnsholt> pod6 in NativeCall.pm6 it is =)

[13:50] <arnsholt> Or possibly NativeCall.pod6

[13:50] <arnsholt> Since I suspect the docs may end up being at least as long as the code

[13:50] <masak> "f you have extra docs (in addition to the Pod docs in your module(s)), create a doc directory for them." -- http://wiki.perl6.org/Create%20and%20Distribute%20Modules

[13:50] <masak> If*

[13:50] <moritz> that's all fine, but do we support installing docs from a doc dir?

[13:50] <masak> arnsholt: the docs being at least as long as the code doesn't stop most CPAN modules from putting the docs right in the .pm file.

[13:51] <moritz> perl6/doc has all the docs in .pod files in lib/

[13:55] <arnsholt> Hmm. I think the conclusion is: stop thinking, start writing

[13:55] <arnsholt> As always, when it comes to me and writing stuff, I guess ^_^

[13:56] <masak> cult of done.

[13:57] *** wtw left
[13:57] <PerlJam> arnsholt++ (does karma encourage you to start writing?  ;)

[13:58] <PerlJam> arnsholt: fwiw, I'd probably go with NativeCall.pod6 

[13:59] *** fhelmberger left
[14:00] *** TBA joined
[14:00] *** tokuhiro_ left
[14:00] <TBA> hi all, quick p6 question

[14:00] <masak> shoot

[14:00] <arnsholt> PerlJam: Karma isn't an important motivator for me, but thanks for the thought =)

[14:00] <TBA> i can do this: my $a = sub { "abc" }, and pass $a to a method as a parameter

[14:00] <TBA> how do I refer to one inside a class, i.e.

[14:00] <masak> TBA: aye.

[14:01] <TBA> class X { method Y { "abc"; } }; 

[14:01] <TBA> and pass X.Y() as a parameter?

[14:01] <moritz> X.^find_method('Y')

[14:01] <TBA> that wouldn't pass to the instance though right?

[14:02] <moritz> it is not done often for methods, because then you have to supply invocant yourself

[14:02] <masak> r: class A { method foo { say "OH HAI" }; method bar($method) { say "calling method $method.name()..."; $method() } }; A.new.bar( A.^find_method('foo') )

[14:02] <moritz> (invocant = the object on which the method is called)

[14:02] <p6eval> rakudo 1f662c: OUTPUT«calling method foo...␤Not enough positional parameters passed; got 0 but expected 1␤  in method foo at /tmp/3oQxpnOjit:1␤  in method bar at /tmp/3oQxpnOjit:1␤  in block  at /tmp/3oQxpnOjit:1␤␤»

[14:02] <masak> r: class A { method foo { say "OH HAI" }; method bar($method) { say "calling method $method.name()..."; self.$method() } }; A.new.bar( A.^find_method('foo') )

[14:02] <p6eval> rakudo 1f662c: OUTPUT«calling method foo...␤OH HAI␤»

[14:02] <masak> \o/

[14:03] <PerlJam> Apparently the invocant is very important  :)

[14:03] <moritz> if you want to supply your own invcant, you can also pass  { $obj.Y }  to the sub

[14:03] <TBA> hm, neat, but no easier way? my specific use case is to pass a method to HTTP::Server::Simple::PSGI's app parameter, but a method of a class instance

[14:03] <TBA> i.e.

[14:03] <TBA> my $app = App.new; given HTTP::Server::Simple::PSGI.new(81) {         .host = '0.0.0.0';         .app();         .run; } 

[14:03] <TBA> or do I just need to write a sub that dispatches to the method in the instance and pass that in?

[14:04] <moritz> that's the easiest way

[14:04] <moritz> though a block will do

[14:04] <TBA> the sub bit I get, how would I do it as a block?

[14:04] <moritz> as a sub:  sub () { $obj.app }    as a block:  { $obj.app }

[14:05] <moritz> erm, wait

[14:05] <masak> TBA: "a method of a class instance"? instances don't have methods, classes do.

[14:05] <moritz> somehow your question doesn't really fit the example you posted

[14:05] <masak> indeed.

[14:05] <moritz> given $obj { ... } sets $_ = $obj

[14:06] <moritz> so   .app()   calls $_.app, which is now  $obj.app

[14:06] <moritz> it's not passing a code object to anything at all

[14:07] *** cognominal left
[14:07] <masak> yes, the use case doesn't require any trickery with method objects.

[14:08] <masak> it Just Works.

[14:09] <dalek> doc: e9f2f73 | moritz++ | lib/Itera (2 files):

[14:09] <dalek> doc: Iterator, Iterable  (very incomplete)

[14:09] <dalek> doc: review: https://github.com/perl6/doc/commit/e9f2f73e2d

[14:12] *** PacoAir joined
[14:12] <TBA> ok let me try again :)

[14:12] <arnsholt> masak: Cult of done was pretty good. Thanks

[14:13] <TBA> here's what I had:

[14:14] <TBA> my $app = sub { return [200, ["Content-Type" => "text/plain"], "This is plain text"]; }; given HTTP::Server::Simple::PSGI.new(81) { .host = "0.0.0.0"; .app($app); .run; }

[14:15] <masak> arnsholt: yeah, I like it.

[14:15] <TBA> what I'd like to do is make the "my $app = sub" bit part of a class, e.g.

[14:15] <masak> arnsholt: http://strangelyconsistent.org/blog/the-cult-of-done

[14:15] <TBA> class A { method run ($env) { return [200, [ "Content-Type" => "text/plain" ], "This is plain text"]; } }

[14:15] <TBA> then

[14:15] <TBA> my $app = App.new; given HTTP::Server::Simple::PSGI.new(81) { .host = "0.0.0.0"; .app(???); .run; }

[14:16] <TBA> im just confused about what I put in the .app() bit

[14:17] <masak> TBA: I still have the feeling that you're trying to fit a square piece into a round hole somehow.

[14:17] *** JimmyZ left
[14:17] <masak> but I can't quite put my finger on it.

[14:17] <TBA> er, well, thats quite possible...

[14:18] <[Coke]> are you trying to pass in the new PSGI object? $_ then.

[14:18] <moritz> what does the documentation say?

[14:19] <TBA> no, I'm trying to pass in a method inside an object to .app when constructing the PSGI object

[14:19] <masak> TBA: just post the object on which the method can be called!

[14:19] <masak> TBA: then call the method in the callee.

[14:19] <masak> why dislodge the method and pass only it?

[14:20] <TBA> your probably right

[14:20] <TBA> but that would require changing PSGI module?

[14:20] <masak> if you have something callable *inside of a class*, it's probably because it needs its surrounding object environment, no?

[14:20] <TBA> yes, but I was hoping t.... oooohh wait

[14:20] <TBA> i was hoping to pass the invocant too

[14:20] <TBA> but i've just realised how stupid i'm being :)

[14:21] <masak> if you want to pass the invocant, then a sub is your best bet.

[14:21] <masak> like moritz++ said.

[14:21] <moritz> or you just pass the object

[14:21] <moritz> then you also have the invocant :-)

[14:21] <moritz> but you need to know which method to call

[14:21] <TBA> I think I should probably just construct the PSGI inside the App class...

[14:22] <TBA> i'm confusing myself now, long day! i'm not even sure what I want anymore....

[14:23] <TBA> I don't think I even need (or want) the App class, I can just use a sub like I was in the first place!

[14:23] <TBA> will have a think about this over the weekend, I might be back first thing monday though :p

[14:23] <TBA> thanks all :)

[14:23] <masak> np

[14:24] *** TBA left
[14:24] *** mucker left
[14:41] *** kaxing left
[14:42] *** thelazydeveloper joined
[14:49] <masak> "If you declare that you support a platform, you don't just TODO failing tests for it when introducing a mostly unrelated feature. If you do, the support for the platform is second class [...]" -- moritz++ on parrot-dev

[14:52] <pmichaud> moritz++ # parrot-dev post

[14:52] <pmichaud> good morning, #perl6

[14:52] <colomon> o

[14:52] <masak> pmichaud! \o/

[14:52] * colomon is apparently too tired to lift an arm

[14:52] <masak> colomon: that's the first *non*-wave I've seen on the channel!

[14:52] <colomon> \o/

[14:52] <pmichaud> colomon: either that, or you're just disarmed by my presence :-)

[14:52] <masak> colomon++ # novelty

[14:53] <masak> pmichaud++ # punitude

[14:53] <pmichaud> moritz: I'll take over a talk.

[14:54] * pmichaud skims backscroll, sees his name

[14:54] <masak> \o/

[14:54] <pmichaud> I'll happily take either talk.

[14:54] * pmichaud reads backscroll for detail

[14:55] <masak> moritz: will you still be able to write proceedings for your talks? or were you not planning to do that?

[14:56] <pmichaud> I'm somewhat assuming that "taking the talk" also involves "write the proceedings" if needed :)

[14:56] <masak> me too; just thought I'd raise the matter.

[14:57] <jnthn> morning, pmichaud 

[15:00] <pmichaud> I'll also happily defer to anyone else that wants to take a talk.  I'm attending YAPC::EU regardless, although I do so love to have an opportunity to present.  :)

[15:00] <pmichaud> ...and I'm very sad that moritz++ apparently won't make it.  :-(

[15:01] <pmichaud> at this point I don't want Range to inherit from Iterator; the latest incarnation of flattening behavior seems to make a strong distinction between Iterable and Iterator

[15:01] <pmichaud> the point about Iterable needing to be !~ Cool is an extremely good one.

[15:04] <pmichaud> of the two talks, I feel like I'd prefer the docs talks.

[15:04] <pmichaud> *talk

[15:04] <jnthn> If I'm gonna take one, I'd be more suited to the exceptions one.

[15:05] * jnthn should check what's in it though

[15:05] <pmichaud> yeah, I can do either talk; but I'm slightly more passionate about the docs one :)

[15:06] * jnthn is better at more technical talks :)

[15:07] <pmichaud> jnthn: yes, and given that you had to work on exceptions for the qast conversion, I suspect you're more tuned to it than I am at the moment.

[15:07] * masak briefly considers writing both his talks but letting tadzik deliver one of them...

[15:09] <jnthn> pmichaud: "had to" captures my feelings on it quite well :P

[15:09] <jnthn> (I like what moritz++ has done, and the Perl 6 exception model. But the mapping of it down to the VM is little fun to hack on...)

[15:10] <jnthn> Thankfully the talk seems quite clearly about the things I like. :)

[15:14] <pmichaud> (in fact, p6doc was a talk I considered proposing, but didn't because I knew that moritz++ would be proposing the talk :)

[15:27] *** UncleFester6 joined
[15:29] *** zhutingting joined
[15:34] *** sftp_ left
[15:35] *** cognominal joined
[15:36] *** sftp joined
[15:36] *** sftp left
[15:37] <[Coke]> Anyone have a *bsd setup available for continuous integration for rakudo/parrot? could we perhaps setup another vm on feather running a *bsd?

[15:42] *** sftp joined
[15:43] *** sftp left
[15:52] *** sftp joined
[15:57] *** SamuraiJack left
[15:57] *** benabik left
[15:58] *** benabik joined
[16:01] *** SamuraiJack joined
[16:05] *** cognominal left
[16:09] *** birdwindupbird left
[16:18] *** kaare_ joined
[16:25] <PerlJam> http://xkcd.com/1090/

[16:28] *** cognominal joined
[16:30] *** cognominal_ joined
[16:30] <masak> *lol*

[16:31] <au> that was remarkably context-free.

[16:33] <GlitchMr> I once have made language where every program is valid grammatically

[16:33] * geekosaur *headdesk* at context-free "grammar"s

[16:33] *** cognominal left
[16:34] <PerlJam> be free from the tyranny of context!

[16:34] <PerlJam> (use Perl ;)

[16:34] <UncleFester6> r: my $x = Buf.new(10, 13); my $y = Buf.new(65, 10, 13); if $x ne $y {say "ok"}; say $y[1 .. 2].perl; if $x eq $y[1 .. 2] { say "ok" }

[16:34] <p6eval> rakudo 1f662c: OUTPUT«ok␤(10, 13)␤Cannot use a Buf as a string, but you called the Str method on it␤  in method Str at src/gen/CORE.setting:6789␤  in method Stringy at src/gen/CORE.setting:726␤  in sub infix:<eq> at src/gen/CORE.setting:1038␤  in block  at /tmp/OOHiXZ_I31:1␤␤»…

[16:35] <UncleFester6> with the eq at the end - am I asking for a feature or can I complain about a bug?

[16:35] *** pmurias joined
[16:35] <PerlJam> Hmm.

[16:37] <pmurias> jnthn: what would be the best way to make the js backend pluggable into the normal rakudo? (so I won't have to maintain/merge over the fork)

[16:37] <pmurias> jnthn: by pluggable I mean having it in a seperate repo but making it possible to "combine" it with rakudo somehow

[16:38] <pmurias> the backend is mostly isolate in one file for now

[16:39] <masak> UncleFester6: yeah, I don't think Bufs should be comparable with 'eq' or 'ne'. too confusing.

[16:39] <masak> they're really more lists in that regard.

[16:40] <UncleFester6> masak: Does not agree with S34 see http://perlcabal.org/syn/S32/Containers.html#Buf_Operators

[16:40] <UncleFester6> s/S34/S32

[16:40] <GlitchMr> perl6: sub infix:[]($a, $b) { say 'GRAMMAR!' #`(I know that it's invalid according to STD, but who cares? ) }; 'GRAMMAR' '!!!'

[16:40] <p6eval> niecza v19-15-g051783d: OUTPUT«Potential difficulties:␤  $a is declared but not used at /tmp/AO8ZwnAMAy line 1:␤------> [32msub infix:[]([33m⏏[31m$a, $b) { say 'GRAMMAR!' #`(I know that [0m␤  $b is declared but not used at /tmp/AO8ZwnAMAy line 1:␤------> [32msub infix:[]($a, [33m⏏…

[16:40] <p6eval> ..rakudo 1f662c: OUTPUT«GRAMMAR!␤»

[16:41] <GlitchMr> std: sub infix:[]($a, $b) { say 'GRAMMAR!' #`(I know that it's invalid according to STD, but who cares? ) }; 'GRAMMAR' '!!!'

[16:41] <p6eval> std f43a358: OUTPUT«[31m===[0mSORRY![31m===[0m␤Null operator is not allowed at /tmp/HZmAGkXjk6 line 1:␤------> [32msub infix:[][33m⏏[31m($a, $b) { say 'GRAMMAR!' #`(I know that[0m␤Parse failed␤FAILED 00:00 40m␤»

[16:41] <PerlJam> UncleFester6: $y[1..2] isn't a Buf though.

[16:43] <PerlJam> r: my $x = Buf.new(10, 13); my $y = Buf.new(65, 10, 13); my $z = Buf.new($y[1..2]);  say "ok" if $x eq $z;

[16:43] <p6eval> rakudo 1f662c: OUTPUT«ok␤»

[16:45] *** fgomez joined
[16:45] <UncleFester6> r: my $y = Buf.new(65, 10, 13); say $y[1 .. 2].WHAT

[16:45] <p6eval> rakudo 1f662c: OUTPUT«Parcel()␤»

[16:46] <PerlJam> Though that error message was LTA as far as helping you figure out what's going on.  That's the real bug IMHO

[16:46] <jnthn> pmurias: One way is to just have a different frontend.

[16:46] <jnthn> pmurias: You'll note there's a src/main.nqp

[16:47] <jnthn> pmurias: You can have it declare a subclass of Perl6::Compiler that has a js method, and then write it up as a compilation stage.

[16:47] <jnthn> *wire

[16:48] <jnthn> That is to say, make a copy of main.nqp and call it js.nqp or so

[16:48] <jnthn> Somewhere I made a gist where I showed cognominal++ how to do something like this but to get it to spit out the parse tree as JSON instead...

[16:50] <jnthn> pmurias: https://gist.github.com/3079610

[16:52] <TimToady> r: my $x = Buf.new(10, 13); my $y = Buf.new(65, 10, 13); if $x ne $y {say "ok"}; if $x eq $y.subbuf(1,2) { say "ok" }

[16:52] <p6eval> rakudo 1f662c: OUTPUT«ok␤ok␤»

[16:52] <PerlJam> subbuf?  nice.

[16:54] <masak> any good reason .[] doesn't do what .subbuf does?

[16:54] *** sisar joined
[16:54] <sisar> o/

[16:55] <PerlJam> any good reason .[] doesn't do what .substr does?   ;)

[16:55] <masak> sisar! \o/

[16:55] <masak> PerlJam: yes. strings are scalars in Perl.

[16:55] <masak> they don't have list nature.

[16:55] <TimToady> because listy things stringify with spaces?

[16:57] <UncleFester6> Search for subbuf in synopses came up empty.  Where documented?

[16:58] <UncleFester6> nice feature

[16:59] <PerlJam> UncleFester6: seems like there should be a S32-setting-library/Buf.pod  doesn't it?

[16:59] <masak> I hadn't heard about it before, and I think it looks like a poor man's .[]

[16:59] <masak> what's the use of being able to overload .[] et al. if we don't even do it ourselves in the core library?

[17:00] <masak> s/use/point/

[17:01] <jnthn> r: my $b = Buf.new(65, 66, 67); say $b[1] # you mean like this?

[17:01] <p6eval> rakudo 1f662c: OUTPUT«66␤»

[17:02] <jnthn> The point of subbuf is presumably that you want another Buf back, whereas a slice gives you a Parcel.

[17:02] <masak> yeah.

[17:02] <masak> I'm wondering if .[] couldn't give a Buf back, too.

[17:03] <jnthn> Only in the slice case?

[17:03] <jnthn> That may be a little too surprising...

[17:03] <masak> hm.

[17:03] <TimToady> druther have it consistent with array slicing

[17:03] <masak> yeah, maybe that's not possible...

[17:06] <moritz> there's http://doc.perl6.org/type/Buf

[17:06] <moritz> in some places doc.perl6.org is more complete or accurate than the specs

[17:07] <sorear> good * #perl6

[17:07] <UncleFester6> also http://perlcabal.org/syn/S32/Containers.html#Methods 

[17:09] <PerlJam> does anyone else find the sentence "Decode the Buf into a Str." weird?   I always think of Buf->Str as *encoding* and Str->Buf as *decoding*

[17:09] <[Coke]> perhaps "transform"

[17:10] <masak> PerlJam: no, Str->Buf is encoding, however you happen to think of it :)

[17:10] <masak> PerlJam: the encoding in question is finding integers to represent the characters.

[17:10] <PerlJam> aye.  that's decoding  :)

[17:10] <masak> nope.

[17:10] <moritz> PerlJam: is UTF-8 a string encoding, or a string decoding?

[17:11] <masak> when you choose "encoding" in your browser, you're choosing the particular mapping of characters to integers.

[17:11] <masak> or to bytes, depending how you view the integers.

[17:12] <PerlJam> I tend to think of the numbers as "raw" and encoding them turns them into something with more meaning (a utf8 string).

[17:12] <cognominal_> the material is already encoded within  a Buf, the Str just makes the encoding explicit.

[17:14] <huf> on the contrary. conceptually, it does away with the encoding

[17:14] <cognominal_> well I suppose that with compression there is an more explicit step between a Buf and a Str

[17:14] <huf> and suddenly you have a series of codepoints

[17:14] <TimToady> in crypto, the encoding is what you send through enemy lines

[17:14] <TimToady> you decode it on the other end to get the plaintext

[17:15] <masak> PerlJam: I used to think backwards about those terms too.

[17:15] <TimToady> so a Str is plaintext, a Buf can hold an encoding

[17:15] <masak> PerlJam: it's not about which one has more meaning, it's just about different formats.

[17:15] <cognominal_> what is plain text, it is text with a known encoding?

[17:16] <cognominal_> you need a set of chars, a mapping and an encoding anyway

[17:16] <moritz> cognominal_: it's text in abstract, without having to care about encodings

[17:16] <huf> yes, ultimately everything is a series of bytes

[17:16] <huf> but this is about APIs

[17:17] <masak> aye.

[17:17] <cognominal_> set a chars is simplifying things with unicode anyway.

[17:17] <masak> the point of the Str type (and the strict division with Buf) is that we want to hide encodings and just focus on characters.

[17:17] <pmichaud> I think of it more along the lines of "Str is the abstract representation of a string.  Buf is a specific encoding."

[17:18] <pmichaud> thue one encodes a Str to produce a Buf

[17:18] <pmichaud> and decodes a buf to produce a Str

[17:18] <cognominal_> surprising how slippery this concepts are.

[17:18] <pmichaud> basically, if you're thinking that strings in Perl 6 have an encoding, you're doing it rong :-)

[17:19] <huf> or mucking about deep in the internals :)

[17:19] <huf> i assume they have some encoding there, but that's fairly irrelevant ;)

[17:19] <moritz> aye

[17:19] <cognominal_> When you got a Str, you have an API to manipulates stuff. With a buffer it sounds just like a stream of bytes.

[17:19] <moritz> well, both have APIs

[17:19] <PerlJam> pmichaud: actually that last statement helps rewire my brain the most.

[17:20] <cognominal_> moritz, yes but Buffer API is low level.

[17:20] <moritz> correct

[17:21] <moritz> a buffer doesn't know about things like case folding

[17:21] <huf> it's got an "encoding" too, but it's just bytes. at least it isnt apples or bits of pocket lint...

[17:21] <cognominal_> like says pmichaud, the Str API relieve you from low level details implementation like encoding.

[17:22] <PerlJam> "encoding" is an extrinsic property of the string, not an intrinsic one.

[17:22] <pmichaud> note that Buf doesn't have to be bytes, as some values in a Buf are larger than a byte.

[17:22] <pmichaud> s/are/can be

[17:22] <UncleFester6> masak: I think that when you select an encoding in your browser you are choosing a mapping of integers (bytes) to characters

[17:22] <masak> aye.

[17:22] <masak> that's a better way of putting it.

[17:22] <pmichaud> r:  say "Buf".succ   # also note

[17:23] <p6eval> rakudo 1f662c: OUTPUT«Bug␤»

[17:23] <masak> :P

[17:23] <PerlJam> it's a bufbug

[17:23] <masak> I consistently mistype "Buf" as "Bug", but I'm so used to it now that I catch virtually all of the typos.

[17:24] <pmichaud> I was thinking about bufs a bit yesterday w.r.t.  the io_cleanup branch in Parrot, specially the ".encoding on sockets" part.  Do we think that other platforms are likely to provide encoding on sockets?

[17:24] <GlitchMr> https://robert.duckduckgo.com/?q=perl6+str

[17:24] <pmichaud> that whole notion of encoding on sockets feels a bit weird to me.

[17:24] *** zhutingting left
[17:26] <pmichaud> anyway, I'm afk for a bit

[17:26] <UncleFester6> Planning to file two RT's.  If no subbuf documented in a few days then RT for that.  Also LTA error message for [] compare as Str method for Buf not the problem.

[17:31] *** sisar left
[17:38] *** fgomez left
[17:40] *** crab2313 joined
[17:40] *** spider-mario left
[17:41] *** cognominal__ joined
[17:43] *** phenny joined
[17:44] *** cognominal_ left
[17:44] *** crab2313 left
[17:44] *** alester left
[17:46] <moritz> pmichaud: I'd find it great if we supported both binary operations on sockets and a Str interface

[17:47] <moritz> pmichaud: for example for multi-byte encodings it makes a whole lot of sense to buffer incomplete multi-byte sequences

[17:49] *** cognominal__ left
[17:49] *** cognominal joined
[17:56] *** GlitchMr left
[17:56] *** AEIRIA joined
[17:58] *** crab2313 joined
[17:59] *** AEIRIA left
[18:02] *** Chillance joined
[18:04] <[Coke]> hurm. roast-data seems to have not completed properly today, redoing by hand.

[18:07] *** daxim left
[18:10] *** seldon joined
[18:10] *** GlitchMr joined
[18:10] <[Coke]> lots of HP fans here: Anyone remember this: http://www.dailymail.co.uk/tvshowbiz/article-153024/How-Harry-Potter-gave-Catie-dying-wish.html ? I worked with Larry at my current job, he just died a few weeks ago. :|

[18:12] <seldon> I would be very careful about believing anything that has "dailymail.co.uk" in the url.

[18:12] <[Coke]> seldon: thank you for the concern, but this is an actual thing.

[18:14] <moritz> [Coke]: :(

[18:14] *** spider-mario joined
[18:14] *** cognominal left
[18:15] * masak feels more like a HPMoR fan than a HP fan...

[18:15] <moritz> me too, but before I was a HP fan

[18:16] <masak> I've always liked HP. the books more than the movies. they're not great literature, but they're exciting and entertaining.

[18:16] <moritz> aye

[18:16] <[Coke]> not to mention, also involves 2 different people dying to cancer. Your desire to correct might be a little off base here.

[18:16] <[Coke]> s/to cancer/of cancer/

[18:17] <masak> sorry, I didn't meant to correct. :/

[18:17] <masak> it is a touching article.

[18:17] <colomon> I'm kind of jealous of kids today, so many more great kids' books these days....

[18:17] *** lestrrat joined
[18:24] *** Effilry joined
[18:25] *** Effilry left
[18:25] *** Effilry joined
[18:25] *** Effilry is now known as FireFly

[18:25] *** sftp left
[18:25] *** thelazydeveloper left
[18:25] *** b1rkh0ff left
[18:25] *** mathw_ left
[18:26] *** simcop2387 left
[18:26] *** betterworld joined
[18:26] *** sftp joined
[18:26] *** thelazydeveloper joined
[18:26] *** b1rkh0ff joined
[18:26] *** simcop2387 joined
[18:26] *** mattp_ joined
[18:26] *** Exodist joined
[18:26] *** ruoso joined
[18:26] *** apejens joined
[18:26] *** LoRe joined
[18:26] *** _sri joined
[18:36] *** pmurias left
[18:36] *** bluescreen10 left
[18:36] *** Pleiades` left
[18:36] *** rhr_ left
[18:36] *** huf left
[18:36] *** cxreg left
[18:36] *** driador left
[18:36] *** Chillance left
[18:36] *** crab2313 left
[18:36] *** SamuraiJack left
[18:36] *** Patterner left
[18:36] *** MayDaniel left
[18:37] *** daniel-s joined
[18:37] *** nodmonkey joined
[18:37] *** mathw joined
[18:37] *** moritz joined
[18:37] *** Chillance joined
[18:37] *** crab2313 joined
[18:37] *** pmurias joined
[18:37] *** SamuraiJack joined
[18:37] *** bluescreen10 joined
[18:37] *** Pleiades` joined
[18:37] *** Patterner joined
[18:37] *** rhr_ joined
[18:37] *** MayDaniel joined
[18:37] *** huf joined
[18:37] *** cxreg joined
[18:37] *** t0rn joined
[18:37] *** _ilbot joined
[18:37] *** spacebat_ joined
[18:37] *** Guest7858 joined
[18:37] *** tomaw joined
[18:37] *** timotimo joined
[18:37] *** kcwu_ joined
[18:37] *** au joined
[18:37] *** jtpalmer joined
[18:37] *** hanekomu joined
[18:37] *** rjbs joined
[18:37] *** takesako_ joined
[18:37] *** literal joined
[18:37] *** diakopter joined
[18:37] *** broquaint joined
[18:37] *** Timbus joined
[18:37] *** carlin joined
[18:37] *** Ulti joined
[18:37] *** buubot_backup joined
[18:37] *** estrai_ joined
[18:37] *** integral joined
[18:37] *** pochi joined
[18:37] *** yeltzooo7 joined
[18:37] *** PZt joined
[18:37] *** BinGOs joined
[18:37] *** rafl joined
[18:37] *** TimToady joined
[18:37] *** avar joined
[18:37] *** HarryS joined
[18:37] *** Gesh joined
[18:37] *** zb joined
[18:37] *** BooK joined
[18:37] *** arnsholt joined
[18:37] *** ponbiki joined
[18:37] *** nuba joined
[18:37] *** geekosaur joined
[18:37] *** hoelzro|away joined
[18:37] *** felipe joined
[18:37] *** smash joined
[18:37] *** dju joined
[18:37] *** imarcusthis joined
[18:37] *** cj joined
[18:37] *** clkao joined
[18:37] *** awwaiid joined
[18:37] *** ironcamel joined
[18:37] *** Celelibi joined
[18:37] *** jlaire joined
[18:37] *** Bucciarati joined
[18:37] *** Tedd1 joined
[18:37] *** Util joined
[18:37] *** p6eval joined
[18:37] *** zamolxes joined
[18:37] *** DarthGandalf joined
[18:37] *** Khisanth joined
[18:37] *** bbkr joined
[18:37] *** mikemol joined
[18:37] *** dalek joined
[18:37] *** dbr joined
[18:37] *** bruges joined
[18:37] *** nebuchadnezzar joined
[18:37] *** Vlavv_ joined
[18:37] *** telex joined
[18:37] *** sudokode joined
[18:37] *** p6rd joined
[18:37] *** lue joined
[18:37] *** [particle] joined
[18:37] *** pyrimidine joined
[18:37] *** pjcj joined
[18:37] *** ranguard joined
[18:37] *** PerlJam joined
[18:37] *** charsbar_____ joined
[18:37] *** Tene joined
[18:37] *** card.freenode.net sets mode: +vv p6eval dalek

[18:37] *** shinobicl joined
[18:38] *** [Coke] joined
[18:38] *** Woodi joined
[18:40] *** daniel-s left
[18:40] *** HarryS left
[18:41] *** HarryS joined
[18:41] *** daniel-s joined
[18:42] *** cognominal joined
[18:46] *** UncleFester6 left
[18:51] *** driador joined
[18:51] *** erkan joined
[18:51] *** tadzik joined
[18:51] *** cotto joined
[18:51] *** masak joined
[18:51] *** BlueT_ joined
[18:51] *** cosimo joined
[18:52] *** crab2313 left
[18:52] *** crab2313 joined
[18:52] *** spider-mario left
[18:53] *** spaceships joined
[18:53] *** benabik left
[19:03] *** benabik joined
[19:12] *** cognominal left
[19:17] <dalek> perl6-roast-data: 7334254 | coke++ | / (4 files):

[19:17] <dalek> perl6-roast-data: today

[19:17] <dalek> perl6-roast-data: 

[19:17] <dalek> perl6-roast-data: this run done from the command line instead of cron, so

[19:17] <dalek> perl6-roast-data: minor differences in results/output.

[19:17] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/733425462c

[19:19] *** GlitchMr left
[19:22] *** kaare_ left
[19:27] *** birdwindupbird joined
[19:27] *** cogno joined
[19:30] *** fgomez joined
[19:53] *** crab2313 left
[19:53] *** cogno left
[19:53] *** sirrobert joined
[19:56] *** cogno joined
[20:01] <masak> rn: say so '_' ~~ /<alpha>/

[20:01] <p6eval> rakudo 1f662c, niecza v19-15-g051783d: OUTPUT«True␤»

[20:01] <sirrobert> What are the current options (if any) for shared-memory stuff in p6?

[20:01] <sirrobert> shared between two processes, in particular

[20:01] <masak> rn: say so '_' ~~ /<+alpha-[_]>/

[20:02] <p6eval> rakudo 1f662c, niecza v19-15-g051783d: OUTPUT«False␤»

[20:02] <masak> is there a shorter way to say the above regex?

[20:02] <masak> sirrobert: I know Niecza supports threading. I haven't tried it, so I don't know how well shared-memory stuff works.

[20:02] <jnthn> Well, that's not between processes though :)

[20:02] <masak> sirrobert: should be no worse than the underlying VM's support, I guess.

[20:02] <masak> oh!

[20:03] <masak> I missed that bit.

[20:03] <sirrobert> =)

[20:03] *** birdwind1pbird joined
[20:03] *** birdwind1pbird left
[20:04] <jnthn> What are you needing to do, ooc?

[20:04] <masak> jnthn++ # de-X/Y-ing

[20:04] <jnthn> We do have some IPC bits (sockets, and I think japhb++ added pipes recently)

[20:04] <PerlJam> r: say so "_" ~~ /<:Letter>/;  

[20:04] <p6eval> rakudo 1f662c: OUTPUT«False␤»

[20:05] <sirrobert> So ... let's see how to say it succinctly... 

[20:05] <PerlJam> masak: dunno if that's precisely what you wanted

[20:05] <sorear> niecza will NOT support putting objects in shared memory

[20:05] <sorear> the GC wouldn't like that very much

[20:05] *** zby_home joined
[20:06] <sirrobert> I've divided our product into two parts/projects.  Information travels this way:

[20:06] <sorear> niecza MAY suport shared byte arrays with mmap and clr interop, or not, because the clr's support for pointers + reflection is dicey

[20:06] <masak> PerlJam: it probably is.

[20:06] <sorear> for some idiotic reason pointers are outside of the clr type system and can't be coerced to Object

[20:06] <masak> PerlJam: what's the difference between <+alpha-[_]> and <Letter>, ooc?

[20:06] <sorear> even though both Int32 and Int64 autobox

[20:08] <sirrobert> jnthn:  were you talking to me or masak about what we are needing to do? =)  (and what does ooc mean?)

[20:08] <jnthn> sirrobert: You :)

[20:08] <sirrobert> ok heh.

[20:08] <jnthn> "out of curiosity"

[20:09] *** lue left
[20:09] <diakopter> sorear: is this bad? Marshal::PtrToStructure

[20:09] <PerlJam> masak: I'm not entirely sure.   All I know is that <:Letter> matches the unicode property "Letter" and "_" isn't one of those  :)

[20:09] <sirrobert> jnthn:  our product is an analytics engine.  It does some ... heavy lifting and lots of conceptual manipulation.  

[20:09] *** cogno left
[20:10] <sirrobert> I'm writing the front-end (server) in perl6, which will be used to map real-world concepts (in the user's mind) to technological concepts (that the back-end knows about).

[20:10] <sirrobert> the back end is lisp, and does a lot of the analysis part.

[20:11] <sirrobert> when the user makes a request in the form of "real-world" ideas, the front end (p6) translates it into some instructions to the back end.  The back-end gives a back a token.

[20:11] <masak> PerlJam: oh, <:Letter>. right.

[20:11] <sirrobert> when the back-end is done calculating stuff, it (async) posts the data back to the front end, passing along the token.

[20:12] <masak> I think I will go with <:Letter> for my program. it conveys intent the best, IMO.

[20:12] <sirrobert> then the front-end completes the user's request with the answer (translated back into user's real-world concepts).

[20:12] <masak> PerlJam++ # <:Letter>

[20:12] <sirrobert> I want a p6-ish way of handling the async bit of this.

[20:14] <sirrobert> In the current design idea, the front-end keeps the request open until the back-end sends the results.

[20:14] <sirrobert> but the results will get posted into a different process (probably?).  I guess I could have a single process handling everything...

[20:14] <jnthn> How are requests being passed to the frontend in the first place ooc?

[20:14] <moritz> what is a "request" in this sense?

[20:15] <sirrobert> JSON

[20:15] <sirrobert> it's a JSON specification of a particular kind of analysis on particular data.

[20:16] *** cogno joined
[20:17] <sirrobert> =)

[20:18] <jnthn> sirrobert: How is the request arriving, though?

[20:18] <sirrobert> something like REST

[20:19] <sirrobert> sending the data to a port via http

[20:19] <jnthn> Using Perl 6 HTTP server module?

[20:19] <sirrobert> mmm maybe

[20:19] <sirrobert> sure

[20:19] <sirrobert> (we're still in the design phase for this part =)

[20:20] <jnthn> tadzik++'s https://github.com/tadzik/MuEvent may be worth a look

[20:20] <sirrobert> looking now

[20:21] <sirrobert> hmm thanks

[20:21] <jnthn> Also, I dunno how you're invoking the lisp code

[20:21] <jnthn> (or what the options are there)

[20:21] <sirrobert> clojure in a separate process running some kind of server

[20:22] <sirrobert> also REST

[20:23] <jnthn> Hm, so essentially you're doing filtering of HTTP request/response :)

[20:23] <sirrobert> for this part, yes =)

[20:23] <PerlJam> sirrobert: why does it have to be async? Will the front-end be a GUI or something?

[20:23] <sirrobert> PerlJam: it *can* be, but might not.

[20:23] <sirrobert> some of the analysis is fast, some is slow

[20:24] <sirrobert> allows for canceling things if needed, and other features

[20:28] <[Coke]> rakudo failure: https://github.com/coke/perl6-roast-data/blob/master/rakudo_summary.out#L2075

[20:28] <[Coke]> (hurm. easier to paste this:

[20:28] <[Coke]> S02-types/bool.t aborted 1 test(s)

[20:30] *** SamuraiJack left
[20:32] *** UncleFester6 joined
[20:40] <dalek> doc: 97dabe1 | moritz++ | README:

[20:41] <dalek> doc: [README] add vision; update outdated answer

[20:41] <dalek> doc: review: https://github.com/perl6/doc/commit/97dabe181b

[20:41] <masak> moritz++ # well-scoped vision

[20:43] <moritz> lexically scoped :-)

[20:44] <masak> :P

[20:44] <jnthn> .oO( I hope we don't block on achieving it... )

[20:44] *** bluescreen10 left
[20:46] *** cogno left
[20:46] *** cognominal joined
[20:48] *** cognominal left
[20:48] *** skids left
[20:50] *** pmurias left
[20:52] *** sirrobert left
[20:56] *** shinobicl left
[20:57] *** bluescreen10 joined
[21:00] *** gv joined
[21:01] *** pmurias joined
[21:04] <moritz> actually it was a discussion with tadzik++ that made me think about and write down the vision

[21:06] * masak .oO( tadzik++ is 20/20 )

[21:08] *** gv left
[21:17] <dalek> doc: 681795c | jnthn++ | lib/objects.pod:

[21:17] <dalek> doc: Try fleshing out the classes section a little.

[21:17] <dalek> doc: review: https://github.com/perl6/doc/commit/681795c964

[21:22] <jnthn> moritz: Is documenting Metamodel:: bits in doc reasonable?

[21:22] * jnthn may do that a bit in the coming $time-period :)

[21:25] *** cognominal joined
[21:26] *** birdwindupbird left
[21:38] *** nodmonkey left
[21:50] *** zby_home left
[21:57] *** eternaleye_ joined
[22:01] *** zby_home joined
[22:01] *** zby_home left
[22:12] *** Tedd1^ joined
[22:12] *** Tedd1 left
[22:14] *** pmurias_ joined
[22:16] *** Tedd1 joined
[22:17] *** Tedd1^ left
[22:20] *** skids joined
[22:21] *** pyrimidine left
[22:23] *** MayDaniel left
[22:25] *** ingy joined
[22:30] *** MayDaniel joined
[22:31] *** cognominal_ joined
[22:32] <masak> good ♞, #perl6.

[22:32] <tadzik> good knight masak

[22:32] * masak .oO( dobry rycerz )

[22:32] *** MayDaniel left
[22:33] <tadzik> (:

[22:34] *** cognominal left
[22:34] *** mtk left
[22:37] *** mtk joined
[22:43] *** cognominal_ left
[22:43] *** cognominal_ joined
[22:47] *** fire_ joined
[22:56] *** fire_ left
[23:10] *** cognominal_ left
[23:12] *** benabik left
[23:17] *** ingy left
[23:19] *** cognominal joined
[23:40] *** Tedd1^ joined
[23:40] *** thou left
[23:42] *** Tedd1 left
[23:43] *** cognominal_ joined
[23:43] *** benabik joined
[23:45] *** Tedd1^ left
[23:45] *** Tedd1 joined
[23:45] *** cognominal left
[23:46] *** Coleoid joined
[23:47] *** pmurias left
[23:47] *** pmurias_ left
[23:50] *** Tedd1 left
[23:51] *** topo_ joined
[23:56] *** UncleFester6 left
[23:59] *** facefox_com joined
