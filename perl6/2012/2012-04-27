[00:00] <sorear> good * #perl6

[00:01] <japhb> o/

[00:04] *** mspaulding left
[00:08] <japhb> sorear, BTW, what was the actual use case you were looking to perl6-bench for?  (I have a couple use cases of my own that won't be served by the current 'bench' tool, so I'm curious if there is overlap in our needs).

[00:09] <sorear> japhb: making changes to niecza and wondering how muhc slower it makes them

[00:12] <japhb> Yeah, that was one.  I can see three ways to do that: 

[00:12] <japhb> 1. Run all tests against a given version, dump timings.  Do your own comparisons.

[00:13] <japhb> 2. Cache old results; allow comparisons of current run against an old result run.

[00:14] *** eviltwin_b joined
[00:14] <japhb> 3. Automate the process of checking out and building particular versions, and do a run of each, compare across those.

[00:18] *** allbery_b joined
[00:18] *** eviltwin_b left
[00:22] *** eviltwin_b joined
[00:25] *** eviltwin_b is now known as geekosaur

[00:25] *** allbery_b left
[00:30] <dalek> tablets: 6c086df | (Herbert Breunung)++ | docs/appendix- (3 files):

[00:30] <dalek> tablets: polish links and format

[00:30] <dalek> tablets: review: https://github.com/perl6/tablets/commit/6c086df053

[00:38] *** eviltwin_b joined
[00:41] *** geekosaur left
[00:42] *** lestrrat left
[00:43] *** lestrrat joined
[00:44] *** lestrrat left
[00:45] *** lestrrat joined
[00:50] <dalek> tablets: 20b8c51 | (Herbert Breunung)++ | docs/appendix-a-index.txt:

[00:50] <dalek> tablets: simplify header and polish

[00:50] <dalek> tablets: review: https://github.com/perl6/tablets/commit/20b8c5158b

[00:51] <lichtkind> good night

[00:52] *** lichtkind left
[00:52] <whiteknight> What's the current best way to submit changes to NQP, patch or pull request?

[01:05] <[Coke]> pull request makes it easy.

[01:05] <[Coke]> is this for nqp-latestS?

[01:06] <whiteknight> yes

[01:07] *** eviltwin_b is now known as geekosaur

[01:10] *** lestrrat left
[01:10] <whiteknight> Okay, pull request sent. Thanks [Coke]

[01:11] *** lestrrat joined
[01:11] *** wolfman2000 joined
[01:13] *** thou left
[01:21] *** scott_ joined
[01:21] *** scott_ is now known as Guest46249

[01:22] *** eviltwin_b joined
[01:25] *** geekosaur left
[01:30] *** raiph joined
[01:34] *** allbery_b joined
[01:37] *** whiteknight left
[01:37] *** eviltwin_b left
[01:38] *** eviltwin_b joined
[01:39] *** allbery_b left
[01:41] *** tokuhirom left
[01:44] *** geekosaur joined
[01:46] *** eviltwin_b left
[01:47] <raiph> r: macro f { quasi { my $a = 0 } }; f # golf'd 4 masak

[01:47] <p6eval> rakudo 256e1d: OUTPUT«Cannot assign into a PMCNULL container␤  in <anon> at /tmp/UisqLGWwy_:1␤  in block <anon> at /tmp/UisqLGWwy_:1␤␤»

[01:47] <raiph> r: macro f { quasi { state $a = 0 } }; f # innerestin alternate, this works

[01:47] <p6eval> rakudo 256e1d:  ( no output )

[01:47] <raiph> r: macro f { quasi { state $a = 0; $a++ } }; f # but not this

[01:47] <p6eval> rakudo 256e1d: OUTPUT«(signal SEGV)»

[01:49] <raiph> phenny, let masak know about http://irclog.perlgeek.de/perl6/2012-04-27#i_5503487

[01:50] <raiph> phenny, tell masak http://irclog.perlgeek.de/perl6/2012-04-27#i_5503487

[01:50] <phenny> raiph: I'll pass that on when masak is around.

[01:54] *** vlixes left
[02:07] *** eviltwin_b joined
[02:10] *** geekosaur left
[02:13] *** lestrrat left
[02:14] *** eviltwin_b left
[02:14] *** lestrrat joined
[02:17] *** geekosaur joined
[02:31] *** eviltwin_b joined
[02:33] *** geekosaur left
[02:37] *** oiig_ joined
[02:40] *** PacoAir left
[02:41] *** erkan left
[02:43] *** allbery_b joined
[02:46] *** eviltwin_b left
[02:48] *** orafu left
[02:48] *** orafu joined
[02:49] *** eviltwin_b joined
[02:51] *** geekosaur joined
[02:52] *** allbery_b left
[02:53] *** eviltwin_b left
[02:56] *** eviltwin_b joined
[02:59] *** geekosaur left
[03:04] <dalek> ecosystem: 31f6037 | colomon++ | META.list:

[03:04] <dalek> ecosystem: Math::BigInt was made completely pointless once Rakudo got native big ints, so I'm removing it.

[03:04] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/31f6037205

[03:10] *** allbery_b joined
[03:12] *** eviltwin_b left
[03:13] *** raiph left
[03:17] *** allbery_b left
[03:20] *** cognominal left
[03:21] *** cognominal joined
[03:23] *** Su-Shee_ joined
[03:27] *** Su-Shee left
[03:34] *** geekosaur joined
[03:49] *** agentzh joined
[03:49] *** agentzh left
[03:56] *** jaldhar left
[03:58] *** sporous left
[03:58] *** sporous joined
[04:01] *** eviltwin_b joined
[04:03] *** jaldhar joined
[04:03] *** geekosaur left
[04:09] *** eviltwin_b is now known as geekosaur

[04:27] *** thou joined
[04:30] *** eviltwin_b joined
[04:33] *** geekosaur left
[04:51] *** melatinini joined
[04:54] <melatinini> hi, how can i explore the rakudo sockets interface?  can't find documentation on io::socket::inet and i don't think it's the same as perl5's...

[04:55] *** preflex_ joined
[04:57] *** preflex left
[04:57] *** preflex_ is now known as preflex

[04:58] *** geekosaur joined
[04:59] <sorear> melatinini: trial and error?  asking people who have used it?

[04:59] <sorear> melatinini: welcome to #perl6

[04:59] <melatinini> haha, ok, fair.  i see that the rakudo star that came out today has some new www features :)

[05:00] <melatinini> sorear: thanks!

[05:00] *** eviltwin_b left
[05:01] <moritz> o/

[05:01] <sorear> o/ moritz

[05:03] *** birdwindupbird joined
[05:10] *** sudokode left
[05:14] *** wolfman2000 left
[05:20] *** wolfman2000 joined
[05:31] *** melatinini left
[05:37] *** kaleem joined
[05:39] *** spaceships left
[05:40] *** sudokode joined
[05:41] *** tyatpi left
[05:48] *** wtw joined
[05:55] *** eviltwin_b joined
[05:58] *** geekosaur left
[06:16] *** allbery_b joined
[06:18] *** eviltwin_b left
[06:19] *** fhelmberger joined
[06:19] *** sftp left
[06:32] *** Su-Shee_ is now known as Su-Shee

[06:57] *** eviltwin_b joined
[06:57] *** allbery_b left
[06:59] <masak> good actual morning, #perl6

[06:59] <phenny> masak: 01:50Z <raiph> tell masak http://irclog.perlgeek.de/perl6/2012-04-27#i_5503487

[06:59] * masak backlogs

[06:59] <masak> huh. raiph++

[07:01] *** brrt joined
[07:03] <masak> melatinini: or you could read the source code: https://github.com/rakudo/rakudo/blob/nom/src/core/IO/Socket/INET.pm

[07:03] <masak> probably the easiest way to get into things.

[07:05] *** erkan joined
[07:16] *** NamelessTee joined
[07:26] *** fgomez joined
[07:26] <frettled> masak o/ 

[07:26] <frettled> Good late morning :D

[07:27] <moritz> note that much of the networking code is also in IO/Socket.pm

[07:28] <masak> oh, point.

[07:28] <tadzik> hmm, I think setting LD_LIBRARY_PATH can be fixed outside of zavolaj after all

[07:29] <moritz> do makefiles under windows allow  ENVVAR=value programtorun  syntax?

[07:29] <tadzik> imagine a Configure.pm, which gets require()d by Panda code and something gets run inside. This something sets LD_LIBRARY_PATH, so it stays for subprocesses. Thus when we later do perl6 --target=pir or run tests, the variable stays

[07:29] <tadzik> I really don't want to fall back to using makefiles

[07:30] <moritz> tadzik: what's the state of the setenv branch?

[07:30] <tadzik> moritz: worksforme

[07:30] <tadzik> no tests

[07:30] <moritz> \o/

[07:31] <tadzik> and zavolaj eventually works without its help anyway :)

[07:31] <moritz> testing shouldn't be too hard

[07:31] <tadzik> cross-platform testing may be tough

[07:32] <moritz> %*ENV<foo> = 'bar'; is_run 'say %*ENV<foo>', "bar\n"

[07:32] <tadzik> things like %*ENV<FOO>; shell 'echo $FOO'; are not windows-friendly

[07:32] <tadzik> well, can work this way, yes

[07:33] *** wolverian left
[07:33] <frettled> tadzik: why don't you want to use makefiles?

[07:33] <masak> and what makes you think you can avoid it? :)

[07:33] <moritz> cross-platform makefiles are incredibly hard to write

[07:34] <moritz> sqlite status: 2 failing tests

[07:34] <masak> IME, it just means you can't use all the nifty syntax of GNU Makefile.

[07:34] <masak> then again, I've just been targeting two platforms.

[07:34] *** agentzh joined
[07:35] <moritz> one is because 1.90 returns as 1.9, which IMHO isn't wrong

[07:35] <frettled> moritz: cross-platform is incredibly hard to do :)

[07:35] <brrt> hey, i was wondering, if 6model is integrated to parrot core

[07:35] <brrt> will it completely replace pmc?

[07:35] * masak .oO( cross is incredibly hard to do )

[07:35] <moritz> the other one is the "Malformed UTF-8" when getting the second row

[07:35] <frettled> but these days, "cross-platform" usually means "works on RedHat AND Debian/Ubuntu"

[07:35] <brrt> if so, what will happen to pir?

[07:35] *** wolverian joined
[07:36] <moritz> brrt: 6model and pmc aren't quite the same abstraction level

[07:36] <brrt> and if so, what will happen to compiling-to-pir?

[07:36] <brrt> what i'm wondering is, what abstraction level are they, then?

[07:36] <moritz> brrt: 6model is mostly a way to store objects and their meta objects, but doesn't come with any object model

[07:37] <moritz> brrt: so there would need to be a minimalistic object model on top of 6model, in which PMCs would be implemented

[07:37] <brrt> so, pmc is an object model

[07:37] <brrt> 6model is a meta-object model?

[07:37] <moritz> brrt: oh, and we want to get rid of PIR even before that. The plan is to compile from PAST or similar to PBC directly

[07:38] <moritz> brrt: 6model is not a meta-object model. It's a storage theme which makes it easy-ish to write your own meta-object model

[07:38] <masak> the distinction between objects and meta-objects is deliberately blurred. meta-objects are just objects.

[07:38] <tadzik> frettled: cross-platform issues I suppose

[07:38] *** lumi_ left
[07:38] <frettled> In my experience, avoiding makefiles mostly means that you will end up reinventing them.  Badly.  I'm not sure why anyone would want to put themselves through that kind of pain.

[07:38] <masak> moritz: up until now, I've considered 6model a small, bootstrapping, MOP-agnostic MOP.

[07:39] <brrt> i'm reading the 6model overview pod right now

[07:39] <brrt> 6model is implemented in C?

[07:39] *** erkan left
[07:39] <brrt> pretty awesome, actually

[07:39] <moritz> masak: in my understanding, that's not quite accurate. It has an API for a MOP, but not a MOP itself

[07:39] <moritz> brrt: yes, 6model is in C

[07:40] <brrt> also

[07:40] <masak> moritz: ok.

[07:40] <brrt> if you get rid of PIR, what will be the 'smallest' language for parrot? winxed?

[07:40] <brrt> i was actually learning PIR a bit :-)

[07:41] <moritz> winxed, yes

[07:41] <brrt> ok, i can live with winxed

[07:41] <brrt> winxed uses 6model?

[07:41] <moritz> no

[07:41] <moritz> it only uses parrot

[07:41] <moritz> currently only nqp and rakudo use 6model

[07:42] <brrt> ... so, let me get this straight

[07:42] <brrt> benabik is going to integrate 6model into core and build pmc on top of 6model

[07:42] <moritz> no

[07:42] * brrt is confused

[07:43] <moritz> at least in the scope of gsoc, benabik will write an abstract-syntax-tree-to-PBC compiler

[07:43] <brrt> :-)

[07:43] <brrt> seems reasonable

[07:43] <moritz> he submitted two proposals, one was 6model, one was the compiler/compiler tools thing

[07:43] <brrt> the PACT thing

[07:43] <moritz> right

[07:44] <brrt> so, he is going to implement PACT, which will replace PIR

[07:44] <moritz> well, it's a step towards replacing PIR

[07:45] <brrt> i see

[07:45] <brrt> so, big project actually

[07:45] <moritz> aye

[07:45] <moritz> PIR is not a small language

[07:46] <brrt> but, i still don't really understand the - planned - relation between PMC and 6model :-)

[07:47] <moritz> 6model itself doesn't have a notion of classes, inheritance, roles etc.

[07:47] <brrt> PMC does?

[07:47] <moritz> that's something you build on top of 6model, as part of the MOP

[07:47] <moritz> and PMCs use inheritance, for example

[07:48] <moritz> so, to reimplement the current PMCs on top of 6model, you also need a small MOP that provides enough functionality

[07:48] <brrt> ok, i get it

[07:48] <moritz> you aren't the first to be confused by it :-)

[07:49] <brrt> :-)

[07:49] <brrt> this is more of a parrot discussion

[07:49] <brrt> but, does parrot use garbage collecting?

[07:49] <moritz> yes

[07:50] <moritz> that's one of the few subsystems we haven't been tempted to reimplement in rakudo :-)

[07:50] <brrt> if so, will an integrated 6model-into-parrot use parrots garbage collecting, or the current refcounting?

[07:50] <brrt> :-)

[07:51] <moritz> note that 6model uses refcounting only for certain things, not for the "normal" objects you use in the programming language

[07:51] <moritz> mostly for things where order of destruction matters

[07:51] <moritz> all the "normal" objects are collected by parrot's GC

[07:52] *** cognominal left
[07:52] <brrt> i see

[07:52] *** lumi_ joined
[07:52] *** cognominal joined
[07:53] <brrt> somewhat relevant for my project, can i assume that whenever 6model is integrated, i can still use pmc's to connect the apache api to?

[07:53] <moritz> sure

[07:53] <brrt> awesome

[07:54] <brrt> then i could wish for nothing more

[07:54] <moritz> for your project, you must use the status quo

[07:54] <moritz> and that means PMCs

[07:54] *** geekosaur joined
[07:54] <moritz> 6model in parrot is still in the future, and it's not clear in which time frame we can expect it to land

[07:55] <masak> it seems it'll require quite a big change in Parrot.

[07:55] <brrt> it seems like a huge project actually

[07:56] <tadzik> whiteknight was saying something about "after summer" yesterday

[07:56] <tadzik> It'd be lovely, but I find it quite hard to believe

[07:57] *** eviltwin_b left
[07:58] <frettled> After summer and before Christmas.

[07:58] <brrt> that'd be quick

[08:01] <masak> depends on the Christmas.

[08:01] <masak> and on the summer.

[08:04] <brrt> short summer, maybe

[08:06] <masak> Perl 6: the Long Christmas.

[08:09] <moritz> as weird as it sounds, I think that replacing the object model in parrot is less work than, say, cleaning up the call conventions

[08:11] <masak> possibly.

[08:17] *** lestrrat left
[08:18] *** lestrrat joined
[08:18] <sorear> tadzik: you find it hardto believe that 6model in parrot will be after summer? :>

[08:19] <tadzik> sorear: Heh, now that you say it I find it quite possible :)

[08:20] *** araujo left
[08:20] <tadzik> and again, I'd like to be wrong

[08:20] *** araujo joined
[08:20] *** araujo left
[08:28] *** fgomez left
[08:30] *** geekosaur left
[08:33] <masak> all other things equal, I prefer to be right :P

[08:34] <brrt> being wrong can be so much fun

[08:34] <brrt> especially when you know it

[08:34] <brrt> and others don't :-p

[08:38] <masak> what is knowledge? knowledge is just sufficiently certain belief.

[08:40] <moritz> or believe is just uncertain knowledge :-)

[08:41] <brrt> i'd go with masak here

[08:42] <brrt> although 'certain' is rather poorly defined

[08:42] <masak> huh? our utterances are equivalent.

[08:42] <masak> "black is just a very dark gray" -- "or gray is just a bright black :-)"

[08:43] <moritz> well, we humans tend to have some estimates about how confident we are about our memories

[08:43] <moritz> and if that confidence is high, we call it "knowledge". The threshold isn't fixed.

[08:43] * masak .oO( at least, that what I recall reading )

[08:43] <brrt> both stamements state the opposite thing as the 'defined' thing

[08:44] <masak> well, neither thing exists if you look closely enough.

[08:44] <masak> it's just electrochemical signals in wetware.

[08:44] <brrt> very true

[08:46] <brrt> i was recently wondering

[08:47] <brrt> given that the brain has just one 'namespace' for words, regardless of how many languages you speak

[08:47] <brrt> does the brain have multipe 'compilers' for languages too?

[08:47] <brrt> or would it just be one, with different 'routines' per language

[08:48] <moritz> masak: I kinda object to that sort of statement. It very much limits the concept of existence to some organizational layers

[08:49] <sorear> brrt: I think it is wrong to say "one 'namespace'"

[08:49] <moritz> brrt: is that true that you have just one 'namespace'?

[08:49] <brrt> i recall reading it

[08:49] <brrt> in popular media, that is; i havent studied in any detail yet

[08:49] <sorear> My mental dictionary absolutely never confuses English/sake with Japanese/sake

[08:50] <moritz> I for one don't have any trouble with some words that have the quite different meanings in English and German

[08:50] <brrt> that could be due to different 'construction routines'

[08:50] <moritz> but of course that could be context too

[08:50] <brrt> well, neither do i - used to when i was a child though

[08:50] <sorear> (hi, I just got done reading four books on psycholinguistics)

[08:50] <masak> moritz: well, I used it only as a rhethorical point against "either 'knowledge' or 'belief' is more defined than the other".

[08:51] *** agentzh left
[08:51] <moritz> masak: ok, that usage I agree with :-)

[08:51] <masak> moritz: of course the interesting bits reside in the emergent phenomena from those signals.

[08:51] <masak> moritz: if you like this conversation, I strongly recommend Hofstadter's "I am a strange loop".

[08:52] <brrt> sorear: fun, i read a lot of neurobiology, so i guess that is in many ways the 'other side' of approach

[08:52] <masak> I think jnthn's brain has a single namespace for words, and that's why he makes cross-language puns all the time :P

[08:53] <moritz> if there are namespaces, I'm sure there's a lookup facility across them

[08:54] <brrt> something i'd like to study in the future :-)

[08:56] <masak> I like the feeling of some part of my brain doing an instantaneous lookup of some word in some language I haven't used in a long time, all the while the rest of the brain goes "oh, is that so? how do I know that?" :P

[08:57] <masak> also, somewhat annoying, sending off a lookup for the word for a concept in English, and $brain comes back with correct translations in French, Russian, Esperanto, and Mandarin, but no English.

[08:58] *** envi_ left
[08:58] *** envi_ joined
[08:58] *** fgomez joined
[08:59] <moritz> what about Swedish? :-)

[09:01] <tadzik> I sometimes stick English words into Polish sentences, for I cannot recall the Polish word for it

[09:01] <tadzik> sometimes it results in abominations like...

[09:01] <tadzik> phenny: "prerekwizyt"?

[09:01] <phenny> tadzik: "prerekwizyt" (en to en, translate.google.com)

[09:02] <tadzik> yeah. It's supposed to mimic "prerequisite"

[09:02] <moritz> phenny: pl "prerekwizyt"?

[09:02] <phenny> moritz: "prerekwizyt" (pl to en, translate.google.com)

[09:02] <moritz> cute :-)

[09:02] <brrt> in the netherlands, a lot of people do that

[09:03] <tadzik> yeah, it's apparently illegal Polish, according to two online dictionaries

[09:03] <brrt> where you get a dutch version of an english word

[09:03] <brrt> the english word is frequently itself imported from france

[09:03] <tadzik> phenny: "rekwizyt"?

[09:03] <phenny> tadzik: "prop" (pl to en, translate.google.com)

[09:04] <tadzik> phenny: en pl "prerequisite"?

[09:04] <phenny> tadzik: "warunek wstępny" (en to pl, translate.google.com)

[09:04] <tadzik> yeah, no wonder I say "prerekwizyt"

[09:05] <brrt> as an unrelated sidenote, why do many eastern european languages not fit into the latin alphabet?

[09:06] <tadzik> most of them, I think

[09:06] <tadzik> if not all of them

[09:06] *** jerome_ left
[09:06] <masak> moritz: it has happened that I forget words in Swedish but remember them in English. but it's rare.

[09:06] <brrt> most i know, at least

[09:08] <moritz> brrt: asked differently, why should they fit?

[09:08] <moritz> the larger the difference in language is, the less likely it is that it maps well to the alphabet

[09:08] <brrt> good question...

[09:09] <brrt> there are only so many sounds a human can make

[09:09] <brrt> so, pretty much all languages can be captured by alphabet

[09:09] <moritz> and latin only used a tiny subset

[09:09] <brrt> true

[09:09] <brrt> but what most western european languages have done

[09:09] <tadzik> "there are only so many sounds a human can make"

[09:09] <tadzik> clearly, you haven't heard enough Polish :P

[09:10] <brrt> very little, in fact :-)

[09:10] <moritz> brrt: well, most of western europe had been under Roman influence

[09:10] <brrt> many western european languages have 'fitted' latin to their own speech

[09:10] <tadzik> <obligatory brzęczyszczykiewicz video>

[09:10] <moritz> like, being conquered by them

[09:10] <masak> the Russian alphabet is a really good fit for Russian sounds. if you look at that and then at the stock of other Slavic languages, the ones with adapted Latin alphabets look like they made compromises of different kinds.

[09:10] <brrt> true, but germany never has, and it fits comfortably - except for umlauts - into latin

[09:11] <moritz> brrt: actually the south of Germany has been under Roman ruling

[09:11] <brrt> not arguing that latin is the end-all alphabet

[09:11] <brrt> ah, that is very true

[09:12] <frettled> The funny thing is that the alphabet imposes changes on how people speak :)

[09:12] <brrt> maybe english is the exception

[09:12] <moritz> https://en.wikipedia.org/wiki/File:Limes_Germanicus_2nd_c.png

[09:12] <moritz> https://de.wikipedia.org/wiki/Datei:Roman_Empire_125_de.svg

[09:12] <masak> by the way, who says you need an alphabet at all? 中国人做得很好，尽管只有汉字。

[09:13] * moritz 

[09:13] <frettled> masak: well, sometimes you need additional symbols to differentiate meaning

[09:14] <brrt> alphabets are usefull especially because they prevent that mess

[09:14] <masak> it's a fairly strong statement to make that hanzi are somehow more of a mess than alphabets.

[09:15] <brrt> it is

[09:15] <masak> I think I used to believe that a bit more before learning Chinese. :)

[09:15] * brrt still would like to learn chinese

[09:15] <masak> it's just a different factoring of things, that's all. gain some, lose some.

[09:15] <brrt> hmm

[09:16] <brrt> i guess that human visual pattern recognition is actually good enough to deal with hanzi

[09:16] <masak> frettled: sure. modern Mandarin is generally bisyllabic, compared to the monosyllabic Classical Chinese.

[09:16] <brrt> in which case, it is arguably good coding, in a way

[09:16] <frettled> The following is based on my recollection of a book I read on code-breaking during WWII: the Japanese navy had an "unbreakable" cipher known as Purple.  Japanese uses to some extent the Chinese symbols for written language, and not an alphabet.  But when communicating about naval warfare, they ended up spelling things out in their own alphabet to ensure that there were no misunderstandings.

[09:17] <frettled> This meant that the US intelligence section intercepting the encrypted messages could recognize warship names from other text, simply by the change in alphabet

[09:17] *** geekosaur joined
[09:17] <frettled> Pretty cool cryptanalysis, actually.

[09:18] *** thou left
[09:18] <masak> I think the two Japanese sets of kana count as syllabaries, not alphabets. </nitpick>

[09:18] <bonsaikitten> frettled: slight misunderstanding of written japanese

[09:18] <frettled> bonsaikitten: I may be misunderstanding, but US intelligence sure didn't :)

[09:18] <moritz> arnsholt: there's still something wrong with the sqlite stuff

[09:18] <moritz> arnsholt: I get different output when under valgrind :/

[09:18] <frettled> ISBN 0-684-85932-7

[09:18] <moritz> and valgrind still reports invalid reads

[09:19] <bonsaikitten> frettled: japanese has three independent alphabets / writing systems

[09:19] <frettled> bonsaikitten: I am aware of that.

[09:19] <bonsaikitten> frettled: but yeah, kanji is close enough to chinese that you can read a newspaper and get the general idea from the other language

[09:20] <moritz> that's the reason for the big JCK unification in Unicode

[09:20] <arnsholt> moritz: Ah, that's annoying. Especially different results when debugging

[09:20] <masak> neither of Japan's three writing systems is an alphabet. romaji is, though :P

[09:20] *** jerome_ joined
[09:20] <sorear> for the purposes of this discussion, are abugidas and abjads alphabets?

[09:21] <arnsholt> Abjad, yes-ish, abuguida, kinda

[09:21] <arnsholt> That a good enough answer? =)

[09:21] <masak> kanji and hanzi are "the same", modulo the PRC's simplifications, and Japan's simplifications. but even after that, meanings have often diverged to different degrees.

[09:21] *** lestrrat left
[09:22] *** lestrrat joined
[09:24] <arnsholt> But abjads are essentially alphabetic, except for the decision that you don't really care about vowels

[09:24] <arnsholt> Abuguidas fall in between alphabetic and syllabic

[09:24] <tadzik> abjads?

[09:24] <tadzik> phenny: "obiad"?

[09:24] <phenny> tadzik: "dinner" (pl to en, translate.google.com)

[09:25] <arnsholt> tadzik: Arabic and hebrew are the primary examples

[09:25] <tadzik> aha

[09:25] <arnsholt> Alphabets that only have signs for consonants, not vowels

[09:25] *** lumi_ left
[09:25] <arnsholt> Of course, that's not entirely true for the modern varieties, but that's the gist of it

[09:26] <tadzik> istr talking about those on the hackathon

[09:26] <tadzik> regarding Egyptian names, Imhotep, Amenhotep etc

[09:27] <arnsholt> Yeah, hieroglyphs are consonants-only

[09:28] <arnsholt> I think it was frettled who mentioned that the standard scholarly pronounciation of Egyptian is in no way based on actual reconstructions of the language

[09:28] <frettled> That wasn't me, that was someone else, but I might have said it.

[09:28] *** lumi_ joined
[09:28] <arnsholt> Right. One of the Norwegians I think

[09:29] <moritz> I think it was krunen, but I'm not entirely sure

[09:30] <frettled> That's plausible.

[09:30] *** daxim joined
[09:32] <tadzik> discussion.init: http://tjs.azalayah.net/new.html shows failures in all the NativeCall-using modules now, because there are no libraries available and the tests fail. Any ideas how to resolve this? I suppose module tests should skip() if the library is not available, I think that's how it works in Perl 5

[09:33] <moritz> tadzik: no, p5 does it differently

[09:33] <moritz> tadzik: p5 modules run a configure script that detects dependencies, and dies if they are not fulfilled

[09:34] <moritz> tadzik: and the CPAN tester reports show that as "N/A" or "UNKNOWN" or so instead of PASS or FAIL

[09:34] <tadzik> I see

[09:35] <tadzik> so that would count as "prereqs ok -- NOT" in emmentaler, right?

[09:35] <tadzik> some some Configure.pm support may be necessary

[09:36] <masak> "prereqs ok -- NOT" sounds like something Borat would say.

[09:36] <arnsholt> moritz: Do you have your sqlite code on github or something?

[09:38] <moritz> arnsholt: yes, in MiniDBI, branch no_dsn

[09:38] <moritz> just let me push the latest fixes

[09:39] *** eviltwin_b joined
[09:39] <moritz> arnsholt: make && PERL6LIB=lib perl6 t/40-sqlite.t

[09:39] <moritz> arnsholt: that one exhibts the "Malformed UTF-8" or "Unaligned end in UTF-8 string"

[09:40] *** geekosaur left
[09:40] <moritz> arnsholt: and https://gist.github.com/2507847 is the script that shows different behavior under valgrind and without it

[09:53] <arnsholt> moritz: Well, that was annoying. But yeah, probably something fishy with zavolaj's pointers

[09:55] <arnsholt> Don't have time to debug it right now, but I'll look into it

[09:55] <moritz> arnsholt: no hurry

[09:56] <moritz> arnsholt: I like our modus operandi: I let you handle all the hard parts :-)

[09:56] <moritz> and in the end I'll say "look, I've written an SQLite backend for MiniDBI" :-)

[09:58] *** mikec joined
[09:58] <arnsholt> And I'll say "NativeCall makes calling out to C disgustingly simple" =D

[10:06] <moritz> r: sub f($x) { }; say f.candidates_match(1).elems

[10:06] <p6eval> rakudo 256e1d: OUTPUT«===SORRY!===␤CHECK FAILED:␤Calling 'f' will never work with no arguments (line 1)␤    Expected: :($x)␤»

[10:06] <moritz> r: sub f($x) { }; say &f.candidates_match(1).elems

[10:06] <p6eval> rakudo 256e1d: OUTPUT«Method 'candidates_match' not found for invocant of class 'Sub'␤  in block <anon> at /tmp/whcx9rFHd1:1␤␤»

[10:06] <moritz> r: sub f($x) { }; say &f.candidates_matching(1).elems

[10:06] <p6eval> rakudo 256e1d: OUTPUT«1␤»

[10:06] <moritz> r: sub f($x) { }; say &f.candidates_matching(1, 2).elems

[10:06] <p6eval> rakudo 256e1d: OUTPUT«0␤»

[10:10] *** Guest46249 left
[10:13] <moritz> arnsholt: I've just pushed a new zavolaj branch, 'check-signature'

[10:13] *** geekosaur joined
[10:13] <moritz> arnsholt: it doesn't really work, and I'm not sure the approach is right at all, but it's a fun attempt

[10:16] *** eviltwin_b left
[10:17] *** pernatiy joined
[10:18] *** araujo joined
[10:22] *** eviltwin_b joined
[10:26] *** geekosaur left
[10:32] *** geekosaur joined
[10:34] *** eviltwin_b left
[10:58] *** brrt left
[11:02] *** eviltwin_b joined
[11:04] *** geekosaur left
[11:04] *** geekosaur joined
[11:07] *** eviltwin_b left
[11:13] *** fgomez left
[11:15] *** fgomez joined
[11:21] *** wamba joined
[11:22] *** wamba left
[11:26] *** GlitchMr joined
[11:32] *** kaleem left
[11:45] <Su-Shee> LOL masak: "this tabula is intentionally left rasa" is amazing. :) I think I need this a) as a shirt, b) as a signature and c) had to retweet it :)

[11:45] <tadzik> what does that mean?

[11:46] <Su-Shee> tadzik: "making tabula rasa" -> clean slate, empty the table

[11:46] <moritz> "tabula rasa" means, literally, "table empty" (empty table)

[11:46] <Su-Shee> tadzik: "start new, over" etc. 

[11:46] <tadzik> hah

[11:46] <moritz> clean slate would be an idiomatic translation, ye

[11:46] <moritz> s

[11:47] <Su-Shee> -is I added that accidently. 

[11:47] <Su-Shee> anyways. it's very funny. :)

[11:48] <masak> :)

[11:48] *** pernatiy left
[11:48] *** skids left
[11:49] <masak> I also like the first scene of the pilot of "Dollhouse", where this line appears: "Have you ever tried to clean an actual slate?"

[11:49] <masak> Dollhouse. watch it.

[11:49] <jnthn> afternoon, #perl6

[11:49] <colomon> loved that show

[11:49] <colomon> o/

[11:50] <moritz> \o

[11:50] *** pernatiy_ joined
[11:51] <Su-Shee> god I wish they hadn't cancled it.. 

[11:51] *** erkan joined
[11:54] <colomon> eh, at least it got two seasons and a decent chance to wrap up its stories.  (I'm still scared by Firefly.)

[11:54] <Su-Shee> god I wish they hadn't cancled it, too :)

[11:54] <masak> can't they, theoretically, un-cancel Firefly?

[11:55] <Su-Shee> they could.

[11:55] <Su-Shee> whedon works with the same range of actors anyways.

[11:56] <masak> range? .oO( Jayne .. River )

[11:56] <moritz> unless tadzik++'s sequel preventer kills the characters, of course :-)

[11:56] <Su-Shee> moritz: alan tudik (alpha and I forgot his name in firefly)

[11:58] <Su-Shee> and she who played in angel and in dollhouse whose name is on the tip of my tongue..

[11:58] <masak> Su-Shee: Wash

[11:58] <Su-Shee> eliza dushu of course and caiptn firefly who played the evil in buffy.

[11:58] <Su-Shee> masak: yes!

[11:59] <Su-Shee> eliza dushku I think.

[11:59] <tadzik> moritz: shh, that's a secret project!

[11:59] *** fglock joined
[12:01] <tadzik> at least officially

[12:02] <fglock> o/

[12:02] <Su-Shee> haha. of course..

[12:02] <Su-Shee> http://en.wikipedia.org/wiki/Joss_Whedon large table of actors in the whedonverse ;)

[12:02] <colomon> tadzik: while a sequel preventer would be nice, a remake preventer would be much more useful, IMO.  ;)

[12:02] <tadzik> colomon: nice idea for a sequel

[12:03] <tadzik> err, wait...

[12:05] <colomon> tadzik: you need to refresh the Emmentaler page.  I fixed one project last night and removed another one from the ecosystem.  ;)

[12:05] <tadzik> colomon: I will after $work

[12:06] <tadzik> is ABC fixed?

[12:06] <moritz> no, Testing

[12:06] <moritz> I wanted to fix it, and found it already fixed :-)

[12:06] <colomon> ;)

[12:06] <moritz> ABC requires one or two fixes from jnthn++ I'm afraid

[12:07] <tadzik> good :)

[12:07] <moritz> https://rt.perl.org/rt3/Ticket/Display.html?id=112624 and https://rt.perl.org/rt3/Ticket/Display.html?id=112626

[12:08] <colomon> moritz++

[12:10] * jnthn is now mostly repaired and should be able to look at them soonish

[12:11] *** pernatiy_ left
[12:13] *** pernatiy joined
[12:13] <colomon> ooo, I see Bailador has also gone all green sometime in the last 24 hours.  ;)

[12:14] *** oiig joined
[12:14] <moritz> yes, because we've changed HTTP::Easy to my fork, which has the advantage of working :-)

[12:14] <colomon> fork++

[12:14] *** d4l3k_ joined
[12:17] *** preflex_ joined
[12:18] *** gAm joined
[12:18] *** mikec_ joined
[12:18] *** gAm is now known as Guest36035

[12:19] *** ZAZEN_co1pute joined
[12:23] *** mikec left
[12:23] *** preflex left
[12:23] *** oiig_ left
[12:23] *** sivoais left
[12:23] *** tadzik left
[12:23] *** dalek left
[12:23] *** infosophy left
[12:23] *** ZAZEN_compute left
[12:23] *** preflex_ is now known as preflex

[12:24] *** d4l3k_ is now known as dalek

[12:27] *** FACEFOX left
[12:27] *** pmurias joined
[12:28] *** replore joined
[12:30] *** bluescreen10 joined
[12:31] *** tadzik joined
[12:32] <tadzik> yeah, it works now, for fork's sake :)

[12:34] *** sivoais joined
[12:38] *** Vlavv_ left
[12:40] *** pernatiy left
[12:40] *** pernatiy joined
[12:44] *** FACEFOX joined
[12:46] *** eviltwin_b joined
[12:48] <[Coke]> prerekwizyt haderach!

[12:48] <[Coke]> (catching up)

[12:48] <tadzik> what

[12:49] *** geekosaur left
[12:51] <moritz> Juerd: fwiw I'm pondering a p6ized replacement for MiniDBI

[12:52] <[Coke]> your made up word reminded me of dune's "kwisatz haderach". 

[12:52] <mikec_> dune!

[12:53] *** mikec_ is now known as mikec

[12:53] *** pernatiy left
[12:54] *** eviltwin_b left
[12:55] *** geekosaur joined
[12:56] <moritz> dude!

[12:58] <[Coke]> nude!

[12:58] <[Coke]> ... i don't like where this is going.

[12:59] <moritz> rude?

[13:00] <[Coke]> ah, that's better.

[13:01] *** pernatiy joined
[13:02] <PerlJam> food

[13:03] *** oiig left
[13:04] *** pernatiy_ joined
[13:04] *** pernatiy left
[13:08] *** GlitchMr42 joined
[13:09] *** GlitchMr left
[13:13] *** PacoAir joined
[13:18] *** skids joined
[13:21] <moritz> when I create my 'DBIish' fork of MiniDBI, what should I name the DBD modules?

[13:21] <moritz> DBDish?

[13:21] *** grondilu joined
[13:21] <PerlJam> what's "DBIish" mean?

[13:21] <moritz> well, it's like, DBI-ish

[13:22] <moritz> :-)

[13:22] <moritz> MiniDBI tries to be p5 DBI compatible as much as possible

[13:22] <moritz> and I don't want to deviate from that without first discussing it with mberends

[13:22] *** GlitchMr42 is now known as GlitchMr

[13:22] <PerlJam> and DBIish is a perl6 reimagining?

[13:22] <moritz> right

[13:23] <PerlJam> awesome

[13:23] <mikec> cool

[13:23] <moritz> well, it's not yet awesome. It's not at all yet

[13:23] <moritz> just planning

[13:23] * mikec is interested

[13:23] <moritz> well, I have a bit of code already in a MiniDBI branch

[13:23] <PerlJam> moritz: how about DBI6 and DBD6  ;)

[13:24] <PerlJam> or DBIvi DBDvi

[13:24] <moritz> PerlJam: I don't think we're ready for those big names yet

[13:24] <Su-Shee> moritz: DBIchen ;)

[13:24] <moritz> Su-Shee: :-)

[13:25] <Su-Shee> or DBIje to honor mberends. ;)

[13:26] <arnsholt> moritz: Isn't whoever made DBI (his name escapes me ATM) also doing something along those lines?

[13:26] <arnsholt> Inspired by ODBC or something IIRC

[13:26] <moritz> arnsholt: tim bunce worked a bit on DBDI, yes

[13:26] <arnsholt> Tim Bunce, right

[13:26] <moritz> arnsholt: and he uses ODBC as the internal API between DBI and DBDs

[13:27] <moritz> arnsholt: I don't want that level of engineering (yet?). I want something as simple as DBI, but mor 6ish

[13:27] <moritz> *more

[13:28] <PerlJam> moritz: a very worthy goal

[13:29] <Su-Shee> .oO(DBItje ;)

[13:30] <tadzik> how about DBIesque?

[13:31] <PerlJam> too long

[13:31] <moritz> tadzik: I like the name, but I don't want to type it repeatedly :-)

[13:31] <tadzik> :)

[13:31] <tadzik> IDB?

[13:31] <PerlJam> DBIx  ;->

[13:31] <tadzik> erm, IBD

[13:31] <flussence> DBS, for "DBI Bikeshed"

[13:31] * flussence ducks

[13:31] <tadzik> but then DBD is hard

[13:31] <Su-Shee> DBItti :)

[13:31] * moritz goes with DBIsh and DBDish for now

[13:32] <PerlJam> moritz: good idea ;)

[13:32] <tadzik> maybe DBIish, to be consistent?

[13:32] <moritz> erm, yes

[13:32] <masak> +1

[13:33] <arnsholt> DBJ and DBE? =)

[13:33] <moritz> I also considered 'MesoDBI', but "meso" is usually smaller than mini

[13:34] <PerlJam> mu?

[13:34] <Su-Shee> nanoDBI ;)

[13:34] <moritz> mu/micro and nano are also smaller than mini

[13:34] <moritz> and I didn't like CentiDBI or DeciDBI :-)

[13:34] <masak> CentiDBI -- but I suggested that already, and I kinda like DBIish :)

[13:34] <grondilu> How do I get a list of routines in a module?

[13:34] <masak> grondilu: a module only owns its "our"-scoped routines.

[13:35] <PerlJam> well, size isn't the important consideration anyway, it's the shift fomr perl5think to perl6think

[13:35] <masak> grondilu: but if you're fine with that, just access its stash with, hm, .WHO

[13:35] <PerlJam> s/fomr/from/  # weird

[13:35] <grondilu> r: use Test; say Test.WHO

[13:35] <p6eval> rakudo 256e1d: OUTPUT«().hash␤»

[13:35] <grondilu> r: use Test; say Test.WHO.keys

[13:35] <p6eval> rakudo 256e1d: OUTPUT«␤»

[13:36] <moritz> r: module A { our sub b() { } }; say A::.keys

[13:36] <p6eval> rakudo 256e1d: OUTPUT«&b␤»

[13:36] <moritz> r: module A { our sub b() { } }; say A.WHO.keys

[13:36] <p6eval> rakudo 256e1d: OUTPUT«&b␤»

[13:36] <grondilu> Isn't there a dummy module I could use to show you something about using modules?

[13:37] <grondilu> Oh ok using it like this will do

[13:37] *** JimmyZ joined
[13:37] <JimmyZ> DBI::Simple

[13:37] <grondilu> r: use DBI::Simple; say DBI::Simple.WHO.keys

[13:37] <p6eval> rakudo 256e1d: OUTPUT«===SORRY!===␤Could not find DBI::Simple in any of: /home/p6eval/.perl6/lib, /home/p6eval/nom-inst1/lib/parrot/4.3.0-devel/languages/perl6/lib, .␤»

[13:38] <tadzik> we have a tendency for naming our modules ::Simple, ::Tiny, Mini* and so

[13:38] <tadzik> and they often outgrow their names :)

[13:38] <JimmyZ> or DBI::easy :)

[13:38] <grondilu> r: use DBI::Simple; say ::Simple.WHO.keys

[13:38] <p6eval> rakudo 256e1d: OUTPUT«===SORRY!===␤Could not find DBI::Simple in any of: /home/p6eval/.perl6/lib, /home/p6eval/nom-inst1/lib/parrot/4.3.0-devel/languages/perl6/lib, .␤»

[13:38] <grondilu> I don't get it

[13:38] <moritz> JSON::Tiny is still as minimalistic as possible

[13:38] <moritz> grondilu: I don't think JimmyZ answered you

[13:38] <grondilu> r: use JSON::Tiny; say JSON::Tiny.WHO.keys

[13:38] <p6eval> rakudo 256e1d: OUTPUT«===SORRY!===␤Could not find JSON::Tiny in any of: /home/p6eval/.perl6/lib, /home/p6eval/nom-inst1/lib/parrot/4.3.0-devel/languages/perl6/lib, .␤»

[13:38] *** colomon left
[13:39] <moritz> str: use JSON::Tiny; say JSON::Tiny.WHO.keys

[13:39] <moritz> star: use JSON::Tiny; say JSON::Tiny.WHO.keys

[13:39] <p6eval> star 2012.04: OUTPUT«Actions Grammar␤»

[13:39] *** eviltwin_b joined
[13:39] <JimmyZ> DBI::Tiny ?

[13:40] <moritz> now, I'm building something bigger than MiniDBI

[13:40] <moritz> but Tiny < Mini

[13:40] <PerlJam> moritz: how is it bigger?

[13:40] <JimmyZ> I'm +1 to DBI::Simple 

[13:40] <JimmyZ> Simple version of DBI

[13:40] <tadzik> I don't think it's adequate

[13:41] <moritz> PerlJam: well, at least I don't want to limit myself to staying smaller than MiniDBI

[13:41] <tadzik> afaiu it won't neceserilly be simplier :)

[13:41] <moritz> tadzik is right

[13:41] <moritz> it's not about simpler, it's about more idiomatic

[13:41] <tadzik> IdioDBI? :P

[13:41] <PerlJam> moritz: Just call it DBI and let the future sort it out 

[13:42] <tadzik> PerlJam++

[13:42] *** geekosaur left
[13:42] <JimmyZ> +1 to PerlJam  too

[13:42] * moritz will think about it on his way home

[13:42] <masak> yeah, DBI is fine too.

[13:42] <JimmyZ> any way, we needs DBI

[13:43] <JimmyZ> or DBI::Link

[13:43] <tadzik> BDI: BataDase Interface

[13:44] <PerlJam> In a way, even the Perl5 DBI is misnamed.  It's not about interfacing to just /any/ database, but primarily relational databases.

[13:44] *** mathw_ is now known as mathw

[13:45] <arnsholt> To be fair, relational has been a pretty fair assumption until recently

[13:45] <PerlJam> fair assumption where?

[13:46] <grondilu> BTW is there anything for BerkeleyDB in Perl6?

[13:46] <arnsholt> I think there's a Berkeley module in core, been there forever IIRC

[13:47] <arnsholt> PerlJam: I've been assuming relational when people have talked about databases at least

[13:47] <arnsholt> I mean, the rise of key-value stores is pretty recent, and relational has been dominant since the fall of structured DBs sometime in the 70s

[13:48] <masak> grondilu: maybe there should be.

[13:48] <tadzik> grondilu: I don't think so

[13:48] <tadzik> grondilu: you can add it to Most Wanted list, or just write it yourself :)

[13:49] <masak> arnsholt: basically, Codd's idea was revolutionary and carried us all the way from the 70s until now.

[13:49] <PerlJam> arnsholt: key-value stores were around in the 1970s too, they were just much slower :)

[13:49] <masak> right, noSQL is nothing new, really. just the name is new and hot.

[13:49] <PerlJam> I think were in 2 round of history rpeating itself wrt databases

[13:49] <PerlJam> maybe round 3, but my memory isn't that long

[13:49] <masak> which is fine.

[13:49] <masak> people need to question the fundamentals sometimes.

[13:51] *** geekosaur joined
[13:52] <PerlJam> DBI sort of assumes an SQL abstraction.  Perl 6 has a good chance of making that very pluggable.

[13:54] *** eviltwin_b left
[13:55] <grondilu> also, isn't the distribution of rakudo-star kind of weird?   I mean, it's supposed to be a .tar.gz file, and yet once we untar it and do a "make", it still downloads the modules.  I don't have a regular internet access so this is not much convenient for me :(

[13:56] *** pernatiy_ left
[13:56] <masak> and you're talking to us... how? :P

[13:56] <tadzik> the worst thing about rakudo-star imho is the fact that you can't really make DESTDIR=foo install to package it nicely

[13:57] * grondilu is using a public internet access

[13:57] <jnthn> Huh, I thought the modules were included in the rakudo-star?

[13:57] <grondilu> doesn't seem so. 

[13:58] <grondilu> unless it is specific to 2012.04.1?

[13:58] <tadzik> I don't think so

[13:58] <masak> I'm a bit surprised at this too.

[13:59] *** pernatiy joined
[13:59] <masak> I thought the modules literally were packaged with Rakudo Star.

[13:59] <grondilu> Well, maybe I just missed something

[13:59] <jnthn> Yeah, the release cand I built yesterday has a modules directory with a bunch of modules

[14:00] <masak> oh phew

[14:01] <grondilu> ah ok.  What I did download was 'rakudo-star-c92df22.tar.gz'

[14:01] <grondilu> instead of 'rakudo-star-2012.04.tar.gz'

[14:01] <jnthn> Oh...as in, the contents of the star repo?

[14:01] <tadzik> oh, right

[14:01] *** colomon joined
[14:01] <jnthn> Yeah, the repo contains the things to build the relesae. 

[14:01] <tadzik> so apparently tagging did confuse users

[14:01] <colomon> OOOOO, I can haz internetz!

[14:02] <masak> today's autopun: https://www.google.com/search?q=zerg+rush

[14:03] <PerlJam> grondilu's difficulty is good evidence that star releases should *NOT* be tagged I think

[14:04] * colomon is watching his three-year-old get a tennis "lesson"

[14:07] <masak> ...by Syrio Forel! :D

[14:08] <[Coke]> PerlJam: I disagree.

[14:08] <[Coke]> how did grondilu find that tag?

[14:09] <[Coke]> he probably hit "download as tar.gz" - that button is always there.

[14:09] <grondilu> yes

[14:09] *** plutoid joined
[14:09] <masak> ah. [Coke]++

[14:09] <[Coke]> yah, rakudo-star-c92df22.tar.gz isn't a tagged copy, either. it's "whatever was master at the time."

[14:10] <[Coke]> I do note that rakudo-star-2012.04.tar.gz doesn't have a description.

[14:10] <[Coke]> that doesn't help.

[14:11] <grondilu> I just clicked the big button 'download as tar.gz' on github

[14:11] <[Coke]> yup, that's a github thing.

[14:13] <[Coke]> Probably worth opening  github ticket to see if we (or they) can add some explanatory text.

[14:13] *** daxim left
[14:13] <[Coke]> (or admin options to hide those buttons)

[14:13] *** nebuchadnezzar left
[14:14] *** nebuchadnezzar joined
[14:16] *** eviltwin_b joined
[14:16] <Juerd> moritz: Could you give an example of p6ized DBI calling?

[14:17] *** pernatiy left
[14:18] *** geekosaur left
[14:19] *** pernatiy joined
[14:21] <grondilu> I've just compiled rakudo and now I'm running 'make install' and it takes much longer than it used to.  Seems like it is retrieving some modules.  That's new.

[14:22] *** pernatiy left
[14:22] <grondilu> Ahhhh  ignore that ^

[14:22] *** pernatiy joined
[14:22] *** wtw left
[14:24] <moritz> Juerd: https://gist.github.com/2509680

[14:24] *** pernatiy left
[14:25] *** pernatiy joined
[14:25] <masak> \o/ # .fetchrow

[14:26] <masak> hm, when would I want to use the 'while' thingy rather than the 'for' thingy? :)

[14:26] <[Coke]> r: say (7**(e-1/e)-9)*pi**2 # jenny's constant xkcd++

[14:26] <p6eval> rakudo 256e1d: OUTPUT«867.530902863768␤»

[14:27] <colomon> wow, Niecza complains loudly about t/spec/S02-magicals/env.t

[14:27] <colomon> Insecure $ENV{PATH} while running with -t switch at t/fudgeandrun line 18.

[14:27] <colomon> oh, wait, that was a typo on my part

[14:27] <colomon> never mind

[14:27] <moritz> masak: if you don't exhaust the iterator, you might need to call .finish on the statement handle yourself

[14:28] <masak> [Coke]: I read that xkcd comic, but I have no idea what Jenny's constant is.

[14:28] <masak> moritz: ah, point.

[14:28] <PerlJam> masak: 8675309

[14:28] <moritz> masak: so if you abort earlier, you might like the while-version better

[14:29] <masak> oh, it's a song about a phone number. I see.

[14:29] <masak> moritz: the situation feels somewhat analogous to file IO.

[14:29] <masak> (where we use `for` in Perl 6)

[14:31] *** cognominal_ joined
[14:31] <masak> also, "[I've had enough of this 137 crap]" made me smile. :)

[14:31] *** colomon left
[14:33] <Juerd> moritz: That's nice but please consider having a look at DBIx::Simple's method names. A few things: "all" isn't necessarily true, as it only returns the *remaining* ones. And "fetch" is lame; duh, of course we're fetching; what else would we do? :)

[14:33] *** cognominal left
[14:34] <Juerd> moritz: With DBIx::Simple I just named the methods after whatever they return.

[14:34] *** replore left
[14:36] <PerlJam> grondilu: how did you get to the download button for rakudo-star?  What led you to the github repo in the first place?

[14:36] <masak> +1 on dropping 'fetch_'

[14:36] <masak> it's like feeling the need to call get methods .getSomething

[14:36] <PerlJam> [Coke]: I wonder if we shouldn't make a "project page" on github for R* and advertise that.

[14:38] <tadzik> ooooh, coool

[14:38] <tadzik> moritz++

[14:38] <tadzik> moritz: how about rows being a lazy list or such?

[14:39] <grondilu> PerlJam: I just went to http://github.com/rakudo/star/downloads with my web browser and clicked to the button

[14:39] <moritz> tadzik: that's dangerous

[14:39] *** eviltwin_b left
[14:39] <PerlJam> grondilu: and where did you get that URL from?  the announcement?

[14:39] <moritz> tadzik: because most C APIs progress row by row

[14:39] *** eviltwin_b joined
[14:39] <grondilu> PerlJam: sorry I don't remember

[14:40] <moritz> tadzik: and once you've progressed to the next row, you can't access columns from the previous one

[14:40] <grondilu> Yes I think it was in the announcement.

[14:40] <tadzik> I see

[14:40] <moritz> tadzik: so you need to fetch all columns from a row inside the driver just for safety

[14:40] <jnthn> Be careful with .rows

[14:41] <tadzik> aye

[14:41] <jnthn> .elems, .chars, .bytes etc all return *counts*.

[14:41] <tadzik> good point

[14:42] *** pernatiy left
[14:42] <jnthn> Agree "fetch" in the name feels like a kinda false minima though when it coems to naming.

[14:43] <[Coke]> so, if it's coming from the announcement, we can just give them the full url, not the /downloads one.

[14:45] <TimToady> the brain has at least two well-known but separate namespaces, one for nouns, and a different one for verbs

[14:46] <moritz> do all natural languages have the distinction between verbs and nouns?

[14:46] <PerlJam> with laziness, why not my @results = $stmt.execute(42);  # ?

[14:46] <TimToady> I believe so

[14:47] * jnthn tends to use noun-y names for methods for "I have this right to hand" and verby ones for "I'll have to do some work..."

[14:47] <moritz> PerlJam: hm, good question

[14:47] <huf> but it's fairly situational, we verb nouns and noun verbs all the time

[14:48] <moritz> PerlJam: which, of course, leads to the question if we can't unify it with prepare in a nice way, and get rid of the statement handle abstraction entirely

[14:49] <TimToady> but we know this because you get different kinds of aphasias depending on which part of the brain you damage

[14:49] <tadzik> well, there's .do()

[14:49] <TimToady> it's not something you derive by introspection

[14:50] <moritz> btw MiniDBI does have .rows, which returns the count of affected rows by the last statement

[14:50] *** pernatiy joined
[14:50] <moritz> which is usually interesting for things like INSERT, UPDATE or DELETE statements

[14:55] <PerlJam> does "my @foo = mumble" constrain the methods available on @foo?  i.e., could mumble return some object thingy that happens to do Positional, but also some other roles and would the methods of those other roles be preserved in @foo or would one need to use binding to keep them?

[14:55] <moritz> PerlJam: my @foo = ...; always coerces the LHS to an Array

[14:56] <moritz> you'd need binding for any other type

[14:56] <PerlJam> that's what I thought.

[14:56] <moritz> otherwise   my @foo = 1, 2, 3; would put a Parcel into @foo, which would then be immutable

[14:56] <jnthn> It's not that it coerces it, so much as it STOREs the RHS in the array container.

[14:57] <TimToady> the Latin alphabet can't even represent all the sounds of English, let alone other languages, hence all the digraphs in both consonant and vowel space

[14:57] *** grondilu left
[14:57] *** pernatiy left
[14:57] <PerlJam> I was just thinking about DBIish roles for result sets and how they would be applied or used if it were my @results = $stmt.execute(42)  

[14:57] <TimToady> though it's arguably a good 2-level-ish huffman coding

[14:59] <moritz> PerlJam: DBIx::Class has this mechanism that a ->search call returns an iterator in item context, and returns all elements in list context. They consider it a complete nightmare

[14:59] <moritz> PerlJam: I'd rather not repeat that kind of mistake

[14:59] <moritz> rather be a bit more explicit, than implicitly magical and backfiring

[14:59] * TimToady wants a shirt that says: "Professional driver on closed course. Do not attempt."

[15:00] <PerlJam> moritz: indeed.

[15:00] <TimToady> or maybe "Professional language designer on closed course.  Do not attempt." would be more appropriate :)

[15:00] *** GlitchMr42 joined
[15:01] *** geistteufel left
[15:01] <masak> :P

[15:02] * masak is impressed by the non-verbal teaching of verb forms over at http://en.wikipedia.org/wiki/File:Conjugaci%C3%B3n_de_correr.png

[15:02] *** pernatiy joined
[15:02] *** geistteufel joined
[15:02] <PerlJam> moritz: DBIish has a better substrate in Perl 6 than DBIx::Class does in Perl 5.  I mean, we get handy things like Parcels and Captures and Cursors from the language already  :)

[15:03] *** GlitchMr left
[15:04] <PerlJam> .oO( How many other people are resisting the Wizard of Oz reflex? )

[15:06] *** geistteufel left
[15:06] <[Coke]> on a closed spacetime loop.

[15:09] <TimToady> Do not redesign.

[15:10] <moritz> says the language redesigner :-)

[15:10] *** colomon joined
[15:10] <masak> "Professional language redesigner on a closed spacetime loop. Do not attempt."

[15:11] <PerlJam> masak: I don't understand what the time of day has to do with conjugation in those pictures  :)

[15:12] <moritz> PerlJam: it's supposed to show the tenses

[15:12] <moritz> morning = past, midday = present, evening = future

[15:13] <masak> PerlJam: the sun is up when the speaker tells the listener about the act. the positions of the sun and the moon then give clues as to whether the act described takes part in the past, present, or future.

[15:15] <jnthn> It would be neat if there was a language where you had to conjugate differently in the morning though.

[15:15] <jnthn> Maybe the morning conjugations are simpler, due to lack of coffee consumption, or something.

[15:15] <PerlJam> My trailing smiley was meant as a "deliberate nonunderstanding" marker

[15:15] <moritz> jnthn: there's this nice sketch from Loriot about a woman who learns for her yodel diploma

[15:16] <moritz> jnthn: and she has to learn the lyrics, and at some point she mixes up some words, and the teach says "no, that would be second future at dawn" :-)

[15:16] <jnthn> :)

[15:17] <masak> l'autopun: http://twitter.com/kazarnowicz/status/195880144899022848

[15:17] <moritz> http://www.youtube.com/watch?v=hG6RyQCggdI # German only, I'm afraid

[15:19] *** thou joined
[15:19] *** plutoid left
[15:19] <colomon> n: say 'aa' ~~ /:i aA/

[15:19] <p6eval> niecza v16-23-gaa61ed5: OUTPUT«#<match from(0) to(2) text(aa) pos([].list) named({}.hash)>␤»

[15:19] *** wolfman2000 left
[15:20] <colomon> n: my $a = 'aA'; say 'aa' ~~ /:i $a/

[15:20] <p6eval> niecza v16-23-gaa61ed5: OUTPUT«Match()␤»

[15:20] <colomon> n: my $a = 'aa'; say 'aa' ~~ /$a/

[15:20] <p6eval> niecza v16-23-gaa61ed5: OUTPUT«#<match from(0) to(2) text(aa) pos([].list) named({}.hash)>␤»

[15:21] *** pernatiy left
[15:21] <dalek> roast: 5be6e89 | (Solomon Foster)++ | S05-modifier/ignorecase.t:

[15:21] <dalek> roast: Fudge new test for Niecza.

[15:21] <dalek> roast: review: https://github.com/perl6/roast/commit/5be6e89e6a

[15:22] <PerlJam> moritz: where's the google translate button when you need it?!?

[15:23] * masak decommutes

[15:25] *** pernatiy joined
[15:28] *** allbery_b joined
[15:30] *** eviltwin_b left
[15:30] *** sergot joined
[15:30] <sergot> hi o/

[15:31] <moritz> \o sergot 

[15:32] *** fglock left
[15:35] <moritz> r: role R { has $.x }; class A does R { }; say A.new(x => 42).x

[15:35] <p6eval> rakudo 256e1d: OUTPUT«42␤»

[15:37] *** geekosaur joined
[15:40] *** allbery_b left
[15:48] *** Psyche^ joined
[15:48] *** Patterner left
[15:48] *** Psyche^ is now known as Patterner

[15:48] *** pernatiy left
[15:49] *** pernatiy joined
[15:51] *** pernatiy left
[15:51] *** fhelmberger left
[15:51] *** pernatiy joined
[15:53] *** pernatiy left
[15:54] *** pernatiy joined
[15:56] *** pernatiy left
[16:00] *** pernatiy joined
[16:04] *** JimmyZ left
[16:04] *** JimmyZ joined
[16:04] *** pernatiy left
[16:06] *** brrt joined
[16:07] <moritz> roles++

[16:08] *** FACEFOX left
[16:11] *** kst` is now known as kst

[16:13] *** FACEFOX joined
[16:14] *** fglock joined
[16:16] <moritz>  4 files changed, 19 insertions(+), 101 deletions(-)

[16:16] <moritz> I like such patches :-)

[16:17] *** thelazydeveloper joined
[16:18] *** Vlavv joined
[16:19] <moritz> oh dammit

[16:19] <moritz> I pushed to the wrong repo

[16:20] *** JimmyZ left
[16:20] <timotimo> no worries, you should have a reflog of it and can push -f

[16:21] <moritz> that's what I'm doing now

[16:21] <moritz> it's just what I usually try to avoid

[16:21] *** FACEFOX left
[16:22] <timotimo> be glad you're not on mercurial, doing such recoveries there is probably much, much messier

[16:22] <timotimo> i remember when i was told to just get a new clone of upstream to get rid of commits i made to the wrong branch

[16:25] *** FACEFOX joined
[16:29] *** jaldhar left
[16:34] *** FACEFOX left
[16:36] *** FACEFOX joined
[16:40] *** brrt left
[16:41] *** brrt joined
[16:42] *** sergot left
[16:42] *** tyatpi joined
[16:46] *** pmurias left
[16:51] <moritz> https://github.com/perl6/DBIish

[16:51] <fglock> perl is now in the "list of languages that compile to JavaScript": https://github.com/jashkenas/coffee-script/wiki/List-of-languages-that-compile-to-JS

[16:54] <moritz> \o/

[16:56] *** sftp joined
[16:58] *** cognominal___ joined
[17:01] *** cognominal_ left
[17:01] *** birdwindupbird left
[17:07] *** fgomez left
[17:08] *** erkan left
[17:09] *** fgomez joined
[17:12] *** erkan joined
[17:18] *** tyatpi left
[17:20] *** ggoebel__ left
[17:20] *** ggoebel__ joined
[17:21] *** brrt left
[17:22] *** erkan left
[17:22] *** lichtkind joined
[17:23] *** simcop2387 left
[17:24] *** simcop2387 joined
[17:28] *** tyatpi joined
[17:35] <[Coke]> fglock: "make" in the top level fails: 

[17:35] <[Coke]> find: `t5/*.t': No such file or directory

[17:36] <fglock> looking

[17:38] <fglock> [Coke]: the Makefile was added to test perl5-to-perl6 compilation, that doesn't work yet - see the instructions in "README-perlito5" instead

[17:38] <[Coke]> do you mean `find t5 -name "*.t"` ?

[17:40] <fglock> the tests are now in t5/*/*.t (because there are more tests)

[17:40] <fglock> this works if you build perlito5.js: prove -r -e 'node perlito5.js -I./src5/lib -Bjs' t5

[17:41] <fglock> build perlito5.js with this command: perl -Ilib5 perlito5.pl -I./src5/lib -Cjs src5/util/perlito5.pl > perlito5.js

[17:41] <[Coke]> the line in the readme has some failures, ala:

[17:41] <[Coke]> *** t5/01-perlito/24-strict.t

[17:41] <[Coke]> Can't locate object method "exp_stmts" via package "Perlito5::Grammar" (perhaps you forgot to load "Perlito5::Grammar"?) at x line 6.

[17:42] * [Coke] will play more later. danke.

[17:43] <dalek> tablets: f79d992 | (Herbert Breunung)++ | docs/appendix- (3 files):

[17:43] <dalek> tablets: undo silly dounle and triple rule for link names === is #equal-equal-equal again

[17:43] <dalek> tablets: review: https://github.com/perl6/tablets/commit/f79d992665

[17:43] <fglock> looking

[17:44] *** eviltwin_b joined
[17:44] <fglock> the README is wrong, fixing

[17:45] * masak home

[17:45] *** birdwindupbird joined
[17:47] *** geekosaur left
[17:50] *** birdwindupbird left
[17:51] <[Coke]> fglock: ok, now if I run that, I get a lot of output that looks like perl5, not TAP.

[17:52] <fglock> [Coke]: this seems to work: $ prove -r -e 'perl -Ilib5 perlito5.pl -I./src5/lib ' t5

[17:53] <fglock> note this is perl5-to-perl5; for perl5-to-js you need to compile perlito5.js

[17:53] <fglock> I'll update the README

[17:54] <[Coke]> fglock: I'm just cut and pasting the first line into the shell. the readme makes it sound like that runs tests.

[17:55] <fglock> (updated)

[17:55] <[Coke]> fglock: ah, much nicer, thanks!

[17:56] *** replore joined
[17:56] <[Coke]> fglock: https://gist.github.com/2511283 test failures, not sure if these are known.

[17:57] <fglock> yes, perl5-to-5 needs some fixing, the node.js backend works better atm

[17:58] <fglock> the "release" version should pass all tests, this is "dev"

[17:58] <fglock> but dev is more fun

[17:58] *** sivoais left
[17:59] <gfldex> am i doing something silly or is this a bug? https://gist.github.com/2511334

[18:00] <[Coke]> p6: https://gist.github.com/2511334

[18:00] <p6eval> rakudo 256e1d: OUTPUT«Too many positional parameters passed; got 1 but expected 0␤  in sub somesub at /tmp/HwMYepvlnl:3␤  in sub METAOP_HYPER_CALL at src/gen/CORE.setting:10701␤  in method postcircumfix:<( )> at /tmp/HwMYepvlnl:12␤  in <anon> at src/gen/BOOTSTRAP.pm:815␤  in any <anon> …

[18:00] <p6eval> ..niecza v16-23-gaa61ed5: OUTPUT«Potential difficulties:␤  Unsupported use of | with sigil; nowadays please use | without sigil at /tmp/LGI4MhkOWQ line 10:␤------> [32m   method postcircumfix:<( )>($self: |$c[33m⏏[31m) {[0m␤  $self is declared but not used at /tmp/LGI4MhkOWQ line 10:␤…

[18:00] <p6eval> ..pugs: OUTPUT«*** Cannot cast from VObject (MkObject {objType = (mkType "Foo"), objAttrs = <Hash:0xf6fdb119>, objOpaque = Nothing, objId = MkObjectId {unObjectId = 3}}) to VCode (VCode)␤    at /tmp/F3IP3ojSqA line 19, column 1-7␤»

[18:02] <gfldex> n: https://gist.github.com/2511366

[18:02] <p6eval> niecza v16-23-gaa61ed5: OUTPUT«Potential difficulties:␤  $self is declared but not used at /tmp/EndlV58oNV line 10:␤------> [32m        method postcircumfix:<( )>([33m⏏[31m$self: |c) {[0m␤␤i haz a sub␤»

[18:02] <gfldex> niecza++

[18:03] * gfldex files rakudobug

[18:06] *** erkan joined
[18:06] <timotimo> oooh, you can give gist urls, that's sweet!

[18:06] *** birdwindupbird joined
[18:07] *** simcop2387 left
[18:07] *** simcop2387 joined
[18:12] *** spaceships joined
[18:17] <masak> I think moritz++ implemented that.

[18:18] <diakopter> that was me

[18:19] <diakopter> originally, and the first fix iteration, at least.

[18:20] *** brrt joined
[18:21] <masak> diakopter++

[18:21] <masak> moritz can keep his karma point. he's probably done something I haven't ++'ed him for ;)

[18:24] <fglock> README-perlito5 should be correct now

[18:25] <fglock> masak++ # distributing good karma

[18:25] *** erkan left
[18:26] *** erkan joined
[18:26] *** erkan left
[18:26] *** erkan joined
[18:29] * masak read that as 'disturbingly good karma' :)

[18:29] <[Coke]> whyforno perlito dalek updates?

[18:31] *** GlitchMr42 left
[18:32] <fglock> [Coke]: do you want a commit bit? what is your github name?

[18:33] *** allbery_b joined
[18:35] <fglock> (added coke to Perlito)

[18:36] *** eviltwin_b left
[18:37] <moritz> fglock: do you want to have perlito commits announced in here?

[18:37] <moritz> fglock: if so, follow the instructions in https://github.com/perl6/mu/blob/master/misc/dalek-push.txt

[18:38] *** ggoebel__ left
[18:38] <fglock> you know it can be a bit off topic sometimes - perlito5 is about perl5, not perl6

[18:38] <moritz> I wouldn't mind

[18:38] <fglock> ok - I'll add it, you can remove later if it is too noisy

[18:39] *** ggoebel__ joined
[18:39] <dalek> rakudo/nom: dda5b09 | moritz++ | src/core/Mu.pm:

[18:39] <dalek> rakudo/nom: hide some dispatchers from backtraces

[18:39] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dda5b09563

[18:40] <fglock> moritz: want a commit bit? I seem to be in a commit bit mood today

[18:40] <moritz> fglock: yes, can't hurt :-)

[18:40] <moritz> (github username moritz)

[18:41] <[Coke]> fglock: Danke.

[18:41] <fglock> moritz: added

[18:41] <moritz> fglock: thanks

[18:41] *** allbery_b left
[18:41] *** Chillance joined
[18:41] <dalek> DBIish: 26983c0 | moritz++ | lib/DBDish/SQLite.pm6:

[18:41] <dalek> DBIish: [sqlite] implement disconnect method

[18:41] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/26983c083c

[18:42] <fglock> masak: I've added you to Perlito in github

[18:44] <dalek> Perlito: 059f9af | (Flavio S. Glock)++ | README-perlito5:

[18:44] <dalek> Perlito: Perlito5 - fix README instructions

[18:44] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/059f9aff02

[18:44] <dalek> Perlito: e518f94 | (Flavio S. Glock)++ | / (2 files):

[18:44] <dalek> Perlito: Perlito5 - fix README instructions; rebuild

[18:44] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/e518f94236

[18:44] <dalek> Perlito: 1e2d817 | (Flavio S. Glock)++ | README-perlito5:

[18:44] <dalek> Perlito: Perlito5 - move node.js README instructions up

[18:44] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/1e2d817323

[18:44] <fglock> yay

[18:45] <masak> fglock: hey, thanks! :)

[18:45] <masak> not sure I'll have lots of time to hack on it, but good to have a commitbit, I guess.

[18:47] <fglock> all tuits are round

[18:49] *** ggoebel__ left
[18:50] *** ggoebel__ joined
[18:51] <dalek> DBIish: ecdc343 | moritz++ | lib/DBDish (2 files):

[18:51] <dalek> DBIish: [Pg] make fetching of hashes a "bit" simpler

[18:51] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/ecdc343fb2

[18:51] <moritz> this commit illustrates how much more mature and usable rakudo is today

[18:51] <moritz> compared to what mberends++ and friends had to write some years ago

[18:52] *** pernatiy joined
[18:54] *** Khisanth left
[18:55] <dalek> DBIish: 37d1e6e | moritz++ | / (2 files):

[18:55] <dalek> DBIish: update credits

[18:55] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/37d1e6e0da

[18:56] <sorear> good * #perl6

[18:56] *** mucker joined
[18:57] <moritz> \o sorear 

[18:57] <fglock> o/

[18:59] <fglock> sorear: I've added you to Perlito in github

[19:01] *** ggoebel__ left
[19:03] *** ggoebel__ joined
[19:04] *** mucker left
[19:05] <sorear> fglock: hmm?  why>

[19:05] <moritz> fishing for contributors :-)

[19:05] *** brrt left
[19:05] <PerlJam> sorear: because you're *Awesome*.   :)

[19:06] <dalek> Perlito: 7a5d100 | (Flavio S. Glock)++ | TODO-perlito5:

[19:06] <dalek> Perlito: Perlito5 - perl5: document emitter bug (significant parenthesis)

[19:06] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/7a5d100236

[19:07] <fglock> PerlJam: want a commit bit?

[19:07] *** ggoebel__ left
[19:07] <fglock> sorear: because it's fun

[19:07] *** ggoebel__ joined
[19:07] <PerlJam> fglock: when I'm ready to actually contribute, sure.

[19:08] <PerlJam> fglock: you could give me one right now, but I don't think I'd use it much (or at all)

[19:08] <fglock> I think there are some cool things that could be done, I don't have time to do everything I'd like

[19:08] *** brrt joined
[19:08] *** Khisanth joined
[19:10] <fglock> PerlJam: I can't see you in github, what is your name there?

[19:12] <PerlJam> fglock: perlpilot

[19:13] <fglock> done :)

[19:13] *** erkan left
[19:16] *** ggoebel__ left
[19:16] *** LylePerl joined
[19:18] *** ggoebel__ joined
[19:27] <dalek> Perlito: f642820 | (Flavio S. Glock)++ | / (5 files):

[19:27] <dalek> Perlito: Perlito5 - perl5: fix 2 tests

[19:27] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/f642820cbd

[19:28] *** bluescreen10 left
[19:30] *** envi_ left
[19:36] <dalek> DBIish: c64574a | moritz++ | / (4 files):

[19:36] <dalek> DBIish: Add fetchrow-AoH, fetchrow-HoA and mock-test them

[19:36] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/c64574ab0a

[19:37] <masak> names in commit comment don't match names in patch.

[19:38] <masak> also, there's gotta be more memorable names than that :P

[19:38] <masak> why not just fetchall-arrays and fetchall-hashes?

[19:44] <moritz> what would 'fetchall-hashes' return?

[19:44] <jnthn> .oO( .all-the-hashes )

[19:44] <moritz> an array of hashes? or a hash of arrays?

[19:45] <masak> .fetchall-as-hash?

[19:45] <masak> I just think HoA looks unsightly.

[19:45] <moritz> yes, but what would .fetchall-as-hash return?

[19:47] <masak> a hash.

[19:49] *** tyatpi left
[19:49] *** xinming_ joined
[19:50] *** LylePerl left
[19:52] *** xinming left
[19:55] <dalek> DBIish: 1499f8d | moritz++ | / (2 files):

[19:55] <dalek> DBIish: rename methods, masak++

[19:55] <dalek> DBIish: 

[19:55] <dalek> DBIish: they are now called fetchall-array and fetchall-hash

[19:55] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/1499f8d030

[19:55] <masak> \o/

[19:57] <fglock> jnthn: do you want a commit bit for Perlito?

[19:58] <masak> what, you ask him but not the rest of us? :P

[19:58] <[Coke]> masak: please, you know you just file bug reports, anyway.

[19:59] <masak> granted.

[20:00] <masak> fglock: so, assuming I find one or two bugs in Perlito... where do I send my spam^Wreports?

[20:01] <jnthn> fglock: Can't promise I'll find particularly many tuits to contribute to it, but sure, can't hurt to have one. 

[20:02] <fglock> masak: because you already have one commit bit (I'm only giving one commit bit, if you want more you have to do it yourself)

[20:03] <masak> fglock: I was kidding. but you gave all the rest of us commit bits without asking... :P

[20:03] <fglock> jnthn: done

[20:03] <jnthn> fglock: Thanks :)

[20:03] <fglock> I thought it was more polite to ask first :P

[20:07] <fglock> masak: I usually add the bugs to TODO-perlito5

[20:08] <masak> how... manual. :)

[20:09] <fglock> yes, very low-tech

[20:13] <fglock> this makes it easier to group problems together and helps minimize the special cases

[20:13] <masak> inneresting.

[20:14] <fglock> special cases make the code big - not good for the browser

[20:17] <masak> well, in here people seem concerned about not duplicating code paths, but not about code size per se.

[20:19] <moritz> well, I am :-)

[20:19] <masak> well, the perennial question is "why don't you, like, split the setting into multiple parts?"

[20:19] <masak> that's implicitly about code size, I guess.

[20:23] <moritz> anyway, I love roles.

[20:24] <timotimo> understandably

[20:24] *** uvtc joined
[20:26] *** bruges_ joined
[20:28] *** bruges left
[20:28] *** birdwindupbird left
[20:28] <uvtc> Just built R* 2012.04. Runs scripts faster than before. Quick startup.

[20:29] <timotimo> is that the startup bonus from the bs branch or even more awesome optimisations?

[20:30] <uvtc> Not familiar with the "bs" branch.

[20:32] <timotimo> "bounded serialisation", it moved lots of startup time to the compile time of the interpreter itself by implementing serialisation of some bounded sort

[20:32] <jnthn> Startup time improvements came from the "bs" work, for sure.

[20:33] <jnthn> We still have room for improvement.

[20:33] <jnthn> fwiw, it actually cut down compile time of CORE.setting as well as improving startup time.

[20:33] <jnthn> So it was a win both for pre-compilation performance and startup performance.

[20:35] <uvtc> For some reason the R* README doesn't mention that you need git installed to build R*. (BTW, on older Debian-based distros it was the "git-core" package. Now the package is just named "git".)

[20:38] <uvtc> Ah. Yes. I brought up something related 17 days ago. It used to say subversion was a requirement. tadzik++ removed it, but "git" was not added to take its place.

[20:40] <moritz> uvtc: I haven't forgotton about your proposal to reduce the output from the build; just haven't got aound to it

[20:41] <uvtc> moritz, Cool. Thanks. I didn't want to ask you about it, because I can see things have been busy with the R* release, and also I think I saw that you're working at a breakneck page to get sqlite working. :)

[20:41] <uvtc> s/page/pace/

[20:42] <moritz> uvtc: arnsholt++ does all the heavy work for calling C functions, I just throw examples at him that don't work :-)

[20:44] <uvtc> If I want to make a minor tweak to github.com/rakudo/star and then submit a pull-request for it, should I create a branch for that, or just make my changes to master?

[20:45] *** geistteufel joined
[20:46] <moritz> uvtc: a branch is generally safer

[20:46] <uvtc> Whoops, sorry, nm, found https://github.com/rakudo/rakudo/wiki/Frew%27s-Recommended-Workflow

[20:46] <uvtc> (which recommends creating a separate branch)

[20:53] <lichtkind> uvtc: cheers

[20:53] <uvtc> lichtkind, hi

[20:54] <lichtkind> uvtc: seen recent changes?

[20:55] <uvtc> lichtkind, Yes, lots of commits. I haven't been reading the Tablets recently though. Oh, I wanted to ask you: if I have a "term" I'd like added to the glossary, should I create an issue for that?

[20:57] <lichtkind> uvtc: why no just insert it rightaway, which is it?

[20:57] <lichtkind> uvtc: i added also lots where now by roughly 80, not all answered

[20:57] <uvtc> lichtkind, "reify"

[20:58] <uvtc> lichtkind, Oh, I see. You've got some terms in there without a definition.

[21:00] <lichtkind> uvtc: thats what i ment with not answered

[21:00] *** skids left
[21:01] <lichtkind> uvtc: but i filled in just yesterday 5, were getting there

[21:01] <lichtkind> uvtc: and to reify i read that often but dont have slightest clue

[21:01] *** erkan joined
[21:01] *** erkan left
[21:01] *** erkan joined
[21:02] <uvtc> If only this channel had a resident linguist...

[21:02] <lichtkind> uvtc: more important that lot of commits i have now clear picture what i want to have where and how to format things also made friends with markdown

[21:02] <uvtc> lichtkind, nice. :)

[21:02] <lichtkind> uvtc: his name is larry

[21:03] <uvtc> lichtkind, I know. Should've added a `;)`.

[21:04] <lichtkind> uvtc: so will you add it?

[21:08] <dalek> tablets: 415a004 | (John Gabriele)++ | docs/appendix-g-glossary.txt:

[21:08] <dalek> tablets: added "reify" to glossary

[21:08] <dalek> tablets: review: https://github.com/perl6/tablets/commit/415a004929

[21:11] <lichtkind> uvtc: good you want to titlecase terms?

[21:12] *** thou left
[21:12] *** brrt left
[21:12] <uvtc> lichtkind, Oh shoot. Sorry, no. I saw "Regex" capitalized, and thought that was your convention. No, I prefer lowercase. Will fix both.

[21:13] <dalek> tablets: c18b563 | (John Gabriele)++ | docs/appendix-g-glossary.txt:

[21:13] <dalek> tablets: whoops - switch to lowercase

[21:13] <dalek> tablets: review: https://github.com/perl6/tablets/commit/c18b5636bf

[21:14] <lichtkind> uvtc: its fine i can fix it i just ask how we set rule

[21:14] <lichtkind> one of the few thins im not decided

[21:14] *** fglock left
[21:14] <lichtkind> because officially in english names are uppercase

[21:14] <lichtkind> question is what we count as name

[21:16] <uvtc> lichtkind, only proper nouns (like particular names of people, places, and things) get capitalized.

[21:20] <lichtkind> uvtc: but is regex a name of a thing?

[21:21] <jnthn> There's a type called Regex.

[21:21] <jnthn> If you specifically mean that type name, Regex is probably right.

[21:21] <jnthn> If talking about them in general, "regex"

[21:23] <masak> yes. we do the same for 'Str' and 'string', 'Int' and 'integer', 'Block' and 'block'...

[21:23] <moritz> but when you meet mr. Regex, be sure to capitalize him properly

[21:24] <uvtc> Ok, hope I did this correctly. Added a pull-request to rakudo/star.

[21:24] *** fgomez left
[21:25] <lichtkind> jnthn: the type we spelled of course uc it was just about the term

[21:25] <jnthn> moritz: Becuase if you don't, you get capital punishment?

[21:25] <lichtkind> uvtc: it looks good

[21:25] <uvtc> Gotsta go. o/

[21:25] <lichtkind> hahah

[21:26] *** uvtc left
[21:29] *** FACEFOX left
[21:29] *** FACEFOX joined
[21:29] *** FACEFOX left
[21:30] *** FACEFOX joined
[21:30] *** FACEFOX left
[21:31] *** Chillance left
[21:31] *** Chillance joined
[21:34] *** FACEFOX joined
[21:34] *** erkan left
[21:35] <[Coke]> (star, git) git is only required if you're creating a star release, not if you're a user, no?

[21:35] <timotimo> don't you need it to check out parrot and nqp or something?

[21:36] <lichtkind> rakudo doesnt know "\a"

[21:36] *** geekosaur joined
[21:37] <masak> that rings a bell...

[21:37] <timotimo> i don't think it does

[21:37] <masak> lichtkind: if the spec doesn't mention "\a", its silence could be taken as "do like Perl 5 does", i.e. support "\a".

[21:38] <masak> 'night, #perl6

[21:40] *** FACEFOX left
[21:41] <lichtkind> good night

[21:41] *** FACEFOX joined
[21:41] <lichtkind> masak last time i checked spec had \a

[21:44] <[Coke]> looks like rakudo-2012.04.1/ (star) contains a copy of parrot.

[21:45] <[Coke]> has all of:

[21:45] <[Coke]> nqp-2012.04.1		parrot-4.3.0		rakudo-2012.04.1

[21:45] *** erkan joined
[21:45] *** erkan left
[21:45] *** erkan joined
[21:45] *** fgomez joined
[21:47] *** eviltwin_b joined
[21:48] *** geekosaur left
[22:07] *** replor___ joined
[22:09] *** replore left
[22:10] *** envi_ joined
[22:21] <lichtkind> TimToady: is \in "" and regex the same?

[22:22] <dalek> tablets: 9082169 | (Herbert Breunung)++ | docs/appendix-a-index.txt:

[22:22] <dalek> tablets: hope to make more sense of escape seqences

[22:22] <dalek> tablets: review: https://github.com/perl6/tablets/commit/9082169c3f

[22:22] <jnthn> lichtkind: You mean, do they use the same escape sequences?

[22:22] <lichtkind> TimToady: sorry i mant backsalsh n

[22:22] <jnthn> oh :)

[22:23] <lichtkind> ma chat client ate that i suppose

[22:23] <lichtkind> \n

[22:23] <lichtkind> no my fault

[22:24] *** allbery_b joined
[22:27] *** eviltwin_b left
[22:27] *** geekosaur joined
[22:28] *** oiig_ joined
[22:29] <jnthn> lichtkind: I suspect the difference may be that \n in a string has to commit to what it emits (platform wise)

[22:29] <jnthn> Whereas \n in a regex may match various options.

[22:29] <jnthn> I guess S05 has some language on exactly what \n does in regexes.

[22:29] *** allbery_b left
[22:30] <lichtkind> jnthn: im currently reading s05 but its a bit confusing

[22:30] <jnthn> yeah, here

[22:30] <jnthn> C<\n> now matches a logical (platform independent) newline, not just C<\x0a>.

[22:30] <jnthn> See TR18 section 1.6 for a list of logical newlines.

[22:30] <lichtkind> jnthn: this im currently reading too

[22:30] *** eviltwin_b joined
[22:30] <lichtkind> just added confusion :)

[22:31] <jnthn> lichtkind: http://unicode.org/reports/tr18/tr18-14.html#Line_Boundaries

[22:32] <jnthn> I wonder if we should consider \r\n as a single grapheme under NFG...

[22:33] <lichtkind> jnthn: had the page, the content is the problem :)

[22:33] *** allbery_b joined
[22:34] <jnthn> ;-)

[22:34] <jnthn> lichtkind: Try more beer.

[22:34] *** geekosaur left
[22:34] <lichtkind> jnthn: i had just a mouth full and thats anough, im currently und wheat grass juice - very healthy

[22:35] <[Coke]> rakudo star buglet - "make rakudo-spectest" tries to run git pull on the exported t/spec

[22:36] <[Coke]> jnthn: I am trying "shock top lemon shandy".

[22:36] *** eviltwin_b left
[22:36] *** eviltwin_b joined
[22:38] *** eviltwin_b left
[22:38] *** geekosaur joined
[22:39] *** cognominal_ joined
[22:39] *** allbery_b left
[22:41] <jnthn> [Coke]: Please file an issue for the buglet, if you have chance.

[22:41] * jnthn -> sleep, given I got none at all last night...

[22:42] *** cognominal___ left
[22:44] <[Coke]> jnthn: star doesn't accept issues. rakudobug it?

[22:44] <sorear> colomon: around?

[22:44] <colomon> yes

[22:45] <colomon> what's up?

[22:45] <sorear> what do people expect fail to do

[22:45] <dalek> tablets: 5841485 | (Herbert Breunung)++ | docs/appendix-a-index.txt:

[22:45] <dalek> tablets: clearify tilde op

[22:45] <dalek> tablets: review: https://github.com/perl6/tablets/commit/5841485930

[22:46] <colomon> sorear: honestly, I'm completely unclear on what it does differently from die, in practical terms.

[22:46] <colomon> give me a second to dig up source

[22:46] *** whiteknight joined
[22:46] <dalek> Perlito: 26ef33e | coke++ | README:

[22:46] <dalek> Perlito: fix grammar-o

[22:46] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/26ef33eef4

[22:47] <colomon> things like 

[22:47] <colomon>             fail if !@lines;

[22:47] <colomon> (that's Damian's code)

[22:48] <[Coke]> jnthn: done.

[22:48] <sorear> I think the idea of fail is that it's supposed to allow parallel operations to continue as if nothing happened, so that your hyper-maps can run to competion and return meaningless results

[22:49] <colomon> sorear: naive understanding of it is it is basically shorthand for

[22:49] <colomon>     return Failure "blah"

[22:50] *** mtk left
[22:51] <sorear> colomon: failure is a very magical type which does a number of mutually contradictory things

[22:51] <colomon> sorear: I don't doubt it.

[22:51] <sorear> which subset of the contradictory things do perl 6 programmers rely on?

[22:51] <colomon> but     die "blah"     can by caught by CATCH, right?

[22:51] <[Coke]> rakudo star spectest failures: 

[22:51] <[Coke]> https://gist.github.com/b44a0719b290f5a8ec16

[22:52] <sorear> does it have to die in void context, for instance?

[22:52] <sorear> what about in void context in lists?

[22:52] <sorear> I'm extremely uneasy about the "void context eagerizes lists" thing

[22:53] <colomon> that does sound... disturbing.

[22:54] <colomon> probably the smartest thing to do would be for me to ask the European gang how they are using fail in the morning while you're asleep.

[22:55] *** NamelessTee left
[22:55] <colomon> sorear: gotta run, bedtime for the little guy

[23:02] *** eviltwin_b joined
[23:03] *** oiig_ left
[23:05] *** geekosaur left
[23:12] *** allbery_b joined
[23:16] *** eviltwin_b left
[23:18] <dalek> tablets: a6d3f7d | (Herbert Breunung)++ | docs/appendix- (3 files):

[23:18] <dalek> tablets: add backlinks

[23:18] <dalek> tablets: review: https://github.com/perl6/tablets/commit/a6d3f7dacf

[23:21] *** geekosaur joined
[23:25] *** allbery_b left
[23:29] *** eviltwin_b joined
[23:30] *** PacoAir left
[23:32] *** geekosaur left
[23:34] <colomon> sorear: I'm back

[23:40] <dalek> tablets: 3c8fc76 | (Herbert Breunung)++ | docs/appendix- (2 files):

[23:40] <dalek> tablets: added match object methods

[23:40] <dalek> tablets: review: https://github.com/perl6/tablets/commit/3c8fc7632c

[23:42] <colomon> sorear: actually, looking at fail.t is giving me a headache.

[23:43] <colomon> Actually, it looks exactly like it was written by different people with a different understanding of how fail is supposed to work.  :)

[23:44] <colomon> or at least, a different understanding that Damian and I have.

[23:44] <colomon> for instance:

[23:44] <colomon>     my $exception = fail 42;

[23:44] <colomon>     fail()

[23:44] <colomon>     return fail()

[23:45] <colomon>             fail if !@lines;

[23:45] <colomon>     fail AnEx.new

[23:45] <timotimo> yikes

[23:45] <colomon> (where AnEx is Exception)

[23:45] <colomon>     fail('foo')

[23:50] *** geekosaur joined
[23:52] <dalek> tablets: ccd894a | (Herbert Breunung)++ | docs/styles.css:

[23:52] <dalek> tablets: minor text color tweak

[23:52] <dalek> tablets: review: https://github.com/perl6/tablets/commit/ccd894ae3b

[23:52] *** lestrrat left
[23:52] *** eviltwin_b left
[23:53] *** lestrrat joined
