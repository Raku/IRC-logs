[00:01] *** tokuhiro_ left
[00:15] *** Krunch left
[00:15] *** Krunch joined
[00:17] *** Chillance left
[00:23] *** tokuhiro_ joined
[00:28] *** Krunch left
[00:28] *** Krunch joined
[00:32] *** sftp_ left
[00:38] *** raiph left
[00:45] *** dayangkun joined
[00:52] *** fgomez left
[00:55] *** dayangkun_ joined
[00:56] *** dayangkun_ left
[00:56] *** dayangkun left
[00:56] *** tokuhiro_ left
[00:57] *** am0c joined
[01:01] *** anuby joined
[01:07] *** hypolin joined
[01:18] *** am0c left
[01:19] *** am0c_ joined
[01:24] *** atrodo left
[01:27] *** cognominal left
[01:36] *** shinobicl joined
[01:43] *** bowtie left
[01:46] *** am0c_ is now known as am0c

[01:46] *** benabik left
[01:58] *** grondilu left
[02:09] *** benabik joined
[02:17] *** Gothmog_ joined
[02:23] *** am0c_ joined
[02:23] *** am0c left
[02:24] *** am0c_ is now known as am0c

[02:25] *** fgomez joined
[02:41] *** sftp_ joined
[02:41] *** Zachary joined
[02:41] *** Zachary is now known as Guest58684

[02:44] *** anuby left
[02:49] *** anuby joined
[02:52] *** sftp_ left
[02:55] <Guest58684> should <alpha> match greek letters?

[02:59] <sorear> it should, yes

[03:00] <Guest58684> does it depend on ICU?

[03:00] <sorear> rn: say ?( "α" ~~ /<alpha>/ )

[03:00] <sorear> yes, you need ICU

[03:00] <p6eval> rakudo c82d10, niecza v22-32-gee5dcf1: OUTPUT«True␤»

[03:00] <Guest58684> ok.

[03:00] <sorear> looks like there is agreement

[03:04] *** anuby left
[03:05] *** sftp_ joined
[03:06] *** anuby joined
[03:07] *** gootle joined
[03:11] *** jaldhar joined
[03:23] *** jaldhar left
[03:25] *** fgomez left
[03:26] *** fgomez joined
[03:27] *** jaldhar joined
[03:36] *** BillySeth is now known as BillySeth|bbl

[03:54] *** orafu left
[03:54] *** orafu joined
[04:09] *** Guest58684 left
[04:21] *** sftp_ left
[04:22] *** sftp_ joined
[04:29] *** BillySeth|bbl is now known as BillySeth

[04:34] <shinobicl> hi

[04:34] <shinobicl> what do you usually use to debug your perl6 programs?

[04:46] *** Guest58684 joined
[04:50] *** skids left
[04:55] <shinobicl> how do i exit from a "for"?

[04:57] <shinobicl> r: for (1..10) -> $val{ if ($val == 3) { say "(found 3!.... exiting.)"; } else { say "-"} } 

[04:57] <p6eval> rakudo c82d10: OUTPUT«-␤-␤(found 3!.... exiting.)␤-␤-␤-␤-␤-␤-␤-␤»

[04:57] <shinobicl> r: for (1..10) -> $val{ if ($val == 3) { say "(found 3!.... exiting.)"; break; } else { say "-"} } 

[04:57] <p6eval> rakudo c82d10: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&break' called (line 1)␤»

[04:57] <doy> r: for (1..10) -> $val{ if ($val == 3) { say "(found 3!.... exiting.)"; last; } else { say "-"} }

[04:58] <p6eval> rakudo c82d10: OUTPUT«-␤-␤(found 3!.... exiting.)␤»

[04:58] <shinobicl> "last" it was.. thanks!

[04:59] <doy> and there's a debugger here https://github.com/jnthn/rakudo-debugger

[05:02] <sorear> shinobicl: I mostly use print statements because I'm not cool enough for the debugger

[05:02] *** mtymula left
[05:04] *** xinming_ left
[05:05] *** xinming joined
[05:14] <shinobicl> r: my $x = -1; try { warn "Bad data" if $x < 0; CONTROL { say "x is now 0"; $x = 0 } }; say $x;

[05:14] <p6eval> rakudo c82d10: OUTPUT«x is now 0␤Bad data  in block  at /tmp/vjUP4tk9x3:1␤␤0␤»

[05:15] <shinobicl> i have a very similar structure in a module i wrote... but the "CONTROL" part is never reached...

[05:15] <shinobicl> the difference is that the "warn" is inside a "for" loop

[05:22] <shinobicl> r: my @data = <A B E D>; try { for (@data) -> $val { if ($val ne any(<A B C D>)) { warn "wrong char. assuming defaults"; last; }} CONTROL{ @data = <A B C D>; }};say @data.perl;

[05:22] <p6eval> rakudo c82d10: OUTPUT«===SORRY!===␤Unable to parse expression in block; couldn't find final '}' at line 2, near "for (@data"␤»

[05:22] *** jeffreykegler joined
[05:23] *** telex left
[05:29] <shinobicl> r: my @data = <A B E D>;try { for @data -> $val { if ($val ne any(<A B C D>)) { warn "wrong char. assuming defaults"; last; }; }; CONTROL{ @data = <A B C D>};}; say @data.perl;

[05:29] <p6eval> rakudo c82d10: OUTPUT«wrong char. assuming defaults  in block  at /tmp/WciqV8ylOR:1␤␤Array.new("A", "B", "C", "D")␤»

[05:30] <shinobicl> this same logic does not work inside a module :S

[05:30] <shinobicl> anyway, it's late.. good night everyone!

[05:30] *** shinobicl left
[05:36] *** telex joined
[05:49] *** am0c left
[05:50] *** jeffreykegler left
[06:04] *** xdbr left
[06:07] *** sorenso joined
[06:09] *** Guest58684 left
[06:10] *** kaleem joined
[06:22] *** birdwindupbird joined
[06:29] *** GlitchMr joined
[06:31] *** kurahaupo left
[06:31] *** BillySeth is now known as BillySleep

[06:39] *** sorenso left
[06:59] *** SHODAN left
[07:00] *** SHODAN joined
[07:02] *** sftp_ left
[07:02] *** sftp_ joined
[07:09] *** Guest58684 joined
[07:15] *** _jaldhar joined
[07:15] *** jaldhar left
[07:18] *** GlitchMr left
[07:25] *** am0c joined
[07:27] *** flightrecorder joined
[07:33] *** FROGGS joined
[07:43] *** domidumont joined
[07:44] *** SamuraiJack joined
[07:46] *** Guest58684 left
[08:09] *** brrt joined
[08:12] *** domidumont left
[08:13] *** awwaiid left
[08:13] *** domidumont joined
[08:16] *** Guest58684 joined
[08:17] *** circlepuller left
[08:22] *** fhelmberger joined
[08:22] *** am0c left
[08:23] *** circlepuller joined
[08:23] *** circlepuller left
[08:23] *** jlaire left
[08:23] *** circlepuller joined
[08:23] *** circlepuller left
[08:24] *** circlepuller joined
[08:29] *** jlaire joined
[08:30] *** sorenso joined
[08:32] *** brrt left
[08:32] *** brrt joined
[08:35] *** Su-Shee joined
[08:35] <Su-Shee> good morning everyone.. 

[08:35] <moritz> \o

[08:35] <Su-Shee> do I want star or the monthly release?

[08:37] <moritz> star

[08:37] <moritz> that's monthly release + debugger + modules

[08:37] <Su-Shee> yeah I know, I was asking more along the lines of "monthly is a little experimental these days because we added..." :)

[08:38] <Su-Shee> ok, I'm just greedy for the bleeding edge. :)

[08:40] <nwc10> surely, if you want the bleeding edge you go for git://github.com/rakudo/rakudo.git ?

[08:41] *** [hds] joined
[08:42] *** [hds] left
[08:43] *** [hds] joined
[08:45] <sorear> good morning Su-Shee

[08:46] <sorear> moritz: is the categorical rewrite in a star yet?

[08:46] <sorear> good morning nwc10 too :D

[08:46] <sorear> good to see you about

[08:47] <sorear> hopefully soon niecza will have a bleeding edge again

[08:47] <moritz> Su-Shee: star is no less experimental than the compiler release :-)

[08:48] <moritz> sorear: no, categorical rewrite is only in git right now

[08:48] <sorear> what's the opposite of experimental?  dogmatic?

[08:48] <sorear> theoretical?

[08:49] <nwc10> "special biologist word" ?

[08:49] <Su-Shee> orthodox :)

[08:49] <moritz> conservative

[08:49] <brrt> what moritz says

[08:49] <sorear> .oO( Perl6 is experimental.  It stopped being theoretical *years* ago. )

[08:49] * sorear is thinking physics

[08:50] <brrt> applied!

[08:52] *** [hds] left
[08:53] *** wamba joined
[09:00] *** kresike joined
[09:00] <kresike> hello all you happy perl6 people

[09:00] <brrt> hi kresike

[09:01] <kresike> brrt, o/

[09:11] <jnthn> mornin' o/

[09:16] <nwc10> jnthn: in multidispatch.c, I can't see anything that ever frees the memory allocated for Rakudo_md_cache *cache in Rakudo_md_candidate_info

[09:19] <jnthn> The cache isn't referenced from Rakudo_md_candidate_info, no?

[09:20] * jnthn looks

[09:21] <jnthn> No, it hangs off Rakudo_Code's dispatcher_cache slot, via a level of indirection.

[09:21] <nwc10> it returns cache->candidates, which (as best I can work out) is owned by that structure

[09:21] <nwc10> but it will leak if the owner PMC is ever freed?

[09:23] <jnthn> Yes, looks like.

[09:23] <sorear> heya, jnthn 

[09:23] <jnthn> OTOH, most multis live "forever".

[09:23] <jnthn> o/ sorear 

[09:24] <nwc10> the code for sorting is only tightly coupled with the code for adding to the cache via the structure  Rakudo_md_candidate_info

[09:25] <nwc10> Rakudo_md_candidate_info.constraints appears not be used once sorting is done.

[09:26] <jnthn> Correct.

[09:26] <nwc10> so, potentially, sort code that returned a massive flat list of PMCs could be called, and the caller process that flat list into the existing structure.

[09:27] <jnthn> Once, a while ago, the multi-dispatcher did use that list of candidates at dispatch time.

[09:28] <jnthn> Now just bind_check matters

[09:28] <jnthn> One important detail on data structure is that the list of candidates is terminated by two NULLs, with an inner NULL delimiting a group of candidates that are equally narrow.

[09:28] <nwc10> I see accesses to all structure members except constraints in the rest of the code

[09:29] <jnthn> Yeah. It could be moved into Rakudo_md_candidate_graph_node if it's only used in the sort.

[09:30] <nwc10> aha. good plan. I'd not thought of doing it like that.

[09:35] *** am0c joined
[09:46] <FROGGS> for the rakudo release: should I update it to use parrot 4.9.0 or should I stay at 4.4.0?

[09:47] <FROGGS> (I guess I know the answer already)

[09:48] <bonsaikitten> FROGGS: both should work, I prefer new things as they have usually more bugfixes than regressions

[09:49] <FROGGS> hmmm, I remember this IO-rewrite they did in parrot that made some trouble. I thought that we use 4.4.0 because that is right before these changes...

[09:50] <bonsaikitten> yes, that sounds familiar

[09:51] <FROGGS> and since I dont know how to test if these problems still exist...

[09:51] <brrt> iirc, they had to do with readline not being nice

[09:51] <brrt> if we don't have tests for that it is un-awesomeness from all sides

[09:53] *** dakkar joined
[09:58] <jnthn> Yes, it was IO-rewrite related

[09:58] <nwc10> you'd be best asing Pm, I think. But I think it's issues https://github.com/parrot/parrot/issues/860 (now closed) and https://github.com/parrot/parrot/issues/847 (still open)

[09:59] <jnthn> Ah

[09:59] <jnthn> If there's tickets still open then that answers the question, I think.

[09:59] *** domidumont left
[10:00] <FROGGS> ya, and I have a testcase now to prove ;o)

[10:00] <FROGGS> thank you all ;o)

[10:00] <nwc10> jnthn: but from skimming #847 it's not clear to me whether it's closeable yet

[10:01] <jnthn> nwc10: If it's not closed I'd rather be cautious and go with depending on a known good release.

[10:02] <nwc10> agree. I more meant - "it's not clear to me what the parrot folks still think that they need to do"

[10:02] <jnthn> Ah, OK.

[10:02] <jnthn> We can always bump to latest after this month's Rakudo release so those using bleeding edge Rakudo from Git will see the issues and we'll have time to know about them (or lack of them) well before a release.

[10:03] <FROGGS> k

[10:03] <nwc10> that seems wise

[10:06] *** hypolin left
[10:07] *** anuby left
[10:11] <FROGGS> jnthn: is that multi trait_mod:<is> merge problem solved yet? (using NativeCall and Inline::C, and just getting trait_mod:<is> from the last-imported module)

[10:11] <jnthn> FROGGS: Not yet

[10:12] <FROGGS> can I inspire you (via paypal) to have a look at it? ;o)

[10:14] <jnthn> I'll get there, it's just that I want to understand another pre-comp/import issue first, since the solution for that may impact the solution for this...

[10:14] <FROGGS> ahh, okay

[10:15] <jnthn> Looking at that is already about top of my todo list.

[10:16] <FROGGS> the offer still holds

[10:16] *** domidumont joined
[10:16] <dalek> Perlito: e107c18 | (Flavio S. Glock)++ | / (5 files):

[10:16] <dalek> Perlito: Perlito5 - parser - add "glob variable"

[10:16] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/e107c18970

[10:16] *** domidumont left
[10:17] <jnthn> FROGGS: The problem isn't a financial one, more that I'm currently in preparation for 2 solid weeks of travel/teaching/conference speaking, which is a small distraction from hacking on Rakudo. :)

[10:18] <FROGGS> I dont mean that I want it done tomorrow ;o)

[10:18] <jnthn> :-)

[10:21] <FROGGS> its just that I got some spare time in december, and my modules (Inline::C, SDL, Games::BubbleBreaker) depend on that

[10:21] *** kresike left
[10:21] <sorear>  sleep&

[10:22] <FROGGS> gnight

[10:23] *** domidumont joined
[10:27] * nwc10 wonders if the regulartory hurdles would be any less complex for online payment in BEER rather than cash. Different, yes. But "beer laundering"?

[10:29] <jnthn> :D

[10:29] <jnthn> What a concept...

[10:35] <nwc10> with rakudo, is there a way with Configure.pl to cause --gen-parrot *not* to build parrot with --optimize? I want -g for all the C files, to get debugging

[10:36] <jnthn> --parrot-options lets you pass options through to Parrot's Configure

[10:36] *** kresike joined
[10:37] <nwc10> Unknown option: parrot-options

[10:37] <nwc10> whose Configure.pl takes that?

[10:38] <arnsholt> NQP, I assume

[10:38] <nwc10> nope. not their either

[10:38] <nwc10> gah. there.

[10:38] <nwc10> where is my brain?

[10:39] <tadzik> sorry, I took it yesterday, forgot to tell you :/

[10:39] * FROGGS .oO( brainzzzz, eating brainzzzzz )

[10:49] <masak> g'day, #perl6

[10:50] <jnthn> good aftOH^Wmorning, masak

[10:50] <masak> made it just before the meridian. :P

[10:51] *** wk joined
[10:51] *** wk is now known as Guest63538

[10:55] <FROGGS> hi masak

[11:01] *** gootle left
[11:02] <masak> aloha.

[11:05] *** Su-Shee_ joined
[11:07] *** whiteknight left
[11:08] *** Su-Shee left
[11:10] *** am0c left
[11:22] <Woodi> hallo today

[11:23] <masak> good'di Woo'di.

[11:24] <Woodi> I tried to make some bindings to C func like set_opt( void *v ) using CArray[int] but it errors with: Unknown type* Positional* used in native call

[11:25] <jnthn> It'd be easiest if you could paste the signature

[11:25] <jnthn> But my first guess is that you wrote CArray[int] @foo, not CArray[int] $foo

[11:26] <Woodi> yyy, yes...

[11:26] <jnthn> :)

[11:26] <Woodi> I thinked I followed tests...

[11:26] <jnthn> It's consistent with rest of Perl 6, fwiw

[11:26] <jnthn> sub foo(Array @x) { } means "a Positional that holds Arrays"

[11:27] <Woodi> checking

[11:29] <Woodi> passed to next line ! :) however next line is error check... will see...

[11:35] <nwc10> jnthn: parrot-option  (ie singular)

[11:35] <nwc10> use the source, luke

[11:35] <jnthn> nwc10: oh! Sorry.

[11:36] <nwc10> still not sure if it's actually adding -g, as I see lots of -O2 flying past

[11:36] <jnthn> nwc10: (use the source) of perl Configure.pl -h :)

[11:37] <nwc10> CONFIG_ARGS     = "--optimize=-g" "--optimize" "--prefix=/Volumes/Stuff/Perl/rakudo/install"

[11:37] <nwc10> mmm. :-/

[11:37] <jnthn> Did you try --parrot-option='--debugging' ?

[11:37] <jnthn> er, or something like that :)

[11:37] <nwc10> nope, not yet

[11:41] <Woodi> decisively things move forward :) thanx jnthn++

[11:42] <jnthn> np :)

[11:46] *** fgomez left
[11:58] *** Guest58684 left
[12:01] *** Gothmog_ left
[12:03] *** fgomez joined
[12:09] *** awwaiid joined
[12:11] *** clkao_ joined
[12:13] *** Su-Shee_ is now known as Su-Shee

[12:14] *** tokuhiro_ joined
[12:21] *** domidumont left
[12:24] *** am0c joined
[12:33] <moritz> [Coke]++ #going through the perl6 RT queue

[12:33] *** domidumont joined
[12:34] *** Guest58684 joined
[12:35] *** Psyche^ joined
[12:39] *** Patterner left
[12:39] *** Psyche^ is now known as Patterner

[12:49] *** sisar joined
[13:02] <bbkr_> r: =pod

[13:02] <p6eval> rakudo c82d10: OUTPUT«===SORRY!===␤Preceding context expects a term, but found infix = instead␤at /tmp/eqe30h6iti:1␤»

[13:02] <bbkr_> std: =pod

[13:02] <p6eval> std 04216b1: OUTPUT«ok 00:00 40m␤»

[13:03] <bbkr_> which one is incorrect? should bare =pod (without closing =end tag) be allowed?

[13:05] <masak> I don't think STD does any Pod parsing.

[13:06] <bbkr_> then it's LTA rakudo message, right?

[13:07] *** spider-mario joined
[13:07] <masak> possibly.

[13:08] * bbkr_ reports

[13:08] <masak> I'd like to hear what tadzik has to say about it.

[13:09] *** wamba left
[13:09] <masak> the above should count as "abbreviated block" syntax, I think. as far as I see, it shouldn't need an ending delimiter, because abbreviated blocks auto-close.

[13:11] <bbkr_> so it should just work without failure?

[13:12] *** pmurias joined
[13:14] <masak> as far as I can see, yes.

[13:15] *** domidumont left
[13:17] *** bowtie joined
[13:33] *** Gothmog_ joined
[13:35] * [Coke] yawns from the office.

[13:40] *** isBEKaml joined
[13:40] <isBEKaml> hola, #perl6!

[13:42] <isBEKaml> https://gist.github.com/4078709 # any way I can improve this?

[13:42] *** am0c left
[13:43] <masak> indent looks weird on line 8.

[13:44] <isBEKaml> yeah, hit tab accidentally. :)

[13:44] <isBEKaml> not very comfortable with form entries that take tabs. 

[13:45] <isBEKaml> masak: I don't like the $^a in map:, anyway I can just say that once?

[13:45] <masak> .comb(/./) better written .comb

[13:45] <masak> isBEKaml: I was thinking of that. :)

[13:45] <masak> @nums>>.chr.map( * xx 2 )

[13:45] <masak> but it felt like a micro-optimization, so I didn't mention it.

[13:46] <isBEKaml> r: my @nums = 1,2,3; @nums>>.chr.map(* xx 2);

[13:46] <p6eval> rakudo c82d10:  ( no output )

[13:46] <masak> indent problems at line 19, too.

[13:46] <isBEKaml> masak: now I know that it's my editor. notepad++ (not cool, np, not cool)

[13:47] <jnthn> notepad++ doesn't screw up my indenting :P

[13:47] <masak> $dict_size is not really necessary, since it's a loop invariant that it tracks +%dictionary

[13:48] <isBEKaml> jnthn: smart indents seems to do it. I think it got confused between 8 and 4 char tabs. 

[13:48] <jnthn> Anything with smart in the name usually isn't... :)

[13:48] <masak> any technology... what jnthn said.

[13:49] <isBEKaml> jnthn: so I'll warn others about smartcards. :P

[13:49] *** domidumont joined
[13:49] <masak> we don't call them that here. :)

[13:49] *** sisar left
[13:50] <masak> we just call them "cards".

[13:50] <isBEKaml> masak: hey, they carry that big label "SMART CARDS"! 

[13:51] <isBEKaml> calling them "cards" would confuse people. :)

[13:51] <masak> ours don't.

[13:51] <masak> guess we're too smart to label them that :P

[13:52] *** wamba joined
[13:52] <jnthn> Yeah. We'd never give them some funny name like yoyo card... :)

[13:53] <masak> jnthn: that was an eerily prescient move, IMO. sometimes the system is up, sometimes down...

[13:53] <jnthn> masak: That was *exactly* my first thought when I saw the name :D

[13:53] <masak> (it's our local train and bus traffic here in southern Sweden)

[13:53] <masak> http://www.skanetrafiken.se/templates/InformationPage.aspx?id=26853

[13:54] <isBEKaml> yoyo card for bus/train ticketing system in .se? 

[13:54] <masak> aye.

[13:54] <jnthn> To be fair...the machines that update the cards, sell tickets etc actually *are* much more reliable, in my experience anyway, than the trains themselves :)

[13:54] <masak> no doubt.

[13:54] <jnthn> Which is quite amazing given they run Windows CE :P

[13:55] <masak> funnest thing I've managed to do so far with the machines was to try to refill a limited-time summer offer card.

[13:55] <masak> produced a number of "null" values in various fields in the machine.

[13:55] <jnthn> :D

[13:55] <masak> but it did survive.

[13:55] *** [particle]1 left
[13:55] <moritz> though when I travelled to Perl and missed the first connection, the vending machine told me "no connections found"

[13:55] *** benabik left
[13:56] <jnthn> d'oh

[13:56] <jnthn> That's one of those times when you really hope it's wrong.

[13:56] <masak> that's just a statement about the vending machine... :)

[13:56] <moritz> so I went into the customer service office, and their computer found one

[13:57] <isBEKaml> .oO(moritz usually finds a connection. He worked on DBIsh, no? )

[13:57] <masak> :P

[13:57] <jnthn> moritz: Still no home internets?

[13:57] <moritz> jnthn: no

[13:58] <jnthn> awww

[13:58] * masak hugs moritz 

[13:58] <moritz> it seems that the new internet connection uses VDSL, and our modem only supports ADSL.*

[13:58] <moritz> so, new router ordered

[13:58] <masak> isBEKaml: nice to have you back. I hear there are 80-ish testneeded RT tickets... :)

[13:58] <moritz> with a bit of luck it'll arrive on Saturday; with bad luck it'll be Monday

[13:59] * jnthn crosses fingers

[13:59] *** tokuhiro_ left
[13:59] <FROGGS> moritz: sad that you dont live neer to me, I have some modems lying around...

[13:59] <isBEKaml> masak: testneeded? I'll look in.. :)

[14:00] <moritz> FROGGS: and can they speak VDSL?

[14:01] <masak> there's a handy testneeded url somewhere, but I don't know where...

[14:01] <moritz> FROGGS: most can't, and those that do are expensive-ish

[14:01] <moritz> rakudo.de/testneeded iirc

[14:01] <jnthn> https://rt.perl.org/rt3//Public/Search/Simple.html?Query=%20%20%28%20%20Status%20=%20%27new%27%20OR%20Status%20=%20%27open%27%20%29%20AND%20Queue%20=%20%27perl6%27%20AND%20%27CF.{Tag}%27%20LIKE%20%27%testneeded%%27

[14:01] <jnthn> er, moritz wins :)

[14:01] <isBEKaml> jnthn: do you usually have this long url somewhere? 

[14:01] <jnthn> isBEKaml: Open in a browser tab that I've had open for like 5 months or something :)

[14:02] <isBEKaml> jnthn: I just found out my muscle memory typed in rakudo.do than rakudo.de. :P

[14:03] <FROGGS> moritz: I've got a dlink modem that does adsl2+ (up to 24mbit/s), it looks like VDSL2 is the same standard

[14:03] <masak> isBEKaml: [Coke]++ has done a nice job closing some of these in the past few days. it's nice to see that queue shrink.

[14:03] <FROGGS> moritz: so even if you ordered >24mbit, it should work at 24mbit/s

[14:04] <isBEKaml> masak: some of them are NPMCA bugs, can we close them?

[14:04] *** orafu left
[14:05] <masak> don't think so.

[14:05] <jnthn> NPMCA ones should even get a test to check they do what they're supposed to do or that they give a good error, possibly adding a typed exception along the way.

[14:05] *** PacoAir joined
[14:06] <moritz> FROGGS: oh, that's interesting

[14:06] <moritz> FROGGS: then tonight I'll call the telekom technicians and complain again :-)

[14:06] * jnthn takes another look at RT#112626

[14:08] <masak> https://rt.perl.org/rt3/Ticket/Display.html?id=112626

[14:08] <moritz> that's the one that blocks colomon++'s ABC module from running on rakudo, iirc

[14:08] <jnthn> yeah

[14:08] <masak> funny to see ufo in a bug report ;)

[14:09] <isBEKaml> masak: the lzw entry with @nums>>.chr.map: { * xx 2 } led to too many Whatever<foo> entries. 

[14:09] <Woodi> ok, I have few (native)bindings and want to move them to module.pm. so module namename { ...  } and then *always* namename::sub_name( ... ) ? or with class make methods to  every native sub ?

[14:09] <isBEKaml> masak: so I just reduced it to @nums>>.chr.map: { $^a xx 2 }

[14:09] *** atrodo joined
[14:09] <masak> isBEKaml: that's because you did both {} and *

[14:09] <masak> isBEKaml: I did () and *

[14:10] <masak> isBEKaml: * implies {} already.

[14:10] <jnthn> Woodi: Or mark them "is export", so a "use" statement will import them.

[14:10] <Woodi> ok. thanx again :)

[14:10] <isBEKaml> masak: so * usable only in a blockoid. Whatever blockoid. I see... 

[14:12] *** kaleem_ joined
[14:12] <Woodi> btw. there is some thing that could be put into FAQ. technical like: Data::Dumper answer and .base(x) and few more

[14:13] <masak> isBEKaml: any expression containing * as a term turns into a closure, auto-creating {} around it, and turning the *s into $^a, $^b, etc. (conceptually)

[14:13] <masak> Woodi: what FAQ about .base(x)? I haven't heard that one.

[14:13] *** drbean left
[14:14] <isBEKaml> the nascent faq.perl6.org, probably.

[14:14] <masak> yes, but what is the question people frequently ask about .base(x)?

[14:14] *** kaleem left
[14:14] <Woodi> masak: I am sure you answered it few times probably :)

[14:15] <masak> maybe so, but what is it?

[14:15] <isBEKaml> Woodi: do you mean that we can do :8(x) :10(x) :16(x) and others?

[14:15] *** drbean joined
[14:15] <masak> rn: say Inf.base(16)

[14:15] <p6eval> niecza v22-32-gee5dcf1: OUTPUT«Unhandled exception: Unable to resolve method base in type Num␤  at /tmp/ogVolikEst line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4211 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4212 (module-CORE @ 578) ␤  at /home/p…

[14:15] <p6eval> ..rakudo c82d10: OUTPUT«Type check failed in assignment to '$int_part'; expected 'Int' but got 'Failure'␤  in method base at src/gen/CORE.setting:2920␤  in block  at /tmp/teecyNeIC5:1␤␤»

[14:15] <masak> rn: say 16.base(Inf)

[14:15] <p6eval> niecza v22-32-gee5dcf1: OUTPUT«Unhandled exception: base must be between 2 and 36, got Inf␤  at /home/p6eval/niecza/lib/CORE.setting line 1443 (die @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 842 (Int.base @ 6) ␤  at /tmp/_sApkhBW_U line 1 (mainline @ 3) ␤  at /home/p6eval/niec…

[14:15] <p6eval> ..rakudo c82d10: OUTPUT«base must be between 2 and 36, got Inf␤  in method gist at src/gen/CORE.setting:10149␤  in sub say at src/gen/CORE.setting:7460␤  in block  at /tmp/CbpqvO0iRC:1␤␤»

[14:16] <Woodi> isBEKaml: hmm, I was looking and found only faq with political q&a's

[14:16] <masak> Woodi: what do people often ask about .base(x)?

[14:16] <masak> I'm curious.

[14:16] <jnthn> .oO( who are it belong to? )

[14:16] <isBEKaml> Woodi: political questions? I don't understand, I only found language and general questions there. 

[14:17] <Woodi> sec pls :)

[14:17] <colomon> jnthn++ # RT#112626

[14:17] <masak> r: my $pls = 1; say sec($pls)

[14:17] <p6eval> rakudo c82d10: OUTPUT«1.85081571768093␤»

[14:17] <masak> r: my $pls = 1; say sec $pls # :)

[14:17] <p6eval> rakudo c82d10: OUTPUT«1.85081571768093␤»

[14:17] * isBEKaml groans

[14:17] <Woodi> first result on google :)  http://www.perl6.org/archive/faq.html

[14:18] <Woodi> not quite political but not technical either

[14:18] *** xdbr joined
[14:18] <masak> Woodi: my question wasn't "where is the FAQ?". my question was "what is it that people are asking about .base(x)?"

[14:18] <Woodi> sec pls

[14:18] <isBEKaml> masak: no, no no....  :)

[14:18] *** skids joined
[14:19] <masak> r: my $pls = 1; say tan $pls # :)

[14:19] <p6eval> rakudo c82d10: OUTPUT«1.5574077246549␤»

[14:19] <Woodi> masak: from 2009 probably: 20:59 < LlamaRider> I couldn't find info on switching number systems, hex/oct/binary in Perl6 and what does mean for the types

[14:19] <Woodi> and it is frequently asked question on that channel :)

[14:19] <masak> if you say so.

[14:20] <isBEKaml> do people read logs from the waybackmachine to judge language usability? 

[14:20] <masak> so the question wasn't about .base(x) (which I think is fairly straightforward, myself), the question was about how to represent numbers in binary, octal, and hexadecimal in Perl 6 source?

[14:21] <Woodi> masak: 20:59 < moritz> nom: say 1234.base(16)  :)

[14:22] <Woodi> and another "is there Data::Dumper in Perl6 available maybe ?" :)

[14:22] <Woodi> masak: 21:00 < LlamaRider> seriously now...

[14:22] <isBEKaml> .oO (is Woodi now a collage artist? )

[14:23] *** GlitchMr joined
[14:23] <Woodi> isBEKaml: hmm, I collect jokes if it qualifies as art...

[14:24] <GlitchMr>     return 1 if $n < 2;

[14:24] <GlitchMr>     fact($n - 1) * $n;

[14:24] <GlitchMr> oops

[14:24] <GlitchMr> Accidental paste of wrong thing

[14:24] <GlitchMr> "is there Data::Dumper in Perl6 available maybe ?"

[14:24] <GlitchMr> Isn't it called .perl?

[14:25] <PerlJam> or .pretty 

[14:25] <PerlJam> (probably still conjectural, but I like it :)

[14:25] <Woodi> yes GlitchMr :)

[14:26] *** [particle] joined
[14:27] <masak> PerlJam: I thought .pretty ended up being spelled .gist

[14:27] *** spider-mario left
[14:28] <PerlJam> oh, maybe so.

[14:28] <PerlJam> They occupy different areas of my brain if so.

[14:33] <isBEKaml> Woodi: I was referring to how you paste content from backlogs to add to conversation. Sticky paste things. :)

[14:33] <isBEKaml> masak: gist updated. 

[14:34] <GlitchMr> perl6: gist [1, 2, 3]

[14:34] <p6eval> rakudo c82d10, niecza v22-32-gee5dcf1:  ( no output )

[14:34] <GlitchMr> perl6: say gist [1, 2, 3]

[14:34] <p6eval> rakudo c82d10, niecza v22-32-gee5dcf1: OUTPUT«1 2 3␤»

[14:34] *** nyuszika7h left
[14:36] <GlitchMr> This is the reason I don't see reason for .gist

[14:36] <isBEKaml> r: [1,2,3].pretty.say;

[14:37] <p6eval> rakudo c82d10: OUTPUT«No such method 'pretty' for invocant of type 'Array'␤  in block  at /tmp/7Olv2ElDS2:1␤␤»

[14:37] <GlitchMr> Empty array looks identically to empty string

[14:37] <isBEKaml> r: [1,2,3].perl.say;

[14:37] <p6eval> rakudo c82d10: OUTPUT«[1, 2, 3]␤»

[14:37] <GlitchMr> I really don't know what is .gist useful for

[14:37] <GlitchMr> For user, the is a .Str method. For debugging, there is a .perl method.

[14:38] <dalek> Perlito: daea592 | (Flavio S. Glock)++ | / (13 files):

[14:38] <dalek> Perlito: Perlito5 - add more "use strict"

[14:38] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/daea592131

[14:38] <bbkr_> gist word is some kind of acronym?

[14:38] <moritz> GlitchMr: if you have a large match object, you'll probably see that .Str isn't very informative, and .perl gives way too much information to be usful (most of the time)

[14:38] <moritz> bbkr_: no, a gist is some kind of summary

[14:39] <masak> isBEKaml: (0 .. ^$dict_size) better written (^$dict_size)

[14:40] <Woodi> NativeCall could have some sugar for C '&' oprator. Now this need to be used for passing **ptr :  my OpaquePointer $ptr; my $array := CArray[OpaquePointer].new(); $array[0] = $ptr; ... here pass array to function; $ptr = $array[0];

[14:40] <masak> isBEKaml: and I still think you don't even need to maintain that variable, as all it does is track the number of entries in %dictionary, which you can easily get through +%dictionary.

[14:40] <Woodi> naybe assigment to $array can be avoided...

[14:40] <GlitchMr> Ok, regular expression case makes sense

[14:40] <masak> r: %d = <foo 1 bar 2 baz 3>; say +%d; %d<blah> = 4; say +%d

[14:40] <p6eval> rakudo c82d10: OUTPUT«===SORRY!===␤Variable %d is not declared␤at /tmp/bZHQaqquVE:1␤»

[14:41] <masak> r: my %d = <foo 1 bar 2 baz 3>; say +%d; %d<blah> = 4; say +%d

[14:41] <p6eval> rakudo c82d10: OUTPUT«3␤4␤»

[14:41] <masak> isBEKaml: so ditch $dict_size, and just do +%dictionary on line 16.

[14:41] <isBEKaml> masak: hmm, I knew I didn't have to do 0..^dict_size. :)

[14:42] *** nyuszika7h joined
[14:42] *** nyuszika7h left
[14:43] <isBEKaml> masak: does, %dictionary.elems do the same thing as +%dictionary? 

[14:43] <moritz> aye

[14:43] *** nyuszika7h joined
[14:44] <isBEKaml> moritz: danke

[14:47] <[Coke]> I am pretty sure that .perl is for computers, .gist is for people, and ~ is the default. (not sure which market the default is for.)

[14:47] <masak> stringy people.

[14:47] <isBEKaml> or stingy ones. 

[14:48] <Woodi> isBEKaml: http://pastebin.com/JDe4icdc :)

[14:50] <dalek> Perlito: dcde2e3 | (Flavio S. Glock)++ | / (4 files):

[14:50] <dalek> Perlito: Perlito5 - add more "use strict"

[14:50] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/dcde2e3dd3

[14:53] <dalek> Perlito: 1395266 | (Flavio S. Glock)++ | TODO-perlito5:

[14:53] <dalek> Perlito: Perlito5 - TODO update

[14:53] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/1395266e58

[14:54] <[Coke]> Is there a reason aside from inertia for rakudo to stick with RT?

[14:54] <[Coke]> (note: this is a HUGE reason that should absolutely be respected.)

[14:54] <isBEKaml> [Coke]: I know I asked this question too. The answer(back then) was: I know it sucks, but I can live with it. 

[14:54] <PerlJam> [Coke]: what would you propose as an alternative?

[14:55] <moritz> [Coke]: apart from inertia, just the desire to open tickets by email

[14:55] <isBEKaml> why not github?

[14:55] <moritz> [Coke]: which other bug trackers can do, but github can't, and parrot's what-was-it-name installation couldn't do it well either

[14:55] <isBEKaml> trac

[14:55] <moritz> right

[14:56] <masak> an intricate autopun: https://twitter.com/jacksonh/status/269046172239417345

[14:57] *** perigrin left
[14:57] <masak> [Coke]: I know others hate RT search, but I actually love it. I'd call it codependency if it weren't that I actually reliably find stuff with it. and as far as I know, I can explain how to others.

[14:58] <masak> [Coke]: so for me (a frequent user of RT), the reason to stick with it is "it works".

[14:58] <moritz> masak: is it really an autopun? it's not obvious to me

[14:58] <arnsholt> Your relationship with RT sounds like me and TeX/LaTeX =)

[14:58] <masak> moritz: yes. it combines use and mention.

[14:59] *** kaare_ joined
[14:59] <moritz> masak: what does it use?

[14:59] <moritz> (sorry, I know it sucks to explain jokes)

[14:59] <masak> no prob. let's test this.

[15:00] <masak> moritz: mention: ".mobi". use: "people who use this TLD on mobile platforms -- the target group of the .mobi TLD -- will actually have a harder time[, sort of defying the purpose]"

[15:00] <PerlJam> isn't that more of a meta-use?

[15:00] <moritz> masak: I don't see how it's a use

[15:00] <[Coke]> The search is an issue. the fact that you can comment on tickets and no email is generated is painful. (we're not using RT as an internal/external tool like some do). I often have issues where I can only have one search going at a time. (testneeded versus all of perl6). 

[15:01] <moritz> masak: it would be a use if he mis-typed .mobi, or something

[15:01] <masak> moritz, PerlJam: see your point.

[15:01] *** Guest63538 left
[15:01] <masak> "I meant to type .mobi, but it was too long and my mobile devide didn't accept a four-letter TLD..."

[15:02] <[Coke]> I'm not pushing for a switch, I'm just wondering if there are reasons to stay other than that we've always been at war with Eurasia.

[15:02] <masak> s/see your point/I see your point/

[15:02] <[Coke]> but "it works and we use it" seems to be the prevailing thought. No worries.

[15:03] <PerlJam> [Coke]: This war is the least-suffering war  :)

[15:03] <masak> [Coke]: I use a lot of other issue trackers besides RT. none of them give me the warm fuzzies like RT does. I think the warm fuzzies come from email reporting and flexible search.

[15:04] <PerlJam> masak: either you've found the zen of RT or you have more RT-fu than most.  I always find RT awkward.

[15:05] <[Coke]> I would argue with your use of the word flexible, but understand your meaning.

[15:05] <masak> note that I didn't say "obvious" or "simple". :)

[15:07] <masak> PerlJam: fwiw, how to find a Perl 6 ticket: (1) search for the most relevant/precise term that's bound to be in the ticket title, (2) switch to "Advanced search", and add "queue: perl6" to the search, (3) profit!

[15:08] <masak> it also helps if (0) masak submitted it, because then the ticket will actually have whatever term in the subject line. :)

[15:08] <Woodi> arnsholt: maybe you have idea how to push NULL in place of CArray[type] ? some sugar for this or just CArray[type].new() ?

[15:08] <isBEKaml> masak: RT feels like a duck barking at me. :P

[15:08] <PerlJam> isBEKaml: hahaha

[15:08] <masak> :D

[15:08] <PerlJam> masak: ah ... (0) is, I think, the important bit.

[15:08] <jnthn> Woodi: Just pass some type object, I think

[15:09] <jnthn> Woodi: As in, pass CArray[type] itself as the argument

[15:09] <Woodi> k

[15:09] <jnthn> Type objects should become nulls.

[15:11] *** stopbit joined
[15:17] <isBEKaml> r: my @foo = 101..107; my %props = @foo>>.chr.map(* xx 2); %props.say;

[15:17] <p6eval> rakudo c82d10: OUTPUT«No such method 'count' for invocant of type 'List'␤  in method reify at src/gen/CORE.setting:5467␤  in method reify at src/gen/CORE.setting:5390␤  in method reify at src/gen/CORE.setting:5390␤  in method gimme at src/gen/CORE.setting:5768␤  in method eager at src/g…

[15:20] *** kaleem_ left
[15:21] <isBEKaml> r: my @foo = 101..107; my %props = @foo>>.chr.map: { $^a xx 2}; %props.say;

[15:21] <p6eval> rakudo c82d10: OUTPUT«("e" => "e", "f" => "f", "g" => "g", "h" => "h", "i" => "i", "j" => "j", "k" => "k").hash␤»

[15:21] <isBEKaml> Was the first approach wrong in any way? 

[15:23] <jnthn> Looks like xx doesn't auto-curry

[15:23] <moritz> no, because xx * means the same as xx Inf

[15:24] <jnthn> ah, that's a good reason

[15:24] <jnthn> also xx is a bit special 'cus it thunks its LHS

[15:25] <isBEKaml> then, surely the error message is misleading. 

[15:26] <jnthn> Maybe map should only take a Callable.

[15:26] <isBEKaml> maybe something like "no term found to repeat" is more useful given the special nature of xx.

[15:28] *** domidumont left
[15:28] <jnthn> The problem wasn't with xx

[15:28] <jnthn> The xx did its thing fine, then map got a List.

[15:29] <isBEKaml> do we still distinguish List and Array? I thought we gave that up...

[15:30] <jnthn> No, we never gave that up. Seq is what went away.

[15:35] <dalek> nqp: b571803 | jnthn++ | src/6model/serialization.c:

[15:35] <dalek> nqp: Detect object conflicts during deserialization.

[15:35] <dalek> nqp: 

[15:35] <dalek> nqp: If two pre-compiled modules both tried to replace an object or STable

[15:35] <dalek> nqp: with their own updated view of it, the latest one would always just

[15:35] <dalek> nqp: win. This creates the "disappearing symbol" issue. This patch detects

[15:35] <dalek> nqp: that it's going on and complains, rather than leaving a weird failure

[15:35] <dalek> nqp: later on (the actual fix will be to replace the exception thrown with

[15:35] <dalek> nqp: a hook to allow the module loader to do some smarter merging).

[15:35] <dalek> nqp: 

[15:35] <dalek> nqp: Breaks no NQP tests or Rakudo spectests; does correctly pick up the

[15:35] <dalek> nqp: RT#112626 case.

[15:35] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b5718034e4

[15:36] *** shinobicl joined
[15:36] <isBEKaml> jnthn: I vaguely remember Pm's docs talking about losing the differences between List and Array. I see that things have changed. :)

[15:37] * isBEKaml is happy reading rakudo source after a long gap.

[15:38] <moritz> isBEKaml: an Array ist just a LIst where every element is a Scalar container

[15:38] <moritz> (unless you bind to an array element, in which case it might not be a container anymore)

[15:38] <isBEKaml> moritz: Is that the mutable/immutable difference ?

[15:39] <isBEKaml> moritz: List -> immutable, Array -> mutable.

[15:40] <moritz> isBEKaml: well, Array elements are always replacable. List elements only if they happen to be containers

[15:43] <isBEKaml> moritz: I see, thank you. 

[15:44] * PerlJam reminds everyone of the advent calendar again.  

[15:44] <PerlJam> https://github.com/perl6/mu/tree/master/misc/perl6advent-2012

[15:45] <GlitchMr> Now, where is dalek?

[15:46] <dalek> mu: 38786a1 | (Конрад Боровски)++ | misc/perl6advent-2012/topic-brainstorming:

[15:46] <dalek> mu: Change "Rosettacode" to "Rosetta Code"

[15:46] <dalek> mu: review: https://github.com/perl6/mu/commit/38786a1a19

[15:46] <GlitchMr> oh, ok

[15:47] <jnthn> eek, I'm the only person who signed up for any slots!

[15:47] <moritz> jnthn: don't worry, I will too

[15:47] <jnthn> phew :)

[15:47] *** Su-Shee left
[15:47] <jnthn> But I hope there'll be more than two of us. :)

[15:47] <PerlJam> jnthn: I'll probably do a couple too, I'm just more of a last-minute kind of guy :)

[15:47] <jnthn> OK :)

[15:47] <GlitchMr> Perhaps I could actually write an article about sub MAIN

[15:48] <jnthn> +!

[15:48] <jnthn> er, +1

[15:48] <moritz> I think we had that in the previous years

[15:49] <GlitchMr> We did?

[15:49] <GlitchMr> I will look, ok

[15:49] <moritz> http://perl6advent.wordpress.com/2010/12/02/day-2-interacting-with-the-command-line-with-main-subs/

[15:49] <GlitchMr> Well, too bad

[15:50] <PerlJam> Surely there's something new to cover in that arena?

[15:50] *** Guest58684 left
[15:50] <GlitchMr> I actually think that sub MAIN is one of best Perl 6 features

[15:50] <GlitchMr> It allows you to make scripts quickly.

[15:50] *** domidumont joined
[15:51] *** domidumont left
[15:53] <PerlJam> could talk about  sub MAIN ( :foo($bar) ) { ... }

[15:54] <masak> sure.

[15:57] *** domidumont joined
[15:58] <dalek> mu: c1f455c | (Carl Mäsak)++ | misc/perl6advent-2012/schedule:

[15:58] <dalek> mu: [perl6advent-2012/schedule] claim four spots

[15:58] <dalek> mu: review: https://github.com/perl6/mu/commit/c1f455c3e2

[16:02] <jnthn> \o/

[16:02] <jnthn> r: say 25 - 7

[16:02] <p6eval> rakudo c82d10: OUTPUT«18␤»

[16:04] <GlitchMr> glitchmr@feather ~> perl6 -e 'sub MAIN (*@blah) {say "ok"}' a

[16:04] <GlitchMr> ok

[16:04] <GlitchMr> glitchmr@feather ~> perl6 -e 'sub MAIN (*@blah) {say "ok"}' --

[16:04] <GlitchMr> Usage:

[16:04] <GlitchMr>   -e '...' [<blah> ...]

[16:04] <GlitchMr> Is it a bug?

[16:05] <GlitchMr> -- should work as end of argument list, shouldn't it?

[16:06] <GlitchMr> glitchmr@feather ~> perl6 -e 'sub MAIN { %_.perl.say }' --

[16:06] <GlitchMr> ("-" => Bool::True).hash

[16:06] <GlitchMr> - option? Why?

[16:07] <tadzik> say about what?@:)

[16:08] <jnthn> r: =pod

[16:08] <p6eval> rakudo c82d10: OUTPUT«===SORRY!===␤Preceding context expects a term, but found infix = instead␤at /tmp/PuDUJrM8wj:1␤»

[16:08] <jnthn> tadzik: That :)

[16:09] <tadzik> yeah, bare =pod is amroght

[16:09] <tadzik> a'right *

[16:09] <tadzik> like =head1 for example

[16:10] <tadzik> r: =begin pod

[16:10] <p6eval> rakudo c82d10: OUTPUT«===SORRY!===␤Preceding context expects a term, but found infix = instead␤at /tmp/kcKlWjHGkq:1␤»

[16:10] <tadzik> hm, I thought that dies in a nicer way

[16:10] <moritz> r: =begin pod␤

[16:10] <p6eval> rakudo c82d10: OUTPUT«===SORRY!===␤=begin without matching =end␤at /tmp/06PvqPrGAg:1␤»

[16:10] <tadzik> maybe p6eval's fault

[16:10] <tadzik> ah, there we go

[16:10] <tadzik> moritz++

[16:10] <moritz> it's the missing newline, not p6eval ;-)

[16:11] <kresike> bye folks

[16:11] *** kresike left
[16:11] <masak> r: =pod␤

[16:11] <p6eval> rakudo c82d10:  ( no output )

[16:11] <masak> so, no bug.

[16:11] * masak closes ticket

[16:12] <tadzik> jnthn: is today's nqp commit possibly fixine the Bailador bug I sent you once?

[16:12] <jnthn> tadzik: Very possibly.

[16:12] <tadzik> \o/

[16:12] <tadzik> can't wait to get back home

[16:13] <tadzik> the commit message is promising :)

[16:13] <isBEKaml> r: say $_!X::a;

[16:13] <p6eval> rakudo c82d10: OUTPUT«===SORRY!===␤Cannot call private method 'a' on package X because it does not trust GLOBAL␤at /tmp/GrO7Ezc_sX:1␤»

[16:14] <pmurias> jnthn: should contextuals be renamed in nqp to dynamic variables?

[16:14] <jnthn> tadzik: oh, wait...that commit won't fix it

[16:14] <jnthn> tadzik: I'm working on a fix.

[16:15] <jnthn> tadzik: That commit is just about detecting the underlying problem. Now I can reliably detect it, I'm working on the stuff to deal with it.

[16:15] <jnthn> pmurias: Probably

[16:15] * [Coke] gets an idea for a perl6 module and sees it was done 2 years ago.

[16:15] <masak> GlitchMr: feel free to submit a bug report about --

[16:15] * [Coke] will catch up eventually.

[16:15] <masak> [Coke]: what module, ooc?

[16:15] <jnthn> pmurias: Just dates back to when we called them contextuals ;)

[16:16] <[Coke]> masak: one of yours.

[16:16] *** shinobicl left
[16:16] * masak thought so ;)

[16:16] <masak> then the chance is high that it needs refreshing or de-dusting.

[16:17] <tadzik> what modue, ooc? :)

[16:17] <tadzik> jnthn: aha, I see

[16:18] <tadzik> so atm it just complains. Still good :)

[16:20] <[Coke]> masak: is yapsi dead?

[16:20] <masak> very dormant, at least.

[16:21] <masak> I've learned enough about compilers since last touching it that it would probably benefit from another complete rewrite. :)

[16:21] *** spider-mario joined
[16:22] <[Coke]> if I clone it, run "ufo && make", I see no yapsi. :(

[16:22] <masak> hm.

[16:22] <masak> there should be one in bin/yapsi

[16:22] <[Coke]> er, sorry: Could not find Yapsi in any of: /home/coke/.perl6/lib, /home/coke/sandbox/installed_rakudo/install/lib/parrot/4.7.0-devel/languages/perl6/lib

[16:23] <masak> you probably still have to set PERL6LIB to ./lib

[16:23] <masak> I usually do.

[16:23] <isBEKaml> [Coke]: IIRC, there was a make install step or atleast one step that would copy over Yapsi.pm to your PERL6LIB.

[16:24] <[Coke]> masak: yup, just tried that; nice if that was in the readme.

[16:24] <masak> I'd apply that patch.

[16:24] <[Coke]> isBEKaml: I'd rather run it locally if I'm going to do something evil with it.

[16:25] *** perigrin joined
[16:25] <GlitchMr> https://rt.perl.org/rt3/Public/Bug/Display.html?id=115744

[16:25] <isBEKaml> [Coke]: I don't understand, read your msg like 5 times and see no relation to what I said. :)

[16:26] <dalek> Perlito: 5f528ed | (Flavio S. Glock)++ | TODO-perlito5:

[16:26] <dalek> Perlito: Perlito5 - parser - more TODO special cases

[16:26] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/5f528ed8b2

[16:26] <masak> [Coke]: Yapsi was very much -Ofun. this is one of the most tongue-in-cheek things I've ever written: https://github.com/masak/yapsi/blob/master/doc/announce/2011.03

[16:29] <isBEKaml> masak: Yeah, I went over your announce messages and sort of wondered at the striking references to HHGTTG.

[16:29] <masak> :)

[16:30] <isBEKaml> masak: At first, it read like the announce made to destroy earth for the super highway on the notice board at the end of the galaxy or a longer vogon poetry. :P

[16:31] *** brrt left
[16:31] <masak> I wonder if I wrote this before or after I had read "Quicksilver" by Neal Stephenson.

[16:34] <isBEKaml> Where would tests for #115308 go? S32-exception, I believe?

[16:35] <dalek> roast: b5f8ab8 | GlitchMr++ | S06-other/main-usage.t:

[16:35] <dalek> roast: Add tests for RT #115744

[16:35] <dalek> roast: review: https://github.com/perl6/roast/commit/b5f8ab87eb

[16:35] <moritz> isBEKaml: S32-exception/misc.t, or (preferrably) S12-methods/private.t

[16:37] <isBEKaml> moritz: okay

[16:37] * [Coke] points jnthn at the mailing list for a patch.

[16:38] <[Coke]> nwc10++ # ooh, 2 patches today.

[16:39] <jnthn> yeah, just looking at it

[16:39] <jnthn> nwc10: about?

[16:40] <[Coke]> +1 on the optimize patch from me, as ISTR that's bitten me at one point.

[16:40] <jnthn> yeah, I'm +1 to that too

[16:41] <[Coke]> seen au

[16:41] <aloha> au was last seen in #perl6 2 days 6 hours ago joining the channel.

[16:48] *** gdey joined
[16:49] *** fgomez left
[16:53] <dalek> nqp: 7a24af6 | jnthn++ | src/ (6 files):

[16:53] <dalek> nqp: Make handlers for repossession conflicts possible.

[16:53] <dalek> nqp: 

[16:53] <dalek> nqp: This allows a language where such issues may arise to provide its own

[16:53] <dalek> nqp: handler for them. If it doesn't, we just flag up the error as before.

[16:53] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7a24af6367

[16:57] <dalek> roast: 1ef7dda | isBEKaml++ | S12-methods/private.t:

[16:57] <dalek> roast: Added test for RT #115308

[16:57] <dalek> roast: review: https://github.com/perl6/roast/commit/1ef7ddacc8

[16:57] <isBEKaml> moritz: please check my last commit. I'm not sure that's correct. 

[16:59] *** fgomez joined
[17:05] <dalek> rakudo/nom: 55912f8 | jnthn++ | tools/build/NQP_REVISION:

[17:05] <dalek> rakudo/nom: Bump NQP_REVISION for deserialization improvements.

[17:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/55912f8659

[17:05] <dalek> rakudo/nom: bfa208d | jnthn++ | src/Perl6/ (2 files):

[17:05] <dalek> rakudo/nom: Handle Stash deserialization conflicts.

[17:05] <dalek> rakudo/nom: 

[17:05] <dalek> rakudo/nom: This fixes RT#112626, and probably a bunch of other disappearing

[17:05] <dalek> rakudo/nom: symbol in pre-compilation issues.

[17:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bfa208d4ec

[17:06] *** birdwindupbird left
[17:07] *** lumi_ left
[17:08] <isBEKaml> rn: class A { state $b; };

[17:08] <p6eval> niecza v22-32-gee5dcf1: OUTPUT«Potential difficulties:␤  $b is declared but not used at /tmp/fAs9b7g2pS line 1:␤------> class A { state ⏏$b; };␤␤»

[17:08] <p6eval> ..rakudo c82d10:  ( no output )

[17:10] <dalek> roast: d0b57ce | isBEKaml++ | S12-class/attributes.t:

[17:10] <dalek> roast: Added test for RT #114234

[17:10] <dalek> roast: review: https://github.com/perl6/roast/commit/d0b57ceed2

[17:10] *** Guest58684 joined
[17:11] <isBEKaml> r: :(::T $x);

[17:11] <p6eval> rakudo c82d10:  ( no output )

[17:15] <dalek> roast: d20870d | isBEKaml++ | S12- (2 files):

[17:15] <dalek> roast: Incremented plan count for two RT issues in previous commits.

[17:15] <dalek> roast: review: https://github.com/perl6/roast/commit/d20870d0bc

[17:19] <jnthn> std: sub infix:<> ( ){};

[17:19] <p6eval> std 04216b1: OUTPUT«===SORRY!===␤Null operator is not allowed at /tmp/p0nC7uP2Sy line 1:␤------> sub infix:<>⏏ ( ){};␤Other potential difficulties:␤  Pair with <> really means a Nil value, not null string; use :('') to represent the null string,␤  or…

[17:20] <jnthn> ah...that's how it gets the better error...

[17:20] <jnthn> std: :<>

[17:20] <p6eval> std 04216b1: OUTPUT«Potential difficulties:␤  Pair with <> really means a Nil value, not null string; use :('') to represent the null string,␤  or :() to represent Nil more accurately at /tmp/zK3fncqXkh line 1:␤------> :<>⏏<EOL>␤ok 00:00 41m␤»

[17:20] <masak> isBEKaml++ # writing tests

[17:21] <jnthn> masak: bfa208d may well fix the pre-comp issue you ran into with Adventure::Engine.

[17:22] <jnthn> phenny: suggest to tadzik that a module test run may be an idea, now I've fixed are pre-comp bug (hopefully without breaking anything else)

[17:22] <jnthn> phenny: tell tadzik that a module test run may be a good idea, now I've fixed are pre-comp bug (hopefully without breaking anything else)

[17:22] <phenny> jnthn: I'll pass that on when tadzik is around.

[17:22] <tadzik> jnthn: I'm on it

[17:22] <phenny> tadzik: 17:22Z <jnthn> tell tadzik that a module test run may be a good idea, now I've fixed are pre-comp bug (hopefully without breaking anything else)

[17:22] <jnthn> \o/

[17:22] <tadzik> phenny: why, thank you

[17:23] <tadzik> good that I have fresh test results from ~monday

[17:23] <jnthn> phenny is sufficiently smart, sometimes I forget I can't put <anything> <name> :)

[17:24] <masak> jnthn: yay

[17:24] <masak> jnthn: I'll try later tonight.

[17:26] <felher> Any comments on https://gist.github.com/4079921 as a translation of/for http://rosettacode.org/wiki/Bulls_and_cows/Player#Perl ?

[17:27] *** MayDaniel joined
[17:27] <tadzik> wow, I just got a segfault running panda

[17:27] <tadzik> awesome :)

[17:28] <masak> reproducible?

[17:28] <tadzik> yes

[17:28] <tadzik> but seems to have stopped after I removed /home/tadzik/src/parrot/install/lib/4.8.0-devel/languages/perl6/site

[17:29] <masak> felher: looks very nice.

[17:30] <masak> my $loose = +$a.grep: { $_ == any @$b };

[17:30] <tadzik> felher: that looks nice :)

[17:30] <masak> could be shortened to +$a.grep: any @$b

[17:31] <tadzik> ok, reproducible again

[17:31] <tadzik> after bootstraping panda on rakudo HEAD, it always segfaults

[17:31] <jnthn> fuck.

[17:31] <jnthn> tadzik: It certainly isn't always segfaulting?

[17:31] <felher> masak: of course, smartmatching. Thanks a lot :)

[17:31] <tadzik> https://gist.github.com/4079963

[17:31] <jnthn> tadzik: As in, simple perl6 -e "say 42" works?

[17:31] <tadzik> panda bootstraped ok

[17:32] <tadzik> that's a lot of perl6 already ran

[17:32] <jnthn> Hm

[17:32] <tadzik> the segfault is in the new-ish code

[17:32] <tadzik> Serialization_deserialize

[17:32] <jnthn> shit.

[17:32] <jnthn> :/

[17:32] <tadzik> :(

[17:32] <masak> felher: the rest looks really nice.

[17:33] <jnthn> The backtrace doesn't even have line numbers...guess it's not a debug build?

[17:33] <tadzik> no :/

[17:33] <tadzik> debug builds are awfully slow on this machine

[17:33] <tadzik> I can do it though

[17:33] <tadzik> it'll take ~30 minutes I think

[17:33] <tadzik> do want?

[17:33] <felher> masak: happy to hear that :)

[17:34] <dalek> roast: 0b90fb4 | isBEKaml++ | S06-signature/type-capture.t:

[17:34] <dalek> roast: Added test for RT #114216

[17:34] <dalek> roast: review: https://github.com/perl6/roast/commit/0b90fb4b54

[17:34] <jnthn> tadzik: Seeing if I can reproduce it here

[17:34] <tadzik> ok

[17:34] <tadzik> steps: bootstrap panda, run 'panda help' or whatever

[17:34] *** sorenso left
[17:35] <masak> felher: I tend to inline functions in their innermost relevant block nowadays. people's tastes vary, though.

[17:36] *** Vlavv` joined
[17:36] <masak> felher: I note that if you do that with score-correct (put it in the repeat while loop), it only needs one parameter, not four.

[17:36] <felher> masak: this is an awsome idea :)

[17:36] <masak> and read-score would need none.

[17:37] <jnthn> *sigh* This is why I put off looking at pre-comp bugs. It's always hassle.

[17:37] * masak .oO( first he breaks rakudo, now he complains? sheesh. ) :P

[17:37] *** Chillance joined
[17:37] <tadzik> hehe, that's about my stance about panda's bootstrap.pl

[17:37] <tadzik> No! Don't touch this! Please! :(

[17:38] <masak> hammer time.

[17:38] <tadzik> Panda Stahp

[17:38] <isBEKaml> .oO(alpha code don't play well with fire?)

[17:39] *** Vlavv left
[17:39] <masak> "at least it works." oh wait.

[17:41] <jnthn> how the hell is that thing NULL...

[17:42] *** xilo joined
[17:42] <isBEKaml> jnthn: just like my days back last year, "Of all the exceptions/errors out there, why did I have to get a friggin' NPE????"

[17:43] *** wamba left
[17:44] *** grondilu joined
[17:44] <grondilu> rn: my $x = 3; $x [R/]= 2; # meaning $x = $x R/ 2;

[17:45] <p6eval> niecza v22-32-gee5dcf1:  ( no output )

[17:45] <p6eval> ..rakudo bfa208: OUTPUT«===SORRY!===␤Preceding context expects a term, but found infix = instead␤at /tmp/peySrlC51n:1␤»

[17:45] <grondilu> r: my $x = 3; $x [R/]= 2; say $x;

[17:45] <p6eval> rakudo bfa208: OUTPUT«===SORRY!===␤Preceding context expects a term, but found infix = instead␤at /tmp/e9_RzXEwIm:1␤»

[17:45] <grondilu> n: my $x = 3; $x [R/]= 2; say $x;

[17:45] <p6eval> niecza v22-32-gee5dcf1: OUTPUT«0.66666666666666663␤»

[17:45] <grondilu> n: my $x = 3; $x [R/]= 2 += 1; say $x;

[17:46] <p6eval> niecza v22-32-gee5dcf1: OUTPUT«Unhandled exception: Writing to readonly scalar␤  at /tmp/iVbUO53CVY line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4211 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4212 (module-CORE @ 578) ␤  at /home/p6eval/niecza/li…

[17:46] <isBEKaml> r: my $x = 3; $x R/= 2; say $x;

[17:46] <p6eval> rakudo bfa208: OUTPUT«Cannot assign to a non-container␤  in block  at src/gen/CORE.setting:12308␤  in block  at src/gen/CORE.setting:12320␤  in block  at /tmp/3EQ00lUCDT:1␤␤»

[17:46] <grondilu> n: my $x = 3; ($x [R/]= 2) += 1; say $x;

[17:46] <p6eval> niecza v22-32-gee5dcf1: OUTPUT«1.6666666666666667␤»

[17:46] <jnthn> Well, the bothersome thing is that it deferences the same thing later on, right after the code I added...

[17:48] <felher> masak: I updated the version to declare the subs within the scope of repeat :)

[17:48] <felher> masak: I think you are right. This looks neater :)

[17:49] *** wk joined
[17:49] *** wk is now known as Guest3370

[17:51] <masak> felher: nice!

[17:53] <felher> masak: ah, and since we have smartmatching and score-correct only has one argument left, one can shrink the ".= grep"-line :)

[17:53] <isBEKaml> #114134 is an error originating in binder. does dies_ok fit the bill?

[17:54] *** Guest58684 left
[17:54] <masak> yeah :)

[17:54] <masak> @candidates .= grep(&score-correct)

[17:54] <masak> isBEKaml: should do, if the binding happens at runtime.

[17:55] <isBEKaml> masak: nominal type check, unbound variable  - not compile time?

[17:56] * masak looks

[17:56] <masak> oh, that one.

[17:57] *** dakkar left
[17:58] <masak> no, that should be runtime, and should be perfectly testable with dies_ok.

[17:59] <[Coke]> do we need "dies_with_isa" ? 

[17:59] <[Coke]> (or something much better named)

[18:05] <isBEKaml> masak: I added two anyway. Hopefully, you or others can update it with a better test. 

[18:05] <dalek> roast: edf27d4 | isBEKaml++ | S32-exceptions/misc.t:

[18:05] <dalek> roast: Added test for #114134

[18:05] <dalek> roast: review: https://github.com/perl6/roast/commit/edf27d4634

[18:08] *** benabik joined
[18:10] <isBEKaml> g'night, #perl6! :)

[18:10] *** isBEKaml left
[18:10] *** fgomez left
[18:11] <[Coke]> (or perhaps a multi of dies that takes an optional class)

[18:11] <[Coke]> er, of dies_ok

[18:14] <pmurias> jnthn: when do you plan to start porting nqp/rakudo to the jvm?

[18:15] <felher> http://rosettacode.org/wiki/Bulls_and_cows/Player#Perl_6

[18:16] <skids> Is there a settled solution for using data file from t/ during tests -- e.g. how to find the path, given the cwd could be anywhere?

[18:16] *** wtw left
[18:19] <jnthn> pmurias: I'm slowly chipping away at some initial design work.

[18:22] *** wtw joined
[18:23] *** wamba joined
[18:29] * pmurias works on rakudo-js in a TDD manner, making things saner when it's required to pass tests ;)

[18:30] <jnthn> :)

[18:30] <jnthn> tadzik: OK, got it

[18:30] <tadzik> \o/

[18:30] <jnthn> Well

[18:30] <jnthn> Got a fix.

[18:30] <dalek> nqp: a827893 | jnthn++ | src/6model/serialization.c:

[18:30] <dalek> nqp: Fix double-repossession.

[18:30] <dalek> nqp: 

[18:30] <dalek> nqp: Not completely sure why that can happen just yet, but this should be

[18:30] <dalek> nqp: enough to make it not be a problem.

[18:30] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a827893c9e

[18:30] <pmurias> jnthn: that means we need to expand the nqp test suit at some point :)

[18:30] *** grondilu left
[18:30] <jnthn> Still wouldn't mind figuring out exactly why it's needed...

[18:31] <jnthn> pmurias: I'm most certainly fine with expanding the NQP test suite. I know we're probably falling somewhat short on having good test coverage.

[18:38] <nwc10> jnthn: I'm sort of about, but I'm not sure when I'm going to fall asleep

[18:39] <jnthn> nwc10: OK. The patches look good; on the multi one I'd have been tempted to pass the graph nodes rather than pass info and the constraints, but it's not a big thing.

[18:39] <jnthn> nwc10: Do you have a commit bit?

[18:39] <nwc10> no

[18:39] <jnthn> Hm

[18:40] <jnthn> Do I have to worry about CLA stuff? :)

[18:40] <jnthn> As in, does the thing you already have with TPF for Perl 5 mean we're good?

[18:40] <nwc10> I don't know and I don't know.

[18:41] <pmurias> .WHAT returns the type object?

[18:41] <jnthn> nwc10: Did you ever sign a CLA for TPF, e.g. http://www.perlfoundation.org/contributor_license_agreement ?

[18:41] <jnthn> pmurias: yes

[18:41] <nwc10> no, I have never signed a CLA for TPF.

[18:41] <jnthn> Ah.

[18:42] <jnthn> Oh, maybe the Perl 5 and Perl 6 copyright work different...

[18:42] <nwc10> well, TPF doesn't hold the copyright on Perl 5

[18:42] <jnthn> That'd explain why you've not done a TPF CLA...

[18:43] <PerlJam> nwc10: in any case, it can't hurt to submit a CLA  :)  http://www.perlfoundation.org/contributor_license_agreement

[18:43] <diakopter> yes, it can hurt

[18:43] <PerlJam> diakopter: how?

[18:43] <diakopter> if the person doesn't want to

[18:43] <nwc10> it can hurt.

[18:44] <PerlJam> oh, then don't.  that's a "doctor it hurts when I do this" situation.

[18:44] <diakopter> no, it isn't; he wasn't complaining about something that already happened or is happening

[18:45] <diakopter> he was trying to ascertain whether it would hurt.

[18:46] *** am0c joined
[18:46] <ggoebel> Uniqueness and Reference Immutability for Safe Parallelism: http://robjsoftware.org/2012/11/02/a-publication-in-public/

[18:46] <diakopter> skimmed it; it was interesting to me

[18:47] <nwc10> jnthn: I'd not considered passing the nodes. It would drop the parameters to that function, which seems like a better idea

[18:47] <nwc10> as the long-ish parameter list was bugging me a bit

[18:47] <nwc10> looked ugly

[18:47] <jnthn> nwc10: Yes, keeping it to the two was my thought.

[18:48] <nwc10> will (try to) do that tomorrow

[18:49] <jnthn> OK. I can apply the other one.

[18:49] <nwc10> cool, thanks

[18:49] <dalek> rakudo/nom: ac77f28 | jnthn++ | tools/build/NQP_REVISION:

[18:49] <dalek> rakudo/nom: Bump NQP_REVISION to get SC fix.

[18:49] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ac77f28cb2

[18:49] <jnthn> Thank *you*. :)

[18:50] <jnthn> tadzik: Give it another go :)

[18:50] <nwc10> more general thought was that the C code in multidispatch.c seems to be doing three things:

[18:50] <nwc10> 1) converting Rakudo (well Parrot) data structures descripting subroutines into the C structs

[18:51] <nwc10> 2) sorting them

[18:51] <nwc10> 3) managing the cache

[18:51] <nwc10> and right now it has to be in that order, because the sorting is done in C using the C structs

[18:52] <jnthn> There's a 4) based on given arguments, choosing the candidate

[18:52] <jnthn> and 5) doing compile-time analysis of a dispatch 

[18:52] <jnthn> :)

[18:52] <nwc10> and a fanatical loyalty to the pope?

[18:53] <masak> :)

[18:53] <jnthn> No, just ruthless efficiency :P

[18:54] <pmurias> subclassing now works in nqp-js :)

[18:54] <nwc10> :-)

[18:54] <tadzik> jnthn: yep, doesn't segfault anymore :)

[18:54] <jnthn> phew

[18:54] <jnthn> nwc10: 1, 2 and 5 are not performance sensitive

[18:55] <jnthn> nwc10: 4 sorta is BUT if a cache hit happens can be dealt with very swiftly

[18:55] <nwc10> I'd not identified what is doing (5). But that doesn't matter (yet).

[18:56] <nwc10> I can see how (2) and (1) have to happen before (3), and (3) before (4)

[18:56] <jnthn> (5) is Rakudo_md_ct_dispatch

[18:56] <nwc10> aha. As it says in its docs - *at compile time*

[18:59] <jnthn> Need to pop out for 10 minutes...bbs

[19:01] *** HarryS left
[19:02] *** pmurias left
[19:02] *** HarryS joined
[19:05] *** sorenso joined
[19:07] *** HarryS left
[19:08] *** fhelmberger left
[19:11] * jnthn back

[19:20] *** benabik left
[19:32] *** sizz_ joined
[19:33] *** sizz left
[19:34] <sorear> good * #perl6

[19:38] *** hash_table joined
[19:39] *** Guest58684 joined
[19:44] *** fgomez joined
[19:47] <masak> sorear! \o/

[19:47] *** BillySleep is now known as BillySeth

[19:52] <sorear> masak! \o/

[19:54] *** benabik joined
[19:58] *** am0c left
[20:00] <[Coke]> skids: when running files in t/ your cwd is pretty much always "the directory above t"

[20:02] *** HarryS joined
[20:17] *** domidumont left
[20:19] *** benabik left
[20:24] *** benabik joined
[20:30] *** cognominal joined
[20:32] *** pnu_ left
[20:32] *** pnu joined
[20:34] <jnthn> tadzik: Did it do much beyond "not segfault"? :)

[20:34] <tadzik> jnthn: emmentaler is still running :)

[20:34] <tadzik> patience, that's just good ol' core2duo :)

[20:36] <jnthn> tadzik++

[20:37] <tadzik> I'll probably make it to the shop before it finishes :)

[20:37] <tadzik> . o O ( I hope something breaks, so I can show off difftool )

[20:37] <jnthn> What if it fixes something?

[20:37] <jnthn> Then you can also show off difftool :P

[20:38] <tadzik> oh, right, right :)

[20:41] <dalek> rakudo/nom: c58f4ce | nicholas++ | tools/lib/NQP/Configure.pm:

[20:41] <dalek> rakudo/nom: Using --parrot-option should override the default option of '--optimize'

[20:41] <dalek> rakudo/nom: 

[20:41] <dalek> rakudo/nom: Otherwise, it's possible neither to call Parrot's Configure.pl without

[20:41] <dalek> rakudo/nom: enabling optimizations, nor to change the value of the --optimize option.

[20:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c58f4ce8a1

[20:41] <dalek> rakudo/nom: a41a483 | jnthn++ | docs/ChangeLog:

[20:41] <dalek> rakudo/nom: Update ChangeLog.

[20:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a41a48389a

[20:41] <GlitchMr> I wonder how fast Perl 6 would be on CPU like... let's say... Pentium 133MHz

[20:41] *** SamuraiJack left
[20:42] *** Guest58684 left
[20:44] <xilo> would take ages just to compile it

[20:45] <masak> it would still need at least 1 GB of RAM.

[20:45] <masak> preferably 1.5 GB.

[20:50] <sorear> rakudo today would, sure

[20:51] <sorear> howefully be the time the P133 comes out we'll be able to make a leaner implementation

[20:55] *** eternaleye left
[20:55] *** daxim left
[21:02] <tadzik> :D

[21:04] <tadzik> jnthn: breakages :( https://gist.github.com/4081246

[21:04] <tadzik> oh, wait

[21:04] <sorear> o/ tadzik 

[21:04] <tadzik> sorear: o/

[21:04] *** GlitchMr left
[21:04] <tadzik> jnthn: actually, https://gist.github.com/4081251

[21:05] <tadzik> may be unrelated to new rakudo commits, but still a green light :)

[21:08] <jnthn> tadzik: hah, diff'd the wrong way round :P

[21:08] <jnthn> .koń? horse? :)

[21:09] <jnthn> tadzik: Thanks for testing

[21:09] <jnthn> I think Game::Crypt was one of the modules with issues

[21:09] <tadzik> yes, .koń is a horse :)

[21:09] <jnthn> Close to the Slovak word :)

[21:10] <tadzik> .dupa was taken :P

[21:10] *** Guest58684 joined
[21:10] <masak> hey! watch the language! :)

[21:11] * masak .oO( Polish that turd )

[21:11] <tadzik> :P

[21:12] <jnthn> Well, I did for a moment worry that it wasn't horse, but a loan from French that would be a good match for dupa :P

[21:12] <tadzik> ;)

[21:13] <masak> the perils of knowing a bunch of languages... :)

[21:14] <tadzik> cross-language puns

[21:14] <jnthn> "knowing" :)

[21:14] <jnthn> (in my case)

[21:14] <tadzik> Quidquid latine dictum sit, altum videtur

[21:14] <masak> indeed.

[21:14] <masak> wow, I can still parse that, after all these years.

[21:15] <masak> the passive should be a verb form in more languages... :)

[21:16] <masak> phenny: "ĉio dirita en Esperanto aspektas amuza"?

[21:16] <phenny> masak: "everything said in English looks fun" (eo to en, translate.google.com)

[21:16] <masak> ahaha.

[21:17] <masak> statistical translation. gotta love it.

[21:17] <tipdbmp> How to match a non word character (\W), that is not a "space" character \S?

[21:17] <tadzik> :D

[21:17] <tadzik> my second favourite sentence now

[21:17] <masak> tipdbmp: <-[\w\s]>

[21:18] <tadzik> masak: is the pronounciation easy?

[21:18] <tipdbmp> Hm, tnx.

[21:18] <masak> tadzik: was just gonna say. I don't even have to tell you how to pronounce that.

[21:18] <tadzik> hm

[21:18] <masak> tadzik: penultimate-syllable stress, just like in Polish.

[21:18] <tadzik> well, I'm the one who turns "ci" into "ć" and stuff

[21:18] <masak> troo

[21:19] <tadzik> tró

[21:19] *** benabik left
[21:19] * Tene disappointed by recent nqp issue, "a strange loop"

[21:19] <diakopter> :)

[21:19] <tadzik> but well, I only once met a guy who knew latin and had to fix my pronounciation of the former sentence

[21:20] <diakopter> Tene: what's disappointing about it? do you have any ideas what could be causing it?

[21:20] * diakopter has no clue

[21:21] *** kaare_ left
[21:21] <jnthn> It's because it doesn't do any optimization for while loops in sink context at code-gen time.

[21:21] *** wamba left
[21:21] *** eternaleye joined
[21:21] <sorear> phenny: fr en "Paris"?

[21:21] <phenny> sorear: "Paris" (fr to en, translate.google.com)

[21:22] <jnthn> And thus it needs to find a common register type between the condition and the body, and in the case without the line commented out that comes out as int.

[21:22] <masak> tadzik: how to pronounce Latin phrases depends if you ask a Swede, a German, or an Italian.

[21:22] <Tene> diakopter: There's a Douglas Hofstadter book titled "I Am A Strange Loop", which is sort of a followup to Godel, Escher, Bach

[21:22] *** wamba joined
[21:22] *** FROGGS left
[21:22] *** flightrecorder left
[21:22] <masak> good book.

[21:22] <diakopter> Tene: oh, yes, intentional allusion

[21:23] <masak> phenny: la en "quid pro quo"?

[21:23] <phenny> masak: "Grindhouse" (la to en, translate.google.com)

[21:23] <masak> :D

[21:23] <masak> at one point the translation was "What happens in Vegas"...

[21:23] <tadzik> masak: I asked a student (or former student) of antique culture

[21:25] <diakopter> Tene: but what's disappointing

[21:26] <Tene> diakopter: that it wasn't about self-referential loops

[21:27] <sorear> despite the efforts of conservatives, Latin pronunciation has changed quite a bit in the last 2,000 years

[21:27] <tadzik> dead language, eh? :)

[21:28] <sorear> there's been some interesting progress in the last couple decades based on using a comparative study of loanwords to tease out phonology from the old documents themselves

[21:28] <masak> contemporary Latin isn't dead.

[21:30] <tadzik> Latin Punks Not Dead!

[21:31] <masak> ;)

[21:37] *** benabik joined
[21:42] *** marloshouse left
[21:51] *** bbkr__ left
[21:53] *** marloshouse joined
[21:53] *** Guest58684 left
[21:54] *** hash_table left
[21:54] *** sorenso left
[21:57] <masak> phenny: en la "Latin Punks Not Dead!"?

[21:57] <phenny> masak: "Latine Punks non est mortuus !" (en to la, translate.google.com)

[21:57] *** spider-mario left
[21:58] <tadzik> I'll write that on some wall

[22:00] *** Guest58684 joined
[22:00] *** benabik left
[22:02] <jnthn> I thought you were meant to write ROMANES EUNT DOMUS on walls :P

[22:03] *** benabik joined
[22:03] <tadzik> :D:D:D

[22:03] <tadzik> 100 times!

[22:04] *** skids left
[22:05] <sorear> phenny: "ROMANES EUNT DOMUS"?

[22:05] <phenny> sorear: "ROMANESQUE EUNT DOMUS" (fr to en, translate.google.com)

[22:05] <sorear> phenny: "romanes eunt domus"?

[22:05] <phenny> sorear: "Roman domus eunt" (fr to en, translate.google.com)

[22:05] <sorear> phenny: la en "romanes eunt domus"?

[22:05] <phenny> sorear: "Romans go home" (la to en, translate.google.com)

[22:08] *** MayDaniel left
[22:25] <masak> 'night, #perl6

[22:30] <cotto> ''ight, masak

[22:32] *** cognominal left
[22:40] *** xilo left
[22:42] *** cognominal joined
[22:43] *** Guest3370 left
[22:53] *** xilo joined
[22:53] *** wamba left
[22:55] *** xilo left
[22:58] *** hash_table joined
[23:02] *** PacoAir left
[23:02] *** grondilu joined
[23:03] <grondilu> rn: my %h = 0 => 1, 1 => 0; say max(:by(*.value), %h); say %h.max(:by(*.value));

[23:03] <p6eval> rakudo a41a48: OUTPUT«"0" => 1␤"1" => 0␤»

[23:03] <p6eval> ..niecza v22-32-gee5dcf1: OUTPUT«"0" => 1␤Unhandled exception: Excess arguments to Any.max, unused named by␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (Any.max @ 1) ␤  at /tmp/Ns7P8fgveK line 1 (mainline @ 7) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4211 (ANON @ 3) ␤  at /hom…

[23:04] * grondilu was expecting "0" => 1n"0" => 1

[23:07] <dalek> perl6-roast-data: fb84488 | coke++ | / (4 files):

[23:07] <dalek> perl6-roast-data: today (automated commit)

[23:07] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/fb84488af9

[23:09] *** BillySeth is now known as BillySeth|bbl

[23:16] *** stopbit left
[23:17] *** hash_table left
[23:19] *** ifim joined
[23:21] *** ifim left
[23:24] *** cognominal left
[23:25] *** ifim joined
[23:28] *** cognominal joined
[23:33] <jnthn> 'night, #perl6

[23:45] *** alester left
[23:49] *** skids joined
[23:55] <dalek> book: 397fd9c | timo++ | src/regexes.pod:

[23:55] <dalek> book: fix #78, thanks hbaragar (s/use/lose/)

[23:55] <dalek> book: review: https://github.com/perl6/book/commit/397fd9c733

