[00:01] <sorear> good * #perl6

[00:03] <sorear> itz: hi!

[00:09] <dalek> nqp/bs: 9b2a92b | jnthn++ | src/6model/reprs/P6bigint.c:

[00:09] <dalek> nqp/bs: Seems P6bigint.copy_to passed the arguments to mp_init_copy backwards (not helped by the fact that it takes them the opposite way around to mp_copy). Sadly, this alone doesn't seem to fix the heap corruption.

[00:09] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/9b2a92b913

[00:25] *** att joined
[00:34] <dalek> nqp/bs: 3553834 | jnthn++ | src/HLL/World.pm:

[00:34] <dalek> nqp/bs: Code-gen building of list of static code refs in a different Parrot sub, to reduce load on IMCC register allocator a little.

[00:34] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/3553834c39

[00:42] *** mattp_ left
[00:45] *** mattp_ joined
[00:49] *** thou left
[00:52] *** BooK left
[01:00] *** BooK joined
[01:05] <dalek> rakudo/bs: fb6bc7d | jnthn++ | src/ (5 files):

[01:05] <dalek> rakudo/bs: Re-work the way we handle the fresh magicals flag, moving it into an int in the StaticLexPad. Saves several thousand lines of generated PIR in the fixups in CORE.setting, and probably around a thousand PCC method calls (yeah, the slow ones...) on startup.

[01:05] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/fb6bc7d49e

[01:08] *** woosley joined
[01:08] *** scott_ joined
[01:09] *** scott_ is now known as Guest61033

[01:15] <jnthn> sleep &

[01:36] <TimToady> masak: a slightly interesting monadic-ish logic toy in P6: https://gist.github.com/1946473

[01:36] <TimToady> dinner &

[01:38] *** benabik joined
[01:44] *** wolfman2000 left
[02:20] *** wolfman2000 joined
[02:35] *** NamelessTee left
[02:51] *** jaldhar joined
[02:54] <colomon> ack, just realized I missed #phasers again

[03:00] <colomon> (and I will probably be more or less out of contact for the next three days, for good reasons. :)

[03:01] <dalek> roast: d26054b | coke++ | S02-types/array.t:

[03:01] <dalek> roast: pugs fudge

[03:01] <dalek> roast: review: https://github.com/perl6/roast/commit/d26054baa0

[03:01] <dalek> Pugs.hs: 0eb2863 | coke++ | t/spectest.data:

[03:01] <dalek> Pugs.hs: run fudged test

[03:01] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/0eb2863df9

[03:03] <sorear> o/ colomon

[03:17] *** orafu left
[03:17] *** orafu joined
[03:23] *** odoacre left
[03:41] *** sftp left
[03:46] *** odoacre joined
[04:10] *** noam__ left
[04:21] *** Minthe joined
[04:33] *** arnsholt_ joined
[04:33] *** arnsholt left
[04:47] *** alester joined
[04:56] *** birdwindupbird joined
[05:12] *** birdwind1pbird joined
[05:13] *** birdwind1pbird left
[05:13] *** birdwind1pbird joined
[05:13] *** birdwind1pbird left
[05:13] *** birdwind1pbird joined
[05:37] *** am0c joined
[05:44] *** birdwindupbird left
[05:47] *** packetknife joined
[05:51] *** thou joined
[05:55] *** robinsmidsrod left
[05:57] *** robins joined
[06:02] *** alester left
[06:07] *** havenn joined
[06:11] *** am0c left
[06:25] <moritz> \o

[06:25] <sorear> o/ moritz

[06:26] <dalek> roast: 844bcb2 | moritz++ | S03-operators/buf.t:

[06:26] <dalek> roast: tests for Buf.subbuf

[06:26] <dalek> roast: review: https://github.com/perl6/roast/commit/844bcb2567

[06:28] *** havenn left
[06:29] *** havenn joined
[06:34] *** kaleem joined
[06:37] *** marmalade left
[06:45] <fsergot> o/

[06:46] <sorear> hello fsergot!

[06:46] <sorear> fsergot: until the other day I always parsed your nick as something like "This is your /home on acid"

[06:50] <fsergot> sorear:I thought about remove the first character. :-D

[06:51] *** takesako left
[06:52] *** kaleem left
[06:53] *** takesako joined
[06:54] <fsergot> sorear: Where are You from?

[06:54] *** am0c joined
[06:56] <sorear> fsergot: USA, southwest

[06:57] *** kaleem joined
[06:57] *** am0c left
[06:57] <Teratogen> sorear, you in Arizona?

[06:57] *** havenn left
[06:57] <TimToady> sorear is elsewhere

[06:58] <Teratogen> hi TimToady 

[06:58] <TimToady> I don't think sorear would want to live with that many rednecks

[06:59] <sorear> "he prefers bluenecks"

[06:59] <Teratogen> Actually Arizona has a lot of wetbacks

[06:59] <sorear> I am not familiar with that term

[06:59] <Teratogen> Urban Dictionary to the rescue!

[07:00] <TimToady> yes, well, it's okay for white folks to call themselves rednecks, but it's not really okay to call a different ethnic group names

[07:01] *** kaleem left
[07:02] <TimToady> in general we should try to avoid denigrating terms, and in fact I apologize for using "rednecks" that way

[07:03] <Teratogen> I wouldn't consider Arizona to be a redneck state, though.

[07:04] <Teratogen> Indiana is a redneck state, definitely.

[07:12] *** wtw joined
[07:14] <fsergot> Have to go to the school. Will be back later. Have a nice day|night #perl6! :)

[07:27] *** Kharec joined
[07:27] <Kharec> hi there

[07:28] *** autark left
[07:29] <Kharec> Is this time of exec is normal? http://paste.debian.net/158146/

[07:38] *** Kharec left
[07:41] *** packetknife left
[07:44] <TimToady> my system runs in in under a second, but that's still slow; jnthn's new serializing branch should help with that

[07:45] *** rsimoes left
[07:45] <Teratogen> nom: say 1+1

[07:45] <TimToady> (I'm running the most recent release, so that's probably some improvement over November)

[07:45] <p6eval> nom 4726db: OUTPUT«2␤»

[07:47] <TimToady> in general, we'd recommend p6 more for longer running processes until we get the startup time lower

[07:48] <TimToady> oh, wait, Kharec left already, duh...

[08:01] *** rsimoes joined
[08:09] *** brxue joined
[08:10] *** TEST_ joined
[08:11] <TEST_> say 20 + 5

[08:11] <TEST_> rakudo: say 29*3

[08:11] <p6eval> rakudo 4726db: OUTPUT«87␤»

[08:12] *** TEST_ left
[08:14] *** brxue left
[08:23] *** noam joined
[08:24] *** pat_js joined
[08:32] <pat_js> hey a quick question for building rakudo: is there already a way to pass the make '-j num' option to the parrot-build?

[08:35] *** mj41 joined
[08:41] <sorear> I don't know offhand (not really a rakudo person), but you can always build Parrot separately, which is what I did back when I could build rakudo

[08:41] *** thou left
[08:42] *** bkolera joined
[08:44] <pat_js> ah ok thanks, was just examining that Configure-script, and it doesn't seem like.

[08:46] *** stepnem joined
[08:47] <pat_js> what does .pir stand for? is this the parrot language?

[09:01] *** Minthe left
[09:09] *** woosley left
[09:10] <sorear> pat_js: Parrot Intermediate Representation

[09:10] <sorear> pat_js: don't think of it as a "language", except in a very technical sense

[09:11] <sorear> pat_js: it's more like the .s files that gcc creates in /tmp during compilations

[09:14] <pat_js> ah ok

[09:16] <masak> hola, #perl6.

[09:16] <masak> Teratogen: why do you keep doing 'say 1 + 1' on p6eval?

[09:16] <tadzik> hello #perl6

[09:17] <masak> Teratogen: why not something cool, like 'class A { method foo { say "HAI" } }; class B is A { method foo { print "OH "; nextsame } }; B.new.foo'?

[09:17] <masak> tadzik! \o/

[09:18] <tadzik> \o/

[09:19] <sorear> \o/

[09:20] <sorear> pat_js: I often see people talking about "Parrot" as if it were a language.

[09:21] *** pat_js left
[09:22] <Teratogen> because if say 1 + 1 works, it is ready to ship! =)

[09:22] <tadzik> wow, rakudo builds pretty fast now

[09:22] <masak> Teratogen: 'say 1 + 1' has worked since 2005.

[09:23] <masak> Teratogen: and we *are* shipping both Rakudo and Niecza, since 2007 and 2011, respectively.

[09:25] <sorear> strike 2.

[09:27] <masak> sorear: um, don't do that, it's uncanny :/

[09:27] *** arnsholt_ is now known as arnsholt

[09:29] <sorear> "suggesting the operation of supernatural influences"?

[09:29] <sorear> I am trying to make it clear to Teratogen that eir unfunny inanity is very, very tiring

[09:29] <sorear> and direct words don't seem to have helped

[09:30] <masak> sorear: I'm just expressing my uneasiness at the indirect method.

[09:30] <sorear> maybe I'll try super-direct.

[09:30] <sorear> hey, Teratogen, you're making it less fun to develop Perl 6

[09:30] <masak> it feels more like you're justifying to yourself the right to boot him after three strikes.

[09:30] <masak> yes, that was better.

[09:30] <sorear> please stop it

[09:31] <masak> Teratogen: I agree with sorear. your views on "ship it" lately are one-sided and not constructive.

[09:32] <Teratogen> ok =(

[09:37] <masak> write something cute in Perl 6 instead. there are lots of little applications that haven't been written yet.

[09:42] <masak> it was the "uncomfortably strange" meaning of "uncanny" I was after.

[09:42] <jnthn> morning, #perl6

[09:43] <tadzik> morning jnthn 

[09:43] <tadzik> Files=616, Tests=22111, 900 wallclock secs ( 9.59 usr  1.84 sys + 1512.89 cusr 127.42 csys = 1651.74 CPU)

[09:43] <tadzik> nom: 900 / 1050

[09:43] <p6eval> nom 4726db:  ( no output )

[09:44] <tadzik> nom: say 900 / 1050

[09:44] <p6eval> nom 4726db: OUTPUT«0.857142857142857␤»

[09:44] <tadzik> 86% of what it was yesterday

[09:44] *** noam left
[09:46] <jnthn> tadzik: bs got faster since your last run?

[09:46] <tadzik> jnthn: si

[09:46] <jnthn> Oh, I guess it may be thanks to fb6bc7d49e. Nice.

[09:46] <tadzik> I was checking because of https://github.com/rakudo/rakudo/commit/fb6bc7d49e

[09:46] <tadzik> aye

[09:47] <jnthn> nom: say 191 / 199

[09:47] <p6eval> nom 4726db: OUTPUT«0.959798994974874␤»

[09:47] <jnthn> Curious. It was a bigger difference for you than for me.

[09:47] <jnthn> I mean, proportionally

[09:47] <jnthn> Do you do a serial or parallel spectest run?

[09:49] <tadzik> pararell, 3 jobs

[09:50] <masak> jnthn! \o/

[09:50] <jnthn> masak! \o/

[09:53] * tadzik afks

[09:55] *** dakkar joined
[09:59] *** tty234 left
[09:59] *** etneg left
[10:02] <masak> TimToady: https://gist.github.com/1946473 -- nice

[10:02] <masak> still no amb, though ;)

[10:09] *** Guest61033 left
[10:10] <dalek> nqp/bs: 47ed8e9 | jnthn++ | src/HLL/World.pm:

[10:10] <dalek> nqp/bs: Don't need to natter about how much data we serialized in the build output now. :-)

[10:10] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/47ed8e9b53

[10:10] *** noam joined
[10:15] * moritz wakes up a second time today, and feels much better

[10:16] <jnthn> o/ moritz 

[10:17] <masak> good re-morning.

[10:17] <moritz> \o/ all tests pass on rakudo/bs

[10:17] <moritz> spectests, that is

[10:18] <felher> Nice :D

[10:18] <masak> what? that's awesome!

[10:18] <masak> jnthn++!

[10:19] <felher> yeah, jnthn++ indeed

[10:19] <jnthn> Yeah, for once the second 80% wasn't so bad. :)

[10:19] <moritz> :-)

[10:23] <moritz> 1083MB memory used for compiling the setting

[10:24] <moritz> and 'make podtest' also passes

[10:24] <jnthn> yay

[10:25] <moritz> t/02-embed/01-load.t aborts silently after printing the paln

[10:25] <moritz> *plan

[10:25] <jnthn> Does that work in master?

[10:25] <jnthn> *nom

[10:26] <jnthn> Also, is not everything in t\pmc full of it...

[10:26] <moritz> not ok 1 # TODO embedding

[10:26] <moritz> #       Failed (TODO) test 'can load_bytecode perl6.pbc'

[10:26] <moritz> # unimplemented key type 1

[10:26] <moritz> is the output on nom

[10:27] <dalek> rakudo/bs: ff75374 | jnthn++ | t/pmc/ (7 files):

[10:27] <dalek> rakudo/bs: Toss a bunch of tests that test stuff that doesn't exist any more.

[10:27] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/ff7537493f

[10:28] <felher> "A try block by default has a CATCH block that handles all fatal exceptions by ignoring them." -- is that why there is a try in TimToadys gist? And if it is (hope that is not a stupid question), what happens to non-fatal exceptions?

[10:29] <moritz> which gist?

[10:30] <moritz> and about non-fatal exceptions

[10:30] <masak> https://gist.github.com/1946473

[10:30] <moritz> we have fail(), which ignores try blocks, because the exception isn't thrown yet

[10:30] <jnthn> That gist is cute

[10:30] *** cosimo joined
[10:30] <moritz> and we have warnings, which don't interact with CATCH at all, because they are control exceptions

[10:32] <felher> So fatal exceptions are all non-controll exceptions that were thrown? 

[10:33] <moritz> yes

[10:33] <felher> moritz: okay, thanks a lot :)

[10:40] <felher> Now that bs passes all spectests, will it be merged into nom?

[10:44] <jnthn> felher: There's a few non-spectest issues to take care of first. One (which I'm looking into now) is that CORE.SETTING doesn't build with --optimize=3

[10:44] <jnthn> *.setting

[10:44] <felher> jnthn: okay, great :)

[10:46] * felher times his rakduo-build-process to be able to compare it to bs later on.

[10:46] <jnthn> Got it narrowed down to a particular optimization.

[10:57] <moritz> http://a2.sphotos.ak.fbcdn.net/hphotos-ak-snc7/430217_3024534445041_1013152409_32901224_186634111_n.jpg a nice little riddle

[11:01] *** noam left
[11:09] *** noam joined
[11:10] *** ab5tract left
[11:11] <felher> moritz: is there a solution i can check as soon as i think i've solved it?

[11:11] <felher> s/solution/link to a solution/

[11:12] <moritz> felher: no. Just tell me what you think the answer is, and I'll confirm it :-)

[11:12] <felher> moritz: okay, great.

[11:12] * felher prints it and runs to catch the bus

[11:12] <felher> bye folks

[11:12] *** ab5tract joined
[11:13] <moritz> ciao

[11:17] *** daxim joined
[11:19] <dalek> rakudo/bs: 4f557f8 | jnthn++ | src/Perl6/Optimizer.pm:

[11:19] <dalek> rakudo/bs: Correct method call done in optimizer when optimizer private method calls.

[11:19] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/4f557f8d90

[11:19] <dalek> rakudo/bs: 13d4b0a | jnthn++ | src/Perl6/Optimizer.pm:

[11:19] <dalek> rakudo/bs: Correct an op signature. Sadly, doens't unbust immediate block inlining optimization, though.

[11:19] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/13d4b0ad7d

[11:19] <dalek> rakudo/bs: f173558 | jnthn++ | src/Perl6/ (2 files):

[11:19] <dalek> rakudo/bs: Take care not to attempt to inline blocks inside scopes that were dynamically compiled during BEGIN time; this reified their lexpads, and thus we should not go fiddling with them. We got away with this before, though it was probably never really right.

[11:19] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/f173558847

[11:19] <dalek> rakudo/bs: 8af0430 | jnthn++ | tools/build/Makefile.in:

[11:19] <dalek> rakudo/bs: Now we can compile the setting with --optimize=3 again.

[11:19] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/8af04309a7

[11:40] *** awoodland joined
[12:06] *** NamelessTee joined
[12:11] <[Coke]> # 02/29/2012 - niecza++ ; pugs (29.59%); rakudo (99.27%)

[12:11] <[Coke]> "niecza",     20302,     8,   751,  1539, 22600, 23752

[12:11] <[Coke]> "pugs"  ,      6008,     7,  2766,   729,  9509, 23561

[12:11] <[Coke]> "rakudo",     20154,    28,   605,  1864, 22651, 23762

[12:11] <dalek> nqp/bs: bd82150 | jnthn++ | src/6model/serialization.c:

[12:11] <dalek> nqp/bs: Add a diagnostic message rather than segfaulting on a closure having a missing outer context pointer.

[12:11] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/bd82150d70

[12:25] *** Bzek joined
[12:31] *** Trashlord joined
[12:36] *** colomon left
[12:38] *** bluescreen10 joined
[12:43] *** pernatiy left
[12:57] <jlaire> moritz: heh, funny puzzle

[13:00] <dalek> rakudo/bs: 7b5784b | jnthn++ | src/Perl6/World.pm:

[13:00] <dalek> rakudo/bs: Method to add a folded constant no longer needs to cheat epicly.

[13:00] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/7b5784b7e8

[13:00] <dalek> nqp/bs: d11dc37 | jnthn++ | t/serialization/01-basic.t:

[13:00] <dalek> nqp/bs: Remove a now-bogus test - it relied on an implementation detail, so was probably a bad idea anyway.

[13:00] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/d11dc3726a

[13:00] <dalek> nqp/bs: 52bf76b | jnthn++ | src/6model/serialization.c:

[13:00] <dalek> nqp/bs: Seems that ignoring lack of outer_ctx serves us better. It semi-legitimately-ish comes up in some cases, and ignoring those is safe enough for the time being. This fixes pre-compilation of enums (and perhaps some other bits too), and is the last known blocker for merging bs.

[13:00] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/52bf76b2ec

[13:00] <moritz> \o/

[13:00] <moritz> jlaire: did you solve it?

[13:01] <jnthn> moritz: Any objections to going for the merge?

[13:01] <jlaire> moritz: yep, and apparently I'm a pre-school child and not a programmer :|

[13:01] <jnthn> There may be undiscovered issues, but I suspect we'll find them faster with people using it rather than it being sat in a branch. :)

[13:02] <moritz> jnthn: -1 objections, +1 to merging :-)

[13:02] <jnthn> Can I hear your negative objection? ;-)

[13:02] <jnthn> OK, let's do this!

[13:04] <dalek> nqp: 9ff82b3 | jnthn++ | / (36 files):

[13:04] <dalek> nqp: Merge branch 'master' into bs

[13:04] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9ff82b38d8

[13:04] <dalek> nqp: 00c5509 | jnthn++ | src/6model/serialization.c:

[13:04] <dalek> nqp: Patch from tadzik++ to get bs building on bleed Parrot.

[13:04] <dalek> nqp: review: https://github.com/perl6/nqp/commit/00c55099ae

[13:04] <dalek> nqp: 9b2a92b | jnthn++ | src/6model/reprs/P6bigint.c:

[13:04] <dalek> nqp: Seems P6bigint.copy_to passed the arguments to mp_init_copy backwards (not helped by the fact that it takes them the opposite way around to mp_copy). Sadly, this alone doesn't seem to fix the heap corruption.

[13:04] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9b2a92b913

[13:04] <dalek> nqp: 3553834 | jnthn++ | src/HLL/World.pm:

[13:04] <dalek> nqp: Code-gen building of list of static code refs in a different Parrot sub, to reduce load on IMCC register allocator a little.

[13:04] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3553834c39

[13:04] <dalek> nqp: 47ed8e9 | jnthn++ | src/HLL/World.pm:

[13:04] <dalek> nqp: Don't need to natter about how much data we serialized in the build output now. :-)

[13:04] <dalek> nqp: review: https://github.com/perl6/nqp/commit/47ed8e9b53

[13:04] <dalek> nqp: bd82150 | jnthn++ | src/6model/serialization.c:

[13:04] <dalek> nqp: Add a diagnostic message rather than segfaulting on a closure having a missing outer context pointer.

[13:04] <dalek> nqp: review: https://github.com/perl6/nqp/commit/bd82150d70

[13:04] <dalek> nqp: d11dc37 | jnthn++ | t/serialization/01-basic.t:

[13:04] <dalek> nqp: Remove a now-bogus test - it relied on an implementation detail, so was probably a bad idea anyway.

[13:04] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d11dc3726a

[13:04] <dalek> nqp: 52bf76b | jnthn++ | src/6model/serialization.c:

[13:04] <dalek> nqp: Seems that ignoring lack of outer_ctx serves us better. It semi-legitimately-ish comes up in some cases, and ignoring those is safe enough for the time being. This fixes pre-compilation of enums (and perhaps some other bits too), and is the last known blocker for merging bs.

[13:04] <dalek> nqp: review: https://github.com/perl6/nqp/commit/52bf76b2ec

[13:04] <jnthn> hm, little noisy... :)

[13:06] <dalek> rakudo/nom: c077570 | jnthn++ | / (20 files):

[13:06] <dalek> rakudo/nom: Merge branch 'nom' into bs

[13:06] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c07757095c

[13:06] <dalek> rakudo/nom: 136ef41 | jnthn++ | tools/build/NQP_REVISION:

[13:06] <dalek> rakudo/nom: Update NQP_REVISION to one in the NQP bs branch, to ease trying out the bs branch a bit.

[13:06] *** dalek left
[13:06] *** Trashlord left
[13:06] <jnthn> huh, it got it the wrong way around... :)

[13:06] <masak> moritz: I solved the riddle in 10 seconds. ;)

[13:06] *** dalek joined
[13:06] *** ChanServ sets mode: +v dalek

[13:06] <jnthn> masak: You're SO childish :)

[13:06] <masak> but I feel I was lucky, because the header made me switch to lateral mode first thing I did.

[13:07] <jlaire> it took me several minutes

[13:07] <moritz> jnthn: I think your merge was correct-ish

[13:07] <moritz> jnthn: you merged nom into bs, and then bs into nom. The latter was a fast-forward merge, so no merge commit was made for it

[13:07] <jnthn> moritz: It was, it looks fine.

[13:08] <dalek> rakudo/nom: 26ad47f | jnthn++ | docs/ROADMAP:

[13:08] <dalek> rakudo/nom: Remove a completed ROADMAP item.

[13:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/26ad47fc62

[13:10] <dalek> rakudo/nom: 4536120 | jnthn++ | docs/ChangeLog:

[13:10] <dalek> rakudo/nom: A couple of ChangeLog notes about the effects of bs.

[13:10] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4536120e82

[13:13] <au> hmm it took me a full six minutes :)

[13:13] <au> (solving the puzzle algebraically in a decidedly non-childish way)

[13:13] *** Trashlord joined
[13:17] <moritz> fwiw I stared at it for a minute or two, then did something else, and after a minutes not thinking about I knew the answer :-)

[13:17] * au finally "gets" the lateral reference right after solving it

[13:17] <au> heh. nice puzzle indeed :)

[13:18] <moritz> *a few minutes

[13:20] <[Coke]> moritz: http://perlgeek.de/en/imprint is stuck in historic pumpking times.

[13:20] <moritz> jnthn: so, constant declarators should now be easy to do, right?

[13:21] <moritz> [Coke]: "historic pumpking times"?

[13:21] * [Coke] rants about irc again. I should be able to ignore dalek sends to #foo that i've already seen in #bar

[13:21] <daxim> who is the current pumpking?

[13:21] <[Coke]> moritz: Rafael Garcia-Suarez ?

[13:22] <moritz> [Coke]: oh, you mean the copyright date in the footer?

[13:22] <daxim> grep for pumpking on the page.

[13:22] <moritz> oh, that too

[13:22] <moritz> thanks

[13:23] *** Nalla joined
[13:23] *** Nalla left
[13:24] <moritz> fixing now

[13:24] *** conntrack left
[13:25] *** Bzek left
[13:32] *** grondilu joined
[13:32] <grondilu> perl6: package Foo { our multi sub talk { say "hi" } }; Foo::talk;

[13:32] <p6eval> niecza v15-2-gd19c478: OUTPUT«Potential difficulties:␤  &talk is declared but not used at /tmp/StirSsDcvR line 1:␤------> [32mpackage Foo { our multi sub talk [33m⏏[31m{ say "hi" } }; Foo::talk;[0m␤␤hi␤»

[13:32] <p6eval> ..rakudo 453612: OUTPUT«Missing or wrong version of dependency 'src/gen/CORE.setting'␤current instr.: '' pc 1312 (src/gen/SAFE.setting.pir:499) (src/SAFE.setting:1)␤»

[13:32] <p6eval> ..pugs b927740: OUTPUT«hi␤»

[13:32] *** sisar joined
[13:33] <sisar> o/

[13:33] <grondilu> niecza--, rakudo--, pugs++  :)

[13:33] <jnthn> heh, that looks like a Rakudo build fail.

[13:33] <jnthn> Or something...

[13:34] <grondilu> perl6: package Foo { our sub talk { say "hi" } }; Foo::talk;

[13:34] <p6eval> rakudo 453612: OUTPUT«Missing or wrong version of dependency 'src/gen/CORE.setting'␤current instr.: '' pc 1312 (src/gen/SAFE.setting.pir:499) (src/SAFE.setting:1)␤»

[13:34] <p6eval> ..pugs b927740, niecza v15-2-gd19c478: OUTPUT«hi␤»

[13:34] * sisar is installing rakudo from scratch, coz he screwed up something and was unable to merge conflict

[13:35] <sisar> jnthn: build fails? huh, i'm cloning into rakudo now and will build soon, so will be able to confirm if build fails

[13:36] <grondilu> nom: say "hello"

[13:36] <p6eval> nom 453612: OUTPUT«Missing or wrong version of dependency 'src/gen/CORE.setting'␤current instr.: '' pc 1312 (src/gen/SAFE.setting.pir:499) (src/SAFE.setting:1)␤»

[13:36] <grondilu> fail builed confirmed :)

[13:36] <sisar> grondilu++

[13:37] <sisar> so maybe i should wait before it is resolved

[13:37] <grondilu> indeed

[13:38] * sisar has been without rakudo for 24hrs now :(

[13:38] <jnthn> I think it may only be SAFE.setting with issues.

[13:38] <sisar> .o.O( time to use niecza more)

[13:39] <jnthn> sisar: The build issue only affects SAFE.setting, which is used by p6eval.

[13:40] <jnthn> sisar: It's highly unlikely you'll be using that locally

[13:40] <jnthn> sisar: So go ahead and build.

[13:40] <sisar> moritz: +1 #wish for UI designers...

[13:40] <jnthn> Plus the bs branch just landed so the build should be faster than before :)

[13:40] <sisar> jnthn: oh. great ! :)

[13:41] *** conntrack joined
[13:42] <dalek> rakudo/nom: 2aa69ed | jnthn++ | src/Perl6/ (2 files):

[13:42] <dalek> rakudo/nom: Enable use of BEGIN phasers as r-values.

[13:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2aa69eda23

[13:42] <dalek> rakudo/nom: 455035f | jnthn++ | src/Perl6/Actions.pm:

[13:42] <dalek> rakudo/nom: Quick crack at non-literal constants.

[13:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/455035f9ab

[13:42] <sisar> have been hearing about bs for a long time. It used to take almost 20min on my *very* slow machine to build, so lets see now... jnthn++

[13:42] <dalek> roast: f25bc31 | jnthn++ | S04-phasers/begin.t:

[13:42] <dalek> roast: Unfudge a couple of spectests for BEGIN in r-value context.

[13:42] <dalek> roast: review: https://github.com/perl6/roast/commit/f25bc316c2

[13:42] <dalek> roast: a84a160 | jnthn++ | S04-declarations/constant.t:

[13:42] <dalek> roast: Unskip some tests for non-literal constants.

[13:42] <dalek> roast: review: https://github.com/perl6/roast/commit/a84a1606c1

[13:42] <jnthn> moritz: Seems so... :)

[13:43] <moritz> \o/

[13:44] <dalek> features: 7dd72b9 | jnthn++ | features.json:

[13:44] <dalek> features: Rakudo now more fully supports the constant declarator.

[13:44] <dalek> features: review: https://github.com/perl6/features/commit/7dd72b9e9c

[13:44] <grondilu> nom: constant C = <13 42>

[13:44] <p6eval> nom 453612: OUTPUT«Missing or wrong version of dependency 'src/gen/CORE.setting'␤current instr.: '' pc 1312 (src/gen/SAFE.setting.pir:499) (src/SAFE.setting:1)␤»

[13:45] <grondilu> niecza: constant C = <13 42>

[13:45] <p6eval> niecza v15-2-gd19c478:  ( no output )

[13:45] <grondilu> niecza: say constant C = <13 42>

[13:45] <p6eval> niecza v15-2-gd19c478: OUTPUT«13 42␤»

[13:45] *** conntrack left
[13:45] <grondilu> It really seems to me that niecza is much more advanced than rakudo, isn't it?

[13:46] *** noam left
[13:46] <dalek> features: 03a13f2 | jnthn++ | features.json:

[13:46] <dalek> features: A couple more features tweaks for Rakudo.

[13:46] <dalek> features: review: https://github.com/perl6/features/commit/03a13f2bc4

[13:46] <jnthn> grondilu: No.

[13:46] <jnthn> grondilu: It is in some areas, and not in others.

[13:47] *** noam joined
[13:47] <jnthn> > say constant C = <13 42>

[13:47] <jnthn> 13 42

[13:47] <jnthn> Works locally.

[13:47] <grondilu> what's « > » ?

[13:47] <moritz> grondilu: for example rakudo's object and meta-object model is more advanced, whereas niecza's grammar/rules engine is better

[13:47] <moritz> « » is a quoting construct

[13:48] <moritz> much like qw//, but more magical, and interpolates stuff etc.

[13:48] <grondilu> no I mean:  "> perlcode" here on this chan

[13:48] <grondilu> oh hang on.  I understand

[13:48] <moritz> it's from the REPL

[13:48] <jnthn> Just copy-paste from repl

[13:49] *** pernatiy joined
[13:49] <grondilu> Ok.  Silly of me.

[13:49] <moritz> jnthn: should I update the feature matrix?

[13:49] <grondilu> It's good that these type of constants work now.  I've been waiting for that for a while.

[13:50] <jnthn> moritz: Already did.

[13:50] <moritz> oh right

[13:50] <jnthn> moritz: Oh, I updated features.json...the rest is automated, no

[13:50] <jnthn> ?

[13:50] *** bkolera left
[13:50] <moritz> jnthn: yes, it's updated hourly or so

[13:50] <jnthn> ok

[13:53] <jnthn> Think I see what's up with SAFE.setting.

[13:53] *** mtk left
[13:53] <jnthn> oh noes, I forgot to lunch... :)

[13:53] <dalek> features: 588fab1 | moritz++ | template.html:

[13:53] <dalek> features: note that the feature matrix is about development versions, not releases

[13:53] <dalek> features: review: https://github.com/perl6/features/commit/588fab1365

[13:53] *** mtk joined
[13:54] <tadzik> sniff sniff, do I smell a branch merge? :)

[13:54] *** Trashlord left
[13:54] <jnthn> tadzik: Yes, it happened. :)

[13:54] <tadzik> lol!

[13:55] <grondilu> Is this feature matrix somewhere in the git directory (I don't have regular internet access so I'd like to look at it offline) ?

[13:55] <moritz> grondilu: well, the HTML page at http://perl6.org/compilers/features is generated from features.json and template.html inside the perl6/features repo

[13:56] <dalek> rakudo/nom: 28f3d64 | jnthn++ | src/Perl6/World.pm:

[13:56] <dalek> rakudo/nom: Settings are load dependencies, not fixups. Seems to fix --setting=SAFE usage (and thus p6eval).

[13:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/28f3d641fc

[13:56] <jnthn> evalbot rebuild nom

[13:56] <p6eval> NOT OK (maybe a rebuild is already in progress?)

[13:56] <jnthn> evalbot rebuild rakudo

[13:56] <p6eval> OK (started asynchronously)

[13:56] <dalek> Rebuild of rakudo complete.

[13:56] <jnthn> Uh. :)

[13:56] <jnthn> I know I sped up the build but... P

[13:56] <jnthn> :P

[13:56] <moritz> grondilu: you just need Perl 5 with JSON and HTML::TEmplate::Compiled to generate it locally

[13:56] <jnthn> evalbot rebuild rakudo

[13:56] <p6eval> OK (started asynchronously)

[13:56] <dalek> Rebuild of rakudo complete.

[13:56] <masak> o.O

[13:56] <moritz> jnthn: 'rakudo' is the 'b' branch

[13:56] <masak> oh!

[13:56] <jnthn> oh?

[13:57] <jnthn> but

[13:57] <jnthn> rakudo: say 42

[13:57] <moritz> jnthn: and it checks for updates, and doesn't do a recompile unless necessary

[13:57] <p6eval> rakudo 453612: OUTPUT«Missing or wrong version of dependency 'src/gen/CORE.setting'␤current instr.: '' pc 1312 (src/gen/SAFE.setting.pir:499) (src/SAFE.setting:1)␤»

[13:57] <jnthn> moritz: ah, ok

[13:57] <[Coke]> make: *** [src/stage2/nqpmo.pbc] Segmentation fault

[13:57] <jnthn> So is it nom?

[13:57] <moritz> jnthn: yes, the mappings in p6eval and of the build system have diverged a bit

[13:57] <jnthn> ok

[13:57] * [Coke] tries a realclean and rebuild.

[13:58] <jnthn> [Coke]: Suggest realclean et al.

[13:58] *** grondilu left
[13:58] <jnthn> [Coke]: It was a 200+ commit merge...quite a bit changed. :)

[13:58] <jnthn> evalbot: rebuild nom

[13:58] <jnthn> evalbot rebuild nom

[13:58] <p6eval> NOT OK (maybe a rebuild is already in progress?)

[13:59] <jnthn> Hmpfh.

[13:59] <jnthn> Seems it musta started just before I did the commit to fix things...

[14:00] <moritz> jnthn: patience :-)

[14:00] <[Coke]> jnthn: same failure building nqp after removing npq/ and parrot/

[14:01] <[Coke]> (on feather)

[14:01] <jnthn> Is p6eval not on feather?

[14:01] <jnthn> It seems to have got rather further than that...

[14:02] <moritz> no

[14:02] <[Coke]> (so, rm -rf nqp/ parrot/; make realclean; perl Configure.pl --gen--parrot .... segfault.)

[14:02] <moritz> it's hosted on a machine provided by diakopter++

[14:02] <jnthn> ah, ok

[14:03] <moritz> [Coke]: I'll try to reproduce

[14:03] <jnthn> Curious. Backtrace most welcome.

[14:03] <jnthn> I thought I had a feather account somewhere too...

[14:03] <moritz> [Coke]: fwiw 'git clean -xdf' is usually more effective than 'make relclean' (deletes all files that are not under version control)

[14:05] <[Coke]> https://gist.github.com/1950017 - backtrace

[14:05] <[Coke]> moritz: yes, but I have test scripts and other things about that I don't want to remove. (also, this failure is happening in nqp, which I cleaned pretty effectively)

[14:06] <moritz> [Coke]: ok

[14:07] <sisar> jnthn: build took 10 min. Almost a redution of 50% in build time for me :)

[14:07] * [Coke] tries a straight nqp build outside of rakudo.

[14:07] <tadzik> now that the build time isn't annoying I could maybe hack something up :)

[14:08] <jnthn> tadzik: Set! KeyBag :)

[14:08] <moritz> steal them from niecza :-)

[14:08] <jnthn> aye :)

[14:09] *** agentzh joined
[14:09] <jnthn> [Coke]: Hm...curious backtrace. 32-bit or 64-bit?

[14:09] *** benabik left
[14:09] <[Coke]> jnthn: feather is 32, I believe.

[14:09] <jnthn> OK

[14:10] <jnthn> bbiab, need food

[14:12] * moritz too gets a segfault on feather while building nqp

[14:12] <moritz> Linux feather 2.6.32-5-amd64 #1 SMP Mon Mar 7 21:35:22 UTC 2011 x86_64 GNU/Linux

[14:12] <moritz> looks like 64bit

[14:15] *** havenn joined
[14:16] <flussence> you can have a 32-bit userspace even with a x86-64 kernel, though it's pretty rare

[14:17] *** conntrack joined
[14:18] *** Ulti joined
[14:19] <Ulti> http://irclog.perlgeek.de/perl6/2010-09-24 <rjbs> I've been waiting for someone to write a PILE OF POO operator for p6... 

[14:19] <[Coke]> (32/64) whoops.

[14:20] <Ulti> I hate that I did this independetly http://blog.mattoates.co.uk/2012/02/perl6-and-fun-with-unicode-operators.html

[14:20] <Ulti> took 2 years for operating systems to catch up I guess

[14:21] *** tokuhirom joined
[14:21] <[Coke]> Ulti++

[14:23] <masak> Util: Y U shuffle manually and not just .pick(*) ?

[14:25] <tadzik> jnthn: exactly :)

[14:27] <Ulti> masak: because I don't know any perl6 ;)

[14:29] *** att left
[14:29] <Ulti> there is also an out by one error on that shuffle iirc

[14:30] <Ulti> but its not like it was a serious program :)

[14:30] * masak just saw that "Ulti" ne "Util"...

[14:31] <Ulti> erk that's quite confusing, sorry

[14:31] * [Coke] should run the daily tests now, as pugs would beat rakudo!

[14:31] <Ulti> I've had this nick a long while though

[14:31] <flussence> nom: 'iltu'.comb.pick(*).join.ucfirst.say

[14:31] <p6eval> nom 28f3d6: OUTPUT«Ulti␤»

[14:31] *** Ulti is now known as Ultima

[14:32] *** Trashlord joined
[14:32] *** Ultima is now known as Ulti

[14:32] <flussence> wait, that was... abnormally quick

[14:32] <flussence> nom: 'iltu'.comb.pick(*).join.ucfirst.say

[14:32] <[Coke]> nom: 'anagram'.comb.pick(*).join.say

[14:32] <p6eval> nom 28f3d6: OUTPUT«Util␤»

[14:32] <p6eval> nom 28f3d6: OUTPUT«arngama␤»

[14:32] <masak> Ulti: that's fine, keep "Ulti" :)

[14:32] <[Coke]> perl6: 'anagram'.comb.pick(*).join.say

[14:32] <p6eval> pugs b927740: OUTPUT«anagram␤»

[14:32] <p6eval> ..niecza v15-2-gd19c478: OUTPUT«anagamr␤»

[14:32] <p6eval> ..rakudo 28f3d6: OUTPUT«anagarm␤»

[14:32] <Ulti> so long in fact nickserv doesn't have me registered on anything else

[14:33] <masak> nod

[14:33] <masak> Util, Ulti: I apologize in advance for all the mis-tabs and mis-attributions I will make :)

[14:34] <Ulti> so is there a comprehensive place to get all the methods you can use on the various Perl6 types?

[14:34] <Ulti> javadoc style (dare I say)

[14:34] <masak> nom: say Array.^methods

[14:34] <p6eval> nom 28f3d6: OUTPUT«new bind_pos delete flattens REIFY STORE_AT_POS STORE PARAMETERIZE_TYPE at_pos perl new Bool Int end fmt flat list flattens tree Capture Parcel at_pos eager elems exists gimme infinite iterator munch pick pop push roll reverse rotate shift unshift splice sort classify…

[14:34] <masak> Ulti: you can check out S32, which is a good start.

[14:34] <Ulti> heh ok

[14:34] <Ulti> you need somewhere to know you can do .methods

[14:34] <masak> http://perlcabal.org/syn/

[14:35] <masak> note .^methods with a ^

[14:35] <masak> it's because .^methods sits not on an ordinary object, but on the metaclass object.

[14:36] *** sftp joined
[14:36] <Ulti> I think its probably worth me passively hanging out in here

[14:37] <jnthn> nom: say "Do I respond quickly now?"

[14:37] <p6eval> nom 28f3d6: OUTPUT«Do I respond quickly now?␤»

[14:40] <[Coke]> nom: say ?"Do I respond quickly now?"

[14:40] <p6eval> nom 28f3d6: OUTPUT«True␤»

[14:41] <masak> Ulti: it is. welcome.

[14:41] *** att joined
[14:41] <Ulti> thanks, is it too late to request a language feature? ;)

[14:42] <moritz> depends on the feature

[14:42] <jnthn> Hmm...I just did a build on: Linux Debian-50-lenny-64-LAMP 2.6.26-2-amd64 #1 SMP Fri Aug 14 07:12:04 UTC 2009 x86_64 GNU/Linux

[14:42] <jnthn> And it worked

[14:42] <Ulti> can we get some goal evaluated generators and co-expressions just-like Icon/Unicon has just to stick it to Python people who dont have real generators

[14:42] *** JimmyZ joined
[14:42] <[Coke]> Ulti: it's probably already in.

[14:42] <jnthn> That looks...remarkably like what's on feather...

[14:42] <Ulti> [Coke]: lol

[14:42] <moritz> if you propose we morph Perl 6 into a pure, functional language that requires monads to do IO... too late :-)

[14:43] <Ulti> heh

[14:43] <JimmyZ> perl6:  constant @primes = 2, 3, -> $p { ($p+2, $p+4 ... -> $n { $n %% none @primes ... * >= sqrt $n })[*-1] } ... *; my @x.plan: @primes; say @x[^20];

[14:43] <p6eval> rakudo 28f3d6: OUTPUT«===SORRY!===␤Variable @primes is not declared␤at /tmp/4gQ95rKH2V:1␤»

[14:43] <p6eval> ..niecza v15-2-gd19c478: OUTPUT«2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71␤»

[14:43] <p6eval> ..pugs b927740: OUTPUT«*** ␤    Unexpected "@primes"␤    expecting "=", operator, ")", context, ":" or "("␤    at /tmp/DkSiDMgPgq line 1, column 10␤»

[14:43] <Ulti> the inclusion of reduce as a first class method on perl6 is something I'm looking forward to

[14:43] <moritz> Ulti: what are "goal evaluated generators"?

[14:44] <moritz> nom: say (1..10).reduce(&[+])

[14:44] <p6eval> nom 28f3d6: OUTPUT«55␤»

[14:44] <jnthn> nom: my @a = @a;

[14:44] <p6eval> nom 28f3d6:  ( no output )

[14:44] <Ulti> basically its a generator that has some sense of a failed or successful output

[14:44] <jnthn> JimmyZ: Thanks...guess we never had the opportunity for that one to fail before :)

[14:44] <JimmyZ> nom: constant @primes = 2, 3

[14:44] <p6eval> nom 28f3d6:  ( no output )

[14:45] <Ulti> so you want numbers from a range that meet a criteria so you just give an expression of the criteria to get the generator rather than expressing your yield on that criteria

[14:45] <moritz> nom: say (1..10).grep: * %% 3

[14:45] <p6eval> nom 28f3d6: OUTPUT«3 6 9␤»

[14:45] <moritz> like that?

[14:45] <moritz> nom: say (1..10).map: * * 3

[14:45] <p6eval> nom 28f3d6: OUTPUT«3 6 9 12 15 18 21 24 27 30␤»

[14:46] * JimmyZ just can't understand constant @primes = .... @primes .... ;  which likes my @primes = @primes;

[14:46] <Ulti> the modulo one would be goal oriented if 1 to 10 wasn't actually generated at any point

[14:46] <Ulti> at least this is how I assume the internals of Icon work

[14:47] <Ulti> also there is a fail state which is generated and either ignored or something can act on that

[14:47] <Ulti> but the fail doesn't get put in any output

[14:47] <Ulti> kind of like an exception I guess

[14:47] <moritz> Ulti: so the generator can't be Turing complete, but is restricted to a subset that the goal analyzer can undertsand?

[14:47] <moritz> *understand

[14:48] <moritz> nom: say 0, *+3 ... ^ * > 10;

[14:48] <p6eval> nom 28f3d6: OUTPUT«No applicable candidates found to dispatch to for 'Numeric'. Available candidates are:␤:(Mu:U \$v, Mu %_!)␤␤  in method Numeric at src/gen/CORE.setting:659␤  in sub prefix:<^> at src/gen/CORE.setting:4417␤  in block <anon> at /tmp/vNXUVDwXxU:1␤␤»

[14:48] <Ulti> if by not turing complete you dont know if it will halt? then yes

[14:48] <moritz> nom: say 0, *+3 ...^ * > 10;

[14:48] <p6eval> nom 28f3d6: OUTPUT«0 3 6 9␤»

[14:48] <moritz> then we don't have such a thing, afaict

[14:49] <Ulti> there are lots of examples on rosettacode that probably do this sort of thing

[14:49] <Ulti> does perl6 have the concept of 'by' some interval?

[14:49] <Ulti> this is a recent beef with perl5 I've had

[14:51] <Ulti> nom: say 1.0,1.5 ... 10.0;

[14:51] <p6eval> nom 28f3d6: OUTPUT«1 1.5 2 2.5 3 3.5 4 4.5 5 5.5 6 6.5 7 7.5 8 8.5 9 9.5 10␤»

[14:51] <Ulti> YAY

[14:52] * Ulti hugs all perl6 people

[14:52] <Ulti> man that's natural too

[14:52] <mikemol> nom: say 1.0,1.3 ... 10.0;

[14:52] <p6eval> nom 28f3d6: OUTPUT«1 1.3 1.6 1.9 2.2 2.5 2.8 3.1 3.4 3.7 4 4.3 4.6 4.9 5.2 5.5 5.8 6.1 6.4 6.7 7 7.3 7.6 7.9 8.2 8.5 8.8 9.1 9.4 9.7 10␤»

[14:52] <mikemol> Neat

[14:52] * mikemol likes

[14:53] <Ulti> so moritz's example of *+3 is kind of like the operation you want to go to the next state in the sequence

[14:53] <masak> nom: say 10.0, 9.7 ... 1.0

[14:53] <p6eval> nom 28f3d6: OUTPUT«10 9.7 9.4 9.1 8.8 8.5 8.2 7.9 7.6 7.3 7 6.7 6.4 6.1 5.8 5.5 5.2 4.9 4.6 4.3 4 3.7 3.4 3.1 2.8 2.5 2.2 1.9 1.6 1.3 1␤»

[14:54] <tadzik> std: my $s = set <foo bar baz>; my $s

[14:54] <p6eval> std a540d4e: OUTPUT«Potential difficulties:␤  Useless redeclaration of variable $s (see line 1) at /tmp/FMk1lzAXgs line 1:␤------> [32mmy $s = set <foo bar baz>; my $s[33m⏏[31m<EOL>[0m␤ok 00:01 110m␤»

[14:54] <masak> infix:<...> basically does most of the things people feel are lacking from infix:<..> :)

[14:54] <tadzik> Useless redeclaration, hmm

[14:54] <JimmyZ> nom: say "1.0.jpg","1.3.jpg" ... "10.0.jpg";

[14:54] <p6eval> nom 28f3d6: OUTPUT«No applicable candidates found to dispatch to for 'Numeric'. Available candidates are:␤:(Mu:U \$v, Mu %_!)␤␤  in method Numeric at src/gen/CORE.setting:659␤  in sub infix:<-> at src/gen/CORE.setting:2257␤  in sub infix:<-> at src/gen/CORE.setting:2257␤  in block <anon…

[14:54] <JimmyZ> nom: say "1.0.jpg" ... "10.0.jpg";

[14:54] <p6eval> nom 28f3d6: OUTPUT«1.0.jpg 2.0.jpg 3.0.jpg 4.0.jpg 5.0.jpg 6.0.jpg 7.0.jpg 8.0.jpg 9.0.jpg 10.0.jpg␤»

[14:54] <masak> tadzik: yeah, because you declare it twice :P

[14:54] <Ulti> nom: say 1, *+(*+1)/* ... 5

[14:54] <p6eval> nom 28f3d6: OUTPUT«Not enough positional parameters passed; got 1 but expected 3␤  in block <anon> at /tmp/b5p663tgC7:1␤␤»

[14:54] <masak> tadzik: duh.

[14:54] *** agentzh left
[14:54] <tadzik> masak: https://github.com/perl6/roast/blob/master/S02-types/set.t#L134

[14:54] <tadzik> I'm wondering why does the test use it

[14:55] <masak> tadzik: looks like a thinko.

[14:55] <tadzik> I'm curious what was the correct thinko-ing :)

[14:55] <mikemol> nom: say 1.0,1.7 ... 3.0;

[14:55] <JimmyZ> nom: say "1.1.jpg" ... "10.0.jpg"; # timeout

[14:56] <p6eval> nom 28f3d6: OUTPUT«(timeout)»

[14:56] <p6eval> nom 28f3d6: OUTPUT«(timeout)»

[14:56] <moritz> nom: say '1.1.jpg'.succ

[14:56] <p6eval> nom 28f3d6: OUTPUT«2.1.jpg␤»

[14:56] <moritz> nom: say '9.1.jpg'.succ

[14:56] <p6eval> nom 28f3d6: OUTPUT«10.1.jpg␤»

[14:57] <moritz> so it never reaches 10.0.jpg

[14:57] <moritz> which is why it times out

[14:57] <moritz> if you want fuzzy conditions, provide a fuzzy condition

[14:58] <JimmyZ> nom: say "1.0.jpg","1.3.jpg" ... "10.0.jpg";

[14:58] <p6eval> nom 28f3d6: OUTPUT«No applicable candidates found to dispatch to for 'Numeric'. Available candidates are:␤:(Mu:U \$v, Mu %_!)␤␤  in method Numeric at src/gen/CORE.setting:659␤  in sub infix:<-> at src/gen/CORE.setting:2257␤  in sub infix:<-> at src/gen/CORE.setting:2257␤  in block <anon…

[14:58] <JimmyZ> and this one ? is it expected?

[14:58] <moritz> JimmyZ: well, maybe not the failure mode, but it's expected that it doesn't work

[14:59] <flussence> nom: say (1.0, 1.3 ... 10.0) X~ '.jpg' # :)

[14:59] <moritz> I mean, we have no primitive that tells us the difference between '1.0.jpg' and '1.3.jpg'

[14:59] <p6eval> nom 28f3d6: OUTPUT«1.jpg 1.3.jpg 1.6.jpg 1.9.jpg 2.2.jpg 2.5.jpg 2.8.jpg 3.1.jpg 3.4.jpg 3.7.jpg 4.jpg 4.3.jpg 4.6.jpg 4.9.jpg 5.2.jpg 5.5.jpg 5.8.jpg 6.1.jpg 6.4.jpg 6.7.jpg 7.jpg 7.3.jpg 7.6.jpg 7.9.jpg 8.2.jpg 8.5.jpg 8.8.jpg 9.1.jpg 9.4.jpg 9.7.jpg 10.jpg␤»

[14:59] <JimmyZ> nom: say 1.0,1.3 ... 10.0; 

[14:59] <p6eval> nom 28f3d6: OUTPUT«1 1.3 1.6 1.9 2.2 2.5 2.8 3.1 3.4 3.7 4 4.3 4.6 4.9 5.2 5.5 5.8 6.1 6.4 6.7 7 7.3 7.6 7.9 8.2 8.5 8.8 9.1 9.4 9.7 10␤»

[14:59] *** thou joined
[14:59] <moritz> flussence++

[14:59] <flussence> nom: say '1.3.jpg'.Numeric

[14:59] <p6eval> nom 28f3d6: OUTPUT«Failure.new(exception => X::AdHoc.new(payload => "trailing characters after number in conversion"))␤»

[15:00] <flussence> I'm not entirely sure how the numification works myself

[15:00] <moritz> well, it tries to parse it as a number

[15:00] <moritz> and gets tup to '1.3'

[15:00] <moritz> and then it finds another period, and can't make any sense of it

[15:00] <JimmyZ> nom: say "1.0.jpg" ... "10.0.jpg"; # I likes this one

[15:00] <p6eval> nom 28f3d6: OUTPUT«1.0.jpg 2.0.jpg 3.0.jpg 4.0.jpg 5.0.jpg 6.0.jpg 7.0.jpg 8.0.jpg 9.0.jpg 10.0.jpg␤»

[15:02] <flussence> (also, X~ seems like the sort of thing I can imagine using *a lot* - "say $html-tr-start X~ @contents X~ $html-tr-end"...)

[15:03] *** benabik joined
[15:04] *** wtw left
[15:07] *** havenn left
[15:07] *** havenn joined
[15:08] *** kaare_ joined
[15:10] <moritz> flussence: yes, it's a very useful meta op

[15:10] *** Kharec joined
[15:13] <Kharec> I've rakudo 2011.07 on a debian GNU/Linux Sid. I've got 4s for any command in perl6, even perl6 -v. What do you think? It's normal?

[15:14] <moritz> Kharec: it sounds excessive even for such an old version

[15:14] <moritz> Kharec: the last development version takes 0.3s for startup on my machine

[15:14] *** thou left
[15:14] <moritz> and perl6 -v runs in about 0.1s 

[15:15] <benabik> Did bs get merged?

[15:15] <tadzik> yet

[15:15] <tadzik> yes

[15:15] <Kharec> I try to compile the last version, so.

[15:15] <Kharec> thanks.

[15:16] <benabik> That explains it.  I have a script that pulls the latest changes and displays them to me.  Was wondering why it was so long.

[15:18] <benabik> Are there any regressions?

[15:19] *** Patterner left
[15:19] <moritz> benabik: the nqp build is busted on feather. We don't know why :/

[15:19] <benabik> moritz: That's a bad regression.

[15:19] <moritz> other than that, we aren't aware of any regressions

[15:20] <benabik> \o/  jnthn++

[15:21] <tadzik> are there any circumstances under which .WHAT would call .gist? :/

[15:21] *** Kharec left
[15:22] *** Psyche^ joined
[15:22] *** Psyche^ is now known as Patterner

[15:23] *** JimmyZ left
[15:23] <moritz> tadzik: erm, .WHAT returns the type object. It doesn't call .gist

[15:23] <moritz> say() calls .gist

[15:23] <tadzik> yeah, that was my thinking

[15:26] <masak> nom: say Int.^name

[15:26] <p6eval> nom 28f3d6: OUTPUT«Int␤»

[15:28] <benabik> nom: say Int.WHAT.^parents(:all)>>.name

[15:28] <p6eval> nom 28f3d6: OUTPUT«Method 'name' not found for invocant of class 'Real'␤  in method dispatch:<hyper> at src/gen/CORE.setting:840␤  in block <anon> at /tmp/Oko_yaKy6r:1␤␤»

[15:28] <benabik> Probably worded that wrong.  Whichever.

[15:30] <tadzik> Type check failed in assignment to '$s'; expected 'Set' but got 'Set'

[15:30] <tadzik> excellent :)

[15:31] <benabik> ...  That's not the word I'd use.  ;)

[15:33] *** tokuhirom left
[15:34] <masak> benabik: it's .^name, not .name

[15:34] <benabik> masak++

[15:34] <masak> tadzik: could you golf it and show it here?

[15:34] <benabik> nom: say Int.WHAT.^parents(:all)>>.^name

[15:34] <p6eval> nom 28f3d6: OUTPUT«Real Cool Any Mu␤»

[15:34] <masak> tadzik: I can imagine at least one way that might happen.

[15:34] <moritz> fwiw Int.WHAT === Int

[15:34] <masak> nom: my Set $a = set 1, 2, 3; say $a

[15:35] <p6eval> nom 28f3d6: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&set' called (line 1)␤»

[15:35] <tadzik> $s.^mro returns Set() Any() Mu()

[15:35] <masak> nom: my Set $a = Set.new(1, 2, 3); say $a

[15:35] <p6eval> nom 28f3d6: OUTPUT«Default constructor only takes named arguments␤  in method new at src/gen/CORE.setting:571␤  in block <anon> at /tmp/jzrjSuBk23:1␤␤»

[15:35] <moritz> nom: my class A { }; sub f(A $) { }; { my class A { }; f(A) }

[15:35] <p6eval> nom 28f3d6: OUTPUT«Nominal type check failed for parameter ''; expected A but got A instead␤  in sub f at /tmp/dqCS255pSs:1␤  in block <anon> at /tmp/dqCS255pSs:1␤␤»

[15:35] <masak> nom: my Set $a = Set.new(); say $a

[15:35] <p6eval> nom 28f3d6: OUTPUT«Set.new()␤»

[15:35] <benabik> nom: say Int; say Int.WHAT

[15:35] <p6eval> nom 28f3d6: OUTPUT«Int()␤Int()␤»

[15:35] <masak> nom: my Set $a; { class Set {}; $a = Set.new }; say "alive"

[15:35] <benabik> Ah,  Int isa Int.  I forgot that.

[15:35] <p6eval> nom 28f3d6: OUTPUT«Type check failed in assignment to '$a'; expected 'Set' but got 'Set'␤  in block <anon> at /tmp/XrNINNxW8m:1␤␤»

[15:35] <tadzik> moritz: that's interesting

[15:35] <masak> tadzik: ^^

[15:35] <moritz> masak: I was faster :-)

[15:36] <tadzik> I also don't get it :)

[15:36] <masak> moritz: dang :)

[15:37] <moritz> Set is stubbed in src/core/stubs.pm

[15:37] <tadzik> ooh

[15:37] <moritz> (but not as a stub, just as an empty class declaration)

[15:38] <tadzik> and the one in niecza is not Iterable

[15:39] <moritz> niecza: say Iterable

[15:39] <p6eval> niecza v15-2-gd19c478: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared name:␤ 'Iterable' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1362 (die @ 3) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 33) ␤  at /hom…

[15:39] *** aindilis left
[15:39] <moritz> niecza doesn't have Iterable

[15:40] <masak> niecza: say KitchenSink

[15:40] <p6eval> niecza v15-2-gd19c478: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared name:␤ 'KitchenSink' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1362 (die @ 3) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 33) ␤  at /…

[15:41] *** aindilis joined
[15:46] *** Patterner left
[15:47] <[Coke]> I can try to debug the nqp thing on feather, but not anytime soon.

[15:47] <[Coke]> (like, saturday maybe.)

[15:47] <[Coke]> need to do moar $dayjob.

[15:50] *** Psyche^ joined
[15:50] *** Psyche^ is now known as Patterner

[15:54] * jnthn back

[15:55] <jnthn> Have we managed to get nqp build to explode on any machine besides feather?

[15:56] *** thou joined
[15:57] <lumi___> jnthn: Mine does

[15:57] *** benabik left
[15:58] <jnthn> lumi___: OK. Tell me about your OS/machine/bitness :)

[15:59] <lumi___> jnthn: 64bit linux

[16:00] <jnthn> lumi___: Hm. Same as feather. But...we have a bunch of 64bit linux that it works on too.

[16:00] * moritz tries on another box

[16:01] * jnthn wishes he could figure out a pattern...

[16:02] <lumi___> I'm still here for a short while, anything I should check?

[16:03] <moritz> lumi___: how old or new is your system?

[16:03] <moritz> feather is a Debian unstable, so much more recent than my boxes

[16:06] <jnthn> aha, I remembered my feather login details

[16:06] <bbkr> what is the proper way to assign default values to variables defined in parent class in child classes? I'm trying to make https://github.com/bbkr/jsonrpc/blob/master/lib/JSON/RPC/Error.pm#L46 work on 2012.02, however it complaints about attributes not declared despite fact that they are present in parent class.

[16:06] <lumi___> moritz: Ubuntu Natty

[16:07] <moritz> bbkr: you don't have access to the parent classes attributes

[16:08] <moritz> bbkr: if you want that to work, the parent class needs to declare them as rw

[16:09] <moritz> bbkr: or you can use methods instead of attributes

[16:09] <TimToady> masak: here's the same program written in the part of P6 that does support continuations: https://gist.github.com/1950874

[16:09] *** aindilis left
[16:09] <moritz> class JSON::RPC::ParseError does JSON::RPC::Error { method code() { -32700 }; method message() { 'Parse Error' } }

[16:10] <[Coke]> jnthn: are you using the specific version of parrot nqp is requiring or "latest" ?

[16:10] <TimToady> (only runs under niecza though)

[16:10] *** aindilis joined
[16:10] <jnthn> [Coke]: Specific I believe

[16:10] * [Coke] could setup a bisect, he supposes, to see if it's nqp.

[16:10] <moritz> I've observed the segfault with the specific parrot version on feather too

[16:11] <TimToady> masak: so we should really figure out how to cross-dress the regex engine to look more like a logic engine :)

[16:11] <masak> TimToady: now that's more like it.

[16:11] <jnthn> I'm building on feather now also

[16:12] <masak> TimToady: you haven't really managed to eliminate boilerplate, but I really appreciate the effort. it's in the right direction. :)

[16:12] <jnthn> moritz: Same backtrace as [Coke] posted?

[16:12] <moritz> jnthn: yes

[16:12] <masak> I also considered the regex engine for this, but for some reason I didn't finish that thought. TimToady++

[16:12] <jnthn> masak: If only we had a mechanism for eliminating syntactic boilerplate ;)

[16:12] <TimToady> we eliminate boilerplate with...er...macros...

[16:13] <masak> TimToady: :P

[16:13] * TimToady and jnthn have the same thought again...

[16:13] <masak> TimToady: one *really* nice thing is that the macro system already has &assert syntax.

[16:14] <masak> TimToady: in case you're in any doubt about it, that gist really deserves to be on RC.

[16:14] <bbkr> moritz: marking them as rw did not help when they were assigned in BUILD signature (like in my code) directly to $!name. I'll just move assignment into BUILD block. thanks

[16:14] <TimToady> was just thinking the same thing :)

[16:15] <jnthn> moritz: If you comment out src/6model/serialization.c:93-95 does it help?

[16:15] <jnthn> moritz: Though, I've got a build running here too so provided my feather build explodes can try it myself in a moment..

[16:15] <TimToady> though it's the wrong problem, the one from nothingmuch++ rather than the one from RC

[16:16] <moritz> jnthn: will try

[16:16] <moritz> my other 64bit linux machine also built nqp fine

[16:16] <TimToady> also, this one is definitely *not* a monadic solution, except in some baked in sense

[16:16] * masak tweeted it: http://twitter.com/carlmasak/status/175253153334300673

[16:18] <moritz> jnthn: no, doesn't help

[16:19] <jnthn> moritz: Different backtrace?

[16:19] * jnthn would be surprised if not given we just comment out one of the lines in the bt ;)

[16:20] <moritz> jnthn: on, seems to die one command later

[16:21] <moritz> or maybe not. I'm confused.

[16:22] <moritz> jnthn: https://gist.github.com/1950989

[16:22] <jnthn> Wow.

[16:22] <jnthn> So...something is very wrong with the string seen hash.

[16:23] <jnthn> That's a bizzare bug.

[16:23] <jnthn> It's now crashing on line 99 which inserts into that hash.

[16:24] <jnthn> ok, here's goes with an nqp build on feather...

[16:24] * jnthn waits for the explosion

[16:24] <moritz> fwiw my patch added 2 lines

[16:24] <moritz> (for commenting out)

[16:24] <moritz> so line numbers might be a bit off

[16:25] *** wolfman2000 left
[16:26] <jnthn> It segfaults.

[16:27] * [Coke] thinks nqp might not be ||make happy.

[16:28] *** att left
[16:31] <jnthn> wtf. Disabling the seen string hash makes it survive the build.

[16:32] *** pernatiy left
[16:32] *** pernatiy joined
[16:32] <Util> perl6: my @pi_b := (-> *@a { ( 2 * @a.elems ) ** 2 }) ... *; say @pi_b[^5].Str;

[16:32] <p6eval> rakudo 28f3d6: OUTPUT«0 0 0 0 0␤»

[16:32] <p6eval> ..pugs b927740: OUTPUT«*** ␤    Unexpected " say"␤    at /tmp/X1mD9cILIT line 1, column 54␤»

[16:32] <p6eval> ..niecza v15-2-gd19c478: OUTPUT«0 4 16 36 64␤»

[16:34] *** havenn left
[16:34] <[Coke]> doesn't help the bisect that many of these aren't compiling for non-segfaulty reasons.

[16:35] <jnthn> [Coke]: Maybe due to differeing Parrot version needs or some such

[16:35] <jnthn> [Coke]: Don't worry with the bisect - I don't think it'll be very informative.

[16:36] <[Coke]> could be, I'm testing against the one I pulled originally.

[16:36] <[Coke]> ok.

[16:36] <[Coke]> I'll leave it running, JIC.

[16:38] *** MayDaniel joined
[16:40] <Util> Is the behavior of my code a known Rakudo bug?

[16:41] <moritz> Util: we don't run t/spec/S03-sequence/limit-arity-2-or-more.t so in some sense it's known

[16:41] <Util> perl6: my @pi_b := (-> *@a {@a.elems}) ... *; say @pi_b[^5].Str;

[16:42] <p6eval> rakudo 28f3d6: OUTPUT«0 0 0 0 0␤»

[16:42] <p6eval> ..niecza v15-2-gd19c478: OUTPUT«0 1 2 3 4␤»

[16:42] <p6eval> ..pugs b927740: OUTPUT«*** ␤    Unexpected " say"␤    at /tmp/IJaFMACF7T line 1, column 39␤»

[16:42] <Util> moritz: thanks

[16:43] *** pernatiy left
[16:47] <TimToady> masak: the problem with generalizing the regex solution is that there is an implicit eval in the <{}> construct, and you can't easily pass thunks or other hardrefs through that; it really wants quasi/unquasi

[16:48] <TimToady> even switching from numbers to strings shows the problem, since the amb would have to add quotes back in around the strings

[16:49] <masak> aye.

[16:49] <TimToady> so maybe I won't RC it just yet

[16:49] <masak> good news is that macros are really close to working for this kind of thing :)

[16:51] <jnthn> ffs, what is doing on with these strings...

[16:51] <jnthn> *going

[16:53] <TimToady> masak: here's the RC version sans dethunking, and assuming strings: https://gist.github.com/1951347

[16:54] <TimToady> also works in niecza, and has a weird error in rakudo

[16:55] <masak> najs.

[16:55] <TimToady> one would like to be able to abstrat the abcd-ness of it though

[16:55] <TimToady> *stract

[16:56] <TimToady> without losing the search tree pruning benefits

[16:56] <masak> it doesn't bother me so much.

[16:56] <masak> at least it feels less important that highlighting the 'amb' and the assertions.

[16:56] <masak> than*

[16:57] <TimToady> yes, but it's another dimension of boilerplate

[16:57] <masak> nod

[16:57] <TimToady> one wants a stack-based amb/assert

[16:58] <TimToady> so that one can use an amb-containing block recursively

[16:59] <TimToady> or at least loopily, if don't consider Kleene recursive :)

[17:00] *** benabik joined
[17:00] *** marmalade joined
[17:00] <masak> ;)

[17:04] *** birdwind1pbird left
[17:04] *** packetknife joined
[17:05] * masak decommutes

[17:05] *** havenn joined
[17:11] <tadzik> Method 'pred' not found for invocant of class 'Scalar'

[17:11] <tadzik> is Scalar even a Perl 6 type?

[17:11] <moritz> yes

[17:11] <moritz> it probably means you are missing a decontainerize somewhere

[17:11] *** att joined
[17:12] <tadzik> it's just KeyBag code, I don't think it's using any cont-decont magic

[17:12] <jnthn> Well, or somewhere there's one too many containers...

[17:13] * TimToady savors having used the masaktician to distract the masakbot from submitting the rakudobug I blatantly mentioned above

[17:14] <jnthn> f6099d52

[17:14] *** dakkar left
[17:14] <jnthn> oops

[17:17] *** fglock joined
[17:17] <bbkr> how to force Exception to print customized message to console if thrown? previously it was enough to provide Str {} method, however in 2012.02 all it prints is package name

[17:18] *** ab5tract left
[17:18] <moritz> bbkr: you have to inherit from Exception

[17:19] <bbkr> which I already did

[17:19] <moritz> bbkr: then method message() provides the actual message, and method .gist the full output (usually message + backtrace)

[17:19] <moritz> nom: class MyFoo is Exception { methodd message() { 'OH NOEZ' } }; die MyFoo.new

[17:19] <p6eval> nom 28f3d6: OUTPUT«===SORRY!===␤Unable to parse blockoid, couldn't find final '}' at line 2␤»

[17:19] <TimToady> it rubs me the wrong way when 'gist' means anti-summarize rather than summarize

[17:20] <moritz> nom: class MyFoo is Exception { method message() { 'OH NOEZ' } }; die MyFoo.new

[17:20] <p6eval> nom 28f3d6: OUTPUT«OH NOEZ␤  in block <anon> at /tmp/0tJoeCAJo8:1␤␤»

[17:20] *** dakkar joined
[17:20] <moritz> TimToady: well, it's a summary of all the data available wihin the exception

[17:20] <moritz> TimToady: including a summary of the backtrace (not the full one) and the message

[17:21] <sorear> good * #perl6

[17:21] <sorear> (this is a 5-minute driveby)

[17:21] <moritz> bbkr: maybe you have a .gist method that is not constrained to type objects?

[17:21] <moritz> bbkr: or maybe you are throwing a type object as the exception?

[17:21] <moritz> nom: class MyFoo is Exception { method message() { 'OH NOEZ' } }; die MyFoo

[17:21] <p6eval> nom 28f3d6: OUTPUT«Cannot look up attributes in a type object␤  in block <anon> at /tmp/2r8PyQjOmO:1␤␤»

[17:21] <moritz> hm

[17:22] <bbkr> moritz: thanks, gist was what I was looking for, works

[17:23] *** packetknife left
[17:24] *** daxim left
[17:32] <tadzik> nom: https://gist.github.com/1951559

[17:32] <p6eval> nom 28f3d6: OUTPUT«No applicable candidates found to dispatch to for 'Numeric'. Available candidates are:␤:(Mu:U \$v, Mu %_!)␤␤  in method Numeric at src/gen/CORE.setting:659␤  in sub infix:<-> at src/gen/CORE.setting:2257␤  in block <anon> at /tmp/vhMUlKQS3T:16␤␤»

[17:32] <tadzik> there's something wrong here

[17:32] <tadzik> and $a<foo>.WHAT is indeed a Scalar()

[17:34] <jnthn> well...

[17:34] <jnthn> FETCH => { %!elems.exists($k) ?? %!elems{$k} !! 0 }

[17:35] <jnthn> %!elems{$k} will returns a scalar

[17:35] <tadzik> it wants a decont

[17:35] <tadzik> why so?

[17:35] <jnthn> Because it's a Perl 6 hash and Perl 6 hashes return scalars.

[17:35] <jnthn> And a normal closrue doesn't decontainerize its results

[17:35] <tadzik> hmm

[17:35] <jnthn> try FETCH => sub { %!elems.exists($k) ?? %!elems{$k} !! 0 }

[17:36] <tadzik> it then says Too many positional parameters passed; got 1 but expected 0

[17:37] <TimToady> ooh, bs cut the startup time of hello world by about 60%, jnthn++

[17:37] * [Coke] is tired of dealing with perl6hate

[17:38] <jnthn> tadzik: oh, s/sub/method/

[17:38] <TimToady> ... 3. then they fight you

[17:38] <tadzik> ha

[17:38] <[Coke]> though in their defense, I did just some them the amb gist.

[17:38] *** simcop2387 left
[17:38] <tadzik> jnthn: then it gives Method 'exists' not found for invocant of class 'Method'

[17:38] <TimToady> the regex one?

[17:38] <[Coke]> I did warn them it was evil, but apparently that was insufficient.

[17:38] <[Coke]> TimToady: Aye.

[17:39] <tadzik> let me guess: "omg this Perl 6 is so crazy do you guys never learn"?

[17:39] <jnthn> tadzik: ah...yeah...

[17:39] <jnthn> tadzik: ick.

[17:39] <jnthn> tadzik: If you write method it gets the wrong set of attrs I guess

[17:39] <jnthn> tadzik: try sub ($s) { ... } or some such

[17:39] <tadzik> jnthn: this decont stuff, I wonder why I never stumbled upon this before

[17:40] <jnthn> tadzik: Because you didn't use Proxy before? :)

[17:40] <tadzik> jnthn: I did sub ($) {} and it didn't fix anything

[17:40] <tadzik> jnthn: yes, may be :)

[17:40] <benabik> Proxy is an odd beast

[17:40] <tadzik> and it's fine with bare 0

[17:40] *** simcop2387 joined
[17:41] <[Coke]> rakudo: constant fib := 0, 1, *+* ... *; say fib[100]

[17:41] <p6eval> rakudo 28f3d6: OUTPUT«===SORRY!===␤Type List cannot accept type arguments␤»

[17:41] <benabik> What?

[17:41] <jnthn> ...wow!

[17:41] <jnthn> constants.t needs more tests :)

[17:42] <jnthn> tadzik: moment, trying something here...

[17:45] <TimToady> rakudo: constant Int fib = 0, 1, *+* ... *; say fib[100]

[17:45] <p6eval> rakudo 28f3d6: OUTPUT«===SORRY!===␤Method 'sorry' not found for invocant of class 'Perl6::Grammar'␤»

[17:45] <tadzik> hah

[17:45] <TimToady> :)

[17:45] <dalek> rakudo/nom: 93603c6 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[17:45] <dalek> rakudo/nom: Have a crack at making Proxy more robust for tadzik++.

[17:45] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/93603c62cc

[17:46] <tadzik> yay, just for me! :)

[17:46] <jnthn> tadzik: It fixes your gist.

[17:46] <tadzik> does it work for 0 too, no double-decont stuff?

[17:48] <jnthn> say $a<baz> - 1;

[17:48] <jnthn> gives -1

[17:48] <tadzik> ok, cool

[17:48] <jnthn> I'm going to do a workaround for the segfault for now

[17:48] <jnthn> (the nqp one)

[17:49] <jnthn> It's suboptimal but less suboptimal than the thing segfaulting. I'll go hunting the bug some other time - it's something weird.

[17:50] <tadzik> jnthn: how hard will be implementing :exists and :delete adverbs?

[17:51] <jnthn> Needs changes to the OPP I guess.

[17:52] *** isBEKaml joined
[17:54] <dalek> nqp: c314198 | jnthn++ | src/6model/serialization.c:

[17:54] <dalek> nqp: Disable the seen strings optimization for now; for some reason, a dodgy string sneaks in somewhere along the way, and on some platforms that leads to segfaults. Need to hunt this down for real, but this at least seems to fix the build.

[17:54] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c314198aeb

[17:54] *** autark joined
[17:55] *** preflex_ joined
[17:56] *** preflex left
[17:56] *** preflex_ is now known as preflex

[17:57] *** MayDaniel left
[18:00] *** skipper joined
[18:02] <[Coke]> jnthn: don't forget to bump rakudo.

[18:02] *** havenn left
[18:03] *** dakkar left
[18:04] <jnthn> [Coke]++

[18:04] <dalek> rakudo/nom: d34723f | jnthn++ | tools/build/NQP_REVISION:

[18:04] <dalek> rakudo/nom: Bump to NQP revision that hopefully doesn't explode on feather.

[18:04] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d34723f925

[18:06] <[Coke]> ugh. parrot repo is SO BIG.

[18:06] * [Coke] wonders if we could someone compress the one on github so it'll download faster.

[18:10] <jnthn> nom: constant fib = 0, 1, *+* ... *; say fib.postcircumfix:<[ ]>(100)

[18:10] <p6eval> nom 93603c: OUTPUT«354224848179261915075␤»

[18:10] <flussence> there's not a whole lot you can do short of `git repack -a -d`

[18:12] *** mj41 left
[18:12] <flussence> (well, maybe we could convince the git maintainers to add lzma2 compression, but that's a bit of a stretch)

[18:13] <[Coke]> flussence: would that help parrot, do you think?

[18:13] <[Coke]> (the repack, not pinging gitmaintainers)

[18:13] <[Coke]> jnthn: ... are you sure that fixed the build?

[18:14] <jnthn> [Coke]: It did on my testing box.

[18:14] * [Coke] tries one more time.

[18:14] <jnthn> [Coke]: But it's a workaround.

[18:14] <jnthn> There's a real underlying issue still to find.

[18:14] <[Coke]> my rakudo build might not have grabbed nqp-latest. 

[18:15] <flussence> [Coke]: I've only a vague understanding of git's internals, but I believe repacking like that puts the entire history into a single blob which should be much smaller than multiple bits... if they don't already do that.

[18:15] <sjn> http://code.foo.no/2012/03/01/invitation-to-perl-6-patterns-hackathon-2012

[18:15] <sjn> \o/

[18:19] <jnthn> \o/

[18:21] <tadzik> \o/

[18:22] <[Coke]> jnthn++ #whee, only 4m16s to compile rakudo with -j3 on feather.

[18:26] <jnthn> It's an improvement, though still slow.

[18:29] *** snearch joined
[18:30] *** fglock left
[18:31] <dalek> rakudo/nom: d4e8e41 | jnthn++ | src/Perl6/Grammar.pm:

[18:31] <dalek> rakudo/nom: Fix 'constant fib := 0, 1, *+* ... *; say fib[100]'.

[18:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d4e8e41652

[18:31] <dalek> roast: fbfc883 | jnthn++ | S04-declarations/constant.t:

[18:31] <dalek> roast: Add constant with ... test.

[18:31] <dalek> roast: review: https://github.com/perl6/roast/commit/fbfc883644

[18:33] <dalek> rakudo/nom: bc82980 | tadzik++ | / (3 files):

[18:33] <dalek> rakudo/nom: Port Set from niecza

[18:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bc829806b9

[18:33] <dalek> rakudo/nom: 60a6a55 | tadzik++ | / (3 files):

[18:33] <dalek> rakudo/nom: Port Bag from niecza

[18:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/60a6a55c79

[18:33] <dalek> rakudo/nom: d524c6a | tadzik++ | src/core/ (2 files):

[18:33] <dalek> rakudo/nom: Port KeyBag from niecza

[18:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d524c6a299

[18:33] <dalek> rakudo/nom: bb2e1f8 | tadzik++ | src/core/ (2 files):

[18:33] <dalek> rakudo/nom: Port KeySet from niecza

[18:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/bb2e1f8151

[18:34] <jnthn> omg.

[18:34] <jnthn> tadzik++

[18:34] *** sisar left
[18:34] *** packetknife joined
[18:35] <[Coke]> 3.say took .2s with bs. it took 2.313s, 0.718s, 0.724s pre-bs.

[18:35] <jnthn> perl6 -e "3.say", I assume?

[18:35] <[Coke]> aye.

[18:35] <jnthn> :)

[18:35] <jnthn> I assume this also means you got bs built on feather?

[18:35] <dalek> roast: 71f1532 | tadzik++ | S02-types/ (4 files):

[18:35] <dalek> roast: Tune and fudge bag, keybag, keyset and set tests for Rakudo and for Greater Good

[18:35] <dalek> roast: review: https://github.com/perl6/roast/commit/71f1532c6e

[18:35] <benabik> [Coke]: Why three pre-bs times?

[18:36] <[Coke]> (.199+.2)/(.718+.724)

[18:36] <[Coke]> b: say (.199+.2)/(.718+.724)

[18:36] <p6eval> b 1b7dd1: OUTPUT«0.276699029126214␤»

[18:36] <[Coke]> benabik: because they were very different.

[18:36] <[Coke]> jnthn: aye.

[18:36] <[Coke]> jnthn: I'm interested to see what this does to the simul-spec-run.

[18:37] <dalek> rakudo/nom: 8f765aa | tadzik++ | t/spectest.data:

[18:37] <dalek> rakudo/nom: Turn on set, keyset, bag and keybag spectests

[18:37] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8f765aa00a

[18:37] <tadzik> ah that feels good :)

[18:37] <jnthn> my role Baggy { Any }

[18:37] <jnthn> ...why the Any?

[18:37] <tadzik> ask colomon :)

[18:38] <tadzik> I wasn't sure about that one, so I didn't touch it beyond necessity

[18:38] <jnthn> niecza: my role BaggyTrousers { }

[18:38] <benabik> I bet that changes the spectest numbers a bit.

[18:38] <p6eval> niecza v15-2-gd19c478:  ( no output )

[18:38] <TimToady> niecza: my role Sappy { }

[18:38] <p6eval> niecza v15-2-gd19c478:  ( no output )

[18:38] <TimToady> seems to parse

[18:38] <benabik> tadzik: Did they require many changes?

[18:38] <jnthn> niecza: my role BaggyTrousers { }; class Madness does BaggyTrousers { }

[18:38] <p6eval> niecza v15-2-gd19c478:  ( no output )

[18:38] <jnthn> hm

[18:38] <tadzik> benabik: a few

[18:38] <dalek> rakudo/nom: 01386ea | tadzik++ | src/core/ (2 files):

[18:38] <dalek> rakudo/nom: my-ify KeySet and KeyBag

[18:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/01386ea6b4

[18:39] <tadzik> in my mind I count 3n

[18:39] <tadzik> :exists and :delete, calling positionals by name, typed hashes

[18:39] <[Coke]> hopefully niecza can port the temporal stuff to catch up again. ;)

[18:40] <tadzik> rakudo is now +500 or so tests

[18:40] <TimToady> [Coke]: needs the ability to multi with built-ins

[18:40] <tadzik> nom: say 93 + 106 + 112 + 144

[18:40] <p6eval> nom d34723: OUTPUT«455␤»

[18:40] <TimToady> Date stuff overloads built-ins ferociously

[18:40] <tadzik> almost 500

[18:41] *** alvis left
[18:43] <jnthn> tadzik: typed hashes?

[18:43] <jnthn> Rakudo has those.

[18:44] <tadzik> not in the setting it seems

[18:44] <tadzik> they blew fantastically :)

[18:44] <jnthn> Ah.

[18:44] <jnthn> I can believe that.

[18:44] <benabik> Ordering issue?

[18:44] <tadzik> some PARAMETRIZE_TYPE fun

[18:44] <jnthn> Possibly, or possibly something else

[18:44] <jnthn> It's hard to guess without seeing the error.

[18:44] * tadzik afks

[18:48] <jnthn> TimToady: iiuc, adverbs are handled by infixish parsing them, and the EXPR spotting they're "fake"?

[18:49] <TimToady> yup

[18:49] <jnthn> TimToady: What happens in reduce?

[18:49] <TimToady> don't think they ever get that far

[18:49] <TimToady> but let me check

[18:50] <TimToady>             next;  # not really an infix, so keep trying

[18:50] <jnthn> oh yes they do :)

[18:50] <jnthn>         if $infix<fake> {

[18:50] <jnthn>             push @opstack, $infix;

[18:50] <jnthn>             &reduce();

[18:50] <jnthn>             next;  # not really an infix, so keep trying

[18:50] <jnthn>         }

[18:50] <TimToady> skips the reduce

[18:50] <TimToady> oh, duh

[18:50] <TimToady> I guess it treats them as postfix, basically

[18:51] <Teratogen> so Perl 6 has prefix, infix, and postfix?

[18:51] <Teratogen> goodbye Forth!

[18:52] <TimToady>  | <colonpair> {

[18:52] <TimToady>                 $<fake> = 1;

[18:52] <TimToady>                 $<sym> = ':';

[18:52] <TimToady>                 %<O><prec> = %item_assignment<prec>;  # actual test is non-inclusive!

[18:52] <TimToady>                 %<O><assoc> = 'unary';

[18:52] <TimToady>                 %<O><dba> = 'adverb';

[18:52] *** localhost left
[18:52] <benabik> Teratogen: It has prefix, infix, and postfix operators, ala C.  (++$x, $x++, $x + 1)

[18:52] * TimToady needs to turn all those hash lookups into attributes one of the decades...

[18:53] <jnthn> From there it seems they end up on the termstack

[18:53] <TimToady> sure, that's what reduce does

[18:54] <TimToady> moves things from opstack to termstack

[18:54] *** localhost joined
[18:54] *** fglock joined
[18:54] *** alvis joined
[18:57] <dalek> roast: 616002e | coke++ | S02-types/num.t:

[18:57] <dalek> roast: pugs fudges

[18:57] <dalek> roast: review: https://github.com/perl6/roast/commit/616002e175

[18:57] <dalek> Pugs.hs: 74636ed | coke++ | t/spectest.data:

[18:57] <dalek> Pugs.hs: run fudged test

[18:57] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/74636ed3e1

[18:58] <jnthn> TimToady: Hm, think I need to look at it when my brain is less frazzled...at least I understand what it's doing a little more now :)

[19:00] * TimToady has to $job anyhoo

[19:05] *** MayDaniel joined
[19:06] *** alvis left
[19:16] <dalek> roast: 0976c3a | jnthn++ | S04-phasers/check.t:

[19:16] <dalek> roast: Tests that want to check the action of things at BEGIN/CHECK time should not go assigning the string at normal time. Otherwise, the data to test will be lost. :-)

[19:16] <dalek> roast: review: https://github.com/perl6/roast/commit/0976c3af01

[19:17] *** bluescreen10 left
[19:20] *** skipper left
[19:22] *** fsergot left
[19:22] <dalek> rakudo/nom: d73f458 | jnthn++ | src/Perl6/ (3 files):

[19:22] <dalek> rakudo/nom: Fix CHECK phasers in r-value context; also move all CHECK handling into World.

[19:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d73f4581a2

[19:22] <dalek> rakudo/nom: 20494ee | jnthn++ | t/spectest.data:

[19:22] <dalek> rakudo/nom: Turn on S04-phasers/check.t.

[19:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/20494eea32

[19:22] <dalek> rakudo/nom: 6d0c4a5 | jnthn++ | docs/ChangeLog:

[19:22] <dalek> rakudo/nom: Some more ChangeLog entries.

[19:22] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6d0c4a5122

[19:23] *** alvis joined
[19:28] *** birdwindupbird joined
[19:33] *** bluescreen10 joined
[19:38] *** imarcusthis left
[19:44] *** fsergot joined
[19:48] <[Coke]>  03/01/2012 - rakudo++ ; niecza (98.55%); pugs (29.46%)

[19:48] <[Coke]> "niecza",     20268,     8,   749,  1530, 22555, 23754

[19:48] <[Coke]> "pugs"  ,      6060,     6,  2767,   741,  9573, 23563

[19:48] <[Coke]> "rakudo",     20566,    28,   633,  1882, 23109, 23764

[19:48] *** bluescreen10 left
[19:48] *** imarcusthis joined
[19:58] *** mj41 joined
[19:59] *** NamelessTee left
[19:59] *** bluescreen10 joined
[20:00] *** wooden left
[20:02] *** imarcusthis left
[20:05] *** imarcusthis joined
[20:11] <dalek> rakudo/nom: 48af8ca | jnthn++ | t/spectest.data:

[20:11] <dalek> rakudo/nom: We pass S04-phasers/rvalue.t as it is currently fudged.

[20:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/48af8cad60

[20:15] *** fsergot left
[20:18] <masak> rakudo's in the lead! \o/

[20:18] <jnthn> :)

[20:18] <masak> actually I don't know who or what I'm cheering for. I just love it that the race is so even.

[20:18] <masak> and I'm quite amazed that Pugs is nearing 30%.

[20:19] <masak> that is *before* we start bringing it 5 years forward in time.

[20:21] <[Coke]> I think I can hit 50% without too much effort.

[20:21] <arnsholt> masak++, [Coke]++, and everyone else I don't know about

[20:21] <[Coke]> (that is, without writing any haskell)

[20:21] <masak> arnsholt: I ain't done nothing. though I plan to.

[20:21] <masak> [Coke]++

[20:21] <benabik> tadzik++ # porting Set and putting rakudo in the lead

[20:21] <arnsholt> Well, I think you were an important source of inspiration, at least

[20:22] <benabik> (Not that it a race, but hey)

[20:27] <masak> yeah, I still very much like the idea of reviving Pugs.

[20:42] *** havenn joined
[20:43] <masak> nom: https://gist.github.com/1951347

[20:43] <p6eval> nom 48af8c: OUTPUT«===SORRY!===␤Variable $a is not declared␤at eval_0:1␤»

[20:43] <masak> huh!

[20:44] <jnthn> nom: /:my $a/

[20:44] <p6eval> nom 48af8c: OUTPUT«===SORRY!===␤Unrecognized regex metacharacter (must be quoted to match literally) at line 1, near "my $a/"␤»

[20:44] <jnthn> nom: /:my $a;/

[20:44] <p6eval> nom 48af8c:  ( no output )

[20:44] <jnthn> nom: /:my $a = 42; { say $a }/

[20:44] <p6eval> nom 48af8c:  ( no output )

[20:45] <jnthn> nom: "x" ~~ /:my $a = 42; { say $a } <?>/

[20:45] <p6eval> nom 48af8c: OUTPUT«42␤»

[20:45] *** bluescreen10 left
[20:45] <jnthn> nom: "x" ~~ /:my ($a, $b); { say $a } <?>/

[20:45] <p6eval> nom 48af8c: OUTPUT«Any()␤»

[20:46] <masak> tadzik++ # did anyone mention that you're awesome?

[20:47] <jnthn> oh...

[20:47] <jnthn> it's eval'ing that regex, no?

[20:47] <jnthn> masak: afk for 30 mins or so, but if you can golf that one it'd be nice... 

[20:48] <masak> gotcha.

[20:48] <masak> I'll golf it and then RT it.

[20:49] <jnthn> tsm

[20:49] * jnthn bbiab

[20:50] <masak> "tsm"? "Tapas, Salsa, Mojito"? :)

[20:50] <masak> "Three Small Musketeers"?

[20:51] <masak> "Trap Some Mice"?

[20:51] <TimToady> that's so mysterious?

[20:51] <masak> true, such madness.

[20:52] <masak> though somewhat meek.

[20:53] <TimToady> Try Sado-Masakism!

[20:55] *** birdwindupbird left
[20:58] <masak> *lol*

[20:58] <masak> tempting, said masak.

[20:58] <masak> nom: '' ~~ / :my $a; <{ '$a' }> /

[20:58] <p6eval> nom 48af8c: OUTPUT«===SORRY!===␤Variable $a is not declared␤at eval_0:1␤»

[20:58] <masak> golf'd.

[20:58] * masak submits tapas

[20:59] <TimToady> don't bring him into it...

[21:00] <masak> :D

[21:00] <masak> "who f***ing mentioned tapas?"

[21:03] *** noam left
[21:04] *** noam joined
[21:04] <TimToady> commuting &

[21:07] *** fhelmberger_ joined
[21:10] *** fhelmberger_ left
[21:11] *** havenn left
[21:15] <masak> nom: say "fooooo" ~~ / (<{ ". ** 2..*" }>) /

[21:15] <p6eval> nom 48af8c: OUTPUT«=> <fooooo>␤ 0 => <fooooo>␤␤»

[21:15] <masak> oh, right.

[21:15] *** fglock left
[21:16] <masak> nom: say "fooooo" ~~ / <{ '(.) $0' }> /

[21:16] <p6eval> nom 48af8c: OUTPUT«=> <oo>␤␤»

[21:16] <masak> nom: say "fooooo" ~~ / <{ '(.) $0+' }> /

[21:16] <p6eval> nom 48af8c: OUTPUT«=> <ooooo>␤␤»

[21:16] <masak> niecza: say "fooooo" ~~ / <{ '(.) $0+' }> /

[21:16] <p6eval> niecza v15-2-gd19c478: OUTPUT«#<match from(1) to(6) text(ooooo) pos([].list) named({}.hash)>␤»

[21:17] <masak> Niecza and Rakudo agree on this.

[21:17] <benabik> That seems confusing to me.  I wouldn't expect $0 to be expanded inside single quotes.

[21:17] <masak> I'm less convinced.

[21:17] <masak> benabik: that's not what's happening.

[21:17] *** bbkr1 joined
[21:17] <masak> benabik: the string gets turned into part of the regex.

[21:17] <tadzik> thanks, sometimes, masak 

[21:18] <masak> tadzik: sure, mate.

[21:18] <bbkr1> rakudo: my @t; if [+]@t {} # parsing bug or desired behavior? it was legal syntax in 2012.01

[21:18] <p6eval> rakudo 48af8c: OUTPUT«===SORRY!===␤Missing block␤at /tmp/PEfvciKkRV:1␤»

[21:18] <masak> bbkr1: desired behavior.

[21:18] <masak> std: my @t; [+]@t

[21:18] <p6eval> std a540d4e: OUTPUT«[31m===[0mSORRY![31m===[0m␤Two terms in a row (listop with args requires whitespace or parens) at /tmp/QuHMR4YUeC line 1:␤------> [32mmy @t; [+][33m⏏[31m@t[0m␤    expecting any of:␤       POST␤   argument list␤  bracketed infix␤        infix or meta-infix␤    postfix␤   

[21:18] <p6eval> ..    postfix_p…

[21:19] <tadzik> masak: maybe I should add Pod tests too while I'm on it :)

[21:19] <bbkr1> masak++ thanks for explanation

[21:19] <masak> :)

[21:19] <benabik> masak: Strings returned from blocks get used as part of the regex?

[21:20] <masak> benabik: strings returned from <{ }> thingies get used as part of the regex.

[21:20] <masak> that's Perl 6's variant of Perl 5's rather reckless interpolation.

[21:22] <benabik> masak: I would have expected it to just be code run during the regex.  But I guess that's more what <?{ }> is for.

[21:22] <masak> yeah. or just { }

[21:22] <masak> nom: '' ~~ / { say "OH HAI" } /

[21:22] <p6eval> nom 48af8c: OUTPUT«OH HAI␤»

[21:23] <masak> nom: say "OH HAI" ~~ / <{ q['OH HAI'] }> /

[21:23] <p6eval> nom 48af8c: OUTPUT«=> <OH HAI>␤␤»

[21:25] <masak> anyway, my point was...

[21:25] <masak> how parens relate to capture groupds within a regex is a *static* thing in Perl 6 regexes.

[21:25] <masak> it's a property of the AST.

[21:26] <masak> so how can the (.) within the string within the <{ }> thingie (which interpolates at run time) get allocated the $0 group?

[21:27] *** Alias left
[21:29] * jnthn back

[21:29] * tadzik front

[21:30] <masak> o.O

[21:31] <tadzik> :>

[21:31] <tadzik> O.o

[21:31] <masak> jnthn: https://rt.perl.org/rt3/Ticket/Display.html?id=111474

[21:32] <jnthn> omgz, I abbreviate tack så mycket and look what happens :P

[21:32] <[Coke]> t'aint so much.

[21:33] <masak> jnthn: I wouldn't have been able to guess that in a million years.

[21:33] <jnthn> masak: Seems it's a case of an issue that comes up elsewhere too...ah, attribute initializers.

[21:34] *** fsergot joined
[21:34] <masak> attribute initializers!?

[21:34] <jnthn> masak: It works as "thanks so much" too :P

[21:34] <jnthn> nom: class A { has $!a = my $x = 42; say $x }

[21:34] <p6eval> nom 48af8c: OUTPUT«===SORRY!===␤Variable $x is not declared␤at /tmp/1ARNKEtPJC:1␤»

[21:34] <jnthn> Same underlying issue

[21:34] <fsergot> 'night #perl6!  o/

[21:34] <masak> 'branoc!

[21:34] <jnthn> 'night, fsergot 

[21:35] <masak> jnthn: thunking in the wrong context?

[21:35] <jnthn> masak: In both cases we have an extra call frame (in regexes due to the language switch, in this case because of the implied submethod), but we want declarative things to consider that frame invisible.

[21:37] <masak> yeah.

[21:37] <jnthn> Just needs a little fiddle somewhere. Shouldn't be too hard.

[21:37] <masak> I wonder whether I'll not run into a very similar problem with quasis and macros.

[21:37] <jnthn> Just didn't settle on how I want to factor the solution yet.

[21:37] <jnthn> Probably 'cus I didn't think about it very hard yet... :)

[21:39] <jnthn> .oO( too busy doing this bs... )

[21:39] <masak> :)

[21:40] <tadzik> :)

[21:41] *** ashleydev left
[21:41] *** fhelmberger_ joined
[21:42] *** ashleydev joined
[21:47] *** Chillance joined
[21:59] *** att left
[22:03] *** kaare_ left
[22:06] *** sudokode left
[22:06] *** sudokode joined
[22:08] <tadzik> Files=632, Tests=22887, 1689 wallclock secs (11.11 usr  2.38 sys + 1659.79 cusr 147.54 csys = 1820.82 CPU)

[22:09] <tadzik> so many tests, where do they come from?

[22:09] <jnthn> t/spec/

[22:09] <dalek> roast: 75e6cb6 | tadzik++ | S26-documentation/ (10 files):

[22:09] <dalek> roast: Add S26 tests

[22:09] <dalek> roast: review: https://github.com/perl6/roast/commit/75e6cb63ce

[22:10] <jnthn> phenny: tell TimToady in method_def around line 1914, it seems it's not quite right since method_def is a rule, and sigspace wants spaces between <sigil>, '.', etc.

[22:10] <phenny> jnthn: I'll pass that on when TimToady is around.

[22:10] <jnthn> ooh!

[22:10] *** NamelessTee joined
[22:11] <dalek> rakudo/nom: 59c1c35 | tadzik++ | t (12 files):

[22:11] <dalek> rakudo/nom: Remove tests from t/pod, as they now live in roast, also remove podtest Makefile target. Run S26 tests

[22:11] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/59c1c35d93

[22:14] <benabik> t/02-embed/01-load.t fails for me on recent nom.  "Bad plan.  You planned 1 tests but ran 0."

[22:14] <jnthn> Don't think that's worked for...ages.

[22:14] <benabik> I thought it was... I tend not to install programs with failing tests.  But I could be hallucinatory.

[22:16] <[Coke]> fails on feather also. ... I never run 'make test', though, only 'make spectest'.

[22:17] <jnthn> Same...

[22:17] <benabik> If 02-load/* fails, then should it be removed?

[22:18] <[Coke]> segfaults here.

[22:18] *** MayDaniel left
[22:18] <benabik> I use make test to ensure that the result passes those basic sanity tests.  It's caught errors before.

[22:18] *** pernatiy joined
[22:19] <[Coke]> looks like the test is intended to be todo'd, anywya.

[22:19] <bbkr1> JSON::RPC and MongoDB works now on 2012.02, thanks for your help

[22:19] <[Coke]> So, skip it, instead.

[22:20] <dalek> std: 882094e | larry++ | STD.pm6:

[22:20] <dalek> std: don't allow whitespace in &.() et al. jnthn++

[22:20] <dalek> std: review: https://github.com/perl6/std/commit/882094e977

[22:20] <moritz> bbkr1++

[22:21] <jnthn> Maybe those should go in Star.

[22:23] <bbkr1> JSON::RPC supports now 90% of the 2.0 spec. remaining 10% are batches and notifications (rarely used) which I will add soon.

[22:24] *** snearch left
[22:24] * [Coke] is bummed that the idea of adding JSON to parrot really had no impact on any HLLs.

[22:25] <[Coke]> s/idea/act/, even.

[22:25] <bbkr1> MongoDB works for basic usage, but development waits for pack/unpack support that BSON protocol heavilly depends on, so this is at proof-of-concept stage

[22:25] <jnthn> Wow. It segfaults when unpacking the PBC file.

[22:28] <bbkr1> does anyone knows how to solve this NativeCall issue on OS X: http://nopaste.info/18ece6f55d.html ?

[22:30] <bbkr1> next module i want to start is GeoIP wrapper for Maxmind databases (they have also free versions included in most package repos) but this error shattered this dream :)

[22:31] <[Coke]> star: perl6 -e 'use NativeCall; sub foo() is native("bar") { * }; foo();

[22:31] <p6eval> star 2012.01: OUTPUT«===SORRY!===␤Confused at line 1, near "perl6 -e '"␤»

[22:31] <[Coke]> star: use NativeCall; sub foo() is native("bar") { * }; foo();

[22:31] <p6eval> star 2012.01: OUTPUT«Cannot locate native library 'bar.so'␤  in block <anon> at /home/p6eval/rakudo-star-2012.01/install/lib/parrot/3.11.0/languages/perl6/lib/NativeCall.pm6:102␤  in method postcircumfix:<( )> at /home/p6eval/rakudo-star-2012.01/install/lib/parrot/3.11.0/languages/perl6…

[22:32] <[Coke]> looks like _dlLoadLibrary is a windows thing.

[22:33] <jnthn> ?

[22:33] <bbkr1> so it somehow recognized OS incorrectly when building nativecall interface?

[22:33] <jnthn> dlLoadLibrary is the dyncall thingy

[22:33] <benabik> It means dyncall didn't link properly when building NQP.

[22:34] <[Coke]> jnthn: ah. the _ threw me.

[22:34] <benabik> I seem to recall some issue with 32b vs 64b causing link problems.

[22:34] <jnthn> Yeah, it looks like some fail while building

[22:34] <masak> [Coke]: I think it is difficult to have a thing such as JSON-in-Parrot have any significant impact in the HLLs, until there's a more fleshed-out HLL interop.

[22:34] <bbkr1> i'm on 32b, 11.3.0 Darwin Kernel 

[22:35] <masak> [Coke]: there will always be advantages to have a totally HLL-native implementation of something like JSON, even if interop is excellent, which it isn't.

[22:36] <jnthn> bbkr1: Fixing this ain't helped by me having just about zero knowledge about OSX... 

[22:37] <jnthn> http://dyncall.org/download.shtml mentions it on the supported platforms list though

[22:38] <jnthn> Though we pull the whole thing in to nqp_dyncall_ops

[22:38] <lue> hello world! o/

[22:39] <jnthn> hellue!

[22:39] <tadzik> o/

[22:39] <benabik> I seem to recall dyncall being an issue on OS X before.

[22:39] <benabik> Something to do with some config not being set right by NQP's Makefile.  I don't have the tuits to look into it tonight.

[22:39] *** vlkv joined
[22:39] *** vlkv is now known as gv

[22:40] <jnthn> Any tuits you do get would be cool. :)

[22:40] <jnthn> Maybe I should get myself some OSX access at some point...

[22:41] <benabik> I see a lot of "request for implicit conversion from ‘void *’ to ‘struct DLLib *’ not permitted in C++"

[22:41] <jnthn> I never understand those errors. 

[22:42] <jnthn> "Hi nice C compiler, please compile this." "OK dear, here you go. OH BTW, DESPITE YOU HAVING USED A C COMPILER, THIS WON'T WORK IN C++!!!"

[22:42] <geekosaur> warning level set too high

[22:42] <benabik> "ld: warning: ignoring file ../../3rdparty/dyncall/dyncall/libdyncall_s.a, file was built for archive which is not the architecture being linked (x86_64)"

[22:42] <benabik> That's the problem.

[22:43] <jnthn> whoa

[22:43] <jnthn> That looks...er...bad.

[22:43] <benabik> I _swear_ this was fixed in NQP before.  If someone wants to dig through git to find the fix, that'd be good.

[22:43] <bbkr1> I can provide OS X 10.7.3 free shell account if needed

[22:44] <benabik> I _think_ it's because dyncall is trying to auto-detect the architecture and OS X lies.

[22:44] <dalek> rakudo/nom: 3eded7b | jnthn++ | src/Perl6/ (2 files):

[22:44] <dalek> rakudo/nom: Support the short type-casting syntax from S13.

[22:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/3eded7be42

[22:44] <dalek> rakudo/nom: d0a2453 | jnthn++ | t/spectest.data:

[22:44] <dalek> rakudo/nom: 2 more test files.

[22:44] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d0a2453a51

[22:44] <benabik> `uname -p` says i386, but `uname -m` says x86_64

[22:45] <bbkr1> in my case both show "i386"

[22:46] <benabik> bbkr: On 10.7?

[22:46] <bbkr1> yes

[22:47] <benabik> Odd.

[22:49] <jnthn> masak: ^^ implements the shorter coercion syntax you asked about the other day

[22:49] <masak> \o/

[22:50] <geekosaur> I'm on 10.7.3, uname -p = i386, uname -m = x86_64, arch = i386

[22:50] <geekosaur> and I keep trying t type isainfo 0b which is wrong OS *facepalm*

[22:50] <geekosaur> isainfo -b

[22:50] <masak> jnthn: apparently, requests in 2012 have awesome response time. :)

[22:53] <jnthn> masak: At some time during GPW (or travel there/back) we should talk about what QAST needs to help support {{{ $a }}} in quasis.

[22:54] <bbkr1> my EFI is not 64b (despite the fact that CPU is), hence the difference. i'll try tomorrow on "early 2008" iMac at work if dyncall will build properly.

[22:54] <bbkr1> have a good night everyone :)

[22:54] <jnthn> 'night, bbkr1 

[22:54] *** bbkr1 left
[22:55] <masak> 'night, #perl6

[22:55] <benabik> Dyncall's configure says it's guessing arch x64, but it's still building i386

[22:56] * masak .oO( quasis AST )

[22:57] <geekosaur> EFI is irrelevant to the whole thing, OS X will prefer 64bit on any 64bit-capable CPU even if the EFI and running kernel are 32 bit...

[22:58] <benabik> Hm.  It appears to be building properly after a `git clean -xdf`

[22:59] <benabik> (make clean is not sufficient)

[22:59] * geekosaur still updating ports (and thereby repairing them, since the external HD most stuff was on is no longer available) and will look into updated rakudo/niecza when done

[23:00] <benabik> phenny: tell bbkr1 Try `git clean -xdf` in your NQP directory.  This will remove any files not under version control, and seemed to let dyncall build properly for me.

[23:00] <phenny> benabik: I'll pass that on when bbkr1 is around.

[23:01] <lue> jnthn: How much memory would you guess is saved by the thousands-of-lines-of-generated-PIR reduction in that one commit to rakudo/bs?

[23:02] <lue> (Last time I tried compiling, CORE.setting took up all the RAM it could (and began filling the swap) and still didn't finish)

[23:02] <jnthn> lue: Oh, that patch was a drop in the ocean

[23:02] <jnthn> lue: The bs branch was merged today

[23:02] <jnthn> lue: It's the branch as a whole that's brought the big reduction.

[23:02] <lue> OK.

[23:02] <jnthn> lue: Generally, it requires about 60% of what it once did.

[23:03] <lue> That's amazing.

[23:03] <jnthn> Also starts up faster :)

[23:03] <benabik> Much faster

[23:04] <lue> (Which of course makes me wonder how I managed to completely install (pre-bs) rakudo the last time)

[23:04] *** felipe left
[23:04] <lue> I noticed when I had compiled and installed nqp/bs that pre-bs rakudo's REPR (seemingly) started faster. Could've been just the optimism though :)

[23:05] <benabik> REPL?

[23:05] *** fhelmberger_ left
[23:06] <benabik> Okay, I got dyncall to build locally.  I'm now running fairly late.  TTYL

[23:07] <lue> s/REPR/REPL/ then (the interactive bit that comes up when you type  perl6  )

[23:07] *** mtk left
[23:07] *** benabik_ joined
[23:08] *** mj41 left
[23:10] *** att joined
[23:11] *** benabik_ left
[23:11] *** benabik left
[23:15] <jnthn> Enough for today. 'night o/

[23:16] <TimToady> \o

[23:16] <phenny> TimToady: 22:10Z <jnthn> tell TimToady in method_def around line 1914, it seems it's not quite right since method_def is a rule, and sigspace wants spaces between <sigil>, '.', etc.

[23:17] <TimToady> all that :s business is kinda bogus anyway; STD doesn't follow the new :sigspace rules yet

[23:18] *** am0c joined
[23:32] *** havenn joined
[23:35] *** am0c left
[23:42] *** PacoAir joined
[23:53] *** Chillance left
[23:56] *** havenn left
