[00:04] *** replore joined
[00:05] *** mj41 left
[00:08] *** replore left
[00:12] *** wolfman2000 left
[00:13] *** molaf_ joined
[00:16] *** molaf left
[00:17] *** kaare__ left
[00:17] <gfldex> ohh, nice shiny colours

[00:17] *** lichtkind joined
[00:18] <gfldex> that must be a perl fireworks!

[00:20] <lichtkind> perl 6 tablets index A  approaching 670 entries

[00:36] *** thou_ left
[00:38] *** PacoAir joined
[01:12] <kshannon> Does anyone know the callchain from a sixmodelobject VTABLE_can to find_method?

[01:14] <dalek> niecza: b5d9d05 | sorear++ | / (2 files):

[01:14] <dalek> niecza: Allow defining multi-subs with inlining annotations

[01:14] <dalek> niecza: 

[01:14] <dalek> niecza: The inline primitive form will be used for calls to the base function.

[01:14] <dalek> niecza: If it is augmented, multi-dispatch will be used.

[01:14] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b5d9d05131

[01:14] <dalek> niecza: 5dd6ed3 | sorear++ | lib/Kernel.cs:

[01:14] <dalek> niecza: Avoid creating a dispatcher for single-candidate multis that are marked as primitives

[01:14] <dalek> niecza: review: https://github.com/sorear/niecza/commit/5dd6ed3ae2

[01:15] <TimToady> perl6: constant @primes = 2, 3, -> $n is copy { repeat { $n += 2 } until $n %% none @primes ... * > sqrt $n; $n; } ... *; say @primes[^109];

[01:15] <p6eval> pugs b927740: OUTPUT¬´*** ‚ê§    Unexpected "@primes"‚ê§    expecting "=", "::", context, ":" or "("‚ê§    at /tmp/n393IaNIAb line 1, column 10‚ê§¬ª

[01:15] <p6eval> ..niecza v13-36-g6406010: OUTPUT¬´2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 3‚Ä¶

[01:15] <p6eval> ..rakudo 2b6f86: OUTPUT¬´===SORRY!===‚ê§Variable @primes is not predeclared at line 1, near " ... * > s"‚ê§¬ª

[01:17] *** MayDaniel left
[01:19] <kshannon> How on earth does the parrot VTABLE 'can' entry get set for sixmodel objects?!?!  grep doesn't seem to be my friend today :(

[01:20] <sorear> kshannon: nqp::src/pmc/sixmodelobject.pmc line 96

[01:23] <sorear> kshannon: also, parrot::src/pmc/object.pmc line 668

[01:24] <sorear> any questions?

[01:24] <kshannon> just found the object.pmc one.

[01:26] <kshannon> OK.  Because sixmodel throws an exception if find_method fails,  it needs a custom can which can trap them.

[01:27] <kshannon> That's the main reason for the --target=past dumping dying now.

[01:27] *** x3nU left
[01:27] *** x3nU joined
[01:28] *** x3nU is now known as Guest2099

[01:29] *** replore joined
[01:33] *** replore left
[01:52] <[Coke]> kshannon++

[01:55] <TimToady> niecza: constant @primes = 2, 3, { ($_ + 2, $_ + 4 ... *).first: -> $n { $n %% none @primes ... * > sqrt($n); } } ... *; say @primes[^109];

[01:56] <p6eval> niecza v13-36-g6406010: OUTPUT¬´2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 3‚Ä¶

[02:08] *** tokuhirom joined
[02:26] *** zhangkaizhao joined
[02:27] <kshannon> leto++ for not just taking my pull request to parrot and making me find the real problem

[02:28] <kshannon> https://github.com/perl6/nqp/pull/25

[02:31] <sorear> where's leto's comment?

[02:31] <sorear> leto-- dukeleto++ # correct name

[02:31] <kshannon> On the parrot pull reuest.

[02:32] *** replore joined
[02:32] *** replore left
[02:33] <sorear> kshannon: find_method should return null on error, I am pretty sure

[02:34] <sorear> your 'can' change is a bad fix because it won't make find_method_null_ok work

[02:34] <kshannon> so you think the catch should be in the find_method VTABLE ?

[02:34] <kshannon> That's pretty simple to change...

[02:35] <sorear> actually I think you should find whatever code is throwing the exception and fix it to return null instead

[02:36] <[Coke]> https://gist.github.com/1476841 - niecza at 86% (still getting a percentage point a day, even on winter break. ;)

[02:38] <kshannon> But that's part of the sixmodel API as I understand it. the 6model find_method can be called in other ways than through the VTABLE

[02:46] *** Trashlord left
[02:47] *** Trashlord joined
[02:54] *** replore joined
[02:54] <kshannon> Well, I've pushed a new version doing the catching in VTABLE find_method.  I think that's the right place as the comment in the top of the file says "it maps the Parrot world view to the Perl 6 object model one"

[02:54] *** replore left
[03:02] *** drbean left
[03:05] *** PacoAir left
[03:08] *** drbean joined
[03:15] *** replore joined
[03:15] *** replore left
[03:24] *** tokuhirom left
[03:25] *** tokuhirom joined
[03:27] *** awoodland left
[03:29] *** tokuhirom left
[03:33] *** cognominal left
[03:33] *** cognominal joined
[03:41] *** Patterner left
[03:42] *** Psyche^ joined
[03:42] *** Psyche^ is now known as Patterner

[03:55] *** cognominal_ joined
[03:58] *** cognominal left
[04:07] *** tokuhirom joined
[04:08] *** cognominal_ left
[04:10] *** cognominal_ joined
[04:32] *** Guest1122 left
[04:40] *** replore joined
[04:45] *** replore left
[04:45] *** sivoais left
[04:46] *** sivoais joined
[05:00] <slavik1> Happy New Year!

[05:00] <Timbus> TimToady, odd, i was in a channel yesterday where we sparked a discussion about making a lazy prime sieve in perl6 (vs haskell)

[05:01] <Timbus> and all my self referential solutions were not so good

[05:01] <Timbus> also, happy new year slavik1 

[05:01] <Timbus> :>

[05:02] <Timbus> more oddly my solution is almost word for word the same as yours, except i used while $n %% all @primes

[05:02] <Timbus> heh

[05:14] <Timbus> niecza: constant @primes = 2, 3, -> $n is copy { my $ff=1; repeat { $n += 2 + ($ff=!$ff)*2 } until $n %% none @primes ... * > sqrt $n; $n; } ... *; say @primes[^10];

[05:14] <p6eval> niecza v13-38-g5dd6ed3: OUTPUT¬´2 3 5 7 13 19 31 37 43 61‚ê§¬ª

[05:14] <Timbus> bah

[05:17] <Timbus> niecza: my $ff=1; constant @primes = 2, 3, -> $n is copy { repeat { $n += 2 + ($ff=!$ff)*2 } until $n %% none @primes ... * > sqrt $n; $n; } ... *; say @primes[^10];

[05:17] <p6eval> niecza v13-38-g5dd6ed3: OUTPUT¬´2 3 5 11 17 23 29 41 47 53‚ê§¬ª

[05:17] <Timbus> feels bad, man

[05:23] *** replore joined
[05:27] <Timbus> oh. pffpfpt. you start the pattern from 5, not 3. im dumb. my brain works so much better after a grilled cheese sandwich

[05:27] *** replore left
[05:28] <Timbus> niecza: my $ff=1; constant @primes = 2, 3, 5 -> $n is copy { repeat { $n += 2 + ($ff=!$ff)*2 } until $n %% none @primes ... * > sqrt $n; $n; } ... *; say @primes[^10];

[05:28] <p6eval> niecza v13-38-g5dd6ed3: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Unexpected block in infix position (two terms in a row, or previous statement missing semicolon?) at /tmp/iUrLUslcWM line 1:‚ê§------> [32mmy $ff=1; constant @primes = 2, 3, 5 [33m‚èè[31m-> $n is copy { repeat { $n += 2 + ($f‚Ä¶

[05:28] <Timbus> niecza: my $ff=1; constant @primes = 2, 3, 5, -> $n is copy { repeat { $n += 2 + ($ff=!$ff)*2 } until $n %% none @primes ... * > sqrt $n; $n; } ... *; say @primes[^10];

[05:28] <p6eval> niecza v13-38-g5dd6ed3: OUTPUT¬´2 3 5 7 11 13 17 19 23 29‚ê§¬ª

[05:28] <Timbus> if perls so smart whycome it cant insert my commas for me

[05:46] *** lichtkind left
[05:59] *** drbean left
[06:03] *** drbean joined
[06:05] <geekosaur> sometimes it could.  mostly that error message is "psst, this isn't perl5"

[06:24] *** Radvendii joined
[06:24] *** Radvendii left
[06:41] *** REPLeffect joined
[06:48] *** replore joined
[06:48] *** replore left
[07:05] <moritz> \o

[07:07] <kshannon> o/

[07:08] <moritz> kshannon: I've given you commit access to roast and other repositories under the perl6 organization

[07:08] *** Radvendii joined
[07:09] *** Radvendii left
[07:09] *** replore joined
[07:09] *** replore left
[07:30] *** replore joined
[07:31] *** replore left
[07:36] <moritz> fwiw my blog post from yesterday got about 4.5k visitors. Thanks to everybody who proof-read or promoted it!

[07:49] *** kaleem joined
[07:50] <kshannon> thanks moritz.

[07:52] *** replore joined
[07:52] *** replore left
[07:55] <dalek> roast: abcbbb9 | (Kris Shannon)++ | integration/99problems-01-to-10.t:

[07:55] <dalek> roast: Fix typo

[07:55] <dalek> roast: review: https://github.com/perl6/roast/commit/abcbbb9b40

[07:55] <dalek> roast: 1449cac | (Kris Shannon)++ | integration/99problems-01-to-10.t:

[07:55] <dalek> roast: Missed one when doing compare sensitive to array nesting level

[07:55] <dalek> roast: review: https://github.com/perl6/roast/commit/1449cacbd6

[07:55] <dalek> roast: 041da7e | (Kris Shannon)++ | integration/99problems-01-to-10.t:

[07:55] <dalek> roast: Merge pull request #13 from KrisShannon/integration-01-fixes

[07:55] <dalek> roast: 

[07:55] <dalek> roast: Some small cleanups and logic fixes in integration/99problems-01-to-10.t

[07:55] <dalek> roast: review: https://github.com/perl6/roast/commit/041da7e620

[07:58] *** cognominal_ left
[07:59] *** cognominal joined
[08:02] *** Chillance left
[08:07] *** Chillance joined
[08:09] <moritz> kshannon: fwiw Array vs. List has nothing to do with lazyness

[08:10] <moritz> perl6: my $a = [ 1 ... * ]; say "alive";

[08:10] <p6eval> rakudo 2b6f86: OUTPUT¬´alive‚ê§¬ª

[08:10] <p6eval> ..niecza v13-38-g5dd6ed3: OUTPUT¬´(timeout)Potential difficulties:‚ê§  $a is declared but not used at /tmp/XRyGuMtpg_ line 1:‚ê§------> [32mmy [33m‚èè[31m$a = [ 1 ... * ]; say "alive";[0m‚ê§‚ê§¬ª

[08:10] <p6eval> ..pugs b927740: OUTPUT¬´*** ‚ê§    Unexpected "$a"‚ê§    expecting "=", context, ":" or "("‚ê§    at /tmp/N2C54iRIYK line 1, column 4‚ê§¬ª

[08:11] <moritz> niecza: my $a = (1 ... *); say "alive";

[08:11] <p6eval> niecza v13-38-g5dd6ed3: OUTPUT¬´Potential difficulties:‚ê§  $a is declared but not used at /tmp/r6BvZFbL0z line 1:‚ê§------> [32mmy [33m‚èè[31m$a = (1 ... *); say "alive";[0m‚ê§‚ê§alive‚ê§¬ª

[08:11] <moritz> so niecza agrees that circumfix:<[ ]> is eager. Interesting.

[08:11] <sorear> "agrees"?

[08:11] <dalek> niecza: 2580531 | sorear++ | lib/ (9 files):

[08:11] <dalek> niecza: Rearrange binding process to bind signatures after lexpad setup; (fixes #19)

[08:11] <dalek> niecza: review: https://github.com/sorear/niecza/commit/2580531e73

[08:14] <sorear> mm, 11 issues.

[08:14] <sorear> if diakopter returns I'll ask him to check if his .net issues still exist... I think I fixed the causes of most of them

[08:15] <sorear> could get to single-digit open issues easily enough I think :)

[08:15] * sorear wonders who ebassi is and if ey will attempt to send any of eir bootstrap changes upstream

[08:24] <moritz> sorear: agrees with a rakudo patch by kshannon++

[08:31] <moritz> sorear: was it a conscious decision to make circumfix:<[ ]> eager? or did it Just Happen?

[08:33] <moritz> niecza: my Int:D $x = 3; $x = Int; say 'alive'

[08:33] <p6eval> niecza v13-38-g5dd6ed3: OUTPUT¬´alive‚ê§¬ª

[08:35] *** replore joined
[08:36] <sorear> moritz: concious, but it was a path of least resistance

[08:36] <sorear> [ ] needs to recontainerize all the list elements, and it was simpler to do that as a loop than a lazy map

[08:38] * sorear -> sleep

[08:39] *** replore left
[08:41] *** Chillance left
[08:47] <kshannon> There's also the fact that lots of gather/take example code I've found only works if [ ] is eager (including the current tests)

[08:47] <kshannon> That could be just becuase rakudo-ng worked that way...

[08:50] <kshannon> Point number 3 it bypasses the current issues rakudo has with source lists that are re-assigned after partial iteration

[08:51] <kshannon> Still trying to wrap my head around that quagmire...

[08:52] *** cooper left
[08:53] *** cooper joined
[08:58] *** kaleem left
[09:03] <kshannon> perl6: my $a = [ gather { for ^5 { .say; take $_; } } ]; say " MIDDLE "; say +@($a);

[09:03] <p6eval> rakudo 2b6f86: OUTPUT¬´ MIDDLE ‚ê§0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§5‚ê§¬ª

[09:03] <p6eval> ..pugs b927740, niecza v13-38-g5dd6ed3: OUTPUT¬´0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§ MIDDLE ‚ê§5‚ê§¬ª

[09:04] <kshannon> b: my $a = [ gather { for ^5 { .say; take $_; } } ]; say " MIDDLE "; say +@($a);

[09:04] <p6eval> b 1b7dd1: OUTPUT¬´0‚ê§1‚ê§2‚ê§3‚ê§4‚ê§ MIDDLE ‚ê§5‚ê§¬ª

[09:06] *** Kyril joined
[09:14] <moritz> ah well, I guess I'm fine with eager [ ] for now

[09:19] *** bkolera left
[09:48] *** sayu joined
[09:50] *** kaare__ joined
[09:55] *** grondilu joined
[09:56] <grondilu> perl6: constant X = <foo bar>;

[09:56] <p6eval> niecza v13-39-g2580531:  ( no output )

[09:56] <p6eval> ..rakudo 2b6f86: OUTPUT¬´===SORRY!===‚ê§Cannot handle constant X with non-literal value yet at line 1, near "= <foo bar"‚ê§¬ª

[09:56] <p6eval> ..pugs b927740: OUTPUT¬´*** ‚ê§    Unexpected "="‚ê§    expecting ":" or "("‚ê§    at /tmp/so0MueVvhF line 1, column 12‚ê§¬ª

[09:56] <grondilu> I thought <foo bar> was a literal value :(

[10:02] *** kaare__ left
[10:03] *** kaare__ joined
[10:09] *** grondilu left
[10:12] *** am0c joined
[10:13] *** bkolera joined
[10:24] *** Kyril left
[10:41] *** bkolera left
[10:46] *** cognominal_ joined
[10:48] *** cognominal left
[11:03] *** cognominal___ joined
[11:05] *** Mowah joined
[11:06] *** cognominal_ left
[11:28] *** Moukeddar joined
[11:40] <masak> good morning, #perl6

[11:40] <masak> ...fsvo morning...

[11:41] *** mj41 joined
[11:59] *** fridim_ joined
[11:59] *** cedric joined
[11:59] <cedric> Bonjour #perl6!

[12:00] <cedric> o/ masak

[12:00] <masak> \o

[12:01] <cedric> Context: libparrot.so.3.11.0:utf8_iter_skip() is the function that consumes the most CPU time when running "perl6 S03-operators/basic-types.t" (an arbitrary example).  It appears that this function is called many times against the same C strings (c.f. experiment http://irclog.perlgeek.de/perl6/2011-12-31#i_4904989).

[12:01] <cedric> I had a look at utf8_iter_skip()'s backtraces and found out a repetitive pattern (more than 75000 times with the given example): "... -> runops_fast_core -> Parrot_substr_s_‚Ä¶ -> encoding_substr -> utf8_iter_skip".  I'm a bit surprise to see that the "substr_s_‚Ä¶" opcodes are called so often, more specifically on the same C strings.

[12:03] <masak> cedric: sounds like you're onto something there.

[12:04] <masak> cedric: I really hopes this leads to a significant speedup in the end.

[12:04] <masak> 24 people have now signed up for p6cc! \o/

[12:05] <masak> 24. that's 4! == [*] 1..4 == 1 * 2 * 3 * 4.

[12:06] <cedric> masak: I hope too. I would like to report this strange behaviour to the right guys, I don't have time to investigate more.

[12:08] <cedric> masak: who are the "right guys"?

[12:08] <masak> cedric: well, let mention it to the #parrot people on irc.perl.org.

[12:09] <masak> see what they have to say.

[12:09] <masak> most of them are in the US, so it may be a few hours before they wake up and respond.

[12:10] <cedric> OK, thanks. I will report that in a coulple of hours :)

[12:11] <masak> I just mentioned it on the #parrot channel.

[12:11] <cedric> Thanks!

[12:13] *** fridim_ left
[12:14] *** orafu joined
[12:20] <masak> by the way, I've now perused http://www.keithschwarz.com/darts-dice-coins/

[12:20] <masak> it is indeed inspiring.

[12:20] <colomon> ;)

[12:21] <masak> however, I don't see how it's applicable to what I believe is the main issue for .pick -- namely how to avoid duplicates in a performant way.

[12:24] <masak> .pick and .roll for Bags will probably benefit from an Alias method implementation, though.

[12:41] *** Guest2099 is now known as x3nU

[12:44] <colomon> dang it, niecza's spectest is completely hosed at the moment

[12:47] *** MayDaniel joined
[12:50] <masak> :/

[12:55] *** sayu left
[13:37] *** mj41 left
[13:39] *** JY10 joined
[13:39] *** JY10 left
[13:39] *** JY10 joined
[13:39] *** JY10 left
[13:49] *** proller joined
[14:01] *** kaare__ left
[14:03] *** kaare__ joined
[14:03] *** kaare__ left
[14:03] *** kaare_ joined
[14:13] <dalek> rakudo/nom: b70b105 | (Kris Shannon)++ | src/core/ (2 files):

[14:13] <dalek> rakudo/nom: Fix take over-flattening

[14:13] <dalek> rakudo/nom: 

[14:13] <dalek> rakudo/nom: circumfix:<[ ]> needs to be made eager as well.  This

[14:13] <dalek> rakudo/nom: seems to match the wording of the spec (it's an Array,

[14:13] <dalek> rakudo/nom: not a List) and doesn't introduce any regressions in

[14:13] <dalek> rakudo/nom: roast.

[14:13] <dalek> rakudo/nom: 

[14:13] <dalek> rakudo/nom: Fixes RT#101316 and RT#106986

[14:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b70b1050ef

[14:14] * moritz forgot to add the Signed-Off-By line, again :/

[14:14] <moritz> moritz--

[14:14] <moritz> kshannon++

[14:14] <moritz> kshannon: in your next rakudo patch, please add yourself to CREDITS

[14:17] <masak> hola, moritz

[14:17] <moritz> \o masak

[14:19] *** tokuhirom left
[14:22] *** Kyril joined
[14:24] *** Trashlord left
[14:26] <dalek> roast: d888c1c | moritz++ | / (4 files):

[14:26] <dalek> roast: rakudo unfudges

[14:26] <dalek> roast: review: https://github.com/perl6/roast/commit/d888c1ce2c

[14:29] <dalek> evalbot: a875194 | (Kris Shannon)++ | lib/EvalbotExecuter.pm:

[14:29] <dalek> evalbot: Also allow executing from files in projects on github

[14:29] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/a875194253

[14:29] <dalek> evalbot: 7d4b9b0 | moritz++ | lib/EvalbotExecuter.pm:

[14:29] <dalek> evalbot: Merge pull request #1 from KrisShannon/patch-1

[14:29] <dalek> evalbot: 

[14:29] <dalek> evalbot: Also allow executing from files in projects on github

[14:29] <dalek> evalbot: review: https://github.com/perl6/evalbot/commit/7d4b9b0177

[14:38] *** orafu left
[14:38] *** orafu joined
[14:44] <dalek> roast: 2e37eb9 | moritz++ | / (4 files):

[14:44] <dalek> roast: more rakudo unfudges

[14:44] <dalek> roast: review: https://github.com/perl6/roast/commit/2e37eb9104

[14:57] *** hundskatt left
[15:09] *** nebuchadnezzar joined
[15:13] *** cedric left
[15:13] *** tomaw joined
[15:25] *** PacoAir joined
[15:36] <x3nU> okay, so now i'm trying to build latest rakudo under windows using msvc 2010

[15:36] <x3nU> hope it will compile fine

[15:36] <masak> we hope so too :)

[15:40] *** Trashlord joined
[15:41] <masak> Trashlord! \o/

[15:42] <Trashlord> hey masak :)

[15:42] <masak> Trashlord: how's 2012 treating you? :)

[15:43] <Trashlord> so far so good, and yourself?

[15:43] <masak> very excited about the new year. :)

[15:44] <masak> 2010 was very nice, 2011 was even better, so 2012 will probably be wonderful.

[15:47] <Trashlord> I sure hope so

[15:48] <x3nU> 2012 will be last year of our world :(

[15:51] <Trashlord> heh

[15:51] <Trashlord> I don't believe the world will be physically destroyed

[15:51] <Trashlord> I believe, and hope, that this "civilization" will collapse

[15:51] <Trashlord> and all humans will achieve greater conciousness

[15:52] <Trashlord> and march onwards into the new world, the new society, with no governments, no religion, no countries, and no money

[15:52] <Trashlord> only love and respect towards everyone

[15:52] <x3nU> or maybe perl 6 will take over the universe

[15:52] <Trashlord> perhaps

[15:52] <Trashlord> we'll have to wait and see

[15:53] <masak> I don't hope that western civilization will collapse. but that seems to be where we're heading.

[15:53] <x3nU> damn

[15:53] <masak> I do hope, to the extent that it is inevitable, that it takes 90 years and not 5.

[15:53] <x3nU> compilation of rakudo just crashed ;_;

[15:54] <masak> x3nU: could you nopaste the error mesasges?

[15:54] <masak> were there any error messages?

[15:54] <masak> x3nU: I *think* jnthn is useing some msvc or other to compile Rakudo.

[15:54] *** Moukeddar left
[15:55] <x3nU> http://pastebin.com/vnJy7JjP

[15:55] <x3nU> it seems

[15:55] <x3nU> that nqp crashed

[15:55] <x3nU> there was no error message or something

[15:55] <x3nU> just "application nqp.exe stopped working" or something like that

[15:57] <masak> :(

[15:58] <x3nU> so it seems that i need to try building using mingw

[16:00] <masak> x3nU: you should definitely bring this up with jnthn++ when he gets back. he will know more.

[16:02] <x3nU> okay

[16:11] <[Coke]> uhoh, moritz is unfudging for rakudo.

[16:13] <dalek> rakudo/nom: a7fd89e | masak++ | / (8 files):

[16:13] <dalek> rakudo/nom: [TypePretence -> TypePretense]

[16:13] <dalek> rakudo/nom: 

[16:13] <dalek> rakudo/nom: "Pretence" is common in British spelling, whereas the rest of the

[16:13] <dalek> rakudo/nom: code base is written in squeaky-clean International (that is,

[16:13] <dalek> rakudo/nom: US) English. Clearly the original spelling was a case of larger

[16:13] <dalek> rakudo/nom: guerrilla spelling campaign by our resident .uk core programmer. ;-)

[16:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a7fd89ea7f

[16:14] <masak> for more information about guerrilla spelling campaigns, see http://meta.wikimedia.org/wiki/Guerilla_spelling_campaigns

[16:14] <tadzik> happy new year #perl6!

[16:15] <masak> Year.new(:happy)

[16:16] <x3nU> i'm not sure if american english is international english

[16:16] <tadzik> Year.new.happify

[16:16] <x3nU> in european countries people are taught british english, not american

[16:17] *** hundskatt joined
[16:17] <tadzik> woot, 19/20 from OS exam

[16:18] <masak> tadzik++

[16:18] <tadzik> that's a good start for 2012

[16:20] <masak> indeed.

[16:20] <[Coke]> good job!

[16:20] <tadzik> wow, mailbox' full of good news. Have you seen the recent booking.com donation?

[16:21] <colomon> tadzik: what's the story?

[16:21] <tadzik> colomon: what story?

[16:21] <colomon> booking.com donation

[16:21] <tadzik> http://news.perlfoundation.org/2012/01/bookingcom-sponsors-100000-to.html

[16:22] <masak> \o/

[16:22] <tadzik> those guys know how to party

[16:22] <x3nU> wow

[16:22] <tadzik> booking++

[16:24] <colomon> booking++

[16:26] <masak> if I hadn't been hastily and summarily employed (and subsequently very happy where I am), Id probably have applied for a job at booking.com by now.

[16:26] <masak> I'd*

[16:27] <tadzik> I'm tempted every semester :)

[16:28] * masak grabs one of tadzik's legs and drags him towards Sweden :)

[16:28] <tadzik> yeah, I remember about you too :)

[16:28] <masak> which would you rather have, ~30 skilled Perl developers, or jnthn and me? :P

[16:28] <tadzik> I'm thinking about taking a year off after this semester (ends in february), as that's when the first stage of my studies ends

[16:29] <tadzik> but I'm afraid that once I take a break I'll never want to go back :P

[16:29] <masak> I'll get right on deflating my head now.

[16:29] <tadzik> huh, what? :)

[16:29] <masak> tadzik: yeah, taking a break to go find a job is a recipe for never finishing your studies.

[16:29] <tadzik> yeah, I suppose so

[16:30] *** fsergot joined
[16:30] <tadzik> and I'll find myself sitting in a chair with a pipe and a dog besides me legs and wondering why did I never achieve the dream from my childhood :)

[16:30] <fsergot> o/

[16:30] <tadzik> o/

[16:30] <x3nU> \o

[16:30] <tadzik> happy new years' fsergot!

[16:30] *** cspencer joined
[16:30] <masak> tadzik: yeah, wouldn't want to take your childhood dream from you :)

[16:31] <fsergot> thanks, You too :)

[16:31] <masak> fsergot! \o/

[16:31] <tadzik> fsergot: about Bailador: I got templates to work, but I keep that in a branch as it still ignites segfaults from time to time

[16:31] <tadzik> I'll merge all those new features as soon as we get that fixed

[16:31] <cspencer> hello everyone!

[16:31] <tadzik> hey cspencer! Happy new year!

[16:32] <cspencer> question about the zip operators - are they currently able to produce lazy lists?  my code would seem to indicate they are not, unless i'm doing something incorrectly :)

[16:32] <cspencer> tadzik: happy new year to you as well!

[16:32] <colomon> cspencer: they are!

[16:32] <masak> cspencer! \o/

[16:33] <fsergot> masak: tonight i thought of how to make task 1 in p6 contest! :)

[16:33] <colomon> nom: my @a := 'a'..'z' Z~ 1..*; say @a[^10]

[16:33] <p6eval> nom a7fd89: OUTPUT¬´a1 b2 c3 d4 e5 f6 g7 h8 i9 j10‚ê§¬ª

[16:33] <masak> fsergot: and you still haven't signed up? crazy!

[16:33] <masak> nom: role R { method foo { say "OH HAI" } }; enum A does R <a b c>; a.foo

[16:33] <p6eval> nom a7fd89: OUTPUT¬´OH HAI‚ê§¬ª

[16:33] <masak> enums do roles. wow.

[16:33] <cspencer> colomon: ah, perhaps on on the wrong branch then

[16:33] <cspencer> is that only in the nom branch?

[16:34] <fsergot> masak: where can i do sign up? :)

[16:34] <fsergot> s/do//

[16:34] <masak> fsergot: email [email@hidden.address] saying "Sign me up!"

[16:34] <colomon> cspencer: that should work in any current p6

[16:34] <colomon> cspencer: well, I can't speak for perlito

[16:34] <colomon> perl6: my @a := 'a'..'z' Z~ 1..*; say @a[^10]

[16:34] <fsergot> masak: ok! :) thanks

[16:34] <p6eval> rakudo a7fd89, niecza v13-39-g2580531: OUTPUT¬´a1 b2 c3 d4 e5 f6 g7 h8 i9 j10‚ê§¬ª

[16:34] <p6eval> ..pugs b927740: OUTPUT¬´abcdefghij‚ê§¬ª

[16:34] <masak> pugs--

[16:35] <colomon> masak: go easy on it, last time it was developed the Z metaop wasn't around yet

[16:35] *** kaare_ left
[16:35] *** kaare__ joined
[16:35] <masak> colomon: oh! right!

[16:36] <masak> colomon: so easy to forget these things ;)

[16:36] <masak> nom: enum E <a b c>; class C does E {}; say "alive"

[16:36] <p6eval> nom a7fd89: OUTPUT¬´===SORRY!===‚ê§Cannot yet turn an enum into a role‚ê§¬ª

[16:36] <masak> cannot... yet... :)

[16:36] * colomon is not likely to forget the day Zop was invented... :)

[16:37] <cspencer> here's the code i'd being trying to use: for zip(1..*;1..*) -> $a, $b { say "a = $a, b = $b" }

[16:37] <masak> colomon: how so?

[16:37] <colomon> cspencer: your problem there is the "for"

[16:37] <cspencer> i figured as much

[16:37] <cspencer> it doesn't flatten the list, does it?

[16:37] <x3nU> last pugs version is from 2011-10-08 if i understand correctly, not that bad

[16:38] <masak> x3nU: yes, but those are releases on essentially the same source code, from mid-2007.

[16:38] <x3nU> masak: so what's the point of these releases?

[16:38] <masak> x3nU: upgrading to latest GHC.

[16:38] <colomon> masak: I watched (on #perl6) TimToady come up with the idea, and then a) told him it was a keeper and b) implemented the first version in Rakudo myself right then.  :)

[16:38] <masak> \o/

[16:38] <masak> colomon++

[16:39] <masak> colomon: yeah, it's strange that we had Xop for so long without realizing that Zop was right next door. :)

[16:41] <colomon> masak: if you're not thinking of lazy lists, Zop is just >>op<<

[16:41] <colomon> masak: but if you are thinking of lazy lists, Zop is awesome

[16:41] <masak> aye.

[16:41] <cspencer> is there a way to get the for loop to evaluate the list lazily?

[16:42] <masak> colomon: they optimize for two things we care about: parallelism and laziness, respectively.

[16:42] <colomon> cspencer: I don't understand exactly what's going on, but my impression is nom's "for" is only lazy if it knows for sure that the list is infinite.  so for 1..* -> $a { } works, but more complicated things don't

[16:42] <cspencer> ah, ok.

[16:42] <masak> colomon: pmichaud has a term for that.

[16:43] <masak> colomon: something like "obviously finite" or "proven finite" or something.

[16:43] <masak> it's that kind of gray-area solution that often gets us out of Halting Problem jail for free.

[16:44] <cspencer> so would this be categorized as a "yet to be implemented feature"? :)

[16:46] <colomon> cspencer: charitably speaking, yes.  :)

[16:48] <colomon> niecza: for 1..* Z 1..* -> $a, $b { say "a = $a, b = $b" }

[16:48] <p6eval> niecza v13-39-g2580531: OUTPUT¬´(timeout)a = 1, b = 1‚ê§a = 2, b = 2‚ê§a = 3, b = 3‚ê§a = 4, b = 4‚ê§a = 5, b = 5‚ê§a = 6, b = 6‚ê§a = 7, b = 7‚ê§a = 8, b = 8‚ê§a = 9, b = 9‚ê§a = 10, b = 10‚ê§a = 11, b = 11‚ê§a = 12, b = 12‚ê§a = 13, b = 13‚ê§a = 14, b = 14‚ê§a = 15, b = 15‚ê§a = 16, b = 16‚ê§a = 17, b = 17‚ê§a = 18, b ‚Ä¶

[16:48] <colomon> cspencer: it does work in niecza

[16:48] <colomon> b: for 1..* Z 1..* -> $a, $b { say "a = $a, b = $b" }

[16:48] <p6eval> b 1b7dd1: OUTPUT¬´(timeout)a = 1, b = 1‚ê§a = 2, b = 2‚ê§a = 3, b = 3‚ê§a = 4, b = 4‚ê§a = 5, b = 5‚ê§a = 6, b = 6‚ê§a = 7, b = 7‚ê§a = 8, b = 8‚ê§a = 9, b = 9‚ê§a = 10, b = 10‚ê§a = 11, b = 11‚ê§a = 12, b = 12‚ê§a = 13, b = 13‚ê§a = 14, b = 14‚ê§a = 15, b = 15‚ê§a = 16, b = 16‚ê§a = 17, b = 17‚ê§a = 18, b = 18‚ê§a = 19, b‚Ä¶

[16:48] <colomon> and b

[16:49] <colomon> and map probably works as a workaround in nom

[16:49] <cspencer> colomon: what's b?  i'm not familiar with that one..

[16:49] <masak> old branch.

[16:49] <benabik> cspencer: Rakudo before the most recent re-write.

[16:49] <masak> sometimes we take Rakudo and throw it away because we thought of a better way to implement it :P

[16:50] <cspencer> hmmm...i thought i'd been running on the old branch, but hadn't been getting any output

[16:50] <cspencer> i'll check again or find a work around

[16:50] <cspencer> thanks for the help!

[16:57] <masak> ooh, SymbolTable is called World now! \o/

[16:57] <masak> you're welcome :D

[16:58] <masak> I'm currently investigating OMeta's concept of World...

[17:01] *** zhangkaizhao left
[17:02] *** yass5 joined
[17:08] <masak> yass5: \o

[17:09] <yass5> masak: o/

[17:12] *** bluescreen10 joined
[17:15] *** LlamaRider joined
[17:16] <masak> nom: sub initial($_) { .substr(0, 1) }; say "yet another static scalar".words.map({ initial($_) }), 5

[17:16] <p6eval> nom a7fd89: OUTPUT¬´y a s s5‚ê§¬ª

[17:16] <masak> pfft :)

[17:16] <masak> nom: sub initial($_) { .substr(0, 1) }; say "yet another static scalar".words.map({ initial($_) }).join, 5

[17:16] <p6eval> nom a7fd89: OUTPUT¬´yass5‚ê§¬ª

[17:16] *** drbean left
[17:16] <masak> \o/

[17:19] <moritz> nom: sub initial($_) { .substr(0, 1) }; say "yet another static scalar".words>>.&initial.join, 5

[17:19] <p6eval> nom a7fd89: OUTPUT¬´yass5‚ê§¬ª

[17:20] <moritz> nom: sub initial($_) { .substr(0, 1) }; say "yet another static scalar".words.mpa(&initial).join, 5

[17:20] <p6eval> nom a7fd89: OUTPUT¬´Method 'mpa' not found for invocant of class 'List'‚ê§  in block <anon> at /tmp/_ioG2OznRn:1‚ê§  in <anon> at /tmp/_ioG2OznRn:1‚ê§¬ª

[17:20] <moritz> nom: sub initial($_) { .substr(0, 1) }; say "yet another static scalar".words.map(&initial).join, 5

[17:20] <p6eval> nom a7fd89: OUTPUT¬´yass5‚ê§¬ª

[17:20] <moritz> masak: map { foo($_) }   is nearly always an anti-pattern

[17:21] <moritz> and map &foo  can usually be used instead

[17:21] <masak> ooh, indeed.

[17:21] <masak> nom: sub initial($_) { .substr(0, 1) }; say "yet another static scalar".words.map(&initial).join, 5

[17:21] <p6eval> nom a7fd89: OUTPUT¬´yass5‚ê§¬ª

[17:22] *** drbean joined
[17:24] *** itz joined
[17:24] *** cognominal___ left
[17:25] *** bluescreen10 left
[17:26] *** cognominal joined
[17:29] <masak> could someone help me understand the role perl6_capture_lex plays in Actions.pm ?

[17:30] <masak> it's used in exactly two places, the sub block_closure, and the method quote_escape:sym<{ }>

[17:31] <masak> it's defined last in src/ops/perl6.ops, and doesn't look like it's doing very much.

[17:36] <masak> sorear++ # http://irclog.perlgeek.de/perl6/2011-12-10#i_4814872 -- that's the attitude to regressions that Rakudo needs as well, even across big rewrites

[17:40] * masak smiles at "Plain, Old Documentation" in the backlog

[17:40] *** LlamaRider left
[17:44] <moritz> Call for Papers for the German perl Workshop 2012 in Erlange (March 5-7) ends today

[17:44] <moritz> I hope to extend the deadline for a week, but not sure it'll work

[17:46] <benabik> Took a couple times to not read that as "Perl in Erlang Workshop"

[17:49] *** kaare__ left
[17:49] *** kaare__ joined
[17:51] <moritz> erm, sorry, the town is called "Erlangen"

[17:54] *** fridim_ joined
[17:56] <masak> phenny: de en "Erlange"?

[17:56] <phenny> masak: "Achieve" (de to en, translate.google.com)

[17:56] <masak> phenny: de en "Erlangen"?

[17:56] <phenny> masak: "gain" (de to en, translate.google.com)

[17:56] <cognominal> happy new year to the perl sixers.

[17:59] <masak> nom: class Year { has @.d; method description { @.d.sort.ucfirst ~ " " ~ self.^name ~ "!" } }; say Year.new(:d(<new happy>)).description

[17:59] <p6eval> nom a7fd89: OUTPUT¬´Happy new Year!‚ê§¬ª

[18:00] <masak> \o/

[18:09] *** toto joined
[18:09] *** toto is now known as Guest27660

[18:10] *** raiph joined
[18:10] *** Guest27660 left
[18:11] *** kaare__ left
[18:11] *** kaare__ joined
[18:11] <colomon> benabik: are you volunteering to implement p6 in Erlang?  ;)

[18:11] <moritz> phenny: de en "Erlen am Hang"

[18:11] <moritz> phenny: de en "Erlen am Hang"?

[18:11] <phenny> moritz: "Alder on slopes" (de to en, translate.google.com)

[18:12] <moritz> that's the origin of the name "Erlangen"

[18:13] <x3nU> mine snails looks so cute <3

[18:13] <benabik> colomon: In my copious spare time?  :-D

[18:13] <colomon> benabik: exactly!

[18:15] <x3nU> creating perl6 implementation in HQ9+ would be a big step forward

[18:15] <tadzik> hah

[18:15] <colomon> HQ9+?

[18:16] <x3nU> http://simple.wikipedia.org/wiki/HQ9%2B

[18:16] <x3nU> there's no entry in english wiki

[18:20] <colomon> okay, that's awesome

[18:21] <colomon> Though the + seems somewhat unneeded.

[18:22] <tadzik> it's an evolution of the HQ9 language

[18:23] <masak> I'm waiting till HQ9++ is released.

[18:24] <benabik> masak: http://www.dangermouse.net/esoteric/hq9plusplus.html

[18:27] <masak> well, there you go then.

[18:27] <masak> now, I have two choices.

[18:27] <masak> either I could reject reality and redefined "released" in such a way that I still have a reason not to try the new language. this is clearly less work for me.

[18:28] <masak> or I could admit that HQ9++ actually exists, go ahead and try it, and then give my honest appraisal of it. that sounds really hard.

[18:29] <masak> so... by "released", I obviously meant "when enough people in my immediate vicinity talk about it".

[18:33] <masak> ...obviously.

[18:37] *** Kyril left
[18:38] *** packetknife left
[18:38] <x3nU> nqp configure.pl

[18:38] <x3nU> is

[18:38] <x3nU> horribly broken

[18:39] <raiph> hi all

[18:39] <phenny> raiph: 29 Dec 18:09Z <TimToady> tell raiph re: http://irclog.perlgeek.de/perl6/2011-12-18#i_4848275 I'd say 6model is not so much related to moose as it is to the Responder Interface stuff that nothingmuch++ was working on in the same timeframe, but representation polymorphism has been the p6 plan for ages

[18:40] <raiph> s05: "A character class is now specified using <[...]>. See also "Extensible metasyntax". "

[18:40] <raiph> the target of "Extens..." link doesn't exist

[18:42] *** drbean left
[18:43] <masak> raiph: seems the heading has changed to '=head1 Extensible metasyntax (C<< <...> >>)'

[18:43] <masak> hm. or not. that line is unchanged since the last repository move.

[18:44] <masak> maybe the link never worked, then.

[18:45] <colomon> "When the sequence ++ is encountered, it (naturally) increments the accumulator twice, and also instantiates an object of a new subclass of the generic superclass. In line with the best data-hiding principles, there is no way to access this object."  Wow.  It really IS a big improvement over HQ9+!

[18:45] <colomon> still, it could really use meta operators....

[18:45] <benabik> colomon: You should try to find HQP9+-

[18:46] <benabik> colomon: What - does depends on what operators are before it.  :-D

[18:46] <colomon> benabik++

[18:48] <masak> ;)

[18:48] <colomon> sorear: ping.  (or just try S32-trig/sin.t -- one of many failures in the spectest.)

[18:48] *** drbean joined
[18:51] *** yass5 left
[18:51] *** hundskatt left
[18:51] *** nebuchadnezzar left
[18:51] *** kst left
[18:51] *** cspencer left
[18:52] *** yass5 joined
[18:52] *** hundskatt joined
[18:52] *** nebuchadnezzar joined
[18:52] *** kst joined
[18:57] *** drbean left
[19:02] *** drbean joined
[19:04] <masak> I'm doing a gist about macros and closures to try to make them clear to me.

[19:06] <masak> I think I finally grok a thing that sorear++ told me: all ASTs are inserted into mainline code as *blocks*, and these blocks still retain their original OUTER.

[19:06] <masak> this simplifies a lot, if true.

[19:06] <masak> well, um, it makes the COMPILING case the exceptional case, I guess :)

[19:10] *** sayu joined
[19:11] *** kaare__ is now known as kaare_

[19:14] <sayu> c

[19:16] <masak> c/

[19:22] <dalek> roast: ba48d7b | Coke++ | S04-phasers/ (4 files):

[19:22] <dalek> roast: niecza fudge

[19:22] <dalek> roast: review: https://github.com/perl6/roast/commit/ba48d7b69a

[19:23] <dalek> niecza: b5d8efc | Coke++ | t/spectest.data:

[19:23] <dalek> niecza: run more tests (some fudged)

[19:23] <dalek> niecza: 

[19:23] <dalek> niecza: S04-phasers/ascending-order.t

[19:23] <dalek> niecza: S04-phasers/descending-order.t

[19:23] <dalek> niecza: S04-phasers/init.t

[19:23] <dalek> niecza: S04-phasers/multiple.t

[19:23] <dalek> niecza: S04-phasers/rvalue.t

[19:23] <dalek> niecza: S06-multi/positional-vs-named.t

[19:23] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b5d8efc54f

[19:30] *** fridim_ left
[19:32] *** kranius left
[19:38] *** raiph left
[19:44] <kshannon> src/core/Any.pm: proto infix:<===>($?, $?) { * }

[19:44] <kshannon> Ummm,  why optional?

[19:44] <moritz> kshannon: because [===] reduction uses the nullary infix:<===>() candidate to provide the default value

[19:44] <moritz> nom: say [===]()

[19:44] <p6eval> nom a7fd89: OUTPUT¬´Bool::True‚ê§¬ª

[19:44] <moritz> nom: say [*]()

[19:45] <p6eval> nom a7fd89: OUTPUT¬´1‚ê§¬ª

[19:45] <moritz> nom: say [+]()

[19:45] <p6eval> nom a7fd89: OUTPUT¬´0‚ê§¬ª

[19:46] *** snearch joined
[19:46] <x3nU> it's kinda sad that i found so many things broken when i'm trying to build rakudo

[19:47] <tadzik> we can't help if you won't give us any info

[19:47] <kshannon> OK,  then why a few lines down does infix:<cmp> not have an optional case?

[19:47] <x3nU> tadzik: i'm not asking for help

[19:47] <tadzik> alright

[19:47] <x3nU> most problems are unrelated

[19:47] <x3nU> to rakudo

[19:47] <x3nU> for example

[19:48] <moritz> sad indeed; we could use developers on windows who fix the build system

[19:48] <moritz> nom: say [cmp]()

[19:48] <p6eval> nom a7fd89: OUTPUT¬´Not enough positional parameters passed; got 0 but expected 2‚ê§  in sub infix:<cmp> at src/gen/CORE.setting:1171‚ê§  in sub <anon> at src/gen/CORE.setting:8605‚ê§  in block <anon> at /tmp/2wnMryVQAI:1‚ê§  in <anon> at /tmp/2wnMryVQAI:1‚ê§¬ª

[19:48] <x3nU> gmake in mingw-w64 uses non-existing command 'cc' in $(COMPILE.c)

[19:48] <moritz> kshannon: an omission, I think

[19:48] <x3nU> or configure.pl for nqp can only use nmake (that's easily fixable)

[19:49] <kshannon> No,, thinking about it, [cmp]() can't really have a defined answer.

[19:55] <moritz> ah right, it's not boolean, and thus not chainable either

[19:56] <moritz> std: [cmp] ()

[19:56] <p6eval> std dc62e1d: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Cannot reduce with cmp because structural infix operators are diffy and not chaining at /tmp/qlFthYUzoQ line 1:‚ê§------> [32m[cmp][33m‚èè[31m ()[0m‚ê§Check failed‚ê§FAILED 00:01 120m‚ê§¬ª

[19:56] <moritz> that's what rakudo should do :-)

[19:56] *** mj41 joined
[20:00] <masak> I've been writing up the state of the art of macro thinking here: https://gist.github.com/1548053

[20:00] <masak> feedback welcome.

[20:01] <tadzik> it's interesting :)

[20:02] <masak> :)

[20:03] <masak> it put into words something that I've known for a few months now, but not been able to express clearly.

[20:03] <masak> the short version is "ASTs need to carry their environment around, and applying them means sometimes having to do nasty things"

[20:11] *** flussence left
[20:11] *** PacoAir left
[20:12] *** flussence joined
[20:21] <moritz> "There's no corresponding mechanism for closures. Closures are too clean for that kind of thing." there is, it's called CALLER::

[20:22] <masak> I see where you're coming from with that. I'm not sure I'd go so far as to call it "corresponding".

[20:23] *** drbean left
[20:23] <masak> yes, the mainline code is in some sense the caller of the applied AST. but the traces of that relationship have intentionally been erased at the point we're running the code. for all intents and purposes, the code from the AST is *part* of the mainline code, not in a callee-caller relationship with it.

[20:24] <masak> with closures, we're one stack frame down and CALLER is somewhere completely different. with macros, not so.

[20:26] <masak> of course, the *macro* may use the CALLER namespace and access the (static) lexpads of the mainline code. but that's something different.

[20:26] <masak> :-)

[20:28] *** Mowah left
[20:28] *** drbean joined
[20:28] <masak> though maybe it's not so obvious that the CALLER there is the mainline code and not, say, the parser.

[20:31] *** whiteknight joined
[20:32] *** whiteknight is now known as Guest15028

[20:33] *** fsergot left
[20:34] *** Mowah joined
[20:34] <sorear> good * #perl6

[20:35] <masak> sorear! \o/

[20:39] <sorear> niecza: [cmp] ()

[20:39] <p6eval> niecza v13-39-g2580531: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§‚ê§Cannot reduce with cmp because structural infix operators are diffy and not chaining at /tmp/crjEYKVV4H line 1:‚ê§------> [32m[cmp][33m‚èè[31m ()[0m‚ê§‚ê§Unhandled exception: Check failed‚ê§‚ê§  at /home/p6eval/niecza/boot/lib/CORE.‚Ä¶

[20:40] <sorear> masak! \o/

[20:41] <masak> \o/

[20:41] <sorear> colomon: studying the S32-trig/sin.t regression now.

[20:43] <x3nU>  

[20:43] <x3nU> oops

[20:44] <sorear> colomon++ # "set nomodifiable"

[20:45] <moritz> .oO( nom-odifiy-able )

[20:46] <sorear> moritz: I wonder why nobody has commented on your retrospection itself.

[20:46] *** proller left
[20:46] <moritz> sorear: that's because people read "Perl 6" and immediately run off to discuss whether it's ready, promosing or doomed

[20:46] <masak> without fail.

[20:47] <moritz> I've seen that many times; basically each time I've written about Perl 6, and got at least moderate amounts of attention

[20:47] <masak> and not too surprising; people discuss things from within their frame of reference, and outsiders' frame of reference is outside that of insiders.

[20:48] <moritz> this frame-of-reference-mismatch is also why I haven't discussed more spec changes

[20:48] <masak> if I saw a reddit thread about quantum computing, I wouldn't be able to comment more than to the effect of "so, when will I be able to use it?" or make a pun on entanglement somehow.

[20:48] <moritz> TimToady++ suggested mentioning % in regexes, and I considered it too. But it doesn't really matter for an outsider

[20:49] <moritz> outsiders don't understand its importance, scope or motivation; I could explain that, but it would take a complete blog post on its own

[20:49] <moritz> masak: yes, but *you* would refrain from commenting at all :-)

[20:50] <moritz> ...  if your only comment were something only slightly related

[20:50] <moritz> s/were/was/

[20:50] <moritz> where was my grammar? :-)

[20:51] <masak> right, but that only means that there are a bunch of (if I may) sensible people whose comments we never see on reddit. :)

[20:53] <masak> the only way to create positive discussion on a site like reddit is to change the default perception of Perl 6.

[20:54] <moritz> for now I'm happy that enough people like to read it to upvote it

[20:55] <moritz> and that some of the commenters ask questions (even if biased ones) instead of condemning Perl 6 outright

[20:55] <moritz> anyway, time to sleep &

[20:56] <sorear> I am getting the feeling I have deeply borked something in the binder here

[20:56] *** fsergot joined
[20:56] <sorear> sleep well moritz

[20:57] <masak> dream of Reddit upvotes and HN praise :)

[20:58] * sorear tries to golf a failing file, gets a completely different error!

[21:00] <sorear> at least the compiler is having the decency to ignore comments this time

[21:04] *** kaare_ left
[21:12] *** PacoAir joined
[21:19] *** achromic left
[21:24] *** Guest15028 left
[21:24] *** achromic joined
[21:27] *** packetknife joined
[21:32] <dalek> niecza: 92420ba | sorear++ | lib/Kernel.cs:

[21:32] <dalek> niecza: When reusing allocated frames, clear the "this is only a bindability check" flag :D  colomon++

[21:32] <dalek> niecza: review: https://github.com/sorear/niecza/commit/92420ba43c

[21:32] <sorear> *phew*

[21:42] <colomon> o/

[21:43] <masak> \o

[21:53] *** molaf_ left
[21:58] <colomon> oooo, the niecza spectest almost passes again

[22:00] <sorear> what file(s) are still having issues?

[22:00] <colomon> S06-advanced/callsame.t

[22:00] <colomon> our todo there is now passing, but the previously passing tests are now failing

[22:02] *** sayu left
[22:02] <sorear> the test which is "now passing" is very dubios

[22:03] <masak> what is it?

[22:03] <sorear> and I don't think either of them ever *should* have worked for niecza

[22:03] <sorear> I'm willing to just remove the file from spectest.data

[22:03] <sorear> masak: "callsame" in an only-sub with no outer dispatcher is supposed to live...wtf?

[22:04] <masak> hmmm.

[22:04] <masak> no, I agree. supporting that doesn't give much, and will probably only prevent optimizations.

[22:05] *** Chillance joined
[22:06] *** drbean left
[22:07] <sorear> I'm not _really_ sure what nextsame & co are supposed to do with multis anyway

[22:07] <sorear> They work for methods because we specify a specific method resolution order

[22:08] <sorear> but multis are mostly unordered

[22:08] <sorear> maybe nextsame should be interpreted as "re-run MMD but ignore all candidates that have been invoked so far"

[22:08] <masak> ...as opposed to?...

[22:10] <masak> what I learned from http://en.wikipedia.org/wiki/Free_variables_and_bound_variables : variables in a function whose lookup reaches outside of the function, are referred to as "free variables". in the case of a closure, free values are sometimes referred to as "upvalues".

[22:13] *** drbean joined
[22:14] *** Mowah left
[22:17] <sorear> masak: do you still want to talk promotion?

[22:17] <masak> also, the "funarg problem" basically says "if you want closures, you can't put all local variables on the stack".

[22:18] <masak> sorear: yes, but I'm not sure how much help I'll be.

[22:18] <masak> sorear: what do you want to talk about?

[22:19] <sorear> I don't remember exactly; the two of us were going to discuss increasing Niecza's visibility, but then we kept missing each other

[22:20] <masak> aye.

[22:20] <masak> I also don't remember how that discussion started.

[22:20] <masak> I remember you deliberating whether to get a blog or not.

[22:21] <masak> my advice -- get one. if only because I personally want to read your blog posts :)

[22:21] <masak> (but I also think it would be good for Niecza.)

[22:21] <masak> Wordpress makes it very easy to start blogging.

[22:21] <masak> wordpress.com, to be exact.

[22:22] <sorear> mm.  I dunno what people would be interested in

[22:22] <tadzik> I suppose "look what cool stuff niecza can do"

[22:23] <tadzik> that'll interest me, at least

[22:23] <masak> :)

[22:23] *** MayDaniel left
[22:23] <tadzik> I think that for reaching non-perl6 audience it'd be "look what cool stuff we did write"

[22:24] <tadzik> just my 2z≈Ç

[22:24] <masak> blogs "reach out" more than emails, or tweets, or IRC does.

[22:24] <masak> mainly thanks to aggregation sites like Reddit and Slashdot and Hacker News.

[22:25] <masak> I remember "playing" those sites much more back in 2009 -- writing things that were basically targeted for such audiences.

[22:25] <masak> nowadays I mostly write what I want :P

[22:28] <sorear> I have a certain bias towards thinking that everything I do is boring :P

[22:28] <colomon> sorear: that most definitely is NOT the case.

[22:28] <colomon> though a lot of it is quite esoteric

[22:29] <colomon> for sure

[22:30] <colomon> on the publicity front, I have to admit I've been a bit disappointed in the reception of the gtk mandelbrot script.

[22:30] <colomon> I mean, on the one hand, it certainly isn't rocket science.

[22:30] <sorear> how bad was it?

[22:30] <sorear> the only comment I saw was positive

[22:31] <colomon> right; but there was only the one comment.

[22:31] *** Moukeddar joined
[22:31] <sorear> o/ masak 

[22:31] <sorear> o/ Moukeddar

[22:31] <Moukeddar> hello guys :d

[22:31] <Moukeddar> \o/

[22:32] <sorear> why does irssi continue to expand m\t to masak?

[22:32] <colomon> like I had started saying, it wasn't rocket science, but I'm pretty sure it was the first threaded GUI in perl 6, no?  it felt like a milestone of sorts to me.

[22:32] <tadzik> sorear: respecting character case?

[22:32] <tadzik> hello Moukeddar!

[22:32] <sorear> tadzik: nope, even M\t does it

[22:33] <tadzik> sorear: odd indeed

[22:33] *** rsimoes left
[22:33] <masak> hello Moukeddar! \o/

[22:33] <Moukeddar> guys, i'll have my first public course on thursday, wish me luck :D

[22:34] <tadzik> it's this feeling "how did they write it so it behaves like this..."

[22:34] <Moukeddar> i'll be the teacher 

[22:34] <tadzik> Moukeddar: whoa. What will you be teaching?

[22:34] <masak> sorear: I guess irssi just likes me very much :)

[22:34] <dalek> roast: c359f30 | (Solomon Foster)++ | S02-types/nan.t:

[22:34] <dalek> roast: Unfudge tests that now work!

[22:34] <dalek> roast: review: https://github.com/perl6/roast/commit/c359f306ce

[22:34] *** rsimoes joined
[22:34] <x3nU> so building of rakudo on windows using msvc crashes

[22:34] <Moukeddar> tadzik, C# :D

[22:34] <x3nU> and building using gcc is impossible

[22:34] <x3nU> :(

[22:34] <sorear> I wonder what "rocket science" means and why it's used as a comparison so often.

[22:35] * tadzik puts on the etymologist's cloak

[22:35] <sorear> I was doing some stuff in Perl last month with numerical integration of solar-sail trajectories, was probably simpler than the mandelbrot script

[22:36] <tadzik> I suppose people always treated rockets as something close to magic, so rocket science became an equivalent of Very, Very Hard Stuff

[22:36] * sorear notes the people in #mono talking about smuxi release candidates, ponders trying it

[22:36] <tadzik> + people like the phrase, for some reason

[22:36] * tadzik takes off the cloak

[22:36] <colomon> think of the post WWII days, when we Americans had to import ex-Nazi scientists to build our rockets....

[22:37] <colomon> it was dark and mysterious and complex

[22:37] <x3nU> building NQP under windows using gcc is impossible because stupid build system of dyncall

[22:37] <x3nU> :F

[22:37] <sorear> No, the real magic here is the Runge-Kutta method

[22:38] <sorear> As in, "I have absolutely no clue how or why this works, but it makes a HUGE difference so I use it anyway"

[22:38] <tadzik> :)

[22:38] <colomon> all I was trying to say was, I don't expected to be showered in praise, because the script is pretty pedestrian, really, and sorear++ did half the hard work.  but on the other hand, threaded, GUI code is now pedestrian in p6!!  that's huge.

[22:39] <tadzik> :)

[22:41] *** drbean left
[22:42] <masak> \o/

[22:45] <colomon> it's like we should have a committee (ugh!) dedicated to figuring out really cool stuff you can already do in p6.

[22:46] <masak> news flash: that's us.

[22:48] *** drbean joined
[22:51] <tadzik> :D

[22:53] *** mj41 left
[23:00] *** aindilis left
[23:00] <masak> 'night, #perl6

[23:00] <sorear> bye masak

[23:00] <tadzik> o/

[23:01] *** aindilis joined
[23:02] <dalek> roast: 94ec2d4 | (Solomon Foster)++ | S32-num/roots.t:

[23:02] <dalek> roast: Unfudge working test.

[23:02] <dalek> roast: review: https://github.com/perl6/roast/commit/94ec2d44de

[23:02] <dalek> niecza: 9b00872 | (Solomon Foster)++ | lib/CORE.setting:

[23:02] <dalek> niecza: Allow split's $limit to be Whatever.

[23:02] <dalek> niecza: review: https://github.com/sorear/niecza/commit/9b00872f93

[23:02] <dalek> niecza: d7bbde0 | (Solomon Foster)++ | t/spectest.data:

[23:02] <dalek> niecza: Turn off S06-advanced/callsame.t, it's kind of dodgy and fails miserably on Niecza at the moment.

[23:02] <dalek> niecza: review: https://github.com/sorear/niecza/commit/d7bbde0d26

[23:04] *** bluescreen10 joined
[23:08] *** Moukeddar left
[23:12] *** am0c left
[23:16] *** am0c joined
[23:35] *** cspencer joined
[23:39] *** fridim_ joined
[23:41] *** PacoAir left
[23:42] *** PacoAir joined
[23:50] *** packetknife left
[23:56] *** drbean left
[23:58] *** ggoebel joined
[23:58] <sorear> o/ ggoebel

