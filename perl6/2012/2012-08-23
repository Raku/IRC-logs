[00:01] *** fridim_ left
[00:04] *** FROGGS joined
[00:05] *** ptl joined
[00:05] *** ptl left
[00:05] *** ptl joined
[00:09] *** ptl left
[00:10] *** ptl joined
[00:11] *** ptl left
[00:11] *** ptl joined
[00:15] *** ptl left
[00:16] *** ptl joined
[00:16] *** ptl left
[00:16] *** ptl joined
[00:21] *** ptl left
[00:27] *** gongyiliao left
[00:28] *** japhb_ left
[00:31] *** ptl joined
[00:31] *** ptl left
[00:31] *** ptl joined
[00:32] *** wooden joined
[00:32] *** wooden left
[00:32] *** wooden joined
[00:32] *** apejens left
[00:33] *** apejens joined
[00:36] *** spider-mario left
[00:36] *** ptl left
[00:46] *** Circlepuller__ left
[00:46] *** Circlepuller joined
[00:47] *** ptl joined
[00:49] *** daniel-s left
[00:50] *** daniel-s joined
[00:50] *** skids left
[00:51] *** ptl left
[00:53] *** Guest77901 left
[00:54] *** ptl joined
[00:54] *** ptl left
[00:54] *** ptl joined
[00:54] *** Exodist left
[00:54] *** exodist_ joined
[00:55] *** exodist_ is now known as Exodist

[00:59] *** ptl left
[01:08] *** hypolin joined
[01:09] *** ptl joined
[01:10] *** tokuhiro_ left
[01:14] *** ptl left
[01:15] *** colomon joined
[01:24] *** ptl joined
[01:24] *** ptl left
[01:24] *** ptl joined
[01:28] *** colomon left
[01:29] *** ptl left
[01:32] *** colomon joined
[01:40] *** ptl joined
[01:44] *** ptl left
[01:45] *** ptl joined
[01:45] *** ptl left
[01:45] *** ptl joined
[01:49] *** Carolyn joined
[01:49] <Carolyn> hhhhhhhhh

[01:49] <Carolyn> hola

[01:49] <Carolyn> quien

[01:49] *** Carolyn left
[01:50] *** ptl left
[01:50] *** Woodi left
[02:00] *** ptl joined
[02:00] *** ptl left
[02:00] *** ptl joined
[02:05] *** ptl left
[02:07] *** Woodi joined
[02:08] *** dayangkun joined
[02:15] *** ptl joined
[02:15] *** ptl left
[02:15] *** ptl joined
[02:17] *** woosley joined
[02:20] *** ptl left
[02:31] *** ptl joined
[02:35] *** ptl left
[02:38] *** ptl joined
[02:38] *** ptl left
[02:38] *** ptl joined
[02:42] *** ptl left
[02:43] *** ptl joined
[02:43] *** ptl left
[02:43] *** ptl joined
[02:44] *** Circlepuller left
[02:45] *** Circlepuller joined
[02:47] *** ptl left
[02:48] *** ptl joined
[02:48] *** ptl left
[02:48] *** ptl joined
[02:52] *** sevvie joined
[02:52] *** Woodi left
[02:53] *** ptl left
[02:53] *** Woodi joined
[02:53] *** jeffreykegler left
[03:00] <DrEeevil> sorear_: re: makefiles, try bootstrap with MAKEOPTS="-j4", it reliably fails

[03:00] <DrEeevil> sorear_: and the bootstrap is "dirty" because it writes to the live filesystem (which some build environments penalize with termination), I workarounded it by copying the installed niecza files into the boot/ directory

[03:01] <DrEeevil> (and patching out that silly autofetcher)

[03:01] <DrEeevil> bonus: I was able to test bootstrapping different versions with different versions, it is quite resilient and just works

[03:04] *** ptl joined
[03:04] *** ptl left
[03:04] *** ptl joined
[03:05] <sevvie> Hey everyone. I downloaded Rakudo Star 2012.07, wanting to give rakudo another try. On a Macbook. Everything looked fine until what looks like the first time it calls gcc, at which point it throws two errors: unrecognized command line option '-Wno-long-double', and '-Wenum-compare'.

[03:06] <sevvie> (calls gcc as compared to clang)

[03:06] <benabik> sevvie: Do you have the latest version of Xcode and the command line tools?

[03:06] <sevvie> I do.

[03:06] *** jaldhar joined
[03:07] <benabik> Hm.

[03:07] <DrEeevil> sevvie: gcc -v claims what version?

[03:07] <sevvie> gcc version 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)

[03:07] * benabik has the same

[03:07] * benabik wonders what Parrot version * uses...

[03:08] <DrEeevil> haha

[03:08] <benabik> Uses 4.6.0

[03:08] *** ptl left
[03:08] <DrEeevil> sevvie: that is pretty much ancient stuff no one uses anymore ... and I guess updating is impossible

[03:09] <benabik> DrEeevil: That is the most current Apple toolchain.  :-P

[03:09] <DrEeevil> benabik: I see no contradiction there

[03:09] <benabik> hugme: hug DrEeevil 

[03:09] * hugme hugs DrEeevil

[03:10] <DrEeevil> o_O

[03:10] <benabik> Hm.  The hints haven't changed since 4.6.0

[03:11] *** ptl joined
[03:11] *** ptl left
[03:11] *** ptl joined
[03:13] * benabik downloads and tries to build.

[03:14] <benabik> Huh.  It uses clang for me.

[03:14] <sevvie> It uses clang up to a point, for me.

[03:14] <benabik> And generates PILES of warnings.  O.o

[03:14] <sevvie> I gotta run for a bit, but I read backlog.

[03:14] <benabik> sevvie: I'll keep trying and see if I see the same thing.  Might be that Parrot is defaulting to clang but something else is trying to use gcc.

[03:15] *** ptl left
[03:18] *** ptl joined
[03:18] *** ptl left
[03:18] *** ptl joined
[03:18] * benabik hopes star won't overwrite my existing toolchain...

[03:20] <benabik> Oh good, it creates an install directory...

[03:21] * benabik hasn't tried star before.

[03:23] *** ptl left
[03:23] *** sftp left
[03:24] <benabik> Okay, `perl Configure.pl --gen-parrot` has finished without error...

[03:33] *** ptl joined
[03:33] *** ptl left
[03:33] *** ptl joined
[03:38] *** ptl left
[03:49] *** ptl joined
[03:53] *** ptl left
[03:56] *** ptl joined
[04:00] *** ptl left
[04:02] *** ptl joined
[04:02] *** ptl left
[04:02] *** ptl joined
[04:07] *** ptl left
[04:16] *** telex left
[04:17] <sevvie> Weird. Wonder why mine doesn't like compiling.

[04:18] *** ptl joined
[04:21] *** telex joined
[04:22] *** ptl left
[04:24] *** ptl joined
[04:24] *** ptl left
[04:24] *** ptl joined
[04:29] *** ptl left
[04:31] *** ptl joined
[04:31] *** ptl left
[04:31] *** ptl joined
[04:33] *** telex left
[04:36] *** ptl left
[04:36] *** telex joined
[04:40] *** birdwindupbird joined
[04:43] *** kaleem joined
[04:46] *** jaldhar left
[04:46] *** ptl joined
[04:46] *** ptl left
[04:46] *** ptl joined
[04:47] *** jaldhar joined
[04:51] *** simcop2387 left
[04:51] *** ptl left
[04:52] *** simcop2387 joined
[04:53] *** ptl joined
[04:53] *** ptl left
[04:53] *** ptl joined
[04:58] *** ptl left
[05:04] *** jeffreykegler joined
[05:05] *** jeffreykegler left
[05:08] *** ptl joined
[05:08] *** ptl left
[05:08] *** ptl joined
[05:13] *** ptl left
[05:18] *** FROGGS left
[05:20] <masak> morning, #perl6

[05:20] <masak> I've decided not to rush macros-d2 into today's release.

[05:20] <masak> if I'd had today completely free for Perl 6 activities, I'd get it merged easily.

[05:21] <masak> but I have to teach today. so, next release.

[05:21] <masak> &

[05:24] *** ptl joined
[05:24] *** ptl left
[05:24] *** ptl joined
[05:28] *** ptl left
[05:31] *** ptl joined
[05:31] *** ptl left
[05:31] *** ptl joined
[05:34] <moritz> good morning

[05:36] *** ptl left
[05:43] *** lateau1 joined
[05:46] *** ptl joined
[05:46] *** ptl left
[05:46] *** ptl joined
[05:47] *** scott__ joined
[05:51] *** ptl left
[05:59] *** wtw joined
[06:02] *** ptl joined
[06:05] *** benabik left
[06:05] *** flexibeast1 joined
[06:05] *** flexibeast left
[06:06] *** benabik joined
[06:06] *** ptl left
[06:08] *** ptl joined
[06:08] *** ptl left
[06:08] *** ptl joined
[06:13] *** ptl left
[06:24] *** ptl joined
[06:24] *** ptl left
[06:24] *** ptl joined
[06:27] *** popl left
[06:29] *** ptl left
[06:36] *** FROGGS joined
[06:38] *** xinming left
[06:39] *** ptl joined
[06:39] *** ptl left
[06:39] *** ptl joined
[06:43] *** PZt left
[06:44] *** ptl left
[06:46] *** PZt joined
[06:47] *** PacoAir left
[06:54] *** ptl joined
[06:54] *** ptl left
[06:54] *** ptl joined
[06:56] *** jaldhar left
[06:58] *** yves__ joined
[06:59] *** ptl left
[07:02] *** Psyche^ joined
[07:02] *** Psyche^ is now known as Patterner

[07:08] <tadzik> good moritz morning

[07:09] *** brrt joined
[07:10] *** ptl joined
[07:11] <pmichaud> good morning, #perl6

[07:11] *** SamuraiJack joined
[07:14] *** ptl left
[07:16] *** fgomez joined
[07:17] *** ptl joined
[07:21] *** ptl left
[07:23] *** ptl joined
[07:27] *** desertm4x joined
[07:28] *** ptl left
[07:31] *** hoelzro|away is now known as hoelzro

[07:31] <arnsholt> FROGGS: I'm off to work now, but if you wanna discuss the Zavolaj/CStruct stuff I'll be back online in about half an hour

[07:31] <hoelzro> morgen

[07:36] *** ObseLeTe joined
[07:38] *** FROGGS left
[07:39] *** FROGGS joined
[07:39] *** ptl joined
[07:39] *** ptl left
[07:39] *** ptl joined
[07:41] <Timbus> [Coke], yes (slightly delayed response)

[07:42] <FROGGS> hi arnsholt: dont much to discuss right now I guess, but I let you know

[07:42] <Timbus> [Coke], I've been wondering how to do it. Since my library is socket based (as in, class sockets not IO sockets) it doesn't go well with the normal callback-based event stuff. I think I need to wrap my run() method into a callback and wait for the user to call MuEvent::run

[07:44] *** flexibeast1 is now known as flexibeast

[07:44] *** simcop2387 left
[07:44] *** ptl left
[07:44] *** rafl left
[07:46] *** rafl joined
[07:47] *** simcop2387 joined
[07:51] <Timbus> can you pass a method as a reference in perl 6 or do you need to wrap it in a closure like perl 5's  sub {$obj.method()}

[07:54] *** ptl joined
[07:54] *** ptl left
[07:54] *** ptl joined
[07:54] *** ObseLeTe left
[07:56] <pmichaud> Timbus: one can do   *.method()   or { $obj.method }

[07:56] <pmichaud> the first is equivalent to     -> $obj { $obj.method }

[07:56] <Timbus> ah, yes but i was wondering if you could simply pass the method around, like C#'s delegates i guess

[07:57] <Timbus> without needing to keep the object around (in this case in a closure)

[07:58] <Timbus> my $meth = &$obj.method; $meth(); #equivalent to $obj.method();?

[07:59] <hoelzro> Timbus: iirc, method objects are "unbound"

[07:59] *** ptl left
[07:59] <Timbus> a closure works fine, I'm just wondering if it's the perl 6 'way'

[08:02] <dalek> nqp: dd9cb19 | pmichaud++ | / (2 files):

[08:02] <dalek> nqp: Update NQP release_guide, create "make release" target in Makefile.

[08:02] <dalek> nqp: review: https://github.com/perl6/nqp/commit/dd9cb19336

[08:10] *** ptl joined
[08:14] <arnsholt> FROGGS: I'd be interested in a quick outline of what features you're missing

[08:14] *** ptl left
[08:15] <arnsholt> I do try to do some stuff with Zavolaj, but I end up spending most of my time hacking on Zavolaj itself, so feedback on what people actually -need- is good =)

[08:16] <moritz> ncurses gives you access to some variables (for example for getting the window size) -- is that supported in zavolaj somehow?

[08:16] <arnsholt> Nope =/

[08:16] <arnsholt> It's one of the things I've been pondering

[08:17] <arnsholt> Getting it to work probably wouldn't be too hard, but I'm not entirely sure what the best way to expose it to the user is

[08:17] <arnsholt> Should probably have a chat with jnthn about it

[08:17] <FROGGS> I need to get the right values out of a struct like { Uint8 x; Uint8 y; }, right now I get bot x and y inside the same Int

[08:17] <FROGGS> I cant tell it that the ints are just one byte

[08:18] <FROGGS> So having a struct that is like { Uint8; Uint16; Sint16; char; ... } is even worse to split apart if it gets to you in a single int

[08:18] *** Patterner left
[08:18] *** Psyche^ joined
[08:18] *** Psyche^ is now known as Patterner

[08:19] <FROGGS> when reading your type_map { int8 => char }, one could think that he actually gets a 1-byte-thingy

[08:20] <arnsholt> Yeah, sized members in structs (and arrays of sized stuff) is in the pipeline

[08:21] <FROGGS> ya, looks like the problem is in CStruct.h around line 204

[08:21] <FROGGS> sorry, CStruct.c

[08:21] <arnsholt> The Uint/Sint distinction is likely to be annoying as well, but I haven't really discussed that with jnthn yet

[08:21] <FROGGS> I dont care at the end if my perl var is actually an int8 or Int or whatever, the numeric value must be right

[08:22] <arnsholt> Actually, the problem is a bit trickier

[08:22] *** GlitchMr joined
[08:23] <arnsholt> get_attribute_ref returns a pointer to the value we're reading, and it's the caller's responsibility to interpret that pointer correctly

[08:23] <FROGGS> one problem that comes to my mind is that you dont really know how much bytes the compiler spent for types when building the lib

[08:24] <arnsholt> Which means that I'll have to update the calling convention of get_attribute_ref, update all implementors of the interface and all callers of it

[08:24] <FROGGS> ya, basically the caller has to know what he will get

[08:24] <arnsholt> I'm sort of in the middle of that

[08:24] <FROGGS> ohh, okay

[08:25] *** ptl joined
[08:25] *** ptl left
[08:25] *** ptl joined
[08:25] <arnsholt> Unfortunately I've an article deadline coming up, so it'll probably be a few weeks at least before I get it done

[08:27] *** fhelmberger joined
[08:27] <FROGGS> that not a problem, I dont wanna release the SDL module for perl6 tomorrow ;o)

[08:27] <arnsholt> Well, that's a relief =)

[08:27] <FROGGS> its more some kind of proof of concept right now

[08:28] <FROGGS> to get into perl6 a bit, since I installed it like two days ago

[08:28] <arnsholt> But for now, you'll have to deal with this stuff manually similarly to the version struct

[08:28] <FROGGS> I've got a question about that

[08:28] <FROGGS> why is actually something in $!version?

[08:29] <arnsholt> You mean how we get the info from the C struct via $!version?

[08:30] <FROGGS> ya, is it just because I told it that there is an int value at the first place?

[08:30] *** ptl left
[08:30] <arnsholt> Yeah, pretty much

[08:30] <FROGGS> so its all about the order?

[08:30] <arnsholt> The order of declaration of the has clauses matters, just like in C, really

[08:30] <FROGGS> k

[08:31] <arnsholt> From that we can calculate the allocation strategy for the corresponding C struct and peek into it correctly

[08:31] <FROGGS> hmmm

[08:31] <arnsholt> Pointer members are a bit more complicated, since those will be associated with a Perl 6 object as well as a pointer in C

[08:32] <FROGGS> what if the struct has a member like char[42]? how could I tell it that there's a something of size 42?

[08:32] <arnsholt> For those we have a parallel storage for the Perl object pointers and some logic to make sure the Perl object has the same pointer as the C struct

[08:32] <arnsholt> That's another thing we don't support yet either =/

[08:32] <arnsholt> Only struct { int *array; }

[08:33] <arnsholt> (And it's not entirely obvious how to expose it as Perl)

[08:34] *** ptl joined
[08:34] <moritz> int @array[42]

[08:34] <moritz> once we implement that :-)

[08:34] <arnsholt> Except that syntax is kind of taken already

[08:35] <FROGGS> ya

[08:35] <arnsholt> Since has CArray[int] $!arr means int *arr

[08:37] <FROGGS> I could imagine passing a custom class like char42 as a type, with a common getter that gives you the size in bytes

[08:38] *** ptl left
[08:38] <arnsholt> But for the most part you can hack around the lack of flattened arrays

[08:38] <arnsholt> Just embed 42 ints in a row =)

[08:39] <FROGGS> ohh what the

[08:39] <FROGGS> ya, at least it would work ;o)

[08:39] <moritz> :-)

[08:40] *** dnocaster joined
[08:41] <jnthn_> morning o/

[08:41] <phenny> jnthn_: 29 May 11:40Z <daxim> tell jnthn_  rakudo-switched-over-to-qregex =~ s|Ementaler|Emmentaler|

[08:41] *** ptl joined
[08:41] *** jnthn_ is now known as jnthn

[08:41] <dnocaster> Anyone know where I could find a link to a transcript (or video) of the State of the Onion 12 (2008) & 13 (2009) talks, if such exist?

[08:43] *** bbkr joined
[08:45] *** ptl left
[08:46] *** ptl joined
[08:46] *** ptl left
[08:46] *** ptl joined
[08:49] <moritz> if google doesn't find them, I guess they don't exist

[08:50] <dnocaster> ty moritz.. did spend an hour looking.. placeholders only

[08:50] *** Patterner left
[08:51] *** ptl left
[08:51] <FROGGS> maybe ask the organizers? thats pretty much the last chance you got

[08:52] <dnocaster> what happens if I give a little love shout out to everyone out there (not as a means to an end), but for love's sake.. any takers? Does it irritate anyone? If so, sorry. Peace.

[08:53] <moritz> hugme: hug dnocaster 

[08:53] * hugme hugs dnocaster

[08:53] *** kresike joined
[08:53] <kresike> hello all you happy perl6 people

[08:53] <FROGGS> hi

[08:55] *** ObseLeTe joined
[08:55] <dnocaster> :) Okay.. world feels okay.. bfn and ty

[08:56] *** dnocaster left
[08:58] <FROGGS> bfn?

[09:01] <arnsholt> Bye for now, I guess

[09:02] *** ptl joined
[09:02] <FROGGS> ya, google told that too after my mobile broadband went to work again.... thanks anyway

[09:03] *** Psyche^ joined
[09:03] *** Psyche^ is now known as Patterner

[09:04] *** sorear_ is now known as sorear

[09:04] <FROGGS> its weird somehow sitting in the train and everybody around is talking in german (comming right back from yapc)

[09:05] <sorear> DrEeevil: I see no reason to support building debian packages of niecza, since they will be useless for non-root users due to how stupid the module compilation cache is

[09:06] *** ptl left
[09:06] <sorear> DrEeevil: niecza wants to be installed in a directory named "run" with a user-writable directory "../obj"

[09:07] <sorear> DrEeevil: someday (possibly next week after I get Bailador running unmodified) I'll make it use $HOME/.niecza/module-cache or something like that

[09:09] *** ptl joined
[09:09] *** ptl left
[09:09] *** ptl joined
[09:13] *** ptl left
[09:16] *** ptl joined
[09:16] *** ptl left
[09:16] *** ptl joined
[09:17] <dalek> rakudo/nom: c7f6492 | moritz++ | src/core/ (2 files):

[09:17] <dalek> rakudo/nom: improve X::Numeric::Real error messge

[09:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c7f6492914

[09:17] <dalek> doc: ea92fc5 | moritz++ | lib/X/Numeric/Real.pod:

[09:17] <dalek> doc: X::Numeric::Real

[09:17] <dalek> doc: review: https://github.com/perl6/doc/commit/ea92fc5af0

[09:20] *** ptl left
[09:22] <dalek> doc: e5e4199 | moritz++ | lib/X/Phaser/PrePost.pod:

[09:22] <dalek> doc: X::Phaser::PrePost

[09:22] <dalek> doc: review: https://github.com/perl6/doc/commit/e5e4199365

[09:22] *** ptl joined
[09:22] *** ptl left
[09:22] *** ptl joined
[09:24] *** xinming joined
[09:24] <dalek> specs: 2774606 | moritz++ | S32-setting-library/Exception.pod:

[09:24] <dalek> specs: [S32::Exception] better error message for X::Numeric::Real

[09:24] <dalek> specs: 

[09:24] <dalek> specs: also fix a typo

[09:24] <dalek> specs: review: https://github.com/perl6/specs/commit/277460624d

[09:27] *** ptl left
[09:28] <dalek> doc: 6347804 | moritz++ | lib/X/Package/Stubbed.pod:

[09:28] <dalek> doc: X::Package::Stubbed

[09:28] <dalek> doc: review: https://github.com/perl6/doc/commit/63478040fa

[09:37] *** dayangkun left
[09:38] *** ptl joined
[09:42] *** ptl left
[09:44] *** ptl joined
[09:44] *** ptl left
[09:44] *** ptl joined
[09:49] *** ptl left
[10:00] *** ptl joined
[10:00] *** ptl left
[10:00] *** ptl joined
[10:00] *** hypolin left
[10:01] *** hoelzro is now known as hoelzro|away

[10:02] *** hoelzro|away is now known as hoelzro

[10:05] *** ptl left
[10:06] <dalek> niecza: 6b0956d | sorear++ | src/ (3 files):

[10:06] <dalek> niecza: First horrible implementation of use lib

[10:06] <dalek> niecza: 

[10:06] <dalek> niecza: It doesn't scope right and it also doesn't work with the precompiler so it

[10:06] <dalek> niecza: cannot be used in modules.  Also it propagates into modules, which may or may

[10:06] <dalek> niecza: not be a feature.

[10:06] <dalek> niecza: review: https://github.com/sorear/niecza/commit/6b0956d6a6

[10:08] *** scott__ left
[10:11] * moritz has started to read http://arxiv.org/pdf/math/9404236v1.pdf and likes it so far

[10:13] *** mcglk joined
[10:15] *** ptl joined
[10:15] *** ptl left
[10:15] *** ptl joined
[10:19] <dalek> nqp: b1a3a46 | jonathan++ | / (4 files):

[10:19] <dalek> nqp: Copy P6Regex to get a P5Regex. Start making a few of the basic changes needed, looking to STD_P5 for inspiration.

[10:19] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b1a3a4611b

[10:19] <dalek> nqp: c5d768b | jonathan++ | t/p5regex/ (2 files):

[10:19] <dalek> nqp: Add test harness for p5regex support and copy over rx_basic, which is simple enough to be valid p5 and p6. Passes.

[10:19] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c5d768b85c

[10:19] *** ptl left
[10:21] *** ptl joined
[10:21] *** ptl left
[10:21] *** ptl joined
[10:22] <jnthn> r: 'ab' ~~ /a :: b/

[10:22] <p6eval> rakudo c7f649: OUTPUT«===SORRY!===␤:: not yet implemented at line 2, near " b/"␤»

[10:24] *** fgomez left
[10:26] *** ptl left
[10:27] <moritz> jnthn: I hope you are aware that there are many :P5 regex tests in roast?

[10:27] <moritz> (and in perl 5, of course :-)

[10:28] <jnthn> moritz: yes, but going around that build cycle will be tedious, so I'm going to build a small suite based on some of the ones in spectest in nqp.

[10:29] *** lateau1 left
[10:29] <moritz> sure

[10:30] <moritz> just want to make sure you don't conjure them out of thin air, which would take way more time

[10:33] *** MayDaniel joined
[10:37] *** ptl joined
[10:38] *** spider-mario joined
[10:41] *** ptl left
[10:43] *** ptl joined
[10:43] *** ptl left
[10:43] *** ptl joined
[10:48] *** ptl left
[10:50] *** ptl joined
[10:50] *** ptl left
[10:50] *** ptl joined
[10:55] *** ptl left
[10:58] <dalek> niecza: 92255f0 | sorear++ | / (2 files):

[10:58] <dalek> niecza: Add callframe(N) call form

[10:58] <dalek> niecza: review: https://github.com/sorear/niecza/commit/92255f0f64

[10:58] <dalek> niecza: 79d1139 | sorear++ | src/NieczaPathSearch.pm6:

[10:58] <dalek> niecza: Actually print the search path when lookup fails

[10:58] <dalek> niecza: review: https://github.com/sorear/niecza/commit/79d113931c

[10:59] <sorear> rn: rx/<- [!*'()\-._~A..Za..z0..9]>+/

[10:59] <p6eval> rakudo c7f649:  ( no output )

[10:59] <p6eval> ..niecza v19-31-g94c69fe: OUTPUT«===SORRY!===␤␤Unrecognized regex metacharacter < (must be quoted to match literally) at /tmp/NEr7LuE7ol line 1:␤------> rx/<⏏- [!*'()\-._~A..Za..z0..9]>+/␤␤Unhandled exception: Unable to resolve method ast in type Any␤ …

[10:59] <sorear> std: rx/<- [!*'()\-._~A..Za..z0..9]>+/

[10:59] <p6eval> std 235f71b: OUTPUT«ok 00:00 42m␤»

[11:02] <sorear> rn: <- []>

[11:02] <p6eval> rakudo c7f649, niecza v19-34-g79d1139:  ( no output )

[11:03] <sorear> rn: rx/<- []>/

[11:03] <p6eval> niecza v19-34-g79d1139: OUTPUT«===SORRY!===␤␤Unrecognized regex metacharacter < (must be quoted to match literally) at /tmp/YB7zpUDVd3 line 1:␤------> rx/<⏏- []>/␤␤Unhandled exception: Unable to resolve method ast in type Any␤  at /home/p6eval/niecza…

[11:03] <p6eval> ..rakudo c7f649: OUTPUT«===SORRY!===␤Error while compiling block : Error while compiling op call: Error while compiling block : Error while compiling block : StopIteration␤»

[11:05] *** ptl joined
[11:05] *** ptl left
[11:05] *** ptl joined
[11:05] <sorear> rn: "(y)" ~~ / '(' ~ ')' 'x' /

[11:05] <p6eval> rakudo c7f649, niecza v19-34-g79d1139:  ( no output )

[11:10] <dalek> nqp: 2d8b6e8 | jonathan++ | src/QRegex/P5Regex/ (2 files):

[11:10] <dalek> nqp: Start getting various of the p5metachar bits in place, and eliminate a few bits that will be unrequired.

[11:10] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2d8b6e8ecb

[11:10] <dalek> nqp: d6e3ed6 | jonathan++ | t/p5regex/01-p5regex.t:

[11:10] <dalek> nqp: Look in the correct places for tests.

[11:10] <dalek> nqp: review: https://github.com/perl6/nqp/commit/d6e3ed6d8a

[11:10] <dalek> nqp: 47a7bb4 | jonathan++ | src/QRegex/P5Regex/ (2 files):

[11:10] <dalek> nqp: Get p5quantifier largely in place and working.

[11:10] <dalek> nqp: review: https://github.com/perl6/nqp/commit/47a7bb4d22

[11:10] <dalek> nqp: e2b7dbe | jonathan++ | t/p5regex/ (2 files):

[11:10] <dalek> nqp: Add some quantifier tests.

[11:10] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e2b7dbe8c2

[11:10] *** ptl left
[11:16] <jnthn> a {*} /

[11:16] <jnthn> rx: / a {*} /

[11:16] <jnthn> r: / a {*} /

[11:16] <p6eval> rakudo c7f649:  ( no output )

[11:21] *** ptl joined
[11:21] *** ptl left
[11:21] *** ptl joined
[11:22] <dalek> niecza: 1666bb5 | sorear++ | src/ (2 files):

[11:22] <dalek> niecza: Fix broken parsing of signs in character classes

[11:22] <dalek> niecza: review: https://github.com/sorear/niecza/commit/1666bb507a

[11:23] <dalek> nqp: 71ec9af | jonathan++ | src/QRegex/P5Regex/ (2 files):

[11:23] <dalek> nqp: Remove a few pieces we won't need in P5regex.

[11:23] <dalek> nqp: review: https://github.com/perl6/nqp/commit/71ec9af3fb

[11:25] *** FROGGS left
[11:26] *** ptl left
[11:36] *** ptl joined
[11:36] *** ptl left
[11:36] *** ptl joined
[11:41] *** ptl left
[11:47] *** ObseLeTe left
[11:51] *** ptl joined
[11:51] *** ptl left
[11:51] *** ptl joined
[11:53] *** awwaiid_ is now known as awwaiid

[11:56] *** ptl left
[12:05] *** JimmyZ joined
[12:06] * JimmyZ wonders what's the goal of P5Regex,

[12:06] <phenny> JimmyZ: 19 Aug 15:16Z <sorear> tell JimmyZ Seems problematic insofar as mono 2.x lacks an interpreter and is extremely architecture-dependent in AOT mode (might even be ARM only)

[12:06] *** ptl joined
[12:06] *** ptl left
[12:06] *** ptl joined
[12:07] <moritz> JimmyZ: m:P5/.../

[12:08] <JimmyZ> I thought for the new rakudo roadmap about perl 5

[12:09] <moritz> JimmyZ: don't you see the relation?

[12:09] <moritz> it allows people to write some kind of p5 code (here, regexes) in perl 6

[12:09] <dalek> rakudo/nom: befe7ca | moritz++ | src/core/Exception.pm:

[12:09] <dalek> rakudo/nom: make message of X::Inheritance::Unsupported less confusing

[12:09] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/befe7ca360

[12:10] <JimmyZ> I saw m:P5/.../ 

[12:11] *** ptl left
[12:13] <colomon> nr: say 'ccdd' ~~ /<-[ab]+[cd]>+/

[12:13] <p6eval> rakudo c7f649: OUTPUT«｢ccdd｣␤␤»

[12:13] <p6eval> ..niecza v19-35-g1666bb5: OUTPUT«Match()␤»

[12:14] <colomon> sorear: your latest patch broke that one, I think.

[12:16] *** kaleem left
[12:19] *** nemesys joined
[12:21] *** fgomez joined
[12:22] *** ptl joined
[12:22] *** ptl left
[12:22] *** ptl joined
[12:23] *** FROGGS joined
[12:24] *** kaleem joined
[12:24] *** kaleem left
[12:24] *** kaleem joined
[12:26] *** ptl left
[12:29] *** ptl joined
[12:29] *** ptl left
[12:29] *** ptl joined
[12:32] *** desertm4x left
[12:34] *** FROGGS left
[12:34] *** ptl left
[12:44] *** ptl joined
[12:44] *** ptl left
[12:44] *** ptl joined
[12:47] *** FROGGS joined
[12:48] *** clintongormley joined
[12:49] *** ptl left
[12:55] *** PacoAir joined
[12:59] *** ptl joined
[12:59] *** ptl left
[12:59] *** ptl joined
[13:00] *** birdwindupbird left
[13:00] *** benabik left
[13:04] *** ptl left
[13:09] *** Circlepuller left
[13:10] *** Circlepuller joined
[13:11] *** SamuraiJack left
[13:12] <sorear> colomon: working as designed (!?).  STD.pm6 parses unary - as looser than everything else

[13:12] <colomon> sorear: so the test and rakudo are both wrong?

[13:12] <sorear> phenny: tell TimToady see colomon 06:12 and 05:13 PDT, I think we are looking at a stdbug

[13:12] <phenny> sorear: I'll pass that on when TimToady is around.

[13:13] <sorear> colomon: possibly.  if it's breaking real-world code I'll do $something_else

[13:13] <sorear> until TimToady_ gets back to us

[13:13] <moritz> you mean it's actually parsed as <- ( [ab]+[cd] )>  (with invented syntax)?

[13:14] <sorear> yes

[13:15] *** ptl joined
[13:15] *** ptl left
[13:15] *** ptl joined
[13:15] *** fgomez left
[13:15] *** bluescreen10 joined
[13:16] *** Circlepuller_ joined
[13:16] *** Circlepuller left
[13:16] *** desertm4x joined
[13:18] *** SamuraiJack joined
[13:19] *** ptl left
[13:19] <sorear> n: say 'ccdd' ~~ /<(-[ab])+[cd]>+/

[13:19] <p6eval> niecza v19-35-g1666bb5: OUTPUT«===SORRY!===␤␤Unrecognized regex metacharacter - (must be quoted to match literally) at /tmp/T1ztWYc8dW line 1:␤------> say 'ccdd' ~~ /<(-⏏[ab])+[cd]>+/␤␤Unable to parse regex; couldn't find final '/' at /tmp/T1ztWYc8dW…

[13:19] <sorear> n: say 'ccdd' ~~ /< (-[ab])+[cd]>+/

[13:19] <p6eval> niecza v19-35-g1666bb5: OUTPUT«Match()␤»

[13:21] <dalek> niecza: c5422a5 | sorear++ | src/ (2 files):

[13:21] <dalek> niecza: Revert "Fix broken parsing of signs in character classes"

[13:21] <dalek> niecza: 

[13:21] <dalek> niecza: May be a STDbug, breaks colomon's code.

[13:21] <dalek> niecza: This reverts commit 1666bb507ada5d922a5cc8aa3d964d0e4a39a825.

[13:21] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c5422a51d7

[13:21] <dalek> niecza: 0567c61 | sorear++ | src/STD.pm6:

[13:21] <dalek> niecza: quickfix for space after sign

[13:21] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0567c617ab

[13:21] *** tokuhiro_ joined
[13:22] *** fridim_ joined
[13:22] <colomon> sorear: oh, sorry, that wasn't a real-world bug of mine, that's from roast.  I still run spectest every time I see you've pushed a patch.  :)

[13:22] *** ptl joined
[13:22] *** ptl left
[13:22] *** ptl joined
[13:22] <sorear> colomon++

[13:23] <sorear> roast is sufficiently real world for me

[13:23] * moritz chuckles

[13:25] *** SamuraiJack left
[13:26] *** FROGGS left
[13:27] *** ptl left
[13:28] *** Woodi left
[13:29] *** SamuraiJack joined
[13:38] *** ptl joined
[13:39] *** Woodi joined
[13:40] <dalek> rakudo/p5rx: 1431c3e | jonathan++ | src/Perl6/ (2 files):

[13:40] <dalek> rakudo/p5rx: Wire the :P5 adverb up to use P5Regex. Doesnm't support much yet, but makes it accessible from Rakudo. A simple check of it worked.

[13:40] <dalek> rakudo/p5rx: review: https://github.com/rakudo/rakudo/commit/1431c3e7a0

[13:40] <jnthn> Will merge after the release.

[13:40] <jnthn> And of course, still plenty of work to do in the NQP repo on the P5Regex grammar/actions.

[13:42] *** ptl left
[13:45] *** ptl joined
[13:45] <nemesys> 'nine' around somewhere on freenode?

[13:45] <sorear> no clue

[13:46] <sorear> does it have to be freenode?

[13:46] <sorear> he's in irc.perl.org:#parrot _right now_

[13:46] <nemesys> found him, thx

[13:48] *** Circlepuller joined
[13:49] *** ptl left
[13:51] *** Circlepuller_ left
[13:52] *** kaare_ joined
[13:52] *** ptl joined
[13:52] *** ptl left
[13:52] *** ptl joined
[13:56] <moritz> r: enum A <Ax Ay>; class B is A { }

[13:56] <p6eval> rakudo befe7c: OUTPUT«===SORRY!===␤A does not support inheritance, so B cannot inherit from it␤at /tmp/zR1qDUyM1m:1␤»

[13:56] *** ptl left
[13:59] <dalek> doc: b4b1564 | moritz++ | lib/X/Inheritance/Unsupported.pod:

[13:59] <dalek> doc: X::Inheritance::Unsupported

[13:59] <dalek> doc: review: https://github.com/perl6/doc/commit/b4b1564bb6

[13:59] *** ptl joined
[13:59] *** ptl left
[13:59] *** ptl joined
[14:00] <moritz> r: has sub foo() { }

[14:00] <p6eval> rakudo befe7c: OUTPUT«===SORRY!===␤Cannot use 'has' with sub declaration␤at /tmp/8GTfQzuI4p:1␤»

[14:03] <JimmyZ> moritz: s/«//

[14:03] *** Circlepuller left
[14:03] *** Circlepuller_ joined
[14:03] *** ptl left
[14:03] <[Coke]> r: has pi;

[14:03] <p6eval> rakudo befe7c: OUTPUT«===SORRY!===␤Malformed has␤at /tmp/5QMsYy9J9M:1␤»

[14:04] *** tokuhiro_ left
[14:05] <dalek> doc: 5abd340 | moritz++ | lib/X/Declaration/Scope.pod:

[14:05] <dalek> doc: X::Declaration::Scope

[14:05] <dalek> doc: review: https://github.com/perl6/doc/commit/5abd34027f

[14:05] <dalek> doc: b20ac1f | moritz++ | lib/X/Inheritance/Unsupported.pod:

[14:05] <dalek> doc: typo, JimmyZ++

[14:05] <dalek> doc: review: https://github.com/perl6/doc/commit/b20ac1f9ca

[14:05] *** tokuhiro_ joined
[14:06] *** ptl joined
[14:06] *** ptl left
[14:06] *** ptl joined
[14:10] *** tokuhiro_ left
[14:10] *** ptl left
[14:11] *** kaleem left
[14:11] *** leont joined
[14:12] *** stopbit joined
[14:12] *** kaleem joined
[14:12] *** sftp joined
[14:12] *** kaleem left
[14:13] *** ptl joined
[14:13] *** ptl left
[14:13] *** ptl joined
[14:13] *** kaleem joined
[14:13] *** clintongormley left
[14:14] *** clintongormley joined
[14:18] *** wtw left
[14:18] *** ptl left
[14:19] *** clintongormley left
[14:20] *** clintongormley1 joined
[14:20] *** PacoAir left
[14:20] *** clintongormley1 is now known as clintongormley

[14:20] *** ptl joined
[14:20] *** ptl left
[14:20] *** ptl joined
[14:25] *** ptl left
[14:28] <sirrobert> is there a method like $attribute.get_value that works for private attributes?

[14:29] <jnthn> all attributes are private

[14:29] <jnthn> Thus $attribute.get_value will work for has $!x, yes

[14:29] <sirrobert> hmm ok... well, how can I get this to work:

[14:30] <sirrobert> r: class A { has $!id; method gist () { my $str; for self.^attributes -> $attr { $str ~= $attr.name.substr(2)~': '~$attr.get_value(self); }; return $str; } }; my $a = A.new(id => "foo"); say $a;

[14:30] <p6eval> rakudo befe7c: OUTPUT«use of uninitialized value of type Any in string context  in method gist at /tmp/J_AekoPFzO:1␤␤id: ␤»

[14:30] <sirrobert> the return of get_value() there is always null for $!foo and correct for $.foo

[14:30] <diakopter> jnthn!

[14:31] <sirrobert> (if $.foo is defined in the class, I mean)

[14:31] <jnthn> o/ diakopter 

[14:31] *** thou joined
[14:32] <jnthn> sirrobert: Remember that the default constructor doesn't initialize private attributes.

[14:32] *** jaldhar joined
[14:32] <sirrobert> ohh...

[14:32] <jnthn> So the problem is that yo're never putting anything in $!id

[14:32] <sirrobert> I don't think I knew that =) thanks

[14:33] <diakopter> that has surprised me both times I learned it

[14:33] <jnthn> I suspect if you fix that, the introspection works fine :)

[14:33] <sirrobert> cool, I appreciate it.  

[14:34] <diakopter> it just seems to me if the caller has the power to *create* an object, what's wrong with letting it initialize its private data

[14:35] <diakopter> "because the attributes are private" holds no water with me

[14:35] <PerlJam> why not?

[14:35] *** ptl joined
[14:35] *** ptl left
[14:35] *** ptl joined
[14:36] <PerlJam> The fact that they are private means that they are an implementation detail that is anot and should not be part of the user-visible interface

[14:36] <PerlJam> s/anot/not/

[14:36] <diakopter> sure, after the object is created

[14:36] <PerlJam> no, there is not temporal component here.

[14:37] <jnthn> it's a refactoring thing

[14:37] <jnthn> It's good if all the things that relate to a "has $!foo" are contained within the class

[14:38] <jnthn> Thus you can do as you wish with it without having to care about the class consumers, provided you retain expected behavior.

[14:38] <moritz> also if the user supplies an object at construction time, there's not much sense it making it private

[14:39] <[Coke]> I suspect actual private attributes are going to be a big mindset change for some fivers.

[14:39] <moritz> because the user already has access to the object. Why not make it available through an accessor?

[14:39] <diakopter> and non-fivers like me

[14:39] <[Coke]> diakopter: what language are you used to that lets you poke at private attributes from outside the class

[14:39] <sirrobert> what language did you come from most recently, diakopter?

[14:39] <[Coke]> ?

[14:39] <[Coke]> heh.

[14:40] <moritz> javascript? :-)

[14:40] *** ptl left
[14:40] <sirrobert> (also, does Perl 6 have a concept of "protected")

[14:40] <GlitchMr> Perl 5

[14:40] <diakopter> any language where you can explicitly set a private member in a constructor

[14:40] <dalek> nqp: 3c6c7ea | jonathan++ | src/QRegex/P5Regex/ (2 files):

[14:40] <dalek> nqp: First cut of Perl 5 style character classes.

[14:40] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3c6c7ea287

[14:40] <dalek> nqp: 3413cee | jonathan++ | t/p5regex/ (2 files):

[14:40] <dalek> nqp: Run some basic tests for Perl 5 character classes.

[14:40] <dalek> nqp: review: https://github.com/perl6/nqp/commit/3413cee6e2

[14:40] * sirrobert hearts javascript.

[14:41] <GlitchMr> Python

[14:41] <GlitchMr> PHP

[14:41] <GlitchMr> Java

[14:41] <diakopter> C#

[14:41] <jnthn> diakopter: You can explicitly set it in the BUILD submethod.

[14:42] <jnthn> It's just that the default things won't do that.

[14:42] <GlitchMr> GetField() in C# ;)

[14:42] <sirrobert> jnthn++

[14:42] <nuba> sirrobert: you can also U+2764 unicode, then you get ❤

[14:42] <diakopter> ok. in that case, it's confusing that the default things will do that on non-private stuff

[14:42] <GlitchMr> In Java you can use Reflection

[14:42] <sirrobert> nuba: thanks =)

[14:42] <GlitchMr> In PHP you can convert object to array and access internals

[14:43] <sirrobert> not sure how to enter that in my terminal (or irssi)... gooooogling

[14:43] <GlitchMr> $class = new SimpleClass; $classvars = (array)$class; echo $classvars["\0SimpleClass\0answer"];

[14:43] <GlitchMr> Yes, null

[14:43] <JimmyZ> PHP has a Reflection class ;)

[14:43] <moritz> fwiw you can use introspection in p6 too to get private attributes

[14:43] <diakopter> [Coke]: that's kindof rude. I'm sorry for not using your terminology properly

[14:44] <sirrobert> ❤

[14:44] <sirrobert> ha

[14:44] <GlitchMr> php > var_dump($class->{"\0SimpleClass\0answer"});

[14:44] <nuba> screen's copy and paste works too: ❤

[14:44] <GlitchMr> PHP Fatal error:  Cannot access property started with '\0' in php shell code on line 1

[14:44] <GlitchMr> \0 is hax

[14:44] <GlitchMr> But well, that's PHP, so this is expected

[14:45] <sirrobert> nuba: yeah, but my computer's broken... it doesn't let my copy/paste between power cycles ;)

[14:45] <[Coke]> diakopter: I have no idea what you're apologizing for.

[14:45] <GlitchMr> Also, Ruby with .send

[14:45] <[Coke]> ... or if you're suggesting I should.

[14:45] <GlitchMr> Or simply extending class ;)

[14:45] <sirrobert> [Coke]:  I think he's responding to the tone he inferred from your question about his prior language (and the subsequent 'heh.')

[14:47] *** jaldhar left
[14:47] <diakopter> sirrobert: I wrote a lot of Perl 5 [that generates C] last week, a ton of NQP the several weeks before that, a bunch of C the weeks before that, a bunch of Java at $dayjob before that, a ton of JavaScript before that, a decent amount of C# before that, and I don't remember more than 6 months ago.  A lot of Perl 5 I seem to recall

[14:47] <sirrobert> diakopter: cool =)

[14:47] *** clintongormley left
[14:47] <moritz> diversity++

[14:47] <sirrobert> it's great to have a well-rounded background

[14:48] *** jaldhar joined
[14:48] <masak> morning, #perl6

[14:48] <colomon> \o

[14:48] *** ingy is now known as not_ingy

[14:48] *** not_ingy is now known as ingy

[14:49] <sirrobert> hi masak

[14:49] <jnthn> o/ masak

[14:49] <diakopter> it was a rhetorical question meant to demean, not one actually seeking information

[14:49] <PerlJam> diakopter: I didn't take it that way.  I thought he was seeking a point of commonality.

[14:49] <diakopter> because it strongly implied that no language lets you do that by the definition of private

[14:50] <jnthn> What're the Perl 5 translations of what Perl 5 calls \b and \B?

[14:50] <jnthn> er, s:1st/5/6/

[14:50] <diakopter> (and therefore I wouldn't be able to answer the question, because there wouldn't be a language I was coming from that met that criterion)

[14:50] <masak> jnthn: <|w> and... something?

[14:50] <moritz> jnthn: \b   comes out as >>|<<   :-)

[14:50] <moritz> ie left or right word boundary

[14:50] <jnthn> aha

[14:51] <masak> moritz: yes, but <|w> means that too.

[14:51] <moritz> correct

[14:51] <jnthn> thanks

[14:51] <moritz> I forgot that, even though I think I implemented it :-)

[14:51] *** ptl joined
[14:51] *** ptl left
[14:51] *** ptl joined
[14:51] <moritz> r: say '...foo' ~~ /<|w>./

[14:51] <p6eval> rakudo befe7c: OUTPUT«｢f｣␤␤»

[14:52] <[Coke]> diakopter: it was not a rhetorical question. it was an actual question because I assumed you were coming from perl5. the heh was because someone else asked the exact same question when I did.

[14:52] <diakopter> I didn't see the heh :)

[14:52] <jnthn> masak, moritz: thanks

[14:52] <GlitchMr> Just wondering. Can I write this more cleanly?

[14:52] <GlitchMr> ([+] @val) / @val

[14:53] <moritz> yes

[14:53] <diakopter> [Coke]: ok, I guess I didn't know there were non-private privates in Perl 5... are there?

[14:53] <moritz> mean(@val), if you define &mean first

[14:53] <moritz> diakopter: if you do inside-out objects, yes :-)

[14:53] <moritz> but perl 5 does not supply a default constructor

[14:54] <moritz> so if you can initialize private attributes via a ->new() call is left to the class

[14:54] <diakopter> like every other language

[14:54] <GlitchMr> I guess that mean() isn't builtin or method

[14:54] <[Coke]> diakopter: there's really nothing private in perl5 if you have the source. as opposed to, say, Java.

[14:54] <moritz> GlitchMr: that's why I wrote "if you define &mean first"

[14:55] <diakopter> [Coke]: I thought that was my point when I wrote above that you implying there was no valid answer to the question

[14:55] <sirrobert> r: say {a=><a b c>}<a>.WHAT;

[14:55] <p6eval> rakudo befe7c: OUTPUT«Parcel()␤»

[14:55] <diakopter> (that Perl 5 doesn't have privates)

[14:55] <sirrobert> Why would I want a Parcel instead of an Array ?

[14:55] <sirrobert> (in general)

[14:56] *** ptl left
[14:56] <moritz> sirrobert: parcels are cheaper

[14:56] <diakopter> ok, I'm sorry for feeling attacked; I'll get over it.

[14:57] <sirrobert> moritz: ok

[14:57] <PerlJam> diakopter: If you feel like you're being attacked on #perl6 ... YOU'RE WRONG!   ;-)

[14:58] <sirrobert> moritz:  in JSON::Tiny, does it seem reasonable to you to render Parcels as JSON arrays?

[14:58] *** kresike left
[14:58] <moritz> sirrobert: yes

[14:58] <sirrobert> moritz want me to implement and do a pull request or add an issue?

[14:59] <diakopter> PerlJam: you're right; I shouldn't be touchy. :(

[14:59] <moritz> sirrobert: might be a one-word fix, lemme try

[14:59] <masak> from docs/release_guide.pod: "Rakudo will generally issue its own development release two days after the Parrot release." -- Parrot released one day late this month. does that mean Rakudo release is tomorrow?

[15:00] <jnthn> masak: shouldn't

[15:00] <moritz> I'd say we stick to Thursday, unless our release manager sees a good reason to dealay

[15:00] <jnthn> masak: I think tadzik++ will cut tonight or so

[15:00] <moritz> especially since we don't depend on the new parrot (I think)

[15:00] <PerlJam> diakopter: A way to look at it is that humans have public parts (arms, legs, etc.) that you can decorate at "construction" time, but you really, really shouldn't initialize the contents of the human's stomach without cutting them open first (or using the stomach's public interface: the mouth)

[15:01] <sirrobert> moritz: thanks.  Also, is there a reasonable rendering of a Pair?  I thought maybe a single {a:1} object.

[15:01] <sirrobert> moritz:  (those are the two literals I keep bumping into)

[15:01] <tadzik> I'm here

[15:01] <tadzik> I'll make the release today evenings probably

[15:01] <diakopter> PerlJam: yeah, I just don't see why the mouth can't be a constructor

[15:02] * tadzik has had a nice Frankfurt on Foot trip today

[15:02] <moritz> sirrobert: not sure about Pair. Since there's no exact equivalence, I'm inclined to leave it out

[15:02] <sirrobert> moritz: fair enough

[15:02] <moritz> could just as well be { "key": "a", "value": 3 }

[15:03] <sirrobert> hmmm nod

[15:04] <sirrobert> is there any concept of perl5-style "references" in p6?

[15:04] <moritz> sirrobert: fix for Parcel pushed

[15:04] <sirrobert> moritz++: thanks

[15:04] *** fhelmberger left
[15:05] <moritz> sirrobert: https://perl6advent.wordpress.com/2011/12/16/where-have-all-the-references-gone/

[15:05] <sirrobert> heh

[15:05] <moritz> I try to make an art form out of answering FAQs with blog posts :-)

[15:06] <sirrobert> I don't know art... but I know what I like =)

[15:06] *** ptl joined
[15:06] *** ptl left
[15:06] *** ptl joined
[15:06] <sirrobert> actually I do know art ;)

[15:07] <moritz> thinking more about the question, it seems that scalar containers most closely resemble pointers/references

[15:07] <sirrobert> yeah, that's what I was gleaning...

[15:08] <moritz> binding another scalar container to them is like assignment to a pointer

[15:08] <sirrobert> or sort of like macros to things

[15:08] <sirrobert> (for a very non-technical use of "macro")

[15:08] <moritz> and assigning a value into the container is like assigning to the pointee

[15:08] <sirrobert> ahh, yeah

[15:08] <sirrobert> that makes sense of my experience of it

[15:09] <sirrobert> (and is a C bad-touch)

[15:09] <moritz> but that doesn't put much room for the 'bind a value directly into a container' thing that youc an do in p6

[15:09] <sirrobert> yeah

[15:09] <moritz> and that you can call a method on the container, and it actually works ont he contained value

[15:09] <sirrobert> I like that

[15:11] *** ptl left
[15:11] <[Coke]> ugh, doing regexes in java is so painful. :(

[15:12] * tadzik hugs [Coke]

[15:12] <moritz> have you \\\ed today? :-)

[15:12] <[Coke]> I was not implying there was no valid answer to the question.

[15:12] *** FROGGS joined
[15:12] <jnthn> At least C# provides an @"..." construct so you can write regexes sanely.

[15:13] <geekosaur> mmm, leaning toothpicks

[15:13] <[Coke]> I find the interface to s/// bizarre.

[15:15] <moritz> I didn't mean to answer any question, just that languages without regex literals generally require a ridculous amount of backslashes

[15:15] * [Coke] need a perl6-on-JVM interface for the regexes only.

[15:15] <[Coke]> huh. timezone shift somewhere, as feather is now running my cron job taht I didn't expect for another 45m.

[15:16] <[Coke]> ... or is that job leftover from a day ago? hurm...

[15:16] <sirrobert> so, I updated JSON::Tiny but now my script says:  Missing or wrong version of dependency '/home/sirrobert/.perl6/_git/rakudo-star-2012.07/install/lib/parrot/4.6.0/languages/perl6/lib/JSON/Tiny.pm'

[15:17] <sirrobert> I updated with panda install JSON::Tiny

[15:17] <sirrobert> (which worked fine)

[15:17] <sirrobert> I didn't specify a version anywhere...

[15:18] *** JimmyZ left
[15:19] <FROGGS> is it okay that its a .pm and not a .pm6 ?

[15:19] <[Coke]> yes.

[15:19] <sirrobert> I believe so

[15:19] <jnthn> std: m/a{2}/

[15:19] <p6eval> std 235f71b: OUTPUT«===SORRY!===␤Unsupported use of {2} as general quantifier; in Perl 6 please use X**2 at /tmp/y1rqYtkVTN line 1:␤------> m/a{2}⏏/␤Check failed␤FAILED 00:00 41m␤»

[15:19] <sirrobert> I have use v6; and am using the perl6 interpreter

[15:20] <jnthn> std: m:p5/a{2}/

[15:20] <p6eval> std 235f71b: OUTPUT«===SORRY!===␤Unrecognized adverb :p5(1) at /tmp/99oRWdfxKz line 1:␤------> m⏏:p5/a{2}/␤Unsupported use of {2} as general quantifier; in Perl 6 please use X**2 at /tmp/99oRWdfxKz line 1:␤------> m:p5/a{2}⏏/␤Check…

[15:20] <jnthn> std: m:P5/a{2}/

[15:20] <p6eval> std 235f71b: OUTPUT«ok 00:00 47m␤»

[15:20] <jnthn> std: m:P5/a]/

[15:20] <p6eval> std 235f71b: OUTPUT«ok 00:00 47m␤»

[15:21] <[Coke]> weird. I had a lot of old tests running for rakudo that were hung. results from the last few days might be screwy.

[15:21] *** ptl joined
[15:21] *** ptl left
[15:21] *** ptl joined
[15:25] <jnthn> std: m:P5/a]b/

[15:25] <p6eval> std 235f71b: OUTPUT«ok 00:00 47m␤»

[15:26] *** ptl left
[15:27] <geekosaur> I don't think std knows more than very basic parsing for m:p5 regexes?

[15:27] <masak> ?eval "a]b" =~ /a]b/

[15:28] <masak> $ perl -Mstrict -wE 'say "a]b" =~ /a]b/'

[15:28] <masak> 1

[15:32] <jnthn> geekosaur: Yeah, but it gets that right and looking at the grammar I can't see how on earth it does so

[15:32] <jnthn> eval "a]b" =~ /a]b/

[15:32] <buubot_backup> jnthn: 1

[15:32] <jnthn> eval "a)b" =~ /a)b/

[15:32] <buubot_backup> jnthn: ERROR: Unmatched ) in regex; marked by <-- HERE in m/a) <-- HERE b/ at (eval 20) line 1. 

[15:32] <jnthn> aha

[15:32] <jnthn> good

[15:33] <masak> phew :)

[15:33] * masak .oO( all magical characters are magical, but some are more magical than others )

[15:34] <jnthn> ;)

[15:35] *** jeffreykegler joined
[15:35] <jnthn> eval "adc" =~ /a[^]b]c/

[15:35] <buubot_backup> jnthn: 1

[15:35] <jnthn> wtbh!

[15:36] <diakopter> heh

[15:36] <jnthn> eval "adc" =~ /a[^b]]c/

[15:36] <buubot_backup> jnthn: No output.

[15:36] <jnthn> eval "]" =~ /a[]]c/

[15:36] <buubot_backup> jnthn: No output.

[15:36] <jnthn> eval "]" =~ /a[]]/

[15:36] <buubot_backup> jnthn: No output.

[15:36] <jnthn> eval "a]" =~ /a[]]/

[15:37] <buubot_backup> jnthn: 1

[15:37] <jnthn> eval "a]" =~ /a[b]]/

[15:37] <buubot_backup> jnthn: No output.

[15:37] *** ptl joined
[15:37] *** ptl left
[15:37] *** ptl joined
[15:37] <jnthn> eval "ab" =~ /a[]b/

[15:37] <buubot_backup> jnthn: ERROR: Unmatched [ in regex; marked by <-- HERE in m/a[ <-- HERE ]b/ at (eval 20) line 1. 

[15:37] <masak> :D

[15:37] <masak> eval "ab" =~ /a[]b]/

[15:37] <buubot_backup> masak: 1

[15:38] * masak toys with concepts like "far too DWIM" and "overdwimmery"

[15:41] <sirrobert> I just rebuilt rakudo star and when I run panda (or make) I get "Missing or wrong version of dependency 'src/gen/BOOTSTRAP.pm'"

[15:41] <sirrobert> any tips on resolution?

[15:42] <sirrobert> ufo seems to work

[15:42] *** ptl left
[15:42] *** crab2313 joined
[15:43] <masak> sirrobert: did you make install?

[15:43] <jnthn> masak: far too fun to parse :P

[15:43] <sirrobert> I did, but I just realized I didn't wipe out the modules dir

[15:43] <sirrobert> doing that now

[15:44] *** thelazydeveloper joined
[15:44] <sirrobert> ok, that seems to have fixed it

[15:45] <sirrobert> I had some modules that required ... something else =)

[15:46] *** ggoebel left
[15:52] *** stopbit left
[15:52] *** ptl joined
[15:52] *** ptl left
[15:52] *** ptl joined
[15:53] *** stopbit joined
[15:57] *** ptl left
[16:01] *** brrt left
[16:07] *** ptl joined
[16:07] *** ptl left
[16:07] *** ptl joined
[16:12] *** ptl left
[16:12] <FROGGS> masak: I'm here btw too (if you dont wanna email)

[16:14] <masak> FROGGS: oh hai :)

[16:14] <FROGGS> hi

[16:14] * masak sees FROGGS' latest email

[16:15] *** hoelzro is now known as hoelzro|away

[16:15] <masak> FROGGS: ah, I suspected you wanted to do lots of sub declarations.

[16:15] <masak> FROGGS: first off, that's unhygienic.

[16:15] <FROGGS> why that?

[16:15] <masak> because you want to influence how the mainline context looks, not the macro context.

[16:16] <masak> note that I'm using "unhygienic" in a very detached sense.

[16:16] <pmichaud> masak! \o/

[16:16] <masak> I don't mean that it's wrong.

[16:16] <masak> clearly, it's what you want to do here.

[16:16] <masak> second, you can't just put unquotes anywhere. they have to be in term position.

[16:16] <masak> so "I believe and hope" are adequate descriptions of the wishful thinking involved.

[16:17] <masak> (this may change if TimToady gets his proposal through with a more general unquote model)

[16:17] <FROGGS> ya I'm actually not sure how to do it right

[16:18] <FROGGS> but I still don't get the idea about your first sentence

[16:18] <masak> the one about hygiene?

[16:19] <FROGGS> one reason for using macros to me is doing things simpler and faster

[16:19] <FROGGS> and that is what I wanna achieve

[16:19] <masak> yes.

[16:19] <masak> your use case is totally legit.

[16:19] <masak> mind if I throw it up as a gist so we can all discuss it?

[16:20] *** kaleem left
[16:20] <moritz> r: constant name = 'foo'; sub ::(name) () { say 42 }; foo()

[16:20] <p6eval> rakudo befe7c: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&foo' called (line 1)␤»

[16:20] <moritz> r: constant name = 'foo'; sub ::(name) () { say 42 }; say ::MY.keys

[16:20] <p6eval> rakudo befe7c: OUTPUT«0␤»

[16:20] *** cognominal joined
[16:20] *** cognominal left
[16:21] *** cognominal joined
[16:21] <masak> r: constant name = 'foo'; sub ::(name) () { say 42 }; eval 'foo'

[16:21] <p6eval> rakudo befe7c: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&foo' called (line 1)␤»

[16:21] <masak> moritz: I think an RT ticket went in that said that the sub gets the wrong name or something.

[16:22] <moritz> r: constant name = 'foo'; sub ::(name) () { say 42 }; say ::(name)()

[16:22] <p6eval> rakudo befe7c: OUTPUT«Symbol 'foo' not found␤  in method <anon> at src/gen/CORE.setting:9761␤  in <anon> at src/gen/Metamodel.pm:2304␤  in any find_method_fallback at src/gen/Metamodel.pm:2302␤  in any find_method at src/gen/Metamodel.pm:843␤  in <anon> at src/gen/BOOTSTRAP.pm:824␤  in …

[16:23] *** ptl joined
[16:23] *** ptl left
[16:23] *** ptl joined
[16:24] *** FROGGS left
[16:25] *** FROGGS joined
[16:26] <FROGGS> did I missed something during reconnect?

[16:26] <masak> <masak> mind if I throw it up as a gist so we can all discuss it?

[16:26] <moritz> FROGGS: http://irclog.perlgeek.de/perl6/today can tell, in general

[16:26] <masak> (your use case)

[16:26] <FROGGS> great

[16:27] <FROGGS> k, I've got the gist

[16:27] <masak> https://gist.github.com/3438222

[16:27] <FROGGS> ya

[16:27] <masak> it would be nice to make this work.

[16:27] <masak> with AST macros, I mean.

[16:27] <masak> I don't think it's too much to ask.

[16:27] *** benabik joined
[16:27] <FROGGS> so, when do I have to use these { {{{ }}} } things?

[16:28] <masak> when you're building program code dynamically.

[16:28] *** ptl left
[16:28] <FROGGS> If the content of that var should be put in, right?

[16:28] <masak> right.

[16:28] <FROGGS> cool

[16:28] <moritz> but it won't work that way

[16:28] <masak> but you seem to be assuming the content of those variables are strings.

[16:28] <FROGGS> hmm?

[16:28] <masak> they're not. not on my shift, anyway.

[16:28] <masak> they're ASTs.

[16:29] <FROGGS> okay

[16:29] <moritz> FROGGS: the problem is the sub name

[16:29] <moritz> you can't put any expression in the place of a sub name

[16:29] <moritz> just like you can't write

[16:29] <FROGGS> you mean the part at line 13? $method?

[16:29] <masak> FROGGS: you seem to be consistently using { {{{ }}} }. it should be just {{{ }}}

[16:29] <moritz> sub  "foo" ~ $bar () { }

[16:29] * masak fixes in the gist

[16:30] *** raiph joined
[16:30] <moritz> so, for now we don't have a mechanism for replacing arbitrary parts of syntax with {{{ }}}

[16:30] <FROGGS> hmmm

[16:31] <FROGGS> I'm just trying to do what I usually would do in C

[16:31] <masak> right.

[16:31] <moritz> the difference is that in C you create a string that represents the program code

[16:31] <moritz> with AST macros you don't go through the string layer

[16:32] <moritz> (which makes them much safer to compose)

[16:32] <masak> pugs: macro _code($name) { "sub $name \{ say 'OH HAI' }" }; _code('foo'); foo

[16:32] <p6eval> pugs: OUTPUT«OH HAI␤»

[16:32] <masak> FROGGS: Pugs has string macros :)

[16:33] <FROGGS> okay

[16:33] <FROGGS> hmmm, not ideal if it wont work at the end ;o)

[16:33] <masak> FROGGS: believe me, I do take your use case seriously.

[16:34] <FROGGS> ya, I believe you

[16:34] <masak> but I'd like for it to work (1) with ASTs, and (2) with the unhygiene being explicitly specified.

[16:34] <FROGGS> k

[16:35] <masak> those are just my preferences, of course. :) I happen to like hygienic AST macros.

[16:35] <masak> if anyone wants to work on unhygienic AST macros or textual macros, that's fine by me.

[16:35] <FROGGS> you need to show me exactly what you mean at some point

[16:36] <masak> as someone on the conf pointed out, the combination of D2-level macros and the nqp:: namespace for AST introspection is potentially very interesting.

[16:36] <masak> I was hoping to explore that a bit this weekend.

[16:36] *** benabik left
[16:37] *** Pleiades` left
[16:38] *** jerome left
[16:38] <FROGGS> brb

[16:38] *** ptl joined
[16:38] *** ptl left
[16:38] *** ptl joined
[16:40] *** jerome joined
[16:42] <dalek> nqp: 6902f1d | jonathan++ | / (3 files):

[16:42] <dalek> nqp: Handle funkiness in Perl 5 character class parsing, and add some tests to cover it.

[16:42] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6902f1d3f4

[16:42] <dalek> nqp: 8eb6810 | jonathan++ | src/QRegex/P5Regex/ (2 files):

[16:42] <dalek> nqp: Get various backslash sequences in place.

[16:42] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8eb6810a02

[16:42] <dalek> nqp: 564768b | jonathan++ | t/p5regex/ (2 files):

[16:42] <dalek> nqp: Various meta-chars tests.

[16:42] <dalek> nqp: review: https://github.com/perl6/nqp/commit/564768bf1e

[16:42] <dalek> nqp: 2b0173e | jonathan++ | t/p5regex/rx_metachars:

[16:42] <dalek> nqp: Tests for \w, \W, \d and \D.

[16:42] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2b0173e03b

[16:43] *** Pleiades` joined
[16:43] *** ptl left
[16:43] *** benabik joined
[16:43] *** bbkr left
[16:45] *** PacoAir joined
[16:47] <jnthn> airport &

[16:48] <sirrobert> I don't quite get the syntax for overloading the <> operator via a role...

[16:48] <sirrobert> multi method postfix:'<>' (Str $str) { ... }

[16:48] <sirrobert> that seemed to have a parse error

[16:49] <masak> std: multi method postfix:<< <> >>(Str $str) { ... }

[16:49] <p6eval> std 235f71b: OUTPUT«Potential difficulties:␤  'method' declaration outside of class at /tmp/PfQ5DIk2qE line 1:␤------> multi method postfix:<< <> >>(Str $str) ⏏{ ... }␤  $str is declared but not used at /tmp/PfQ5DIk2qE line 1:␤------> multi method postfix:<< <> >…

[16:49] <sirrobert> ah

[16:49] <masak> std: class A { multi method postfix:<< <> >>(Str $str) { ... } }

[16:49] <p6eval> std 235f71b: OUTPUT«Potential difficulties:␤  $str is declared but not used at /tmp/MwqTgE0Aax line 1:␤------> s A { multi method postfix:<< <> >>(Str ⏏$str) { ... } }␤ok 00:00 43m␤»

[16:49] <masak> std: class A { multi method postfix:<< <> >>(Str $str) { $str } }

[16:49] <p6eval> std 235f71b: OUTPUT«ok 00:00 43m␤»

[16:49] <masak> \o/

[16:49] <sirrobert> heh thanks

[16:50] <FROGGS> back

[16:50] <moritz> you probably want method postcirumfix:«< >»() though

[16:50] <moritz> there is no postfix <>

[16:51] <sirrobert> so I saw =)

[16:51] <sirrobert> postcircumfix

[16:51] <sirrobert> I just realized that heh

[16:53] <masak> though you also probably might not want to override postcirumfix:«< >»()

[16:53] *** ptl joined
[16:53] *** ptl left
[16:53] *** ptl joined
[16:53] <masak> as it is syntactic sugar for postcirumfix:<{ }>()

[16:53] <sirrobert> why?

[16:54] <sirrobert> ohh

[16:54] <sirrobert> yeah, it actually wouldn't let me do <> without {}

[16:54] <sirrobert> so I just did {} and <> worked

[16:55] <masak> \o/

[16:55] <masak> actually, you most probably want .at_key

[16:56] <timotimo> so postfix:<> would actually be like $pretty_object<> or something?

[16:56] <moritz> yes

[16:56] <moritz> r: sub postfix:<>($a) { say $a }; 42<>

[16:56] <p6eval> rakudo befe7c: OUTPUT«===SORRY!===␤Unsupported use of <>;  in Perl 6 please use lines() to read input, ('') to represent a null string or () to represent an empty list␤at /tmp/8rTvvfwAt1:1␤»

[16:56] <timotimo> heh.

[16:57] <sirrobert> I hit that earlier =)

[16:57] <moritz> also it would probably stil lose against the empty postcircumfix

[16:57] <moritz> hm, not sure actually

[16:57] <timotimo> r: sub postfix:{}($a) { say "$a bracey brace" }; 42{}

[16:57] <p6eval> rakudo befe7c: OUTPUT«(timeout)»

[16:57] <timotimo> whoops?

[16:58] <moritz> r: sub postfix:<{}>($a) { say "$a bracey brace" }; 42{}

[16:58] <p6eval> rakudo befe7c: OUTPUT«42 bracey brace␤»

[16:58] <timotimo> interesting. how did i trigger a loop there?

[16:58] *** ptl left
[16:58] <moritz> timotimo: it created a zero-width match, which was then quantified in the grammar

[16:58] <timotimo> aaaah

[16:58] <moritz> timotimo: so it matched the empty postfix all over again

[16:58] <timotimo> of course.

[16:59] <moritz> wouldn't that be a cute way to write a debugger?

[16:59] <moritz> write an empty-string postfix

[16:59] <moritz> that automatigacally gets inserted everywhere :-)

[16:59] <timotimo> heh heh

[16:59] * masak submits rakudobug

[16:59] <sirrobert> wow, that would be great

[16:59] <masak> shouldn't be allowed to write empty postfixes, methinks

[16:59] <timotimo> why not on a semicolon?

[16:59] <sirrobert> heh

[16:59] <sirrobert> timotimo: recursion problem?

[17:00] <timotimo> only if you use semicolons in your implementation of the ; operator :3

[17:00] <sirrobert> heh

[17:01] <timotimo> i bet there's tricks to circumvent semicolons if one is super careful

[17:01] <sirrobert> I've only found one case in javascript where semicolons are needed

[17:01] <sirrobert> (outside of for loops, that is)

[17:07] <timotimo> perl6 should have incircumfix.

[17:07] *** Woodi left
[17:07] <timotimo> as in  "foo" ><( "yoink" )°> "bar", the fish incircumfix operator

[17:08] <masak> that's just a regular infix, like infix:<?? !!>

[17:09] *** ptl joined
[17:09] *** ptl left
[17:09] *** ptl joined
[17:09] <timotimo> ?? !! isn't a regular infix, though. or is it?

[17:09] <timotimo> the last time i checked it was special-cased in the grammar

[17:10] *** sevvie left
[17:11] <timotimo> r: sub infix:['><>( )°>']($a, $b, $c) { say "behind fish: $a"; say "in fish: $b"; say "in front of fish: $c"; }; "foo" ><( "bar" )°> "baz";

[17:11] <p6eval> rakudo befe7c: OUTPUT«Not enough positional parameters passed; got 2 but expected 3␤  in sub infix:<> at /tmp/iwJoJQiM0Z:1␤  in block  at /tmp/iwJoJQiM0Z:1␤␤»

[17:11] <timotimo> whoops, typo'd

[17:11] <timotimo> r: sub infix:['><( )°>']($a, $b, $c) { say "behind fish: $a"; say "in fish: $b"; say "in front of fish: $c"; }; "foo" ><( "bar" )°> "baz";

[17:11] <p6eval> rakudo befe7c: OUTPUT«Not enough positional parameters passed; got 2 but expected 3␤  in sub infix:<> at /tmp/PyjImSWlB0:1␤  in block  at /tmp/PyjImSWlB0:1␤␤»

[17:11] <benabik> It would need to have an is parsed, I think.

[17:11] <timotimo> does that already work?

[17:12] <benabik> I dunno.

[17:13] <timotimo> r: sub infix:['>( )°∃']($a, $b, $c) { say "behind fish: $a"; say "in fish: $b"; say "in front of fish: $c"; }; "foo" >( "bar" )°∃ "baz";

[17:13] <p6eval> rakudo befe7c: OUTPUT«===SORRY!===␤Preceding context expects a term, but found infix  instead␤at /tmp/LwB3kVLcQB:1␤»

[17:14] *** Woodi joined
[17:14] *** ptl left
[17:15] <moritz> rakudo doesn't understand infix:[...]

[17:15] <masak> timotimo: I don't remember infix:<?? !!> being that special-cased.

[17:15] <moritz> just infix:«...» and <...>

[17:17] <timotimo> oh, OK

[17:17] <timotimo> r: sub infix:«>( )°∃»($a, $b, $c) { say "behind fish: $a"; say "in fish: $b"; say "in front of fish: $c"; }; "foo" >( "bar" )°∃ "baz";

[17:17] <p6eval> rakudo befe7c: OUTPUT«===SORRY!===␤Confused␤at /tmp/4Z7khZ6cIj:1␤»

[17:20] <timotimo> r: sub infix:<^-) (-^>($a, $b, $c) { say "$a | $b | $c" }; 100 ^-) "foo" (-^ 200;

[17:20] <p6eval> rakudo befe7c: OUTPUT«===SORRY!===␤Preceding context expects a term, but found infix - instead␤at /tmp/qHIdzDkkR0:1␤»

[17:20] <timotimo> not *really* sure where i went wrong there :|

[17:20] * masak neither

[17:21] *** kaleem joined
[17:23] *** raiph left
[17:24] <dalek> ecosystem: 9831204 | (Sir Robert Burbridge)++ | META.list:

[17:24] <dalek> ecosystem: added Masquerade

[17:24] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/9831204911

[17:24] *** ptl joined
[17:24] *** ptl left
[17:24] *** ptl joined
[17:25] <masak> o/~ "Masquerade! Paper faces on parade... Masquerade! Hide your face, so the world will never find you!" o/~

[17:25] <sirrobert> heh

[17:25] <benabik> ?? !! does seem to have a custom token in Rakudo's grammar.

[17:25] <benabik> https://github.com/rakudo/rakudo/blob/nom/src/Perl6/Grammar.pm#L2667

[17:26] *** spider-mario left
[17:26] <masak> sirrobert: interesting module. sirrobert++

[17:26] <sirrobert> benabik: well, it's custom, but not uniqely accounted for as a type

[17:26] <sirrobert> masak: thanks =)

[17:27] <benabik> sirrobert: Right, it's infix, but it parses differently than other infix

[17:27] <benabik> To create a new similar operator you'd also need a custom parse rule.

[17:27] <benabik> Which is NYI

[17:27] <timotimo> thank you for digging it out. it's exactly what i meant

[17:28] <sirrobert> don't you need a custom parse rule for all of them?

[17:28] <sirrobert> they're just simple for the others...

[17:28] *** ptl left
[17:28] <sirrobert> (not that I'm an expert on how to read the tokenization code)

[17:29] <benabik> I'm not sure the technical details of how Rakudo does it, but it basically creates a token for any infix:<foo> sub.

[17:30] <sirrobert> inside the infix token definition is a grammatical interpreter

[17:30] <sirrobert> the others have it too, they just only need <sym> to grab an already-defined symbol

[17:31] <sirrobert> of course, I don't get the <O(...)> bit, so what do I know =)

[17:31] * sirrobert is speaking boldly from ignorance

[17:31] *** ptl joined
[17:31] *** ptl left
[17:31] *** ptl joined
[17:32] <masak> the <O(...)> bit is just a method call, no?

[17:32] <sirrobert> I believe ;)

[17:33] *** cognominal left
[17:34] *** cognominal joined
[17:36] <moritz> yes

[17:36] *** ptl left
[17:36] *** thou left
[17:36] <moritz> and it "just" parses an expression with precedence not looser than the argument to pass to it

[17:36] <masak> then it can't be that tricky. :) method calls can usually be understood.

[17:37] <moritz> s/to/you/

[17:37] <moritz> *how* it does that is a different matter, not so easy to understand, IMHO

[17:39] <masak> aye.

[17:40] * masak discovers a wonderfully strangely consistent line in "Into the Woods": "better take the moment present as a present for the moment"

[17:41] *** tokuhiro_ joined
[17:41] <timotimo> (°∃ is a great string for a prefix operator that does nothing except pass the argument to say. it's the parrot operator :D

[17:43] <moritz> I'm skimming through STD's method EXPR

[17:43] *** cognominal left
[17:43] <moritz> and the key seems to be not to read &reduce on the first pass :-)

[17:43] <moritz> the loop starting at line 4644 is where it starts to get interesting

[17:43] *** kaleem left
[17:44] <moritz> the actual parsing starts with   my @t = $here.$termish

[17:44] <moritz> which basically calls the <termish> rule

[17:44] <moritz> which parses   <prefix>*<term> [<postfix> | <postcircumfix>]* or so

[17:45] <moritz> then it twiddles the prefixes and postfixes according to their relative precedence

[17:45] *** tokuhiro_ left
[17:46] *** cognominal joined
[17:46] <moritz> and then loop after that parses infixish

[17:46] <moritz> which is infix or meta operators that can act as infixes

[17:46] *** ptl joined
[17:46] *** ptl left
[17:46] *** ptl joined
[17:48] <moritz> TimToady_: what's an example for $infix<fake> ?

[17:48] <tadzik> oh hai

[17:48] <moritz> lol it's tadzik!

[17:48] <tadzik> lol! \o/

[17:48] *** jeffreykegler left
[17:48] <tadzik> I'm holding a knife and I'm going to cut a release

[17:48] <moritz> wield your sledgescalpel!

[17:49] <tadzik> and then maybe enjoy the one last glass of apfelwine

[17:49] <tadzik> or maybe last \d+ glass

[17:51] *** ptl left
[17:54] <moritz> http://perl5.git.perl.org/perl.git/blobdiff/fd7895cf8ded27bc2c1cddf7c72c17d6bdc95df0..24f4b7da:/pod/perlfunc.pod

[17:57] *** Woodi left
[17:58] <tadzik> do we want to target the new Parrot release?

[17:58] <tadzik> we're on 4.4.0

[17:58] <moritz> if there's no reason to bump the parrot version, we don't bump the parrot version

[17:58] <tadzik> ok, that's mu understanding as well

[17:59] <moritz> that makes it easier for packagers to do their thing

[18:02] *** ptl joined
[18:02] *** ptl left
[18:02] *** ptl joined
[18:07] *** ptl left
[18:10] <tadzik> oh noes, nqp doesn't build :(

[18:10] <tadzik> can anyone check on a fresh working tree? I get Missing or wrong version of dependency 'src/stage2/QRegex.nqp'

[18:11] * moritz tries

[18:14] *** hoelzro|away is now known as hoelzro

[18:14] *** Woodi joined
[18:16] <tadzik> same after git clean -fdx :\

[18:17] *** ptl joined
[18:17] *** ptl left
[18:17] *** ptl joined
[18:19] <moritz> built fine here

[18:19] <tadzik> huh

[18:19] <tadzik> after realclean and friends, on HEAD?

[18:19] *** desertm4x_ joined
[18:19] <moritz> after git clean -xdf, on nqp/master

[18:21] *** Woodi left
[18:22] *** ptl left
[18:23] *** desertm4x left
[18:24] <moritz> on parrot RELEASE_4_4_0

[18:25] *** crab2313 left
[18:26] <tadzik> ok, something's seriously wrong on my box. Now it doesn't build with "make: nqp: Command not found"

[18:26] <moritz> does 'git status' indicate any missing files?

[18:26] <tadzik> nope

[18:26] <tadzik> I'll try --gen-parrot

[18:27] <tadzik> that may take some time on this hotel wifi

[18:27] <moritz> if you don't have a replacement machine, I could chime in and do the release

[18:28] <[Coke]> chime or chip?

[18:28] <tadzik> it's somewhere between 32 and 180 kBps

[18:28] <moritz> I don't know, I don't speak English. I could do the release :-)

[18:29] <[Coke]> mmhehehehe.

[18:29] <tadzik> I'll go and send a postcard and see if it gets any better in my absence :)

[18:29] * [Coke] tries to get (?:(?i)(?:[+-]?)(?:(?=[.]?[0123456789])(?:[0123456789]*)(?:(?:[.])(?:[0123456789]{0,}))?)) to work in java.

[18:29] <moritz> is that a generated regex?

[18:29] <[Coke]> from Regexp::Common, aye.

[18:30] <tadzik> . o O ( java.util.org.cpan.regexp.common )

[18:31] *** desertm4x_ left
[18:32] *** ptl joined
[18:32] *** ptl left
[18:32] *** ptl joined
[18:33] <[Coke]> holy rusted metal, it worked as is.

[18:37] *** ptl left
[18:38] *** Tedd1 left
[18:41] *** simcop2387 left
[18:42] <moritz> probably because it doesn't contain a backslash :-)

[18:42] *** simcop2387 joined
[18:44] * [Coke] leaves a comment in the source thanking Regexp::Common!

[18:46] <masak> Regexp::Common++

[18:48] *** Woodi joined
[18:48] *** ptl joined
[18:48] *** ptl left
[18:48] *** ptl joined
[18:51] *** tokuhiro_ joined
[18:52] *** ptl left
[18:53] *** Tedd1 joined
[18:53] *** Circlepuller_ left
[18:54] *** Circlepuller_ joined
[18:55] *** ptl joined
[18:55] *** ptl left
[18:55] *** ptl joined
[18:59] *** GlitchMr left
[19:00] *** ptl left
[19:03] *** SamuraiJack left
[19:10] *** ptl joined
[19:10] *** ptl left
[19:10] *** ptl joined
[19:13] *** Woodi left
[19:15] *** ptl left
[19:17] <masak> tadzik: how's le release coming along?

[19:17] *** ptl joined
[19:17] *** ptl left
[19:17] *** ptl joined
[19:19] *** cognominal left
[19:20] *** fgomez joined
[19:21] *** spider-mario joined
[19:22] *** ptl left
[19:23] <leont> Want to try out rakudo without having to compile stuff, but Ubuntu ships a fairly old version (2011.07) :-/

[19:24] <sirrobert> What's a good way to comment/ignore a large chunk of code temporarily (large = a few dozen lines)/

[19:24] <sirrobert> ?

[19:24] <masak> leont: the future isn't evenly distributed :/

[19:24] *** cognominal joined
[19:24] <masak> sirrobert: =comment ?

[19:24] <benabik> What's the p6 block comment?  I seem to recall something like #`{ }

[19:25] <benabik> Ooh, POD comments too.

[19:25] <sirrobert> masak:  ahh, cool

[19:25] <sirrobert> benabik: hmmm didn't know about #'{}

[19:25] <sirrobert> thanks

[19:26] <leont> Am I correct when I say that 􏿽xABis_prime(any(9,10,11))􏿽xBB should equal 􏿽xABany(is_prime(9), is_prime(10), is_prime(11))􏿽xBB?

[19:26] <sirrobert> butterfly tricks:  is there a succinct way to check whether two arrays have the same values, regardless of order?

[19:26] <benabik> It's #`{}  (Backtick, not apostrophe.)  And it appears to let you use any and any number of brackets...  Although I'm reading from spec not from implementation.  :-D

[19:27] <masak> sirrobert: huh, sorry. it's '=begin comment' and then '=end comment', of course.

[19:27] <sirrobert> masak: cool

[19:27] <masak> sirrobert: @a.sort >>===<< @b.sort

[19:28] <sirrobert> whoa 

[19:28] <benabik> You should be able to use =for comment if you want to comment out an entire chunk of code separated by newlines from the rest.

[19:28] <masak> leont: yes.

[19:29] <masak> sirrobert: theoretically, @a.Bag === @b.Bag should also work at some point.

[19:29] <sirrobert> where can I read about >>===<< ?

[19:30] <masak> sirrobert: http://doc.perl6.org/language/operators#infix%20%3D%3D%3D

[19:30] <sirrobert> great, thanks

[19:30] <masak> oh, there's a docbug there.

[19:30] * masak fixes

[19:32] <dalek> doc: cfcc2b9 | (Carl Mäsak)++ | lib/operators.pod:

[19:32] <dalek> doc: [operators.pod] fix copy-paste-o

[19:32] <dalek> doc: review: https://github.com/perl6/doc/commit/cfcc2b9479

[19:32] *** ptl joined
[19:32] *** ptl left
[19:32] *** ptl joined
[19:34] <sirrobert> r: {a => 1, b => 2} >>===<< {a=>1, b=>3}

[19:34] <p6eval> rakudo befe7c:  ( no output )

[19:34] <sirrobert> r: say {a => 1, b => 2} >>===<< {a=>1, b=>3}

[19:34] <p6eval> rakudo befe7c: OUTPUT«("a" => Bool::True, "b" => Bool::False).hash␤»

[19:34] <sirrobert> cool

[19:34] <sirrobert> key-by-key

[19:35] <masak> nice.

[19:37] *** Circlepuller_ left
[19:37] *** Circlepuller_ joined
[19:37] <moritz> masak++

[19:37] <moritz> # doc fix

[19:37] *** ptl left
[19:37] *** thou joined
[19:38] <moritz> it just seems that you (or soembody else) pushed an outdated branch again

[19:38] * masak should contribute much more, but is too distracted all the time :/

[19:38] <tadzik> *pat pat* I know the feeling

[19:38] <masak> moritz: I edited through the github website.

[19:38] <moritz> masak: then it wasn't you :-)

[19:39] <masak> gee, I hope not.

[19:39] <masak> that would be horribly weird. :P

[19:39] <tadzik> a clone running wild!

[19:39] <tadzik> okay, I'm totally unable to build nqp today :(

[19:39] <tadzik> anyone with a spare tuit to run it today? Sorry for failing

[19:40] <moritz> I can do it

[19:40] <tadzik> awesome, thanks moritz++

[19:40] <moritz> tadzik: if you want to help, you could start to prepare a release announcement

[19:40] * masak pats tadzik back :)

[19:40] <tadzik> okay

[19:40] <moritz> that's pretty much independent of the other tasks

[19:40] * masak .oO( we should have separate release announcement managers ) :P

[19:41] *** gongyiliao joined
[19:42] <dalek> rakudo/nom: 2d5ec92 | moritz++ | tools/update-tai-utc.pl:

[19:42] <dalek> rakudo/nom: [tools] automatically assume correct path to src/core/tai-utc.pm

[19:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2d5ec92ad4

[19:43] <sirrobert> r: 1 ~~ any(3,2)

[19:43] <p6eval> rakudo befe7c:  ( no output )

[19:43] <sirrobert> r: say 1 ~~ any(3,2)

[19:43] <p6eval> rakudo befe7c: OUTPUT«False␤»

[19:43] <sirrobert> r: say False ~~ any(True, False);

[19:43] <p6eval> rakudo befe7c: OUTPUT«True␤»

[19:43] <sirrobert> r: say False ~~ any(True, True);

[19:43] <p6eval> rakudo befe7c: OUTPUT«True␤»

[19:43] <sirrobert> ack

[19:43] <moritz> ~~ True   always returns True

[19:44] <moritz> so that you can write

[19:44] <moritz> $something ~~ {code}

[19:44] <pmichaud> std: sub postfix:{}($a) { say 'whatever' };   # checking

[19:44] <sirrobert> ok

[19:44] <moritz> and if that code returns True, the match succeeds

[19:44] <p6eval> std 235f71b: OUTPUT«===SORRY!===␤Null operator is not allowed at /tmp/ZcZeCltvH7 line 1:␤------> sub postfix:{}⏏($a) { say 'whatever' };   # checking␤    expecting horizontal whitespace␤Parse failed␤FAILED 00:00 40m␤»

[19:44] <pmichaud> a-ha

[19:44] <sirrobert> how do I find out if anything in a list is false

[19:44] <sirrobert> ?

[19:44] <sirrobert> in particular:

[19:44] <sirrobert> r: ({a => 1, b => 2} >>===<< {a=>1, b=>3}).values

[19:44] <p6eval> rakudo befe7c:  ( no output )

[19:44] <sirrobert> r: say ({a => 1, b => 2} >>===<< {a=>1, b=>3}).values

[19:44] <p6eval> rakudo befe7c: OUTPUT«True False␤»

[19:45] <moritz> nr: say so first *.not, (1, 2, 0, 5)

[19:45] <p6eval> rakudo befe7c, niecza v19-37-g0567c61: OUTPUT«False␤»

[19:45] <moritz> erm, wait

[19:45] <moritz> nr: say so grep *.not, (1, 2, 0, 5)

[19:45] *** birdwindupbird joined
[19:45] <p6eval> rakudo befe7c, niecza v19-37-g0567c61: OUTPUT«True␤»

[19:45] <moritz> nr: say so grep *.not, (1, 2, 4, 5)

[19:45] <p6eval> rakudo befe7c, niecza v19-37-g0567c61: OUTPUT«False␤»

[19:45] <sirrobert> I've never used "so" before ... 

[19:45] <sirrobert> hmm

[19:45] <moritz> boolean context

[19:45] <masak> sirrobert: 'so' is like '?'

[19:45] <masak> except it's a listop.

[19:45] <moritz> nr: say not all (1, 2, 4, 5)

[19:45] <p6eval> rakudo befe7c, niecza v19-37-g0567c61: OUTPUT«False␤»

[19:45] <colomon> nr: say  grep *.not, (1, 2, 4, 5)

[19:46] <p6eval> rakudo befe7c, niecza v19-37-g0567c61: OUTPUT«␤»

[19:46] <moritz> masak: it's actually looser prec than listop

[19:46] <moritz> masak: it's loose unary

[19:46] <moritz> nr: say none(1, 2, 3, 0)

[19:46] <p6eval> rakudo befe7c, niecza v19-37-g0567c61: OUTPUT«none(1, 2, 3, 0)␤»

[19:46] <moritz> nr: say so none(1, 2, 3, 0)

[19:46] <p6eval> rakudo befe7c, niecza v19-37-g0567c61: OUTPUT«False␤»

[19:46] <moritz> nr: say so none(1, 2, 3, 5)

[19:46] <p6eval> rakudo befe7c, niecza v19-37-g0567c61: OUTPUT«False␤»

[19:46] <moritz> erm, stays with 'not all'

[19:46] <sirrobert> I don't see an entry for "so" on doc.perl6.org

[19:46] <pmichaud> say ?! any(1, 2, 3, 0)

[19:47] <pmichaud> r: say ?! any(1, 2, 3, 0)

[19:47] <p6eval> rakudo befe7c: OUTPUT«False␤»

[19:47] <moritz> sirrobert: 

[19:47] <moritz> http://doc.perl6.org/so

[19:47] <tadzik> what's tclc?

[19:47] <moritz> the anchor link might not work yet

[19:47] <sirrobert> huh... I didn't see it in the index

[19:47] <tadzik> I seem to have missed something interestin g;)

[19:47] <sirrobert> oh

[19:47] <sirrobert> ok

[19:48] <pmichaud> r: say ?^ any(1, 2, 3, 0)

[19:48] <masak> tadzik: 'titlecase lowercase'

[19:48] <p6eval> rakudo befe7c: OUTPUT«False␤»

[19:48] <tadzik> oh

[19:48] <moritz> sirrobert: I don't add operators to the index yet

[19:48] <sirrobert> ok =)

[19:48] <[Coke]> moritz: http://doc.perl6.org/!!

[19:48] *** ptl joined
[19:48] <pmichaud> r: say ?^ 0

[19:48] *** ptl left
[19:48] *** ptl joined
[19:48] <p6eval> rakudo befe7c: OUTPUT«True␤»

[19:48] <pmichaud> hrm

[19:48] <moritz> sirrobert: and doc.perl6.org isn't complete yet, but I do my best :-)

[19:48] <masak> tadzik: it's so Unicode-adapted that I don't really understand it. :)

[19:48] <pmichaud> I wonder if ?^ should autothread

[19:48] <pmichaud> we don't have any autothreading booleans

[19:49] <moritz> why would we want autothreading booleans?

[19:49] <pmichaud> so that I can ask "are any of the elements of this list False"  :-)

[19:49] <moritz> pmichaud: you can ask that with  'not all'

[19:49] <pmichaud> and use a junction to do it

[19:49] <pmichaud> r: say not all(1,2,3,4)

[19:49] <p6eval> rakudo befe7c: OUTPUT«False␤»

[19:50] <pmichaud> r: say not all(1,2,3,0)

[19:50] <p6eval> rakudo befe7c: OUTPUT«True␤»

[19:50] <sirrobert> ok, "so" is what I used to mean by "!!"

[19:50] <pmichaud> yeah, okay, mebbo.

[19:50] <pmichaud> *maybe

[19:50] <sirrobert> "!!" as a prefix, I mean.

[19:50] <pmichaud> still seems like perhaps ?^, ?|, and ?& should perhaps autothread

[19:50] *** Khisanth left
[19:51] <moritz> the only thing we can't easily ask is "is exactly one of those False?"

[19:51] <moritz> because we don't have a negation of the one() junction

[19:51] <pmichaud> yeah, autothreading over ?^ would enable that, I think.

[19:51] <sirrobert> moritz: huh

[19:51] *** Khisanth joined
[19:52] <moritz> pmichaud: but it would break the rule that every boolean context collapses the junction

[19:52] <tadzik> heh, tools/contributors.pl lists "niecza" as one of the contributors :)

[19:52] <moritz> tadzik: somebody ++'ed it in a commit message

[19:52] <tadzik> ah, so that's how it works :)

[19:53] *** ptl left
[19:53] <moritz> that, and the github user names

[19:54] <pmichaud> r: say 0 eqv False

[19:54] <p6eval> rakudo befe7c: OUTPUT«False␤»

[19:54] <pmichaud> oh well.

[19:54] <dalek> nqp: 656abc9 | moritz++ | VERSION:

[19:54] <dalek> nqp: bump VERSION to 2012.08

[19:54] <dalek> nqp: review: https://github.com/perl6/nqp/commit/656abc92e7

[19:56] <dalek> rakudo/nom: fc01818 | tadzik++ | docs/announce/2012.08:

[19:56] <dalek> rakudo/nom: Add a first sketch of a new release guide

[19:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/fc018182fd

[19:56] <pmichaud> ...a new release guide?

[19:57] <moritz> announcement, not guide

[19:57] <tadzik> oh well, it's hot here :)

[19:57] <tadzik> announcement of course

[19:57] <pmichaud> yeah, I was wondering if "announcement" was what was meant.  :)

[19:57] <pmichaud> tadzik++ moritz++

[19:57] <pmichaud> ...did I remember to push my changes for the nqp release guide, ooc?

[19:57] <moritz> you did, yes

[19:57] <pmichaud> okay, good.

[19:57] <moritz> the nqp tarball is already on github

[19:58] <moritz> the test for it is still running on my machine, but I don't expect any fallout from it

[19:58] <pmichaud> I worked on that earlier today but was also involved in other conversations at the time

[19:58] <tadzik> looking through the new anno... relea... announcement will be gladly welcome :)

[19:58] * pmichaud looks

[19:58] <pmichaud> any issues with the nqp release guide, ooc?

[19:58] <moritz> it requires a reconfigure before it works :-)

[19:59] <moritz> (my Makefile was too old)

[19:59] <pmichaud> that's because I added the "make release" target.  :)

[19:59] <moritz> I know

[19:59] *** ggoebel joined
[19:59] <pmichaud> nooooooooo!

[19:59] * pmichaud reads the announcement

[19:59] <dalek> rakudo/nom: d2472a9 | moritz++ | tools/build/NQP_REVISION:

[19:59] <dalek> rakudo/nom: bump NQP revision to 2012.08

[19:59] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d2472a97c4

[20:00] <moritz> pmichaud: what's wrong?

[20:00] <pmichaud> what an absolutely delicious irony/coincidence it is that after the Frankfurt YAPC had "Perl 5" on the t-shirts, the Frankfurt release ends up being #55  :-P

[20:00] <moritz> :-)

[20:01] <pmichaud> looks like we just can't get a "6" here at all no matter what happens.

[20:01] <moritz> pmichaud: should we name it Perl instead?

[20:01] <moritz> after the town of Perl (Mosel)

[20:01] <pmichaud> I doubt there's a Perl.pm group.  But perhaps we should start one :-P

[20:01] <moritz> we autovivified one :-)

[20:02] <pmichaud> I think Frankfurt is appropriate for this month's release.

[20:02] <pmichaud> #56 can be Perl.pm if we want to do that.  Or #65  :-P

[20:02] *** fhelmberger joined
[20:02] <moritz> should deprecation notices only go into the star announcements, or also into the compiler release announcements?

[20:02] <moritz> heh :-)

[20:03] <pmichaud> I'd like them to go in both places, if it's not too much trouble.

[20:03] <moritz> it's just a copy&paste from docs/deprecations

[20:03] <pmichaud> then both.

[20:03] *** ptl joined
[20:03] *** ptl left
[20:03] *** ptl joined
[20:03] <pmichaud> Announcement says "June 2012" for some reason.

[20:04] <moritz> and "July" :-)

[20:04] <moritz> I'll fix both

[20:04] <moritz> along with the deprecations

[20:05] <pmichaud> I'm planning to do this month's star release on sun or mon

[20:05] <moritz> ++pmichaud

[20:05] <dalek> rakudo/nom: eb13935 | moritz++ | docs/announce/2012.08:

[20:05] <dalek> rakudo/nom: [announce] fix month, add deprecations from docs/deprecations

[20:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eb1393590d

[20:05] <pmichaud> it might be tue depending on what is happening at mtmh

[20:06] <pmichaud> I already have a long list of tasks from prs and yapceu; I'm hoping I can whittle some of them down during mtmh.  

[20:06] <moritz> experience tells that tasks lists only grow at such conferences :-)

[20:07] *** fhelmberger left
[20:07] <pmichaud> indeed... but we do also manage to accomplish some stuff in the process.  :)

[20:07] <pmichaud> like a debugger

[20:07] <pmichaud> and p5-regexes

[20:07] <pmichaud> and new nqp release notes

[20:07] <moritz> everybody happy with rakudo's announcement now?

[20:07] <moritz> aye

[20:07] * pmichaud git pull's

[20:08] <pmichaud> "europe" needs a tc.

[20:08] *** ptl left
[20:08] <moritz> which is just a single bit flip in this case :-)

[20:08] <dalek> rakudo/nom: cf22052 | moritz++ | VERSION:

[20:08] <dalek> rakudo/nom: [release] bump VERSION

[20:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cf22052380

[20:08] <dalek> rakudo/nom: 6d97606 | moritz++ | docs/announce/2012.08:

[20:08] <dalek> rakudo/nom: [announce] spelling, pmichaud++

[20:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6d97606dc7

[20:09] <sirrobert> ok, one more... can I AND a bunch bools stored in a list?  like (False, True, True).&&

[20:09] <tadzik> eb13935 seems to show that we also forgot s/June/July last month :)

[20:09] <sirrobert> AND/OR/ whatever

[20:09] <masak> moritz: isn't it always a single bit flip when upper-casing ASCII?

[20:09] <moritz> masak: it is

[20:09] <pmichaud> ...Larry Wall contributed to this release?  I mean, more so than he usually does, as in a commit or something?

[20:09] <PerlJam> YAPC::EU is the only yearly gathering of Perl hackers in Europe?

[20:10] <moritz> pmichaud: he proposed the format change for Match.gist on IRC

[20:10] <moritz> pmichaud: and we generally count stuff like that as contributions

[20:10] <pmichaud> moritz: works for me

[20:10] <moritz> (ie when soembody was ++'ed in a commit message9

[20:11] <moritz> PerlJam: technically it's the only one advertized as international

[20:11] <pmichaud> I wonder if the announcement should say that the release is code named after Frankfurt.pm, the group that hosted the ...

[20:11] <leont> PerlJam: it's surely the biggest. German Perl Workshop and London Perl Workshop are also fairly big though

[20:11] <pmichaud> instead of "after the city"

[20:11] <moritz> pmichaud: that would be the usual wording, yes

[20:11] <moritz> pmichaud: feel free to change

[20:12] <moritz> EEKS

[20:12] <moritz> make: nqp: Command not found

[20:12] <moritz> now I've got that too :(

[20:12] *** Circlepuller_ left
[20:13] *** Circlepuller_ joined
[20:13] <moritz> seems to be in the new step that jnthn added today

[20:14] <dalek> rakudo/nom: 09c46a6 | pmichaud++ | docs/announce/2012.08:

[20:14] <dalek> rakudo/nom: More announcement updates;  Frankfurt am Mein -> Frankfurt.pm .

[20:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/09c46a6bb4

[20:14] <sirrobert> moritz:    [&&] (True, True, False, True)

[20:14] <sirrobert> shows if just one is false

[20:14] <pmichaud> not all of the people attending yapceu are (or consider themselves) Perl hackers

[20:14] <sirrobert> well, 1+

[20:15] <moritz> dammit, I have to update the nqp release and tag

[20:15] <pmichaud> say so one (3, 4, 0, 1).>>not

[20:15] <pmichaud> r: say so one (3, 4, 0, 1).>>not

[20:15] <p6eval> rakudo befe7c: OUTPUT«===SORRY!===␤Confused␤at /tmp/OkSD4MM5ms:1␤»

[20:15] <pmichaud> r: say so one (3, 4, 0, 1)>>.not

[20:15] <p6eval> rakudo befe7c: OUTPUT«True␤»

[20:15] <pmichaud> r: say so one (3, 4, 0, 0)>>.not

[20:15] <p6eval> rakudo befe7c: OUTPUT«False␤»

[20:16] <pmichaud> r: say so one (3, 4, 1, 1)>>.not

[20:16] <p6eval> rakudo befe7c: OUTPUT«False␤»

[20:16] <pmichaud> we have a winner :-)

[20:16] <sirrobert> ahh, cooool

[20:16] <moritz> that's cheating!

[20:16] <sirrobert> what is >> ?

[20:16] <moritz> postfix hyper

[20:16] <moritz> call the method on each element

[20:16] <sirrobert> ohhhhh super cool

[20:17] <pmichaud> r: say so one !<<(3, 4, 1, 1)

[20:17] <p6eval> rakudo befe7c: OUTPUT«False␤»

[20:17] <sirrobert> ohh >>===<< is doing that on the infix ===

[20:17] <pmichaud> r: say so one !<<(3, 4, 0, 1)

[20:17] <p6eval> rakudo befe7c: OUTPUT«True␤»

[20:17] <sirrobert> infix hyper

[20:17] <pmichaud> Is that "less cheating"?

[20:17] <sirrobert> (cheatery)

[20:17] <moritz> nah, it still modifies the list before making a junction

[20:17] <sirrobert> =)

[20:18] <pmichaud> why is that cheating?  ;-)

[20:18] <moritz> pmichaud: the right answer is "CHEATING IS TECHNIQUE!" :-)

[20:18] <pmichaud> I think it's "cheating" only because I posted it first :-P

[20:18] *** ptl joined
[20:18] *** ptl left
[20:18] *** ptl joined
[20:19] * pmichaud continues reviewing announcement

[20:20] <moritz> nqp tag 2012.08 deleted

[20:20] <dalek> rakudo/nom: 0ab48ba | pmichaud++ | docs/announce/2012.08:

[20:20] <dalek> rakudo/nom: Another update to the yapceu/release name section.

[20:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0ab48ba072

[20:21] <moritz> the problem is that $(NQP_EXE) doesn't have the leading ./ on linux

[20:21] <moritz> that's no problem on windows where jnthn++ tested it, because . is in %PATH%

[20:21] <moritz> but on linux it invokes whatever nqp binary is in path, if any

[20:21] <pmichaud> moritz: is this in nqp or rakudo?

[20:22] <moritz> pmichaud: nqp

[20:22] <pmichaud> checking.

[20:22] <moritz> the fix I'm currently trying is to build the p5regex thingy with stage0 rather than nqp

[20:22] <moritz> because I can copy&paste the commands inside Makefile.in

[20:22] <moritz> instead of doing something OS-specific, which will surely break on other OSses

[20:23] *** ptl left
[20:24] *** am0c joined
[20:25] <pmichaud> seems to me that p5regex ought to build the same as p6regex

[20:25] <moritz> pmichaud: it doesn't need all the bootstrappy bits

[20:25] <pmichaud> building with stage0 is almost certainly wrong, though.

[20:25] <dalek> nqp: c7bed44 | moritz++ | tools/build/Makefile.in:

[20:25] <dalek> nqp: unbreak the build on non-windows

[20:25] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c7bed44588

[20:25] <moritz> pmichaud: uhm, why?

[20:26] <pmichaud> it'll have the wrong serialization context

[20:26] <moritz> oh crap

[20:26] <moritz> so, it needs to build with stage 1?

[20:26] <pmichaud> should be built with stage2

[20:26] <pmichaud> looking

[20:26] <pmichaud> it should be built with the nqp that is being installed, same as almost anything else

[20:27] <moritz> pmichaud: then I'll leave it to you to fix the Makefile.in

[20:28] <pmichaud> I *did* warn jnthn++ about committing any changes that would break the build for today's Star release.  :-|

[20:28] <moritz> s/Star/Rakudo/

[20:28] <pmichaud> yes, *Rakudo release

[20:28] <moritz> but still

[20:28] <pmichaud> jnthn--  # no karma for you!

[20:29] * pmichaud looks at Makefile

[20:29] <tadzik> oh, so that's why it didn't work for me :)

[20:29] <moritz> tadzik: and I know why it didn't break for me

[20:29] <moritz> tadzik: because I ran 'make test', and not 'make

[20:29] <moritz> '

[20:29] <moritz> tadzik: and 'make test' doesn't build the P5regex stuff

[20:29] <tadzik> huh, odd

[20:30] <tadzik> aa, there we go

[20:30] *** Circlepuller joined
[20:30] <pmichaud> did we need p5regex tests

[20:30] *** birdwindupbird left
[20:30] <pmichaud> s/did//

[20:30] <moritz> so the simplest "fix" is not to build the p5regex thing at all

[20:30] <moritz> since we don't use it in current rakudo

[20:30] <moritz> pmichaud: we have them, they just aren't run as part of 'make test' yet

[20:30] <pmichaud> I'm fine with not building p5regex at all for the release.

[20:31] <pmichaud> you're correct that we aren't using it yet.

[20:31] *** sirrobert left
[20:32] *** Circlepuller left
[20:32] <dalek> nqp: c9db812 | moritz++ | tools/build/Makefile.in:

[20:32] <dalek> nqp: Revert "unbreak the build on non-windows"

[20:32] <dalek> nqp: 

[20:32] <dalek> nqp: This reverts commit c7bed445880938ea914ce0b4e964e3c66261a1f9.

[20:32] <dalek> nqp: It was wrong because building p5regex with stage0

[20:32] <dalek> nqp: involves the wrong serialization context.

[20:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c9db8120da

[20:32] <dalek> nqp: fff3eb8 | moritz++ | tools/build/Makefile.in:

[20:32] <dalek> nqp: stop building the p5 regex bits

[20:32] <dalek> nqp: 

[20:32] <dalek> nqp: rakudo does not use them yet, and that step breaks the build on non-windows

[20:32] <dalek> nqp: we will figure out a proper fix after the rakudo release.

[20:32] <dalek> nqp: review: https://github.com/perl6/nqp/commit/fff3eb81c0

[20:33] *** Circlepuller_ left
[20:33] <pmichaud> moritz++

[20:33] * moritz waits for the NQP build to finish

[20:34] *** ptl joined
[20:34] *** ptl left
[20:34] *** ptl joined
[20:36] *** sirrobert joined
[20:36] * masak is reminded of how much he enjoys running non-windows

[20:37] <tadzik> :>

[20:37] <tadzik> *cough*panda*cough*

[20:37] <moritz> nqp 2012.08 re-uploaded and re-tagged

[20:38] <moritz> http://moritz.faui2k3.org/tmp/rakudo-2012.08.tar.gz  # that'll be the release unless we discover more problems with it

[20:38] *** fgomez left
[20:39] *** ptl left
[20:39] *** am0c left
[20:39] <moritz> building it now

[20:39] <moritz> on the fastest of my machines

[20:39] <moritz> 'cause, you know, I want to go to bed soon :-)

[20:39] *** bruges joined
[20:41] *** bruges_ left
[20:43] *** p6rd left
[20:44] *** Woodi joined
[20:48] <pmichaud> yeah, bed seems like a good idea to me also.

[20:49] *** ptl joined
[20:49] *** ptl left
[20:49] *** ptl joined
[20:53] <masak> aye.

[20:54] *** ptl left
[21:04] *** ptl joined
[21:04] *** ptl left
[21:04] *** ptl joined
[21:06] <sirrobert> is there a table of special vars like "name of the current file" ?

[21:07] <tadzik> http://doc.perl6.org/language/variables may suit you

[21:07] <PerlJam> sirrobert: there's also S28

[21:07] <sirrobert> thanks, both

[21:09] *** ptl left
[21:12] *** Circlepuller joined
[21:14] <moritz> I think I blatantly copied S28 for the doc.perl6.org page :-)

[21:16] *** Woodi left
[21:16] <masak> blatancy++

[21:18] <dalek> rakudo/nom: 9429d1c | moritz++ | docs/release_guide.pod:

[21:18] <dalek> rakudo/nom: update release guide with current release

[21:18] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9429d1c7b1

[21:18] <moritz> release cut, feel free to break NQP and nom again :-)

[21:18] <masak> moritz++

[21:18] <tadzik> moritz++ # release saver

[21:19] <moritz> tadzik++ # release starter

[21:19] <tadzik> :)

[21:20] *** ptl joined
[21:20] *** ptl left
[21:20] *** ptl joined
[21:22] <masak> tadzik++ moritz++ # release

[21:24] *** kaare_ left
[21:25] <moritz> did anybody receive the announcement on perl6-compiler?

[21:25] *** ptl left
[21:25] <moritz> my MUA briefly showed me an unread email, and then it vanished

[21:25] <tadzik> moritz: I did

[21:25] <moritz> \o/

[21:25] <tadzik> guess it's time for an obligatory memeface

[21:26] <moritz> tarball uploaded, tags pushed, mail sent, wiki page updated. Time for me to sleep

[21:26] <tadzik> http://ragefac.es/40 :)

[21:27] <moritz> not quite :-)

[21:28] <moritz> ah, mail recieved too

[21:28] <moritz> really sleep&

[21:29] <masak> 'night, moritz. dream of faces entirely without rage.

[21:30] <PerlJam> even better would be happy, smiling faces

[21:31] <tadzik> fun fact: rakudo built faster for me on windows than it does on linux

[21:31] <tadzik> 140 vs 150 seconds on parse stage

[21:32] *** hoelzro is now known as hoelzro|away

[21:33] <tadzik> masak: oh noes

[21:33] *** Woodi joined
[21:33] <tadzik> we forgot to do a Little Animal Farm Lightning Talk :(

[21:35] *** ptl joined
[21:35] *** ptl left
[21:35] *** ptl joined
[21:40] *** ptl left
[21:41] *** cognominal left
[21:42] <masak> tadzik: I didn't so much forget it as deprioritize it.

[21:42] <masak> tadzik: maybe people will forgive us for doing it next YAPC::Europe ;)

[21:42] <masak> (and then we have plenty of time to develop actual strategies, too)

[21:46] <cosimo> snarkyboojum: ping, did you see moritz's pull request on MIME::Base64?

[21:46] <phenny> cosimo: 22 Aug 15:19Z <[Coke]> tell cosimo that I'm blocking on Issue #15 for LWP::Simple.

[21:47] *** Tene left
[21:47] <cosimo> [Coke]: I'm just looking at it now

[21:48] <cosimo> ronaldxs is not in here?

[21:49] <cosimo> guys, how do I regenerate a Makefile to build a p6 module nowadays? :-)

[21:49] <cosimo> (sorry for the lame question, but it changes so many times...)

[21:49] <timotimo> i think "ufo"?

[21:49] <cosimo> still ufo then?

[21:49] <cosimo> good

[21:49] <timotimo> or was that absorbed into panda?

[21:50] <cosimo> what about neutro?

[21:50] <cosimo> I believe neutro came after panda

[21:50] <cosimo> you see? :)

[21:50] *** ptl joined
[21:50] *** ptl left
[21:50] *** ptl joined
[21:51] <masak> neutro came after proto but before panda.

[21:51] <masak> 'ufo' is for developers to generate Makefiles. 'panda' is for module users to generate Makefiles.

[21:52] *** Tene joined
[21:52] *** Tene left
[21:52] *** Tene joined
[21:52] <cosimo> why are there two different Makefiles?

[21:54] <masak> you mean, why is there one on the developer's computer and one on the module user's computer?

[21:54] *** tokuhiro_ left
[21:55] *** ptl left
[21:57] <cosimo> masak: why two different tools

[21:58] <masak> I dunno. when I wrote 'ufo', 'panda' didn't exist. I needed something to auto-generate Makefiles for my projects. they were never meant to be committed to a git repo or installed or anything.

[21:58] <masak> I just wanted to solve the problem of module build order, nothing more.

[21:58] * [Coke] wonders how he got his name on this month's release.

[21:59] <[Coke]> ah, testythings.

[21:59] <tadzik> aw. Net::IRC::Bot on MuEvent seems to be too slow to empty the socket buffer on time

[22:00] <tadzik> or that's my explanation at least :)

[22:00] <[Coke]> tadzik++ for hacking on that!

[22:00] <tadzik> ohhhh, works

[22:00] <cosimo> [Coke]: not sure what I can do to unblock you, but this branch https://github.com/cosimo/perl6-lwp-simple/tree/ronaldxs-rewrite looks like the next master

[22:01] <cosimo> seriously? already midnight? :-|

[22:02] <tadzik> aw, I can't poll() on stdin :(

[22:03] *** Woodi left
[22:05] <tadzik> huh, that's funny

[22:05] <tadzik> r: my $a = $*IN but IO::Socket; $a.poll(1, 0.01)

[22:05] <p6eval> rakudo befe7c: OUTPUT«Could not find symbol '&Socket'␤  in method <anon> at src/gen/CORE.setting:9761␤  in <anon> at src/gen/Metamodel.pm:2304␤  in any find_method_fallback at src/gen/Metamodel.pm:2302␤  in any find_method at src/gen/Metamodel.pm:843␤  in <anon> at src/gen/BOOTSTRAP.pm:…

[22:05] <tadzik> damnit, safe mode

[22:05] <cosimo> anyone successfully used sqlite with rakudo?

[22:05] <tadzik> yes

[22:05] <tadzik> I wrote a blog-ish engine using it

[22:06] <cosimo> ok, pointers?

[22:06] <tadzik> cosimo: https://github.com/tadzik/zblog/blob/master/%C5%BAblog.pl

[22:06] *** ptl joined
[22:06] *** ptl left
[22:06] *** ptl joined
[22:07] <cosimo> tadzik: cool, thanks

[22:07] <cosimo> now I need to only port ORlite to Perl 6 :)

[22:07] <tadzik> \o/

[22:07] <cosimo> no, actually Net::OpenSSH too

[22:08] <tadzik> ah, here we go tricky

[22:08] <cosimo> ORlite is quite magic too, but yeah, with OpenSSH all bets are off :)

[22:09] <colomon> How hard can Net::OpenSSH be to port?

[22:09] <tadzik> I wanted to write Net::Twitter-ish thing some time ago

[22:09] <tadzik> turned out that I have to also write Net::Oauth, and then I could't write Crypto::SHA1 :P

[22:09] <tadzik> maybe should've tried pure-perl

[22:09] <tadzik> this way I could maybe learn how SHA1 works

[22:10] <colomon> tadzik++

[22:11] *** ptl left
[22:17] <masak> 'night, #perl6

[22:18] <tadzik> good knight masak

[22:18] *** AccessDenied joined
[22:19] *** Woodi joined
[22:19] *** bluescreen10 left
[22:21] *** ptl joined
[22:21] *** ptl left
[22:21] *** ptl joined
[22:22] *** masak left
[22:22] *** stopbit left
[22:23] *** popl joined
[22:23] *** jeffreykegler joined
[22:24] <tadzik> damn you, $*IN

[22:24] <tadzik> r: $*IN.WHAT.say

[22:24] <p6eval> rakudo befe7c: OUTPUT«IO()␤»

[22:25] <tadzik> and what does .poll() say? Method 'poll' not found for invocant of class 'FileHandle'

[22:25] <tadzik> http://ragefac.es/403

[22:25] <tadzik> isn't FIleHandle even a Parrot object? :F

[22:26] *** ptl left
[22:26] <tadzik> ok, it's just me breaking things :)

[22:28] *** ptl joined
[22:28] *** ptl left
[22:28] *** ptl joined
[22:33] *** ptl left
[22:34] <jeffreykegler> How would I contribute suggested changes to S05?  Github pull requests?

[22:34] <jeffreykegler> I am talking about clarifying passages, etc.  Nothing major.

[22:35] <tadzik> pull requests are fine, I think

[22:36] *** Woodi left
[22:40] <jeffreykegler> tadzik: which repository?

[22:40] <tadzik> jeffreykegler: perl6/specs

[22:40] <jeffreykegler> tadzik: Thanks!!!

[22:42] * jnthn got home safely from YAPC :)

[22:44] *** ptl joined
[22:47] <tadzik> hehe, portscanning causes .recv to throw an exception :)

[22:47] <tadzik> That probably kills HTTP::Easy and thus Bailador as well...

[22:47] *** MayDaniel left
[22:48] <tadzik> yes :)

[22:48] *** ptl left
[22:50] <leont> poll is not all that portable (in particular not to Windows). Anything really scalable is even less portable :-|

[22:50] *** fridim_ left
[22:51] *** ptl joined
[22:52] <tadzik> that doesn't matter, our poll() sucks horribly anyway :)

[22:52] <tadzik> Parrot only gives as .poll() on one socket at a time

[22:52] <tadzik> which forces MuEvent to be... suboptimal

[22:53] *** fridim_ joined
[22:54] <leont> Ouch

[22:54] <tadzik> yes

[22:55] <tadzik> https://github.com/tadzik/MuEvent/blob/master/lib/MuEvent.pm#L65 :)

[22:55] *** ptl left
[22:56] *** ObseLeTe joined
[22:58] *** ptl joined
[22:58] *** ptl left
[22:58] *** ptl joined
[22:59] *** cognominal joined
[23:01] <tadzik> oh my gosh. Net::IRC::Bot.new returns an Array :F

[23:03] *** ptl left
[23:04] <tadzik> or not. I'm being slowthinking again

[23:04] * tadzik spams the channel with his BS, apparently

[23:05] <diakopter> botspeak?

[23:05] <tadzik> exactly

[23:07] *** thelazydeveloper left
[23:07] *** cognominal left
[23:08] *** tadzikbot joined
[23:08] <tadzikbot> hello, I'm speaking through tadzik's keyboard

[23:08] <tadzik> :ping

[23:08] <tadzikbot> tadzik: pong

[23:09] <tadzikbot> see? I don't block on either .recv() on freenode and neither on tadzik's keyboard import

[23:09] <tadzikbot> tell me I'm a smart bot

[23:09] <leont> You can use nativecall to get around the poll issue, I guess. Parrot's handing of anything related to events just keeps being disappointing, given that event handling was one of the things it was supposed to be good at

[23:09] <jnthn> tadzikbot: You'd be smarter if you could spell input correctly :P

[23:10] <tadzikbot> hey, it's late, even if that's not that hot already

[23:10] <diakopter> :ping

[23:10] <tadzikbot> diakopter: pong

[23:10] <diakopter> :ping

[23:10] <tadzikbot> diakopter: pong

[23:10] <diakopter> :ping

[23:10] <tadzikbot> diakopter: pong

[23:10] <tadzik> so, it has come to this. Net::IRC::Bot on MuEvent :)

[23:11] <diakopter> :pingg

[23:11] <diakopter>  :ping

[23:11] <diakopter> : ping

[23:12] <diakopter> :pin g

[23:12] <tadzikbot> diakopter: haha, keep trying to trick me :)

[23:12] <diakopter> :

[23:12] <diakopter> ping

[23:12] <tadzikbot> part of my AI includes a line: "return unless $ev.what.chomp eq ':ping';"

[23:13] <tadzik> :exit

[23:13] *** tadzikbot left
[23:13] <tadzik> ok, I

[23:13] *** ptl joined
[23:13] *** ptl left
[23:13] *** ptl joined
[23:13] <tadzik> 'll commit this pile of code and get some sleep now :)

[23:18] *** ptl left
[23:20] <tadzik> stuff pushed to https://github.com/tadzik/Net--IRC for anyone's amusement

[23:20] *** leont left
[23:20] <diakopter> bwahaha.

[23:25] *** fridim_ left
[23:26] *** fridim_ joined
[23:26] *** whiteknight joined
[23:27] *** skids joined
[23:28] *** ptl joined
[23:28] *** ptl left
[23:28] *** ptl joined
[23:28] *** bruges left
[23:32] *** bruges joined
[23:33] *** ptl left
[23:38] *** benabik left
[23:38] *** benabik joined
[23:39] *** alester left
[23:44] *** ptl joined
[23:48] *** ptl left
[23:49] *** ptl joined
[23:49] *** mucker joined
[23:53] *** whiteknight left
[23:53] *** ptl left
[23:56] *** ptl joined
[23:56] *** ptl left
[23:56] *** ptl joined
