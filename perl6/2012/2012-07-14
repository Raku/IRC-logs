[00:01] *** samlt left
[00:12] *** HarryS left
[00:13] *** HarryS joined
[00:26] *** icwiener_ left
[00:33] *** vlixes left
[00:48] *** bluescreen10 left
[01:06] *** cognominal_ left
[01:06] *** cognominal joined
[01:08] *** cognominal left
[01:09] *** cognominal joined
[01:41] *** mucker left
[01:43] *** xinming left
[01:44] *** xinming joined
[01:48] *** leprevost joined
[02:04] *** fridim_ joined
[02:36] *** orafu left
[02:37] *** orafu joined
[02:43] *** cognominal left
[02:44] *** cognominal joined
[03:12] *** fridim_ left
[03:15] *** erkan left
[03:47] *** tokuhiro_ joined
[03:54] *** tokuhiro_ left
[03:55] *** thelazydeveloper left
[03:56] *** araujo left
[03:57] *** jaldhar_ joined
[03:59] *** kaare_ joined
[04:07] *** thou joined
[04:32] *** thou_ joined
[04:32] *** thou left
[04:42] *** sisar joined
[04:45] *** leprevost left
[04:50] *** thou_ left
[04:53] *** thou joined
[04:57] *** thou_ joined
[04:57] *** thou left
[05:05] *** thou joined
[05:05] *** thou_ left
[05:09] *** thou left
[05:09] *** thou joined
[05:25] *** [particle] joined
[05:48] *** glitchmr joined
[05:50] <thou> > ([3, 4, 5] Z 'a')[0] ~~ Pair

[05:50] <thou> False

[05:51] <thou> ?

[05:53] <thou> flattening, i think i need to remind myself about this...

[05:53] *** wamiks joined
[05:55] *** glitchmr is now known as GlitchMr

[05:55] <GlitchMr> eval: ([3, 4, 5] Z 'a')[0].WHAT

[05:55] <buubot_backup> GlitchMr: ERROR: syntax error at (eval 20) line 1, near "] Z " 

[05:55] <GlitchMr> perl6: ([3, 4, 5] Z 'a')[0].WHAT

[05:55] <p6eval> rakudo 74e183, niecza v19-13-g442e075:  ( no output )

[05:55] <GlitchMr> perl6: print ([3, 4, 5] Z 'a')[0].WHAT

[05:55] <p6eval> niecza v19-13-g442e075:  ( no output )

[05:55] <p6eval> ..rakudo 74e183: OUTPUT«use of uninitialized variable $v of type Parcel in string context  in block <anon> at /tmp/2_umBiTVBH:1␤␤»

[05:55] <GlitchMr> perl6: print ([3, 4, 5] Z 'a').perl

[05:56] <thou> rakudo: say [(3, 4, 5) Z ('a'..*)].perl

[05:56] <p6eval> niecza v19-13-g442e075: OUTPUT«([3, 4, 5], "a").list»

[05:56] <p6eval> ..rakudo 74e183: OUTPUT«((3, "a"),).list»

[05:56] <p6eval> rakudo 74e183: OUTPUT«[3, "a", 4, "b", 5, "c"]␤»

[05:57] <thou> rakudo: say ((3 4, 5) Z ('a'..*)).perl

[05:57] <p6eval> rakudo 74e183: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<( )>, couldn't find final ')' at line 2, near "(3 4, 5) Z"␤»

[05:57] <thou> rakudo: say ((3, 4, 5) Z ('a'..*)).perl

[05:57] <p6eval> rakudo 74e183: OUTPUT«((3, "a"), (4, "b"), (5, "c")).list␤»

[05:58] <thou> rakudo: say ((3, 4, 5) Z ('a'..*))[0] ~~ Pair

[05:58] <p6eval> rakudo 74e183: OUTPUT«False␤»

[05:58] <GlitchMr> perl6: say ((3, 4, 5) Z ('a'..*))[0].perl

[05:58] <p6eval> rakudo 74e183, niecza v19-13-g442e075: OUTPUT«(3, "a")␤»

[05:58] <thou> rakudo: say ((3, 4, 5) Z ('a'..*))[0].WHAT

[05:58] <p6eval> rakudo 74e183: OUTPUT«Parcel()␤»

[05:59] <thou> where did my Pair go? :-)

[05:59] <GlitchMr> perl6: print ([3, 4, 5] Z 'a'..*) ~~ List

[05:59] <p6eval> rakudo 74e183, niecza v19-13-g442e075: OUTPUT«True»

[05:59] <GlitchMr> class Parcel is Cool does Positional { }

[05:59] <GlitchMr> class List is Iterable does Positional { .. }

[05:59] <GlitchMr> It's not this same thing

[05:59] <thou> rakudo: say ((3,4,5) Z 'a') ~~ Pair

[05:59] <p6eval> rakudo 74e183: OUTPUT«False␤»

[06:00] <thou> gah

[06:00] <GlitchMr> perl6: print (1, 2, 3).WHAt

[06:00] <p6eval> rakudo 74e183: OUTPUT«No such method 'WHAt' for invocant of type 'Parcel'␤  in block <anon> at /tmp/e02kIv5Nbz:1␤␤»

[06:00] <p6eval> ..niecza v19-13-g442e075: OUTPUT«Unhandled exception: Unable to resolve method WHAt in type Parcel␤  at /tmp/SvW3UVRaXJ line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3918 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3919 (module-CORE @ 562) ␤  at /hom…

[06:00] <GlitchMr> perl6: print (1, 2, 3).WHAT

[06:00] <p6eval> niecza v19-13-g442e075:  ( no output )

[06:00] <p6eval> ..rakudo 74e183: OUTPUT«use of uninitialized variable $v of type Parcel in string context  in block <anon> at /tmp/c4v6r0M9BQ:1␤␤»

[06:00] <GlitchMr> perl6: print [1, 2, 3].WHAT

[06:00] <p6eval> rakudo 74e183: OUTPUT«use of uninitialized variable $v of type Array in string context  in block <anon> at /tmp/kfgKA4svPz:1␤␤»

[06:00] <p6eval> ..niecza v19-13-g442e075:  ( no output )

[06:00] <thou> IT NEVER WAS THERE

[06:00] <GlitchMr> perl6: print [1, 2, 3] ~~ List

[06:00] <p6eval> rakudo 74e183, niecza v19-13-g442e075: OUTPUT«True»

[06:01] <GlitchMr> [1, 2, 3] is List, but (1, 2, 3) isn't

[06:01] <GlitchMr> If you want array-like object, use Positional

[06:01] <thou> Z makes a list of lists, not a list of pairs

[06:02] <thou> erm, list of parcels, rather

[06:03] <thou> but, yeah, thanks for that advice. unfortunately at the moment i don't have a specific need for this, i was just trying to figure out how it works.

[06:04] <GlitchMr> (a => "b") is Pair, {a => "b"} is Hash, ("a", "b") is Parcel, ["a" => "b"] is Array

[06:05] <GlitchMr> (a => "b") is Pair, {a => "b"} is Hash, ("a", "b") is Parcel, ["a", "b"] is Array

[06:08] <thou> rakudo: my $foo = (1..5 Z 'a'..* Z 'A'..*); say $foo.perl;

[06:08] <p6eval> rakudo 74e183: OUTPUT«((1, "a", "A"), (2, "b", "B"), (3, "c", "C"), (4, "d", "D"), (5, "e", "E")).list.item␤»

[06:09] <thou> what does .item do?

[06:10] <GlitchMr> I don't know and I don't see it in documentation. I guess it's documentation error

[06:10] <thou> S04 says "# $c.item produces Seq((1,10),(2,20)) -- coerced to Seq of unresolved Parcels"

[06:11] <GlitchMr> I think it's useful with generators to get full list

[06:12] <GlitchMr> perl6: say (gather for ^7 { take 2, 3 }).list.perl

[06:12] <p6eval> niecza v19-13-g442e075: OUTPUT«(2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3).list␤»

[06:12] <p6eval> ..rakudo 74e183: OUTPUT«((2, 3), (2, 3), (2, 3), (2, 3), (2, 3), (2, 3), (2, 3)).list␤»

[06:12] <GlitchMr> I've feeling it's niecza bug

[06:14] <GlitchMr> (not like you usally need to get full list with generators)

[06:15] <thou> S02 has quite a bit of stuff about item context, mentions $@a is the same as item @a. perhaps a docs bug:

[06:15] <thou> rakudo: my @a = 1..5; say (@a).perl; say (item @a).perl; say ($@a).perl;

[06:15] <p6eval> rakudo 74e183: OUTPUT«===SORRY!===␤Invalid hard reference syntax at line 2, near "@a).perl;"␤»

[06:15] <thou> rakudo: my @a = 1..5; say (@a).perl; say (item @a).perl;

[06:15] <p6eval> rakudo 74e183: OUTPUT«Array.new(1, 2, 3, 4, 5)␤Array.new(1, 2, 3, 4, 5)␤»

[06:17] <thou> odd, my rakudo says "[1, 2, 3, 4, 5]" for (item @a).perl

[06:18] <GlitchMr> niecza: my @a = 1..5; say (@a).perl; say (item @a).perl;

[06:18] <p6eval> niecza v19-13-g442e075: OUTPUT«[1, 2, 3, 4, 5].list␤[1, 2, 3, 4, 5]␤»

[06:18] <thou> perhaps i will stop tinkering with minutiae

[06:20] <thou> (for now :-))

[06:55] *** thou left
[07:10] *** [particle]1 joined
[07:14] *** [particle] left
[07:17] *** GlitchMr left
[07:41] *** [particle] joined
[07:44] *** [particle]1 left
[07:59] *** araujo joined
[07:59] *** araujo left
[07:59] *** araujo joined
[08:11] *** sisar left
[08:46] *** snearch joined
[08:53] <moritz> \o

[08:58] *** benabik_ joined
[09:02] *** benabik left
[09:02] *** benabik_ is now known as benabik

[09:08] *** MayDaniel joined
[09:19] *** araujo left
[09:19] *** araujo joined
[09:35] *** tokuhiro_ joined
[09:42] *** [particle]1 joined
[09:44] *** [particle] left
[10:14] <tadzik> Files=682, Tests=17054, 1775 wallclock secs

[10:15] <tadzik> (rakudo on toqast)

[10:24] *** Patterner left
[10:25] *** Psyche^ joined
[10:25] *** Psyche^ is now known as Patterner

[10:26] *** sisar joined
[11:01] *** [particle]1 left
[11:03] <jnthn> tadzik: That's more than I get. I think that must mean a bunch of tests marked #icu are passing again too :)

[11:07] *** snearch left
[11:15] *** thelazydeveloper joined
[11:31] <tadzik> probly ;)

[11:33] *** erkan joined
[11:34] <dalek> rakudo/toqast: 8700bce | jnthn++ | src/QPerl6/Actions.pm:

[11:34] <dalek> rakudo/toqast: Fix loop code-gen.

[11:34] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/8700bce2f2

[11:34] <dalek> rakudo/toqast: 8c9c94b | jnthn++ | src/QPerl6/Actions.pm:

[11:34] <dalek> rakudo/toqast: Largely get Whatever currying to work again.

[11:34] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/8c9c94ba4b

[11:34] *** Coleoid2 joined
[11:35] *** Coleoid left
[11:35] <jnthn> There's another 600. :)

[11:36] <tadzik> hoo

[11:36] *** Chillance joined
[11:36] <tadzik> on _your_ machine :)

[11:40] *** Chillance left
[11:41] *** Chillance joined
[11:42] *** cognominal_ joined
[11:45] *** cognominal left
[11:47] *** Coleoid joined
[11:49] *** Coleoid2 left
[11:51] *** fridim_ joined
[12:07] *** spider-mario joined
[12:08] *** araujo left
[12:09] *** araujo joined
[12:09] *** crab2313 joined
[12:21] <dalek> nqp/toqast: 51fa282 | jnthn++ | src/QAST/Operations.nqp:

[12:21] <dalek> nqp/toqast: Implement defor.

[12:21] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/51fa282ab5

[12:23] *** lue left
[12:25] <dalek> rakudo/toqast: 00efc81 | jnthn++ | src/QPerl6/Grammar.pm:

[12:25] <dalek> rakudo/toqast: def_or => defor.

[12:25] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/00efc81206

[12:25] <dalek> rakudo/toqast: 1051dc7 | jnthn++ | src/QPerl6/Actions.pm:

[12:25] <dalek> rakudo/toqast: A little more PAST to QAST.

[12:25] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/1051dc7052

[12:25] <dalek> rakudo/toqast: d7ecca7 | jnthn++ | src/QPerl6/ (2 files):

[12:25] <dalek> rakudo/toqast: Get package lookup compilation in better shape.

[12:25] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/d7ecca7c39

[12:29] <dalek> rakudo/nom: 23d186c | moritz++ | src/core/IO.pm:

[12:29] <dalek> rakudo/nom: [IO] implement binary slurp

[12:29] <dalek> rakudo/nom: 

[12:29] <dalek> rakudo/nom: also coerce filename to Str before unboxing. Should avoid the LTA error message

[12:29] <dalek> rakudo/nom: reported in RT #114124

[12:29] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/23d186c3e3

[12:35] *** lue joined
[12:37] <dalek> specs/io-refactor: bee1ba3 | moritz++ | S32-setting-library/IO.pod:

[12:37] <dalek> specs/io-refactor: fix duplicate type constraints

[12:37] <dalek> specs/io-refactor: review: https://github.com/perl6/specs/commit/bee1ba386d

[12:37] <dalek> specs/io-refactor: 8db8fd6 | moritz++ | S32-setting-library/IO.pod:

[12:37] <dalek> specs/io-refactor: slurp(:createonly)

[12:37] <dalek> specs/io-refactor: review: https://github.com/perl6/specs/commit/8db8fd6138

[12:38] *** JimmyZ joined
[12:42] *** lue left
[12:45] <dalek> specs: fb68e55 | moritz++ | S (2 files):

[12:45] <dalek> specs: [IO] start IO refactoring with an overview over the new design

[12:45] <dalek> specs: 

[12:45] <dalek> specs: The rest of S32::IO still reeks of over-engineering

[12:45] <dalek> specs: review: https://github.com/perl6/specs/commit/fb68e5507b

[12:46] *** dalek joined
[12:46] *** ChanServ sets mode: +v dalek

[12:47] <dalek> roast: e30db6b | moritz++ | TODO:

[12:47] <dalek> roast: [TODO] remove lots of outdated stuff

[12:47] <dalek> roast: 

[12:47] <dalek> roast: also add a TODO for testing slurp($filename, :bin)

[12:47] <dalek> roast: review: https://github.com/perl6/roast/commit/e30db6b35c

[12:47] <moritz> phenny: tell Coleoid I've added an up-to-date item to roast/TODO

[12:47] <phenny> moritz: I'll pass that on when Coleoid is around.

[12:55] <dalek> rakudo/nom: 55cf00a | moritz++ | docs/ChangeLog:

[12:55] <dalek> rakudo/nom: [docs/ChangeLog] &spurt, &slurp with :bin

[12:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/55cf00a300

[12:55] <dalek> nqp/toqast: 30ab35b | jnthn++ | src/QAST/Compiler.nqp:

[12:55] <dalek> nqp/toqast: Set block name.

[12:55] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/30ab35bae0

[12:56] *** lue joined
[12:58] <dalek> rakudo/nom: ee86a54 | moritz++ | src/core/IO.pm:

[12:58] <dalek> rakudo/nom: [IO] spurt :new is now :createonly

[12:58] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ee86a54d2c

[12:59] <cognominal_> I have the following code         @res.push: .map: { .key => recurse .value }      What I need to do for the {…}  to be interpreted as code instead of a hash? 

[13:02] *** mucker joined
[13:02] *** mucker left
[13:03] *** mucker joined
[13:03] *** JimmyZ left
[13:04] *** JimmyZ joined
[13:04] <tadzik> add a ; at the beginning :)

[13:04] <tadzik> { ; foo => bar }

[13:05] *** leprevost joined
[13:06] <dalek> roast: 9336c1c | moritz++ | TODO:

[13:06] <dalek> roast: more TODOs: &spurt

[13:06] <dalek> roast: review: https://github.com/perl6/roast/commit/9336c1cc35

[13:06] <dalek> rakudo/toqast: 39bd6cf | jnthn++ | src/QPerl6/Actions.pm:

[13:06] <dalek> rakudo/toqast: Fix compilation of indirect method calls.

[13:06] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/39bd6cf63c

[13:06] <dalek> rakudo/toqast: e08c1dd | jnthn++ | src/QPerl6/ (3 files):

[13:06] <dalek> rakudo/toqast: Fix state, START.

[13:06] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/e08c1dd76a

[13:08] <cognominal_> tadzik. thx, sometimes I miss the easy stuff

[13:12] *** lue left
[13:16] *** mtk left
[13:17] *** localhost left
[13:18] *** localhost joined
[13:24] *** mtk joined
[13:27] *** lue joined
[13:28] *** tokuhiro_ left
[13:28] *** tokuhiro_ joined
[13:32] <moritz> Files=682, Tests=18362, 513 wallclock secs ( 4.78 usr  3.02 sys + 1631.13 cusr 190.84 csys = 1829.77 CPU) # on toqast

[13:32] *** lue left
[13:33] *** tokuhiro_ left
[13:33] *** crab2313 left
[13:33] <JimmyZ> wow

[13:35] *** crab2313 joined
[13:38] <moritz> currently warnings are fatal in toqast

[13:38] <moritz> because the warning printer dies

[13:38] <moritz> I guess fixing that would enable quite a few more tests to run

[13:40] <jnthn> Hm, interesting.

[13:40] <jnthn> Example of a test file that exhibits taht?

[13:40] <moritz> ./qperl6 -e '+Any; say "alive"'

[13:41] <moritz> though if you do want a test file, t/spec/S02-types/hash.t

[13:41] <moritz> use of uninitialized value of type Any in numeric contextNo such method 'message' for invocant of type 'Any'

[13:41] <moritz> funny, it did print the warning properly, and died afterwards :-)

[13:42] <jnthn> Odd. It printed alive here.

[13:42] <jnthn> (After the warning.)

[13:42] <jnthn> Maybe it's one of my local patches.

[13:42] <dalek> rakudo/toqast: dda694c | jnthn++ | src/QPerl6/Actions.pm:

[13:42] <dalek> rakudo/toqast: Fix whatever currying of prefix and postfix ops.

[13:42] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/dda694cb87

[13:42] <dalek> rakudo/toqast: cfbb2fc | jnthn++ | src/QPerl6/Actions.pm:

[13:42] <dalek> rakudo/toqast: Fix quoted private method calls.

[13:42] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/cfbb2fcba8

[13:42] <dalek> rakudo/toqast: ceade33 | jnthn++ | src/QPerl6/ (2 files):

[13:42] <dalek> rakudo/toqast: Start unbusting various phasers a bit.

[13:42] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/ceade33b6b

[13:42] <moritz> maybe :-)

[13:44] <moritz> no, that wasn't it

[13:44] <moritz> (unless you also have unpushed nqp changes)

[13:45] <jnthn> No

[13:45] <jnthn> Hm

[13:45] <moritz> http://morepypy.blogspot.de/2012/07/hello-everyone.html # anyone want to write perl 6 on pypy? :-)

[13:47] *** lue joined
[13:48] <JimmyZ> a new big project!

[13:49] *** tokuhiro_ joined
[13:51] *** plobsing left
[13:52] *** lue left
[13:54] <dalek> doc: 0420300 | moritz++ | lib/EnumMap.pod:

[13:54] <dalek> doc: start to document EnumMap

[13:54] <dalek> doc: review: https://github.com/perl6/doc/commit/0420300980

[14:10] <dalek> rakudo/toqast: 836b1a3 | jnthn++ | src/QPerl6/ (2 files):

[14:10] <dalek> rakudo/toqast: First crack at getting the CATCH and CONTROL stuff updated for QAST. Along the right lines, though when/default not done yet, so not so useful.

[14:10] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/836b1a33a6

[14:18] *** tokuhiro_ left
[14:19] *** tokuhiro_ joined
[14:23] *** tokuhiro_ left
[14:29] *** awwaiid left
[14:32] <jnthn> afk for a bit

[14:34] *** awwaiid joined
[14:35] *** eviltwin_b joined
[14:56] <cognominal_> S02 says that  List is a role. In rakudo that's a class.  Something is wrong on the internet.

[15:01] *** araujo left
[15:02] *** [particle] joined
[15:12] *** GlitchMr joined
[15:16] <tadzik> :)

[15:22] *** wamiks left
[15:24] <masak> o/, #perl6

[15:24] <tadzik> \o masak

[15:27] *** araujo joined
[15:27] *** araujo left
[15:27] *** araujo joined
[15:28] <crab2313> \o

[15:35] *** snearch joined
[15:35] *** xinming left
[15:36] <jnthn> hi masak 

[15:37] <flussence> jnthn: take a look at the scrollback ~15h ago, I found something interesting

[15:38] <jnthn> flussence: Yes, I noticed that. It's...weird. :S

[15:40] <flussence> well... at least it's not that 4-line diff alone that broke it

[15:43] *** xinming joined
[15:57] *** lue joined
[16:03] *** JimmyZ left
[16:07] <diakopter> r: say 7.114407 / 0.5355681

[16:07] <p6eval> rakudo ee86a5: OUTPUT«13.28385130␤»

[16:11] *** Teratogen left
[16:18] <tadzik> rakudo at 18k tests :)

[16:19] <jnthn> tadzik: toqast?

[16:19] <tadzik> yep

[16:19] <jnthn> Nice :)

[16:19] <tadzik> yeah :) jnthn++, keep up the good work!

[16:20] <jnthn> I hope to get given/when and other exceptiony bits fixed later today, which should be another little boost.

[16:42] *** vmspb joined
[16:46] *** snearch left
[16:46] *** Tango_Sierra joined
[16:47] <Tango_Sierra> rakudo: say 1 | 2 * 3 | 4

[16:47] <p6eval> rakudo ee86a5: OUTPUT«any(1, 6, 4)␤»

[16:47] <Tango_Sierra> perl6: say 1 | 2 * 3 | 4

[16:47] <p6eval> rakudo ee86a5, niecza v19-13-g442e075: OUTPUT«any(1, 6, 4)␤»

[16:47] *** PacoAir joined
[16:48] <Tango_Sierra> niecza: say 1 | 2 * 3 | 4

[16:48] <p6eval> niecza v19-13-g442e075: OUTPUT«any(1, 6, 4)␤»

[16:48] <mauke> perl6: say qq{ {2 * 3}}

[16:48] <p6eval> rakudo ee86a5: OUTPUT« 6␤»

[16:48] <p6eval> ..niecza v19-13-g442e075: OUTPUT« {2 * 3}␤»

[16:48] <moritz> nieczabug, I think

[16:49] <Tango_Sierra> niecza: say 1|2 * 3|4

[16:49] <p6eval> niecza v19-13-g442e075: OUTPUT«any(1, 6, 4)␤»

[16:49] <moritz> Tango_Sierra: spaces don't affect precedence. But you can use parens for grouping

[16:49] <Tango_Sierra> I thought I should get 3, 6, 4, 8 or something like that.

[16:50] <mauke> perl6: say (1 | 2) * (3 | 4)

[16:50] <p6eval> rakudo ee86a5, niecza v19-13-g442e075: OUTPUT«any(any(3, 4), any(6, 8))␤»

[16:50] <Tango_Sierra> Yeah, that 'any' thing is what I see, not the actualy results I expect.

[16:50] <Tango_Sierra> Oh!

[16:50] <Tango_Sierra> Hang on, I'll try it locally.

[16:50] <moritz> there's no difference between any(3, 4, 6, 8) and any(any(3, 4), any(6, 8))

[16:50] <Tango_Sierra> Doh.

[16:51] <Tango_Sierra> All I noticed whas I was getting that 'any' construct instead of an array-looking result.  I didn't pay any attention to the fact that the values inside were exactly what should have been there.  Again, I say Doh!

[16:52] <moritz> you can get array-like results in other ways:

[16:52] *** thou joined
[16:52] <Tango_Sierra> Old hand at perl5, trying to pick up perl6.

[16:52] <moritz> p6: say (1, 2) X* (4, 5)

[16:52] <p6eval> rakudo ee86a5, niecza v19-13-g442e075: OUTPUT«4 5 8 10␤»

[16:52] <Tango_Sierra> Ah!  Now that's more like what I expected.

[16:53] <moritz> X just makes the carethesian product

[16:53] <moritz> and X* applies * to the sublists

[16:53] <moritz> and that works with other operators too, of course

[16:53] <moritz> r: say (1, 2, 3) X+ (10, 20)

[16:53] <p6eval> rakudo ee86a5: OUTPUT«11 21 12 22 13 23␤»

[16:54] <moritz> r: say (1, 2, 3) X~ (10, 20) # concatenation

[16:54] <p6eval> rakudo ee86a5: OUTPUT«110 120 210 220 310 320␤»

[16:54] <Tango_Sierra> A quick question if you don't mind:  What is the meaning of $!variable, versus $variable?

[16:54] <moritz> r: say (1, 2, 3) X** (2, 3) # power

[16:54] <p6eval> rakudo ee86a5: OUTPUT«1 1 4 8 9 27␤»

[16:54] *** sisar left
[16:54] <moritz> Tango_Sierra: $!var is an attribute (ie per-object storage, or field, or however you call it in other languages)

[16:55] <moritz> what you'd write as $self->{var} in p5

[16:55] <moritz> and $var is just a normal variable

[17:09] *** spaceships left
[17:13] *** spaceships joined
[17:18] *** Tango_Sierra left
[17:18] <thou> masak: why is it $m instead of $^m in:  my %commands = map { $^m.name => params($m) }, $game.^methods;

[17:21] *** fridim_ left
[17:23] <moritz> thou: $^m declares $m

[17:23] <thou> ah, i did not realize that!

[17:23] <moritz> thou: the reason is that it allows you to the form with the twigil in a sub-scope

[17:24] <moritz> if you write something like

[17:24] <moritz> map { $^m.name => params({$^m + 2 }) } 

[17:24] <moritz> then the second $^m would be a parameter to the inner block, not the same as the one in the outer block

[17:25] <thou> mmmh

[17:25] <thou> thank you, moritz++

[17:25] <moritz> but in the case you asked about earlier, both ($^m and $m) would work the same

[17:26] <sorear> good * #perl6

[17:27] <moritz> good morning sorear 

[17:28] <moritz> erm, maybe not quite morning :-)

[17:28] <huf> it's always morning in space. the earth is in space. sorear is on earth, i assume. tada :)

[17:28] <thou> it might be good to issue a warning if using { $^m; ...; { $^m }}. I mean, I think that is more likely to be a bug than it is intended behavior

[17:30] * moritz doesn't have data to support or contradict that

[17:30] <thou> unless it's done by some macro

[17:30] <thou> yeah, i don't either

[17:30] <thou> perhaps just my current surprise talking

[17:31] <thou> i would at least say that it seems like bad form, and i'd recommend choosing a different name for clarity :-)

[17:32] <moritz> but usually it's a non-issue, because you only use those placeholder parameters in very small blocks

[17:37] <thou> agreed. just another little bit of syntax i needed to know to understand that code.

[17:40] *** Chillance left
[17:41] *** Chillance joined
[17:43] *** vmspb left
[17:47] *** thou left
[17:55] *** birdwind1pbird joined
[17:59] *** vlixes joined
[18:23] *** seldon joined
[18:29] *** sergot joined
[18:29] <sergot> hi o/

[18:29] <moritz> \o sergot 

[18:30] *** PacoAir left
[18:34] *** mucker left
[18:36] *** PacoAir joined
[18:37] *** PacoAir_ joined
[18:37] *** PacoAir left
[18:37] *** PacoAir_ is now known as PacoAir

[18:39] *** PacoAir_ joined
[18:39] *** PacoAir left
[18:39] *** PacoAir_ is now known as PacoAir

[18:41] *** PacoAir_ joined
[18:41] *** PacoAir left
[18:41] *** PacoAir_ is now known as PacoAir

[18:42] *** PacoAir left
[18:42] *** PacoAir joined
[18:43] * masak pops back in

[18:44] <masak> thouwhat moritz++ said. my kvetching made it possible to use $m there after using $^m once. my personal rule is "use $^m once, then $m the rest of the time". then I don't have to walk into the trap of inner blocks causing trouble.

[18:44] <masak> thou: what*

[18:45] <masak> and trouble is more easily caused than it may look. a refactor may cause it. add an if block, and you're toast.

[18:46] <moritz> which would be an argument for not using $^m in the first place, but -> $m { ... }

[18:46] *** crab2313 left
[18:47] *** PacoAir left
[18:49] <masak> right. $^m should be for small bits of code. preferably with just one use of $^m.

[18:50] <masak> well, of $^m or $m, I should say.

[18:50] *** leprevost left
[18:51] *** PacoAir joined
[18:54] *** PacoAir_ joined
[18:54] *** PacoAir left
[18:54] *** PacoAir_ left
[18:55] *** PacoAir joined
[18:59] *** PacoAir left
[19:00] <masak> rn: class A { method foo { self }; method bar { say "OH HAI" } }; A.new.foo#`[ahahahahah].bar

[19:00] <p6eval> niecza v19-13-g442e075: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Method call found where infix expected (change whitespace?) at /tmp/MO0O5O6dNY line 1:␤------> [32may "OH HAI" } }; A.new.foo#`[ahahahahah][33m⏏[31m.bar[0m␤␤Parse failed␤␤»

[19:00] <p6eval> ..rakudo ee86a5: OUTPUT«===SORRY!===␤Confused␤at /tmp/a_QgmAMkhH:1␤»

[19:00] <masak> rn: class A { method foo { self }; method bar { say "OH HAI" } }; A.new.foo\#`[ahahahahah].bar

[19:00] <p6eval> rakudo ee86a5, niecza v19-13-g442e075: OUTPUT«OH HAI␤»

[19:04] *** lue left
[19:06] *** PacoAir joined
[19:10] *** jaldhar_ left
[19:10] *** [particle]1 joined
[19:10] *** PacoAir left
[19:10] *** GlitchMr left
[19:12] *** PacoAir joined
[19:13] *** [particle] left
[19:15] *** sisar joined
[19:16] *** lue joined
[19:17] *** PacoAir left
[19:25] *** moukeddar joined
[19:29] *** PacoAir joined
[19:31] *** PacoAir_ joined
[19:31] *** PacoAir left
[19:31] *** PacoAir_ is now known as PacoAir

[19:33] *** PacoAir left
[19:33] *** PacoAir_ joined
[19:35] *** PacoAir_ left
[19:39] *** adu joined
[19:39] <adu> Hi all

[19:39] <moritz> hi adu

[19:40] <seldon> o/

[19:41] *** adu left
[19:41] *** adu_ joined
[19:42] <adu_> Maybe it doesn't work so well

[19:43] *** adu_ left
[19:43] *** kaare_ left
[20:01] *** fridim_ joined
[20:03] <felher> moritz++ #started to document enumMap and mentioning  that Hash is mutable :)

[20:06] *** vlixes left
[20:21] *** jaldhar_ joined
[20:28] *** vmspb joined
[20:29] *** PacoAir joined
[20:30] *** PacoAir_ joined
[20:30] *** PacoAir left
[20:30] *** PacoAir_ is now known as PacoAir

[20:31] *** Pleiades` left
[20:31] *** PacoAir left
[20:32] *** PacoAir joined
[20:33] <masak> general announcement: defining and using your own exception types is le awesome.

[20:33] *** PacoAir left
[20:34] *** PacoAir joined
[20:35] <[Coke]> welcome to java!

[20:35] *** PacoAir left
[20:35] *** PacoAir_ joined
[20:35] <flussence> I used to do that in php. It made things a lot less painful in places :)

[20:36] <masak> [Coke]: I don't understand that objection, if it even is one. just because it is in Java doesn't mean it isn't kinda nice.

[20:36] <[Coke]> ... it's not an objection.

[20:36] <masak> and just because it's there in Perl 6 doesn't mean you should use it for everything.

[20:36] <masak> it's nice for my current use case.

[20:37] <masak> sorry for biting back on something that probably wasn't trolling ;)

[20:37] <moritz> but please, "l'awesome"

[20:37] <mauke> how about "awesome"?

[20:37] <masak> :P

[20:37] *** Pleiades` joined
[20:37] <masak> "das awesome".

[20:38] <[Coke]> http://news.perlfoundation.org/2012/07/2012q3-call-for-grant-proposal.html 

[20:38] <mauke> "les awesomes"

[20:38] <[Coke]> rjbs's has a list of nice perl5 suggestsions. It would be nice to see a nice list of perl6 suggestions.

[20:38] <[Coke]> er, rjbs++

[20:38] *** jaldhar_ left
[20:39] * moritz has an idea: "make doc.perl6.org awesome"

[20:39] *** PacoAir_ left
[20:40] *** PacoAir joined
[20:40] *** jaldhar_ joined
[20:41] <masak> that could likely be made concrete enough, yes.

[20:41] <masak> does it mean something beyond "give it a nice CSS"?

[20:42] <moritz> yes

[20:43] <moritz> 1) add the usual navigation links, header, footer etc.

[20:43] <moritz> 2) proper layout

[20:44] <moritz> 3) more intelligent link processing (currently all links are relvative, and class names with a :: break, because the browser thinks the piece in front of it is a link schema/protocol)

[20:44] *** PacoAir left
[20:44] *** PacoAir joined
[20:44] *** MayDaniel left
[20:44] <moritz> 4) create pages that lists methods from composed roles and superclasses, recursively

[20:44] <moritz> 5) add a search facility

[20:45] <moritz> 6) more docs, of course

[20:45] <jnthn> +1

[20:45] <moritz> ok, now we just need a taker :-)

[20:45] *** crab2313 joined
[20:46] *** PacoAir left
[20:46] *** PacoAir joined
[20:48] *** PacoAir_ joined
[20:48] *** PacoAir left
[20:48] *** PacoAir_ is now known as PacoAir

[20:50] *** PacoAir_ joined
[20:50] *** PacoAir left
[20:50] *** PacoAir_ is now known as PacoAir

[20:51] *** birdwind1pbird left
[20:51] *** PacoAir left
[20:51] *** snearch joined
[20:56] <dalek> nqp/toqast: cee5640 | jnthn++ | src/QAST/Operations.nqp:

[20:56] <dalek> nqp/toqast: Implement compiling handlers besides CATCH and CONTROL.

[20:56] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/cee5640bfc

[20:58] <dalek> rakudo/toqast: 0d56787 | jnthn++ | src/QPerl6/Actions.pm:

[20:58] <dalek> rakudo/toqast: First pass at updating 'when' for QAST.

[20:58] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/0d56787ed2

[21:00] <flussence> is there anything in parrot I could turn on to spew some extra debug stuff during an nqp build? I really want to figure this one out.

[21:04] <jnthn> flussence: It's not so much extra debug info, but if you can run Parrot with the -G flag on the step that fails, it'll disable GC, which will let us know whether to consider that as a possible issue or not.

[21:06] *** Pleiades` left
[21:07] <flussence> IT WORKS

[21:08] <jnthn> Hmm.

[21:08] <jnthn> And ouch.

[21:08] <jnthn> But that's a major clue.

[21:10] <flussence> rest of build seems to be proceeding without problems so far... (slowly)

[21:11] <flussence> I only added the -G on the NQPCORE.setting command.

[21:13] <flussence> now it fails on the stage2/NQPCORE command :(

[21:14] <flussence> and -G fixes it again

[21:15] *** Pleiades` joined
[21:16] <rjbs> [Coke]: Make one!

[21:20] <flussence> ok, build finished with those two changes

[21:21] <Coleoid> masak: Where does U4X live?  use.perl.org is where links point me, but that's static since late 2010, and I guess your journal transcends the static, as it's pure 404... :D

[21:21] <phenny> Coleoid: 12:47Z <moritz> tell Coleoid I've added an up-to-date item to roast/TODO

[21:22] <Coleoid> moritz++:  Thanks for the Roast TODOs!

[21:26] <masak> Coleoid: I could point you to it, but there's not much there. moritz++' recent effort supersedes u4x.

[21:26] <masak> lol, I blough! \o/ http://strangelyconsistent.org/blog/july-14-2012-hidden-things-which-can-be-revealed

[21:27] *** Pleiades` left
[21:28] <Coleoid> masak:  Will the on_try_exit and on_examine be caught or lost by your event-replay save scheme?

[21:29] <dalek> rakudo/toqast: e506623 | jnthn++ | src/QPerl6/ (2 files):

[21:29] <dalek> rakudo/toqast: Update closure clone fixup code-gen.

[21:29] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/e506623bfb

[21:30] <masak> Coleoid: right now they're lost. I'm currently mulling.

[21:31] <Coleoid> I've wanted to see the nitty-gritty of an event-stream replay/undo in development for a while now.

[21:32] <Coleoid> I look forward to the outcome of the mullery.

[21:32] <masak> yeah. it's possibly a real issue in the system.

[21:33] <masak> events are made to be serializable, so they can't easily contain code objects.

[21:33] <Coleoid> Ooh.

[21:34] <masak> this isn't really a problem in my current system, though. it would be if I ever wanted to save to file.

[21:41] *** Pleiades` joined
[21:52] *** prettyrobots joined
[21:53] *** spider-mario left
[21:58] <dalek> rakudo/toqast: 25b9f19 | jnthn++ | src/QPerl6/Actions.pm:

[21:58] <dalek> rakudo/toqast: Get module compilation/export essentially working again.

[21:58] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/25b9f19f51

[21:58] <dalek> rakudo/toqast: cec243e | jnthn++ | src/QPerl6/Actions.pm:

[21:58] <dalek> rakudo/toqast: Guard against failures like type checking against type variables.

[21:58] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/cec243e5eb

[22:03] *** spider-mario joined
[22:05] *** moukeddar left
[22:07] *** vmspb left
[22:08] *** dovahkiin joined
[22:08] *** dovahkiin left
[22:12] <dalek> rakudo/toqast: 85cdbc8 | jnthn++ | src/QPerl6/World.pm:

[22:12] <dalek> rakudo/toqast: Eliminate the final mentions of viviself.

[22:12] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/85cdbc8bc3

[22:16] *** thelazydeveloper left
[22:27] *** edit_21 joined
[22:34] *** thelazydeveloper joined
[22:39] *** snearch left
[22:43] <masak> 'night, #perl6

[22:57] *** PacoAir joined
[23:03] *** Khisanth left
[23:12] *** Pleiades` left
[23:17] *** Khisanth joined
[23:19] *** Pleiades` joined
[23:55] *** Pleiades` left
[23:56] *** crab2313 left
