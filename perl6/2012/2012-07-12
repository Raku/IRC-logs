[00:07] *** [particle] left
[00:20] *** atrodo left
[00:21] *** [particle] joined
[00:24] *** tokuhiro_ joined
[00:24] *** drbean left
[00:24] *** [particle]1 joined
[00:26] *** drbean joined
[00:27] *** [particle] left
[00:32] *** Coleoid joined
[00:33] *** jevin joined
[00:38] <dalek> rakudo/nom: 95dfc00 | pmichaud++ | src/core/Version.pm:

[00:38] <dalek> rakudo/nom: Revise Version.Str / .gist / .perl .

[00:38] <dalek> rakudo/nom: 

[00:38] <dalek> rakudo/nom: After thinking about it a bit more, I'm of the opinion that

[00:38] <dalek> rakudo/nom: $version.Str should produce a string that doesn't include

[00:38] <dalek> rakudo/nom: a leading 'v'.  The .gist form does have a leading 'v', however,

[00:38] <dalek> rakudo/nom: so C< say $version > still does what one expects.

[00:38] <dalek> rakudo/nom: 

[00:38] <dalek> rakudo/nom: When putting a version in the middle of a string we'll often want

[00:38] <dalek> rakudo/nom: to exclude any leading 'v' (e.g., when generating filenames),

[00:38] <dalek> rakudo/nom: it's much easier to add a 'v' when it's needed than it is to

[00:38] <dalek> rakudo/nom: eliminate one we don't want.  Also, the form without the

[00:38] <dalek> rakudo/nom: leading 'v' is the only one that can (so far) reliably have

[00:38] <dalek> rakudo/nom: much chance of round-tripping back into Version.new(...),

[00:38] <dalek> rakudo/nom: since alphabetics in strings arguments to Version.new are meaningful.

[00:38] <dalek> rakudo/nom: 

[00:38] <dalek> rakudo/nom: At the moment the spec is somewhat silent on this topic, so

[00:38] <dalek> rakudo/nom: I'm hoping this will make more sense.  If not, a spec

[00:38] <dalek> rakudo/nom: clarification or some official tests will let us know how to

[00:38] <dalek> rakudo/nom: improve it.  :-)

[00:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/95dfc0007b

[00:39] <[Coke]> jnthn: I feel your pain on PIR method/opcode/directive naming issues. a lot of those were done organically.

[00:42] *** samlt left
[00:46] *** benabik_ joined
[00:46] *** benabik left
[00:46] *** benabik_ is now known as benabik

[00:50] *** Entonian joined
[00:51] *** Entonian left
[00:54] *** drbean left
[00:56] *** drbean joined
[01:01] *** scott___ joined
[01:11] *** awwaiid left
[01:16] *** thelazydeveloper left
[01:17] *** awwaiid joined
[01:20] *** tokuhiro_ left
[01:20] *** tokuhiro_ joined
[01:20] *** Exodist joined
[01:24] *** drbean left
[01:25] *** tokuhiro_ left
[01:25] *** drbean joined
[01:32] *** Guest9713 left
[01:38] *** Bucciarati left
[01:39] *** drbean left
[01:42] <dalek> roast: e47e2da | pmichaud++ | S (2 files):

[01:42] <dalek> roast: Update tests for .values; .values returns something safely mutable.

[01:42] <dalek> roast: review: https://github.com/perl6/roast/commit/e47e2da725

[01:42] <dalek> roast: 593c77c | pmichaud++ | S02-literals/version.t:

[01:42] <dalek> roast: Update version stringification tests.

[01:42] <dalek> roast: review: https://github.com/perl6/roast/commit/593c77cf40

[01:42] <dalek> rakudo/nom: 499cc68 | pmichaud++ | src/core/Version.pm:

[01:42] <dalek> rakudo/nom: Cleanup Version .parts handling a bit.

[01:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/499cc68bd7

[01:43] *** Bucciarati joined
[01:43] *** benabik left
[01:43] *** benabik joined
[01:45] *** drbean joined
[01:48] *** Teratogen joined
[01:50] *** lumi_ left
[01:50] *** lumi_ joined
[01:53] *** preflex joined
[01:54] *** drbean left
[01:55] *** drbean joined
[02:17] *** Bucciarati left
[02:24] *** drbean left
[02:26] *** drbean joined
[02:26] *** Bucciarati joined
[02:30] *** JimmyZ joined
[02:30] <JimmyZ> pmichaud: ping

[02:32] *** Bucciarati left
[02:33] <JimmyZ> pmichaud: I found that why built dyncall  failed between different strawberry perl versions

[02:34] <diakopter> oh?

[02:34] <JimmyZ> pmichaud: try "cd nqp\3rdparty\dyncall\dyncall && as -o dyncall_call.o dyncall_call.S"

[02:36] <JimmyZ> pmichaud: you will see an emtpy dyncall_call.o file in higher strawberry perl version

[02:39] <JimmyZ> pmichaud: this error aslo occured in dyncall 0.6, then I updated it to 0.7

[02:40] *** Bucciarati joined
[02:47] *** alvis```` left
[02:51] *** jaldhar joined
[02:54] *** drbean left
[02:56] *** drbean joined
[03:03] *** thou left
[03:07] *** JimmyZ left
[03:12] *** Bucciarati left
[03:20] *** zhutingting joined
[03:23] *** adu joined
[03:23] *** Su-Shee_ joined
[03:24] *** drbean left
[03:26] *** drbean joined
[03:26] *** Su-Shee left
[03:32] *** Bucciarati joined
[03:37] *** Bucciarati left
[03:39] *** Bucciarati joined
[03:48] *** [particle] joined
[03:50] *** [particle]1 left
[03:51] *** DarthGandalf left
[03:54] *** drbean left
[03:55] *** drbean joined
[04:14] *** thou joined
[04:18] *** thou left
[04:19] *** thou joined
[04:24] *** telex left
[04:24] *** drbean left
[04:25] *** sisar left
[04:26] *** drbean joined
[04:30] *** telex joined
[04:32] *** DarthGandalf joined
[04:34] *** skids left
[04:38] *** telex left
[04:39] *** telex joined
[04:48] *** longqinsi joined
[04:53] *** REPLeffect left
[04:54] *** REPLeffect joined
[04:54] *** drbean left
[04:56] *** drbean joined
[05:02] *** machinebrain joined
[05:02] <machinebrain> yo

[05:04] *** machinebrain left
[05:10] *** thou left
[05:12] *** longqinsi left
[05:24] *** drbean left
[05:26] *** drbean joined
[05:32] <adu> oy

[05:42] *** wamiks joined
[05:47] *** fhelmberger joined
[05:47] <moritz> \oy

[05:47] <phenny> moritz: 11 Jul 20:56Z <tadzik> tell moritz panda on offline-bootstrap is capable of installing itself to a specified directory without an internet connection. That could prove useful for Star

[05:47] <phenny> moritz: 11 Jul 20:59Z <tadzik> tell moritz also, by manipulating projects.json.bootstrap and bootstrap.pl it should be able to install any Star modules required, all offline

[05:47] *** kaare_ joined
[05:53] *** dayangkun joined
[05:54] *** drbean left
[05:54] <moritz> \o/

[05:55] *** drbean joined
[05:55] *** wtw joined
[05:58] *** birdwindupbird joined
[05:59] *** stephenlb joined
[06:03] *** kaleem joined
[06:06] *** samlt joined
[06:09] <adu> moritz

[06:09] *** adu left
[06:14] *** mucker joined
[06:20] *** Su-Shee_ is now known as Su-Shee

[06:29] *** wamiks left
[06:29] *** nodmonkey left
[06:32] *** nodmonkey joined
[06:34] *** nodmonkey left
[06:35] *** Bucciarati left
[06:39] <tadzik> hello hello

[06:39] *** stephenlb left
[06:40] *** mucker left
[06:43] *** _fall0ut_ joined
[06:44] *** Bucciarati joined
[06:45] *** driador left
[06:47] <sorear> hello hello

[06:52] *** Bucciarati left
[06:54] *** imarcusthis joined
[06:55] *** mucker joined
[06:59] *** birdwindupbird left
[07:00] *** birdwindupbird joined
[07:03] *** simplx joined
[07:11] *** brrt joined
[07:16] *** imarcusthis left
[07:17] *** imarcusthis joined
[07:21] *** sirrobert left
[07:22] <dalek> doc: 6fe21c0 | (Felix Herrmann)++ | lib/Numeric.pod:

[07:22] <dalek> doc: add coercion to Rat/Num/Int/Real

[07:22] <dalek> doc: review: https://github.com/perl6/doc/commit/6fe21c0270

[07:22] <moritz> felher++

[07:22] * moritz finally tests and applies the patches from https://gist.github.com/3059358

[07:26] <hoelzro> better than fehler++, right? =)

[07:26] <moritz> aye :-)

[07:29] <hoelzro> I tried something like the following last night: https://gist.github.com/3096456

[07:29] <hoelzro> I expected it to output 1, but it outputs 3; it seems the hash expands; why is that?

[07:30] <moritz> because hashes flatten

[07:30] <moritz> use %hash.item if you want to prevent that

[07:31] <moritz> or don't use a slurpy in the signature

[07:31] <moritz> r: https://gist.github.com/3096456

[07:31] <p6eval> rakudo 499cc6: OUTPUT«3␤»

[07:31] <hoelzro> moritz: do arrays flatten as well?

[07:31] <moritz> hoelzro: yes

[07:32] <moritz> hoelzro: in general, flattening is controlled by the sigil

[07:32] <hoelzro> but only if a slurpy parameter is used?

[07:32] <moritz> % and @ flatten, $ does not

[07:32] <moritz> hoelzro: correct

[07:32] <hoelzro> hmm...I didn't expect that

[07:32] <hoelzro> I thought I read that "arrays don't flatten in Perl6"

[07:32] <moritz> r: sub f(%h) { say %h.elems }; my %h = :a, :b, :c; f %h

[07:32] <p6eval> rakudo 499cc6: OUTPUT«3␤»

[07:32] <moritz> hoelzro: that's certainly wrong in that generality

[07:33] <hoelzro> there doesn't happen to be a way to specify a slurpy parameter that doesn't flatten its arguments, does there?

[07:33] <moritz> people say and write a lot of crackpot things about Perl 6. Don't believe everything :-)

[07:33] <hoelzro> moritz: I thought I read that in the synopses =P

[07:34] <moritz> hoelzro: well, arrays don't flatten into argument lists. It's the callee side that flattens

[07:34] <hoelzro> I was writing a simple RPC function that accepts a method name and an arbitary list of arguments, so it needs to be slurpy

[07:34] <moritz> you can always do something like

[07:34] <hoelzro> moritz: the callee flattens when it "binds" to the signature?

[07:34] <moritz> r: sub f(|$everything) { say $everything.perl }; my %h  = :a, :b, :!c; f(%h)

[07:34] <p6eval> rakudo 499cc6: OUTPUT«Capture.new( list => ("a" => Bool::True, "b" => Bool::True, "c" => Bool::False).list, hash => EnumMap.new())␤»

[07:35] <moritz> hoelzro: right

[07:35] <moritz> hm, that looks wrong. I'd exepcted it to retain the hash

[07:35] <moritz> r: sub f(|$everything) { say $everything[0].WHAT };  my %h  = :a, :b; f(%h)

[07:35] <p6eval> rakudo 499cc6: OUTPUT«Hash()␤»

[07:36] <moritz> ok, it does work

[07:36] <moritz> it's just .perl that flattens it

[07:36] * moritz submits rakudobug

[07:36] <dalek> rakudo/nom: c758c1b | (Felix Herrmann)++ | src/core/ (2 files):

[07:36] <dalek> rakudo/nom: add X::Numeric::Real

[07:36] <dalek> rakudo/nom: 

[07:36] <dalek> rakudo/nom: Signed-off-by: Moritz Lenz [email@hidden.address]
[07:36] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c758c1bc38

[07:37] <hoelzro> moritz: I'll have to play with the | in the signature, thanks =)

[07:37] <hoelzro> I'm making a list of all of the "I don't know how to do this" while writing my chat bot =)

[07:38] <diakopter> 01:54 -!- imarcusthis [~marcus-fr@231.110.45.31.customer.cdi.no] has joined #perl6

[07:39] <moritz> Capture.perl bug submitted as RT #114100

[07:39] <diakopter> ergh

[07:39] <diakopter> good thing it didn't paste more than that

[07:39] <dalek> specs/io-refactor: 7fb26ae | (Felix Herrmann)++ | S32-setting-library/ (2 files):

[07:39] <dalek> specs/io-refactor: introduce X::Numeric::Real

[07:39] <dalek> specs/io-refactor: 

[07:39] <dalek> specs/io-refactor: Signed-off-by: Moritz Lenz [email@hidden.address]
[07:39] <dalek> specs/io-refactor: review: https://github.com/perl6/specs/commit/7fb26aef67

[07:40] <moritz> oops, wrong branch

[07:40] <dalek> specs: 69be1be | (Felix Herrmann)++ | S32-setting-library/ (2 files):

[07:40] <dalek> specs: introduce X::Numeric::Real

[07:40] <dalek> specs: 

[07:40] <dalek> specs: Signed-off-by: Moritz Lenz [email@hidden.address]
[07:40] <dalek> specs: review: https://github.com/perl6/specs/commit/69be1be487

[07:50] *** mucker left
[07:55] *** odoacre_ left
[07:58] <dalek> roast: a47ed9f | moritz++ | S32-exceptions/misc.t:

[07:58] <dalek> roast: test X::Numeric::Real

[07:58] <dalek> roast: review: https://github.com/perl6/roast/commit/a47ed9fbf8

[08:10] *** timotimo joined
[08:11] *** GlitchMr joined
[08:12] *** mauke left
[08:12] *** sporous left
[08:13] *** mauke joined
[08:13] *** sporous joined
[08:14] *** preflex left
[08:15] *** preflex joined
[08:18] *** erkan joined
[08:18] *** erkan left
[08:18] *** erkan joined
[08:25] *** hanekomu joined
[08:32] *** sisar joined
[08:34] *** Bucciarati joined
[08:38] *** eiro_ joined
[08:52] *** xinming_ joined
[08:53] *** dayangkun_ joined
[08:53] *** dayangkun_ left
[08:54] *** dayangkun left
[08:55] *** xinming left
[08:57] <jnthn> morning

[08:57] <diakopter> ahoy

[08:57] <moritz> \o

[09:00] <tadzik> ohay

[09:03] *** dakkar joined
[09:05] *** szabgab joined
[09:05] <szabgab> hi perl6ers

[09:06] <szabgab> I made some changes to Test.pm to make the subs return theirs truth 

[09:06] <szabgab> but then I found out I don't have commit bit for rakudo

[09:06] <szabgab> shall I fork it and push it there or shall I wait for a commit bit?

[09:07] <moritz> szabgab: please submit a pull request, or give us a patch or so

[09:07] <szabgab> ok, I fork and let you pull

[09:07] <moritz> szabgab: unfortunately rakudo commit bits aren't given out as freely as to other projects

[09:07] <moritz> (due to ownership/license/purity/whatever-concerns)

[09:07] <szabgab> no problem

[09:07] <szabgab> though I think I signed that paper once

[09:08] <szabgab> but it never got processed IIRC

[09:11] <moritz> phenny: ask pmichaud could you please check if there's a valid CLA for szabgab available?

[09:11] <phenny> moritz: I'll pass that on when pmichaud is around.

[09:13] <szabgab> will phenny notice the pull request or do I need to mentione it here?

[09:15] <moritz> szabgab: the rakudo comitters (and followers) receive email notification from github

[09:15] *** bbkr joined
[09:16] <moritz> szabgab: which isn't quite real time, but often good enough

[09:17] <szabgab> ok, and now I have a forked version on my computer, do I need to do some special thing to set the nom branch as the  upstream or just     

[09:17] <szabgab> git remote add upstream git://github.com/rakudo/rakudo.git

[09:19] <moritz> that should work, yes

[09:19] <szabgab> and then  git fetch upstream;    git merge upstream/master

[09:20] <szabgab> or that last one should be nom ?

[09:22] <moritz> yes, nom

[09:22] <moritz> there's no rakudo/master

[09:22] <moritz> or, there shouldn't be :-)

[09:24] *** daxim joined
[09:27] <szabgab> moritz: thanks

[09:28] *** szabgab left
[09:28] <moritz> szabgab: I'm spectesting rakudo with your Test.pm patch. Will push if everything passes (which I think it will)

[09:32] <Woodi> hello today

[09:32] <Woodi> someone can help me with starting with niecza on windows with GUI 

[09:32] <Woodi> ?

[09:33] <Woodi> got niecza so far :)

[09:34] <sorear> What do you mean by "with GUI"?

[09:34] <moritz> Woodi: I don't know anything about the topic, but the first thing I'd try to do is run an example

[09:34] <sorear> Do you have the .NET framework installed?

[09:34] <sorear> Does it work from CMD.EXE?

[09:34] <moritz> mberends and colomon have posted example GUI programs

[09:34] <Woodi> probably I have .NET

[09:34] <sorear> the example GUI programs all require Gtk#

[09:34] <Woodi> say 2 + 2; works

[09:34] <dalek> rakudo/nom: c2c02ab | (Gabor Szabo)++ | / (2 files):

[09:34] <dalek> rakudo/nom: change most of the Test.pm functions to return their truth value and test this in the sanity test

[09:34] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c2c02abf69

[09:35] <sorear> I would not try them unless you know it works

[09:35] <Woodi> examples are not bundled ?

[09:35] <sorear> ... no, they're not

[09:36] <sorear> this is an oversight

[09:36] <sorear> if you fetch the source from git, they're in examples/

[09:36] <Woodi> on github ?

[09:36] <Woodi> k

[09:36] <sorear> yes

[09:36] <Woodi> do I need GTK or .Net GUI will work ?

[09:37] <sorear> GTK

[09:37] <Woodi> ok

[09:37] <sorear> all of the examples are written to use the GTK API

[09:38] <sorear> in theory you could write an example to use System.Windows.Forms or the Windows Presentation Framework, both(?) of which come with .NET on Windows

[09:38] <sorear> GTK# has the best cross-platform support though

[09:39] <sorear> Qt# and WinForms have poor support on other plaforms, WPF and MonoMac have none at all

[09:39] <Woodi> but examples of not portable .Net working GUI apps would be nice :)

[09:40] <sorear> GUIs are IME the main obstacle to realizing the promise of portable apps on the "Common" language infrastructure

[09:41] * jnthn actually taught WPF once. A while back. :)

[09:41] <Woodi> background: there is mod DayZ to ARMA2 game with 3rd party heavy launcher written in Ruby probably... it is so annoing on few levels... :)

[09:42] <Woodi> yea, in year 2000 when I hear about Perl6 I hoped for two things: threads and kind-of-universal-NICE-LOOKING-gui...

[09:49] <Woodi> -sorear-: I would realy like to try just native .Net GUI with niecza... Any examples somewhere ?

[09:50] <sorear> look at the existing examples for .net/p6 interop, then look for winforms/wpf examples on the internet

[09:52] <Woodi> oki

[10:04] *** [particle]1 joined
[10:05] *** scott___ left
[10:06] *** [particle] left
[10:09] <dalek> specs/io-refactor: 2230db7 | moritz++ | S32-setting-library/IO.pod:

[10:09] <dalek> specs/io-refactor: [S32] clarify that only sub forms of say and print warn without arguments

[10:09] <dalek> specs/io-refactor: review: https://github.com/perl6/specs/commit/2230db7a08

[10:11] <dalek> specs/io-refactor: e47c923 | moritz++ | S32-setting-library/IO.pod:

[10:11] <dalek> specs/io-refactor: [S32] remove a mathom

[10:11] <dalek> specs/io-refactor: review: https://github.com/perl6/specs/commit/e47c923ebd

[10:15] <moritz> could somebody please review the Socket part of S32::IO in the io-refactor branch?

[10:15] <moritz> it's the only major missing piece

[10:15] <moritz> and I don't know much about sockets

[10:15] *** Celelibi joined
[10:16] <moritz> of course reviews of the other stuff would be appreciated too

[10:17] <moritz> oh, and there is IO stuff in S16 too. Shit, I forgot about that

[10:19] <moritz> some of that needs to move to the S32::IO/Here be Dragons/ section too

[10:20] *** GlitchMr left
[10:20] *** GlitchMr joined
[10:21] <bbkr> rakudo: use Test; eval_lives_ok '1<&1'

[10:21] <p6eval> rakudo c2c02a: OUTPUT«use of uninitialized variable $v of type Any in numeric context  in block <anon> at eval_0:1␤␤ok 1 - ␤»

[10:21] <Woodi> niecza with default GTK# installation runs few examples but maybe Cairo is additional dependency ?

[10:22] *** Patterner left
[10:22] *** GlitchMr left
[10:22] *** GlitchMr joined
[10:23] *** GlitchMr left
[10:24] *** GlitchMr joined
[10:26] *** Psyche^ joined
[10:26] *** Psyche^ is now known as Patterner

[10:34] *** zby_home_ joined
[10:37] <sorear> Woodi: maybe!

[10:39] <colomon> o/

[10:40] * colomon had not expected to see sorear awake

[10:41] * jnthn wonders if sorear is still doing yesterday ;)

[10:41] <sorear> :|

[10:44] *** zhutingting left
[10:48] *** GlitchMr left
[10:48] *** GlitchMr joined
[10:51] *** GlitchMr left
[10:51] *** GlitchMr joined
[10:53] *** GlitchMr left
[10:53] *** GlitchMr joined
[10:54] *** GlitchMr left
[10:54] *** GlitchMr joined
[10:54] *** GlitchMr left
[10:54] *** GlitchMr joined
[10:55] *** sporous left
[10:56] *** GlitchMr left
[10:57] *** GlitchMr joined
[10:57] *** sporous joined
[10:58] *** GlitchMr left
[11:07] *** zhutingting joined
[11:16] *** spider-mario joined
[11:30] *** GlitchMr joined
[11:40] *** zby_home_ left
[11:42] *** _jaldhar joined
[11:42] *** mauke left
[11:42] *** mauke joined
[11:45] *** jaldhar left
[11:45] *** spider-mario left
[11:46] *** spider-mario joined
[11:58] *** Coleoid left
[12:14] *** tokuhiro_ joined
[12:25] *** [particle] joined
[12:29] *** [particle]1 left
[12:30] <moritz> jnthn, pmichaud: ping

[12:30] *** thelazydeveloper joined
[12:30] <moritz> I'm trying to add methods 'resume' and 'resumable' to class Exception

[12:31] <moritz> and sub print_control currently uses  my $resume := nqp::atkye($ex, 'resume');  if $resume {... }

[12:32] <moritz> however when I add similar code to class Exception, I get get_integer() not implemented in class 'Continuation'

[12:32] <moritz> do I have to specifically check the exception type for 'control'?

[12:33] <jnthn> moritz: plz can I see the code you've added?

[12:34] <moritz> jnthn: method resumable() { nqp::p6bool(nqp::atkey($!ex, 'resume')) }

[12:34] <moritz> ./perl6 -e 'try die "foo"; say $!.resumable'

[12:38] <jnthn> try

[12:38] <tadzik> CATCH

[12:38] <tadzik> :)

[12:39] <jnthn> nqp::p6bool(nqp::istrue(nqp::atkey($!ex, 'resume')))

[12:39] <jnthn> tadzik: oh, CONTROL yourself :P

[12:39] *** localhost joined
[12:41] <[Coke]> jnthn: let's KEEP this clean.

[12:42] <moritz> just LEAVE it at that, will you?

[12:43] <jnthn> OK, this will be my LAST comment.

[12:44] <moritz> I'll be the FIRST to try to UNDO the damages that my puns have made

[12:45] <[Coke]> ... I might need to START over here.

[12:45] <moritz> yes, do BEGIN

[12:45] <jnthn> When will this END?!

[12:46] <dalek> rakudo/nom: 74e1838 | moritz++ | src/core/Exception.pm:

[12:46] <dalek> rakudo/nom: [Exception] add methods resumable and resume

[12:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/74e1838375

[12:46] <tadzik> follow this way and you'll ENTER a road of madness

[12:47] * moritz wonders what an outsider would make of this conversation :-)

[12:48] <jnthn> Yeah, and don't forget to CHECK out the flying pink giraffe by the roadside.

[12:49] <jnthn> moritz: They'd say, "#perl6 is a really strange place, INIT?"

[12:49] <moritz> jnthn: as long as they don't want to REDO #perl6 in their own way, that's fine :-)

[12:50] *** zhutingting left
[12:50] <jnthn> Fail! There is no REDO phaser :P

[12:50] *** sisar left
[12:51] <moritz> there... isn't?

[12:51] <moritz> OH NOES

[12:51] <jnthn> Not in S04 at least. :)

[12:51] *** huf left
[12:52] <[Coke]> C-C-C-COMBO BREAKER!

[12:52] *** mucker joined
[12:54] <moritz> ok, we've missed PRE, POST and NEXT

[12:54] <mauke> PREPOSTerous

[12:55] <moritz> let's move on to the NEXT type of pun then :-)

[12:55] <timotimo> we took the concept of taking a concept and running with it and just ran with it!

[12:59] *** PacoAir joined
[13:00] <timotimo> ... and that's how autopuns were made

[13:01] <dalek> specs/io-refactor: 09c9f53 | moritz++ | S32-setting-library/Exception.pod:

[13:01] <dalek> specs/io-refactor: [S32::Exception] mention methods resumable and resume

[13:01] <dalek> specs/io-refactor: review: https://github.com/perl6/specs/commit/09c9f53eaf

[13:01] <moritz> wrong branch again. HATE.

[13:01] * moritz not used to having branches in specs

[13:02] <moritz> so I should merge soon, right?

[13:02] <moritz> somebody please confirm that S32 is less insane in the branch than in master :-)

[13:09] *** kaleem left
[13:10] *** kaleem joined
[13:11] *** kaleem left
[13:12] *** kaleem joined
[13:12] *** kaleem left
[13:15] *** atrodo joined
[13:15] *** localhost left
[13:16] *** kaleem joined
[13:18] *** localhost joined
[13:19] *** atrodo left
[13:22] *** atrodo joined
[13:25] <pmichaud> good morning, briefly

[13:25] <phenny> pmichaud: 09:11Z <moritz> ask pmichaud could you please check if there's a valid CLA for szabgab available?

[13:26] *** sisar joined
[13:26] <pmichaud> moritz: don't see one in the spreadsheet

[13:27] <jnthn> o/ Pm

[13:27] <pmichaud> o/

[13:29] <moritz> pmichaud: ok, thanks

[13:31] *** vmspb joined
[13:32] *** bluescreen10 joined
[13:32] <pmichaud> afk, errands

[13:40] *** kaleem left
[13:40] *** JimmyZ joined
[13:45] *** nightlord joined
[13:45] *** sisar left
[13:51] *** mattp_ joined
[13:51] *** JimmyZ left
[13:56] <Woodi> -sorear-: I got few times: Unhandled exception: ... at /home/stefan/rel/niecza/... that's unnecesary level of details :)

[13:57] *** thou joined
[14:06] *** thou left
[14:08] *** GlitchMr42 joined
[14:09] *** leprevost joined
[14:10] *** GlitchMr left
[14:12] *** GlitchMr42 is now known as GlitchMr

[14:15] <arnsholt> jnthn: In the callback stuff, dyncallback distinguishes between const char * and void *. Any opinions on whether we should pass string arguments as the former or the latter?

[14:15] *** tokuhiro_ left
[14:15] <jnthn> Hmm...does it distinguish those in normal argument passing?

[14:17] <jnthn> dcArgPointer(vm, str);

[14:17] <jnthn> Seems even if it does, we don't...

[14:18] <arnsholt> No documented difference in argument binding

[14:18] <jnthn> Curious that they've chosen to distinguish the two for callbacks.

[14:19] <arnsholt> The signatures also want to distinguish between signed and unsigned types, for some reason

[14:19] <jnthn> Well, that can matter. I'm less surprised by that than I am that they single out char *

[14:20] <jnthn> oh, maybe it's the cosnt-ness...

[14:21] <arnsholt> Yeah, they do say that the signedness is for higher-level bindings and not of interest to the C library

[14:21] <jnthn> I'm guessing this is not so much about passing, as processing the arguments that we get returned?

[14:21] <arnsholt> I guess

[14:21] <jnthn> A pointer is a pointer though...

[14:21] <jnthn> Our existing code just handles it with void*

[14:21] <jnthn> So it's probably easier for us to do that.

[14:21] <arnsholt> Right. We're in agreement then

[14:22] *** lue left
[14:24] *** xinming_ left
[14:25] *** JimmyZ joined
[14:26] *** xinming joined
[14:32] *** wtw left
[14:35] *** lue joined
[14:55] *** fhelmberger left
[15:02] *** kaleem joined
[15:02] *** cognominal left
[15:02] *** lue left
[15:03] *** crab2313 joined
[15:12] *** spider-mario left
[15:14] <diakopter> um. what is this new code editor view on github

[15:14] *** lue joined
[15:15] *** skids joined
[15:16] <diakopter> oh, I must have clicked Edit this file

[15:16] <diakopter> odd

[15:17] *** not_gerd joined
[15:17] <not_gerd> hello, #perl6

[15:18] <dalek> nqp: 62b9fc9 | (Gerhard R)++ | 3rdparty/dyncall/buildsys/gmake/tool/gcc.gmake:

[15:18] <dalek> nqp: [dyncall] workaround for build issues on case-insensitive file systems

[15:18] <dalek> nqp: 

[15:18] <dalek> nqp: fixes issue #47

[15:18] <dalek> nqp: review: https://github.com/perl6/nqp/commit/62b9fc9f16

[15:20] <pmichaud> not_gerd: nice patch!  I'll re-try with strawberry again :)

[15:20] <pmichaud> not_gerd: did you see that I fixed #113666 ?  ;-)

[15:21] <not_gerd> pmichaud: yes, I saw # pmichaud++

[15:22] <not_gerd> in fact, I already updated the benchmark script

[15:22] <pmichaud> \o/

[15:22] <not_gerd> (perl6-examples/shootout/regex-dna.p6.pl)

[15:23] <not_gerd> btw, regular expressions neither .Str nor .gist properly

[15:23] <not_gerd> r: say /foo/

[15:23] <p6eval> rakudo 74e183: OUTPUT«_block1011␤»

[15:23] <pmichaud> sure, that's known.

[15:23] *** spider-mario joined
[15:24] <pmichaud> r: sub foo { 1 };   say &foo

[15:24] <p6eval> rakudo 74e183: OUTPUT«sub foo() { ... }␤»

[15:24] <pmichaud> r: say /foo/.WHAT

[15:24] <p6eval> rakudo 74e183: OUTPUT«Regex()␤»

[15:24] <pmichaud> r:  say /foo/.gist

[15:24] <p6eval> rakudo 74e183: OUTPUT«_block1011␤»

[15:24] <pmichaud> okay, that part is weird.

[15:25] <pmichaud> oh!

[15:25] <pmichaud> r: class XYZ { method abc() { ... } };   say XYZ.^methods[0]

[15:25] <p6eval> rakudo 74e183: OUTPUT«abc␤»

[15:25] <pmichaud> regexes are methods, so they stringify like them.

[15:26] <JimmyZ> re not_gerd's patch: https://github.com/perl6/nqp/commit/17acbc108c050762dd2697070488480e0e3a2eed#L1L48 :)

[15:28] <not_gerd> so I might have broken the build on other versions of strawberry perl?

[15:28] <not_gerd> hopefully not...

[15:29] <not_gerd> anyway, we could always just remove the %.s rule

[15:31] *** thou joined
[15:41] <pmichaud> (re:  RAKUDO_MODULE_DEBUG)   instead of only displaying the module load information if the environment variable is set, would it be easier to always log the entries and then display them if/when the "Missing or wrong version of dependency" message is displayed?  How big would that log get?

[15:41] <pmichaud> s/easier/better/

[15:42] <pmichaud> i.e., let it act more like a backtrace than like a warn log

[15:43] * not_gerd thinks it might be a good idea to find out why shootout/revcomp.p6.pl is so slow - it had the worst result in 2009 and regressed since then...

[15:44] <pmichaud> not_gerd: well, I can totally understand why it would regress -- the regex engine has gotten a lot more complex since 2009

[15:45] <pmichaud> oh, and I suspect that .trans is not at all performant either

[15:46] * not_gerd needs to leave, but will check later if someone reopened the strawberry ticket

[15:46] <not_gerd> bye, #perl6

[15:46] <pmichaud> I'm testing strawberry 5.16.0 now

[15:47] <diakopter> pmichaud: 64-bit or 32-bit?

[15:47] <pmichaud> 32-bit

[15:47] *** not_gerd left
[15:47] <pmichaud> I don't have easy access to a 64-bit windows system atm

[15:47] <diakopter> I'll try 64-bit if yours works

[15:48] *** daxim left
[15:48] *** daxim joined
[15:49] <JimmyZ> yes, the above patch brokes strawberry 5.10.1

[15:49] <JimmyZ> ..\..\3rdparty\dyncall\dyncall\libdyncall_s.a(dyncall_callvm.o):dyncall_callvm.c :(.text+0x1fe): undefined reference to `dcCall_x86_cdecl'

[15:51] <pmichaud> nqp now builds under strawberry 5.16.1 though.

[15:51] <pmichaud> sorry, 5.16.0

[15:52] <JimmyZ> after `git reset HEAD~1 --hard`, I got a build too.

[15:52] <JimmyZ> so I'm +1 to remove %.s part

[15:53] <pmichaud> diakopter: can you try under 64-bit?

[15:53] * JimmyZ sleeps

[15:53] <diakopter> doing so now

[15:53] <pmichaud> diakopter++

[15:53] *** JimmyZ left
[15:53] <pmichaud> I'm going to try with strawberry 5.14

[15:55] <pmichaud> actually, I should test 5.12 again too with the patch

[15:57] *** pupoque joined
[15:58] <diakopter> pmichaud: do you know of a git command to take a checkout tree to a pristine state (say, at its last commit), including deleting all untracked files?

[15:58] *** pupoque left
[15:58] <pmichaud> git clean -xdf 

[15:58] <pmichaud> recurses into subdirs, too, so be careful :)

[15:58] <pmichaud> I've been doing the following:

[15:58] <diakopter> so in the rakudo build dir, it would also go into nqp and parrot?

[15:59] <pmichaud> rmdir /s install

[15:59] <pmichaud> (yes)

[15:59] <diakopter> oh; I've been re-checking out every time :(

[15:59] <pmichaud> in the rakudo build dir, it would *delete* nqp and parrot

[15:59] <pmichaud> so...

[15:59] <diakopter> oh..

[15:59] <pmichaud> rmdir /s install

[15:59] <pmichaud> cd nqp

[15:59] <pmichaud> git clean -xdf

[15:59] <pmichaud> cd ..\parrot

[15:59] <pmichaud> git clean -xdf

[15:59] <pmichaud> cd ..

[15:59] <pmichaud> perl Configure.pl --gen-nqp=master --gen-parrot

[16:00] <diakopter> oh hm

[16:00] <jnthn> .oO( It's funny to see Pm writing paths with backslashes :D )

[16:01] <pmichaud> jnthn: notice how I only did it once?  ;-)

[16:02] <jnthn> ;-)

[16:02] <pmichaud> maybe I should've written    cd ..@slash@parrot   instead :-)

[16:02] <jnthn> Looking at the dependency error, it'd be good to include the module currently being loaded in the error somewhre.

[16:02] * diakopter tries not to run rmdir /S /W \

[16:02] <jnthn> Wonder how hard it is to make that happen...

[16:02] <diakopter> er

[16:02] <diakopter> maybe a good thing I typo'd that

[16:03] <pmichaud> 5.14.2 is working for me also

[16:03] <pmichaud> let's try 5.12 now

[16:04] <jnthn> Hmm, so backlogging, iiuc the situation now is that things work with Strawberry 5.14/5.16 with the patch, but not 5.10, which did work before?

[16:04] <pmichaud> jnthn: almost

[16:04] *** brrt left
[16:05] <pmichaud> jimmyz++ apparently did a patch 5 months ago to fix things for strawberry (works with 5.10).  not_gerd's patch today undoes part of jimmy z's patch from 5 months ago, and now things work for 5.14 and 5.16

[16:05] <pmichaud> I'm testing now to see if today's patch works with 5.12

[16:06] <pmichaud> I'd like a version that works with all of 5.10, 5.12, 5.14, and 5.16, but if that's not possible, I'd prefer 5.12+ as the minimum version.

[16:06] <jnthn> *nod*

[16:06] <pmichaud> I'd be willing to accept 5.14+

[16:07] <pmichaud> but... reluctantly

[16:07] <pmichaud> anyway, we'll know here in a just a second.

[16:07] <pmichaud> ...or more

[16:08] <diakopter> pmichaud: I noticed msvc builds parrot/nqp/rakudo *significantly* more quickly than gcc, but rakudo/msvc builds CORE.setting 13% more slowly than rakudo/gcc

[16:09] <pmichaud> diakopter: yeah, that's kinda interesting.

[16:13] <pmichaud> okay, nqp master also works with 5.12.3

[16:13] <diakopter> pmichaud: yes, works with 64-bit 5.16.0.1

[16:14] <pmichaud> so, if there's another patch (remove .s rule) that enables things to work with 5.10 while retaining 5.12+, I'm fine with that.  If patching for 5.10 means we lose 5.14+, then I'd reject the patch for 5.10.

[16:15] *** snearch joined
[16:15] <pmichaud> and after adequate testing, we should bump NQP_REVISION in rakudo's head

[16:19] <[Coke]> shame we don't have an easy way to track build failures as opposed to test failures.

[16:19] <[Coke]> "surely there's an app for that."

[16:19] <pmichaud> [Coke]: I'm thinking of setting up a couple of amazon ec2 instances; we might be able to do something with that.

[16:19] *** crab2313 left
[16:20] <pmichaud> Indeed, part of why I'm playing with windows builds is to see what would be required to do that

[16:20] <pmichaud> added my results and comments to #47

[16:20] *** fgomez left
[16:25] *** nightlord left
[16:25] <pmichaud> I'm afk for a bit

[16:27] *** orafu joined
[16:30] *** sisar joined
[16:34] *** kaleem left
[16:34] *** Coleoid joined
[16:38] <dalek> nqp/toqast: f014bdc | jnthn++ | src/QAST/Compiler.nqp:

[16:38] <dalek> nqp/toqast: Handle an optimization escape hatch for the way $_, $!, $/ and %_ are handled.

[16:38] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/f014bdcee3

[16:38] *** kaleem joined
[16:38] <dalek> rakudo/toqast: 8721264 | jnthn++ | src/QPerl6/Actions.pm:

[16:38] <dalek> rakudo/toqast: Updates to use new exception handling approach in QAST. Gets 12-try.t passing again.

[16:38] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/87212648d0

[16:47] <jnthn> qperl6 (Rakudo using QAST) now passes all but 1 of the sanity tests, and 3430 tests from make spectest.

[16:49] <[Coke]> jnthn++

[16:49] *** nodmonkey joined
[16:59] *** dakkar left
[17:07] *** birdwindupbird left
[17:11] *** birdwindupbird joined
[17:11] <Coleoid> If I want to make changes to the test suite, should I fork Roast, or Mu, or ?

[17:11] <phenny> Coleoid: 11 Jul 18:49Z <[Coke]> tell Coleoid that http://smolder.parrot.org/app/projects/smoke_reports/5 exists for tracking test failures on different versions/platforms.

[17:11] <Coleoid> [Coke]:  Thanks!

[17:14] *** simplx left
[17:14] <diakopter> Coleoid: just ask for a commit bit, and you can make changes directly

[17:15] <diakopter> hugme: add Coleoid to perl6

[17:15] <hugme> diakopter: You need to register with freenode first

[17:17] *** birdwindupbird left
[17:23] *** kaleem left
[17:26] *** bbkr left
[17:26] *** birdwindupbird joined
[17:27] *** snearch left
[17:32] *** cognominal joined
[17:33] *** stephenlb joined
[17:36] <Coleoid> diakopter:  Do you mean that changes to the tests inside the rakudo tree will make it into the official perl6 test suite?

[17:40] *** snearch joined
[17:47] *** Coleoid left
[17:49] *** crab2313 joined
[17:50] *** cognominal_ joined
[17:50] *** cognominal left
[17:54] *** vmspb left
[17:56] *** _fall0ut_ is now known as driador

[17:56] <tadzik> jnthn: woo \o/

[17:56] <tadzik> awesome!

[17:56] *** driador left
[17:56] *** driador joined
[17:58] *** sisar left
[17:58] *** daxim left
[18:01] *** mtk left
[18:04] *** MayDaniel joined
[18:06] *** mtk joined
[18:06] *** birdwindupbird left
[18:14] *** snearch left
[18:15] <dalek> nqp/toqast: 3dc36d1 | jnthn++ | src/QAST/Compiler.nqp:

[18:15] <dalek> nqp/toqast: Implement falling back to symbol if there are QAST::Var nodes with no scope declared.

[18:15] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/3dc36d14ca

[18:19] <dalek> rakudo/toqast: 869ffc9 | jnthn++ | src/QPerl6/Actions.pm:

[18:19] <dalek> rakudo/toqast: Toss :lvalue marker that isn't needed.

[18:19] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/869ffc9329

[18:19] <dalek> rakudo/toqast: e99f5b5 | jnthn++ | t/harness:

[18:19] <dalek> rakudo/toqast: Run spectest with qperl6.

[18:19] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/e99f5b5388

[18:19] <dalek> rakudo/toqast: 3589ee7 | jnthn++ | src/QPerl6/Actions.pm:

[18:19] <dalek> rakudo/toqast: Fix self, booleans.

[18:19] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/3589ee7a2d

[18:19] <dalek> rakudo/toqast: 4b2dc33 | jnthn++ | src/QPerl6/Actions.pm:

[18:19] <dalek> rakudo/toqast: Fix up Whatever * hanlding a bit.

[18:19] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/4b2dc33b56

[18:30] *** nodmonkey left
[18:42] *** spider-mario left
[18:49] *** xinming left
[18:49] <masak> hola, #perl6!

[18:50] <moritz> \o masak, #perl6

[18:51] *** cognominal joined
[18:51] <masak> in my Esperanto class this year is an 11yo Lithuanian girl. on the third day she read Asterix fluently and did math problems in Esperanto. o.O

[18:52] <masak> it makes me feel almost obsolete.

[18:53] *** cognominal_ left
[18:54] *** seldon joined
[18:55] <gfldex> you may want to try to feel proud instead

[18:56] *** xinming joined
[18:56] <masak> oh, I do :)

[18:56] <dalek> rakudo/toqast: fd5eecc | jnthn++ | src/QPerl6/Actions.pm:

[18:56] <dalek> rakudo/toqast: Fix &foo.

[18:56] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/fd5eecc2dd

[18:56] <dalek> rakudo/toqast: 5768ec4 | jnthn++ | src/QPerl6/Actions.pm:

[18:56] <dalek> rakudo/toqast: Fix return.

[18:56] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/5768ec4966

[18:59] *** cognominal left
[19:00] *** cognominal joined
[19:01] *** la_bori_nena joined
[19:01] <masak> la_bori_nena: sal!

[19:01] <la_bori_nena> masak sal tu!

[19:01] <masak> ;)

[19:01] * masak saltas

[19:02] <la_bori_nena> ;)

[19:02] *** not_gerd joined
[19:03] <masak> la_bori_nena: unua vizito ĉe #perl6?

[19:04] <PerlJam> http://martinfowler.com/bliki/SemanticDiffusion.html

[19:05] <PerlJam> Seems like that article has some lessons for Perl 6 too

[19:06] *** la_bori_nena left
[19:06] <masak> PerlJam: interesting.

[19:08] *** nodmonkey joined
[19:11] <sorear> good * #perl6

[19:12] <masak> sorear! \o/

[19:12] <colomon> he's awake!

[19:14] * masak follows that up with a few bongs on a large drum

[19:14] <not_gerd> pmichaud: I've got a fix which works on Strawberry 5.10.1.2-32bit, 5.16.0.1-32bit, 5.14.2.1-64bit but slightly changes build semantics

[19:14] <not_gerd> (always goes through gcc and never invokes as directly)

[19:15] <dalek> rakudo/toqast: c37bf13 | jnthn++ | src/QPerl6/Actions.pm:

[19:15] <dalek> rakudo/toqast: Fix :foo and :!foo colonpairs.

[19:15] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/c37bf136e0

[19:15] <dalek> rakudo/toqast: ad2340a | jnthn++ | src/QPerl6/Actions.pm:

[19:15] <dalek> rakudo/toqast: Fix named arg passing.

[19:15] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/ad2340af77

[19:16] * colomon just was thinking how much easier his $work would be in perl6, then realized that there was no reason he couldn't apply some good Perl common sense to make his C++ life easier.

[19:20] *** birdwindupbird joined
[19:20] *** GlitchMr left
[19:26] *** kaare_ left
[19:27] <seldon> I suspect trying to make C++ work like Perl6 would not end prettily.

[19:28] <colomon> don't need to make the whole thing work like Perl 6

[19:28] <colomon> well, I mean, that would be nice.

[19:28] <colomon> but I'm focusing on one particular set of function calls

[19:32] <seldon> That's rather too vague for me to make a meaningful comment.

[19:33] *** SHODAN left
[19:35] *** SHODAN joined
[19:37] *** leprevost left
[19:37] <moritz> then don't :-)

[19:38] <seldon> Meaningless it is, then. :P

[19:40] *** vmspb joined
[19:43] <colomon> seldon: wasn't looking for advice, just celebrating having an idea that would save me ten or twenty meaningless lines of code in dozens of tests.

[19:44] <seldon> Ah. Congratulations, then.

[19:44] <dalek> nqp/toqast: 200e52f | jnthn++ | src/QAST/Operations.nqp:

[19:44] <dalek> nqp/toqast: Implement a vivify op.

[19:44] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/200e52fe71

[19:44] <dalek> nqp/toqast: 4f2cb27 | jnthn++ | src/QRegex/P6Regex/Actions.nqp:

[19:44] <dalek> nqp/toqast: Add (not really done yet) QAST variants of various things in QRegex::P6Regex::Actions.

[19:44] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/4f2cb273f4

[19:45] <dalek> rakudo/toqast: 5a7d74b | jnthn++ | src/QPerl6/Actions.pm:

[19:45] <dalek> rakudo/toqast: Unbustify smartmatching.

[19:45] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/5a7d74b68f

[19:45] <dalek> rakudo/toqast: 815a09e | jnthn++ | src/QPerl6/Actions.pm:

[19:45] <dalek> rakudo/toqast: Fix a couple of .type => .returns.

[19:45] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/815a09e697

[19:45] <dalek> rakudo/toqast: 197f1ea | jnthn++ | src/QPerl6/ (2 files):

[19:46] <dalek> rakudo/toqast: Add perl6_assert_bind_ok => p6bindassert.

[19:46] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/197f1ea0d7

[19:46] <dalek> rakudo/toqast: fe865e9 | jnthn++ | src/QPerl6/Actions.pm:

[19:46] <dalek> rakudo/toqast: Update compilation of attribute access.

[19:46] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/fe865e9e08

[19:46] <dalek> rakudo/toqast: 83c62e8 | jnthn++ | src/QPerl6/Actions.pm:

[19:46] <dalek> rakudo/toqast: A couple more small qastifications.

[19:46] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/83c62e8811

[19:46] <jnthn> Whee. Up to 11284 spectests passing again. Big things still broken: regexes, roles, BEGIN.

[19:47] <diakopter> pushed --dump

[19:47] <diakopter> ww

[19:48] <masak> ;)

[19:48] <jnthn> .oO( there I was thinking it was a comment on my dalek spam :P )

[19:51] <jnthn> Things this is teaching me about the spectest: a lot of tests use regexes :)

[19:53] <moritz> aye

[19:53] <moritz> I try to keep the number small, but it's not easy

[19:53] <moritz> though I guess it's much worse in p5 :-)

[19:54] <PerlJam> regex are one of Perl's killer features.

[19:54] <moritz> $ ack 'PAST::' src/QPerl6/|wc -l

[19:54] <moritz> 106

[19:54] <jnthn> moritz: It was an observation more than a criticism. :)

[19:55] <jnthn> I have hit the point where I really need to get regexes done to be able to clearly see the remaining issues, though :)

[19:55] <moritz> jnthn: I didn't feel critized

[19:55] <jnthn> OK :)

[19:55] <PerlJam> Is QAST documented somewhere?

[19:56] <diakopter> hey, I asked that a couple weeks ago :)

[19:56] <jnthn> Doc...what?

[19:56] <diakopter> the response I got: "read QAST::Compiler"

[19:56] * jnthn promises to document it once things have settled down :)

[19:57] <jnthn> I'd rather document something that I know actually works. Rakudo using it is kinda the test for that :)

[19:57] <PerlJam> I was just curious about some of the changes made in recent commits like how "pasttype" becomes "op" and "type" becomes "returns"

[19:57] <jnthn> type becoming returns is really a mergeback style change.

[19:57] *** cognominal_ joined
[19:58] <jnthn> PAST has returns, but it stuck a string name of a type in there.

[19:58] <PerlJam> gotcha

[19:58] <jnthn> 6model came along and added "type", because now with SCs we wanted to talk lots about types at compile time and use type objects.

[19:58] *** leprevost joined
[19:59] <jnthn> Now we can talk about types as, well, types, there's no reason to talk about them as strings.

[19:59] *** cognominal left
[19:59] <jnthn> And pmichaud++ felt "returns" was clearer than "type", and I agreed, so "returns" in QAST just expects a type object in there. :)

[20:00] <jnthn> pasttype => op is just a nice cleanup/unification.

[20:00] <jnthn> You use it all the time, and op is a 25% of the typing :)

[20:12] *** tullystyle joined
[20:13] *** tullystyle left
[20:15] *** seldon left
[20:16] <lue> loliblog! : https://rdstar.wordpress.com/2012/07/12/nqp-on-llvm-how-to-port/

[20:18] <jnthn> lue: Actually current work is replacing the thing that does the AST => PIR into something that should be much more welcoming to get to emit code for other VMs :)

[20:18] *** pupoque joined
[20:19] <lue> jnthn: I was considering waiting until QAST migration was complete to start the actual work (so I don't work with PAST and then have to migrate everything to QAST)

[20:20] *** huf joined
[20:20] <PerlJam> lue++

[20:21] <PerlJam> lue: Maybe jnthn could use some help with the QASTification  ;)

[20:22] <pmichaud> good afternoon, #perl6

[20:22] <lue> I was just thinking "Gee, it doesn't feel right to just sit and wait for QAST when I could potentially help bring it to completion" /me checkout's toqast

[20:22] <jnthn> pmichaud! :)

[20:22] <PerlJam> pmichaud: greetings

[20:23] <pmichaud> lue: for the pmcs themselves, you mainly need a way to create array, hash, and subroutine objects.

[20:23] <pmichaud> (looking at nqp on llvm)

[20:24] *** cognominal joined
[20:25] <pmichaud> and probably gotos (continuations?)

[20:25] *** not_gerd left
[20:25] <lue> according to LLVM's LangRef, it comes with functions and arrays, but not hashes (shouldn't be *too* hard to fake, though (he naïvely said))

[20:26] <pmichaud> yeah, hashes are pretty important to nqp and perl6... they get used for symbol tables of all sorts

[20:26] *** MayDaniel left
[20:27] *** cognominal_ left
[20:27] <pmichaud> it's entirely possible that with a fast enough backend, the pmc types in src/pmc could be written as 6model objects :-)

[20:28] <pmichaud> (unless jnthn++ corrects me on this point :-)

[20:28] * sjn just read that as "if things are fast enough, we can make it slower" :-P

[20:28] <jnthn> Oh, if you're building an NQP from the ground up, you most certainly do your everything 6model-y.

[20:28] *** spider-mario joined
[20:29] * lue wonders if others using LLVM would like hashes, and therefore worth having it added as a new type to LLVMIR.

[20:29] * sjn hopes he misunderstoodimated

[20:29] <jnthn> That we still use RPA and Hash is a bit unfortunate.

[20:29] <jnthn> Because it means that NQP on Parrot will look different to NQP on anything else, and that's gonna hurt.

[20:30] <sjn> jnthn btw, still waiting for your flight details :)

[20:30] <jnthn> oh yeah...my flight...

[20:30] <pmichaud> sjn: no, I'm not saying you can make it slower.  Indeed, I have many reasons to believe that a pure 6model based implementation of some of nqp's core types could be at least as fast (if not faster) than Parrot's PMC implementation of those types

[20:31] <jnthn> It can be faster in theory.

[20:31] <jnthn> PMC vtable functions are polymorphic.

[20:31] <jnthn> REPR functions are not polymorphic.

[20:32] *** fridim_ joined
[20:32] <jnthn> Well, to clarify

[20:33] <jnthn> They are if you don't know the representation of the thing you have.

[20:33] <jnthn> If you do know the representation statically, you can do rather better.

[20:33] <sjn> that helps

[20:33] <sjn> less code to run => faster

[20:34] <sjn> anhoo, not much need to spend more time explaining this to me :)

[20:34] <jnthn> To some degree, though optimizing for CPU cycle count isn't always the key these days.

[20:34] *** supernovus joined
[20:37] * lue tends to optimize for memory usage

[20:37] <sjn> jnthn: to that I'd reply "yes, give me both, please" :)

[20:37] <pmichaud> we like doing "both please" :-)

[20:37] <jnthn> Well, I was thinking of minimizing cache misses, but memory usage ties into that too. :)

[20:39] * pmichaud just notices that his build on 32-bit strawberry fails spectests, so time to find out why

[20:40] <pmichaud> I _still_ need to come up with a yapc::eu talk topic

[20:40] <pmichaud> (yes, deadline is this weekend, I know)

[20:40] <supernovus> Okay, say you have a string representing the name of a class, and you want to dynamically load that class at runtime. I thought the 'require' statement should do just that, but it does not seem to export the class.

[20:40] <supernovus> err import the class...

[20:41] <jnthn> supernovus: Can you show what you're trying?

[20:41] <jnthn> supernovus: I can guess what the issue may be but it's easier to explain with some code :)

[20:42] <supernovus> Okay, given there is a class called Foo defined in a Foo.pm6 in path in the @*INC:   my $classname = 'Foo'; require $classname; my $foo = Foo.new;

[20:43] <jnthn> Aha

[20:43] <jnthn> Yeah, the problem here is that the compiler decides if something is a class name or a routine name at compile time.

[20:43] <jnthn> And the import is at runtime

[20:43] <pmichaud> not only that, but the name is a lexical symbol.

[20:43] <jnthn> So you need to defer the lookup until runtime too

[20:43] <jnthn> Try

[20:43] <pmichaud> and you can't modify the lexpad at runtime.

[20:43] <jnthn> ::('Foo').new

[20:44] <jnthn> pmichaud: Yeah, but unless it's a lexical class you can get at it.

[20:44] <jnthn> pmichaud: Since require still does GLOBAL merging.

[20:44] *** Araq joined
[20:44] <pmichaud> jnthn: oh, probably because those things have sigils, then?

[20:45] <jnthn> ::($classname).new should also work

[20:45] <jnthn> pmichaud: "those things"?

[20:45] <supernovus> Ah! Thank you! I knew there was something I was missing. I'd done something similar to this a while back, but at that time 'require' was broken and I ended up having to use some hideous workaround (I'm thinking this was in the 'alpha' branch, so yeah, quite some time ago...)

[20:45] <pmichaud> jnthn: I'm thinking if the imported module has things to be exported... they get exported, where?

[20:45] <sorear> o/ Araq

[20:46] <Araq> hi sorear 

[20:46] <jnthn> pmichaud: require will only import things in the list of things you tell it about.

[20:46] <pmichaud> okay, and that's a compile-time list.  Got it.

[20:46] <jnthn> pmichaud: require Foo <@bar &baz>; # stubs @bar and &baz

[20:46] <jnthn> And then they are imported when you do the require.

[20:47] <pmichaud> if you don't have the list at runtime but still want to get to them, you do that by...?

[20:47] <pmichaud> s/runtime/compiletime/

[20:47] <pmichaud> ::('Foo')<@bar>   # perhaps?

[20:47] <jnthn> pmichaud: Good question. At the moment I think the answer is "you can't". I don't think there's any spec'd way.

[20:47] <jnthn> Well, if you have a

[20:48] <jnthn> module Foo;

[20:48] <jnthn> sub bar is export { }

[20:48] <jnthn> Then you can do things like

[20:48] <jnthn> require 'Foo';

[20:48] <jnthn> ::('Foo')::EXPORT::DEFAULT::<@bar>

[20:49] <pmichaud> okay.

[20:49] *** nwc10 joined
[20:49] <pmichaud> that's all I need for now :)

[20:49] <jnthn> I suspect there's a case for having some way to get require to dump all the imports somewhere for you.

[20:49] <nwc10> jnthn++ # QAST progress

[20:49] <masak> Araq: \o

[20:49] <pmichaud> S11 talks about .EXPORTALL putting things into package scope

[20:49] <jnthn> S11 talks about a lot of stuff ;)

[20:50] <pmichaud> then I suppose you could do OUR::<&bar>

[20:50] <nwc10> anyway, I read http://perl6maven.com/most-popular-shell-commands-using-perl6 and wondered when someone would be implementing Perl Power Tools on Perl 6 :-)

[20:50] <Araq> the friendliness of this channel never ceases to amaze me, masak :-)

[20:50] *** cognominal_ joined
[20:51] <masak> Araq: yeah, same.

[20:51] *** cognominal left
[20:51] <Araq> making it hard to sneak into to steal some ideas ...

[20:51] <jnthn> pmichaud: Oh, I see the bit you're sayin'

[20:51] <masak> Araq: it's almost as if we actually, genuinely care.

[20:51] <jnthn> pmichaud: Hmm. If that's gonna work, what is EXPORTALL a method on?

[20:51] <masak> :P

[20:51] <pmichaud> jnthn: oh, that's using require with a compile-time-name

[20:52] <pmichaud> require Sense;  Sense.EXPORTALL

[20:52] <jnthn> Also that. :)

[20:52] <jnthn> Well, in Rakudo just because you write a name after a use or require doesn't mena it's automatically a package name.

[20:52] <pmichaud> right

[20:53] <Araq> masak: indeed, but I can't be fooled ;-)

[20:53] <jnthn> But my question still stands: if there is an EXPORTALL method, then it has to be a method on a type object of some kind.

[20:53] <jnthn> I'd be less surprised by Sense::.EXPORTALL

[20:53] <jnthn> And for runtime

[20:53] <pmichaud> ...type object?  Doesn't it just have to be a namespace or package object?

[20:53] *** samlt left
[20:53] <jnthn> ::('Sense')::.EXPORTALL

[20:53] <pmichaud> (or are you folding those into the overall "type object" definition here?)

[20:53] <jnthn> In which case it's on the Stash

[20:53] <jnthn> pmichaud: They're all type objects.

[20:54] <pmichaud> yes, I expect EXPORTALL and stuff to be methods on stashes

[20:54] *** nwc10 left
[20:54] <pmichaud> basically whatever S11 talks about is stash stuff for the most part :)

[20:54] <jnthn> module Foo { } # Foo is a type object. The HOW behind it is pretty boring compared to classes, of course :)

[20:54] <jnthn> Right, and you get at the stash with a :: :)

[20:54] <jnthn> r: module Foo { }; say Foo.WHAT; say Foo::.WHAT

[20:54] <p6eval> rakudo 74e183: OUTPUT«Foo()␤Stash()␤»

[20:54] <pmichaud> well, a type object should delegate EXPORTALL, then

[20:55] <pmichaud> (to its stash)

[20:55] <pmichaud> and then Sense.EXPORTALL would do something sane.  I think.  

[20:55] <jnthn> We could also implement that but I'm not enthused by polluting Mu (or Any perhaps) with it.

[20:55] <jnthn> Granted it'd be constrained to only be callable on type objects.

[20:55] <pmichaud> heh

[20:56] <masak> Araq: ;)

[20:56] <pmichaud> we already have a ton of all-CAPS stuff in Mu.

[20:56] <pmichaud> seems like it fits naturally there.

[20:56] <jnthn> .OHNOES

[20:56] <jnthn> :)

[20:56] <jnthn> I guess I can live with it. :)

[20:56] <pmichaud> maybe import/export in p6 should be my yapc-eu talk.  Then I'd have to actually learn how it currently works.

[20:57] <jnthn> And hack on the scary corners that don't quite work yet...and discover the insane bits of S11 ;)

[20:57] <jnthn> I mean, uh...that's a good idea! :D

[20:57] <pmichaud> oh, I already know where the insane bits of S11 are.  Basically everything after "=head Overview"  all the way down to the last "=cut"

[20:58] <jnthn> *lol*

[20:58] <jnthn> OK, well, seems like you're set then :)

[20:59] <pmichaud> if I can't come up with better stuff before tomorrow I'll submit that

[21:00] <pmichaud> "Use'ing Perl 6 modules:  Some assembly require'd"

[21:00] <jnthn> *groan* :)

[21:00] <pmichaud> (sorry, I just need'ed to write that :-)

[21:01] <pmichaud> (and I missed all of the phaser punning earlier.)

[21:01] *** birdwindupbird left
[21:01] <lue> I wholeheartedly approve of that title.

[21:01] * masak .oO( you can always pun NEXT time... )

[21:01] <jnthn> Yes, it was a groan of delight :)

[21:01] <jnthn> masak: omg, don't START again :P

[21:01] * lue is unPREpared for this punning

[21:03] <masak> jnthn: this is the LAST time, I promise!

[21:04] * masak .oO( unless you CATCH me at it again )

[21:05] <Tene> We're really REDOing this?

[21:05] <pmichaud> it will never END

[21:05] <lue> It'll KEEP happening for as long as phasers are around.

[21:05] <masak> Tene: well, I missed the FIRST time, so...

[21:06] * masak decides to LEAVE it at that

[21:06] <jnthn> .oO( It's enough to make me go POSTal... )

[21:06] <pmichaud> and sadly, there's still no REDO phaser.  :-)

[21:06] <pmichaud> (or is there...?)

[21:06] <jnthn> Not in S04 :)

[21:07] <pmichaud> but we really do need a BLAST phaser in the spec somewhere :-P

[21:07] <lue> nope, I CHECKed.

[21:07] <supernovus> Thanks for the info. Maybe this weekend I'll whip up the first version of an easy to use MVC web app framework in Perl 6.

[21:07] <jnthn> supernovus++

[21:08] *** supernovus left
[21:10] *** skids left
[21:11] <tadzik> hahahahahahaha

[21:11] <tadzik> http://www.pub-przejscie.pl/wp-content/gallery/live-sing-quotzablysnijquot/dsc_0145.jpg -- this is how Warsaw.pm spends its meetings :D

[21:11] <tadzik> apparently, I agreed for the pub owners to publish pictures from the karaoke session...

[21:12] <pmichaud> tadzik: you look a little green up there :-)

[21:13] <masak> :P

[21:13] <tadzik> hehe, for some reason, yeah

[21:13] <tadzik> curious

[21:13] <masak> phenny: en pl "I am a little green at this."?

[21:13] <phenny> masak: "Jestemtrochę zielony w tym." (en to pl, translate.google.com)

[21:13] <masak> oh, literal translation.

[21:13] <tadzik> yeah, but it works

[21:13] <tadzik> "być zielonym" also means "to be an amateur"

[21:14] <masak> ah, so you were aware of the pun. I wasn't sure. :)

[21:14] <masak> anyway, the picture is inspiring.

[21:14] <tadzik> HEAR ME ROAR

[21:14] <pmichaud> r:  say 1**Inf

[21:14] <p6eval> rakudo 74e183: OUTPUT«1␤»

[21:14] <jnthn> Yeah, I totally think we should have a karaoke session at YAPC::EU!

[21:14] <jnthn> :P

[21:15] <tadzik> oh yes!

[21:15] <tadzik> Lightning Song session

[21:15] <jnthn> .oO( oh my, what have I done... )

[21:15] <tadzik> why, you're the first one to sing

[21:15] <masak> it's not a bad idea.

[21:15] <tadzik> I thought you know

[21:15] * jnthn can't sing :P

[21:15] * masak can :)

[21:15] <jnthn> masak volunteered to go first :)

[21:15] * tadzik can sing, but not anyone can listen to this

[21:16] <masak> though I hear 卡拉OK doesn't require the ability to sing well.

[21:16] *** Araq left
[21:17] <jnthn> tadzik: Just sing nayn cat song :)

[21:17] <tadzik> :D

[21:17] <tadzik> I could possibly play that one

[21:17] <tadzik> no, I can sing quite a few things

[21:17] <tadzik> see http://github.com/tadzik/tabs

[21:18] <tadzik> it's just that not everyone is resistent to my singing :P

[21:19] <masak> I think your voice has potential, tadzik.

[21:20] <tadzik> I may need some voice-fu

[21:20] *** sftp left
[21:21] <masak> then it's not 卡拉OK :)

[21:21] <pmichaud> I get quite a few interesting spectest fails when compiling with Strawberry 5.16

[21:21] <jnthn> Is that first character meaning "dancing with tongue stuck out"?

[21:22] <jnthn> pmichaud: Which ones, ooc?

[21:23] <pmichaud> r:  say 1**Inf

[21:23] <p6eval> rakudo 74e183: OUTPUT«1␤»

[21:23] <pmichaud> that gives me NaN

[21:23] <jnthn> > say 1 ** Inf

[21:23] <jnthn> 1

[21:23] <pmichaud> (because that's what the underlying math library does, undoubtedly, and Parrot just passes it through)

[21:23] <pmichaud> n:  say 1**Inf

[21:23] <p6eval> niecza v19-13-g442e075: OUTPUT«NaN␤»

[21:23] *** sftp joined
[21:24] <tadzik> phenny: "卡拉"?

[21:24] <phenny> tadzik: "Carla" (zh-CN to en, translate.google.com)

[21:24] <jnthn> phenny: "卡"?

[21:24] <phenny> jnthn: "Card" (zh-CN to en, translate.google.com)

[21:24] <jnthn> phenny: "拉"?

[21:24] <phenny> jnthn: "Pull" (zh-CN to en, translate.google.com)

[21:24] <sorear> phenny: "Jacques"?

[21:24] <phenny> sorear: "Jacques" (fr to en, translate.google.com)

[21:24] <pmichaud> jnthn: there are also some filestate-related fails, and a couple of unicode fails

[21:25] <jnthn> pmichaud: I don't think the file related ones are gcc specific

[21:25] <jnthn> pmichaud: I get some of that at the moment with MSVC too

[21:25] <pmichaud> jnthn: okay.

[21:25] <jnthn> Unicode fails - I thought we'd triage'd all that.

[21:26] <pmichaud> well, it may be from the version.t stuff I added yesterday

[21:27] <masak> tadzik: ka-la-O-K

[21:27] <masak> karaoke.

[21:28] <masak> phenny: "卡拉OK"?

[21:28] <phenny> masak: "Kara OK" (zh-CN to en, translate.google.com)

[21:28] <jnthn> daaligt :)

[21:28] <pmichaud> r:   say Version.new('2012.06alpha1beta4');   # :-P

[21:28] <p6eval> rakudo 74e183: OUTPUT«v2012.6.alpha.1.beta.4␤»

[21:28] * masak .oO( Kära Åke... )

[21:28] <masak> jnthn: no, that's what it's called in .cn

[21:29] <jnthn> masak: I guessed. :)

[21:30] *** cognominal_ left
[21:30] *** cognominal_ joined
[21:31] <tadzik> haha

[21:31] <masak> 哈哈

[21:33] <crab2313> phenny: "哈哈"?

[21:33] <phenny> crab2313: "I" (zh-CN to en, translate.google.com)

[21:34] <crab2313> phenny: "呵呵"?

[21:34] <phenny> crab2313: "I" (zh-CN to en, translate.google.com)

[21:37] <masak> strange translations. those mean "ha ha" and "he he", respectively.

[21:39] *** cognominal_ left
[21:40] *** cognominal_ joined
[21:45] *** vmspb left
[21:45] *** Coleoid joined
[21:48] <diakopter> masak: Coleoid was inquiring about roast commit bit

[21:50] <pmichaud> whats the github id ?

[21:51] <Coleoid> My github username is also Coleoid, is that what you're asking?

[21:51] <pmichaud> yes.

[21:52] <pmichaud> you now have a commit bit to roast, as well as most of the other perl6/* repositories

[21:52] <pmichaud> welcome aboard!

[21:52] *** Woodi left
[21:53] <Coleoid> Thanks!

[21:54] <pmichaud> did you see the latest notes on building with strawberry, ooc?

[21:54] <pmichaud> we may want to bump Rakudo's NQP_REVISION

[21:55] <pmichaud> on my systems,    perl Configure.pl --gen-nqp=master --gen-parrot   now works

[21:55] <pmichaud> (the --gen-nqp option won't be necessary when we bump NQP_REVISION)

[21:55] <pmichaud> afk, fetching dinner

[21:56] <Coleoid> So then changes to the tests go in roast, not mu or any other location?

[21:56] <masak> right.

[21:57] <Coleoid> I missed the strawberry fixing.  I was afraid it'd be a slow loop through the dyncall project dev process...

[21:57] *** stephenlb left
[22:01] *** stephenlb joined
[22:07] *** fridim_ left
[22:07] *** fridim_ joined
[22:13] <pmichaud> Coleoid: the README file in roast is fairly helpful.  :)   https://github.com/perl6/roast/blob/master/README

[22:13] *** nodmonkey left
[22:14] <benabik> Coleoid: People here seem rather unafraid of working out their own fixes and waiting to see if dyncall wants to pick up the fix.

[22:23] <masak> lol I blougged! \o/ http://strangelyconsistent.org/blog/july-12-2012-platform-things

[22:25] <gfldex> masak++ # for applied magic

[22:26] <masak> I feel I'm warming to this month's blogging.

[22:26] <masak> oh, and #perl6. you'll really like this: https://en.wikipedia.org/wiki/Paraprosdokian

[22:26] <jnthn> jnthn suggested WAT? :P

[22:27] * masak .oO( so I put a surprised jnthn in your surprised jnthn )

[22:28] * jnthn is, as usual, full of surprises :P

[22:28] <masak> knowing this new term "paraprosdokian", it's really easy to re-classify moritz++' "and 9 other types" as a paraprosdokian autopun.

[22:28] <Coleoid> I got a laugh out of it--and out of explaining it to my boy.

[22:28] *** pupoque left
[22:28] <diakopter> can you have a car full of water?

[22:28] <jnthn> I can sea how that'd happen.

[22:28] <masak> diakopter: hm, I will try.

[22:29] <pmichaud> masak++ #  this method of posting and linking to commits is incredibly effective.

[22:29] <diakopter> masak: typo piedestal 

[22:30] <masak> diakopter: will fix; thanks.

[22:30] <masak> diakopter: yes, I could put water from the helmet into the car in last year's game.

[22:30] <masak> The car contains: A rope. Some water.

[22:30] <masak> (but with newlines and indentation)

[22:31] <Coleoid> benabik:  That's dandy for progress!  I hope they take the fix.

[22:31] <Coleoid> afk, spend time with the boy before bedtime...

[22:35] *** bluescreen100 joined
[22:35] *** crab2313 left
[22:36] <masak> 'night, #perl6

[22:38] *** bluescreen100 left
[22:38] *** bluescreen10 left
[22:50] *** PacoAir left
[22:51] *** cognominal__ joined
[22:54] *** cognominal_ left
[22:56] *** spider-mario left
[23:02] *** lue left
[23:09] *** bruges joined
[23:11] *** pyrimidine left
[23:11] *** FireFly left
[23:12] *** dukeleto left
[23:12] *** smash left
[23:13] *** fridim_ left
[23:13] *** bruges_ left
[23:13] *** pochi joined
[23:13] *** smash joined
[23:16] *** FireFly joined
[23:16] *** lue joined
[23:16] *** FireFly left
[23:16] *** FireFly joined
[23:17] *** pyrimidine joined
[23:22] *** fgomez joined
[23:22] *** fgomez left
[23:22] *** fgomez joined
[23:31] *** thou left
[23:40] *** jevin left
[23:41] *** tokuhiro_ joined
[23:44] *** jevin joined
[23:46] <colomon> Coleoid++

