[00:06] *** tarch left
[00:13] *** ksi left
[00:16] *** icwiener left
[00:24] <flussence> nom: subset Even of Int where * %% 2; multi MAIN(Even $) { ... } # doesn't work locally...

[00:24] <p6eval> nom a39d86: OUTPUT«use of uninitialized value of type Even in string context␤Usage:␤  --setting=SAFE <Int> ␤»

[00:24] <flussence> # well, it does, but it complains

[00:33] <skids> .oO(through some strange quantum entanglement, jnthn++ keeps fixing things about two weeks after I try to use them.)

[00:33] <[Coke]> skids: KEEP TRYING THINGS!

[00:34] <skids> :-)

[00:41] <colomon> o/

[00:42] *** dorlamm left
[00:43] <[Coke]> ho, colomon.

[00:43] <colomon> [Coke], my friend.

[00:43] <colomon> I added 20 tests to set.t while sitting at the tire store today.

[00:43] <colomon> haven't pushed yet because I figure I'll add some more tonight.

[00:49] <sorear> colomon: more pushes more karma

[00:49] <colomon> sorear!

[00:51] <colomon> after your ops patch, niecza spectests clean except for that one Unicode test that's been failing

[00:53] <colomon> oooo, they're making pan fried dumplings on Triple D!

[00:54] <[Coke]> hee!

[00:55] <sorear> colomon: yay

[00:56] <colomon> I've been making my own for a decade and a half now, but it's nice to see how a pro does it.

[00:58] *** packetknife left
[01:03] *** slavik left
[01:14] *** yertalert joined
[01:18] *** slavik joined
[01:18] <TimToady> sigh, I'm trying to do some "production code", and nom keeps giving me strange errors without any line numbers

[01:18] <TimToady> Cannot assign to a non-container

[01:19] <skids> means it was't a scalar, and didn't have ST

[01:19] <skids> STORE

[01:20] *** wolfman2000 left
[01:20] *** ggoebel left
[01:20] <TimToady> my program runs several minutes, and has many assignments, and likely executes many more assignments buried down in CORE; it's just be nice to know which of those assignments is failing...

[01:22] <sorear> no backtrace !?

[01:23] <TimToady> nope

[01:24] <TimToady> I'd try niecza on it, but I need Date

[01:25] <colomon> if only someone had Date running on niecza... (kicks [Coke] under the table)

[01:25] <skids> Hmm.  Seeing that I'm an expert on causing that particular error message, it has always has a line number for me.

[01:25] *** ggoebel joined
[01:26] *** yertalert left
[01:30] *** mikemol left
[01:33] <colomon> niecza: my $s = 10; my $s; say $s

[01:33] <p6eval> niecza v14-34-g1b3d1e8: OUTPUT«Potential difficulties:␤  Useless redeclaration of variable $s (see line 1) at /tmp/cLqwUUbtrE line 1:␤------> my $s = 10; my $s⏏; say $s␤␤10␤»

[01:34] *** am0c joined
[01:42] *** mikemol joined
[01:50] <TimToady> niecza: multi infix:<+>(Str $x, Str $y) { "$x + $y" }; say 1 + 1

[01:50] <p6eval> niecza v14-34-g1b3d1e8: OUTPUT«Unhandled exception: No candidates for dispatch to &infix:<+>; candidates are:␤    Str, Str␤  at /tmp/9YFkKKhkws line 1 (mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3751 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3752 (mod…

[01:51] <TimToady> sorear: ^^ same problem nom had; needs the CORE's proto to govern

[01:51] <colomon> TimToady: I don't think infix:<+> is a multi in niecza.

[01:52] <geekosaur> shouldn't it complain when it sees "multi infix:<+>" then?

[01:52] <TimToady> no, it just shadows the outer one, and defines a new implicit proto

[02:00] *** bluescreen10 left
[02:04] <dalek> niecza: 1a0d0a8 | (Solomon Foster)++ | lib/CORE.setting:

[02:04] <dalek> niecza: Update Set.new, fix Set.pick, Set.roll, Key.pick, KeySet.roll.

[02:04] <dalek> niecza: review: https://github.com/sorear/niecza/commit/1a0d0a8e86

[02:05] <dalek> roast: a35fbd5 | (Solomon Foster)++ | S02-types/set.t:

[02:05] <dalek> roast: 51 additional tests inspired by bag.t.

[02:05] <dalek> roast: review: https://github.com/perl6/roast/commit/a35fbd5454

[02:14] <geekosaur> hm, right, keep forgetting the setting is an outer scope to the "outermost" scope

[02:16] *** bluescreen10 joined
[02:30] *** _jaldhar_ joined
[02:47] *** yertalert joined
[03:01] *** Exodist left
[03:12] *** wolfman2000 joined
[03:16] <dalek> niecza: 8b82f01 | (Solomon Foster)++ | lib/CORE.setting:

[03:16] <dalek> niecza: Update KeySet.new, fix KeySet.Str, KeySet.gist, and KeySet.perl.

[03:16] <dalek> niecza: review: https://github.com/sorear/niecza/commit/8b82f01f90

[03:17] <dalek> roast: 9da8a25 | (Solomon Foster)++ | S02-types/keyset.t:

[03:17] <dalek> roast: 59 additional tests ported over from set.t.

[03:17] <dalek> roast: review: https://github.com/perl6/roast/commit/9da8a25e98

[03:22] <cognominal_> nom:  say [1].map: { "{$_.WHAT}" }

[03:22] <p6eval> nom a39d86: OUTPUT«use of uninitialized value of type Int in string context␤␤»

[03:22] <colomon> niecza: say 1

[03:22] <p6eval> niecza v14-36-g1a0d0a8: OUTPUT«1␤»

[03:23] <cognominal_> nom:  say [1].map: { $_.WHAT  }

[03:23] <p6eval> nom a39d86: OUTPUT«use of uninitialized value of type Int in string context␤␤»

[03:24] * colomon needs to learn how to get p6eval to rebuild

[03:26] *** whiteknight left
[03:28] <TimToady> evalbot rebuild niecza

[03:28] <p6eval> OK (started asynchronously)

[03:28] <colomon> TimToady++

[03:29] <colomon> so, I just tried using your operators with a KeySet, and it doesn't quite work

[03:29] <dalek> Rebuild of niecza complete.

[03:29] <colomon> sweet!

[03:29] <colomon> niecza: say "b" ∈ KeySet.new(<a b c>)

[03:29] <p6eval> niecza v14-37-g8b82f01: OUTPUT«Unhandled exception: Ambiguous dispatch for &to-set; matched candidates are:␤    Any␤    Any␤  at /home/p6eval/niecza/lib/CORE.setting line 2008 (Set.postcircumfix:<( )> @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2036 (infix:<∈> @ 3) ␤  at /tmp/Y…

[03:30] <colomon> If I comment out multi to-set ($elem --> Set) it works

[03:32] <colomon> apparently niecza can't decide between to-set(%elems) and to-set($elem), given a KeySet

[03:39] *** orafu left
[03:39] *** orafu joined
[03:57] <dalek> niecza: ac280b0 | (Solomon Foster)++ | lib/CORE.setting:

[03:57] <dalek> niecza: Add explicit to-set multis for KeySet, Bag, and KeyBag, allowing you to use the special Set operators with those types.

[03:57] <dalek> niecza: review: https://github.com/sorear/niecza/commit/ac280b0051

[03:58] <colomon> evalbot rebuild niecza

[03:58] <p6eval> OK (started asynchronously)

[03:59] <dalek> Rebuild of niecza complete.

[03:59] <colomon> niecza: say "b" ∈ KeySet.new(<a b c>)

[03:59] <p6eval> niecza v14-38-gac280b0: OUTPUT«True␤»

[03:59] <colomon> \o/

[04:00] <TimToady> yayness

[04:00] <colomon> I reckon if no one beats me to it, I'll start writing set operator tests over the weekend.  :)

[04:00] <colomon> bedtime now.

[04:01] <TimToady> night

[04:04] *** fasad left
[04:23] *** Su-Shee_ joined
[04:27] *** Su-Shee left
[04:34] *** PacoAir left
[04:38] *** PacoAir joined
[04:38] *** PacoAir left
[04:44] *** Tedd1 left
[04:45] *** Chillance left
[04:45] *** pochi left
[04:51] *** lestrrat left
[04:53] *** lestrrat joined
[05:00] *** retupmoca joined
[05:09] *** araujo left
[05:44] <moritz> o/

[05:51] *** fasad joined
[06:03] <sorear> /o

[06:05] <TimToady> ø

[06:15] <dalek> roast: 3eb0231 | moritz++ | S12-class/attributes.t:

[06:15] <dalek> roast: rakudo unfudge

[06:15] <dalek> roast: review: https://github.com/perl6/roast/commit/3eb02314bc

[06:18] *** aindilis joined
[06:35] *** Trashlord joined
[06:45] *** lestrrat left
[06:46] *** lestrrat joined
[06:48] *** takesako left
[06:49] *** kaare_ joined
[06:54] *** takesako joined
[07:03] *** Trashlord left
[07:05] *** Bucciarati joined
[07:12] *** bkolera left
[07:14] <dalek> roast: 6763664 | moritz++ | S32-exceptions/misc.t:

[07:14] <dalek> roast: fix test for X::Attribute::Undeclared

[07:14] <dalek> roast: review: https://github.com/perl6/roast/commit/6763664024

[07:19] *** lestrrat left
[07:19] *** lestrrat joined
[07:23] *** yertalert left
[07:24] *** am0c left
[07:25] *** bkolera joined
[07:31] *** Trashlord joined
[07:40] <moritz> nom: .say for item 1, 2, 3

[07:40] <p6eval> nom a39d86: OUTPUT«1 2 3␤»

[07:40] <dalek> roast: 5f45cb4 | moritz++ | S (4 files):

[07:40] <dalek> roast: more rakudo unfudges

[07:40] <dalek> roast: review: https://github.com/perl6/roast/commit/5f45cb4cb7

[07:43] *** araujo joined
[07:43] *** araujo left
[07:43] *** araujo joined
[07:48] <moritz> niecza: say item(<a b c>.list).WHAT

[07:48] <p6eval> niecza v14-38-gac280b0: OUTPUT«List()␤»

[07:49] *** noam_ left
[07:49] *** noam_ joined
[07:50] <moritz> nom: sub i($x) { $x }; for i(<a b c>) {.say}

[07:50] <p6eval> nom a39d86: OUTPUT«a b c␤»

[07:52] *** noam_ left
[07:53] <sorear> pushing onto TODO stack: handles, lazy constant @foo

[07:54] *** y3llow_ joined
[07:55] <dalek> rakudo/nom: 8080589 | moritz++ | src/core/Exceptions.pm:

[07:55] <dalek> rakudo/nom: fix exception type thinko

[07:55] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8080589238

[07:56] *** y3llow left
[07:56] *** REPLeffect left
[07:56] *** y3llow_ is now known as y3llow

[07:56] *** birdwindupbird joined
[07:57] *** REPLeffect joined
[08:08] <dalek> rakudo/nom: 20cae50 | moritz++ | src/core/Any.pm:

[08:08] <dalek> rakudo/nom: make &item a tiny bit more correct

[08:08] <dalek> rakudo/nom: 

[08:08] <dalek> rakudo/nom: the slurpy case still changes the type to Array, which is wrong.

[08:08] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/20cae50d48

[08:09] <dalek> roast: 5c0802d | moritz++ | S (2 files):

[08:09] <dalek> roast: more exception tests

[08:09] <dalek> roast: review: https://github.com/perl6/roast/commit/5c0802db67

[08:09] <dalek> roast: c59b775 | moritz++ | S03-operators/context.t:

[08:09] <dalek> roast: rakudo unfudge/refudge of context.t

[08:09] <dalek> roast: review: https://github.com/perl6/roast/commit/c59b77554e

[08:12] <dalek> roast: bdc62b4 | moritz++ | S29-any/isa.t:

[08:12] <dalek> roast: remove dubious tests

[08:12] <dalek> roast: review: https://github.com/perl6/roast/commit/bdc62b4951

[08:17] *** _jfried joined
[08:18] <moritz> phenny: ask TimToady if hash zen slices return the whole hash or just the values. S02:3954 says "entire hash", S09:636 seems to imply that only the values are returned (though that S09 thing is a bit weird too, it {}-indexes an array)

[08:18] <phenny> moritz: I'll pass that on when TimToady is around.

[08:19] *** xinming_ joined
[08:19] <dalek> roast: 4015e8c | moritz++ | S02-literals/hash-interpolation.t:

[08:19] <dalek> roast: get rid of hash ordering assumption in interpolation test

[08:19] <dalek> roast: review: https://github.com/perl6/roast/commit/4015e8ccfb

[08:21] *** jfried left
[08:21] *** xinming left
[08:21] *** gfldex left
[08:21] *** overrosy left
[08:21] *** gfldex joined
[08:21] *** overrosy joined
[08:29] *** overrosy_ joined
[08:29] *** zamolxes_ left
[08:29] *** overrosy left
[08:29] *** y3llow left
[08:29] *** y3llow_ joined
[08:30] *** zamolxes joined
[08:30] *** y3llow_ is now known as y3llow

[08:31] *** betterwo1ld left
[08:31] *** betterworld joined
[08:35] *** rsimoes2 is now known as rsimoes

[08:35] <dalek> roast: cdfdee6 | moritz++ | S32-list/ (2 files):

[08:35] <dalek> roast: remove dubious tests (.pick and .roll on junctions)

[08:35] <dalek> roast: review: https://github.com/perl6/roast/commit/cdfdee6db0

[08:35] <dalek> roast: 34d6705 | moritz++ | integration/99problems-21-to-30.t:

[08:35] <dalek> roast: layout; remove superstitious use of parens

[08:35] <dalek> roast: review: https://github.com/perl6/roast/commit/34d670592f

[08:36] *** GlitchMr joined
[08:39] *** jrockway_ joined
[08:40] *** jlaire left
[08:40] *** jrockway left
[08:42] *** birdwindupbird left
[08:45] *** jlaire joined
[08:46] *** REPLeffect left
[08:48] *** birdwindupbird joined
[08:49] *** REPLeffect joined
[08:56] *** sftp_ left
[08:57] *** sftp_ joined
[09:10] *** birdwindupbird left
[09:11] *** Trashlord left
[09:16] *** Tedd1 joined
[09:18] *** _jfried is now known as jfried

[09:22] *** Trashlord joined
[09:29] *** ab5tract joined
[09:39] *** travis-ci joined
[09:39] <travis-ci> [travis-ci] parrot/parrot#57 (master - 4c49a78 : Jonathan "Duke" Leto): The build passed.

[09:39] <travis-ci> [travis-ci] Change view : https://github.com/parrot/parrot/compare/1b91854...4c49a78

[09:39] <travis-ci> [travis-ci] Build details : http://travis-ci.org/parrot/parrot/builds/661068

[09:39] *** travis-ci left
[09:40] <moritz> dukeleto: do we really need parrot CI reports in #perl6?

[09:42] <dukeleto> i can remove it

[09:43] <dukeleto> moritz: would you prefer only failures?

[09:43] <dukeleto> moritz: or nothing?

[09:43] <moritz> dukeleto: I'd prefer no parrot reports in #perl6

[09:44] <moritz> dukeleto: when you set up rakudo CI, I'm happy to have the reports in here

[09:44] <dukeleto> moritz: ok

[09:44] <moritz> dukeleto++

[09:45] <dukeleto> moritz: i just removed #perl6 from the .travis.yml

[09:47] <dalek> rakudo/nom: 1733c1f | moritz++ | src/ (2 files):

[09:47] <dalek> rakudo/nom: typed exceptions for errors from has_self branch

[09:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1733c1f1e3

[09:47] <dalek> roast: 478ed38 | moritz++ | S32-exceptions/misc.t:

[09:47] <dalek> roast: more tests for availabilty-of-self related errors

[09:47] <dalek> roast: review: https://github.com/perl6/roast/commit/478ed38dff

[09:58] *** noam joined
[10:02] *** serg211 joined
[10:02] *** serg211 left
[10:04] *** travis-ci joined
[10:04] <travis-ci> [travis-ci] parrot/parrot#58 (master - ae4bf3d : Jonathan "Duke" Leto): The build passed.

[10:04] <travis-ci> [travis-ci] Change view : https://github.com/parrot/parrot/compare/4c49a78...ae4bf3d

[10:04] <travis-ci> [travis-ci] Build details : http://travis-ci.org/parrot/parrot/builds/661181

[10:04] *** travis-ci left
[10:06] *** mj41_nb joined
[10:07] <sorear> dukeleto: um?

[10:11] <dalek> roast: 3551795 | moritz++ | S14-roles/basic.t:

[10:11] <dalek> roast: remove dubious test

[10:11] <dalek> roast: review: https://github.com/perl6/roast/commit/355179544f

[10:21] *** xinming_ left
[10:23] *** fasad is now known as sisar

[10:23] *** xinming joined
[10:33] *** sisar left
[10:33] *** unobe left
[10:40] *** snearch joined
[10:44] <jnthn> moritz: ping

[10:45] <jnthn> phenny: tell moritz it seems that things like https://gist.github.com/1798689 get no backtrace or indication of line number. If subs are used they do, but if there's no routines in there then nothing.

[10:45] <phenny> jnthn: I'll pass that on when moritz is around.

[10:47] <sorear> o/ jnthn

[10:47] <jnthn> o/ sorear 

[10:47] <sorear> mmm, probably what TimToady++ was seeing

[10:48] <jnthn> sorear: Yes, saw it while scanning backlog and wanted to hunt it down.

[10:52] *** benabik left
[10:52] *** benabik joined
[10:53] <moritz> jnthn: yes, I noticed; that was the result from experimenting with different backtrace modes

[10:53] <phenny> moritz: 10:45Z <jnthn> tell moritz it seems that things like https://gist.github.com/1798689 get no backtrace or indication of line number. If subs are used they do, but if there's no routines in there then nothing.

[10:53] <moritz> jnthn: I guess I'll revert that part

[10:55] <jnthn> moritz: Yeah. I think we need something slightly smarter (more)

[10:56] <moritz> one problem is that even if I dump $!.backtrace.full, there are cases where the calling location of the error doesn't appear anywhere

[10:56] <jnthn> When inside a nested block within a sub, it'd be nice to show the current line number you're at *inside* the sub (even if within, say, an if statement's block) along wiht the sub's name. But eliminating non-routines isn't enough either - we need to consider closures etc.

[10:57] <jnthn> One way to detect that is by looking one frame down, and seeing if the code object there is the outer of the current code object.

[10:58] <jnthn> moritz: (location doesn't appear anywhere) I'd be interested to see/look at such cases.

[10:58] <jnthn> In this one, though, --ll-exception contains all the info, so it seems it is there.

[11:01] *** MayDaniel joined
[11:07] *** birdwindupbird joined
[11:14] <moritz> jnthn: if I come across such a case again, I'll make a gist

[11:14] <moritz> jnthn: note that it's not so easy with inner blocks

[11:14] <moritz> for example

[11:14] <moritz> sub foo { for 1..3 { die $_ } }

[11:15] <moritz> there the block has a call chain of depth ~10 before it hits the outer sub

[11:15] <tadzik> good morning

[11:15] <tadzik> (I hope you have one :))

[11:15] <moritz> we should really walk the outer chain right away to find the next enclosing sub

[11:15] <moritz> good morning tadzik

[11:19] *** tokuhirom joined
[11:24] <moritz> nom: say Block.^methods

[11:24] <p6eval> nom 1733c1: OUTPUT«Method 'gist' not found for invocant of class 'Sub'␤␤»

[11:25] <moritz> nom: my @b := Block.^methods

[11:25] <p6eval> nom 1733c1:  ( no output )

[11:25] <moritz> nom: my @b := Block.^methods; for ^(+@b) { try say @b[$_] }

[11:25] <p6eval> nom 1733c1: OUTPUT«arity␤count␤signature␤of␤returns␤ACCEPTS␤Str␤»

[11:26] <moritz> nom: my @b := Block.^methods; for ^(+@b) {  say @b[$_] }

[11:26] <p6eval> nom 1733c1: OUTPUT«Method 'gist' not found for invocant of class 'Sub'␤␤»

[11:26] <moritz> nom: my @b := Block.^methods; for ^(+@b) {  say ~@b[$_] }

[11:26] <p6eval> nom 1733c1: OUTPUT«(signal SEGV)»

[11:26] <moritz> wow.

[11:26] <moritz> jnthn: can I walk the outer chain in Perl 6? if so, how?

[11:30] <jnthn> moritz: That SEGV is ticketed already...

[11:30] <jnthn> moritz: You...probably can though it's a bit magical

[11:31] <jnthn> moritz: Maybe I should give Code a get_outer method or something.

[11:31] <jnthn> Or just .outer

[11:32] <moritz> .outer would be great to have

[11:34] *** Chillance joined
[11:34] <moritz> jnthn: https://gist.github.com/1798902

[11:35] <jnthn> moritz: https://gist.github.com/1798905

[11:36] <jnthn> in block <anon> at foo.pl:4

[11:36] <jnthn> ...hmm. That's off-by-one.

[11:39] <jnthn> moritz: oh, no, it's more involved than that.

[11:41] <moritz> jnthn: which part is more involved?

[11:44] <jnthn> moritz: The thingy you gisted me with the wrong line number reporting

[11:44] <jnthn> moritz: The 4 is actually the location inside the CATCH block

[11:44] <moritz> yes, I though so

[11:45] <jnthn> The annotations show up in the right places in the compiled output.

[11:45] <moritz> the original example had a statement between the die and the CATCH

[11:46] <moritz> jnthn: the p6ification of the backtrace has 'next'

[11:46] <moritz> two actually

[11:46] <moritz> next if pir::isnull($bt[$_]<sub>);

[11:46] <moritz> next unless $line && $file;

[11:47] *** Su-Shee_ is now known as Su-Shee

[11:48] <moritz> maybe some of the annotations don't survive, and then that code filters out the whole frame

[11:49] <jnthn> Ah, I think I can guess what's going on.

[11:50] *** mj41_nb left
[11:51] <jnthn> We don't unwind frames when entering an exception handler, but we do end up back in the block which has the CATCH. It executes a couple of instructions back in that block in order to enter the CATCH block, but in doing so shifts its PC, which means that when we come to build the backtrace for that frame, the location has shifted.

[11:54] <moritz> afk

[11:56] <Su-Shee> juddididai. good morning everyone. 

[11:57] *** whiteknight joined
[11:59] <jnthn> morning, Su-Shee 

[12:02] *** isBEKaml joined
[12:03] <isBEKaml> lag--

[12:03] <isBEKaml> hola, #perl6!

[12:07] <isBEKaml> since when was ^methods behaviour changed? complete with signatures, that's nice. 

[12:07] <jnthn> isBEKaml: Forget exactly, but fairly recently

[12:08] <jnthn> Like, within the last month or so

[12:09] <isBEKaml> jnthn: is there any way I can get the full listing in a private msg window to p6eval? What do I have to do if I just wanted method names?

[12:10] <isBEKaml> I tried :local, that gave method signatures too, albeit local ones.. 

[12:12] <isBEKaml> jnthn: Ah, gist. Nvm. :)

[12:13] *** xinming left
[12:20] *** isBEKaml left
[12:20] *** isBEKaml joined
[12:25] <jnthn> isBEKaml: What exactly are you doing?

[12:25] <jnthn> nom: say Int.^methods>>.name

[12:25] <p6eval> nom 1733c1: OUTPUT«Int Num Rat abs Bridge chr succ pred sqrt base floor round ceiling WHICH perl Bool Str Rat abs sign conj sqrt sin asin cos acos tan atan atan2 sec asec cosec acosec cotan acotan sinh asinh cosh acosh tanh atanh sech asech cosech acosech cotanh acotanh floor ceiling ro…

[12:26] <isBEKaml> nom: Int.^methods.gist.say

[12:26] <p6eval> nom 1733c1: OUTPUT«Int Num Rat abs Bridge chr succ pred sqrt base floor round ceiling WHICH perl Bool Str Rat abs sign conj sqrt sin asin cos acos tan atan atan2 sec asec cosec acosec cotan acotan sinh asinh cosh acosh tanh atanh sech asech cosech acosech cotanh acotanh floor ceiling ro…

[12:26] <isBEKaml> jnthn: same thing

[12:26] <jnthn> OK, that just gives you method names...

[12:26] <jnthn> I think I missed your question somehow :)

[12:27] *** snearch left
[12:27] <isBEKaml> jnthn: yes, what I wanted was a listing of all methods and signatures in a _private_ p6eval window? I guess p6eval has no way of second guessing if that's a private instance or something. Stupid question, anyway. :)

[12:28] <jnthn> isBEKaml: /msg p6eval nom: ...

[12:29] <isBEKaml> jnthn: yes, and I'm already in a separate window - but that wasn't my question... 

[12:30] <jnthn> OK. I clearly didn't drink enough coffee yet today :)

[12:30] *** bkolera left
[12:31] <isBEKaml> jnthn: :) # Hacking coffee!

[12:31] <isBEKaml> hmm, <XX> ** <YY> is deprecated in grammar rules? 

[12:31] <jnthn> isBEKaml: Yes; the latest Star release still supports it, but we also support the new syntax.

[12:32] <jnthn> It's now done with % on a quantifier

[12:32] <jnthn> <XX>+ % <YY> # means at least one of XX, separated by YY

[12:32] <isBEKaml> jnthn: I was just trying to precompile a module with niecza. It promptly shot it down. :)

[12:33] <isBEKaml> jnthn: Yes, I'll try that

[12:36] <isBEKaml> niecza: grammar Foo { regex blah { <yate> % <bates> }; };

[12:36] <p6eval> niecza v14-38-gac280b0: OUTPUT«===SORRY!===␤␤Unrecognized regex metacharacter % (must be quoted to match literally) at /tmp/50nNnRLwhw line 1:␤------> grammar Foo { regex blah { <yate> %⏏ <bates> }; };␤␤Unable to parse regex; couldn't find right brac…

[12:36] <isBEKaml> niecza: grammar Foo { regex blah { <yate>+ % <bates> }; };

[12:36] <p6eval> niecza v14-38-gac280b0:  ( no output )

[12:36] <isBEKaml> niecza: grammar Foo { regex blah { <yate> ** <bates> }; };

[12:36] <p6eval> niecza v14-38-gac280b0: OUTPUT«Potential difficulties:␤  Unsupported use of atom ** <bates> as separator; nowadays please use atom+ % <bates> at /tmp/SBcbW2rzPa line 1:␤------> mar Foo { regex blah { <yate> ** <bates>⏏ }; };␤␤»

[12:37] <isBEKaml> hmm, niecza doesn't support %, but <X>+ % <Y> ?

[12:38] <jnthn> isBEKaml: Niecza is right here, I think - % isn't used on its own, but as a modified on another quantifier.

[12:40] <isBEKaml> jnthn: Okay, I see

[12:41] <jnthn> Pretty sure that's how I implemented it in Rakudo too...

[12:41] <jnthn> nom: grammar Foo { regex blah { <yate> % <bates> }; }

[12:41] <p6eval> nom 1733c1: OUTPUT«===SORRY!===␤Malformed regex at line 1, near "blah { <ya"␤»

[12:42] <jnthn> nom: grammar Foo { regex blah { <yate>+ % <bates> }; }

[12:42] <p6eval> nom 1733c1:  ( no output )

[12:42] <jnthn> *nod*

[12:44] <isBEKaml> phenny: ask sorear if he can have a look at this?  https://gist.github.com/1799248. I got that when I tried to precompile a module with niecza -C. 

[12:44] <phenny> isBEKaml: I'll pass that on when sorear is around.

[12:45] <isBEKaml> jnthn++

[12:52] <isBEKaml> phenny: ignore my last message. I didn't read the error message at all. :/

[12:52] <isBEKaml> phenny: tell sorear to ignore my last message. I didn't read the error message at all. :/

[12:52] *** pochi joined
[12:52] <phenny> isBEKaml: I'll pass that on when sorear is around.

[12:54] <isBEKaml> colomon: if you're around, can you tell what @path in niecza is? and, how do I set it? I guess you got this thing set with panda-niecza. 

[12:55] <isBEKaml> niecza: @*PATH.perl.say;

[12:55] <p6eval> niecza v14-38-gac280b0: OUTPUT«Any␤»

[12:56] <isBEKaml> niecza: use Foo; say 42;

[12:56] <p6eval> niecza v14-38-gac280b0: OUTPUT«Unhandled exception: Unable to locate module Foo in @path␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1344 (die @ 3) ␤  at /home/p6eval/niecza/src/NieczaPathSearch.pm6 line 23 (NieczaPathSearch.load_module @ 12) ␤  at /home/p6eval/niecza/src/Niecza…

[12:56] <isBEKaml> colomon: ^^that

[12:57] <isBEKaml> oh, that's just NieczaPathSearch's variable array? I could just use @*INC.... 

[13:02] *** sisar joined
[13:05] * jnthn afk for a bit, errands

[13:06] *** bluescreen10 left
[13:13] <colomon> isBEKaml: yes, use @*INC

[13:14] <colomon> panda-niecza uses additional -I command line arguments in the niecza invocation to set @*INC

[13:14] <colomon> be warned, last time I checked @*INC seemed to be write-only

[13:15] <isBEKaml> colomon: write-only?

[13:15] <colomon> It doesn't reflect the command line arguments, at the very least.

[13:15] <isBEKaml> niecza: my @*INC=%*ENV{"HOME"} ~ "/.perl6/lib"; @*INC.perl.say;

[13:15] <p6eval> niecza v14-38-gac280b0: OUTPUT«["/home/p6eval/.perl6/lib"].list␤»

[13:16] <colomon> Wynne:niecza colomon$ mono run/Niecza.exe -Ifoobar -e"say @*INC"

[13:16] <colomon> that prints a blank line

[13:16] <colomon> but it still searches directory foobar

[13:17] <moritz> niecza: @*INC.push: 'foo'

[13:17] <p6eval> niecza v14-38-gac280b0:  ( no output )

[13:19] <isBEKaml> colomon: oh, but it still reads the include path?

[13:21] <isBEKaml> colomon: I see what you mean :)

[13:27] *** ggoebel left
[13:38] *** sisar left
[13:38] *** xinming joined
[13:42] *** isBEKaml left
[13:45] <moritz> jnthn: I've experimented a bit with walking the outer chain...

[13:45] *** snearch joined
[13:47] <moritz> jnthn: what I've found is that the same sub produces different code objects (as determined by .WHICH), depending on whether you get there via call chain or outer chain

[13:47] <moritz> probably becaues the one from the call chain holds information about the lexpad?

[13:48] <jnthn> moritz: Much more likely because of closure cloning.

[13:49] <moritz> how do I compare them in a way that treats them as equal? nqp::where of their $!do objects?

[13:49] <jnthn> moritz: nqp::where of $!do.get_lexinfo() would do it

[13:51] <moritz> jnthn: thanks. That code is slowly getting nasty :-)

[14:03] <moritz> \o/

[14:03] <jnthn> Nastiness FTW! \o/

[14:03] <jnthn> hey, wait...

[14:03] <jnthn> :)

[14:03] <moritz> I've correctly found the outer Routine in the call chain

[14:04] <jnthn> :)

[14:04] <moritz> and I've added a Code.static_id method that makes the code look a little less nasty

[14:04] <jnthn> ok

[14:05] <moritz> ie I don't have to litter the backtrace printer with nqp::getattr statements

[14:05] <jnthn> It may be that .WHICH should use that.

[14:05] <moritz> well, the question if $closure === $cloned_closure should be True or not

[14:06] <jnthn> Yeah, not sure on that. Don't recall a spec decision on it either.

[14:07] <moritz> so far the policy for === has been rather strict

[14:10] <moritz> I mean if you do thing like:

[14:10] <moritz> sub gen($x) { sub () { $x } }; my $a = gen('a'); my $b = gen('b'), say $a === $b

[14:10] <jnthn> Right.

[14:10] <jnthn> Yeah, .WHICH probably shouldn't use .static_id :)

[14:11] <moritz> then that would give True, even though both subs are pure, and give different results when executed

[14:11] <jnthn> *nod*

[14:11] <moritz> and neither should eqv

[14:21] *** ccc joined
[14:45] <TimToady> moritz: vvv first approximation without caffiene: [] should have same effect as leading @

[14:45] <phenny> TimToady: 08:18Z <moritz> ask TimToady if hash zen slices return the whole hash or just the values. S02:3954 says "entire hash", S09:636 seems to imply that only the values are returned (though that S09 thing is a bit weird too, it {}-indexes an array)

[14:46] <moritz> TimToady: I'm asking about { } zen slice, not []

[14:49] <colomon> TimToady: while snowblowing the driveway this morning, I had grave misgivings about using to-set to convert Bags, KeySets, and KeyBags to Sets for the purposes of the Set operators.  Seems like most (all?) of the code would be identical if the arguments were any of those types, and it would be considerably more efficient.  I suspect we need a Setty role, or something like that, to make the organization simple and elegant...

[14:52] <TimToady> colomon++ is addicted to power tools :)

[14:53] <colomon> TimToady: in particular, the code is implemented using just Set.exists and Set.keys, and those are available on all those types.

[14:53] *** xinming left
[14:53] <colomon> having a snowblower is indeed pretty awesome

[14:53] <TimToady> well, roles are kinda like snowblowers...

[14:53] <colomon> as is having perl 6

[14:54] <colomon> little guy is requesting  more Dr Seuss tongue-twisters, but I'll be right by my laptop the whole time...

[14:55] <jnthn> .oO( Finally, I know how to explain roles to people! )

[14:55] *** PacoAir joined
[14:56] *** tokuhirom left
[14:58] <TimToady> moritz: I'm not sure that using Zen slice for :v is going to stay in S09; it doesn't seem like a good idea this morning--but then not much does this early... :)

[14:59] <moritz> TimToady: let's try to make it simple... what should   my %h = a => 1; say "%h{}";  print?

[14:59] <moritz> a\t1\n or 1\n ?

[14:59] <TimToady> same as {~%h}

[15:00] <moritz> ok, thanks

[15:00] <TimToady> that is, Zen slice really has no effect when interpolating, but outside of a string, has same effect as % rather than $

[15:00] <TimToady> so you can use it for a postfix "sigil"

[15:01] *** ggoebel joined
[15:05] <colomon> niecza: my $a = set <a b c d>; say $a<c>:exists

[15:05] <p6eval> niecza v14-38-gac280b0: OUTPUT«Unhandled exception: Parameter '' in 'Set.perl' requires a defined argument␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (Set.perl @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 310 (Any.exists_key @ 4) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤ …

[15:05] <dalek> rakudo/nom: 4b92201 | moritz++ | src/core/Code.pm:

[15:05] <dalek> rakudo/nom: Code.oute; patch from jnthn++

[15:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/4b922015f5

[15:05] <dalek> rakudo/nom: 84e6cbc | moritz++ | src/core/Code.pm:

[15:05] <dalek> rakudo/nom: Code.static_id which ignores closure cloning

[15:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/84e6cbc1e6

[15:05] <dalek> rakudo/nom: 13529c7 | moritz++ | src/core/Any.pm:

[15:05] <dalek> rakudo/nom: fix Hash zen slice to return the whole Hash, not just the values

[15:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/13529c7a88

[15:05] <dalek> rakudo/nom: 1200dd8 | moritz++ | src/core/Exception.pm:

[15:05] <dalek> rakudo/nom: switch back to fuller stacktraces until smarter traces are implemented

[15:05] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/1200dd84fd

[15:06] *** ksi joined
[15:06] <colomon> niecza: my $a = set <a b c d>; say $a.hash()<c>:exists

[15:06] <p6eval> niecza v14-38-gac280b0: OUTPUT«True␤»

[15:10] *** MayDaniel left
[15:12] <colomon> niecza> my $a = set <a b c d>; say $a<c>:exists

[15:12] <colomon> True

[15:12] <colomon> that's after a pretty trivial patch.

[15:14] <colomon> suggests to me that maybe instead of making a new role, the Set operators should work on Associative instead of Set?

[15:19] *** shinobicl___ joined
[15:24] <dalek> roast: 4e2fc98 | moritz++ | S02-types/hash.t:

[15:24] <dalek> roast: hash slices return the whole hash, not just values

[15:24] <dalek> roast: review: https://github.com/perl6/roast/commit/4e2fc98b4f

[15:29] <moritz> https://gist.github.com/1800832 # current (uncommitted) state of nicer backtraces in rakudo

[15:29] <moritz> (output at the bottom of the gist)

[15:31] <moritz> it searches for the first caller that is "interesting", remembers its line number, then searches outwards for a routine (and if none exists, a block) that also appears in the call chain, and takes its name

[15:31] <moritz> and starting from there it searches for the next caller, rinse and repeat

[15:32] *** Simas_J joined
[15:39] <tadzik> moritz: very nice!

[15:39] *** HashWeb joined
[15:40] <tadzik> moritz++

[15:42] <moritz> perl6: my %h = a => 1; print %h

[15:42] <p6eval> pugs b927740, rakudo 1200dd, niecza v14-38-gac280b0: OUTPUT«a   1»

[15:43] *** Psyche^ joined
[15:45] <dalek> roast: ecd13f4 | moritz++ | S02-literals/ (2 files):

[15:45] <dalek> roast: fix and unfudge zen hash slice tests

[15:45] <dalek> roast: review: https://github.com/perl6/roast/commit/ecd13f455d

[15:45] <moritz> it seems that github still suffers from that DDOS; every second request I make gets "connection refused"

[15:45] <colomon> TimToady: any reason why Set et al shouldn't support :exists, and KeySet/KeyBag also :delete  ?

[15:45] * colomon has just implemented this...

[15:47] *** Patterner left
[15:47] *** Psyche^ is now known as Patterner

[15:48] <colomon> niecza: my %h = a=>1, b=>2; say %h.perl; %h<b>:delete; say %h.perl

[15:48] <p6eval> niecza v14-38-gac280b0: OUTPUT«{"a" => 1, "b" => 2}.hash␤{"a" => 1}.hash␤»

[15:49] <colomon> niecza: my %h = a=>1, b=>2; say %h.perl; %h.delete_key("b"); say %h.perl

[15:49] <p6eval> niecza v14-38-gac280b0: OUTPUT«{"a" => 1, "b" => 2}.hash␤{"a" => 1, "b" => 2}.hash␤»

[15:49] *** birdwindupbird left
[15:50] *** shinobicl___ left
[15:50] <colomon> niecza: my %h = a=>1, b=>2; say %h.perl; say %h<b>:delete; say %h.perl

[15:50] <p6eval> niecza v14-38-gac280b0: OUTPUT«{"a" => 1, "b" => 2}.hash␤2␤{"a" => 1}.hash␤»

[15:59] <dalek> specs: d28c8ef | moritz++ | S32-setting-library/Exception.pod:

[15:59] <dalek> specs: [S32::Exception] X::AdHoc naming conventions

[15:59] <dalek> specs: review: https://github.com/perl6/specs/commit/d28c8ef33b

[16:02] *** colomon left
[16:04] <moritz> ok, there's one problem with the new backtrace code

[16:04] <moritz> it doesn't show any location for exceptions thrown directly from the mainline

[16:21] *** whiteknight left
[16:21] * moritz founds http://journal.dedasys.com/2010/03/30/where-tcl-and-tk-went-wrong/ quite interesting

[16:28] *** colomon joined
[16:30] <dalek> niecza: 5857ccb | (Solomon Foster)++ | lib/CORE.setting:

[16:30] <dalek> niecza: Fix apparent (probably meaningless) bug in Hash.delete_key.  Add exists_key and delete_key as appropriate in Set, KeySet, Bag, and KeyBag.

[16:30] <dalek> niecza: review: https://github.com/sorear/niecza/commit/5857ccba8f

[16:34] <dalek> roast: df27e0d | (Solomon Foster)++ | S02-types/ (4 files):

[16:34] <dalek> roast: Add tests for Set et al :exists and :delete.

[16:34] <dalek> roast: review: https://github.com/perl6/roast/commit/df27e0df31

[16:44] <TimToady> colomon: that's fine; sets and bags are allomorphically hashes when used that way

[16:44] <colomon> good, now I don't have to undo that patch.  ;)

[16:45] <colomon> TimToady: any notion of a good name for a role common to Set, KeySet, Bag, and KeyBag?

[16:47] <moritz> Keyed?

[16:47] * moritz not good at naming

[16:48] <felher> tadzik++ # 2251cbb0b89256d884c9f00c4c6946b0a3bc4a30

[16:48] * felher adds #= to a few little scripts.

[16:51] <colomon> moritz, TimToady: Setty?

[16:52] <colomon> Settish?

[16:53] <colomon> this is the role that has .exists and .keys, and the goal is to mean it's okay to use it as "set" input for the Set operators

[16:53] <Su-Shee> Beagle as in Setter ;) 

[16:54] <jnthn> moritz: Nice work on the backtrace stuff :)

[16:58] <TimToady> well, I kinda like Baggy

[16:59] <colomon> The thing of it is, there's also the notion that we might create a role to handle much of the Set/KeySet functionality, and another to handle the Bag/KeyBag functionality; and I thought we'd use Baggy for the latter.

[17:00] <colomon> naming things is almost the hardest part of computer programming...

[17:01] <Su-Shee> Birkenbag is the ultimate bag. ;)

[17:03] *** yertalert joined
[17:03] <moritz> naming and corner cases :-)

[17:06] *** noam left
[17:07] *** noam joined
[17:07] <moritz> and error handling :-)

[17:25] *** snearch left
[17:30] <TimToady> and everything else :)

[17:33] *** unobe joined
[17:36] *** araujo left
[17:40] *** araujo joined
[17:50] <timotimo> my fibonacci implementation with memoisation is able to calculate up to 974 numbers

[17:50] <timotimo> with 975 it will not terminate

[17:50] <timotimo> i wonder why

[18:03] <dukeleto> o/

[18:04] <arnsholt> :q

[18:04] <arnsholt> Er, opps

[18:04] <dukeleto> Baggy++

[18:04] <arnsholt> Wrong window ^_^

[18:07] *** Tedd1 left
[18:09] *** birdwindupbird joined
[18:09] *** am0c joined
[18:20] *** buubot_backup left
[18:25] *** ksi left
[18:29] *** wolfman2000 left
[18:34] *** birdwindupbird left
[18:37] *** buubot_backup joined
[18:38] *** mj41_nb joined
[18:43] *** buubot_backup left
[18:49] *** am0c left
[18:50] *** am0c joined
[18:51] <cognominal_> nom: say Parcel == Array

[18:51] <p6eval> nom 1200dd: OUTPUT«use of uninitialized value of type Parcel in numeric context␤use of uninitialized value of type Array in numeric context␤True␤»

[18:52] <cognominal_> I don't think == should accept to compare undefined values.

[18:52] <cognominal_> nom: say Parcel === Array

[18:52] <p6eval> nom 1200dd: OUTPUT«False␤»

[18:52] <cognominal_> it should propose to use === and fail.

[18:54] <moritz> well, == is for numbers, so it makes numbers out of the objects

[18:54] <moritz> if you don't want that, don't use ==

[18:54] <moritz> and it even warns you

[18:55] <cognominal_> the warning is without filename and  line number. So it is useless..

[18:56] <moritz> well, that can be changed

[18:57] <geekosaur> insufficient clarity in undefined value warnings is my biggest bugaboo with p5; let's not keep it in p6...

[18:58] <cognominal_> geeksosaur++  # I feel less lonely

[18:59] <cognominal_> and we get new ones in Perl6, like in stringifying undefined values wich triggered no warnings in Perl 5.

[18:59] <cognominal_> *which

[19:00] <geekosaur> hm, I recall them producing warnings, but have always been the least useful ones...

[19:02] <cognominal_> moritz, I complain but I should applaude because there is been a great effort toward better error messages lately.

[19:03] <cognominal_> s/is/has/

[19:04] *** buubot_backup joined
[19:06] <moritz> eval: use warnings; undef ~ ""

[19:06] <buubot_backup> moritz: ERROR: Can't modify constant item in undef operator at (eval 20) line 2, at EOF 

[19:06] <moritz> eval: use warnings; undef . ""

[19:06] <buubot_backup> moritz: Use of uninitialized value in concatenation (.) or string at (eval 20) line 1. 

[19:06] *** birdwindupbird joined
[19:07] <moritz> geekosaur: which part of the undef warnings do you find insufficient clear?

[19:10] <moritz> nom: sub f() { 3; CATCH { } }; say f

[19:10] <p6eval> nom 1200dd: OUTPUT«Nil␤»

[19:10] <moritz> OH

[19:10] <geekosaur> sorry, I was talking about (mostly older) perl 5 there, since cognominal_ seemed to be saying p5's undef warnings for undef-to-string weren't so useful when there were a bunch of them in the same line.  come to think of it, those messages suggest it's still true in that case, if you have 8 stringifications in the same line, which one threw the warning?

[19:11] <moritz> geekosaur: which perl 5 are you using?

[19:11] <moritz> geekosaur: perl 5.10 and higher tries to give you the variable names (though it doesn't always succeed)

[19:11] <geekosaur> I always end up breaking the line into individual statements, one operation per, so I get a line number specific to the one that is failing...

[19:11] <geekosaur> yeh, I'm mostly thinking 5.8 but I have seen it in 5.12 sometimes as well

[19:11] <geekosaur> maybe I'm just good at running into the "doesn't always succeed" cases...

[19:12] <moritz> perl -wE 'my $x;  my $y = 3; say "$x;$y"'

[19:12] <moritz> Use of uninitialized value $x in concatenation (.) or string at -e line 1.

[19:15] <geekosaur> (I keep threatening to get "human fuzzer" shirts made up; I seem to be inordinately good at running headlong into corner cases)

[19:15] <jnthn> nom: my $x; say $x + 42

[19:15] <p6eval> nom 1200dd: OUTPUT«use of uninitialized variable $x of type Any in numeric context␤42␤»

[19:15] <jnthn> Rakudo gets the variable name too sometimes :)

[19:16] <moritz> geekosaur: then you should join the ranks of the perl 6 testers :-)

[19:19] <geekosaur> I was :p now I'm trying to reconstruct what I had had on the external drive which is now ... somewhere

[19:19] <geekosaur> (macbook air, tinny ssd already mostly full, sigh)

[19:20] <geekosaur> s/tinny/tiny/

[19:21] <geekosaur> ...actually I did manage to find most of the other netbook yesterday, maybe I should set stuff up on that

[19:21] <geekosaur> (then again I have this crappy notwork to deal with too, sigh.  and can't go anywhere with better net today.  rrrgh)

[19:30] <moritz> ARGH

[19:30] <moritz> there's this problem that I'm working on for the last 3.5 hours (not full time though, on and off)

[19:30] <moritz> and now I've found an off-by-one error

[19:31] <moritz> I should use either  $idx < $.elems OR $idx <= $.end  when iterating over the array indexes

[19:31] <moritz> $idx < $.end won't give me the last one

[19:32] <moritz> and thus not the callframe of the mainline

[19:32] <moritz> and thus an empty backtrace for a simple  perl6 -e 'die "foo"'

[19:32] <jnthn> argh!

[19:33] <jnthn> The simplest things are always the hardest to spot :/

[19:35] <moritz> first I've suspected that an exception in the backtrace printer is eating the exception

[19:35] <moritz> erm, eating the backtrace

[19:35] <moritz> then I've added a CATCH block

[19:35] *** renormalist joined
[19:35] <moritz> with some debugging

[19:35] <moritz> which ate the return value, and returned Nil instead

[19:35] <moritz> then I fixed that, and added lots of debugging output, and safety band-aid

[19:38] *** MayDaniel joined
[19:38] <moritz> hm, but it doesn't seem to fix the whole thing :/

[19:38] *** wolfman2000 joined
[19:40] *** tarch joined
[19:41] *** retupmoca left
[19:43] <moritz> prototyping the whole thing was fun, because it was easy to do outside the setting

[19:43] <moritz> but I can't do that for the case of just a single callframe

[19:46] *** whiteknight joined
[19:52] <moritz> I'm just listening to Pink Floyd's "Brick in the Wall", and heard a part of the lyrics as "we don't need no education, we don't need no source control" :-)

[19:53] <cognominal_> :)

[19:54] <jnthn> .oO( No Darcs sarcasm in the hack room... )

[19:55] *** benabik left
[19:55] * geekosaur *eyeroll*

[19:56] *** am0c left
[19:57] *** retupmoca joined
[19:57] <dukeleto> .oO( No non-atomic version control systems in the bike shed ... )

[19:58] *** benabik joined
[20:00] *** tarch left
[20:02] <sorear> good * #perl6

[20:02] <phenny> sorear: 12:44Z <isBEKaml> ask sorear if he can have a look at this?  https://gist.github.com/1799248. I got that when I tried to precompile a module with niecza -C. 

[20:02] <phenny> sorear: 12:52Z <isBEKaml> tell sorear to ignore my last message. I didn't read the error message at all. :/

[20:03] *** GlitchMr left
[20:07] *** whiteknight left
[20:15] <moritz> AARGH AGAIN

[20:17] *** wentam joined
[20:17] <jnthn> moritz: What this time?

[20:18] <moritz> jnthn: -e doesn't add file name annotations

[20:18] <moritz> called from Sub '_block1002' pc 68 ((file unknown):123221183) (:1)

[20:18] <moritz> called from Sub '_block1000' pc 14 ((file unknown):123221125) (:1)

[20:18] <moritz> and so we filter them out while creating the Perl 6 backtraces in the first place

[20:18] <jnthn> moritz: ugh

[20:18] <moritz> which is why I've been debugging the wrong place all the time

[20:18] <jnthn> :(

[20:19] <jnthn> Guess we could make it something like "<-e ...>:1" or some other way to indicate where the code came from.

[20:20] <sorear> moritz: Where is 123221183 coming from?

[20:20] <sorear> niecza: say 123221183.unbase(16)

[20:20] <p6eval> niecza v14-39-g5857ccb: OUTPUT«Unhandled exception: Unable to resolve method unbase in class Int␤  at /tmp/P5KhRqoQJ7 line 1 (mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3773 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3774 (module-CORE @ 65) ␤  at /home…

[20:20] <sorear> niecza: say 123221183.base(16)

[20:20] <p6eval> niecza v14-39-g5857ccb: OUTPUT«75834BF␤»

[20:21] <jnthn> It's what Parrot thinks the current PIR line is...

[20:21] <jnthn> ...though I think it's a bit off ;)

[20:21] *** whiteknight joined
[20:23] *** birdwindupbird left
[20:24] <moritz> where do the file annotations come from anyway?

[20:24] *** Patterner left
[20:25] <flussence> outer space?

[20:25] <moritz> through pir::find_caller_lex__ps('$?FILES');

[20:30] <jnthn> moritz: Set in comp_unit action method, iirc

[20:32] <moritz> jnthn: well, set in NQP first

[20:32] <moritz> jnthn: and I'll see if I can fix it there first

[20:32] <moritz> oh well, the file annotations are set in comp_unit, based on $?FILES

[20:32] <moritz> and $?FILES is set in NQP

[20:33] <moritz> hm, eval should set $?FILES too

[20:33] <moritz> nom: my $?FILES = 3

[20:33] <p6eval> nom 1200dd:  ( no output )

[20:33] <moritz> nom: sub f ( ++state $ }; say f, f, f;

[20:34] <p6eval> nom 1200dd: OUTPUT«===SORRY!===␤Malformed parameter at line 1, near "++state $ "␤»

[20:34] <moritz> nom: sub f { ++state $ }; say f, f, f;

[20:34] <p6eval> nom 1200dd: OUTPUT«123␤»

[20:34] <moritz> \o/

[20:34] <jnthn> Note that

[20:34] <jnthn> nom: sub f { state $++ }; say f, f, f

[20:34] <p6eval> nom 1200dd: OUTPUT«===SORRY!===␤Preceding context expects a term, but found infix + instead at line 1, near " }; say f,"␤»

[20:34] <jnthn> :(

[20:34] <jnthn> I tried to hunt that one down yesterday and failed.

[20:35] <moritz> nom: sub f { (state $)++ }; say f, f, f

[20:35] <p6eval> nom 1200dd: OUTPUT«===SORRY!===␤Contextual $*GOAL not found␤»

[20:35] <jnthn> eek

[20:35] <jnthn> moritz: btw

[20:35] <moritz> std: sub f { (state $)++ }; say f, f, f

[20:35] <jnthn> nom: sub f { ++state $ }; say f xx 3;

[20:35] <p6eval> std 52f3895: OUTPUT«ok 00:01 113m␤»

[20:35] <p6eval> nom 1200dd: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&xx' called (line 1)␤»

[20:35] <jnthn> er :)

[20:35] <jnthn> nom: sub f { ++state $ }; say f() xx 3;

[20:35] <moritz> f() xx 3

[20:35] <p6eval> nom 1200dd: OUTPUT«1 2 3␤»

[20:35] <jnthn> I did the thunking of xx last night :)

[20:35] <moritz> yes, I've noticed

[20:40] <flussence> nom: sub f { (state $ )++ }; say f, f, f

[20:40] <p6eval> nom 1200dd: OUTPUT«012␤»

[20:42] <moritz> meh, still "file unknown"

[20:43] *** snearch joined
[20:44] *** Psyche^ joined
[20:44] *** Psyche^ is now known as Patterner

[20:45] <moritz> ah, because I did it in the wrong routine. Well.

[20:47] <moritz> http://it.isagit.com/rakudo/rakudo

[20:48] <jnthn> Not Found?

[20:48] *** Patterner left
[20:48] <jnthn> oh, worked on second try

[20:49] <flussence> javascript-only site?

[20:49] <moritz> flussence: nope

[20:49] <jnthn> Awesome, we're nearly at 10000 :)

[20:49] <moritz> flussence: I have noscript here, and nothing allowed

[20:50] <moritz> but it's... weird.

[20:50] <flussence> oh, the errors just happened to coincide with me switching it on/off several times :)

[20:50] *** Psyche^ joined
[20:50] *** Psyche^ is now known as Patterner

[20:56] *** bbkr joined
[20:57] <dalek> nqp: fd864b6 | moritz++ | src/HLL/Compiler.pm:

[20:57] <dalek> nqp: add "-e" file annotation where appropriate

[20:57] <dalek> nqp: review: https://github.com/perl6/nqp/commit/fd864b606f

[20:59] *** bbkr left
[20:59] *** bbkr joined
[21:01] *** wolfman2000 left
[21:01] *** bbkr left
[21:02] *** bbkr joined
[21:02] *** bbkr left
[21:17] <moritz> I don't think I'll manage to finish that backtrace stuff tonight

[21:17] <dalek> rakudo/bt: 3f3fd18 | moritz++ | docs/ChangeLog:

[21:17] <dalek> rakudo/bt: update ChangeLog

[21:17] <dalek> rakudo/bt: review: https://github.com/rakudo/rakudo/commit/3f3fd18a7a

[21:17] <dalek> rakudo/bt: 15ed52e | moritz++ | src/core/Backtrace.pm:

[21:17] <dalek> rakudo/bt: improve backtraces a lot

[21:17] <dalek> rakudo/bt: review: https://github.com/rakudo/rakudo/commit/15ed52e4ab

[21:17] <dalek> rakudo/bt: cb3b61d | moritz++ | src/core/Backtrace.pm:

[21:17] <dalek> rakudo/bt: bt off-by-one fixes and more robustness

[21:17] <dalek> rakudo/bt: review: https://github.com/rakudo/rakudo/commit/cb3b61da53

[21:17] <dalek> rakudo/bt: 55444bc | moritz++ | src/core/control.pm:

[21:17] <dalek> rakudo/bt: give eval()s a separate file annotation

[21:17] <dalek> rakudo/bt: review: https://github.com/rakudo/rakudo/commit/55444bcbdb

[21:17] <dalek> rakudo/bt: cf4be76 | moritz++ | tools/build/NQP_REVISION:

[21:17] <dalek> rakudo/bt: bump to newest NQP to get -e file annotation fix

[21:17] <dalek> rakudo/bt: review: https://github.com/rakudo/rakudo/commit/cf4be76948

[21:18] <moritz> so I'm pushing it as a branch, so that it's not lost in case of hard disc failure or so

[21:18] <moritz> and maybe an interested soul even finds out why ./perl6 -e 'die "foo"' doesn't produce sensible output

[21:33] <jnthn> moritz: Here it produces...no output.

[21:33] <moritz> not even the 'foo'?

[21:34] <moritz> maybe I've broken that in cb3b61da536060e27d8401526baf2004020cc68c; will debug tomorrow

[21:34] <jnthn> Not even the foo

[21:34] <jnthn> OK

[21:34] <jnthn> I'll leave it for you, lemme know if you want me to look at anything

[21:34] <jnthn> My Perl 6 tuits didn't really work out today. Hopefully tomorrow is better.

[21:42] <tadzik> ~~

[21:47] *** Simas_J left
[21:50] *** HashWeb left
[22:16] *** sisar joined
[22:16] *** whiteknight left
[22:17] <sisar> Has Larry Wall given up on Perl 5 ? #sorry for the harsh term :)

[22:18] <tadzik> I don't think Larry works on Perl 5 anymore

[22:20] <sorear> Perl 5 exists quite independantly of Larry

[22:23] <sisar> how can i get coloured text in my output ?

[22:24] <tadzik> use Term::ANSIColor

[22:25] <sorear> welcome to #perl6, sisar

[22:25] <sisar> oops, i should have mention, i'm fasad :)

[22:25] <tadzik> ha

[22:25] <sisar> now with a permanent nick hopefully

[22:26] <sisar> tadzik: you might have as well guessed by my questions ;-)

[22:26] <tadzik> mebbe

[22:28] <colomon> Larry did work on the most recent revision (like, is it even out yet?) of Programming Perl (5).

[22:29] *** gfldex left
[22:38] <sisar> how can i run panda from behind a proxy? sh ./bootstrap.sh is stuck at 'Connecting to feather.perl6.nl|193.200.132.135|:3000...  '

[22:38] <tadzik> hmm, I have no idea, I'm not good at proxies

[22:39] *** whiteknight joined
[22:40] <sisar> :(

[22:40] <colomon> it just uses curl, right?  figure out how curl deals with proxies....

[22:42] <sisar> colomon: curl, the programming language ?

[22:44] <tadzik> I think it uses wget

[22:45] <sisar> tadzik: my terminal output for bootstrap.sh: https://gist.github.com/1804831

[22:45] <tadzik> heh

[22:45] <tadzik> understandable :)

[22:45] <tadzik> You can try downloading the file manually

[22:46] <sisar> all because of the proxy? or some bug ?

[22:47] <tadzik> I think it assures the file is in place

[22:47] <tadzik> *assumes

[22:47] <tadzik> and proceeds, without checking if it really is

[22:48] <sisar> tadzik: which file should i download? i've already cloned the panda repository... #git works flawlessly behind a proxy :)

[22:48] <tadzik> sisar: http://feather.perl6.nl:3000/projects.json

[22:50] <sisar> well wether 'the network is unreachable' or not, it should better tell me why it needed to use the internet in the first place

[22:51] <sisar> may I open a issue regarding proxies on github for panda?

[22:51] <tadzik> of course, go ahead

[22:55] *** MayDaniel left
[23:01] *** kaare_ left
[23:03] *** snearch left
[23:07] <sisar> tadzik: so put my proxy info in the ~/.wgetrc file, but i still get same errors, without the 'failed to connect part'. The error begins at line #7

[23:07] <sisar> well atleast some improvement :)

[23:12] <sisar> phenny: tell tadzik assuming bootstrap.sh uses wget,  I put my proxy info in the ~/.wgetrc file, but i still get the same errors, this time without the 'failed to connect' part i.e. the error begins at line #7 of https://gist.github.com/1804831 this time

[23:12] <phenny> sisar: I'll pass that on when tadzik is around.

[23:12] <tadzik> I am around :)

[23:12] <phenny> tadzik: 23:12Z <sisar> tell tadzik assuming bootstrap.sh uses wget,  I put my proxy info in the ~/.wgetrc file, but i still get the same errors, this time without the 'failed to connect' part i.e. the error begins at line #7 of https://gist.github.com/1804831 this time

[23:13] <tadzik> I see

[23:14] <masak> good morning, #perl6.

[23:15] <tadzik> good... wait, what

[23:15] <masak> :)

[23:15] <masak> yeah. not entirely correct, I guess.

[23:15] <tadzik> sisar: ok, I see where it is

[23:16] <tadzik> it's in https://github.com/tadzik/panda/blob/master/lib/Panda/Ecosystem.pm#L32

[23:16] <masak> it's night, but if I say "good night", it sounds like I'm saying good bye. I'm not -- I just arrived.

[23:16] <Teratogen> g'day

[23:16] <Timbus> good evening

[23:16] <tadzik> no error checking in update, from-json or others I suppose

[23:16] *** mj41_nb left
[23:16] <tadzik> sisar: do you want to open that issue, or shall I do it?

[23:17] <tadzik> I'm probably not going to fix it today, ETOOTIRED

[23:17] <sisar> tadzik: you should do it

[23:17] <tadzik> okay

[23:18] <tadzik> oh, I have an issue opened 2 months ago which I didn't notice :/

[23:18] <sisar> tadzik: so is the issue with wget or with panda itself ?

[23:18] <tadzik> with panda

[23:18] <sisar> tadzik: issue no. ?

[23:18] <tadzik> still, downloading the file manually should help

[23:18] <tadzik> https://github.com/tadzik/panda/issues/11

[23:18] <tadzik> I'm quite sure it's not panda's fault, but still

[23:20] <tadzik> your case: https://github.com/tadzik/panda/issues/12

[23:21] <sisar> tadzik: well you are tired ;-)

[23:21] <tadzik> heh, a bit hung-over too

[23:21] <tadzik> but, you know, the end of exams :)

[23:22] <sisar> i've got exams this coming week :(

[23:22] <tadzik> good luck with them. Many, hard?

[23:23] <tadzik> I had the last one on friday morning, owned it totally ;)

[23:24] *** localhost joined
[23:24] <sisar> many. should not be hard if I get away from my laptop and pickup the damn textbook

[23:24] <sisar> *just pickup

[23:24] *** localhost left
[23:27] <sisar> um, where should i put projects.json

[23:28] <tadzik> ~/.panda/ I think

[23:28] <tadzik> yep

[23:33] <masak> tadzik: c'gratulations on end of exams!

[23:33] <tadzik> yay thanks :)

[23:33] <tadzik> I also got to enjoy a suprise vacation, in shape of skiing trip

[23:34] <sorear> masak \o/

[23:35] <masak> sorear! \o/

[23:37] <sisar> tadzik: yay! panda installed ! but see line #2 and #43 of https://gist.github.com/1805099 

[23:37] <tadzik> #43 is expected

[23:37] <tadzik> the tests checks, if git fails

[23:38] <tadzik> I think #2 is a rakudobug, ticketed

[23:38] <araujo> moritz, so you guys got pugs development bootstrapped?? 

[23:39] <sisar> tadzik: #2 looks out of place with no info, without a line no. at which the error/warning was seen

[23:40] <tadzik> indeed, but I seem to recall tracking it down and ticketing

[23:40] <sisar> tadzik++

[23:41] *** ccc left
[23:43] <tadzik> I can't seem to find it though

[23:48] *** ksi joined
[23:49] <tadzik> huh, maybe I didn't

[23:50] <tadzik> may have something to do with this: https://gist.github.com/1623088

[23:51] <tadzik> may have not :) Feel free to open another issue for this, my consciousness is slowly drifting away

[23:52] <sisar> tadzik: sorry, don't have the technical know-how for that

[23:53] <sisar> before you sleep, can II have commit access to panda, would like to add the bit about proxies to the README

[23:53] <sisar> *can I

[23:53] <tadzik> sure thing

[23:53] <sisar> github username: Siddhant

[23:55] * sisar taking advantage of tadzik's drowsiness to extort commit access ;p

[23:55] <tadzik> it never goes wrong :)

[23:55] <tadzik> and if it would, I would just revert your commits and banish you forever and stuff

[23:56] <tadzik> ;)

[23:56] <tadzik> and re technical know-how, it's just a matter of visiting https://github.com/tadzik/panda/issues/new and writing some random words in text fields

[23:57] *** tokuhirom joined
[23:58] <sisar> tadzik: oh. That i can do. i thought you wanted me fill in a rakudobug

[23:58] <sisar> *me to

[23:58] <sisar> tadzik++ #for commit access

[23:59] <tadzik> filing a rakudobug is a matter of seding one email with random words to a specific e-mail address ;)

