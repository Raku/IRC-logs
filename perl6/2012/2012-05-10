[00:00] *** envi_ joined
[00:04] *** thelazydeveloper left
[00:05] *** drschumtzenberg_ joined
[00:09] <lichtkind> does enyone knows if i can use extends inside the class with MooseX::Declare?

[00:12] *** skids joined
[00:17] *** fgomez left
[00:19] <sorear> 1. Try it and see

[00:19] <sorear> 2. #moose on MAGnet (they will tell you #1, I am sure)

[00:22] *** xinming joined
[00:28] *** replore_ joined
[00:28] *** shachaf_ is now known as shachaf

[00:41] <dalek> tablets: 0f970bf | (Herbert Breunung)++ | docs/ (2 files):

[00:41] <dalek> tablets: some small fixes

[00:41] <dalek> tablets: review: https://github.com/perl6/tablets/commit/0f970bfa66

[00:41] <dalek> tablets: 2056009 | (Herbert Breunung)++ | docs/appendix- (2 files):

[00:41] <dalek> tablets: adding table for constants

[00:41] <dalek> tablets: review: https://github.com/perl6/tablets/commit/2056009f1e

[00:51] *** lichtkind left
[00:59] *** fgomez joined
[00:59] *** fgomez left
[01:04] *** fgomez joined
[01:09] *** scott_ joined
[01:10] *** scott_ is now known as Guest44821

[01:41] *** leprevost joined
[01:44] *** jaldhar joined
[01:46] <[Coke]> http://stackoverflow.com/questions/10522302/perl-6-capturing-repeating-matching-groups-separately

[02:03] *** lestrrat left
[02:04] *** lestrrat joined
[02:06] *** whiteknight left
[02:08] *** sivoais joined
[02:15] *** tokuhirom left
[02:25] *** narik007 joined
[02:25] *** fgomez left
[02:27] *** benabik joined
[02:27] *** narik007 left
[02:29] <[Coke]> # 05/09/2012 - rakudo++ (22021); niecza (92.56%); pugs (41.41%)

[02:29] *** narik joined
[02:30] *** fgomez joined
[02:31] *** narik left
[02:35] *** orafu left
[02:35] *** orafu joined
[02:48] <dalek> Pugs.hs: 6272950 | coke++ | / (3 files):

[02:48] <dalek> Pugs.hs: remove referencess to LC_ALL

[02:48] <dalek> Pugs.hs: 

[02:48] <dalek> Pugs.hs: You get references to bad utf8 data without it on linux, but with

[02:48] <dalek> Pugs.hs: it on OS X you get an error on each invocation.

[02:48] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/6272950693

[03:29] *** tyatpi left
[03:46] *** alester joined
[04:04] *** VXZ joined
[04:06] *** Tene__ is now known as Tene

[04:06] *** replore_ left
[04:20] *** dduncan joined
[04:20] *** dduncan left
[04:26] *** Entonian joined
[04:30] *** Entonian left
[04:35] *** VXZ left
[04:45] *** alester left
[04:49] *** thou joined
[04:59] *** NamelessTee joined
[04:59] *** birdwindupbird joined
[05:00] *** apejens left
[05:02] *** apejens joined
[05:10] *** Guest44821 left
[05:13] *** scott_ joined
[05:13] *** scott_ is now known as Guest60787

[05:30] <moritz> \o

[05:30] <TimToady> o/

[05:31] <japhb_> o/

[05:31] *** japhb_ left
[05:32] *** japhb_ joined
[05:32] *** japhb_ left
[05:32] *** cognominal left
[05:32] *** japhb joined
[05:33] *** cognominal joined
[05:34] *** bruges left
[05:42] <sorear> o|

[05:46] *** NamelessTee left
[05:54] *** lestrrat left
[05:55] *** lestrrat joined
[06:00] *** alim joined
[06:01] *** cognominal left
[06:02] *** cognominal joined
[06:05] *** kaleem joined
[06:10] *** tyatpi joined
[06:20] *** fhelmberger joined
[06:35] *** ashleydev left
[06:50] <jnthn> mornin'

[06:52] *** cognominal left
[06:54] *** cognominal joined
[06:58] *** brrt joined
[07:01] <moritz> wow, I've got spam advertising silicon wavers

[07:03] <sorear> sic?

[07:03] <jnthn> o.O

[07:03] <moritz> not quite the usual consumer good :-)

[07:11] <tadzik> hello

[07:13] <sorear> hi.

[07:15] *** lestrrat left
[07:15] *** lestrrat joined
[07:20] <dalek> rakudo/nom: 128e996 | moritz++ | / (2 files):

[07:20] <dalek> rakudo/nom: implement rindex with parrots new rindex opcodes

[07:20] <dalek> rakudo/nom: 

[07:20] <dalek> rakudo/nom: bump NQP revision to something that requires a new enough parrot

[07:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/128e996df2

[07:20] <dalek> rakudo/nom: d61049f | moritz++ | src/core/Rat.pm:

[07:20] <dalek> rakudo/nom: improved Rat.Str by TimToady++

[07:20] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d61049ff52

[07:22] <dalek> nqp: eee0fa5 | (Arne Skjærholt)++ | / (4 files):

[07:22] <dalek> nqp: First cut of handling explicitly managed strings.

[07:22] <dalek> nqp: review: https://github.com/perl6/nqp/commit/eee0fa501f

[07:22] <dalek> nqp: abef7b9 | (Arne Skjærholt)++ | src/6model/reprs/CStr.c:

[07:22] <dalek> nqp: Handle encoding parameter for CStr representation.

[07:22] <dalek> nqp: review: https://github.com/perl6/nqp/commit/abef7b968b

[07:22] <dalek> nqp: 6df554d | moritz++ | / (4 files):

[07:22] <dalek> nqp: Merge remote branch 'origin/cstr'

[07:22] <dalek> nqp: review: https://github.com/perl6/nqp/commit/6df554d2cb

[07:22] <dalek> nqp: 17cc549 | moritz++ | tools/build/PARROT_REVISION:

[07:22] <dalek> nqp: bump parrot revision to get rindex ops

[07:22] <dalek> nqp: review: https://github.com/perl6/nqp/commit/17cc549e42

[07:23] *** wtw joined
[07:28] *** fglock joined
[07:32] *** kresike joined
[07:37] *** alim left
[07:38] <dalek> roast: c99e10b | moritz++ | S04- (2 files):

[07:38] <dalek> roast: test interactions between fail() and let/UNDO/KEEP

[07:38] <dalek> roast: review: https://github.com/perl6/roast/commit/c99e10bec0

[07:38] <dalek> roast: f7639b1 | moritz++ | S32-str/rindex.t:

[07:38] <dalek> roast: RT #112818, rindex with non-Latin-1 strings

[07:38] <dalek> roast: review: https://github.com/perl6/roast/commit/f7639b1eb5

[07:39] *** tyatpi left
[07:42] <dalek> roast: d2a6d88 | moritz++ | S32-num/complex.t:

[07:42] <dalek> roast: rakudo unfudge

[07:42] <dalek> roast: review: https://github.com/perl6/roast/commit/d2a6d882de

[07:54] *** cognominal_ joined
[07:57] *** cognominal left
[08:03] *** alim joined
[08:08] *** birdwind1pbird joined
[08:10] *** lestrrat left
[08:10] *** thou left
[08:11] *** lestrrat joined
[08:11] *** japhb left
[08:11] *** tyatpi joined
[08:13] *** japhb joined
[08:17] *** birdwind1pbird left
[08:22] *** cosimo left
[08:30] *** goraki joined
[08:37] *** cosimo joined
[08:45] *** dakkar joined
[08:51] *** localhost left
[09:08] <tadzik> t/spec/S02-names-vars/perl.rakudo and t/spec/S32-str/indent.rakudo now fail without ICU

[09:12] <masak> yo morning, #perl6

[09:12] <mikec__> yo

[09:16] *** tokuhirom joined
[09:17] <frettled> good yo, masak!

[09:19] *** cognominal___ joined
[09:22] *** cognominal_ left
[09:22] <tadzik> oh shark

[09:24] <masak> yo shark

[09:27] <dalek> tablets: c052884 | (Herbert Breunung)++ | docs/appendix- (2 files):

[09:27] <dalek> tablets: cut out some fat, A can be more precise and sparce, lengths is domain of G and tablets

[09:27] <dalek> tablets: review: https://github.com/perl6/tablets/commit/c052884e59

[09:28] <sorear> yo yo masak YO

[09:28] *** cognominal___ left
[09:29] *** bruges joined
[09:30] * masak pulls out his yo-yo

[09:30] *** cognominal joined
[09:31] *** cognominal left
[09:32] *** cognominal joined
[09:39] *** daxim joined
[09:42] *** spaceshi1s joined
[09:42] *** spaceshi1s left
[09:42] *** spaceships left
[09:43] *** spaceships joined
[09:44] *** spaceships left
[09:46] <masak> Perl 6 day today! \o/

[09:46] <daxim> url?

[09:46] <masak> what, to my work schedule? :)

[09:47] <masak> I'm going to focus on p6cc/t4 until jnthn wakes up. then I'm going to focus on QAST.

[09:47] <daxim> ah, you get a googley day, nice

[09:49] *** fhelmberger left
[09:49] <masak> yeah, a bit like that.

[09:49] <bbkr> std: e.{}

[09:49] <p6eval> std 8632387: OUTPUT«ok 00:00 40m␤»

[09:58] *** cognominal_ joined
[09:58] *** tokuhirom left
[09:59] *** localhost joined
[09:59] *** fhelmberger joined
[10:01] *** cognominal left
[10:06] *** fhelmberger left
[10:06] *** fhelmberger joined
[10:08] *** pernatiy left
[10:09] *** tkr left
[10:09] *** snearch joined
[10:12] *** Guest60787 left
[10:12] *** NamelessTee joined
[10:13] <dalek> tablets: ce239bd | (Herbert Breunung)++ | docs/appendix- (3 files):

[10:13] <dalek> tablets: trim translateration and quasiquoting stuff in A and B, start to mark the pure methods with a leading dot

[10:13] <dalek> tablets: review: https://github.com/perl6/tablets/commit/ce239bd775

[10:19] *** sisar left
[10:19] *** integral_ left
[10:24] <jnthn> masak: wtf, until I wake up? I got up at 7am! :P

[10:24] <masak> oh right!

[10:25] <masak> ...hope the teaching is going well... :)

[10:25] <jnthn> :P

[10:25] <jnthn> Yeah. Higher Order Programming section of the course this afty. ;-)

[10:25] <masak> ooh!

[10:25] <masak> anyway, I'm having fun doing t4 benchmarks right now. might do that for a while more before I switch over.

[10:25] <jnthn> ok

[10:33] <masak> r: dir()

[10:33] <p6eval> rakudo d61049:  ( no output )

[10:33] <masak> r: say dir()[0]

[10:33] <p6eval> rakudo d61049: OUTPUT«star␤»

[10:33] <masak> r: say dir()[0].^name

[10:33] <p6eval> rakudo d61049: OUTPUT«Str␤»

[10:34] <masak> this was discussed before, with ingy++

[10:34] <masak> no conclusion was reached.

[10:34] <masak> there's something that feels wrong with dir of a directiory that's not '.'

[10:34] <masak> you only get Strs, the pathless filenames of the files in that dir.

[10:34] <masak> and so you have to go append the path yourself.

[10:35] *** envi_ left
[10:35] <masak> every. single. time.

[10:35] <masak> suggestion: have dir() return IO objects instead. they're free to stringify to the pathless file name, if people like that.

[10:36] <masak> but there should be some way to get to the absolute path of the file from the IO object. maybe even a relative path based on the current $*CWD

[10:39] <mikec__> jnthn: you're teaching now?

[10:39] <jnthn> mikec__: yeah

[10:39] <mikec__> cool!

[10:39] * jnthn tends to teach a couple of classes a month :)

[10:39] <flussence> r: .say for "{cwd}/" X~ dir

[10:39] <p6eval> rakudo d61049: OUTPUT«/home/p6eval/star␤/home/p6eval/src␤/home/p6eval/.bashrc␤/home/p6eval/nom-inst1␤/home/p6eval/test3.pl␤/home/p6eval/.profile␤/home/p6eval/t␤/home/p6eval/nom-inst2␤/home/p6eval/nom-inst␤/home/p6eval/examples␤/home/p6eval/Makefile␤/home/p6eval/.gitignore␤/home/p6eval/l…

[10:40] <mikec__> where's that? you're in Lund, right?

[10:41] <tadzik> I think it makes sense to return IO objects in dir() and friends

[10:44] <masak> \o/

[10:44] <jnthn> mikec__: Live in Lund, teach in various cities. Currently doing it in Malmo.

[10:44] <mikec__> ah nice

[10:45] *** integral joined
[10:45] *** integral left
[10:45] *** integral joined
[10:45] <mikec__> i went to Malmo after yapc Copenhagen

[10:45] <jnthn> We had Noridc Perl Workshop in Malmo last year :)

[10:45] <mikec__> so lucky!

[10:46] <mikec__> Malmofestivalen was on at the same time, which was a nice surprise

[10:46] <mikec__> i got ill from eating there, every day

[10:47] <jnthn> oh noes!

[10:48] <mikec__> i think it was worth it :)

[10:48] <jnthn> Hope you enjoyed the festival otherwise :)

[10:49] <mikec__> it's a cool city. i meant to visit Lund too but there was too much to do there already

[11:05] *** snearch left
[11:07] *** benabik left
[11:08] *** tokuhirom joined
[11:13] *** brrt left
[11:14] <masak> seems to be a tradition here in Malmö to eat at the festival, and get ill from it.

[11:15] *** tokuhirom left
[11:17] *** tyatpi left
[11:19] *** tokuhirom joined
[11:19] <mikec__> masak: haha. too much tasty food :(

[11:27] *** fgomez left
[11:40] *** kaleem left
[11:44] *** ponbiki joined
[11:48] *** benabik joined
[11:52] *** lichtkind joined
[11:52] <lichtkind> is there a method alias to ms// ?

[11:53] <flussence> .match(//, :s) probably

[11:53] <colomon> .match(/ /, :s), I believe

[11:53] *** stepnem left
[11:53] *** cognominal_ left
[11:54] <lichtkind> thanks

[11:54] <lichtkind> so no direct method, i need it for a table in index B

[11:55] *** cognominal joined
[11:56] <flussence> ms// is only a shortcut to m:s// anyway, it doesn't make much sense to have a long version of a shortcut :)

[11:56] <lichtkind> yes :)

[12:00] <lichtkind> http://tablets.perl6.org/appendix-b-grouped.html#quoting-ops

[12:00] <lichtkind> therefore

[12:00] <lichtkind> and i know there are bugs

[12:00] <lichtkind> its alread y fixed

[12:02] *** stepnem joined
[12:09] <colomon> n: say "abc" ~~ Q:match/b/

[12:09] <p6eval> niecza v17-3-gdaf09af: OUTPUT«===SORRY!===␤␤Unrecognized quote modifier: match at /tmp/aBO7VJifSz line 1:␤------> say "abc" ~~ Q⏏:match/b/␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1364 (die @ 3) ␤  at /h…

[12:11] <lichtkind> colomon: is :match gone or not implemented?

[12:11] <colomon> r: say "abc" ~~ Q:match/b/

[12:11] <p6eval> rakudo d61049: OUTPUT«===SORRY!===␤Colons may not be used to delimit quoting constructs at line 1, near ":match/b/"␤»

[12:12] <colomon> lichtkind: darned if I know

[12:14] <flussence> std: 'abcde' ~~ Q:match/abcd/

[12:14] <p6eval> std 8632387: OUTPUT«===SORRY!===␤Unrecognized quote modifier: match at /tmp/OVxQqo7XkR line 1:␤------> 'abcde' ~~ Q⏏:match/abcd/␤Check failed␤FAILED 00:00 41m␤»

[12:14] *** sisar joined
[12:18] <masak> r: my $a = 42; sub foo { let $a = "this will never stick"; say $a; fail }; say $a; foo; say $a

[12:18] <p6eval> rakudo d61049: OUTPUT«42␤this will never stick␤42␤»

[12:18] <masak> \o/

[12:21] *** brrt joined
[12:28] <masak> TimToady: my $v = 1; loop { let $v = 2; last }; say $v # what will this print? S04/Definition of Success doesn't seem to say.

[12:32] <jnthn> That doesn't feel like a failed exit...

[12:33] <jnthn> saying "I've done enough" isn't saying "I've gone wrong"

[12:34] <dalek> tablets: 34c00c0 | (Herbert Breunung)++ | docs/appendix- (2 files):

[12:34] <dalek> tablets: polish B

[12:34] <dalek> tablets: review: https://github.com/perl6/tablets/commit/34c00c007c

[12:38] <flussence> for (@ARGV) { pod2usage() when not $regex };  # bah, I just tried to do this in perl5 and it didn't DWIM :(

[12:39] <masak> jnthn: right.

[12:40] <masak> jnthn: I'm also leaning towards "that's not failed". but the way that part of S04 is worded, it makes it sound like every block either propagates an error exception, or returns a parcel to somewhere. next/last/redo do neither.

[12:42] <flussence> r: for (1, 2, 'a', False) { .say when not /\d/ } # just ooc

[12:42] <p6eval> rakudo d61049: OUTPUT«Method 'match' not found for invocant of class 'Any'␤  in method Bool at src/gen/CORE.setting:9007␤  in sub prefix:<not> at src/gen/CORE.setting:2144␤  in block <anon> at /tmp/PLqpyNep8O:1␤␤»

[12:42] <flussence> r: for (1, 2, 'a', False) { next when /\d/; .say }

[12:42] <p6eval> rakudo d61049: OUTPUT«a␤False␤»

[12:42] <flussence> ok, maybe I *am* a little crazy :)

[12:43] <masak> superstitious parentheses.

[12:44] <masak> I don't see offhand why 'when not /\d/' shouldn't work.

[12:45] <flussence> .oO( maybe we need a "when't" keyword )

[12:45] <mikec__> haha

[12:45] <mikec__> whent?

[12:46] <flussence> n: for 1, 2, 'a', False { .say when not /\d/ }

[12:46] <p6eval> niecza v17-3-gdaf09af: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/lib/CORE.setting line 1224 (warn @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 235 (Mu.Str @ 10) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.setting…

[12:46] <masak> flussence: I defined one in a talk once: http://masak.org/carl/osd-2010-parse-perl/talk.pdf

[12:47] <dalek> tablets: d08d55b | (Herbert Breunung)++ | docs/appendix-a-index.txt:

[12:47] <dalek> tablets: polish map entry

[12:47] <dalek> tablets: review: https://github.com/perl6/tablets/commit/d08d55bd36

[12:47] <mikec__> oh yes, whenn''t

[12:47] *** simcop2387 left
[12:48] <mikec__> great slides

[12:49] <masak> thanks.

[12:49] *** simcop2387 joined
[12:50] <lichtkind> TimToady: is there still a Q :match // ?

[12:51] <jnthn> masak: Yeah, it's a curious case. Nothing has made be feel it's obvious it should be one way or the other.

[12:52] <jnthn> s/be/me

[12:52] <jnthn> masak: I'm gonna vote for "whatever Rakudo does now" :P

[12:53] <tadzik> polish map entry. I have no idea what does it have to do with Perl :)

[12:54] <masak> a regex in boolean context matches on $_ -- so why doesn't the 'when not /\d/' case work?

[12:56] <jnthn> r: my $_ = 'hotdog'; say $_ 

[12:57] <p6eval> rakudo d61049: OUTPUT«===SORRY!===␤Redeclaration of symbol $_␤at /tmp/OA8m4KKYcC:1␤»

[12:57] <jnthn> argh

[12:57] <jnthn> r: $_ = 'hotdog'; say ($_ ~~ not /weiner/)

[12:57] <p6eval> rakudo d61049: OUTPUT«Method 'match' not found for invocant of class 'Any'␤  in method Bool at src/gen/CORE.setting:9007␤  in sub prefix:<not> at src/gen/CORE.setting:2144␤  in block <anon> at /tmp/gujr1zPgfo:1␤␤»

[12:57] *** leprevost left
[12:57] <[Coke]> jnthn: is the teaching part of $DAYJOB?

[12:57] <jnthn> [Coke]: Yes. :)

[12:58] <[Coke]> nifty.

[12:58] <jnthn> Teaching and writing courses probably makes up more than half of what I do for $dayjob these days :)

[12:59] * masak read that as "teaching and writing curses"

[12:59] *** grondilu joined
[12:59] <mikec__> teaching, writing and inflicting curses

[13:00] <grondilu> perl6: say (class Foo {}).bless([]).WHAT; 

[13:00] <p6eval> pugs: OUTPUT«*** No such subroutine: "&class"␤    at /tmp/VQ9Y0N98yB line 1, column 6-18␤»

[13:00] <p6eval> ..niecza v17-3-gdaf09af: OUTPUT«Foo()␤»

[13:00] <p6eval> ..rakudo d61049: OUTPUT«Array()␤»

[13:00] <PerlJam> but Perl 6 doesn't /need/ hex.

[13:00] <PerlJam> ;)

[13:00] <grondilu> bless is not yet implemented on rakudo??

[13:00] <tadzik> it is

[13:00] <tadzik> you blessed [] as Foo

[13:01] <tadzik> r: say my $a = (class Foo {}).bless([]); say $a ~~ Foo; say $a ~~ Array;

[13:01] <p6eval> rakudo d61049: OUTPUT«␤False␤True␤»

[13:01] <tadzik> n: say my $a = (class Foo {}).bless([]); say $a ~~ Foo; say $a ~~ Array;

[13:01] <p6eval> niecza v17-3-gdaf09af: OUTPUT«Foo.new(...)␤True␤False␤»

[13:01] <tadzik> or something

[13:02] <tadzik> r: say (class Foo {}).WHAT

[13:02] <p6eval> rakudo d61049: OUTPUT«Foo()␤»

[13:02] <masak> I'm with Niecza on this one, I believe.

[13:02] *** skids left
[13:03] <grondilu> I tried to make something like class Foo is Int {};  sub somefoo returns Foo { Foo.bless: 13 } and it complained that the returned object was not a Foo.

[13:04] <grondilu> (thus my attempt above)

[13:05] *** lichtkind_ joined
[13:06] *** lichtkind left
[13:06] *** lichtkind_ is now known as lichtkind

[13:08] <grondilu> r: class Foo is Int {};  sub somefoo returns Foo { Foo.bless: 13 }; say somefoo.WHAT;

[13:08] <p6eval> rakudo d61049: OUTPUT«Type check failed for return value␤  in sub somefoo at /tmp/42g2EnvfAS:1␤  in block <anon> at /tmp/42g2EnvfAS:1␤␤»

[13:08] <grondilu> see?

[13:09] <lichtkind> is there no data type for junctions?

[13:09] <grondilu> niecza: class Foo is Int {};  sub somefoo returns Foo { Foo.bless: 13 }; say somefoo.WHAT;

[13:09] <p6eval> niecza v17-3-gdaf09af: OUTPUT«Foo()␤»

[13:10] *** cognominal_ joined
[13:11] <PerlJam> lichtkind: Junction

[13:12] * grondilu just sent rakudobug

[13:12] <PerlJam> r: my $x = 1|2|3; say $x.WHAT

[13:12] <p6eval> rakudo d61049: OUTPUT«Junction()␤»

[13:13] <flussence> r: multi sub infix:<~eq>(Str $a, Str $b) { uc $a eq uc $b }; say 'Foo' ~eq 'foo'

[13:13] <p6eval> rakudo d61049: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&eq' called (line 1)␤»

[13:13] *** cognominal left
[13:14] *** sisar left
[13:15] *** sisar joined
[13:15] <tadzik> probably gets parsed as 'Foo' ~ eq('foo')

[13:15] <PerlJam> sounds like a failure of LTM

[13:15] <tadzik> aye

[13:16] <masak> it does.

[13:16] <masak> r: multi sub infix:<$$$>($a, $b) {}; 1 $$$ 1

[13:16] <p6eval> rakudo d61049:  ( no output )

[13:16] <masak> r: multi sub infix:<$$$>($a, $b) {}; say 1 $$$ 1

[13:16] <p6eval> rakudo d61049: OUTPUT«Nil␤»

[13:16] *** grondilu left
[13:17] <masak> hm, seems that Rakudo recognizes new infix operators without a problem.

[13:17] *** cognominal_ left
[13:17] <masak> r: multi sub infix:<+->($a, $b) { 42 }; say 1 +- 1

[13:17] <p6eval> rakudo d61049: OUTPUT«0␤»

[13:17] *** cognominal_ joined
[13:17] <tadzik> LTA LTM

[13:17] <masak> but longest doesn't win if it's user-defined.

[13:17] * masak submits rakudobug

[13:19] <PerlJam> flussence: Were you using ~eq to mean "approximately equal"? 

[13:20] <tadzik> r: multi sub infix:<mleq>(Str $a, Str $b) { uc $a eq uc $b }; say 'Foo' mleq 'foo'

[13:20] <p6eval> rakudo d61049: OUTPUT«FALSE␤»

[13:20] <tadzik> ...huh?

[13:20] <tadzik> oh

[13:20] <tadzik> r: multi sub infix:<mleq>(Str $a, Str $b) { uc($a) eq uc($b) }; say 'Foo' mleq 'foo'

[13:20] <p6eval> rakudo d61049: OUTPUT«True␤»

[13:21] <PerlJam> wait ... why is it "FALSE" and not "False"?

[13:21] <tadzik> uc($a eq uc $b)

[13:22] <PerlJam> oh, duh

[13:22] <PerlJam> I got the precedence problem, but didn't follow it through 

[13:23] *** spider-mario joined
[13:24] <lichtkind> PerlJam: thatnks but not seen that

[13:24] <lichtkind> and can be ! used also junctive?

[13:26] <PerlJam> lichtkind: what do you mean by "used junctive"? 

[13:28] <masak> it's not an infix op, if that's what you're asking.

[13:29] <masak> pugs: say 1 ! 2 ! 3

[13:29] <p6eval> pugs: OUTPUT«*** ␤    Unexpected "!"␤    expecting operator, ":" or ","␤    at /tmp/LLMTQPVLeq line 1, column 7␤»

[13:29] *** rafl left
[13:29] *** pernatiy joined
[13:29] <masak> maybe it was once upon a time. I have a vague memory it might once have meant none(), but don't quote me on that.

[13:29] <PerlJam> yeah, I was thinking that too

[13:30] <masak> r: say 1 ^ 2 ^ 3

[13:30] <p6eval> rakudo d61049: OUTPUT«one(1, 2, 3)␤»

[13:30] <lichtkind> r: say 'w' ~~ 3 ! 4 ! 5;

[13:30] <p6eval> rakudo d61049: OUTPUT«===SORRY!===␤Confused␤at /tmp/bmAXi4AG6V:1␤»

[13:30] <lichtkind> looks like answer is no

[13:30] *** fgomez joined
[13:30] <masak> lichtkind: the answer is no.

[13:30] <lichtkind> r: say 'w' ~~ (3 ! 4 ! 5);

[13:30] <p6eval> rakudo d61049: OUTPUT«===SORRY!===␤Confused␤at /tmp/v6EDMcgAUC:1␤»

[13:30] <lichtkind> thanks

[13:30] <lichtkind> and is junction mutable or immutable type?

[13:31] <dalek> tablets: fc2a1b5 | (Siddhant Saraf)++ | docs/tablet-2-basic-syntax.txt:

[13:31] <dalek> tablets: link fixes

[13:31] <dalek> tablets: review: https://github.com/perl6/tablets/commit/fc2a1b53d0

[13:31] <dalek> tablets: 6970725 | (Siddhant Saraf)++ | docs/tablet-2-basic-syntax.txt:

[13:31] <dalek> tablets: more link fixes

[13:31] <dalek> tablets: review: https://github.com/perl6/tablets/commit/6970725f82

[13:31] <dalek> tablets: c228e93 | (It's secret to everybody)++ | docs/tablet-2-basic-syntax.txt:

[13:31] <dalek> tablets: Merge pull request #6 from Siddhant/master

[13:31] <dalek> tablets: 

[13:31] <dalek> tablets: Link fixes

[13:31] <dalek> tablets: review: https://github.com/perl6/tablets/commit/c228e935e2

[13:31] *** rafl joined
[13:32] *** fgomez left
[13:33] *** fgomez joined
[13:33] <dalek> tablets: 913d92a | (Herbert Breunung)++ | docs/ (4 files):

[13:33] <dalek> tablets: add table for junctions

[13:33] <dalek> tablets: review: https://github.com/perl6/tablets/commit/913d92aaa2

[13:33] <dalek> tablets: c31381b | (Herbert Breunung)++ | docs/tablet-2-basic-syntax.txt:

[13:33] <dalek> tablets: Merge branch 'master' of github.com:perl6/tablets

[13:33] <dalek> tablets: review: https://github.com/perl6/tablets/commit/c31381bd2a

[13:33] <lichtkind> i suppose immutable

[13:34] <masak> I suppose so too.

[13:36] <jnthn> r: say my $a = (class Foo {}).bless([]); say $a.WHAT

[13:36] <p6eval> rakudo d61049: OUTPUT«␤Array()␤»

[13:37] <jnthn> That is exactly correct.

[13:37] <jnthn> The first argument to bless is the candidate to bless.

[13:37] <masak> first argument... after the invocant.

[13:38] <masak> so you're saying the above is to be read as "bless the type object Foo as this instance of Array"?

[13:38] <masak> that makes no sense.

[13:39] *** birdwind1pbird joined
[13:42] <jnthn> masak: Right, the code is erroneous.

[13:42] <jnthn> You only get away with it because BUILDALL doesn't find any attributes in Foo to build, I suspect.

[13:43] <jnthn> So BUILDALL is a no-op and bless returns the candidate and they you go.

[13:43] *** tyatpi joined
[13:43] <jnthn> r: my $a = (class Foo { has $.a }).bless([], :a(42)); say $a.WHAT

[13:43] <p6eval> rakudo d61049: OUTPUT«Array()␤»

[13:43] <jnthn> Hm :)

[13:43] <jnthn> I wonder if it looks at the candiate's types rather than the invocant too :)

[13:43] <jnthn> er, candidates atts rather.

[13:44] <jnthn> *attrs

[13:44] <jnthn> Either way, it's erroneous code. It will either error out at some point, give an array, or just do something useless

[13:44] <dalek> tablets: 067b4c0 | (Herbert Breunung)++ | docs/appendix- (3 files):

[13:44] <dalek> tablets: add junction and each type

[13:44] <dalek> tablets: review: https://github.com/perl6/tablets/commit/067b4c0151

[13:45] <lichtkind> masak: no it was undefined :)

[13:45] <jnthn> We could in theory sanity check it. But clutter up a hot path like object instantiation with a check for something terribly unlikely to happen unless you're being obtuse? No. Some things are just gonna be erroneous.

[13:45] <moritz> lichtkind: when people submit pull requestions for any of the perl6 projects, I usually hand them a commit bit immediately

[13:46] <moritz> lichtkind: should I do the same thing for pull requests to the tablets?

[13:46] <masak> jnthn: agreed.

[13:47] <moritz> (I think that's closest to the "wiki" style of collaborating, and has worked well for us in the past)

[13:48] <benabik> "Thank you for submitting a pull request.  You are now part of the perl6 organization.  You may celebrate by merging your request."

[13:49] <lichtkind> moritz: yes unless it looks odd

[13:49] <lichtkind> moritz: thank you

[13:49] <lichtkind> wee came nice along since 3 weeks ago :) dont you thin

[13:49] <lichtkind> k

[13:54] *** birdwind1pbird left
[13:55] <lichtkind> im really pleased with the shape the tablets are in now

[14:04] <masak> r: class A { has @.array = [] }; say A.new.array.elems

[14:04] <p6eval> rakudo d61049: OUTPUT«1␤»

[14:05] <masak> Timbus: lib/Net/IRC/Bot.pm:21 -- is this the default you intend for @channels -- for the array to have an empty array as its only element?

[14:05] *** noam_ left
[14:06] *** noam_ joined
[14:06] <masak> also, the twigil-less style was confusing at first, because everyone else seems to use twigils.

[14:09] *** tokuhirom left
[14:09] <lichtkind> moritz: are you mrglitch?

[14:10] *** tokuhirom joined
[14:14] *** tokuhirom left
[14:14] <tadzik> https://github.com/TiMBuS/Net--IRC/blob/master/lib/Net/IRC/Modules/Tell.pm#L46

[14:14] <tadzik> this probably wants to be a module

[14:15] *** constantined joined
[14:16] *** bjarneh_ left
[14:18] <dalek> tablets: 0bde7c4 | (Siddhant Saraf)++ | docs/tablet-2-basic-syntax.txt:

[14:18] <dalek> tablets: more broken link fixes

[14:18] <dalek> tablets: review: https://github.com/perl6/tablets/commit/0bde7c490c

[14:18] <dalek> tablets: 0666c63 | (It's secret to everybody)++ | docs/tablet-2-basic-syntax.txt:

[14:18] <dalek> tablets: Merge pull request #7 from Siddhant/master

[14:18] <dalek> tablets: 

[14:18] <dalek> tablets: More broken links fixed

[14:18] <dalek> tablets: review: https://github.com/perl6/tablets/commit/0666c63dfa

[14:18] <goraki> tadzik: that wants to be a date/time tempting module (when it grows up to be big and strong)

[14:19] <mikec__> i want to be a perl6 module when i grow up

[14:19] <tadzik> :)

[14:19] <masak> p6: say round 4/5

[14:19] <p6eval> pugs, rakudo d61049, niecza v17-3-gdaf09af: OUTPUT«1␤»

[14:19] <tadzik> goraki: tempting?

[14:20] <gfldex> lichtkind: tablet-2-basic-syntax.txt ~~ s/thatswhy/that's why/

[14:20] <goraki> tempting / formatting, as in you define the format (or name a predefined format) and it gives it to you.

[14:20] <tadzik> oh, I see

[14:21] <PerlJam> "templating"

[14:21] <PerlJam> ?

[14:21] <goraki> PerlJam: yes! that's the word I wanted to type...

[14:21] *** shinobicl joined
[14:21] <goraki> oh, right. it's OS X's auto-correct.

[14:21] <goraki> it doesn't like "templating"

[14:22] <PerlJam> silly computer! ... thinking it knows more than its human

[14:22] <masak> far too common a problem.

[14:22] *** bjarneh joined
[14:22] <masak> software consists of memories, guesses, and apologies.

[14:22] <masak> but programmers generally don't teach their software to apologize properly.

[14:23] <PerlJam> apologies are for the weak!

[14:24] <goraki> masak: too true.

[14:24] <goraki> PerlJam: or those with too many other things to do.

[14:25] <PerlJam> After 2001: A Space Odyssey, a computer saying "I'm sorry" has had a bit of a stigma attached to it  :)

[14:25] <masak> PerlJam: I disagree on both counts.

[14:26] <masak> apologies are for the robust, including software.

[14:26] <masak> and HAL just followed his programming, which was clearly wrong in retrospect.

[14:27] <masak> HAL had a set of goals, and he used available resources to fulfill those.

[14:28] <geekosaur> 2010 the book had some stuff about that... think it ended up being one throwaway line in the movie

[14:28] <masak> something like that.

[14:29] <masak> but I like this part of it. HAL did bad things not because he "went rogue" or some other unlikely happenstance. he did bad things because he was programmed to.

[14:29] <masak> that's very much the line of thinking of much of Asimov's robot stories, too.

[14:30] <geekosaur> yep

[14:34] <PerlJam> masak: Nothing you've said so far has sounded like disagreement with my second statement :)

[14:35] <masak> PerlJam: hm, true.

[14:35] <masak> PerlJam: I for one wouldn't mind having my computer say "I'm sorry". :)

[14:35] <PerlJam> and I should have put some sort of sarcasm (?) markers around my first statement.

[14:35] <PerlJam> parody maybe?

[14:35] <masak> I understood it as such.

[14:36] <masak> I just have an annoying habit of not replying to sarcasm qua sarcasm. how do you do that, anyway? how to respond to sarcasm? :)

[14:36] <masak> "yeah. heh! the opposite of what you said is, like, so true."

[14:36] <PerlJam> IRC just needs more bandwidth so that you can get inflection and tone 

[14:37] <masak> so what you're saying is, IRC really needs rage faces.

[14:37] * sisar always finds it a bit difficult to detect sarcasm in chats/emails :|

[14:37] <phenny> sisar: 09 May 16:34Z <tadzik> tell sisar yes, you need to recompile ALL THE THINGS

[14:38] <sisar> well, unless someone says "yeah, right" ... thats _always_ sarcasm, right ?

[14:38] <PerlJam> sisar: yeah, right.

[14:38] <tadzik> hehe

[14:38] <masak> right.

[14:38] <masak> yeah.

[14:38] <sisar> :) was just expecting that

[14:38] <tadzik> yeah, sure

[14:39] <masak> really.

[14:39] <mikec__> haha

[14:39] <masak> sure you did.

[14:39] <dalek> ecosystem: 872b125 | jonathan++ | META.list:

[14:39] <dalek> ecosystem: Correct META.info URL for shinobicl++'s Date::WorkdayCalendar module.

[14:39] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/872b125f08

[14:39] <gfldex> .o(Why is there no Q :sarcasm ?)

[14:39] <PerlJam> goraki: because you haven't created it yet!

[14:39] <PerlJam> er, gfldex even

[14:39] <sisar> gfldex: +1

[14:39] <mikec__> that would be really useful

[14:40] <masak> yeah, right.

[14:40] <sisar> LOL

[14:40] <tadzik> q:sarcasm/yeah, I'll use it all the time/

[14:40] <mikec__> haha

[14:40] <masak> mikec__: *you're* really useful :)

[14:40] *** lestrrat left
[14:41] * masak .oO( it's 2012-05-10, and sarcasm has infected #perl6. implosion underway. )

[14:41] <sisar> yay! rosettacode is back !

[14:41] *** lestrrat joined
[14:41] <masak> fantastic.

[14:41] <mikec__> haha

[14:41] <masak> :P

[14:41] <gfldex> there is a typo on modules.perl6.org ~~ s/Date:WorkdayCalendar/Date::WorkdayCalendar/;

[14:42] <tadzik> must be a typo in META.info

[14:42] <sisar> dang :/ another sarcasm-detection failure

[14:42] <gfldex> and the link goes to 404

[14:42] <tadzik> how suprising.

[14:42] *** pernatiy_ joined
[14:43] <jnthn> I just commited an updated link.

[14:43] <jnthn> But modules.perl.org probably not updated yet

[14:43] <sisar> .oO ( have I increased sarcasm on #perl6 ? classic backfire :| )

[14:43] *** pernatiy left
[14:44] <PerlJam> sisar: depends on where the arrow of sarcasm points and its magnitude

[14:45] <goraki> in perl 6, how do you match the inverse of a set (like perl 5's [^\s\-_] for instance)?

[14:45] <PerlJam> goraki: <-[a..z]>

[14:45] <goraki> PerlJam: that makes sense. thanks!

[14:45] * mikec__ goes to write some sarcastically apologetic error messages

[14:45] <tadzik> . o O ( "Your program does not compile. What a shame" )

[14:46] <mikec__> "Yeah, like /that's/ going to work."

[14:46] <tadzik> Acme::SarcasticCompiler

[14:47] <jnthn> That module is possible today. Just monkey-patch all of the X class .message methods :D

[14:47] <tadzik> I was wondering if that'd work

[14:47] <jnthn> Of course it won't!

[14:48] <timotimo> because X classes are compiled into rakudo?

[14:48] <jnthn> timotimo: My "Of course it won't" was sarcasm :P

[14:48] <timotimo> ah

[14:48] <mikec__> hahaha

[14:48] <geekosaur> rakudo insults mode?

[14:48] <tadzik> I was wondering which sentence was sarcastic

[14:48] <masak> jnthn: you seem to really get sarcasm there, buddy.

[14:48] <PerlJam> masak: autopun?

[14:48] <mikec__> can't understand anyone anymore

[14:48] <tadzik> why, I can

[14:48] <PerlJam> well, I guess it's not auto

[14:48] <masak> PerlJam: could be. too confused right now :)

[14:49] <tadzik> I understand everyone _perfectly_

[14:49] <PerlJam> more like recursive

[14:49] <masak> PerlJam: preferably it should be one single unit. the use and mention shouldn't stray too far from each other.

[14:49] <PerlJam> tadzik: really?!?  Could you please explain my wife to me?  :)

[14:49] <masak> right, it's very easy to mix up recursion and autopuns.

[14:49] <masak> or self-reference and autopuns.

[14:50] <masak> they're all related, but not identical. autopuns have this interesting "self-healing" property that the other two don't have.

[14:50] <masak> like, it doesn't have to be an exact match for it to be funny.

[14:51] <masak> PerlJam: I wanted to make a joke about shoehorns, but I couldn't figure out a way to insert it into a conversation.

[14:51] <PerlJam> heh

[14:51] *** thou joined
[14:52] *** wtw left
[14:53] *** thou left
[14:53] *** fgomez left
[14:56] *** fgomez joined
[14:57] *** tyatpi left
[14:57] *** tyatpi joined
[14:59] * masak .oO( Some people, when faced with a problem, think "I know! I'll make an autopun!" Now they have a snowclone and a problem. )

[15:00] <TimToady> snowclone quineme cometclone

[15:01] <masak> :P

[15:01] <TimToady> s:random/ '' /man/

[15:01] * [Coke] fails to get "snowclone".

[15:02] <masak> [Coke]: http://en.wikipedia.org/wiki/Snowclone

[15:02] <PerlJam> .oO( snowclown? )

[15:02] <TimToady> it's a sad clown

[15:03] <colomon> masak++

[15:05] <TimToady> masak: let doesn't make much sense in a loop in any case, so I'm inclined to leave loop goto's as "success"

[15:05] <PerlJam> TimToady: I still don't understand your statement "snowclone quineme cometclone" because I keep reading snowclone and cometclone as quoting constructs  :)

[15:05] <masak> TimToady: sounds fine.

[15:06] <TimToady> PerlJam: that's how they were intended, except for the other half of the quine

[15:06] <masak> everyone knows that snowman and comet are matching delimiters :)

[15:06] <PerlJam> you're in a maze of twisty linguistics, all alike

[15:07] <TimToady> s/ic//

[15:07] <PerlJam> (better than a maze of twisty linguists, for sure!)

[15:07] * masak .oO( you're in a maize or twisty linguinis, all tasty )

[15:08] <masak> of*

[15:08] <PerlJam> masak++ x 2 for that one!

[15:08] <masak> must be dinnertime soon.

[15:08] *** dakkar left
[15:08] *** birdwindupbird left
[15:09] *** dakkar joined
[15:09] <PerlJam> What's the term for a search phrase for which google has no results?

[15:09] <PerlJam> It's almost like a googlewhack, but better 

[15:09] *** pernatiy joined
[15:10] <TimToady> when't is just none

[15:11] *** pernatiy_ left
[15:12] <masak> ooh

[15:12] <mikec__> :(

[15:12] <TimToady> well, 'when none'

[15:12] <masak> I mean, "well, that's just great".

[15:15] <mikec__> hometime. see you tomorrow, #perl6

[15:16] <mikec__> (i'll miss you a lot.)

[15:16] <tadzik> yeah, sure

[15:16] <masak> right.

[15:16] <mikec__> :D

[15:16] <gfldex> std: sub s(){ class A {} };

[15:16] <masak> hey! we'll miss you too!

[15:16] <p6eval> std 8632387: OUTPUT«ok 00:00 41m␤»

[15:16] <gfldex> r: sub s(){ class A {} };

[15:16] <p6eval> rakudo d61049:  ( no output )

[15:16] *** daxim left
[15:18] <PerlJam> btw, we should be careful.  Sarcasm (even delivered humorously) tends to foster negative vibes.  We don't want to end up like efnet #perl  (or some of the other #perl)

[15:19] <masak> PerlJam: I think about that a lot.

[15:19] *** thou_ joined
[15:19] <masak> not just about sarcasm, but about mechanisms that make a community feel less warm and accomodating.

[15:20] *** bjarneh left
[15:20] <masak> in my AFK life, I have a default tone of voice that lends itself well to sarcasm. I sometimes felt it was a challenge *not* to be interpreted sarcastically.

[15:20] *** kresike left
[15:21] <masak> the best antidote I've found so far is to emphasize a first utterance by repeating or enforcing it with a second, similar one.

[15:21] <masak> that seems to cancel out any suspicions of sarcasm.

[15:21] <mikec__> PerlJam: yeah, true. i figured everyone listening was already in on the sarcasm thing

[15:22] <PerlJam> mikec__: probably they were.  But you don't know who's listening  :)

[15:23] <huf> masak: yeah, right :)

[15:23] <masak> :P

[15:23] <PerlJam> for instance, there have been several conversations oboth here and on #parrot that generated tweets from chromatic where he wasn't participating in the discussion (or even apparently on-channel)

[15:23] <PerlJam> s/obo/bo/

[15:23] <masak> aye.

[15:23] <masak> chromatics is probably reading *these very words*. o.O

[15:24] <mikec__> oh no!

[15:24] <masak> c*

[15:24] <PerlJam> I wonder if we say chromatic enough, if he'll be summoned.

[15:24] <masak> nah.

[15:24] <PerlJam> chromatic chromatic chromatic

[15:24] <masak> for that, we'd have to psychoanalyze his writing :)

[15:25] <TimToady> Do Not Taunt HappyFunBall

[15:25] <gfldex> std: sub test() { class A {} }; class A {};

[15:25] <p6eval> std 8632387: OUTPUT«===SORRY!===␤Illegal redeclaration of symbol 'GLOBAL::<A>' (from line 1) at /tmp/pPKBD4uNZY line 1:␤------> sub test() { class A {} }; class A ⏏{};␤Check failed␤FAILED 00:00 41m␤»

[15:25] <sisar> i seem to have somehow inverted my mouse's scrolling. Downscrolling is actualling upscrolling & vice-vesa. Any idea how i can fix it? (Ubuntu)

[15:26] <gfldex> std: sub test() { my class A {} }; class A {};

[15:26] <p6eval> std 8632387: OUTPUT«ok 00:00 41m␤»

[15:26] <goraki> sisar: you're on Lion?

[15:27] <goraki> sisar: maybe Ubuntu is trying to be Lion?

[15:27] <benabik> Lion doesn't invert mouse wheels, only trackpad scrolling.

[15:27] <sisar> goraki: how is that even possible?

[15:27] <goraki> benabik: my mouse wheel is inverted...

[15:28] <goraki> benabik: you do have to turn it on though.

[15:28] <TimToady> turn it over and it should be fine

[15:28] *** JimmyZ joined
[15:28] <sisar> :)

[15:29] *** alvis` joined
[15:29] <sisar> channel #ubuntu is so crowded, its difficult to get any answers...

[15:29] <dalek> tablets: 2254b54 | (Herbert Breunung)++ | docs/appendix- (2 files):

[15:29] <dalek> tablets: fixing format

[15:29] <dalek> tablets: review: https://github.com/perl6/tablets/commit/2254b54fee

[15:29] <dalek> tablets: b604a28 | (Herbert Breunung)++ | docs/tablet-2-basic-syntax.txt:

[15:29] <dalek> tablets: Merge branch 'master' of github.com:perl6/tablets

[15:29] <dalek> tablets: review: https://github.com/perl6/tablets/commit/b604a28995

[15:30] <goraki> sisar: this tells you how to set it up, might serve for getting rid of it: http://www.andybarratt.co.uk/lion-like-scrolling-on-ubuntu-inverse-scrolling-on-linux

[15:30] * TimToady hopes we split #perl6 before that happens

[15:30] * TimToady pictures two #perl3 channels...

[15:30] *** alvis left
[15:30] <sisar> goraki: ah, thanks.

[15:30] <sisar> TimToady: +1

[15:31] <TimToady> or maybe three #perl2 channels...

[15:31] <goraki> #perl2, #perl3 (division into primes)

[15:31] <goraki> factoring!

[15:31] *** ranguard left
[15:32] <geekosaur> it's not difficult to do that swap, scrollwheel is buttons 4 and 5.  xmodmap can swap them

[15:32] *** ranguard joined
[15:32] <geekosaur> probably xinput too

[15:33] *** prammer left
[15:33] <sisar> .oO ( This inversion is growing one me. Weird ... )

[15:33] <sisar> s/one/on

[15:34] <goraki> sisar: if you've got a fancy touch phone you get used to having scrolling work the same way on your desktop pretty quickly.

[15:34] <TimToady> you could also just turn the monitor upside down

[15:34] <TimToady> or wear those glasses that un-invert the world

[15:35] <PerlJam> what I can't get used to is the same buttons on my tv remote that move up and down a channel at a time switch directions when you're looking at the "guide" view with 5 channels at a time.

[15:35] <TimToady> brain plasticity is a wonderful thing

[15:35] <sisar> goraki: yeah, exactly. But then the scrollbars feel weird

[15:36] *** takesako left
[15:37] *** prammer joined
[15:37] *** takesako joined
[15:38] <TimToady> we need to come up with a replacement for 'scroll up' and 'scroll down'

[15:38] <lichtkind> gfldex: thanks

[15:39] <TimToady> scroll earlier/later or some such

[15:39] <sisar> show lower/ show upper ?

[15:40] <TimToady> except the lower line numbers are at the top :)

[15:40] <sisar> oh

[15:40] *** fglock left
[15:41] <TimToady> and 'scroll' is not the problem, the ambiguous orientation of the up/down metaphor is the problem

[15:41] *** ashleydev joined
[15:41] <sisar> aye

[15:41] <TimToady> at least we agree on zoom in/out

[15:41] <goraki> more / less

[15:41] <goraki> that will never be confusing...

[15:42] <TimToady> though why zoom in is a + I don't know

[15:42] <goraki> + magnification

[15:42] <sisar> I was confused  with the + too

[15:42] <TimToady> but the size of what you're seeing goes smaller

[15:43] <TimToady> well, at least they usually put the + at the top, so as not to confuse the up/down metaphor too

[15:43] <goraki> TimToady: the area is smaller, but the size of it on your screen is bigger.

[15:44] <TimToady> no, the bits that were on the screen are now not on the screen at all :)

[15:44] *** alim left
[15:44] <sisar> you can argue either ways

[15:44] *** GlitchMr joined
[15:44] <TimToady> anyway, there's a general principle at work here about flippable metaphors

[15:44] <TimToady> which is why we now talk about tighter or looser precedence

[15:45] <TimToady> much like we don't 'zoom up/down'

[15:45] <sisar> TimToady: what was the problem with higher/ lower precedence ?

[15:45] <TimToady> half the precedence charts in the world are printed with the lower precedence at the top

[15:46] <sisar> oh, yeah !

[15:46] <TimToady> and "precedence" is an abstract enough concept that you have to stop and translate that in your head to "is tighter" anyway

[15:47] *** KyleHa joined
[15:47] *** mdupont left
[15:47] <TimToady> of course, 'tight' is also a metaphor

[15:48] <sisar> was perl6 the first language to talk in terms of tighter and looser precedence ?

[15:48] <TimToady> no

[15:48] <TimToady> perl5 was :)

[15:48] <sisar> perl++

[15:49] *** goraki left
[15:49] <TimToady> and the perl4 Camel had the precedence table upside-down, oops...

[15:50] <PerlJam> I still don't fully grok "is tighter" and "is looser"   (I mean, I understand them fine, but I have to think about it each time still)

[15:51] <sisar> any other programming languages who have adopted this terminology ?

[15:51] *** havenn joined
[15:52] <TimToady> sisar: dunno

[15:52] <sisar> i'll try to find out

[15:53] <TimToady> PerlJam: think of it chemically, as which operators hold onto their operands with tighter/looser chemical bonds

[15:53] <KyleHa> Hugs.

[15:53] <spider-mario> 1+1  *  2

[15:53] <spider-mario> vs. 1  +  1*2

[15:54] <sisar> hugme hug KyleHa 

[15:54] * hugme hugs KyleHa

[15:54] <KyleHa> :)

[15:54] <spider-mario> the first one might suggest that (1+1)*2 is performed because + holds 1s tighter

[15:54] <TimToady> "I'm not really bad--I'm just drawn that way." --Jessica Rabbit

[15:55] <sisar> spider-mario: if you write that on paper, maybe yeah. But for programming languages, not so

[15:55] <TimToady> there are many ways of writing misleading code

[15:56] <TimToady> obfuscation is not always done by removing whitespace

[15:56] <spider-mario> relevant remark

[15:58] <sisar> spider-mario: actually, it would be a nice experiment to try define operator precedence based on whitespace around them :)

[15:58] <sisar> is thee any prior art for that ?

[15:59] *** kboga left
[16:00] <TimToady> whitespace as syntax, yum!

[16:00] <TimToady> </sarcasm>

[16:01] <KyleHa> Tastes like chicken.

[16:01] <sisar> thanks for the sarcasm pointer !

[16:01] <gfldex> i found the right vehicle to better perl6 promotion: http://www.heise.de/bilder/151970/0/1

[16:02] <gfldex> ('use v6','go deaf').pick(1);

[16:02] *** brrt left
[16:02] <spider-mario> r: ('use v6','go deaf').pick.say

[16:02] <p6eval> rakudo d61049: OUTPUT«use v6␤»

[16:02] <spider-mario> :D

[16:02] <sisar> gfldex: now we just need to convince someone to drive _that_ :p

[16:03] <TimToady> I assume the canister recharges from your pedalling...

[16:03] <TimToady> *pedaling

[16:03] <dalek> tablets: 1b6b5a7 | (Herbert Breunung)++ | docs/ (5 files):

[16:03] <dalek> tablets: polish modulo and div ops; new format do alwas line brake after &mdash; unless you want hint incomplete answer

[16:03] <dalek> tablets: review: https://github.com/perl6/tablets/commit/1b6b5a7a45

[16:03] <gfldex> it's fairly safe too

[16:04] <gfldex> in case you get close to a collision you activate the horn to stop your speed

[16:04] <TimToady> retrorockets, yum!

[16:05] <TimToady> but I hope the cannister if full of H2O2, and the horns have a platinum screen

[16:05] <TimToady> *is full

[16:06] <TimToady> otherwise I don't think there will be enough thrust

[16:06] <gfldex> it's a scuba diver tank and the horns are used by tains and ships

[16:06] <gfldex> a british came up with this design

[16:07] <TimToady> I note that with dual rocket engines you don't need vernier rockets to control your roll axis

[16:07] <TimToady> see the Gemini project

[16:07] *** JimmyZ left
[16:08] <TimToady> and we all know that rolling is very important for a bicycle

[16:09] *** kaare_ joined
[16:09] *** KyleHa left
[16:10] *** fgomez left
[16:11] <dalek> tablets: 326497f | (Herbert Breunung)++ | docs/appendix-a-index.txt:

[16:11] <dalek> tablets: polish div

[16:11] <dalek> tablets: review: https://github.com/perl6/tablets/commit/326497f6e4

[16:11] *** fglock joined
[16:13] * jnthn decommutes...and hopes he'll find a tuit or two for later :)

[16:15] *** thelazydeveloper joined
[16:20] *** NamelessTee left
[16:26] *** sergot joined
[16:26] <sergot> hi o/

[16:30] *** ponbiki left
[16:34] *** thou_ is now known as thou

[16:36] *** NamelessTee joined
[16:37] *** rindolf joined
[16:37] *** rindolf left
[16:37] *** rindolf joined
[16:38] *** havenn left
[16:38] *** rindolf left
[16:39] *** rindolf joined
[16:39] *** rindolf left
[16:40] *** fgomez joined
[16:40] *** spider-mario left
[16:43] *** spider-mario joined
[16:47] *** fgomez left
[16:47] *** fgomez joined
[16:52] *** isBEKaml joined
[16:53] *** havenn joined
[16:56] <jnthn> o/

[16:58] *** skids joined
[17:02] <dalek> Perlito: f79354c | (Flavio S. Glock)++ | / (3 files):

[17:02] <dalek> Perlito: Perlito5 - parser: fix regex escape

[17:02] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/f79354ccec

[17:02] *** tyatpi left
[17:03] *** PacoAir joined
[17:04] *** dakkar left
[17:09] <masak> sergocie! \o/

[17:11] <dalek> tablets: ce08eb9 | (Herbert Breunung)++ | docs/appendix- (2 files):

[17:11] <dalek> tablets: fix format of match object methods table

[17:11] <dalek> tablets: review: https://github.com/perl6/tablets/commit/ce08eb9626

[17:14] *** Chillance joined
[17:15] *** lichtkind left
[17:17] *** spider-mario left
[17:23] *** spider-mario joined
[17:36] *** [particle] joined
[17:39] *** aindilis left
[17:40] *** pernatiy left
[17:41] *** aindilis joined
[17:42] *** sisar left
[17:42] *** sisar joined
[17:50] *** fglock left
[17:55] *** GlitchMr left
[17:57] *** daxim joined
[18:00] *** kaleem joined
[18:10] *** spaceships joined
[18:10] *** spaceships left
[18:14] <dalek> tablets: c85a5e0 | (Herbert Breunung)++ | docs/appendix-b-grouped.txt:

[18:14] <dalek> tablets: precise junction description in Table

[18:14] <dalek> tablets: review: https://github.com/perl6/tablets/commit/c85a5e07a8

[18:15] *** spaceships joined
[18:34] *** fhelmberger left
[18:44] *** birdwindupbird joined
[18:50] *** alester joined
[18:53] *** havenn left
[18:57] *** havenn joined
[19:00] <spaceships> script

[19:00] *** spaceships left
[19:01] *** spaceships joined
[19:01] <masak> spaceships: yes.

[19:01] <masak> r: say "OH HAI, I'm a script!"

[19:01] <p6eval> rakudo d61049: OUTPUT«OH HAI, I'm a script!␤»

[19:01] *** spaceships left
[19:01] *** spaceships joined
[19:09] *** shinobicl left
[19:09] *** adu joined
[19:10] <adu> who was interested in perl6 => go compiler?

[19:11] *** NamelessTee left
[19:12] *** jferrero joined
[19:13] <PerlJam> adu: that would be you :)

[19:13] <adu> no I heard someone else was interested too

[19:14] <adu> anyways, I'm interesting in rewriting my go project in perl6

[19:14] *** daxim left
[19:15] <adu> but first I should probably start with simpler things, like a rot13 tool, or a small lib

[19:15] *** snearch joined
[19:16] <adu> anyways, I found a link for whoever was interested: http://golang.org/src/pkg/runtime/runtime.h

[19:17] *** kaleem left
[19:17] *** shinobicl joined
[19:18] <PerlJam> that makes me wonder if anyone has contemplated C-style unions in Perl 6

[19:18] <adu> ew gross

[19:18] *** spaceships left
[19:19] <adu> There are many things better than untagged unions, for example: tagged unions, and interfaces

[19:19] <adu> they're both sum-types

[19:20] <adu> I wouldn't call untagged unions sum-types tho, because they're not very mathematical

[19:22] <adu> how does perl6 do sum-types?

[19:25] <Celelibi> Why would you need that?

[19:25] <masak> adu: you can do it with a where clause, I guess.

[19:26] <masak> adu: enums also soak up some of the use cases.

[19:27] <adu> well, I suppose in dynamic languages, every variable is an infinite sum-type

[19:28] <masak> that sentence sounds like it mixes levels in some way.

[19:28] <adu> heh

[19:28] <adu> probably

[19:28] <masak> r: enum Foo <a b c d>; multi bar(Foo) { say "generic" }; multi bar(Foo::b) { say "specific" }; bar c; bar b

[19:28] <p6eval> rakudo d61049: OUTPUT«generic␤specific␤»

[19:28] <masak> \o/

[19:28] *** NamelessTee joined
[19:29] <masak> there are plenty of opportunities to dispatch on enums the way you'd dispatch on sum types in FP languages.

[19:30] * Celelibi thoughts of the day: If you've never graded student's papers, you don't know how boring this is.

[19:34] <adu> heh

[19:35] <adu> masak: interesting

[19:35] <adu> wait

[19:35] <adu> I thought you had to say "multi sub"?

[19:35] *** NamelessTee left
[19:38] <[Coke]> Celelibi: I imagine that's even worse than coming up with a syllabus.

[19:38] *** icwiener joined
[19:38] *** icwiener left
[19:38] *** icwiener joined
[19:38] <adu> masak: you wrote ::Web?

[19:38] *** bjarneh joined
[19:39] <Celelibi> [Coke]: actually I don't know what is a syllabus.

[19:41] *** mikemol joined
[19:41] <[Coke]> plan of study for a semester.

[19:41] <adu> [Coke]: I heard you've been smoking rakudo

[19:41] <Celelibi> hum... Well, i'm only a teaching assistant, I don't do the lecture nor the syllabus-equivalent. These are left to the real teacher. :)

[19:42] <spider-mario> masak, how to attach data to the different members of the sum type?

[19:43] <[Coke]> adu: Hai.

[19:43] <spider-mario> e.g. in OCaml: type expression = Add of expression * expression | Value of int

[19:43] <adu> hello

[19:43] <[Coke]> adu: see https://gist.github.com/1476841

[19:44] <masak> adu: I wrote large parts of Web.pm, yes.

[19:45] <adu> [Coke]: why are there no persentages after rakudo?

[19:45] <masak> spider-mario: good question. enums aren't ADTs, and this is one case where that shows.

[19:45] <spider-mario> ok

[19:46] <spider-mario> Scala does that with “case classes”

[19:46] <masak> I've sometimes dreamt of developing an ADT module for Perl 6. maybe the time for that draws near.

[19:46] <spider-mario> for that example, Expression would have been the super class of Add and Value

[19:46] <masak> it would hook nicely into the type system (AbstractDataTypeHOW?), and given/when statements, and signatures.

[19:46] <spider-mario> and Add and Value would have had their additional data as class members

[19:46] <masak> spider-mario: yes, I know. it's quite neat how it works.

[19:46] <adu> # 02/12/2012 - niecza at 101.07% -- does this mean in Feb niecza passed more tests than rakudo?

[19:47] <spider-mario> is it not? :)

[19:47] <masak> spider-mario: we could sit down some day and sketch out how it'd all look in Perl 6.

[19:47] <masak> spider-mario: there are nice things that can be done there with signatures, for sure.

[19:47] <masak> adu: aye.

[19:47] <spider-mario> certainly

[19:47] <adu> cool

[19:47] <adu> are perl6 roles similar to golang interfaces?

[19:48] <spider-mario> btw, I’ve been wondering how easy it was to require a function parameter to implement several interfaces, in Go.

[19:48] <spider-mario> in Haskell for typeclasses, it’s quite easy

[19:49] <spider-mario> (Num a, Read a) => a […]

[19:49] *** ponbiki joined
[19:49] <masak> adu: somewhat. they fill the same niche, certainly.

[19:50] <masak> adu: but golang interfaces can't contain an implementation; roles can.

[19:50] <masak> and I've seen nothing to correspond to parameterized roles in go.

[19:51] <adu> sounds closer to C++ templates or Haskell typeclasses

[19:52] *** havenn left
[19:54] <masak> they do a number of different things. but all of them having to do with re-use of behavior.

[19:55] *** orphu left
[19:55] *** tyatpi joined
[19:58] *** bjarneh left
[20:00] *** havenn joined
[20:07] *** shinobicl left
[20:19] *** noam_ left
[20:20] *** noam_ joined
[20:24] *** orphu joined
[20:25] *** snearch left
[20:30] *** orphu left
[20:34] <[Coke]> adu: (no percent) 100% is implied there.

[20:34] *** jferrero left
[20:34] <[Coke]> adu: niecza at 101.07%, yes. For a brief time niecza was running more spectests.

[20:34] <[Coke]> I changed the comments layout a few times, but the raw data is the same layout since I started.

[20:35] <[Coke]> (all generated from t/spec/test_summary) in roast.

[20:35] *** shinobicl joined
[20:38] *** kaare_ left
[20:45] <masak> 'night, #perl6

[20:49] <[Coke]> ¡buenos sueños!

[20:51] <adu> sweet

[20:54] *** Araq joined
[20:55] <[Coke]> "Impl",      "pass","fail","todo","skip","plan","spec"

[20:55] <[Coke]> # 05/10/2012 - rakudo++ (22026); niecza (92.45%); pugs (35.34%)

[20:55] <[Coke]> "niecza",     20364,    28,   762,  1456, 22610, 24127

[20:55] <[Coke]> "pugs"  ,      7784,  1880,  3063,  1298, 14025, 23988

[20:55] <[Coke]> "rakudo",     22026,    30,   705,  1903, 24664, 24137

[20:55] <[Coke]> I seem to have injured pugs with my LC commit. Will have to double check that.

[20:56] <dalek> tablets: 0d9424d | (Herbert Breunung)++ | docs/appendix-b-grouped.txt:

[20:56] <dalek> tablets: link from match var to match var methods

[20:56] <dalek> tablets: review: https://github.com/perl6/tablets/commit/0d9424db98

[20:56] <benabik> [Coke]: Someone really needs to look into how Pugs is doing UTF8.  I highly suspect that GHC is doing decoding before it hits the decodeUTF8 function.

[20:56] <[Coke]> benabik: if I knew any haskell at all, I would totally do that. ;)

[20:57] <benabik> [Coke]: Fair enough.  But the multiple decodings are what's causing the issue.  Linux only works if it's set one way and OS X the other.  :-

[20:57] <benabik> :-/

[21:03] *** benabik left
[21:12] *** bjarneh joined
[21:14] *** kborer joined
[21:15] *** birdwindupbird left
[21:18] <[Coke]> I swear I tried this yesterday and it worked fine. 

[21:18] <[Coke]> (on both mac & linux)

[21:18] <[Coke]> so, I suspect my default env has something set that cron doesn't.

[21:20] *** adu left
[21:28] <geekosaur> check your ghc version and $LANG/$LC_ALL

[21:29] <geekosaur> older ghc didn't do UTF8 and required you to use the utf8-string package to decode/encode; newer ghc's runtime does it and you'll end up double encoding/decoding if you use utf8-string.  newer ghc also checks $LANG / $LC_ALL to see whether (and how) to encode/decode, while utf8-string assumes a UTF8 locale.

[21:30] <Araq> er ... so ghc's behaviour depends on a env var and is not referentially transparent? o.O

[21:30] <Araq> that's ... really amusing

[21:31] <geekosaur> what?  it's all in IO, of course it isn't referentially transparent

[21:31] <Araq> oh ok, I misunderstood

[21:33] *** ponbiki left
[21:34] *** benabik joined
[21:43] *** Chillance left
[21:43] *** Chillance joined
[21:44] <sergot> 'night o/ !

[21:44] *** sergot left
[21:45] <dalek> specs: efa4c18 | (Matthew Wilson)++ | S05-regex.pod:

[21:45] <dalek> specs: missing

[21:45] <dalek> specs: review: https://github.com/perl6/specs/commit/efa4c189e3

[21:46] <diakopter> hmm, dalek forgot my username

[21:48] *** alester left
[21:49] *** Araq left
[21:51] <diakopter> TimToady: is  rule bar {<foo>}  LTM if foo is?

[21:55] *** lestrrat left
[21:56] *** lestrrat joined
[22:02] *** lestrrat left
[22:02] *** lestrrat joined
[22:06] *** havenn left
[22:07] *** havenn joined
[22:09] *** d4l3k_ joined
[22:10] *** alvis`` joined
[22:12] *** dalek left
[22:12] *** thelazydeveloper left
[22:12] *** _ilbot left
[22:12] *** alvis` left
[22:13] *** d4l3k_ is now known as dalek

[22:17] *** _ilbot joined
[22:28] *** spider-mario left
[22:30] *** lestrrat left
[22:31] *** lestrrat joined
[22:33] *** havenn left
[22:34] *** PacoAir left
[22:36] *** spaceships joined
[22:52] <sorear> good * #perl6

[22:54] <diakopter> o/

[23:01] <sorear> o/ diakopter

[23:05] <diakopter> niecza: repeat { foo: say(3); bar: say(4) } while 0; goto bar;

[23:05] <p6eval> niecza v17-3-gdaf09af: OUTPUT«===SORRY!===␤␤Undeclared routine:␤      'bar' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1364 (die @ 3) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 33) ␤  at /home/…

[23:06] <diakopter> oh well

[23:21] <diakopter> nqp: say("alive")

[23:21] <p6eval> nqp: OUTPUT«alive␤»

[23:26] *** kborer left
[23:27] *** Chillance left
[23:30] <sisar> r: https://gist.github.com/2656561

[23:30] <p6eval> rakudo d61049: OUTPUT«5 6 5 7 4␤»

[23:30] <sisar> n: https://gist.github.com/2656561

[23:30] <p6eval> niecza v17-3-gdaf09af: OUTPUT«4 5 6 5 7  ␤»

[23:30] <sisar> ^ nieczabug (?)

[23:38] *** spaceships left
[23:38] <sorear> probably

[23:38] <sorear> but use .rotate

[23:50] *** shinobicl left
[23:53] *** whiteknight joined
[23:56] *** shinobicl joined
