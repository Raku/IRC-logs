[00:05] <grondilu> How Perl6 treating decimals as rationals helped me solved a problem:  http://perlmonks.org/?node_id=1004081

[00:10] <grondilu> s/solved/solve/

[00:18] *** Chillance left
[00:18] *** Guest58684 left
[00:25] *** rjt__ joined
[00:30] <felher> 'night, #perl6 :)

[00:31] <sorear> night felher 

[00:36] *** arlinius left
[00:43] *** xilo_ joined
[00:47] *** gdey left
[00:50] *** Guest58684 joined
[00:51] *** Pzt3 joined
[00:52] *** bowtie left
[00:54] *** xilo_ left
[00:54] *** xilo_ joined
[00:55] *** xilo_ left
[00:55] *** xilo_ joined
[00:58] *** grondilu left
[01:00] *** anuby joined
[01:00] *** lue left
[01:08] *** ifim left
[01:10] *** hypolin joined
[01:13] *** lue joined
[01:19] *** anuby_ joined
[01:20] *** anuby left
[01:20] *** aloha left
[01:21] *** aloha joined
[01:23] *** xilo_ left
[01:24] *** xilo_ joined
[01:25] *** benabik left
[01:26] *** benabik joined
[01:27] *** Guest58684 left
[01:28] *** benabik left
[01:42] *** flussence left
[01:43] *** flussence joined
[01:44] *** xilo_ left
[01:44] *** xilo_ joined
[02:02] *** araujo left
[02:06] *** gootle joined
[02:33] *** BillySeth|bbl is now known as BillySeth

[02:33] *** benabik joined
[02:39] *** hypolin left
[02:52] *** hypolin joined
[03:02] *** xilo_ left
[03:03] *** xilo_ joined
[03:07] <[Coke]> phenny: ask moritz to review https://rt.perl.org/rt3/Ticket/Display.html?id=59794

[03:07] <phenny> [Coke]: I'll pass that on when moritz is around.

[03:12] *** leont_ joined
[03:26] *** leont_ left
[03:43] *** benabik left
[03:48] *** hypolin left
[03:50] *** benabik joined
[03:53] *** rjt__ left
[04:01] *** Pzt3 is now known as PZt

[04:02] *** hypolin joined
[04:07] *** xilo__ joined
[04:07] *** xilo__ left
[04:09] *** benabik left
[04:41] *** xilo_ left
[04:43] *** BillySeth is now known as BillySleep

[04:46] <xenoterracide> are IO objects cross platform like p5 Path::Class

[04:50] *** Entonian joined
[04:51] *** am0c joined
[04:53] *** benabik joined
[04:54] *** Entonian left
[04:56] *** gdey joined
[04:57] *** hypolin left
[04:57] *** hypolin joined
[04:59] *** sjohnson is now known as _

[04:59] *** _ is now known as Guest51144

[05:03] *** gdey left
[05:05] *** xinming_ joined
[05:06] *** aloha left
[05:07] *** aloha joined
[05:08] *** xinming left
[05:13] *** kaleem joined
[05:17] *** Guest58684 joined
[05:26] *** xinming_ left
[05:27] *** xinming joined
[05:28] *** skids left
[05:30] *** chee left
[05:31] *** chee joined
[05:42] *** am0c left
[05:44] *** am0c joined
[05:50] *** birdwindupbird joined
[06:04] *** hash_table joined
[06:09] *** Patterner left
[06:18] *** wamba joined
[06:23] *** kaleem left
[06:23] *** kaleem joined
[06:24] *** Psyche^ joined
[06:24] *** Psyche^ is now known as Patterner

[06:29] *** hash_table left
[06:32] *** Guest58684 left
[06:39] * xenoterracide wonders about ACCEPTS ... it's a very odd name

[06:39] <xenoterracide> it's meaning seems to be that of which I would expect to be equals

[06:41] <sorear> but it's not equality, in general

[06:41] <sorear> it's pattern matching

[06:41] <sorear> n: say ?( /foo/.ACCEPTS('foobar') )

[06:41] <p6eval> niecza v22-32-gee5dcf1: OUTPUT«True␤»

[06:42] <sorear> n: say ?( { *.chars > 4 }.ACCEPTS('foobar') )

[06:42] <p6eval> niecza v22-32-gee5dcf1: OUTPUT«True␤»

[06:45] *** Guest51144 is now known as sjohnson

[06:46] *** araujo joined
[06:46] *** araujo left
[06:46] *** araujo joined
[07:15] *** Woodi left
[07:15] *** Woodi joined
[07:32] *** SamuraiJack joined
[07:39] *** am0c left
[07:43] <moritz> \o

[07:43] <phenny> moritz: 03:07Z <[Coke]> ask moritz to review https://rt.perl.org/rt3/Ticket/Display.html?id=59794

[07:46] <xenoterracide> Found no writable directory into which panda could be installed

[07:46] <sorear> o/ moritz

[07:47] <xenoterracide> IO::Path.new(basename => "panda", directory => "/home/xenoterracide/.perl6/2012.10")  in block  at bootstrap.pl:19 # I just created it with mkdir -p as same user

[07:51] <xenoterracide> sorear: also on earlier ACCEPTS, I guess I was reading the docs wrong... 

[07:52] *** wamba left
[07:54] *** sorenso joined
[07:55] <moritz> r: say &time

[07:55] <p6eval> rakudo a41a48: OUTPUT«Nil␤»

[07:55] <moritz> r: say &term:<time>

[07:55] <p6eval> rakudo a41a48: OUTPUT«sub term:<time>() { ... }␤»

[07:57] <xenoterracide> is there any way to introspect a module to see what it imported?

[07:58] <sorear> r: use Test; say Test::EXPORT::.keys

[07:58] <p6eval> rakudo a41a48: OUTPUT«ALL DEFAULT␤»

[07:58] <sorear> r: use Test; say Test::EXPORT::DEFAULT::.keys

[07:58] <p6eval> rakudo a41a48: OUTPUT«&plan &pass &ok &nok &is &isnt &is_approx &todo &skip &skip_rest &diag &flunk &isa_ok &dies_ok &lives_ok &eval_dies_ok &eval_lives_ok &is_deeply &done_testing &done␤»

[07:59] <sorear> something like that?

[07:59] <xenoterracide> sorear: yeah, oddly enough I was trying to find what test could do, so double thanks

[08:08] *** flightrecorder joined
[08:17] <jnthn> morning o/

[08:18] *** FROGGS joined
[08:19] <moritz> \o

[08:21] <moritz> [Coke]: RT #59794 closed, thanks

[08:23] <sorear> o/

[08:25] <xenoterracide> are there docs on mkdir() can it do mkdir -p?

[08:28] <FROGGS> sad that it doesnt read from env vars, that would be a workaround

[08:28] <FROGGS> but I dont know if it already can do -p by some switch

[08:28] <tadzik> xenoterracide: Shell::Command has mkpath()

[08:29] *** atrodo left
[08:30] *** sorenso left
[08:32] *** sorenso joined
[08:36] *** domidumont joined
[08:37] *** fhelmberger joined
[08:40] <xenoterracide> tadzik: thanks, I sent you a patch

[08:41] <tadzik> xenoterracide: yeah, looking

[08:42] <tadzik> Of course, I'm scared because it touches bootstrap.pl :P

[08:42] <tadzik> xenoterracide: I'll set it throughougl... carefully when I'm back home, ok?

[08:43] <tadzik> bootstrap.pl has a history of breaking in random moments on random platforms and making my cry

[08:43] <xenoterracide> tadzik: no worries... the test case was a root install of perl6, and no ~/.perl6

[08:44] <xenoterracide> tadzik: at the very least should probably add the warn message, so at least people can know what directory it's trying

[08:44] <xenoterracide> a recursive mkdir might be better than using Shell::Command :/

[08:44] <tadzik> xenoterracide: I see. I think that warn could be a bit more user-fiendly thing though

[08:44] <tadzik> well, merged into the following die() maybe

[08:45] <tadzik> xenoterracide: mkpath() is a recursive mkdir, really :)

[08:45] <xenoterracide> yeah could be, this is me being very tired 

[08:45] <tadzik> https://github.com/tadzik/perl6-File-Tools/blob/master/lib/Shell/Command.pm#L46

[08:45] <xenoterracide> tadzik: yeah but does it use an actual shell command? that wouldnt' be very portable

[08:45] <tadzik> sure. Thanks for the discovery and the patch :)

[08:46] <tadzik> xenoterracide++

[08:46] <xenoterracide> ah

[08:46] <tadzik> xenoterracide: nono. Shell::Command exists for the purpose of not running any shell commands

[08:46] <tadzik> so it's mkdir -p, rm -rf etc reimplemented in Perl

[08:46] <jnthn> maybe it shoulda been called Shellless::Command :P

[08:46] <tadzik> Sellfish::Command

[08:46] <xenoterracide> heh

[08:47] <moritz> who's eating shell fish?

[08:48] <xenoterracide> maybe mkdir should just be more DWIM

[08:48] * jnthn ain't eating 'em...they make him ill

[08:48] <xenoterracide> pass 'em

[08:48] <xenoterracide> I'll eat 'em

[08:49] <xenoterracide> :D

[08:50] *** kaleem left
[09:02] *** cognominal left
[09:05] *** domidumont left
[09:06] *** sqirrel joined
[09:06] *** domidumont joined
[09:07] *** kresike joined
[09:07] <kresike> hello all you happy perl6 peopl

[09:07] <kresike> e

[09:17] <jnthn> o/ kresike

[09:17] <kresike> jnthn, o/

[09:18] <tadzik> xenoterracide: hm, I don't quite get panda #26

[09:18] <tadzik> where did that shebang come from, Rakudo Star?

[09:20] <xenoterracide> tadzik: yeah, I'm trying to figure it out actually

[09:20] <xenoterracide> I don't know much about this build chain

[09:21] <xenoterracide> seems like it may have created some things using the full path

[09:21] *** wamba joined
[09:22] <tadzik> I don't know where that would come from

[09:22] <xenoterracide> hmm

[09:22] <tadzik> https://github.com/tadzik/panda/blob/master/bin/panda#L1 has the good shebang

[09:22] <tadzik> must be Star doing some tricks

[09:22] <xenoterracide> must be

[09:22] <xenoterracide> star  + notsofakeroot

[09:22] <xenoterracide> eq disaster

[09:22] <xenoterracide> or somesuch

[09:23] * xenoterracide see's if a rebuild ensuring the build is done in a fakeroot works

[09:24] *** PerlPilot joined
[09:29] *** lue left
[09:29] *** PerlJam left
[09:29] *** rking left
[09:32] *** cognominal joined
[09:33] *** wamba left
[09:33] *** brrt joined
[09:34] *** wamba joined
[09:39] <brrt> \o perl6

[09:40] *** lue joined
[09:40] *** rking joined
[09:59] *** lue left
[09:59] *** rking left
[10:00] * xenoterracide wonders if this blog post does evil things that are causing my breakage

[10:00] <xenoterracide> http://hoelz.ro/blog/building-rakudo-perl-6-for-arch-linux

[10:00] * xenoterracide tries removing

[10:01] *** hypolin left
[10:06] * hoelzro scrolls up

[10:07] <phenny> hoelzro: 03 Nov 16:02Z <TimToady> tell hoelzro that the eject symbol (in yellow) is in there primarily for people who are colorblind.  it used to just switch from green to red at that point.

[10:07] <hoelzro> xenoterracide: sorry, what problems are you seeing?

[10:09] <xenoterracide> hoelzro: the short is that this packaging is linking to the wrong absolute paths

[10:09] <hoelzro> xenoterracide: which ones?

[10:10] *** lue joined
[10:10] *** rking joined
[10:10] <xenoterracide> iirc pirs and this #!

[10:10] <xenoterracide> zsh: /usr/bin/panda: bad interpreter: /home/xenoterracide/rakudo/pkg/usr/bin/perl6: no such file or directory

[10:10] <hoelzro> ooo

[10:10] <hoelzro> interesting...

[10:10] <xenoterracide> that's where it's built

[10:10] <xenoterracide> but not where it gets installed to

[10:10] <hoelzro> I'm guessing that perl6 has a switch to determine where it's supposed to live?

[10:11] <xenoterracide> odly perl6 seems to work fine

[10:11] <moritz> you're guessing wrongly

[10:11] <moritz> parrot hard-codes the installation path at compilation time

[10:11] <moritz> and rakudo relies on that path

[10:11] <hoelzro> moritz: so the build process is hardcoding that path in?

[10:11] <xenoterracide> then how does one tell parrot to change it

[10:12] <xenoterracide> because it's doing evil nasty things that breaks stuff

[10:12] <xenoterracide> basically it's fine that it hard codes it

[10:13] <xenoterracide> just have to get it hard coding to the right place

[10:13] <moritz> xenoterracide: in the parrot source dir, perl Configure.pl --prefix=/your/installation/base/path

[10:14] <moritz> then make install

[10:14] <moritz> and then configure rakudo with    perl Configure.pl --with-parrot=/your/installation/base/path/bin/parrot

[10:14] <moritz> + make install

[10:14] <hoelzro> moritz: is there a way to view that hardcoded path?

[10:14] <hoelzro> short of strings?

[10:14] *** anuby_ left
[10:14] <brrt> hoelzro, use parrot_config

[10:15] <hoelzro> brrt: thanks

[10:15] <brrt> parrot_config libdir :-)

[10:17] <xenoterracide> moritz: does the --with-parrot actually do something if nqp was built seperate?

[10:17] <moritz> xenoterracide: erm sorry, you have to configure nqp with --with-parrot

[10:17] <moritz> xenoterracide: and then tell rakudo where the nqp is

[10:18] *** wamba left
[10:18] <xenoterracide> moritz: looks to me like both PKGBUILD's did that

[10:19] <xenoterracide> http://privatepaste.com/2a9fcd036c actual error

[10:19] <xenoterracide> https://aur.archlinux.org/packages/nq/nqp/PKGBUILD defines how nqp was built

[10:20] <xenoterracide> https://aur.archlinux.org/packages/ra/rakudo/PKGBUILD how rakudo was built

[10:20] <xenoterracide> looks like it does prefix properly and points parrot and nqp properly

[10:20] <moritz> r: class A { submethod BUILD { $.x } }

[10:20] <p6eval> rakudo a41a48: OUTPUT«===SORRY!===␤Virtual call $.x may not be used on partially constructed objects␤at /tmp/iZRDfuoD_H:1␤»

[10:21] <moritz> xenoterracide: looks like Test::Builder::Plan wasn't updated to a new enough Perl 6 version

[10:22] <moritz> the error message doesn't imply any problem with paths

[10:22] <xenoterracide> it does for me...  /home/xenoterracide/rakudo/pkg/usr/lib/parrot/4.8.0/languages/perl6/lib/Pies.pm:98 < should not be looking in my home directroy for anything

[10:22] *** wamba joined
[10:23] <moritz> xenoterracide: maybe it doesn't (more)

[10:23] <xenoterracide> I just rm-ed pkg

[10:24] <xenoterracide> zsh: /usr/bin/panda: bad interpreter: /home/xenoterracide/rakudo/pkg/usr/bin/perl6: no such file or directory

[10:24] <moritz> xenoterracide: the paths for the error messages are frozen at compilation time

[10:24] <moritz> ok, it does

[10:26] <xenoterracide> idk, I'm going to bed, this can wait until tomorrow for me... but obviously it's pointing things at the wrong directories at compile time. so will have to work on why that is and how to fix

[10:26] <xenoterracide> maybe that config file

[10:29] *** gootle left
[10:29] <dalek> Perlito: c3dc5b4 | (Flavio S. Glock)++ | t5/01-perlito/26-syntax-namespace.t:

[10:29] <dalek> Perlito: Perlito5 - tests - namespace syntax

[10:29] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/c3dc5b4880

[10:29] *** gootle joined
[10:34] *** chee left
[10:35] *** lue left
[10:35] *** rking left
[10:38] <dalek> Perlito: 91e9e64 | (Flavio S. Glock)++ | t5/01-perlito/26-syntax-namespace.t:

[10:38] <dalek> Perlito: Perlito5 - tests - namespace syntax

[10:38] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/91e9e64f76

[10:38] *** wamba left
[10:42] *** lue joined
[10:56] *** sqirrel left
[10:58] *** Guest58684 joined
[11:04] *** bowtie joined
[11:10] *** leont_ joined
[11:17] <masak> g'day, #perl6

[11:18] <moritz> \o masak

[11:19] *** gootle left
[11:20] <masak> r: say { 0 => 1, 1 => 0 }.max(:by(*.value))

[11:20] <p6eval> rakudo a41a48: OUTPUT«"1" => 0␤»

[11:20] <masak> looks like a bug to me.

[11:21] * masak submits rakudobug

[11:21] <masak> grondilu++ # discoverer

[11:21] <moritz> r: say { 0 => 1, 1 => 0 }.pairs.max(:by(*.value))

[11:21] <p6eval> rakudo a41a48: OUTPUT«"1" => 0␤»

[11:21] <moritz> r: say (0 => 1, 1 => 0).max(:by(*.value))

[11:21] <p6eval> rakudo a41a48: OUTPUT«1 => 0␤»

[11:21] <hoelzro> I'll have to look at this packaging issue after work.

[11:21] <hoelzro> that's screwed up.

[11:21] <masak> r: say max :by(*.value), { 0 => 1, 1 => 0 }

[11:21] <p6eval> rakudo a41a48: OUTPUT«("0" => 1, "1" => 0).hash␤»

[11:21] *** chee joined
[11:21] <masak> heh.

[11:22] <masak> r: say max :by(*.value), { 0 => 1, 1 => 0 }.list

[11:22] <p6eval> rakudo a41a48: OUTPUT«"0" => 1␤»

[11:22] <masak> I think a number of method forms may simply be missing their :by parameter.

[11:22] <moritz> r: say List.can('max')

[11:22] <p6eval> rakudo a41a48: OUTPUT«max␤»

[11:22] <moritz> r: say List.can('max').signature.perl

[11:22] <p6eval> rakudo a41a48: OUTPUT«No such method 'signature' for invocant of type 'Parcel'␤  in block  at /tmp/1M0W55f2Am:1␤␤»

[11:22] <moritz> r: say List.can('max')[0].signature.perl

[11:22] <p6eval> rakudo a41a48: OUTPUT«:(: $by = { ... }, Mu *%_)␤»

[11:22] <moritz> r: say Parcel.can('max')[0].signature.perl

[11:22] <p6eval> rakudo a41a48: OUTPUT«:(: $by = { ... }, Mu *%_)␤»

[11:23] <moritz> seems it should work

[11:23] *** chee left
[11:24] <masak> weird.

[11:25] <moritz> sub max(*@args, :&by = &infix:<cmp>) { @args.max(&by) }

[11:25] <moritz> that's the definition of max

[11:25] <masak> oh!

[11:25] <moritz> r: say (1, 2, 3, 4).max(:by(-*))

[11:25] <p6eval> rakudo a41a48: OUTPUT«4␤»

[11:25] <masak> r: say (1, 2, 3, 4).max(-*)

[11:25] <p6eval> rakudo a41a48: OUTPUT«1␤»

[11:25] <masak> there we go.

[11:26] <moritz> oh right

[11:26] <moritz> 12:22 < moritz> r: say Parcel.can('max')[0].signature.perl

[11:26] <moritz> 12:22 < p6eval> rakudo a41a48: OUTPUT«:(: $by = { ... }, Mu *)␤»

[11:26] <masak> that positional parameter made more sense when we did automatic mapping from named arguments to positional parameters.

[11:26] <moritz> the : is the invocant marker

[11:26] <moritz> not a named parameter

[11:27] *** chee joined
[11:29] <masak> I'd suggest changing even the method form to have a named parameter.

[11:30] <masak> to mirror the sub form.

[11:30] <moritz> I kinda think we've been back and forth on this issue

[11:31] <masak> probably.

[11:34] *** cognominal left
[11:44] <bbkr_> star: use NativeCall; sub fork() returns Int is native("libc") {*}; fork() # any idea why it cannot find libc?

[11:44] <p6eval> star 2012.10: OUTPUT«Cannot locate native library 'libc.so'␤  in method postcircumfix:<( )> at /home/p6eval/star/lib/parrot/4.6.0/languages/perl6/lib/NativeCall.pm6:122␤  in  at src/gen/BOOTSTRAP.pm:827␤  in any  at src/gen/BOOTSTRAP.pm:811␤  in block  at /tmp/wupoAPBIeq:1␤␤»

[11:44] *** brrt left
[11:45] *** brrt joined
[11:45] *** brrt left
[11:46] <tadzik> star: use NativeCall; sub fork() returns Int is native("libc6") {*}; fork()

[11:46] <p6eval> star 2012.10: OUTPUT«Cannot locate native library 'libc6.so'␤  in method postcircumfix:<( )> at /home/p6eval/star/lib/parrot/4.6.0/languages/perl6/lib/NativeCall.pm6:122␤  in  at src/gen/BOOTSTRAP.pm:827␤  in any  at src/gen/BOOTSTRAP.pm:811␤  in block  at /tmp/x0k0f_vSxx:1␤␤»…

[11:48] <bbkr_> when I provide full path /lib/i386-linux-gnu/libc.so.6 on ubuntu 12.04 it works

[11:48] <bbkr_> but I want to avoid os-specific code

[11:49] <bbkr_> star: use NativeCall; sub fork() returns Int is native("libc.so.6") {*}; fork()

[11:49] <p6eval> star 2012.10:  ( no output )

[11:49] <bbkr_> \o/

[11:51] <moritz> str: use NativeCall; sub fork() returns Int is native {*}; fork

[11:51] <moritz> star: use NativeCall; sub fork() returns Int is native {*}; fork

[11:51] <p6eval> star 2012.10:  ( no output )

[11:52] <moritz> bbkr_: if you don't provide an argument to the 'is native' trait, it looks only inside the current executable. At least on linux that finds system calls too

[11:53] <bbkr_> moritz: thanks. looks like example is outdated https://github.com/jnthn/zavolaj/blob/master/examples/unix-fork.p6

[11:53] <bbkr_> star: use NativeCall; sub fork() returns Int is native() {*}; fork

[11:53] <p6eval> star 2012.10: OUTPUT«===SORRY!===␤None of the parametric role variants for 'Native' matched the arguments supplied.␤Cannot call ''; none of these signatures match:␤:(Mu , Routine $r, Str $libname)␤␤at /tmp/S1jr2Ubfmb:1␤»

[12:06] *** tokuhiro_ joined
[12:06] <bbkr_> reported in https://github.com/jnthn/zavolaj/issues/17

[12:08] <jnthn> yes, don't do is native() :)

[12:09] *** brrt joined
[12:10] <jnthn> I guess if it's gonna be a common mistake we can make it work liek is native though...

[12:11] <masak> depends if 'is native()' is useful as it is.

[12:12] <jnthn> Well, today it just gives an error :)

[12:12] *** cognominal joined
[12:18] *** wamba joined
[12:21] *** Guest58684 left
[12:21] *** chee left
[12:22] <arnsholt> bbkr_: If you have any ideas on how to work around the $libname.so.$version thing so that just is native($libname) works properly, I'd be happy to hear about it =)

[12:23] <bbkr_> arnsholt: I have no idea :(

[12:23] <moritz> it used to work on linux :/

[12:24] <arnsholt> It did?

[12:26] *** dayangkun joined
[12:27] <moritz> yes

[12:27] *** dayangkun left
[12:28] *** dayangkun joined
[12:29] *** rking joined
[12:29] *** dayangkun left
[12:32] <arnsholt> moritz: That's odd, 'cause I don't think it should have

[12:33] <arnsholt> dlopen("c") and dlopen("libc") both return NULL on my Linux machine

[12:33] <arnsholt> It has to be dlopen("libc.so.6") to get a handle to the lib

[12:33] <moritz> arnsholt: ah, sorry, I'm not talkinga about 'c' or 'libc', but about other libs

[12:33] <moritz> like

[12:33] <moritz> 'libmysql'

[12:35] *** Psyche^ joined
[12:38] <arnsholt> Right, right. That should still work

[12:38] <arnsholt> The reason this is annoying me is actually tests =/

[12:39] *** Patterner left
[12:39] *** Psyche^ is now known as Patterner

[12:39] *** cognominal left
[12:41] <arnsholt> Hmm. Does anyone know how ld know that "ld -lc" should resolve -lc to libc.so.6?

[12:42] *** GlitchMr joined
[12:42] *** cognominal joined
[12:44] <FROGGS> arnsholt: thats os dependent

[12:44] <arnsholt> True. On Linux, I should add

[12:46] <FROGGS> there is basically a regex like /[\/\\]lib\Q$lib\E[\-\d\.]*\.($dlext[\d\.]*|so|dll)$/

[12:46] <FROGGS> where $lib is "c" and $dlext comes from $Config

[12:46] <FROGGS> (perl5 that is)

[12:47] <FROGGS> # takes from Alien::SDL that does it job well

[12:47] <arnsholt> No, ld has to do something more than that. Your regex wouldn't find libc.so.6 for -lc

[12:48] <FROGGS> I guess there is just a pattern and they take the first lib that matches it

[12:50] <arnsholt> To the Open-Source-mobile!

[12:50] * arnsholt downloads the binutils source

[12:50] <tadzik> Bitman and Bitmobile

[12:54] *** sqirrel joined
[12:56] <arnsholt> ^_^

[12:56] <FROGGS> arnsholt: if you find something, please tell me

[12:56] <arnsholt> The GNU FTP server is really slow, so I'm still downloading

[13:06] <Woodi> here is some docs on "linker scripts"  http://www.sourceware.org/binutils/docs-2.10/ld_toc.html#SEC_Contents :)

[13:11] *** atrodo joined
[13:22] *** chee joined
[13:31] *** kaleem joined
[13:39] *** cognominal left
[13:51] <Woodi> maybe -rpath from libtool can help ?

[13:53] <leont_> On some modern linuxes, libc can no longer be assumed to be in /lib directly, due to multi-arch

[13:54] <leont_> There's a one-liner in perl 5's Configure to extract the locations out of gcc

[13:55] <FROGGS> Woodi: -rpath tells the linker to use a specific dir to search for a lib during runtime

[13:55] <FROGGS> our problem right know is to know what library is the right one if we search for example for libc

[13:56] <FROGGS> there might be several

[13:56] <Woodi> we know right lib

[13:57] <FROGGS> do we?

[13:57] <Woodi> linker finds linker script and it is ascii file countaing what to look for

[13:57] <leont_> Somehow I can't find it in the 24000 line shell script

[13:57] <Woodi> strace perl6 nativecallTest.pl gives:

[13:58] <Woodi> open("/usr/lib/i386-linux-gnu/libncursesw.so", O_RDONLY) = 3

[13:58] <Woodi> read(3, "INPUT(libncursesw.so.5 -ltinfo)\n", 512) = 32

[13:58] <FROGGS> Woodi: what if you need to preload the library because its noth in rpath? you need to know the full path before actually loading the lib

[13:58] *** wamba left
[13:59] <Woodi> just linking stops and it should follow linker script instructions

[13:59] <FROGGS> Woodi: do you have any experience with openbsd for example?

[14:00] <Woodi> little :) I have fails on linux now

[14:00] <Woodi> why ?

[14:00] <Woodi> I do not saying rpath was right path...

[14:01] <FROGGS> the problem I have there is that I an Alien module (perl5), that should be installed as non-root

[14:01] <FROGGS> this user has no rights to update the ld.hints, so the dir to where the libs are installed are not in the known paths

[14:01] <FROGGS> so no linker will find it

[14:02] <FROGGS> then there is LD_RUN_PATH, if you set in manually right before running your perl script it works

[14:02] *** PacoAir joined
[14:02] <FROGGS> but trying to set these env vars when the script is running is to late of course

[14:03] <FROGGS> but to do all these thing you must know what libs to load _before_ actually loading them

[14:03] *** hash_table joined
[14:04] <FROGGS> I guess arnsholt have similar problems with NativeCall; sometimes you need to know the full path to the lib to guide the linker a bit

[14:06] <FROGGS> leont_: around line 1350 it looks like it does the same try&error like others do

[14:08] *** hash_table left
[14:10] <Woodi> NativeCall on linux have probably other problem. it try to link library in traditional Unix way but things goes modern: now linker finds ascii "script" whith info how to continue looking for needed lib

[14:10] *** shinobicl joined
[14:12] *** flightrecorder left
[14:13] *** FROGGS left
[14:14] *** flightrecorder joined
[14:20] *** arlinius joined
[14:20] *** tokuhiro_ left
[14:23] *** kaare_ joined
[14:24] *** FROGGS joined
[14:26] *** PerlPilot is now known as PerlJam

[14:29] *** shinobicl left
[14:38] *** skids joined
[14:39] <Woodi> hmm, now probably lib version is called ABI and using macros from gnu/lib-names.h is required...   http://sourceware-org.1504.n7.nabble.com/Using-linker-scripts-with-dlopen-td15032.html

[14:43] <Woodi> and this:   http://www.parrot.org/scratch/general-handling-linker-scripts-reached-dlopen

[14:43] *** brrt left
[14:46] *** gootle joined
[14:46] *** gootle left
[14:56] * [Coke] commented on that to point that user at github issues instead of trac.

[14:56] *** benabik left
[14:58] <Woodi> another issue with NativeCall: Native call expected object with CPointer representation, but got something else

[14:59] *** leont_ left
[14:59] <Woodi> but when I put that parameter in other place of signature it complains about CArray

[15:03] <Woodi> and when I define pure v6 sub in library implementing NC with CArrar[OpaquePointer] param in lexical scope of and pass it to native it looks working.

[15:04] <moritz> the actual error message and the code would be helpful

[15:04] <Woodi> ok

[15:06] *** stopbit joined
[15:07] <skids> r: my @e; @e.push(1,(gather do { take 2; @e.push("OHA1"); take 3 } ),4); @e.gist.say;

[15:07] <p6eval> rakudo a41a48: OUTPUT«1 2 3 4␤»

[15:07] *** isBEKaml joined
[15:07] <skids> r: my @e; @e.push(1,(sink gather do { take 2; @e.push("OHA1"); take 3 } ),4); @e.gist.say;

[15:07] <p6eval> rakudo a41a48: OUTPUT«OHA1 1 4␤»

[15:08] <isBEKaml> hello, #perl6!

[15:08] <skids> o/

[15:08] <PerlJam> greetings!

[15:08] <masak> isBEKaml! \o/

[15:08] <isBEKaml> \o skids, PerlJam

[15:09] <isBEKaml> masak: what do we have today? :)

[15:10] <isBEKaml> moritz: Can I invite you to look at the commit 1ef7dd in roast? :)

[15:11] <isBEKaml> masak: I added P6 code to LZW compression on RC. (direct translation of p5 code, though)

[15:11] <masak> isBEKaml: ok, nice.

[15:12] <isBEKaml> I plan to add some more until I grow familiar with p6 syntax. 

[15:12] <masak> sounds excellent.

[15:12] <isBEKaml> RC's a great way to get familiar with languages. 

[15:12] <masak> the "inner sub" pattern is one I use a whole lot nowadays, and find very convenient.

[15:13] <masak> I'm still not used to the "lexical class" pattern, but I imagine that might be nice in many situations, too.

[15:15] <masak> r: class Safe { has $!key; my class Key {}; method lock { return Key.new }; method unlock($key) { say "unlocked" if $!key === $key } }; given Safe.new { my $key = .lock; .unlock($key) }

[15:15] <p6eval> rakudo a41a48:  ( no output )

[15:15] <masak> hmmm

[15:16] * masak expected that to print "unlocked"

[15:17] *** hash_table joined
[15:17] <skids> masak: I actually managed to use a lexical class usefully, though I haven't committed that code quite yet.  It was to runtime choose between different native libs, or choose the pure perl6 implementation.

[15:17] <PerlJam> Has this been mentioned here yet? http://www.kickstarter.com/projects/101402785/the-root-kit/posts/348855

[15:19] <masak> skids: oh, nice.

[15:20] <Woodi> masak: I was thinking about C problem with passing argument and returning error value (into|from) deep func call chain and desire to have exceptions... now have *impression* that modularity can resolve problem without exceptions...

[15:20] <moritz> but why would you? you have exceptions allright :-)

[15:21] <Woodi> moritz: exceptions are costly thing...

[15:21] <masak> yeah, but they are exceptional.

[15:21] <Woodi> at least in cpp :)

[15:21] <masak> do not prematurely optimize. :)

[15:21] *** flussence left
[15:21] <Woodi> that slogan is abused a lot me thing :)

[15:21] <isBEKaml> I never heard of that argument wrt to C++ (about exceptions being costly). 

[15:22] <isBEKaml> Stroustrup would have failed himself if that were the case. :)

[15:22] <FROGGS> "Unsupported use of - as character range; in Perl 6 please use .. for range, for explicit - in character class...." I love Perl 6's error msgs, next step would it to autocorrect my code ;o)

[15:23] <masak> Woodi: it's feasible that you have a case where reinventing an exception mechanism in C++ is time well spent. I have insufficient data to tell. but my hunch is that it's not time well spent.

[15:23] <Woodi> exceptions have big "infrastructure" comparing to just function calls

[15:24] <masak> there's always a tradeoff between programming time and runtime.

[15:25] <skids> r: class Safe { has $!key is rw; my class Key {}; method lock { return $!key = $_; }; method unlock($key) { say "unlocked" if $!key === $key } }; given Safe.new { my $key = .lock; .unlock($key) } # helps if you actually assign to $!key

[15:25] <p6eval> rakudo a41a48: OUTPUT«unlocked␤»

[15:25] *** sorenso left
[15:26] <FROGGS> does somebody know if there is an RT ticket about the version.t spectest fail? I'ld like to see if there is a discussion about that, and I'm too stupid to use the search

[15:26] <FROGGS> because I've got a patch but I dont know how off the road it is

[15:27] <masak> skids: ah, silly me. skids++

[15:28] <masak> r: class Safe { has (my class Key {}) $!key; method lock { return $!key = $_; }; method unlock($key) { say "unlocked" if $!key === $key } }; given Safe.new { my $key = .lock; .unlock($key) }

[15:28] <p6eval> rakudo a41a48: OUTPUT«===SORRY!===␤Invalid typename in parameter declaration at line 2, near " class Key"␤»

[15:28] <masak> oh, ok. :)

[15:28] <masak> r: class Safe { my class Key {}; has Key $!key; method lock { return $!key = $_; }; method unlock($key) { say "unlocked" if $!key === $key } }; given Safe.new { my $key = .lock; .unlock($key) }

[15:28] <p6eval> rakudo a41a48: OUTPUT«Type check failed in assignment to '$!key'; expected 'Key' but got 'Any'␤  in method lock at /tmp/ScD6_vkHh8:1␤  in block  at /tmp/ScD6_vkHh8:1␤␤»

[15:28] <masak> r: class Safe { my class Key {}; has Key $!key; method lock { return $!key = Key.new; }; method unlock($key) { say "unlocked" if $!key === $key } }; given Safe.new { my $key = .lock; .unlock($key) }

[15:28] <p6eval> rakudo a41a48: OUTPUT«unlocked␤»

[15:28] <masak> \o/

[15:30] <jnthn> FROGGS: version.t fails for me but I didn't ever get to the bottom of why

[15:30] <jnthn> FROGGS: If you have a patch that's awesome :)

[15:30] <jnthn> Well, hopefully :P

[15:32] <FROGGS> https://gist.github.com/4088242

[15:32] <FROGGS> basically I would just add the range of the greek letters there

[15:33] <skids> r: class Safe { my class Key {}; method lock { Key.new } }; my $k1 = Safe.new.lock; class Safe2 { my class Key {}; method lock { Key.new } }; my $k2 = Safe2.new.lock; say $k1.WHAT, $k2.WHAT, so $k1.WHAT === $k2.WHAT

[15:33] <p6eval> rakudo a41a48: OUTPUT«Key()Key()True␤»

[15:33] *** bro_grammer joined
[15:35] *** hash_table left
[15:36] <skids> r: class Safe { my class Key {}; method lock { Key.new } }; my $k1 = Safe.new.lock; class Key { }; my $k2 = Key.new; say $k1.WHAT, $k2.WHAT, so $k1.WHAT === $k2.WHAT

[15:36] <p6eval> rakudo a41a48: OUTPUT«Key()Key()True␤»

[15:37] <masak> heh.

[15:37] <masak> next step is to try to use one safe's key to open up another safe.

[15:37] <masak> either two safes of the same class or of different classes.

[15:38] <masak> my bet is neither will work.

[15:40] <skids> Should $k1.WHAT be "Safe::Key()"?

[15:40] <masak> no, I don't think so.

[15:40] <masak> package names aren't absolute in that way.

[15:41] <isBEKaml> is there a way to get at the fully qualified type name of a variable?

[15:41] <masak> and the :: relation is usually reserved for our-scoped stuff.

[15:42] <PerlJam> "fully qualified type name"?

[15:42] <FROGGS> jnthn: what do you think? https://gist.github.com/4088242

[15:42] <isBEKaml> PerlJam: I think you know what I mean. :) A::B::C::D where D is the innermost class. 

[15:43] <isBEKaml> my $d = A::B::C::D.new; $d.<insert_your_invocator_here>.say returns "A::B::C::D"; 

[15:44] <jnthn> .u 3b1

[15:44] <phenny> U+3B10 CJK UNIFIED IDEOGRAPH-3B10 (㬐)

[15:44] <FROGGS> hmpf

[15:44] <masak> r: class A::B::C::D {}; say A::B::C::D.new.WHAT

[15:44] <p6eval> rakudo a41a48: OUTPUT«A::B::C::D()␤»

[15:44] <FROGGS> okay, looks like I got my answer

[15:45] <PerlJam> isBEKaml: what masak said :)

[15:45] <jnthn> FROGGS: I'm confused what the patch does

[15:45] <jnthn> What are the characters you've made it match that it didn't before?

[15:45] <isBEKaml> okay, what about the case where it's my scoped? I can't directly invoke A::B::C::D.new, right?

[15:45] <masak> right.

[15:45] <FROGGS> well, ord of that alpha is 3b1 on my box, so I would add the urf8 range of the greek letters

[15:45] <FROGGS> so they will be recognized

[15:46] <isBEKaml> but I can do the same within the class itself like masak/skids did. In that case, it's all relative, so I'd just see D(). hmmm

[15:46] <FROGGS> r: "\x3b1".say

[15:46] <p6eval> rakudo a41a48: OUTPUT«α␤»

[15:47] *** Guest58684 joined
[15:50] <FROGGS> r: say so "\x3b1"  ~~ /<alpha>/

[15:50] <p6eval> rakudo a41a48: OUTPUT«True␤»

[15:50] <FROGGS> interesting, thats False on my box

[15:52] <FROGGS> r: say so "α"  ~~ /<alpha>/ # False to on my box

[15:52] <p6eval> rakudo a41a48: OUTPUT«True␤»

[15:54] <FROGGS> r: say Version.new("1α1") cmp Version.new("1β1")

[15:54] <p6eval> rakudo a41a48: OUTPUT«Increase␤»

[15:54] <FROGGS> damn it, why does it work on feather?

[15:55] *** domidumont left
[15:55] <jnthn> FROGGS: Does your Parrot have ICU?

[15:55] *** benabik joined
[15:55] <FROGGS> ohh no, installed libicu right now and just recompiled perl6

[15:56] <FROGGS> but it is not the best thing that it does need some non-std libs...

[15:56] *** wtw left
[15:56] <jnthn> Ok

[15:57] *** wtw joined
[15:57] <jnthn> Then we shoudl mark version.t as # icu in spectest.data

[15:58] <FROGGS> then some magic will skip this test?

[15:58] <jnthn> Yes

[15:58] <jnthn> Lots of examples in spectest.data :)

[15:58] <FROGGS> sounds good

[15:58] <jnthn> ok, decommute time

[15:59] <jnthn> bbl

[16:04] *** fhelmberger left
[16:06] *** jlaire left
[16:06] *** isBEKaml left
[16:12] *** flussence joined
[16:16] *** flussence left
[16:22] <FROGGS> moritz: can you please merge&close this pull request? https://github.com/rakudo/rakudo/pull/76

[16:23] <kresike> bye folks

[16:23] *** kresike left
[16:23] <FROGGS> moritz: btw, would be handy to have commit bit for making release

[16:24] <masak> FROGGS: merged.

[16:24] <dalek> rakudo/nom: 537e86c | (Cosimo Streppone)++ | t/spectest.data:

[16:24] <dalek> rakudo/nom: t/spec/S02-types/version.t depends on ICU

[16:24] <dalek> rakudo/nom: 

[16:24] <dalek> rakudo/nom: There's some strings containing greek letters in these tests

[16:24] <dalek> rakudo/nom: that require ICU to be sorted correctly.

[16:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/537e86c6d6

[16:24] <dalek> rakudo/nom: 0066de8 | (Carl Mäsak)++ | t/spectest.data:

[16:24] <dalek> rakudo/nom: Merge pull request #76 from cosimo/nom

[16:24] <dalek> rakudo/nom: 

[16:24] <dalek> rakudo/nom: t/spec/S02-types/version.t depends on ICU

[16:24] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0066de8668

[16:25] <FROGGS> thanks masak

[16:25] <masak> yeech, a merge commit. :/

[16:25] <masak> FROGGS: I don't know if we can hand out commit bits to the Rakudo repo without a whatsit TLA.

[16:25] <FROGGS> (of course I made my pull request and seen afterwards that someone did the same already)

[16:25] <FROGGS> >.<

[16:25] <FROGGS> a what?

[16:27] <masak> CLA.

[16:27] <FROGGS> what is tla? three letter abbreviation?

[16:27] <FROGGS> mehr

[16:27] <masak> http://www.perlfoundation.org/contributor_license_agreement

[16:27] <FROGGS> meh

[16:28] <FROGGS> ohh wow, drawing signs on paper to send them to a walnut

[16:28] <FROGGS> ;o)

[16:30] *** ifim joined
[16:30] *** Guest58684 left
[16:30] <FROGGS> I guess fork will do

[16:31] *** flightrecorder left
[16:32] *** FROGGS left
[16:34] *** kaleem left
[16:35] *** alester joined
[16:37] * jnthn back

[16:38] <jnthn> masak: You don't have to panic over merge commits. :P

[16:39] <masak> aaaaargh merge commits

[16:41] <TimToady> "Power tools, power tools / It's my favorite thing to use"

[16:43] <[Coke]> I 

[16:44] <TimToady> 1

[16:44] <masak> I watched a Git presentation today where the speaker compared Git to an old-skool shaving knife (as opposed to the safer electric shaver), because with Git "you can really shoot yourself in the foot".

[16:44] <masak> I'm not sure I could mix my metaphors that much even if I tried. :)

[16:45] <tadzik> Occam's Pistol?

[16:45] <masak> anyway, the point was that whereas you could shoot yourself in the foot, it was also possible to get a closer shave.

[16:45] <TimToady> you can also cut the rope

[16:49] <skids> Anyone properly using a straightedge razor cannot shoot themselves in the foot, because they would not be using shaving cream in spray cans.

[16:51] *** hash_table joined
[16:52] <skids> Besides with git it's more like it is easy to tie your shoelaces together, since it is hard to actually lose content.

[16:54] *** bro_grammer left
[16:55] <TimToady> gah, I've seen lose misspelled so many times that I had to stare at yours for five seconds before deciding it was right  :/

[16:56] <tadzik> loosely spelled? :)

[17:06] <[Coke]> MAHSPERL LERS?!?

[17:07] <[Coke]> really more fun with longer translations. ah well.

[17:13] *** xilo_ joined
[17:15] <dalek> zavolaj: 9ace1ee | jnthn++ | examples/unix-fork.p6:

[17:15] <dalek> zavolaj: Fix fork example; bbkr++. Closes #17.

[17:15] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/9ace1eeb74

[17:18] *** birdwindupbird left
[17:30] *** am0c joined
[17:35] *** Chillance joined
[17:38] *** wamba joined
[17:38] <TimToady> revised for style: http://rosettacode.org/wiki/LZW_compression#Perl_6

[17:39] *** MayDaniel joined
[17:40] <masak> (turning comments into type annotations)++

[17:41] <TimToady> isBEKaml++ for the initial translation

[17:48] <TimToady> though technically it is wrong, insofar as it's assuming Latin-1 strings

[17:49] <TimToady> or Buf, but if so, it's mis-typed

[17:53] <TimToady> and neither implementations Buf type is really up to this task yet, due to various missing Stringy ops

[17:54] <TimToady> *tion's

[17:55] <TimToady> (everyone who's been helping add RC entries)++

[17:57] * TimToady looks cross-eyed at that English syntax, wondering if other verbs can work that way, or whether "helping" is special

[17:59] <TimToady> "making" maybe

[18:00] <TimToady> "help him add entries" vs "make him add entries", with dropping of the indirect object perhaps

[18:00] <geekosaur> mmm, causative

[18:00] <TimToady> but *"

[18:01] <TimToady> *"cause him add entries"

[18:01] <TimToady> has to use the "to add" form of infinitive

[18:01] <geekosaur> yeh, I was thinking how 'working to ...' doesn't allow dropping the 'to'

[18:01] <TimToady> NB: * means 'ungrammatical' to a linguist

[18:05] <huf> doesnt it also mean projected word roots?

[18:05] <huf> or is that the same sense?

[18:05] <TimToady> it's overloaded, sure

[18:05] <huf> err, projected as in "how the word would've been in an unknown but suspected ancient common language"

[18:05] <huf> ah

[18:06] <TimToady> but the form I'm talking about is usually fairly obvious in talking about utterances, not roots

[18:06] <TimToady> the examples are often quoted, or in a table of utterances

[18:06] <TimToady> the ungrammatical ones marked with *, and the questionable ones with *?

[18:07] <TimToady> googling for "him stop" only finds 'make him stop' so far

[18:08] <diakopter> "caught helping"

[18:08] <diakopter> "catch helping"

[18:09] <diakopter> (or is that a gerund)

[18:09] <TimToady> 'caught helping him stop' just has 'helping him stop' as a subordinate clause

[18:09] <diakopter> oh, caught stealing

[18:09] <diakopter> what I meant to type twice

[18:10] <diakopter> "Let's catch him stealing the statue"

[18:10] <TimToady> but that is not an example of something that let's you drop 'to'

[18:10] <TimToady> *lets

[18:10] <diakopter> oh

[18:11] <TimToady> so far we've only found 'help' and 'make'

[18:11] <TimToady> .oO(memorizing arbitrary lists...)

[18:13] <TimToady> in the gerund form, the gerund is probably functioning primarily as a an adjective

[18:13] <TimToady> er, adverb

[18:13] <TimToady> "take him how?" "golfing" "shooting" etc

[18:13] <TimToady> though you can't actually ask that in English

[18:14] <TimToady> you'd probably say "take him where?"

[18:14] <TimToady> but "where" is still a fundamentally adverbial notion

[18:17] <diakopter> of the special verbs that start bare infinitives  feel, hear, help, let, make, see, and watch  it seems only make and help allow the 'to' in there also

[18:21] <doy> 'make' doesn't, does it?

[18:22] <diakopter> it's comparatively archaic, but yeah

[18:22] <hoelzro> ok, I think I found the issue with the build stuff that we were talking about earlier

[18:23] <diakopter> in the passive voice, they all require the 'to'

[18:23] <hoelzro> https://github.com/rakudo/star/blob/master/tools/build/Makefile.in#L82

[18:23] <diakopter> (of the ones that make sense in passive)

[18:23] <hoelzro> Should DESTDIR really come before PERL6_INSTALL?

[18:24] <hoelzro> DESTDIR ends up getting hardcoded into the shebang line (

[18:24] <hoelzro> =(

[18:27] <jnthn> TimToady: Can you give me some hints on how $*HIGHEXPECT is built/maintained?

[18:28] *** telex left
[18:28] *** xilo_ left
[18:28] *** BillySleep is now known as BillySeth

[18:30] *** telex joined
[18:34] <jnthn> TimToady: Specifically is it in some way tied to doing LTM, and it records the dba's encountered along the various fate paths?

[18:34] *** benabik_ joined
[18:34] *** benabik left
[18:34] *** benabik_ is now known as benabik

[18:37] *** benabik left
[18:38] *** benabik joined
[18:38] *** benabik left
[18:40] <dalek> rakudo/nom: e215ee4 | jnthn++ | docs/deprecations:

[18:40] <dalek> rakudo/nom: Deprecate current &foo semantics.

[18:40] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e215ee42ba

[18:41] *** supernovus joined
[18:42] *** wamba left
[18:45] *** spider-mario joined
[18:45] *** sorenso joined
[18:46] *** xilo_ joined
[18:50] *** HarryS left
[18:51] *** sqirrel left
[18:55] *** HarryS joined
[19:19] *** arlinius left
[19:36] *** supernovus left
[19:38] *** kaare_ left
[19:41] *** zby_home_ joined
[19:53] *** jlaire joined
[19:56] <xenoterracide> hoelzro: so I'm guessing you've had no luck in finding solutions?

[19:57] <hoelzro> xenoterracide: well, I haven't worked on the solution aspect, but I think I found the problem

[19:57] *** sorenso left
[19:57] <xenoterracide> that's at least half way to the solution. maybe

[19:58] <hoelzro> yeah

[19:58] <hoelzro> it *should* be as simple as removing DESTDIR from a line or two in tools/build/Makefile.in

[19:58] <xenoterracide> hey that'd be cool

[19:58] *** jlaire left
[19:59] <xenoterracide> why is it whenever I touch software it breaks...

[20:00] <xenoterracide> oh well... worst case is I'll probably have time/tuits to work on it this weekend

[20:00] <hoelzro> hey, you found a great bug =)

[20:00] <xenoterracide> right

[20:00] <hoelzro> from what I've seen so far, Rakudo Star and packaging systems don't really play nice

[20:00] <hoelzro> which is why I wrote that article

[20:00] <masak> url?

[20:00] <xenoterracide> hoelzro: my approval

[20:01] <hoelzro> masak: http://hoelz.ro/blog/building-rakudo-perl-6-for-arch-linux

[20:01] <masak> ah, nice.

[20:01] <xenoterracide> but i'd say it's not just packaging systems... it's moving the thing after build time

[20:02] <masak> I believe it comes down to a Parrot limitation or two.

[20:02] <hoelzro> xenoterracide: well, from what I've seen, Rakudo Star's packaging process could be improved

[20:02] <xenoterracide> so is panda the future? or is it just a stop gap for cpan6? and is anyone actualy still working on that?

[20:03] <hoelzro> line 84 in tools/build/Makefile.in should not be prefixing DESTDIR to the perl6 path

[20:03] <xenoterracide> right

[20:03] <hoelzro> or the bin builder program should know about that

[20:04] <masak> xenoterracide: no-one knows what the future of CPAN-like solutions for Perl 6 holds. all attempts I've seen at solving the issues in a top-down manner have either been direct failures, or successful solutions to some other problem.

[20:05] <masak> xenoterracide: so the idea seems to be to grow in pace with the issues. panda and modules.perl6.org just happens to be the latest stepping-stone.

[20:06] * PerlJam wonders what cpan6.org is then

[20:06] <masak> PerlJam: I consider it a massive project, mostly successful, solving a different problem.

[20:07] <xenoterracide> what problem does it solve?

[20:07] <masak> storing family photos, for example.

[20:07] <PerlJam> masak: now I have to wonder what metric you're using for "success"  :)

[20:07] * xenoterracide also wants to slap mark for solving any problem with XML

[20:07] <masak> see the 47-page spec somewhere on that page.

[20:07] <masak> PerlJam: mostly "the code exists, and compiles".

[20:07] <xenoterracide> I had a problem.. I solved it with XML... now I have 2 problems

[20:08] <doy> "The first release of the CPAN6/Pause6 modules is planned for April 2010."

[20:08] * xenoterracide feels the same about regexen

[20:08] <masak> doy: hm. I may be wrong about it existing, then.

[20:08] <PerlJam> doy: yesh, no plan survives contact with the enemy  :)

[20:08] *** Moukeddar joined
[20:09] <xenoterracide> seems like a case of not enough  iterative development too much planning

[20:09] <xenoterracide> s/planning/waterfall

[20:09] <masak> well, I'm glad *someone* went that route, so we have a concrete data point of what happens then.

[20:09] <PerlJam> masak: indeed.

[20:10] <masak> in particular, I don't see any intersection between cpan6 and S11.

[20:10] <masak> which I would... kind of expect in a Perl 6 CPAN-alike.

[20:12] *** sorenso joined
[20:12] *** ifim left
[20:17] <xenoterracide> I wonder if this hardcoding path problem is only affecting pandoa

[20:17] <xenoterracide> panda*

[20:17] <xenoterracide> seemed to be

[20:17] <PerlJam> .oO( pandora would have a been a great name for some perl 6 thing ;)

[20:18] <xenoterracide> still could be...

[20:18] * xenoterracide renames cpan to pandor

[20:18] <xenoterracide> pandora*

[20:19] <masak> PerlJam: still not to late to open that box, so to speak.

[20:21] <masak> r: class Pandora::Box { method open { say "OH NO WHAT HAVE YOU DONE" } }; given Pandora::Box.new { #`( what, you thought I would open the box? sheesh. ) }

[20:21] <p6eval> rakudo e215ee: OUTPUT«===SORRY!===␤Method 'balanced' not found for invocant of class 'NQPMu'␤»

[20:21] <PerlJam> heh

[20:21] <masak> innerestin'

[20:21] <PerlJam> don't tempt Fate!  ;)

[20:21] <masak> seems to find me rakudobugs :P

[20:22] <masak> r: #`( is it these comments that have bitrotted? )

[20:22] <p6eval> rakudo e215ee: OUTPUT«===SORRY!===␤Method 'balanced' not found for invocant of class 'NQPMu'␤»

[20:22] <masak> seems so.

[20:22] <masak> r: #`()

[20:22] <p6eval> rakudo e215ee: OUTPUT«===SORRY!===␤Method 'balanced' not found for invocant of class 'NQPMu'␤»

[20:22] * masak submits rakudobug

[20:22] <masak> std: #`()

[20:22] <[Coke]> I would posit that rakudo star isn't meant to be packaged, it IS a package, and that if you wanted to package those things up, you could create a package for it. 

[20:22] <p6eval> std 04216b1: OUTPUT«ok 00:00 40m␤»

[20:22] *** hash_table left
[20:23] <geekosaur> std: #`() my $x = 1;

[20:23] <p6eval> std 04216b1: OUTPUT«ok 00:00 42m␤»

[20:23] <geekosaur> jes checkin...

[20:23] <[Coke]> and, from previous conversations with allison, you would probably want a package for parrot, for nqp, for rakudo, for each of the modules...

[20:23] *** am0c left
[20:23] <masak> [Coke]: sounds sane to me.

[20:23] <[Coke]> whereas star is a "oh, heres a bundle of stuff we thought you might like."

[20:25] <masak> ideally, a Star distribution could be expressed as an empty package with some dependencies on a Rakudo compiler and some Perl 6 modules, each of them its own package.

[20:26] <Woodi> but installing nqp and Rakudo separately still puts everything into parrot/some/lib/dir ?

[20:26] <jnthn> If those have bitrotted, it means we aren't testing them.

[20:26] <jnthn> Which in turn means it's hardly surprising they broke.

[20:26] *** SamuraiJack left
[20:26] <masak> it sounds unlikely that #`() wouldn't have any tests, but I guess stranger things have happened.

[20:27] <jnthn> masak: Well, when I redid all the quote stuff, I didn't regress on any spectests.

[20:28] <masak> *nod*

[20:28] <masak> jnthn++

[20:28] <jnthn> r: #`[foo]

[20:28] <p6eval> rakudo e215ee: OUTPUT«===SORRY!===␤Method 'balanced' not found for invocant of class 'NQPMu'␤»

[20:29] <jnthn> hm

[20:30] <[Coke]> woodi; that sounds like the current state of affairs, yes.

[20:30] <[Coke]> ;(not everything, but some libraries, sure.)

[20:32] <jnthn> r: say Q { foo }

[20:32] <p6eval> rakudo e215ee: OUTPUT« foo ␤»

[20:32] <jnthn> Odd, that uses exactly the same construct...

[20:33] <PerlJam> yeah, but that one doesn't have an NQPMu and the comment does  :)

[20:33] <jnthn> PerlJam: Yes. That's what doesn't make sense

[20:34] <jnthn> Both are doing <quibble(%*LANG<Q>)>

[20:34] <[Coke]> pointer to code?

[20:34] <jnthn> Grammar.pm:375ish

[20:37] <jnthn> r: say 1 + #`( foo ) 2

[20:37] <p6eval> rakudo e215ee: OUTPUT«3␤»

[20:37] <jnthn> Aha...

[20:38] <masak> wat

[20:38] <jnthn> rules. sometimes they don't...

[20:38] <masak> :P

[20:39] <jnthn> Spot the bug:

[20:39] <jnthn> rule statementlist {

[20:39] <jnthn>     :my %*LANG := self.shallow_copy(pir::find_dynamic_lex__Ps('%*LANG'));

[20:40] <masak> finds $*LANG in the current scope?

[20:40] <jnthn> Nope

[20:40] <masak> dang :)

[20:40] <[Coke]> I don't see any tests for #'

[20:40] <jnthn> If that was the issue nothing would work :P

[20:40] <masak> [Coke]: #`

[20:41] <[Coke]> whoops, it's #`, rechecking.

[20:41] <PerlJam> [Coke]: it's #`

[20:41] <PerlJam> S02-lexical-conventions/comments.t

[20:41] *** pmurias joined
[20:41] <jnthn> So if we have tests for this, the issue is we don't have one that covers it first thing in a block, or anywhere else a statementlist happens.

[20:41] <jnthn> Got a fix; spectesting justin case.

[20:42] <masak> jnthn: you never said what le bug was!

[20:42] <masak> interested parties wanna know.

[20:43] <jnthn> Oh, I was planning to run the guessing game until I commit the patch :P

[20:44] <masak> well, we already know it has something to do with "first in a statement". that should narrow it down.

[20:44] <masak> come on, #perl6, think! :)

[20:45] *** Moukeddar left
[20:46] <PerlJam> [Coke]: were you going to make a test for this?

[20:47] <[Coke]> PerlJam: at $DAYJOB right now, but will be happy to off the ticket once jnthn++'s done.

[20:47] <[Coke]> (over the weekend)

[20:48] <jnthn> Time's up!

[20:48] <dalek> rakudo/nom: 8959c8b | jnthn++ | src/Perl6/Grammar.pm:

[20:48] <dalek> rakudo/nom: Fix #`foo and friends at start of statementlist.

[20:48] <dalek> rakudo/nom: 

[20:48] <dalek> rakudo/nom: This makes sure we don't call <.ws> before we've populated %*LANG.

[20:48] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8959c8bc62

[20:48] *** ifim joined
[20:48] <PerlJam> jnthn: argh!

[20:48] <masak> d'oh!

[20:49] <masak> I thought we changed that behavior with rules...

[20:49] <masak> did I just dream that?

[20:49] <jnthn> Not in NQP and Rakudo yet.

[20:49] <masak> oh!

[20:49] <jnthn> Yes, the spec changed.

[20:49] * masak .oO( early days yet, it's only 2012... )

[20:49] <jnthn> The spec changed in 2012 :P

[20:49] <masak> that's what I mean. :)

[20:50] <sorear> o/

[20:50] <masak> sorear! \o/

[20:50] <jnthn> I think pmichaud++ has plans to work on it, so I'm leaving it for now.

[20:51] <dalek> roast: 3d2fe5b | duff++ | S02-lexical-conventions/comments.t:

[20:51] <dalek> roast: Simple test for #`() comment at start of statementlist

[20:51] <dalek> roast: review: https://github.com/perl6/roast/commit/3d2fe5b2fb

[20:51] <nwc10> "The spec changed in 2012" - "this year"? "this week" is so last year? :-(

[20:52] <[Coke]> PerlJam: can you add a reference to RT #115762 ?

[20:53] <jnthn> nwc10: I'm not sure exactly when in 2012 the chance I was talking about happened 

[20:53] <nwc10> ah OK. I'll go back to sleep :-)

[20:53] <dalek> perl6-roast-data: 05b83a5 | coke++ | / (4 files):

[20:53] <dalek> perl6-roast-data: today (automated commit)

[20:53] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/05b83a52ec

[20:53] <jnthn> *chang

[20:55] <dalek> roast: 7b08120 | duff++ | S02-lexical-conventions/comments.t:

[20:55] <dalek> roast: Add reference to RT #115762

[20:55] <dalek> roast: review: https://github.com/perl6/roast/commit/7b08120b87

[20:55] <jnthn> The test added recently in S12-methods/private.t seems wrong in some way.

[20:55] <jnthn> (some throws_like issue)

[20:56] *** shinobicl joined
[20:56] <jnthn> wtf, it's almost 10pm and I didn't dinner...

[20:57] * jnthn goes to nom something

[20:57] <nwc10> you're turning into ilmari?

[20:57] *** cogno joined
[20:58] <nwc10> 20:57  * jnthn goes to nom something

[20:58] <nwc10> 20:57 < nwc10> you're turning into ilmari?

[20:58] <nwc10> oops

[21:01] *** GlitchMr left
[21:10] <sorear> what's ilmari?

[21:11] <masak> some mythical creature from the Perl 5 world who likes late snacks, I guess.

[21:13] <[Coke]> *snrk*

[21:13] *** rindolf joined
[21:13] <nwc10> sorear: the current london.pm pub minion, who fails to realise that he's not yet had lunch.

[21:14] <masak> who needs lunch when one has a pub! :D

[21:14] <sorear> oh right

[21:14] <sorear> I think I met him in frankfurt

[21:14] <nwc10> quite possible

[21:14] <nwc10> it's sort of an in joke on #london.pm - has ilmari had lunch yet?

[21:15] <nwc10> but, today: 14:16  * ilmari realises he didn't have breakfast and is gettign quite  light-headed

[21:15] <nwc10> and that sort of stomach->brain signalling failure is not atypical.

[21:16] *** hash_table joined
[21:29] <jnthn> I suspect mine is a case of having eaten small lunches for the last week, then having a huge one today.

[21:29] * [Coke] wonders if anyone else here has seen the "HUUUUUUUGE" car ads from the states.

[21:30] <[Coke]> . o O (it's ruined that word for me, I always hear it in the car guy's voice)

[21:31] *** cogno left
[21:32] <masak> [Coke]: who, Steve Ballmer? :P

[21:33] <jnthn> [Coke]: No, but one time I was in the US, I kept hearing this "I like...big..TRUCKS and I can not lie!" ads on the radio...

[21:33] *** shinobicl left
[21:33] <jnthn> One of those ads that no matter how much you hate, etches itself into your brane...

[21:34] <masak> [Coke]: somehow I found the guy on YouTube and listened to him saying that word for three minutes. weird. :)

[21:38] <doy> you mean like http://youtu.be/KMU0tzLwhbE

[21:38] <masak> :)

[21:41] *** cogno joined
[21:48] *** SmokeMachine left
[21:53] *** cogno left
[21:54] *** cogno joined
[22:04] *** skids left
[22:07] *** cogno left
[22:08] *** zby_home_ left
[22:14] *** cogno joined
[22:20] <[Coke]> masak: http://www.youtube.com/watch?v=DXRaboSo70A 

[22:20] <[Coke]> (I bought a car from one of his dealerships in NYS)

[22:21] *** xilo_ left
[22:21] <masak> [Coke]: this was the one I found, too.

[22:23] <[Coke]> masak; though I like doy++'s better. :)

[22:23] <masak> :)

[22:27] *** cognominal joined
[22:27] *** sahadev left
[22:28] *** cogno left
[22:38] *** alester left
[22:50] *** rindolf left
[22:54] *** guest_____ joined
[22:54] *** guest_____ left
[23:03] *** sorenso left
[23:08] *** wamba joined
[23:15] *** armitage81 joined
[23:16] *** armitage81 left
[23:16] *** armitage81 joined
[23:19] <masak> 'night, #perl6

[23:25] <sorear> night masak

[23:27] *** stopbit left
[23:40] *** pmurias left
[23:56] *** armitage81 left
[23:57] *** armitage81 joined
[23:58] *** spider-mario left
[23:59] *** armitage81 left
