[00:03] *** MayDaniel left
[00:10] <Circlepuller_> std: say "Hello World!"; fork();

[00:10] <p6eval> std 77327a4: OUTPUT«ok 00:00 42m␤»

[00:10] <Circlepuller_> std: say "Hello World!"; fork; fork;

[00:10] <p6eval> std 77327a4: OUTPUT«ok 00:00 42m␤»

[00:10] <Circlepuller_> wolol

[00:10] <Circlepuller_> r: say "Hello World!"; fork; fork;

[00:10] <diakopter> std is just a parser

[00:10] <p6eval> rakudo 3d31af: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&fork' called (lines 1, 1)␤»

[00:10] <Circlepuller_> oh

[00:10] <Circlepuller_> i see

[00:11] <diakopter> with some semantic checking

[00:18] <sirrobert> exit

[00:18] *** sirrobert left
[00:21] <diakopter> rn: say ?(->{} ~~ ->{})

[00:21] <p6eval> niecza v22-6-g9e5350d: OUTPUT«Unhandled exception: Excess arguments to ANON, used 0 of 1 positionals␤  at /tmp/cm0MIxj6YU line 0 (ANON @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1052 (Block.ACCEPTS @ 4) ␤  at /tmp/cm0MIxj6YU line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/…

[00:21] <p6eval> ..rakudo 3d31af: OUTPUT«False␤»

[00:27] <diakopter> rn: say ?((my \p =p) ~~ p)

[00:27] <p6eval> rakudo 3d31af: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&p' called (line 1)␤»

[00:27] <p6eval> ..niecza v22-6-g9e5350d: OUTPUT«True␤»

[00:31] <diakopter> rn: say @0[0-1]

[00:31] <p6eval> rakudo 3d31af: OUTPUT«Cannot use negative index -1 on Any␤  in method gist at src/gen/CORE.setting:9929␤  in sub say at src/gen/CORE.setting:7250␤  in block  at /tmp/tgxyvW1yVf:1␤␤»

[00:31] <p6eval> ..niecza v22-6-g9e5350d: OUTPUT«Any()␤»

[00:34] <[Coke]> alright, got the dispatcher fixed so it can call the builtins. now to fix the actions so they are generating valid QAST.

[00:37] *** Chillance left
[00:37] *** tokuhiro_ joined
[00:52] *** flightrecorder left
[00:52] *** FROGGS left
[00:53] <dalek> doc: bb467ff | (Geoffrey Broadwell)++ | type-graph.txt:

[00:53] <dalek> doc: Fix up type-graph.txt to reflect non-Coolness of Iterable

[00:53] <dalek> doc: review: https://github.com/perl6/doc/commit/bb467ff475

[00:54] <dalek> perl6-bench: c7e2183 | (Geoffrey Broadwell)++ | bench:

[00:54] <dalek> perl6-bench: Improve documentation of --outfile option

[00:54] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/c7e21836ac

[00:56] *** macae joined
[00:56] <[Coke]> Do we have any debugging aids for nqp grammars/actions?

[00:57] *** Circlepuller joined
[00:59] *** Circlepuller_ left
[01:04] *** tgt left
[01:16] <[Coke]> WOOT:

[01:16] <sorear> \o/

[01:16] <[Coke]> > puts hi

[01:16] <[Coke]> hi

[01:16] <sorear> [Coke]: '\o/ ' x 10

[01:19] *** macae2 joined
[01:21] *** macae left
[01:25] *** macae2 left
[01:26] *** macae joined
[01:35] *** dayangkun joined
[01:44] *** arlinius left
[01:52] *** rindolf left
[01:55] <[Coke]> whee. now to fix all the OTHER stuff.

[02:17] <[Coke]> so, "partcl foo.tcl" doesn't work - just drops me into the interactive mode. am I missing something in MAIN, I wonder...

[02:18] <[Coke]> nqp: say nqp::box_s(pir::new__PS('OS').chdir("."));

[02:18] <p6eval> nqp: OUTPUT«Confused at line 2, near "say nqp::b"␤current instr.: 'panic' pc 19999 (src/stage2/gen/NQPHLL.pir:7315) (src/stage2/gen/NQPHLL.pm:324)␤»

[02:19] <[Coke]> nqp: say(nqp::box_s(pir::new__PS('OS').chdir(".")));

[02:19] <p6eval> nqp: OUTPUT«Error while compiling block : Error while compiling op call: Error while compiling op box_s: Operation 'box_s' requires 2 operands, but got 1␤current instr.: '' pc 43434 (src/stage2/QAST.pir:15060) (src/stage2/QAST.nqp:2253)␤»

[02:19] <[Coke]> box_s isn't documented, but I'd expect it to take a thing to box and to return a string. no?

[02:19] <[Coke]> (a parrot string to a nqp string)

[02:29] *** macae left
[02:30] *** armitage81 left
[02:31] <[Coke]> nqp: INIT { sub eek() {say(3)}}; eek;

[02:31] <p6eval> nqp:  ( no output )

[02:32] *** tokuhiro_ left
[02:32] *** macae joined
[02:35] <[Coke]> argh. have a circular dependency on things that are compiled to PIR.

[02:39] <diakopter> nqp: INIT { sub eek() {say(3)}}; say(eek.HOW);

[02:39] <p6eval> nqp: OUTPUT«get_string() not implemented in class 'NQPClassHOW'␤current instr.: '' pc 791 (src/stage2/gen/NQPCORE.setting.pir:363) (src/stage2/NQPCORE.setting:321)␤»

[02:39] *** benabik left
[02:40] *** benabik joined
[02:44] *** Su-Shee left
[02:45] *** orafu left
[02:45] *** orafu joined
[02:47] <[Coke]> nqp: INIT { sub eek() {say(3)}}; eek();

[02:47] <p6eval> nqp: OUTPUT«Could not find sub &eek␤current instr.: '' pc 71 ((file unknown):138877613) (/tmp/G6K_yZhnL1:1)␤»

[02:48] *** Pleiades` left
[02:52] *** Woodi left
[02:53] *** replore_ joined
[02:53] *** Pleiades` joined
[02:58] *** ase joined
[02:58] <ase> good night !perl6!

[02:59] <ase> my %h = map {split }<DATA>;

[03:00] <ase> translate it to perl6. Who can help me!

[03:02] <ase> [Coke]:can you give me aninstruction>

[03:04] *** ase left
[03:04] <[Coke]> I'm not sure p6 has DATA, perse.

[03:04] *** Pleiades` left
[03:04] <[Coke]> *per se

[03:06] <[Coke]> nqp: class Tcl { method Str() { return "barf" } }; say ~Tcl.new();

[03:06] <p6eval> nqp:  ( no output )

[03:06] <[Coke]> nqp: class Tcl { method Str() { return "barf" } }; say Tcl.new().Str;

[03:06] <p6eval> nqp: OUTPUT«Confused at line 2, near "say Tcl.ne"␤current instr.: 'panic' pc 19999 (src/stage2/gen/NQPHLL.pir:7315) (src/stage2/gen/NQPHLL.pm:324)␤»

[03:06] <[Coke]> nqp: class Tcl { method Str() { return "barf" } }; say(Tcl.new().Str);

[03:06] <p6eval> nqp: OUTPUT«barf␤»

[03:06] <[Coke]> nqp: class Tcl { method Str() { return "barf" } }; say(Tcl.new());

[03:06] <p6eval> nqp: OUTPUT«Tcl<-1654810237>␤»

[03:06] <[Coke]> nqp: class Tcl { method Str() { return "barf" } }; say(~Tcl.new());

[03:06] <p6eval> nqp: OUTPUT«Tcl<516662407>␤»

[03:07] <[Coke]> ase: I believe the p6 way is to store the data in POD, and then use the POD vars to get at the data.

[03:11] *** ingy joined
[03:12] *** Pleiades` joined
[03:13] *** macae left
[03:15] *** replore_ left
[03:19] *** thou left
[03:31] *** orafu left
[03:38] *** arlinius joined
[03:42] *** wk_ joined
[03:42] *** wk left
[04:17] *** skids left
[04:30] *** cognominal joined
[04:34] *** cognominal left
[04:37] *** Targen left
[04:38] *** simcop2387 left
[04:38] *** simcop2387 joined
[04:40] *** Targen joined
[04:46] *** cognominal joined
[04:51] *** cognominal left
[04:54] *** cognominal joined
[05:07] *** birdwindupbird joined
[05:09] *** drbean left
[05:13] *** wk_ left
[05:24] *** fgomez left
[05:24] *** fgomez joined
[05:27] *** kaleem joined
[05:30] <cognominal> impressive the respective sizes of the settings :

[05:30] <cognominal> $ wc -l ~/rakudo/src/core/*.pm | tail -n1

[05:30] <cognominal>    11548 total

[05:30] <cognominal> $ wc -l ~/rakudo/nqp/src/core/*.pm | tail -n1

[05:30] <cognominal>      375 total

[05:31] <cognominal> I mean, the difference of size

[05:40] *** sudokode is now known as AnalogApe

[05:44] *** fgomez left
[05:46] *** fgomez joined
[05:46] *** s1n left
[05:48] *** AnalogApe is now known as sudokode

[05:48] *** s1n joined
[05:55] *** m0ss joined
[05:58] *** dayangkun left
[05:59] *** taniavs666 joined
[06:01] <m0ss> I'm trying to figure out if this would make sense in Perl6's regex: /<~~0>[(a)|(b)]/

[06:02] <cognominal> I don't think the <~~0> means anything

[06:03] <cognominal> rakudo:  /<~~0>[(a)|(b)]/

[06:03] <p6eval> rakudo 3d31af: OUTPUT«===SORRY!===␤Sorry, ~~ regex assertion with a capture is not yet implemented␤»

[06:03] <m0ss> will in this /(a)<~~0>/, it would be the same as if you wrote /(a)[a]/

[06:04] <cognominal> Apparently rakudo knows better

[06:05] <m0ss> but if the recursive callback occurs beforehand, some cases can be figured out, the above would probably require knowing the future

[06:06] <m0ss> maybe damian can do it with positronic variables

[06:06] *** drbean joined
[06:07] <cognominal> this ~~n is hardly new, 4 years old, but I never noticed it in the specs

[06:08] <m0ss> it will probably require the start of the called back reference already appeared

[06:09] <m0ss> *to have already appeared

[06:12] *** fgomez left
[06:16] <m0ss> its similar to Perl5's \g1 regex element, which doesn't try to go forward in its references even though it hypothetically could

[06:20] *** fgomez joined
[06:25] *** fgomez left
[06:27] *** fgomez joined
[06:32] *** fgomez_ joined
[06:32] *** fgomez left
[06:32] <m0ss> sorry, not \g1, (?1) is the Perl5 equivalent

[06:33] *** wk joined
[06:38] *** m0ss left
[06:41] *** cognominal_ joined
[06:43] *** cognominal left
[06:53] *** cognominal_ left
[06:55] *** fgomez_ left
[06:57] *** fgomez joined
[06:59] *** cognominal joined
[07:07] *** domidumont left
[07:09] *** Woodi joined
[07:17] *** flightrecorder joined
[07:25] *** hoelzro|away is now known as hoelzro

[07:30] *** FROGGS joined
[07:34] *** Psyche^ joined
[07:35] <Ulti> for @list -> $thing { say $thing; }  <--- is $thing automatically local to the for blockoid?

[07:37] <Ulti> I instinctually keep writing "for @list -> my $thing {" which makes the compiler shout about invalid types because its exepecting to see Str or similar there

[07:37] <tadzik> it's "my" itself, don't worry :)

[07:37] *** Patterner left
[07:37] <Ulti> k k 

[07:37] *** Psyche^ is now known as Patterner

[07:38] <Ulti> thanks tadzik 

[07:39] *** cognominal left
[07:43] <sorear> Ulti: it's a little bit odd because this is one of the few places where we compromise on the "variables are scoped to the enclosing block" rule

[07:45] <moritz> well, not much different than   sub f($x) { $x }  where $x is also visible in the signature

[07:45] <moritz> like   sub f($x, $y = 2 * $x) { }

[07:46] *** sivoais left
[07:49] <arnsholt> Since pointy blocks are lambdas (modulo return semantics and such), I think the sub analogy is a good one

[07:50] *** cognominal joined
[07:58] *** xinming left
[07:59] *** sivoais joined
[08:02] *** xinming joined
[08:05] <Ulti> sorear yeah its just catching me out because I'm not used to it yet

[08:05] <Ulti> I was only wondering where the scope was

[08:10] *** fhelmberger joined
[08:10] <cognominal> perl is not ruby...

[08:11] *** kurahaupo left
[08:12] <cognominal> nor coffeescript either. No implicit declaration in lexical scope for variables.

[08:13] *** taniavs666 left
[08:14] *** domidumont joined
[08:14] *** taniavs666 joined
[08:21] *** taniavs666 left
[08:26] *** kurahaupo joined
[08:33] *** kurahaupo left
[08:37] *** cognominal left
[08:52] *** Chillance joined
[08:58] *** snearch joined
[09:04] *** kurahaupo joined
[09:08] *** bbkr_ left
[09:32] *** snearch left
[09:34] *** Su-Shee joined
[09:44] *** daxim joined
[09:45] *** cognominal joined
[09:47] *** kurahaupo left
[09:48] *** phenny joined
[09:49] *** cognominal left
[09:58] *** tgt joined
[10:01] *** xinming left
[10:12] <mathw> "Basic macro support" :o :D \o/

[10:14] *** flussence joined
[10:44] *** xinming joined
[10:46] *** bbkr joined
[10:47] <bbkr> rakudo: :(Str :$name).HOW.say # known bug?

[10:47] <p6eval> rakudo 3d31af: OUTPUT«Null PMC access in get_bool()␤  in attributes at src/stage2/gen/nqp-mo.pm:1151␤  in method perl at src/gen/CORE.setting:791␤  in method gist at src/gen/CORE.setting:786␤  in sub say at src/gen/CORE.setting:7250␤  in method say at src/gen/CORE.setting:781␤  in block…

[10:51] <moritz> rakudo: :(Str :$name).HOW

[10:51] <p6eval> rakudo 3d31af:  ( no output )

[10:51] <moritz> rakudo: :(Str :$name).HOW.Str

[10:51] <p6eval> rakudo 3d31af:  ( no output )

[10:51] <moritz> rakudo: :(Str :$name).HOW.gist

[10:51] <p6eval> rakudo 3d31af: OUTPUT«Null PMC access in get_bool()␤  in attributes at src/stage2/gen/nqp-mo.pm:1151␤  in method perl at src/gen/CORE.setting:791␤  in method gist at src/gen/CORE.setting:786␤  in block  at /tmp/OZ0O_0TWKs:1␤␤»

[10:51] <moritz> bbkr: not known to me

[10:51] *** sisar joined
[10:52] <bbkr> rakudo: Int.HOW.say

[10:52] <p6eval> rakudo 3d31af: OUTPUT«Null PMC access in get_bool()␤  in attributes at src/stage2/gen/nqp-mo.pm:1151␤  in method perl at src/gen/CORE.setting:791␤  in method gist at src/gen/CORE.setting:786␤  in sub say at src/gen/CORE.setting:7250␤  in method say at src/gen/CORE.setting:781␤  in block…

[10:52] <bbkr> not related to signature

[10:52] * bbkr reports

[10:54] <moritz> r: Int.HOW.gist(Int)

[10:54] <p6eval> rakudo 3d31af: OUTPUT«Cannot call 'gist'; none of these signatures match:␤:(Mu:U : Mu *%_)␤:(Mu:D : Mu *%_)␤␤  in method gist at src/gen/CORE.setting:784␤  in block  at /tmp/aTT4EA_mE0:1␤␤»

[10:55] <bbkr> RT #115090

[10:55] <moritz> bbkr++

[10:58] *** isBEKaml joined
[10:58] <isBEKaml> ola, #perl6! Has there been anything so far on the pugs issue with ghc 7.4?

[11:00] <moritz> not that I'm aware of

[11:00] <moritz> did you open a ticket?

[11:00] <dalek> ecosystem: d71ff5b | Matt++ | META.list:

[11:00] <dalek> ecosystem: Added Text--Emotion for text sentiment analysis

[11:00] <dalek> ecosystem: 

[11:00] <dalek> ecosystem: Early days on a package for very simple text sentiment analysis in perl6.

[11:00] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/d71ff5bcdf

[11:00] <dalek> ecosystem: 4306d94 | tadzik++ | META.list:

[11:00] <dalek> ecosystem: Merge pull request #14 from MattOates/patch-1

[11:00] <dalek> ecosystem: 

[11:00] <dalek> ecosystem: Added Text--Emotion for text sentiment analysis

[11:00] <dalek> ecosystem: review: https://github.com/perl6/ecosystem/commit/4306d94123

[11:01] <isBEKaml> moritz: no, I just wanted to see if there's anyone else facing the same issue.

[11:03] <isBEKaml> this looks similar to the problem I'm seeing here: http://stackoverflow.com/questions/9555671/ghc-7-4-update-breaks-haskell98

[11:03] <bbkr> loading dylibs in NativeCall works on mac \o/

[11:05] <isBEKaml> NativeCall's picking up steam, cool. :)

[11:06] *** Su-Shee_ joined
[11:06] *** gootle left
[11:07] *** Su-Shee left
[11:07] *** Su-Shee_ is now known as Su-Shee

[11:09] <bbkr> now I can port GeoIP to other OS'es, previously it was mac-only

[11:10] <isBEKaml> ha, awesome!

[11:21] <bbkr> I have access to MaxMind paid libraries so I'll try also add support for them like in P5 GeoIP module

[11:23] <arnsholt> Spiffy!

[11:23] <arnsholt> Give me a shout if you run into anything odd

[11:24] <arnsholt> Also, if you can think of a way to make the test calling out to libc work on Linux, I'd be very grateful as well =)

[11:24] *** mtk joined
[11:29] <FROGGS> arnsholt: whats the problem with libc?

[11:29] <bbkr> rakudo: :().^methods>>.say

[11:30] <p6eval> rakudo 3d31af: OUTPUT«perl␤returns␤count␤Unmarshallable foreign language value passed for parameter 'obj'␤  in method dispatch:<hyper> at src/gen/CORE.setting:936␤  in block  at /tmp/rrQcZukkaa:1␤␤»

[11:30] <tadzik> arnsholt: that's working, isn't it?

[11:30] <tadzik> like, is native("")

[11:30] <tadzik> there should be a fork() example in the repo

[11:35] <[Coke]> if I want to override stringification on an nqp object, what method do I override? (neither string nor gist work.)

[11:36] <[Coke]> nqp: class bar {method Str() {return "str"}; method gist() {return "gist"}}; say bar.new

[11:36] <p6eval> nqp: OUTPUT«Confused at line 2, near "say bar.ne"␤current instr.: 'panic' pc 19999 (src/stage2/gen/NQPHLL.pir:7315) (src/stage2/gen/NQPHLL.pm:324)␤»

[11:37] <[Coke]> nqp: class bar {method Str() {return "str"}; method gist() {return "gist"}}; say(bar.new

[11:37] <p6eval> nqp: OUTPUT«Confused at line 2, near "say(bar.ne"␤current instr.: 'panic' pc 19999 (src/stage2/gen/NQPHLL.pir:7315) (src/stage2/gen/NQPHLL.pm:324)␤»

[11:37] <[Coke]> nqp: class bar {method Str() {return "str"}; method gist() {return "gist"}}; say(bar.new)

[11:37] <p6eval> nqp: OUTPUT«bar<-757475111>␤»

[11:38] <[Coke]> nqp: class bar {method Str() {return "str"}; method gist() {return "gist"}}; say(~bar.new)

[11:38] <p6eval> nqp: OUTPUT«bar<1893352701>␤»

[11:41] <[Coke]> sorry, that should have read, "neither Str nor gist work"

[11:42] <moritz> [Coke]: I don't think it works with a method, you have to publish a vtable override

[11:44] <moritz> [Coke] grep for vtable in src/Perl6/Metamodel/BOOTSTRAP.pm (in the rakudo repo)

[11:44] <arnsholt> tadzik: It is? When I tried it last (which is a bit back, admittedly) it failed because of Linux library naming shenanigans

[11:45] <tadzik> arnsholt: dunno then. I remember it working though :)

[11:45] <arnsholt> is native("libc") went looking for libc.so on the machine I tried, which didn't work because it's named libc.so.6 or something

[11:46] * arnsholt goes testing

[11:47] <FROGGS> perl6 -MNativeCall -e 'sub A ( int ) is native("libc") { }; A(7)'

[11:47] <FROGGS> Cannot locate native library 'libc.so'

[11:47] <FROGGS> who is searching for the library? parrot?

[11:48] <arnsholt> dlopen(3)

[11:49] <arnsholt> If you try to `ls /lib64/libc.*` you'll see why it can't find libc.so

[11:49] <arnsholt> tadzik: Well, dlopen("") works, true

[11:49] <arnsholt> But the test is to check that opening .dylibs on OS X works

[11:50] <arnsholt> Er, native("") that is

[11:51] <FROGGS> what about creating a lib on your own? and load this one?

[11:51] <arnsholt> But I wanted to write a test that tests it on OS X while still being an OK test on other OSes, to sidestep the whole "which OS is this again" issue

[11:51] <FROGGS> like you already do in tests

[11:51] <arnsholt> Hmm. Might work

[11:53] *** tgt left
[11:54] <isBEKaml> moritz: I have opened a new Pugs issue. It might gain more eyes looking at it. :)

[11:57] <isBEKaml> arnsholt: sorry if I sound stupid, but shouldn't dlopen work in locating libraries for you? I mean, that's how you locate libraries, right? (or ldd?)

[11:58] *** tgt joined
[11:59] <isBEKaml> ls

[12:00] <dalek> zavolaj: 92a9254 | (Arne Skjærholt)++ | README.markdown:

[12:00] <dalek> zavolaj: Fix typo in README.

[12:00] <dalek> zavolaj: 

[12:00] <dalek> zavolaj: Some inconsistent naming in the CPointer REPR example, where both FooPointer

[12:00] <dalek> zavolaj: and FooHandle referred to the same class. Closes #14.

[12:00] <dalek> zavolaj: review: https://github.com/jnthn/zavolaj/commit/92a925422b

[12:00] <arnsholt> isBEKaml: That's what I thought too, but it seems like it doesn't :/

[12:01] <arnsholt> Although right now there's something odd with loading libs in general on Linux

[12:02] <isBEKaml> arnsholt: Oh, I've seen that sort of things happening on different distributions. Debian keeps libraries in one place, ubuntu another, slackware 32 bit yet another and slackware 64 bit keeps its own 64 bit libraries. Ooh, my shenanigans! 

[12:04] <isBEKaml> arnsholt: I don't know if this is what you're seeing - if libc were natively compiled on each of these distributions, dlopen should probably work. 

[12:05] <arnsholt> The problem isn't really locations, as far as I can make out, it's naming

[12:05] <arnsholt> dlopen("libc") goes looking for a file named libc.so, but the actual file is called libc.so.6 which makes everything break horribly =(

[12:06] <isBEKaml> Oh. :( 

[12:11] <arnsholt> moritz: Older commits in Zavolaj are broken in the same way as you reported. I'm starting to wonder if I haven't broken something via NQP...

[12:13] <arnsholt> Upping NQP and friends to check

[12:14] *** sisar left
[12:22] <arnsholt> moritz: Using Rakudo and NQP heads the test suite seems to run fine on my machine. What revisions are you on?

[12:23] <moritz> arnsholt: rakudo was up-to-date at the time I posted the ticket

[12:23] <moritz> and nqp was generated with --gen-nqp

[12:25] <arnsholt> Hmm. How many commits between NQP_REVISION and NQP head>

[12:26] <[Coke]> moritz: this is for TclList, which started out with a vtable override, which also didn't work. Checking Bootstrap...

[12:28] <[Coke]> moritz: odd, those are dynamic calls; my overrides (originally from parrot-nqp days) are in the class definition (TclList has an !@array, which handles ...)

[12:30] <[Coke]> ... and get_string isn't one of them (though I implement a get_string method.) Odd.

[12:31] <moritz> note that a method named get_string alone doesn't help at all, since vtables and methods are stored in different places

[12:33] <[Coke]> aye. I know (knew?) that, as I am using "is parrot_vtable_handler" or somesuch.

[12:33] <[Coke]> just another mysterious "used to work in parrot-nqp" change that does make sense.

[12:35] <moritz> oh, I've just seen that the rakudo vtable stuff is implemented in src/Perl6/Metamodel/ParrotInterop.pm

[12:35] <moritz> which calls pir::stable_publish_vtable_mapping__vPP

[12:36] <moritz> which seems to take a type object and a hash

[12:39] <Ulti> hmmm my Text::Emotion module doesn't work when installed via panda, it has a problem with the POD parsing: No such method 'content' for invocant of type 'Any'

[12:40] <Ulti> the pir file has all that data embedded though

[12:40] <moritz> is "installed with panda" the problem, or is it "precompiled"?

[12:41] <Ulti> I can check

[12:41] <Ulti> I imagine its precompiled, since panda hasn't done anything wrong and its in the path etc.

[12:50] *** tgt left
[12:51] *** gootle joined
[12:53] <[Coke]> moritz: so, the "has ... is parrot_vtable_handler" works when using handles for a hasa. how does one specify that a method in the object handles one of the parrot vtables?

[12:53] <Ulti> moritz: precompiled

[12:54] <Ulti> :[

[12:54] *** atrodo joined
[12:55] <Ulti> so if a .pir is sat in a local lib folder you get the same message, if its just the .pm everything works as expected grabbing from $=pod

[12:55] <[Coke]> does that require the code you pointed to in BOOTSTRAP?

[12:55] * Ulti writes a test

[12:56] <[Coke]> (looks like the bootstrap code is still pointing the vtable to a handler hasa, not to a method.

[12:56] <moritz> nqp: sub static($code) {

[12:56] <p6eval> nqp: OUTPUT«Unable to parse blockoid, couldn't find final '}' at line 2, near ""␤current instr.: 'panic' pc 19999 (src/stage2/gen/NQPHLL.pir:7315) (src/stage2/gen/NQPHLL.pm:324)␤»

[12:56] <dalek> Perlito: c8718c4 | (Flavio S. Glock)++ | README-perlito5-js:

[12:56] <dalek> Perlito: Perlito5 - js3 - add some ideas to README

[12:56] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/c8718c4a3a

[12:57] <moritz> nqp: sub static($code) { $code.get_lexinfo().get_static_code() }; class A { }; A.HOW.add_parrot_vtable_mapping(A, 'get_string', static(sub ($self) { 'OH HAI' })); say(A.new)

[12:57] <p6eval> nqp: OUTPUT«A<-1469704912>␤»

[12:57] <moritz> nqp: sub static($code) { $code.get_lexinfo().get_static_code() }; class A { }; A.HOW.add_parrot_vtable_mapping(A, 'get_string', static(sub ($self) { 'OH HAI' })); say(~A.new)

[12:57] <p6eval> nqp: OUTPUT«A<1078423391>␤»

[12:57] <moritz> nqp: sub static($code) { $code.get_lexinfo().get_static_code() }; class A { }; A.HOW.add_parrot_vtable_mapping(A, 'get_string', static(sub ($self) { 'OH HAI' })); A.HOW.compose(A); say(~A.new)

[12:58] <p6eval> nqp: OUTPUT«OH HAI␤»

[12:58] <moritz> nqp: sub static($code) { $code.get_lexinfo().get_static_code() }; class A { method Str() { 'OH HAI' } }; A.HOW.add_parrot_vtable_mapping(A, 'get_string', static(sub ($self) { $self.Str })); A.HOW.compose(A); say(~A.new)

[12:58] <[Coke]> O_o

[12:58] <p6eval> nqp: OUTPUT«OH HAI␤»

[12:59] <moritz> not sure if there's syntactic sugar for the method case

[12:59] <moritz> I guess that if you open a ticket, jnthn++ will add something

[12:59] <[Coke]> that's a big step from JFW in parrot's nqp. Danke, I'll see if I can incorporate that.

[13:07] *** tgt joined
[13:07] <[Coke]> moritz: my initial test on that fails for TclList. I'll see what I can do later, but $DAYJOB

[13:08] *** PacoAir joined
[13:11] *** benabik left
[13:12] *** benabik joined
[13:12] *** fhelmberger left
[13:14] *** isBEKaml|2 joined
[13:15] *** GlitchMr joined
[13:17] *** isBEKaml left
[13:18] *** fhelmberger joined
[13:19] *** flightrecorder left
[13:20] *** FROGGS left
[13:20] <GlitchMr> ok, I'm now going to have fun compiling 2012.09 on feather

[13:21] * hoelzro wonders if the debugger issues he saw in 2012.08 are fixed

[13:22] <GlitchMr> I hope that my automated tools still work

[13:23] *** stopbit joined
[13:29] *** stopbit left
[13:30] *** isBEKaml|2 left
[13:31] <GlitchMr> src/core/you_are_here.pm

[13:31] <GlitchMr> ok

[13:34] *** grondilu joined
[13:34] <grondilu> rn: say [ 1j ];

[13:34] <p6eval> rakudo 3d31af: OUTPUT«===SORRY!===␤Unable to parse postcircumfix:sym<[ ]>, couldn't find final ']' at line 2, near "1j ];"␤»

[13:34] <p6eval> ..niecza v22-6-g9e5350d: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Whitespace is required between alphanumeric tokens at /tmp/9IvZPMHprd line 1:␤------> [32msay [ 1[33m⏏[31mj ];[0m␤␤Two terms in a row at /tmp/9IvZPMHprd line 1:␤------> [32msay [ 1[33m⏏[31mj ];[0m␤␤Parse failed␤␤»…

[13:34] <grondilu> rn: say 1j;

[13:34] <p6eval> niecza v22-6-g9e5350d: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Whitespace is required between alphanumeric tokens at /tmp/NzeNCp3XIE line 1:␤------> [32msay 1[33m⏏[31mj;[0m␤␤Two terms in a row at /tmp/NzeNCp3XIE line 1:␤------> [32msay 1[33m⏏[31mj;[0m␤␤Parse failed␤␤»…

[13:34] <p6eval> ..rakudo 3d31af: OUTPUT«===SORRY!===␤Confused␤at /tmp/dxOJp045M9:1␤»

[13:34] <grondilu> rn: say +1j;

[13:34] <p6eval> rakudo 3d31af: OUTPUT«===SORRY!===␤Confused␤at /tmp/aXQ0kljFmc:1␤»

[13:34] <p6eval> ..niecza v22-6-g9e5350d: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Whitespace is required between alphanumeric tokens at /tmp/WBNQRxA9hj line 1:␤------> [32msay +1[33m⏏[31mj;[0m␤␤Two terms in a row at /tmp/WBNQRxA9hj line 1:␤------> [32msay +1[33m⏏[31mj;[0m␤␤Parse failed␤␤»…

[13:35] <grondilu> rn: say [ 1i ];

[13:35] <p6eval> rakudo 3d31af, niecza v22-6-g9e5350d: OUTPUT«0+1i␤»

[13:36] <grondilu> had confused i with j.  Please ignore.

[13:37] <GlitchMr> glitchmr@feather ~> perl6-debug

[13:37] <GlitchMr> perl6-debug          perl6-debug-2012.08  perl6-debug-2012.09

[13:37] *** grondilu left
[13:42] *** Targen left
[13:46] <tadzik> GlitchMr: please stop

[13:46] <GlitchMr> sorryt

[13:46] <GlitchMr> I accidently typed wall

[13:48] *** kaare__ joined
[13:49] *** skids joined
[13:51] <dalek> Perlito: 8c165e0 | (Flavio S. Glock)++ | README-perlito5-js:

[13:51] <dalek> Perlito: Perlito5 - js3 - README update

[13:51] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/8c165e0c14

[13:56] *** benabik left
[13:59] *** tgt left
[14:02] <dalek> Pugs.hs: 3ee7e28 | au++ | pugs-compat/src/Pugs/Compat/Posix.hs:

[14:02] <dalek> Pugs.hs: * Try addressing #25.

[14:02] <dalek> Pugs.hs: 

[14:02] <dalek> Pugs.hs:   Still downloading Haskell Platform on Windows 8 here, so not

[14:02] <dalek> Pugs.hs:   exactly sure if it's the right fix... Will follow up soon.

[14:02] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/3ee7e28b42

[14:02] *** avrono joined
[14:04] *** jerome joined
[14:05] *** buubot_backup joined
[14:05] *** avrono left
[14:08] *** fhelmberger left
[14:09] <Ulti> how can I just directly execute a pir file with parrot?

[14:09] <moritz> parrot file.pir

[14:09] <moritz> but that doesn't work for rakudo-generated .pir files

[14:10] <Ulti> ok there is something really weird going on, if I directly run parrot it wiggs out not being able to find libraries

[14:10] <Ulti> moritz: ahh ok

[14:10] <Ulti> what do I do with rakudo-generated .pir files?

[14:10] <moritz> you 'use' them

[14:11] <moritz> (ie makes only sense for module files)

[14:11] *** wk left
[14:11] *** flightrecorder joined
[14:12] *** FROGGS joined
[14:13] <Ulti> in that case yeah, $=pod just doesn't work with precompiled .pir files :(

[14:15] <Ulti> $=pod looks like: Array.new(Pod::Block::Named.new(name => "data", config => ().hash, content => Array.new())) regardless of what's in the source

[14:15] *** tgt joined
[14:15] <Ulti> I'll try using a section called data

[14:15] <Ulti> oh right that is what I used

[14:15] <Ulti> its just empty

[14:17] <tadzik> yeah, that's NYI, sorry

[14:17] <tadzik> I don't see why Pod wouldn't work with precompiled modules though

[14:17] *** tgt left
[14:17] <tadzik> jnthn is to be asked I guess

[14:18] <Ulti> looks like its implemented for the very top level

[14:18] <Ulti> so all the sections are there with empty arrays

[14:18] <Ulti> I could store all my data as POD sections ;)

[14:18] *** bluescreen10 joined
[14:19] <Ulti> kind of odd it works, apart from if you are working from the pir file, which has the data inside if you read the pir

[14:23] *** tgt joined
[14:27] *** spider-mario joined
[14:27] *** MikeFair___ joined
[14:28] *** MikeFair_ left
[14:41] *** benabik joined
[14:44] *** spanner joined
[14:47] *** tgt left
[14:47] *** isBEKaml joined
[14:49] *** fhelmberger joined
[14:55] <gfldex> pmichaud: i traced the cygwin problem down a little further: https://gist.github.com/3812274

[14:56] <gfldex> perl -e 'sysrem($foo)' is calling "/bin/sh -c $foo"

[14:56] <gfldex> /bin/sh is setting the PWD to $HOME

[14:58] <isBEKaml> gfldex: IIRC, sh -l sets it to login mode - that is, $PWD is $HOME. I'm not sure that's what you were looking for.

[14:59] <gfldex> i'm looking for it not doing that

[14:59] <gfldex> on cygwin building nqp fails for me because perl5/system() is doing funky stuff

[15:00] *** sivoais left
[15:01] *** benabik_ joined
[15:01] <isBEKaml> Oh, I see... perl5's system() on cygwin is broken? :/

[15:01] <hoelzro> fg

[15:01] <hoelzro> oops

[15:02] <isBEKaml> hoelzro: It's alright - I typed ls on a windows cmd prompt. =)

[15:02] <isBEKaml> and here on this window too. Muscle memory's stronger than visual signals. :D

[15:03] <skids> .oO(A bot that makes fun of you for typing unix commands in the IRC window.)

[15:03] <isBEKaml> skids: we have some part of it here. 

[15:03] <isBEKaml> :wq

[15:03] * hugme hugs isBEKaml, good vi(m) user!

[15:03] <isBEKaml> :)

[15:03] *** xinming_ joined
[15:04] *** tgt joined
[15:04] *** benabik left
[15:04] *** xinming left
[15:04] *** benabik_ is now known as benabik

[15:09] *** sivoais joined
[15:11] <gfldex> i did some sneaky perl6 pomotion and got a hug offer in return: http://forums.runicgames.com/viewtopic.php?f=30&t=39936&p=356306#p356721

[15:13] <PerlJam> gfldex: Why is it unlikely that they'll be able to get your script running?

[15:14] <gfldex> i doubt to be able to give any reasonable answer to that question without getting disrepsectful

[15:17] *** kaleem left
[15:20] *** sftp left
[15:21] * doy was wondering if a "hug offer" was a perl6-ism for being trolled

[15:21] *** arlinius left
[15:25] *** birdwind1pbird joined
[15:29] <shachaf> hi isBEKaml

[15:29] <isBEKaml> hi

[15:29] <shachaf> GHC 7.6 broke a lot of things.

[15:29] <isBEKaml> yeah, I was specifically wondering about that. 

[15:30] *** Circlepuller_ joined
[15:30] <isBEKaml> also, if you see the issue message, I also asked if it was high time we moved out of haskell98 packages wrt Pugs

[15:30] <shachaf> I think the right solution is to do less in the way of pugs-compat wrappers and multiple module imports and more in the way of doing things the way you're supposed to.

[15:30] *** odoacre_ left
[15:30] <shachaf> Yep.

[15:31] <shachaf> Where's stringtable-atom maintained?

[15:32] *** Circlepuller left
[15:32] <isBEKaml> Right, I guess au++ knows a lot about those kind of things (i.e., dependencies and other stuff, which can potentially break if I get around to fixing these :)

[15:36] <shachaf> Hmm, what happened to all the changes I made to Pugs.hs?

[15:37] <shachaf> E.g. it's all back to -fglasgow-exts, and I'm pretty sure I added LANGUAGE pragmas everywhere.

[15:37] <isBEKaml> I'm right now here: https://gist.github.com/3812560

[15:38] *** arlinius joined
[15:38] <shachaf> How did you get stringtable-atom to build?

[15:39] *** arlinius left
[15:39] <shachaf> (containers 0.4?)

[15:40] <shachaf> Oh, everything I did is in the branch origin/deprecations...

[15:41] <shachaf> Might be worth merging it in.

[15:41] <shachaf> (Hmm, not everything. Maybe I didn't push some of it?)

[15:41] <gfldex> pmichaud: i think i got it: https://gist.github.com/3812578

[15:41] <isBEKaml> shachaf: I don't remember building stringtable stuff. 

[15:41] <shachaf> isBEKaml: It's a dependency of pugs-compat

[15:42] <isBEKaml> yeah, I can see that in .cabal file - but I don't remember building it at all. But it's there in my .cabal dir.

[15:42] <shachaf> Do you have containers-0.4?

[15:42] <isBEKaml> ~/.cabal - that is.

[15:42] <shachaf> By the way, I'm not the only person who finds things like https://github.com/perl6/Pugs.hs/blob/master/Pugs/src/Pugs/AST/Types.hs#L380 worrying, am I?

[15:43] <isBEKaml> shachaf: no, not containers

[15:43] <shachaf> Odd.

[15:43] <geekosaur> ... that makes my brain hurt

[15:44] <shachaf> Also https://github.com/perl6/Pugs.hs/blob/master/Pugs/src/Pugs/Types.hs#L627

[15:46] <isBEKaml> the bang stuff? forcing eval?

[15:46] <isBEKaml> (Sorry, I'm seriously outta my base here)

[15:47] <geekosaur> isBEKaml, extremely questionable Ord instances for types that are not really compare-able

[15:48] <shachaf> "questionable" meaning broken and/or GC-unsafe and/or pointless.

[15:49] *** am0c joined
[15:49] * geekosaur wtf-ed a bit and then closed the windows in the interests of sanity

[15:50] <isBEKaml> hmm, I just found the ![type] stuff odd - haven't seen them before. 

[15:50] *** hoelzro is now known as hoelzro|away

[15:51] <isBEKaml> geekosaur: ISTR you were once an active contributor to Pugs. 

[15:51] <geekosaur> I poked at it a bit, my biggest contribution was kinda negative though

[15:52] <daxim> you deleted code?

[15:52] <geekosaur> I implemented the then-specced file stat stuff, and the problemms I ran into led to their being re-spec-ed differently (and in a way that pugs couldn't implement...)

[15:52] <isBEKaml> geekosaur: :/ (what's stopping you from coming back to it? )

[15:52] <isBEKaml> I'd love to see Pugs humming along once again. 

[15:53] <geekosaur> mostly that I have been unemployed and homeless for over a year (just started a new job today, am idling on IRC between phone calls etc.)

[15:54] <isBEKaml> geekosaur: congrats on the new job! (Now, it'd be tough getting you back :)

[15:55] <geekosaur> keep trying to get set up to do development somewhere and then another rug gets yanked out from under me; I kindagave up.  (this may change at some point but instability will be lasting at least another month...)

[15:58] <isBEKaml> geekosaur: sorry, with this new job - hopefully, everything gets back to good conditions. 

[15:58] *** tim__ joined
[16:00] <geekosaur> also I'm not as good at haskell as I'd like to be; generall good enough to muddle through xmonad configuration, but pugs source always confused the heck out of me :/

[16:00] <geekosaur> admittedly a large chunk of that is probably not so much lack of haskell understanding as it is lack of being inside au's head :) 

[16:02] *** rjbs joined
[16:02] <rjbs> What does this item mean in the latest R* release notes? 

[16:02] <rjbs> * Parameters preceded by a | or \ can no longer have a sigil.

[16:03] <tim__> Hello all, just coming back to perl after a long, long break.  Was wondering if anyone can point me in the direction of a document which explains the strategic "big picture" stuff for perl 6?

[16:03] <FROGGS> rjbs: that it is now \foo instead of \$foo

[16:05] <tim__> Google is returning a lot of hits in the 2007/8 period so I was hoping for something a little more recent.

[16:05] *** thou joined
[16:06] <raiph> tim__: http://perlcabal.org/syn/S01.html

[16:06] <perigrin> one would hope that "big picture / strategic" stuff didn't change every 3-4 years.

[16:06] <geekosaur> it's been known to, but I think it's mostly stable these days :)

[16:06] <perigrin> I think it's been *fairly* stable for 3-4 years :)

[16:06] <perigrin> at least I haven't heard any major rumbles 

[16:07] <tim__> Last time I was involved we were at the early Apocalypse stage... been a while.

[16:07] <FROGGS> tim__: you can read the specs and tests suites hostet on github too

[16:08] <FROGGS> tim__: see "specs" and "roast" here: https://github.com/perl6/

[16:08] <raiph> tim__: S01 is up to date, last edited march this year

[16:10] <rjbs> ("Perl 6 Celebrity Roast")

[16:10] <tim__> Hmmm...  Thanks guys, had a quick look.  I'm after more of a discussion about whether p6 is switching to a VM... that sort of level.

[16:10] <rjbs> Perl 6 is a specification.

[16:10] <tim__> I read somewhere that there will even be different implementations

[16:11] <rjbs> There are a number of implementations ongoing.

[16:11] <geekosaur> rnp: "hi".say

[16:11] <p6eval> rakudo 3d31af, niecza v22-6-g9e5350d, pugs: OUTPUT«hi␤»

[16:12] <isBEKaml> geekosaur: I'm only just out exploring pugs source. I don't know much haskell. :)

[16:12] <raiph> tim__: maybe spend 6 minutes watching this: http://www.youtube.com/watch?v=tCel6lpDTZI 

[16:12] <tim__> So how will that gel with being installed by default on, say, CentOS?

[16:12] <rjbs> You'll pick one to install.

[16:12] <rjbs> same as with ruby

[16:13] <shachaf> isBEKaml: My experiences with Pugs source suggest that reading it is not an optimal way to learn Haskell. :-)

[16:13] <tim__> So p6 won't be part of, say, the Basic Server package that a typical user might select during the install?

[16:13] <raiph> tim__: rakudo is one of the Perl 6 compilers 

[16:13] <rjbs> tim__: Not in the next year, at any rate.

[16:13] <isBEKaml> shachaf: I'm not looking for a way to learn haskell. I'm just looking to get Pugs running. :)

[16:14] <isBEKaml> shachaf: as to learning haskell, we always have LYAH and RWH. :)

[16:14] <rjbs> RWH?

[16:14] <isBEKaml> Real World Haskell

[16:14] *** MayDaniel joined
[16:14] <tim__> Cheers, and thanks for that.  I'll spend 6 minutes watching that video raiph lined now :)

[16:14] <raiph> tim__: if you just want to get work done, focus on p5 which is in great shape 

[16:15] <tim__> Yeah, p5 is still solid.  Have been playing with Erlang lately and am not sure how my brain will cope with the shift back to p5.

[16:16] <raiph> #perl6 is at about the point it needs Erlang savvy input regarding p6, so please come back and share :)  

[16:17] <tim__> >> lightweight stackless threads <<  :)  

[16:18] <isBEKaml> shachaf: can you tell me anything about my last gist? Why does my windows cabal build look for Posix based libraries? :/

[16:20] <isBEKaml> ah, this line - https://github.com/perl6/Pugs.hs/blob/master/pugs-compat/src/Pugs/Compat/Posix.hs#L58. 

[16:21] <isBEKaml> it goes into #else and naturally imported System.Posix.Internals which requires POSIX installed. :/

[16:21] * [Coke] is happy to see more pugs interest.

[16:21] <[Coke]> Go change stuff and run spectests!

[16:21] <isBEKaml> [Coke]: we first need it built - it doesn't even build at the moment! :)

[16:21] <[Coke]> only if you upgrade your haskell. :P

[16:22] <[Coke]> did au's change help?

[16:22] <isBEKaml> [Coke]: man, I used to get it running out of the box on ghc 6.12.3 (slackware 13.0) :)

[16:23] <isBEKaml> [Coke]: it's more involved than that. See: https://gist.github.com/3812560

[16:23] <shachaf> Does it build with the "deprecations" branch?

[16:23] *** wtw left
[16:24] <shachaf> Probably not.

[16:24] <shachaf> The GHC/libraries folks don't seem to mind breaking things very much.

[16:25] <shachaf> 7.6 was a particular offender, though.

[16:26] *** birdwindupbird left
[16:27] <isBEKaml> shachaf: I don't think it'd quite work. I'm on 7.4.1 and it's offended by haskell98. 

[16:27] *** benabik_ joined
[16:27] <shachaf> 7.4.1 *should* work with haskell98...

[16:27] <[Coke]> apparently no one has upgraded GHC on feather yet, as the daily builds are still working.

[16:28] <shachaf> Anyway, if you're using 7.4, that explains why things are still working for you. :-)

[16:28] <shachaf> 7.6 is the future, though!

[16:28] * [Coke] needs to push that out tonight, several days worth of data pending.

[16:28] <isBEKaml> shachaf: alright, 7.6 is the future, 7.4.1 is the present. :)

[16:28] <shachaf> Yep.

[16:29] <isBEKaml> shachaf: and, if it were working for me, why would I raise a ticket? :)

[16:29] *** benabik left
[16:29] *** benabik_ is now known as benabik

[16:29] <daxim> 7.6 broke even Cabal/cabal-install, look at that crap:  http://paste.scsys.co.uk/208879

[16:29] <shachaf> isBEKaml: I mean stringtable-atom

[16:29] <isBEKaml> ah

[16:29] <shachaf> daxim: Yes, it's a mess.

[16:40] *** grondilu joined
[16:41] <grondilu> spectest for IO::Socket::INET failed for me:  http://paste.siduction.org/20121001163945

[16:53] <isBEKaml> bah, System.Posix.Internals is very much part of base-4.5.x in haskell platform. but no cabal docs. :(

[16:56] *** supernovus joined
[16:57] <supernovus> https://gist.github.com/3812996

[16:57] *** tokuhiro_ joined
[17:03] *** birdwind1pbird left
[17:07] <dalek> Pugs.hs: bc68e57 | au++ | pugs-compat/src/Pugs/Compat/Posix.hs:

[17:07] <dalek> Pugs.hs: Revert "* Try addressing #25."

[17:07] <dalek> Pugs.hs: 

[17:08] <dalek> Pugs.hs: OK, that doesn't work. It appears to be a tricky problem...

[17:08] <dalek> Pugs.hs: Maybe we will end up splitting the "base" pugs-compat part

[17:08] <dalek> Pugs.hs: with the "haskell98" part.

[17:08] <dalek> Pugs.hs: 

[17:08] <dalek> Pugs.hs: This reverts commit 3ee7e28b42fdfad73dc6bbd69fb3cb7b412063c4.

[17:08] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/bc68e57b5e

[17:08] *** tgt left
[17:10] <supernovus> Yay, with the Rakudo patch in my above gist, FastCGI::Protocol can generate valid headers and records!

[17:21] *** tokuhiro_ left
[17:30] *** isBEKaml left
[17:31] *** birdwindupbird joined
[17:39] <sorear> good * #perl6

[17:39] *** sftp joined
[17:58] <sjohnson> sorear: hi

[17:59] *** xinming_ left
[17:59] *** benabik_ joined
[18:01] *** benabik left
[18:01] *** benabik_ is now known as benabik

[18:02] <sorear> sjohnson: hi.

[18:03] *** sivoais left
[18:06] <[Coke]> supernovus++

[18:07] *** sivoais joined
[18:07] *** Pleiades` left
[18:12] *** Pleiades` joined
[18:18] *** Guest6772 joined
[18:18] *** Guest6772 left
[18:21] *** MayDaniel left
[18:27] *** grondilu left
[18:29] *** macae joined
[18:33] *** orafu joined
[18:40] *** fhelmberger left
[18:44] *** Pleiades` left
[18:50] *** cognominal joined
[19:02] <supernovus> Some of the error messages in rakudo could be better. Like "Confused" with no line numbers or other references, that's really useful.

[19:02] *** daxim left
[19:07] *** wk joined
[19:07] *** cognominal left
[19:07] *** cognominal joined
[19:10] *** lichtkind joined
[19:10] *** lichtkind is now known as undefined

[19:10] *** undefined is now known as Guest29691

[19:11] *** am0c left
[19:12] *** Pleiades` joined
[19:13] *** Guest29691 left
[19:21] <dalek> Perlito: db495c1 | (Flavio S. Glock)++ | misc/V8/perl5ish.patch:

[19:21] <dalek> Perlito: Perlito5 - V8 patch for perl5-ish accessors

[19:21] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/db495c1b8f

[19:40] *** tokuhiro_ joined
[19:44] *** hash_table joined
[19:49] <blez> V8?

[19:49] <blez> perl runs on v8?

[19:50] *** hash_table left
[19:51] <moritz> perlito does

[19:51] <moritz> (it implements a subset of Perl 6)

[19:55] *** japhb_ joined
[19:56] <japhb_> moritz, fglock++ is working on Perlito5 right now, which implements a subset of Perl *5*.

[19:56] <japhb_> Perlito is surprisingly diverse in inputs and outputs.

[19:57] <japhb_> s/outputs/targets/

[19:58] *** benabik_ joined
[20:00] *** benabik_ left
[20:00] *** benabik left
[20:00] *** bluescreen10 left
[20:03] <supernovus> Is there an equivalent to vec() in Perl 6?

[20:05] *** GlitchMr left
[20:05] *** aharoni joined
[20:06] <dalek> Perlito: 0e2edc9 | (Flavio S. Glock)++ | README-perlito5-js:

[20:06] <dalek> Perlito: Perlito5 - README-perlito5-js - perl5-ish accessors

[20:06] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/0e2edc9c15

[20:07] <aharoni> Hallo. I just cloned git://github.com/rakudo/rakudo.git and did Configure, make, make test, make spectest.

[20:07] <aharoni> All tests pass except t/spec/S02-types/version.t - Failed tests:  21-26.

[20:08] <aharoni> Let's say that I'm in the mood for trying to fix them. What would be the right way to run a minimal set of spectests and not the whole suite?

[20:09] <aharoni> More generally, is there a beginners' guide for hacking and testing Rakudo?

[20:10] *** tim__ left
[20:11] <[Coke]> make t/spec/S02-types/version.t

[20:11] <[Coke]> that should run that one test.

[20:12] *** tokuhiro_ left
[20:13] <aharoni> [Coke]++ thanks, it was very simple :)

[20:13] *** bluescreen10 joined
[20:16] *** popl joined
[20:23] *** Targen joined
[20:27] *** xdbr joined
[20:27] *** bruges_ joined
[20:28] *** ajf joined
[20:28] <ajf> Wow. Not really a Perl programmer, but Perl 6 looks really nice :)

[20:29] *** bruges left
[20:34] <diakopter> ajf: what do you like about it?

[20:35] <ajf> diakopter: the warts of Perl 5 are gone

[20:35] <ajf> well, easy things are easy, the sigils make sense now

[20:35] <ajf> and because of that it means I can harness much of the power of Perl without driving myself insane staring at $, @, and %

[20:36] *** Circlepuller joined
[20:36] *** raiph left
[20:36] <ajf> diakopter: but also things like lazy evaluation and such, I quite like that

[20:37] *** Circlepuller_ left
[20:37] *** popl left
[20:37] <ajf> diakopter: and multiple implementations is of course a good thing

[20:44] *** kaare__ left
[20:45] *** kurahaupo joined
[20:48] *** benabik joined
[20:50] <ajf> gtg.

[20:50] *** ajf left
[20:53] <supernovus> Any ideas on how to replicate the behavior of vec() in Perl 6? 

[20:54] *** hash_table joined
[20:54] *** birdwindupbird left
[20:59] <skids> supernovus: as an lvalue, or just as an rvalue?  as an rvalue just encode the string to a buffer, or all the values in the buffer into an Int, and use shifts/masks.

[21:01] <sorear> supernovus: because of perl 6's love of immutable types, I think lvalue vec() is a bad fit.

[21:02] <sorear> supernovus: probably better would be to use a compact array of uint1 and then coerce it to a Buf when you're done filling it out

[21:02] <supernovus> skids: I am working with Buf's directly, no Str involved here, and for my purposes, lvalue only, no assignments.  Basically, I want to be able to do the same as vec($buf, 2, 16);

[21:02] <supernovus> err, rvalue only, not lvalue, sorry

[21:02] <japhb_> In full (spec) Perl 6, you'd  just use an array of int1.  We just don't have that implemented yet.

[21:03] <skids> Always 16?  Should be easy then.

[21:03] <japhb_> sigh, yes, uint1

[21:03] <supernovus> No, some are 8, some are 16. But with 8 I should be able to just do $buf[$offset] ?

[21:04] <skids> supernovous: yes as long as your bit-endianness is the way you want it.

[21:04] <japhb_> Are the 16-bit values stored LE or BE?

[21:04] <supernovus> oh, and some are 32

[21:06] <japhb_> supernovus, if it's always on byte boundaries, consider just using Buf.unpack

[21:07] <sorear> subbuf + unpack is what I would do in p5

[21:11] <skids> r: my $b = Buf.new(1,2,3,4,5,6,7,8); my $bits = 16; my $offset = 2; ([+|] $b[(($bits div 8) * $offset) ..^ (($bits div 8) * ($offset + 1))] Z+< (0, 8, 16, 32)).fmt("%x").say;

[21:11] <p6eval> rakudo 3d31af: OUTPUT«605␤»

[21:12] * skids decommute

[21:17] *** skids left
[21:24] <supernovus> skids: I must take a bit to wrap my brain around that. I'm afraid I'm not the best at math, but it looks pretty nice.  Oh you logged off. 

[21:29] *** arlinius joined
[21:32] *** Pleiades` left
[21:32] *** bluescreen10 left
[21:40] *** bro_grammer joined
[21:40] *** arnsholt_ joined
[21:40] *** arnsholt left
[21:40] *** Pleiades` joined
[21:41] *** erkan left
[21:43] *** erkan joined
[21:43] *** erkan left
[21:43] *** erkan joined
[21:43] *** hash_table left
[21:54] *** dju left
[21:56] *** wk left
[21:56] *** wk joined
[21:57] *** dju joined
[21:57] <supernovus> Hmm, is skids's vec algorithm big-endian or little-endian? According to the Perl 5 docs for vec() it converts to big-endian format ('n'/'N' in pack.)

[22:04] *** Pleiades` left
[22:06] *** spider-mario left
[22:08] *** Pleiades` joined
[22:16] *** nebuchadnezzar left
[22:26] *** benabik left
[22:27] <supernovus> I used sorear's suggestion of subbuf and unpack to remove the need for vec in the FastCGI::Protocol codebase. Crossing my fingers that it'll work :-)

[22:28] *** Circlepuller_ joined
[22:28] *** Circlepuller left
[22:28] *** benabik joined
[22:36] *** aharoni left
[22:37] *** Pleiades` left
[22:45] *** SamuraiJack joined
[22:58] *** skids joined
[23:03] *** SamuraiJack left
[23:08] *** whiteknight joined
[23:35] *** PacoAir_ joined
[23:35] *** PacoAir left
[23:35] *** PacoAir_ is now known as PacoAir

[23:40] *** blez left
[23:55] *** whiteknight left
