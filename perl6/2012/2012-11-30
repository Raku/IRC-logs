[00:04] *** ryutin left
[00:05] *** fgomez left
[00:06] *** atrodo left
[00:06] *** arlinius left
[00:07] * Woodi would like to note that cartoon is for modules only and their dependencies. rest should be builded on modules-management-system...

[00:15] *** tokuhiro_ left
[00:15] *** tokuhiro_ joined
[00:18] <flussence> rn: say &fork

[00:18] <p6eval> rakudo 7ede6c: OUTPUT«Nil␤»

[00:18] <p6eval> ..niecza v22-44-g0247fe5: OUTPUT«===SORRY!===␤␤Undeclared routine:␤     'fork' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1443 (die @ 5) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 37) ␤  at /hom…

[00:18] <flussence> n: say &fork.defined

[00:18] <p6eval> niecza v22-44-g0247fe5: OUTPUT«===SORRY!===␤␤Undeclared routine:␤     'fork' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1443 (die @ 5) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 37) ␤  at /hom…

[00:18] <flussence> :(

[00:20] * lue gets the feeling we're heading towards a miniature linux distro model in terms of software use and management in Perl 6.

[00:22] *** fgomez joined
[00:22] *** pmurias left
[00:23] <flussence> all the fun of package managers plus all the fun of web development circa 2005...

[00:26] <lue> .oO( I hope that web development part isn't true :/ )

[00:29] <grondilu> rn:  enum Count < 1 2 lots >; say Count{1};

[00:29] <p6eval> rakudo 7ede6c, niecza v22-44-g0247fe5: OUTPUT«Any()␤»

[00:29] <grondilu> rn:  enum Count < 1 2 lots >; say Count.kv;

[00:29] <p6eval> niecza v22-44-g0247fe5: OUTPUT«Unhandled exception: Attempted to access slot $!index of type object for Count␤  at /home/p6eval/niecza/lib/CORE.setting line 1220 (CommonEnum.key @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1222 (CommonEnum.kv @ 4) ␤  at /tmp/C8i74c4oC7 line 1 (m…

[00:29] <p6eval> ..rakudo 7ede6c: OUTPUT«Parameter '' requires an instance, but a type object was passed␤  in method kv at src/gen/CORE.setting:2390␤  in block  at /tmp/duDKJIF8ub:1␤␤»

[00:29] <flussence> it's only fun if you write for a single impl and don't need performance at all.

[00:29] <grondilu> rn:  enum Count < 1 2 lots >; say %(Count){1};

[00:29] <p6eval> niecza v22-44-g0247fe5: OUTPUT«Unhandled exception: Unmatched key in Hash.LISTSTORE␤  at /home/p6eval/niecza/lib/CORE.setting line 388 (Any.hash @ 3) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/QEt3FzBE8j line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4211…

[00:29] <p6eval> ..rakudo 7ede6c: OUTPUT«Odd number of elements found where hash expected␤  in method STORE at src/gen/CORE.setting:6547␤  in method hash at src/gen/CORE.setting:1196␤  in block  at /tmp/h4sQDStt_7:1␤␤»

[00:30] <grondilu> Can't I turn an enumeration into a hash??

[00:30] <grondilu> rn:  enum Count < 1 2 lots >; say Count.enums.hash{lots};

[00:30] <p6eval> rakudo 7ede6c, niecza v22-44-g0247fe5: OUTPUT«2␤»

[00:30] <timotimo> rn:  enum Count < 1 2 lots >; say Count.enums.hash; # doesn't this work?

[00:30] <p6eval> rakudo 7ede6c: OUTPUT«("1" => 0, "2" => 1, "lots" => 2).hash␤»

[00:30] <p6eval> ..niecza v22-44-g0247fe5: OUTPUT«{"1" => 0, "2" => 1, "lots" => 2}␤»

[00:30] <flussence> rn: enum Count < 1 2 lots >; say Count::<lots>

[00:30] <p6eval> rakudo 7ede6c, niecza v22-44-g0247fe5: OUTPUT«lots␤»

[00:30] <grondilu> flussence++

[00:31] <grondilu> rn:  enum Count < 1 2 lots >; say Count::{'lots'};  # just testing an other syntax

[00:31] <p6eval> rakudo 7ede6c, niecza v22-44-g0247fe5: OUTPUT«lots␤»

[00:32] <grondilu> ahh

[00:32] <grondilu> flussence--

[00:32] <timotimo> r: enum Count < 1 2 lots >; say Count::{'lots', '2'};

[00:32] <p6eval> rakudo 7ede6c: OUTPUT«lots 2␤»

[00:32] <flussence> yeah, I just realised how useless that was :)

[00:32] <flussence> rn: enum Count < 1 2 lots >; say Count::<something>

[00:32] <p6eval> rakudo 7ede6c, niecza v22-44-g0247fe5: OUTPUT«Any()␤»

[00:32] <grondilu> wierd

[00:32] <timotimo> is that good or bad? :|

[00:32] <flussence> rn: enum Count < 1 2 lots >; say Count::<lots>.perl

[00:32] <p6eval> rakudo 7ede6c, niecza v22-44-g0247fe5: OUTPUT«Count::lots␤»

[00:33] <flussence> rn: enum Count < 1 2 lots >; say Count::<lots>.kv

[00:33] <p6eval> rakudo 7ede6c, niecza v22-44-g0247fe5: OUTPUT«lots 2␤»

[00:33] <grondilu> I could go for .enums.hash, but that's a bit hairy

[00:33] <flussence> oh, not as useless as it looked

[00:33] <timotimo> r: enum Bool <True False FileNotFound>; say Bool::True.kv; # this one is famous

[00:33] <p6eval> rakudo 7ede6c: OUTPUT«0 True␤»

[00:35] <grondilu> rn:  enum Count < 1 2 lots >; say Count.^methods;

[00:35] <p6eval> niecza v22-44-g0247fe5: OUTPUT«Unhandled exception: Unable to resolve method methods in type ClassHOW␤  at /tmp/4fGYRtxfrB line 1 (mainline @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4211 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4212 (module-CORE @ 578) ␤  at…

[00:35] <p6eval> ..rakudo 7ede6c: OUTPUT«enums kv pair perl pick roll Int postcircumfix:<( )> Str Numeric gist key value Int Num Rat FatRat abs Bridge chr sqrt base expmod is-prime floor round ceiling sign conj rand sin asin cos acos tan atan atan2 sec asec cosec acosec cotan acotan sinh asinh cosh acosh …

[00:35] <lue> r: say ?2; enum Bool <True False FileNotFound>; say ?2;

[00:35] <p6eval> rakudo 7ede6c: OUTPUT«True␤True␤»

[00:35] <grondilu> rn:  enum Count < 1 2 lots >; say Count.enums».value;

[00:35] <p6eval> niecza v22-44-g0247fe5: OUTPUT«Unhandled exception: Unable to resolve method value in type EnumMap␤  at /tmp/_UrtdFaEqX line 1 (ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3092 (hyperunary @ 66) ␤  at /tmp/_UrtdFaEqX line 1 (mainline @ 5) ␤  at /home/p6eval/niecza/lib/CORE…

[00:35] <p6eval> ..rakudo 7ede6c: OUTPUT«No such method 'value' for invocant of type 'Int'␤  in method dispatch:<hyper> at src/gen/CORE.setting:985␤  in block  at /tmp/WGX23xK6vd:1␤␤»

[00:36] <grondilu> rn:  enum Count < 1 2 lots >; say Count.enums.WHAT;

[00:36] <p6eval> rakudo 7ede6c: OUTPUT«Hash()␤»

[00:36] <p6eval> ..niecza v22-44-g0247fe5: OUTPUT«EnumMap()␤»

[00:36] <grondilu> cough

[00:37] <grondilu> cough cough

[00:37] <grondilu> rn:  say Enum.enums.WHAT;

[00:37] <p6eval> niecza v22-44-g0247fe5: OUTPUT«Unhandled exception: Unable to resolve method enums in type Enum␤  at /tmp/43abnfjNz8 line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4211 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4212 (module-CORE @ 578) ␤  at /home…

[00:37] <p6eval> ..rakudo 7ede6c: OUTPUT«No such method 'enums' for invocant of type 'Enum'␤  in block  at /tmp/bFuoqevAh3:1␤␤»

[00:50] <TimToady> x10 L7on

[00:50] <phenny> TimToady: 29 Nov 03:03Z <japhb> tell TimToady I've been tanking on S11 and the big discussion we had this afternoon.  I'm beginning to wonder if the 'use' statement isn't the right place to be specifying auth and ver, or at least not the only place to make that choice.

[00:51] <phenny> TimToady: 29 Nov 03:05Z <japhb> tell TimToady I understand the desire to say "I need this API version from my dependency." But it's the wrong place to specify it when you want to bundle, i.e. specify "These packages of software have been tested together", where you want to make a more project-global choice

[00:51] <phenny> TimToady: 29 Nov 03:06Z <japhb> tell TimToady I'll continue to tank on it, but input from your highly non-linear thinking patterns desired.

[00:52] *** Gothmog_ joined
[00:58] *** anuby joined
[01:02] *** was joined
[01:03] <was> rn: my %g = <a 1 b 1 c 1>;my ($t, $u) = <a b>;%g.delete($t, $u);say %g.perl;

[01:03] <p6eval> rakudo 7ede6c: OUTPUT«("a" => "1", "b" => "1", "c" => "1").hash␤»

[01:03] <p6eval> ..niecza v22-44-g0247fe5: OUTPUT«Unhandled exception: Excess arguments to Hash.delete, used 2 of 3 positionals␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (Hash.delete @ 1) ␤  at /tmp/IbO3g6zMWq line 1 (mainline @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4211 (ANON @ 3) ␤  …

[01:03] <was> rn:  	git://gist.github.com/4173039.git

[01:03] <p6eval> rakudo 7ede6c: OUTPUT«===SORRY!===␤Confused␤at /tmp/Y8crdu5Qbh:1␤»

[01:03] <p6eval> ..niecza v22-44-g0247fe5: OUTPUT«===SORRY!===␤␤Confused at /tmp/BfIKQFHgR8 line 1:␤------> git⏏://gist.github.com/4173039.git␤␤Undeclared routine:␤  'git' used at line 1␤␤Parse failed␤␤»

[01:04] *** tokuhiro_ left
[01:04] <was> rn: git://gist.github.com/4173039.git

[01:04] <p6eval> rakudo 7ede6c: OUTPUT«===SORRY!===␤Confused␤at /tmp/0sGjyWKgW9:1␤»

[01:04] <p6eval> ..niecza v22-44-g0247fe5: OUTPUT«===SORRY!===␤␤Confused at /tmp/v9jOZ1lFu7 line 1:␤------> git⏏://gist.github.com/4173039.git␤␤Undeclared routine:␤  'git' used at line 1␤␤Parse failed␤␤»

[01:04] *** tokuhiro_ joined
[01:05] <was> rn: https://gist.github.com/4173039

[01:05] <p6eval> niecza v22-44-g0247fe5: OUTPUT«Unhandled exception: Excess arguments to Hash.delete, used 2 of 3 positionals␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (Hash.delete @ 1) ␤  at /tmp/KxVmenKXiH line 3 (mainline @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4211 (ANON @ 3) ␤  …

[01:05] <p6eval> ..rakudo 7ede6c: OUTPUT«("a" => "1", "b" => "1", "c" => "1").hash␤»

[01:05] *** tokuhiro_ left
[01:05] *** tokuhiro_ joined
[01:08] *** was left
[01:16] *** hmd joined
[01:16] *** aindilis left
[01:18] *** Alfa64 joined
[01:21] *** bowtie left
[01:26] <lue> r: my %h; %h.push(1,2) for ^3; say %h.perl;

[01:26] <p6eval> rakudo 7ede6c: OUTPUT«("1" => [2, 2, 2]).hash␤»

[01:26] <lue> Should this be happening? I expected ("1"=>2, "1"=>2, "1"=>2).hash

[01:28] <lue> Actually, there's no reason I should expect that. I just didn't expect "1" => [2,2,2] .

[01:50] *** hypolin joined
[01:51] *** Alfa64 left
[01:53] *** armitage81 joined
[02:04] *** gootle joined
[02:06] *** cognominal left
[02:07] *** PacoAir left
[02:10] *** kurahaupo left
[02:14] *** cognominal joined
[02:24] *** FROGGS_ joined
[02:27] *** FROGGS left
[02:35] *** cognominal left
[02:46] *** hmd left
[03:11] *** noggle_ joined
[03:14] *** noggle left
[03:16] <skids> lue: that behavior for the Hash.push method is indeed documented in S32/Containers.

[03:16] *** eiro joined
[03:23] *** tokuhiro_ left
[03:23] *** tokuhiro_ joined
[03:25] *** armitage81 left
[03:33] <sorear> someone removed Ralph Nader from the CPAN FAQ :( :( :(

[03:38] *** orafu left
[03:39] *** orafu joined
[03:54] *** t__ joined
[04:04] *** t__ left
[04:11] *** erkan left
[04:27] *** popl joined
[04:35] *** sftp joined
[04:36] *** Psyche^ joined
[04:39] *** Patterner left
[04:39] *** Psyche^ is now known as Patterner

[04:56] *** fgomez left
[05:04] *** arlinius joined
[05:06] <lue> skids: that... feels very wrong.

[05:08] *** sftp left
[05:13] *** fgomez joined
[05:16] <Tene> What does a politician have to do with cpan?

[05:39] <sorear> Tene: http://www.c-span.org/

[05:51] <Tene> ahh

[05:52] *** Kharec joined
[05:52] *** stanley left
[05:54] *** stanley joined
[05:56] *** skids left
[06:02] *** sizz left
[06:02] *** sizz joined
[06:08] <moritz> \o

[06:09] <sorear> o/

[06:11] *** mtk left
[06:14] *** mtk joined
[06:14] <moritz> lue: a hash can't have the same key twice, so (1 => 2, 1 => 2, 1 => 2).hash is the same as (1 => 2).hash

[06:18] <lue> moritz: I realized that when trying to get around the "failure" on .push's part. I still think %h.push(1,2) xx 3 shouldn't act like %h.push(1=>(2 xx 3));

[06:23] *** birdwindupbird joined
[06:24] *** Kharec left
[06:24] *** Kharec joined
[06:24] *** GlitchMr joined
[06:26] <moritz> lue: but that's exactly what push is designed to do

[06:26] <lue> Huh. I guess I'm just surprised that xx is tighter than the closing paren.

[06:27] *** wamba joined
[06:29] <moritz> it's not

[06:29] <moritz> just as   print(1) xx 3   does the same as  print (1 xx 3)

[06:29] <moritz> it's the same semantic through a different syntax

[06:31] *** Kharec left
[06:32] <GlitchMr> Isn't xx lazy?

[06:32] <GlitchMr> So, (print 1) xx 3 would do nothing?

[06:32] *** Kharec joined
[06:35] *** PacoAir joined
[06:35] *** PacoAir left
[06:56] *** kaleem joined
[06:59] *** cognominal joined
[07:07] *** SamuraiJack joined
[07:09] *** popl left
[07:09] *** FROGGS_ left
[07:09] *** cognominal left
[07:19] *** cognominal joined
[07:32] *** cognominal left
[07:32] <moritz> depends on context

[07:32] <moritz> in sink context it would be eager

[07:39] *** FROGGS joined
[07:40] *** cognominal joined
[07:43] *** [particle]1 joined
[07:43] *** sweet_kid left
[07:44] *** am0c left
[07:44] *** BinGOs left
[07:44] *** BinGOs joined
[07:44] *** avar joined
[07:44] *** avar left
[07:44] *** avar joined
[07:45] *** am0c joined
[07:45] *** Upasna joined
[07:52] *** am0c left
[07:54] *** wamba left
[07:57] *** cognominal left
[07:58] *** Targen joined
[08:03] *** brrt joined
[08:03] *** vojvodin joined
[08:05] *** am0c joined
[08:11] *** vojvodin left
[08:24] *** hoelzro|away is now known as hoelzro

[08:27] <GlitchMr> wow, people are finding Perl 6 website on... "multiline comment in perl"

[08:27] <GlitchMr> According to the stats (which are public for some reason).

[08:27] <GlitchMr> Or even simply "comments in perl"

[08:29] <GlitchMr> People even find Perl 6 on surprise... -2/ * 6

[08:30] <GlitchMr> Seriously? What -2/ * 6 has with Perl 6?

[08:31] <GlitchMr> Actually, that pair of 6 and -2 finds Perl 6... but how?

[08:41] <moritz> GlitchMr: because Perl 6 websites have a high number of occurrences of the digit 6

[08:41] <moritz> so search engines think they are relevant on the topic 6

[08:41] <moritz> heck, they even have 6 in the domain names

[08:41] <GlitchMr> Now I wonder why this doesn't happen when I simply type 6

[08:42] <moritz> too much compettion, probably

[08:43] <GlitchMr> And why simply "2 6" doesn't do that

[08:43] <GlitchMr> Werid

[08:43] <GlitchMr> Weird*

[08:49] <doy> "-2" means "sites that don't include 2", typically

[08:49] <doy> so it's probably clearing out a lot of sites that just include a lot of random numbers

[08:52] <GlitchMr> Oh, right

[08:54] *** fglock joined
[08:54] <fglock> hi perl6

[08:55] *** cognominal joined
[08:56] <GlitchMr> http://perl6.org/page-stats/faq.html

[08:56] <fglock> I'm planning a perlito5 release in about 2 weeks - it would be nice to have feedback on bugs, nice-to-haves, or things to add to the release text

[08:56] <GlitchMr> According to 404 errors somebody has tried to "hack the site" lol

[08:56] *** Gruber is now known as Grrrr

[08:56] <GlitchMr> Trying to find phpMyAdmin on Perl 6 server? Nope.

[08:57] <moritz> every public site on the internet gets such requests

[08:57] <moritz> i guess 99% of them at least are automated

[08:57] <moritz> and by botnets

[09:11] <GlitchMr> According to Google search keyphrases, people are looking on how to flatten the list in Perl 6 ;-).

[09:15] <moritz> so, write an FAQ entry for it

[09:21] *** mtk left
[09:21] *** ker2x left
[09:22] *** kresike joined
[09:22] <kresike> hello all you happy perl6 people

[09:22] <brrt> hi kresike

[09:22] <kresike> brrt, o/

[09:29] *** rindolf joined
[09:30] *** daxim joined
[09:33] *** wamba joined
[09:34] *** wamba1 joined
[09:34] *** wamba left
[09:35] *** cedrvint joined
[09:35] <cedrvint> Hello #perl6

[09:35] <FROGGS> hi cedrvint 

[09:36] <FROGGS> hi kresike 

[09:36] <kresike> FROGGS, o/

[09:37] <cedrvint> i would like to contribute an article to the Perl6 Advent Calendar, is there still a free slot?

[09:38] <moritz> cedrvint: yes, lots of them are free

[09:38] <moritz> cedrvint: do you have github ID?

[09:38] <cedrvint> moritz: yes cedric-vincent

[09:39] <moritz> https://github.com/perl6/mu/blob/master/misc/perl6advent-2012/schedule is the schedule

[09:39] <moritz> cedrvint: I'll give you commit access so that you can claim a spot in the schedule

[09:39] <cedrvint> moritz: thanks!

[09:40] <cedrvint> do you think this article meets your expectations? https://gist.github.com/4174770

[09:40] <cedrvint> it's about Whatever (and subset as a bonus)

[09:41] <moritz> cedrvint: from a quick glance over it: YES

[09:41] <cedrvint> it still requires peer reviews :)

[09:42] <moritz> cedrvint: I also need your email address so that I can give author rights on the advent calendar site (it's a wordpress.com subdomain). If you don't want it public, you can send it to me by private message

[09:42] <FROGGS> cedrvint++ # I like it

[09:42] <cedrvint> thanks ^^

[09:42] <moritz> cedrvint: I can proof-read it, but not right now (at $work)

[09:46] *** erkan joined
[09:52] <dalek> mu: 3bb0585 | (Cédric VINCENT)++ | misc/perl6advent-2012/schedule:

[09:52] <dalek> mu: claim one spot

[09:52] <dalek> mu: 

[09:52] <dalek> mu: I took the first free spot but feel free to change it if you wish.

[09:52] <dalek> mu: review: https://github.com/perl6/mu/commit/3bb0585d1b

[09:54] *** GlitchMr left
[09:56] *** ker2x joined
[09:59] <moritz> cedrvint++

[09:59] *** rindolf left
[10:00] <moritz> cedrvint: I think it's a good choice; that way others have more time to prepare their stuff :-)

[10:00] <sorear> cedrvint: what's the story behind the last name capitalization?

[10:01] <cedrvint> sorear: "vincent" is a usual first name in French, hence the capitalization to avoid the ambiguity

[10:02] <cedrvint> sorear: it's a common practice in French also

[10:02] <sorear> cedrvint: interesting.  I've seen it most often with Japanese names

[10:02] <moritz> last names must be SHOUTED :-)

[10:03] <cedrvint> :)

[10:03] <sorear> kind of important there because there seems to be about a 50% chance that any given Japanese person will put their family name first when writing romaji...

[10:04] <sorear> does this convention have a name?  I'd love to read more about its history

[10:04] <brrt> cedrvint, this is really nice stuff

[10:04] <cedrvint> Wikipedia FR doesn't agree, though: "last names aren't capitalized" http://fr.wikipedia.org/wiki/Wikipédia:Conventions_typographiques#Noms_de_famille

[10:04] <sorear> I wish I had that kind of ideas :D

[10:04] <bonsaikitten> cedrvint: in common usage they are

[10:05] *** fhelmberger joined
[10:05] <cedrvint> sorear: I don't think so.

[10:05] <cedrvint> sorear: (about the name)

[10:05] <bonsaikitten> that's how you detect the frenchies, they always do that by habit

[10:05] <bonsaikitten> and it makes sense, "mohammed youssuf" - which name is which?

[10:05] <cedrvint> brrt: thanks :)

[10:05] <sorear> bonsaikitten: before today I thought it was an exclusively Japanese habit

[10:06] <bonsaikitten> sorear: the chinese also do it sometimes

[10:06] <bonsaikitten> within europe it's afaict only the french-speaking area that does it

[10:06] <sorear> bonsaikitten: now I want to know why it's common in such unrelated and widely separated areas

[10:06] <bonsaikitten> sorear: ambiguity - in german it's always firstname family name, in chinese always family name firstname

[10:06] <bonsaikitten> now what happens when a german guy tries to use the chinese name?

[10:06] <sorear> I would expect German-Japanese and French-Vietnam cross-polination

[10:07] <sorear> as well as the local stuff

[10:07] <bonsaikitten> quite likely

[10:07] <sorear> it's weird to see something that's common in France and Japan but neither Vietnam nor Germany

[10:07] <huf> i've seen hungarian programmers all-caps their last name too

[10:07] <bonsaikitten> for germany it was never needed

[10:09] <huf> it's never needed for any one place internally

[10:13] <cedrvint> according to the French and Belgium typographic reference ("Lexique des règles typographiques en usage à l’Imprimerie nationale"), it's OK to capitalize the last name to avoid ambiguity.

[10:13] <cedrvint> but it's not required if there's no ambiguity.

[10:14] <huf> that's an odd rule

[10:14] <huf> deciding that requires you to be simultaneously inside the head of every thinking being

[10:14] *** sqirrel joined
[10:15] <bonsaikitten> huf: it's suggested, but if you don't do it then that's your choice

[10:15] <bonsaikitten> easy :)

[10:15] <huf> i get how it works in practice

[10:16] <bonsaikitten> I capitalize just because it's convenient ... half the time people get it wrong

[10:16] <huf> it's not like this metadata is enough in the general case :)

[10:16] *** anuby left
[10:19] <cognominal> I must go to #perl6 to learn about French!

[10:19] <cedrvint> cognominal: I thought you were French :)

[10:19] <huf> he can learn the fun stuff then

[10:19] <cedrvint> yes :)

[10:19] <cognominal> I am, but I still learn stuff here

[10:20] <huf> my experience with english was that it gets more fun as you learn more 

[10:21] * cedrvint thinks it gives more headaches too ;)

[10:22] <huf> the bad kind or the "my brain is full of fuck but in a good way" kind?

[10:22] <cedrvint> I get more fun at learning Perl 6 :)

[10:22] *** wamba1 left
[10:22] <cedrvint> huf: in good way # I like cross-polination

[10:23] <huf> :)

[10:28] *** wamba joined
[10:33] <brrt> you know what would be a good idea

[10:33] <brrt> a script that could find typo's

[10:33] <brrt> anywhere

[10:35] *** bowtie joined
[10:36] *** grondilu left
[10:40] <timotimo> typo's like "typo's"?

[10:41] <brrt> nice

[10:41] <brrt> yes

[10:41] <huf> is "cat" a typo for "dog"?

[10:41] <brrt> based on a histogram of words in the file

[10:42] <huf> if so, that might make things a lot harder ;)

[10:42] <brrt> can't catch'm all

[10:42] <timotimo> it should also inspect the currently loaded keyboard layout to see what keys are neighbours

[10:42] <timotimo> "reifgbourds" <- ;)

[10:43] <brrt> that would be awesome, too

[10:43] <brrt> well

[10:43] <brrt> maybe not

[10:43] <brrt> considering the harm autocorrect has done over the years

[10:44] <timotimo> is harm a typo for "amusement"?

[10:44] <brrt> is amusement a typo for schadenfreude?

[10:44] <brrt> :-p

[10:45] <timotimo> is schadenfreude a typo for kindergarten?

[10:46] <brrt> yes

[10:46] <brrt> definitely

[10:46] <brrt> (the great feature of german is its extended vocabulary)

[10:47] <timotimo> well, it's not really an extended vocabulary, it's just the "Wortfreizusammensetzungsmöglichkeit".

[10:48] <brrt> some of those zusammensetzungen keep arround to become vocubalary

[10:49] *** Targen left
[10:50] <brrt> i wonder how english fixes that; in some cases it obviously doesn't and borrows

[10:51] <timotimo> :)

[10:51] <dalek> Perlito: 2b905bc | (Flavio S. Glock)++ | / (4 files):

[10:51] <dalek> Perlito: Perlito5 - js2 - fix package stringification

[10:51] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/2b905bc7fe

[10:58] <FROGGS> brrt: I don't think that english is less extendable, you can use nouns as verbs for example. IMO english and german arn't that different

[10:58] <brrt> ah, yes

[10:58] <brrt> verbing

[10:58] <brrt> they are extendable in very different directions

[10:59] <timotimo> it's sometimes fun to english around a bit, yes.

[11:00] <timotimo> it would be surprising if english and german were very different, they are both indogermanic languages, IIRC

[11:00] <FROGGS> I believe my wife said something about romanic

[11:01] <timotimo> https://en.wikipedia.org/wiki/Indo-European_languages - this seems to be correct

[11:01] <brrt> yes, but thats the whole shebang of langauges

[11:02] <timotimo> https://en.wikipedia.org/wiki/Germanic_languages - but here, too.

[11:02] <brrt> it includes both celtic and italic

[11:02] <arnsholt> English has productive compounding as well, but not to the extent of German and Scandinavian and such

[11:03] <arnsholt> But they're usually written with spaces in the orthography, which can cause some confusion

[11:05] *** Su-Shee_ joined
[11:06] <FROGGS> If I read that article correctly then english is a west germanic language, swedish and norwegian are north germanic (wow, who would have guessed that :o)

[11:06] *** Su-Shee left
[11:07] <arnsholt> Yeah, those terms are often a bit uninformative

[11:07] <FROGGS> well, that char is nice: https://en.wikipedia.org/wiki/Germanic_languages#Diachronic

[11:07] <arnsholt> But Scandinavian is one group, and then German, Dutch, and English are sort of spread out on a continuum

[11:07] <arnsholt> (But the history of English is really gnarly and hard to sort out)

[11:08] *** hoelzro is now known as hoelzro|away

[11:16] <dalek> Perlito: 8b342ee | (Flavio S. Glock)++ | / (3 files):

[11:16] <dalek> Perlito: Perlito5 - parser - fix namespace

[11:16] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/8b342ee0a9

[11:20] *** Su-Shee_ is now known as Su-Shee

[11:41] *** hoelzro|away is now known as hoelzro

[11:41] <hoelzro> why is that bot named 'dalek'?

[11:43] *** PacoAir joined
[11:45] <moritz> because somebody likes Dr. Who

[11:45] <hoelzro> well, I gathered that =)

[11:45] <hoelzro> but why "dalek"?

[11:46] <moritz> maybe because the bot is non-human too? :-)

[11:47] <hoelzro> hmm...touche

[11:53] <brrt> p5 question, how do you quote a word so it is 'safe' for a regex?

[11:53] <brrt> as a literal

[11:53] <arnsholt> m/\Q $stuff \E/x IIRC

[11:54] <brrt> thanks :-)

[11:54] <brrt> index is better for my purposes

[11:54] <arnsholt> Oh, m/\Q$stuff\E/x actually

[11:55] <arnsholt> Apparently \Q and \E negate the effects of /x

[12:00] *** cognominal left
[12:02] *** bruges_ left
[12:02] *** bruges joined
[12:18] *** sizz left
[12:22] *** hypolin left
[12:25] *** sizz joined
[12:33] *** sizz left
[12:35] *** GlitchMr joined
[12:51] *** birdwindupbird left
[12:53] *** DarthGandalf left
[12:56] <dalek> Perlito: 60cc0ca | (Flavio S. Glock)++ | / (4 files):

[12:56] <dalek> Perlito: Perlito5 - Dumper - fix handling of numbers and SCALAR

[12:56] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/60cc0ca32d

[12:58] <moritz> arnsholt: \Q is the as quotemeta, which means anything not matching \w is escaped, and that includes whitespace

[12:58] <moritz> *is the same as

[13:02] <brrt> https://gist.github.com/4175606 share and enjoy

[13:03] *** daxim left
[13:04] *** daxim joined
[13:19] *** SamuraiJack left
[13:21] *** mtk joined
[13:24] *** am0c left
[13:35] *** jaldhar left
[13:35] *** DarthGandalf joined
[13:42] *** jaldhar joined
[13:52] *** Targen joined
[14:05] *** wamba left
[14:07] *** wamba joined
[14:09] *** gootle left
[14:22] *** hash_table joined
[14:23] *** cognominal joined
[14:27] *** hash_table left
[14:37] *** rurban_ joined
[14:38] *** jaldhar left
[14:41] *** Upasna is now known as sweet_kid

[14:44] *** awwaiid joined
[14:48] *** rurban_ left
[14:51] *** skids joined
[14:58] <dalek> Perlito: 8704d12 | (Flavio S. Glock)++ | / (4 files):

[14:58] <dalek> Perlito: Perlito5 - js2 - fix namespace/bareword

[14:58] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/8704d12556

[14:59] *** kaleem left
[15:01] *** stopbit joined
[15:06] *** sftp joined
[15:08] *** kcwu left
[15:09] *** DarthGandalf left
[15:09] *** kcwu joined
[15:13] *** kaleem joined
[15:17] *** colomon left
[15:18] *** DarthGandalf joined
[15:20] *** wamba left
[15:27] *** bluescreen10 joined
[15:30] *** FROGGS left
[15:31] *** colomon joined
[15:32] *** hash_table joined
[15:33] *** pmurias joined
[15:43] *** spider-mario joined
[15:51] <dalek> Perlito: d216d0e | (Flavio S. Glock)++ | TODO-perlito5:

[15:51] <dalek> Perlito: Perlito5 - parser - namespace TODO - more corner cases

[15:51] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/d216d0ef45

[15:51] *** spider-mario left
[15:53] *** spider-mario joined
[15:56] <dalek> Perlito: d69c95a | (Flavio S. Glock)++ | TODO-perlito5:

[15:56] <dalek> Perlito: Perlito5 - parser - namespace TODO - more corner cases

[15:56] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/d69c95a68c

[15:59] *** spider-mario_ joined
[15:59] *** spider-mario left
[16:01] *** Kharec left
[16:02] *** brrt left
[16:02] *** alester left
[16:03] *** cedrvint left
[16:05] *** spider-mario_ left
[16:09] *** gaussblurinc joined
[16:14] *** kaleem left
[16:14] *** fhelmberger left
[16:14] <kresike> bye folks

[16:14] *** kresike left
[16:22] *** ifim joined
[16:24] *** alester joined
[16:27] *** RandalSchwartz joined
[16:27] <RandalSchwartz> NQP revision 2012.11-2-gc0ddc72 required (currently 2012.10-96-gc0ddc72).

[16:27] <RandalSchwartz> why isn't the build script doing the right thing?

[16:28] <RandalSchwartz> perl Configure.pl --gen-parrot && gmake

[16:28] <RandalSchwartz> building origin/nom

[16:28] <RandalSchwartz> just started failing in the past few days

[16:29] <RandalSchwartz> and that's interesting.. it's the same sha, but a different tag

[16:29] <RandalSchwartz> did someone add a tag, but --gen-parrot doesn't pick up new tags?

[16:33] <RandalSchwartz> [crickets]

[16:33] <PerlJam> could be, i guess

[16:34] <PerlJam> I tend to build them individually myself rather than rely on the --gen option

[16:34] <PerlJam> (except when building a release)

[16:34] <RandalSchwartz> that suggests that the option should be removed if it's broken

[16:34] <RandalSchwartz> or fixed. :)

[16:35] <RandalSchwartz> NQP built fine.  it's just that the next step fails because it has the wrong veversion number.

[16:35] *** fglock left
[16:35] <RandalSchwartz> just wondering how that passed the "push" test.

[16:35] <RandalSchwartz> also, is origin/nom still the right branch to build?

[16:35] <PerlJam> aye

[16:36] <RandalSchwartz> ok - so I'm reporting that someone broke the build. :)

[16:36] *** FROGGS joined
[16:36] <RandalSchwartz> I'm looking at the log, but not seeing any obvious culprits

[16:38] <RandalSchwartz> line 86 in Configure.pl is complaining

[16:40] *** spider-mario joined
[16:40] <rurban> I've got a test pragma question. you call it fudge. We are thinking of an improved p5 testsuite: for the three B:: compilers and the several perlito compilers. But we need to add compiler pragmas also, such as "use pragma B::C => '-fstash', perlito5-js => '--expand-use';"

[16:42] <rurban> So we want to check for certain compiler specific options at compile-time, add compiler options at parse-time, and influence the tests at parse-time.

[16:42] <rurban> Because the core testsuite pretty much passes most of the compilers, but there are some missing parts and quirks

[16:43] <rurban> So did you think of compiler pragmas already? (checking and adding) use oo ... is similar.

[16:45] *** kaare__ joined
[16:48] *** cognominal left
[16:50] *** colomon left
[16:51] *** tockitj_ joined
[16:51] <FROGGS> RandalSchwartz: did you made any changes to nqp so it might is unable to pull?

[16:55] *** cognominal joined
[16:57] <PerlJam> in a minute or two I'll build rakudo in a fresh VM to confirm the problem

[16:57] <PerlJam> (or not)

[16:58] <FROGGS> I made clean clones lately and since then there are no changes that could have broken it

[16:59] *** hoelzro is now known as hoelzro|away

[17:01] <timotimo> i'm wondering if i'm going to meet a perl6 person at the chaos communication congress in berlin later this year?

[17:02] <FROGGS> ohh, what date?

[17:02] <timotimo> between christmas and new year

[17:02] <timotimo> https://events.ccc.de/congress/2012/wiki/Main_Page there yo ugo

[17:02] <FROGGS> hmmm, my son#s birthday is on 27th

[17:03] *** Chillance joined
[17:03] <timotimo> no need to come just for me ;)

[17:03] <FROGGS> well, the page says it is in hamburg

[17:04] <timotimo> ah, do you live there?

[17:04] <FROGGS> no, but near Berlin

[17:04] <timotimo> oh, did i say berlins

[17:04] <FROGGS> you did ;o)

[17:04] <timotimo> i'm dumb. it's been in berlin the previous years, but it's in hamburg now

[17:04] *** awwaiid_ joined
[17:05] <FROGGS> k

[17:05] <FROGGS> so I wont be there ;o)

[17:05] <timotimo> those things take a while to penetrate my thick skull :)

[17:05] *** cognominal_ joined
[17:06] * PerlJam notes that his fresh checkout+build of rakudo says "Note: checking out '2012.11-2-gc0ddc72'." about nqp

[17:07] <FROGGS> RandalSchwartz: so can you try to: cd nqp && git pull ?

[17:07] <PerlJam> (still has to build parrot + nqp though to get to the point where RandalSchwartz noted failure)

[17:07] *** cognominal left
[17:08] *** awwaiid left
[17:08] <moritz> RandalSchwartz: try  cd nqp/; git tag -d 2012.11; git pull; cd ..; perl Configure.pl --gen-parrot

[17:08] <moritz> RandalSchwartz: there was a wrong 2012.11 tag for the 2011.12 release

[17:09] <moritz> which got deleted upstream, and now causes trouble

[17:09] <PerlJam> ah.  that'd do it.

[17:09] * moritz has an idea

[17:09] <FROGGS> but it didnt try to checkout this tag

[17:09] *** ker2x left
[17:09] <moritz> yes, but the revision strings are based on the tag

[17:09] <RandalSchwartz> it computes revision

[17:10] <RandalSchwartz> yeah what he said

[17:10] <FROGGS> ohh, I thought these are a no-op

[17:10] <moritz> ok, I'm going to make a 2012.11.1 tag in nqp

[17:10] <FROGGS> ya, that'll do

[17:10] <moritz> that doesn't correspond to a release, but will ease the tag confusion

[17:10] <RandalSchwartz> awesome

[17:12] <dalek> nqp: 0c08da3 | moritz++ | tools/build/PARROT_REVISION:

[17:12] <dalek> nqp: bump to a newer parrot

[17:12] <dalek> nqp: 

[17:12] <dalek> nqp: this should fix the encoding problems in socket reads

[17:12] <dalek> nqp: review: https://github.com/perl6/nqp/commit/0c08da363d

[17:12] <moritz> 2012.11.1 tagged

[17:13] *** jeffreykegler joined
[17:14] <jeffreykegler> I'm working up a blog post on whitespace handling in scannerless languages

[17:15] <jeffreykegler> Perl 6 being a foremost example

[17:15] <jeffreykegler> I wonder about the interaction of LTM with the .ws construct

[17:16] <jeffreykegler> In deciding what is whitespace, how often is the work done by .ws ...

[17:16] <jeffreykegler> and how often by LTM

[17:16] <dalek> rakudo/nom: 0bfba1b | moritz++ | tools/build/NQP_REVISION:

[17:16] <dalek> rakudo/nom: bump to NQP 2012.11.1

[17:16] <dalek> rakudo/nom: 

[17:16] <dalek> rakudo/nom: just to avoid confusion with the duplicate 2012.11 tag

[17:16] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0bfba1be85

[17:16] <jeffreykegler> For example, is "42" one number or two?

[17:16] <jeffreykegler> You can decide that using LTM: "42" is a longer token than "4"

[17:16] *** gaussblurinc left
[17:17] <moritz> erm, that's not what LTM is about

[17:17] <jeffreykegler> Or you could decide it because there is not word boundary between the "4" and the "2", and hense .ws will not match

[17:17] <moritz> LTM is about that the long of two alternative wins

[17:17] <RandalSchwartz> yeay, rakudo built!

[17:17] <moritz> \d+ matching 42 instead of 4 is because of greediness

[17:18] <jeffreykegler> mortiz: I was just reading your blog post on LTM and that's the impression I got, but I wanted to be sure

[17:18] <PerlJam> RandalSchwartz: so ... what are you going to do your new rakudo?  :-)

[17:20] <moritz> jeffreykegler: it' more interesting to look at cases where there is actual competition between too tokens

[17:20] <jeffreykegler> "42" is a contrived example, perhaps, because I'm not sure Perl 6 allows two consecutive numbers anywhere

[17:20] <moritz> jeffreykegler: --$x could be prefix:<--> or -(-($x))

[17:21] <moritz> that's where LTM comes into play, and lets -- win over - -

[17:21] *** am0c joined
[17:21] <moritz> and note that <.ws> allows a zero-width match if not surrounded by word characters

[17:22] <jeffreykegler> Understand about the zero-width match -- I'm calling the idea "smart whitespace" in the Marpa context

[17:22] <moritz> so -(-$x) would be valid interpretation of --$x, were it not for LTM, or not for prefix:<-->

[17:22] <jeffreykegler> with due credit of course to Perl 6 where I got it from

[17:24] <jeffreykegler> I'm asking because I'll refer back to Perl 6 and I am trying to eliminate some of my worst misstatements of act in advance :-)

[17:24] <jeffreykegler> of act -> of fact

[17:26] <jeffreykegler> Btw, what influence has the literature on "scannerless" parsing had on Perl 6?

[17:27] <jeffreykegler> You don't use the term much, but I think that's what you're doing

[17:27] *** MayDaniel joined
[17:27] *** MayDaniel left
[17:27] *** MayDaniel joined
[17:27] *** MayDaniel left
[17:27] *** MayDaniel joined
[17:27] <moritz> we like to think of grammars as autogenerating scanners

[17:28] <moritz> each LTM section is one scanner, which can be compiled down to a DFA

[17:28] <moritz> and I can't tell you about the influence; the LTM idea was already there when I joined the project

[17:28] <moritz> and I didn't do too much research into the past

[17:28] <jeffreykegler> I got the idea of "scannerless" parsing via the literature

[17:29] <jeffreykegler> And only in retrospect realized that Perl 6 must be the most successful and widespread "scannerless" language out there

[17:30] *** mtk left
[17:34] <RandalSchwartz> can someone define LTM for me?

[17:35] <RandalSchwartz> long term memory?

[17:35] <RandalSchwartz> last twelve months?

[17:35] <RandalSchwartz> IATA code for an airport in Guyana?

[17:35] <sjn> Less Than Magnificent

[17:35] <RandalSchwartz> none of those seem to match

[17:35] *** wamba joined
[17:35] <jeffreykegler> Randal: LTM means longest token matching

[17:36] *** am0c left
[17:36] *** am0c joined
[17:36] <jeffreykegler> It's a subject on which I am probably the least qualified person in this chat room

[17:36] <RandalSchwartz> ahh.  googling for "ltm perl6" brought me to http://perlgeek.de/en/article/longest-token-matching

[17:38] * sjn reads

[17:38] <RandalSchwartz> ok, that's a bit clearer... sorta.

[17:38] * RandalSchwartz goes back to $dayjob

[17:39] <jeffreykegler> Btw,  http://perlgeek.de/en/article/longest-token-matching is the blog post by moritz I referred to earlier

[17:40] <jeffreykegler> It's a model of the form: short clear direct informative

[17:47] <moritz> jeffreykegler: that's a nice description of the style I strive for

[17:47] <moritz> sometimes i want to add humour to the mix, but mostly it doesn't fit

[17:49] *** sqirrel left
[18:01] * masak jumps into the channel

[18:01] <masak> if you were to design a language from scratch, would you consider calling the string type "text"?

[18:01] <masak> instead of "String" or "Str", I mean.

[18:04] <FROGGS> hi masak 

[18:06] <masak> who does the "State of Perl 6" advent post tomorrow?

[18:07] <masak> sorear: family name capitalization is almost the norm in Esperanto. that's where I saw it first.

[18:11] <arnsholt> All caps surnames is common in France as well

[18:11] <arnsholt> And yes, I don't think I'd mind calling strings text

[18:13] <masak> I'm less eager to upset the status quo with the types "float" and "double", even thought "double" is rather silly.

[18:15] *** colomon joined
[18:17] <dalek> roast: 0532e2d | (Tobias Leich)++ | S32-str/substr.t:

[18:17] <dalek> roast: RT #115086, test for "string".([Number], Inf)

[18:17] <dalek> roast: 

[18:17] <dalek> roast: https://rt.perl.org/rt3/Ticket/Display.html?id=115086

[18:17] <dalek> roast: review: https://github.com/perl6/roast/commit/0532e2db7e

[18:19] <PerlJam> masak: If TimToady were willing and able, I'd like to see his thoughts on the subject  (re: state of Perl 6)

[18:22] * PerlJam looks at all of the gaps in the p6advent schedule ...

[18:23] <PerlJam> well, at least choosing a day or two for myself won't be difficult :)

[18:31] *** wamba left
[18:34] *** noggle_ is now known as noggle

[18:36] *** SmokeMachine left
[18:36] *** nyuszika7h left
[18:37] *** SmokeMachine joined
[18:45] *** popl joined
[18:50] *** cedrvint_ joined
[18:50] *** jeffreykegler left
[18:53] *** cedrvint_ is now known as cedrvint

[18:54] *** Targen_ joined
[18:56] *** MayDaniel left
[18:56] *** Targen left
[18:56] *** PacoAir left
[18:56] *** Pompel left
[18:56] *** RandalSchwartz left
[18:56] *** takesako left
[18:56] *** ingy left
[18:56] *** twinshadow left
[18:56] *** rurban left
[18:56] *** rummik left
[19:00] *** sftp_ joined
[19:01] <masak> it would be nice to know today who is doing tomorrow.

[19:02] *** rurban joined
[19:02] *** MayDaniel joined
[19:02] *** RandalSchwartz joined
[19:02] *** PacoAir joined
[19:02] *** Pompel joined
[19:02] *** takesako joined
[19:02] *** ingy joined
[19:02] *** twinshadow joined
[19:02] *** rummik joined
[19:02] <masak> also, we currently have 8 slots claimed out of 24.

[19:02] <masak> I think we should at least raise the question whether we should do an advent calendar this year.

[19:03] <cedrvint> masak: yes, please!

[19:03] <PerlJam> It would be a shame not to.

[19:03] <PerlJam> cedrvint: care to do a post for the advent calendar?

[19:04] <cedrvint> PerlJam: you mean another one ? (http://irclog.perlgeek.de/perl6/2012-11-30#i_6199528)

[19:04] <masak> people, please put your name in free slots at https://github.com/perl6/mu/blob/master/misc/perl6advent-2012/schedule

[19:04] <masak> if you don't, the advent calendar won't happen for the fourth year in a row.

[19:05] * PerlJam wonders if ingy or RandalSchwartz  or rurban or ... would also like to contribute

[19:05] <moritz> I can do the SOP6 post for tomorrow

[19:05] <PerlJam> moritz++

[19:05] <moritz> as soon as Ronja is in bed :-)

[19:05] <cedrvint> moritz++

[19:08] <cedrvint> I could write another post if someone adds support for :bytes in rules ;)

[19:08] <moritz> that... won't be easy

[19:09] * cedrvint had a dream: write a grammar for ELF format

[19:09] *** sftp left
[19:09] * PerlJam will write at least 2 advent posts

[19:09] <PerlJam> I jsut don't know when or about what yet :)

[19:10] <cedrvint> PerlJam++

[19:10] *** am0c left
[19:11] <rurban> advent calendar: fglock maybe with perlito? I have nothing to say about perl6

[19:12] <cedrvint> PerlJam: something about Perl 6 in RosettaCode ?

[19:12] <cedrvint> this is a valuable resource for beginers

[19:13] * mikemol ducks

[19:13] <moritz> cedrvint: I believe we had a general introduction to rosettacode in last year's calendar

[19:13] * mikemol usually writes that one, but there's zip time this year.

[19:13] <moritz> so it should contain something new

[19:13] <mikemol> You could hit it from a side angle. I.e. query RC's API to get a list of all the pages with Perl 6 examples.

[19:14] <cedrvint> this is one of the RC tasks :)

[19:14] <PerlJam> http://perl6advent.wordpress.com/2010/12/17/day-17-rosetta-code/

[19:14] <PerlJam> was 2010

[19:15] <rurban> I could explain the Mime::Base64 issues with unicode

[19:19] <cedrvint> rurban: you tease my curiosity :)

[19:19] <rurban> https://github.com/parrot/parrot/commit/dc5d2846960872fdf7863aa11dc34f37b2c10a37

[19:20] <PerlJam> The tag line is "Something cool about Perl every day".  Perhaps we should change that :)

[19:20] <PerlJam> er, "Something cool about Perl 6 every day"

[19:21] <PerlJam> (I always think "Perl" when I see "Perl 6")

[19:21] *** nyuszika7h joined
[19:21] <rurban> cedrvint: https://github.com/parrot/parrot/issues/814

[19:22] <PerlJam> okay, I picked some days.  Now all I need is some good topics  :)

[19:23] <dalek> mu: cc51189 | duff++ | misc/perl6advent-2012/schedule:

[19:23] <dalek> mu: [advent] claim some days

[19:23] <dalek> mu: review: https://github.com/perl6/mu/commit/cc51189a3a

[19:27] <cedrvint> what about a post that explains LTM ?

[19:27] <cedrvint> (iirc rakudo supports LTM for less than a year)

[19:28] <PerlJam> cedrvint++ an excellent idea :)

[19:29] <arnsholt> I think b had some LTM support, but it disappeared for a long time in the nom transition

[19:30] <cedrvint> moritz++ already wrote it: http://perlgeek.de/en/article/longest-token-matching :)

[19:30] *** am0c joined
[19:30] <PerlJam> cedrvint: yes, but it could use a little revamp for advent

[19:30] *** SmokeMachine left
[19:31] <PerlJam> (especially since that article was from 3 years ago)

[19:32] <PerlJam> cedrvint: also see: http://6guts.wordpress.com/2012/06/07/ltm-for-alternations/

[19:33] <[Coke]> we should reorg roast so that integration/ is several top level directories (treat it like a Syn.)

[19:33] <PerlJam> also, heredocs.

[19:33] <masak> I'd happily write the post on LTM.

[19:33] <masak> I like grammar engines :)

[19:34] *** SamuraiJack joined
[19:37] <colomon> hmmm, having difficulty getting to github.com at the moment.  :(

[19:39] <rurban> I'll write something about parrot strings and encodings with MIME::Base64 as example why parrot/perl6 is superior

[19:40] *** tff left
[19:43] <rurban> niner could explain parrot threads and perl6 hyper

[19:43] <FROGGS> I'g love to see something about threads

[19:44] <FROGGS> I'd*

[19:45] <rurban> I cannot write to perl6/mu

[19:49] <PerlJam> rurban: I'd add you if I could remember how  :)

[19:51] <rurban> https://github.com/perl6?tab=members I'm there already

[19:53] <[Coke]> rurban: do youhave it checked out readonly?

[19:54] <masak> gist.github.com is not feeling well right now.

[19:54] <masak> ah, likely because https://github.com/perl6/mu/blob/master/misc/perl6advent-2012/schedule

[19:55] <masak> er, because http://twitter.com/github/status/274590812254384128

[19:55] <rurban> Coke: github is telling me read-only for mu, but read-write for nqp

[19:55] <rurban> I'll wait. I claimed Dec 7

[19:56] <masak> rurban++

[19:56] <masak> need more people, people! :)

[19:56] <rurban> I'll try to find someone for threads

[19:57] <cedrvint> post idea: "who's who?"

[19:58] *** cognominal_ left
[19:58] <PerlJam> cedrvint++ go for it! (assuming that hasn't already been done ;)

[20:00] <colomon> feel free to put me down for a couple of days on the Advent calendar, as long as I have at least two days warning that I've got to do something...

[20:01] <PerlJam> Has anyone done a post on panda?

[20:04] <cedrvint> PerlJam: Google blog search doesn't report any post dedicated to panda/perl6

[20:04] *** cognominal_ joined
[20:06] <rurban> We also changed the YAPC::US 2013 topic to -Ofun, so perl6 is featured better. Because it is more fun to optimize perl6 than perl5. Suggestions for active perl6 optimization projects where people can jump on? See http://ofun.pm/

[20:06] <cedrvint> PerlJam: except for that one: http://perl6advent.wordpress.com/2010/12/09/day-9-–-the-module-ecosystem/ about its predecessor

[20:07] <rurban> Something new for http://perl6.org/fun/ ?

[20:09] <dalek> mu: cd87a45 | (Carl Mäsak)++ | misc/perl6advent-2012/schedule:

[20:09] <dalek> mu: [perl6advent-2012/schedule] topics for my slots

[20:09] <dalek> mu: review: https://github.com/perl6/mu/commit/cd87a459cf

[20:10] <dalek> mu: 990be9b | (Carl Mäsak)++ | misc/perl6advent-2012/schedule:

[20:10] <dalek> mu: [perl6advent-2012/schedule] added rurban++

[20:10] <dalek> mu: review: https://github.com/perl6/mu/commit/990be9b463

[20:10] <sorear> good * #perl6

[20:11] <masak> sorear! \o/

[20:11] <rurban> Can you change that to: "MIME::Base64 - Why encoded strings are better -- rurban"

[20:11] <masak> absolutely.

[20:11] <masak> well, that's 14 slots filled out of 24. 14 is better than 8.

[20:11] <masak> I would still like to see some more names in there.

[20:12] <rurban> You can also add "parrot threads" It'll be nine, whiteknight or me

[20:12] <masak> what date?

[20:12] <rurban> 11

[20:12] <masak> ok.

[20:12] <dalek> mu: 871bf97 | (Carl Mäsak)++ | misc/perl6advent-2012/schedule:

[20:12] <dalek> mu: [perl6advent-2012/schedule] better topic title

[20:12] <dalek> mu: review: https://github.com/perl6/mu/commit/871bf97aa4

[20:13] <dalek> mu: 5e12e79 | (Carl Mäsak)++ | misc/perl6advent-2012/schedule:

[20:13] <dalek> mu: [perl6advent-2012/schedule] 11: parrot threads

[20:13] <dalek> mu: review: https://github.com/perl6/mu/commit/5e12e79f72

[20:14] <masak> who wants December 4th?

[20:14] <masak> who wants December 6th?

[20:14] *** am0c left
[20:14] <masak> here's a list of possible topics: https://github.com/perl6/mu/blob/master/misc/perl6advent-2012/topic-brainstorming

[20:18] *** SamuraiJack left
[20:19] <dalek> mu: 2c3a4e5 | (Cédric VINCENT)++ | misc/perl6advent-2012/topic-brainstorming:

[20:19] <dalek> mu: Move topics already covered (masak++)

[20:19] <dalek> mu: review: https://github.com/perl6/mu/commit/2c3a4e56dc

[20:20] <masak> cedrvint++ # thanks, meant to do that

[20:22] * skids being only tangentially CS/perlmongers encultured, wonders at the etymology of class Mu.

[20:22] <moritz> we should have a FAQ about that

[20:23] <skids> The first answer should say "because perl programmers find Moo too long to type."

[20:23] <cedrvint> :)

[20:24] <cedrvint> Perl 6 programmers are I<lazy>

[20:25] <masak> skids: lots of derivations. they're in S02, I believe.

[20:25] <masak> yep: S02:4842

[20:26] <rurban> I cannot even push to parrot. I guess I have to go to the movies now

[20:26] <masak> that... is the natural conclusion. :)

[20:27] <cedrvint> maybe I'll write something like: "Transliterating Mathematical equations to Perl 6", based on things written on RC.

[20:27] <masak> cedrvint: ooh.

[20:28] <cedrvint> masak: already done?

[20:28] <masak> don't think so.

[20:28] <skids> masak: I was leaning towards guessing at that one, but had a nagging suspicion it was something to do with μ

[20:29] *** kaare__ left
[20:32] * masak .oO( the chances of it meaning that would have been micro-scopic... )

[20:34] *** ruoso left
[20:34] *** ruoso joined
[20:36] *** mikemol left
[20:37] *** mikemol joined
[20:37] <masak> what the heck is unary sort? http://irclog.perlgeek.de/perl6/2011-12-14#i_4833227

[20:38] <moritz> masak: @list.sort(&unary_function)

[20:38] <masak> oooh

[20:38] *** gugod left
[20:38] <masak> so it's not the *sort* that's unary, it's the comparison function.

[20:39] <masak> yes, I can totally see how that could be made into a topic.

[20:39] <masak> I've been thinking about &by lately.

[20:39] *** gugod joined
[20:39] <timotimo> what does it do? it's not in my rakudo yet

[20:40] <masak> r: say [4, 2, 5, 1, 3].sort: { -$_ }

[20:40] <p6eval> rakudo 0bfba1: OUTPUT«5 4 3 2 1␤»

[20:40] *** daxim left
[20:40] <masak> timotimo: it sorts things according to a scoring function.

[20:41] <masak> r: say <the quick brown fox jumped over the lazy dog>.sort.sort: *.length

[20:41] <p6eval> rakudo 0bfba1: OUTPUT«No such method 'length' for invocant of type 'Str'␤  in block  at /tmp/yRLGAPyv7d:1␤␤»

[20:41] <masak> er :)

[20:41] <masak> r: say <the quick brown fox jumped over the lazy dog>.sort.sort: *.chars

[20:41] <p6eval> rakudo 0bfba1: OUTPUT«dog fox the the lazy over brown quick jumped␤»

[20:43] *** rurban_ joined
[20:43] *** sivoais left
[20:44] *** sivoais joined
[20:44] *** daxim joined
[20:46] *** gugod left
[20:47] *** mikemol left
[20:47] *** mikemol joined
[20:49] <dalek> mu: 29ee054 | (Cédric VINCENT)++ | misc/perl6advent-2012/schedule:

[20:49] <dalek> mu: Claim one slot

[20:49] <dalek> mu: review: https://github.com/perl6/mu/commit/29ee05408c

[20:49] <masak> yay

[20:51] *** rurban_ left
[20:52] <[Coke]> is there a way to show all the subs visible in the current scope? (mainly to interrogate all the globals)

[20:53] <[Coke]> r: Any.^methods.sort.say

[20:53] <p6eval> rakudo 0bfba1: OUTPUT«ACCEPTS Array FLATTENABLE_HASH FLATTENABLE_LIST all any at_key at_pos classify eager elems end first flat grep hash infinite join keys kv list lol map max min minmax none one pairs pick postcircumfix:<[ ]> postcircumfix:<{ }> push reduce reverse roll sort tree uniq…

[20:53] *** cognominal_ left
[20:53] <[Coke]> r: Any.^methods.sort(uc *).say

[20:53] <p6eval> rakudo 0bfba1: OUTPUT«===SORRY!===␤CHECK FAILED:␤Calling 'uc' will never work with argument types (Whatever) (line 1)␤    Expected: :(Cool $s)␤»

[20:53] *** hash_table left
[20:53] <[Coke]> r: Any.^methods.sort({uc *}).say

[20:53] <p6eval> rakudo 0bfba1: OUTPUT«===SORRY!===␤CHECK FAILED:␤Calling 'uc' will never work with argument types (Whatever) (line 1)␤    Expected: :(Cool $s)␤»

[20:53] <[Coke]> r: Any.^methods.sort(uc).say

[20:53] <p6eval> rakudo 0bfba1: OUTPUT«===SORRY!===␤CHECK FAILED:␤Calling 'uc' will never work with no arguments (line 1)␤    Expected: :(Cool $s)␤»

[20:54] <timotimo> r: Any.^methods.sort(*.uc).say

[20:54] <p6eval> rakudo 0bfba1: OUTPUT«No such method 'uc' for invocant of type 'Method'␤  in block  at /tmp/6xmTd6IKa6:1␤␤»

[20:54] <timotimo> oh, of course

[20:54] *** Timbus joined
[20:54] <timotimo> r: Any.^methods.sort(*str.uc).say

[20:54] <p6eval> rakudo 0bfba1: OUTPUT«===SORRY!===␤Unable to parse expression in argument list; couldn't find final ')' at line 2, near "str.uc).sa"␤»

[20:54] <[Coke]> r: Any.^methods.sort(*.name.uc).say

[20:54] <p6eval> rakudo 0bfba1: OUTPUT«No such method 'uc' for invocant of type 'String'␤  in block  at /tmp/fzsNm_5tXn:1␤␤»

[20:54] <timotimo> oh, even more interesting

[20:54] <timotimo> r: Any.^methods.sort(uc *.name).say

[20:54] <p6eval> rakudo 0bfba1: OUTPUT«===SORRY!===␤CHECK FAILED:␤Calling 'uc' will never work with argument types (WhateverCode) (line 1)␤    Expected: :(Cool $s)␤»

[20:54] *** gugod joined
[20:54] <timotimo> r: Any.^methods.sort({uc *.name}).say

[20:54] <p6eval> rakudo 0bfba1: OUTPUT«===SORRY!===␤CHECK FAILED:␤Calling 'uc' will never work with argument types (WhateverCode) (line 1)␤    Expected: :(Cool $s)␤»

[20:55] <masak> r: .say for MY::.list

[20:55] <p6eval> rakudo 0bfba1: OUTPUT«"GLOBALish" => 7␤"EXPORT" => 11␤"\$?PACKAGE" => 15␤"::?PACKAGE" => 19␤"\$_" => 23␤"\$/" => 27␤"\$!" => 31␤"\$=pod" => 35␤"!UNIT_MARKER" => 39␤»

[20:55] <masak> I'm curious what those numbers mean.

[20:56] <timotimo> r: Any.^methods.sort(-> {uc($^a.name)}).say

[20:56] <p6eval> rakudo 0bfba1: OUTPUT«===SORRY!===␤Placeholder variable '$^a' cannot override existing signature␤at /tmp/msXvvWVbpD:1␤»

[20:56] <timotimo> r: Any.^methods.sort(-> $a {uc($a.name)}).say

[20:56] <p6eval> rakudo 0bfba1: OUTPUT«ACCEPTS all any Array at_key at_pos classify eager elems end first flat FLATTENABLE_HASH FLATTENABLE_LIST grep hash infinite join keys kv list lol map max min minmax none one pairs pick postcircumfix:<[ ]> postcircumfix:<{ }> push reduce reverse roll sort tree uniq…

[20:56] <[Coke]> \o/ !

[20:56] <timotimo> i bet this is doable easierly

[20:56] *** Khisanth left
[20:57] <[Coke]> say 3.elems;

[20:57] <[Coke]> r: say 3.elems;

[20:57] <p6eval> rakudo 0bfba1: OUTPUT«1␤»

[20:58] *** pmurias left
[20:58] <masak> r: sub foo {}; .say if /^\&/ for MY::.keys

[20:58] <p6eval> rakudo 0bfba1: OUTPUT«&foo␤»

[20:58] <masak> [Coke]: that seems to do it.

[20:59] <moritz> first post scheduled for publication at midnight

[20:59] <dalek> mu: 2d602d9 | (Cédric VINCENT)++ | misc/perl6advent-2012/topic-brainstorming:

[20:59] <dalek> mu: Add topics discussed on #perl6

[20:59] <dalek> mu: review: https://github.com/perl6/mu/commit/2d602d98cb

[20:59] <moritz> though I'm not sure which midnight -- probably UTC+1

[21:00] <masak> so many midnights...

[21:00] <[Coke]> masak: what about, say, "length" ?

[21:00] <moritz> those with author privileges might be able to to preview it at http://perl6advent.wordpress.com/?p=1109&preview=true

[21:00] <masak> [Coke]: it's not in the current scope.

[21:00] *** GlitchMr left
[21:00] <masak> (it's in a higher scope)

[21:00] <[Coke]> ok. I did specifically ask about globals.

[21:01] <[Coke]> r: say OUTER;

[21:01] <p6eval> rakudo 0bfba1: OUTPUT«OUTER()␤»

[21:01] <[Coke]> r: say OUTER::.keys

[21:01] <p6eval> rakudo 0bfba1: OUTPUT«␤»

[21:01] <[Coke]> r: say CORE::.keys

[21:01] <p6eval> rakudo 0bfba1: OUTPUT«&undefine &prefix:<temp> &prefix:<let> &INDIRECT_NAME_LOOKUP &REQUIRE_IMPORT &infix:<andthen> &METAOP_ASSIGN &METAOP_TEST_ASSIGN:<//> &METAOP_TEST_ASSIGN:<||> &METAOP_TEST_ASSIGN:<&&> &METAOP_NEGATE &METAOP_REVERSE &METAOP_CROSS &METAOP_ZIP &METAOP_REDUCE_LEFT &MET…

[21:01] <masak> [Coke]: yes. I misunderstood you. sorry.

[21:01] *** gugod left
[21:01] <[Coke]> CORE, then?

[21:01] <masak> looks like.

[21:02] <[Coke]> r: say CORE::.keys.grep(/le/);

[21:02] <p6eval> rakudo 0bfba1: OUTPUT«&prefix:<let> &trim-leading &sleep &infix:<leg> &infix:<le> Iterable Complex &elems NQPCursorRole Callable &trait_mod:<handles>␤»

[21:02] *** gugod joined
[21:02] <masak> moritz: url didn't work, but I was able to and find the article through Wordpress. reading.

[21:02] <[Coke]> masak++

[21:02] <[Coke]> timotimo++

[21:02] *** daxim left
[21:03] *** daxim joined
[21:03] <timotimo> r: Any.^methods.map(*.name).sort(uc *).say

[21:03] <p6eval> rakudo 0bfba1: OUTPUT«===SORRY!===␤CHECK FAILED:␤Calling 'uc' will never work with argument types (Whatever) (line 1)␤    Expected: :(Cool $s)␤»

[21:04] <timotimo> r: Any.^methods.map(*.name).sort(uc $^a).say

[21:04] <p6eval> rakudo 0bfba1: OUTPUT«===SORRY!===␤Cannot use placeholder parameter $^a in the mainline␤at /tmp/YiHclCGUgE:1␤»

[21:04] <timotimo> r: Any.^methods.map(*.name).sort(uc $^a).say

[21:04] <p6eval> rakudo 0bfba1: OUTPUT«===SORRY!===␤Cannot use placeholder parameter $^a in the mainline␤at /tmp/Lko2_uwNDo:1␤»

[21:04] <timotimo> r: Any.^methods.map(*.name).sort({uc $^a}).say

[21:04] <p6eval> rakudo 0bfba1: OUTPUT«ACCEPTS all any Array at_key at_pos classify eager elems end first flat FLATTENABLE_HASH FLATTENABLE_LIST grep hash infinite join keys kv list lol map max min minmax none one pairs pick postcircumfix:<[ ]> postcircumfix:<{ }> push reduce reverse roll sort tree uniq…

[21:04] <timotimo> not sure which one is nicer.

[21:04] <moritz> masak: oh, I didn't mention macros at all. Feel free to fudge 'em in :-)

[21:04] <masak> heh :)

[21:04] *** spider-mario left
[21:05] <masak> moritz: "It surely has been a good and productive year for Perl 6, and let&#039;s hope that this last month stays the same." -- something about that 'and' feels wrong to me.

[21:05] <moritz> masak: should probably be   ; let's hope ...

[21:05] <masak> it changes the sense of the sentence from "there's a good chance it will" to "don't you cause it not to" for me.

[21:06] <[Coke]> "and we're sure that this last month will continue the tradition."

[21:06] <timotimo> :D

[21:06] <masak> moritz: by the way, I still haven't completely dismissed the idea of switching topics with you.

[21:06] <moritz> masak: :-)

[21:06] <moritz> [Coke]: I like that sentence

[21:06] <masak> (collaborative writing)++

[21:09] <dalek> mu: 5862528 | moritz++ | misc/perl6advent-2012/ (2 files):

[21:09] <dalek> mu: [p6advent] claim days 1 and 6; add some references to prior art

[21:09] <dalek> mu: review: https://github.com/perl6/mu/commit/5862528cc5

[21:10] *** Khisanth joined
[21:11] <cedrvint> moritz: (warning: WP newbie) I'm not able to read your article

[21:13] <moritz> cedrvint: please try again

[21:13] <moritz> cedrvint: I've changed your role from "author" to "editor"

[21:14] * cedrvint is trying again

[21:15] *** rurban_ joined
[21:30] *** cedrvint left
[21:36] *** Pleiades` left
[21:41] <skids> r: https://gist.github.com/4178797 # I'll file an RT for this later (-1 +>  * should be -1), unless someone knows of one already.

[21:41] <p6eval> rakudo 0bfba1: OUTPUT«===SORRY!===␤Confused␤at /tmp/koE6maiInZ:1␤»

[21:41] *** Pleiades` joined
[21:41] *** wamba joined
[21:43] <skids> oh why did I r: that? Feh.

[21:45] *** noggle left
[21:48] *** noggle joined
[22:03] *** skids left
[22:09] *** pmurias joined
[22:14] *** noggle left
[22:19] *** noggle joined
[22:25] *** tockitj_ left
[22:28] *** bluescreen10 left
[22:31] *** rurban_ left
[22:37] *** whooguy joined
[22:38] *** colomon left
[22:39] *** whooguy left
[22:43] *** bluescreen10 joined
[22:43] *** fibo joined
[22:49] *** colomon joined
[22:50] *** whooguy joined
[23:02] *** armitage81 joined
[23:04] *** armitage81 left
[23:04] *** armitage81 joined
[23:06] *** alester left
[23:07] <lue> r: my $a = "abc"; say ("def" != $a); # LTA error message?

[23:07] <p6eval> rakudo 0bfba1: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏def' (indicated by ⏏)␤  in method Numeric at src/gen/CORE.setting:10175␤  in sub infix:<==> at src/gen/CORE.setting:2806␤  in sub infix:<==> at src/gen/CORE.setting:2806␤  in s…

[23:08] <sorear> awesome error message

[23:08] <sorear> eval: "abc" == "def"

[23:08] <buubot_backup> sorear: 1

[23:08] <sorear> eval: use warnings; "abc" == "def"

[23:08] <buubot_backup> sorear: Argument "def" isn't numeric in numeric eq (==) at (eval 20) line 1. Argument "abc" isn't numeric in numeric eq (==) at (eval 20) line 1. 1

[23:10] <flussence> n: "abc" == "def"

[23:10] <p6eval> niecza v22-44-g0247fe5: OUTPUT«Unhandled exception: Cannot parse number: abc␤  at /home/p6eval/niecza/lib/CORE.setting line 1443 (die @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3542 (ANON @ 11) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3544 (NumSyntax.str2num @ 5) ␤  at …

[23:10] <flussence> rp: "abc" == "def"

[23:10] <lue> It took me a while to remember !eq is what I meant. The error message made me think something somewhere was erroneously trying to convert a string to a number.

[23:11] <sorear> lue: no, something was *correctly* trying to convert a string to a number

[23:11] <sorear> lue: == means "convert both arguments to number, then compare"

[23:11] <masak> lue: also, infix:<ne>

[23:11] <sorear> ne converts both to string

[23:11] <masak> as in "not equal"..

[23:11] <sorear> !=== leaves both arguments as-is

[23:12] <flussence> nrp: "abc" == "def"

[23:12] <p6eval> niecza v22-44-g0247fe5: OUTPUT«Unhandled exception: Cannot parse number: abc␤  at /home/p6eval/niecza/lib/CORE.setting line 1443 (die @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3542 (ANON @ 11) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3544 (NumSyntax.str2num @ 5) ␤  at …

[23:12] <p6eval> ..rakudo 0bfba1: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏abc' (indicated by ⏏)␤  in method Numeric at src/gen/CORE.setting:10175␤  in sub infix:<==> at src/gen/CORE.setting:2806␤  in sub infix:<==> at src/gen/CORE.setting:2806␤  in b…

[23:12] <p6eval> ..pugs:  ( no output )

[23:12] <sorear> p: say "abc" == "def"

[23:12] <p6eval> pugs: OUTPUT«1␤»

[23:13] <lue> I know. It's just that I have yet to internalize the difference between string and number comparison, and I think the error message could maybe hint towards that possible mistake (like a lot of errors do).

[23:14] <flussence> I wonder if this is a feasible thing to do: when an exception gets stringified, have it check the call stack and substitute a more meaningful message then.

[23:14] <lue> (I see above that P5 warns that.)

[23:16] <flussence> I mean, adding extra type-checking into infix:<==> itself and making it generate the error itself would work, but then you're putting stuff in hot code paths

[23:18] <lue> To me, the P6 error message emphasized what a string needs to be converted to a number when I wasn't directly converting a number, making me think something was wrong with one of the sides of the equality, not the equality itself.

[23:20] <lue> (in other words, the error message was correct, but the advice was wrong.)

[23:21] *** MayDaniel left
[23:23] <flussence> maybe we need Carp.pm built in :)

[23:23] <flussence> (it makes more sense if you chop the first two layers of backtrace off)

[23:25] *** stopbit left
[23:25] <lue> Yea. But I always ignore backtraces into CORE.setting, 'cos a problem there I can only work around. (So i didn't even register the problem occurring at one point in infix:<==>)

[23:29] <lue> Maybe the message could be "Cannot convert arguments to numbers for numeric equality (infix:<==>); maybe you meant infix:<eq> or infix:<~~> ?" ?

[23:33] *** fibo left
[23:34] <whooguy> i vote for that message.  Very good suggestion lue

[23:34] *** skids joined
[23:38] <flussence> r: https://gist.github.com/4179531

[23:38] <p6eval> rakudo 0bfba1: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏abc' (indicated by ⏏)␤  in method Numeric at src/gen/CORE.setting:10175␤  in sub infix:<+> at src/gen/CORE.setting:2758␤  in sub infix:<+> at src/gen/CORE.setting:2758␤  in blo…

[23:39] <flussence> -EIRCLINESTOOSHORT

[23:39] <flussence> r: https://gist.github.com/4179531

[23:39] <p6eval> rakudo 0bfba1: OUTPUT«Cannot convert string to number: base-10 number must begin with valid digits or '.' in '⏏abc' (indicated by ⏏)␤Cannot convert string to number (Did you mean infix:<eq> or infix:<~~>?): base-10 number must begin with valid digits or '.' in '⏏abc' (indicated by ⏏)␤»…

[23:40] <flussence> there you go :)

[23:40] <lue> :)

[23:41] <masak> flussence++!

[23:42] <masak> that is awesome, testing a compiler extension outside of the compiler.

[23:43] <flussence> took me a while, because augment {} didn't work there...

[23:43] <lue> did you try use MONKEY_TYPING; ?

[23:44] <flussence> yeah, it doesn't like me trying to override methods that aren't declared multi

[23:45] *** am0c joined
[23:45] <lue> is X::Str::Numeric specifically for infix:<==> ? (If not, I can't see where it only works for infix:<==>)

[23:46] <flussence> the postfix "if"

[23:46] *** bowtie left
[23:48] <lue> oh. duh.

[23:50] *** aloha left
[23:53] *** aloha joined
[23:55] *** tokuhiro_ left
[23:55] *** tokuhiro_ joined
