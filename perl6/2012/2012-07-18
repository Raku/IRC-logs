[00:12] *** daniel-s joined
[00:14] *** sftp left
[00:14] *** thelazydeveloper left
[00:19] *** alvis joined
[00:31] <[Coke]> phenny: ask au if there's any point to keeping the PUGS_BACKEND fudging at this point.

[00:31] <phenny> [Coke]: I'll pass that on when au is around.

[00:34] <dalek> roast: 76bb3e0 | coke++ | integration/ (2 files):

[00:34] <dalek> roast: pugs (auto) unfudge

[00:34] <dalek> roast: review: https://github.com/perl6/roast/commit/76bb3e0353

[00:36] *** BinGOs joined
[00:38] *** crab2313 left
[00:40] *** crab2313 joined
[00:56] *** tokuhiro_ joined
[01:04] *** zhutingting left
[01:06] *** zhutingting joined
[01:16] *** alvis left
[01:17] *** alvis` left
[01:18] *** awwaiid left
[01:19] *** awwaiid joined
[01:20] *** zhutingting_ joined
[01:21] *** zhutingting left
[01:21] *** zhutingting_ is now known as zhutingting

[01:25] *** zhutingting left
[01:26] *** xinming joined
[01:26] *** tokuhiro_ left
[01:27] *** tokuhiro_ joined
[01:30] *** prettyrobots left
[01:31] *** tokuhiro_ left
[01:32] *** lumi_ left
[01:33] *** lumi_ joined
[01:33] *** am0c_ joined
[01:34] <[Coke]> can you add a method to a Type in haskell?

[01:34] *** scott__ joined
[01:35] *** wolong left
[01:36] *** snarkyboojum joined
[01:36] *** spider-mario left
[01:36] *** zhutingting joined
[01:37] *** wolong joined
[01:38] *** preflex left
[01:38] * [Coke] figures out how to do it in pugs, anyway.

[01:38] *** jnthn left
[01:39] *** Pleiades` left
[01:39] *** jnthn joined
[01:40] *** preflex joined
[01:40] *** mathw_ left
[01:40] *** mathw joined
[01:41] *** yves_ left
[01:41] *** sjohnson left
[01:41] *** crazedpsyc left
[01:42] *** Pleiades` joined
[01:45] *** yves_ joined
[01:45] *** sjohnson joined
[01:45] *** renormalist joined
[01:45] *** robinsmidsrod joined
[01:45] *** pmichaud joined
[01:45] *** masak joined
[01:45] *** prammer joined
[01:45] *** jfried joined
[01:45] *** crazedpsyc joined
[01:45] *** mikec__ joined
[01:47] <dalek> Pugs.hs: 6fa4f7d | coke++ | / (2 files):

[01:47] <dalek> Pugs.hs: rename .reverse to .flip -- #14

[01:47] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/6fa4f7d9fd

[01:47] <dalek> roast: b75eed2 | coke++ | S32-str/flip.t:

[01:47] <dalek> roast: pugs fudge

[01:47] <dalek> roast: review: https://github.com/perl6/roast/commit/b75eed29a3

[01:52] *** godfrey999 joined
[01:59] *** zhutingting left
[02:04] *** supernovus joined
[02:06] <supernovus> It seems modules.perl6.org has been broken for a while. There are no logos, and no medals for any projects.

[02:06] * [Coke] attempts to add a build dep, an import, and Str.trim to pugs.

[02:07] <[Coke]> supernovus: I think it's a known issue; not sure if the cause is known.

[02:08] <supernovus> Well, I'll download the source of the script which generates the page and see if I can track it down.

[02:11] <flussence> supernovus++ # doing something about it

[02:13] *** orafu left
[02:13] *** OuLouFu joined
[02:14] *** OuLouFu is now known as orafu

[02:18] *** jerome left
[02:19] <dalek> roast: 48446cb | coke++ | S32-str/trim.t:

[02:19] <dalek> roast: pugs refudge

[02:19] <dalek> roast: review: https://github.com/perl6/roast/commit/48446cb6c1

[02:21] <dalek> Pugs.hs: e743d95 | coke++ | / (3 files):

[02:21] <dalek> Pugs.hs: add .trim, .trim-leading, .trim-trailing

[02:21] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/e743d95641

[02:25] <[Coke]> r: say "DFSDFasdfasdf".fc

[02:25] <p6eval> rakudo 1fe39c: OUTPUT¬´No such method 'fc' for invocant of type 'Str'‚ê§  in block <anon> at /tmp/6qptjVFlA0:1‚ê§‚ê§¬ª

[02:25] <[Coke]> ah, then I don't feel so bad. ;)

[02:27] <colomon> .fc ?

[02:28] <supernovus> Well, that could do it. GitHub API v2 has been removed from GitHub. I'll rework build-project-list.pl to use the v3 API.

[02:28] <[Coke]> it's in S32-Str

[02:28] <[Coke]> supernovus++ !

[02:29] <[Coke]> npr: say 3.succ

[02:29] <p6eval> rakudo 1fe39c, niecza v19-13-g442e075: OUTPUT¬´4‚ê§¬ª

[02:29] <p6eval> ..pugs: OUTPUT¬´*** No such method in class Int: "&succ"‚ê§    at /tmp/pcnYX8cpPf line 1, column 5 - line 2, column 1‚ê§¬ª

[02:33] <gdonald> http://pastebin.com/WNxAnEnT  My Rakudo build broke a few days ago.  Latest git pull doesn't help.

[02:34] <gdonald> same errors on latest Debian and Ubuntu

[02:36] <[Coke]> gdonald: have you tried starting from a fresh git checkout? (or git clean -xdf ?)

[02:37] <gdonald> yeah, I tried a fresh checkout on both machines

[02:37] *** Psyche^ joined
[02:37] <gdonald> new dependency added recently?

[02:38] *** Patterner left
[02:38] *** Psyche^ is now known as Patterner

[02:39] <[Coke]> dunno. Best bet is probably to do bisect to figure out where it went south.

[02:39] <[Coke]> there was a temporary bump in required parrot version that was dropped, though.

[02:39] <[Coke]> msg pmichaud the problem with not upgrading parrot as soon as possible is that we're less likely to notice when it's broken.

[02:39] <[Coke]> phenny: tell pmichaud the problem with not upgrading parrot as soon as possible is that we're less likely to notice when it's broken.

[02:39] <phenny> [Coke]: I'll pass that on when pmichaud is around.

[02:39] <[Coke]> phenny--

[02:41] <gdonald> mine seems to be trying parrot RELEASE_4_5_0, is that the correct version?

[02:42] <dalek> Pugs.hs: 80dc964 | coke++ | Pugs/src/Pugs/Prim.hs:

[02:42] <dalek> Pugs.hs: Add .FatRat as copy of .Rat #20

[02:42] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/80dc964bac

[02:43] <[Coke]> I thought we downgraded to 4.4 - when you started with a fresh repo, did you also blow away nqp and parrot?

[02:43] <[Coke]> (and are you using --gen-parrot option to rakudo's config?)

[02:44] <gdonald> yeah, i removed the whole thing, the git clone again.  i'm using `perl Configure.pl --gen-parrot --gen-nqp`

[02:45] <[Coke]> so you should be getting the right versions, then, with no leftovers.

[02:45] *** lue left
[02:45] <[Coke]> I'd probably do a bisect to figure out what the actual bad commit was.

[02:48] <diakopter> nqp: nqp::say(3).WHAT # oopsie

[02:48] <p6eval> nqp: OUTPUT¬´error:imcc:syntax error, unexpected '\n'‚ê§   in file '(file unknown)' line 37‚ê§‚ê§¬ª

[02:48] <diakopter> also, nqp thinks a line starting with == is a pod directive

[02:49] <diakopter> nqp: say(4) if 2 ‚ê§==2

[02:49] <p6eval> nqp: OUTPUT¬´Illegal pod directive at line 3, near "=2"‚ê§current instr.: 'nqp;HLL;Grammar;panic' pc 22385 (src/stage2/gen/NQPHLL.pir:8546) (src/stage2/gen/NQPHLL.pm:326)‚ê§¬ª

[02:49] <supernovus> Well, I have to run, but now that I know what the problem with the script is, fixing it will be fairly straightfoward.

[02:50] <diakopter> phenny: tell jnthn nqp thinks a line starting with == starts a pod directive; try nqp: say(4) if 2 ‚ê§==2

[02:50] <phenny> diakopter: I'll pass that on when jnthn is around.

[02:51] <gdonald> it's pulling 4_5_0 when I clone and build all new: Parrot Version 4.5.0 Configure 2.0

[02:52] <diakopter> phenny: tell jnthn in nqp say(1) returns a non-6model object try  say(say(1).WHAT)

[02:52] <phenny> diakopter: I'll pass that on when jnthn is around.

[02:53] *** zhutingting joined
[02:53] <diakopter> phenny: tell jnthn nqp::say(1).WHAT causes an imcc syntax error

[02:53] <phenny> diakopter: I'll pass that on when jnthn is around.

[02:54] <au> [Coke]: feel free to drop PUGS_BACKEND fudging; (keeping it a simple interpreter)++

[02:54] <phenny> au: 00:31Z <[Coke]> ask au if there's any point to keeping the PUGS_BACKEND fudging at this point.

[02:57] *** supernovus left
[03:00] <[Coke]> au: danke. I just added some features and am back to fudge working.

[03:00] <[Coke]> er, xiexie.

[03:00] <au> woot!

[03:00] *** gdonald left
[03:01] *** gdonald joined
[03:02] <sorear> AU \o/

[03:02] <au> \üëæ/

[03:07] *** cenuij2 left
[03:18] *** adu joined
[03:20] <dalek> roast: f200e0a | coke++ | / (5 files):

[03:20] <dalek> roast: pugs (un)fudge

[03:20] <dalek> roast: review: https://github.com/perl6/roast/commit/f200e0a9ec

[03:21] <dalek> Pugs.hs: bf78a15 | coke++ | t/spectest.data:

[03:21] <dalek> Pugs.hs: don't bother listing things we don't run yet.

[03:21] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/bf78a15f28

[03:21] <dalek> Pugs.hs: 4ff01b5 | coke++ | t/spectest.data:

[03:21] <dalek> Pugs.hs: run fudged tests

[03:21] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/4ff01b5565

[03:27] <[Coke]> p: say 9231 / 22934

[03:27] <p6eval> pugs: OUTPUT¬´0.4025028342199354669922385977151826981774‚ê§¬ª

[03:27] <[Coke]> bleargh, that's depressing.

[03:28] <[Coke]> p: say 9531 / 22934 # approximate # if we can get the sin/cos/tan tests passing.

[03:28] <p6eval> pugs: OUTPUT¬´0.41558384930670620040115112932763582454‚ê§¬ª

[03:36] *** prettyrobots joined
[03:37] <[Coke]> au: do you get email notifications when I open issues?

[03:38] <[Coke]> zzz

[03:38] <au> not yet

[03:39] <au> I probably turned the notification email off when notifications from rubinius overwhelmed my inbox once

[03:39] * au goes to check if GitHub offers per-project notification settings

[03:39] <au> or fallback to a filter, or something.

[03:40] <au> [Coke]++ rest well & thx for all the good work

[03:43] *** sudokode left
[03:48] *** thou left
[04:00] *** kaare_ joined
[04:10] *** zhutingting left
[04:13] *** lue joined
[04:14] *** crab2313 left
[04:15] <lue> Is it possible to use a CORE.setting.pir generated on another computer? (I've been at the Stage start: step for about an hour now on my own computer.)

[04:19] *** telex_ left
[04:20] *** sudokode joined
[04:24] <lue> As long as it doesn't contain platform-specific information (which doesn't seem likely), such a time-saving trick would work fine, right?

[04:27] *** telex joined
[04:29] <benabik> The .pir shouldn't be platform specific.

[04:30] *** birdwindupbird joined
[04:30] *** skids left
[04:30] *** xinming left
[04:31] *** prettyrobots left
[04:31] <lue> That's what I'm assuming, I just wanted to make sure. (I could've generated CORE.setting.pir many times on feather by now.)

[04:34] <lue> (I hope getting it past make won't be too much of an issue.)

[04:38] *** telex left
[04:40] *** telex joined
[04:59] *** lue left
[05:02] *** zhutingting joined
[05:11] *** prettyrobots joined
[05:26] *** birdwindupbird left
[05:33] *** supernovus joined
[05:34] <supernovus> Well, I'll have to finish tomorrow. While working on porting build-project-list.pl to the new API, I got sidetracked and have rewritten it as a modular OO application... not quite finished yet.

[05:37] <supernovus> I look foward to Perl 6 having a SSL library so I can rewrite the whole app into Perl 6. Because having the modules.perl6.org site generated by a Perl 6 app, would be pretty darn cool.

[05:39] <supernovus> Anyway, good * everyone, I'm off to bed. I'll finish the rewrite tomorrow. Then the badges should all work again.

[05:43] *** supernovus left
[05:47] *** kaleem joined
[05:48] *** kurahaupo joined
[05:49] *** birdwindupbird joined
[05:50] *** kaleem left
[05:51] *** brrt joined
[05:53] *** zhutingting left
[05:58] *** kaleem joined
[05:59] *** brrt left
[05:59] *** brrt1 joined
[06:05] *** fgomez left
[06:05] <moritz> ++supernovus

[06:06] *** fridim_ joined
[06:10] <moritz> good morning everybody

[06:10] *** nodmonkey joined
[06:10] <tadzik> good morning #perl6

[06:18] *** kurahaupo left
[06:18] *** nodmonkey left
[06:20] <moritz> good am, tadzik 

[06:25] <moritz> Files=682, Tests=23440 # toqast spectest

[06:26] *** nebuchadnezzar left
[06:27] *** prettyrobots left
[06:27] *** kresike joined
[06:27] <kresike> good morning all you happy perl6 people

[06:28] *** prettyrobots joined
[06:32] *** brrt joined
[06:32] *** brrt1 left
[06:32] *** kurahaupo joined
[06:32] *** kaleem left
[06:34] *** nodmonkey joined
[06:34] *** brrt1 joined
[06:35] *** brrt left
[06:38] *** jerome joined
[06:41] *** brrt1 left
[06:41] *** nodmonkey left
[06:44] *** fridim_ left
[06:48] *** kaleem joined
[06:49] <adu> I guess I'm mostly happy

[06:49] <adu> but I might not be

[06:51] *** GlitchMr joined
[06:52] *** xinming joined
[06:59] *** hoelzro|away is now known as hoelzro

[07:03] *** adu left
[07:04] *** nebuchadnezzar joined
[07:04] *** gdonald left
[07:05] *** gdonald joined
[07:09] <tadzik> guess it's time to run emmentaler on toqast

[07:10] <moritz> I don't think so

[07:10] <moritz> still too many test regressions

[07:12] <GlitchMr>  0, 0.1 ... 2

[07:12] <GlitchMr> oops

[07:13] <GlitchMr> Accidental paste

[07:13] <moritz> http://www.smbc-comics.com/index.php?db=comics&id=2675

[07:14] <GlitchMr> perl6: print Inf - Inf

[07:14] <p6eval> rakudo 1fe39c, niecza v19-13-g442e075: OUTPUT¬´NaN¬ª

[07:26] *** prettyrobots left
[07:28] *** prettyrobots joined
[07:35] *** sudokode left
[07:44] <jnthn> Good morning o/

[07:44] <phenny> jnthn: 02:50Z <diakopter> tell jnthn nqp thinks a line starting with == starts a pod directive; try nqp: say(4) if 2 ‚ê§==2

[07:45] <phenny> jnthn: 02:52Z <diakopter> tell jnthn in nqp say(1) returns a non-6model object try  say(say(1).WHAT)

[07:45] <phenny> jnthn: 02:53Z <diakopter> tell jnthn nqp::say(1).WHAT causes an imcc syntax error

[07:45] <diakopter> o/

[07:46] <jnthn> Not surprised about the latter

[07:46] <jnthn> nqp::say is void return.

[07:46] <jnthn> Though similar things in QAST return a type inference fail, I think.

[07:47] <diakopter> nqp: say(4) if 2 ‚ê§==2

[07:47] <p6eval> nqp: OUTPUT¬´Illegal pod directive at line 3, near "=2"‚ê§current instr.: 'nqp;HLL;Grammar;panic' pc 22385 (src/stage2/gen/NQPHLL.pir:8546) (src/stage2/gen/NQPHLL.pm:326)‚ê§¬ª

[07:47] <diakopter> I ran into it writing nqp code today :)

[07:47] <jnthn> whee!

[07:47] <jnthn> I...quess the grammar is a little simplistic :)

[07:50] <diakopter> nqp: say(say(1).WHAT)

[07:50] <p6eval> nqp: OUTPUT¬´1‚ê§Can only use get_what on a SixModelObject‚ê§current instr.: '_block1000' pc 35 ((file unknown):152306289) (/tmp/8rK41VykYM:1)‚ê§¬ª

[07:51] <jnthn> Well. That one is accurate.

[07:52] <jnthn> nqp is a hybrid 6model/Parrot thing.

[07:52] <jnthn> Rakudo is just using 6model all the way

[07:54] <hoelzro> fun stuff: my crash example from last night doesn't crash on OS X

[07:54] <hoelzro> grrrr

[07:58] * jnthn hopes the coffee starts working soon...writing tests that involve time needs a working brane...

[08:03] *** fhelmberger joined
[08:12] *** prettyrobots left
[08:21] <masak> morning, #perl6

[08:21] <diakopter> o/

[08:27] *** sergot joined
[08:27] <sergot> hi o/

[08:27] *** wtw joined
[08:27] <tadzik> heyllo

[08:42] *** mikemol left
[08:47] *** MayDaniel joined
[08:55] *** mikemol joined
[08:57] *** zhutingting joined
[09:00] *** dakkar joined
[09:07] *** Patterner left
[09:13] *** MayDaniel left
[09:17] <masak> ooh, I have a Perl 6 day today.

[09:17] <masak> time to build the toqast branch, then.

[09:18] <jnthn> Fix teh macros tests! :P

[09:19] *** Psyche^ joined
[09:19] *** Psyche^ is now known as Patterner

[09:19] <jnthn> (Actually, I already fixed the majority of the breakages there...but some fail.)

[09:20] <masak> yeah, teh macros tests, if they don't work already, seem an excellent point for me to start.

[09:20] <moritz> fwiw multi dispatch between Int and int is broken in toqast

[09:20] <masak> ok.

[09:21] <moritz> jnthn: ooc, what's the motivation for not wanting to merge stuff from nom to toqast?

[09:21] <jnthn> moritz: Yeah, I'm aware of that one.

[09:21] <moritz> jnthn: changes to Actions/World?

[09:21] <jnthn> moritz: Because if I collapse QPerl6 back into Perl6 before merging, then git can help me integrate the Actions/World/Grammar changes that happened since I branched.

[09:22] <jnthn> If I don't do that, I have to go through them all by hand.

[09:22] <moritz> jnthn: ok. So core-only patches are fine to merge?

[09:23] <moritz> jnthn: i mostly ask because I want to get rid of an infinite loop in one of the tests

[09:23] <jnthn> moritz: yes

[09:24] <jnthn> moritz: Though I hope that pulling those in won't make the final merge harder :)

[09:24] <moritz> jnthn: it won't

[09:24] <moritz> jnthn: but I just noticed that they also depend on some nqp changes :(

[09:25] <jnthn> moritz: Updating the toqast branch in NQP with latest stuff from mainline NQP is probably fine.

[09:25] <moritz> jnthn: ah right, toqast only touches qast stuff, right?

[09:25] <jnthn> Ruight.

[09:25] <jnthn> *right

[09:26] *** mikemol left
[09:27] *** grondilu joined
[09:28] *** mikemol joined
[09:47] <moritz> loliblug: http://perl6maven.com/from-iterative-to-functional-perl6-code # first guest post on perl6maven

[09:48] <dalek> Heuristic branch merge: pushed 20 commits to nqp/toqast by moritz

[09:48] <masak> moritz++ # guest posting

[09:48] <dalek> rakudo/toqast: 85177c8 | pmichaud++ | src/core/Rat.pm:

[09:48] <dalek> rakudo/toqast: Fix relational operators for (Int,Rat).

[09:48] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/85177c80d8

[09:48] <dalek> rakudo/toqast: 3337df6 | pmichaud++ | src/core/Str.pm:

[09:48] <dalek> rakudo/toqast: Refactor Str.match to be lazier and accept a few more options.

[09:48] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/3337df6042

[09:48] <dalek> rakudo/toqast: 24d833a | pmichaud++ | src/core/Str.pm:

[09:48] <dalek> rakudo/toqast: Restore :x(*) handling suggested by spectests.

[09:48] <dalek> rakudo/toqast: review: https://github.com/rakudo/rakudo/commit/24d833a4d6

[09:49] <moritz> Files=682, Tests=23549 # current toqast status

[09:49] <moritz> and the hangs are fixed

[09:50] <masak> also, the blog itself is excellent. moritz++

[09:50] *** mikemol left
[09:56] <moritz> thanks

[09:56] <moritz> I didn't know what I was going to write about, and thought I'd do some file IO. You can see how far I got with that one :-)

[10:05] <masak> :P

[10:12] *** fhelmberger left
[10:13] <mathw> hi

[10:13] <flussence> aha, someone else has that invoke() error now

[10:16] *** masakyst joined
[10:16] *** scott__ left
[10:16] <masak> mathw! \o/

[10:16] *** fhelmberger joined
[10:17] <masak> masakyst: greetings.

[10:19] <mathw> hi masak

[10:19] *** mikemol joined
[10:19] *** grondilu left
[10:19] <masakyst> hello masak

[10:33] <bbkr1> moritz++ # post about rewrites

[10:34] <moritz> oh by the way, I've just reviewed some of my old perlmonks posts... and there's a surprisingly large number of posts where I mention that rats in perl 6 do exact arithemtics, and they are all upvoted to 30..36 XP (a normal helpful but not exectpioinally good reply usually gets around 20..25 XP)

[10:35] <moritz> so, perlmonks folks seem to like that feature (as do I)

[10:36] <masak> it's a nice feature. and we strike a nice balance with it in Perl 6.

[10:44] <colomon> colomon's question for the morning: why is it lc, uc, fc, and titlecase?

[10:45] <masak> +1

[10:45] <masak> I asked that when we last talked about it. no-one replied.

[10:46] <colomon> n: say "hello".fc

[10:46] <p6eval> niecza v19-13-g442e075: OUTPUT¬´Unhandled exception: Unable to resolve method fc in type Str‚ê§  at /tmp/kWS0KAeiDV line 1 (mainline @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 3918 (ANON @ 3) ‚ê§  at /home/p6eval/niecza/lib/CORE.setting line 3919 (module-CORE @ 562) ‚ê§  at /home/p6e‚Ä¶

[10:46] <bbkr1> What bothers me is comment on perlmonks: "Just give me a Perl6 implementation i can depend on". The answer to that could be "You have one now! Rewrites cause incompatible changes in Perl 6 and you also have incompatible changes between Perl 5 versions, somehow you consider P5 to be stable and P6 not". I have a feeling that many developers waits some kind of blessing "go! now!" (a.k.a. release date).

[10:48] <GlitchMr> http://doc.perl6.org/routine/ucfirst

[10:48] <GlitchMr> Why we don't have ucfirst?

[10:48] <GlitchMr> titlecase does something else

[10:49] <colomon> because ucfirst is a bad idea in Unicode

[10:49] <tadzik> bbkr1: the different is that incompatibile changes in Perl 5 don't break your code often

[10:49] <GlitchMr> Why it's bad idea?

[10:50] <colomon> because you want titlecase (though possibly only on the first word)

[10:50] <GlitchMr> But what if I want it only on the first word

[10:52] <colomon> I proposed having tcfirst be a function

[10:52] <colomon> er, method

[10:52] <GlitchMr> Now it's inconsistent

[10:52] <GlitchMr> titlecase, but tcfirst

[10:53] <masak> excuse me for opining that "you don't want that method for purist reasons, please use this method instead which does the same" feels more anal-retentive than the Perl 6 way.

[10:53] <colomon> well, I also proposed tc instead of titlecase.  twice, if you count the implicit suggestion today.

[10:54] * masak glares at nothing, passive-aggressively :)

[10:54] <GlitchMr> Also, while it's common in English to write like "Modules and Whatever", it doesn't work that way in every language

[10:57] <flussence> bbkr1: maybe we should declare perl6's release date as some arbitrary point in the past, just to screw with people who think that way :)

[10:58] <bbkr1> and play "last christmas" song on perl6.org page :)

[11:00] <jnthn> If we're gonna put sound on there, I want a <marquee> too!

[11:00] <tadzik> BGSOUND

[11:00] *** fridim_ joined
[11:01] <flussence> nah, you've got to use modern markup only: <audio> and a CSS3 animated circular marquee

[11:02] *** godfrey999 left
[11:02] <jnthn> ooh!

[11:02] <jnthn> ;)

[11:08] *** JimmyZ joined
[11:14] *** kaleem left
[11:15] *** kaleem joined
[11:20] * masak .oO( la-a-st Christmas, I gave you Perl 6, but the very next day, you threw C in the mix. thi-i-s year, to save me from tears, I'll bootstrap with someone special )

[11:27] *** adu joined
[11:29] * masak walk &

[11:31] *** fridim_ left
[11:40] *** masakyst left
[11:40] *** godfrey999 joined
[11:42] *** SamuraiJack joined
[11:43] <SamuraiJack> oh hai

[11:43] <SamuraiJack> is there a *.deb package for rakudo?

[11:43] <tadzik> none that I know of

[11:43] <tadzik> but istr a friend of mine once maintaining a rakudo ppa

[11:43] <tadzik> for ubuntu

[11:44] <SamuraiJack> oh, cool, any links to it?

[11:46] <tadzik> let me see

[11:47] <tadzik> SamuraiJack: it's https://launchpad.net/~dexter/+archive/rakudo-pkg but it's reeeeealy outdated

[11:48] <SamuraiJack> heh, yea

[11:49] <SamuraiJack> ok, thanks

[11:49] <tadzik> there is 2012.04 in debian sid

[11:50] <kresike> SamuraiJack, there is a package in Debian/wheezy, but it's also outdated

[11:50] <tadzik> not that 2012.04 is particularly up-to-date ;)

[11:50] <tadzik> compiling manually is not that bad, if you have 2+ GBs of ram

[11:51] <SamuraiJack> yup, I guess I'll have to compile it

[11:51] * SamuraiJack is finally planning to play with perl6

[11:51] <tadzik> great!

[11:52] <SamuraiJack> "finally planning" what formualtion, hehe :)

[11:52] <tadzik> feel free to ask about anything unclear

[11:52] <SamuraiJack> I mean - previously I was not even planning :)

[11:52] <SamuraiJack> yup, will do

[11:54] <zhutingting> r: map *+1, 1..3

[11:54] <p6eval> rakudo 1fe39c:  ( no output )

[11:55] <zhutingting> r: map (*+1).say, 1..3

[11:55] <p6eval> rakudo 1fe39c:  ( no output )

[11:56] *** xinming left
[11:56] <zhutingting> r: .say for map *+1, 1..3

[11:56] <p6eval> rakudo 1fe39c: OUTPUT¬´2‚ê§3‚ê§4‚ê§¬ª

[11:57] <zhutingting> .say for map ***, 1..3

[11:57] <zhutingting> r: .say for map ***, 1..3

[11:57] <p6eval> rakudo 1fe39c: OUTPUT¬´===SORRY!===‚ê§HyperWhatever (**) not yet implemented. Sorry. ‚ê§at /tmp/K4lIR7dk9z:1‚ê§¬ª

[11:58] *** xinming joined
[12:00] <zhutingting> does perl6 has a syntax can rename * in lambda like ruby's [1,2,3].map { |o| o*o } 

[12:00] <zhutingting> ?

[12:01] <tadzik> ;is

[12:01] <tadzik> yes

[12:01] <tadzik> it's called a pointy block

[12:01] <tadzik> r: eager <a b c>.map: -> $a { say $a }

[12:01] <p6eval> rakudo 1fe39c: OUTPUT¬´a‚ê§b‚ê§c‚ê§¬ª

[12:02] <tadzik> that's also how for @a -> $b { } works

[12:05] *** mucker joined
[12:07] <flussence> r: say [1..3].map(* * *)

[12:07] <p6eval> rakudo 1fe39c: OUTPUT¬´Not enough positional parameters passed; got 1 but expected 2‚ê§  in block <anon> at /tmp/I0q7JlEDHL:1‚ê§‚ê§¬ª

[12:07] <flussence> r: say [1..3].map({$_ * $_})

[12:07] <p6eval> rakudo 1fe39c: OUTPUT¬´1 4 9‚ê§¬ª

[12:09] *** daxim joined
[12:09] *** SHODAN left
[12:10] <flussence> r: say [¬ª*¬´] [1..3] xx 2 # hah, as if this would work...

[12:10] <p6eval> rakudo 1fe39c: OUTPUT¬´Nominal type check failed for parameter '$op'; expected Any but got Mu instead‚ê§  in sub METAOP_REDUCE_LEFT at src/gen/CORE.setting:11678‚ê§  in block <anon> at /tmp/XYOKAJYYCp:1‚ê§‚ê§¬ª

[12:10] <flussence> ETRYINGTOOHARD

[12:11] <flussence> r: say [Z*] [1..3] xx 2

[12:11] <p6eval> rakudo 1fe39c: OUTPUT¬´1 4 9‚ê§¬ª

[12:11] <flussence> wow.

[12:12] <zhutingting> ¬ª√∂¬´

[12:15] <GlitchMr> perl6: [*] 1..3 xx 2

[12:15] <p6eval> rakudo 1fe39c, niecza v19-13-g442e075:  ( no output )

[12:15] <GlitchMr> perl6: say [*] 1..3 xx 2

[12:15] <p6eval> rakudo 1fe39c, niecza v19-13-g442e075: OUTPUT¬´2‚ê§¬ª

[12:15] <GlitchMr> perl6: say 1..3 xx 2

[12:15] <p6eval> rakudo 1fe39c, niecza v19-13-g442e075: OUTPUT¬´1..2‚ê§¬ª

[12:15] <GlitchMr> perl6: say [1, 2, 3] xx 2

[12:15] <p6eval> rakudo 1fe39c, niecza v19-13-g442e075: OUTPUT¬´1 2 3 1 2 3‚ê§¬ª

[12:15] <GlitchMr> perl6: say [*] [1, 2, 3] xx 2

[12:15] <p6eval> rakudo 1fe39c, niecza v19-13-g442e075: OUTPUT¬´9‚ê§¬ª

[12:16] <GlitchMr> perl6: say [*] ([1, 2, 3] xx 2)

[12:16] <p6eval> rakudo 1fe39c, niecza v19-13-g442e075: OUTPUT¬´9‚ê§¬ª

[12:16] <timotimo> perl6: say [*] [1, 2, 3, 1, 2, 3]

[12:16] <p6eval> niecza v19-13-g442e075: OUTPUT¬´1 2 3 1 2 3‚ê§¬ª

[12:16] <p6eval> ..rakudo 1fe39c: OUTPUT¬´6‚ê§¬ª

[12:17] <timotimo> ... huh?

[12:17] <moritz> rakudo forces numeric context

[12:17] <moritz> niecza doesn't

[12:17] <timotimo> ok

[12:17] <timotimo> perl6: say ([1, 2, 3] xx 2).perl

[12:17] <p6eval> rakudo 1fe39c, niecza v19-13-g442e075: OUTPUT¬´([1, 2, 3], [1, 2, 3]).list‚ê§¬ª

[12:17] <GlitchMr> perl6: say [*] ([1, 2, 3] xx 2).flat

[12:17] <p6eval> rakudo 1fe39c, niecza v19-13-g442e075: OUTPUT¬´9‚ê§¬ª

[12:18] <GlitchMr> So, 3 * 3

[12:18] <GlitchMr> ... ok...

[12:18] <timotimo> perl6: say ([1, 2, 3] x 2).perl

[12:18] <p6eval> rakudo 1fe39c, niecza v19-13-g442e075: OUTPUT¬´"1 2 31 2 3"‚ê§¬ª

[12:18] <timotimo> ah

[12:18] * moritz observes that .flat doesn't do what people expect it to

[12:18] <GlitchMr> x is string multiplication

[12:18] <timotimo> yup, saw that

[12:18] <moritz> rn: say ((1, 2), (3, 4), [5, 6]).flat.perl

[12:18] <p6eval> rakudo 1fe39c, niecza v19-13-g442e075: OUTPUT¬´(1, 2, 3, 4, [5, 6]).list‚ê§¬ª

[12:18] <flussence> r: say [¬ª+]  # the weird thing is rakudo seems to know what this should look like, but not what it is

[12:18] <p6eval> rakudo 1fe39c: OUTPUT¬´===SORRY!===‚ê§Missing ¬´ or ¬ª‚ê§at /tmp/sozVbTcHCO:1‚ê§¬ª

[12:19] <GlitchMr> say [*] 1, 2, 3, 1, 2, 3

[12:19] <GlitchMr> perl6: say [*] 1, 2, 3, 1, 2, 3

[12:19] <p6eval> rakudo 1fe39c, niecza v19-13-g442e075: OUTPUT¬´36‚ê§¬ª

[12:19] <moritz> .flat only flattens stuff that list assignment would flatten anyway

[12:19] <flussence> n: say [¬ª*¬´] [1..3] xx 2

[12:19] <p6eval> niecza v19-13-g442e075: OUTPUT¬´36‚ê§¬ª

[12:19] <flussence> er.

[12:20] <moritz> note that hypers descend into substructures

[12:20] *** fgomez joined
[12:20] <flussence> oh, ok

[12:22] <flussence> niecza++ # tolerating my insane code

[12:23] <GlitchMr> perl6: say pick 50

[12:23] <p6eval> rakudo 1fe39c: OUTPUT¬´Nil‚ê§¬ª

[12:23] <p6eval> ..niecza v19-13-g442e075: OUTPUT¬´‚ê§¬ª

[12:24] <GlitchMr> perl6: (1..6).pick(70).say

[12:24] <p6eval> rakudo 1fe39c: OUTPUT¬´1 6 5 4 2 3‚ê§¬ª

[12:24] <p6eval> ..niecza v19-13-g442e075: OUTPUT¬´6 3 4 1 5 2‚ê§¬ª

[12:25] <moritz> they.. differ. BUG!

[12:25] <GlitchMr> So, I guess it's better to do anything then fail

[12:25] <GlitchMr> than*

[12:28] <GlitchMr> perl6: Exception.new('Sample exception').say

[12:28] <p6eval> rakudo 1fe39c: OUTPUT¬´Default constructor only takes named arguments‚ê§  in method new at src/gen/CORE.setting:598‚ê§  in block <anon> at /tmp/C2wo6aWKRJ:1‚ê§‚ê§¬ª

[12:28] <p6eval> ..niecza v19-13-g442e075: OUTPUT¬´===SORRY!===‚ê§‚ê§Undeclared name:‚ê§        'Exception' used at line 1‚ê§‚ê§Unhandled exception: Check failed‚ê§‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 1402 (die @ 5) ‚ê§  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 37) ‚ê§  at /h‚Ä¶

[12:29] <moritz> ain't not what the exception API is like :-)

[12:31] <jnthn> .oO( If that worked, it'd be an exception to the norm )

[12:31] <GlitchMr> Perhaps we should have documentation exceptions

[12:31] *** zhutingting1 joined
[12:31] <moritz> GlitchMr: what makes you think we haven't?

[12:31] <GlitchMr> My first guess didn't worked

[12:32] *** jaldhar left
[12:32] <GlitchMr> documentation for exceptions*

[12:32] *** zhutingting left
[12:32] <GlitchMr> There is .throw for a reason

[12:32] <moritz> GlitchMr: we have both S32::Exception and doc.perl6.org/type/Exception and doc.perl6.org/type/X::AdHoc

[12:34] <zhutingting1> r: https://raw.github.com/perl6/perl6-examples/master/tutorial/lazy.pl

[12:34] <p6eval> rakudo 1fe39c: OUTPUT¬´===SORRY!===‚ê§Confused‚ê§at /tmp/zF6yJeID82:1‚ê§¬ª

[12:35] <arnsholt> moritz++ # eliminating nqp_dyncall.ops warnings

[12:35] *** SamuraiJack left
[12:36] <arnsholt> That improved things *a lot*. Thanks =)

[12:36] <moritz> arnsholt: you're welcome

[12:36] <moritz> arnsholt: it seems that the C code generated from the .ops contains the code several times

[12:36] <moritz> so you see each warning about 4 times or so

[12:36] <zhutingting1> r:¬†https://gist.github.com/3096456

[12:36] <tadzik> r: my $a; $a = do if 5 > 0 { 7 } else { 4 }; say $a

[12:36] <p6eval> rakudo 1fe39c: OUTPUT¬´3‚ê§¬ª

[12:36] <p6eval> rakudo 1fe39c: OUTPUT¬´7‚ê§¬ª

[12:38] *** SamuraiJack joined
[12:38] <arnsholt> Yeah, I'm not entirely sure why, but I think it's related to type polymorphism of ops

[12:38] <moritz> aye

[12:40] *** zhutingting1 left
[12:42] *** am0c_ left
[12:42] *** zhutingting1 joined
[12:47] *** birdwindupbird left
[12:50] <kresike> bye all

[12:50] *** kresike left
[12:52] <jnthn> arnsholt: If you know an op will always be called with something in a register, not something that's a constant, you can use invar rather than in.

[12:53] *** daniel-s__ joined
[12:53] <jnthn> arnsholt: While will cut down on the generated ops.

[12:53] <jnthn> *which

[12:57] *** daniel-s left
[12:58] <moritz> so, for n 'in' params, does it generate 2**n in/invar combinations?

[12:59] *** PacoAir joined
[13:00] *** zhutingting1 left
[13:03] <jnthn> moritz: yes /o\

[13:04] <moritz> .oO( 3 in params should be enough for anybody! )

[13:05] <jnthn> 3 already gets you an '8ful number of permutations

[13:05] *** mucker left
[13:07] *** mucker joined
[13:10] <moritz> jnthn: but I guess only str/int/num are treated that way, because PMCs can't be constants anyway?

[13:10] *** spider-mario joined
[13:12] <jnthn> It applies to PMCs there

[13:12] <jnthn> *too

[13:12] <jnthn> There are constant PMCs, like Sub and LexInfo, that get persisted.

[13:12] <jnthn> "constant"

[13:13] <jnthn> But most instructions (like the ones in dyncall) never encounter these

[13:14] <moritz> ok, so I'll change the PMC args in dyncall to invar

[13:14] <jnthn> I bet nqp.ops could get some invar love too

[13:20] *** fgomez left
[13:20] <moritz> with patch: 2838 lines in the generated C file. Without: 5470

[13:21] *** fgomez joined
[13:22] <moritz> and 1284 when the patch is done right :-)

[13:23] *** JimmyZ left
[13:23] *** birdwindupbird joined
[13:24] <tadzik> wow

[13:24] <eiro_> hello everyone 

[13:24] <tadzik> hey eiro_ 

[13:24] <moritz> and that touches only the PMC in's

[13:24] <moritz> eiro/

[13:24] <jnthn> moritz++

[13:25] <moritz> r: say 5470 / 1284

[13:25] <p6eval> rakudo 1fe39c: OUTPUT¬´4.260125‚ê§¬ª

[13:26] <arnsholt> jnthn: For the time being, I'll trust your decisions on how the ops should look =)

[13:26] <dalek> nqp: c1197a5 | moritz++ | src/ops/nqp_dyncall.ops:

[13:26] <dalek> nqp: [dyncall ops] mark in PMCs as invar

[13:26] <dalek> nqp: 

[13:26] <dalek> nqp: this reduces the size of the generated C code by a factor > 4, and the PMCs

[13:26] <dalek> nqp: cannot reasonably be constants anyway

[13:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/c1197a5a4e

[13:26] <arnsholt> But I'll try to keep that in mind

[13:27] <flussence> r: say 1 ZXZXZXZXZX 2 # curious if this still has exponential slowdown

[13:27] <p6eval> rakudo 1fe39c: OUTPUT¬´1 2‚ê§¬ª

[13:27] <arnsholt> Heh. Or not ^_^

[13:27] <flussence> r: say 1 ZXZXZXZXZXZXZXZXZXZXZX 2

[13:27] <p6eval> rakudo 1fe39c: OUTPUT¬´1 2‚ê§¬ª

[13:27] <flussence> whoa

[13:27] *** skids joined
[13:28] <flussence> looks like that's been fixed :)

[13:28] <flussence> r: say 1 ZXZXZXZXZXZXZXZXZXZXZXZXZXZXZXZXZXZXZXZX 2

[13:28] <p6eval> rakudo 1fe39c: OUTPUT¬´1 2‚ê§¬ª

[13:28] <moritz> jnthn: and any in PMC that's supposed to a 6model object can't be a constant in any case, right?

[13:28] <jnthn> moritz: right

[13:30] *** JimmyZ joined
[13:31] <moritz> $ wc -l src/ops/nqp_ops.c

[13:31] <moritz> 22622 src/ops/nqp_ops.c

[13:32] <jnthn> moritz: That's what it is today, before you go hacking?

[13:33] <moritz> jnthn: correct

[13:33] <moritz> only 2.3k lines down atm :-)

[13:35] *** alvis joined
[13:36] *** cognominal left
[13:36] <arnsholt> jnthn: https://github.com/perl6/nqp/blob/master/src/ops/nqp_dyncall.ops#L567 On 569 and 570, should the arg_types[i] be & DYNCALL_ARG_TYPE_MASK, in case the FREE_STR flag is set?

[13:41] <jnthn> arnsholt: hmm. Looks like :)

[13:41] <arnsholt> Thought so. I'll fix it while I refactor the unmarshaling code

[13:42] *** whiteknight joined
[13:42] *** wknight8111 joined
[13:43] <hoelzro> is there a good shortcut for creating a Pair with a block as its value? I've been doing foo => -> $x, y { ... }

[13:43] <hoelzro> and that looks funny

[13:43] *** whiteknight is now known as Guest76595

[13:43] <tadzik> you can do :foo(-> $x, $y { ... })

[13:43] <tadzik> not that it doesn't look funny :P

[13:45] <hoelzro> tadzik: that's slightly better...

[13:45] <hoelzro> but not much =)

[13:48] *** mikemol_ joined
[13:52] *** benabik left
[13:55] <jnthn> If it's a very short block, there's always placeholders.

[13:56] <hoelzro> jnthn: hmm?

[13:56] <jnthn> The $^x things

[13:57] <jnthn> r: my $x = a => { $^x + $^y }; say $x.value().(1,2)

[13:57] <p6eval> rakudo 1fe39c: OUTPUT¬´3‚ê§¬ª

[13:59] <hoelzro> oh, right

[13:59] <moritz> r: my $x = :a{$^x + $^y}; say $x.value().(1,2)

[13:59] <p6eval> rakudo 1fe39c: OUTPUT¬´3‚ê§¬ª

[13:59] <hoelzro> I'm not sure I care for those...

[14:00] <jnthn> I only reach for them in very short blocks

[14:01] <jnthn> (like, ones that will fit on one line or so)

[14:01] <arnsholt> Hmm. The string unmarshaling code is hard to refactor

[14:01] <jnthn> I blame the guy who wrote it.

[14:01] <arnsholt> jnthn: VTABLE methods are expensive, right?

[14:02] <jnthn> arnsholt: erm....overridden ones are.

[14:02] <jnthn> (as in, PIR-overridden)

[14:02] <arnsholt> Hmm

[14:02] <arnsholt> The problem is that the string unmarshaling at present does two different things:

[14:03] <arnsholt> 1) The actual unmarshaling, and 2) tracking strings that need to be freed after the call is done

[14:04] <moritz> r: say 22622/12876

[14:04] <p6eval> rakudo 1fe39c: OUTPUT¬´1.756912‚ê§¬ª

[14:05] *** thou joined
[14:05] <arnsholt> And untangling the two means I'll likely risk adding some strings to the list that shouldn't be

[14:06] <arnsholt> But I might be able to do it properly if I tweak the logic in NativeCall.pm6

[14:08] <[Coke]> phenny: tell au please review https://github.com/perl6/Pugs.hs/commit/e743d95641939acd362b6260d7e26e067c8c12f2 especially.

[14:08] <phenny> [Coke]: I'll pass that on when au is around.

[14:10] *** kaleem left
[14:11] * [Coke] is surprised how much he can do with pugs without actually knowing any haskell. ;)

[14:11] <colomon> au++

[14:12] *** cognominal joined
[14:12] *** zhutingting joined
[14:14] <moritz> r: say 22622/9022

[14:14] <p6eval> rakudo 1fe39c: OUTPUT¬´2.507426‚ê§¬ª

[14:15] <bbkr1> r: role Plugin { method foo { say "foo" }; method bar { say "bar" } }; class A { has $.plugin handles /f/ = Plugin.new }; A.new.foo; A.new.bar

[14:15] <p6eval> rakudo 1fe39c: OUTPUT¬´foo‚ê§No such method 'bar' for invocant of type 'A'‚ê§  in block <anon> at /tmp/LJZlAkY8pG:1‚ê§‚ê§¬ª

[14:15] <bbkr1> \o/

[14:16] <bbkr1> best AUTOLOAD replacement ever :)

[14:17] *** zhutingting left
[14:18] <[Coke]> that is pretty nifty.

[14:20] <jnthn> Why is Plugin a role there, ooc? :)

[14:22] <bbkr1> because I'm superlazy. from words "class" and "role" second one is shorter and provide methods :)

[14:22] * [Coke] is pretty sure bbkr1 just blew his typing savings explaining that one

[14:23] <flussence> how would you delegate methods without defining them in the class first, say for a method call logging proxy class?

[14:23] <[Coke]> moritz++ - hey, now I get gather/take.

[14:24] *** tokuhiro_ joined
[14:25] *** MayDaniel joined
[14:26] <bbkr1> flussence: ^add_fallback( sub { True}, sub {$object, $name} { my_log($name); my_delegate($object, $name) } ) ?

[14:28] <bbkr1> sub ($object, $name) *

[14:28] <jnthn> Alternatively see the aspects stuff I demonstrated in my meta-programming talk :)

[14:29] *** fhelmberger left
[14:31] *** zhutingting joined
[14:32] *** sudokode joined
[14:33] *** birdwindupbird left
[14:34] <moritz> [Coke]: :-)

[14:36] *** GlitchMr42 joined
[14:36] *** GlitchMr left
[14:36] <arnsholt> It's at times like this I wish C had values() for returning stuff

[14:37] *** GlitchMr42 is now known as GlitchMr

[14:45] *** wtw left
[14:46] *** benabik joined
[14:46] <arnsholt> Screw it. Output parameters it is

[14:50] *** prettyrobots joined
[15:00] <jnthn> decommute &

[15:05] *** JimmyZ left
[15:08] *** JimmyZ joined
[15:08] *** alester joined
[15:20] *** mikemol_ left
[15:23] *** JimmyZ left
[15:23] *** thelazydeveloper joined
[15:25] <[Coke]> jnthn: how can you be home already! I have not even had 2 cups of coffe yet!

[15:28] * [Coke] fixes that!

[15:28] * diakopter commutes, mostly to find coffee

[15:29] <masak> coffee: the reason to go to work.

[15:30] <sjohnson> heh

[15:30] <sjohnson> beer: the reason to home after work

[15:30] *** tokuhiro_ left
[15:31] *** tokuhiro_ joined
[15:31] <[Coke]> sjohnson++ 

[15:35] *** tokuhiro_ left
[15:36] <masak> yes, it's the natural coffee-beer cycle of the work day.

[15:38] <[Coke]> mmmhehehe.

[15:39] * colomon drinks neither coffee nor beer.

[15:39] <[Coke]> ‡≤†_‡≤†

[15:40] <[Coke]> . o O (just kidding. I love that emoticon, though. ;)

[15:40] <masak> .u ‡≤†

[15:41] <phenny> U+0CA0 KANNADA LETTER TTHA (‡≤†)

[15:41] <masak> that is a lovely script.

[15:41] <masak> so cute!

[15:42] *** kurahaupo left
[15:42] <daxim> masak, http://p3rl.org/Acme::Emoticarp

[15:43] <hoelzro> =)

[15:43] <hoelzro> I like how that's my most popular module

[15:43] <hoelzro> =/

[15:43] <masak> heh.

[15:43] <masak> hoelzro++

[15:45] <flussence> .u a5af

[15:45] <phenny> U+A5AF VAI SYLLABLE ZHU (ÍñØ)

[15:45] <flussence> here, have a rabbit

[15:48] <au> .u ‡≥´Ãé 

[15:48] <phenny> U+0CEB KANNADA DIGIT FIVE (‡≥´)

[15:48] <phenny> U+030E COMBINING DOUBLE VERTICAL LINE ABOVE (‚óåÃé)

[15:48] <phenny> U+0020 SPACE ( )

[15:48] <phenny> au: 14:08Z <[Coke]> tell au please review https://github.com/perl6/Pugs.hs/commit/e743d95641939acd362b6260d7e26e067c8c12f2 especially.

[15:48] * jnthn home

[15:48] <jnthn> [Coke]: Timezones! :)

[15:50] <jnthn> [Coke]: Clearly European timezones are awesome because we get to go home from work earlier. :)

[15:52] *** hoelzro is now known as hoelzro|away

[15:54] *** sergot1 joined
[15:55] *** thou left
[15:55] *** sergot left
[15:58] *** kurahaupo joined
[16:00] *** sergot1 is now known as sergot

[16:08] *** Coleoid joined
[16:20] *** zby_home_ joined
[16:22] <arnsholt> r: sub x(&cb(int --> int)); say &x.signature.params[0].^methods;

[16:22] <p6eval> rakudo 1fe39c: OUTPUT¬´===SORRY!===‚ê§Missing block‚ê§at /tmp/tTPx7i9mQB:1‚ê§¬ª

[16:23] <arnsholt> r: sub x(&cb(int --> int)) { * }; say &x.signature.params[0].^methods;

[16:23] <p6eval> rakudo 1fe39c: OUTPUT¬´No such method 'gist' for invocant of type 'Sub'‚ê§  in method gist at src/gen/CORE.setting:4604‚ê§  in sub say at src/gen/CORE.setting:6980‚ê§  in block <anon> at /tmp/gX4Sdf15TT:1‚ê§‚ê§¬ª

[16:24] <arnsholt> r: sub x(&cb(int --> int)) { * }; say &x.signature.params[0].type.^methods;

[16:24] <p6eval> rakudo 1fe39c: OUTPUT¬´of returns‚ê§¬ª

[16:24] <arnsholt> r: sub x(&cb(int --> int)) { * }; say &x.signature.params[0].type.returns;

[16:24] <p6eval> rakudo 1fe39c: OUTPUT¬´Mu()‚ê§¬ª

[16:24] <arnsholt> r: sub x(&cb(int --> int)) { * }; say &x.signature.params[0].type.of;

[16:24] <p6eval> rakudo 1fe39c: OUTPUT¬´Mu()‚ê§¬ª

[16:25] <arnsholt> Bah.

[16:26] <arnsholt> jnthn: Any suggestions on how to get the callback's signature?

[16:27] <jnthn> r: say Parameter.^methods

[16:27] <p6eval> rakudo 1fe39c: OUTPUT¬´No such method 'gist' for invocant of type 'Sub'‚ê§  in method gist at src/gen/CORE.setting:4604‚ê§  in sub say at src/gen/CORE.setting:6980‚ê§  in block <anon> at /tmp/Xtt87AzM5O:1‚ê§‚ê§¬ª

[16:27] <jnthn> grr

[16:27] <jnthn> r: say Parameter.^method_table.keys

[16:27] <p6eval> rakudo 1fe39c: OUTPUT¬´Unmarshallable foreign language value passed for parameter '$value'‚ê§  in method new at src/gen/CORE.setting:5873‚ê§  in block <anon> at src/gen/CORE.setting:5998‚ê§  in sub coro at src/gen/CORE.setting:5202‚ê§  in method reify at src/gen/CORE.setting:5183‚ê§  in method rei‚Ä¶

[16:27] <jnthn> wow

[16:27] <jnthn> :/

[16:28] <jnthn> r: sub foo(&cb(int, num)) { }; say &foo.signature.params[0].signature

[16:28] <p6eval> rakudo 1fe39c: OUTPUT¬´No such method 'signature' for invocant of type 'Parameter'‚ê§  in block <anon> at /tmp/ylhDtFu9Be:1‚ê§‚ê§¬ª

[16:28] <jnthn> r: sub foo(&cb(int, num)) { }; say &foo.signature.params[0].subsignature

[16:28] <p6eval> rakudo 1fe39c: OUTPUT¬´No such method 'subsignature' for invocant of type 'Parameter'‚ê§  in block <anon> at /tmp/KzFr63qpay:1‚ê§‚ê§¬ª

[16:28] <jnthn> r: sub foo(&cb(int, num)) { }; say &foo.signature.params[0].sub_signature

[16:28] <p6eval> rakudo 1fe39c: OUTPUT¬´No such method 'sub_signature' for invocant of type 'Parameter'‚ê§  in block <anon> at /tmp/2dPxttCZty:1‚ê§‚ê§¬ª

[16:28] <jnthn> bah, I'll go look at the code :)

[16:28] *** MayDaniel left
[16:28] * masak .oO( what if you wrote an API so inscrutable that not even you could remember it? ) :P

[16:28] <jnthn> D'oh. We don't actually have a method that exposes it...

[16:29] <arnsholt> Oh. That explains it =)

[16:29] <moritz> I think you can find it via the constraints

[16:29] <moritz> I made an example the other day

[16:30] <moritz> r: sub foo(&cb(int, num)) { }; say&foo.signature.params[0].constraint_list.perl

[16:30] <p6eval> rakudo 1fe39c: OUTPUT¬´===SORRY!===‚ê§CHECK FAILED:‚ê§Calling 'foo' will never work with no arguments (line 1)‚ê§    Expected: :(&cb :(int , num ))‚ê§¬ª

[16:30] <moritz> r: sub foo(&cb(int, num)) { }; say &foo.signature.params[0].constraint_list.perl

[16:30] <p6eval> rakudo 1fe39c: OUTPUT¬´()‚ê§¬ª

[16:31] <moritz> r: sub foo(&cb(Int, Num)) { }; say &foo.signature.params[0].constraint_list.perl

[16:31] <p6eval> rakudo 1fe39c: OUTPUT¬´()‚ê§¬ª

[16:31] <moritz> hm :(

[16:34] *** ANI joined
[16:35] <ANI> ASL

[16:35] <jnthn> I don't think it lives in the constraints.

[16:35] <ANI> WHAT DO U MEAN

[16:36] <masak> ANI: hi there. welcome to #perl6.

[16:36] <masak> ANI: this might be the first time ever someone has done "ASL" in here. we're not so used to it :)

[16:36] <masak> ANI: but please, stick around. pull up a chair and make yourself comfortable.

[16:36] <jnthn> It's a type of net connection, right? Oh, wait, that's ADSL... :)

[16:36] <tadzik> Asymetric Subscriber Line

[16:37] <masak> ANI: I'm sure people will tell you their age, sex, and location in due time :)

[16:37] <tadzik> supposedly it's analog

[16:37] *** godfrey999 left
[16:37] <masak> ANI: if you could switch to lowercase, I think that would be widely appreciated, too ;)

[16:37] <masak> well, except for the work "I", which is fine uppercase.

[16:37] <masak> word*

[16:39] <ANI> I HAVE JUST DOWNLODED THIS PROGRAM U WANT TO CHAT OR NOT 

[16:39] <masak> everyone: time to kick?

[16:39] <ANI> BUY

[16:40] <masak> o/

[16:40] *** ANI left
[16:40] <masak> come back anytime.

[16:40] <jnthn> SELL!!!!

[16:40] <huf> what a strange person.

[16:40] <masak> nah; just young.

[16:40] <masak> and inflexible.

[16:40] <tadzik> heh

[16:41] <tadzik> I was in the middle of writing "67, male, Wyoming. What are you wearing?" when masak came about :)

[16:41] <masak> hah

[16:41] <huf> tadzik: what about your robe and wizard hat?

[16:42] <tadzik> huf: I saved that for dessert

[16:43] <huf> om nom i've always loved the taste of textiles

[16:46] <daxim> tadzik, http://pbfcomics.com/archive_b/PBF145-Nunez.jpg

[16:46] <tadzik> :P

[16:51] *** daxim left
[16:55] *** bbkr1 left
[16:57] <tadzik> did someone break rakudobuild recently?

[16:58] <moritz> I hope not :-)

[17:02] <tadzik> well, I have some bad news :)

[17:02] <dalek> nqp: 344b6ca | moritz++ | src/ops/nqp.ops:

[17:02] <dalek> nqp: [nqp ops] invar annotations

[17:02] <dalek> nqp: 

[17:02] <dalek> nqp: reduces size of generated C code by a factor 2.5

[17:02] <dalek> nqp: review: https://github.com/perl6/nqp/commit/344b6ca24f

[17:02] <tadzik> moritz: do you happen to have removed some #include in the process?

[17:03] <tadzik> https://gist.github.com/3137480

[17:05] <jnthn> MutableVAR?

[17:06] <jnthn> wtf, we don't even have that PMC in Rakudo today

[17:06] <jnthn> tadzik: Which branch/commit are you on? :)

[17:06] *** dakkar left
[17:06] <tadzik> jnthn: master, HEAD, master, HEAD

[17:07] <tadzik> oh, wait

[17:07] <tadzik> mast...argh

[17:07] <jnthn> You still have a master branch locally to check out? :)

[17:07] <tadzik> apparently

[17:10] *** Bzek joined
[17:14] *** GlitchMr left
[17:15] *** Coleoid left
[17:16] *** Telgalizer joined
[17:16] *** fgomez left
[17:16] *** fgomez joined
[17:16] *** fgomez left
[17:17] *** GlitchMr joined
[17:17] *** fgomez joined
[17:18] *** Telgalizer left
[17:19] *** GlitchMr left
[17:22] *** wknight8111 left
[17:23] <dalek> panda/offline-bootstrap: 2167d8b | tadzik++ | bin/panda:

[17:23] <dalek> panda/offline-bootstrap: Fix installing into the default location

[17:23] <dalek> panda/offline-bootstrap: review: https://github.com/tadzik/panda/commit/2167d8b82b

[17:23] *** Guest76595 left
[17:24] *** supernovus joined
[17:24] <supernovus> Good * #perl6

[17:26] <tadzik> hello supernovus 

[17:26] *** GlitchMr joined
[17:27] <tadzik> panda install ufo  6.01s

[17:27] <tadzik> acceptable :)

[17:28] <supernovus> Just testing the rewrite of the build-project-list.pl, when it successfully builds an index.html and proto.json I'll commit the changes.

[17:28] <tadzik> did you rewrite it into Perl 6?

[17:28] <supernovus> tadzik: No. It's still in Perl 5. As far as I know, there are no SSL/https libraries for Perl 6 yet (or am I mistaken?)

[17:29] <tadzik> there is no that I know of

[17:29] <tadzik> but that's funny, since me and sergot are just crancking out a Perl 6 version of this anyway :P

[17:31] <supernovus> Ah. I'd love to tackle it and to port its template from HTML::Template to Template6 while I was at it, but with no SSL support, the GitHub API is unaccessable. 

[17:33] <dalek> modules.perl6.org: e0df403 | (Timothy Totten)++ | / (7 files):

[17:33] <dalek> modules.perl6.org: Rewrote build-project-list.pl. It uses the Github v3 API now.

[17:33] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/e0df403aff

[17:37] <supernovus> I guess it could be done very easily in Perl 6, if we assume its only being run on a Linux machine, with access to say "curl" or "wget" and use an external download tool (possibly with a friendly wrapper library to make common things "just work")

[17:38] *** GlitchMr left
[17:39] *** MayDaniel joined
[17:39] *** GlitchMr joined
[17:41] <arnsholt> jnthn: How hard would it be to expose the callback signatures to Perl code, d'you think?

[17:42] <arnsholt> Mostly a question of Rakudo hacking, or more invasive surgery?

[17:42] <jnthn> arnsholt: Oh, sorry...shoulda said. It's just an accessor method I think.

[17:43] <arnsholt> Ah, spiffy!

[17:44] <jnthn> arnsholt: The attribute it's in is $!sub_signature

[17:44] <[Coke]> libcurl!

[17:45] <jnthn> arnsholt: So if you add an introspection method to Parameter.pm, you should be good to go.

[17:45] <jnthn> S06 doesn't seem to have a name for it.

[17:45] <sorear> good * #perl6

[17:45] <arnsholt> jnthn: Cheers!

[17:45] <masak> sorear! \o/

[17:45] <jnthn> oh, it does

[17:45] <jnthn> .signature

[17:45] <jnthn> o/ sorear 

[17:45] <arnsholt> .signature perhaps, for symmetry with Routine?

[17:45] <arnsholt> Right. We're in agreement =)

[17:45] <masak> seems as good a name as any to me :)

[17:46] <jnthn> Well

[17:46] <jnthn> It does have a problem.

[17:46] <jnthn> It's ambiguous with "the signature I was declared in"

[17:46] <jnthn> (but we don't actually store a backlink like that at the moment)

[17:46] <jnthn> Anyway, s06 says

[17:47] <jnthn> signature      A nested signature to bind the argument against

[17:47] <jnthn> So let's go with that.

[17:47] <arnsholt> Sounds good to me

[17:48] <jnthn> .oO( hmm, I wonder if I wrote this bit of S06... )

[17:49] <tadzik> r: for <> -> $a { $_.a }

[17:49] <p6eval> rakudo 1fe39c: OUTPUT¬´===SORRY!===‚ê§Unsupported use of <>;  in Perl 6 please use lines() to read input, ('') to represent a null string or () to represent an empty list‚ê§at /tmp/b8jCsiB1ve:1‚ê§¬ª

[17:49] <tadzik> r: for <a> -> $a { $_.a }

[17:49] <p6eval> rakudo 1fe39c: OUTPUT¬´No such method 'a' for invocant of type 'Any'‚ê§  in block <anon> at /tmp/bAFOgPXfEi:1‚ê§‚ê§¬ª

[17:49] <tadzik> oh hm

[17:49] <tadzik> somehow I managed to get NPA locally this way, and was hoping to participate in the "shortest code producing NPA" contest

[17:49] <supernovus> Well, looks like the custom logos are back, as well as most of the badges other than the "fresh" badge. I must have missed something.

[17:50] <tadzik> supernovus++

[17:50] *** zhutingting left
[17:51] <tadzik> r: for <a> -> $a { eval "$_.a" }

[17:51] <p6eval> rakudo 1fe39c: OUTPUT¬´use of uninitialized value of type Any in string context  in block <anon> at /tmp/aeE03WseCe:1‚ê§‚ê§No such method 'a' for invocant of type 'Any'‚ê§  in block <anon> at eval_0:1‚ê§  in <anon> at eval_0:1‚ê§  in sub eval at src/gen/CORE.setting:486‚ê§  in block <anon> at /tmp/a‚Ä¶

[17:51] <tadzik> dang

[17:51] <tadzik> r: my $a = sub { for @^a -> $a { eval "$_.a" } }; $a.(<a>)

[17:51] <p6eval> rakudo 1fe39c: OUTPUT¬´use of uninitialized value of type Any in string context  in sub <anon> at /tmp/PaSnvoHzh6:1‚ê§‚ê§No such method 'a' for invocant of type 'Any'‚ê§  in block <anon> at eval_0:1‚ê§  in <anon> at eval_0:1‚ê§  in sub eval at src/gen/CORE.setting:486‚ê§  in sub <anon> at /tmp/PaSnv‚Ä¶

[17:51] <tadzik> ok, I give up

[17:51] *** mucker left
[17:52] <dalek> modules.perl6.org: 3a3e5f8 | (Timothy Totten)++ | web/lib/P6Project/Hosts/Github.pm:

[17:52] <dalek> modules.perl6.org: Whoops, missed that.

[17:52] <dalek> modules.perl6.org: review: https://github.com/perl6/modules.perl6.org/commit/3a3e5f8d33

[17:53] *** MayDaniel left
[17:54] *** am0c_ joined
[17:58] <[Coke]> p: eval 'print $]' :lang<perl5>

[17:58] <p6eval> pugs: OUTPUT¬´Error eval perl5: "sub { use ops (':default', 'binmode', 'entereval');my ($lang, $code) = @_;print $]‚ê§}"‚ê§*** 'print' trapped by operation mask at (eval 2) line 2.‚ê§‚ê§Can't locate object method "" via package "perl5" (perhaps you forgot to load "perl5"?).‚ê§¬ª

[17:58] <[Coke]> p: eval '$]' :lang<perl5>

[17:58] <p6eval> pugs:  ( no output )

[17:58] <[Coke]> p: say (eval '$]' :lang<perl5>)

[17:58] <p6eval> pugs: OUTPUT¬´5.014002‚ê§¬ª

[18:00] <[Coke]> au++

[18:02] <tadzik> who

[18:05] <[Coke]> how

[18:05] <tadzik> wow

[18:08] *** nodmonkey joined
[18:09] <[Coke]> oww.

[18:09] *** zby_home_ left
[18:10] *** zby_home_ joined
[18:11] *** seldon joined
[18:12] <tadzik> r: "gitfoo".subst(/^git/, 'http')

[18:12] <p6eval> rakudo 1fe39c:  ( no output )

[18:12] <tadzik> r: "gitfoo".substr(/^git/, 'http')

[18:12] <p6eval> rakudo 1fe39c: OUTPUT¬´No such method '!cursor_start' for invocant of type 'Int'‚ê§  in regex <anon> at /tmp/7_jQ9z05cg:1‚ê§  in method substr at src/gen/CORE.setting:3512‚ê§  in block <anon> at /tmp/7_jQ9z05cg:1‚ê§‚ê§¬ª

[18:12] <tadzik> LTA error message

[18:12] <colomon> n: "gitfoo".substr(/^git/, 'http')

[18:12] <p6eval> niecza v19-13-g442e075: OUTPUT¬´Unhandled exception: System.InvalidCastException: Cannot cast from source type to destination type.‚ê§  at Anon.1.Run.MAIN.C1ANON (Niecza.Frame ) [0x00000] in <filename unknown>:0 ‚ê§  at Niecza.Kernel.RunCore (Niecza.Frame& cur) [0x00000] in <filename unknown‚Ä¶

[18:13] <[Coke]> p: "gitfoo".substr(/^git/, 'http')

[18:13] <p6eval> pugs: OUTPUT¬´*** Cannot cast from VRule (MkRulePGE {rxRule = "^git", rxGlobal = False, rxStringify = False, rxAdverbs = VUndef}) to Double (VNum)‚ê§    at /tmp/nMjdz4fYuW line 1, column 1 - line 2, column 1‚ê§¬ª

[18:13] <[Coke]> I win! ;)

[18:14] <tadzik> haha :)

[18:19] <masak> "LTAest error"

[18:20] <supernovus> And, after a refresh, modules.perl6.org has the "fresh" badge again. So, everything seems to be good.

[18:22] <tadzik> yay!

[18:23] *** fgomez left
[18:23] *** fgomez joined
[18:23] <GlitchMr> eval: say 1, 2, 3, 4 ¬ª!%%¬ª 2

[18:23] <buubot_backup> GlitchMr: ERROR: Unrecognized character \x{bb}; marked by <-- HERE after , 2, 3, 4 <-- HERE near column 54 at (eval 20) line 1. 

[18:23] <[Coke]> supernovus++

[18:24] <GlitchMr> I guess that means I have to somehow configure my IRC client to send Unicode

[18:24] <masak> supernovus++

[18:24] <GlitchMr> I know that my terminal supports Unicode, but I think that IRC client sends this as ISO-8859-1 for some reason

[18:24] <GlitchMr> eval: say 1, 2, 3, 4 ¬ª!%%¬ª 2 # ≈Ç

[18:24] <buubot_backup> GlitchMr: ERROR: Unrecognized character \x{bb}; marked by <-- HERE after , 2, 3, 4 <-- HERE near column 54 at (eval 20) line 1. 

[18:24] <GlitchMr> huh?

[18:26] <GlitchMr> eval: say 1, 2, 3, 4 ¬ª!%%¬ª 2

[18:26] <buubot_backup> GlitchMr: ERROR: Unrecognized character \x{bb}; marked by <-- HERE after , 2, 3, 4 <-- HERE near column 54 at (eval 20) line 1. 

[18:26] <GlitchMr> ...

[18:26] <tadzik> http://tjs.azalayah.net/foo.html generated with Perl 6 :)

[18:26] <tadzik> sergot++

[18:27] <masak> GlitchMr: when you say '...', the rest of us have to guess at why you are confused. it's less than helpful of you.

[18:27] <sergot> \o/

[18:27] <masak> GlitchMr: this looks like an encoding issue to me. I mean besides the fact that you're calling Perl 5, not Perl 6.

[18:28] <masak> sergot++

[18:29] *** snearch joined
[18:30] *** Bzek left
[18:32] <GlitchMr> perl6: eval: say 1, 2, 3, 4 ¬ª!%%¬ª 2

[18:32] <p6eval> rakudo 1fe39c: OUTPUT¬´===SORRY!===‚ê§Confused‚ê§at /tmp/uE1qdXvzgt:1‚ê§¬ª

[18:32] <p6eval> ..niecza v19-13-g442e075: OUTPUT¬´123False‚ê§¬ª

[18:32] <GlitchMr> perl6: eval: say (1, 2, 3, 4) ¬ª!%%¬ª 2

[18:32] <p6eval> niecza v19-13-g442e075: OUTPUT¬´True False True False‚ê§¬ª

[18:32] <p6eval> ..rakudo 1fe39c: OUTPUT¬´===SORRY!===‚ê§Confused‚ê§at /tmp/LdXKvN7IBL:1‚ê§¬ª

[18:32] <GlitchMr> perl6: say (1, 2, 3, 4) ¬ª!%%¬ª 2

[18:32] <p6eval> rakudo 1fe39c, niecza v19-13-g442e075: OUTPUT¬´True False True False‚ê§¬ª

[18:33] <GlitchMr> ok :)

[18:34] *** MayDaniel joined
[18:34] <[Coke]> GlitchMr: ...

[18:39] <supernovus> tadzik++

[18:40] <supernovus> Is the code for the Perl 6 version on github yet?

[18:40] <supernovus> sergot++

[18:41] <GlitchMr> Just wondering, how can I install panda?

[18:41] <GlitchMr> Oh, I see

[18:42] *** vmspb joined
[18:43] *** BinGOs left
[18:44] *** BinGOs joined
[18:46] *** SHODAN joined
[18:51] * arnsholt spectests

[18:54] *** thou joined
[18:58] *** supernovus left
[19:01] *** thou left
[19:09] *** GlitchMr left
[19:17] *** adu left
[19:22] *** snearch left
[19:25] *** nodmonkey_ joined
[19:26] *** atrodo_ joined
[19:26] *** kcwu_ joined
[19:26] *** atrodo_ left
[19:26] *** mauke left
[19:27] *** mauke joined
[19:27] *** arnsholt_ joined
[19:28] *** xdbr__ joined
[19:28] *** shachaf_ joined
[19:28] *** snearch joined
[19:29] *** Timbus|Away joined
[19:29] *** awwaiid_ joined
[19:29] *** BooK_ joined
[19:29] *** Util_ joined
[19:29] *** sorear_ joined
[19:29] *** snarkyboojum_ joined
[19:29] *** ranguard_ joined
[19:29] *** estrai_ joined
[19:29] *** huf_ joined
[19:29] *** sirrober1 joined
[19:30] *** sorear left
[19:30] *** sorear_ is now known as sorear

[19:34] *** nodmonkey left
[19:34] *** snarkyboojum left
[19:34] *** awwaiid left
[19:34] *** sirrobert left
[19:34] *** atrodo left
[19:34] *** Timbus left
[19:34] *** dbr left
[19:34] *** jevin left
[19:34] *** FireFly left
[19:34] *** huf left
[19:34] *** kcwu left
[19:34] *** shachaf left
[19:34] *** Timbus|Away is now known as Timbus

[19:34] *** nodmonkey_ is now known as nodmonkey

[19:34] *** jevin_ joined
[19:35] *** zb joined
[19:35] *** atrodo joined
[19:36] <[Coke]> +# 07/18/2012 - rakudo++ (22932); niecza (89.77%); pugs (40.01%)

[19:36] <[Coke]> +# 07/18/2012 - rakudo++ (22932); niecza (89.77%); pugs (40.01%)

[19:37] <[Coke]> whoops.

[19:38] <jnthn> ooh, pugs edges over 40% again! :)

[19:39] <masak> \o/

[19:40] <[Coke]> pugs was up at 44.63% at one point.

[19:40] <[Coke]> for 3 days back in April. ;)

[19:40] *** Effilry joined
[19:41] <[Coke]> ... but for those 3 days we were going against niecza, rakudo was borked. ;)

[19:42] <sorear> :D

[19:46] *** am0c_ left
[19:46] *** buubot_backup joined
[19:46] *** am0c_ joined
[19:52] *** fhelmberger joined
[19:55] *** patspam_ is now known as patspam

[19:57] *** snearch left
[19:57] *** fhelmberger left
[19:57] *** thou joined
[20:02] *** SamuraiJack left
[20:03] *** am0c_ left
[20:05] *** fhelmberger joined
[20:06] <masak> lol, I blogged! http://strangelyconsistent.org/blog/talking-to-my-14yo-self

[20:06] <masak> and it's not today's July post, which is forthcoming.

[20:06] <[Coke]> with some surgical help from au, we can probably get to 50% in a few days.

[20:06] <masak> [Coke]: I think so too.

[20:06] <masak> the 60% and 70% will be progressively harder, though.

[20:07] <[Coke]> yes.

[20:08] *** am0c_ joined
[20:08] *** nodmonkey left
[20:10] <skids> r: my $f = 1; my $g; $g := do { my $h = $OUTER::f; my $i = { "$h/$f/$OUTER::f".say; } }; $f = 2; $g(); $f.say;

[20:10] <p6eval> rakudo 1fe39c: OUTPUT¬´use of uninitialized value of type Any in string context  in block <anon> at /tmp/oifgHPCacV:1‚ê§‚ê§1/2/‚ê§2‚ê§¬ª

[20:10] <mathw> masak: good blog post

[20:12] <skids> r: my $f = 1; my $g;  $g := do { my $f = $OUTER::f; my $i = { "$f $OUTER::f".say; } }; $f = 2; $g(); $f.say;

[20:12] <p6eval> rakudo 1fe39c: OUTPUT¬´1 1‚ê§2‚ê§¬ª

[20:13] *** crab2313 joined
[20:13] <masak> mathw: oh, good, someone liked it. I was wondering whether it'd be interesting at all for someone except the intended recipient. :)

[20:15] <masak> one thing that I would have added in retrospect is "Learn English. It's probably the most useful non-programming subject you can study. Not all good programmers know English really well, but all great ones I know do."

[20:16] <mathw> I tend to regret that situation

[20:16] <mathw> it's to my advantage, since it's my native language, but it also removes my incentives to get truly fluent in anything else

[20:17] *** birdwindupbird joined
[20:17] <mathw> I think you give fairly good advice though

[20:17] <mathw> not the same as I would, but that's to be expected

[20:20] <masak> :)

[20:20] <masak> I'm curious to hear about the significant differences.

[20:20] <masak> if you care to tell them.

[20:21] <mathw> Well

[20:21] <mathw> I tend to emphasise that if you want to make a career out of it it helps a lot if you embrace the idea of learning continuously

[20:22] <mathw> Revel in it, love it, seek out new stuff and you'll always be on the cutting edge. Which is great for your code and your job prospects.

[20:23] *** fhelmberger left
[20:23] <mathw> My take on languages is that you have to know several kinds of language

[20:23] <mathw> A bit like you say, but my kinds are different

[20:23] *** arnsholt_ is now known as arnsholt

[20:25] <mathw> I think in terms of... hmm. Ordinary languages, pure languages and nasty languages

[20:25] <[Coke]> jnthn: ah. this is the most # of spec tests pugs has passed, though, at 9177

[20:27] <mathw> there are overlaps. I'd place Java in 'ordinary' but it's so relentlessly ordinary it's also kind of nasty. It's all very subjective, really, but I'll share your advice that you should learn several languages from different groups

[20:27] <masak> :)

[20:28] <mathw> I'd always recommend learning at least one which is as far away from the ones you already know as possible

[20:28] <masak> hm, I've never needed to be told to learn continuously. it's just become increasingly apparent to me how important that is.

[20:28] <mathw> if you learn Java, go learn Haskell or Scheme or Prolog (or all three)

[20:28] <masak> I know it's not obvious to most, or people wouldn't be so afraid of learning stuff.

[20:28] <mathw> yeah it's not obvious, but it is to people like us

[20:28] <mathw> I doubt you'd find anybody in here who'd be surprised by that

[20:29] <mathw> but we're a tad self-selecting

[20:29] *** shachaf_ is now known as shachaf

[20:29] <sirrober1> learning to learn embraces the "meta-" of life.  It's where depth and breadth come from.

[20:29] *** shachaf left
[20:29] *** shachaf joined
[20:29] * masak .oO( I HAVE JUST DOWNLODED THIS PROGRAM U WANT TO CHAT OR NOT )

[20:29] *** whiteknight joined
[20:30] *** whiteknight is now known as Guest78123

[20:30] * flussence sees that and flinches slightly

[20:34] <mathw> argh my eyes

[20:34] <sirrober1> in general is:  $foo = Mu;   the recommended way to undefine something generically?

[20:34] <masak> sirrober1: or Any. or Str. or whatever is the type of $foo.

[20:35] *** kaare_ left
[20:35] <masak> r: my $foo; say $foo.^name

[20:35] <p6eval> rakudo 1fe39c: OUTPUT¬´Any‚ê§¬ª

[20:35] <sirrober1> masak: ok, thanks

[20:35] *** sirrober1 is now known as sirrobert

[20:37] *** crab2313 left
[20:37] *** crab2313 joined
[20:40] *** seldon left
[20:41] *** patspam left
[20:41] *** patspam joined
[20:41] *** seldon joined
[20:42] *** Bzek joined
[20:43] *** patspam left
[20:44] *** patspam joined
[20:46] *** lue joined
[20:46] <lue> Hello world o/

[20:47] <masak> lue! \o/

[20:47] <sorear> hellue! \o/

[20:48] *** prettyrobots left
[20:50] *** prettyrobots joined
[20:51] <lue> (It seems using a pregenerated CORE.setting.pir (actually the .pbc result) doesn't work, although I didn't use the same commits of parrot...)

[20:52] <benabik> lue: .pbc files are more sensitive to Parrot version and architecture changes.  .pir files should be independent.

[20:53] <lue> Hm. Perhaps I should try modifying the Makefile so that making CORE.setting.pir and CORE.setting.pbc are separate targets (because just the .pir cause make to try to make the .pir anyway)

[20:53] <lue> s/cause/causes/

[20:58] <moritz> r: say Date.today.day-of-week

[20:58] <p6eval> rakudo 1fe39c: OUTPUT¬´3‚ê§¬ª

[20:59] <moritz> r: say (2012..2017 X 1..12).map(-> $y, $m { Date.new($y, $m, 13) }).grep(*.day-of-week == 5)

[20:59] <p6eval> rakudo 1fe39c: OUTPUT¬´2012-01-13 2012-04-13 2012-07-13 2013-09-13 2013-12-13 2014-06-13 2015-02-13 2015-03-13 2015-11-13 2016-05-13 2017-01-13 2017-10-13‚ê§¬ª

[20:59] <mathw> nice

[20:59] <masak> :)

[20:59] <masak> moritz++

[21:00] <mathw> love the default stringification too

[21:00] <masak> you're welcome.

[21:00] <masak> oh wait, Date was entirely moritz++' fault :)

[21:00] <moritz> http://blogs.perl.org/users/sawyer_x/2012/07/yet-another-friday-the-13th.html#comment-175266

[21:00] <masak> FIXED IN PERL 6! :P

[21:00] <moritz> well, I stole 99% of it from Date::Simple

[21:01] <mathw> dates are hard

[21:01] <mathw> why re-invent it

[21:01] <mathw> :)

[21:01] * masak .oO( second dates are often easier )

[21:01] <mathw> I would not want to write a date handling library

[21:01] <mathw> masak: yes, but I'm currently having trouble with the sixth one

[21:01] <masak> I've never been on a sixth date.

[21:02] <mathw> I have

[21:02] <mathw> with someone else, obviously

[21:02] *** Effilry left
[21:02] *** Effilry joined
[21:02] *** Effilry is now known as FireFly

[21:02] <mathw> else I would instead be having trouble with the 6+nth date

[21:03] <masak> :)

[21:03] <masak> are you currently on the sixth date? if so, *not IRC-ing* might be a pro tip :P

[21:03] <masak> duh!

[21:03] <mathw> I am not currently on the sixth date

[21:03] <masak> oh, ok :)

[21:04] * [Coke] has only ever been on one sixth date.

[21:06] * mathw is now 'debating' the relative readability of the friday the 13th code in Perl 6 compared to doing it in C#

[21:06] *** skids left
[21:06] <mathw> but I think it's not going anywhere because he's one of these people who assumes it's more readable when it's in a language he knows

[21:07] <mathw> and also that readability is objective

[21:08] <masak> if it's readable *for you*, then that's still a positive trait of the language and the piece of code.

[21:09] <moritz> you can write it with nested loops in p6 too

[21:09] <mathw> moritz: we were discussing doing it with LINQ

[21:09] <moritz> and I refrained from using the series operator :-)

[21:09] <mathw> which the Perl 6 code definitely resembles, apart from the easier cartesian product and range operators, and the lighter anonymous function syntax

[21:10] <masak> when I see that problem, my first thought is "sequence intersection". maybe it's just me.

[21:10] <mathw> spoke like a true lazy list programmer :)

[21:10] <masak> I want to write it as `@fridays ‚à© @thirteens`

[21:11] <mathw> ah well, I think the debate is now over as he's gone back to enthusing about the puppy he's getting on saturday :)

[21:11] <masak> puppy! <3

[21:11] <moritz> n: say Date.today

[21:11] <p6eval> niecza v19-13-g442e075: OUTPUT¬´===SORRY!===‚ê§‚ê§Undeclared name:‚ê§        'Date' used at line 1‚ê§‚ê§Unhandled exception: Check failed‚ê§‚ê§  at /home/p6eval/niecza/boot/lib/CORE.setting line 1402 (die @ 5) ‚ê§  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 37) ‚ê§  at /home/p‚Ä¶

[21:11] <moritz> r: say Set.new(1, 2) ‚à© Set.new(2, 3)

[21:11] <p6eval> rakudo 1fe39c: OUTPUT¬´===SORRY!===‚ê§Confused‚ê§at /tmp/_EOfphv1n2:1‚ê§¬ª

[21:12] <masak> :(

[21:12] <masak> those ops are not defined in Rakudo, methinks.

[21:12] <moritz> aye :(

[21:13] <lue> They're not even specced, IIRC

[21:13] <mathw> use Set::Operators;

[21:13] <sorear> masak: if you need 9 lines of Perl and 10 minutes to find fri 13's in the next few years, you're doing it wrong.  or n in $(seq 1 2000); do date -d "$n days"; done | grep 'Fri ... 13'

[21:14] <mathw> masak: the puppy is a chocolate brown cocker spaniel. I saw a picture. Very cute.

[21:14] <masak> sorear: indeed.

[21:14] <mathw> there are many ways to do it

[21:14] *** birdwindupbird left
[21:14] <masak> sorear: have you seen the review of some literal code Knuth wrote with the same conclusion?

[21:14] <mathw> clearly the only perfect solution is in SQL :)

[21:14] <flussence> please steal my code and make it work :) https://github.com/flussence/Mathematical-Operators

[21:14] * mathw -> bed

[21:15] <masak> sorear: basically "this is very nice, but, um, <unix command | other unix command>"

[21:16] <sorear> also, it seems ot not be widely known that in Bourne shells you can use for loops in pipelines

[21:16] <sorear> masak: context: your blog got linked on #sandiego.pm

[21:17] <masak> my blog?

[21:17] <masak> I think I lost context by learning that :)

[21:18] <masak> what does my blog have to do with Friday the 13th?

[21:18] <sorear> http://strangelyconsistent.org/blog/talking-to-my-14yo-self

[21:19] <masak> ok, nice.

[21:19] <sorear> masak: was this thing a Knuthreview or a review of Knuthcode

[21:19] <masak> it was a review of a small piece of literal code Knuth wrote in order to demo literal programming.

[21:20] <masak> the reviewer said "nice, but possibly way overkill since my Unix does this with one line of pipe"

[21:20] <sorear> do you mean literate programming?'

[21:21] <masak> that I do. hm, I got it wrong twice.

[21:22] <masak> I must be tireder than I feel :)

[21:26] *** vmspb left
[21:40] *** am0c_ left
[21:47] *** MayDaniel left
[21:50] *** am0c_ joined
[21:59] *** mtk left
[22:03] *** zby_home_ left
[22:07] *** crab2313 left
[22:08] *** thou_ joined
[22:08] *** thou left
[22:11] *** PacoAir left
[22:12] <masak> July blog post coming up. stand by.

[22:12] <jnthn> I'm tired...can I sit by?

[22:14] <masak> NO! :)

[22:14] <masak> lol! \o/ http://strangelyconsistent.org/blog/july-18-finding-the-door-in-the-grass

[22:15] *** seldon left
[22:16] <masak> the crypt game now has 100 tests.

[22:17] <Tene> :D

[22:17] <Tene> Very nice.

[22:18] <masak> it will probably have 200 before the month is over.

[22:29] *** Seganku joined
[22:32] *** thou_ left
[22:32] *** crab2313 joined
[22:32] <masak> Seganku: welcome.

[22:36] <Seganku> ty

[22:37] <masak> rn: say "hi from Rakudo and Niecza, too! :)"

[22:37] <p6eval> rakudo 1fe39c, niecza v19-13-g442e075: OUTPUT¬´hi from Rakudo and Niecza, too! :)‚ê§¬ª

[22:37] *** betterworld joined
[22:37] <masak> rn: class Greeter { method greet($nick) { say "and hi $nick from a Perl 6 class!" } }; Greeter.greet("Seganku")

[22:37] <sergot> uhh, that was a hard day. :)

[22:37] <p6eval> rakudo 1fe39c, niecza v19-13-g442e075: OUTPUT¬´and hi Seganku from a Perl 6 class!‚ê§¬ª

[22:38] <sergot> Time to sleep. :)

[22:38] <sergot> Good night! o/

[22:40] *** sergot left
[22:42] <masak> dobranoc, sergocie.

[22:43] *** skids joined
[22:44] *** betterworld left
[22:47] *** alester left
[23:02] <lue> Apparently using a premade CORE.setting.pir causes a problem with a "missing or wrong version" of BOOTSTRAP.pm...

[23:02] *** gdonald left
[23:02] <lue> (when attempting to make RESTRICTED.setting.pir, that is)

[23:06] <masak> in what situation does this occur for you?

[23:07] <lue> (In the toqast branch, by the way). I'm attempting to take a CORE.setting.pir file generated on feather and use on my machine, because generating that is by far the longest step, and tends to not work for me)

[23:08] *** thelazydeveloper left
[23:10] <lue> I restarted my computer just for that step (which gives it a better chance of working) last night, but about an hour or so into it my impatience got me and I asked about this cheat here.

[23:24] <masak> ah.

[23:25] <masak> I've only tried to make that branch the conventional way.

[23:27] <lue> I wonder how far along it would go if I started the CORE.setting.pir generation tonight and left it running (after a reboot, of course)

[23:30] *** crab2313 left
[23:44] <masak> good night, #perl6

[23:46] *** supernovus joined
[23:47] <supernovus> Still in the planning stages, but would anyone be interested in this: https://github.com/supernovus/perl6-www-app-easy

[23:48] *** betterworld joined
[23:51] <supernovus> anyway, gotta run, maybe this weekend I'll make an initial version of WWW::App::Easy

[23:51] *** supernovus left
[23:51] *** zhutingting joined
[23:54] *** raiph joined
[23:54] <raiph> hi #perl6

[23:56] <[Coke]> hi, raiph

[23:59] <raiph> some folk have said they are using p6 in a biz setting. recently on this channel. anyone remember who?

