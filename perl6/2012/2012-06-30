[00:06] *** PacoAir left
[00:16] *** Limbic_Region joined
[00:18] *** jaldhar joined
[00:26] * [Coke] bought a quart jar of indian garlic pickle. omnomnomnom

[00:36] <[Coke]> # 06/29/2012 - rakudo++ (22774); niecza (90%); pugs (34.03%)

[00:40] <[Coke]> r: say 236+356+6-97

[00:40] <p6eval> rakudo 9394f7: OUTPUT«501␤»

[00:47] *** retupmoca joined
[00:53] *** jaldhar left
[01:03] <[Coke]> r: say '(foo)' ~~ /'(' ~ ')' .*?/

[01:03] <p6eval> rakudo 9394f7: OUTPUT«Unable to parse _block1011, couldn't find final ')'␤  in any FAILGOAL at src/stage2/QRegex.nqp:820␤  in regex <anon> at /tmp/ovY8j5A03X:1␤  in method ACCEPTS at src/gen/CORE.setting:9785␤  in block <anon> at /tmp/ovY8j5A03X:1␤␤»

[01:07] <[Coke]> rakudo: multi foo() { say "OH HAI" }; multi foo(Int $a?) {}; multi foo(Str $a?) {}; foo

[01:07] <p6eval> rakudo 9394f7: OUTPUT«Ambiguous call to 'foo'; these signatures all match:␤:()␤:(Int $a?)␤:(Str $a?)␤␤  in block <anon> at /tmp/JcvMG3et1M:1␤␤»

[01:08] <ruoso> std: macro infix:<lalala>($rhs,$lhs) { 'lalala' ~ $rhs ~ 'lalala' ~ $lhs ~ 'lalala' }; say 'a' lalala 'b';

[01:08] <p6eval> std fd2647b: OUTPUT«ok 00:00 44m␤»

[01:08] <ruoso> rakudo: macro infix:<lalala>($rhs,$lhs) { 'lalala' ~ $rhs ~ 'lalala' ~ $lhs ~ 'lalala' }; say 'a' lalala 'b';

[01:08] <p6eval> rakudo 9394f7: OUTPUT«===SORRY!===␤Macro did not return AST at line 2, near " 'b';"␤»

[01:09] <ruoso> niecza: macro infix:<lalala>($rhs,$lhs) { 'lalala' ~ $rhs ~ 'lalala' ~ $lhs ~ 'lalala' }; say 'a' lalala 'b';

[01:09] <p6eval> niecza v19-7-g5e25209: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Action method macro_def not yet implemented at /tmp/t8myP7PqzU line 1:␤------> [32ma' ~ $rhs ~ 'lalala' ~ $lhs ~ 'lalala' }[33m⏏[31m; say 'a' lalala 'b';[0m␤␤Action method routine_declarator:macro not yet implemented at /…

[01:10] <ruoso> sorear: is there a way to dump the AST of a small code snippet in niecza? 

[01:11] *** thou left
[01:12] <[Coke]> r: 01

[01:12] <p6eval> rakudo 9394f7:  ( no output )

[01:12] <sorear> ruoso: no.

[01:15] * [Coke] merges 2 tickets.

[01:16] <[Coke]> r: say "mmmmmmmmmany" ~~ /m ** 0..3/'

[01:16] <p6eval> rakudo 9394f7: OUTPUT«===SORRY!===␤Confused␤at /tmp/2LElC2Yk_A:1␤»

[01:16] <[Coke]> r: say "mmmmmmmmmany" ~~ /m ** 0..3/

[01:16] <p6eval> rakudo 9394f7: OUTPUT«q[mmm]␤␤»

[01:16] <[Coke]> r: say "mmmmmmmmmany" ~~ /m ** 3..0/

[01:16] <p6eval> rakudo 9394f7: OUTPUT«q[mmmmmmmmm]␤␤»

[01:27] <[Coke]> can we close https://rt.perl.org/rt3/Ticket/Display.html?id=76882 ?

[01:33] <[Coke]> do we need rakudo tickets on build warnings?

[01:33] <[Coke]> or can those be relegated to a wiki page or something?

[01:38] <[Coke]> r: .say for 1..* X* 1..*

[01:38] <p6eval> rakudo 9394f7: OUTPUT«(timeout)»

[01:39] <[Coke]> star: use URI;

[01:39] <p6eval> star 2012.05: OUTPUT«(signal SEGV)»

[01:40] <[Coke]> nr: say 1.0000001 ** (10 ** 9)

[01:40] <p6eval> rakudo 9394f7: OUTPUT«Nominal type check failed for parameter '$nu'; expected Int but got Num instead␤  in sub DIVIDE_NUMBERS at src/gen/CORE.setting:7821␤  in sub infix:<**> at src/gen/CORE.setting:7963␤  in block <anon> at /tmp/gDPB5AKBPJ:1␤␤»

[01:40] <p6eval> ..niecza v19-7-g5e25209: OUTPUT«2.688103843211962E+43␤»

[01:40] <sorear> \o/

[01:41] <[Coke]> dammit, someone picked all the LHF from the bug queue!

[01:42] <[Coke]> rn: my @a //= (3); @a.perl.say;

[01:42] <p6eval> niecza v19-7-g5e25209: OUTPUT«[].list␤»

[01:42] <p6eval> ..rakudo 9394f7: OUTPUT«Array.new()␤»

[01:42] <[Coke]> rn: my @a ||= (3); @a.perl.say;

[01:42] <p6eval> niecza v19-7-g5e25209: OUTPUT«[3].list␤»

[01:42] <p6eval> ..rakudo 9394f7: OUTPUT«Array.new(3)␤»

[01:44] <[Coke]> rn: () .= ()

[01:44] <p6eval> rakudo 9394f7: OUTPUT«===SORRY!===␤Method 'isa' not found for invocant of class 'Undef'␤»

[01:44] <p6eval> ..niecza v19-7-g5e25209: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1262 (warn @ 5) ␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 268 (Mu.Str @ 15) ␤  at /home/p6eval/niecza/src/STD.pm6 line 3851 (ANON @ 3) ␤  at /home/p6…

[02:15] *** jaldhar joined
[02:22] <colomon> nr: say 1.0000001 ** 10e4

[02:22] <p6eval> niecza v19-7-g5e25209: OUTPUT«1.0100501665844765␤»

[02:22] <p6eval> ..rakudo 9394f7: OUTPUT«1.01005016658504␤»

[02:37] <colomon> nr: say 1.0000001 ** 10.00001e4

[02:37] <p6eval> niecza v19-7-g5e25209: OUTPUT«1.0100501766855416␤»

[02:37] <p6eval> ..rakudo 9394f7: OUTPUT«1.01005017668554␤»

[02:37] <colomon> nr: say 1.0000001 ** 10000000000

[02:37] <p6eval> rakudo 9394f7: OUTPUT«Nominal type check failed for parameter '$nu'; expected Int but got Num instead␤  in sub DIVIDE_NUMBERS at src/gen/CORE.setting:7821␤  in sub infix:<**> at src/gen/CORE.setting:7963␤  in block <anon> at /tmp/mYvZnwx8OI:1␤␤»

[02:37] <p6eval> ..niecza v19-7-g5e25209: OUTPUT«Inf␤»

[02:40] *** Limbic_Region left
[02:41] *** Guest8599 left
[03:14] *** Chillance left
[03:15] *** tyatpi left
[03:23] *** thou joined
[03:35] *** leprevost joined
[03:45] *** birdwindupbird joined
[03:50] <sisar> pmichaud: Why put language design questions in a questions.txt? I used to think that the perl6-language mailing list was made for exactly this purpose. Please correct me if I'm wrong (or unnecessary bikeshedding :-) )

[04:00] *** sirrobert left
[04:02] *** birdwindupbird left
[04:14] *** kaare_ joined
[04:35] *** Tangaroa left
[04:37] <moritz> sisar: unnecessary bikeshedding is exactly the problem

[04:38] <sisar> moritz: oh, ok. Sorry.

[04:38] <moritz> sisar: you ask perl6-language for a small detail, and some the answers want to turn perl 6 into a pure functional language

[04:39] <moritz> sisar: p6l hasn't realized yet to which degree Perl 6 has actually progressed yet. And that makes it very tiresome to consult

[04:41] *** mikemol joined
[04:49] *** leprevost left
[04:57] *** mikemol left
[05:17] <sisar> moritz: remember my 10-bits of storage problem? I just realised, that it is most probably not possible because of the minimum word size of the computer's architecture. What you can get is only multiple of the word size.

[05:18] <sisar>  Well, not unless the architecture has bit addressable registers.

[05:18] <sisar> hm, does Parrot have bit-addressable registers ?

[05:18] <moritz> nope

[05:19] <benabik> It has bitwise operators.

[05:20] <pmichaud> sisar: I put things in questions.txt because it's really easy for email threads to be forgotten over time.

[05:21] <pmichaud> also, these are things that I suspect TimToady (or others) can answer quickly.  If it needs discussion, that can happen  here or on perl6-language.

[05:22] <sisar> pmichaud: maks sense :)

[05:23] <pmichaud> also, istr that commits to perl6/specs are sent to perl6-language, so in a sense the questions *did* go there :)

[05:23] <sisar> *makes

[05:23] <pmichaud> if someone on perl6-language feels a need to discuss a question, they can start a thread :)

[05:24] <sisar> r: say Real.^mro;

[05:24] <p6eval> rakudo 9394f7: OUTPUT«Real() Any() Mu()␤»

[05:24] <sisar> that ^ looks wrong.

[05:24] <sisar> should'nt that be: Real() Cool() Any() Mu() ?

[05:25] <pmichaud> Real is a role.

[05:25] <pmichaud> I suspect that something could be Real without having to be Cool.

[05:25] <pmichaud> (a custom Real type, for example).

[05:28] <sisar> r: say Real ~~ Cool ;

[05:28] <p6eval> rakudo 9394f7: OUTPUT«True␤»

[05:28] <sisar> what does the ~~ operator tell me here ?

[05:28] <moritz> pmichaud: fwiw I'm pretty sure that the answer to Q2 is a trait on infix:<+>

[05:28] <moritz> sisar: type conformance

[05:29] <moritz> pmichaud: 1) remember TimToady saying that 2) you really want only one such warning for   for 1..10 { 1 + $_; 1l }

[05:29] <moritz> not 10

[05:29] <moritz> 3) performance considerations

[05:29] <sisar> moritz: what do you mean by "type conformance"?

[05:29] <pmichaud> moritz: I'm fine with that; we just need to name the trait then?

[05:30] <moritz> sisar: if you have a   sub f(Real $x) { };  then you can pass any argument to &f whos type conforms to Real

[05:30] <moritz> sisar: ie does the Real role, or has the role mixed in, or inherits from type that conforms to Real

[05:30] <moritz> pmichaud: aye

[05:31] <moritz> pmichaud: we need some kind of purity annotation for constant folding anyway

[05:32] <pmichaud> moritz: yes, but that's slightly different because one can find the dispatch candidate from the constant.  

[05:32] <pmichaud> in the case of 1 + $_  we can't know the candidate, so the trait ends up on the proto sub.  It also means that there's not a easy way to declare a &infix:<+> candidate that doesn't warn about sink context.

[05:33] <moritz> I think it's fine to stick with a per-proto trait for both purposes

[05:34] <moritz> you're not supposed to add an infix:<+> candidate that does significant side effects (like, besides warning)

[05:35] <pmichaud> anyway, feel free to update questions.txt with that answer if you're confident of it.  I think you've convinced me, at any rate :)

[05:37] <sisar>  r: my Real $x; $x = 2i;

[05:37] <p6eval> rakudo 9394f7: OUTPUT«Type check failed in assignment to '$x'; expected 'Real' but got 'Complex'␤  in block <anon> at /tmp/stCiquysMj:1␤␤»

[05:37] <sisar> ok, what is the difference between a Role and a Type ? A type is internally a Class ?

[05:38] <pmichaud> afk, sleep

[05:38] <moritz> sisar: classes are types, and roles are types

[05:38] <moritz> sisar: enums are also types

[05:38] <moritz> a type is a pretty broad concept

[05:38] *** birdwindupbird joined
[05:40] *** araujo left
[05:40] <sisar> moritz: the tree on http://strangelyconsistent.org/blog/june-24-2011-types, what would you call it? "Type hierarchy" ? "Role hierarchy" ? or something else ?

[05:41] * sisar is really confused right now

[05:41] <dalek> specs: 9abc8f2 | moritz++ | questions.txt:

[05:41] <dalek> specs: [questions] answer Q2 by pmichaud++

[05:41] <dalek> specs: review: https://github.com/perl6/specs/commit/9abc8f20f1

[05:42] <moritz> sisar: all of those are classes, so it's a class hierarchy

[05:42] <sisar> but i don't know what is it which is confusing me :/

[05:42] <moritz> erm wait

[05:42] <moritz> Bool is an enum

[05:42] <moritz> so, a type hierarchy

[05:44] <sisar> moritz: thanks for explaining. But ... I'm still confused, not sure about what. It looks like I need to think more about it. I'll be back with more questions :-)

[05:45] *** _jaldhar joined
[05:45] *** jaldhar left
[05:45] *** _jaldhar is now known as jaldhar

[05:49] <benabik> Type systems are a fascinating topic.  Really have captured my interested in college...  We'll see if my PhD thesis ends up in that area or somewhere else.

[05:57] *** block joined
[05:58] <block> hi perl6! I have a nqp compile problem. about invoke() not implemented in class...any idea?

[06:00] *** birdwindupbird left
[06:00] <moritz> block: several people have had such problems, but sadly none of the core developers has been able to reproduce or fix it

[06:01] <block> moritz:oh ? that's too bad.

[06:04] <moritz> block: are you on a 32 bit system?

[06:04] <block> moritz:yes.archlinux 32

[06:07] <moritz> that seems to be common to most (but not all) the people who've had this error

[06:07] <block> moritz:any suggestion?

[06:08] <block> or just waiting?

[06:10] <moritz> block: talk to jnthn when he shows up; maybe he has some ideas what to ask for

[06:11] <block> moritz:thanks! keep waiting for the good news. bye!

[06:12] *** block left
[06:18] *** GlitchMr joined
[06:24] *** thou left
[06:36] <sisar> benabik, others: can you suggest me any good papers/thesis/books/monographs, on type systems? If it is programming language agnostic, much better.

[06:38] <benabik> sisar: In part that depends on what your background is.  Type systems are part of (and I'd say core to) the broader topic of programming language theory.  I could probably dig up a few references, but they'd be very theoretical and you'd have to be fairly comfortable with logic and proofs.

[06:40] <benabik> This is the notes from the class I took on the topic: http://www.cs.rit.edu/~mtf/teaching/20101/plt/handouts.html  Works up from fairly basic steps, but is somewhat dense.

[06:40] <benabik> I seem to recall the handouts being very useful on their own.

[06:41] <sisar> benabik: oh, is it like basic CompSci? Ok, then i'll ask my Computer Science friends for good textbooks.

[06:41] <benabik> Oh.  The notes require a login now.  That's new.

[06:42] <sisar> benabik: yeah, login required :/

[06:43] <benabik> sisar: Sorry, it didn't when I took it.  Or perhaps just doesn't on campus.  Who knows.

[06:43] <sisar> benabik: no problem. :-)

[06:43] <benabik> sisar: It's basic graduate Computer Science...  But undergrad is mostly a lot of programming.  :-D

[06:43] <benabik> I'd consider it a good intro point to the science of computing.

[06:44] <benabik> There is a fair amount online about the Lambda Calculus and the Simply Typed Lamba Calculus, which are the intro points to the theory.

[06:45] <sisar> oh, Lambda Calculus! i've heard about this devil :p

[06:46] <benabik> The lambda calculus is one of the simpler models to use to think about computation.  I wouldn't suggest it as a real language.  :-D

[06:46] <benabik> But if you add some interesting type stuff to it, you get most of the current functional languages like Haskell and ML.

[06:47] <sisar> i was looking for a much less mathematically/logic oriented topic but I guess I'll give it a try.

[06:47] <sorear> type systems and type theory are not quite the same thing

[06:47] <benabik> Well you can look into the practical side of type systems.  I just find the theory fascinating.  :-D

[06:48] <benabik> If you understand why you need type systems, you can figure out how they work much easier.  :-)

[06:48] <sorear> tyupe theory is the fuzzy border region between theoretical compsci and hardcore metamathematics

[06:48] <sisar> "The guy ask for understanding classes/roles etc, and you throw at him the whole of type system and type theory". Quite overwhelming, I'd say.

[06:48] <benabik> Theoretical CS is basically a branch of math.

[06:48] <sisar> :p

[06:48] <sorear> the stuff of which goedel's theorems are the tip of the iceberg

[06:49] <sisar> *asked

[06:49] <benabik> sisar: Sorry, it's what I find interesting.

[06:49] <sorear> actually it's a three-way border point.  philosophers love this stuff too.

[06:49] <benabik> You can find more practical stuff in compiler books and references.

[06:49] <sisar> benabik: I was just kidding :-)

[06:49] <sorear> the epistemology of formal logic

[06:50] <benabik> sorear: My professor has a good explanation of how formal logics map 1:1 to type systems.  Although not all type systems give a useful logic system.

[06:51] <benabik> sisar: Well, you seemed to want to know "what a type is" and well...  the STLC is a decent way to understand that, I think.  Although I'll admit what I find simple isn't always what others do...

[06:51] <benabik> That's the problem with higher learning.  You become incapable of talking to those outside your field.

[06:55] <sorear> benabik: i've used coq

[06:55] <sisar> benabik: i'm majoring in electrical science, so yes Comp Science is not my subject per se, but it is fascinating me more day by day

[06:55] <sorear> sisar: 'type' is an inherently fuzzy concept.

[06:56] <sorear> sisar: if you wanted to be precise you could probably find a dozen different but strangely consistant concepts that are refered to in the specs by that name

[06:56] *** birdwindupbird joined
[06:57] <sisar> sorear: Just by saying that you have solved some of my confusion! The word 'type' is overloaded and fuzzy, aye aye.

[06:57] <sorear> for instance, there are type constraints, which are gadgets that can recognize a passed value as appropriate or inappropriate for a variable or parameter

[06:57] <benabik> sorear: Building a type system from a logic made sense to me.  The other way around took some stretching of mental muscles.

[06:58] <sisar> lunch &

[06:59] <benabik> lunch...  Hm.  I would probably be rambling far less if it was near lunchtime instead of well past bedtime.  :-/

[07:00] <sorear> a type object is any undefined value other than a failure

[07:00] <sorear> a packageoid (no generally recognized name) is something that is created by 'package', 'module', 'class', 'role', or 'grammar'

[07:02] <sorear> a STable is a kind of object, in the most basic sense; every object in rakudo and niecza refers to a STable for everything except attribute values

[07:03] *** fgomez left
[07:03] <sorear> by default, every STable is associated with exactly one packageoid and exactly one type object; they can be decoupled for extensibility situations

[07:06] <sorear> the most basic sense of a type, from which the others ultimately spring, is that of a classification of values

[07:07] <sorear> however, types are fuzzy and flexible, they can and do get used in ways that are not directly related to classifying values

[07:07] <sorear> sleep&

[07:07] <benabik> sorear++

[07:12] *** birdwindupbird left
[07:32] *** cognominal joined
[07:37] *** PacoAir joined
[07:49] *** cog_ joined
[07:49] *** cognominal left
[07:52] *** cog_ left
[07:52] *** birdwindupbird joined
[08:05] *** araujo joined
[08:09] *** birdwindupbird left
[08:16] *** snearch joined
[08:33] *** sergot joined
[08:39] *** pupoque joined
[09:01] *** cognominal joined
[09:10] *** cognominal left
[09:16] *** fridim__ joined
[09:20] *** cognominal joined
[09:22] *** cog_ joined
[09:25] *** cognominal left
[09:30] *** cog_ left
[09:41] *** cog_ joined
[09:50] *** zby_home_ joined
[09:57] *** sergot left
[09:58] *** cog_ left
[10:08] *** cognominal joined
[10:08] *** spider-mario joined
[10:11] *** thou joined
[10:12] *** sergot joined
[10:12] *** cog_ joined
[10:13] *** cognominal left
[10:22] *** cog_ left
[10:30] *** whiteknight joined
[10:31] *** whiteknight is now known as Guest96700

[10:32] *** cog_ joined
[10:44] *** cog_ left
[11:06] *** sergot left
[11:25] *** sergot joined
[11:34] *** sergot left
[11:34] *** Juerd joined
[11:51] *** thou left
[12:03] *** snearch left
[12:13] *** fridim__ left
[12:21] *** snearch joined
[12:26] *** thelazydeveloper joined
[12:40] *** cognominal joined
[12:59] *** leprevost joined
[12:59] *** cognominal left
[13:08] *** cognominal joined
[13:10] *** Psyche^ joined
[13:12] *** tadzik joined
[13:14] *** Patterner left
[13:14] *** Psyche^ is now known as Patterner

[13:15] <Juerd>  Several things may be broken on feather, by the way

[13:15] <Juerd> Had to 1

[13:15] <Juerd> er

[13:15] <Juerd> feather1

[13:16] <Juerd> I had to force a few things for it to boot again. Apparently a previous dist-upgrade was interrupted, and left the system in an unbootable state

[13:16] *** cognominal left
[13:21] *** cognominal joined
[13:25] *** fgomez joined
[13:25] *** fgomez left
[13:25] *** fgomez joined
[13:28] *** cognominal left
[13:31] <dalek> nqp/toqast: 98c1660 | jonathan++ | t/qast/qast.t:

[13:31] <dalek> nqp/toqast: Basic test for QAST::CompUnit.

[13:31] <dalek> nqp/toqast: review: https://github.com/perl6/nqp/commit/98c1660efb

[13:31] <dalek> nqp/toqast: 8fd4cd3 | jonathan++ | t/qast/qast.t:

[13:31] <dalek> nqp/toqast: Test that pre-deserialize, post-deserialize and the mainline run in the correct order.

[13:31] <jnthn> Finally, internets! \o/

[13:32] *** dalek joined
[13:32] *** ChanServ sets mode: +v dalek

[13:32] *** masak joined
[13:32] <masak> oh hai #perl6

[13:33] <masak> networks in Franch. oh la la.

[13:33] <masak> France*

[13:33] *** snearch left
[13:38] *** PacoAir left
[13:38] *** PacoAir joined
[13:45] *** Pleiades` left
[13:51] *** Pleiades` joined
[13:56] *** benabik left
[14:15] *** cognominal joined
[14:19] *** cog_ joined
[14:20] *** cognominal left
[14:27] *** cog_ left
[14:33] *** arlinius left
[14:33] *** spider-mario left
[14:34] *** spider-mario joined
[14:34] *** sisar left
[14:36] *** pmichaud joined
[14:44] *** [Coke] joined
[14:45] *** mattp_ joined
[14:45] <[Coke]> hey, I think I know what might have killed feather!

[14:45] * [Coke] hangs his head.

[14:45] <[Coke]> https://rt.perl.org/rt3/Ticket/Display.html?id=90522

[14:46] *** sisar joined
[14:47] <pmichaud> yes, that could do it; especially since we recently bumped up parrot's "maximum recursion limit".

[14:47] <pmichaud> good morning, #perl6

[14:48] <[Coke]> pmichaud: hey! check out that ticket. you might have fixed it. ;)

[14:48] <[Coke]> it got up over 9000.

[14:48] <pmichaud> I'm not sure what "fix" means in this context, though.

[14:49] <[Coke]> (early version died <200  or so.)

[14:49] <[Coke]> pmichaud: I was trying to see if an exception was thrown.

[14:49] <[Coke]> is there a way to reduce the recursion limit from perl6?

[14:49] <pmichaud> I'm certain one is thrown; I don't know if/how it gets caught.

[14:50] <pmichaud> pir::getinterp__P().recursion_limit(1000);  # back to parrot's default

[14:50] <[Coke]> I'll set it even lower. ;)

[14:51] <[Coke]> what does that function return? the previous limit?

[14:51] <pmichaud> we'd have to check parrot for that.

[14:51] <pmichaud> (or just print whatever it returns)

[14:52] <pmichaud> yes, it returns the previous limit.

[14:52] <pmichaud> src/pmc/parrotinterpreter.pmc:205

[14:53] <[Coke]> I'm running it in the repl and was slightly confused.

[14:53] <[Coke]> \o/, it's fixed.

[14:54] <[Coke]> you now get a "maximum recursion depth"...

[14:54] <[Coke]> almost up to 100 tickets with testneeded.

[14:55] <[Coke]> r: say 233+359+6-98

[14:55] <p6eval> rakudo 9394f7: OUTPUT«500␤»

[14:56] <[Coke]> r: my %h = {"a" => "b"}; %h{"a"} = %h.delete("a"); say %h.perl; #RT 74946

[14:56] <p6eval> rakudo 9394f7: OUTPUT«().hash␤»

[14:58] *** birdwindupbird joined
[14:59] <[Coke]> rakudo: 555 ~~!~~ 666 #RT 76436

[14:59] <p6eval> rakudo 9394f7:  ( no output )

[14:59] <[Coke]> std: 555 ~~!~~ 666 #RT 76436

[14:59] <p6eval> std fd2647b: OUTPUT«Use of uninitialized value $x in pattern match (m//) at STD.pm line 66584.␤Use of uninitialized value $x in concatenation (.) or string at STD.pm line 66623.␤[31m===[0mSORRY![31m===[0m␤Expecting a term, but found either infix ~~ or redundant prefix ~␤  (to suppre…

[15:01] <[Coke]> rakudo: grammar G { regex foo { } }; say "alive" #RT 78404

[15:01] <p6eval> rakudo 9394f7: OUTPUT«alive␤»

[15:05] *** xinming_ joined
[15:08] <[Coke]> moritz: please update 71810

[15:08] *** xinming left
[15:08] <[Coke]> (RT)

[15:20] *** Util joined
[15:39] *** Chillance joined
[15:46] <masak> lightning talks at FPW.

[15:46] <masak> just realized I have internet connection :)

[15:47] <pmichaud> \o/ lightning talks

[15:48] * pmichaud :( still no new videos at youtube.com/yapcna :(

[15:58] <dalek> faq: af152cf | pmichaud++ | Makefile:

[15:58] <dalek> faq: Add a simple Makefile for generating the .html.

[15:58] <dalek> faq: review: https://github.com/perl6/faq/commit/af152cf0d0

[15:58] <dalek> faq: db23aa0 | pmichaud++ | web/index.tmpl:

[15:58] <dalek> faq: Don't force style.css to be read from root (so local .html files display properly).

[15:58] <dalek> faq: review: https://github.com/perl6/faq/commit/db23aa0d7f

[15:58] <dalek> faq: e5fb2e6 | pmichaud++ | web/style.css:

[15:58] <dalek> faq: Remove padding for <code> blocks inside of <pre> (avoids initial indent).

[15:58] <dalek> faq: review: https://github.com/perl6/faq/commit/e5fb2e695e

[16:00] <dalek> faq: 8ff73a5 | pmichaud++ | answers.md:

[16:00] <dalek> faq: Question about array refs should just be a question, not a heading.

[16:00] <dalek> faq: review: https://github.com/perl6/faq/commit/8ff73a5f91

[16:06] *** telex joined
[16:24] <dalek> faq: 38242b5 | pmichaud++ | web/ (2 files):

[16:24] <dalek> faq: Fix up <ul> and <li> borders a bit for last question.

[16:24] <dalek> faq: review: https://github.com/perl6/faq/commit/38242b5a99

[16:31] <dalek> faq: e8022f5 | pmichaud++ | web/style.css:

[16:31] <dalek> faq: Put a little more space between questions; indent code sections.

[16:31] <dalek> faq: review: https://github.com/perl6/faq/commit/e8022f53c7

[16:31] <dalek> faq: ad1ff23 | pmichaud++ | answers.md:

[16:31] <dalek> faq: Move the question about sigils to follow the one about references.

[16:31] <dalek> faq: review: https://github.com/perl6/faq/commit/ad1ff23d20

[16:36] <dalek> faq: 1f5dcc6 | pmichaud++ | answers.md:

[16:36] <dalek> faq: Make a http-reference into a link, add missing verb.

[16:36] <dalek> faq: review: https://github.com/perl6/faq/commit/1f5dcc6412

[16:36] *** cognominal joined
[16:46] <dalek> faq: be7644f | pmichaud++ | answers.md:

[16:46] <dalek> faq: Reword Junction/eigenstates a bit.

[16:46] <dalek> faq: review: https://github.com/perl6/faq/commit/be7644f9c2

[16:46] <dalek> faq: 0871dff | pmichaud++ | answers.md:

[16:46] <dalek> faq: Mention .perl along with .gist in question on say/print.

[16:46] <dalek> faq: review: https://github.com/perl6/faq/commit/0871dff384

[16:46] <dalek> faq: a4ce72c | pmichaud++ | answers.md:

[16:46] <dalek> faq: Correct output of printing array.

[16:46] <dalek> faq: review: https://github.com/perl6/faq/commit/a4ce72c307

[16:52] <dalek> faq: e2cb501 | pmichaud++ | answers.md:

[16:52] <dalek> faq: Add a section for questions-not-answered-yet.

[16:52] <dalek> faq: review: https://github.com/perl6/faq/commit/e2cb501eeb

[17:02] *** GlitchMr left
[17:11] *** benabik joined
[17:12] <TimToady> n: $_ = "Foo 42"; s/Foo/Bar/ if 0; say "True" when /^ \w+ ' ' \w+ /

[17:12] <p6eval> niecza v19-7-g5e25209: OUTPUT«True␤»

[17:12] <TimToady> n: $_ = "Foo 42"; s:s/Foo/Bar/ if 0; say "True" when /^ \w+ ' ' \w+ /

[17:12] <p6eval> niecza v19-7-g5e25209:  ( no output )

[17:12] <TimToady> sorear: ^^^ nieczabug

[17:13] * [Coke] yawns.

[17:14] <TimToady> somehow the :s is transferring to the subsequent //

[17:27] *** Telgalizer joined
[17:29] *** shabble joined
[17:29] *** shabble left
[17:29] *** shabble joined
[17:31] *** cognominal left
[17:37] *** birdwindupbird left
[17:42] <dalek> rakudo/nom: 039d75f | pmichaud++ | README:

[17:42] <dalek> rakudo/nom: Add a prerequisite section to the README (szabgab++).  Update copyright.

[17:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/039d75ff37

[17:49] *** leprevost left
[17:57] <dalek> rakudo/nom: 0208b56 | pmichaud++ | / (2 files):

[17:57] <dalek> rakudo/nom: Refactor prerequisite notes, since INSTALL.TXT has the detailed

[17:57] <dalek> rakudo/nom: build instructions.

[17:57] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/0208b56134

[17:59] *** fgomez left
[18:00] *** vlixes joined
[18:04] *** GlitchMr joined
[18:06] *** eternaleye joined
[18:06] *** fgomez joined
[18:07] <dalek> rakudo/nom: e34764c | pmichaud++ | docs/review-notes.txt:

[18:07] <dalek> rakudo/nom: Remove obsolete docs/review-notes.txt .

[18:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e34764ce47

[18:27] <sorear> good * #perl6

[18:32] *** bluescreen10 left
[18:36] *** thou joined
[18:42] *** thou left
[18:47] *** leprevost joined
[18:50] <dalek> rakudo/nom: 5ae28cc | pmichaud++ | docs/release_guide.pod:

[18:50] <dalek> rakudo/nom: [release-guide.pod]:  Add note to update README copyright date.

[18:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/5ae28cc85a

[19:07] *** leprevost left
[19:16] *** am0c left
[19:17] *** pupoque_ joined
[19:23] *** pupoque_ is now known as Gesh

[19:27] *** shabble left
[19:28] *** imarcusthis left
[19:29] *** imarcusthis- joined
[19:33] <dalek> faq: 725623b | pmichaud++ | answers.md:

[19:33] <dalek> faq: Add 'token' vs. 'rule' to unanswered faqs.

[19:33] <dalek> faq: review: https://github.com/perl6/faq/commit/725623b63e

[19:33] *** am0c joined
[19:35] *** imarcusthis- left
[19:39] *** imarcusthis joined
[19:41] *** birdwindupbird joined
[19:42] <dalek> rakudo/nom: a6d08c3 | pmichaud++ | src/core/ (2 files):

[19:42] <dalek> rakudo/nom: Add a DEPRECATED trait, mark Cool.bytes as DEPRECATED.

[19:42] <dalek> rakudo/nom: Doesn't do anything just yet; but provides a small framework that

[19:42] <dalek> rakudo/nom: we can build upon in the future.

[19:42] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/a6d08c3ec6

[19:45] *** vmspb joined
[19:45] *** imarcusthis left
[19:46] *** cognominal joined
[19:47] *** birdwindupbird left
[19:48] *** cognominal left
[19:49] *** imarcusthis joined
[19:54] *** kaare_ left
[20:06] <flussence> ooh, there's a leap second in ~3h54m

[20:10] *** GlitchMr left
[20:12] <moritz> \o

[20:13] * moritz needs to release R* today, otherwise it's not 2012.06 anymore :-)

[20:14] <flussence> rn: say DateTime.new(:year(2012), :month(6), :day(30), :hour(23), :minute(59), :second($_)) for 59..61;

[20:14] <p6eval> rakudo a6d08c: OUTPUT«DateTime.new(year => 2012, month => 6, day => 30, hour => 23, minute => 59, second => 59)␤DateTime.new(year => 2012, month => 6, day => 30, hour => 23, minute => 59, second => 60)␤second out of range. Is: 61, should be in 0..^60; No second 61 has yet been defined␤ …

[20:14] <p6eval> ..niecza v19-7-g5e25209: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared name:␤ 'DateTime' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1402 (die @ 5) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 37) ␤  at /hom…

[20:15] <moritz> I thought we supported leap seconds :(

[20:15] <flussence> it works for :seconds(60), which is right

[20:16] <flussence> s:2nd/s//

[20:16] <moritz> oh

[20:16] <benabik> Yes.  23:59:60 is the leap second.

[20:16] <moritz> then the error message is LTA

[20:16] * TimToady hopes his plane lands before midnight....

[20:16] <moritz> Is: 61, should be in 0..^60

[20:17] <moritz> should be

[20:17] <moritz> in 0..60

[20:17] <flussence> r: say DateTime.new(:year(2012), :month(6), :day(29), :hour(23), :minute(59), :second(60))

[20:17] <p6eval> rakudo a6d08c: OUTPUT«second out of range. Is: 60, should be in 0..^60; There is no leap second on UTC 2012-06-29␤  in method check-time at src/gen/CORE.setting:10561␤  in method new at src/gen/CORE.setting:10527␤  in block <anon> at /tmp/XvSwbHjtpH:1␤␤»

[20:20] <flussence> I like how that message comes from Exception.pm :)

[20:21] <flussence> and yeah, Temporal.pm:212 has the bad range

[20:22] <flussence> .oO( this code is nice to read compared to what I was imagining it'd look like )

[20:28] *** bluescreen10 joined
[20:31] <moritz> https://github.com/downloads/rakudo/star/rakudo-star-2012.06.tar.gz

[20:32] <flussence> moritz++

[20:33] <moritz> where do we send the release announcement? p6a, parrot-dev, anything else?

[20:34] <[Coke]> I will have to forward this one to albany-pm

[20:40] *** Telgalizer left
[20:41] <moritz> http://rakudo.org/2012/06/30/rakudo-star-2012-06-released/

[20:42] *** pupoque left
[20:43] *** birdwindupbird joined
[20:45] <[Coke]> is there a link to pmichaud's "faster is better" recent slideset?

[20:46] <[Coke]> ah, found it in the comments on the .05 release.

[20:52] * [Coke] tries to agitate the one other person in a 50 mile radius using perl 6

[20:52] <[Coke]> er, perl.

[20:52] *** MayDaniel joined
[20:54] *** bluescreen10 left
[20:56] *** am0c left
[20:58] *** Guest33130 joined
[21:04] * sorear wonders where [Coke] is

[21:08] * masak starts publishing the t5 blog post

[21:10] <jnthn> moritz++ # star release

[21:10] <jnthn> moritz: Sorry I ended up too distrcated with stuff to do it.

[21:16] <flussence> r: https://gist.github.com/3007551

[21:16] <p6eval> rakudo a6d08c: OUTPUT«125000250000␤»

[21:16] <flussence> I wrote this the other day but most people weren't around, and I'm curious how many edge cases I missed :)

[21:17] <masak> oh, there was a star release? moritz++

[21:18] <[Coke]> sorear: upstate NY

[21:18] <masak> flussence: did you try overriding [+] instead? that's how we spell 'sum' in Perl 6.

[21:19] <flussence> I had no idea that even worked :)

[21:19] <flussence> r: sub prefix:<[+]>(*@stuff) { ... }

[21:19] <p6eval> rakudo a6d08c:  ( no output )

[21:19] <flussence> r: sub prefix:<[+]>(*@stuff) { [*] @stuff }; say [+] 1..5

[21:19] <p6eval> rakudo a6d08c: OUTPUT«1..5␤»

[21:20] <masak> hm.

[21:20] *** Guest33130 left
[21:20] * masak wonders if that isn't a bug

[21:20] *** Telgalizer joined
[21:20] <masak> Telgalizer: greetings.

[21:21] <masak> humans and gentlebots...

[21:22] <sorear> masak \o/

[21:22] <masak> ...the fifth p6cc task post is online: http://strangelyconsistent.org/blog/t5-enumerating-trees

[21:22] <masak> \o/

[21:22] <masak> sorear! \o/

[21:24] *** Guest33130 joined
[21:26] <masak> writing these up is a real chore :) but I'm still happy to receive corrections, comments, and suggestions for improvements.

[21:30] *** birdwindupbird left
[21:31] *** Guest33130 left
[21:32] *** birdwindupbird joined
[21:35] *** am0c_ joined
[21:43] *** MayDaniel left
[21:45] *** birdwindupbird left
[21:50] *** Gesh left
[21:51] *** pupoque joined
[21:51] *** pupoque_ joined
[21:51] *** pupoque_ left
[21:51] *** pupoque left
[21:51] *** pupoque joined
[22:17] <masak> 'night, #perl6

[22:23] <sorear> night, masak.

[22:23] * sorear returns to the 'write parser for niecza/non-bootstrap' project.  *overwhelmed*

[22:24] *** pupoque left
[22:30] *** PacoAir left
[22:46] *** benabik left
[22:50] <colomon> sorear: I know I'm probably not up to writing parser, but if there is anything I can do to make you feel less overwhelemed...

[22:57] *** vmspb left
[22:58] <japhb> Does Rakudo implent 'handles' yet?

[22:59] <japhb> *implement

[22:59] *** am0c_ left
[22:59] <flussence> handles as in filehandles, or the other thing?

[23:00] <japhb> The OO thing.  But I figured it out now -- Rakudo does support it, but I was bitten in my tests by shell quoting.

[23:01] <japhb> DARN YOU SHELL QUOTING!  DARN YOU STRAIGHT TO HECK!

[23:01] <japhb> (Because the shell just doesn't deserve a real first-class punishment.  ;-)

[23:01] <flussence> depends on the shell :)

[23:01] <japhb> heh

[23:05] <sorear> colomon: thanks

[23:06] <sorear> japhb: I want a shell which mostly works like the Bourne shell, but supports tcl or p6-style quoting

[23:06] <japhb> Ditto.  Hell, I'd settle for p5-style quoting.  That would still be a massive step up.

[23:08] *** benabik joined
[23:09] <japhb> *chuckle* Our local time source just sent an operations alert that a leap second happened.  Because darn it, PEOPLE NEED TO KNOW.

[23:12] <flussence> well then they're wrong, it's not supposed to happen until 0000 UTC :)

[23:14] <japhb> Sorry, I should say the alert said that one was "announced".  I presume that happens an hour early?

[23:14] <colomon> isn't that 14 minutes ago?  Or am I off because of daylight savings time

[23:14] <colomon> ?

[23:14] <flussence> it's 00:14 here but 23:14 UTC

[23:18] *** am0c joined
[23:19] <dalek> nqp: 7d3441a | pmichaud++ | src/HLL/Compiler.pm:

[23:19] <dalek> nqp: Implement --stagestats=2; outputs memory and PMC allocation statistics

[23:19] <dalek> nqp: review: https://github.com/perl6/nqp/commit/7d3441acc3

[23:20] <sorear> japhb: the announcements frequently occur months or years ahead of time

[23:20] <sorear> japhb: we need time to update the table of leap seconds embedded in Temporal.pm

[23:29] <pmichaud> the leap second is ~30 mins from now.

[23:33] *** spider-mario left
[23:54] *** zby_home_ left
