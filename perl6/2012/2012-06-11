[00:16] *** frettled left
[00:16] *** frettled joined
[00:16] <dalek> niecza/non-bootstrap: 7d36f8c | sorear++ | lib/ (2 files):

[00:16] <dalek> niecza/non-bootstrap: First doodles on MiniParser

[00:16] <dalek> niecza/non-bootstrap: review: https://github.com/sorear/niecza/commit/7d36f8c05f

[00:17] *** sjn left
[00:17] *** sjn joined
[00:26] *** libertyprime joined
[01:01] *** icwiener_ left
[01:06] *** icwiener_ joined
[01:31] *** replore joined
[01:38] *** scott_ joined
[01:38] *** scott_ is now known as Guest90285

[01:43] *** twinshadow left
[01:43] *** Guest25536 left
[01:46] *** colomon left
[01:55] *** colomon joined
[02:18] *** icwiener_ left
[02:26] *** libertyprime left
[02:26] *** UncleFester6 left
[02:27] *** libertyprime joined
[02:42] *** adu joined
[03:00] *** kurahaupo left
[03:04] *** crab2313 joined
[03:15] *** kurahaupo joined
[03:32] <dalek> perl6-bench: c7388f0 | (Geoffrey Broadwell)++ | bench:

[03:32] <dalek> perl6-bench: Prepare to support multiple summary output formats; default (and only) format for now is 'text'

[03:32] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/c7388f0cf1

[03:32] <dalek> perl6-bench: 4ce8f19 | (Geoffrey Broadwell)++ | bench:

[03:32] <dalek> perl6-bench: Allow style (e.g. color) to be forced off or on (or just DWIM); also some minor improvements to neighboring bits of main()

[03:32] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/4ce8f194cc

[04:19] <dalek> perl6-bench: 0cb18fd | (Geoffrey Broadwell)++ | bench:

[04:19] <dalek> perl6-bench: Refactor summary output to generate output into string and print it all at once at the end

[04:19] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/0cb18fde59

[04:19] <dalek> perl6-bench: 869b42b | (Geoffrey Broadwell)++ | bench:

[04:19] <dalek> perl6-bench: Add html and html_snippet output formats

[04:19] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/869b42b171

[04:24] *** Guest90285 left
[04:31] *** scott_ joined
[04:31] *** scott_ left
[04:32] *** replore left
[04:51] <dalek> perl6-bench: 03c3480 | (Geoffrey Broadwell)++ | bench:

[04:51] <dalek> perl6-bench: Add json output format

[04:51] <dalek> perl6-bench: review: https://github.com/japhb/perl6-bench/commit/03c3480cf3

[04:56] *** kurahaupo left
[05:00] *** skids left
[05:02] *** scott_ joined
[05:03] *** scott_ is now known as Guest87997

[05:24] <moritz> \o

[05:25] <sorear> o/

[05:44] <adu> \/

[05:45] <adu> oo

[05:47] <adu> ╰╯

[05:54] <tadzik> `'

[06:04] <adu> :)

[06:05] <adu> .u ╰

[06:05] <phenny> U+2570 BOX DRAWINGS LIGHT ARC UP AND RIGHT (╰)

[06:05] <adu> .u ╯

[06:05] <phenny> U+256F BOX DRAWINGS LIGHT ARC UP AND LEFT (╯)

[06:11] <dalek> niecza/non-bootstrap: 146fa60 | sorear++ | lib/ (3 files):

[06:11] <dalek> niecza/non-bootstrap: A few more fiddles to MiniParser, parse comments and grammar decls

[06:11] <dalek> niecza/non-bootstrap: review: https://github.com/sorear/niecza/commit/146fa60ad2

[06:28] *** fridim_ joined
[06:46] *** fridim_ left
[06:50] *** fhelmberger joined
[06:58] *** eternaleye joined
[07:04] *** brrt joined
[07:04] *** brrt left
[07:09] *** kaleem joined
[07:11] *** brrt joined
[07:26] *** pupoque joined
[07:29] *** cognominal___ joined
[07:29] <sorear> sleep&

[07:29] <dalek> niecza/non-bootstrap: 70f727e | sorear++ | lib/Actions.cs:

[07:29] <dalek> niecza/non-bootstrap: translate Actions, part 1

[07:29] <dalek> niecza/non-bootstrap: review: https://github.com/sorear/niecza/commit/70f727e19b

[07:30] *** cognominal_ left
[07:32] *** frettled left
[07:33] *** frettled joined
[07:46] *** masak left
[07:46] *** masak joined
[07:47] *** pmichaud left
[07:47] *** pmichaud joined
[07:53] *** fglock joined
[08:05] *** Facefox left
[08:06] *** Facefox joined
[08:08] *** fhelmberger_ joined
[08:09] *** sivoais left
[08:10] *** fhelmberger left
[08:12] *** am0c joined
[08:22] *** adu left
[08:29] *** snearch joined
[08:29] *** cosimo joined
[08:30] *** pupoque left
[08:41] *** dakkar joined
[08:42] *** daxim joined
[09:06] *** frettled left
[09:07] *** frettled joined
[09:16] *** sergot joined
[09:16] <sergot> hi o/

[09:16] <crab2313> sergot: hi

[09:19] <moritz> \o

[09:50] *** kresike joined
[09:50] <kresike> hello all you happy perl6 people

[09:50] <moritz> hello kresike. What about the unhappy perl6 people? :-)

[09:51] <kresike> hello moritz o/

[09:51] <kresike> don't think there are any :)

[09:52] <eiro> hello there

[09:52] <eiro> moritz, is fpw12 tag alive ? 

[09:53] <eiro> cognominal said it's sad to not wait for a week and have more features at fpw ... i have to admit i'm scarred about it 

[09:53] <moritz> eiro: oh, I forgot to push that one

[09:53] <moritz> doing that now

[09:53] <eiro> moritz, don't :)

[09:53] <moritz> dang

[09:53] <eiro> i don't know how smart it is to wait for a week for example 

[09:53] <eiro> (as cognominal said) 

[09:54] <moritz> the problem is that you'd always have to wait for another week

[09:54] <moritz> I don't expect we'll stop to work on rakudo soon :-)

[09:55] <moritz> oh, the push failed

[09:55] <eiro> haha ... right :)

[09:56] <moritz> eiro: so, what should I do? tag current HEAD and push the tag?

[09:56] <moritz> eiro: or tag the revision we discussed the other day?

[09:59] <moritz> if I were you, I'd want the current HEAD tagged, and then work with that

[10:03] <eiro> hmm ...

[10:04] <eiro> moritz, i expect a version as stable as possible (in terms of features) so please feel free to tag any comit -past,present,future- you feel as a good choice 

[10:06] <moritz> eiro: ok. fpw2012 aka https://github.com/rakudo/rakudo/zipball/fpw2012 at your disposal

[10:06] <eiro> \o/ thanks a lo moritz 

[10:07] <moritz> thing is, any version is as stable as another unless we have known regressions or known work-in-progress

[10:09] <eiro> ok

[10:13] <moritz> and I merged a branch yesterday, but it was fairly small-scale and not likely to have caused any trouble

[10:14] *** Guest87997 left
[10:15] *** snearch left
[10:16] *** mtk joined
[10:35] *** wtw joined
[10:54] *** JimmyZ joined
[11:00] *** Yappocall is now known as 92AAAS63D

[11:01] *** 92AAAS63D is now known as Yappocall

[11:03] *** cognominal___ left
[11:04] *** cognominal joined
[11:07] <felher> nr:  class C { }; my C $c1 .= new; $c1 does anon role { method get-self() { $c1 } } ; say $c1.defined; say $c1.get-self.defined; say $c1 === $c1.get-self;

[11:07] <p6eval> niecza v18-6-ge52d6c3: OUTPUT«True␤True␤True␤»

[11:07] <p6eval> ..rakudo eef772: OUTPUT«True␤False␤False␤»

[11:07] <felher> I guess niecza is right about that?

[11:08] <felher> Maybe that the role-problem with lexicals moritz mentioned yestderday?

[11:08] *** brrt left
[11:11] *** cmd16 joined
[11:13] <felher> *that's *yesterday

[11:15] *** cmd16 left
[11:16] *** kaleem left
[11:16] *** kaleem joined
[11:20] *** brrt joined
[11:22] <moritz> probably

[11:33] *** crab2313 left
[11:34] *** crab2313 joined
[11:49] *** GlitchMr joined
[11:49] *** ynot joined
[11:49] *** cognominal left
[11:50] *** cognominal joined
[11:51] <ynot> perl6: say <1 2> >>+<< <3 4> >>+<< <5 6>

[11:51] <p6eval> rakudo eef772, niecza v18-6-ge52d6c3: OUTPUT«9 12␤»

[11:51] <p6eval> ..pugs: OUTPUT«912␤»

[11:52] <ynot> perl6: say [>>+<<] <1 2>, <3 4>, <5 6>

[11:52] <p6eval> pugs: OUTPUT«*** Hyper OP only works on lists␤    at /tmp/MYDvAW_jmb line 1, column 5 - line 2, column 1␤»

[11:52] <p6eval> ..rakudo eef772: OUTPUT«Nominal type check failed for parameter '$op'; expected Any but got Mu instead␤  in sub METAOP_REDUCE at src/gen/CORE.setting:11538␤  in block <anon> at /tmp/CDHqsxlOPQ:1␤␤»

[11:52] <p6eval> ..niecza v18-6-ge52d6c3: OUTPUT«21␤»

[11:52] *** cognominal_ joined
[11:53] <ynot> perl6: say [>>+<<] (<1 2>, <3 4>, <5 6>)

[11:53] <p6eval> pugs: OUTPUT«*** Hyper OP only works on lists␤    at /tmp/5TwH3T0Q5u line 1, column 5 - line 2, column 1␤»

[11:53] <p6eval> ..rakudo eef772: OUTPUT«Nominal type check failed for parameter '$op'; expected Any but got Mu instead␤  in sub METAOP_REDUCE at src/gen/CORE.setting:11538␤  in block <anon> at /tmp/pBeTt5uo50:1␤␤»

[11:53] <p6eval> ..niecza v18-6-ge52d6c3: OUTPUT«21␤»

[11:56] *** cognominal left
[11:57] *** daxim left
[11:57] *** bruges left
[11:57] *** daxim joined
[11:57] *** bruges joined
[11:58] *** dalek left
[11:59] *** cosimo left
[11:59] *** cosimo joined
[12:00] *** drbean left
[12:01] *** timotimo joined
[12:02] *** kaleem left
[12:02] *** drbean joined
[12:03] *** ranguard_ left
[12:03] *** ranguard joined
[12:04] *** kaleem joined
[12:04] *** d4l3k_ joined
[12:04] *** d4l3k_ is now known as dalek

[12:07] *** birdwindupbird joined
[12:09] *** xinming left
[12:09] *** xinming joined
[12:23] *** tokuhiro_ joined
[12:30] *** sergot left
[12:34] *** sdo_ joined
[12:34] <sdo_> hello

[12:35] <sdo_> I have to write something about perl 6 culture. Do you know where I can start?

[12:35] <sdo_> thank you very much

[12:38] <PerlJam> sdo_: greetings.

[12:38] <fglock> sdo_: maybe http://www.perlfoundation.org/perl6/index.cgi?state_of_the_onion

[12:38] <sdo_> hi

[12:38] <PerlJam> sdo_: You could hang out here for a while and observe

[12:39] <PerlJam> sdo_: you could read perl6.org and make some inferences

[12:39] <sdo_> thank you PerlJam

[12:40] <PerlJam> sdo_: Also, read jnthn's blog, moritz's blog, masak's blog and pmichaud's blog

[12:40] <PerlJam> :-)

[12:40] <sdo_> :-)

[12:43] <sdo_> http://perlcabal.org/syn/ is it ok?

[12:43] <sdo_> ;-)

[12:44] <sdo_> a lot of reading heuuuuuuuuu

[12:44] <PerlJam> sdo_: why do you "have to write something"?

[12:45] <sdo_> It is foe fpw2012 

[12:45] <sdo_> It is for fpw2012 

[12:45] *** sergot joined
[12:46] <sdo_> I am not sur yet because I just received it and I don't want to make mistakes in what I'll say

[12:46] <sdo_> s!sur!sure!

[12:47] <PerlJam> sdo_: you can vet anything you want to say with the people of #perl6

[12:48] <sdo_> I am kinda rooky with perl 6 so ....

[12:50] *** fgomez left
[12:51] *** colomon left
[12:51] <sdo_> ok i'll take care and i'll do carefully but slowly

[12:51] <sdo_> thanks a lot guys

[12:52] <daxim> sdo_, http://irclog.perlgeek.de/perl6/2012-06-01#i_5667075

[12:53] <daxim> for the historical aspect

[12:53] *** bluescreen10 joined
[12:58] *** PacoAir joined
[12:59] *** PacoAir left
[12:59] *** PacoAir joined
[12:59] <sdo_> see u later aligator

[12:59] *** sdo_ left
[13:04] *** cognominal_ left
[13:05] *** agentzh joined
[13:06] *** cognominal joined
[13:11] *** am0c left
[13:12] *** Patterner left
[13:13] *** spider-mario joined
[13:14] *** Psyche^ joined
[13:14] *** Psyche^ is now known as Patterner

[13:22] *** cognominal left
[13:30] *** skids joined
[13:47] *** Facefox left
[13:49] *** Facefox joined
[13:49] *** Facefox left
[13:50] *** wtw left
[13:51] *** Facefox joined
[13:55] *** cognominal joined
[13:56] *** a2n joined
[13:56] *** a2n left
[14:00] *** fgomez joined
[14:00] *** fgomez left
[14:01] *** cognominal left
[14:02] *** cognominal joined
[14:02] *** raiph joined
[14:18] *** thou joined
[14:18] *** kaleem left
[14:20] *** adu joined
[14:30] *** pat_js joined
[14:33] *** adu left
[14:35] *** sergot left
[14:36] *** kaare_ joined
[14:41] <pmichaud> good morning, #perl6

[14:43] <tadzik> hello pm

[14:47] <felher> o/ pm 

[14:54] *** Facefox left
[14:58] <eiro> hello

[14:59] <felher> o/

[15:00] *** Facefox joined
[15:00] *** Facefox left
[15:01] *** pat_js left
[15:03] *** Facefox joined
[15:03] *** Facefox left
[15:04] *** tokuhiro_ left
[15:06] *** Facefox joined
[15:19] *** Facefox left
[15:20] *** Facefox joined
[15:20] *** Facefox left
[15:21] *** Facefox joined
[15:21] *** Facefox left
[15:24] *** Facefox joined
[15:24] *** Facefox left
[15:25] *** Facefox joined
[15:25] *** Facefox left
[15:27] *** Facefox joined
[15:27] *** Facefox left
[15:28] *** cognominal left
[15:28] *** Facefox joined
[15:29] <kresike> bye all

[15:29] *** kresike left
[15:30] * moritz back

[15:33] *** cognominal joined
[15:33] <brrt> hi moritz

[15:33] *** fglock left
[15:34] *** tyatpi joined
[15:34] <moritz> \o brrt 

[15:39] <jnthn> Good evening o/

[15:39] *** cognominal_ joined
[15:39] *** cognominal left
[15:40] <diakopter> o/

[15:40] * TimToady reports in from Madison

[15:40] * diakopter wishes it weren't sold out

[15:48] <pmichaud> hello, TimToady!  I'll be there tomorrow afternoon

[15:48] *** JimmyZ left
[15:54] *** _twitch joined
[15:55] * moritz removes outdated rakudo branches 'require' and 'altnfa'

[15:55] <pmichaud> \o/

[15:55] <pmichaud> branch pruning +1

[15:55] <moritz> it seems the remaining branches potentially have some merit

[15:56] <moritz> lazy-subst and nil-assign are quire recent

[15:56] <moritz> *quite

[15:56] <moritz> alpha and ng are there for hysterical raisins

[15:56] <moritz> priv-role-attrs requires some design work iirc (jnthn++ was working on that one in March)

[15:57] <moritz> sink, sink2, staged-settings and parameter-perl were mine, I'm not yet willing to abandon them completely

[15:58] <jnthn> The sink work never made it in, though?

[15:58] <moritz> native-str-ops causes segfaults, which should be tracked down at some point

[15:58] <moritz> jnthn: no

[15:58] <moritz> jnthn: I gave up after not being able to debug/print out the PAST structures in a convenient way

[15:58] <moritz> and all my attempts to do without ran into brick walls

[15:59] <pmichaud> sink might be re-addressible with the new iterator stuff in place.

[15:59] <pmichaud> *addressable

[15:59] <moritz> pmichaud: the iterators weren't the problem

[15:59] <moritz> pmichaud: I managed to add a 'sink' method to class List just fine (though without much performance gain)

[15:59] <moritz> pmichaud: the problem was to determine which statements to sink

[16:00] <pmichaud> iirc, rule statementlist should sink its statements

[16:01] <pmichaud> unless the statement is an assignment, in which case it has to be protected from sinkage

[16:01] <pmichaud> (oh, and the last statement isn't sunk, since it's the return value for the statement list)

[16:02] *** brrt left
[16:02] <moritz> except if the statementlist itself is in sink context

[16:03] <moritz> and binding shouldn't be sunk either

[16:03] *** cogno joined
[16:03] <pmichaud> at one point we had speculated that operators would be tagged as to whether or not they should be sunk

[16:03] <pmichaud> or, more generally, operator precedence levels

[16:04] <moritz> iirc after thinking more about it, I concluded that only PAST::Op call or callmethod needed to be sunk

[16:04] <moritz> s/or/and/

[16:04] <pmichaud> that feels odd-ish.

[16:04] <TimToady> op prec doesn't feel right to me

[16:05] <pmichaud> well, specifically the %item_assignment and %list_assignment levels

[16:05] <TimToady> => is at assignment level

[16:06] <TimToady> but should likely get "Useless use of => in sink context"

[16:06] <moritz> that's fine, pairs don't need to be sunk

[16:06] <TimToady> anything useless in sink context should be sunk :)

[16:06] <moritz> at least not for list iteration stuff

[16:07] <pmichaud> => doesn't seem to be an operator -- it's a term

[16:07] <pmichaud> its rhs is at %item_assignment, yes.

[16:09] <TimToady> in STD: token infix:sym« => » { <sym> <O(|%item_assignment, fiddly => 0)> }

[16:09] <pmichaud> ah, I didn't search for the space

[16:10] <pmichaud> maybe just list_assignment needs protection, then.   We don't want to sink    @a = .....

[16:11] *** ajs joined
[16:11] *** ajs is now known as Guest65939

[16:11] <pmichaud> 16:02 <moritz> except if the statementlist itself is in sink context

[16:12] <moritz> might not be necessary

[16:12] <pmichaud> I'm not sure that's an issue; if the statementlist is itself in sink context then its "caller" will sink it appropriately.

[16:12] <TimToady> @a X[+=] @b

[16:12] <moritz> if we just .sink the return value

[16:12] <Guest65939> Hey, I just wanted to drop in and say "congrats". I grabbed Rakudo Star from May and tried to do a quick parser proof of concept project with it. It worked flawlessly, using the JSON library as a guide.

[16:12] <pmichaud> Guest65939: thanks!  That's awesome to hear!

[16:12] <jnthn> Nice! :)

[16:13] <pmichaud> we're hoping June will be even nicer :-)

[16:13] <jnthn> June's will parse faster for anything with protoregexes, I suspect.

[16:13] <jnthn> May's shipped with the NQP implementation of the NFA runner.

[16:14] *** agentzh left
[16:14] <jnthn> (While June gets the C one.)

[16:15] *** raiph left
[16:15] *** harmil joined
[16:15] <moritz> it seems that JSON parsing has the right mixture of simplicity, size and real-worldness

[16:15] <harmil> (ajs here) … man, I never quite got the hang of IRC

[16:15] <harmil> anyway, yeah, nice and smooth.

[16:16] <moritz> I blatantly stole the idea of using JSON from "Real World Haskell"

[16:16] *** Guest65939 left
[16:16] <harmil> Only problem with JSON as a model was that it has no operator precedence concerns. My prototype didn't either, but now I'm trying to do a next pass, and re-remembering that all of PGE's nice optable stuff isn't yet available in rules.

[16:16] <spider-mario> I like reading YAML better, to be honest

[16:16] <spider-mario> but JSON is easier to parse.

[16:17] <moritz> spider-mario: well yes, I'm speaking about the implementation side, not the usability side :-)

[16:17] <TimToady> "The question is who's to be master, that's all."  --Humpty Dumpty

[16:18] <pmichaud> niecza handles precedence fiddling, iirc.

[16:18] <pmichaud> I wonder what it would take to fold that back into Rakudo, though.

[16:19] *** Chillance joined
[16:19] <spider-mario> <TimToady> @a X[+=] @b

[16:19] <spider-mario> isn’t that @a »=» [+] @b

[16:19] <spider-mario> ?

[16:19] *** ggoebel left
[16:19] <harmil> Hmm… perhaps I need to look into moving this project to Niecza, then. I really hate to have to build precedence rules manually.

[16:19] <TimToady> well, yes, but the point is that the precedence is not list assignment

[16:19] <jnthn> I'm not sure Niecza exposes EXPR to user-space either.

[16:20] <spider-mario> ok, sorry

[16:20] <moritz> harmil: does niecza expose the OPP to user space?

[16:20] <harmil> not sure

[16:20] <TimToady> the point of sink context is to compel evaluation of a side effect

[16:20] <pmichaud> oh, there is that too.

[16:20] <pmichaud> (no OPP to user space)

[16:20] <TimToady> "say" is a side effect

[16:20] <moritz> TimToady: which is why it returns something that's fine to sink

[16:21] *** sivoais joined
[16:21] <moritz> harmil: niecza allows custom precedence level for operators in Perl 6 code

[16:21] <moritz> harmil: maybe you're mixing up the two

[16:21] *** colomon joined
[16:21] <pmichaud> or maybe I mixed them up.

[16:21] <moritz> sorear will know :-)

[16:21] <pmichaud> I forgot that PGE basically provided EXPR services on arbitrary grammars

[16:22] <TimToady> moritz: but it's not always something fine to sink, if it wasn't a side effect, hence "Useless use of"

[16:22] <pmichaud> including operator precedence.  we don't have an equivalent in p6, except for p6's grammar

[16:22] <TimToady> we talked more than once about generalizing STD's EXPR, but hasn't happened yet...

[16:23] <harmil> moritz, someone just mentioned it might have better handling, but yeah, that's what I might expect. I guess I'll have to write out the precedence levels longhand. Cumbersome and annoying, but hey, I got a pony, I won't complain that its tail isn't long enough ;)

[16:23] <moritz> harmil: or write an operator precedence parser as a reusable module

[16:23] <moritz> harmil: publish it, and everybody will be happy

[16:23] <pmichaud> yes, I was just thinking that we ought to have a reusable module for that

[16:23] <harmil> moritz: I think you over-estimate the size of my tuits ;-)

[16:24] <pmichaud> I might be able to publish one.

[16:24] <moritz> TimToady: I was talking about say(), not the X[+=] case

[16:24] <TimToady> as I recall, there were only five or six bits of EXPR that were P6-specific

[16:24] <TimToady> and they have comments

[16:24] <TimToady> yes, they're labeled # XXX P6

[16:25] <pmichaud> porting STD's EXPR to a reusable rakudo module would be a good exercise to figure out what we're going to want to redo in NQP's EXPR equivalent

[16:26] <pmichaud> since NQP currently cheats in ways that are wrong

[16:29] <pmichaud> afk, lunch

[16:33] *** _twitch left
[16:34] *** MayDaniel joined
[16:38] *** ggoebel joined
[16:40] *** _twitch joined
[16:42] *** _twitch left
[16:44] *** ggoebel left
[16:46] *** _twitch joined
[16:49] *** kaleem joined
[16:56] *** _twitch left
[16:56] * moritz wants LEAVE blocks in NQP

[16:56] *** birdwindupbird left
[16:58] *** Facefox left
[16:59] *** crab2313 left
[16:59] * TimToady wants all of Perl 6 in NQP  :)

[16:59] *** Facefox joined
[17:01] <betterwo1ld> shouldn't it be called QP then?

[17:01] <moritz> it would

[17:01] <diakopter> Perl Indeed

[17:02] <geekosaur> did someone just win the qp doll?

[17:04] <harmil> I'd think it'd be NNQP

[17:05] <[Coke]> MTNQP

[17:05] *** fridim_ joined
[17:06] *** snearch joined
[17:06] *** dakkar left
[17:13] *** fibo joined
[17:13] <sorear> good * #perl6

[17:14] *** crab2313 joined
[17:17] <felher> wo/

[17:17] *** snearch left
[17:18] *** xinming_ joined
[17:21] *** cognominal___ joined
[17:21] *** xinming left
[17:22] *** cognominal_ left
[17:23] *** Facefox left
[17:28] *** Facefox joined
[17:28] *** Facefox left
[17:29] *** Facefox joined
[17:29] *** Facefox left
[17:32] *** Facefox joined
[17:32] *** Facefox left
[17:35] *** crab2313 left
[17:35] *** Facefox joined
[17:35] *** Facefox left
[17:35] *** MayDaniel left
[17:37] *** Facefox joined
[17:37] *** Facefox left
[17:37] *** Facefox joined
[17:40] *** cogno left
[17:47] <dalek> roast: 4222fe5 | moritz++ | S11-modules/import.t:

[17:47] <dalek> roast: rakudo unfudge

[17:47] <dalek> roast: review: https://github.com/perl6/roast/commit/4222fe5d41

[17:48] *** adu joined
[17:48] *** Tene joined
[17:52] *** cognominal_ joined
[17:54] *** cognominal___ left
[18:02] *** kaleem left
[18:02] *** GlitchMr left
[18:03] *** majrmovies joined
[18:07] <sorear> o/ majrmovies

[18:08] <majrmovies> o/ sorear!

[18:08] <majrmovies> Got version 1 of the Perl 6 WWW::Curl module working ..

[18:08] <majrmovies> Now I need to play with testing in Perl 6 and get it out to the world

[18:11] <daxim> links against libcurl?

[18:12] <tadzik> awesome

[18:13] <daxim> github or I don't believe it

[18:19] *** daxim left
[18:25] <dalek> rakudo/module-trace: 1b00e64 | moritz++ | src/Perl6/ModuleLoader.pm:

[18:25] <dalek> rakudo/module-trace: note end of module loading in debug mode

[18:25] <dalek> rakudo/module-trace: review: https://github.com/rakudo/rakudo/commit/1b00e6425e

[18:25] <dalek> rakudo/module-trace: 339771a | moritz++ | src/ (2 files):

[18:25] <dalek> rakudo/module-trace: start to trace module loading in a dynamic variable

[18:25] <dalek> rakudo/module-trace: review: https://github.com/rakudo/rakudo/commit/339771a1a8

[18:47] <majrmovies> daxim: yes, links agains libcurl

[18:47] <majrmovies> daxim: it is real!  I will publish it as soon as I write some tests.

[18:47] <moritz> ++majrmovies

[18:49] <harmil> Is there anything about the Grammar/Actions model that JSON::Tiny uses that isn't considered "best practice"? I was thinking about blogging about that model of writing a parser in Perl 6, and didn't want to perpetuate anything that's considered non-standard.

[18:49] <harmil> Something for later tonight, so no rush. Let me know if you think of anything.

[18:50] <moritz> harmil: I'm not aware of anything that violates "best practise"

[18:50] <dalek> rakudo/module-trace: b5d0d37 | moritz++ | src/ (2 files):

[18:50] <dalek> rakudo/module-trace: enable basic module traces in X::Comp

[18:50] <dalek> rakudo/module-trace: review: https://github.com/rakudo/rakudo/commit/b5d0d37b75

[18:50] <harmil> Well, for example, it seems to be falling out that writing actions inline isn't.

[18:51] <harmil> At least for full-fledged parsers. Clearly for smaller tools, it might make sense.

[18:52] <moritz> it's a question of modularity

[18:52] <harmil> aye

[18:52] <moritz> you have the option to provide different actions to the same grammar

[18:52] <moritz> if you keep them separate

[18:52] <moritz> though so far that's only a theory

[18:52] <TimToady> otoh, it makes it harder to have a hierarchy of grammars

[18:52] <moritz> I know of no Perl 6 grammar with multiple actions

[18:53] <moritz> and since both are tightly coupled, it's a bit weird to keep them separate

[18:53] <jnthn> imho it's just good OO

[18:53] <jnthn> Separation of responsibilities.

[18:54] <harmil> Interesting… OK, I won't make strong statements about "the one way to do it" then ;-)

[18:54] <TimToady> but it's kinda the forest of frogs problem

[18:54] *** fhelmberger_ left
[18:55] <harmil> And now I rat-hole into reading RFC 254 ;)

[18:58] <jnthn> That's the kinda problem that drives use of dependency inversion.

[18:58] <TimToady> nodnodnodnodnodoff & # one too many red-eyes

[19:00] <moritz> https://gist.github.com/2911966 # that's what the module-trace branch does

[19:00] <moritz> and what I want it to do in the end

[19:00] <pmichaud> I find separating actions and grammar useful because it keeps the "parsing" versus "do something" parts distinct

[19:00] <pmichaud> imagine if the contents of Actions.pm were somehow inlined into Grammar.pm, even for something as small as NQP

[19:01] <pmichaud> imo, it becomes a lot harder to read if they're integrated.

[19:01] <moritz> well

[19:01] <moritz> the actions are hard to read without having the grammar open at the same time

[19:01] <pmichaud> yes, they can be.

[19:01] <jnthn> moritz: Nice progress :)

[19:01] <moritz> I agree that the grammar is much easier to read without the actions

[19:01] <jnthn> moritz++

[19:02] * jnthn is working on the endianness issue in NQP

[19:02] <pmichaud> jnthn++

[19:02] <jnthn> Though...I have no access to a box to try it out on.

[19:02] <jnthn> So it's kinda coding blind :)

[19:03] <pmichaud> jnthn: did you see dukeleto's suggestion of something on the gcc compile farm?

[19:03] <jnthn> pmichaud: Ah, that could work, if I can be given access...

[19:04] <pmichaud> let

[19:04] <pmichaud> let's see if I can push that a long a bit

[19:04] <pmichaud> *along

[19:07] *** cognominal___ joined
[19:07] <pmichaud> jnthn: from dukeleto's email:  http://gcc.gnu.org/wiki/CompileFarm

[19:09] <pmichaud> looks like you can apply for an account and then you're set :)

[19:10] *** cognominal_ left
[19:11] <harmil> I guess the reason that I always thought actions and grammar should be separate is because you might want to use the grammar for things that don't involve actions (e.g. validation).

[19:12] *** ggoebel joined
[19:13] <pmichaud> harmil: that's another reason, yes.

[19:19] <dalek> nqp: b1226fb | jnthn++ | src/6model/serialization.c:

[19:19] <dalek> nqp: Try to unbust things on big endian platforms. Untested, but should do the trick.

[19:19] <dalek> nqp: review: https://github.com/perl6/nqp/commit/b1226fb1bf

[19:19] *** bluescreen10 left
[19:25] <PerlJam> jnthn: We don't have to worry about middle-endian?  (Does Parrot run on ARM?)

[19:26] <jnthn> OMG WHY?

[19:26] <tadzik> :)

[19:26] <tadzik> I thought it does

[19:26] <arnsholt> ARM is weird-endian?

[19:26] *** fgomez joined
[19:27] *** Facefox left
[19:27] <jnthn> I guess if people are crazy enough to think that writing dates as MM/DD/YY was a good idea, then yeah, I guess people can come up with middle endian too... :)

[19:28] *** Facefox joined
[19:28] <pmichaud> tmtowtei

[19:31] <moritz> jnthn: in ModuleLoader.pm, should the             pir::set_hll_global__vsP('GLOBAL', $preserve_global);

[19:31] <moritz> ... also go into a CATCH block?

[19:32] *** brrt joined
[19:32] <moritz> if we use a module, die in the progress and catch the exception, the GLOBAL might be messed up, no?

[19:32] <jnthn> I...don't see how that could fail

[19:32] <jnthn> Oh...

[19:32] <jnthn> Yeah, you're right.

[19:32] <moritz> ok, I'll do that in the branch

[19:34] *** bluescreen10 joined
[19:35] * moritz really wants something that recursively p6izes types through arrays and hashes

[19:36] *** _twitch joined
[19:38] <moritz> jnthn: one more thing; for the module trace I need to put the file name of the mainline onto the @*MODULES stack, but not when it's compiling a module. Where should I best put such code?

[19:39] <moritz> hm

[19:39] <moritz> otoh I also want to capture the line number where the module is being loaded

[19:39] * jnthn isn't sure he completely follows...

[19:40] <moritz> jnthn: I want to run code when the mainline is being compiled, but not when a module is being compiled

[19:40] <moritz> well

[19:41] <jnthn> moritz: Looking at if target is set can tell you that

[19:41] <jnthn> If you mean pre-comp

[19:41] * moritz mis-phrased

[19:41] <moritz> I have a file  foo.pl

[19:41] <moritz> which contains 'use A;'

[19:41] *** cognominal___ left
[19:41] <moritz> and I want to push 'foo.pl' onto a stack

[19:42] <moritz> but not A.pm when compiling A which was triggered by the 'use'

[19:42] *** cognominal joined
[19:42] <moritz> never mind, I think I know a better approach which also solves the problem of the line numbers

[19:42] <jnthn> OK :)

[19:42] * jnthn fixes an RT

[19:47] <dalek> rakudo/nom: 901f2a7 | jnthn++ | src/Perl6/Metamodel/MethodContainer.pm:

[19:47] <dalek> rakudo/nom: Fix duplicate method detection; don't boolify. Fixes the crappy error reporting for duplicate regex definitions in a grammar.

[19:47] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/901f2a7ee1

[19:48] *** fibo left
[19:49] *** birdwindupbird joined
[19:52] *** fgomez left
[19:54] *** fgomez joined
[19:55] <jnthn> pmichaud: https://rt.perl.org/rt3/Ticket/Display.html?id=112716 may be fixed now?

[19:55] <pmichaud> jnthn: looking

[19:56] <pmichaud> when I last checked, it wasn't fixed yet.

[19:56] <jnthn> ah, oK

[19:56] <pmichaud> There's still some eagerness in the system somewhere that I've got to find.

[19:56] <jnthn> I thought the map fix mighta been enough

[19:56] <jnthn> OK :)

[19:56] <pmichaud> it might be the "eager" that is added to the for loop that is doing it.

[19:57] * pmichaud pulls latest to test.

[20:02] <dalek> rakudo/nom: b12854a | jnthn++ | src/Perl6/Actions.pm:

[20:02] <dalek> rakudo/nom: Make .foo behave the same way as $_.foo does with regard to perl6ization of types.

[20:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b12854a978

[20:02] <jnthn> r: UNDO { say 'undone' }; die 'foo'

[20:02] <p6eval> rakudo eef772: OUTPUT«undone␤»

[20:03] <jnthn> r: do { UNDO say "undone"; die "foo" }

[20:03] <p6eval> rakudo eef772: OUTPUT«foo␤  in block <anon> at /tmp/EV_WPFkBhp:1␤␤»

[20:03] <jnthn> r: sub foo { UNDO say "undone"; fail }; foo; say "alive"

[20:03] <p6eval> rakudo eef772: OUTPUT«undone␤alive␤»

[20:06] *** icwiener joined
[20:13] <pmichaud> yes, it's the "eager" part that is causing the problem.  I'll need to think about it a bit, but I suspect the fix is easy-ish.

[20:13] <pmichaud> *is now causing

[20:18] *** jaldhar left
[20:19] *** _twitch left
[20:52] *** usv joined
[20:58] <moritz> nqp: my @a := [1, 2, 3]; say @a[-1];

[20:58] <p6eval> nqp: OUTPUT«Confused at line 2, near "say @a[-1]"␤current instr.: 'nqp;HLL;Grammar;panic' pc 22074 (src/stage2/gen/NQPHLL.pir:8456) (src/stage2/gen/NQPHLL.pm:326)␤»

[20:58] <moritz> nqp: my @a := [1, 2, 3]; say(@a[-1]);

[20:58] <p6eval> nqp: OUTPUT«3␤»

[20:59] *** usv left
[21:00] *** skids left
[21:00] *** espadrine_ joined
[21:01] *** kaare_ left
[21:04] <dalek> rakudo/module-trace: f97e562 | moritz++ | src/Perl6/ModuleLoader.pm:

[21:04] <dalek> rakudo/module-trace: restore GLOBAL if module loading failed

[21:04] <dalek> rakudo/module-trace: review: https://github.com/rakudo/rakudo/commit/f97e562eee

[21:04] <dalek> rakudo/module-trace: 3d9fa49 | moritz++ | src/Perl6/ (2 files):

[21:04] <dalek> rakudo/module-trace: pass the line number to the module loader

[21:04] <dalek> rakudo/module-trace: review: https://github.com/rakudo/rakudo/commit/3d9fa49592

[21:08] *** birdwindupbird left
[21:16] *** brrt left
[21:19] *** bluescreen10 left
[21:25] *** leprevost joined
[21:29] *** kurahaupo joined
[21:38] *** adu left
[21:39] *** sporous left
[21:40] *** sporous joined
[21:44] <moritz> how do I check if something is a parrot Hash?

[21:44] <moritz> (in nqp, that is)

[21:45] <jnthn> pir::isa

[21:46] *** PacoAir left
[21:53] <pmichaud> I don't mind if we introduce nqp::ishash, to correspond with nqp::islist (fwiw)

[22:03] *** spider-mario left
[22:03] *** fgomez left
[22:04] *** leprevost left
[22:05] *** tyatpi left
[22:07] *** fgomez joined
[22:10] *** fgomez left
[22:15] *** cognominal left
[22:16] *** cognominal joined
[22:20] *** Gothmog_ left
[22:21] *** sftp left
[22:21] *** ashleydev left
[22:23] *** odoacre left
[22:23] *** jevin left
[22:23] *** _ilbot left
[22:23] *** pmichaud left
[22:25] *** diakopter left
[22:25] *** jfried left
[22:25] *** timotimo left
[22:29] *** Grrrr left
[22:29] *** bonsaikitten joined
[22:29] *** takesako_ joined
[22:29] *** Gothmog__ joined
[22:29] *** sftp_ joined
[22:29] *** ashleyde1 joined
[22:29] *** carlin_ joined
[22:29] *** odoacre_ joined
[22:29] *** pmichaud_ joined
[22:29] *** jevin_ joined
[22:29] *** diakopte1 joined
[22:29] *** timotimo_ joined
[22:29] *** _jfried joined
[22:29] *** Vlavv_ left
[22:29] *** Vlavv_ joined
[22:29] *** TimToady_ joined
[22:29] *** stepnem left
[22:29] *** Gruber joined
[22:29] *** buubot_backup_ joined
[22:29] *** drbean left
[22:29] *** buubot_backup_ is now known as buubot_backup

[22:29] *** Gothmog__ is now known as Gothmog_

[22:29] *** icwiener left
[22:30] *** ggoebel left
[22:30] *** ranguard left
[22:30] *** Gruber is now known as Grrrr

[22:30] *** whiteknight joined
[22:30] *** pjcj left
[22:30] *** whiteknight is now known as Guest64866

[22:31] *** domidumont left
[22:31] *** felher left
[22:31] *** fridim_ left
[22:31] *** zb left
[22:31] *** stepnem joined
[22:32] *** ranguard joined
[22:32] *** moritz joined
[22:32] *** telex joined
[22:32] *** betterwo1ld left
[22:32] *** Facefox left
[22:33] *** zb joined
[22:33] *** fgomez joined
[22:33] *** betterworld joined
[22:34] *** timotimo_ left
[22:35] *** ggoebel joined
[22:35] *** _ilbot joined
[22:36] *** domidumont joined
[22:37] *** pjcj joined
[22:37] *** drbean joined
[22:40] *** Facefox joined
[22:40] *** timotimo joined
[22:42] <dalek> rakudo/module-trace: 22f512d | moritz++ | src/Perl6/ModuleLoader.pm:

[22:42] <dalek> rakudo/module-trace: add line numbers where module loading occurs

[22:42] <dalek> rakudo/module-trace: review: https://github.com/rakudo/rakudo/commit/22f512dc24

[22:42] <dalek> rakudo/module-trace: 7812723 | moritz++ | src/ (3 files):

[22:42] <dalek> rakudo/module-trace: p6ize module trace in World and pass it to the exception

[22:42] <dalek> rakudo/module-trace: 

[22:42] <dalek> rakudo/module-trace: it almost works, but the hashes seem to get flattend out

[22:42] <dalek> rakudo/module-trace: review: https://github.com/rakudo/rakudo/commit/7812723944

[22:44] *** felher joined
[22:45] <moritz> r: say [pir::perl6ize_type(nqp::hash()), pir::perl6ize_type(nqp::hash())].perl

[22:45] <p6eval> rakudo b12854: OUTPUT«use of uninitialized value of type Mu in string context  in any <anon> at src/gen/BOOTSTRAP.pm:104␤␤use of uninitialized value of type Mu in string context  in any <anon> at src/gen/BOOTSTRAP.pm:104␤␤===SORRY!===␤error:imcc:The opcode 'perl6ize_type_p' (perl6ize_ty…

[22:46] <moritz> r: say [pir::perl6ize_type__PP(nqp::hash()), pir::perl6ize_type__PP(nqp::hash())].perl

[22:46] <p6eval> rakudo b12854: OUTPUT«[]␤»

[22:53] *** timotimo left
[22:53] *** timotimo joined
[22:54] <dalek> rakudo/module-trace: d53986b | moritz++ | src/ (2 files):

[22:54] <dalek> rakudo/module-trace: itemize hashes in p6ize_recursive; remove debugging output

[22:54] <dalek> rakudo/module-trace: 

[22:54] <dalek> rakudo/module-trace: Now the output looks like I wanted it

[22:54] <dalek> rakudo/module-trace: review: https://github.com/rakudo/rakudo/commit/d53986b173

[22:56] *** Facefox left
[22:56] *** diakopte1 is now known as diakopter

[22:57] *** Facefox joined
[23:16] *** skids joined
[23:30] *** PZt joined
[23:32] *** fgomez left
[23:48] *** majrmovies left
[23:50] *** libertyprime left
[23:54] *** fgomez joined
[23:59] *** Guest64866 left
