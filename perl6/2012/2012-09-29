[00:00] <johnjohn101> about time for the yearly checkin on this board

[00:00] <johnjohn101> soon?

[00:03] <sorear> huh?

[00:03] <sorear> what are you talking about?

[00:04] <johnjohn101> is this finished yet?

[00:04] <sorear> is what finished yet

[00:04] <johnjohn101> perl 6?

[00:04] <sorear> perl 6 will never be finished, that's a stupid question

[00:04] <TimToady> perl 5 isn't finished yet

[00:05] <sorear> it's like asking when the us gov't will finish paving our highways

[00:05] <masak> johnjohn101: is there anything special you'd like us to work on?

[00:06] <johnjohn101> i was just curious if odbc  and/or json is working with the current version

[00:06] <TimToady> jnthn++ gave a talk on json yesterday

[00:07] <masak> as far as I know, the JSON::Tiny module is working.

[00:07] <sorear> thank you, that'as a much better question.

[00:07] <johnjohn101> anything that I can look at?

[00:07] <sorear> json is well supported

[00:07] <sorear> odbc, not so much

[00:07] <sorear> we do have a couple database access modules

[00:07] <TimToady> there's DBIish so far

[00:08] <sorear> but I don't think any of them support the Open Database Connector

[00:08] <masak> how does Niecza do on databases?

[00:08] <felher> pmichaud: nope, >>This is perl6 version 2012.09.1 built on parrot 4.8.0 revision RELEASE_4_8_0-83-g2922c18<< has not fixed my '$*IN.get' problem :)

[00:08] <sorear> masak: there's no special support but you can use one of the fifteen million .net database libs if you want

[00:08] <pmichaud> felher: okay, that's about what I expected.  Thanks for the test, it's very helpful.

[00:08] <felher> pmichaud: np :)

[00:08] <pmichaud> (you can go back to --gen-parrot=RELEASE_4_7_0 now :)

[00:08] <masak> sorear: ah. that should work.

[00:09] <johnjohn101> will i have to be running perl 6 on linux or is there any for win32?

[00:09] <TimToady> jnthn++ was demoing on Windows

[00:09] <sorear> there is a rakudo core dev (jnthn) on Windows

[00:09] <felher> pmichaud: kk. Let me know if you need some other tests :)

[00:09] <masak> TimToady: am I to understand you're in Tokyo?

[00:10] <sorear> rakudo star makes MSIs, right?

[00:10] <TimToady> well, I'm about 250 feet above Tokyo

[00:10] * masak 's powers of deduction still seem to work at 2 o'clock in the night

[00:11] <sorear> TimToady: is that a building or a plane?

[00:12] <felher> oh, yeah, 2 o'clock. good point. Good night, folks :)

[00:12] <TimToady> 24th floor of a 40 story building, where the Pauley's live

[00:15] <johnjohn101> do you have any quick links to any perl 6 vids on the next?

[00:15] <jnthn> morning, #perl6

[00:15] <johnjohn101> how soon to production ready?

[00:15] <jnthn> sorear: If the plane is only 250ft above Tokyo, I really don't wanna be on it! :P

[00:16] <masak> johnjohn101: production ready isn't an absolute. as for me, it was two years ago.

[00:16] <TimToady> please define "production"; ready for some things, enough to have 450 working rosettacode.org examples

[00:16] <masak> 'night, #perl6

[00:18] <jnthn> bah, these people who go to bed when I'm getting up :P

[00:21] <johnjohn101> I'm still running a lot of perl 5 stuff including countless win32 services and scheduled processes in win32 and linux.  Not really sure where/when I want to start messing with perl 6.  all is working fantastic now.

[00:21] <jnthn> johnjohn101: Somewhere that Perl 6 makes things easier.

[00:24] <sorear> jnthn: when planes are landing, I prefer their altitude to be a continuous function of time, it's really disconcerting to go directly from 251 to 249

[00:25] <sorear> also that can get you in trouble with special relativiity

[00:29] *** dayangkun joined
[00:29] *** dayangkun left
[00:29] *** hypolin joined
[00:31] <mikemol> TimToady: I think the recent change to documenting breaking changes will go a long way to making people more comfortable to use it in production. And if breaking changes can be warned of in advance, it'll go further. I think what's really being looked for is easily measurable evidence that breaking changes happen farther and farther apart.

[00:31] * mikemol struggles over 'farther' vs 'further'

[00:45] *** PacoAir left
[00:47] *** tokuhir__ left
[00:48] *** tokuhir__ joined
[00:50] * TimToady heads toward venue where he can only read IRC, not write it...

[00:51] *** tokuhir__ left
[00:51] <sorear> read-only irc?

[00:51] <sorear> why would they do such a thing

[00:53] <diakopter> TimToady: :P use http://webchat.freenode.net/?channels=perl6&nick=TimToady___

[00:54] *** ChanServ sets mode: +o sorear

[00:55] <sorear> huh, I thought we banned freenode webchat

[00:55] *** sorear sets mode: -o sorear

[00:55] <diakopter> I hope not

[00:55] *** diakopter___ joined
[00:55] <diakopter___> o hai

[00:56] *** diakopter___ left
[01:02] *** anuby joined
[01:03] <sorear> o/ anuby

[01:04] <diakopter> sorear: the reason I say I hope not is the prominent link to it on perl6.org and that we do get visitors from there somewhat regularly

[01:11] <shachaf> I've been in situations where my connection to the server that runs my IRC client became read-only.

[01:12] <shachaf> Incoming packets only, not outgoing.

[01:12] <sorear> shachaf: PONG

[01:13] <sorear> you cannot have a one-way irc connection

[01:13] <sorear> unless there's deep packet butchering going on to allow PONG but remove PRIVMSG

[01:13] <shachaf> sorear: Not my IRC connection, my connection to the server that ran my IRC client.

[01:13] <shachaf> (It also prevents switching windows in irssi.)

[01:14] <sorear> were you still able to send ACK packets?  what happens with the TCP window fills up?

[01:15] <shachaf> I don't remember the exact situation but it's possible I was using mosh, whih uses UDP?

[01:24] <jnthn> pmichaud: Discovered a regex compiler bug while working on p5regex, it seems

[01:24] <jnthn> r: say 'abcde' ~~ /$<x>=[<?>]de/

[01:24] <p6eval> rakudo 7d227d: OUTPUT«#<failed match>␤»

[01:25] <jnthn> pmichaud: An empty subcapture busts scanning

[01:25] <jnthn> pmichaud: I don't immediately see why; any suggestions welcome :)

[01:29] <dalek> nqp: 9c348a6 | jonathan++ | src/QRegex/P5Regex/ (2 files):

[01:29] <dalek> nqp: Support empty positional captures.

[01:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9c348a6532

[01:29] <dalek> nqp: e579e8e | jonathan++ | t/p5regex/rx_captures:

[01:29] <dalek> nqp: Test empty captures in p5regex.

[01:29] <dalek> nqp: 

[01:29] <dalek> nqp: Includes a failing test for when one is at the start, which breaks

[01:29] <dalek> nqp: scanning.

[01:29] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e579e8e5f8

[01:32] *** Targen joined
[01:39] *** johnjohn101 left
[01:52] *** _jaldhar_ joined
[02:00] *** whiteknight left
[02:01] <jnthn> heading to conf venue &

[02:11] *** psch left
[02:11] *** ZhiweiChen joined
[02:12] <ZhiweiChen> anybody here?

[02:12] *** ZhiweiChen left
[02:31] *** Targen left
[02:46] *** cognominal left
[02:47] *** orafu left
[02:47] *** orafu joined
[02:51] *** cognominal joined
[02:53] *** _jaldhar_ left
[02:55] *** _jaldhar_ joined
[02:57] *** ggoebel left
[03:03] *** kst` joined
[03:06] *** groky left
[03:06] *** kst left
[03:06] *** groky joined
[03:43] *** drbean left
[03:44] *** drbean joined
[03:50] *** sudokode left
[03:54] *** arlinius joined
[04:04] *** araujo left
[04:15] *** Chillance left
[04:16] *** Chillance joined
[04:21] <Timbus> ehhh, rakudo is doing funny stuff w/r/t strings pulled from a socket again

[04:22] <Timbus> my $line = $conn.get.encode('utf-8').decode('utf8') is currently needed to not crash my bot

[04:23] <Timbus> running 'lc $line' without the encode+decode results in parrot spitting an error: Invalid operation on binary string

[04:24] <Timbus> just thought id let someone know

[04:27] *** am0c joined
[04:35] *** telex left
[04:36] *** Chillance left
[04:36] *** telex joined
[04:38] <sorear> Timbus: I think it's pretty well known at this point that sockets are borken in rakudo

[04:38] <Timbus> yes :/

[04:49] *** am0c_ joined
[04:53] *** am0c left
[05:15] *** birdwindupbird joined
[05:19] *** felher left
[05:26] *** mucker joined
[05:32] *** rking joined
[05:42] *** cognominal left
[05:45] *** sudokode joined
[05:47] *** cognominal joined
[05:59] *** rking left
[06:01] *** rking joined
[06:01] *** mucker left
[06:17] *** anuby left
[06:25] *** thou left
[06:31] *** rurban left
[06:32] *** stepnem joined
[06:37] <moritz> arnsholt: zavolaj tests fail on linux :(

[06:37] <moritz> t/04-pointers.t ........ Cannot locate native library './04-pointers'

[06:37] <moritz> same for all the tests

[06:37] <moritz> it doesn't seem to append the .so properly

[06:37] <moritz> but nativecall does work for installed .so files

[06:39] *** cognominal left
[06:40] *** rurban joined
[06:40] <moritz> no, I retract that statement

[06:41] <moritz> ok 2 - MiniDBD::Pg version 0.01

[06:41] <moritz> # Connect failed with error Cannot locate native library 'libpq'

[06:43] <dalek> DBIish: c3ef1ca | moritz++ | lib/DBDish/Pg.pm6:

[06:43] <dalek> DBIish: [Pg] escape connection params

[06:43] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/c3ef1ca852

[06:43] <dalek> DBIish: 86e1381 | moritz++ | lib/DBDish/Pg.pm6:

[06:43] <dalek> DBIish: [Pg] factor out library name into a constant

[06:43] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/86e1381d54

[06:46] *** thou joined
[06:47] *** cognominal joined
[06:52] *** cognominal left
[06:52] <dalek> DBIish: 6efd237 | moritz++ | Makefile:

[06:52] <dalek> DBIish: unbust installation with current rakudo

[06:52] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/6efd237220

[06:54] *** fgomez left
[06:54] <dalek> DBIish: 44c09e2 | moritz++ | lib/DBDish/Pg.pm6:

[06:54] <dalek> DBIish: [Pg] make lib a lexical constant

[06:54] <dalek> DBIish: 

[06:54] <dalek> DBIish: also changed it to libpq.so for now, becaues that works on my system

[06:54] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/44c09e2613

[06:56] *** am0c_ left
[06:58] *** cognominal joined
[06:58] *** FROGGS joined
[07:00] *** flightrecorder joined
[07:03] *** kaare__ joined
[07:08] *** fgomez joined
[07:08] *** thou left
[07:08] *** thou joined
[07:19] *** thou left
[07:25] <dalek> DBIish: 1cb4082 | moritz++ | lib/DBDish (2 files):

[07:25] <dalek> DBIish: quote-identifier

[07:25] <dalek> DBIish: review: https://github.com/perl6/DBIish/commit/1cb4082d04

[07:34] <tadzik> good morning

[07:35] <moritz> good morning tadzik 

[07:35] <moritz> my micro ORM now supports inserting an object :-)

[07:36] <tadzik> nice :)

[07:37] *** Patterner left
[07:39] *** Psyche^ joined
[07:39] *** Psyche^ is now known as Patterner

[07:39] <moritz> and insertion already limits it to postgres (or firebird)

[07:39] <moritz> because I do the INSERT INTO table (...) VALUES (...) RETURING id; stunt

[07:40] <moritz> \o/ updating works too

[07:42] <moritz> but I guess that selecting is the hard part

[07:44] *** birdwindupbird left
[07:45] *** GlitchMr joined
[07:53] *** TimToady___ joined
[07:53] <sorear> greetings, TimToady___

[07:53] <TimToady___> nr: my $x = 12345; sprintf "%02d:%02d:%02d", (($x,$x,$x Z/ 3600,60,1) X% 60);

[07:53] <sorear> my, Larry, what a huge tail you have!

[07:53] <p6eval> niecza v22-6-g9e5350d: OUTPUT«Unhandled exception: index out of range␤  at /home/p6eval/niecza/lib/CORE.setting line 1303 (sprintf @ 4) ␤  at /tmp/X5RpaYg1y_ line 1 (mainline @ 6) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4198 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting …

[07:53] <p6eval> ..rakudo 7d227d:  ( no output )

[07:54] <TimToady___> nr: my $x = 12345; say sprintf "%02d:%02d:%02d", (($x,$x,$x Z/ 3600,60,1) X% 60);

[07:54] <p6eval> niecza v22-6-g9e5350d: OUTPUT«Unhandled exception: index out of range␤  at /home/p6eval/niecza/lib/CORE.setting line 1303 (sprintf @ 4) ␤  at /tmp/OQUAGD8JgD line 1 (mainline @ 6) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4198 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting …

[07:54] <p6eval> ..rakudo 7d227d: OUTPUT«03:25:45␤»

[07:54] <TimToady___> nieczabug

[07:54] <TimToady___> nr: my $x = 12345; say sprintf "%02d:%02d:%02d", |(($x,$x,$x Z/ 3600,60,1) X% 60);

[07:54] <p6eval> rakudo 7d227d, niecza v22-6-g9e5350d: OUTPUT«03:25:45␤»

[07:54] <TimToady___> shouldn't need the |

[07:54] <sorear> I agree

[08:04] <TimToady___> http://rosettacode.org/wiki/Averages/Mean_time_of_day#Perl_6

[08:06] <GlitchMr> 59?

[08:06] <GlitchMr> Something is wrong

[08:07] <TimToady___> 59 what?

[08:07] <GlitchMr> '59:47:43 is the mean time of 23:00:17 23:40:20 00:12:45 00:17:19'

[08:07] <TimToady___> oh, I see

[08:08] <GlitchMr> 59:47:43

[08:09] <moritz> did you ever divide by the number of elements?

[08:09] <GlitchMr> I like Perl 6 solution, but 59 doesn't seem right

[08:10] <GlitchMr> (but I like PicoLisp solution more)

[08:10] <TimToady___> fixed

[08:11] <GlitchMr> Now it feels correct

[08:11] <TimToady___> I wish we had base 60 :)

[08:12] <TimToady___> :60[$h,$m,$s] oughta work...

[08:13] <moritz> r: say :60[2, 2]

[08:13] <p6eval> rakudo 7d227d: OUTPUT«===SORRY!===␤Malformed radix number␤at /tmp/pCLz7pnmCC:1␤»

[08:14] <moritz> n: say :60[2, 2]

[08:14] <p6eval> niecza v22-6-g9e5350d: OUTPUT«Unhandled exception: :16[...] syntax NYI␤  at /home/p6eval/niecza/lib/CORE.setting line 1437 (die @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3595 (unbase @ 8) ␤  at /tmp/rud_jdIfia line 1 (mainline @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting l…

[08:14] <moritz> std: say :60[2, 2]

[08:14] <p6eval> std 77327a4: OUTPUT«ok 00:00 44m␤»

[08:15] <moritz> r: say :16('a', '4')

[08:15] <p6eval> rakudo 7d227d: OUTPUT«Nominal type check failed for parameter '$str'; expected Str but got Parcel instead␤  in sub unbase at src/gen/CORE.setting:4620␤  in block  at /tmp/psWWEhOA45:1␤␤»

[08:15] <moritz> should that work too?

[08:15] <GlitchMr> If numbers like :36<Z12.E> work, what stops us from having :60[]?

[08:16] <moritz> doing it

[08:16] <GlitchMr> :60[] syntax actually would be very simple

[08:16] <moritz> (the notable difference is that :36<...> accepts strings, and :60[] would accepts ints)

[08:17] <TimToady___> and ($x % 86400).base(60).join(':')  :D

[08:18] <TimToady___> well, need to sneak %02d in there somehow :)

[08:21] <TimToady___> nr: (1,2,3).fmt('%02d',':').say

[08:21] <p6eval> rakudo 7d227d, niecza v22-6-g9e5350d: OUTPUT«01:02:03␤»

[08:22] <GlitchMr> https://gist.github.com/3803486

[08:22] <GlitchMr> This is my lamest implementation of that

[08:23] <GlitchMr> Hmmm... it could use [+]

[08:24] <moritz> nr: https://gist.github.com/3803486

[08:24] <p6eval> niecza v22-6-g9e5350d: OUTPUT«Potential difficulties:␤  &from-base is declared but not used at /tmp/KO2HlpQNr8 line 1:␤------> sub from-base⏏($base, *@arrayish) {␤␤»

[08:24] <p6eval> ..rakudo 7d227d:  ( no output )

[08:24] <GlitchMr> I will put some examples into Gist, ok?

[08:24] *** Raimiss joined
[08:24] <moritz> you can even do without **

[08:25] <GlitchMr> nr: https://gist.github.com/3803486

[08:25] <moritz> by using the Horner schema of polynome evaluation

[08:25] <p6eval> rakudo 7d227d, niecza v22-6-g9e5350d: OUTPUT«15299␤42314087␤»

[08:25] <GlitchMr> ok... that code looks bad

[08:25] <GlitchMr> I mean... $base ** * * *

[08:25] <GlitchMr> Too many stars!

[08:26] <GlitchMr> Why is it even a star and not something like $?

[08:26] <GlitchMr> $base ** $ * $

[08:26] <GlitchMr> ok... $ is ugly too

[08:27] <GlitchMr> Or...

[08:27] <GlitchMr> $base ** ? * ?

[08:29] <GlitchMr> ? is used in languages like SQL

[08:35] <moritz> use { $base ** $^a * $^b } if you think the * is ugly

[08:37] *** birdwindupbird joined
[08:38] <masak> good morning, #perl6

[08:39] <masak> GlitchMr: if you write code and then complain that it's bad because it's unmaintainable, there's always a way to re-write it to be less unmaintainable. you just have to find it.

[08:39] <masak> GlitchMr: the point of power features and sugary syntax is not to use all of it all the time. it's to make programs more pleasurable to read.

[08:40] <sorear> o/ masak

[08:40] <masak> sorear: \o

[08:41] <masak> GlitchMr: if your use of the feature or sugar fails that test, the fault doesn't necessarily sit with the feature or syntax as such.

[08:41] <huf> also, if a thing cant be misused, it cant be too useful :)

[08:42] <masak> right. "enough rope".

[08:48] *** cognominal left
[08:51] *** am0c joined
[08:51] <TimToady___> p6 has now come within 50 entries of p5 on RC :D

[08:52] <TimToady___> 460 vs 509

[08:52] <GlitchMr> :-)

[08:52] <GlitchMr> Perl 6 is future.

[08:53] <TimToady___> we just need to implement 'use v5' and we can catch up...

[08:53] <GlitchMr> I'm not sure, but when Perl 5 will be fully implemented in Perl 6, Perl 5 would be past.

[08:54] *** araujo joined
[08:54] *** araujo left
[08:54] *** araujo joined
[08:54] <GlitchMr> But that also would depend on performance. Perl 6 would have to be faster.

[08:54] <GlitchMr> But, well... Perl 6 is already fast enough.

[08:55] <GlitchMr> Perl 5 is really slow with lots of modules loaded

[08:55] *** cognominal joined
[08:57] <sorear> loading more modules doesn't make perl 5 slower

[08:57] <GlitchMr> oh, right

[08:57] <GlitchMr> It's just init time

[08:57] <GlitchMr> and memory usage

[08:58] <GlitchMr> For example, (made in Catalyst) DuckDuckGo's Community Platform uses 250MB of memory and makes responses in 0.02s.

[08:58] <GlitchMr> It's rather huge.

[08:59] <GlitchMr> I meant, 110MB of memory

[09:00] <GlitchMr> Except, I have feeling that is has memory leak somewhere because every time I press F5 memory usage increases by 100KB.

[09:07] *** Moukeddar joined
[09:08] *** kaare__ left
[09:09] *** Moukeddar left
[09:10] *** Moukeddar joined
[09:11] *** felher joined
[09:14] *** spider-mario joined
[09:21] <TimToady___> http://rosettacode.org/wiki/Time_a_function#Perl_6

[09:27] <masak> TimToady++

[09:31] *** Moukeddar_ joined
[09:32] *** hypolin left
[09:33] *** Moukeddar_ left
[09:34] *** Moukeddar_ joined
[09:34] *** Moukeddar left
[09:38] *** cognominal left
[09:40] *** cognominal joined
[09:44] <diakopter> TimToady___: a'howdy

[09:45] *** MayDaniel joined
[09:46] *** birdwindupbird left
[09:50] *** Raimiss left
[09:56] *** spider-mario left
[09:57] *** spider-mario joined
[09:58] *** spider-mario left
[09:58] *** spider-mario joined
[10:07] *** cognominal left
[10:10] *** cognominal joined
[10:15] <moritz> DBD::Pg's $sth.execute segfaults here :(

[10:16] <moritz> https://gist.github.com/3803633 # backtrace

[10:17] <moritz> segfault in __strlen_sse2

[10:17] <masak> so, taking the length of something that doesn't exist?

[10:21] <masak> maybe a premature free somewhere or something.

[10:21] <TimToady___> dinner &

[10:21] *** TimToady___ left
[10:22] *** brrt joined
[10:23] *** whiteknight joined
[10:30] *** Moukeddar_ left
[10:33] *** brrt left
[10:42] <GlitchMr> Just wondering, does Perl 6 have something like http://www.php.net/manual/en/function.array-chunk.php

[10:42] <GlitchMr> In PHP, array_chunk(array(1, 2, 3, 4, 5), 2) gives array(array(1, 2), array(3, 4), array(5))

[10:46] <masak> doing 'for @array -> $x, $y?' gives you something a little like that.

[10:47] <tadzik> r: my @a = 1, 2, 3, 4, 5; @a.map( -> $x, $y? { [$x, $y] }).perl.say

[10:47] <p6eval> rakudo 7d227d: OUTPUT«([1, 2], [3, 4], [5, Mu]).list␤»

[10:47] <tadzik> bah, almost

[10:48] <masak> rn: my @a1 = 1..5; my @a2 = @a1.map -> $x, $y? { [$x, ($y if defined $y)] }; say @a2.perl

[10:48] <p6eval> niecza v22-6-g9e5350d: OUTPUT«===SORRY!===␤␤Unexpected block in infix position (method call needs colon or parens to take arguments) at /tmp/3YsfinStpW line 1:␤------> my @a1 = 1..5; my @a2 = @a1.map ⏏-> $x, $y? { [$x, ($y if defined $y)] };␤␤Parse f…

[10:48] <p6eval> ..rakudo 7d227d: OUTPUT«===SORRY!===␤Confused␤at /tmp/TA7f17FlCD:1␤»

[10:48] <masak> rn: my @a1 = 1..5; my @a2 = @a1.map: -> $x, $y? { [$x, ($y if defined $y)] }; say @a2.perl

[10:48] <p6eval> niecza v22-6-g9e5350d: OUTPUT«[[1, 2], [3, 4], [5]].list␤»

[10:48] <p6eval> ..rakudo 7d227d: OUTPUT«Array.new([1, 2], [3, 4], [5])␤»

[10:48] <masak> \o/

[10:49] <masak> of course, this could all be generalized and put into a builtin. but I don't know how big the need for one is.

[10:49] <GlitchMr> It's one of nicer PHP functions. It could be used for stuff like https://github.com/duckduckgo/zeroclickinfo-goodies/blob/master/lib/DDG/Goodie/TimezoneConverter.pm

[10:49] <GlitchMr> Where %timezones table was generated using script.

[10:50] <masak> I doubt it'll end up in core.

[10:50] <GlitchMr> :-(

[10:50] <masak> maybe it could be put in List::Utils.

[10:51] <tadzik> well, is-prime is core, so why no array_chunks

[10:52] <masak> I'd rather see us getting good S09 support.

[10:52] <masak> maybe something like array_chunks would fall out of how we fill shaped arrays.

[10:52] <GlitchMr> Perhaps .shape?

[10:53] <masak> right.

[10:53] <masak> the problem with array_chunks (besides the quite horrible name) is probably that it isn't thinking big enough :)

[10:54] <GlitchMr> In certain cases PHP functions are worse

[10:54] <GlitchMr> http://www.php.net/manual/en/function.array-change-key-case.php

[10:54] <GlitchMr> Lowercases/uppercases every hash key?

[10:54] <GlitchMr> what?

[10:55] <masak> ok, so maybe array_chunks isn't horrible by PHP standards. that wasn't my point, though.

[10:56] <masak> PHP is perhaps *the* deterrent example of failing to generalize useful features into a coherent language API.

[10:56] <GlitchMr> Also, it's array_chunk, not array_chunks because somebody fails at naming

[10:57] <GlitchMr> Actually, 99% of PHP functions have very specific usage case.

[10:57] <GlitchMr> I find it interesting that I find array_chunk in that 1%

[11:00] <GlitchMr> PHP has only 4962 functions.

[11:00] <GlitchMr> According to http://www.php.net/quickref.php

[11:00] <GlitchMr> ok... 4961 functions... delete() isn't actually function

[11:01] <GlitchMr> Why they call it quickref when it's worse than doc.perl6.org? I've no idea.

[11:03] <GlitchMr> (my PHP 5.4 has only 1350 functions from that list, but it's lots of functions)

[11:04] <masak> GlitchMr: http://www.tnx.nl/php.html

[11:05] *** Su-Shee joined
[11:05] <GlitchMr> 3079 functions?

[11:05] <GlitchMr> Why they are still adding functions

[11:06] <GlitchMr> Note that Perl has short syntax equivalents for some functions:

[11:06] <GlitchMr> readpipe('ls -l') ==> `ls -l`

[11:06] <GlitchMr> Actually, PHP also has backticks. Not that anybody uses them.

[11:07] <GlitchMr> Why Perl has backticks anyways?

[11:08] <masak> I believe it's a borrowing from shell.

[11:08] *** Su-Shee_ left
[11:09] <GlitchMr> Also "Walking a list": 10 functions

[11:09] <GlitchMr> It's worse today

[11:09] <GlitchMr> Also... preg_grep()? What?

[11:09] <GlitchMr> Let me guess, it's attempt at copying grep /regexp/, @array; syntax from Perl?

[11:10] <GlitchMr> This is crazy

[11:10] * masak stops looking at that page because it makes him too sad

[11:11] <GlitchMr> This... is crazy

[11:11] <GlitchMr> http://www.php.net/manual/en/function.gzgetss.php

[11:11] <GlitchMr> gzgetss —  Get line from gz-file pointer and strip HTML tags

[11:11] <GlitchMr> Yeah...

[11:11] <BinGOs> An infinity number of monkeys does not a works of Shakespear always make.

[11:12] <GlitchMr> It does PHP?

[11:12] <BinGOs> it seems so.

[11:12] <BinGOs> Synergy failure.

[11:12] <masak> well.

[11:12] <GlitchMr> Why I would want to get line from GZIP file and strip HTML tags O_o?

[11:13] <masak> the thing I find interesting is how such language design sloppiness then reflects on the entire community, its people, and its code.

[11:13] <GlitchMr> That's... really specific usage case

[11:13] <GlitchMr> I wonder if anybody actually needed to do it

[11:14] <GlitchMr> Could it be worse...

[11:15] <GlitchMr> Well... I guess it could

[11:15] <GlitchMr> http://www.php.net/manual/en/function.array-map.php

[11:15] <GlitchMr> http://www.php.net/manual/en/function.array-filter.php'

[11:15] <GlitchMr> Look at arguments order

[11:15] <GlitchMr> I wonder how they have managed to screw arguments order of similar functions so much

[11:37] *** cognominal left
[11:42] *** cognominal joined
[11:44] *** kaare__ joined
[11:46] *** am0c left
[12:08] *** cognominal left
[12:10] *** cognominal joined
[12:25] *** cognominal left
[12:38] *** whiteknight left
[12:53] *** odoacre left
[12:54] *** odoacre joined
[13:15] *** cognominal joined
[13:23] *** grondilu joined
[13:23] *** grondilu left
[13:25] *** cognominal left
[13:51] <dalek> nqp: a4febda | jonathan++ | src/QRegex/P5Regex/Actions.nqp:

[13:51] <dalek> nqp: Try to get quantified captures righter.

[13:51] <dalek> nqp: review: https://github.com/perl6/nqp/commit/a4febdaeb6

[13:51] <dalek> nqp: ea7a053 | jonathan++ | t/p5regex/rx_captures:

[13:51] <dalek> nqp: A few more capture tests.

[13:51] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ea7a053ee9

[13:51] <dalek> nqp: 9a42dc5 | jonathan++ | src/QRegex/P5Regex/ (2 files):

[13:51] <dalek> nqp: Various bits of alignment with STD_P5.

[13:51] <dalek> nqp: 

[13:51] <dalek> nqp: This also allows the empty alternation branch.

[13:51] <dalek> nqp: review: https://github.com/perl6/nqp/commit/9a42dc5ec4

[13:51] <dalek> nqp: 5c4d6b2 | jonathan++ | / (3 files):

[13:51] <dalek> nqp: Implement backreferences.

[13:51] <dalek> nqp: review: https://github.com/perl6/nqp/commit/5c4d6b2786

[13:52] <jnthn> evenin'

[13:54] <dalek> rakudo/nom: d14be4f | jonathan++ | src/Perl6/Actions.pm:

[13:54] <dalek> rakudo/nom: Use the P5Regex qbuildsub when needed.

[13:54] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/d14be4fa2e

[13:58] *** cognominal joined
[13:59] <masak> jnthn! \o/

[14:00] <jnthn> masak! \o.

[14:00] <jnthn> */

[14:01] <dalek> Perlito: 2144d48 | (Flavio S. Glock)++ | / (4 files):

[14:01] <dalek> Perlito: Perlito5 - js3 - die() shows stack trace

[14:01] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/2144d485e1

[14:03] <nyuszika7h> I guess dalek is a bot?

[14:03] *** cognominal left
[14:04] <moritz> does anybody know what became of mst's plans to do remote code execution with rakudo?

[14:04] <moritz> nyuszika7h: you guess correctly

[14:04] <jnthn> o/ moritz 

[14:05] <moritz> jnthn o/

[14:06] <moritz> curious: my segfaulting DBIish example "works" under valgrind

[14:06] <jnthn> Hm

[14:06] <moritz> and inserts an empty string instead of the proper one in the last column

[14:06] <jnthn> moritz: Sounds...fun

[14:07] <masak> moritz: I think he's still working on it, albeit slowly.

[14:08] <[Coke]> sounds like an off by one error, moritz 

[14:08] <[Coke]> or is it /just/ the last one?

[14:08] <[Coke]> actually, even then, sounds like an off by one.

[14:09] <moritz> [Coke]: it does. But the insert before it, which goes through the same code path, works fine

[14:09] <moritz> so it's not something trivial

[14:10] *** cognominal joined
[14:11] <[Coke]> O_o

[14:11] <moritz> oh, and valgrind shows a write error roughly at the same spot where the segfault would otherwise be

[14:12] <colomon> sounds promising.

[14:13] <moritz> https://gist.github.com/3803633#file_valgrind.txt

[14:14] <dalek> Perlito: c0ab727 | (Flavio S. Glock)++ | / (3 files):

[14:14] <dalek> Perlito: Perlito5 - js3 - "use", eval-string work

[14:14] *** cognominal_ joined
[14:14] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/c0ab7275e4

[14:14] <[Coke]> AHA! progress on the partcl-nqp thing.

[14:15] <[Coke]> needed to walk away from it for a bit, apparently, as this seems like an obvious issue I should have noticed.

[14:16] <jnthn> yay :)

[14:16] *** cognominal left
[14:17] <jnthn> r: say 'abcde' ~~ /$<x>=[c]de/

[14:17] <p6eval> rakudo d14be4: OUTPUT«｢cde｣␤ x => ｢c｣␤␤»

[14:18] <jnthn> hm.

[14:20] *** PacoAir joined
[14:21] <jnthn> moritz: Could it be that strings get freed right after a call?

[14:24] <moritz> jnthn: I have no idea. Could be, probably.

[14:27] <moritz> execute uses explicitly managed strings

[14:27] <moritz> maybe prepare needs that too

[14:28] <moritz> doesn't seem to help :(

[14:29] *** isBEKaml joined
[14:30] <isBEKaml> OHHAI, #perl6! 

[14:30] *** _jaldhar_ left
[14:30] <masak> isBEKaml! \o/

[14:31] <TimToady> ohaiō

[14:31] <isBEKaml> hello, masak and TimToady! How's things?

[14:32] <TimToady> winding down from YAPC::Asia here

[14:33] <isBEKaml> Oh, YAPCs - great. :)

[14:34] <TimToady> looks like we get a typhoon tomorrow evening, though probably only a tropical storm by then

[14:35] * masak .oO( this conference literally blew me away )

[14:47] <isBEKaml> rn: (1,2,8,9).pick(2).say

[14:47] <p6eval> rakudo d14be4: OUTPUT«8 2␤»

[14:47] <p6eval> ..niecza v22-6-g9e5350d: OUTPUT«1 9␤»

[14:50] *** isBEKaml left
[14:51] *** xinming left
[14:52] *** xinming joined
[15:03] *** grondilu joined
[15:05] <grondilu> Hello

[15:06] <grondilu> say I want to use a function in openssl using NativeCall.  Here's my attempt with sha-1:  http://paste.siduction.org/20120929150447

[15:08] *** isBEKaml joined
[15:08] <grondilu> this gives me "Malformed UTF-8 String":  http://paste.siduction.org/20120929150746

[15:08] <grondilu> Was I too naïve in thinking it would be easy?

[15:11] *** _jaldhar_ joined
[15:12] <[Coke]> r: my %h = 1=>2; for keys %h -> $key { say($key) }

[15:12] <p6eval> rakudo d14be4: OUTPUT«1␤»

[15:12] <moritz> grondilu: what does the function return, exactly?

[15:12] <[Coke]> nqp: my %h = 1=>2; for keys %h -> $key { say($key) }

[15:12] <p6eval> nqp: OUTPUT«Assignment ("=") not supported in NQP, use ":=" instead at line 2, near " 1=>2; for"␤current instr.: 'panic' pc 19999 (src/stage2/gen/NQPHLL.pir:7315) (src/stage2/gen/NQPHLL.pm:324)␤»

[15:12] <[Coke]> nqp: my %h := 1=>2; for keys %h -> $key { say($key) }

[15:12] <p6eval> nqp: OUTPUT«Assignment ("=") not supported in NQP, use ":=" instead at line 2, near ">2; for ke"␤current instr.: 'panic' pc 19999 (src/stage2/gen/NQPHLL.pir:7315) (src/stage2/gen/NQPHLL.pm:324)␤»

[15:12] <[Coke]> nqp: my %h := 1,2; for keys %h -> $key { say($key) }

[15:12] <p6eval> nqp: OUTPUT«get_iter() not implemented in class 'Float'␤current instr.: '' pc 162 ((file unknown):80) (/tmp/Wrg16hw2b9:1)␤»

[15:13] <moritz> nqp: my %h := (1 => 2); for %h -> $x { say($x) }

[15:13] <p6eval> nqp: OUTPUT«Assignment ("=") not supported in NQP, use ":=" instead at line 2, near "> 2); for "␤current instr.: 'panic' pc 19999 (src/stage2/gen/NQPHLL.pir:7315) (src/stage2/gen/NQPHLL.pm:324)␤»

[15:13] <[Coke]> nqp: my %h; %h{1}=2; for keys %h -> $key { say($key) }

[15:13] <p6eval> nqp: OUTPUT«Assignment ("=") not supported in NQP, use ":=" instead at line 2, near "2; for key"␤current instr.: 'panic' pc 19999 (src/stage2/gen/NQPHLL.pir:7315) (src/stage2/gen/NQPHLL.pm:324)␤»

[15:13] <moritz> nqp: my %h :=hash('a', 1) for %h -> $x { say($x) }

[15:13] <p6eval> nqp: OUTPUT«Confused at line 2, near "my %h :=ha"␤current instr.: 'panic' pc 19999 (src/stage2/gen/NQPHLL.pir:7315) (src/stage2/gen/NQPHLL.pm:324)␤»

[15:13] <moritz> nqp: my %h :=hash('a', 1); for %h -> $x { say($x) }

[15:13] <p6eval> nqp: OUTPUT«too many positional arguments: 2 passed, 0 expected␤current instr.: 'hash' pc 1327 (src/stage2/gen/NQPCORE.setting.pir:593) (src/stage2/NQPCORE.setting:379)␤»

[15:13] <moritz> nqp: my %h :=hash('a', 1); for %h { say($_) }

[15:13] <p6eval> nqp: OUTPUT«too many positional arguments: 2 passed, 0 expected␤current instr.: 'hash' pc 1327 (src/stage2/gen/NQPCORE.setting.pir:593) (src/stage2/NQPCORE.setting:379)␤»

[15:13] <moritz> nqp: my %h :=hash( a => 1); for %h { say($_) }

[15:13] <p6eval> nqp: OUTPUT«a␤»

[15:14] <[Coke]> danke.

[15:14] <moritz> [Coke]: nqp only parses => inside an argument list, it seems

[15:14] <moritz> and otherwise complains about it being assignment

[15:16] <[Coke]> oooh. I just made partcl-nqp segfault.

[15:17] <[Coke]> ... it's all nqp (and pir) at this point.

[15:17] <grondilu> moritz: Not sure.  The expected digest, I guess.  .

[15:18] <grondilu> http://www.openssl.org/docs/crypto/sha.html

[15:18] <pmichaud> good morning, #perl6

[15:19] <moritz> unsigned char *SHA1(const unsigned char *d, unsigned long n, unsigned char *md);

[15:20] <dalek> star: 82e4f16 | pmichaud++ | tools/star/Makefile:

[15:20] <dalek> star: Update Makefile for revised nqp/star/parrot release.

[15:20] <dalek> star: review: https://github.com/rakudo/star/commit/82e4f16126

[15:20] <moritz> zavolaj expects a zero-terminated UTF-8 string, if nothing else is specified

[15:21] <jnthn> grondilu: You can configure the encoding that comes back, iirc

[15:21] <moritz> if that returns byte string of fixed length, you cannot use Str as return value

[15:21] <moritz> *returns a byte string

[15:22] <moritz> you can use an CArray[Int], and do some post-processing

[15:22] <jnthn> moritz: by default, but there's an "is encoding" trait

[15:22] *** stopbit joined
[15:22] <moritz> jnthn: but that doesn't help much for a fixed-width byte string, does it?

[15:23] *** _jaldhar_ left
[15:23] <jnthn> moritz: Probably not, no

[15:25] <grondilu> wouldn't it be simpler if I could specify Buf instead of Str?

[15:26] *** _jaldhar_ joined
[15:26] <jnthn> Yes

[15:27] <jnthn> But afaik that's not implemented yet

[15:27] <jnthn> And Buf would want to know the length too

[15:27] <moritz> it dosn't help much with the size problem either

[15:27] <grondilu> It doesn't ask a length with Str, so I don't see any size problem.

[15:28] <moritz> what "it" are you talking about?

[15:28] <jnthn> grondilu: Only because it assumes zero terminated and gets the length from that.

[15:28] <grondilu> Oh, ok.

[15:29] <dalek> star: fce2bfa | pmichaud++ | docs/announce/2012.09:

[15:29] <dalek> star: Update release announcement with 2012.09.1 compiler release information.

[15:29] <dalek> star: review: https://github.com/rakudo/star/commit/fce2bfa573

[15:30] <moritz> oh, and the SHA1 function does what th know the length (in bytes, I guess)

[15:31] *** cognominal_ left
[15:31] <jnthn> sleep time o/

[15:32] *** cognominal_ joined
[15:33] <dalek> star: 8c409fd | pmichaud++ | modules/ (3 files):

[15:33] <dalek> star: Update modules to current head settings.

[15:33] <dalek> star: review: https://github.com/rakudo/star/commit/8c409fdc78

[15:34] <moritz> grondilu: though if you want to get the SHA1, you can use nqp::sha1 in rakudo

[15:35] <grondilu> I don't really want sha1, I want to learn how to use NativeCall.

[15:35] <moritz> ok

[15:37] <masak> #perl6: I'm going on a two-week vacation without much hope of a solid Internet connection. my participation in stuff is likely to be very spotty. take care.

[15:37] <moritz> masak: good luck, and good travel

[15:37] <masak> thank you.

[15:37] <isBEKaml> masak: have a good vacation. 

[15:37] <moritz> masak: and have an inappropriate amount of fun :-)

[15:37] <masak> :P

[15:37] <pmichaud> masak: bon voyage

[15:37] *** blueblue_ joined
[15:41] <isBEKaml> .u 263A

[15:41] <phenny> U+263A WHITE SMILING FACE (☺)

[15:41] *** cognominal_ left
[15:42] <moritz> star: use NativeCall; sub SHA1(Str, Int, OpaquePointer) returns CArray[int] is native('libssl.so') { ... }; my @a := SHA1("foo\n", 4, Any); say @a[0]

[15:42] <p6eval> star 2012.07: OUTPUT«-103623951␤»

[15:43] <moritz> that's the first 4 bytes of the SHA1 as a signed integer

[15:43] <moritz> star: use NativeCall; sub SHA1(Str, Int, OpaquePointer) returns CArray[int] is native('libssl.so') { ... }; my @a := SHA1("foo\n", 4, Any); say @a[^4]

[15:43] <p6eval> star 2012.07: OUTPUT«-103623951 -1400444636 -1275593338 -541289364␤»

[15:44] <moritz> now you "just" have to do the right bitshift and extraction operations to get the bytes

[15:44] *** blueblue_ left
[15:47] <grondilu> moritz: impressive.  Thanks.

[15:47] <moritz> grondilu: you're welcome

[15:49] *** cognominal joined
[15:50] <dalek> Perlito: 634599e | (Flavio S. Glock)++ | / (4 files):

[15:50] <dalek> Perlito: Perlito5 - parser - test end of term

[15:50] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/634599ee4c

[15:51] *** isBEKaml left
[15:55] *** benabik left
[15:56] *** benabik joined
[15:57] *** grondilu left
[15:59] <[Coke]> is there a way to write this in nqp:

[15:59] <[Coke]> Q:PIR { $P1 = getinterp %r = $P1['sub'; 1] }

[16:00] *** supernovus joined
[16:00] <[Coke]> pir::getinterp__P ... but then how to do the 2 part key index?

[16:00] <supernovus> A quick question, is it possible to export constants from a module?

[16:01] <moritz> supernovus: yes, since quite recently

[16:01] <moritz> [Coke]: I know that key indexes weren't supported in NQP for a long time; not sure if they are now

[16:02] <[Coke]> barring that, is there a way to do a multiline Q::Pir in evalbot?

[16:02] <moritz> [Coke]: in fact rakudo has Q:PIR block for exactly that reason

[16:02] <[Coke]> r; say "something so I can get a newline"

[16:02] <moritz> r: say 'something'

[16:02] <p6eval> rakudo d14be4: OUTPUT«something␤»

[16:02] <moritz> ␤ is translated to newline in input too

[16:03] <supernovus> moritz: thanks, I think the rakudo on my netbook is too old, as it seemed to work from my workstation yesterday but it has a brand new build on it.

[16:03] <moritz> r:  Q:PIR {␤say 'foo'; %r = 12␤ }

[16:03] <p6eval> rakudo d14be4: OUTPUT«use of uninitialized value of type Mu in string context␤use of uninitialized value of type Mu in string context␤===SORRY!===␤error:imcc:syntax error, unexpected ';', expecting '\n' (';')␤       in file '(file unknown)' line 65␤␤»

[16:04] <moritz> r:  Q:PIR {␤say 'foo' %r = 12␤ }

[16:04] <p6eval> rakudo d14be4: OUTPUT«use of uninitialized value of type Mu in string context␤use of uninitialized value of type Mu in string context␤===SORRY!===␤error:imcc:syntax error, unexpected PREG, expecting '\n' ('$P5005')␤ in file '(file unknown)' line 65␤␤»

[16:04] <moritz> r:  Q:PIR {␤say 'foo'␤ %r = 12␤ }

[16:04] <p6eval> rakudo d14be4: OUTPUT«foo␤Null PMC access in set_integer_native()␤  in block  at /tmp/3q24gP4sS7:1␤␤»

[16:04] <moritz> r: my int $i = Q:PIR {␤say 'foo'␤ %r = 12␤ }

[16:04] <p6eval> rakudo d14be4: OUTPUT«foo␤Null PMC access in set_integer_native()␤  in block  at /tmp/RKBgqwqWdR:1␤␤»

[16:04] <moritz> oh, %r is a PMC

[16:05] <moritz> r:  Q:PIR {␤say 'foo'␤ %r = getinterp  }

[16:05] <p6eval> rakudo d14be4: OUTPUT«foo␤»

[16:05] <pmichaud> Q:PIR only knows how to return PMCs

[16:06] * moritz is glad he nearly never has to touch PIR anymore

[16:07] *** supernovus left
[16:07] * [Coke] is trying to figure out how to iterate over a parrot namespace object from nqp.

[16:08] <moritz> NQP solves this problem by not using parrot namespaces

[16:08] <pmichaud> for $namespace { say($_.key); say($_.value); }  

[16:08] <moritz> or at least rakudo does

[16:08] <moritz> I#d expect namespace to inherit from Hash; then that'll work

[16:08] <pmichaud> should work, if   "iter $namespace" works.

[16:09] <pmichaud> iirc, namespace doesn't inherit from Hash

[16:09] <pmichaud> oh, it does

[16:09] <pmichaud> so yes, it should be same as iterating a hash

[16:13] <dalek> Perlito: a23a8c9 | (Flavio S. Glock)++ | src5/lib/Perlito5/Javascript3/CORE.pm:

[16:13] <dalek> Perlito: Perlito5 - js3 - fix rindex()

[16:13] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/a23a8c9513

[16:13] <dalek> Perlito: f00c69a | (Flavio S. Glock)++ | / (2 files):

[16:13] <dalek> Perlito: Perlito5 - js3 - numify before math functions

[16:13] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/f00c69a2a1

[16:13] <[Coke]> I need to look something up in the caller's namespace.

[16:14] <[Coke]> is that possible with straight NQP?

[16:14] <pmichaud> using pir:: it's possible

[16:14] *** Pleiades` left
[16:14] <[Coke]> (i was getting the parrot interp, and trying to look things up in it, but if nqp isn't putting things in parrot namespaces... 

[16:15] <pmichaud> oh, yeah

[16:15] <moritz> [Coke]: you can go through the backtrace, which has the subroutine object

[16:16] <pmichaud> I don't know if we really have the concept of subs-belonging-to-namespaces

[16:21] *** Pleiades` joined
[16:23] <[Coke]> ... urk

[16:25] <pmichaud> I mean, clearly a (package) namespace can contain subs... but the sub doesn't necessarily know what namespace it is in

[16:28] <pmichaud> I'm afk... bbbl

[16:30] *** supernovus joined
[16:33] <supernovus> There, SCGI v2.0 is released. It requires a Perl 6 implementation capable of exporting constants. Next up FastCGI v1.0 which will have an identical class layout and compatible API (and thus will be compatible with WWW::App out of the box.)

[16:36] <dalek> Perlito: 604d457 | (Flavio S. Glock)++ | / (2 files):

[16:36] <dalek> Perlito: Perlito5 - js3 - dereference lvalues inside core functions ("js3" bootstraps now)

[16:36] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/604d45794c

[17:00] <[Coke]> nqp question: if I define a sub in a .pm, use that .pm, should I be able to call that sub from anywhere after the use?

[17:00] <[Coke]> does there need to be an export in there somewhere?

[17:02] *** Pleiades` left
[17:03] *** zby_home joined
[17:04] <[Coke]> (er, no, you cannot invoke it.)

[17:04] <[Coke]> ... and yes, "is export" exposes it. whee.

[17:07] *** Pleiades` joined
[17:08] <[Coke]> ... but only in my simple program, still not found in partcl. argh.

[17:09] *** aindilis joined
[17:19] *** xinming left
[17:20] <[Coke]> here's a summary of my current nqp blocker: https://gist.github.com/3804636

[17:21] <moritz> [Coke]: I guess b.nqp needs "use a;"

[17:21] <[Coke]> if I dont' use the class, it works. if I use the class, but make it inline, it works. with this, the class is found, the method is found, but then the method can't find the sub.

[17:21] <moritz> nqp doesn't complain at compile time about unknown subroutines

[17:21] <moritz> which is why you only notice it at runtime

[17:21] *** xinming joined
[17:22] <[Coke]> arglebargle.

[17:22] <[Coke]> this means I have to "use" every single partcl command in the dispatcher.

[17:22] <[Coke]> moritz++ # that did it.

[17:23] <moritz> if you put them all in separate files, yes

[17:23] <dalek> Perlito: 85c7700 | (Flavio S. Glock)++ | / (2 files):

[17:23] <dalek> Perlito: Perlito5 - js3 - use fetch() consistently

[17:23] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/85c7700881

[17:25] <flussence> python 3.3 release notes: "we had two different unicode string types until now!" - eww.

[17:26] <moritz> I just skimmed the excerpt of that on slashdot, and it sounded like it contained backwards incompatible changes

[17:26] <moritz> is that usual for minor releases in python?

[17:27] <[Coke]> moritz: well, the commands are current 3K lines of nqp, and getting longer.

[17:28] <[Coke]> but I can concat them all into a single file, I suppose.

[17:28] <moritz> that's what rakudo does for the setting

[17:28] <[Coke]> (as part of the build)

[17:28] <moritz> or you could take a middle ground, and group related built-ins

[17:28] <moritz> and compile them separately, and then use each

[17:29] <moritz> I hate it that I have to recompile the whole setting in rakudo each time I touch a single built-in

[17:29] <[Coke]> the number of incompatible changes between nqps is pretty daunting.

[17:32] *** Tetha_ joined
[17:34] *** xinming left
[17:36] *** xinming joined
[17:37] <[Coke]> moritz: doing all the deps right between builtins will also be a pain, at least for partcl

[18:01] <[Coke]> what scoping does "our" use in nqp?

[18:02] <diakopter> it's changed

[18:02] <diakopter> recently jnthn fixed it

[18:02] <[Coke]> er, s/use/provide/ - in parrot-nqp it was apparently more global.

[18:02] <diakopter> it used to simulate export

[18:02] <diakopter> now it doesn't

[18:03] <[Coke]> I want to create a variable that I can reference everywhere; 

[18:04] <diakopter> I *think* you'll have to use a lexical and then an exported sub to access it

[18:04] <diakopter> but I could be way wrong

[18:05] <diakopter> maybe variables can be exported too.

[18:05] <diakopter> nqp: our $a is export;

[18:05] <p6eval> nqp: OUTPUT«Method 'name' not found for invocant of class 'NQPMu'␤current instr.: '' pc 147201 (src/stage2/gen/NQP.pir:51645) (src/stage2/gen/NQP.pm:2603)␤»

[18:06] <diakopter> o.O

[18:06] <diakopter> NOT QUITE

[18:06] <[Coke]> if I have an exported sub that returns the variable (a hash), will I be able to modify it?

[18:07] <diakopter> assign to the variable or assign to keys in the hash

[18:07] <[Coke]> keys in hash

[18:07] <diakopter> I don't see why not

[18:10] <diakopter> hm. Dr. Stroustrup isn't replying immediately to my email. He must be busy. ;)

[18:17] <dalek> Perlito: 6f9e32c | (Flavio S. Glock)++ | / (2 files):

[18:17] <dalek> Perlito: Perlito5 - js3 - extract proxy classes from Scalar

[18:17] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/6f9e32c96d

[18:18] <supernovus> SCGI was an easy protocol to implement. FastCGI on the other hand... ugh.

[18:19] *** armitage_ joined
[18:21] *** armitage_ left
[18:26] *** supernovus left
[18:27] <[Coke]> argh. so, what is the advantage of locking down scopes in the new nqp? 

[18:29] <moritz> mostly that bootstrapping is saner

[18:29] <moritz> if you compile NQP with NQP, then both the compiler and the compiled program will have classes of the same name

[18:29] <moritz> and you don't want them to collide

[18:30] <[Coke]> It's a mazy of twisty dependencies.

[18:30] <[Coke]> *maze

[18:30] <doy> bootstrapping typically is

[18:30] <doy> (:

[18:30] <[Coke]> doy: Yes, but I am not bootstrapping.

[18:31] <[Coke]> I'm just trying to use the already built NQP.

[18:32] *** birdwindupbird joined
[18:33] <GlitchMr> Python 3.3.0: can I get sane explanation of 'yield from' syntax?

[18:33] <[Coke]> are INIT {} blocks guaranteed to run only once now matter how many times you use the files they are in? (nqp)

[18:36] <GlitchMr> Also, http://www.python.org/dev/peps/pep-0414/ - I wonder why it wasn't supported since beginning

[18:36] <[Coke]> ah, generating invalid PIR: https://gist.github.com/3804636

[18:37] <moritz> nqp: INIT { say("nice, IN'IT?") }

[18:37] <p6eval> nqp: OUTPUT«nice, IN'IT?␤»

[18:37] <moritz> so, not that simple

[18:39] <[Coke]> you need to compile to PIR and have it included twice.

[18:40] <[Coke]> er, not twice, necessarily: c's "use b" and b's "use a" is enough to trigger it.

[18:41] <[Coke]> (even if c doesn't explicitly use a)

[18:54] <moritz> does it go away if c has 'use a;' before 'use b;'?

[18:58] <[Coke]> no, that's the initial config which also errored.

[19:00] <[Coke]> ARG. so I have to initialize this lexical in an INIT block. but for the exported sub to see it, it has to be in teh same file. so I have to use this file wherever I use the imported sub. which means I'm double-use'ing the "INIT" block, which boom.

[19:01] <[Coke]> Any suggestions?

[19:02] <japhb> TimToady, re: http://irclog.perlgeek.de/perl6/2012-09-29#i_6026394 :

[19:02] <japhb> r: my ($h, $m, $s) = 20, 52, 4; say +":60[$h,$m,$s]";

[19:02] <p6eval> rakudo d14be4: OUTPUT«75124␤»

[19:02] <japhb> We do have base 60 ... in Str.Numeric.  ;-)

[19:03] <moritz> std: say :60[1, 2, 3]

[19:03] <p6eval> std 77327a4: OUTPUT«ok 00:00 44m␤»

[19:08] <japhb> Did jnthn++ post his talk(s) yet?

[19:14] <mathw> o/

[19:14] <moritz> if it's not at the usual place, probably not

[19:14] <moritz> \o mathw 

[19:16] <mathw> hi moritz

[19:18] *** Tanktalus left
[19:18] *** bbkr1 joined
[19:18] <sorear> good * #perl6

[19:19] <mathw> good @times-of-day.pick

[19:19] <mathw> i must admit to not being entirely sure what time of day it actually is. I don't believe the clock.

[19:22] <mathw> naps == bad

[19:28] *** armitage81 joined
[19:32] *** Tanktalus joined
[19:34] <[Coke]> phenny, tell jnthn I'm currently stuck on https://github.com/perl6/nqp/issues/56

[19:34] <phenny> [Coke]: I'll pass that on when jnthn is around.

[19:45] *** ServerSage joined
[19:45] <[Coke]> I pushed the latest WIP to partcl-nqp/nqp2

[19:46] <sorear> cute bug

[19:46] <moritz> fwiw I've implemented :60[1, 2] locally

[19:46] <moritz> waiting for the spectests to finish

[19:47] <[Coke]> the dispatcher is now smart enough to find one of the builtin commands, just dying on [puts] because my information about channels was stored in an our variable.

[19:48] <[Coke]> sorear: my bug is cute?

[19:49] <sorear> yes

[19:51] <dalek> rakudo/nom: 8365f1b | moritz++ | src/ (3 files):

[19:51] <dalek> rakudo/nom: implement integer case of :60[...]

[19:51] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8365f1bc81

[19:52] <dalek> roast: d1e3c67 | moritz++ | S02-literals/radix.t:

[19:52] <dalek> roast: unfudge two tests for rakudo

[19:52] <dalek> roast: review: https://github.com/perl6/roast/commit/d1e3c67d15

[19:53] <[Coke]> heh. now that it's reported, sure. :)

[19:53] <[Coke]> I did get further today than I have in weeks, though, so that's nice.

[19:55] <moritz> LHF: write a sub unbase_brackets that can deal with a dot

[19:55] <moritz> eg :60[1, '.', 1, 1]

[20:05] *** bbkr1 left
[20:10] *** supernovus joined
[20:12] <supernovus> Another quick question. Is there a way to specify a binary value directly? For instance this no longer works in a world with Buf: $buf ~= "\x00" x 2  

[20:14] <supernovus> nm, I found a usable solution:  $buf ~= ("\x00" x 2).encode

[20:15] *** Chillance joined
[20:16] *** cognominal_ joined
[20:17] *** cognominal left
[20:22] *** Tanktalus left
[20:22] <supernovus> And my FastCGI library is now dead in the water. I may finish the Protocol class, but it's no use going any further.

[20:23] <sorear> supernovus: um, you realize that rakudo's socket bugs will be fixed eventually?

[20:23] <sorear> IO::Socket::INET won't be useless forever

[20:24] <supernovus> sorear: I didn't realize it was useless now?

[20:24] <sorear> oh, I thought you were quitting FastCGI because of socket issues

[20:25] *** GlitchMr left
[20:25] <supernovus> No, FastCGI is going on hold due to pack() not being fully implemented yet. It seems Str.unpack is more complete than pack()...

[20:26] <supernovus> I will write the library as if pack/unpack were fully functional, that way once they are, the library will be ready to go :-)

[20:30] *** Tetha_ left
[20:31] *** supernovus left
[20:32] *** cognominal_ left
[20:33] *** ServerSage left
[20:35] <flussence> I've been putting off a website because I couldn't decide which perl to use... looks like I can start now :<

[20:35] *** zby_home left
[20:35] *** Tanktalus joined
[20:36] *** cognominal joined
[20:38] *** ServerSage joined
[20:38] *** bbkr1 joined
[20:39] <mathw> I wrote a site in Perl recently

[20:39] <mathw> it was nice, although I was wishing for Perl 6 from time to time

[20:44] *** bbkr1 left
[20:44] *** cognominal left
[20:51] *** cognominal joined
[20:55] *** armitage81 left
[20:58] *** kaare__ left
[21:03] *** cognominal left
[21:10] *** armitage81 joined
[21:11] *** tomaw left
[21:11] *** armitage81 left
[21:12] *** tomaw joined
[21:12] *** armitage81 joined
[21:12] *** cognominal joined
[21:23] *** cognominal left
[21:25] *** armitage81 left
[21:32] *** cognominal joined
[21:35] *** birdwindupbird left
[21:42] *** cognominal left
[21:46] *** tgt joined
[21:48] *** cognominal joined
[21:59] *** fgomez left
[22:16] *** tgt left
[22:16] *** Targen joined
[22:17] <TimToady> INIT should run only once regardless of how many times its surrounding context is exectuted

[22:24] <TimToady> it's just supposed to be a BEGIN analog at run time

[22:24] *** preflex left
[22:25] *** preflex joined
[22:25] <TimToady> [Coke]: and presumably nqp should work the same as p6 in that regard

[22:33] <raiph> TimToady: Am I right in saying there's a version of STD, or more specifically STD_P5, that's a compiler, not just a parser?

[22:34] <jnthn> [Coke]: NQP kinda cheats on INIT, so it probably does the Wrong Thing...

[22:34] <phenny> jnthn: 19:34Z <[Coke]> tell jnthn I'm currently stuck on https://github.com/perl6/nqp/issues/56

[22:35] <japhb> jnthn, are there slides from your talk(s)?

[22:36] <jnthn> [Coke]: Will look into it

[22:36] <jnthn> japhb: Thanks for the reminder...will get them up, probably this evening.

[22:37] <japhb> jnthn, ah cool, thank you

[22:39] <jnthn> japhb: Though tbh it's mostly annotated code snippets from modules

[22:40] <japhb> annotations++ # Besides, given how long until video comes out ...

[22:41] <jnthn> [Coke]: OK, the cheating is not the cause of the bug I guess

[22:41] <jnthn> Hm

[22:41] <jnthn> [Coke]: Uh, oh...

[22:41] <jnthn> When you use a module, its body is run and thus its INITs to at the moment

[22:42] <jnthn> [Coke]: Instead of

[22:42] <TimToady> raiph: nope

[22:42] <jnthn> nqp --target=pir b.nqp > b.pir

[22:42] <jnthn> try

[22:42] <jnthn> nqp --target=pir --output=b.pir b.nqp

[22:42] <raiph> TimToady: thanks

[22:42] <TimToady> raiph: you're probably thinking of the fact that STD compiles p6 down to p5

[22:43] <TimToady> and you can probably get it to emit p5 from the p5, but that would just be compiling p5 to p5 :)

[22:48] <jnthn> &

[22:48] * TimToady too

[22:50] <raiph> TimToady: I'm curious about Perl 6 efforts toward A) optimization, B) parallel execution, and C) P5 integration, one day being relevant to attempts to speed up Perl 5

[22:50] *** fgomez joined
[22:50] <raiph> TimToady: heh. later.

[22:55] <japhb> raiph, Note that speeding up pure Perl 5 is not the same as speeding up XS-compatible perl5.  I think only pure Perl 5 is currently being attempted; the best way to get true XS compatibility is likely just to embed perl5, and then you're not speeding anything up.

[22:56] *** cognominal left
[22:57] *** cognominal joined
[23:02] *** cognominal left
[23:02] *** preflex left
[23:03] *** cognominal joined
[23:05] *** preflex joined
[23:10] *** wk left
[23:11] <pmichaud> http://pmichaud.com/sandbox/rakudo-star-2012.09-rc2.tar.gz  # release candidate 2 for rakudo star 2012.09 -- testing welcomed

[23:11] <pmichaud> I get failures with panda, though.

[23:12] <pmichaud> https://gist.github.com/3805399   # failed tests for panda in star 2012.09

[23:13] <pmichaud> if anyone can help out with fixing panda, that'd be... helpful.  :-)

[23:13] <pmichaud> I'm afk again for a bit

[23:13] <japhb> pmichaud, perl6 not found?

[23:13] <japhb> That seems ... odd

[23:13] <[Coke]> jnthn++

[23:13] <japhb> Not in PATH?

[23:13] *** cognominal left
[23:14] <raiph> japhb: Thanks.

[23:15] <japhb> raiph, np

[23:15] <[Coke]> jnthn: of course, I was already building partcl that way (just not my examples). now to find out what I misgolfed. :)

[23:24] *** cognominal joined
[23:35] *** Tanktalus left
[23:36] <flussence> r: say $?ENC; $?ENC = 'ascii'; say '€'.encode.perl;

[23:36] <p6eval> rakudo 8365f1: OUTPUT«===SORRY!===␤Variable $?ENC is not declared␤at /tmp/TTSRdO4ej0:1␤»

[23:36] <flussence> well that shoots down the awful idea I was thinking about :)

[23:43] *** cognominal left
[23:44] <flussence> (implicit lazy Buf<->Str conversions, which would probably be better done as-needed using 'handles *')

[23:45] *** benabik left
[23:48] *** FROGGS left
[23:48] *** flightrecorder left
[23:48] *** MikeFair_ left
[23:49] *** Tanktalus joined
[23:51] <[Coke]> yay! it all builds, all the weird errors are gone... and now it segfaults regularly. ;)

[23:57] *** spider-mario left
