[00:05] *** preflex_ joined
[00:06] *** preflex left
[00:06] *** preflex_ is now known as preflex

[00:07] <masak> I'll take that as a compliment.

[00:07] <tadzik> heh, I didn't even think about a connection with you :)

[00:08] *** simcop2387 left
[00:11] *** robinsmidsrod left
[00:11] *** simcop2387 joined
[00:11] *** zostay_ left
[00:12] *** zostay joined
[00:12] *** revdiablo left
[00:12] *** robins joined
[00:13] *** revdiablo joined
[00:13] *** revdiablo left
[00:13] *** revdiablo joined
[00:16] <sisar> tadzik: https://github.com/tadzik/panda/issues/13 :)

[00:21] <tadzik> sisar++

[00:23] <masak> 'night, #perl6 :)

[00:25] *** bkolera joined
[00:27] <tadzik> g'night masak 

[00:32] *** aindilis left
[00:32] *** aindilis joined
[00:34] *** drbean left
[00:41] *** Trashlord left
[00:41] *** wentam left
[00:45] *** Trashlord joined
[00:47] *** yves left
[00:48] *** yves joined
[00:54] <dalek> panda: b80c41f | (Siddhant Saraf)++ | README.md:

[00:54] <dalek> panda: info about installing panda behind a proxy; balancing an unbalanced bracket

[00:54] <dalek> panda: review: https://github.com/tadzik/panda/commit/b80c41f417

[00:55] <sisar> ^^ugh, the links at the bottom are ugly :(

[00:57] <sisar> tadzik: please review. i've tried to keep it brief and used official webpages to avoid 'link-stale'

[00:58] * sisar afk

[00:59] *** PacoAir left
[01:03] <Teratogen> Whitney Houston is dead!

[01:08] <sorear> Who>

[01:08] <sorear> ?

[01:11] *** tomodo joined
[01:11] <tomodo> hi

[01:12] <tomodo> how is perl 6 doing?

[01:13] <colomon> pretty well

[01:13] <sisar> Camelia, perl 6 mascot, is fluttering its wings on one side of the earth and creating hurricanes on the other side.

[01:13] <sisar> ButterFlyEffect++

[01:14] <colomon> sorear: pop singer, star of the movie The Bodyguard.  which, come to think of it, probably came out before you were born.  :)

[01:15] <sisar> s/mascot/spokesbug

[01:39] *** retupmoca left
[01:45] *** yertalert left
[01:58] *** gfldex joined
[02:11] *** _jaldhar_ left
[02:11] *** jaldhar joined
[02:16] *** ksi left
[02:27] <colomon> niecza: say ∅ ∌ "blueberry"

[02:28] <p6eval> niecza v14-39-g5857ccb: OUTPUT«(timeout)»

[02:29] <TimToady> niecza: say ∅.WHAT

[02:29] <p6eval> niecza v14-39-g5857ccb: OUTPUT«Unhandled exception: Parameter '' in 'Set.gist' requires a defined argument␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (Set.gist @ 1) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1228 (ANON @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 1230…

[02:30] <TimToady> niecza: say ∅ ~~ Set

[02:30] <p6eval> niecza v14-39-g5857ccb: OUTPUT«True␤»

[02:32] <gfldex> perl6: my $start = now; say [+] 0..1000; say now - $start;

[02:32] <p6eval> rakudo 1200dd: OUTPUT«500500␤1.48277165586799␤»

[02:32] <p6eval> ..niecza v14-39-g5857ccb: OUTPUT«500500␤Unhandled exception: Cannot use value like Instant as a number␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.setting line 255 (Any.Numeric @ 5) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/auzXNOh8jI line 1 (mainl…

[02:32] <p6eval> ..pugs b927740: OUTPUT«*** No such subroutine: "&now"␤    at /tmp/AZbMnRggPe line 1, column 8-16␤»

[02:33] <gfldex> niecza: say now.WHAT;

[02:33] <p6eval> niecza v14-39-g5857ccb: OUTPUT«Instant()␤»

[02:33] <gfldex> niecza: say now.^methods;

[02:33] <p6eval> niecza v14-39-g5857ccb: OUTPUT«Unhandled exception: Unable to resolve method methods in class ClassHOW␤  at /tmp/cldeSsdgS_ line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3773 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3774 (module-CORE @ 65) ␤  at…

[02:34] <gfldex> is there a way to turn Instant to Num for niecza?

[02:35] <sorear> .to-posix

[02:35] <sorear> but you really should be using times[0]

[02:35] <TimToady> niecza: say now.to-posix

[02:35] <p6eval> niecza v14-39-g5857ccb: OUTPUT«1329011595.2539821 False␤»

[02:35] <TimToady> posix is not supposed to be fractional...

[02:35] <TimToady> (afaik)

[02:36] <sorear> isn't gettimeofday in posix nowadays?

[02:36] <TimToady> not in the p5 manpage

[02:37] <sorear> according to my gettimeofday(2), POSIX.1-2001 adds gettimeofday, POSIX.1-2008 marks it obsolete in favor of clock_gettime

[02:38] <gfldex> perl6: my $start = times[0]; say [+] 0..1000; say times[0] - $start;

[02:38] *** wolfman2000 joined
[02:38] <p6eval> rakudo 1200dd: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&times' called (lines 1, 1)␤»

[02:38] <p6eval> ..pugs b927740: OUTPUT«500500␤0.000003␤»

[02:38] <p6eval> ..niecza v14-39-g5857ccb: OUTPUT«500500␤0.084004999999999885␤»

[02:38] <gfldex> :->

[02:39] <gfldex> perl6: my $start = now.to-posix; say [+] 0..1000; say now.to-posix - $start;

[02:39] <p6eval> pugs b927740: OUTPUT«*** No such subroutine: "&now"␤    at /tmp/B6sV7QIpCc line 1, column 8-25␤»

[02:39] <p6eval> ..rakudo 1200dd, niecza v14-39-g5857ccb: OUTPUT«500500␤0␤»

[02:39] <TimToady> and posix seconds are ill defined during leapseconds, I think

[02:40] <gfldex> that might be the reason why most ppl try so hard to be drunk while leapseconds happen

[02:44] *** bacek left
[02:55] <geekosaur> more precisely POSIX doesn't support leap seconds at all, so POSIX time is several seconds off from "true" time

[02:57] <dalek> roast: 658f2be | (Solomon Foster)++ | S03-operators/set.t:

[02:57] <dalek> roast: Start of set operators test.

[02:57] <dalek> roast: review: https://github.com/perl6/roast/commit/658f2bea04

[02:57] <TimToady> basically, if you'd doing fractional calculations of duration with posix times, don't, which is why Perl 6 specs that posix time is only integers

[03:00] *** whiteknight left
[03:23] *** ab5tract left
[03:30] <benabik> As I recall, POSIX is defined as "seconds since 1/1/1970 00:00 UTC".  Leap seconds don't make sense in that definition.  Adding a second to UTC doesn't change how many seconds have passed.

[03:30] <benabik> *POSIX time, obv

[03:30] <Teratogen> Y2.038K is coming up

[03:32] <benabik> Of course, I'm sure people _do_ adjust unix time for leap seconds.  Which irritates me to no end.

[03:38] *** orafu left
[03:38] *** orafu joined
[03:50] *** kmwallio joined
[04:02] *** kmwallio left
[04:05] *** alester_ joined
[04:11] *** alester left
[04:11] *** alester_ is now known as alester

[04:11] *** Trashlord left
[04:11] *** Trashlord joined
[04:15] *** y3llow left
[04:16] *** y3llow joined
[04:16] *** y3llow left
[04:16] *** SAALGMA joined
[04:22] *** bkolera left
[04:23] *** orafu left
[04:23] *** Su-Shee_ joined
[04:24] *** REPLeffect left
[04:24] *** bkolera joined
[04:25] *** jerome_ left
[04:25] *** orafu joined
[04:27] *** Su-Shee left
[04:27] *** REPLeffect joined
[04:34] *** orafu left
[04:34] *** alester left
[04:34] *** gfldex left
[04:34] *** yves left
[04:34] *** pochi left
[04:36] *** alester joined
[04:38] *** jerome_ joined
[04:39] *** orafu joined
[04:39] *** geekosaur left
[04:40] *** geekosaur joined
[04:40] *** mucker joined
[04:40] *** gfldex joined
[04:40] *** yves joined
[04:40] *** pochi joined
[04:56] *** araujo left
[04:57] *** birdwindupbird joined
[05:23] *** tokuhirom left
[05:58] *** tomodo left
[06:12] *** araujo joined
[06:12] *** araujo left
[06:12] *** araujo joined
[06:21] <moritz> o/

[06:24] <sorear> /o

[06:24] <Teratogen> \o/

[06:35] <Teratogen> =)

[06:44] *** preflex left
[06:48] <moritz> araujo: no, we haven't done any real work on pugs

[06:50] *** preflex joined
[06:51] *** takesako left
[06:55] *** takesako joined
[06:58] <araujo> o/ !!

[06:58] <araujo> mmm...

[07:23] <araujo> moritz, is there any TODO or roadmap regarding pugs?

[07:26] *** birdwindupbird left
[07:26] <moritz> araujo: I don't think so; I think masak wanted to pick a few low-hanging fruits first

[07:30] <araujo> sounds like a plan

[07:30] <araujo> :P

[07:31] <dalek> rakudo/nom: 9481a2c | moritz++ | src/core/control.pm:

[07:31] <dalek> rakudo/nom: give eval()s a separate file annotation

[07:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9481a2c485

[07:31] <dalek> rakudo/nom: 9435a07 | moritz++ | tools/build/NQP_REVISION:

[07:31] <dalek> rakudo/nom: bump to newest NQP to get -e file annotation fix

[07:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9435a0771c

[07:32] <moritz> those are cherry-picked from the "bt" branch

[07:33] <moritz> in my several ours of debugging and "fixing" stuff I seem to have broken more than I have repaired

[07:35] <moritz> so I'm now basically starting over with the backtrace stuff, armed with hindsight

[07:39] *** kaare_ joined
[07:39] *** bkolera left
[07:40] <araujo> :)

[07:48] *** GlitchMr joined
[07:50] *** snearch joined
[07:55] *** bkolera joined
[08:13] *** birdwindupbird joined
[08:21] *** wooden joined
[08:21] *** wooden left
[08:21] *** wooden joined
[08:32] *** snearch left
[08:39] *** birdwindupbird left
[08:45] *** tarch joined
[08:55] <tadzik> good mornings

[09:02] <sisar> tadzik: happy with my commit?

[09:05] <tadzik> yeah, It's all right :)

[09:11] * tadzik afks

[09:41] *** tarch left
[09:45] *** lestrrat left
[09:46] *** lestrrat joined
[09:54] *** Chillance left
[10:05] *** tokuhirom joined
[10:09] *** tarch joined
[10:39] *** snearch joined
[10:53] <colomon> niecza: "hogwash" !(elem) <a b c d e> # TimToady?

[10:53] <p6eval> niecza v14-39-g5857ccb: OUTPUT«===SORRY!===␤␤Cannot negate (elem) because additive operators are not iffy enough at /tmp/e4OKjv7C92 line 1:␤------> "hogwash" !(elem)⏏ <a b c d e> # TimToady?␤␤Parse failed␤␤»

[10:57] <jnthn> ooh, snow!

[10:57] <Teratogen> o/~ let it snow, let it snow, let it snow o/~

[10:58] <colomon> TimToady: also, shouldn't multi sub infix:<∋>($a, Set $b --> Bool)  be multi sub infix:<∋>(Set $a, $b --> Bool) ?

[11:00] *** bkolera left
[11:02] *** mj41_nb joined
[11:06] *** tarch left
[11:07] *** tarch joined
[11:14] <dalek> roast: ec4e4e0 | (Solomon Foster)++ | S03-operators/set.t:

[11:14] <dalek> roast: More "is element of" tests, first union tests.

[11:14] <dalek> roast: review: https://github.com/perl6/roast/commit/ec4e4e041a

[11:15] *** tarch left
[11:25] *** z3usurfer joined
[11:26] *** z3usurfer left
[11:39] *** Su-Shee_ is now known as Su-Shee

[11:50] <dalek> rakudo/nom: 941a305 | moritz++ | src/core/Backtrace.pm:

[11:50] <dalek> rakudo/nom: improved backtrace printer

[11:50] <dalek> rakudo/nom: 

[11:50] <dalek> rakudo/nom: When encountering a a non-Routine, it searches for an outer Routine that

[11:50] <dalek> rakudo/nom: also appears in the call chain, and takes their name, but the line number

[11:50] <dalek> rakudo/nom: of the block. The idea comes from jnthn++

[11:50] <dalek> rakudo/nom: 

[11:50] <dalek> rakudo/nom: Testing welcome, not sure yet how well it interacts with lazy lists. At

[11:50] <dalek> rakudo/nom: least for normal for-loops it cuts all those eager/reify methods.

[11:50] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/941a305e86

[11:53] <jnthn> moritz: Lazy lists follow that same code path through reify etc.

[11:53] <jnthn> moritz: So should work out the same kinda way

[11:56] <dalek> rakudo/nom: 2c672ae | jnthn++ | src/core/Range.pm:

[11:56] <dalek> rakudo/nom: Optimize range iteration code a bit to shave 40% or so off [+] 1..10000 style things.

[11:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/2c672ae89e

[11:56] <dalek> rakudo/nom: 6810cc6 | jnthn++ | src/core/metaops.pm:

[11:56] <dalek> rakudo/nom: When doing a reduction, we are going to need the whole list anyway. Instead of chewing it element by element, instead take it in bigger chunks. This reduces the fixed-size overhead per reificication which, in the case of reifying a range, is massively greater than the time to produce a single value. With this and the previous patch [+] 1..1000 runs in 8% of the time it did before; TimToady++ for pointing out this epic performance fail.

[11:56] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6810cc679b

[11:57] *** MayDaniel joined
[11:57] *** MayDaniel left
[11:57] *** MayDaniel joined
[11:58] <moritz> jnthn: well, the difference is that in the case of a returned lazy list, the outer sub doesn't appear in the call chain anymore

[11:58] <moritz> jnthn: so the question is not if reify etc. appear in the backtrace, but more how much else is cut out

[12:02] <dalek> rakudo/nom: c96ad7d | moritz++ | docs/ChangeLog:

[12:02] <dalek> rakudo/nom: update ChangeLog

[12:02] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/c96ad7d497

[12:05] *** mucker left
[12:06] *** mucker joined
[12:09] *** Trashlord left
[12:10] <jnthn> moritz: ah, I see

[12:10] *** snearch left
[12:11] <jnthn> moritz: In your ChangeLog patch:

[12:11] <jnthn> + compile time error reporting when $!x and $.x are used in the wrong places

[12:11] <jnthn> + detection and complaining about $.x uses in submethods

[12:11] <jnthn> I put these in

[12:11] <jnthn> and you added

[12:11] <jnthn> + catch constructs that require an invocant but don't have one

[12:11] <jnthn> + catch uses of virtual method calls in submethods and attribute initializers

[12:11] <jnthn> ;-)

[12:11] <moritz> oh

[12:11] <jnthn> I do like your wording better though :)

[12:12] * moritz should read more carefully in future

[12:12] <moritz> jnthn: should I just remove your two lines?

[12:13] <jnthn> moritz: yeah

[12:13] <dalek> rakudo/nom: cd5136e | moritz++ | docs/ChangeLog:

[12:13] <dalek> rakudo/nom: remove duplicate ChangeLog entries, jnthn++

[12:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/cd5136eac1

[12:14] * moritz is pretty sure he must updated SVG::Plot after the merge of the has_self branch

[12:14] <moritz> star: use SVG::Plot; say "alive";

[12:14] <p6eval> star 2012.01: OUTPUT«(timeout)»

[12:15] *** whiteknight joined
[12:18] *** xinming joined
[12:21] *** mj41_nb left
[12:24] *** JimmyZ joined
[12:25] <dalek> nqp/bs: fd864b6 | moritz++ | src/HLL/Compiler.pm:

[12:25] <dalek> nqp/bs: add "-e" file annotation where appropriate

[12:25] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/fd864b606f

[12:25] <dalek> nqp/bs: e0fdb23 | jnthn++ | src/HLL/Compiler.pm:

[12:25] <dalek> nqp/bs: Merge branch 'master' into bs

[12:25] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/e0fdb2324a

[12:27] *** bonsaikitten left
[12:27] *** bonsaikitten joined
[12:28] *** _sri left
[12:28] *** _sri joined
[12:32] <JimmyZ> hmm... looks like dyncall doesn't support strawberry perl 

[12:36] <jnthn> JimmyZ: At most, it's likely to be configuration issues rather than anything deep

[12:40] <moritz> SVG::Plot fixed.

[12:40] <jnthn> moritz++

[12:41] *** birdwindupbird joined
[12:43] * moritz wonders what to hack on next

[12:46] <moritz> looking through ROADMAP,  <*foo> regexes look interesting

[12:46] <moritz> Rat/FatRat/Rational cleanup would be my field of expertise too, though doesn't sound very fun

[12:46] <moritz> anonymous enums sounds doable

[12:48] <jnthn> <*foo> is probably much fun

[12:48] <jnthn> It should be doable.

[12:49] <jnthn> For anonymous enums - if you can get the anonymous EnumMap-returning thing in place that'd be pretty cool (more)

[12:49] <jnthn> I'm thinking we could use that to produce the values we use for enum declarators too

[12:50] <jnthn> We can't until we have serialization stuff in place really.

[12:50] <jnthn> But it'd be good prep for when we do.

[12:59] <moritz> I've been thinking about the Rat stuff... would it be OK to make FatRat a subclass of Rat for now?

[12:59] <moritz> until we have a real uint64 for storing the denominator, that is

[13:03] <moritz> or, wait

[13:03] <moritz> can we get a real unit64 with custom REPR trickery?

[13:04] <jnthn> The problem is that we can't pass uint64 around in Parrot registers off 64-bit...and even on there it's treated as signed :/

[13:05] <jnthn> So it gets really messy

[13:05] <jnthn> The easiest way to do it at the moment is to use Int/Int, and just check that the size of the denominator isn't over the threshold and if it is then "trim" it as needed

[13:05] <Teratogen> we need to start looking forward to 128 bit processors, gentlemen

[13:06] <moritz> jnthn: that was my original plan

[13:06] <Teratogen> so I suppose an unsigned 128 bit integer would be "unsigned super long i;" in C

[13:08] *** y3llow joined
[13:11] <jnthn> nah, they'll probably just do it as "unsigned long long long i;" or something :P

[13:12] <jnthn> moritz: I think we can't have a real uint64 just yet, so I'd go with something along those lines for now. I'll ponder how best to get us that. Short of re-writing Parrot. :)

[13:13] *** noam_ joined
[13:14] <jnthn> moritz: A really deep 6model integration would probably drop INSP register types and just have each register being either a reference to a 6model object or an inlined 6model REPR...but that's probably a pretty nasty change to have to go through...

[13:15] <moritz> jnthn: I'll just go with Int/Int for now :-)

[13:16] <jnthn> moritz: Yes, I think that's best :)

[13:16] *** noam left
[13:16] <jnthn> moritz: I'll try and come up with a better way to do the unsigned stuff etc.

[13:16] <moritz> jnthn: I can also ask the parrot people if they have any inspiration

[13:18] *** tokuhirom left
[13:18] *** birdwindupbird left
[13:18] <jnthn> moritz: Yeah, adding a way to treat registers as unsigned would help too *but* they still end up being 32-bit registers on 32-bit machines with no way to force 64-bit 

[13:19] <jnthn> If Parrot people can sort out both of those, then we're cooking on gas. :)

[13:20] <jnthn> And I can do all of the signed/unsigned/sized types :)

[13:25] <moritz> hm

[13:25] <moritz> maybe custom boxing somehow?

[13:26] *** not_gerd joined
[13:26] <moritz> we come up with a custom REPR that can store uint64, and unboxes from and boxes to Int

[13:26] <not_gerd> hello, #perl6

[13:26] <moritz> \o not_gerd 

[13:26] * not_gerd read the logs before joining

[13:27] <moritz> of course that's less than awesome in terms of processing speed etc, but at least we'd get custom storage

[13:27] <not_gerd> on 2's complement, signed and unsigned arithmetics is only different when doing divisions...

[13:27] <not_gerd> (and comparisons, of course...)

[13:29] <not_gerd> it should  even be possible to implement unsigned 64-bit arithmetics on top of two signed 32-bit integers, if one were so inclined...

[13:29] <moritz> not_gerd: I think all non-ancient 32bit CPUs also support 64bit integer arithmetics

[13:30] <moritz> or am I wrong there?

[13:30] <not_gerd> they do, but that doesn't help much if parrot doesnÄt give you access to that...

[13:30] *** noam_ left
[13:33] <moritz> so the question is how to get access to that

[13:34] <not_gerd> the easiest solution would probably be to always configure with 64-bit integers and add unsigned division/remainder ops...

[13:45] *** PacoAir joined
[13:50] *** zhangkaizhao joined
[13:51] *** zhangkaizhao left
[13:52] *** zhangkaizhao joined
[13:54] *** lateau_ joined
[14:03] *** noam_ joined
[14:06] *** Trashlord joined
[14:09] <masak> #perl6! \o/

[14:09] <jnthn> #masak! \o/

[14:11] <tadzik> \o/

[14:14] *** MayDaniel left
[14:15] *** xinming left
[14:20] *** tokuhirom joined
[14:24] <flussence> out of memory trying to compile latest nom... and I have 5 gigs free :/

[14:24] * masak becomes curious who hangs out on the #masak channel now

[14:24] <masak> flussence: that sounds... odd. :/

[14:25] <jnthn> Indeed. Even on 64-bit I've never seen it go above 1.7 GB or so.

[14:25] <tadzik> same here

[14:26] * flussence watches it a bit more closely this time

[14:26] * jnthn is working on cutting that down. :)

[14:33] <flussence> It gets to 1.7GB at 3 minutes in, then "Failed allocation of 14430272 bytes"... but there's still plenty of free RAM

[14:33] <benabik> flussence: Did it compile as a 32b program somehow?

[14:33] <flussence> nope - parrot/parrot: ELF 64-bit LSB executable, x86-64

[14:34] <flussence> (even if it did, it probably wouldn't run at all since there's no multilib on this thing)

[14:34] <benabik> My only other guess is ulimit...

[14:34] <flussence> oh, yeah. that'd be it.

[14:35] <flussence> and here I was thinking 1.5GB would be enough :(

[14:35] <benabik> I don't like multilib...  But that's because aptitude in Ubuntu 11.10 doesn't handle both 32b and 64b repositories at the same time.

[14:37] <flussence> the ubuntu install I have at $dayjob has multilib but they've done it really bad, there's no visible labels to say "this is 32, this is 64"

[14:38] <benabik> Aptitude also can't remember what 32b packages it's seen before so it _always_ has a _huge_ pile of "new" packages.

[14:39] <flussence> oh, I was wondering what was causing that. And the "show changelog" command has been broken for about a year now :/

[14:40] *** Trashlord left
[14:44] *** PacoAir_ joined
[14:44] <benabik> Fortunitely, I'm working on a server install so have no real need for 32b packages.  I just removed the multi arch config from apt.

[14:45] *** PacoAir left
[14:45] *** PacoAir_ is now known as PacoAir

[14:46] *** MayDaniel joined
[14:52] *** mucker left
[14:53] *** mucker joined
[15:03] <masak> perl6: .say for 7, { $^n % 2 ?? 3 * $n !! $n / 2 } ... 1

[15:03] <masak> er.

[15:03] <masak> perl6: .say for 7, { $^n % 2 ?? 3 * $n + 1 !! $n / 2 } ... 1

[15:03] <p6eval> niecza v14-39-g5857ccb: OUTPUT«(timeout)7␤21␤63␤189␤567␤1701␤5103␤15309␤45927␤137781␤413343␤1240029␤3720087␤11160261␤33480783␤100442349␤301327047␤903981141␤2711943423␤8135830269␤24407490807␤73222472421␤219667417263␤659002251789␤1977006755367␤5931020266101␤17793060798303␤53379182394909␤1…

[15:03] <p6eval> ..rakudo cd5136: OUTPUT«(timeout)»

[15:03] <p6eval> ..pugs b927740: OUTPUT«*** ␤    Unexpected "1"␤    expecting operator␤    at /tmp/vJ1IQ31tty line 1, column 49␤»

[15:03] <p6eval> rakudo cd5136, niecza v14-39-g5857ccb: OUTPUT«7␤22␤11␤34␤17␤52␤26␤13␤40␤20␤10␤5␤16␤8␤4␤2␤1␤»

[15:03] <p6eval> ..pugs b927740: OUTPUT«*** ␤    Unexpected "1"␤    expecting operator␤    at /tmp/7boywq6HK1 line 1, column 53␤»

[15:03] <masak> \o/

[15:04] <tadzik> will it halt? :)

[15:04] <masak> well, if you keep going after the 1, none of them halt.

[15:04] *** MayDaniel left
[15:06] <masak> there's a really good quasi-explanation somewhere online (using 2-adic numbers) that made me think the Collatz sequence of any number converges.

[15:11] <flussence> grr, rakudo didn't build even with 2GB :(

[15:12] <flussence> something's increased the mem usage by >0.5GB in the past few days, that sounds bad

[15:12] <tadzik> astounding

[15:13] <jnthn> Indeed...I'm struggling to think what change of late coulda done that.

[15:13] <masak> flussence: it would probably be very valuable for the devs if you could bisect that memory increase.

[15:15] *** xinming joined
[15:15] <jnthn> Can confirm that it hits to 2GB mark here. That's new. :/

[15:16] <jnthn> afk for a bit

[15:17] <masak> flussence++ # canary in coalmine

[15:19] <flussence> and 2.5GB!

[15:20] <flussence> I'll go bisect this but first I want to see just how far it goes...

[15:21] *** MayDaniel joined
[15:23] *** Trashlord joined
[15:24] *** xinming left
[15:25] *** lateau_ left
[15:25] *** xinming joined
[15:29] *** MayDaniel left
[15:31] * moritz hopes it wasn't him

[15:38] * masak , too, hopes it wasn't moritz :)

[15:43] *** Psyche^ joined
[15:43] *** Patterner left
[15:43] *** Psyche^ is now known as Patterner

[15:43] *** pmurias joined
[15:43] <pmurias> is Match.new specced?

[15:44] <pmurias> fixing .perl in niecza on Matches requires that

[15:44] <moritz> pmurias: I don't think it's specced

[15:44] <moritz> I'm pretty sure it requires orig, from and to

[15:45] <moritz> not sure what to do about the captures though

[15:47] *** robins is now known as robinsmidsrod

[15:48] <JimmyZ> I tried to build dyncall, but I got an error 'cc is not found' when "cc -O3   -c dyncall_vector.c -o E:\OpenSource\nqp\3rdparty\dyncall\build_out\windows_x86_gcc_release/dyncall_vector.o", how do I know which line comes from makefile?

[15:49] *** MayDaniel joined
[15:49] <dalek> rakudo/rat-vs-fatrat: 2685a77 | moritz++ | src/core/Rat.pm:

[15:49] <dalek> rakudo/rat-vs-fatrat: preliminary work to get both Rat and FatRat working

[15:49] <dalek> rakudo/rat-vs-fatrat: 

[15:49] <dalek> rakudo/rat-vs-fatrat: Fails just one test that does (2/3) but SomeRole

[15:49] <dalek> rakudo/rat-vs-fatrat: review: https://github.com/rakudo/rakudo/commit/2685a77081

[15:49] <dalek> rakudo/rat-vs-fatrat: 7f1a890 | moritz++ | src/core/Rat.pm:

[15:49] <dalek> rakudo/rat-vs-fatrat: some small fixes, plus Num fallback for Rats

[15:49] <dalek> rakudo/rat-vs-fatrat: review: https://github.com/rakudo/rakudo/commit/7f1a89082b

[15:49] <dalek> rakudo/rat-vs-fatrat: 4ab4ffa | moritz++ | src/core/Rat.pm:

[15:49] <dalek> rakudo/rat-vs-fatrat: start to switch some arithmetic ops to smart Rat/FatRat semantics

[15:49] <dalek> rakudo/rat-vs-fatrat: review: https://github.com/rakudo/rakudo/commit/4ab4ffa1bc

[15:49] <dalek> rakudo/rat-vs-fatrat: d8d17cb | moritz++ | src/core/Rat.pm:

[15:49] <dalek> rakudo/rat-vs-fatrat: switch the rest of the Rat ops to Rational

[15:49] <dalek> rakudo/rat-vs-fatrat: review: https://github.com/rakudo/rakudo/commit/d8d17cb5ac

[15:49] <moritz> JimmyZ: by using grep, ack or your other search tool of choice

[15:50] *** lateau_ joined
[15:50] <JimmyZ> moritz: dyncall makefile is too magic, I can't found by using grep or ack

[15:51] <JimmyZ> *find

[15:51] <not_gerd> JimmyZ: probably needs some CC=gcc or some such

[15:51] <not_gerd> eg make CC=gcc

[15:52] <not_gerd> JimmyZ: ./configure should have taken care of that

[15:56] <JimmyZ> not_gerd: no, dyncall is not that stable, follow README.Windows in dyncall doesn't work

[15:56] <JimmyZ> that is Build using buildsys/gmake and MinGW on windows is broken

[15:57] <not_gerd> using Windows generally does tend to complicate things...

[15:57] *** tokuhirom left
[15:57] <not_gerd> I've got a branch that tries to cross-compile parrot+rakudo for windows via cygwin, but dyncall was the smallest issue with that

[15:58] <not_gerd> (got it to actually build a somewhat-working Rakudo, but as I said, there were... issues ;))

[15:59] <JimmyZ> so I want to know which line is from makefile

[16:00] <not_gerd> JimmyZ: you're using the MSYS shell in MinGW mode?

[16:00] <JimmyZ> not_gerd:  cmd shell with strawberry perl

[16:01] <not_gerd> does strawberry come with it's own shell?

[16:01] <not_gerd> if so, try to use that

[16:01] <JimmyZ> and README.Windows in dyncall lies

[16:01] <not_gerd> (I recently fixed an issue with that in NQP's copy of dyncall)

[16:02] <JimmyZ> I tried to build dyncal by following README.Windows, but failed

[16:02] <not_gerd> /if/ strawberry comes with its own shell, Rakudo's --gen-nqp /should/ work out of the box

[16:03] <JimmyZ> not_gerd:  parrot and rakudo works well with cmd shell and strawberry perl

[16:04] <JimmyZ> I just can't build dyncall

[16:04] <not_gerd> JimmyZ: manually? I thought the dyncall build done by NQP failed...

[16:05] <not_gerd> sorry if I misunderstood

[16:05] <JimmyZ> not_gerd: yes

[16:09] *** isBEKaml joined
[16:10] <masak> https://gist.github.com/1809356 -- meta for

[16:12] *** xinming left
[16:12] *** lateau_ left
[16:17] <flussence> hm, /usr/bin/time doesn't seem to give accurate mem counts. I'm pretty sure it didn't just take 7.4GB...

[16:25] *** not_gerd left
[16:28] *** tarch joined
[16:31] *** mj41_nb joined
[16:36] <jnthn> rat-vs-fatrat - sounds like an epic battle :)

[16:36] <tadzik> pirates-vs-ninjas

[16:40] *** mucker left
[16:44] <masak> blog post! \o/ http://strangelyconsistent.org/blog/t2-sums-of-cubes

[16:44] <masak> moritz++ # author

[16:47] *** Trashlord left
[16:49] <JimmyZ> sigh... looks like not simple configure issue for dyncall

[16:49] *** isBEKaml left
[16:49] * JimmyZ doesn't know how to fix "....3rdpartydyncalldyncalllibdyncall_s.a(dyncall_callvm.o):dyncall_callvm.c:(.text+0x1fe): undefined reference to `dcCall_x86_cdecl'"

[16:55] <masak> :/

[16:58] *** pmurias left
[17:03] *** not_gerd joined
[17:04] <not_gerd> JimmyZ: look for a file called dyncall_call_x86.o

[17:05] <JimmyZ> not_gerd:  there is a file named libdyncall_s.a

[17:09] <not_gerd> actually, the file is just called dyncall_call.o

[17:13] <not_gerd> (the file I'm looking for, that is...)

[17:19] * JimmyZ gives up

[17:23] <not_gerd> JimmyZ: you need to inspect the libdyncall_s.a archive and check that it contains the dyncall_call.o file

[17:24] *** MayDaniel left
[17:32] <skids> lines S06:807 and S06:813, should that be :@x and :$x respectively, since the changes to passing positionals as named?

[17:34] <masak> skids: nobody likes that bit of S06, except TimToady who's very adamant about it.

[17:35] <masak> the implementors have so far responded by not implementing it. we'll see who caves in first.

[17:35] <masak> I for one hope it goes away.

[17:36] *** am0c joined
[17:36] <skids> heh.  but you'd agree that those params should be named?  Cause I could put in a pull request for that, at least.

[17:37] <tadzik> maybe it's the old syntax, calling positional params by name

[17:38] <skids> And that is deprecated -- except for waht, protos or something IIRC.

[17:38] <skids> Eh, I'll just shove the pull request anyway, and maybe someday someone will look at it

[17:40] <JimmyZ> not_gerd: yes, it contains

[17:41] *** icwiener joined
[17:44] <TimToady> colomon: sure, http://irclog.perlgeek.de/perl6/2012-02-12#i_5137532 is a copy-paste error

[17:46] *** HarryS left
[17:47] <not_gerd> JimmyZ: then I'm not sure what's wrong...

[17:48] *** HarryS joined
[17:49] <not_gerd> JimmyZ: if you're committed to tracking this down, you could compare the output of `objdump -t dyncall_call.o` and `objdump -t dyncall_callvm.o`

[17:50] <not_gerd> JimmyZ: in particular, the former should contain the dcCall_x86_cdecl symbol, and the symbols in the latter should start with the same number of underscores

[17:51] *** HarryS left
[17:52] <TimToady> for the record, it was [Coke]++ who pointed out the sloth of [+] 1..10000

[17:54] <JimmyZ> not_gerd: the former doesn't contain dcCall_x86_cdecl

[17:56] * skids realizes you have to create "topic branches" on github to put in separate pull requests and it's not smart enough to weed out updates from upstream when the request is going back to upstream.  feh.

[17:56] <skids> somedays the old email patches in system doesn't seem so bas after all.

[17:56] <jnthn> TimToady: Oh, I missed that :)

[17:57] <jnthn> Happy to have made it > 10 times faster though :)

[17:57] <jnthn> I think I can squeeze some more out of it yet too...

[17:58] <tarch> perl6: { package p; sub f is export(:DEFAULT :lbl) {} }

[17:58] <p6eval> niecza v14-39-g5857ccb: OUTPUT«===SORRY!===␤␤Semicolon form of package definition not allowed in subscope;␤  please use block form at /tmp/K7l5XVTWXB line 1:␤------> { package p⏏; sub f is export(:DEFAULT :lbl) {} }␤␤Parse failed␤␤»

[17:58] <p6eval> ..pugs b927740:  ( no output )

[17:58] <p6eval> ..rakudo cd5136: OUTPUT«===SORRY!===␤Semicolon form of package definition not allowed in subscope;␤  please use block form at line 1, near "sub f is e"␤»

[17:59] <TimToady> packages don't know how to export; that comes with modules

[17:59] <tarch> perl6: { module m; sub f is export(:DEFAULT :lbl) {} }

[17:59] <tarch> thank you!

[17:59] <p6eval> rakudo cd5136: OUTPUT«===SORRY!===␤Semicolon form of module definition not allowed in subscope;␤  please use block form at line 1, near "sub f is e"␤»

[17:59] <p6eval> ..niecza v14-39-g5857ccb: OUTPUT«===SORRY!===␤␤Semicolon form of module definition not allowed in subscope;␤  please use block form at /tmp/31q6C1Nuqa line 1:␤------> { module m⏏; sub f is export(:DEFAULT :lbl) {} }␤␤Parse failed␤␤»

[17:59] <p6eval> ..pugs b927740:  ( no output )

[18:00] <TimToady> but it's still the case that you can only use the ; form at the top level of the file

[18:01] <tarch> perl6: module m{ sub f is export(:DEFAULT :lbl) {} }

[18:01] <p6eval> rakudo cd5136: OUTPUT«===SORRY!===␤Malformed block at line 1, near "(:DEFAULT "␤»

[18:01] <p6eval> ..pugs b927740:  ( no output )

[18:01] <p6eval> ..niecza v14-39-g5857ccb: OUTPUT«===SORRY!===␤␤Multi colonpair syntax not yet understood at /tmp/Km8S77iB4q line 1:␤------> module m{ sub f is export(:DEFAULT :lbl⏏) {} }␤␤Export tags NYI at /tmp/Km8S77iB4q line 1:␤------> module m{ sub f is expor…

[18:01] <tarch> got it! :)

[18:01] <TimToady> whitespace before {

[18:01] <tarch> sorry for the noise!

[18:02] <tarch> perl6: module m { sub f is export(:DEFAULT :lbl) {} }

[18:02] <p6eval> niecza v14-39-g5857ccb: OUTPUT«===SORRY!===␤␤Multi colonpair syntax not yet understood at /tmp/sB2lmplZpV line 1:␤------> module m { sub f is export(:DEFAULT :lbl⏏) {} }␤␤Export tags NYI at /tmp/sB2lmplZpV line 1:␤------> odule m { sub f is expo…

[18:02] <p6eval> ..rakudo cd5136: OUTPUT«===SORRY!===␤Malformed block at line 1, near "(:DEFAULT "␤»

[18:02] <p6eval> ..pugs b927740:  ( no output )

[18:02] <tarch> perl6: module m { sub f is export(:DEFAULT, :lbl) {} }

[18:02] <p6eval> niecza v14-39-g5857ccb: OUTPUT«===SORRY!===␤␤Export tags NYI at /tmp/dp0bfrC3es line 1:␤------> dule m { sub f is export(:DEFAULT, :lbl)⏏ {} }␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1344 (die @ 3) ␤  a…

[18:02] <p6eval> ..pugs b927740, rakudo cd5136:  ( no output )

[18:02] <not_gerd> JimmyZ: what symbols does dyncall_call.o contain? might be that the wrong file got assembled...

[18:04] <JimmyZ> not_gerd:  zero.  looks like 'as   -o E:\OpenSource\nqp\3rdparty\dyncall\build_out\windows_x86_gcc_release/dyncall_call.o dyncall_call.s' outputs nothing

[18:06] <tarch> In synopsis 11 I find an example of export to multiple tagsets which doesn't have the comma: "    sub bar is export(:DEFAULT :others) {...}  #  :DEFAULT, :ALL, :others" between the two names but nom says that the one without the comma isn't correct

[18:06] <tarch> which one is right?

[18:07] <flussence> masak++ # just saw that gist, neat idea

[18:07] <jnthn> tarch: nom doesn't yet support doing the colonpair syntax without a comma anywhere yet.

[18:08] <tarch> ok thank you very much!

[18:08] <jnthn> std: sub foo { }; foo(:bar, :baz)

[18:08] <p6eval> std 52f3895: OUTPUT«ok 00:01 110m␤»

[18:08] <jnthn> std: sub foo { }; foo(:bar :baz)

[18:08] <p6eval> std 52f3895: OUTPUT«ok 00:01 108m␤»

[18:08] <jnthn> We don't do the second one of those just yet. Hmm...wonder how hard that is to do... :)

[18:09] <jnthn> Dinner, bbiab &

[18:12] * colomon just finished nomming homemade pot stickers....

[18:13] <flussence> masak: I thought up a good use for macros a while back, https://gist.github.com/1809975

[18:13] <flussence> assuming that sort of thing's possible, but I'm sure it is :)

[18:14] <tadzik> flussence: awesome!

[18:15] <not_gerd> JimmyZ: you could try manually assembling dyncall_call_x86.S and putting the object file into the archive

[18:16] <flussence> (I confess, I just blatantly copied that syntax from Rust, but copying good ideas is what perl 6 is about :)

[18:16] <not_gerd> JimmyZ: it looks like the architecture detection in dyncall_call.S failed

[18:16] <not_gerd> Rust++

[18:20] <JimmyZ> not_gerd:  looks like as doesn't support '#include' or something similar

[18:21] <TimToady> nom: my $x; $x //= die "phooey"

[18:21] <p6eval> nom cd5136: OUTPUT«phooey␤  in block <anon> at /tmp/7dPjfE5IcQ:1␤␤»

[18:21] <TimToady> moritz: you recommend this construct, but it does not actually do any memoizing in rakudo yet

[18:22] <TimToady> niecza: my $x; $x //= die "phooey"

[18:22] <p6eval> niecza v14-39-g5857ccb: OUTPUT«Unhandled exception: phooey␤  at /home/p6eval/niecza/lib/CORE.setting line 1360 (die @ 3) ␤  at /tmp/CXySOe87HL line 1 (mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3773 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3774 (modu…

[18:22] <TimToady> or niecza, it would appear

[18:22] <TimToady> pugs: my $x; $x //= die "phooey"

[18:22] <p6eval> pugs b927740: OUTPUT«*** phooey␤    at /tmp/6s_ipBEzkh line 1, column 8 - line 2, column 1␤»

[18:23] <TimToady> we need to figure out how to make op= transparent to thunkiness

[18:24] *** wolfman2000 left
[18:31] <jnthn> Probably need a way to specify the thunkiness first. :)

[18:33] <TimToady> well // figgers it out somehow already :P

[18:33] <jnthn> We do specialized code-gen for it.

[18:33] *** sisar left
[18:33] <jnthn> I can do that for //= too :)

[18:33] *** pff joined
[18:34] <jnthn> But...we normally prefer extensible mechanisms. :)

[18:34] <TimToady> it might be that macro infix:<op> will get us there

[18:34] <jnthn> That may be the case also, yes

[18:34] <TimToady> as long as we can figure out how to apply HOP to a macro

[18:35] * TimToady pokes the masakbot

[18:35] *** MayDaniel joined
[18:40] *** MayDaniel left
[18:41] <skids> Hmm.  increment/decrement on Bool has clamping semantics, on Str dwimmery decrement fails rather than remove characters, so I'm wondering what the most useful behavior for a range-limited numeric is -- wrap, clamp, or fail...

[18:44] <TimToady> probably fail, especially if the range is limited by a native type

[18:45] *** zhangkaizhao left
[18:45] <colomon> TimToady: are (elem) and (cont) supposed to be iffy?

[18:45] <TimToady> anything that returns Bool is supposed to be iffy

[18:46] <TimToady> I think niecza currently has an 'is iffy' or some such trait

[18:46] <colomon> yeah, was just checking that

[18:46] *** JimmyZ left
[18:48] <TimToady> moritz: another comment on the yary one: use of 'is rw' on a MAIN parameter seems like it should be 'is copy' instead; not sure 'is rw' should even work...

[18:51] *** not_gerd left
[18:52] <skids> niecza: "hiya".say for Bool::False .. Bool::True; # this sends nom into the land that time forgot.

[18:52] <p6eval> niecza v14-39-g5857ccb: OUTPUT«hiya␤hiya␤»

[18:52] * colomon is hacking perl 6 and wrapping dumplings in parallel...

[18:56] <Tene> @dumplings».wrap

[18:58] *** Bucciarati left
[18:58] *** HarryS joined
[18:59] * masak bot comes alive

[18:59] <colomon> unfortunately Jen is not available and Henry is still too young, so there's only one thread of wrapping going on right now, and about 1.5 pounds worth of dumpling filling yet to go....

[18:59] <masak> TimToady: "apply HOP"? what exactly is the use case?

[19:00] <masak> I'll backlog more closely, but it'd be interesting to hear what you have in mind.

[19:01] * colomon has a sudden urge to try reimplementing everything in HOP in p6....

[19:01] *** birdwindupbird joined
[19:02] *** wolfman2000 joined
[19:04] <masak> flussence: that's a darling syntax! you'd sold me! :)

[19:04] <dalek> niecza: 251655b | (Solomon Foster)++ | t/spectest.data:

[19:04] <dalek> niecza: Turn on S03-operators/set.t.

[19:04] <dalek> niecza: review: https://github.com/sorear/niecza/commit/251655b7d7

[19:04] <dalek> niecza: 1a81b75 | (Solomon Foster)++ | lib/CORE.setting:

[19:04] <dalek> niecza: Fix copy-n-paste thinko.

[19:04] <dalek> niecza: review: https://github.com/sorear/niecza/commit/1a81b756b5

[19:04] <dalek> niecza: 1d02da9 | (Solomon Foster)++ | lib/CORE.setting:

[19:04] <dalek> niecza: Mark (elem) and (cont) iffy -- also make (cont) an only instead of a multi.

[19:04] <dalek> niecza: review: https://github.com/sorear/niecza/commit/1d02da9fd5

[19:05] <masak> flussence: feels like a lexical slang that simply auto-applies the same trait to all the sub declarations in scope. should be utterly doable, IIUC.

[19:05] <dalek> roast: 874369d | (Solomon Foster)++ | S03-operators/set.t:

[19:05] <dalek> roast: Add the "contains" tests, plus turn on the negated texas tests.

[19:05] <dalek> roast: review: https://github.com/perl6/roast/commit/874369d7aa

[19:06] <masak> TimToady: oops -- the //= thing might've been me. I'll figger out a good way to change the text.

[19:07] *** yertalert joined
[19:07] * tadzik wonders if that could be done by lexically abusing RoutineHOW or such

[19:08] <masak> TimToady: ok, backlogging I see that 'HOP on a macro' seems to specifically apply to making infix:<//=> thunky... preferably without having to define it separately.

[19:08] <tadzik> macro would probably be more elegant :)

[19:10] <masak> well, we're in unexplored territory here.

[19:10] <tadzik> std: .lock and .load

[19:10] <p6eval> std 52f3895: OUTPUT«ok 00:01 109m␤»

[19:10] <flussence> `git bisect` done, says f57e87939f92878da00338aad489b695d6cd597e pushed it over 1.5GB

[19:10] <masak> the tadzik and masak and flussence of 2015 probably backlog over this (as we speak!) and giggle at our naivité wrt macros and syntax overloading.

[19:11] <tadzik> flussence: how dramatically?

[19:11] <masak> flussence++ # bisect

[19:11] <tadzik> flussence: frankly, I think this is more like a slow evolution towards being a Big Beast than one big hit

[19:11] <flussence> tadzik: it only gives a binary answer, but I'm redoing it with a 2GB limit just to make sure

[19:12] <tadzik> okay

[19:12] * tadzik slowly moves out on a week-long laptop-free vacation

[19:12] <flussence> o/ have fun

[19:12] <masak> tadzik: have the appropriate amount of fun!

[19:14] <masak> huh, that looks like a vary innocent commit: http://github.com/rakudo/rakudo/commit/f57e87939f92878da00338aad489b695d6cd597e

[19:14] <masak> very*

[19:15] <flussence> yeah, might be right about the slow increase...

[19:15] <masak> flussence: also might be interesting for you to do a 'git revert f57e879', and see if the problem goes away in HEAD.

[19:15] <tadzik> thanks, I will :)

[19:15] <masak> (and which spectests fail -- though others can check that)

[19:21] <jnthn> tadzik: have the appropriate amount of fun and piwo :)

[19:30] *** Trashlord joined
[19:33] *** tarch left
[19:41] *** snearch joined
[19:51] *** Bucciarati joined
[19:54] *** yertalert left
[19:58] *** buubot_backup left
[20:08] <[Coke]> beer?

[20:09] <masak> phenny: "piwo"?

[20:09] <phenny> masak: "piwo" (it to en, translate.google.com)

[20:09] <masak> phenny: pl en "piwo"?

[20:09] <phenny> masak: "beer" (pl to en, translate.google.com)

[20:09] <masak> [Coke]: yes :)

[20:13] <[Coke]> b: say 641- 86 ; #RT

[20:13] <p6eval> b 1b7dd1: OUTPUT«555␤»

[20:13] <jnthn> ooh, almost down to 550

[20:15] <[Coke]> rakudo: grammar A { token a { a } }; grammar B is A { }; say 'a' ~~ /<B::a>/ # RT 65474

[20:15] <p6eval> rakudo cd5136: OUTPUT«=> <a>␤ B::a => <a>␤␤»

[20:21] <jnthn> [Coke]: I fixed that a while back. It has good test coverage.

[20:21] <jnthn> [Coke]: So you may just close it.

[20:22] *** buubot_backup joined
[20:23] *** wolfman2000 left
[20:25] <[Coke]> I was trying to do a rebuild so I could verify the test worked, but will just trust you. ;)

[20:28] *** MayDaniel joined
[20:28] * [Coke] installs cygwin, hoping he can close a ticket or 2.

[20:31] *** MayDaniel left
[20:40] <sorear> TimToady: (10:22) are you seriously saying that 'my $x; $x //= die "phooey"' *shouldn't* die !?

[20:41] *** Trashlord left
[20:41] <dalek> roast: e1eb854 | (Solomon Foster)++ | S03-operators/set.t:

[20:41] <dalek> roast: More union tests, intersection tests.

[20:41] <dalek> roast: review: https://github.com/perl6/roast/commit/e1eb854dd0

[20:42] <sorear> phenny: tell pmurias I disagree with your assertion that Match.perl in Niecza is broken.  LTA formatting, yes

[20:42] <phenny> sorear: I'll pass that on when pmurias is around.

[20:42] <colomon> o/

[20:42] <sorear> perl6: my $x = 0; $x //= die "phooey"

[20:42] <p6eval> rakudo cd5136: OUTPUT«phooey␤  in block <anon> at /tmp/tvI5NhqrhQ:1␤␤»

[20:42] <p6eval> ..pugs b927740, niecza v14-42-g1d02da9:  ( no output )

[20:46] <masak> sorear: TimToady's example is bogus, but he seems to be right about //= not thunking.

[20:46] <masak> in Rakudo.

[20:47] *** pff left
[20:50] *** jerome_ left
[20:58] <[Coke]> # 02/12/2012 - niecza at 101.07%

[20:58] <[Coke]> "niecza",     19928,     8,   751,  1573, 22260, 23106

[20:58] <[Coke]> "rakudo",     19717,    28,   611,  1933, 22289, 23116

[20:59] *** birdwindupbird left
[20:59] *** GlitchMr left
[21:05] *** ggoebel left
[21:08] *** tarch joined
[21:12] <moritz> flussence: re memory increase, the grows up to 1.7GB has been steady-ish; it's the leap over 2GB that is interesting

[21:12] *** ggoebel joined
[21:15] *** Trashlord joined
[21:17] <TimToady> sorear: absolutely

[21:18] <TimToady> er, except with a defined value

[21:19] *** Patterner left
[21:19] <moritz> nom: my $a = 1; $a //= say "foo";

[21:19] <p6eval> nom cd5136: OUTPUT«foo␤»

[21:20] <dalek> rakudo/rat-vs-fatrat: b23da9e | moritz++ | src/core/Rat.pm:

[21:20] <dalek> rakudo/rat-vs-fatrat: fix thinko in DIVIDE_NUMBERS

[21:20] <dalek> rakudo/rat-vs-fatrat: review: https://github.com/rakudo/rakudo/commit/b23da9eb33

[21:20] <dalek> rakudo/rat-vs-fatrat: f27eab1 | moritz++ | src/core/Rat.pm:

[21:20] <dalek> rakudo/rat-vs-fatrat: thinkos, syntax errors

[21:20] <dalek> rakudo/rat-vs-fatrat: review: https://github.com/rakudo/rakudo/commit/f27eab1768

[21:20] * jnthn hopes that last commit removes thinkos and syntax errors ;)

[21:20] * moritz hopes so too

[21:20] <jnthn> :)

[21:21] * jnthn finally has a moment to play some more with the serialization stuff

[21:21] <jnthn> Didn't get half the tuits I'd expected this weekend...

[21:24] <moritz> $ ./perl6 -e 'my $smallish = 1/2**40; say ($smallish * $smallish).WHAT'

[21:24] <moritz> Num()

[21:24] <moritz> \o/

[21:27] <moritz> got through arith.t without problems

[21:27] <jnthn> moritz++

[21:28] <masak> \o/

[21:28] <masak> whoever-on-perlmonks will be pleased.

[21:28] <jnthn> moritz: Does we have FatRat now? :)

[21:28] <moritz> jnthn: we does

[21:28] <masak> someone should blog about how we listen to our customers.

[21:28] <jnthn> ooh. That means we can have the FatRat tests ;)

[21:29] <jnthn> masak: Indeed. Not just that, but in the last 48 hours reduction meta-op performance got improved by a factor of 10 and backtraces also got a bunch better because of "ouch, X could be better" feedback :)

[21:29] <jnthn> The "takes SO much RAM to build CORE.setting" will need a little longer though...

[21:31] *** ggoebel left
[21:31] <masak> it's definitely worth both following up the PerlMonks thread, and blogging about, IMO.

[21:32] <TimToady> I presume that we aren't going to accidentally make FatRats unless one of the arguments is already a FatRat

[21:33] <moritz> we aren't

[21:33] <TimToady> sehr gut

[21:33] <dalek> rakudo/rat-vs-fatrat: 7dcb9e2 | moritz++ | src/core/Rat.pm:

[21:33] <dalek> rakudo/rat-vs-fatrat: formatting changes

[21:33] <dalek> rakudo/rat-vs-fatrat: review: https://github.com/rakudo/rakudo/commit/7dcb9e2890

[21:33] <dalek> rakudo/rat-vs-fatrat: bdf0434 | moritz++ | t/spectest.data:

[21:33] <dalek> rakudo/rat-vs-fatrat: run fatrat.t

[21:33] <dalek> rakudo/rat-vs-fatrat: review: https://github.com/rakudo/rakudo/commit/bdf04345e7

[21:33] <moritz> ok, spectesting and going to sleep; will investigate merging tomorrow

[21:33] <jnthn> moritz++

[21:35] *** Psyche^ joined
[21:37] *** Psyche^ is now known as Patterner

[21:39] *** ggoebel joined
[21:46] *** lestrrat left
[21:47] *** lestrrat joined
[21:49] *** ggoebel left
[22:01] *** Patterner left
[22:03] <dalek> nqp/bs: 940f600 | jnthn++ | src/ (2 files):

[22:03] <dalek> nqp/bs: Rename original add_code; will replace it with a new one and migrate towards it.

[22:03] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/940f600774

[22:03] <dalek> nqp/bs: 5e4a611 | jnthn++ | src/HLL/World.pm:

[22:03] <dalek> nqp/bs: Start to sketch out new deserialization handling code.

[22:03] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/5e4a6119ab

[22:03] <dalek> nqp/bs: 44811ea | jnthn++ | src/NQP/World.pm:

[22:03] <dalek> nqp/bs: Add code that can be uncommented to try out the new serialization mechanism (breaks build at the moment).

[22:03] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/44811ead10

[22:04] *** PacoAir left
[22:05] *** PacoAir joined
[22:07] *** Psyche^ joined
[22:07] *** Psyche^ is now known as Patterner

[22:11] <skids> nom: say -1 +> 24; say -1 +> 16; say -1 +> 8; say -1 +> 0; for (24,16,8,0) { say -1 +> $_; };

[22:11] <p6eval> nom cd5136: OUTPUT«-1␤-1␤-1␤-1␤0␤0␤0␤-1␤»

[22:12] <benabik> huh?

[22:14] <jnthn> o.O

[22:14] <jnthn> nom: say -1 +> 24; say -1 +> 16; say -1 +> 8; say -1 +> 0; for (24,16,8,0) { say -1 +> nqp::p6decont($_); };

[22:14] <p6eval> nom cd5136: OUTPUT«-1␤-1␤-1␤-1␤0␤0␤0␤-1␤»

[22:14] <jnthn> phew, not that then.

[22:15] <jnthn> nom: say -1 +> 24; say -1 +> 16; say -1 +> 8; say -1 +> 0; for (24,16,8,0) { say $_; say -1 +> $_; };

[22:15] <p6eval> nom cd5136: OUTPUT«-1␤-1␤-1␤-1␤24␤0␤16␤0␤8␤0␤0␤-1␤»

[22:16] *** mj41_nb left
[22:17] *** pomysl_ joined
[22:17] *** pomysl left
[22:17] <dukeleto> o/

[22:20] <masak> dukeleto! \o/

[22:21] <jnthn> o/ dukeleto 

[22:21] <dalek> rakudo/nom: 29f5cf7 | jnthn++ | src/core/metaops.pm:

[22:21] <dalek> rakudo/nom: Another fairly notable performance boost for reductions (maybe another factor of two or so). [+] 1..100000 now runs in about the same time that [+] 1..1000 used to.

[22:21] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/29f5cf7ca1

[22:30] <skids> nom: say -1 +> -24; say -1 +> -16; say -1 +> -8; say -1 +> 0; for (-24,-16,-8,0) { say -1 +< $_; }; for (-24,-16,-8,0) { say (-1 +< $_).fmt("%x"); }; # a clue, I hope

[22:30] <p6eval> nom cd5136: OUTPUT«-16777216␤-65536␤-256␤-1␤-1099511627776␤-281474976710656␤-72057594037927936␤-1␤ffffff0000000000␤ffff000000000000␤ff00000000000000␤ffffffffffffffff␤»

[22:33] *** kaare_ left
[22:34] *** sudokode left
[22:36] *** PacoAir left
[22:38] *** snearch left
[22:39] *** icwiener left
[22:39] *** icwiener joined
[22:39] *** sudokode joined
[22:45] *** icwiener left
[22:45] *** icwiener joined
[22:49] *** cooper left
[22:53] *** cooper joined
[23:00] <dalek> nqp/bs: 3614f78 | jnthn++ | src/ops/nqp.ops:

[23:00] <dalek> nqp/bs: Correct an error.

[23:00] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/3614f7832b

[23:00] <dalek> nqp/bs: 5641529 | jnthn++ | src/NQP/World.pm:

[23:00] <dalek> nqp/bs: Start to register some static code refs; we'll need a bit more than this, though.

[23:00] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/5641529640

[23:00] <dalek> nqp/bs: 046bd1d | jnthn++ | src/6model/serialization.c:

[23:00] <dalek> nqp/bs: Add a sanity check to catch an error, rather than SEGVin'.

[23:00] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/046bd1d62c

[23:00] <dalek> nqp/bs: 50459f4 | jnthn++ | src/HLL/World.pm:

[23:00] <dalek> nqp/bs: A few fixes to code-gen for serialized output.

[23:00] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/50459f4612

[23:00] <dalek> nqp/bs: b61b053 | jnthn++ | src/NQP/World.pm:

[23:00] <dalek> nqp/bs: Start sketching in a NEW_SER flag to NQP::World; this will allow gradual exploration of using the new serialization engine without busting the ability to get through a build to make sure collateral changes this work causes are OK in themselves. With it on, we now make it a couple of compilation units into the build of the second stage.

[23:00] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/b61b053277

[23:01] *** fsergot joined
[23:14] <jnthn> Time for some rest &

[23:15] *** cooper left
[23:20] *** cooper joined
[23:20] <masak> indeed. 'night, #perl6

[23:21] <felher> o/

[23:35] *** tarch left
