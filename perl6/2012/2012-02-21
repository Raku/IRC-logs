[00:02] <colomon> \o

[00:02] *** betterworld left
[00:04] * jnthn figures he'll just gut the NQP::World role handling and do it over in the light of how Rakudo does it

[00:13] *** fridim_ left
[00:17] *** bluescreen10 joined
[00:21] *** betterworld joined
[00:23] * colomon is trying to remember what he wanted to do to niecza before he got sidetracked with the bag operators

[00:26] *** am0c joined
[00:27] <sorear> TimToady: I can't use gnome-terminal until I find a way that works to turn off this cursed blinked cursor

[00:27] <TimToady> ah, well, doesn't bother me

[00:27] *** frew joined
[00:30] <sorear> I've tried using gconftool-2 but the settings don't "stick"

[00:31] <TimToady> I bet quietfanatic would know, but he's off at college...

[00:31] <huf> back in ancient times, you had to have gnome-session-daemon or something running to have apps see the things you set via the gconf editor

[00:32] <TimToady> sorear: btw, did you see my /msg's?  I know it's easy not to see them in irssi...

[00:33] <sorear> huf: If I set options within gnome-terminal itself, like bg color, it works fine.

[00:33] <huf> you're running the whole gnome DE?

[00:33] <huf> because then disregard everything i said.

[00:35] <sorear> huf: I'm not running the gnome DE.

[00:35] <huf> ahh.... yes, then something like what i used to do might apply

[00:36] *** betterworld left
[00:38] <sorear> What did you used to do?

[00:38] <huf> well, some years ago i remember i had to start gnome-session-daemon from my .xsession to have apps see the settings

[00:39] <huf> but i think that's gone now

[00:39] <huf> is gconfd running?

[00:39] <huf> someone seems to have started one on my behalf

[00:40] <sorear> gconfd: command not found

[00:40] <huf> 2715 /usr/lib/libgconf2-4/gconfd-2

[00:40] <huf> this is what i have, it's running in my name and the ppid is 1

[00:40] <huf> i have no idea who started it 

[00:40] <huf> not me, it's not in my xsession

[00:41] <huf> i'm basically assuming it's important to gnome :)

[00:41] <sorear> I don't have that running, and if I run the executable directly, it immediately exits without forking a daemon

[00:42] *** plobsing left
[00:43] *** betterworld joined
[00:45] <geekosaur> gconfd / gconfd-2 is started automatically by any gnome-isprogram that uses the settings api

[00:46] *** skids joined
[00:46] <geekosaur> s/-ispr/-ish pr/

[00:47] *** am0c left
[00:48] <colomon> TimToady: just realized I got multiset multiplication wrong.

[00:49] <TimToady> I have no idea how it's officially defined...

[00:49] <colomon> it's element-wise multiplication

[00:49] <colomon> (just got that from Knuth!)

[00:49] <TimToady> with missing elements 0?

[00:49] <colomon> yes

[00:49] <TimToady> that's what I'd expect

[00:49] <TimToady> what did you do instead?

[00:49] <colomon> I mean, that's not mentioned explicitly in the tiny writeup, but that's got to be it.

[00:50] <colomon> min

[00:50] <TimToady> hmm

[00:50] <TimToady> right, which is what I said before

[00:50] <TimToady> multiplying seems wrongish to me, if it's really a bag

[00:51] <colomon> so, I'm also wondering if bag union bag should be a bag.

[00:51] <colomon> there's a straightforward definition for it...

[00:51] <colomon> (or bag union set, for that matter)

[00:51] <TimToady> yes, I think bags are probably infective

[00:52] <colomon> I apologize for jumping in and coding without trying to do any multiset research first.  :)

[00:52] <TimToady> you and me both :)

[00:53] <colomon> oh, wait, the multiplication thing is not the same symbol.

[00:54] <TimToady> wp shows intersection as min

[00:54] <TimToady> and now that I think of it, multiset multiplcation is based on the union symbol, not the intersection

[00:55] <colomon> the operator I'm looking at here in Knuth is intersection-dot

[00:55] <colomon> which doesn't seem to be in unicode?

[00:55] <TimToady> .u multiset

[00:55] <phenny> U+228C MULTISET (⊌)

[00:55] <TimToady> .u ⊍

[00:55] <phenny> U+228D MULTISET MULTIPLICATION (⊍)

[00:56] <TimToady> .u ⊎

[00:56] <phenny> U+228E MULTISET UNION (⊎)

[00:56] <TimToady> those are the only ones that grepping for multiset gives

[00:56] <TimToady> .u ⋿

[00:56] <phenny> U+22FF Z NOTATION BAG MEMBERSHIP (⋿)

[00:57] <TimToady> .u ⟅⟆

[00:57] <phenny> U+27C5 LEFT S-SHAPED BAG DELIMITER (⟅)

[00:57] <phenny> U+27C6 RIGHT S-SHAPED BAG DELIMITER (⟆)

[00:57] <TimToady> there's also those

[00:57] <TimToady> and that exhausts m:i/«bag»/

[00:58] <colomon> I vote we make multiset multiplication the same as the "intersection-dot" operator, ie element-wise multiplication.

[00:58] <colomon> at the very least, until we find a better definition somewhere!

[00:59] <TimToady> sure

[00:59] *** scott_ joined
[00:59] *** scott_ is now known as Guest67603

[01:00] <TimToady> are there any mathematical entities you might put in a bag that are naturally geometric?

[01:00] <sorear> Balls?

[01:00] <sorear> Although those are found more in urns than bags

[01:01] <sorear> s/^/Colored /

[01:02] <colomon> oooo, found a paper on multisets available online

[01:02] <colomon> http://projecteuclid.org/DPubS/Repository/1.0/Disseminate?view=body&id=pdf_1&handle=euclid.ndjfl/1093634995

[01:03] <colomon> errr, may be too fundamental...

[01:04] *** frew left
[01:04] *** frew joined
[01:04] *** frew left
[01:08] *** whiteknight left
[01:16] <dalek> nqp/bs: 4ea3bcb | jnthn++ | src/NQP/World.pm:

[01:16] <dalek> nqp/bs: Start to clear up role handling a little; toss deserialization code and eliminate use of add_code_LEGACY.

[01:16] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/4ea3bcbd72

[01:16] <dalek> nqp/bs: fee2122 | jnthn++ | src/HLL/World.pm:

[01:16] <dalek> nqp/bs: Eliminate add_code_LEGACY, now all uses of it are gone.

[01:16] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/fee2122b5c

[01:16] <dalek> nqp/bs: 8cddbe2 | jnthn++ | src/NQP/World.pm:

[01:16] <dalek> nqp/bs: Gut NQP::World's role handling; we'll do something more like Rakudo does. Put in the simplest thing that could possibly work: making a code ref for the role body and passing it along to the meta-object. Actually passes the first three role tests anyway...

[01:16] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/8cddbe277e

[01:16] <jnthn> Grr...this stuff is too fiddly for 2am...will continue tomorrow. :)

[01:16] <jnthn> 'night

[01:18] <colomon> \o

[01:21] *** woosley joined
[01:25] <sorear> just tried kterm.  a o SP enter -> 猫 FAIL

[01:26] <TimToady> meow!

[01:27] *** miso_soup joined
[01:31] <dalek> roast: 0bf94c0 | (Solomon Foster)++ | S03-operators/bag.t:

[01:31] <dalek> roast: Fix tests for multiset multiplication -- they now test multiset multiplication rather than multiset intersection.

[01:31] <dalek> roast: review: https://github.com/perl6/roast/commit/0bf94c0023

[01:31] <dalek> niecza: 75fe43c | (Solomon Foster)++ | lib/CORE.setting:

[01:31] <dalek> niecza: Fix multiset multiplication so that it's distinct from multiset intersection (which I will be implementing shortly).

[01:31] <dalek> niecza: review: https://github.com/sorear/niecza/commit/75fe43c828

[01:31] <TimToady> well, niau would be more suitable

[01:32] *** plobsing joined
[01:35] <sorear> not nyaa?

[01:39] <TimToady> well, it was a pun on 似合う

[01:40] *** tty234 joined
[01:53] *** thou left
[01:53] <colomon> ugh, not having a shortcut to say Bag | KeyBag is a pain

[01:54] <colomon> errr, unless i can just say that?

[01:54] <colomon> niecza: sub foo(Bag | KeyBag $a) { say $a; }; foo(bag(a=>10));

[01:55] <p6eval> niecza v14-51-g3474558: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unable to parse signature at /tmp/8D2t7q6Qaq line 1:␤------> [32msub foo([33m⏏[31mBag | KeyBag $a) { say $a; }; foo(bag(a=[0m␤Couldn't find final ')'; gave up at /tmp/8D2t7q6Qaq line 1:␤------> [32msub foo(Bag | [33m⏏…

[01:55] *** thou joined
[02:00] <TimToady> a Bag role should encompass both, I'd think

[02:01] <TimToady> KeyBag just adds mutability

[02:01] <TimToady> or a Baggy role

[02:05] <colomon> should it be a Bag role, or... hmmm

[02:05] <colomon> I always feel more comfortable subtracting mutability

[02:05] <colomon> Baggy role?

[02:06] <colomon> (that's as in, how does going for the Baggy role sound to you)

[02:11] <TimToady> I wouldn'ta suggested it if I didn't think it was okayish

[02:17] *** sisar left
[02:20] <colomon> okay

[02:24] <[Coke]> is the skip function supposed to have a leading count or a trailing count?

[02:24] <sorear> I don't remember, but I know it switched a couple months ago

[02:24] <sorear> trailing count.

[02:25] <[Coke]> Danke.

[02:29] <[Coke]> ... of course, just switching the args in pugs doesn't make the skip work. ah well. ;)

[02:29] <[Coke]> phenny: ask masak to fix skip("reason", $count) in pugs.

[02:29] <phenny> [Coke]: I'll pass that on when masak is around.

[02:32] *** replore_ joined
[02:35] *** preflex left
[02:37] *** preflex joined
[02:41] *** bluescreen10 left
[02:42] <dalek> roast: 068fb14 | (Solomon Foster)++ | S03-operators/ (2 files):

[02:42] <dalek> roast: Bag union and bag intersection are infective, so move those tests.

[02:42] <dalek> roast: review: https://github.com/perl6/roast/commit/068fb14b63

[02:46] *** lutok joined
[02:56] <dalek> niecza: ffefe23 | (Solomon Foster)++ | lib/CORE.setting:

[02:56] <dalek> niecza: Add role Baggy, Bag union, and Bag intersection.

[02:56] <dalek> niecza: review: https://github.com/sorear/niecza/commit/ffefe23787

[03:02] <[Coke]> "total",      3009,     0,  1722,    14,  4745, 23233

[03:02] <[Coke]> (pugs)

[03:03] <dalek> roast: a842b80 | coke++ | S0 (8 files):

[03:03] <dalek> roast: pugs fudge

[03:03] <dalek> roast: review: https://github.com/perl6/roast/commit/a842b80582

[03:03] <colomon> [Coke]++

[03:04] <dalek> Pugs.hs: 58459c2 | coke++ | t/spectest.data:

[03:04] <dalek> Pugs.hs: run fudged tests

[03:04] <dalek> Pugs.hs: review: https://github.com/perl6/Pugs.hs/commit/58459c2b4e

[03:07] *** lutok left
[03:11] *** thou left
[03:11] *** jferrero left
[03:20] <[Coke]> Looks like I'm back up to 2300 more "LHF".

[03:20] <[Coke]> 5K passing tests after this hiatus is pretty good, I think.

[03:21] *** `patch`_ is now known as `patch`

[03:21] <colomon> nod

[03:21] <[Coke]> -> zzz

[03:22] <TimToady> o

[03:22] <TimToady>  /

[03:24] <colomon> sleep soon....

[03:25] <colomon> though I hate going to sleep with a bug...

[03:26] <colomon> got it!

[03:27] * colomon -> zzz

[03:27] <TimToady> \

[03:27] <TimToady>  o

[03:27] *** orafu left
[03:28] *** orafu joined
[03:37] *** replore_ left
[03:38] *** sftp left
[03:46] *** miso_soup left
[04:17] *** s1n joined
[04:20] *** thou joined
[04:21] *** bbkr_ joined
[04:22] *** bbkr left
[04:22] *** bbkr_ is now known as bbkr

[04:22] *** jnthn joined
[04:22] *** BooK_ joined
[04:29] *** PZt joined
[04:37] *** s1n left
[04:42] *** stepnem left
[04:43] *** stepnem joined
[04:49] *** retupmoca left
[04:55] *** birdwindupbird joined
[04:58] *** lestrrat left
[05:00] *** lestrrat joined
[05:03] * sorear unsubscribes from parrot-dev due to CI emails

[05:06] *** birdwindupbird left
[05:06] *** birdwindupbird joined
[05:09] *** miso_soup joined
[05:34] *** miso_soup left
[06:05] *** zby_home joined
[06:12] *** cognominal joined
[06:21] *** GlitchMr joined
[06:43] <dalek> rakudo/match-refactor: 6a5b656 | moritz++ | src/ (2 files):

[06:43] <dalek> rakudo/match-refactor: refactor Str.match to be more modular

[06:43] <dalek> rakudo/match-refactor: 

[06:43] <dalek> rakudo/match-refactor: also implements :exhaustive and :nth

[06:43] <dalek> rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/6a5b656a0d

[06:43] <sorear> o/ GlitchMr

[06:43] <GlitchMr> Hi, sorear 

[06:44] <tadzik> good morning

[06:44] <sorear> good morning tadzik.

[06:45] <sorear> could someone, preferably with Cantonese knowledge, help me in #parrot? :|

[06:46] * sorear wonders how much longer it will take before people start saying Guandongese, and if pinyin will even still be used then

[06:47] *** co_ajak_cewe_ngi joined
[06:47] *** co_ajak_cewe_ngi left
[06:47] <bonsaikitten> I guess pinyin is going to stay for a while

[06:47] *** JimmyZ joined
[06:47] <bonsaikitten> it's convenient, even with all its limitations

[06:47] <sorear> o/ JimmyZ

[06:47] <sorear> bonsaikitten: I'm referring to the fact that Wade-Giles WILL NOT DIE

[06:48] *** takesako joined
[06:48] <bonsaikitten> c'est la vie

[06:48] <sorear> I don't know what the successor to pinyin will be called, but Wade-Giles still won't be dead then either.

[06:49] *** jaldhar joined
[06:53] * JimmyZ uses pinyin :)

[06:56] *** ascrazy joined
[07:03] * JimmyZ wonders which line is about Cantonese knowledge

[07:04] <sorear> JimmyZ: the generally broken english, and their ip resolved to Shenzhen

[07:04] <JimmyZ> sorear:  hehe

[07:04] <sorear> I thought maybe someone like you would be better equipped to understand them

[07:05] <JimmyZ> sorear: I'm in Shenzhen too

[07:06] *** alc joined
[07:07] * JimmyZ always wrote broken english, which is bad

[07:11] *** thou left
[07:15] *** proller_ left
[07:42] <ascrazy> please, tell me how I can dynamically define method, for example in constructor

[07:43] <ascrazy> nom: class X { has Str $.m is rw; submethod BUILD(Str :$.m){ has &.test = (method (){ $.m }).assuming(self) }}; X.new(:m<zxc>).test.()

[07:43] <p6eval> nom 4130f6:  ( no output )

[07:43] <ascrazy> nom: class X { has Str $.m is rw; submethod BUILD(Str :$.m){ has &.test = (method (){ $.m }).assuming(self) }}; X.new(:m<zxc>).test.().say

[07:43] <p6eval> nom 4130f6: OUTPUT«zxc␤»

[07:46] <ascrazy> but i want also dynamically determine the name of the method

[07:47] <ascrazy> and it would be fine if it were a method, not an attribute-subroutine

[07:47] <JimmyZ> ascrazy: X.^add_method('name', method) or X.HOW.add_method('name', method);

[07:53] <ascrazy> great, thanks

[07:53] *** tarch joined
[07:56] <ascrazy> JimmyZ: maybe there a some documentation about it? I have not found anything on http://perlcabal.org/syn/

[08:00] <JimmyZ> ascrazy: https://github.com/rakudo/rakudo/blob/nom/docs/metamodel.pod or https://github.com/rakudo/rakudo/blob/nom/docs/metaobject-api.pod and https://github.com/rakudo/rakudo/tree/nom/src/Perl6/Metamodel

[08:01] <ascrazy> JimmyZ: thanks

[08:07] <sorear> for a while you could use ::() in roles, but that's no longer done

[08:08] <moritz> remember to call X.^compose after you're done adding methods

[08:09] *** GlitchMr left
[08:11] *** Guest67603 left
[08:14] *** preflex left
[08:15] *** preflex joined
[08:38] *** JimmyZ left
[08:42] *** ascrazy left
[08:46] *** mj41 joined
[08:48] *** JimmyZ joined
[08:50] *** xinming left
[08:51] <sorear> I tried removing the DFA cache, and apparently it *does* make a difference; CORE from 60s to 72s

[08:51] *** xinming joined
[08:54] <moritz> and what about memory usage?

[08:56] <sorear> according to the memory profiler, the DFA cache is *tiny8

[08:56] <moritz> ok

[08:57] <moritz> so are the parse trees what takes up all the space during parsing?

[08:57] <sorear> No, that's still the NFA cache.

[09:05] <moritz> compare http://robohash.org/Perl%205 http://robohash.org/Perl%206 and http://robohash.org/Python

[09:05] <moritz> I like how Python has a silly hat :-)

[09:05] <moritz> (robohash generates roboter images based on a hash over a text)

[09:14] <moritz> phenny: tell jnthn in the match-refactor branch, code such as 'abc'.split(/b/) dies with This type cannot unbox to a native integer in method reify at src/gen/CORE.setting:4488. The code that dies is nqp::unbox_i(nqp::istype($n, Int) ?? $n !! $n.Int); and debugging output shows that $n is an Int. Any idea how to debug that?

[09:14] <phenny> moritz: I'll pass that on when jnthn is around.

[09:22] *** ab5tract joined
[09:22] *** zby_home left
[09:24] *** woosley left
[09:36] * moritz feels bad for starting several branches, getting stuck and then needing to bother jnthn++ to get unstuck :/

[09:37] *** ascrazy joined
[09:38] <bacek> ~~

[09:38] <bacek> seen jnthn

[09:38] <aloha> jnthn was last seen in #perl6 5 hours 16 mins ago joining the channel.

[09:39] <bacek> phenny, tell jnthn what is the point of /bs branch? Why don't use ImageIO(Freeze|Thaw) PMCs from Parrot?

[09:39] <phenny> bacek: I'll pass that on when jnthn is around.

[09:41] <arnsholt> IIRC bs is short for bounded serialisation, and aims to do some kind of limited serialisation

[09:41] <moritz> bacek: does ImageIO(Freeze|Thaw) support recursive-but-limited (de)serialization?

[09:41] <arnsholt> So that you don't always freeze your whole object graph

[09:41] <bacek> moritz, can you explain your question?

[09:42] <moritz> bacek: well, we need to serialize objects and type objects

[09:42] <moritz> bacek: which have dependencies on the whole meta object system

[09:42] <bacek> moritz, it all depends how object itself want to serialize. VTABLEs thaw/freeze

[09:42] <moritz> bacek: so all of that needs to be serialized recursively, but for example not the parse tree of the current program

[09:43] <bacek> moritz, it's possible. ImageIO is just orchestrate calls to VTABLE_freeze/thaw

[09:43] <bacek> moritz, every PMC decide by itself which part requires serialization (and how)

[09:44] <bacek> and you'll have really good opportunity to store it in PBC

[09:45] <bacek> Anyway, my point is - we did invent this wheel already. Let's make it more circular instead of inventing new one.

[09:47] *** dakkar joined
[09:47] <moritz> afaict we had several discussion about this on parrotsketch and parrot-dev, and found that parrot's solution wasn't sufficient

[09:47] <moritz> so jnthn++ decided to prototype it outside, so that we know what we need from parrot

[09:51] *** dju joined
[09:55] <bacek> there is one small problem...

[09:56] <bacek> Parrot is some kind of "understaffed" and it's very likely that we'll not have enough people to bring this prototype into Parrot.

[09:57] <moritz> well, rakudo has the same kind of problem

[09:57] *** pernatiy left
[09:57] <moritz> it's also understaffed, and if the most efficient approach is to not mess with parrot, that's what we do

[09:58] *** daxim joined
[09:59] <bacek> moritz, don't "mess with it". Just change it to shape required.

[09:59] <moritz> well, that's not always easy

[09:59] <moritz> http://lists.parrot.org/pipermail/parrot-dev/2011-January/005410.html has some notes

[10:06] <bacek> moritz, yes. 1) We did improve GC. Notably. And I'm looking into rewriting GC once again.

[10:07] <bacek> 2) We have some profiling tools. Still LTA.

[10:08] *** alc left
[10:08] <moritz> bacek: I specifically meant the serialization notes in there

[10:08] <bacek> 3) Just build nqp/bs branch as Parrot's freeze/thaw improvements/replacement. We can discuss which parts are useful, which are useless and which are stupid. But overall serialization is in much better shape now

[10:09] <moritz> bacek: I know about profiling and GC. Much more awesome than 2 years ago

[10:09] <jnthn> morning, #perl6

[10:09] <phenny> jnthn: 09:14Z <moritz> tell jnthn in the match-refactor branch, code such as 'abc'.split(/b/) dies with This type cannot unbox to a native integer in method reify at src/gen/CORE.setting:4488. The code that dies is nqp::unbox_i(nqp::istype($n, Int) ?? $n !! $n.Int); and debugging output shows that $n is an Int. Any idea how to debug that?

[10:09] <phenny> jnthn: 09:39Z <bacek> tell jnthn what is the point of /bs branch? Why don't use ImageIO(Freeze|Thaw) PMCs from Parrot?

[10:09] <bacek> 4) It's stalled. Our PBCs are way too fragile and highly coupled with IMCC :(

[10:09] <bacek> jnthn, aloha

[10:10] <jnthn> hi, bacek 

[10:23] *** NamelessTee joined
[10:30] *** PZt left
[10:32] <jnthn> bacek: There were many reasons - amongst them: it was just easier to build what I wanted the end result to look like, that NQP is bootstrapped and Freeze/Thaw is, iirc, tied to PBC version, that I don't know how I'd have handled the stub code object stuff, the bounded notion of it that moritz already mentioned...

[10:34] <jnthn> ...plus wanting it to fit in neatly with 6model and the HLL::World model, and wanting an object serialization approach that would work out relatively fine when I wish to get NQP bootstrapped on additional backends.

[10:36] <jnthn> bacek: My *expectation* at one point was that m0 would come along, we'd build 6model et al on top of that base, build things to replace the existing interesting PMCs using that, write a new PAST::Compiler to target whatever m0 wanted us to target and so forth.

[10:36] *** unobe left
[10:36] *** [particle] joined
[10:37] *** djanatyn joined
[10:37] *** unobe joined
[10:37] <jnthn> bacek: In that approach, less coupling to existing stuff that I doubt would survive the m0 transition (like, PMCs being more primitive than some low-level objecty thing like 6model) would seem helpful.

[10:39] <jnthn> bacek: Every time I do something that makes the "6model on top of PMCs" model more deeply entrenched, the harder I see turning that arrow in the other direction.

[10:39] <masak> good antenoon, #perl6

[10:39] <phenny> masak: 02:29Z <[Coke]> ask masak to fix skip("reason", $count) in pugs.

[10:40] <masak> later :)

[10:40] *** lestrrat left
[10:41] *** lestrrat joined
[10:42] *** noam__ left
[10:47] *** noam joined
[10:49] *** JimmyZ left
[10:49] *** JimmyZ joined
[10:53] <masak> "Guandongese". cute. and obvious in retrospect.

[10:54] <masak> hehe. http://robohash.org/Ruby

[10:54] <masak> http://robohash.org/PHP

[10:56] <masak> all of them feel "right" in some weird unspecifiable sense. http://robohash.org/Scala http://robohash.org/Java http://robohash.org/Clojure http://robohash.org/Google%20Go

[10:57] <moritz> :-)

[11:02] <masak> of course, it's already 廣州話 to the Chinese, so it won't make a difference to them what the 西人 call it.

[11:03] *** fsergot left
[11:04] * JimmyZ can't understand Cantonese

[11:05] <Teratogen> good morning

[11:05] <masak> Teratogen! \o/

[11:05] <Teratogen> hi masak

[11:06] <dalek> rakudo/match-refactor: a495442 | moritz++ | src/core/Str.pm:

[11:06] <dalek> rakudo/match-refactor: slightly rework Str.split to avoid passing 1..* ranges around internally

[11:06] <dalek> rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/a4954423f6

[11:06] <dalek> rakudo/match-refactor: 919603a | moritz++ | src/core/Str.pm:

[11:06] <dalek> rakudo/match-refactor: re-instate workarounds for the zero-width-regex-matches-after-end-of-string bug

[11:06] <dalek> rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/919603a310

[11:09] <jnthn> moritz: That nqp::unbox_i failing sounds REALLY weird.

[11:09] <moritz> jnthn: aye

[11:09] <jnthn> moritz: Have you managed to golf it to anything?

[11:09] <moritz> jnthn: I've reduced the number of occurences with a495442, but it still crops up in seemingly unrelated ways

[11:10] <dalek> nqp/bs: de17776 | jnthn++ | src/NQP/ (2 files):

[11:10] <dalek> nqp/bs: Move setting of op libs and hll into World.

[11:10] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/de17776478

[11:10] <moritz> jnthn: not yet

[11:10] <moritz> now that tests have stopped hanging, I'm doing a full spectest and see in which contexts it pops up

[11:13] <moritz> nom: say <a b c>.list.gimme(Inf)

[11:14] <p6eval> nom 4130f6: OUTPUT«This type cannot unbox to a native integer␤  in method reify at src/gen/CORE.setting:4435␤  in method gimme at src/gen/CORE.setting:4812␤  in block <anon> at /tmp/GRES6pfmrL:1␤␤»

[11:14] <moritz> jnthn: there you go

[11:14] <moritz> now that I know what the problem is, it's easy to avoid

[11:17] <jnthn> nom: say Inf.WHAT

[11:17] <p6eval> nom 4130f6: OUTPUT«Num()␤»

[11:17] <jnthn> nom: say ?nqp::istype(Inf, Int)

[11:17] <p6eval> nom 4130f6: OUTPUT«False␤»

[11:17] <jnthn> nom: say ?nqp::istype(Inf.Int, Int)

[11:17] <p6eval> nom 4130f6: OUTPUT«False␤»

[11:17] <moritz> I added a pir::say(pir::typeof__SP($n)), and it did say Int, I think

[11:18] <jnthn> nom: say Inf.Int.WHAT

[11:18] <p6eval> nom 4130f6: OUTPUT«Failure()␤»

[11:18] <moritz> nom: say Inf.Int.WHAT

[11:18] <p6eval> nom 4130f6: OUTPUT«Failure()␤»

[11:18] <jnthn> Ah, there we go

[11:18] <jnthn> It's relying on what comes back from .Int to always be an Int.

[11:18] <moritz> we should *really* make .Type either return that type or error out

[11:18] <jnthn> yeah

[11:19] <jnthn> Because it's not a particularly unreasonable expectation :)

[11:20] <jnthn> my $eager = nqp::p6bool(nqp::istype($n, Whatever));

[11:20] <jnthn> That line in List.gimme should be updated to check for Inf.

[11:20] <moritz> and can we make $eager an int?

[11:20] *** cogno joined
[11:21] <jnthn> Why?

[11:21] <jnthn> Bool::True and Bool::False don't require any allocation

[11:21] <moritz> oh right

[11:21] <moritz> then it's fine, I think

[11:21] <jnthn> It'd save a container allocation I guess

[11:22] <jnthn> But only if the compiler is smart enough to know not to box on the LHS of ??

[11:22] <jnthn> Which I suspect it currently ain't.

[11:24] <dalek> rakudo/match-refactor: 5b44683 | moritz++ | src/core/Str.pm:

[11:24] <dalek> rakudo/match-refactor: avoid passing Inf to List.gimme()

[11:24] <dalek> rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/5b4468309e

[11:25] *** cogno left
[11:39] *** benabik left
[11:40] *** fridim_ joined
[11:50] *** noam left
[11:51] *** noam joined
[11:54] *** fridim_ left
[11:56] *** NamelessTee left
[12:05] *** noam left
[12:06] *** noam joined
[12:09] *** NamelessTee joined
[12:24] <dalek> nqp/bs: faad21e | jnthn++ | src/NQP/World.pm:

[12:24] <dalek> nqp/bs: Set up .hll and op libs when doing dynamic compilation.

[12:24] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/faad21e53f

[12:24] <dalek> nqp/bs: cd2d658 | jnthn++ | src/core/NQPRoutine.pm:

[12:24] <dalek> nqp/bs: Correct is_dispatcher; simply add_dispatchee.

[12:24] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/cd2d65837e

[12:24] <dalek> nqp/bs: a4b32bb | jnthn++ | src/how/NQPClassHOW.pm:

[12:24] <dalek> nqp/bs: Correct dispatcher test in multi incorporation.

[12:24] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/a4b32bb8b5

[12:25] <dalek> nqp/bs: 1c44619 | jnthn++ | src/ (2 files):

[12:25] <dalek> nqp/bs: Make stringification of NQPRoutine work.

[12:25] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/1c44619392

[12:25] <dalek> nqp/bs: bf58d7d | jnthn++ | src/ops/nqp.ops:

[12:25] <dalek> nqp/bs: Harden dispatcher check to avoid false positives.

[12:25] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/bf58d7d7a8

[12:25] <dalek> nqp/bs: 65d8cac | jnthn++ | src/ (3 files):

[12:25] <dalek> nqp/bs: Always make code objects for methods - it will make dynamic compilation and thus role handling FAR saner. This required some twiddles to multi-method handling also. Will come back and unify multi-subs with this approach later also.

[12:25] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/65d8cacd3a

[12:31] *** sftp joined
[12:35] *** benabik joined
[12:48] <dalek> roast: 7fa2c2d | moritz++ | S05-modifier/exhaustive.t:

[12:48] <dalek> roast: clean up and fudge exhaustive.t a little

[12:48] <dalek> roast: review: https://github.com/perl6/roast/commit/7fa2c2d982

[12:48] <dalek> roast: b07cd56 | moritz++ | S05-modifier/counted-match.t:

[12:48] <dalek> roast: s/todo/skip/ a test for a NYI feature

[12:48] <dalek> roast: review: https://github.com/perl6/roast/commit/b07cd56a41

[12:52] *** mtk joined
[12:53] *** Trashlord joined
[12:54] <dalek> nqp/bs: 8bf542e | jnthn++ | src/ (2 files):

[12:54] <dalek> nqp/bs: Update clone handling in parametric roles.

[12:54] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/8bf542e5fb

[12:54] <dalek> nqp/bs: b9e1d10 | jnthn++ | src/NQP/World.pm:

[12:54] <dalek> nqp/bs: Start building fixup list for dynamic compilation. Also some general tidying of create_code.

[12:54] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/b9e1d10004

[12:54] <jnthn> Hunger strikes...lunch. bbs

[12:55] *** lateau__ joined
[13:00] *** mtk left
[13:00] *** mtk joined
[13:09] *** tokuhirom joined
[13:11] * masak .oO( how can you lunch during the hunger strikes? )

[13:12] <arnsholt> masak: In re pirc and so on, when I think about it, Perl 6 can easily dispatch to not only pimc (via hypers) but also pifl via precircumfix<[ ]>, just as soon as we get a computer that supports the necessary operations =D

[13:15] <masak> I just think of those as 'hyper map' and 'hyper grep', respectively.

[13:15] <arnsholt> Indeed

[13:15] <masak> pire, if it weren't two degrees impossible, would be 'hyper reduce'.

[13:15] <arnsholt> Yeah, that's the one [+] does of course, not pifl

[13:15] <arnsholt> Brainfart

[13:16] <masak> I guess if the operation being reduced on follows the associative law, you can get the running time down from Inf to log(Inf) *grin*

[13:18] <moritz> and log(Inf) is in the order of 5, as one of our professors used to say :-)

[13:18] <arnsholt> I'm gonna have to try and remember that quote

[13:19] <arnsholt> I gave my students the "Any problem in CS can be solved with an additional layer of indirection" quote yesterday

[13:19] <arnsholt> But log(Inf) is on the order of 5 might be possible to wriggle in at some point

[13:20] <masak> arnsholt: you teach? nice!

[13:20] <masak> I find the "additional layer of indirection" quote to be very true nowadays.

[13:21] <masak> I wonder if I couldn't give a talk just about that.

[13:21] <arnsholt> Yeah, it's pretty cool. Mostly I help students during lab sessions, but I'm giving about a third of the lectures in the course as well

[13:21] <moritz> ... especially if you add "... except for the problem of having too many layers of indirection"

[13:22] <arnsholt> Giving a two hour lecture is also one of the mentally exhausting things (if not the most) I've ever done, incidentally

[13:22] <arnsholt> moritz: Yeah, I mentioned that as an aside, but the first part was even on the slide =)

[13:22] <moritz> agreed. I've given a few 2-hour tutorials (partially in lecture style). And once I've given two such things in a row.

[13:23] <arnsholt> Ow. That sounds extra exhausting

[13:23] <arnsholt> But OTOH, it's a very good experience. I usually end up feeling like I've learnt something

[13:23] <moritz> masak: it's just a different view on the ladder of abstraction thing you've blogged about (variables/loops/routines/macros, dunno which steps I've forgotten)

[13:25] <jnthn> .oO( Every problem can be solved by either adding or removing a level of indirection. Now you just gotta figure out which of the two you need this time... )

[13:28] *** skids left
[13:28] *** awoodland joined
[13:28] <moritz> woah, it seems I've broken something multi-dispatchy on the match-refactor branch :/

[13:29] <Teratogen> is Perl 6 thread safe?

[13:29] <moritz> Teratogen: is English thread safe?

[13:29] <Teratogen> baw

[13:29] <moritz> the question doesn't make much sense for a language

[13:30] <Teratogen> ok

[13:30] <Teratogen> Does Perl 6 have threads?

[13:30] <Teratogen> wait

[13:30] <Teratogen> Does English have threads?

[13:31] <flussence> ()

[13:32] <moritz> Teratogen: Perl 6 threads aren't specced in much detail yet (nor any other concurrency stuff), but there will be threads

[13:32] <Teratogen> cool

[13:32] <moritz> and then, some features and libraries will be thread safe, and others might not be.

[13:33] <masak> moritz: I don't think I ever wrote that blog post ;)

[13:34] <masak> oh! maybe as an advent post!

[13:34] <masak> ah, right. http://perl6advent.wordpress.com/2011/12/19/day-19-abstraction-and-why-its-good/

[13:45] *** kaare_ joined
[13:45] *** fsergot joined
[13:46] *** lateau__ left
[13:46] <fsergot> o/ :)

[13:46] *** rsimoes left
[13:50] *** stepnem left
[13:54] *** rsimoes joined
[13:55] *** stepnem joined
[13:55] <masak> fsergot! \o/

[13:57] *** GlitchMr joined
[14:02] *** Trashlord left
[14:03] *** PZt joined
[14:05] *** stepnem left
[14:08] <masak> Trashlord's quit message is allegedly a Cree "prophesy". but I can find no reliable source for it on the interwebs.

[14:10] <huf> also it's wrong. when the premises come true, you can still eat other people for a while

[14:11] <flussence> .oO( money can't be eaten, but it can buy you some zombie repellant )

[14:12] <dalek> rakudo/match-refactor: 560633d | moritz++ | src/core/ (2 files):

[14:12] <dalek> rakudo/match-refactor: handle List.gimme(Inf) and fix two two off-by-one errors

[14:12] <dalek> rakudo/match-refactor: 

[14:12] <dalek> rakudo/match-refactor: This brings the branch on par with nom wrt passing tests, except

[14:12] <dalek> rakudo/match-refactor: two odd failures in S06-operator-overloading/sub.t and

[14:12] <dalek> rakudo/match-refactor: integration/advent2009-day22.t

[14:12] <dalek> rakudo/match-refactor: review: https://github.com/rakudo/rakudo/commit/560633d964

[14:12] <masak> the quote says nothing about eating people.

[14:13] <flussence> ...what if the money was made out of rice paper?

[14:14] <masak> that's the best response to that quote I've ever heard.

[14:27] *** stepnem joined
[14:32] <moritz> are some of you also getting "mail delivery failed" emails that quote very old mails to perl6-* lists?

[14:32] <tadzik> nope

[14:33] <masak> нет

[14:33] <moritz> I think [Coke] mentioned something similar

[14:36] <masak> some people in here might appreciate http://herbsutter.com/welcome-to-the-jungle/ -- it's about the future of computing hardware.

[14:38] *** PacoAir joined
[14:39] <PerlJam> masak: Haven't you mentioned that before?

[14:40] <PerlJam> I know I showed it to my coworkers recently and I could have sworn I got the URL from here.

[14:40] * moritz thinks he's also seen it before

[14:41] <masak> I might've. yeah, it was probably me.

[14:42] <masak> it's been sitting in my tab queue for a while, and I just started reading it.

[14:43] *** kaare__ joined
[14:43] *** kaare_ left
[14:46] *** bobbob joined
[15:01] * tadzik is still waiting for some psychological analysis which will tell him, why some people tend to have few dozens of tabs opened all the time, and some like to close them

[15:01] <moritz> tadzik: no need for psychology. I have good techincal reasons (memory hungry browser, not too much RAM) for closing them

[15:02] <cognominal> tabs, the new bookmarking system...

[15:05] <tadzik> moritz: well, I have none of those problems and I still keep tabs closed

[15:05] <moritz> tadzik: you might have that problem if you kept 200+ tabs open :-)

[15:05] <tadzik> true :)

[15:06] <tadzik> oh, oh, idea for Perl6::Critic

[15:06] <masak> I have 32 tabs open. that's on the high side for me nowadays.

[15:06] <tadzik> warn if I declare class A is B, when B is a role. I probably do not want

[15:09] * moritz uses that feature in the exceptions stuff

[15:09] <moritz> everything that does X::Comp also needs to inherit from Exception, so role X::Comp is Exception { }

[15:10] * jnthn back

[15:10] <jnthn> (no, all that time wasn't *just* spent on lunch)

[15:11] <tadzik> that's not what I mean, I think

[15:11] <frettled> I hope you had sufficient noms.

[15:11] <jnthn> frettled: Yes. :)

[15:12] <tadzik> I stumbled upon this when porting Panda to nom; B was a role with some stub (!!!) methods, , class A was implementing them, but upon class A is B an error occured, "methods NYI in B"

[15:12] <jnthn> Yeah, that will happen.

[15:13] <tadzik> that did happen, and did give me some headscratching ;)

[15:13] <jnthn> It's almost certainly correct. We can't turn a role into a class if it has missing bits. :)

[15:13] <flussence> shouldn't those be "..." instead?

[15:13] <jnthn> But I can see how it would make you think "hmm wtf" too :)

[15:13] <moritz> flussence: ... and !!! are both allowed as stubs

[15:13] <tadzik> somehow, it came to my memory while I was thinking about interfaces in Go

[15:13] <flussence> oh, ok

[15:13] <moritz> and !!! is like &die, and ... is &fail

[15:14] <jnthn> Don't forget ???

[15:14] <jnthn> :)

[15:14] <moritz> tadzik: oh, I misunderstood you. Yes, 'class A is SomeRole' is likely and error, whereas 'role A is SomeClass' is much more likely to be legit

[15:14] <tadzik> I'm looking forward to a module which will name them  "fyi", "wtf" and "omg"

[15:15] <tadzik> moritz: right

[15:18] *** noam left
[15:19] *** noam joined
[15:22] *** att_ left
[15:23] <jnthn> Well, "class A is SomeRole { }" means "pun the role then inherit from the pun"

[15:27] <moritz> right

[15:30] <jnthn> I think we shouldn't stigmatise it as it's a mechanism that eases class => role refactoring.

[15:34] <moritz> well

[15:35] <moritz> maybe we really want a way to mark a class as not having any stubbed methods left

[15:35] <moritz> so that we can complain at compile time if that assumption is violated

[15:35] *** skids joined
[15:36] *** att_ joined
[15:36] *** GlitchMr left
[15:38] <jnthn> nom: role R { method m() { ... } }; class C does R { }

[15:38] <p6eval> nom 4130f6: OUTPUT«===SORRY!===␤Method 'm' must be implemented by C because it is required by a role␤»

[15:38] <jnthn> moritz: ^^ already is compile time.

[15:39] <moritz> nom: role R { method m() { ... } }; class C is R { }

[15:39] <p6eval> nom 4130f6: OUTPUT«===SORRY!===␤Method 'm' must be implemented by R because it is required by a role␤»

[15:39] <moritz> oh, that case is covered too? great

[15:39] <jnthn> That is just a tad confusing.

[15:39] <jnthn> But...not sure how easily we can fix that.

[15:39] <jnthn> I mean, it'd be nice if it told you it was due to punning

[15:40] <moritz> yes, if it said "Error while promoting role R to a class: Method 'm'..."

[15:40] <moritz> that would be more awesome

[15:41] *** tokuhirom left
[15:41] <dalek> niecza: c03a4da | (Solomon Foster)++ | lib/CORE.setting:

[15:41] <dalek> niecza: Add Range.pick and Range.roll based on the Rakudo versions.

[15:41] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c03a4dabca

[15:41] <dalek> niecza: ea24f5c | (Solomon Foster)++ | lib/CORE.setting:

[15:41] <dalek> niecza: Fix copy-n-pasto.

[15:41] <dalek> niecza: review: https://github.com/sorear/niecza/commit/ea24f5c234

[15:41] <benabik> nom: role R { method m() { ... } }; class C is R { method m() { } }

[15:41] <p6eval> nom 4130f6: OUTPUT«===SORRY!===␤Method 'm' must be implemented by R because it is required by a role␤»

[15:41] *** tokuhirom joined
[15:41] <dalek> roast: 92c0f96 | (Solomon Foster)++ | S32-list/ (2 files):

[15:41] <dalek> roast: Add more sanity tests for Range.pick and Range.roll.  Unfudge tests which are now quick in niecza.

[15:41] <dalek> roast: review: https://github.com/perl6/roast/commit/92c0f96137

[15:41] <dalek> roast: a95178f | (Solomon Foster)++ | S0 (10 files):

[15:41] <dalek> roast: Merge branch 'master' of github.com:perl6/roast

[15:41] <dalek> roast: review: https://github.com/perl6/roast/commit/a95178f510

[15:44] *** Psyche^ joined
[15:45] <dalek> nqp/bs: 92b0fbc | jnthn++ | src/NQP/World.pm:

[15:45] <dalek> nqp/bs: Bring the code object fixup mechanism in line with the one in Rakudo (essentially, it fixes up by setting the $!do rather than mucking round with assign vtable).

[15:45] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/92b0fbc812

[15:45] <dalek> nqp/bs: 0f9b81e | jnthn++ | src/NQP/World.pm:

[15:45] <dalek> nqp/bs: Implement fixing stuff up in dynamic compilation. Gets the role tests passing again in the run-immediately case; serialization not quite there yet, though.

[15:45] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/0f9b81ec6e

[15:46] *** tokuhirom left
[15:47] *** Patterner left
[15:47] *** Psyche^ is now known as Patterner

[15:53] <masak> do people in here self-identify as "hackers"?

[15:53] <flussence> sometimes

[15:53] <masak> I mean, can the word still mean "programmer", or has it been claimed for "computer crimial"?

[15:55] <cognominal> Perl is about lazyness. What about slhackers?

[15:56] <jnthn> masak: I accept (though resent) that in many circles it's been claimed as the latter. I'd self-identify as that quite comfortably hear, but would likely not in any situations where it was likely to be misinterpreted.

[15:56] <jnthn> s/hear/here/

[15:58] <geekosaur> most programmer-oriented communities still use hacker in something close to the original sense (and MIT still uses it in the sense in which it was coined, naturally, with some splashover to similar institutions)

[15:58] <masak> I find I say "to hack on" in its various forms more often than I say "hacker" nwoadays.

[15:59] <moritz> masak: I identify myself as a "hacker" when I manage to come up with a clever hack (like the "prototype stuff in SAFE.setting to get shorter compilation times" thing yesterday), but mostly I don't think I deserve that title, because I don't do clever hacks often enough

[16:00] <moritz> and I do use "hacker" as meaning "computer criminal" when talking with non-tech people, simply because then they know what I'm talking about

[16:00] <moritz> but internally, "hacker" is positively and non-criminally connotated for me

[16:01] <benabik> Hacker is becoming less associated with criminals, I think.  Hackerspaces are starting to flourish and more and more people know it doesn't mean a den of criminals.

[16:02] <moritz> jnthn: do you have any idea why 5b4468309e03b0d6ff3f01070997b6ebb9687103 (in match-refactor) breaks adding lexical multis to operators?

[16:04] <jnthn> o.O

[16:04] <jnthn> No.

[16:05] <moritz> in that branch, S06-operator-overloading/sub.t fails

[16:05] <arnsholt> I do much the same as masak, I think

[16:05] <moritz> and one of the integration tests

[16:05] <moritz> and I have not a single idea of what that could be

[16:05] <moritz> and git bisect identified that as the offending commit

[16:05] <arnsholt> I use the verb to hack reasonably frequently (which results in some confusion with others, TBH), but don't really label myself as hacker with any frequency

[16:12] <masak> I seldom use "hacker" as meaning "computer criminal", because I secretly deplore this more mainstream sense of the word.

[16:14] <colomon> +1

[16:15] <PerlJam> masak: why secretly? :)

[16:17] <masak> because in a conversation when someone uses "hacker" in the "criminal" sense, I don't go all rms on them an put them right.

[16:17] <flussence> masak++

[16:18] <flussence> I'm often tempted to myself :)

[16:19] <masak> in the pendulum swing between valuing correctness and valuing communication, I'm currently in a "valuing communication" phase, and have been for some years :)

[16:20] <au> maska++ #communic

[16:20] <au> masak++, even.

[16:20] <PerlJam> masak: yet you silently accept their mis-use of the word "hacker" rather than communicate to them the proper perspective   :)

[16:20] * au thinks the 13th-century "one who cuts wood, builds stuff with wood, and builds one's own wood-cutting tools" sense is quite communicable, too

[16:20] <masak> PerlJam: yes.

[16:21] <masak> that's the backside of the "value communication" coin :)

[16:21] <masak> maybe I'll reach some kind of synthesis between the two one day...

[16:22] <PerlJam> au: I'd never really considered that definition before, but it's interesting for me to find out that I was a hacker long before I was a hacker  :)

[16:22] <au> :D

[16:23] <masak> the 13th-century sense has some pretty symmetries with the 20th-century programmer one. :)

[16:23] <PerlJam> masak: you can always tactfully educate people without being RMS-like :)

[16:24] <au> oh yes, you can s/wood/code/ and it'd still work :)

[16:24] <au> or even s/wood/slack/...

[16:24] <benabik> Lots of people seem to turn wood into slack...

[16:24] * benabik has heard rumors people do useful things with power tools, but has yet to see it.  ;-)

[16:25] <masak> a language hacker does s/wood/meaning/ :)

[16:25] <au> mmm meaning-cutting tools

[16:25] * masak admires the strange loop

[16:26] <cognominal> "going rms on people". Nice neologism.

[16:26] <benabik> "Meaning-cutting"?  People do speak of a well honed argument...

[16:27] <masak> cognominal: it's "going GNU/rms on people" to you, mister.

[16:27] <PerlJam> #perl6 is adept at cutting meaning from words and other raw materials

[16:27] <PerlJam> masak++

[16:27] <masak> that's why we like to bikeshed, I guess.

[16:27] <masak> most bikesheds are on choice of words.

[16:29] <arnsholt> Good point. I guess that's the danger of including too many linguists (or close enough approximations thereof) ^_^

[16:29] <cognominal> masak++

[16:30] *** xinming left
[16:30] <masak> I can't just riff on rms like that without saying that I also respect the man, and the way he holds on to principles.

[16:31] <masak> in a world where people willingly give away their privacy on Facebook, people like rms are sorely needed.

[16:31] <PerlJam> masak: yep

[16:31] *** slavik1 joined
[16:32] *** xinming joined
[16:37] <cognominal> somehow rms is often counterproductive. I have seen him aggressive against a mayor of a Paris arrondissement because he was confusing Open source and free software. Agression against a well-meaning outsider who does not know minute catechism points but is ready to propagage the faith is stupid.

[16:38] *** retup-wo1k left
[16:39] <daxim> the mayor clearly had it coming

[16:40] * masak .oO( he was in for some mayor rms aggression )

[16:40] *** mucker joined
[16:40] <daxim> two crowns for the pun box!

[16:45] *** ascrazy left
[16:58] *** bluescreen10 joined
[17:00] *** pomysl joined
[17:00] *** pomysl left
[17:00] *** pomysl joined
[17:01] *** mj41 left
[17:02] *** birdwindupbird left
[17:02] *** sudokode left
[17:15] <dalek> nqp/bs: 043c6a3 | jnthn++ | src/6model/serialization_context.c:

[17:15] <dalek> nqp/bs: Make an error more useful for debugging.

[17:15] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/043c6a3215

[17:15] <dalek> nqp/bs: 09f9aea | jnthn++ | src/6model/serialization.c:

[17:15] <dalek> nqp/bs: For closures, if they have a high level code object attach, serialize that attachment and put it back when deserializing. This means that the multi-method tests now all pass after serialization/deserialization.

[17:15] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/09f9aea220

[17:16] <moritz> \o/

[17:16] <TimToady> "Error while promoting role R to a class"  Odd, I think of it as demoting :)

[17:16] <jnthn> ;)

[17:17] <jnthn> moritz: I've still gotta figure out why roles don't survive the serialization now, though...

[17:17] <TimToady> I think of abstractions as higher than concretions, generally

[17:18] <jnthn> oh...partly 'cus I've done something really dumb...

[17:22] <jnthn> omgz, I think it just worked...

[17:26] * masak decommutes

[17:26] *** daxim left
[17:28] *** MayDaniel joined
[17:28] *** sudokode joined
[17:37] *** Chillance joined
[17:37] *** birdwindupbird joined
[17:38] <dalek> nqp/bs: 9300396 | jnthn++ | src/HLL/World.pm:

[17:38] <dalek> nqp/bs: Add a way to update a code ref in an SC (for example, if dynamic compilation comes along and actually compiles the real thing).

[17:38] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/93003967c7

[17:38] <dalek> nqp/bs: abd4d49 | jnthn++ | src/NQP/World.pm:

[17:38] <dalek> nqp/bs: Make the fixup logic for dynamic compilation aware of twiddles it needs to make with regard to the SC: marking with STATIC_CODE_REF and updating the SC entry itself. This gets the role test to pass after serialization/deserialization.

[17:38] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/abd4d49c1d

[17:41] *** sudokode left
[17:51] <dalek> nqp/bs: 36cf9ca | jnthn++ | src/NQP/World.pm:

[17:51] <dalek> nqp/bs: Use normal compilation chain when doing dynamic compilation, which means we don't miss adding various directives we need to get .const thingies. Fixes serialization of QRegex, though all the tests fail.

[17:51] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/36cf9cac8c

[17:51] <dalek> nqp/bs: c35d3cd | jnthn++ | src/core/NQPRoutine.pm:

[17:51] <dalek> nqp/bs: Fix boolification of NQPRoutine; now all QRegex tests pass with serialized QRegex executable.

[17:51] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/c35d3cdbb8

[17:52] <dalek> nqp/bs: e694ab9 | jnthn++ | / (4 files):

[17:52] <dalek> nqp/bs: Merge branch 'master' into bs

[17:52] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/e694ab9e33

[17:55] <sorear> good * #perl6

[17:56] <colomon> \o

[17:56] <jnthn> hi, sorear 

[18:00] *** pmurias joined
[18:01] *** mucker left
[18:01] <pmurias> sorear: hi

[18:06] *** prammer joined
[18:10] *** dakkar left
[18:13] *** MayDaniel left
[18:15] *** JimmyZ left
[18:18] *** kmwallio joined
[18:19] <pmurias> sorear: when should i commit code for the use Foo:from<perl5>, once it starting to work (now) and clean it up in subsequent commits or when it's reasonably polished?

[18:25] *** kmwallio left
[18:25] <PerlJam> pmurias: release early, release often  :-)

[18:26] <sorear> If nothing else, at least commit it to a branch.

[18:35] *** awoodland left
[18:35] *** birdwindupbird left
[18:36] *** birdwindupbird joined
[18:42] *** Tedd1 joined
[18:42] *** pernatiy joined
[18:42] * [Coke] yawns

[18:45] <sorear> heya [Coke] 

[18:47] <pmurias> sorear: t/run_spectests is supposed to be all passes?

[18:50] *** Chillance left
[18:50] <sorear> ideally

[18:52] <[Coke]> there are failures, though.

[18:55] <[Coke]> niecza has been consistently failing 8 tests for some time now.

[18:55] *** Chillance joined
[18:56] *** pmurias_ joined
[18:56] *** Tedd1^ joined
[18:57] *** pmurias left
[18:57] <dalek> nqp/bs: d17d795 | jnthn++ | src/ModuleLoader.pm:

[18:57] <dalek> nqp/bs: Slightly cheaty fix to global merging (mostly messy due to PAST not being done with 6model and NQP not really having a distinct package-only meta-object). With this, the Rakudo build atop of nqp/bs actaully produces a perl6.exe, though things blow up in the Metamodel compilation (which was expected at this point).

[18:57] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/d17d79593a

[18:58] *** Tedd1 left
[18:59] <dalek> rakudo/bs: e78ab30 | jnthn++ | src/Perl6/Metamodel/C3MRO.pm:

[18:59] <dalek> rakudo/bs: Make c3merge a method to avoid an issue with subs in roles; amazingly, this is enough to make Perl6::Metamodel build (though it needs various changes yet).

[18:59] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/e78ab300da

[19:00] *** MayDaniel joined
[19:02] *** bobbob left
[19:05] *** roland333 joined
[19:05] <roland333> good afternoon everybody.

[19:07] <roland333> sorear, you busy?

[19:07] <sorear> o/ roland333

[19:07] <roland333> \o

[19:07] <roland333> high five bro

[19:07] <sorear> I was wondering when you'd be back. :)

[19:07] <roland333> You're going to be disappointed in me=) I decided to focus my efforts on python at first.

[19:08] <roland333> But still hang out in this channel

[19:08] <roland333> I'm scared of python people.

[19:08] <sorear> *shrug*

[19:08] <sorear> that's fine with me.

[19:09] <sorear> a lot of other people will insult you in an attempt to prove their manliness.

[19:09] <roland333> Yeah, you guys were so cool sunday I'm hooked on this channel.

[19:09] <roland333> im scared more than they'll have me put in commands that will damage my machine actually.

[19:10] <roland333> I enjoy a good argument as much as the next guy. so that wouldn't dissuade me.

[19:10] *** pmurias_ is now known as pmurias

[19:11] <roland333> Yesterday I made it my mission to get linux running on my mac.  Took all day and it was a huge pita, but I finally gave up trying to set up a dual boot and tried to set up a VM and it worked smoothly.

[19:11] <roland333> Feels good.

[19:12] <sorear> Why bother?

[19:12] <sorear> If your mac was made this century, it already has FreeBSD on it

[19:13] <pmurias> sorear: t/run_spectests is supposed to be all passes?

[19:13] <sorear> 10:50 < sorear> ideally

[19:13] <sorear> 10:52 < [Coke]> there are failures, though.

[19:13] <sorear> 10:55 < [Coke]> niecza has been consistently failing 8 tests for some time now.

[19:13] <dalek> rakudo/bs: a4be325 | jnthn++ | src/Perl6/World.pm:

[19:13] <dalek> rakudo/bs: Rip out much of the deserialization code generation that can be got rid of just by removing it, and that doesn't need more careful consideration.

[19:13] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/a4be325e0d

[19:14] <roland333> sorear, i found the freebsd dir in spotlight, how do I get it running?

[19:15] <roland333> I only see 3 files and none of them are familiar types.

[19:15] <pmurias> sorear: lots of tests pass, commiting, will fix the failures once they finish ;)

[19:15] <sorear> roland333: os x is a graphical environment built on top of freebsd

[19:16] <benabik> (FreeBSD's userspace on top of Mach.  OS X is a many layered thing.  </pendantic>)

[19:16] <roland333> I knew it had a unix/linux type engine, but i really want to work in an authentic environment.

[19:16] <roland333> benabik, I enjoy pendantry, so thanks=)

[19:16] <pmurias> ahh merge conflicts

[19:16] <flussence> OS X is a certified Unix®

[19:17] <benabik> There is nothing missing in OS X as a real Unix environment.  X11, gcc, bash, perl, the whole lot is there.  (Although you do have to download Xcode for the dev tools, but it's free)

[19:17] <sorear> OS X probably has more of the original AT&T code than Linux does

[19:18] <roland333> so can I customize the appearance, modules, etc etc like I could in ubuntu?

[19:18] <sorear> (where by Linux I actually mean common Linux-based operating systems)

[19:18] <roland333> I have almost no idea what i'm talking about so be gentle.

[19:19] <roland333> I guess what I mean, can I customize my graphical environment?

[19:19] <roland333> Its shallow, but hey, i'm a shallow guy.

[19:19] <sorear> sure OSX has customization options.

[19:20] <sorear> the graphical environment used by OSX is not the same as the graphical environment used in Ubuntu

[19:20] <sorear> as always there are layers

[19:20] <sorear> the core graphics system that Ubuntu uses is called "X11", and I beleive an OSX version of that is available from Apple

[19:20] *** mj41 joined
[19:21] <roland333> cool thanks.

[19:21] <roland333> gonna mess with that and see if i can figure it out on my own.

[19:21] <benabik> It comes installed on 10.5(?)-10.7.  It was downloadable for earlier version.

[19:21] <sorear> core X11, however, just gives you a black screen and the ability to open windows

[19:21] <roland333> before i go, any pitfalls I should be wary of?

[19:21] <roland333> Can I build my own custom graphical environment on top of core x11 though?

[19:22] <benabik> (And will be downloadable again for 10.8+, since Xquartz updates much faster than the OS does.)

[19:22] <sorear> so Ubuntu also provides add-on modules - a desktop (displays icons on the screen), a panel (displays the top bar), and a window manager (displays title bars on windows)

[19:22] <roland333> I want to do it from the ground up.

[19:24] <benabik> First you have make a cross-compiler environment to build the kernel with...  <.<  >.>

[19:24] <sorear> I'm personally running panel-less, desktop-less, and with a window manager that I partially wrote myself.  But I don't generally recommend this.

[19:24] <benabik> That may be starting from underground...

[19:25] <benabik> sorear: Custom WM in OS X?

[19:25] <sorear> benabik: Linux

[19:25] <benabik> sorear: Ah.  Yes.  That's far less confusing.  Sounds fun.  :-D

[19:25] <roland333> haha

[19:25] <roland333> it does.

[19:25] <sorear> I don't think it's even possible to replace the system WM/panel/desktop in OSX

[19:26] <roland333> I helped my buddy with a pc get ubuntu running on his machine and now he's doing all kinds of cool customization and i'm jealous.

[19:26] <roland333> sorear, thats why i want to get linux on my machine.

[19:26] <sorear> OSX is designed to make it hard for you to shoot yourself in the foot

[19:26] <benabik> It's possible to kill Finder...  The Dock has a tendency to do more than you might expect though.

[19:26] <sorear> it's very, very easy to break a linux system

[19:27] <roland333> I spent all goddamn day trying to set up a dual boot and had to give up and set up a vm.

[19:27] <benabik> Some Linux systems come pre-broken...  Although I may just be a little bitter about multi lib / aptitude problems in Ubuntu 10.10

[19:28] <roland333> ha

[19:28] <tadzik> jnthn: I get lots of WARNING: STable deserialization not yet fully implemented on nqp/bs, is that expected?

[19:28] <doy> ubuntu doesn't come pre-broken, it's just that anything you try to do to it breaks it

[19:29] <roland333> sorear, i'm willing to put in the work to get it running, i really want a dual boot.  I have blank dvds, a 16 gb flashdrive but I just couldnt get it working.

[19:29] <roland333> What flavor do you guys recommend for a beginner?

[19:30] <jnthn> tadzik: Yes.

[19:30] <jnthn> tadzik: Did it otherwise build OK?

[19:30] <benabik> doy: Install 10.10 on x86_64, run aptitude, and then tell me it's not broken.  Double packages everywhere and forgetting new packages doesn't work.

[19:30] <tadzik> jnthn: yes, and tests PASS

[19:30] <doy> linux on apple hardware can be more of a challenge, because apple makes so much of their own hardware that some things may not be as well supported

[19:30] <tadzik> jnthn++

[19:30] *** sahadev joined
[19:30] <jnthn> tadzik: Thanks, good to hear it works on at least one other platform :)

[19:30] *** mj41 left
[19:30] * jnthn noms some dinner

[19:30] <doy> benabik: well, i haven't tried it in a while, it may have gotten worse

[19:30] <doy> (:

[19:31] *** bluescreen10 left
[19:31] <benabik> doy: I imagine it's a temporary thing, but it frustrated me to no end trying out Ubuntu Server.

[19:31] <roland333> sorear, what kind of machine are you on?

[19:32] <sorear> an unmarked white box of unknown origin that's half as old as I am

[19:32] <sorear> +at least

[19:32] <roland333> so a pc?

[19:32] <sorear> yes, pc compatible

[19:33] <roland333> shitty.  How familiar are you with macs?

[19:33] <sorear> dubious

[19:33] <sorear> I'm more familiar with the older systems

[19:34] <sorear> I've read _Inside Macintosh_

[19:34] <benabik> I duel-boot OS X / Win7 on my MacBook.  Never tried adding Linux to it, I just add what I need to OS X.

[19:35] <sorear> I've used OSX a few times... I know how to open a terminal, and I have "fond" memories of one time when I needed to edit a file and the only thing I could get to work was ed(1)

[19:36] <huf> hehe

[19:36] <roland333> =0

[19:36] <roland333> is timtoady actually timtoady or is that a tribute nickname?

[19:36] <moritz> TimToady is as TimToady as TimToady can be.

[19:36] <huf> he's the real thing, or a facsimile so good 

[19:36] <huf> that we dont need the real one

[19:38] <roland333> haha, thats amazing.

[19:39] <roland333> i just read his essay from '98 on how perl is the first postmodern programming language.

[19:39] <roland333> Completely blown away.  

[19:43] <dalek> rakudo/cont_reuse: 7cb1087 | moritz++ | src/binder/multidispatch.c:

[19:43] <dalek> rakudo/cont_reuse: fix rakudo for parrot's take_recont branch

[19:43] <dalek> rakudo/cont_reuse: review: https://github.com/rakudo/rakudo/commit/7cb1087062

[19:43] <masak> roland333: Perl 6 is the first post-postmodern language.

[19:43] <moritz> oops, forgot to credit bacek++ for that patch

[19:44] <roland333> Thats fitting, considering its not done masak.

[19:44] *** bluescreen10 joined
[19:45] <masak> roland333: nice to have you back, by the way.

[19:45] <roland333> IF you couldn't tell, i despise that term, post-postmodern.  

[19:45] <roland333> Man, this is the best channel i've been in since my days of Ultima Online.

[19:45] <masak> oh! then Perl 6 is just pre-post-postmodern.

[19:45] <roland333> hha

[19:45] <moritz> well, you can shorten that to post^2-modern

[19:45] <moritz> you're totally right about DRY of course

[19:46] <roland333> you and sorear especially are a tribute to the perl community.

[19:48] <masak> especially sorear :)

[19:48] <roland333> haha, i wasn't going to say it:P

[19:51] * TimToady hides behind a post-post.

[19:52] <masak> is that something like a combined lamp-post and mailbox?

[19:53] * skids pictures a dog wearing a big white chew-cone (forming an O), with the letters SX spraypainted and/or shaved on its side.  Good thing he doesn't have a dog.

[19:53] <sorear> TimToady: hey, roland333 wants to know, are you really TimToady?

[19:53] <TimToady> why do you think I'm hiding?

[19:54] <sorear> roland333: I am flatttered

[19:54] <roland333> Larry, I can't tell you how much I enjoyed your essay on postmodernism and perl.

[19:55] <TimToady> btw, finally "upgraded" to Ubuntu 11.10 on my laptop last night, and survived, mostly...

[19:55] <roland333> more for the concise and creative explanation of postmodernism than anything else.

[19:55] <TimToady> well, it's only one view of postmodernism

[19:55] * masak likes that talk too

[19:56] <TimToady> the deconstructionists didn't like me making puns on that though...

[19:56] *** snearch joined
[19:56] <TimToady> apparently puns are a sign of the patriarchy, or something...

[19:56] <moritz> nom: class A { }; { multi infix:<==>(A $, A $) { say "A+" }; A.new == A.new; }

[19:56] <p6eval> nom 4130f6: OUTPUT«A+␤»

[19:57] <roland333> haha.

[19:57] <moritz> didn'T we have a ticket that some operators can be overloaded in nom, and other can't?

[19:57] <roland333> Well, i'm starstruck.  My friend Scott is one of your great disciples.

[19:57] <LoRe> TimToady: i've switched to archlinux after I lost a live while upgrading to 11.10... 

[19:58] <sorear> you'll get over that.

[19:58] <TimToady> roland333: my condolences

[19:58] <TimToady> LoRe: well, when I upgraded my server to 11.10 it bricked it for a few days...

[19:58] <TimToady> which is why I waited on the laptop

[19:59] <sorear> if you're going to be active in the perl irc community you'll need to learn to cope with occasional visits from TimToady and merlyn and yrlnry

[19:59] <TimToady> now that I'm here, my officemates are hauling me off to lunch... &

[19:59] <roland333> i'll learn to cope i suppose.

[19:59] <doy> archlinux++

[20:00] <roland333> who are merlyn and yrlnry?

[20:00] <sorear> Randal L. Schwartz, Mark-Jason Dominus

[20:00] <sorear> respectively

[20:00] * au briefly wonders why no-one has picked up the obvious dual nickname "rwlnwr", then fades to sleep &

[20:01] <moritz> nom: class A { }; { multi infix:«<»(A, A) { say "A overloaded" }; A.new < A.new; }

[20:01] <p6eval> nom 4130f6: OUTPUT«No applicable candidates found to dispatch to for 'Real'. Available candidates are:␤:(Mu:U \$v, Mu %_!)␤␤  in method Real at src/gen/CORE.setting:665␤  in sub infix:<<> at src/gen/CORE.setting:2305␤  in block <anon> at /tmp/WHCmyaMoUM:1␤␤»

[20:01] <moritz> nom: class A { }; { multi infix:«+»(A, A) { say "A overloaded" }; A.new + A.new; }

[20:01] <p6eval> nom 4130f6: OUTPUT«A overloaded␤»

[20:01] <masak> moritz: yes, I think we did. but I can't find it.

[20:01] * jnthn recalls that one

[20:02] <jnthn> But I thought it may be a bit of confusion 

[20:02] <sorear> I don't get au's joke

[20:02] <au> sorear: both are off-by-one typos of "telnet" on a qwerty keyboard.

[20:02] <jnthn> Along the lines of "the one in the setting re-dispatches and doesn't include my candidates" - which it won't given the way we've implemented it at the moment.

[20:02] <sorear> ah.  my mind jumped to rot13, leyael, Yuval Kogman...

[20:03] <dalek> niecza: 3da37be | (Paweł Murias)++ | / (4 files):

[20:03] <dalek> niecza: Exporting a empty sub using :from<perl5> works.

[20:03] <dalek> niecza: review: https://github.com/sorear/niecza/commit/3da37be4f2

[20:03] <dalek> niecza: d05a5fe | (Paweł Murias)++ | / (4 files):

[20:03] <dalek> niecza: Exporting a single sub works.

[20:03] <dalek> niecza: review: https://github.com/sorear/niecza/commit/d05a5fe597

[20:03] <moritz> so I should re-submit the bug from above, right?

[20:04] <moritz> jnthn: I think that the bug in the match-refactor branch is a manifestation of that very same bug

[20:04] <moritz> and that it simply shifts == from overloadable to not overloadable

[20:04] <masak> sorear: I also didn't get it before the explanation. the only thing I could come up with was "ya rly"

[20:06] <jnthn> moritz: you may if you can't find it

[20:12] <dalek> niecza: be2a9e7 | (Paweł Murias)++ | examples/term-ansicolor.pl:

[20:12] <dalek> niecza: Change Term::ANSIColor example to use :from<perl5>.

[20:12] <dalek> niecza: review: https://github.com/sorear/niecza/commit/be2a9e7ec4

[20:16] *** MayDaniel left
[20:17] *** Trashlord joined
[20:17] <colomon> does yrlnry actually come here?  I don't recall ever knowing that mjd was in the channel... 

[20:18] <sorear> I think he may have dropped by once or twice

[20:18] <sorear> I've definitely seen him in #p5p

[20:21] * sorear out

[20:23] *** ascrazy joined
[20:24] <dalek> nqp/bs: a1d5f90 | jnthn++ | src/6model/serialization.c:

[20:24] <dalek> nqp/bs: Add container spec serialization/deserialization, which completes all we need to do for at least STable serialization.

[20:24] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/a1d5f90851

[20:24] <dalek> nqp/bs: 0764869 | jnthn++ | src/6model/serialization.c:

[20:24] <dalek> nqp/bs: Seems STables already do get a type cache ID allocated upon deserialization, so remove deserialization warning; nothing known un-done now.

[20:24] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/076486970d

[20:27] <moritz> bug submitted as #111264

[20:28] <moritz> colomon: http://irclog.perlgeek.de/perl6/2005-07-24#i_-551631

[20:29] <colomon> moritz: that was 2005!

[20:30] <moritz> colomon: aye :-)

[20:30] <moritz> colomon: it has a negative ID in the DB, which means that it's imported from before I started logging on my own

[20:31] <colomon> is that the most recent one you could find?

[20:31] <moritz> it's the only one I could find.

[20:31] <masak> that's the only one.

[20:32] <masak> and it's not even a Perl 6 question! :)

[20:33] *** localhost left
[20:34] <PerlJam> mjd is always on #git and occasionally on #p5p and some of the other #perl 

[20:34] <skids> https://gist.github.com/1877885   <-- meanderings of a recently-fevered mind.

[20:35] *** localhost joined
[20:36] <PerlJam> skids: I don't buy your "# time passes" bit.

[20:41] <benabik> Unfortunately, time passes even if you don't pay for it.

[20:42] <skids> well, whether you are looking at it from that perspective, or that the format of the data is simply unknown to the person doing the subscripting (because they are working in a sloppily typed environment), same problem really.

[20:42] <PerlJam> What I'm saying is that, in that situtation, "time passes" is irrelevant (because of lexical proximity) or can't happen that way

[20:43] *** mj41 joined
[20:44] <moritz> skids: what I'm missing is a rather concrete example use case

[20:46] *** birdwindupbird left
[20:47] * colomon has a strange urge to play "Pull Out the Knife And Stick it Again" on flute...

[21:02] <[Coke]> # 02/21/2012 - niecza at 100.96%

[21:02] <[Coke]> "niecza",     20283,     8,   751,  1549, 22591, 23461

[21:02] <[Coke]> "rakudo",     20090,    28,   604,  1869, 22591, 23471

[21:02] *** proller_ joined
[21:02] *** NamelessTee left
[21:04] <[Coke]> "pugs",        3008,     1,  1722,    14,  4745, 23233

[21:04] <[Coke]> b: say 3008/20090

[21:04] <p6eval> b 1b7dd1: OUTPUT«0.149726231956197␤»

[21:04] <benabik> poor pugs

[21:05] <[Coke]> should be able to get it to 25% without actually writing any haskell.

[21:06] <[Coke]> b: say 20090/20283, "\n", 3008/20283

[21:06] <p6eval> b 1b7dd1: OUTPUT«0.990484642311295␤0.148301533303752␤»

[21:07] *** ksi joined
[21:08] *** fridim_ joined
[21:10] <[Coke]> updated https://gist.github.com/1476841

[21:10] <[Coke]> # 02/21/2012 - rakudo at 99.04% of niecza, pugs at 14.83%

[21:11] <masak> \o/

[21:11] <masak> [Coke]++

[21:12] <masak> [Coke]: I might get to the skip thing tomorrow.

[21:12] <[Coke]> (now to automate that so pugs is included by default)

[21:13] <fsergot> perl6: say sin(pi / 6);

[21:13] <p6eval> rakudo 4130f6: OUTPUT«0.499999999481858␤»

[21:13] <p6eval> ..pugs b927740, niecza v14-57-gd05a5fe: OUTPUT«0.49999999999999994␤»

[21:14] <fsergot> Isn't just 0.5?

[21:14] <masak> yes.

[21:14] <masak> fsergot: are you familiar with loss of precision when doing some floating-point calculations?

[21:14] <roland333> Alright  guys, i'm gonna go try and concentrate on learning some commands.

[21:14] <roland333> Thanks for the help

[21:15] *** roland333 left
[21:15] <masak> roland333: thanks for stopping by!

[21:15] *** NamelessTee joined
[21:15] <fsergot> masak: yes, i'm. :)

[21:16] <fsergot> So, it's clear now. :)

[21:16] <masak> :)

[21:16] <fsergot> I just wanted to know where the problem is.  :)

[21:17] *** jaldhar left
[21:18] <moritz> In> Sin(Pi / 6)

[21:18] <moritz> Out> 1/2

[21:18] <moritz> that's in yacas

[21:18] <masak> well, there are two sites of possible loss of precision: the division and the sin(). both use Num, that is, floating-point numbers.

[21:18] <fsergot> masak: is there any way to round this result?

[21:18] <masak> fsergot: constant folding :)

[21:19] <moritz> not really

[21:19] <fsergot> The 'round' word is correct in this meaning? :)

[21:19] <moritz> nom: say sin(pi/6).fmt('%.2f')

[21:19] <p6eval> nom 4130f6: OUTPUT«0.50␤»

[21:19] <moritz> fsergot: yes, but by default, round rounds to the nearest integer

[21:19] <moritz> nom: say sin(pi/6).round(0.01)

[21:19] <p6eval> nom 4130f6: OUTPUT«0.5␤»

[21:20] <moritz> that also works

[21:20] <moritz> masak: constant folding doesn't improve precision

[21:20] <fsergot> Great. :)

[21:21] <masak> moritz: in this case it could by recognizing sin(pi / 6) as a unit.

[21:21] <masak> since everything in there is constant.

[21:21] <moritz> masak: then it still needs a symbolic calculator to evaluate it to exactly 1/2

[21:21] <masak> or just a static rule.

[21:22] <moritz> such a static rule would be the simplest case of a symbolic calculator

[21:22] <fsergot> Moving on. .. is there any built-in way to reduce fractions?

[21:23] <moritz> yes, Rats are reduced by default

[21:23] <moritz> nom: say (10/4).perl

[21:23] <p6eval> nom 4130f6: OUTPUT«5/2␤»

[21:23] <fsergot> Perl6 is awesome. :)

[21:23] <masak> nom: say (3/100 + 5/100).perl

[21:23] <p6eval> nom 4130f6: OUTPUT«2/25␤»

[21:23] <moritz> aye

[21:24] <masak> did the rule about fractions such as the above not being reduced go away?

[21:24] *** jaldhar joined
[21:24] <moritz> masak: it now says that a compiler may choose not to reduce it, iirc

[21:24] <masak> ah.

[21:25] <moritz> masak: and the if the denominator contains only powers of 2 and 5, then the stringification is not allow to lose precision in the way that .Num.Str would

[21:25] <moritz> (that's something that rakudo doesn't implemen tyet)

[21:26] <masak> ooh

[21:26] <fsergot> I learn new things every day and the rest of the day I can't go out from admiration. :)

[21:36] <dalek> nqp/bs: 056f183 | jnthn++ | src/NQP/ (3 files):

[21:36] <dalek> nqp/bs: First crack at giving NQP support for BEGIN blocks.

[21:36] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/056f1833bd

[21:36] <dalek> nqp/bs: 2ebb21b | jnthn++ | src/NQP/World.pm:

[21:36] <dalek> nqp/bs: Ensure code in BEGIN blocks can see the correct view of GLOBAL.

[21:36] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/2ebb21ba89

[21:39] <skids> moritz: OK, updated.  Not that I'm married to the idea and feel inclined to build a solid case for it, I'm just throwing it out there as food for thought.

[21:39] *** Alias joined
[21:42] <fsergot> perl6: sin(pi / 6).perl;

[21:42] <p6eval> pugs b927740, rakudo 4130f6, niecza v14-57-gd05a5fe:  ( no output )

[21:42] <fsergot> perl6: say sin(pi / 6).perl;

[21:42] <p6eval> rakudo 4130f6: OUTPUT«0.499999999481858e0␤»

[21:42] <p6eval> ..pugs b927740: OUTPUT«0.49999999999999994␤»

[21:42] <p6eval> ..niecza v14-57-gd05a5fe: OUTPUT«0.49999999999999994e0␤»

[21:42] <masak> why do you want a .perl on there?

[21:43] <moritz> to see if it's a Rat again?

[21:43] * moritz -> sleep

[21:46] <fsergot> Hmm, don't know. just wanted to if the output will be different from the previous. :)

[21:46] <fsergot> to see if*

[21:47] <fsergot> 'night moritz

[21:47] <fsergot> o/

[21:47] *** tarch left
[21:48] *** lestrrat left
[21:49] *** lestrrat joined
[21:49] *** sudokode joined
[21:57] *** ksi left
[22:01] <dalek> rakudo/bs: ff1d98c | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[22:01] <dalek> rakudo/bs: Shuffle all stubbings to the top of the BOOTSTRAP.

[22:01] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/ff1d98c9e6

[22:01] <dalek> rakudo/bs: fe33bb1 | jnthn++ | / (3 files):

[22:01] <dalek> rakudo/bs: Split out BOOTSTRAP from the meta-objects; not been able to fully test the split yet. Tentatively start moving various bits of the stuff in BOOTSTRAP into a BEGIN block so we can serialize it.

[22:01] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/fe33bb1291

[22:10] *** ab5tract left
[22:11] *** itz left
[22:12] *** skids left
[22:23] *** itz joined
[22:33] *** ascrazy left
[22:38] *** nanowit_ joined
[22:39] *** snearch left
[22:41] *** tarch joined
[22:41] <dalek> nqp/bs: 42edd89 | jnthn++ | src/NQP/Actions.pm:

[22:41] <dalek> nqp/bs: Make sure we can use anonymous subs in places we expect serialization to happen.

[22:41] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/42edd89f4a

[22:41] <dalek> nqp/bs: d2e0a5b | jnthn++ | src/NQP/ (2 files):

[22:41] <dalek> nqp/bs: Make sure blocks nested inside a BEGIN end up in the output code.

[22:41] <dalek> nqp/bs: review: https://github.com/perl6/nqp/commit/d2e0a5babf

[22:43] *** kaare__ left
[22:44] <dalek> rakudo/bs: aed4d40 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[22:44] <dalek> rakudo/bs: Replace a -> with 'sub' for consistency.

[22:44] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/aed4d4099f

[22:44] <dalek> rakudo/bs: c89b74d | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[22:44] <dalek> rakudo/bs: Use static code objects as needed; this gets us to the point where BOOTSTRAP is successfully serialized, and then successfully deserialized again when the compilation of CORE.setting causes it to be loaded. CORE.setting compilation itself fails right after that, though; many un-done NQP::World fixes to come.

[22:44] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/c89b74d06d

[22:56] <felher> jnthn++ #for going wild on the {nqp,rakudo}/bs branches :)

[22:56] *** wolfman2000 joined
[22:56] *** pmurias left
[22:58] <masak> 'night, #perl6

[22:59] <fsergot> nn masak

[23:05] <dalek> rakudo/bs: 106f54f | jnthn++ | src/Perl6/ (2 files):

[23:05] <dalek> rakudo/bs: Update module load handling for bounded serialization.

[23:05] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/106f54f4da

[23:05] <dalek> rakudo/bs: 2d7798e | jnthn++ | src/Perl6/World.pm:

[23:05] <dalek> rakudo/bs: Toss deserialization code from import handling.

[23:05] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/2d7798e795

[23:05] <dalek> rakudo/bs: 2d17bbd | jnthn++ | src/Perl6/World.pm:

[23:05] <dalek> rakudo/bs: Update get_static_lexpad for bs.

[23:05] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/2d17bbde56

[23:05] <dalek> rakudo/bs: 8b28ce3 | jnthn++ | src/Perl6/Metamodel/BOOTSTRAP.pm:

[23:05] <dalek> rakudo/bs: set_selector_creator should not be done in the BOOTSTRAP BEGIN block - that's too early.

[23:05] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/8b28ce3762

[23:05] <dalek> rakudo/bs: 335e631 | jnthn++ | src/Perl6/World.pm:

[23:05] <dalek> rakudo/bs: Remove a workaround that we should no longer need, and deserialization code for adding to a static lexpad; it's just the fixup of the static lexpad overall that still needs to happen.

[23:05] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/335e63199b

[23:06] *** tarch left
[23:07] *** mj41 left
[23:09] *** fridim_ left
[23:10] *** [particle]1 joined
[23:11] *** [particle] left
[23:11] *** tarch joined
[23:13] <fsergot> o/ gnight! 

[23:14] *** whiteknight joined
[23:17] *** PacoAir left
[23:19] *** fsergot left
[23:23] *** tarch left
[23:24] *** [particle]1 is now known as [particle]

[23:27] *** tarch joined
[23:28] <bacek_at_work> phenny, tell moritz I'm going to merge parrot's cont_reuse branch really soon. You'll need take_recon branch merged with bumping up PARROT_REVISION.

[23:28] <phenny> bacek_at_work: I'll pass that on when moritz is around.

[23:29] *** [particle] left
[23:36] *** Gazzonyx joined
[23:36] *** [particle] joined
[23:41] *** nanowit_ left
[23:41] *** tarch left
[23:50] *** Chillance left
[23:52] <jnthn> Enough for today...sleep &

[23:53] <dalek> rakudo/bs: 8a30010 | jnthn++ | src/Perl6/World.pm:

[23:53] <dalek> rakudo/bs: Remove constant deserialization code-gen.

[23:53] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/8a3001021b

[23:53] <dalek> rakudo/bs: 1dfbcdc | jnthn++ | src/Perl6/World.pm:

[23:53] <dalek> rakudo/bs: create_code_object will be 'fun' to update. Start out by throwing away things we simply won't need any more.

[23:53] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/1dfbcdc93d

[23:53] <dalek> rakudo/bs: 9147bc5 | jnthn++ | src/Perl6/World.pm:

[23:53] <dalek> rakudo/bs: Throw out various bits of now-unrequired deserialization code in install_lexical_container.

[23:53] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/9147bc5564

[23:53] <dalek> rakudo/bs: 20788b0 | jnthn++ | src/Perl6/Metamodel/ (2 files):

[23:53] <dalek> rakudo/bs: Need to set True/False after BEGIN, and also publish Parrot v-table mappings at that point as those are not serialized.

[23:53] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/20788b0321

[23:53] <dalek> rakudo/bs: 534138f | jnthn++ | src/Perl6/World.pm:

[23:53] <dalek> rakudo/bs: Chase a HLL::World naming change in create_code; gets us a little further into compiling CORE.setting.

[23:53] <dalek> rakudo/bs: review: https://github.com/rakudo/rakudo/commit/534138f1df

[23:55] *** [particle]1 joined
[23:55] *** [particle] left
[23:58] *** benabik_ joined
