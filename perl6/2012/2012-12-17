[00:03] <[Coke]> ~.

[00:04] *** MayDaniel left
[00:05] *** Psyche^ joined
[00:09] *** Patterner left
[00:09] *** Psyche^ is now known as Patterner

[00:13] *** stevan_ joined
[00:41] *** pmurias left
[00:44] *** swanstomp left
[00:46] *** xilo_ joined
[00:48] *** xilo_ left
[00:55] <[Coke]> r: for lines { die $_ }

[00:55] <p6eval> rakudo 643719: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Missing block‚ê§at /tmp/GoFCSUCU8u:1‚ê§------> [32mfor lines { die $_ }[33m‚èè[31m<EOL>[0m‚ê§    expecting any of:‚ê§        postfix‚ê§        infix or meta-infix‚ê§        infix stopper‚ê§        statement end‚ê§        statement modifier‚ê§        ‚Ä¶

[00:55] <[Coke]> r: for lines() { die $_ }

[00:55] <p6eval> rakudo 643719: OUTPUT¬´Land der Berge, Land am Strome,‚ê§  in block  at /tmp/ltFJ67_SMb:1‚ê§‚ê§¬ª

[00:56] *** xilo_ joined
[00:59] *** xilo_ left
[00:59] *** fgomez left
[00:59] *** stevan_ left
[01:00] *** xilo_ joined
[01:01] *** xilo_ left
[01:01] *** xilo_ joined
[01:08] *** stevan_ joined
[01:08] *** anuby joined
[01:13] *** rindolf left
[01:19] <[Coke]> when extracting named subrules from a match, do you -have- to talk through the named rules to get it? Or is there a syntax for saying "get me all the subrules that match this name." ?

[01:19] <[Coke]> s/talk through/step through/

[01:24] <lichtkind> phenny: tell moritz hoping to have an calendar article by tomorrow

[01:24] <phenny> lichtkind: I'll pass that on when moritz is around.

[01:41] *** dayangkun joined
[02:05] *** FROGGS_ joined
[02:08] *** FROGGS left
[02:09] *** stevan_ left
[02:10] *** anuby_ joined
[02:11] *** bowtie left
[02:13] *** anuby left
[02:14] *** stevan_ joined
[02:36] *** lichtkind left
[02:47] *** sizz left
[02:48] *** sizz joined
[02:49] <[Coke]> phenny: tell masak: t1 says "must be on the form" when it probably should be "of the form"

[02:49] <phenny> [Coke]: I'll pass that on when masak is around.

[02:54] *** dayangkun left
[02:55] <[Coke]> hurm. using a grammar's .parse method - what does it do to indicate a failed parse?

[03:00] *** am0c joined
[03:01] <[Coke]> ah, returns a Match.

[03:08] <[Coke]> is there a way to get the .panic message out when a match fails?

[03:12] *** noggle left
[03:12] <sorear> afaik, "panic" just trows an exception

[03:14] *** noggle joined
[03:17] <[Coke]> hurm. "panic" only appears in one spot in the specs.

[03:19] <[Coke]> r: grammar A { TOP { 'hi' | .panic("eek") } } ; say A.parse("hi")

[03:19] <p6eval> rakudo 643719: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Undeclared name:‚ê§    TOP used at line 1‚ê§‚ê§¬ª

[03:19] <[Coke]> r: grammar A { rule TOP { 'hi' | .panic("eek") } } ; say A.parse("hi")

[03:19] <p6eval> rakudo 643719: OUTPUT¬´ÔΩ¢hiÔΩ£‚ê§‚ê§¬ª

[03:19] <[Coke]> r: grammar A { rule TOP { 'hi' | .panic("eek") } } ; say A.parse("bye")

[03:19] <p6eval> rakudo 643719: OUTPUT¬´#<failed match>‚ê§¬ª

[03:19] <[Coke]> do I have to override panic, perhaps?

[03:23] <[Coke]> r: grammar A { rule TOP { 'hi' | { fail("eek") } } ; say A.parse("bye")

[03:23] <p6eval> rakudo 643719: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unable to parse expression in block; couldn't find final '}'‚ê§at /tmp/W70dNztTLe:1‚ê§------> [32m| { fail("eek") } } ; say A.parse("bye")[33m‚èè[31m<EOL>[0m‚ê§    expecting any of:‚ê§        postfix‚ê§        infix or meta-infix‚ê§        infi‚Ä¶

[03:24] <[Coke]> r: grammar A { rule TOP { 'hi' | { fail("eek") } } }; say A.parse("bye")

[03:24] <p6eval> rakudo 643719: OUTPUT¬´eek‚ê§  in method gist at src/gen/CORE.setting:10292‚ê§  in sub say at src/gen/CORE.setting:7483‚ê§  in block  at /tmp/mB1DgbPZXU:1‚ê§‚ê§¬ª

[03:24] <[Coke]> that's better.

[03:26] *** thou joined
[03:29] *** popl joined
[03:31] *** thou left
[03:54] *** wamba joined
[03:56] <[Coke]> r: say set(1) (-) set(1);

[03:56] <p6eval> rakudo 643719: OUTPUT¬´set()‚ê§¬ª

[03:56] <[Coke]> r: say set("a");

[03:56] <p6eval> rakudo 643719: OUTPUT¬´set(a)‚ê§¬ª

[03:58] <japhb> phenny, tell masak, in the Day 16 advent entry, the tree structure in the "Operator precedence parser" section is missing the 5 term.

[03:58] <phenny> japhb: I'll pass that on when masak is around.

[04:07] <[Coke]> r: my $a = set(1) (-) set(1); say $a;

[04:07] <p6eval> rakudo 643719: OUTPUT¬´set(1)‚ê§¬ª

[04:07] <[Coke]> r: my $a = (set(1) (-) set(1)); say $a;

[04:07] <p6eval> rakudo 643719: OUTPUT¬´set()‚ê§¬ª

[04:07] <[Coke]> ... that was pretty surprising.

[04:35] *** xilo_ left
[04:57] *** araujo left
[05:10] <[Coke]> r: my %a = {"a" => 2} ; my %b = %a.clone; %b<a>=3; say %a.perl;

[05:10] <p6eval> rakudo 643719: OUTPUT¬´("a" => 2).hash‚ê§¬ª

[05:15] *** wamba left
[05:18] *** telex left
[05:19] *** telex joined
[05:25] *** telex left
[05:34] *** SamuraiJack joined
[05:36] *** telex joined
[06:02] *** lue left
[06:07] <[Coke]> yay, t1 completed.

[06:10] <moritz> \o/ new HPMoR chapter: http://hpmor.com/chapter/86

[06:10] <phenny> moritz: 01:24Z <lichtkind> tell moritz hoping to have an calendar article by tomorrow

[06:12] *** birdwindupbird joined
[06:13] <popl> moritz: Harry Potter fanfiction?

[06:14] *** lue joined
[06:15] <popl> Oh.

[06:15] <popl> Interesting.

[06:18] <sorear> yes.  by Yudkowsky.

[06:18] <popl> I had no idea who the man even was. I just looked it up.

[06:18] <sorear> if you haven't heard of Yudkowsky before you are either very lucky or very unlucky, I'm not sure which...

[06:19] <popl> He seems like a philosopher.

[06:20] <sorear> that's definitely one of the things he is

[06:21] <sorear> he used to be involved in the AI community, until he decided that successful AI would most likely kill us all and is campaigning to stop world AI research

[06:24] *** aloha left
[06:26] <popl> haha

[06:26] <popl> wow

[06:26] <popl> sounds like a winner

[06:27] *** aloha joined
[06:37] *** arkydo joined
[06:40] <popl> sorear: Thank you for the information.

[06:40] *** SamuraiJack_ joined
[06:41] *** SamuraiJack left
[06:42] *** kaleem joined
[06:50] *** SamuraiJack_ left
[06:50] <arkydo> How can I install perl6 on my system?

[06:53] *** SamuraiJack_ joined
[06:56] <Tene> That's not quite accurate.

[06:56] <bonsaikitten> arkydo: carefully

[06:57] <arkydo> bonsaikitten: a compiler for perl6?

[06:58] <bonsaikitten> arkydo: you might give us a hint what operating system you're on, if you haven't already looked at either rakudo or niecza and considered ways to install either one

[06:58] *** kurahaupo left
[06:59] <arkydo> bonsaikitten: I use Archlinux.

[07:00] <bonsaikitten> that means you should have a package manager that can do the job for you

[07:00] <popl> pacman

[07:00] <popl> fwiw

[07:00] <popl> arkydo: ask in #archlinux

[07:01] <arkydo> Which implementation is recommended rakudo or niecza?

[07:02] <popl> arkydo: Which is available for Archlinux?

[07:02] <arkydo> popl: I've found rakudo in aur repo.

[07:03] <bonsaikitten> I think rakudo is easier to handle for now

[07:03] <popl> arkydo: I guess AUR has made your decision easy, then. :)

[07:08] *** FROGGS_ left
[07:20] *** kaleem left
[07:35] *** kaleem joined
[07:39] <arkydo> Could you recommend a tutorial to learn perl6?

[07:44] <popl> arkydo: http://perl6.org/getting-started/

[07:49] *** sizz left
[07:49] *** sizz joined
[07:56] *** SHODAN left
[07:57] *** sizz_ joined
[07:57] *** FROGGS joined
[07:57] *** sizz left
[07:57] <FROGGS> monring

[07:57] <FROGGS> morning

[07:58] *** SHODAN joined
[07:59] <sorear> mroning FROGGS 

[07:59] <FROGGS> :o)

[08:08] *** araujo joined
[08:08] *** araujo left
[08:08] *** araujo joined
[08:08] *** wamba joined
[08:12] *** sisar joined
[08:25] *** sisar left
[08:33] <jnthn> moorning, 

[08:33] <jnthn> #perl6

[08:33] <jnthn> ...keyboard skills. I haz them.

[08:38] *** wamba left
[08:45] *** arnsholt left
[08:51] *** Kharec joined
[08:55] <felher> god moorning, jnthn 

[09:01] <jnthn> :P

[09:01] *** hoelzro|away is now known as hoelzro

[09:04] <FROGGS> bah

[09:04] <FROGGS> :P

[09:04] *** fhelmberger joined
[09:07] *** fgomez joined
[09:15] *** kresike joined
[09:15] <kresike> hello all you happy perl6 people

[09:17] <FROGGS> hi kresike 

[09:18] <tadzik> hello  hello

[09:18] <kresike> FROGGS, tadzik o/

[09:19] *** DarthGandalf left
[09:23] <FROGGS> hi tadzik 

[09:24] <tadzik> oh, moritz 

[09:24] <tadzik> I almost fixed Panda yesterday :)

[09:24] <tadzik> it now fails with some Bad Utf-8 errors

[09:25] *** DarthGandalf joined
[09:25] <jnthn> .oO( (bad utf-8) errors or bad (utf-8 errors) :) )

[09:25] <tadzik> the former :)

[09:26] <moritz> tadzik: it tries to decode ANSI escape sequences as UTF-8?

[09:26] <tadzik> not sure why it would do that

[09:26] <moritz> well

[09:26] <moritz> r: 1 1

[09:26] <p6eval> rakudo 643719: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Two terms in a row‚ê§at /tmp/H19lIGCpdg:1‚ê§------> [32m1 [33m‚èè[31m1[0m‚ê§    expecting any of:‚ê§        postfix‚ê§        infix or meta-infix‚ê§        infix stopper‚ê§        statement end‚ê§        statement modifier‚ê§        statement modifie‚Ä¶

[09:27] <moritz> if it ever tries to read in such an error message as a Perl 6 string, it must get decoded somewhere

[09:27] <jnthn> yeah, da colors will emit ANSI escapes

[09:27] <tadzik> oh, hm

[09:27] <moritz> jnthn: can we fudge them not to do that if standard output is a pipe?

[09:27] <jnthn> moritz: If we can figure out the latter 

[09:27] <tadzik> that is quite possible

[09:27] <jnthn> er, figure out it's a pipe

[09:27] <jnthn> wtf...my brain is not working at all today :)

[09:28] <tadzik> but iirc it fails on step "fetching panda"

[09:28] <jnthn> Note that you can also set RAKUDO_ERROR_COLOR env var to 0

[09:29] *** sqirrel joined
[09:30] <moritz> tadzik: ouch

[09:31] <tadzik> I may remember wrong

[09:33] *** dakkar joined
[09:36] <FROGGS> tadzik: btw, my panda fork almost creates the MANIFEST files in the CUSTOM_LIB dirs...

[09:43] <moritz> fwiw my fresh bootstrap.pl on qast-sink-1 seems to have worked

[09:43] <moritz> now smoking the cheese

[09:45] <tadzik> FROGGS: wow, cool

[09:47] *** arkydo left
[09:51] <moritz> jnthn: lib/NativeCall.pm6 line 54 uses an undeclared &r

[09:51] <moritz> jnthn: and I can't figure out what it's supposed to use instead

[09:51] <moritz> so far we got away with it because it used for .?method call

[09:52] <moritz> seems like it's fallout from a refactoring

[09:54] <FROGGS> hmmm, I'd guess that it is the $r from the trait_mods around line 240

[09:54] *** popl left
[09:54] <moritz> ... which we need to pass along, it seems

[09:55] <FROGGS> hmmm, wait

[09:55] <FROGGS> if you compare line 23 and 54...

[09:55] <FROGGS> there might be $s instead of &r

[09:56] *** Util left
[09:56] <moritz> then maybe the patch I just pushed is wrong

[09:56] <moritz> problem is, I have no idea what that role might apply to

[09:56] <FROGGS> well, I'm just guessing since I don't understand what's going on there

[09:57] *** p6eval left
[09:57] *** wtw left
[09:57] <moritz> me neither; that's the problem

[09:58] *** [Coke] left
[09:58] *** hugme left
[09:58] *** d4l3k_ joined
[09:58] <FROGGS> I believe these subs (param_hash_for, return_hash_for) are called when you have an native sub that should return a hash

[09:58] *** [Coke] joined
[09:58] <hoelzro> good morning, #perl6

[09:58] *** Juerd left
[09:58] *** Juerd joined
[09:59] *** Util joined
[09:59] *** dalek left
[09:59] <moritz> and Inline::C has copied the same folly :(

[09:59] *** d4l3k_ is now known as dalek

[09:59] *** ChanServ sets mode: +v dalek

[09:59] *** hugme joined
[09:59] *** ChanServ sets mode: +v hugme

[09:59] <FROGGS> of course, because it does what it should ;o) 

[10:00] <moritz> well, if you think it should die... :-)

[10:00] <FROGGS> btw, thats where I love the strictness of C and hate the lazyness of PHP

[10:00] *** p6eval joined
[10:00] *** ChanServ sets mode: +v p6eval

[10:01] <FROGGS> hi hoelzro 

[10:03] *** jerome left
[10:04] <FROGGS> moritz: I wanna parse module files (and classes, roles, whatever). so I made a grammar to pick up statements like "module Foo {"...

[10:04] <FROGGS> moritz: how can I do something like: rule TOP { <package_declarator>+ % [ * ] }

[10:04] <moritz> <package_declarator>+ % [ .*? ]  # maybe?

[10:05] <FROGGS> hmmm, okay, will try

[10:05] <FROGGS> had .* but not .*?

[10:06] *** hugme left
[10:06] <moritz> well, .* will use up the rest of the file :-)

[10:08] *** dalek left
[10:08] <FROGGS> ohh

[10:08] *** Util left
[10:08] *** tadzik left
[10:08] *** masak left
[10:09] *** p6eval left
[10:09] *** dalek joined
[10:09] *** ChanServ sets mode: +v dalek

[10:10] *** tadzik joined
[10:10] *** Juerd left
[10:10] *** p6eval joined
[10:10] *** ChanServ sets mode: +v p6eval

[10:10] *** Juerd joined
[10:10] *** hugme joined
[10:10] *** ChanServ sets mode: +v hugme

[10:11] *** rindolf joined
[10:11] *** SmokeMachine joined
[10:13] *** Util joined
[10:14] *** masak joined
[10:15] <jnthn> moritz: bit tied up with $dayjob at the moment, will look at NativeCall later on

[10:15] *** gfldex joined
[10:16] *** wtw joined
[10:16] <FROGGS> moritz: why does that fail to match? https://gist.github.com/4317261 √≥.√≤

[10:19] <moritz> FROGGS: no idea off-hand; use jnthn++'s great regex tracer to find out

[10:20] <FROGGS> k, will do

[10:20] *** jerome joined
[10:27] <jnthn> rule package_declarator {

[10:27] <jnthn> | 'module'  \s+ ]

[10:27] <jnthn> by the time you hit \s+, the implict <.ws> nommed the whitespce.

[10:28] <FROGGS> what?

[10:28] <moritz> it's a rule { }

[10:28] <moritz> so each whitespace in there implies a <.ws> call

[10:28] <FROGGS> I see now that \s+ doesnt match, but when I use <ws> or <.ws> instead, it hangs

[10:29] <FROGGS> so it already matches or ignores whitespaces?

[10:29] <jnthn> FROGGS: rule automatically inserts <.ws> calls for you. Just delete the \s+

[10:29] <FROGGS> k

[10:29] <moritz> that's usually the result of quantifying a rule that can match zero characters (hangs, that is)

[10:30] <FROGGS> ahh, understand

[10:30] <FROGGS> btw, that debugger is so awesome

[10:35] <FROGGS> moritz++, jnthn++ # it is the working!

[10:35] <moritz> \o/

[10:36] *** anuby_ left
[10:38] *** arkydo joined
[11:03] *** kaleem left
[11:05] *** Su-Shee_ joined
[11:06] *** Su-Shee left
[11:06] *** Su-Shee_ is now known as Su-Shee

[11:10] *** arkydo left
[11:20] *** kaleem joined
[11:35] <cedrvint> Hello #perl6!

[11:35] <moritz> \o cedrvint 

[11:35] <cedrvint> \o moritz 

[11:36] <cedrvint> does anyone want to proofread Day 18?

[11:36] <cedrvint> http://perl6advent.wordpress.com/?p=1745&preview=true

[11:39] *** wtw left
[11:39] *** sizz_ left
[11:41] <moritz> nice once, cedrvint++

[11:41] <moritz> though I confess I've only skimmed it

[11:42] <cedrvint> thanks :)

[11:43] *** sizz joined
[11:47] *** sizz left
[11:51] *** sizz joined
[12:01] <dalek> mu: 4636cf0 | colomon++ | misc/perl6advent-2012/schedule:

[12:01] <dalek> mu: Update misc/perl6advent-2012/schedule

[12:01] <dalek> mu: 

[12:01] <dalek> mu: Switch my days' descriptions around, since I ended up doing the second one first.

[12:01] <dalek> mu: review: https://github.com/perl6/mu/commit/4636cf079f

[12:19] *** kivutar joined
[12:21] <moritz> r: for ^1 { say FIRST 42 }

[12:21] <p6eval> rakudo 643719: OUTPUT¬´Nil‚ê§¬ª

[12:21] <moritz> r: for ^1 { say CHECK 42 }

[12:22] <p6eval> rakudo 643719: OUTPUT¬´42‚ê§¬ª

[12:24] <gfldex> p6: my $flag = -1; sub will_fail(){ ENTER $flag = 0; LEAVE $flag = 1; while 1 { say "enter: while"; die "welp!"; } }; try will_fail; say $flag;

[12:24] <p6eval> rakudo 643719, niecza v24-12-g8e50362: OUTPUT¬´enter: while‚ê§1‚ê§¬ª

[12:38] *** wamba joined
[12:39] <timotimo> please excuse the pestering - could this patch be applied on rakudo-nom? http://t.h8.lv/0001-.perl-Enums-correctly-too.patch

[12:39] *** erkan left
[12:40] <moritz> timotimo: yes, will do

[12:41] <dalek> rakudo/nom: f93e603 | (Timo Paulssen)++ | src/core/Enum.pm:

[12:41] <dalek> rakudo/nom: .perl Enums correctly, too.

[12:41] <dalek> rakudo/nom: 

[12:41] <dalek> rakudo/nom: Signed-off-by: Moritz Lenz [email@hidden.address]
[12:41] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/f93e603b1a

[12:41] <timotimo> thanks :)

[12:41] *** wamba left
[12:42] *** wamba1 joined
[12:42] <moritz> thanks for the patch :-)

[12:42] <timotimo> sure, was a nice little task to learn a bit more about rakudos internals

[12:42] *** erkan joined
[12:42] *** erkan left
[12:42] *** erkan joined
[12:46] <moritz> tadzik: fwiw panda seems to work fine with qast-sink-1 now. Your last commit message was "Almost fix panda for sink context" -- are you aware of anything missing?

[12:49] *** stevan_ left
[12:51] *** bowtie joined
[12:58] <timotimo> how new is the sink context idea? has it been spec'd for a long time now?

[12:58] <moritz> yes

[12:59] <jnthn> moritz++ tried to implement it a while back, but PAST was not quite so well suited to it as QAST

[12:59] <moritz> it first appears in the roast commit logs in 2009, where void context was renamed to sink context

[13:01] *** wtw joined
[13:08] *** wamba1 left
[13:09] *** SHODAN left
[13:11] *** wtw left
[13:11] *** SHODAN joined
[13:12] *** SamuraiJack_ left
[13:12] <moritz> now that qast-sink-1 seems to come along nicely, I could delete the old sink branches

[13:15] <moritz> branches sink and sink2 deleted.

[13:18] <jnthn> :)

[13:18] <jnthn> yeah, qast-sink-1 is the winner :)

[13:24] <Woodi> hallo :)

[13:25] <Woodi> reading jnthn++ phasers post make me thinking: this is meta-programming :) also: it starting to look 3D when imagined...

[13:27] <Woodi> btw. if bootstrapping nqp require compiled older-nqp I will reinstall my boxes :)

[13:31] *** LlamaRider joined
[13:32] <FROGGS> jnthn: is there a way to get all global symbols in my current scope?

[13:33] <FROGGS> moritz: thanks

[13:34] <jnthn> FROGGS: GLOBALish, perhaps?

[13:34] *** pmurias joined
[13:34] <jnthn> r: class Foo { }; say GLOBALish::

[13:34] <p6eval> rakudo f93e60: OUTPUT¬´("Foo" => Foo).hash‚ê§¬ª

[13:34] <FROGGS> r: say $*GLOBALish

[13:34] <p6eval> rakudo f93e60: OUTPUT¬´Dynamic variable $*GLOBALish not found‚ê§  in method gist at src/gen/CORE.setting:10292‚ê§  in sub say at src/gen/CORE.setting:7483‚ê§  in block  at /tmp/LagLHz7NJA:1‚ê§‚ê§¬ª

[13:34] <FROGGS> ahh

[13:34] <dalek> nqp: e6a721b | (Pawe≈Ç Murias)++ | src/ops/nqp_bigint.ops:

[13:34] <dalek> nqp: Avoid loosing significant digits when converting from bignums to doubles on 32bit. One less failing assertion on test 60.

[13:34] <dalek> nqp: review: https://github.com/perl6/nqp/commit/e6a721bf7a

[13:35] <FROGGS> r: say GLOBALish::; { use Test; say GLOBALish::; }

[13:35] <p6eval> rakudo f93e60: OUTPUT¬´("Test" => Test).hash‚ê§("Test" => Test).hash‚ê§¬ª

[13:35] <FROGGS> r: say GLOBALish::; sub test { use Test; say GLOBALish::; }; test()

[13:35] <p6eval> rakudo f93e60: OUTPUT¬´("Test" => Test).hash‚ê§("Test" => Test).hash‚ê§¬ª

[13:35] <jnthn> Globals are...global

[13:35] <FROGGS> :/

[13:36] <jnthn> Note that GLOBALish is "what do I provide to merge into the main set of globals if I'm a module"

[13:36] <FROGGS> r: say GLOBALish::; sub test { require Test; say GLOBALish::; }; test()

[13:36] <p6eval> rakudo f93e60: OUTPUT¬´().hash‚ê§("Test" => Test).hash‚ê§¬ª

[13:36] <FROGGS> --------------------------^

[13:36] <jnthn> Right, require happens at runtime

[13:37] <FROGGS> so this way I can see what a module exports

[13:37] <jnthn> say GLOBALish::; sub test { require Test; say GLOBALish:: }; test();  say GLOBALish::; 

[13:37] <jnthn> r: say GLOBALish::; sub test { require Test; say GLOBALish:: }; test();  say GLOBALish::; 

[13:37] <p6eval> rakudo f93e60: OUTPUT¬´().hash‚ê§("Test" => Test).hash‚ê§("Test" => Test).hash‚ê§¬ª

[13:37] <jnthn> Not a scoping thing

[13:37] <FROGGS> ya, right

[13:37] <jnthn> FROGGS: No, you can see what *GLOBALs* it has

[13:37] <FROGGS> just runtime

[13:37] * [Coke] „Éâ„É™„É≥„ÇØ„Ç≥„Éº„Éí„Éº

[13:37] <jnthn> Import is lexical

[13:37] <FROGGS> jnthn: thats what I want

[13:38] <FROGGS> at least I think

[13:39] <[Coke]> Q: should the texas set operators bind looser than = ?

[13:42] <moritz> A: no

[13:42] <moritz> my proposed precedence was the same as junctive operators

[13:42] <moritz> but I don't have much experience nailing down precedence levels

[13:43] <moritz> so I decided to wait for feedback from the magical TimTOADy :-)

[13:45] <[Coke]> ok. sample bug in yesterday's backscroll if you need one.

[13:45] <moritz> there's one in RT too

[13:46] * [Coke] wonders how much effort it would be for masak to post a leaderboard of various solutions pre-decision.

[13:46] <[Coke]> moritz++

[13:47] <moritz> judging from last year's experience, judging solutions is a lot of work.

[13:48] <[Coke]> Just for the stuff a program could handle, like 'wc -l' and 'time .\base_test' output.

[13:48] * [Coke] also wonders if historically there has been a private tester with more curveballs.

[13:48] * [Coke] understands that even the automated stuff is a PITA to do, though.

[13:49] * moritz has implementations for three tasks that pass base-test

[13:49] <moritz> and I'm only happy with one of them

[13:49] <moritz> and have submitted none so far :(

[13:49] <[Coke]> I could see some extensions to t1, for example, that aren't explicitly tested but could be.

[13:50] <[Coke]> Passing base test on t2 is easy! :)

[13:50] <moritz> https://github.com/perl6/specs/issues/25 # missing set operators

[13:50] <moritz> say "XXXXX" for ^3 # bases t2 base_test

[13:51] <[Coke]> moritz: which ones? I am passing on t1 and t2. I like my t1, but it could use some cleanup and more sixing, and my t2 is barely there (but passes!)

[13:51] <masak> moritz: the base tests are never meant to be exhaustive.

[13:51] <phenny> masak: 02:49Z <[Coke]> tell masak t1 says "must be on the form" when it probably should be "of the form"

[13:51] <phenny> masak: 03:58Z <japhb> tell masak in the Day 16 advent entry, the tree structure in the "Operator precedence parser" section is missing the 5 term.

[13:51] <moritz> [Coke]: I'm happy about my t3 solution

[13:51] <masak> [Coke]: right. see notes.md.

[13:51] <moritz> masak: I know :-)

[13:52] <masak> moritz: and relying on only those tests is a sure way to lose the contest :P

[13:52] <moritz> [Coke]: and t2 and t5 pass their base tests

[13:52] <moritz> masak: I know :-)

[13:52] <masak> anyway, wohoo chapter 86 \o/

[13:52] * moritz has read it already during commute and pauses

[13:53] <moritz> masak: and the second half of chapter 85 was completely redone

[13:53] <[Coke]> masak++ notes.md

[13:53] *** replore joined
[13:53] <masak> moritz: I suspected that, based on author notes.

[13:54] <masak> I will probably re-read chapter 85 first.

[13:55] <moritz> anyway, masak++ # I've had quite some fun during p6cc so far

[13:55] <masak> that's the intent :)

[13:55] *** pmurias left
[13:56] <moritz> and t3 produces cute output :-)

[13:58] *** cognominal joined
[13:59] <LlamaRider> masak++ I'm back to P6 after a year of plain old P5 for the new contest :) Let's see if I stick a little longer this time. Thanks!

[14:02] <masak> welcome back, LlamaRider :)

[14:03] <[Coke]> If I'm in a grammar, and I'm calling { fail("...") } - do I have access to the current position of the parse so far? (so that I can figure out what's been successfully matched so far?)

[14:04] <masak> such information should be available through the cursor, I should think.

[14:06] <masak> moritz: re https://rt.perl.org/rt3//Public/Bug/Display.html?id=116114 -- yes, but what's that variable $v mentioned in the warning?

[14:06] <moritz> masak: that's LTA, but afaict that wasn't what the ticket complained about

[14:06] <moritz> and I think we have another ticket for that too

[14:07] *** replore left
[14:10] <masak> very well.

[14:11] *** smi1er left
[14:11] *** replore joined
[14:12] <moritz> but yes, that's something that annoys me too

[14:12] *** smi1er joined
[14:17] *** sisar joined
[14:17] *** PacoAir joined
[14:17] <felher> http://impressive.sourceforge.net/index.php  -- this thing is great. Exactly what I need for PDF presentations.

[14:18] <felher> oops, wrong channel.

[14:20] <masak> "The page transition effects aren't exactly useful, but they are nice to watch and provide a moment of relaxation for both the audience and the presenter :)" -- as a frequent audience member, I expect better of the presenter than this.

[14:20] <[Coke]> masak: self.CURSOR ?

[14:20] <masak> [Coke]: I often see $/.CURSOR, I think.

[14:21] <timotimo> masak: the transition effects are, of course, optional

[14:21] <[Coke]> r: grammar b { 'hi' { fail self.Cursor } }; b.parse("hi world");

[14:21] <p6eval> rakudo f93e60: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Two terms in a row‚ê§at /tmp/kURRfcWtyj:1‚ê§------> [32mgrammar b { 'hi' [33m‚èè[31m{ fail self.Cursor } }; b.parse("hi worl[0m‚ê§    expecting any of:‚ê§        postfix‚ê§        infix or meta-infix‚ê§        infix stopper‚ê§        statement en‚Ä¶

[14:21] <moritz> self.CURSOR if you're inside a method in the grammar

[14:21] <[Coke]> r: grammar b { rule TOP { 'hi' { fail self.Cursor } } }; b.parse("hi world");

[14:21] <p6eval> rakudo f93e60: OUTPUT¬´No such method 'Cursor' for invocant of type 'b'‚ê§  in regex TOP at /tmp/2DTjpQP5co:1‚ê§  in method parse at src/gen/CORE.setting:10508‚ê§  in block  at /tmp/2DTjpQP5co:1‚ê§‚ê§¬ª

[14:21] <[Coke]> r: grammar b { rule TOP { 'hi' { fail self.CURSOR } } }; b.parse("hi world");

[14:21] <p6eval> rakudo f93e60: OUTPUT¬´No such method 'CURSOR' for invocant of type 'b'‚ê§  in regex TOP at /tmp/jqvo0C8dI6:1‚ê§  in method parse at src/gen/CORE.setting:10508‚ê§  in block  at /tmp/jqvo0C8dI6:1‚ê§‚ê§¬ª

[14:21] <moritz> $/.CURSOR (or $/ often has enough information) if you are inside a block inside a regex

[14:22] <felher> masak: yeah, I don't like page transitions myself. But what I like is the overview of your slides you get pressing [TAB] and that is really fast, as soon as it has cached the slides. The Spotlight/Highlight-Area features are nice, too :)

[14:22] <[Coke]> $/ isn't guaranteed to exist at that point, is it?

[14:22] <moritz> but, nobody really really knows what's supposed to happen if you call fail() withiin a regex

[14:22] <masak> timotimo: yes, of course. my point, though, is that gratuitous transition effects are a "presentation smell".

[14:22] <moritz> [Coke]: $/ always exists inside a block inside a regex

[14:22] <[Coke]> moritz: is there a better way to fail a regex?

[14:22] <timotimo> i agree

[14:22] <moritz> [Coke]: die() (and catch on the outside)

[14:23] <masak> timotimo: the most memorable presentations I've seen sometimes used transitions. but in every single case, the transition was "part of" the message, not an external effect.

[14:23] <masak> no doubt I've seen many bad presentations with lots of useless transitions. some of them intentionally bad :)

[14:24] <timotimo> as long as there's no microsoft powerpoint sound effects (there's one with clapping and cheering ... yup)

[14:25] <masak> like this one: http://www.youtube.com/watch?v=lpvgfmEU2Ck :)

[14:27] <[Coke]> moritz++ 

[14:28] <moritz> in the past I've wished for a mechanism to just abort the current parse, without dieing on the outside

[14:28] <moritz> but the more I know about actual, non-trivial gramamrs, the less realistic that idea becomes

[14:28] <moritz> because most of these grammars switch between mainline code and regex quite a bit

[14:29] <moritz> (see the OPP in the Perl 6 parsers)

[14:35] *** stopbit joined
[14:36] * masak .oO( every time I abort my parse, I die a bit on the outside )

[14:41] <colomon> errr... does qqx capture standard error?

[14:43] <moritz> iirc it shouldn't, but there's a bug in rakudo that makes it capture it anyway

[14:44] <colomon> ah, that would explain what I was just seeing

[14:50] *** lawrmcfa left
[14:54] <[Coke]> how to install rakudo-debugger? 

[14:55] <jnthn> [Coke]: panda can install it these days

[14:55] <[Coke]> ah, so says the README. bother. now to install panda.

[14:55] <jnthn> Yeah, but who reads READMEs P

[14:56] * [Coke] hangs his head in shame.

[14:56] <masak> that's why current best practice is to name them nothing-important-here-I-promise.txt

[14:56] <[Coke]> Ugh. as someone who is trying to write perl6, relying on the latest and greatest is a PITA.

[14:57] <masak> [Coke]: could you be more specific?

[14:57] <moritz> [Coke]: I wrote my p6cc solutions using the qast-sink-1 branch of Rakudo :-)

[14:58] <[Coke]> masak: I wish to have an installed version somewhere that I can easily update to git-latest of everything. I can't use rakudo *, since it's pretty much instantly out of date

[14:58] <[Coke]> (e.g. I am using some set stuff in my t1 solution.)

[14:58] <[Coke]> I also don't want this installed version to be the version of rakudo I might occasionally hack on.

[14:59] <[Coke]> so, slightly more of a headache than "port install rakudo-dev".

[14:59] <masak> oh, I see.

[14:59] <moritz> [Coke]: my recent %*CUSTOM_LIB patches were a step towards making that possible

[15:00] *** cognominal_ joined
[15:00] <moritz> well, towards have two different Rakudos installed, at least

[15:00] <masak> I was wondering why I don't experience that. but it's because I build from source and virtually don't use Star at all.

[15:00] <[Coke]> masak: nothing insurmountable or new. I just should get around to writing a "REBUILD RAKUDOENV" script.

[15:00] *** cognominal left
[15:00] <PerlJam> masak: how often do you build rakudo?

[15:01] <Su-Shee> so, someone written sixbrew yet? (or should it be called sixpack? :)

[15:01] *** cedrvint left
[15:01] <masak> PerlJam: somewhere between once a week and dozens of times a week. depends if I'm hacking on it ;)

[15:01] <masak> Su-Shee++ # sixpack

[15:02] <Su-Shee> masak: or, the module installer is sixpack and then there's sixbrew.. :)

[15:02] * masak queues up "sixpack" as the name of Panda.next :)

[15:06] <PerlJam> "sixpack" makes me think of "fatpack" 

[15:06] <Su-Shee> I'm waiting for release renaming then to becks, guiness, jever.. 

[15:06] <Su-Shee> PerlJam: yes because you don't have beer which deserves to be called beer. ;)

[15:09] *** cedrvint joined
[15:09] *** LlamaRider left
[15:10] <masak> oh! by the way, do we have a good .pm group candidate to name the upcoming Rakudo release?

[15:13] <Su-Shee> masak: Northpole, of course. ;)

[15:13] *** wtw joined
[15:14] <[Coke]> ZA.pm ? They look lonely on the map.

[15:14] *** GlitchMr joined
[15:14] <[Coke]> . o O (probably a horrible reason to pick them.)

[15:15] <Su-Shee> name it "hackernews" with "and thanks for years of perl bashing" ;)

[15:16] *** cognominal_ left
[15:16] *** cognominal joined
[15:16] <masak> [Coke]: also, release #40 was ZA.

[15:17] <masak> Su-Shee: though HN is a less angry crowd in that regard than is Reddit.

[15:18] <[Coke]> Any PMs of #perl6 folks that haven't been picked yet?

[15:18] <Su-Shee> masak: I've realized that the second you go outside "web development" hackernews and reddit are more or less irrelevant...

[15:19] * [Coke] tries to use rakudo-debugger without installing it (and without panda) and gives up, and will setup "update_all_my_rakudo.sh" later.

[15:20] <masak> lurkers, divulge your PMs!

[15:20] <masak> Su-Shee: I guess any forum of that kind shall be taken with a big pinch of salt.

[15:21] <[Coke]> I am at Albany.PM, but the last meeting was years ago with one guy who was never leaving 5.6

[15:21] <Su-Shee> masak: imagine a totally no-nonsense forum focused on content and in depth discussions and people only posting if they actually know stuff.. ;)

[15:21] <FROGGS> [Coke]: well, there a six in it

[15:22] <jnthn> masak: We could call it after Malmo.pm to shame us into setting it up :P

[15:22] <[Coke]> After that disappointing showing, I pretty much gave up. Being a cheerleader is hard.

[15:22] <masak> wut, there is no Warzawa release?

[15:23] <masak> tadzik: you live there, no?

[15:23] <masak> Warszawa*

[15:23] <GlitchMr> I was going to propose Warsaw.

[15:24] <masak> that settles it, then.

[15:24] <masak> jnthn: heh, there's even a Helsingborg.pm!

[15:24] <GlitchMr> I don't live in Warszawa, but close enough.

[15:24] <masak> that *is* shameful.

[15:24] <GlitchMr> I don't know where tadzik lives, however.

[15:24] <jnthn> I know. Helsingborg doesn't deserve a PM group!

[15:24] <jnthn> Shocking it could be thoguht to have such culture.

[15:24] <jnthn> :P

[15:25] <masak> :P

[15:25] <masak> I wonder what would happen if we set one person on contacting all the PM groups, let's say of Europe.

[15:25] <masak> asking them if they'd like us to come speak about Perl 6 :)

[15:26] <GlitchMr> From Poland, also Krak√≥w and Szczecin makes sense. But well...

[15:26] <GlitchMr> make*

[15:26] <jnthn> masak: We could try to do a tour of all the PM groups of Europe! :D

[15:26] <jnthn> One group a day should only take us...er...hm, $dayjob may not like this... :)

[15:26] <moritz> Tour D'Europe!

[15:26] <masak> jnthn: that's... an awesome idea.

[15:26] <GlitchMr> There are lots of PM groups in Europe...

[15:27] <Su-Shee> how about with a perl 6 conference for starters.. 

[15:27] <GlitchMr> And lots of those in Germany.

[15:28] <Su-Shee> GlitchMr: they just look like usergroups, many are silent or a tiny group of disappointed aging ex perl developers.

[15:28] <GlitchMr> Interesting how Perl in Germany doesn't have PM group.

[15:29] <masak> sorear: is Yudkowsky really "campaigning to stop world AI research"? I thought he was mostly having very specific (and arguably non-workable) ideas of how to do AI development so that the resulting AI doesn't kill us.

[15:29] <Su-Shee> it's a tiny city with nearly no IT companies.. 

[15:29] <masak> I think at this point a Perl 6 conference is quite feasible.

[15:30] <jnthn> We could have t-shirts with a big 6 on ;)

[15:30] <GlitchMr> Camelia or 6?

[15:30] <Su-Shee> jnthn: _I_ will go for "rakudo starlet" in pink. ;)

[15:30] <GlitchMr> (why not both)

[15:30] <jnthn> 6 Cameliii

[15:31] <[Coke]> Y'all are welcome to come to an Albany.pm meeting. I can guarantee beer for anyone who shows up, even if I cannot guarantee attendees.

[15:31] <jnthn> Su-Shee: ooh :)

[15:31] *** leont joined
[15:31] <Su-Shee> masak: let's keep the conference idea in mind for next year.

[15:31] * [Coke] guesses that's more of a hackathon. >Close Enough!<

[15:32] <jnthn> There's gonna be a Perl 6 hackathon day before YAPC::EU, btw :)

[15:33] <moritz> yes, I've read it in the blog

[15:33] <moritz> and there's a decent chance that $work pays my trip to YAPC::EU

[15:33] <jnthn> (Andrew Shitov)++ contacted me about it and I was like "omg yes let's have one" :)

[15:38] <Su-Shee> i've just saw the line on the docs that perl 6 is prototypical OO underneath.. what exactly does that mean? that I could bypass classes and still get object creation with new by.. <insertmagichere>?

[15:39] <Su-Shee> in the docs

[15:39] <moritz> Su-Shee: it's prototypical in the sense that you can manipulate the class itself like an ordinary object

[15:40] <moritz> call methods on it, pass it around

[15:40] <Su-Shee> moritz: isnt that more of a MOP-ish thing?

[15:40] * jnthn wonders which docs :)

[15:40] <moritz> Su-Shee: what's the essense of protytpical OO, in your opinion?

[15:40] <Su-Shee> moritz: I know that from Moose of course and Smalltalk has that too.. but I've never put that into the realm of "self, javascript, lua prototype OO"

[15:41] <Su-Shee> moritz: I mean the class-less OO like self lua javascript by that

[15:41] <Su-Shee> moritz: the "object creation on the fly" kind of thing without a class keyword etc

[15:42] <moritz> Su-Shee: but is the lack of a class keyword really the essence?

[15:42] <Su-Shee> jnthn: https://raw.github.com/perl6/specs/master/S12-objects.pod

[15:42] <Su-Shee> moritz: imho yes it's part of it. 

[15:42] * [Coke] is reminded to mention p6cc2012 on the albany.pm list.

[15:43] * moritz has to remind himself every time that albany isn't albania :-)

[15:43] <Su-Shee> moritz: (this is just a feeling and might be wrong) it leads to a different object creation style with interestingly few instance vars for example

[15:43] <[Coke]> moritz: hey, don't insult Albania like that.

[15:43] <Su-Shee> it's also no albino and not elbonia ;)

[15:44] <moritz> Su-Shee: I guess that what S12 means is that in prototype OO, methods are looked up first in the instance, then in the prototype, then in the prototype's prorotype etc.

[15:44] <moritz> Su-Shee: in Perl 6 that's very similar

[15:45] <Su-Shee> moritz: that's very confusing to understand for everyone coming from javascript for example these days.. 

[15:45] <jnthn> If you want something that feels more prototype-y like JavaScript in Perl 6, it'd need a custom meta-object to make it happen.

[15:45] <moritz> method lookup is done in the object (which might have roles mixed in (jnthn, I know this isn't quite accurate)), then in the class, then in the classes' parent class etc.

[15:46] <jnthn> moritz: Only conceptually. Mixing in a role actually causes a change of type.

[15:46] <jnthn> And the anonymous type has the methods 

[15:46] <moritz> jnthn: that's why I wrote I knew it wasn't quite accurate :-)

[15:47] <Su-Shee> maybe it's just a syntax thing, but I've come to like JS's OO. 

[15:47] <Su-Shee> if it now had modules that would be even nicer.

[15:47] <masak> I tend to use the class-based parts of Perl 6 OO if I use them at all. when I want something more lightweight, I use hashes.

[15:48] <masak> it's not often that I actually feel a direct need to do prototypal inheritance.

[15:50] <Su-Shee> masak: to me it seems that javascript put an OO style forward which emphasizes the shoving around of functions a lot more and toned down the OO part to its bare minimum. it has a nice whipup-an-object feel. 

[15:51] <Su-Shee> masak: and I always wondered how the prototype-ishness of perl 6 would relate to that but it seems it wouldn't because it means something different..

[15:53] <masak> Su-Shee: to date the prototype-ishness of Perl 6 seems more of an unrealized potential.

[15:54] <masak> unless you count the 'but <role>' behavior discussed above, which I don't really view as prototype-based OO.

[16:01] <Su-Shee> masak: so far, I don't have a real opinion, because I don't know everything about perl 6 classes/MOP and its features.. 

[16:02] <masak> well, the MOP is great. it's still the coolest thing I've seen in terms of OO design, ever.

[16:02] *** leont left
[16:03] <Su-Shee> funnily, it just sounds complicated, it came quite naturally in Moose (I wrapped old *cough* classes into Moose and had et viola shiny new classes ;)

[16:03] <masak> Moose does some details better, but Perl 6's MOP is cleaner because it has a better starting point.

[16:04] <Su-Shee> masak: well now it's implemented twice, now people know where to put the fingers on.

[16:04] <masak> note how all the cool tech jnthn keeps churning out (mocking framework, code+regex debugger) rests directly on the MOP.

[16:04] <masak> jnthn++

[16:05] * Su-Shee takes note. :)

[16:10] <timotimo> std: q\ \

[16:10] <p6eval> std a8bc48f: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Undeclared routine:‚ê§ 'q' used at line 1‚ê§Check failed‚ê§FAILED 00:00 41m‚ê§¬ª

[16:11] <timotimo> https://rt.perl.org/rt3/Ticket/Display.html?id=77664 - 2 year old bugs irk me for some reason, especially if it doesn't say what direction the solution should go

[16:12] <moritz> rakudo: q\ \

[16:12] <p6eval> rakudo f93e60:  ( no output )

[16:12] <moritz> std: q\ \

[16:12] <p6eval> std a8bc48f: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Undeclared routine:‚ê§ 'q' used at line 1‚ê§Check failed‚ê§FAILED 00:00 41m‚ê§¬ª

[16:13] <moritz> timotimo: in case of parsing errors, it's usually safe to accept std's answer

[16:13] <moritz> s/errors/questions/

[16:14] *** hash_table joined
[16:14] *** thou joined
[16:17] *** replore left
[16:17] *** pmurias joined
[16:20] <dalek> nqp: 36f5853 | (Pawe≈Ç Murias)++ | / (2 files):

[16:20] <dalek> nqp: When converting doubles to bignums fill up 3 digits. Pass test 60 on 32bit machines

[16:20] <dalek> nqp: review: https://github.com/perl6/nqp/commit/36f5853b6d

[16:20] *** kaare_ joined
[16:20] <pmurias> jnthn: you should test if test 60 still passes on 64bit machines

[16:21] * moritz tries it

[16:22] <timotimo> https://rt.perl.org/rt3/Ticket/Display.html?id=77712 - so rakudo now says "Unsupported use of C++ constructor syntax", is that correct or wrong? should i mark the ticket as resolved or should rakudo implement new Foo to mean Foo.new instead?

[16:22] <timotimo> std: class A {}; my $a = new A;

[16:22] <p6eval> std a8bc48f: OUTPUT¬´[31m===[0mSORRY![31m===[0m‚ê§Unsupported use of C++ constructor syntax; in Perl 6 please use method call syntax at /tmp/laGzRrDlX5 line 1:‚ê§------> [32mclass A {}; my $a = new A[33m‚èè[31m;[0m‚ê§Parse failed‚ê§FAILED 00:00 43m‚ê§¬ª

[16:23] <timotimo> ah, ok, there's my answer

[16:23] <moritz> pmurias: since you're already working on that file on a 32 bit system, could you please check if nqp_bigint_is_big actually works there?

[16:23] *** matthiasw joined
[16:23] <moritz> (and if no, possibly fix it)

[16:24] *** kaleem left
[16:24] *** sisar left
[16:24] <moritz> the only nqp test failure I have is in 46-charspec.t, but that's related to ICU and unrelated to bigints

[16:27] <pmurias> that should skip instead of failing

[16:29] *** matthiasw left
[16:32] <pmurias> moritz: I'm not sure what's nqp_bigint_is_big is supposed to do as it's not tested, I generally prefer to work on nqp-js instead of nqp-parrot but was just fixing failing tests which are a nuisance to everybody

[16:32] <kresike> bye folks

[16:32] *** kresike left
[16:32] <moritz> pmurias: it's supposed to report 1 if the value in the bigint is too big to fit into an INTVAL

[16:37] *** hoelzro is now known as hoelzro|away

[16:47] *** SamuraiJack_ joined
[16:54] *** lichtkind joined
[16:57] *** Chillance joined
[16:57] *** replore_ joined
[16:58] * jnthn home

[17:02] *** isBEKaml joined
[17:02] *** replore_ left
[17:02] *** pmurias left
[17:04] <grondilu> My medidation on irrational numbers:  http://perlmonks.org/?node_id=1009200

[17:05] *** MayDaniel joined
[17:06] *** wamba joined
[17:07] <timotimo> did i understand the sink context branch correctly that it makes for generally lazy and if the last statement in a block is a for loop, the loop may not be executed because the lazy result is returned upwards and not necessarily iterated over?

[17:09] *** lue left
[17:10] *** lawrmcfa joined
[17:10] *** hoelzro|away is now known as hoelzro

[17:10] *** isBEKaml left
[17:12] *** FROGGS left
[17:14] <TimToady> we probably need a warning "Final loop is in unknown context; please set the return type to clarify"

[17:15] <jnthn> TimToady: Just for "for" or for "map" also?

[17:15] <Su-Shee> so, I just installed a nice CPAN viewer for android.. can someone point me to the Perl 6 pocket reference for android? :)

[17:15] <timotimo> sounds good to me. or maybe there'll be a Perl6::Critic one day that can do that

[17:15] *** MayDaniel left
[17:15] *** birdwindupbird left
[17:15] <jnthn> TimToady: Also, "set the return type" doesn't seem too clear.

[17:16] <timotimo> "set the return type or add a sink or lazy declaration"?

[17:16] <jnthn> Are we meant to actually compile things differently based on some kind of returns declaration?

[17:17] <TimToady> certainly the optimizer will care

[17:17] <timotimo> Su-Shee: anything else androidy that's nice to have for a perl6 interested person?

[17:17] <timotimo> (i don't think i'd benefit much from a perl6 interpreter on my phone :D)

[17:17] <TimToady> also, the warning should probably be only on Routines

[17:17] <jnthn> TimToady: Oh sure, but the optimizer isn't meant to make *semantic* changes :)

[17:18] <TimToady> in a sense, it isn't, presuming you're intending to call the routine consistently with its semantics

[17:18] <TimToady> that is, you'd generally call a sinking procedure in sink context anyway

[17:19] *** replore_ joined
[17:19] <TimToady> (sooner or later, somewhere up the call chain)

[17:19] <jnthn> That doesn't actually catch all the problems though.

[17:19] <jnthn> If your side-effects expect to be in the dynamic scope of the routine, that's when you hit issues.

[17:19] <TimToady> sure, hence the warnings

[17:19] <Su-Shee> timotimo: well my nokia N9 comes with a perl 5 out of the box.. ;) no, no perl 6 stuff that I know of...

[17:20] <TimToady> we could go as far as to have separate declarators for "procedures", but just having a sink return type already seems to say that

[17:20] <jnthn> Anyway, +1 to a warning

[17:20] <TimToady> sink or constant return, now that we can put a constant return value like True

[17:20] <jnthn> What does "sink return type" mean precisely?

[17:20] <TimToady> well, maybe means returning () or Nil as a value

[17:21] <TimToady> std: sub foo($a,$b --> Nil) { for $a,$b {...}}

[17:21] <p6eval> std a8bc48f: OUTPUT¬´ok 00:00 46m‚ê§¬ª

[17:21] <jnthn> ah, you mean actually annotating the routine with a return type.

[17:21] <TimToady> std: sub foo($a,$b --> True) { for $a,$b {...}}

[17:21] <p6eval> std a8bc48f: OUTPUT¬´ok 00:00 46m‚ê§¬ª

[17:21] <TimToady> yes

[17:21] <TimToady> that's part of why I relaxed what came after -->

[17:21] *** hoelzro is now known as hoelzro|away

[17:21] <jnthn> I'd always expected those things to be constraints.

[17:21] <jnthn> huh? when? :)

[17:22] <jnthn> S06?

[17:22] <TimToady> just in STD

[17:22] <TimToady> at least, don't remember respeccing yet..

[17:22] <TimToady> but I've been insane busy this last couple weeks

[17:23] <jnthn> ah, OK

[17:23] <jnthn> Then I didn't miss the change :)

[17:23] *** replore_ left
[17:23] <jnthn> Well, the spec change I was expecting anyways.

[17:24] <jnthn> OK, I'd really like to get a good warning and good solution in place for this before a Rakudo release ships with sink context enabled, but there's plenty of time for that (will merge it after this month's compiler release).

[17:24] <jnthn> So no massive hurry. :)

[17:28] *** benabik left
[17:29] <TimToady> you and everyone else :)

[17:30] <timotimo> i, for one, welcome our sinky overlords.

[17:30] *** atrodo joined
[17:33] *** MayDaniel joined
[17:35] <masak> grondilu: the 'while' loop in the infix:<==> seems redundant to me. as the code stands now, at least.

[17:37] *** MayDaniel left
[17:38] *** FROGGS joined
[17:40] *** replore joined
[17:42] <[Coke]> masak: so, last year, I was surprised at how slow my solution was compared to the other entrants. There's no feedback on that before judgement time unless I troll other participants directly, aye?

[17:44] *** replore left
[17:45] <[Coke]> troll is probably an unfortunately choice of words, but actual trolling might be super effective. "Wow, my t1 tests run in under a second, how are you lamers doing?"

[17:46] <TimToady> enum How <quick-and-dirty clean-and-elegant>; given How.pick { when clean-and-elegant { ... }; when quick-and-dirty { ... } }  # submit two solutions as one :)

[17:46] <TimToady> you can at least compare two of your own solutions for speed

[17:48] <[Coke]> aye.

[17:48] <[Coke]> You participating this year, TimToady ?

[17:48] <diakopter> [Coke]: my t4 solution (this year) takes 2 seconds to run. nearly all of that is compilation time

[17:48] <masak> [Coke]: there are no rules against contestants communicating. personally, I like it when people talk about the problems.

[17:49] <diakopter> like, 97% of that is compilation time

[17:49] <masak> though of course different contestants may play more or less close to their chest.

[17:49] <diakopter> [Coke]: have you solved t4?

[17:49] *** arnsholt joined
[17:50] <[Coke]> diakopter: no. I haven't even digested the problem statement.

[17:50] <TimToady> [Coke]: maybe under a pseudonym :)

[17:51] <masak> o.O

[17:51] <[Coke]> I have a decent solution for t1, but it base test there takes 0m18.388s

[17:52] <masak> the base tests are bound to be slow, because they re-compile all the time.

[17:52] <masak> hm, unless you're using Niecza, I guess.

[17:52] <masak> (Niecza caches compiled code)

[17:52] <jnthn> Scripts as well as modules?

[17:52] <masak> aye.

[17:53] <jnthn> Hm

[17:53] * jnthn had only been considering it for modules :)

[17:53] * [Coke] wonders if submissions are better split up into modules if enough code, single file, or "whatever works"

[17:53] <TimToady> I think it should be considered inside files too, so we end up with an incremental compiler :)

[17:54] <TimToady> "Oh, this function didn't change, where did I put that AST for it?"

[17:54] <diakopter> whenever I read incremental I think of encroaching

[17:54] <diakopter> don't know why

[17:55] <TimToady> you're thinking of "insidious" :)

[17:55] <TimToady> certainly we'd like Perl 6 to be insidious...

[18:03] <diakopter> [Coke]: I was almost done with my solution then I realized it didn't balance/limit the water table of caverns/tunnels connected underground

[18:04] *** dakkar left
[18:08] <diakopter> making that adaptation will require probably another 10 lines of code or so

[18:09] <diakopter> my problem is my code is not p6y

[18:09] <diakopter> it could be written in p5 or javascript and look the same

[18:10] <diakopter> except for a few uses of -> and ..^

[18:11] <masak> well, "idiomaticity" is only one dimension.

[18:11] *** Kharec left
[18:12] <diakopter> it's also not brevious

[18:12] <lichtkind> hmh

[18:12] <diakopter> er, brief.

[18:13] <diakopter> but I do think it has efficiency going for it

[18:13] <diakopter> and clarity

[18:13] <diakopter> and readability and correctness.

[18:13] *** MayDaniel joined
[18:13] <diakopter> but brief and idiomatic, not so much

[18:15] *** lawrmcfa left
[18:17] *** Rotwang joined
[18:22] *** replore joined
[18:23] <[Coke]> I'm at 224 lines for t1, with several comments like: #?? there has GOT to be better way to do this in p6 ;)

[18:25] *** cognominal left
[18:26] <[Coke]> panda requires perl6 be in your path, you can't specify a FQ path to perl6 to run the bootstrap?

[18:26] <diakopter> I haven't thought about t1 enough to be able to guess how long my solution would be

[18:27] <diakopter> other than "implement prolog"

[18:27] <[Coke]> I am stunned that someone would do them out of order! ;)

[18:27] *** replore left
[18:27] <FROGGS> [Coke]: I'am doing right now: PERL6LIB=~/dev/panda/lib PATH=$PATH:~/dev/nqp/install/bin ~/dev/rakudo/perl6 ~/dev/panda/bin/panda install File::Spec

[18:28] <diakopter> actually I got most of the way through t4 without reading the other 4 at all

[18:28] <FROGGS> [Coke]: I put panda's lib dir in INC because I make changes to it...

[18:28] <FROGGS> [Coke]: should work for you too

[18:30] <[Coke]> I'm also sad that the binary installs into lib/..../site/bin instead of bin/

[18:30] <FROGGS> well, it installs in site/bin, that is basically what you want

[18:31] <FROGGS> dump you %*CUSTOM_LIB to see what your <site> is

[18:31] <FROGGS> your*

[18:31] <[Coke]> an alias in the main bin/ dir would be nice.

[18:32] <FROGGS> what is the "main bin"?

[18:32] <FROGGS> home, site, vendor or perl?

[18:32] <[Coke]> the top level bin of the install dir.

[18:32] <[Coke]> so that I do not have to update my path with multiple bins.

[18:32] *** cognominal joined
[18:33] <FROGGS> the problem is that you can have the same filename multiple times from different dists or different versions of the same dist

[18:34] <FROGGS> there is no proper way to do that right now

[18:35] <[Coke]> fair enough. Danke.

[18:35] <[Coke]> Does panda respect $http_proxy ?

[18:47] *** Exodist joined
[18:53] <kthakore> hi FROGGS 

[18:54] *** spider-mario joined
[18:55] *** Pleiades` left
[19:01] *** Pleiades` joined
[19:05] *** REPLeffect left
[19:05] *** replore joined
[19:09] *** replore left
[19:12] *** grondilu left
[19:14] *** hash_table left
[19:15] <flussence> [Coke]: I'm looking at the source... it uses LWP/UserAgent.pir, which does seem to do that (line 429 checks for env vars with "_proxy" in the name)

[19:17] *** lichtkind left
[19:18] *** lichtkind joined
[19:19] *** lichtkind left
[19:21] <[Coke]> flussence: thank you for doing my legwork for me. :0

[19:21] <[Coke]> er, :)

[19:22] <flussence> the one thing I seem to be consistently good at is being better than ack :)

[19:24] *** lichtkind joined
[19:25] *** lichtkind left
[19:26] *** lichtkind joined
[19:29] *** kivutar left
[19:30] *** lichtkind left
[19:32] *** lichtkind joined
[19:36] *** lichtkind left
[19:37] *** lichtkind joined
[19:37] *** lichtkind left
[19:38] <FROGGS> hi kthakore 

[19:38] <diakopter> how do I escape 3 loops at once in rakudo

[19:38] *** lichtkind joined
[19:38] *** lichtkind left
[19:38] <diakopter> eh, the checks have to be there anyway, nm

[19:41] <tadzik> moritz: (panda) it wasn't bootstraping properly on my box, but I don't have access to it now

[19:41] <tadzik> masak: live where?

[19:41] <tadzik> (hellp #perl6)

[19:42] <tadzik> er, hello :)

[19:42] <tadzik> aw, Warsaw. The after-gsoc release was to be named after it, but for some reason it wasn't :)

[19:45] <jnthn> o/ tadzik 

[19:47] *** am0c left
[19:47] *** SamuraiJack_ left
[19:48] *** replore joined
[19:53] *** replore left
[19:54] *** Kharec joined
[20:03] *** SmokeMachine left
[20:05] <sorear> good * #perl6

[20:05] <diakopter> hi

[20:06] *** kurahaupo joined
[20:12] *** xinming joined
[20:14] *** sqirrel left
[20:15] *** xinming_ left
[20:22] *** cognominal left
[20:28] *** fhelmberger left
[20:29] *** cognominal joined
[20:30] *** replore_ joined
[20:30] *** replore_ left
[20:33] *** kurahaupo left
[20:34] <masak> hellp tadzik! :)

[20:34] *** swanstomp joined
[20:35] <tadzik> /o\

[20:50] *** kaare_ left
[20:51] *** replore joined
[20:51] *** replore left
[20:53] *** hash_table joined
[20:55] *** kurahaupo joined
[20:56] *** cognominal left
[20:59] *** Rotwang left
[20:59] <GlitchMr> cosimo: perhaps late, but check out http://stackoverflow.com/a/13922039/736054

[20:59] <rindolf> More git trouble today.

[21:00] <rindolf> Story of my life.

[21:00] <rindolf> The git sage continues.

[21:01] <[Coke]> rindolf: something we can help with?

[21:01] *** wamba left
[21:01] <rindolf> Yay, working now.

[21:01] * rindolf kicks git.

[21:01] <rindolf> I pushed once into the github repository and it made it the default for the branch.

[21:01] <rindolf> git saga*

[21:03] <GlitchMr> I really would like to use junctions in other programming languages :-(.

[21:03] <GlitchMr> But perhaps I shouldn't... I ABUSED them in t3.

[21:04] *** cognominal joined
[21:04] <GlitchMr> Junctions of junctions of junctions of junctions...

[21:07] *** japhb_ joined
[21:07] *** bruges left
[21:09] <GlitchMr> Perl 6 is full of interesting ideas.

[21:09] *** bruges joined
[21:10] <GlitchMr> I think it's too modern for 2012 ;-).

[21:12] *** thou left
[21:12] *** swanstomp left
[21:15] *** Rotwang joined
[21:17] *** GlitchMr left
[21:20] *** localhost joined
[21:20] *** localhost left
[21:34] *** replore_ joined
[21:38] *** replore_ left
[21:53] *** LlamaRider joined
[21:53] *** cognominal left
[21:55] *** replore joined
[22:00] *** replore left
[22:11] *** LlamaRider left
[22:12] *** spider-mario left
[22:15] *** MayDaniel left
[22:17] *** replore_ joined
[22:20] *** noggle left
[22:20] *** pmurias joined
[22:21] *** replore_ left
[22:23] *** Rotwang left
[22:23] <pmurias> jnthn: can we count on sizeof(FLOATVAL) <= 2*(size of bignum digit)

[22:27] *** grondilu joined
[22:30] <japhb_> A couple minutes ago I wrote a bash script that generated a symlink on disk based on the output of a Perl 6 one-liner that did a regex match and then did 'say $0' to pass the result back to bash.  Imagine my surprise when I found that the symlink target on disk had half-width corner braces at the start and end.  ;-)

[22:30] <masak> hah! :)

[22:31] *** cognominal joined
[22:31] <jnthn> pmurias: Not sure we can on 32-bit... There FLOATVAL will still typically be double, but bignum digit will be 28 bits iirc.

[22:31] <jnthn> May be misremembering...

[22:32] <pmurias> why 28? doesn't 32 make much more sense?

[22:33] <jnthn> pmurias: Apparently, not when implementing bigints :)

[22:33] <jnthn> pmurias: I think the other bits are used for carry and other stuch things.

[22:38] *** replore joined
[22:41] *** rindolf left
[22:43] *** replore left
[22:43] <felher> Good night, perl6 :)

[22:46] <pmurias> jnthn: I think using 3 digits should still work even with big numers as doubles use 53 bits for significant precision 

[22:46] <jnthn> pmurias: ah, good point

[22:47] *** thou joined
[22:53] *** whiteknight joined
[22:57] *** Chillance left
[22:57] <jnthn> I have a patch that makes { a => $_ } be a block, not a hash (due to $_ usage). But now I've implemented it, I don't see S06 claiming it's meant to be that way. Anyone know where the reference is?

[22:58] <jnthn> Also:

[22:58] <jnthn> $obj =  hash( 1, 2, 3, 4, 5, 6 );   # Anonymous hash

[22:58] <jnthn> That's fine, but I guess

[22:58] *** PacoAir left
[22:58] <jnthn> hash { a => $_ } # is not fine?

[22:58] <jnthn> 'cus you pass a block to hash, and it thinks it's getting one element?

[22:59] *** replore joined
[22:59] <jnthn> Anyway, the patch passes spectests, apart from this test:

[22:59] <jnthn>   # XXX is hash { ... } legal?

[22:59] <jnthn>   my @b = map { hash {"v"=>$_, "d" => $_*2} }, @a;

[22:59] <jnthn>   is(+@b, 6, "should be 6 elements (list context)");

[23:00] <jnthn> I think the test is questionable. Heck, even the test questions itself. :)

[23:00] <masak> jnthn: S04:1606

[23:01] <jnthn> masak: OK, so I wasn't being nuts :)

[23:01] <jnthn> masak++ # thanks

[23:01] <jnthn> That also doesn't claim that hash { ... } should work.

[23:02] <jnthn> And I can't see any way to make it work.

[23:02] <jnthn> Well, any sane way

[23:04] *** replore left
[23:04] *** hash_table left
[23:07] <pmurias> jnthn: why should $_ make { a=>$_ } a hash?

[23:07] <pmurias> jnthn: that seems strange

[23:07] <jnthn> pmurias: 'cus the spec says so.

[23:07] <pmurias> s/a hash/a block/

[23:08] <jnthn> map { $_ => foo($_) }, @bar # so this works

[23:08] <pmurias> ok

[23:08] <masak> that's basically the reason, yes.

[23:09] <pmurias> I'm not yet used to $_ being a parameter

[23:09] <jnthn> ah, then I can see the confusion

[23:10] <jnthn> rn: my @a = 1, 2, 3; (map { { $_ } }).perl.say

[23:10] *** aindilis left
[23:10] <p6eval> niecza v24-12-g8e50362: OUTPUT¬´Potential difficulties:‚ê§  @a is declared but not used at /tmp/PHy8sHJ0I0 line 1:‚ê§------> [32mmy [33m‚èè[31m@a = 1, 2, 3; (map { { $_ } }).perl.say[0m‚ê§‚ê§().list‚ê§¬ª

[23:10] <p6eval> ..rakudo f93e60: OUTPUT¬´().list‚ê§¬ª

[23:11] <jnthn> oops

[23:11] <jnthn> rn: my @a = 1, 2, 3; (map { { $_ } }, @a).perl.say

[23:11] <p6eval> rakudo f93e60, niecza v24-12-g8e50362: OUTPUT¬´(1, 2, 3).list‚ê§¬ª

[23:11] <jnthn> ah, right, bare block

[23:11] *** aindilis joined
[23:14] <dalek> roast: a48a486 | jnthn++ | S32-list/map.t:

[23:14] <dalek> roast: Correct a couple of tests.

[23:14] <dalek> roast: 

[23:14] <dalek> roast: One was uncertain, and the spec doesn't anywhere claim it should work.

[23:14] <dalek> roast: The other certainly contradicted the spec.

[23:14] <dalek> roast: review: https://github.com/perl6/roast/commit/a48a4865b3

[23:14] <dalek> rakudo/nom: e960577 | jnthn++ | src/Perl6/Grammar.pm:

[23:14] <dalek> rakudo/nom: Start tracking variable usage a bit.

[23:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e960577b5b

[23:14] <dalek> rakudo/nom: b030c86 | jnthn++ | src/Perl6/Actions.pm:

[23:14] <dalek> rakudo/nom: Make hash/block disambig consider $_ usage.

[23:14] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/b030c86712

[23:17] *** sjohnson left
[23:17] <dalek> rakudo/nom: e2d35b8 | jnthn++ | docs/ROADMAP:

[23:17] <dalek> rakudo/nom: Remove completed item.

[23:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/e2d35b8e52

[23:17] <dalek> rakudo/nom: 03346c0 | jnthn++ | docs/ChangeLog:

[23:17] <dalek> rakudo/nom: Update ChangeLog.

[23:17] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/03346c0bd2

[23:20] *** replore joined
[23:22] *** cognominal_ joined
[23:22] *** cognominal left
[23:25] *** replore left
[23:30] <masak> 'night, #perl6

[23:30] <sorear> night masak

[23:32] *** stopbit left
[23:37] *** lue joined
[23:38] *** thou left
[23:56] *** cognominal_ left
