[00:00] *** Patterner left
[00:03] *** spine left
[00:05] *** Psyche^ joined
[00:05] *** Psyche^ is now known as Patterner

[00:07] *** replore joined
[00:08] *** molaf__ joined
[00:11] *** molaf_ left
[00:18] <dalek> niecza: 4f3692f | sorear++ | lib/Kernel.cs:

[00:18] <dalek> niecza: Fix roles that compose other roles

[00:18] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4f3692f557

[00:18] <dalek> niecza: 5c21950 | sorear++ | src/niecza:

[00:18] <dalek> niecza: Use .can instead of old try hack

[00:18] <dalek> niecza: review: https://github.com/sorear/niecza/commit/5c219509a6

[00:18] <dalek> niecza: c6b4acc | sorear++ | lib/ (3 files):

[00:18] <dalek> niecza: Convert Real, Numeric, Integral, Callable to roles; add Positional, Associative

[00:18] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c6b4acc1dd

[00:22] *** snearch left
[00:23] *** thou left
[00:24] <dalek> niecza: c8eeefc | sorear++ | / (3 files):

[00:24] <dalek> niecza: @foo requires Positional, %foo requires Associative (fixes #50)

[00:24] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c8eeefc0cf

[00:26] <sorear> 10 open issues

[00:33] <sorear> nom: say 5.Any::Bool

[00:33] <p6eval> nom 1c74c7: OUTPUT«Bool::True␤»

[00:33] <sorear> nom: say 0.Any::Bool

[00:33] <p6eval> nom 1c74c7: OUTPUT«Bool::True␤»

[00:34] <sorear> Should this be allowed?

[00:35] <sorear> The CLR forbids (when bytecode verification is enabled) superclass calls except from the methods that override them, as a security measure

[00:35] <sorear> I'm thinking that P6 should maybe require "trusts" in some way

[00:37] *** tokuhirom joined
[00:48] <TimToady> why should a subclass not be able to call a public method?

[00:49] <TimToady> and private methods are already require 'trusts' from subclasses

[00:50] <TimToady> (and nextsame is already limited to overriding methods)

[00:50] <TimToady> btw, the prime factors from earlier now fails with: Attempted to re-enter abnormally exitted or running coroutine

[00:51] <[Coke]> I'm seeing the -order.t tests not running END{} blocks again.

[00:51] <TimToady> hmm, s/exitted/exited/

[00:51] <geekosaur> as long as it's not excited

[00:52] <TimToady> sorear: I mean, the error message has a misspelling, in addition to being an error we shouldn't get

[00:53] <[Coke]> TimToady: I'll fix the mispelling, anyway.

[00:54] <dalek> roast: b257971 | coke++ | S (5 files):

[00:54] <dalek> roast: niecza fudge

[00:54] <dalek> roast: review: https://github.com/perl6/roast/commit/b2579717eb

[00:55] <dalek> niecza: b68fd9b | coke++ | / (2 files):

[00:55] <dalek> niecza: Add Str.indent(), run S32-str/indent.t

[00:55] <dalek> niecza: 

[00:55] <dalek> niecza: Original version from rakudo++'s ng branch.

[00:55] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b68fd9b494

[00:55] <dalek> niecza: 5ae70b5 | coke++ | lib/Kernel.cs:

[00:55] <dalek> niecza: fix typo

[00:55] <dalek> niecza: review: https://github.com/sorear/niecza/commit/5ae70b5040

[00:55] <[Coke]> there you go.

[00:57] <TimToady> thanks--I feel silly nitpicking when sorear++ is slaying large dragons

[00:58] <sorear> TimToady: the sequence operator looks ahead one more value than is strictly necessary, so you need 2, 3, 5 ...

[01:00] *** thou_ joined
[01:01] <TimToady> almost makes one wish that 2,3,5...* automatically generated primes

[01:01] <TimToady> but if we were going to build it in @primes would still be shorter :)

[01:01] <sorear> TimToady: I'm talking about cases of $obj.Superclass::method(), where $obj is an _unrelated_ object

[01:02] <sorear> rakudo: say now

[01:02] <p6eval> rakudo 1c74c7: OUTPUT«Instant:1325722942.28046␤»

[01:02] <sorear> rakudo: say now.perl

[01:02] <TimToady> why would that be a problem?

[01:02] <p6eval> rakudo 1c74c7: OUTPUT«Instant.new(x => 778199369038/587)␤»

[01:02] <sorear> rakudo: say :foo.Any::perl

[01:02] <p6eval> rakudo 1c74c7: OUTPUT«Pair.new(key => "foo", value => Bool::True)␤»

[01:03] <sorear> encapsulation breakage

[01:05] <TimToady> that seems like a bad kind of encapsulation that violates the substitution principle

[01:16] *** tokuhirom left
[01:17] *** muixirt_ joined
[01:19] *** shinobicl___ joined
[01:20] *** muixirt left
[01:20] *** muixirt_ is now known as muixirt

[01:23] *** wolfman2000 joined
[01:29] *** lestrrat left
[01:30] *** lestrrat joined
[01:35] <dalek> niecza: fa69aee | sorear++ | src/niecza:

[01:35] <dalek> niecza: Re-enable type checking for role invocants

[01:35] <dalek> niecza: review: https://github.com/sorear/niecza/commit/fa69aee801

[01:35] <dalek> niecza: 123d639 | sorear++ | lib/CORE.setting:

[01:35] <dalek> niecza: Rearrange series op to be less eager, fixes TimToady's primer

[01:35] <dalek> niecza: review: https://github.com/sorear/niecza/commit/123d639b1e

[01:39] <colomon> woah, go away to dinner and storytime and miracles happen in niecza!

[01:47] <TimToady> though I might leave in the 5 just because 2,3,5 is good documentation :)

[01:49] <sorear> I don't think this counts as miracles... it's generally been easier than I expected

[02:00] <sorear> rakudo: role A { has $.x; method foo() { $.x } }; class B does A { }; say B.new(x => 5).x

[02:00] <p6eval> rakudo 1c74c7: OUTPUT«5␤»

[02:00] <sorear> rakudo: role A { has $.x; method foo() { $.x } }; class B does A { }; say B.new(x => 5).A::x

[02:00] <p6eval> rakudo 1c74c7: OUTPUT«Cannot look up attributes in a type object␤  in method x at src/gen/CORE.setting:1339␤  in <anon> at src/gen/Metamodel.pm:1140␤  in method dispatch:<::> at src/gen/CORE.setting:760␤  in block <anon> at /tmp/YiNS5544Y7:1␤  in <anon> at /tmp/YiNS5544Y7:1␤»

[02:00] <sorear> bug?

[02:02] *** mtk left
[02:04] <colomon> I'm running spectest now, and it's taking quite a bit longer than normal and I'm getting zillions of warnings scrolling by...

[02:08] <[Coke]> I got a much lower pass rate when I tried to run the numbers just now.

[02:10] <sorear> failing test?

[02:10] <sorear> [Coke]: can you name a regressed test?

[02:12] *** lutok joined
[02:12] <[Coke]> investigating.

[02:13] <[Coke]> (it's from the test_summary tool, so it's not the same output)

[02:15] <[Coke]> S06-signature/named-parameters.niecza aborted 67 test(s)

[02:16] <colomon> spectest run is taking WAY too long.  like at least two orders of magnitude worse than the last run I made.

[02:17] <Timbus> rakudo: class A {has $.thing = "default"; submethod BUILD {say "workin' hard"};}; A.new(thing => 'notdefault').thing.say

[02:17] <p6eval> rakudo 1c74c7: OUTPUT«workin' hard␤default␤»

[02:17] <[Coke]> http://feather.perl6.nl/~coke/failures.txt

[02:18] <[Coke]> (also, I was at least one commit behind.)

[02:18] <Timbus> rakudo: class A {has $.thing = "default"; submethod BUILD {callsame};}; A.new(thing => 'notdefault').thing.say

[02:18] <p6eval> rakudo 1c74c7: OUTPUT«default␤»

[02:18] <Timbus> .. realllly

[02:20] <colomon> sorear: my dire reports may have resulted from one particular test getting into an infinite loop

[02:22] *** shinobicl___ left
[02:28] <Timbus> okay after reading the syn, i can't tell if this is desired behavior or not.

[02:29] <Timbus> rakudo: class A {has $.thing;submethod BUILD {};}; A.new(thing => 'notdefault').thing.say

[02:29] <p6eval> rakudo 1c74c7: OUTPUT«Any()␤»

[02:31] <Timbus> well, i sure don't desire it

[02:31] <Timbus> but thats me

[02:31] <sorear> colomon: do you know which one?

[02:32] <colomon> sorear: as soon as I figure it out I'll let you know.

[02:32] *** Guest85555 left
[02:32] <colomon> seemed like it was late in the integration tests, or early in whatever comes next

[02:32] <colomon> but it spews out so many messages it's hard to work with.

[02:33] <sorear> what messages?

[02:33] <sorear> (I mean, if it's a backtrace it should have a file name)

[02:34] <colomon> all I see... oh, bingo

[02:35] <colomon> integration

[02:35] <colomon> 

[02:35] <colomon> advent2010-day04.t

[02:35] <colomon> sorear++

[02:36] <[Coke]> I'm still seeing failures with the latest niecza.

[02:37] <dalek> roast: 85e13f8 | sorear++ | S06-signature/named-parameters.t:

[02:37] <dalek> roast: [S06-signature/named-parameters] Refudge for niecza (accidental passes)

[02:37] <dalek> roast: review: https://github.com/perl6/roast/commit/85e13f8422

[02:37] <sorear> those tests are ... quite dubious

[02:39] <colomon> one disturbing thing about going through roast is seeing how many tests are dubious.

[02:39] *** replore left
[02:39] <[Coke]> (bisecting)

[02:39] *** jakky joined
[02:40] <sorear> [Coke]: failures outside named-parameters/

[02:40] *** abercrombie left
[02:40] <sorear> ?

[02:41] <[Coke]> there were a few, yes. I'm just seeing when that one started failing.

[02:41] <colomon> yeah, it's definitely integration/advent2010-day04.t

[02:42] *** abercrombie joined
[02:42] <[Coke]> see the .txt link above for all the failures I was seeing.

[02:43] <[Coke]> c8eeefc0cf9e6a01c3c292edcb077d24247bc61d is when that test started failing.

[02:47] <colomon> huh.  now it looks like S03-metaops/reverse.t is looping forever

[02:47] *** lutok left
[02:50] *** hundskatt left
[02:51] *** Chillance joined
[02:51] *** wooden left
[02:57] *** raiph joined
[03:03] <colomon> I did a make realclean and I'm still getting the infinite loop in integration/advent2010-day04.t.  Is anyone else seeing this?

[03:08] *** mdxi left
[03:09] *** mdxi joined
[03:16] <colomon> niecza: say (0, 2 ... *)[^10]

[03:16] <p6eval> niecza v13-108-g123d639: OUTPUT«0 2 Any() Any() Any() Any() Any() Any() Any() Any()␤»

[03:21] *** benabik left
[03:23] <colomon> that's a less that satisfactory answer, I reckon.

[03:25] *** thou_ left
[03:29] *** benabik joined
[03:30] *** benabik left
[03:31] *** benabik joined
[03:36] <colomon> don't have the brain power left to explore this tonight.  good *, p6ers

[03:37] *** Psyche^ joined
[03:41] *** Patterner left
[03:41] *** Psyche^ is now known as Patterner

[03:52] <ruoso> sorear, colomon: does niecza have exceptions working already?

[03:53] <colomon> yes

[03:53] *** orafu left
[03:53] <colomon> niecza: say (0, 2 ... * > 100)[^10]

[03:53] *** orafu joined
[03:53] <p6eval> niecza v13-108-g123d639: OUTPUT«Use of uninitialized value in numeric context␤  at /home/p6eval/niecza/lib/CORE.setting line 893 (warn @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 202 (Any.Numeric @ 6) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/JqowGZor7a line 0 (ANON @…

[03:55] <sorear> [Coke]: I'm expecting c8eeefc to break stuff... it tightens up a check that's long been too loose

[03:55] <sorear> I see I broke series. :|

[03:57] <sorear> niecza: .say for 0, 2 ... * > 100

[03:57] <p6eval> niecza v13-108-g123d639: OUTPUT«0␤2␤Use of uninitialized value in numeric context␤  at /home/p6eval/niecza/lib/CORE.setting line 893 (warn @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 202 (Any.Numeric @ 6) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/dH3RhLl3DH line 0 (AN…

[04:00] *** sivoais joined
[04:18] *** xinming left
[04:19] <dalek> niecza: 84f6f00 | sorear++ | lib/CORE.setting:

[04:19] <dalek> niecza: Fix series breakage in integration/advent2010-day04.t

[04:19] <dalek> niecza: review: https://github.com/sorear/niecza/commit/84f6f00de3

[04:20] *** xinming joined
[04:20] <ruoso> sorear: https://github.com/ruoso/niecza/commit/3d45d0ccc0e96032562af4d5f99efa54e4479363

[04:21] <ruoso> I am trying to get the objectpipe thing going..

[04:21] *** replore joined
[04:21] <ruoso> but I can't make the thread return after it ends

[04:26] <sorear> 'when Str' should probably be default { }, since someday niecza will get exception objects

[04:27] *** xinming left
[04:27] <dalek> niecza: e593b09 | (Daniel Ruoso)++ | / (2 files):

[04:27] <dalek> niecza: initial sketch of the full ObjectPipe framework

[04:27] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e593b09a65

[04:27] <ruoso> sorear: but the point is that it is getting into the CATCH

[04:28] <sorear> ruoso: no DESTROY in niecza yet - and even if there was, mono doesn't make guarantees of immediate destruction

[04:28] <ruoso> but the process blocks, probably waiting for the thread to finish

[04:28] *** satyavvd joined
[04:28] <ruoso> sorear: it doesn't need to be immediate

[04:28] <ruoso> invokign the DESTROY manually is doing what it's supposed to...

[04:28] <ruoso> as a work-around

[04:28] <sorear> DESTROY could be called hours later, if the program goes into a state where it doesn't allocate much

[04:29] <sorear> since DESTROY will only be called when the GC runs

[04:29] <ruoso> that's ok, by the model we're working with

[04:29] <sorear> (when it's implemented - which it isn't)

[04:30] <ruoso> that's like unix pipes... there's no guarantee that the other program will be stopped immediately when the other side of the pipe closes

[04:30] <sorear> ruoso: enter/pulse/exit is very very bad

[04:30] <sorear> you need to do all the state modification inside the lock

[04:32] <sorear> you probably shouldn't read or modify $!anything unless $!lock is held

[04:32] *** unobe left
[04:32] * ruoso changing that

[04:33] *** unobe joined
[04:38] *** unobe left
[04:42] <ruoso> sorear: ok... I got it... if I don't explicitly join the thread in the end, it just hangs in undefined behavior

[04:45] <dalek> niecza: b2b426b | (Daniel Ruoso)++ | examples/threads-objectpipe.pl:

[04:45] <dalek> niecza: joining the thread explicitly seems to be mandatory

[04:45] <dalek> niecza: review: https://github.com/sorear/niecza/commit/b2b426b006

[04:45] <dalek> niecza: a988fa0 | (Daniel Ruoso)++ | lib/Threads.pm6:

[04:45] <dalek> niecza: Fixes in the implementation of the ObjectPipe

[04:45] <dalek> niecza: 

[04:45] <dalek> niecza: not really a need for $!eod. return EMPTY when no more writers.

[04:45] <dalek> niecza: Use plain "wait" instead of "try_wait" (since we now undrestand

[04:45] <dalek> niecza: why things were weird.

[04:45] <dalek> niecza: Have all methods with the proper lock guards.

[04:45] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a988fa04a4

[04:47] <ruoso> examples/threads-objectpipe.pl have an example on how the pipe works by blocking and eventually stopping the producer side depending on how the consumer acts... which is the basis for "my @a <== 1..inf"

[04:53] <dalek> niecza: 7896533 | (Daniel Ruoso)++ | examples/threads-objectpipe.pl:

[04:53] <dalek> niecza: make the example more explicit

[04:53] <dalek> niecza: 

[04:53] <dalek> niecza: The semantics of batch-processing imply that we may actually not use all the data

[04:53] <dalek> niecza: that we produce. But we dont wait for each value to be used to produce another one

[04:53] <dalek> niecza: The output of the example shows that the thread will produce a set of objects

[04:53] <dalek> niecza: before the context switches again.

[04:53] <dalek> niecza: review: https://github.com/sorear/niecza/commit/7896533c16

[04:54] <ruoso>  night &

[04:54] <TimToady> o/

[04:55] <ruoso> TimToady: hey

[04:55] <ruoso> TimToady: I hope the direcetion I am pointing is consistent with your view on parallelism :)

[04:56] *** kaleem joined
[04:56] <TimToady> to the extent that I understand what you're doing, it seems fine

[04:58] <TimToady> doubtless we'll discover all the pitfalls that every other general concurrency model discovers :)

[04:58] <TimToady> but I really like to see us doing something rather than nothing

[04:59] <ruoso> and in any case, implicit threading protects us from ourselves in the sense that we can change underlying models easier, since the user is not actually using the threading primitives

[04:59] <TimToady> nodnod

[04:59] <TimToady> we'll need to control access to structures from outside the thread somehow though

[05:00] <ruoso> if the low-level is thread-safe... what kind of synchronization we really need?

[05:01] <ruoso> I mean, besides the flow of the data

[05:01] <TimToady> for example if an array is visible lexically outside of two different thread

[05:01] <TimToady> threads

[05:02] <ruoso> do we really need to proactively protect the user in that cases?

[05:03] <TimToady> that can be argued both ways, of course

[05:03] <ruoso> I had the impression that things were pointing towards the "if you modify the data you just returned, you better synchronize yourself" approach

[05:05] <ruoso> but really night &

[05:05] <TimToady> night

[05:08] *** huf left
[05:14] *** thou joined
[05:16] *** thou left
[05:30] *** raiph left
[05:35] *** aindilis left
[05:36] *** aindilis joined
[05:36] <japhb> TimToady, in S02:3288, why does :100[3,'.',14,16] require quotes around the radix point?

[05:37] <sorear> it would be a syntax error if it didn't

[05:37] <sorear> the inside of the [] is just a Perl 6 expression

[05:39] <japhb> sorear, yes, but *why*?  All other radix notations require special parsing ... or are you saying that any Perl 6 expression that results in a List with Int/int and at most one string containing exactly a single . would work?

[05:40] <sorear> japhb: I beleive so

[05:40] <sorear> japhb: what STD has to say about it is that it is parsed by <?before '['> <circumfix>, i.e. an Array is created

[05:40] <japhb> Hmmm.  I don't think Str.Numeric() (and thus val()) should support that generality.

[05:41] *** kaleem left
[05:41] <japhb> It seems important to me that val() be "safe" and not risk entering the general language

[05:41] * PerlJam idly wonders what happens when that list contains multiple '.'

[05:42] <PerlJam> or '_' even

[05:42] <sorear> japhb: I don't think that Str.Numeric should support any form that uses the general language

[05:42] <japhb> sorear, good, then we're on the same page there

[05:42] <TimToady> is fine to avoid security holes

[05:42] <japhb> PerlJam, _ within the decimal values should Just Work, but it feels silly to make '_' work

[05:43] <PerlJam> japhb: aye

[05:45] <japhb> Hmmm, so then I guess Str.Numeric() accepting '.' instead of just . for radix points in :r[] just makes it *appear* to be parsed as a normal Array in the general language.  Fewer special cases to remember.  OK, I can buy that.

[05:47] <TimToady> Str.Numeric has nothing to do with that notation

[05:47] <sorear> I beleive Str.Numeric should not accept :100[...] at all

[05:48] <japhb> TimToady, sorear and I had been assuming that val() internally works by trying a series of coercions, and accepting the first one that does not result in Failure.  And Str.Numeric() was one of those attempts.  Thus my continued coding on same.

[05:48] <japhb> sorear, why not?

[05:49] <japhb> rakudo/str-numeric has long accepted the basic :100[...], but just didn't have support for radix point and exponent.

[05:50] <TimToady> if it's parsing ... as a string, it's incorrect

[05:50] * japhb blinks

[05:50] <TimToady> S03:3290 indicates it's a run-time list of integers

[05:51] <TimToady> S02:3290 rather

[05:51] *** jakky is now known as allahu

[05:52] <japhb> Er, maybe my numbering's off.  All that 3290 tells me is that I have to be sure to range-check the elements in that list, and that the members of the list should be parsed as radix-10 standard ints.

[05:52] <TimToady> these days we might possibly allow :100<3 . 14 16> as a string form

[05:52] <japhb> Hmmm, interesting.

[05:53] <TimToady> constant-folding indicates evaluation

[05:53] <TimToady> and the fact that constant folding can fail points to a run-time value

[05:54] <sorear> TimToady: japhb: I think japhb is talking about ':60[12,23,34]'.Numeric

[05:54] <japhb> Wait, spec says elsewhere that numeric constants must not have spaces internally, so that in a larger qw-type string they are easily visible as single units

[05:54] <japhb> sorear, yes, exactly

[05:54] <TimToady> that's gonna be illegal input to .Numeric

[05:55] <TimToady> as I say, we might allow :60<11 23 34> instead

[05:55] <japhb> Er why?

[05:55] <TimToady> because the list would have to be evaluated

[05:55] <TimToady> to be consistent with how it works in normal code

[05:55] <TimToady> I'd rather use the spaces in <...> if we need to force stringness

[05:56] <japhb> No it wouldn't.  There's no reason that just because it *looks* like a list of ints means it has to be a List (or Array or whatever).  As far as my code had handled it so far, it was comma separated digit groups

[05:57] <japhb> I'm just saying that Str.Numeric() can choose not to support the full generality of eval "".

[05:57] <japhb> While still supporting much of the common cases.

[05:57] <TimToady> well, why wouldn't you want :60<12 23 34> instead to make that perfectly clear

[05:57] <japhb> Because that contains internal spaces, breaking the "can be embedded in a larger << >> string"

[05:58] * TimToady still doesn't like it, but I see your point

[05:58] * japhb is worried that he is being horribly blind at this point

[05:59] <TimToady> course we can always teach << >> about that form of quoting too...

[05:59] <japhb> LOL

[05:59] <japhb> "When in doubt, make the parser even smarter!"

[05:59] *** huf joined
[06:00] <TimToady> in fact, it's already specced

[06:00] *** kaleem joined
[06:00] <TimToady> S02:3567

[06:01] * japhb reading that section again ...

[06:01] <TimToady> so :60<12 23 34> should parse as a single Pair inside of «»

[06:04] <japhb> Woah.  So then we'd need to have val() turn that into some kind of three-headed beast that was a Str, a Pair, and an Int?

[06:04] * japhb often underestimates the magic of double angle quoting

[06:05] <TimToady> no, it'd turn into 12*360 + 23*60 + 34

[06:05] <sorear> I think single-angle quoting has the same magic

[06:05] <sorear> TimToady: It wouldn't become an allomorphic object?

[06:06] <TimToady> well, I doubt people will use the Str allomorphism on pairs

[06:07] <sorear> it seems to me that the Str allomorphism is necessary for reasonable round-trippiness in MAIN

[06:07] <japhb> quite.

[06:07] <TimToady> it would be useful for reporting faulty arguments, yes

[06:07] <sorear> ./perl6_echo_clone ':60<12 23 34>' # Why does this print an integer?

[06:08] <TimToady> okay, a Str and an Int, but not a Pair

[06:08] *** edgar51774 joined
[06:08] <japhb> TimToady, not just for that ... it has to be possible to write a MAIN that just wants Str arguments and doesn't want some of them to randomly morph into something else because of chance alignment of characters.

[06:08] <TimToady> we just steal pair notation for a way to talk about numbers there

[06:09] <japhb> Ah, I was taking your comment of :60<12 23 34> parsing as a Pair inside of French quotes and thinking we'd have to support triple allomorphism.

[06:09] <TimToady> no, just double

[06:10] <TimToady> same as if you'd said 1234 in there

[06:10] <sorear> perl6: say pi.Rat.perl

[06:10] <p6eval> pugs b927740: OUTPUT«*** No such method in class Rat: "&Rat"␤    at /tmp/0bulOqZeNc line 1, column 5 - line 2, column 1␤»

[06:10] <p6eval> ..rakudo 1c74c7, niecza v13-113-g7896533: OUTPUT«355/113␤»

[06:10] <sorear> perl6: say e.Rat.perl

[06:10] <p6eval> rakudo 1c74c7, niecza v13-113-g7896533: OUTPUT«2721/1001␤»

[06:10] <p6eval> ..pugs b927740: OUTPUT«*** No such subroutine: "&e"␤    at /tmp/XCWy4cxOxe line 1, column 5 - line 2, column 1␤»

[06:11] <japhb> TimToady, so if you put :60<12 23 34> in French quotes you get Int/Str, but if you put :foo<12 23 34> in French quotes you get Pair/Str?

[06:11] <TimToady> Pair/Array, but yes

[06:12] <japhb> Ah, sorry, yes.

[06:12] <japhb> Wait, what?

[06:12] <sorear> japhb: :60<...> isn't valid Pair syntax anyway; key has to start with <alpha>

[06:12] <japhb> sorear, nodnod.  I was just confirming my sanity

[06:12] <TimToady> which is why we could steal it for numbers

[06:13] <japhb> Always good to do a sanity check before entering another room.  :-)

[06:13] <TimToady> and save the game before facing the new monsters

[06:17] <japhb> You know, it almost feels like "things that val() recognizes as not-just-a-Str" should be a grammar of its own, if only for documentation for people wondering what is and what is not handled -- and so that security specialists can understand it in isolation.

[06:17] <japhb> s/should be/should have/

[06:17] <TimToady> it would be nice if that coincided with what the constant folder could fold

[06:18] *** dukeleto joined
[06:18] <TimToady> to the extent we can do that without risk of BEGIN stuff sneaking through

[06:18] <dukeleto> o/

[06:18] <TimToady> \o

[06:18] <sorear> I disagree

[06:19] <japhb> I would think val()'s powers should be a subset of the constant folder's powers.

[06:19] <sorear> val() needs to be much more tightly constrained than the constant folder

[06:19] <japhb> Basically that if val() can recognize it, you should be guaranteed that the constant folder will as well, but not the other way around

[06:19] <japhb> sorear, right

[06:19] <sorear> It doesn't matter if different implementations have constant folders with different limitations

[06:19] <sorear> But val needs consistant semantics

[06:19] <japhb> nodnod

[06:20] *** huf left
[06:21] <japhb> (perhaps "guaranteed that the constant folder will as well" is too strong.  I should say rather "you can reasonably expect that if an implementation has a well-developed constant folder, it is at least as powerful as val()"

[06:21] <dalek> niecza: 319d51c | sorear++ | / (5 files):

[06:21] <dalek> niecza: Add self.Foo::bar syntax

[06:21] <dalek> niecza: 

[06:21] <dalek> niecza: This is closely modelled after the Rakudo/nom implementation, and copies the

[06:21] <dalek> niecza: buggy role behavior from same.  Waiting for jnthn++ to find an elegant fix.

[06:21] <dalek> niecza: review: https://github.com/sorear/niecza/commit/319d51c5b8

[06:21] * TimToady thinks it does matter if different implementations have different constant folders

[06:22] <japhb> TimToady, do you disagree with the (second iteration of) my statement re: val() is a subset of the constant folder, but the latter is unconstrained to be arbitrarily more powerful than that?

[06:23] <japhb> .oO( The answer to your program is 42.  So I compiled it down to just that.  Have a nice day! )

[06:23] <TimToady> if different implementations have different ideas of what is pure, we're in deep yogurt

[06:24] <TimToady> the argument to limit val() must be based on some other criterion than that the constant folders will vary

[06:25] <TimToady> if the argument is that you don't want to provide an automatic calculator on the command line for every argument, well, you'll need to justify that :)

[06:25] <japhb> I think we're speaking in opposite directions.  I'm assuming that an implementor that can create val() correctly can create a constant folder of similar power.  But we cannot assume that all implementations can figure out the purity of more complex stuff than that.

[06:26] <japhb> I guess this is sortof like the "Just because you can use continuations to implement these features doesn't mean we expect every implementation to support full continuations always"

[06:27] <japhb> I'm OK with val() being immensely powerful, iff A) it remains secure, and B) the behavior does not arbitrarily suprise people.

[06:28] <japhb> (Mind you, it would be really nice if it can be implemented with modicum of efficiency.  :-)

[06:28] <TimToady> well, it's just kind of a strawman, anyway; it's almost certainly a bad idea :)

[06:29] <TimToady> or at least, difficult to know what to do if you get halfway through something that looks like an expression and you get an error

[06:29] <TimToady> val() is underspecced already for an argument like ':8<nyaa nyaa nyaa'

[06:30] <japhb> (Perhaps I shouldn't admit at this point that I very nearly implemented a calculator in Str.Numeric() as an Easter egg ...)

[06:30] <TimToady> do we just silently give up and return the Str?  that's probably the right thing to do, on the assumption of accidental numberhood

[06:31] <sorear> What's the numeric value of nyaa nyaa nyaa anyway?

[06:31] <japhb> TimToady, yeah.  I expect Str.Numeric() to see that and fail(), but val() to see that and silently return Str.

[06:31] <TimToady> the alterenative is to carp

[06:32] <sorear> for the MAIN use case val() should not carp ever

[06:32] <sorear> and it REALLY shouldn't confess

[06:32] <sorear> or croak

[06:32] <japhb> sorear, yup

[06:32] <TimToady> I mean carp in the English sense...

[06:32] <TimToady> but I agree it probably shouldn't

[06:33] <benabik> The val() of ':8<nyaa nyaa nyaa' is a fish?  ;-)

[06:33] <sorear> sorry, last two lines were meant as humor ;)

[06:33] <japhb> I think of val() as silently doing the best it can to be magical, and if not able to find a match, just returning the original argument.

[06:33] <sorear> benabik: probably a cat, given the noise ...

[06:33] <sorear> ==japhb

[06:34] <benabik> sorear: I thought cats went nyan.  :D

[06:34] <japhb> And stooges go 'nyuk'

[06:34] <TimToady> :8< looks like the front of a mouse

[06:34] <japhb> A neighbor's car has the license plate '3nyuk'

[06:34] <sorear> .oO( Stooges are Korean? )

[06:35] <sorear> ...I just mentally transposed 3nyuk to nyuk3 and tried to parse it as Pinyin

[06:35] <japhb> LOL

[06:36] <TimToady> are there any Chinese dialects with a trailing /k/ phoneme?

[06:38] <sorear> looks like I'll have to mess with generic types to get much further with roles

[06:38] <japhb> OK, circling back to the beginning:  Do we agree that :100[12,'.',34] and :100< 12 . 34 > are valid but :100[12,.,34] is not?

[06:39] <sorear> std: :100[12,.,34]

[06:39] <p6eval> std dc62e1d: OUTPUT«===SORRY!===␤Unsupported use of . to concatenate strings; in Perl 6 please use ~ at /tmp/6aTdzwvTuh line 1:␤------> :100[12,.,⏏34]␤Parse failed␤FAILED 00:01 122m␤»

[06:39] <sorear> std: :100< 12 . 34 >

[06:39] <p6eval> std dc62e1d: OUTPUT«ok 00:01 118m␤»

[06:39] <sorear> niecza: say :100< 12 . 34 >

[06:39] <p6eval> niecza v13-113-g7896533: OUTPUT«102.0304␤»

[06:39] <TimToady> it should probably not give the p5 message there...

[06:40] <sorear> (probably not the intended result)

[06:40] <TimToady> er, no :)

[06:40] <japhb> eh, no.  ;-)

[06:40] <japhb> jinx

[06:41] <japhb> OK, I'll implement that then.

[06:41] *** xinming joined
[06:42] <japhb> Also: I had been making Str.Numeric() not allow any internal spaces (it forgives leading and trailing spaces, however) -- should I relax that and allow internal spaces wherever they make sense?  In other words, should '5 / 8' Just Work?

[06:44] <japhb> (I swear, by the end of this I will have the most scrupulously precise implementation of the tiniest piece of Perl 6 ... I fear the time sink of applying this OCD to the rest of the language.)

[06:45] <TimToady> it makes some sense in some contexts but not much sense in others

[06:45] <japhb> *should '5 / 8'.Numeric() Just Work?

[06:45] <TimToady> I can see a string like that coming from the command line, but inside <5 / 8> it's really a list

[06:46] <sorear> japhb: have you looked at niecza's Str.Numeric yet?

[06:46] <TimToady> and it certainly won't work inside «»

[06:46] <TimToady> where 5/8 must be a single word

[06:46] <japhb> sorear, No I hadn't ... I didn't realize you had finished it

[06:46] <TimToady> so I think we can live without the space

[06:47] <japhb> Right, but you can say « "5 / 8" »

[06:47] <sorear> japhb: I put less OCD into mine

[06:47] <japhb> .oO( Now with less OCD! )

[06:47] <TimToady> as currently specced, only leading and trailing space is allowed

[06:48] <japhb> OK, that's my current implementation.

[06:49] <japhb> So then the only exception will be :100< 12 34 >

[06:49] <sorear> nom: role Foo[::T] { class Bar is T { } }

[06:49] <p6eval> nom 1c74c7: OUTPUT«===SORRY!===␤Cannot type check against type variable T␤»

[06:51] <japhb> Time to take a break &

[06:52] <TimToady> of course, if we don't allow inner spaces, then it makes it hard to justify printing out complex numbers with inner spaces

[06:52] <TimToady> perl6: say 1+2i

[06:52] <p6eval> pugs b927740, rakudo 1c74c7, niecza v13-113-g7896533: OUTPUT«1 + 2i␤»

[06:54] <TimToady> perl6: say (1/2).perl

[06:54] <p6eval> pugs b927740, rakudo 1c74c7, niecza v13-113-g7896533: OUTPUT«1/2␤»

[06:54] <TimToady> inconsistency there...

[06:57] <TimToady> zzz &

[06:59] *** wtw joined
[07:01] *** edgar51774 left
[07:03] <sorear> perl6: say (e+pi).Rat.perl

[07:03] <p6eval> rakudo 1c74c7: OUTPUT«19613/3347␤»

[07:03] <p6eval> ..pugs b927740: OUTPUT«*** No such subroutine: "&e"␤    at /tmp/yThW8a0JHx line 1, column 6-10␤»

[07:03] <p6eval> ..niecza v13-113-g7896533: OUTPUT«13173/2248␤»

[07:37] *** mkramer joined
[07:45] *** Mowah joined
[07:45] *** hundskatt joined
[07:46] <dalek> roast: fe36f26 | sorear++ | S14-roles/lexical.t:

[07:46] <dalek> roast: [S14-roles/lexical] Track Stringy/gist changes

[07:46] <dalek> roast: review: https://github.com/perl6/roast/commit/fe36f26005

[07:46] <dalek> niecza: aac37c0 | sorear++ | src/niecza:

[07:46] <dalek> niecza: Support accessing private methods/attributes in roles

[07:46] <dalek> niecza: review: https://github.com/sorear/niecza/commit/aac37c0ed9

[07:46] <dalek> niecza: 50e7f15 | sorear++ | t/spectest.data:

[07:46] <dalek> niecza: First batch of role tests!

[07:46] <dalek> niecza: review: https://github.com/sorear/niecza/commit/50e7f15487

[07:52] *** araujo left
[07:55] *** Trashlord left
[07:56] *** Trashlord joined
[08:09] *** carlin left
[08:14] *** baest joined
[08:19] *** spine joined
[08:22] *** agentzh joined
[08:37] <dalek> niecza: cd7e924 | sorear++ | lib/Kernel.cs:

[08:37] <dalek> niecza: Implement diamond role composition

[08:37] <dalek> niecza: 

[08:37] <dalek> niecza: This is actually slightly wrong, as it allows different instantiations of

[08:37] <dalek> niecza: a parametrized role to not conflict.  Also, attribute diamonding is still

[08:37] <dalek> niecza: considered an error.

[08:37] <dalek> niecza: review: https://github.com/sorear/niecza/commit/cd7e924575

[08:37] <dalek> niecza: 918bb3d | sorear++ | lib/ (3 files):

[08:37] <dalek> niecza: Allow punning in "is" target

[08:37] <dalek> niecza: review: https://github.com/sorear/niecza/commit/918bb3d05c

[08:37] <dalek> niecza: 4446002 | sorear++ | / (3 files):

[08:37] <dalek> niecza: Compute role_typecheck_list a bit earlier; add S14-roles/composition.t

[08:37] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4446002c85

[08:38] <kshannon> Damn!  The loop { 1 + 1 } rakudo memleak has nothing to do with the perl loop at all.  A tight loop with Q:PIR just boxing ints also leaks like crazy...

[08:39] <kshannon> Except as far as I can tell,  it's not leaking PMC's

[08:40] *** xinming left
[08:40] <kshannon> I think there's something screwy with the libtommath library (or how rakudo is using it)

[08:41] *** xinming joined
[08:41] *** cognominal left
[08:43] *** cognominal joined
[08:46] <dalek> niecza: dd7ae96 | sorear++ | / (3 files):

[08:46] <dalek> niecza: Allow stubs in roles to be satisfied by inheritance

[08:46] <dalek> niecza: review: https://github.com/sorear/niecza/commit/dd7ae96af9

[08:49] *** mj41 joined
[08:50] <dalek> niecza: e0c6040 | sorear++ | t/spectest.data:

[08:50] <dalek> niecza: Two more working test files

[08:50] <dalek> niecza: review: https://github.com/sorear/niecza/commit/e0c6040c4b

[08:50] * sorear -> sleep

[08:55] *** huf joined
[08:58] *** mikemol left
[09:00] *** lestrrat left
[09:00] *** lestrrat joined
[09:06] *** daxim joined
[09:10] *** mikemol joined
[09:19] *** hundskatt left
[09:32] *** araujo joined
[09:32] *** araujo left
[09:32] *** araujo joined
[09:35] <masak> "morning", #perl6

[09:36] *** yass5 left
[09:36] *** yass5 joined
[09:39] <moritz> std: "morning", #perl6

[09:39] <p6eval> std dc62e1d: OUTPUT«ok 00:01 121m␤»

[09:41] *** mkramer left
[09:42] *** mkramer joined
[09:42] <masak> ;)

[09:44] <muixirt> moritz: hopefully you didn't take my tweet as real criticism :-)

[09:44] *** replore left
[09:46] <muixirt> kshannon: which Q:PIR code?

[09:47] <moritz> muixirt: no, I recognized it as sarcasm; hope you did the same with my reply :-)

[09:59] <kshannon> muixirt: Q:PIR { $I100 = 2 \n loop: \n $P100 = perl6_box_int $I100 \n goto loop \n }

[10:00] <kshannon> It gobbles memory until it dies.

[10:03] <moritz> so that means that the deallocation of the mp_int is likely broken

[10:04] <muixirt> kshannon: thanks - and yes it eats up memory really fast :-)

[10:05] *** xinming left
[10:07] <kshannon> The code for mp_int de-allocation looks fine, but I'm trying to trace it now with a debugger

[10:10] *** hundskatt joined
[10:11] <masak> <sorear> I don't think this counts as miracles... it's generally been easier than I expected

[10:12] <masak> ...which is why sorear++ is the closest thing we have to au++ these days :)

[10:12] <masak> sorear: now you just need to start IRC-ing from the shower, and stuff :P

[10:14] <moritz> kshannon: then maybe it's the deallocation of embedded reprs or something

[10:16] <masak> interesting discussion about number parsing and constant folding this morning.

[10:22] <masak> wow, and roles in Niecza!

[10:22] <flussence> niecza: say "\to/".indent(8);

[10:22] <p6eval> niecza v13-121-ge0c6040: OUTPUT«                o/␤»

[10:26] <moritz> nom: say 'a'.indent(3)

[10:26] <p6eval> nom 1c74c7: OUTPUT«Method 'indent' not found for invocant of class 'Str'␤  in block <anon> at /tmp/a2F5i4KbJ5:1␤  in <anon> at /tmp/a2F5i4KbJ5:1␤»

[10:34] <tadzik> oh hello

[10:34] <masak> tadzik! \o/

[10:35] <tadzik> \o/

[10:35] <moritz> \o tadzik. Please remember to submit a talk to GPW2012

[10:35] <tadzik> oh, should I?

[10:36] <moritz> of course. You plan to addend the workshop, don't you?

[10:36] <tadzik> yeah, but I didn't plan to be a speaker :)

[10:36] <moritz> why not? nothing interesting to tell? :-)

[10:36] <tadzik> I could tell about our module ecosystem

[10:36] * moritz would love to hear that

[10:36] <moritz> http://conferences.yapceurope.org/gpw2012/newtalk

[10:37] <tadzik> okay, call me convinced

[10:37] <masak> of course you should be a speaker. :)

[10:37] <tadzik> hah, that'd be in english, so one talk I'll understand :P

[10:44] <masak> ;)

[10:45] *** overrosy left
[10:47] *** overrosy joined
[10:49] <tadzik> https://gist.github.com/1564699

[10:49] <tadzik> what do you think?

[10:50] <masak> nice. tadzik++

[10:51] <masak> is it "on Christmas" or "after Christmas"?

[10:51] <tadzik> masak: hopefully it's "before Christmas" :)

[10:51] <tadzik> maybe before'd be better here

[10:52] <masak> I increasingly think that this whole "Christmas" thing (in relation to Perl 6, that is) basically constitutes the only kind of lies-to-children that can get through using the narrow bandwidth to outsiders.

[10:52] <tadzik> by. by Cristmas

[10:53] <masak> "Christmas is already here, it's just unevenly distributed" -- masak

[10:53] <masak> tadzik: yes, "by" is fine.

[10:53] <tadzik> ok, submitted

[10:53] <moritz> tadzik++

[10:53] <tadzik> http://conferences.yapceurope.org/gpw2012/talk/3965

[10:54] <tadzik> moritz++ and masak++ for pushing me to it ;)

[10:54] *** zipf joined
[10:54] <masak> "I'm not inclined to do any tobogganing, but will if pushed." :D

[10:55] <masak> tadzik: getting a 404 on that link, so maybe it's just visible to you so far.

[10:55] <tadzik> ah, true

[10:55] * moritz can see it, being on the program committee

[10:56] <masak> tadzik: did you add a 蝶 tag? :)

[10:56] <tadzik> I guess it means "Panda" :P

[10:56] <masak> no, it's the tag usually added to Perl 6 talks. it means "butterfly".

[10:56] <tadzik> phenny: "蝶"?

[10:56] <phenny> tadzik: "Butterfly" (zh-CN to en, translate.google.com)

[10:56] <tadzik> oh

[10:57] <masak> .u 蝶

[10:57] <phenny> U+8776 CJK UNIFIED IDEOGRAPH-8776 (蝶)

[10:57] <tadzik> add'd

[10:57] <masak> \o/

[10:57] * masak glad'd

[11:09] *** mkramer1 joined
[11:12] *** mkramer left
[11:12] *** zipf left
[11:28] *** am0c joined
[11:42] *** Mowah left
[11:44] *** Mowah joined
[11:50] *** Mowah left
[11:51] *** Mowah joined
[11:56] *** satyavvd_ joined
[11:57] *** mkramer1 left
[11:57] *** Mowah left
[11:59] *** Mowah joined
[12:05] <masak> short but interesting; procedural vs declarative: http://www.tombatron.com/permalink/ag10b21iYXRyb25ibG9nchYLEg5CbG9nRW50cnlNb2RlbBjXnwMM

[12:05] <masak> and its reddit thread: http://www.reddit.com/r/programming/comments/o15fj/using_linq_for_more_readable_code/

[12:05] *** dbr__ joined
[12:07] *** icwiener joined
[12:07] <masak> "I'm really glad Linq is introducing a whole slew of C# developers to the beauty of functional programming. If you tell people to go learn Haskell or F# they start kicking and screaming, but if you sneak it in as Linq it's nothing but love. :)" -- this is what I've been observing as well :)

[12:07] <masak> and I think something similar could be done with other fields, such as grammars.

[12:08] *** cooper left
[12:10] *** dbr__ left
[12:15] *** donri joined
[12:16] *** satyavvd_ left
[12:17] *** Trashlord left
[12:17] *** satyavvd left
[12:20] <daxim> "[…] We managed to drag a lot of them about halfway to Lisp."

[12:30] <flussence> I spent an hour trying to learn Lisp the other day to fix someone else's problem. Seems like I'm no good at languages without semicolons

[12:30] *** Mowah left
[12:32] *** Mowah joined
[12:33] *** mkramer joined
[12:39] <daxim> find a local functional programming user group, it's great fun

[12:41] <[Coke]> niecza: say 16747 / 18417 # assuming no change on rakudo's side.

[12:41] <p6eval> niecza v13-121-ge0c6040: OUTPUT«0.90932290818265737␤»

[12:41] <[Coke]> almost 91%.

[12:42] *** icwiener left
[12:42] *** icwiener joined
[12:43] *** Mowah left
[12:44] *** kaleem left
[12:45] *** Mowah joined
[12:45] <moritz> not much changed in rakudo.

[12:51] *** Mowah left
[12:52] *** Mowah joined
[12:56] <dalek> niecza: eee10fb | (Solomon Foster)++ | lib/CORE.setting:

[12:56] <dalek> niecza: The subs keys and values make sense for many scalar types and arrays too, so don't force them to use hashes.

[12:56] <dalek> niecza: review: https://github.com/sorear/niecza/commit/eee10fb8c2

[12:57] <colomon> [Coke]: I suspect you might find amazing things today if you ran autounfudge on niecza.  ;)

[13:09] *** bluescreen10 joined
[13:10] <moritz> somehow autounfudge says that lots of niecza tests fail

[13:13] <kshannon> rakudo P6opaque gc_free wasn't running gc_cleanup of nested slots...

[13:13] <kshannon> compiling now.  I think this should fix the leak.

[13:13] <moritz> oops.

[13:16] <masak> Google Go has an interesting alternative to subtyping, which it calls "embedding". in made-up Perl 6 syntax it would look something like this: 'class ReaderWriter { has Reader; has Writer }' -- and all the methods on Reader and Writer are automatically provided as delegating methods on a ReaderWriter object.

[13:21] <moritz> what about conflicts?

[13:21] <[Coke]> colomon: kicked off an unfudge run.

[13:23] <masak> moritz: outlawed, checked at compose time.

[13:24] <masak> moritz: interfaces can also be embedded into other interfaces. the same rule holds there; only disjunct methods are allowed.

[13:30] *** risou_awy is now known as risou

[13:32] <[Coke]> niecza: Bool.pick.say

[13:32] <p6eval> niecza v13-122-geee10fb: OUTPUT«Bool()␤»

[13:32] <colomon> niecza: say 1, 2, 3 .... 10, 20, 30 ... 100

[13:32] <p6eval> niecza v13-122-geee10fb: OUTPUT«===SORRY!===␤␤Bogus term at /tmp/ay031PV5mj line 1:␤------> say 1, 2, 3 ...⏏. 10, 20, 30 ... 100␤␤Parse failed␤␤»

[13:32] <[Coke]> colomon: so far, only one skip->todo.

[13:39] <moritz> masak: that's basically what   role ReaderWriter does Reader does Writer { }  does then

[13:39] <masak> niecza: say 1, 2, 3 ... 10, 20, 30 ... 100

[13:39] <p6eval> niecza v13-122-geee10fb: OUTPUT«1 2 3 4 5 6 7 8 9 10 20 30 40 50 60 70 80 90 100␤»

[13:40] <masak> moritz: no; it actually is delegation. the ReaderWriter struct actually contains (pointers to) Reader and Writer structs, and methods calls on the former translate into delegated method calls where the invocant is the latter.

[13:41] <masak> but if we're talking about end results; yeah, about the same.

[13:41] <moritz> masak: but does that really matter? it gives ReaderWriter the methods of Reader and Writer, and ... (too slow)

[13:41] <moritz> ok

[13:42] *** Mowah left
[13:42] <kshannon> And no more memory leak: ./perl6 -e 'loop { 1 + 1 }'

[13:42] <kshannon> \o/

[13:43] <flussence> kshannon++

[13:43] <kshannon> OK,  just run the spectests and then hopefully push...

[13:43] *** Mowah joined
[13:43] <flussence> (wonder if that'll have any effect on the big core setting compilation)

[13:44] <masak> kshannon++

[13:44] <masak> flussence: probably not; we don't do much of 'loop { 1 + 1 }' while compiling CORE :P

[13:45] <flussence> yeah, but there's got to be some numbers in there somewhere :)

[13:45] <moritz> flussence: yes, but most numbers in there are parrot numbers, not Int

[13:45] *** sunnavy joined
[13:45] <moritz> hm, oh wait, that's wrong

[13:54] <dalek> nqp: 11d4870 | kshannon++ | src/6model/reprs/P6opaque.c:

[13:54] <dalek> nqp: Fix nasty memory leak in P6opaque

[13:54] <dalek> nqp: 

[13:54] <dalek> nqp: We have a list of gc_cleanup_slots.

[13:54] <dalek> nqp: We should be using them :)

[13:54] <dalek> nqp: review: https://github.com/perl6/nqp/commit/11d487038f

[13:54] <dalek> nqp: 05a89ef | kshannon++ | src/6model/reprs/P6opaque.c:

[13:54] <dalek> nqp: Expand tabs while I'm here

[13:54] <dalek> nqp: review: https://github.com/perl6/nqp/commit/05a89efb6c

[13:54] <kshannon> Well,  that was a fun way to spend a Thursday.

[13:55] * muixirt is looking forward to a blog post describing how kshannon hunted down the bug

[13:55] <[Coke]> kshannon++ !

[13:56] <moritz> kshannon: btw if you want a rakudo commit bit, you need to sign a CLA: http://www.perlfoundation.org/contributor_license_agreement (and get +1s from rakudo core developers, but that won't be a problem)

[13:56] <moritz> afk

[13:57] <PerlJam> nqp didn't require a CLA?

[14:00] <[Coke]> colomon: not many autounfudges, but a few.

[14:00] <muixirt> am I simply wrong or is debugging rakudo more difficult than ordinary programs written in c/c++ because of multiple separate components/languages like parrot, nqp, perl6 and heavily macroized C?

[14:01] <masak> muixirt: I generally don't suffer from the multiple levels when debugging a Perl 6 program.

[14:01] <geekosaur> more difficult than *simple* programs in C/C++.  start using various libraries/frameworks and you end up with the same problem

[14:02] <geekosaur> ...often worse because C/C++ tends to be kinda weak with the type hints, whose usual diagnostic is a core dump

[14:02] * masak decommutes

[14:02] <PerlJam> muixirt: I'd say you're right, but only if you know something about one of those technologies and virtually nothing about one or more of the others.

[14:02] *** mtk joined
[14:02] <geekosaur> (worse, a core dump with smashed memory that can't be deciphered...)

[14:03] <[Coke]> colomon: argh. seem to have missed your most recent commit in my unfudge.

[14:10] <kshannon> muixirt: most of my rakudo debugging happens at the perl6 and nqp levels,  and I find it not too much harder than debugging perl5 stuff.

[14:11] <kshannon> The biggest problem I had debugging that memory leak was the damn 6model.

[14:11] <[Coke]> kshannon: I'm so glad you didn't say "parrot". ;)

[14:13] <muixirt> kshannon: I admire your capabilities though :-)

[14:13] <kshannon> When you're in GDB and you've just got a pointer to a SixModelObject PMC, it's really difficult to work out what it actually is (without risking an exception being thrown)

[14:14] <kshannon> I think "perseverence" might be a better adjective :)

[14:15] <kshannon> I came close to giving up quite a few times today.

[14:15] *** script_ joined
[14:16] <kshannon> Now I'm off to see if some of those memory hogs from autounfudge were actually because of this memory leak...

[14:17] <muixirt> I admire perseverance, momentarily I read the Baumeister/Tierney book on willpower which is somewhat related to that (if I ever it till the end)

[14:25] *** script_ left
[14:25] <moritz> kshannon: you just missed a chance for a good pun in the nqp commit message. Something like "free the Ints!" or so :-)

[14:28] <kshannon> lol

[14:33] <muixirt> moritz: it's not only Int objects, right?

[14:33] <moritz> muixirt: correct. That's why we can have multi-line commit messages

[14:35] <muixirt> moritz: ?

[14:35] *** alim joined
[14:37] <moritz> muixirt: to put the pun on the first line, and the technical explanation on the next

[14:38] <muixirt> my fault, I thought the leaking was only an issue with (big)Ints, but kshannon fix suggests it's more general 

[14:47] *** overrosy left
[14:49] *** overrosy joined
[14:53] <flussence> /usr/bin/time's output doesn't make sense to me :/

[14:54] <flussence> "3313664maxresident" from compiling rakudo, but that's clearly wrong

[14:58] *** mishin joined
[14:59] <kshannon> muixirt: Well the fix IS more general, but the only place in the current code which was affected was class Int - which add a P6bigint private attribute ($!value)

[15:07] <dalek> roast: 0faae07 | kshannon++ | S05-modifier/pos.t:

[15:07] <dalek> roast: Sort of revert 3d83f032

[15:07] <dalek> roast: 

[15:07] <dalek> roast: The reason the $/ = Any lines were there was to

[15:07] <dalek> roast: reinitialize the match object.

[15:07] <dalek> roast: 

[15:07] <dalek> roast: The correct way to that according to current Spec

[15:07] <dalek> roast: is assign Nil,  but not everyone supports that yet.

[15:07] <dalek> roast: 

[15:07] <dalek> roast: Use a lexical instead.

[15:07] <dalek> roast: review: https://github.com/perl6/roast/commit/0faae075ec

[15:08] *** jerome_ joined
[15:09] *** kaare_ joined
[15:21] <[Coke]> niecza: Bool.pick(20).say

[15:21] <p6eval> niecza v13-122-geee10fb: OUTPUT«Bool()␤»

[15:21] <[Coke]> niecza: Bool.roll(20).say

[15:22] <p6eval> niecza v13-122-geee10fb: OUTPUT«Use of uninitialized value in string context␤  at /home/p6eval/niecza/lib/CORE.setting line 894 (warn @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 175 (Mu.Str @ 10) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.settin…

[15:22] <[Coke]> niecza: Bool.pick.say

[15:22] <p6eval> niecza v13-122-geee10fb: OUTPUT«Bool()␤»

[15:22] <colomon> I think we need special overloaded versions of Bool.pick and Bool.roll

[15:23] <colomon> LHF

[15:23] * [Coke] wonders why he's the only one seeing failures in t/spec/S04-phasers/ascending-order.t

[15:24] <colomon> niecza: my Positional $a;

[15:24] <p6eval> niecza v13-122-geee10fb: OUTPUT«Potential difficulties:␤  $a is declared but not used at /tmp/BnFfYzywLA line 1:␤------> my Positional ⏏$a;␤␤»

[15:24] <colomon> niecza: my Positional $a; say $a ~~ Positional

[15:24] <p6eval> niecza v13-122-geee10fb: OUTPUT«Bool::True␤»

[15:24] *** agentzh left
[15:27] *** tokuhirom joined
[15:27] <dalek> roast: 3da8417 | coke++ | S (11 files):

[15:27] <dalek> roast: niecza (auto)unfudge

[15:27] <dalek> roast: 

[15:27] <dalek> roast: add noauto markers to some dubious test skips we don't want to todo-ify

[15:27] <dalek> roast: review: https://github.com/perl6/roast/commit/3da84179f2

[15:30] *** kaleem joined
[15:32] <[Coke]> colomon: can you verify that ascending-order.t is passing for you? (all 8 tests) ?

[15:32] <colomon> yes, it works fine

[15:33] <[Coke]> just double checking that it's 8 passing, and not 6. ;)

[15:33] *** overrosy left
[15:33] <colomon> there is one weird thing ... there's a #FUDGED! line by itself before the last two test pass messages

[15:34] <colomon> no sign that the neighboring tests are fudged

[15:34] <[Coke]> that's because the last 2 tests are run from inside an END block.

[15:34] <[Coke]> for you, anyway. for me, they are not run.

[15:34] * [Coke] ponders a mono upgrade.

[15:36] *** jerome_ left
[15:42] *** overrosy joined
[15:44] <[Coke]> niecza: https://gist.github.com/1565776 

[15:44] <p6eval> niecza v13-122-geee10fb: OUTPUT«ok 1 - eek␤»

[15:44] <[Coke]> locally that prints nothing.

[15:44] <[Coke]> if I comment out the exit(1), works fine.

[15:45] *** jerome_ joined
[15:47] *** baest left
[15:48] *** skids joined
[15:50] *** jerome_ left
[15:55] <dalek> roast: 557c154 | (Solomon Foster)++ | S0 (3 files):

[15:55] <dalek> roast: Unfudge / refudge for niecza, now that it has Positional and Associative.

[15:55] <dalek> roast: review: https://github.com/perl6/roast/commit/557c154c46

[15:56] <[Coke]> colomon: those were not caught by unfudge. hurm.

[15:56] <colomon> hurm indeed

[15:58] <skids> perl6: say kv 'AA' ~~ / <letter=.alpha>+ || <number=.digit>+ /;

[15:59] <p6eval> niecza v13-122-geee10fb: OUTPUT«letter #<match from(0) to(1) text(A) pos([].list) named({}.hash)> #<match from(1) to(2) text(A) pos([].list) named({}.hash)> number ␤»

[15:59] <p6eval> ..rakudo 1c74c7: OUTPUT«letter A A number ␤»

[15:59] <p6eval> ..pugs b927740: OUTPUT«Error eval perl5: "if (!$INC{'Pugs/Runtime/Match/HsBridge.pm'}) {␤    unshift @INC, '/home/p6eval/.cabal/share/Pugs-6.2.13.20111008/blib6/pugs/perl5/lib';␤    eval q[require 'Pugs/Runtime/Match/HsBridge.pm'] or die $@;␤}␤'Pugs::Runtime::Match::HsBridge'␤"␤*** '<HAND…

[15:59] *** alim left
[16:00] <skids> In rakudo's output, should "number" exist as an empty array, or just be nonpresent?

[16:02] *** jerome_ joined
[16:03] *** xinming joined
[16:08] <kshannon> empty array

[16:08] <kshannon> like niecza also does

[16:08] *** tokuhirom left
[16:09] <skids> Is there a syntax to suppress that?

[16:10] <cognominal> nom: say (1, (2, 3, 4)).list.perl

[16:10] <p6eval> nom 1c74c7: OUTPUT«(1, (2, 3, 4)).list␤»

[16:10] <PerlJam> skids: only output the keys with associated values?

[16:10] <skids> (Also I don't understand why, given || should short-circuit)

[16:10] <cognominal> nom: say $_.perl for (1, (2, 3, 4)).list

[16:10] <p6eval> nom 1c74c7: OUTPUT«1␤2␤3␤4␤»

[16:11] <cognominal> nom: say $_.perl for (1, (2, 3, 4))

[16:11] <p6eval> nom 1c74c7: OUTPUT«1␤2␤3␤4␤»

[16:11] *** wtw left
[16:12] <cognominal> is "for" supposed to flatten a parcel?

[16:12] <daxim> http://science.slashdot.org/comments.pl?sid=2605580&cid=38596938

[16:12] <skids> PerlJam: I'm more thinking of representational efficiency, not how to post-process.

[16:12] <PerlJam> oh

[16:13] *** Mowah left
[16:14] <cognominal> …or for is parcelly wrong, so partially right?

[16:14] <geekosaur> I thought most stuff autoflattened parcels

[16:15] <cognominal> so how to iterate on the?

[16:15] *** Mowah joined
[16:15] <cognominal> *them

[16:15] <masak> daxim: unlike with Perl 6, where the script is sent to the secret cabal for review and inspection ;)

[16:16] <cognominal> … and eventually masaked? (ie:  submitted as a bug)

[16:17] <cognominal> masak: any idea about parcels and iteration?

[16:17] <PerlJam> Did you just verb masak?

[16:17] * masak .oO( anything can be masak'd! )

[16:18] <masak> cognominal: yes, I think parcels are pretty flat already.

[16:18] <masak> it's not so much the for loop as parcels not being very array-y in the first place.

[16:21] <cognominal> masak:  S02:4616 proposes a .tree operator. To implement it means some sort of non flattening iterator

[16:23] * masak looks

[16:25] <masak> hm, that doesn't tell me much.

[16:25] <masak> here's what I know about for loops:

[16:26] <[Coke]> niecza: say 16768 / 18418

[16:26] <masak> if you use a variable with a '@' (or a '%'), it will flatten into elements (or pairs)

[16:26] <p6eval> niecza v13-122-geee10fb: OUTPUT«0.91041372570311652␤»

[16:26] <masak> if you use something like .list at the end, it will also flatten.

[16:27] <[Coke]> niecza: say 18418*.92-16768

[16:27] <p6eval> niecza v13-122-geee10fb: OUTPUT«176.56␤»

[16:27] <masak> if you do neither, and just say something like 'for $list-in-a-scalar { ... }', it won't flatten.

[16:29] <cognominal> nom:  say (eager (1, (2, 3, 4))).perl

[16:29] <p6eval> nom 1c74c7: OUTPUT«(1, 2, 3, 4).list␤»

[16:31] <cognominal> the code of "for" use eager. This begs the question: is eager supposed to flatten things.

[16:31] <cognominal> niecza:  say (eager (1, (2, 3, 4))).perl

[16:31] <p6eval> niecza v13-122-geee10fb: OUTPUT«===SORRY!===␤␤Undeclared routine:␤    'eager' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 919 (die @ 2) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1143 (P6.comp_unit @ 32) ␤  at /ho…

[16:32] *** s1n joined
[16:33] <[Coke]> colomon: any progress on .fmt?

[16:34] <colomon> [Coke]: I backed off all my changes in the faces of the onslaught of major updates last night.  I'll take another stab at it as soon as I've sorted my current $work bug.

[16:34] *** kaleem left
[16:35] *** Trashlord joined
[16:35] <[Coke]> \o/

[16:35] <[Coke]> only 177 bugs (less, even!) to get to the next percentage point. ;)

[16:36] <cognominal> SO2: This operator [eager] is agnostic towards flattening or slicing. 

[16:36] <PerlJam> colomon: re eager:  ... blah you beat me to it

[16:37] <PerlJam> S02:4676  (for the irclogs)

[16:37] <cognominal>     method eager() { nqp::p6list(nqp::list(self), List, Bool::True).eager }  # so Bool::True should be Mu

[16:37] <PerlJam> er, ... s/colomon/sognominal/ too 

[16:38] <[Coke]> whatever happened to grok?

[16:38] <[Coke]> (be nice if we had a grokbot in here.)

[16:38] <masak> [Coke]: the program is alive and well on CPAN.

[16:38] <masak> literal++

[16:39] *** cognominal left
[16:39] *** cognominal joined
[16:40] <[Coke]> this is merely an observation: wow, grok has a lot of deps.

[16:41] <PerlJam> That's code reuse for you!

[16:43] <[Coke]> is hinrik about?

[16:45] <literal> hi

[16:45] <literal> I could whip up a bot

[16:45] *** sayu joined
[16:45] *** am0c left
[16:48] <masak> \o/

[16:51] <cognominal> replacing  Bool::True by Mu  introduces other problems.     say (eager 1).perl   gives   ((1,),).list

[16:51] * [Coke] reports a grokbug

[16:52] <[Coke]> literal: looks like you'll need to run "grok -U" whenever a spec change occurs.

[16:52] <[Coke]> but then: https://rt.cpan.org/Public/Bug/Display.html?id=73768

[16:55] *** cognominal_ joined
[16:55] * [Coke] hurls http://www.omniglot.com/, delaying perl6 for another month.

[16:56] *** sayu left
[16:58] *** cognominal left
[16:58] *** sayu joined
[16:58] <literal> [Coke]: noted

[16:59] <masak> omniglot is nice.

[17:07] <masak> perl6: class A { has $!a; method set { $!a = 42 }; method get { $!a } }; my $a = A.new; $a.set; my $b = $a.clone; say $a.get; say $b.get

[17:08] <p6eval> niecza v13-122-geee10fb: OUTPUT«Unhandled exception: Unable to resolve method clone in class A␤  at /tmp/akXMJjyxbW line 1 (mainline @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2748 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 2749 (module-CORE @ 58) ␤  at /home/p…

[17:08] <p6eval> ..pugs b927740, rakudo 1c74c7: OUTPUT«42␤42␤»

[17:08] <masak> makes sense, I guess.

[17:09] *** mls joined
[17:13] *** MayDaniel joined
[17:16] <masak> another reason I don't like the current .gist factoring:

[17:16] <masak> saying "just implement the Str method" to someone sounds great.

[17:16] <masak> saying "just implement the gist method" doesn't quite have the same mnemonic ring to it.

[17:16] *** icwiener left
[17:17] <[Coke]> perhaps .gist should default to .Str

[17:18] <masak> maybe.

[17:18] * masak .oO( my god, it's full of delegations! )

[17:19] *** kaare_ left
[17:19] <masak> nom: class C { method Str { "OH HAI" } }; say C.new

[17:19] <p6eval> nom 1c74c7: OUTPUT«C.new()␤»

[17:19] <masak> nom: class C { method Str { "OH HAI" } }; say ~C.new

[17:19] <p6eval> nom 1c74c7: OUTPUT«OH HAI␤»

[17:20] <masak> hm :)

[17:20] <jnthn> evening, #perl6

[17:20] * jnthn is back home, and that means back in front of his comfy dev machine. :)

[17:21] <masak> jnthn! \o/

[17:22] <colomon> \o/

[17:22] *** icwiener joined
[17:25] * jnthn pulls latest Rakudo

[17:27] <PerlJam> jnthn: kshannon++ fixed that loop memory leak!

[17:27] <jnthn> yay!!!

[17:27] * jnthn sees he has patches to review :D

[17:31] <colomon> niecza: say sprintf("%f", 5.6)

[17:31] <p6eval> niecza v13-122-geee10fb: OUTPUT«??␤»

[17:31] <colomon> niecza: say sprintf("%f", 5.6.Num)

[17:31] <p6eval> niecza v13-122-geee10fb: OUTPUT«??␤»

[17:31] <colomon> perl6: say sprintf("%f", 5.6.Num)

[17:31] <p6eval> rakudo 1c74c7: OUTPUT«5.600000␤»

[17:31] <p6eval> ..niecza v13-122-geee10fb: OUTPUT«??␤»

[17:31] <p6eval> ..pugs b927740: OUTPUT«*** No such method in class Rat: "&Num"␤    at /tmp/Kq_9pwJNP8 line 1, column 19-26␤»

[17:32] *** Trashlord left
[17:33] <[Coke]> colomon: OH NOES, jnthn is back.

[17:34] <masak> mwhahaha!

[17:34] <masak> jnthn: look, you're in dire need here. something completely horrible was about to happen.

[17:35] <masak> team Niecza are certainly asserting themselves.

[17:35] * [Coke] ponders sorear and colomon dressed up in Team Rocket garb.

[17:35] <jnthn> [Coke]: Well, I can go back to resting... :)

[17:35] <[Coke]> ;)

[17:36] <PerlJam> If we can get a big Perl 6 release for 12/21/2012 we can have a story about how the Mayans predicted Perl 6

[17:36] <masak> oh wow oh wow

[17:37] *** mishin left
[17:37] <masak> "it's happening: the Perl 6 Christmas is finally here" *curtain*

[17:38] <dalek> rakudo/nom: 80ec2c1 | moritz++ | tools/build/NQP_REVISION:

[17:38] <dalek> rakudo/nom: free the Ints!

[17:38] <dalek> rakudo/nom: 

[17:38] <dalek> rakudo/nom: bump to a NQP revision that garbage-collects embedded REPRs,

[17:38] <dalek> rakudo/nom: and thus fixes a memory leak in Int (and probably other objects)

[17:38] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/80ec2c11e1

[17:42] <TimToady> niecza: my @a = ($_ for 1..10); say @a;

[17:42] <p6eval> niecza v13-122-geee10fb: OUTPUT«␤»

[17:42] <TimToady> I thought that worked in niecza once upon a time...am I hallucinating?

[17:43] <[Coke]> we could bisect it if you really wanted.

[17:43] <masak> TimToady: it's certainly been broken before.

[17:44] <TimToady> nom: my @a = ($_ for 1..10); say @a;

[17:44] <p6eval> nom 1c74c7: OUTPUT«1 2 3 4 5 6 7 8 9 10␤»

[17:44] <TimToady> I might just be remembering nom...

[17:44] <jnthn> o/ TimToady 

[17:45] <TimToady> o/!

[17:45] <jnthn> I used Christmas break as...a break! :)

[17:45] *** unobe joined
[17:46] *** Trashlord joined
[17:46] *** MayDaniel left
[17:46] <sorear> good * #perl6

[17:47] <[Coke]> ho, sorear.

[17:48] *** mux left
[17:48] <[Coke]> niecza: https://gist.github.com/1565776

[17:48] <p6eval> niecza v13-122-geee10fb: OUTPUT«ok 1 - eek␤»

[17:48] <[Coke]> (that outputs nothing for me locally.)

[17:50] <masak> sorear! \o/

[17:50] <masak> [Coke]: maybe your machine is so fast it finishes before END has a chance to run! :P

[17:51] <[Coke]> *snrk*.

[17:52] <[Coke]> it's feather, so I doubt that. ;)

[17:52] <masak> ;)

[17:52] <masak> perl6: my %h; my @keys = <a b c d>; %h{@keys} = 42 xx *; say %h.perl

[17:52] <p6eval> niecza v13-122-geee10fb: OUTPUT«{"a" => 42, "b" => 42, "c" => 42, "d" => 42}.hash␤»

[17:52] <p6eval> ..rakudo 1c74c7: OUTPUT«("a" => 42, "b" => 42, "c" => 42, "d" => 42).hash␤»

[17:52] <p6eval> ..pugs b927740: OUTPUT«{("a" => 42), ("b" => 42), ("c" => 42), ("d" => 42)}␤»

[17:52] <masak> \o/

[17:54] <sorear> EOBACKLOG

[17:55] <masak> here, have some more :P

[17:55] * geekosaur loves how everyone's got a different syntax there

[17:55] <sorear> jnthn: do you understand yet what's causing the nom regressions in S14-roles/conflicts.t ?

[17:56] <sorear> jnthn: I found the underlying bug, btw.  I'm also wondering if you have a fix in the pipeline I can steal :)

[17:57] <jnthn> sorear: Not sure off hand.

[17:57] *** Mowah left
[17:57] <jnthn> sorear: Though if I looked at the failure mode I could probably get to what's going on fairly quickly.

[17:57] *** molaf__ left
[17:59] *** Mowah joined
[17:59] <sorear> jnthn: What's going on is that $foo.Role::method is turning into Role.find_method("method")($foo), which ... throws away $foo and substitutes a fresh pun for the invocantr

[17:59] <jnthn> ah

[18:00] <jnthn> OK, will take a look in a bit.

[18:00] * jnthn needs to ease himself back into things :)

[18:00] <sorear> Anyways I stole this bug for niecza

[18:00] <jnthn> You're...welcome? ;)

[18:01] <dalek> rakudo/nom: 07374c2 | jnthn++ | src/core/Grammar.pm:

[18:01] <dalek> rakudo/nom: Grammar.parse and Grammar.parsefile should set $/. Resolves RT#107236.

[18:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/07374c2eea

[18:01] <jnthn> Well, lets me tag it testneeded anyway...

[18:03] <masak> nom: my @a = 1..5; my @b = 0 xx +@a; say @b.perl

[18:03] <p6eval> nom 80ec2c: OUTPUT«Array.new(0, 0, 0, 0, 0)␤»

[18:04] <masak> nom: my @a = 1..5; my @b = 0 xx @a

[18:04] <p6eval> nom 80ec2c:  ( no output )

[18:04] <masak> nom: my @a = 1..5; my @b = 0 xx @a; say @b.perl

[18:04] <p6eval> nom 80ec2c: OUTPUT«Array.new(0, 0, 0, 0, 0)␤»

[18:04] <masak> clearly my nom is too old :)

[18:05] <TimToady> sorear: did list comprehensions ever work in niecza?

[18:06] <masak> and does Niecza have a red cell in the feature matrix where list comprehensions ought to be?

[18:07] <TimToady> there's no entry in the feature matrix for that

[18:08] <sorear> TimToady: there's code for them, but I can't remember if it ever worked

[18:09] *** integral left
[18:09] <sorear> [Coke]: I can reproduce the ascending-order.t issue if I ssh to feather and use your copy of niecza

[18:10] <sorear> I cannot reproduce the issue if I compile locally, scp the bytecode to feather, and run it there with your mono

[18:11] <[Coke]> odd. One thing I did earlier was git bisect something, just doing a make (not a clean) after each step.

[18:11] <[Coke]> perhaps a clean, rebuild and try agian?

[18:14] <[Coke]> trying that...

[18:15] *** risou is now known as risou_awy

[18:15] <[Coke]> nope. "make clean; make; t/fudge...." still doesn't show the last 2. Anything other suggestions?

[18:17] <[Coke]> (trying realclean)

[18:18] *** thou_ joined
[18:18] *** groky joined
[18:19] <literal> groky: %

[18:19] <groky> "%"   Does a floating point modulo operation, i.e. 5.5 % 1 == 0.5 and 5 % 2.5 == 0. 

[18:19] <literal> groky: split

[18:19] <groky> "split"   Splits a string up into pieces based on delimiters found in the string. String delimiters must not be treated as rules but as constants. The default is no longer ' ' since that would be interpreted as a constant. P5's "split(' ')" will translate to "comb". Null trailing fields are no longer trimmed by default. The "split" function no longer has a default delimiter nor a default invocant…

[18:19] <sorear> groky: FatRat

[18:19] <groky> "FatRat"   (immutable type) - Perl rational (unlimited precision in both parts) 

[18:21] <sorear> [Coke]: I'd like to do some more tests once the realclean/rebuild is done.

[18:21] <sorear> literal: is it using the tablets?

[18:21] <literal> yes

[18:21] <literal> this is the source: https://gist.github.com/1566480

[18:22] <dalek> grok: 4f6e90a | hinrik++ | / (2 files):

[18:22] <dalek> grok: Update spec document urls

[18:22] <dalek> grok: review: https://github.com/hinrik/grok/commit/4f6e90a426

[18:22] <dalek> grok: 0e0cba1 | hinrik++ | Changes:

[18:22] <dalek> grok: v0.26

[18:22] <dalek> grok: 

[18:22] <dalek> grok:     - Update spec document urls

[18:22] <dalek> grok: review: https://github.com/hinrik/grok/commit/0e0cba198e

[18:23] <colomon> niecza: my %h = 1 => 'A'; say %h.pairs[0].WHAT

[18:23] *** mkramer left
[18:23] <p6eval> niecza v13-122-geee10fb: OUTPUT«Pair()␤»

[18:25] *** mkramer joined
[18:26] <TimToady> groky: *

[18:26] <groky> "*"   (numeric op) - multiplies numbers, forces numeric context (term) - synonym for Whatever, for example, means Inf in a range operator (..); means the end of an array in a slice operator so that negative indices access array elements relative to one beyond the final element - prefix which indicates slurpy arrays in signatures (twigil) - twigil of global variables 

[18:26] <dalek> rakudo/nom: 9afb9c3 | jnthn++ | src/Perl6/Actions.pm:

[18:26] <dalek> rakudo/nom: Handle sub foo(SomeConstant) { ... } correctly. Fixes the True/False case - well, kinda. Thing is, we smart-match the argument against SomeConstant, and of course $x ~~ True always comes out true... :S

[18:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9afb9c3633

[18:26] <dalek> rakudo/nom: 44ccd39 | jnthn++ | src/Perl6/Metamodel/ParametricRoleGroupHOW.pm:

[18:26] <dalek> rakudo/nom: Fix boolification of roles; resolves issue in RT##107336.

[18:26] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/44ccd39fea

[18:27] <sorear> How long ago was the $+FOO / $*FOO merger?

[18:27] <sorear> welcome back, jnthn :D

[18:27] *** mkramer left
[18:27] <masak> sorear: 2009-ish, I think.

[18:28] <masak> sorear: ISTR ruoso suggested it to TimToady.

[18:29] <[Coke]> realclean, rebuild, rerun... same behavior. only 1..6 show.

[18:29] <masak> sorear: aye, Nov 20 2009, spec commit dff23644d71abbcfa3d0880eac00b4106ad72330

[18:29] <jnthn> sorear: :)

[18:29] <jnthn> OK, I did some commits, now I can have dinner :)

[18:30] <jnthn> er...which depends on shopping. bbs :)

[18:30] <dalek> roast: e0e8870 | (Solomon Foster)++ | S02-names-vars/fmt.t:

[18:30] <dalek> roast: Fudge for niecza.

[18:30] <dalek> roast: review: https://github.com/perl6/roast/commit/e0e8870202

[18:30] <flussence> .oO( this is going to be a good month )

[18:34] <[Coke]> oh, literal IS hinrik! hio.

[18:34] <[Coke]> sorry if I completely missed that earlier!

[18:35] *** kaleem joined
[18:36] * masak .oO( they're literally the same person )

[18:36] <[Coke]> :P

[18:38] <sorear> [Coke]: update: the problem is that your copy of t/fudgeandrun is adding exit(1), but mine isn'

[18:38] <sorear> t.  WTF

[18:38] <tadzik> good evening \o/

[18:41] <masak> sorear: hm, now I'm thinking that commit's not it and that the change happened earlier than that.

[18:42] *** fridim_ joined
[18:42] <dalek> niecza: a037edd | (Solomon Foster)++ | lib/CORE.setting:

[18:42] <dalek> niecza: Port over .fmt from Rakudo ng.

[18:42] <dalek> niecza: review: https://github.com/sorear/niecza/commit/a037edd1a0

[18:42] <dalek> niecza: c4341fe | (Solomon Foster)++ | t/spectest.data:

[18:42] <dalek> niecza: Turn on S02-names-vars/fmt.t.

[18:42] <dalek> niecza: review: https://github.com/sorear/niecza/commit/c4341fe07c

[18:43] *** baest joined
[18:44] <colomon> [Coke]: there you go

[18:44] <sorear> [Coke]: if I manually add exit(1) to *.niecza AND run with mono 2.6, I can reproduce this on localhost \o/

[18:45] <sorear> I don't know what's up with your copy of fudge but I can at least work around the bug in niecza now

[18:47] *** spine left
[18:48] <[Coke]> my copy of fudge is in t/spec.

[18:49] <[Coke]> no changes there. weird.

[18:49] *** hundskatt left
[18:50] <[Coke]> but thank you for tracking it down. ;)

[18:50] <[Coke]> colomon: oooh, shiny.

[18:51] *** baest left
[18:52] *** integral joined
[18:52] *** integral left
[18:52] *** integral joined
[18:56] <sorear> [Coke]: wait, are you seeing these errors with test_summary or with fudgeandrun?

[18:56] *** kaare_ joined
[18:56] *** cj joined
[18:56] *** Patterner left
[18:57] <dalek> niecza: 220b37b | sorear++ | lib/ (3 files):

[18:57] <cj> /win 6

[18:57] <dalek> niecza: Work around failure to run END blocks after exit(1) on Mono 2.6.x

[18:57] <dalek> niecza: review: https://github.com/sorear/niecza/commit/220b37b667

[18:57] <sorear> hello cj

[18:57] <cj> howdy sorear

[18:57] *** baest joined
[18:57] <cj> anything new happin'in' around here?

[18:57] <cj> OMG!  perl6 on Mono!?

[18:57] <cj> sorear: did you do that?

[18:57] <cj> sorear++

[18:57] <cj> sorear: you're my new hero.

[18:58] <cj> can you run perl5 on perl6 on mono?

[18:58] <sorear> yeah.  I've actually been on this project since Jun2010 or so

[18:58] <sorear> sadly, no perl5 support yet

[18:58] <masak> we'll get there.

[18:58] <cj> me since 2008, but I've been on leave.

[18:58] <sorear> I hear fglock's perlito can run perl5 in Javascript

[18:58] <masak> even if it means we'll have to re-implement Perl 5! :)

[18:59] <cj> :)

[18:59] *** fridim_ left
[19:02] <tadzik> hey, there isn't any?

[19:02] <tadzik> I think pmurias implemented some, in form of eval( :from<perl5>)

[19:02] <tadzik> maybe it's in a branch

[19:03] <sorear> I don't think that counts as "on mono"

[19:03] <tadzik> I see what you mean

[19:03] *** Mowah left
[19:06] *** Psyche^ joined
[19:06] *** Psyche^ is now known as Patterner

[19:08] *** kaare_ left
[19:10] *** kaare_ joined
[19:11] <[Coke]> sorear: both.

[19:12] <[Coke]> that's why https://gist.github.com/1476841 has ~4 failures for a while.

[19:12] <[Coke]> (that's test_summary.pl output)

[19:12] <sorear> [Coke]: latest change should improve things

[19:13] <sorear> it looks like fudge will keep the fudged output if it's newer than the input ... even if the arguments have changed

[19:13] <sorear> so t/fudgeandrun is seeing the exit(1) because test_summary doesn't use --keep-exit-code

[19:14] *** bluescreen10 left
[19:15] <dalek> roast: 4e00888 | coke++ | S (2 files):

[19:15] <dalek> roast: niecza unfudge for fmt

[19:15] <dalek> roast: 

[19:15] <dalek> roast: (colomon++)

[19:15] <dalek> roast: review: https://github.com/perl6/roast/commit/4e008882d1

[19:15] *** bluescreen10 joined
[19:15] <[Coke]> sorear: ARGLEBARG

[19:15] <[Coke]> good catch.

[19:15] <[Coke]> sorear++

[19:21] *** Patterner left
[19:21] <colomon> ARGLEBARG?

[19:22] *** mj41 left
[19:23] *** Psyche^ joined
[19:23] *** Psyche^ is now known as Patterner

[19:25] <masak> sounds like a totally transparent frustrated injective of facepalming self-blame.

[19:25] <masak> invective*

[19:26] <[Coke]> well, except for the self bit. I didn't write fudge. ;)

[19:26] <[Coke]> arglebarg will give decent enough search results. ;)(

[19:26] <[Coke]> ;)

[19:28] <moritz> http://arglebarg.deviantart.com/gallery/

[19:29] *** hundskatt joined
[19:30] *** kaare_ left
[19:33] <masak> in fact, "arglebarg" sounds like a word which could've occurred in h2g2, but didn't.

[19:35] <sorear> it's fairly close to Agrajag, which did, though

[19:35] <colomon> Agrajag!

[19:36] <dalek> niecza: 4b5f174 | sorear++ | lib/Cursor.cs:

[19:36] <dalek> niecza: Fix NRE with .caps and multiple same-named captures

[19:36] <dalek> niecza: review: https://github.com/sorear/niecza/commit/4b5f174920

[19:36] <[Coke]> masak: that's certainly what went through my mind.

[19:36] <[Coke]> (h2g2)

[19:36] <masak> sorear: also, "gargleblaster"

[19:37] <dalek> roast: 6d5743d | sorear++ | S05-capture/caps.t:

[19:37] <dalek> roast: [S05-capture/caps] Fix isa_ok syntax

[19:37] <dalek> roast: review: https://github.com/perl6/roast/commit/6d5743d07c

[19:37] <dalek> roast: b9dce46 | sorear++ | S05-capture/caps.t:

[19:37] <dalek> roast: [S05-capture/caps] Niecza unfudge

[19:37] <dalek> roast: review: https://github.com/perl6/roast/commit/b9dce460c0

[19:37] <sorear> that file now has no fudges

[19:38] *** muixirt left
[19:38] *** spine joined
[19:39] *** Chillance left
[19:39] <[Coke]> sorear++: o/

[19:39] *** sayu left
[19:39] *** Chillance joined
[19:39] * [Coke] hits himself in the head with a brick wrapped in a lemon.

[19:40] <colomon> just so it's not a lemon-soaked paper napkin...

[19:41] <geekosaur> then join ##42?

[19:41] * geekosaur doesnt know if there is such a channel...

[19:43] *** Moukeddar joined
[19:51] *** thou_ left
[19:52] *** alim joined
[19:52] *** kaare_ joined
[19:53] <sorear> o/ Moukeddar 

[19:54] <Moukeddar> \o sorear 

[19:54] <Moukeddar> how are you doing?

[19:55] <sorear> good

[19:56] <Moukeddar> ^_^

[19:56] <tadzik> hello Moukeddar 

[19:57] <Moukeddar> hi tadzik :D

[19:59] <masak> Moukeddar! \o/

[19:59] <Moukeddar> hey, i'm popular :D

[19:59] <Moukeddar> where's mah limousine?

[20:00] <moritz> you mean you lost it?

[20:00] <Moukeddar> you sent one ? 

[20:01] <tadzik> one? Gosh, I hope you're kidding

[20:01] <Moukeddar> i'm not kidding,the parking lot is empty O.o

[20:01] <tadzik> I hope you mean the 4th floor of it

[20:02] <Moukeddar> where did you park it guys ?

[20:02] <Moukeddar> this isn't funny 

[20:03] <masak> last I saw it, someone had parked it behind your house...

[20:03] <masak> ...in the swimming pool.

[20:03] <tadzik> ...of strawberry juice

[20:04] <tadzik> its antenna sticked out, though. The pool is not deep enough to completely cover 7 cars

[20:04] <Moukeddar> weird, there's no pool in this area, are you sure?

[20:05] <tadzik> it "this area" is less than 5 kms in diameter, you probably need to look *outside* of your living room

[20:06] <dalek> niecza: 402391b | (Solomon Foster)++ | lib/CORE.setting:

[20:06] <dalek> niecza: Add working infix:<minmax>.

[20:06] <dalek> niecza: review: https://github.com/sorear/niecza/commit/402391b861

[20:06] <moritz> oh nice, I didn't know http://www.seebs.net/faqs/c-iaq.html

[20:06] * Moukeddar is looking

[20:07] <dalek> roast: 74c178e | (Solomon Foster)++ | S03-operators/minmax.t:

[20:07] <dalek> roast: Unfudge tests that now work in niecza.

[20:07] <dalek> roast: review: https://github.com/perl6/roast/commit/74c178e597

[20:08] <masak> moritz: heh -- I found that one a few weeks back. :)

[20:09] *** Chillance left
[20:09] *** Chillance joined
[20:10] <tadzik> hm, what's this 1.7?

[20:10] <tadzik> foo, "hello, world!\n";

[20:10] *** zby_home_ joined
[20:11] <tadzik> and isn't 07 octal rather than hex?

[20:11] <masak> not in Perl 6.

[20:12] <masak> std: 07

[20:12] <p6eval> std dc62e1d: OUTPUT«Potential difficulties:␤  Leading 0 does not indicate octal in Perl 6; please use 0o7 if you mean that at /tmp/96_JAMM9Z9 line 1:␤------> 07⏏<EOL>␤ok 00:01 118m␤»

[20:12] <moritz> tadzik: 07 is both octal and hex (and decimal)

[20:12] <tadzik> heh, right

[20:12] <moritz> std: 09

[20:12] <p6eval> std dc62e1d: OUTPUT«Potential difficulties:␤  Leading 0 does not indicate octal in Perl 6; please use 0o9 if you mean that at /tmp/CKkQtgKDZP line 1:␤------> 09⏏<EOL>␤ok 00:01 118m␤»

[20:12] <tadzik> I don't think that faq is really accurate

[20:12] <moritz> tadzik: it's meant as a joke

[20:13] <tadzik> ah, that explains quite a lot :)

[20:13] <tadzik> I wondered whether I should laugh, or it'd turn out to be disrespectful to some Well Known Person

[20:14] <moritz> 19.21: Does anyone have a C compiler test suite I can use?

[20:14] <moritz> Yes. Unfortunately, it's probably broken. It's hard to tell. 

[20:15] *** snearch joined
[20:15] *** bluescreen10 left
[20:15] <moritz> somehow I feel with the author :-)

[20:16] <masak> :P

[20:17] *** Kharec joined
[20:17] <masak> jnthn: re #107348 -- yes, I know. I should've perhaps stated that in the ticket as the expected behavior.

[20:17] <masak> nom: sub foo(True) { say "OH HAI" }; foo False

[20:17] <p6eval> nom 44ccd3: OUTPUT«OH HAI␤»

[20:18] <masak> shortly before I registered that ticket, there was talk of making a meta-exception for True/False in signatures.

[20:18] <Kharec> hi there

[20:18] <Kharec> use v6; is completely like perl6?

[20:19] <moritz> "use v6;" tells the compiler to throw an error if it doesn't think it can handle Perl 6

[20:19] <moritz> like, perl 5

[20:20] *** bigesttitty joined
[20:20] <moritz> which means you get much better error messages if you accidentally use the wrong compiler

[20:20] *** bigesttitty left
[20:23] <Kharec> ok

[20:24] <colomon> niecza: enum Ordering (Increase => -1, Same => 0, Decrease => 1);

[20:24] <p6eval> niecza v13-127-g402391b: OUTPUT«===SORRY!===␤␤Compile time expression is insufficiently trivial CallSub at /tmp/enxafhpu6e line 1:␤------> ncrease => -1, Same => 0, Decrease => 1)⏏;␤␤Enum may not contain both Int and Str values at /tmp/enxafhpu6e lin…

[20:24] <moritz> setting compilation still uses 1.6g in rakudo :(

[20:25] *** cooper joined
[20:25] *** Kharec left
[20:26] <spine> nice, the loop {1+1} bug is gone! but "my @a := (1..*).map({"a"x 10000}); while shift @a {};" is still leaking on current nom :(

[20:26] <spine> is there a good reason nom doesn't free the shifted values?

[20:26] *** bluescreen10 joined
[20:26] *** ksi joined
[20:29] <moritz> nom: my @a = do { while 1 { last if rand() > 0.9; 5 } }; say @a

[20:29] <p6eval> nom 44ccd3: OUTPUT«1␤»

[20:31] <moritz> spine: probably just bad reasons

[20:31] *** y3llow_ joined
[20:32] *** pothos_ joined
[20:32] *** wolfman2000 left
[20:33] *** y3llow left
[20:33] *** pothos left
[20:33] *** y3llow_ left
[20:34] *** y3llow joined
[20:35] *** pothos_ left
[20:35] *** pothos joined
[20:36] *** y3llow left
[20:36] *** y3llow joined
[20:36] <masak> wow, I had forgotten what a great language Perl 6 is.

[20:37] <masak> it's not just syntactic sugar; writing idiomatic Perl 6 actually makes me a happier, more beautiful person.

[20:37] <masak> :P

[20:37] <PerlJam> masak: if only there were macros ...   ;)

[20:38] *** pothos left
[20:38] *** y3llow left
[20:38] *** pothos joined
[20:38] *** y3llow joined
[20:38] <masak> PerlJam: I heard some schmuck got tasked with implementing macros, finally.

[20:38] *** Kharec joined
[20:39] <Kharec> perl6: my int $t = 6;

[20:39] <p6eval> niecza v13-127-g402391b: OUTPUT«===SORRY!===␤␤Malformed my at /tmp/WYePQ1lybE line 1:␤------> my ⏏int $t = 6;␤␤Parse failed␤␤»

[20:39] <p6eval> ..pugs b927740, rakudo 44ccd3:  ( no output )

[20:39] <moritz> which reminds me, I should get back to exceptions one of these days...

[20:39] <jnthn> :)

[20:40] * jnthn needs to get back to Zavolaj, QRegex, QAST... :)

[20:40] *** Kharec left
[20:40] <tadzik> masak: haha, good luck to him, LOL!

[20:40] <PerlJam> moritz: you're just following in the grand tradition of ever-open grants

[20:40] <japhb> Which reminds me, now that jnthn's back, maybe it's time to try again for dispatching magic for Failure-outside-Any

[20:40] <jnthn> ...and I should close off my grant. :)

[20:40] <moritz> PerlJam: I didn't plan to :/

[20:40] <PerlJam> no one does

[20:40] <jnthn> japhb: Yes, I'm going to be relatively about. :)

[20:40] <japhb> :-)

[20:41] <masak> tadzik: LOL!

[20:45] <jnthn> Would be nice to get some of the testneededs in Rakudo turned into resolveds too :)

[20:46] * moritz gets weird brane knots while trying to think of setting names

[20:46] <moritz> CORE is *outside* the user's program

[20:46] <dalek> rakudo/nom: 44556db | jnthn++ | src/Perl6/Actions.pm:

[20:46] <dalek> rakudo/nom: Fix initializers for lexical declarations that shadow attribute aliases.

[20:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/44556db1a0

[20:46] <moritz> or formulated differently, it's surrounded by CORE

[20:47] <moritz> so, if you have two settings, should the middle one be SHELL oder INNER_CORE?

[20:47] <moritz> we should really name the default setting WORLD instead of CORE

[20:48] <moritz> then we could expand in both directions (universe, multiverse and continent, country) and everybody would know how they nest

[20:48] <PerlJam> CORE is the exocore and the user's program is the endocore  :)

[20:49] <PerlJam> but, +1 to WORLD (or almost anything besides CORE since it's so overloaded)

[20:50] <masak> sorry, "World" is taken... :/

[20:50] <moritz> yes, but WORLD isn't :-)

[20:50] <moritz> and we're case sensitive

[20:50] <masak> CORE is just the name for a very common setting.

[20:50] <tadzik> rename SAFE to wOrLd!

[20:50] <masak> I don't like WORLD for many reasons.

[20:51] *** mj41 joined
[20:51] <geekosaur> give it some strange unicode-character name?

[20:51] <moritz> rename SAFE to LOL-YOU-REALLY-THINK-IT'S-SAFE

[20:51] <masak> but chief among those is that different things should look different. and WORLD has nothing to do with World.

[20:51] <flussence> MANTLE

[20:52] <moritz> masak: also I think that World is purely compiler-internal, and the user never sees it

[20:52] <kshannon> o/ #perl6

[20:52] <jnthn> o/ kshannon 

[20:52] <PerlJam> CORE is more like BLANKET

[20:53] <PerlJam> (it covers you and keeps you warm)

[20:55] <masak> :)

[20:55] <masak> actually, I kinda like CORE.

[20:55] <moritz> masak: any comments to my criticism above?

[20:56] <moritz> speaking of settings... why doesn't SAFE.setting needs a YOU_ARE_HERE ?

[20:57] *** icwiener left
[20:57] <masak> moritz: the two-settings criticism? only that I'd require two actual settings to be able to say anything conclusive.

[20:57] <dalek> roast: 9a74f7f | coke++ | S (4 files):

[20:57] <dalek> roast: niecza fudge

[20:57] <dalek> roast: review: https://github.com/perl6/roast/commit/9a74f7feb3

[20:57] *** ksi left
[20:57] <dalek> niecza: 0bb44b6 | coke++ | t/spectest.data:

[20:57] <dalek> niecza: run more tests

[20:57] <dalek> niecza: 

[20:57] <dalek> niecza: S09-subscript/slice.t, S12-class/inheritance.t

[20:57] <dalek> niecza: S03-smartmatch/disorganized.t, S12-introspection/can.t,

[20:57] <dalek> niecza: S12-methods/private.t, S14-roles/conflicts.t

[20:57] <dalek> niecza: review: https://github.com/sorear/niecza/commit/0bb44b6cc7

[20:57] <moritz> masak: not only that, but it's *outside* the user's program, not *inside*

[20:58] <tadzik> jnthn: obtw, did you see the deterministic segfault?

[21:00] *** kaleem left
[21:00] <dalek> Heuristic branch merge: pushed 54 commits to nqp/qbootstrap by jnthn

[21:00] *** kaleem joined
[21:00] <jnthn> tadzik: The one ruoso++ RT'd?

[21:00] <masak> moritz: well, it's the core *setting*, in that it forms the innermost setting.

[21:00] *** kaleem left
[21:00] <tadzik> jnthn: nope, the one in Bailador. Sorry, but gofing it makes the segfault go away :/

[21:01] <jnthn> tadzik: OK, missed it. Instructions for reproducing it?

[21:01] <tadzik> jnthn: I can give you an ssh account with a environment with a bug

[21:01] <jnthn> ok

[21:01] *** kaare_ left
[21:02] *** Moukeddar left
[21:08] <dalek> niecza: 2363b26 | coke++ | t/spectest.data:

[21:08] <dalek> niecza: run S13-overloading/operators.t

[21:08] <dalek> niecza: review: https://github.com/sorear/niecza/commit/2363b266e2

[21:09] <moritz> $ ./perl6 -e 'say i'

[21:09] <moritz> 0 + 1i

[21:09] <moritz> \o/

[21:09] *** skids left
[21:09] <moritz> that works due to another setting in which I could write   my constant i = 1i;   without all the trouble that I got for that CORE

[21:11] <tadzik> jnthn: okay, this will take a second, non-relocatable parrot strikes again :)

[21:12] *** cognominal___ joined
[21:12] <[Coke]> sorear++ colomon++; quite a few more tests enabled.

[21:13] *** cognominal_ left
[21:13] <colomon> [Coke]++

[21:14] <masak> nom: sub MAIN(:$foo) {}

[21:15] <p6eval> nom 44556d: OUTPUT«use of uninitialized value of type Any in string context␤use of uninitialized value of type Any in string context␤»

[21:15] <masak> where do these warnings come from?

[21:15] * masak submits rakudobug

[21:15] <moritz> proably MAINHELPER or so

[21:15] <tadzik> a-ha!

[21:15] <moritz> masak: I think I've seen that one submitted already

[21:15] <masak> moritz: URL?

[21:15] <moritz> masak: looking...

[21:16] <moritz> masak: https://rt.perl.org/rt3/Ticket/Display.html?id=107244

[21:16] *** kaare_ joined
[21:17] <masak> thanks. moritz++ [Coke]++

[21:18] *** bluescreen10 left
[21:26] *** snearch left
[21:27] *** fridim_ joined
[21:30] <moritz> perl6: while 1 { die "get me out of here"; CATCH { last } }; say "escaped!"

[21:31] <p6eval> niecza v13-127-g402391b: OUTPUT«(timeout)»

[21:31] <p6eval> ..rakudo 44556d: OUTPUT«escaped!␤»

[21:31] <p6eval> ..pugs b927740: OUTPUT«*** get me out of here␤    at /tmp/zSIwGr7zEV line 1, column 11-35␤»

[21:32] <masak> :)

[21:32] <masak> Pugs has clearly had it.

[21:32] <moritz> well, I'm not sure

[21:33] <geekosaur> pugs is missing a lot of stuff

[21:34] <moritz> I don't know how violently CATCH should try to re-throw the exception

[21:35] <moritz> perl6: sub f { die "OH NOEZ"; say "still there"; CATCH { return } }; f; say "alive"; # same problem, really

[21:35] <p6eval> niecza v13-127-g402391b: OUTPUT«still there␤alive␤»

[21:35] <p6eval> ..pugs b927740: OUTPUT«*** OH NOEZ␤    at /tmp/dabX_klSHh line 1, column 63-64␤       /tmp/dabX_klSHh line 1, column 9-22␤»

[21:35] <p6eval> ..rakudo 44556d: OUTPUT«alive␤»

[21:36] <moritz> nom: say nqp::p6box_i(pir::time)

[21:36] <p6eval> nom 44556d: OUTPUT«use of uninitialized value of type Mu in string context␤use of uninitialized value of type Mu in string context␤===SORRY!===␤error:imcc:The opcode 'time' (time<0>) was not found. Check the type and number of the arguments␤       in file '(file unknown)' line 40708237␤»…

[21:36] <masak> why in the world does Niecza print "still there"?

[21:36] <moritz> nom: say nqp::p6box_i(pir::time__P)

[21:36] <p6eval> nom 44556d: OUTPUT«use of uninitialized value of type Mu in string context␤use of uninitialized value of type Mu in string context␤===SORRY!===␤error:imcc:The opcode 'time_p' (time<1>) was not found. Check the type and number of the arguments␤     in file '(file unknown)' line 44432509␤»…

[21:37] <moritz> masak: I have no idea

[21:37] <jnthn> nom: say nqp::p6box_i(pir::time__N)

[21:37] <p6eval> nom 44556d: OUTPUT«1325796989␤»

[21:38] <moritz> nom: say time - time

[21:38] <p6eval> nom 44556d: OUTPUT«0␤»

[21:40] <jnthn> nom: say nqp::p6box_n(pir::time__N)

[21:40] <p6eval> nom 44556d: OUTPUT«1325797162.39153␤»

[21:43] *** donri left
[21:46] <sorear> masak: because return is dynamically scoped (bugoid) and it causes &die to return

[21:46] <dalek> rakudo/nom: eccd5ee | jnthn++ | src/binder/container.c:

[21:46] <dalek> rakudo/nom: Add a missing concreteness check (hopefully fixes a bug tadzik++ reported/helped me find).

[21:46] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/eccd5ee1b5

[21:47] <moritz> nom: multi sub infix:<+>(Str where True, Str where True) { }; 'a' + 'a'

[21:47] <p6eval> nom 44556d: OUTPUT«===SORRY!===␤Cannot do non-typename cases of type_constraint yet at line 1, near ", Str wher"␤»

[21:48] <moritz> nom: multi sub infix:<+>(Str where { True } , Str where { True }) { }; 'a' + 'a'

[21:48] <p6eval> nom 44556d: OUTPUT«===SORRY!===␤Cannot do non-typename cases of type_constraint yet at line 1, near ", Str wher"␤»

[21:48] <moritz> nom: multi sub infix:<+>(Str $ where { True } , Str $ where { True }) { }; 'a' + 'a'

[21:48] <p6eval> nom 44556d: OUTPUT«===SORRY!===␤Circularity detected in multi sub types.␤»

[21:48] <moritz> jnthn: we were quite confused by this one :-)

[21:49] <jnthn> hey, so am I :)

[21:51] <moritz> I guess nobody submitted it, so I should do that...

[21:51] <moritz> nom: multi sub infix:<+>(Str $ where 1 , Str $ where 1) { }; 'a' + 'a'

[21:51] <p6eval> nom 44556d: OUTPUT«===SORRY!===␤Circularity detected in multi sub types.␤»

[21:51] <moritz> just trying to golf it a bit...

[21:51] <PerlJam> masak moritz, masak it

[21:51] <moritz> nom: multi sub infix:<+>(Str $ where 1 , Str $ where 1) { }; 

[21:51] * PerlJam tries out the verb again

[21:51] <p6eval> nom 44556d:  ( no output )

[21:52] <jnthn> nom: multi sub infix:<+>(Str $, Str $) { }; 'a' + 'a'

[21:52] <p6eval> nom 44556d:  ( no output )

[21:52] * masak it!

[21:52] <jnthn> nom: multi sub infix:<+>(Str $ where 1, Str $) { }; 'a' + 'a'

[21:52] <p6eval> nom 44556d: OUTPUT«===SORRY!===␤Circularity detected in multi sub types.␤»

[21:52] <jnthn> jfmi

[21:53] <jnthn> moritz: Well, seems only one arg needs the where :)

[21:53] <masak> jnthn: *that's* what I shoulda called my blog :P

[21:54] <jnthn> ;)

[21:54] * moritz took some time to figure out the "m" :-)

[21:57] <moritz> anyway, ticketed

[21:57] <jnthn> Thanks :)

[21:58] * moritz -> sleep

[21:58] <jnthn> najt

[21:58] <tadzik> 'branoc

[21:58] <PerlJam> Does rakudo also detect squares, rectangles, hexagons and other shapes?

[21:59] <tadzik> nom: say so "␤".isa('rectangle')

[21:59] <p6eval> nom 44556d: OUTPUT«Bool::False␤»

[22:00] <tadzik> strange, it is a rectangle on my machine :)

[22:00] <jnthn> .oO( Tetrahedronality detected in multi sub types )

[22:00] <masak> tadzik: that's just due to low resolution.

[22:00] *** vlkv joined
[22:00] * masak .oO( Rhombus detected in multi sub types )

[22:00] <tadzik> a-ha!

[22:00] <PerlJam> If rakudo starts telling me about fractals and all the colors it sees in the sky, I may start to worry a bit

[22:01] * masak .oO( Strange attractor detected in multi sub types )

[22:01] <tadzik> we should write a module for that

[22:01] *** mj41 left
[22:01] <PerlJam> masak: is that like a gremlin?

[22:01] <tadzik> a thread which conversates randomly with a user

[22:01] <tadzik> it should be possible using niecza

[22:02] <PerlJam> "Small imaginary imp detected ..."

[22:02] <PerlJam> tadzik: are you disparaging rakudo?!?!?  ;)

[22:02] *** Mowah joined
[22:02] *** vlkv is now known as gv

[22:02] <tadzik> PerlJam: I'm sad too :)

[22:02] *** spine left
[22:12] <masak> PerlJam: it is *exactly* like a gremlin.

[22:14] *** pyrimidine left
[22:19] *** kaare_ left
[22:30] *** alim left
[22:35] *** skids joined
[22:35] <masak> 'night, #perl6

[22:37] <sorear> bye

[22:37] <sorear> interesting but

[22:37] <sorear> bug

[22:37] <sorear> in niecza, it's actually (should be) impossible to have cycles in multi narrowness

[22:38] <jnthn> It shoudln't be possible in Rakudo provided you're not meta-programming (in which case you can say what you want about types, so all bets are off)

[22:38] <sorear> ah ok

[22:45] *** proller_ joined
[22:45] *** whiteknight joined
[22:45] *** whiteknight is now known as Guest95402

[22:48] <japhb> Oh, I bet I know what #107244 is.

[22:48] <dalek> nqp: 2e578b5 | jnthn++ | src/ (2 files):

[22:48] <dalek> nqp: Accessing attributes may trigger auto-vivification of a scalar container with P6opaque; we were missing some write-barriers for these cases. Add them.

[22:48] <dalek> nqp: review: https://github.com/perl6/nqp/commit/2e578b5d4a

[22:49] <japhb> I remember some time ago a jnthn++ commit that I guessed would have an effect on MAIN_HELPER.

[22:49] * japhb goes and digs

[22:49] *** proller__ joined
[22:51] *** proller_ left
[22:52] <japhb> Yup, rakudo 1340fa68ba did it, I bet.

[22:52] <jnthn> git show

[22:52] <jnthn> grr

[22:52] <jnthn> not here

[22:52] * japhb goes to implement a fix and then wait ages for a full recompile (I was on a different branch)

[22:53] <sorear> jnthn: can you explain what $!is_mixin is used for?

[22:54] *** Mowah left
[22:54] *** Chillance left
[22:54] <sorear> I see the use in Attribute.instantiate_generic but I haven't quite figured out what this method is doing

[22:54] <tadzik> yay, segfaults fixed! jnthn++

[22:55] <jnthn> Yeah, and I'll bet that fix was below some other segfaults we've been seeing. Including the POD ones.

[22:55] <tadzik> I thought the Pod ones are gone

[22:55] <jnthn> tadzik: Roaming, I suspect.

[22:55] <jnthn> tadzik: As in, we maybe lost them due to luck more than anything.

[22:55] <tadzik> I wonder if it was behind Panda 'sometimes segfaulting when copying large directories'

[22:55] <tadzik> maybe

[22:55] <jnthn> tadzik: It was a probabalistic thing.

[22:56] *** am0c joined
[22:56] <tadzik> it's been WBs since I remember :) Can we make some static analyzing to find them all?

[22:56] <jnthn> sorear: The flag itself really just means "was this class generated to serve as the point of the mixin"

[22:56] <sorear> jnthn: "point"?

[22:57] <jnthn> sorear: Mixins in Rakudo = generate anonymous subclass that inherits from the thing we're mixing in to, compose role(s).

[22:57] <sorear> Yes

[22:57] <jnthn> Then change_type it.

[22:57] <sorear> In Niecza, subclasses created using "but" do not remember their origins, they are just like any other class

[22:58] <sorear> I'm trying to understand why Rakudo tracks $!is_mixin

[22:58] <jnthn> Yeah, that's how I had it originally....seem to remember there was something weird that cropped up...

[22:58] <TimToady> presumably same reason Ruby does, so you don't do it again unnecessarily

[22:59] <jnthn> oh, hm. :)

[22:59] <sorear> jnthn: I'm trying to figure out what BOOTSTRAP.pm lines 198-199 are doing

[22:59] <jnthn> It's about container types that get mixins.

[23:00] <jnthn> And finding the actual container type itself so we can get our hands on its descriptor

[23:00] <jnthn> That's...evil.

[23:00] <jnthn> sorear: Unless you're very closely following Rakudo's container model, it's probably not relevant.

[23:01] <sorear> I see

[23:02] <sorear> niecza currently lacks anything akin to a container descriptor, so yeah

[23:03] <jnthn> Well, Rakudo kinda works on a scheme of "prototype containers"

[23:03] <jnthn> Which are repr_clone'd as needed.

[23:03] <jnthn> It's relatively efficient. Especially compared to what ng did.

[23:05] *** lutok joined
[23:06] <sorear> jnthn: Why are P6{int,num,str} REPRs?  It seem to me they have nothing in common with the rest of the things that are REPRs.

[23:07] <jnthn> sorear: Rerpresentation really should means "stuff related to memory allocation/management"

[23:07] <jnthn> s/should/just

[23:07] <jnthn> sorear: int, num and str all have memory needs

[23:07] <jnthn> And in the case of str, GC needs.

[23:10] *** fridim_ left
[23:11] <tadzik> Tene: ping

[23:11] <jnthn> OK, time for me to rest a bit. :)

[23:11] <jnthn> Back tomorrow

[23:11] <tadzik> rest well!

[23:12] <jnthn> Thanks! :)

[23:12] <sorear> Why is there no write barrier in P6opaque::copy_to ?

[23:21] *** nnunley left
[23:23] <Tene> tadzik: what's up?

[23:24] <tadzik> Tene: I was wondering if you're about to make a repo for Ratel

[23:24] *** sftp left
[23:24] <Tene> tadzik: I have no intentions to do anything of the sort. :)

[23:25] <dalek> rakudo/nom: ae33c0b | (Geoffrey Broadwell)++ | src/core/Main.pm:

[23:25] <dalek> rakudo/nom: 1340fa68ba changed Parameter.type to return the actual type, not its name -- now fix MAIN_HELPER's gen_usage() to compensate.  Fixes #107244.

[23:25] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/ae33c0bc20

[23:25] <japhb> Would someone mind doing the needful to #107244?

[23:26] *** sftp joined
[23:27] <tadzik> Tene: huh, I thought you did

[23:27] <tadzik> well, I adopted it into Bailador's repo as a temporary solution

[23:27] <Tene> tadzik: what I remember is being asked about Ratel, and saying that I didn't feel any notable sense of ownership

[23:27] <tadzik> oh, I see

[23:28] <Tene> If there's any reason that anyone *wants* me to own the repo, I can.

[23:28] <Tene> I don't otherwise care, though.

[23:28] <tadzik> I thought it's about giving credit to you

[23:29] <Tene> I'll feel appropriately credited if you add a CREDITS file or a note in the README or some such. :)

[23:30] <tadzik> okay :)

[23:30] <tadzik> huh, so I need a README for Bailador

[23:47] <dalek> features: 13a62a9 | larry++ | features.json:

[23:47] <dalek> features: New features features

[23:47] <dalek> features: 

[23:47] <dalek> features: s/Currying/Priming/

[23:47] <dalek> features: Added "Loops as list generators"

[23:47] <dalek> features: review: https://github.com/perl6/features/commit/13a62a909e

[23:47] <dalek> features: b8349ac | larry++ | features.json:

[23:47] <dalek> features: make nom point to rakudo.org by default now

[23:47] <dalek> features: review: https://github.com/perl6/features/commit/b8349ac5da

[23:55] *** orafu left
[23:55] *** orafu joined
[23:57] *** Woodi joined
[23:59] *** japhb left
[23:59] *** japhb joined
