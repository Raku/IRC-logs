[00:00] *** Khisanth left
[00:04] *** benabik joined
[00:11] *** whiteknight joined
[00:11] *** raiph joined
[00:14] *** Khisanth joined
[00:34] *** nebuchadnezzar left
[00:34] *** nebuchad` joined
[00:36] *** yves_ left
[00:37] *** yves_ joined
[00:41] *** flightrecorder left
[00:42] *** FROGGS left
[00:47] *** docdoctor left
[00:55] *** docdoctor joined
[00:56] *** anuby joined
[00:59] *** docdoctor left
[01:00] *** Chillance left
[01:01] *** benabik left
[01:05] *** whiteknight left
[01:08] *** FROGGS joined
[01:09] *** hypolin joined
[01:15] <colomon> rn: say 2 ** 78

[01:15] <p6eval> rakudo 097361, niecza v21-15-gf226bf6: OUTPUT«302231454903657293676544␤»

[01:19] <colomon> rn: say (2 ** 157).log10

[01:19] <p6eval> rakudo 097361: OUTPUT«47.261709319245␤»

[01:19] <p6eval> ..niecza v21-15-gf226bf6: OUTPUT«47.261709319245043␤»

[01:21] *** flightrecorder joined
[01:35] *** Targen joined
[01:46] *** FROGGS_ joined
[01:48] *** flightrecorder left
[01:49] *** flightrecorder joined
[01:50] *** FROGGS left
[01:51] *** bugger joined
[01:51] <bugger> hi perl6

[01:51] <sorear> hello bugger.

[01:52] <sorear> welcome to #perl6.

[01:52] <bugger> a LWP::Simple install error. https://gist.github.com/3747164

[01:53] <bugger> good morning sorear!

[01:54] <bugger> sorear:can you help me?

[01:55] <sorear> I cannot personally help you, I don't know anything about LWP::Simple

[01:55] <bugger> sorear:that's too bad.

[01:56] <sorear> cosimo: tadzik: ping

[01:57] *** jeffreykegler joined
[01:58] <bugger> sorear: bye! anyway. thanks.

[01:58] *** bugger left
[01:58] <sorear> bah!

[02:02] *** orafu left
[02:02] * colomon was going to try to build a copy locally, but wasn't fast enough.

[02:02] *** orafu joined
[02:03] <sorear> hopefully ey'll be back.

[02:06] <ingy> anyone know what channels fglock is on?

[02:08] <sorear> I think fglock just doesn't like IRC in general

[02:08] <doy> seen fglock

[02:08] <aloha> fglock was last seen in #perl6 7 days 8 hours ago joining the channel.

[02:09] *** gootle joined
[02:09] <sorear> he talked more in Perl than I've ever seen on irc

[02:14] *** jeffreykegler left
[02:17] *** jeffreykegler joined
[02:19] *** raiph left
[02:53] *** mucker left
[03:00] *** orafu left
[03:04] *** orafu joined
[03:16] *** jeffreykegler left
[03:24] *** SHODAN left
[03:25] *** SHODAN joined
[03:27] *** imarcusthis left
[03:29] *** imarcusthis joined
[03:31] *** flightrecorder left
[03:32] *** FROGGS_ left
[03:53] *** FROGGS joined
[04:04] *** FROGGS left
[04:08] *** FROGGS joined
[04:12] *** flightrecorder joined
[04:26] *** telex left
[04:32] *** flightrecorder left
[04:33] *** telex joined
[04:34] *** FROGGS left
[04:35] <Circlepuller__> r: printf "%c", <7 ''>

[04:35] <p6eval> rakudo 097361: OUTPUT«»

[04:43] *** yarp joined
[04:47] <yarp> r: say "good morning";

[04:47] <p6eval> rakudo 097361: OUTPUT«good morning␤»

[04:55] *** FROGGS joined
[05:00] <moritz> \o

[05:03] *** FROGGS left
[05:06] *** skids left
[05:08] *** FROGGS joined
[05:12] *** yves_ left
[05:14] *** flightrecorder joined
[05:17] *** flightrecorder left
[05:17] *** FROGGS left
[05:31] *** GlitchMr joined
[05:45] *** thou left
[05:49] *** mtk left
[05:49] <GlitchMr> Cannot locate native library 'libmysqlclient.so'

[05:49] <GlitchMr> Interesting :-)

[05:55] <dalek> nqp: 8d5e5ff | moritz++ | / (2 files):

[05:55] <dalek> nqp: bump parrot revision to release

[05:55] <dalek> nqp: review: https://github.com/perl6/nqp/commit/8d5e5ff154

[05:57] *** REPLeffect left
[06:06] *** sisar joined
[06:12] *** REPLeffect joined
[06:14] *** mtk joined
[06:20] *** nodmonkey joined
[06:22] *** mtk left
[06:24] *** nodmonkey left
[06:25] <GlitchMr> Uhmmm... ? doesn't work in SQLite...

[06:25] <GlitchMr> Interesting

[06:25] <GlitchMr>     method do(Str $statement, $attr?, *@bind is copy) {

[06:25] <GlitchMr>         my $sth = self.prepare($statement);

[06:25] <GlitchMr>         $sth.execute(@bind);

[06:25] <GlitchMr> But... shouldn't it have prepared statements

[06:26] *** nodmonkey joined
[06:26] <tadzik> sorear: pong

[06:26] <sorear> tadzik: you're too late, sorry

[06:26] <tadzik> bah

[06:27] <sorear> someone came in with panda/LWP-Simple trouble, but they already gave up and left

[06:27] <tadzik> shame

[06:27] <GlitchMr> http://www.php.net/manual/en/sqlite3stmt.execute.php

[06:27] <tadzik> yeah, seems like it fails tests

[06:27] <GlitchMr> Oh, there are no prepared statements

[06:27] <GlitchMr> like that

[06:30] <GlitchMr> also...

[06:30] <GlitchMr> return ($rows == 0) ?? "0E0" !! $rows;

[06:30] <GlitchMr> Shouldn't it be $rows but True?

[06:41] <GlitchMr> std: /\0/

[06:41] <p6eval> std b842bb3: OUTPUT«ok 00:00 42m␤»

[06:41] <GlitchMr> rakudo: /\0/

[06:41] <p6eval> rakudo 097361: OUTPUT«===SORRY!===␤Unrecognized backslash sequence at line 2, near "/"␤»

[06:46] <GlitchMr> https://gist.github.com/3748052

[06:46] <GlitchMr> I'm almost sure I'm bored

[06:46] *** nodmonkey left
[06:47] <sorear> n: /\0/

[06:47] <p6eval> niecza v21-15-gf226bf6:  ( no output )

[06:48] <sorear> rn: say "\0".ord

[06:48] <p6eval> rakudo 097361, niecza v21-15-gf226bf6: OUTPUT«0␤»

[06:48] <sorear> rn: eval "/\\\0/"

[06:48] <p6eval> rakudo 097361, niecza v21-15-gf226bf6:  ( no output )

[06:48] <sorear> GlitchMr: rakudobug

[06:50] <sorear> eval eval "/\\\0/"

[06:50] <buubot_backup> sorear: No output.

[06:51] <sorear> eval eval "/\0/"

[06:51] <buubot_backup> sorear: No output.

[06:51] <sorear> buubot_backup:  eval "/\0/"

[06:51] <buubot_backup> sorear: /\0/

[06:51] <sorear> buubot_backup:  eval "/\\\0/"

[06:51] <buubot_backup> sorear: /\\0/

[06:51] <sorear> buubot_backup: ref eval "/\\\0/"

[06:51] <buubot_backup> sorear: Couldn't match input.

[06:51] <sorear> buubot_backup: eval eval "/\\\0/"

[06:51] <buubot_backup> sorear: No output.

[06:52] *** fhelmberger joined
[06:55] <GlitchMr> Type check failed in assignment to '$!orm'; expected 'ORM' but got 'MiniDBI::ORM'

[06:55] <GlitchMr> has MiniDBI::ORM $.orm;

[06:55] <GlitchMr> Hmmm... interesting

[06:58] *** kurahaupo left
[07:00] *** yarp left
[07:02] *** cognominal left
[07:04] *** wtw left
[07:05] <GlitchMr> > $db.table('a').insert(:cake<b>)

[07:05] <GlitchMr> INSERT INTO `a` (`cake`) VALUES ('b')

[07:05] *** GlitchMr left
[07:07] *** brrt joined
[07:08] *** cognominal joined
[07:13] <cosimo> sorear: pong

[07:22] *** flightrecorder joined
[07:23] *** FROGGS joined
[07:29] *** nebuchad` is now known as nebuchadnezzar

[07:34] *** zipf joined
[07:40] *** ServerSage joined
[07:42] *** zipf left
[07:46] *** _sri joined
[07:47] *** jferrero joined
[07:54] *** Tene joined
[07:54] *** lestrrat joined
[07:54] *** Ulti joined
[07:54] *** stephaaan joined
[07:54] <stephaaan> hi :) 

[07:55] <moritz> hello

[07:55] <masak> mornin'

[07:56] <stephaaan> just a probably noobish question - http://pastie.org/4752245 - lets say, connector is a variable - how do I change {connector}? {$connector} wont work :/ 

[07:57] <moritz> stephaaan: that looks like Perl 5 code, but #perl6 is, as the name implies, about Perl 6

[07:57] <stephaaan> uhm...well :D

[07:57] *** stephaaan left
[07:58] <moritz> too late to him somewhere else

[07:59] <moritz> *to point him

[07:59] * moritz still wonders why people simply ignore the 6 in #perl6

[07:59] *** fragginaut joined
[08:00] <fragginaut> sorry, got kicked :) 

[08:00] <fragginaut> < stephaaan

[08:02] <moritz> fragginaut: you could try #perl-help on irc.perl.org

[08:02] <moritz> fragginaut: there's also a #perl channel here on freenode, but it used to have a bad reputation -- not sure if that's still the case

[08:03] <tadzik> not really, I think

[08:03] <moritz> that's good

[08:03] <tadzik> I sit there these days and it's pretty newbie-friendly I guess

[08:03] <moritz> or maybe I've confused it with #perl on irc.perl.org

[08:03] <tadzik> the word "tutorial" tends to ignite negative emotions sometimes ;)

[08:05] <masak> tadzik: why?

[08:06] *** mdupont_ joined
[08:07] <tadzik> masak: "I found this code in some Perl tutorial on the web" => "OH GODS NO"

[08:07] <tadzik> ;)

[08:13] <masak> aha. yes, well.

[08:13] <sorear> o/ masak 

[08:13] <masak> yo sorear.

[08:13] *** wk_ joined
[08:13] * masak .oO( "it's fine to write baby Perl at first" -- later -- "OH GODS NO" )

[08:14] <sorear> and with that.  sleep&

[08:14] <huf> baby english is fine, babies do it. baby old english is a bit odd, and that's what happens when people follow perl4 tutorials ;)

[08:17] <moritz> well, baby perl is a bit like baby english interpreted by automatic voice recognition on a phone hotline

[08:18] *** Tene left
[08:19] *** Tene joined
[08:19] *** Tene left
[08:19] *** Tene joined
[08:19] *** jerome left
[08:20] *** Psyche^ joined
[08:23] *** Patterner left
[08:23] *** Psyche^ is now known as Patterner

[08:31] *** jerome joined
[08:36] *** leont joined
[08:36] *** sisar left
[08:56] *** mdupont_ left
[09:04] *** Timbus|Away joined
[09:04] *** Timbus left
[09:04] *** Timbus|Away is now known as Timbus

[09:07] *** wamba joined
[09:17] *** kresike joined
[09:17] <kresike> good morning all you happy perl6 people

[09:19] *** Targen left
[09:21] *** wtw joined
[09:23] *** bonsaikitten joined
[09:56] *** fdsafdasfdsaf joined
[10:03] *** hypolin left
[10:05] *** yarp joined
[10:11] *** anuby left
[10:11] *** colomon left
[10:15] *** fgomez left
[10:29] *** cognominal left
[10:29] *** leont left
[10:32] *** brrt left
[10:36] *** mdupont_ joined
[10:42] *** fragginaut left
[10:45] <flussence> DBD::Pg:lang<perl5> is starting to annoy me, now that I want to do interesting stuff with it :(

[10:46] <hoelzro> hi Perl6 folk

[10:46] <moritz> use DBIish; # :-)

[10:47] <moritz> hello hoelzro 

[10:47] <hoelzro> I'm having an issue install Rakudo *

[10:47] <hoelzro> http://pastebin.com/raw.php?i=0DbsP9AZ

[10:47] <hoelzro> I get that error message when running 'make install' with Rakudo * 2012.08

[10:48] <timotimo> why does it use /usr/bin/nqp and not the one in your rakudo star?

[10:48] <hoelzro> because I told it to

[10:53] <hoelzro> I built my own NQP from 2012.08.1

[10:53] <hoelzro> (this is more agreeable with my package manager)

[10:54] <moritz> that's while building the debugger, right?

[10:55] <hoelzro> looks like

[10:55] *** colomon joined
[10:58] *** zipf joined
[11:04] *** fdsafdasfdsaf left
[11:05] *** Su-Shee_ joined
[11:07] *** Su-Shee left
[11:07] *** Su-Shee_ is now known as Su-Shee

[11:08] <hoelzro> any ideas?

[11:09] <moritz> I'd have to look closer at the star build system

[11:09] <moritz> but currently at $work

[11:09] <hoelzro> ok

[11:09] <hoelzro> well, no rush =)

[11:14] *** jaldhar left
[11:17] *** marmay_ joined
[11:18] *** topo left
[11:19] *** topo joined
[11:22] *** dakkar joined
[11:23] <moritz> http://irclog.perlgeek.de/perl6/2012-09-18#i_5997793

[11:24] <moritz> timotimo: the reason that rand() isn't supported is that if rand were a subroutine and not a term, rand + 2 would be parsed as rand(+2)

[11:24] <moritz> I'm not sure that's a convincing argument, but at least there is a reason

[11:28] *** mtk joined
[11:39] *** crab2313 joined
[11:41] *** brrt joined
[11:42] <flussence> plus, what would you expect rand(2) to return? an Int? Num? 0..2 or 0..^2?

[11:44] *** sudokode joined
[11:44] <masak> I've never been a fan of rand(2). as flussence++ points out, there isn't an obvious connection between the positional argument and the return value.

[11:47] *** flightrecorder left
[11:47] *** FROGGS left
[11:47] *** flightrecorder joined
[11:47] *** FROGGS joined
[11:52] *** zipf left
[11:53] *** pmurias joined
[11:53] *** crab2313 left
[12:00] <pmurias> jnthn: I have started writing a simple QAST dumper: http://pastie.org/4753127

[12:01] <mst> masak: usually I'd rather have pick_one_at_random_of(0..2) or something

[12:01] <moritz> nr: say (0..2).pick for ^5

[12:01] <p6eval> niecza v21-15-gf226bf6: OUTPUT«0␤1␤2␤1␤1␤»

[12:01] <p6eval> ..rakudo 097361: OUTPUT«1␤1␤2␤1␤0␤»

[12:02] <colomon> rakudo: say (0..2).rand for ^5

[12:02] <p6eval> rakudo 097361: OUTPUT«0.254855078400407␤1.62576730786023␤0.0954455466693709␤2.57372621380713␤1.8109134963372␤»

[12:02] *** cognominal joined
[12:07] <flussence> r: (^5).pick xx 5

[12:07] <p6eval> rakudo 097361:  ( no output )

[12:07] <flussence> r: say (^5).pick xx 5

[12:07] <p6eval> rakudo 097361: OUTPUT«3 3 1 0 3␤»

[12:08] <flussence> that ^/. precedence feels a bit weird

[12:10] *** zipf joined
[12:13] <masak> mst: right.

[12:22] <Su-Shee> masak: are you still hacking javascript stuff?

[12:22] <masak> Su-Shee: yeah.

[12:23] <Su-Shee> masak: in case you need more gui -> jquery ui just convinced me with _1_ (one) line of code (instead of 150 if I'd done it myself.. :) 

[12:24] <Su-Shee> masak: 1 line for a complex gui feature is .. less isn't possible. ;)

[12:25] *** gootle left
[12:29] *** wk_ left
[12:41] <masak> Su-Shee: I like the idea of jQuery UI, but I've had mixed success with it so far.

[12:41] <masak> Su-Shee: submitted my first bug report to it five minutes after picking it up ;)

[12:42] <Su-Shee> masak: uh, ah :) well I just used "sortable" which gives me in one line of code "drag item elsewhere, push other items automatically aside, drop item there" to re-arrange items. it also snaps automatically back and such. _one_ line of code. 

[12:42] <masak> Su-Shee: the direction I'm persuing right now isn't "more GUI", but rather "more structure to build on". knockout.js seems a fine choice for that.

[12:43] <Su-Shee> masak: I have to refactor a complex gui.. think excel/table/arrangements of items.. 

[12:43] <masak> Su-Shee: yeah. the impressive thing about jQuery UI is how much is already there.

[12:44] <Su-Shee> masak: it's not even really "G" of "UI" but just behavior...

[12:45] <Su-Shee> it's fascinating how creative js developers have gotten ever since it took off again and how much the language still allows to cleanup things and make nicer libs.

[12:46] *** pmurias left
[12:46] *** orafu left
[12:46] *** snarkyboojum left
[12:46] *** cart left
[12:46] *** rurban left
[12:47] <mst> masak: somewhat

[12:47] <mst> masak: I was planning to look at angularjs

[12:48] <mst> masak: it seemed to fit my brain and audrey seems to like it

[12:48] *** wamba left
[12:48] *** dayangkun joined
[12:48] *** cart joined
[12:49] <masak> mst: I've looked at it briefly too. it's in the same problem space as knockout.js, for sure.

[12:50] <masak> mst: currently I'm enamoured with knockout.js's dependency handling. it's not often nowadays that I feel I learn something both new and fundamental, but knockout's algo for dependency handling qualifies.

[12:50] *** snarkyboojum joined
[12:50] *** orafu joined
[12:50] <mst> got a URL for that?

[12:50] <masak> yes, hold on.

[12:50] *** pmurias joined
[12:51] <masak> http://knockoutjs.com/documentation/computedObservables.html -- heading "How Dependency Tracking Works"

[12:53] *** benabik joined
[12:54] <Su-Shee> ah, you mentioned that on twitter a couple of days ago, didn't you?

[12:56] *** gongyiliao joined
[12:59] <masak> I did.

[13:00] <masak> I think the idea transcends knockout.js and is usable in a lot of places where observers are involved.

[13:01] *** rurban joined
[13:01] <Su-Shee> I like observers anyways. :)

[13:01] <Su-Shee> not just in Fringe. ;)

[13:03] <FROGGS> can somebody please help me? Inline.pm and NativeCall.pm are exporting trait_mod <is>, and when I run for example: perl6 -MInline -MNativeCall -e '1'

[13:03] <FROGGS> I get: Cannot import symbol '&trait_mod:<is>' from package 'NativeCall', since it already exists in the lexpad

[13:03] * masak learns about https://en.wikipedia.org/wiki/Fringe_(TV_series)

[13:04] <tadzik> FROGGS: did you declare them as multi?

[13:04] <FROGGS> right

[13:04] <tadzik> dunno

[13:04] <FROGGS> identically to traits.pm and NativeCall.pm

[13:04] <masak> Su-Shee: have you read https://en.wikipedia.org/wiki/They're_Made_Out_of_Meat ?

[13:04] <masak> seeing the Observers reminded me of that :)

[13:04] *** wamba joined
[13:05] <FROGGS> I dont know if thats that diamond-inclusion-thingy or not, I just dont know what to do

[13:05] <masak> FROGGS: feels like a bug to me.

[13:06] <FROGGS> :/

[13:06] * masak tries to reproduce it with non-trait_mod multis.

[13:06] <Su-Shee> masak: no, I didn't. 

[13:06] <masak> Su-Shee: it's quite a short read (linked from the Wikipedia article). recommended.

[13:08] <Su-Shee> masak: "uh" "entirely written in dialogue" .. That's a literature style I absolutely hate to read...:(

[13:09] *** PacoAir joined
[13:12] <masak> sorry to hear that. I just re-read it, and it's as good as I remembered it.

[13:12] *** zipf left
[13:14] <benabik> There are a couple films of it on youtube.

[13:14] <benabik> Dialog is much easier to listen/watch.

[13:14] <masak> oh, I forgot to mention that.

[13:15] <masak> yeah. the ones I've seen are (1) a surreal version from the 80's involving, I think, a fez, and (2) a black-and-white newer one which had quite a bit of ambience to it.

[13:16] <masak> I think I'm fond of literature that highlights our cultural chauvinism in various ways.

[13:16] <masak> or perhaps "bias" is more accurate.

[13:16] *** cognominal left
[13:17] <benabik> The one I'm watching is just lights in space.

[13:17] *** jaldhar joined
[13:18] * masak .oO( aren't we all )

[13:20] <benabik> o/~ We Are All Made of Stars o/~

[13:20] *** kurahaupo joined
[13:22] *** bluescreen10 joined
[13:24] <[Coke]> thanks for getting that auto tune stuck in my head!

[13:24] * [Coke] . o O (grumble)

[13:26] <PerlJam> [Coke]: Here, this will get it unstuck http://www.youtube.com/watch?v=kfVsfOSbJY0   ;>

[13:30] *** jaldhar left
[13:31] *** jaldhar joined
[13:38] *** kaare_ joined
[13:43] <[Coke]> if you're having fencepost errors I feel bad for you son -- I got 99 problems but somehow solved 101. (found in today's xkcd)

[13:46] <pmurias> mst: having used angularjs for 2 (not very big apps), I rather like it, but it seems to impose a lot of structure and requires more thought to use then hacking things together with jquery

[13:47] *** sftp left
[13:47] *** sftp joined
[13:49] *** skids joined
[13:53] *** thou joined
[13:57] *** stopbit joined
[14:00] *** flightrecorder left
[14:00] *** fgomez joined
[14:01] *** FROGGS left
[14:01] *** JimmyZ joined
[14:01] *** flightrecorder joined
[14:06] *** fgomez left
[14:14] *** FROGGS joined
[14:15] *** zipf joined
[14:18] *** FROGGS left
[14:18] *** flightre1 joined
[14:19] *** FROGGS joined
[14:19] *** flightrecorder left
[14:25] <mst> pmurias: I tend to like libraries that require structured thinking

[14:30] <sirrobert> What's that good operator to turn two arrays into a hash (arr1 is keys, arr2 is values) ?

[14:30] <masak> sirrobert: Z=>

[14:30] <sirrobert> thanks =)

[14:30] <sirrobert> What does the Z mean?

[14:30] <flussence> r: my @a1 = 'a'..'z'; my @a2 = 0..*; say %(@a1 Z=> @a2);

[14:30] *** GlitchMr joined
[14:30] <p6eval> rakudo 097361: OUTPUT«("a" => 0, "b" => 1, "c" => 2, "d" => 3, "e" => 4, "f" => 5, "g" => 6, "h" => 7, "i" => 8, "j" => 9, "k" => 10, "l" => 11, "m" => 12, "n" => 13, "o" => 14, "p" => 15, "q" => 16, "r" => 17, "s" => 18, "t" => 19, "u" => 20, "v" => 21, "w" => 22, "x" => 23, "y" => 24,…

[14:31] <masak> sirrobert: "zipwith"

[14:31] <sirrobert> oh, I'll remember that (I hope =)

[14:31] <sirrobert> thanks, both

[14:31] <masak> r: .say for 100, 200, 300 Z+ 3, 2, 1

[14:31] <p6eval> rakudo 097361: OUTPUT«103␤202␤301␤»

[14:32] <flussence> .oO( ...at $dayjob the structure used for libraries is usually a heap )

[14:32] <pmichaud> even plain 'Z' works:

[14:32] <sirrobert> Z makes a new array?

[14:32] <pmichaud> r: my @a1 = 'a'..'z';  my @a2 = 0..*;  say %(@a1 Z @a2)

[14:32] <p6eval> rakudo 097361: OUTPUT«("a" => 0, "b" => 1, "c" => 2, "d" => 3, "e" => 4, "f" => 5, "g" => 6, "h" => 7, "i" => 8, "j" => 9, "k" => 10, "l" => 11, "m" => 12, "n" => 13, "o" => 14, "p" => 15, "q" => 16, "r" => 17, "s" => 18, "t" => 19, "u" => 20, "v" => 21, "w" => 22, "x" => 23, "y" => 24,…

[14:32] *** dayangkun left
[14:32] <sirrobert> ohh

[14:32] <sirrobert> you hashed explicitly

[14:32] <pmichaud> Z creates a list consisting of the elements from each list interleaved

[14:33] <sirrobert> say (1, 2, 3) Z=> (<a b c>);

[14:33] <sirrobert> r: say (1, 2, 3) Z=> (<a b c>);

[14:33] <p6eval> rakudo 097361: OUTPUT«1 a 2     b 3     c␤»

[14:33] <sirrobert> r: say %((1, 2, 3) Z=> (<a b c>));

[14:33] <p6eval> rakudo 097361: OUTPUT«("1" => "a", "2" => "b", "3" => "c").hash␤»

[14:33] <sirrobert> ok, thanks

[14:33] *** dayangkun joined
[14:33] <sirrobert> so Z=> pairs them

[14:33] <sirrobert> but it's a list of pairs, rather than a hash

[14:33] <pmichaud> Z produces lists... one has to explicitly coerce to a hash for either Z=> or Z

[14:33] <GlitchMr> (1, 2, 3, 4 Z~ 5, 6, 7, 8).perl.say

[14:33] <pmichaud> sirrobert: exactly right.

[14:33] <GlitchMr> perl6: (1, 2, 3, 4 Z~ 5, 6, 7, 8).perl.say

[14:33] <p6eval> rakudo 097361, niecza v21-15-gf226bf6: OUTPUT«("15", "26", "37", "48").list␤»

[14:33] <sirrobert> pmichaud, ok, great

[14:34] <GlitchMr> perl6: (1, 2, 3, 4 »+« 5, 6, 7, 8).perl.say

[14:34] <p6eval> niecza v21-15-gf226bf6: OUTPUT«(1, 2, 3, 9, 6, 7, 8)␤»

[14:34] <p6eval> ..rakudo 097361: OUTPUT«(1, 2, 3, (9,).list, 6, 7, 8)␤»

[14:34] <GlitchMr> perl6: ((1, 2, 3, 4) »+« (5, 6, 7, 8)).perl.say

[14:34] <p6eval> niecza v21-15-gf226bf6: OUTPUT«[6, 8, 10, 12].list␤»

[14:34] <p6eval> ..rakudo 097361: OUTPUT«(6, 8, 10, 12).list␤»

[14:34] <GlitchMr> Precedence :-)

[14:34] *** dayangkun left
[14:35] *** dayangkun joined
[14:35] <masak> GlitchMr: right. the X and Z operators are low-precedence. the »« operators aren't.

[14:37] <sirrobert> So is Z a "metaoperator?"

[14:38] <masak> aye.

[14:38] <sirrobert> I guess it's both

[14:38] <sirrobert> Z by itself is an operator, but it can take an op to go meta.

[14:38] <colomon> just like X

[14:38] <sirrobert> What's X? =)

[14:38] <GlitchMr> Many operators can take other operator in name

[14:38] <moritz> cross

[14:38] <GlitchMr> Well, even = in C did that

[14:38] <masak> sirrobert: well, infix:<Z> is just sugar for infix:<Z,>

[14:38] <sirrobert> hmmm

[14:38] <sirrobert> ok, I will have to play with that before my head asplode.

[14:39] <moritz> http://doc.perl6.org/language/operators#infix+X

[14:39] <moritz> http://doc.perl6.org/language/operators#infix+Z

[14:39] <GlitchMr> What is so difficult about that. Z+ is similar to += in being meta operator

[14:40] <masak> indeed.

[14:40] <sirrobert> added two pages to my p6 blog (http://6ing.org):  "Wish List" (stuff that would be super helpful to have available) and "Butter" (personal favorite features already available).

[14:40] <sirrobert> adding "Butter" now, actually

[14:40] <masak> all of the metaoperator stuff can be seen as a generalization of += et al.

[14:40] <masak> sirrobert++

[14:41] <sirrobert> GlitchMr: It's not difficult, it's powerful =)

[14:41] <pmichaud> wow, five tweets from TimToady++ about the 47% .  :-)

[14:42] <GlitchMr> Almost every language which inherited from C has operators like +=

[14:42] <GlitchMr> That includes Python

[14:42] <GlitchMr> (except in Python assignment is statement)

[14:43] *** zipf left
[14:45] <sirrobert> moritz:  typo in http://doc.perl6.org/language/operators#infix+X (I think)

[14:46] <sirrobert> the infix definition says <Z> instead of <X>

[14:46] *** jaldhar left
[14:49] *** dayangkun left
[14:50] <GlitchMr> What happened to dalek?

[14:50] *** dayangkun joined
[14:50] * masak .oO( the Doctor )

[14:50] <tadzik> :D

[14:50] <GlitchMr> Also, wow, I wanted to make identical commit to your, masak. But you were faster

[14:51] <GlitchMr> So,  ! [rejected]        master -> master (non-fast-forward) happened

[14:51] <GlitchMr> I've done git pull --rebase

[14:51] <FROGGS> masak: about my issue, there is a "# XXX TODO: Merge handling." in World.pm#L260 :o)

[14:51] <GlitchMr> And my commit mysteriously disappeared from logs

[14:51] <GlitchMr> Probably GitHub has noticed it's identical

[14:51] <moritz> not github

[14:51] <GlitchMr> Git*

[14:51] <moritz> git

[14:51] <GlitchMr> lol

[14:52] <moritz> the --rebase throws away identical commits

[14:52] <masak> GlitchMr: I didn't make that commit now. I must've made it ages ago.

[14:53] <masak> FROGGS: d'oh!

[14:53] <GlitchMr> Date:   Wed Sep 19 16:48:39 2012 +0200

[14:53] <GlitchMr>     fix typo, sirrobert++

[14:53] <GlitchMr> But I don't see it on GitHub... I'm confused

[14:54] <GlitchMr> (also, yes, I've posted it so sirrobert would get positive karma - dalek wasn't there so sirrobert would get karma)

[14:54] <GlitchMr> "Page did not respond in a timely fashion."

[14:54] *** raiph joined
[14:54] <GlitchMr> oh, ok

[14:58] <raiph> GlitchMr++ # Perl 6 changes - 2012W37

[14:58] <phenny> raiph: 18 Sep 12:42Z <[Coke]> ask raiph if I should add http://blogs.perl.org/users/perl_6_reports/ to planetsi

[14:59] <GlitchMr> https://status.github.com/ - git is red

[14:59] <dalek> doc: 162131a | moritz++ | lib/operators.pod:

[14:59] <dalek> doc: fix typo, sirrobert++

[14:59] <dalek> doc: review: https://github.com/perl6/doc/commit/162131ac4d

[14:59] <GlitchMr> That sounds... oh wait

[15:01] <GlitchMr> Next Perl 6 changes report will be on 23.09.2012

[15:04] *** benabik_ joined
[15:04] <kresike> bye folks

[15:04] *** kresike left
[15:05] *** benabik left
[15:05] *** benabik_ is now known as benabik

[15:06] <sirrobert> r: my @arr; @arr.push(%(a => 1, b => 2));  say @arr.perl;

[15:06] <p6eval> rakudo 097361: OUTPUT«Array.new("a" => 1, "b" => 2)␤»

[15:06] <sirrobert> I expected that to give me an array with one element that was a hash

[15:06] <sirrobert> what did I do wrong?

[15:07] <sirrobert> or maybe:  how should I think about that?

[15:07] <masak> push expects a list of things. if it finds a hash, it listifies the hash.

[15:08] <sirrobert> ok, how do I get it not to listify things?

[15:08] <sirrobert> if I want an array of hashes

[15:08] <masak> r: my @a; @a.push({ a => 1, b => 2}); say @a.perl

[15:08] <p6eval> rakudo 097361: OUTPUT«Array.new({"a" => 1, "b" => 2})␤»

[15:08] <sirrobert> ok

[15:08] <sirrobert> so what I really have is:

[15:09] <sirrobert> r: my @a; @a.push(%((1,2,3) Z=> (<a b c>))); say @a.perl;

[15:09] <p6eval> rakudo 097361: OUTPUT«Array.new("1" => "a", "2" => "b", "3" => "c")␤»

[15:09] <sirrobert> is the "right" solution here to create the hash separately?  but it still gets expanded...

[15:09] <sirrobert> I think

[15:09] <masak> yeah.

[15:09] <masak> r: my @a; my %h = (1,2,3) Z=> (<a b c>); @a.push(%h); say @a.perl

[15:09] <p6eval> rakudo 097361: OUTPUT«Array.new("1" => "a", "2" => "b", "3" => "c")␤»

[15:09] <masak> indeed.

[15:10] <masak> r: my @a; my %h = (1,2,3) Z=> (<a b c>); @a.push({%h}); say @a.perl

[15:10] <p6eval> rakudo 097361: OUTPUT«Array.new({"1" => "a", "2" => "b", "3" => "c"})␤»

[15:10] <sirrobert> ohh.. weird

[15:10] <sirrobert> ok, I can live with that =)

[15:11] <GlitchMr> I would like have report for that commit - https://github.com/rakudo/rakudo/commit/ec413efe4fad4bbc03d203eeba6018e957ea5615

[15:11] <GlitchMr> Why it was clobbering GLOBAL before?

[15:11] <pmichaud> r:  my @a;  @a.push({ (1,2,3) Z <a b c> });  say @a.perl

[15:11] <p6eval> rakudo 097361: OUTPUT«Array.new(Block.new())␤»

[15:11] <moritz> sirrobert: what's weird about it?

[15:11] <GlitchMr> (and when?)

[15:11] <sirrobert> the {%} seems redundant

[15:11] <moritz> well, the {} makes an hash-in-an-item

[15:11] <sirrobert> moritz: a workaround for the listification magic of push

[15:11] <moritz> you can also say %h.item

[15:12] <sirrobert> ok, that's a good paradigm for me to adopt for it

[15:12] <sirrobert> I didn't previously have a concept of 'item'

[15:12] <yarp> r: (<1 2 3> Z* <4 5 6>).say;

[15:12] <p6eval> rakudo 097361: OUTPUT«4 10 18␤»

[15:13] <yarp> r: [+](<1 2 3> Z* <4 5 6>).say;

[15:13] <p6eval> rakudo 097361: OUTPUT«32␤»

[15:13] <sirrobert> huh... push({%...}) interprets it as a hash but push: {%...} interprets it as a block

[15:14] <moritz> that's weird

[15:14] <sirrobert> verifying now ...

[15:14] <moritz> r: my @h; @h.push: {%*ENV}; say @h[0].WHAT

[15:14] <p6eval> rakudo 097361: OUTPUT«Block()␤»

[15:14] <GlitchMr> Oh, I cannot read - it was 'require'

[15:15] <moritz> r: my @h; @h.push({%*ENV}); say @h[0].WHAT

[15:15] <p6eval> rakudo 097361: OUTPUT«Block()␤»

[15:15] <moritz> sirrobert: seems to be a block either way :(

[15:15] <moritz> r: my %a; my @h; @h.push({%a}); say @h[0].WHAT

[15:15] <p6eval> rakudo 097361: OUTPUT«Hash()␤»

[15:15] <moritz> r: my %a; my @h; @h.push: {%a}; say @h[0].WHAT

[15:15] <p6eval> rakudo 097361: OUTPUT«Hash()␤»

[15:15] <moritz> erm, what?

[15:15] <sirrobert> moritz: erm, indeed =)

[15:16] <moritz> %*ENV makes it a block, %a a hash?

[15:16] * moritz smeells a rakudobug

[15:16] *** fhelmberger left
[15:17] *** marmay_ left
[15:18] <sirrobert> r: my $h = {%(<a b>) Z=> (1,2)}; say $h.WHAT;

[15:18] <p6eval> rakudo 097361: OUTPUT«Block()␤»

[15:19] <masak> moritz: that feels buggish, yes.

[15:19] <masak> moritz: care to report it?

[15:19] <sirrobert> sure

[15:19] <yarp> r: my Num @ar = <3 4 5>; push @ar, [+]@ar; @ar.say

[15:19] <p6eval> rakudo 097361: OUTPUT«===SORRY!===␤Confused␤at /tmp/Yok24T4aEW:1␤»

[15:19] <sirrobert> if I copy/paste this discussion is that enough?  I don't quite know how to describe it.

[15:19] <moritz> yes, it's enough

[15:20] <sirrobert> ok, one sec

[15:21] <raiph> "if I copy/paste this discussion is that enough?  I don't quite know how to describe it." lol (or is that loh?)

[15:21] <yarp> nr: my Num @ar = <3 4 5>; @ar[3] = [+] @ar; @ar.say;

[15:22] <p6eval> rakudo 097361: OUTPUT«Type check failed in assignment to '$v'; expected 'Num' but got 'Int'␤  in block  at /tmp/UI1lugx09V:1␤␤»

[15:22] <p6eval> ..niecza v21-15-gf226bf6: OUTPUT«3 4 5 12␤»

[15:22] * moritz doesn't get the funny part -- we do that all the time in bug reports

[15:22] <sirrobert> posted

[15:22] <moritz> r: my Num @ar = <3 4 5>

[15:22] <p6eval> rakudo 097361:  ( no output )

[15:22] <masak> sirrobert++

[15:22] <moritz> masak: another bug report, it seems :-)

[15:22] <yarp> So what is the Num used for?

[15:22] <diakopter> I just submitted a new bug for nqp; it's kindof odd

[15:22] <moritz> (the my Num @ar)

[15:22] <diakopter> https://github.com/perl6/nqp/issues/55

[15:23] <moritz> yarp: whatever you usually use floating-point numbers for

[15:23] <yarp> nr: my Num @ar = <3 4 5>; @ar[3] = [+] @ar; @ar.say;

[15:23] <p6eval> rakudo 097361: OUTPUT«Type check failed in assignment to '$v'; expected 'Num' but got 'Int'␤  in block  at /tmp/oV1hsT_L7A:1␤␤»

[15:23] <p6eval> ..niecza v21-15-gf226bf6: OUTPUT«3 4 5 12␤»

[15:23] <moritz> nqp: say('¢'~"\n");

[15:23] <p6eval> nqp: OUTPUT«Invalid character in ASCII string␤»

[15:23] <yarp> Look, It didn't work;

[15:24] <moritz> yarp: yes, because you typed it Num, but didn't give it a Num

[15:24] <yarp> [+] @ar is not a number ???

[15:25] <moritz> it's a number, but not Num

[15:25] <diakopter> moritz: it started happening in the last week

[15:25] <diakopter> wasn't happening beofre

[15:25] <moritz> yarp: http://doc.perl6.org/type/Num

[15:26] <yarp> 3 4 5 is Num , But sum them is not Num, so the Num maybe useless.

[15:26] *** cosimo joined
[15:26] <moritz> Num isn't useless. It's very useful for things you're not thinking of right now

[15:26] <moritz> but it's a bug that rakudo doesn't complain about the list assignment already

[15:27] *** raiph left
[15:30] <GlitchMr> If you want numeric values, see Numeric

[15:30] <GlitchMr> Also, <3 4 5> are strings

[15:30] *** sqirrel joined
[15:31] <GlitchMr> I think that there is :val modifier for q, but it isn't yet implemented anywhere

[15:31] *** mucker joined
[15:31] <yarp> Rakudo didn't complain.

[15:31] <GlitchMr> std: qw:val<3 4 5>

[15:31] <p6eval> std b842bb3: OUTPUT«===SORRY!===␤Unrecognized quote modifier: val at /tmp/Kbu0SSvFHh line 1:␤------> qw⏏:val<3 4 5>␤Check failed␤FAILED 00:00 41m␤»

[15:31] <GlitchMr> std: qw:v<3 4 5>

[15:31] <p6eval> std b842bb3: OUTPUT«===SORRY!===␤Unrecognized quote modifier: v at /tmp/5KcKblIyLU line 1:␤------> qw⏏:v<3 4 5>␤Check failed␤FAILED 00:00 41m␤»

[15:32] <GlitchMr> http://perlcabal.org/syn/S02.html#The_%3Aval_modifier

[15:32] <GlitchMr> Uhmmm...

[15:32] <masak> n: say <3 4 5>.perl

[15:32] <p6eval> niecza v21-15-gf226bf6: OUTPUT«(val("3"), val("4"), val("5"))␤»

[15:32] <masak> GlitchMr: Niecza implements val()

[15:32] <yarp> I see.

[15:33] <yarp> nr: my Num @ar = （3， 4， 5）; @ar[3] = [+] @ar; @ar.say;

[15:33] <p6eval> niecza v21-15-gf226bf6: OUTPUT«===SORRY!===␤␤Malformed initializer at /tmp/jo4Jz0Rr2J line 1:␤------> my Num @ar ⏏= （3， 4， 5）; @ar[3] = [+] @ar; @ar.say;␤␤Parse failed␤␤»

[15:33] <p6eval> ..rakudo 097361: OUTPUT«===SORRY!===␤Malformed initializer␤at /tmp/hEOiRhcfsQ:1␤»

[15:33] <yarp> nr: my Num @ar = (3， 4， 5); @ar[3] = [+] @ar; @ar.say;

[15:33] <p6eval> niecza v21-15-gf226bf6: OUTPUT«===SORRY!===␤␤Confused at /tmp/U3I78ztYpL line 1:␤------> my Num @ar = (3⏏， 4， 5); @ar[3] = [+] @ar; @ar.say;␤␤Parse failed␤␤»

[15:33] <p6eval> ..rakudo 097361: OUTPUT«===SORRY!===␤Malformed initializer␤at /tmp/06dug8M__8:1␤»

[15:34] <GlitchMr> masak: yes, but not :val modifier

[15:34] <moritz> .u ，

[15:34] <phenny> U+FF0C FULLWIDTH COMMA (，)

[15:34] <moritz> yarp: it'd help to use normal commas

[15:34] <yarp> nr: my Num @ar = (3, 4, 5); @ar[3] = [+] @ar; @ar.say;

[15:34] <p6eval> rakudo 097361: OUTPUT«Type check failed in assignment to '$v'; expected 'Num' but got 'Int'␤  in block  at /tmp/ObinFSoXTw:1␤␤»

[15:34] <p6eval> ..niecza v21-15-gf226bf6: OUTPUT«3 4 5 12␤»

[15:35] * moritz wonders how much longer yarp wants to beat a dead horse

[15:36] <dalek> glitchmr.github.com/perl6-changes: d721657 | GlitchMr++ | _posts/2012-09-23-perl-6-changes-2012W38.md:

[15:36] <dalek> glitchmr.github.com/perl6-changes: Placeholder Perl 6 changes for 2012W38 page

[15:36] <dalek> glitchmr.github.com/perl6-changes: 

[15:36] <dalek> glitchmr.github.com/perl6-changes: Currently, not much was mentioned on this page, but I've made this

[15:36] <dalek> glitchmr.github.com/perl6-changes: branch so you can read it and report any bugs with this list if you

[15:36] <dalek> glitchmr.github.com/perl6-changes: will find any (like spelling errors or factual errors).

[15:36] <dalek> glitchmr.github.com/perl6-changes: review: https://github.com/GlitchMr/glitchmr.github.com/commit/d7216570f7

[15:36] <GlitchMr> wow, that's long repository name

[15:36] <masak> GlitchMr: right, but saying <3 4 5> are strings is only half the truth.

[15:36] <GlitchMr> Possibly <3 4 5>».Int would work

[15:36] <GlitchMr> (putting ugliness of that aside)

[15:37] <GlitchMr> Or simply 3, 4, 5

[15:38] *** dayangkun left
[15:38] <GlitchMr> Previously, I have published page at end of week. This time I want to do that earlier, except without actually publishing it.

[15:38] <masak> a "draft".

[15:38] <GlitchMr> Yes

[15:39] <GlitchMr> And because git is easy, merging it will be like 'git merge perl6-changes'

[15:39] <moritz> r: my Int @a = 'ab', 'cd';

[15:39] <p6eval> rakudo 097361:  ( no output )

[15:39] <GlitchMr> And I can reuse this branch after merging :-)

[15:39] * moritz submits rakudobug

[15:39] <GlitchMr> Strings are new Integers

[15:40] <yarp> I try in my box, Can't work also.

[15:40] <GlitchMr> r: my Int = 'ab' # just testing, I don't expect success

[15:40] <p6eval> rakudo 097361: OUTPUT«===SORRY!===␤Malformed my␤at /tmp/ztPMW9ME7P:1␤»

[15:40] <GlitchMr> r: my Int $a = 'ab' # just testing, I don't expect success

[15:40] <p6eval> rakudo 097361: OUTPUT«Type check failed in assignment to '$a'; expected 'Int' but got 'Str'␤  in block  at /tmp/UHxoe8iKrn:1␤␤»

[15:41] *** kurahaupo left
[15:41] <yarp> No matter 3, 4, 5 or 3.0, 4.0, 5.0

[15:41] <moritz> 3.0 isn't a Num either

[15:41] <masak> yarp: 3.0 is a Rat.

[15:41] <GlitchMr> 3, 3.0, 3e0 and 3 + 0i are all different

[15:41] <masak> yarp: yes, this takes some time to get used to.

[15:41] <GlitchMr> Just noting

[15:41] <masak> yarp: but it's good for you.

[15:42] <moritz> yarp: if you want to to constraint to numbers, use Real or Numeric

[15:42] <moritz> yarp: though typed containers aren't yet very well done, and IMHO not worth the trouble

[15:42] <yarp> Real realy work 

[15:43] <yarp> thanks

[15:44] <GlitchMr> std: say say

[15:44] <p6eval> std b842bb3: OUTPUT«===SORRY!===␤Unsupported use of bare 'say'; in Perl 6 please use .say if you meant $_, or use an explicit invocant or argument at /tmp/znRAnmFya9 line 1:␤------> say say⏏<EOL>␤Check failed␤FAILED 00:00 41m␤»

[15:46] <felher> Folks, I am confused. Nothing new about that, but this time I think I have a good reason! ;) If I do >>>perl6 =(echo 'say $*IN.get;')<<< with a rakudo-built from today it works as I expect it to. I can enter _one line_ and if I press enter the line gets printed and I return to my prompt. In any other piece of code I could think of $*IN.get reads until I give it a ^D and doesn't stop at the first newline. Even

[15:46] <felher> >>>perl6 =(echo '#blar\nsay $*IN.get;')<<< or >>>perl6 =(echo 'say $*IN.get();')<<< read multiple lines until I hit ^D and print them all at once. Any ideas/comments?

[15:46] <felher> I don't think this is a problem with the newest Rakudo. I run into that when trying to get Rakudo working on a new machine :)

[15:48] <masak> felher: no, $*IN.get() reads one line.

[15:48] <masak> that's what it does, by spec.

[15:48] <GlitchMr> Perhaps slurp?

[15:48] <GlitchMr> Without argument it works on STDIN

[15:48] <felher> masak: well, it doesn't to that on this machine. >>>perl6 =(echo 'say $*IN.get();')<< reads multiple lines on this new machine.

[15:48] <GlitchMr> Also, if you need to parse line by line, try lines()

[15:49] <felher> i can press Enter all i want. It reads until i give it a ^D.

[15:50] <GlitchMr> felher: on my machine it gets one line

[15:50] *** raiph joined
[15:50] <felher> GlitchMr: yeah, on my old machine it also gets one line. Not on my new one, though. :)

[15:51] <GlitchMr> And... it was doing that on Rakudo Star 2010.07 too

[15:51] <sirrobert> r: class A { has $.a; has $.b; has $.c; submethod BUILD (:$a) { $!a = $a; } }; say A.new(a=>1,b=>2,c=>3);

[15:51] <p6eval> rakudo 097361: OUTPUT«A.new(a => 1, b => Any, c => Any)␤»

[15:51] <felher> I also tested rakudo/parrot/examples/pir/readline.pir, but this example works as expected.

[15:51] <GlitchMr> Perhaps you're doing something incorrectly

[15:51] <sirrobert> Do I have to explicitly account for all object properties in BUILD?

[15:52] <masak> only if you want them set at object initialization.

[15:52] <sirrobert> why did that not set .b and .c?

[15:52] <sirrobert> or rather:  how do I get that to set .b and .c?

[15:53] *** Targen joined
[15:53] <sirrobert> I want to create an object using the normal constructur, but override how one property is interpreted.

[15:53] <sirrobert> Is that possible, or do I need to write a handler for all ?

[15:53] <geekosaur> just from looking at that I would assume a :$b and :$c etc. added to BUILD...

[15:53] <masak> you need to include in the BUILD signature those attributes you want to initialize.

[15:54] <sirrobert> masak: ok

[15:54] <GlitchMr> https://github.com/rakudo/rakudo/tree/1b6cbf6d51b787556f2b47cd55dbf7b00fde04c0

[15:54] <GlitchMr> The past!

[15:54] <sirrobert> masak: that's a feature I'd be interested in seeing added

[15:54] <masak> r: class A { has $.a; has $.b; has $.c; submethos BUILD (:$!a, :$!b, :$!c) {} }; say A.new( :a(1), :b(2), :c(3) )

[15:54] <p6eval> rakudo 097361: OUTPUT«===SORRY!===␤Variable $!a used where no 'self' is available␤at /tmp/nVOH28xw4_:1␤»

[15:55] <masak> r: class A { has $.a; has $.b; has $.c; submethod BUILD (:$!a, :$!b, :$!c) {} }; say A.new( :a(1), :b(2), :c(3) )

[15:55] <p6eval> rakudo 097361: OUTPUT«A.new(a => 1, b => 2, c => 3)␤»

[15:55] <sirrobert> if I have an object with 40 properties and just want to handle one of them specially, that could get onerous.

[15:55] <sirrobert> (though I can live with it for now =)

[15:56] <sirrobert> maybe I really want a submethod modifier that pre-processes the args list

[15:56] <sirrobert> like a moose "before"

[15:56] <masak> you're not the first to request one.

[15:56] <masak> I think TimToady isn't prepared to make that core. but it could easily be made a module.

[15:56] <felher> GlitchMr: yeah, may very well be that i'm doing something incorrectly. But then probably while installing rakudo. >>>perl6 =(echo 'say $*IN.get();')<<< can not get any shorter :)

[15:56] <sirrobert> masak: hmmm how would you make that a module?

[15:57] <sirrobert> masak:  What's the gist of how that would be done?  (I'd be interested in giving it a try)

[15:57] <masak> sirrobert: you make the module expose some MOP trickery as a grammar modification.

[15:57] *** JimmyZ left
[15:57] <sirrobert> ok, grammar mods

[15:57] <sirrobert> mod to STD?

[15:57] <masak> sirrobert: we have the MOP trickery already, but maybe not the grammar modification machinery.

[15:58] <sirrobert> masak: cool.  I don't really know how the grammar is set up now, but I can check it out.

[15:58] <masak> 'course, if you're willing to accept slightly uglier syntax for a while, then it can still be done, I think.

[15:58] <GlitchMr> felher: also, =?

[15:58] <GlitchMr> Why not `perl6 -e`

[15:58] <sirrobert> masak: I'm willing... but it will help adoption to have fewer of those

[15:58] <GlitchMr> Somehow I wonder how = could work for you

[15:58] <masak> sirrobert: you might want to discuss this with TimToady. he has some fairly specific opinions about it.

[15:59] <sirrobert> sure

[15:59] <sirrobert> masak: sounds good to me (though the beauty of modules is the possibility of ugly ones =)

[15:59] <GlitchMr> I'm waiting for any Perl 6 implementation having access to variables like $~Regex

[16:00] <felher> GlitchMr: =() or <() in ZSH or bash make a new temporary file with where the content of this file is the standard output of the programs within the =() or <() .:)

[16:00] <felher> GlitchMr: but i think bash only has <(...)

[16:00] <GlitchMr> oh, ZSH, I see

[16:01] *** yarp left
[16:01] *** brrt left
[16:01] <masak> felher: maybe you're seeing some weird interaction with zsh, then?

[16:02] <sirrobert> lunch

[16:02] <felher> >>>perl6 -e 'say $*IN.get;'<<< waits for only one line, too, while >>>perl6 -e 'say $*IN.get();'<<< doesn't :)

[16:02] *** wamba left
[16:02] <felher> @ masak and GlitchMr 

[16:03] <felher> To be precise: >>>perl6 -e 'say $*IN.get();'<<< waits for ^D

[16:03] <masak> wut

[16:03] * masak tries

[16:03] <GlitchMr> It doesn't happen on my machine

[16:03] *** wooden left
[16:03] <felher> Yeah, doesn't happen on my old machine. Only my new has this problem :(

[16:03] <GlitchMr> Using ZSH, without ZSH, on my machine, on feather

[16:03] <masak> can't reproduce it here.

[16:04] <GlitchMr> It gets only one line

[16:04] <masak> felher: time to find out what distinguishes your new machine. :)

[16:04] <GlitchMr> Perhaps OS

[16:06] <felher> Same OS: Both gentoo linux. The new machine (it doesn't substitute the old, it just is a new server :) ) is in am VM, though. Well. Im doing some further digging. Maybe i can find anything. :)

[16:06] <masak> felher++

[16:07] <GlitchMr> What happens on perl -e 'print scalar <>'?

[16:07] <GlitchMr> Just wondering

[16:08] <felher> GlitchMr: works as expected. Reads and prints just one line :)

[16:08] <mhasch> felher: your terminal sessions on these machines might have different stty settings

[16:09] *** wooden joined
[16:09] *** wooden left
[16:09] *** wooden joined
[16:10] <felher> mhasch: that would affect other programs, such as perl or cat too, wouldn't it? I only found that problem using rakudo. Event parrot examples/pir/readline.pir works as expected. :)

[16:11] <felher> *Even

[16:11] <GlitchMr> Uhmmm... doesn't cat always read every line?

[16:11] <GlitchMr> You have problem with single lines

[16:12] <felher> GlitchMr: yes, it does, but it prints every lines as soon as i type it.

[16:12] <felher> GlitchMr: if it is buffering of the terminal, then cat should read multiple lines and then print all of them at once, not one a at time.

[16:12] <felher> Maybe cat sets some terminal stuff, though...

[16:12] <GlitchMr> felher: cat doesn't buffer when reading from tty

[16:13] <GlitchMr> Also, I doubt this would work, but could you try perl6 -e'say lines[0]'

[16:14] <felher> GlitchMr: yeah, that doesn't work, too.

[16:14] <mhasch> felher: readline will change settings temporarily, I guess

[16:14] <pmichaud> note that RT #112716 is still open, too.

[16:14] <felher> mhasch: hmm, good point :)

[16:15] *** wooden left
[16:15] *** wooden joined
[16:16] <felher> pmichaud: yeah, i stumbled upon that earlier today, too :)

[16:17] *** benabik_ joined
[16:20] *** benabik left
[16:20] *** benabik_ is now known as benabik

[16:21] <FROGGS> phenny: ask jnthn if I should be able to build my own rakudo star atm, because when all is done I cant use NativeCall: Missing or wrong version of dependency 'src/gen/BOOTSTRAP.pm'

[16:21] <phenny> FROGGS: I'll pass that on when jnthn is around.

[16:24] *** wooden left
[16:26] *** wooden joined
[16:26] *** wooden left
[16:26] *** wooden joined
[16:26] *** Vlavv` joined
[16:30] *** Targen left
[16:33] *** benabik_ joined
[16:33] *** benabik left
[16:33] *** benabik_ is now known as benabik

[16:34] *** wooden left
[16:36] *** wooden joined
[16:39] <GlitchMr> FROGGS: http://glitchmr.github.com/how-i-learned-to-stop-worrying-and-install-the-panda.html

[16:39] <GlitchMr> Have you ran ./rebootstrap.pl?

[16:39] <FROGGS> no, I haven't

[16:39] <GlitchMr> So, run it

[16:40] <FROGGS> should I do this before make install?

[16:40] <GlitchMr> You should rebootstrap.pl after updating Rakudo Perl 6

[16:41] *** MayDaniel joined
[16:46] *** wk_ joined
[16:46] <FROGGS> GlitchMr: looks good, thanks

[16:46] <FROGGS> phenny: tell jnthn that GlitchMr++ told me about rebootstrap.pl

[16:46] <phenny> FROGGS: I'll pass that on when jnthn is around.

[16:49] *** MikeFair_ left
[16:50] *** flightre1 left
[16:52] <jnthn> evening o/

[16:52] <phenny> jnthn: 16:21Z <FROGGS> ask jnthn if I should be able to build my own rakudo star atm, because when all is done I cant use NativeCall: Missing or wrong version of dependency 'src/gen/BOOTSTRAP.pm'

[16:52] <phenny> jnthn: 16:46Z <FROGGS> tell jnthn that GlitchMr++ told me about rebootstrap.pl

[16:52] <FROGGS> hi jnthn

[16:54] <jnthn> yes, you need to refresh any PIR files if you rebuild your Rakudo.

[16:54] <jnthn> Which is what rebootstrap.pl does

[16:54] *** sivoais left
[16:55] <FROGGS> I made a batch now that rebuilds rakudo(star) and runs that rebootstrap too

[16:55] *** sivoais joined
[16:55] <jnthn> nice

[16:56] <FROGGS> I try to figure out what's happening when it "should" merge multi methods

[16:57] *** dakkar left
[17:02] *** benabik_ joined
[17:02] *** benabik left
[17:02] *** benabik_ is now known as benabik

[17:02] *** wamba joined
[17:02] <FROGGS> home &

[17:02] *** FROGGS left
[17:04] *** fhelmberger joined
[17:09] <moritz> r: say {%*ENV}.WHAT

[17:09] <p6eval> rakudo 097361: OUTPUT«Block()␤»

[17:09] <moritz> r: my %a; say {%a}.WHAT

[17:09] <p6eval> rakudo 097361: OUTPUT«Hash()␤»

[17:10] <moritz> r: my %*a; say {%*a}.WHAT

[17:10] <p6eval> rakudo 097361: OUTPUT«Block()␤»

[17:10] <jnthn> Hmm

[17:10] <jnthn> I...suspect that's 'cus of the way contextual lookups are compiled

[17:10] <moritz> yes

[17:11] <moritz> it probably checks .isa(QAST::Var) or so when deciding if it's a hash or block

[17:11] <jnthn> right

[17:11] <jnthn> well, maybe the answer is to figure out how to make contextuals a QAST::Var :)

[17:12] <moritz> or maybe we give QAST nodes a DBA attribute

[17:12] <moritz> and ask if $ast.dba eq 'var' or so

[17:14] *** Chillance joined
[17:14] <jnthn> I'd rather than make QAST nodes bigger ;)

[17:14] *** fhelmberger left
[17:14] <moritz> malformed sentence, but I understand the sentiment

[17:15] <jnthn> English hard is!

[17:17] *** xinming left
[17:18] <masak> they need to do way instain English, who kill theyr sentence.

[17:19] *** xinming joined
[17:20] *** spider-mario joined
[17:23] <sorear> good * #perl6

[17:23] *** benabik left
[17:23] *** leont joined
[17:24] *** benabik joined
[17:25] <masak> sorear! \o/

[17:25] <sorear> masak: did you see the rakudobug GlitchMr found last night?

[17:25] <masak> no.

[17:28] <sorear> nr: /\0/

[17:28] <p6eval> rakudo 097361: OUTPUT«===SORRY!===␤Unrecognized backslash sequence at line 2, near "/"␤»

[17:28] <p6eval> ..niecza v21-15-gf226bf6:  ( no output )

[17:28] <sorear> nr: eval: "/\\\0/" # curiously, this works

[17:28] <p6eval> rakudo 097361: OUTPUT«===SORRY!===␤Confused␤at /tmp/dEL6PxnNQG:1␤»

[17:28] <p6eval> ..niecza v21-15-gf226bf6:  ( no output )

[17:28] <sorear> er, it did last night

[17:28] <sorear> nr: eval "/\\\0/" # curiously, this works

[17:28] <p6eval> rakudo 097361, niecza v21-15-gf226bf6:  ( no output )

[17:28] <sorear> oh, the colon

[17:29] <jnthn> \0 NYI in regexes?

[17:30] <jnthn> wait, what's it meant to do?

[17:30] * jnthn checks S05

[17:30] <jnthn> hm, no mention of it in S05

[17:30] <moritz> std: /\1/

[17:30] <p6eval> std b842bb3: OUTPUT«===SORRY!===␤Unsupported use of the 1-based special form '\1' as a backreference; in Perl 6 please use the 0-based variable '$0' instead at /tmp/Luxsw29wry line 1:␤------> /\1⏏/␤Check failed␤FAILED 00:00 42m␤»

[17:31] <jnthn> std: /\0/

[17:31] <p6eval> std b842bb3: OUTPUT«ok 00:00 42m␤»

[17:31] <jnthn> huh

[17:31] <jnthn> oh...is it meant to be a way to write NULL?

[17:32] <moritz> eval: !! chr(0) =~ /\0/

[17:32] <buubot_backup> moritz: No output.

[17:33] <pmichaud> rakudo:   say "\0" ~~ /\x00/;

[17:33] <p6eval> rakudo 097361: OUTPUT«｢␀｣␤␤»

[17:33] <pmichaud> rakudo:   say "\0" ~~ /\0/;

[17:33] <p6eval> rakudo 097361: OUTPUT«===SORRY!===␤Unrecognized backslash sequence at line 2, near "/;"␤»

[17:34] *** mucker left
[17:34] <jnthn> It's easy to add but...S05 doesn't mention it. Unless we count it under "same as Perl 5 did it"

[17:34] <sorear> STD mentions it, though.

[17:34] <jnthn> Ah.

[17:34] <jnthn> That's probably good enough :)

[17:35] <moritz> it's weird to allow \0 but disallow \1 etc.

[17:35] <sorear> line 5066 in my checkout

[17:36] <sorear> huh, what's this SIGOK thing

[17:36] <pmichaud> std:  /\01/

[17:36] <p6eval> std b842bb3: OUTPUT«===SORRY!===␤Unrecognized regex backslash sequence at /tmp/wSpTlYpS3i line 1:␤------> /\⏏01/␤Check failed␤FAILED 00:00 42m␤»

[17:36] <pmichaud> std: /\1/

[17:36] <p6eval> std b842bb3: OUTPUT«===SORRY!===␤Unsupported use of the 1-based special form '\1' as a backreference; in Perl 6 please use the 0-based variable '$0' instead at /tmp/t5UEiPZwha line 1:␤------> /\1⏏/␤Check failed␤FAILED 00:00 42m␤»

[17:37] *** benabik_ joined
[17:37] *** benabik left
[17:37] *** benabik_ left
[17:37] *** benabik joined
[17:42] <masak> "So we need to get something out there for people to start playing with right away." -- http://linuxdevcenter.com/pub/a/linux/rt/07282000/transcript.html

[17:42] * masak found that an interesting read

[17:42] <masak> "We have to have the process that continues to support people with Perl 5, at the same time giving them a clear migration path to Perl 6, if they want to go that way."

[17:43] <felher> masak++ #found something for me to read on the bus ride home :)

[17:43] <tadzik> Heh, a Pirate Folk-ish band advertises itself on the pirate bay, with free download available

[17:45] <mst> masak: mentioning the 07282000 is the date would've helped

[17:46] <mst> felher: the 07-28-2000 is the date :)

[17:46] *** FROGGS joined
[17:46] *** flightrecorder joined
[17:46] <masak> mst: ah, yes. I forgot to mention that.

[17:47] *** wamba left
[17:47] <mst> not that it isn't interesting, but the context is important

[17:47] <jnthn> r: say words(' foo bar   baz! ', 1).perl

[17:47] <p6eval> rakudo 097361: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&words' called (line 1)␤»

[17:48] <jnthn> r: say ' foo bar   baz! ', 1).words(1).perl

[17:48] <p6eval> rakudo 097361: OUTPUT«===SORRY!===␤Confused␤at /tmp/_58JsZZvrk:1␤»

[17:48] <felher> mst: thnx :)

[17:48] <jnthn> r: say ' foo bar   baz! ', 1.words(1).perl

[17:48] <p6eval> rakudo 097361: OUTPUT«No such method 'words' for invocant of type 'Int'␤  in block  at /tmp/6CeHq9HgFP:1␤␤»

[17:48] <jnthn> ffs

[17:48] <jnthn> r: say ' foo bar   baz! '.words(1).perl

[17:48] <p6eval> rakudo 097361: OUTPUT«("foo",).list␤»

[17:49] *** wk__ joined
[17:53] *** wk_ left
[17:54] <jnthn> huh, I rewrote words to be a load faster and it got twice as slow :/

[17:55] <[Coke]> moritz: IWBNI docs.perl6.org went to doc.perl.org instead of perl6.org

[17:55] * [Coke] slow claps for jnthn.

[17:55] <[Coke]> *clap*

[17:56] <[Coke]> *clap*

[17:56] <GlitchMr> back

[17:56] <GlitchMr> moritz | it's weird to allow \0 but disallow \1 etc.

[17:56] <GlitchMr> Actually, this is what JavaScript does in normal strings in strict mods

[17:56] <GlitchMr> mode*

[17:56] <jnthn> bah, I'm going for dinner :)

[17:56] <jnthn> bbl

[17:56] <sorear> [Coke]: I can't resolve doc.perl.org

[17:56] <diakopter> pmichaud: thx for finding the parrot concat thing

[17:56] <GlitchMr> "\0" is valid in JS strict mode, "\1" isn't

[17:57] <GlitchMr> It's probably only octal escape I can accept :-)

[17:58] <GlitchMr> Also, why unknown domains of .perl6.org lead to perl6.org?

[17:58] <FROGGS> sorear: can't either

[17:58] <GlitchMr> If I use domain like 404pagenotfound.perl6.org, why it would redirect me to perl6.org

[17:59] <mst> wildcard DNS plus a default vhost

[17:59] *** benabik_ joined
[18:00] <GlitchMr> I should make completely pointless tutorial like "Perl 6 for Python programmers"

[18:01] *** benabik left
[18:01] *** benabik_ is now known as benabik

[18:03] <[Coke]> sorear: typo. I meant (obviously?) perl6.org everywhere there.

[18:15] *** wamba joined
[18:16] <sorear> [Coke]: I missed the distinction between docs and doc

[18:18] <sorear> who runs the perl6.org DNS system?

[18:19] <sorear> is Daniel Wright one of our people?

[18:19] <moritz> well, he's a Perl monger

[18:19] <moritz> but not an active 6er

[18:19] <moritz> I've asked him to set up a wildcard DNS so that we can get subdomains without bothering him

[18:20] <sorear> hmm, I knew a Daniel Wright in high school, I wonder if they're the same one

[18:20] <moritz> sorear: he's probably older (unless it's a teacher)

[18:20] <sorear> no, was 1-2y younger than me

[18:21] *** wamba left
[18:21] *** wamba1 joined
[18:24] *** nodmonkey joined
[18:31] *** simcop2387 joined
[18:31] *** simcop2387 left
[18:32] *** lorn joined
[18:33] *** simcop2387 joined
[18:38] *** fgomez joined
[18:51] *** kurahaupo joined
[19:12] <raiph> hi all. anyone around willing to discuss #perl6 summaries?

[19:15] *** bezko joined
[19:15] * moritz 

[19:16] *** bezko left
[19:24] <skids> r: my $a = Buf.new(42); $a.gist.say; $a.perl.say; $a.WHAT.say; # minor annoyance

[19:24] <p6eval> rakudo 097361: OUTPUT«Buf:0x<2a>␤Buf.new()␤Cannot look up attributes in a type object␤  in method list at src/gen/CORE.setting:6941␤  in method gist at src/gen/CORE.setting:6952␤  in sub say at src/gen/CORE.setting:7173␤  in method say at src/gen/CORE.setting:758␤  in block  at /tmp/A1B…

[19:25] <masak> r: say (Buf.new).WHAT

[19:25] <p6eval> rakudo 097361: OUTPUT«Cannot look up attributes in a type object␤  in method list at src/gen/CORE.setting:6941␤  in method gist at src/gen/CORE.setting:6952␤  in sub say at src/gen/CORE.setting:7173␤  in block  at /tmp/f0hRCMAS2i:1␤␤»

[19:27] *** benabik_ joined
[19:28] *** benabik__ joined
[19:28] *** benabik_ left
[19:30] *** zby_home joined
[19:30] *** benabik left
[19:30] *** benabik__ is now known as benabik

[19:31] *** benabik_ joined
[19:31] *** benabik left
[19:31] *** benabik_ is now known as benabik

[19:33] *** stopbit left
[19:34] <diakopter> today's xkcd zoomable http://t.co/yxv7snNM

[19:34] *** stopbit joined
[19:36] <masak> nice.

[19:44] <bbkr> speaking of domains - are projects like perl6/doc and perl6/ecosystems restricted to perl6.org? I'd like to use them to generate content for perl6.com (no specific layout plans yet).

[19:44] <diakopter> are you planning to buy perl6.com from Jason?

[19:45] <diakopter> (Jason Duke)

[19:47] <bbkr> yes

[19:48] <diakopter> how much were you going to offer?

[19:48] <diakopter> 3 years ago he said $2k was much too low

[19:49] <GlitchMr> I'm creating Makefile and editor seems to ignore my settings. For some reason it uses tabs when I've configured it to use spaces.

[19:49] <diakopter> bbkr: "i am always open to offers and when and if a number pops up that piques my interest i'll let you know but at the moment 2k doesn't interest one jot!"

[19:50] <bbkr> I cannot share such details. We worked together for some time and he is tough negotiator :)

[19:50] <diakopter> oh! glad to know you have an in.

[19:51] <diakopter> sounds like he should've taken my offer :P

[19:55] *** Targen joined
[19:55] <bbkr> Currently it is hard to estimate perl6.com value. On one hand we're relatively small community and there is not much financial juice to squeeze from hypothetical traffic on this domain. On the other hand check where perl.com leads to and who I'm competing against here :)

[20:01] <arnsholt> GlitchMr: That's because Makefiles won't work if you use spaces

[20:02] <arnsholt> The lines in a recipe have to be indented by a tab, nothing else will do

[20:02] <arnsholt> If you use spaces you'll get really weird errors

[20:09] *** GlitchMr left
[20:10] *** nodmonkey left
[20:10] *** fgomez left
[20:11] *** bluescreen100 joined
[20:12] <masak> the Makefile format -- broken by design(TM).

[20:13] *** nodmonkey joined
[20:20] <leont> There are a lot of things great about it, but the file format has more holes in it than swiss cheese

[20:23] <jnthn> Swiss cheese tastes pretty OK, though, despite the holes :)

[20:23] <TimToady> r: say (^5).roll(5);   # instead of (^5).pick xx 5

[20:23] <p6eval> rakudo 097361: OUTPUT«0 3 0 4 1␤»

[20:25] <masak> jnthn: the holes are the tastiest part!

[20:25] <TimToady> that's where all the vitimins are

[20:25] <TimToady> *vitamins

[20:26] <FROGGS> but these are actually bacterial farts^^

[20:26] <jnthn> Mmmm...tasty tasty farts.

[20:27] <TimToady> some bacteria are more equal than others

[20:28] *** sqirrel left
[20:29] <leont> Pretty much the same bacteria that commonly live on your feet, though

[20:29] <FROGGS> r: my Bacteria $a; my Bacteria $b; $a meq $b; # meq, our new "more equal" operator

[20:29] <p6eval> rakudo 097361: OUTPUT«===SORRY!===␤Malformed my␤at /tmp/zmWaX5bUuG:1␤»

[20:30] <FROGGS> we could introduce a "jabeq" operator though # just a bit equal

[20:34] <masak> FROGGS: re cheese and bacterial farts: just wait until I tell you about beer and wine ;)

[20:35] <jnthn> Beer then wine, you'll feel fine. Wine the beer, oh dear. :P

[20:35] <jnthn> *then

[20:36] <masak> hm. hadn't heard that one before. why is that?

[20:37] <jnthn> Good question, but experimental studies conducted during my time in university support it. :P

[20:38] <FROGGS> there is the same idiom in german

[20:38] <leont> I'm sure those studies were scientific :-p

[20:39] <masak> heh. the Internet has lots of sayings like this, and some weird theories about what they mean and why :P

[20:39] <FROGGS> "Wein auf Bier, das rate ich dir. Bier auf Wein, das lass sein."

[20:39] *** benabik left
[20:39] <masak> right. "on" seems more common than "then".

[20:39] *** benabik joined
[20:39] <masak> phenny: "Wein auf Bier, das rate ich dir. Bier auf Wein, das lass sein."?

[20:39] <phenny> masak: "Wine to beer , I advise you . Effect of alcohol on the be let ." (de to en, translate.google.com)

[20:39] <jnthn> *lol*

[20:40] <skids> r: proto sub a (:$b = 2) {...}; multi sub a (:$b where { $_ == 2 }) { "sub1".say }; a(:b(2)); a(); # should work?

[20:40] <p6eval> rakudo 097361:  ( no output )

[20:40] <masak> phenny got a little lost there towards the end.

[20:40] <skids> hrm.

[20:40] <jnthn> Well, given you write ... instead of {*} you don't even make it to trying to multi-dispatch :)

[20:40] <jnthn> But even if you had, no.

[20:41] <jnthn> The {*} uses the arguments that were passed in

[20:41] <jnthn> Anything done in the proto signature has no influence on those. 

[20:43] *** kurahaupo left
[20:43] *** zby_home left
[20:44] <skids> Ah.  So the named->positional mapping in S06 is only a special case, not a fallout of a more general principle.

[20:45] <jnthn> Doesn't that end up re-writing callsites anyway...

[20:45] * skids ponders different multis with different default values.

[20:45] <jnthn> Either way, Rakudo doesn't implement the bit of S06 you're talking about yet.

[20:45] <jnthn> One of those "jnthn looked, said ARGH and will implement it when he comes to terms with it not going away" :)

[20:45] <skids> cool.  Don't actually need it ATM, just was curious.

[20:52] <dalek> rakudo/unfaster-words: f843f61 | jonathan++ | src/core/Str.pm:

[20:52] <dalek> rakudo/unfaster-words: Refactor words to not use comb/matches.

[20:52] <dalek> rakudo/unfaster-words: 

[20:52] <dalek> rakudo/unfaster-words: In theory this should be a load faster. Instead it's twice as slow

[20:52] <dalek> rakudo/unfaster-words: on pick-words. Maybe repeated utf-8 scanning kills it.

[20:52] <dalek> rakudo/unfaster-words: review: https://github.com/rakudo/rakudo/commit/f843f61ae0

[20:54] <jnthn> pmichaud: ^^ may be relatedish to the setting-with-high-codepoints issue you're looking at.

[20:54] *** benabik left
[20:55] <masak> heh. from one line to 14 lines... and twice as slow ;)

[20:56] <jnthn> I know! I shouldn't be allowed to program when sober. :P

[20:56] <jnthn> I think it must be the utf-8 scanning

[20:56] <masak> aye.

[20:56] <jnthn> hmm...maybe I can convert it to search it...

[20:57] <jnthn> .oO( strings shouldn't have encodings...that's an I/O thing :/ )

[20:57] <FROGGS> shouldnt it be faster if you declare $start and $end before gather?

[20:58] <jnthn> FROGGS: No

[20:58] <jnthn> Then the optimizer has a harder job.

[20:58] <FROGGS> k

[20:58] <jnthn> And won't do as well on 'em.

[20:59] <jnthn> Declaring in the narrowest scope you can is only only good for code understandability, but in Rakudo it tends to get you better performance too.

[20:59] <jnthn> *not only

[20:59] <jnthn> Grr... (4 hours sleep)--

[20:59] <FROGGS> 􏿽xF3.􏿽xF2

[20:59] *** benabik joined
[21:00] *** benabik left
[21:02] *** skids left
[21:04] *** kurahaupo joined
[21:05] <jnthn> Hm, yeah, getting it to scan a fixed width string is an improvement. BUT it's still horribly slow.

[21:05] <jnthn> I guess 'cus the substr is on the utf8 one

[21:07] <leont> Perl 5 does some caching, it may help in Rakudo too

[21:09] <jnthn> Yeah. Getting it to do the substr on the fixed length thing gets me 5 times faster than the original. 

[21:11] <jnthn> I guess any such cachign would need to go into Parrot

[21:12] <dalek> rakudo/unfaster-words: 11e00a9 | jonathan++ | src/core/Str.pm:

[21:12] <dalek> rakudo/unfaster-words: Work on a fixed width string.

[21:12] <dalek> rakudo/unfaster-words: 

[21:12] <dalek> rakudo/unfaster-words: Sadly, this can't actually be merged yet, for the same reason we can

[21:12] <dalek> rakudo/unfaster-words: not substr strings in the grammar from fixed width.

[21:12] <dalek> rakudo/unfaster-words: review: https://github.com/rakudo/rakudo/commit/11e00a92e4

[21:14] <masak> jnthn++ # multi-line commit messages

[21:15] <jnthn> Yeah...filling everyone's IRC screens faster to keep Linus happy :P

[21:15] <masak> even Github does it right nowadays \o/

[21:19] *** [Coke] is now known as Eustace

[21:20] *** Eustace is now known as Eustace_the_Blac

[21:20] *** Eustace_the_Blac is now known as [Coke]

[21:20] * [Coke] . o O (I hate irc)

[21:21] * masak hugs [Coke] 

[21:22] *** pmurias left
[21:24] *** kaare_ left
[21:27] *** cognominal joined
[21:27] *** fgomez joined
[21:28] *** bluescreen10 left
[21:28] *** bluescreen100 left
[21:33] <dalek> perl6-roast-data: 03ae412 | coke++ | / (4 files):

[21:33] <dalek> perl6-roast-data: today (automated commit)

[21:33] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/03ae412ea7

[21:33] <dalek> perl6-roast-data: 78f2b91 | coke++ | / (4 files):

[21:33] <dalek> perl6-roast-data: today (automated commit)

[21:33] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/78f2b91436

[21:33] <dalek> perl6-roast-data: 04b6da2 | coke++ | / (4 files):

[21:33] <dalek> perl6-roast-data: today (automated commit)

[21:33] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/04b6da2991

[21:33] <dalek> perl6-roast-data: 3695055 | coke++ | / (3 files):

[21:33] <dalek> perl6-roast-data: today (automated commit)

[21:33] <dalek> perl6-roast-data: review: https://github.com/coke/perl6-roast-data/commit/3695055db9

[21:34] <[Coke]> (still haven't fixed rakudo there.)

[21:35] <jnthn> was gonna say :)

[21:36] <jnthn> sleep &

[21:36] * [Coke] kicks off a run of just rakudo, and gets a massive amount of git updating going on.

[21:36] <[Coke]> wonder if/why cron had a problem.

[21:40] *** bluescreen10 joined
[21:44] *** bruges_ joined
[21:46] *** bruges left
[21:49] *** kurahaupo left
[21:51] *** cognominal left
[21:55] *** PacoAir left
[22:01] *** bluescreen10 left
[22:05] *** MayDaniel left
[22:05] *** raiph left
[22:06] *** PacoAir joined
[22:06] <masak> 'night, #perl6

[22:08] <felher> o/ masak 

[22:09] *** nodmonkey left
[22:12] *** PacoAir left
[22:31] *** stopbit left
[22:36] *** spider-mario left
[22:44] <dalek> std: 77327a4 | larry++ | STD.pm6:

[22:44] <dalek> std: parse q:val for GlitchMr++

[22:44] <dalek> std: review: https://github.com/perl6/std/commit/77327a4a95

[22:44] *** kurahaupo joined
[22:51] *** skids joined
[23:00] *** nodmonkey joined
[23:14] *** wamba1 left
[23:20] *** baest joined
[23:22] *** kurahaupo left
[23:23] *** yarp joined
[23:27] *** kurahaupo joined
[23:30] *** yarp left
[23:32] *** yarp joined
[23:34] *** nodmonkey left
[23:42] *** leont left
