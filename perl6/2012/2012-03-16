[00:01] *** ascrazy left
[00:03] *** PacoAir left
[00:15] *** colomon left
[00:20] *** Vespakoen_ joined
[00:26] *** Vespakoen_ left
[00:38] *** wolfman2000 joined
[01:17] *** scott___ joined
[01:19] *** tokuhiro_ joined
[01:38] *** colomon joined
[01:40] *** overrosy left
[01:40] *** overrosy joined
[01:44] *** whiteknight left
[01:53] *** HarryS left
[01:56] *** mmalx joined
[01:59] *** lichtkind left
[02:26] *** tokuhiro_ left
[02:40] *** rsimoes joined
[02:59] *** HarryS joined
[03:22] <jlaire> masak: the Knuth code you link to finds _strong_ addition chains, which have an extra requirement: you can only add a+b if |a-b| is also in the chain. This changes the optimal result for n=23: the regular addition chain [1 2 4 5 9 18 23] is not strong because 23=18+5 but 18-5=13 is not there. An optimal strong chain is one longer, [1 2 3 5 8 13 18 23]

[03:22] <jlaire> however, Knuth also has some code for finding minimal addition chains at http://www-cs-faculty.stanford.edu/~uno/programs.html :)

[03:29] *** preflex left
[03:29] <jlaire> n=83 is the first case where a strong addition chain requires 2 extra numbers: [1 2 4 8 16 17 33 66 83] vs. [1 2 3 5 8 13 21 26 31 57 83]

[03:29] *** preflex_ joined
[03:30] *** preflex_ is now known as preflex

[03:33] *** benabik joined
[03:59] *** orafu left
[03:59] *** orafu joined
[04:05] *** retup_work left
[04:23] *** leprevost joined
[04:25] *** jaldhar left
[04:28] *** lestrrat left
[04:29] *** lestrrat joined
[04:34] *** Transformer joined
[04:35] *** Transformer left
[04:36] *** woosley joined
[04:38] *** woosley left
[04:39] *** woosley joined
[04:40] *** leprevost left
[04:53] *** leprevost joined
[04:54] *** leprevost left
[05:07] *** jaldhar joined
[05:10] *** sftp_ left
[05:12] <sorear> good * #perl6

[05:24] *** kaleem joined
[05:32] *** birdwindupbird joined
[05:36] *** awwaiid left
[05:58] *** NamelessTee joined
[06:17] *** awwaiid joined
[06:49] *** takesako left
[06:49] *** wtw joined
[06:52] *** Trashlord left
[06:53] *** Trashlord joined
[06:54] *** takesako joined
[06:56] *** NamelessTee left
[07:45] <TimToady> that's the first time I've ever used a hacksaw on a computer, I believe

[07:46] <sorear> hi TimToady

[07:47] <TimToady> we just replaced quietfanatics broken display on his laptop; the new one was really for a different computer, but we made it work with a hacksaw :)

[07:48] <TimToady> (had two metal mounting brackets on top that wouldn't fit, but electronically it was compatible)

[07:48] <sorear> I've used one of these on a computer https://en.wikipedia.org/wiki/Nibbler does that count?

[07:49] <TimToady> we coulda used one of those, I expect

[07:49] <TimToady> and with less chance of putting metal shavings where they don't belong

[07:53] *** mj41 joined
[07:59] *** preflex_ joined
[07:59] *** preflex left
[07:59] *** preflex_ is now known as preflex

[08:30] *** buubot_backup left
[08:31] <moritz> r: our multi foo() { }

[08:31] <p6eval> rakudo b4caaa: OUTPUT«===SORRY!===␤Cannot use 'our' with individual multi candidates. Please declare an our-scoped proto instead␤at /tmp/wu7LUbqx88:1␤»

[08:31] * moritz should put that into changelog

[08:33] <dalek> rakudo/nom: 8c7747b | moritz++ | docs/ChangeLog:

[08:33] <dalek> rakudo/nom: [ChangeLog]: note that scoped multis now die

[08:33] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8c7747b008

[08:43] *** bacek left
[08:47] *** bacek joined
[08:52] *** woosley left
[08:54] *** buubot_backup joined
[09:11] *** ayad02 joined
[09:11] <ayad02> hello team 

[09:14] <ayad02> can you help me to transform this command in a code perl => #ssh 192.168.0.02 rsync -averb '/var/www/html/devaxecam2011/images/' '/var/www/html/devaxecam2011/videos/' /home/TMP_ARCHIVES/DEVAXECAM/dev.`date +%d%m%y.%H%M`

[09:15] <moritz> hello ayad02 

[09:15] <moritz> this channel is for Perl 6 usage and development

[09:15] <moritz> are you sure you want to do it in Perl 6?

[09:21] <ayad02> no i m no sure 

[09:21] <moritz> then you are probably in the wrong channel.

[09:22] <moritz> of course you can do it in Perl 6, but the easiest way would be to spawn a shell that executes the command you already pasted

[09:22] <moritz> (as will be the case with perl 5)

[09:53] <dalek> Heuristic branch merge: pushed 196 commits to perl6.org/archive_dir by ranguard

[09:54] *** stepnem left
[09:59] <ranguard> moritz (or anyone) please review https://github.com/perl6/perl6.org/tree/archive_dir - this is just migrating the content, I've tried to do it with git history but not done this before so a sanity check would be appreciated :)

[09:59] * ranguard heads off for a couple of hours so no rush :)

[09:59] <moritz> ranguard: will do

[09:59] <ranguard> thanks

[09:59] <moritz> ranguard: thanks for doing all that work in the first place

[10:05] <Ulti> was that big download button on perl6.org there before?

[10:07] *** preflex_ joined
[10:07] <moritz> yep, it's from pre-niecza times

[10:07] <moritz> feel free to replace it with something that makes sense these days :-)

[10:07] *** preflex left
[10:08] *** preflex_ is now known as preflex

[10:21] *** scott___ left
[10:29] *** lestrrat left
[10:30] *** lestrrat joined
[10:34] *** grondilu joined
[10:35] <grondilu> perl6: sub foo { gather { take 1; say "not so lazy"; take 2 } }; my @a <== foo;

[10:35] <p6eval> niecza v15-4-g1f35f89: OUTPUT«Potential difficulties:␤  @a is declared but not used at /tmp/xWFXIGB2yl line 1:␤------> ke 1; say "not so lazy"; take 2 } }; my ⏏@a <== foo;␤␤Unhandled exception: Feed ops NYI␤  at /home/p6eval/niecza/lib/CORE.setting line 1362 (die @ 3)…

[10:35] <p6eval> ..pugs b927740, rakudo 8c7747: OUTPUT«not so lazy␤»

[10:36] <grondilu> isn't a gather-take structure supposed to be lazy?

[10:37] <moritz> it is

[10:37] <moritz> perl6: sub foo { gather { take 1; say "not so lazy"; take 2 } }; my @a := foo;

[10:37] <p6eval> niecza v15-4-g1f35f89: OUTPUT«Potential difficulties:␤  @a is declared but not used at /tmp/8FpLiiVtVC line 1:␤------> ke 1; say "not so lazy"; take 2 } }; my ⏏@a := foo;␤␤»

[10:37] <p6eval> ..pugs b927740: OUTPUT«not so lazy␤»

[10:37] <p6eval> ..rakudo 8c7747:  ( no output )

[10:37] <moritz> perl6: sub foo { gather { take 1; say "not so lazy"; take 2 } }; my @a := foo; say @a[0]

[10:37] <p6eval> rakudo 8c7747, niecza v15-4-g1f35f89: OUTPUT«1␤»

[10:37] <p6eval> ..pugs b927740: OUTPUT«not so lazy␤1␤»

[10:38] <moritz> it seems that <== isn't lazy in rakudo and pugs; dunno if it should be

[10:38] <grondilu> I'm pretty sure it is supposed to be stricly lazy

[10:39] <moritz> that would surprise me

[10:40] <grondilu> anyway I hadn't thought of using ':='.  I'll do that.

[10:41] <moritz> S06 talks about each part of the feed chain being in its own thread

[10:41] <moritz> which doesn't make any sense for strictly lazy evaluation

[10:44] <moritz> woah, S06 has a lot to say about feeds

[10:45] <moritz> and much of that is rather vague (in terms of the APIs used behind the scenes to make the stuff happen in the way the spec wants it to happen)

[10:45] *** grondilu left
[10:50] <masak> antenoon, #perl6.

[10:52] <colomon> o\

[10:52] <moritz> good am, ma

[10:52] <moritz> perl6: say so 'am' ~~ /<*masak>/

[10:52] <p6eval> rakudo 8c7747: OUTPUT«===SORRY!===␤Unrecognized regex metacharacter (must be quoted to match literally) at line 1, near "*masak>/"␤»

[10:52] <p6eval> ..niecza v15-4-g1f35f89: OUTPUT«===SORRY!===␤␤Action method assertion:sym<*> not yet implemented at /tmp/h91Opm_1WZ line 1:␤------> say so 'am' ~~ /<*masak⏏>/␤␤Unhandled exception: Unable to resolve method oplift in class Any␤  at /home/p6eval/niecza/s…

[10:52] <p6eval> ..pugs b927740: OUTPUT«*** No such subroutine: "&so"␤    at /tmp/GIL9OZsI_D line 1, column 5 - line 2, column 1␤»

[10:54] <moritz> I figured that it might not be too hard to implement after all, once LTM is in place for all stuff (and not just protos)

[10:54] <moritz> because it really just marks als DFA or NFA as accepting

[10:54] <moritz> and LTM takes care that you get as much as possible

[10:55] <masak> jlaire: aye.

[10:55] <masak> er, moritz: aye.

[10:55] <masak> jlaire: thanks for the Knuth link correction -- 'tis fixed now.

[11:05] <moritz> phenny: tell ranguard just reviewed the archive_dir branch of archive_dir. Seems to be fine, everything interesting is there (including history)

[11:05] <phenny> moritz: I'll pass that on when ranguard is around.

[11:07] <moritz> phenny: tell ranguard I may move that stuff to a different repository eventually, but I'm not sure yet. Please let me know if you want any help setting up redirects or so

[11:07] <phenny> moritz: I'll pass that on when ranguard is around.

[11:07] <moritz> oh, and ranguard++

[11:13] *** ayad02 left
[11:13] <ranguard> thanks moritz - I'll tidy a bit and then merge over the w/e

[11:13] <phenny> ranguard: 11:05Z <moritz> tell ranguard just reviewed the archive_dir branch of archive_dir. Seems to be fine, everything interesting is there (including history)

[11:13] <phenny> ranguard: 11:07Z <moritz> tell ranguard I may move that stuff to a different repository eventually, but I'm not sure yet. Please let me know if you want any help setting up redirects or so

[11:14] <ranguard> you can then do what you like with it from there, I'll add the redirects from dev.perl.org/perl6/ once this is live

[11:21] <moritz> masak: just saw a nice autopun on #perlde:   somenick-- # for spreading a negative base mood

[11:26] <masak> :)

[11:30] * flussence wonders how a negative-base number system would work

[11:31] <moritz> with great care :-)

[11:31] <masak> flussence: nothing inherently contradictory in that.

[11:32] <moritz> except that 10_{-10} > 20_{-10), but 10_{-10} < 11_{-10}

[11:32] <flussence> I guess the sign of a number would be <- +>[$length % 2]

[11:32] <flussence> or something like that

[11:33] <moritz> hey, it's 2012-04-01 soon :-)

[11:33] <masak> flussence: let's say you want to express 8 in base -3. well, 8 == 1 * (-3) ** 2 + 1 * (-3) ** 1 + 2 * (-3) ** 0 == :-3<112>

[11:33] <masak> the calculation is done just like with positive number bases.

[11:34] <moritz> is that a uniq representation?

[11:34] <moritz> erm, is that representation uniq?

[11:34] <masak> I think so.

[11:34] <moritz> funny things you encounter on #perl6 :-)

[11:34] <masak> though it isn't very lexicographically sane.

[11:36] <masak> 0, 1, 2, 120, 121, 122, 110, 111, 112, 100, 101, 102...

[11:36] *** odoacre_ left
[11:37] <masak> hm, it seems uniq up to negative signs, or something like that. 3 can be written both as 120 and as -10.

[11:39] <moritz> well, let's say it has it's own (in)sanity :-)

[11:40] <masak> that seems to capture it, yes.

[11:45] *** lestrrat left
[11:46] *** lestrrat joined
[11:46] *** NamelessTee joined
[11:48] *** icwiener joined
[11:51] <flussence> I'm reminded of balanced ternary, which has slightly more practical use :)

[11:51] <icwiener> Hello.

[11:52] <icwiener> Is there a user channel somewhere or is the mailing list the place for that?

[11:52] <masak> icwiener: perl6-users, or here.

[11:52] <masak> we're very fine with taking user questions here on #perl6.

[11:52] <masak> flussence: have you seen the 2i-base number system?

[11:52] <icwiener> Oh, that's cool. :)

[11:53] <masak> flussence: any complex integer (aka "Gaussian integer") can be written as a normal integer.

[11:53] <masak> and with just the digits 0..3, at that!

[11:54] <masak> no minus signs required.

[11:55] <icwiener> Haha, happy as I was about being allowed to ask questions here, I found the answer by accident. :D

[11:55] <icwiener> .. I think. 

[11:55] <icwiener> Will try it.

[11:55] <masak> ask the question anyway. maybe we know a better answer :P

[11:59] <icwiener> I was parsing json with JSON::Tiny and got the error message "no ICU lib loaded ...". So I searched a bit and found the hint to install libicu ... but it was installed here. Then I came here and asked to ask (*coughs*). Then I found the additional hint to rebuild rakudo after installing libice. So I figured it must be the dev files that are needed so I now installed libicu-dev and rakudo is currently rebuilding. Let's see if it works. :)

[11:59] *** pernatiy left
[12:00] *** jaldhar left
[12:02] <masak> sounds about right.

[12:02] <masak> I think it's Parrot that needs a rebuild after libicu-dev is installed. but rebuilding Rakudo might take care of that.

[12:03] * [Coke] yawns and drinks some narsty coffee.

[12:03] <icwiener> And I so hoped for a better answer now. :D

[12:04] <[Coke]> I just realized I let the daily test runner go for 2 days without even thinking about it. go to check... results for the last 3 days are all identical. Do I have to LOOK for it to work? ;)

[12:04] *** mj41 left
[12:06] <[Coke]> yes. parrot must be Configure'd with the libraries present, or it generates code that doesn't use the libraries.

[12:06] <[Coke]> it doesn't auto-detect at runtime.

[12:06] <[Coke]> # 03/15/2012 - rakudo++ ; niecza (96.22%); pugs (38.97%)

[12:07] *** skids left
[12:07] <icwiener> Jus treconfiguring and rebuilding did not work. I will now start a clean build.

[12:08] <flussence> .oO( I thought ICU was enabled-by-default? )

[12:09] <[Coke]> reconfiguring... rakudo?

[12:09] <[Coke]> no, because it's going to see that you have a working parrot and use it.

[12:10] <[Coke]> Sorry for the pain.

[12:10] <[Coke]> flussence: if it's not THERE, how can it be enabled?

[12:10] <icwiener> It's no pain for me. :)

[12:15] <icwiener> I have been watching the perl6 development from a distance for quite some time now. I was doing some perl5 about 10 years ago. Unfortunately I am one of those people who let themselves be held back by the fact that "the next version" would be "coming soon". So I never dug in deeper into perl5. Once in a while I start doing some smaller stuff in perl6, like now in Rakudo perl. Now is the first time I do something that is supposed to work when it 

[12:15] <icwiener> is finished though. So I am basically just starting to get a bit more serious. :)

[12:18] <masak> cool. keep us posted.

[12:19] *** mj41 joined
[12:20] *** tokuhiro_ joined
[12:21] <icwiener> Hmm, I am still getting that error message. 

[12:22] <icwiener> http://paste.kde.org/441200/33190053/ Do you maybe see more in it than me?

[12:25] <gfldex> icwiener: try aptitude install libicu-dev

[12:25] <gfldex> you will have to rebuild rakudo

[12:25] <icwiener> I just did both.

[12:25] <icwiener> Rebuilt Parrot and Rakudo.

[12:27] <gfldex> you may have to do a make distclean for parrot, rakudo and nqp

[12:27] <[Coke]> what command line are you using for parrot and/or rakudo build?

[12:28] * [Coke] tries to remember the parrot invocation for "am I compiled to use icu"

[12:28] <gfldex> i had the same problem a while a go and IIRC i had to rm -r rakudo/ to get it fixed

[12:28] <icwiener> gfldex: Because it was too complex for me, I removed the whole source folder, recloned and then ran perl Configure.pl --gen-parrot --prefix=/home/motoko/usr/

[12:28] *** xinming left
[12:29] *** sporous left
[12:29] *** sporous joined
[12:30] <[Coke]> what does ./install/bin/parrot_config icu_shared say ?

[12:30] <[Coke]> what does ./install/bin/parrot_config has_icu

[12:30] <[Coke]> (that second one is more useful)

[12:30] <[Coke]> that'll tell us if parrot even has ICU.

[12:31] <icwiener> 0

[12:31] <icwiener> Hmm ...

[12:31] <[Coke]> so, back to parrot, it's not finding your icu.

[12:31] <[Coke]> lemme see...

[12:32] <[Coke]> icwiener: what does "icu_config" say ?

[12:32] <[Coke]> no pathing, just the raw command.

[12:33] <icwiener> parrot_config [ <config-key> [ <config-key> ... ] | --dump | --help ]

[12:33] <icwiener> :D

[12:34] <[Coke]> icwiener: 08:32 < [Coke]> icwiener: what does "icu_config" say ?

[12:34] *** xinming joined
[12:34] <gfldex> isnt it icu-config?

[12:34] <[Coke]> wrong program.

[12:35] <[Coke]> gfldex: whoops!

[12:35] *** Vespakoen joined
[12:35] <[Coke]> parrot runs "icu-config" (gfldex++) to see if you have icu.

[12:35] <[Coke]> if it can't find it, you (apparently) don't.

[12:35] <icwiener> Ah, wrong progam, sorry.

[12:36] <icwiener> There is no icu_config. icu-config gives usage info.

[12:36] <icwiener> Do you mean icuinfo?

[12:38] <gfldex> icu-config --ldflags

[12:38] <gfldex> check if it does something reasonable

[12:40] <icwiener> -ldl -lm   -L/usr/lib -licui18n -licuuc -licudata  -ldl -lm

[12:42] *** daxim joined
[12:42] <icwiener> parrot_config --dump lists "libparrot_linkflags => '-L"/home/motoko/compile/rakudo/parrot/blib/lib" -lparrot'" but parrot is not directly inside rakudo/. Is that something that could cause problems?

[12:44] <moritz> the question is if there's a libparrot.so in /home/motoko/compile/rakudo/parrot/blib/lib

[12:45] *** silug left
[12:46] <icwiener> No, there isn't.

[12:46] <icwiener> The folder "parrot/" is not even there.

[12:47] <icwiener> The file is in ~/usr/lib/libparrot.so here

[12:51] <moritz> did you configure parrot with --prefix=$HOME/usr ?

[12:52] *** NamelessTee left
[12:52] <icwiener> Yep.

[12:52] <icwiener> perl Configure.pl --gen-parrot --prefix=/home/motoko/usr/

[12:52] <moritz> uhm.

[12:52] <moritz> --gen-parrot assumes (or creates) a copy of parrot below the rakudo dir

[12:53] <moritz> did you remove that?

[12:54] <icwiener> No.

[12:54] <icwiener> It does not do that with my command.

[12:54] <icwiener> If I remove the --prefix= it fetches it.

[12:54] <moritz> then there's something rather fishy going on

[12:54] <moritz> was there an older parrot installed in ~/usr ?

[12:55] <icwiener> Ah, might be, yes.

[12:55] <icwiener> I mean, yes it was. The one I installed yesterday.

[12:56] <moritz> ah

[12:56] <moritz> then rakudo's Configure.pl picked it up, and didn't try to build a new one

[12:56] <icwiener> And because I did not know how to cleanly rebuild all the parts of the stack, I removed the source folder earlier.

[12:57] <daxim> http://www.infoworld.com/d/application-development/why-new-programing-languages-succeed-or-fail-188648     # hit /. earlier

[12:57] <moritz> so, either remove the install dir too

[12:58] <moritz> or force rakudo to build a new parrot

[12:58] <moritz> for example with   --gen-parrot=master --prefix=...

[13:00] <moritz> "Similarly, when Ruby began it was essentially a more powerful Perl."

[13:00] <moritz> was it? more powerful, I mean

[13:01] <tadzik> maybe it's about all this "We have OOP and unicorns and everything"

[13:01] <moritz> ah, right. "everyting is an object", so it must be more powerful.

[13:02] <tadzik> right

[13:02] <tadzik> it even sounds like power verbalized

[13:03] <colomon> Objects: real ultimate power!

[13:03] <colomon> (not)

[13:04] *** plobsing_ joined
[13:04] *** sftp joined
[13:07] <moritz> speaking of objects, I need a bit help with naming something...

[13:07] *** plobsing left
[13:07] <moritz> I want to build a system that can notify you when... stuff happens

[13:07] <moritz> for example, if an artist releases a new CD, or goes on tour

[13:08] <moritz> usually I'd call that an 'event', but in this context 'event' could also be an artist performing a concert

[13:08] <moritz> so, what's more general than 'event', for when stuff happens?

[13:09] <moritz> or should I name it 'event', and find something other for the other event?

[13:09] <moritz> "performance" maybe?

[13:09] *** sisar joined
[13:10] <[Coke]> +1 on that.

[13:10] <[Coke]> also, names for programmers don't have to == names for users.

[13:11] <moritz> right

[13:11] <moritz> thought it's easier for the programmer if he doesn't have to translate all the time

[13:11] <moritz> *though

[13:12] <icwiener> Ok, parrot is now there. ICU still not.

[13:12] *** not_gerd joined
[13:12] <moritz> :/

[13:12] <moritz> icwiener: if you go into the parrot dir, and run 'perl Configure.pl', there's  line about icu

[13:12] <moritz> would be interesting if that ends with 'yes' or 'no'

[13:13] <not_gerd> moritz: NQP build just failed here - see https://github.com/perl6/nqp/pull/31

[13:13] <[Coke]> moritz: yes, but that just will say the same thing that ./parrot_config has_icu says.

[13:13] <icwiener> auto::icu -           Is ICU installed....................................yes.

[13:13] <[Coke]> what you want more is the verbose output fromthat configure step, I think.

[13:13] <moritz> wait, that's *not* the same as has_icu

[13:13] <[Coke]> icwiener: and does ./parrot_config has_icu say "1" ?

[13:14] <icwiener> Wee ...

[13:14] <dalek> nqp: 07ce402 | (Gerhard R)++ | src/6model/base64. (2 files):

[13:14] <dalek> nqp: Make base64.[ch] compile with new error levels

[13:14] <dalek> nqp: review: https://github.com/perl6/nqp/commit/07ce402461

[13:14] <dalek> nqp: ffd778a | moritz++ | src/6model/base64. (2 files):

[13:14] <dalek> nqp: Merge pull request #31 from gerdr/gerdr/cleanup

[13:14] <dalek> nqp: 

[13:14] <dalek> nqp: Make base64.[ch] compile with new error levels

[13:14] <dalek> nqp: review: https://github.com/perl6/nqp/commit/ffd778ac69

[13:14] <icwiener> Meh.

[13:14] <moritz> not_gerd: thanks

[13:14] <moritz> not_gerd++

[13:15] <icwiener> The parrot in ~/usr says 0, the one in rakudo/ says 1. No idea why it did not install it again.

[13:15] <moritz> not_gerd: I've also given you commit access to nqp

[13:17] <[Coke]> ok. so you've built a local parrot that has ICU. is your rakudo usin that parrot?

[13:18] <[Coke]> if you are building rakudo and telling rakudo to build parrot, it will install it in ./install, not in ~/usr

[13:18] <icwiener> I guess it is using the one in ~/usr since that is in the PATH.

[13:18] <[Coke]> (unless you're overriding that too.)

[13:18] <icwiener> Even if I use --prefix=?

[13:19] <moritz> no, prefix works (I just tried it)

[13:19] <moritz> but if there's an old parrot in the --prefix dir, rakudo doesn't bother to build a new one

[13:19] <moritz> so   rm ~/usr/bin/parrot*

[13:20] <icwiener> Yep, I will do that now.

[13:20] <moritz> and then try again with  perl Configure --gen-parrot --prefix=$HOME/usr

[13:20] <icwiener> I messed up with the prefix once, so now I have both versions configured with different prefixes.

[13:21] <icwiener> Is there a make clean command that cleans all the parts?

[13:21] <[Coke]> moritz: seems like we'd want to be able to force a build of anew parrot.

[13:22] <[Coke]> (without having to uninstall it the hard way first.)

[13:22] <icwiener> He mentioned --gen-parrot=master does that?

[13:25] *** kaleem_ joined
[13:27] *** kaleem left
[13:33] *** sftp left
[13:36] *** sftp joined
[13:45] <icwiener> I just learned why it is better to keep modules in .perl6/lib ;)

[13:46] <icwiener> And it works now. :D

[13:46] <icwiener> Thanks all of you.

[13:46] <icwiener> And sorry for messing up my install.

[13:50] *** xenu joined
[13:54] *** xenu left
[13:55] *** xenu joined
[14:01] <moritz> [Coke]: I think --gen-parrot=SOMETHING always forces a rebuild, but yes, something more convenient wouldn't hurt

[14:01] *** skids joined
[14:02] <[Coke]> works? \o/

[14:02] <[Coke]> moritz: as long as there's a way to do it.

[14:05] <dalek> nqp: fdec156 | moritz++ | tools/build/PARROT_REVISION:

[14:05] <dalek> nqp: bump parrot revision

[14:05] <dalek> nqp: 

[14:05] <dalek> nqp: just to get some better testing of newer birds, no specific reason

[14:05] <dalek> nqp: review: https://github.com/perl6/nqp/commit/fdec156a02

[14:07] <dalek> rakudo/nom: 40b20ca | moritz++ | tools/build/NQP_REVISION:

[14:07] <dalek> rakudo/nom: bump NQP revision to get NQP build fixes by not_gerd++

[14:07] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/40b20cac12

[14:11] *** retup_work joined
[14:27] <dalek> rakudo/nom: 16bf0f4 | moritz++ | src/ops/perl6.ops:

[14:27] <dalek> rakudo/nom: unbreak the build.

[14:27] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/16bf0f4d1a

[14:30] *** wolfman2000 left
[14:30] *** tokuhiro_ left
[14:32] *** xinming left
[14:33] *** not_gerd left
[14:36] *** pernatiy joined
[14:38] *** kaleem_ left
[14:39] *** araujo left
[14:41] *** araujo joined
[14:41] *** araujo left
[14:41] *** araujo joined
[14:43] *** PacoAir joined
[14:44] *** kaare_ joined
[14:54] <dalek> roast: e79501d | moritz++ | S05-mass/rx.t:

[14:54] <dalek> roast: fudge rakudo regression (ticket already filed)

[14:54] <dalek> roast: review: https://github.com/perl6/roast/commit/e79501dfe1

[15:04] *** Patterner left
[15:18] *** Psyche^ joined
[15:18] *** Psyche^ is now known as Patterner

[15:30] *** wtw left
[15:31] *** benabik_ joined
[15:34] *** benabik left
[15:34] *** benabik_ is now known as benabik

[15:43] <flussence> my rakudo compile keeps exploding at the same place :(

[15:43] <flussence> https://gist.github.com/2050618

[15:45] <flussence> oh, problem on my end I think

[15:46] <flussence> yeah it was, I had a one-character local edit in a nqp file and that got git into a wedged state

[15:46] *** Psyche^ joined
[15:49] *** Patterner left
[15:49] *** Psyche^ is now known as Patterner

[15:53] *** xinming joined
[15:59] <flussence> nope, failed again in the same place :/

[16:06] *** Vespakoen left
[16:06] *** havenn joined
[16:09] <sorear> goood * #perl6

[16:10] <moritz> flussence: can you nopaste the error?

[16:11] <moritz> good * sorear 

[16:18] *** mdupont left
[16:18] *** mdupont joined
[16:19] *** tyatpi joined
[16:19] *** mj41 left
[16:31] *** noteventime joined
[16:36] *** sisar left
[16:48] *** MayDaniel joined
[16:56] <flussence> moritz: retried after making sure all my git clones were in order, no change: https://gist.github.com/2050618/fecbcd12

[16:56] *** vlkv joined
[16:58] *** havenn left
[17:06] *** birdwindupbird left
[17:08] *** pernatiy left
[17:10] *** sjohnson joined
[17:10] *** retup_work left
[17:12] *** NamelessTee joined
[17:13] *** fglock joined
[17:16] <sorear> o/ fglock 

[17:17] <fglock> o/ sorear

[17:18] <moritz> flussence: eeks, it fails in dyncall :/

[17:18] <fglock> I'm now adding wantarray() to the p5 compiler - it took me a while to get how it works

[17:21] <sjohnson> hi

[17:22] *** not_gerd joined
[17:24] <not_gerd> flussence: parrot recently added -Werror=strict-prototypes to CFLAGS, which apparently breaks dyncall

[17:24] <moritz> sigh

[17:24] *** vlkv left
[17:26] <moritz> I thought it was now parrot policy to test stuff downstream first

[17:27] *** cbk1090 left
[17:29] <[Coke]> moritz: yes, well, not everything is obviously something that needs testing.

[17:29] <not_gerd> also, the build isn't broken everywhere - works fine for me (might be related to gcc version)

[17:30] <moritz> not_gerd: point taken

[17:30] <moritz> flussence: what's your GCC version?

[17:31] *** Vlavv` joined
[17:31] <not_gerd> we probably shouldn't pass parrot's CFLAGS to 3rdparty libs...

[17:32] <moritz> well, we should, to ensure binary compatiblity

[17:32] <moritz> or at least some them

[17:32] <moritz> it also doesn't make much sense to write our own configure system to detect all the necessary options a second time

[17:34] *** Vlavv_ left
[17:35] *** havenn joined
[17:38] *** mmalx left
[17:39] *** tyatpi left
[17:44] <not_gerd> flussence: could you try https://gist.github.com/2051384 as a quick fix (untested)

[18:05] <not_gerd> actually, it might be the make version and not gcc -- according to the manual, GNU make used to export all variables by default, whereas new version do not

[18:10] *** retup_work joined
[18:10] <not_gerd> moritz: I just verified thatGNU make 3.82.90 does not pass CFLAGS to the dyncall build system

[18:10] *** daxim left
[18:14] *** pmurias joined
[18:17] <fglock> pmurias: o/

[18:19] *** Chillance joined
[18:20] *** pmurias left
[18:20] *** pmurias joined
[18:20] <pmurias> fglock: hi

[18:23] *** cbk1090 joined
[18:23] <pmurias> fglock: how will we mangle intentifiers javascript can't handle?

[18:23] <pmurias> like @#?

[18:23] *** Patterner left
[18:29] * [Coke] will be sure to get up to date copies of the big three on his laptop before hitting the planes tomorrow.

[18:31] <pmurias> fglock: @# is not a special variable, it just has a wierd name

[18:36] *** fglock left
[18:36] *** fglock joined
[18:37] <fglock> pmurias: that's currently not possible, only globals can have special names - but mangling of lexicals can be added at the Var emitter

[18:37] *** Psyche^ joined
[18:37] *** Psyche^ is now known as Patterner

[18:38] * flussence undecommutes

[18:38] <flussence> moritz: GCC 4.5.3

[18:39] <moritz> flussence: and make?

[18:39] <flussence> make -v says 3.82

[18:40] <moritz> flussence: thanks

[18:41] <not_gerd> flussence: gmake -v hopefully says the same thing?

[18:41] <flussence> yep

[18:46] <pmurias> fglock: is there a way to pretty print the AST?

[18:50] *** havenn left
[18:51] <fglock> yes, you can use the p5 backend, in the end of ./perlito5.pl add: use Data::Dumper / warn Dumper $ast

[18:52] <not_gerd> flussence: did you see https://gist.github.com/2051384 , which should work for now until we come up with a proper fix...

[18:54] <flussence> I'll give it a try

[18:58] <pmurias> fglock: should the p5 backend attempt to insert 'our' for no strict code, or just disable strict in the emitted code?

[18:59] *** Patterner left
[18:59] <pmurias> explicitly qualifing the variables seems much better then inserting our

[19:01] <fglock> it should emit "plain" perl5, so emit "no strict"/"our" as in the ast

[19:02] <pmurias> "plain" meaning keep to the orginal code as close as possible?

[19:04] <geekosaur> meaning don't assume the existence of a setting that provides a known environment, I think?

[19:05] <moritz> oops, it looks like TPF hasn't been approved for this year's GSOC :(

[19:06] <moritz> rafl: do you know what went wrong?

[19:06] <rafl> i have no idea

[19:06] *** Psyche^ joined
[19:06] *** Psyche^ is now known as Patterner

[19:06] <rafl> the only things i can think are

[19:06] <rafl> a weak-ish ideas page

[19:07] <rafl> and us being officially under new management for the first time - last year duke sent in our application

[19:07] <moritz> :(

[19:07] <[Coke]> :(

[19:08] <rafl> parrot is in, fwiw

[19:08] <moritz> I know

[19:08] <rafl> so you guys might get some stuff done with that, i guess

[19:08] <[Coke]> well, rakudo projects at least are probably still cool over at parrot.

[19:08] <PerlJam> Is it too late for TPF ?

[19:08] <moritz> PerlJam: yes, I think so

[19:08] <rafl> well - there's always next year and GCI, i suppose

[19:08] <PerlJam> :(

[19:08] <rafl> but otherwise yes

[19:08] <moritz> still, rafl++ for doing all the work

[19:09] <rafl> @us++ # so many helped out

[19:09] <rafl> i honestly felt we had the best org application since.. well.. ever

[19:09] <sorear> o/ rafl 

[19:09] <rafl> hey

[19:10] <PerlJam> Is there any way we can find out what happened so that it doesn't happen again?

[19:10] <[Coke]> rafl++

[19:10] <[Coke]> yes, there's an IRC meeting later.

[19:10] <moritz> and parrot doesn't even have an ideas page listed at http://www.google-melange.com/gsoc/org/google/gsoc2012/parrot

[19:10] <pmurias> rafl: :(

[19:11] <rafl> moritz: that's the org profile - that's different from the org application and orgs only had one hour before now to fill the profile out

[19:11] <rafl> PerlJam: yes. there's an irc meeting for rejected orgs next week

[19:12] <moritz> rafl: oh, ok

[19:12] <masak> rafl: :(

[19:12] <masak> odd that TPF didn't get in.

[19:13] <moritz> iirc last year some pretty big and respected orgs didn't get in either

[19:13] <rafl> i just hope it isn't because they wanted to prefer smaller orgs this year

[19:13] <sorear> http://twitter.com/#!/raimue/status/180732762540621824

[19:13] *** pernatiy joined
[19:13] <rafl> cause i told a few smallish perl projects specifically to not apply as chances seemed better with the umbrella org

[19:13] <[Coke]> um, the number of orgs is increasing slowly.

[19:13] <rafl> sorear: i think that's just melange being shit. the list is growing

[19:14] <[Coke]> it was at 53. now at 54. that tweet says 46

[19:14] <rafl> there's an upside, though - not having to deal with melange for half a year :)

[19:14] <[Coke]> rafl;did you get a rejection notice? or are you basing it just on the list?

[19:14] <rafl> that, and not being burned out at the end of the summer :)

[19:14] <rafl> i did get a rejection notice about an hour ago

[19:15] <[Coke]> up to 55...

[19:15] <rafl> anyway - pre social of a linux conference coming up

[19:15] *** birdwindupbird joined
[19:15] <rafl> i'm gonna drown my disappointment

[19:15] <[Coke]> ah. The list won't show orgs that have not yet filled our their profile.

[19:15] <rafl> sorry everyone for not getting things to work out for us this time around

[19:16] <[Coke]> rafl++ for the work.

[19:16] <[Coke]> rafl: you going to yapc::na?

[19:16] <rafl> yes

[19:16] <[Coke]> I will happily buy you a drink there. ;)

[19:17] *** havenn joined
[19:17] * rafl hopes to be over this by then, not needing a drink anymore :)

[19:21] <sjohnson> mmmm.. drinks

[19:22] * sjohnson could use some doghair

[19:22] <sorear> o/ sjohnson

[19:24] * fglock wonders how to debug javascript

[19:25] <sjohnson> sorear: hi :3

[19:25] <sjohnson> fglock:  firebug ?

[19:26] *** Trashlord left
[19:26] <dalek> nqp: 99f34ab | (Gerhard R)++ | 3rdparty/dyncall/GNUmakefile:

[19:26] <dalek> nqp: Temporary fix for dyncall build failure

[19:26] <dalek> nqp: 

[19:26] <dalek> nqp: See https://github.com/parrot/parrot/issues/735

[19:26] <dalek> nqp: review: https://github.com/perl6/nqp/commit/99f34ab081

[19:26] <not_gerd> moritz, flussence: ^^

[19:27] *** Trashlord joined
[19:27] <fglock> my patch is misbehaving, I'd need to compare the trace with the unpatched version

[19:27] *** pernatiy left
[19:27] <fglock> (adding contexts to the perl5 compiler)

[19:39] *** fsergot left
[19:43] <felher> I hope i'm not indiscreet with that but i wonder: where did pmichaud++ go and is he coming back? :)

[19:44] <[Coke]> he's taking care of family issues. He (and we) hopes he'll get back soon, but no timeline.

[19:44] <[Coke]> plenty of progress in his absence, though, which is good.

[19:45] <felher> [Coke]: yeah, i was just wondering. Thnx ;)

[19:45] <felher> * :)

[19:48] <sorear> felher:

[19:48] <sorear> (spurious send)

[19:49] <felher> :)

[19:59] <PerlJam> I think there's an install problem with nqp.  After a fresh install of parrot, nqp, and rakudo, when I run rakudo, I get "Missing or wrong version of dependency 'src/stage2/QRegex.nqp'"

[20:00] <pyrimidine> that GSoC melange showing is misleading.  The org has to have a completed profile to show up, so more orgs are accepted that just those on that page

[20:00] *** nnunley left
[20:00] <pyrimidine> rafl: did you get an email saying Perl Foundation didn't get in?

[20:01] <pyrimidine> rafl: nm, saw that you did

[20:04] <pyrimidine> re: pmichaud's absence, would love to see him back, but I am also glad there is still progress being made

[20:07] *** mtk left
[20:09] *** Vespakoen joined
[20:09] *** FACEFOX joined
[20:09] *** FACEFOX left
[20:10] *** Vespakoen left
[20:10] *** Vespakoen joined
[20:10] *** donaldh joined
[20:11] *** mj41 joined
[20:11] <flussence> not_gerd++, patch wfm

[20:13] *** FACEFOX joined
[20:13] <felher> If i write a literal zero ('0'), does this create a new scalar container containing zero? (/me is wondering how 'my $x := 0' works)

[20:14] <pmurias> fglock: in the p5 backend do we want the eval to pass the code through perlito?

[20:14] *** donaldh left
[20:15] <not_gerd> flussence: the gist one, the NQP commit or both?

[20:16] <sorear> felher: yes, but it's a read-only container

[20:16] <sorear> in Rakudo read-only containers are punned to the corresponding objects to save memory; this seems nontrivial to copy in niecza/C# but if I ever do niecza/C I'll copy it

[20:17] <flussence> not_gerd: the gist one

[20:17] <fglock> hmm - maybe not, because in p5-to-p5 we don't keep the compiler state at emit-time, so we can't give eval the right env

[20:18] <flussence> (I'm not sure how to build all of the rakudo toolchain manually, so I guess I'll just wait it out)

[20:18] <not_gerd> flussence: the gist as-is breaks the windows build, so I committed a slightly different patch to the NQP repo

[20:18] <pmurias> fglock: right env = lexicals + ?

[20:19] <felher> sorear: thanks :)

[20:20] <pmurias> fglock: eval(compile_perlito5_to_perl5($code)) would have access to lexicals

[20:22] <felher> sorear: ah, so if i do 'my $x := 0' and then '$x := $x + 1', then '$x + 1' creates a new container containing '$x + 1' and then in bind '$x' to that new container. Is that about right?

[20:24] <fglock> pmurias: no, I was thinking about access to declarations that the compiler might need to know about - but I think the p5 emitter rely on "perl" to figure those out; and there is enough info in global vars too

[20:24] <fglock> so it might just work

[20:25] <sorear> felher: yes

[20:26] *** Vespakoen left
[20:28] <masak> right. native $i++ operations will probably have to do a similar re-bind.

[20:30] *** havenn left
[20:31] <felher> sorear: oh, and everytime i do a bind on a non-container (like $x + 1), it's read-only? As opposed to a bind like '$x := y'?

[20:33] <felher> o/ masak: may i ask: have you already startet working on d2? :)

[20:34] * felher suddenly remembers something about new-ast-something?

[20:34] <sorear> felher: yes, it's read only

[20:34] <felher> sorear++: great, that helped a lot. thnx :)

[20:35] <sorear> yay

[20:37] *** Trashlord is now known as Trashtest

[20:37] *** Trashtest is now known as Trashlord

[20:40] <masak> felher: not really -- I'm blocking on QAST, so I'll want to look at that next.

[20:41] <masak> felher: presently I'm attacking t4 and surroundings :)

[20:41] <felher> masak: oh, yeah, the p6cc. great :)

[20:41] * masak .oO( ah, letter-digit codes for the initiated )

[20:45] *** ksi joined
[20:48] *** not_gerd left
[20:55] *** birdwindupbird left
[21:15] *** skids left
[21:24] <arnsholt> Arglebargle. Why do supposely serious things like PayPal insist on this harebrained "security question" thing?

[21:24] <arnsholt> Bah! Humbug!

[21:40] <flussence> arnsholt: they're running a web2.0, crowdsourced simulation of the "find the resistance between these two nodes of an infinite grid of 1Ω resistors" puzzle...

[21:41] <arnsholt> Heh. Thankfully I've not done any electronics, so I can't fall prey to that =)

[22:00] <moritz> luckily that thing can be solved analytically with discrete Green's Function theory

[22:00] <moritz> it's not easy to find the solution, but when you read the papers it's no rocket science either

[22:08] *** icwiener left
[22:16] *** Chillance left
[22:17] *** kaare_ left
[22:20] *** localhost left
[22:21] *** localhost joined
[22:22] *** sjohnson left
[22:26] *** jnthn joined
[22:26] <jnthn> Buenos tardes, #perl6 :)

[22:27] <jnthn> *buenas

[22:27] <jnthn> tssk

[22:27] * jnthn ain't staying long, just enough to note he's alive after $long-trip :)

[22:28] <fglock> o/ jnthn 

[22:28] <jnthn> hi fglock 

[22:31] <masak> jnthn! \o/

[22:32] <masak> Buenos Aires, oh tardy one!

[22:33] *** mj41 left
[22:36] *** fglock left
[22:37] *** ksi left
[22:38] <jnthn> masak: :P

[22:38] * jnthn meant to have a relaxing first day after all the flying, then accidentally walked 10km or so

[22:38] <masak> I hate when that accidentally happens.

[22:43] *** whiteknight joined
[22:44] <felher> Does NQP support typed arrays? I'm wondering because i saw something like: 'has @!CODES;' and and comment above that line 'a stack of code objects'. 

[22:44] <jnthn> felher: Not at the moment, no

[22:44] *** pmurias left
[22:45] *** ksi joined
[22:45] <felher> jnthn: ah, okay :)

[22:46] <jnthn> felher: It'd be very hard to statically typed that case anyway

[22:47] <felher> jnthn: 'that case' means that particular array?

[22:47] <jnthn> felher: yeah

[22:47] <jnthn> That come is compiled before we get around to defining the Perl 6 metamodel, let alone the Code type :)

[22:47] <jnthn> s/come/code/

[22:49] *** broquaint left
[22:50] <felher> jnthn: what is in that array anyway? src/core/Code.pm-code-classes? I don't see how they do implement add_phaser. Seems more like src/core/Block.pm-block-classes, maybe? :)

[22:50] <jnthn> felher: Most likely, yeah

[22:51] <jnthn> I guess a thunk could in theory end up on there

[22:51] <jnthn> oh, no, I think that can't happen actually

[22:51] <jnthn> so yeah, it's probably always Block and subclasses of that

[22:51] <jnthn> (Block is a direct descendent of code, though, so the comment ain't wrong as such)

[22:52] *** broquaint joined
[22:53] <felher> jnthn: how does that work? src/code/Block.pm doesn't do 'is Code' or something like that? 

[22:53] <jnthn> felher: No, that's all wired up in BOOTSTRAP.pm

[22:54] <jnthn> felher: Some bits of the object system need to be wired up before we start parsing the setting

[22:54] <jnthn> BOOTSTRAP.pm does that work, mostly in a BEGIN block these days so we serialize it rather than doing it every startup

[22:56] <felher> jnthn: oh, Block.HOW.add_parent(Block, Code) i guess?

[22:56] <jnthn> Right

[23:01] <jnthn> Time to see if I can find a snack and a drink before taking an early night...back tomorrow o/

[23:01] <felher> jnthn: sleep well. And thanks for your explanations. :) 

[23:09] *** wolfman2000 joined
[23:10] *** MayDaniel left
[23:20] <masak> 'night, jnthn. dream of a relaxing second day, with only 20km of accidental walking :)

[23:29] *** xenu left
