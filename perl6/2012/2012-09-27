[00:00] *** whiteknight left
[00:25] *** thou_ left
[00:28] *** arlinius joined
[00:30] *** thou joined
[00:30] *** tokuhiro_ joined
[00:43] *** simcop2387 left
[00:46] *** simcop2387 joined
[00:49] *** Chillance left
[01:13] *** hypolin joined
[01:15] *** Targen left
[01:22] *** thou left
[01:29] *** thou joined
[01:48] *** anuby joined
[02:04] *** kst left
[02:08] *** thou left
[02:09] *** rafl joined
[02:11] *** kst joined
[02:24] <diakopter> short backlog is

[02:30] <jnthn> morning o/

[02:43] *** popl left
[02:43] <[Coke]> jnthn: ... almost.

[02:46] <jnthn> [Coke]: In Japan :P

[02:47] <[Coke]> ah, say hi to my cousin. :)

[02:48] <[Coke]> "surely you'll run into him while you're there!"

[02:49] <jnthn> Yeah, I mean, there's only 30 million people in Tokyo :P

[02:58] *** _jaldhar_ joined
[03:01] <dalek> rakudo/nom: dca2ab5 | jonathan++ | src/Perl6/ (2 files):

[03:01] <dalek> rakudo/nom: Make a real pad etc. for a signature literal, to prevent various things exploding in nasty ways.

[03:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/dca2ab5377

[03:01] <dalek> rakudo/nom: 61cbec6 | jonathan++ | src/ (3 files):

[03:01] <dalek> rakudo/nom: Give signatures a backlink to the code object they are associated with.

[03:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/61cbec63bc

[03:01] <dalek> rakudo/nom: 6cd3432 | jonathan++ | src/ (3 files):

[03:01] <dalek> rakudo/nom: Implement capture ~~ signature smart-matchng.

[03:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/6cd3432463

[03:01] <dalek> rakudo/nom: 8f5fc4d | jonathan++ | t/spectest.data:

[03:01] <dalek> rakudo/nom: Turn on S03-smartmatch/capture-signature.t.

[03:01] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/8f5fc4d8e5

[03:02] <jnthn> uh...where's the 5th commit? :)

[03:02] <jnthn> huh, it shows up on github...

[03:03] <[Coke]> jnthn: he's... about 90 min SW of tokyo by car. if I were a guessing man.

[03:03] <[Coke]> lazy dalek.

[03:06] <[Coke]> jnthn: oddly, shows up in #parrot

[03:09] <jnthn> oddness

[03:12] *** fgomez left
[03:14] <jnthn> lunch &

[03:25] *** fgomez joined
[03:34] *** arlinius left
[04:05] *** thou joined
[04:10] *** tokuhiro_ left
[04:22] *** telex left
[04:26] *** telex joined
[04:33] *** telex left
[04:40] *** telex joined
[04:49] *** skids left
[05:12] <moritz> \o

[05:12] <moritz> jnthn++ # smart-matching against signature literals

[05:13] <dalek> rakudo/nom: 9af8f20 | moritz++ | docs/ChangeLog:

[05:13] <dalek> rakudo/nom: update ChangeLog

[05:13] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/9af8f20d65

[05:24] *** wk left
[05:34] *** kaleem joined
[05:38] *** birdwindupbird joined
[05:41] *** Maddingue left
[05:41] *** Maddingue joined
[05:42] *** arnsholt left
[05:42] *** arnsholt joined
[06:04] *** wtw joined
[06:10] *** Pleiades` left
[06:19] *** stepnem joined
[06:23] *** Pleiades` joined
[06:38] *** wk joined
[06:45] *** preflex left
[07:00] *** thou left
[07:06] *** fhelmberger joined
[07:09] *** brrt joined
[07:11] *** ServerSage joined
[07:14] *** Yappocall left
[07:14] *** Yappocall joined
[07:20] *** kurahaupo left
[07:21] *** kresike joined
[07:21] <kresike> good morning all you happy perl6 people

[07:22] *** flightrecorder joined
[07:33] *** Psyche^ joined
[07:33] *** Patterner left
[07:33] *** Psyche^ is now known as Patterner

[07:41] <moritz> \o kresike 

[07:45] <sorear> o/

[07:49] *** FROGGS joined
[08:05] *** fgomez left
[08:05] <brrt> \o kresike

[08:12] *** fgomez joined
[08:17] *** fgomez left
[08:19] *** fgomez joined
[08:24] *** mucker joined
[08:26] *** daniel-s_ left
[08:27] *** daxim joined
[08:30] *** fgomez left
[08:31] *** cognominal joined
[08:31] *** fgomez joined
[08:32] *** dakkar joined
[08:40] *** cognominal left
[08:48] *** cognominal joined
[08:56] *** rhr_ left
[08:57] *** eternaleye left
[08:58] *** wamba joined
[08:59] *** cognominal left
[09:03] *** rhr joined
[09:06] *** cognominal joined
[09:07] * jnthn back

[09:07] <arnsholt> o/

[09:08] <arnsholt> Did you find the problem in Zavolaj with the struct tests?

[09:08] <jnthn> Now to finish my talk :)

[09:08] <jnthn> arnsholt: Not had chance yet.

[09:08] <arnsholt> Cool

[09:08] <arnsholt> I've not had much time the last month or so either

[09:11] *** markov1 left
[09:12] *** Circlepuller_ joined
[09:14] *** Circlepuller left
[09:15] *** cognominal left
[09:16] *** wamba left
[09:19] *** cognominal joined
[09:30] *** cognominal left
[09:30] *** mucker left
[09:33] <jnthn> Hm, after fixing Test::Mock I'm now realizing I probably have too much material in my talk to include it without being crazy tight on time...

[09:33] *** c1sung left
[09:34] *** fgomez left
[09:34] *** cognominal joined
[09:35] *** leont joined
[09:36] *** grondilu joined
[09:36] *** fgomez joined
[09:36] <grondilu> Is there a shorter way to write  map &f, @a  ?

[09:38] *** taniavs666 joined
[09:38] <grondilu> with metaoperators or something?

[09:38] <lumi__> r: sub f($x) { $x + 1 }; my @a = 0..2; say @a>>.&f

[09:38] <p6eval> rakudo 9af8f2: OUTPUT«1 2 3␤»

[09:38] <tadzik> even shorter? :)

[09:39] <jnthn> Note that if you use >> then it doesn't promise order, whereas map will evaluate things in order

[09:39] <grondilu> seems cool.  I'm surprised it works though, since f is not a method.

[09:40] <jnthn> Note the &

[09:40] *** c1sung joined
[09:40] <jnthn> $foo.&f really means f($foo)

[09:40] <grondilu> I had no clue.  Good to know.

[09:42] *** cognominal left
[09:43] *** mathw_ is now known as mathw

[09:48] *** cognominal joined
[09:56] *** cognominal left
[10:01] *** cognominal joined
[10:05] *** hypolin left
[10:07] <pmichaud> TimToady: Happy Birthday!

[10:08] <moritz> ooh

[10:08] <moritz> TimToady++

[10:08] <grondilu> Say I have two functions f and g with an identical signature.  How do I call f inside g with the exact same arguments, without tediously copying the arguments?

[10:08] <leont> Happy birthday!

[10:09] <moritz> r: sub f($a, $b) { say ::MY.keys }; f 1, 2

[10:09] <tadzik> Happy Birthday TimToady! \o/

[10:09] <p6eval> rakudo 9af8f2: OUTPUT«0␤»

[10:09] <moritz> r: sub f($a, $b) { say MY.keys }; f 1, 2

[10:09] <p6eval> rakudo 9af8f2: OUTPUT«0␤»

[10:09] <jnthn> grondilu: Capture syntax

[10:09] <moritz> meh, how did that work?

[10:09] <jnthn> moritz: MY::.keys

[10:10] <moritz> r: sub f(|c) { g(|c) }; sub g($a, $b) { say "$a|$b" }; f(1, 2)

[10:10] <jnthn> grondilu: sub g(|c) { f(|c) }

[10:10] <p6eval> rakudo 9af8f2: OUTPUT«1|2␤»

[10:10] <moritz> r: sub f($a, $b) { say MY::.keys }; f 1, 2

[10:10] <p6eval> rakudo 9af8f2: OUTPUT«$a $b $_ $/ $! call_sig $*DISPATCHER &?ROUTINE RETURN␤»

[10:10] <moritz> r: sub f($a, $b) { g(|::('call_sig')) }; f 1, 2; sub g($a, $b) { say "$a|$b" }

[10:10] <p6eval> rakudo 9af8f2: OUTPUT«No such method 'FLATTENABLE_LIST' for invocant of type 'CallContext'␤  in sub f at /tmp/aoC8uy882T:1␤  in block  at /tmp/aoC8uy882T:1␤␤»

[10:10] <moritz> nice try though :-)

[10:10] <jnthn> Uh, don't mess with call_sig :)

[10:11] <jnthn> We should really magically hide that or something... :)

[10:11] <moritz> r: sub f(|c ($a, $b)) { g(|c) }; sub g($a, $b) { say "$a|$b" }; f(1, 2)

[10:11] <p6eval> rakudo 9af8f2: OUTPUT«1|2␤»

[10:13] <grondilu> do I really have to explicitely write |c ($a, $b)?  Isn't there a default name for the capture of the current procedure signature?

[10:15] *** cognominal left
[10:15] <pmichaud> r: sub f($a, $b) { g( |callframe.args ); };  sub g($a, $b) { say "$a|$b" }; f(1,2);

[10:15] <p6eval> rakudo 9af8f2: OUTPUT«No such method 'args' for invocant of type 'CallFrame'␤  in sub f at /tmp/dFkwryI0ic:1␤  in block  at /tmp/dFkwryI0ic:1␤␤»

[10:16] <pmichaud> r: sub f($a, $b) { &g.callsame };  sub g($a, $b) { say "$a|$b" }; f(1,2);

[10:16] <p6eval> rakudo 9af8f2: OUTPUT«No such method 'callsame' for invocant of type 'Sub'␤  in sub f at /tmp/MA91S9rIaM:1␤  in block  at /tmp/MA91S9rIaM:1␤␤»

[10:17] <pmichaud> looks like NYI

[10:17] <pmichaud> might even be EASY :-)

[10:18] <grondilu> "callsame" would be nice

[10:18] <Timbus> wouldnt a wrapper function work. or even just using slurpy or @_ params?

[10:18] <pmichaud> .callsame is mentioned in S06

[10:19] <pmichaud> S06:2859

[10:20] *** wamba joined
[10:20] <jnthn> how on earth would &g.callsame work?

[10:20] *** anuby left
[10:20] <pmichaud> it calls &g with the arguments of the current Routine

[10:21] <pmichaud> (i.e., it doesn't have to go through a dispatcher, if &g is single dispatch)

[10:21] <jnthn> I really don't like to overload the meanings there

[10:21] *** kurahaupo joined
[10:21] <jnthn> callsame is always about a currently ongoing dispatch so far.

[10:21] <jnthn> As in, iterating a candidate list.

[10:22] <pmichaud> S06 says that's "callsame without an explicit destination"

[10:22] *** cognominal joined
[10:22] <pmichaud> i.e., callsame (the function) uses the currently ongoing dispatch, while .callsame (the method) starts a new dispatch

[10:23] <jnthn> You can say sub f(|c, $a, $b) { } fwiw

[10:25] <pmichaud> also, S06 seems to have a fair number of |$ fossils.

[10:25] <pmichaud>     &thermo.wrap( -> |$args { callwith(|$args) * 2 } );

[10:26] *** domidumont joined
[10:26] *** kurahaupo1 joined
[10:26] *** kurahaupo left
[10:27] <felher> TimToady: terjbe.ui !

[10:34] *** kurahaupo1 left
[10:48] *** grondilu left
[10:48] *** taniavs666 left
[10:49] <moritz> r: sub f(|c, $a, $b) { } 

[10:49] <p6eval> rakudo 9af8f2: OUTPUT«===SORRY!===␤Cannot put required parameter $a after variadic parameters␤at /tmp/DCfUbFDaFD:1␤»

[10:49] <moritz> r: sub f(|c, ($a, $b)) { } 

[10:49] <p6eval> rakudo 9af8f2: OUTPUT«===SORRY!===␤Cannot put required parameter  after variadic parameters␤at /tmp/81xyMGmwAS:1␤»

[10:49] <moritz> r: sub f(|c ($a, $b)) { } 

[10:49] <p6eval> rakudo 9af8f2:  ( no output )

[10:52] <jnthn> Hmm

[10:52] <jnthn> std: sub f(|c, $a, $b) { }

[10:52] <p6eval> std 77327a4: OUTPUT«Potential difficulties:␤  $b is declared but not used at /tmp/HDIlbmLdvn line 1:␤------> sub f(|c, $a, ⏏$b) { }␤  $a is declared but not used at /tmp/HDIlbmLdvn line 1:␤------> sub f(|c, ⏏$a, $b) { }␤ok 00:00 43m␤»

[11:00] *** leont left
[11:01] *** am0c left
[11:02] *** gootle left
[11:04] <jnthn> argh, prompt is broken?

[11:04] <jnthn> Did we release Rakudo with that?

[11:05] <jnthn> It needs Ctrl+Z here to actually react to the input :/

[11:05] *** Su-Shee_ joined
[11:06] <FROGGS> I heard ppl talking about the issue, so it really looks like it is in the release

[11:06] *** Circlepuller joined
[11:06] <jnthn> ah crap

[11:06] <jnthn> Did it come from the Parrot IO changes?

[11:06] <jnthn> I'd mistakenly understood it to be dealt with already and hoped that at worst it was Windows only.

[11:07] <FROGGS> ohh, I thought it was windows only

[11:07] <jnthn> Oh.

[11:07] <TimToady> problem on linux too

[11:07] *** Circlepuller_ left
[11:07] <jnthn> arrrgh

[11:08] <FROGGS> well, release early, release often

[11:08] <jnthn> .oO( revert early, revert often? )

[11:08] <FROGGS> hehe

[11:09] *** Su-Shee left
[11:15] * jnthn tries the lastest Parrot to make sure it isn't actually already fixed

[11:16] *** Su-Shee_ is now known as Su-Shee

[11:18] <jnthn> Actually, just saw the version history and don't see any applicable patches.

[11:24] <jnthn> The REPL calls readline_interactive, not readline. Maybe only the first was fixed.

[11:28] *** Vlavv_ left
[11:36] <jnthn> No, switched .get to use readline_interactive doesn't help either :/

[11:38] <jnthn> Did Rakudo actually get any value out of the Parrot IO changes? What if I shove us back to a Parrot version before the changes?

[11:39] <jnthn> phenny: tell pmichaud I think we can't put out a Star release until the prompt issue is resolved one way or another. It'll break a load of stuff. Debugger is broken, for example.

[11:39] <phenny> jnthn: I'll pass that on when pmichaud is around.

[11:40] <jnthn> phenny: tell pmichaud If our solution is "tie ourselves to a Parrot that wasn't busted" that's fine by me too.

[11:40] <phenny> jnthn: I'll pass that on when pmichaud is around.

[11:40] * jnthn goes to find something to snack on

[11:41] <moritz> jnthn: well, some small socket changes would need to be reverted

[11:44] <FROGGS> we are talking about the release 2012-08, right?

[11:45] <moritz> aye

[11:46] *** cognominal_ joined
[11:47] *** cognominal left
[11:48] <FROGGS> is this commit related to it? https://github.com/parrot/parrot/commit/eaa91d75988ea96e521c94e88c46706f1d0e3439

[11:49] <FROGGS> ohh, there are more commits about that

[11:49] <moritz> there was a whole big branch merge, no?

[11:50] <moritz> hm, or maybe that was already done earlier

[11:50] <FROGGS> still reading commits... there are quiet some ;o)

[11:50] <FROGGS> ya, thera was a io_cleanup1 merge on aug 27th

[11:52] *** domidumont left
[11:52] *** domidumont joined
[11:55] *** skids joined
[11:56] <dalek> Perlito: ff4958d | (Flavio S. Glock)++ | t5/01-perlito/25-syntax-defined-or.t:

[11:56] <dalek> Perlito: Perlito5 - parser - add tests for defined-or vs. match

[11:56] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/ff4958ddc5

[12:03] <jnthn> I'm curious why the REPL works

[12:03] *** cognominal_ left
[12:05] *** wamba left
[12:06] *** taniavs666 joined
[12:12] *** cognominal_ joined
[12:18] <jnthn> What's really odd is that a simple say prompt '>'; doesn't seem to have the issue now

[12:19] <moritz> define "now"

[12:19] <moritz> rakudo 2012.09?

[12:19] <jnthn> I dunno, I have a local patch that s/readline/readline_interactive/

[12:20] <jnthn> I need to undo it to be sure

[12:20] <jnthn> but it doesn't fix things in the debugger

[12:20] <dalek> Perlito: 7cdd110 | (Flavio S. Glock)++ | / (2 files):

[12:20] <dalek> Perlito: Perlito5 - parser - fix defined-or vs. match

[12:20] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/7cdd110514

[12:20] <dalek> Perlito: 8a25831 | (Flavio S. Glock)++ | html/perlito5.js:

[12:20] <dalek> Perlito: Perlito5 - rebuild

[12:20] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/8a25831a41

[12:20] *** fgomez left
[12:25] *** cognominal_ left
[12:26] *** flightrecorder left
[12:26] *** FROGGS left
[12:26] *** cognominal_ joined
[12:26] *** FROGGS_ joined
[12:26] *** flightre1 joined
[12:27] *** wamba joined
[12:28] *** Ulti left
[12:28] *** cognominal_ left
[12:28] *** cognominal joined
[12:32] <jnthn> ah, for now I just write my own non-busted prompt in the debugger so I can use it tomorrow

[12:39] *** wamba left
[12:43] *** cognominal left
[12:49] *** cognominal joined
[12:57] *** cognominal left
[12:58] *** PacoAir joined
[13:01] *** telex left
[13:02] *** telex joined
[13:06] *** cognominal joined
[13:08] *** skids left
[13:10] *** mikemol joined
[13:15] *** cognominal left
[13:16] *** wamba joined
[13:21] *** mdupont left
[13:21] *** mdupont joined
[13:22] *** GlitchMr joined
[13:23] <GlitchMr> Why almost every Twitter Bootstrap page looks so similar... that is annoying

[13:25] <GlitchMr> For example, perhaps I'm wrong, but Perl 6 Maven looks like something made with Twitter Bootstrap

[13:26] <GlitchMr> (but it's probably worse with things like Octopress - who changes default layout anyways?)

[13:26] *** grondilu joined
[13:28] <grondilu> perl6: .say for map &sin, 0, pi/2

[13:28] <p6eval> niecza v22-6-g9e5350d: OUTPUT«0␤1␤»

[13:28] <p6eval> ..rakudo 9af8f2: OUTPUT«This type cannot unbox to a native integer␤  in method reify at src/gen/CORE.setting:5239␤  in method reify at src/gen/CORE.setting:5141␤  in method reify at src/gen/CORE.setting:5141␤  in method reify at src/gen/CORE.setting:5231␤  in method reify at src/gen/CORE.…

[13:28] <GlitchMr> I have yet to see Octopress page which doesn't use default layout without changes and that isn't Octopress page itself

[13:28] <GlitchMr> perl6: &sin.arity

[13:28] <p6eval> rakudo 9af8f2, niecza v22-6-g9e5350d:  ( no output )

[13:28] <GlitchMr> perl6: say &sin.arity

[13:28] <p6eval> niecza v22-6-g9e5350d: OUTPUT«1␤»

[13:28] <p6eval> ..rakudo 9af8f2: OUTPUT«0␤»

[13:29] <GlitchMr> grondilu: it's because &sin has 0 arity

[13:29] <GlitchMr> It still wasn't fixed

[13:30] <grondilu> perl6: .say for map { sin($_) }, 0, pi/2

[13:30] <p6eval> rakudo 9af8f2, niecza v22-6-g9e5350d: OUTPUT«0␤1␤»

[13:30] <grondilu> .say for map { sin($_) }, 0, 0.2 ... 1

[13:30] <grondilu> perl6: .say for map { sin($_) }, 0, 0.2 ... 1

[13:30] <p6eval> rakudo 9af8f2: OUTPUT«Cannot call 'map'; none of these signatures match:␤:(&code, *@values)␤␤  in block  at /tmp/OHjy8Ig5Ux:1␤␤»

[13:30] <p6eval> ..niecza v22-6-g9e5350d:  ( no output )

[13:31] *** birdwindupbird left
[13:32] <GlitchMr> 0.2 ... 1? That wouldn't ever work

[13:32] <GlitchMr> It's sequence of numbers... 0.2, 1.2, 2.2, 3.2, 4.2, 5.2

[13:32] <GlitchMr> It never touches 1, so it's infinite

[13:32] <grondilu> r: say 0, 0.2 ... 1

[13:32] <p6eval> rakudo 9af8f2: OUTPUT«0 0.2 0.4 0.6 0.8 1␤»

[13:32] <GlitchMr> Oh, I forgot about 0

[13:32] <GlitchMr> Sorry

[13:33] <grondilu> r: .1

[13:33] <p6eval> rakudo 9af8f2:  ( no output )

[13:33] <grondilu> r: say .1

[13:33] <p6eval> rakudo 9af8f2: OUTPUT«0.1␤»

[13:34] <GlitchMr> grondilu: well... I think it's because subroutine itself also is part of sequence

[13:34] <GlitchMr> perl6: .say for map { sin($_) }, (0, 0.2 ... 1)

[13:34] <p6eval> rakudo 9af8f2: OUTPUT«0␤0.198669330795061␤0.389418342308651␤0.564642473395035␤0.717356090899523␤0.841470984807897␤»

[13:34] <p6eval> ..niecza v22-6-g9e5350d: OUTPUT«0␤0.19866933079506122␤0.38941834230865052␤0.56464247339503537␤0.71735609089952279␤0.8414709848078965␤»

[13:34] <grondilu> ok

[13:35] <GlitchMr> I've feeling that ... is too clever for its good

[13:35] <GlitchMr> But sequences in Excel are even more clever, so I don't know

[13:36] <GlitchMr> I have no idea how Excel can continue sequences like 1, 52, 29, 421.521, 43, 3.14, 582

[13:36] <grondilu> Is there an actual logic in this one?

[13:37] <GlitchMr> I have no idea

[13:37] <GlitchMr> It does something, but I don't know what - I'm currently on Linux

[13:38] *** xinming_ joined
[13:38] <GlitchMr> LibreOffice appears to copy every sequence + 1 when the sequence isn't simple 1, 2, 3, 4, 5

[13:39] <GlitchMr> But Excel does something way more complex

[13:39] <GlitchMr> In LibreOffice, sequences like 1, 2, 4 are expanded with 2, 3, 5, 3, 4, 6, 4, 5, 7

[13:40] *** colomon joined
[13:41] *** replore joined
[13:42] *** benabik left
[13:42] *** xinming left
[13:42] * colomon 's MBP is fixed!

[13:42] *** benabik joined
[13:43] <grondilu> I could compile rakudo today.  Thanks for your work, guys :)

[13:43] <GlitchMr> > (1, 2, 4, sub ($a, $, $) { $a + 1 } ... *)[^10]                                                                                                                                                                                

[13:43] <GlitchMr> 1 2 4 2 3 5 3 4 6 4

[13:44] *** cognominal joined
[13:44] <grondilu> "..." should not accept a code as a first argument, imho.

[13:45] <colomon> grondilu: why not?

[13:45] <moritz> grondilu: it's very versatile

[13:45] <grondilu> so we could write map &f, 1, 2 ... 4

[13:45] <colomon> n: say ({ rand } ... * )[^10]

[13:45] <p6eval> niecza v22-6-g9e5350d: OUTPUT«0.11837241990415957 0.83748304882900926 0.85082873322573893 0.73417876369048785 0.10460571344225002 0.52821420018012366 0.43011551230685574 0.57213686852349754 0.85243803023008535 0.68109084324962033␤»

[13:45] <GlitchMr> grondilu: just no...

[13:46] <grondilu> colomon: indeed, you're right. 

[13:46] <GlitchMr> That would mean varying level of precedence

[13:46] <GlitchMr> That couldn't be determined until runtime

[13:46] <moritz> grondilu: that's a question of precedence, not of whether ... accepts a code object or not

[13:46] <grondilu> ok ok

[13:47] <grondilu> perl6: .say for map *+1, 0, 1 ... 3

[13:47] <p6eval> niecza v22-6-g9e5350d:  ( no output )

[13:47] <p6eval> ..rakudo 9af8f2: OUTPUT«Cannot call 'map'; none of these signatures match:␤:(&code, *@values)␤␤  in block  at /tmp/tYvczcuaW7:1␤␤»

[13:48] <grondilu> I guess we do need parens indeed.

[13:48] <GlitchMr> But... subs with arguments should be forbidden by ...

[13:48] <GlitchMr> The question is... why this even works

[13:48] <grondilu> perl6: .say for map *+1, (0, 1 ... 3)

[13:48] <p6eval> rakudo 9af8f2, niecza v22-6-g9e5350d: OUTPUT«1␤2␤3␤4␤»

[13:49] <GlitchMr> Your example with { rand } makes sense

[13:49] <GlitchMr> But when function has arity, it simply doesn't make sense

[13:51] *** raiph joined
[13:52] <grondilu> yeah, it should accept only 0 arity on first position, 1 arity on second and so on.  Shouldn't it?

[13:53] *** thou joined
[13:54] <colomon> Why?  taking too much arity too early will definitely fail, but it's very reasonable to have "too little"

[13:54] <colomon> n: say (0, 1, 2, { rand } ... *) [^10]

[13:54] <GlitchMr> He probably meant "at most"

[13:54] <p6eval> niecza v22-6-g9e5350d: OUTPUT«===SORRY!===␤␤Unable to parse bracketed infix at /tmp/5l97LSZph9 line 1:␤------> say (0, 1, 2, { rand } ... *) [⏏^10]␤Couldn't find final ']'; gave up at /tmp/5l97LSZph9 line 1:␤------> say (0, 1, 2, { rand } ... *)…

[13:54] <colomon> n: say (0, 1, 2, { rand } ... *)[^10]

[13:54] <p6eval> niecza v22-6-g9e5350d: OUTPUT«0 1 2 0.91410435639047272 0.24678441521096248 0.16036482162790597 0.33466130650353682 0.31822322696364636 0.77577368904639676 0.59004591106904947␤»

[13:54] *** mucker joined
[13:54] <moritz> r: say <== map *+1 <== 1, 2, 4 ... 64

[13:54] <p6eval> rakudo 9af8f2: OUTPUT«===SORRY!===␤Preceding context expects a term, but found infix <== instead␤at /tmp/Xlm2PejEAo:1␤»

[13:55] <GlitchMr> perl6: say() <== map *+1 <== 1, 2, 4 ... 64

[13:55] <p6eval> niecza v22-6-g9e5350d: OUTPUT«␤Unhandled exception: Feed ops NYI␤  at /home/p6eval/niecza/lib/CORE.setting line 1437 (die @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3353 (infix:<<==> @ 4) ␤  at /tmp/fdJEgE4Ii3 line 1 (mainline @ 4) ␤  at /home/p6eval/niecza/lib/CORE.setting li…

[13:55] <p6eval> ..rakudo 9af8f2: OUTPUT«2 3 5 9 17 33 65␤»

[13:55] <grondilu> (0, 1, 2, { rand } ... *) could be interpreted as list concatenation of (0, 1, 2) and ({ rand } ... * )

[13:56] <GlitchMr> Actually, I've interpreted it like that at first

[13:56] <colomon> grondilu: trying to come up with interpretations which make the parser work harder is a bad idea

[13:56] <GlitchMr> But, it's probably best syntax that would work

[13:56] <GlitchMr> Unless you have better idea

[13:56] <colomon> n: say (0, 1, 2,  *.rand ... *)[^10]

[13:56] <p6eval> niecza v22-6-g9e5350d: OUTPUT«0 1 2 1.2861544635548043 0.20919612994498515 0.19472512659656913 0.089665246528384132 0.067629248614021337 0.03793104336496745 0.02617297972594048␤»

[13:56] <GlitchMr> You don't have to use sequences if you don't like them

[13:57] <GlitchMr> But they are a nice shortcut

[13:57] <GlitchMr> We could just program in assembly and use JMP everywhere

[13:58] <GlitchMr> But we don't.

[13:58] <GlitchMr> At least, most of time.

[13:59] <GlitchMr> (I know that you would usually use conditional jumps in assembly)

[14:01] * grondilu just looked at the code for "..."

[14:01] <raiph> jnthn: note http://irclog.perlgeek.de/perl6/2012-09-19#i_6002246 thru http://irclog.perlgeek.de/perl6/2012-09-19#i_6002337

[14:02] <GlitchMr> I find it interesting that in Brainfuck you have highlevelish while(){} loop

[14:02] *** flightre1 left
[14:02] *** FROGGS_ left
[14:04] <jnthn> raiph: thanks

[14:04] <raiph> jnthn. yw. especially last entry 

[14:05] <GlitchMr> Wait... why $*IN.get would be different too $*IN.get()?

[14:05] <jnthn> I...dunno.

[14:06] <GlitchMr> That is the only difference I see

[14:06] <raiph> and variation even on same OS: http://irclog.perlgeek.de/perl6/2012-09-19#i_6002353

[14:07] <GlitchMr> While it doesn't happen on my machine, I'm going to try that on minefield

[14:07] <GlitchMr> (that would be VM)

[14:08] <GlitchMr> It doesn't happen on my VM

[14:09] *** flightrecorder joined
[14:09] <dalek> Perlito: 06276a4 | (Flavio S. Glock)++ | src5/lib/Perlito5/Javascript3/CORE.pm:

[14:09] <dalek> Perlito: Perlito5 - js3 - fix substr()

[14:09] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/06276a4636

[14:09] <jnthn> GlitchMr: Does the debugger work for you, ooc?

[14:09] <GlitchMr> What is "ooc"?

[14:09] <GlitchMr> And yes, it works

[14:10] <GlitchMr> 'out of context'?

[14:10] *** wtw left
[14:11] <tadzik> curiosity

[14:11] *** stopbit joined
[14:13] <raiph> GlitchMr: ooc = out of curiosity

[14:13] *** mucker left
[14:14] <moritz> .oO( out of countries )

[14:14] *** mucker joined
[14:15] *** FROGGS_ joined
[14:17] <[Coke]> I'd rather more pages looked like twitter bootstrap than like the normal default web page.

[14:20] *** wk left
[14:23] <jnthn> GlitchMr: out of curiosity :)

[14:24] <jnthn> GlitchMr: Did you hit enter to single-step?

[14:24] <GlitchMr> yes

[14:24] <jnthn> ok

[14:24] <jnthn> that's broken for me :(

[14:24] <jnthn> well, I have a hack now locally...

[14:26] *** cognominal left
[14:28] <jnthn> sleep &

[14:30] *** fgomez joined
[14:30] <FROGGS_> sleep well

[14:32] <tadzik> heh, I'm plenty of timezones away and I wouldn't mind a nap either

[14:33] <FROGGS_> dito

[14:33] *** cognominal joined
[14:34] *** replore left
[14:34] *** skids joined
[14:36] *** kaare_ joined
[14:42] *** spider-mario joined
[14:48] <[Coke]> if there's a way we can write an automated test for this sort of thing, that'd be awesome.

[14:51] *** thou left
[14:56] * [Coke] sees resistances to enums as strings because of == ... but if you expect == to work, then you expect them to be integers, which means you should expect 0 to be false.

[14:58] <moritz> well, old code would break through that change

[14:58] <moritz> but if that's something we really want, it shouldn't stop us

[15:00] *** taniavs666 left
[15:06] *** colomon left
[15:07] *** thou joined
[15:08] *** taniavs666 joined
[15:09] *** brrt left
[15:09] *** grondilu left
[15:11] *** birdwindupbird joined
[15:14] *** taniavs666 left
[15:24] *** Targen joined
[15:32] *** colomon joined
[15:34] *** hoelzro joined
[15:34] *** wamba left
[15:41] *** orafu joined
[15:48] *** hoelzro is now known as hoelzro|away

[15:49] *** wamba joined
[15:52] *** preflex joined
[15:55] *** araujo left
[15:55] *** araujo joined
[15:56] *** birdwindupbird left
[15:57] *** kaleem left
[15:58] *** Targen left
[16:00] *** flightrecorder left
[16:00] *** FROGGS_ left
[16:00] *** cognominal left
[16:02] *** tokuhiro_ joined
[16:03] *** wk joined
[16:05] *** fhelmberger left
[16:08] *** literal_ is now known as literal

[16:09] *** MayDaniel joined
[16:13] *** colomon left
[16:14] <kresike> bye folks

[16:14] *** kresike left
[16:14] *** wamba left
[16:18] *** colomon joined
[16:28] *** wamba joined
[16:30] *** sjohnson left
[16:30] *** sjohnson joined
[16:33] *** sivoais left
[16:36] *** dakkar left
[16:39] *** sivoais joined
[16:44] *** zby_home joined
[16:44] *** Vlavv_ joined
[16:47] *** sjohnson left
[16:47] *** sjohnson joined
[16:48] *** bruges left
[16:49] *** bruges joined
[16:52] *** bruges_ joined
[16:53] *** fgomez left
[16:54] *** bruges left
[16:56] *** Chillance joined
[16:58] *** bruges_ left
[16:58] *** preflex left
[17:00] *** zby_home__ joined
[17:00] *** zby_home left
[17:00] *** kaare__ joined
[17:00] *** kaare_ left
[17:02] *** DarthGandalf left
[17:04] *** DarthGandalf joined
[17:07] <sorear> good * #perl6

[17:07] <colomon> o/

[17:09] *** bruges joined
[17:10] *** jlaire joined
[17:18] <raiph> hi sorear

[17:18] *** cognominal joined
[17:20] <pmichaud> can someone bring me up to speed on the status of the readline / prompt issue?  I hadn't seen any bug reports about it.

[17:20] <phenny> pmichaud: 11:39Z <jnthn> tell pmichaud I think we can't put out a Star release until the prompt issue is resolved one way or another. It'll break a load of stuff. Debugger is broken, for example.

[17:20] <phenny> pmichaud: 11:40Z <jnthn> tell pmichaud If our solution is "tie ourselves to a Parrot that wasn't busted" that's fine by me too.

[17:21] <pmichaud> I'm happy with "tie ourselves to a non-busted Parrot", although I think that involves a fair bit of reverting.

[17:21] <pmichaud> We can also basically release Star using 2012.08 compiler (and corresponding nqp/parrot)

[17:22] <pmichaud> which would mean that 2012.08 would be almost identical to 2012.09 .

[17:22] *** cognominal_ joined
[17:22] *** replore joined
[17:24] <[Coke]> we could also try to get a patched parrot out the door if it's an obvious fix.

[17:24] *** cognominal left
[17:33] <pmichaud> testing rc1 under windows now

[17:33] *** replore left
[17:47] <pmichaud> repl command history seems to work for me under windows

[17:47] <pmichaud> I'll try the debugger

[17:49] *** benabik left
[17:55] <pmichaud> command history seems to work there also, although I still don't have proper screen colors/formatting

[17:56] <raiph> pmichaud: i think felher suggested his (the?) problem was older than 2012.08

[17:57] <pmichaud> raiph: that may be so, although jnthn++ was citing some issues earlier today

[17:57] <felher> raiph: no. I merely said my problem occured when switching to a new machine, so it doesn't have to be a problem with up-to-date rakudo :)

[17:58] <pmichaud> ah, jnthn++ was listing "prompt" as a problem.  I'll try that

[17:58] <pmichaud> http://irclog.perlgeek.de/perl6/2012-09-27#i_6021962

[17:58] <felher> raiph: or this was at least what i thought i've said :)

[17:59] <pmichaud> Yes, "prompt" definitely fails for me under windows.

[18:00] <pmichaud> ....and under linux.

[18:00] *** cognominal_ left
[18:03] *** cognominal joined
[18:03] <sorear> o/ felher, raiph

[18:03] <felher> o/ sorear :)

[18:05] <raiph> felher: ah. ok. do you think the problem you had looks like it might well be the same as the one jnthn found?

[18:05] <pmichaud> so, we definitely cannot use 2012.09 compiler for a star release.  (We can create a 2012.09.1, or we can go back and use 2012.08.)

[18:06] <[Coke]> does prompt work in git-latest?

[18:06] <pmichaud> I'll look.

[18:06] <pmichaud> I'll have to build it.

[18:06] * [Coke] votes "ever onward" where possible.

[18:06] <pmichaud> same here.

[18:07] <[Coke]> pmichaud: I'll test it out on OS X.

[18:07] <pmichaud> I have a boringly simple test program.

[18:07] <pmichaud> (nopasting)

[18:07] <felher> raiph: might well be :) I can not check at the moment, 'caue the machine i had the problem on is down for some time.

[18:08] *** cognominal_ joined
[18:08] *** cognominal left
[18:09] <pmichaud> https://gist.github.com/3795470   # test program

[18:10] <felher> Hm, my problem occured with $*IN.get. I didn't even need prompt, so this might be a different problem. :)

[18:11] *** MikeFair_ left
[18:12] <pmichaud> jnthn's problem appears to have been with prompt.

[18:12] <pmichaud> regardless, it's not something we can have a regression on.

[18:14] <felher> right

[18:17] <skids> Was http://irclog.perlgeek.de/perl6/2012-09-26#i_6020795 replicatible by anyone else?

[18:18] *** kurahaupo joined
[18:20] *** benabik joined
[18:30] <[Coke]> pmichaud: still an issue on os x with git latest. (have to hit ^D, not just enter)

[18:31] <[Coke]> skids: I can duplicate it, aye

[18:35] <pmichaud> [Coke]: was that git latest with parrot, ooc?

[18:36] *** cognominal joined
[18:37] *** thou left
[18:37] *** cognominal_ left
[18:39] <pmichaud> i.e., you were using parrot latest?

[18:41] *** thou joined
[18:42] <pmichaud> ah.  Rakudo's HEAD seems to "fix" the problem in https://github.com/rakudo/rakudo/commit/b72c434660038468df41cd64876fdc230bdc0405

[18:42] <pmichaud> it adds an explicit flush to $*OUT.  Previously Parrot would autoflush stdout when reading input from stdin.

[18:43] <[Coke]> pmichaud: I grabbed rakudo nom, git clean -xdf'd, and then rebuilt nqp & parrot

[18:43] <pmichaud> ...and it failed on osx?  weird.

[18:43] <pmichaud> oh, wait.

[18:43] <[Coke]> I am pretty sure I have that commit

[18:43] <pmichaud> let me re-test.

[18:43] <[Coke]> I think the problem is IN, not OUT, no?

[18:44] <pmichaud> one of the problems with "prompt" in 2012.09   is that    my $abc = prompt "abc: ";   doesn't flush $*OUT prior to waiting for the input

[18:44] <[Coke]> I have that commit, true.

[18:44] *** cognominal left
[18:44] <[Coke]> oh. I thought the problem was that hitting enter didn't stop prompt.

[18:44] <pmichaud> thus the user never sees the prompt

[18:44] <pmichaud> that may be a problem also, I need to check that.

[18:45] <pmichaud> I was simply looking for the prompt, not seeing it, and saying "oh, that's a regression"

[18:45] <[Coke]> I see the prompt.

[18:45] <pmichaud> on my system, though, rakudo head doesn't seem to require the ^D

[18:45] <rurban> pmichaud: Did you ever checked for an empty cpu_type? https://github.com/parrot/parrot/issues/846 I changed it now to "unknown"

[18:45] <rurban> I don't think you care about cpu types.

[18:45] *** kurahaupo left
[18:46] <pmichaud> cpu type hasn't ever popped up on my radar, no.

[18:46] <[Coke]> I see no reference to cpu_type in rakudo/src

[18:46] <rurban> good

[18:46] <[Coke]> (only in parrot specific stuff in the install)

[18:47] *** cognominal joined
[18:55] *** cognominal left
[18:56] *** fgomez joined
[18:58] *** arlinius joined
[18:58] <dalek> Perlito: 8b919d2 | (Flavio S. Glock)++ | / (5 files):

[18:58] <dalek> Perlito: Perlito5 - js3 - use FETCH() method

[18:58] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/8b919d2fff

[19:01] <pmichaud> felher: the problem you're encountering is similar to the one that Coke++ and jnthn++ are reporting.

[19:04] <pmichaud> the fix in b72c4346 isn't sufficient to resolve the regression.

[19:08] <pmichaud> https://gist.github.com/3795822  # difference from 2012.08 to current Rakudo HEAD

[19:09] <pmichaud> I have to get some lunch and pick up kids, I'll start filing tickets when I get done with those activities.  Others are welcome to file tickets and report problems also.

[19:09] <dalek> Perlito: 25e21d4 | (Flavio S. Glock)++ | / (2 files):

[19:09] <dalek> Perlito: Perlito5 - js3 - use assign()

[19:09] <dalek> Perlito: review: https://github.com/fglock/Perlito/commit/25e21d49a8

[19:12] *** leprevost joined
[19:17] *** sirrobert joined
[19:17] <sirrobert> hi p6 =)

[19:17] <phenny> sirrobert: 26 Sep 05:35Z <GlitchMr> tell sirrobert or * + * for the anonymous function you want

[19:25] *** pernatiy joined
[19:26] *** sjohnson left
[19:27] *** sjohnson joined
[19:27] <[Coke]> rurban pointed out this bug: https://github.com/parrot/parrot/issues/834

[19:28] *** mtk left
[19:30] *** mtk joined
[19:31] *** zby_home__ left
[19:32] *** sjohnson left
[19:32] *** sjohnson joined
[19:33] *** daxim left
[19:39] *** birdwindupbird joined
[19:41] *** fgomez left
[19:52] <masak> TimToady: happy 0x3a-th birthday.

[19:53] <PerlJam> masak++

[19:53] <PerlJam> TimToady: Happy Birthday!

[19:54] <sorear> happy birthday!

[19:55] *** arlinius left
[19:55] <flussence> same day as google too, according to their logo scribble...

[19:56] <[Coke]> r: say 0x3a

[19:56] <p6eval> rakudo 9af8f2: OUTPUT«58␤»

[19:56] <[Coke]> r: say 2012-1954

[19:56] <p6eval> rakudo 9af8f2: OUTPUT«58␤»

[19:56] <PerlJam> Coke: nah, they're celebrating Larry's birthday  too  :)

[19:56] <masak> r: say 2012 - 1954

[19:56] <p6eval> rakudo 9af8f2: OUTPUT«58␤»

[19:57] <masak> g'ah, becursed train lag.

[19:57] <[Coke]> (just checking, as '54 is my mom's)

[19:57] <masak> r: say 0b111010

[19:57] <p6eval> rakudo 9af8f2: OUTPUT«58␤»

[19:57] *** birdwindupbird left
[19:58] * masak smiles at still being able to convert directly from hex to bin

[19:58] <masak> not that it's particularly hard.

[19:58] <masak> my uncle taught it to me when I was 0b100.

[19:59] *** cognominal joined
[19:59] *** birdwindupbird joined
[20:00] <sjohnson> happy brithday perl man!

[20:01] *** GlitchMr left
[20:01] * masak imagines a Superman suit with a big letter P on the front

[20:02] <sorear> has he worn that?

[20:12] <sirrobert> r: "one   two   three" ~~ m/one \s* two \s* three/;

[20:12] <p6eval> rakudo 9af8f2:  ( no output )

[20:12] <sirrobert> r: say "one   two   three" ~~ m/one \s* two \s* three/;

[20:12] <p6eval> rakudo 9af8f2: OUTPUT«｢one   two   three｣␤␤»

[20:12] <sirrobert> is there a matching mode that automagically ignores whitespace differences?

[20:13] <sirrobert> to make something like this work:   "one two three" ~~ m/one two three/

[20:13] <sirrobert> ?

[20:13] <sorear> r: say "one   two   three" ~~ mm/one two three/;

[20:13] <p6eval> rakudo 9af8f2: OUTPUT«===SORRY!===␤Confused␤at /tmp/Tr8vVFdqIS:1␤»

[20:13] <sorear> r: say "one   two   three" ~~ ms/one two three/;

[20:13] <p6eval> rakudo 9af8f2: OUTPUT«｢one   two   three｣␤␤»

[20:13] <sirrobert> hmm cool, thanks

[20:13] <sorear> r: say "one   two   three" ~~ m:s/one two three/;

[20:13] <p6eval> rakudo 9af8f2: OUTPUT«｢one   two   three｣␤␤»

[20:13] <sorear> r: say "one   two   three" ~~ m/:s one two three/;

[20:13] <p6eval> rakudo 9af8f2: OUTPUT«｢one   two   three｣␤␤»

[20:14] <sirrobert> hrm

[20:14] *** kaare__ left
[20:14] <sirrobert> is there any difference?  (between ms, m:s, m/:s)

[20:14] <sorear> no

[20:14] <sirrobert> ok, cool

[20:14] <sirrobert> thanks

[20:15] <sorear> under the scope of :s (short for :sigspace), " " means <.ws>

[20:15] <sorear> ws can be overridden in a grammar; its default definition is \s* *but* if between two \w, at least one space is needed

[20:16] <masak> sorear: not to my knowledge.

[20:16] <masak> (re "has he worn that?")

[20:16] <[Coke]> 16:10 <@pmichaud> we almost certainly won't be able to issue the star release  today... too many IO regressions.

[20:16] <sorear> r: say "one+two" ~~ m:s /one "+" two/ # no space needed here

[20:16] <[Coke]> 16:10 <@pmichaud> I'm trying to get them all catalogged... _and_ I have other  (non-rakudo) events taking place today :-|

[20:16] <p6eval> rakudo 9af8f2: OUTPUT«｢one+two｣␤␤»

[20:16] <[Coke]> (from #parrot)

[20:16] <sorear> r: say "oneplustwo" ~~ m:s /one "plus" two/ # but the space IS mandatory here

[20:16] <p6eval> rakudo 9af8f2: OUTPUT«#<failed match>␤»

[20:17] *** skids left
[20:18] *** cognominal left
[20:25] *** Targen joined
[20:25] <pmichaud> (from #parrot)  https://github.com/parrot/parrot/issues/847   # one of the .readline issues

[20:26] *** birdwindupbird left
[20:49] <raiph> masak: hobbified: "[JS] modules don't install themselves into a global namespace." chromatic: "Perl 6 sort of edged toward that idea, but I don't remember if it ever made it quite far enough."

[20:49] <raiph> from http://www.reddit.com/r/perl/comments/10j9xp/what_modern_javascript_can_learn_from_modern_perl/c6e1w22

[20:52] *** flightrecorder joined
[20:57] *** hoelzro|away is now known as hoelzro

[21:02] <[Coke]> if I have an old commit checked out, and rather than going all the way to HEAD, I want to just progress one more commit in that direction, is there shortcut for that?

[21:03] *** spider-mario left
[21:04] <doy> no, because there's not really any way to tell what "one more commit" actually means in that context (in the presence of branches, for instance)

[21:16] *** raiph left
[21:17] *** Circlepuller_ joined
[21:19] *** Circlepuller left
[21:20] *** arlinius joined
[21:21] *** Circlepuller joined
[21:22] *** Circlepuller_ left
[21:25] *** benabik left
[21:44] *** araujo left
[21:44] *** mucker left
[21:45] *** robinsmidsrod joined
[21:54] *** fgomez joined
[21:56] *** skids joined
[21:57] *** flightrecorder left
[21:57] *** araujo joined
[22:04] <TimToady> I think it's useful for the first enum to boolify to False by default; many enums want a "non-value"

[22:04] <TimToady> I see little use case for making all enums True by default

[22:06] *** thou left
[22:08] *** felher joined
[22:08] <rurban> pmichaud: parrot readline #847 fixed in https://github.com/parrot/parrot/commit/1fe3b78b36

[22:09] *** mtk left
[22:09] <rurban> but on windows we still return \r\n ending strings. I'm not sure 100% if that's a regression.

[22:12] *** thou joined
[22:12] *** wamba left
[22:15] *** preflex joined
[22:16] *** stopbit left
[22:16] *** Circlepuller_ joined
[22:17] *** Circlepuller left
[22:18] *** hoelzro is now known as hoelzro|away

[22:22] *** mtk joined
[22:28] *** Moukeddar joined
[22:29] *** Moukeddar left
[22:29] *** Moukeddar joined
[22:30] *** Moukeddar left
[22:30] *** Moukeddar joined
[22:30] *** Moukeddar left
[22:47] *** replore_ joined
[22:51] *** ServerSage left
[22:53] *** Targen left
[22:54] *** yarp joined
[22:58] *** replore_ left
[23:02] *** ServerSage joined
[23:05] *** replore_ joined
[23:06] *** replore_ left
[23:06] *** PacoAir left
[23:07] *** _jaldhar_ left
[23:07] *** _jaldhar_ joined
[23:11] *** whiteknight joined
[23:11] *** ServerSage left
[23:12] *** kid51 joined
[23:16] *** kurahaupo joined
[23:17] *** ServerSage joined
[23:24] <japhb> Hippo Birdie Two Ewes, TimToady!

[23:31] *** Chillance left
[23:35] *** _jaldhar_ left
[23:43] *** yarp left
[23:44] *** MayDaniel left
[23:53] *** dayangkun joined
[23:53] *** dayangkun left
[23:53] *** popl joined
[23:54] <diakopter> pmichaud: ping

[23:55] *** blez joined
[23:58] <diakopter> phenny: tell pmichaud when used as a queue (push/shift or unshift/pop), afaict qrpa's storage will grow without bounds as time goes on. I recommend converting it to a ring buffer..

[23:58] <phenny> diakopter: I'll pass that on when pmichaud is around.

[23:58] <blez> does perl5-6 use parrot currently?

[23:59] <diakopter> one implementation of Perl 6 does

[23:59] <blez> what about python? wasn't parrot going to unify perl and python's libraries

[23:59] <blez> (something I've read years ago)

