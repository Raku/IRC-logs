[00:00] *** tokuhiro_ joined
[00:04] *** envi_ joined
[00:05] *** thou joined
[00:08] *** tokuhiro_ left
[00:23] *** mtk left
[00:23] *** Chillance left
[00:41] *** tokuhiro_ joined
[00:42] <felher> night folks 

[00:45] *** overrosy joined
[00:45] <tadzik> 'night

[00:49] *** overrosy left
[00:52] <colomon> o/

[01:01] <sorear> good * #perl6

[01:02] <tadzik> hello sorear 

[01:03] *** tokuhiro_ left
[01:03] *** [particle]1 joined
[01:06] *** [particle] left
[01:11] <[Coke]> (cookies) I can sell any of you fine folks girl scout cookies on behalf of my daughters!

[01:12] *** ascrazy left
[01:16] *** scott__ joined
[01:20] <colomon> oooo, Tagalongs..... drool....

[01:22] <sorear> ?

[01:23] <[Coke]> kind of girl scout cookie. chocolate shell, peanut butter filling

[01:24] <[Coke]> only <mumble> dollars a box!

[01:24] <colomon> it's not the dollars that get you, it's the calories...

[01:26] <[Coke]> it's worse when your wife is the cookie mom. We're drowning in boxes here.

[01:26] *** tyatpi joined
[01:32] * [Coke] accidentally opens up a box of samoas.

[01:39] <japhb> fsvo "accidentally"

[01:39] <sorear> peanut butter does not generally agree with me.

[01:39] <sorear> japhb: o/

[01:40] <japhb> o/

[01:40] * japhb "accidentally" eats the last Trefoil

[01:42] <japhb> I wish I had some more Irish soda bread to accidentally eat ....

[01:57] <colomon> .... oooo, that's good stuff too!

[01:58] *** whiteknight left
[02:20] *** leprevost joined
[02:23] *** woosley joined
[02:38] *** havenn joined
[02:41] *** localhost left
[02:48] *** Trashlord left
[02:49] *** Trashlord joined
[03:01] *** orafu left
[03:01] *** orafu joined
[03:02] *** pochi left
[03:03] *** mdupont joined
[03:06] *** havenn left
[03:07] *** lue left
[03:16] *** scott__ left
[03:16] *** scott__ joined
[03:40] *** envi_ left
[03:53] *** bbkr left
[03:53] *** bbkr joined
[03:54] *** bbkr_ joined
[03:54] *** bbkr left
[03:54] *** bbkr_ is now known as bbkr

[03:59] *** orafu left
[03:59] *** orafu joined
[04:10] *** lestrrat left
[04:11] *** lestrrat joined
[04:14] *** skids left
[04:17] *** stepnem left
[04:22] *** thou left
[04:33] *** overrosy joined
[04:34] <diakopter> Mew

[04:34] *** bacek_at_work left
[04:35] *** aloha left
[04:36] <sorear> \o/ diakopter !!!

[04:36] *** leprevost left
[04:38] <diakopter> niecza: say ^&$1^&$1

[04:38] <p6eval> niecza v15-4-g1f35f89: OUTPUT«Use of uninitialized value in numeric context␤  at /home/p6eval/niecza/lib/CORE.setting line 1222 (warn @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 257 (Any.Numeric @ 6) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /home/p6eval/niecza/lib/CORE.se…

[04:39] *** lestrrat left
[04:41] *** lestrrat joined
[04:41] <diakopter> niecza: say 1^^1

[04:41] <p6eval> niecza v15-4-g1f35f89: OUTPUT«Unhandled exception: System.Exception: Unable to find lexical &infix:<^^> in mainline␤  at Niecza.CLRBackend.NamProcessor.ResolveLex (System.String name, Boolean upf, System.Int32& uplevel, Boolean core) [0x00000] in <filename unknown>:0 ␤  at Niecza.CLRBac…

[04:41] <diakopter> that might should say &infix:<^^> NYI

[04:42] <diakopter> sorear: hi

[04:44] <diakopter> pugs: say 1^^2

[04:44] <p6eval> pugs b927740: OUTPUT«␤»

[04:45] <diakopter> niecza: say ^4^4..4

[04:45] <p6eval> niecza v15-4-g1f35f89: OUTPUT«one(0..^4..4, 4..4)␤»

[04:45] <diakopter> hee

[04:46] *** overrosy left
[04:50] <diakopter> niecza: say 1..^^4

[04:50] <p6eval> niecza v15-4-g1f35f89: OUTPUT«1..^4␤»

[04:51] *** aloha joined
[04:52] <sorear> diakopter: was "hi" a ping or a pong?

[04:52] <diakopter> pong

[04:54] <diakopter> niecza: say (@4-@4)/(@4*@4)

[04:54] <p6eval> niecza v15-4-g1f35f89: OUTPUT«0␤»

[04:55] *** kaleem joined
[05:02] *** wbook joined
[05:02] <diakopter> niecza: say %2

[05:02] <p6eval> niecza v15-4-g1f35f89: OUTPUT«Unhandled exception: Unmatched key in Hash.LISTSTORE␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (Any.hash @ 1) ␤  at <unknown> line 0 (ExitRunloop @ 0) ␤  at /tmp/YSprTZMAtf line 1 (mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3838 (A…

[05:02] <diakopter> eh

[05:03] *** overrosy joined
[05:12] <diakopter> niecza: say 1

[05:12] <p6eval> niecza v15-4-g1f35f89: OUTPUT«1␤»

[05:15] *** [particle]1 is now known as [particle]

[05:36] *** sudokode left
[05:45] *** lestrrat left
[05:46] *** lestrrat joined
[05:52] *** birdwindupbird joined
[05:57] *** Teratogen joined
[05:57] <Teratogen> I didn't hit her, it's not true, it's bullshit I did not hit her, i did NOT!  Oh, hi, TimToady.

[06:05] *** NamelessTee joined
[06:05] *** scott___ joined
[06:05] *** scott__ left
[06:05] <sorear> calm down.  hi.

[06:10] *** NamelessTee left
[06:10] *** lestrrat left
[06:11] *** lestrrat joined
[06:13] *** stepnem joined
[06:49] *** wbook left
[07:02] *** benabik left
[07:02] *** benabik joined
[07:03] *** woosley left
[07:05] <moritz> good morning

[07:08] *** HarryS left
[07:11] *** wtw joined
[07:12] *** mdupont left
[07:17] <sorear> good morning moritz

[07:17] <Teratogen> hi sorear.

[07:18] * sorear hugs Teratogen

[07:19] <sorear> this time, I won't do that ironic thing where I forget you have a memory problem and harrass you away

[07:20] <TimToady> moritz: hugme didn't add someone earlier to perl6, and we're suspecting it needs to reverify its public key or some such

[07:20] <moritz> TimToady: whom?

[07:20] <sorear> hi TimToady

[07:23] <moritz> oh, find it in the backlog

[07:23] <moritz> seems I need to debug hugme a bit :/

[07:23] <TimToady> ranguard

[07:24] <TimToady> I added him on the web page

[07:24] * moritz didn't find him in the team

[07:25] <moritz> TimToady: I usually just add people to the 'perl6' team, which gives them commit bit to nearly all perl6 repos. Less administrative overhead that way.

[07:25] <TimToady> that's what I did

[07:26] <TimToady> he looks there to me

[07:28] <moritz> didn't look there to me before I added him too :-)

[07:28] <moritz> thought maybe I'm just too sleepy

[07:28] <TimToady> well he was sufficiently added earlier to check something in :)

[07:28] <Teratogen> TimToady, do you think Linus Torvalds is a fascist!?

[07:29] <TimToady> at http://irclog.perlgeek.de/perl6/2012-03-13#i_5287837 was his checkin

[07:31] <sorear> non sequiter.

[07:33] *** tarch joined
[07:33] <moritz> TimToady: right :-)

[07:33] <moritz> \o/ dev.perl.org/perl6/ going away

[07:34] <moritz> it was a hassle to keep updated, and I did a very poor job at it

[07:40] *** havenn joined
[07:40] * sorear out.

[07:40] <jnthn> Hm. It's morning again already...

[07:41] <jnthn> Though, also last day of work for a while :)

[07:47] <moritz> \o/

[07:48] *** thou joined
[08:07] *** sporous left
[08:07] *** sporous joined
[08:14] *** HarryS joined
[08:23] *** mj41 joined
[08:28] <moritz> the more I use twitter, the less I'm amazed by it

[08:29] <moritz> I got a reply to one of my tweets, and got a reply rather quickly, and was notified by email. And five minutes later it still can't be found on the web page

[08:31] <moritz> </rant>

[08:33] <DrEeevil> eventually consistent distributed systems :)

[08:34] *** sudokode joined
[08:34] <moritz> eventually.

[08:35] <huf> the system is consistent when complaints sstop

[08:36] <moritz> :-)

[08:37] <huf> i wonder what this phenomenon is called by serious people

[08:41] <DrEeevil> gmail has the same issues, I've seen lag of ~2h reported from people I sent a mail, but the mailserver and header timestamps claim "immediate" arrival

[08:42] <moritz> well, email never claimed to be synchronous

[08:42] <moritz> I don't know if twitter evered claimed that, but somehow I thought it was

[08:44] <DrEeevil> no, I mean server takes email at time now, but the webui shows it at now +2h

[08:44] <DrEeevil> so people get really annoyed because it's "missing"

[08:44] <moritz> yes, I know

[08:44] * DrEeevil doesn't use gmail :)

[09:04] *** thou left
[09:22] *** havenn left
[09:27] *** Trashlord left
[09:28] *** Trashlord joined
[09:33] *** alim joined
[09:36] *** envi_ joined
[09:37] <tadzik> good morning

[09:38] *** Helios- joined
[09:39] *** dakkar joined
[09:43] <moritz> \o tadzik 

[09:46] <eiro> hello all

[09:47] <eiro> tadzik, want to be added to the thread about fpw (and perl6 course) ? 

[09:47] <tadzik> eiro: sure

[09:51] *** bacek left
[09:59] *** overrosy left
[10:02] <bbkr> good morning

[10:06] *** bacek joined
[10:07] <masak> good prenoon, #perl6

[10:08] <tadzik> hey hey

[10:10] <masak> nom: .say for 'hey' Zxx 1..3

[10:10] <p6eval> rakudo fee891: OUTPUT«hey␤»

[10:10] <masak> nom: .say for 'hey' <<xx<< 1..3

[10:10] <p6eval> rakudo fee891:  ( no output )

[10:10] <masak> nom: .say for 'hey' >>xx>> (1..3)

[10:10] <p6eval> rakudo fee891: OUTPUT«hey␤»

[10:11] <masak> nom: .say for 'hey' <<xx<< (1..3)

[10:11] <p6eval> rakudo fee891: OUTPUT«hey␤hey␤hey␤hey␤hey␤hey␤»

[10:11] <masak> nom: .say for ('hey' <<xx<< (1..3)).fmt

[10:11] <p6eval> rakudo fee891: OUTPUT«hey hey hey hey hey hey␤»

[10:11] <masak> :P

[10:12] <masak> nom: .say 'hey' xx $_ for 1..3

[10:12] <p6eval> rakudo fee891: OUTPUT«===SORRY!===␤Confused␤at /tmp/Z0E6Yte45f:1␤»

[10:12] <masak> nom: say 'hey' xx $_ for 1..3

[10:12] <p6eval> rakudo fee891: OUTPUT«hey␤hey hey␤hey hey hey␤»

[10:12] <masak> \o/

[10:23] <moritz> nom: say 'hex' Zxx (1..3)

[10:23] <p6eval> rakudo fee891: OUTPUT«hex␤»

[10:24] <moritz> nom: say 'hex' Xxx (1..3)

[10:24] <p6eval> rakudo fee891: OUTPUT«hex hex hex hex hex hex␤»

[10:24] <moritz> nom: say 'hex' Xxx 1..3

[10:24] <p6eval> rakudo fee891: OUTPUT«hex hex hex hex hex hex␤»

[10:24] *** scott___ left
[10:24] <moritz> nom: say ('hex' Xxx 1..3).tree>>.fmt

[10:24] <p6eval> rakudo fee891: OUTPUT«hex hex hex hex hex hex␤»

[10:24] <moritz> nom: say ('hex' Xxx 1..3).tree>>.join('|')

[10:24] <p6eval> rakudo fee891: OUTPUT«hex hex hex hex hex hex␤»

[10:25] <moritz> nom: say ('hex' Xxx 1..3).tree.perl

[10:25] <p6eval> rakudo fee891: OUTPUT«("hex", "hex", "hex", "hex", "hex", "hex").list␤»

[10:25] <moritz> nom: say ('hex' Xxx 1..3).lol.perl

[10:25] <p6eval> rakudo fee891: OUTPUT«Method 'lol' not found for invocant of class 'List'␤  in block <anon> at /tmp/AeSf0zHxtE:1␤␤»

[10:25] <moritz> nom: say ('hex' Xxx 1..3).LoL.perl

[10:25] <p6eval> rakudo fee891: OUTPUT«Method 'LoL' not found for invocant of class 'List'␤  in block <anon> at /tmp/FKecir5gOc:1␤␤»

[10:26] *** xinming left
[10:31] *** tarch left
[10:31] *** xinming joined
[10:34] *** xinming left
[10:37] <masak> sorear: it's "non sequitur" with a "u". "sequor" is one of them "deponent" verbs in Latin, that is, actives looking like passives.

[10:46] <arnsholt> Deponens being "put down", since the verbs don't have active forms at all

[10:47] *** mj41 left
[10:47] <arnsholt> The verbs having put down the active system, as it were

[10:49] <masak> ooh, that's why they're called that.

[10:50] <masak> it reminds me of cognominal's "dépotoir" clarifications yesterday.

[10:54] *** mj41 joined
[10:56] *** overrosy joined
[10:56] *** mattp_ left
[10:57] <timotimo> colomon: you replied to my gist (fibonacci with memoization), have you created a forked gist or something? i can't seem to find your code anywhere besides the email i got

[10:57] *** mattp_ joined
[10:58] <colomon> timotimo: sorry, I replied to yours, then discovered the comment formatting was awful, deleted the comment and made another gist: https://gist.github.com/2026007

[10:59] <colomon> note that the code in question is not actually tested, but the theory involved in both examples is sound.  :)

[10:59] <timotimo> oh, okay, that would explain it

[11:00] *** overrosy left
[11:01] <timotimo> i'll try some git magic to merge your stuff into my gist, see if that works

[11:04] <colomon> well, I guess my second example could use a better error message when passed negative numbers.  ;)

[11:05] <timotimo> heh. good thing in perl array access with negative numbers doesn't count from the end ;)

[11:10] *** lestrrat left
[11:11] *** lestrrat joined
[11:17] *** xinming joined
[11:17] *** daxim joined
[11:22] <moritz> perl6: say <a b c>[$_ % *] for -2 .. 8

[11:22] <p6eval> rakudo fee891, niecza v15-4-g1f35f89: OUTPUT«b␤c␤a␤b␤c␤a␤b␤c␤a␤b␤c␤»

[11:22] <p6eval> ..pugs b927740: OUTPUT«a␤a␤a␤a␤a␤a␤a␤a␤a␤a␤a␤»

[11:23] * moritz loves that feature

[11:31] *** odoacre left
[11:34] <masak> std: my @a; say @a[ -2 ]

[11:34] <p6eval> std 1ad3292: OUTPUT«[31m===[0mSORRY![31m===[0m␤Unsupported use of [-2] subscript to access from end of array; in Perl 6 please use [*-2] at /tmp/ZH65NJtx8A line 1:␤------> [32mmy @a; say @a[ -2 ][33m⏏[31m<EOL>[0m␤Parse failed␤FAILED 00:01 111m␤»

[11:34] <masak> I will expect that [-2] subscript to be OK for arrays declared with :map

[11:35] <masak> though... hm.

[11:35] <masak> difficult to determine in the general case, I guess.

[11:36] <masak> as arrays start flying around a program, whether a variable contains something with a :map is probably not knowable at compile time.

[11:52] *** M_o_C joined
[12:16] *** DrEeevil is now known as bonsaikitten

[12:16] *** benabik_ joined
[12:19] *** benabik left
[12:19] *** benabik_ is now known as benabik

[12:21] *** bluescreen10 joined
[12:28] *** odoacre joined
[12:36] *** benabik left
[12:43] *** pernatiy left
[12:44] *** overrosy joined
[12:50] <[Coke]> quick, do we have a batarang operator?

[12:51] <moritz> batarang?

[12:51] *** Guest18067 left
[12:51] *** tarch joined
[12:52] <moritz> hm, I'm not aware of one

[12:52] <masak> suddenly I want one, thought. what is it?

[12:52] <Teratogen> quick, to the batcave!

[12:52] <masak> holy batarang operator, Batman.

[12:56] *** kaleem_ joined
[12:58] *** kaleem left
[12:59] <masak> oh.

[12:59] <masak> "batarang" is a portmanteau of "bat" and "boomerang".

[12:59] <masak> so I guess infix:<^^> would be the closest in shape.

[13:00] <timotimo> there may even be a unicode for it

[13:00] <gfldex> batarangs are illegal in europe. Please don't make perl 6 illegal in europe :(

[13:01] <masak> gfldex: this is news to me. how come a fictional throwing weapon is made illegal?

[13:02] <mikec> perl 6 is illegal in europe?

[13:02] <mikec> :(

[13:02] <gfldex> because they are basicly shuricans

[13:02] <gfldex> and shuricans are a throwing weapon that can penetrate the human skill

[13:02] <gfldex> don't kill humans plox

[13:02] <mikec> that sounds dangerous

[13:02] <moritz> so our bricks

[13:03] <gfldex> weapons regulation don't follow logic

[13:03] * mikec imagines a raid on the p6 hackathon

[13:03] <moritz> good that Norway isn't in the EU :-)

[13:03] <mikec> "drop the batarangs and put your hands in the air"

[13:03] <timotimo> colomon: you know what'd be even better in my opinion?

[13:03] <timotimo> putting the @fib as a state into the sub

[13:03] <gfldex> that might be the reason why norway got a bit of a shooter problem last summer

[13:04] <colomon> timotimo: :)

[13:04] *** jferrero left
[13:04] <mikec> moritz: that explains the location!

[13:04] *** jferrero joined
[13:05] <timotimo> colomon: https://gist.github.com/1932925 like this

[13:05] <timotimo> what's the name for those lists that have a block, "..." and an end value in them?

[13:05] <colomon> timotimo: does that work?  I would think it would need to be @fib_list :=

[13:05] <moritz> timotimo: sequence

[13:06] <moritz> infix ... is the sequence operator

[13:06] <timotimo> thanks

[13:06] <timotimo> colomon: it seems to work in rakudo, so yeah, i guess?

[13:06] <colomon> weird

[13:07] <[Coke]> moritz: infix isnt' a sequence operator.

[13:07] <colomon> niecza goes into an infinite loop if I use the code as you gave it

[13:07] <timotimo> perl6: sub fib(Int $x) { state @fib_l = 0, 1, * + * ... *; say @fib_l[$x]; } fib(0); fib(1000)

[13:07] <p6eval> pugs b927740: OUTPUT«*** ␤    Unexpected "@fib_l"␤    expecting "=", context, ":" or "("␤    at /tmp/wAta0CcnIc line 1, column 25␤»

[13:07] <p6eval> ..rakudo fee891: OUTPUT«===SORRY!===␤Confused␤at /tmp/HTB_CM48Fw:1␤»

[13:07] <p6eval> ..niecza v15-4-g1f35f89: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Strange text after block (missing comma, semicolon, comment marker?) at /tmp/YvMH5vn8Na line 1:␤------> [32ml = 0, 1, * + * ... *; say @fib_l[$x]; }[33m⏏[31m fib(0); fib(1000)[0m␤␤Parse failed␤␤»

[13:07] <colomon> but state @fib_list := 0, 1, * + * ... *; gets an error: Cannot use bind operator with this LHS

[13:08] <moritz> just use a constant

[13:08] <moritz> constant @fib_list := 0, 1, * + * ... *;

[13:08] <moritz> that should work with both rakudo and niecza

[13:09] <masak> moritz: Norway may not be in the EU, but it's in Europe, the Council of Europe, and the European Economic Area. http://en.wikipedia.org/wiki/Template:Supranational_European_Bodies

[13:09] <timotimo> perl6: sub fib(Int $x) { state @fib_l = 0, 1, * + * ... *; say @fib_l[$x]; }; fib(0); fib(1000);

[13:09] <timotimo> that's better

[13:09] <p6eval> niecza v15-4-g1f35f89: OUTPUT«(timeout)»

[13:09] <p6eval> ..rakudo fee891: OUTPUT«0␤43466557686937456435688527675040625802564660517371780402481729089536555417949051890403879840079255169295922593080322634775209689623239873322471161642996440906533187938298969649928516003704476137795166849228875␤»

[13:09] <p6eval> ..pugs b927740: OUTPUT«*** ␤    Unexpected "@fib_l"␤    expecting "=", context, ":" or "("␤    at /tmp/QI4XDUllFH line 1, column 25␤»

[13:09] <moritz> masak: *nod*

[13:09] <masak> nom: constant fib = 0, 1, * + * ... *; say fib[10]

[13:09] <p6eval> rakudo fee891: OUTPUT«55␤»

[13:09] <masak> timotimo: even better :)

[13:11] *** overrosy left
[13:12] <timotimo> right, constant makes more sense but still carries the same "initialise only once" thing as state does

[13:15] <masak> I don't know why, but I really like that constant lazy lists grab some of the ecological niche that memoizing subs previously occupied.

[13:15] <moritz> the only problem being that you can't limit the cache size

[13:20] *** tokuhiro_ joined
[13:21] <timotimo> well, if the block you use in there is side-effect free (and how am i supposed to find out, huh?) the cache could always be cleared and data could be re-evaluated

[13:21] <masak> lazy lookahead: that seems to turn up over and over again as a limitation and a problem.

[13:21] <timotimo> if the blocks have side-effects and execution order has some kind of guarantee, then enh.

[13:21] <masak> what was the advantage again?

[13:23] <moritz> timotimo: the optimizer might determine purity in some cases

[13:25] *** tokuhiro_ left
[13:29] *** skids joined
[13:33] *** tokuhiro_ joined
[13:34] *** pernatiy joined
[13:36] *** key__ joined
[13:36] *** key__ left
[13:38] <Teratogen> [] is an operator

[13:38] <Teratogen> it magically turns something into an array and returns a reference

[13:38] <Teratogen> I guess it is an "outfix" operator?

[13:38] <Teratogen> or circumfix, I guess

[13:38] <colomon> niecza:  constant fib = 0, 1, * + * ... *; say fib[10]

[13:38] <p6eval> niecza v15-4-g1f35f89: OUTPUT«Unhandled exception: System.NullReferenceException: Object reference not set to an instance of an object␤  at Niecza.Kernel.ToComposable (Niecza.STable arg, Niecza.STable cls) [0x00000] in <filename unknown>:0 ␤  at Niecza.Kernel.ApplyRoleToClass (Niecza.ST…

[13:39] <colomon> Teratogen: postcircumfix, I believe is what TimToady++ uses.

[13:39] <moritz> well, [] can be both postcircumfix and circumfix

[13:39] <moritz> say [1, 2] # circumfix

[13:39] <colomon> niecza:  constant @fib = 0, 1, * + * ... *; say @fib[10]

[13:39] <p6eval> niecza v15-4-g1f35f89: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Bogus term at /tmp/navcNhXZ5N line 1:␤------> [32mconstant @fib = 0, 1, * + * ...[33m⏏[31m *; say @fib[10][0m␤␤Parse failed␤␤»

[13:39] <Teratogen> well I am talking abouit things like [ /(foo)/ ]

[13:39] <Teratogen> about

[13:39] <Teratogen> *

[13:39] <moritz> niecza:  constant @fib = 0, 1, * + * ... *; say @fib[10]

[13:39] <p6eval> niecza v15-4-g1f35f89: OUTPUT«55␤»

[13:40] <moritz> colomon: you had an odd character in there

[13:40] <colomon> moritz: ah

[13:40] <colomon> I knew it was working locally.  :)

[13:42] <moritz> it was printed as a backslash in invereted colors here :-)

[13:43] <colomon> It looks perfectly normal here.  :(

[13:44] <moritz> the IR clogs haven't captured it either :/

[13:55] *** tyatpi left
[14:02] *** havenn joined
[14:08] *** M_o_C left
[14:12] *** overrosy joined
[14:12] *** simcop2387 left
[14:14] *** simcop2387 joined
[14:26] <masak> nom: sub pluralize($_) { when /x$/ { $_ ~ "es" }; when /^(.+?)y$/ { $0 ~ "ies" }; default { $_ ~ "s" } }; say .&pluralize for <pencil box baby>

[14:26] <p6eval> rakudo fee891: OUTPUT«pencils␤boxes␤babies␤»

[14:26] <masak> \o/

[14:28] *** xinming left
[14:43] <tadzik> nice

[14:44] <timotimo> nom: sub pluralize($_) { when /x$/ { $_ ~ "es" }; when /^(.+?)y$/ { $0 ~ "ies" }; default { $_ ~ "s" } }; say .&pluralize for <octopus>

[14:44] <p6eval> rakudo fee891: OUTPUT«octopuss␤»

[14:44] <timotimo> but it should be octopi!!!!!!!!kkκκ

[14:44] <masak> nom: sub pluralize($_) { when /[x|s]$/ { $_ ~ "es" }; when /^(.+?)y$/ { $0 ~ "ies" }; default { $_ ~ "s" } }; say .&pluralize for <octopus>

[14:44] <p6eval> rakudo fee891: OUTPUT«octopuses␤»

[14:44] <masak> :)

[14:45] <masak> .u κ

[14:45] <phenny> U+03BA GREEK SMALL LETTER KAPPA (κ)

[14:45] *** PacoAir joined
[14:52] *** thou joined
[14:59] *** xinming joined
[15:04] *** benabik joined
[15:04] *** benabik_ joined
[15:08] *** birdwindupbird left
[15:08] *** benabik left
[15:08] *** benabik_ is now known as benabik

[15:24] *** zipf joined
[15:24] *** zipf left
[15:32] *** alim left
[15:35] *** overrosy left
[15:45] *** Psyche^ joined
[15:48] *** kaleem_ left
[15:48] <timotimo> masak: in case you're wondering, i'm typing neo2, which has the ! on the k key (and κ is on the k key as well), so that's my equivalent of !!!!!!!!1111oneone

[15:49] <masak> interesting.

[15:49] <masak> what's neo2?

[15:49] <timotimo> neo-layout.org is their website, they have a interactive graphic on the front page

[15:49] *** Patterner left
[15:49] *** Psyche^ is now known as Patterner

[15:50] <TimToady> yanqk?

[15:58] <arnsholt> timotimo: octopodes is acceptable as well =)

[15:58] *** overrosy joined
[16:00] <TimToady> we need a Zop variant that goes the length of the longest list rather than the shortest, and supplies the identity value of op for missing values

[16:04] <TimToady> http://rosettacode.org/wiki/Balanced_ternary#Perl_6 has a couple places that would be simplified with that, especially in infix:<+> where we don't even know which set of coefficients is longer, so have to order them before applying Z+ and 0 xx *

[16:04] <masak> nom: sub zip-longest(@a, @b, &c) { gather { while @a || @b { take &c(@a.shift // 0, @b.shift // 0) } } }; zip-longest [1, 2, 3], [10, 20, 30, 40, 50], *+*

[16:04] <p6eval> rakudo fee891:  ( no output )

[16:04] <masak> nom: sub zip-longest(@a, @b, &c) { gather { while @a || @b { take &c(@a.shift // 0, @b.shift // 0) } } }; .say for zip-longest [1, 2, 3], [10, 20, 30, 40, 50], *+*

[16:04] <p6eval> rakudo fee891: OUTPUT«11␤22␤33␤40␤50␤»

[16:05] <masak> feels almost like it could be an adverb on Z+

[16:05] <masak> adverbs were all the rage back in 2003, but we don't use them a lot on operators.

[16:06] <TimToady> or we could resurrect Yop as something that is almost a Z

[16:06] <TimToady> the "Yes, we can!" op :)

[16:07] *** wtw left
[16:07] <TimToady> except, of course, that it's backwards, since Y comes before Z, and so should return something shorter :)

[16:07] *** Vespakoen joined
[16:07] <masak> ZZ+

[16:08] <TimToady> except it looks like Z[Zop], which is currently legal, if non-sensical (?)

[16:08] <masak> then we can make ZZ top puns.

[16:08] <benabik> ZZop is about having the longest list?

[16:09] *** tokuhiro_ left
[16:09] <TimToady> it seems a shame to know op's identity value and not provide a way to assume it

[16:09] <benabik> And ZZ Top is about about having the longest beards.

[16:09] <felher> "Identity values"? So (1,2,3) Y+ (1,2,3,4) would be (1,2,3,0) Z+ (1,2,3,4)?

[16:09] <benabik> r: say infix:<+>()

[16:09] <p6eval> rakudo fee891: OUTPUT«0␤»

[16:09] <TimToady> yes, just as [*]() returns 1

[16:09] <TimToady> perl6: say [*]()

[16:09] <p6eval> pugs b927740, rakudo fee891: OUTPUT«1␤»

[16:09] <p6eval> ..niecza v15-4-g1f35f89: OUTPUT«0␤»

[16:10] <TimToady> so Z* would assume 1

[16:10] <benabik> Except in niecza, apparently.

[16:11] <felher> Okay. What about user-defined operators?

[16:11] <masak> std" say [*]()

[16:11] <masak> std: say [*]()

[16:11] <p6eval> std 1ad3292: OUTPUT«ok 00:01 109m␤»

[16:12] <masak> felher: you provide default values for your user-defined operators.

[16:12] <benabik> Rakudo uses zero-arg versions of the operators for identity.  I don't know if that's spec or just convenience.

[16:12] <colomon> errr.... wasn't the old way to do that something like making the shorter list 1, 2, 3, *     ?

[16:12] <masak> felher: otherwise they will fail when you try to reduce them, etc.

[16:12] <TimToady> S03:4481

[16:12] *** overrosy left
[16:12] <felher> masak: i see. Sounds nice :)

[16:13] <masak> oh, it's nice :)

[16:13] * benabik ponders switching to a IRC client where I could have a custom filter for spec links like the logs do.

[16:13] <felher> TimToady: thansk :)

[16:13] <benabik> n: say infix:<*>()

[16:13] <p6eval> niecza v15-4-g1f35f89: OUTPUT«Unhandled exception: No value for parameter '$l' in 'infix:<*>'␤  at /home/p6eval/niecza/lib/CORE.setting line 0 (infix:<*> @ 1) ␤  at /tmp/Rng6J6KEtb line 1 (mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3838 (ANON @ 3) ␤  at /home/p6eval/n…

[16:14] <benabik> Ah.  I guess that's why [*]() behaves as it does.

[16:14] <TimToady> n: say infix:<[*]>()

[16:14] <p6eval> niecza v15-4-g1f35f89: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤      'infix:<[*]>' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1362 (die @ 3) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 33) ␤  a…

[16:14] <TimToady> n: say prefix:<[*]>()

[16:14] <p6eval> niecza v15-4-g1f35f89: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Undeclared routine:␤      'prefix:<[*]>' used at line 1␤␤Unhandled exception: Check failed␤␤  at /home/p6eval/niecza/boot/lib/CORE.setting line 1362 (die @ 3) ␤  at /home/p6eval/niecza/src/STD.pm6 line 1147 (P6.comp_unit @ 33) ␤  …

[16:16] <TimToady> oh, I was reading n as nom  :/

[16:16] * TimToady goes searching for more caffiene

[16:16] <benabik> TimToady: I'm glad I'm not the only one.  But I eventually adapted because I couldn't spell niecza reliably.  :-D

[16:17] <daxim> http://journal.dedasys.com/2010/03/30/where-tcl-and-tk-went-wrong   # reading that, I'm glad that p5p's decisions turned out more good than bad

[16:18] * colomon was recently pondering an infix Q metaop (casts both arguments to FatRat before executing op)

[16:18] *** mdupont joined
[16:18] <benabik> Q?

[16:20] *** nwc10 joined
[16:20] <felher> benabik: http://en.wikipedia.org/wiki/Rational_number

[16:20] <benabik> Oh.

[16:20] <benabik> Haven't run across that before.  Interesting.

[16:21] <nwc10> so, if I understand it correctly, q-regex is what's used for user space regexs, er "rules", and it's git://github.com/perl6/nqp.git and it's written in NQP

[16:22] <colomon> benabik: Rop is already taken, and people seemed to frown on F for FatRat.  :)

[16:22] <nwc10> what's the name of the regex engine used (currently) for Rakduo parsing Perl 6 code? The one written in PIR that jnthn is working on retiring?

[16:22] <sorear> isn't qregex used for everything now (in Rakudo)?

[16:22] <benabik> I don't think QRegex is used to parse NQP yet.  There were some bootstrapping issues, IIRC

[16:22] <sorear> I don't think it has a name.

[16:22] <colomon> hmmm... though would Qop interfere with quote operators?

[16:23] <nwc10> sorear: somewhere in http://6guts.wordpress.com/ it says "Most immediately, that will be getting QRegex to be the engine we use to parse NQP and Perl 6 code (currently, we use QRegex for compiling the regexes and grammars you write in your Perl 6 programs, but still use the previous generation engine for parsing Perl 6 source)."

[16:23] <nwc10> anyway, is the old nameless one the code at git://github.com/perl6/nqp-rx ?

[16:24] <moritz> no, git://github.com/perl6/nqp

[16:24] <sorear> yes, in PAST::Compiler::Regex

[16:24] <sorear> modulo moritz

[16:24] <masak> QRegex hasn't taken over the Rakudo world yet.

[16:24] <moritz> well

[16:24] <sorear> o/ MASAK

[16:24] <masak> sorear! \o/

[16:24] <moritz> QRegex has taken over rakudo userspace

[16:24] <masak> right. but not the compiler parsing.

[16:24] <moritz> but QRegex isn't yet used to parse Perl 6 code

[16:24] <nwc10> so qregex is in which git respository?

[16:24] <masak> which is an odd order of things, in a way :)

[16:24] <moritz> nwc10: it's also in git://github.com/perl6/nqp

[16:25] <nwc10> aha. :-)

[16:25] <masak> I'm now blocking on QAST, so I'll likely be investigating that in the coming weeks.

[16:25] <moritz> two regex engines in one repo!

[16:25] <sorear> nwc10: I haven't been folowing the rakudo world closely, but remember that things are changing quickly and blog posts are often dated

[16:25] <moritz> buy one, get one free!

[16:25] <arnsholt> colomon: I think Qop could work

[16:25] <masak> as far as I understand, QAST exists for regexes, but needs to be extended to all of Perl 6.

[16:25] <nwc10> sorear: that one's dated March 9th :-)

[16:25] <sorear> Maybe it's not too old then. :-)

[16:26] <arnsholt> Qop would be in operator places and Q quotes in term places, so they should be able to coexist

[16:26] *** overrosy joined
[16:27] <arnsholt> OTOH, it might make syntax highlighting and possibly people unhappy

[16:27] *** alester joined
[16:27] *** colomon left
[16:27] <sorear> arnsholt: what if colomon wants Q[prefix]?

[16:28] <masak> arnsholt: the introduction of Qop won't make Perl 6 syntax highlighting more intractable than it already is.

[16:28] <nwc10> thanks. things make more sense now.

[16:28] * nwc10 hopes that Qregex and QAST both arrive soon

[16:28] <arnsholt> masak: That's true =)

[16:28] <nwc10> and sorry, I'm not in a position to help with making that happen.

[16:29] <moritz> masak: how are you blocking on QAST?

[16:30] *** nwc10 left
[16:30] <masak> moritz: the AST format we emit needs a new type to handle quasi placeholders. no sense in adding it to PAST since it's going away.

[16:31] <masak> well, I could, I guess.

[16:31] <masak> just for fun.

[16:31] <masak> but I'd rather work on getting QAST to where we can use it.

[16:36] *** overrosy left
[16:38] *** wentam left
[16:39] <TimToady> hmm, with a P metaop that 'pads' the shorter list, we could then have ZP+, and maybe XP+ would then guarantee a "square" result

[16:40] <timotimo> perl6: sub test($a is rw) { $a += 5; POST { $a > 0 } }; my $test = 9; test($test); say $test;

[16:40] <p6eval> rakudo fee891: OUTPUT«===SORRY!===␤POST phaser not yet implemented. Sorry. ␤at /tmp/cFG82m_ioC:1␤»

[16:40] <p6eval> ..pugs b927740, niecza v15-4-g1f35f89: OUTPUT«14␤»

[16:41] <timotimo> perl6: sub test($a is rw) { $a += 5; POST { $a > 0 } }; my $test = -9; test($test); say $test;

[16:41] <p6eval> rakudo fee891: OUTPUT«===SORRY!===␤POST phaser not yet implemented. Sorry. ␤at /tmp/xpNAUvxv5K:1␤»

[16:41] <p6eval> ..pugs b927740: OUTPUT«*** POST assertion failed: "&test"␤    at /tmp/594g9mlzak line 1, column 65-76␤»

[16:41] <p6eval> ..niecza v15-4-g1f35f89: OUTPUT«Unhandled exception: Post-constraint failed for test␤  at /tmp/I18fXZA3p_ line 0 (test @ 1) ␤  at /tmp/I18fXZA3p_ line 1 (mainline @ 2) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3838 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting line 3839 (mod…

[16:41] *** overrosy joined
[16:41] *** havenn left
[16:41] <timotimo> cool, that pugs does it already :p

[16:44] *** Vespakoen left
[16:45] <masak> TimToady: that feels like a not very general metaop at all.

[16:46] <masak> TimToady: OTOH, if you can supply it in a script with one line of code, then everyone wins :)

[16:47] * TimToady refrains from mentioning non-term macros

[16:48] *** havenn joined
[16:51] <masak> :)

[16:53] <sorear> There's no reason metaops have to be one character.

[16:55] <TimToady> or we could just make P the "pairwise" form of Z that believes in pairs so much that it will turn a singleton into a pair

[16:56] <moritz> let's call it PKZIP ;-)

[16:56] <TimToady> let's call colomon's fatratter QAST :)

[16:57] *** tyatpi joined
[16:57] <masak> I'm not against non-term macros. I just haven't seen a sane spec for them yet.

[16:58] <masak> (and I'm rather disinclined to replace the current macro spec with one with implementability issues)

[17:00] *** overrosy left
[17:01] <Teratogen> Gone are the good old days of the simple but powerful C text preprocessor

[17:01] <Teratogen> *sigh*

[17:02] <moritz> C text processors still exist

[17:02] <doy> looking back on the c preprocessor with fondness indicates to me that you never really used c seriously

[17:03] <Teratogen> They took -P out of Perl 5 =/

[17:05] <masak> Teratogen: simple, yes. powerful, no. lots of well-known and well-understood problems, weaknesses, and issues: oh yes.

[17:06] <masak> Teratogen: anything that p5p decide to do that ultimately makes Perl 5 less of a pain to manage has my immediate approval.

[17:06] <masak> if you want to pre-process your Perl code, write a script that preprocesses your Perl code.

[17:06] <TimToady> by that argument, p5p should just abandon Perl 5 :P

[17:06] <doy> hey now d:

[17:07] <masak> that... wasn't what I meant. :P

[17:07] <masak> also, I don't actually know whether that's true.

[17:07] <masak> something abandoned can be quite a pain to manage.

[17:08] * masak decommutes

[17:08] <Teratogen> Why was -P added to Perl 5 in the first place.  Does anyone know?

[17:08] <Teratogen> Well, maybe it was in Perl 4 too!

[17:09] *** dwierenga joined
[17:15] <TimToady> it seemed like a good way to trick C programmers into using Perl

[17:17] <TimToady> but users are what ultimately cause languages like Tcl and Perl(5) to ossify and not keep up with the modern world

[17:17] <TimToady> so we're trying not to have any users yet for Perl 6 :)

[17:19] <LoRe> what's that -P you're talking about?

[17:20] <daxim> text preprocessor, see above

[17:21] <benabik> There's a cartoon on my sysadmin's wall.  "I fixed the system."  "By unplugging the network cable?"  "It runs so much faster without all those users on it."

[17:22] *** MayDaniel joined
[17:22] <sorear> sounds like something from old UserFriendly

[17:23] <daxim> remember when UF was good?

[17:24] <sorear> I stopped paying attention before it turned bad

[17:24] <TimToady> UF⃠

[17:25] * sorear checks colomon's blog

[17:26] <sorear> so, this z function

[17:26] <sorear> I can't help but notice that it's related to the modular group

[17:27] <arnsholt> sorear: It's practically a snowclone, I think

[17:28] <arnsholt> Working in retail is nice, if it weren't for all the customers; academia/students, and so on

[17:28] <sorear> snowclone?

[17:29] <arnsholt> Idiom with replaceable parts (http://en.wikipedia.org/wiki/Snowclone)

[17:30] <arnsholt> Like X is the new Y

[17:30] * sorear has, unrelatedly, been reading a lot about modular forms lately; wonders if there is a connection with continued fractions

[17:31] <TimToady> modular forms are the new catalan numbers :)

[17:31] <moritz> :-)

[17:33] *** overrosy joined
[17:34] *** fglock joined
[17:35] <sorear> o/ fglock 

[17:37] *** MayDaniel left
[17:37] *** buubot_backup left
[17:38] *** overrosy left
[17:38] <fglock> o/

[17:38] *** Vespakoen joined
[17:38] *** tarch left
[17:43] *** havenn left
[17:50] *** overrosy joined
[17:54] *** envi_ left
[17:55] *** overrosy left
[17:55] *** pernatiy left
[17:55] *** wolfman2000 left
[17:57] *** buubot_backup joined
[17:59] *** havenn joined
[18:01] *** overrosy joined
[18:03] *** dakkar left
[18:06] *** overrosy left
[18:09] *** bluescreen10 left
[18:10] *** mj41 left
[18:10] *** leprevost joined
[18:20] *** tyatpi left
[18:24] *** bluescreen10 joined
[18:32] *** NamelessTee joined
[18:41] *** havenn left
[18:45] *** jrockway left
[18:48] *** pochi joined
[18:54] *** GlitchMr joined
[18:55] *** havenn joined
[18:55] *** fglock left
[18:55] *** fglock joined
[18:55] *** Chillance joined
[18:57] *** GlitchMr42 joined
[18:57] *** retup_work left
[18:59] *** benabik left
[19:00] *** GlitchMr left
[19:04] *** pernatiy joined
[19:09] *** overrosy joined
[19:09] *** colomon joined
[19:10] *** retup_work joined
[19:14] *** overrosy left
[19:20] <masak> I understand Catalan numbers, but I don't grok modular forms. I do love complex analysis, though, and they seem related.

[19:21] <TimToady> Catalan numbers are so, like, two days ago...

[19:23] *** mj41 joined
[19:24] * masak .oO( halp, TimToady is peer-pressuring me into liking the New Math! )

[19:25] <TimToady> it is, of course, completely hypocritical on my part, but the world would not work without hypocrisy

[19:26] * [Coke] yawns.

[19:27] <TimToady> Snowclones are so, like, two hours ago.

[19:28] <masak> autopuns, however, are very in.

[19:28] <masak> it's been said that the eskimos have over 4000 words for "snowclone".

[19:28] <TimToady> Autopuns are always in, except when they're not.

[19:30] <masak> I think there's a strong correlation between people of the #perl6 persuasion and people with a need to make autopuns.

[19:31] <masak> and not just because we've started pointing them out, I mean, but generally.

[19:31] <TimToady> well, that's just because with something like Perl you can also have manual puns

[19:32] <masak> what, like &eval?

[19:33] <masak> "yo dawg, I know you like to run code..."

[19:34] <timotimo> so, when i have a block that i want to run at compile time (like FIRST, i think?), can i put a block into that that i want to have run at the time when that time gets compiled, before it gets run? :)

[19:34] <tadzik> nom: eval "eval\"eval'say 5'\""

[19:34] <p6eval> rakudo fee891: OUTPUT«===SORRY!===␤Confused␤at eval_0:1␤»

[19:34] <tadzik> nom: eval "eval \"eval 'say 5'\""

[19:34] <p6eval> rakudo fee891: OUTPUT«5␤»

[19:34] <tadzik> dawg

[19:35] <TimToady> timotimo: that would be a BEGIN block, and yes, you may nest 'em

[19:35] <masak> nom: BEGIN { BEGIN { say "yo dawg" } }

[19:35] <p6eval> rakudo fee891: OUTPUT«yo dawg␤»

[19:35] <timotimo> hah, great :)

[19:35] *** birdwindupbird joined
[19:36] <masak> nom: BEGIN { END { say "hm" }; say "when do" }; say "things run?"

[19:36] <p6eval> rakudo fee891: OUTPUT«when do␤things run?␤hm␤»

[19:36] <masak> fair enuf.

[19:36] <masak> nom: BEGIN { my $a = 42; END { say $a } }

[19:36] <p6eval> rakudo fee891: OUTPUT«Any()␤»

[19:37] <TimToady> nom: BEGIN { say "dawg"; BEGIN { say "yo" } }

[19:37] <p6eval> rakudo fee891: OUTPUT«yo␤dawg␤»

[19:37] * masak submits rakudobug

[19:37] <masak> nom: my $a = 42; END { say $a }

[19:37] <p6eval> rakudo fee891: OUTPUT«42␤»

[19:37] <masak> both should work, IMNSHO.

[19:37] <masak> it's like PRE and POST ;)

[19:37] <timotimo> i can see how, yes

[19:38] <jnthn> evneing, #perl6

[19:38] <masak> jnthn! \o/

[19:38] <fsergot> jnthn \o/

[19:38] <fsergot> :)

[19:38] <jnthn> masak: What exaclty did you just submit a Rakudo bug about?

[19:39] <jnthn> oh, the END not seeing the $a...

[19:39] <jnthn> Yeah, that's probably wrong.

[19:40] <TimToady> This sentence no autopun.

[19:40] <timotimo> not sure why the END block inside the BEGIN block gets run after the outer block, but i suppose that's all right? what do i know?

[19:40] <jnthn> END gets run as late as possible

[19:40] <TimToady> you'd want a LEAVE for that

[19:40] <timotimo> ah, ok

[19:40] <jnthn> Rakudo takes this to include END statements that show up inside eval.

[19:41] <jnthn> The spectests disagree, though.

[19:41] <TimToady> nom: BEGIN { LEAVE { say "dawg" }; BEGIN { say "yo" } }

[19:41] <p6eval> rakudo fee891: OUTPUT«yo␤dawg␤»

[19:41] <timotimo> oh? i think that sound okay. if it's "as late as possible" and you can do it later than the spec says, well ...

[19:41] <timotimo> don't follow the letter, follow the spirit, yes?

[19:41] <jnthn> (That is, END blocks in evals don't run after the eval, then run at program exit).

[19:42] <jnthn> timotimo: The spec doesn't say anything on this afaik

[19:42] <jnthn> spectests != spec ;)

[19:42] <TimToady> ALAP means just that

[19:42] <timotimo> well, okay, but the synopsis says ALAP, doesn't it?

[19:42] <jnthn> Right, so Rakudo is right in this case :)

[19:42] * jnthn will correct the tests when he gets a round tuit. Or somebody else can beat him to it. :)

[19:42] <jnthn> .oO( beat him tuit... )

[19:43] *** Vespakoen left
[19:43] * TimToady hands jnthn a tuit-shaped cookie

[19:43] *** kaare_ joined
[19:43] <TimToady> or was that a cookie-shaped tuit...

[19:43] <masak> mmm, tuits.

[19:44] <tadzik> hello jnthn 

[19:44] <jnthn> o/ tadzik 

[19:44] *** ksi joined
[19:44] <Tene> masak: I don't recall if I followed up... is https://gist.github.com/1955491 sufficiently golfed for a bug report?

[19:47] *** jrockway joined
[19:47] <felher> tadzik: if i do 'nom --doc lib/Pod/To/HTML.pm' i get >>>Nominal type check failed for parameter '$name'; expected Str but got Block instead<<< . Do i need to use something different from current nom or am i just on the wrong track?

[19:48] <tadzik> felher: let me see

[19:49] *** libertyprime joined
[19:49] <tadzik> felher: yeah, reproduced. Let me take a look

[19:50] <felher> tadzik: kk :)

[19:52] *** daxim left
[19:54] <masak> Tene: looks like. kudos.

[19:54] <Tene> If you remove the actions, it parses fine.

[19:54] * masak submits rakudobug

[19:54] *** Vespakoen joined
[19:54] <Tene> Looks like it fails with a different error in newer rakudo.

[19:55] <libertyprime> Hey. I was just wondering what kind of things the perl 6 grammars will be used for. Just extending the language, or for parsing general purpose files etc

[19:56] <tadzik> felher: it'd seem that --doc is just broken in Rakudo recently

[19:56] <tadzik> due to phasers stuff

[19:56] <masak> n: grammar Foo { token e { 'a' <e> { make 'a' ~ $<e>.ast | ';' { make ';' } } }; my $m = Foo.parse("aaaa;", :rule('e')); say $m.gist; say $m.ast

[19:56] <p6eval> niecza v15-4-g1f35f89: OUTPUT«[31m===[0mSORRY![31m===[0m␤␤Unexpected block in infix position (two terms in a row, or previous statement missing semicolon?) at /tmp/rBSJdVaXIF line 1:␤------> [32me { 'a' <e> { make 'a' ~ $<e>.ast | ';' [33m⏏[31m{ make ';' } } }; my $m = Foo.parse(…

[19:56] <tadzik> there must be no spectest for --doc

[19:56] <masak> r: grammar Foo { token e { 'a' <e> { make 'a' ~ $<e>.ast } | ';' { make ';' } } }; my $m = Foo.parse("aaaa;", :rule('e')); say $m.gist; say $m.ast

[19:56] <p6eval> rakudo fee891: OUTPUT«Method 'message' not found for invocant of class 'Any'␤»

[19:56] *** dwierenga left
[19:56] *** pjcj left
[19:57] <masak> r: grammar Foo { token e { 'a' <e> | ';' } }; my $m = Foo.parse("aaaa;", :rule('e')); say $m.gist; say $m.ast

[19:57] <p6eval> rakudo fee891: OUTPUT«=> <aaaa;>␤ e => <aaa;>␤  e => <aa;>␤   e => <a;>␤    e => <;>␤␤Any()␤»

[19:57] <Tene> Huh; wonder why I didn't try it in a single rule.

[19:57] <masak> this is your gist, just with 'element' renamed 'e'.

[19:57] <felher> tadzik: I see. Thanks :)

[19:58] <Tene> Oh man, reading is hard.

[19:58] <masak> ;)

[19:58] <Tene> I also ran into a separate bug with naming a rule 'kv'.

[19:59] <Tene> I don't quite remember what it was, though.

[19:59] <tadzik> jnthn: pingy

[19:59] <jnthn> tadzik: pongy

[20:00] *** dwierenga joined
[20:00] <jnthn> ...er, that wasn't a description :)

[20:00] <tadzik> jnthn: can you think of anything that'd magically break DOC phasers after your recent changes?

[20:00] <jnthn> tadzik: I don't remember touching those...

[20:00] <jnthn> ...though maybe that is the issue ;-)

[20:01] <tadzik> :)

[20:01] <jnthn> I can't think of anything right off. What sort of magic breakage have we got?

[20:01] <tadzik> $ cat dupa.pl && perl6 --doc dupa.pl

[20:01] <tadzik> DOC INIT { say "foobar" }

[20:01] <tadzik> ===SORRY!===

[20:01] <tadzik> Nominal type check failed for parameter '$name'; expected Str but got Block instead

[20:01] <tadzik> sorry for the tiny paste

[20:03] <jnthn> It prolly is my fault. --ll-exception says it's inside add_phaser, which I did meddle with of late.

[20:03] <masak> Tene: if you find it again, it may merit a distinct ticket.

[20:03] <masak> Tene: there are clear problems with using some already taken methods names, though.

[20:04] <jnthn> tadzik: yeah, I'm to blame

[20:04] <jnthn> I changed the argument order in add_phaser to make it saner.

[20:04] <jnthn> And missed updating DOC

[20:04] <tadzik> I see

[20:05] <tadzik> shall I fix this?

[20:05] <jnthn>      method statement_prefix:sym<DOC>($/)   {

[20:05] <jnthn> -        $*W.add_phaser($/, ($<blorst>.ast)<code_object>, ~$<phase>)

[20:05] <jnthn> +        $*W.add_phaser($/, ~$<phase>, ($<blorst>.ast)<code_object>)

[20:05] <jnthn>              if %*COMPILING<%?OPTIONS><doc>;

[20:05] <jnthn> Try that patch

[20:05] <jnthn> (or I can in a little bit)

[20:06] <tadzik> I will, and I'll think about a spectest for that

[20:07] <jnthn> tadzik++

[20:07] <tadzik> heh, I'm mostly maintaining Pod these days

[20:11] <tadzik> I started thinking about this year's GSoC

[20:11] <tadzik> one idea is the full-blown module infrastructure, with all of PAUSE6, CPAN6 and CPAN6.pm workalikes

[20:12] *** pjcj joined
[20:12] <tadzik> the second is a full blown web framework, along with docs, examples, propaganda etc. Something along "look, one can do useful stuff now"

[20:12] <colomon> +2

[20:12] <colomon> or rather, +1 +1

[20:14] <tadzik> now what if you had to choose one?

[20:14] <tadzik> I think there's no need (yet) for a proper module infrastructure; or rather: we can live without it

[20:15] <masak> yeah. go for the web framework.

[20:15] <tadzik> on the other hand, I've already talked to people saying "I'll probably use Perl 6 if I could write stuff with it, like a small website"

[20:15] <tadzik> I told him about bailador, MiniDBI and essentially having everything already in place

[20:15] <tadzik> masak: I could learn/pick up stuff from Web.pm too

[20:18] <masak> yes, you have to.

[20:18] *** leprevost left
[20:19] <masak> there are good ideas in there. they just didn't fit in an ill-specified 11 week grant.

[20:19] <tadzik> right

[20:21] * moritz backlogs

[20:21] <moritz> tadzik: I have a third suggestion: bring MiniDBI and drivers in a usable shape

[20:21] <moritz> tadzik: if you don't like that, I#d prefer the web framework over the modules stuff

[20:22] <moritz> though I'm +1 xx 3

[20:22] *** daxim joined
[20:24] <tadzik> moritz: I think if I did web stuff, bringing DBI to a usable shape would be either a prerequisite or a part of the work

[20:26] <moritz> tadzik: well, bringing one of the drivers could be part of the web stuff. Doing all (mysql, postgres, sqlite) would be enough for a full GSOC project, I think

[20:26] <masak> depends on what you consider web stuff ;)

[20:26] <colomon> I think I'd prefer the web stuff over modules as well -- I think with another week or two's work, we'd have the module stuff solid enough to support what is needed for p6 for now.

[20:26] <tadzik> okay, DOC fixed

[20:29] *** daxim left
[20:31] <dalek> rakudo/nom: 34b7b10 | tadzik++ | src/Perl6/Actions.pm:

[20:31] <dalek> rakudo/nom: Fix DOC phasers for the new add_phaser() API. felher++ for noticing

[20:31] <dalek> rakudo/nom: review: https://github.com/rakudo/rakudo/commit/34b7b105e3

[20:31] <tadzik> felher: should work now :)

[20:31] <felher> tadzik: *testing*

[20:32] *** daxim joined
[20:32] <moritz> tadzik++

[20:32] *** havenn left
[20:35] *** adnauseam left
[20:35] *** alester left
[20:35] <felher> tadzik++ : works like a charm :)

[20:37] *** daxim_ joined
[20:37] *** daxim left
[20:44] *** bluescreen10 left
[20:51] <libertyprime> Hey guys. I was wondering if there will be an option to disable backtracking in normal regex, not just with tokens

[20:52] <tadzik> :ratchet does that I think

[20:55] <libertyprime> tadzik: chur bro

[20:57] <masak> libertyprime: hey -- welcome!

[21:00] *** daxim_ left
[21:00] <moritz> r: say so 'aaa' ~~ /a+a/

[21:00] <p6eval> rakudo fee891: OUTPUT«True␤»

[21:00] <moritz> r: say so 'aaa' ~~ /:r a+a/

[21:00] <p6eval> rakudo fee891: OUTPUT«False␤»

[21:01] <[Coke]> tadzik: congrats on the $dayjob!

[21:01] <colomon> +1

[21:02] *** havenn joined
[21:02] *** Vespakoen left
[21:02] *** Vespakoen_ joined
[21:06] *** skids left
[21:07] *** overrosy joined
[21:08] *** birdwindupbird left
[21:11] *** fglock left
[21:11] *** overrosy left
[21:21] *** thou left
[21:23] *** thou joined
[21:23] <tadzik> thanks :)

[21:23] * libertyprime feels welcomed

[21:24] *** GlitchMr42 is now known as GlitchMr

[21:24] *** GlitchMr left
[21:31] <masak> OMG p6cc blog post! \o/ http://strangelyconsistent.org/blog/t3-addition-chains

[21:33] <gfldex> libertyprime as in www.google.com/search?q=liberty+prime&tbm=isch  ?

[21:36] <jnthn> masak: The dynamic programming link in the wikipedia quote section looks busted

[21:36] <masak> I noticed -- already on it.

[21:36] <masak> should look fine in a minute or so.

[21:37] <masak> jnthn++ for reporting it, though :)

[21:37] <masak> there, fix'd.

[21:39] *** thou left
[21:42] <jnthn> masak: In http://strangelyconsistent.org/p6cc2011/t3/timtom/ you note "Inconsistent layout of braces after loop and conditional headers, sometimes there is a newline before the brace, sometimes not." - but I can't find a place wehre there is not. Am I missing it?

[21:43] <felher> masak++ : nice post. Great that you explained so much and supplied many links :)

[21:43] <masak> jnthn: no, nor any superstitious if parens. fixing.

[21:44] <jnthn> masak: It's true of the author's second submission, but not the first.

[21:44] <masak> jnthn: must've ended up in the rong place, then.

[21:44] <masak> good catch.

[21:45] <felher> masak: one thing, though: "Depsite arnsholt's quote above, it hasn't been proven NP-hard". Did you want to write NP-complete?

[21:46] <masak> I feared I might've wanted that, yes...

[21:46] <jnthn> One interesting note from http://strangelyconsistent.org/p6cc2011/t3/zbiciak/ is that where clauses could in theory have been used in the MAIN signature, but the error messages that resulted woulda been worse.

[21:46] <jnthn> I wonder if there's a best of both world's solution :)

[21:47] <masak> felher: though if it's not NP-hard, it's not NP-complete either, I guess.

[21:47] <felher> masak: np-complete is a subset of np-hard. So there are Problems that are not NP-hard but NP-Complete.

[21:48] <masak> jnthn: maybe if we can stringify the contents of blocks... :)

[21:48] <masak> felher: right. better go with "NP-complete" then.

[21:48] <masak> I don't think it has been proved either, but "NP-complete" is what arnsholt++ said.

[21:49] <masak> felher++ # thanks

[21:49] <felher> :)

[21:57] <arnsholt> Oh, I thought I read that it was NP-complete

[21:58] <arnsholt> But that might be one of those more general ones you mention

[21:58] <masak> as far as I know, it hasn't been shown to be NP-complete.

[21:59] <arnsholt> Cool. You've probably got a better handle on it than me =)

[22:00] <arnsholt> I'm flattered to be picked for the cover blurb though =)

[22:02] *** NamelessTee left
[22:03] *** Vespakoen_ left
[22:08] <libertyprime> gfldex: yeah, that's what inspired me!

[22:08] *** skipper joined
[22:09] <gfldex> :)

[22:11] *** havenn left
[22:14] *** NamelessTee joined
[22:15] *** skipper left
[22:31] *** havenn joined
[22:35] *** mj41 left
[22:36] *** ksi left
[22:38] *** donaldh joined
[22:41] *** kaare_ left
[22:42] *** overrosy joined
[22:46] *** overrosy left
[22:48] *** skids joined
[22:50] <masak> 'night, #perl6

[22:52] <felher> o/ masak 

[22:54] <jnthn> Hm. Given I've got 16 hours worth of flying along with the various associated hours in airports coming up tomorrow...guess I should sleep too :)

[22:54] <jnthn> 'night o/

[22:54] <tadzik> good night jnthn 

[22:54] <felher> o/ jnthn 

[22:54] <jnthn> tadzik: Oh, I forgot - congrats on the job! :)

[22:54] <jnthn> 'night o/

[22:55] <tadzik> thanks jnthn :)

[22:56] <felher> tadzik: what job? 

[22:56] <tadzik> felher: Perl dev at Opera

[22:56] <flussence> wow, gj :)

[22:57] <felher> tadzik: Opera? Those with their browser?

[22:58] <tadzik> aye :)

[22:58] <tadzik> flussence: yeah, it's pretty great

[22:58] <tadzik> at a first glance at least, I'm starting on friday

[23:00] <felher> tadzik: Oh nice. After all, Opera is my backup-browser in case uzbl doesn't display some page correctly. So the next time i have problems with my backup-browser... ... :)

[23:01] <felher> tadzik: so, congrats from me, too :)

[23:06] <japhb> Quite, congrats tadzik!

[23:09] *** whiteknight joined
[23:09] <tadzik> thank you :)

[23:22] *** Jerkwad joined
[23:35] *** stepnem left
[23:44] *** skipper joined
[23:45] *** Trashlord left
[23:45] *** hugme left
[23:45] *** diakopter left
[23:45] *** cxreg left
[23:45] *** cxreg joined
[23:46] *** diakopter joined
[23:47] *** Trashlord joined
[23:47] *** havenn left
[23:50] *** envi_ joined
[23:50] *** Chillance left
[23:50] *** hugme joined
[23:50] *** ChanServ sets mode: +v hugme

[23:53] *** NamelessTee left
[23:54] <felher> night folks

[23:54] <tadzik> 'night

[23:55] <sorear> good * #perl6

[23:56] <tadzik> hello sorear 

[23:57] *** pochi left
[23:59] *** PacoAir left
