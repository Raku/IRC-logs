[00:02] *** mr007x left
[00:06] *** dayangkun joined
[00:16] *** MayDaniel left
[00:24] *** benabik left
[00:37] *** Chillance left
[00:38] *** sivoais left
[00:39] *** sivoais joined
[00:44] <rjbs> What a day!  Cheer me up, #perl6!  What's new?

[00:47] *** ChoHag left
[00:48] *** anuby joined
[00:55] *** pmurias left
[01:01] <arnsholt> phenny: tell masak Friday works for me

[01:01] <phenny> arnsholt: I'll pass that on when masak is around.

[01:03] *** fgomez left
[01:05] *** benabik joined
[01:14] *** ChoHag joined
[01:15] <arnsholt> phenny: tell jnthn Friday work for you? Thursday's bad for masak

[01:15] <phenny> arnsholt: I'll pass that on when jnthn is around.

[01:16] *** hypolin joined
[01:16] *** sudokode left
[01:21] *** stocks joined
[01:28] *** VXZ joined
[01:34] *** benabik left
[01:37] *** fgomez joined
[01:38] <[Coke]> r: new.WHAT

[01:38] <p6eval> rakudo 34febe: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&new' called (line 1)␤»

[01:43] *** am0c joined
[01:45] <diakopter> r: say (&new).WHAT

[01:45] <p6eval> rakudo 34febe: OUTPUT«Nil␤»

[01:45] <diakopter> r: say (&ne).WHAT

[01:45] <p6eval> rakudo 34febe: OUTPUT«Nil␤»

[01:45] <diakopter> r: say (&booger).WHAT

[01:45] <p6eval> rakudo 34febe: OUTPUT«Nil␤»

[01:45] <diakopter> eh

[01:46] <sorear> r: say &booger

[01:46] <p6eval> rakudo 34febe: OUTPUT«Nil␤»

[01:52] <[Coke]> rjbs: there's a new Star Wars movie coming out in 2015.

[01:52] <[Coke]> rjbs: I am provisionally cheered.

[01:53] <rjbs> I am curious as to what it will be.

[01:53] <sorear> VII

[01:54] <[Coke]> sorear: I think he was going slightly deeper.

[01:54] <rjbs> Yeah.  What's the plot?

[01:55] <rjbs> I'm hoping it will be a romantic comedy taking place in a suburb moon of Coruscant.

[01:56] <sorear> "last I heard (which was about 15 years ago) it's going to involve Luke's son"

[01:58] <[Coke]> rjbs: seth green is working on a comedy set on coruscant, I believe.

[01:59] <rjbs> starring action figures?

[02:00] <[Coke]> rjbs: http://www.ign.com/articles/2012/08/24/first-footage-shown-from-seth-green-and-matt-senreichs-star-wars-detours-animated-series

[02:00] <rjbs> oh yeah, heard about that

[02:01] <[Coke]> ah, I lied about the setting.

[02:11] *** bowtie left
[02:11] *** benabik joined
[02:11] *** NullByte left
[02:13] *** gootle joined
[02:21] *** sudokode joined
[02:21] <[Coke]> jnthn: in nqp, how can i tell if something is a sixmodelobject?

[02:22] <[Coke]> (hace to split use of clone && repr_clone) :(

[02:22] <[Coke]> *have

[02:22] <sorear> nqp: 5 + pir::new('FixedPMCArray')

[02:22] <p6eval> nqp: OUTPUT«Error while compiling block : Error while compiling op add_n: ResizableStringArray: Can't shift from an empty array!␤current instr.: '' pc 43971 (src/stage2/QAST.pir:15393) (src/stage2/QAST.nqp:2331)␤»

[02:22] <sorear> nqp: 5 + pir::getinterp__p()

[02:22] <p6eval> nqp: OUTPUT«Error while compiling block : Error while compiling op add_n: Cannot infer type from ''␤current instr.: '' pc 43971 (src/stage2/QAST.pir:15393) (src/stage2/QAST.nqp:2331)␤»

[02:23] <sorear> nqp: 5 + pir::getinterp__P()

[02:23] <p6eval> nqp: OUTPUT«get_number() not implemented in class 'ParrotInterpreter'␤current instr.: '' pc 45 ((file unknown):154158703) (/tmp/nKXoJLKlm0:1)␤»

[02:23] <sorear> nqp: pir::getinterp__P().moo

[02:23] <p6eval> nqp: OUTPUT«Method 'moo' not found for invocant of class 'ParrotInterpreter'␤current instr.: '' pc 48 ((file unknown):38) (/tmp/Em44dtINkc:1)␤»

[02:23] <sorear> nqp: pir::getinterp__P().WHAT

[02:23] <p6eval> nqp: OUTPUT«Can only use get_what on a SixModelObject␤current instr.: '' pc 42 ((file unknown):38) (/tmp/2k6E8q3T4u:1)␤»

[02:23] <sorear> nqp: say(pir::isa(pir::getinterp__P(),'SixModelObject'))

[02:23] <p6eval> nqp: OUTPUT«Error while compiling block : Error while compiling op call: ResizableStringArray: Can't shift from an empty array!␤current instr.: '' pc 43971 (src/stage2/QAST.pir:15393) (src/stage2/QAST.nqp:2331)␤»

[02:23] <sorear> nqp: say(pir::isa__IPS(pir::getinterp__P(),'SixModelObject'))

[02:23] <p6eval> nqp: OUTPUT«0␤»

[02:24] <sorear> nqp: say(pir::isa__IPS(5,'SixModelObject'))

[02:24] <p6eval> nqp: OUTPUT«0␤»

[02:24] <sorear> nqp: say(pir::gettype__SP(5))

[02:24] <p6eval> nqp: OUTPUT«error:imcc:syntax error, unexpected SREG, expecting '(' ('$S5001')␤ in file '(file unknown)' line 38␤␤»

[02:25] <sorear> nqp: say(pir::typeof__SP(5))

[02:25] <p6eval> nqp: OUTPUT«Integer␤»

[02:25] <sorear> nqp: my $x = 5; say(pir::typeof__SP($x))

[02:25] <p6eval> nqp: OUTPUT«Assignment ("=") not supported in NQP, use ":=" instead at line 2, near " 5; say(pi"␤current instr.: 'panic' pc 13089 (src/stage2/gen/NQPHLL.pir:4619) (src/stage2/gen/NQPHLL.pm:324)␤»

[02:25] <sorear> nqp: my $x := 5; say(pir::typeof__SP($x))

[02:25] <p6eval> nqp: OUTPUT«Integer␤»

[02:25] <sorear> nqp: 5.WHAT

[02:25] <p6eval> nqp: OUTPUT«Can only use get_what on a SixModelObject␤current instr.: '' pc 43 ((file unknown):38) (/tmp/0j7pSKMD9K:1)␤»

[02:25] <sorear> nqp: [].WHAT

[02:25] <p6eval> nqp: OUTPUT«Can only use get_what on a SixModelObject␤current instr.: '' pc 43 ((file unknown):38) (/tmp/6LXEyWDw0C:1)␤»

[02:26] <sorear> nqp: say(pir::isa__IPS(NQPMu,'SixModelObject'))

[02:26] <p6eval> nqp: OUTPUT«1␤»

[02:26] <sorear> nqp: say(pir::isa__IPS(5,'SixModelObject'))

[02:26] <p6eval> nqp: OUTPUT«0␤»

[02:26] <sorear> [Coke]: ^ might work until you get a Real Answer(tm) from jnthn 

[02:32] *** plobsing joined
[02:47] *** am0c left
[02:52] *** hash_table left
[02:53] *** sudokode left
[02:58] *** sudokode joined
[03:10] *** stocks_ joined
[03:10] *** stocks left
[03:15] *** orafu left
[03:15] *** orafu joined
[03:29] <japhb> o/

[03:39] *** timotimo_ left
[03:39] *** timotimo joined
[04:11] *** stocks_ left
[04:34] *** infosophy left
[04:35] *** infosophy joined
[04:42] *** havenn joined
[04:46] *** stocks joined
[04:46] *** [particle] left
[04:48] *** dayangkun left
[04:48] *** [particle] joined
[04:48] *** stocks left
[04:59] *** kaleem joined
[05:19] *** _jaldhar joined
[05:20] *** fgomez left
[05:28] *** telex left
[05:31] *** birdwindupbird joined
[05:31] *** fgomez joined
[05:33] *** _jaldhar left
[05:36] *** _jaldhar joined
[05:37] *** telex joined
[05:41] *** kurahaupo left
[05:42] *** cognominal left
[05:44] <diakopter> how adorkable

[05:48] *** cognominal joined
[06:13] *** cognominal left
[06:27] *** dayangkun joined
[06:28] *** SamuraiJack joined
[06:29] *** GlitchMr joined
[06:58] *** sudokode left
[07:12] *** sudokode joined
[07:27] *** plobsing left
[07:31] *** SamuraiJack_ joined
[07:34] *** SamuraiJack left
[07:35] <jnthn> phenny: tell arnsholt yes, Friday works for me also

[07:35] <phenny> jnthn: I'll pass that on when arnsholt is around.

[07:35] <phenny> jnthn: 01:15Z <arnsholt> tell jnthn Friday work for you? Thursday's bad for masak

[07:41] *** domidumont joined
[07:43] <diakopter> o/

[07:44] <sorear> o/

[07:45] <shachaf> sorear: Does Perl 6 have something like lenses and traversals? :-)

[08:04] *** domidumont left
[08:05] *** domidumont joined
[08:06] *** sudokode left
[08:09] *** wk left
[08:10] *** GlitchMr left
[08:19] *** hoelzro|away is now known as hoelzro

[08:30] <arnsholt> Heh. Preemptive phenny reply

[08:30] <phenny> arnsholt: 07:35Z <jnthn> tell arnsholt yes, Friday works for me also

[08:39] *** Gothmog_ left
[08:39] *** Gothmog_ joined
[08:42] <tadzik> good morning

[08:45] *** rindolf joined
[09:00] <hoelzro> is the following valid Perl6? Int sub foo { return 0; }

[09:00] <hoelzro> I'm wondering if Rakudo just doesn't parse it

[09:01] <tadzik> std: Int sub foo { return 0; }

[09:01] *** flightrecorder joined
[09:01] <p6eval> std edd7715: OUTPUT«===SORRY!===␤Two terms in a row (listop with args requires whitespace or parens) at /tmp/mV8FOqTv7E line 1:␤------> Int ⏏sub foo { return 0; }␤    expecting any of:␤  infix or meta-infix␤    infixed function␤       statement modifier loop␤P…

[09:01] <tadzik> yeah, invalid Perl 6

[09:01] <hoelzro> what's std? just a parser?

[09:01] <tadzik> std: sub foo returns Int { return 0; }

[09:01] <p6eval> std edd7715: OUTPUT«ok 00:00 42m␤»

[09:01] <tadzik> yes

[09:01] <hoelzro> ah, returns Int, that's good to know

[09:01] *** ChoHag left
[09:01] <tadzik> std: sub foo(--> Int) { return 0; }

[09:01] <p6eval> std edd7715: OUTPUT«ok 00:00 44m␤»

[09:01] * hoelzro is improving vim-perl for Perl 6

[09:01] <tadzik> or this

[09:02] <diakopter> parser + some semantic analysis/checking

[09:02] <moritz> mostly related to symbol tables

[09:02] <hoelzro> std: sub foo ($bar) returns Int { return 0; }

[09:02] <p6eval> std edd7715: OUTPUT«Potential difficulties:␤  $bar is declared but not used at /tmp/YUKeTqkY9l line 1:␤------> sub foo (⏏$bar) returns Int { return 0; }␤ok 00:00 44m␤»

[09:03] <hoelzro> std: sub foo (Int $bar) returns Int { return $bar + 0; }

[09:03] <p6eval> std edd7715: OUTPUT«ok 00:00 46m␤»

[09:03] <hoelzro> \o/

[09:05] * diakopter just lifted his Thinkpad by the corner of the front, and heard/felt some cracks

[09:05] <tadzik> use duct tape. It fixed mine

[09:06] <diakopter> probably something to do with dropping it on that corner the other day

[09:06] *** brrt joined
[09:06] <hoelzro> my Thinkpad faceplanted into a coffeeshop floor a few months ago

[09:07] <hoelzro> still running =)

[09:07] <hoelzro> (although the HDD needed replacement)

[09:07] <tadzik> did you replace it with the ssd?

[09:07] <hoelzro> no, actually

[09:08] <tadzik> do consider it next time, it's awesome :)

[09:08] <hoelzro> I'm thinking of moving my desktop to an SSD when I move back to the US, though

[09:08] <hoelzro> I like the extra space of a conventional drive ;)

[09:08] * diakopter has the ssd, and is running very low on space

[09:09] <diakopter> clearly $work's IT can't afford the big ssds

[09:11] <tadzik> uh-oh

[09:11] <tadzik> rakudo/Q just started swapping on my ssd

[09:11] <tadzik> do not want

[09:11] <bonsaikitten> hoelzro: use a SSD as cache for a harddisk

[09:11] <bonsaikitten> that way you get a good compromise of both

[09:11] <hoelzro> bonsaikitten: in a laptop, though?

[09:12] <bonsaikitten> hoelzro: hybrid drives ... but yeah, laptop is a bit cramped

[09:12] *** wk joined
[09:13] <tadzik> jnthn, jnthn 

[09:15] <hoelzro> is there a way I could run std on my local machine, so I don't need to come here and spam the channel with questionable Perl6? ;)

[09:15] <tadzik> you can always /query p6eval

[09:15] <diakopter> well, you can msg p6eval directly

[09:15] <hoelzro> fair enough =)

[09:15] <tadzik> but yes, I think you can install viv locally

[09:15] <diakopter> git checkout it from perl6/std

[09:15] <diakopter> make

[09:16] <diakopter> (doesn't work on windows at all)

[09:16] <diakopter> (cygwin included - I tried for hours)

[09:16] *** muixirt joined
[09:17] <muixirt> hi

[09:17] <diakopter> hi

[09:17] <muixirt> does anyone know why rakudo star for windows downloads spiked?

[09:18] <diakopter> linked from twitter? dunno

[09:20] <jnthn> tadzik, tadzik! 

[09:20] <tadzik> jnthn: are you aware of the memory problem of rakudo/Q?

[09:20] <tadzik> I mean, 4G not being enough to build it anymore

[09:21] *** kresike joined
[09:21] <jnthn> tadzik: Whoa...really? :/

[09:21] <kresike> hello all you happy perl6 people

[09:21] *** HarryS left
[09:21] <tadzik> jnthn: yep, I'm afraid so :(

[09:21] <tadzik> my laptop didn't make it

[09:21] <jnthn> Odd...on my box it builds no slower than nom

[09:21] <tadzik> no slower, maybe :)

[09:22] <jnthn> then, it's 16 GB of RAM

[09:22] <tadzik> I originally doubled ram on my laptop to be able to build rakudo in early nom days

[09:22] <tadzik> not sure if my motherboard can handle more :)

[09:23] <jnthn> Well, it aint' gonna merge with a memory usage regression like that...

[09:23] *** muixirt_ joined
[09:23] <diakopter> merge it with fire

[09:23] <tadzik> I wanted to work on Pod formatting codes for moritz, now that there's nibbler and awesomeness generally

[09:25] *** cognominal joined
[09:25] *** muixirt left
[09:25] *** muixirt_ is now known as muixirt

[09:25] <moritz> nibbler, quibbler, babble, ...

[09:26] <jnthn> Blame STD for those :P

[09:26] <jnthn> I can think of two things it could be

[09:26] <tadzik> I'm bisecting Q now, maybe that'll help

[09:27] <jnthn> either 1) we're somehow capturing a LOAD more match objects, or 2) the derived quote languages are insanely costly.

[09:27] <moritz> or 3) we have some weird memory corruptions which the moon phases of Q trigger, but nom does not

[09:27] <diakopter> or tadzik's machine is finicky

[09:28] <diakopter> "I don't like star lately"

[09:28] <brrt> anyone got a good git bisect guide?

[09:29] *** ChoHag joined
[09:29] <hoelzro> brrt: like, how to use it, or...?

[09:29] <brrt> i want to figure out why building nqp on darwin-x86-64 segfaults

[09:29] *** daxim joined
[09:29] <brrt> so, yes, how to use it

[09:30] <tadzik> well, you git bisect start

[09:30] *** havenn left
[09:30] <tadzik> then you have to find two revisions, good and bad. You do git bisect good and git bisect bad on another

[09:31] <tadzik> then git will automagically jump to various revisions which you then test and classify (git bisect good|bad)

[09:31] <tadzik> and at some point it will stop and say "now. This is the commit that broke stuff"

[09:31] <brrt> ah

[09:31] <brrt> that seems simple enough

[09:31] <moritz> it's a binary search

[09:31] <moritz> except that you do things like skip commits

[09:32] <moritz> which makes it a bit more complex under the hood

[09:32] <brrt> well, with a bit of work i'll figure out the nqp regression then

[09:33] <bonsaikitten> brrt: if you have a test case that can be run in a shell script you can automate it

[09:33] <bonsaikitten> which means you let the computer do the heavy lifting :)

[09:34] *** marloshouse_ joined
[09:34] <moritz> somehow I never manged to get that script right

[09:34] <hoelzro> is std *supposed* to spit out funky symbols, like the symbol for the eject button?

[09:34] <moritz> though when I tried, it were rather complex cases

[09:34] <moritz> hoelzro: yes

[09:34] <hoelzro> interesting...

[09:34] <hoelzro> I always thought that was an issue with irssi

[09:34] * hoelzro shrugs

[09:35] <moritz> the eject symbol marks the spot where a syntax error was found

[09:37] <brrt> bonsaikitten, the test if any is 'make'

[09:38] <bonsaikitten> brrt: and that gives sane return values

[09:38] *** Rix joined
[09:44] <brrt> fun

[09:45] *** cognominal_ joined
[09:46] <tadzik> jnthn: 467a479850ce70c11b7905e618c6879fc1ee1d22 is the first bad commit

[09:46] <tadzik> Switch single quoted strings to new quote parser.

[09:47] <tadzik> the first one that exceeds 20% of my memory on stage parse and then goes up to 11

[09:48] *** cognominal left
[09:49] <brrt> compiling QAST is a bit slow, though

[09:49] <brrt> but it seems to work

[09:51] *** patspam_ left
[09:51] *** patspam joined
[09:53] *** mr007x joined
[09:54] *** grondilu joined
[09:54] <grondilu> rn: proto f($ where * > 0) {*}; multi f($n) { $n*2 }; say f -1;

[09:54] <p6eval> rakudo 34febe, niecza v22-15-gc600005: OUTPUT«-2␤»

[09:55] <brrt> i have the evil commit

[09:55] * grondilu thought multis inherit constraints from their proto

[09:56] <brrt>    Eliminate use of lexpad_pull cheat.

[09:57] <moritz> grondilu: they should

[09:57] <moritz> grondilu: I think that's a bug

[09:58] <moritz> r: proto f(Int $) {*}; multi f($) { 42 }; say f 'foo'

[09:58] <p6eval> rakudo 34febe: OUTPUT«42␤»

[09:59] <jnthn> r: proto f(Int $) { {*} }; multi f($) { 42 }; say f 'foo'

[09:59] <p6eval> rakudo 34febe: OUTPUT«Nominal type check failed for parameter ''; expected Int but got Str instead␤  in sub f at /tmp/VLCNua6c9F:1␤  in block  at /tmp/VLCNua6c9F:1␤␤»

[09:59] <jnthn> ah...onlystar inlining is cheating and getting caught I suspect

[09:59] *** Rix is now known as Bulgaria

[10:00] <jnthn> Above is workaround anyway

[10:00] <moritz> that's probably why my proto-arity branch didn't slow down rakudo :-)

[10:00] <brrt> jnthn: I have the commit which breaks nqp on mac systems

[10:01] <brrt> its probably a compiler difference now that i think of it

[10:01] <tadzik> moritz: I think custom-lib actually broke panda, to some extend

[10:01] <tadzik> it no longer finds .panda/state on rebootstrap

[10:01] <jnthn> brrt: Oh?

[10:02] <brrt> the [Coke] problem

[10:02] <tadzik> or it now wants it to be in ~/.perl6/ somewhere?

[10:02] <jnthn> brrt: Ah, same commit he found?

[10:02] <brrt> i'll push it on github

[10:02] <brrt> i don't know

[10:02] <brrt> he also ran git bisect probably :-)

[10:03] *** cognominal_ left
[10:05] <rindolf> Hi all.

[10:05] <hoelzro> ahoy

[10:05] <rindolf> hoelzro: what's up?

[10:05] <brrt> i'll backlog to see what he found

[10:05] <hoelzro> nothing really

[10:05] <hoelzro> I started adding some improvements to the Vim syntax file for Perl 6 last night, thought

[10:05] <hoelzro> *though

[10:06] <hoelzro> I supppose that's significant =)

[10:06] *** cognominal_ joined
[10:06] <jnthn> .oO( vimprovements )

[10:06] <rindolf> jnthn: heh.

[10:06] <diakopter> is there a cpu or os instruction that says "please don't preempt me during the next X instructions"?

[10:07] <jnthn> not afaik

[10:07] *** hypolin left
[10:07] <diakopter> because that would be nice

[10:07] <jnthn> for DoS attacks!

[10:07] <diakopter> anything's bad for untrusted code

[10:08] <hoelzro> if I want to check Perl 6 code for standard correctness on my local machine, I'm guessing I should just run std/tools/tryfile on the file in question?

[10:08] <hoelzro> that, or just type some code into STDIN?

[10:09] <moritz> sounds right

[10:09] *** anuby left
[10:10] <brrt> can i post the diff somewhere?

[10:10] <jnthn> gist?

[10:10] <hoelzro> that's interesting, because the example I posted earlier is ok according to std/tools/tryfile...

[10:11] <hoelzro> (Int sub foo { return 0; })

[10:11] <moritz> diakopter: I can imagine that real-time systems might have such a mechanism

[10:11] <brrt> good idea

[10:11] *** muixirt_ joined
[10:11] <moritz> r: Int sub foo { return 0; }

[10:11] <p6eval> rakudo 34febe: OUTPUT«===SORRY!===␤Confused␤at /tmp/ejIsTVfn_h:1␤»

[10:11] <moritz> r: my Int sub foo { return 0; }

[10:11] <p6eval> rakudo 34febe:  ( no output )

[10:11] <hoelzro> I know Rakudo doesn't parse it

[10:12] <hoelzro> std: Int sub foo { return 0; }

[10:12] <p6eval> std edd7715: OUTPUT«===SORRY!===␤Two terms in a row (listop with args requires whitespace or parens) at /tmp/fntRXARyIH line 1:␤------> Int ⏏sub foo { return 0; }␤    expecting any of:␤  infix or meta-infix␤    infixed function␤       statement modifier loop␤P…

[10:12] <hoelzro> and it gets angry here, too...

[10:12] <hoelzro> and I have the same commit

[10:12] *** muixirt left
[10:12] <grondilu> rn: multi f($n where * %% 2) { $n }; multi f($n) { &?ROUTINE($n+1) }; say f 3;

[10:12] <hoelzro> I'm running this: 

[10:12] <hoelzro> echo 'Int sub foo { return 0; }' | ./tools/tryfile 

[10:12] *** muixirt_ is now known as muixirt

[10:13] <p6eval> niecza v22-15-gc600005: OUTPUT«(timeout)»

[10:13] <p6eval> ..rakudo 34febe: OUTPUT«maximum recursion depth exceeded␤current instr.: 'print_exception' pc 89115 (src/gen/CORE.setting.pir:42750) (src/gen/CORE.setting:9098)␤called from Sub 'infix:<+>' pc 54896 (src/gen/CORE.setting.pir:26231) (src/gen/CORE.setting:2941)␤called from Sub 'f' pc 272 ((f…

[10:13] <brrt> https://gist.github.com/3986248

[10:13] <grondilu> shouldn't &?ROUTINE redispatch a multi?

[10:13] <grondilu> (if you see what I mean)

[10:14] <jnthn> grondilu: No, it means the curernt routine you're in

[10:14] <grondilu> so I need to be explicit and use the actual name of the function?

[10:14] <jnthn> Yes

[10:14] <jnthn> Well

[10:15] <jnthn> You can get to the proto from &?ROUTINE I guess...

[10:15] <jnthn> &?ROUTINE.dispatcher iirc

[10:15] <grondilu> rn: multi f($n where * %% 2) { $n }; multi f($n) { &?ROUTINE.dispatcher.($n+1) }; say f 3;

[10:15] <p6eval> rakudo 34febe: OUTPUT«4␤»

[10:15] <p6eval> ..niecza v22-15-gc600005: OUTPUT«Unhandled exception: Unable to resolve method dispatcher in type Sub␤  at /tmp/YACv5Qeo7n line 1 (f @ 4) ␤  at /tmp/YACv5Qeo7n line 1 (mainline @ 5) ␤  at /home/p6eval/niecza/lib/CORE.setting line 4215 (ANON @ 3) ␤  at /home/p6eval/niecza/lib/CORE.setting …

[10:16] <grondilu> works with rakudo indeed

[10:18] <hoelzro> huh...so my example fails with tloop

[10:20] <hoelzro> oh, ok, I figured it out

[10:20] <hoelzro> tryfile doesn't read Perl6 from STDIN if you provide no files; it reads a *list* of files from STDIN which it tests

[10:21] *** dayangkun left
[10:25] *** bloonix left
[10:25] <moritz> hoelzro: now that you mention it, I remember that TimToady++ piped in `git log --stat` from the tests to syntax-check the changed test files, or something

[10:28] *** muixirt left
[10:28] *** azawawi joined
[10:33] <hoelzro> that makes sense, I guess

[10:42] <moritz> nqp::ctxcaller(nqp::ctx());

[10:43] <moritz> I'd expect that to be nqp::ctxcaller(nqp::interp())

[10:43] <moritz> but then I don't know anything about how nqp::ctxcaller works

[10:43] <jnthn> It takes a ctx and gets its caller

[10:43] <jnthn> So you can walk a chain of contexts

[10:43] *** birdwindupbird left
[10:43] <brrt> … any chance there is a zero somewhere there?

[10:44] <diakopter> nqp: say(nqp::ctxcaller(nqp::ctx()).gist)

[10:44] <p6eval> nqp: OUTPUT«Method 'gist' not found for invocant of class 'CallContext'␤current instr.: '' pc 56 ((file unknown):40) (/tmp/Q2E_cLXs94:1)␤»

[10:45] *** fgomez left
[10:46] <jnthn> brrt: I'd hope any nulls become proper Parrot nulls...

[10:46] <diakopter> nqp: say(nqp::ctxcaller(nqp::ctxcaller(nqp::ctxcaller(nqp::ctxcaller(nqp::ctxcaller(nqp::ctxcaller(nqp::ctxcaller(nqp::ctxcaller(nqp::ctxcaller(nqp::ctxcaller(nqp::ctx())))))))))).gist)

[10:46] <p6eval> nqp: OUTPUT«(signal SEGV)»

[10:46] <diakopter> whee.

[10:46] <brrt> jnthn: evidence is they don't, in the general case

[10:46] <jnthn> Then, Parrot bug...

[10:47] <diakopter> jnthn: ^^ <snicker>

[10:47] <diakopter> (not snicker at nqp; just snicker at the code that breaks it)

[10:48] <jnthn> diakopter: You don't need the .gist

[10:48] <brrt> jnthn: thats not really fair, the ops are implemented in nqp

[10:48] <brrt> in c

[10:48] <brrt> they can introduce the bug easily

[10:49] <moritz> then look at the PIR it's compiled to

[10:49] <jnthn> brrt: What ops?

[10:49] <azawawi> hi

[10:49] <jnthn> brrt: I'm calling getattribute on a context.

[10:49] <jnthn> It's not even a dynop that NQP has added.

[10:49] <brrt> hmm

[10:50] *** cognominal_ left
[10:53] <azawawi> moritz: is there a way to catch a bad-file-name open and not die from it? :)

[10:53] <diakopter> nqp: my $_ := nqp::ctx(); $_ := nqp::ctxcaller($_) while 1;

[10:53] <p6eval> nqp: OUTPUT«(signal SEGV)»

[10:53] <azawawi> moritz: try { open 'bad-file-name'; CATCH { say "Caught!" } }    # "caught" and not "Caught\nUnable to open filehandle from path 'bad-file-name'"

[10:54] *** bloonix joined
[10:54] <diakopter> phenny: tell masak masakbot :) nqp: my $_ := nqp::ctx(); $_ := nqp::ctxcaller($_) while 1;

[10:54] <phenny> diakopter: I'll pass that on when masak is around.

[10:54] <moritz> azawawi: sure. add a handler for the exception inside the CATCH block

[10:57] <moritz> azawawi: if you write a CATCH block yourself, you have to write a 'when' (or a 'default') block that matches the exception

[10:57] <moritz> azawawi: on then is it marked as handled. If not, it's rethrown when you exit the CATCH block

[10:58] <azawawi> moritz: got it... thanks

[10:58] <tadzik> do we have a way to capture both stdout of a process and its error code?

[10:58] <brrt> i can't see where it is defined

[10:59] <moritz> tadzik: maybe with open :p ?

[11:00] <tadzik> I didn't know we have such thing :)

[11:00] *** Khisanth left
[11:01] <tadzik> p6prove so far: https://gist.github.com/3986456

[11:02] <moritz> \o/

[11:02] *** brrt left
[11:02] *** ingy left
[11:03] *** ingy joined
[11:03] *** sivoais left
[11:03] *** gugod left
[11:03] *** doy left
[11:03] *** dbr left
[11:03] *** ruoso left
[11:04] *** doy joined
[11:04] *** dbr joined
[11:04] <dalek> panda: fb6ced2 | tadzik++ | bootstrap.pl:

[11:04] <dalek> panda: Add a friendly message to bootstrap.pl, now that bin is in a new place

[11:04] <dalek> panda: review: https://github.com/tadzik/panda/commit/fb6ced21ec

[11:05] *** ruoso joined
[11:07] <flussence> hoelzro++ # fixing vim-perl

[11:08] <hoelzro> flussence: I'm just adding syntax folding; I'm not really fixing anything =P

[11:08] <hoelzro> but I'm going to work with petdance to get rid of some small issues, maybe

[11:12] *** birdwindupbird joined
[11:12] *** sivoais joined
[11:19] *** gugod joined
[11:26] *** cognominal joined
[11:30] *** ChoHag left
[11:33] *** wk left
[11:34] *** gootle left
[11:36] *** gootle joined
[11:36] *** gootle left
[11:40] *** dmiu joined
[11:40] *** dmiu left
[11:44] *** kaleem left
[11:49] *** kaleem joined
[11:51] *** SmokeMachine left
[11:56] *** dayangkun joined
[11:57] *** SmokeMachine joined
[12:07] *** cognominal left
[12:08] <Woodi> diakopter: about cracking Thinkpad: T40's had known bug that base of laptop was too elastic and when you lift it when it is hot then graphic procesor soldering was damaged and you get blue screens from now on... probably seence [TX]60's base is more solid but your cracking sound looks similiar

[12:09] <Woodi> afternoon v6 ppls :)

[12:11] <diakopter> yeah it sounded like plastic that was already cracked was splintering

[12:11] <azawawi> moritz: does 'require' in Perl 6 work in the same way that it works in Perl?

[12:12] <moritz> azawawi: no

[12:13] <jnthn> Well, it loads things at runtime. The difference is mostly in the import semantics.

[12:13] *** spider-mario joined
[12:13] <azawawi> jnthn: interesting

[12:13] <jnthn> Which I guess is a pretty huge difference ;)

[12:13] *** cognominal joined
[12:13] <diakopter> rn: require YourMom

[12:14] <p6eval> niecza v22-15-gc600005: OUTPUT«Unhandled exception: System.NotImplementedException: The requested feature is not implemented.␤  at Anon.1.Run.MAIN.C0mainline (Niecza.Frame ) [0x00000] in <filename unknown>:0 ␤  at Niecza.Kernel.RunCore (Niecza.Frame& cur) [0x00000] in <filename unknown>…

[12:14] <p6eval> ..rakudo 34febe: OUTPUT«Could not find YourMom in any of: /home/p6eval/nom-inst/lib/parrot/4.8.0-devel/languages/perl6/lib, /home/p6eval/nom-inst/lib/parrot/4.8.0-devel/languages/perl6/vendor/lib, /home/p6eval/nom-inst/lib/parrot/4.8.0-devel/languages/perl6/site/lib, /home/p6eval/.perl6/2…

[12:14] <jnthn> Your mom is not implemented in Niecza...

[12:14] <moritz> azawawi: the difference is that stuff in Perl 6 is imported into the lexpad, which is immutable at run time

[12:15] <moritz> azawawi: so you must supply a list of symbols you want to import in the require statement

[12:15] <azawawi> im refactoring things in farabi6... and wanted to delay loading File::Spec until being used in the HTTP actions/routes...

[12:15] <azawawi> so i deleted those use File::Spec and move require into the HTTP GET action sub...

[12:15] <azawawi> and now it is not finding '&Spec'...

[12:16] <azawawi> http://paste.debian.net/205225/

[12:19] <moritz> r: require A::B:; say A::B; BEGIN exit;

[12:19] <p6eval> rakudo 34febe: OUTPUT«===SORRY!===␤Confused␤at /tmp/6RzdGeiT50:1␤»

[12:20] *** mr007x left
[12:22] <azawawi> r: sub foo { require File::Spec; say File::Spec.catdir('a','b'); }; foo;

[12:22] <p6eval> rakudo 34febe: OUTPUT«Could not find File::Spec in any of: /home/p6eval/nom-inst/lib/parrot/4.8.0-devel/languages/perl6/lib, /home/p6eval/nom-inst/lib/parrot/4.8.0-devel/languages/perl6/vendor/lib, /home/p6eval/nom-inst/lib/parrot/4.8.0-devel/languages/perl6/site/lib, /home/p6eval/.perl…

[12:22] <jnthn> Try with star

[12:22] <azawawi> star: sub foo { require File::Spec; say File::Spec.catdir('a','b'); }; foo;

[12:22] <p6eval> star 2012.10: OUTPUT«Could not find File::Spec in any of: /home/p6eval/star/lib/parrot/4.6.0/languages/perl6/lib, /home/p6eval/star/lib/parrot/4.6.0/languages/perl6/vendor/lib, /home/p6eval/star/lib/parrot/4.6.0/languages/perl6/site/lib, /home/p6eval/.perl6/2012.10/lib, /home/p6eval/.pe…

[12:22] <azawawi> rakudo star 2010 is here?

[12:23] <moritz> yes

[12:23] <azawawi> i didnt see any announcement about it

[12:23] <azawawi> cool

[12:23] <moritz> http://rakudo.org/2012/10/29/rakudo-star-2012-10-released/

[12:24] <moritz> r: require A::B; INIT { exit }

[12:24] <p6eval> rakudo 34febe:  ( no output )

[12:24] <moritz> r: require A::B; say A::B; INIT { exit }

[12:24] <p6eval> rakudo 34febe:  ( no output )

[12:24] <moritz> r: require A::B; say A::B; 

[12:24] <p6eval> rakudo 34febe: OUTPUT«Could not find A::B in any of: /home/p6eval/nom-inst/lib/parrot/4.8.0-devel/languages/perl6/lib, /home/p6eval/nom-inst/lib/parrot/4.8.0-devel/languages/perl6/vendor/lib, /home/p6eval/nom-inst/lib/parrot/4.8.0-devel/languages/perl6/site/lib, /home/p6eval/.perl6/2012…

[12:24] <moritz> r: require A::B; say A; INIT { exit }

[12:24] <p6eval> rakudo 34febe: OUTPUT«===SORRY!===␤CHECK FAILED:␤Undefined routine '&A' called (line 1)␤»

[12:25] <moritz> azawawi: it seems that require doesn't (yet?) declare the symbol you declare

[12:25] <moritz> azawawi: you can try to look it up at runtime with ::('File::Spec')

[12:25] <azawawi> moritz: see this strange behavior http://paste.debian.net/205228/

[12:25] <azawawi> moritz: rakudo star 2012.09

[12:26] <diakopter> r: exit &YourMom

[12:26] <p6eval> rakudo 34febe:  ( no output )

[12:26] <jnthn> azawawi: That's not entirely strange

[12:27] <jnthn> Whther Foo::Bar is a type name or a call is decided at compile time.

[12:27] <jnthn> require doesn't import things until runtime

[12:27] <moritz> and it doesn't import the type name currently

[12:27] <moritz> which might or might not be a bug

[12:27] <jnthn> The later lines in the REPL are compiled in the context of the previous scope

[12:27] <moritz> anyway, use ::('File::Spec') for now

[12:28] <moritz> jnthn: but why doesn't it find sub foo on lines 4/5 ?

[12:29] <azawawi> star: ::('File::Spec')

[12:29] <p6eval> star 2012.10:  ( no output )

[12:29] <azawawi> star: ::('File::Spec')

[12:29] <p6eval> star 2012.10:  ( no output )

[12:29] <diakopter> r: say say::~say

[12:29] <p6eval> rakudo 34febe: OUTPUT«␤␤TrueTrue␤»

[12:30] <azawawi> what about this one http://paste.debian.net/205229/ ?

[12:30] *** MayDaniel joined
[12:30] <moritz> azawawi: well, you didn't require File::Spec, did you?

[12:31] <moritz> anyway, it shouldn't give the second error message

[12:31] <azawawi> moritz: true but why the different error message on the second one

[12:31] <moritz> bug

[12:31] <azawawi> maybe it is the hidden AI inside perl6 :)

[12:32] <moritz> related to serialization, probably

[12:32] <azawawi> http://paste.debian.net/205230/    # same bug apparently

[12:33] * azawawi installs rakudo star 2012.10

[12:37] *** nyuszika7h left
[12:38] *** nyuszika7h joined
[12:38] <[Coke]> sorear++ # works.

[12:39] <[Coke]> Seems ugly, but I figure I'll go for functional and have pmichaud and jnthn  troll it for ugly after.

[12:40] <[Coke]> http://blogs.perl.org/users/leo_susanto/2012/10/garbage-collection.html Nice article about perl GC.

[12:43] *** hash_table joined
[12:48] *** benabik left
[12:55] <azawawi> is there a plan to bundle an editor  with rakudo star? hint: farabi6?

[12:57] <azawawi> Some languages come with a built-in editor.. why not perl6?

[12:59] *** FROGGS joined
[13:04] *** nyuszika7h left
[13:05] *** wk joined
[13:05] *** Patterner left
[13:06] *** nyuszika7h joined
[13:10] *** Psyche^ joined
[13:10] *** Psyche^ is now known as Patterner

[13:12] *** SamuraiJack_ left
[13:12] *** atrodo joined
[13:14] <[Coke]> I would probably not use it myself, but seems potentially useful

[13:14] <moritz> azawawi: what exactly is farabi6?

[13:15] <azawawi> moritz: https://github.com/azawawi/farabi6/blob/master/README.md

[13:16] <azawawi> moritz: basically im using a web-based interface with a perl 6 backend

[13:16] <PerlJam> azawawi: I don't think "explode in your face" jibes with Rakudo Star  :)

[13:16] <azawawi> PerlJam: :)

[13:20] <azawawi> moritz: basically i want to integrate perl6 tools here and there with farabi6

[13:20] <azawawi> moritz: and make it easier to write Perl 6

[13:21] <azawawi> moritz: basically an IDE in a browser... but you control the server...

[13:21] * hoelzro starts to install Farabi

[13:25] *** bluescreen10 joined
[13:25] *** cognominal left
[13:27] <spider-mario> (...)/pkg/usr/bin/perl6 --target=pir --output=(...)/pkg/usr/lib/parrot/4.8.0/languages/perl6/lib/SVG/Plot/Pie.pir (...)/pkg/usr/lib/parrot/4.8.0/languages/perl6/lib/SVG/Plot/Pie.pm

[13:27] <spider-mario> use of uninitialized value of type Any in string context  in  at src/Perl6/ModuleLoader.pm:256

[13:28] <spider-mario> it happens repeatedly when precompiling modules

[13:28] <spider-mario> is that normal?

[13:28] <tadzik> doesn't occur to me

[13:28] <spider-mario> I’m building Rakudo Star 2012.10

[13:29] *** cognominal joined
[13:29] <spider-mario> that line is “if $setting_name ne 'NULL' {”

[13:30] <spider-mario> maybe it could be changed to: if defined $setting_name and $setting_name ne 'NULL' {

[13:30] <spider-mario> could it not?

[13:30] <tadzik> I'm interested in why does it happen to be called with an uninitialized value

[13:31] *** jerome left
[13:35] *** hash_table left
[13:39] *** PacoAir joined
[13:41] *** Khisanth joined
[13:42] *** dayangkun left
[13:44] *** jerome joined
[13:49] *** _jaldhar left
[13:57] *** ChoHag joined
[13:59] <flussence> `panda install DBIish` doesn't work on my laptop - 37/40 sqlite tests fail. It worked fine on my desktop...

[14:02] *** bowtie joined
[14:03] <moritz> flussence: a detailed test output would be very helpful

[14:03] <flussence> I'll get to that just as soon as I figure out where panda puts everything now...

[14:04] <tadzik> %*CUSTOM_LIB<site> probably

[14:04] <tadzik> I discovered that today too :)

[14:07] *** stopbit joined
[14:07] *** benabik joined
[14:07] <moritz> %*CUSTOM_LIB<site>/panda/source or so

[14:10] *** azawawi left
[14:11] <[Coke]> r: say %*CUSTOM_LIB

[14:11] <p6eval> rakudo 34febe: OUTPUT«("perl" => "/home/p6eval/nom-inst/lib/parrot/4.8.0-devel/languages/perl6", "vendor" => "/home/p6eval/nom-inst/lib/parrot/4.8.0-devel/languages/perl6/vendor", "site" => "/home/p6eval/nom-inst/lib/parrot/4.8.0-devel/languages/perl6/site", "home" => "/home/p6eval/.per…

[14:12] <[Coke]> r: say keys %*CUSTOM_LIB

[14:12] <p6eval> rakudo 34febe: OUTPUT«perl vendor site home␤»

[14:12] *** tokuhiro_ joined
[14:16] *** alester joined
[14:24] *** benabik left
[14:27] <flussence> ok, it segfaults on test #4.

[14:28] *** pmurias joined
[14:28] <flussence> dmesg says "perl6[1316] general protection ip:b360251d sp:bfcebfd0 error:0 in libsqlite3.so.0.8.6[b359d000+aa000]", which doesn't tell me much...

[14:29] *** benabik joined
[14:29] *** benabik left
[14:31] <pmurias> jnthn: hi

[14:31] <moritz> flussence: doesn't tell me much either :(

[14:31] <flussence> oh wait, I have gdb on here.

[14:32] * flussence uses

[14:32] <jnthn> o/ pmurias 

[14:33] <pmurias> if I have XYZ::foo();module XYZ {our sub foo() {...}} how can sub foo access lexicals from a block which hasn't been initalised yet?

[14:34] <pmurias> can it only access static lexicals till we execute the module block?

[14:34] <[Coke]> jnthn: hio. Is there a better way than pir::isa to see if something is a sixmodelobject?

[14:34] <flussence> moritz: still doesn't tell me much, maybe someone can make sense of it: https://gist.github.com/3987365

[14:37] <jnthn> pmurias: Only the static ones make any sense

[14:37] <moritz> flussence: I can't :(

[14:38] <jnthn> pmurias: The others will have some type object or similar I guess

[14:38] <jnthn> Rakudo probably gets things righter than NQP on this front presently.

[14:40] <PerlJam> flussence: Did you try to re-install NativeCall first?

[14:41] <jnthn> flussence: What platform?

[14:41] <jnthn> Looks like a 32-bit from the trace...

[14:42] *** nyuszika7h left
[14:45] <jnthn> [Coke]: No, there's no

[14:45] * PerlJam got an email from a Texas land surveyor named "Lawrence Wall"  :)

[14:45] <jnthn> *not

[14:46] <PerlJam> sorry, "Laurence"

[14:46] *** xinming_ joined
[14:46] *** hash_table joined
[14:46] *** rjt_ joined
[14:47] *** tokuhiro_ left
[14:49] <rjt_> Hello. Is this the best place to come to ask about Rakudo feature implementation progress, and how I can help?

[14:49] <moritz> hello rjt_. Yes, it is.

[14:50] *** xinming left
[14:50] <rjt_> Ok, good. I'm very interested in shaped arrays, and compact arrays to a lesser extent. I'm also quite capable of helping out design/implementation/whatever wise.

[14:50] <moritz> \o/

[14:50] <jnthn> nice :)

[14:50] <rjt_> :-)

[14:51] <moritz> I think so far that's been on jnthn's TODO list, which is rather full :-)

[14:51] *** nyuszika7h joined
[14:51] <jnthn> Yes, task-stealing from my TODO list is always welcome ;)

[14:51] <rjt_> I can imagine. :-) So I guess my next question is, how can I help, and where do I start?

[14:52] <rjt_> (with clever use of comma operator to combine two questions, that is)

[14:52] <moritz> well, you can help by reading the spec, writing tests, designing and implementing the features

[14:52] <moritz> that's the easier part :-)

[14:53] <jnthn> Devil's in the details, as always.

[14:53] <moritz> aye

[14:53] <moritz> so, where to start? Probably by coming up with a design for how to store the stuff

[14:54] <pmurias> jnthn: what do all the LexInfo pir things in post_serialize do? setup lexicals for post_serialisation?

[14:54] <jnthn> At the moment, we use Parrot's resizable PMC array for the low-level storage. I've been expecting that we move over to using a 6model representation thingy for that instead. A bit like arnsholt++ did for CArray representation tht we use for native call.

[14:54] *** mucker joined
[14:55] <jnthn> pmurias: I'd have to go look at the code to be sure, but I think they just install the static values.

[14:55] <jnthn> "this WVal is the static lexical for Foo"

[14:55] <rjt_> Ok, I can focus on that. I'll still need to spend some time coming up to the speed on some of the higher level points, but that shouldn't take too long.

[14:56] <flussence> bit distracted for a minute there, sorry

[14:56] <flussence> PerlJam: yes, NativeCall installed fine

[14:56] <pmurias> jnthn: static lexical for Foo while executing post_serialisation?

[14:56] <moritz> rjt_: may I ask what timezone you're in?

[14:57] <pmurias> post_serialisation is just an array of stmts instead of an block, so it setups it's lexical variables that way?

[14:57] <moritz> and if so, what timezone are you in? :-)

[14:57] <jnthn> pmurias: No, it's setting up the static lexicals for all the other blocks

[14:58] <jnthn> That's what the .const thing does - gets the object representing the static lexicals for the block that's named

[14:58] <pmurias> and how does it setup static lexicals for itself?

[14:58] * jnthn doesn't get teh question

[14:59] * pmurias rechecks the ast dump

[14:59] <jnthn> post_deserialization stuff is run once, right after we deserialize objects

[14:59] <pmurias> yes

[14:59] <jnthn> It doesn't map to any user code

[14:59] <jnthn> It's just doing some setup work

[15:00] <jnthn> Before we ever run any real code.

[15:00] <pmurias> but it refers to lexicals

[15:00] <pmurias> but it doesn't have a QAST::Block to declare those

[15:00] <jnthn> It refers to the static lex info

[15:00] <jnthn> Well, we're on the runtime side of the fence here

[15:00] <jnthn> QAST::Block is the compile time thing

[15:01] <pmurias> post_deserialize contains code that puts a BVal into a package

[15:02] *** daxim left
[15:02] <pmurias> but the BVal refers to lexicals like $?PACKAGE

[15:02] <pmurias> how should I resolve them, find a different place the BVal is used and find it's parrent?

[15:02] *** cfi joined
[15:03] *** kaleem_ joined
[15:03] <cfi> hi perl6

[15:03] <pmurias> or do the LexInfo pir things set it up?

[15:04] <jnthn> You're not actually invoking the block during post_deserialize, just installing a reference to it somewhere.

[15:04] *** kaleem left
[15:05] <PerlJam> cfi: greetings!

[15:05] <jnthn> When compiling a QAST::Blcok you end up with the code itself, and also a hash mapping lexicals to default values.

[15:05] <cfi> seq 1 5|perl6 -ne '.say'; error!!Option 'e' in grouped options '-ne' needs a value, but does not have one

[15:05] <cfi> what's the value?

[15:06] <jnthn> The LexInfo is that hash

[15:06] <jnthn> to a first approximation

[15:06] *** kaleem_ left
[15:07] <PerlJam> cfi: that looks like a bug to me, but you want: seq 1 5 | perl6 -n -e '.say'

[15:08] <cfi> PerlJam: thanks! we can't use -ne just like perl 5anymore?

[15:09] <geekosaur> see "that looks like a bug"

[15:09] <jnthn> It probably should work with -ne eventually also.

[15:09] <moritz> I thought I had fixed that

[15:09] <cfi> PerlJam: thanks! that's a big bug.

[15:10] <moritz> I'd call it a small bug :-)

[15:10] <cfi> moritz: I can't do that. -ne

[15:12] <moritz> it's in nqp/src/HLL/CommandLine.pm

[15:13] <cfi> moritz: hope you can fix that.

[15:13] <moritz> oh

[15:13] <moritz> it works if you don't add a space between the -e and the '

[15:14] <jnthn> moritz: the -ne ?

[15:14] <pmurias> jnthn: to make the question clearer: in line 1110 of http://paste.ubuntu.com/1321001/ how do I resolve $?PACKAGE?

[15:14] <moritz> jnthn: yes

[15:15] *** birdwindupbird left
[15:15] *** GlitchMr joined
[15:17] <cfi> moritz: you are right.but looks like a bug.

[15:17] <cfi> thanks! all perl6

[15:17] *** mr007x joined
[15:18] <PerlJam> moritz: too much $i in that code :)

[15:18] *** thou joined
[15:18] <moritz> PerlJam: yes, my local patch renames one of them :-)

[15:19] <jnthn> pmurias: Oh, I think this dump may be misleading...

[15:19] <jnthn> pmurias: A BVal contains a reference to a QAST::Block somewhere else in the tree

[15:19] <jnthn> pmurias: It's not that the block is lexically inside of deserialize. It's elsewhere, we're just referring to it.

[15:20] <jnthn> I can understand why you're confused now :)

[15:21] <pmurias> so i should just take the static lexicals from the other place

[15:22] *** cfi left
[15:23] <jnthn> Yes. I guess you have a table somewhere of cuuid to whatever you turn a QAST::Block in to.

[15:23] <jnthn> So you'd compile it to a lookup into there

[15:23] *** colo-work joined
[15:24] <jnthn> (though maybe you have another table for the static lexicals too...)

[15:25] <jnthn> pmurias: Are you working on deserializing the binary blob over in JavaScript too, ooc?

[15:25] *** Guest83124 is now known as felher

[15:25] *** fhelmberger joined
[15:25] *** cfi joined
[15:26] <cfi> rn:my Int @a = 'a', 'b';say @a;

[15:26] <cfi> rn: my Int @a = 'a', 'b';say @a;

[15:26] <p6eval> rakudo 34febe, niecza v22-15-gc600005: OUTPUT«a b␤»

[15:27] <jnthn> cfi: That's a known not implemented thing just yet.

[15:27] <cfi> jnthn: thanks.

[15:27] <jnthn> On the todo list. Like many things :)

[15:30] *** mr007x left
[15:30] *** cfi left
[15:33] *** rjt_ left
[15:38] *** birdwindupbird joined
[15:39] <pmurias> jnthn: binary blob? I'm serialising object myself rather the using the serializer

[15:42] <pmurias> jnthn: by binary blob you mean what the serializer turns objects into?

[15:42] <jnthn> pmurias: Yes.

[15:42] <jnthn> pmurias: I don't think re-inventing that is desirable.

[15:42] <jnthn> I specified the format in hope of that ;-)

[15:43] <pmurias> I'll look into that

[15:43] <jnthn> (in docs in nqp repo)

[15:43] <jnthn> Anyway, up to you really. But my gut feeling is that re-inventing this bit will make problems later.

[15:46] *** ChoHag left
[15:50] <pmurias> currently I serialising a few types of things in an slightly adhock manner

[15:51] <pmurias> jnthn: I think if I'll serialize a similiar set of info but don't use (the exact) binary format it won't cause much trouble

[15:54] *** skids left
[15:55] <flussence> I'm out of ideas with this sqlite thing... tried downgrading sqlite to the previous version, other nativecall stuff seems to work fine... I'm just gonna ignore it and hope the other DBDs work

[15:58] <kresike> bye folks

[15:58] *** kresike left
[15:59] <hoelzro> flussence: what's the nature of the test failures?

[16:03] *** cognominal left
[16:07] <moritz> hoelzro: flussence posted a gist URL in the backlog

[16:07] *** cognominal joined
[16:08] *** ChoHag joined
[16:09] <hoelzro> ah, serves me right for half-assing things ;)

[16:10] *** rindolf left
[16:11] <jnthn> decommute, bbl

[16:13] *** sudokode joined
[16:21] *** wk left
[16:33] *** mucker left
[16:39] *** HarryS joined
[16:46] *** flightrecorder left
[16:46] *** FROGGS left
[16:46] * jnthn back

[16:47] <japhb> o/

[16:48] *** fgomez joined
[16:48] <jnthn> hi jvalphb 

[16:50] <jnthn> pmurias: It's more that I'm not sure to what degree you can get at all the things it puts into the serialization (like, REPR data) though I guess it can be recreated...

[16:51] * japhb chuckles at 'jvalphb'

[16:51] <japhb> (homemade pumpkin oat bread)++

[16:52] <jnthn> ooh :)

[16:53] <arnsholt> o/

[16:56] <japhb> Good *, arnsholt

[17:01] *** alester left
[17:06] <colomon> \o

[17:10] *** p6eval left
[17:10] *** p6eval joined
[17:10] *** ChanServ sets mode: +v p6eval

[17:12] <jnthn> tadzik: Wow...rakudo/Q is indeed rather into RAM...

[17:12] <jnthn> 5.5GB :D

[17:13] <TimToady> can you figure out whether it's the nibbler or the derivation that is leaking?

[17:14] <TimToady> I assume you did the deletes in nibbler that STD does...

[17:14] <TimToady> (though my gut tells me this has to be something major going wrong on the order of rederiving languages)

[17:14] <jnthn> TimToady: I pondered it on the train home and I think it may be never.

[17:15] <TimToady> it?

[17:15] <jnthn> TimToady: The memory use

[17:15] <jnthn> er

[17:15] <jnthn> *may be neither

[17:15] <jnthn> :)

[17:15] <TimToady> that...makes a bit more sense :)

[17:15] <jnthn> Long day... :)

[17:15] <jnthn> Cursor initialization transcodes things to fixed width.

[17:16] <jnthn> I fixed a bug where LANG was confusing orig (the original thing) and target (what it actually scans)

[17:16] <jnthn> And it was re-transcoding every time we switched langauge

[17:16] <TimToady> that might well do it

[17:17] <TimToady> esp since STD punts and keep orig in a global

[17:18] <jnthn> The size of the setting multiplied out for every single quote construct would add up quite a bit, I imagine.

[17:19] *** snearch joined
[17:22] * TimToady should try keeping orig in a high-level cursor, and providing access via a method, to see what the performance would be...

[17:25] *** Pleiades` left
[17:25] <jnthn> Yes, fixing that makes a huge difference :)

[17:27] <TimToady> whew!

[17:28] *** azawawi joined
[17:28] <azawawi> hi #perl6

[17:28] *** pmurias left
[17:32] *** Pleiades` joined
[17:34] <dalek> rakudo/Q: fb38835 | jnthn++ | src/Perl6/Grammar.pm:

[17:34] <dalek> rakudo/Q: Fix nibble to also pass on target.

[17:34] <dalek> rakudo/Q: review: https://github.com/rakudo/rakudo/commit/fb38835997

[17:34] <dalek> nqp: acae25d | jnthn++ | src/ (2 files):

[17:34] <dalek> nqp: LANG passes on target and orig.

[17:34] <dalek> nqp: 

[17:34] <dalek> nqp: This avoids re-transcoding every single time we switch language, and

[17:34] <dalek> nqp: fixes the memory use regression in rakudo/Q.

[17:34] <dalek> nqp: review: https://github.com/perl6/nqp/commit/acae25d275

[17:34] <dalek> nqp: 579f3d0 | jnthn++ | src/6model/knowhow_bootstrapper.c:

[17:34] <dalek> nqp: Give KnowHOW a type check cache.

[17:34] <dalek> nqp: review: https://github.com/perl6/nqp/commit/579f3d0990

[17:34] <jnthn> phenny: tell tadzik that memory issue in Q is gone (need latest NQP too).

[17:34] <phenny> jnthn: I'll pass that on when tadzik is around.

[17:34] <jnthn> tadzik++ # noticing :)

[17:36] <jnthn> TimToady: Actually we're not doing the :delete's yet, so I expect there's a win to be had from that too.

[17:36] <TimToady> tadzik++ # not committing suicide :)

[17:36] *** birdwindupbird left
[17:36] <TimToady> maybe the [*-1] could be .pop

[17:36] <jnthn> The thing that this is replacing wasn't either, mind...

[17:37] <jnthn> I think NQP and STD must have the match/cursor relationship a little different.

[17:37] <jnthn> Well, factored a little different.

[17:38] <jnthn> The cursor just keeps a stack of cursors to hand

[17:38] *** Chillance joined
[17:38] <jnthn> And they're arranged into the right "shape" when we make the match object

[17:38] <jnthn> Thus elimiating stuff from the match object doesn't throw away the various cursors.

[17:38] <jnthn> Maybe that's true in STD also though...

[17:39] <jnthn> hmmm

[17:39] *** SamuraiJack_ joined
[17:39] *** cognominal left
[17:40] * jnthn spots a potential improvement...

[17:43] *** hoelzro is now known as hoelzro|away

[17:49] *** skids joined
[17:50] *** gdey joined
[17:50] *** benabik joined
[17:51] *** mr007x joined
[17:55] *** benabik_ joined
[17:55] *** benabik left
[17:55] *** benabik_ is now known as benabik

[17:57] <jnthn> Hm, not so easy. :)

[18:00] <azawawi> jnthn: any update on the web-based perl6-debug api?

[18:00] *** benabik left
[18:00] *** benabik joined
[18:00] *** benabik left
[18:01] *** benabik joined
[18:03] <jnthn> azawawi: My tuit supply is a bit tight at the moment, and I'd like to use the handful I have to try and get the quote stuff I'm working on done. So, won't get to it for a little bit yet.

[18:03] <azawawi> jnthn++

[18:07] <dalek> rakudo/Q: 1065be2 | jnthn++ | src/Perl6/Grammar.pm:

[18:07] <dalek> rakudo/Q: Keep less matches around from nibbler.

[18:07] <dalek> rakudo/Q: 

[18:07] <dalek> rakudo/Q: Different (simpler ;-)) factoring than STD, but same win.

[18:07] <dalek> rakudo/Q: review: https://github.com/rakudo/rakudo/commit/1065be23f8

[18:27] *** wk joined
[18:32] *** hash_table left
[18:38] *** fhelmberger left
[18:39] *** hash_table joined
[18:41] *** SamuraiJack__ joined
[18:41] *** SamuraiJack_ left
[18:52] *** sudokode left
[18:53] <masak> lol hi! #perl6! I again come to here.

[18:53] <phenny> masak: 01:01Z <arnsholt> tell masak Friday works for me

[18:53] <phenny> masak: 10:54Z <diakopter> tell masak masakbot :) nqp: my $_ := nqp::ctx(); $_ := nqp::ctxcaller($_) while 1;

[18:53] <masak> nqp: my $_ := nqp::ctx(); $_ := nqp::ctxcaller($_) while 1;

[18:53] <p6eval> nqp: OUTPUT«(signal SEGV)»

[18:53] <masak> woo

[18:54] <masak> but I don't know enough about nqp failure modes to know if this is fine or not.

[18:54] *** zby_home_ joined
[18:54] <masak> maybe we are OK with SEGVs in NQP-land?

[19:00] *** sudokode joined
[19:00] * azawawi farabi6 new UI... incoming... :)

[19:03] *** fhelmberger joined
[19:03] <sorear> masak!

[19:04] <masak> sorear! \o/

[19:04] * masak has done three days of teaching and is now rewarding himself with... Angband

[19:04] <azawawi> http://feather.perl6.nl:3030/  # New farabi6 UI... Hopefully the server will stay up :)

[19:05] <masak> azawawi++

[19:06] <azawawi> masak: try "Syntax Check (F6)"

[19:06] <azawawi> masak: it uses std's

[19:07] <masak> cool.

[19:07] <masak> it looks really sleek.

[19:08] <azawawi> twitter bootstrap...

[19:08] <masak> oho.

[19:10] *** fhelmberger left
[19:11] <masak> hm, seems I've forgotten most keybindings from the roguelike keyset... :)

[19:12] * azawawi thinks, 'perl6-debug menu, integrate rakudo/niecza, add a REPL' and we have a winner here :) 

[19:12] <masak> azawawi: wow. yes.

[19:13] <azawawi> and we then drop it to feather3... and keep restarting it :)

[19:16] <azawawi> masak: please let know if you have any cool ideas

[19:16] * azawawi sleepy

[19:16] <masak> :)

[19:16] * azawawi sleep &

[19:17] *** azawawi left
[19:18] *** benabik left
[19:21] <jnthn> o/ masak

[19:21] <masak> jnthn! \o/

[19:21] <jnthn> masak: The segfault isn't good

[19:21] <masak> jnthn: I'm a level-2 warrior with a broad sword.

[19:21] <jnthn> masak: I think it's reproducable with pure PIR, though...

[19:22] <jnthn> Need to be sure of that.

[19:27] * masak submits it to the perl6/nqp issue queue

[19:40] *** domidumont left
[19:48] *** sudokode left
[19:52] *** rurban left
[19:55] *** sudokode joined
[19:59] *** benabik joined
[20:00] *** birdwindupbird joined
[20:03] *** SamuraiJack__ left
[20:03] <arnsholt> jnthn, masak: Since Friday seems to work for both of you, I'll see you then =)

[20:10] *** kurahaupo joined
[20:10] *** ashleydev left
[20:11] *** ashleydev joined
[20:14] <masak> arnsholt: looking forward to it!

[20:16] *** benabik left
[20:31] <jnthn> arnsholt: Nice. In Malmo?

[20:32] * jnthn guesses evening...

[20:32] <jnthn> Friday is quite flexible for me so whatever can work :)

[20:32] <masak> Friday is a half day, too :)

[20:33] <jnthn> Oh. :)

[20:33] <jnthn> Oh, I know that

[20:33] <jnthn> That's why tomorrow is le stress.

[20:34] <arnsholt> Yeah, I'll try to figure out train times and such tomorrow

[20:35] <arnsholt> Meeting up at the station (or somewhere nearby) work for you? =)

[20:35] <arnsholt> Why's Friday half day, BTW?

[20:35] <masak> arnsholt: allhelgona

[20:36] <jnthn> .oO( all hel gona break lose... )

[20:36] <jnthn> *oose

[20:36] <arnsholt> Oh, right

[20:36] <jnthn> er, *loose 

[20:36] *** hash_table left
[20:36] * masak .oO( when it comes to spelling, you loose )

[20:37] <arnsholt> *giggle*

[20:39] <sorear> what is allhelgona?

[20:39] <masak> phenny: sv en "allhelgona"?

[20:39] <phenny> masak: "All Saints" (sv to en, translate.google.com)

[20:39] <arnsholt> All hallow's eve

[20:40] <masak> I associate it with lighting a candle lantern at some loved one's grave.

[20:42] <flussence> .oO( I usually associate it with "it's cold and dark outside now when I leave the office"... )

[20:42] * PerlJam wishes it were cooler outside.

[20:43] <jnthn> Same

[20:44] *** snearch left
[20:44] <jnthn> (Then the weekend's boring rain would be pretty snow)

[20:45] *** _jaldhar joined
[20:50] *** rindolf joined
[20:51] *** Pleiades` left
[20:53] *** sudokode left
[20:56] *** dalek left
[20:58] *** dalek joined
[20:58] *** ChanServ sets mode: +v dalek

[21:01] <moritz> rain is boring, yes

[21:02] *** Pleiades` joined
[21:03] *** GlitchMr left
[21:05] * masak .oO( that's why some rocks have holes )

[21:07] *** leont joined
[21:08] * jnthn stones masak

[21:08] <moritz> masak is now stoned.

[21:09] <flussence> jnthn's lost his marbles

[21:09] <masak> jnthn: ow!

[21:09] <sjn> you guys rock!

[21:09] * masak is not giving back those pebbles to jnthn

[21:09] <Tene> man, I wish it would rain here

[21:09] * jnthn hopes we won't be charged with basalt

[21:11] <sjn> jnthn: I gravel before your pun-ability

[21:12] * jnthn is, once again, karst as a punster

[21:13] <sjn> those are true tailings, they are!

[21:14] <[Coke]> Takes real grit to put up with all these puns.

[21:14] <sjn> boulder get over the fact you're a punster, jnthn 

[21:14] <jnthn> I'm sure I shale

[21:15] <masak> your joking about this serious matter is not coal.

[21:15] <tadzik> jnthn++ #savior!

[21:15] <phenny> tadzik: 17:34Z <jnthn> tell tadzik that memory issue in Q is gone (need latest NQP too).

[21:16] * tadzik updates ALL THE THINGS

[21:16] <tadzik> I can work on Q tomorrow then :)

[21:16] <masak> maybe we should just wipe the slate and move on.

[21:16] <sjn> jnthn: ore you doubting yourself? I think you should crust in your insticts about this. :)

[21:16] * masak .oO( thought your mileage may variolite )

[21:17] <jnthn> Anyone want to chalk up some more puns? :D

[21:17] <tadzik> my head asplodes by now

[21:18] <jnthn> Just don't fall over; it's suck if your asphalt sore...

[21:18] <jnthn> *it'd

[21:21] <sjn> sand that would hurt a lot, believe me! :)

[21:22] * masak .oO( no need to rub it in )

[21:22] <sjn> masak: earth you not happy with our puns? :)

[21:24] <masak> they are dirt to me.

[21:24] <masak> except the slightly moist ones, which are mud to me.

[21:24] <tadzik> stahp

[21:24] <masak> :P

[21:24] <tadzik> I'm not capable of catching up now :)

[21:25] <sjn> masak: I'm sure hummus be happy with *some* of the puns! 

[21:25] <masak> sjn: ...no sense of hummur...

[21:25] <skids> I think we have finished mining this vein of conversation.

[21:25] <masak> we've hit rock bottom.

[21:25] <jnthn> Not my fault.

[21:26] <masak> *groan*

[21:26] <sjn> hehehe

[21:26] *** birdwindupbird left
[21:26] <skids> There had to be a nugget eventually.

[21:28] <masak> "nugget". could be a nice name for a programming language.

[21:28] <jnthn> "Tastes like chicken"

[21:29] *** fgomez left
[21:33] *** _jaldhar left
[21:35] *** _jaldhar joined
[21:38] *** kiyan joined
[21:40] *** mdhafen joined
[21:41] <mdhafen> Hello

[21:42] <tadzik> hello

[21:42] <mdhafen> I'm looking for help with perl6 syntax.  Anyway game?

[21:43] <jnthn> Most likely :)

[21:43] *** pmurias joined
[21:44] <mdhafen> ok then.  What I'm trying to do is a hash of hashes.  In perl5 I could do '%h = ( 1 => { name => 'horse', size => 12 }, 2 => {name => 'dog', size => 5 } )'  How do I do that in Perl6?

[21:45] *** _jaldhar left
[21:45] <flussence> r: my %h = ( 1 => { name => 'horse', size => 12 }, 2 => {name => 'dog', size => 5 } ); say %h.perl

[21:45] <p6eval> rakudo 34febe: OUTPUT«("1" => {"name" => "horse", "size" => 12}, "2" => {"name" => "dog", "size" => 5}).hash␤»

[21:46] <jnthn> Just like that :)

[21:46] <TimToady> don't need the parens though

[21:46] <jnthn> r: my %h = 1 => { name => 'horse', size => 12 }, 2 => {name => 'dog', size => 5 }; say %h.perl # hah, TimToady++ beat me to it :)

[21:46] <p6eval> rakudo 34febe: OUTPUT«("1" => {"name" => "horse", "size" => 12}, "2" => {"name" => "dog", "size" => 5}).hash␤»

[21:47] <mdhafen> I'll try it.

[21:47] *** fgomez joined
[21:49] <mdhafen> hmm, maybe my problem was actually something else.  figures.  I had life-span => 6x365, looking at it that is obviously wrong.

[21:54] <mdhafen> yeah, I fixed those statements and the error is gone.  Thanks for the help.

[21:56] *** bluescreen10 left
[21:58] *** mdhafen left
[22:05] *** _jaldhar joined
[22:07] *** kaare_ joined
[22:09] *** bluescreen10 joined
[22:14] *** jaldhar_ joined
[22:14] *** _jaldhar left
[22:15] *** arlinius joined
[22:15] *** sivoais left
[22:16] <masak> cool, someone we don't know is using Perl 6 :P

[22:16] <diakopter> it escaped irc?

[22:17] *** sivoais joined
[22:17] <jnthn> We already have a darkpan... :P

[22:17] <diakopter> hopefully it won't be a flash in the pan

[22:18] <masak> flashes are seldom dark.

[22:22] *** zby_home_ left
[22:23] *** bluescreen10 left
[22:25] *** sudokode joined
[22:38] *** sudokode left
[22:43] *** kiyan left
[22:45] <masak> 'night, #perl6

[22:45] *** kaare_ left
[23:01] *** stocks joined
[23:03] *** rindolf left
[23:05] *** jaldhar_ left
[23:06] *** tokuhiro_ joined
[23:11] *** jaldhar_ joined
[23:15] *** stopbit left
[23:16] *** tokuhiro_ left
[23:17] *** thou left
[23:18] <japhb> pmichaud, It was finally the Lego robotics class in which they started teaching the visual programming language.  It's ... a little odd to work in, but not (quite) as horrid as I was afraid.  I can understand why your son really wanted to just program in text, though.  :-)

[23:19] *** araujo left
[23:20] *** sudokode joined
[23:21] *** araujo joined
[23:21] *** araujo left
[23:21] *** araujo joined
[23:24] <jnthn> sleep &

[23:38] *** tokuhiro_ joined
[23:47] *** jaldhar_ left
[23:49] *** jaldhar_ joined
[23:51] *** daniel-s_ joined
[23:52] *** Chillance left
[23:52] *** Pleiades` left
[23:53] *** Pleiades` joined
[23:54] *** daniel-s left
