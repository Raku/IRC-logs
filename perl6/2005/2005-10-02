[01:01] <stevan> hey putter

[01:33] *** sleepster is now known as typester

[02:05] <stevan> autrijus: let me know when you commit Pugs.Class.* I am very interested to see the metamodel come to life in Haskell

[02:05] * stevan ponders porting the MM 2.0 tests to Pugs .... hmmm

[05:00] * geoffb rezzes in

[05:00] <geoffb> Since I seem to be off schedule from . . . well, basically everyone right now . . . 

[05:00] <geoffb> rafl: what are the plans re: packaging parrot 0.3.0 for Debian?

[05:01] <geoffb> autrijus: Will you be attempting 0.3.0 compat for 6.2.10 or 6.28.0?

[05:01] <geoffb> stevan: I skimmed through MM 2.0, and I'm curious about stylistic choices:

[05:02] <geoffb> 1) Why so many routines forced into the P5 :: namespace?

[05:02] <geoffb> 2) Something about it feels . . . not sufficiently sugary.  Is this intentional, for performance or stylistic reasons?

[05:02] <geoffb> 3) Are you planning to add more sugar in a later rev?

[05:03] <geoffb> 4) How much of the MM code exists merely to perform the bootstrapping, and how much is useful to the programmer after bootstrap?

[05:03] <geoffb> Um . . . I think that's most of what I wanted to ask for now.

[05:05] <stevan> hey geoffb 

[05:06] <geoffb> hey stevan

[05:06] <stevan> to answer your questions ...

[05:06] <stevan> 1) I was trying to avoid p5 namspaces alltogether, and the easist way to do that was to force the global :: namespace

[05:07] <stevan> 2) the MM is not where the sugar is,.. the sugar is in the language itself

[05:08] <stevan> 3) nope,.. no more sugar,.. thats autrijus's problem ;)

[05:08] <geoffb> 1a) Why avoid P5 namespaces entirely?  In other words, since in effect you chose one namespace to use everywhere, why not a different one?

[05:09] <geoffb> 2a) Sugar to make later MM .pl files cleaner, not sugar exposed to the user programmer

[05:09] <stevan> 4) only genesis.pl is bootstrapping,.. the rest is building up the meta-objects, which (I hope) will be exposed for the user to manipulate 

[05:09] <geoffb> 4a) Fair enough.

[05:10] <stevan> 1a) MM 2.0 was an attempt at a pure meta-model, not just a "lets see how this feels" prototype

[05:10] <stevan> I asked autrijus what I could expect to be available to me

[05:10] <stevan> he said "arrays, hashes, scalars and subs"

[05:11] <stevan> i did my best to build it out of just that,.. keeping as much of the "not just that" stuff in chaos.pl

[05:11] <stevan> also,... p5 namespaces/packages will not work the same was as p6 namespaces/packages

[05:12] <stevan> so I felt it best to avoid them 

[05:12] <stevan> 2a) ??

[05:12] <geoffb> So am I correct to assume that MM 2 is optimized for implementation language portability?

[05:12] <stevan> geoffb: yes

[05:13] <stevan> and theoretical correctness

[05:13] <stevan> based on  the theory I know,. which I hope is correct :)

[05:13] <geoffb> 2a.1) Um, clearly I'm not making any sense.  :-)  I guess I was trying to say that some of the files contain a lot of repeated very similar constructions; I expected to see some of that factored away.

[05:13] <geoffb> I hope that makes more sense

[05:13] <geoffb> heh

[05:13] <stevan> I borrowed heavily from what I had read about CLOS and Smalltalk (including source code)

[05:13] <geoffb> nod

[05:14] <stevan> 2a.1) you mean like refactoring some common things into helper subs and such?

[05:14] <stevan> things like attribute access, and such

[05:15] <geoffb> yeah, that's what I meant, exactly.  I was wondering if it was intentional, or historical artifact, or todo, or what

[05:15] <stevan> well, I didnt want to make any assumptions about sharing of code between various elements of the metamodel

[05:16] <geoffb> . . . because some languages might not make that easy?

[05:16] <stevan> exactly

[05:17] <geoffb> ah-hah.  OK.

[05:17] <stevan> it might force the implementation to conform in a certain way 

[05:17] <stevan> and besides,.. I am a fast typer,.. so I dont mind :)

[05:17] <geoffb> The code was too regular not to have a reason for that, but I couldn't figure out what the reason was.

[05:17] <stevan> agian,.. for "correctness" over anything else

[05:17] <stevan> and readability too 

[05:17] <geoffb> nod

[05:18] <stevan> I suppose I saw that as an implementation descision,.. if you want/can do that,.. go for it

[05:18] <geoffb> right, I think I understand now.

[05:18] <stevan> other than that,.. no good reason really ;)

[05:19] <stevan> MM 1.0 was more about "what can I do to just make it work as specced"

[05:20] <geoffb> So . . . what kind of performance are you expecting from your primitives (the above mentioned arrays, hashes, scalars, subs) . . . have you assumed roughly P5-level O() performance?

[05:20] <stevan> MM 2.0 was more about "how should this really be designed, in order to make it work as specced"

[05:20] <stevan> geoffb: performance is something I have not even thought about until very recently

[05:20] <geoffb> . . . the reason I ask is to know if a language that doesn't intrinsically have an array type with O(1) random access needs to have it emulated to get proper MM performance, for instance

[05:21] <stevan> bascially when putter started adding it to PILRUN

[05:21] <geoffb> nodnod

[05:21] <stevan> to be honest,.. I haven't given it that depth of thought

[05:21] <geoffb> nodnod.

[05:22] <stevan> I know the way Smalltalk approaches it is ..

[05:22] <stevan> if it needs to be fast,.. it is a primative method

[05:22] <geoffb> Perl 5's primitives can lull one into believing that hashes and arrays are intrinsically fast things . . . but that's only because of a lot of implementation effort on Larry's part

[05:23] <stevan> and CLOS make a seperation between functional and procedural parts of the protocol,.. functional being (mostly) side-effect free,. and so easily memoizable

[05:23] <stevan> geoffb: yes, that is true

[05:23] <geoffb> thats an interesting and useful distinction . . . (the CLOS one)

[05:23] <stevan> yes, I only recently stumbled on that chapter :) 

[05:24] <geoffb> :-)

[05:24] <stevan> hence the recent memoization of method dispatch in chaos.pl

[05:24] <stevan> it was about a 20% speed boost on my machine 

[05:24] <geoffb> nothing to sniff at.  :-)

[05:25] <stevan> geoffb: I guess I make an assumption that the implementation has a resonably fast Map (hash) and Array type

[05:25] <stevan> most do now adays

[05:25] <geoffb> fair enough.

[05:25] <stevan> its the compilers problem,. not mine ;)

[05:25] * geoffb is just poking at the design to see what goes "boing"

[05:25] <geoffb> heh

[05:26] * stevan very much appreciates that

[05:26] <stevan> I am very interested to see what happens when autrijus starts hacking it into Haskell

[05:26] <stevan> the last time it exposed some issues in the design

[05:26] <geoffb> ditto

[05:27] <geoffb> nodnod

[05:27] <geoffb> Is autrijus in flight?

[05:27] <stevan> mostly that it was to dependent on Perl 5 OO

[05:27] <stevan> literally?

[05:27] <geoffb> right, I vaguely remember that

[05:27] <stevan> I have no idea

[05:28] <stevan> oh yeah,.. also did I mention I have obsessive compuslive personality disorder?

[05:28] <geoffb> figuratively, I guess, as in "making his way home" as opposed to "doing a post ICFP hackathon" or "heading to another country not his own", or whatever

[05:28] <stevan> not like wash your hands OCD

[05:28] <stevan> just I get obsessed with things,.. like MM purity

[05:28] <geoffb> (which I have)

[05:29] <stevan> I think he is heading to europe,... although I am not sure of that

[05:29] <stevan> EURO OSCON I think

[05:29] <geoffb> I'm not like a movie character, but I definitely have (undiagnosed) OCD.  I just accepted it, and went on with my life.

[05:29] * stevan scored higher on the ADD test then most tests he "took" in high school

[05:29] <geoffb> heh

[05:30] <stevan> and I take way too much pleasure in silly useless things

[05:30] <geoffb> That, I think, is generally a good thing

[05:30] <stevan> "All art is quite useless" - Oscar Wilde

[05:32] * geoffb is trying to decide what to do next with his awake time . . . 

[05:32] <geoffb> hmmm . . . catch up on $work, read online for a while, eat some good chocolate, . . . more than one of the above maybe

[05:33] <geoffb> A little too burnt on massive Forth input to work on the interpreter right now (though from the last book, it's clear my interp needs a major overhaul)

[05:33] <stevan> $work is no fun, chocolate is good,.. 

[05:33] <stevan> hey actually,.. that reminds me...

[05:34] <geoffb> Yeah, but getting done with $work *is* fun . . . :-)

[05:34] <stevan> I wanted to talk with you about an article idea I had while mowing my lawn 

[05:34] * geoffb chuckles

[05:34] <stevan> I actually threw it out to chromatic earlier tonight,.. no response yet.,.. last I heard he was on vacation

[05:35] <stevan> the title says it all 

[05:35] <geoffb> Geeks are so good at thinking during everyday activities.

[05:35] <stevan> Perl for Programming Language Research

[05:35] <stevan> basically,. there seems to be a lot of activity lately around this area

[05:35] <geoffb> That seems like a good idea to me . . . but it would either have to be high level or *long*

[05:35] <stevan> you, nothingmuch with the Forth thing

[05:35] <stevan> nothingmuch's Blondie

[05:36] <stevan> I think it would end up being long

[05:36] <stevan> cause you just cant skim this one

[05:36] <geoffb> From what I can tell, chromatic is religious about only doing O'Reilly mail during pure working hours, and he seems to only check it like once or twice a day in big passes

[05:36] <geoffb> nodnod

[05:36] <geoffb> Or at least, you shouldn't.  :-)

[05:37] <stevan> yeah I used the oreilly.com account,.. since it was work didnt want to bother him if he was on vaca

[05:37] <geoffb> He may have gone off again, but I believe he was back as of a week ago

[05:37] <stevan> ah,.. ok

[05:37] <geoffb> Of course, he could be backlogged

[05:37] <stevan> well we will see,.. I am no rush :)

[05:38] <stevan> it has always seemed to me though that Perl was at least as good as Smalltalk, LISP, etc

[05:38] <stevan> in it's own way of course

[05:38] <geoffb> . . . especially if, like me, you write much slower than you type.  So a few thousands words take many hours.

[05:39] <stevan> I tend to blurt out a few hundred words,.. then refactor

[05:39] <stevan> a couple lawn movings later,.. and I am done :)

[05:40] <geoffb> When I was in school, I was a one pass guy.  Tanked for a while, then wrote straight from stream of consciousness.  Now I always outline first for anything over about 100 words

[05:40] <geoffb> heh

[05:40] * stevan went to art school,.. you dont really write many papers there 

[05:41] <geoffb> Oh?  What was your focus?

[05:41] <stevan> I dont think I ever wrote an actual "paper" in my life

[05:42] <stevan> Fine Art Painting,.. I did 2 years and decided to just learn to wait tables and save my parent some $$

[05:42] <geoffb> I tried to avoid them.  I found only a couple teachers in my life who could actually mark up a paper worth a damn -- most of them just looked to see if you could spell and complete a sentence.

[05:43] <stevan> ok, time for me to go to bed ....

[05:43] <stevan> good talking to you geoffb 

[05:43] <geoffb> My favorite language teacher had a policy that all papers should have approximately the same amount of red ink . . . because everyone can improve.

[05:43] <geoffb> you too!

[05:43] <geoffb> have a good sleep

[05:43] <stevan> :D

[05:44] <stevan> *sigh* school,.. I never quite understood it 

[05:44] <svnbot6> r7213 | Darren_Duncan++ | /modules/Rosetta-Incubator : Added all 15 initial core modules under lib/, though each is currently just a copy of the same template internally; Added t/00_Compile.t, which checks that all 15 would compile and are the right versions; Added usual svn props for all

[05:44] <geoffb> heh

[05:54] <dduncan> seen mugwump

[05:54] <jabbot> dduncan: mugwump was seen 33 days 1 hours 37 minutes 54 seconds ago

[05:59] <rafl> geoffb: I'm currently about to rework the parrot build system for that. Waiting for the comitter bit currently.

[05:59] <rafl> geoffb: Why?

[06:01] <geoffb> curiosity, I guess.

[06:01] <geoffb> Partly because I just built a new dev machine, and didn't feel like syncing parrot again.  :-)

[06:02] <putter> stevan: multi methods.. are external to mm2?

[06:03] <dduncan> I'm having a SVN problem, regarding a project on a *different* server than Pugs, and I'm not sure if its at my end or the other end

[06:03] <geoffb> putter, it will probably be a while, stevan just headed off to bed about 20 min ago

[06:03] <putter> ah

[06:03] <putter> thanks

[06:03] <geoffb> dduncan, is it HTTP?  You could just hit it from a browser and see if it's up.

[06:03] <geoffb> putter, sure, np

[06:04] <dduncan> everything works fine but committing

[06:04] <dduncan> on commit, it says: The OPTIONS request returned invalid XML in the response: XML parse error at line 1: no element found

[06:04] <putter> good night &

[06:04] <geoffb> night, putter 

[06:04] <geoffb> dduncan, odd, that

[06:05] <geoffb> Using svn client, or svk?

[06:05] <dduncan> It's mugwump's server, and I tried asking him, but he's not around in this last half day

[06:05] <geoffb> nodnod

[06:05] <dduncan> the client is SVN 1.1.3, the server is SVN 1.1.4

[06:05] <dduncan> same one I've been using for the last 2 months

[06:05] <geoffb> wierd.

[06:05] <geoffb> Sorry man, I've got nothin'.

[06:05] <dduncan> thanks anyway

[06:16] <meppl> guten morgen

[06:16] * brentdax waves.

[06:16] <geoffb> morning, meppl 

[06:16] <geoffb> morning, brentdax 

[06:16] <meppl> good morning geoffb

[06:18] <dduncan> geoffb, fyi, I did more testing and found that a different project on the same server would still commit, suggesting that the problem is specific to the first project, and not just the server or client

[06:19] <geoffb> interesting

[06:19] <dduncan> I left more messages for mugwump, and perhaps he can check for corruption on the server side

[06:19] <geoffb> misconfiguration or corruption in the repo, maybe.

[06:19] <dduncan> I had done a clean svn checkout between the first and second instances of the same problem

[06:19] <geoffb> nodnod

[06:20] <dduncan> anyway, I'm going to bed, goodnight

[06:20] <nothingmuch> morning

[06:24] <geoffb> gnight, dduncan 

[06:24] <geoffb> gmorning, nothingmuch 

[06:24] <nothingmuch> hi ho

[06:25] <geoffb> what's on the agenda for today, nothingmuch?  Blondie?

[06:26] <Khisanth> Brunette! :)

[06:27] <geoffb> Mmmm, Blondie . . . 

[06:27] * geoffb searches for Best of Blondie in his collection

[06:28] <nothingmuch> today - work

[06:28] <nothingmuch> there's a holiday soon

[06:28] <nothingmuch> i've been learning lots of type stuff

[06:28] <nothingmuch> (though there is still no tapl =(  )

[06:28] <nothingmuch> i am getting a semi clear picture on Milner type inference

[06:29] <nothingmuch> and I hope I can implement that WRT luqui's theory tuples

[06:29] <geoffb> nodnod

[06:29] <nothingmuch> and then i hope I can make it partial

[06:29] <geoffb> Rosh Hashana?  (forgive my spelling)

[06:29] <nothingmuch> yep

[06:29] <nothingmuch> spelling is good

[06:29] <nothingmuch> i think it is, anyway

[06:30] * nothingmuch never really knows... there's so much of them this time of year

[06:30] <geoffb> OOC, what is the work week in Israel?

[06:30] <nothingmuch> sun-thu inclusive

[06:30] * geoffb 's guess was correct then

[06:55] *** _jql is now known as jql

[07:08] <nothingmuch> given $luqui.svn { when Broken { $nothingmuch.complain } }

[07:11] <svnbot6> r7214 | brentdax++ | Cipher API for cryptographic ciphers:

[07:11] <svnbot6> r7214 | brentdax++ |   * Cipher base class, including docs

[07:11] <svnbot6> r7214 | brentdax++ |   * Cipher::Caesar for shift ciphers (including rot13)

[07:11] <svnbot6> r7214 | brentdax++ |   * Tests for Cipher::Caesar

[07:11] <svnbot6> r7214 | brentdax++ | To come: Cipher::Stream and Cipher::Block base classes, docs for Cipher::Caesar, more tests, real ciphers.

[07:36] <svnbot6> r7215 | luqui++ | Wrote intro to theory.pod.

[07:47] * nothingmuch pings luqui

[07:56] *** erg_ is now known as erg

[08:06] <nothingmuch> http://archive.cs.uu.nl/pub/RUU/CS/techreps/CS-2004/2004-037.pdf

[08:07] * nothingmuch thinks that L::AG will be used to infer blondie's types

[08:07] <nothingmuch> it's essentially a middle-order traversal of the tree

[08:07] <nothingmuch> with some simple replacement

[08:20] *** Aankh|Clone is now known as Aankhen```

[08:20] *** Aankhen``` is now known as Aankhen``

[08:41] <nothingmuch> yummy: ∀α. ∀β. α → β

[08:51] <sili> .

[08:57] <rafl> geoffb: You asked about debianisation of parrot lately. Do you want to help me with that?

[09:00] <gaal> brentdax: ping

[11:31] <svnbot6> r7216 | iblech++ | * Usual svn props.

[11:31] <svnbot6> r7216 | iblech++ | * util/svnlog2graph.pl: The scaling is adjusted automatically now.

[11:31] <svnbot6> r7216 | iblech++ | * STATUS: Minor updates WRT MM2.

[11:55] <svnbot6> r7217 | iblech++ | ext/Config-Tiny:

[11:55] <svnbot6> r7217 | iblech++ | * t/basic.t: s/ok !.../dies_ok {...}/

[11:55] <svnbot6> r7217 | iblech++ | * Config::Tiny: Removed dead code (a pugsbug was fixed).

[11:55] <svnbot6> r7217 | iblech++ | This means Config-Tiny's tests pass again.

[12:01] <masak> is it possible to force list context in perl 6?

[12:02] <nothingmuch> yes

[12:02] <nothingmuch> * does that

[12:02] <masak> thx, i'll try it

[12:02] <nothingmuch> if it doesn't work post the code, maybe we can figure it out

[12:02] * nothingmuch wishes luqui would fix his svn  already

[12:03] <nothingmuch> i have a nice, shiney, failing tests for him to fix =)

[12:07] <pasteling> "masak" at 130.238.83.176 pasted "I have a problem with context in the calculate_n() method" (73 lines, 2.3K) at http://sial.org/pbot/13409

[12:07] <masak> * didn't work :(

[12:08] <masak> help appreciated

[12:08] <nothingmuch> masak: got a line number?

[12:08] <nothingmuch> oh, calculate_n

[12:09] <masak> yes, the reverse call, more specifically

[12:09] <nothingmuch> reverse is from prelude, right?

[12:09] <masak> i don't know

[12:09] <nothingmuch> is it forcing list context on calculate_z? or is it returning a scalar?

[12:09] <nothingmuch> okay

[12:10] <nothingmuch> i don't have a working pugs ATM

[12:10] <nothingmuch> byt try this:

[12:10] <nothingmuch> @.n = $reversed_pattern.calculate_z();

[12:10] <nothingmuch> say @.n;

[12:10] <nothingmuch> and then @.n = reverse @.n;

[12:10] <masak> oki, will try that

[12:10] <masak> brb

[12:10] <nothingmuch> so that we know for sure who is the guilty party

[12:10] <nothingmuch> then we may want to fix revere, or alternatively, provide a new test case for pugs

[12:12] <masak> ah! @.n is a one-element list all the time

[12:12] <svnbot6> r7218 | iblech++ | ext/Set:

[12:12] <svnbot6> r7218 | iblech++ | * Set::Hash: s/sub infix:<...> is export/multi *infix:<...>/

[12:12] <svnbot6> r7218 | iblech++ | * t/overload.t: Removed a now-obsolete pugsbug workaround.

[12:12] <svnbot6> r7218 | iblech++ | This means Set's tests pass again, and, as some modules depend on Set, they

[12:12] <svnbot6> r7218 | iblech++ | should work again as well.

[12:13] <nothingmuch> okay, so it's time to debug calculate_z =)

[12:13] <masak> yes

[12:13] <rafl> How to declare class methods?

[12:13] <masak> hm, "return @.z" seems like the right thing to me...

[12:14] <nothingmuch> rafl: hmm.. good question

[12:15] <nothingmuch> since overriding 'method new' seems to work, i guess you go with that

[12:15] <nothingmuch> but ask stevan 

[12:15] <nothingmuch> masak: it does seem right

[12:15] <nothingmuch> try return [@.z]

[12:15] <nothingmuch> just to be sure

[12:15] <masak> oki

[12:16] <masak> still same problem

[12:16] <nothingmuch> hmm =(

[12:16] <nothingmuch> say want(); before the return

[12:17] <masak> Scalar ((mkType "Scalar"))

[12:17] <nothingmuch> okay

[12:17] <nothingmuch> now, try this:.

[12:17] <nothingmuch> @.n = reverse $reversed_pattern.calculate_z();

[12:18] <nothingmuch> return @.n;

[12:18] <rafl> nothingmuch: method methodname(Class $class: ...) {...} seems to do the job.

[12:18] <nothingmuch> and see if it prints the same

[12:18] <masak> nothingmuch: oki

[12:18] <nothingmuch> rafl: hmm... sounds right

[12:18] <nothingmuch> although $class might not necessarily be Class ;-)

[12:18] <rafl> Err, Why?

[12:18] <nothingmuch> you can override it

[12:18] <rafl> What does ::?CLASS mean, btw?

[12:19] <nothingmuch> ::?CLASS::Bar is Foo::Bar if $?CLASS eq "Foo"

[12:19] <rafl> nothingmuch: Doesn't every class somehow inherit from 'Class'?

[12:19] <nothingmuch> it's something you can put in a namespace directly

[12:19] <nothingmuch> rafl: no... but i'm guessing for sanity every class at least does Class ;-)

[12:19] <nothingmuch> i'm just being silly though, don't listen to me

[12:19] <rafl> Aye. :-)

[12:20] <nothingmuch> (btw, in which case methodname (Class $class: ...) will still work

[12:20] <masak> nothingmuch: the want() is now "List (Any)" but the end result is still a scalar "0 0 0 4 0 0 2 0 0 0 0 21"

[12:21] <nothingmuch> masak: style question - why do you say ./index_of_first_mismatch(substr(...\n<lots of whitespace>) and not ./index_of_first_mismatch(\n<only 4 more spaces> ?

[12:21] <nothingmuch> hmm

[12:21] <nothingmuch> okay

[12:21] <nothingmuch> that's a good thing

[12:21] <nothingmuch> say "@.z" in there, and make sure it's right

[12:21] <nothingmuch> oh wait

[12:21] <nothingmuch> sorry

[12:21] <nothingmuch> @.z has 21 elems, right?

[12:21] <nothingmuch> okay... say @.n and +@.n and make sure they're OK

[12:21] <masak> nothingmuch: i wanted to vertically align the arguments

[12:21] <nothingmuch> and say want in calculate_n

[12:22] <masak> but i see they have become misaligned anyway

[12:22] <nothingmuch> masak: they're still vertically aligned with a \n, but it's more space efficient IMHO

[12:22] <masak> nothingmuch: ok, i'll try that

[12:22] <nothingmuch> but nevermind, it's not really an issue

[12:22] <nothingmuch> wait

[12:22] <svnbot6> r7219 | iblech++ | Recurrence:

[12:22] <svnbot6> r7219 | iblech++ | * Set::Symbols: Again, s/sub infix:<...> is export/multi *infix:<...>/

[12:22] <svnbot6> r7219 | iblech++ | This means Recurrence's and DateTime-Set's tests pass again.

[12:22] <nothingmuch> what is @.z?

[12:23] <nothingmuch> who do 0, 0, 0, 4, 0, 0, 2, etc belong to? @.z? or something else?

[12:23] <masak> nothingmuch: an array of integers, and yes, the numbers belong to it

[12:23] <masak> the methods are calculating information about a pattern later to be used for searching

[12:24] <nothingmuch> aye

[12:24] <nothingmuch> okay, so isn't it the last element of @.z that's being screwed up?

[12:24] <nothingmuch>  @.z[$k] = ./index_of_first_mismatch(.... # bad ctx?

[12:25] <masak> "say +@.z" from within calculate_z() prints 12

[12:25] <masak> but "say +@.n" from within calculate_n() prints 0

[12:25] <nothingmuch> hmm

[12:25] <nothingmuch> odd

[12:25] <nothingmuch> try doing the reverse manually?

[12:26] <masak> hmm :(

[12:26] <nothingmuch> it's not that hard:

[12:26] <masak> what do you mean about # bad ctx, btw?

[12:26] <nothingmuch> i mean that maybe that assignment has a bad value

[12:26] <nothingmuch> hmm

[12:26] <masak> but calculate_z() works ok

[12:27] <nothingmuch> yeah, i know that now =)

[12:27] <nothingmuch> anywho

[12:27] <masak> trying reverse manually :/

[12:27] <nothingmuch> my @new; for @.n -> $x { unshift @new, $x }; say "@new"; @.n = @new; say "@.n"; return @new;

[12:28] <masak> thx

[12:28] <masak> i'll do it inline, though

[12:29] <masak> @.n = (); for $reversed_pattern.z -> $x { unshift @.n, $x }

[12:30] <masak> that worked

[12:30] <nothingmuch> okay

[12:30] <nothingmuch> lets find reverse

[12:30] <masak> yes, let's :>

[12:30] <masak> i want to have a quiet chat with reverse

[12:31] <nothingmuch> it's not in the prelude

[12:31] <nothingmuch> Prim.hs

[12:31] <masak> ok

[12:31] <masak> a few weeks ago i finally understood the subtleties of reverse in p5

[12:32] <masak> now i'm being bitten by what seems like reverse bugs in p6...

[12:32] <nothingmuch> hehe

[12:32] <masak> nothingmuch: i don't read haskell very well

[12:32] <nothingmuch> this is no subtlety... it's a bug =)

[12:32] <nothingmuch> masak: add some tests for reverse if you like

[12:32] <nothingmuch>  i'll  try to crack it

[12:32] <masak> ok, i'll try and make a minimal test case

[12:33] <nothingmuch> t/builtins/lists/reverse.t

[12:33] <coral> .g "focused LEDs"

[12:33] <nothingmuch> i'm guessing it's not imposing the right context

[12:33] <masak> ?eval my $a = (12, 34); reverse $a

[12:33] <evalbot_7219> '43 21' 

[12:33] <coral> oh, i'm sorry, ww

[12:33] <masak> is this right?

[12:34] <nothingmuch> aha

[12:34] <nothingmuch> that stringifies

[12:34] <masak> yes

[12:34] <nothingmuch> ?eval my $a = (12, 34); list reverse $a

[12:34] <evalbot_7219> ([12, 34]) 

[12:34] <nothingmuch> phoeey

[12:34] <masak> :)

[12:34] <masak> it's congruent with the annoying behaviour in my program

[12:35] <nothingmuch> ?eval sub foo { my $a = (12, 34); return my @n = reverse $a }; my @m = foo(); @m;

[12:35] <evalbot_7219> Error: No compatible subroutine found: "&my" 

[12:35] <nothingmuch> ?eval sub foo { my $a = (12, 34); my @n;  return @n = reverse $a }; my @m = foo(); @m;

[12:35] <evalbot_7219> [[12, 34]] 

[12:35] <nothingmuch> blech

[12:35] <masak> indeed

[12:35] <nothingmuch> what was actually the problem?

[12:35] <masak> that reverse stringifies

[12:35] <nothingmuch> i mean, what was the last thing we tried before it succeeded?

[12:35] <masak> hand-code reverse

[12:36] <nothingmuch> no, one step earlier

[12:36] <masak> uh... (backlogging)

[12:36] <nothingmuch> i didn't see the code, so i may have lost synch

[12:36] <masak> printing the numifications of the @.z and @.n values

[12:37] <masak> which were 12 and 0, respectively

[12:38] <svnbot6> r7220 | iblech++ | * t/builtins/math/rounders.t: skip all tests undef PIL2JS and PIL-Run (no eval).

[12:38] <svnbot6> r7220 | iblech++ | * ext/MIME-Base64/t/Base64.t: Temporarily skip all tests so smoke loops

[12:38] <svnbot6> r7220 | iblech++ |   have a chance of finishing again; it seems to be a Parrot-related issue

[12:38] <svnbot6> r7220 | iblech++ |   anyway.

[12:38] <svnbot6> r7220 | iblech++ | * Pugs.Parser: Extremely minor cosmetic fix.

[12:38] <svnbot6> r7220 | iblech++ | * Added the standard shebang line to tests.

[12:39] <masak> i think we did $reversed_pattern.calculate_z(); @.n = reverse $reversed_pattern.z; return @.n;

[12:40] <masak> ?eval my @z = (12, 34); my @n = reverse @z; say @n

[12:40] <evalbot_7220> 3412 bool::true 

[12:40] <masak> this works fine

[12:41] <nothingmuch> ?eval class { Foo { }

[12:41] <evalbot_7220> Error:  unexpected "{" expecting term postfix, operator, ":", ",", postfix conditional, postfix loop, postfix iteration, ";", "}" or end of input 

[12:41] <masak> maybe it's the access method...

[12:41] <nothingmuch> ?eval class Foo { has @.n; method foo { (1, 2, 3) }; method bar { return @.n = reverse ./foo } }

[12:41] <evalbot_7220> undef 

[12:41] <nothingmuch> ?eval class Foo { has @.n; method foo { (1, 2, 3) }; method bar { return @.n = reverse ./foo } } Foo.new.bar;

[12:41] <evalbot_7220> Error: No compatible subroutine found: "&foo" 

[12:41] <nothingmuch> ?eval class Foo { has @.n; method foo () { (1, 2, 3) }; method bar { return @.n = reverse ./foo } } Foo.new.bar;

[12:41] <evalbot_7220> Error: No compatible subroutine found: "&foo" 

[12:42] <nothingmuch> ?eval class Foo { has @.n; method foo () { (1, 2, 3) }; method bar { return @.n = reverse $?SELF.foo } } Foo.new.bar;

[12:42] <evalbot_7220> \'3 2 1' 

[12:42] <nothingmuch> ?eval class Foo { has @.n; method foo () { (1, 2, 3) }; method bar { return @.n = reverse $?SELF.foo } } my @n = Foo.new.bar; say @n; say +@n;

[12:42] <evalbot_7220> 3 2 1 1 bool::true 

[12:42] <nothingmuch> aha

[12:42] <masak> ?eval class Foo { has @.z; } my $f = Foo.new; $f.z = (12, 34); my @n = reverse $f.z; @n

[12:42] <evalbot_7220> [[12, 34]] 

[12:42] <nothingmuch> it makes one concatenated thingy

[12:42] <masak> yes

[12:42] <nothingmuch> okay, i'm adding my test case

[12:43] <masak> nothingmuch++

[12:43] <nothingmuch> windows is making my head hurt

[12:43] <masak> i know, it tends to do that

[12:44] <masak> ?eval class Foo { has @.z = (12, 34); } my $f = Foo.new; my @n = reverse $f.z; @n

[12:44] <evalbot_7220> Error:  unexpected "=" expecting trait, "handles", ";" or "}" 

[12:44] <masak> ah

[12:45] <masak> ?eval class Foo { has @.z; } my $f = Foo.new(:z(12, 34)); my @n = reverse $f.z; @n

[12:45] <evalbot_7220> [34, 12] 

[12:45] <masak> ah-ha!

[12:45] <masak> oh :) that's actually correct...

[12:45] <nothingmuch> =)

[12:45] <nothingmuch> i think the problem is the cxt passing

[12:45] <masak> ok

[12:46] <masak> i suspected that too, but i don't seem to find it and you already have, so...

[12:46] <masak> besides, my program works now

[12:46] <masak> thx

[12:48] <nothingmuch> isn't

[12:48] <nothingmuch> my @n = do {

[12:48] <nothingmuch>    (1, 2, 3)

[12:48] <nothingmuch> }

[12:48] <nothingmuch> say @n;

[12:48] <nothingmuch> supposed to work?

[12:48] <nothingmuch> i remember an S or an A saying that }\s*?\n does not require a ;

[12:49] <masak> me too, vaguely

[12:49] <masak> but add one for clarity anyway :)

[12:50] <nothingmuch> it's a syntax error in pugs

[12:51] <nothingmuch> added another test

[12:54] <svnbot6> r7221 | nothingmuch++ |  r8773@syeeda:  nothingmuch | 2005-10-02 14:45:15 +0200

[12:54] <svnbot6> r7221 | nothingmuch++ |  maskak++ 's reverse bug

[12:54] <svnbot6> r7222 | nothingmuch++ | log want()s all around masak++ 's bug, and test that they are all List (Any)

[12:55] <rafl> How to declare private class variables?

[12:55] <rafl> As well as public ones.

[12:58] <gaal> rafl: class Foo; has $:a_public_var; has $.a_public_var;

[12:59] <masak> gaal: you mean $:a_private_var;

[13:01] <rafl> gaal: Thought that's the way to define instance variables.

[13:02] <masak> rafl: ah, use my and our for class variables

[13:02] <rafl> Ah, OK.

[13:02] <masak> see S12

[13:03] <nothingmuch> no prefix needed, btw

[13:03] <gaal> oh, *class* vars, oops, right.

[13:03] <gaal> obviously what i need is to finish this coffee.

[13:03] <masak> my generates access methods, our doesn't

[13:04] <masak> ...i think

[13:04] * nothingmuch is going to ask his boss to not do windows work

[13:04] <nothingmuch> it's really frustrating

[13:05] <nothingmuch> every time I think i finally managed to simplify things so they are not a big conglomerate of special cases, it turns out there is yet another catch

[13:08] * rafl just started porting XML::SAX, if anyonce cares.

[13:10] <masak> rafl: will you use it for something afterwards?

[13:11] <rafl> masak: XML-RPC would be nice to have. Of course there are lots of other things to use an XML parser for. Jabber/XMPP for example.. :-)

[13:13] <rafl> Hm, how to call class methods? ::Foo::Bar.meth() doesn't work for me.

[13:14] <masak> rafl: xslt, too :)

[13:14] <rafl> masak: Of course!

[13:14] <masak> rafl: that seems to be the reasonable way... isn't that how new is called?

[13:15] <rafl> I have class XML::SAX-0.01; method load_parsers(Class $class: Str $?dir, Str $?file) { ... }; and do ::XML::SAX.load_parsers();

[13:22] <rafl> Hm, something about optional arguments seems to be broken.

[13:23] <rafl> XML::SAX.load_parsers("foo", "bar") works.

[13:24] * rafl wonders how File::Spec can work. It uses quite similar code.

[13:38] <rafl> Is there already a test for class methods with optional arguments? If not, where should it go? t/oo/methods/class.t ?

[13:51] * nothingmuch arrives at home

[14:00] <nothingmuch> luqui! wake up!

[14:01] <rafl> Hm. File::Spec.splitpath("/foo/bar") returns <obj:Module>. Why?

[14:01] <nothingmuch> shouldd it really be done as class methods?

[14:01] <nothingmuch> this interface issue has always bothered me about File::Spec

[14:01] <nothingmuch> i don't understand what's so bad about calling File::Spec::splitpath

[14:02] <nothingmuch> but it does hinder the user's ability to import, and makes the code yucky

[14:02] <rafl> Hm, use File::Spec <splitpath>; splitpath("foo") works.

[14:03] <rafl> Calling File::Spec::spitpath doesn't.

[14:04] <nothingmuch> how is it documented to work/

[14:06] <rafl> It's not documented how to call it without importing the subs.

[14:07] <nothingmuch> hmm

[14:07] <nothingmuch> beh. File::Spec is a horrible interface =(

[14:07] <nothingmuch> it should have a .new

[14:07] <nothingmuch> that is, File::Spec is a factory

[14:08] <nothingmuch> and it creates a File::Spec::Unix, or File::Spec::Win32 based on $?OS

[14:08] <nothingmuch> 'use File::Spec' should export functions that call these methods on a singleton

[14:08] <nothingmuch> based on $?OS

[14:08] <rafl> You're welcome to rework it. :-)

[14:09] <nothingmuch> anyway, File::Spec::Unix etc is sub yadda

[14:09] <nothingmuch> so File::Spc::splitpath *should* work

[14:09] <nothingmuch> you know what? no need for objects

[14:09] <rafl> No compatible subroutine found: "&File::Spec::splitpath"

[14:09] <nothingmuch> the current version is actually good enough

[14:10] <nothingmuch> oh wait

[14:10] <stevan> rafl: File::Spec was one of the early modules ported,.. and it is probably suffering from neglect

[14:10] <nothingmuch> that's because of the horrible hack at the top

[14:10] <stevan> have you ran the test suite? that should spotlight issues

[14:11] <nothingmuch> rafl: okay, one idea is to hack File::Spec so that it loads the right one to itself and to it's caller

[14:11] <nothingmuch> try to paste the if($?OS eq "MSWin32") part under File::Spec-0.0.1 too

[14:16] <rafl> Well, simply importing everything I need is enough for me, currently.

[14:16] <nothingmuch> the issue is that File::Spec doesn't really have any functions

[14:17] <nothingmuch> it just delegates to the module that it loads

[14:17] <nothingmuch> so that importing goes to it instead of to File::Spec

[14:17] <nothingmuch> but it doesn't contain any functions

[14:18] <rafl> Ah.

[14:19] <rafl> ?eval class Foo { my constant $:bar = 42; method bar { $:bar } } Foo.new.bar.say

[14:19] <evalbot_7222>  bool::true 

[14:19] <rafl> Shoudn't that say '42'?

[14:20] <nothingmuch> ?eval class Foo { my constant $:bar = 42; method bar { $:bar } } Foo.new.bar

[14:20] <evalbot_7222> \undef 

[14:20] <nothingmuch> that's what's confusing you... it printed the result of the say

[14:21] <nothingmuch> ?eval class Foo { my $:bar = 42; method bar { $:bar } } Foo.new.bar

[14:21] <evalbot_7222> \undef 

[14:21] <rafl> Well, \undef is false nevertheless, isn't it?

[14:21] <nothingmuch> odd

[14:21] <nothingmuch> ?eval class Foo { my $:bar = 42; method bar { $:bar = 42; $:bar } } Foo.new.bar

[14:21] <evalbot_7222> \42 

[14:21] <nothingmuch> hmm... i'm guessing the first assignment never happens

[14:21] <nothingmuch> ?eval class Foo { my $:bar = do { say "evaling"; 42 }; method bar { $:bar } } Foo.new.bar

[14:21] <evalbot_7222> evaling \undef 

[14:22] <nothingmuch> phhoey

[14:22] <nothingmuch> lets see if it's the closure that's not sharing

[14:22] <nothingmuch> ?eval class Foo { my $:bar; method bar { $:bar } method set { $:bar = 42; $?SELF }} Foo.new.set.bar

[14:22] <evalbot_7222> Error: No compatible subroutine found: "&bar" 

[14:22] <nothingmuch> ?eval class Foo { my $:bar; method bar { $:bar } method set { $:bar = 42; $?SELF }} my $x = Foo.new; $x.set; $x.bar;

[14:23] <evalbot_7222> \42 

[14:23] <nothingmuch> this seems like a bug

[14:23] <nothingmuch> i'm guessing the first $:bar container goes out of scope some how

[14:26] <rafl> Could you please write a test for it?

[14:31] <svnbot6> r7223 | stevan++ | Perl6::MetaModel 2.0 -

[14:31] <svnbot6> r7223 | stevan++ | * some work on Synopsis 12.5 

[14:31] <svnbot6> r7223 | stevan++ | * added lib6/ directory and began a *very rough* translation of the 

[14:31] <svnbot6> r7223 | stevan++ |   meta-model to Perl 6 code

[14:41] <rafl> Does someone wants to port Config::Tiny to real OO and maybe to add read_string and read_fh methods?

[14:42] <nothingmuch> you completely misunderstood Config::Tiny!

[14:42] <nothingmuch> it's purpose is to be small

[14:42] <nothingmuch> so that it loads extra fast

[14:42] <nothingmuch> it doesn't need any features

[14:42] <nothingmuch> that stuff will just add "bloat"

[14:43] <rafl> OK, could someone please write Config::Bloated? :-)

[14:44] <nothingmuch> you should ask Damian to port Config::Std

[14:44] <rafl> nothingmuch: The original Config::Tiny has a read_string method, btw.

[14:44] <rafl> Ah, iblech already did it: http://tpe.freepan.org/repos/adamk/Config-Tiny/lib/Config/Tiny.pm

[14:44] <rafl> Why isn't that version used for pugs?

[14:45] <nothingmuch> hmm

[14:45] <nothingmuch> we forgot about freepan

[14:45] <nothingmuch> ;-)

[14:45] <nothingmuch> ingy: ping

[15:10] <rafl> I want to what methods can be called on Arrays, but I can't find it in the Prelude. Where should I look for that?

[15:19] <rafl> I have an array of hashes: @a = ({Name => 'foo'}) and I want to add another hash as the value of a new hash key to the last hash in the array. How to do that? @array[-1]<Foo><key> = $val?

[15:20] <rafl> It should look like ({Name => 'foo', Foo => {key => $val}) afterwards.

[15:45] <nothingmuch> rafl: Prim.hs has some stuff

[15:45] <nothingmuch> e.g. List::elems

[15:45] <nothingmuch> i suspect this is handled very dynamically

[15:46] <nothingmuch> as for the hash assignment - that sounds right

[15:47] <rafl> nothingmuch: OK, how to do that if I wan't interpolation in the assignment? @array[-1]{Features}{$0} = {$1} seems to try to execute &Features.

[15:48] <nothingmuch> either << >> or the french variant

[15:48] <nothingmuch> or use {"Features"}

[15:48] <nothingmuch> { no longer auto bareword }

[15:49] <nothingmuch> @array[-1]<Features>{$0}

[15:49] <nothingmuch> but that's ugly ;-)

[15:49] <nothingmuch> i would use @array[-1]{'Features'}{$0} or @array[-1]<Features><<$0>>

[15:49] <nothingmuch> but with french quotes, since I like unicode

[15:49] <rafl> nothingmuch: That gives me [{('Features' => {.}), ('Name' => 'foo')}]. $0 and $1 are correctly set.

[15:50] <nothingmuch> odd

[15:50] <nothingmuch> what about @array[-1]<Features> = { $0 => $1 } ?

[15:50] <nothingmuch> ?eval my @array = { Name => 'foo' }; @array[-1]<Features><key> = "va";

[15:50] <evalbot_7223> Error: Can't modify constant item: VUndef 

[15:50] <nothingmuch> ?eval my @array = { Name => 'foo' }; @array[-1]<Features><key> = "val"; @array;

[15:50] <evalbot_7223> Error: Can't modify constant item: VUndef 

[15:51] <nothingmuch> ?eval my @array = { Name => 'foo' }; @array[-1]<Features>= { key = "val"; @array;

[15:51] <evalbot_7223> Error:  unexpected end of input expecting end of input, ";", statements or "}" 

[15:51] <nothingmuch> ?eval my @array = { Name => 'foo' }; @array[-1]<Features>= { key => "val"}; @array;

[15:51] <evalbot_7223> Error: Can't modify constant item: VUndef 

[15:51] <nothingmuch> bah

[15:51] <nothingmuch> ?eval my @array = ({ Name => 'foo' }); @array[-1]<Features> = { key => "val"}; @array;

[15:51] <evalbot_7223> Error: Can't modify constant item: VUndef 

[15:51] <nothingmuch> ?eval my @array = ({ Name => 'foo' }); @array[-1]{'Features'} = { key => "val"}; @array;

[15:51] <evalbot_7223> Error: Can't modify constant item: VUndef 

[15:51] <nothingmuch> ?eval my @array; @array[0] =  { Name => 'foo' }; @array[-1]{'Features'} = { key => "val"}; @array;

[15:51] <evalbot_7223> [{('Features' => {('key' => 'val')}), ('Name' => 'foo')}] 

[15:52] <nothingmuch> ?eval my @array; @array[0] =  { Name => 'foo' }; @array[-1]<Features><key> = "val"; @array;

[15:52] <evalbot_7223> [{('Features' => {('key' => 'val')}), ('Name' => 'foo')}] 

[15:52] <nothingmuch> ?eval my @array; @array[0] =  { Name => 'foo' }; my $x = "key"; @array[-1]<Features>{$key} = "val"; @array;

[15:52] <evalbot_7223> Error: Undeclared variable: "$key" 

[15:52] <nothingmuch> ?eval my @array; @array[0] =  { Name => 'foo' }; my $x = "key"; @array[-1]<Features>{$x} = "val"; @array;

[15:52] <evalbot_7223> [{('Features' => {('key' => 'val')}), ('Name' => 'foo')}] 

[15:52] <nothingmuch> Works For Me™

[15:53] <nothingmuch> (after many tries, admittedly ;-)

[15:54] <rafl> nothingmuch: Hm, maybe you wan't to take a look at the code: http://pastebin.com/380603 - My code is nearly identical and doesn't work though.

[15:55] <nothingmuch> line?

[15:55] <rafl> nothingmuch: 48

[15:56] <nothingmuch> can't think of anything =(

[15:57] <rafl> Running XML::SAX.load_parsers.perl.say gives me that: \Class.new(('known_parsers' => [{('Features' => {.}), ('Name' => MkMatch {matchOk = True, matchFrom = 1, matchTo = 19, matchStr = "XML::SAX::PurePerl", matchSubPos = [], matchSubNamed = {}})}, {('Features' => {.}), ('Name' => MkMatch {matchOk = True, matchFrom = 1, matchTo = 16, matchStr = "XML::SAX::Expat", matchSubPos = [], matchSubNamed = {}})}, {('Features' => {.}), ('Name' => MkMatch {matc

[15:58] * nothingmuch loves builtin Data::Dumper =)

[15:58] <rafl> Well, it could be a bit more pretty, though.

[15:59] <nothingmuch> i bet autrijus could be temped into using AGs to write a pretty printer ;-)

[16:01] <rafl> I doubt that would fix my problem. ;-)

[16:03] <nothingmuch> beh

[16:03] <nothingmuch> ?eval {.}

[16:03] <evalbot_7223> Error:  unexpected "." expecting ";", statements or "}" 

[16:03] <nothingmuch> that sucks

[16:03] <nothingmuch> it's not even .perl ;-)

[16:06] <rafl> :-(

[16:08] <nothingmuch> rafl: do you think you could reproduce that?

[16:08] <nothingmuch> copy XML::SAX into a test

[16:08] <nothingmuch> take away code till it stops working?

[16:08] <rafl> nothingmuch: I'll try.

[16:08] <rafl> nothingmuch: Where should that test go?

[16:09] <nothingmuch> pugsbugs

[16:20] <rafl> nothingmuch: Can you exaplain that error: *** Can't modify constant item: VUndef

[16:20] <rafl>     at nested_hash.t line 28, column 33-59

[16:20] <rafl>        nested_hash.t line 58, column 4-41

[16:20] <rafl>        nested_hash.t line 58, column 1-42

[16:20] <rafl> http://pastebin.com/380632

[16:21] <nothingmuch> i'm guessing it's an out of bounds assignment

[16:21] <nothingmuch> perhaps @config.push didn't work as expected

[16:21] <nothingmuch> since [-1] returned a constant undef instead of a container (since there is no elem) it gave up

[16:22] <rafl> @config.perl.say before the failing assignment gives me: [(('Name' => MkMatch {matchOk = True, matchFrom = 1, matchTo = 19, matchStr = "XML::SAX::PurePerl", matchSubPos = [], matchSubNamed = {}}))]

[16:22] <nothingmuch> anyway, i need to go to dinner

[16:22] <nothingmuch> blech

[16:22] <rafl> Bye.

[16:22] * nothingmuch doesn't know what to say

[16:25] <rafl> Oh, nein.. ich hab' nur noch zwei Blaettchen und kann bis Dienstag nicht einkaufen gehen. Duh!

[17:21] * nothingmuch summons luqui once more

[17:22] <nothingmuch> it's already noon over there, right?

[17:33] <ingy> nothingmuch: eh?

[17:33] <nothingmuch> nothing... /me was just noting that freepan needs more P.R.

[17:33] <nothingmuch> how's that patch application coming along?

[17:33] <ingy> ?

[17:34] <nothingmuch> Test::Base ;-)

[17:34] <ingy> sorry... where is the patch?

[17:34] <nothingmuch> i forgot again

[17:34] <nothingmuch> i'll regenerate

[17:34] <nothingmuch> against .43

[17:34] <ingy> mail to [email@hidden.address]
[17:34] <nothingmuch> you get to integrate, since it took you so long 

[17:34] <nothingmuch> okay

[17:35] <ingy> okay

[17:35] <ingy> *kisses*&

[17:40] <nothingmuch> sent

[18:28] *** typester is now known as typeout

[18:35] * Aankhen`` goes to sleep.

[18:35] <nothingmuch> ciao

[18:35] <Aankhen``> G'night.

[19:29] <geoffb> rafl, sure, I've always wanted to learn more about Debian packaging.  What should I read to get (more) up to speed?

[19:41] *** typeout is now known as typester

[19:57] <wolverian> geoffb: http://www.debian.org/doc/manuals/maint-guide/index.en.html

[20:03] <geoffb> wolverian, anything else, or will it all be pointed to from there?

[20:03] <wolverian> I'm not sure, I'm in the same process as you are - learning. :)

[20:03] <geoffb> (and thanks for the link)

[20:03] <geoffb> ah, OK

[20:03] <geoffb> rafl, anything else to look for besides what wolverian just linked?

[20:03] <wolverian> (looking into updating the debian irssi-snapshot from SVN)

[20:04] <geoffb> (for when he gets back :-)

[20:04] <wolverian> (which has dismally failed thus far.. :)

[20:04] <geoffb> ah

[20:04] * geoffb would like to debianize all of his code, and just host a package pool

[20:04] <geoffb> but it

[20:04] <geoffb> 's always been a low-priority task

[20:04] <geoffb> FEK

[20:33] <svnbot6> r7224 | stevan++ | Perl6::MetaModel 2.0 -

[20:33] <svnbot6> r7224 | stevan++ | * added implementation of singleton methods using AUTOLOAD and Roles

[20:33] <svnbot6> r7224 | stevan++ |   to be honest, I really dont like it, however the more I read about

[20:33] <svnbot6> r7224 | stevan++ |   singleton methods, the more I think they need to actually be integrated

[20:33] <svnbot6> r7224 | stevan++ |   into the MM itself (it would make class-methods cleaner thats for sure)

[20:38] <wolverian> geoffb: oh, you have code of your own? ;)

[20:43] <K> where is the official PAR website?

[20:45] <revdiablo> search.cpan.org?

[20:52] <obra> par.perl.org, but it got blown away recently in a disk outage

[20:52] <K> i noticed, it appeared to be a chinese blog

[20:52] <K> or something

[20:52] <obra> That's autrijus' girlfriend.

[20:53] <obra> Likely, it's the only thing still live on that box

[20:53] <nothingmuch> oh luqui where art thou

[20:54] <nothingmuch> does anybody know to diagnose svn server errors?

[20:54] <nothingmuch> luqui's svn says: Berkeley DB error: PROPFIND request failed on '/svn/misc': Could not open the requested SVN filesystem

[20:54] <nothingmuch> sounds like a runaway lock to me... either that or data corruption

[21:26] <rafl> geoffb: What link?

[21:27] <rafl> geoffb: Fine. Let's talk about co-maintainership for pugs and parrot tommorow, OK?

[21:28] <geoffb> rafl, OK

[21:28] <geoffb> rafl, I've got a lot to learn, so you may need to do some teaching . . . .

[21:29] <rafl> geoffb: That's fine with me.

[21:29] <geoffb> wolverian, what, you're surprised?  I do occasionally do *something* of value, besides take care of my kids.  :-)

[21:29] <geoffb> rafl, fair enough.

[21:29] <rafl> geoffb: What did wolverian link? "22:04 < geoffb> rafl, anything else to look for besides what wolverian just linked?"

[21:29] <geoffb> wolverian geoffb: http://www.debian.org/doc/manuals/maint-guide/index.en.html

[21:30] <geoffb> "Debian New Maintainers' Guide"

[21:30] <rafl> geoffb: Well, as I last read the new-maint-guide it was kind of outdated and not very complete.

[21:30] <geoffb> Oh, OK.

[21:30] <rafl> geoffb: But it's a good starting point nevertheles.

[21:30] <revdiablo> Heh, it's good to start out being out of date and incomplete?

[21:31] <geoffb> Other places to look as well?  I tend to dive deep for a couple days at a time on something, so it's good to have a queue of stuff to read

[21:32] <geoffb> I'll backlog . . . 

[21:32] * geoffb swaps back in "Watching Quantum Leap" task

[21:36] <rafl> geoffb: Well, the policy is always good to read. The whole new maintainers corner on debian.org/devel as well.

[21:36] <rafl> geoffb: I'll send you some further links tomorrow. I'll take a bath now. Bye!

[21:39] *** flgr__ is now known as flgr

[21:56] <geoffb> thx, rafl . . . ttyl

[22:03] <wolverian> geoffb: oh, I was just comparing you to myself. I'm far too lazy to be productive. :)

[22:05] <dudley_> rafl: ping

[22:25] <rafl> dudley_: pong

[22:26] <dudley_> what are you planning to do with parrot's build system?

[22:28] <rafl> dudley_: Well, changing it. Not sure how, yet. Currently it uses the MANIFEST to decide where files should be installed that's ought to change.

[22:29] <dudley_> I'm just curious becuase I was going to try to port parrot to VMS a long time ago, but the build system was too unixy for it to work at all

[22:30] <rafl> dudley_: Well, what's the exactly the problem with VMS? We could write a new, more portable, build system together. It's ought to change anyway, because it doesn't support shared-lib builds and parallel builds very well.

[22:30] <sili> i thought parrot was supposed to be portable?

[22:30] <dudley_> VMS doesn't have a 'make' that works

[22:32] <rafl> sili: It's thought to be, but it isn't.

[22:32] <rafl> dudley_: What does it use then?

[22:32] <dudley_> there's a makelike utility called mms

[22:33] <sili> there goes my dream of parrot on win3.11

[22:33] <rafl> Well, at least a LSB compliant version would be great.

[22:33] * rafl goes to bed now. See you tomorrow.

[22:33] <dudley_> 'night

[22:34] <dduncan> nighteynight

