[00:23] <Steve_p> heh

[00:25] <crysflame> hi

[00:26] <Steve_p> hi

[00:53] <nothingmuch> hola

[00:53] <stevan> hey nothingmuch 

[00:54] * nothingmuch is writing mail and will get around to the try tesrt

[00:54] <nothingmuch> wish me luck

[00:54] <stevan> good luck

[01:10] <nothingmuch> hola autrijus

[01:10] * nothingmuch is fidgeting with try-catch

[01:11] <autrijus_> rehi /\camels

[01:11] <autrijus_> ooh. fidgeting as in writing tests?

[01:12] <nothingmuch> yup

[01:12] <autrijus_> nice

[01:12] <nothingmuch> sync darcs?

[01:13] <nothingmuch> (automatiically?)

[01:13] <nothingmuch> ((with a pugs script?))

[01:13] <autrijus_> will do when I have a tiny bit more bandwidth

[01:13] <autrijus_> but sure, let me make do for now

[01:13] <autrijus_> a sec

[01:13] <autrijus_> I'll make it per-minute

[01:14] <autrijus_> insetad of per-commit as it is suppsoed to do

[01:16] * clkao giggles at autrijus_

[01:16] <crysflame> hi, autrijus

[01:16] <crysflame> are you awake yet?

[01:16] <autrijus_> in the closed round table session now

[01:16] <autrijus_> weird political foo going on

[01:16] <crysflame> o, guess not

[01:17] <autrijus_> nothingmuch: darcs is now automagically synched

[01:17] <autrijus_> thanks.

[01:17] <stevan> morning autrijus

[01:17] <nothingmuch> woohoo

[01:17] <autrijus_> hi stevan.

[01:17] <clkao> autrijus_: why can polictical foo go on so early?

[01:17] <stevan> we hit 1000+ tests today :)

[01:17] <autrijus_> !!!

[01:17] <autrijus_> stevan++

[01:18] <stevan> it was my goal to hit it before the weekend

[01:18] <clkao> how many of them are failing?

[01:18] <autrijus_> stevan++

[01:18] <autrijus_> gawd I feel I've been slacking

[01:18] * autrijus_ is looking forward for real bandwidth

[01:18] <stevan> no fails, only todos

[01:18] <ingy> stevan: why amI the copyright holder of Test.pm ?

[01:18] <ingy> :)

[01:18] <stevan> autrijus: we are all just catching up to you

[01:18] <autrijus_> heh. *blush*

[01:18] <stevan> ingy: cause you were the copyright holder of Kwid.pm which I copied and pasted from

[01:18] <crysflame> autrijus: good interview!

[01:19] <autrijus_> mm some .fr person writes in to ask whether he can use Pugs to script RS232 protocols

[01:19] <autrijus_> crysflame: thanks!

[01:19] <ingy> stevan: I'll fix it

[01:19] <stevan> ingy: already did

[01:19] <stevan> r432

[01:20] <stevan> ingy: I am torn on kwid

[01:20] <stevan> my brain kinda likes it, but my fingers want to type POD

[01:21] <ingy> you must have hard working fingers

[01:21] <stevan> the - for list items in particular

[01:21] <crysflame> is there a pod->kwid automunger?

[01:21] <stevan> ingy: they have a mind of their own sometimes

[01:21] <ingy> stevan: I changed that list to *

[01:21] <stevan> ingy: ok

[01:22] <ingy> you use a '-' list when you want the terms to be linkable

[01:22] <autrijus_> crysflame: Pod::Simple::Kwid should not be hard

[01:22] <ingy> this is true in POD too

[01:22] <autrijus_> crysflame: but it currently is not there. if you can help, that'd be much appreciated

[01:22] <stevan> ingy: hmmm, ok I will have to adjust the docs tomorrow

[01:22] <ingy> just committed more yaht

[01:23] <crysflame> autrijus: ETA probably +3 weeks on coding again

[01:23] <crysflame> i'm starting to be able to focus on code again, at least :)

[01:23] <crysflame> (and filed an RT ticket!)

[01:23] <crysflame> (on my own module!)

[01:23] <ingy> I am relaxing the kwid list syntax to allow multiline items

[01:23] <ingy> that means .list will be rare

[01:24] <ingy> and '-' is allowed outside .list

[01:24] <ingy> see yaht.kwid for examples

[01:24] <stevan> ingy: ok

[01:24] <stevan> is yaht == Yet Another Haskell Tutorial

[01:24] <ingy> yes

[01:25] <stevan> then i will read it while I look at your kwid :)

[01:25] <ingy> it is a good tutorial but sucks in pdf

[01:25] <ingy> stevan: you can help me write it. it is tedious

[01:25] <stevan> yeah I have it in pdf, my eyes glazed over when I read it though

[01:25] <stevan> ingy: we'll see, i am having fun with the tests right now :)

[01:26] <autrijus_> ingy: are you not working from pdftotext

[01:26] <ingy> you can't even cut and paste the examples

[01:26] <autrijus_> or pdftohtml?

[01:26] <ingy> mmmm

[01:26] <autrijus_> i.e. do you _type_ all that stuff?

[01:26] <ingy> autrijus_: it is fairly manual

[01:26] <autrijus_> stop hurting your fingers!

[01:26] <ingy> ok!

[01:27] <autrijus_> :)

[01:27] <autrijus_> ingy++

[01:27] <ingy> where is a good converter

[01:27] <autrijus_> http://www.bluem.net/downloads/pdftotext_en/

[01:27] <autrijus_> http://pdftohtml.sourceforge.net/

[01:27] * ingy feels silly now

[01:28] <stevan> not sure if this is the same YAHT, but ... http://www.hyuki.com/haskell/?cat=yaht

[01:28] <stevan> you might be able to cut and paste some of the code examples

[01:28] <metaperl> ideally the haskell source code would not be in the kwid document. it would be separate and runnable. does kwid have an include file command?

[01:28] <autrijus_> not the same yaht

[01:29] <stevan> autrijus: ah, wasn't sure, I just saw monad and thought maybe :)

[01:29] <autrijus_> [Example 1|foo.hs] maybe?

[01:29] <metaperl> [cpan://List::Util]

[01:30] <autrijus_> not sure how to make relative links

[01:30] * autrijus_ is reading larry's latest visions on p6l

[01:30] <autrijus_> about Config

[01:30] <autrijus_> $?CPU<speed>

[01:31] <stevan> ok, going to grab something to eat, later all 

[01:31] <autrijus_> $?CPU<speed><hz>

[01:31] <autrijus_> $?CPU<speed><cache><l2>

[01:32] <Odin-LAP> That's true Larry, alright.

[01:32] <autrijus_> I want some drug larry's on. I think that will improve my brain

[01:33] <ingy> autrijus++

[01:33] <ingy> autrijus_: that reply hurt my brain

[01:33] <buu> autrijus_: Relative links in kwid: [linkname|/link]

[01:33] <nothingmuch> autrijus_: try will need... 1) $! to be implemented (in t/op/die.t i see it isn't), 2) given blocks 3) class is Exception;

[01:33] <ingy> not what I expected at all

[01:33] <autrijus_> buu: uh no, relative links to files in the same dir

[01:33] <buu> autrijus_: Oh.

[01:34] <autrijus_> nothingmuch: we can fake class is Exception 

[01:34] <nothingmuch> are any of these trivial to implement? (i suspect $! maybe?)

[01:34] <autrijus_> the other two is trivial. do we have tests for them?

[01:34] <nothingmuch> for given no

[01:34] <nothingmuch> for $! yes

[01:34] <nothingmuch> todo_is in t/op/die.t

[01:34] <autrijus_> nothingmuch: ok. write one for given and try?

[01:34] <nothingmuch> surely

[01:34] <nothingmuch> how liberal should I be with eval '' for unsupported syntax?

[01:34] <ingy> autrijus_: we don't have any object support yet do we?

[01:35] <autrijus_> ingy: we have multisubs and faked invocant syntax

[01:35] <autrijus_> so any sub($foo) can be written as $foo.sub

[01:35] <autrijus_> other than that, no.

[01:35] <autrijus_> 6.2 will be all about objects.

[01:35] * ingy purrs

[01:35] <autrijus_> but I want serious bugs like doubleeval fixed in 6.0 first.

[01:35] <autrijus_> and get I/O really nicely working

[01:36] <autrijus_> ingy: it doesn't stop you from writing pseudocode or tests, though.

[01:36] <ingy> autrijus_: I want to do an IO::All

[01:36] <autrijus_> ingy: write one!

[01:36] <metaperl> autrijus, did you get my email about my junction examples?

[01:36] <ingy> I need objects!

[01:36] <autrijus_> metaperl: no, I'm still parsing Larry

[01:37] <autrijus_> ingy: write one and objects will come!

[01:37] <ingy> =)

[01:38] <autrijus_> ooh so those are blue sugar cubes

[01:38] * autrijus_ makes a note to buy some in the night market here

[01:38] <autrijus_> <ingy> Thanks for the mind expanding reply.

[01:38] <autrijus_> <lwall> You're welcome.  Next time don't eat blue sugar cubes from my frig.  :-)

[01:41] <autrijus_> rgs++ # fellow S5 affictionado

[01:42] <autrijus_> mmm ISO Linux standard

[01:44] <nothingmuch> :w

[01:44] <nothingmuch> heh, wrong window =)

[01:45] <autrijus_> :)

[01:49] <nothingmuch> do we have ?? :: ?

[01:49] <nothingmuch> err, i'll just check

[01:49] <autrijus_> we do.

[01:49] <nothingmuch> =)

[01:49] <nothingmuch> (as an lvalue?)

[01:49] <nothingmuch> (it's one of my favourite perl features)

[01:52] <autrijus_> I don't even know that you can do an lvalue :)

[01:52] <autrijus_> returns Any is rw

[01:52] <autrijus_> is that an appropriate p6 sig?

[01:52] <autrijus_> mmm asiaforge.

[01:52] <nothingmuch> (cond ? $var : $other) = "Value";

[01:53] <nothingmuch> i especially like doing it for array/hash assignments

[01:53] <nothingmuch> for "T", "E", 5 -> my $digit {

[01:53] <autrijus_> oh, seeing how metaperl and ingy are both here

[01:53] <nothingmuch> i get complaints

[01:53] <nothingmuch> is it supposed to work?

[01:53] <autrijus_> my decree in pod/kwid in the pugs tree is "whatever you like" :)

[01:54] <metaperl> hmmm

[01:54] <nothingmuch> i also tried with ()

[01:54] <autrijus_> I think ingy should've asked metaperl before checking in the .kwid, just to be polite and avoid conflicts

[01:54] <autrijus_> but for inlined chunks in .pm and t/* files, both are fine.

[01:55] <metaperl> Ok, so you are getting to the junction code samples I wrote?

[01:55] <autrijus_> I see kwid as merely an alternate POD notation

[01:55] <autrijus_> and whomever writes the doc gets to choose the notation :)

[01:55] <metaperl> pugs/examples/junction

[01:55] <autrijus_> yup

[01:55] <autrijus_> nice work!

[01:55] <autrijus_> re autochomp: I think synopses really needs to have them covered.

[01:55] <autrijus_> I lose track of autochomping syntax

[01:56] <autrijus_> meanwhile I'll do a chomp() primitive.

[01:56] <autrijus_> (sigh)

[01:56] <autrijus_> nothingmuch: lose the my()

[01:56] <nothingmuch> this is odd

[01:56] <nothingmuch> i tried that too

[01:56] <autrijus_> it's implicit.

[01:57] <nothingmuch> where can i paste 13 lines of code?

[01:57] <autrijus_> pugs -e "for (1,2,3) -> $x { say $x }"

[01:57] <autrijus_> worksforme.

[01:57] <metaperl> www.nomorepasting.com

[01:57] <autrijus_> losing () too

[01:57] <Coke_> perlbot, nopaste?

[01:57] <perlbot> Paste your code here and #perl will be able to view it: http://sial.org/pbot/perl

[01:57] <nothingmuch> t/base/for.t passes

[01:58] <Coke_> perlbot, nopaste is also http://nopaste.snit.ch:8001/

[01:58] <perlbot> I already have an entry for nopaste

[01:58] <Coke_> bah.

[01:58] <nothingmuch> http://sial.org/pbot/7876

[01:59] <nothingmuch> huh? why did it use my lan IP?

[01:59] <nothingmuch> oh well

[02:01] <nothingmuch> so?

[02:01] <autrijus_> reading

[02:01] <autrijus_> metaperl: the chomp() primitive is in.

[02:02] <metaperl> oh ok.

[02:02] <autrijus_> try using it as a bandaid for now

[02:02] <autrijus_> except it's broken.

[02:02] <autrijus_> a sec.

[02:06] <autrijus_> chomp fixed as r434.

[02:06] <metaperl> yes, I just noticed :)

[02:06] <autrijus_> chop() also implemented.

[02:06] <metaperl> ok resyncing

[02:07] <autrijus_> mmm reimbursement time

[02:07] * autrijus_ is out collecting $$$

[02:07] <autrijus_> biab

[02:07] <nothingmuch> *cough*

[02:15] <nothingmuch> is a bare block '{ some scope }' valid?

[02:15] <nothingmuch> i can't find (synopsis|exegis|apocalypse) 4 data on this

[02:19] *** autrijus__ is now known as autrijus_

[02:22] <nothingmuch> occasionally i get parse errors after eval '';

[02:22] <nothingmuch> where the next characer of a token is "unexpected"

[02:22] <nothingmuch> example:

[02:23] <nothingmuch> eval 'given 1 { when 1 { $one = 1 } }';

[02:23] <nothingmuch> todo_ok($one, "truth in given { when ... }");

[02:23] <nothingmuch> t is unexpected

[02:23] <metaperl> autrijus can you run pugs/examples/junctions/3.p6

[02:24] <metaperl> the first if-then should have said nothing'

[02:29] <metaperl> autrijus can you run pugs/examples/junctions/3.p6

[02:29] <metaperl> the first if-then should have said nothing'

[02:32] *** autrijus__ is now known as autrijus_

[02:32] <autrijus_> checking

[02:32] <autrijus_> gah the XiuShui market has been closed :-/

[02:32] <clkao> autrijus_: got some time for packaging before perl lunch?

[02:33] <autrijus_> I wonder if I should pack with svn 1.1.0 libs

[02:33] <autrijus_> because it all worksforme here

[02:33] <autrijus_> and the only change I've done was updating 1.1.3

[02:33] <obra> why was it closed?

[02:34] <autrijus_> seeing how ssleay was a problem, I suspect 1.1.3. oh and lunch is tomorrow with perlchina

[02:34] <autrijus_> obra: copyright infringement crackdown.

[02:34] <autrijus_> there is a New XiuShui mall being built with 3,000 hidden camera

[02:34] <autrijus_> so, well.

[02:34] <clkao> autrijus_: no, but the encoding thing wasn't there before

[02:34] <autrijus_> clkao: if I can only duplicate it :-/

[02:34] <metaperl> autrijus can you run pugs/examples/junctions/3.p6

[02:34] <metaperl> the first if-then should have said nothing'

[02:35] <clkao> autrijus_: try to document the build/package process and i'll try to catch matthewd?

[02:35] <obra> this is the tech market I was at?

[02:35] <autrijus_> clkao: huh, just extract the svk executable, put the svk tree in site/, and run svk.nsi from win32/

[02:36] <autrijus_> obra: possibly

[02:36] <autrijus_> the nsi file much be run with makensis

[02:36] <autrijus_> metaperl: looking

[02:37] <nothingm1ch> does anybody have any insight about for () -> $topic parse errors?

[02:37] <autrijus_> nothingm1ch: example?

[02:38] <autrijus_> nothingmuch: example?

[02:38] <nothingmuch> http://sial.org/pbot/7876

[02:38] <autrijus_> metaperl: evidently a bug. a sce

[02:38] <autrijus_> sec

[02:39] <nothingmuch> dclone($autrijus)

[02:40] <crysflame> i wish

[02:40] <metaperl> nothingmuch, that tick mark in front of $result looks odd

[02:40] <metaperl> eval '$result

[02:40] <metaperl> oh sorry

[02:40] <crysflame> as soon as we figure out how to capture a quantum state without observing it

[02:40] <metaperl> it is closed 4-5 lines later

[02:40] <crysflame> and then figure a way to observe without collapsing

[02:40] <crysflame> you can clone autrijus

[02:41] <ingy> hola

[02:42] <ingy> autrijus_: pdftotext chugged along for a while then finished cleanly. it produced no output and no warnings. Nothing.

[02:42] <autrijus_> try pdftohtml?

[02:42] <obra> start with the dvi?

[02:42] <ingy> I need text though

[02:43] <metaperl> dvi2tty

[02:43] <obra> ingy, have you talked to the author?

[02:43] <metaperl> ?

[02:43] <autrijus_> ok, let me do a .txt to me

[02:43] <autrijus_> s/to me/locally/

[02:43] <metaperl> yes, I was wondering what he felt about all this myself :)

[02:44] <autrijus_> ingy: yeah, please contact Daume; I'm sure he'd agree because YAHT is freely distributable verbatim

[02:44] <autrijus_> but you need his consent on kwid being one of verbatim formats

[02:45] <nothingmuch> *sigh*

[02:46] <autrijus_> ingy:  http://autrijus.org/tmp/tutorial.txt

[02:46] <autrijus_> enjoy

[02:46] <ingy> thanks

[02:47] <autrijus_> ingy: minor encoding foobar tho

[02:48] <autrijus_> you may need to do minor cleanup

[02:48] <autrijus_> about the ' and "

[02:48] <ingy> I'll write Daume

[02:48] <autrijus_> fixing

[02:48] <ingy> autrijus_: no worries, I plan to contrast it against the pdf

[02:48] <nothingmuch> crap

[02:48] <ingy> but fixes welcome sure

[02:48] <nothingmuch> todo_ok( unclosed

[02:50] <autrijus_> ingy: http://autrijus.org/tmp/tutorial-utf8.txt

[02:51] <metaperl> ingy, I am willing to use kwid from this point out

[02:51] <ingy> metaperl++

[02:51] <ingy> metaperl: that's really cool :)

[02:51] <autrijus_> metaperl++

[02:51] <autrijus_> http://autrijus.org/tmp/tutorial-utf8-2.txt

[02:52] <autrijus_> finally got it to work

[02:54] <nothingmuch> this doesn't parse: my $expected = (($digit eq "T") ?? 10 :: 11);

[02:54] <nothingmuch> but my $expected = ($digit eq "T") ?? 10 :: 11; does

[02:54] <Aankhen``> Ah, that's better.

[02:54] <nothingmuch> does that make sense?

[02:54] <Aankhen``> Now the quotes aren't messed up.

[02:54] <autrijus_> ??:: is adhoc.

[02:54] <autrijus_> not part of a proper term.

[02:55] <autrijus_> so the failure is expected. not sure how to treat ternary yet

[02:55] <autrijus_> pm also had no clue :-/

[02:55] <nothingmuch> should i test for a proper '?? ::' handling in an eval somewhere?

[02:55] <ingy> autrijus_: the utf8 still looks messed up

[02:55] <autrijus_> yes, please!

[02:55] <ingy> I need to run. bbl

[02:55] <autrijus_> ingy: it looks okay here

[02:55] <autrijus_> see ya

[02:56] <nothingmuch> err, how would you name such a tesT?

[02:56] <nothingmuch> or does it go in 03operators.t?

[02:56] <autrijus_> 03 sounds right.

[02:57] <nothingmuch> oh, it's already tested

[02:57] <nothingmuch> todo_is(eval '(($str3 eq $str4) ?? 1 :: 2)', 1, "?? :: in parens");

[02:57] <nothingmuch> =D

[02:57] <cls_bsd> wowo

[02:57] <metaperl> autrijus, should I make a test out of the example I showed you?

[02:57] <autrijus_> :D

[02:57] <autrijus_> it pays to grep the test

[02:57] <nothingmuch> i didn't notice it when i last grepped for '??'

[02:58] <crysflame> autrijus: your testing comment from the interview should be topic

[02:58] <autrijus_> metaperl: yes, definitely

[02:58] <autrijus_> I'll look into that now

[02:58] <autrijus_> chained comparisons suck

[02:58] * nothingmuch is dyslexic and tends to have these idiotisms

[02:58] <autrijus_> is the interview on air?

[02:58] <crysflame> i have no idea

[02:58] <autrijus_> oh it is.

[02:58] <crysflame> it was on the air here

[02:58] <autrijus_> sure

[02:58] <autrijus_> what testing comment?

[02:59] <crysflame> where you said "all features are driven by tests"

[02:59] <crysflame> um, url the interview

[02:59] <nothingmuch> should junctions make sense this way: given "foo" { when "bar" | /foo/ { $foo = 1 } } ?

[03:00] <nothingmuch> or should it be a comma?

[03:00] <nothingmuch> ah, exegis is less confusing on the subject

[03:00] <autrijus_> I have no idea :)

[03:00] <autrijus_> cool. so what is it?

[03:00] <nothingmuch> appearantly comma

[03:00] * autrijus_ admits to have not read all the exegesis

[03:00] <nothingmuch> there's a given in apocalypse 4 that has commas

[03:00] <autrijus_> or rather, read, but not really read

[03:01] <autrijus_> okay, comma is it then

[03:01] <nothingmuch> and then in the bottom it said '[ update: replace , with | ]

[03:01] <autrijus_> uh.

[03:01] * autrijus_ screams

[03:01] <nothingmuch> so i didn't know if it was 'junctions do the right thing'

[03:01] <nothingmuch> or 'in this case a junction is more elegant'

[03:01] <autrijus_> let's see

[03:01] <nothingmuch> the latter case seems more logical

[03:01] <autrijus_> "when" is using an implicit smart matcher

[03:01] <autrijus_> as in

[03:01] <autrijus_> $_ =~ "bar"

[03:01] <autrijus_> err

[03:01] <nothingmuch> aye

[03:01] <autrijus_> $_ ~~ "bar"

[03:01] <autrijus_> if you replcae the RHS with junctions

[03:01] <autrijus_> then it autothread

[03:02] <autrijus_> because when gives a boolean context

[03:02] <autrijus_> it collapses

[03:02] <crysflame> oooh

[03:02] <autrijus_> so yeah, use junctions

[03:02] <crysflame> ding!

[03:02] <autrijus_> ding indeed

[03:02] <nothingmuch> is /foo/ done before the junction is built, or after?

[03:02] <nothingmuch> because i would (given perl 5 intuitions), look at it like:

[03:02] <nothingmuch> "bar" | /foo/ => "bar" | true (since /foo/ matches)

[03:03] <nothingmuch> $_ =~ "bar" | bool::true

[03:03] <nothingmuch> that's not quite right

[03:03] <autrijus_> the /foo/ merely constructs a rule obj.

[03:03] <nothingmuch> goody

[03:03] <autrijus_> that I'm pretty sure of.

[03:04] <nothingmuch> the lazier you are the more knowlege you have when you actually need to get stuff done

[03:04] * nothingmuch likes these properties, they make for better DWIMy behavior

[03:04] <autrijus_> that is indeed the rakudo.

[03:04] <autrijus_> the way of camel

[03:04] <wolverian> woohoo, actually figured out the first yaht exercises :)

[03:04] <autrijus_> wolverian++

[03:05] <wolverian> haskell++ # I like weird.

[03:05] <nothingmuch> ok

[03:05] <nothingmuch> last issue

[03:06] <nothingmuch> i have several test cases in t/base/given.t

[03:06] <nothingmuch> i want to declare lexicals per cas

[03:06] <nothingmuch> e

[03:06] <nothingmuch> in perl 5 i would just wrap them in a bare block

[03:06] <nothingmuch> and not worry about it

[03:06] <nothingmuch> but pugs is not eating this

[03:06] <nothingmuch> is it documented somewhere?

[03:06] <nothingmuch> (perl ops and constructs are hard to grep for =(

[03:06] <autrijus_> a bare block should be fine

[03:06] <autrijus_> { my $x; ... }

[03:07] <autrijus_> is it not working?

[03:07] <nothingmuch> {\nmy ...  yields "unexpected m"

[03:07] <nothingmuch> the same code works with the curly lines commented out

[03:08] <nothingmuch> ah!

[03:08] <nothingmuch> {};

[03:08] <autrijus_> ah!

[03:08] <nothingmuch> it's more like eval {}, less like a block

[03:08] <autrijus_> the implicit semicolon

[03:08] <nothingmuch> err, make that do {};

[03:09] <wolverian> are closures in void context run automatically in perl6?

[03:09] <autrijus_> had not been added. indeed.

[03:09] <autrijus_> write a test for that?

[03:09] <autrijus_> supposedly there is an implicit semicolon

[03:09] <autrijus_> after all statement level bare blocks

[03:09] <autrijus_> yup

[03:09] <autrijus_> always so

[03:09] <autrijus_> but not void context

[03:09] <nothingmuch> will do

[03:09] <autrijus_> rather, "statement level"

[03:09] <nothingmuch> ugh!

[03:09] <nothingmuch> this is confusing

[03:09] <autrijus_> the difference being that the last {} in a sub

[03:09] <autrijus_> will still run

[03:09] <autrijus_> instead of getting context from caller

[03:09] <wolverian> hmm. why?

[03:10] <autrijus_> err, in spite of getting ocntext from caller

[03:10] <autrijus_> because it's more consistent that way.

[03:10] <autrijus_> sub foo { ... {my $x; $x + 1} } ... say foo()

[03:10] <autrijus_> should say 1

[03:10] <autrijus_> not a subref.

[03:10] <nothingmuch> oi

[03:10] <autrijus_> that agrees with my intuition.

[03:10] <wolverian> I would prefer a subref. creating closures without keywords is elegant to me. :)

[03:10] <nothingmuch> they are not running

[03:10] <autrijus_> wolverian: you can use a "return"

[03:10] <autrijus_> return { my $x }

[03:11] <autrijus_> which will indeed return a closur

[03:11] <autrijus_> e

[03:11] <autrijus_> nothingmuch: they are not?!

[03:11] <wolverian> ah, okay. will a 'sub { .. }' without return() still run immediately?

[03:11] <autrijus_> post an example?

[03:11] <nothingmuch> { say "foo" };

[03:11] <autrijus_> nope. only bares.

[03:11] <nothingmuch> does nothing

[03:11] <wolverian> ah, thanks!

[03:11] <metaperl> junction tests added to 03operator.t ... now to make some more tests for the other junction calls

[03:11] <autrijus_> oi. I broke it.

[03:11] <autrijus_> nothingmuch: fixing it right now

[03:11] <nothingmuch> wünderbar

[03:11] <autrijus_> but being diverted by policitcal talks

[03:13] <metaperl> autrijus dont talk about politics in PRC. Wait til you get back to Taiwan.

[03:13] <metaperl> we want you to make it back

[03:14] <autrijus_> ha.

[03:14] <autrijus_> no, I'm watching verbal duels between various ministers and their technical advisors

[03:14] <obra> fun!

[03:15] <autrijus_> yeah!

[03:16] <nothingmuch> sent patch for lone blocks test

[03:16] <nothingmuch> given patch is waiting for you fix (as tested by this patch)

[03:16] <nothingmuch> now i'm back to try test

[03:17] <nothingmuch> set your darcs repo email, btw

[03:18] <nothingmuch> oops, wrong relayhost, sending agian

[03:19] <autrijus_> yeah, the "sub" Syn broke bare block

[03:19] <autrijus_> it's fixed now

[03:19] <autrijus_> nothingmuch: do you prefer darcs much more than svn?

[03:19] <nothingmuch> much much more

[03:19] <nothingmuch> but i can flex

[03:19] <autrijus_> ok... I'll try not selling you to svk :)

[03:19] <nothingmuch> if it's too much trouble synching then i am willing to give it up

[03:19] <autrijus_> it's easier for me to make you a svn/svk committer

[03:19] <autrijus_> than darcs 

[03:19] <autrijus_> nono, you should use your fav tool

[03:20] <wolverian> hrm, why does ghci error when I do a 'foo = bar'? using 'let' works, but why?

[03:20] <autrijus_> it's just I need more bandwidth to make you a darcs committer

[03:20] <autrijus_> wolverian: because it's not in file level

[03:20] <nothingmuch> hmm

[03:20] <wolverian> autrijus_: oh, right.

[03:20] <nothingmuch> so what if i darcs send to a place that is not autrijus.org, but where the repos are?

[03:21] <nothingmuch> and procmail lifts it?

[03:21] <autrijus_> no idea

[03:21] <autrijus_> I'll make you a svn committer now

[03:21] <metaperl> it would've been interesting to make junctions use ? as a sigil

[03:21] <nothingmuch> there's a good example in the manual

[03:21] <autrijus_> if that's okay with you

[03:21] <nothingmuch> it is

[03:21] <metaperl> my ?address = any(qw(mr mrs sir sire));

[03:21] <autrijus_> you can commit to svn if you'd like; otherwise I can make you a darcs committer nex tweek

[03:21] <autrijus_> does it sound ok?

[03:21] <metaperl> if ($address eq ?address) { print "OK" }

[03:22] <wolverian> autrijus_: how do I define two 'foo's then? I'm missing something obvious. it seems like each line is its own lexical scope.

[03:22] <nothingmuch> well, i'll have the stuff done in 30 minutes

[03:22] <nothingmuch> i'm going to sleep soon

[03:22] <nothingmuch> it's already early

[03:22] <nothingmuch> so svn access now

[03:22] <autrijus_> wolverian: you write a test.hs and load it.

[03:22] <nothingmuch> or i can just expose a darcs repo for you to pull from

[03:22] <wolverian> autrijus_: okay. :) thanks. 

[03:22] <metaperl> i'm still confused about how one repository can be manipulated by 2 different VCSes

[03:23] <autrijus_> metaperl: that is clkao's specialty.

[03:23] <crysflame> the VCSes manipulate eachother

[03:23] <metaperl> dont they keep records differently

[03:23] <nothingmuch> http://darcs.net/manual/node4.html#SECTION00455050000000000000

[03:23] <metaperl> oh

[03:23] <crysflame> also, clkao : vcs :: autrijus : perl

[03:23] <crysflame> and i think in similar respects clkao is just as mad

[03:23] <crysflame> i remember he was writing a JS interface from PErl once

[03:23] <autrijus_> yup.

[03:24] <autrijus_> nothingmuch: invitation sent

[03:24] <nothingmuch> Reading /home/nothingmuch/.maildir/... 12170    

[03:24] <clkao> who wrote js interface from perl ?

[03:24] <nothingmuch> dum dee dum

[03:24] <clkao> that sounds ingyish

[03:24] <autrijus_> you'd need to click on the url in it and agree to a term of use http://wagner.elixus.org/~hcchien/termtouse.html

[03:24] <autrijus_> which is just sf.net's

[03:25] <autrijus_> and then you can commit to svn.openfoundry.org/pugs

[03:25] <autrijus_> nothingmuch: I'll let you commit your own test :)

[03:25] <autrijus_> but it should work.

[03:26] <crysflame> clkao: wait, that wasn't you?

[03:26] <crysflame> it was claes then

[03:26] <crysflame> my apologies

[03:29] <nothingmuch> i would like real darcs access later on though, since it's cooler. They don't conflict, do they?

[03:29] <autrijus_> nope.

[03:29] <autrijus_> or rather, if they do, we solve it at the svk side.

[03:29] <crysflame> svk is the borg

[03:29] <nothingmuch> =)

[03:31] <nothingmuch> ok, so now that i have svn

[03:31] <nothingmuch> and i'm installing svk

[03:31] <nothingmuch> where can i find a very short svk tut?

[03:31] * clkao grins

[03:32] <clkao> svk.elixus.org/?SVKTutorial has a 30sec one

[03:32] <autrijus_> svk.elixus.org has some links.

[03:32] <autrijus_> yup. the 30sec one is good enough.

[03:33] <autrijus_> "the economies have agreed to establish a study group on studying the structural changes on the future changes of AOSS"

[03:33] <autrijus_> yay for another donothing statement.

[03:33] * autrijus_ has been hearing noops all day long

[03:33] <clkao> it's just half day, how can you be hearing all day long?

[03:33] <autrijus_> because they Invade My Dreams

[03:34] <autrijus_> I wonder who chromatic did not mark that sky==arther bergman

[03:34] <autrijus_> in the interview

[03:34] <autrijus_> maybe he did not know.

[03:36] <crysflame> entirely possible

[03:36] <crysflame> for the first week of work, i kept waking up from operations in progress and thinking "man, i need to get back to sleep or i'll miss something"

[03:36] <crysflame> that sealed my belief in dreams as "Brain teaching itself new shit based on recent memories"

[03:37] <crysflame> after a solid week of sleeping and waking work, i slept and read and watched movies all weekend

[03:39] <nothingmuch> awwe! svk download broke

[03:51] <wolverian> hrm, I can't figure out yaht exercise 3.10 :(

[04:04] <scw> http://wagner.elixus.org/~autrijus/svk-overview.png

[04:05] <scw> wolverian: What's the problem? I wrote it as my first Haskell program!

[04:07] <wolverian> scw: I can't figure out if I should use 'read' somewhere, and if so, how.

[04:08] <wolverian> well, I do use it in my askForNumbers, but then in the main code I can't figure out how to get at the list returned by it.

[04:43] <autrijus_> I just did a silly thing

[04:43] <autrijus_> (submitted pugs to /.)

[04:44] <autrijus_> so, watch out for troll invasions

[04:44] <autrijus_> lunch now, bbiab &

[04:44] <autrijus_> svk download broke?

[04:44] <clkao> autrijus_: huh?

[04:44] <crysflame> oh gee

[04:45] <crysflame> autrijus: get some of us with ops, then

[04:45] <autrijus_> makes sense. will do so after lunch

[04:45] <autrijus_> clkao: <nothingmuch> awwe! svk download broke

[04:45] <autrijus_> it worksforme.

[04:46] <autrijus_> &

[05:06] <scw> wolverian: `read' has a parameter of string and return number

[05:07] <scw> wolverian: so I get a line from user by    line <- getLine

[05:07] <wolverian> yeah.

[05:07] <scw> wolverian: then use `let num = read line' to get the number :)

[05:07] <wolverian> my problem is that once I return the list of returned numbers, I can't figure out how to sum it

[05:08] <wolverian> s/returned numbers/read numbers/

[05:08] <scw> wolverian: try `foldl' or `foldr'

[05:08] <wolverian> GHC complains it wanted [a] there, when it got IO ()

[05:10] <scw> Oh! use `numbers <- askForNumbers' instead of equal mark!

[05:10] <wolverian> I do.

[05:10] <scw> And did you use `return []' in askForNumbers?

[05:10] <wolverian> yes.

[05:11] <scw> strange, can you post your code somewhere?

[05:11] <wolverian> oh, I have a bug in there. give me a second.

[05:12] <wolverian> hmm, didn't fix anything. yeah, I'll paste.

[05:12] <wolverian> perlbot: nopaste?

[05:12] <perlbot> Paste your code here and #perl will be able to view it: http://sial.org/pbot/perl

[05:14] <wolverian> scw: http://sial.org/pbot/7880

[05:15] <tmoertel> scw: watch the precedence; function application binds tighter than ++

[05:16] <wolverian> hrm.

[05:16] <wolverian> was that for me? :)

[05:16] <tmoertel> wolverian: yes (sorry, scw, I'm sleepy)

[05:17] <wolverian> I think I am too tired for this. 

[05:19] <tmoertel> wolverian: what is the type of foldl?

[05:19] <wolverian> something inanely long.

[05:19] <wolverian> :)

[05:19] <tmoertel> wolverian: ok, then, how many arguments does it take?

[05:20] <wolverian> oh for the love of god.

[05:20] <wolverian> I am going to kill myself with a teaspoon.

[05:20] <wolverian> thankyou.

[05:20] <scw> And, you cannot ++ a string and a number.

[05:20] <scw> the number should be cast to string by `show' first :)

[05:20] <wolverian> by show? I didn't see that in this tutorial.

[05:20] <wolverian> argh.

[05:21] <tmoertel> (I guess the tutorial also didn't mention the "sum" function ;-)

[05:21] <wolverian> absolutely not.

[05:22] <tmoertel> well, folds are more fun, anyway  :)

[05:22] <wolverian> hrm, so how would I cast them?

[05:22] <wolverian> I just tried map show. :)

[05:23] <tmoertel> show converts a value into its string representation

[05:23] <tmoertel> if you map it over a list of values, you will have a list of string representations

[05:24] <wolverian> right. what I need is actually first the number representations, to sum over, then convert that to string.

[05:25] <tmoertel> well, askForNumbers has type (IO [Int]), so you have a list of numbers

[05:25] <wolverian> hrm.

[05:25] <tmoertel> if you (foldl (+) 0 numbers), you will get back a single number, the sum

[05:26] <tmoertel> and if you show this number, you'll have the string representation of the sum

[05:26] <wolverian> it seems to be complaining that the foldl wants [a], but it gets IO () (that is, numbers <- askForNumbers)

[05:26] <tmoertel> can you re-paste your code?

[05:26] <wolverian> sure.

[05:27] <wolverian> http://sial.org/pbot/7881

[05:27] <tmoertel> ah, how do you think the following expression is parsed:

[05:28] <tmoertel> f x ++ y

[05:28] <wolverian> f (x ++ y) 

[05:28] <wolverian> am I wrong? :)

[05:28] <tmoertel> ah, but function application binds most highly:

[05:28] <wolverian> right. now it is fixed.

[05:28] <tmoertel> the compiler sees this: (f x) ++ y

[05:28] <wolverian> thankyou again. :)

[05:28] <tmoertel> i live to serve   :)

[05:29] <wolverian> whoot, it actually runs.

[05:29] <metaperl> did my junction tests work out?

[05:29] * metaperl updating now

[05:30] <metaperl> some of my junction tests failed... i hope they are sane tests

[05:30] <metaperl> they are in t/03operator.t if someone wants to verify them

[05:31] <metaperl> they came from an Exegesis

[05:32] <metaperl> http://www.perl.com/pub/a/2003/07/29/exegesis6.html?page=4

[05:34] <cls_bsd> which tests failed?

[05:34] <cls_bsd> 27

[05:34] <cls_bsd> ~29?

[05:36] <cls_bsd> number 27: ok( all(@newval2) > any(@oldval), "all test array against any array" );

[05:36] <cls_bsd> ok, we have newval2 (15, 7, 20)   and oldval (5, 8, 12)

[05:37] <cls_bsd> how do we expect a "ok" when 7 < 8?

[05:38] <tmoertel> wishful thinking, perhaps?  :)

[05:38] <cls_bsd> so it should be todo_ok? :p

[05:39] <tmoertel> of couse, all of (15,7,20) *are* greater than 5

[05:39] <metaperl> 4 of them starting at line 78

[05:39] <cls_bsd> but they want "any"?

[05:39] <cls_bsd> maybe I was wrong ?_?

[05:39] <cls_bsd> besides, the following test is really weird,

[05:39] <tmoertel> what are the semantics of any?

[05:39] <cls_bsd> ok( all(@newval1) > all(@oldval), "all test array against all array" );

[05:39] <metaperl> there is a link to the article

[05:39] <cls_bsd> yes, checking the article

[05:40] <metaperl> cls_bsd: there is nothing weird about that test per the article

[05:40] <metaperl> http://www.perl.com/pub/a/2003/07/29/exegesis6.html?page=4

[05:40] <tmoertel> my read of the article is that if any of 5,8,or 12 is > than all of 15,7,20, the result is true

[05:41] <cls_bsd> hmm

[05:41] <tmoertel> s/>/</

[05:41] <cls_bsd> just following :p

[05:41] <cls_bsd> so the result is wrong

[05:42] <tmoertel> i would agree

[05:42] <cls_bsd> semantic kills

[05:42] <metaperl> which test? paste it

[05:42] <cls_bsd> metaperl: in 03operator.t, line 79

[05:43] <cls_bsd> or 78

[05:43] <cls_bsd> ?_?

[05:43] <cls_bsd> I've confused

[05:43] <metaperl> ok( any(@newval4) > any(@oldval), "any test array against any array" );

[05:43] <metaperl> this one?

[05:43] <cls_bsd> hmm, next next one

[05:43] <cls_bsd> or next next next one :p

[05:43] <metaperl> can you paste it

[05:43] <cls_bsd> not_ok in my test 

[05:43] <metaperl> to cut out ambiguity

[05:45] <cls_bsd>  http://nopaste.snit.ch:8001/1987

[05:45] <metaperl> read the article:

[05:45] <metaperl> if all(@newvals) > any(@oldvals) {

[05:45] <metaperl>     print "These are all bigger than something already seen."

[05:45] <metaperl> }

[05:45] <cls_bsd> yap, so the result is wrong

[05:45] <metaperl> if any one of oldval is such that all of newval2 is greater then it is true

[05:46] <metaperl> the result?

[05:46] <cls_bsd> not ok 27

[05:46] <cls_bsd> #     Failed test (03operator.t at line 78, column 1)

[05:46] <cls_bsd> not ok 28

[05:46] <cls_bsd> #     Failed test (03operator.t at line 79, column 1)

[05:46] <cls_bsd> is there any my misunderstanding?

[05:46] <metaperl> no, there is a value of oldval, namely 5, for which ALL of newval2 is greater

[05:46] <metaperl> I think the tests are right. I just wanted to verify

[05:46] <cls_bsd> hmm

[05:46] <autrijus_> ugh. my /. submission was rejected immediately.

[05:47] <autrijus_> so, no trolls.

[05:47] <clkao> ha

[05:47] <metaperl> autrijus, I want to make sure my logic is clear in the test I made in 03operator.t

[05:47] <metaperl> they are based on this article:

[05:47] <metaperl> http://www.perl.com/pub/a/2003/07/29/exegesis6.html?page=4

[05:47] <metaperl> they are currently failing

[05:48] <autrijus_> "and" always autothread first

[05:48] <autrijus_> I mean "all"

[05:48] <autrijus_> ok( all(@newval2) > any(@oldval), "all test array against any array" );

[05:48] <autrijus_> this becomes

[05:48] <autrijus_> all( 15 > any(5, 8, 12), 7 > any(5, 8, 12), 20 > any(5, 8, 12) )

[05:49] <autrijus_> which is all(true, true, true)

[05:49] <autrijus_> which should be true.

[05:49] <autrijus_> so it's pugs's bug

[05:49] <autrijus_> if it evaluates to false.

[05:49] <autrijus_> afaics.

[05:49] <buu> autrijus_: Did you implement the zip operator?

[05:50] <autrijus_> buu: I did, but it lost with the hard disk

[05:50] <autrijus_> so no

[05:50] <metaperl> autrijus, have you ever been tempted to give up Perl and find a job as a full-time Haskeller?

[05:50] <autrijus_> buu: write a test?

[05:50] <metaperl> do you think Perl6 is worth your time?

[05:50] <metaperl> obviously so, I suppose

[05:50] <buu> autrijus_: As soon as I figure out how to actually create that character.

[05:51] <metaperl> sorry to speak heresy amongst the converted

[05:51] <autrijus_> metaperl: err, writing no code at all (with CPAN) beats writing very little code in haskell 

[05:51] <autrijus_> buu: nono, you use infix Y

[05:51] <autrijus_> the yen can be written as Y

[05:51] <buu> Oh it can? El33t.

[05:51] <autrijus_> metaperl: no need to apologize :)

[05:51] <metaperl> ok, well I just wanted to make sure my test cases were sane before going to sleep

[05:51] <autrijus_> they look sane. great work!

[05:51] <autrijus_> rehi theory.

[05:52] <metaperl> ok thanks!

[05:52] <metaperl> thanks for input cls_bsd

[05:52] <metaperl> tmoert

[05:52] <autrijus_> and no it's not heresy; it's one of the FAQs :)

[05:52] <autrijus_> but I didn't list it in PA01 because it's a bit personal :)

[05:52] <justatheory> waddup, autrijus

[05:53] <autrijus_> nothing much, about to take a nap

[05:53] <justatheory> Sounds like a plan.

[05:55] <autrijus_> :)

[05:55] <autrijus_> zzz &

[06:22] * tmoertel hit the close key too many times ...

[06:26] <tmoertel> (any(1,2),any(3,4)) evaluates to (1|2|3|4)

[06:27] <tmoertel> should it be ((1|2),(3|4)) ?

[06:31] <buu> tmoertel: Er, no

[06:31] <buu> Or at least, I didn't think so at first, but now I'm considering.

[06:31] <tmoertel> can you give me a ptr to the ref on that?

[06:31] <buu> no =[

[06:31] <tmoertel> what, then, should the following eval to?

[06:32] <buu> I was thinking: ((1,2),(3,4))

[06:32] <buu> Which is exactly the same as (1,2,3,4)

[06:32] <tmoertel> $a := any(1,2); $b := any(3,4); ($a,$b)

[06:32] <buu> What's the difference between 1|2,3|4 and 1|2|3|4 ?

[06:33] <tmoertel> inside of parens, the first is a 2-elem array and the second a 1-elem array

[06:33] <buu> Hrm

[06:34] <buu> Yeah, it does sound like it should be 1|2,3|4

[06:34] <tmoertel> and, in fact, if you feed pugs "(1|2,3|4)" you ge the expected result

[06:35] <buu> heh

[06:35] <buu> Optimization I guess

[06:35] <buu> Or something.

[06:35] <tmoertel> I call it "error injection"  ;-)

[08:58] <buu> Crap

[08:58] <buu> I need ingy =[

[08:58] <autrijus_> tmoertel: damian ruled that

[08:58] <autrijus_> any(), all() and none()

[08:59] <autrijus_> will join the same junctions

[08:59] <autrijus_> inside them

[08:59] <buu> autrijus_: Do you happen to know if: .baz\n should be a format named 'baz' or just a text section?

[08:59] <autrijus_> it's a format named baz.

[08:59] <buu> k

[08:59] <buu> So you can't have a format named .list ?

[09:00] <buu> Weird.

[09:00] <buu> That's.. really weird

[09:00] <buu> What the hell is wrong with: .format html

[09:00] <autrijus_> nono you can have a .list

[09:00] <autrijus_> it's just the handler is predefined.

[09:00] <autrijus_> that's all

[09:00] <buu> autrijus_: No, .list is a list section, not a list format.

[09:00] <buu> You see the difference.

[09:00] <autrijus_> then .baz is a baz section?

[09:01] * autrijus_ not sure seeing the difference

[09:06] <autrijus> <- need blood sugar

[09:06] <autrijus> so, dinner now, be back in a while &

[09:07] <buu> ..

[09:07] <buu> bte

[09:07] <buu> bye

[11:59] <jacleo> help

[13:16] <clkao> mmm

[13:16] <clkao> $ ab -clkao- [~/work/pugs] svk up -s

[13:16] <clkao> RA layer request failed: PROPFIND request failed on '/pugs': PROPFIND of '/pugs': Could not read response body: Connection reset by peer (http://svn.openfoundry.org)

[13:16] <clkao> hate! openfoundry outage again!

[13:16] <clkao> it's like every weekend

[13:17] <scw> clkao: openfoundry is helping spreading svk :p

[13:44] <stevan> ahhh

[13:44] <stevan> openfoundry is down

[13:45] <stevan> anyone know of an alternative SVN repo?

[13:48] <clkao> svn.perl.org/perl6 seems to have a mirror

[13:48] <stevan> clkao: thanks i will give it a try

[13:50] <stevan> hmmm clkao it seems to be behind a few versions

[13:51] <stevan> oh well, i suppose I will have to do regular work today :P

[13:51] <stevan> my boss with appreciate that Im sure

[13:52] <clkao> now you know the importance of svk

[13:52] <stevan> clkao: I have been meaning to give it a try actually, maybe this is a sign

[14:24] * Coke_ ~~ @ autrijus

[14:24] <autrijus_> greetings!

[14:24] <autrijus_> svn.perl.org/perl6/pugs/trunk/ is the temporary trunk for the next 24 or so hours

[14:25] <autrijus_> stevan: I've fixed the double evaluation bug.

[14:25] <nnunley> Fun.

[14:25] <stevan> cool,.. now I don't have to do real work today

[14:25] <autrijus_> shift.t and inc.t now all passed.

[14:25] <stevan> autrijus: NICE

[14:25] <jdv79> weird, i thought that _was_ the trunk

[14:25] <autrijus_> :D

[14:25] <autrijus_> gugod_: http://0rz.net/990cd 

[14:26] <autrijus_> stevan: 'fraid you'd need to send patches to p6c for now

[14:26] <autrijus_> as svn.perl.org committership is beyond my control

[14:26] <stevan> autrijus: I think I actually have access

[14:26] <stevan> I got it for work I did on the DBI tests

[14:27] <clkao> hi autrijus

[14:27] <autrijus_> oh!

[14:27] <autrijus_> wow. then commit at will

[14:27] <autrijus_> hi clkao

[14:28] <stevan> autrijus: if I can I will :)

[14:28] <autrijus_> stevan++

[14:28] <autrijus_> I hope I'm not hurting your Real Work too much :)

[14:29] <stevan> autrijus: nah, I was already a week or so ahead of schedule, so its all good

[14:29] <autrijus_> ooh. you r0x0rz

[14:29] <autrijus_> metaperl_: I figured out your junction bug

[14:30] <autrijus_> any(2,5) < all(3,4)

[14:30] <autrijus_> was parsed as

[14:30] <clkao> autrijus_: so, matthewd is able to reproduce insufficient Encode on win32 cp680(?) system

[14:30] <autrijus_> any((2,5) < all(3,4))

[14:30] <autrijus_> which is highly weird

[14:30] <autrijus_> but at least that explains all the failures

[14:30] <autrijus_> if you use (2|5) < (3&4)

[14:30] <autrijus_> then it works as expected

[14:30] <autrijus_> I'm looking into it.

[14:30] <autrijus_> clkao: ah, I got it.

[14:30] <autrijus_> clkao: wish I had that information sooner

[14:31] * autrijus_ fixes

[14:32] <clkao> what was that about?

[14:32] <clkao> autrijus_: actually it was cp850 looking at the log

[14:34] <nnunley> gmail-- # Doesn't correctly remember which messages were downloaded via pop.

[14:41] <cls_bsd> well, openfoundry will disappear tomorrow...

[14:43] <autrijus_> well it already did...

[14:43] <cls_bsd> iis--

[14:44] <cls_bsd> our cluster machines' gone,too

[14:44] <autrijus_> sigh.

[14:45] * nnunley downloads svk on gentoo... Successfully for a change. :)

[14:54] * clkao thought nnunley was already using it

[14:59] <stevan> autrijus: apparently i dont have commit access to the pugs dir

[14:59] <stevan> will svk solve this problem (bascially allow me to commit locally and then sync later)

[15:00] <clkao> that's the whole point about svk

[15:00] <stevan> clkao: cool

[15:00] <stevan> where is the best place to get svk then?

[15:00] <stevan> cpan?

[15:00] <clkao> cpan is fine. or check SVKInstall on the wiki to see if there's already package on your platform

[15:01] <stevan> wiki?

[15:01] <Coke_> seems like you have to be doing a LOT of work with no net connection for svk to be worth it.

[15:02] <clkao> stevan: svk.elixus.org

[15:02] <clkao> well yes, but just once, and you got plenty of chances to be left offline or to want to be offline )

[15:02] <clkao> :)

[15:06] <nnunley> clkao:  Gentoo was failing to merge it in for the longest time.

[15:06] <stevan> clkao: installing the svk fink package right now

[15:06] <clkao> ah, osx, you might want the standalone dmg. should be easier.

[15:07] <stevan> clkao: I already have svn installed through fink,..

[15:07] <stevan> I didnt want any conflicts between the standalone and my svn install

[15:09] <tmoertel> autrijus: do you have a pointer on damian's rationale for ((any(xs),any(ys)) -> any(xs,ys) ?

[15:09] <tmoertel> s/pointer on/pointer to/

[15:10] <nnunley> Oye.  Failed.

[15:14] <clkao> autrijus_: when are you heading back

[15:14] <clkao> nnunley: how did it fail?

[15:14] <nnunley> clkao:  Meta data versioning in the sign tests.

[15:15] <nnunley> clkao:  Invalid filesystem revision number: No such revision 5

[15:15] <clkao> huh? 72sign.t ?

[15:15] <autrijus_> clkao: 6th morning

[15:15] <nnunley> clkao: Yeap.  72sign.t

[15:15] <clkao> nnunley: can you tell which test in it exactly?

[15:16] <nnunley> clkao:  3-7

[15:16] <clkao> quite strange. that's new to me.

[15:17] <nnunley> clkao:  Shall I mail you the failures?

[15:17] <clkao> ya, prove -lv output would be great.

[15:17] <clkao> and the version of perl, svn, svk

[15:17] <autrijus_> tmoertel: see the junctive thread on p6l

[15:17] <autrijus_> tmoertel: I think it's been damian's goal that

[15:17] <autrijus_> any(1,2,2,2) ===> any(1,2)

[15:17] <autrijus_> any(1,2,any(2,2)) ===> any(1,2)

[15:17] <autrijus_> i.e. it will avoid trivial duplicates

[15:18] <tmoertel> but how can I create an array of two scalars, both junctions?

[15:18] <nnunley> clkao:  This is svk-0.29  --  I have limited control how the packaging system runs the tests. :(

[15:18] <nnunley> That is, the gentoo system.  They don't have svk-0.30 pushed up yet as an ebuild.

[15:18] <clkao> uhm. can it be your gpg hates other software?

[15:19] <clkao> but i think that's rather harmless failure, just force install it

[15:19] <clkao> :p

[15:19] <tmoertel> autrijus_: i asked about ((any(1,2)),(any(3,4))) not (any(1,2,any(3,4)))

[15:19] <autrijus_> any(any(1,2),any(3,4)) ?

[15:19] <autrijus_> how is it semantically different from any(1,2,3,4)?

[15:20] <autrijus_> from all autothreading point of view

[15:20] <tmoertel> autrijus_: there is no outer any: (    any(1,2)  ,    any(3,4)      )

[15:21] <autrijus_> oh.

[15:21] <autrijus_> that is a parsing error

[15:21] <autrijus_> I've just said that

[15:21] <tmoertel> the one you just fixed?

[15:21] <autrijus_> pugs misparsed it

[15:21] <autrijus_> no, that's separate

[15:21] <autrijus_> I'm looking into that now

[15:21] <tmoertel> sorry, I was out for the last six hours   

[15:21] <PerlJam> good morning pugsateers

[15:21] <autrijus_> greetings perljam

[15:21] <autrijus_> tmoertel: so, yeah, basically all builtin listops are misparsed

[15:22] <autrijus_> "any(1), all(2)"  ===> parsed as

[15:22] <autrijus_> "any((1), all(2))"

[15:22] <PerlJam> um ... is there something wrong with openfoundry?  I just tried to "svn up" and got svn: PROPFIND request failed on '/'

[15:22] <autrijus_> PerlJam: svn.perl.org is the new trunk

[15:22] <autrijus_> for the next 36hrs

[15:22] <PerlJam> why is that?

[15:22] <autrijus_> openfoundry is down for mantainence.

[15:22] <clkao> because svn.openfoundry = hate

[15:23] <PerlJam> gotcha

[15:23] <autrijus_> which is a fancy word to mean they need to upgrade their hosting facility

[15:23] <autrijus_> for more cooling systems, etc.

[15:24] <PerlJam> (svn switch)++

[15:25] <clkao> i'd be thrilled if svn switch --relocate would work, as i guess the revision number would be slightly different

[15:25] <autrijus_> different repoids

[15:25] <autrijus_> so won't fly

[15:25] <PerlJam> well bumemr

[15:25] <PerlJam> er, bummer even

[15:25] <autrijus_> so just checkout again

[15:26] <autrijus_> good. we made tpj news

[15:34] <stevan> autrijus: svn.perl.org does not seem to be the latest code

[15:42] <autrijus_> stevan: really.

[15:42] <autrijus_> what's missing from it?

[15:43] <stevan> autrijus: the t/op/quoting.t file

[15:43] <stevan> and the test count is 689 and not 1003 

[15:43] <autrijus_> it's as recent as my latest sync

[15:43] <stevan> hmmm

[15:44] <autrijus_> I've added quoting.t

[15:44] <autrijus_> committing now

[15:44] <autrijus_> I recalculated the count for two files

[15:45] <stevan> autrijus: recalculated?

[15:49] <PerlJam> stevan: He looked to see how many tests were actually run in those files and changed the plan accordingly  (I think)

[15:49] <autrijus_> the plan() was affected by reevaluation for two tests

[15:49] <autrijus_> yup.

[15:49] <stevan> ahh, which tests?

[15:52] <autrijus_> uh. I forgot :)

[15:52] <autrijus_> 01basic I think

[15:52] <autrijus_> and something in op/

[15:52] <stevan> ok,.. no big deal

[15:52] <autrijus_> yup

[15:52] <autrijus_> so have youdiffed your tree with the latest svn.perl.org one?

[15:52] <stevan> autrijus: I am gonna just send patches to p6c, is svn diff okay for that?

[15:52] <autrijus_> sure thing

[15:52] <stevan> autrijus: I am doing that right now

[15:53] * PerlJam suddenly sees the beauty in svk and carry-your-repository-with-you style SCMs

[15:55] <autrijus_> PerlJam: eureka!

[15:57] <autrijus_> weird parsing foo... fixed

[15:58] <autrijus_> but may cause more breackage

[15:58] * autrijus_ crosses fingers and types "make test"

[15:58] <autrijus_> 1/17 unexpectedly succeeded

[15:58] <autrijus_> 1/12 unexpectedly succeeded

[15:58] <autrijus_> and so one and so forth

[15:58] <autrijus_> 7/31 unexpectedly succeeded

[15:58] <autrijus_> I think I'm doing something right

[15:58] <autrijus_> ;)

[15:58] <mister-foo> expect the worst, and all your surprises will be pleasant?

[15:59] <autrijus_> yeah but I apparently broke push()'s signature

[15:59] <autrijus_> fixing

[15:59] <autrijus_>  (15 subtests UNEXPECTEDLY SUCCEEDED)

[15:59] <mister-foo> btw, which repository (darcs, svn, ...) is up-to-date?

[16:00] <autrijus_> at this second, svn.perl.org is the one up to date

[16:00] <autrijus_> I'm fixing darcs to pull from it

[16:01] <autrijus_> openfoundry is normally the most up to date one

[16:01] <autrijus_> but is currently down.

[16:01] <stevan> autrijus: I will unTODO those tests once you commit

[16:01] <stevan> I already did that for push.t and auto.t

[16:01] <autrijus_> ok, let me apply your patch first

[16:01] <mister-foo> hence the question...  I suppose both VC systems can co-exist in the same directory.  Weird, but cool.

[16:02] <autrijus_> yeah, it can.

[16:02] <autrijus_> because svk doesn't use .svn or _darcs or other weird foo.

[16:02] <autrijus_> so it can coexist with pretty much anything :)

[16:03] <mister-foo> Speaking as a staunch CVS man, all these new-fangled contraptions are strange and shiny to me.

[16:06] <stevan> autrijus: patch #1 in the mail

[16:08] <autrijus_> got it

[16:09] <mister-foo> autrijus: Sean O here, btw.  'sup?

[16:09] *** mister-foo is now known as seano

[16:10] <autrijus_> hi Sean O!

[16:10] <autrijus_> heya. as you can see we're busily working to clean up todo_* tests as usual :)

[16:12] <autrijus_> I've been thinking about how to tackle BEGIN

[16:12] <seano> The number of tests is truly impressive.

[16:12] <autrijus_> did P6C tabkle that?

[16:12] <autrijus_> for that matter, I don't think we have tests for BEGIN :)

[16:13] <seano> I looked at doing "my ($x, $y) = ..." last night, but got lost in a twisty maze of monads and Vals, and fell asleep.

[16:13] <autrijus_> ooh.

[16:13] <autrijus_> right, you already knew haskell.

[16:13] <seano> No.  Since it was static, it didn't handle inserting perl6 code into the compiler.

[16:13] <autrijus_> the code that handles my $a = foo

[16:14] <autrijus_> in on Eval.hs

[16:14] <autrijus_> second case of reduceStatements

[16:14] <seano> The most "introspective" feature it got was splicing in new grammar rules according to sub signatures (see the bottom of P6C/Parser.pm).

[16:14] <autrijus_>     | Syn "sym" (Sym sym@(Symbol _ name (Syn "mval" [_, vexp])):other) <- exp = do

[16:14] <autrijus_> that will evaluate RHS, insert it back to the "sym" slot

[16:15] <autrijus_> then redispatch to a normal "sym" case (5th)

[16:15] <autrijus_>     | Syn "sym" syms <- exp = do

[16:15] <autrijus_> which will then inject it into the lexical space.

[16:15] <autrijus_> now I don't quite know what

[16:15] <autrijus_> my ($x, $y) = @a;

[16:15] <autrijus_> will work

[16:15] <autrijus_> I mean, in perl5 of course they get @a[0] and @a[1]

[16:16] <autrijus_> but do we need slurpy star in p6?

[16:16] <seano> Rigth, iirc. that needs to be either "my ($x, $y) = *@a" or $y stays undef.

[16:16] <autrijus_> will that make $x into \@a and $y into undef?

[16:16] <seano> Think so.

[16:16] <autrijus_> my (*$x, *$y) = @a;

[16:16] <autrijus_> is this anywhere near legal?

[16:16] <autrijus_> my (*$x, *$y) := @a;

[16:16] <seano> I need to get hasktags working here.  Man, I hate using grep/isearch supported languages.

[16:16] <autrijus_> sure. hasktags workedforme

[16:16] <seano> What does a splat on a scalar do?

[16:17] <nothingmuch> Auto-merging (0, 5) /pugs to /mirror/pugs (base /mirror/pugs:3).

[16:17] <nothingmuch> ===> Auto-merging (0, 4) /pugs to /mirror/pugs (base /mirror/pugs:3).

[16:17] <nothingmuch> Merging back to mirror source http://svn.openfoundry.org/pugs.

[16:17] <nothingmuch> RA layer request failed: OPTIONS request failed on '/pugs': The OPTIONS request returned invalid XML in the response: XML parse error at line 8: Opening and ending tag mismatch: p line 0 and body

[16:17] <nothingmuch> . (/pugs) at /usr/local/svk-0.30/perl/5.8.1/SVK/Command.pm line 155

[16:17] <autrijus_> hi, nothingmuch. openfoundry is down for 36 hours.

[16:17] <nothingmuch> sorry, i fell asleep yesterday

[16:17] <nothingmuch> ah

[16:17] <nothingmuch> ok,

[16:17] <autrijus_> please channel your patches to p6c.

[16:17] <autrijus_> svk push -P -

[16:17] <autrijus_> will produce such a patch.

[16:19] <nothingmuch> sent

[16:19] <autrijus_> danke.

[16:22] <stevan> morning nothingmuch 

[16:22] <nothingmuch> morning

[16:23] <autrijus_> stevan: I've hand 3-way merged the three repos

[16:23] <nothingmuch> how do i svk push -P only one patch?

[16:23] <stevan> autrijus: ouch

[16:23] <autrijus_> stevan: uh, it took me <1min

[16:23] <autrijus_> thanks to svk

[16:23] <nothingmuch> more specifically

[16:23] <autrijus_> so nothing really ouch :)

[16:23] <autrijus_> nothingmuch: you prolly want "svk desc"

[16:23] <stevan> autrijus: BTW the diff did not show anything odd

[16:24] <stevan> svk++ then

[16:24] * seano curses darwinports for deciding to install Perl behind my back to install SVK.

[16:24] <nothingmuch> how do match patches?

[16:24] <nnunley> autrijus_: Well...  Not entirely by hand then, eh?

[16:24] <nothingmuch> seano - the binary package is prolly good enough

[16:24] <stevan> seano: I used the binary pkg and it was fine

[16:24] <autrijus_> nnunley: sure, you can't tweak bits by hand anyway

[16:25] <wilx`> Hmm, I am getting parse error on http://rt.openfoundry.org/Foundry/Project/Source/index.html/pugs/rss/

[16:25] <stevan> autrijus: I am seeing something really weird

[16:25] <stevan> pugs -e 'sub foo returns List { return [1, 2, 3] }; my $x = foo(); say ref($x)'

[16:25] <nnunley> autrijus_: Well, it would take a bit of concentration...  Years of practice to tweak the right ones...

[16:25] <autrijus_> wilx`: it's down

[16:25] <stevan> prints 'Int'

[16:25] <wilx`> Oh.

[16:26] <seano> stevan, autrijus: thanks.

[16:27] <stevan> autrijus: even weirder

[16:27] <stevan> pugs -e 'sub foo returns List { return [ 'foo', 'bar' ] }; my $x = foo(); say ref($x); say $x'

[16:27] <stevan> sends PUGS into a CPU eating spiral of death

[16:27] <autrijus_> !!.

[16:27] <autrijus_> just a sec.

[16:28] <nothingmuch> ack! I have svk log talk about r6

[16:28] <nothingmuch> and then i'm trying svk push -f (r6|6) -P -

[16:28] <nothingmuch> it says 6 is not a depot path

[16:28] <autrijus_> the junction bug has gotten into you?

[16:29] <nothingmuch> no, that was human oriented junctioning

[16:29] <nothingmuch> or rather, regexing

[16:29] <autrijus_> makes sense

[16:29] <nothingmuch> without having to learn svk from scratch, how do i just do this?

[16:29] <nothingmuch> i want to get back to what i was doing

[16:30] <autrijus_> darcs revert ?

[16:30] <autrijus_> err

[16:30] <autrijus_> svk revert?

[16:30] <nothingmuch> no, in the sense "i want to finish saving this patch to a file so i can continue my work"

[16:30] <stevan> autrijus: in the interactive PUGS environ

[16:30] <stevan> sub foo returns List { return [ 'foo', 'bar' ] }; my $x = foo(); say(ref($x)); say($x)

[16:30] <stevan> does not spiral into death :)

[16:31] <autrijus_> oh.

[16:31] <stevan> however, it does print 'Str' (for the ref()) then 'bar' 

[16:31] <stevan> and not 'List' like it should

[16:31] <autrijus_> nothingmuch: use svk log to find the local rev you wnat to push

[16:31] <autrijus_> nothingmuch: then "svk desc 123 > foo.patch"

[16:31] <nothingmuch> i found out, it's 6

[16:31] <nothingmuch> ah

[16:32] <nothingmuch> so what's svk push -P ? desc all the patches since last real push?

[16:32] <autrijus_> essentially that.

[16:32] <nothingmuch> ok

[16:32] <nothingmuch> ok, patch #2, given tests, sent

[16:32] <nothingmuch> now back to try-catch

[16:33] <autrijus_> woot. I'm still sorting thru my mismerges

[16:34] <nothingmuch> note that t/base/given.t depends on t/base/anon_blocks.t passing (todo tests too)

[16:34] <nothingmuch> or wait, it doesn't

[16:34] <nothingmuch> crap, scrap that patch

[16:35] <nothingmuch> uncrap, i typed the wrong email address, so it bounced anyway =D

[16:35] <autrijus_> hehe

[16:35] * stevan hands nothingmuch some coffee

[16:36] * nothingmuch just had coffee + baklawe

[16:36] <nothingmuch> mui bien

[16:36] * stevan hands nothingmuch his medication :P

[16:37] <nothingmuch> where is that svk/darcs comparison table?

[16:38] <autrijus_> there is many ones

[16:38] <nothingmuch> how can i zap a patch?

[16:38] <autrijus_> in svk?

[16:38] <nothingmuch> uhuh

[16:39] <nothingmuch> or maybe that comparison was for tentative features?

[16:39] <autrijus_> in darcs? unpull?

[16:39] <nothingmuch> more like unrecord

[16:39] <nothingmuch> unpull = unrecord + revert, sort of

[16:39] <nothingmuch> i want the changes to be made active again

[16:39] <autrijus_> sure

[16:39] <autrijus_> unrecord in svk is impossible.

[16:39] <autrijus_> which is why I learned haskell

[16:39] <nothingmuch> oi

[16:39] <autrijus_> in the first place.

[16:39] <autrijus_> you can apply the reverse patch easily

[16:40] <nothingmuch> i'll zap the svk tree, and apply my sent patch to a fresh repo and just go on from there

[16:40] <autrijus_> via svk merge

[16:40] <autrijus_> but that's not the same thing.

[16:40] <autrijus_> that sounds sane.

[16:40] <autrijus_> I should've been working on SVK post-1.0 task now

[16:40] <autrijus_> if not for this pugs thing :)

[16:40] <nothingmuch> oh wait, will i be able to check out now?

[16:41] <autrijus_> sure, from http://svn.perl.org/perl6/pugs/trunk

[16:42] <nothingmuch> so why did i checkout from another repo yday?

[16:42] <autrijus_> because openfoundry was the main repo

[16:42] <autrijus_> and it was down for maintanence

[16:42] <autrijus_> for the next 36 hours.

[16:42] <autrijus_> which sucks, but we deal

[16:47] <nothingmuch> autrijus: the implicit colon stuff is not working

[16:48] <nothingmuch> anon blocks now execute

[16:48] <nothingmuch> so two parts of the nest are passing

[16:48] <nothingmuch> s/nest/test/

[16:49] <autrijus_> wait wait

[16:49] <autrijus_> we're talking about your p6c patch?

[16:50] <autrijus_> stevan: I've finished 3way merge; some tests fail due to misprototyping of unshift() and push() vs the new parsing; I'll deal

[16:50] <autrijus_> r553 svn.perl.org

[16:50] <autrijus_> stevan: but you may commence unTODOing

[16:51] <stevan> autrijus: will do

[16:51] <nothingmuch> yes

[16:51] <nothingmuch> this test pases: eval '{ $one = 1 }'

[16:51] <stevan> autrijus: I am also writing a t/base/subs.t test to document that weirdness I pasted in

[16:51] <autrijus_> +plan 9; # from outer space

[16:51] <autrijus_> roflmao!

[16:51] <autrijus_> okie.

[16:52] <autrijus_> nothingmuch++

[16:52] <nothingmuch> and this test half passes: eval '{ $one = 1 } { $two = 2 }'

[16:52] <nothingmuch> todo_is($two) is ok

[16:52] <nothingmuch> but not $one

[16:52] <autrijus_> implicit semicolon is Not There.

[16:52] <autrijus_> but the trailing final semicolon is optional anyway.

[16:52] <autrijus_> that explains the result you see.

[16:52] <nothingmuch> ah

[16:52] <nothingmuch> i thought you fixed

[16:53] <nothingmuch> ok, so you fixed not executing, but not implicit semi

[16:53] * nothingmuch will wait

[16:53] <autrijus_> I fixed "lone block"

[16:53] <autrijus_> yup.

[16:53] <autrijus_> committing your test

[16:53] <nothingmuch> wait

[16:53] <nothingmuch> untodo tests 7 and 9

[16:53] <nothingmuch> they pass now

[16:54] <stevan> nothingmuch: I can do that,.. I am already un-TODO-ing

[16:54] <autrijus_> I did.

[16:54] <nothingmuch> and rename test 8 to "blah blah implicit semi"

[16:54] <autrijus_> r555 is untodoing.

[16:54] <nothingmuch> bueno

[16:54] <autrijus_> I'll leave renaming to stevan.

[16:54] <autrijus_> I'm fising the push/unshift bug now.

[16:54] <autrijus_> s/fis/fix/

[16:54] <autrijus_> and then maybe implicit semicolon.

[16:54] <nothingmuch> wonderful

[16:54] <autrijus_> TPJ says we are moving at "breakneck speed" :)

[16:55] <crysflame> woo

[16:55] <crysflame> the whiplash from the commit mails nearly broke my neck, man

[16:55] <nothingmuch> how do i do the opposite of svk push -P - ?

[16:55] <autrijus_> svk patch apply - 

[16:55] <autrijus_> ?

[16:56] <nothingmuch> i guess

[16:56] <nothingmuch> grazie

[16:56] <autrijus_> no prob

[16:57] <clkao> do people like svk?

[16:57] * nothingmuch prefers darcs so far

[16:58] <nothingmuch> oh crap

[16:58] <nothingmuch> (cd ../pugs-svk.broke/; svk desc 5) | svk patch apply -

[16:58] <autrijus_> nothingmuch: for svk help, #svk is the place and clkao is the author

[16:58] <clkao> svk patch doesnt like your usual unidiff, thanks.

[16:58] <nothingmuch> locks

[16:58] <autrijus_> (and for darcs help, #darcs is the place and... well droundy isn't around here)

[16:58] <jdv79> autrijus, maybe its because you are moving that fast :)

[16:59] <clkao> but now i'm off to bed

[16:59] <nothingmuch> i don't need darcs help anymore

[16:59] <nothingmuch> =)

[16:59] <autrijus_> hah.

[16:59] <autrijus_> yeah, darcs is much more intuitive.

[17:00] <clkao> (for people like autrijus that is not using cvs 10 years ago)

[17:00] <autrijus_> exactly.

[17:00] <autrijus_> for bugward ui compatibility (and for non-fragility, and speed), svk is wonderful.

[17:01] * nothingmuch started with cvs and found it unintuitive

[17:02] <PerlJam> nothingmuch: It's a little hard to find anything you have no experience with "intuitive"  ;-)

[17:02] <nothingmuch> i had experience with cvs

[17:02] <nothingmuch> i used it for about 2 years

[17:02] <nothingmuch> oi vey, now i'm having trouble creating temp files

[17:02] <nothingmuch> *whine*

[17:03] *** _metaperl is now known as metaperl

[17:03] <autrijus_> oi.

[17:03] <autrijus_> greetings metaperl-san

[17:04] <PerlJam> Yeah, I know what you mean by intuition.  I've used CVS off and on for many years now and the biggest problem I've had is remembering the esoterica to get useful work done.  With svn (and presumably svk) the interface has a more regular structure and design such that there is no esoterica

[17:04] <nothingmuch> i haven't really used svn, and svk has been getting treated unfairly by me in the past several hours

[17:05] <nothingmuch> i'm biased, since openfoundry is down, and now my checkouts are confused

[17:05] <PerlJam> nothingmuch: indeed. It's a pain.  It's too bad that svn.perl.org wasn't an online, realtime mirror of openfoundry

[17:06] <autrijus_> nothingmuch: darcs repo now closely mirrors svn.perl.org

[17:06] <autrijus_> so if you'd like to sw to darcs now, that's entirely fine

[17:06] <autrijus_> :)

[17:06] <nothingmuch> i work in darcs

[17:06] <nothingmuch> when i edit

[17:06] <nothingmuch> i have real patches

[17:06] <nothingmuch> do you want them instead?

[17:06] <autrijus_> sure!

[17:06] <autrijus_> I work in both :)

[17:07] <autrijus_> so you can "darcs send" me stuff

[17:07] <nothingmuch> ok, i thought you had bandwidth issues with that

[17:07] <nothingmuch> a)ll, h)ead, -count, revision? [a] Interrupted.

[17:07] <nothingmuch> =D

[17:07] <autrijus_> wtf?

[17:07] <nothingmuch> ^C

[17:07] <autrijus_> ahh :D

[17:08] <seano> PerlJam: wtf?  'co, add, commit, update'  What can be more natural?  If you put an infant in front of a machine and told it to hack, it will naturally start producing these utterances!

[17:08] <PerlJam> seano: :-P

[17:08] <seano> nothingmuch: svk's a chatty bastard, isn't it?

[17:08] <crysflame> haha

[17:08] <crysflame> seano++

[17:08] <crysflame> c co, c a, c ci, c up

[17:09] <crysflame> C CO C CA

[17:09] <seano> "unpull" isn't even a word!

[17:09] <PerlJam> you know what this channel doesn't need?  A bot that tells us when commits have been made to pugs.

[17:09] <nothingmuch> autrijus: add an email file to http://wagner.elixus.org/~autrijus/darcs/pugs

[17:09] <crysflame> seano: but it leads directly to its meaning

[17:09] <integral> PerlJam: configure CIA :-)

[17:09] <crysflame> "reverse the pull"

[17:09] * PerlJam wanders off to a graduate student's presentation

[17:10] <nothingmuch> ok, patch for given.t also sent

[17:10] <seano> I guess it's the push/pull vs. checkout/checkin thing that gets me.  People talk about the greatness of "distributed version control", but in my experience it's only been used in a centralized way.

[17:10] <nothingmuch> now i'm finally resuming work on try.t

[17:11] * nothingmuch uses darcs very distributedly...

[17:11] <autrijus_> seano: until... the main repo goes down

[17:11] <autrijus_> then, svk and darcs will survive

[17:11] <seano> ...and centralized, "pull" is just a weird way to say "co"

[17:11] <nothingmuch> public repos are on mine and others's websites

[17:11] <autrijus_> cvs and svn will go crashing down

[17:11] <nothingmuch> but i normally share to other places

[17:11] <nothingmuch> patch flow looks like a graph

[17:11] <seano> autrijus_: then we have the current cock-up with me having to put 40M of SVK glop on my machine to keep up with the latest.

[17:12] <autrijus_> seano: 40M?

[17:12] <crysflame> seano: hey, GHC is at least 10M

[17:12] <crysflame> 60 if you go for source

[17:12] <autrijus_> 40M!?

[17:12] <seano> That's what the installer says...

[17:12] <crysflame> OS X installer disk space estimate?

[17:12] <autrijus_> I don't think the installer knows what it's talking about.

[17:12] <seano> You're probably right.  Still, it's slow enough to make me think it's 40M.

[17:12] <autrijus_> but maybe it does. not using OSX currently :)

[17:13] <crysflame> the OS X installer is totally on crack

[17:13] <seano> But the point remains that our development model is completely centralized.

[17:13] <autrijus_> sure. the main selling point is not decentralization

[17:13] <seano> (and yes, the disk space winge is completely bogus, since GHC is utterly ginormous).

[17:13] <autrijus_> it's offline commits.

[17:13] <nothingmuch> well, distributed devel must still correlate somewhow

[17:13] <autrijus_> i.e. being able to view logs and commit thingswhen you have no bandwidth

[17:13] <autrijus_> or like me, with 2400bps.

[17:14] <crysflame> oooh

[17:14] <crysflame> nothingmuch: there's algorithms that govern the correlation effectively

[17:14] <crysflame> iirc, darcs uses some variant of quantum math

[17:14] <seano> ok.  the problem for which my solution is to keep both local and remove CVS repositories ;).

[17:14] <nothingmuch> no, not that kind

[17:14] <seano> crysflame: "it's ... science!"

[17:14] <autrijus_> seano: which is exactly what svk does, only automatically

[17:14] <autrijus_> I tried googling for fa*lu*gon* today and I was promptly disconnected.

[17:15] <crysflame> seano: i like science. star trek helped me understand the alcubierre warp field.

[17:15] <nothingmuch> i mean, you can't just put a patch somewhere, and google spiders it and commits it to everyone's repos

[17:15] <autrijus_> and google.com had not been working so far.

[17:15] <crysflame> autrijus: errr, eh?

[17:15] * autrijus_ is working without google :-/

[17:15] <nothingmuch> you need, as a group of developers, to decide what is the place stuff goes to

[17:15] <crysflame> nothingmuch: that place can be many places

[17:15] <nothingmuch> with distributed VCS this place can change more easily

[17:15] <nothingmuch> and that place can be more than one

[17:15] <crysflame> autrijus: /m phenny .g foo

[17:15] <nothingmuch> but you can

[17:16] <nothingmuch> t control revisions without sharing somewhere

[17:16] <nothingmuch> the central paradgim was so successful not because it's easier or something

[17:16] <nothingmuch> it was just the obvious choice since no need for an altrnative was evident

[17:17] <crysflame> you know, i've worked out the plans in my head for an internet worm that uses google and slashdot comments and steganography to update itself

[17:17] <crysflame> so distributed vcs over the net doesn't actually scare me so much

[17:17] <nothingmuch> a p2p virus with a packaging format will probably be the end of microsoft

[17:17] <nothingmuch> each virus comes with an initial public key

[17:17] <nothingmuch> and new modules are signed

[17:18] <nothingmuch> so the virus can't be made to kill itself

[17:18] <crysflame> metasploit + web spider + stego

[17:18] <crysflame> you got it

[17:18] <nothingmuch> then exploits are just added over time

[17:18] <nothingmuch> and you have a platform that spreads

[17:18] <crysflame> stir in a bit of code yellow, and you have 12 minutes to total infection of all public boxes for each new exploit

[17:18] <nothingmuch> then you run folding@home on it

[17:18] <autrijus_> yay. push() is now a proper binop.

[17:18] <nothingmuch> exactly

[17:18] <crysflame> screw that. climateprediction.net

[17:18] <crysflame> the earth is going to kill us long before cancer does

[17:19] <nothingmuch> i didn't know about that one =)

[17:19] <crysflame> they're simulating climates over boinc

[17:19] <nothingmuch> anywho, i think the real issue is that anyone with the brains to design this properly knows that the likelyhood of getting cought is a bit too big

[17:20] <nothingmuch> another important issue is DoS modules

[17:20] <nothingmuch> that bring down windowsupdate et al more intelligently than a hardcoded IP

[17:20] <nothingmuch> starting at least with the DNS level

[17:21] <crysflame> don't bring down windows update, man

[17:21] <crysflame> the point is to get people to fix their stuff, not to hack it

[17:21] <nothingmuch> i don't want to do it

[17:21] <crysflame> well, let me rephrase

[17:21] <crysflame> my suggestions are not intended to be used to harm

[17:21] <nothingmuch> i'm just noting what will really be vicious

[17:21] <nothingmuch> ah

[17:21] <crysflame> you can cancel out the DoS module with a reporter module

[17:21] <nothingmuch> my prophecy is dark

[17:22] <crysflame> i harness dark for light

[17:22] <autrijus_> stevan: how's unTODO going?

[17:22] <nothingmuch> i'm not going to harness, so ;-)

[17:22] <crysflame> a distributed network of sploited boxes that call their upstream providers using whois.arin.net and say "Hi, I'm infected with an exploit.  Here's my user's information; please contact or disconnect me immediately. Thanks!"

[17:22] <stevan> autrijus: just finshed lunch,.. should be done soon

[17:23] <stevan> autrijus: I am getting some errors for push and unshift, should I ignore them for now?

[17:24] <autrijus_> I've just fixed them.

[17:24] <stevan> ok 

[17:24] <autrijus_> the fix broke grep and map

[17:24] <autrijus_> in a good way

[17:24] <stevan> sending patch now

[17:24] <autrijus_> so I'm fixing that too

[17:24] <autrijus_> I'll roll yours and mine together

[17:24] <autrijus_> and commit

[17:24] <autrijus_> (and sleep)

[17:25] <autrijus_> in 10 hours I'll meet with ~1dozen people from perlchina

[17:25] <autrijus_> and spread pugs some more

[17:25] <stevan> nice

[17:25] <nothingmuch> good luck!

[17:26] <autrijus_> I sold haskell to hideki-san yesterday

[17:26] <autrijus_> I really hope he can find the time to play with haskell/pugs :)

[17:26] <autrijus_> hideki-san == super productive hacker

[17:26] <rjbs> not like you? O_o

[17:26] <rjbs> :)

[17:26] <nothingmuch> rjbs++

[17:27] <autrijus_> uh, actually much more prolific than me

[17:27] <autrijus_> # http://www.freestandards.org/modules.php?name=Content2&pa=showpage&pid=20

[17:27] <rjbs> so, approaching singularity? :)

[17:27] <autrijus_> in a few decades :)

[17:28] <rjbs> impressive!  I put my hopes with yours.

[17:28] <autrijus_> with help from perl6

[17:28] <autrijus_> I hope.

[17:28] <crysflame> singularity!

[17:28] <stevan> autrijus: I sent another patch to you

[17:28] <rjbs> productivity singularity: any project contemplated is immediately implemented

[17:28] <autrijus_> I thought that is already the case

[17:28] <stevan> autrijus: this one is for the sub returning array ref issue I was talking about earlier

[17:29] <autrijus_> you just need to run some sleep()

[17:29] <autrijus_> stevan: okie

[17:31] <autrijus_> I just fixed grep and map.

[17:31] <crysflame> rjbs: in the FUTURE

[17:32] <autrijus_> nothingmuch: have you send me anything?

[17:32] <autrijus_> havn't received your darcs send stuff

[17:32] <nothingmuch> yes

[17:32] <nothingmuch> i'll check mailserver logs

[17:32] <autrijus_> cool. autrijus at autrijus dot org

[17:32] <autrijus_> or preferably

[17:33] <autrijus_> send to p6c

[17:33] <nothingmuch> ok, p6c it is

[17:33] <autrijus_> stevan: 

[17:33] <nothingmuch> set the _darcs email file

[17:33] <autrijus_> todo_ok(42 < 12 & 20 & 32, "test the all infix operator");

[17:33] <autrijus_> this looks _very_ suspicious

[17:33] <autrijus_> nothingmuch: how do I reset that again?

[17:33] <autrijus_> I mean, 42 is > all of 12,20,32

[17:33] <nothingmuch> either echo "foo@bar" > _darcs/email 

[17:33] <nothingmuch> or _darcs/prefs/email

[17:33] <nothingmuch> i forget

[17:34] <nothingmuch> Mar  4 05:19:38 pasta postfix/smtp[28463]: C43D8382C2: to=<autrijus@autrijus.org>, relay=mail.autrijus.org[220.132.132.105], delay=12, status=sent (250 Ok: queued as BD7D5D4C78)

[17:34] <autrijus_> k, no worries, will figure it out

[17:34] <stevan> autrijus: not my tests, I am not sure where that crept in

[17:34] <autrijus_> got it.

[17:34] <autrijus_> Fri Mar  4 05:14:52 IST 2005  Yuval Kogman [email@hidden.address]
[17:34] <autrijus_>   * Test that lone blocks with implicit semicolons actually execute

[17:34] <autrijus_> nothingmuch: looks correct?

[17:34] <nothingmuch> yes

[17:34] <nothingmuch> that is i

[17:34] <autrijus_> stevan: ok, I'll reverse the dir of <

[17:34] <autrijus_> super.

[17:34] <stevan> junctions are metaperl's thing :)

[17:34] <nothingmuch> it is even signed

[17:35] <nothingmuch> but our gpg path is about 8 keys apart

[17:35] <autrijus_> I try to trust the code not the person :)

[17:35] <nothingmuch> good point

[17:37] <autrijus_> shift.t is now all pass.

[17:38] <stevan> nice!

[17:38] <autrijus_> may I request a nomenclature?

[17:38] <autrijus_> it's "Pugs" :)

[17:39] <autrijus_> PUGS only came as a retronym.

[17:39] <autrijus_> it's a minor issue anyway :)

[17:40] <seano> But I'm sure it will spawn endless usenet discussion like "PERL" vs. "Perl" vs. "perl".

[17:40] <stevan> autrijus: do you want a patch for un-TODOing shit?

[17:40] <metaperl_> how about REPL

[17:41] <seano> I think we need more alterna-capitalizations.  "PuGS" -- "Purely Good Stuff".

[17:41] <metaperl_> relative expression-based parsing language

[17:41] <stevan> s/shift/shit/

[17:42] <seano> stevan: shit.t passed?

[17:42] <autrijus_> ...

[17:42] <stevan> seano: that has been renamed to movement.t

[17:42] <autrijus_> stevan: no, I unTODOed them myself

[17:42] <autrijus_> comitting

[17:42] <autrijus_> (with yours as well)

[17:42] <stevan> cool

[17:42] * seano giggles

[17:43] <autrijus_> * unTODO from stevan; fixed grep/map/push/unshift parsing so they are properly binOp now; push() and unshift() now really distinguishesthe inv from the args

[17:43] <autrijus_> r556. enjoy!

[17:43] <autrijus_> now, journal time and finally sleep :)

[17:43] <Limbic_Region> night night autrijus_

[17:43] <nothingmuch> wait wait!

[17:43] <nothingmuch> try.t in 5 mins

[17:43] * autrijus_ waits...

[17:44] <autrijus_> sure.

[17:44] <autrijus_> send it before I finish writing the journal :)

[17:45] <nothingmuch> hmm

[17:46] <nothingmuch> how would i say isa_ok in Test?

[17:46] <nothingmuch> patch Test?

[17:46] <stevan> nothingmuch: I usually do is(ref($x), '..."

[17:46] <nothingmuch> or ignore it for now due to lack of object support?

[17:47] <autrijus_> just write isa_ok using ref()

[17:47] <autrijus_> I think. or punt and use todo_

[17:47] <nothingmuch> delayed

[17:47] <nothingmuch> is the right place for try t/op/try?

[17:48] <nothingmuch> i'm not sure wither it takes an block and tries it (hence op)

[17:48] <nothingmuch> or if it's a control structure

[17:48] <nothingmuch> conceptually

[17:48] <autrijus_> wow, one week passed durgin 6.0.9 and now

[17:48] <autrijus_> I can hardly feel it

[17:48] <autrijus_> t/base/try perhaps

[17:48] <autrijus_> s/perhaps/definitely/

[17:48] <nothingmuch> ok

[17:48] <autrijus_> I guess it's time for 6.0.10.

[17:49] <autrijus_> tomorrow then.

[17:49] * autrijus_ tries to keep up with weekly releases

[17:49] <nothingmuch> hmm

[17:50] <autrijus_> there's simply too much changes in one week. :-/

[17:50] <autrijus_> but I probably can't afford to do 2 release per week.

[17:50] <autrijus_> so 1 week per release sounds right

[17:50] <stevan> autrijus: we can split up the responsility maybe

[17:50] <nothingmuch> oh, i forgot $! has trouble parsing

[17:51] <autrijus_> stevan: that works; except it's not much work in prepping a release

[17:51] <stevan> not much work, but does take time

[17:51] <autrijus_> true.

[17:51] <autrijus_> actually 80% of the work is on the ChangeLog.

[17:51] <autrijus_> I can easily handle the rest with tools

[17:51] <stevan> yeah

[17:51] <autrijus_> so if you are willing to write a ChangeLog in the next 10 hours

[17:52] <autrijus_> then I'd be very very grateful :)

[17:52] <stevan> autrijus: I am not sure all that you have done

[17:52] <autrijus_> that'd be a great gift for perlchina

[17:52] <autrijus_> I think just browse the logs and the diary

[17:52] <autrijus_> I usually simply use the diary as skeleton

[17:52] <stevan> autrijus: ok, will do

[17:52] <autrijus_> and fill in details from the log

[17:52] <autrijus_> that's all info I was working with anyway

[17:52] <autrijus_> the majority of changes are now not done by me :-)

[17:53] <autrijus_> stevan++

[17:53] * autrijus_ turns back to "Day 32: Breakneck speed!"

[17:55] <metaperl_> so what do I type to update from svn.perl.org

[17:56] <metaperl_> but we already defined a function

[17:56] <nothingmuch> ok, patch for try.t sent to p6c

[17:56] <autrijus_> metaperl: "svn up"? "svk pull"

[17:56] <metaperl_> return = (\a -> (\s -> (s, a) ) )

[17:56] <metaperl_> oops

[17:56] <autrijus_> that sounds very monadic.

[17:57] <metaperl_> :) that is what I am studying

[17:58] <metaperl_> should the kwiki or pugscode contains some of this technical info?

[17:58] <stevan> is diary the darcs term for svn log?

[17:58] <metaperl_> since we have 1 whole day wihtout openfoundery

[17:58] <nothingmuch> darcs changes

[17:58] <nothingmuch> ;-)

[17:58] <metaperl_> what is the whole cmdline to update from svn.perl.org? anyone know?

[17:59] <stevan> nothingmuch: can you send me the list of all darcs changes since Feb 28th

[17:59] <stevan> svn co http://svn.perl.org/perl6/pugs/trunk 

[18:00] <nothingmuch> reverse chrono order, si?

[18:00] <nothingmuch> perlbot, nopaste?

[18:00] <perlbot> Paste your code here and #perl will be able to view it: http://sial.org/pbot/perl

[18:00] <metaperl_> I think that should go in the topic for the next day... dont you guys?

[18:00] <autrijus_> the darcs changes are duplicated in svn.perl.org. :)

[18:00] <autrijus_> metaperl: sure, feel free to set it

[18:00] <stevan> autrijus: very cool,.. svk I assume

[18:00] <autrijus_> i.e. the svn log should be a superset.

[18:01] <Khisanth> ... so pugs is now using 3 repos?! O_O

[18:01] <nothingmuch> http://sial.org/pbot/7891

[18:01] <autrijus_> Khisanth: by neccessity not by choice!

[18:01] <nothingmuch> why doesn't /invite pasteling

[18:01] <integral> you need to be opped to invite pastling afaik

[18:02] <nothingmuch> bummer

[18:02] <Khisanth> http://sial.org/pbot/ instructions for inviting pasteling are on the bottom of that page :P

[18:02] <Khisanth> could always ask thrig ...

[18:02] <autrijus_> nothingmuch: I changed email for darcs/pugs/

[18:02] <autrijus_> I think I did, anyway

[18:02] <nothingmuch> yay!

[18:03] <autrijus_> verify it for me?

[18:03] <nothingmuch> autrijus: give me a tiny task

[18:03] <Khisanth> integral: well you just need some way to /invite probably :)

[18:03] <autrijus_> nothingmuch: do you have a cpan ID?

[18:03] <integral> Khisanth: true ;-)

[18:03] <nothingmuch> ~NUFFIN

[18:03] <autrijus_> good

[18:03] <autrijus_> so the task is adding yourself to AUTHORS

[18:03] <autrijus_> now implement it :)

[18:04] <nothingmuch> ok

[18:04] <obra> hah

[18:04] <nothingmuch> ooh! i get to use conflict merging for the first time in real life, with darcs

[18:05] * nothingmuch only faked cases before

[18:05] *** metaperl_ changes topic to: Run Perl6 Now! | pugscode.org ('Overview', 'Journal') | pugs.kwiki.org | chan now logged: http://xrl.us/e98m | openfoundry down. svn co http://svn.perl.org/perl6/pugs/trunk

[18:07] <nothingmuch> autrijus: try again

[18:07] <nothingmuch> move email file to to the other logical place

[18:08] <autrijus_> ok, try again?

[18:08] <autrijus_> greetings luqui-san!

[18:09] <luqui> hello

[18:09] <luqui> yay, the week is over

[18:09] <nothingmuch> =(

[18:09] <stevan> hey, should "unshift @unshift3, @val2;" flatten @val2?

[18:09] <luqui> yes

[18:09] <stevan> oops

[18:09] <nothingmuch> this is odd

[18:10] <stevan> autrijus: I am going to send you some test patches :)

[18:10] <nothingmuch> ah!

[18:10] <nothingmuch> now it works

[18:10] <luqui> get_stuff ==> unshift @array

[18:10] <nothingmuch> Creating patch to http://wagner.elixus.org/~autrijus/darcs/pugs...

[18:10] <nothingmuch> Found email to send to [email@hidden.address]
[18:11] <autrijus_> woot.

[18:11] <autrijus_> stevan: go ahead :)

[18:11] <stevan> autrijus: BTW the unshift issue is now just reversed

[18:12] <stevan> instead of ",42", its printing "42,"

[18:12] <stevan> so the undef is just the second element

[18:12] <stevan> but you need to post your journal and sleep,.. so that is for another day :)

[18:13] <luqui> is openfoundry down?

[18:13] <autrijus_> yup.

[18:13] <stevan> luqui: yes

[18:13] <nothingmuch> luqui - yes, see chat toppic

[18:13] <autrijus_> use svn.perl.org instead for the next 36 hours

[18:13] <luqui> okay

[18:13] <nothingmuch> tr/p/p/s

[18:17] <luqui> that stupid "@a" bug still isn't gone

[18:17] <stevan> luqui: which one is that?

[18:17] <luqui> try:  my @a = (1,2,3);  say "@a";   vs.  say " @a"

[18:18] <luqui> basically "@a" is acting like @a, not ~@a

[18:18] <autrijus_> huh?

[18:18] <autrijus_> I fixed it

[18:18] <stevan> weird

[18:18] <luqui> You said you did... and the patch looked like it should have

[18:18] <luqui> but it's still broken

[18:18] <autrijus_> ah. I found it.

[18:18] <autrijus_> luqui++

[18:19] <nothingmuch> should I test?

[18:19] * stevan adds another bullet point to the change log 

[18:19] <luqui> oh yeah, we test things that are broken...

[18:19] <stevan> nothingmuch: put it in t/op/string_interpolation.t

[18:19] <nothingmuch> not 02atoms where other interps are?

[18:20] <luqui> I just put them there because that's where other basic tring stuff is

[18:20] <stevan> nothingmuch: the 0n.t are for synopsis stuff

[18:20] <luqui> oh, okay

[18:20] <nothingmuch> ah

[18:20] <stevan> but the t/op/ tests are more specific

[18:20] <luqui> didn't know that

[18:20] <metaperl_> thanks for fixing the junctions... now I can give a demo at our local perl mongers meeting next wednesday on them!

[18:20] <metaperl_> all the tests just passed

[18:21] <luqui> we should move the other interpolation stuff from 02atoms into there too

[18:21] <stevan> luqui: it really doesnt matter, but with the number of tests growing its easier to break them into smaller peices

[18:21] <nothingmuch> huh?

[18:21] <luqui> right

[18:21] <nothingmuch> say "@a";

[18:21] <nothingmuch> "123"

[18:21] <autrijus_> luqui: I fixed your bug now.

[18:21] <autrijus_> it now says "1 2 3"

[18:21] <autrijus_> committing

[18:21] <luqui> nice.

[18:21] <luqui> autrijus_++

[18:22] <luqui> svn diff -r558:559

[18:22] <nothingmuch> sent

[18:22] <luqui> oh, that's pretty close to how I fixed it the first time

[18:23] <luqui> except I threw a prefix:~ on the front of the whole thing

[18:23] <stevan> what are we gonna do when autrijus is sleeping, we need a svn.perl.org commiter in here

[18:23] <luqui> I am one

[18:23] <nothingmuch> is("@a", ~@a, "Interpolation of array is in string context"); passes

[18:23] <stevan> luqui++

[18:24] <autrijus_> woot.

[18:24] <nothingmuch> without synching

[18:24] <autrijus_> luqui: yeah, prefix~ is wrong

[18:24] <autrijus_> it's not really wrong

[18:24] <luqui> why?

[18:24] <autrijus_> but I don't like the reliance on the binding

[18:24] <autrijus_> because user may redefine it

[18:24] <luqui> we're relying on ~""

[18:24] <autrijus_> and we should not use the userdefined one, I think

[18:24] <autrijus_> (I think)

[18:24] <luqui> but interpolation is defined as concatenation

[18:24] <autrijus_> yeah, p5 currently uses binary ~ overloading too

[18:25] <autrijus_> but not unary ~

[18:25] <autrijus_> unary ~ has nothing to do with concat.

[18:25] <luqui> yeah I think yours is a little more right

[18:25] <autrijus_> =)

[18:25] <autrijus_> sorry for being pedantic.

[18:25] <metaperl_> could you run examples/junctions/3.p6 please ?

[18:25] <metaperl_> i think it is returning true when it should not

[18:25] <metaperl_> the first case should not return true

[18:25] <autrijus_> only one at least 1 newval is less than oldvals

[18:25] <autrijus_> not two

[18:25] <autrijus_> it now works

[18:25] <autrijus_> as expected.

[18:25] <nothingmuch> luqui: can you help me fail the test?

[18:26] <metaperl_> nothing in @newval1 is < @oldval

[18:26] <nothingmuch> your example works for me

[18:26] <metaperl_> @newval1 = (15, 17,14);

[18:26] <luqui> nothingmuch: hmm?

[18:26] <metaperl_> each of these values is greater than any in @oldval

[18:26] <luqui> what rev are you at?

[18:26] <metaperl_> @oldval=(5,8,12);

[18:26] <luqui> oh I know why

[18:27] <metaperl_> 559 revision

[18:27] <luqui> Do sub foo (*@a) { return +@a } 

[18:27] <luqui> in 559 it is fixed

[18:27] <metaperl_> you want me to do that? what the hey does that mean?

[18:27] <metaperl_> :)

[18:27] <luqui> and then ok(foo("@a") == 1)

[18:27] <metaperl_> luqui were you talking to me?

[18:27] <luqui> no, to nothingmuch 

[18:28] <luqui> oh, I'm confusing who I'm talking to

[18:28] <metaperl_> what does the * infront the @a mean?

[18:28] <luqui> flatten

[18:28] <autrijus_> ok, journal up. zzz

[18:28] <autrijus_> have fun, lambdacamels :)

[18:28] <luqui> flatting context, rather

[18:28] <autrijus_> &

[18:28] <stevan> night autrijus

[18:28] <metaperl_> night aut

[18:28] <luqui> night

[18:28] <nothingmuch> night

[18:28] <nothingmuch> explain please, luqui

[18:29] <luqui> if "@a" is identical to @a, then it should flatten into foo

[18:29] <luqui> but ~@a won't

[18:29] <nothingmuch> foo gets array items flattenned into @a, and then makes numeric context (== count)

[18:29] <nothingmuch> oh

[18:29] <luqui> right

[18:29] <luqui> (we technically don't need the +)

[18:29] <luqui> er, we should have it

[18:29] <nothingmuch> that was a parse error

[18:30] <nothingmuch> "@a" was passed as really @a?

[18:30] <luqui> yeah?

[18:30] <luqui> yeah

[18:30] <nothingmuch> sorry, s/$/?/

[18:30] <nothingmuch> i see, i get 3

[18:30] <nothingmuch> synch will probably tell fix

[18:31] <luqui> I wonder if we can do +"@a" == 3 to avert the sub call

[18:31] * nothingmuch waits for svn<=>darcs synch

[18:31] <metaperl_> ah heck, I dont have commit access on svn.perl.org

[18:31] <stevan> metaperl: we have just been sending patches to p6c

[18:32] <metaperl_> canwe commit via darcs?

[18:32] <stevan> no idea

[18:32] <stevan> ask nothingmuch 

[18:33] <luqui> who is yuval?

[18:33] <stevan> yuval == nothingmuch (AFAIK)

[18:33] <metaperl_> stevan you have a second to look at examples/junctions/3.p6

[18:33] <metaperl_> ?

[18:34] <stevan> metaperl: junctions are not really my thing, so I am not sure I would know what I am looking at

[18:35] <metaperl_> let me give you a URL

[18:35] <stevan> that works

[18:35] <metaperl_> http://www.perl.com/pub/a/2003/07/29/exegesis6.html?page=4

[18:35] <metaperl_> no, I dont htink it does

[18:35] <metaperl_> :)

[18:35] <metaperl_> I dont think the first if-then should say anything... it should fail

[18:36] <metaperl_> that Exegesis shows junctions quite nicely

[18:36] <metaperl_> brb

[18:39] <metaperl_> ok it's ok if you aren't interested. but I have to get this nailed down somehow

[18:40] <luqui> nothingmuch: accidentally lost your string interpolation mail, but I committed the test that we worked out

[18:40] <nothingmuch> i am yuval

[18:40] <luqui> I heard :-)

[18:41] <nothingmuch> sorry, i was cleaning up

[18:41] <nothingmuch> ok, so what was committed?

[18:41] <nothingmuch> i have a small patch, is("@a", ~@a)

[18:41] <nothingmuch> that was sent

[18:41] <nothingmuch> and i wrote is(foo("@a"), 1)

[18:41] <nothingmuch> and now i'm waiting for autrijus's fix

[18:41] <nothingmuch> to make sure it passes,

[18:41] <luqui> It does

[18:42] <nothingmuch> ok, so should i just commit that?

[18:42] <ingy> hola

[18:42] <nothingmuch> or did someone else already do that?

[18:42] <luqui> it's already done

[18:42] <luqui> I did

[18:42] <nothingmuch> wünderbar

[18:43] <metaperl_> ingy are you into junctions at all?

[18:43] <luqui> I can help you with your example

[18:44] <metaperl_> ok

[18:44] <metaperl_> it's examples/junctions/3.p6

[18:44] <metaperl_> in release 559

[18:44] <luqui> I'm at 561

[18:44] <metaperl_> oh ok

[18:44] <luqui> should be fine right?

[18:45] * metaperl_ updates

[18:45] <metaperl_> im at 561

[18:45] <metaperl_> so anyway the first if-then should not fire

[18:45] <luqui> it doesn't

[18:45] <ingy> metaperl_: I used a junction in a test I wrote for COnfig

[18:45] <ingy> but I'm no expert

[18:45] <metaperl_> no value in @newval1 is less than the values in @oldval1

[18:45] <ingy> far from it actually

[18:46] * metaperl_ checks the script again

[18:46] <metaperl_> ingy: ok thanks anyway

[18:46] <ingy> sure

[18:46] <luqui> you should mark the two "say"s so you know which one happened

[18:46] <metaperl_> luqui it prints twice

[18:46] <luqui> really?

[18:46] <luqui> not for me

[18:46] <metaperl_> i did change the say()s but couldnt commit

[18:46] <luqui> what does svn stat for you say?

[18:47] <metaperl_> more relevant is what does pugs -v say

[18:47] * metaperl_ checks pugs -v

[18:47] <metaperl_> old pugs

[18:47] <luqui> ahh... that'll do it

[18:47] <metaperl_> make install did not overwrite with new build

[18:47] <luqui> weird

[18:47] <luqui> (oh, you can install it?  neat, I'm going to do that)

[18:48] <metaperl_> ok thanks

[18:48] <luqui> committed 3.p6 with changed says

[18:48] <metaperl_> perl Makefile.PL PREFIX=~/perl; make ; make test; make install

[18:48] <luqui> off to class

[18:48] <metaperl_> your PREFIX may vary or be non-existent

[18:48] <metaperl_> cya

[18:48] <metaperl_> thanks

[18:49] <luqui> back in three hours

[18:51] <nothingmuch> hmm

[18:51] <nothingmuch> for (1, 2, 3, 4) -> $odd, $even is not there yet

[18:52] <nothingmuch> is this a bug? or does it depend on zip in terms of implementation somehow

[18:52] <stevan> nothingmuch: I think that needs to have a zip() in there

[18:52] <nothingmuch> well, unzip, actually

[18:55] <nothingmuch> will zip((1, 2, 3), (5, 6, 7)) work with that exact syntax?

[18:55] <stevan> I think, but I am no expert

[18:55] <nothingmuch> i mean, in perl6 () is not flat, like in perl 5, right?

[18:55] <nothingmuch> (list) in list context

[18:56] <stevan> nothingmuch: best to ask luqui for the real answer ;)

[18:56] <nothingmuch> who is luqui, btw?

[18:57] <stevan> Luke palmer

[18:57] <nothingmuch> ah

[18:58] <stevan> zh-cn is chinese and zh-tw is taiwanese right?

[18:59] <PerlJam> nothingmuch: yes, your zip should work

[18:59] <nothingmuch> good

[19:08] <nothingmuch> compare:

[19:08] <nothingmuch> eval 'my $t; $t = (1 == 1) ?? 1 :: 0; $t';

[19:08] <nothingmuch> eval 'my $t = (1 == 1) ?? 1 :: 0; $t';

[19:08] <nothingmuch> hmm

[19:08] <nothingmuch> that's not it

[19:08] <nothingmuch> say eval 'my $t; $t = (1 == 1) ?? "true" :: "false"; $t';

[19:08] <nothingmuch> say eval 'my $t = (1 == 1) ?? "true" :: "false"; $t';

[19:09] <nothingmuch> first is 1, second is "true"

[19:09] <wolverian> autrijus: your perl.com link on your journal is broken; missing http://

[19:09] <nothingmuch> is the first a bug?

[19:09] <stevan> wolverian: he is asleep

[19:10] <PerlJam> nothingmuch: $t should be "true" in both cases.

[19:10] <nothingmuch> where would you test this?

[19:11] <stevan> nothingmuch: this is weird

[19:11] <nothingmuch> given.t has a false todo ok because of this

[19:12] <hlen_> what does my @array = @anotherarray; do in perl6? does @array become a list with a single element, in this case the reference to @anotherarray?

[19:12] <nothingmuch> i made a patch that uses if { } else { if {} else {} } instead

[19:12] <stevan> nothingmuch: I saw that false todo

[19:12] <hlen_> s/a list/an array/

[19:12] <nothingmuch> i have a patch to fix it, but i'm considering not submitting it

[19:12] <nothingmuch> due to the fact that it isn't my fault

[19:12] <stevan> hlen: I believe it copies @anotherarray into @array

[19:13] <PerlJam> hlen: no. The intuitive thing happens.

[19:13] <hlen_> PerlJam, copying?

[19:13] <stevan> nothingmuch: if a bug in pugs distorts the test results, we should adjust the test to avoid the bug

[19:13] <stevan> unless of course we are testing for the bug

[19:13] <nothingmuch> ok

[19:14] <nothingmuch> well, we'll be testing for the bug as soon as i figure out a proper place to test that bug

[19:14] <stevan> maybe we need a ??::.t file?

[19:14] <stevan> in t/op/

[19:14] <nothingmuch> i think this is rather with my

[19:14] <integral> I thought there was a cond.t already?

[19:14] <nothingmuch> or assignment in general

[19:15] <stevan> nothingmuch: can you reproduce it with other operators?

[19:15] <stevan> my guess is that you are getting the boolean back 

[19:15] <nothingmuch> i don't really know what's going on, but i'll try

[19:16] <stevan> pugs -e 'my $t; $t = (1 == 1) ?? "true" :: "false"; say ref($t)'

[19:16] <stevan> try that

[19:16] <stevan> you are getting the Bool back

[19:16] <stevan> ref() is your friend :)

[19:16] <nothingmuch> good to know

[19:16] <stevan> pugs -e 'my $t = (1 == 1) ?? "true" :: "false"; say ref($t)'

[19:16] <stevan> that prints Str

[19:16] <stevan> the other Bool

[19:16] <stevan> so I am guessing that it is a ??:: bug

[19:17] <nothingmuch> so is "$t = " without the my enforcing boolean context?

[19:17] <autrijus> just fwi: darcs sync has been restarted now.

[19:17] <autrijus> back to sleep &

[19:17] <nothingmuch> heh

[19:17] <nothingmuch> had a nightmare?

[19:17] <stevan> nothingmuch: I am not sure what you are asking

[19:17] <stevan> autrijus is sleep syncing

[19:19] <PerlJam> stevan: why would you guess it's a ??:: bug?  It seems to me that the difference is between initialization and assignment.

[19:20] <stevan> PerlJam: my thought is that its the ret val of ??::

[19:20] <stevan> but I am just guessing :)

[19:20] <nothingmuch> http://sial.org/pbot/7894

[19:21] <nothingmuch> i think this is a bug in parsing

[19:21] <nothingmuch> because it doesn't get boolianized "false" which is true

[19:21] <stevan> nothingmuch: how so?

[19:21] <nothingmuch> of assignments

[19:21] <qmole> i don't understand why it's printing 1 anyway

[19:22] <stevan> qmole: that is how bool::true is printed

[19:22] <stevan> nothingmuch: so do you want to put it in my.t? or ??::.t

[19:22] <PerlJam> qmole: because it's parsing as ($t = (1==1)) ?? "true" :: "false" so $t gets the value of the conditional

[19:22] <nothingmuch> but rather the (1==0) or (1==1)

[19:22] <nothingmuch> look closely at that past

[19:22] <nothingmuch> e

[19:22] <nothingmuch> qmole - that's a bug

[19:22] <nothingmuch> now were trying to find out where

[19:22] <nothingmuch> i'd put it in my.t

[19:23] <stevan> nothingmuch: ok I will paste it in, I have a big patch building already

[19:23] <nothingmuch> great

[19:23] <qmole> aha

[19:25] <nothingmuch> wow, darcs' conflict resolution is so much fun when it's for real

[19:26] <crysflame> heh

[19:26] <crysflame> that is not a reaction i have ever had to cvs

[19:26] <crysflame> but boy howdy does p4 merge work well with P4MERGE=FileMerge.app

[19:26] <nothingmuch> i don't get much merge errors at work when we use p4

[19:26] <Khisanth> hmm

[19:27] <nothingmuch> even though i'm the integrator and build monkey

[19:27] <Khisanth> nothingmuch: your pastes keep showing up in #perl :)

[19:27] <nothingmuch> oh shit!

[19:27] <nothingmuch> now i get it

[19:27] * nothingmuch blushes

[19:29] <nothingmuch> stevan

[19:29] <nothingmuch> my $t works ok

[19:29] <nothingmuch> it's assignment without my that is broken

[19:29] <nothingmuch> it doesn't belong in my.t

[19:29] <hlen_> are the pipe operators already implemented?

[19:29] <nothingmuch> ==> ?

[19:29] <PerlJam> you mean <== and ==> ?

[19:29] <hlen_> yes

[19:29] <nothingmuch> no

[19:30] <hlen_> ok =\

[19:30] <hlen_> i'm going to love those

[19:31] <stevan> nothingmuch: where should we put it them if not my.t

[19:31] <nothingmuch> i think they are, next to stacking comparisons (1 < 2 < 3) one of the best language features

[19:31] <nothingmuch> i'll create t/op/assign.t

[19:31] <nothingmuch> i think

[19:31] <nothingmuch> well i did, i just didn't commit yet

[19:31] <stevan> nothingmuch: the my.t test has a number of test where a my var is assigned to

[19:31] <stevan> mostly to test its scoping though

[19:32] <stevan> can we duplicate this issue with our?

[19:32] <nothingmuch> right

[19:32] <nothingmuch> my point is unrelated though

[19:32] <nothingmuch> my $t works ok

[19:32] <nothingmuch> it's the already declared var assignment that's causing trouble

[19:32] <stevan> pugs -e 'our $t; $t = (1 == 1) ?? "true" :: "false"; say ref($t)'

[19:32] <stevan> Bool

[19:32] <stevan> yup

[19:33] <stevan> nothingmuch: i agree, create that asssign.t 

[19:33] * nothingmuch oddly finds himself cw'ing one char integers in vim, instead of r'ing them, due to the fact that ints are not "strings"...

[19:35] <rjbs> nothingmuch: relax your typing system ;)

[19:36] <nothingmuch> well, appearantly my head has a bad relaxed type system optimisation thing

[19:36] <nothingmuch> my head takes a string, integerizes it, replaces it entirely with an integer, and stringifies that

[19:36] <nothingmuch> just because looks_like_number($string) is true

[19:38] <nothingmuch> maybe it's a percedence thing

[19:38] <nothingmuch> my $var = is higher percedence than $var = 

[19:38] <nothingmuch> sorry, lower

[19:38] <stevan> nothingmuch: maybe

[19:38] <nothingmuch> i will try to investigate, but i may require hand holding

[19:40] <pjcj> Hello Nicholas

[19:40] <qmole> it looks like it

[19:40] <nothingmuch> hmm

[19:40] <nwc10> Hello

[19:41] <nothingmuch> ok, given my $e = ($t = (1 == 1) ?? "true" :: "false") e is not defined

[19:41] <qmole> oh

[19:41] <nothingmuch> i suspected the expr got parsed as (($t = (1 == 1)) ?? "true" :: "false")

[19:41] <nothingmuch> and thus $t would be 1, and $e would be "true"

[19:41] <nothingmuch> but that's not the case

[19:41] <stevan> nothingmuch: have you looked at the parse tree?

[19:42] <qmole> i'd also expect "true" there

[19:42] <nothingmuch> should i paste it?

[19:42] <stevan> paste what?

[19:43] <nothingmuch> the parse tree

[19:43] <stevan> my $t; my $e = ($t = (1 == 1) ?? "true" :: "false"); wont even parse for me

[19:43] <nothingmuch> http://sial.org/pbot/7896

[19:43] <nothingmuch> oh, that's why the eval didn't work

[19:43] <nothingmuch> that's another, unrelated parse bug

[19:43] <nothingmuch> look at the top of t/03operators.t

[19:44] <nothingmuch> i think percedence is right

[19:44] <nothingmuch> if ($t = (1 == 1)) { "true" } else { "false" } is what i make of it

[19:44] <nothingmuch> or maybe not

[19:44] *** edgewalk1r is now known as edgewalker

[19:45] <nothingmuch> i don't know how to read the parse tree

[19:45] <nothingmuch> { Syn op { opnds } }, right?

[19:45] <nothingmuch> if that's the case, than the "true" and "false" are under the assignment tree

[19:45] <stevan> nothingmuch: I just guess on stuff like that

[19:46] <nothingmuch> the "significant" part of either version's (my $t; $t =  or my $t = ) parse tree seems rather similar

[19:47] <nothingmuch> oh, i get it now

[19:47] <nothingmuch> with my $t = we have {Var "$t";

[19:47] <nothingmuch>                       Syn "if"

[19:47] <nothingmuch> in terms of order

[19:47] <nothingmuch> in the other if comes first, and { Var $t is discussed later on

[19:48] <nothingmuch> i conclude that it is a percedence issue

[19:49] <stevan> look at the bottom of the tree output

[19:49] <qmole> ah

[19:49] <stevan> Var "$t"

[19:49] <stevan> ***  Evl: Syn "="

[19:49] <stevan> {Var "$t";

[19:49] <stevan>  App "&infix:==" (1, 

[19:49] <stevan>                   1)}

[19:49] <stevan> ***   Evl: App "&infix:==" (1, 

[19:49] <stevan>                  1)

[19:49] <stevan> ***   Ret: bool::true

[19:49] <stevan> ***  Ret: bool::true

[19:49] <stevan> ***  Evl: App "&infix:~" ('true', 

[19:49] <stevan>                 '')

[19:49] <stevan> ***  Ret: 'true'

[19:49] <stevan> *** Ret: bool::true

[19:49] <stevan> bool::true

[19:49] <stevan> versus

[19:49] <stevan> Var "$t"

[19:49] <nothingmuch> that's the exec tree, not the parse tree, right?

[19:49] <stevan> ***  Evl: Syn "if"

[19:49] <stevan> {App "&infix:==" (1, 

[19:49] <nothingmuch> i did '.my $t; $t = (1 == 1) ?? "true" :: "false"; $t.

[19:49] <stevan>                   1);

[19:49] <stevan>  Syn "cxt"

[19:49] <stevan>  {'Str';

[19:49] <stevan>   App "&infix:~" ('true', 

[19:49] <stevan>                   '')};

[19:49] <nnunley> That's an AST.

[19:49] <stevan>  Syn "cxt"

[19:50] <stevan>  {'Str';

[19:50] <stevan>   App "&infix:~" ('false', 

[19:50] <stevan>                   '')}}

[19:50] <stevan> ***   Evl: App "&infix:==" (1, 

[19:50] <stevan>                  1)

[19:50] <stevan> ***   Ret: bool::true

[19:50] <stevan> ***   Evl: App "&infix:~" ('true', 

[19:50] <stevan>                 '')

[19:50] <stevan> ***   Ret: 'true'

[19:50] <stevan> ***  Ret: 'true'

[19:50] <stevan> *** Ret: 'true'

[19:50] <stevan> 'true'

[19:50] <stevan> what does the '.' do?

[19:50] <stevan> oh I see

[19:50] <nothingmuch> parse tree without execution, appearantly

[19:50] <stevan> neat, i didnt know that

[19:50] <stevan> yeah that is the exec tree

[19:50] <nothingmuch> uh, less neat

[19:51] <nothingmuch> exec tree is both

[19:51] <stevan> nothingmuch: it seems to me that my $t; $t = 

[19:51] <stevan> is actually getting the value of (1 == 1) 

[19:51] <nothingmuch> yes, that tests show that

[19:51] <stevan> and not the valyue of (1 == 1) ?? 'true' :: 'false'

[19:52] <nothingmuch> got '1' expected "true", got '' expected "false"

[19:52] <stevan> but I think that is how it is executing it too

[19:52] <nothingmuch> uhuh

[19:54] <stevan> I agree, this is a parsing bug

[19:54] <stevan> where are you going to put the test?

[19:54] <nothingmuch> i put it in t/assign.t

[19:54] <nothingmuch> even if it's a parse bug it's a parse bug about assignment

[19:54] <stevan> t/op/ or t/

[19:55] <nothingmuch> t/op/assign.t, sorry

[19:55] <stevan> ok, sounds good to me

[19:55] <stevan> thats an ugly one :)

[19:55] <nothingmuch> where is percedence defined?

[19:55] <nothingmuch> Prim.hs?

[19:56] <stevan> yeah I think,.. all the way at the bottom

[19:56] <nothingmuch> what is 'my',

[19:56] <nothingmuch> from a parser POV?

[19:56] <stevan> no idea

[19:57] <nothingmuch> grep -r 'my' src/

[19:58] <nothingmuch> src/Posix.hs:    In my own land, in the country of Fangorn,

[19:58] <nothingmuch> =(

[19:58] <qmole> heh

[19:58] <nnunley> Too many elves.

[19:58] <nothingmuch> isn't that Treeberad himself?

[19:59] <nothingmuch> i thought only ents and tree things lived in Fangorn

[19:59] <nothingmuch> stevan - how lazy is pugs?

[20:00] <nothingmuch> i conclude from the exec tree that in $t = (1 == 1 ) ?? the ?? :: is not even evaluated

[20:01] <stevan> yeah that sounds right

[20:01] <stevan> nothingmuch: I am not sure how lazy it is

[20:02] <nothingmuch> it sort of makes sense

[20:02] <nothingmuch> because it's in void context

[20:02] <nothingmuch> and the cond /has/ been evaluated

[20:04] <nothingmuch> ok, i shoved "=" way down to the end of Prim.hs

[20:04] <nothingmuch> assuming that percedence has to do with the place in the file

[20:04] <nothingmuch> and it still doesn't pass

[20:05] <qmole> hmm

[20:06] <qmole> i'd have thought adding extra parens would have worked if it was a precedence issue

[20:06] <nothingmuch> theoretically it does, qmole

[20:06] <stevan> qmole: the whole parens-controlling-precendence thing is not quite there yet (AFAIK)

[20:06] <nothingmuch> but we have another bug with that

[20:06] <qmole> ah

[20:07] <nothingmuch> at the top of t/03operator.t there's a test for that, with ?? ::, which doesn't pass

[20:07] * qmole looks

[20:13] <qmole> hmm

[20:13] <qmole> the second one you mean? it passes here

[20:13] <nothingmuch> todo_is(eval '(($str3 eq $str4) ?? 1 :: 2)', 1, "?? :: in parens");

[20:14] <nothingmuch> line 26

[20:15] <nothingmuch> anyway, i am going to get drunk till i can dance

[20:15] <nothingmuch> and then i'm going to dance

[20:15] <qmole> cool

[20:17] <qmole> that's not my line 26 :(

[20:29] <stevan> nothingmuch: have fun

[20:29] <stevan> I am outta here as well, have a good weekend all

[20:31] <jdv79> i'm doing some work...and I'm not a WOMAN!

[20:33] <Yaakov> Feh.

[20:39] * nothingmuch looks for the parse bug some while he dries up

[21:00] * nothingmuch considers a chrooted pugs-smoke repo

[21:00] <nothingmuch> where anyone can commit

[21:00] <nothingmuch> if the patch passes tests

[21:01] <nothingmuch> well, my liver is asking for it. Ciao

[22:00] <jdv79> Will we have Python via PUGS? :)

[22:03] <buu> Pugs will eat python.

[22:07] <qmole> what's the up-to-date repository now?

[22:15] <Khisanth> jdv79: well if you consider "Perl6::Pugs - A Perl6 Implementation" getting python out of it would be an extremely odd twist

[22:16] <jdv79> better leave that task up to parrot then

[22:19] <PerlJam> jdv79: python implemented in haskell would be called "pygs"  :)

[22:19] <Khisanth> swines

[22:23] <sorje> PerlJam, is that the next target? ;-)

[22:44] <crysflame> python on parrot on pugs

[22:45] <PerlJam> a snake wrapped around a bird perched on a dog

[22:45] <PerlJam> That's some interesting imagery

[22:45] <jdv79> how bout a png of it;)

[22:45] <crysflame> do it! do it now!

[22:46] <PerlJam> Well, a more accurate image would have a snake and a dog fighting on the back of really large parrot.

[22:47] <PerlJam> (assuming pugs ever produces parrot asm)

[23:07] <crysflame> heh

[23:07] <crysflame> perl6 is a mongrel

[23:17] <buu> PerlJam: How about a giant parrot holding a snake in it's beak and a dog in it's claws?

[23:17] <qmole> lol

[23:29] <Limbic_Region> welcome revdiablo - first time here?

[23:29] <revdiablo> yes, just wanted to see what goes on.

[23:29] <Limbic_Region> bit quiet this time of night

[23:30] <revdiablo> I'll idle for a few days.

[23:39] <buu> revdiablo: Not much

[23:39] <Khisanth> hmm

