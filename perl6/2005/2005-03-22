[00:00] <ninereasons> bin/mandel.hs:2:30: parse error on input `='

[00:04] <crysflame> neat

[00:40] *** sourceror is now known as codesnik

[01:00] <autrijus> greetings lambdacamels

[01:00] <autrijus> ninereasons: sure, that's only the ast part. you want to full .hs ?

[01:01] <autrijus> s/to/the/

[01:05] <autrijus> obra: 

[01:05] <autrijus> http://svn.openfoundry.org/pugs/util/catalog_tests.jmm.pl

[01:05] <autrijus> http://svn.openfoundry.org/pugs/util/catalog_tests.pl

[01:06] <ninereasons> autrijus: I'd like to see it, yes.  I think that I understood the pugs version, and I wanted to compare it to the Haskell version.  

[01:06] <ninereasons> Purely curiosity.

[01:07] <autrijus> ok. the compile.hs helpers isn't all there hyet

[01:08] <autrijus> but http://autrijus.org/mandel.hs

[01:08] <autrijus> uploading now, will take a bit

[01:08] <autrijus> done.

[01:09] <ninereasons> thank you  .. a sec (phone)

[01:10] <ninereasons> I'm missing some modules. but at least I can look at the code.

[01:10] <ninereasons> Thanks.

[01:11] <autrijus> you're missing modules!?

[01:11] <autrijus> ghc --make -isrc src/pcre/pcre.o mandel.hs

[01:11] <autrijus> (with mandel.hs in the pugs checkout root)

[01:11] <ninereasons> "  Could not find module `Internals':

[01:11] <ninereasons>  "

[01:12] <autrijus> -isrc is the trick.

[01:14] <autrijus> still bad?

[01:14] <autrijus> (I'll tie it all together in pugscc)

[01:16] <ninereasons> ah  -- I finally got it to go.

[01:16] <ninereasons> Thank you.

[01:16] <autrijus> so it runs? fast? :)

[01:18] <ninereasons> it runs but not fast.  I'm timing it

[01:18] <ninereasons> I was astonished at the times you posted.

[01:19] <ninereasons> It must be a smoking machine.

[01:20] <ninereasons> oh -- that's better.  2 seconds.

[01:20] <ninereasons> 2.831 actually.

[01:20] <autrijus> using ./a.out ?

[01:20] <autrijus> ghc -O2 will help :)

[01:21] <autrijus> I did -O2 on the whole tree.

[01:22] <autrijus> (ghc 6.4, freebsd)

[01:22] <ninereasons> ghc -02 ? what does that mean ?

[01:22] <ninereasons> ah O, not 0

[01:24] <autrijus> -O2 means real slow compilation to get real fast code.

[01:25] <ninereasons> it knoced off a tenth of a second.

[01:28] <autrijus> did you rm src/*.o and src/*/*.o before doing that?

[01:28] <autrijus> weird. hrm.

[01:28] * autrijus decides to work on the PIR backend and not worry too much about GHC now :)

[01:29] <autrijus> oh wait. it's totally my fault.

[01:29] <ninereasons> I'm frankly in awe that you picked up this language so quickly and effectively.  Sorry for being such a sycophant, but man, I'm amazed.

[01:30] <ninereasons> it makes my head hurt trying to read it.

[01:30] <autrijus> http://autrijus.org/optimized.hs

[01:31] <autrijus> to read what? mandel.hs?

[01:31] <ninereasons> haskell

[01:31] <ninereasons> yes, as mandel.hs is an example of it.

[01:32] <autrijus> eh. compiled target code is not supposed to be easily readable.

[01:32] <ninereasons> ok . but you don't need to try to make me feel better ;-)

[01:33] <ninereasons> http://autrijus.org/optimized.hs is no file

[01:34] <autrijus> refresh

[01:34] <autrijus> force reload if needed be

[01:34] <ninereasons> proxy cache; I have now.

[01:35] <autrijus> good good

[01:36] <theorbtwo> Hm, what's the current expected failures?  16/95 scripts feels bad.

[01:36] <autrijus> that sounds correct.

[01:36] <autrijus> see stevan's post.

[01:37] <theorbtwo> Where?

[01:37] <autrijus> http://www.nntp.perl.org/group/perl.perl6.compiler/417

[01:39] <stevan> theorbtwo: it was about 78 tests failiing when i un-TODOed

[01:39] <theorbtwo> Oh.  OK then.

[01:40] *** autrijus changes topic to: 78 subtests fail | pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m

[01:40] <stevan> theorbtwo: does that match your count

[01:49] <theorbtwo> No, I have much less then... oh, subtests, not test scripts.

[01:49] <theorbtwo> Yes, 78 exactly.

[01:49] <ninereasons> zowee .26s

[02:17] <autrijus> upgraded to Data.Map for 6.4.

[02:17] <autrijus> 6.2 people, please see if the tree still builds.

[02:18] <autrijus> benchmarking mandel which used to take 77sec.

[02:21] <autrijus> brb.

[02:22] <ninereasons> pugs is a whole different thing when it's "make optimized"

[02:23] <hide_> autrijus: it built, couple of warnings.

[02:23] *** hide_ is now known as hide

[02:33] *** khisanth__ is now known as Khisanth

[02:35] <dvergin> What are the prospects for getting "make test" to run under WinXP?

[02:39] <autrijus> dvergin: I thought asavige is asking perl-qa

[02:40] <autrijus> dvergin: oh, you can also try upgrading to latest EU::MakeMaker

[02:40] <autrijus> and see if it works

[02:40] <autrijus> mm, now takes 63sec.

[02:40] <autrijus> that's an 20% improvement just by upping to Data.Map.

[02:40] <autrijus> nice

[02:41] <dvergin> Okay. Stand by.

[02:41] <hide> autrijus: you saw latest from subversion compiles on 6.2?

[02:41] <autrijus> yup

[02:41] <autrijus> danke

[02:42] <autrijus> and it's 0.20 now for optimized.hs

[02:42] <autrijus> within 50% from perl5 performance :)

[02:43] <autrijus> i'll brb :)

[02:46] <dvergin> AS ppm ExtUtils::MakeMaker 6.05 does not resolve the "too long" issue with "make test". I can upgrade to EU::MM 6.25 by hand, but will that mess up ppm?

[02:47] * dvergin decides to do it anyway and find out!

[02:56] <dvergin> It's official: upgrading to EU::MakeMaker 6.25 on WinXP does not resolve the "too long" issue for "make test".

[04:19] * Schwern pokes the autrijus

[04:20] <Schwern> Is it just me or is pugs unbuildable from the repo right now?

[04:20] <Schwern> 0 ~/devel/pugs$ make

[04:20] <Schwern> /bin/sh -c true

[04:20] <Schwern> /usr/bin/perl -Iinc util/version_h.pl

[04:20] <Schwern> make: *** No rule to make target `src/pcre/pcre.o', needed by `pugs'.  Stop.

[04:26] <hoowa> hello good morning

[04:30] <flw> hello pingzi

[04:58] <flw> hello cnhackTNT

[04:58] <flw> How to use utf-8 encoding in mIRC? My OS is Windows 2000.

[05:01] <Khisanth> it might not be possible ...

[05:02] <flw> hello joe

[05:03] <flw> Khisanth: might not be possible?

[05:04] <Khisanth> flw: with mirc

[05:07] <flw> thx

[05:38] <nothingmuch> morning

[05:45] *** cnhackTNT is now known as cnhackTNT|away

[06:14] <Schwern> flw:  http://www.acko.net/node/51

[06:15] <Schwern> flw:  However, consider another IRC client.  XChat.  Chatzilla.  sirc.  

[07:06] <nothingmuch> autrijus: PING?

[07:07] <nothingmuch> oops, capslock

[07:07] <nothingmuch> i couldn't get [Exp] -> [Val] to work

[07:07] <nothingmuch> it's in too deep

[07:07] <nothingmuch> and also, we need to defer the binding of defaults, and be very clear on how to slurp, and what

[07:09] <autrijus> schweern: fixed I think

[07:09] <nothingmuch> i have a working .assuming

[07:09] <autrijus> (!)

[07:09] <nothingmuch> but it binds everything given partial params

[07:09] <nothingmuch> so the binding is wrong

[07:09] <autrijus> that's ok.

[07:09] <nothingmuch> i have a bit of free time, so i'll work on it now

[07:09] <autrijus> it doesn't affect existing tests?

[07:10] <nothingmuch> not at all

[07:10] <autrijus> please check in for me to see?

[07:10] <nothingmuch> the binding is OK, unless you curry

[07:10] <nothingmuch> in which case default values just set anyway

[07:10] <autrijus> I'm still deep in Compile.hs; just found a poem for it

[07:10] <autrijus> And words unheard were spoken then

[07:10] <autrijus> of folk and Men and Elven-kin,

[07:10] <autrijus> beyond the world were visions showed

[07:10] <autrijus> forbid to those that dwell therein...

[07:10] <autrijus> but please check in .assuming and I'll have a look

[07:11] <nothingmuch> perlbot nopaste

[07:11] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[07:11] <pasteling> "nothingmuch" at 212.143.92.226 pasted "assuming" (9 lines, 348B) at http://sial.org/pbot/8481

[07:11] <nothingmuch> i can check that in, it won't make a difference

[07:11] <nothingmuch> the VSub stuff was already checked in before

[07:11] <autrijus> ok, please do.

[07:12] <nothingmuch> now, i've added funny tracing to bindParams

[07:12] <nothingmuch> bindSomeParams

[07:12] <nothingmuch> it's a bit too eager, is all

[07:12] <autrijus> ok.

[07:12] <nothingmuch> so i'm renaming verifyBindings to finalizeBindings

[07:12] <nothingmuch> which will also handle defaultizing

[07:12] <nothingmuch> now, what I don't get yet, is slurpies

[07:13] <nothingmuch> what is the default array, etc?

[07:13] <gaal> should src/Internals/Map.hi be in svn?

[07:13] <nothingmuch> r992

[07:14] <gaal> looks like it was accidentally svn add'ed to me...

[07:16] <autrijus> gaal: svn up and it should be gone

[07:16] <autrijus> I accidentally checked it in, sorry

[07:16] <autrijus> nothingmuch: ok. so the deal is this

[07:17] <autrijus> if your function has declared at least one slurpy argument

[07:17] <autrijus> and no *@_

[07:17] <autrijus> then a *@_ is added for you by default.

[07:17] <autrijus> similarily

[07:17] <autrijus> if your function has not declared *%_

[07:17] <autrijus> then a *%_ is added for you by default.

[07:30] <nothingmuch> sorry, back

[07:34] <nothingmuch> autrijus: and what is *@_?

[07:34] <nothingmuch> it is how the slurpy var is implemented?

[07:34] <nothingmuch> and what about old style prototypes?

[07:38] <autrijus> *@_ is slurpy @_

[07:38] <autrijus> just like perl 5

[07:38] <autrijus> old style prototypes is no more.

[07:38] <autrijus> if you don't specify prototypes, it's as if you specified (*@_, *%_)

[07:39] <nothingmuch> and named params are in %_?

[07:39] <autrijus> yup.

[07:39] <autrijus> pos in @_, nam in %_

[07:39] <nothingmuch> okay

[07:39] <nothingmuch> the dispatch goes like this:

[07:39] <nothingmuch> (interpretation):

[07:39] <nothingmuch> get a list of invocants, and parameters

[07:40] <nothingmuch> bind the invocants to the parameters that are invocantes, in a positional manner

[07:40] <nothingmuch> bind the named parameters to their corresponding named parameters

[07:40] <nothingmuch> then bind positional parameters on a first-come-first-serve basis

[07:40] <nothingmuch> fulfilling required params first, because they are first in the param list

[07:40] <nothingmuch> then slurp all the other arguments into a slurpy param, if at all

[07:41] <nothingmuch> and finally defaultize all the unfilled up optionals with values

[07:41] <nothingmuch> without values

[07:41] <nothingmuch> as I see it, too much params is an error too, btw

[07:41] <nothingmuch> do we do that?

[07:41] <nothingmuch> and defaultScalar maps the +$y = $x stuff, right?

[07:42] <autrijus> no; defaultScalar is currently not used

[07:42] <autrijus> to much invocants is indeed an error.

[07:42] <nothingmuch> autrijus: you know a bit of aix, right? how do you make a loopback mount?

[07:42] <autrijus> I don't know anything about aix :-/

[07:43] <autrijus> I only know enough to get GHC and Perl5 run

[07:43] <autrijus> and then I live in blissful isolation

[07:43] <nothingmuch> hehe

[07:43] *** castaway_ is now known as castaway

[07:43] <nothingmuch> okay, last question

[07:43] <nothingmuch> what do we do, if say, an optional named param was passed in curried

[07:44] <nothingmuch> but required was not, and it's passed in later?

[07:44] <autrijus> that is fine.

[07:44] <nothingmuch> actually, that doesn't matter

[07:44] <nothingmuch> anyway, i think i can handle it, i'll try to do it now

[07:44] <autrijus> nothingmuch++

[07:44] * autrijus fights some more with 6.4's TH

[07:44] * nothingmuch has to make up a system to create small mountpoints, for testing product

[07:45] <nothingmuch> on linux i plan to mount loopback, rm the loopback file, cd to the mount point, and then umount -l it.

[07:45] <nothingmuch> now i have to figure out aix, hpux, solaris, and tru64

[08:32] <scw> Oops, Language.Haskell.TH is needed now?

[08:32] <autrijus> is it unhappy on 6.2?

[08:33] <scw> err, no. I use 6.4, too.

[08:33] <scw> but seems not default installed with ghc6 package in debian

[08:33] <autrijus> so is TH a problem?

[08:33] <autrijus> !.

[08:33] <autrijus> what is the package name for TH?

[08:34] <scw> What do you mean? I haven't found the correct package to install on Debian.

[08:36] <autrijus> oh.

[08:36] <autrijus> debian simply has no TH?

[08:36] <autrijus> y

[08:36] <autrijus> err, typo

[08:38] <scw> seems so. I got "Can't find module `Language.Haskell.TH'"

[08:40] <autrijus> that sucks.

[08:42] <autrijus> are you really using 6.4 and not 6.2?

[08:42] <autrijus> can you check again?

[08:46] <scw> great, I was using 6.2.2. 6.4 is in experimental yet

[08:46] <scw> upgrading

[08:47] *** meshwolf is now known as SKyPP

[08:56] <elmex> gmorning

[09:22] <malaire> autrijus: you mentioned #parrot in your journal - did you mean #parrot here, or somewhere else?

[09:22] <malaire> (I tried to join #parrot, but there was no-one there)

[09:22] <autrijus> #parrot on irc.perl.org

[09:22] <malaire> ok

[09:22] <autrijus> let me clarify.

[09:22] <autrijus> journal updated, thanks

[09:23] <malaire> is that logged anywhere?

[09:24] <autrijus> not sure.

[09:30] <nlv11757_> autrijus

[09:30] <nlv11757_> is you there?

[09:31] <autrijus> nlv11757_: yes?

[09:31] <nlv11757_> ah, i hear you read 'Advanced Topics in Types and Programming Languages' and i wanted your opinion on it

[09:32] <nlv11757_> i liked pierce's book 'Types and Programming Languages' and was wondering if it was worth buying this new one

[09:32] <autrijus> if you enjoyed TaPL, then definitely!

[09:32] <nlv11757_> does it has additional value?

[09:32] <nlv11757_> has=have

[09:32] <autrijus> sure do.

[09:32] <autrijus> most of them are not written by pierce

[09:32] <nlv11757_> nice, although it's only edited and partly written by Pierce am i correct

[09:33] <autrijus> but by researchers who do the cutting edge thing

[09:33] <nlv11757_> ow you were too fast

[09:33] <nlv11757_> :D

[09:33] <autrijus> but the editorship is amazing

[09:33] <autrijus> all chapters actually look coherent.

[09:33] <autrijus> so yes, I'd recommend it.

[09:33] <nlv11757_> yeah i saw George Necula (main developer of CIL if i'm not mistaken) also

[09:33] <autrijus> nod

[09:33] <nlv11757_> ah that was my next question, because i really liked the style of TaPL, it really builds up and iteratively add complexitiy

[09:33] <autrijus> I had not finished reading it

[09:34] <autrijus> but for the upcoming Pugs -> Parrot compiler with macro support

[09:34] <autrijus> I gather I need all the help from ATTaPL :)

[09:34] <autrijus> (as in, there's very few prior art on that front)

[09:35] <nlv11757_> ok, well although i don't know what pugs or parrot is (except of course these talking birds), I'll take your word for it :P

[09:35] <nlv11757_> im convinced

[09:35] <autrijus> pugs is an implementation of perl 6 :)

[09:35] <nlv11757_> is that of private interest or your job?

[09:35] <autrijus> see http://pugscode.org/ and click on "Overview"

[09:36] <autrijus> that is my private interest and part of my job.

[09:36] <autrijus> I'm self-employed though, so there's little difference.

[09:36] <nlv11757_> sounds...vague :) researcher?

[09:36] <autrijus> no, really small business owner

[09:37] <autrijus> but first and foremost just another perl/haskell hacker :)

[09:37] <nlv11757_> :)

[09:37] <nlv11757_> hehe

[09:37] <nlv11757_> im in doubt what to do after my thesis

[09:38] <Schwern> autrijus:  What was your fix for the tests?  Is the darcs repo lagging behind?

[09:38] <autrijus> I think the darcs repo is uptodate.

[09:38] <autrijus> my fix was to glob in perl code not on command line.

[09:39] <Schwern> Ahh, I see.  The join threw me off

[09:42] <nlv11757_> darn why is a credit card mandatory for ordering this book :S haha

[09:42] <Schwern> Still having the pcre.o trouble

[09:43] <Schwern> http://nopaste.snit.ch:8001/2114

[09:44] <Schwern> There's no src/pcre in the darcs repo

[09:47] <autrijus> !

[09:47] <autrijus> fixing

[09:48] <autrijus> try again

[09:49] <autrijus> better?

[09:49] <autrijus> SCHED_ULE++ # freebsd finally usable for me

[09:55] <kungfuftr> freebsd++

[11:15] <elmex> hmm

[11:16] <ihb> now when Perl 6 is getting implemented, is there any schedule for when the design will be "complete"?

[11:16] <elmex> perl 6 will never be complete. perl 5 isn't complete too ;)

[11:17] <ihb> that's why i put complete in quotes.

[11:17] <elmex> ...maybe community realizes, that ?? :: sucks like hell, they will mabybe change it :)

[11:17] <ihb> if you like "when will the whole design stop being experimental?"

[11:17] <elmex> heh

[11:17] <elmex> ihb: i thought the first things were already finished...

[11:18] <elmex> the synopses are the current standart i thought

[11:18] <elmex> and they don't change that much anymore... 

[11:18] <ihb> it's the word "current" i don't like in there :-)

[11:18] <elmex> :)

[11:18] <ihb> i still see Larry write "or perhaps we could do that, or perhaps this" or "allow blah, that could be nice", etc.

[11:19] <elmex> ihb: i do that too, for example with the strings. but other aspects of perl6 are already completed and documented... and they won't change that quickly anymore

[11:19] <elmex> well... i'm a little bit surprised too that they still fuss around wit hstrings and stuff.. but that stuf isn't trivial i guess

[11:19] <ihb> personally i hope that perl 6 will be experimental for at least a year after it's be completely implemented according to the docs, so that it can be evaluated, fixed, and then the "real" perl 6 can be released.

[11:20] <ihb> s/s be/s been/

[11:33] <nothingmuch> ihb: that's exactly what pugs is about

[11:33] <nothingmuch> it's the experiment before the "real" perl6 is done

[11:34] <ihb> yeah, i just hope that pugs won't speed up things *too* much (considering the very fast pace it's developing in :-))

[11:34] <ihb> nothingmuch: so do you know if there's any schedule for when the "real" Perl 6 will be done?

[11:34] <ihb> i.e., when can i use Perl 6 in production or semi-production?

[11:35] <nothingmuch> ihb: err, after pugs becomes stable, i think

[11:35] <nothingmuch> i reckon that within 6 months things will begin to slow down

[11:35] <nothingmuch> only minor details will be fleshed out a bit

[11:35] <nothingmuch> clarified

[11:36] <nothingmuch> and perhaps slightly redone

[11:36] <ihb> so, a optimist could say that i can use Perl 6 for real in the fall?

[11:36] <nothingmuch> pugs' perl6

[11:36] <nothingmuch> macros and stuff will probably require implementation in perl6 itself

[11:37] <nothingmuch> and that would take time to reimplement perl6 in perl6

[11:37] <nothingmuch> you can write simple perl6 today, though

[11:37] <nothingmuch> you can start using OO perl when 6.2 comes out

[11:37] <nothingmuch> not much will change

[11:37] <ihb> when will 6.2 come out?

[11:38] <nothingmuch> when we can get to it =)

[11:38] <ihb> haha :-)

[11:38] <nothingmuch> the bottom line is ASAP

[11:38] <nothingmuch> but it will come after other things

[11:38] <nothingmuch> which will take time

[11:39] <ihb> is two-three months a realistic estimate?

[11:39] <nothingmuch> http://wagner.elixus.org/~autrijus/darcs/pugs/docs/01Overview.html

[11:39] <nothingmuch> let me find the roadmap for you

[11:39] <nothingmuch> hmm.

[11:39] <malaire> once autrijus said he'd estimate 1-2months per Milestone in roadmap

[11:40] <nothingmuch> like control flow, etc

[11:40] <nothingmuch> i think we're somewhere around 6.0 in some aspects

[11:40] <nothingmuch> errm 6.2

[11:40] <nothingmuch> but halfway there

[11:40] <nothingmuch> there's lots of things missing

[11:40] <nothingmuch> simple variable ops

[11:40] <nothingmuch> simple control structures

[11:40] <nothingmuch> but these things are getting added all the time

[11:41] <nothingmuch> and it's been the real work of the last month or so

[11:41] <nothingmuch> i think we're around 60% on that, maybe more

[11:41] <nothingmuch> that considering the 80-20 rule

[11:41] <nothingmuch> then classes and traits can start being implemented

[11:41] <nothingmuch> but classes and traits are /hard/

[11:41] <nothingmuch> perl6's object system is very complex, in comparison to perl5

[11:42] <nothingmuch> i reckon it can be usable within a week of work, but complete only after 2 months or so

[11:42] <nothingmuch> given different behaviors at runtime/compiletime

[11:42] <kungfuftr> everyone's off to tapei, right?

[11:42] <nothingmuch> MMD issues

[11:42] <nothingmuch> type issues

[11:42] <nothingmuch> etc

[11:42] * nothingmuch is not ;-)

[11:42] * kungfuftr 's housemate is now using pugs to hack on parrot... yay!

[11:42] <nothingmuch> ihb: is this helping somehow?

[11:42] <ihb> nothingmuch: yeah

[11:43] <nothingmuch> we're working on a way to make the current status of pugs' implementation less opaque

[11:43] <nothingmuch> for example, by indexing test/synopsis correlation

[11:43] <nothingmuch> ideally we could sort of paint what parts of the synopses are tested

[11:43] <ihb> nothingmuch: yeah, i've read something about you creating some sort of link system between them.

[11:43] <nothingmuch> and what's passing

[11:44] <nothingmuch> http://nothingmuch.woobling.org/pugs_test_status <-- you can look at a sort of demo here

[11:44] <nothingmuch> it's got only a few links

[11:44] <nothingmuch> but it's still nice

[11:45] <nothingmuch> nice example: http://nothingmuch.woobling.org/pugs_test_status/t/magicals/sub.html#22495752

[11:45] <ihb> i'm curious about this since i'm holding off learning Perl 6 until it's somewhat complete. i want to plan my time and effectively learn Perl 6 and not unlearn things that has changed.

[11:45] <nothingmuch> ihb: most of the basics are pretty clear

[11:45] <nothingmuch> it's not a new language

[11:45] <nothingmuch> it's rather easy, because things are very consistent

[11:45] <nothingmuch> unless they're new

[11:45] <ihb> that's why the basics aren't as interesting :-)

[11:46] <nothingmuch> but they're important =)

[11:46] <ihb> the nice things that'll interest me most is the last implemented i reckon, so i'm holding off until i can play with them.

[11:46] <nothingmuch> you can look at things like t/subroutines/currying.t

[11:46] <nothingmuch> i'm working on that now

[11:46] <nothingmuch> that's basic

[11:46] <nothingmuch> but it's still fun, and useful

[11:47] <kungfuftr> nothingmuch: good learning experience

[11:47] <nothingmuch> well, i'm not working on that now, i'm working on real work, but once the developers are ready and i can make a build, i'll hopefully have some free time

[11:47] <nothingmuch> right now i have to whip up some way to create a throwaway 5mb disk per run on many many systems

[11:47] <nothingmuch> =(

[11:47] <kungfuftr> nothingmuch: which platform?

[11:47] <nothingmuch> (/me would rather code in haskell than in bash)

[11:48] <nothingmuch> linux (using loopbacks, tempfiles, and umount -l), aix (ramdisks, i guess), sunos (lofi), hpux (don't know yet), and tru64 (probably lvm, will have to see)

[11:48] <ihb> i just want to say that you guys working here owns so much credit i don't know how to appropriately express it .-)

[11:48] <kungfuftr> erk... vd++

[11:49] <nothingmuch> ihb: you can help

[11:49] <nothingmuch> give a half hour... 15 minutes each day

[11:49] <nothingmuch> read tests, maybe add a bit

[11:49] <nothingmuch> learn a bit of p6 as you go along

[11:49] <nothingmuch> that's what's really important right now

[11:50] <kungfuftr> (pedantic tests)++

[11:50] <nothingmuch> very important

[11:50] <nothingmuch> for example, that currying test could use a /lot/ of work

[11:50] <ihb> nothingmuch: i've considered it, but i have almost no time. in fact, me talking here now steals too much time from what i'm supposed to be doing, and i need to quit now.

[11:50] <nothingmuch> i've added to it some, but not enough 

[11:50] <nothingmuch> heh

[11:50] <nothingmuch> well, anyway, another, easier solution is paypalling money to autrijus

[11:51] <nothingmuch> lets him take more time off dayjob, to work on pugs

[11:51] <ihb> nothingmuch: i would, if i had a job myself :-)

[11:51] <nothingmuch> hah

[11:51] <nothingmuch> well, we don't expect anything

[11:51] <ihb> i know.

[11:51] <nothingmuch> it was nice of you to just say you want to express gratitude

[11:52] <nothingmuch> that is an expression of gratitude in itself =)

[11:53] <ihb> personally i'm afraid i won't even have time to learn Perl 6 enough because of lack of time. :-( (hence me wanting to do it as efficiently as possible)

[12:00] <ihb> nothingmuch: in case i get free time, how do i submit tests?

[12:00] <nothingmuch> ihb: you give (autrijus|obra|stevan|me) your email

[12:00] <nothingmuch> and then you get commit access

[12:00] <nothingmuch> oh, |hcchien

[12:01] <ihb> ok.

[12:01] <nothingmuch> then you use svn or svk

[12:01] <ihb> i suppose there's a manual for that, since i've never used svn or svk.

[12:03] <nothingmuch> svn co http://svn.openfoundry.org/pugs

[12:03] <nothingmuch> then cd pugs

[12:03] <nothingmuch> edit some files

[12:03] <nothingmuch> add things

[12:04] <ihb> ok.

[12:04] <nothingmuch> check that 'perl Makefile.PL; make test' is ok

[12:04] <nothingmuch> then 'svn add file/that/you/added'

[12:04] <nothingmuch> and the new versions are sent back to the server

[12:04] <nothingmuch> and 'svn commit file/that/you/added file/that/you/changed'

[12:04] <nothingmuch> and other people can 'svn update' to get the changes you made

[12:05] <elmex_> ?

[12:05] <ihb> another question: how about porting perl 5 code? will that be helpful in some way?

[12:05] <nothingmuch> yes, very useful

[12:05] <nothingmuch> see some of Darren Duncan's work

[12:05] <nothingmuch> and i think Stevan's too

[12:05] <nothingmuch> File-Spec was ported

[12:05] <nothingmuch> Algorithm-Dependancy was too

[12:05] <nothingmuch> SQL-Routine will come next

[12:05] <ihb> so target is cpan modules?

[12:05] <nothingmuch> (i give distro names because they ported the tests too ;-)

[12:05] <nothingmuch> well, not necessarily

[12:06] <nothingmuch> perl5 code in general serves as a test

[12:07] <ihb> should i try to change as little as possible, or rewrite it in a perl 6 fashion?

[12:08] <nothingmuch> whichever style you like

[12:08] <ihb> i'll probably go with minimal modification then :-)

[12:09] <malaire> btw, what is address for pugs-wiki? (I couldn't find that from pugscode.org)

[12:09] <nothingmuch> pugs.kwiki.org

[12:11] <ihb> ok, thanks a lot for the info nothingmuch. now i have go get busy.

[12:11] <nothingmuch> ciao

[12:23] <elmex_> ?

[12:24] *** elmex_ is now known as elmex

[12:31] <nothingmuch> elmex?

[12:35] <elmex> ?

[12:42] <gaal> r1006 simple yaml test harness

[12:45] <gaal> autrijus, what makes the 'recent commits' rss output? i'd like to hack it to make the output a little more interesting (eg. include file list and maybe links to diffs with their previous versions)

[12:55] <ihb> are all apocalypses written now btw?

[13:35] <scw> stevan: Hello, t/builtin/die.t passed after my patch but there are only three subtests

[13:38] <ihb> From S02: "A bare closure also interpolates in double-quotish context. It may not be followed by any dereferencers, since you can always put them inside the closure." Later: "The old disambiguation syntax: ${foo[$bar]} ${foo}[$bar] is dead. Use closure curlies instead: {$foo[$bar]} {$foo}[$bar]."

[13:38] <ihb> That second one, "{$foo}[$bar]", looks odd to me. It looks like the closure returns the _scalar_ $foo and you then try to subscript that.

[13:38] <kungfuftr> is MANIFEST being kept up to date?

[13:41] <ihb> so, how should {$foo}[$bar] be read?

[13:45] <stevan> kungfuftr: the MANIFEST is only being generated for releases

[13:46] <stevan> kungfuftr: too many commits were only the MANIFEST

[13:56] <stevan> scw: thanks, I am downloading a rebuildign right now

[13:59] <kungfuftr> stevan: ah... gotcha

[14:04] <jabbot> pugs - 1006 - YAML test harness

[14:04] <jabbot> pugs - 1005 - * fix building on 6.4; beginning of pugs

[14:04] <jabbot> pugs - 1004 - * reHTMLify

[14:04] <jabbot> pugs - 1003 - * remove the stg_hack from Unicode.C

[14:04] <jabbot> pugs - 1002 - * Separate linking for UnicodeC as well.

[14:04] <jabbot> pugs - 1001 - * Fix running tests on win32.

[14:04] <jabbot> pugs - 1000 - 

[14:04] <jabbot> pugs - 999 - 

[14:04] <jabbot> pugs - 998 -  r995@scwnb:  scw | 2005-03-22 16:17:17 

[14:04] <jabbot> pugs - 997 -  r994@scwnb:  scw | 2005-03-22 16:13:36 

[14:04] <kungfuftr> crazy bot

[14:05] <theorbtwo> Aye.

[14:05] <gugod> :/

[14:05] <lightstep> did the bots commit those herself?

[14:05] <lightstep> s/bots/bot/

[14:05] <gugod> it's just reporting the rss feed

[14:06] <lightstep> but 999 and 1000 seem empty

[14:06] <scw> sorry for that...

[14:07] <gugod> maybe it's because the message it self are empty

[14:07] <scw> This is my first time using svk to push from local branch.

[14:14] <stevan> anyone using GHC 6.4 on OS X?

[14:14] <ihb> i'm reading S04 now. what does zip(@a;@b) do? i haven't seen that semi-colon before.

[14:15] <gugod> I just installed it today

[14:15] <stevan> gugod: is it working well for you? I am thinking of upgrading

[14:16] <stevan> ihb: the semi-colon has to do with multi-dimenstional lists

[14:16] <stevan> ihb: i am not sure what it does in zip()

[14:16] <stevan> but with multi-dimensional slices it works liket his

[14:16] <gugod> stevan: I'm not sure if it's the problem of ghc or pugs, but pugs failed on Unicode.hsc :/

[14:16] <stevan> @array[1 .. 5; 10 .. 20]

[14:17] <stevan> each list is a slice on the different dimensions

[14:17] <stevan> at least that is how I understand it 

[14:17] <gugod> zip(@a;@b) = put the @a on the left side, @b on the right side, then zip them.  :p

[14:17] <stevan> gugod: hmm, I am compiling the latest with 6.2 I will let you know if it has issues

[14:17] <ihb> if you want context: http://dev.perl.org/perl6/synopsis/S04.html // The C<for> statement

[14:17] <gugod> say, @a=(1,2,3);@b=(7,8,9), zip(@a;@b) = (1,7,2,8,3,9)

[14:18] <ihb> gugod: how's that different from zip(@a, @b)?

[14:18] <stevan> gugod: it compiled fine for 6.2

[14:19] <ihb> in S03 the for() example uses zip(@names, @codes)--no semi-colon.

[14:20] <gugod> ihb: I think @a,@b are flattern into a single list, that makes a .... one side zipper ? :p

[14:20] *** cnhackTNT|away is now known as cnhackTNT

[14:21] <ihb> i don't think so.

[14:22] <stevan> gaal: you should add yourself as an author to t/README

[14:23] <stevan> gaal: actually I just did it for you :)

[14:24] <gugod> here's the compilation error I got today with ghc 6.4 http://irc.csie.org:8888/124

[14:27] <gugod> ihb: hmm, I was wrong about the flattern thing

[14:30] <gugod> ihb: S09 explains the semicolon, "The semicolon operator"

[14:30] <ihb> how evil to sneak it into S04 without any warning or reference :-)

[14:31] <gugod> evil enough be the head of a world wide evil organization ? (oh he really is!)

[14:31] <gugod> :-p

[14:32] <stevan> ihb: ask on perl6 lang, it may be a typo

[14:32] <stevan> they may be the cabal, but they are still fallible

[14:35] <gaal> strevan: thanks

[14:35] <gaal> if you do that, please also s/\t/    /g -- i threw in a tab accidentally in the eval_ok line

[14:36] <stevan> gaal: fixed

[14:50] <stevan> gaal++ # for yaml_harness.pl

[14:53] <ihb> is foo(@bar) and foo([*@bar]) equivalent if foo has a signature of (@in)?

[14:53] <stevan> ihb: I would think so

[14:54] <stevan> foo(@bar) and foo(*@bar) are equivalent too (I think)

[14:54] <ihb> not if foo has (@in), afaik.

[14:54] <stevan> ihb: why do you say that

[14:55] <stevan> foo(*@bar) would flatten @bar (which is probably not needed)

[14:55] <PerlJam> stevan: foo(@bar) and foo(*@bar) can't be equivalent except in the presence of a slurpy array.

[14:55] <ihb> wouldn't it have to be (*@in)?

[14:55] <stevan> actually,.. you guys are right,.. 

[14:55] * stevan is still working on his first coffee

[14:56] <ihb> then i guess, if zip is (@a, @b), zip(@foo;@bar) would work just as well as zip(@foo, @bar), although i see no reason to use the semi-colon.

[14:57] <ihb> i may be very wrong, since i started reading the synposis about an hour ago.

[14:58] <stevan> ihb: I question if that semicolon is not a typo

[14:58] <stevan> you should email perl6 lang and ask for clarification

[14:58] <PerlJam> indeed.

[14:58] <PerlJam> I think the ; is left over from the original zip proposal 

[14:58] <stevan> even if it is not a typo, it is not clear

[14:58] <ihb> the semi-colon is used again in zip(@a;@b;@c) right blow in S04.

[14:59] <ihb> ok, left-over seems reasonable.

[14:59] <ihb> how was the original zip proposal?

[15:01] <PerlJam> The original (IIRC) had zip flatten it's args so that zip(@a,@b;@c,@d)  was the same as if you'd done @x = (*@a,*@b); @y = (*@c,*@d);  zip(@x;@y)  or some such.

[15:02] <PerlJam> ; was just playing the role of a super-comma

[15:02] <PerlJam> But that's all changed now that ; is an anon-array constructor.

[15:02] <PerlJam> Hmm.  so maybe those zips are correct with the new semantics ...

[15:03] <ihb> PerlJam: yeah, that's what i was saying above :-)

[15:06] <PerlJam> well, then zip(@a;@b;@c) is the same as  zip <== [@a],[@b],[@c]  right?

[15:06] <PerlJam> Does [@a] flatten @a or not?

[15:07] <autrijus> hi.

[15:07] <autrijus> revelations:

[15:07] <ihb> afaik, [@a] lazily flattens @a, but i not sure at all.

[15:07] <autrijus> 1. Pugs now has a compile-to-PIR interface.

[15:08] <autrijus> 2. My next commit will have embedded parrot to be built optionally.

[15:08] <autrijus> 3. pugscc --parrot -e "say 'Hello'" already works; with the embedded parrot, pugs --parrot will too.

[15:09] <autrijus> 4. Embedded Perl5 and Ponie will also be probed and built optionally so you can call out to arbitary perl5 modules.

[15:09] <autrijus> 5. all these will be demonstrated this weekend in YAPC::Taipei.

[15:09] <pjcj> autrijus++ # again

[15:09] <PerlJam> autrijus: I can not ++ you enough  :-)

[15:09] <PerlJam> autrijus++

[15:10] <autrijus> oh and compile mandel.p6 to mandel.pir

[15:10] <autrijus> even with all the two compiling overheads

[15:10] <autrijus> all taken together, is still 3x faster than perl5.

[15:10] <autrijus> (+ run time that is)

[15:10] <rgs> autrijus++ # !!

[15:10] <ihb> autrijus++ indeed

[15:10] <clkao> autrijus is crazy

[15:11] <autrijus> I need to change the pugscode.org slogan from "Run Perl6 Now" to "Compile Perl6 Now" ;)

[15:11] <PerlJam> clkao: crazy like a ... like a ... yeah, he's just crazy  ;)

[15:12] <PerlJam> r1007 looks broken from here.  I'm sure your commit will fix that :)

[15:12] <theorbtwo> autrijus++

[15:12] <clkao> he made it!

[15:13] <jabbot> pugs - 1007 - * Pugs now compiles to PIR.

[15:14] <autrijus> PerlJam: broken how?

[15:15] <PerlJam> Chasing modules from: src/Main.hs

[15:15] <PerlJam> src/Main.hs:

[15:15] <PerlJam>     Can't find module `Run'

[15:15] <autrijus> err. forgetting an svk add.

[15:15] <autrijus> committed back.

[15:15] <PerlJam> that's on a fresh co, then perl Makefile.PL; make

[15:16] <PerlJam> ah, r1008 es muy bueno

[15:16] <autrijus> try

[15:16] <autrijus>  pugscc --haskell -e "say 'Hello'"

[15:16] <autrijus> and

[15:17] <autrijus> pugscc --parrot -e "say 'Hello'"

[15:17] <PerlJam> btw (fast computers)++

[15:17] <PerlJam> oh no, it died again

[15:17] <PerlJam> src/Compile/Haskell.hs:10:

[15:17] <PerlJam>     Couldn't match `Language.Haskell.THSyntax.Exp' against `[Dec]'

[15:17] <PerlJam>         Expected type: Language.Haskell.THSyntax.Exp

[15:17] <PerlJam>         Inferred type: [Dec]

[15:18] <autrijus> 6.2.2 right.

[15:18] <autrijus> ok, I need to test 6.2.2.

[15:18] <autrijus> a sec.

[15:18] <PerlJam> yeah, 6.2.2

[15:18] <autrijus> ok, fixing.

[15:18] <autrijus> --parrot is fine though?

[15:18] <theorbtwo> That's on a normal "make".

[15:19] <autrijus> !.

[15:19] <autrijus> ok, fixing

[15:23] <ihb> what has happened with S07 and S08?

[15:25] <autrijus> hm?

[15:25] <autrijus> 6.2.2 should build again. pugscc --haskell is still bad though.

[15:27] <theorbtwo> Yep, seems to make OK.

[15:28] <Odin-LAP> Hmm. Has pugs taken perl6 over? :>

[15:28] <PerlJam> Odin-LAP: effectively.

[15:29] <Odin-LAP> PerlJam: That's what matters, right? :p

[15:29] <PerlJam> (as far as implementation goes that is)

[15:29] <Odin-LAP> Yeah, that's what I mean.

[15:30] <PerlJam> All that matters is that we get a working perl6 compiler at some point that doesn't involve Larry and Damian and chromatic and Luke and Dan and ...  etc as a collective wetware processor :)

[15:30] <autrijus> lol.

[15:31] <PerlJam> autrijus: er, where does pugscc appear?  I just have a pugs binary after make

[15:31] <PerlJam> oh, script

[15:31] <autrijus> install and you'll see.

[15:32] <PerlJam> very very very cool

[15:33] <clkao> autrijus: you will have to drink lots of beer on friday

[15:33] <autrijus> mmm?

[15:33] <jabbot> pugs - 1009 - * fix prototype

[15:33] <jabbot> pugs - 1008 - * Run.hs.

[15:34] <pasteling> "malaire" at 217.119.39.217 pasted "C< pugscc --parrot examples/mandel.p6 > not working" (6 lines, 195B) at http://sial.org/pbot/8495

[15:34] <PerlJam> autrijus: you need to put together a wishlist of things you'd like so that we geeks can rally together and get you something.

[15:34] <PerlJam> heh, "Please file a bug report."

[15:34] <autrijus> malaire: it's not supposed to be working. :)

[15:35] <autrijus> the only thing that works is say 'Hi'.

[15:35] <malaire> ok..

[15:35] <autrijus> I'm porting over my yesterday's mandel compiler to this new framework

[15:35] <autrijus> as we speak.

[15:35] <autrijus> should be done soon

[15:35] <autrijus> but I need to get Inline.hs written first.

[15:43] <autrijus> I'll probably call it Embed.hs

[15:43] <autrijus> it's too hard to find a poem for Inline.hs.

[15:55] <autrijus> module Embed where

[15:55] <autrijus> import Embed.Parrot

[15:55] <autrijus> import Embed.Perl5

[15:55] <autrijus> import Embed.Ponie

[15:55] <autrijus> import Embed.Haskell

[15:56] <autrijus> I think those four are enough for now. anyone has anything else to declare? :)

[15:56] <stevan> autrijus: do I need to install parrot for this to work?

[15:57] <autrijus> stevan: you need to install ponie for ponie to work and parrot for parrot to work.

[15:57] <autrijus> (obviously.)

[15:57] <stevan> cool

[15:58] <autrijus> Embed.Haskell needs hs-plugins to work.

[15:58] <autrijus> Embed.Perl5 always works.

[15:58] <kungfuftr> Embed.MagicVoodoo?

[15:58] <stevan> I think maybe we need a pugscc readme soon

[15:58] <lightstep> is pugs as fast as perl now?

[15:58] <autrijus> lightstep: pugscc on parrot will be faster than perl.

[15:59] <lightstep> whee

[15:59] <PerlJam> "as fast as perl now"?  you mean perl6?  pugs is *faster* than perl6 now.

[15:59] <PerlJam> :-)

[15:59] <autrijus> lightstep: pugscc via GHC is just a bit slower than perl5.

[15:59] <autrijus> the goal is to have a

[15:59] <kungfuftr> autrijus: do you reckon that using pugs might make hacking on parrot easier?

[15:59] <autrijus> kungfuftr: definitely.

[15:59] <kungfuftr> autrijus: gd, gd, will let my housemate know

[15:59] <autrijus> kungfuftr: building a parrot AST is the same process as nnunley's Pretty.hs

[16:00] <autrijus> kungfuftr: you just write a pretty printer for Exps

[16:00] <autrijus> that happens to produce valid parrot assembly

[16:00] <autrijus> using the very robust HughesPJ pretty printing library that comes with GHC.

[16:00] <lightstep> except Exp is more general than the perl6 syntax

[16:01] <lightstep> (but perhaps PIR is as general)

[16:01] <autrijus> lightstep: sure, the idea is for Exp to one day become Parrot AST as well.

[16:01] <autrijus> PIR is as general.

[16:01] <autrijus> because you can define arbitary PIR objects.

[16:01] <autrijus> in C or PIR.

[16:02] <lightstep> btw, pugscc -H totally fails

[16:02] <autrijus> on 6.2.2?

[16:02] <autrijus> yeah.

[16:02] <lightstep> unrecognized construct on a Statements block (the top level of the ast)

[16:02] <autrijus> it needs 6.4 currently.

[16:02] <autrijus> will fix, not yet.

[16:02] <lightstep> (i'm on 6.4)

[16:02] <autrijus> and yes, it only recognize "say 'foo'".

[16:02] <autrijus> we're basically back to Day 1 of Pugs.

[16:02] <lightstep> oh

[16:02] <autrijus> I'm porting the mandel compiler to this new framework.

[16:03] <autrijus> it will happen very soon, please have patience :)

[16:03] <autrijus> (or just hack away at Haskell.hs)

[16:03] <stevan> autrijus: any thoughts on how to test this embedded stuff?

[16:03] <autrijus> stevan: yes, by having a pugscc --run

[16:03] <autrijus> and use it as harness.

[16:04] <autrijus> make test-haskell

[16:04] <autrijus> make test-pugs

[16:04] <autrijus> make test-parrot

[16:04] <autrijus> something like that.

[16:04] <autrijus> same test suite.

[16:04] <autrijus> will be trivial to set up I think.

[16:04] <stevan> ok I will look into it

[16:04] <autrijus> btw, t/README is wonderful.

[16:04] <stevan> autrijus: thanks

[16:05] <autrijus> I only plan to do this Compile/Embed thing to a point that

[16:05] <autrijus> 1)mandel runs

[16:05] <autrijus> 2)well behaving enough that other hackers can work on it

[16:05] <autrijus> then I'm back fixing 6.2 blockers.

[16:08] * f0rth unable to understand "We have a created a basic Test " in t/README

[16:09] <Odin-LAP> Hm. There's no TODO list for Pugs?

[16:09] <autrijus> Odin-LAP: http://www.nntp.perl.org/group/perl.perl6.compiler/417

[16:11] <Odin-LAP> Hmm.

[16:13] <jabbot> pugs - 1010 - fix line lengths in t/README

[16:13] <lightstep> afk (taking my sister to an infoshop)

[16:16] <theorbtwo> Blast, there's no poem about Bard the Bowman in the Hobbit.

[16:33] <jabbot> pugs - 1011 - * More pugscc work: --runparrot, -rP, --

[16:37] <autrijus> anyone knows how am I supposed to eval perl5 code in perl6?

[16:37] <autrijus> I know that require/do/use will proc perl5 code automagically.

[16:37] <autrijus> but that's all file-based.

[16:37] <autrijus> eval :perl5 maybe?

[16:37] <autrijus> eval5?

[16:37] <autrijus> eval_perl5?

[16:38] <clkao> autrijus: 

[16:38] <clkao> i can't do pugscc --parrot -e 'say "foo " ~ "Hello"'

[16:38] <autrijus> clkao: you can't because it's not there.

[16:39] <clkao> what's there then ;_)

[16:39] <autrijus> just say() and single quoted strings

[16:39] <autrijus> what do you expect from 1hr hack? :)

[16:39] <autrijus> feel free to hack on src/Compile/Parrot.hs

[16:39] <PerlJam> autrijus: What would be the difference between Compile/Pugs.hs and Compile/Perl6.hs?

[16:40] <clkao> ah ok. :)

[16:40] <autrijus> Compile/Pugs.hs uses the Pugs evaluator to process Pugs opcodes

[16:40] <autrijus> Compile/Perl6.hs spits back perl6 source code.

[16:40] <autrijus> see B::Bytecode and B::Deparse.

[16:40] <PerlJam> gotcha

[16:42] <hcchien> lots of test failed in the trunk. 

[16:42] <autrijus> eval:perl5 "use RT;"

[16:42] <autrijus> I'll go with that.

[16:42] <autrijus> hcchien: see /topic!

[16:43] <hcchien> err...., interesting topic. :p

[16:48] <stevan> autrijus: what did the Haskell backend require? hs-plugins?

[16:48] <autrijus> stevan: nono, Embed.Haskell does that.

[16:48] <autrijus> Compile.Haskell only wants template haskell

[16:48] <autrijus> which works with GHc 6.4 on all popular platforms.

[16:48] <autrijus> I need to fix 6.2.2.

[16:49] <autrijus> (TH is part of GHC)

[16:49] <stevan> so pugscc --haskell requires nothing special?

[16:50] <autrijus> yeah.

[16:50] <autrijus> it needs GHC

[16:50] <stevan> ok

[16:50] <autrijus> and a pugs build dir

[16:50] <autrijus> but nothing else.

[16:50] <stevan> 6.4 or 6.2.2

[16:50] <stevan> or both

[16:50] <autrijus> theoretically both

[16:50] <autrijus> but I don't have 6.2 right now

[16:50] <autrijus> so at this second only 6.4 works

[16:50] <stevan> ok

[16:50] <autrijus> nothing stops 6.2 from working though.

[17:01] <iblech> Hi, just posted a Perl6-solution on Perlmonks (http://perlmonks.org/index.pl?node_id=441359) and noticed "ceil" not being implemented. -- Patch with tests here: http://sial.org/pbot/8499

[17:02] <autrijus> is ceil a perl6 builtin?

[17:02] <autrijus> it is not in perl5, so just checking

[17:03] <autrijus> sub ceil { my $n = shift; int($n) + ($n > int($n) ? 1 : 0); }

[17:03] <autrijus> or really

[17:03] <autrijus> sub ceil ($n) { int($n) + ($n > int($n) ?? 1 :: 0); }

[17:03] <iblech> I remember reading something about ceil (and floor) being in the core, but might be wrong of course

[17:04] <stevan> iblech: check in the Synopsis

[17:04] <autrijus> may I have your email so I can make you a committer?

[17:04] <iblech> [email@hidden.address]
[17:04] <iblech> stevan: Will do, sec.

[17:04] <autrijus> and if you feel ceil() should be in, please ask on p6c/p6l :)

[17:05] <iblech> stevan: It's not in any of the Synopsis, will ask p6l

[17:05] <autrijus> iblech: welcome aboard! please add yourself to AUTHORS to save theorbtwo's workload

[17:06] <iblech> autrijus: Thanks! :)

[17:06] <autrijus> :)

[17:06] *** metaperl_ is now known as metaperl

[17:07] <stevan> autrijus: r1012 I added a pugscc.README, much like the t/README

[17:08] <stevan> autrijus: it still needs some work, but it will keep you from needing to answer the same questions over and over :)

[17:11] <autrijus> !

[17:11] <autrijus> stevan++

[17:11] <autrijus> however...

[17:11] <autrijus> can we have it in a =pod =cut thing? :)

[17:11] <autrijus> inside pugscc itself.

[17:11] <autrijus> as it's a perl5 script right now, just slap =pod on it

[17:13] <stevan> autrijus: even better

[17:13] <jabbot> pugs - 1012 - adding pugscc.README; adding banner to t

[17:16] <theorbtwo> I'm confused by the BACKENDS bit in pugscc.README... how does a perl5 backend let you run perl5 code in pugs -- wouldn't it let you run perl6 code in perl5?

[17:17] <stevan> theorbtwo: I freely admit I don't know what I am talking about in there :)

[17:17] <stevan> theorbtwo: I am just trying to compile info from the past hour on IRC

[17:17] <theorbtwo> OK.

[17:17] <theorbtwo> You should put command-line info in there.  Or better, both there and --help.

[17:18] <stevan> theorbtwo: I am putting the readme into a pod doc at the bottom of the script

[17:18] <stevan> theorbtwo: once I commit it back, feel free to add all you want ;)

[17:23] <theorbtwo> Er, sorry, already submitted a one-liner to make pugscc --help work.

[17:23] <theorbtwo> It probably won't conflict with what you're doing.

[17:23] <jabbot> pugs - 1013 - Make pugscc --help work.

[17:26] <stevan> theorbtwo: it didnt

[17:26] <stevan> theorbtwo: I just commited the POD doc

[17:27] <stevan> theorbtwo: please read it over as a sanity check, and feel free to fix my misunderstandings 

[17:27] * stevan has to get on a conf call ($work always gets in the way of $fun)

[17:29] <ninereasons> isn't the $ sigil supposed to assure that $s is a string (or ref)? 

[17:30] <integral> or a number...

[17:30] <ninereasons> my @a = <1 2 3 4> ; my $s = @a; for $s { say $_ };

[17:30] <ninereasons> prints for each.

[17:30] <ninereasons> is that a bug?

[17:30] <stevan> no

[17:31] <stevan> ninereasons: dereferncing is supposed to be automagic in perl6

[17:31] <iblech> ninereasons: If you want the number of elements of @a, try my $s = +@a

[17:31] <theorbtwo> stevan, it looks sane to me.  I really don't know what's going on.

[17:31] <ninereasons> Interesting

[17:31] <stevan> theorbtwo: maybe its not sane, and you are insane, like all of us :)

[17:32] <stevan> ninereasons: the + is actually forcing numeric context 

[17:32] <integral> hmm, I'd have expect a reference to be printed...

[17:32] * integral afk

[17:32] <ninereasons> $s.perl; # '(\'1\', \'2\', \'3\', \'4\')'

[17:33] <jabbot> pugs - 1014 - removing pugscc.README and placing it as

[17:33] <autrijus> we are getting an eval_perl5() now.

[17:34] <autrijus> it will be eval:perl5 once I get adverbial paris parsed.

[17:34] <autrijus> pairs, even.

[17:34] <ninereasons> stevan: I see how +@a works.  thank you.

[17:35] <ninereasons> and iblech, thanks.

[17:35] <stevan> ninereasons: there are actually many cool context forcing operators, see t/syntax/force_context.t

[17:36] <ninereasons> perl6 is going to very max dwimy !

[17:36] <ninereasons> be

[17:36] <iblech> Is it intended that all t/*/*/*.t (note: three "*"s) are skipped?

[17:37] <autrijus> yes.

[17:37] <autrijus> need to hand-add them

[17:37] <Odin-LAP> Perl6 is also going to be frighteningly malleable.

[17:37] <autrijus> if you want them to run.

[17:37] <stevan> ninereasons: but with the option of control as well (which control freaks like me enjoy)

[17:38] <iblech> autrijus: Ah, ok

[17:39] <autrijus> eval_perl5() landed.

[17:39] <autrijus> will do type conversions later.

[17:43] <chip> don't mean to tease, but sub foo ( +$x, *%rest ) works now too

[17:43] <autrijus> :))))

[17:43] <autrijus> nice!

[17:44] <stevan> autrijus: hate too be a pain, but any timeline on s/// reg-exp support?

[17:44] <chip> Does anybody have a better name for Perl6::Subs?  It's an OK name, but it leads to one of the internal classes being Perl6::Subs::Sub

[17:44] <chip> which is awkward

[17:44] <stevan> chip: does it go just subs? or methods, and blocks too?

[17:44] <chip> autrijus: is C<is required> the current state of the art for required named params?

[17:45] <lucs> What else have you got at the same level as ...::Sub

[17:45] <jabbot> pugs - 1016 - t/unspecced/chomp.t now tests for not re

[17:45] <jabbot> pugs - 1015 - * eval_perl5()

[17:45] <chip> stevan: It does methods too.  C<method foo {}> becomes C< sub foo : method { my $self = shift; ... }>

[17:45] <chip> stevan: but no blocks

[17:45] <chip> lucs: ::Type ::Param and ::Sub

[17:45] <stevan> chip: pointy subs?

[17:46] <chip> stevan: oh, yeah.  Pointy subs.

[17:46] <lucs> Hmm... No obvious good name.

[17:46] <stevan> chip: very nice :)

[17:46] <chip> Jeepers, next you're gonna make me support $^a

[17:46] <Khisanth> autrijus: eval :perl5 looked better :)

[17:46] <chip> No, I mean I don't support pointies, I'd forgot about them

[17:46] <chip> But I have to stop adding features and start reorganizing and documenting now.  Dammit

[17:46] <chip> If I don't CPANize I can't ask for release permission

[17:47] <pasteling> "malaire" at 217.119.39.217 pasted "build error with r1016" (54 lines, 4.4K) at http://sial.org/pbot/8502

[17:47] <autrijus> Khisanth: patches welcome, really :)

[17:47] <autrijus> malaire: fixing.

[17:48] <Khisanth> oh I thought that was some official thing :)

[17:58] <iblech> r1016, GHC 6.2: src/Embed/Perl5.hs:32: Variable not in scope: `withArrayLen'

[18:00] <autrijus> malaire: are you on GHC 6.2?

[18:02] <malaire> no, 6.4

[18:16] <autrijus> ok, try again.

[18:20] <pasteling> "iblech" at 80.81.8.28 pasted "Build failure with GHC 6.2" (12 lines, 379B) at http://sial.org/pbot/8503

[18:22] * iblech food &

[18:23] <jabbot> pugs - 1017 - * only enable PUGS_EMBED=perl5 condition

[18:25] <crysflame> pointy subs?

[18:28] <autrijus> iblech: try again

[18:31] <malaire> building works for me now (without perl5 embedding)

[18:33] <autrijus> good.

[18:33] <autrijus> EMBED needs more work with ExtUtils::Embed.

[18:33] <autrijus> I have done it all once with PAR

[18:33] <autrijus> so it can be made to work. just not tonight :)

[18:33] <autrijus> (but it worksforme, oddly.)

[18:33] <jabbot> pugs - 1018 - * mistyped.

[18:34] <iblech> autrijus: Works now :)

[18:35] <malaire> anyway, I'm more interested to get mandel.p6 to pir working, than to play with perl5

[18:35] <autrijus> sure.

[18:36] <clkao> interesting

[18:36] <clkao>  ./pugs

[18:36] <clkao> /libexec/ld-elf.so.1: Shared object "libperl.so" not found, required by "pugs"

[18:37] <theorbtwo> ldd `which perl`

[18:40] <clkao> it points to the right sitelib directory, of course.

[18:40] <autrijus> do you have a libperl.so?

[18:40] <clkao> sure.

[18:41] <autrijus> LD_LIBRARY_PATH?

[18:41] <clkao> or how do i run svk?

[18:41] <wolverian> do method calls interpolate in strings today?

[18:41] <clkao> it's all normal. this newly built pugs just suddenly fails that way.

[18:41] <clkao> because we weren't linking libperl before i guess?

[18:42] <malaire> yep, I get error on libperl.so also, when trying to run new pugs

[18:42] <autrijus> !.

[18:43] <autrijus> try again.

[18:43] <jabbot> pugs - 1019 - * do not -lperl in vain.

[18:43] <autrijus> r1020.

[18:45] <autrijus> works?

[18:46] <malaire> still compiling...

[18:47] <malaire> yes, works now

[18:51] *** [1]metaperl is now known as metaperl

[18:52] <malaire> hmm.. "make test" seems to be broken - it doesn't run tests in subdirs like t/builtins/{hash,io,list,strings}/*.t

[18:53] <jabbot> pugs - 1020 - * oops.

[18:54] <autrijus> malaire: right. add them to Makefile.PL?

[18:55] <malaire> but there are some tests which should be skipped (e.g. t/rules/disabled/rules.t) - so what should be skipped and what not?

[18:57] <autrijus> maybe mv disabled to Disabled

[18:57] <autrijus> and skip those that are upper cased?

[18:57] <autrijus> (just a random thought)

[18:57] <iblech> malaire: How about (Makefile.PL, line 28) test => { TESTS => join ' ', grep { !/disabled/ } "t/*.t", "t/*/*.t", "t/*/*/*.t" },

[18:57] <autrijus> that works too, except you need to !/Dialects/

[19:00] * autrijus still working with #parrot.

[19:01] * theorbtwo wonders what network that is.

[19:01] <autrijus> irc.perl.org.

[19:01] <autrijus> current topic:

[19:01] <autrijus>  hey, this parrot thing is actually saner than I hoped. -- Autrijus

[19:02] <metaperl> lol

[19:02] <iblech> Right. Then mv disabled Disabled and grep { !/^[A-Z] } ... -- will do

[19:06] <malaire> that grep-trick isn't working.. when running "make test", the harness-command is C< test_harness(0, 'inc', 'blib/lib', 'blib/arch')" t/*.t t/*/*.t t/*/*/*.t >, and that grep(...) from Makefile.PL is nowhere

[19:07] <clkao> is it intended for 'make' always trying to relink the binary?

[19:07] <clkao> or my timestamp is fubared?

[19:09] <malaire> err, anyway, it's not working and Dialects & disabled tests are run (I really don't know much about Makefile.PL)

[19:09] <iblech> malaire: see line 64 of inc/Module/Install/Pugs.pm -- will fix

[19:12] <mj> P1018 - MSYS-MinGW build - 81/2449 subtests failed

[19:14] <vladtz> P1020 build fails in Compile.Haskell

[19:15] <autrijus> vladtz: fails how?

[19:16] <vladtz> Itś a long error for the Haskeel code, where do I paste it?

[19:16] <malaire> perlbot: nopaste

[19:16] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[19:17] <pasteling> "vladtz" at 80.127.84.50 pasted "Compiling Compile.Haskell ( sr" (32 lines, 1K) at http://sial.org/pbot/8505

[19:21] <autrijus> vladtz: you are using a stage1 compiler.

[19:21] <autrijus> vladtz: that should not happen. what kind of GHC are you using?

[19:22] <iblech> With the t/*/*/*.t tests, there're now 100/2808 test failures on Linux, GHC 6.2

[19:22] <autrijus> update topic.

[19:22] * autrijus is journaling

[19:23] <autrijus> thanks :)

[19:23] <jabbot> pugs - 1022 - Actually checking the tests of t/*/*/*.t

[19:23] <jabbot> pugs - 1021 - Minor POD nit fixed.

[19:23] <pasteling> "mj" at 147.229.221.107 pasted "build failed - 1020, nmake, ActivePerl 5.8.4, GHC 6.4" (36 lines, 2K) at http://sial.org/pbot/8506

[19:24] *** iblech changes topic to: 100 subtests fail | pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m

[19:24] <vladtz> I am usign 6.4 from the Fedora page, Iĺl see if they have an update.

[19:26] <autrijus> mj: win xp?

[19:28] <iblech> mj: IIRC, 81 subtests failed for me, too, before we were checking *all* tests

[19:44] <autrijus> mj: I've fixed your building problem

[19:44] <autrijus> try again?

[19:53] <jabbot> pugs - 1023 - * fix build error on win32 by not -lperl

[19:55] <autrijus> we are on revision 1k now! :)

[20:03] <lumi_> Hi

[20:03] <theorbtwo> Hi, lum-i.

[20:03] <jabbot> pugs - 1024 - * typo

[20:04] <lumi_> r2**10!

[20:07] <autrijus> yup!

[20:07] <chip> "At the Christian Guardians, we believe that astrology is much like most other things.  Just as there is good and bad in almost everything else, there is bad astrology and there is good astrology. 

[20:07] <chip> ww

[20:08] <mj> Pugs 1023  - WinXP, GHC 6.4, ActivePerl 5.8.4 - 100/2808 subtests failed, 96.44% okay.

[20:09] <autrijus> good.

[20:12] <lightstep> very strange parse error on t/builtins/goto.t

[20:15] <gaal> hello!

[20:15] <wolverian> should method calls interpolate in strings? I think not outside {}s

[20:15] <lightstep> perhaps missing or extra semicolons cause trouble

[20:15] <wolverian> just looking at this test and it looked odd.

[20:17] <lightstep> and t/pugsbugs/die_and_end.t has 200% failures, but that's to be expected

[20:17] <mj> nmake isntall

[20:17] <mj> dir c:\perl\bin\pugs* 

[20:17] <mj> 4,2 MB pugs.exe.bat

[20:17] <mj> how to remove $(FIXIN) $(INST_SCRIPT)\pugs.exe from Makefile ?

[20:17] <wolverian> ah, they do, but only with parentheses.

[20:18] <autrijus> mj: I don't think it does anything.

[20:18] <autrijus> except that pugs.exe.bat may take some disk space.

[20:18] <wolverian> I guess t/oo/meta_class.t might be wrong, then. (although I guess it's not exactly finished either :)

[20:23] <jabbot> pugs - 1026 - * same fix for runHaskell on win32

[20:23] <jabbot> pugs - 1025 - * win32 hates exec()

[20:24] <wolverian> t/syntax/string_parsing.t might be wrong also, as it doesn't have ()s either. (I'm not sure if it is testing whether the call IS parsed or not)

[20:41] <Limbic_Region> autrijus - out of curiosity, how has hanging out in #parrot been?

[20:43] <autrijus> very nice.

[20:43] <autrijus> folks there are very helpful.

[20:43] <autrijus> Dan is back :)

[20:44] <autrijus> posted today's journal to p6c, p6i and p6l.

[20:44] <autrijus> now I sleep. have fun!

[20:44] <bluefeet> night autrijus

[20:44] *** metaperl_ is now known as metaperl

[20:44] <theorbtwo> G'night, autrijus.

[20:45] <bluefeet> hi metaperl

[20:45] <autrijus> I wonder if I should cross post to perlmonks :)

[20:45] <autrijus> but, too tired to do that. if people want to help, feel free.

[20:45] <metaperl> hi bluefeet

[21:11] <autrijus> g'nite! &

[21:11] <vladtz> bye

[21:33] <jabbot> pugs - 1027 - * pugscc --haskell now works for GHC 6.2

[21:53] <jabbot> pugs - 1028 - I found a bug with single quote strings 

[22:33] <jabbot> pugs - 1030 - more work on the perl6 FileSpec module, 

[22:33] <jabbot> pugs - 1029 - adding more lines to the synoposis based

