[00:00] <autrijus> xinming: huh? it was always like that in pugs

[00:00] <autrijus> ?eval (1,2,3).say

[00:00] <evalbot_8119> OUTPUT[123 ] bool::true 

[00:00] <autrijus> ?eval [1,2,3].say

[00:00] <evalbot_8119> OUTPUT[123 ] bool::true 

[00:00] <autrijus> wait... it is "1 2 3" on my terminal

[00:00] <obra> autrijus: different sequences make sense for different people

[00:00] <autrijus> something's not right

[00:01] <obra> perldoc Perl6::Doc should suggest sequences

[00:01] <autrijus> xinming: I'll look into it in a minute.

[00:01] <autrijus> obra: okay, that works for me... so you think Perl6::Doc is better than P6Doc:: ?

[00:01] <obra> P6Doc is obscure.

[00:01] <xinming> autrijus: make a file to test. :-)

[00:01] <autrijus> Perl6::Spec::Operators # what about this?

[00:01] <xinming> xinming@HomePc:~/tmp$ cat asdf.p6

[00:01] <xinming> #!/usr/bin/pugs

[00:01] <xinming> my $a = ~list( =$*IN );

[00:01] <xinming> print $a;

[00:01] <autrijus> xinming: how about you do that and I'll use the test :)

[00:02] <xinming> :-)

[00:02] <obra> autrijus: what would be in ::Operators? for numbered docs (like the existing specs), I sort of like the numbers...but they make them harder to find

[00:02] <xinming> and run that file, You will get what It shouldn't be. :-P

[00:02] <obra> of course, if the specs ARE hard to understand, making them harder to get at than the ::Doc is a win

[00:03] <autrijus> obra: I'm more oriented in moving AES into a single Spec

[00:03] <autrijus> because it's very hard to chase AE as they are

[00:04] <obra> are you going to try to get @larry to bless it as normative?

[00:04] <autrijus> I'm probably only going to rename Perl6::Bible at this moment

[00:04] * obra wants to understand intent

[00:04] <autrijus> the intent is to make python people who want to learn about perl 6 actually able to start learning it with minimum distraction.

[00:05] <obra> the equivalent docs in perl5 are perldoc perl*?

[00:05] <autrijus> the immediate thing is to make irrelevant documents out of the way, and name the relevant documents sensibly (i.e. by name)

[00:05] <autrijus> yes. perl*is divided into: Overview, Tutorial, Reference, Internals, Platform

[00:05] <autrijus> and FAQ

[00:06] <autrijus> and I think the Reference part sorta matches Synopses

[00:06] <obra> ok. then yeah. I'd rename Perl6::Bible as Perl6::Spec

[00:06] <autrijus> and ::Spec is maybe better than ::Reference (more normative sounding)

[00:06] <xinming> autrijus: hmm, did you try that?

[00:06] <obra> and then start cannibalizing content from them into Perl6::Doc::{O,T,R,I,P}

[00:07] <autrijus> xinming: yes, it joins the list with spaces for me

[00:07] <xinming> autrijus: So, I don't think this should be happen

[00:08] <autrijus> xinming: what do you think should happen?

[00:08] <xinming> though, list( ... ).as("%s", '') will resolve the problem, But for default behaviour. It shouldn't add extra space.

[00:08] <autrijus> it's not unlike the p5:

[00:08] <autrijus> $a = "@{[<STDIN>]}";

[00:08] <autrijus> print $a;

[00:09] <xinming> don't add space, what it slurped, should be printed as the same as what It get.

[00:09] <autrijus> S02: In string contexts container references automatically dereference to appropri?

[00:09] <autrijus> ate (white?space separated) string values.

[00:10] <autrijus> xinming: but you can do

[00:10] <autrijus> @a = list(...);

[00:10] <autrijus> say @a

[00:10] <autrijus> which won't add spaces

[00:11] <xinming> autrijus: hmm, In fact, this is what fglock asked yesterday, "how to slurp stdin",

[00:11] <xinming> autrijus: I think it's not a bug now. :-/

[00:12] <autrijus> xinming: you do it like

[00:12] <autrijus> my $a = $*IN.slurp;

[00:12] <autrijus> or slurp($*IN)

[00:13] <xinming> autrijus: hmm, I tried this, but It will print each line after you press enter

[00:13] <xinming> instead of slurp.

[00:14] <autrijus> xinming: yeah because slurp is lazy...

[00:15] <autrijus> xinming: what's wrong with that though :)

[00:15] <xinming> for $a, you won't slurpy all the input.

[00:16] <autrijus> but it's slurping all the input...

[00:16] <autrijus> just not all at once

[00:16] <xinming> hmm, what I mean is, It will slurp oneline, and process it, then slurp another line, 

[00:17] <autrijus> yes

[00:17] <autrijus> but try this

[00:17] <autrijus> my $a = $*IN.slurp;

[00:17] <autrijus> say substr($a, 0, -1);

[00:21] <xinming> what does -1 mean here? :-/

[00:21] <autrijus> never mind...

[00:21] <autrijus> it means (end of string)

[00:21] <autrijus> so try

[00:21] <autrijus> my $a = substr($*IN.slurp, 0);

[00:22] <autrijus> which forces evaluation until end of slurp

[00:22] <autrijus> there should be better ways to do this.

[00:22] <xinming> maybe a force... :-)

[00:22] <autrijus> nod

[00:22] <autrijus> or make slurp strict by default. I'm not sure.

[00:22] <autrijus> it's p6l domain :)

[00:26] <xinming> my $a = {$*IN.slurp};

[00:26] <xinming> print $a();

[00:26] <xinming> :-P

[00:26] * xinming don't wish the () here.

[00:28] <autrijus> *nod* and it's bogus anyway... once we get lazy arrays it will also be lazy

[00:28] <autrijus> so the real problem is .slurp's laziness.

[00:31] <Khisanth> lazy slurp? isn't that contradictory?

[00:35] <xinming> autrijus: doesn't pugs implemented the ** operator?

[00:35] <xinming> You have to use unary ** to get a non-lazy flattening list context (that is, to flatten immediately like Perl 5).

[00:35] <xinming> from S02

[00:35] <xinming> if so, then, I think we can use **$*IN.slurp

[00:41] <autrijus> ok

[00:44] <autrijus> impliementing it

[01:01] <autrijus> asavige: hi!

[01:03] <asavige> hi autrijus! just got the coke in a brown bottle from supermarket as specified in VICTUALS

[01:03] <asavige> but what do you eat for breakfast?

[01:04] <autrijus> carbonhydates and protein

[01:05] <autrijus> with some water

[01:05] <autrijus> (i.e. anything goes)

[01:05] <autrijus> bread is fine, cereal is fine... :)

[01:06] <clkao> autrijus

[01:06] <asavige> ok, thanks, no need to buy fruit loops or anything. might get some quiona in honour of Schwern (never tried it myself)

[01:06] <autrijus> k.

[01:06] <obra> Coke in a brown bottle?

[01:06] <autrijus> obra: caffeine free coke

[01:06] <clkao> i've got piljs's runjs.pl using perl5-capable js

[01:07] <asavige> here in australia the diet caffeine free coke (as specified in VICTUALS) comes in a brown bottle

[01:07] <autrijus> asavige: also, just recently (during OSDC) I came out under the new real-world name Audrey (autrijus is still around as a net handle), and I'd prefer female pronouns if that's okay with you :)

[01:07] <asavige> no worries mate

[01:07] <clkao> now i can implmeent preludes for io-ish stuff using perl5 for js backend

[01:07] <autrijus> cool :)

[01:08] <autrijus> clkao: yay, that will give iblech some more tests to pass

[01:08] <clkao> r:D

[01:08] <clkao> tell me i am insane

[01:08] <autrijus> clkao: you are insane

[01:08] <autrijus> xinming: **... is implemented. committing

[01:08] <clkao> XD

[01:08] <autrijus> my $a = **($*IN.slurp);

[01:08] <autrijus> print $a;

[01:08] <autrijus> this now works

[01:09] <clkao> ??

[01:09] <clkao> what's ** doing?

[01:09] <autrijus> clkao: force deep sequential eager evaluation

[01:09] <autrijus> deepSeq in haskell

[01:17] <autrijus> it's in as r8695

[01:17] <autrijus> I'm going to revive svnbot6 in a sec

[01:34] <xinming> autrijus: :-) Sorry, I was out for breakfast.

[01:35] <xinming> autrijus: how about the $?CLASS bug? :-P does it have to be fixed after the meta-model finished?

[01:36] <autrijus> xinming: it will be automagically fixed with objspace, which I'm working on at this moment

[01:38] <xinming> bbl

[02:20] <meppl> gute nacht

[02:21] <autrijus> gute nacht, meppl :)

[02:22] <autrijus> xinming: so my Chinese name is now finally public information :)

[02:23] <xinming> autrijus: :-/ Sorry, I still don't know.

[02:25] <svnbot6> r8122 | autrijus++ | * Update the AUTHORS file by running util/fixauthors.pl.

[02:27] <autrijus> xinming: it's in the AUTHORS files... also http://zh.wikipedia.org/wiki/%E5%94%90%E9%B3%B3

[02:28] * autrijus goes back to objspace

[02:28] <PJF> Strange.  Compiling Pugs.Parser croaks with a q{GHC's heap exhausted...} error, but when I remake it handles it fine.  Does GHC do something special like dynamically allocate heap based upon memory size?

[02:29] <autrijus> PJF: yes I think

[02:29] <autrijus> I sometimes needed incremental build  too

[02:30] <PJF> Everything seems to be running smoothly so far.  The only changes I've had to do is patch ExtUtils::MM_Cygwin, manually run 'setup configure', and restart make after an out-of-heap error.

[02:30] <svnbot6> r8123 | autrijus++ | * s/Autrijus Tang/Audrey Tang/g in all places that may have legal

[02:30] <svnbot6> r8123 | autrijus++ |   meanings (copyrights, author names, etc.)

[02:31] <meppl> ;)

[02:31] <autrijus> wait... Imention "patch" ;)

[02:31] <autrijus> s/I//

[02:31] <autrijus> what's the patch about?

[02:31] <PJF> https://rt.cpan.org/NoAuth/Bug.html?id=16375

[02:31] <PJF> MM_Cygwin doesn't seem to think that anything in /cygdrive/* is executable.  So maybe_command fails to identify my ghc.

[02:32] * autrijus looks at the paatch

[02:32] <PJF> It's not a patch to pugs, but it does allow it to install on my cygwin laptop, which has GHC installed in 'c:/ghc/..'

[02:33] <PJF> Or /cygdrive/c/ghc/... from Cygwin space.

[02:34] <xinming> autrijus: wikipedia is banned here. :-/

[02:35] <hcchien> ......

[02:35] <xinming> Most people knows this in China,

[02:36] <xinming> autrijus: but I wish to know, if that character is å‡¤ in Simplified Chinese.

[02:37] <autrijus> Alias: http://svn.openfoundry.org/pugs/docs/AES/S22draft.pod

[02:37] <Alias_> ta

[02:37] <autrijus> xinming: yes it is

[02:38] <autrijus> PJF: I promoted it to a patch to pugs anyway

[02:40] <autrijus> PJF: welcome to AUTHORS file -- a commit bit is on your way

[02:40] * PJF laughs!

[02:40] <PJF> Thanks Audrey. ;)  Clearly my mumble at OSDc wasn't enough to dodge the commit bit. ;)

[02:40] <autrijus> actually, why not commit yourself to the AUTHORS file

[02:41] <PJF> I will once I've got a real patch.  Pugs is giving me some silly error about not being able to find Test.pm.  I'm investigating why.

[02:42] <autrijus> okay then

[02:45] <svnbot6> r8124 | autrijus++ | * add PJF to AUTHORS file for the cygwin patch.

[02:46] <PJF> Hey, that's not letting me add myself. ;)

[02:48] <Alias_> Then remove the J before you become known as an initialled person

[02:48] <autrijus> the jfdi policy mandates that if something needs to be done and some other committer is delaying, other people just go ahead :)

[02:49] <Alias_> The brian_d_foy problem

[02:50] <PJF> I believe that brian_d_foy quite likes his name that way, provided you use the right font.

[03:00] <Alias_> Nope

[03:00] <Alias_> He's decided it was folly, and now wishing to be only known as Brian Foy

[03:00] <Alias_> Mainly because people were continuing having thinkos of "de Foy"

[03:00] <Alias_> i.e. a french-like version

[03:01] * PJF laughs.

[03:01] <PJF> Well, I don't mind PJF.  I've been enjoying it for about twelve years now.

[03:02] * PJF discovers that pugs doesn't like cygwin absolute paths, quite probably because his ghc lives in windows land.

[03:05] <autrijus> aye.

[03:06] <svnbot6> r8125 | autrijus++ | * refresh M::I to 0.40

[03:06] <autrijus> I think it boils down to that need cygpath support

[03:06] <PJF> I'm currently looking at PugsConfig::add_path to try and kludge something in to run the tests.  Is there a better place I should be looking?

[03:07] <autrijus> no I think it's the right place

[03:07] <autrijus> for some value of right place

[03:08] <PJF> Thanks!

[03:08] <PJF> (AFK a bit)

[03:08] <autrijus> thank _you_ :)

[03:09] <svnbot6> r8126 | autrijus++ | * bring more stuff forward from M::I 0.40.

[03:09] <autrijus> anyone running native win32 here?

[03:09] <autrijus> (non cygwin)

[03:11] <autrijus> would be cool to test the last few changes re Makefile.PL

[03:11] <autrijus> (should still all work)

[03:13] <Alias_> PJF: I meant more Paul J Fenwick :)

[03:13] <Alias_> autrijus: Silly, I'm 4 feet away and running native Win32

[03:13] <Alias_> of course, I write this knowing he's just left the room :/

[03:16] <PJF> I'm back, Adam W.D. Kennedy.

[03:18] <autrijus> lol

[03:18] * autrijus goes to lunch w/ Alias &

[04:24] * PJF discovers that OSSF doesn't seem to remember project invites if the invitee decides to use a different address to register.

[04:32] <ingy_> autrijus: hola

[04:36] *** ingy_ is now known as ingy

[05:43] <autrijus> ingy: still there?

[05:43] <autrijus> PJF: right. you have another account now?

[05:44] <PJF> Welcome back, Audrey A. Tang.  I registered [email@hidden.address] not [email@hidden.address]
[05:44] <PJF> The username is still 'pjf', but it doesn't recognise the invite because I used a different e-mail address.

[05:44] <PJF> But I now have tests under cygwin running happily.  Working on getting the smoke kit installed.

[05:45] <PJF> I hope Adam W. D. Kennedy provided you with a nice lunch.

[05:45] <ingy> autrijus: yo

[05:46] <autrijus> ingy: so I have this idea that makes Perl6::Spec::Operators instead of Perl6::Bible::S03 happen

[05:47] <autrijus> ingy: do you think it's sane(ish)? and if yes, are you willing to hack on it, or mark me as comaintainer of Perl6::Bible so I can refactor the things away, and let me know where the repo for that is? or should we just move the spec fetcher into pugs/docs/? (which may be better)?

[05:55] <xah> autrijus: are there many hackers in taiwan?

[05:57] <autrijus> xah: plenty of, I think

[05:58] <xah> i went back to taiwan for 6 months in 2003...

[05:58] <xah> didn't have much opportunity to meet any...

[05:58] <xah> and apparently didn't come across them in my US IT industry life

[05:59] <xah> them -> programers of Taiwan

[05:59] <xah> in fact, you are the only one i know.

[05:59] <xah> and a celebrity too.

[06:00] <autrijus> xah: well... there's plenty of them in IRCNet

[06:00] <autrijus> #bsdchat, #dot, #perl.tw, etc etc

[06:00] <xah> mmm...

[06:01] <xah> would that be ircnet.org?

[06:01] <autrijus> irc.seed.net.tw if you are in taiwan

[06:01] <autrijus> irc.xs4all.nl in .eu

[06:01] <autrijus> not sure about other places

[06:02] <PJF> Do we have many cygwin pugs hackers?  I'm happy to tweak the build process to improve cygwin support, but if we have anyone else who's been working on that I'd like to coordinate efforts.

[06:02] <autrijus> PJF: welcome aboard :)

[06:02] <autrijus> PJF: no, I think cygwin was never fully working.

[06:02] <autrijus> (you should be able to commit now)

[06:04] <PJF> Oh good (regarding both cygwin and commits).  All the problems I've hit so far with cygwin have been dealing with cygwin paths vs windows paths.

[06:04] <autrijus> I reckon it'd be the case.

[06:05] <PJF> It's not hard to win32ify the paths for pugs under cygwin, which is quick and ugly, but seems to be working.  In theory I'd expect it all to work with a cygwin-native build of Haskell, which I haven't looked for yet.

[06:09] <autrijus> not sure there is one.

[06:09] <svnbot6> r8127 | pjf++ | Pugs doesn't yet deal nicely with absolute paths under cygwin.  This

[06:09] <svnbot6> r8127 | pjf++ | kludge allows the test suite to run by also providing win32ified paths

[06:09] <svnbot6> r8127 | pjf++ | under cygwin.

[06:09] <svnbot6> r8127 | pjf++ | This does not fix general cygwin pathing issues. It only helps the

[06:09] <svnbot6> r8127 | pjf++ | test suite.

[06:09] <autrijus> ooh, a Real Commit

[06:10] <obra> heh

[06:10] <obra> pjf++ # More/Eaiser testing is always a win

[06:11] <PJF> Thanks obra.  I've still got a few tweaks to make before the smoke framework runs happily.

[06:11] <svnbot6> r8128 | pjf++ | Corrected speeling of 'PJF'.

[06:11] <obra> PJF, sorry ;)

[06:11] <Alias_> W. D. Kennedy?

[06:11] <Alias_> Like WD40?

[06:11] <PJF> Currently we still require 'setup' to be run manually during the build process under cygwin.  That shouldn't be hard to correct.

[06:11] <PJF> W.D. as in "World Domination"

[06:12] <Alias_> ah

[06:13] <Alias_> I prefer just D for Danger

[06:13] <Alias_> Especially when registering for conferences

[06:13] <dduncan> well, openfoundry is back online ... if anyone noticed it was down a half-hour ago

[06:14] <autrijus> it was, I restarted apache

[06:14] <dduncan> that's a little different ... as I recall you used to have to wait for someone else to fix that server

[06:16] <autrijus> well, the machine wasn't down, that helped :)

[06:16] <autrijus> I can't physically reboot the machine from abroad

[06:22] <dduncan> autrijus, why change your name? ... or is there an explanation posted somewhere?

[06:22] <autrijus> dduncan: nah... I'll journal about it sometime somewhere, probably.

[06:23] <autrijus> dduncan: in short, my gender role did not match my self image (and how my brain was wired since birth) for a very long time; I couldn't go on living like this so had to make the change.

[06:23] <dduncan> so the old name didn't describe you then

[06:24] <autrijus> the english one is sorta okay. the Chinese one totally doesn't work.

[06:24] <svnbot6> r8129 | pjf++ | Under Cygwin with a Win32-native GHC we find ourselves with a 'setup' that

[06:24] <svnbot6> r8129 | pjf++ | doesn't understand cygwin-flavoured paths.  This patch turns '/cygdrive/x/'

[06:24] <svnbot6> r8129 | pjf++ | style paths into 'x:/' paths on cygwin systems, causing setup to run cleanly

[06:24] <svnbot6> r8129 | pjf++ | under cygwin.

[06:25] <dduncan> okay

[06:26] * PJF goes AFK while he runs 'make smoke'.  Happy hacking.

[06:28] <wolverian> for some reason, Audrey reminds me of The Neverending Story. 

[06:29] <autrijus> wolverian: good, because it's the origin of the "autrijus" name too :)

[06:31] <wolverian> autrijus, yeah, maybe I'm thinking of that, really, not Audrey. but the Childlike Empress was played by Audrey Gardiner..

[06:31] <dduncan> do you plan to update your account names with cpan and perl.org etc as well, and IRC handles, etc?

[06:31] <dduncan> if the former are possible

[06:32] <autrijus> dduncan: no... I'm fine with the net handle "autrijus"

[06:32] <autrijus> half of the people in AUTHORS has net handles that bears no relationship with their passport name

[06:32] * obra waves

[06:32] <autrijus> yeah, like this obra here

[06:32] * obra doesn't really ever use 'obra' off IRC

[06:33] <obra> Except with a set of friends who know me primarily from online

[06:33] <autrijus> and that's how I plan to use 'autrijus'

[06:33] <dduncan> sounds good to me

[06:35] <xah> i think online handles are a plague

[06:36] <ingy> autrijus: let's discuss when we meet next. the repo is http://svn.kwiki.org/ingy/Perl6-Bible/ iirc

[06:36] <ingy> I can give you update access

[06:37] <obra> xah: why?

[06:37] <xah> no offense, but they are vestiges of childish behavior

[06:37] <xah> think of teens and script kiddies

[06:37] <ingy> autrijus: access granted (to all my code)

[06:37] <obra> xah: I disagree

[06:38] <obra> a handle is a persona. 

[06:38] <obra> They don't have to be childish personas

[06:38] <autrijus> ingy: cool

[06:38] * Alias_ waves as well

[06:38] <obra> Also, they tend to more uniquely identify individuals

[06:38] <Alias_> except in my case... :)

[06:38] <obra> There are other Jesse's involved in perl.

[06:38] <obra> But no other obra ;)

[06:38] <ingy> autrijus: hsinchu is lovely today. wish you were here :p

[06:39] <PJF> *click*  Oh!  Hi Jesse!

[06:39] <GeJ> morgen

[06:39] * Alias_ thinks about other curtises

[06:39] <obra> Also, there are some cases, like "autrijus" and "clkao" where a handle is shared by a team of 20 or 30 hackers

[06:39] <obra> Hi PJF. Do I know you? 

[06:39] <autrijus> not "team"

[06:39] <autrijus> the term is "consortium"

[06:39] <obra> apologies

[06:39] <obra> was typing too fast ;)

[06:39] <autrijus> like the "unicode" handle which is also shared by a consortium

[06:39] <Khisanth> there are 20 or 30 autrijuses hoping around the world?

[06:40] <xah> online handles are a side-effect of tech-geeking

[06:40] <Khisanth> (that would explain a lot actually)

[06:40] <autrijus> Khisanth: it's an old joke, on the same vein as Mark Jason-Dominus is actually an infinite amount of monkeys who also keep octopus as pets.

[06:40] <PJF> obra: Only in passing, and through other people.  I'm that crazy guy who runs Perl Training Australia.

[06:40] <obra> PJF: ah. Hi :)

[06:41] <xah> few simple indicators:

[06:41] <xah> * the younger they are, the more wild is their handle

[06:41] <xah> * the more tech geeker they are, the more arcane is their handle

[06:41] <PJF> obra: We know each other primarily through Skud and Robert Spier.

[06:41] <obra> Ahh. Ok :)

[06:42] <xah> * the more renowned, reputable, professional aperson is, the less his assumes a handle

[06:42] <xah> * the more sincere a person is, the less he'll use a handle

[06:42] <autrijus> xah: on the other hand... people didn't choose their name either.

[06:42] <xah> that's some general, worldly, all encompasing, indicators.

[06:42] <obra> xah: I respectfully disagree

[06:43] <Khisanth> autrijus: only till we figure out this time travel business!

[06:43] <PJF> Xah: So an old, sincere, tech-savvy person should change their name?  ;)

[06:43] <PJF> I've always wanted to be known as "Bogomip Fenwick".

[06:43] <GeJ> I never met the guy, but chromatic doesn't seem to match all the criterias

[06:43] <xah> autrijus: not clear about your point.

[06:43] <obra> GeJ: 'chromatic' isn't a handle ;)

[06:43] <xah> as for name change, yes. If people wanted to change their name, many do, and actually do so legally.

[06:44] <GeJ> obra:  would you care to elaborate? is it his _real_ name?

[06:44] <GeJ> ;)

[06:44] <obra> It's what he goes by pretty much universally. It appears on his book

[06:45] <Khisanth> now would be a good time to quote Shakespeare :)

[06:47] <autrijus> xah: the point is that for some people (like me) who started using computer at 8 and internet at 12, we can't really change our realworld name

[06:47] <autrijus> but yet we didn't choose it ourselves

[06:47] <autrijus> so something that aligns more with my self image is actually a form of sincerity

[06:47] * obra coughs at audrey

[06:48] <obra> "CAn't really change our realworld name"

[06:48] <autrijus> obra: at age 12?

[06:48] <xah> autrijus: that may be so. But look at the world, history, perspectives.

[06:48] <obra> Oh. parsefail.

[06:48] <autrijus> obra: so my point is that people usually do when they got the chance, but there are circumstances where it may not be feasible for some time.

[06:49] * obra nods

[06:49] <xah> autrijus: that's right. The point i'm making about online handles is that, it is special affinity to tech geeking.

[06:49] <obra> xah: it's also common with artists

[06:49] <xah> for instance, there's are pennames, pseudonyms etc.,

[06:49] <obra> and musicians

[06:50] <xah> each are used for a purpose. But,

[06:50] <obra> DJs

[06:50] <xah> they are different than online handles.,

[06:50] <obra> howso?

[06:50] <dduncan> xah, personally I find handles do lead to more things one has to remember, so I just use my real name or abbreviation thereof online ... never invented a handle

[06:50] <dduncan> never plan to

[06:51] <xah> dduncan: good point.

[06:51] <xah> dduncan: and a point for my point. :)

[06:52] <obra> xah: What's your real name?

[06:52] <xah> heh. Xah. :D

[06:52] <dduncan> I'll also say ... both ways ... I know for a fact that people of all ages use handles, but they seem more common the younger someone is

[06:52] <dduncan> I thought that

[06:53] <dduncan> also, the use of handles I find more common in the groups I talk to about fiction, eg X-Men, whereas programming forums there is a much greater fraction that use real names and eschew handles ...

[06:53] <xah> dduncan: exactly.

[06:53] <dduncan> I consider it more "professional" to use your real name

[06:54] <dduncan> I also consider it more professional to have your own domain name, rather than having your email at geocities or hotmail etc

[06:54] * autrijus seriously ponders /nick audrey

[06:54] * autrijus goes back hacking objspace

[06:54] <xah> not that online handles are intrinsically bad, or indicate some bad about it's user, it's just that by the nature of things it's things tech geekers or teens would do.

[06:54] <dduncan> and I practice what I preach

[06:55] <dduncan> yes, they're not a bad thing, but you will look more professional ... to the general public anyway ... using real names

[06:56] <xah> it's like dress code, a person's mannerism, his diction... gives an indicate of what the person is or is like. Online handles is just a indicator of the million.

[06:56] <dduncan> that's more the case if people looking at you are strangers ... it matters less if they know you

[06:56] <xah> yes.

[06:56] <xah> online handles can give a hint of geekdom, for instance,

[06:57] <dduncan> for example, around here I know you guys enough to know you are pros, so having nicks doesn't speak unprofessional to me

[06:57] <xah> and if it some batman or vampire, then you know its author is perhaps young, or in a jesting mood.

[06:57] <dduncan> that's a good point ...

[06:57] <xah> and of course there are exception geeks who stick with fancy handles.

[06:57] <dduncan> *what* people use for nicks says a lot about them

[06:57] <xah> exception -> exceptional.

[06:58] <dduncan> you can identify young children easily by nicks based on stories that mainly pre-teens would like

[06:58] <obra> Like the neverending story?

[06:58] <xah> hey, we make a rap duo.

[06:58] * obra ducks

[06:58] <xah> :)

[06:58] <autrijus> obra: not sure it's a preteen book :)

[06:59] <autrijus> a preteen movie perhaps.

[06:59] <obra> Fair enough

[06:59] * obra admits to not having read the book, just seen the movie

[06:59] <autrijus> fglock++ # speccing corner cases meticulously in docs/notes/laziness.txt

[07:00] <dduncan> what I mean is ...

[07:00] <dduncan> you can identify young children as they use CURRENT FADS as nicks

[07:00] <dduncan> and fads change every few years

[07:00] <xah> ninja turtle!

[07:01] <dduncan> exactly ... but that's a decade out of date

[07:01] <dduncan> plus

[07:01] <dduncan> 15 years ago

[07:01] <dduncan> now its like pokemon and such

[07:01] <xah> umm.. pokemon!

[07:01] *** PJF is now known as UberChu

[07:02] <dduncan> or in an X-Men fan group, the younger ones are more likely to be limited to a few fad-hyped characters like Wolvie

[07:02] <wolverian> I would like to state at this point that my nick has nothing to do with x-men :)

[07:02] <dduncan> older people would probably use chars that have been around for awhile and aren't the most hyped ... and there are a thousand to choose from

[07:02] <dduncan> actually, I wasn't thinking of you

[07:03] <dduncan> about half of the lists I'm on are X-Men related, and the other half Perl related

[07:03] <autrijus> wolverian: I didn't make the link before you made the connectino to wolverine :)

[07:03] *** UberChu is now known as WolverChu

[07:03] <GeJ> So you're telling me that leo@#parrot used to run in the streets with a blue mask when he was a boy? naaah. I don't buy it

[07:03] <wolverian> agh! stupid me :)

[07:03] <autrijus> GeJ: Leo is actually named Leo.

[07:03] <autrijus> (sort for Leopold)

[07:05] <GeJ> I knew... I just had to say to something. It was either some stupid/fun comment or "Does anyone live in Virginia and is skilled enough tou build an explosive device cause I could use some help..."

[07:05] <GeJ> :)

[07:05] <dduncan> fyi, if you want a sampling of X-Men fan nicknames, look no further than: http://xday.info/archives/xday2003/default.pl/view_prtcp

[07:06] <dduncan> some are real names (including mine), some not

[07:06] <GeJ> if you ever consider changing your job. DO NOT EVER go to work for a company that registers domains. 

[07:06] <GeJ> worst... job... ever...

[07:06] *** WolverChu is now known as PJF

[07:06] * PJF wonders if ext/FA-DFA/t/DFA.t is supposed to take a very very long time.

[07:07] <dduncan> fyi, getting the coding done for xday2004 is the main thing competing with my time to work on Rosetta et al

[07:07] <dduncan> yes, I'm that far behind

[07:09] <dduncan> oh, one more X-Men related thing ...

[07:10] <dduncan> http://darren duncan. net / xmen 3 funeral. jpg

[07:10] <dduncan> remove the spaces, then go there (spaces added so google doesn't index it from irc archives)

[07:11] <dduncan> I may have mentioned on IRC that I got a bit part; well I'm in that scene

[07:12] <dduncan> those of you who saw me at OSCON may be able to pick me out ... for the rest, I'll defer adding an arrow until the movie comes out, to be on the safe side

[07:12] <dduncan> one hint: left side

[07:13] <dduncan> that clip came from the trailer, released 2 days ago

[07:13] <GeJ> Ha! gotcha! the guy with the blue face? ;)

[07:13] * GeJ ducks

[07:13] <dduncan> no, that's the Kelsey Grammar guy

[07:14] <dduncan> I'm in the second row; all the main cast are in the first row, or standing

[07:14] <dduncan> or should I say 'a' second row

[07:15] <dduncan> anyway, that was just a fun little thing to do ... my career aspirations are entirely in the computer field

[07:16] <Alias_> second row on the left, 4 people in?

[07:18] <dduncan> if you must know, in the left most group, second row, closest to the isle shared by the second left most group

[07:18] <dduncan> I'm 27

[07:18] <dduncan> soon to be 28

[07:19] <Alias_> next to the lady sitting down right?

[07:20] <Alias_> Thought so

[07:20] <Alias_> (only one with glasses I could spot actually)

[07:20] <dduncan> Alias_, yes

[07:21] <dduncan> so then, I guess that for those of you that haven't met me, you know a bit of what I look like

[07:26] <Aankhen``> LMAO... http://go.reuters.com/newsArticle.jhtml?type=oddlyEnoughNews&storyID=10528873&src=rss/oddlyEnoughNews

[07:50] <PJF> Compiling Pugs.Parser      ( src/Pugs/Parser.hs, dist\build\src/Pugs/Parser.o )

[07:50] <PJF> GHC's heap exhausted: current limit is 268435456 bytes;

[07:50] <PJF> Use the `-M<size>' option to increase the total heap size.

[07:50] <PJF> Build failed: 64256 at util/build_pugs.pl line 87.

[07:50] <PJF> Should I be passing -M to ghc when it compiles setup, or does setup understand the -M switch?

[07:50] <PJF> I'm suspecting the former.

[07:50] <autrijus> line 32 config.yml

[07:51] <PJF> Oh!  That's very easy, thank-you.

[07:51] <autrijus> were you using unoptimized?

[07:51] <autrijus> no prob... but we should intelligiently incrementally rebuild and/or extend heap size

[07:51] <autrijus> ("make unoptimized" that is)

[07:51] <PJF> Nope.  Just a plain "make smoke"

[07:52] <PJF> However I expect that we want smoke to run happily without the user having to change any options.  Am I correct in that expectation?

[07:53] <autrijus> yes.

[07:53] <autrijus> definitely

[07:53] <autrijus> and so far only win32 ha

[07:53] <autrijus> s the heap flow problem

[07:54] <PJF> So we may want to conditionally increase heap memory based upon us having a win32 ghc?

[07:55] <PJF> I have noticed that restarting setup (without increasing heap size) causes it to complete the process.  So it looks like it's not completely releasing the heap in between each file compilation.  It certainly compiles a lot of files before getting to Parser.hs

[08:01] <PJF> Changing the heap size for Win32/Cygwin looks very easy, and it can still be overridden using the configuration file.   Audrey, are you happy for me to increase the default heap for building pugs under Win32/Cygwin?

[08:02] <autrijus> sure.

[08:03] <autrijus> I think heap problems are getting better for ghc 6.4.2

[08:03] <autrijus> but for the time being, adjust it as neccessary for 6.4.1

[08:03] <autrijus> (as 6.4.2 is still some time away)

[08:03] <PJF> Okay!

[08:04] <autrijus> PJF++

[08:13] <svnbot6> r8130 | pjf++ | Win32/CygWin GHC is a memory hog.  This change gives it a memory sty.

[08:13] <svnbot6> r8130 | pjf++ | config.yml continues to be respected if ghc_heap_size is set.

[08:22] <svnbot6> r8131 | pjf++ | Fixed Win32 GHC memory adjustment commited in 8130

[08:40] <gaal> hello!

[08:42] <autrijus> greetings gaal!

[08:43] <Alias_> Hail Baal!

[08:43] <Alias_> oh wait...

[08:43] <gaal> hoezzit?

[08:43] <gaal> s/e/w/; mwahaha();

[08:43] <autrijus> gaal: excellent weather and getting lotsa things done

[08:44] <gaal> great!

[08:44] <gaal> when'd be a good time to revisit prag stuff?

[08:44] <autrijus> Alias_: no chance of us getting net access tonight in $home?

[08:45] <autrijus> (also, I thought we should be heading home for christmas tree and stuff)

[08:45] <Alias_> erm...

[08:45] <Alias_> You went out today and bought a switch during business hours right?

[08:45] <Alias_> WRONG!

[08:45] <Alias_> </chewbacca>

[08:45] <autrijus> aw.

[08:45] <autrijus> gaal: so, tomorrow morning.

[08:45] <Alias_> I mean, you have net access on THAT computer

[08:45] <Alias_> Which has X-Chat I imagine

[08:45] * Alias_ chuckles

[08:45] <autrijus> eh...

[08:46] <Alias_> So the english channels you can have

[08:46] <autrijus> Alias_: do we have an extra realtek network card?

[08:46] <autrijus> random PCI ethernet card

[08:46] <Alias_> We aren't changing the hardware of my parent's computer :)

[08:46] <autrijus> well, we are already typing away on IRC when we are at arm's length from each other

[08:46] <Alias_> But then security won't care about us until 2am

[08:46] <Alias_> I figured you wanted others to evesdrop

[08:46] <gaal> autrijus: great

[08:47] <autrijus> no... it's just my interpersonal skills needs work

[08:47] <Alias_> ah

[08:47] <autrijus> gaal: anyway, so 15 hours from now

[08:48] <gaal> that's a little early on my timezone, will you be free a little later that day?

[08:50] <gaal> by this rate, it might be ready for yapc :-

[08:51] <gaal> {/)(}

[08:51] <autrijus> sure, I'll be around for ~10hrs from that on

[08:51] <gaal> okay :)

[08:52] <PJF> Gaal, you with with Alias, I take it?

[08:52] <autrijus> I'm so happy to be back to regularly-scheduled hacking :)

[08:52] <PJF> s/with/work with/;

[08:52] <Alias_> no

[08:53] <Alias_> If he did, he wouldn't need to be scheduling with autrijus in IRC :)

[08:53] <PJF> Sorry misparsed.  I shouldn't try multitasking so much.

[08:53] <PJF> I dunno.  Audrey and yourself seem to be doing a lot of communication via IRC. ;)

[08:54] <Alias_> Only for your benefit

[08:54] <PJF> Mind you, I do exactly the same with jarich.  I've usually got noise-reduction headphones and thumping techno on.

[08:54] * Alias_ finally parses the meaning from "jarich"

[08:54] <Alias_> eep

[08:55] <PJF> Sorry.  Jarich = jacinta_a_richardson.  It's french.

[08:55] <PJF> Like Brian de'Foy. ;)

[08:55] <Alias_> You listen to techno...

[08:56] <Alias_> I really should have transfered the 30gig of it I had on my laptop while I was at your house

[08:56] <Alias_> oh well...

[08:57] <PJF> Mind you, I'm much too lazy to actually pick songs myself.  I usually listen to di.fm.

[08:57] <Alias_> Ditto, but with a disk dump on :)

[09:00] <PJF> Goodness me!  The RIAA may not appreciate that.  Perhaps we'll need to give you a pirate name, like PeuceBeard.

[09:00] <PJF> Although wikipedia tells me that Puece is an island located near the Danube river, so obviously my spelling is poor today.

[09:05] <autrijus> bbiab... will be back after dinner (I think)

[09:05] <gaal> PJF: oops, sorry, missed you. Nope, I'm in .il.

[09:05] <PJF> What's our recommended way of altering tests that seem to tickle endless loops in bugs?

[09:05] <PJF> I've found that FA-DFA/t/DFA.t appears to churn on 100% cpu after the first test.

[09:06] <PJF> I want to get this smoke report finished.  I guess I can tweak it locally to a SKIP...

[09:06] <gaal> ideally fix the harness to portably catch that from without :-)

[09:06] <gaal> but yeah - skip is what we do today.

[09:07] <PJF> So use Acme::HaltingProblem to determine if the code supplied will halt, and then skip it if we know that it doesn't?

[09:07] <gaal> heh, no, use some kind of timer or OS limit

[09:07] <gaal> demo of the idea:

[09:07] <gaal> ?eval 1..

[09:07] *** evalbot_8119 is now known as evalbot_8131

[09:07] <evalbot_8131> Error:  unexpected end of input expecting end of input or term 

[09:07] <gaal> ?eval 1..Inf

[09:07] <evalbot_8131> pugs: out of memory (requested 1048576 bytes) 

[09:08] <gaal> ?eval 1 while 1

[09:08] <evalbot_8131> (no output)

[09:09] <gaal> if the harness could do that (on all platforms), swell.

[09:09] <PJF> Well, on *nix systems we can use ulimit to impose a limit on each test.

[09:09] <gaal> yes

[09:10] <PJF> On Windows systems I'm not quite as sure.  We can use alarm() to schedule a signal, although that could cause some tests to fail on slow systems.

[09:11] <gaal> if you want to impose a wall clock limit you always face that problem.

[09:11] <xinming1983> ?eval role A { method t ( *@a ) { @a }}; class B does A; class C does A { has B $.b; method BUILD { $.b = B.new; $.b.t( 'haha','hehe','xixi');}} C.new

[09:11] <evalbot_8131> Error: No such method: "&t" 

[09:11] <gaal> (and you do)

[09:11] <PJF> So far nobody's objected to me tweaking the build system.  I'll fiddle a bit and see if I get any complaints from altering test.

[09:11] <gaal> ?eval sleep 60*60*24

[09:11] <evalbot_8131> Error: No such method: "&sleep" 

[09:11] <gaal> grrr, it's unsafe. but if it weren't, evalbot would not wait forever.

[09:11] <gaal> although obviously cpu time is very low for that computation.

[09:12] <gaal> PJF: that's the spirit :-)

[09:13] * gaal frustratingly can't think of a topic for a talk for YAPC

[09:13] <PJF> How long are the YAPC slots?

[09:13] <gaal> "variable"

[09:13] <gaal> from lightning to 3 hours, if I want.

[09:13] <PJF> That should make it much easier then.

[09:14] <gaal> I'm just out of ideas :(

[09:15] <PJF> I recently gave a lightning talk at OSDc on using a few Win32 modules to automatically play minesweeper.  There seems to be an absence of good information on Win32 GUI testing, so that's something that could easily be expanded outwards.

[09:15] <gaal> two areas I don't particularly like. :-)

[09:16] <PJF> Minesweeper and testing?

[09:16] <gaal> though the talk must have been plenty fun

[09:16] <gaal> heh. no, gui and win32.

[09:16] <gaal> minesweeper's not that hot as distractions go, either

[09:16] <PJF> The talk was fantastic, although I probably did too many lightning talks at OSDc.

[09:17] <PJF> Although I think some people are expecting me to automate solitaire now. :/

[09:18] <gaal> :)

[09:22] <gaal> afk

[09:52] * PJF finds it amusing that set-infinite-recurrence.t appears to have hit an infinite loop during his smoke test. ;)

[10:10] <r0nny> yo

[10:47] <rafl> Huh.. why  s/Autrijus Tang/Audrey Tang/g?

[11:51] <PJF> Gaal: I note that you were working with a demo version of alarm() some time ago.  Did that make it ever near pugs?

[13:07] <gaal> PJF: Not really. For sure we need %*SIG, but while we're at it a variant of alarm that doesn't use signals (and is possibly thread-specific) would be nice to have.

[13:08] <gaal> %*SIG btw would be a little hard to get on win32, because the usual GHC there doesn't have the posix libs.

[13:19] <PJF> Gaal: Thanks Gaal.  I didn't think it was in PUGS yet, but thought it best I check.

[13:20] <PJF> Looks like compiling a POSIX-flavoured GHC is reasonably easy with Cygwin, but I've put the  code away for the evening.  No doubt I'll have a little more of a play tomorrow.

[13:21] <PJF> I'll probably end up writing some wrapper that terminates tests that are running too long.  At least on my system, some of the infinitely lazy tests seem to evaluate code that's infinitely eager.

[13:31] <gaal> PJF: If you do a real cygwin port (then, great!) some refactoring of Compat.hs will be necessary

[13:32] <gaal> PJF++; # POSIX stuff on win32 would rock

[13:32] <wilx> Hnnm.

[13:33] <PJF> I don't have a cygwin port of GHC yet.  However I do have a cygwin environment, and from glancing over the GHC docs it used to be built with cygwin.

[13:33] <wilx> I was not able to build GHC 6.4.1 out of the box with Cygwin.

[13:33] <PJF> It appears they stopped to provide compatibility across all systems, not just those with cygwin installed.

[13:33] <PJF> wilx: I haven't tried yet.  I'm expecting there to be some hiccups.

[13:33] <wilx> I tried that unregistered or whatever it is called build.

[13:34] <gaal> PJF: I meant pugs' Compat.hs, which kinda assumes you're either on unix or on native win32.

[13:34] <PJF> I've got pugs working under cygwin with a win32 ghc.  However it acts more or less like it's on a win32 platform.

[13:35] <PJF> There's a bunch of patches I added today to fix up some pathing oddities.  All I really want is to be able to run a smoke to completion. ;)

[13:36] <gaal> PJF: yes, cygwin as a work environment with natve win32 tools worked most of the time and broke occasionally.

[13:37] <gaal> I'm talking about pugs' internals though, which provide compat functions for things GHC doesn't provide on Windows, eg stuff to access the environment.

[13:37] <gaal> Corion wrote most of the compat code I think

[13:37] <gaal> see src/Pugs/Compat.hs

[13:38] <gaal> that file is under PUGS_HAVE_POSIX, which with luck will be true on your build; but still some things may need to be taken from there.

[13:38] <gaal> (I imagine.)

[13:45] <meppl> guten morgen

[14:25] <rafl> kane_: ping

[14:27] <rafl> kane_: I'm about to buy a new root server and it still needs a domain. How about sixpan.org?

[14:31] <PJF> Thanks Gaal!  I'll be sure to check Compat.hs in the morning. ;)

[15:52] <nemux> hi all

[16:09] <svnbot6> r8132 | fglock++ | * misc/Parser-Mini/pil2_json_emit_p6.p6 - it can now compile small programs,

[16:09] <svnbot6> r8132 | fglock++ |   except for a few syntax errors like: 

[16:09] <svnbot6> r8132 | fglock++ |   '($x,$y)=(1,2);' compiles to

[16:09] <svnbot6> r8132 | fglock++ |   '(&infix:<,>($x, $y)) = (&infix:<,>(1, 2));'

[16:26] <fglock> autrijus: isn't this supposed to work? '(&infix:<,>($x, $y)) = (&infix:<,>(1, 2));' 

[16:28] <fglock> btw, how about: '&assign((&infix:<,>($x, $y)), (&infix:<,>(1, 2)));'

[16:30] <fglock> or better: '&infix:<=>((&infix:<,>($x, $y)), (&infix:<,>(1, 2)));'

[16:48] * fglock wishes more of pugs was implemented in the Prelude

[17:17] <fglock> PJF: re set-infinite-recurrence.t - something is seriously broken - even ext/Span t/span.t enters an infinite loop. It looks like there is a problem with autogenerated methods vs. actual methods

[17:27] <Khisanth> so ... we were having an argument about writing code in multiple languages and this came up

[17:27] <Khisanth> <Khisanth> ParityBit: it only starts being fun when you mix ltr and rtl languages ;)

[17:27] <Khisanth> how does perl6 handle that?

[17:29] <integral> Khisanth++

[17:31] <Khisanth> sure that isn't likely to happen but Perl hackers seems to like doing things just because Perl allows them to :P

[17:46] <PerlJam> Khisanth: it does some really good guessing about where the end "blocks" should be and allows you to say "parse this way for the following block"

[17:46] <PerlJam> Khisanth: as far as the actual rtl part, that's just an implementation detail  ;)

[17:54] <jez> Anyone here good at Sudoku? :-)

[17:55] <Dazhbog> depends what is good ;)

[17:56] <jez> http://www.game-point.net/misc/puzzle.pdf

[17:56] <jez> how does the system determine that that's 9?

[17:56] <jez> i can see 9 or 8

[17:57] <Dazhbog> well you see the 9 has to be in either two squares in the left?

[17:57] <Dazhbog> then if you look at the leftmost vertical line..

[17:58] <Dazhbog> it is missing 2,7,8,9

[17:58] <Dazhbog> so there has to be a 9 in some of the 4 empty squares

[17:58] <jez> ohh

[17:58] <jez> how did i miss that

[17:58] <jez> damn

[17:59] <Dazhbog> it happens =)

[18:05] <jez> here's another i cant figure out

[18:05] <jez> http://www.game-point.net/misc/puzzle.pdf

[18:05] <jez> why does 5 have to go there

[18:08] * eric256 wonders what suduko is. and guesses that one labeled VERY HARD probably isn't the place to start. ;)

[18:08] <integral> the hardness is just a measure of how much backtracking you have to do

[18:08] <jez> ive been playing it a while now

[18:08] <jez> still cant get this

[18:10] <jez> there doesnt seem to be a logical way of getting that number there

[18:10] <jez> eyt there must be as that computer system doesnt do guesses/trial and error

[18:10] <eric256> hmmm rules seem simple enough.

[18:12] <eric256> possibles for that square are 3,4,5 right?

[18:14] <jez> apparently only 5

[18:14] <jez> they're the obvious only possibilities

[18:15] <pd> http://en.wikipedia.org/wiki/Sudoku <-- they go through some reasoning and algorithms here

[18:16] <eric256> i would guess you need to work out more of the board to get the point wher eyou find out why that has to be five.  i know the first two after the 1 in that row can't be 3 ;) so proud of myself. ;) 

[18:16] <eric256> seems like you could get a long ways on a board only to find out you have an impossible setup and have to back track.

[18:17] <pd> that was implied in one of the pages I saw... apparently at some point you try out a number and see where it goes, and sometimes you hit a dead end etc.

[18:18] <eric256> jez why so caught up on that specific spot? or are you just curious?

[18:19] <jez> eric@ eh?

[18:20] <jez> eric: no, that's a hint given to me by an online puzzle

[18:20] <jez> it should be possible to figure out the red number from the black numbersw, logically

[18:20] <jez> without revealing any more numbers

[18:20] <eric256> right. then you can't expect to know all the reasons behind the hint until you finish more of the puzzle. 

[18:20] <jez> eric: that's why you never guess or use backtracking

[18:20] <jez> erm

[18:20] <jez> yes you can

[18:21] <eric256> sure. if you can hold all your conclusions in your head.

[18:21] <eric256> the number in each square is affected by the numbers in its row, col, square whether they are given or not, so you will have to deduce some other locations before the reasoning behind that one becomes apparent

[18:26] <jez> yeah, i've tried

[18:26] <jez> :-)

[18:26] <jez> i cant figure it out

[18:26] <jez> i was hoping someone more clever could

[18:27] <eric256> the only other square in that colum that can be five is the second from the top, so i would assume there is some relation that means it can't be 5

[18:32] <jez> i wouldnt assume that

[18:33] <jez> there's a ton of ways of determining a number, the most ostensively easy isnt always the way

[18:33] <Dazhbog> jez: it's a "bit" hard but yes it can be determined from that

[18:33] <eric256> i didn't assume anything. well i assumed that the 5 is chosen because it is the only possiblye sqyare in that col/row that can be five.

[18:34] <Dazhbog> want me to explain that? =)

[18:34] <eric256> of course it could be something different, but then jez thats what i was saying that you would have to solve more of the puzzle before it became apparent

[18:35] <jez> dazh: sorry?

[18:35] <jez> care to explain how?

[18:35] <Dazhbog> you don't have to solve any number for sure

[18:36] <jez> even "what if?" doesnt solve it

[18:36] <Dazhbog> jez: you can deduce that in that column where the number 5 is..

[18:36] <jez> that would allow 4

[18:36] <jez> #

[18:36] <Dazhbog> jez: the top empty squares must be populated by 2 and 9

[18:37] <Dazhbog> you don't know for sure which one is in which but you don't there must be 2 and 9 in them

[18:37] <Dazhbog> hrm.. second don't = know

[18:37] <Dazhbog> still with me?

[18:37] <jez> hmm yes i see

[18:37] <jez> i'd only marked up 2 for those top ones

[18:37] <jez> not done a comprehensive markup

[18:38] <jez> starts to get very messy if you do markups for everything :-)_

[18:38] <Dazhbog> well if you mark that 2 and 9 have to be in either.. then you know there can't be any others

[18:38] <eric256> shit. dashog is a genius ;)

[18:38] <jez> there's no reasonably easy way to determine that

[18:38] <jez> i guess when i get stuck it's time to start comprehensiuvely marking up EVERY damn cell

[18:38] <jez> and it's gonna get messy

[18:38] <Dazhbog> no..

[18:38] <jez> but it's the only way

[18:38] <eric256> so the five can't be the second from the top, therefore the five is below (and my assumption holds)

[18:39] <Dazhbog> yes.. the five which is missing in that vertical row.. can't be in either of the top two

[18:39] <jez> yeah

[18:39] <Dazhbog> it cannot be in the middle bigger square because there is a 5 already

[18:39] <jez> yeah if i'd comprehensively marked those 2 up i'd have fiogured it out

[18:40] <jez> but i dont do that for all cells as it gets very messy

[18:40] <jez> heh

[18:40] <Dazhbog> um I did it in my head =)

[18:40] <jez> yes, but you knew which cell to concentrate on

[18:40] <Dazhbog> sure

[18:40] <jez> remember at this point i had the whole board and that red 5 wasnt there

[18:40] <jez> i got the computer to give a hint

[18:40] <jez> :-)

[18:40] <Dazhbog> well.. you asked why =)

[18:40] <jez> yeah

[18:40] <jez> thanks

[18:40] <Dazhbog> no problem =)

[18:40] <jez> i'd call it "very hard" or "very messy"

[18:40] <jez> one of the two

[18:41] <jez> doing that in your head is extremely tough

[18:42] <eric256> jez. why would you do it in your head? thats why man invinvted the pencil. and yes you have ot pick a square at random to start working on. I would probably pick one that had the most givens in its col/row or square

[18:44] <jez> eric: im working on this generally on a bumpy train :-)

[18:44] <jez> that's why

[18:44] <jez> :-)

[18:45] <Dazhbog> heh

[18:46] <eric256> then build your self a perl program that you can type the numbers into ;)  or just let it solve them .haha

[18:46] <Dazhbog> get a little pda or console ;)

[18:46] <Dazhbog> like gp2x =)

[18:46] <jez> eric: http://www.dailysudoku.co.uk/cgi-bin/sudoku/transcribe.pl

[18:48] <eric256> using someone elses, and making your own are different prospects ;)

[18:49] <jez> bugger it

[18:49] <jez> if i cant figure out 1 cell in half an hour i just throw it away

[18:49] <eric256> lol. i think you are missing the patiences gene ;) them japanese and there damn puzzles of patience. ;)

[18:50] <jez> the paper i get (free) is a bugger because they dont tell you the puzzle difficulty beforehand

[18:50] <jez> :-)

[18:50] <jez> they just sometimes have tough and sometimes very easy

[18:50] <eric256> so go pick one of those books full of them

[18:50] <jez> it's not as fun when you cant solve it in 30 mins

[18:51] <jez> you just end up thinking 'what a fucking waste of time, i could've done something more productive'

[18:51] <jez> or your journey ends

[19:01] * Limbic_Region idly wonders if there are any hackathons planned for the Philippines in the next 3 weeks

[19:01] <Limbic_Region> otherwise - everyone who observes a holiday in this time frame - happy holidays

[19:04] <Khisanth> you are in the Philippines?

[19:06] <fglock> autrijus: would it be possible to emit <quoted> subroutine names in PIL2-JSON? It would fix cases like 'infix:<:>', which is output like "&infix::"

[19:08] <fglock> nevermind, I found a workaroud

[19:08] <fglock> (around)

[19:12] <fglock> oops - the workaround didn't work

[19:13] <Khisanth> my $workaround is lazy; # :P

[19:13] <fglock> I tried this: '$s ~~ s:perl5{\&(.+fix:)([^:].*)}{&$0:<$1>}'

[19:14] <Khisanth> isn't that greedy match a bit dangerous?

[19:14] <Khisanth> err those

[19:15] <fglock> the problem is that it doesn't mix well with names that contain a namespace spec (::)

[19:16] <Khisanth> what sort of thing are you trying to match?

[19:17] <fglock> I'm trying to fix "&infix::", which is how pugs compile 'infix:<:>'. This is a worst-case situation - other cases work ok

[19:18] <Limbic_Region> fglock - no, I will be soon though

[19:20] <fglock> Limbic_Region: I guess you are talking to Khisanth

[19:21] <Limbic_Region> um no

[19:21] <Limbic_Region> I was talking to you but I should have been talking to Khisanth

[19:21] <fglock> :)

[19:21] <Limbic_Region> my mind is already on vacation I guess

[19:21] <Khisanth> fglock: so everything after the first : is the operator?

[19:22] <fglock> happy holidays to you too - I'll be on vacation on dec-19 :)

[19:22] <fglock> Khisanth: yes, unless you have ::, which means it is a namespace

[19:23] <Khisanth> but that would mean infix:: is completely ambigous!

[19:23] <fglock> &main::infix:x is a valid name too

[19:24] <fglock> I guess &infix::infix:infix is valid too :)

[19:24] <Khisanth> so /&[^:]+fix:(?!:).+/ ?

[19:25] <Khisanth> or does foo:infix:x mean something too?

[19:45] *** stevan__ is now known as stevan

[19:45] <stevan> autrijus: ping 

[19:47] <fglock> Khisanth: sorry, I had a long phone call - I'll test your regex now

[19:47] <fglock> hi stevan!

[19:47] <stevan> hey fglock 

[19:48] <fglock> I'm working on p6->p6 conversion - it would be nice to test this with MM

[19:48] <fglock> it compiles to "baby p6"

[19:48] <stevan> p6->p6??

[19:48] <fglock> which is closer to the native thing

[19:49] <stevan> fglock: where are the files located?

[19:49] <fglock> which means, all calls are function calls - there are no predefined primitives

[19:49] <r0nny> yo

[19:49] <fglock> see misc/Parser-Mini/pil2_json_emit_p6.p6

[19:49] <r0nny> i got a problem with pugs  6.2.10 (r8093)

[19:50] <r0nny> i call a new method in a BUILD submethod, should pass a object, but instead it saves the ref to the new method

[19:51] <fglock> stevan: please try this: ../../pugs -Cpil2-json -e 'say "hi"' | ../../pugs pil2_json_emit_p6.p6

[19:51] <stevan> fglock: cant, I dont have a recent compile of pugs

[19:51] <stevan> but I am looking over hte source

[19:51] * stevan suddenly remembers feather :)

[19:53] <r0nny> anyone got an idea what to do ? ome rev'S earlyer it worked fine

[19:54] <stevan> fglock: very interesting

[19:54] <stevan> I assume that is the PIL2 tree

[19:55] <fglock> your version have a long set of comments in the beginning? (the version in svn may be a bit old now)

[19:56] <fglock> s/have/emit/

[19:56] <gaal> hey all

[19:56] <stevan> yes it has a long set of comment at the begining

[19:56] <stevan> he gall

[19:56] <stevan> hey gaal

[19:56] <fglock> ok, I'll commit a new one in a while

[19:56] <gaal> yo stevan

[19:57] <r0nny> darn

[19:57] <stevan> so fglock, is the purpose of this just to round trip p6? or do you have a more sinister purpose in mind ;)

[19:58] <fglock> ok, comitted

[19:58] <r0nny> im allways shocked, a few days incrase the rev by 39

[19:58] <svnbot6> r8133 | fglock++ | * misc/Parser-Mini/pil2_json_emit_p6.p6 - minor fixes; debugging turned off by default

[19:59] <fglock> the new version is easily retargettable - I want to emit Parrot, but it can be used for other languages (Forth comes to mind)

[20:01] <stevan> fglock: very nice

[20:01] <stevan> how would you want to integrate the MM into this?

[20:03] <fglock> it can be integrated by writing the Prelude in p6, and then using it as the infrastructure for Classes (maybe precompiling it to PIL) - so that pugs's Classes are not used at runtime

[20:04] <fglock> it means that MM will be available to naive runtimes which don't implement objects

[20:04] <fglock> and we can work out some of the ideas in Blondie, maybe

[20:04] <stevan_> hmm

[20:05] <stevan_> this is very similar to the work on the object space

[20:05] <stevan_> and what autrijus is doing currently

[20:06] <stevan_> so you want to have the mm bootstrapping to be inside the prelude

[20:06] <stevan_> so that your generated p6 uses the metamodel,.,. and not native (aka pugs) classes

[20:06] <stevan_> right?

[20:06] <fglock> yes

[20:07] <stevan_> very nice

[20:07] <stevan_> you are bringing it around full circle :)

[20:07] <stevan_> p6 on p6 :)

[20:09] <fglock> this is a short program - I think it can even be integrated with pugs itself, such that the classes used at compile time can be written in p6!

[20:09] <stevan_> fglock: check in with autrijus about this

[20:10] <stevan_> I think maybe he will want to get the objspace in HS first

[20:10] <stevan_> but this sounds like a fairly logical next step after that

[20:10] <fglock> I was just thinking aloud :)

[20:11] <stevan_> fglock: that is always a good thing :)

[20:11] * stevan_ has to get back to $work ... cursed $client wants me to work on friday ;)

[20:11] <fglock> bye stevan

[20:12] <stevan_> later fglock 

[20:12] * stevan_ &

[20:17] <r0nny> submethod BUILD()

[20:17] <r0nny> {$.populator=new Builder::Populators::Simple::Compiled;}

[20:18] <r0nny> fails

[20:20] <svnbot6> r8134 | fglock++ | * misc/Parser-Mini/pil2_json_emit_p6.p6 - fixed some corner cases of subroutine name quoting

[20:20] <fglock> Khisanth: thanks for the help. I ended up using 3 separate regexes, but it worked

[20:21] <r0nny> omg

[20:21] <r0nny> i just realized something awfull

[20:23] <r0nny> its not a problem with refs, but a problem with inheritance - and i tihnk i just made it whorse

[20:23] <r0nny> darn the output of the perl method :/

[20:38] <r0nny> found a serious issue

[20:39] <r0nny> while the perl method returns \Builder::Builders::Simple::Compiled.new(("populator" => Builder::Populators::Simple::Compiled.new()),) the defined sub returns false

[20:40] <r0nny> (for the attr populator)

[20:41] <r0nny>  anyone got an idea ?

[20:51] <fglock> r0nny: sorry, no

[20:52] <r0nny> darn it

[20:53] <r0nny> also it fails on sone other stuff again (like the endless loops on method dispatch to undef)

[20:55] <fglock> I'm getting infinite loops too, in Span.pm and other places

[20:55] <fglock> which used to work

[20:58] <r0nny> darn it :/

[21:43] *** pearl_ is now known as pearl

[21:48] *** gaal_ is now known as gaal

[21:52] *** _SamB_ is now known as SamB

[21:59] <fglock> autrijus++ re PIL2: 'Class x { has .$a }' compiles to '(&Class((&postcircumfix:<{}>((&has(($a())))))));'

[21:59] <fglock> err, '(&Class((&postcircumfix:<{}>((&has($a))))));'

[22:06] <fglock> 'Class x { method b { 1 } }' doesn't emit code correctly yet - I'll check this later

[22:06] <fglock> &

[22:13] <Alias_> I have kidnapped your leader

[22:13] <Alias_> He is now trapped in my volcano lair

[22:14] <Alias_> If you want him back, it will cost you one MEEEEEEEEEEEELLION dollars!

[22:19] <Alias_> And for your more important leader, well... she will cost one BIIIIIIILION dollars!

[22:20] <autrijus> any rumour of my hostage situation is greatly exaggerated.

[22:21] <Alias_> YOU ESCAPED!

[22:21] <Alias_> RELEASE THE FLYING MONKEYS!

[22:23] <obra> Alias_: one meelion australian? I have that in my couch

[22:23] <Alias_> hahahahah

[22:23] <Alias_> Well it is a very very large couch

[22:58] <autrijus> stevan_: ping

[22:58] <autrijus> kane-xs_: ping

[22:58] <autrijus> gaal: ping

[23:05] <stevan_> autrijus: pong

[23:05] <autrijus> stevan_: yay

[23:05] <stevan_> can't talk really,.. just wanted to see how objspace is going

[23:05] <autrijus> stevan_: okay, a whole slew of questions...

[23:05] <autrijus> aw. :/

[23:05] <stevan_> doh

[23:05] <stevan_> hmm

[23:05] <stevan_> how long will you be awake?

[23:05] <autrijus> it's doing fine but had some design questions :) when's your next slice of time?

[23:05] <autrijus> 10hr from now on

[23:06] <stevan_> you will be awake for 10 hours? or awake again in 10 hours

[23:06] <Alias_> She'll vanish in about 2-3 hours for 1-2 hours, but otherwise around for next 12+ hours

[23:07] <stevan_> ah

[23:07] <Alias_> Having escaped the volcano lair, I must relocate to my rainforest lair

[23:07] <stevan_> :)

[23:07] * stevan_ always suspected Alias_ was the type to have a "lair" or two

[23:08] <Alias_> When one tries to take over the world, one has to deal with this sort of thing

[23:08] <Alias_> And do you have any idea how complex occupational health and safety issues are in regards to lairs?

[23:08] <Alias_> The shark tank alone! :(

[23:08] <stevan_> a true evil genious would ignore OSHA regulations

[23:08] <stevan_> :P

[23:09] <stevan_> autrijus: I need to disappear to meatspace for about 2 hours,.. but after that I will be around

[23:09] <Alias_> stevan_: That's a stereotypical view of evil geniuses!

[23:10] <autrijus> stevan_: ok, got it

[23:10] <stevan_> Alias_: you got me there,.. I suppose you are the kindler gentler evil genius type :)

[23:10] * stevan_ has gotta go before he gets in trouble &

[23:10] <Alias_> stevan_: Think of it as smart evil... knowing who not to mess with ( OH&S Inspectors)

[23:45] <PJF> Morning everyone.

[23:46] <PJF> I'm trying to determine my expectation for some tests in pugs.  ext/FA-DFA/t/DFA.t appears to go into an infinite loop after the first test.  Is my system special, or is anyone else able to reproduce this?

[23:48] <autrijus> I can reproduce this.

[23:48] <autrijus> sec.

[23:50] <PJF> Thanks Audrey.  How should I respond to infinitely-looping tests?  Obviously I should fix them when possible, or mark them to be skipped.  However should I be submitting code that causes tests to be skipped?  I'm sure we want the test suite to run without human intervention, but I feel quite uneasy committing code that would effectively remove tests.

[23:51] <autrijus> PJF: first report them here. then put a flunk() in place of the test

[23:51] <autrijus> comment out that test

[23:51] <PJF> What I really want is something that zaps tests after they've been running for a specified period without any output.  I just haven't had the time to write something that will work in a cross-platform fashion.

[23:51] <autrijus> and say fluck("infinite loop")

[23:51] <autrijus> s/fluck/flunk/

[23:51] <PJF> And commit the flunk?

[23:51] <autrijus> yes.

[23:52] <PJF> Thanks Audrey.  Shall do.

[23:53] <autrijus> I'll bbiab... gotta get objspace running to a respectable degree today

[23:53] <autrijus>  &

[23:54] * luqui is going to use fluck as his new expletive

[23:56] *** Odin-FOO is now known as Odin-LAP

[23:58] *** hlen_ is now known as hlen

