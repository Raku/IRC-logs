[00:50] <jdv79> Larry is a little confusing on this Config vars rant...

[00:50] <jdv79> his rather

[01:39] <luqui> hello?

[01:40] <luqui> hi nothingmuch

[01:40] <nothingmuch> hola

[01:40] * nothingmuch complains about a horrible evening

[01:40] * luqui complains about a horrible yesterday

[01:40] <nothingmuch> and with an agenda to actually have fun tonight, looks for something to do

[01:40] <luqui> hack pugs

[01:40] <luqui> of course

[01:40] <luqui> :-)

[01:40] <nothingmuch> well, duh, otherwise why am i here?

[01:40] <nothingmuch> ;-)

[01:45] <luqui> Well I'm just standing as the commit proxy while I do other work

[01:47] <nothingmuch> btw, what happenned to elixus.org?

[01:47] <nothingmuch> . o O ( mmm... brahms )

[01:48] <luqui> connection refused... what is elixus.org?

[01:49] <nothingmuch> autrijus et al's webspace

[01:49] <nothingmuch> where darcs repo is

[01:49] <nothingmuch> svk wiki

[01:49] <luqui> hmm...

[01:49] <luqui> well openfoundry is down

[01:49] <nothingmuch> nevermind, i can wait till that side of the world wakes up

[01:49] <luqui> so other sites that autrijus hosts might be down too

[01:49] <nothingmuch> my agenda is to learn a bit of haskell tonight

[01:49] <luqui> haskell is awesome

[01:50] * luqui learned it last week

[01:50] <luqui> er, most of it

[01:50] <luqui> er, some of it

[01:50] <nothingmuch> it was up after openfoundry was down for a while, so that's why i assumed it was unrelated

[01:50] * nothingmuch is painfully reminded of having claimed to have grokked C two years ago

[01:50] <nothingmuch> after having been leraning it for 24 hours

[01:50] <nothingmuch> i still believe i was right

[01:50] <nothingmuch> now that I work in it

[01:51] <nothingmuch> i new enough other languages to cover all it's concepts

[01:51] <nothingmuch> except that what as i was going along i kept saying to myself 'ah, this is cleaner in C'

[01:52] <luqui> haha

[01:52] <nothingmuch> well, cleaner syntactically ;-)

[01:52] <luqui> than what?

[01:52] <nothingmuch> it's an amazing language in that it defines very little, is rather strict, but allows a lot

[01:53] <nothingmuch> inherently you come to accept odd constructs

[01:53] <luqui> perl is an amazing language in that it defines everything, so you never need to define anything

[01:53] <nothingmuch> (like duff's device, funny manipulations of things being treated as something they're not via type casting)

[01:53] <luqui> well, that's the theory at least

[01:53] <luqui> like *(foo*)&mem?

[01:53] <nothingmuch> for example

[01:54] <nothingmuch> one of the first things i liked was when i learned of fscanf

[01:54] <nothingmuch> the person i helped out (that's how i started learning)

[01:54] <nothingmuch> needed to read some user data into an array

[01:54] <nothingmuch> and some vars

[01:54] <nothingmuch> and one var was a string that needed to contain two values

[01:54] <nothingmuch> or something like that

[01:54] <luqui> oh no, I might see where this is going

[01:55] <nothingmuch> anyway, i started by fscanfing every group of fields that could be read easily together in one call

[01:55] <nothingmuch> several lines into it i remembered that pointers are numbers

[01:55] <nothingmuch> in the end one call was enough

[01:56] <nothingmuch> with simple arithmetic for telling it where to put what

[01:56] * rooneg sends in another fix for given.t

[01:56] <nothingmuch> ooh fixes

[01:56] <nothingmuch> what have i done bad/

[01:56] <nothingmuch> ?

[01:56] <luqui> looking at it

[01:56] <rooneg> there are two unexpected successes that are succeeding for the wrong reason

[01:57] <nothingmuch> inside the loop?

[01:57] <nothingmuch> that was fixed

[01:57] <nothingmuch> and a new test was made to test that bug

[01:57] <rooneg> i'm still seeing the problem now...

[01:57] <nothingmuch> i think it wasn't applied

[01:57] <rooneg> ahh

[01:57] <luqui> I wonder why ?? doesn't work...

[01:58] <luqui> or maybe it's the wrong precedence

[01:58] <nothingmuch> i concluded it was a parse error

[01:58] <nothingmuch> the problem is that 'my $t = (1 == 1) ?? "foo" :: "bar"' sets $t to "foo"

[01:58] <nothingmuch> but if you drop the my, like in that example when it was declared in another scope

[01:59] <nothingmuch> then it gets set to the result of (1 == 1), and the ?? :: isn't even evaluated

[01:59] <nothingmuch> t/op/assign.t tests for that

[01:59] <luqui> weird

[01:59] <nothingmuch> Message-Id: [email@hidden.address]   

[01:59] <luqui> and it's a parse error if you enclose the ??:: expr in parens

[01:59] <nothingmuch> that's the submission of that test

[01:59] <nothingmuch> in p6v

[01:59] <nothingmuch> that's another bug

[02:00] <nothingmuch> tested in t/03operator.t at the top

[02:00] <luqui> p6v

[02:00] <nothingmuch> first todo

[02:00] <luqui> ?

[02:00] <nothingmuch> p6c, sorry

[02:00] <nothingmuch> ok, i forgot to submit the test to given.t

[02:00] <nothingmuch> sending now

[02:02] <nothingmuch> rooneg - did you commit? if you did i will not send

[02:02] * rooneg doesn't have commit access

[02:02] <nothingmuch> no reason to create a conflict

[02:02] <nothingmuch> ok

[02:02] <luqui> so should I go with nothingmuch's test?

[02:02] <nothingmuch> well, there's two things

[02:02] <nothingmuch> there's that test

[02:02] <nothingmuch> which is not related

[02:03] <nothingmuch> and a fix to given.t which i'm submitting right now

[02:03] <luqui> okay, so both

[02:03] <nothingmuch> (darcs is hanging trying to fetch _darcs/prefs/email from autrijus's repo, which is down)

[02:04] <rooneg> has someone already looked at the unpexpected successes in shift.t yet?  figured i should check before i start looking into it this time ;-)

[02:04] <nothingmuch> i think stevan did earlier today

[02:05] <luqui> rooneg: thanks, applied

[02:05] <rooneg> bah, not interesting anyway, it's just removing some todos, nothing fun in this one ;-)

[02:06] <nothingmuch> ok, after some fudging with darcs a bit, the patch was sent to p6c

[02:06] <nothingmuch> (for given.t)

[02:06] <rooneg> luqui: thanks

[02:08] <luqui> nothingmuch: how the heck do I apply that?

[02:08] <nothingmuch> uh

[02:08] <nothingmuch> i can make a unified diff

[02:08] <nothingmuch> =/

[02:08] <rooneg> if anyone feels like fixing it, svn:ignore could stand to be updated in src (add pugs_version.h, pugs_config.h, and Config.hs) and ext/Kwid (add pm_to_blib), i'd send a patch, but it's not like patch'll understand it anyway

[02:09] <luqui> nothingmuch: please do :-)

[02:09] <nothingmuch> *disgruntle*

[02:09] <luqui> er wait

[02:09] <luqui> I have darcs

[02:09] <luqui> I just don't know how to use it

[02:09] <nothingmuch> i thought autrijus set stuff up for this

[02:09] <nothingmuch> ah

[02:09] <luqui> maybe he did, I know nothing about it

[02:09] <nothingmuch> pipe the whole email or just the attachment to darcs apply

[02:09] <nothingmuch> it will just work with either

[02:10] *** edgewalk1r is now known as edgewalker

[02:10] <luqui> ohhh... but my repo is svn

[02:10] <luqui> it needs to be a darcs repo?... hmm

[02:11] <nothingmuch> uhuh

[02:11] <nothingmuch> i'll make a unidiff

[02:11] <luqui> thanks

[02:13] <nothingmuch> should i mail to p6c? make available by http?

[02:13] <nothingmuch> mail to you

[02:13] <nothingmuch> ?

[02:13] <luqui> to me is fine

[02:14] <nothingmuch> oh, crap

[02:14] <nothingmuch> rooneg: your fix is correct

[02:15] <luqui> hmm?

[02:15] <nothingmuch> #3 should also be done

[02:15] <nothingmuch> # TODO confusement - i didn't realize that

[02:15] <nothingmuch> (i didn't see it not working on my Test::Harness, that is)

[02:16] <luqui> I applied s/#/g/ for that region, against the patches instructions

[02:16] <luqui> shouldn't I have?

[02:16] <rooneg> that seems fine, i should have noticed the other #, but i wasn't paying attention

[02:17] <luqui> good

[02:18] <rooneg> if i had been paying attention, i would have noticed that it misspells "interleaved" three times ;-)

[02:18] <nothingmuch> you should have

[02:18] <nothingmuch> that part i would have noticed

[02:18] * nothingmuch has the documents to prove he's dyslexic

[02:18] <nothingmuch> will fax on demand

[02:19] * rooneg can't give anyone any crap about being able to spell/type correctly

[02:19] <nothingmuch> for me the test name's only importance is to be distinct enough to grep for quickly

[02:20] <nothingmuch> not that i'm well behaved in that respect at all times

[02:20] <nothingmuch> i tend to forget and make them to englishy

[02:21] <luqui> nothingmuch: applied

[02:21] <nothingmuch> wait, if you applied rooneg's second given.t fix which is the same as mine you should have a conflict

[02:21] <luqui> i did

[02:22] <luqui> i kept his

[02:22] <nothingmuch> are you sure you're not lying?

[02:22] <nothingmuch> HUH?!

[02:22] <nothingmuch> ok =)

[02:23] <luqui> okay, back to hard work

[02:23] <luqui> ...on my game

[02:23] <luqui> :-p

[02:24] <nothingmuch> =)

[02:41] * rooneg promises he'll get bored and let luqui get back to his game soon enough

[02:41] * nothingmuch just had an epipheny

[02:41] <nothingmuch> foldr is sheer genius

[02:41] <nothingmuch> if i got it right

[02:42] <luqui> hehe

[02:42] <luqui> no, it's okay

[02:42] <luqui> I'm not really working on it... no inspiration

[02:42] <luqui> I think I'm going to try to implement your .kv method now

[02:42] <rooneg> yay!

[02:43] <rooneg> i must admit, this pugs thing is addictive.  enough of it works that you can have fun, and when you find something that doesn't at least you can write a test and feel like you've accomplished something ;-)

[02:43] <nothingmuch> functional programming is so pretty

[02:44] <luqui> nothingmuch: until you try to do something hard

[02:44] <luqui> er, s/you/I/

[02:44] <nothingmuch> well, my problem is that i've never actually programmed in FP yet

[02:45] <nothingmuch> i love closures in perl

[02:45] <luqui> as Larry says, many paradigms have very applicable situations, but procedural maps the closest to how our brains usually work

[02:45] <nothingmuch> but they never add up

[02:45] <nothingmuch> they always account for small individual parts of my systems

[02:45] <luqui> me too

[02:45] <nothingmuch> i've gone through some SICP lectures (video, from MIT)

[02:45] <luqui> I write my grammars functionally

[02:45] <nothingmuch> and it all seems to fragile

[02:46] <luqui> you can design well with it, it just takes a different kind of brane

[02:46] <nothingmuch> but i do keep thinking "oh this is so nice"

[02:46] <luqui> like autrijus's

[02:46] <rooneg> the trick is to harness people like him and point them towards interesting problems you want solved

[02:46] <nothingmuch> i got flamed for plagiarising MAPL

[02:46] <nothingmuch> crap

[02:46] <nothingmuch> why didn't the other line get in

[02:47] <nothingmuch> i said before '/me's first post to perlmonks was when he got closures'

[02:47] <nothingmuch> i never seen anything like that before, and said 'woow, i've got to try to make this useful'

[02:47] <nothingmuch> so i took the approx matching algorithm in MAPL and made it faster by constructing matchers

[02:48] <luqui> mapl?

[02:52] <rooneg> should i be able to declare a variable inside a loop?  i.e. loop (my $i = 0; $i < 10; ++$i) { }

[02:52] <nothingmuch> i was amazed by how hard it was to make people realize that it wasn't the point of the post

[02:52] <nothingmuch> mastering algorithms with perl

[02:52] <nothingmuch> i think that node still has a rep of -2 or so... what a way to start, eh?

[02:56] * crysflame &

[02:56] <crysflame> is MAP out yet?

[02:56] <luqui> rooneg: you can declare a variable anywhere

[02:56] <luqui> my is just a prefix operator (with some compile-time magic)

[02:56] <nothingmuch> in YAHT

[02:56] <nothingmuch> exercise 3.5

[02:56] <rooneg> ok, in that case here comes a test ;-)

[02:57] <nothingmuch> is foldr max 1 [ ] the way the author means to extrac the max out of a list?

[02:58] <luqui> or 1 otherwise, I think

[03:00] <nothingmuch> luqui: who were you talking to?

[03:01] <luqui> you

[03:01] <nothingmuch> in that case, explain what you meant... =)

[03:01] <luqui> assuming [ ] means [...]

[03:01] <nothingmuch> yes

[03:01] <nothingmuch> (you can assume values of list are >= than 1)

[03:02] <luqui> then it's just the max

[03:02] <luqui> but if the whole list is < 1, then 1 is returned

[03:02] <nothingmuch> right

[03:04] <ingy> hola

[03:04] <nothingmuch> morning

[04:40] <buu> Yay soon it's going to be illegal to link to a candidates website!

[04:53] <luqui> hmm?

[05:00] <buu> Hrm. Is `*bold*` supposed to be bold and code? Or just code?

[05:27] <luqui> rooneg: you there?

[05:28] <luqui> oh, no, of course not, you left

[05:29] <luqui> Many new features in new r571

[05:29] <luqui> there was a wealth of unimplemented functionality hidden in that little .kv test

[07:39] <luqui> it's a friggin mortuary in here

[07:41] <luqui> hi chansen

[07:41] <chansen> hi luqui 

[07:46] <ingy> hi luqui 

[07:46] <ingy> buu: just code :)

[07:48] <luqui> hi ingy 

[07:48] <ingy> buu: `*just code*`  *`bold code`*

[07:48] <crysflame> .

[07:49] <luqui> confusing

[07:49] <ingy> not really

[07:49] <luqui> oh, just code with the stars included

[07:49] <luqui> no, not confusing

[07:49] <ingy> luqui: correct

[07:49] <ingy> `a*b*c=d`

[07:50] <ingy> but that is contrived, because a*b*c has no bolding

[07:50] <ingy> 'a *b* c' has bolding

[07:51] <luqui> how might you get a<b>b</b>c ?

[07:51] <ingy> 'a *b *c' does not

[07:51] <ingy> luqui: a{*b*}c

[07:51] <luqui> nice

[07:51] <luqui> I like pod, but kwid is just like it

[07:51] <ingy> without the braces there are "cuddling" rules

[07:51] <luqui> only better, it seems

[07:52] <luqui> no complex table formatting, right?

[07:52] <luqui> and no automatic doc generation, right?

[07:52] <ingy> kwid is just cleaner pod

[07:52] <luqui> great

[07:52] <ingy> well .table

[07:53] <buu> er wait

[07:53] <buu> What?

[07:53] <luqui> but I'm just making sure we're not falling into the html trap

[07:54] <ingy> well there is no current plans for .table

[07:54] <ingy> I'm just saying you could do it

[07:55] <buu> So wait: `foo *bold* baz`; has no bolding, but *`foo`* has bold and code?

[07:56] <ingy> buu: yes

[07:56] <buu> @

[07:56] <buu> !!!

[07:57] <ingy> buu: how else would you do it?

[07:57] <buu> Er, `*foo*` would be bold and code, *`foo`* would be the same

[07:57] <luqui> how would you represent the latest syntax

[07:57] <luqui> *foo*

[07:57] <buu> Er, what?

[07:57] <luqui> *foo* = 3, for instance

[07:58] <buu> I'll answer

[07:58] <luqui> a new type of variable with stars on either side

[07:58] <luqui> wait for it....

[07:58] <buu> I was losing in war3 =[

[07:58] <luqui> huh?

[07:59] <buu> 'huh?' what?

[07:59] <luqui> i don't understand your last utterance

[07:59] <buu> I was losing in my game.

[07:59] <buu> Warcraft3.

[07:59] <ingy> a bold phrase is subparsed. a code phrase is not. I think the makes the most sense

[07:59] <luqui> war3, right

[07:59] <luqui> exactly

[08:00] <luqui> that's how it is

[08:00] <luqui> `code`  *bold*   *`boldcode`* `*neither*`

[08:00] <ingy> wwpd?

[08:01] <buu> heh

[08:01] <ingy> C<<foo B<bold> bar>>

[08:01] <buu> When you put it like that, it makes more sense

[08:01] * luqui & reboot

[08:02] <ingy> I think that means `foo B<bold> bar`

[08:04] <buu> ingy: Duh, you'd say: \*foo* = bar

[08:05] <ingy> you mean `\*foo* = bar`

[08:05] <buu> if necessary

[08:05] <ingy> that is a possibility

[08:06] <ingy> I'm not convinced that having bold inside code is what people want, but perhaps

[08:06] <ingy> I can see the possibility anyway

[08:07] <ingy> to be determined...

[08:07] <ingy> not going to decide tonight

[08:09] <ingy> it might actually be nice to italicize parts of code

[08:09] <buu> Well, yeah. I was approaching it from more of a consistency stand point

[08:09] <ingy> I'm not so concerned about that

[08:09] <buu> I noticed

[08:10] <ingy> there are not 1000 phrase formats, there are about 6

[08:10] <ingy> bold italic code asis link named

[08:11] <luqui> asis?

[08:11] <ingy> asis is definitely not subparsed

[08:11] <ingy> { *i* *like* *stars* }

[08:12] <ingy> starting tag is '{ '

[08:12] <ingy> ending is ' }'

[08:12] <luqui> does it go in tt font

[08:12] <ingy> no

[08:13] <ingy> it just means, leave me alone, I don't have any formatting codes, even though it looks like I do

[08:13] <ingy> asis

[08:14] <ingy> named is {file: /etc/passwd}

[08:14] <luqui> and that does...

[08:15] <ingy> it is the equivalent of whatever pod's F<...> is

[08:15] <luqui> if only I knew what that was

[08:15] <crysflame> interpolate slurp file

[08:15] <ingy> kwid needs to support all of pod

[08:16] <ingy> crysflame: really??????!!!!

[08:16] <crysflame> what?

[08:16] <ingy> interpolate slurp file?

[08:16] <ingy> I doubt it

[08:16] <crysflame> oh, wrong though path. i thought F<> was interpolation of content, not "this is a filename". sorry.

[08:17] <crysflame> can't say i've ever used it

[08:17] <ingy> ah

[08:17] <ingy> I think it is total pod cruft

[08:17] <luqui> we could petition (read: mention to) Larry to remove it altogether

[08:17] <ingy> that's why I support it with the ugly {file: ...}

[08:18] <crysflame> semantic distinction between <b> <em> <strong> reminds of of C<> F<>

[08:18] <luqui> why not {{FILENAME: }

[08:18] <ingy> heh

[08:18] <luqui> to stay with perl 6 vogue of making things you're not supposed to use big and ugly

[08:18] <ingy> {THIS_IS_A_FILE_NAME_DUDE: ...}

[08:19] <luqui> something that long is guaranteed to remove your hard drive if the file doesn't exist

[08:19] <ingy> compared to the rest of kwid, {file: } is ugly

[08:20] <ingy> hmmm, tempted to support #comment# inline

[08:20] <ingy> nah, yagni

[08:20] <crysflame> {# ... #}

[08:21] <ingy> crysflame: aye. I started with that, then reasoned that I could also support the simpler form

[08:21] <ingy> but it is yagni

[08:22] <ingy> ok, I have a BIG RACE tommorrow

[08:22] <ingy> wish me luck

[08:22] <luqui> what kind of race?

[08:22] <ingy> 72 mile bike race

[08:22] <ingy> with the fastest people in the NW

[08:22] <luqui> sweeet

[08:22] <luqui> good luck

[08:22] <ingy> thanks

[08:23] <ingy> I'll probably be dead this time tommorrow

[08:23] <ingy> at least I'll feel like it

[08:23] <ingy> knock on iBook

[08:24] <crysflame> nice

[08:24] <crysflame> good luck

[08:24] <ingy> have fun y'all

[08:26] <luqui> hiya metaperl

[08:26] <metaperl> hi luqui

[08:27] <luqui> wish ingy luck on his 72 mile bike race tomorrow

[08:27] <metaperl> where does he live?

[08:27] <luqui> ummmmmm

[08:27] <luqui> somewhere in the northwest?

[08:28] <metaperl> he used to work at activestate . i guess he quit... oh well, I will chat with him sometime and see

[08:58] <cls_bsd> ossf is back?

[08:58] <cls_bsd> ping alive

[09:02] <luqui> ossf?

[09:03] <cls_bsd> well, tha't means svn is back

[09:03] <metaperl> openfoundry is back?

[09:03] <luqui> openfoundry doesn't seem to be back

[09:04] <scw> But I still cannot pull..

[09:04] <metaperl> what's the difference between say and print?

[09:04] <scw> end-of-line?

[09:04] <luqui> one newline

[09:04] <scw> ossf response to my ping all day but I cannot touch the reposetry..

[09:05] <luqui> openfoundry.org says that it will be back on 3/6

[09:05] <luqui> you

[09:05] <luqui> 're using the repo at svn.perl.org, right?

[09:05] <scw> now, yes.

[09:06] <metaperl> we need a pastebot here again

[09:06] <scw> Who can commit to svn.perl.org?

[09:06] <luqui> me

[09:08] <metaperl> does anyone know the invite syntax

[09:08] <Somni> it's not working

[09:08] <Khisanth> /invite nick channel

[09:08] <luqui> what is not working somni?

[09:08] <Somni> oh, you may have to be an op

[09:08] <metaperl> oh

[09:08] <Somni> /invite pasteling #perl6

[09:09] <luqui> hmm... we have no ops

[09:09] <Khisanth> you do ..

[09:09] <Khisanth> hrm see if any oper is alive?

[09:09] <buu> hrm

[09:09] <buu> what?

[09:09] <buu> I can put a pastebot in here

[09:10] <metaperl> luqui, in this code you wrote: http://nomorepasting.com/paste.php?pasteID=33434

[09:10] <metaperl> can you explain what &?SUB does

[09:10] <luqui> it refers to the innermost lexical sub

[09:11] <luqui> in this case, &foo

[09:11] <luqui> it is necessary in case that sub is lexical (but it only applies to subs that were declared with "sub", or "method", etc.  not parameterized blocks)

[09:11] <metaperl> can a lexical sub be anonymous?

[09:11] <luqui> s/lexical/anonymous

[09:12] <metaperl> oh, yes. can an anonymous sub be lexical? I think the answer is yes

[09:12] <luqui> yeah

[09:12] <buu> hrm

[09:12] <buu> weird

[09:13] <buu> There it is

[09:13] <buu> metaperl: Your pastebot =]

[09:14] <erxz_paste> "buu" at 24.206.236.187 pasted "testing" (1 line) at http://erxz.com/pb/503

[09:14] <metaperl> thanks buu

[09:14] <buu> Np.

[09:14] <buu> If it goes down, blame dngor and or poe.

[09:14] <buu> oh wait

[09:15] <buu> sigh

[09:15] <metaperl> buu, so you play some sort of computer game?

[09:15] <buu> metaperl: Yes.

[09:15] <metaperl> which one?

[09:15] <metaperl> I play myth

[09:15] <buu> I've been playing war3 recently.

[09:15] <metaperl> warcraft?

[09:15] <buu> yes.

[09:15] <metaperl> hmm. I hate having to build all those things

[09:16] <metaperl> the controls seemed complicated but I never tried war3

[09:16] <metaperl> is there a demo online somewhere?

[09:16] <buu> Probably.

[09:16] <metaperl> yeah, the demo is at download.com

[09:16] <metaperl> http://www.download.com/3120-20_4-0.html?qt=warcraft&tg=dl-2001&search.x=0&search.y=0&search=+Go%21+

[09:16] <buu> Amazing.

[09:17] <buu> But it's sleepy time for buu.

[09:17] <buu> Nighty night.

[09:17] <metaperl> wait a minute there are a lot of war3

[09:17] <metaperl> which one should I get?

[09:17] <buu> uh

[09:17] <buu> What?

[09:17] <metaperl> look at that URL

[09:17] <buu> sigh

[09:17] <buu> perlbot shorten it

[09:17] <perlbot> Shortened URL: http://xrl.us/fcbp

[09:17] <metaperl> there is LOTR, chaos,

[09:17] <buu> WAR3

[09:17] <buu> weird

[09:17] <buu> Get reign of chaos.

[09:18] <metaperl> ok

[09:18] <metaperl> thanks

[09:18] <buu> I can't believe you've never heard of war3 =/

[09:18] <metaperl> good night

[09:18] <metaperl> heard of it

[09:18] <metaperl> heard of starcraft, etc

[09:18] <buu> It's by freaking blizzard.

[09:18] <Juerd> Who wants free keyboards?

[09:18] <metaperl> never could get into them

[09:18] <buu> Who made the best game ever.

[09:18] <buu> Juerd: Why do you have free keyboards?

[09:18] <Juerd> IBM, black, brand new, PS/2, dutch layout

[09:18] <metaperl> best game ever?

[09:19] <buu> metaperl: Starcraft dude.

[09:19] <metaperl> I am a Myth player

[09:19] <Juerd> buu: Because nobody on this planet uses the dutch layout

[09:19] <buu> Juerd: Reasonable.

[09:19] <Juerd> That's no problem if you touch type

[09:19] <buu> Yes, but can it program perl6 ?!

[09:19] <buu> Heh, did you see that link to the giant keyboard

[09:20] <Juerd> It can, actually

[09:20] <Juerd> If you use the Dutch layout, you even have buttons for 􏿽xAB and 􏿽xBB.

[09:20] <Juerd> No

[09:20] <buu> Oh. It had like 800 keys.

[09:20] <Juerd> Is it a Chinese keyboard?

[09:20] <buu> No actually I think it was a musical keyboard.

[09:20] <scw> Still not enough for unicode user!!!

[09:21] <luqui> Mario 1 you guys

[09:21] <metaperl> Mario 1?

[09:21] *** buu is now known as buu_NOTHEREANYMO

[09:22] <luqui> best game ever..?

[09:22] <metaperl> games: another reason to have a PC instead of Linux :)

[09:22] <metaperl> what is Mario 1? that's your favroite game?

[09:22] <luqui> you mean windows?

[09:22] <Juerd> "PC instead of Linux"?

[09:22] <metaperl> I liked Escape from Monkey Island

[09:22] <Juerd> I have a PC that runs Linux!

[09:22] <luqui> no, it's the best game ever

[09:22] <metaperl> yes, I have windows

[09:22] <luqui> i didn't say it was my favorite

[09:23] <metaperl> Mario Brothers?

[09:23] <metaperl> is there a PC demo of it?

[09:23] <luqui> and I think that is "_the_ reason to have windows instead of linux"

[09:23] <luqui> you could probably find a nintendo emulator somewhere

[09:23] <Juerd> Why instead of?

[09:23] <metaperl> you can always run vmware

[09:23] <luqui> if you're going to pick one

[09:23] <Juerd> They can very well be installed on the same pc at the same time.

[09:23] <metaperl> double boot is passe'

[09:23] <metaperl> vmware r0x

[09:23] <Juerd> luqui: Then there's still vmware, cooperative linux, wine, etc

[09:24] <metaperl> cooperative linux? never heard of it

[09:24] * luqui doesn't like vmware or wine

[09:24] <Juerd> I run MSIE under Linux; works very well, except that it's still MSIE, of course.

[09:24] <metaperl> any URL to Mario 1?

[09:24] <Khisanth> scw: you should try that keyboard with 72 keys :)

[09:24] <luqui> but has dual boot, and (painstakingly) reboots

[09:24] <scw> Khisanth: Which one?

[09:24] <Juerd> metaperl: coop. linux is linux in windows

[09:24] * luqui only played mario on the original nintendo

[09:24] <Juerd> a linux kernel that runs as a windows service

[09:24] <Juerd> It's efficient

[09:24] <luqui> oh, neat

[09:25] <feber> luqui: http://colabti.de/irclogger/irclogger_log/irclogger?date=2005-03-05,Sat&sel=3

[09:26] <Khisanth> scw: http://www.engadget.com/entry/1234000870034519/ this one

[09:27] <luqui> feber, I was talking about the index page

[09:27] <luqui> of all channels logged

[09:27] <luqui> but it appears to be fixed

[09:29] <Khisanth> luqui: http://www.zophar.net/unix/nes.html NES emulators :)

[09:29] <feber> luqui: nothing was broken. :)

[09:29] <luqui> hmmm

[09:29] <luqui> okay i'll believe you, I can't recreate my mental state

[09:29] <luqui> that keyboard is frightening

[09:30] <metaperl> is there really no cleaner way in Perl6 to read from STDIN thatn my $line = =$*IN

[09:30] <luqui> man if I could get fast at that, that would rock.  but I've been playing the "regular" piano for long enough that I'd rather not learn a new instrument...

[09:30] <luqui> metaperl how is that dirty?

[09:30] <metaperl> compare with my $line = <STDIN>;

[09:30] <luqui> (you can also s/\*//)

[09:30] <luqui> how is that clean?

[09:31] <metaperl> two equals signs looks weird

[09:31] <metaperl> why are there 2 equals signs?

[09:31] <luqui> one for the assignment, the other for the "iterate" operator

[09:31] <luqui> which looks like two lines

[09:31] <luqui> but please, if you have other suggestions, shoot

[09:32] <luqui> that's why we're redoing perl: to fix our mistakes

[09:32] <metaperl> luqui, I think you will like Ehren Starks: http://magnatune.com/artists/ehren

[09:32] <scw> Khisanth: "But, like decimal time, and the Dvorak computer keyboard, ..." yes, I'm the one use dvorak but may not try this :p

[09:32] <metaperl> that is some of my favorite piano music these days

[09:32] <Khisanth> scw: but it has enough keys!

[09:33] <luqui> I'm kinda a classical guy, but I like the occasional venture into modern music.  I'll have a listen

[09:33] *** feber is now known as feb

[09:33] <scw> Khisanth: Er, no. You still have to combine several keys together to type a Chinese charactor :)

[09:34] <Khisanth> hmm true

[09:34] <luqui> man she's a good cellist

[09:34] <Khisanth> but you would have to start growing extra fingers too

[09:35] <metaperl> why did ? : becomes ?? ::

[09:35] <luqui> because ? : were too short for what they were doing

[09:35] <luqui> they just blended in with their surroundings when they should be standing out

[09:35] <luqui> that and we wanted ? and : for other things

[09:35] <Khisanth> is ? : being used for something else?

[09:35] <metaperl> how about $IN.next to iterate an iterator? just brainstomring

[09:35] <luqui> : is used in every context you can think of

[09:36] <luqui> ? isn't anything in operator position yet

[09:36] <metaperl> oh in the new Perl it is . I see

[09:36] <Khisanth> that non blending thing actually makes a lot of sense ...

[09:36] <metaperl> I thought it would be wild to have a different sigil for junctions:

[09:36] <luqui> I've been arguing that for some time

[09:36] <metaperl> my ?password = none(qw(a b c)) :

[09:37] <metaperl> $password eq ?password;

[09:37] <luqui> ahh, but ? does mean something in term position like that

[09:37] <metaperl> oh really?

[09:37] <luqui> yeah, it's the "boolify" context operator

[09:37] <luqui> along with unary + and unary ~

[09:37] <metaperl> boolify? lol

[09:37] <Khisanth> "no, you can't have a junction sigil because there aren't enough keys on the keyboard!" :p

[09:37] <metaperl> i've been wondering what +@array_name does

[09:38] <luqui> it's just an explicit way to get the length.  puts it in numeric context

[09:38] <metaperl> scalar @array_name

[09:38] <metaperl> @array_name.elems

[09:38] <luqui> Khisanth: hehe.  I've actually been arguing a secondary sigil

[09:38] <luqui> metaperl that'll do it even more

[09:38] <Khisanth> like $$ ?

[09:39] <luqui> like $~

[09:39] <luqui> it looks like a "tie" of sorts. 

[09:39] <lightstep> lazy binding?

[09:39] <luqui> I've been arguing it for junctions and other tied things

[09:39] <luqui> lightstep: hmm?

[09:39] <cls_bsd> ossf--

[09:39] <lightstep> in haskell, ~(a:b) binds a and b lazily

[09:39] <Khisanth> metaperl: shouldn't scalar @array; return a ref to the array?

[09:40] <luqui> oh...

[09:40] <metaperl> a ref?

[09:40] * luqui doesn't know that part of haskell yet

[09:40] <lightstep> (in pattern position_

[09:40] <luqui> isn't everything lazy in haskell by default?

[09:40] <metaperl> is ~(a:b) haskell or perl?

[09:40] <lightstep> it's a pattern matching thingy (in haskell)

[09:40] <luqui> haskell

[09:41] <metaperl> what does the tilde do?

[09:41] <lightstep> it makes the compiler stop checking for patterns after that obe

[09:41] <metaperl> : is the cons operator

[09:41] <lightstep> so if it doesn't fit, it's an error

[09:41] <luqui> hmm

[09:41] <Khisanth> metaperl: maybe it has changed but the last time I was reading through one of the exegeses, it was $array_ref = @array;

[09:42] <metaperl> oh I see

[09:42] <metaperl> $array_ref = \@array

[09:42] <luqui> scalar @array does it too

[09:42] <metaperl> was just fine

[09:42] <metaperl> why is everything changing?

[09:42] <luqui> hehe, the newcomer attack

[09:42] <Khisanth> ask Mr. Wall :)

[09:43] <metaperl> no, this is a community rewrite of Perl

[09:43] <luqui> I'm part of the community

[09:43] <luqui> I love where it's going

[09:43] <Khisanth> ask Mr. RFC?

[09:43] <metaperl> there are going to be many distraught people where I work... I can see it now

[09:43] <luqui> basically, Perl 6 is a different language from Perl 5, it just feels the same and is based on the same principles

[09:44] <metaperl> people at my company are going to code in Perl5 style in Perl6. it's going to force me to switch jobs

[09:44] <Khisanth> it's not like p5 will disappear instantly

[09:44] <luqui> we're trying pretty hard to make the migration process as easy as possible

[09:44] <metaperl> my boss is a php-weenie who programs in Perl like PHP

[09:44] <Juerd> luqui: But don't say that when Damian's listering :)

[09:44] <metaperl> and he tries to dumb me down to his level

[09:44] <Juerd> luqui: Damian keeps trying to convince people that it's not a new language :)

[09:44] <luqui> Juerd: well it is.

[09:45] <luqui> those of us on the design team can think otherwise

[09:45] <Khisanth> well more like a mutant p5 :)

[09:45] <luqui> because we've been learning it for three years

[09:45] <metaperl> it's an effort in perfectionism

[09:45] <metaperl> instead of gradual improvement

[09:45] <Juerd> metaperl: It's gradual, but without the software.

[09:45] <metaperl> lol

[09:46] <lightstep> what is the context thingy? are expressions evaluated with thought about their context? how is this reflected in pugs?

[09:46] <Juerd> It's not as if Perl 6 will just leap into existence

[09:46] <metaperl> how did Autrijus manage to singlehandedly outstrip the whole ponie/parrot team ?

[09:46] <Juerd> lightstep: Context is the same thingy as it always was, but more complex and detailed when you need that.

[09:46] <nothingmuch> morning

[09:46] <metaperl> he has done so much in under 1 month

[09:46] <lightstep> Juerd, i never learned perl

[09:46] <Juerd> metaperl: Some other kind of sugar cubes

[09:46] <luqui> he's been working constantly, and we all have other jobs, and we're all lazy slackers

[09:47] <nothingmuch> luqui: are you human and not some cabbage or something?

[09:47] <Juerd> lightstep: Then now is a good moment to start learning it :)

[09:47] <luqui> nothingmuch: what?

[09:47] <Juerd> lightstep: Don't worry about learning something you won't be able to use for long, as it'll be years until we have Perl 6

[09:47] <luqui> er, What?

[09:47] <nothingmuch> you should sleep occasionally

[09:47] <luqui> (deserves a capital)

[09:47] <nothingmuch> oooh, we're playing with the transcript... Let me get my principia

[09:48] <luqui> oh.  I just go on a six day week

[09:48] <lightstep> is there a good intro, from the language perspective? (in contrast to "let's get to make some example work")

[09:48] <Juerd> lightstep: http://tnx.nl/intro.bp

[09:48] <Juerd> eh

[09:48] <Juerd> lightstep: http://tnx.nl/intro,bp

[09:49] <nothingmuch> do ye wish to better thyself?

[09:49] <Aankhen``> juerd: Are you the same Juerd as on PerlMonks?

[09:49] <Juerd> isn't that does thou?

[09:50] <Juerd> Aankhen``: Yes.

[09:50] <metaperl> no, he's princepawn on perlmonks

[09:50] <Aankhen``> Might I say thanks for the section on PHP vs. Perl on your site? :-)

[09:50] <Juerd> metaperl: I should kill you for that.

[09:50] <metaperl> LOL

[09:50] <Juerd> I am NOT metaperl/princepawn

[09:50] <Juerd> metaperl: You know how I think about princepawn, and that I like metaperl a lot better.

[09:50] <Juerd> Aankhen``: You might :)

[09:51] <Aankhen``> A million thanks!

[09:51] <Aankhen``> It's been very useful indeed.

[09:51] <Juerd> You're welcome

[09:51] <Juerd> And so are patches 

[09:51] <Aankhen``> For?

[09:51] <Juerd> http://tnx.nl/php :)

[09:51] <Aankhen``> Ah, for the document itself.

[09:52] <Juerd> It's still far from complete, but I lack both time and motivation to study PHP better.

[09:52] <Juerd> Many hours went into that document already

[09:52] <Juerd> I spent a whole day just finding the info for the table of matching operators

[09:52] <Aankhen``> Yikes.

[09:52] <Juerd> (Mostly by trying and from PHP's source)

[09:53] * nothingmuch is not nothingmuch on perlmons

[09:57] <Juerd> afk

[10:16] <Aankhen``> Could anyone suggest a good regex tutorial for a complete beginner?

[10:17] * luqui doesn't even remember how he learned

[10:17] <luqui> perlretut

[10:17] <luqui> ?

[10:18] <Aankhen``> I need something available on the 'Net.

[10:18] <sorje> perldoc.com ;-)

[10:18] <Aankhen``> Good point.

[10:18] <Aankhen``> I wub you.

[10:18] <nothingmuch> Aankhen``: i'd actually suggest perlre alongside perlretut

[10:19] <nothingmuch> If you feel you are 'getting' it, but are more curios about how to do xyz, it's a reference

[10:19] <Aankhen``> I'll tell him to go through perlretut to get the gist of the thing.

[10:19] <Aankhen``> After that he can look up perlre.

[10:19] <nothingmuch> perlretut is an intro, but doesn't cover a lot

[10:19] <Aankhen``> Only problem is, perldoc.com never opens for me.

[10:19] <nothingmuch> yah, it sucks that way

[10:19] <nothingmuch> search.cpan prolly has it, since it has perl

[10:19] <nothingmuch> and there is also perldoc.perldrunks.org, i think

[10:20] <Aankhen``> Ah, that's perfect.

[10:20] <Aankhen``> Thank you very much. :-)

[10:20] <nothingmuch> http://search.cpan.org/~nwclark/perl-5.8.6/pod/perlretut.pod

[10:20] <Aankhen``> I'm looking at the one on perldrunks.org.

[10:20] <nothingmuch> or rather, the way i typed it: http://search.cpan.org/perldoc?perlretut

[10:26] <theorbtwo> perldoc.perldrunks.org

[10:44] * luqui & bed

[10:45] <Khisanth> strange junction

[10:46] <luqui> bed & luqui

[10:46] <luqui> what about a strange junction?

[10:47] <luqui> oh, 

[10:47] <luqui> duh

[10:47] <luqui> I'll say it again... and mean it

[10:47] * luqui & bed

[10:47] * crysflame &

[11:03] <theorbtwo> Hm, pugs is mentioned extensively in the newest perl.com newsletter.

[14:42] <autrijus_> greetings

[14:43] <Khisanth> yo~

[14:43] <autrijus_> luqui++ # multival for() and .kv

[14:44] <autrijus_> I've fixed most of the problems luqui documented in his commit log

[14:44] <autrijus_> r572

[14:48] <scw> autrijus_: oops, I made a patch for it but try to fix another problem w.csie.org/~scw/pugs/kv-on-ref-and-list.diff

[14:48] <scw> autrijus_: I'll re-generate it... wait a minute

[14:48] <autrijus_> cool

[14:48] <autrijus_> mm, anyone got a copy of perl.com newletter?

[14:49] <autrijus_> <- was subscriber, but somehow not receiving things anymore

[14:57] <scw> Er, I'm comfused by svk..

[14:57] <scw> I'll use original patch format..

[14:58] <scw> autrijus_: same url, svk patch format

[15:03] <autrijus_> cool

[15:04] <scw> autrijus_: But I found it really ugly that kv, values and pick all dereference themselves...

[15:05] <autrijus_> w.csie.org?

[15:05] <autrijus_> can't fetch it

[15:07] <scw> Oh? then http://www.csie.ntu.edu.tw/~b92103/pugs/kv-on-ref-and-list.diff

[15:07] * scw always lazy on typing longer, official one zzz

[15:08] <scw> ... connection refused

[15:08] <autrijus_> also blocked.

[15:09] <scw> Seems been DDoSed XD

[15:09] <autrijus_> ....

[15:09] <autrijus_> nopaste?

[15:09] <autrijus_> mail to p6c?

[15:13] <scw> autrijus_: mailed to your email ZZZ

[15:14] <scw> another server also down, and failed to mail from department. Today is not my day :/

[15:14] <autrijus__> it is not.

[15:15] <autrijus__> nopaste it?

[15:17] <erxz_paste> "scw" at 218.174.159.24 pasted "patch for .kv to work on ref and list" (23 lines) at http://erxz.com/pb/504

[15:18] <autrijus__> I agree

[15:18] <autrijus__> there should be only one single cast

[15:18] <autrijus__> to a hash

[15:19] <autrijus__> I'll drop your patch and do that.

[15:19] <scw> ok :)

[15:20] * rooneg loves that all he had to do was post a test for %hash.kv and when he wakes up in the morning it's been implemented

[15:24] <autrijus__> :)

[15:24] *** autrijus__ is now known as autrijus_

[15:24] <clkao> hi rooneg

[15:24] <autrijus_> it's the "oil for food"

[15:24] <autrijus_> I mean "test for feature"

[15:24] <autrijus_> program

[15:25] <rooneg> clkao: nice to see so much heavy svk use on this project, good publicity for you ;-)

[15:25] <rooneg> autrijus_: yeah, i'll have to find more features i want to play with that don't have tests yet

[15:25] <autrijus_> scw: so it's just

[15:25] <clkao> and the svn server prompts went down to promote svk

[15:26] <autrijus_> op1 "kv" = \v -> return . VList $ concat [ [key, val] | (key, val) <- vCast v ]

[15:26] <clkao> s/prompts/promptly

[15:26] <autrijus_> keep it simple, indeed

[15:26] <nothingmuch> morning

[15:27] <autrijus_> actually, to rewrite in point-free style:

[15:27] <autrijus_> op1 "kv" = return . VList . concatMap (\(k, v) -> [k, v]) . vCast

[15:27] <scw> and make vCast accept VRef ?

[15:27] <autrijus_> vCast already accepts VRef.

[15:27] <autrijus_> see AST.hs.

[15:28] <scw> autrijus_: Fall to the default one in ``class Value n''?

[15:28] <autrijus_> Gah

[15:28] <nothingmuch> autrijus_: funny bug... see t/op/assign.t

[15:28] <autrijus_> I misremembered.

[15:28] <autrijus_> my plane is actually ~7hr from now.

[15:28] * autrijus_ panicks

[15:28] <autrijus_> well, there goes sleep

[15:28] <nothingmuch> =)

[15:28] <nothingmuch> i think it's a percedence thingy

[15:28] <theorbtwo> Where are you going?

[15:28] <rooneg> sleep on the plane

[15:29] <autrijus_> is there a t/op/assign.t?

[15:29] <autrijus_> theorbtwo: back to .tw

[15:29] <nothingmuch> i sent a patch, and i think luke applied

[15:29] <autrijus_> did he.

[15:29] <nothingmuch> i dunno

[15:29] <autrijus_> not seeing it.

[15:29] <autrijus_> I'll proc when I wake up

[15:29] <autrijus_> need to totally sleep now :-/

[15:36] <scw> nothingmuch: Hi, I don't have commit permission on svn.perl.org, but would like to know what's the bug you found

[15:36] <scw> nothingmuch: could you paste the assign.t somewhere? it's not in tree yet.

[15:39] <nothingmuch> one minute

[15:39] <nothingmuch> (sorry, my dad needed help with his cello)

[15:41] <nothingmuch> ok, i put up a darcs repo on http://nothingmuch.woobling.org/pugs

[15:41] <nothingmuch> t/op/assign.t should be in there

[15:42] <nothingmuch> (once rsync finishes)

[15:42] <ingy> hola

[15:42] <nothingmuch> hola

[15:42] <nothingmuch> http://growl.info/files/Growl-0.6-Bindings.tar.gz

[15:42] <nothingmuch> nonono!

[15:42] <nothingmuch> ugh, how did that happen

[15:42] <nothingmuch> http://nothingmuch.woobling.org/pugs/t/op/assign.t

[15:44] <nothingmuch> scw?

[15:45] <scw> Yes, I've seen them

[15:46] <scw> But what's the difference between the first and the fifth?

[15:46] <nothingmuch> my $t; $t = 

[15:46] <scw> oh, assignment or default value

[15:46] <nothingmuch> vs. my $t = 

[15:48] <nothingmuch> if you look at the parse tree, it appears that under non declarative assignment $t is getting the value of the cond's boolean result

[15:48] <nothingmuch> and the ?? :: is not getting executed at all

[15:48] <autrijus_> nothingmuch: assign.t is committed

[15:48] <nothingmuch> jolly

[15:48] <autrijus_> and yes, your diagnosis is correct.

[15:49] <autrijus_> clsung++ # "Hacking Pugs at such an early stage is a lot of fun... I feel like I'm playing the Pricess Maker game from GAINAX."

[15:49] <scw> and the ?? :: part is... awful, I think

[15:50] <scw> how gcc or perl5 implements "? :" ?

[15:50] <autrijus_> I don't know, honestly.

[15:50] <autrijus_> You'd be my hero

[15:50] <autrijus_> if you can figure out how to deal with ??::.

[15:50] <autrijus_> I mean, pmichaud punted, and I punted

[15:51] <autrijus_> so if you can get it working, that'd be super cool

[15:52] <scw> I think I can make it work -- in some very, very dirty way.

[15:53] <scw> So referencing to others implementation should be better.

[15:53] <autrijus_> you are welcome to check them :)

[15:53] <nothingmuch> autrijus_: remember my earlier promise to learn haskell?

[15:53] <autrijus_> nothingmuch: yes?

[15:53] <nothingmuch> well, yesterday i spent my first 30 minutes or so

[15:53] <nothingmuch> i got as far as the basic IO

[15:54] <autrijus_> YAHT?

[15:54] <nothingmuch> yes

[15:54] <nothingmuch> now i'm having a bit of a hard time getting the number munging program compiling properly

[15:54] <nothingmuch> yesterday i was too tired

[15:54] <nothingmuch> but i'm hopeful for today

[15:54] <autrijus_> cool! nice!

[15:54] <autrijus_> nothingmuch++

[15:54] <nothingmuch> excercise 3.10

[15:54] * nothingmuch dances

[15:55] <scw> I am blocked by Manod...

[15:55] <nothingmuch> tr/ao/oa/

[15:55] <nothingmuch> i om blacked by monad

[15:55] <nothingmuch> that makes sense, huh?

[15:55] <nothingmuch> beh. Now i've got to go to jerusalem to return a bass... Ciao!

[15:55] <autrijus_> be glad you are not blocked by Manos

[15:55] <nothingmuch> que Manos?

[15:56] <autrijus_> http://en.wikipedia.org/wiki/Manos

[15:57] <nothingmuch> ah

[15:57] <nothingmuch> one of those

[15:57] <nothingmuch> see my first or second patch to pugs ;-)

[15:57] <autrijus_> yeah I saw that. it was cute

[15:58] <nothingmuch> i remembered =)

[15:58] <nothingmuch> i was more noting to scw

[15:58] <nothingmuch> anywho, i best be off, i'm already going to be late

[16:00] <malaire> "All about monads" seems to be a lot better introduction to Monads than YAHT chapter 9. (I'm reading it after YAHT chapter 9 seemed to be too hard to understand)

[16:00] <scw> hmm... then I'd better try it :)

[16:01] <malaire> It does some basic understanding of Haskell, but YAHT (chapters 1-8) seems to be enough

[16:01] <scw> autrijus_: You didn't fix the reference problem!!!

[16:01] <malaire> s/does/does require/

[16:02] <scw> autrijus_: But go to sleep first :)

[16:05] <rooneg> is it just me, or does t/op/string_interpolation.t not match how S02 says it should work?  S02 says arrays are only interpolated when they have empty brackets after them, but the last test there has a bare "@a" being interpolated...

[16:05] <rooneg> shouldn't it really be "@a[]"?

[16:10] <scw> rooneg: How about this? <quote>In string contexts these container references automatically dereference to appropriate (white-space separated) string values. In numeric contexts, the number of elements in the container is returned. In boolean contexts, a true value is returned if and only if there are any elements in the container.</quote>

[16:11] <rooneg> i'm looking at the part "In order to interpolate an entire array, it's necessary now to subscript with empty brackets:"

[16:12] <autrijus_> p6l! p6l!

[16:12] <autrijus_> (luqui wrote that part; he is a cabal member; however he still might be wrong.)

[16:12] <joodie> good evening

[16:12] <autrijus_> (I mean, he wrote the interpolation part of pugs)

[16:12] <autrijus_> so p6l?

[16:12] <autrijus_> greetings joodie.

[16:12] <rooneg> damn, i was hoping i could avoid subscribing to that list ;-)

[16:12] * rooneg goes to subscribe to p6l

[16:12] <autrijus_> well you can certainly post to p6c :)

[16:12] <autrijus_> but it's more ontopic of p6l.

[16:13] <scw> hmm... seems what I found is unrelated to this one

[16:13] <rooneg> yeah, i'll cc p6c, since it's a question about the pugs impl vs the spec

[16:14] <scw> and pugs should not make @a=(1,2);"@a" into "1 2", but "@a[]" into "1 2"..

[16:14] <rooneg> scw: if the spec is right then yes, that's exactly what i'm saying.  i've got tests for it if someone wants to commit them, i just wanted to confirm that it was right.

[16:16] <scw> rooneg: I'll keep my eyes on p6l  :)

[16:16] <rooneg> writing the email now

[16:18] <autrijus_> rooneg: can you attach a request at end of it that calls someone to update synopses to mention unary =? :)

[16:18] <autrijus_> prefix:<=> 

[16:18] <autrijus_> if not, that's okay too, but I don't want to move io.t to t/unspecced/ 

[16:19] * rooneg doesn't know enough about what unary = should do to write a useful request ;-)

[16:19] <autrijus_> oh ok :)

[16:19] <autrijus_> I can do that later :)

[16:19] <autrijus_> unary = is readline.

[16:20] <rooneg> ahh, right, the confusing syntax i can't wrap my brain around ;-)

[16:20] <autrijus_> exactly!

[16:24] * rooneg notes how remarkably easy it is to see what's wrong with a diff right after you send it to a public mailing list

[16:25] <scw> so that commits usually appear pairing :p

[16:26] <rooneg> i wonder what percentage of commit messages worldwide contain the word oops ;-)

[16:27] <joodie> I've been writing some tests on subroutine prototypes (mostly to try out the syntax for myself) and I found that sub swap(*@_ is rw) is not supported yet.

[16:28] <joodie> in fact, it doesn't compile :-)

[16:30] <autrijus_> yup. write a test

[16:30] <autrijus_> the internal support is there

[16:30] <autrijus_> just need parsing for "is rw"

[16:31] <autrijus_> and add a isLValue boolean.

[16:31] <autrijus_> that is a simple task for people interesting on Parser.hs hacking.

[16:31] <autrijus_> in Param parsing bits.

[16:31] <autrijus_> s/isLValue boolean/isLValue = True/

[16:33] <joodie> I've got a test. Taking a look at Parser.hs - haskell looks funny to me

[16:35] <scw> autrijus_: I wonder that are Rule.hs and Rule/*.hs copied from Parsec?

[16:35] <scw> autrijus_: If so, why do you do that instead of simple use it?

[16:35] <scw> autrijus_: To be easier to hack it?

[16:35] <autrijus_> yeah because.

[16:35] <autrijus_> that

[16:36] * rooneg notes a lack of tests for things like $?LINE and $?FILE.  any suggestions as to a place to put them?

[16:36] <autrijus_> Rule needs to be in "Eval ..."

[16:36] <autrijus_> so I need to hack Parsec's internals a lot

[16:36] <autrijus_> and syntaxninja also cleaned it up to be run under -Wall

[16:36] <autrijus_> once all these is settled I'll push upstream.

[16:37] <autrijus_> and I noted that it's from parsec; see Rule/LICENSE and README

[16:37] <scw> autrijus_: So you are doing two projects at once :p

[16:37] <autrijus_> uhm.

[16:37] <autrijus_> more than 100, in fact.

[16:37] <autrijus_> it's just some are more active than others.

[16:37] <autrijus_> journal up; I'll sleep now.

[16:37] <scw> Er, ok, that true..

[16:38] <autrijus_> rooneg: I think t/base/ ?

[16:38] <autrijus_> oh wait

[16:38] <autrijus_> t/magicals/

[16:38] <autrijus_> is the place.

[16:38] <rooneg> autrijus_: ok

[16:39] <autrijus_> zzz&

[16:53] <ingy> seen buu?

[16:53] <ingy> perlbot: seen buu?

[16:53] <ingy> perlbot: smell you later

[16:54] <ingy> buu: '-' lists should be rendered with dl/dt/dd

[16:56] <ingy> buu: see http://www.perlpod.com/5.9.1/pod/perlpod.html

[16:56] <ingy> &

[16:58] <ingy> this sucks: http://svn.openfoundry.org/pugs/

[16:59] <ingy> gone for real&

[18:27] <lukhnos> ingy: openfoundry.org has been that for *weeks*

[18:58] *** edgewalk1r is now known as edgewalker

[19:06] <qmole> ;/

[20:14] *** buu_NOTHEREANYMO is now known as buu

[21:13] <lightstep> how can i tell the makefile to build pugs with profiling?

[21:31] <theorbtwo> lightstep, first make sure you have the approps files installed.  Then at the bottom of Makefile.PL, after the stanza beginning $pugs, add another stanza:

[21:33] <theorbtwo> pugs-prof : src/Config.hs @srfiles $version_h (newline tab) ghc --make -prof -auto-all -Wall -fno-warn-missing-signatures -fno-warn-name-shadowing -o pugs-prof src/Main.hs -isrc

[21:33] <theorbtwo> You might also try -caf-all.

[21:34] <lightstep> without a dollar?

[21:41] <theorbtwo> Dollar where?

[21:41] <theorbtwo> Oh, at the beginning.  No; otherwise on windows it'd expand to pugs.exe-prof

[21:42] <lightstep> yes. i got it. but ghc here doesn't like -caf-all

[21:42] <theorbtwo> The recipie I gave is valid for unix, but not win32; adjust to taste.

[21:42] <theorbtwo> Neither does mine.

[21:43] <lightstep> life.p6 seems unbelievably slow

[21:43] <theorbtwo> I wonder if my Int $foo; is useful.

[21:44] <Khisanth> lightstep: get things working first, optimize later :)

[21:44] <lightstep> exactly what i want to do with it

[21:57] <lightstep> is hanoi.p6 broken?

[21:59] <lightstep> it gives me AS AS SS AB SS SB SB, and on closer inspection, $s turns out to always be 'S'

[22:51] <luqui> arrrggggh  why doesn't 'try' (in parsec) work like it's supposed to!

