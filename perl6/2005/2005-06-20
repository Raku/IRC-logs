[00:00] <obra> Test::Base::Yours::All, no?

[00:00] <autrijus> :)

[00:00] <Odin-LAP> A Perfect Circle did a cover which makes it quite a bit more clear. :>

[00:00] <Odin-LAP> All::Your::Base

[00:00] <Odin-LAP> ;)

[00:01] <Odin-LAP> Are belong to us!

[00:01] <obra> . o O { use IO::All qw/base/ }

[00:01] <obra> That should, presumably turn all your filehandles into IO::All objects

[00:11] <mugwump> I thought the channel was a bit quiet

[00:12] <mugwump> turned out to be a severed cable disconnecting most of the Wellington region connected via NZ Telecom, god bless 'em

[00:19] <meppl> gute nacht  -  good night

[00:55] <Darren_Duncan> fyi, when testing 4860, results are: (1 subtest UNEXPECTEDLY SUCCEEDED) (887 subtests TODO), 386 subtests skipped.

[00:55] <Darren_Duncan> Failed 20/338 test scripts, 94.08% okay. 152/6222 subtests failed, 97.56% okay.

[00:55] <Darren_Duncan> this is the plain pugs, no Parrot in sight

[01:31] * autrijus waves &

[01:55] <mugwump> jabbot: seen evalbot6?

[01:56] <jabbot> mugwump: evalbot6 was seen 2 days 19 hours 20 minutes 32 seconds ago

[02:26] *** crysflame is now known as coral

[02:29] *** coral is now known as coral_

[02:29] *** coral_ is now known as coral

[02:29] <coral> all done, thanks for the patience.

[03:38] <redfish> quick question from a recreational p6 porter: is the three arg form of split implemented in pugs 6.2.7?

[03:39] <mugwump> passing a limit?

[03:41] <redfish> yes.

[03:41] <redfish> experimenting says no...

[03:42] <mugwump> hmm, it's not even in S29

[03:42] <redfish> I noticed that.

[03:43] <redfish> I'm from a PM group that are thinking we will try to port XML::SAX::PurePerl as a challenge to get our p6 foo going...

[03:44] <mugwump> ooo how about porting Perldoc instead?  It's called Perldoc but actually it's modelled after SAX

[03:44] <redfish> yeah?  We are looking for something that can be split up nicely among 4-5 people...

[03:45] <redfish> We picked XML::SAX because baud is a member of our group...

[03:46] <mugwump> ok, well pull down Perldoc-0.10 from CPAN and decide for yourself.  It's pretty simple!

[03:46] <mugwump> Plus I'd love direction and feedback from someone who's very familiar with SAX, eg currently the event names are all from SAX2

[03:46] <redfish> Cool... I will.

[03:48] <redfish> Here's a question -> porting use constant FOO => 9; to p6...

[03:48] <redfish> I'm thinking either my $FOO is constant; or macro FOO() { 9 };

[03:48] <svnbot6> r4862, mugwump++ | Add limit to Str::split

[03:50] <redfish> neither appear to work yet in pugs, though.  I'm a little confused by macro support in pugs.

[03:51] <mugwump> there are only source-level macros at present, and those are new

[03:52] <redfish> right.  and no 'is' traits yet?

[03:52] <redfish> or properties

[03:52] <mugwump> some traits have been implemented, but the general traits system is still a way off

[03:57] <svnbot6> r4863, mugwump++ | Add (failing) test for 3-arg form of split

[04:25] <redfish> is $! set by eval in pugs?  

[04:25] <mugwump> yes

[04:26] <mugwump> used all over the test suite :)

[04:28] <redfish> Ahh.  there we go.  Thanks.

[04:29] <redfish> I think that the added challenge of determining whether something is unimplemented -vs- me being stupid makes this a little harder.

[04:29] <mugwump> oh, sure.  that passes though.

[04:37] <mugwump> redfish, are you more interested in the regex/rule based 3-arg split or text-based?

[04:37] <svnbot6> r4864, mugwump++ | fix 3-arg split to test the right thing, also test string split

[04:51] <svnbot6> r4865, mugwump++ | Implement 3-arg split (rx-only for now), update test

[05:16] <svnbot6> r4866, mugwump++ | Implement 3-arg split (text-based), update test - still one outstanding test failure...

[05:44] <mugwump> redfish: ok, split with limit is in r4867 :)

[05:44] <svnbot6> r4867, mugwump++ | Finish case of split against empty string; add tests for it.  All forms of 3-arg split / 2-arg Str.split now working :-D

[06:21] <masak> I get an error when trying to compile pugs r4867:

[06:21] <masak> it says /usr/lib/perl5/5.8.5/i386-linux-thread-multi/CORE/reentr.h:611: error: field `_crypt_struct' has incomplete type

[06:22] <Darren_Duncan> I"ll try it and gte back to you

[06:22] <masak> oki

[06:22] <Darren_Duncan> now compiling

[06:22] <masak> hmm

[06:22] <masak> maybe I need to upgrade perl5

[06:22] <masak> or something

[06:22] <Darren_Duncan> fyi, the previous 4866 compiled fine

[06:23] <mugwump> you might need to `make clean', masak

[06:23] <masak> i've been away and haven't compiled pugs for a week :)

[06:23] <Darren_Duncan> I'm using system perl 5.8.1 and it has worked fine

[06:23] <masak> mugwump: i deleted the source tree and svn re-upped, does that count :)

[06:23] <mugwump> yeah that would do it

[06:24] <masak> thought so

[06:24] <masak> it's a C error, right?

[06:24] <arcady> yes

[06:25] <arcady> I think it can't find some header file that it needs

[06:25] <masak> so maybe I need to upgrade GCC

[06:25] <arcady> that's not going to help

[06:25] <mugwump> masak: unlikely gcc

[06:25] <masak> hmm

[06:25] <Darren_Duncan> make done without errors

[06:25] <arcady> you probably just need to install the relevant header files

[06:25] <masak> from where?

[06:25] <masak> it's core

[06:25] <arcady> whichever one it is that has _crypt_struct

[06:26] <masak> :/

[06:26] <arcady> where does your perl5 come from?

[06:26] <masak> I... I don't remember

[06:26] <mugwump> do you have more than one perl5 installed?

[06:26] <masak> it's a package i think

[06:26] <masak> mugwump: no

[06:26] <masak> probably an .rpm

[06:26] <mugwump> are you building with PUGS_EMBED="perl5" set?

[06:27] <masak> yes, I did

[06:27] <masak> should I?

[06:27] <Darren_Duncan> I'm not

[06:27] <masak> ah, sorry

[06:27] <arcady> well, it will work if you don't embed perl5

[06:27] <masak> I'll try

[06:27] <masak> now compiling

[06:27] <masak> is perl5 support knowingly broken?

[06:28] <masak> ah, now I see: it failed at "Compiling Pugs.Embed.Perl5"

[06:28] <masak> silly me

[06:28] <masak> seems to work fine now

[06:29] <mugwump> strange error; perl5+parrot building is working for me, but I have a custom perl

[06:30] <mugwump> you need libperl of course, the -dev package (if any) and all the versions need to match up.

[06:31] <masak> mugwump: i'm pretty sure i have libperl. i'll see about the -dev package

[06:33] <svnbot6> r4868, chromatic++ | Fixed DESTROYALL:

[06:33] <svnbot6> r4868, chromatic++ | 	The fix in Pugs.Prim could use some refactoring.  Also, I sometimes now see

[06:33] <svnbot6> r4868, chromatic++ | 	GHC errors about entering EVACUATED objects.

[06:33] <svnbot6> r4868, chromatic++ | Fixed order of method invocation in BUILDALL and DESTROYALL (was backwards).

[06:33] <svnbot6> r4868, chromatic++ | Untodoed some tests in t/oo/destruction.t (and fixed the very broken ones).

[06:38] <nothingmuch> good morning

[06:43] <masak> mornin'

[07:04] <mugwump> 'night all!

[07:07] <nothingmuch> night mugwump 

[10:14] *** Aragone is now known as Ara4n

[10:39] <autrijus> rehi \camels!

[10:40] <autrijus> I'm thinking of changing the name PAST to PIL (Pugs Intermediate Language) :)

[10:44] <Ara4n> just as long as you don't rename pugs to protor, that seems like it might be a good idea... :)

[10:44] <Ara4n> (i wonder if M$ have trademarked 'IL')

[10:50] <mr_ank> they have probably trademarked ILL though

[10:51] * mr_ank dodges rotten tomatoes

[11:01] <Ara4n> hehe

[11:19] <autrijus> :D

[11:38] <Boogie> Good afternoon! :)

[11:38] <Boogie> Is there somebody, who can look after /t/unspecced/p5/return.t?

[11:45] <svnbot6> r4869, autrijus++ | * squash some wanrnings.

[12:54] *** irc.freenode.net sets mode: +n
 
[13:00] <nothingmuch> see you in canada, i think

[13:01] <nothingmuch> unless there's wifi at the airport

[13:01] <nothingmuch> or if i have lots of extra time

[14:20] <svnbot6> r4870, autrijus++ | * clean some warnings

[14:20] <svnbot6> r4871, autrijus++ | * repair pugs -C tests.

[14:20] <svnbot6> r4871, autrijus++ | * Pugs.Compile.Parrot is now gone; -CParrot etc becomes an

[14:20] <svnbot6> r4871, autrijus++ |   alias to -CPIR etc.

[14:20] <svnbot6> r4872, autrijus++ | * adjust pugscc to play with the new PIR backend

[14:27] *** nnunley_ is now known as nnunley

[14:35] <Limbic_Region> anyone awake?

[14:35] <Odin-LAP> No.

[14:36] <Limbic_Region> hmmm - maybe it is better that way

[14:36] <Limbic_Region> I ask a question - everyone that is sleeping will be tapping in to raw creative energies

[14:36] <Limbic_Region> I will get great answers

[14:37] <Ara4n> the only flipside is that the answers won't be filtered by normal conscious processes

[14:37] <broquaint> Europe is awake, or at least "Monday awake".

[14:37] <Ara4n> you're just as likely to get a pink unicorn as yet another backend for pugs

[14:37] <Juerd> Yea, monday awake

[14:37] <Juerd> I hate mondays.

[14:37] <Limbic_Region> I am creating a "Time Capsule" project over at the Monastery - basically, solve a problem and don't look at the answer for some set period of time

[14:37] <Ara4n> . o O ( tell me why... )

[14:37] <Juerd> And it's fscking hot.

[14:37] <Limbic_Region> this is going to mostly be fun for new Perl programmers

[14:38] <Limbic_Region> but I was thinking about adding a p6 category so everyone could play (the seasoned professionals in mind)

[14:38] <Odin-LAP> Limbic_Region: So they see how much their style changes?

[14:38] <Limbic_Region> Odin-LAP - style as well as idioms

[14:38] <Odin-LAP> Interesting idea.

[14:38] * Limbic_Region avoiding map/unpack for a long time and now use it quite frequently

[14:39] <Limbic_Region> anyway - the task(s) that one can choose from should be non-trivial and need the use of datastructures, looping constructs, several functions, etc - but not too hard (say circa 50 LOC)

[14:39] <Ara4n> map can be very addictive :/

[14:39] <Limbic_Region> any ideas for the p6 category?

[14:40] <broquaint> Perl6 Parser for Perl6.

[14:40] <Khisanth> PPP?

[14:40] <Limbic_Region> broquaint - in 50 LOC?

[14:40] <Odin-LAP> Isn't that just writing PGE and and grammar? :p

[14:40] <broquaint> The new system is pretty powerful, L~R ;) ...

[14:40] <Limbic_Region> I was thinking hangman or AI Animals, or something like that

[14:41] <Odin-LAP> (Note: The word 'just' has no place in that sentence.)

[14:41] <Limbic_Region> perhaps I just open up the p5 projects to p6 (same task - different language)

[14:41] <Odin-LAP> That's one option.

[14:41] <Odin-LAP> Maybe not an insensible one. :)

[14:41] <Limbic_Region> anyway - if anyone comes up with a good idea - /msg me here or at the Monastery

[14:52] <broquaint> Some of the non-expert qotws might be a good place to look, L~R.

[14:56] <Limbic_Region> thanks broquaint

[15:30] <nothingmuch> seen autrijus 

[15:30] <jabbot> nothingmuch: autrijus was seen 4 hours 10 minutes 52 seconds ago

[15:30] <autrijus> hi nothingmuch.

[15:31] <nothingmuch> autrijus: my copy of algorithms still hasn't arrived... please brings yours to the hackathon so that I can at least read a tiny bit

[15:31] <autrijus> nothingmuch: heh, I'm with zero my books

[15:31] <autrijus> I'm in austria :)

[15:32] <nothingmuch> i thought you'd bring them to austria =)

[15:32] <nothingmuch> i always carry books around

[15:32] <autrijus> I never do :)

[15:32] <nothingmuch> stevan: please bring yours then

[15:32] <nothingmuch> not computer books though

[15:32] <nothingmuch> i don't have any computer books

[15:33] <nothingmuch> also, if you'd like to meet up in toronto then feel free to mail

[15:33] <nothingmuch> if I'm awake when I get there I'll try to contact

[15:33] <autrijus> hrm.

[15:33] <autrijus> I wonder if I should ask John to find me a host in .ca

[15:34] <nothingmuch> well, in theory i could ask if you can lodge

[15:34] <nothingmuch> these people have a big basement

[15:34] <nothingmuch> that's where I stayed last time

[15:34] <autrijus> but practically you'd like not to? :)

[15:34] <nothingmuch> i'll just have to ask =)

[15:34] <autrijus> because if I can stay at the place you're staying... then I can just wait in airport for you

[15:34] <autrijus> thereby greatly simplifying things

[15:34] <nothingmuch> that's a 10 hour wait

[15:34] <autrijus> which, is fine by me

[15:35] <autrijus> it's all just wallpapers.

[15:35] <nothingmuch> heh

[15:35] <autrijus> seriously. :)

[15:35] <nothingmuch> okay, i'll call now, and mail too

[15:35] <nothingmuch> in case I don't find them

[15:35] <nothingmuch> i'm 90% sure they'll agree

[15:35] <autrijus> okay, thanks! if you manage to confirm, please let John know 

[15:35] <nothingmuch> unless something comes up it should be fine

[15:35] <nothingmuch> will do

[15:35] <autrijus> so that he won't spend more time calling other pmers

[15:35] <autrijus> cool, thanks!

[15:36] <autrijus> (nondeterministic routing)++

[15:36] <nothingmuch> heh

[15:36] <nothingmuch> i like it too, but i've never tried it on an int'l scale

[15:36] <nothingmuch> only trains and busses

[15:36] <nothingmuch> which is still pretty adventerous, given the fact that our public transportation pretty much sucks

[15:37] <nothingmuch> (none on the weekends, nothing practical after 20:00)

[15:37] <autrijus> ow.

[15:37] <nothingmuch> very much so

[15:37] <nothingmuch> i even slept in a park once

[15:37] <nothingmuch> but that had nothing to do with public transportation

[15:39] <Boogie> Juerd: ping

[15:39] <Juerd> pong

[15:40] <Boogie> Juerd: is it possible, that svn/svk has some problems, or changed @feather?

[15:40] <Boogie> svk up does nothing for me.

[15:40] <clkao> svk up -s

[15:41] <Boogie> clkao: Waiting for mirror lock on /mirror/pugs: feather:26931.

[15:41] <Boogie> clkao: etc.

[15:42] <clkao> maybe someone is mirroring it, or maybe the mirror was fscked.

[15:42] <clkao> you need to make sure that, and svk mirror --unlock //mirror/pugs

[15:44] <Boogie> It seems, that it helped. Thx!

[15:47] <nothingmuch> autrijus: i'll have an answer in an hour

[15:47] <nothingmuch> i called them on the cell and there's bad reception, but they'll call me back

[15:50] <autrijus> 'k

[16:16] <nothingmuch> autrijus: answer is yes

[16:17] <autrijus> nothingmuch: cool! the next question is, then, how do I spot you

[16:17] <nothingmuch> malev flight 94 from budapest,

[16:17] <nothingmuch> arriving in terminal 3 at 17:00

[16:17] <nothingmuch> err, 17:50

[16:18] <nothingmuch> people will be waving at me, one is called Sergio, the other is called Jennifer

[16:18] <nothingmuch> and either or will be present

[16:18] <autrijus> any, like, pictures?

[16:18] <nothingmuch> i look like this:

[16:18] <autrijus> I look like this: (^_^)

[16:18] <nothingmuch> http://gallery.woobling.org/album49

[16:19] <nothingmuch> http://gallery.woobling.org/album49/aaj <-- guy on the left

[16:19] <nothingmuch> see also gpg key id

[16:19] <nothingmuch> http://individual.utoronto.ca/stenenbaum/ <-- sergio

[16:20] <nothingmuch> (images are not scaled)

[16:20] <autrijus> on the left? the one with less entropic hair?

[16:20] <autrijus> ok, I think I got it :)

[16:20] <autrijus> thanks!

[16:20] <autrijus> so the plan is I'll also be there in terminal 3 and wave at you

[16:21] <nothingmuch> okay

[16:21] <nothingmuch> ii'll have a targus backpack, blue & black

[16:21] <nothingmuch> i think i can recognize you, i've seen 2-3 pictures

[16:21] <nothingmuch> i'll be wearing a light blue shirt and a pair of jeans or black cargo pants

[16:21] <nothingmuch> and a beat up suite case, army green

[16:21] <autrijus> I'll be with a pseudoapple asus computer.

[16:21] <autrijus> so should be easy to spot

[16:22] <nothingmuch> goody

[16:22] <nothingmuch> worst case scenario: i'll call you

[16:22] <nothingmuch> but I don't have a cellphone, so it will be after I land

[16:22] <autrijus> I'm not sure I have a cellphone either.

[16:23] <autrijus> I have one, but I'm not sure if it operates in .ca anymore.

[16:23] <autrijus> so in worst worst case I'd need one of your friend's cellphone.

[16:23] <autrijus> number, that is

[16:23] <nothingmuch> okay, i'll fwd a mail

[16:24] <nothingmuch> hola lightstep

[16:24] <nothingmuch> okay, sent

[16:25] <autrijus> dank

[16:28] <nothingmuch> okay, i'm going to start packing

[16:32] <Limbic_Region> autrijus and nothingmuch - you may have a bit of a problem

[16:32] <Limbic_Region> if your flights are not in to the same terminal, you will likely be forced through customs and immigration to baggage claim

[16:33] <Limbic_Region> unlikely they will let you back in through security to the other terminal

[16:33] <Limbic_Region> at least - that's how it is in US

[16:33] <Limbic_Region> but since nothinmuch said people will be waiving - autrijus could make it that far at least

[16:33] * Limbic_Region shuts up now

[16:34] <autrijus> right. the plan is for me to find the people who will pick him up

[16:34] <Limbic_Region> sorry - I was just reading through the log getting caught up and my mind wasn't keeping up with my eyes

[16:36] <Limbic_Region> when is the official start of the next hackathon anyway?

[16:38] <autrijus> 60 hours from now?

[16:38] <autrijus> not sure

[16:39] <Qiang> welcome to toronto, autrijus :-)

[16:39] <autrijus> whenever larry arrives... that's 4pm 22nd

[16:39] <autrijus> Qiang: thanks :)

[16:39] <clkao> autirjus has a phone!

[16:40] <Qiang> autrijus: i can leave my cell # to u, in case you need some help

[16:40] <autrijus> cool!

[16:40] <autrijus> clkao: except soon to be invalidated by .ca's networks

[16:40] <Qiang> autrijus: pm

[16:41] <autrijus> :)

[16:42] <clkao> autrijus: your ticket will be carried by stig. he will threaten you with that for some feature i suspect.

[16:42] <Qiang> you will find a lot people here speak chinese in the hotel area :)

[16:42] <autrijus> clkao: oh, my ticket has arrived?

[16:42] <clkao> not yet.

[16:42] <autrijus> I thought it won't be there till wed.

[16:42] <svnbot6> r4873, autrijus++ | * return() from subroutines now work in PIR.

[16:43] <autrijus> and who is stig?

[16:43] <Limbic_Region> obviously someone who wants a feature added to Pugs

[16:43] <Limbic_Region> ;-)

[16:44] <clkao> autrijus: i reckon he will come to you, dont worry

[16:44] <autrijus> mm Stig Brautaset

[16:44] <autrijus> ah, the guy you brainwashed

[16:45] <autrijus> into believing that you're a "very pleasant person"

[16:45] <autrijus> Limbic_Region: I think it'd be SVK features then :) http://brautaset.org/index.html?id=329

[16:46] <clkao> you don't think i am pleasant to work with? XD

[16:49] <autrijus> "fun" yes. "exciting" definitely.

[16:49] * autrijus has serious reservation about the pleasant bit

[16:50] * Khisanth sets autrijus' unpleasant bit

[16:50] <clkao> bwahaha

[16:52] <Odin-LAP> 'Fun' and 'exciting' almost always exclude 'pleasant'.

[16:54] <Odin-LAP> Hmm.

[16:54] <Qiang> does it go the other way around? boring & pleasant

[16:54] <Odin-LAP> A nice 'killer feature', though.

[16:54] <Odin-LAP> "I know the author. He's a nice fella."

[16:54] <Odin-LAP> :p

[16:55] <svnbot6> r4874, iblech++ | * Some work on ChangeLog.

[16:55] <svnbot6> r4874, iblech++ | * Emit.PIR -- Don't quote C<'>. Now C<say "hi'"> works as expected.

[16:55] <svnbot6> r4874, iblech++ | * Pugs.Compile.PIR, Emit.PIR -- Some more Haddock.

[16:55] <svnbot6> r4873, autrijus++ | * return() from subroutines now work in PIR.

[16:55] <Odin-LAP> Yeah. Like Arthur Dent. Whose friends thought of him as 'pleasant but dull'.

[16:56] <Qiang> 42

[16:56] <Khisanth> Odin-LAP: that sounds like a boring app

[16:56] <Odin-LAP> Khisanth: Hm?

[16:56] <Khisanth> "I know the author. He's insane." sounds MUCH better!

[16:56] <Odin-LAP> Heh.

[16:57] <Odin-LAP> It's not my words!

[16:57] <Odin-LAP> Well. Yes, but I'm paraphrasing someone else. :p

[17:02] <nothingmuch> Limbic_Region: we'll be arriving at the same terminal, and either way we'll be going to the getting picked up section of the airport

[17:03] <Qiang> oh, this year dragon boat race is held on this weekend on central island. would be nice for the YAPC folks.

[17:03] <Qiang> about 200 teams. http://www.dragonboats.com/pages/dragonboat2005.html

[17:07] <nothingmuch> autrijus: more physical disambiguation - 2nd generation iPod, etymotic headphones

[17:08] <nothingmuch> black dr. martens, in surprisingly good shape compared to these:http://gallery.woobling.org/shoes

[17:09] <svnbot6> r4875, autrijus++ | * closures: my $x = { say 5 }; $x() ; $x()

[17:24] <svnbot6> r4876, autrijus++ | * loop and bare blocks at value position now Really Works (tm).

[17:25] <autrijus> $ ./pugs -BPIR -e 'sub foo { my $bar = { return 3 }; $bar(); die }; say foo()'

[17:25] <autrijus> 3

[17:25] <autrijus> :))

[17:25] <nothingmuch> =)

[17:29] *** spinclad_ is now known as spinclad

[17:33] <Limbic_Region> is the die necessary?

[17:34] <Limbic_Region> . o O ( and if it fails, does that make you immortal )

[17:34] <nothingmuch> it never dies, that was the point

[17:34] <nothingmuch> it returns

[17:34] <Limbic_Region> oh - I wouldn't have expected that at all

[17:35] <Limbic_Region> if that had said return $bar(); die }; ... I would have expected that behavior

[17:35] <_mml> i think the not dying is a bug.

[17:36] <Limbic_Region> or if that had been my $bar is macro ...

[17:36] <_mml> perhaps due to something mistaking $bar() for a tail call?

[17:37] <Limbic_Region> dunno - but if that isn't a bug it isn't the behavior I would expect

[17:38] <wolverian> _mml: no. 'return' skips bare blocks.

[17:38] <wolverian> i.e. it returns from 'foo', not the bare block.

[17:39] <Limbic_Region> wolverian - so that wouldn't have been the behavior it it had been written as

[17:39] <Limbic_Region> sub foo { my $bar = sub { return 3 }; ....

[17:39] <wolverian> Limbic_Region: yes.

[17:39] <Limbic_Region> but by not having the sub keyword there it skipped it

[17:40] <arcady> but it all makes sense

[17:40] <Limbic_Region> ok - I can buy that as long as it is documented

[17:40] <arcady> since you want to be able to return from inside a for or while

[17:40] <wolverian> arcady: exactly. :)

[17:40] <wolverian> Limbic_Region: see what arcady said. and you can use 'leave' if you want to exit the bare block

[17:41] <Limbic_Region> makes perfect sense wolverian

[17:41] <wolverian> I agree.

[17:41] <Limbic_Region> the part that confused me was autrijus and others repeatedly telling me I could drop the sub keyword in my examples

[17:42] <_mml> hrm...

[17:42] <arcady> and this is all documented in S06

[17:42] <Limbic_Region> in only a few cases would that have been the right thing to do

[17:42] <_mml> need t o read S06, then.

[17:42] <wolverian> oh, and note that -> { ... } acts like a bare block in this regard as well

[17:42] * Limbic_Region hasn't used pointy blocks in his examples, but sees how they would be useful now

[17:43] <wolverian> you haven't used for ... -> { ... }? :)

[17:43] <Limbic_Region> in any case - I just need to throw out the "you can drop the sub keyword if you want" cause you can't when you really mean sub

[17:43] <wolverian> s,->,-> ...,

[17:43] <wolverian> Limbic_Region: right.

[17:43] <Limbic_Region> wolverian - I have used pointy blocks in looping constructs but not as bare blocks

[17:44] <Limbic_Region> I still don't understand how pointy blocks work with while loops

[17:44] <Limbic_Region> the response I got on the list left me with more questions than answers

[17:46] * Limbic_Region goes to re-read it now to see if it makes more sense

[17:46] <arcady> oh and apparently, a pointy block "does not require a preceding comma when included in a list"

[17:46] <arcady> according to S06

[17:46] <rjbs> is there a good reason for that, I wonder?

[17:47] <arcady> which I assume means that you can say map @list -> $foo { bar($foo) } 

[17:47] <wolverian> arcady: or s,map,for,!

[17:47] <arcady> but you can already do that with for

[17:47] <arcady> in fact you are not allowed to have the comma there

[17:47] <wolverian> uh, for is not special in any way

[17:47] <arcady> in pugs it is

[17:47] <wolverian> I'm talking about S06, not pugs

[17:48] <arcady> in that case, yes

[17:48] <arcady> and pugs should probably try to present it as being consistent, even if internally it isn't

[17:49] <wolverian> yes. does &*for do anything?

[17:50] <arcady> nope

[17:51] <arcady> but map is "sub map(@list, &sub)" or so, while for would be "sub for(*@list, &sub)" which is not currently legal

[17:52] <arcady> or it might be, I haven't be following p6l for a long while now

[17:56] <autrijus> "you can throw out the 'sub' if you don't use 'return'"

[17:57] <autrijus> arcady: hrm, maybe it's *@list, *&sub -- i.e. adverbial block

[17:57] <autrijus> (pure speculation)

[17:59] *** Ara4n is now known as Aragone

[18:00] * autrijus continues to plunge toward the goal of having "make smoke" running with -BPIR -- that's my self-imposed goal for the release

[18:00] <autrijus> actually, if anyone has some tuit to hack in "make pirsmoke" and "make pirtest", that'd be cool

[18:03] <iblech> autrijus: pugs -BPIR -we 'my $sub = -> $x { 1000 + $x }; say $sub(42)' -- known to fail?

[18:04] <arcady> nothing with pugs -BPIR works for me...

[18:04] <wolverian> agh why do people use $sub? &sub is much nicer.

[18:04] <iblech> arcady: pugs -BPIR -we 'say 42' does not work? Parrot in path or embedded Parrot? What revision?

[18:04] <wolverian> my &foo = { ... }; foo "bar";

[18:05] <wolverian> (although 'my foo { ... }' is exactly the same.)

[18:05] <iblech> my sub foo {...}

[18:05] <autrijus> right, need the sub.

[18:05] <wolverian> oops. ye.

[18:05] <wolverian> +s

[18:05] <arcady> iblech it's fresh as of half an hour ago, and I think embedded

[18:05] <arcady> it complains about Null PMC access

[18:06] <iblech> Is your Parrot uptodate?

[18:06] <autrijus> arcady: embedded is b0rken.

[18:06] <autrijus> as is jit, and bytecode.

[18:06] <arcady> oh, that explains it then

[18:06] <autrijus> for largely the same reasons.

[18:06] <autrijus> leo is fixing the runloop 

[18:06] <autrijus> -- actually rewriting --

[18:06] <autrijus> and he says eta 60hrs from now

[18:07] <autrijus> actually jit should be repaired now for some platforms

[18:08] <autrijus> iblech: blocks currently takes no params

[18:08] <svnbot6> r4877, autrijus++ | * Pugs.Compile.Parrot.* is now gone.

[18:10] <iblech> autrijus: Ah, ok

[18:12] <autrijus> iblech: I'm thinkign this "use" business.

[18:12] <autrijus> it seems to be that we either

[18:12] <autrijus> 1. "use" as usual; then Test.pm's lexical pad needs to be reconstructed from the subPads

[18:12] <wolverian> autrijus: is that ETA 60hrs wallclock time or 60hrs working time?

[18:12] <autrijus> 2. translate "use" into some like of include, and put Test.pm's code inline then

[18:13] <autrijus> wolverian: wallclock I believe, but not sure

[18:13] <wolverian> right. thanks.

[18:13] <autrijus> 3. upon seeing "use", turn the compiler into separate compilation mode and produce Test.pbc

[18:13] <autrijus> and load it

[18:13] <autrijus> comments?

[18:16] <iblech> Question: 2. But the code would still have to be evaluated at compile-time, right? So a &use PIR sub wouldn't be of much help (but I probably misunderstood that)

[18:17] <autrijus> use needs to be evalled at compile time using pugs's interpreter space

[18:17] <autrijus> there's no doubt about that

[18:17] <autrijus> think -BPugs

[18:17] <autrijus> i.e. pugscc

[18:17] <autrijus> which can handle -MTest

[18:17] <autrijus> because all the `is export` subs from Test is serialised

[18:18] <nothingmuch> wow, i'm such an efficient packer

[18:18] <nothingmuch> too bad i suck at ironing

[18:18] <autrijus> er, wow, I lie. it currently doesn't work anymore because the pad entries:

[18:19] <autrijus> module Test; my $x; sub foo is export { $x }; sub bar is export { $x }

[18:19] <autrijus> isn't preserved

[18:19] <autrijus> so foo/bar doesn't see the same $x.

[18:19] <autrijus> in -BPugs mode, that is

[18:20] <iblech> Hm.. What would this some like of include look then? I get the problem, but not solution 2...

[18:20] <autrijus> the solution 2 is to treat "use" as #include

[18:21] <autrijus> and inject the parse tree from there

[18:21] <autrijus> as part of the main Exp

[18:21] <iblech> *understood*

[18:21] <autrijus> which incidentally is trivially done with your macro stuff :)

[18:22] <iblech> :)

[18:22] <autrijus> this is again unspecced territory

[18:22] <autrijus> so ideas, free associations etc welcome

[18:22] <iblech> Ok, and then a question to 3.: First, Test.pm would be evaluated at compile-time using the interpreter mode, then all vars, subs, etc. are snapshotted and compiled to PIR and then to a PBC, right?

[18:23] <autrijus> yes... it's essentially as if you ran pugs -CPIR on Test.pm 

[18:23] <autrijus> > Test.pbc

[18:23] <autrijus> and then put "load_bytecode 'Test.pbc'" in init()

[18:24] <autrijus> or something like that.

[18:24] <autrijus> it will also be nice ot have "&eval" prim

[18:25] <autrijus> (btw, the entire Prelude.pm is now in PIR)

[18:27] <Limbic_Region> autrijus - have you ever met $larry IRL?

[18:28] <autrijus> Limbic_Region: sure, during oscons

[18:28] <autrijus> never really talked with him though

[18:28] <nothingmuch> i thanked him once

[18:28] <nothingmuch> it was silly

[18:28] <autrijus> I thanked him once too.

[18:28] <autrijus> it was silly too.

[18:28] <nothingmuch> thanked him for my bass, and my cameras

[18:28] <iblech> Definitely! Then I think, as &eval is pretty important, esp. as you can have (limited) access to the interpreter mode of Pugs at runtime (eval "BEGIN \{ $code \}"), we should go for option 3. But I don't know how much harder it is to implement #3 instead of #2

[18:29] <autrijus> iblech: it's not that hard, but needs some bookkeeping

[18:29] <Limbic_Region> oh - was just wondering if the personalities at the next hackathon would naturally be synergetic

[18:30] <autrijus> nothingmuch: I thanked him for introducing me to 1)Tolkien 2)Christianity

[18:30] <nothingmuch> i think everyone is liberal enough for it to work out =)

[18:30] <Limbic_Region> not exactly what I meant

[18:30] <Limbic_Region> personality was probably not the right word there

[18:31] <Limbic_Region> s/personality/work methods/

[18:31] <nothingmuch> ah

[18:31] <autrijus> we'll figure something out :)

[18:31] * autrijus enjoyed working w/ chip and leo a lot

[18:31] <nothingmuch> everyone is wiki head enough for it to work out =)

[18:31] <nothingmuch> lets of "get it done" attitude people around,

[18:31] <Limbic_Region> I didn't know about chip - but I certainly knew you would get a lot done with leo

[18:31] <nothingmuch> and some really amazing minds

[18:32] <Khisanth> nothingmuch: you went fishing with Larry?

[18:32] <iblech> autrijus: Ok, then my vote is for option 3, and I'll try to help where I can :)

[18:32] <nothingmuch> Khisanth: no

[18:32] <nothingmuch> I met him at the italian code jam

[18:32] <nothingmuch> and i thanked him for giving me perl which gave me the ability to be hired

[18:33] <nothingmuch> despite the fact that I have no experience, academic merrit, or references

[18:33] <Khisanth> so how did the fish get involved?!

[18:33] <nothingmuch> fish?

[18:34] <Khisanth> bass!

[18:34] <nothingmuch> oh!

[18:34] <nothingmuch> bass as in Double Bass

[18:34] <nothingmuch> the musical instrument that I'm not buying another plane ticket to carry with me to canada

[18:34] <nothingmuch> http://doublebassforsale.free.fr/images/CB4.jpg

[18:35] <Khisanth> hmm I would charge you two tickets for that :)

[18:35] <nothingmuch> Khisanth: or I could rent a box for several hundreds of dollars

[18:35] <nothingmuch> and then pay an extra cargo charge thing

[18:36] <nothingmuch> or I could just rend one in canada for $25 a week

[18:36] <nothingmuch> and then not have any time to play it

[18:36] <Khisanth> btw, how is that thing standing up?

[18:36] <nothingmuch> notice that the head is in contact with the wall

[18:36] <Khisanth> it's that well balanced?

[18:37] <nothingmuch> well, yeah

[18:37] <nothingmuch> the head is quite thick (2")

[18:37] <nothingmuch> and it's a heavy thing

[18:37] <nothingmuch> so there's lots of pressure on it

[18:37] <nothingmuch> i always put mine on the side though, too paranoid

[18:38] <nothingmuch> or leaning in the corner, but in it' scase

[18:38] <nothingmuch> err, "its"

[18:38] <nothingmuch> (sorry Aankhen)

[18:38] <Khisanth> just put it in the corner :)

[18:38] <nothingmuch> no, it'll get scuffed and stuff

[18:38] <nothingmuch> and revarnishing is very bad for the instrument

[18:39] <nothingmuch> but with too much abrasion you need to do it eventually

[18:39] <nothingmuch> for scale, btw, that thing is about 2 meters tall

[18:40] <Khisanth> heh taller than me

[18:53] <autrijus> PIR mode now has a primitive that Eval mode doesn't :D

[18:53] <autrijus> it's the &leave builtin.

[18:53] <svnbot6> r4878, autrijus++ | * blocks can now return values: `my &x = { 3 }; say x()`

[18:53] <svnbot6> r4879, autrijus++ | * inline subroutine: `my &x = sub { return 3 }; say x()`

[18:55] <Limbic_Region> [14:53] <autrijus> PIR mode now has a primitive that Eval mode doesn't - dueling banjos anyone?

[18:56] <autrijus> :D

[18:56] <autrijus> now let's work with those pointy things...

[18:58] * Limbic_Region keeps his pointy thing as far away from autrijus as possible not knowing what he might make it do

[18:58] <svnbot6> r4880, autrijus++ | * the "leave" builtin -- first builtin supported by PIR but not Eval?

[18:58] <svnbot6> r4880, autrijus++ |     my &x = { leave 3 }; say x()

[18:58] <Limbic_Region> ok - enough bad humor - I am off

[18:58] <autrijus> ciao, Limbic_Region

[18:58] <autrijus> Limbic_Region: btw, you can use "leave" for return, as you've seen :)

[18:58] <Limbic_Region> safe trip to any/all that are heading off to Toronto soonish

[18:59] <Limbic_Region> right autrijus - I agree/like the behavior

[18:59] <autrijus> so it's still kind of okay to ditch the leading sub.

[18:59] <Limbic_Region> as long as you s/return/leave/ when you really mean leave

[19:05] <Darren_Duncan> autrijus, if you are indeed planning to roll a release today, then say so and I'll convert any failing LKT tests to TODOs or skips in preparation

[19:06] <autrijus> Darren_Duncan: I'm planning to roll a release today. but I had not triaged your bugs, and I still may fix them

[19:06] <autrijus> Darren_Duncan: if there are bugs you consider not worth fixing -- or indeed not pugs's problem, please skip/todo, but otherwise I'll handle them

[19:07] <Darren_Duncan> okay

[19:07] <autrijus> and sorry for the delay -- this segfaulting bird takes lots of time to tame :)

[19:08] <Darren_Duncan> I thought you had higher priorities

[19:08] <Darren_Duncan> so I was leaving be with the bugs I discovered

[19:08] <Darren_Duncan> no sense in repeatedly bringing them up

[19:08] <autrijus> right... 6.2.8 needs a working "make test" with pir to me

[19:09] <Darren_Duncan> still, the 3 most current bugs affecting LKT have corresponding t/*.t, so if those pass then we're good to go

[19:09] <autrijus> 'k

[19:10] <Darren_Duncan> I'll leave you alone then ... ping if you want my attention

[19:11] *** _mml_ is now known as _mml

[19:12] <svnbot6> r4881, iblech++ | Added tests for &leave.

[19:14] <putter> Well, I had an epiphany.  The flame of which landed on irc.perl.org's #perl6, and is thus consigned to the great bitbucket.

[19:15] <putter> I've been off-and-on banging on perl6 rules.

[19:16] <putter> You want something like rules in a language, you write parsers, and parsetrees, and tree nodes, and emitters for nodes, and classes to collect the emittions into something useable, etc.

[19:16] <putter> p5 is a language

[19:16] <putter> p6 isnt

[19:16] <putter> we're in meta-language land.  prolog, haskell, etc.

[19:17] <putter> macro inline:<|>($a,$b) {"try{$a}; try{$b} if failed;"}

[19:18] <putter> sub term:<^>() {$_.pos == 0 or fail}

[19:18] <autrijus> *Main> runPIR "say({3 + $^x}.(4))"

[19:18] <autrijus> 7

[19:18] <_mml> thus guaranteed a special corner in the language museum, reserved for cute, academic experiments?

[19:18] <putter> etc.

[19:19] <autrijus> right. perl6 specialises in parse-level metaprogramming.

[19:19] <autrijus> that is, at tokenisation level

[19:20] <autrijus> whilst almost everything else works at AST level.

[19:20] * putter soooooooooooooooo needs officemates and whiteboards... my designspace explorations just dont work otherwise. :--(

[19:21] <putter> autrijus: ahhh, I hadn't thought of it that way.

[19:21] <putter> neat

[19:22] <putter> _mml: prolog had a specific, limitted, computation model which prevented it from being a "general" programming language.

[19:23] <putter> haskell, until historically recently (monads), was also very constrained.  and still perhaps has a somewhat high barrier to entry.

[19:23] <_mml> and as we can see, i've totally mischaracterized haskell.  it's obviously catching on in some quarters.

[19:23] <svnbot6> r4882, autrijus++ | * parametric blocks now works as specced!

[19:23] <svnbot6> r4883, Darren_Duncan++ | Locale-KeyedText update : changed t/LKT_30_TrnMsg.t to skip all tests for release, citing Translator.translate_message() not implemented yet

[19:24] <Darren_Duncan> so I todo'd the one test block that actually should not succeed ... the rest should work as is for the release

[19:24] <autrijus> cool, thanks Darren_Duncan

[19:24] <putter> p6... is the first meta-programming language extreme enough that one should be able to embed, whole hog, syntax, semantics, and runtime, other languages.

[19:25] <Darren_Duncan> "should" as in when pairs.t and exists.t pass all their tests

[19:25] * autrijus notes that ML was designed for that explicit purpose... hence its name

[19:26] <autrijus> but yeah, p6 raised the metaprogramming level to an almost sentient degree

[19:26] * putter wonders why ML didnt catch on...

[19:26] <_mml> didn't catch on?

[19:26] * autrijus notes OCaml and Haskell is doing fine...

[19:26] <_mml> what autrijus said.

[19:26] <arcady> it caught on enough for me to have to learn OCaml

[19:27] <putter> for a rather non-change-the-world (yet) value of "catch on"

[19:27] <autrijus> as in, still part of the long tail, you mean

[19:27] <autrijus> that is undoubtedly true.

[19:27] <lightstep> lisp has cgol

[19:28] <autrijus> lightstep: indeed, and 16,384 similar things :)

[19:28] <Aragone> gah

[19:28] <lightstep> that was a reply to "embed, whole hog, syntax, semantics, and runtime"

[19:28] <putter> p6 - noun.  The means by which ML took over the world.  See Brain, Pinky.

[19:29] <Aragone> 90 minutes of 3-on-3 ultimate frisbee in 32 degree heat is tantamount to geeky suicide

[19:30] <putter> For us unfortunates not attending Toronto... any idea what the logistics are?  Nightly syncs of the repository? ...

[19:31] <autrijus> I have absolutely no idea until we meet John

[19:31] <putter> k

[19:34] <svnbot6> r4884, iblech++ | Makefile.PL, util/run-smoke.pl -- make pirsmoke.

[19:36] <autrijus> ooh iblech++

[19:36] <autrijus> pirtest too, please? :)

[19:39] <iblech> Sure, if you tell me which file generates the "test" target :)

[19:39] <autrijus> it's a MakeMaker thing, sadly

[19:39] <autrijus> maybe have it call $(MAKE) test with some env?

[19:39] <autrijus> not sure. don't waste too much time on it if it's a lost cause :)

[19:42] <autrijus> hm, chip pmichaud and me will all be in hackathon

[19:42] <autrijus> we should coordinate our Tuesday talk a bit

[19:44] <iblech> autrijus: re. Ok, I'll leave that to Somebody Else then :)

[19:50] <autrijus> :)

[19:50] * autrijus meanwhile finished iteration.

[19:50] <autrijus> moving on to other control structures...

[19:50] * autrijus praises the power of abstraction and domain-specific languages

[19:50] <autrijus> (PIL and PIR, in this case)

[19:51] <svnbot6> r4885, autrijus++ | * iteration!

[19:51] <svnbot6> r4885, autrijus++ |     for 1..10 -> $x { say $x }

[19:55] * iblech gonna sleep and is eager to read tomorrow's/today's journal :)

[19:55] <putter> autrijus:  pirtest: HARNESS_PERL_SWITCHES='-B PIR' make test

[19:56] <autrijus> putter: please checkin :)

[19:56] <iblech> That's all? Can't believe =)

[19:56] <iblech> Night :)

[19:56] <putter> once you _find_ a hook that works...

[19:57] <putter> Night. :)

[19:57] <autrijus> :)

[20:12] <svnbot6> r4886, autrijus++ | * add some missing type sigs.

[20:12] <svnbot6> r4887, putter++ | Added target pirtest to Makefile.PL.

[20:15] <putter> Is there a particular version of parrot against which we are testing...?

[20:15] <autrijus> yes, trunk.

[20:15] <putter> :)

[20:16] <autrijus> we won't have 0.2.2 until yapc is over :-/

[20:16] * autrijus ponders if we should enter ICFP contest with perl6.

[20:16] <autrijus> it's just next week.

[20:16] <autrijus> that sounds like certain suicide, but yet we have the entire YAPC::NA as brainpower

[20:17] <autrijus> last year perl5 won the lightning division :)

[20:17] <svnbot6> r4888, autrijus++ | * while loop and until loop

[20:17] <svnbot6> r4889, autrijus++ | * squash another warning

[20:17] <autrijus> (well, perl5 / m4 / c++ / java really)

[20:18] <autrijus> (but the main division is all dominated by Haskell)

[20:23] <putter> re parrot version, I was thinking of some specific revision number.  so folks can use some known exercised version, rather than whatever has been most recently checked in.

[20:25] <autrijus> given monthly release, that doesn't sound too attractive.

[20:26] <putter> k

[20:31] <svnbot6> r4890, iblech++ | Makefile.PL -- Don't clean Parrot.hs*, as Parrot.hsc doesn't exist any more,

[20:31] <svnbot6> r4890, iblech++ | and tried to make putter++'s pirtest target work on Win32 (but I can't

[20:31] <svnbot6> r4890, iblech++ | check...).

[20:34] <autrijus> Parrot.hsc is still there no?

[20:34] <autrijus> as Pugs.Embed.Parrot.hsc

[20:34] <autrijus> we still need to clean them

[20:34] <autrijus> please revert :)

[20:35] <putter> Could someone with windows (assorted flavors) determine if the following works:  FOO='bar' cmd  , that is, setting the environment variable FOO to bar for the duration of command cmd?  Thanks.

[20:37] <wilx> Nope, I don't think so.

[20:39] <putter> is there an idiom?  or just OLD=$FOO\nFOO='bar'\ncmd\nFOO=$OLD

[20:39] <putter> ?

[20:42] <svnbot6> r4891, autrijus++ | * globals: @*ARGS, $*PROGRAM_NAME, $*IN, $*OUT, $*ERR

[20:43] <putter> does PIR currently have a looping construct implemented?

[20:44] <autrijus> loop(), while(), until() and for()

[20:44] <autrijus> is all there.

[20:44] <wilx> putter, http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/ntcmds_shelloverview.mspx

[20:45] <wilx> setlocal/endlocal

[20:46] <putter> autrijus: with fresh parrot and pugs, I see Name '&statement_control:while' not found

[20:46] <putter> wilx: thanks, looking...

[20:46] <autrijus> putter: your pugs is ancient

[20:47] <autrijus> putter: it landed well over 30 mins ago :)

[20:47] <putter> oy

[20:47] <putter> :)

[20:47] <svnbot6> r4892, iblech++ | Makefile.PL -- D'oh, just noticed *Embed*/Parrot.hsc is of course still

[20:47] <svnbot6> r4892, iblech++ | generated and thus needs to be cleaned in make clean (mixed Embed/Parrot

[20:47] <svnbot6> r4892, iblech++ | with Compile/Parrot)...

[20:48] <putter> by the time you compile it... it's obsolete. ;)

[20:48] <autrijus> because we're a bunch of acceloraptors here!

[20:48] <putter> well... "by the time you do a clean build, it's obsolete!"

[20:49] <putter> ;)

[20:49] * autrijus notes that PIR runs an infinite loop very fast

[20:49] <wilx> This looks like it is worth looking at too: http://www.microsoft.com/technet/prodtechnol/Windows2000serv/support/FAQW2KCP.mspx

[20:53] <putter> wilx: I looked through it (FAQ), but didnt immediately see something apropos.  Did I miss it?

[20:54] <wilx> Nope, just that it shows how to do some stuff using CMD.

[20:56] <Khisanth> autrijus: that sounds like an oxymoron

[20:56] * putter is tempted to punt w‌indows compatibility of "make pirtest"... windows users can always just set the harness flag environment variable themselves and simiply run make test...

[20:58] <putter> Someone with a windows box could try editing Makefile.PL, using $OS or whatever it is (p5) to selectively generate appropriate code.  Hmm... or google to see if there is discussion of the issue?

[20:59] <putter> I cant immediately think of one idiom which is os-independent.

[21:00] <_mml> perl -e '$ENV{FOO} = "BAR"; exec("$ENV{MAKE} test")'

[21:00] <_mml> putter: the above, maybe?

[21:01] <_mml> putter: except you'll have to change the ' to " and use something like qq() inside to get CMD compatibility, but that should work, eh?

[21:02] <autrijus> I thought the setting of env is part of nmake language.

[21:04] <putter> _mm++

[21:07] <autrijus> bbiab...

[21:07] * autrijus preemptively fills in a journal entry

[21:08] <putter> ahh, working on pugs.  ^x^b Makefile.PL  Go to line to be changed.  Start edit.  File changed on disk, update from disk?  Yes.  Edit already done. ;)

[21:09] <autrijus> lol :)

[21:13] <putter> If shift() is _still_ undefined, I'll add it to the Prelude/PIR...

[21:14] <putter> I wonder if we could get whoever runs svnbot to increase the reporting frequency...?

[21:14] <putter> _mml++ # typo correction of _mm++

[21:14] <putter> ;)

[21:18] <putter> Hmm... It would be nifty if there was a read eval print loop for pugs -B PIR...

[21:23] <putter> Name '$num_of_tests_planned' not found?

[21:23] <svnbot6> r4893, putter++ | Added shift() to Prelude/PIR.pm.

[21:23] <kungfuftr> bah... more moaning about ./method() yargh

[21:24] <Khisanth> ./method() certainly does look a bit weird

[21:25] <mugwump> "terminally cute" was I think how Larry described it

[21:25] <putter> Hmm... if one could do  macro bareword($x){"./$x"}  then folks could have all sorts of fun...

[21:26] * Khisanth wonders how he just accidentally typed a ¿

[21:26] <kungfuftr> i say... .damianisinsan^H^H^Hgod/method()

[21:27] <Khisanth> what is ./method() suppose to mean anyway?

[21:27] <Khisanth> it looks too much like a executing a program 

[21:28] <kelan> it calls the method in the current invocant

[21:28] <kungfuftr> ie: $self

[21:28] <putter> .foo == $_.foo  ./foo == $?SELF.foo   (i believe)

[21:28] * Khisanth wonders why $self has to be the ugly one

[21:28] <_mml> oh that is just too cute.

[21:29] <kelan> i don't like the ./foo syntax. the slash looks like its separating the dot from the method name

[21:29] <kungfuftr> then there's ../foo() too iirc

[21:29] <Khisanth> and whatever happened to less line noise? :)

[21:29] <kelan> makes it look different than every other method call, to me

[21:29] <kungfuftr> kelan: IT'S SUPPOSED TO

[21:30] <putter> hmm... depending on the macro evaluation spec, one might be able to swap them...

[21:30] <Khisanth> kungfuftr: method calls aren't suppose to look like method calls?

[21:30] <kelan> i agree with Khisanth. method calls should look like method calls

[21:31] <kelan> i don't mean it makes it look like a different kind of method call

[21:31] * putter now has his heart set on  macro bareword ...

[21:31] <kelan> it makes it look *unlike* a method call

[21:31] <kelan> like its doing something else

[21:31] <kungfuftr> kelan: and .: and .:: are any better?

[21:32] <Khisanth> why the seperator thing?

[21:32] <putter> Now, if we can just do  macro whitespace:<\n> ... we wont need to write _parsers_ for ruby/python, just...

[21:33] <putter> ;)

[21:33] <kelan> kungfuftr: yes because the colons are made of dots, although i don't particularly like those either. but better than ./

[21:33] <kungfuftr> Khisanth: .foo is a method call on the current thing that's in $_... the seperator is to call it on $?SELF which may not be the same as $_

[21:33] <kelan> what i would prefer most is what almost every other OO language does: have a short keyword that means self

[21:33] <kelan> like `me` or `self`

[21:34] <kungfuftr> kelan: this is perl... not ruby!

[21:34] <kungfuftr> *slap*

[21:34] <kungfuftr> =0)

[21:34] <kelan> right, this is perl, so lets use ugly and unintuitive punctuation instead of meaningful names

[21:35] <kungfuftr> kelan: damn straight

[21:35] <putter> kelan: macro self(){"$?SELF"}  done.

[21:35] <Khisanth> kungfuftr: my main issues with that is 1) I am trying avoid having to constantly retype the seperator 2) I also want to avoid constantly assigning to $_ 3) 2 can be solve by never using $_ except for storing $self but then there would be no point in having $_

[21:36] <kungfuftr> Khisanth: foreach(@list){ .say }

[21:37] <kungfuftr> s/each//;

[21:37] <Khisanth> sure if I always have a list of objects :)

[21:37] <putter> macro infix:<\n>($lines_before,$lines_after){...} ?

[21:38] <Khisanth> for ($foo) { .say } is something I would expect for Perl 5

[21:38] <kungfuftr> Khisanth: everything in perl6 is an object

[21:39] <kungfuftr> "Hello World".say

[21:39] * putter is writing splice()...

[21:40] * Khisanth starts having nightmares of Perl 6 resembling Java

[21:40] <arcady> Java's main problem is that it makes you write too much crap

[21:40] <Khisanth> everything is an object but use of OOP is discouraged? :p

[21:40] <arcady> and anyway, in java not everything is an object

[21:41] <arcady> such as fuctions and classes

[21:41] <arcady> also, Java is not an object

[21:41] <Khisanth> arcady: but the whole nightmare is having to write too much crap, not that everything is an object

[21:42] <arcady> and perl is exactly the opposite of writing too much crap

[21:43] * Khisanth wonders about the hoop jumping to call a method

[21:43] <arcady> $object.method(args)

[21:43] <arcady> or method $object: args

[21:45] <arcady> also, attribute accessors are automatically generated for you

[21:45] <arcady> no need to make a getFoo() and setFoo() for every foo in your class

[21:56] <Khisanth> hmm

[21:56] <Limbic_Region> putter - just reading through the logs and noticed the question on how to set an env var in Win32 - use set

[21:56] <Limbic_Region> set foo=bar

[21:57] <Khisanth> kungfuftr: so for @array -> $element { .method() } would not DWIM?

[21:58] <revdiablo> Khisanth: I think it would, unless something drastic has changed recently

[21:59] <putter> Limbic_Region: someone remembered the portable perl makefile idiom of \$(PERL) -e "now in portable perl land, set env and call system()"

[21:59] <putter> tnx.

[21:59] <revdiablo> Khisanth: though I guess it depends on what you mean :)

[22:03] <Khisanth> revdiablo: if .method always means $_.method() then it would not

[22:05] <Limbic_Region> right putter - I saw that as I continued in the log

[22:05] * Limbic_Region must eat now

[22:05] <revdiablo> Khisanth: what behavior is WYM?

[22:05] <Limbic_Region> wave &

[22:05] <Khisanth> revdiablo: call the method for each item of the list of course :)

[22:06] <arcady> for @array { .method() } does that definitely

[22:06] <kungfuftr> Khisanth: you're explicitly stating an alias there... so if it's DWYM... then your logic would be in correct

[22:06] <revdiablo> Khisanth: so '.method()' should default to the first argument of the block, or something?

[22:06] <revdiablo> s/default to/use/

[22:06] <arcady> actually, the logic there would be that $_ is still used

[22:07] <arcady> and is an alias for the first argument of the block

[22:07] <kungfuftr> you can't type random garbage into a computer and expect it to do work, retardo </endquote>

[22:08] <revdiablo> arcady: yeah, that might be reasonable, as long as you don't mind $_ being clobbered constantly (which is something I generally assume will happen, anyway...)

[22:08] <Khisanth> sure but I also don't expect a language to encourage to me to write unclear code

[22:08] <Khisanth> I think you would be the first to kill me if I were you coworker and I use $_ for everything :)

[22:08] <arcady> what you wrote is unclear

[22:08] <revdiablo> for @array -> $element { $element.method() } # unclear?

[22:08] <arcady> revdiablo's version is way more obvious

[22:09] <arcady> why have an $element argument that is magically used though you never mention it again?

[22:09] <kungfuftr> arcady: my point exactly

[22:09] <arcady> for @list -> $a, $b { .method() }

[22:09] <arcady> what then?

[22:09] <Khisanth> revdiablo: ah you see my whole point is why "waste" a perfectly good .method on something that I see as being less likely to be used :)

[22:10] <revdiablo> Khisanth: well,  for @array { .method() }  would still DWYM

[22:10] <revdiablo> Khisanth: doesn't seem like a waste to me, *shrug*

[22:10] <kungfuftr> reduces line noise

[22:10] <arcady> in fact there's a neat idiom that the current .method() syntax makes possible

[22:11] <revdiablo> how about:  for @array -> $element { given $element { .method() } } # snicker

[22:11] <arcady> given($object) { call lots of methods on it }

[22:11] <Khisanth> revdiablo: but that form is rather undesirable for a loop with more than one or two statements

[22:11] <kungfuftr> Khisanth: then use give an explicit pointy

[22:12] <kungfuftr> _pragmatism_

[22:13] <arcady> Khisanth what you're looking for is the dwim() function

[22:13] <kungfuftr> dwim_not_what_i_think_i_said()

[22:38] <Khisanth> arcady: then all discussion is pointless and loop { dwim() } would be a solution to everything and ... all programmers would be out of work :)

[22:38] <nothingmuch> perl -e "";

[22:38] <nothingmuch> taxi gets here in an hour

[22:38] <nothingmuch> after that I have 24 more waking hours, bare minimum

[22:39] <nothingmuch> i'm already tired

[22:39] <nothingmuch> =(

[22:39] <kungfuftr> good job i've also got sysadmin in my list of coporate experiences

[23:07] <Limbic_Region> wholly cow

[23:07] <Limbic_Region> I was just running pugs -CPIR on one of the examples 

[23:07] <Limbic_Region> it was giving some undiscernable error before

[23:07] <Limbic_Region> but now it is a whole lot of PIR

[23:08] *** coral is now known as crysflame

[23:08] *** crysflame is now known as coral

[23:21] <putter> nothingmuch: have a good trip!

[23:21] <putter> to all travelers. ;)

[23:23] <Juerd> and LSD users

[23:39] <svnbot6> r4894, putter++ | Added a draft of splice() to Prelude/PIR.pm.  It is untested, apparently triggering (execution) bugs in both PIR and regular pugs.

[23:45] <svnbot6> r4895, putter++ | quickref/namespace correction.

[23:45] <svnbot6> r4896, putter++ | Removed obsolete/incorrect other/rules_bootstrap. (author)

