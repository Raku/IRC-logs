[00:33] <rafl> theorbtwo: ;-)

[00:34] <rafl> theorbtwo: It's kind of usual in germany though. night == Nacht; eight == acht; N8 == Nacht.

[00:36] <theorbtwo> Oh.  I suppose that makes sense... in German.

[00:37] <rafl> Well, not even there, imho.

[00:37] <theorbtwo> It's stupid still, but at least it makes sense, which is something.

[02:45] <luqui> Hol√°steis!

[02:49] <scook0> err...hi

[02:49] <scook0> nice 'role' post, btw

[02:49] <theorbtwo> A happy all-holows-eve to you too.

[02:49] <luqui> thanks

[02:50] * luqui is going to be whatshisface from Clockwork Orange

[02:50] * theorbtwo has nothing planned, sadly.

[02:54] *** justathe1ry is now known as justatheory

[03:19] <buu> All holows, eh?

[03:20] <luqui> wow... http://www.securetactics.com/SpySoftware

[03:20] <luqui> commercial trojans

[04:00] <nothingmuch> Alex deLarge methinks

[04:00] <nothingmuch> he's a very froody droog

[04:00] <autrijus> *purr*

[04:01] * nothingmuch remembers why he doesn't play computer games

[04:01] <nothingmuch> but it's too late again ;-)

[04:01] <autrijus> why?

[04:01] <nothingmuch> addiction problems

[04:01] * nothingmuch loses track of time

[04:01] <nothingmuch> and gets nothing done

[04:01] <nothingmuch> but my brain needs the rest

[04:01] <nothingmuch> i've been on the brink of burning myself out for weeks now

[04:02] <autrijus> do remember that this will pass, and get enough rest

[04:02] <nothingmuch> aye

[04:02] * nothingmuch is constantly letting his people die in Rainbow Six 3

[04:02] <nothingmuch> which is a bad thing

[04:02] <autrijus> I am _very_ happy that you did not let me introduce you to nethack.

[04:02] <nothingmuch> but I cant do any better

[04:03] <nothingmuch> ongoing things that can be paused are usually not a big problem

[04:03] <nothingmuch> i tend to play several minutes a day of those

[04:03] <nothingmuch> but i'm still afraid of it ;-)

[04:03] <luqui> nothingmuch, yes, that's the one

[04:04] <nothingmuch> if we would have holloween i would dress up as the korova milk bar to complement

[04:04] <luqui> If my desktop's hard drive were present I would probably be addicted to rag doll kung fu at this point

[04:04] <nothingmuch> i'll need some mannequins, and milk, and a high end water cooling system ;-)

[04:04] <luqui> on the other hand, the reviews weren't that great

[04:04] <nothingmuch> (cpu cooling system)

[04:04] <luqui> :-p

[04:04] <nothingmuch> rag doll kung fu?

[04:05] <luqui> an experimental fighting game that I've been looking forward to

[04:05] * luqui is a fan of fighting games... or rather would be if any of them were any good

[04:05] <nothingmuch> hmm... no mac version?

[04:05] <luqui> nein

[04:06] * nothingmuch watches the trailer instead

[04:09] <nothingmuch> that would be very cool with a programming edge in it

[04:09] <luqui> what would you program?

[04:10] <nothingmuch> combos

[04:10] <luqui> aa

[04:10] * nothingmuch really likes tekken (3) because of all the juggling

[04:10] <nothingmuch> it's a very elegant way to kick ass

[04:11] * luqui always found that annoying, being at the kicked ass side

[04:11] <nothingmuch> ah

[04:11] <luqui> I think Soul Calibur is about as good a fighting game as they've made yet

[04:11] <nothingmuch> i am always on the ass kicked side, except in tekken and unreal tournament

[04:11] * nothingmuch hasn't played that yet

[04:12] <luqui> it's pretty good.  But it's still attached to the realtime/buttonmash/energybar paradigm.

[04:12] <luqui> Glorified tekken, as it were.  It's just very well balanced.

[04:12] <nothingmuch> buttonmashing is not that fun

[04:12] <nothingmuch> what I like in tekken is that you sometimes need to wait a second to get something in

[04:13] <nothingmuch> if you are slightly less trigger happy than 100% you will win

[04:13] <scook0> ever tried virtua fighter?

[04:13] <buu> You know what's better? Quake.

[04:13] <luqui> heh

[04:13] <nothingmuch> scook0: my parents didn't let me play violent games at that age ;-)

[04:13] * nothingmuch doesn't like quake

[04:13] <buu> FREAK.

[04:13] <nothingmuch> it's not as fun aasUT

[04:13] <buu> meh

[04:13] <buu> Same thing.

[04:13] <nothingmuch> nuh uh

[04:13] <nothingmuch> UT has more style

[04:13] <buu> Does UT have strafe jumping and such?

[04:13] <luqui> I remember when there was just Quake.  No Quake 2, no quake 3 arena.  When you said "I'm going to go online and frag somebody", you just went online and fragged somebody.

[04:13] <buu> heh

[04:13] <nothingmuch> you mean strafing in the air? or jumping sideways?

[04:14] <buu> I remember playing q2 over a dialup

[04:14] <buu> nothingmuch: Nope.

[04:14] <luqui> (I actually never played Quake... any version.  I'm not a big fan of FPSs)

[04:14] <luqui> By which I mean I despise them

[04:14] <buu> Sucks to be you!

[04:14] <nothingmuch> that wasn't a yes or no question, that was multiple choice ;-)

[04:14] <buu> (0 || 0) == 0!

[04:14] <nothingmuch> uh, your point being?

[04:15] <buu> That 'no' means no to both.

[04:15] <luqui> But 0! == 1

[04:15] <luqui> :-)

[04:15] <buu> luqui: 0! is a syntax error!

[04:15] <nothingmuch> ah

[04:15] <nothingmuch> so wtf is strafe jumping if it's not one of those?

[04:15] <scook0> also !0 == 0!

[04:15] <buu> nothingmuch: Strafe jumping is when you accelerate via jumping

[04:15] <luqui> woah

[04:15] <luqui> that's scary

[04:15] <nothingmuch> ah

[04:15] <buu> ?eval 0!

[04:15] <evalbot_7763> Error:  unexpected "!" expecting "x", "d", octal digit, "o", "b", digit, fraction, exponent, term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[04:15] <scook0> those crazy physics exploits?

[04:15] <nothingmuch> that's bad game design

[04:16] <buu> nothingmuch: Bad.. game.. de.. what? What the hell? How can you even make that claim?

[04:16] <buu> Obviously the rocket launchers in UT are bad game design, cause they shoot rockets.

[04:16] <buu> I mean, hey, if we don't need logic..

[04:16] <luqui> ?eval sub postfix:<!> ($x) { if $x == 0 { 1 } else { $x * ($x-1)! } }   5!

[04:16] <evalbot_7763> Error:  unexpected "i" expecting ";", statements or "}" reserved word 

[04:16] <luqui> qua?

[04:16] <nothingmuch> ?eval multi postfix:<!> (0) { 1 }; multi postfix:<!> ($n) { $n * ($n - 1)! }; 5!

[04:16] <evalbot_7763> Error:  unexpected "0" expecting formal parameter, ":" or ")" 

[04:16] <luqui> didn't that used to work?

[04:16] <nothingmuch> darn

[04:17] <nothingmuch> buu: it's bad game design because it's stupid behavior

[04:17] <buu> nothingmuch: You mean stupider than taking a rocket in the face and surviving?

[04:17] <nothingmuch> someone didn't notice the fault in the physics engine and jump parameters

[04:17] <scook0> I'm not sure it was deliberate

[04:17] <buu> nothingmuch: Dude, they put it in there deliberately.

[04:17] <theorbtwo> nothingmuch: Because it's not like the real world?

[04:17] <buu> Southen: It was deliberate after the first patch =]

[04:17] <nothingmuch> no, because it's imbalanced

[04:17] <buu> oh

[04:17] <nothingmuch> it would be nicer if:

[04:17] <buu> Obviously only one player can strafe jump.

[04:17] <nothingmuch> you could jump around and be slow

[04:17] <nothingmuch> or be a sitting duck and go fast

[04:18] <buu> Oh wait, every player can strafe jump. Thus making it balanced.

[04:18] * luqui thinks that you only have bad game design when you make a game that isn't fun, because you've missed the whole point of making a game.  For example, Deus Ex 2.

[04:18] <nothingmuch> what does deus ex do wrong?

[04:18] <luqui> Deus Ex was great.  Deus Ex 2 was too caught up in being a movie to be a good game.

[04:19] <buu> Deus Ex was so awesome. I've always wanted to play DX2, but everyone hated it =[

[04:22] * scook0 interleaves IRC with rounds of counterstrike...

[04:23] <luqui> counterstrike was a FPS that I actually liked pretty well

[04:25] <scook0> I never got into it in the HL1 days

[04:25] <nothingmuch> oh god: http://www.boingboing.net/2005/10/28/no_trademark_on_stra.html

[04:25] <luqui> scook0, likewise.  I started at CS:S

[04:26] <theorbtwo> Well, at least they came up with a reasonable result, even if their reasoning was completely bonkers.

[04:26] <luqui> nothingmuch, is it just me, or did they completely miss the point?

[04:27] <nothingmuch> who  did?

[04:27] <luqui> the article

[04:27] <luqui> about strawberries

[04:27] <luqui> the court

[04:28] <nothingmuch> yep

[04:28] <theorbtwo> The question was "can the scent of fresh strawberies be trademarked".

[04:28] <theorbtwo> Their answer was "no".

[04:28] <theorbtwo> Good answer.

[04:28] <nothingmuch> i was actually "oh god"ing more at the court than the company

[04:29] <nothingmuch> theorbtwo: the sad thing is that the answer was actually 'no, because strawberies have *five different* scents'

[04:29] <theorbtwo> Yes.

[04:29] <nothingmuch> on the other hand, grass has one scent, so that's OK

[04:29] <theorbtwo> Not such a good reason.

[04:29] <theorbtwo> Right.

[04:29] <theorbtwo> I hope this is largely poor reporting.

[04:30] * nothingmuch somehow doubts the BBC will make it sound this bad

[04:30] <nothingmuch> i trust the BBC more than I trust the judicinal and political systems that govern stuff that has to do with patents and trademarks and all that crap

[05:14] <stevan> luqui: ping

[05:15] <stevan> luqui: I sent you a mail re: theory.pod, I am trying to understand where it fits in with the metamodel/object-space/runtime stuff I have been working on 

[05:16] <stevan> I think it does all fit together to a degree, but the code in theory.pod is just so haskellish, so I am unclear of the details

[05:16] <stevan> anyway check your mail,.. I have to sleep now &

[05:50] <xinming> seen autrijus

[05:50] <jabbot> xinming: autrijus was seen 1 hours 47 minutes 50 seconds ago

[06:17] <xinming> by the way, Is continuation a bit like Rule in perl 6?

[06:22] <luqui> welll... uh

[06:22] <luqui> no

[06:22] <luqui> rule execution may be implemented using continuations, but the similarities end there

[06:22] <luqui> unless there is a similarity I am not seeing

[06:23] <xinming> luqui: thanks, need more reading on haskell tutorial.

[07:09] * autrijus proceeds to go to the airport (to brussels)

[07:10] <autrijus> see you in a few hours... safely in liz's place and ready to hack

[07:10] <autrijus> <- almost finished PickAxe2

[07:10] <autrijus> which fills my mind with weird constructs like

[07:10] <autrijus> my $x = if 3 then { 4 } else { 5 };

[07:10] <autrijus> (instead of)

[07:10] <xinming> autrijus: did you meet Larry? :-P

[07:10] <autrijus> my $x = do if 3 then { 4 } else { 5 };

[07:10] <autrijus> xinming: sure did

[07:11] <autrijus> worked on the tuple syntax a bit

[07:11] <xinming> my $x = 3 ?? 4 !! 5 ;

[07:11] <xinming> why not use this?

[07:11] <autrijus> sure

[07:11] <autrijus> but still

[07:11] <autrijus> my $x = given $y { when 3 { 4 } default { 5 } };

[07:11] <autrijus> (in ruby all statements are expressions)

[07:11] <autrijus> they don't have a Stmt form, it's all Exp

[07:12] <xinming> autrijus: hmm, did Larry consider construct the object using class name in some situation?

[07:12] <xinming> oh,ok

[07:12] <autrijus> xinming: I don't know... you mean like

[07:12] <autrijus> my $dbh = DBI(dsn => $dsn, user => 'foo');

[07:12] <autrijus> ?

[07:13] <xinming> yes.

[07:13] <autrijus> I think it makes sense. the "new" method though is then implicit in this case

[07:13] <autrijus> which may or may not be a good thing

[07:13] <autrijus> <- coding monkey, not really designer

[07:14] <xinming> hmm, sometimes, we don't need an instance to be held.

[07:14] <autrijus> :)

[07:14] * autrijus goes packing some more

[07:14] <xinming> class A { has $.a; method show { $.a.say } }; A( a = 5 ).show;

[07:15] <xinming> if we use A( a => 5 ).new.show,

[07:15] <autrijus> oh, singleton classes

[07:15] <autrijus> ?

[07:15] <xinming> the .new is a bit annonying

[07:16] <xinming> if there are many classes like this. :-P

[07:17] <autrijus> I tend to agree :)

[07:17] <xinming> hmm, most times, the small program will only hold only an instance of a class

[07:19] <xinming> page( document => "path/to/doc", save_to = "path/to/cache" ).process; cache( file = "path/to/cache" ).show;

[07:20] <xinming> that's what I think useful :-)

[07:20] <autrijus> nodnod... otoh you can do  

[07:21] <xinming> what does otoh mean? :-S

[07:21] <scook0> xinming: I can see Larry's point about wanting Classname($foo) to be a cast rather than a constructor though

[07:21] <autrijus> on the other hand

[07:21] <autrijus> class A { sub A is export { call ./new } };

[07:21] <autrijus> or something like that

[07:22] <xinming> hmm, Yes, I know, we can make method to be an constructor...

[07:22] <xinming> autrijus: But, If there are method... This is not handful..

[07:23] <scook0> but if we're going to have Haskell-style data types, we'll need a shorter construction form anyway

[07:23] <xinming> if there are lots of methods.

[07:23] <scook0> A:( a => 5 ).show  # woo, colon!

[07:24] <autrijus> _everybody_ wants colons!

[07:24] <scook0> because they're so versatile

[07:24] <xinming> hmm, why not make `my A: $o .= new( ... )` ?

[07:24] <autrijus> off to airport... bbl :) *wave* &

[07:24] <scook0> and because everything else is already taken

[07:25] <scook0> xinming: what are you suggesting?

[07:25] <xinming> and use A( ... ) as a constructor?

[07:25] <xinming> for now, we use `my A $o .= new( ... )` to get an instance.

[07:26] <xinming> hmm, and I saw Larry replied about my question,

[07:26] <xinming> So, I just suggest using `my A: $o .= new` instead of `my A $o .= new`

[07:26] <scook0> xinming: oh, I didn't realise you hadn't read it

[07:27] <scook0> I don't think that was his objection though

[07:28] <xinming> certainly, I won't be able to think as far as you can do, So, Just show my Humble opinion. :-(

[07:28] <xinming> http://www.nntp.perl.org/group/perl.perl6.language/23874

[07:39] <xinming> ?eval class A { has $.a; }; new A( a => 1 );

[07:39] <evalbot_7763> Error: cannot cast from VObject (MkObject {objType = (mkType "Class"), objAttrs = <ref>, objOpaque = Nothing, objId = 51}) to Pugs.AST.Internals.VCode (VCode) 

[07:40] <xinming> the perl 5 style doesn't works. :'(

[07:59] <xinming> anyone here can tell me if `class.new a => 1` would work? IMHO This is a bit like a function call without parenthesis.

[08:04] <Detonite> Morning

[08:05] <xinming> afternoon here. :-P

[08:06] <Detonite> Well the point comes across still I hope

[09:03] <rafl_> What tests do I need to run to chech if parrot embedding works?

[09:11] <scook0> xinming: `class.new:a(1)` should work

[09:12] <scook0> `class.new a=>1` won't work because method calls need either parens or adverbs

[09:16] <xinming> scook0: thanks

[09:17] <scook0> I think someone (Juerd?) was trying to get rid of the method-call-parens restriction, but I don't know if that went anywhere

[09:18] <xinming> hmm, by the way, how about `new class: a(1)` ?

[09:18] <xinming> indirect object syntax can be used in method calls, how about the constructor?

[09:19] <xinming> though, It's a special method.

[09:23] <scook0> I think `new MyClass: a => 1` or `new MyClass: :a(1)` would be the syntax

[09:24] <scook0> `new MyClass: a(1)` would call &a with arg 1

[09:36] * xinming thinks perl 6 might be the most complicated language in the world...

[09:36] <Juerd> scook0: I want method calls to be possibly parenless

[09:37] <Juerd> Just like sub calls

[09:37] <Juerd> It just takes everything until the end of the expression,

[09:37] <scook0> what was the original motivation for them being different?

[09:37] <xinming> so do I, as method is kind of sub...

[09:37] <Juerd> That the signature is unknown at compile time, and Perl cannot know how many arguments to take

[09:38] <Juerd> lc $foo, $bar is actually lc($foo), $bar

[09:38] <Juerd> While split $foo, $bar is split($foo, $bar)

[09:41] <scook0> do one-arg subs automatically become prefix-unary ops?

[09:41] <Juerd> It works like that in Perl 5

[09:41] <Juerd> And isn't specified to change, so yes.

[09:43] <scook0> I just wonder how that interacts with multis

[09:50] <Juerd> The same

[09:51] <scook0> (there are a lot of things I wonder about multis)

[09:52] <scook0> like being able to pass positional args using named-arg syntax

[09:53] <scook0> for singular subs, it's easy enough

[09:53] <scook0> for multis, it's *possible*, but I doubt it can be done efficiently

[10:09] <r0nny> yo

[10:09] <r0nny> rafl_: alive ?

[10:26] <rafl_> r0nny: Sure.

[10:29] <r0nny> rafl_: any idea hol long it will take to make your sixpan tools run under gentoo ?

[10:29] <r0nny> hol = how

[10:30] <rafl_> They already do, imho.

[10:30] <rafl_> Install dpkg and dpkg-deb and go for it.

[10:32] <r0nny> hmm

[10:32] <r0nny> rafl_: is there a svn repo up allready ?

[10:34] <rafl_> r0nny: kane uses p4. I'll set up an svk mirror soon.

[10:35] <r0nny> p4 ?

[10:35] <rafl_> perforce.

[10:35] <r0nny> sad - its comnerecial

[10:36] <r0nny> well - going to read the license

[10:36] <rafl_> Well, you don't need to pay for a usable version.

[10:36] <rafl_> I also like it, of course.

[10:37] <r0nny> atm im a monotone fan

[10:38] <rafl_> Well, pugs uses svn/svk. I'll check it in its repository.

[10:40] <r0nny> i allready installed p4

[10:41] <r0nny> repo url ?

[10:41] <rafl_> I don't have my laptop handy. I guess p4.elixus.org or something like that.

[10:43] <r0nny> argh - wont work :/

[10:44] <xerox> Howdy.

[10:44] <rafl_> r0nny: ask kane or look at the wiki.

[10:44] <rafl_> r0nny: BrainStorming. There's a p4 url somewhere.

[10:44] <r0nny> ok

[10:48] <r0nny> rafl_: cant do a checkout :/

[10:48] <rafl_> Ask kane.

[10:48] <r0nny> where is he ?

[10:49] <rafl_> [email@hidden.address] or on irc.perl.org sometimes.

[11:05] <drbean> h /server

[11:06] <r0nny> hmm

[11:06] <r0nny> hes online, but not answering :/

[11:07] <r0nny> guess hes busy

[11:41] <Juerd> ARGH

[11:41] <Juerd> The term "auto reference" really clouds vision and understanding

[11:41] <Juerd> It makes things seem MUCH more magical than they are.

[11:42] <Juerd> An array doesn't "auto reference" "when needed". 

[11:42] <Juerd> It returns a reference to itself in scalar context, that's all.

[11:42] <Juerd> And yes, Array context is a form of scalar context

[11:43] <Juerd> The only thing that's a bit magical is automatic *de*referencing

[11:44] <Juerd> THAT has the "when used as" thing.

[11:44] <Juerd> "when used as" an array, an arrayref dereferences automatically.

[11:44] <Juerd> But it's not so that an array "when not used as" an array, automatically references.

[11:45] <Juerd> Or, alternatively, call +@foo auto-elemsing

[11:45] <Juerd> And ~@foo auto-stringification

[11:45] <Juerd> Which it is NOT. It's not auto, it's explicit because of context.

[11:45] <xerox> Do you know in which debian package are uu{encode,decode} ?

[11:46] <Juerd> apt-cache search uuencode

[11:46] <Juerd> Pick the one beginning with s.

[11:46] <rafl_> apt-file search bin/uuencode

[11:51] <xinming> xern: try apt-cache search uuencode

[11:51] <Juerd> xinming: Now there's a novel idea.

[11:51] <xinming> sharutils

[11:51] <Juerd> xinming: Glad you thought of it.

[11:51] <Juerd> Otherwise he'd never have found it!

[11:52] <xinming> Juerd: :-) what I use apt-cache most time, as it might find some good related softwares. :-)

[11:52] <Juerd> xinming: I think I have to agree.

[11:53] <Juerd> (is blindness bliss too?)

[11:53] <xinming> apt-cache search uuencode|grep uuencode

[11:53] <xinming> aish - ish/base64/uuencoded_file converter

[11:53] <xinming> sharutils - shar, unshar, uuencode, uudecode

[11:54] <Juerd> You're so smart.

[11:55] <xinming> ...

[11:56] <Juerd> I just wish I had thought of that

[11:56] <theorbtwo> (apt-cache)++

[11:57] <xinming> apt-cache is a better tool most time in my opinion, apt-file is better for searching using absolute path for a file.

[11:58] <Juerd> I use both

[11:58] <Juerd> But apt-cache much more often

[11:58] * rafl_ as well.

[11:59] <rafl_> But for the given task (finding a binary) apt-file seems to be a better tool.

[11:59] * xinming nods.

[11:59] <Juerd> rafl_: Well, yes. But uudecode is often used within larger tasks, for which apt-cache might reveal integrated solutions

[12:02] * xinming really likes perl 6.

[12:04] <xinming> ?eval "asdfg/" ~~ rx:perl5{^(\w+)?/(\w+)?}; $1 ?? "true".say !! "false".say ;

[12:04] <evalbot_7763> true bool::true 

[12:04] <xinming> Is this a bug?

[12:04] <xinming> $1 get nothing, But it is true.

[12:04] <xinming> s/get/gets/

[12:04] <rafl_> ?eval "asdfg/" ~~ rx:perl5{^(\w+)?/(\w+)?}; $1.perl

[12:04] <evalbot_7763> "\\MkMatch \{matchOk = True, matchFrom = 0, matchTo = 0, matchStr = \"\", matchSubPos = [], matchSubNamed = \{}}" 

[12:05] <xinming> I know there is a property can be set using `0 but true`

[12:05] <xinming> But, Why here is true?

[12:06] <rafl_> ?eval "asdfg/" ~~ rx:perl5{^(\w+)?/(\w+)?}; "$1"

[12:06] <evalbot_7763> "" 

[12:06] <rafl_> I think it's a bug.

[12:06] <xinming> hmm, I don't know which to choose. :-)

[12:07] <xinming> we can say that it is a bug, because null string should be false.

[12:07] <rafl_> ?eval ""

[12:07] <evalbot_7763> "" 

[12:07] <rafl_> ?eval ?""

[12:07] <evalbot_7763> bool::false 

[12:07] <xinming> But, if we need the match status of the match, this might be right behaivour

[12:07] <rafl_> Well, write a test in t/pugsbugs/

[12:08] <xinming> Ok, >_<

[12:08] <theorbtwo> Write a test when you don't know what the correct behavior is?

[12:10] <rafl_> Hm, good point.

[12:12] <xinming> I think, This might be better to ask on the mailing-list.

[12:12] <Juerd> ?eval "foobar" =~ rx:perl5/(foo)(bar)/; "--$0--$1--"

[12:12] <evalbot_7763> Error: Can't modify constant item: VStr "foobar" 

[12:13] <Juerd> ?eval "foobar" ~~ rx:perl5/(foo)(bar)/; "--$0--$1--"

[12:13] <evalbot_7763> "--foo--bar--" 

[12:13] <Juerd> Simple case works.

[12:14] <Juerd> Re (\w+)? not matching anything: its variable should be false

[12:14] <Juerd> Not because it matched a null string, because it cannot match a null string.

[12:15] <Juerd> But because it didn't match, because of the + condition.

[12:26] <xinming> so many because... >_<

[12:26] <xinming> the test is written,

[12:26] <xinming> after the bug is fixed, Where should this test be?

[12:27] <xinming> Ok, I think I know, rules

[12:27] <theorbtwo> rules/p5, or something?

[12:27] <svnbot6> r7764 | yiyihu++ | add a bug test for numbered match variable. 

[12:28] <xinming> maybe

[12:28] <xinming> I wonder, what will `` be used for in perl 6?

[12:29] <xinming> still the same as perl 5?

[12:32] <scook0> xinming: I'm not sure, but I think `` will be reserved for the user

[12:32] <scook0> (for P5 ``, use q:x//)

[12:37] <xinming> Larry might think he used too much... :-P leave a ascii for user to play with

[12:38] <theorbtwo> qx isn't useful enough to take a rare ASCII character for.

[12:39] <scook0> bah, all Perl 6 users should just go out and buy APL keyboards :-P

[12:39] <theorbtwo> On the other hand, it has too-strong associations with qx in many people's minds to use for something else.

[12:39] <xinming> I ever saw a pic for a keyboard with only '1' and '0' on it...

[12:39] * xinming wants one...

[12:40] <scook0> theorbtwo: personally, I always see Haskell function-infixification

[12:40] <xinming> by the way, hmm, how do we type the unicode form of << ?

[12:41] <xinming> Do we have to open a program which list the unicode chars and lookup one by one?

[12:41] <xinming> characters*

[12:41] <scook0> xinming: I use AltGr+z

[12:41] <scook0> but it differs from platform to platform

[12:42] <xinming> I use debian.

[12:42] * xinming even don't know which key is AltGr

[12:42] <xinming> the Alt key at the right hand side?

[12:42] <scook0> the right Alt, but you need to enable a keyboard layout that supports it

[12:43] <xinming> hmm, which keyboard layout you use please?

[12:44] <scook0> it's a US-International one, let me check the name...

[12:44] <scook0> U.S. English w/ ISO9995-3

[12:45] <scook0> (I'm just using the Gnome keyboard config under Ubuntu)

[12:45] <xinming> I will choose Gnome also. :-)

[12:46] <xinming> haha, It's designed for perl 6

[12:46] <xinming> ¬´¬ª

[12:46] <scook0> :¬ª)

[12:46] <xinming> ‚Üí This might be better for method call.

[12:47] <xinming> How about the Zip operator?

[12:47] <theorbtwo> There's a docs/quickref/unicode.

[12:48] <xinming> theorbtwo: thanks

[12:48] <scook0> ¬• (shift-altgr-y)

[12:48] <theorbtwo> If it doesn't have the information you want, add to it.

[12:48] <theorbtwo> I personally use an en-US map with an en-UK keyboard, and use the extra key for compose.

[12:48] <theorbtwo> It works /wonderfully/ for me, but isn't terribly applicable to most people (who aren't Americans using European keyboards).

[12:49] <xinming> I wonder, Is there any differences between en-US en-UK keymap?

[12:49] <theorbtwo> Xinming: Lots.

[12:49] <theorbtwo> Not as many as en_US and de_DE, but still different enough to be quite annoying.

[12:49] <xinming> well, in China, all Keyboard layouts are almosts the same.

[12:50] <xinming> If you don't change the settings in Windows, all are the same. :-)

[12:50] <theorbtwo> American and European keyboards are even physically different -- the ones in Europe have an extra key.

[12:51] <scook0> where is that extra key, by the way?

[12:51] <theorbtwo> Just to the right of left shift.

[12:51] <xinming> hmm, the extra key is not the problem, the problem is that qwert and dvorak layout keyboard. :-)

[12:51] <xinming> Anyone here use dvorak layout?

[12:52] <scook0> I think Juerd might ... I don't myself

[12:52] <theorbtwo> Juerd uses a Dutch version of dvorak, which I think is of his own devising.

[12:53] <scook0> ooh, hardcore!

[12:53] <Juerd> theorbtwo: ?

[12:53] <theorbtwo> Oh, I didn't relize you were here.

[12:53] <Juerd> theorbtwo: My layout is US Dvorak.

[12:53] <theorbtwo> Oh.

[12:53] <theorbtwo> Well, I was close?

[12:53] <Juerd> My absence shouldn't be a reason for misinformation

[12:53] <xinming> hmm, for perl 6, there might cause another problem is that, if people wish to do programming in pure console Which can't display the unicode ...

[12:53] <Juerd> I use dvorak, not a Dutch version of it.

[12:54] <Juerd> US keyboards work wonderfully for Dutch.

[12:54] <Juerd> US QWERTY and US Dvorak

[12:54] <theorbtwo> Oh.

[12:54] <theorbtwo> I'm sorry, Juerd.

[12:54] <Juerd> Dutch keyboards exist, but they're not used much.

[12:54] <Juerd> IBM for a long time remained ignorant about this, and shipped Dutch keyboards.

[12:54] <integral> hmm, has someone changed how the makefile searches for parrot?  it can't find my parrot tree located at ../parrot :-/

[12:54] <Juerd> They finally understood their mistake only half a year ago.

[12:55] <theorbtwo> Juerd: US keyboards are normal there?

[12:55] <Juerd> theorbtwo: Yes.

[12:55] <xinming> I use Emacs, And ever wished to changed to dvorak layout. the problem is that ‚Üê‚Üì‚Üí for Emacs are all different... that makes me go crazy

[12:55] <Juerd> theorbtwo: Dutch keyboards suck.

[12:55] <Juerd> theorbtwo: And we Dutch know how to adapt to ASCII.

[12:55] <Juerd> theorbtwo: The only difference today is that we have US keyboards with a &euro; on the 5% key.

[12:55] <theorbtwo> That's odd... I would think you'd use some sort of more local keyboard.

[12:55] <xinming> in mainland China, all keyboard layouts are qwerty :-)

[12:55] <Juerd> theorbtwo: Why? We talk in ASCII nowadays

[12:55] <integral> the % key?!

[12:56] <Juerd> theorbtwo: Nobody writes "ij" as a single letter anymore, even :)

[12:56] <Juerd> Well, really old people do.

[12:56] <theorbtwo> Economies of scale.

[12:57] <Juerd> And we've adapted to ISO standards for currencies too

[12:57] <Juerd> People have used NLG here, instead of the florin sign

[12:57] <Juerd> Now, EUR, that is: unless you're a Windows cluebie, because then you are supposed to use altgr+5 for it, which generates (in Windows) chr(128), which shouldn't quite be the euro sign.

[12:58] <theorbtwo> Ugh... no, it shouldn't.

[12:58] <theorbtwo> I'm used to using ‚Ç¨ and ¬£ now, and use utf8 as my native charset.

[12:58] <Juerd> Also, we generally just leave out diaereses

[12:58] <theorbtwo> Dutch is readable like that?

[12:59] <Juerd> Certainly.

[12:59] <theorbtwo> Nifty.

[12:59] <xinming> ¬π¬≤¬≥

[12:59] <theorbtwo> Germans apparently get annoyed when you use the ascii versions.

[12:59] <xinming> How to type the small 456?

[12:59] <xinming> ¬º¬Ω¬æ{[]}\

[12:59] <xinming> oops, sorry,

[12:59] <Juerd> The diaeresis on the last e in Belgie is just to indicate that the "ie" isn't a diphthong

[13:00] <Juerd> Which without diaeresis it would be

[13:00] <Juerd> theorbtwo: It's not an umlaut, but a "trema".

[13:00] <theorbtwo> Superscript 1..3 have latin-1 chars for them, for some odd reason.  Superscript 4..9 and 0 do not, so there is no way to type them.

[13:00] <integral> the same as English,   different from German (umlaut ne diaeresis)

[13:00] <theorbtwo> Oh, right.  Forgot about that.

[13:00] <Juerd> theorbtwo: It only breaks diphthongs

[13:00] <Juerd> integral: diaeresis is the name for the glyph. Both are.

[13:01] <theorbtwo> German has well-defined ascii versions as well -- √ü becomes ss, √∂ becomes oe.  People don't like them.

[13:01] <integral> Juerd: my expression wasn't well typed then ;-)

[13:01] <Juerd> theorbtwo: I haven't met Germans who told me they hated the ascii versions.

[13:01] <Juerd> And in some German IRC channels I've visited, they were quite common

[13:01] <theorbtwo> Apparently some of Jess's ex-coworkers did.

[13:02] <rafl_> theorbtwo: I like them. The other chars aren't on my keyboard. :-)

[13:02] <Juerd> theorbtwo: We also don't use accents anymore

[13:02] <theorbtwo> Oh -- I didn't realize you were German, rafl.

[13:02] <Juerd> theorbtwo: Only in print, they're still commonly used

[13:02] <theorbtwo> I didn't realize Dutch ever did.  I'm fairly ignorant of Dutch.

[13:02] <rafl_> theorbtwo: I am, though.

[13:03] <Juerd> theorbtwo: Which means that our ways with a word processor are very different from our ways in e-mail, irc, usenet and web fora :)

[13:04] <theorbtwo> Living in Europe hasn't really disuaded me from my typically-American opinion on language:

[13:04] <theorbtwo> You should all learn ours.

[13:04] <Juerd> I rely on the spelling checker to give me tremas and accents.

[13:04] <Juerd> Web sites follow the normal rules too

[13:04] <Juerd> When composing HTML, I write Belgi&euml;

[13:04] <Juerd> Not Belgie

[13:05] <Juerd> A similar thing happens with Esperanto

[13:05] <Juerd> For printed documents, I care about the correct circumflexes

[13:06] <Juerd> For websites, I care about them, but they're too much trouble (lack of good HTML support)

[13:06] <Juerd> And anywhere else, I just use the ASCII variants

[13:06] <Juerd> cx, gx, hx, jx, sx, ux

[13:06] <integral> a

[13:06] <Juerd> See also juerd.nl/iksoj

[13:07] <Juerd> (Esperanto has no X in the alphabet, which makes these unambiguous)

[13:07] <theorbtwo> You should possibly revise http://en.wikipedia.org/wiki/Dutch_language#Writing_system

[13:09] <Juerd> It's still all correct

[13:09] <Juerd> It just doesn't cover typical Dutch adaption-because-of-laziness

[13:11] <theorbtwo> Yeah.

[13:11] <theorbtwo> I think that's very interesting from a socological viewpoint.

[13:11] <Juerd> That it doesn't mention the ij ligature is bad.

[13:11] <Juerd> (It's a letter, not a ligature, by the way)

[13:11] <Juerd> I've stopped editing wikipedia articles, though

[13:11] <Juerd> Most commonly the changes are undone within minutes

[13:12] <Juerd> By someone who claims they know more about the subject

[13:12] <Juerd> And if you prove your numbers are correct, then typically you're not allowed to use them, because they're part of an official report, which is copyrighted, blah blah.

[13:13] <Juerd> Wikipedia is a nice source of information

[13:13] <Juerd> Just don't trust any of it.

[13:15] <theorbtwo> That's one of the few really nice things I've found about American copyright law.

[13:16] <theorbtwo> Offical government reports are /not/ subject to copyright.

[13:16] <theorbtwo> This is in sharp contrast to the UK where not only are they copyright, they are a special magical copyright that /never/ expires.

[13:17] <Juerd> They're not subject to copyright here either. HOWEVER, wikipedians generally do not know this.

[13:17] <Juerd> And it's often very unclear whether something is government information

[13:17] <Juerd> Our goverment is partly run by private organizations, and their exact status is hard to discover

[13:18] <theorbtwo> That's also true of the US government these days.

[13:18] <Juerd> afk

[13:18] <theorbtwo> ...and things that a private company made that were paid for by the government /are/ subject to copyright.

[13:18] <theorbtwo> ...and to patent.

[13:18] <theorbtwo> Which quite annoys me.

[13:21] <svnbot6> r7765 | juerd++ | clarification

[13:51] <xinming> how to know if the user is logged in in web programming please?

[13:52] <xinming> Or anyone here can show me a url about this category?

[13:52] <xinming> If I use google and use keyword, login web programming  the results aren't useful...

[13:53] <xinming> hmm, Use perl 5.

[13:53] <theorbtwo> Try search.cpan.org, session.

[13:54] <xinming> theorbtwo: thanks

[13:59] <xinming> is session implemented by cookie?

[14:05] <theorbtwo> Generally.

[14:05] <theorbtwo> Better, though, is to use the cookie to identify the individual browser, and store the mapping from cookies to any useful information on the server.

[14:05] <theorbtwo> Otherwise, people can use the cookie for various nefarious purposes.

[14:18] <xinming> thanks. I think I know how to do this. :-)

[15:48] <xinming> find a bug, But really hard to catch...

[15:48] * xinming is still trying

[16:08] <r0nny> hmm - sweet - the perl6 channel is bound to meta-p

[16:16] <svnbot6> r7766 | iblech++ | * Usual svn props.

[16:16] <svnbot6> r7766 | iblech++ | * t/pugsbugs/numbered-match-variable.t: Added a subtest.

[16:40] <eric256__> hey someone made the tests on smooke.pugscode.org actualy point to the tests!!! ;)

[17:04] <xinming> anyone here can tell me if the class in perl 6 has to be use Upper case at the first letter?

[17:06] <eric256__> no there are no case restrictions on class names

[17:07] <eric256__> ?eval class a {};

[17:07] <evalbot_7766> undef 

[17:08] <xinming> haha, I finally found the bug... :-P

[17:09] <xinming> ?eval class a { has $.a; method show { $.a.say; } }; class b { has $.a; method BUILD { a.new( a => $.a ).show; }; } b.new( a => 100 );

[17:09] <evalbot_7766> Error: No compatible subroutine found: "&show" 

[17:47] <xinming> ?eval my $a = 9; class a { method b { $a - 3 } }; a.new.b; $a.say;

[17:47] <evalbot_7766> 9 bool::true 

[17:47] <xinming> Is this right?

[17:47] <xinming> Is this right behaviour?

[17:48] <eric256__> ?eval my $a = 9; class a { method b { $a - 3 } }; a.new.b.say; $a.say;

[17:48] <evalbot_7766> 6 9 bool::true 

[17:49] <eric256__> what part are you expecting not to work

[17:49] <xinming> ?eval my $a = 9; class a { method b { $a -= 3 } }; a.new.b; $a.say;

[17:49] <evalbot_7766> 6 bool::true 

[17:49] <xinming> ...

[17:49] <xinming> hold on.

[17:51] <xinming> ?eval my $var = 9;class a { has $.a;method update { $var -= $.a; }}; eval 'a.new( a => 3 ).update';

[17:51] <evalbot_7766> \6 

[17:51] <xinming> ?eval my $var = 9;class a { has $.a;method update { $var -= $.a; }}; eval 'a.new( a => 3 ).update'; $var.say

[17:51] <evalbot_7766> 6 bool::true 

[17:52] <xinming> strange...

[17:52] <xinming> I wrote this in test, the $var won't update

[17:53] <xinming> won't be updated.

[17:53] <eric256__> but it is updated

[17:55] <xinming> eric256__: co the svn

[17:55] <eric256__> it updated in your tests right there on eval bot. so i'm confused what your problem is. 

[17:56] <xinming> eric256__: But this line in test won't work.

[17:56] <eric256__> ahh. which tests file?

[17:57] <svnbot6> r7767 | yiyihu++ | Add 3 tests to test class name and attribute name conflictions...

[17:58] <xinming> pugsbug/class_name_and_attribute_name_confliction.t

[18:01] <eric256__> hehe. thaty doesn't work in the pugs interactive interface

[18:01] <eric256__> ?eval my $var = 9;class a { has $.a;method update { $var -= $.a; }}; eval 'a.new( a => 3 ).update'; $var.say

[18:01] <evalbot_7767> 6 bool::true 

[18:01] <eric256__> odd...very odd

[18:01] <eric256__> ?eval &*PUGS_VERSION

[18:01] <evalbot_7767> \sub {...} 

[18:02] <eric256__> ?eval $*PUGS_VERSION

[18:02] <evalbot_7767> \undef 

[18:02] <eric256__> ?eval $*VERSION

[18:02] <evalbot_7767> \undef 

[18:02] <xinming> It's magic version...

[18:03] <eric256__> if i -e it it does that, if i run it in interactive it doesn't

[18:04] <xinming> and also in test, :-)

[19:29] <xinming> my @t =( "Int", "Str"); @var>>.new

[19:29] <xinming> should this be valid in perl 6?

[19:30] <xinming> oops

[19:30] <xinming> my @t =( "Int", "Str"); @t>>.new

[19:30] *** Lopo_ is now known as Lopo

[19:30] <integral> hmm, soft references? :-)

[19:31] <xinming> yes

[19:32] <xinming> ?eval my $t = "Int"; $t.new( 3 );

[19:32] <evalbot_7767> Error: Must only use named arguments to new() constructor 

[19:32] <wolverian> erm. why not just (Int, Str)>>.new :)

[19:32] <xinming> ?eval my $t = "Int"; $t.new;

[19:32] <evalbot_7767> Str.new(); 

[19:32] <xinming> this works,

[19:32] <xinming> but not @t

[19:33] <wolverian> that does _not_ work

[19:33] <wolverian> it calls the .new method of Str

[19:33] <wolverian> not Int, as I think you wanted

[19:33] <wolverian> why do you want to use soft references?

[19:33] <xinming> wolverian: because we some times need dynamic object creation.

[19:33] <wolverian> xinming, use a hash. :) 

[19:35] <xinming> the hyper operator exists, so I want that way.. :-)

[19:36] <wolverian> xinming, (Int, Str)>>.new

[20:27] <eric256__> hey...i'm setting up tests.pugscode.org to highlight tests that fail or are marked as todo...any ideas what to do when there is more than one test on the same line?  or should i just let it flub those? ;)

[20:54] *** Lopo_ is now known as Lopo

[20:56] *** eric256__ is now known as eric256

[21:20] <obra> how often is there more than on etest on the same line?

[21:20] <obra> "sounds like the test suite should be fixed"

[21:20] <eric256> yea. i was thinking the same thing

[21:21] <eric256> nearly impossible to work with those tests

[21:21] <eric256> http://feather.perl6.nl/~eric256/t_index/t/builtins/want.html

[21:21] <eric256> too bright?

[21:24] <obra>   a little bright

[21:24] <eric256> yea..just commited it if you would like to play with the css some ;)

[21:28] <svnbot6> r7768 | eric256++ | Upadted catalog_tests.pl script to highlight tests on a pass/fail basis. Needs support for todo, skip, and tests spanning multiple lines.

[21:37] <nothingmuch> eric256: make the green slightly lighter so there is more contrast between the bg and the text

[21:38] <eric256> got an exact css change? i'm not good with that stuff ;)

[21:38] <nothingmuch> instead of #0f0 make it around #3f3

[21:38] <nothingmuch> but I'm not good with that stuff either ;-)

[21:38] <nothingmuch> use FF + web developer

[21:39] * nothingmuch can't do it now (too many obligations)

[21:39] <nothingmuch> but nice work =)

[21:39] <eric256> thanks. i'll play with it some 

[21:58] <svnbot6> r7769 | eric256++ | Trouble updating perl.t so i'm trying perl2.t

[21:58] <eric256> arg

[21:59] <eric256> i deleted a file and i can't get svk to pull it back to my folder

[22:02] <theorbtwo> Oooh, I like the highliting the line of the test by result.

[22:03] <eric256> any ideas how to force svk to pull a file from the repo that i deleted localy?  tried svk pull, svk up, svk pull perl.t, svk sync....blah it hates me

[22:05] <revdiablo> You removed but didn't commit yet? With svn it'd be 'svn revert'

[22:05] <revdiablo> I dunno if svk has something analagous

[22:05] <eric256> yea tried that too.

[22:07] * eric256 is nearly to the point of deleteing the whole thing and checking it out agian

[22:10] <eric256> hehe. /me saved over the new copy with an old copy and commited that....joy

[22:10] <eric256> lol

[22:21] <Juerd> Oh no!

[22:21] <Juerd> There's no turning back!

[22:21] <Juerd> Now we depend on the backup tape from a week ago!

[22:22] <Juerd> Let's hope the data's still on the two year old maglint...

[22:53] <rafl_> Good evening.

[22:53] <Juerd> If that makes you happy, sure :)

[22:53] <Juerd> Have a good one yourself

[23:02] <nothingmuch> rafl_: you have increased my hacker mojo significantly

[23:02] <nothingmuch> people respect me now

[23:03] <rafl_> nothingmuch: Did I? Why?

[23:03] <rafl_> And WTF is a hacker mojo anyway? :-)

[23:03] <nothingmuch> the debian pkg ;-)

[23:03] <nothingmuch> it's the amount of rezpekt you get from other people =)

[23:06] <rafl_> What do people use those modules for? I only packaged them as reverse dependencies.

[23:16] <rafl_> And beside that: The honor is mine! I packaged it!!1

[23:40] <eric256> is there a way to have perl output the time and timezone? ;)  then the updated stamp on tests.pugcode.org would have some meaning. ;)

[23:41] <eric256> any comments on the columns in the file listing would be appriciated too ;)

[23:42] <wolverian> eric256, perldoc -f time

[23:42] <rafl_> Thought localtime could do that.

[23:43] <wolverian> that's what I meant.

[23:43] <wolverian> :(

[23:44] <eric256> neither say anything about timezones.

[23:47] <wolverian> it's right there in the localtime string!

[23:47] <eric256> not on feather.

[23:47] <wolverian> huh. you're right.

[23:48] <eric256> or on my computer. lol 

[23:48] <eric256> ?eval localtime();

[23:48] <evalbot_7769> \Time::Local.new(("day" => 30), ("hour" => 1), ("is_dst" => bool::true), ("min" => 48), ("month" => 10), ("picosec" => 909348000000), ("sec" => 29), ("tz" => 7200), ("tzname" => "CEST"), ("wday" => 1), ("yday" => 302), ("year" => 2005)); 

[23:48] <eric256> sure pugs has it. ;)

[23:48] <wolverian> nice

[23:48] <wolverian> it's even an object :)

[23:49] <wolverian> ?eval localtime.tzname

[23:49] <evalbot_7769> Error: No compatible subroutine found: "&tzname" 

[23:49] <wolverian> well thank's for teasing 

[23:49] <eric256> ?eval localtime().{tzname};

[23:49] <evalbot_7769> Error: No compatible subroutine found: "&tzname" 

[23:49] <eric256> ?eval localtime().<tzname>;

[23:49] <evalbot_7769> \"CEST" 

[23:49] <wolverian> I like objects more.

[23:49] <wolverian> note that you can write that:

[23:49] <wolverian> ?eval localtime<tzname>

[23:49] <evalbot_7769> \Time::Local.new(("day" => 1), ("hour" => 1), ("is_dst" => bool::false), ("min" => 0), ("month" => 1), ("picosec" => 0), ("sec" => 0), ("tz" => 3600), ("tzname" => "CET"), ("wday" => 7), ("yday" => 0), ("year" => 2000)); 

[23:50] <wolverian> or maybe not.

[23:50] <wolverian> ?eval localtime.<tzname>

[23:50] <evalbot_7769> Error:  unexpected "." expecting term, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[23:50] <eric256> lol

[23:50] <wolverian> that should work, though

[23:50] <wolverian> ?eval localtime()<tzname>

[23:50] <evalbot_7769> \"CEST" 

[23:50] <eric256> maybe no. because localtime can accept a parameter

[23:50] <theorbtwo> Huh?

[23:51] <theorbtwo> Isn't it just CET in Europe now?

[23:52] * eric256 has no clue regarding anything involving time...whats the offset for CEST?  it says the timezon is 7200 but what is that?  and why did it just siwtch between CEST and CET?  /me confused

[23:53] <wolverian> theorbtwo, not yet.

[23:53] <wolverian> theorbtwo, in Finland it's still two hours of EEST :)

[23:53] <theorbtwo> Oh -- at 1 UTC, not 1 local.

[23:54] <wolverian> right.

[23:56] <theorbtwo> CEST is GMT+2; CET is GMT+1.

[23:57] <theorbtwo> And if your clock is already saying CET, then it's a bit off as it shouldn't be CET for another 1 and a half minutes.

[23:57] <theorbtwo> (Mark.)

[23:58] <eric256> ?eval localtime();

[23:58] <evalbot_7769> \Time::Local.new(("day" => 30), ("hour" => 1), ("is_dst" => bool::true), ("min" => 58), ("month" => 10), ("picosec" => 18804000000), ("sec" => 14), ("tz" => 7200), ("tzname" => "CEST"), ("wday" => 1), ("yday" => 302), ("year" => 2005)); 

[23:58] <Juerd> (what) (are) (all) (those) (parens) (there)?

[23:59] <theorbtwo> It is looking a bit lispy.

[23:59] <wolverian> maybe it just wants to make sure.

[23:59] <theorbtwo> OK, summer time has ended as of....

[23:59] <theorbtwo> ...now.

