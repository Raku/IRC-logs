[00:00] <gaal> I seem to recall $Larry said something rulingy about my $x; my $x. But I don't remember what it was, and ruleVarDeclaration doesn't seem to treat dupes

[00:00] <gaal> oh, it can't!

[00:00] <gaal> if there is dupe treatment it has to be in Eval

[00:01] <audreyt> yup

[00:01] <gaal> holy moly, findSub is long.

[00:01] <audreyt> gaal: the idea is simply to take something akin to envInitDat and translate the "use" node into a Pad node

[00:01] <audreyt> gaal: findSub is the #1 reason why I'm doing this new minimal baselayer runtime ;)

[00:02] <gaal> :)

[00:02] <audreyt> gaal: anyway. if you turn ruleUsePerlPackage so it yields a Pad

[00:02] <audreyt> just like the one in ruleVarDescl

[00:02] <audreyt> s/Descl/Declaration/

[00:02] <audreyt> mergeStmts will automagically introduce it lexically to the following block statements

[00:02] <audreyt> s/block statements/statements in the lexical block/

[00:02] <gaal> ...then that's most of the way, but not all

[00:03] <gaal> because @?PRAGMA needs to see what essentially was @?OUTER::PRAGMA

[00:03] <Khisanth> gaal: that is not a warning anymore?

[00:03] <audreyt> gaal: I'd say it's all... if you want error detection, you can do it in mergeStmts

[00:03] <gaal> it's not all, I think

[00:03] <audreyt> gaal: right, but you can get that by setRuleEnv/getRuleEnv

[00:04] <gaal> { use moose; { # use moose in effect. } }

[00:04] <audreyt> yes, but you already have envPragmas

[00:04] <audreyt> just use that

[00:04] <audreyt> setRuleEnv with something augmented with envPragmas

[00:04] <gaal> yup, ok

[00:04] <gaal> Khisanth: maybe!

[00:06] <gaal> brb

[00:11] <audreyt> I'll brb also

[00:27] <gaal> hmmm. how would importation specs be implemented? ruleSubDeclaration assumes 'is export' means always to export immediatey, upon parse.

[00:30] <gaal> maybe I should wait till tomorrow for this :/

[00:30] <clkao> svk sucks

[00:30] <clkao> svk st is too slow

[00:34] <ingy> svk rocks!

[00:34] <rafl> Indeed.

[00:34] <ingy> at least that's what I hear

[00:34] <ingy> on #svk...

[00:34] <ingy> hi clkao 

[00:34] <ingy> coming home soon?

[00:39] <clkao> in about a week

[00:39] <clkao> but i am busy for the first week

[00:40] <Odin-LAP> clkao: You keep declaring that svk sucks. Why don't you just stop using it?

[00:40] <Odin-LAP> *grin*

[00:40] * obra snickers

[00:42] <clkao> Odin-LAP: it's not like you can find anything better you know... but it's still software

[00:48] <gaal> yup, i'm out. night...

[01:00] <stevan_> audreyt: ping

[01:09] <lisppaste3> stevan pasted "Factorial in core runtime mini-language" at http://paste.lisp.org/display/14581

[01:09] <stevan_> audreyt: is that correct syntax?

[01:10] *** stevan_ is now known as stevan

[01:11] <lisppaste3> stevan annotated #14581 with "Forgot a .call()" at http://paste.lisp.org/display/14581#1

[01:31] *** stevan__ is now known as stevan

[02:07] <stevan> Andy: more pugs http://floraspetproject.org/Olliepug.JPG

[02:25] <audreyt> stevan: yo

[02:27] <audreyt> stevan: I think lazy .or and .and doesn't work really

[02:27] <pengo> did you know a baby echidna is called a puggle?

[02:28] <q[Skud]> pengo: wtf?

[02:28] <q[Skud]> a puggle is a toy.

[02:29] <q[Skud]> albeit a toy that looks like a baby echidna.

[02:34] <pengo> mmm.. makes you think, eh?

[02:41] <audreyt> stevan: I'll rename them to .or_do and .and_do respectively

[02:44] <audreyt> stevan_: a sec... I think I can make it work in a few mins

[02:46] <q[Skud]> audreyt: ok, i'm sitting at hte office with a quietish afternoon ahead of me.  what do i need to do to get pugs up and running?  i'm on ubuntu.

[02:47] <rafl> apt-get install pugs?

[02:47] <q[Skud]> no such package.

[02:47] <rafl> It's in dapper/universe.

[02:47] <q[Skud]> hang on, lemme do a dist-upgrade.

[02:48] <q[Skud]> i am behind.

[02:51] <audreyt> q[Skud]: what rafl said. also after dist-upgrade, install subversion

[02:51] <audreyt> and check out http://svn.openfoundry.org/pugs/

[02:51] <audreyt> also, I'm thinking about the idea of handing out metacommitter bits (i.e. let people invite more people) to anyone I've met in realworld

[02:51] <audreyt> does it sound sane?

[02:52] <rafl> Why only those who you met in realworld? :-)

[02:53] <rafl> audreyt: And why check it out using svn if there are precompiled binaries if you only want to play with it?

[02:55] <audreyt> rafl: skud is helping out doc reorg; she'd need the latest docs tree and commit it

[02:56] <rafl> audreyt: Oh, OK then.

[02:56] <q[Skud]> ok.

[02:56] <audreyt> rafl: I think I'd accept OpenPGP trust model as an alternative

[02:57] <audreyt> rafl: but I'd like to at least have some idea of how to find someone :)

[02:57] <rafl> audreyt: We don't have a trust path nor did we met so far (I think we will in march, though) and I am metacommiter nevertheless.

[02:57] <rafl> audreyt: How about the #perl6 regulars at first?

[02:58] <rafl> Or the regular commiters.

[02:58] <rafl> s/regular/most active/

[02:59] <q[Skud]> how about just whoever audreyt trusts, for whatever definition she happens to use?  why over-specify it?

[03:00] <obra> has there been a problem with new committers having trouble getting bits, audreyt?

[03:00] <audreyt> rafl: I think my idea was just "extending the metacommitter bit a bit" :)

[03:00] <audreyt> obra: I think so, yes. they had to come to #perl6

[03:00] <obra> larry didn't come to #perl6. nor guido ;)

[03:01] <audreyt> and that's exactly why I'm extending the metacommitter base :)

[03:01] <clkao> no biscuits

[03:01] <audreyt> because then ingy can run to oscon and hand out bits to them.

[03:01] <obra> That's a good reason to give ingy bits

[03:02] * q[Skud] ponders ingy's bits

[03:02] <audreyt> and ingy is not currently metacommitter :)

[03:02] <obra> so that should get fixed.

[03:02] <obra> Anyway, I'd go with "anybody audreyt trusts" over "anybody audreyt has met"

[03:02] <obra> which is a fine line ;)

[03:02] <audreyt> yeah, and extremely blurry :)

[03:02] <audreyt> but ok, I'll go ahead and do that :)

[03:03] <obra> blurry lines are good :)

[03:03] <obra> it means people don't get too hung up on the line itself

[03:03] <audreyt> yup.

[03:03] <rafl> audreyt: Is there a policy for giving comit bits, btw? I'd like to give some to two interested people as well. And I'll do a perl 6 workshop on GPW next march and interested auditors could get a commit bit as well as a feather account there.

[03:03] * obra remembers he should get more tea

[03:04] <meppl> gute nacht

[03:04] <clkao> s/tea/sleep

[03:04] <q[Skud]> audreyt: is there somewhere on the web that i can look at this docs tree while i wait for my dist-upgrade?

[03:05] <clkao> wget -r -np?

[03:05] <audreyt> rafl: yes... the policy is that you trust that person is willing to communicate (eg. come to #perl6 or write to p6c) and is not intentionally destructive :)

[03:05] <audreyt> q[Skud]: http://svn.openfoundry.org/pugs/

[03:05] <audreyt> q[Skud]: svn repos are also websites :)

[03:05] <q[Skud]> thanks.

[03:05] <q[Skud]> this'll be good for me. i need to get exposed to svn.

[03:06] <ingy> audreyt: can I be a metacommitter?

[03:06] <audreyt> ingy: you are one now :)

[03:06] <rafl> audreyt: OK. I'll try to comply that requirements.

[03:07] <q[Skud]> audreyt: straight off, i can see a need for a p6intro as well as a p5-to-p6 transition cheatsheet

[03:08] <audreyt> q[Skud]: some relevant bits: docs/articles/tpr.pod docs/other/porting_howto

[03:08] <q[Skud]> ok

[03:08] <audreyt> I think what we can do is feed you pointers to raw data, and what we'd need is some sense of organization

[03:08] <audreyt> also, docs/README

[03:09] <q[Skud]> yeah, i started at docs/README

[03:10] <q[Skud]> i think i'd be most comfortable starting with writing p6intro.pod and branching off into more detailed .pod files as required. basically treat it like the p5 docs for now, but in the knowledge that we can rearrange and make it work for us as we go

[03:10] <q[Skud]> and have some naming consistency

[03:10] <blm> To contribute to pugs is it kind of too late if you don't know Haskell fluently?

[03:10] <audreyt> blm: nope... 70%+ of our committers probably doesn't know haskell fluently

[03:11] <obra> I know no haskell

[03:11] <audreyt> blm: and haskell's role in pugs, while important, is gradually decreasing as more bits are written in perl6 itself (and perl5 and javascript and whatnot)

[03:11] <q[Skud]> audreyt: did you say you had Perl6::Doc reserved?

[03:12] <SamB> why javascript?

[03:12] <SamB> what possible use could javascript be to this project?

[03:12] <blm> So pugs is to get to perl6 which allows perl6 interpreter/compiler to be written in perl6?

[03:13] <q[Skud]> audreyt: and also, how do you see people reading perl6 docs?  perldoc Perl6::Doc::Intro and so on?

[03:13] <audreyt> q[Skud]: not yet at the moment. I'm still wondering whether Perl6::Doc::* is better, or just Perl6::Spec::*, Perl6::Tutorial::*, etc

[03:13] <q[Skud]> i can see Perl6::Doc being handy as a working documentation set that may grow into the p6 distribution's docs

[03:13] <blm> I am sorry.  I should be reading on the www instead.

[03:13] <q[Skud]> i don't see any point in breaking out tutorials etc

[03:14] <audreyt> q[Skud]: there is a Perl6::Bible on CPAN under ingy's name that offers the "p6bible" cmdline tool. I wonder if we can extend it to "p6doc"

[03:14] <audreyt> q[Skud]: but for now, perldoc Perl6::Doc::Intro is perhaps the most straightforward.

[03:14] <q[Skud]> yeah

[03:14] <q[Skud]> i'm just thinking, making a hierarchy of docs sounds bloody useful

[03:14] <q[Skud]> the p5 doc space is flat

[03:14] <audreyt> indeed

[03:15] <q[Skud]> but having Perl6::Doc::Tutorials::* and Perl6::Doc::Data::* could be handy

[03:15] <obra> Data?

[03:15] <audreyt> I'd call ::Data as ::Reference </bikeshed>

[03:15] <obra> Also, Tutorials or Tutorial?

[03:15] <q[Skud]> oh, i'm just riffing off docs/data

[03:15] <q[Skud]> well, we can figure that out.

[03:15] <audreyt> indeed

[03:15] <q[Skud]> i'm just saying that hte hierarchy would be handy

[03:15] <audreyt> very true

[03:15] <obra> agreed

[03:16] <q[Skud]> i wonder whether it makes sense to make the upper level by type of document and the next level by topic, or vice versa?

[03:16] <audreyt> q[Skud]: alias and I brainstormed a bit about P6Doc::Tutorial::* P6Doc::Spec::* etc

[03:16] <q[Skud]> like, Perl6::Doc::Object::Tutorial or Perl6::Doc::Tutorial::Objects

[03:17] <q[Skud]> yeah, i think type of document uppermost makes a bit more sense

[03:17] <audreyt> but if you think Perl6::Doc is clearer and easier to grok, I have no problem with that

[03:17] <q[Skud]> with Reference, Tutorial, Spec

[03:17] <audreyt> P6Doc has the advantage of Perl6::* modules on CPAN is mostly perl6 emulators

[03:17] <obra> Except for the Bible?

[03:18] <audreyt> except for the bible, which we are refactoring now

[03:18] <q[Skud]> i think Perl6::Doc would be more acceptable to the PAUSE crowd

[03:18] <audreyt> well, alias and I are both pause admins :)

[03:18] <q[Skud]> the entire Perl6 namespace will be obsoleted when p6 itself is released, presumably.  for the meantime, makes sense to keep it all together.

[03:18] <q[Skud]> so am i.

[03:19] <q[Skud]> an inactive one, though ;)

[03:19] <audreyt> yup.

[03:19] <q[Skud]> ok, so, here's what i see

[03:20] <q[Skud]> Perl6::Doc as the top level. beneath it, sections based on types of documentation.  Reference and Tutorial are two that I'd probably start on early on.  and a p6doc command line tool where p6doc Foo::Bar is equivalent to perldoc Perl6::Doc::Foo::Bar

[03:21] <audreyt> totally agreed.

[03:21] <audreyt> I've sent the namespace req to modules@.

[03:21] <q[Skud]> ok, i just foresaw another problem

[03:21] <q[Skud]> oh no. never mind.

[03:21] <q[Skud]> i'm an idiot :)

[03:21] <audreyt> I love self cancelling problems :)

[03:22] <q[Skud]> the best kind.

[03:22] <q[Skud]> audreyt: ok, so i can make a docs/p6doc directory or something and work in there?

[03:23] <audreyt> q[Skud]: sure!

[03:23] <audreyt> be sure to put a README there -- that's probably the only convention for new subproject dirs

[03:23] <q[Skud]> yeah.

[03:23] <ingy> hi skuq

[03:24] <q[Skud]> inpy!

[03:34] <svnbot6> r8193 | autrijus++ | * PIL.Native: add $block.(1,2,3) form to replace the .call form, eg:

[03:34] <svnbot6> r8193 | autrijus++ |     ->{3}.()

[03:37] <audreyt> blm: to answer your earlier question, yes, pugs's goal is to make perl6 self host.

[03:38] <rafl> Isn't fun the goal? :-)

[03:38] <blm> audreyt: Thanks

[03:38] <q[Skud]> wait! i was told there were piles of cash and that i'd get groupies!

[03:39] <audreyt> rafl: no, fun is what we're optimizing for. :)

[03:39] <obra> q[Skud]: the cash is in a gift-economy currency.

[03:40] <obra> It's called "respect". Sadly, you only get to spend it on things like "why the hell won't this kernel build?"

[03:42] <q[Skud]> bugger.

[03:42] <q[Skud]> grah. i think i should go buy one of those wrist brace support thingies.

[03:44] <q[Skud]> by the time i get back the dist-upgrade might be done :)

[04:01] <svnbot6> r8194 | autrijus++ | * PIL.Native.Eval: functional application works.

[04:26] <audreyt> stevan_: factorial runs.

[04:28] <svnbot6> r8195 | autrijus++ | * PIL.Native: "make pil" now produces a executable that can be run

[04:28] <svnbot6> r8195 | autrijus++ |   with a file as argument.

[04:28] <svnbot6> r8195 | autrijus++ | * PIL.Native: implement BIT.cond that takes two blocks for if/else

[04:28] <svnbot6> r8195 | autrijus++ |   respectively.  This example from stevan++ now runs:

[04:28] <svnbot6> r8195 | autrijus++ |     # Mini-Language Factorial

[04:28] <svnbot6> r8195 | autrijus++ |     (-> $n { (-> &fact { &fact.(&fact, $n) })

[04:28] <svnbot6> r8195 | autrijus++ |         .(-> &f, $x {

[04:28] <svnbot6> r8195 | autrijus++ |             $x.eq(0).cond(

[04:28] <svnbot6> r8195 | autrijus++ |                 -> { 1 },

[04:28] <svnbot6> r8195 | autrijus++ |                 -> { $x.multiply( &f.(&f, $x.subtract(1)) ) })

[04:28] <svnbot6> r8195 | autrijus++ |         });

[04:29] <svnbot6> r8195 | autrijus++ |     }).(10);

[04:31] <audreyt> stevan_: I'll go offline and work on bootsrapping the rest of container types... bbiab

[04:31] <audreyt> &

[04:40] <stevan> audreyt: ping

[04:40] <audreyt> stevan: pong

[04:40] <stevan> hey

[04:41] <stevan> I am backlogging right now

[04:41] <stevan> factorial runs :)

[04:42] <stevan> Y combinator ++

[04:43] <audreyt> stevan: yup :) you still up for documenting the structure of PIL.Native?

[04:43] <stevan> so make pil will produce a "pugs" executable? or  "pil" executable

[04:43] <audreyt> I'm working out PIL.MM right now

[04:43] <audreyt> a "pil" executable

[04:43] <stevan> audreyt: of course, I just need to get an executable so I can test my assumptions ;)

[04:48] <stevan> audreyt: can I ask some questions? or are you busy atm?

[04:48] <svnbot6> r8196 | autrijus++ | * remove bits of old PIL.* that doesn't do anything.

[04:48] <svnbot6> r8196 | autrijus++ |   (rerun "perl Makefile.PL" if you'd like to "make pil".)

[04:48] <audreyt> sure, please do

[04:48] <stevan> mkCall in Coerce.hs, this is method calls?

[04:52] <stevan> oh I see, in Types, it is a NativeLanguageExpression

[04:53] <stevan> so all the Native* things are the Haskell side implementations?

[04:54] <audreyt> sorry, was afk

[04:54] <audreyt> yes.

[04:54] <stevan> no problem

[04:55] <stevan> and Prim is the mapping to our mini-lang

[04:55] <audreyt> yes.

[04:55] <stevan> I am not seeing cond()

[04:55] <audreyt> the pure part of it, anyway

[04:55] <audreyt> yeah, because it's sideeffectful

[04:55] <stevan> why?

[04:55] <audreyt> because the blocks may perform side effects

[04:55] <stevan> oh,.. in the MM part then

[04:55] <stevan> I see

[04:56] <audreyt> so it's hardcoded in Eval

[04:56] <audreyt> (currently)

[04:56] <stevan> ok

[04:56] <audreyt> bit.cond() and block.() are currently hardcoded

[04:57] <stevan> so was my understanding of the scoping correct?

[04:57] <stevan> that everything must be wrapped in a block to be named

[05:02] <stevan> ok, I think I have enough to go on now

[05:02] <stevan> hmmm that wasnt very many questions :)

[05:02] <stevan> You will have to review for correctness after I commit

[05:05] <audreyt> ok

[05:07] <audreyt> array expression desugaring is in. I don't yet see a need for hash expression sugar for MM bootstrap

[05:07] <svnbot6> r8197 | autrijus++ | * PIL.Native: add support for array expressions in addition to literals:

[05:07] <svnbot6> r8197 | autrijus++ |     [1,2,3.add(4)]

[05:07] <svnbot6> r8197 | autrijus++ |   is desugared into:

[05:07] <svnbot6> r8197 | autrijus++ |     [].push(1,2,3.add(4))

[05:08] <audreyt> so I'll punt on that and go back to Instance

[05:08] <stevan> I kind of like the desugared arrays :)

[05:09] <audreyt> in any case, I think [].push is better than Array.new :)

[05:09] <audreyt> or Seq.new

[05:09] <stevan> yes

[05:11] <xgl> audreyt, did you see my question about the ambiguous parse?

[05:11] <audreyt> xgl: try asking on the channel next time :)

[05:12] <xgl> i've got a question about an ambiguous parse ...

[05:12] <audreyt> (and yeah, I answered it)

[05:12] <xgl> "if foo(1,2){bar(3)}" could be either illegal (i.e. conditional without body, if we're returning a hash from foo) or legal?

[05:13] <xgl> sorry, i might have missed the answer somehow

[05:13] <audreyt> it's illegal if you don't follow it with the body

[05:13] <audreyt> ?eval if hash(1,2){3} { 4 }

[05:13] <xgl> but if foo doesn't return a hash, but an int, say, it would be legal?

[05:14] *** evalbot_8169 is now known as evalbot_8197

[05:14] <evalbot_8197> undef 

[05:14] <xgl> the parser would have to figure that out?

[05:14] <audreyt> no, it's illegal no matter what, I think... you need whitespaces around conditionals in paren-free if

[05:14] <audreyt> ?eval  if hash(1,2){3}{ 4 }

[05:14] <evalbot_8197> Error:  unexpected "i" expecting program reserved word 

[05:15] <audreyt> (and yes, that means whitespace is significant here)

[05:15] <xgl> ah, ok, and hash subscripts can't have white space before them?

[05:15] <audreyt> correct. you need to say .{} if you want whitespace

[05:15] <audreyt> ?eval hash(1,2){1}

[05:15] <evalbot_8197> \2 

[05:15] <audreyt> ?eval hash(1,2)    .{1}

[05:15] <evalbot_8197> \2 

[05:15] <xgl> cool, thanx!

[05:15] <audreyt> like that.

[05:15] <audreyt> np :)

[05:17] <audreyt> stevan: ping

[05:18] <audreyt> stevan: you don't distinguish between "is rw" and "is ro" attrs in an opaque

[05:18] <audreyt> is it intentional?

[05:18] <stevan> audreyt: pong

[05:18] <audreyt> for example, if I autobox NativeInt into Instance

[05:19] <stevan> audreyt: I assumed that access will be mediated elsewhere

[05:19] <audreyt> it wouldn't make sense to set_attr it, would it

[05:19] <stevan> hmm, no it wont

[05:19] <q[Skud]> ok. i finished that dist-upgrade, and "apt-get install pugs" still doesn't work.  is pugs *known* to be in the ubuntu deb repositories?  what repository specifically?  what do i need in my /etc/apt/sources.list to get it?

[05:19] <audreyt> q[Skud]: you need to pull in universe, I think

[05:20] <audreyt> (note I know nothing about how to do that)

[05:20] <q[Skud]> got universe

[05:20] <audreyt> mm

[05:20] <q[Skud]> hang on. apt-get install pugs, right?

[05:20] <q[Skud]> not, like, pugs-something or something-pugs or anything?

[05:20] <audreyt> I do see pugs in /pub/mirrors/ubuntu/pool/universe/p/pugs

[05:20] <audreyt> aye

[05:20] <stevan> audreyt: actually weren't the "is rw" and "is ro" just related to the autogenerated accessors?

[05:21] <stevan> when in the "has $:foo is ro" form

[05:21] <q[Skud]> apt-cache search pugs gives me nothing

[05:21] <blm> http://mirror.isp.net.au/ftp/pub/ubuntu/pool/universe/p/pugs/

[05:21] <blm> ?

[05:21] <stevan> because the class still needs access to them too, if they are ro inside the Instance type, how would you ever assign to them?

[05:22] <q[Skud]> what do people have in their /etc/apt/sources.list?

[05:22] <audreyt> stevan: I'm thinking maybe you don't assign to an "ro" attribute at all

[05:22] <audreyt> even internally

[05:22] <q[Skud]> i have:

[05:22] <q[Skud]> deb http://archive.ubuntu.com/ubuntu breezy universe

[05:22] <q[Skud]> deb-src http://archive.ubuntu.com/ubuntu breezy universe

[05:22] <q[Skud]> note to self: use .au mirror

[05:22] <stevan> audreyt: you are thinking for autoboxed types?

[05:23] <audreyt> stevan: that, and instances declared as ro (which is default)

[05:23] <blm> q[Skud]: Not at home so I am limited in the help I can give

[05:23] <stevan> instances as ro?

[05:23] <audreyt> q[Skud]: I do see http://archive.ubuntu.com/ubuntu/pool/universe/p/pugs/

[05:24] <stevan> audreyt: I am not sure I agree with you on this one :\

[05:24] <audreyt> stevan: hm, so it's always rw internally?

[05:25] <stevan> the core instance type should always be rw, the methods should mediate  access

[05:25] <audreyt> nvm, you are absolutely correct

[05:25] <q[Skud]> blm: do you use breezy?

[05:25] <audreyt> so you should be able to do

[05:26] <audreyt> class Int is extended { method reset { $!val = 0 } }

[05:26] <blm> q[Skud]: Yes I think so. 5.10.  Breezy is the latest? I got my CD at OSDC conference

[05:26] <q[Skud]> yes.

[05:26] <q[Skud]> bizarre.

[05:26] <audreyt> and violate encapsulation happily?

[05:26] <audreyt> that sounds very perlish.

[05:26] <stevan> audreyt: open unless explicity closed :)

[05:26] <audreyt> right. so you think that "extended" form above makes sense?

[05:27] <audreyt> assuming $!val is the internal name for int box

[05:27] <stevan> it makes sense, I dont think it is wise :)

[05:27] <blm> q[Skud]: au mirror is http://au.archive.ubuntu.com/

[05:27] <audreyt> eh right, I was asking whether it makes sense for the MM to support it

[05:27] * stevan ponders finalized classes ....

[05:28] <stevan> MM to support the is extended form?

[05:28] <blm> q[Skud]: works out to be mirrors.uwa.edu.au

[05:28] * audreyt concludes autoboxing will be much slower

[05:28] <audreyt> stevan: no, the explicit set of unboxed value inside a box

[05:28] <audreyt> it's almost like saying "1 = 2"

[05:28] <stevan> hmm

[05:29] <audreyt> and "1" everywhere will become "2"... fun

[05:29] <blm> q[Skud]: pugs is on that mirror too http://au.archive.ubuntu.com/ubuntu/pool/universe/p/pugs/

[05:29] <stevan> ok, maybe that is too much fun

[05:29] <audreyt> so maybe set_attr on autoboxed stuff is just error

[05:30] <stevan> well it really depends on how we handle the autoboxing 

[05:30] <stevan> but yes, that is probably wise

[05:30] <audreyt> mm.

[05:30] <stevan> afterall the unboxed value is not a user-lang type

[05:31] <stevan> 2 in userland is Int.new(2) right?

[05:31] <audreyt> nope. it's unbox 2

[05:31] <stevan> hmm

[05:32] <stevan> what if the boxed types were finalized classes?

[05:32] <audreyt> that way you can't say "0 but true".

[05:32] <q[Skud]> ah, i think i need multiverse not universe.  sorry, new ubuntu user here.

[05:32] <stevan> cannot be extended, or subclassed

[05:32] <audreyt> oh wait, it wouldn't be "int" anymore

[05:32] <audreyt> but it's still "Int"

[05:32] <stevan> yes

[05:33] <audreyt> I think I got it... I'll see if I can come up with something saneish.

[05:33] <stevan> ok

[05:33] <stevan> are the core boxed types supposed to be extendable? is that written anywehre?

[05:33] <q[Skud]> no. gah. i'm still stuck.  yes, i can see it on the website.  no, i can't see it with apt-search/apt-get

[05:34] <audreyt> q[Skud]: have you refreshed cache?

[05:35] <audreyt> stevan: according to S12 everything is open.

[05:35] <stevan> then maybe 1=2 should be possible?

[05:35] <q[Skud]> audreyt: yes. apt-get update.

[05:36] <stevan> silly and unwise, but possible

[05:36] <audreyt> stevan: for some reason it fills me with distaste... I'd much rather if $!val is not in the attr slot

[05:36] <audreyt> and just delegated to the underlying unboxed NativeInt

[05:36] <audreyt> so you can't access it as a member variable in extended code

[05:37] <stevan> so class Int is extended { method add_one { $!val + 1 }} is okay

[05:37] <audreyt> nope. you need

[05:37] <audreyt> self + 1

[05:37] <stevan> but class Int is extended { method reset { $!val = 0 } } is not

[05:37] <audreyt> there's no $!val anywhere, that's my proposal

[05:37] <stevan> ah yeah

[05:38] <stevan> hmm

[05:38] <blm> q[Skud]: Why do you think it is multiverse that you need?

[05:38] <audreyt> and "&self" is not rw, so we are safe.

[05:38] <stevan> so the Instance is a thin opaque wreapper on the unboxed type

[05:38] <audreyt> yup

[05:38] <stevan> I like that

[05:38] <stevan> thats feels better

[05:38] <q[Skud]> blm: oh, i was confused and wrong. never mind that. i retract that statement.

[05:38] <blm> q[Skud]: np

[05:39] <audreyt> stevan: glad we don't disagree anymore :D

[05:39] <stevan> yes, that was an ugly 5 minutes :)

[05:39] <audreyt> *smile*

[05:40] <q[Skud]> ok, well, dpkg to the rescue.  sigh.

[05:40] * stevan is suprised at how much seems to fall into place with this approach

[05:41] <audreyt> :)

[05:41] <stevan> since all reasonable operations on self will already be defined

[05:41] <audreyt> yup.

[05:42] <blm> q[Skud]: Want me to help when I get home?

[05:42] <q[Skud]> ok, now there are dependency problems.  pugs requires ghc 6.4.1 specificlaly, but breezy's current version is 6.4-4.1ubuntu an it gets all confused

[05:42] <q[Skud]> blm: if i haven't got it sorted yet, that'd be great.

[05:43] <stevan> audreyt: BTW - I am trying to manage getting to the hackathon.il 

[05:43] <q[Skud]> ok, i think i may have faked it out

[05:43] <audreyt> q[Skud]: I see http://packages.ubuntu.com/dapper/devel/ghc6

[05:43] <q[Skud]> i now have a pugs thing.

[05:44] <audreyt> ooh, Skud++

[05:44] <q[Skud]> and i have it running.

[05:44] <audreyt> wow.

[05:44] <q[Skud]> show me how to do hello world, so i can feel good.

[05:44] <audreyt> stevan: excellent!

[05:44] <blm> q[Skud]: Good stuff :-)

[05:44] <stevan> I assume you are not going to attend YAPC::NA 06

[05:44] <audreyt> ./pugs -e 'say "Hello, World"'

[05:44] <audreyt> er, I mean

[05:44] <audreyt> pugs -e 'say "Hello, world"'

[05:45] <q[Skud]> hurrah!

[05:45] <stevan> pugs -e '"Hello, world".say' :)

[05:45] <q[Skud]> *happy dance*

[05:45] <audreyt> :))

[05:45] <audreyt> q[Skud]: write down your command history to http://pugs.kwiki.org/?PugsDownload before it disappears?

[05:45] <audreyt> (or alternatively document it into docs/)

[05:45] <q[Skud]> audreyt: good lord. it's terrifying.

[05:45] <q[Skud]> audreyt: um. i'm not sure i want to inflict it on anyone else.

[05:46] <q[Skud]> like, it uses a lot of --force-blah

[05:46] <audreyt> q[Skud]: I imagine there may be ubuntu users who'd need this help

[05:46] <revdiablo> q[Skud]: If you put up what you did, someone may either fix the problems you encountered or come up with an easier way to do it

[05:46] <audreyt> if you feel uncomfortable with it in the pugs tree, put it in the wiki, or just nopaste it :)

[05:46] <q[Skud]> well, ok

[05:46] <audreyt> Skud++

[05:46] <audreyt> stevan: when and were is that?

[05:47] <stevan> Chicago late June

[05:47] <audreyt> ah... then maybe not

[05:47] <stevan> you ban still has 3 years left in office ;)

[05:48] <stevan> s/ban/boycot/

[05:48] <audreyt> stevan: I'll reevaluate if needed... but doesn't look terribly good at this moment either

[05:49] * stevan would rather go to il than chicago himself :)

[05:49] <audreyt> stevan: anyway. your "core" list and hash can also hold Instance

[05:49] <audreyt> bug? feature?

[05:49] <stevan> hmm

[05:49] <stevan> yes, they will need to be able to

[05:50] <audreyt> that causes a level interdependency

[05:50] <stevan> true

[05:50] <audreyt> so is Instance after all a core native type? :)

[05:51] <audreyt> or we just declare it a interdependency

[05:51] <audreyt> the code can deal with it

[05:51] <stevan> well the Core and MM seperation was somewhat arbitrary anyway

[05:51] <audreyt> yeah, so I think we lose it

[05:51] <stevan> ok

[05:51] <stevan> I have no problem with that

[05:52] * audreyt does a type-directed coding

[05:52] <audreyt> (changing the type for NativeMap and fix all type errors)

[05:53] <q[Skud]> ok, wikid it

[05:53] <q[Skud]> someone read it and tell me if it makes sufficient sense?

[05:54] <q[Skud]> ok, so i should check out the pugs code i guess

[05:55] <obra> Is there a pugs wiki?

[05:55] <q[Skud]> apparently so.

[05:55] <q[Skud]> pugs.kwiki.org

[05:55] <audreyt> apparently our /topic is obscure :)

[05:55] <audreyt> q[Skud]: I fixed your formatting

[05:55] <audreyt> looks sane, thanks!

[05:55] <obra> audreyt: there are too many urls

[05:55] <audreyt> indeed

[05:55] <obra> and there's no wiki on pugscode.org

[05:56] <q[Skud]> gah, now i can't apt-get install svn ... definitely something borked in ubuntu here

[05:56] <audreyt> obra: nod. that's very much intentional

[05:56] <audreyt> q[Skud]: s/svn/subversion/?

[05:56] <q[Skud]> oh, it's called subversion

[05:56] <q[Skud]> yes.

[05:56] <q[Skud]> *headdesk*

[05:56] <obra> audreyt: that's..unfortunate :/

[05:58] <audreyt> obra: *nod* but I'd like it to be strictly a scratchpad for lambdacamels. all reusable docs should be in the svn tree (and now Perl6::Doc)

[05:58] <q[Skud]> svn-- # man pages, people! they exist for a reason!

[05:58] <obra> audreyt: ah. ok. that's quite reasonable.

[05:58] <audreyt> q[Skud]: svn co http://svn.openfoundry.org/pugs

[05:59] <q[Skud]> yup, got it.

[05:59] <q[Skud]> had to go look at webpages.  sigh.

[05:59] <q[Skud]> how do i tell it who i am?

[05:59] <audreyt> you do it on your first checkin

[05:59] <audreyt> svn ci

[06:00] <q[Skud]> ahhh.

[06:00] <q[Skud]> it asks me?

[06:00] <audreyt> yup.

[06:00] <q[Skud]> ok, np.

[06:00] <audreyt> sanity and all

[06:00] <q[Skud]> wheee. 

[06:01] * obra updates the wiki to add audrey's clarificiation of its purpose

[06:03] <audreyt> obra++

[06:03] <audreyt> stevan_: is change_class ever exposed to userland in any way?

[06:03] <audreyt> i.e. is there a code path that leads there?

[06:04] <audreyt> i.e. can you rebless in perl6?

[06:04] <stevan_> audreyt: change_class is probably not exposed to userlang

[06:04] <audreyt> (I don't see one, hence the question)

[06:04] <audreyt> good. then it can go. :)

[06:04] <stevan_> it is only used in the Eigenclasses

[06:05] <audreyt> but we can make them nondestructive.

[06:05] <audreyt> i.e. essentially make another Instance that share the Opaque

[06:05] <stevan_> ok

[06:05] <stevan_> that works 

[06:05] <stevan_> I use it also in the bootstrap though

[06:05] <stevan_> so that Class is an instance of Class

[06:06] <audreyt> $::CLASS = $::CLASS.update_class_with($::CLASS)

[06:06] <stevan_> ok

[06:06] <audreyt> hm, that doesn't quite work.

[06:07] <audreyt> anyway, I'll deal.

[06:07] <stevan_> it is the same as change_class really

[06:07] <q[Skud]> there. committed a README

[06:07] <audreyt> Skud++

[06:08] <r0nny> yo

[06:08] <svnbot6> r8198 | skud++ | Initial rough outline of how p6doc will work.

[06:10] <audreyt> stevan_: what is 1.id?

[06:10] <stevan_> good question :)

[06:11] <audreyt> I think it will be whatever the previous 1.id is

[06:11] <audreyt> and if it's the first call to 1.id, then current count of objects + 1

[06:11] <stevan_> previous 1.id?

[06:11] <audreyt> i.e. boxing increments the id.

[06:11] <stevan_> wouldnt calling .id cause it to autobox? 

[06:11] <audreyt> to me it's the most intuitive of all.

[06:11] <audreyt> sure would

[06:11] <stevan_> oh I see

[06:12] * audreyt checks irb and confirms that it's ruby's behaviour

[06:12] <stevan_> well I would assume that we cache 1, 2, 3, 4, 5, etc so they are singletons

[06:12] <audreyt> they are

[06:12] <audreyt> but still their .id can't be predetermined

[06:12] <audreyt> see: diagonal

[06:12] <stevan_> yes, thats fine

[06:12] <audreyt> cool :)

[06:13] <stevan_> as long as 1.id returns the same value always

[06:13] <audreyt> aye

[06:13] <stevan_> I dont think the value it produces is as important as the values uniqueness 

[06:14] <audreyt> nodnod.

[06:17] <audreyt> I'll bbiab -- need to be offline in order to complete the bootstrap :) &

[06:33] <q[Skud]> what's a good name for a document for users coming from perl 5, which assumes familiarity with perl 5 and just describes the differences?

[06:33] <q[Skud]> Perl6::Doc::Perl5Differences

[06:37] <stevan_> audreyt: just commited the first docs for PIL.Native, please review them when you have time 

[06:37] <svnbot6> r8199 | stevan++ | PIL.Native.*

[06:37] <svnbot6> r8199 | stevan++ | - first attempt at documenting the PIL.Native.* modules, mostly

[06:37] <svnbot6> r8199 | stevan++ |   just rough sketches for now, will rework later (and use proper

[06:37] <svnbot6> r8199 | stevan++ |   Haddock markup as well)

[06:38] <stevan_> time for bed now, I will try and do some more tomorrow, $work permitting 

[06:38] <stevan_> adios &

[06:40] <svnbot6> r8200 | skud++ | Roughed in a couple of introductory bits.  Not sure about the name for Perl5Differences 

[06:40] <svnbot6> r8200 | skud++ | but it'll do for now -- I need somewhere to stick things as I notice them.

[06:41] <q[Skud]> karma skud

[07:07] <q[Skud]> ok, hometime.

[07:17] <svnbot6> r8201 | Darren_Duncan++ |  r1274@Darren-Duncans-Computer:  darrenduncan | 2005-12-12 23:15:03 -0800

[07:17] <svnbot6> r8201 | Darren_Duncan++ |  /ext/Rosetta-Incubator : added a brand new, never before seen, c150 line SYNOPSIS pod to Rosetta.pm, having a faux example of its use

[07:37] <ingy> audreyt: thanks for the bit

[07:48] <PJF> D'oh.  Looked like I missed Skud just in time to suggest 'perldelta' as the traditional place to look for changes.

[07:50] <GeJ> greetings all

[08:04] <dduncan> audreyt, ditto

[08:05] <dduncan> but I'm not sure what it allows me to do that I couldn't do before ... give bits to others, perhaps?

[08:07] <Aankhen``> Your status was changed too?

[08:07] <dduncan> mine was ... an hour or three ago

[08:13] <svnbot6> r8202 | pjf++ | 'make clean' now removes 'create_this_file' and 'create_this_file2'.  These

[08:13] <svnbot6> r8202 | pjf++ | files may be left in the top-level directory if a 'make test' is

[08:13] <svnbot6> r8202 | pjf++ | interrupted or fails.

[08:17] <Skud> pjf: back now. good point, only i think it's a faintly dumb name

[08:17] <Skud> pjf: i mean, yes, that's what it was in p5, but i don't think it was a particularly obvious name.

[08:18] <Skud> OTOH, since it's aimed at people coming from earlier versions... they might expect that.

[08:19] <PJF> Skud: Welcome back!

[08:20] <PJF> 'perldoc perldelta' would be the first thing I'd type in with a fresh new install.  Having said that, it doesn't normally document everything that's changed between two major releases.  So 'perldelta6' may be a pointer to your new file.

[08:24] <Skud> pjf: you missed the bit earlier about naming

[08:25] <Skud> we're going to go hierarchical.  the flat namespace in perl 5's perldoc is a total mess

[08:25] <Skud> docs will be named Perl6::Doc::Doctype::Topic

[08:25] <Skud> eg Perl6::Doc::Tutorial::Objects

[08:25] <PJF> Skud: I just spotted that.  I'm reading through the docs now.  And yes, I agree that perl5's perldoc does need some layers.

[08:25] <Skud> so you'd do something like p6doc Tutorial::Objects

[08:28] <svnbot6> r8203 | autrijus++ | * Switch to the much much faster Data.Sequence implementation

[08:28] <svnbot6> r8203 | autrijus++ |   as part of upcoming GHC 6.5.

[08:29] <PJF> Skud: Are you planning on keeping the existing 'perldoc -f' and 'perldoc -q' semantics, to search in Perl6::Doc::Functioins:: and Perl6::Doc::FAQ:: respectively?

[08:30] <gaal> hi.

[08:31] <PJF> Good localtime, gaal!

[08:34] <svnbot6> r8204 | autrijus++ | * Add the runSIO form to MonadSTM to make sure that

[08:34] <svnbot6> r8204 | autrijus++ |   "atomically" works right this time in minilang.

[08:34] <Skud> pjf: hey, check this out... http://nla.gov.au/nla.mus-vn3118296-s1-v.jpg

[08:35] <Skud> pjf: mostly right now i'm just writing docs

[08:35] <Skud> pjf: i figure someone who cares about the tools can deal with that

[08:35] <gaal> hi :) lots of backlog this localmorning

[08:36] <PJF> pjf: Scary, Skud.  Looks almost like something you'd find on a Sydney beach.  ;(

[08:36] <Skud> pjf: quite. presumably that one dates to the trade-unions-vs-kanaka-labour thing from 1900ish

[08:38] <gaal> audreyt: so, should I fix 'is export' first? oh and also: is sub exportation also lexical by default?

[08:38] <PJF> Skud: Took me a while to spot the date.  I thought it read '1980' for a moment.

[08:38] <Skud> the mustaches didn't give it away?

[08:41] <Skud> ok, well, i've had about as much catching up with the news as i can stand

[08:41] <dduncan> Skud, haven't seen that before

[08:41] <Skud> looks like we'll get some rain tonight, which might quieten things down a little

[08:42] <Skud> right now, i feel the desparate urge to curl up with a trashy novel and some chocolate.  i'll be back tomorrow.

[08:42] <PJF> Skud: I sincerely hope that things do quieten down.  The news has been most depressing.

[08:43] <webmind> depressing ?

[08:43] <Skud> webmind; the sydney riots

[08:43] <svnbot6> r8205 | autrijus++ | * PIL bootstrapping #1 -- only opaque::send left to do

[08:43] <svnbot6> r8205 | autrijus++ |   before we can run the boostrap code!

[08:43] <svnbot6> r8205 | autrijus++ | * Also introduce the idea of an "ObjectSpace" that the user

[08:43] <svnbot6> r8205 | autrijus++ |   can dump at end of program (which may have holes in it

[08:43] <svnbot6> r8205 | autrijus++ |   due to GC) and introspect from.

[08:43] <GeJ> PJF: got that on the news... well, it was in german, so I got only the half of it. What started the all thing?

[08:43] <webmind> ah haven't read about those

[08:43] <webmind> was trying to follow the CIA coverup

[08:43] <Skud> webmind: http://smh.com.au/

[08:45] <PJF> GeJ: Bloody-minded intolerance started the whole thing.  Although that's probably not the answery you're looking for.

[08:45] <svnbot6> r8206 | autrijus++ | * add the missing PIL.Native.Objects

[08:46] <Skud> some kid on tv said it was because the "lebs kicked soccer balls at hte lifeguards and stole people's towels"

[08:46] <Skud> which is just fucking bizarre

[08:46] <Skud> http://en.wikipedia.org/wiki/2005_Cronulla_race_riot

[08:49] <gaal> audreyt: so what I was having in mind was that every exportation, including ruleSubDeclaration etc., should make a note instead of pushing the symbol immediately, and then do the actual symbol push via the InitDat thing in the rule for use.

[08:51] <gaal> data InitDat = { symbols :: [(Pad -> Pad)], pragmas :: [Pragma] }

[08:52] <gaal> this is assuming a module has *no* control over the scope of a symbol it exports, and the calling module always gets to determine that; is this correct?

[08:52] <gaal> (doesn't sound very Perlish to me...!)

[08:54] <gaal> also probably Pad -> Pad needs a type, right? :)

[08:56] <gaal> type PadMutator = (Pad -> Pad) ? Or a better name? Or not at all?

[08:59] <gaal> Also, I'm not sure I understand how many pads an Env has. in mkEnv it looks like there's only one pad, envLexical. But looking at Scope suggests there's a Pad for every kind of scope. Does that work because there's also an Env for every scope!?

[09:03] <dduncan> here's something different, by the Writers Guild of America: http://www.productinvasion.com/

[09:04] <dduncan> related is http://www.wga.org/subpage_newsevents.aspx?id=1422

[09:05] <dduncan> related, http://www.wired.com/news/business/0,1367,69775,00.html?tw=wn_tophead_3

[09:05] <dduncan> that is all

[10:25] <svnbot6> r8207 | gaal++ | * minor refactoring: type PadMutator = (Pad -> Pad)

[10:51] <audreyt> stevan_: ping

[10:52] <audreyt> gaal: all "scopes" are in envLexical

[10:52] <audreyt> (or envGlobal)

[10:52] <audreyt> stevan_: I've bootstrapped get_method

[10:57] <gaal> hey audreyt. but where is, for example, the pad for SState?

[10:57] <gaal> envLexical is only SMy, right?

[10:58] <PJF> Night all.  I'm going to try and get some sleep tonight.  Happy hacking.

[10:59] <audreyt> gaal: also in envLexical

[10:59] <audreyt> but it's not cleared upon reentry -- see reducePad in Eval

[11:04] <gaal> so envLexical holds the concatenation of all pads, and when reentering (reducing again), each new pad is unioned correctly by its type?

[11:07] <gaal> a Pad node in Exp, then, can be thought of as a bunch of pad update requests to a certain scope

[11:08] <gaal> (is it really a bunch? can the parser group several items in this pad? looking....)

[11:13] <audreyt> yes, a bunch

[11:13] <audreyt> because it's unionPad'ed with the existing pad

[11:13] <audreyt> so you can throw in a bunch of pads at once

[11:14] <gaal> I'm still trying to see where this would happen

[11:14] <gaal> my ($x, $y, $z)  ?

[11:18] <gaal> ah, I think I see: eg. ruleVarDeclaration second choice

[11:18] <gaal> (decl, lhs) <- choice ..... do names <- parens . (`sepEndBy` ruleComma) ...

[11:18] <audreyt> good that you see it, because my brain is fried again... it's 10pm, been working nonstop all night :)

[11:19] <svnbot6> r8208 | autrijus++ | * bootstrapping of ::Class.isa(::Class) is complete.

[11:19] <svnbot6> r8208 | autrijus++ |   try these in pil shell:

[11:19] <svnbot6> r8208 | autrijus++ |     ::Class.get_method('get_method')

[11:19] <svnbot6> r8208 | autrijus++ |     ::Class.add_method('foo', -> $x { self.get_method($x) })

[11:19] <svnbot6> r8208 | autrijus++ |     ::Class.foo('foo')

[11:19] <gaal> This is starting to click... but I'm pretty sure the spec is going to change (see post to p6l)

[11:20] <gaal> make pil => src/syck/syck_st.c:5:23: error: ghcconfig.h: No such file or directory

[11:20] <svnbot6> r8209 | autrijus++ | * make SIO a subclass of Functor to save some typing.

[11:20] <gaal> do I need a -dev package?

[11:21] <audreyt> no... a sec

[11:22] <audreyt> hm, maybe you do. do you have something like /usr/local/lib/ghc-6.4.1/include/ghcconfig.h ?

[11:22] <audreyt> I thought ghc will come with a -dev already

[11:23] <gaal> i have it in /usr/lib, not /usr/local/lib

[11:23] <gaal> (debian)

[11:23] <audreyt> nod... that should do

[11:24] <gaal> um, but the include says

[11:24] <gaal> #include "ghcconfig.h"

[11:24] <audreyt> probably a missing -I line

[11:24] <gaal> yeah

[11:24] <audreyt> the main pugs works though?

[11:24] <gaal> yeah

[11:24] <gaal> don't worry about it, i'll chase it

[11:25] <audreyt> ... but I fixed it

[11:26] <gaal> "some definition of fastest" etc. :)

[11:26] <audreyt> try r8210 :)

[11:27] *** gugod___ is now known as gugod

[11:27] <svnbot6> r8210 | autrijus++ | * pil doesn't depend on syck, so don't pull in syck.

[11:27] <svnbot6> r8210 | autrijus++ |   reported by gaal++

[11:28] <gaal> same error :(

[11:29] <gaal> I think I may need make clean though. sec

[11:30] <audreyt> perl Makefile.PL again

[11:30] <audreyt> also r8211 :)

[11:31] <audreyt> stevan_: I need help with transcribing the s-exp model or the MetaModel::Bootstrap to the minilang

[11:31] <svnbot6> r8211 | autrijus++ | * "remember" command history in PIL shell by replaying all previous commands.

[11:32] <audreyt> stevan_: please see src/PIL/Native/Eval.hs line 42 

[11:32] <audreyt> addClassMethods

[11:32] <audreyt> that's where the boot code belongs

[11:33] <audreyt> so... any help in transcribing the various stages of boot code into minilang form is appreciated -- once that runs we'll finish boostrapping tomorrow

[11:33] <audreyt> I'll check back ~8hrs from now. good night :)

[11:36] <gaal> night audreyt

[11:36] <audreyt> *wave* &

[12:38] <svnbot6> r8212 | gaal++ | * fix `pil' and `pili' targets.

[12:44] <fglock> what is the status of 'listfix:' for comma and zip operators? it was suggested, but not official, I think

[12:49] <meppl> guten morgen

[13:02] <svnbot6> r8213 | autrijus++ | * Support for closures in Minilang:

[13:02] <svnbot6> r8213 | autrijus++ |     (-> $x {-> $y {$x.add($y)}}).(3).(4)

[13:02] <svnbot6> r8213 | autrijus++ | * Also the implicit Y-combinator form of &?SUB:

[13:02] <svnbot6> r8213 | autrijus++ |     (-> $n {-> &f {

[13:02] <svnbot6> r8213 | autrijus++ |         $n.eq(0).cond(

[13:02] <svnbot6> r8213 | autrijus++ |             ->{1},

[13:02] <svnbot6> r8213 | autrijus++ |             ->{$n.multiply(&f.($n.subtract(1)))}

[13:02] <svnbot6> r8213 | autrijus++ |         )

[13:02] <svnbot6> r8213 | autrijus++ |     }.(&?SUB)}).(10)

[13:02] <wolverian> well, that blew my mind.

[13:03] <clkao> mmm yum

[13:04] <Alias_> Oh yeah, because anyone understands THAT commit :)

[13:04] <gaal> audreyt: still around? I'm thinking we need a new Scope, SExported

[13:04] <gaal> a module is parsed once, but used many times

[13:04] <gaal> so currently exporting must be broken

[13:11] <gaal> Yes it indeed is.

[13:11] <blm> Alias_: Are you there?

[13:11] <gaal> ./pugs -e 'use Ex; say f; package B; use Ex; say f' <= where Ex.pm has 'sub f is export { 42 }'

[13:11] <audreyt> it is broken, and yes I agree (or cache the Export symbols in %INC? anyway a new structure is needed)

[13:11] <Alias_> yep

[13:11] <Alias_> (testing, 1, 2, 3)

[13:12] <blm> Alias_: can you /msg me?

[13:12] <gaal> %INC is interesting... but won't that cause reference counting troubles?

[13:13] <audreyt> gaal: no, because we are not reference counting anymore :) also because the time it's queried in the compiler 

[13:13] <Alias_> did you get that?>

[13:13] <audreyt> not in the runtime

[13:13] <audreyt> so it doesn't affect the runtime behaviour (please keep in mind the separate compilation model)

[13:13] <blm> Alias_: no. Arrghh. This is driving me mad.

[13:14] <Alias_> What client are you using?

[13:14] <blm> Alias_: Never had a problem with irc before :-(

[13:14] <blm> Using irssi on debian

[13:14] <audreyt> Alias_: you may need to register your nick on freenode

[13:14] <audreyt> /msg nickserv register

[13:15] <audreyt> they banned all /msg for unregistered people

[13:15] <gaal> mindborne. so just add a "exports" element in the %INC element for this module?

[13:15] <Alias_> ah

[13:15] <Alias_> Stupid freenode

[13:15] <audreyt> gaal: prolly, yeah

[13:16] <gaal> okay, I'll see how that works out. weren't you going to sleep? :)

[13:17] <Alias_> ok, and if you forget your nickserv password?

[13:17] <blm> You have to convince an op that you registered the nick.  You can get on with a diff nick

[13:17] <gaal> Alias_: you /msg lilo and ask for it to be reset

[13:17] <Alias_> God what an ugly system

[13:18] <audreyt> gaal: right, but I started dreaming about static analysis of minilang and discovered I forgot to hack in closure support

[13:19] <gaal> I hate it when that happens :)

[13:19] <audreyt> :)

[13:19] <Alias_> audreyt: Got that 5-10 minutes?

[13:20] <audreyt> Alias_: go ahead - I've seen File::sharedir

[13:20] <Alias_> 2 questions actually

[13:20] <gaal> anyone here vim-savvy? why does :map <F3>   :cn<CR> not work? It does something like ~~~ instead of what I want it to do.

[13:20] <Alias_> Firstly, what's with dist vs module auto dirs

[13:21] <Alias_> It would seem that dist share Foo-Bar is the same as module share Foo::Bar

[13:21] <audreyt> yes and it is intentional

[13:22] <wolverian> gaal, worksforme

[13:22] <Alias_> It is?

[13:22] <audreyt> dist split with '-' and module split with '::' are conflated into the same hierarchy

[13:22] <Alias_> Well that just plain sucks

[13:22] <Alias_> Since dist name and module names are supposed to be orthogonal

[13:23] <audreyt> why? is it not conventional that people use the same name for main module and dist?

[13:23] <audreyt> I don't think it's part of perl 5 module system's design that they are orthogonal

[13:24] <audreyt> (I agree they _should_ be orthogonal, but hindsight is 20/20 etc.)

[13:24] <Alias_> It's convention, but it's not meant to be related

[13:24] <Alias_> For example, "bioperl"... 

[13:25] <audreyt> if you really want to solve this, introduce an auto/share/ hierarchy

[13:25] <audreyt> for per-module autos

[13:25] <audreyt> and keep original per-dist ones in place with packlist etc

[13:25] <gaal> wolverian: what does?

[13:25] <wolverian> gaal, :map <F3> :cn<CR>

[13:26] * audreyt remembers she's got a plane to catch tomorrow noon

[13:26] <audreyt> Alias_: what's the other question? be quick. :)

[13:26] <gaal> wolverian: oh. the maddening thing is that it *used to* work. maybe putty's screwing it up?

[13:26] <wolverian> gaal, probably

[13:27] <Alias_> audreyt: Redesigning the <request> part of the PITA-XML to handle multiple languages and install sequences

[13:27] <audreyt> goodie

[13:27] <Alias_> So I need to deal with requests in terms of schemes and authorities now/

[13:27] <Alias_> ?

[13:27] <Alias_> p5, p6 etc

[13:27] <fglock> audreyt: will 'listfix:Y' replace 'infix:Y'?

[13:28] <fglock> (zip operator)

[13:28] <gaal> yay! changing the Keyboard settings there did the trick :-)

[13:28] <Alias_> audreyt: Got a URL for the full C<use> format?

[13:28] <audreyt> fglock: no... infix:Y is assoc<list>

[13:29] <fglock> ah, ok

[13:29] <audreyt> Alias_: http://svn.perl.org/perl6/doc/trunk/design/syn/S11.pod

[13:31] <Alias_> <request><scheme>p5.makefile</scheme><filename>...</filename><md5sum>...</md5sum><authority>CPAN</authority><authpath>...</authpath></request>

[13:31] <gaal> wolverian: as thanks, take also 'map <S-F3> :cp<CR>' and ':mksession' if you don't know them already :)

[13:32] <Alias_> I figure something along those general lines

[13:33] <audreyt> Alias_: sure, that worksforme... I'd probably split into <scheme> and <subscheme> instead of a dot, but it's all bikeshed

[13:34] <gaal> what do you say to finally throwing away the %*INC key = relative filename cruft?

[13:34] <Alias_> audreyt: From what I can tell, the dot is part of the URI scheme format

[13:34] <Alias_> audreyt: Like z39.50s, z39.50r, etc

[13:35] <Alias_> Raw "p5" would do the "use Makefile.PL or Build.PL as you want" and the . dictates a specific installer

[13:35] <gaal> %*INC<My::Module> = { relative_path => 'My/Module.pm', loaded_resource => '/usr/lib/..../My/Module.pm', exports => { '&frob' => ... } }

[13:36] <audreyt> Alias_: oh, you are actually using URI scheme format... sure then, RFC 2396 is your friend

[13:36] <Alias_> Well, you said "scheme"...

[13:36] <Alias_> So of course I just assumed ... :)

[13:36] <audreyt> the assumption would be correct :)

[13:36] <audreyt> gaal: I say it makes sense, go ahead :)

[13:36] <gaal> or even go all the way and stipulate a class for this in the Prelude

[13:36] <Alias_> in which case the . should be fine

[13:37] <gaal> only problem is that it must be tightly coupled with pugs

[13:37] <gaal> so it isn't really wholly defined in the prelude.

[13:37] <audreyt> gaal: sure, but what methods would you throw to it?

[13:37] <audreyt> yeah

[13:37] <audreyt> just keep it a struct for now

[13:37] <audreyt> Alias_: yup.

[13:37] <audreyt> ingy: I'll release Perl6::Bible. is it okay for me to assume comaintainership?

[13:38] <gaal> ok. (wanted to put it in the prelude so that the prelude can easily define pragmatic modules without undue %*INC hackery)

[13:39] <audreyt> oh, right, we need support for reexportation

[13:39] <audreyt> use CGI is export;

[13:39] <audreyt> that way Prelude can be decomposed to a number of .pms

[13:39] <audreyt> and is generally sane anyway

[13:40] <gaal> whoa, that's cool. I did horrible hacks to get halfway facades in P5

[13:48] <Alias_> audreyt: hmm... S11 is very... conversational.

[13:48] <stevan_> audreyt: I am grabbing the latest version right now ...

[13:49] <audreyt> stevan_: hey, cool... let me know if it makes sense to you :)

[13:49] <stevan_> audreyt: I will 

[13:49] <audreyt> Alias_: verily, which is why we want a ::Spec instead of a ::SynopsisPlusRanting

[13:49] <stevan_> shouldnt you be sleeping?

[13:49] <Alias_> ah

[13:49] <Alias_> So in brief... the default scheme is "perl5", and the default authority is "cpan" ?

[13:50] <audreyt> for perl5, maybe, but otherwise it's "perl6" :)

[13:50] <Alias_> right

[13:50] <Alias_> oh yeah... ok

[13:50] <Alias_> Maybe my question should then have been, scheme "perl5" and "perl6", and the authority is "cpan"

[13:50] <audreyt> yup

[13:51] <Alias_> But how does the authority differ per scheme

[13:51] <stevan_> audreyt: when I "make pil" I am getting this -> src/cbits/fpstring.h:1:19: error: HsFFI.h: No such file or directory

[13:51] <stevan_> do I need to "make" first?

[13:52] <audreyt> hm, what's your system?

[13:52] <stevan_> OS X Tiger

[13:52] <stevan_> I found the file in /usr/local/lib/ghc-6.4.1/include/HsFFI.h

[13:52] <audreyt> gaal reported the same bug

[13:52] <stevan_> wasnt gaal's the ghcconfig.h?

[13:53] <audreyt> yeah, but same thing

[13:53] <audreyt> I removed syck so you are seeing HsFFI instead

[13:54] <audreyt> fixing

[13:57] <gaal> pil doesn't need cbits either?

[13:58] <audreyt> fixed

[13:58] <Alias_> audreyt: So is the authority per-scheme?

[13:58] <audreyt> gaal: it does need

[13:58] <gaal> uh, how do I spell s,::,/,g in Haskell?

[13:59] <gaal> without Parsec :-)

[14:00] <audreyt> intersperse "/" . split "::"

[14:00] <gaal> yay, thanks.

[14:00] <audreyt> err, prepend it by (concat .)

[14:01] <audreyt> np :)

[14:01] <audreyt> stevan_: try r8214

[14:01] <svnbot6> r8214 | autrijus++ | * build syck and cbits with GHC, not with perl.

[14:01] <svnbot6> r8214 | autrijus++ |   Reported by: gaal++, stevan++

[14:02] <stevan_> trying right now

[14:03] <audreyt> ingy: let me know if I can make myself comaint of Perl6::Bible, or you'd make me comaint, or release the svn trunk version :)

[14:03] <stevan_> audreyt: PIL.Native.Object seems to make sense, but i am still drinking my first cup of coffee,.. so I can't be sure ;)

[14:03] <audreyt> ahh... gotta love the timezones.

[14:04] <gaal> gotta love the coffee, too

[14:04] * audreyt waves &

[14:04] <stevan_> (-> $coffee { $coffee.increment().increment() }).()

[14:04] <audreyt> stevan_: good night... hopefully this time for real

[14:05] <stevan_> audreyt: good night ...close the laptop,.. that might help

[14:05] <gaal> audreyt splits, gaal splits and intersperses

[14:05] <audreyt> stevan_: you can translate the code and assume that &NEW_OPAQUE and &WALKMETH etc is there

[14:05] <stevan_> ok

[14:05] <audreyt> will try to get it all done before I board the plane tomorrow

[14:05] * audreyt waves &

[14:29] <trym> *yawn*􏿽xC6

[14:33] <gaal> yay. vim users, http://haskell.org/hawiki/Vim (the errorformat there is useful)

[14:52] <clkao> http://nopaste.snit.ch:8001/5851

[14:57] <gaal> clkao: latest r? I think that was fixed...

[14:57] <gaal> just delete http://nopaste.snit.ch:8001/5851

[14:58] <gaal> and er

[14:58] <gaal> delete src/Pugs/PreludePC.hs that is

[14:58] <gaal> and build again.

[14:58] <clkao> latest. cheers

[15:08] <svnbot6> r8215 | kane++ |  r315@coke:  kane | 2005-12-07 13:29:42 +0100

[15:08] <svnbot6> r8215 | kane++ |  * add alternatives code

[15:08] <svnbot6> r8215 | kane++ |  * add tests for it

[15:08] <svnbot6> r8215 | kane++ |  * move the linking section to Installation.pm

[15:08] <svnbot6> r8215 | kane++ |  * add a test .jib for this purpose

[15:08] <svnbot6> r8215 | kane++ |  r316@coke:  kane | 2005-12-07 15:35:01 +0100

[15:08] <svnbot6> r8215 | kane++ |  * change the way package.pm works:

[15:08] <svnbot6> r8215 | kane++ |      * it now delegates to Package::Source (the old package.pm),

[15:08] <svnbot6> r8215 | kane++ |          package::binary and package::installed to represent the

[15:08] <svnbot6> r8215 | kane++ |          3 types of packages we know

[15:08] <svnbot6> r8215 | kane++ |      * package->new will figure out which type of package is intended

[15:08] <svnbot6> r8215 | kane++ |          and build the right object, and set up inheritance

[15:08] <svnbot6> r8215 | kane++ |      * Installation.pm will return Installed objects

[15:08] <svnbot6> r8215 | kane++ |  r317@coke:  kane | 2005-12-07 16:50:45 +0100

[15:08] <svnbot6> r8215 | kane++ |  * make multiple installation dirs work

[15:08] <svnbot6> r8215 | kane++ |  * add a dir() accessors to Installation.pm

[15:08] <svnbot6> r8215 | kane++ |  * make Path::Class not export it's damn dir() function all over hte place

[15:08] <svnbot6> r8215 | kane++ |  * update tests to match

[15:08] <svnbot6> r8215 | kane++ |  r341@coke:  kane | 2005-12-08 16:04:22 +0100

[15:08] <svnbot6> r8215 | kane++ |  * add constants for object types

[15:08] <svnbot6> r8215 | kane++ |  r342@coke:  kane | 2005-12-08 16:10:49 +0100

[15:08] <svnbot6> r8215 | kane++ |  * use constatns for allow() check

[15:08] <svnbot6> r8215 | kane++ |  r343@coke:  kane | 2005-12-08 17:05:23 +0100

[15:08] <kane-xs_> wee

[15:09] <svnbot6> r8215 | kane++ |  * submit new style config that can deal with dynamic paths

[15:09] <kane-xs_> clkao++ # defuckifying svk issues

[15:14] <gaal> argh! what's wrong with this?

[15:14] <gaal> Couldn't match `Exp' against `Val'

[15:14] <gaal> In the expression: VStr $ (decodeUTF8 pathName)

[15:15] <gaal> why's VStr expecting Exp?

[15:15] <gaal> (those parens are redundant, I know)

[15:30] <svnbot6> r8216 | fglock++ | * misc/Parser-Mini - rename pil2_* to pil1_*

[15:59] <gaal> ouch, running make clean instead of make just now really hurt :-( did I mention I wanted ccache for ghc?

[16:01] <gaal> hey, come to think of it if I install a systemwide ccache that should just work!

[16:38] <kane-xs_> seen audreyt

[16:38] <jabbot> kane-xs_: I havn't seen audreyt, kane-xs_

[16:38] <kane-xs_> pff, liar

[16:52] <gaal> kane-xs_: about 3h ago, I think.

[16:52] <kane-xs_> gaal: and sleeping i assume

[17:03] <svnbot6> r8217 | kane++ |  r450@coke:  kane | 2005-12-13 17:59:14 +0100

[17:03] <svnbot6> r8217 | kane++ |  * fix meta_dir to be an absoulte path -- this will need to be changed to support multiple installations

[17:03] <svnbot6> r8217 | kane++ |  * fix order issue in meta.info accessor

[17:03] <svnbot6> r8216 | fglock++ | * misc/Parser-Mini - rename pil2_* to pil1_*

[17:05] <svnbot6> r8218 | kane++ |  r451@coke:  kane | 2005-12-13 18:00:02 +0100

[17:05] <svnbot6> r8218 | kane++ |  * use constants for allow() handling

[17:05] <svnbot6> r8218 | kane++ |  * update $inst->available upon registration

[17:05] <svnbot6> r8219 | kane++ |  r452@coke:  kane | 2005-12-13 18:00:49 +0100

[17:05] <svnbot6> r8219 | kane++ |  * use constants for allow handling

[17:05] <svnbot6> r8219 | kane++ |  * use new style config paths

[17:05] <svnbot6> r8219 | kane++ |  * fill in basic uninstall() with podded out code from prototype

[17:05] <svnbot6> r8220 | kane++ |  r453@coke:  kane | 2005-12-13 18:01:36 +0100

[17:05] <svnbot6> r8220 | kane++ |  * make install() return a package::installed

[17:05] <svnbot6> r8220 | kane++ |  * fix silly typo

[17:05] <svnbot6> r8221 | kane++ |  r454@coke:  kane | 2005-12-13 18:02:01 +0100

[17:05] <svnbot6> r8221 | kane++ |  * let JIB::Package accept arbitrary arguments to pass on to underlying classes* let JIB::Package accept arbitrary arguments to pass on to underlying classes* let JIB::Package accept arbitrary arguments to pass on to underlying classes* let JIB::Package accept arbitrary arguments to pass on to underlying classes* let JIB::Package accept arbitrary arguments to pass on to underlying classes* let JIB::Package accept arbitrary arguments to p

[17:08] <fglock> "repeat something over and over again until it becomes true"

[17:08] <svnbot6> r8222 | kane++ |  r455@coke:  kane | 2005-12-13 18:02:38 +0100

[17:08] <svnbot6> r8222 | kane++ |  * prefix got added by someone to the sample .info file -- this broke the test

[17:08] <svnbot6> r8223 | kane++ |  r456@coke:  kane | 2005-12-13 18:02:58 +0100

[17:08] <svnbot6> r8223 | kane++ |  * better installed() tests

[17:08] <svnbot6> r8224 | kane++ |  r457@coke:  kane | 2005-12-13 18:03:11 +0100

[17:08] <svnbot6> r8224 | kane++ |  * use new style config paths

[17:16] <fglock> ?eval Array.new.push(1)

[17:16] *** evalbot_8197 is now known as evalbot_8224

[17:16] <evalbot_8224> Error: Can't modify constant item: VUndef 

[17:17] <fglock> what's wrong with this?

[17:19] <fglock> ?eval [].push(3,4)

[17:19] <evalbot_8224> 2 

[17:20] <fglock> this is weird too - it doesn't return a list, even in list context '@a=...'

[17:21] <wolverian> in perl5 it returns the array's new size.

[17:21] <wolverian> in list context, too :)

[17:21] <wolverian> (I don't know how that's in any way useful.)

[17:29] <xinming> fglock: hmm, for slurp stdin, the "perfect" version is `** $*IN.slurp` :-)

[17:29] <svnbot6> r8225 | yiyihu++ | Change slurp stdin /~list($*IN)/ or /~$*IN.slurp/ to /** $*IN.slurp/, Since ** operator is implemented.

[17:30] <fglock> xinming: thanks!

[17:30] <fglock> xinming: I guess stringification forces ** context, since strings are non-lazy by default

[17:31] <xinming> fglock: as, said in synopsis, in string context, each element in list will add a space before the next one,

[17:31] <fglock> xinming: right

[17:32] <xinming> fglock: though, we can use ~list($*IN).as("%s", '');

[17:32] <xinming> fglock: But the problem here is, It might take more cpu circle. :-/

[17:34] <xinming> slurp happens lazilly

[17:34] <xinming> so ** will force flat the list

[17:34] <xinming> All list contexts are lazy by default. They still flatten eventually, but only when forced to. You have to use unary ** to get a non-lazy flattening list context (that is, to flatten immediately like Perl 5).

[17:34] <xinming> in synopsis 9

[17:36] <fglock> but how this changes the addition of spaces?

[17:38] <xinming> fglock: this are in two context, slurp happens lazilly, and return a string, So, we force slurp to eval immediately.

[17:38] <fglock> audreyt: re minilanguage - '[].push(3,4)' doesn't return a list in pugs

[17:38] <fglock> xinming: such that it returns a single string?

[17:38] <xinming> fglock: yes

[17:39] <xinming> but need **

[18:07] <fglock> xinming: ./pugs -e ' my $s = ~ $*IN.slurp; print $s ' - reads a line and prints it, like if the string was lazy?

[18:08] <fglock> ./pugs -e ' my $s = ~ $*IN.slurp; print "[$s]" ' - confirms this: it only prints "]" after ctrl-d

[18:10] <fglock> and it doesn't add spaces

[18:14] <fglock> so we have some kind of lazy string here

[18:27] <gaal> could someone with a built latest pugs please run t/data_types/flattening.t and tell me if it dies?

[18:28] <gaal> or t/builtins/want.t

[18:28] <ingy> audreyt: go ahead on p6b

[18:31] <fglock> gaal: 'not ok 4 - scalar is not implicitly array # TODO bug'

[18:31] <fglock> r8090

[18:38] <gaal> fglock: there've been a few commits since :-)

[18:39] <gaal> I'm getting crashes on missing .elem, .splice, etc. on all sorts of tests, and I want to know if it's my fault since I've been hacking exportation a bit.

[18:44] <fglock> gaal: I'm recompiling - it should be ready in a few mins

[18:47] <stevan_> fglock: the mini-language is not the same as pugs

[18:47] <stevan_> you have to make pili to get the mini-lang repl 

[18:48] <stevan_> (at least I think so, cause I have not yet been able to get it to complie)

[18:49] <fglock> stevan: yes, but it would be nice if it would be valid p6

[18:49] <fglock> and it is not far from that

[18:50] <fglock> and if it would be easily parsed, we could have a parrot compiler soon

[18:52] <stevan_> fglock: I am not sure it matters if it is valid p6 or not

[18:53] <stevan_> it is meant to be embedded deep within, and not relevant outside of it's own context

[18:53] <fglock> gaal: No such method: "&elems", using r8225

[18:56] <stevan_> fglock: the idea is that if you can implement the peices needed for the mini-lang, then the mini-lang source can be shared

[18:56] <stevan_> so we would not target parrot so much as Parrot would be the host for htis

[18:57] * stevan_ needs to write this stuff down somewhere

[18:58] <fglock> stevan_: there are some advantages of making it a subset of p6

[18:59] <fglock> you will be able to use the p6 debugger when it's available :)

[19:01] <stevan_> fglock: true

[19:01] <stevan_> well I know audreyt is trying to keep it "pure" ,.. so maybe it will end up being Featherweight P6 

[19:05] <fglock> re '[].push(3,4)' returning a scalar in pugs - maybe it should return an Array when in list context

[19:06] <stevan_> fglock: that syntax exists mostly because we have no variables and no constructors

[19:06] <stevan_> it is not ideal

[19:07] <stevan_> I think audreyt hacked in a [3, 4] version recently too

[19:07] <stevan_> ?eval Array.new().push(3, 4)

[19:07] *** evalbot_8224 is now known as evalbot_8225

[19:07] <evalbot_8225> Error: Can't modify constant item: VUndef 

[19:08] <stevan_> ?eval [].push(3, 4)

[19:08] <evalbot_8225> 2 

[19:08] <stevan_> ?eval [].push(3, 4, 5)

[19:08] <evalbot_8225> 3 

[19:08] <stevan_> ?eval ().push(3, 4, 5)

[19:08] <evalbot_8225> Error: Can't modify constant item: VUndef 

[19:09] <stevan_> ?eval Array.new

[19:09] <evalbot_8225> Array.new() 

[19:09] <stevan_> ?eval my @x = Array.new;

[19:09] <evalbot_8225> [Array.new(),] 

[19:09] <gaal> rehi

[19:09] <stevan_> hey gaal :)

[19:09] <gaal> fglock: thanks v much!

[19:09] *** stevan_ is now known as stevan

[19:09] <fglock> np

[19:10] <gaal> stevan: that stevan_ guy was just here. i followed your advice and didn't talk to him.

[19:10] <stevan> gaal: yes, best to ignore him :P

[19:10] <stevan> although I think he is catching on,.. he seems to disapear when you arrive

[19:11] <gaal> i'll ci my subversive %*INC change once i finish this divine falafel.

[19:11] * stevan wants a falafel too 

[19:11] <fglock> mmm falafel

[19:12] * fglock does his own falafel

[19:12] <fglock> it is hard to find falafel here

[19:12] <gaal> stevan: tell your wife there's falafel right around the corner where I live :-)

[19:12] <stevan> that will do her no good :)

[19:12] <stevan> but I will try 

[19:13] <stevan> I almost got her to say maybe last night

[19:14] <gaal> data YAPC = Maybe Falafel

[19:14] <stevan> is that a lazy falafel??

[19:14] <gaal> actually it's a type error, this is not Just some falafel you know.

[19:15] <stevan> :)

[19:15] <stevan> as long as yuval doesnt set us all ablaze cooking it,.. 

[19:15] <gaal> uh oh, boiling oil...!

[19:16] <stevan> we will let him handle the tahini... thats pretty safe :)

[19:16] <gaal> yeah, can't threaten us with too much garlic

[19:16] <stevan> :)

[19:36] <svnbot6> r8226 | gaal++ | * Make %*INC more useful. Keys are now Perlish names, not relative paths

[19:36] <svnbot6> r8226 | gaal++ |   to filesystem resources. Values are (for now) a simple hash with

[19:36] <svnbot6> r8226 | gaal++ |   reasonable memebers (the relative and absolute paths); this will

[19:36] <svnbot6> r8226 | gaal++ |   eventually evolve to a Module description object of some sort. This

[19:36] <svnbot6> r8226 | gaal++ |   change needs to be specced.

[21:58] <audreyt> gaal: it may make sense to implement this protocol: http://lambda-the-ultimate.org/node/view/926

[22:07] <Skud> morning, audrey.  just heading into the office.  see you in an hour... i had documentation dreams last night, argh!

[22:08] <audreyt> hopefully it was still an enjoyable dream?

[22:08] <audreyt> I had serializable continuation dreams last night.

[22:12] <obra> audreyt: oo

[22:12] <obra> I really like them. they make life better.

[22:13] <svnbot6> r8227 | clkao++ | Initial import of my jsperl hacks.

[22:14] <gaal> morning audrey! I am just going to bed :)

[22:14] * clkao grins

[22:16] <audreyt> gaal: hey :) did you figure out the VStr problem?

[22:17] <gaal> I think GHC was giving me a wrong line number -- I wasn't casting correctly the *next* line

[22:17] <gaal> it was one of those "couldn't be!" bugs

[22:17] <gaal> so I switched the order of the lines

[22:18] <gaal> and got the compiler error on the same line, this time the right one, that is to say the one with the wrong code

[22:18] <gaal> fixed the code, then it compiled.

[22:18] <gaal> then I extracted the silly cast to a function :-)

[22:19] <gaal> I think I'll put off reading that ltu link for tomorrow. too bad there's $work though :)

[22:21] <gaal> Also I'm hoping @Larry respond to my p6l query because I bet there'll be some changes there eventually. The sooner the better as far as I'm concerned...

[22:21] <gaal> anymoose, gaal gaals. &

[22:24] <audreyt> cool

[22:24] <audreyt> sweet dreams, gaal

[22:26] <clkao> ./pugs -CJS -e 'my @a = (1,2,3,4); pop @a; say +@a'

[22:26] <clkao> i wonder why this doesn't work. is it pil problem?

[22:26] <clkao>  2 more parameters passed to sub &JS::Root::pop than expected (2)

[22:35] <audreyt> it worksforme.

[22:36] <audreyt> [audrey]~/work/pugs$ ./pugs -BJS -e 'my @a = (1,2,3,4); pop @a; sa

[22:36] <audreyt> 3

[22:37] * audreyt goes packing

[22:39] <clkao>  hmmm

[22:48] <stevan> audreyt: ping

[22:48] <svnbot6> r8228 | clkao++ | clkao:~/work/pugs/perl5/PIL2JS clkao$ ./runjs.pl --js=util/jsperl -e 'say $*OS'

[22:48] <svnbot6> r8228 | clkao++ | darwin

[22:48] * clkao grins

[22:48] <clkao> it's no longer 'browser'!!!

[22:49] <audreyt> stevan: pong

[22:49] <stevan> audreyt: still cannot get make pil to work

[22:49] <audreyt> stevan: what's the err?

[22:49] <stevan> this time it is FastPacked String giving issues

[22:50] <stevan> /tmp/ghc1693.hc:8:22: error: fpstring.h: No such file or directory

[22:50] <stevan> fpstring.h is in /src/cbits/

[22:50] <audreyt> fixing

[22:50] <stevan> horray !!!!

[22:50] <audreyt> fixed

[22:51] <audreyt> try again?

[22:51] <stevan> trying ...

[22:52] <stevan> while I am waiting for this to retry,.. 

[22:52] <svnbot6> r8229 | autrijus++ | * fix build problem for Data.FastPackedCString by pulling in src/cbits

[22:52] <stevan> how can I test the mini-lang?

[22:53] <stevan> Test.pm in the mini-lang is not possible (well, not without serious amount of effort)

[22:54] <tewk_> How about a Test.pm that feeds expressions into pili and compares the result?

[22:54] <audreyt> that's certainly a good idea

[22:54] <stevan> tewk_: yes, that is probably the right approach

[22:54] <audreyt> currently we can't bind $*OUT there

[22:54] <stevan> like Parrot::Test does with PIR tests

[22:55] <audreyt> as the bootstrap is not yet complete

[22:55] <stevan> audreyt++ # we have PIL>

[22:55] <tewk_> I'll take a stab at it.

[22:55] <audreyt> another idea is to add a .say to each value

[22:55] <stevan> tewk_++ 

[22:55] <audreyt> or .dump

[22:56] <audreyt> or .trace

[22:56] <stevan> .dump is good

[22:56] * clkao implements opendir

[22:57] <audreyt> ooh, io in javascript

[22:57] <clkao> YES

[22:58] <clkao> see my last commit :) $*OS

[22:59] <tewk_> Is there a Perl6::Test?

[22:59] <audreyt> implemented

[23:00] <stevan> ok, I must run for dinner, but I will be back later this evening 

[23:00] * stevan &

[23:02] <clkao> compiling prelude is too slow

[23:02] <clkao> how do i do development?

[23:03] <clkao> SyntaxError: syntax error at line 34409: )

[23:03] <clkao> great, how to debug?

[23:05] <tewk_> audreyt: make pili gives  /usr/lib/libpthread.so: invalid ELF header

[23:05] <tewk_> because it's a ldconfig script on some platforms 

[23:07] <audreyt> fixing

[23:07] <tewk_> linking it to /lib/tls/libpthread.so.0 fixes, is there some way around that?

[23:07] <tewk_> Loading object (dynamic) pthread ... failed.

[23:07] <tewk_> same thing for libc

[23:07] *** tewk_ is now known as tewk

[23:08] <audreyt> stevan: I think the .trace form is good enough for harness outside the minilang

[23:09] <audreyt> tewk: there's no Perl6::Test afaics... we've been self hosting the tests using ext/Test

[23:09] <svnbot6> r8230 | autrijus++ | * PIL: support for "./pil -e code" to facilitate testing.

[23:09] <svnbot6> r8230 | autrijus++ | * PIL.Native.Eval: support for "$obj.trace()" form that returns the $obj

[23:09] <svnbot6> r8230 | autrijus++ |   but meanwhile prettyprints itself (and any arguments) to output.

[23:09] <audreyt> tewk: see if r8231 worksforyou

[23:09] <audreyt> do whatever needed to work around it in Makefile.PL... I'll check back from airport :)

[23:09] * audreyt waves

[23:10] <obra>   later

[23:10] <svnbot6> r8231 | autrijus++ | * try to fix "pili"

[23:10] <q[Skud]> ok. back.

[23:10] <q[Skud]> i'm not sure if this is a downside or an upside to moving desks... i get far more random perl questions at work now.

[23:12] <audreyt> tewk: I've added some canonization to r8233; that should work for harness (I hope)

[23:12] <svnbot6> r8232 | autrijus++ | * in trace output, replace lines with spaces.

[23:12] <svnbot6> r8233 | autrijus++ | * also squash whitespaces in .trace forms.  Try this:

[23:12] <svnbot6> r8233 | autrijus++ |     ./pil -e '::Class.trace; nil'

[23:12] <audreyt> &

[23:19] <tewk> audreyt: thanks

[23:26] * Alias_ starts the heavy exhaustive testing process

[23:26] <Alias_> parsing 70 character random strings, 90,000 iterations

[23:26] <Alias_> ugh

[23:32] <Alias_> # Looks like you failed 1 test of 90002.

[23:32] <Alias_> DAMN IT! FOILED AGAIN!

[23:36] <audreyt> it's nice to see that PPI is adopting QuickCheck :)

[23:36] <Alias_> of course, debugging is an issue

[23:36] <Alias_> # '/gV1 [[f_]^{$!~=wc Vy$\nW^<0:)&::'z[f?=\n9+xV^{f.$:+;&{,c=z8]:),W|rc\t:_\\': Tokenizer returned an error

[23:36] <wilx> Hehe.

[23:36] <wilx> Nice :)

[23:36] <audreyt> QuickCheck has a "shorten" 

[23:37] <audreyt> you can cut down substrings from both sides

[23:37] <Alias_> QuickCheck?

[23:37] <audreyt> until it exhibits the error with shortest substring

[23:37] <Alias_> how interesting

[23:37] <audreyt> Alias_: haskell's random-input-based testing

[23:37] <Alias_> yes yes, what an interesting idea

[23:37] <audreyt> Test::LectroTest on CPAN does something like it.

[23:38] * audreyt runs to airport -- see ya! &

