[00:29] <nothingmuch> loveliest regex ever: qr/(?!)/

[00:29] <geoffb> OK, with that housekeeping commit, AFK for a bit

[00:29] <svnbot6> r5330, geoffb++ | Update hack.pod source map:

[00:29] <svnbot6> r5330, geoffb++ | * Add a few missing second-level directories

[00:29] <svnbot6> r5330, geoffb++ | * Reorder a couple clearly out of place directories

[00:29] <svnbot6> r5330, geoffb++ | The question of whether directory sorting should be case sensitive is open

[00:29] <svnbot6> r5330, geoffb++ | to the masses; I didn't make any moves to fix this issue.

[02:18] <nothingmuch> http://perlmonks.org/?node_id=473596

[02:18] * nothingmuch laughs manically

[02:18] <nothingmuch> who needs rules, eh?

[02:35] <stevan> stop showing off your reg-exp-fu and code up the meta-model signatures man!!!!

[02:37] <nothingmuch> stevan: sorry, i got distacted all night, and now it's 5:40

[02:37] <nothingmuch> first I did a favour for a friend

[02:37] <nothingmuch> then I tried to fix something in my server

[02:37] <stevan> and what, I am not a friend?

[02:37] <nothingmuch> at 3:30 or so I found that wonderful  perlmonks post

[02:37] <nothingmuch> uh, sure you are

[02:37] * stevan starts to cry

[02:38] <stevan> the times we shared in Toronto, they meant nothing to you, i can see that now

[02:40] <nothingmuch> uh, i'm sorry baby

[02:40] <nothingmuch> i was just, uh...

[02:40] <stevan> LOL

[02:40] <nothingmuch> i just felt like writing other people's code, you know? i thought you were OK with that

[02:41] <stevan> your just a dirty stinking code whore, thats all you are :P

[02:41] <nothingmuch> it rings better as "i felt like writing code for other people"

[02:41] * nothingmuch burps

[02:41] <stevan> LOL

[03:21] <nothingmuch> good night fair gay camels

[03:37] <cm> camels!

[03:37] <autrijus> greetings.

[03:37] <cm> herro autrijus

[03:37] <cm> i read half of your paper :)

[03:37] <autrijus> gleetings cm.

[03:38] <autrijus> cool. :) any comments so far?

[03:41] <cm> i liked to incorporate a lot of cool Haskell stuff into pugs (libraries, parts of the hierarchical library, ..), instead of reinventing the wheel (or so it seems).

[03:41] <cm> heck, you even include stuff from Oleg, whose posts i sometimes don't even try to understand :)

[03:45] <autrijus> :)

[03:46] * autrijus wonders what wheels have pugs reinvented from the existing libraries

[03:50] * cm listens

[03:55] <autrijus> I can't think of any :)

[03:57] <cm> hehe

[04:58] <autrijus> @hoogle ((a -> b) -> a) -> a

[04:58] <autrijus> er, wrong channel.

[05:28] * theorbtw1 wonders what @hoogle does.

[05:33] <geoffb> Well, clearly, it hoogles things.  I mean, c'mon . . . .

[05:38] <lightstep> it looks for standard functions with the given signature

[05:40] <theorbtw1> Oh, nifty.

[05:42] <geoffb> autrijus, was this: http://autrijus.org/svk-overview.png created using a drawing GUI or a drawing language?  If the latter, which one, and can we see the source?

[05:43] <obra> It was created with Visio

[05:43] <geoffb> bah

[05:44] <geoffb> I was hoping for a very evolved version of pic

[05:45] <geoffb> "Real men write Postscript by hand."  :-)

[05:45] <dudley> http://www-users.cs.york.ac.uk/~ndm/hoogle/

[05:45] <dudley> that's pretty damn cool.

[05:46] <dudley> http://www.hoogle.net/ is probably not what you want, though :-)

[05:47] <dudley> Or maybe it is, I don't really want to know ;-)

[05:48] <dudley> My last few googles from things I've learned here have been pretty NSFW. First sexy typing, now hoogle...

[05:48] <geoffb> NSFW?

[05:49] <dudley> Not Safe For Work

[05:49] <geoffb> ah

[05:49] * geoffb works from a home office, so very little is NSFW.  :-)

[05:50] <geoffb> OK, getting tired, so going to bust off now.

[05:50] <geoffb> G'night all.

[05:50] <geoffb> (That would be autrijus' cue to start up several long interesting conversations so that I come back to a thousand line backlog . . . .)

[06:03] *** theorbtw1 is now known as theorbtwo

[06:03] <theorbtwo> Southen, what could 5`m be that would avoid having a class or function named m, and have m not be the match operator?

[06:03] <theorbtwo> Only a macro, right?

[09:29] <masak> ?eval (any(1..10) == any(10..19))

[09:29] <evalbot6> bool::false 

[09:29] <masak> eh?

[09:30] <gaal> ?eval (any(1..10) ~~ any(10..19)

[09:30] <evalbot6> Error:  unexpected end of input expecting adverbial block, term postfix, operator, ">>=:=<<", ">>!=<<", ">>==<<", ">><=<<", ">>>=<<", ">>~~<<", ">>!~<<", ">>eq<<", ">>ne<<", ">>lt<<", ">>le<<", ">>gt<<", ">>ge<<", ">><<<", ">>><<", "\187=:=\171", "\187!=\171", "\187==\171", "\187<=\171", "\187>=\171", "\187~~\171", "\187!~\171", "\187eq\171", "\187ne\171", "\187lt\171", "\187le\171", "\187gt\171", "\187ge\171", "\187<\171", "\187>\171", "=:=", "!=", "=="

[09:30] <gaal> ?eval (any(1..10) ~~ any(10..19))

[09:30] <evalbot6> bool::false 

[09:31] <gaal> ?eval ?(any(1..3) ~~ any(3..5))

[09:31] <evalbot6> bool::true 

[09:31] <gaal> ?eval ?(any(1..10) ~~ any(10..19))

[09:31] <evalbot6> bool::true 

[09:31] <gaal> ?eval (any(1..10) ~~ any(10..19))

[09:31] <evalbot6> bool::false 

[09:32] <gaal> oops :)

[09:32] <gaal> masak, looks like a pugsbug to me...

[09:32] <gaal> add a t?

[09:32] <gaal> (brb)

[09:34] <masak> sure, just a sec

[09:37] <masak> ok, slight problem :)

[09:38] <masak> i wrote is(any(1..10), any(10..19), 'Should not return bool::false because 10 == 10');

[09:38] <masak> and it runs 100 tests :)

[09:38] <masak> how to get around that?

[09:38] <masak> ah, i think i know

[09:38] <gaal> ok(any == any), i think

[09:39] <masak> i moved the comparison out into an assignment

[09:39] <masak> but your idea is better, hold on

[09:40] <gaal> that also works :)

[09:41] <masak> strange

[09:41] <masak> my test passes

[09:41] <gaal> probably because of this:

[09:41] <gaal> ?eval ?(any(1..10) ~~ any(10..19))

[09:41] <evalbot6> bool::true 

[09:41] <gaal> it looks context dependent.

[09:42] <gaal> (note the ?)

[09:42] <masak> darn

[09:42] <masak> so how do i cause the faulting context?

[09:42] <masak> (without making 100 tests)

[09:43] <gaal> heh, well, you can choose a smaller range :-P

[09:43] <gaal> but let's see.

[09:43] <masak> :)

[09:44] <gaal> how did you encounter this?

[09:44] <masak> ?eval (any(1..10) ~~ any(10..19)) ~~bool::true

[09:44] <evalbot6> bool::false 

[09:44] <masak> as usual, just playing around with pugs

[09:44] <gaal> because on the command line things like "say if ..." don't reproduce it.

[09:44] <masak> every time i touch pugs i encounter a bug

[09:45] <gaal> once again, because boolean context

[09:45] <gaal> sure, but *where* did you find it? just here on evalbot?

[09:45] <masak> no, on my command line

[09:46] <masak> playing around

[09:46] <masak> i just wanted to see if any(1..10) == any(10..19)

[09:46] <masak> which i still believe it is

[09:47] <masak> ?eval (any(1..10) == any(10..19)) ~~ bool::true

[09:47] <evalbot6> bool::false 

[09:48] <gaal> ?eval (any(1..3) == any(3..5)).perl

[09:48] <evalbot6> '((bool::false) | (bool::false | bool::true))' 

[09:48] <gaal> that reduces to truth.

[09:48] <masak> ?eval (any(1..3) == any(3..5)).perl ~~ bool:true

[09:48] <evalbot6> Error: No compatible subroutine found: "&bool" 

[09:48] <masak> oops

[09:49] <masak> ?eval (any(1..3) == any(3..5)).perl ~~ bool::true

[09:49] <evalbot6> bool::false 

[09:49] <masak> hey!

[09:49] <gaal> nah, that's obvisouly not the right approach --  .perl gives a string

[09:49] <masak> yes, but ~~

[09:49] <gaal> ?eval "str" ~~ bool::true

[09:49] <masak> i thought that was the ultimate hand-waving operator

[09:49] <evalbot6> bool::false 

[09:49] <masak> ?eval "bool::true" ~~ bool::true

[09:50] <evalbot6> bool::false 

[09:50] <masak> ah

[09:50] <masak> ok

[09:51] <masak> is there a "reduce to truth or falsity" sub or something

[09:51] <masak> ?

[09:51] <gaal> "?" :)

[09:52] <masak> ah

[09:52] <masak> it took me a while to realise that the question mark was in fact the answer :P

[09:53] <gaal> hofstadter would be pleased

[09:53] <masak> indeed

[09:53] <lightstep> gaal, nothingmuch invited me to your house, or something like that

[09:54] <masak> ?eval (any(1..10) == any(10..19))

[09:54] <evalbot6> bool::false 

[09:54] <gaal> you are indeed invited :) let me write up the, uh, announcement!

[09:54] <masak> thing is, i don't get this on the prompt

[09:54] <masak> i get any(VJunc any(VBool False),VJunc any(VBool False,VBool True))

[09:54] <masak> which is just ast for ((bool::false) | (bool::false | bool::true))

[09:55] <gaal> yup

[09:55] <gaal> i don't know, this is weird.

[09:55] <masak> so the faulty context is evalbot6

[09:55] <lightstep> i get the same result here

[09:55] <masak> evalbot6, get a grip!

[09:56] <masak> i often wondered, who compiles evalbot6, and how often?

[09:57] <masak> how do i chech if evalbot6 is compiled from the latest rev?

[09:57] <gaal> iblech, and manually i hope.

[09:57] <lightstep> ?eval ? (any(1..10) == any(10..19))

[09:57] <evalbot6> bool::true 

[09:57] <gaal> ?eval $?PUGS_VERSION

[09:58] <evalbot6> \'Perl6 User\'s Golfing System, version 6.2.7, June 13, 2005 (r5334)' 

[09:58] <gaal> svnbot appears to be down btw

[09:58] <lightstep> it's relatively updated

[09:58] <masak> i still haven't committed a test, because i can't reproduce it outside of evalbot6

[09:59] <masak> lightstep: it's completely updated

[09:59] <masak> june 13 is the release date of 6.2.7

[10:00] <gaal> look at the r number.

[10:00] <lightstep> i have r5304

[10:01] <gaal> HEAD is 5334 :-)

[10:01] <gaal> question is which evalbot is actually running.

[10:01] <lightstep> ok. my connection is weak

[10:02] <masak> well, if evalbot6 says it's from r5334 i have no choice but to trust it

[10:02] <masak> this is weird

[10:02] <masak> it's 2005

[10:02] <masak> and i'm actually trying to reason with a program

[10:02] <masak> wow

[10:04] <masak> ?eval my $a = (any(1..2) == any(2..3)); ?($a.perl)

[10:04] <evalbot6> bool::true 

[10:04] <masak> that's something

[10:04] <gaal> masak: see /home/roo/src/pugs/examples/network/evalbot/README.pod

[10:04] <masak> oki

[10:04] <gaal> er, only without my local path part :-)

[10:04] <masak> sure :)

[10:04] <lightstep> ?eval my $a = (any(1..2) == any(2..3)); ?$a

[10:04] <gaal> evalbot spawns a p5 helper

[10:04] <evalbot6> bool::true 

[10:04] <gaal> which spawns pugs

[10:05] <lightstep> you don't need .perl

[10:05] <gaal> so if there's a bug in evalbot itself that's been fixed, even if it runs a new pugs then you may not see the fix until the bot is restarted.

[10:05] <masak> lightstep: thx

[10:06] <masak> gaal: so i'm chasing a bug that's already fixed?

[10:06] <gaal> no idea

[10:06] <gaal>  :-)

[10:06] <masak> there should be a way to reastart evalbot6 from here :)

[10:06] <gaal> ?eval my $a = (any(1..2) == any(2..3)); $a

[10:06] <evalbot6> \((bool::false) | (bool::false | bool::true)) 

[10:07] <masak> when is such a value ever useful?

[10:07] <gaal> oh, ? forces the reducion. of course.

[10:07] <masak> i want it to collapse

[10:07] <masak> on its own

[10:07] <masak> but maybe that is Wrong, i dunno

[10:08] <lightstep> doesn't it collapse in boolean contexts? i think that keeping the result for a while is good

[10:08] <masak> gaal: who runs evalbot6?

[10:08] <gaal> iblech

[10:08] <masak> lightstep: but what can one use that result for? all it means is really cool::true

[10:08] <gaal> he's away for a few days i think.

[10:08] <masak> oh no

[10:09] <masak> :(

[10:09] <gaal> cool::true is neat.

[10:09] <masak> the suspense is killing me!

[10:09] <masak> cool:true is my own coolnary logic system :)

[10:09] <gaal> lol

[10:09] <lightstep> map (uncurry (==)) [(1,2), (1,3), (2,2)]   is   [False, False, True]

[10:10] <gaal> nouveau cuisine is a culinary logic system.

[10:10] <lightstep> that's how i think about comparing sets

[10:10] <masak> bool::mu

[10:11] <gaal> bull::moose

[10:11] <masak> the possibilities are endless

[10:11] <gaal> hmm, why uncurry and not reduce?

[10:12] <masak> ?eval sub f { return not f } f()

[10:12] <lightstep> what's reduce?

[10:12] <evalbot6> (no output)

[10:12] <masak> should return bool::mu :)

[10:12] <gaal> because arity is fixed?

[10:12] <lightstep> uncurry (==) is a function that compares elements of a pair

[10:13] <gaal> reduce f list can be thought of as l_1 `f` l_2 `f` l_3 ...

[10:13] <lightstep> oh, it's foldl' in haskell

[10:13] <masak> yes

[10:14] <gaal> lightstep: there's a metaoperator for this in perl 6.

[10:14] <gaal> $sum = [+] @values

[10:14] <svnbot6> r5335, autrijus++ | * handle class literals as the invocant to .isa().

[10:14] <gaal> hey, svnbot skipped some commits.

[10:15] <gaal> lightstep: there's a wonderful post by damian with ten examples of how useful this is.

[10:15] <gaal> autrijus, ping

[10:15] <lightstep> the Haskell Standard Prelude contains "sum = foldl (+) 0", we recognize it's extremely useful

[10:15] <lightstep> GvD doesn't like these operators, though

[10:16] <gaal> GvD?

[10:16] <lightstep> s/D/R/

[10:16] <gaal> GvR?

[10:16] <lightstep> guido var rossum, the python guy

[10:16] <gaal> ahh yes.

[10:17] <lightstep> anyway, the uncurry in my example was a glue operator, to maake things typecheck

[10:18] <gaal> http://www.mail-archive.com/perl6-all@perl.org/msg49653.html

[10:18] <gaal> er, one above it in the thread actually

[10:18] <gaal> http://www.mail-archive.com/perl6-all@perl.org/msg49651.html

[10:20] <gaal> 3, 8, and 9 are beautiful

[10:21] <masak> yes

[10:21] * masak likes conway's style of writing

[10:22] <lightstep> i don't fully understand 3, but that's a syntax problem

[10:22] <gaal> oh, they made hash deref a method.

[10:23] <masak> perl 6 has a way of making one dizzy... "they made hash deref a method"

[10:24] <masak> that's like saying "they made reduce into a metaoperator"

[10:24] <gaal> $apartment_no = $employees<4262><contact_info><home_address><apt_no>

[10:25] <lightstep> can you use functions in the operator slot of a metaoperator?

[10:26] <masak> good question

[10:26] <gaal> sub get_apt_no_by_emp_id ($id) { [.{}] $employees, <<$id contact_info home_address apt_no>> }

[10:26] <gaal> an operator is just an infix function

[10:26] <gaal> (of course that example is completely contrived :-)

[10:28] <gaal> hmm, but you're asking about the other direction

[10:28] <gaal> autrijus said something about perl 6 not having `...`

[10:29] <lightstep> oh

[10:29] <gaal> (if i was understanding correctly)

[10:30] <masak> gaal: perl 6 not having `...`?

[10:30] <masak> what does that mean?

[10:30] <lightstep> `...` turns a function into an infix op in haskell

[10:30] <masak> aha

[10:30] <gaal> masak: in Haskell, you can take any function and use `...` syntactic sugar to apply it in infix form

[10:30] <gaal> meh, too slow :)

[10:30] <masak> so the perl 6 `...` is another `...`

[10:31] <masak> same syntax, different semantics

[10:31] <masak> or something

[10:31] <gaal> lightstep's answer is actually subtly better than mine, because it doesn't imply the function needs to be immediately applied

[10:31] <lightstep> what's `...` in perl6?

[10:32] <masak> a way to say "not important right now" inside function bodies etc

[10:32] <lightstep> actually, it has to be applied (or be used in a section)

[10:33] <masak> or rather, "not declared until later"

[10:33] <gaal> hold on, possible confusion. there's an ellipses in p6: ...

[10:33] <masak> gaal: exactly

[10:33] <gaal> and the's infix in Haskell: ``

[10:33] <masak> aha!

[10:33] <gaal> lightstep: masak was talking about the dots

[10:33] <gaal> masak: lightstep was talking about the quotes.

[10:33] <gaal> :-)

[10:33] <lightstep> yes

[10:33] <masak> misunderstanding of the day

[10:33] <lightstep> i got it now

[10:34] <masak> hofstadter would be pleased :)

[10:34] <gaal> i feel like a marriage counsellor

[10:34] <masak> shut up :)

[10:34] <lightstep> yes, he would. perl6 is really close to what he portrays

[10:34] <gaal> i will, after you write that check :-P

[10:35] * masak writes check

[10:35] <masak> now shut up :P

[10:35] <gaal> :)

[10:35] <lightstep> i don't get perl syntax: "aaa 4, 6" works, but "aaa (4, 6)" doesn't

[10:36] <gaal> huh? f'course it does.

[10:36] <lightstep> sub aaa ($x, $y) {$x + $y}

[10:36] <lightstep> aaa (4, 6)

[10:36] <lightstep> *** Extra space found after &aaa (...)

[10:36] <gaal> aaah

[10:37] <gaal> in perl 6, some whitespace was banned

[10:37] <gaal> ?eval sub aaa ($x, $y) {$x + $y} aaa(4, 6)

[10:37] <evalbot6> 10 

[10:37] <gaal> ?eval sub aaa ($x, $y) {$x + $y} aaa (4, 6)

[10:37] <evalbot6> Error: Extra space found after &aaa (...) -- did you mean &aaa(...) instead? 

[10:38] <lightstep> also, pugs answers by the last response when i define a sub (instead of replying with undef)

[10:38] <gaal> i actually forgot this rule applied to func applications.

[10:38] <masak> aaa .(4, 6) should work fine

[10:38] <gaal> true.

[10:39] <gaal> lightstep, give an example?

[10:39] <gaal> because above you see a successful definition with a space

[10:39] <masak> ?eval sub aaa ($x, $y) {$x + $y} aaa .(4, 6)

[10:39] <evalbot6> Error: Extra space found after &aaa (...) -- did you mean &aaa(...) instead? 

[10:39] <masak> hunh?

[10:39] <lightstep> perlbot paste

[10:39] <perlbot> Paste your code and #perl will be able to view it: http://sial.org/pbot/perl http://dragon.cbi.tamucc.edu:8080 http://erxz.com/pb

[10:40] <masak> gaal: the above should work, right?

[10:40] <lightstep> http://erxz.com/pb/783

[10:40] <gaal> i think so, but no idea about implementation status in pugs.

[10:40] <masak> ?eval sub aaa($x, $y) {$x + $y} aaa .(4, 6)

[10:40] <evalbot6> Error: Extra space found after &aaa (...) -- did you mean &aaa(...) instead? 

[10:40] <masak> ok

[10:42] <gaal> aah, l, i misunderstood what you were saying this time. interesting bug.

[10:42] <gaal> hard to write a test for :-)

[10:42] <gaal> well, w/o piping and stuff at least.

[10:42] <lightstep> yes, quite

[10:42] <masak> gaal: what bug are we talking about?

[10:42] <gaal> masak: http://erxz.com/pb/783

[10:43] <masak> oki

[10:43] <lightstep> actually, it depends how the shell works. maybe 'sub ...' evals to the last result in some context?

[10:43] * masak sees bug

[10:43] <masak> woah

[10:43] <lightstep> i might be a misfeature, not a bug

[10:43] <masak> lightstep++ # for finding it

[10:44] <masak> lightstep: what's the difference?

[10:44] <masak> google define finds nothing on "misfeature"

[10:44] <lightstep> you don't want to fix a misfeature

[10:44] <masak> you don't?

[10:44] <masak> why should it return 2?

[10:44] <gaal> l: we can runInteractiveCommand from perl so it is in fact testable, though awkwardly.

[10:45] <lightstep> if @svn decide that it's good, it'll be a feature. not intended, hence mis-

[10:45] <masak> "@svn"?

[10:45] <lightstep> the pugs commiters

[10:45] <masak> (there's no "misfeature" wikipedia article)

[10:46] <masak> lightstep: ah

[10:46] <masak> "@svk", too, maybe

[10:46] <masak> :)

[10:46] <masak> and "@darcs"

[10:48] <masak> lightstep: seems unlikely though that the pugs committers would find this particular feature to be good

[10:48] <masak> to me it just seems strange

[10:53] <masak> lunch

[10:53] <masak> &

[11:01] <rafl> How do I push hashes into arrays?

[11:01] <gaal> doesn't the p5 method work for you? push a reference.

[11:02] <gaal> ?eval my @arr = <a 1>; my %h = <one 1>; @arr.push(\%h); @arr.perl

[11:02] <evalbot6> '[\'a\', \'1\', ((\'one\' => \'1\'))]' 

[11:02] <gaal> hmm, that's not right.

[11:03] <gaal> %h got flattened.

[11:03] <rafl> Well, @array.push({Foo => 'bar'}) gives me an other data structure than %hash = (Foo => 'bar'); @a.push(%hash);

[11:04] <gaal> ?eval my @arr = <a 1>; my %h = <one 1 two 2>; @arr.push(\%h); @arr.perl

[11:04] <evalbot6> '[\'a\', \'1\', ((\'one\' => \'1\'), (\'two\' => \'2\'))]' 

[11:05] <gaal> that's a list of pairs instead of a hash :-(

[11:05] <gaal> ?eval my %h = <one 1 two 2>; %h.perl

[11:05] <evalbot6> '{(\'one\' => \'1\'), (\'two\' => \'2\')}' 

[11:05] <gaal> my %h = <one 1 two 2>; %h

[11:06] <gaal> ?eval my %h = <one 1 two 2>; %h

[11:06] <evalbot6> {('one' => '1'), ('two' => '2')} 

[11:06] <rafl> ?eval my @a = (); my %h = <a b c d>; @a.push(%h); @a.perl

[11:06] <evalbot6> '[(\'a\', \'b\'), (\'c\', \'d\')]' 

[11:06] <rafl> Hm..

[11:07] <gaal> ?eval my %h = (one => 1, two => 2);  %h

[11:07] <evalbot6> {('one' => 1), ('two' => 2)} 

[11:07] <rafl> ?eval my @a = (); my %h = <a b c d>; @a[0] = %h; @a.perl

[11:07] <evalbot6> '[{(\'a\' => \'b\'), (\'c\' => \'d\')}]' 

[11:07] <gaal> that's correct

[11:07] <rafl> That's what @a.push(%h) should produce, right?

[11:08] <gaal> i believe it is.

[11:08] <gaal> well

[11:08] <rafl> So why doesn't it work then?

[11:08] <gaal> that's what @a.push(\%h) should produce

[11:08] <gaal> i'm not actually sure about %h

[11:08] <rafl> ?eval my @a = (); my %h = <a b c d>; @a.push(\%h); @a.perl

[11:08] <evalbot6> '[((\'a\' => \'b\'), (\'c\' => \'d\'))]' 

[11:15] <rafl> So, what's the right way to do it with push? I'd like that more than @a[-1] = %h;

[11:16] <gaal> dunno. looks like there's a bug here, but i'm not sure where it is.

[11:27] <rafl> Why do I get Can't modify constant item: VUndef? The line is "@:arr = ();". It's declared with "has @:arr;"

[11:28] <gaal> are you in a method?

[11:28] <gaal> ?eval class F; has @:a; method x { @:a = () } F.new.x; say "alive"

[11:28] <evalbot6> Error: No compatible subroutine found: "&say" 

[11:28] <gaal> class F; has @:a; method x { @:a = () } F.new.x; "alive"

[11:29] <gaal> ?eval class F; has @:a; method x { @:a = () } F.new.x; "alive"

[11:29] <evalbot6> 'alive' 

[11:29] <rafl> Yes: method load_parsers (::?CLASS ::class: Str ?$dir, ?$file) {

[11:32] <rafl> It doesn't even work with has @:a is rw;

[11:32] <gaal> nopaste more context? that does workforme...

[11:35] <rafl> http://nopaste.debianforum.de/549

[11:36] <lightstep> how is `make test' called?

[11:36] <gaal> lightstep, what do you mean? just 'make test' from the command line

[11:36] <rafl> Well, no. In my script I call it as ::Foo.bar(); But it resuls in the same error.

[11:36] <gaal> or if you want the fancy graph output, make smoke

[11:37] <gaal> hmm, 'has' is for memebers

[11:38] <gaal> looks like it's being invoked as a class method in your case

[11:38] <gaal> so there is no @:a

[11:38] <rafl> Yes, it's ought to be.

[11:38] <rafl> Oh. How can I declare class variables?

[11:38] <gaal> you need 'my @a', and pugs needs a better error message. :-)

[11:39] <gaal> i don't know how to autogenerate accessors for class variables like has does for members.

[11:50] <rafl> Hm. If my class is named Foo everything works now. If I call it Foo::Bar I can't call methods on it: ::Foo::Bar.bar() results in No compatible subroutine found: "&bar"

[11:53] <gaal> autrijus was working on some qualification fix, but there were problems with it so it was reverted. i don't know if it was related to things like this.

[11:55] <rafl> Hm. Writing perl6 code is really pain at the moment.

[11:56] <gaal> it's more like making love with an injured knee. pleasurable so long as you make no wrong moves.

[12:01] *** Aankh|Clone is now known as Aankhen``

[12:06] <wolverian> you mean no right moves :)

[12:11] <Aankhen``> An array or hash in scalar context is supposed to evaluate to a reference to itself, so `push(@a, %h)` in Perl 6 ought to be equivalent to Perl 5's `push(@a, \%h)`...

[12:12] <Aankhen``> ?eval [~] ('a', 'b', 'c', 'd')

[12:12] <evalbot6> 'abcd' 

[12:13] <theorbtwo> At least in p5, the second argument of push isn't scalar context.

[12:14] <theorbtwo> push (@push_into, *@to_push)

[12:14] <Aankhen``> I am talking about direct equivalence, not equivalent functions.

[12:15] <Aankhen``> Perhaps it's better illustrated by this: `foo(@bar)` in Perl 6 is equal to `foo(\@bar)` in Perl 5.

[12:15] <Aankhen``> And the same applies for %bar.

[12:15] <Aankhen``> s/applies for/applies to/ # I need sleep

[12:16] <Aankhen``> ?eval sub foo () { return [~] ("a", "b", "c", "d") }; foo()

[12:16] <evalbot6> 'abcd' 

[12:27] <gaal> oh, hi Aankhen``, did you see seek?

[12:27] <svnbot6> r5336, Aankhen++ | * HTTP::Message: excuse to use reduce metaoperators.

[12:32] <theorbtwo> Nice commit message, Aankhen``.

[12:33] <gaal> http://perl.org.il/pipermail/perl/2005-July/007258.html # Tel-Aviv Pugs Hackathon invite

[12:35] <theorbtwo> 404.

[12:35] <theorbtwo> Nevermind.

[12:35] <gaal> something funny happened in the formatting there.

[12:38] * theorbtwo wonders why he can draw &, but not {...}, on paper.

[12:39] <castaway_> you can you silly nelly

[12:40] <theorbtwo> (I can even do a passable £.)

[12:40] <theorbtwo> If you do, or don't, have 802.11, you might want to explicitly mention it.

[12:41] <gaal> half of what i explicitly mentioned was an ethernet patch *cable* :-)

[12:43] <theorbtwo> True enough.

[12:44] <gaal> but i'll make a point of mentioning it again when people write to get contact info

[12:44] <theorbtwo> I know nothingmuch lives on his 802.11.

[12:45] <gaal> i'm sure his fancy new laptop features an rj-45 connector. :)

[12:45] <theorbtwo> So am I.

[12:45] * theorbtwo shrugses.

[12:45] <theorbtwo> Oh, I forgot he had to get a new one.

[12:45] <gaal> if someone brings a wifi router, cool

[12:54] <gaal> greetings nothingmuch

[12:55] <nothingmuch> hola

[13:28] <Limbic_Region> seen autrijus

[13:28] <jabbot> Limbic_Region: autrijus was seen 8 hours 29 minutes 15 seconds ago

[13:32] <nothingmuch_> Limbic_Region: the node we talked about - it's been done

[13:32] <nothingmuch_> 473610

[13:32] *** nothingmuch_ is now known as nothingmuch

[13:40] <Limbic_Region> ahh, will have a look - thanks

[13:40] <Limbic_Region> was still getting caught up with morning email

[13:41] <clkao> t

[13:52] <svnbot6> r5337, gaal++ | correct sig for Pugs::Internals::hIsOpen

[14:43] <gaal> random statistic of the day: autrijus has made 2000 commits to pugs.

[14:44] <lightstep> exactly?

[14:44] <gaal> yup.

[14:45] <Nattfodd> that's not random at all

[14:46] <lightstep> not stochastic, random

[14:46] <lightstep> as in "random arrests by the government"

[14:48] <gaal> you may also be interested to know that to date, iblech has made sixty-three trillion commits.

[14:48] <svnbot6> r5338, autrijus++ | * Repair user-defined operators; it was broken due to the

[14:48] <svnbot6> r5338, autrijus++ |   namespace fix in r5168.  As a side effect, infix operators

[14:48] <svnbot6> r5338, autrijus++ |   defined in other modules no longer creep into main.

[14:48] <gaal> ...see, my statistics aren't worth much.

[14:49] <gaal> autrijus, there-p?

[14:50] <autrijus> yes

[14:50] <gaal> hey. :)

[14:50] <autrijus> hey. :)

[14:50] <Limbic_Region> autrijus - did you see that I modified the spaceship operator tests?

[14:50] <gaal> so is the pugscc problem harder than was hoped?

[14:50] <autrijus> in Set.pm there is something like

[14:50] <Limbic_Region> s/operator/parsing/

[14:51] <Limbic_Region> there is still a bug

[14:51] <Limbic_Region> but when you changed the tests to 0, the tests passed

[14:51] <autrijus> method prefix:<___> { ... }

[14:51] <autrijus> (just an example)

[14:51] <Limbic_Region> or rather - from -1 to 0

[14:51] <autrijus> I'm wondering the visibility of that operator

[14:51] <autrijus> should it affect everything that uses Set (a kind of "silent export")?

[14:51] <autrijus> or something more insidious?

[14:52] <gaal> also, i was about to ask if you could help me make sense of sexy types but it appears that i'm being abducted by friends to the beach, so that will have to wait :-)

[14:52] <autrijus> gaal: no, it wasn't harder than hoped, it's just I never got the sanity to look at it

[14:52] <gaal> yes, sanity is scarce around these parts.

[14:52] <autrijus> gaal: my sanity window is still in short supply :-/

[14:52] <autrijus> gaal: I think I can explain sexy types in 10 mins if you have it

[14:52] <autrijus> if not that'd need to wait :)

[14:53] <gaal> nominally i have six, but we're lucky: my friends are chrinically late.

[14:53] <autrijus> heh.

[14:53] <autrijus> okay, let's start

[14:53] <gaal> i have the sexy types paper in front of me.

[14:53] <autrijus> oh cool.

[14:53] <gaal> not the pyton-jones one, the summary one.

[14:53] <gaal> by Chung-chieh Shan

[14:54] <autrijus> right, by ccshan

[14:54] <autrijus> so let's look a simple one

[14:54] <gaal> Peyton. Dangerous typo.

[14:54] <gaal> okay

[14:54] <autrijus> Pugs.AST.Internals doPair

[14:54] <autrijus> stare at its type

[14:54] <autrijus> doPair :: Val -> (forall a. PairClass a => a -> b) -> Eval b

[14:55] <autrijus> do you already grok why it can't be written as

[14:55] <autrijus> doPair :: PairClass a => Val -> (a -> b) -> Eval b

[14:55] <autrijus> ?

[14:55] <gaal> no, that's exactly what stumped me

[14:56] <gaal> i've vaglue seen something about the forall being more generic, but i can't see why

[14:56] <autrijus> ok. the second way is like

[14:56] <autrijus> doPair :: forall a. PairClass a => Val -> (a -> b) -> Eval b

[14:56] <autrijus> s/like/actually/

[14:57] <gaal> okay, so forall lets you quantify more tightly

[14:57] <gaal> but what difference does it make practically?

[14:57] <gaal> s/quanitify/specify the predicate, or limit the class/

[14:58] <lightstep> that would allow you to pass as the second parameter a function of type (VPair -> Foo)

[14:58] <lightstep> whereas in the first version, the second parameter is always a function that can accept anything in PairClass

[14:58] <autrijus> right.

[14:58] <autrijus> 1) doPair :: Val -> (forall a. PairClass a => a -> b) -> Eval b

[14:59] <autrijus> 2) doPair :: forall a. PairClass a => Val -> (a -> b) -> Eval b

[14:59] <autrijus> in 2, the function must handle every PairClass types

[14:59] <autrijus> that's what the "forall a." in the outermost scope means

[14:59] <autrijus> in 1, as long as your function can handle any one PairClass type, you're fine

[15:00] <autrijus> i.e. as long as there exists _one_ PairClass type it can handle

[15:00] <autrijus> iirc that's why it's called existential quantification

[15:00] <gaal> hmmm

[15:01] <autrijus> let's look at Emit.PIR vop1coerce

[15:01] <gaal> why won't (VPair -> Foo) work?

[15:01] <autrijus> oh, because sometimes you want to pass in (IPair -> Foo)

[15:01] <autrijus> or some other thing in PairClass

[15:01] <gaal> to take lightstep's example

[15:01] <gaal> no, i mean

[15:01] <gaal> why does the signature exclude that from working?

[15:02] <gaal> #2

[15:02] <autrijus> you mean in 2.?

[15:02] <gaal> yes

[15:02] <autrijus> let's see

[15:02] <autrijus> Prelude> :t negate

[15:02] <autrijus> negate :: forall a. (Num a) => a -> a

[15:02] <autrijus> hm, bad example

[15:02] <gaal> hoogle :)

[15:03] <autrijus> Prelude> :t subtract

[15:03] <autrijus> subtract :: forall a. (Num a) => a -> a -> a

[15:03] <autrijus> much better.

[15:04] <autrijus> now consider

[15:04] <gaal> this looks like it accepts any two (a :: Num)s, and returns... an (a::Num)

[15:04] <gaal> (duh)

[15:04] <autrijus> foo :: (forall a. Num a) -> (forall a. Num a) -> (forall a. Num a)

[15:04] <gaal> what's with the forall then?

[15:04] <autrijus> in the subtract signature, all three a must agree

[15:04] <gaal> oh, now they can be *different* Nums?

[15:04] <autrijus> in the foo signature, none of them have to agree

[15:04] <autrijus> yup

[15:04] <gaal> right.

[15:05] <autrijus> so it can be instantiated by Int->Double->Float

[15:05] <autrijus> or something like that

[15:05] <gaal> okay: but in the case of our original #1 and #2, what is there to agree? there';s only one arg quantified.

[15:05] <autrijus> consider the type

[15:06] <autrijus> foo :: forall a. Num a => (a -> Int) -> Int

[15:06] <gaal> ok

[15:06] <autrijus> and you call it with

[15:06] <autrijus> bar :: Int -> Int

[15:06] <autrijus> foo bar

[15:06] <autrijus> it ought to fail

[15:06] <autrijus> because foo should work on all Num types

[15:06] <autrijus> not only Int

[15:06] <autrijus> but bar only handles Int

[15:07] <autrijus> so it can't unity

[15:07] <gaal> aahh

[15:07] <autrijus> unify

[15:07] <lightstep> actually, you mixed it. foo bar (like this) would work

[15:07] <autrijus> oh. hm?

[15:07] <lightstep> if the forall was /inside/, it wouldn't work

[15:07] <autrijus> oh. right.

[15:07] * autrijus professes sleepiness

[15:07] <autrijus> lightstep: how about you carry on the explanation :)

[15:07] <lightstep> ok

[15:08] <lightstep> if you instantiate foo with a=Int, you can call foo bar

[15:08] <gaal> okay.

[15:08] <lightstep> quux :: (forall a. Num a => a) -> Int

[15:08] <lightstep> you can't instantiate quux with a=something, since the forall isn't on the top level

[15:09] <gaal> yes, okay.

[15:09] <gaal> hmm.

[15:09] <autrijus> the error would be

[15:09] <autrijus>     Couldn't match the rigid variable `a' against `Int'

[15:09] <autrijus>       `a' is bound by the polymorphic type `forall a. (Num a) => a -> Int'

[15:09] <autrijus>                         at <interactive>:1:0-7

[15:10] <autrijus> lightstep: so I think you mixed it from the beginning too

[15:10] <gaal> so when is such a signature useful? only when you give it a higer-order function? (*waves hands*)

[15:10] <lightstep> autrijus, i don't know where you were getting at

[15:10] <autrijus> #1 can't accept (VPair -> Foo)

[15:10] <gaal> or is that just an example of a useless function?

[15:10] <autrijus> whilst #2 could

[15:10] <autrijus> lightstep: or am I still too confused?

[15:11] <lightstep> that's correct

[15:11] <autrijus> good, now we agree, let's move to the next step

[15:11] <gaal> i'm in vop1coerce

[15:12] <autrijus> ok

[15:12] <autrijus> note that reg0 is used in two places 

[15:12] <autrijus> once as LValue and once as Expression

[15:12] <gaal> vop1coerce :: SubName   -> (forall a. RegClass a => a)   -> Decl

[15:12] <autrijus> (reg0 is the one with the polymorphic type)

[15:13] <gaal> yes

[15:13] <autrijus> in vop2x

[15:13] <autrijus> (the one after it)

[15:14] <autrijus> regr, reg0, reg1 are all used independently

[15:14] <gaal> but twice in the body. hmm, this is a list - i read somewhere that you can get lists with seemingly differnt typed things usind these types

[15:14] <gaal> autrijus, independently == may have different actual types?

[15:15] <autrijus> right.

[15:15] <autrijus> as they often do

[15:15] <gaal> and still make it into a list. okay.

[15:15] <autrijus> so let's go back to your orig question

[15:15] <autrijus> you'd like to unify two functions

[15:15] <autrijus> which ones were they again?

[15:16] <autrijus> somewhere in Prim?

[15:16] <gaal> Prim.hs 573

[15:16] <autrijus> op1IOBool

[15:16] <gaal> the comment a few lines above that is your suggested code

[15:16] <gaal> my goals:

[15:16] <gaal> make the function (first argument) more parametric

[15:16] <autrijus> right.

[15:16] <gaal> not hardcode VBool

[15:16] <autrijus> (forall a. Value a => Handle -> IO a)

[15:17] <autrijus> and replace VBool with castV

[15:17] <gaal> oh, that works because castV hides the magic

[15:17] <autrijus> and in this case, since there's only one arg

[15:17] <gaal> what could i do if i didn't have castV and wanted to pass VBool as an arg?

[15:18] <gaal> what's :t VBool again?

[15:18] <autrijus> Bool -> Val

[15:18] <gaal> oh, of course.

[15:18] <autrijus> so something like

[15:18] <gaal> (wanring: friends with beer and seashore intents approaching.)

[15:18] <autrijus> op1IOCast :: (Handle -> IO a) -> (a -> Val) -> Val -> Eval Val

[15:18] <autrijus> would do nicely

[15:18] <autrijus> in that case then, there's no need to existentials

[15:18] <autrijus> as the two "a" always unify

[15:18] <autrijus> (as they should)

[15:19] <gaal> right.

[15:19] <autrijus> (since you are using the second to cast the first)

[15:19] <gaal> yes, i see that

[15:19] <gaal> cool.

[15:19] <gaal> now, just a syntax querstion really

[15:19] <autrijus> but if you are using castV on two different arguments

[15:19] <gaal> how do i unify the two lines?

[15:19] <gaal> oh, with a lambda of course

[15:19] <autrijus> which two lines?

[15:19] <gaal> it's just a do-expression thing.

[15:20] <gaal> of the function body

[15:20] <gaal> i didn't like having to use <- fromval

[15:20] <gaal> wanted to pointfree this

[15:20] <autrijus> well if you want to be pointless

[15:20] <autrijus>     fmap castV . liftIO . fun =<< fromVal v

[15:20] <autrijus> you can even eliminate the v

[15:20] <autrijus> or even the fun

[15:20] <gaal> and val itself is 

[15:20] <gaal> yeah

[15:21] <autrijus> but that is left as an exercise to lambdabot

[15:21] <gaal> "eta reducable", right? :-)

[15:21] <gaal> reducible even.

[15:21] <gaal> cool.

[15:21] <gaal> beer+beach!

[15:21] <autrijus> enjoy :)

[15:22] <gaal> thanks! :-)

[15:22] <autrijus> oh well. turns out it does not have much to do with sexy types :)

[15:22] <autrijus> (I thought you were going to pass something that reacts to all Value a types)

[15:22] * gaal waves &      (honey, i'm a little tired for sexy types.. not tonight, okay?)

[15:22] <autrijus> lol

[15:22] <autrijus> enjoy!

[15:22] <gaal> :) bye

[15:23] <autrijus> (note to self: do not try to explain higher rank typing when sleepy)

[15:29] <whiteg> autrijus: you should go to bed if you're sleepy.

[15:29] <svnbot6> r5339, autrijus++ | * export all overloaded Set operators.

[15:34] <autrijus> whiteg: that is an excellent suggestion.

[15:36] <Limbic_Region> autrijus - if you haven't gone to sleep yet

[15:36] <Limbic_Region> $larry just said some nice words about Pugs

[15:36] <Limbic_Region> http://perlmonks.org/index.pl?node_id=473689

[15:37] <Limbic_Region> oh - and the whole spaceship parsing bug(s) too - but that is important right now

[15:38] <autrijus> well, seeing that it's important, I'll look at it

[15:38] <autrijus> hm, why do you think it's -1?

[15:38] <autrijus> I think it's clearly 0

[15:38] <autrijus> because you're comparing two list references numerically

[15:38] <autrijus> and arrayrefs numify to length

[15:38] <autrijus> and indeed they are of same length

[15:39] <autrijus> is it really a parsebug?

[15:39] <Limbic_Region> wait a minute

[15:39] <Limbic_Region> maybe I forgot the infix +

[15:39] * Limbic_Region is absent minded sometimes

[15:39] <Limbic_Region> as that wasn't supposed to be list length compare

[15:39] <Limbic_Region> but infix sum

[15:40] <autrijus> (Stoop) if you are abcedminded, to this claybook, what curious of signs (please stoop) in this allaphbed!

[15:40] <Limbic_Region> ok - it is indeed my fault

[15:40] <autrijus> oh. but still -- if it's parsed as derefing with '=' as hash

[15:40] <Limbic_Region> though I think the bug is still there

[15:40] <Limbic_Region> let me fix the tests

[15:40] <autrijus> pugs> :d %ball{10..12} <=> %ball{1..3}

[15:40] <autrijus> App &infix:<=> (:

[15:40] <autrijus>                 Syn "{}" {Var "%ball";

[15:40] <autrijus>                           App &infix:.. (: 10, 12)},

[15:40] <autrijus>                 Syn "{}" {Var "%ball";

[15:40] <autrijus>                           App &infix:.. (: 1, 3)})

[15:40] <autrijus> that looks entirely correct

[15:41] <autrijus> same for the next line

[15:43] <Limbic_Region> hang on

[15:43] <Limbic_Region> testing

[15:44] <Limbic_Region> ok

[15:44] <Limbic_Region> would you like me to nopaste

[15:44] <Limbic_Region> perlbot nopaste

[15:44] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[15:45] <pasteling> "Limbic_Region" at 24.35.57.240 pasted "Parsing spaceship possible bugs" (65 lines, 2.5K) at http://sial.org/pbot/11643

[15:46] * Limbic_Region is going to commit as he needs to go get breakfast

[15:46] <Limbic_Region> if they are bugs with my understanding - my apologies

[15:46] <autrijus> commit first speak later :)

[15:46] <autrijus> note that [+] is lower prec

[15:47] <autrijus> being listop

[15:47] <autrijus> so

[15:47] <autrijus> [+] %ball{10..12} <=> [+] %ball{1..3}

[15:47] <autrijus> is parsed as

[15:47] <autrijus> [+] (%ball{10..12} <=> ([+] %ball{1..3}))

[15:47] <autrijus> but that is as expected

[15:47] <autrijus> and nothing related to spaceship per se

[15:47] <Limbic_Region> so I think perhaps my bug isn't a bug if it is a precendence issue

[15:47] <autrijus> nod. try putting parens around ([+] %ball{10..12}

[15:47] <autrijus> )

[15:48] <autrijus> and see if it works

[15:48] <Limbic_Region> already have that

[15:48] <Limbic_Region> ok - committed

[15:48] <autrijus> cool.

[15:48] <autrijus> enjoy your breakfast

[15:48] <Limbic_Region> think the issue was that there was a bug

[15:48] <Limbic_Region> but not the one I thought it was

[15:48] <Limbic_Region> and when you fixed it

[15:48] <Limbic_Region> I was thinking you hadn't

[15:48] <Limbic_Region> anyway - thanks - enjoy your sleep

[15:49] <autrijus> np :)

[15:51] <svnbot6> r5340, Limbic_Region++ | Fixed parsing spaceship tests to correctly expose bug

[15:51] <svnbot6> r5341, autrijus++ | * unTODO a passing operator overloading test

[15:58] <autrijus> gaal: I lifted op1IOBool into op1IO

[15:58] <autrijus> enjoy

[15:58] <svnbot6> r5342, autrijus++ | * lift the IO respond type up in op1IOBool into a more generic op1IO.

[16:20] <autrijus> rafl: do you have a test for Foo::Bar::baz?

[16:20] <svnbot6> r5343, autrijus++ | * turns out parsing_spaceship is actually a precedence issue;

[16:20] <svnbot6> r5343, autrijus++ |   remove bogus tests.

[16:21] <autrijus> Foo::Bar.baz, even

[16:21] <autrijus> class Foo::Bar { method bar { 3 } }

[16:21] <autrijus> say Foo::Bar.bar;

[16:21] <autrijus> rafl: this worksforme, so I wonder what are you running into

[16:22] <autrijus> rafl: I need to sleep now -- if you have a test already or commits one, please point it to me and i'll fix

[16:22] * autrijus waves g'nite &

[17:00] <rafl> autrijus: OK, tomorrow. I'll need to prepare me for debconf now.

[17:15] <svnbot6> r5344, putter++ | Created docs/other/howto_unspam_the_pugs_wiki.  Perhaps we should automate the spam detection.

[17:35] <nothingmuch> hoi

[17:36] <putter> hoi

[17:44] * putter backlogging <=> discussion, wonders if we should have a Mistakes/Puzzles/??? file and/or wiki page.  Everytime you puzzle over something, add it to the file.  As it grows, we can pull stuff out into an organized version.  Because, modulo spec changes and pugs bugs, every issue we encounter will be encountered _many_ more times...  

[17:44] <putter> by _many_ more people...

[17:45] <putter> http://colabti.de/irclogger/irclogger_log/perl6?date=2005-07-09,Sat  is timing out :(

[17:48] <nothingmuch> putter: that's a good idae

[17:51] <putter> Rules have a sigil of "<".  rule foo {} binds <*foo.  Can one access such a name?  $x = <*foo; is a parserrror.

[17:55] * putter wonders if there is a spec'ed way to get the pattern string back out of a rule object... googling...

[17:55] <wolverian> putter, a sigil <? where is that specced?

[17:59] <putter> Implementation only?  My impression is the rule logistics are only now beginning to be specced.

[18:00] * wolverian shrugs

[18:00] <wolverian> I don't know what pugs does, I'm asking what it's supposed to do :)

[18:02] <putter> The only thing I've seen is the hackathon's notes on &Mumble::rule:<foo>.

[18:03] <putter> rule: seems to behave like prefix:

[18:03] <wolverian> right, namespace separator of sorts. the <> there is just qw() 

[18:03] <wolverian> ie. not <foo

[18:05] <putter> yes.

[18:09] <putter> Ah, there it is, AST/Internals.hs typeOfSigil.  In addition to the usual $@%@ there is also < Rule and : Type.

[18:17] <putter> nothingmuch: it looks like http://nothingmuch.woobling.org/pugs_test_status/ hasn't been updated in a while?

[18:21] <gaal> rehi

[18:21] <putter> Yipes!  The most recent smoke is July 5, and most of them are more than a month old.  Five smokehouses, all unhelpful. :(

[18:22] <gaal> everybody who lives close to a beach and doesn't go, should!

[18:22] <putter> :)

[18:22] <gaal> putter: http://perlcabal.org/~gaal

[18:23] <putter> Are the http://forum2.org/gaal/ smokes abandoned now?

[18:24] <gaal> uh, i guess :)

[18:25] <gaal> are they still listed somewhere?

[18:25] <putter> Ok, then I'll remove them from http://pugs.kwiki.org/?SmokedPugs and add your new one.  Ok?

[18:25] <gaal> thanks

[18:25] <gaal> putter++ # global housekeeping

[18:27] <putter> np. :)  is it still a cygwin box?

[18:28] <gaal> i don't think anyone's making a serious attempt at cygwin atm

[18:28] <gaal> i've moved to native win32

[18:28] <gaal> occasionally i also put up linux smokes, but less otfen as my win boxen are faster

[18:29] <putter> ok, thanks

[18:30] <gaal> if someone puts up a nice HOWTO for coLinux i might start using that :)

[18:32] <putter> :)  the absence of a linux smokehouse does seem odd.

[18:32] <gaal> i wanted to automate a machine at work for it, but never got around to it.

[18:33] <gaal> doesn't juerd's setup on feather do it?

[18:33] * putter _really_ needs to get a colo box.  RSN, for a multi-year value of soon.

[18:34] <putter> re feather, can someone with a feather account report...?

[18:34] <gaal> sec :-)

[18:34] <gaal> putter, want me to start a new smoke on my machine? regardless of feather

[18:35] <putter> googling... http://feather.perl6.nl/~autrijus/smoke.html is late June...

[18:36] <theorbtwo> Likely from the hackathon.

[18:36] <gaal> juerd's autobuild does not smoke. shall i write him a letter? it's a two line patch to his setup.

[18:38] <putter> ok, that's just weird: http://www.medhelp.org/perl6/dermatology/   warts, fungus, hives, etc.  ;)

[18:39] <gaal> nasty

[18:39] <wolverian> what does that have to do with perl6? 

[18:40] <gaal> the url path.

[18:40] <wolverian> I think that's what I meant :)

[18:40] <gaal> :)

[18:40] <wolverian> or rather, what does the page content have to do with the URI? :)

[18:41] <gaal> obviously Dr. A. Rockoff is a subversive python hacker.

[18:41] <wolverian> or he just uses pugs to run his website.

[18:41] <gaal> yeah!

[18:42] <putter> gaal: it would be good to have a linux smoke.  either feather, juerd, or yours...

[18:42] <gaal> sending juerd a patch as we speak.

[18:42] <putter> gaal++

[18:45] <putter> http://colabti.de/irclogger/irclogger_log/perl6 is back up.

[18:47] <putter> Ah well, looks like symbol table lookup hasn't been implemented yet...

[18:47] <putter> %*:: etc.

[18:47] <gaal> there's a t/ for that

[18:47] <gaal> t/namespaces or something?

[18:48] <gaal> or t/syntax/symtable.t

[18:48] <putter> yes, t/packages/reflection.t

[18:48] <gaal> ooh fanct

[18:49] <gaal> i think there should be symtable.t also

[18:49] <gaal> i think i wrote it

[18:49] <putter> and t/syntax/symbol_table.t

[18:49] <gaal> that's the one

[18:50] <gaal> there's a t/pugsbugs/namespaces.t too

[18:50] <dudley> quoth $larry: "Method calls are allowed to be argumentless"

[18:51] <gaal> um, weren't they always?

[18:51] <dudley> Yeah, but he's implying that plain subs aren't 

[18:51] <dudley> or am I missing something?

[18:52] <theorbtwo> I think he means $foo.bar;

[18:52] <theorbtwo> With neither arguments nor a pair of empty parens.

[18:52] <dudley> Ah, that would make more sense...

[18:54] <theorbtwo> %CALLER:: has been implemented.

[18:55] <gaal> to2, shall i abort my smoke and rebuild?

[18:55] <theorbtwo> The code should be pretty general as to working with the other special namespaces.

[18:55] <theorbtwo> nothing_pasta, I impemented it a month plus ago.

[18:55] <gaal> i'm no pasta!

[18:55] <theorbtwo> erxz_paste, whoops.

[18:55] <gaal> my italian food does not burn.

[18:55] * theorbtwo grins.

[18:57] <putter> ah! %CALLER::!

[18:57] <putter> ?eval my $x; my sub g(){}; sub h(){}; sub f() { say %CALLER:: } f()

[18:57] <evalbot6> Error: No compatible subroutine found: "&say" 

[18:57] <putter> ?eval my $x; my sub g(){}; sub h(){}; sub f() { %CALLER:: } f()

[18:57] <evalbot6> {('$?1' => \'my $x; my sub g(){}; sub h(){}; sub f() { %CALLER:: } f()'), ('$_' => \'perl6'), ('$code' => \'my $x; my sub g(){}; sub h(){}; sub f() { %CALLER:: } f()'), ('$lang' => \'Perl6'), ('$x' => \undef), ('%_' => {}), ('&?BLOCK_EXIT' => \sub {...}), ('&break' => \sub {...}), ('&continue' => \sub {...}), ('&g' => \sub {...})} 

[18:57] <gaal> wheeee

[18:58] <putter> though there is no &h ?

[18:58] <gaal> '$?1'?

[18:58] <theorbtwo> Yeah, I sometimes don't understand everything that's there and not there either.

[18:58] <theorbtwo> I think it's buggy, but I'm not sure it's well-specced.

[18:59] * gaal showers &

[18:59] <putter> & thanks for the fish

[19:04] * putter , after an nth unsuccessful attempt to do a src/Pugs patch, wonders

[19:05] <putter> (1) whether its better to focus on what is tractable rather than what is interesing...

[19:05] <putter> (2) if it might be useful for someone with a good understanding of the state of src/Pugs to write up a "next steps" todo list...

[19:07] <putter> (3) since autrijus is sooooo much more productive than me, whether there is some way to focus on supporting him, rather than banging randomly myself.  Old IBM  principle programmer with supporting team model.

[19:07] <putter> end

[19:08] <gaal> putter: when it does work, do you enjoy it? i find haskell very difficult, but at least as rewarding.

[19:09] <gaal> my contributions to src/Pugs are peripheral, but slowly increase.

[19:09] <gaal> i'm having fun. :)

[19:10] <gaal> what are you working on?

[19:11] <putter> good questions...

[19:19] <putter> I enjoy haskell, and fixing little things to get people unstuck.  I've spent too much time lately working on rules, which had the unfortunate characteristics that there was no one working nearby (no fun), and I found myself in "for each few lines of code, a pugsbug" land (no fun).  So I'm trying to get back to things that (1) someone else cares about, and (2) are tractable.

[19:20] <gaal> at least the existence of t/ makes things much easier.

[19:20] <theorbtwo> t++

[19:21] <gaal> t++ sounds like a language that doesn't compile if you didn't write a test first.

[19:21] <theorbtwo> It does at that.

[19:21] <theorbtwo> Funky.

[19:25] <gaal> i suppose one finds one's best balance point (and that point can move from time to time following circumstances) between the well-inhabited places and where there be dragons.

[19:26] <putter> t/ is nice.  though I miss the old "trade a test for a patch" days.

[19:27] <putter> re balance point, oh yes.  taste and judgement being key, as they are so often in programming.

[19:30] <putter> t++ ... tea and crumpets?

[19:40] <putter> Ah, a treaded archive of p6-l http://aspn.activestate.com/ASPN/Mail/Browse/Threaded/perl6-language

[19:51] <gaal> oops, forgot to upload smoke. fixing.

[19:51] <gaal> up now.

[19:53] * gaal had better get to bed now

[19:53] <gaal> bye :)

[19:53] <putter> g'night gaal

[20:06] <putter> I was talking to a haskell and perl person a few days ago... and he had never heard of pugs.  I thought our visibility was pretty good, but perhaps more could/should? be done.

[20:12] <putter> I was pondering what we might do to increase the probability that a lambdafolk visiting pugs gets sucked in as a contributor.

[20:16] <putter> It seems we don't really have a "state of pugs" document occurring.   autrijus's great journal tends to be "news", and thus a delta between states.  but we dont seem to have anything which stops and sums up, "this is where we are at, what is working and not and how much.  and this is what we are working on, where we are going and when".

[20:18] <putter> It might be nice to have such a doc.  Perhaps a monthly post or journal entry.

[20:18] <putter> no?

[20:31] <dudley> putter: as a fledging lambacamel, I think a doc like that would be great.

[20:31] <dudley> err, lambda

[20:32] <dudley> It would help me figure out what the hell is going on a lot faster

[20:49] <putter> dudley: As you figure it out, it might be worth noteing what you found helpful.  So when someone asks "I'm trying to figure out what the hell is going on", we can at least drop your list.  With an additional level of detail, eg, lib/pugs/hack.pod helped with foo but not bar, it could help guide documentation.

[20:51] * putter notes that by grepping around, one can easily establish that nothing like the sentence "Pugs has two regular expression engines, PCRE and PGE." exists. ;)

[20:59] <dudley> putter: that's a good idea. That would probably help me organize my thoughts a little, too.

[21:04] <putter> :)

[21:04] <svnbot6> r5345, putter++ | Added a note about haddock to docs/SEEALSO.  It wasnt mentioned anywhere.

[21:08] <wilx> What am I supposed to put into PARROT_PATH?

[21:08] <wilx> When I set it to /opt/ I get "Can't exec "./parrot": No such file or directory at Makefile.PL line 404."

[21:09] <wilx> And when I set it to /opt/bin or /opt/bin/parrot I get "*** Please set $ENV{PARROT_PATH} to the base path with a built parrot tree."

[21:09] <wilx> I have installed parrot-0.2.2 with --prefix=/opt.

[21:10] <dudley> Try the path to the build directory, not the install directory

[21:10] <dudley> I've never tried it with an installed parrot...

[21:10] <wilx> Ah.

[21:12] <wilx> Yup, this looks like it works.

[21:12] <dudley> Cool

[21:22] <putter> Could someone remind me how to  make test  with -BPIR?  (yes, I was the one who figured it out.  yes, I failed to add it to the documentation)

[21:22] <putter> sigh.

[21:22] <dudley> what does make pirsmoke do?

[21:23] <putter> ah, and right next to pirsmoke, pirtest.  thanks dudley.  pirsmoke generates a smoke using the PIR backend.

[21:24] <dudley> That's what I thought. Didn't know about pirtest, though.

[21:27] <putter> And... neither are documented.  Nor the setting up of a perl embedded pugs.

[21:35] <putter> Hmm, so one cannot embed both parrot and perl5 at the same time?

[21:37] <dudley> Sure, why not?

[21:37] <Juerd> gaal: autobuild smoking would mean it'd have to run less often

[21:37] <Juerd> gaal: As a smoke takes a long time to finish. 

[21:44] <putter> Juerd: could you have a copy on the side and smoke it once a day or so?

[21:45] <putter> dudley: I was confused.

[21:45] <putter> Juerd: the motivating observation is that noone is running a linux smoke any more.

[21:45] <dudley> happens to the best of us ;-)

[21:46] <Juerd> putter: I don't quite understand why people who have access to feather don't just have it smoke.

[21:46] <Juerd> The files are readable, they can be used.

[21:47] <putter> dudley: By practicing assiduously, I now excel at it.

[21:47] <Juerd> In any case, smoking shouldn't take place in the script that is executed once every 15 minutes, as I never want the script running twice. (I should add a check for that, btw)

[21:48] * putter ~~ <people who have access to feather> #=> bool::false

[21:51] <putter> Juerd: good, it sounds like you have a sound vision... care to implement it? ;-)

[21:52] <putter> anyone with access to feather here?

[21:55] * putter hopes the rpms for 6.4.1 will not have merely a stage-1 compiler.  There is no reason ghc shouldnt be made _trivial_ to install.

[22:01] <yasar_> #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team 

[22:01] <yasar_> #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team 

[22:01] <yasar_> #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team 

[22:01] <yasar_> #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team 

[22:01] <yasar_> #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team #fazlamesai Turkish Linux Team 

[22:03] <putter> Hmm... Where might one note that the redefinition of RETURN (p5 vs readline), when embedding perl5, is not a problem and can be ignored.  I'm reluctant to clutter up README...

[22:06] <putter> oops, dinner, &

[22:33] <dudley> putter: maybe we need a new doc for notes on building pugs. The various make options (pirsmoke, pirtest) could get documented there, too.

[22:36] <masak> dudley: sounds like a good idea

[22:41] <dudley> any metacommitters around?

[23:19] <autrijus> dudley: yes?

[23:41] <autrijus> greetings joao

[23:42] <autrijus> joao: are you fluent in both Haskell and Perl?

[23:42] <joao> Nopes, sorry :)

[23:43] <joao> Just a beginner

[23:43] <autrijus> to both? excellent.

[23:43] <joao> Well, I have some background in Haskell programming and basic knowledge about Perl

[23:43] <joao> I'm trying to improve both, actually

[23:43] <autrijus> I think you automatically qualify for a committer bit to Pugs :)

[23:44] <autrijus> so what was the question you asked cog to ask me again? I lost the /msg window with cog

[23:45] <joao> he asked you something about your sabatic? what was your job? something like that..

[23:45] <autrijus> oh. I own a small shell company that does free software consulting etc

[23:46] <autrijus> by sabbatical I meant living mostly on my bank savings and dedicate most of my time to pugs

[23:46] <joao> nice :)

[23:50] <dudley> autrijus: Is it possible to change my username on openfoundry?

[23:50] <autrijus> dudley: what's your username?

[23:51] <dudley> I signed up as dkf

[23:51] <autrijus> dudley: it would be simplest to just register a new name.

[23:51] <dudley> (lack of sleep :-) _

[23:51] <autrijus> and let me or other metacommitter know the name so you can be added to committer list again

[23:51] <joao> Perl6 User's Golfing System? :)

[23:52] *** Maddingue__ is now known as Maddingue

[23:53] <autrijus> joao: yeah. golfing is part of perl culture :)

[23:53] <autrijus> "A competition to find the shortest (fewest keystrokes) Perl code to solve a given problem."

[23:54] <Khisanth> wouldn't golf driven design lead to something looking like brainfuck? :)

[23:54] <autrijus> Khisanth: aha, the golfers aren't the designers, that's key

[23:56] <joao> autrijus: cog presentation in Toronto was about golfing too, i think

[23:56] <joao> autrijus: btw, are you coming to YAPC::EU ?

[23:57] <autrijus> joao: I wish I could but I need to make to ICFP+EuroOSCON too, and that has already depleted my travel budget

[23:57] <geoffb> autrijus, I take it you're skipping OSCON Portland?

[23:57] <joao> Oh, too bad. You could meet this place.. :)

[23:58] <autrijus> geoffb: aye

[23:58] <geoffb> :-(

[23:58] <geoffb> First time I'm managing to make a conference in I think 6 years

