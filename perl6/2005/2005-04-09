[00:00] <putter> default and implicit seem to figure large in descriptions.

[00:00] <ninereasons> default_var.t ?

[00:00] <ninereasons> under t/var/  ?

[00:01] <kungfuftr> default placeholder?

[00:02] <putter> maybe default_scalar?  @_ apparently being called the default array...

[00:02] <ninereasons> how about placeholder.t ?

[00:02] <ninereasons> good point, putter

[00:04] <putter> "default scalar variable" seems to be a phrase in use.

[00:04] <kungfuftr> hhhmmm... wonder if perl6 is going to have a nicer replacement for @ARGV

[00:04] <ninereasons> I thought 'svn ci <files> ' would check in files that didn't exist before?

[00:05] <putter> svn add  first.  (having hit that earlier this evening)

[00:05] <ninereasons> ah.  that worked

[00:07] <ninereasons> r1663; and only two hours to code what ... 20 lines?

[00:07] * ninereasons hangs his head

[00:07] <shapr> running code is good code

[00:07] <ninereasons> thanks for the hug :)

[00:07] * shapr grins

[00:08] <stevan> putter: nothingmuch's smoker may not be up to date,.. be sure to check the revision number (if you havent already)

[00:09] <putter> manager: "You spent the entire day and only wrote only thirty lines of this hasscalle code?  You were much more productive in Java."  Sigh.

[00:09] <ninereasons> @*ARGS is not nicer, in my opinion, kungfuftr 

[00:09] <shapr> putter: haha!

[00:09] <shapr> That sounds like my life.

[00:10] <ninereasons> kungfuftr, but that's what it is.

[00:10] <kungfuftr> ninereasons: yar, though i suppose it can always be overridden to have handy methods, etc

[00:11] <ninereasons> indeed. "no builtins except lambda"

[00:11] <ninereasons> someone said

[00:12] <kungfuftr> "Knightrider, the kindergarden years"... Kit: "No michael, we are not nearly there yet."

[00:13] <kungfuftr> ++.assuming(2)

[00:13] <kungfuftr> *sigh* i wish i had faster hardware... new installs are always a git

[00:13] <ninereasons> a statement like that must make someone like shapr pretty happy (?)

[00:14] <kungfuftr> *blink*

[00:14] <ninereasons> shapr "..except lambda"

[00:15] <shapr> ?

[00:16] * shapr throws lambdas

[00:16] <shapr> This is my throwing lambda of DOOM!

[00:17] * ninereasons is not even sure what a lambda is, really :)

[00:17] <shapr> it's this little critter that comes from Alpha Centauri...

[00:17] <ninereasons> a shapeshifter

[00:17] <shapr> Actually, a lambda is a greek letter, and it's part of the lambda calculus.

[00:17] <kungfuftr> sheep rapists

[00:17] <shapr> yow

[00:18] <ninereasons> lamb - da ; I get it

[00:18] <kungfuftr> perl 6, it's getting there... FOR ME TO POOP ON!

[00:18] <shapr> who said no builtins except lambda?

[00:18] <ninereasons> Larry, somewhere

[00:19] <ninereasons> or something near that

[00:19] <ninereasons> (very near, if I recall)

[00:19] <shapr> That's pretty cute. Lambda calculus is pretty close to that.

[00:19] <shapr> It has three builtins. S, K, and I.

[00:20] <putter> hmm.  if we could write p6 objects with compile-time inline haskell and/or C code, then various "builtins" in Prim.hs could be pulled out.  Prelude.pl? ;)

[00:21] <ninereasons> I'd say that this reminds me of Wittgenstein, if I understood Wittgenstein

[00:21] <shapr> I've heard of him.

[00:21] <stevan> shapr: and can't you make I out of S & K

[00:21] <shapr> stevan: yup

[00:22] <shapr> and you can make all of them out of X

[00:22] <shapr> but it's really convoluted

[00:22] <stevan> shapr: you go girl

[00:22] <shapr> hey, I'm a guy.

[00:22] <stevan> yeah right, and so it ingy

[00:22] <putter> any reason for testgraph.pl to continue not containing a date stamp in its body?  (someone doing autodiffs, etc?)

[00:23] <shapr> Is ingy a guy?

[00:23] <shapr> Brian is usually a male name.

[00:23] <kungfuftr> putter: it's in the title, is good enough

[00:23] <kungfuftr> shapr: yup

[00:23] <stevan> shapr: ingy has a habit of referring to boys as girls sometimes

[00:24] <stevan> on the internet, no one knows your a dog

[00:24] <kungfuftr> stevan: except al gore, he invented everything

[00:24] * ninereasons .oO hopes no one discovers he's a dog

[00:24] <stevan> woof

[00:26] <putter> kungfuftr: who looks at titles?  (I sure hadn't been.)

[00:27] <kungfuftr> putter: me

[00:27] <kungfuftr> =0)

[00:28] * kungfuftr will be redoing lots of the test stuff tomorrow once my freebsd install is all sorted

[00:29] <ninereasons> I've noticed that occupant count goes down, when autrijus isn't about the place.  maybe a timezone coincidence.  maybe he's a rockstar.

[00:29] <shapr> he's a rockstar, no doubt about it.

[00:30] <kungfuftr> http://search.cpan.org/~dland/Acme-DonMartin-0.01/DonMartin.pm # excellent!

[00:35] <putter> kungfuftr: so I should punt on adding a gmtime stamp to the top of the body?

[00:37] <putter> hmm... YAML make test quickly eats a GB of memory and becomes a swap stress test.  eep.

[00:38] <shapr> yow

[00:38] <kungfuftr> putter: yar... go for it

[00:38] <putter> k

[00:39] <kungfuftr> punt on? you mean "put off"?

[00:39] <putter> yes.  "punt on" === "put off"  *g*

[00:40] <kungfuftr> k

[00:40] <kungfuftr> nn

[00:40] <putter> now if only I could test it I'd be a happy camper...

[00:47] <putter> nn?

[00:48] <crysflame> putter: wow, neat

[00:48] <crysflame> fsvo "neat"

[00:48] <crysflame> WOW

[00:48] <crysflame> this is incredible!

[00:48] <crysflame> kungfuftr++ # thank you!

[00:49] <kungfuftr> *blink* huh?

[00:49] <kungfuftr> has my evil twin been selling sex toys again?

[00:50] <crysflame> Acme::DonMArtin

[00:50] <kungfuftr> ah

[00:55] <ninereasons> oh man, that's funny.

[00:56] <putter> kungfuftr: it's in

[00:56] <putter> crysflame: i'm not sure which/what was neat, but thanks.

[00:58] <kungfuftr> bah, can't believe i can't get pugs to build... hhhrrrmmm...

[00:59] <crysflame> wuzzat? are you dland?

[01:00] <kungfuftr> crysflame: please english speaking you be

[01:00] <crysflame> kungfuftr: is putter DLAND of CPAN?

[01:01] <crysflame> he seems to be appreciating my complimentary statements

[01:01] <kungfuftr> no idea, tbh

[01:01] <crysflame> as indicated by his most interesting which/what conglomeration

[01:01] <crysflame> okay, enough english.

[01:06] <putter> crysflame: re dland, no.  re appreciating, "putter: wow, neat".

[01:47] <crysflame> oh. YAML make test. it was sarcasm :|

[01:48] <crysflame> i can't think of why YAML would do that, but i don't know it at all, either

[01:49] <putter> ah... 

[01:50] <stevan> part of the YAML test issue is that YAML cannot stream, so building some of them hogs a lot of memory

[01:51] <putter> 1+ GB!?!  At this point I have a new global default hypothesis... if it didn't work, its an x86_64 problem. :/

[01:52] <putter> I added looking into the problem to my infinite todo list... but that was full, so it fell off...

[01:54] <putter> enough ghc unicode fun for today.  g'night folks.

[02:20] <elmex> ?

[03:27] <yinjieh> http://www.freebsd.org/cgi/query-pr.cgi?pr=ports/79704 # parrot vm ports

[03:28] <yinjieh> Anyone who is interested in it can give it a try :)

[04:32] <autrijus> yay!

[04:32] <ingy> hi autrijus 

[04:35] <autrijus> hey. how's going man?

[04:36] <ingy> good

[04:36] <ingy> I'm taking some time out from hacking

[04:36] <ingy> I'll likely get back into  it tommorrow

[04:36] <ingy> I want to get real Kwid support into pugs

[04:37] <autrijus> woot!

[04:37] <autrijus> as in kwid2html via perl5?

[04:37] <autrijus> or something more drastic?

[04:37] <autrijus> s/kwid2html/any2kwid+kwid2any/

[04:37] <ingy> right, with built in pugs installation

[04:37] <autrijus> woot!

[04:37] <ingy> well I have to do it first

[04:38] <ingy> when is the next pugs release

[04:38] <autrijus> ingy++

[04:38] <autrijus> it's 48 hours from now

[04:38] <ingy> :P

[04:38] <ingy> ok good

[04:38] <ingy> perfect

[04:39] <ingy> can I relase Perl6::Makemaker as planned?

[04:40] <ingy> or do you want Perl6-Pugs-Makemaker

[04:42] <ingy> actually i think the module needs to be Perl6::Makemaker

[04:42] <ingy> the dist can be anything but Perl6-MakeMaker is best prolly

[04:45] <ingy> gah, you already released it autrijus 

[04:45] <Khisanth> aren't all the Perl6:: modules going to need renaming after perl6's release?

[04:46] <ingy> oh wait...

[04:46] <ingy> Khisanth: no, because they are all written in Perl 5

[04:46] <ingy> so they will just fade away if anything

[04:49] <ingy> autrijus: I see, those modules are indexed from Perl6-Pugs

[04:54] <autrijus> yup.

[04:55] <autrijus> I think it makes sense

[04:55] <autrijus> so just hack lib/Perl6/MakeMaker.pm away

[04:55] <autrijus> and let it update with each weekly pugs release?

[04:55] <autrijus> I see little benefit in separating it out currently

[04:55] <autrijus> but maybe I missed something

[04:58] <ingy> I thought we would have Perl6-Pugs-6.141 require Perl6-MakeMaker-6.141

[04:59] <ingy> then we don't have to bundle ever Perl6- module inside pugs like Perl6-Bible say

[04:59] * ingy thinks ...

[05:00] <autrijus> sure but well, the point of deps is that some people may choose not to install it

[05:00] <ingy> or maybe we should bundle Perl6-Bible inside Perl6-Pugs

[05:00] <autrijus> but P6::MM makes no sense without P6::Pugs

[05:00] <autrijus> whilst P6::Bible makes lots of sense 

[05:00] <autrijus> independently

[05:00] <autrijus> if there is another P6 implementation about

[05:00] <autrijus> then it makes sense to factor P6::MM out

[05:00] <autrijus> and have both implementation depend on it

[05:00] <autrijus> or, if P6::Pugs has a slow release cycle

[05:01] <autrijus> then it may make sense for P6::MM have a faster one

[05:01] <autrijus> but as things currently stand, neither of above is true

[05:01] <ingy> yes but P6::Pugs doesn't need to require ::MM

[05:01] <autrijus> so factoring out P6::MM complicates the installation

[05:01] <autrijus> without apparant benefit

[05:01] <autrijus> it doesn't? I want ext/ to eventually use ::MM

[05:01] <autrijus> instead of M::I::P

[05:02] <ingy> oh...

[05:02] <ingy> I wasn't aware of that

[05:02] <autrijus> otherwise moving modules/ into ext/ will be bothersome

[05:02] <ingy> that's a little tricky...

[05:02] <autrijus> yeah, so it doesn't need to happen right away

[05:03] <autrijus> but with that in mind, I don't see having a separate ::MM as a benefit

[05:03] <ingy> it's actually easier to do that if Perl6::MM is taken outside

[05:03] <ingy> because the prereqs get installed at Makefile.PL time

[05:03] <autrijus> so, you said Pugs doesn't need to require MM

[05:03] <autrijus> but with that plan, we do require MM anyway

[05:03] <ingy> well that was before you wanted ext to use it

[05:04] <autrijus> 12:58 < ingy> I thought we would have Perl6-Pugs-6.141 require

[05:04] <autrijus>               Perl6-MakeMaker-6.141

[05:04] * autrijus looks slightly confused

[05:04] <ingy> right, and then it will get installed in time for ext stuff

[05:05] <ingy> if it is in build_requires()

[05:05] <autrijus> *nod* what's bad about adding lib/ as a include path

[05:06] <autrijus> currently installing pugs needs no other cpan modules

[05:06] <autrijus> so unless there's a considerable benefit

[05:06] <autrijus> I'd like not to require other CPAN modules

[05:06] <ingy> well the Perldoc tools do require other modules

[05:06] <autrijus> ok...

[05:07] <ingy> it is a path of insanity to try to avoid other modules

[05:07] <autrijus> sure

[05:07] <ingy> that's what code is there for

[05:07] <ingy> not  to go nuts or anything

[05:07] <autrijus> alright. so you forsee Perldoc as part of pugs or not?

[05:07] <ingy> well for now using lib is probably fine

[05:07] <ingy> I'll hold off

[05:07] <ingy> um

[05:07] <autrijus> *nod* all i'm saying is that 

[05:08] <autrijus> I'd be willing to depend on other stuff and roll a Bundle::Pugs

[05:08] <autrijus> as soon as there is a considerable benefit to do so

[05:08] <ingy> I see Pugs build_requires('Perldoc')

[05:08] <autrijus> avoiding premature optimisation etc

[05:08] <autrijus> why do we require that at build time?

[05:08] <autrijus> making manpages?

[05:08] <ingy> yes

[05:09] <autrijus> manpages of what?

[05:09] <ingy> whatever manpages pugs installs

[05:09] <ingy> unless Pugs has no Pod/Kwid 

[05:09] <autrijus> sure.

[05:10] <autrijus> it's fine to have Pod :)

[05:10] <autrijus> ok. as soon as there's installable Kwids in Pugs

[05:10] <autrijus> we build_depends on Perldoc

[05:10] <autrijus> that's sane

[05:10] <autrijus> we may also consider include(), but I'm fine with either.

[05:10] <autrijus> before that happens, I'm fine with recommend() perldoc.

[05:11] <ingy> okok

[05:11] <ingy> going out now...

[05:11] <ingy> good luck!

[05:11] <autrijus> :D

[05:14] <autrijus> hrm

[05:14] <autrijus> s:perl5{%([\da-fA-F][\da-fA-F])}{chr(hex($1))}

[05:14] <autrijus> ah. right. :e doesn't yet work in regex

[05:14] <autrijus> that's sad.

[05:14] <autrijus> but wait...

[05:15] <autrijus> s:perl5{%([\da-fA-F][\da-fA-F])}{{chr(hex($1))}}

[05:15] <autrijus> that should work, no?

[05:15] <autrijus> yeah, it works

[05:15] <autrijus> stevan: I'll fix your code :D

[05:17] <autrijus> stevan: so it turns out you can use

[05:17] <autrijus>       $decoded ~~ s:perl5:g/%([\da-fA-F][\da-fA-F])/{chr(hex($1))}/;

[05:18] <autrijus> freely

[05:18] <autrijus> hi Qiang_zh!

[05:19] * autrijus loves the fact that there's no s///e anymore

[05:19] <autrijus> hurray for sanity

[05:20] <Qiang_zh> hello, autrijus :) 

[05:23] <autrijus> =) you coming to YAPC::NA, right?

[05:23] <autrijus> I hear there's a perl 6 roundtable the day before the conference

[05:23] <autrijus> not sure of the details yet

[05:24] <Qiang_zh> i guess. this would be my first time 

[05:24] <autrijus> nice!

[05:24] <Qiang_zh> toronto is hot already. you guys will have a good sweat during the hackthon :)

[05:24] <autrijus> yapc++

[05:24] <autrijus> the host mentioned skiing

[05:24] <Qiang_zh> hmm.. beer

[05:24] <autrijus> which does not connect with "hot" in my mind

[05:24] <Qiang_zh> oh ??!!

[05:24] <autrijus> yeah. we are going to this cottage far away (90 mins on highway) from toronto

[05:25] <autrijus> apparently well suited for outdoor activitities

[05:25] <Khisanth> 90minutes up a mountain? :)

[05:25] <Qiang_zh> he did mention the canoe tho.

[05:25] <autrijus> that sounds like possible

[05:25] <autrijus> that too

[05:25] <Khisanth> which contradicts the snow a bit

[05:26] <Qiang_zh> summer is much more fun than winter time. there are lots activities around the town as well.

[05:26] <autrijus> wonderful.

[05:26] <Qiang_zh> enough snow already :)

[05:26] <autrijus> I'm thinking of staying a bit longer

[05:26] <autrijus> maybe come to vancouver after that

[05:26] <autrijus> but it's not fixed yet

[05:26] <Qiang_zh> when u going to be here ? 

[05:26] <autrijus> 23th of june iirc

[05:27] <Qiang_zh> cancouver is nice too.

[05:27] <Qiang_zh> for travel or 

[05:28] <autrijus> maybe staying a bit and enjoy the weather, which is reputed to be nice

[05:29] <Qiang_zh> YES! 

[05:29] <autrijus> ok. now lunch, and then _really_ work on this IType thing

[05:29] <Qiang_zh> the people from perlchina wanted me to write some jounal about the conf. i think you can write some too ;D

[05:30] <Qiang_zh> 1:30pm now.

[05:31] <autrijus> yeah. I wake up late :)

[05:33] <Qiang_zh> autrijus: are you going to be preoccupied with hackathon as soon as you arrived ?

[05:34] <Qiang_zh> or occupied .;

[05:34] <autrijus> I think so

[05:34] <autrijus> I arrive on 23th, then go straight to the cottage

[05:35] <Qiang_zh> er. guess we will meet during the conf.

[05:36] <autrijus> are you @ toronto or vancouver?

[05:37] <Qiang_zh> toronto

[05:37] <autrijus> oh cool. then maybe I can stay a couple days after the conf

[05:37] <Qiang_zh> that would be nice ;)

[05:38] <Qiang_zh> hopefully i will move out to a bigger apartment by then (my parents going to visit me around july :) 

[05:38] <Qiang_zh> welcome to crash . hehe

[05:40] <autrijus> :D

[05:40] <autrijus> noted. we'll see :)

[05:40] <Qiang_zh> for sure.

[05:41] <Qiang_zh> i think i am going to get a beer... hot hot...

[05:42] <autrijus> cool. and I'm going to get lunch

[05:42] <autrijus> bbiab &

[06:46] <Alias_> Goddamned it I hate Win32 file locking

[06:50] <Khisanth> s/ file locking//

[06:50] <yinjieh> good

[06:52] <Alias_> heh

[06:52] <Alias_> I quite like much of Windows...

[06:52] <Alias_> It's relatively stable, it's got great application availability

[06:52] <Alias_> It makes the everyday tasks relatively simple and relatively tolerable

[07:03] <Khisanth> ack! please tell me "is dis(...)" has been renamed ...

[07:16] <autrijus> greetings

[07:16] <Corion> yawn

[07:17] <autrijus> examples/hashes/simpleiter.p6 restored to its full glory

[07:17] <autrijus> trailing comma, no parens around condition

[07:17] <autrijus> hey Corion 

[07:18] <Corion> Hi autrijus ! Good that you remind me - I have to fix some of my tests too so they now use a trailing comma instead of a prefix comma :)

[07:18] <autrijus> :D

[07:18] <autrijus> and drop the silly parens around 

[07:18] <autrijus> for %h.kv

[07:18] <autrijus> if $thing.meth

[07:18] <Corion> autrijus: I moved sleep() for Win32 to use threadDelayed() and will write a test that checks that async() and sleep() work well together

[07:18] <autrijus> good. so threadDelayed() work as expected?

[07:18] <Corion> (likely this will mean to move threadDelay() for Unix as well)

[07:19] <autrijus> "Note that the resolution used by the Haskell runtime system's internal timer is 1/50 second, and threadDelay will round its argument up to the nearest multiple of this resolution."

[07:19] <autrijus> that looks ok

[07:19] <gaal> hi there. ooh, lots of activity.

[07:19] <autrijus> yo gaal.

[07:19] <autrijus> 15:17 < autrijus> examples/hashes/simpleiter.p6 restored to its full glory

[07:19] <autrijus> 15:17 < autrijus> trailing comma, no parens around condition

[07:19] <Corion> autrijus: "as expected" is a bit big. I had to use a magic number of 1000000 to multiply the argument, dunno why - maybe it takes something larger than microseconds.

[07:19] <autrijus> Corion: so, sure, go ahead and move to threadDelayed

[07:20] <Corion> autrijus: I want to write a test first :)

[07:20] <autrijus> hm? it's just microsec

[07:20] <autrijus> go ahead :)

[07:20] <autrijus> I'll test thrDel on unix

[07:20] <Corion> autrijus: Yeah - it took me some "experimenting" to check why my "sleep(1)" didn't seem to work ;)

[07:20] <gaal> there's a small bug in hangman, when you press enter w/o a letter. an unugly solution needs both next and NEXT :)

[07:21] <autrijus> Corion: it's documented as microsecond

[07:22] <autrijus> and a microsecond is 1/1000000th of a sec

[07:22] <autrijus> so that looks sane

[07:22] <Corion> autrijus: Ah. Then I was just tired yesterday ;)

[07:22] <autrijus> op1 "sleep" = boolIO (threadDelay . (* 1000000))

[07:22] <autrijus> I think I'll go with this.

[07:22] <autrijus> (function composition)++

[07:23] <autrijus> gaal: why NEXT{} ?

[07:23] <gaal> to cls

[07:23] <Corion> autrijus: I have (in Compat.hs) sleep = threadDelay $ (*) 1000000 x

[07:23] <Corion>  :)

[07:23] <Corion> ah - I forgot the "x" on the lhs

[07:23] <Corion> autrijus: but yours is more spartanic :)

[07:24] <autrijus> the term is "point-free".

[07:24] <autrijus> or, "pointless".

[07:24] <Corion> :)

[07:24] <autrijus> r1674 has the sleep/threadDelay.

[07:24] <autrijus> tests still (actually more) welcome

[07:24] <gaal> http://www.willamette.edu/~fruehr/haskell/evolution.html for anyone who hasn't seen it

[07:25] <autrijus> yeah, it's a classical read :)

[07:25] <gaal> i understand about three or four of those :(

[07:25] <Corion> gaal: I found that yesterday - very nice thing ;)

[07:25] <autrijus> sad thing is that after my dive into GADT I now understand all of them :-/

[07:25] <Corion> gaal: Ah well - it gives you a good chance to see where you stand ;))

[07:25] <gaal> points-free is mentioned there, which is why i was reminded

[07:26] <Corion> autrijus: I pity you - well, not really :) But I like the idea of creating static types to calculate the factorial :)

[07:26] <gaal> yes, it is useful that way. i don't think the author was being (exclusively) silly.

[07:26] <autrijus> maybe we need that for perl6 as well

[07:26] <autrijus> but not factorial ;)

[07:26] <autrijus> need something more exciting

[07:26] <Corion> autrijus: Maybe grep() ? :)

[07:27] <gaal> actually it's more than four that i understand :) but yeah

[07:27] <gaal> web servers :)

[07:27] <Corion> That reminds me - maybe I should devote today to porting (more of) perlrun. Or maybe writing a stupid database for Perl6. Or HTTP::Proxy. So many choices, so little time :(

[07:28] <Corion> gaal: Heh. "use HTTP::Server::Simple; HTTP::Server::Simple->run()"

[07:28] <Corion> Good start and end for a server ;)

[07:28] <autrijus> rumour has it that there will be a JA*H around Austrian/French Perl workshop :)

[07:28] <gaal> use Problem::Halting; Problem::Halting.solve()

[07:29] <gaal> Corion: databases reeeeallly want an abstraction layer.

[07:30] <gaal> there's no tie interface yer, is there?

[07:30] <autrijus> join('',map {chr(any(0..2**32-1))} 0..2**32-1).eval

[07:30] <Corion> gaal: Yes, but I want to toy around a bit with cursors, to see what parts of DBI can be revamped a bit

[07:30] <gaal> berk db is a cool thing to have

[07:30] <gaal> hahaha

[07:31] <Corion> gaal: I'd want a pure Perl SQL DB, so Perl always has a SQL DB, even if it's dead slow :)

[07:31] <gaal> autrijus: in p5, if you run that, you'll get a core dump.

[07:31] <gaal> i mean if you run its moral equivalent.

[07:31] <gaal> that's neat -- but i insist we want it over DBI.

[07:32] <autrijus> Corion: well once theorbtwo finished his hs-plugin diving

[07:32] <autrijus> we can bundle SQLite with pugs

[07:32] <autrijus> I know I want that

[07:32] <gaal> so my riddle is, *why* would that crash on p5?

[07:32] <Corion> gaal: DBI can come later :)

[07:32] <gaal> SQLite++

[07:32] <autrijus> gaal: because it evals "dump" ?

[07:32] <Corion> autrijus: Oooo - that is even better !

[07:32] <gaal> t

[07:32] <gaal> :)

[07:32] * gaal wants gtk

[07:32] <Corion> although it goes with the "bloated core" territory. But having SQL built in is good IMO :)

[07:33] <autrijus> I think bundled SQLite is major win

[07:33] <autrijus> it's not that bloated

[07:33] <autrijus> and enables many wonderful uses.

[07:33] <gaal> 30kloc of c

[07:33] <Corion> autrijus: Yep - it's one small C set

[07:33] <autrijus> it's the same idea of how perl5 bundled SDBMFile

[07:33] <autrijus> SQLite is the SDBMFile of our age.

[07:33] <gaal> berk is even faster, btu then you have to choose a version.

[07:34] <autrijus> and you can't sql a berk.

[07:34] <gaal> will yaml be in the core?

[07:34] <Corion> ... and we can't distribute berkleyDB with Pugs, no?

[07:34] <autrijus> there will be no core :D

[07:35] <Corion> autrijus: "no core" means problems for those without a (C) compiler... That's why I started out with a pure Perl DB ...

[07:35] <autrijus> but if there is something like a base sdk or something, I think yaml belongs there

[07:35] <Alias_> I like the idea of a base SDK

[07:35] <autrijus> Corion: sure, but maybe we ship precompiled sdks too

[07:35] <autrijus> with pbc it may even be sane

[07:35] <Alias_> The current Perl core is arguably too small

[07:35] <autrijus> but it's handwavy at this point :)

[07:35] <Corion> Alias_: :)

[07:35] <autrijus> and arguably too bloated at the same time.

[07:36] <Alias_> autrijus: Too bloated for "Core", too small for an SDK

[07:36] <autrijus> exactly.

[07:36] * autrijus ponders resurrecting [email@hidden.address]
[07:36] <autrijus> but I need to work on IType now :)

[07:36] <gaal> it'd be real neat if we had a minip6, like today's tinyperl that fits on a bootable diskette

[07:36] <Alias_> diskette?

[07:36] <gaal> then again everybody has disk on keys today

[07:37] <gaal> i think it does, Alias_.

[07:37] <Alias_> floppies will be obsolete by the time Perl 6 comes out

[07:37] <autrijus> sadly pugs is 4M and parrot is 8M.

[07:37] <Alias_> Not just unused, completely unavailable on most PCs

[07:37] <Alias_> USB drives are replacing them (finally)

[07:37] * gaal hopes so

[07:37] <gaal> but hardware changes slowly

[07:37] <autrijus> brb...

[07:38] <Alias_> in another year, I predict Dell won't include a floppy by default

[07:40] <gaal> Dell != computers in classrooms all over the world

[07:40] <gaal> There were still Apple ][s in the early 90ies

[07:41] <gaal> it would be sweet to create a learner's dialect for perl6

[07:41] <gaal> i always wanted a "use stricter" mode in p5 to teach newcomers with.

[07:41] <autrijus> like Helium?

[07:42] * autrijus likes Helium

[07:42] <gaal> Helium?

[07:42] <autrijus> http://www.cs.uu.nl/helium/

[07:42] <autrijus> like PLT DrScheme but for Haskell

[07:42] <autrijus> excellent learning tool

[07:42] <gaal> hey, i can use that!

[07:43] <gaal> autrijus++

[07:46] <gaal> looks like Hugs so far...

[07:49] <Khisanth> autrijus: perl6 is going to be >= 12MB? :)

[07:49] <gaal> hmmm, actually i'm sorry i raised the subject, this is prollly not something to be worrying about so much now :/

[07:50] <autrijus> Khisanth: but parrot will trivially have a share-vm mode

[07:50] <autrijus> so it will be the same 8MB in memory for arbitary number of processes

[07:50] <autrijus> that's imho good design.

[07:52] <Khisanth> that sounds quite nice

[07:54] <Alias_> autrijus: I'm seeing something funny with the M:I install of PPI

[07:55] <Alias_> autrijus: Check out http://www.nntp.perl.org/group/perl.cpan.testers/194069

[07:55] <autrijus> where's Test/ClassAPI.pm ?

[07:55] <Alias_> inc

[07:56] <autrijus> and inc/ is not in the path

[07:56] <autrijus> weird.

[07:56] <Alias_> right

[07:56] <autrijus> this is however 0.05x code :-/

[07:56] <autrijus> so maybe you want to file a bug against cpanplus

[07:56] <Alias_> 0.05x??

[07:56] <autrijus> <- generally clueless about cpanplus 0.05x

[07:57] <autrijus> does it work with manual maketest

[07:57] <autrijus> without an installed T::CAPI?

[07:57] <Alias_> not sure

[07:57] <Alias_> I'm assume that if inc isn't going on the list, quite possibly

[07:58] <autrijus> try duplicating this error, then.

[07:58] <Alias_> quite possibly doesn't work that is

[07:58] <autrijus> I'm sorry -- my mind is in Tie* right now

[07:58] <Alias_> oh, ok

[07:58] <Alias_> The fact that inc doesn't make it over seems like a standalone problem in any case though

[07:59] <Alias_> What does M:I do normally to ensure it is available

[08:00] * Corion has been disenchanted by CPANPLUS

[08:01] *** Corion changes topic to: pugscode.org <<Overview Journal Logs>> | You have safely opened the door to many Perl 6 hackers. | pugs.kwiki.org | smoke: http://xrl.us/fmw2 | Mac OS X r1641 (426/4157) | Win2k r1675 (288+2unex/4184)

[08:07] <autrijus> can you investigate and kill the 2 unex?

[08:11] <Corion> autrijus: Will do

[08:14] * autrijus looks at

[08:14] <autrijus> class IArray a where

[08:14] <autrijus>     fetch       :: a -> Int -> Eval Val

[08:14] <autrijus>     store       :: a -> Int -> Val -> Eval ()

[08:14] <autrijus>     fetchSize   :: a -> Eval Int

[08:14] <autrijus>     storeSize   :: a -> Int -> Eval ()

[08:14] <autrijus> and cringes

[08:15] <autrijus> ah the joy of tied magics

[08:16] <autrijus> instance (IArray a, IHash a) => PseudoHash a where ...

[08:16] * autrijus grins

[08:16] * shapr gives pugs "fastest time from research to real use" sticker

[08:16] <Corion> shapr: 5 years is fast? :))

[08:17] <shapr> I was thinking of GADTs really.

[08:17] <autrijus> shapr probably means GADTs and STM and TH2

[08:17] <shapr> Yes, and STM and TH2

[08:17] <Corion> ah ;)

[08:17] <Corion> I just read yesterday that Control.Concurrent is "experimental" - should that worry me for putting it into Pugs?

[08:17] <autrijus> nope.

[08:18] <autrijus> it means that we have little hope of running Pugs on Hugs.

[08:18] <autrijus> or on NHC.

[08:18] <autrijus> but that's okay, we are doomed anyway

[08:18] <Corion> autrijus: Too bad :)

[08:18] <shapr> doomed?

[08:19] <Corion> Ah - somebody made "undef @array" work - that's one of the unexpected successes

[08:19] <autrijus> that'd be me

[08:20] <autrijus> shapr: doomed to only run on ghc

[08:20] <Corion> autrijus++ # making stuff work

[08:23] <shapr> oh. that not bad as doom goes.

[08:24] <shapr> At the Haskell Workshop 2003 there was a presentation with the slide "Haskell, defined by GHC?"

[08:25] <autrijus> heh. I like hugs too

[08:25] <autrijus> very embeddable and fast

[08:25] <autrijus> (fast as in compilation)

[08:25] <shapr> The Haskell standard moves slowly, but GHC moves like greased lightning.

[08:26] <Corion> shapr: Ah we'll see that with Perl6 too. "Perl6, defined by Pugs?" :-)

[08:26] <Corion> But that's better than "Perl6, defined by Haskell?" :-)

[08:26] <shapr> haha

[08:26] <autrijus> lol

[08:26] <Corion> ... which might also happen, if the Haskell community decides to embrace and extend Perl6 development ;-)))

[08:26] * shapr saves that quote

[08:27] <autrijus> yeah. it's not yet clear whether Perl 6 will be reimplemented from scratch or translated from pugs.

[08:27] <autrijus> I tend not to worry too much about that.

[08:27] <Corion> autrijus: Perl6 will (have to) use Pugs/Haskell. I mostly wonder if Perl6 will ever move onto Perl6 or always stay with Haskell.

[08:27] <Corion> Having PhDs work on the base language and provide a kickass compiler for Perl6 might be better than having p6p :-)

[08:28] <Corion> ... but having too much lambda in our camel might be detrimental too :)))

[08:28] <shapr> The only worry with the Haskell community is that they'd help you write pugs, then interview everybody about their experience with domain specific languages, and debate the results using terms I've never heard before.

[08:29] <Corion> shapr: As long as I can run the results, who cares? :)

[08:29] <autrijus> Corion: I think p6 will need to move to p6 anyway. the question is

[08:29] <autrijus> is the p6 generated automagically from pugs source

[08:29] <autrijus> or is it rewritten from scratch.

[08:30] <autrijus> (or, 3rd route, generated by having GHC target parrot)

[08:30] <Corion> autrijus: I think it will (have to) start out from a generated source, Pugs/Haskell -> P6.

[08:30] <autrijus> that's what I think too.

[08:31] <Corion> autrijus: "rewritten from scratch" will not happen IMO, at least not quickly. You know Larrys saying "It's easier to port a shell than a shell script" :-)

[08:31] <autrijus> pmichaud is still planning to go that wroute though.

[08:31] <autrijus> last I heard

[08:31] <autrijus> Corion: that's a very acute observation

[08:31] <autrijus> and all too true :)

[08:31] * shapr agrees

[08:31] <Corion> autrijus: But nobody will want to hack in Parrot code. At least not something as complex as Perl. That's ugly close to still hacking in C.

[08:32] <autrijus> Corion: sure, but the "from scratch" idea is to write the p6c in p6

[08:32] <Corion> autrijus: I find myself often thinking whether it's better to port the script or the shell :)

[08:32] <autrijus> then use pugs to compile it

[08:32] <autrijus> then use itself to compile it

[08:32] <Corion> autrijus: Ah, yeah. I would write the "compiler"/"converter" in Perl6 of course. But that's because I know Perl6 :)

[08:32] <Corion> Or Perl5, which is close enough anyway.

[08:32] <autrijus> right.

[08:33] <autrijus> except writing a compiler in p5 is exercise in madness.

[08:33] <autrijus> p6 will be much better :)

[08:33] <Alias_> It's bad enough writing a tokenizer/lexer in P5

[08:33] <gaal> This is the Puissant Perl Compiler, version 6.0

[08:33] <Corion> autrijus: I've written a compiler in Turbo Pascal (4 and/or 6), so I know enough about it :-)

[08:34] <shapr> Writing parsers in Haskell is pleasantly simple.

[08:34] <Alias_> I like this idea of pluggable bits

[08:34] <Corion> gaal: Naah - this is the Perl Unlimited Golfcourse Supercute

[08:34] <Alias_> So what if we have p6h doing the P6->Parrot

[08:34] <Alias_> Someone else can write p6p6 later an do a better job.

[08:34] <Alias_> And if not... well then we welcome our new lambda overlords

[08:35] <Corion> Alias_: Parrot code is something not to be touched by human hands IMO. At least not for large scale development

[08:35] * shapr snickers

[08:35] <autrijus> it's quite pleasant as assembly goes, really.

[08:35] <Corion> lambda (overlords): overlords + 1

[08:35] <Alias_> "Perl 6 - Connecting Haskell with reality!"

[08:35] * shapr laughs

[08:36] <Corion> autrijus: Sure, but developing in (any kind of) assembly language, when you want multisubs, pattern matching on parameters etc. ?

[08:36] <autrijus> o/~ I've been taught assembler / in my second year of school / it's kinda like construction work / with a toothpick for a tool o/~

[08:36] <shapr> haha, where's that from?

[08:36] <Alias_> Because as far as I can tell, Haskell is a language only a PhD in Maths could love

[08:36] <Corion> autrijus: :)

[08:36] <autrijus> shapr: "eternal flame". you'll *love* it.

[08:36] <Corion> Alias_: I only have a master thesis in math, but I like it, true :)

[08:36] <shapr> I don't have any classes in either math or cs :-(

[08:36] <Alias_> I'm convinced people just don't naturally think in functional terms

[08:37] <autrijus> right. because of this Alan Turing guy.

[08:37] <Alias_> imperative yes, exceptions sure...

[08:37] <Corion> Alias_: Ah, you know - "The programmers in functional languages know the value of everything but the cost of nothing"

[08:37] <autrijus> wouldn't be like that if all we have is Church machines

[08:37] <Alias_> autrijus: I mean when you teach somebody to do something non-computery

[08:37] <shapr> I think that either programming itself is unnatural, or that functional is just is natural as imperative.

[08:37] <Alias_> autrijus: You provide lists of "do this, then do that" instructions

[08:37] <Corion> Alias_: I think in many ways. I think functional, imperative, but sometimes I also think in the logical way of Prolog.

[08:38] <Alias_> autrijus: And you say things like "If this happens, then do that"

[08:38] <autrijus> shapr: but the vocabulary is largely set by von neumann and turing 

[08:38] <autrijus> in the CS field anyway

[08:38] <Alias_> Corion: But you have a masters in Maths.... you have trained to think in brain-bendingly different ways

[08:38] <Corion> Alias_: No - not always. Functional is also very useful, or when reasoning about stuff, you never think of the symbol manipulations themselves.

[08:38] <autrijus> Alias_: I think as far as "naturalness" goes, make / prolog is perhaps most intuitive

[08:38] <autrijus> "to do this, I need to to these first"

[08:39] <Alias_> ugh

[08:39] <autrijus> that is also why SQL is popular.

[08:39] <autrijus> since you don't need to tell it how to do things.

[08:39] <Corion> like "father(X,Y) :- child(Y,X), male(X)"

[08:40] <Alias_> autrijus: That's not a good way to teach

[08:40] <Corion> also, for stuff that has no direction of data flow and is merely a collection of facts you can query (like Prolog and SQL), imperative and functional programming are ugly.

[08:40] <Alias_> autrijus: I'd argue that's more a case of "If you want to do Foo, check that Bar"

[08:40] <autrijus> Corion: I think you'll like Curry. I'm fascinated by Curry

[08:40] <autrijus> Alias_: sure

[08:40] <Alias_> Because Bar isn't done... they have to do Bar naturally... but they don't think that way

[08:40] <Corion> Alias_: But that's an incredibly convoluted way to declare things.

[08:40] <Alias_> Corion: That's how most people think

[08:40] <shapr> For me at least, I found functional programming mostly by myself while using Python. I started writing my Python code such that it had no side-effects, only one return point, and I realized I wanted to do more like that.

[08:40] <Alias_> Every given somebody directions?

[08:41] <Corion> Alias_: But that's not how I want to tell people stuff. Programming is like telling people stuff. And I want to tell them how it is and how it should be in the end, and not care about what they do in the middle.

[08:41] <Alias_> "Do this, do that, do the other. Keep going for a while. When you see foo, turn right

[08:41] <shapr> A friend of mine saw some of my Python code and said something like "You must like Haskell" and I said "What's that?"

[08:41] <Alias_> Corion: That doesn't really scale

[08:41] <autrijus> Corion: http://www.informatik.uni-kiel.de/~curry/examples/ # grep for "logic"

[08:42] <Corion> Alias_: "Here is the map. You are here. Go there. Goodbye."

[08:42] <Alias_> Corion: Big business and governments have procedure manuals and governance and so on

[08:42] <Alias_> Corion: Who knows what might happen if you did that. Most will go the right way, some will go the wrong way. Someone will get lost in the bush and need rescuing

[08:42] <autrijus> ...but they also have Laws and laws are logic programs.

[08:42] <Alias_> autrijus: There's a reason nobody understands the law either

[08:42] <Corion> Alias_: I know. I do these. That's why I hate hate hate that. Because they want the stuff described in little detail while even the people doing the stuff have implicit dependencies in their lists, and the implicit dependencies make sense.

[08:43] <autrijus> Alias_: you think people understand procedure manuals? :D

[08:43] <Corion> err - s!little detail!very detailed!

[08:43] <Alias_> autrijus: Yes, because they give simple steps. McDonalds would collapse if they couldn't :)

[08:43] <Corion> Procedure manuals are for the auditors and nobody else.

[08:43] <autrijus> oh. they follow them just fine.

[08:43] <autrijus> but _understand_.

[08:43] <Alias_> autrijus: Does your CPU need to understand?

[08:44] <autrijus> Alias_: we are coders not CPUs.

[08:44] <Corion> Alias_: I don't want to speak to my CPU

[08:44] <Alias_> Anyways

[08:44] <autrijus> as coders we need to understand what we're writing :)

[08:44] <Alias_> The closer to normal human ways a language is, the easier it is to understand, and thus write

[08:44] <autrijus> Alias_: I agree. 

[08:45] <autrijus> and normal human language is a mess

[08:45] * shapr laughs

[08:45] <Alias_> not language, "ways" of thinking

[08:45] <autrijus> mixed with imperative, logic, functional, data-driven ways.

[08:45] <shapr> We should use COBOL then.

[08:45] <autrijus> just see #perl6 log for the evidence :D

[08:45] <Alias_> shapr: I've actually been wondering if a COBOL -> Parrot compiler would be a good idea

[08:45] <Alias_> Might let big old things run on new gear

[08:45] <Alias_> COBOL with access to CPAN, imagine it!

[08:45] <autrijus> this "natural language is a mess, programming language needs to be like that" is raison d'etre of perl :)

[08:47] <autrijus> ...and that's also why english is more popular than lojban, and perl more popular than haskell.

[08:47] <shapr> xu do tavla mi fo la lojban

[08:47] <autrijus> (I do like lojban better, so that is not meant as an insult)

[08:47] <Corion> lojban ?

[08:47] <autrijus> Corion: the least broken of human languages

[08:48] <Alias_> s/broken/human/ ???

[08:48] <autrijus> # http://en.wikipedia.org/wiki/Lojban

[08:48] <Corion> autrijus: Ah. Something like Esperanto, then ...

[08:48] <shapr> mi djica lenu gunka prali mi

[08:48] <autrijus> no, esperanto is common lisp :D

[08:49] <Corion> autrijus: :)))

[08:49] <autrijus> from the wikipedia article about lojban: "It has no irregularities or ambiguities in spelling or grammar"

[08:49] <Corion> autrijus: I guess the only way to promote it would be to write a text adventure/MUD for it :)

[08:49] <shapr> lambdabot had lojban support for awhile.

[08:49] <Corion> ... but at least one could do NLP there then

[08:50] <Corion> Ah. I should write an irc bot in Perl6 :) But we don't have coroutines yet, do we ?

[08:50] <autrijus> oh wow. http://jbo.wikipedia.org/wiki/Ralju_papri

[08:50] <autrijus> Corion: we have async{}

[08:50] <autrijus> you want shared mvar?

[08:50] <autrijus> or do you just want lazy gather/take?

[08:51] <shapr> lojban is pretty simple, it's a small language with a simple and regular structure. I wouldn't say that it's unambiguous, but it does have some neat concepts to teach.

[08:51] <Alias_> So basically, Lojban has no evolutionary adaptiveness at all? :)

[08:51] <Corion> autrijus: Yep, but I want-need to do synchronized stuff, and async{} has no way of resynchronizing :)

[08:51] <Alias_> Like loglan?

[08:51] <autrijus> Corion: try writing some pseudocode, commit them in examples/, and we'll see about it :)

[08:51] <shapr> loglan was the original, but James Cooke Brown was the dictator of that community, so the lojban people split off into their own community.

[08:52] <autrijus> Corion: also try to find out how coro is meant to happen in p6.

[08:52] <Corion> autrijus: I have such pseudo code, I only need to convert it to p6 :)

[08:52] <autrijus> but if not specced, use Coro.pm as entry

[08:52] <shapr> loglan never really got anywhere, lojban really did.

[08:52] <autrijus> co	good. do so :)

[08:52] <Corion> autrijus: Ah, yeah. I'll orient myself at Coro to do so :)

[08:52] <Alias_> shapr: Still... the problem with designing a language is that you don't much chance to evolve. You just tend to die out

[08:53] <Alias_> I like Perl in that sense. Because you can do the big things different ways, you get a nice Darwin tick of approval

[08:53] <shapr> lojban had a static structure for five years so people could learn it, then they went evolutionary.

[08:53] <Alias_> So there are dialects?

[08:54] <shapr> James Cooke Brown started on loglan in ... the late 1950s or the late 1960s? I forget exactly when.

[08:55] <Alias_> Q: How many Lojbanists does it take to change a broken light bulb?

[08:55] <Alias_> A: Two: one to decide what to change it into, and one to figure out what kind of bulb emits broken light.

[08:55] * shapr snickers

[08:55] <shapr> Anyway, part of my motivation for learning Haskell was to write a compiler for lojban.

[08:56] <shapr> lojban has a yacc grammar.

[08:56] <Corion> shapr: Ewww. :)

[08:56] <Corion> shapr: But then, I got into Perl because I wanted to replace a shell script that created a website index with something faster. :)

[08:56] <shapr> In the meantime I've decided that's totally the wrong way to get a spoken programming language.

[08:56] <Corion> ... the reasons that drive us to go into the directions we do...

[08:57] <Corion> shapr: Ah, but you don't need a spoken programming language other than "Kill All Humans".

[08:57] <shapr> At this partcular junction, I'd rather write more on pugs.

[08:58] * shapr looks at the smoke tests

[08:58] <Alias_> Corion: And possibly, "You will be assimalated/recycled"

[08:59] *** Corion changes topic to: pugscode.org <<Overview Journal Logs>> | You have safely opened the door to many Perl 6 hackers. | pugs.kwiki.org | smoke: http://xrl.us/fmw2 | Mac OS X r1641 (426/4157) | Win2k r1678 (287/4185)

[08:59] <Alias_> I like the idea that while English has lasted 1000ish years, Loglan lasted, what, 30?

[08:59] <Corion> Oook

[09:00] <shapr> Oook? Oook!

[09:00] * Alias_ imagines lojban rap

[09:01] <shapr> I would argue that English hasn't really lasted that long. Can you read the original Chaucer?

[09:01] <shapr> Corion: http://www.dangermouse.net/esoteric/ook.html

[09:02] <Corion> shapr: See Acme::Ook at http://search.cpan.org/~jhi/Acme-Ook-0.10/lib/Acme/Ook.pm - written by Jarkko Hietaniemi, master librarian of Perl :)

[09:02] <Alias_> shapr: I can probably make a pretty good stab at it

[09:03] <autrijus> hrm, a metalanguage can last longer than its specific implementations.

[09:03] <Corion> autrijus: Lisp 4 life, dawg!

[09:03] <autrijus> exactly.

[09:03] <Alias_> It's all evolution

[09:04] <autrijus> I was thinking about the common Han ideograph interface

[09:04] <autrijus> all spoken language at its invention time (some 3000~4000 years ago) has died

[09:04] <autrijus> yet we can read all their books

[09:04] <Corion> ... a bit larger perspective than Lisp, true :)

[09:04] <shapr> hm, that's nifty

[09:04] <autrijus> that also enables me to read japanese books and vice versa

[09:05] <autrijus> despite that fact that the grammar structure and pronounciations are completely different.

[09:05] <Corion> BTW, on Win32, there is still a segfault ...

[09:05] <autrijus> lisp 4 life indeed

[09:05] <autrijus> (or *gasp* xml for life)

[09:05] <Corion> autrijus: ASCII 4 life ! :)

[09:05] <Corion> \o/

[09:06] <Alias_> autrijus: Yes, I find the separation of written and spoken languages to be quite novel

[09:06] <autrijus> $ grep -B 3 stay src/UTF8.lhs

[09:06] <autrijus>          / |  __  ___  __ __

[09:06] <autrijus>         / ^| //  /__/ // //

[09:06] <autrijus>        /.==| \\ //_  // //

[09:06] <autrijus> It's  //  || // \_/_//_//_  and it's here to stay!

[09:07] <clkao> orz

[09:07] <Alias_> autrijus: Although admittedly I understand far less of the details than I would like to

[09:07] <autrijus> Alias_: http://en.wikipedia.org/wiki/Hanzi

[09:07] <Alias_> autrijus: That invokes a time exception

[09:07] <Alias_> ENOTIME

[09:07] <autrijus> too bad.

[09:08] <shapr> So you think ascii is the next Han ideograph?

[09:08] <Alias_> autrijus: Also, I simply lack the overwhelmingly current use for the knowledge

[09:08] <Alias_> autrijus: I tend to be very driven by practical goals

[09:13] <autrijus> shapr: no, Unicode it is

[09:13] * autrijus forsees 64bit unicode for the entire sentient galaxy

[09:16] <Alias_> Yeah right, like you can encode the electrosmell communication of the low gravity gassbag cows of Zeta 14 in your primitive visual encoding medium

[09:17] <autrijus> say, would you prefer "AV.fetch" or "IArray.fetch" ?

[09:17] <autrijus> I wonder whether I should call them AV/HV/SV/CV/GV

[09:17] <autrijus> or IArray/IHash/IScalar/ICode/IHandle

[09:18] <Alias_> I prefer the legible version

[09:19] <autrijus> I'll make it so then

[09:19] <Alias_> How anyone manages to learn XS given those horrible names is a mystery to me

[09:32] <Corion> Alias_: It's an acquired taste I think :)

[09:34] <Corion> ... but then, I hack on XS like I hack on Pugs, except that XS gives me more segfaults.

[09:43] <autrijus> IType first cut landed

[09:43] <autrijus> dinner &

[10:24] *** castaway_ is now known as castaway

[10:46] <shapr> hiya Ovid 

[10:46] <Ovid> Hi there.

[10:46] <theorbtwo> Allo, Ovid.

[10:46] <shapr> Ovid: I think you're right about Rob. I continued the discussion in private email and the conclusion was the same.

[10:47] <Ovid> It's kind of sad.  He seems really bright, but he has some blocks.

[10:47] * castaway waves at Ovidius.

[10:47] <Ovid> Though I confess that was a little harsh with him.

[10:47] <Ovid> Hi castaway.

[10:48] <shapr> From later discussions with him, I think you weren't harsh.

[10:48] <castaway> (and the rest)

[10:49] <rindolf> Hi all!

[10:49] <shapr> hiya shlomi

[10:49] <rindolf> Can anyone explain to me what Perl 6 Class Roles are?

[10:49] <rindolf> shapr: hi.

[10:49] * shapr goes unicycling

[10:49] <elmex> interfaces?

[10:50] <rindolf> elmex: you mean like interfaces in Java.

[10:50] * rindolf opens the latest Apocalypse

[10:50] <elmex> rindolf: no

[10:50] <castaway> its the "can do" relationship.. 

[10:50] <elmex> rindolf: like interfaces in Perl6

[10:50] <castaway> (iirc)

[10:51] <metaperl> rindolf, chromatic's CPAN module has some good links on Role-based oop

[10:52] <Ovid> I have to confess, when I read through his "extremeperl" web site, I had a few good laughs.  My favorite was when he wrote "Do the simplest thing that could possibly work (DTSTTCPW) means you implement the first idea that comes to mind."

[10:52] <metaperl> the idea is to separate a superclass's roles as instance factory and re-use mechanism

[10:52] <metaperl> no, that makes sense to me Ovid

[10:52] <castaway> Hmm, no, thats just the simplest thing that occurs to you at the time.. ,)

[10:52] <metaperl> just dive in... top-down

[10:52] <Ovid> rindolf:  read Class::Traits and you'll understand.

[10:53] <Ovid> metaperl:  it makes no sense because it's wrong.

[10:53] <castaway> I often do that, and come back later with a better view of the project, and redo parts that suddenly make sense another way

[10:53] <osfameron_> the simplest thing that could possibly work isn't always the most obvious

[10:53] <metaperl> pastebot?

[10:53] <metaperl> paste?

[10:53] <osfameron_> for example, I saw the example of implement fn sqr()

[10:53] <osfameron_> for value 0 or 1, the simplest thing that would work is to return the input unchanged

[10:54] <osfameron_> it's only from 2+ that your tests fail and you'd have

[10:54] <osfameron_> to actually implement input*input

[10:54] <Ovid> Actually, the first thing that occurs to me when I face a problem is often something quite complex that covers various contigencies. I have to remind myself to keep things simple.

[10:54] <rindolf> Ovid: not Class::Roles ?

[10:54] <metaperl> Ovid, do you mind critiquing a question of mine to the template toolkit list? Here it is: http://rafb.net/paste/results/CXwCjP91.html

[10:54] <castaway> indeed, Ovid

[10:54] <Ovid> No.  Trying to remember, but "traits" was a term already used in Perl6, so they had to be renamed roles.

[10:56] <Ovid> metaperl:  first, a confession:  I came home a bit tipsy, so I'm tipsy now.  However, your question seems somewhat reasonable, but as far as I know, TT is not going to handle a stream.

[10:57] <metaperl> I hope to God it does... no... it needs to create a stream of XML output... Mason can do it...

[10:57] <metaperl> I realydont want to use Mason

[10:57] <Corion> Ovid: Being drunk on irc is common courtesy

[10:57] <Ovid> I've not tried to use TT that way.

[10:58] <Ovid> Corion:  yeah, I figured this wasn't too unusual :)

[10:58] <Ovid> metaperl:  I don't blame you.  I know Mason, but I prefer TT myself.

[10:59] <metaperl> Bricolage is written Mason right?

[10:59] <metaperl> Ovid, do you telelcommute to work at Kineticode? Arent you in AZ and isn't David Wheeler in San Francisco?

[11:00] <Ovid> No.  Mason is merely one of the "burners" Bricolage can write to.  We have a TT output channel, too.  And actually, I live in Portland and -- by an odd coincidence -- David a few blocks away.

[11:01] <Ovid> Correction, we have a TT "burner", too.

[11:01] <Ovid> Bleh.  My grammar sucks right now.

[11:03] <metaperl> Ovid, you know we have a CGI::Prototype mailing list? with GMANE feed

[11:04] <Ovid> Nope.  I just unsubscribed to a couple of lists because I'm on too many as is.

[11:05] <metaperl> hey you live in the same town as merlyn? wow

[11:06] <metaperl> wonder they haven't renamed in Randalville

[11:06] <Ovid> Yeah.  And just to up the ante, my roommate is Schwern :)

[11:07] <theorbtwo> Ah, but you are the most famous of them: Ovid, world-renowned crime-fighter.

[11:07] <Ovid> They're better at Perl, though.  That pays more in the long run.

[11:08] <metaperl> Ovid, are you serious? Are you a college student? and Schwern is too?

[11:08] <Ovid> Nope.  Not a college student.  Neither is Schwern. 

[11:09] <metaperl> you mean Schwern works at Kineticode too?

[11:09] <Ovid> No.  He's just my roommate.

[11:09] <Corion> metaperl: When two men share a room, it's not always that they work together.

[11:10] <castaway> (or do other things ,)

[11:10] <Corion> castaway: Whatever your dirty imagination suggests ;)

[11:11] * castaway attempts to look innocent.

[11:11] <castaway> Ovid, YAPC?

[11:11] <Ovid> No, no.  It's a two-bedroom apartment :)

[11:12] <Corion> Hmmm. Should Perl6 have eigenstates() ? How else do I get at all the instances of a junction?

[11:12] <Ovid> castaway:  Schwern might go.  I've got a tight schedule with my 20 year high school reunion and I'm debating if I should go.

[11:12] <theorbtwo> IIRC, .states, something like that.

[11:12] <Corion> theorbtwo: Ah

[11:13] <Corion> (except that object methods aren't in yet :) )

[11:13] <Corion> I'm thinking of creating a nice "real world" example by doing the "expand 1-10 to 1,2,3,4...,10" thing with junctions

[11:14] <Corion> That is, parse a glob spec into junctions, and then output the eigenstates of the junctions.

[11:15] <Corion> & # shopping

[11:31] <metaperl> http://www.metaperl.com/talks/p6-fp-slurpy/

[11:31] <metaperl> "Slurpy Sub Parms, Multi Subs and Perl 6 Functional Programming" --- my upcoming Perl Mongers presentation

[11:36] * metaperl hits the sack

[12:03] <kbrooks> hey

[12:03] <kbrooks> :)

[13:08] <stevan> autrijus: I refacted out another hack in CGI,.. to use the s:perl5:g//{}/

[13:08] <kbrooks> wtf

[13:08] <stevan> autrijus: I also looked at kv.t last night,.. you were talking about Pairs doing the [[a, 1]] stuff right? because it looked like hashes were coded correctly

[13:36] *** stevan changes topic to: pugscode.org <<Overview Journal Logs>> | You have safely opened the door to many Perl 6 hackers. | pugs.kwiki.org | smoke: http://xrl.us/fmw2 | Mac OS X r1682 (281/4184) | Win2k r1678 (287/4185)

[13:59] <autrijus> yo!

[13:59] <autrijus> stevan: I refactored your refactoring

[13:59] <autrijus> it now reads

[13:59] <autrijus>     $encoded ~~ s:perl5:g/([^-.\w ])/\%$dec2hex(ord($1))/;

[13:59] <autrijus> which imho is even more readable :)

[14:00] <autrijus> hrm, junction states is .values

[14:00] <autrijus> not .states

[14:00] * autrijus backlogeth

[14:01] <castaway> afternoon autrijus 

[14:01] <theorbtwo> Mornin, autrijus.

[14:02] <autrijus> heya castaway.

[14:02] <masak> hello autrijus

[14:02] <autrijus> I wonder if anyone will want reduce() implemented.

[14:02] * autrijus is still hacking on the IType stuff... looking good

[14:02] <autrijus> Corion: $junction.values works now iirc

[14:02] <theorbtwo> Oh, 6 hours later.  Evenin', autrijus.  Afternoon, Corion.

[14:02] <Corion> autrijus: Yay! :)

[14:02] <castaway> you were going to give theorbtwo a hand

[14:02] <theorbtwo> Who was?

[14:02] <Corion> Me ?

[14:02] <theorbtwo> And with what?

[14:03] * castaway pints at autrijus 

[14:03] <Corion> (I wouldn't know what and how)

[14:03] <Corion> but junction.values() working means I can/have to rework some of my tests!

[14:03] <Corion> Yay! :)

[14:04] <Corion> BTW, I haven't seen any "licensing" issue discussed here, but I assume all stuff is dual-licensed, corresponding to the dual nature of Pugs/P6, right? Or at least BSD licensed - I don't care about any other license :)

[14:04] <autrijus> so far yes.

[14:04] <autrijus> it's either Artistic2/GPL, or BSD.

[14:04] <theorbtwo> It's dual Artistic/GPL.

[14:05] <autrijus> and Artistic2 is compatible with Artistic1 as far as I understand

[14:05] <theorbtwo> It's the top half of README.

[14:05] <Corion> That's cool (all my code is BSD-licensed anyway, and I assume that all contributors to Perl handle it the same)

[14:05] * castaway read that as "top shelf" ;)

[14:05] <Corion> theorbtwo: Bah - who reads the README anyway? :))

[14:05] <castaway> people who want to know such things

[14:05] <autrijus> but with theorbtwo's work, we may or may not include hs-plugins which is LGPL.

[14:05] * theorbtwo , apparently.

[14:05] <castaway> oh! my ghc compile finished!

[14:05] <autrijus> but I think it's safer to list it as an optional external dependency.

[14:05] <castaway> (it only took about 8 hours

[14:06] <autrijus> (esp. before its building problems are resolved for more platforms)

[14:06] <Corion> autrijus: Ah, LGPL is OK too, or rather, OK for the moment. I saw what I think is a delayed April Fools' joke on /. regarding the GPLv3 that requires all GPL users to pay money to Stallman

[14:06] <autrijus> oh. we explicitly use GPLv2.

[14:06] <autrijus> none of the "or above" clause.

[14:06] <autrijus> so v3 will not apply.

[14:07] <Corion> autrijus++

[14:07] <autrijus> =)

[14:07] <Corion> (it would kill all secret use of open source software at my place for sure)

[14:08] <autrijus> I can see the use of that.

[14:08] <autrijus> but I don't see it suitable to Pugs.

[14:08] <theorbtwo> There's more stupid GPL3 reporting on /. today, BTW.

[14:08] <theorbtwo> I'm not sure how much is /. distorting and how much is the FSF being stupid, though.

[14:09] <autrijus> both at MAXINT.

[14:09] <theorbtwo> Quite possibly.

[14:09] <autrijus> oh btw, can someone check if asavige's slice test on p6c is made into t/?

[14:09] <Corion> theorbtwo: I still think it's an April Fools Joke, either 8 days late or 357 days early.

[14:09] <autrijus> I'm going to check in IType tonight, so the more tests for corner cases, the better

[14:10] <Corion> But I can see how it irks Stallman to see companies profiting from GPL software.

[14:10] <autrijus> (basically it's a rewrite of most things in AST.hs)

[14:10] <Odin-LAP> Uh. Is the GPLv3 out, or..?

[14:10] * autrijus praises a certain strong typing system for making complete rewrites trivial

[14:10] <Corion> Odin-LAP: No, only stupid FUD discussion of it on slashdot, News For Nerds, News that have reported elsewhere already.

[14:10] <Odin-LAP> (Slashdot, of course, is plain stupid.)

[14:10] <Odin-LAP> Aight.

[14:11] <autrijus> in concrete terms, it means that %ENV{FOO} = 'bar' will Actually Work.

[14:11] <Corion> autrijus++ # %ENV<FOO> = 'bar'

[14:11] * castaway slaps gentoo. (the subversion package cant be found by searching for "svn")

[14:11] <Corion> autrijus: now or tomorrow?

[14:11] <autrijus> <FOO>. right.

[14:11] <autrijus> Corion: tonight :)

[14:11] * autrijus is still haxx0ring

[14:11] <Corion> autrijus: "tonight" by you means in the next 8 hours, correct?

[14:11] <autrijus> 5 hours, more likely

[14:11] <autrijus> as it is past 10pm here

[14:12] * Corion should get XWorld or something like that, and combine it with an irc plugin so he has an easy overview over where everybody is :)

[14:12] <Corion> (together with, say, GeoIP :)

[14:12] <theorbtwo> Corion: Steal code from http://desert-island.dynodns.net/perl/pmplanet.pl

[14:13] <theorbtwo> You might want to change the projection, though, considering the sort of audiance we get around here.

[14:13] <Corion> theorbtwo: Yes :) It'll still need to be "fed" (via http requests?) from chatzilla and/or a bot I have to write, and I'd like the display to use OpenGL, but other than that, that's already it :)

[14:13] <Corion> #perl6 is All Pugs, All The Time. :)

[14:14] <theorbtwo> I'm not sure opengl is quite applicable.

[14:14] <Corion> BTW, I think I have worked out (on paper) how I'd like coroutines to behave, both in implementation and in syntax. But I need to do some sample code to see how well it works out :)

[14:15] <Corion> theorbtwo: How not? I've done OpenGL from Perl (5 though)

[14:15] * castaway slaps the CNN voice over person "King & Queen are just departing .. " stupid man

[14:15] <theorbtwo> To render to a PNG or JPEG?

[14:16] <Corion> theorbtwo: Ah, I just want it on my desktop :)

[14:16] <theorbtwo> Oh.

[14:16] <theorbtwo> xplanet is still good for you -- it uses GL when it renders to a display.

[14:16] * theorbtwo ponders again integrating pmplanet with google maps somehow.

[14:19] <theorbtwo> Hm, possibly make the name a link to the homenode on the LHS and google maps on the RHS.

[14:20] * theorbtwo ponders making a graphviz graph of the british royal family and donating it to wikipedia.

[14:23] <Corion> Hmm. $_.states() doesn't seem to work, or maybe I'm doing it wrong.

[14:23] <autrijus> .values

[14:23] <autrijus> not .states

[14:24] <Corion> D'oh

[14:24] <theorbtwo> Corion: Don't put too much trust in my memory of details.

[14:24] <Corion> And say($junction) doesn't quote the juncted stuff, if it's a string :)

[14:24] * theorbtwo can't detail what he ate for dinner.

[14:25] <Corion> $_.values() gives me pugs: Cannot cast into VSub: VList []

[14:25] <autrijus> quote?

[14:25] <autrijus> pugs> say(any(1,2,3).values)

[14:25] <autrijus> 123

[14:25] <autrijus> oh bah. parsefail

[14:25] <autrijus> fixing

[14:25] <autrijus> (.values different from .values())

[14:26] <Corion> say(any('-foo', '-e1')) gives unquoted strings

[14:26] <autrijus> why should it quote?

[14:26] <autrijus> am I missing something/

[14:26] <autrijus> ?

[14:27] <Corion> autrijus: D'oh - I was thinking like Data::Dumper, where I should have been thinking like print $/;

[14:28] <Corion> ... I should shut up and code instead

[14:28] <autark-jp> my $b = any(1..10).values(); $b[9]

[14:28] <autark-jp> what kind of variable is $b?

[14:29] <autrijus> data dumper is .perl

[14:30] <autrijus> autark-jp: it is currently a variable holding a list

[14:30] <autrijus> it will soon become a Scalar variable holding a reference to an array.

[14:30] <autrijus> or rather, Array.

[14:32] <autark-jp> ah

[14:32] <Corion> Bah. my @examples = map { $_ } (@ex); # doesn't work

[14:32] <Corion> for @ex -> $e { push @examples, $e; }; # works

[14:32] <autrijus> right. that's a known parsefail.

[14:32] <autrijus> you want either

[14:32] <autrijus> my @exa = @ex.map:{$_}

[14:32] <autrijus> or

[14:33] <autrijus> my @exa = map {$_}, @ex;

[14:33] <autrijus> sorry for the inconvenience.

[14:37] <Corion> Oh. And joined junctions seem to need recursive unwrapping - is that by design ? pugs -e "my @e=map{$_.values()},(any<a b>~','~any<c d>); say +@e" # gives 2 ?instead of? 4

[14:39] <autrijus>  say((any<a b>) ~ (any<c d>))

[14:39] <autrijus> is 4 values

[14:40] <autrijus> I know

[14:40] <autrijus> any<a b>~','

[14:40] <autrijus> is parsed as 

[14:40] <autrijus> any(<a b>~',')

[14:40] <autrijus> which is I think correct.

[14:40] <autrijus> so you need to be less cute and use

[14:40] <autrijus> any(<a b>)

[14:51] <metaperl> oooooooooooooooooooooooooooooooooos

[14:51] <theorbtwo> That's some very open source.

[14:52] <metaperl> lol

[14:52] <metaperl> it's very odd

[14:52] <metaperl> my laptop keyboard sticks on the o key when the machine comes out of sleep and on reboot

[14:52] <theorbtwo> odd.

[14:52] <metaperl> all the time... and I dont put down the monitor on the keypad (no physical pressure whatsoever)

[14:53] <autrijus> yay!

[14:53] <metaperl> here are the slides to my upcoming perl mongers talk on p6 slurpy list parms: http://www.metaperl.com/talks/p6-fp-slurpy/

[14:53] <autrijus> * `map { ... } @list` now correctly parsed.

[14:53] <autrijus> r1687, enjoy.

[14:53] <theorbtwo> Cool, autrijus.

[14:54] <autrijus> metaperl: "When are slurpy list parameters useful?"

[14:54] <Corion> autrijus: Gah. Just when I commit my changed tests, you make me update them again ? :))))

[14:54] <autrijus> metaperl: "everybody in perl65 uses a slurpy *@_"

[14:54] <autrijus> Corion: that's called Progress

[14:54] <cognominal> pugs> print ord '\n'

[14:54] <cognominal> 92bool::true

[14:54] <autrijus> s/perl65/perl5/

[14:54] <cognominal> this is odd

[14:54] <autrijus> Corion: not so; it prints 92, then returns true

[14:54] <cognominal> or do I miss something?

[14:54] <autrijus> err

[14:54] <autrijus> s/corion/cogniminal/

[14:54] <Corion> \\ has the ord 92

[14:54] <Corion> :)

[14:55] <autrijus> right.

[14:55] <autrijus> pugs> ord "\n"

[14:55] <autrijus> 10

[14:55] <metaperl> well, that wont be the way to use it in p6....

[14:55] <autrijus> so it seems that you are saying

[14:55] <autrijus> "When are slurpy _scalar_ parameters useful?"

[14:55] <autrijus> in which case I largely agree.

[14:56] <cognominal> oops. thx. I deal with too many languages. I am terminally confused

[14:56] <metaperl> ah.... ok

[14:56] <autrijus> I wonder which language allows you to write '\n' :)

[14:56] * Corion refrains from running perl -i.bak -pe "s!(?<map\{.*?}),!!" :)

[14:56] <autrijus> why not? :D

[14:56] <theorbtwo> '\n' would work in C, and probably Haskell.

[14:57] <Odin-LAP> Single quotes don't interpolate in Perl, of course.

[14:57] <theorbtwo> (Of course, it's not the same as "\n" in either of those languages.)

[14:57] <Odin-LAP> Which is the problem here. :D

[14:57] <autrijus> oh. right.

[14:58] <Corion> autrijus: Because I think that other (test) authors should do it themselves, to see what new features are available.

[14:58] <Corion> :)

[14:58] <Corion> Hmm. Maybe I should still be evil :)

[15:09] <ninereasons> autrijus, didn't I read somewhere that  `map { ... } @list` will now be written as `map { ... }, @list` #(comma) ?

[15:09] <autrijus> ninereasons: no.

[15:09] <autrijus> map 123, @list;

[15:09] <autrijus> will now be written as

[15:10] <autrijus> map {123} @list

[15:10] <autrijus> or

[15:10] <autrijus> map {123}, @list;

[15:10] <ninereasons> ah..

[15:10] <autrijus> i.e. autothunking is verboten

[15:10] <autrijus> but the comma is still optional after block

[15:10] <theorbtwo> s/still/now/, I think.

[15:10] <ninereasons> that was it.

[15:11] <autrijus> theorbtwo: well, in perl5 it is optional.

[15:11] <autrijus> as long as you have & in your prototype.

[15:11] <theorbtwo> No, in perl 5 there are two forms of map, one with a comma, one without.

[15:11] <theorbtwo> In perl 6, there is one form, with an optional comma.

[15:11] <autrijus> you are correct.

[15:11] <autrijus> hrm.

[15:11] <autrijus> map -> $x { $x } 1,2,3;

[15:11] <autrijus> this is okay (and works in pugs)

[15:12] <autrijus> what about a proper sub?

[15:12] <autrijus> map sub ($x) { $x } 1,2,3;

[15:12] <ninereasons> that last one is very perlish looking

[15:12] <theorbtwo> map wasn't fully unified with other functions with a prototype beginning &.

[15:12] <autrijus> it now works but should it?

[15:12] <autrijus> i.e. should commaless blocks extend to subs?

[15:12] <theorbtwo> AFAIK, sub ($x) {$x} should work everwhere -> $x {$x} does.

[15:12] <autrijus> or just pointy and bare?

[15:12] <autrijus> alright. I'll keep it so.

[15:13] <cognominal> pugs> loop { print "."; }

[15:13] <cognominal> pugs: src/Eval.hs:292:12-41: Irrefutable pattern failed for pattern [pre, cond, post, body]

[15:14] <autrijus> ooh irrefutable.

[15:14] * autrijus fixes

[15:14] <theorbtwo> .oO(I've got your irrefutable /right here/!  To the moon, baby, to the moon!)

[15:15] * cognominal needs to learn svk or subversion. so far he has pulled plugs using wget -np -mk

[15:15] <castaway> plugs? ;)

[15:15] <cognominal> pugs!

[15:15] <Corion> cognominal: :) svn up http://svn.openfoundry.org/pugs

[15:16] <theorbtwo> plugs is something else (under CVS, not SVK).

[15:16] <Corion> Or whatever the first incantation is. Possibly svn co http://svn.openfoundry.org/pugs/ ~/pugs/

[15:16] <cognominal> I hope by the end of the we, I will have a pentomino solver coded in perl6

[15:16] <theorbtwo> svn co http://svn.openfoundry.org/pugs/

[15:16] <cognominal> pentoninos are my hello world.

[15:17] <Odin-LAP> Will put it in a directory pugs/ under the current one, IIRC?

[15:17] <theorbtwo> Correct, Odin.

[15:17] <cognominal> even won a TPJ obfuscation contest with a pentomino solver

[15:17] * theorbtwo wonders what the LAP is for.

[15:17] <Odin-LAP> Laptop.

[15:17] <theorbtwo> Ah.

[15:17] <castaway> original.

[15:18] <Odin-LAP> castaway: So very, don't you think? ;p

[15:18] <autrijus> cognominal: loop{...} fixed. thx

[15:19] <cognominal> can you give me direction on how to understand Parser.hs. I am familiar with Parse::Yapp and Parse::RecDescent

[15:20] <autrijus> sure

[15:20] <autrijus> read http://www.cs.uu.nl/~daan/parsec.html

[15:20] <autrijus> download that 2.0

[15:20] <autrijus> read the examples in it

[15:21] <cognominal> btw I am reading about monads right now

[15:21] <cognominal> thx

[15:21] <autrijus> you don't quite need to grok monads to use parsec.

[15:21] <metaperl> actually the examples are flawed

[15:21] <autrijus> parsec is da bomb :)

[15:21] <metaperl> they import Parsec

[15:21] <metaperl> but for ghc you need to import Text.Parser.Combinators or something like that

[15:22] <cognominal> so you adpated parsec for pugs?

[15:22] <metaperl> I emailed daan about that and he said he would look at it but he pointed me to the fact that the examples are part of GHC as well

[15:22] <autrijus> part of GHC srcdist.

[15:22] <metaperl> no, Parsec ships with GHC. and Pugs is written using GHC

[15:22] <autrijus> not part of GHC bindist

[15:22] <cognominal> I see a mention in Rule.hs

[15:22] <autrijus> yes, I adapted parsec for pugs.

[15:22] <autrijus> mainly to add things that p6 needs but parsec does not have in Expr

[15:22] <autrijus> as well as prepare for making it into Eval monad.

[15:23] <autrijus> i.e. evaluating-while-parsing

[15:23] <autrijus> or, in fancier term

[15:23] <cognominal> I like very much that the eval of pugs does not close of my lexicals

[15:23] <autrijus> generating-parrot-assembly-and-loading-them-while-parsing

[15:23] <cognominal> I always hated perldb for that

[15:23] <metaperl> oh, you did? adapted or adopted? oh you _did_ adapt it

[15:23] <autrijus> thank lightstep for that.

[15:23] <cognominal> I even wrote an RGC

[15:23] <cognominal> I mean a RFC

[15:24] <autrijus> he tweaked the evaluator

[15:24] <autrijus> I think I can derive a continuation instance from that

[15:24] <autrijus> so the next line picks up the last line's continuation

[15:24] <autrijus> including the lexical pad etc.

[15:25] <autrijus> bbiab :)

[16:17] <metaperl> do any of you know of any low-cost hosting solutions

[16:19] <elmex> are continuations fast?

[16:20] <metaperl> elmex, you might get more feedback on #haskell

[16:21] <elmex> thats not a haskell thingie ;) thats a generic thing i guess

[16:21] <metaperl> more people know about continuations there than here

[16:22] <elmex> ;)

[16:23] <elmex> but what is perl going to do with them?

[16:23] <elmex> s/erl/erl 6/

[16:25] <Corion> elmex: Write interesting webservers, for example, and cooperative multithreading

[16:26] <Corion> Hah. +10 unexpected successes. Whatever magic autrijus did :) Time to promote some tests it seems ;)

[16:31] <elmex> muha

[16:34] <Corion> Oh. The +10 unexpected successes are due to me botching a test :(

[17:01] <autrijus> rehi.

[17:02] <autrijus> continuation is basically a pointer modification and a goto.

[17:02] <autrijus> so, extremely fast.

[17:05] <ninereasons> autrijus, did you note from the logs that "say $_" doesn't quite work, yet?

[17:05] <autrijus> no.

[17:05] <ninereasons> "say" # implicit $_, rather

[17:05] <autrijus> how so?

[17:05] <autrijus> pugs> $_ = 3; say

[17:05] <autrijus> 3

[17:05] <ninereasons> see t/var/default_scalar.t

[17:06] <autrijus> oh. yeah.

[17:08] <ninereasons> I wonder whether `for @arr { say "$^f $^b" } will turn out to be more popular than `for @arr -> $f,$b { say "$f $b"}`

[17:10] <metaperl> ninereasons: that first expression confuses me

[17:10] <metaperl> what are the "^"s doing?

[17:10] <rgs> implicit parameter binding

[17:10] <ninereasons> they are sort of like autovivified scalars

[17:11] <rgs> like $a and $b in perl 5's sort

[17:11] <metaperl> are you slurping the elements of @arr in by 2s?

[17:11] <ninereasons> yes

[17:11] <ninereasons> it's almost identical to the second one

[17:11] <ninereasons> "almost"

[17:11] <metaperl> could you slurp by 3s by adding anther $^variable?

[17:11] <metaperl> which SYNOPSIS discusses this?

[17:12] <ninereasons> but you'll end up with an error, if the array is "even"

[17:12] <metaperl> Perl5 has most of Perl 6 in modules with better edge cases

[17:12] <metaperl> List::MOreUtils::natatime() does that

[17:12] <metaperl> and handles uneven amounts gracefully

[17:13] <ninereasons> so, perhaps pugs should too

[17:13] <ninereasons> ?

[17:14] * metaperl goes sunbathing

[17:19] <metaperl> too cold for sunbathing, back in I go!

[17:21] <autrijus> IType added.

[17:21] <autrijus> now, do I commit or not

[17:21] * autrijus "make test" just to make sure

[17:26] <cognominal> pugs> for  qw( 1 2 3 )  { next if $_ == 2;  print $_; }

[17:26] <cognominal> *** Error: No compatible subroutine found: &if

[17:26] <cognominal>   at App "&if" (App "&infix:==" (Var "$_", 

[17:26] <cognominal>                                  2))

[17:27] <cognominal> I think this is correct perl6

[17:27] <autrijus> it is. nullary parsing is borken.

[17:27] <autrijus> need to write next()

[17:28] <cognominal> ok for me

[17:28] <ninereasons>  my @z = ( [ 'a1', 'a2' ], [ 'b1', 'b2', 'b3' ]);

[17:28] <ninereasons> my %a = map { @^foo[0] => @^foo } @z ;

[17:28] <ninereasons> cool

[17:29] <ninereasons> {'a1' => ('a1', 'a2'), 'b1' => ('b1', 'b2', 'b3')}

[17:29] <autrijus> I've done ITypes refactoring

[17:29] <autrijus> but not the casts between them

[17:29] <autrijus> hence, 100% of the tests are broken.

[17:30] <autrijus> I wonder if I should commit ;)

[17:30] * autrijus ponders deliberately killing the tree

[17:30] <obra> heh

[17:30] <obra> is this before or after 6.2.0?

[17:30] <autrijus> this is JustInTime for 6.2.0.

[17:30] <autrijus> basically to get the reference / container / tieable semantic Just Right.

[17:31] <autrijus> we were using a rubyish "everything is a scalar" semantic

[17:31] <autrijus> turns out to not cut it.

[17:31] <obra> heh

[17:31] <autrijus> so I went back and emulated fulle perltie.

[17:32] <autrijus> oh well. guess I'll local branch.

[17:32] <obra> server branch?

[17:32] <obra> or are speculative branches "bad" in pugsland?

[17:32] <autrijus> not seeing a point... it'll be completed tomorrow anyway

[17:32] <autrijus> it is good for long-term stuff, which this is noe

[17:32] <autrijus> s/noe/not/

[17:32] * obra was wondering if it would get completed overnight if it was on the server ;)

[17:33] <obra> eep! I almost autrijused my laptop with a full cup of iced latte

[17:33] <autrijus> eep!

[17:33] <autrijus> mmm decisions decisions

[17:34] <autrijus> nah. local branch it is.

[17:34] <autrijus> # http://autrijus.org/tmp/itype.patch  -- full patch in case anyone want to take a peek

[17:35] <cognominal> arf. I wrote =~  insteand of ~~

[17:35] <cognominal> wonders what =~ means in perl6

[17:35] <ninereasons> whatever you want it to mean, I think

[17:35] <autrijus> pugs> $_ =~ 4; $_

[17:35] <autrijus> '4'

[17:36] <autrijus> (parsed as = and ~)

[17:36] <ninereasons> "scalar context"

[17:36] <ninereasons> ?

[17:36] <autrijus> "string context"

[17:37] <cognominal> boy, my brain is a mishmash of ocaml, perl5, perl6 and haskell with some sml good mesure

[17:37] <ninereasons> sounds like a tasty mishmash

[17:37] <autrijus> clearly you need some Curry too

[17:37] <cognominal> tasty but mishmash nevertheless

[17:38] <cognominal> does pugs   arlready support currying?

[17:38] <autrijus> sure does.

[17:38] <autrijus> .assuming

[17:39] <autrijus> hrm. a "tie" primitive is now trivial.

[17:39] <autrijus> what does larry say about tie again?

[17:39] <cognominal> boy, I am making a presentation titled "experimental perl6" in two weeks. I could almost $title ~~ s/experimental//

[17:40] <autrijus> "But Perl 6 variables are tied directly at declaration time, and for performance reasons may not be tied with a run-time "tie" statement unless the variable is explicitly declared with an implementation type that does the "Tieable" role."

[17:40] <autrijus> english speakers: does this "may not be" mean it is against the spec to make all vars tieable?

[17:40] <ninereasons> sigh.  larry sometimes ties my brain in a knot

[17:40] <obra>    

[17:40] <obra>        Appending "is SomeType" to a variable or parameter is the Perl 6 equivalent of Perl 5's

[17:40] <obra>        "tie" mechanism, except that the tying is part of the declaration. For example:

[17:41] <Corion> (not an english speaker): Yes. "May not" means "it is not allowed/possible".

[17:41] <autrijus> obra: right, that's compile time tie

[17:41] <obra> ah

[17:41] <autrijus> alright then. not big loss. I'll just implement "is Tieable" too.

[17:41] <autrijus> ;)

[17:41] * autrijus loves runtime tie()ing.

[17:43] * obra would love a version of tie that's a pass-through by default

[17:43] <autrijus> what's the good thing about that?

[17:43] <obra> it's more like attach

[17:43] <autrijus> oh. hooks.

[17:43] <autrijus> yeah. that makes sense.

[17:43] <obra> so. think about the filehandle tieing issue we were talking about for H::S::Recorder

[17:43] <obra> yeah

[17:44] <autrijus> although it's done in p5 already as Tie::Handle

[17:44] <autrijus> Tie::Array etc

[17:44] <autrijus> just subclass it and throw things to SUPER

[17:44] <cognominal> sub japh (Str $lang) { say "just another $lang hacker"; } perl6Japh() # soooo cool

[17:44] <cognominal> oops

[17:44] * autrijus waits for a version that actually runs :)

[17:44] <obra> huh.

[17:45] <cognominal> sub japh (Str $lang) { say "just another $lang hacker"; }; &perl6Japh := &japh.assuming("Perl6");  perl6Japh()

[17:45] <Ovid> autrijus: has anyone started pleac yet?

[17:45] <autrijus> Ovid: no. want to take a stab?

[17:46] <autrijus> cognominal: nice!

[17:46] <Ovid> Yeah.  I already have a directory structure fleshed out and two example programs.  I've commented out the examples that cause pugs to fail.  I was going to add a README and then ask if I could check it in.

[17:46] <autrijus> the final () is redundant

[17:46] <autrijus> Ovid: go ahead and check in under examples/pleac/

[17:46] <Ovid> How handy.  That's where I put it :)

[17:48] <Corion> Ovid: Consider adding your examples to t/pugsrun/*-uppercase-c.t , so they get checked if they still compile :)

[17:49] <Ovid> Oh, I'll take a look at that.

[17:49] <Ovid> I'll have to do that later, though.  I have to run for a couple of hours and I want to get this commit out the door.

[17:55] <Ovid> Done.  I've got to run.  See ya, folks!

[17:57] <autrijus> thanks ovid!

[18:07] <ninereasons> what is 'pleac' ?

[18:07] <autrijus> pleac.sf.net

[18:07] <autrijus> see readme

[18:08] <ninereasons> thanks. (making note to regularly review readmes)

[18:11] <mjh> is the intention with pleac to port them into whatever the simplest perl6 is that pugs can currently run, or whatever the perl6 spec allows?

[18:12] <autrijus> mjh: the former

[18:12] <mjh> cool :)

[18:12] <autrijus> but feel free to do the latter too

[18:12] <autrijus> and mark them with # comments

[18:12] <autrijus> that's what Ovid did

[18:12] <autrijus> and I think that's fine.

[18:12] * mjh takes a look at ovid's commit

[18:16] <ninereasons> that would be an interesting structure for a test suite ;  

[18:16] <ninereasons> instant appeal to perl5 people

[18:23] <mjh> (how much does svn.perl.org/perl6/pugs lag behind svn.openfoundry.org/pugs, out of interest?)

[18:24] <autrijus> oops. syncer restarted

[18:24] <mjh> lol

[18:24] <autrijus> they are supposed to be synced per minute.

[18:24] * mjh nods.

[18:24] <ninereasons> it's weird to have different subversion version numbers from mirrored sources.  is it still like that?

[18:25] <autrijus> yeah. can't quite help

[18:25] <autrijus> openfoundry is the master repos.

[18:25] <autrijus> svn.perl.org is mainly just for redundancy and backup

[18:26] <ninereasons> it doesn't matter much, because openfoundry is fast

[18:26] <autrijus> good to hear that.

[18:26] <ninereasons> but I wondered why svn wasn't used to synch the to repositories.  can't that be done?

[18:27] <autrijus> mm?

[18:27] <autrijus> we sync them using svk and SVN::Mirror

[18:27] <ninereasons> s/to/two/

[18:27] <autrijus> it's svn underneath

[18:27] <autrijus> we can arguably put a per-commit hook on openfoundry side

[18:27] <autrijus> to automagically push to svn.perl.org

[18:27] <autrijus> but ENOTUITS

[18:30] <obra> ninereasons: the issue is that svn version numbers are per repository, not globally unique, no?

[18:30] <ninereasons> I guess so.

[18:30] <obra> and for that, someone needs to come up with some very clever new numbering system

[18:30] <ninereasons> yes

[18:31] <obra> or svk needs to be able to tag a copy as "r1234@master" when the copy is made. which it can sort of do now, but only in the commit log

[18:32] <autrijus> it's also in the revprop.

[18:32] <autrijus> it's just not displayed.

[18:32] <mjh> svk's a smarter alternative client to the svn client, right?

[18:33] <ninereasons> a perlish svn ?

[18:33] <autrijus> right.

[18:33] <mjh> (or does it also use a different server, but backed with the svn db format?)

[18:33] <autrijus> it's a client to svn, but also to cvs and p4

[18:33] <hcchien> a client but not only  for svn

[18:33] <autrijus> it's a bitkeeper-ish VCS.

[18:34] <mjh> very cool

[18:34] <obra> svk uses svn as a substrate, but also can read from p4, bk, cvs, svn and write to svn

[18:34] <autrijus> :) I owe much of my productivity on Pugs to svk.

[18:36] <ninereasons> How will we say __DATA__ in perl 6 ? 

[18:36] <ninereasons> #" (Frees up the = twigil for %= POD doc structures and old __DATA__ stream, ... "

[18:36] <autrijus> =for DATA

[18:36] <autrijus> =begin DATA

[18:36] <autrijus> =begin END

[18:36] <ninereasons> =end DATA ?

[18:36] <autrijus> I thought it's endless

[18:36] <autrijus> not sure.

[18:37] <ninereasons> having an end would make for some interesting self-parsing possibilities, I would think

[18:37] <autrijus> sure.

[18:39] <Corion> DATA is endless

[18:39] <Corion> (IMO)

[18:39] <Corion> The Perl parser just stops reading the file.

[18:40] <Corion> seek DATA, 0, 0 gets you your source code

[18:40] <ninereasons> is the end optional, or illegal?

[18:40] <Corion> ninereasons: You will end up with a line "=end DATA" in your $DATA filehandle :)

[18:40] <theorbtwo> I thought the =beginning of the END was forever, but the =beginning of the DATA was stoppable.

[18:40] <theorbtwo> (I thought that was one reason for changing the syntax.)

[18:42] <theorbtwo> (Note the "I thought" -- I do not have a great memory for such things.)

[18:42] <ninereasons> so DATA and END will continue to be synonyms, unless theorbtwo's memory serves?

[18:43] <ninereasons> I never much liked saying <DATA> to read __END__

[18:45] <autrijus> journal up.

[18:45] <autrijus> see you tomorrow. :-) *wave* &

[18:45] <ninereasons> big day, looking forward to reading your journ

[18:46] <theorbtwo> Oh.  See you tommorow.

[18:47] <Corion> Oh. One of the t/statements/given tests unexpectedly succeeds!

[18:47] * theorbtwo wonders who "jmm" in the list of people going to YAPC::NA is.

[18:48] <Corion> theorbtwo: J McMahon?

[18:48] <Corion> (that's the only one that immediately springs to mind)

[18:48] <Corion> (with these initials, I mean, to my mind)

[18:48] <theorbtwo> Oh, that's possible.

[18:48] * theorbtwo has those initials, but I'm listed sepperately.

[18:49] <theorbtwo> James Michael Mastros.

[18:50] <Corion> theorbtwo: Ah - I didn't connect you with those, weirdly enough :)

[19:18] * mjh grabs some toast and looks more closely at pleac

[19:40] <mjh> how many of pugs' tests should fail (roughly) at make test?

[19:40] <mjh> (on svn head)

[19:40] <castaway> none?

[19:40] <mjh> guess i have a problem with my ghc, then

[19:40] <theorbtwo> mjh, it's normal for about 5% failure.

[19:41] <theorbtwo> If you look at the end of the /topic, you'll see mildly up-to-date numbers.

[19:41] <theorbtwo> (Don't confuse the newbies, love.)

[19:42] <Odin-LAP> Isn't that the chief source of entertainment for "old-timers"?

[19:42] <castaway> well, none of the *should* fail, but some do

[19:42] <castaway> :)

[19:42] <mjh> theorbtwo: ah, okay; thanks :)

[19:42] * castaway isnt old!

[19:42] <Odin-LAP> Hm. Compared to me, you most likely are. >:)

[19:43] <Odin-LAP> But I wasn't referring to age. :p

[19:43] * castaway shudders at the thought

[19:43] <castaway> neither was I ;)

[19:43] <castaway> I'm just a useless lurker

[19:43] <theorbtwo> Aww, you aren't useless, love.

[19:44] <Odin-LAP> Ah, but that's irrelevant. You've been here a while, haven't you? ;>

[19:44] <castaway> I dunno

[19:44] * castaway is mostly stalking

[19:44] * castaway huggles theorbtwo.

[19:44] * castaway declares self moral officer ,)

[19:45] <mjh> hrm ;)

[19:45] * Odin-LAP hands theorbtwo an assault rifle and several crates of ammunition ... "for self-defense".

[19:46] <castaway> heh

[19:47] <Odin-LAP> But then again, this is a perl channel. It's not like there's a lot of sanity around.

[19:49] * mjh goes to order takeaway whilst waiting for the remainder of the tests to pass^wfail

[19:58] <ninereasons> "makes hard things possible"

[19:58] <ninereasons> pugs> my @z = (['timers',1..3],['factor','a'.. 'c']) ;

[19:58] <ninereasons> pugs> my %hash = map -> @a { @a[0] => @a[1..Inf] } @z;

[19:59] <ninereasons> pugs> %hash<factor>[0][0] # ('a')

[19:59] <ninereasons> pugs> %hash.perl

[19:59] <ninereasons> '((\'factor\' => (\'a\', \'b\', \'c\')), (\'timers\' => (1, 2, 3)))'

[20:00] <ninereasons> it is so cool to be able to do that so easily

[20:08] <ninereasons> it's been years since I've had so much fun with perl (and I've only been in perl for a few years). 

[20:09] <ninereasons> %committers{'all'}++ && say $bye

[20:10] <castaway> ;)

[20:13] <Corion_> %committers<all> :)

[20:13] <Juerd> That's @committers>>++

[20:20] <cognominal> btw , what is the shortest way to iterate on a 2 dimensional array?

[20:24] <Corion_> Are there any objections against me using the "-P" command line option to make it the big brother of "-p" ? It would become "while ($_ = =<>) { ...; say }". Or should "-p" use say() ?

[20:24] <Corion_> (if -p uses say(), we need chomping on the input. Otherwise, pugs -pe1 is not cat anymore)

[20:28] <theorbtwo> I'd say -p should autochomp and say, but you might want to ask p6l.

[20:28] <theorbtwo> I was under the impression that autochomping was the norm.

[20:28] <Corion_> theorbtwo: Ah - I'll go with your impression then :)

[20:33] <Ovid> So, in working on the Perl6 Cookbook (examples/pleac), I'm coming across plenty of cases where Pugs isn't quite working, yet.  Should I add those to the tests?  How is this being managed?

[20:33] <Corion_> Ovid: If they are hard parsefails, put them below pugsbugs, otherwise write (maybe todo_) tests for the features and put them where appropriate. Also, keep an eye on the roadmap as to when features are supposed to appear :)

[20:35] <Ovid> OK.  Thanks Corion.

[20:35] <Ovid> What about things that aren't causing the parse to fail, but throw an error and halt the program?  I don't want to prevent the rests of the tests from running, do I?

[20:36] <Corion_> Ovid: I write my tests into their own (smallish) separate test files

[20:36] <theorbtwo> I think that's a good idea, myself.

[20:41] * Corion_ commits autochomping for -p and -n (and "say" for -p)

[20:47] *** Corion_ is now known as Corion

[20:47] <Corion> brb

[20:52] <Corion> Win32 Pugs segfaults on pugs -e "say NaN**NaN == NaN" - I suspect a memory overflow or something, as it takes about 5 seconds before the program gets terminated

[20:54] <Corion> ... it doesn't segfault on pugs -e "my$a= NaN**NaN == NaN"; but does so on pugs -e "my$a= NaN**NaN == NaN; say $a"

[20:54] <elmex> this async { } stuff is a thread? or a coroutine?

[20:54] <Corion> elmex: A userspace thread

[20:54] <elmex> uhg

[20:54] <Corion> ... but can be an OS thread too.

[20:55] <elmex> Corion: is that p6 spec? or will that be a coroutine?

[20:55] <Corion> elmex: But relatively safe. Calls to external routines, or system() block all threads.

[20:55] <Corion> elmex: We simply stole what Haskell offers. The test is under t/unspecced, because it is.

[20:56] <theorbtwo> Corion -- I get a segfault on just pugs -e 'say NaN**NaN'

[20:56] <elmex> well, will async {} always create a thread? or will that be a coroutine in future/

[20:56] <Corion> theorbtwo: Yes, me too

[20:56] <elmex> ?

[20:56] <Corion> elmex: Dunno. Read the specs, if there are any.

[20:56] <theorbtwo> Corion: under linux, so it's not win32-specific.  make a test?

[20:57] <Corion> theorbtwo: Yep, I was about to name it "win32", but now it'll just go, hmm - under Pugsbugs ? Or Haskellbugs ?

[20:57] <Corion> I suspect it's a problem in GHC (but wouldn't know how to check that)

[20:57] * theorbtwo sighs, wonders WTF to do with this hs-plugins problem.

[20:59] <elmex> who wrote examples/network/http-server.p6 ?

[21:00] <Corion> elmex: Dunno. Look in the committer log or his journal. Maybe autrijus did

[21:00] <theorbtwo> Hm, from the GHCI prompt, (0/0)**(0/0) works (and quickly).

[21:00] <theorbtwo> svn blame shows everything being by autrijus r1431.

[21:01] <elmex> where are specs that define what async does??

[21:01] <theorbtwo> Yep, svn log agrees.

[21:01] <elmex> or is async just a hack?

[21:02] <Corion> elmex: I consider it a simple yet convenient hack. Something like it will go into Perl6.

[21:03] <elmex> you mean creating threads with async {} ?

[21:04] <elmex> i would more like async {} to be more like Coro ;)

[21:04] <Corion> elmex: I don't know if you will get threads, or some other method of quasi-parallel, asynchronous execution, but I expect something like this will be available. See also Coro.pm.

[21:06] <Ovid> OK, I confess that I'm not much of an OS guy, so I have a stupid question:  if a Perl6 program begins with #!perl6 and I do ./program, I get a "perl6: bad interpreter: No such file or directory", even though I can run it with "perl6 program".  How can I run programs with ./program_name?

[21:07] <castaway> "perl6" not "pugs" ?

[21:07] <theorbtwo> #! needs to be a full path.

[21:07] <Ovid> Yeah, there are plenty of programs out there that begin with perl6.  I thought it was odd, but I tried to stick with the convention I was seeing.

[21:08] <theorbtwo> Yeah, the existing convention is pretty meaningless.

[21:08] <Ovid> theorbtwo:  I was trying not to use a full path because I have /usr/local/bin/perl6 and others have /usr/bin/perl6

[21:08] <theorbtwo> Try #!/usr/bin/evn perl6

[21:08] <Ovid> Hrmph.  I suppose I can just make a link.

[21:08] <theorbtwo> But most people don't have either.

[21:12] <Ovid> Thanks. I'll change the shebang lines in the Cookbook, then.

[21:12] <theorbtwo> Sorry, that's env, not evn.

[21:15] <Corion> The offending, segfaulting tests now get skip()ped, and another test has been added under t/pugsbugs that contains the segfault.

[21:16] <Corion> ... this is still annoying for Win32 users, but such is life

[21:29] <Corion> Hmmm. Haskell resp. while($_ = =<>) { ... } doesn't handle eof() gracefully: pugs: <stdin>: hGetLine: end of file - no END blocks run no nothing. Should this go under pugsbugs ?

[21:31] <Ovid> Question:  I know there's got to be an easier way to find out if elements in one array aren't in another.  I have this:

[21:31] <Ovid> for @a -> $elem {

[21:31] <Ovid>     @aonly.push $elem if $elem == none(@b);

[21:31] <Ovid> }

[21:34] <Juerd> Ovid: Parens around first $elem are needed

[21:34] <Juerd> Ovid: And you probably want ~~ if @a contains both numbers and strings (and regexes)

[21:35] <Juerd> (etcetera)

[21:36] <Ovid> Juerd:  the parens aren't required.  The code works.

[21:36] <Juerd> Then that's different from the spec

[21:37] <Juerd> (IMHO, not requiring parens is saner)

[21:37] <theorbtwo> Mine too, but IIRC there was some potential for ambiguity with no-parens.

[21:38] <Juerd> push @aonly, grep { $_ == none(@b) }, @a;  # nostalgia

[21:38] <Juerd> And if @aonly starts empty:

[21:39] <Juerd> @aonly = gather {

[21:39] <Juerd>     for @a -> $elem {

[21:39] <Juerd>         take $elem if $elem == none(@b);

[21:39] <Juerd>     }

[21:39] <Juerd> }

[21:39] <Juerd> :)

[21:39] <Juerd> In fact...

[21:39] <Juerd> @aonly = gather {

[21:40] <Juerd>     $_ !~ none(@b) and take for @a;

[21:40] <Juerd> }

[21:40] <revdiablo> ooh, gather. that's sexy.

[21:40] <Juerd> eh, s/!~/==/

[21:40] <Juerd> @aonly = gather { for (@a) { take when $_ == none(@b) } }

[21:41] * Juerd wants some syntax to apply $_ ~~ :)

[21:41] <Juerd> As with //, where $_ ~~ is also implicit...

[21:41] <Juerd> perhaps prefix ~~...

[21:42] <theorbtwo> Prefix ~~ is already somewhat taken, though I'm not sure why somebody would want to stringify the stringification of something.

[21:43] <Juerd> theorbtwo: That reasoning leads to not having preinc.

[21:43] <Juerd> And since we have preinc, we can also have ~~.

[21:43] <Juerd> As + is for numbers what ~ is for strings

[21:43] <theorbtwo> Point.

[21:45] <Ovid> Gotta run!  Thanks for the pointers, Juerd. :)

[22:13] <theorbtwo> G'night, all.

[22:14] <mjh> Failed 51/197 test scripts, 74.11% okay. 289/4219 subtests failed, 93.15% okay.

[22:14] <mjh> i guess that's par for the course at the moment, then :)

[22:15] <Corion> elmex: Look at &?CALLER_CONTINUATION also, for basic coroutine/continuation handling

[22:15] *** Corion changes topic to: pugscode.org <<Overview Journal Logs>> | You have safely opened the door to many Perl 6 hackers. | pugs.kwiki.org | smoke: http://xrl.us/fmw2 | Mac OS X r1682 (281/4184) | Win2k r1700 (288/4223)

[22:16] <Corion> A short question - &?CALLER_CONTINUATION gives me the context of the caller. How can I store my current context so I can pick up there again without cooperation of the calling sub?

[22:19] <Corion> ... that is, if I do @handlers = &?CALLER_CONTINUATION; ...; for @handlers -> $c { &c->(); xxx };  # how can I get to "xxx" if $c is within a loop and never returns, but calls another subroutine that I know (let's call it get_line()) ?

[22:20] <Corion> ... in get_line, I'd like to do &dispatch.goto(); but not to the start, but where I last left my state before switching.

[22:20] <Corion> Anyway - I'll sleep over that :)

[22:53] <stevan> alright,.. finally 'make optimized' worked for me (OS X)

[22:54] <stevan> if anyone is having issues with readline.h and readline.c when doing make optimized on OS X,.. install this http://wxhaskell.sourceforge.net/download/Readline4.3.dmg

