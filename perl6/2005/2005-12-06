[00:52] <leo> autrijus: [re $!] lwall doesn't really say that $! is invalid outside of an exception handler (I think), for me TSa's answer is clear and ok 

[00:53] <autrijus> leo: I think lwall says each sub get its own implicit "env $!"

[00:53] <autrijus> leo: TSa's answer says something else entirely (which would also work) 

[00:54] <leo> well, TSa says that $! (the exception) is only valid inside a CATCH handler, which make a lot of sens to me 

[00:55] <autrijus> try { die 3 }; say $!;

[00:55] <autrijus> this idiom will go away then

[00:57] <leo> hmm

[00:57] <leo> 2 levels of catch are involved here

[00:57] <leo> P6 (default catch handler everwhere (iirc))

[00:57] <leo> and parrot

[00:59] <leo> the above actually means iirc: try { die 3 }; CATCH {say $!;}

[01:03] <autrijus> I can live w/ that

[01:03] <wolverian> I thought CATCH would only be called when an exception was propagated to its lexical scope?

[01:04] <wolverian> or am I misunderstanding the point of the example :)

[01:04] <leo> I think in the absence of any eception (or handler) there is no $!

[01:06] <autrijus> wolverian: you would be correct :)

[01:06] <autrijus> try { die 3; CATCH { say $! }}

[01:06] <autrijus> would be p6

[01:06] <autrijus> { die 3 }; CATCH { say $! }

[01:07] <pd> scope is it

[01:08] <stevan> hey autrijus how goes the conference

[01:10] <autrijus> very much fun

[01:10] <autrijus> VB talk coming in a hour

[01:10] <stevan> nice :)

[01:10] <autrijus> Pugs keynote in 5

[01:10] <stevan> so I finally got my head around PIR last night

[01:10] <autrijus> happy that the last parrot lex bug we need fixing is just fixed

[01:10] <stevan> oohh Pugs Keynote!!??!?!

[01:11] <autrijus> (find_name not working with .lex)

[01:11] <autrijus> leo++ # oil-for-food^Wtest-for-fix

[01:11] <autrijus> yeah... pugs keynote... I'm the conway proxy here

[01:11] <stevan> very cool

[01:11] <stevan> where is conway?

[01:12] <autrijus> somewhere. had some troubles apparently and can't attend or host me

[01:12] <autrijus> so I end up hacking M::I/PAR/PPI with Alias

[01:12] <autrijus> which is fun also.

[01:12] <stevan> cool

[01:13] <autrijus> alias is very much fun and nice and gentle in realworld

[01:13] <stevan> :)

[01:13] <autrijus> much to my surprise :)

[01:13] <stevan> :D

[01:14] <stevan> so its a non-Pugs Hackathon this time then

[01:14] <autrijus> well... seeing how we're porting these to Pugs/P6, I'd still say it's a Pugs hackathon

[01:14] <stevan> ah

[01:15] <autrijus> we need those tools for Pugs as well :)

[01:15] <stevan> how much longer are you in .au?

[01:16] <autrijus> 2 more days in melbourne, then 3 in lismore, then 4 in sydney -- make that 9

[01:16] <stevan> then back to .tw?

[01:17] <autrijus> yeah, until early Feb then to Tel-Aviv

[01:17] <stevan> will you have $work when you are back in .tw?

[01:19] <autrijus> most likely yes, but not desperately

[01:19] <autrijus> there's one project to finish still

[01:19] <autrijus> and no more during or after that

[01:19] <autrijus> and if either Jifty or Cat is any good, the project should be straightforward.

[01:19] <stevan> cool,.. so it's back to 24/7 Pugs :)

[01:19] <autrijus> more like 24/5 but yes :)

[01:19] <autrijus> thank $deity.

[01:20] <stevan> $deity?

[01:20] <autrijus> _insert_random_god_here_

[01:20] <stevan> ah

[01:20] <Jooon> God of rechargable batteries

[01:20] <stevan> The Great Lithium Ion!!!

[01:20] <pd> I'm not a theist, you ignorant clod :)

[01:21] <pd> heh. "thank NULL." Not sure how I feel about that one. Perhaps better than "thank undef."?

[01:21] <stevan> so autrijus, is the next step on the MM a Haskell version?

[01:25] <autrijus> stevan: yes, ObjSpace-in-Hs and then the bootstrap code evaluator

[01:25] <autrijus> stevan: then codegen from that to PIR objs

[01:26] <stevan> ObjSpace ,.. so we are gutting the current core?

[01:27] <autrijus> AST.Internals yes

[01:27] <autrijus> Types.* definitely

[01:27] <stevan> cool

[01:27] <autrijus> I don't think Eval.hs needs to go right now

[01:27] <autrijus> the abstractions are pretty good

[01:27] <autrijus> I did this once already with the Container fix in Types.*

[01:27] <autrijus> so probably can do it again

[01:27] <stevan> so are we going to do that sendmsg thing we spoke about? or some other approach?

[01:28] <autrijus> sendmsg is the way to go

[01:28] <stevan> cool

[01:28] <autrijus> and no runtime type assertions by default

[01:28] <autrijus> it's ducks all the wya down

[01:28] <stevan> quack :)

[01:28] <stevan> what are you thinking in terms of the PIR

[01:28] <stevan> I am currently stuck as to where to start with the metamodel

[01:29] <stevan> I wrote Opaque last night,.. but it felt like I was re-inventing things

[01:29] <stevan> but when I hacked a basic Class ,... it felt too high level

[01:29] <autrijus> I think we reuse PIR ParrotObject as Opaque

[01:29] <stevan> yeah, that makes sense

[01:29] <autrijus> PIR allows compile time objspace seeding

[01:29] <autrijus> so that makes codegen ~trivial

[01:30] <stevan> what about method dispatching... reuse ParrotObject or do it ourselves?

[01:30] <autrijus> also reuse PO

[01:30] <autrijus> as they are also C3

[01:30] <stevan> hmm ok

[01:30] <stevan> yeah I know

[01:30] <autrijus> if there's any mismatch, yell at leo

[01:30] <stevan> LOL

[01:30] <stevan> I should write some more tests for the C3 stuff

[01:31] <autrijus> chip's idea is that parrot should be the fastest VM for Pugs

[01:31] <stevan> BTW - did you see that matts is using Class::C3 in DBIx::Class now

[01:31] <autrijus> yup, and I get a lot of INIT block warnings

[01:31] <stevan> yup :)

[01:31] <autrijus> I fixed some of them in Catalyst

[01:31] <autrijus> and released Test-use-ok 

[01:31] <autrijus> for that specifically (you may like it)

[01:31] <stevan> I told him i would remove the INIT if he wanted,.. after all he is the only one using that module :)

[01:32] <stevan> yeah I saw Test-use-ok,.. very witty :)

[01:32] <autrijus> :D

[01:32] <autrijus> anyway, I think a 'no warnings "void"' may be warranted. maybe not. I'm not sure

[01:33] <stevan> it probably makes sense to get rid of the INIT block and make initalization manual

[01:33] * stevan ponders how to thread the MM through ParrotSpace

[01:34] * autrijus gets ready for lightning talk

[01:34] * stevan envisions something akin to the Pod Racers in Star Wars

[01:34] <autrijus> =pod Racers

[01:34] <stevan> :)

[01:35] * autrijus discovers nothingmuch posted some flattery on cpanrantings for Test-use-ok

[01:36] <wolverian> heh, cpanrantings

[01:45] <Khisanth> pd: there very good reasons to be thanking NULL and undef when you are debugging :)

[01:45] <pd> Khisanth, heh.

[01:45] * stevan lights some insence and places them under his statue of NULL

[01:45] <autrijus> because debugging is godforsaken and thankless?

[01:45] <pd> yes, dereferencing a NULL pointer is generally better than dereferencing, say, 3.

[01:46] <fglock_> hi all!

[01:47] <stevan> hey fglock

[01:48] <fglock_> I'm experimenting with compiling a mini-runtime to parrot

[01:48] <fglock_> not much luck yet with -Cpir or -Cpil2

[01:49] <autrijus> -Cpir is brokem on parrot+lexpad

[01:49] <autrijus> -Cpil2 is waiting on ObjSpace-Hs port

[01:49] <autrijus> so yeah :/

[01:49] <autrijus> (both should improve before parrot 0.4.1)

[01:49] <fglock_> I just recompiled with parrot embedding, but I still get an error with missing &rx_

[01:50] <autrijus> I think we can't work with 0.4.0 ever... not worth working around the find_name bug

[01:50] <fglock_> should I use -Cpil ?

[01:50] <autrijus> fglock_: try -Cpil1

[01:50] <fglock_> autrijus: trying...

[01:50] <autrijus> but I don't see the rx_ bug here

[01:50] <autrijus> do you have this in your ocnfig.yml?

[01:50] <autrijus> precompile_prelude: true

[01:51] <fglock_> I don't think so - checking...

[01:51] <autrijus> it's the deafult

[01:52] <autrijus> does this work for you?

[01:52] <autrijus> ./pugs -Cpil1 -e '5 ~~ rx:p5/1/'

[01:53] <fglock_> yes 

[01:53] <autrijus> so what does not?

[01:54] <fglock_> it works with -Cpil2 too - I will upload my code - just a minute

[01:58] <fglock_> ok - sorry for the delay

[01:59] <fglock_> it's in misc/Parser-Mini/read_pil.p6 - but it is just a small hack, not the real thing

[02:05] <xah> how's pugs?

[02:05] <autrijus> quite happy

[02:06] <autrijus> fglock_: you can get a dump with 

[02:06] <autrijus> ./pugs -CPIL1-Perl5 -e1

[02:06] <xah> autrijus: nice job

[02:08] <fglock_> autrijus: I get the same error. my installation might be broken.

[02:08] <stevan> leo: ping

[02:08] <autrijus> xah: thanks!

[02:08] <autrijus> fglock_: might be... try a rebuild :/

[02:09] <xah> most of you are also learning haskell?

[02:09] <autrijus> I'd say maybe 20% :)

[02:10] <xah> that's pretty cool.

[02:12] <fglock_> autrijus: you got a successful compilation of read_pil2.p6? I'll download the latest parrot tomorrow (I'm using 0.4.0 from CPAN)

[02:17] <autrijus> you don't need parrot for that I think

[02:17] <fglock_> xah: learning haskell would help me a lot :)

[02:17] <autrijus> and yes, compilation worksforme with -CPIL1-Perl5

[02:18] <xah> fglock_: in what way?

[02:18] <xah> i started to learn haskell few weeks ago... but got busy with other things.

[02:19] <xah> is there a pugs faq or perl6 faq somewhere?

[02:19] <fglock_> xah: I could understand the source code - I can read it, but I don't understand many parts

[02:21] <autrijus> xah: pugscdoe.org has "Overview" which may help

[02:21] <autrijus> xah: also see the slides at bottom left of pugscode.org

[02:21] <fglock_> autrijus: I had a debian pugs installation, besides the svn version - I'm deleting the debian package and rebuilding the svn

[02:21] <autrijus> ok

[02:21] <autrijus> I'm going to be on stage in 20 mins -- bbiab

[02:21] <xah> autrijus: ah... i remembering seeing that site. I see that you are a supporter of the trad char.

[02:22] <fglock_> good luck!

[02:22] <autrijus> xah: hm? I have both trad and simp listed

[02:22] <autrijus> fglock_: thanks!

[02:22] <xah> autrijus: right. But from the way you name the trad char. :)

[02:22] <Epix> I want perl6, but i cant have it :(\

[02:23] <autrijus> Epix: why? downloading pugs doesn't work?

[02:23] <autrijus> xah: ah... but that's how trad char users call it officially

[02:23] <autrijus> xah: it's the same idea that I don't call the simp char side "Su-Ti" (folk-style)

[02:23] <Epix> autrijus: no, i just havent bothered with pugs, no offical release of p6 yet...

[02:23] <autrijus> as the simp char users call it "Jian-Ti" (simplified-style)

[02:23] <autrijus> Epix: oh ok... wait another year or so then.

[02:24] <Epix> autrijus: does pugs compile to parrot and is past beta?

[02:24] <autrijus> meanwhile you can learn some interesting languages like Ruby or IO or OCaml or Haskell

[02:24] <autrijus> Epix: yes we do compile to parrot but no we are not past beta.

[02:24] <stevan> is parrot past beta??

[02:24] <autrijus> probably not.

[02:25] <xah> autrijus: it' be interesting to know if trad char was called the zheng ti, but the standard expr today is rather "complex char" vs "simplified char".

[02:25] <Epix> autrijus: ah, you are the author of pugs, correct?

[02:25] <autrijus> xah: actually in taiwan it's called "canonical char" and "folk char"

[02:25] <autrijus> Zheng-Ti and Su-Ti respectively

[02:26] <xah> autrijus: yeah, because taiwan is filled with politics

[02:26] <autrijus> xah: yup, but I subscribe to the idea of wikipedia.org -- "Ming cong zhu ren" (the owner gets to define the name)

[02:26] <autrijus> xah: so that's how I treat it :)

[02:26] <autrijus> .tw gets to define how zh-tw is named and .cn gets to define how zh-cn is named.

[02:27] <autrijus> Epix: yes

[02:27] <xah> autrijus: so you are just showing your political side, after all. Not because how things are really named. :)

[02:27] <autrijus> xah: yup, I'm a card-carrying anarchist :)

[02:27] <Epix> hm, now i need a tutorial and a good reason that p6 > python :P

[02:27] <autrijus> take it or leave it :D

[02:27] <xah> autrijus: but even so, i don't agree that taiwan are really all for one side of naming.

[02:28] <pd> Epix, p6 can be all things to all people. Because, like, it isn't done yet.

[02:28] <autrijus> Epix: see http://svn.openfoundry.org/pugs/docs/articles/tpr.pod

[02:28] <obra> p6 _is_ python. p6 is also antipython

[02:28] <autrijus> Epix: download it and run "perldoc tpr.pod" should give you an ok tutorial

[02:28] <xah> obra: huh?

[02:28] <autrijus> xah: that's okay, I respect that :)

[02:28] <obra> xah: I was playing on "all things to all people"

[02:29] <pd> probably true enough, as it goes.

[02:30] <pd> I wouldn't know, I think of myself as being more in the can't-we-all-just-get-along parrot camp.

[02:31] <autrijus> at least we can get along with Tcl

[02:32] <Epix> when perl6 comes out with a real, offical relase, what magic new stuff will it have to offer? it seems like the language is getting a huge overhaul... why?

[02:32] <pd> I'll leave it at that, I already poked Coke once today about Tcl.

[02:32] <xah> obra: the pythoner's got python3000 is the cooking.

[02:33] <autrijus> Epix: take some time to look at my slides? :)

[02:33] <obra> xah: they do

[02:33] <pd> Epix, well I'll tell you one thing I noticed today, and you can take it or leave it: I wrote a simple routine in p6, and I only had to change one word to make it valid PHP. Seemed easier to me. :)

[02:33] <Epix> autrijus: VB doesnt rock :P

[02:33] <autrijus> Epix: http://pugscode.org/euroscon/pugs.xul

[02:33] <obra> and there's Ruby 2.0

[02:33] <obra> And Lisp has Arc

[02:33] <autrijus> Epix: http://pugscode.org/euroscon/pugs.xul as well come to think about it

[02:33] <Epix> obra: when will that be comming out?

[02:33] <obra> When will Python 3000 be coming out.

[02:33] <autrijus> er, I mean http://pugscode.org/euroscon/vb.xul

[02:33] <pd> sub fib($f) { if ($f > 1) { return fib($f - 1) + fib($f - 2);} else {return 1;} }

[02:34] <obra> If I'm working as the assistant perl6 project manager and I can't even give you a date for perl6... ;)

[02:34] <autrijus> obra: I'm happy that nobody says "by Christmas" anymore :D

[02:34] <obra> heh

[02:34] <wolverian> pd, augh, parens on the if, and redundant 'returns'! the sight, it pains me.

[02:35] <pd> wolverian, yeah, but like I said... change one keyword, and it's valid PHP. :)

[02:35] <pd> you should see my old Perl5 that I tried to make look like Scheme.

[02:35] <wolverian> heh.

[02:36] <wolverian> that's better than PHP. :)

[02:36] <pd> can't we all just get along! ;)

[02:36] * pd gets to work on KumbayaPMC

[02:36] <xah> i just learned php yesterday.

[02:36] <Epix> pd: would that keyword be sub?

[02:36] <pd> Epix, it would indeed.

[02:37] <pd> in PHP, it's function instead.

[02:37] <wolverian> pd, no, not with PHP, NEVER.

[02:37] <wolverian> er, ever. cough.

[02:37] <pd> wolverian, the PHP implementation I have lying around here somewhere for Parrot is pretty decent.

[02:37] <xah> perl forks don't like php is general, is that right?

[02:37] <pd> xah, I wouldn't generalize like that, but many language people are like that.

[02:37] <wolverian> pd, then you only need to fix the language 

[02:38] <pd> I'm not a fan of Java, but I like Perl and PHP ok.

[02:38] <xah> as far as i can tell, php's usage in the industry probably surpassed mod_perl by a big margin?

[02:38] <wolverian> don't get me started on java. :)

[02:38] <pd> they share a lot of features, and they each have their flaws

[02:38] <pd> wolverian, heh

[02:38] <pd> PHP is slow; perl5 can be a memory hog

[02:38] <pd> etc. etc.

[02:39] <pd> doesn't matter much when all you're doing is running a mysql query and printing out a webpage.

[02:39] <Epix> autrijus: what was the feature presentation

[02:39] <wolverian> print_to_webpage(mysql_query("SELECT $PARAM['foo']"));

[02:39] <pd> yeah, something like that.

[02:39] <xah> lol, look at the perl5 mug http://www.cafepress.com/pugscode.28683006

[02:39] <pd> looks pretty similar in both languages too.

[02:40] <xah> 5->6

[02:40] <wolverian> you missed the sql injection vulnerability

[02:40] <pd> oh please. :)

[02:40] <wolverian> :)

[02:41] <wolverian> sorry. I'll go back to reading a non-programming book now. 

[02:41] * pd too

[02:41] <pd> I should get back to it, it's raining frogs.

[02:43] <xah> anyone seen the perl6 logo?

[02:44] <pd> are you referring to what's on the mug still?

[02:44] <xah> Polymorphic Existential Recursive Lambda VI

[02:44] <xah> y

[02:44] <pd> yeah that was clever

[02:44] <pd> I imagine that'll be Larry Wall's tombstone.

[02:44] <pd> "He was clever."

[02:45] <pd> better than "JAPH" in my book.

[02:45] <xah> is that gonna be the official acronym?

[02:45] <pd> they could do worse, I suppose.

[02:45] <wolverian> please no. then people will write it as PERL more often than perl5 :)

[02:45] <pd> PEARL :)

[02:45] * pd ducksa

[02:45] <pd> *ahh*

[02:45] <wolverian> ducks eat pearls

[02:46] <wolverian> (and pythons)

[02:46] <pd> !

[02:46] <pd> and rubies no doubt

[02:47] <wolverian> right. :)

[02:47] <wolverian> good taste, obviously

[02:50] <pd> more like... shiny objects. :)

[02:52] <xah> darn. what's a .xul file?

[02:52] <pd> that's a mozilla thing, right?

[02:53] <xah> seems like it

[02:53] <pd> http://www.mozilla.org/projects/xul/

[02:55] <xah> don't seems to be able to read it in firefox

[02:55] <xah> it's from pugscode

[02:55] <xah> haskell.xul

[02:55] <wolverian> worksforme in ff and epiphany

[02:56] <xah> what v and os?

[02:57] <xah> ff? epiphany?

[02:57] <xah> i'm on os x, firefox 1.5

[02:57] <pd> Learning Haskell* (http://pugscode.org/euroscon/haskell.xul) -- Slides from AutrijusTang's talk, requires gecko-based browsers (Firefox, Epiphany, etc.) to view

[02:57] <pd> sounds like a neat trick.

[03:02] <autrijus> xah: really? firefox 1.5 should just work if you point it to the url

[03:02] <autrijus> xah: if you downloaded it, you also need takahashi.js and euroscon.css that came with it

[03:03] <xah> ah i see. Yes it works now.

[03:03] <xah> very nice logo! I love it.

[03:03] <autrijus> Epix: the feature presentationis the first movie in http://pugscode.org/talks/oscon05/movies.html

[03:03] <autrijus> xah: thanks!

[03:04] <Epix> POE better be ported...

[03:04] <Epix> autrijus: why did you choose hascall (i bet you get that alot...)

[03:05] <autrijus> Epix: it's in 01Overview.html :)

[03:05] <autrijus> Epix: mostly because it has great tools :)

[03:05] <autrijus> parser + evaluator = 6 hours

[03:05] <xah> mmm xul is pretty cool

[03:05] <autrijus> xah: you tried "view source"? :)

[03:06] <xah> autrijus: yeah. i downloaded it first because i was on safari.

[03:06] <autrijus> oh cool

[03:06] <autrijus> I see

[03:06] <Epix> autrijus: you dont hear about hascall at all these days... Perly... Is that a real word? :P

[03:07] <autrijus> Haskell? it's only in usable form since 2000

[03:07] <autrijus> it will take some time for the news to spread

[03:07] <pd> yes, as in, see them perly whites?

[03:09] <xah> gosh i loved the haskell.xul tutorial

[03:10] <autrijus> good to hear that :D

[03:10] <xah> the fit use of unicode is also cool.

[03:10] <Epix> with a console open, how do i get pugs? 

[03:10] <autrijus> Epix: apt-get pugs

[03:10] <autrijus> Epix: (depending on which platform you are on)

[03:10] <Epix> autrijus: just noticed that (debian) :)

[03:11] <autrijus> good then :)

[03:11] <Epix> god.. its apt-get install pugs! :P

[03:11] <pd> ahh!

[03:11] <pd> I just used svn and make and whatnot, seemed easy enough. Then again, I'm on Gentoo. :)

[03:12] <Epix> Its been a long time sinced I perled

[03:14] <xah> autrijus: is there a way to move back?

[03:15] <xah> autrijus: in .xul

[03:15] <autrijus> xah: PageUp

[03:15] <xah> thx

[03:22] <xah> Eclipse supports haskell?

[03:25] <Epix> hmm.. pugs wont apt-get

[03:25] <Epix> This installation run will require temporarily removing the essential package e2fsprogs due to a Conflicts/Pre-Depends loop. This is often bad, but if you really want to do it, activate the APT::Force-LoopBreak option.

[03:29] <autrijus> Epix: I have no idea what it means 

[03:29] <autrijus> xah: yes, eclipsefp.sf.net

[03:29] <Epix> And, i cannot get rid of e2fsprogs, apt warns me that its important and i shouldnt touch or im in deep poop

[03:29] <autrijus> you can give up and build from source instead

[03:30] <autrijus> svn co http://svn.openfoundry.org/pugs (or download from a CPAN near you: http://search.cpan.org/dist/Perl6-Pugs/)

[03:30] <autrijus> you'll need to apt-get install ghc (>=6.4) I think

[03:38] <xah> ho my god that larry poem is long.

[03:38] <xah> and it has been quality

[03:51] <autrijus> the VB talk got the Best Lightning Talk award by popular vote-by-clapping :D

[03:55] <xah> autrijus: which book or online material you recommend for learning haskell?

[04:01] <autrijus> xah: http://svn.openfoundry.org/pugs/READTHEM

[04:02] <xah> autrijus: thanks for the link. But is there one book or one online tutorial you recommend?

[04:03] <autrijus> hm... one book

[04:03] <xah> (i'm familiar with haskell books and resources)

[04:03] <autrijus> definitely http://www.cs.nott.ac.uk/~gmh/book.html

[04:03] <autrijus> one online tutorial... that would be mine ;)

[04:09] <xah> autrijus: gosh... don't have ppt. ...

[04:10] <autrijus> keynote can open it no?

[04:10] <xah> ok, they have some in pdf.

[04:10] <autrijus> also openoffice.org impress

[04:10] <autrijus> cool

[04:10] <xah> ah... will try to download OpenOffice

[04:10] <xah> it can read ppt?

[04:10] <autrijus> yup

[04:10] <autrijus> and save too

[04:10] <xah> thx

[04:10] <autrijus> and convert them to pdf

[04:10] * autrijus praises openoffice for sanity

[04:11] <xah> btw, really great work you've done.

[04:11] <wolverian> I hate openofif

[04:11] <xah> great poems too.

[04:11] <wolverian> er. whatever. :) too tired

[04:11] <autrijus> heh thanks... I didn't do them all; I merely started some part of it :)

[04:11] <xah> autrijus: it'd be nice if the poems also available as a html page,

[04:11] <autrijus> wolverian: yeah, but it kept me from rebooting to win32

[04:11] <xah> so that people can read. (and with author attributions)

[04:12] <autrijus> xah: http://svn.openfoundry.org/pugs/docs/talks/larry_mariner.txt

[04:12] <autrijus> it's part of pugs source tree

[04:12] <xah> autrijus: html better, as .txt don't get high ranking on google

[04:12] <xah> i noticed.

[04:13] <xah> autrijus: you've abroad?

[04:13] <xah> been.

[04:13] <xah> you've been abroad?

[04:15] <xah> autrijus: i think i read somewhere that implies you don't leave taiwan?

[04:16] <autrijus> xah: eh? I won't stay much in taiwan anymore :)

[04:16] <autrijus> so you might read it backwards

[04:16] <xah> autrijus: maybe off topic... where'd you be going?

[04:19] <autrijus> xah: it's no secret... .il, .de, .pt, maybe .es, maybe .at again, then possibly .uk; .ca possible too

[04:19] <xah> lol. but that's great!

[04:19] <xah> all the countries want you.

[04:20] <xah> ummm i see no .us ? :)

[04:20] <autrijus> boycotting them.

[04:20] <xah> lol. good deed.

[04:24] <autrijus> actually just the current administraion. :) we'll see if it gets better in the next one...

[04:29] <obra> what's in .pt?

[04:30] <autrijus> some workshop

[04:43] <ingy_> hi autrijus 

[04:44] <autrijus> ingy_: hey

[04:44] <autrijus> how's .tw?

[04:44] <obra>      heh

[04:46] <ingy_> autrijus: it's a really nice place. you should check it out

[04:46] <ingy_> maybe some day

[04:50] <hcchien> ingy_: what are you hacking now?

[04:52] <autrijus> ingy_: cool

[04:59] <whiteg> hcchien: you should just come here and see all the stickers on the wall

[05:00] <whiteg> hcchien: then you will know what he and gugod are hacking on

[05:01] <autrijus> mmm ingy and his stickers

[05:01] * autrijus is still preparing pugs talk... going to be on air in 30 mins

[05:03] <autrijus> # http://pugscode.org/osdc/combined-2.jpg

[05:52] <stevan> autrijus++ # Evolve or die; 

[07:08] <GeJ> servus

[07:36] <gaal> morning!

[07:49] <r0nny> morning gaal 

[07:50] <nothingmuch> hola gaal 

[07:54] <autrijus> yo

[08:00] <gaal> heya :)

[08:00] <gaal> sooooo, i

[08:00] <gaal> 'm tryign to resume state re: pragmas

[08:04] <gaal> I was blocked on the following: I need the parser to put some data on every node in the tree, data that the runtimes have access to. The Perl 5 patch that did this was simple, because the parser and the runtime are too chummy; we avoid preciesely this chumminess in pugs.

[08:07] <gaal> I think we need something along the lines of expRule; instead of it returning Pos (mkPos pos1 pos2) (unwrap exp), it could return Prag pragmas Pos (mkPos pos1 pos2) (unwrap exp)

[08:08] <gaal> I'm not sure however if expRule is applied exactly in the same places as a pragma opportunity would be

[08:10] <gaal> also this implies that pragmatic state, in the parser, works like getPosition and setPosition; with updateParserState. Is that concerptually correct?

[08:15] <gaal> So there's this pattern I'm not sure I understand fully, but which also seems a little fishy to me, this wrapping and unwrapping of Exps with (say) Pos. In expRule there's that unwrap, which would stip off any pragmatic state, but also other state that uses this decoration. Does this scale?

[08:23] <autrijus> nope.

[08:23] <autrijus> it's Very Bad Idea (tm)

[08:34] <gaal> so what's the better approach?

[08:34] <gaal> and: how do we define what constitutes a pragma point?

[08:34] <gaal> i.e., what "statements" need a pragma list?

[08:45] <gaal> Is it a good idea to follow the monadic getPosition and store the current pragma list in the parser state? That way (if I'm not mistaken) blocks/scopes can do

[08:46] <gaal> prePrag <- getPragmas ; ruleWhateverBlock ; setPosition prePrag --modulo syntax etc.

[08:47] <gaal> err

[08:47] <gaal> setPragmas prePrag, of course.

[08:50] <gaal> (Interesting: setPosition is only called in one place, Token.hs:484. The rest of the time positions are just constrtucted and never mutated.)

[08:51] <gaal> oh, duh, that code in Token handles #line, which of course blatantly changes the position.

[09:01] <gaal> ok, I'm thinking back to your "Ann" suggestion, autrijus, which was supposed to unify Cxt, Pos, and Prag annotations IIRC. should this be a union or a full record? ie Cxt Cxt | Pos Pos | Prag Prag or MkAnn { cxt :: Cxt, pos :: Pos, prag :: [Prag] }  ?

[09:05] <dduncan> question: is "pugs -c Foo.pm" the same as "pugs -e "require Foo;" ... or do they have different symantecs? ...

[09:05] <dduncan> I only want the code to compile, but under the situation I'm in, I have to do it within a -e, so that I can first execute a use-lib

[09:06] <dduncan> the code I wrote seems to work, but I was wondering if there might be symantics issues

[09:06] <dduncan> fyi, the code is: find blib6/lib -name '*.pm' -exec ./pugs -e "@*INC.unshift('blib6/lib'); say 'require \'{}\';'; require '{}';" ';'

[09:06] <dduncan> that was modified from something autrijus wrote yesterday

[09:09] <gaal> they are different because -c Foo.pm compiles the module itself, not the state of having loaded the module. For example, %INC would not be set.

[09:10] <gaal> and if the module is sensitive to its caller, it may do different things depending on whether it's used or run.

[09:11] <dduncan> do you know of a way to add 'lib' items when using -c with Pugs?

[09:11] <gaal> if you're familiar with Java, consider that a class may have an explicit entry point that's only called when the class is invoked directly; it's possible to get the same semantics in perl with the if (!caller) pattern

[09:11] <gaal> (that's the p5 spelling)

[09:11] <dduncan> all I wanted was -c with an added arg to specify more search dirs ... so that any 'use' statements in one module work to find others

[09:12] <dduncan> this -e thing was a workaround because I didn't know one

[09:12] <gaal> there is a -I cmdline arg...

[09:12] <gaal> I think it even works :-)

[09:13] <dduncan> will check ...

[09:13] <gaal> under the hood it does something very similar to -e, too :)

[09:14] <gaal> btw, be careful of shell portability when doing these things, and of possible paths with whitespace. :-(

[09:15] <dduncan> the search path is a constant ... its just 'blib6/lib'

[09:16] <dduncan> I'm just trying to find which part of the pugs docs lists its command line options

[09:16] <gaal> pugs::run

[09:17] <gaal> oh. -I isn't implemented.

[09:17] <gaal> wanna do that? Pugs.hs.

[09:18] <dduncan> yes, I just saw that

[09:19] <dduncan> it said it wasn't implemented on purpose due to perl 5

[09:19] <dduncan> anyway, I'll commit what I did before, which does what I want (detect compile errors), and someone can improve it if they want

[09:22] <gaal> dduncan: "it wasn't implemented on purpose due to perl 5": ???

[09:22] <dduncan> I'll quote: ...

[09:22] <dduncan> =item C<-l>, C<-d>, and C<-w> ... are ignored for compatibility with Perl 5.

[09:23] <dduncan> so due to perl 5, they aren't done

[09:23] <gaal> that's -l, ell, not -I, aiiiiiii.

[09:23] <gaal> -I is not implemented because nobody did it yet :-)

[09:24] <dduncan> did you say aiiii?

[09:24] <dduncan> I thought you said elll ...

[09:24] <gaal> -w is ignored because warnings will be on by default

[09:24] <dduncan> which made sense at the time...

[09:24] <gaal> -l because with &say it's less attractive, or less needed

[09:25] <gaal> -d, I bet, WILL be implemented... sometime. :-)

[09:25] <dduncan> anyway, I added util/make-test-p6-compile.sh ...

[09:25] <gaal> cool

[09:25] <dduncan> it was to help isolate /ext failures faster

[09:26] <gaal> nice; how do you envision its use in the smoke process?

[09:26] <dduncan> it is a subset of what make test/smoke does

[09:26] <dduncan> while the others recompile a .pm for every .t that includes it, or includes a .pm that includes it ...

[09:27] <dduncan> the one I committed goes to the .pm directly, greatly reducing the duplicate warnings spat out due to the same module not compiling

[09:28] <dduncan> ideally it would be built in to the make process, so one could say 'make compile-test' but I haven't the tuits to do that

[09:28] <gaal> good. what's the typical usage pattern? do it before running make smoke?

[09:28] <dduncan> so you just invoke it directly after 'make', instead of 'make smoke'

[09:28] <dduncan> then when all the errors reported are gone, you do a make smoke to just check runtime errors

[09:29] <dduncan> the basic idea is that the new script brings attention to the low hanging fruit ... syntax errors

[09:29] <dduncan> so they can be dealt with early, leaving the smoke reports for harder stuff

[09:29] <gaal> does this compile one huge blob with everything? or each .pm separately (with its deps)? to be correct it should probably do something in the middle.

[09:29] <dduncan> in my case ...

[09:30] <dduncan> this being a shell script, it reinvokes pugs separately for each .pm

[09:30] <dduncan> so no huge blog

[09:30] <dduncan> blob

[09:31] <dduncan> there is still the isolation that you get with make smoke etc

[09:31] <gaal> huge blob would be wrong; but *every* .pm may do the wrong thing too when we have platform-dependent stuff.

[09:31] <gaal> but this is probably good enough for now :)

[09:31] <dduncan> well, this was meant to be a quick and dirty thing anyway

[09:31] <gaal> right. dduncan++

[09:32] <dduncan> fyi, the whole script is a one liner, and there are a bunch of comments

[09:33] <dduncan> now that using this is making the task a bit easier, I was going to go through the perl 6 code in /ext and fix syntax errors

[09:34] <dduncan> a lot of the ones I see now are due to the named argument declarations not being updated when pugs was ... some were but some weren't

[10:01] *** kanru2 is now known as kanru

[10:16] <dduncan> have to investigate, but it appears Pugs doesn't parse the new way to call private methods, such as $self!method

[10:19] <autrijus> no, it doesn't. is there a test?

[10:19] <dduncan> looking for one

[10:19] <autrijus> t/oo/method/* doesn't ocntain one

[10:20] <dduncan> but it does seem to parse declarations of private methods ... I think

[10:20] <dduncan> perlbot seems to be down ... haven't seen commit reports in awhile

[10:20] <dduncan> though it is connected

[10:23] <dduncan> ?eval class Foo { method :bar () { say 'hello'; } }

[10:23] *** evalbot_8081 is now known as evalbot_8085

[10:23] <evalbot_8085> Error:  unexpected "{" expecting term postfix, operator, ":", ",", postfix conditional, postfix loop, postfix iteration, ";" or "}" 

[10:23] <autrijus> dduncan: yes, "my method" has always been working iirc"

[10:23] <dduncan> ?eval class Foo { method bar () { say 'hello'; } }

[10:23] <evalbot_8085> undef 

[10:23] * kane_ waves at autrijus

[10:23] <autrijus> kane_: yo!

[10:24] <dduncan> anyway, I'm going through ext now ... already committed (locally) replacements of :foo with my foo

[10:24] <autrijus> kane_: M::I and M::AI is going to 1)suck less and 2)getting some JIB love

[10:24] <dduncan> also some ?$arg with $arg?

[10:24] <metaperl> stevan: ping?

[10:34] <dduncan> okay, two more commits pushed

[10:35] <dduncan> some remaining /ext failures are due to $self!method not compiling yet, and others I'm not yet sure what the problem is ... libwww-perl being an example of the latter

[10:53] <autrijus> k, I can take a look tomorrow

[11:04] <fglock_> autrijus: re my compiling problems yesterday: the problem happens with named rules:

[11:04] <autrijus> ah

[11:04] <autrijus> that explains it

[11:04] <autrijus> got a onelineer?

[11:04] <fglock_> pugs -Cpil1-perl5 -e ' rule ww { \w+ }; ' - &rx_ is compiled as a macro

[11:04] <fglock_> pugs -Cpil1-perl5 -e ' rule { \w+ }; ' - compiles as a sub

[11:05] <fglock_> &rx_ is defined in Prelude

[11:06] <fglock_> anonymous rules work

[11:06] <autrijus> confirmed. fixing

[11:07] <fglock_> thanks! I was crazy trying to find out the problem

[11:15] <fglock_> bbiab &

[11:55] <xunxin> Does anyone know why pugs spends so much time on loading Prelude? It's really a pain to run even a "hello, world" p6 program.

[11:56] <autrijus> xunxin: did you use precompiled prelude?

[11:56] <xunxin> no, but I want to know how to recomile it.

[11:57] <xunxin> Can I find any instructions on Pugs doc?

[11:57] <autrijus> look at config.yml

[11:57] <autrijus> there should be a "precompiled_prelude: true"

[11:58] <xunxin> ah, thanks, autrijus!

[11:58] <xunxin> BTW, recent Pugs revision broke on Win32. :=)

[12:00] <autrijus> oh? what's the error?

[12:00] <xunxin> hm, it seems to me "cd .." failed on nmake.

[12:01] <xunxin> It can builds setup.exe successfully, but failed on the command "cd ..".

[12:05] <autrijus> can you nopaste a log?

[12:05] <autrijus> http://sial.org/pbot/perl6

[12:06] <xunxin> autrijus, I'm happy to provide such detailed output some time later, but now, because this is my friend's machine. sorry.

[12:07] <xunxin> but not now.

[12:07] <gaal> someone mentioned having to patch the makefile to do cd ..\.., but I don't remember who or where.

[12:07] <gaal> or why that was necessary :(

[12:07] <autrijus> xunxin: ok, that's fine

[12:07] <autrijus> I'll try win32 later

[12:07] <xunxin> okay

[12:35] <fglock> how can I recompile just the Prelude?

[12:40] <fglock> 'mv ./src/Pugs/PreludePC.hs ./src/Pugs/PreludePC.hs.bak' seems to work

[12:45] <autrijus> sure, or touch src/perl6/Prelude.pm

[12:45] <autrijus> I need to leave strategicdat aoffice now... I'll check back tomorrow morning

[12:45] <autrijus> in, oh, 8 hours

[12:45] * autrijus waves &

[12:45] <fglock> bye

[12:47] <autrijus> much better docs: http://svn.openfoundry.org/modinstall/trunk/lib/Module/Install.pm

[12:47] <autrijus> &

[12:47] <autrijus> Alias++

[13:06] *** nnunley_ is now known as nnunley

[13:27] <kane-xs> hmm.. p6 use syntax deemed insufficient :(

[13:35] <kane-xs> seen rafl

[13:44] <rafl> kane-xs: I've seen rafl 0 seconds ago (saying: kane-xs: I've seen rafl 0 seconds ago).

[13:45] <kane-xs> argh.. the recursion, it hurts!

[13:46] <kane-xs> rafl: i just pushed a new S22 that points out what pugs needs to do to support jibs... i noticed the Repository section was still in 'past rantings' -- i think it deserves a nice spot in the doc :)

[13:49] * rafl pulls

[13:52] * kane-xs watches perl hate him

[13:54] <kane-xs> hm, a -d test fails in a script, i run it manualyl and it succeeds.. absolute path.. hmmm

[13:55] <kane-xs> d'oh, code in wrong order

[13:57] <rafl> Use ACME::Palindrome and the order of the chars in a word doesn't matter anymore.

[13:57] <rafl> kane-xs: Hm, the repo stuff is still in Past Rantings/Notes/Etc

[13:58] *** bradb_ is now known as bradb

[13:58] <kane-xs> rafl: that was my point :) i think you've fleshed it out enough to make it a 'proper' section

[13:59] <rafl> kane-xs: Oh, OK. You said that you pushed a new version. Thought that included that change.

[13:59] <rafl> kane-xs: Doing that now.

[13:59] <kane-xs> rafl: no, i pushed a section on 'what pugs needs to do'

[13:59] <kane-xs> when i scroled though it i noticed the repo stuff still being in the 'notes' stage

[14:00] <rafl> Hm, where should it go?

[14:00] <kane-xs> a =head1 above the pugs stuf i'd say

[14:01] <kane-xs> around line 608 or so

[14:03] <rafl> Well, during writing JIB::Repository I noticed that the current layout isn't that good. I'm going to revise it a bit.

[14:03] <kane-xs> prototyping++ # you learn things

[14:03] <kane-xs> what turned out to be not so good?

[14:03] <kane-xs> btw, alternatives work again in JIB:: now.. just writing tests

[14:04] <rafl> Can't remember. Something was "ugly".

[14:05] <kane-xs> btw, does svn support an 'mv' with keeping history and so on?

[14:05] <kane-xs> in case we want to rename some stuff

[14:06] <nnunley> kane-xs Yes.

[14:06] <nnunley> svn mv <file> works.

[14:06] <rafl> kane-xs: svk as well.

[14:07] <kane-xs> yay

[14:07] <rafl> kane-xs: Actually I want to be able to group dists by all meta information that is available.

[14:07] <rafl> kane-xs: author, distname and language by default.

[14:08] <clkao> but it will be a painful thing when doing merge that should bring the rename. luckily svk does it right.

[14:08] <rafl> kane-xs: But I'm not sure how to reflect that in a repository layout.

[14:08] <rafl> kane-xs: Any hints?

[14:10] <kane-xs> rafl: you suggested categories as directories, and a file with the contents

[14:10] <kane-xs> rafl: that sounded good -- did that not work out?

[14:11] <rafl> So we have thins like dists/languages/perl.gz and dists/languages/perl/kane.gz?

[14:11] <rafl> kane-xs: But is kane a module or an author?

[14:12] <kane-xs> good point -- that means either policy or disambiguate

[14:12] <kane-xs> if you want to catogorize by modules too (which seems prudent), splitting that out makes sense

[14:12] <rafl> kane-xs: So we would have dists/languages/perl/authors/kane.gz and dists/languages/perl/modules/kane.gz - not that nice in some way.

[14:12] <kane-xs> rafl: symlinks can do a lot here

[14:12] <kane-xs> as languages/perl/modules would be the same as modules/perl/

[14:12] <kane-xs> for example

[14:13] <rafl> Actually it would be modules/language/perl

[14:14] <kane-xs> brb

[14:23] <kane-xs> rafl: right.. or whatever we should link to for 'convenience'

[14:23] <kane-xs> rafl: but there's little stopping us to link to long names for now, and abbreviate as needed... enve if it looks overly verbose now, there's no ambiguity, which is Good

[14:56] <nothingmuch> http://www.critticall.com/

[15:23] <stevan> metaperl: pong

[16:53] <william_firstdev>  can I invite someone here to be  a section administrator of a IT forum setup by some Chinese guy?   

[17:25] <clkao> autrijus: i did some very evil thing

[17:25] <clkao> which might enable pugs js backend to use perl5cpan

[17:32] * fglock wonders why PIL2 is so verbose 'PLit { pLit = PVal { pVal = VStr "hello" } }'

[17:50] <Limbic_Region> clkao - s/evil/evil but clever/

[18:01] <jdv79> Limbic_Region, how goes?

[18:07] <Limbic_Region> getting ready for trip to the Philippines on Sunday - so well but extremely busy

[18:07] <Limbic_Region> you?

[18:11] <jdv79> not bad, thanks

[18:11] <jdv79> that's a trip.

[18:13] <Limbic_Region> I have just given up trying to be productive or participate in any meaningful way to a lot of projects

[18:13] <Limbic_Region> I still try and stay informed so that if the time arives when I actually have free time - I don't have to spend the time relearning everything

[19:47] <chip> seen autrijus 

[20:13] <r0nny> i got a problem with a ctor

[20:14] <r0nny> i call $.arrt=Foo::Bar.new; in a BUILD submethod, and instead of creating the object it saves the reference of the new method

[20:18] <r0nny> anyone ?

[21:12] <r0nny> anyone there ?

[21:13] <pmurias> I'am :)

[21:15] <r0nny> hmm

[21:15] <r0nny> i got a problem with a ctor

[21:16] <r0nny> i call $.arrt=Foo::Bar.new; in a BUILD submethod, and instead of creating the object it saves the reference of the new method

[21:16] <r0nny> using a pugs pulled from svn about 10 minutes ago

[21:20] <pmurias> i'm not familiar with pugs internals so i can't help you much :(

[21:20] <pmurias> did it work with previous revisions?

[21:23] <r0nny> pmurias: yes - it did

[21:23] <r0nny> pmurias: maybe it broke casue they are changing to a new version of something

[23:19] <clkao> what's the javascript equivalent for *@data when calling function?

