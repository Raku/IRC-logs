[00:15] <rafl> kane-xs: ping

[00:53] <fridim> hi

[00:58] <rafl> Hello fridim 

[01:03] <rafl> autrijus: Your svnbot is b0rked.

[01:13] <meppl> gute nacht

[01:44] <Juerd> rafl: What's pbuilder used for on feather, and does it have to use >800 MB of storage?

[01:55] <Khisanth> Juerd: probably not cleaning up after building the packages?

[01:55] <Juerd> I dunno

[01:56] <Juerd> I'm looking for options to make backups for feather

[01:56] <Juerd> I always want full system backups

[01:56] <Juerd> For several reasons, which I do not wish to discuss

[01:56] <Juerd> However, this does mean that badly compressing data has to be carfully considered :)

[01:57] <Khisanth> sudden catastrophic failure seems like a good enough reason :)

[01:57] <Juerd> Khisanth: Well, one could argue that caches are unimportant to backup.

[01:57] <Juerd> But I disagree, and want full system backups.

[01:58] <Juerd> This does mean the size of the cache should be limited as much as is reasonable :)

[01:58] <Khisanth> hrm you are also backing up things that were generated from other things that are also backed up?

[01:58] <Khisanth> (and yes that was a horribly formed sentence)

[01:59] <Juerd> If it can't shrink, then so be it. If it could, but would slow down things a lot, it's a silly sacrifice. But if data can be deleted without annoying side-effects, it should be done

[01:59] <Juerd> Khisanth: By full system backup, I mean tar -z for each filesystem.

[02:00] <Juerd> If something, like a database, cannot stand a backup, then it'll be dumped first. But both the live data and the dump are backed up.

[02:01] <Juerd> This has been useful some times already.

[02:02] <Juerd> Time for zzzzzzz

[02:02] <Juerd> Bye

[02:53] <dduncan> question: do we have the entire month of december and more to get things into Pugs 6.28.0, or is there a desire to release sooner than that?

[02:54] <stevan> dduncan: 6.28.0 is a major milestone, so it may take a little while

[02:54] <stevan> although a good amount has been done (in prototype form) already

[02:54] <dduncan> sounds good to me

[02:55] <dduncan> I just wanted to have enough time to do my database stuff before it went out ... my main concern is if it was going out too early

[06:58] <GeJ> servus

[07:39] <Alias_> Dear #perl6, everything Autrijus says about how I'm mistreating him is a lie

[07:39] <Alias_> That is all

[07:40] <obra> That only makes me believe it more

[07:43] <autrijus> I'm not saying anything like that

[07:44] <obra> :)

[08:21] <pearl> hi

[08:31] <autrijus> pearl: hi!

[08:32] <dduncan> hi

[08:34] <autrijus> dduncan: hey :)

[08:34] <autrijus> I'm just committing support code for "has $!foo"

[08:35] <dduncan> okay

[08:35] <dduncan> I'm about to go to bed, but can test that first

[08:38] <dduncan> is it already committed or pending?

[08:39] <autrijus> it is

[08:39] <autrijus> I think r8106

[08:41] <dduncan> got it ... now on 'make'

[08:41] <autrijus> you should see a compiler warning; ignore it

[08:41] <autrijus> a fix is in in 8107 (not functional changes)

[08:42] <dduncan> if you mean "Pattern match(es) are non-exhaustive", then yes I saw it

[08:42] <dduncan> but I downloaded 8107

[08:43] <dduncan> making that ...

[08:44] * dduncan brb

[08:47] <dduncan> done make ... now trying perl 6 compile test

[08:48] <dduncan> it appears the problem is only half fixed ...

[08:48] <dduncan> citing Cipher.pm as an example ...

[08:49] <dduncan> It uses the form $self!method ...

[08:49] <dduncan> eg, line 305 says: return $self!stringify($self.finish());

[08:52] <dduncan> did you mean to be talking about private methods when you said r8106 had it?

[08:53] <dduncan> by contrast, private attributes, "has $!foo", had already been parsing for awhile now

[08:53] <autrijus> (it doesn't do anything though)

[08:53] <autrijus> it didn't do anything, that is

[08:53] <autrijus> doing $self!method now

[08:54] <dduncan> I don't know ... Locale::KeyedText used "has $!foo" for the last month, and that aspect of it also executed correctly for the last month

[08:54] <dduncan> or were those treated like public attributes before?

[08:55] <dduncan> maybe some aspect of private attrs that I wasn't using is what you fixed?

[08:57] <autrijus> it was treated like publics

[08:58] <dduncan> I understand now

[08:58] <autrijus> self!bar support coming in

[08:59] <autrijus> a sec

[08:59] <wolverian> heh, self!bar is so ugly :)

[09:00] <dduncan> on the other hand, it looks like self.bar but with an extra vertical line above the .

[09:01] <wolverian> yeah.

[09:06] <autrijus> r8109

[09:06] <autrijus> bbiab

[09:08] <Khisanth> easily mistaken for self|bar!

[09:08] <Khisanth> hmm self!bar selfibar

[09:09] <Khisanth> Â¦and| would probably be more fun ;)

[09:11] <dduncan> now making 8109

[09:18] <dduncan> hey, that seems to have done it ...

[09:18] <dduncan> or Cipher.pm and most of its dependents compile now

[09:34] <GeJ> !pn skype

[09:34] <GeJ> oops

[09:34] <GeJ> sorry, my bad

[09:38] <meppl> guten morgen

[09:38] <GeJ> servus

[09:59] <dduncan> pray tell, what does the "+<<" operator do?  ... pugs doesn't parse it

[10:00] <dduncan> bit shifting I think

[10:00] <dduncan> but it still doesn't parse

[10:00] <dduncan> Cipher::TEA uses that op a bunch of times, and +>> too

[10:01] <dduncan> and others

[10:02] <dduncan> anyway, I fixed a bunch of apparent syntax errors in TEA.pm, but it won't compile due to these and related ops not parsing

[10:15] <dduncan> okay, I think I found the problem ...

[10:15] <dduncan> the +<< should be +<, etc

[10:17] <dduncan> that did it ... TEA.pm now compiles

[10:23] <dduncan> revision 8110 contains 17 lines of fixes to Cipher::TEA, so that module now compiles

[10:23] <dduncan> more ext/ fixes another day

[10:23] <dduncan> now I'm going to bed ... 2:23am

[10:27] *** flw_ is now known as flw

[11:16] <rafl> Juerd: Are 106M OK?

[11:23] * frodo72 is away: I'll be back...

[11:48] <Juerd> rafl: Yes

[11:48] <Juerd> rafl: The current 800 are too, iff they are needed :)

[13:32] <rafl> Juerd: I already remove most stuff I don't need.

[13:34] <Juerd> Thanks!

[13:50] <rafl> kane_: ping

[13:56] <kane-xs> ralf pn0g

[13:56] <kane-xs> rafl even

[14:02] <rafl> kane-xs: I have some problems with the test suite.

[14:02] <kane-xs> rafl: ok.. like what? :)

[14:02] <rafl> t/011_JIB-Source..........ok 1/0rm: cannot chdir from `root-p5-b-1-cpan+KANE/p5-b-1-cpan+KANE/_jib' to `build': Permission denied

[14:02] <rafl> [ERROR] 256

[14:02] <rafl> t/011_JIB-Source..........NOK 12

[14:03] <kane-xs> and that's from a clean pull?

[14:04] <kane-xs> i broke the config yesterday, but i didn't check that part in.. making a clean pull to check myself

[14:06] <kane-xs> rafl: from a clean pull, all tests pass for me

[14:24] <rafl> kane-xs: I just pulled and it fails.

[14:25] <rafl> kane-xs: I'll investigate in 30 mins. Smoking and eating break.

[14:44] <rafl> kane-xs: OK, works now.

[14:46] <kane-xs> did youa ctualyl change anything rafl?

[14:47] <rafl> I removed some stale dirs

[14:49] <kane-xs> hmm... interesting

[14:49] <rafl> kane-xs: We should have a language tag in the MEFA.info.

[14:49] <kane-xs> the conf.pl actualy tosses out stuff to begin with

[14:49] <rafl> kane-xs: It was a root-* dir.

[14:49] <kane-xs> rafl: those too :)

[14:50] <rafl> No idea.

[14:50] <kane-xs> rafl: sure, we can add that... currently there's no logic that validates them or anything.. it's a TODO for JIB::Meta

[14:52] <rafl> kane-xs: Would you please do so? I'd like to have the repository grouped by name, author and language, but there's no way to get the language currently. I only rely on META.info stuff.

[14:52] <kane-xs> rafl: just add a language: tag to a meta.info

[14:52] <kane-xs> and there will be a ->language() accessor

[14:52] <kane-xs> it's magic!

[14:53] <kane-xs> there's no validator for those yet or sanity checks

[14:53] <kane-xs> but for your purposes, good enough

[14:53] <rafl> Thank you.

[14:58] <rafl> kane-xs: What's your oppinion about the current JIB::Repo code?

[14:58] <kane-xs> i haven't been able to look at it proper tbh -- not too many docs/comments and no tests

[14:58] <kane-xs> hard to see what it does

[15:00] <rafl> You're actually right. I'll improve the docs.

[15:01] <kane-xs> oh, and a minor pet peeve -- mind word wrapping on 80 chars? fits nicer on most screens ;)

[15:01] <kane-xs> but judging from the sub names, it creates a repository + index

[15:01] <kane-xs> so that's Good Functionality we definately need

[15:11] <rafl> I actually like longer lines because most of my screen is empty otherwise. But OK..

[15:12] <kane-xs> most developers use 80 char wide terminals or editors.. it's become a bit of an informal standard

[15:16] <rafl> Done.

[15:16] <kane-xs> cheers

[15:17] <rafl> Maybe you can improve the recursive sub that generates the list of index files that refer to a given package a bit.

[15:18] <kane-xs> just mark it with a bit XXX and point out what needs improving

[15:18] <rafl> It's actually ugly and not very fast.

[15:19] <rafl> Did you already push the META.info with the language tag?

[15:19] <kane-xs> no... i said you could add it if you felt like it :)

[15:19] <kane-xs> it's just a one line addition, i'm sure you can manage ;)

[15:20] <rafl> But it's kind of stupid. We already have that info in the prefix (p5)

[15:21] <kane-xs> yeah.. i thought of htat.. /but/ p5 and p6 is both perl

[15:21] <kane-xs> anc c_lib, c_header are both c

[15:21] <kane-xs> maybe the unify makes sense.. maybe not

[15:22] <rafl> Do we want to group the archive by p5, p6, c_header, .. or perl, c, java?

[15:22] <kane-xs> good question

[15:22] <kane-xs> i'm not sure

[15:22] <rafl> I'd prefer the former.

[15:23] <kane-xs> then we can skip the language tag

[15:23] <kane-xs> as indeed it's implicit from the prefix

[15:23] <rafl> Good. But how to get it from the meta object without creating a JIB::Package?

[15:27] <kane-xs> depends.. what are you starting with? a .info? a .jib?

[15:29] <rafl> I have a JIB::Package and call $pkg->meta->$key where key is a keyword given in the config. Currently name and author.

[15:31] <kane-xs> $pkg->prefix would tell you

[15:33] <rafl> Of course. But I don't want to hard code different keys. (if ($key eq 'language') { ... $pkg->prefix } elsif ($key eq 'name') { .. $pkg->meta->name } ...

[15:34] <kane-xs> sub JIB::Package::language { shift->prefix } ?

[15:34] <kane-xs> and it's not really a 'language'

[15:34] <kane-xs> it's more a 'type'

[15:34] <rafl> Then JIB::Package should also have JIB::Package::$meta { shift->meta->$meta }

[15:35] <rafl> Yes, but it doesn't make a difference if you call it different.

[15:35] <kane-xs> well, if we make indexes by prefix, why not call it prefix?

[15:36] <kane-xs> it's a human understandable token you're looking for, not different functionality

[15:36] <rafl> Prefix is good. But it doesn't solve the problem that some of the keys are properties of $pkg->meta and some or properties of $pkg

[15:36] <kane-xs> meta has the prefix in it i think

[15:37] <kane-xs> or otherwise, we can make it so

[15:38] <rafl> That would be duplicated information.

[15:39] <rafl> But well. that would consistent.

[15:39] <kane-xs> make meta.pm understand ->prefix then

[15:39] <kane-xs> many ways to make it work

[15:39] <rafl> We have authority, version and name. prefix is missing to get the full name.

[15:40] <kane-xs> then let's add prefix

[15:40] <rafl> OK.

[15:41] <rafl> Can you rebuild the .jib in t/src/? I'm a bit to lame to see how JIB::Package::Source works. :-)

[15:41] <kane-xs> hah

[15:42] <rafl> Also we have one jib with .tar.gz files and one with .tgz files. in t/src/

[15:42] <kane-xs> fixing config.pm, but i'll fix it

[15:42] <rafl> One of them is wrong.

[15:42] <kane-xs> yeah, they should both be .tgz

[15:42] <kane-xs> i'll fix that too

[15:42] <kane-xs> just use $pkg->prefix for now and XXX it it

[15:42] <kane-xs> so you can move on and not have to wait for me

[15:43] <rafl> Well, I'll use tar to repack the .jib ;-)

[15:55] <rafl> OK, the repository stuff works pretty well now.

[16:00] <kane-xs> rafl: nice

[16:00] <kane-xs> i'm fixing config.pm to be dynamic so if you change the root, all other dirs change too

[16:00] <rafl> kane-xs: OK

[16:11] <kane-xs> getting a lot of svk conflicts on this pussh

[16:11] * frodo72 is back (gone 04:48:08)

[16:11] <kane-xs> weeeird

[16:12] <kane-xs> it's grabbing totally wrong versions ;(

[16:14] <kane-xs> hmm, will have to tackle this tomorrow

[16:16] <hexmode> helo?

[16:16] <hexmode> oops, wrong chan

[16:18] * frodo72 is away: I'll be back...

[16:54] * frodo72 is back (gone 00:36:06)

[18:38] <r0nny> hoi

[19:41] *** _SamB_ is now known as SamB

[21:25] <dduncan> seen svnbot

[21:36] <fglock> svnbot is down - so I'll write this myself :)

[21:36] <fglock> misc/Parser-Mini/pil2_json_emit_p6.p6 - Perl 6 code emitter

[21:37] <fglock> compiles ' say "hello" ' into '(&say("hello"));'

[21:37] <fglock> with a few modifications, it could be used to transform p6->forth

[21:38] <Khisanth> heh

[21:38] <Khisanth> bring it back up?

[21:38] <fglock> I was actually trying to emit Parrot, but p6 is easier to start with

[23:17] <xinming> ?eval  role A { method t ( *@a ) { @a }}; class B does A; class C does A { has B $.b; method BUILD { $.b = B.new; $.b.t( 'haha','hehe','xixi');}} C.new

[23:17] *** evalbot_8098 is now known as evalbot_8118

[23:17] <evalbot_8118> Error: No such method: "&t" 

[23:17] <xinming> bug?

[23:52] <autrijus> yes, fixing.

[23:53] <xinming> autrijus: :-)

[23:54] <xinming> autrijus: fixing will introduce new bugs. :-P

[23:54] <obra> heh

[23:55] <autrijus> xinming: no... they are a leftover of yesterday's fix

[23:55] <autrijus> ingy_: ping

[23:55] <autrijus> obra: sanity check this plan

[23:55] <autrijus> instead of Perl6::Bible

[23:55] <autrijus> have P6Doc::Spec::03_Operators

[23:56] <autrijus> P6Doc::Spec::12_Objects

[23:56] <autrijus> and again, P6Doc::Design, P6Doc::Tutorial, etc.

[23:56] <autrijus> use sensible section names instead of numbers

[23:56] <autrijus> and Spec instead of Synopses

[23:56] <obra> would Spec:: contain Syn,Apo and Sum?

[23:56] <autrijus> and move over relevant bits from A* and E*

[23:57] <autrijus> and ditch them altogether

[23:57] <autrijus> as they are really confusing to start reading

[23:57] <obra> Hm. I'd probably still ship the normative docs as separate items

[23:57] <autrijus> lots of untruths annotated with corrections in parens

[23:57] <xinming> autrijus: how about the default behaviour of ("s1","s2","s3") turn into a string?

[23:57] <xinming> ?eval ("s1","s2","s3").say

[23:57] *** evalbot_8118 is now known as evalbot_8119

[23:57] <evalbot_8119> OUTPUT[s1s2s3 ] bool::true 

[23:58] <autrijus> what's wrong with that?

[23:58] <autrijus> oh wait, that's wrong

[23:58] <autrijus> it should say "s1 s2 s3"

[23:58] <xinming> autrijus: hmm, No, autrijus 

[23:58] <xinming> I think This is right

[23:58] <obra> I'd probably go with Perl6::Doc::{Design,Tutorials,Operators,Concurrency} and Perl6::Spec::....

[23:58] <xinming> otherwise, for slurp the input handle,

[23:58] <obra> and stick the crazy stuff from @larry in ::Spec::

[23:59] <xinming> It will add an extra space before each line except the firstline.

[23:59] <xinming> autrijus: It's "s1 s2 s3" yesterday. so I think It is a bug

[23:59] <autrijus> obra: Perl6::Doc is okay but Perl6:: on CPAN is sorta limited to things that emulate p6 programatically

[23:59] <autrijus> obra: and you think it's okay to ditch section numbering also? I thought they imply reading sequence

