[00:00] <mugwump> are you saying duck typing is not enough for roles?  I see a 1:1 equivalence.

[00:01] <stevan> not at all, I think duck typing (as I understand it) is enough

[00:01] <stevan> I think the opposite is not true

[00:01] <stevan> that there is more to duck typing that roles can provide

[00:02] <stevan> however i think the issue at hand is more a nomenclature issue in the docs

[00:02] <ijoyce_laptop>  

[00:02] <stevan> does() carries the idea of Roles with it

[00:03] <stevan> I think we should use something else when we are talking about duck typing

[00:07] <mugwump> what extra things can duck typing do that we care about?

[00:08] <stevan> let me rephrase that

[00:09] <stevan> duck typing (as I understand it) does not imply roles

[00:09] <stevan> while Roles does imply duck typing

[00:09] <mugwump> I see roles as a convenient way of grouping behaviours

[00:09] <stevan> you dont need roles to do duck typing

[00:09] <mugwump> and grouped behaviours are the essence of duck typing

[00:10] <stevan> do you have any resources for duck typing? I would like to read more on it actually

[00:10] <stevan> I think maybe my understanding of it is differnet then yours

[00:13] <svnbot6> r3697, autrijus++ | * Parsing for user-defined nullary functions.

[00:13] <svnbot6> r3697, autrijus++ | * `try {...}` literal allowed at expression level.

[00:13] <svnbot6> r3698, autrijus++ | * add [=>] to quickref/reduction.

[00:13] <svnbot6> r3699, autrijus++ | * unbreak Parrot compilation in light of the tabulaRasa change

[00:13] <svnbot6> r3699, autrijus++ |   that includes compile-time pads.

[00:13] <svnbot6> r3700, autrijus++ | * ($_) is now ok as user-defined hyper operators signature.

[00:14] <svnbot6> r3700, autrijus++ | * don't store envStash into subEnv; that saves some space

[00:14] <svnbot6> r3700, autrijus++ | * Syn "try" is no more; `try {...}` is always an expression now.

[00:14] <svnbot6> r3701, autrijus++ | * Normalise all Shell commands to begin with `:` and

[00:14] <svnbot6> r3701, autrijus++ |   reorganise Help message for `:h` a bit.

[00:14] <svnbot6> r3702, autrijus++ | * try {...} fix in tests.

[00:14] <japhy> what is the effect of \c[THIS;THAT]?

[00:14] <japhy> is it [\c[THIS] | \c[THAT]]?

[00:14] <japhy> or is it \c[THIS]\c[THAT] ?

[00:15] <japhy> I haven't found a definitive answer either way :/

[00:16] <autrijus> it's \c[THIS]\c[THAT]

[00:16] <autrijus> same as \x[0a;0d]

[00:17] <japhy> ok.

[00:17] <japhy> I didn't find an accurate description of use of the semicolon there

[00:17] <autrijus> yeah. if you need exact description, may need to ask on p6l.

[00:19] <japhy> I'll treat it as you put it for now.

[00:19] <svnbot6> r3703, autrijus++ | * print stack trace for errors in separate lines.

[00:19] <svnbot6> r3704, autrijus++ | * implement "try" as a Prim.

[00:23] <japhy> I suppose I'll also have to ask on p6l what the exact rules about whitespace are.

[00:23] <japhy> I need t oknow if '\c [NAME]' is legal or not...

[00:24] <autrijus> I think not, as a general rule

[00:24] <autrijus> but doesn't hurt to ask.

[00:24] <autrijus> (in Perl 6, bracketlikes are less space tolerant than p5)

[00:24] <autrijus> eg.

[00:24] <svnbot6> r3705, autrijus++ | * repair Pugs compilation backend.

[00:24] <svnbot6> r3706, autrijus++ | * puny attempt of adding at least some of these to ChangeLog.

[00:24] <autrijus> print (1+2)*3

[00:24] <autrijus> prints 9, not 3.

[00:29] <japhy> I really wish, for once, Pepsi and Coca-Cola wouldn't make the exact same variants on their producs.

[00:32] <autrijus> pugs> [+]<<<< ([[1,2], [3,4]], [[5,6], [7,8]])

[00:32] <autrijus> ((3, 7), (11, 15))

[00:32] <autrijus> iblech++ # this is so sick

[00:32] <autrijus> I mean slick

[00:33] <clkao> sick

[00:33] <stevan> I agree with clkao it is sick

[00:33] <stevan> but that is not a bad thing :)

[00:33] <stevan> at least not around here :)

[00:34] <stevan> mugwump: we could do monkey-typing :) (http://peak.telecommunity.com/DevCenter/MonkeyTyping)

[00:37] <autrijus> whew. journal finally up.

[00:47] <stevan> mugwump: I agree with your entire duck-typing table

[00:47] <svnbot6> r3707, mugwump++ | filter changes down to rest of document, incorporate notes on class traits

[00:47] <stevan> (in light of all the duck typing stuff I just read)

[00:48] <clkao> is there any shortcut to filter hash by key in p6?

[00:49] <mugwump> %hash<%hash.keys.grep:{ ... }> ?

[00:50] <mugwump> %hash.kv.grep:{ $_.key ~~ rx// } ?

[00:50] <mugwump> (to return a list of pairs suitable for assigning to a new hash)

[00:51] <clkao> that's not shorter

[00:51] <mugwump> the first is a slice, the second will be making a new hash

[00:51] <mugwump> (with '%newhash = ' prepended)

[00:51] <clkao> "map { $_ => $hash{$_} grep { .. } keys %hash " is an annoying p5 idiom

[00:52] <mugwump> yes, so .kv() will return a list of pairs

[00:54] * autrijus errands &

[00:57] <stevan> mugwump: perl6_meta_model.pod is making more sense to me now

[00:58] <stevan> however I am not sure how Role will interact with Type

[00:58] <mugwump> Roles help define types

[00:59] <stevan> ok

[00:59] <mugwump> but a type still always has a class

[00:59] <stevan> ok so a Type is defined by a combination of Class and any attached Role

[00:59] <mugwump> that class might just be "empty", with only one attached role

[00:59] <mugwump> the Roles are optional, but yes

[01:00] <mugwump> this Type is the Class::Compiled we were talking about before.

[01:00] <stevan> so the Type is really the "compiled" Class we were talking about?

[01:00] <stevan> LOL

[01:00] <stevan> scary, thinking the same thing half a world away

[01:00] <stevan> ok, so my model is not that different from yours

[01:01] <stevan> matter of fact I think we easily unite them

[01:01] <stevan> my head is more in the implementation details, which I think shows in my doc

[01:05] <clkao> appearantly >>+<< is 4 times faster than iterating the array and perform + ourselves.

[01:05] <mugwump> ok.  I think it would be good to put down the M3 at this point and instead prototype some M1 and M2 behaviour

[01:07] <mugwump> as we only need the M3 to be flexible for user-definable traits

[01:07] <mugwump> s/M3/M2/

[01:07] <mugwump> (ie, we only need the M3 for user-definable traits)

[01:07] <clkao> *** hyper => <SubRoutine(<anon>)>

[01:07] <clkao>     at lib/Benchmark.pm line 18, column 9-30

[01:07] <clkao> 1123.8227956215862 / s

[01:07] <clkao> *** normal => <SubRoutine(<anon>)>

[01:07] <clkao>     at lib/Benchmark.pm line 18, column 9-30

[01:07] <clkao> 402.0747054802783 / s

[01:08] <mugwump> I'd blame haskell++ for that, clkao 

[01:09] <clkao> heh ya.

[01:09] <mugwump> maybe the EvalMonad has to take fewer steps for a hyperop...

[01:09] <clkao> sure it's one op

[01:09] <stevan> mugwump: so is any of what I created suitable for M3 ?

[01:11] <mugwump> it's a good starting point, I think.  But by developing the M2 and M1 we've got some "test cases" for the M3 to represent and build

[01:12] <stevan> ok, sounds good

[01:12] <stevan> I am going to have to hand over the development reins to you for a while

[01:13] <stevan> I am behind at $work as it is

[01:13] <mugwump> me too :)

[01:13] <stevan> LOL

[01:13] <stevan> damn $work, always getting in the way

[01:14] <mugwump> yes, my professional work is more and more interfering with my Real Work

[01:14] <stevan> I have been able to rationalize my Pugs work to my $boss, but not to our $client :)

[01:14] <mugwump> Read any Dirk Gently?

[01:14] <stevan> yes

[01:15] <stevan> not in a while though

[01:15] <stevan> I actually have a first edition of first book which I bought when it came out

[01:15] <mugwump> I usually explain my development in terms of the interconnectedness of everything 

[01:16] <mugwump> "This might seem to be nothing to do with releasing a new project, but in fact it is connected by its very essence with the project"

[01:16] <stevan> :)

[01:17] <meppl> gute nacht

[01:17] <stevan> night meppl 

[01:17] <meppl> good night stevan

[01:23] <stevan> ok, I am gonna sign off for the night, talk to you later mugwump 

[01:24] <mugwump> good talking to you stevan, sleep well

[01:27] <mugwump> earthquake!

[01:29] * mugwump polls http://www.geonet.org.nz/drums.html to see how far the needles moved

[01:49] <japhy> I'm confused with the concept of \C[THIS;THAT]

[01:49] <japhy> does that match ONE character or TWO?

[01:49] <japhy> that is, does it match one character that is not 'THIS' or 'THAT', or does it match two characters, so long as they aren't 'THIS' and 'THAT' respectively?

[01:50] <mugwump> http://www.geonet.org.nz/x2408156g_l.html # richter 4.2, piddly

[01:50] <japhy> richter is old school.

[01:50] <mugwump> ain't no skool like the old skool

[01:53] <ihb> nothingmuch: hehe, Beatnik is awesome :-)

[01:58] <ihb> japhy: reading up on p6 rules?

[01:58] <japhy> writing Perl6::Rule::Parser (subclass of Regexp::Parser)

[01:58] <ihb> ah

[01:58] <japhy> and trying to figure out how things actually work.

[01:59] <japhy> I don't need to implement them, but I need to create a reasonable object

[01:59] <japhy> \C[THIS;THAT] is not defined at all :(

[02:00] <ihb> it seems there are quite a few things that aren't defined yet.

[02:01] * ihb &

[02:15] <vcv-> perl6 is a big big language

[02:15] <vcv-> its not something like..say..php. which defines a whopping 4 operators and 4 datatypes..with 3,900 built in functions all using different naming conventions

[02:16] <vcv-> and diff. casing as well

[02:16] <vcv-> not big as in bloated, but very carefully defined and covers everything youll need

[02:31] <autrijus> camels are supposed to be stand-alone and survive in the desert

[02:31] <autrijus> :)

[02:31] <svnbot6> r3708, autrijus++ | * Type-to-type smartmatch, e.g. `Int ~~ Num`, now works.

[02:32] <autrijus> japhy: I think \C[CR;LF] should mean the opposite of \c[CR;LF]

[02:32] <eric256> hey autrijus.. i was surpised to see you played my game. ;)

[02:32] <autrijus> japhy: namely, that it matches any two chars, as long as they are not crlf

[02:32] <autrijus> of course I do :)

[02:32] <autrijus> <- learned C with LPC

[02:33] <eric256> LPC?

[02:33] <autrijus> the langauge of LP MUD

[02:33] <autrijus> that was 12 years ago :)

[02:33] <eric256> ahhh. yea i like making mud bots.

[02:34] <eric256> i made an MSN MUD bot a while ago. that was fun. wandering around chatting with people and solving puzzles ;)

[02:35] <eric256> i want to make monster creation a kind of factory... i was thinking about using anonymous subs but how would i call them multiple times like $bat->() xx 3?

[02:37] <autrijus> map $bat, 1..3;

[02:37] <autrijus> like that?

[02:38] <eric256> if bat is a ref to a sub will that call it three times?

[02:38] <autrijus> sure

[02:38] <eric256> oh i didn't catch that. i was thinking map {$x}, 1..3   

[02:38] <autrijus> won't work...

[02:38] <autrijus> map {$x()} 1..3

[02:39] <eric256> yea no kidding. lol.

[02:39] <autrijus> but that's weird, because () cancels {}, so you might as well write map $bat, 1..3

[02:41] <eric256> yea i just never would have thought of using map like that to call a code-ref.

[02:44] <eric256> any way to set the one property equal to another in the construction?  Monster.new(:life(100),max_life(:life)) obviously doesn't work. lol. or can we override BUILD now?

[02:44] <svnbot6> r3709, autrijus++ | * `loop (;0;) {...}` will no longer execute the loop body.

[02:46] <autrijus> eric256: not yet, probably post 6.2.4

[02:47] <autrijus> I'll bbiab...

[02:47] <autrijus> &

[02:50] <kelan> `map $bat, 1..3` would call a sub ref in $bat three times? i would expect it to return a three-element list with each element being the ref in $bat

[02:50] <svnbot6> r3710, autrijus++ | * unTODO, unEVAL, and generally clean up tests.

[02:51] <eric256> i guess map is expecting a code block or code ref

[02:51] <eric256> map {$bat} 1..3; would act as you are saying

[02:51] <kelan> that probably isnt useful, but `map $bat, 1..3` doesnt look like its doing a call anywhere, so it would surprise me

[02:52] <eric256> me too

[02:52] <kelan> hmm. yes, thats a good explanation

[02:52] <eric256> but it certainly wouldn't be the first thing to surprise me. ;)

[02:52] <kelan> its expecting a code block, so it uses the one ref'd in $bat

[02:52] <eric256> yep

[02:53] <kelan> but what would it do if $bat was, say, an arrayref?

[02:53] <kelan> die?

[02:53] <kelan> doesnt seem very nice

[02:54] <eric256> it dies with an message cannot cast form VList to VCode  (well it says alot more than that, but thats the gist)

[02:54] <kelan> heh, well i meant semantically what does it do

[02:55] <kelan> its pretty unfriendly, because what if i don't know what's in $bat when i write the code?

[02:55] <eric256> if you don't know what is in $bat then what could you be hoping it would do in code-ref context?

[02:56] <kelan> hmm

[02:57] <kelan> map doesnt take expressions anymore?

[02:57] <kelan> if thats the case, it makes more sense

[02:57] <kelan> but people probably wont like it

[02:59] <eric256> expressions? i've only ever used map {} @list

[03:00] <kelan> perldoc gives two forms for map in p5: map BLOCK LIST  and   map EXPR, LIST

[03:00] <kelan> i hardly ever use the expression form, myself, but i see it used quite often

[03:01] <japhy> it offers a slight speed boost in certain circumstances.

[03:01] <japhy> there's no need for the overhead of a new scope

[03:01] <japhy> s/^/when/

[03:01] <kelan> what do you think, japhy. do you read `map $bat, 1..3` as calling a coderef in $bat three times?

[03:02] <japhy> kelan - in Perl 5 or Perl 6?

[03:02] <kelan> heh

[03:02] <kelan> well thats the thing~

[03:02] <kelan> !

[03:02] <japhy> no, seriously.

[03:02] <kelan> in perl 6

[03:02] <japhy> ah.

[03:02] <japhy> well, I'd expect you need to do something more than just '$bat'

[03:03] <kelan> me too

[03:04] <kelan> i mean i can get used to it. its just surprising

[03:05] <kelan> oh hmm

[03:05] <japhy> any idea what \C[THIS;THAT] should do in a Perl 6 regex?

[03:05] <kelan> reading the definition of map in S29 makes sense, tho

[03:05] <eric256> multi sub infix:<<.?.>> ($low,$high) {int ( rand ($high - $low) + $low ) + 1; };

[03:05] <japhy> eric - I like that operator.

[03:05] <eric256> anyone see something horribly wrong with that? it is pulling numbers all out of range

[03:06] <kelan> japhy: no, but i think autrijus's assessment was pretty good. opposite of \c[THIS;THAT]

[03:06] <japhy> really?

[03:06] <japhy> kelan - I missed it...

[03:06] <kelan> oh

[03:06] <japhy> does it mean <!before \c[THIS;THAT] ..> ?

[03:06] <kelan> < autrijus> japhy: I think \C[CR;LF] should mean the opposite of \c[CR;LF]

[03:06] <kelan> < autrijus> japhy: namely, that it matches any two chars, as long as they are not crlf

[03:06] <japhy> ah, ok.

[03:06] <japhy> that's what I kinda hoped it would mean

[03:07] <japhy> eric - I don't see why that should be wigging out.

[03:07] <japhy> that's how the function is written normally

[03:07] <eric256> thats what i thought. something else is going on then.

[03:08] <eric256> space after rand....dany meaning full space!

[03:08] <kelan> the thing about map makes sense if you think about it in higher order terms:

[03:08] <kelan> it always takes a code ref, and calls it on each argument

[03:08] <japhy> oh.  well then.

[03:08] <japhy> now that I know that, I won't be surprised.

[03:08] <kelan> pretty sensible

[03:09] <kelan> nod

[03:09] * japhy is just getting into all this "perl 6" business

[03:09] <kelan> but i think esp written with the comma will surprise p5 programmers used to the expression form

[03:09] <kelan> oh well

[03:10] <kelan> eric256: try writing that randomrange function like this:

[03:10] <kelan> multi sub infix:<<.?.>> ($low,$high) {int( rand($high - $low) + $low ) + 1; };

[03:10] <kelan> without space between the function name and opening paren

[03:10] <kelan> p6 is all weird about that now

[03:10] <japhy> I hope only temporarily.

[03:11] <kelan> no

[03:11] <japhy> ick-o.

[03:11] <kelan> it might be only for method calls, but

[03:11] <japhy> well, I suppose it's not a big deal.

[03:11] <eric256> yea i found it. thanks kelan. i am sure there is a reason for it but it drives me nuts

[03:11] <japhy> I don't think I put spaces in between functions and their parens.

[03:11] <eric256> half my p6 bugs have invovled that so far

[03:11] <kelan> these are different: `obj.method (1);` and `obj.method(1);`

[03:11] <kelan> the first calls the method with no args

[03:12] <kelan> i put space inside the parens: `obj.method( 1 );`

[03:12] <svnbot6> r3711, eric256++ | fixed but with .?. operator

[03:12] <svnbot6> r3712, eric256++ | fixed another bug caused by meaningfull space

[03:12] <kelan> so it wont affect me, but it is rather nasty

[03:16] <eric256> anyone know why they added yada operators? ... ??? !!! ?

[03:16] <kelan> ... is nice for pre-declaring

[03:16] <kelan> tells the person there is a real definition somewhere

[03:17] <kelan> i don't really get the others. they do things like warn and die, but otherwise are equivalent to ...

[03:17] <japhy> for complete-ness

[03:26] <autrijus> ??? and !!! are suggested by #perl6

[03:26] <autrijus> I think nothingmuch 

[03:26] <svnbot6> r3713, eric256++ | fixed some bugs with random numbers, monster factories, some balance added, fixed fleeing

[03:26] <svnbot6> r3714, autrijus++ | * Implement ($type_ref ~~ Type) too.

[03:26] <svnbot6> r3715, autrijus++ | * dump.ast can't take nonces (yet)...

[03:26] <autrijus> or somebody else

[03:26] <autrijus> and larry accepted them

[03:26] <kelan> what do they add to just using ...?

[03:26] <kelan> im just curios

[03:26] <kelan> -u-

[03:26] <autrijus> I don't know, it's not my idea

[03:27] <kelan> heh ok:)

[03:27] <autrijus> I guess it's kind of like XXX in comments

[03:27] <kelan> autrijus: what time is it for you?

[03:27] <autrijus> kelan: 11:26am

[03:27] <autrijus> my uptime is something like 20 hours now

[03:27] <kelan> go to sleep:P

[03:27] <kelan> 20 hour uptime is silly

[03:27] <autrijus> that is an excellent idea!

[03:27] <kelan> heh

[03:28] <kelan> why don't you sleep at night?

[03:28] <kelan> code better at night?

[03:28] <autrijus> well, it's like this

[03:28] <autrijus> I hack all day

[03:28] <autrijus> and when I'm about to sleep, I was reminded that I need to do this journal thing

[03:28] <autrijus> but writing journal easiliy takes 1~2hr

[03:28] <kelan> ack really?

[03:28] <autrijus> and during that, I run into bugs etc that needs my attention

[03:28] <autrijus> so I hack some more

[03:28] <kelan> well see

[03:28] <autrijus> etc. :)

[03:29] <kelan> you should just note the bugs and not fix them!

[03:29] <autrijus> that is... not my style :)

[03:29] <kelan> so you go in cycles like 20 hours awake, 12 hours asleep, ...?

[03:29] <autrijus> more like 22 vs 14

[03:29] <autrijus> but yeah

[03:30] <kelan> eep

[03:30] <autrijus> I could do 44 vs 28 often when I'm young ;)

[03:31] <kelan> 28 hours sleeping?

[03:31] <kelan> you are young:P

[03:33] * autrijus decides to not dwell on this topic :)

[03:33] <kelan> heh

[04:07] <svnbot6> r3716, eric256++ | minor updates to quickref docs

[04:13] <mugwump> oh, no, I keep wanting to use junctions in Perl5!

[04:13] <svnbot6> r3717, eric256++ | Rough draft of control structure quickref, feel free to mangle as needed

[04:14] <eric256_> check out http://www.perlmonks.org/index.pl?node_id=453220

[04:14] <eric256_> it provides some concept of junctions to p5

[04:18] <Aankhen``> What is ??? !!! for?

[04:18] <svnbot6> r3718, eric256++ | Changed suggested 'con' to 'control' because of windows conflics with the name 'con'

[04:19] <gaal> !!! dies and ??? warns on unimplemented code

[04:19] <mugwump> so what's ... for if !!! dies ???

[04:19] <gaal> so you can do sub calc { do_something; ??? # FIXME corner case }

[04:20] <mugwump> !!! is shorthand for die "this should never happen"

[04:20] <Aankhen``> Ah.

[04:25] <autrijus> mugwump: ... only dies when the result is actually used.

[04:26] <autrijus> lazy evaluation.

[04:26] <mugwump> aha

[04:26] <mugwump> a poison value, of sorts

[04:37] * autrijus sleeps. :) &

[04:39] <Aankhen``> Sleep well, autrijus.

[04:51] <svnbot6> r3719, eric256++ | Smart match table from S04. Seems like a good QuickRef

[05:32] <svnbot6> r3720, mugwump++ | Move Set to Set::Hash, and Set::Junction to Set, part 1

[05:32] <svnbot6> r3721, mugwump++ | Move Set to Set::Hash, and Set::Junction to Set, part 2

[05:32] <svnbot6> r3722, gaal++ | s/nonces/nonce/ (English usage; http://www.worldwidewords.org/qa/qa-non1.htm .

[05:32] <svnbot6> r3722, gaal++ | I owe an apology to this word, which was already a victim of false splitting.)

[05:32] <svnbot6> r3723, mugwump++ | Sketched beginnings of M1 & M2 prototypes, next to nothing there yet

[06:10] *** chady_ is now known as chady

[07:23] *** castaway_ is now known as castaway

[07:37] <Juerd> morning

[07:38] <webmind> morning :)

[08:04] <masak> morning

[08:04] <nnunley> Morning

[08:32] *** Aankh|Clone is now known as Aankhen``

[08:49] *** nnunley_ is now known as nnunley

[11:11] <robertle> any parrot folks around?

[11:11] <svnbot6> r3724, scook0++ | * Some non-toplevel function type signatures (for readability)

[11:11] <svnbot6> r3724, scook0++ | * Minor tweaks to Haddocks

[11:14] <iblech> morning :)

[11:14] <scook0> iblech: hi

[11:26] <svnbot6> r3725, iblech++ | Usual svn properties, vertical alignment of docs/quickref/reduction.

[11:47] <svnbot6> r3726, iblech++ | Minor test fix (delegation.t) and minor cosmetical cleanups (ChangeLog, Main, Pugs.Help).

[12:13] * SM_ax could barely compile pugs on 512M RAM!

[12:16] <autrijus> iblech: they norm of ChangeLog is to have no trailing dot :D

[12:16] *** autrijus changes topic to: Releng for 6.2.4 in progress | pugscode.org <Overview Journal Logs> | pugs.kwiki.org

[12:17] <iblech> autrijus: Ok (it was mixed, so I counted and noticed there were more lines with ., so I though this was the standard)

[12:17] <autrijus> sure. no worries

[12:18] <svnbot6> r3727, autrijus++ | * `$obj.method($arg1, $arg2)` can now MMD dispatche over all arguments.

[12:18] <autrijus> the smoke looks quite well

[12:18] <autrijus> can you help me by inspecting all the from_perl6_rules failures to see if they make sense?

[12:18] <autrijus> i.e. if the test is plainly broken, fix the test; otherwise mark as :todo<feature>

[12:19] <iblech> Sure :)

[12:19] <autrijus> or rather, :todo<pge> :D

[12:19] <iblech> ;)

[12:19] <autrijus> nah. :todo<feature> is fine :)

[12:20] <iblech> anchors.t -- the usual eval_ok thing with lexical vars, fixing

[12:20] <autrijus> I really wonder if there's a way to make that work

[12:20] <autrijus> duplicating %CALLER:: into lexical space?

[12:20] <autrijus> shallowly link it?

[12:20] * autrijus ponders

[12:28] <svnbot6> r3728, iblech++ | * Unbreak Net::IRC (try {...} --> try {...};)

[12:28] <svnbot6> r3728, iblech++ | * BEGIN {...} --> INIT {...} in example bots

[12:31] <nothingmuch> btw, i noticed that t/statements/control_blocks.t is still not really doing anything

[12:31] <nothingmuch> i'll uncomment it when I get back home, if no one can beat me to it

[12:34] <wolverian> hmm. I thought try is a statement?

[12:34] <iblech> Thought that too, but no, it's like Perl 5's eval {...}, a "normal" sub, which needs trailing ;

[12:35] <wolverian> is that specced? which AES? :)

[12:35] <integral> hmm, I thought perl6 had a general rule now for where ; is needed after } ?

[12:35] <iblech> S04

[12:35] <wolverian> thanks

[12:36] <wolverian> hmm. that makes me wonder. how does perl5 actually figure out when do { } is used in an expression and when as a statement? it can be both, can't it?

[12:37] <wolverian> oh. no. it's just an expression. hmm. I wonder where I got that idea from.

[12:37] <iblech> What was the new syntax for character classes again? <[a..z]>?

[12:37] <wolverian> yes.

[12:37] <iblech> Thanks

[12:38] <wolverian> I really don't like try { } not being statement level. especially if the non-block 'do' syntax is in. (is it?)

[12:38] <wolverian> do try { } # expression :)

[12:42] <svnbot6> r3729, iblech++ | config_h.pl -- Bikesheding.

[12:42] <svnbot6> r3730, iblech++ | First part of t/rules/from_perl6_rules/ fixes (anchors, array_cap, capture).

[12:43] <iblech> autrijus: Hm, I wonder if it's problematic to add -j to the external Parrot options (Parrot.hsc:24)?

[12:43] <iblech> (-j -- JIT)

[12:44] <iblech> I'll try that in a sec

[12:45] <autrijus> sure

[12:47] <robertle> do you guys know parrot?

[12:47] <svnbot6> r3731, autrijus++ | * unTODO

[12:47] <robertle> i have a small question there:

[12:48] <robertle> i am plying around with it and managed to write a *very* small compiler targeting parrot

[12:48] <robertle> but it just uses the built-in types statically

[12:48] <robertle> which isn't what i want

[12:48] <robertle> in the end i would like to have a dynamically typed lang

[12:48] <robertle> now the question: would one just use PMCs for every variable?

[12:49] <robertle> even for the simple ones? or would one want to mix PMCs and primitives?

[12:49] <robertle> and if: is there an example somewhere how this is done?

[12:53] <iblech> robertle: I think so, yes. You would probably have (say) YourLangInt, YourLangStr, etc. But if your compiler is really smart, it cound optimize some YourLang* PMCs to native I, N or S registers

[12:53] <svnbot6> r3732, iblech++ | * Run external Parrot with -j (gives small speedup).

[12:53] <svnbot6> r3732, iblech++ | * charset.t fixes.

[12:54] <robertle> iblech: thanks. so i'll start with PMCs and see what can be optimized later...

[12:54] <iblech> robertle: Yep

[12:54] <autrijus> robertle: irc.perl.org #parrot would probably be helpful :)

[12:55] <robertle> autrijus: ah, cool! i thought here would be the "canonical" irc channel...

[12:56] <Odin-> Not for Parrot... :p

[13:00] <Juerd> What do people here think of a Perl 6 development server, with free access for Perl 6 people?

[13:00] <svnbot6> r3733, iblech++ | Remaining t/rules/from_perl6_rules fixes.

[13:01] * Juerd has already gathered some opinions in private, all positive

[13:03] <autrijus> dinner &

[13:03] <autrijus> robertle: you can mix pmc and prims as long as there's opcode for them

[13:04] <autrijus> robertle: for lang-specific PMCs, see Py* and Perl*

[13:12] <iblech> Juerd: (saying again) Such a server would be useful, methinks

[13:12] <svnbot6> r3734, iblech++ | t/rules/from_perl6_rules -- Forgot two TODOs and one unTODO.

[13:13] <wolverian> Juerd: sounds like a very good idea to me.

[13:13] <robertle> autrijus: i just found tha lua<->parrot compiler, that has a lot of example code that is applicable for me...

[13:14] <kungfuftr> robertle: knewt is a big lua fan too

[13:16] <broquaint> lua++ # see. Far Cry

[13:23] <svnbot6> r3735, iblech++ | Fix "{ BEGIN { 42 } }" (t/pugsbugs/begin_in_strings.t, moved to t/syntax/).

[13:24] <autrijus> iblech: I need to run for dinner now... I'll tackle t/oo/submethods.t and t/operators/arith.t meanwhile

[13:24] <autrijus> (just so we don't duplicate work)

[13:24] <iblech> autrijus: Ok

[13:28] <Juerd> I've ordered the parts for the box

[13:28] <Juerd> I expect to have it online by the end of this week

[13:28] <Juerd> (Depends on the colocation)

[13:29] <wolverian> Juerd++

[13:31] <Juerd> This all started when I registered perl6.nl and needed a purpose :)

[13:31] <Juerd> I think in this way I can be more helpful than by donating money

[13:32] <wolverian> I wish I had something to donate.

[13:32] <iblech> stevan: FYI, File-Spec -- t/10_unix_test -- hangs

[13:32] <Juerd> I have little, but I get parts at wholesale, and made a deal for free colocation this morning

[13:34] <Juerd> The specs: Pentium 4 2.4 GHz, 1024 MB DDR, 80 GB S-ATA in RAID

[13:35] <Juerd> (Intel mainboard)

[13:39] <iblech> Fixing BEGIN { exit }, CHECK { exit }, and INIT { exit }...

[13:45] <wolverian> Juerd: now I'm sad. my only server currently is a 200mhz pentium pro, with 48mb ram. :)

[13:46] * Juerd thought it'd be best to spend some extra on memory and some less on cpu, given haskell :P

[13:46] <wolverian> heh. :)

[13:55] <iblech> BTW, Corion++ # wrote pugsrun/04-dash-ce.t which immediately discovered a pugs -c bug

[14:01] <Juerd> Suggestions for a hostname? :)

[14:01] <Juerd> Maybe a contest would be fun?

[14:04] <webmind> hostname for?

[14:05] <svnbot6> r3736, iblech++ | Fixed exit_in_begin.t.

[14:10] <svnbot6> r3737, iblech++ | * Fixed BEGIN { exit } and CHECK { exit }.

[14:10] <svnbot6> r3737, iblech++ | * Moved t/pugsbugs/exit_in_begin.t to t/statements/ and added

[14:10] <svnbot6> r3737, iblech++ |   t/statements/exit_in_check.t.

[14:12] <Juerd> webmind: dedicated perl6 box

[14:12] <integral> hmm, something from LotR maybe to stay in theme?

[14:15] <kolibrie> I like that

[14:16] <webmind> Juerd, woody woodpecker? fast, but completely mad ?

[14:16] <svnbot6> r3738, autrijus++ | * unbreak arith.t and submethods.t

[14:16] <webmind> :)

[14:16] <nothingmuch> dogloo

[14:16] <autrijus> rehi

[14:17] <autrijus> hm, it looks like BUILD will strategically very helpful

[14:17] <autrijus> I'll attempt a quick implementation. :)

[14:22] <Khisanth> even earlier than BEGIN?

[14:22] <autrijus> no, BUILD is object initialisation

[14:23] <Khisanth> bah! why couldn't it have been CREATE :p

[14:24] <iblech> Khisanth: Sure! submethod CREATE(...) {...} &BUILD ::= &CREATE :)

[14:26] <Khisanth> what is a submethod?

[14:27] <iblech> A method which is not inherited and which is only called if you directly call it

[14:27] <iblech> There's the special submethod BUILDALL, which calls all other BUILDs of all classes involved

[14:27] <iblech> So each subclass can have its own initializer without having to do stuff like $self->SUPER::init()

[14:27] <Khisanth> so it's like some sort of private method

[14:29] <iblech> Well, only that it's not private :) $obj.submethod or $obj.Class::submethod work

[14:29] <iblech> S12 prefers the term (IIRC) infrastructural methods

[14:33] <nothingmuch> bah, @Larry have still not commented on lazy context

[14:33] <nothingmuch> *sigh*

[14:34] <autrijus> nothingmuch: I got warnocked for nearly 4 days :)

[14:35] <nothingmuch> while we're on the subject of lazy

[14:35] <nothingmuch> i'd like this feature:

[14:36] <nothingmuch> that way i could say

[14:36] <nothingmuch> being able to know if you're being executed to satisfy lazyness

[14:36] <nothingmuch> my $var = maybelazy call();

[14:36] <nothingmuch> and if this code is not lazified by the user, this is strict

[14:36] <nothingmuch> if not, it's lazy

[14:37] <nothingmuch> and while we're on the topic, be able to lazify AOP style

[14:37] <nothingmuch> at the invocant/method granuality

[14:37] <iblech> my $var = want.lazy ?? lazy { call() } :: call();

[14:37] <autrijus> right.

[14:37] <nothingmuch> iblech: yep, sort of

[14:38] <nothingmuch> so lazify(&Class::DBI::get)

[14:38] <nothingmuch> but being able to decide at what instance level

[14:53] <eric256> the only responses on the lazy context had nothing to do with lazy context

[14:57] <Juerd> webmind: Far too long

[14:57] <Juerd> webmind: And woody without the woodpecker is confusing with debian woody, which it won't run

[14:58] <svnbot6> r3739, iblech++ | Tentative implementation of nothingmuch's lazy proposal.

[14:58] <svnbot6> r3740, autrijus++ | * move enterEvalContext to Monads.hs so Prim can use it.

[14:58] <svnbot6> r3740, autrijus++ | * introduce the `maybeM` abstraction that lifts fmapM into monads.

[14:59] <webmind> Juerd, yes

[14:59] <autrijus> iblech++ # jfdi on nothingmuch's proposal

[15:00] <iblech> :) autrijus, style question: Are tabs in *.hs considered bad?

[15:01] <autrijus> iblech: well, not bad perse, it's just my vim will accidentally retab it form time to time

[15:02] <autrijus> I guess we can do something like

[15:02] <autrijus> -- vim: expandtab shiftwidth=4:

[15:02] <autrijus> to style it

[15:02] * iblech sets these two settings in his ~/.vimrc...

[15:03] <autrijus> danke

[15:06] <eric256> iblech so we have a lazy { } construct now?

[15:06] <iblech> eric256: Yep :)

[15:07] <iblech> eric256: (It was actually extremely simple to implement, as all Haskell "variables" are lazy per default)

[15:09] <Forth_> "It is more or less a description of how how Perl 6 programs" in 02Internals.pod

[15:09] <svnbot6> r3741, iblech++ | ChangeLog -- Added note about `lazy {...}`.

[15:10] * Forth_ has no tool now

[15:10] <autrijus> Forth_: ok, fixed

[15:15] * cognominal is about to switch to vim. it seems easier than to figure utf8 in emacs. comments?

[15:15] <svnbot6> r3742, autrijus++ | * typo fix from Forth

[15:17] <Limbic_Region> greetings and salutations all

[15:17] <Limbic_Region> autrijus (or anyone) - got a windows binary of the latest (or at least sometime today) of pugs executable?

[15:18] <Limbic_Region> I have a few cycles to work on my latest project and Jonathan's build was from last Friday

[15:18] <Limbic_Region> some of the bugs I had to work around that were supposedly fixed are still b0rk from my perspective

[15:18] <PerlJam> Limbic_Region: start using linux and keeping up won't be a problem  ;-)

[15:19] <Limbic_Region> PerlJam - I have no problem at home

[15:19] * PerlJam just had the weird experience of seeing src/warnock.c in a parrot build

[15:20] <Limbic_Region> well - I won't as soon as I get net access again (Wednesday)

[15:20] <PerlJam> (at least that's what I thought I saw)

[15:20] <Khisanth> PerlJam: that would tell him nothing about whether or not it's working on windows!

[15:20] <PerlJam> turns out it was just a juxtaposition of warnings.c and packout.c

[15:20] * Limbic_Region has very limited capabilities on his government workstation and tends to play by the rules

[15:23] <Limbic_Region> ok - perhaps someone is willing to try a nopaste code snippet and tell me if it works with the latest build?

[15:23] <svnbot6> r3743, iblech++ | Various test fixes.

[15:23] <svnbot6> r3744, iblech++ | Added clarifying note to t/syntax/parsing_gt.t.

[15:23] <Limbic_Region> perlbot nopaste

[15:23] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[15:23] <iblech> Limbic_Region: Sure

[15:24] <ninereasons> PerlJam, that reminds me to ask, what does it mean "to Warnock" ?  "ignore"? 

[15:25] <PerlJam> ninereasons: http://en.wikipedia.org/wiki/Warnock

[15:25] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "Is this bug fixed?" (127 lines, 3.6K) at http://sial.org/pbot/10339

[15:26] <ninereasons> thank you, PerlJam :)

[15:26] <Limbic_Region> iblech - if that doesn't work then the predecrement/postincrement bug still exists in one form or another

[15:26] <PerlJam> ninereasons: sure, no problem.

[15:26] <iblech> *** Modification of non-creatable array value attempted: -3

[15:26] <Limbic_Region> iblech - so the bug is still there

[15:27] <Limbic_Region> it goes away if you uncomment the predecrement above

[15:27] <iblech> (The error line: @position[ --$cur ]++)

[15:27] <Limbic_Region> and change the array indice from --$curr to just $cur

[15:27] <PerlJam> okay ... I've just built a parrot and am confused as to why it still says it's r8114 when I've clearly updated to r8143

[15:27] <Limbic_Region> $cur is getting decremented twice for some reason

[15:27] <Limbic_Region> separating it makes the problem go away

[15:27] <PerlJam> I'll just assume it's a parrot bug in the build

[15:28] <Limbic_Region> but my simplistic test case apparent works as expected iblech

[15:28] <Juerd> Wow, warnock has its/his own wikipedia page now? :)

[15:29] <Limbic_Region> iblech - try just the following

[15:29] <Limbic_Region> pugs -e "my $curr=4; my @array=1..5;@array[ --$curr ]  ; say $curr"

[15:29] <Limbic_Region> actually, I would like people on different platforms to try it

[15:29] <Limbic_Region> on my Win32 build - it prints "2\n" which is WRONG

[15:29] <iblech> Limbic_Region: Yeah, you're right, the index is evaluated twice

[15:29] <Limbic_Region> but supposedly that bug was already fixed

[15:30] <iblech> Limbic_Region: It prints 3 here

[15:30] <Limbic_Region> now you see why I find it odd

[15:30] <Limbic_Region> as a 1 liner it works for you

[15:30] <Limbic_Region> but in the full code snippet it does not

[15:30] <iblech> Limbic_Region: It seems the index is only evaluated twice, if the whole expression is post-incremented (@array[--$curr]++)

[15:31] <Limbic_Region> and as a 1 liner for me (albeit from a Friday build) it doesn't work

[15:31] <Limbic_Region> damn

[15:31] <Limbic_Region> that's my client eating plus symbols

[15:31] <Limbic_Region> what I pasted indeed had a postincrement

[15:31] <Limbic_Region> notice how far the semicolon is away?

[15:32] <Limbic_Region> ok - so that's the test case then

[15:33] <iblech> Limbic_Region: Ah, yes. I'll add a pugsbugs test and investigate

[15:33] <svnbot6> r3745, iblech++ | More test fixes.

[15:33] <Limbic_Region> thanks iblech

[15:33] <Limbic_Region> mind testing another one?

[15:34] <iblech> Sure, next bug :)

[15:36] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "Lines with Potential bugs have been marked" (126 lines, 3.5K) at http://sial.org/pbot/10340

[15:36] <Limbic_Region> ok - two lines in that one

[15:36] <Limbic_Region> having to do with 1..$foo - 3

[15:36] <Limbic_Region> supposedly it was also fixed

[15:37] <iblech> Limbic_Region: Yeah, (isolated) they work here

[15:38] <Limbic_Region> ok

[15:38] <Limbic_Region> how about one more?

[15:38] <iblech> Sure

[15:38] <masak> the reduce operator is broken

[15:38] <Limbic_Region> this one will require debugging to see what's going on

[15:38] <Limbic_Region> as it won't spit out an error

[15:38] <Limbic_Region> I believe it goes into an infinite loop

[15:39] <Limbic_Region> but my minimal test case works - grrr

[15:39] <masak> [+] (1,2,3) gives an error

[15:39] <masak> unexpected "{"

[15:39] <iblech> masak: Works fine here. :)

[15:39] <masak> :/

[15:39] <iblech> masak: Your revision?

[15:40] <masak> I have revision 3745

[15:40] <masak> err, maybe I didn't compile it, hold on... :)

[15:40] <iblech> :)

[15:41] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "See the # Possible Bug line" (125 lines, 3.6K) at http://sial.org/pbot/10341

[15:41] <PerlJam> sial.org does a decent job syntax highlighting perl6

[15:41] <Limbic_Region> iblech - so the the last one worked as expected right - no problem removing the parens in 1..$foo - 3?

[15:41] <Limbic_Region> this one should just sit there - no output

[15:42] <iblech> Limbic_Region: Yep

[15:42] <Limbic_Region> not sure how to debug if you get the same behavior though

[15:42] <autrijus> eric256: hm, is the warnings in wizards.p6 intentional?

[15:42] <iblech> Limbic_Region: Indeed, infinite loop

[15:42] <autrijus> eric256: can I take them away?

[15:42] <Limbic_Region> my minimal test case didn't exhibit the bug

[15:42] <iblech> (it seems)

[15:42] <autrijus> also, BUILD is there now -- you can make use of it

[15:42] <iblech> autrijus++ :)

[15:42] <Limbic_Region> ok - so if you have any spare tuits ;-)

[15:43] <Limbic_Region> yay - being persistent pays off as he did find at least 1 real bug 

[15:43] <Limbic_Region> wooo hooo

[15:43] <svnbot6> r3746, autrijus++ | * BUILD.

[15:43] <ingy> autrijus: I was thinking that you could give a little Haskell workshop at the start of the Pugs hackathon

[15:43] <autrijus> ingy: sure thing

[15:44] <ingy> autrijus: will any other Haskell "experts" be there?

[15:45] <autrijus> I lost the list

[15:45] <autrijus> nothingmuch will be there

[15:45] <autrijus> theorbtwo too?

[15:45] <autrijus> so that's two

[15:46] <Limbic_Region> iblech - thanks for your help

[15:46] <iblech> np

[15:46] <Limbic_Region> if you find out anything with that infinite loop (which oddly enough works as 2 separate statments) let me know

[15:46] * Limbic_Region is off to find foo

[15:46] <Limbic_Region> food even

[15:47] <vitaminmoo> Hmm, is it a my local problem that's causing current parrot svn to not compile, or is it a repo-side thing?

[15:47] <masak> iblech: everything works; it was just me being un-updated :)

[15:48] <iblech> masak: :)

[15:48] <masak> &

[15:48] <autrijus> iblech: submethod.t is weird

[15:48] <svnbot6> r3747, iblech++ | Added Limbic_Region++'s test case.

[15:48] <autrijus>   class Baz         { submethod blarb() { $was_in_baz_submethod++ } }

[15:48] <autrijus>   class Grtz is Baz { submethod blarb() { $was_in_grtz_submethod++ } }

[15:49] <autrijus> and it expects Grtz.new.blarb to call _both_ blarb()s

[15:49] <autrijus> is that correct?

[15:49] <autrijus> there's no blarbALL, here

[15:49] <autrijus> or am I missing something?

[15:50] <iblech> autrijus: You're correct. I even asked on p6l if it's correct that only Grtz::blarb is called, but apparently missed to fix the test

[15:50] <iblech> Only Grtz::blarb should be called

[15:50] <iblech> But if one says Grtz.new.Baz::blarb then Baz::blarb should be called

[15:50] <autrijus> right.

[15:50] <autrijus> okay, I fixed the test accordingly

[15:53] <iblech> Ok, you may want to put a ref to thread "BUILD and other submethods" of p6l in the test.

[15:53] <autrijus> can you add it if you have it handy?

[15:53] <iblech> Sure

[15:53] * autrijus is still deep in relenging

[15:53] <autrijus> danke

[15:53] <autrijus> iblech++

[15:53] <svnbot6> r3748, autrijus++ | * fix submethod.t

[15:54] <gaal|work> oh, releng! i'm at $work and can't help much :(

[15:54] <autrijus> that's fine :)

[15:54] <autrijus> enjoy $work

[15:54] <gaal|work> thanks :)

[15:57] <iblech> Limbic_Region: The infinite loop bug is indeed weird...

[16:05] <broquaint> I've got a patch for map.t, who can/should I bounce it on to?

[16:06] <svnbot6> r3749, iblech++ | Added p6l ref to submethods.t.

[16:06] <svnbot6> r3750, autrijus++ | * fix parrot codegen

[16:06] <iblech> broquaint: nopaste it here

[16:07] <broquaint> Shouldn't failing eval_ok()s not break the whole test unit?

[16:07] <iblech> Yep

[16:08] <broquaint> Hrm ...

[16:08] <broquaint> Well, I'll paste what I've got anyhow.

[16:08] <autrijus> down to 13 fails

[16:09] <broquaint> What's the nopaste link?

[16:09] <iblech> perlbot nopaste

[16:09] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[16:10] <pasteling> "broquaint" at 81.187.213.103 pasted "New map.t with the first eval_ok() breaking the whole unit" (100 lines, 3.3K) at http://sial.org/pbot/10342

[16:12] <svnbot6> r3751, iblech++ | Updated docs/quickref/README and moved quickref/match to quickref/smartmatch.

[16:12] <svnbot6> r3752, autrijus++ | * unTODO now BUILD is working

[16:13] <iblech> broquaint: the first eval_ok test should fail, as map { $_ => 1 } @list is parsed (correctly) as map (hash { $_ => 1 }) @list

[16:14] <iblech> broquaint: It does parse, but during execution it dies

[16:14] <broquaint> Along with the rest of map.t, iblech.

[16:15] <broquaint> And I thought the "map { $_ => 1 } @list" was meant to magically return a list of hashes, no?

[16:15] <iblech> broquaint: Yeah, but that's a different problem ;) -- Pugs tries to cast the hash into a code, which of course doesn't work, and then dies untrappable

[16:16] <autrijus> down to 6 pugsbugs!

[16:16] * theorbtwo is not a haskell expert by any stretch.

[16:16] <autrijus> but theorbtwo hacked in eval_haskell :)

[16:16] <broquaint> Ah, so type errors aren't for the likes of eval_ok() then?

[16:16] <iblech> broquaint: No, if you want a LoH you'd have to write map { scalar { $_ => 1 } } @list, I think

[16:17] <iblech> broquaint: It depends, most type errors are catched, but, as you see, some are not.

[16:17] <svnbot6> r3753, autrijus++ | * eval_haskell now sets $! on failure again

[16:17] <svnbot6> r3754, autrijus++ | * initialise $_ in default_scalar.t

[16:17] <svnbot6> r3755, autrijus++ | * TODO and cleanup var.t

[16:17] <iblech> autrijus: :)

[16:17] <broquaint> I see, thanks, iblech :)

[16:18] <autrijus>  map { hash($_ => 1) }

[16:18] <autrijus> is perhaps more readable

[16:18] <autrijus> iblech: do you have more tuits to attack pugsbugs? :)

[16:19] <autrijus> I'm doing t/pugsbugs/unhashify.t and t/pugsbugs/postincrement_in_subscripts.t -- I wonder if you can take a look at t/pugsbugs/and_precedence.t, t/pugsbugs/bare_block_with_dollar_underscore.t and maybe t/pugsbugs/map_constant_list.t

[16:19] <autrijus> that's all there's left

[16:19] <Limbic_Region> iblech - so other than weird, any idea what's going on?

[16:19] <broquaint> Can you see a way of running that test (i.e ensuring breakage) without that untrappable error, iblech (or anyone else for that matter)?

[16:20] <iblech> autrijus: map_constant_list -- I don't think ("foo","bar").map(){ $_.substr(1,1) } is valid syntax, is it?

[16:21] <autrijus> of course not

[16:21] <iblech> broquaint: You can try to use "try": is try {...}, 17, ...

[16:21] <iblech> broquaint: But some type errors are (currently) really untrappable for the Perl-space

[16:22] <iblech> autrijus: Ok, then map_constant_list is fixed :)

[16:24] <pasteling> "broquaint" at 81.187.213.103 pasted "map.t with a few extra tests" (99 lines, 3.3K) at http://sial.org/pbot/10343

[16:24] <svnbot6> r3756, iblech++ | Added broquaint++'s map test.

[16:24] <svnbot6> r3757, iblech++ | Fixed map_constant_list.t -- will move to a new dir next.

[16:24] <svnbot6> r3758, iblech++ | Moved t/pugsbugs/map_constant_list.t to t/builtins/lists/map_constant_list.t.

[16:24] <broquaint> Thanks, iblech :)

[16:25] <iblech> Limbic_Region: By slapping "say 1", "say ", etc. to most lines, I was able to track down the root of the infinite loop, but then I saw you've already marked it :) I haven't yet found out more

[16:25] <iblech> broquaint: np :)

[16:33] <knewt> eeeek. ok, not having purchased the plane tickets yesterday i have to travel back on the sunday to get a reasonable price now. the flight leaves at 9am on a sunday. /me cringes at having to get to the airport at 7am on a sunday morning

[16:37] <pasteling> "AtnNn" at 66.36.135.156 pasted "are these bugs?" (37 lines, 440B) at http://sial.org/pbot/10344

[16:37] <Limbic_Region> iblech - heh

[16:38] <Limbic_Region> I knew where it was - just not wy

[16:38] <Limbic_Region> why even

[16:38] <Limbic_Region> my isolated test case made the problem go away and I haven't figured out the right combination of things to cause it to reappear

[16:38] <Limbic_Region> was hoping you might know some tricks I didn't

[16:40] <iblech> AtnNn: [|] and [&] are bugs

[16:40] <iblech> AtnNn: my $a, $b is a missing feature

[16:40] <Juerd> I thought they were operators.

[16:41] <iblech> :)

[16:41] <iblech> AtnNn: $*_=5;sqrt(4); works fine here

[16:42] <iblech> Juerd: I referred to the bug report of AtnNn

[16:44] <AtnNn> its confusing, when you declare a variable and pugs prints out the result fo the previous line

[16:44] <iblech> Agreed.

[16:49] <iblech> AtnNn: I could reset $*_ to undef before running commands in the interactive shell, but I then it'd be confusing that manually setting $*_ won't work

[16:51] <gaal|work> Juerd, ping

[16:51] <Juerd> pong

[16:51] <gaal|work> how about, for the hostname... "hump" ? :-)

[16:52] <Juerd> See my rationale against camel :)

[16:52] <Juerd> Though hump is much cuter already.

[16:52] <PerlJam> Juerd: I like "onion" best btw.

[16:52] <Juerd> I quite like onion, but I never received the message that suggests it...

[16:52] <Juerd> I wonder how that went wrong.

[16:53] <gaal|work> [email@hidden.address] Juerd.

[16:53] <PerlJam> Maybe it was only sent to the list and you just haven't gotten it yet.

[16:53] <Juerd> Oh, I did receive that message

[16:53] <Juerd> I even replied to it!

[16:53] <Juerd> Just completely overlooked that paragraph

[16:53] <gaal|work> it was a short paragraph.

[16:54] <gaal|work> While I'm here, can I have either 'gaal' or 'roo' please?

[16:55] <Juerd> You can, but please mail me 

[16:55] <gaal|work> sure.

[16:56] <Juerd> That eases replying :)

[16:56] * gaal|work .go(:home) &

[16:56] <Juerd> Bye

[17:05] <svnbot6> r3759, iblech++ | Bare blocks with $_ fix -- part 1.

[17:07] <wolverian> featherhump?

[17:07] <Limbic_Region> a sort block can have any code you want in it provided it returns -1, 0, 1 right?

[17:07] <Limbic_Region> so you could say $^a for instance

[17:08] <iblech> Limbic_Region: Yep

[17:09] <Limbic_Region> iblech - will see what I can do about debugging

[17:10] <Limbic_Region> I know what I expect and might be able to see what's going wrong if I can determine at what point it stops doing that

[17:13] <iblech> Limbic_Region: Ok, that's a good idea!

[17:13] <iblech> autrijus: ruleStandaloneBlock now works WRT $_ correctly, but there're some blocks which aren't detected as standalone blocks

[17:14] <iblech> bbiab & # food

[17:17] <Limbic_Region> iblech - might be a problem with sorting an empty list

[17:17] <svnbot6> r3760, autrijus++ | * Hash and array sub parameters are now read-only by default, same as scalars.

[17:17] <autrijus> iblech++

[17:17] <clkao> (is copy)++

[17:18] <Limbic_Region> getting somewhere now

[17:18] <Limbic_Region> I think I might be able to make a minimal testcase

[17:32] <svnbot6> r3761, autrijus++ | * fix head.p6 golfing.

[17:32] <svnbot6> r3762, autrijus++ | * Slurpy hash parameters no longer count as nonslurpy during arity matching.

[17:32] <iblech> re. Limbic_Region: That'd be excellent! :)

[17:33] <Aankhen``> W00t!

[17:33] <Aankhen``> I'm getting a dual-core Pentium 630!

[17:34] <Aankhen``> Or perhaps an AMD dual-core processor, if they're released soon and at a reasonable price...

[17:38] <Limbic_Region> iblech - might be an optimization 

[17:38] <Limbic_Region> somehow return () is getting changed to return undef

[17:38] <Juerd> Why?

[17:38] <Juerd> undef in list context is 1 element!

[17:38] <Juerd> While () in list context is 0 elements

[17:38] <Juerd> Yet undef in scalar conetxt

[17:38] <Juerd> context too

[17:38] <Limbic_Region> Juerd - I don't know why

[17:38] <gaal> rehi

[17:38] <Limbic_Region> without the sort block it works correctly

[17:39] <iblech> Juerd: You're correct, I think, it's a bug in Pugs (it seems)

[17:39] <Limbic_Region> adding a sort block somehow affects it

[17:39] <Limbic_Region> I am minimizing the test case but as it stands now - it is pretty small

[17:40] <iblech> Limbic_Region++, very good

[17:40] <Limbic_Region> it gets even more interesting

[17:41] <Limbic_Region> if a statement after the return () is present - the bug appears

[17:41] <Limbic_Region> without it

[17:41] <Limbic_Region> it disappears

[17:41] <Limbic_Region> even though that statement never gets executed

[17:41] <iblech> bad...

[17:42] <Limbic_Region> perlbot nopaste

[17:42] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[17:42] <gaal> is everythinhg in src/syck pristine or are local changes ok? i want to look into a warning.

[17:43] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "minimized test case" (20 lines, 411B) at http://sial.org/pbot/10345

[17:43] <autrijus> gaal: feel free to commit local changes as long as you report to why

[17:43] <svnbot6> r3763, autrijus++ | * unTODO.

[17:43] <autrijus> I mean, Why

[17:43] <Limbic_Region> iblech - that is about as small as I can make it

[17:43] <Limbic_Region> now let me explain why it is so interesting

[17:44] <Limbic_Region> without the sort block - the bug goes away

[17:44] <Limbic_Region> the bug doesn't manifest itself unless there is a statement after the return () line

[17:44] <Limbic_Region> so it only shows up with the sort block AND a statement after the return () line

[17:44] <Limbic_Region> if those two conditions are present, return () seems to change to return undef

[17:45] <Limbic_Region> so the test case is easy enough

[17:45] <iblech> Now this is *really* weird

[17:45] <Limbic_Region> @foo.elems should be 0 but it is 1

[17:46] <Limbic_Region> why and how to fix it on the other hand - I have no idea

[17:47] <iblech> Maybe it's the sort block which converts the () to undef

[17:48] <eric256> i've seen the @foo.elems = 1 when the list is empty... not nice. but i couldn't nail it down and make it happen on a regular basis

[17:50] <autrijus> hm

[17:50] <autrijus> map({ 3 } 1..10);

[17:51] <autrijus> should this be allowed?

[17:51] <eric256> which part of that is in contention?  the parens without comma?

[17:51] <autrijus> the lack of comma after }

[17:51] <Aankhen``> IMHO, it shouldn't be allowed.

[17:52] <autrijus> ok.

[17:52] <Aankhen``> When you use parens, you're saying "Do What I Say" -- atleast, that's my interpretation of it -- and that means you want to be explicit about the parameters.

[17:52] <autrijus> anyone want to write a test for it?

[17:53] <Aankhen``> One sec, let me sync up

[17:53] <Aankhen``> .

[17:53] <Aankhen``> I really hope I have a copy of Pugs built and installed.

[17:53] <Limbic_Region> sorry - got dc there

[17:53] <Aankhen``> WB.

[17:54] <Limbic_Region> hmmm - seems my client is having a problem

[17:54] <Limbic_Region> in any case - the empty array isn't really empty - it has a single undef element which it shouldn't

[17:55] <Aankhen``> autrijus >> Does that apply to all sub/method calls?

[17:55] <autrijus> Aankhen``: sure, but just test map{}

[17:55] <autrijus> is enough

[17:56] <Aankhen``> Yeh, I was wondering about the file to put it in.

[17:56] <Aankhen``> t/subroutines/sub_arg_errors.t?

[17:56] <autrijus> sure

[17:56] <Limbic_Region> iblech - if you need further help from me you might want to email

[17:56] <Aankhen``> OK.

[17:57] <Limbic_Region> not sure what's up with my client

[17:58] <svnbot6> r3764, autrijus++ | * `map({...} @list)` is no longer valid syntax.

[17:58] <svnbot6> r3764, autrijus++ | * `foo 3 and foo 4` is now parsed as two separate function calls.

[17:59] <autrijus> preflight starting soonish.

[17:59] <autrijus> iblech: how's bare_block_with_dollar_underscore.t  coming along?

[18:01] <iblech> autrijus: All blocks which are correctly detected as lone blocks work, e.g. { $_ + 5 }. But, for example, { 42; { $_ } } does not work, dunno why yet

[18:01] <autrijus> ok, I'm taking a look

[18:01] <autrijus> t/builtins/lists/uniq.t parsefail -- take a look?

[18:01] <autrijus> may be because of r3764

[18:02] <iblech> It'd be helpful if Parsec had some kind of tracing switch, which'd cause it to print all rules it tries to STDERR

[18:02] <iblech> Sure

[18:02] <autrijus> iblech: you can do that with trace calls

[18:02] <autrijus> ruleName = trcae ("Trying me") $ do

[18:02] <autrijus> ruleName = trcae ("Trying me") $ rule "foo" $ do

[18:02] <autrijus> s/trcae/trace/

[18:03] <iblech> autrijus: Yeah, doing so, but it'd be cool if Parsec would do that, possibly even with nice indenting

[18:03] <autrijus> with some hacking you may be able to hook it into the "rule" :)

[18:03] <autrijus> I mean the "rule" function itself

[18:05] <iblech> Yep. Will do that probably then, when I find time

[18:05] <Limbic_Region> actually - I think client issues have gotten fixed

[18:05] <Limbic_Region> I also seem to be reducing it further

[18:07] <autrijus> I fixed bareblock

[18:07] <iblech> WOW! How?

[18:07] <iblech> FAST! :)

[18:07] <autrijus> see diff. committing

[18:08] <Limbic_Region> perlbot nopaste

[18:08] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[18:08] <autrijus> done

[18:08] <gaal> build entered smoke a minute ago, shall i restart?

[18:08] <autrijus> gaal: no need to... wait till preflight

[18:09] <autrijus> iblech: when in doubt use brute force

[18:09] <gaal> hm, to get past the "can't locate File/Spec.pm" error, do i need blib/ in perl6lib?

[18:09] <gaal> ...or something like that? :)

[18:10] <iblech> make

[18:10] <svnbot6> r3765, iblech++ | Fixed uniq.t.

[18:10] <svnbot6> r3766, autrijus++ | * auto-executing bare blocks no longer take any arguments.

[18:10] <gaal> hmmm, make smoke doesn't create a blib

[18:11] <iblech> autrijus: *understands diff*. It seems a little bit hacky, but works :)

[18:11] <iblech> gaal: Yeah, then make w/o params

[18:11] <iblech> gaal: Yeah, then make w/o params first

[18:11] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "Weird bug test case - see comments for how to test and what to change to change behavior" (15 lines, 372B) at http://sial.org/pbot/10346

[18:11] <gaal> thanks.

[18:12] <gaal> is make =:= make optimized these days?

[18:12] <Limbic_Region> iblech - that is a minimal test case - step 1 introduces the weird behavior, step 2 makes it go away again, I also showed how to test for the behavior .elems

[18:12] <Limbic_Region> and s/iblech/iblech, autrijus, gaal, et all/

[18:12] <Limbic_Region> except the first Step 1 should be Step 2

[18:12] <Limbic_Region> grrr

[18:13] <autrijus> gaal: yes.

[18:13] <iblech> gaal: make unoptimized; make; make smoke

[18:13] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "Corrected weird problem test case" (15 lines, 372B) at http://sial.org/pbot/10347

[18:14] <gaal> on my machine optimized pays off

[18:15] <pasteling> "iblech" at 80.81.4.110 pasted "more reduction" (12 lines, 330B) at http://sial.org/pbot/10348

[18:15] <svnbot6> r3767, autrijus++ | * make the test more straightforward now we don't need the lives_ok.

[18:16] <gaal> *** Can't modify constant item: VUndef at t/builtins/undef.t line 222, column 9-89

[18:17] <Limbic_Region> iblech - I am not sure how much sort has to do with it

[18:17] <Limbic_Region> I can now get the weird behavior without sort

[18:17] <Limbic_Region> though it IS how I found it in the first place

[18:18] <Limbic_Region> in any case - I know nothing of Pugs internals so I have taken it as far as I know how

[18:19] <pasteling> "iblech" at 80.81.4.110 pasted "Even more reduction" (5 lines, 122B) at http://sial.org/pbot/10349

[18:20] <gaal> what does *sub mean?

[18:20] <Limbic_Region> yay iblech - woo hoo

[18:20] <Limbic_Region> now it is important to verify that once that gets fixed that the introduction of the sort block doesn't break it again

[18:20] <iblech> gaal: run sub etc and then flatten

[18:21] <gaal> ah, right.

[18:21] <autrijus> I'm finally done with bugtracing.

[18:21] <Limbic_Region> remember the predecrement problem was supposedly fixed but in the context of an overall postincrement it was still there

[18:21] <autrijus> iblech: make that nopaste into tests?

[18:21] <iblech> autrijus: Yep

[18:21] <autrijus> ok. I'll begin preflight anyway

[18:22] <autrijus> please :todo<bug> it :)

[18:22] <iblech> sure

[18:22] * Limbic_Region hi-fives iblech

[18:22] <autrijus> Limbic_Region++

[18:22] <autrijus> iblech++

[18:22] <gaal> http://forum2.org/gaal/pugs/smoke-cygwin.html # r3637

[18:23] <autrijus> iblech: oh, Net::IRC is probably ready to be OOified now (but post-6.2.4)

[18:23] <autrijus> gaal: please try 3767 :)

[18:23] <Corion> The GHC mailing list pointed me in the general direction of System.Win32 - I seem to have missed that completely %-)

[18:23] <iblech> autrijus: :) Very good

[18:24] <gaal> errr :) 3676, i can't type :)

[18:24] <Corion> Oh. It also seems to be a separate library and not with stock GHC.

[18:24] <autrijus> still try 3767 :)

[18:24] <autrijus> Corion: huh? I think it's with ghc

[18:24] <gaal> hmm, interesting :)

[18:24] <autrijus> 6.4 at least

[18:24] <Corion> autrijus: Hmm - I always look via http://www.haskell.org/ghc/docs/latest/html/libraries/index.html , and it's not there

[18:25] <gaal> where'd the harness get that bogus r from?

[18:25] <Corion> Is there some other way I should look ?

[18:25] <autrijus> Corion: your own system

[18:25] <Corion> autrijus: Oh :)

[18:25] <autrijus> c:\ghc\ghc-6.4\docs\libraries

[18:25] <autrijus> or something like that

[18:26] <Corion> Still no System.Win32

[18:26] <revdiablo> Limbic_Region: ping

[18:26] <Limbic_Region> autrijus - you plan on releasing 6.2.4 sometime today?

[18:26] <gaal> full moon tonight! you feel lucky--more--

[18:26] <revdiablo> Limbic_Region: checkitout: http://www.perlmonks.org/index.pl?node_id=459659

[18:26] <autrijus> Limbic_Region: in an hour.

[18:26] <autrijus> or less.

[18:26] <Limbic_Region> revdiablo: pong

[18:26] <Jonathan_> 'lo all

[18:26] <Corion> We are moving into the general direction of preflight?

[18:26] <autrijus> Corion: yeah

[18:27] <Corion> So I'll start smoketests ;)

[18:27] <autrijus> hey Jonathan! can you provide icu-less parrot 0.2.0 builds?

[18:27] <autrijus> if so, I'd be happy to list it in README

[18:27] <Limbic_Region> hey Jonathan_ - do you not build builds over the weekend?

[18:27] <Limbic_Region> revdiablo - I would only add a link or 2 (but not a bunch) for more info

[18:28] <revdiablo> Limbic_Region: suggestions on what links?

[18:28] <Jonathan_> autrijus: Probably can do that, yes - haven't been doing much recently due to lack of time/illness.

[18:28] <Limbic_Region> revdiablo - my Get involved with Pugs has several good ones, maybe you just link to that

[18:29] <Aankhen``> autrijus >> I'm really sorry, I got distracted by some major melodrama.

[18:29] <Jonathan_> Limbic_Region: They should normally happen at weekends, but last few weekends I've had to go away due to family stuff.

[18:29] <autrijus> Jonathan_: aw, illness. you got better?

[18:29] <Aankhen``> And my working directory was apparently a mix, so I couldn't even run `nmake clean`.

[18:29] <Limbic_Region> autrijus - have found several bugs with my latest project and I am sure more are lurking under the cover - will wait until after I have a 6.2.4 to investigate further 

[18:29] <autrijus> Limbic_Region: 'kay

[18:30] <Limbic_Region> thanks Jonathan_ and no worries - I assumed it was automated

[18:30] <Jonathan_> autrijus: Long story short, my father passed away recently (cancer), then in worry/stress of that plus exams looming at uni I've pulled myself an anxiety related gastric problem. Am getting better, but not quite there yet.

[18:30] <Limbic_Region> Jonathan_ plus plus for taking the time to help those that can't build for themself

[18:30] <svnbot6> r3768, iblech++ | Test for bug found by Limbic_Region++ (return_with_trailing_stuff.t).

[18:30] <svnbot6> r3769, autrijus++ | * fix plan.

[18:31] <Limbic_Region> autrijus - it seems to me the best way to find bugs is to write code ;-)

[18:31] * Limbic_Region finds porting p5 to p6 the easiest way to write that code

[18:31] <gaal> i thought it was to release?

[18:31] <Jonathan_> Limbic_Region: It's automated, apart from one problem: the makefile generationg bug I reported on the mailing list ages ago. So I've been having to hack the makefile by hand. Wonder if  MakeMaker update would help...

[18:31] <iblech> FYI, I'm looking in ext/*/t now

[18:32] <gaal> [1] t/builtins/strings/append.t pugs.exe: cannot cast from VList [] to Pugs.AST.Internals.VCode

[18:32] <Corion> And btw, the first response to my post to glasgow-haskell-users is http://www.haskell.org//pipermail/glasgow-haskell-users/2005-May/008495.html - seems like they want BSD3 license. I don't know what the difference between BSD3 and Artistic is.

[18:32] <Corion> (yet)

[18:33] <autrijus> I'm willing to relicense to BSD3 :)

[18:33] <autrijus> for the part that they want, anyway.

[18:33] <gaal> sorry, wrong test. it's in  t/pugsrun/09-dash-uppercase-c.t

[18:33] <gaal> (concurrency :)

[18:33] <revdiablo> Limbic_Region: ok, linked to your node. I'm off to lunch

[18:34] <gaal> ..on windows.

[18:34] <autrijus> Corion: BSD3 is the advertisement-less BSD license

[18:34] <Limbic_Region> revdiablo plus plus - advocacy advocacy advocacy

[18:34] <Corion> autrijus: Ah, so there shouldn't be much conflict between Artistic and BSD3.

[18:35] <autrijus> Corion: artistic can't be made into bsd3

[18:35] <Corion> autrijus: It can't ? Because Artistic wants to retain the author?

[18:35] <autrijus> no, you have to rename the code :)

[18:35] <autrijus> and document all the deviations

[18:35] <autrijus> so it's not "can't"

[18:35] <autrijus> it's "takes quite some work"

[18:35] <Corion> Ugh.

[18:36] <pasteling> "gaal" at 192.115.25.249 pasted "more test fails" (10 lines, 401B) at http://sial.org/pbot/10350

[18:36] <autrijus> but the copyright holder can always relicense.

[18:36] <Corion> So we should triple-license src/Pugs/Compat.hs

[18:36] <Corion> (or Pugs :) )

[18:36] <autrijus> nono

[18:36] <autrijus> we just relicense the relevant chunks in Compat.hs as BSD3

[18:36] <autrijus> drop those thunks from Compat

[18:36] <revdiablo> Limbic_Region: maybe we can take turns posting something about perl6 or pugs at least once a week? ;) (ok, I'm really off to lunch this time)

[18:36] <autrijus> and use GHC 6.4.1 :D

[18:36] <autrijus> s/thunk/chunk/

[18:36] <gaal> sqlite-license it

[18:36] <autrijus> gaal: I wish.

[18:36] <Corion> autrijus: Yeah. I hope they take the stuff in so I have to worry less about it and can fire off angry mails about it :)

[18:37] <autrijus> Corion: indeed

[18:37] <Odin-LAP> sqlite is PD, right?

[18:37] * autrijus is fond of the sqlite license

[18:37] <Corion> Odin-LAP: Yep

[18:37] <autrijus> Odin-LAP: yes, it has this blessing license.

[18:37] <Odin-LAP> In the ideal world, there wouldn't be anything but PD, and people would specify the authors of each bit...

[18:37] <Odin-LAP> :p

[18:38] <gaal> http://sqlite.org/copyright.html # vgrep for "dedicate"

[18:38] <Odin-LAP> (Or at least where it came from if 'stolen'.)

[18:39] <autrijus> mmm Xanadu :)

[18:39] <iblech> autrijus: FYI, definition of a sub infix:<≠> works, but then using it does not

[18:39] <autrijus> k.

[18:39] <iblech> (other Unicode ops work fine)

[18:40] <autrijus> weird.

[18:40] <Corion> sub infix:<#> { :-))))

[18:41] <Odin-LAP> Corion: That way lies insanity.

[18:41] <svnbot6> r3770, autrijus++ | * don't be too eager about annuling bare blocks.

[18:41] <Limbic_Region> revdiablo - my next post is going to be my p6ified version of the last post

[18:41] <autrijus> ...but #perl6 is the very manifest of insanity anyway

[18:42] <Odin-LAP> autrijus: Good point.

[18:44] <gaal> smoke matrix up

[18:45] <gaal> oy, i'm finally seeing the borkage you guys mentioned ther other day

[18:46] <gaal> huh? why didn't it test rules :(

[18:47] <autrijus> hm, stevan is not here

[18:47] <svnbot6> r3771, autrijus++ | * ChangeLog cleanup before adding more entries

[18:47] <autrijus> who wants to do the heroic act of reviewing r3656 to r3771 and update ChangeLog? :)

[18:48] <iblech> Will do

[18:48] <autrijus> (complicating the fact is that some of the changes are already in ChangeLog)

[18:48] <autrijus> iblech++

[18:56] <revdiablo> did anyone ever figure out whether t/pugsbugs/and_precedence.t was really caused by precedence, or something else?

[18:56] <svnbot6> r3772, iblech++ | HTML-Entities -- unTODO

[18:56] <svnbot6> r3772, iblech++ | fp -- :todo<bug> weird operator overloading bug.

[18:57] <autrijus> revdiablo: yes, and I fixed it

[18:57] <revdiablo> ah, nice.

[18:57] <revdiablo> I love it when I add a test and it gets magically fixed a day or two later. :)

[18:57] <autrijus> it's because in parenless form loose operators should not be dispatched.

[18:57] <autrijus> revdiablo: that's how it works around here :)

[18:58] <revdiablo> it's a fun way to develop

[18:58] <autrijus> sure is

[19:00] <gaal> 3770 smoke lookin' good so far

[19:01] <Juerd> 10 registrations so far, for the dev server

[19:01] <svnbot6> r3773, autrijus++ | * unbreak map{} use in 09-dash-uppercase-c.t

[19:01] <svnbot6> r3774, autrijus++ | * unTODO.

[19:01] <svnbot6> r3775, autrijus++ | * bump versions. preflight!

[19:02] <Juerd> Imagine that this should increase the productivity of 10 people!

[19:02] <autrijus> I want an account too :)

[19:03] <autrijus> uploading preflight

[19:03] <clkao> whoot!

[19:03] <autrijus> please use "make test" instead of "make smoke" to test preflight

[19:03] <clkao> what registration?

[19:04] <autrijus> clkao: see p6l/p6c

[19:06] <Juerd> autrijus: mail me :)

[19:06] <Juerd> autrijus: That's easier for my administration

[19:06] <metaperl> juerd

[19:06] <svnbot6> r3776, iblech++ | Updated ChangeLog to contain the revisions 3657-3771.

[19:06] <Juerd> metaperl: That be me

[19:07] <autrijus> http://pugscode.org/tmp/Perl6-Pugs-6.2.4-pre1.tar.gz

[19:07] <eric256> must be a heck of a change log

[19:07] *** autrijus changes topic to: Preflight! http://pugscode.org/tmp/Perl6-Pugs-6.2.4-pre1.tar.gz | pugscode.org <Overview Journal Logs> | pugs.kwiki.org

[19:08] <autrijus> please test :)

[19:09] <revdiablo> dang, my r3772 build hasn't even cooled off yet

[19:10] <theorbtwo> "tobez" and "colomon" are missing from AUTHORS.

[19:11] <Juerd> metaperl: ?

[19:12] <autrijus> theorbtwo: tobez is gruber is anton

[19:12] <autrijus> not sure about colomon

[19:14] <gaal> is it just me or has a test run slowed down since two weeks ago?

[19:15] <autrijus> I havn't noticed

[19:15] <theorbtwo> Blink, blink... since when does OSSF have useinfo pages?

[19:16] <gaal> "duration: 901" (seconds) on a machine that did 6.2.2's make smoke in about 250

[19:16] <theorbtwo> That makes this /so/ much easier.

[19:16] <autrijus> theorbtwo: ~two years ago or so

[19:16] <autrijus> or one year ago

[19:16] <Juerd> metaperl: ?

[19:16] <gaal> maybe it's just my machine being sucky? /me goes to look

[19:16] <autrijus> iblech: so I gather you're fixing ext/*/t/? need any help?

[19:16] <svnbot6> r3777, iblech++ | * Locale-KeyedText -- Renamed test to lowercase names so they're run

[19:16] <svnbot6> r3777, iblech++ | * Locale-KeyedText -- Skipping most tests

[19:16] <svnbot6> r3778, autrijus++ | * minor cleanup to ChangeLog

[19:17] <autrijus> otherwise I'll review changelog for a final time

[19:17] <iblech> Yeah, currently doing Set

[19:17] <autrijus> cool

[19:17] <iblech> CGI seems to be borked, too

[19:18] <theorbtwo> Wow.  That was easy.

[19:18] <gaal> nyeh, make test is broken with cygwin. sorry.

[19:19] <clkao> good, you will want to use svk on that server heh

[19:19] <clkao> juerd++

[19:20] <Juerd> :)

[19:20] <Jonathan_> autrijus, Limbic_Region: There's a (hopefully) automated Parrot build now available from http://www.jwcs.net/~jonathan/perl6/parrot-win32.zip - next job is to point the Pugs building at a Parrot tree so we get rules with my Win32 Pugs. Recommend using the 0.2.0 release rather than the current latest SVN tree?

[19:21] <Limbic_Region> Jonathan_ plus plus

[19:21] <Limbic_Region> thanks

[19:22] <svnbot6> r3779, theorbtwo++ | AUTHORS update

[19:22] <Limbic_Region> don't know about the Parrot version though

[19:22] <Limbic_Region> Juerd - it sounds like you should make a post at the Monastery regarding the Perl Development Server

[19:22] <Jonathan_> Limbic_Region: If we use 0.2.0, we get stability. If I use the latest Parrot, I guess we get the latest work on PGE, so most up to date rules support.

[19:23] <Juerd> Limbic_Region: No. And please don't.

[19:23] <Limbic_Region> oh... ok

[19:23] <Juerd> Limbic_Region: It's a mere P4 2.4

[19:23] <Limbic_Region> several monks seem like they would get involved if they could build GHC/Pugs/etc

[19:23] <Juerd> Yes

[19:23] <Juerd> And they can

[19:23] <Limbic_Region> I /msg'd diotalevi about it already - sorry

[19:24] <Juerd> But WAY too many people read PM

[19:24] <Juerd> Oh, private messages are okay :)

[19:24] <Limbic_Region> Jonathan_ - my recommendation would be to use 0.2.0 as a fall back (if that's possible)

[19:24] <PerlJam> Juerd: you aren't ready to suffer the perlmonk effect?  ;)

[19:24] <Juerd> PerlJam: I am, and have

[19:24] <gaal> L~R, who's stuck because they need to build GHC?

[19:24] <Juerd> PerlJam: I want to see the load with a limited number of users first

[19:24] <Limbic_Region> gaal - apparently diotalevi 

[19:25] <gaal> what platform is missing binaries? or is he going hardcore?

[19:25] <Juerd> PerlJam: Opening it up to practically the whole perl 5 world now can make this experiment a disaster before it starts

[19:25] <Limbic_Region> Juerd - might I also suggest a wiki to discuss what sort of collaborative projects result from the community server?

[19:25] <Juerd> Limbic_Region: And I don't think anyone benefits from a torrent of new contributors all at once...

[19:25] <Juerd> Limbic_Region: Yes, a wiki will be there

[19:25] <autrijus> gaal: "make test" is broken? how?

[19:26] <Jonathan_> Limbic_Region: I'll look into it - need to go do some other stuff for now.

[19:26] <Limbic_Region> I ask only because I wouldn't have a need for the shell account (I can build just fine) - but I might want to if there's mischief and mayhem to be made

[19:26] <gaal> i'm still getting the error on undef.t with preflight 1

[19:26] <gaal> autrijus, need to cygpath stuff

[19:26] <autrijus> gaal: ok... you want to fix it before release?

[19:26] <autrijus> gaal: nopaste the undef.t error again?

[19:26] <Limbic_Region> gaal - apparently there are no binaries or he is going hardcore - either way I don't know the particulars

[19:27] <autrijus> undef.t worksforme here

[19:27] <Juerd> Limbic_Region: I don't understand.

[19:27] <pasteling> "gaal" at 192.115.25.249 pasted "undef.t error" (2 lines, 87B) at http://sial.org/pbot/10352

[19:28] <Limbic_Region> Juerd - what I am saying is that I don't have a NEED.  But if there is a project going on (that I would learn about through a wiki) I might WANT to get an account

[19:28] * theorbtwo wanders off for an Ally McBeal episode.

[19:28] <iblech> autrijus: FYI, undef.t works here, too

[19:28] <gaal> autrijus, i don't know if it's worth testing, cygwin being a hacky psedeotarget anyway

[19:29] <gaal> worth fixing, that is

[19:29] <autrijus> iblech: nod.

[19:29] <Juerd> Limbic_Region: There should be no project private to this server, I think.

[19:29] <Juerd> Limbic_Region: It's connected to the internet

[19:29] <Juerd> Besides, this server may go down at any moment (in theory only)

[19:29] <metaperl> Juerd: what do you want to do with Perl6 and XML parsing? I just read your p6l post

[19:29] <Juerd> Let's not introduce single points of failure

[19:30] <metaperl> Juerd: what are you registering people for? (I missed the convo earlier in this group).

[19:30] <Juerd> metaperl: I want someone to simply start testing the generated grammar (the grammar generation script needs updates too)

[19:30] <Juerd> metaperl: perl 6 development server

[19:30] <metaperl> oh I see... I might be interested... if your grammer part of pugs now?

[19:30] <Juerd> metaperl: That was ordered in parts today and will be online by the end of this week probably

[19:30] <Juerd> No

[19:31] <Juerd> The server is the perfect solution for people who have no linux box of their own and think they can put access to a linux box to good use for Perl 6

[19:31] <autrijus> gaal: svn up and run undef.t by hand and see if it works

[19:31] <gaal> roger that

[19:32] <metaperl> Juerd: what about matts comments "XML can't be parsed using the grammar alone."

[19:32] <svnbot6> r3780, autrijus++ | * don't test undef.t's rules part when there's no rules support.

[19:32] <svnbot6> r3780, autrijus++ |   gaal++ for reporting it.

[19:32] <PerlJam> Juerd: It would be nice if it were a freepan mirror too (but that's something else entirely)

[19:32] <gaal> svn: Failed to add file 'ext/Locale-KeyedText/t/lkt_00_compile.t': object of the same name already exists

[19:32] <autrijus> gaal: kill that dir and svn up again

[19:33] <iblech> FYI, almost finished with Set

[19:34] <gaal> also, either t/subroutines/splatty_with_type.t or t/oo/class/nested_use.t is failing (more info when the run completes)

[19:34] <Juerd> metaperl: Note and ignore

[19:34] <Juerd> metaperl: This has little practical use except stress testing the rule engine with an existing grammar

[19:34] <Juerd> PerlJam: As some Dutch say, romeo delta

[19:34] <metaperl> Juerd: so this would be a way for me to learn about p6 rules?

[19:34] <metaperl> sounds useful

[19:35] <metaperl> and also learn about XML

[19:35] <Juerd> Which stands for RD which stands for Regel Dat (literally: regulate that, idiomatically: make it happen if you want it)

[19:35] <Juerd> :)

[19:35] <metaperl> which I only have a layman's understanding of

[19:35] <Juerd> metaperl: Yes, it ought to

[19:35] <wolverian> sorry, what grammar are you talking about?

[19:36] <metaperl> wolverian: http://perlmonks.org/index.pl?node_id=179755

[19:36] <metaperl> wolverian: an XML grammer

[19:36] <gaal> autrijus, what's necessary at build time for rules support to go in? because i did have parrot in my path.

[19:36] <gaal> not embeddedly perhaps.

[19:36] <metaperl> Juerd: I would like to get involved with testing the XML grammar

[19:37] <wolverian> metaperl: ah. thanks a lot.

[19:37] <gaal> in any case, your skip fix works.

[19:37] <autrijus> gaal: just by having parrot in your path is enough.

[19:37] <autrijus> cool, gaal++

[19:38] <wolverian> Juerd++ # wow, that's an amazing node

[19:38] <gaal> well, it doesn't look to be enough on cygwin :( but it's probably a path issue again.

[19:39] <autrijus> gaal: sadly I'm out of tuits to look at cygwin :-/

[19:40] <gaal> yeah, we all are. i know, only it's the least crummy setup i have to build on :(

[19:40] <gaal> i'll try to play with the free ms toolchain tomorrow to see if i can build perl5+parrot+pugs with it

[19:41] <Juerd> wolverian: It's ancient, 2002! :)

[19:41] <wolverian> Juerd: haha. and I wondered why it wasn't in the recent best!

[19:46] <iblech> Ok, Set done. Is anybody working on CGI?

[19:46] <svnbot6> r3781, autrijus++ | * fix try{} usage in CGI.pm

[19:46] <svnbot6> r3782, iblech++ | Fixed and TODOed Set.

[19:47] <gaal> heh heh

[19:47] <wolverian> Juerd: is onion going to run parrot too?

[19:48] <PerlJam> wolverian: That's probably up to you as an account holder.

[19:49] <autrijus> iblech: only 1 failure. please look at it

[19:49] <autrijus> t/header...........ok 1/8# Looks like you planned 8 tests, but ran 11

[19:49] <autrijus> I'm still ChangeLogging

[19:49] <iblech> autrijus: Ok

[19:49] <autrijus> probably just a plan fix

[19:50] <wolverian> PerlJam: hmm, sure, but if the plan is to have a system-wide, continually rebuilt pugs, why not parrot as well?

[19:50] <wolverian> (if that isn't the plan, sorry, I misunderstood.)

[19:51] <gaal> util/smoke_loop.sh is a start, folks

[19:58] <Limbic_Region> [14:26] <Limbic_Region> autrijus - you plan on releasing 6.2.4 sometime today?  [14:26] <autrijus> Limbic_Region: in an hour.

[19:58] <svnbot6> r3783, iblech++ | CGI -- Plan fix of header.t.

[19:58] <Limbic_Region> did it happen?

[19:58] <Limbic_Region> or still working on bug fixes?

[19:58] <gaal> L~R, see topic

[19:59] <Limbic_Region> still preflight - gotcha

[19:59] <Limbic_Region> you know - these meetings at $work are really beginning to interfere with my pugs fun

[19:59] <autrijus> iblech: I'm fixing File::Spec

[19:59] <autrijus> feel free to skip to next one

[19:59] <autrijus> (or are you doing so?)

[19:59] <iblech> Ok

[20:00] <iblech> IIRC that File::Spec was the last borked module

[20:00] <iblech> Checking...

[20:04] <iblech> Yeah, all other ones work

[20:06] <autrijus> good. I fixed that one

[20:06] <autrijus> anyone finished running main tests of pre1?

[20:06] <autrijus> other than gaal that is

[20:09] <obra> is that svn head?

[20:09] <svnbot6> r3784, autrijus++ | * fix the while loop test in File::Spec::Unix

[20:09] * obra will do so

[20:11] <iblech> autrijus: FYI, a test was still failing in File::Spec, I force_todoed it.

[20:13] <autrijus> iblech: don't -- I'm fixing it :)

[20:13] <iblech> autrijus: To late :(

[20:13] <autrijus> that's fine

[20:13] <Limbic_Region> it can be unfixed

[20:13] <Limbic_Region> or rather untodoed

[20:13] * iblech starts building the live cd

[20:13] * Limbic_Region really shouldn't try conversation on Mondays

[20:14] <clkao> autrijus: there was a failure for me

[20:14] <clkao> t/builtins/undef.t    1   256    72   24  33.33%  61-72

[20:14] <clkao> was this fixed?

[20:14] <autrijus> clkao: yeah

[20:15] <autrijus> ok. all tests shall now pass.

[20:15] <svnbot6> r3785, iblech++ | File-Spec -- force_todo the last failing test.

[20:15] <svnbot6> r3786, autrijus++ | * File::Spec::Win32 - fix canonpath()'s misuse of $0

[20:15] <svnbot6> r3786, autrijus++ | * unForceTODO 20_win32_test.t

[20:15] <autrijus> rolling pre2!

[20:16] * gaal decides a voodoo reboot is in order.

[20:16] <clkao> oh, larry's giving keynote for yapceu

[20:16] <autrijus> yeah

[20:17] <autrijus> sadly I've exhausted my conference budget :)

[20:17] <clkao> everytime i build pugs optimized the laptop is burning my lap

[20:17] <clkao> hate

[20:17] <clkao> autrijus: budget of money or time?

[20:17] <autrijus> clkao: money _and_ time.

[20:18] <clkao> damn you, yapceu will be my birthday

[20:18] <autrijus> time is fixable if I don't stay around and tourism

[20:18] <clkao> i should prepare a gift

[20:18] <autrijus> money is less fixable :)

[20:18] <clkao> stick around europe ? i thought you are going to .ee ?

[20:18] *** autrijus changes topic to: Pre2! http://pugscode.org/tmp/Perl6-Pugs-6.2.4-pre2.tar.gz | pugscode.org <Overview Journal Logs> | pugs.kwiki.org

[20:18] <autrijus> clkao: that's too long a delta

[20:19] <autrijus> a month

[20:19] <autrijus> Tester wanted for pre2: http://pugscode.org/tmp/Perl6-Pugs-6.2.4-pre2.tar.gz

[20:22] <obra>   autrijus I'm running tests on head

[20:22] <obra> is that the same?

[20:22] <autrijus> obra: it's the same.

[20:22] <obra> ok. 

[20:23] <obra> I'm into t/rules

[20:23] <autrijus> "make smoke" or "make test"?

[20:23] <obra> but man. the test suite got slow again

[20:23] <obra> make smoke

[20:23] <obra> bad?

[20:23] <autrijus> k.

[20:23] <autrijus> well, it won't test the modules that way, but that's fine

[20:23] <obra> ok

[20:23] <obra> I'l run make test next

[20:23] <autrijus> we have ~700 new tests.

[20:24] <obra> wow

[20:24] <_metaperl> Juerd, did you want to discuss the p6/xml thing some more?

[20:24] <_metaperl> I started the convo at home, but left for work (where I am now).

[20:24] * _metaperl alt-tabs to work

[20:25] <autrijus> and 677 revisions -- compared to 507 for 6.2.3

[20:25] <autrijus> (and 316 from 6.2.2)

[20:26] * autrijus mutters something about velocity and singularity :)

[20:27] <clkao> autrijus: if someone from london is going .at can i ask you to bring something for me?

[20:27] <autrijus> clkao: depends on what that thing is

[20:27] <svnbot6> r3787, autrijus++ | * add Jonathan's URL back in the hope that Win32 build for Parrot 0.2.0

[20:27] <svnbot6> r3787, autrijus++ |   will be up soon.

[20:28] <clkao> i guess mainly tea and/or liquor.

[20:28] <autrijus> tea I can easily handle

[20:28] <autrijus> not so sure about liquor

[20:28] <clkao> ok..

[20:29] <clkao> if so i'll get someone to prepare things and get them packed to you

[20:30] <autrijus> 'kay

[20:30] <Limbic_Region> grats autrijus et all on 6.2.4

[20:30] <autrijus> Limbic_Region: thank you! you helped a lot you know :)

[20:30] <autrijus> (hopefully he'll backlog and see this.)

[20:30] <clkao> autrijus: did you see thing about bnechmark.pm i mentioned yesterday?

[20:31] <autrijus> clkao: about op dispatch? yea

[20:31] <autrijus> so what's stopping you from committing Benchmark.pm?

[20:31] <autrijus> you still have 10 minutes!

[20:33] <clkao> i am lame

[20:33] <obra>   would make smoke warn if there were failures?

[20:34] <gaal> yes.

[20:35] <autrijus> I take that question as a "all clean".

[20:35] <autrijus> gaal: are you testing pre2 again?

[20:35] <obra> all clear

[20:36] <obra> me is running make test

[20:36] <autrijus> gaal: I can't duplicate nested_use and splatty_with_type.t

[20:36] <gaal> i'm making a new smoke now, wel'll see where it was

[20:37] <autrijus> okay.

[20:37] <gaal> it was in one of them - but stderr is confusing when running with concurrency  (which is why i'm not using it this time, too :/

[20:37] <Juerd> wolverian: If you compile parrot, it'll run.

[20:37] <autrijus> changelogging done.

[20:37] <autrijus> ok, I'm ready to fly.

[20:38] <autrijus> pending obra and gaal's reports.

[20:38] <Juerd> metaperl: I have no special need to discuss the subject, but if you have questions, just ask

[20:38] * autrijus writes announcement etc

[20:38] <iblech> autrijus: If you find it's important enough, you can link to the live cd: http://linide.sf.net/pugs-livecd-6.2.4.iso

[20:38] <svnbot6> r3788, autrijus++ | * cleanup ChangeLog, hopefully for the final time before 6.2.4.

[20:38] <autrijus> iblech: sure!

[20:39] <gaal> autrijus, i should have a smoke up in about two minutes.

[20:39] <autrijus> gaal: k. I may need you to remind me the url again

[20:39] <iblech> ok :)

[20:39] <iblech> I've just re-run all ext/ tests, all clean here

[20:39] <autrijus> same here too

[20:39] <autrijus> woot, we made it. and it's not even 5am this time

[20:40] <autrijus> (famous last words?) ;)

[20:40] <gaal> :)

[20:42] <Darren_Duncan> question about r3777 ...

[20:42] <Darren_Duncan> why must test names be all lowercase to execute?

[20:42] <obra> autrijus: still running

[20:42] <autrijus> Darren_Duncan: that's just a convention to disabled various "Disabled/" tests

[20:42] <autrijus> Darren_Duncan: I'm not sure if it even makes sense.

[20:43] <Darren_Duncan> so that convention will go away later?

[20:43] <autrijus> sure, as soon as you or somebody else hack in code to only skip Disabled instead of any uppercase

[20:43] <autrijus> obra: k

[20:44] <obra> so many todo tests

[20:44] <gaal> fwiw make smoke should do that already (default --exclude pattern in yaml_harness.pl)

[20:44] <Darren_Duncan> in any event, I will download 6.2.4-pre2 now and test it ... I assume it is akin to a release candidate

[20:44] <autrijus> obra: the ratio of todo tests is decreasing though :)

[20:44] <autrijus> Darren_Duncan: yes, it is :)

[20:44] <obra> is there a graph?

[20:44] <autrijus> obra: mj has one somewhere

[20:45] <autrijus> forgot the url

[20:45] <gaal> grrr, t/rules is teh slow

[20:45] * eric256 is suprised he hasn't seen a commit graph yet showing the commits / minute|hour|day|year

[20:45] <autrijus> eric256: CIA has one 

[20:45] <gaal> gotta figure out how to embed parrot next time :)

[20:45] <eric256> FBI too?

[20:46] <autrijus> heh

[20:46] <autrijus> but since we lost the mirror code in wagner it's not updating

[20:46] <gaal> svn log | R something

[20:46] <autrijus> rrdtool?

[20:46] <gaal> no, R the stat package

[20:46] <autrijus> ahh.

[20:46] <gaal> try googling for that eh? :)

[20:47] <iblech> eric256: There's util/svnlog2graph.pl

[20:47] <obra> ok .....ok

[20:47] <obra>         4/4 skipped: skipped tests - rules support appears to be missing

[20:47] <iblech> eric256: But it only shows total num of commits as of each day

[20:48] <gaal> (meaning "R" is not a very catchy name)

[20:49] <Darren_Duncan> now on 'make' for pre2 - I'm using the simplest setup of system perl 5.8.1 and zero Parrot or readline etc

[20:51] <eric256> i don't have the prereqs for svnlog2graph :(

[20:52] <obra> blew out on filespec tests

[20:52] <iblech> eric256: wait, I'll upload a img

[20:52] <obra> Failed Test       Stat Wstat Total Fail  Failed  List of Failed

[20:52] <obra> -------------------------------------------------------------------------------

[20:52] <obra> t/20_win32_test.t              165    1   0.61%  42

[20:52] <obra> Failed 1/4 test scripts, 75.00% okay. 1/275 subtests failed, 99.64% okay.

[20:52] <iblech> obra: autrijus fixed that one

[20:52] <obra> it then stopped running more tests.

[20:52] <autrijus> yeah.

[20:52] <gaal> oh, crap, testgraph.pl is coredumping on me :(

[20:52] <autrijus> so that's fine :)

[20:52] <gaal> i can upload my tests.yml if it helps.

[20:53] <Aankhen``> G'night.

[20:53] <iblech> eric256: http://m19s28.vlinux.de/iblech/pugs-svngraph.png

[20:54] <obra> rerunning just the module tests

[20:54] <gaal> come to think of it, what's the other computer for.

[20:54] <obra> it'd be cool if we had a target for that

[20:54] <eric256> whats the green vs red?

[20:54] <iblech> eric256: Red is the # of commits, green is the # of developers, but scaled

[20:54] <autrijus> iblech: is that url permanent?

[20:55] <iblech> autrijus: No, I'll load it to a perm server, sec

[20:55] <autrijus> i.e. may I link to it in my announcement? :)

[20:55] <autrijus> ah. I'll mirror to pugscode.org

[20:55] <Juerd> iblech: scaled?

[20:55] <gaal> http://forum2.org/gaal/pugs/smoke-cygwin.html # r3787

[20:56] <gaal> probelm in system :(

[20:56] <iblech> Juerd: Yeah we only have 70 or so commiters (don't know the exact num), not 700

[20:56] <Juerd> iblech: Oh, like that, scaled

[20:56] <gaal> and i still don't have the p6 rules for some reason

[20:56] <iblech> autrijus: http://linide.sourceforge.net/pugs-svngraph-6.2.4.png

[20:56] <autrijus> danke

[20:56] <iblech> np

[20:56] <Juerd> iblech: Where does the recent explosion in committers come from?

[20:57] <gaal> :q

[20:57] <gaal> oops.

[20:58] <iblech> Juerd: Dunno, ask the new committers :)

[20:58] <gaal> okay, does builtins/system.t fail on linux too? i need to lives_ok and todo it on windows.

[20:58] <gaal> the third subtest.

[20:58] <obra> I may have fucked up tests, but I'm seeing Set/Junction.pm missing when running tests

[20:58] <obra> rerunning make test as I go hiome

[20:59] <autrijus> obra: if you run them by hand a make install is needed first

[20:59] <iblech> gaal: 3/3 successful here

[20:59] <autrijus> gaal: ok, please simply skip it on win32.

[20:59] <obra> autrijus: i'll report back

[20:59] <autrijus> instead of lives_ok and todo'ing

[20:59] <gaal> k

[21:01] <gaal> q

[21:03] <autrijus> Darren_Duncan: how's test going?

[21:03] <Corion> system.t dies on the 3rd test on Win32

[21:03] <gaal> Corion, fixing,

[21:03] <Corion> cool

[21:04] <gaal> r3789

[21:04] <gaal> but i'm still worried about why my pugs doesn't have rule support

[21:05] <gaal> oh, right, that cygpath thing. darn. :)

[21:05] <gaal> Corion, tomorrow i'll pick your brains a bit about building a native perl on windows if you don't mind.

[21:05] <svnbot6> r3789, gaal++ | skip crashing test on win32

[21:06] <Corion> gaal: It's really easy, but that's why I can do it ;)

[21:06] <gaal> ;)

[21:06] <Corion> gaal: I think I even have a batch file that downloads everything you need for MSVC7 and building Perl :)

[21:06] <gaal> i'll only use the free ms tools

[21:07] <gaal> don't own a full VC

[21:08] <autrijus> system.t fix looks good.

[21:08] <autrijus> any other problems from people still smoking?

[21:11] <Darren_Duncan> going fine

[21:12] <mugwump> no, I haven't smoked since the weekend

[21:12] <autrijus> Okay, fly!

[21:12] <Juerd> I quit smoking, sorry :)

[21:12] * gaal cheers

[21:12] <autrijus> :)

[21:12] * Juerd never smoked though

[21:13] * Juerd going home

[21:13] <Juerd> anyone with thoughts on rules/policies for the development server, please msg me

[21:14] <gaal> remind people to be nice about ghc :)

[21:14] <Juerd> private, please

[21:14] <Juerd> I'm going home, and won't be reading all of the backlog

[21:14] <mugwump> heck ghc eats my 512mb RAM athlon compiling pugs

[21:14] <Juerd> afk

[21:17] * autrijus hits "submit"

[21:17] <svnbot6> r3790, autrijus++ | * This be Pugs, version 6.2.4.

[21:17] *** autrijus changes topic to: 6.2.4 released! | pugscode.org <Overview Journal Logs> | pugs.kwiki.org

[21:17] <gaal> yay!

[21:17] <autrijus> yay!

[21:17] <autrijus> #perl6++

[21:18] <obra> autrijus: if I make; make test, should I get 

[21:18] <obra> t/junction...........pugs: *** Can't locate Set/Junction.pm in @INC (@INC contains: /home/jesse/svn/pugs/blib6/lib /usr/lib/perl6/5.8 /usr/share/perl6/5.8 /usr/local/lib/perl6 /usr/local/share/perl6 .).    at t/junction.t line 1, column 1

[21:18] <obra> It was my understandng that that wasn't the case that needed make install

[21:18] <autrijus> obra: it's known that making test in the ext/*/ won't work

[21:18] <autrijus> as it's tied to the toplevel maketest.

[21:18] <autrijus> it sucks -- as clkao pointed out -- but it's the best we've got

[21:19] <obra> I did the toplevel make test

[21:19] <obra> and got that

[21:19] <autrijus> hm.

[21:19] <obra> me goes looking for /Set::Junction

[21:20] <obra> I have nothing named Junction.pm in my checkout

[21:20] <iblech> Just rerun ext/Set (make test directly in ext/Set), works fine here

[21:20] <iblech> All tests successful, 7 subtests skipped.

[21:20] <autrijus> no, obra is right.

[21:21] <autrijus> we fubar'ed ;)

[21:21] <autrijus> get ready for 6.2.5 :)

[21:21] <iblech> hrm? But all fine here?

[21:21] <autrijus> mugwump--

[21:21] <autrijus> # renaming Set::Junction to Set _without_ fixing the test.

[21:21] * obra did try to warn ;)

[21:21] <Corion> It's all fine here too, I think

[21:21] <autrijus> obra: I know, thank you :)

[21:21] <Corion> weird ...

[21:22] <autrijus> it's fine probably because you all have Junction.pm in your perl6/lib/ installed.

[21:22] <gaal> Corion, do you make smoke or make test? (I can only make smoke atm)

[21:22] <autrijus> if you remove them, it will fail.

[21:22] <Corion> nmake test

[21:22] <Corion> ... but I may be missing an nmake clean

[21:23] <iblech> autrijus: Right... will rm /usr/lib/perl6 and make install again

[21:23] <Corion> autrijus: Ah ... yeah, that could be...

[21:26] <autrijus> I fixed the tests for Set.pm

[21:26] <autrijus> poll: Does this warrant a 6.2.5? :)

[21:27] <knewt> a 6.2.4.1 maybe

[21:27] <autrijus> that's another possibility

[21:27] <gaal> _pl1 :)

[21:28] <obra> _ is bad from pause persepctive

[21:28] <obra> and I'd suggest not making it quadversioned

[21:28] <gaal> i was just joking, remembering early linux vers

[21:29] <Corion> I'm just noticing - GHC throws some warnings at me for my FFI stuff - I should fix them, tomorrow. :)

[21:29] <svnbot6> r3791, autrijus++ | * remove ::Junction from junction.t.

[21:29] <svnbot6> r3792, autrijus++ | * rename basic.t to hash.t

[21:29] <svnbot6> r3793, autrijus++ | * rename junction.t to basic.t.

[21:29] <iblech> autrijus: Ok, svn up, rm -r $PERL6LIB, make, make install, cd ext/Set, make test works

[21:29] <autrijus> iblech: right, and all other modules works as well

[21:29] <gaal> does make install refuse to install w/o force even when one test fails?

[21:29] <autrijus> gaal: yes.

[21:31] <gaal> er, doesn't PERL6LIB say ext/Test/lib ? or is the recommendation now blib6/lib ?

[21:31] <autrijus> blib6/lib/ I think, not sure

[21:31] <gaal> ...becasue if it is the wiki needs updating

[21:32] <autrijus> please do.

[21:32] <autrijus> rolling 6.2.5. no preflights this time. :)

[21:32] <Corion> I've always used blib6/lib

[21:33] <gaal> updated

[21:33] <Corion> I have a "make test" running for whatever is/was latest... I should update to r3793 I guess :)

[21:33] <autrijus> Corion: nah, just let it run

[21:33] <autrijus> it should fail on junction.t

[21:33] <autrijus> how far along is it?

[21:33] <Corion> Still compiling

[21:33] <autrijus> ah. I won't wait then :)

[21:34] <Corion> make optimized takes long now, but make unoptimized takes far too long to test :)

[21:34] <gaal> then you can svn up underneath it, no? :)

[21:34] <Juerd> re

[21:34] <autrijus> obra++ # saving us much possible trouble

[21:34] <obra> heh

[21:36] <Corion> Welcome home, Juerd 

[21:36] <iblech> autrijus: link for the live cd is the same, but with -6.2.5 at the end

[21:36] <iblech> (uploading)

[21:36] <autrijus> iblech: good

[21:36] <autrijus> rename the svn-graph as well?

[21:36] <autrijus> :D

[21:37] <iblech> ok

[21:37] <autrijus> danke schön

[21:37] <iblech> kein problem :)

[21:42] <Juerd> Corion: Thank you

[21:43] <svnbot6> r3794, autrijus++ | * This be Pugs, version 6.2.5.

[21:43] <svnbot6> r3795, autrijus++ | * come to think about it, that change belongs to

[21:43] <svnbot6> r3795, autrijus++ |   `Bundled Modules`, not to `Tests, Examples and Documentations`.

[21:43] <gaal> does that mean 6.2.6? *ducks*

[21:43] <wolverian> 6.2.6? :)

[21:43] <wolverian> gah, faster than me.

[21:43] <autrijus> nah. we'll jump to 6.2.7 ;)

[21:43] <autrijus> kidding, of couse :)

[21:44] <gaal> well, like i said, there's no faster way to find bugs than to release...

[21:44] *** autrijus changes topic to: 6.2.5 released - talk about velocity! | pugscode.org <Overview Journal Logs> | pugs.kwiki.org

[21:44] <obra> heh

[21:45] <autrijus> announcement sent, journal updated :)

[21:46] <gaal> Corion, are you using NTFS on the volume you're building pugs on?

[21:46] <autrijus> thanks to all. I'll go grabbing some food.

[21:46] <Corion> gaal: Yeah, I think so

[21:47] <gaal> you never had any permission problems did you? maybe it's a cygwin thing. i needed to chmod +x . ; and the temp files aren't getting erased

[21:48] <Corion> temp files aren't getting erased here either. It's a Win32 API problem, because Pugs keeps the filehandles open too long, and Win32 doesn't erase open files

[21:48] <svnbot6> r3796, Juerd++ | fix layout for quickref/control

[21:48] <svnbot6> r3797, Juerd++ | It's no longer "@foo" but "@foo[]"

[21:48] <svnbot6> r3798, Juerd++ | fix long lines (>80 char)

[21:48] <svnbot6> r3799, Juerd++ | fix layout

[21:49] <Corion> Hmmm. Coros have arrived. I should revisit LWP::Simple then...

[21:49] <gaal> hmmm, does it also happen when we explicitly close? or is it an instance of the destruction timeliness problem?

[21:50] <Corion> gaal: In some last revamp (1 week ago or 2 ?), explicit close was also broken.

[21:50] <gaal> this is more incentive for me to expose pipeOpen already.

[21:50] <Corion> gaal: Oh yes - pipes would come in handy.

[21:50] <gaal> we've had them for a month now :(

[21:51] <Corion> And BTW, I think I also have an idea how to make system() still run async{} blocks - just run the system() in a separate OS thread 

[21:51] <gaal> only there was no agreement about perl6 s29-style spec

[21:51] <Corion> We have them? Ah. They are there, but are not reachable in Perl6 ...

[21:51] <Juerd> Are there any ideas on making haskell use much less memory?

[21:51] <gaal> hey, the compiler d/l finished

[21:51] <Corion> Maybe make a module/procedural/oo interface instead of using open "|" ?

[21:51] <Juerd> Except the obvious make unoptimized

[21:51] <gaal> Corion, they are. use the fully qualified name

[21:52] <gaal> see Prim

[21:52] <Juerd> Haskell using 500 MB is a problem on a shared shell server with "only" 1 GB

[21:52] <Corion> gaal: Oh - I should look through Prim again ...

[21:52] <Corion> Juerd: I think you can set the mem size for Haskell through some switch

[21:52] <gaal> oh, maybe the function was removed from the data at the bottom

[21:52] <gaal> but it's trivial to add

[21:52] <gaal> add back

[21:52] <integral> does it use less if you don't use --make, and compile the pugs sources individually?

[21:53] <Juerd> I have no idea

[21:53] <integral> Juerd: one idea would be to have a wrapper to invoke ghc that serialised actual invokations of it

[21:53] <Juerd> Corion: There is no match for /mem/ in ghc's manpage

[21:53] <Corion> Like, a Perl script :)

[21:53] <gaal> wasn't there a -M option or someinthg once?

[21:53] <Corion> Juerd: The manpage doesn't list all options if I remember right.

[21:53] <integral> there's a -H option for the RTS

[21:53] <Juerd> What is rts?

[21:54] <Juerd> integral: Yes, but that'd suck :)

[21:54] <gaal> runtime

[21:54] <svnbot6> r3800, Juerd++ | update README, add references to smartmatch in op

[21:54] <Juerd> integral: Idualy, several users should be able to compile at the same time. The problem is that while CPU power can be time sliced, memory cannot with such ease.

[21:54] <Juerd> Swapping makes it much slower for everyone

[21:54] <Juerd> And putting 4 GB of memory in the box isn't an option at this point

[21:54] <gaal> oh, Corion, the problem with the pipe implementation si tat it doesn't bless the FHs into perl style, so they're slurpy

[21:55] <integral> how long does a full build take on that hardware anyway?

[21:55] <gaal> but that can be fixed

[21:55] <Corion> gaal: Ah well - slurpy pipes are better than no pipes :)

[21:56] <gaal> i'll work on it tomorrow (unless you beat me to it) but i've found the lack of specs on this to be rather exasperating :(

[21:56] <Juerd> integral: I don't know, but it'll surely take more than 10 minutes when optimized

[21:56] <integral> yeah, hmm.

[21:56] <gaal> anyway, i'm off. night all.

[21:58] <integral> hmm,  I should run a compile on my 1GB box and see how much it uses

[21:59] <Corion> Anyway, good night all!

[21:59] <nnunley> Juerd:  One of the techinques that Darcs uses is to use antimemoization

[21:59] <nnunley> Donno how much it would help with pugs.

[22:00] <clkao> happy fubar!

[22:02] <iblech> As Corion (from *.de, too), I'll sleep now :)

[22:02] <iblech> Night :)

[22:02] <Darren_Duncan> okay, 'make test' with pre2 is done

[22:14] <integral> hmm, the build is up to Pugs.AST.Internals, and it's only 85M

[22:15] <integral> ah, now it's shooting up

[22:15] <mugwump> argh, sorry for the Set::Junction thing guys

[22:16] <mugwump> the hash-based version still had a bug, and for some reason I lost my pugs executable and had to run by the time it was going to finish building

[22:17] <kungfuftr> mugwump: UNACCEPTABLE!

[22:17] <kungfuftr> *blink*

[22:17] <mugwump> so I thought I'd just rename it .. didn't think about it being near release time

[22:17] * mugwump accepts a flogging from kungfuftr 

[22:18] <kungfuftr> mugwump: hhhmmm... you might like that too much... nielo would anyways

[22:28] <Juerd> http://tnx.nl/3947NPFZ

[22:28] <Juerd> draft motd

[22:28] <Juerd> comments please

[22:32] <integral> hmm, ghc 169M, cc1 >200M

[22:35] <eric256> 33 tests unexpectedly succeeded.

[22:36] <stevan> damn, I missed all the fun :)

[22:37] * stevan went and saw revenge of the sith :)

[22:37] <integral> the simplest way to improve memory usage is just for someone to go and fix Pugs.AST.Internals ;-)

[22:40] <integral> Juerd: from compile I've just done, it seems that gcc's memory usage can be higher than GHC's, but for a very short time.  GHC uses <200M, but for ages

[22:40] <Juerd> optimized?

[22:40] <integral> yep

[22:41] <integral> but this is a 500MHz box, so maybe the GC is running more because of the extended time?

[22:46] <eric256> why does nmake test copy all the module files?

[22:46] <svnbot6> r3801, ninereasons++ | check in a few cookbook changes, especially examples/cookbook/01strings/01-02default-variables.p6, and some other minor changes in the examples directory; and remove the motd directory

[22:47] <autrijus> so, I'm writing a new meditation on perlmonks

[22:48] <pasteling> "autrijus" at 220.132.132.105 pasted "draft perlmonks meditation" (14 lines, 1K) at http://sial.org/pbot/10359

[22:48] <pasteling> "autrijus" at 220.132.132.105 pasted "draft perlmonks meditation" (25 lines, 1.1K) at http://sial.org/pbot/10360

[22:49] <autrijus> (with better formatting)

[22:49] <autrijus> now I'm beginning to fill in the LIST HERE part. I think I'll think aloud in #perl6 and see what other people think :)

[22:49] <autrijus> (the timeline link is http://pugscode.org/perl6-timeline.png )

[22:50] <Juerd> whoop, no account for chromatic or abigail should they want any :)

[22:50] <autrijus> Juerd: why? :)

[22:50] <Juerd> autrijus: I've been advised to require users to make their full names known to me

[22:50] <Juerd> For juridical purposes

[22:51] <autrijus> lol

[22:51] <Juerd> I normally provide access to paying customers - they can be tracked by bank account if needed

[22:51] <autrijus> * the most important thing to me is to mix Perl 6 code with existing Perl 5 applications, sharing each other's modules and objects. an improved Inline::Pugs can do that

[22:52] <Juerd> I don't think the box will be used for illegal activity

[22:52] <mugwump> eg, calling DBI and TT from Perl 6

[22:52] <autrijus> mugwump: right.

[22:52] <Juerd> But just in the very unlikely case it will be, I have to make sure I can't be held responsible.

[22:52] <Juerd> See also my draft motd

[22:53] * mugwump gets inspired to write PSA::Cache::Entry::Pugs, to let you code your site's logic/business rules in Perl 6

[22:53] <Juerd> Which I wrote instead of the advised 16 page user agreement, which nobody will read anyway.

[22:53] <autrijus> * the next most important thing is to make the Perl 6 part run at a competitive speed. improved pugs codegen can do that.

[22:53] <Juerd> Funnily, this single screenful of text contains as much information as those 16 dead tree pages.

[22:54] <Juerd> autrijus: Speed and DBI are my major issues at this point. 

[22:54] <autrijus> * close to that is to make the bridging as lightweight as possible, preferably with no object cloning overhead. ponie does just that.

[22:54] <autrijus> Juerd: my priorities are DBI, then Speed. do you have it reversed? :)

[22:55] <clkao> bwahaha

[22:56] * ijoyce should write a Perl6::Hibernate

[22:56] <eric256> DBI in perl6 will be great

[22:56] <autrijus> eric256: TIMB says he's starting to relook it.

[22:57] <eric256> i can't barely bring myself to read or write perl5 code anymore.....it just feels so lame. lol

[22:57] <autrijus> * next to those, it'd be neat to have a stable-ish language core, with online/offline documentation that won't be invalidated in a few weeks.

[22:57] <eric256> any reason it would skip rules tests when parrot is in the path?

[22:58] <autrijus> eric256: not sure. does it skip all rules tests?

[22:58] <eric256> t/builtins/undef................................ok    2/72 skipped: skipped tests - rules support appears to be missing

[22:58] <eric256> i'm still waiting for ti to finish. maybe the undef tests are just using an outdated logic to discover if rules are available

[22:58] <clkao> *grin* if major xs users are looking at perl6 directly what do we need ponie for?

[22:59] <autrijus> clkao: because it takes ages ;)

[22:59] <autrijus> to port from xs, that is

[22:59] <eric256> i should have timed the testing...it is taking a while

[23:01] <nnunley> Mmm.  Ponie has some doing before it can be ridden.

[23:01] <autrijus> hm, come to think about it, stable-ish language with docs is more important than same-memory-space sharing aka ponie.

[23:01] <autrijus> I can live with marshalling and semi-rpc.

[23:01] <clkao> nnunley! bedtime!

[23:01] <ijoyce> no docs scares people away

[23:02] <autrijus> verily

[23:02] <autrijus> quickly obsoleted docs is better than no docs

[23:02] <autrijus> but is still scary

[23:02] * ijoyce agrees

[23:03] <autrijus> * after all above, I'd like to see Perl 6 modules that offers something neat that cannot be done in Perl 5 without much pain.

[23:03] <ijoyce> such as?

[23:04] <mugwump> proper operator overloading!

[23:04] <eric256> i was thinking about that two autrijus but i didn't come up with anything yet

[23:04] <autrijus> I'd like Seaside.

[23:04] <autrijus> a Seaside-Halo workalike.

[23:04] <eric256> ?

[23:04] * integral would like Text.PrettyPrint in p6, that'd show off operators

[23:04] <clkao> mmmmm

[23:05] <autrijus> eric256: http://blogs.inextenso.com/seaside/blog/learning/@gvXvMCSFWrqTsbUe/jjGALGja

[23:05] * theorbtw1 wonders if 6.2.5 has something in purticular to do with velocity.

[23:05] <eric256> so did the whole Data::Dumper module get replaced with a simple .perl call?

[23:05] <autrijus> yeah

[23:05] * integral &

[23:05] <Jonathan_> autrijus: It appears embedding Parrot into Pugs isn't supported on Win32 with MSVC++ compiler, so I guess I need to ship a built Parrot?

[23:05] <autrijus> Halo has this very killer-appish feel

[23:05] <autrijus> Jonathan_: right

[23:05] <vcv--> How do i try embedding parrot into pugs? since im on windows

[23:06] <autrijus> and like integral, I'd like to see a formatting combinator library that can _double_ as a parsing library.

[23:06] <autrijus> i.e. generating Form and Rule from a single set of combinators.

[23:07] <autrijus> it's like a TT2 that also does Parsec for you.

[23:07] * eric256 just got to the operators/ tests....man this takes forever. ;)

[23:07] <autrijus> <- done it in perl5, and it's purely perl 5's limitation that prevents this idea from reaching the full potential

[23:08] <autrijus> * and after that, it'd be neat to have a perl 5 -> perl 6 translator ;)

[23:09] <revdiablo> I wonder how larry's perl5->perl5 translator is coming

[23:09] <autrijus> hm. what am I missing.

[23:09] <mugwump> autrijus: how about an iterator for the Tree module that uses coro's

[23:09] <mauke> perl5->perl5 is done

[23:09] * theorbtw1 tries compiling jhc again.

[23:09] *** theorbtw1 is now known as theorbtwo

[23:09] <revdiablo> mauke: was there a post about it somewhere that I didn't see?

[23:09] <mauke> it's called "cat"

[23:10] <clkao> e/win	28

[23:10] <revdiablo> mauke: well, no, he was doing a perl5->AST->perl5

[23:10] <revdiablo> mauke: as a first step to a perl5->perl6 translator

[23:10] <clkao> karma vcv

[23:10] <jabbot> clkao: vcv has neutral karma

[23:10] <mauke> yeah, that's a bit harder

[23:11] <theorbtwo> OTOH, the input p5 and the output p5 were supposed to be identical... but only in order to make sure that it was working and saving everything.

[23:11] <vcv--> karma? :/

[23:11] <Jonathan_> autrijus: How should I best lay this out in what I distribute? Pugs needs to find parrot.exe, so ideally we'd want parrot.exe in the same folder as pugs.exe?

[23:11] <theorbtwo> Sadly, only perl5 can parse perl5, so that's the only reasonable way to  do it.

[23:11] <mugwump> method traverse_iter($self: Str ?$traversal_order) returns Code {

[23:11] <mugwump>     return { $self.traverse({ yield $^node }, $traversal_order); };

[23:11] <mugwump> }

[23:12] <mugwump> something like that, anyway.

[23:13] <theorbtwo> Hm, I almost feel like "this sub/method may yeild insted of returning" should be an attrib of the code obj.

[23:13] <theorbtwo> (For similar reasons that you should say try { ... CATCH {} ...}.)

[23:13] <mugwump> but you don't know which until it runs!

[23:14] <theorbtwo> Which what?

[23:15] <mugwump> whether it returns or yields

[23:15] <autrijus> Jonathan_: sure, that can work. just parrot.exe itself should be enough

[23:15] <autrijus> Jonathan_: test it to be sure, though

[23:15] <theorbtwo> Hm?  If a yield statement is in there, it might yeild.

[23:15] <theorbtwo> If not, it won't.

[23:16] <theorbtwo> (And error at runtime if it tries to use crafty tricks to do so anyway.)

[23:16] <theorbtwo> .oO(Wow, I just said "yield" and "yeild" in the same sentance.)

[23:18] <Jonathan_> autrijus: Have parrot.exe in same folder as pugs.exe, running from that folder and it says it can't find parrot. Hmmm...

[23:18] <svnbot6> r3802, mugwump++ | Add coro-based iterator to Tree module... untested

[23:21] <autrijus> Jonathan_: hm, adding it to PATH won't work?

[23:21] <Jonathan_> autrijus: Adding it to path does work, just doesn't look in the CWD.

[23:23] <theorbtwo> Hm, I feel like 02Internals should give more details about just what C<reduce exp@(Syn name exps)> actually means.

[23:23] <theorbtwo> ...in part because the point of that bit seems to partly be to introduce some Haskell, and in part because I don't actually know what it means.

[23:23] <svnbot6> r3803, ninereasons++ | examples/cookbook/01strings/01-02default-variables.p6: smaller correction/adjustment (add a more standard solution)

[23:25] <Jonathan_> autrijus: Even when it does find it in the path, I get this: pugs> if "hello" ~~ /h(\w+)/ { say $1; } 

[23:25] <Jonathan_> *** Cannot parse PGE: h(\w+)

[23:25] <Jonathan_>  *** Error: end of file

[23:25] <Jonathan_>  undef

[23:26] <autrijus> try

[23:26] <autrijus> if "a" ~~ /a/ { say $1 }

[23:26] <clkao> e/win28

[23:26] <autrijus> er

[23:26] <autrijus> if "a" ~~ /(a)/ { say $0 }

[23:26] <revdiablo> wouldn't it also be $0?

[23:26] <autrijus> if that doesn't work, cd into src/pge and run

[23:26] <autrijus> ..\..\parrot run_pge.pir 1 1

[23:26] <autrijus> Jonathan_: I know!

[23:26] <autrijus> Jonathan_: you want parrot.exe to be placed in src\pge\

[23:26] <Jonathan_> Oh. :)

[23:26] <autrijus> the same dir as run_pge.pir

[23:27] <autrijus> if that still doesn't work, then I'd like to see error msg from run_pge.pir

[23:27] * eric256 is STILL running tests. geez. lol

[23:29] <theorbtwo> Odd... jhc doesn't like dumpGlob = (doParseWith $ \env _ -> do {glob <- liftSTM $ readTVar $ envGlobal env ... -- it gives a syntax error on the g in glob.  (Unformatted by hand.)

[23:29] <Jonathan_> autrijus: I guess I need to distribute src\pge directory too then. :)

[23:29] <autrijus> Jonathan_: most definitely so :)

[23:29] <autrijus> I think you want the entire src/.

[23:30] <autrijus> but src/pge/ alone is minimal req

[23:35] <Jonathan_> OK, I'm testing this in the pugs tree I just built, so everything is there. I put parrot.exe inside src\pge and it says it can't find the parrot executable. I put it at the same level as pugs.exe and it finds it and gives the end of line error.

[23:35] <svnbot6> r3804, theorbtwo++ | PA02 -- reflow the bits just a bit wider then 80 chars, and some minor

[23:35] <svnbot6> r3804, theorbtwo++ | English corrections.

[23:36] <Jonathan_> "..\..\parrot run_pge.pir 1 1" gives no errors.

[23:37] <autrijus> but is there any output?

[23:37] <autrijus> it should say

[23:37] <autrijus> PGE_Match 0 1 [] []

[23:37] <Jonathan_> No, no output.

[23:37] <autrijus> that's bad.

[23:37] <autrijus> so maybe we need a parrot tree. gasp

[23:38] <Jonathan_> Wonder if we need parrot runtime folder...

[23:38] <autrijus> possible. but I really need to sleep :-/

[23:38] <autrijus> catch you in a few hours

[23:39] <Jonathan_> OK, sure. See you tomorrow, maybe I'll fathom this. :S

[23:39] <Jonathan_> Sleep well. :)

[23:39] *** autrijus changes topic to: 6.2.5 released! | Your opinions wanted: http://perlmonks.org/?node_id=459750 | pugscode.org <Overview Journal Logs> | pugs.kwiki.org

[23:40] <autrijus> ( http://perlmonks.org/?node_id=459750 is the wishlist thing. :-) )

[23:46] <clkao> autrijus: i want proper nci bridged

[23:48] <autrijus> clkao: reply to that thread :D

[23:48] <clkao> i am no monk

[23:50] <theorbtwo> clkao: That's easy to fix.

[23:51] <clkao> ok i am anonymous monk

[23:52] <theorbtwo> perlmonks.org/?node=create+a+new+user

