[01:20] *** sili__ is now known as sili

[02:36] <svnbot6> r7206 | Darren_Duncan++ | /modules/Rosetta-Incubator : added this new sub-project folder, under which a rapid rewrite of the Rosetta database access framework for Perl 6 will take place

[04:02] <Khisanth> hrm TSa is quite confusing

[05:51] <putter> new PIL-Run on mm2 smoke up.  not bad.  speed is still an issue.  some tests failed due to time limits.  eg, even with a separate, extended time limit, it looks like perl5.t didn't finish.

[05:52] <putter> re speed, it looks like there are some low-hanging fruit in P6::C/V.  todo.

[05:52] <putter> good night all &

[05:52] <putter> fglock++ stevan++

[05:57] *** integral is now known as integral|ZzZzz

[06:05] <autrijus> putter++

[06:05] * autrijus pulls and takes a look

[06:06] <putter> please disregard fruit comment.  performance analysis while falling asleep is notably error prone.

[06:06] <putter> &

[06:07] <autrijus> :D

[06:07] <Supaplex> hehe

[06:24] <obra> heya autrijus

[06:28] <autrijus> yo obra

[06:28] <dduncan> greetings

[06:30] <dduncan> fyi, tomorrow I start writing A LOT of Perl 6 code ... the whole Rosetta framework in fact, not just a tiny corner of it that is LKT

[06:30] <dduncan> at the same time, the perl 5 version is being rewritten

[06:30] <obra> dduncan: what do you use rosetta for?

[06:30] <dduncan> they are both being rewritten together, with the perl 6 version being the driving one

[06:30] <dduncan> it is a database access layer

[06:30] <dduncan> you use it like DBI

[06:30] <obra> dduncan: sorry. what do YOU use it for?

[06:31] <dduncan> doing a lot of the tedious work for me when I write applications

[06:31] <dduncan> for example, I'm making a program to sell that is useful for genealogy, among other things

[06:32] <dduncan> I'll also be building an automator for a creative arts competition above it

[06:32] <dduncan> the latter one automates submissions and voting

[06:32] * autrijus is watching a live demo of Visual Haskell

[06:33] <dduncan> said genealogy plus program is the foundation for a new business I plan to start

[06:33] <autrijus> can't wait until it's ported to Eclipse / hIDE

[06:33] <obra> Visial Haskell?

[06:33] <obra> Visual, even

[06:33] <obra> url?

[06:33] <autrijus> http://haskell.org/visualhaskell/

[06:33] <dduncan> obra, you make PPI right?

[06:33] <obra> no. that's alias

[06:33] <obra> I make DBIx::SearchBuilder ;)

[06:33] <obra> also, RT

[06:34] <dduncan> oh

[06:34] <dduncan> I confused you with someone I met at OSCON who did PPI

[06:34] <dduncan> his nick was 4 letters

[06:34] <autrijus> "adam" was 4 letters, but his nick is Alias

[06:34] <obra> The PPI guy is Alias

[06:35] <dduncan> maybe that's the one?

[06:35] <dduncan> whoever it was, while I was at OSCON, on wednesday morning I messaged in this channel, asking to meet up, and said person said they were in the presenter's lounge

[06:35] <svnbot6> r7207 | autrijus++ | * Make MIME::Encode use multisubs as they are meant to.

[06:36] <dduncan> I went there, and I think he said he was giving the PPI talk

[06:36] <Khisanth> that doesn't actually sound like alias

[06:37] <dduncan> I think it was the PPI talk ... I know it was some talk that was about a Perl topic but not Perl 6 / new stuff

[06:38] <Khisanth> well by wednesday I assume you mean two days ago?

[06:38] <dduncan> no, I meant wednesday August 3rd, middle of OSCON 2005

[06:39] <Khisanth> oh that was probably him then :)

[06:39] <dduncan> okay, my memory may be bad about the 4-letter name thing

[06:39] <dduncan> anyway ...

[06:39] <Khisanth> well his name is Adam

[06:40] <dduncan> that's probably him then

[06:40] <dduncan> on a different matter, what's the status of PIL v2 and this Meta Model 2 stuff? ...

[06:41] <dduncan> I get the impression that what I'm making will require them

[06:42] <autrijus> dduncan: MM2 is being deployed to the PILv1 runtime on perl5

[06:42] <dduncan> I'm currently under the impression that, if one simply takes a fresh subversion download, does a plain invocation of the Makefile.PL etc without any special arguments, they don't get any back end using PIL yet

[06:42] <dduncan> I could be wrong

[06:43] <autrijus> dduncan: er, that's wrong

[06:43] <autrijus> ./pugs -BPerl5 -e 'say 123'

[06:43] <autrijus> will compile to PIL, then compile to Perl5, then run ti

[06:43] <autrijus> same for -BJavaScript

[06:43] <dduncan> so the distinction is  a runtime thing, not something done at make time then?

[06:44] <dduncan> I'll have to try that then

[06:44] <dduncan> obviously, while I'm here daily, I miss a lot when I'm not looking too closely

[06:45] <autrijus> er, I mean -BJS

[06:45] <autrijus> yeah, the distinction is a runtime thing

[06:45] <autrijus> eventually the goal is to export the pugs api out to perl5 XS

[06:45] <autrijus> so you can inline perl6 code and have them compiled to native perl5

[06:46] <autrijus> to run alongside with your perl5 modules and share a runtime/GC/debugger

[06:46] <autrijus> so pugs become a huge "source filter" that translates perl6 to perl5

[06:46] <autrijus> so to speak

[06:46] <dduncan> I C

[06:46] <autrijus> that will require cabalization, which I'm working on

[06:47] <autrijus> at this moment though, instead of linking in pugs, having perl5 call out with system("pugs", "-CPerl5") is probably sufficient

[06:47] <autrijus> it will be cool to hook that up with lib/Inline/Pugs

[06:48] <dduncan> so, just to clarify, if I want to write Perl 6 code using metamodel etc features, and I don't care about the backend, is the perl 5 one the most complete?

[06:48] <autrijus> yes.

[06:48] <dduncan> okay, thats what I wanted to know

[06:48] <autrijus> but javascript is otherwise more complete on general features

[06:48] <dduncan> thanks 

[06:48] <dduncan> I see

[06:48] <autrijus> and unless you want to hack the metamodel, you probably want the js one

[06:49] <dduncan> I'll look into that then

[06:49] <autrijus> but perl5 one is coming along quite nicely

[06:49] <dduncan> my situation is like this, I want to be able to do these things that didn't work a few months ago:

[06:49] <dduncan> 1. declare multiple classes inside one file and have the order not matter such that they just work when invoking each other

[06:50] <dduncan> 2. test a function argument to see if it is an object of a particular class

[06:50] <autrijus> 2. I think works in various runtimes

[06:50] <dduncan> 3. use private attributes

[06:50] <autrijus> 1. is a parser issue -- I'll take a look

[06:51] <autrijus> 3. may work in either js or perl5, not terribly sure

[06:51] <dduncan> I seem to recall you said #1 had to do with the parser forgetting things

[06:51] <autrijus> yeah

[06:51] <dduncan> now I thought that once the transition to PIL 2 was done, that parser problem would be gone

[06:51] <dduncan> because PIL is the memory for the parser

[06:52] <dduncan> so the parser doesn't forget things

[06:52] <autrijus> yes, that is correct, except that part is still in its infancy

[06:52] <autrijus> the runtimes are by now all more capable than the parser

[06:52] <autrijus> in terms of the OO semantics they confer

[06:52] <autrijus> now I'm getting hack time, I'll definitely remedy this

[06:54] <dduncan> fyi, I have been learning some things by observing the progress with Pugs' design, and other projects like PPI, ...

[06:54] <dduncan> there are numerous parallels between what the Rosetta etc needs to do and what is being done here

[06:55] <autrijus> oh?

[06:55] <dduncan> eg, SQL::Routine is analagous to PPI

[06:55] <autrijus> ah indeed, you are working with SQL what we are working with Perl

[06:55] <dduncan> they store representations of actions to perform

[06:55] <dduncan> yes

[06:55] <dduncan> the ::SQLParser module is like the parser

[06:56] <dduncan> combined, the ::SQLBuilder and ::Generic, to a lesser extent Rosetta itself, are like the back-ends

[06:56] <autrijus> yup

[06:56] <dduncan> I think that my decision to rewrite should greatly speed up my development progress, and have something useful to show in less time

[06:57] <geoffb> autrijus, got a few minutes?

[06:57] <autrijus> geoffb: sure!

[06:57] <autrijus> (I'm multiplexing with the conference so reply may be a bit intermittent)

[06:57] <dduncan> I have been going relatively slowly over the last 2 years so far, because everything was revising or building on what was previously there, and that I was making a point of explaining everything that changed in the Changes file

[06:57] <geoffb> I'm thinking of doing next week's blog entry on -Ofun . . . wondered what kind of conscious decisions you made to foster that optimization, if any

[06:58] <autrijus> geoffb: oh. plenty.

[06:58] <geoffb> do tell

[06:58] <dduncan> but largely its my tendency to be a ... packrabbit?  forget term ...

[06:58] <autrijus> working code is fun than mere ideas

[06:58] <geoffb> (from your kb to a big audience, with only 1 week latency!)

[06:58] <dduncan> I've had a great difficulty in throwing things away, once I spent the time making them, so new stuff tended to just be added to it

[06:59] <autrijus> so whenever there is a choice I do a quick-n-dirty prototyping in whatever language

[06:59] <autrijus> and refactor as things go

[06:59] <dduncan> in my case, the last 3 years was mostly refactoring, and little new stuff

[06:59] <autrijus> putter's pilrun stuff -- originally crude_repl -- is a good example

[06:59] <geoffb> nodnod

[07:00] <dduncan> in a way, although it doesn't actually work, my previous efforts so far are like the internals of perl 5

[07:00] <autrijus> also, it's more fun to share code with others than having to go thru an intermediary

[07:00] <autrijus> aside from the anarchy committer model, that explains t/unspecced/

[07:00] <autrijus> dduncan: yes, I see the resemblence

[07:01] <geoffb> intermediary?  meaning getting things approved before doing them?

[07:01] <autrijus> yeah, or reviewed, or somehow acknowledged

[07:01] <dduncan> hopefully I'll be able to take you as an example/inspiration and go at this "second try" from the bottom up, moving quickly and having things working almost from the start

[07:01] <autrijus> deadlocking is least fun of all

[07:01] <geoffb> oh yeah

[07:01] <autrijus> and pugs development so far is remarkably bus-error free

[07:02] <dduncan> as a side benefit, the whole process of this "re-birth" is in public SVN and has a bunch of people interested in it

[07:02] <autrijus> safe from potential bus-errors

[07:02] <autrijus> dduncan: right, and hyperlinks adds to the fun.

[07:02] <dduncan> so hopefully I'll get the occasional feedback right from the start

[07:03] <autrijus> I scan technorati and usenets and whatnot every day

[07:03] <autrijus> two or three times

[07:03] <dduncan> of course, as with perl 6, my re-birth version will be strongly influenced by what I did before, so most of the thinking is actually already done ... a lot of what I plan was never implemented

[07:03] <autrijus> and try to hand out committer bit, respond to other people's musings, and generally spread the awareness

[07:03] <geoffb> nodnod

[07:04] <geoffb> Like Larry in the early usenet days

[07:04] <autrijus> aye

[07:04] <dduncan> I know I always like to just go out there and see other people talking about my work

[07:04] <autrijus> geoffb: many of the fun came from the perl culture -- japh, obfu, golf

[07:04] <geoffb> :-)

[07:04] <autrijus> tolkien poetry

[07:04] <autrijus> ;)

[07:04] <geoffb> heh

[07:04] <dduncan> not much of that has happened yet, though, probably because what I did so far doesn't actually work

[07:04] <dduncan> so no one could play with it

[07:05] <dduncan> this second time should be different

[07:05] <geoffb> dduncan, sounds like you had your second system effect the first time around.  ;-)

[07:05] <dduncan> autrijus, you had something to play with from week one, though just 'say hello', but its still something I can emulate

[07:05] <autrijus> I think the rt.openfoundry.org invitation mechanism made a lot of difference

[07:05] <autrijus> dduncan: yeah, I think that is critically important

[07:06] <autrijus> I try -- "desperately" according to allison -- to get everybody else to put whatever early work into public

[07:06] <geoffb> autrijus, what about the rt.o.o invitations?  That they existed and were easy to do?

[07:06] <geoffb> It's a good desparation

[07:07] <autrijus> geoffb: I hacked in that feature for rt.o.o -- it's my pet favourite feature

[07:07] <dduncan> on a side note, Rosetta has been public since 3 weeks after I started it, with over a hundred CPAN releases, though I suppose that's less public than a SVN repository

[07:07] <geoffb> autrijus, good on ya then.  :-)

[07:07] <dduncan> I started it in mid-December 2002, and the first CPAN release was jan 5 2003

[07:07] <autrijus> geoffb: so I'm biased, but yes, because otherwise the process of setting up a svn account (look at svn.perl.org for example) takes days

[07:07] <autrijus> and many casual contributors won't wake for even a day

[07:07] <autrijus> 15 minutes is the attention span

[07:07] <geoffb> dduncan, yeah, public SVN makes a huge difference, I think.

[07:07] <autrijus> s/wake/wait/

[07:08] <geoffb> nodnod, very true.

[07:08] <autrijus> so I think the essence of fun, boils down to 

[07:08] <autrijus> instant gratification

[07:08] <geoffb> You'd think it's a silly thing, but I know in my gut that automated signup is so much better.

[07:08] <autrijus> and a sense of wonder and discovery

[07:08] <geoffb> nodnod

[07:09] <autrijus> chromatic calls what we've been doing as "Imagineering"

[07:09] <autrijus> and that phrase captures the fun spirit very well.

[07:09] <geoffb> :-)

[07:10] <autrijus> you better start asking me something before my attention spins back to bayesian networks :)

[07:10] <geoffb> Sorry, c&p of log to editor window

[07:10] <geoffb> :-)

[07:11] <autrijus> np :)

[07:11] <dduncan> so, I'm doing this re-birth in 2 versions simultaneously, the perl 6 version starting out under Pugs' /modules dir (part of its public SVN), and the perl 5 version probably being at http://svn.utsl.gen.nz/trunk/Rosetta-Incubator/ (public SVN)

[07:11] <geoffb> Go ahead and go bayesian . . . I need to think about what you've said to ask a decent followup

[07:11] <autrijus> cool

[07:11] <autrijus> geoffb++ # resident journalist

[07:12] <dduncan> the perl 6 version is mean to be done in elegant perl 6, and the perl 5 version to look as much alike it as possible, done partly through the use of various third party modules

[07:12] <geoffb> heh, and totally by accident . . . one career I never expected to start down

[07:12] * autrijus mumbles something about "careers defined is careers denied"

[07:13] <geoffb> Where's that from?

[07:13] <autrijus> er I just randomly made it up

[07:13] <geoffb> :-)

[07:15] <dduncan> sounds quotable though

[07:19] <geoffb> autrijus, when you said pugs dev is bus-error free, you were referring to deadlocking (or lack thereof), right?

[07:20] <autrijus> geoffb: yes. there's a common saying among haskell community that GHC suffers from potential bus errors

[07:20] <autrijus> if one of the two simons get hit by a bus, we are in serious trouble

[07:20] <geoffb> AH!  Now I understand

[07:20] <autrijus> the past month proves that pugs is much more resilient

[07:21] <geoffb> right, although there's still unwillingness to touch things that you had talked about wanting to work on (PIL2, for example).

[07:21] <autrijus> but that is because there is no working code for pil2 itself

[07:21] <geoffb> I think that's partially because noone else is doing as much paper reading, conference going, and assorted compiler hacker brain-soaking as you right now

[07:21] <geoffb> nodnod

[07:21] <dduncan> and I thank you for it

[07:21] <autrijus> dduncan: :-)

[07:22] <dduncan> by the way, how can you afford to do that?

[07:22] <dduncan> you make a lot at your job, or have a sponsor?

[07:22] <autrijus> geoffb: but I'm glad I took my time -- after ICFP I'm having a differnt perspective

[07:22] <dduncan> all the travelling could be expensive

[07:22] <geoffb> yeah, I suspected as much

[07:22] <autrijus> dduncan: I've been freelancing for 10 years; I'm trained in getting short term jobs :)

[07:22] <autrijus> (that pays my airfare)

[07:23] <dduncan> so your work is mainly short stints that pay a lot?

[07:23] <dduncan> that's the kind of work I want to get

[07:23] <autrijus> I wouldn't say a lot

[07:23] <autrijus> but certainly enough :)

[07:25] <autrijus> it's very high pressure though

[07:25] <autrijus> as you could see in my past month's journal

[07:25] <dduncan> indeed

[07:25] <dduncan> okay, so I'm going to bed in a few minutes ... but I can still talk/listen in the mean time

[07:25] <geoffb> yeah, some of us have been a little worried about you.

[07:25] <autrijus> and I do stupid things -- eg. formatting RAID HDs -- when I'm burned out

[07:26] <dduncan> I was wondering about that ...

[07:26] <autrijus> geoffb: yeah. but I bounce back easily, thanks to ADD :)

[07:26] <geoffb> :-)

[07:26] <dduncan> do you ever make backups to CD/DVD etc?

[07:26] <geoffb> (diagnosed or just obvious?)

[07:26] <autrijus> dduncan: no, I should do that

[07:26] <autrijus> geoffb: diagnosed _and_ obvious.

[07:26] <dduncan> it sounded like you lost most of your stuff to the hard drive

[07:26] <geoffb> LOL

[07:27] <autrijus> geoffb: ADD+Bipolar means I need to minimize stress and sense of reluctance

[07:27] <autrijus> so I can be in the blessed hyperfocus mode constantly instead of in the cursed distraction mode

[07:27] <geoffb> Actually, for someone with such a love of well-implemented version control, I'm surprised you don't have most of your life checked into a repo

[07:27] <geoffb> autrijus, nodnod

[07:28] <autrijus> geoffb: but I do, except for the mails :)

[07:28] <geoffb> gotcha.

[07:28] <dduncan> I include my emails in my CD backups

[07:28] <autrijus> so you can say -Ofun is kind of my survival instinct :)

[07:28] <dduncan> currently, my email archive since 1997 is almost a megabyte in size, just text

[07:28] <geoffb> Someone needs to write an MTA that uses a version controlled backend . . . .

[07:28] <dduncan> that's wrong ...

[07:28] <geoffb> autrijus, that makes sense

[07:29] <dduncan> I meant to say that my email archive since 1997 is almost 1 gigabyte in size, all text

[07:29] <dduncan> not including spam, which I delete

[07:41] <geoffb> autrijus, how do you suggest that someone who fears releasing stuff that isn't "up to their own standards" -- usually set higher than they would expect of others -- fight the urge not to release until they've "just made it a little better here and there"?

[07:41] <autrijus> geoffb: I usually ask whether I can release on behalf of them.

[07:41] <geoffb> How did you manage to do that the first few times?

[07:41] <geoffb> oh, interesting, and good idea

[07:41] <autrijus> or that I'd like to talk about their work, can they please put up it somewhere linkable.

[07:42] <autrijus> one of my most frequent uttering in both realspace and irc is:

[07:42] <autrijus> "url?"

[07:42] <geoffb> heh

[07:43] *** sili is now known as sili-underscore

[07:43] <autrijus> it's easily the key invention of Tim Bernes-Lee and I'm very grateful :)

[07:43] <autrijus> hey brentdax.

[07:43] <geoffb> :-)

[07:43] <brentdax> Hey.

[07:43] * obra ponders sleep

[07:43] <autrijus> how's life? how's kontent?

[07:43] <autrijus> obra: always a good idea

[07:44] <geoffb> obra, better to ponder it already in bed, with eyes closed . . . .  :-)

[07:44] <geoffb> But don't think too hard about it, of course.

[07:44] <obra> autrijus: indeed. though I keep coming closer and closer to making a continuation based web framework happen in perl5

[07:44] <brentdax> Not working on Kontent at the moment--I keep hoping the speed fairy will come by and make working on it less painful.

[07:44] <autrijus> obra: good, because I learned here how to make it really fast.

[07:45] <autrijus> obra: using purely eval{} and die""

[07:45] <obra> heh

[07:45] <brentdax> I'm actually working on an RC4 library for Pugs, which made me realize that Perl 6 needs a way to mark data as sensitive so that the interpreter can tell the OS not to swap it out.

[07:46] <geoffb> brentdax, how does one do that in other languages?

[07:47] <brentdax> Good question.  Let me look around a bit.

[07:47] <dduncan> what's wrong with the OS swapping it out?

[07:48] <geoffb> dduncan, it's harder to clean bits off a disk . . .

[07:48] <dduncan> what's wrong with said info being on a disk?

[07:49] <dduncan> if its sensitive, it could be stored there in an encrypted form, right?

[07:49] <geoffb> dduncan, he's saying, don't swap the plaintext while the encryption is still in progress

[07:49] <geoffb> (er, I think)

[07:49] <dduncan> well, Mac OS X 10.4 encrypts all virtual memory by default, so it doesn't matter

[07:50] <dduncan> on that system

[07:50] <geoffb> Yes, but how well?

[07:50] <dduncan> I don't know, but I did hear that was a new feature of 10.4 over 10.3 ... sounded like a great one to me

[07:50] <geoffb> nodnod

[07:50] <dduncan> of course, I only heard about it due to John Siracusa's in depth coverage of the OS on ARs

[07:51] <dduncan> really, this is something that a secure operating system should be doing

[07:51] <dduncan> programs shouldn't have to worry about that

[07:51] <dduncan> s/programs/apps/

[07:51] <dduncan> I don't know if any other operating systems do that

[07:52] <geoffb> Years ago I went to a session in which the speaker was demoing some Perl feature or other, and he was printing $$ each run.  Then he said, which OS am I running?  And at least half the audience knew it was OpenBSD, because $$ was completely randomized.  :-)

[07:52] <brentdax> Don't swap the plaintext, don't swap the key.

[07:52] <geoffb> dduncan, it's a fair bet that most security concepts exist in some form on OpenBSD, though of course no guarantees

[07:53] <brentdax> (Although the plaintext is the user's responsibility, I think.)

[07:53] <geoffb> But the core OBSD folks are freaks (in a very useful way)

[07:53] <geoffb> dduncan, and what is "ARs"?

[07:53] <geoffb> Oh Ars Technica?

[07:53] <dduncan> yes

[07:54] <geoffb> nodnod

[07:54] <dduncan> I loved all of Siracusa's Mac OS X articles

[07:54] <geoffb> One of the few general tech news sites I read

[07:54] <dduncan> right from DP 2 in 1999 and up

[07:54] <geoffb> :-)

[07:54] <dduncan> I have paid for an annual ARS subscription just to support that

[07:55] <dduncan> fyi, its $25/yr

[07:55] * geoffb adds that to his "When I'm donating again" list

[07:55] <dduncan> my donation is an automated Paypal subscription, since about 3 years ago

[07:56] <dduncan> or 4 years ago

[07:56] <geoffb> nod

[07:56] <dduncan> renews in february

[07:57] <dduncan> and now nice for me to learn, some time later, that John is also a big part of the Perl community as well

[07:57] <dduncan> not that his articles didn't mention the language every time

[07:57] <geoffb> What does he do?

[07:57] <geoffb> (in the Perl world)

[07:57] <dduncan> big in a way

[07:58] <dduncan> he writes CPAN modules, and I think he's on Perl 6 language ... have to check

[07:58] <geoffb> Ah, he's a strong community member then.

[07:59] <geoffb> I thought you meant he was in a place of power, like Allison's right hand or something.  :-)

[07:59] <dduncan> no, not that high up

[08:00] <dduncan> but I confirmed it ... from my 1GB email archive, he posts a lot on p6l, and he also writes CPAN modules, such as Rose-DB

[08:00] <geoffb> good

[08:01] <dduncan> one thing that really strikes me about John Siracusa is that he's a strong proponent of elegant design and good user interfaces

[08:02] <dduncan> an emphasizer of quality and good practices

[08:03] <dduncan> he certainly makes a point of bashing Mac OS X's non-spacial Finder in every X article, citing the spacial classic Mac OS finder being easier to use

[08:04] <dduncan> he also takes the time to explain why certain things are good or bad

[08:04] <dduncan> and the logic seems to make sense

[08:04] <dduncan> aka be sound

[08:05] <geoffb> nod

[08:13] <dduncan> good night

[08:14] <autrijus> the Yi talk by dons is excellent -- fully dynamically reloadable editor with vi and emacs modes

[08:15] <autrijus> I just watched him changing a few lines of Yi code, then typed :reboot, and the screen refreshed with the bug in the status bar fixed

[08:15] <autrijus> all without losing any buffers or undo history or whatnot.

[08:16] <autrijus> the prospect of using perl6 to script this thing is exciting :)

[08:18] <geoffb> Mmmm, Perl 6 everywhere

[08:18] <geoffb> autrijus, thanks for the nice link in your journal

[08:19] <autrijus> :D

[08:21] <geoffb> Gaah, I am resisting sleep, and I have no idea why

[08:46] <geoffb> autrijus, you must be giving off committer bit vibes.  Someone just asked for the committer bit on one of my projects (SDL_perl 1.x Resurrected),

[08:47] <geoffb> :-)

[08:47] <geoffb> It's been a while.

[08:47] <autrijus> :D

[08:47] <autrijus> spread the bits

[08:48] <geoffb> To anyone I can.

[09:06] <Juerd> Okay, I'm off to see feather

[09:06] <Juerd> Wish me luck

[09:07] <autrijus> Juerd++ # luck!

[09:10] <geoffb> Good luck, Juerd 

[09:13] <r0nny> is there a win32 binary bundle of pugs ?

[09:13] <geoffb> PxPerl, though I don't know how up to date it is (given I haven't used it)

[09:14] <r0nny> want pxperl perl 5 ?

[09:14] <r0nny> wasnt

[09:14] <geoffb> I thought it had Pugs and Parrot in it.

[09:15] <r0nny> well - found a win32 bin of pugs

[09:15] <r0nny> btw - is there a vim syntax file for perl6 ?

[09:16] <geoffb> Yes, I think it's even checked in

[09:16] <geoffb> hold on, I'll check

[09:16] <geoffb> util/perl6.vim maybe?

[09:17] <geoffb> yep, that's the one

[09:17] <r0nny> hmm

[09:17] <r0nny> where to download ?

[09:17] <geoffb> It's in the Pugs source tree

[09:18] <autrijus> http://svn.openfoundry.org/pugs/util/perl6.vim

[09:21] <r0nny> thx

[09:21] <r0nny> will make live munch more easy

[09:21] <r0nny> btw - is there a howto for threads & stuff ?

[09:22] <geoffb> t/unspecced/

[09:25] <r0nny> there is no spec for perl6 threads ?

[09:25] <r0nny> damn

[09:26] <geoffb> We here in #perl6 live on the bleading edge

[09:26] <r0nny> yeah

[09:26] <r0nny> -_-

[09:26] <r0nny> ok

[09:27] <r0nny> now im going to do something insane

[09:27] <r0nny> im going to write my cool irc but with multiserver support in c++

[09:27] <r0nny> but=bot

[09:28] <geoffb> oh the humanity

[09:28] <geoffb> or inhumanity, in this case

[09:28] <r0nny> hehe

[09:28] <r0nny> as soon, as i have enough classes, it wil lbe simple

[09:37] <masak> wow. the vim syntax file does help a lot

[09:37] <masak> luqui++

[09:48] * nothingmuch is upset

[09:48] <nothingmuch> my computer is not going to sleep on it's own anymore

[09:50] <geoffb> nothingmuch, someone stopped by #sdlperl and picked up a committer bit there, saw your nick on the project member list, and seemed impressed.  You appear to have fans.  :-)

[09:50] <nothingmuch> err, i promised to help out

[09:50] <nothingmuch> who was it?

[09:50] <geoffb> alexe

[09:51] <nothingmuch> do i know alexe?

[09:51] <geoffb> Who I'd never met before

[09:51] * geoffb shurgs

[09:51] <nothingmuch> so

[09:51] <nothingmuch> now that you've mentioned it

[09:51] <nothingmuch> i really need to help out

[09:52] <nothingmuch> sdlperl1 repo?

[09:52] <geoffb> In the channel topic

[10:00] <nothingmuch> luqui++ for blogging about unreadable papers

[10:04] <geoffb> Oh yeah, he's totally right there.

[10:04] <geoffb> I just don't have the attention span to read that crap

[10:06] <geoffb> I think part of the problem is that academic papers are not yet optimized for the web way of doing things.

[10:06] <geoffb> Aside from way too many being in PDF (*SIGH*), they all assume you're coming to them from a background in the field,

[10:07] <geoffb> rather than assume you just came from a Google search.

[10:08] <geoffb> "No, thank you, I don't want to have to spend 15 hours trying to read enough Wikipedia articles to understand the obtuse jargon and silly formulas strewn throughout.  Yes, I'm sure it's nice and consise.  Waste a few thousand bits on some extra words.  They're cheap, you know."

[10:11] <nothingmuch> i actually like PDF as a format for enhanced readability

[10:11] <nothingmuch> on OSX it's fast

[10:11] <nothingmuch> it's clean

[10:11] <nothingmuch> it's pretty

[10:11] <nothingmuch> and it prints well

[10:11] <nothingmuch> as for 15 hours of wikipedia - i don't want to do that either

[10:11] <nothingmuch> but i do ;-)

[10:12] <geoffb> The only OS X box in the house has a tiny fraction of the screen real estate of my workstation . . . but my complaint is more that I can't use any tools other than a printer and a PDF reader on it.

[10:12] <nothingmuch> over one to two years of use i've learned more from wikipedia than I have from all the encyclopedias i've read over the years and all the science channels i've watched combined

[10:12] <nothingmuch> ah

[10:12] <nothingmuch> in tiger the pdf reading is integrated into safari

[10:13] <nothingmuch> my only complaint now is that I don't remember to save stuff as often as I should ;-)

[10:13] <geoffb> Yeah, Wikipedia just never ceases to amaze me

[10:31] <pdcawley_> I find the integrated into safari thing really annoying with PDFs.

[10:34] <geoffb> *yawn*

[10:34] <geoffb> Time to scurry off to dream land

[10:34] <geoffb> night, all

[10:34] <nothingmuch> ciao

[10:35] <geoffb> and to you

[10:49] <Juerd> rehi

[10:49] <Juerd> feather is back up 

[10:49] <Juerd> I have no idea what was wrong

[10:49] <Juerd> The console cart was in use, so I had to just attempt a reboot

[10:49] <Juerd> And that worked

[10:49] <Juerd> The blinking of the keyboard lights suggested a kernel panic, though.

[10:50] <Juerd> Can sameone quickly confirm that they can reach feather?

[10:50] <rafl> Juerd: Works.

[10:53] <Juerd> Thanks

[11:09] *** autrijus is now known as autrijus_tw

[12:28] * pdcawley_ reads TSa on exceptions and wonders if 'terrorism' is the new 'Hitler' yet.

[12:29] * pdcawley_ is enormously glad that he won't be summarizing on Monday.

[12:31] <pdcawley_> CATCH Exception { say "Why do you hate freedom?" }

[12:31] <autrijus> pdcawley++

[12:31] <pdcawley_> If ever there was a candidate for the cluebat, it's that post.

[12:34] <rep> which post

[12:34] <pdcawley_> The one where TSa declares that deliberately throwing an exception 'is terrorism'.

[12:34] <rep> url?

[12:35] <pdcawley_> Umm... it's in the p6l Exceptuations thread.

[12:35] <rep> :/

[12:36] <pdcawley_> MessageID: [email@hidden.address]
[12:36] <pdcawley_> What he actually says is "BTW, I would call *intentiona* exceptions terrorism"

[12:36] <pdcawley_> Which seems to miss the point that *all* exceptions are intentional.

[12:37] <rep> hehe

[12:40] * pdcawley_ thinks "To hell with it!" and posts the "Why do you hate freedom?" crack to the list.

[12:40] <rep> why do you want to destroy our way of life?

[12:40] <autrijus> s/way of //

[12:40] <pdcawley_> Is that the terrorist asking the US, or the US asking the terrorist? Or both?

[12:41] <rep> heh.

[12:41] * pdcawley_ stops with the politics.

[12:42] <autrijus> I think it's terrored subjects asking the US terrorists, but that may just be me :)

[12:42] * autrijus also stops with the politics

[12:46] <kgftr|konobi> theorbtwo: moo?

[13:08] <Limbic_Region> kgftr|konobi - theorbtwo is working on a vector search engine for a contest with a Monday deadline - I would expect him to be less visible then normal

[13:08] <Limbic_Region> IMO, the vector search engine he is modeling is crap - but he knows what he needs more then I do

[13:08] <kgftr|konobi> bah... he needs to get his ass out to the pub this evening

[13:09] <Limbic_Region> when I see him at the Monastery (or castaway) - I will let him know

[13:09] <Limbic_Region> though from my little experience with him - he isn't much of a drinker

[13:09] <kgftr|konobi> Limbic_Region: anyone introduced him to hilberts curve yet?

[13:09] <kgftr|konobi> Limbic_Region: heh, with castaway at sophos, he will become one... =0)

[13:10] <Limbic_Region> *shrug*

[13:11] <kgftr|konobi> theorbtwo: http://search.cpan.org/~teejay/Math-Curve-Hilbert-0.04/Hilbert.pm - check it out

[13:13] <Limbic_Region> the approach he is using takes the cosine of the indexed document and the search vector

[13:13] <Limbic_Region> the problem is that it doesn't take into consideration a lot of things

[13:15] <kgftr|konobi> nice thing about hilbert is that 2 things that are close together in 2D space will become close together in 1D space, so makes bringing up the index stupidly fast

[13:16] <Limbic_Region> well, there are other things to consider too - word weighing, exact phrase matching, etc

[13:16] <Limbic_Region> and perhaps for what he needs to do to win the contest - those are all un-necessary bells and whistles

[13:17] <kgftr|konobi> true

[13:17] <kgftr|konobi> Class::Indexed also++

[13:19] <Limbic_Region> I think the task for the competition is to rate which TV shows you currently like and predict which ones you might like

[13:20] <Limbic_Region> it was towards the end of the day and I didn't get many particulars from him

[14:09] <nothingmuch> [email@hidden.address] 'Hi <firstname>, You Need To Act Fast To Earn Fast! ?'

[14:09] <nothingmuch> Action: defer/accept/discard [dax]:

[14:17] <putter> dduncan, autrijus: re backends:  pugs is still the best all around backend.  js has better non-oo, but little oo.  p5 is currently weakest of the three (slowest, least coverage, most buggy, little oo).  this can all change of course.  perhaps even quickly.  but that's my understanding of current state.

[14:19] * nothingmuch is getting ready to revamp BlondieD

[14:19] <nothingmuch> reading a lot about Minley typing

[14:19] <nothingmuch> uhm... maybe i've confused the name

[14:19] <putter> autrijus: :)

[14:19] <nothingmuch> oops

[14:19] <nothingmuch> Hindley and Milner ;-)

[14:19] <nothingmuch> so Minler typing

[14:19] <putter> err, nothingmuch: :)

[14:21] <fglock__> putter: the new fails are mostly timeouts?

[14:28] <putter> autrijus: re bus failures, I don't know that's it's been stated explicitly, so...  One key contribution you make is creating a sense of high potential, of great possibilities.  I could be working on pypy or ruby... but they would not dream of integrating H-M typing.  And neither would pugs, without you.  That excitement and motivation is fundamentally important.  It just decays slower than actual commits when we think you will be back i

[14:28] <putter> n a bit.

[14:28] <autrijus> putter: sure, but the high potential was inherent in the synopses

[14:29] <autrijus> which is also why it decays slowly.

[14:29] <putter> fglock__: I don't have a clear idea.  it might be worth running some tests individually which used to pass, but now fail.  there is definitely a new failure mode, a cpu-free hang.

[14:37] <ingy> hola friends

[14:38] <autrijus> greetings ingy san!

[14:39] <ingy> hi autrijus 

[14:39] <rafl> What's Luke Palmers nick on IRC again?

[14:39] <autrijus> luqui

[14:39] <ingy> where are you these days?

[14:39] <autrijus> I'm in Tallinn

[14:39] <autrijus> for ICFP -- see my journal

[14:39] <autrijus> I'm in the "future of haskell" discussion workshop

[14:39] <autrijus> at this moment

[14:40] <rafl> autrijus: Thank you.

[14:41] * qwr lives in Tallinn ;)

[14:43] <ingy> Ross Mayfield's wife is from ee

[14:43] <ingy> (my boss)

[14:47] <putter> autrijus: yes and no.  yes, if you bus collided, pugs is at a point where a couple of people could create a perl6 over a year or few.  but no, it would be a much more poorer, limited and impoverished p6.  both as a language, and as an implementation.  the "unopened christmass present" feel of pugs, that "anything" is possible, and on a startlingly short time-scale, that p6 can be really important, not just nice... that's key to attracti

[14:47] <putter> ng and keeping good motivated poeple.  and I don't see anyone _else_ hanging out at ICFP, playing with simon, _sending back links and thoughts of what pugs could be_.

[14:48] * autrijus purrs and blushes etc.

[14:48] <putter> sorry, big picture, you're still a potential bus error. :)

[14:53] <rafl> Would someone please restart evalbot?

[14:58] * Limbic_Region would but he isn't someone he is no one 

[15:13] <putter> non?existential philosophy? ;)

[15:14] <Limbic_Region> I didn't say "nothing"

[15:15] <Limbic_Region> though I have dabbled in that too

[15:15] <putter> rafl: sorry, i don't have access to the machine on which it runs, nor am i set up to run it myself. :/

[15:15] <putter> Limbic_Region: :)

[15:15] <Limbic_Region> I would say more like borgism

[15:15] <rafl> putter: Thought it runs on feather..

[15:16] <Limbic_Region> I have an acct on feather but can SSH from where I am

[15:16] <rafl> I simply don't know where the scripts are that recompile/restart it on every commit. I would do that mysef otherwise.

[15:20] <putter> rafl: could be.  don't think i ever got an account.  'locate' (if linux) to find pugs installs?  watch process list for the crontab job going by?

[15:21] <rafl> Ah, I guess I found it.

[15:21] <putter> check evalbot source in svn for embedded filenames? ;)

[15:21] <putter> great.

[15:23] <rafl> liqui used to run it.

[15:25] <putter> ohhh, borg-ism.  took a failed wikipedia and onelook search for that to sink in.

[15:26] <putter> rafl: when you figure out what to do, please document... hmm... you did check that someone didn't already?  (very very fuzzy foggy recollection of iblech doing something like that... maybe)

[15:28] <rafl> putter: I think I figured it out. It's compiling pugs by now.

[15:29] <rafl> putter: I checked for other docs in the repository. Nothing found.

[15:30] <putter> k

[15:46] <rafl> ?eval say "Hello";

[15:46] <evalbot_> Hello bool::true 

[15:47] <rafl> OK, only the revision is missing now.

[15:49] <rafl> ?eval say $?PUGS_VERSION;

[15:49] <evalbot_7207> Perl6 User's Golfing System, version 6.2.9, August 3, 2005 (r7207) bool::true 

[15:49] <rafl> Yay!

[15:49] <kolibrie> rafl++

[15:50] <rafl> Maybe someone want's to do a commit so we can see if it updates correctly.

[15:53] <rafl> ?eval 1 while 1

[15:53] <evalbot_7207> (no output)

[15:54] <rafl> ?eval "x" x 2**42

[15:54] <evalbot_7207> pugs: out of memory (requested 1048576 bytes) 

[16:07] *** integral|ZzZzz is now known as constant

[16:22] <ods15> ?eval sleep 2

[16:22] <evalbot_7207> Error: No compatible subroutine found: "&sleep" 

[16:22] <ods15> ?eval $a = 1; while($a++) {}

[16:22] <evalbot_7207> Error: Undeclared variable: "$a" 

[16:22] <ods15> ?eval my $a = 1; while($a++) {}

[16:22] <evalbot_7207> (no output)

[16:23] <ods15> heh

[16:23] <ods15> ?eval my $a = 1; while($a++) { say 'a' };

[16:23] <evalbot_7207> a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a 

[16:23] <ods15> bah

[16:24] <rep> ..

[16:33] <jql> infinite loops in finite time? sweet

[16:35] <sili_> it bends the mind

[16:36] <kgftr|konobi> might still be flying along... IRC has message length constraints

[16:37] <rafl> kgftr|konobi: No. That would consume much CPU time which it doesn't currently.

[16:40] <kgftr|konobi> rafl: "would" translates to "shouldn't"... and "shouldn't" translates to "assume" which we all know...

[16:40] <kgftr|konobi> anyways

[16:40] <kgftr|konobi> pub

[16:45] <putter> Is it still the case on recent perls that method calls are > 10x more time costly than sub calls?

[16:45] * putter realizes he may have been making design decisions on obsolute data...

[16:46] <putter> s/obsolute/obsolete/

[16:46] * putter onelook's for "obsolute"...

[16:47] <putter> nope

[16:47] <putter> ah well.  it's the way of clarity too.

[16:47] <pdcawley_> Oh my lord. I continue to boggle at TSa. "Exceptions shouldn't be considered just another tool."

[16:48] <dudley_> WTF?

[16:50] <pdcawley_> Well, initially he said that he called intentional exceptions 'terrorism', so I responded pointing out that there's no such thing as unintentional exceptions, and that's how he responded.

[16:50] <pdcawley_> perl6-language

[16:51] <dudley_> I read the terrorist thing, then promptly began ignoring the thread.

[16:51] <pdcawley_> Yeah. I think terrorism might be the new Hitler. He' s coming dangerously close to going into my killfile, but I can't really do that what with writing the summaries and all.

[16:52] <putter> soo... what is the current relationship between Bit and Bool?

[16:54] <putter> fglock: ping?

[16:54] <obra> Expn TSa?

[16:56] <pdcawley_> Thomas Sandlass

[16:56] <pdcawley_> He mostly wibbles about types. Dunno if he's ever contributed any code.

[17:12] <fglock__> putter: Bool is an "enum"

[17:13] <fglock__> bool::true is Bit(1) and bool::false is Bit(0)

[17:14] <fglock__> implementation-wise, I think bool::true is a macro

[17:14] <putter> thanks! :)

[17:15] <putter> hmm... does mm2 have enums...

[17:18] <putter> hmm.  i would expect a bit(0) to stringify as "0", but a perlish false to stringify as "".  looks like ./pugs uses "".  sigh.

[17:25] <putter> fglock__: how would you feel about merging P6::Value, ::Container, PrimP5 and PrimP6?  i have a toy which is starting to separate a combined file into p5, mm2 p5 extracted from p6 class defs, prelude p6 for compiling to p5, and p6 for extending ./pugs.  any thoughts?

[17:26] <putter> the combination is rather large.  but shrinking noticably.  i'm still unclear on how to organize it clearly.

[17:27] <putter> so it's still a "this may all just not work".  but I thought i'd mention it.

[17:27] <fglock__> to start, how about moving into a single dir

[17:27] <putter> hmm, good idea.

[17:28] <Limbic_Region> fglock_ how went/goes the junction optimization?

[17:28] <fglock__> putter: I wrote a small example to find out what continuations and lexical scopes would look like

[17:29] <putter> !

[17:29] <fglock__> Limbic_Region: it looks like the main difference of cpan's Perl6::Junction and Q::S is that Q::S does short-circuiting

[17:29] <putter> using the paper autrijus mentioned, or another approach?

[17:30] <fglock__> which paper?

[17:30] <putter> looking...

[17:30] <fglock__> Limbic_Region: so it's doable

[17:32] <putter> http://www.cs.brown.edu/~sk/Publications/Papers/Published/pcmkf-cont-from-gen-stack-insp/

[17:33] <putter> http://www.colabti.de/irclogger/irclogger_log/perl6?date=2005-09-27,Tue   contains some discussion re using w p5

[17:33] <fglock__> putter: I'll compare with my newly invented wheel :)

[17:34] <Limbic_Region> cool - will keep an eye on it, thanks fglock_

[17:34] <putter> :)

[17:36] <fglock__> putter: my plan was to use no stack at all - I was storing everything in a hash and using gotos

[17:37] <putter> make sense.  "hash" == "heap"

[17:37] <putter> s/make/makes/

[17:38] <putter> have to worry about gc yourself, yes?

[17:38] <fglock__> probably, yes. I wonder how p5 behaves if you have a program with thousands of gotos

[17:39] <putter> ;)  ?

[17:40] <fglock__> I'm not using function calls and return - only goto $h{label}

[17:41] <putter> can't see that it would necessarily be a problem.  but I haven't looked at how it's really implemented.

[17:42] <putter> try! :)

[17:44] <putter> oh, right.  fglock, could you give me the quick tour of what's boxed and not, when Array elements are Scalars or not, and such?

[17:45] <fglock__> let's see...

[17:47] <fglock__> Value.pm has 2 parts - the first half implements boxed values; the second half implements conversions of p5-p6 unboxed values

[17:48] <fglock__> Perl6::Value::Bit::to_str() converts a p5 logic value to a p5 string, following p6 rules

[17:49] <putter> P6V::Bit/Num/Str... is anything ever blessed into them, or are they "utility" classes.

[17:49] <putter> ie, collections of subs?

[17:50] <fglock__> they are just collections of subs - they work on unboxed things

[17:50] <putter> k

[17:50] <fglock__> Array->fetch($i) always return a Scalar

[17:51] <fglock__> which is bound to the array element

[17:51] <putter> so there are two levels, regular p5 str/num/etc, with some utility subs, and the mm2 classes.

[17:51] <fglock__> yes

[17:51] <putter> k

[17:51] <putter> internally Array stores... what?

[17:52] <putter> there seemed some uncertainty in the code/comment about whether things other than ->fetch() return Scalar?

[17:53] <fglock__> Array.pm has 3 main parts: the MM object, the lazy array implementation, and the native array implementation

[17:53] <fglock__> there is another object for "slice"

[17:54] <fglock__> sorry - where?

[17:54] <putter> Container::A being the lazy?

[17:54] <fglock__> yes

[17:55] <putter> are the contents at all different in each of the three?

[17:57] <putter> re where, # XXX - I think only fetch() need to return Scalar

[17:57] <fglock__> lazy arrays are ARRAY of (Perl6::Value::List | Object)

[17:59] <putter> what does the usage chain look like?   mm uses lazy, lazy uses Native and List, Native uses p5?

[17:59] <fglock__> re where: that's because assigning to a pop() doesn't make much sense anyway

[17:59] <putter> ah

[18:01] <fglock__> lazy uses p5 and List

[18:01] <putter> what uses Native?

[18:02] <fglock__> Native is meant to be used by the "eager" role (unwritten)

[18:03] <fglock__> is is used to tie p5 @INC

[18:04] <fglock__> "tieable" and "readonly" roles are implemented in Scalar.pm

[18:04] <fglock__> "eager" and "lazy" were not written yet

[18:04] <putter> ok, so mm Array is a wrapper around lazy C::A.  is it a "thin" wrapper or does it do any conversion as requiests go by?

[18:04] <putter> k

[18:05] <fglock__> Array processes slice() - but this could be moved into C::A

[18:05] <stevan> hello all

[18:05] <fglock__> hi stevan

[18:06] <stevan> I am giving out commiter bits if anyone is interested : http://rt.openfoundry.org/Foundry/Project/?Queue=423

[18:06] <putter> hi stevan

[18:06] <putter> :)

[18:07] <putter> so you imported mm2?

[18:07] <stevan> putter: no,.. this is a real-world usable version

[18:07] <stevan> it is based on MM2

[18:07] <fglock__> putter: re slice: most of the work is done by the Perl6::Slice object

[18:08] <putter> ah C3

[18:09] <putter> so lazy is full of Scalars and Lists?  anything else?

[18:09] <nothingmuch> bah

[18:09] * nothingmuch didn't notice there was already a window opened

[18:09] <nothingmuch> TSa is becoming hard to cope with

[18:10] <nothingmuch> i don't know what it is he's got against exceptions and freedom, but it's really nonsensical

[18:10] <fglock__> putter: that's it

[18:10] <putter> ok...

[18:12] <putter> i noticed there were a lot of is/does => { next method }.    that can all go away now, right?  given mm2 inheritance working

[18:13] <fglock__> we will need to have separate Perl6::Container::Array::Native and Perl6::Container::Array::Eager - because the Native version always force storing unboxed things

[18:14] <fglock__> re next_method: ok

[18:14] <putter> ok.  I think that's all my questions for now.  thanks! :)  fglock++

[18:23] <kolibrie> stevan: looks fun.  I'm game.

[18:25] <stevan> kolibrie: your in :)

[18:29] <kolibrie> stevan: thanks

[18:39] *** erg_ is now known as erg

[18:41] <brentdax> Does pugs have an unpack() or something else I can use to split a string into pairs of characters?

[18:42] <Limbic_Region> you could use a regex

[18:42] <integral> .chars + a two-at-a-time loop

[18:42] <Limbic_Region> heh

[18:42] <brentdax> Figured as much.

[18:42] <Limbic_Region> TIMTOWTDI is alive and well in p6

[18:43] <Limbic_Region> so integral - does .chars return the list of chars in one context and the count in another?

[18:43] <integral> isn't that the subject of yet another silly thread?

[18:43] <Limbic_Region> I posted this to the list some time ago and never got an answer - ppl have a hard time staying on topic and the thread went off on some tangent

[18:44] <integral> I wish the easy stuff would just get decided and coded, and the hard stuff throughly ignored

[18:44] <Limbic_Region> that's why I gave up on trying to help with the docs

[18:45] <Limbic_Region> actually - it is a large reason why I am not very involved at all anymore

[18:45] <integral> nothing seems to be actually specified with rules either :-/

[18:46] <Limbic_Region> well - the crux of the problem is that the language is still being designed concurrently with an implementation

[18:47] <QtPlatypus> brentdax: No it doesn't.  Unfortunitly pack is undefined.

[18:47] <Limbic_Region> and while those two are trying to work together - they both have very different agendas

[18:47] <integral> except by two groups who ostensibly communicate via wandering threads on MLs

[18:47] <Limbic_Region> I am in violent agreement integral

[18:47] <integral> I like the fact that the grammar is meant to be extensible using modules; but it would be even better to use that to structure the design process

[18:48] <integral> err, of course that would mean development would have to implement a rules engine, and that didn't work...

[18:48] <integral> well, I suppose pugs has succeded at getting the core stuff done

[18:48] <putter> almost have a prolog based one...  but set it aside to support pilrun/ P6::V/C / mm2.

[18:49] <Limbic_Region> Pugs has succeeded in many things

[18:49] <Limbic_Region> and it is not nearly as bad as the picture I paint

[18:49] <integral> the metamodel stuff is brilliant

[18:50] <Limbic_Region> but I find it incredibly frustrating when simple questions don't get straight forward answers and spin off into endless tangents

[18:50] <putter> one really only needs to get rules working once, anywhere.  then it becomes easy to boostrap other implementations.

[18:51] <geoffb> rafl, ping

[18:51] <integral> you need the precedence parser bit that no one's spec'ed too

[18:52] <Limbic_Region> integral - IIRC, .chars doesn't give you a list of chars only a count as it is intended to replace length() where you also can do .bytes etc

[18:52] <integral> hmm, you could just write the engine in perl6 rules, use perl6 rules to parse the perl6 rules, and bootstrap via pm's stuff

[18:52] <putter> ah, you mean for user extensions of the regexp grammar.  yes.

[18:52] <integral> ?eval $a = "abc"; say $a.chars

[18:52] <evalbot_7207> Error: Undeclared variable: "$a" 

[18:53] <integral> ?eval my $a = "abc"; say $a.chars

[18:53] <evalbot_7207> 3 bool::true 

[18:53] <integral> ?eval my $a = "abc"; say join(":",$a.chars)

[18:53] <evalbot_7207> 3 bool::true 

[18:53] <integral> ok, pugs at least doesn't do what I assumed

[18:54] <putter> re bootstrap, until recently("historically"), pm's rules hasn't been able to parse its own grammar.  still cant generate a :parsetree, but you can fake that.

[18:54] <Limbic_Region> integral - I think Pugs is in alignment with the spec even though numerous people have requested that it support multiple return values depending on context

[18:54] <QtPlatypus> integral: Your thinking that .chars should in an array/list context act like split('',$_)

[18:55] <putter> then its just a matter of doing an engine.

[18:56] <wolverian> QtPlatypus: I think .chars should return a list of aliases to the string 

[18:56] <wolverian> admittedly that is somewhat action at a distance.

[18:56] <QtPlatypus> And likewise with .bytes?

[18:56] <wolverian> QtPlatypus: right.

[18:56] <wolverian> and .words

[18:57] * QtPlatypus endorces this product/service.

[18:57] <integral> it just makes sense, and looks more dwimmy than split('',...)

[18:58] <putter> I came pretty close a couple of times, but each time hit a pugsbug I couldn't work around.  But a lot of that goes back half of pugs's life.  Should be easier now.  But still, for my latest attempt, I decided to stand someplace secure p5&prlog to get it working, and then incrementally port from there.

[18:59] <putter> .chars {... want.Array ? split : length() }   ?

[18:59] <putter> but  ($alen,$blen)=($a.chars,$b.chars)

[18:59] <integral> want.Array?  not something nice like want ~~ Array? [/me makes stuff up again]

[19:00] <putter> i think that's waht the .t file says

[19:00] <integral> also is this possible: ($first_char, $second_char) = $str.chars ?

[19:00] <wolverian> given want { when Array { ... } } # would work nicely enough, although we can just implement return type MMD as well

[19:01] <putter> (return type mmd)++

[19:01] <wolverian> integral: no, since .chars only returns a number. :)

[19:01] <integral> return type or return context mmd?

[19:01] <brentdax> Why should .chars only return a number?

[19:01] <putter> .chars == length()

[19:01] <wolverian> integral: I don't know. both? :)

[19:01] <wolverian> brentdax: because that's how it is specced.

[19:02] <brentdax> But isn't it also specced so that .bytes only returns a number?

[19:02] <geoffb> ls

[19:02] <integral> are they different, or are both just matched against the signature of the return continuation?

[19:02] <geoffb> bah, wrong computer

[19:02] <putter> length exploded into .chars/.bytes/.graphemes/.codes

[19:02] <geoffb> ETOOMANYKEYBOARDS

[19:02] <wolverian> integral: I don't know.

[19:02] <putter> yes, that's spec

[19:03] <brentdax> I'd like to see those four return pseudo-arrays into the string, which Just Happen to numify to their length.

[19:03] <integral> are graphemes and codes the right way around there?  I thought graphemes were after you turned é from two codepoints to one thingy?

[19:03] <putter> not an ordered list

[19:04] <integral> oops, should have been obvious =)

[19:04] <brentdax> Smallest to largest is .bytes, .graphemes, .codes.  I think there's a fourth level, but I'm not sure if it's .chars or something else.

[19:04] <PerlJam> brentdax: that's been suggested several times with great favor from the community, nothing blessed though that I know.

[19:04] <brentdax> Er... .bytes, .codes, .graphemes.  Ack.

[19:04] <putter> ;)

[19:04] <brentdax> PerlJam: Isn't that what's being discussed, though.

[19:05] <brentdax> ?

[19:08] <fglock__> bytes/codes/graphemes thread: http://www.codecomments.com/archive312-2004-7-222999.html

[19:11] * PerlJam wonders where .chars falls in relation toe .bytes/.codes/.graphs/.langs

[19:11] <PerlJam> s/toe/to/

[19:13] <QtPlatypus>  /me thinks that .chars == .graphs

[19:13] <QtPlatypus> Chars are thouse things that I see, ie graphs.

[19:14] <PerlJam> QtPlatypus: I think that the meaning of .chars varies depending on pragmata.

[19:14] <geoffb> QtPlatypus, I don't think that is necessarily true for all languages

[19:15] <QtPlatypus> geoffb: Some of the wearder Indian lanauges are like that yes.

[19:15] <integral> or maybe magical so you have one thingie that eq both "ss" and "ß"

[19:24] <autrijus> rehi!

[19:25] <autrijus> the conference is over :)

[19:25] <QtPlatypus> autrijus: re

[19:25] <autrijus> re QtPlatypus

[19:27] <geoffb> Cool . . . how was the last day?

[19:28] <geoffb> .oO( Long day for a last conference day ...)

[19:28] <autrijus> it's 10:27pm here

[19:28] <autrijus> yeah, went to the #haskell meeting in a bar

[19:29] <autrijus> hacked with wolfgang until the battery exhausted

[19:29] <nnunley> It looks like you were busy.

[19:29] <clkao> autrijus: say hi to lukhnos

[19:29] <clkao> nnunley!

[19:29] <autrijus> wolfgang++ # icfp contest chD[D[D[D[D[D[D[D[Dampion

[19:29] <nnunley> clkao!!

[19:29] <autrijus> clkao: I don't see lukhnos here.

[19:29] <geoffb> autrijus, might I suggest several extra battery packs?

[19:29] <putter> QtPlatypus: re .chars == .graphs, not in unicode.

[19:29] <autrijus> I do see ccshan

[19:29] <clkao> autrijus: he is beside me

[19:29] <autrijus> geoffb: they are heavy :)

[19:29] <autrijus> clkao: oh! 

[19:29] <autrijus> clkao: lukhnos: hi!

[19:30] <geoffb> Too bad wireless power is so . . . touchy

[19:31] <integral> microwaving autrijus would be ... bad

[19:31] <nnunley> Radioactive autrijus?  Would he develop super powers?

[19:32] <PerlJam> nnunley: he already *has* super-powers.

[19:32] <putter> Tesla coils?

[19:32] <geoffb> I was thinking more of . . . bah . . . whatshisname . . . the guy who is responsible for AC water power generation?

[19:32] <nnunley> PerlJam:  More powers are always good.

[19:32] <geoffb> yeah, Tesla . . . 

[19:32] <geoffb> The whole "Power resonating with the fundamental frequency of the planet" thing

[19:32] <nnunley> Mmm.  Crystal planet.

[19:32] <putter> lol

[19:33] <geoffb> It's worth reading the story of Tesla doing this in Colorado, if you haven't already . . . the grass started to give off electric discharges,

[19:34] <geoffb> and he eventually blew a good portion of the local power grid with the massive feedback

[19:34] <nnunley> Nice.  I remember reading some nutter's popular science book suggesting doing it again.  Along with how to make a functioning UFO (which didn't)

[19:35] <geoffb> heh

[19:35] <geoffb> Tesla was high up on my list of "He's a genius . . . now, can we give him his own planet to mess with?" people.

[19:36] <nnunley> Definitely a 'try it elsewhere' situation.

[19:41] <dduncan> hello

[19:42] <putter> ludites.  :)  humanity/civilization is a "give it is own planet to mess with" exercise.  unavoidable.

[19:42] *** flgr__ is now known as flgr

[21:47] <masak> putter++ # for being a technological optimist

[21:47] <masak> putter-- # also for being a technological optimist

[23:50] <svnbot6> r7208 | Darren_Duncan++ | /modules/Rosetta-Incubator : replaced ReadMe file with rewritten README

