[00:06] <metaperl_> is pugs able to execute any of the modules in the modules directory of the distro?

[00:07] <stevan> metaperl: yes

[00:07] <metaperl_> i had problems executing COnfig::Tiny

[00:07] <stevan> CGI, FileSpec (not File-Spec) and PodStreamParser

[00:07] <metaperl_> URL to follow

[00:07] <stevan> metaperl: wont work, its OO

[00:08] <stevan> mugwump moved some stuff around, but we need to better organize things

[00:08] <metaperl_> oh

[00:08] <stevan> the old rule was: if its in ext/ it runs, if its in modules/ it doesnt

[00:09] <stevan> but he moved stuff from ext to modules, and mixed it up

[00:09] <metaperl_> i'm trying to figure out what aspect of Perl6 to present at this month's Perl Monger's meeting --- nobody else likes to present

[00:09] * metaperl_ does svn update

[00:09] <stevan> metaperl: do you need something which can run?

[00:10] <stevan> personally I really like multi-subs, they are mostly implemented

[00:10] <metaperl_> ah, our functional stuff ... that would be nice

[00:10] <stevan> see examples/fp.p6 

[00:10] <stevan> and in CGI as well,.. I implemented param as a multi-sub

[00:10] <metaperl_> actually I would like to exemplify most of the points made in a recent perlmonks post

[00:11] <metaperl_> by iblec

[00:11] <metaperl_> how to port perl5 to perl6 or something like that

[00:11] * metaperl_ groks url

[00:12] <metaperl_> hmm wish I knew his exact name

[00:12] <stevan> check the AUTHORS file

[00:13] <metaperl_> http://perlmonks.org/index.pl?node_id=442402

[00:13] <metaperl_> found it

[00:13] <metaperl_> this should be on pugs wiki somewhere

[00:13] <metaperl_> I will add it

[00:13] <stevan> actually its mostly copied from modules/PORTING_HOWTO

[00:15] <metaperl_> oh

[00:15] <metaperl_> oh well

[00:15] <metaperl_> http://pugs.kwiki.org/?ConversionGuide

[00:16] <metaperl_> what do the asterisks here mean?

[00:16] <metaperl_> multi sub length (*$x, *@xs) returns Int { 1 + length(@xs) }

[00:17] <stevan> they mean the parameter is slurpy

[00:17] <metaperl_> lol

[00:17] <metaperl_> slurpy? what does that mean?

[00:18] <Khisanth> flattens the corresponding argument?

[00:18] <stevan> arrays dont flatten by default in perl6 

[00:18] <stevan> so foo(@list) and foo(*@list) mean to different things

[00:18] <stevan> *@ is slupry it gathers all the args and slurps them into @list

[00:18] <Khisanth> heh refering to the * as a splat would be fitting :)

[00:19] <stevan> Khisanth: i think it is splat in other contexts :)

[00:19] <stevan> so that length function works like this

[00:19] <stevan> first *$x slurps up a scalar

[00:19] <stevan> then *@xs slurps up the rest

[00:19] <Khisanth> hrm slurp a scalar?

[00:20] <stevan> it is equivalent to the Stardard ML idiom of x:xs

[00:20] <stevan> or sometimes as head:tail

[00:20] <Khisanth> ah that is more clear suprisingly :)

[00:20] <metaperl_> when you say foo(@list) and foo(*@list) are you referring to calling a sub foo in two different ways or is that the header of sub foo

[00:20] <stevan> both :)

[00:21] <Khisanth> stevan: why wouldn't sub length( $x, @xs ) work in that case?

[00:21] <stevan> when you define the function sig you can specify that you want to slurp all the parameters by giving it a *@ sigil (or twigil or whatever)

[00:21] <metaperl_> flatten means something different to me. (@x, @y) flattens into a linear list

[00:22] <stevan> and when you call foo(*@list) you are explicity flattening @list before you pass it

[00:22] <metaperl_> what od you mean "flatten" it

[00:22] * metaperl_ looks for the Synopses

[00:22] <stevan> metaperl: perl6 lists dont auto-flatten like perl5 lists

[00:23] <metaperl_> auto-flatten... what do they do instead

[00:23] <metaperl_> of course, I should go read this: http://dev.perl.org/perl6/synopsis/S06.html

[00:23] <stevan> Khisanth: no it wouldn't work since it would require you to specify a scalar and a list as your two args, and the length recurses in such a way that would not work 

[00:23] <metaperl_> unless you want to tell me

[00:24] <Khisanth> ACK!

[00:24] <stevan> metaperl: I suggest you read it too, but I will explian my understanding

[00:24] <Khisanth> stevan: sounds like those things work like perl5 prototypes

[00:24] <stevan> Khisanth: they are formal parameters, so they a much more powerful, but they are similar to prototypes in somw ways

[00:25] <stevan> metaperl: the biggest change (as far as I know) is in how args are passed

[00:25] <stevan> all perl6 subs which do not specify their args have a default arg of *@_

[00:26] <stevan> which will slurp up everything passed to the sub into the @_ array (much like perl5)

[00:26] <ihb> stevan: what about those that that declare parameters? do they get a @_ too?

[00:26] <stevan> ihb: no idea, have to check the synopsis

[00:27] <Khisanth> there there are those $^ variables

[00:27] <Khisanth> stevan: does this apply to methods as well?

[00:28] <stevan> but the idea of @_ in some ways conflicts with formal params since perls auto list flattening makes it hard to pass multiple arrays (which is what prototypes tried to fix)

[00:28] <stevan> Khisanth: yes, it does apply to methods

[00:28] <stevan> Khisanth: but there is some weirdness with the invocant too

[00:28] <stevan> you can leave it out of the arg list

[00:29] <stevan> and it will be implicity topicallized

[00:29] <Khisanth> and it would default to $self?

[00:29] <stevan> however there is still some debate of the details of that

[00:29] <stevan> Khisanth: no to $_

[00:29] <stevan> metaperl: am I making sense?

[00:30] <metaperl_> stevan, I actually flipped over to S06 while you were talking to Khisanth

[00:31] <metaperl_> it made sense and what you said makes sense too

[00:31] <stevan> metaperl: yeah they can explain it much better than I can :)

[00:31] <metaperl_> heh

[00:32] <stevan> metaperl: be warned that type based multi-sub dispatching is broken in Pugs

[00:32] <stevan> t/subroutines/multi_subs.t has some broken tests in it

[00:33] <stevan> but if the sub signature is different enough it does seem to work

[00:36] <metaperl_> my impression of all this is that there is too much working going on - you have to do a lot of work in the sub's header and when calling the sub and make sure it all jives...

[00:36] <stevan> metaperl: the idea I think is that if you do the work in the subs header, you wont have to do it when calling it

[00:36] <metaperl_> I've never seen so much protocol in calling a sub in any language ever before

[00:37] <metaperl_> well, but look at how foo(@args) will be an error when we have sub ($x, $y, $z)

[00:37] <stevan> metaperl: it is pretty nutty, but hey its perl6 :)

[00:37] <metaperl_> :)

[00:37] <stevan> yes it would

[00:37] <stevan> unless you did this:

[00:38] <stevan> sub foo (@args) { ... } and then called it foo([ $x, $y, $z ]) using the list constructor []

[00:38] <stevan> (i think I am right here, I may not be so dont bank on it)

[00:38] <stevan> of course you could always just do: sub foo(*@args) { ... }

[00:39] <metaperl_> complaining is pointless. if I have a better solution, then I should offer it

[00:39] <metaperl_> otherwise just understand why they are doing it

[00:40] <stevan> metaperl: personally I like it, but I do agree it can get a little burdonsome

[00:40] <stevan> ideally it will DWIM in most cases and then allow freaks like me to do weird things :)

[00:40] <shapr> Where are the lambdafolk needed today?

[00:40] <stevan> shapr: it can't still be day for you is it?

[00:40] <shapr> No, it's 2am actually.

[00:41] <shapr> er, 2:40am

[00:41] <sorje> 2:41! ;-)

[00:41] <metaperl_> there are issues with getting pugs installed in a local tree as opposed to /usr right?

[00:41] <Darren_Duncan>  stevan and others ...

[00:41] <shapr> sorje: your clock is better than mine.

[00:41] <metaperl_> shapr, is the air fantastic in Sweden?

[00:41] <Darren_Duncan> I have now finished the SQL::Routine perl6ification, with a few remaining issues

[00:41] <jabbot> pugs - 1403 - SQL::Routine - last major perl6ification

[00:41] <stevan> metaperl: I have no idea,.. i just put it in /usr

[00:42] <shapr> metaperl_: It's warm on the inside, cold on the outside.

[00:42] <metaperl_> I dont have such privs

[00:42] <stevan> Darren_Duncan: nice :)

[00:42] <Darren_Duncan> 1. I still have to write a SYNOPSIS for the perl 5 version, which will then be ported

[00:42] <sorje> shapr, sure. I am quite surprised that germany and sweden are in the same timezon, thouhg. ;-)

[00:42] <shapr> metaperl_: re: extremeperl - turing machine equivalence is total copout

[00:42] <Darren_Duncan> I didn't take advantage of any Perl 6 features that would make the code look too different from the perl 5 code

[00:42] <Darren_Duncan> eg, hyper-operators

[00:42] <metaperl_> heh

[00:42] <shapr> sorje: I'm just a little bit more north than you are. I'm 70km south of the Arctic Circle.

[00:43] <Darren_Duncan> while I am open to doing so ...

[00:43] * shapr looks at sort.t

[00:43] <Darren_Duncan> I would like for the SRT code to be kept stable until the next Pugs release, aside from the SYOPSIS addition and small bug fixes

[00:44] <Darren_Duncan> after the Pugs release, feel free to play with it, stevan, as you indicated you wanted to

[00:44] <sorje> Oh sorry, confused Sweden and Finland

[00:45] <shapr> s'okay, I've confused germany and austria before ;-)

[00:45] <Darren_Duncan> any major suggested changes should be done after the Pugs release

[00:45] <shapr> gru√ü gott!

[00:46] <sorje> As I'm in the very very south austria feels more appropriate anyway. ;-)

[00:46] <shapr> erlangen?

[00:46] <Darren_Duncan> aside from chatting here and fixing smaller bugs, my attention today and tomorrow is on releasing the perl 5 modules ... which correspond to what is already checked into pugs

[00:47] <Darren_Duncan> distro

[00:47] <sorje> shapr, about the level of munich

[00:47] <shapr> ah

[00:48] <sorje> Well, got to work to.. day. Good night ;-)

[00:49] <shapr> g'night

[00:50] <Darren_Duncan> g'night

[00:51] <drbean> ruby's Matz has discovered pugs according to his blog: http://www.rubyist.net/~matz/200503.html

[00:51] <Darren_Duncan> lookin

[00:51] <drbean> but the blog is in Japanese

[00:52] <Darren_Duncan> is there a good compu-translator for this?

[00:52] <metaperl_> nice April Fool's Joke drbrean :)

[00:52] <metaperl_> there was some talk of using PPI Darren

[00:53] <Darren_Duncan> so who here can read that?

[00:55] <drbean> It just says pugs is a perl6 compiler written in Haskell

[00:56] <drbean> and for a moment he thought, Are you kidding?

[00:56] <Darren_Duncan> I hear you, carry on

[00:56] <drbean> BUt truly, they are not kidding

[00:57] <drbean> and there is a link to Autrijus's perl.com interview with chromatic

[00:57] <drbean> and that's all.

[00:58] <Darren_Duncan> ok

[00:59] <shapr> http://www.rubyist.net/~matz/20050307.html - note the Pugs and Haskell

[01:00] <drbean> Oh in the next entry up about Span, he is saying something about parrot and pugs

[01:01] <shapr> Amazingly, there's an article on Haskell in this month's 'Dator Magazin' (Computer Magazine) here in Sweden.

[01:01] <drbean> Matz: After, what's interesting about Span is that it has adopted Parrot as its engine.

[01:02] <drbean> execution engine

[01:03] <drbean> And he says: Go, Parrot!

[01:03] <shapr> Btw, would anyone mind if I submitted the pugscode url to lwn.net for next week's Perl development section?

[01:03] <mrmuskrat> howdy folks

[01:03] <shapr> hiya musk

[01:03] <Darren_Duncan> howdy doody

[01:03] <drbean> And he concludes, Pugs is going to win.

[01:04] <Darren_Duncan> shapr, why would that be a problem?

[01:04] <Darren_Duncan> just do it

[01:04] <shapr> Just wondered if there was an un/official PR person for pugs.

[01:05] <metaperl_> stevan...

[01:05] <stevan> metaperl...

[01:05] <autrijus> shapr: go ahead :)

[01:05] <shapr> yay!

[01:05] <Darren_Duncan> hello autrijus

[01:05] <metaperl_> fp.p6 uses eq ... in Haskell == would be polymorphic to the type of the daum

[01:05] <stevan> hey autrijus 

[01:05] <metaperl_> datum

[01:05] <autrijus> stevan: sanity-p? http://www.nntp.perl.org/group/perl.perl6.compiler/486

[01:05] <metaperl_> autrijus: ignore my email - I learned that objects are not implemented?

[01:05] <autrijus> aye

[01:05] <mrmuskrat> can anyone help me with a pugs makefile issue?  "makefile(411) : fatal error U1087: cannot have : and :: dependents for same target"  Windows XP Pro + perl, v5.8.6 built for MSWin32-x86-multi-thread

[01:06] <autrijus> metaperl_: polymorphic == works really well when both sides are of same type ;)

[01:06] <autrijus> mrmuskrat: what's the paragraph around line 411? nopaste it?

[01:06] <mrmuskrat> FIXIN = pl2bat.bat

[01:07] <stevan> autrijus: that sounds sane

[01:07] <stevan> contrib is a good name too

[01:07] <Darren_Duncan> whenever someone wants, have a look at SQL::Routine in the repository and tell me if you spot any obvious bugs

[01:07] <autrijus> stevan: ok. would you like to make it happen? :)

[01:07] <stevan> autrijus: surely :)

[01:07] <Darren_Duncan> ... with the perl 6

[01:07] <mrmuskrat> pure_all ... blah blah ... 410 -> realclean :: and 411 -> $(RM_F) $(INST_SCRIPT)\pugs.exe $(INST_SCRIPT)\pugscc

[01:07] <autrijus> I can do [B[B[B[Bstevan++

[01:07] <autrijus> gah, bad latency.

[01:08] <stevan> :)

[01:08] <autrijus> stevan++ # I can do thD[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[D[Dis at least. :)

[01:08] <autrijus> argh!

[01:08] * autrijus wonders if there's a way to convince ssh/screen to not emit those stuff

[01:08] <drbean> I found the Matz reference in Dan Kogai's blog entry about Autrijus

[01:08] <stevan> autrijus++ 

[01:08] <drbean> http://blog.livedoor.jp/dankogai/archives/15812094.html#trackback

[01:08] <autrijus> mrmuskrat: weird. post the entire makefile to nopaste or some other url?

[01:09] <autrijus> mrmuskrat: also, are you using trunk with nmake?

[01:09] <drbean> that blog is in Japanese too

[01:09] <mrmuskrat> what's nopaste?

[01:09] <autrijus> pasteling: nopaste

[01:09] <autrijus> pasteling: nopaste?

[01:09] <stevan> metaperl: your right, but I wanted to get fp.p6 to run :)

[01:10] <metaperl_> yes, I'm just noticing the difference between the languages

[01:10] <autrijus> ~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~[6~oh well. 

[01:10] <autrijus> mrmuskrat: http://sial.org/pbot/

[01:10] <pasteling> "mrmuskrat" at 67.174.166.72 pasted "makefile" (813 lines, 30.8K) at http://sial.org/pbot/8864

[01:10] <stevan> metaperl: to be honest, the examples were actually ripped from my Standard ML book, not haskell

[01:10] <metaperl_> I see

[01:10] <stevan> and adapted from my fp module too 

[01:11] <mrmuskrat> I was looking for a nopaste user :)  not pasteling

[01:11] <mrmuskrat> this is my first visit to #perl6 and my first time on irc.freenode.org 

[01:11] <Darren_Duncan> I've used nopaste, whatsyerquestion

[01:11] <jabbot> pugs - 1404 - added (untested) Perl 5 implementation o

[01:12] <Darren_Duncan> mrmuskrat, go here: http://sial.org/pbot/perl6

[01:12] <Darren_Duncan> use that when you want to share more than a line of quoted material

[01:12] * metaperl_ heads home

[01:12] <Darren_Duncan> ... with #perl6

[01:13] <metaperl_> 13 minutes later than 5pm on a Friday... how generous of me

[01:13] <mrmuskrat> Darren, right.  I figured it out right before autrijus posted the link :)

[01:13] <Darren_Duncan> so metaperl_ , you're in my timezone then

[01:13] <autrijus> mrmuskrat: are you using svn trunk?

[01:13] <Darren_Duncan> i got 5:13 here

[01:13] <Darren_Duncan> pm that is

[01:13] <metaperl_> yes are you in Victoria? I'm in Southern California

[01:13] <Darren_Duncan> I am in Victoria

[01:14] <Darren_Duncan> silicon valley north is one name for the area

[01:14] <Darren_Duncan> 'land of trees' is another

[01:14] <metaperl_> have you heard of the Fane Darren? they are a religious group in Victoria, BC CANADA

[01:14] <mrmuskrat> no idea :)  I'm extremely new to svn.  I just did a "svn co url" and cd'ed in when it was done to do my "perl Makefile.PL"

[01:14] <Darren_Duncan> never heard of 'Fane'

[01:14] <autrijus> mrmuskrat: that is fine :)

[01:15] <Darren_Duncan> are they a cult or a non-cult?

[01:15] <autrijus> anyone else on win32?

[01:15] <autrijus> if not I'll boot into win32 to check this

[01:15] <Darren_Duncan> I'm win32-free here

[01:15] <metaperl_> i cant answer that "cult" question easily

[01:16] <Darren_Duncan> the short definition of cult is if the group worships someone who is present there physically

[01:16] <mrmuskrat> autrijus, am I going to have to rebuild my linux box sooner rather than later?  ;-)

[01:16] <Darren_Duncan> anyway, don't worry about it

[01:16] <shapr> So that's why Rocky Horror Picture Show is a cult picture? Because of Dr. Frankenfurter?

[01:17] <stevan> shapr: didnt he die at the end?

[01:17] <shapr> Oh, so it stops being cult then?

[01:17] <stevan> shapr: it would have to be a Brad and Janet cult ;)

[01:17] <autrijus> mrmuskrat: uh no, no, pugs is committed to support win32

[01:17] <Darren_Duncan> a cult is a cult while a worshipped human leader is alive

[01:18] <Darren_Duncan> if he dies, then either the group falls apart, or ceases to be a cult

[01:18] <autrijus> ..and become a culture?

[01:18] <Darren_Duncan> mayhaps

[01:19] <stevan> autrijus: so you want me to put Pugs::MakeMaker into the root lib/ directory?

[01:19] <autrijus> stevan: yes I do

[01:19] <stevan> ok

[01:19] <Darren_Duncan> there should be separate dirs for Perl 5 and Perl 6 modules

[01:19] <autrijus> I'll manage to convince ingy and mugwump here that it's a good idea :)

[01:20] <autrijus> Darren_Duncan: yup, see my p6c post?

[01:20] <stevan> ok :)

[01:20] <Darren_Duncan> looking ...

[01:21] <stevan> autrijus: what should I do about the Pugs MakeMaker makefile?

[01:21] <autrijus> stevan: raze it

[01:21] <stevan> ok :)

[01:23] <Darren_Duncan> I see that email thread now

[01:24] <Darren_Duncan> autrijus, same question as last week ... about what time of the day on this weekend to you plan to post Pugs .15?

[01:25] <Darren_Duncan> fyi, aside from little bug fixes that people point out, the only remaining thing i want to get in is a SYNOPSIS for srt

[01:25] <Darren_Duncan> and I will be writing that today

[01:25] <stevan> ok commiting

[01:25] <Darren_Duncan> ... elevator music ...

[01:25] <autrijus> Darren_Duncan: .14 you mean?

[01:25] <Darren_Duncan> um ...

[01:26] <autrijus> Darren_Duncan: I'm flexible. could be tomorrow

[01:26] <autrijus> i.e. at least 24hrs from now

[01:26] <Darren_Duncan> you usually do it late saturday my time zone

[01:27] <Darren_Duncan> ... yes, I meant .14

[01:27] <stevan> ok r1405 is in

[01:27] <autrijus> danke

[01:27] <Darren_Duncan> shins

[01:27] <stevan> bitte

[01:27] <stevan> autrijus: I am going to respond to the mail, just for consistency

[01:28] <stevan> actually nevermind,..no need to do that

[01:28] <Darren_Duncan> I could do so also, but you guys will say what needs saying

[01:28] <stevan> this is all logged

[01:29] <Darren_Duncan> what is with this theorbtwo / theorbtw1 duality that I keep seeing?

[01:29] <stevan> ok I need to grab a bite to eat, but I have one question for the group 

[01:29] <Darren_Duncan> go ahead

[01:29] <stevan> I wanted to do something more with the CGI hack 

[01:29] <stevan> so i was looking at some old CGI books

[01:30] <stevan> should I implement a guestbook, a game of hangman, or something else equally as silly and useless :)

[01:30] <autrijus> I like hangman :)

[01:30] <Darren_Duncan> the game sounds more fun ...

[01:30] <stevan> ok

[01:30] <Darren_Duncan> and everyone does guestbooks already ... might as well stand out

[01:30] <stevan> hangman it is,.. that is what my daughter thought too :)

[01:30] <autrijus> mrmuskrat: try "svn up"

[01:31] <autrijus> mrmuskrat: and see if it gives you the same problem

[01:31] <Darren_Duncan> moreover, guestbooks are more of a database example than a cgi example

[01:31] <stevan> ok,.. off for food, I will be back later &

[01:31] <jabbot> pugs - 1405 - restructuring where perl6 and perl5 code

[01:32] <mrmuskrat> ok

[01:32] <mrmuskrat> yes but now it's at 414

[01:33] <autrijus> ok.

[01:33] <pasteling> "mrmuskrat" at 67.174.166.72 pasted "makefile (rev 1405)" (818 lines, 31.1K) at http://sial.org/pbot/8865

[01:34] <Darren_Duncan> there are now 'empty' folders in /ext/Pod*

[01:34] <Darren_Duncan> I mean ext/Pugs

[01:34] <Darren_Duncan> the modules were moved out, but not the support files

[01:34] <Darren_Duncan> is someone in the middle of this, or is that a loose end?

[01:36] <autrijus> I don't see a ext/Pugs here

[01:36] <autrijus> maybe you need to simply rm them

[01:36] <Darren_Duncan> I mean ext/Pugs-Documentation and ext/Pugs-MakeMaker

[01:37] <Darren_Duncan> are still there, without the modules, but still with support files

[01:37] <autrijus> pugs-doc should remain

[01:37] <Darren_Duncan> testing ...

[01:37] <autrijus> the support files are artifacts on your system

[01:37] <autrijus> they are not versioned.

[01:37] <autrijus> so, just rm them, I think

[01:37] <Darren_Duncan> I thought svn should have removed them, since it previously added them

[01:38] <autrijus> they may be added by perl Makefile.PL

[01:38] <Darren_Duncan> will remove then up to see what happens

[01:38] <autrijus> k

[01:39] <Darren_Duncan> it re-added Pugs/Documentation

[01:39] <Darren_Duncan> I mean _

[01:39] <Darren_Duncan> I mean -

[01:39] <autrijus> that's ok.

[01:39] <autrijus> it should be there.

[01:39] <autrijus> (I think)

[01:40] <autrijus> yay, aix finally builds ghc 6.4.

[01:40] <autrijus> that means the last reason for maintaining 6.2.2 compatibility has just went away.

[01:40] <Darren_Duncan> did you try it or read that?

[01:40] <autrijus> if no-one opposes, Pugs 6.0.14 will drop 6.4 support.

[01:40] <autrijus> Darren_Duncan: er, I'm the AIX porter for ghc :)

[01:41] <Darren_Duncan> say again?

[01:41] <autrijus> er

[01:41] <autrijus> drop 6.2 support.

[01:41] <mrmuskrat> so I should download and install 6.4?

[01:41] <autrijus> drop ghc 6.2 support.

[01:41] <Darren_Duncan> sounds better

[01:41] <autrijus> mrmuskrat: right, and maybe uninstall 6.2

[01:41] <Darren_Duncan> in that case, I'll have to install 6.5 since I don't have it

[01:41] <Darren_Duncan> I mean 4

[01:41] <autrijus> yeah. sorry folks

[01:41] <Darren_Duncan> looking ...

[01:41] <autrijus> but the #ifdef

[01:41] <autrijus> is getting out of control.

[01:42] <autrijus> and 6.2 doesn't work well on win32 anyway (no %ENV)

[01:42] <autrijus> I mean, 6.2-built pugs doesn't have real %*ENV support.

[01:42] <autrijus> which is annoying.

[01:42] <Darren_Duncan> I have to find the GHC download site again

[01:42] <mrmuskrat> i was wondering about that last time I tried pugs

[01:42] <autrijus> http://haskell.org/ghc/

[01:42] <Darren_Duncan> du-oh-h

[01:46] <Darren_Duncan> downloading now

[01:47] <mrmuskrat> the uninstall takes took twice as long as the install

[01:48] <Darren_Duncan> is uninstall automatic, or do I have to do something special?

[01:48] <autrijus> prolly the regular win32 uninstall procedure

[01:49] <Darren_Duncan> ... when using a premade binary

[01:49] <Darren_Duncan> I'm not using win32

[01:49] <Darren_Duncan> Mac OS X

[01:49] <Darren_Duncan> I suppose the installer package will tell me...

[01:49] <Darren_Duncan> download done

[01:50] <autrijus> ah. in that case you don't need a uninstall I think

[01:51] <Darren_Duncan> so they will work at the same time, or a normal install will overwrite the old?

[01:51] <autrijus> I don't know. I imagine the latter

[01:51] <Darren_Duncan> the new installer says there is a script for uninstalling ...

[01:52] <Darren_Duncan> will check that 6.2 had one...

[01:52] <mrmuskrat> if it's anything like the win32 install, you don't have to uninstall as long as you update the path to point at the version you wish to use

[01:52] <Darren_Duncan> sure, ... in this case I have no more use for the old version though

[01:57] <mrmuskrat> oh boy.  anyone play SWG?

[01:57] <mrmuskrat> I just logged in to the radiant galaxy and the ewoks are invading Bestine.  lol

[01:57] <Darren_Duncan> as an experiment, I didn't even try to remove the old version, and just ran the new version installer ... see what happens

[01:58] <Darren_Duncan> installer says it was successful

[01:58] <autrijus> oh you should notice a significantly faster compile :)

[01:58] <autrijus> will be even faster when I drop all the 6.2isms.

[01:59] <obra>                             HEH

[01:59] <obra> er. "heh"

[01:59] <Darren_Duncan> doing a ghc -v gives the right version num

[01:59] <Darren_Duncan> do it yeah do it!

[02:00] <Darren_Duncan> I am currently at rev 1405

[02:00] <autrijus> you may want a "make clean"

[02:00] <Darren_Duncan> will now try to remake everything

[02:00] <autrijus> right.

[02:01] <Darren_Duncan> did a 'make clean'

[02:02] <Darren_Duncan> curiously, according to its output, it didn' t do a 'rm' or anything like that, but rather a 'mv' to /dev/null

[02:02] <mrmuskrat> autrijus, thanks for trying to get this working tonight but I'm going to call it quits for now.  I'll svn up in the morning and try again.

[02:02] <autrijus> mrmuskrat: ok. I will fix it when you're up

[02:02] <autrijus> mrmuskrat: sorry for the problem

[02:02] <Darren_Duncan> anyway, now doing 'make' ...

[02:03] <autrijus> mrmuskrat: oh, did 6.0.13 release workforyou?

[02:03] <autrijus> or 6.0.12 release for that matter

[02:03] <mrmuskrat> from cpan?  let me check

[02:04] <mrmuskrat> I had one of them working

[02:04] <mrmuskrat> probably 6.0.11

[02:05] <mrmuskrat> I know that I had to revert to GHC 6.2.2 to get it to install

[02:05] <mrmuskrat> quit

[02:05] <mrmuskrat> doh

[02:05] <mrmuskrat> nice... pugs -v shows 6.0.10

[02:07] <mrmuskrat> and cpan is lying to me "Perl6::Pugs is up to date."

[02:07] <mrmuskrat> d/l the gzip

[02:07] <autrijus> reboot to win32 &

[02:08] <mrmuskrat> same error with 6.0.13 from cpan

[02:09] <mrmuskrat> anyway, there's no rush.  it's not like I've got to work my way through the synopses this weekend.

[02:10] <mrmuskrat> I just thought that I'd spend an hour or two getting familiar with it

[02:12] <autrijus> hrm

[02:12] <autrijus> it worksforme on win32.

[02:12] <autrijus> mrmuskrat: what is your nmake version?

[02:13] <mrmuskrat> 7.10.3077

[02:13] <autrijus> see "nmake /?"

[02:13] <autrijus> oh. the .net one?

[02:13] <mrmuskrat> yes

[02:13] <autrijus> where can I get it?

[02:13] <autrijus> I'm using 1.50 still

[02:13] <autrijus> if you remove nmake.exe from your path

[02:13] <autrijus> and run makefile.pl again

[02:13] <mrmuskrat> I got it with MS C++ .NET 2003

[02:13] <autrijus> it will likely to fix it

[02:14] <autrijus> hrm, can you put it somewhere I can download? the nmake.exe I mean

[02:14] <autrijus> or rather, nmake.*

[02:14] <mrmuskrat> I was using the VS .NET 2003 command prompt and not the normal one

[02:14] <mrmuskrat> you should d/l the free version... I've got it at work.

[02:15] <mrmuskrat> let me see if I have the url

[02:15] <Darren_Duncan> the 'make' succeeded, bug I got a 'Warning: `Ptr' is imported more than once:' from the DynamicLoader.hs file

[02:15] <Darren_Duncan> anyway, on to 'make test' ...

[02:16] <mrmuskrat> http://msdn.microsoft.com/visualc/vctoolkit2003/

[02:18] <mrmuskrat> ew

[02:18] <mrmuskrat> I have to find the old version of nmake and remove it

[02:22] <mrmuskrat> um

[02:22] <mrmuskrat> when I run perl Makefile.PL and it can't find nmake, it downloads version 1.50.

[02:23] <mrmuskrat> the error is the same and still at line 414

[02:23] <autrijus> very weird.

[02:23] <autrijus> go sleep, I'll figure it out :)

[02:23] <mrmuskrat> thanks :)

[02:23] <autrijus> oh, nopaste your perl -V

[02:23] <autrijus> before you sleep :)

[02:24] <mrmuskrat> ok

[02:24] <pasteling> "mrmuskrat" at 67.174.166.72 pasted "perl -V" (57 lines, 2.5K) at http://sial.org/pbot/8867

[02:51] <jabbot> pugs - 1406 - * GHC 6.4 here we come.

[03:35] <Darren_Duncan> I was away from my comp for the last hour ... anyway ...

[03:35] <Darren_Duncan> 'make test' for 1405 said - Failed 29/169 test scripts, 82.84% okay. 224/3849 subtests failed, 94.18% okay.

[03:36] <autrijus> sounds good

[03:36] <Darren_Duncan> this under 6.4

[03:36] <Darren_Duncan> on Mac OS X 10.3.8

[03:37] <Darren_Duncan> if I'm around, I'll test your preflight likewise ... otherwise, I won't test again unless you ask due to some risky change that was made

[03:38] <Darren_Duncan> question - did 1406 have those ifdefs stripped out, or does that come later?

[03:38] <Darren_Duncan> nevermind

[03:38] <autrijus> :)

[03:39] <Darren_Duncan> I said that because a svn up showed no changes to .hs files, where I presume the ifdefs are

[03:39] <Darren_Duncan> then again ...

[03:51] <jabbot> pugs - 1407 - * builtins.kwid is now S29.

[03:57] <autrijus> massive src reorg in progress.

[03:59] <Darren_Duncan> i unnerstan'

[04:01] <jabbot> pugs - 1409 - mp me up baby

[04:01] <jabbot> pugs - 1408 - * ArgsParse is now Run.Args.

[04:06] <autrijus> t/Synopsis is finally being blasted.

[04:07] <autrijus> ingy will head the new Perl6::Bible effort.

[04:07] <autrijus> film at 11. I mean, on p6c.

[04:12] <theorbtwo> Mm.

[04:12] <theorbtwo> I suppose it's no longer April Fool's there by a good 12 hours.

[04:12] <autrijus> sadly, it's serious.

[04:12] <mugwump> It's only supposed to be until noon

[04:14] <theorbtwo> I have no problems with t/Syn being blasted.

[04:14] <theorbtwo> But the docs should be available by man Perl6::S02, etc, when pugs is installed.

[04:15] <theorbtwo> Also, having them available for easy grep is key for useful development.

[04:15] <theorbtwo> (Try searching for the =:= operator with google...)

[04:15] <mugwump> Well, for your convenience I've included a URL to the online browsable versions and the subversion source.

[04:15] <autrijus> theorbtwo: yes. that's the idea

[04:16] <autrijus> Perl6::Bible will contain them

[04:16] <autrijus> and it will be on CPAN

[04:16] <autrijus> so you can easily download them.

[04:16] <theorbtwo> Oh, OK.

[04:21] <jabbot> pugs - 1411 - Early Kwid parser

[04:21] <jabbot> pugs - 1410 - Remove t/Synopsis/S*.pod

[04:21] <Steve_p> Perl6::Bible?

[04:22] <mugwump> sure, why not :)

[04:22] * Steve_p wanders off the p6c to take a peek

[04:24] * Alias_ pokes autrijus: <purl> couldn't get the headlines: http://wagner.elixus.org/~autrijus/cpan.rdf wasn't successful

[04:30] <autrijus> Alias_: will fix

[04:30] <autrijus> NA hackathon announced: http://www.nntp.perl.org/group/perl.perl6.compiler/487

[04:30] <autrijus> EU hackathon to be announced next monday

[04:31] <autrijus> all in the same month

[04:31] <Alias_> 4 days!

[04:31] <Alias_> wow!

[04:31] <autrijus> Alias_: you had not heard I'll stay in leo's house for 2 weeks?

[04:31] <Alias_> no

[04:31] <autrijus> ok. that's just before YAPC::NA hackathon

[04:31] <jabbot> pugs - 1414 - turn off parser test for cpan

[04:31] <jabbot> pugs - 1413 - Changed Perldoc test stuff

[04:31] <jabbot> pugs - 1412 - forgot these Perldoc modules

[04:31] <autrijus> so it will be a month full of hackathons

[04:31] <Alias_> I had mentally written you off for conference season

[04:32] <Alias_> I forgot YAPC::NA is in .ca

[04:32] <autrijus> =)

[04:32] <Alias_> Look like I won't get to YAPC::NA... I'd hoped to do the pair of cons, but the odds are my business will be at a critical launch point somewhere around june

[04:33] <autrijus> k.

[04:33] <autrijus> good luck :)

[04:34] * Khisanth imagines neighbors complaining about the sound 13 hackers hacking :)

[04:34] <Alias_> It's going to be a hell of a year ... :/

[04:34] <Alias_> Khisanth: And the patrich in the pear tree...

[04:35] <autrijus> Khisanth: the place is in a far far isolated place :)

[04:36] <Khisanth> but it mentions a neighbor :P

[04:36] <autrijus> true :P

[04:38] * theorbtwo wonders.

[04:38] <theorbtwo> I was hoping to go to the hackfest, but I wasn't invisioning it being at somebody's house out in the sticks.

[04:38] <Khisanth> is there a way to make whatver it is that is building pugs run at a lower priority?

[04:38] <theorbtwo> The normal way -- man nice.

[04:39] <theorbtwo> Or renice.

[04:39] <Alias_> Do you have an address?

[04:39] * Khisanth goes grepping through Makefile.PL

[04:39] <Alias_> Just pull it up on NASA World Wind and see what it looks like

[04:39] <Alias_> http://ali.as/photos/OSCON

[04:39] <autrijus> nice make

[04:39] <Alias_> # Shows Alias Central during OSCON

[04:40] <Alias_> eep, bad url

[04:40] <autrijus> theorbtwo: I hear there's lots of outdoor activities possible

[04:40] <Alias_> make that http://ali.as/OSCON/

[04:40] <Khisanth> s/outdoor activities/distractions/ ;)

[04:40] <theorbtwo> I'm not much on outdoor activities, generally.

[04:41] <autrijus> theorbtwo: also it's 90min drive from central toronto

[04:41] <autrijus> so it's not that bad... I think

[04:42] <theorbtwo> Oh, the mail says 1.5.

[04:42] * Steve_p reads about the hackathon and sighs

[04:42] <theorbtwo> Er.  Same thing.

[04:42] <Steve_p> heh

[04:42] <autrijus> Steve_p: hm?

[04:42] * theorbtwo shakes his head, trying to get the idiocy out.

[04:42] <Steve_p> I'm probably not going to be able to go to Toronto :(

[04:43] <theorbtwo> I'm certianly going to YAPC::NA.

[04:44] <theorbtwo> I'm hoping to do the hackathon as well, but am uncertian.

[04:44] <autrijus> theorbtwo: you don't have to stay for 4 whole days...

[04:44] <autrijus> you can just drop by and say hi :)

[04:44] * theorbtwo grins.

[04:46] <Steve_p> Have people seen the warnings with ghc 3.4?

[04:46] <theorbtwo> 3.4?

[04:46] <theorbtwo> 6.4, you mean?

[04:46] <Steve_p> Duh?  Yes, 6.4 :)

[04:47] <Alias_> A quiack Haskell question

[04:47] <Alias_> quick

[04:48] <Alias_> Am I right in reading that one of the key features of Haskell is that is can implement math-like provably correct things?

[04:48] <autrijus> yes, fixing warnings.

[04:48] <autrijus> Alias_: yes.

[04:48] <autrijus> term is "proof-carrying code"

[04:48] <Alias_> So you don't actually have to write unit tests for certain functions, because you can prove it works right

[04:48] <autrijus> also it comes with QuickCheck that is a weaker form of provable code

[04:49] <autrijus> yes, that is the idea.

[04:49] <Alias_> Is that provability tracked in the language?

[04:49] <autrijus> or rather, you can prove that it satisfy a set of invariants.

[04:49] <Alias_> Internal meta-data or some such

[04:49] <autrijus> there is a Programmatica project that tracks such metadata

[04:49] <Alias_> invariant?

[04:49] * Alias_ lacks in terminology in this area

[04:49] <autrijus> "properties about the system"

[04:49] * mugwump just happens to be googling for that now

[04:50] <mugwump> Alias_: aka "Axiom"

[04:50] <Alias_> Axiom is another thing I know nothing about

[04:50] <autrijus> but normally you have to derive them using QuickCheck or other tools

[04:50] <Alias_> I tend to just discover concepts independantly most of the time

[04:50] <Alias_> Then find out later they have names

[04:50] * theorbtwo wonders if there's a -w option that makes sure that you've not written any pattern-matches that can fail.

[04:51] <autrijus> theorbtwo: -Wall detects that.

[04:51] <autrijus> there is a -W that checks for this

[04:51] <autrijus> forgot which

[04:51] <Alias_> autrijus: Oh, did you say that PPI::Tokenizer has an official name? I wanted to update the POD

[04:51] <autrijus> what official name?

[04:51] <Alias_> For the parser "type"

[04:51] <mugwump> An Axiom is like a statement of truth.  You define something as being so, and then everything else follows from it

[04:51] <autrijus> context?

[04:51] <Alias_> infinite something something

[04:51] <jabbot> pugs - 1416 - release files

[04:51] <jabbot> pugs - 1415 - Doc tweak for release

[04:51] <autrijus> backtracking parser with infinite lookaheads?

[04:52] <Alias_> right, that

[04:54] <mugwump> http://en.wikipedia.org/wiki/Axiom  # a nice write-up

[04:54] <autrijus> mugwump: invariants are something you prove about a system, I think

[04:54] <autrijus> like conservation of energy

[04:54] <autrijus> not sure whetthey are laws, not axioms

[04:55] <Alias_> At least Haskell finally makes some sense to me now

[04:55] <Alias_> "What you use when you want to be provably correct"

[04:55] <obra> "Hello Kitty has no mouth" being an example of a universal invariant

[04:56] <mugwump> well, once I work through http://xrl.us/tapl, no doubt we will be using the same set of terms

[04:56] <autrijus> mugwump: how far are you into it?

[04:56] <autrijus> I was just reading typed assembly in ATTaPL this morning

[04:56] <autrijus> makes lotsa sense

[04:57] <autrijus> with OO support and provably won't stuck

[04:57] <obra> wait. xrl.us/tapl is tapl?

[04:57] <mugwump> well, the other day I tried to dive right into chapter 18 in TaPL, which is a study on Featherweight Java

[04:57] <mugwump> It made quite a bit of sense, but I'm not sure how to apply it

[04:58] <mugwump> obra: I love the way metamark will let you name the links :)

[04:59] <autrijus> mugwump: you may want to start at beginning :)

[05:00] <mugwump> :)

[05:01] <jabbot> pugs - 1417 - * fix ghc 6.4 warnings.

[05:06] <Steve_p> hey, I was going to do that :)

[05:06] <autrijus> :D

[05:07] <autrijus> I'm still removing 6.2isms.

[05:09] * Steve_p looks into the trig functions

[05:11] <autrijus> haskell has this weird property of bits can't easily rot

[05:12] <autrijus> because they become type errors as soon as they rot

[05:26] <ingy> hola

[05:27] <theorbtwo> Morning, ingy.

[05:31] <Darren_Duncan> Evening, ingy

[05:31] <jabbot> pugs - 1418 - * deprecation warnings are gone

[05:32] <Darren_Duncan> eggcenent

[05:32] <Darren_Duncan> celent

[05:38] * theorbtwo sighs.

[05:38] <autrijus> mmm?

[05:39] <theorbtwo> You know, most things about the pugs/perl6 effort I like, but a couple of things really get under my skin from time to time.

[05:40] <theorbtwo> Trying to hide references is one of them.

[05:43] <autrijus> mrrmph

[05:43] <autrijus> elaborate?

[05:43] <autrijus> the current way pugs treat refs is probably all wrong

[05:43] <autrijus> but the language level ref-hiding is part of perl6

[05:43] <theorbtwo> Yeah.

[05:43] <theorbtwo> I don't like it.

[05:43] <autrijus> elaborate? :)

[05:43] <theorbtwo> $x=4; $y=\$x; $y=10;

[05:43] <theorbtwo> I expect after that $x is 4, $y is 10.

[05:44] <theorbtwo> If I wanted that to change $x, I would have used :=.

[05:44] <autrijus> sure. why would it be otherwise.

[05:44] <autrijus> ask pugs?

[05:44] <autrijus> $x is 4 and $y is 10.

[05:44] <ingy> =)

[05:45] <theorbtwo> People are suggesting otherwise in the "identity tests and comparing two references" thread.

[05:46] <autrijus> unless people is @larry

[05:46] <autrijus> I suggest to ignore.

[05:47] <obra> @larry...

[05:47] <Khisanth> if $x ends up as 10, that would be rather annoying and confusing

[05:47] * theorbtwo wonders who @larry[1...] is.

[05:48] <Khisanth> @larry[1..] is infinite larrys?

[05:48] <theorbtwo> Just the ones that actually exist, AFAIK.

[05:49] <theorbtwo> I could well be wrong, though.

[05:49] <Khisanth> hmm infinite number of larrys typing on infinite keyboards ... :)

[05:49] <Alias_> Khisanth: Which that might generate a hell of a lot of documentation, will we get much code?

[05:50] <theorbtwo> Anyway, the first Larry is Larry Wall... who are the rest of them?

[05:51] <Alias_> Larry W(All)

[05:51] <Khisanth> alternate dimension copies

[05:51] <autrijus> theorbtwo: http://dev.perl.org/perl6/people.html

[05:51] <obra> Larry tty0...Larry ttyN

[05:53] * Khisanth strangles GGV

[05:53] <theorbtwo> Ah, you mean $cabal.

[05:54] <Khisanth> $*CABAL? :P

[05:55] <obra> *** Error: Undefined variable $cabal at Var "$cabal"

[05:55] <rgs> that's normal.

[05:56] <theorbtwo> You didn't declare it.

[05:56] <obra> Right. There is no cabal.

[05:56] <theorbtwo> Hm, I'm not sure that "Undefined" is the word we should be using.

[05:56] <theorbtwo> Cognative dissonnance with undef.

[05:57] <theorbtwo> "Undeclared"?

[05:57] <rgs> Unexistent.

[05:57] <rgs> (for $cabal :)

[05:57] <theorbtwo> No, I mean the error message should be fixed.

[05:58] <autrijus> sure.

[05:58] <autrijus> fix it to say 

[05:58] <autrijus> Global symbol "$w" requires explicit package name

[05:58] <autrijus> or something like it?

[05:58] <theorbtwo> Nooo!

[05:58] <autrijus> ;)

[05:58] <obra> Sorry. Didn't mean to cause actual discussion ;)

[05:58] <autrijus> "Undeclared" is fine by me.

[05:58] <autrijus> please commit ahead.

[05:58] <rgs> obra :)

[05:59] <autrijus> aww

[05:59] <autrijus> I just discovered that

[05:59] <autrijus> perl -Mstrict -e'$a'

[05:59] <autrijus> is just fine

[06:00] <autrijus> perl -Mstrict -e'$x' # error

[06:00] <clkao> finally there's ghc 6.4 pkg

[06:00] * autrijus feels suddenly motivated to do this rewrite perl thing

[06:00] <Alias_> heh

[06:01] <theorbtwo> $a and $b are exempt; doing otherwise makes writing sort subs annoying.

[06:01] <theorbtwo> OK, not annoying as much as confusing.

[06:01] <autrijus> that's why we have $^a now.

[06:01] <theorbtwo> I know.

[06:01] <autrijus> and the "reverse sort" optimisation

[06:01] <autrijus> rgs++ # 5.9.2

[06:01] <theorbtwo> Wait, $^a is in 5.9?

[06:01] <jabbot> pugs - 1420 - * use qualified Data.Map

[06:01] <jabbot> pugs - 1419 - Deleting contrib

[06:02] <theorbtwo> I'm liking the idea of @foo = sort @foo opt.

[06:02] <autrijus> no, reverse sort is 5.9

[06:02] <autrijus> not $^a

[06:02] <theorbtwo> Ah, OK.

[06:02] <Khisanth> do people actually use reverse sort LIST?

[06:03] <autrijus> it was slow

[06:03] <autrijus> now it's fast

[06:03] <autrijus> so I imagine people will gradually start using it

[06:03] <Khisanth> it just like a strange thing to do

[06:03] <Khisanth> seems

[06:03] <autrijus> it feels more natural than 

[06:03] <autrijus> sort { $b cmp $a } LIST

[06:03] <autrijus> to me

[06:03] <theorbtwo> To me as well.

[06:03] <Alias_> Khisanth: Write a detect function, and ask File::Find::Rule::PPI

[06:04] <Khisanth> oh you mean that

[06:04] <autrijus> or just ask miyagawa's search

[06:04] <Alias_> that too

[06:05] <theorbtwo> (I do a @foo = sort {$b->depth <=> $a->depth} in categorize_tests, BTW.)

[06:05] <theorbtwo> ...which could possibly benifit from /both/ of those.

[06:06] <castaway_> more natural? eh? you lot strange

[06:07] <Khisanth> autrijus: I thought you meant reversing the result of sort in general, not just the default sort 

[06:07] <autrijus> ingy: Perl6::Pugs::MakeMaker? Pugs::MakeMaker?

[06:07] *** castaway_ is now known as castaway

[06:07] <autrijus> ah.

[06:07] <theorbtwo> OTOH, it could benifit more from somebody writing an easy way to say "give me the first element in the order specified by this code block".

[06:08] <autrijus> head . sortBy code

[06:08] <Alias_> theorbtwo: List::Util::first

[06:08] <theorbtwo> I could have sworn there was a way to do that in Scalar::List, but I didn't see one, and didn't feel like implementing it.

[06:08] <theorbtwo> No, List::Util::first is $foo = (grep)[0];

[06:08] * Alias_ blinks

[06:08] <Alias_> oh, right

[06:08] <autrijus> there's no such thing in List::Util.

[06:09] <theorbtwo> I know.

[06:09] <Alias_> Check List::MoreUtils

[06:09] <autrijus> you can write it using a fold.

[06:09] <autrijus> I mean, reduce

[06:09] <theorbtwo> I know.

[06:09] <Alias_> Wouldn't min { .. .} @list do it?

[06:09] <theorbtwo> OTOH, the list I'm doing it on in this case probably maxes out at 5 elements.

[06:09] <theorbtwo> I don't think min takes a codeblock.

[06:09] <Alias_> The min would be the first element of the sorted list

[06:10] <Alias_> Then you arn't using the right min

[06:10] <theorbtwo> Nope, it doesn't.

[06:10] <Alias_> :)

[06:10] <theorbtwo> List::Util is core on recent perls, and it already has plenty of deps.

[06:11] <theorbtwo> 14 use lines.

[06:11] <jabbot> pugs - 1421 - * Internals.TH is now gone

[06:12] <theorbtwo> Er, one of those is local to mine.

[06:28] <drbean> ?help

[06:41] <jabbot> pugs - 1422 - Moving disabled modules into `modules` d

[06:42] <castaway> disabled modules?

[06:43] * castaway hopes they have rights too

[06:44] <theorbtwo> Modules that shouldn't be compiled per default, because they're expected to not work at present, or because they're just there "for the time being".

[06:44] <autrijus> right.

[06:44] <castaway> aha ;)

[06:44] <autrijus> as soon as some module Works, we welcome it back to ext/.

[06:44] * castaway starts up the "rights for disabled modules" movement ;)

[06:47] <Corion> Hi ! After reading the logs, I assume that I'll have to upgrade to GHC 6.4 :)

[06:47] <autrijus> yes. :)

[06:47] <autrijus> sorry but it's better in the long run

[06:47] <Corion> autrijus: I'll manage :)

[06:48] <autrijus> it also means we get version objects for free

[06:48] <Corion> autrijus: Free stuff is always cool :)

[06:48] <Corion> Oooo - and the Makefile.PL even checks for GHC 6.4 - nice!

[06:49] <Corion> ... but that means no smoking until in 8 hours, as I'll be away for the day :) You'll manage :)

[06:49] <autrijus> I'll manage :)

[06:50] * castaway waves at Corion.

[06:50] <Corion> Good morning castaway :)

[06:50] * Corion still wonders at the test failures in kungfuftrs smoke tests ...

[06:50] <castaway> it's morning?

[06:50] <Corion> castaway: at least here, yes

[06:50] <castaway> so thats what that light is

[06:50] <Corion> ... and the sun is shining - splendid weather for riding my bike! :)

[06:51] <castaway> oh, the new bike

[06:51] <castaway> still shiny?

[06:51] <Corion> castaway: Yes, still shiny :) And it'll get cleaned tomorrow, so it'll shine some more ! :)

[06:51] <castaway> ;)

[06:51] <castaway> what colour(s) ?

[06:51] <jabbot> pugs - 1424 - * pod sections can now contain arbitary 

[06:51] <jabbot> pugs - 1423 - * it is now ok to warn depcrecations etc

[06:52] <Corion> autrijus: BTW, one of my (failing) tests is of interest to you - t/pugsrun/09-dash-uppercase-c.t - the failures there are Parrot compiler failures (or so I think)

[06:52] <Corion> castaway: Sky blue (if that's a colour), just like on the pictures I showed/posted :)

[06:52] <castaway> oooh

[06:52] <Corion> ... but I can upload a live picture :)

[06:52] <castaway> yay

[06:54] <Corion> Oh. Even reading the headlines of slashdot is now lame. They have really really lame april fools jokes

[06:54] <castaway> tell us something we didnt know :)

[06:54] <Alias_> indeed

[06:54] <castaway> (and Iavent even looked)

[06:54] <Alias_> Although I'm trying to work out of "no limit Gmail accounts" is a hoax or not

[06:56] <Corion> BTW, is there a way to make PuTTY automagically reconnect?

[06:56] <Alias_> ooo.. I wish

[06:57] <castaway> That would be nice

[06:57] <castaway> run it in a perl loop?

[06:57] <Corion> Alias_: :) Chat!Zilla does this for me, so I can hibernate the computer and it wakes up without any "problem". I'd like PuTTY to be the same.

[06:57] <Corion> castaway: Hmmm. Hmmmmmmm.

[06:57] <Alias_> The problem with PyTTY is that you'd still need to enter passwords again

[06:57] <Alias_> PuTTY

[06:57] <castaway> you can use the agent

[06:58] <Alias_> Chat is a bit of a different situation

[06:58] <Corion> http://datenzoo.de/pugs/Honda-CBF-600.jpg (200k)

[06:58] <Corion> for passwords I'd (then) use the agent, true

[06:58] <Corion> "pageant" or however it's called

[06:58] <castaway> http://www.chiark.greenend.org.uk/~sgtatham/putty/wishlist/reconnect-auto.html

[06:58] <Corion> castaway: :(

[06:59] <Alias_> "(Some people would like for us to remember the password so they don't have to type it again, but we won't be doing that.)"

[06:59] <Corion> It's a photo taken with my Nokia 7610, so the quality isn't top notch :)

[06:59] <Corion> Alias_: Yes - that's what PuTTY agent (pageant?) is for

[06:59] <castaway> ooooh, shiny

[06:59] <theorbtwo> Looks pretty, Corion.  I didn't know that you ride motorbikes.

[06:59] <Corion> Alias_: You passphrase protect all your logins with it, and it manages them

[07:00] <castaway> thats a phone pic? not bad!

[07:00] <Corion> theorbtwo: I've been doing so a long time, and it's mentioned on my homenode :) But last year, I didn't ride much, because my old bike was too old (slow, broken)

[07:00] <Corion> castaway: Yes, not bad for a phone pic :)

[07:01] <theorbtwo> Oh.  Apparently, you showed us your bike while we were in town.

[07:01] <castaway> sold the old one on ebay for lotsacash?

[07:01] <theorbtwo> But I forgot.

[07:01] <Alias_> ok, definately start investing in oil companies

[07:01] <Corion> Alias_: See http://the.earth.li/~sgtatham/putty/0.57/htmldoc/Chapter9.html#C9 for passwordless putty

[07:01] * castaway wanna see Corion in leathers ,)

[07:01] <jabbot> pugs - 1425 - * nomenclature: "Pod" rules are now "Doc

[07:01] <Corion> castaway: Not yet :( Photos to be taken of it and then it's to be sold

[07:01] <Alias_> Corian: While I want it, I don't want it enough to reduce security level

[07:02] <Corion> castaway: :)) I'm told I look good in leathers

[07:02] <Schwern> VICTUALS++

[07:02] <Corion> ... and some evenings, I just sit in the mirror, oiling me up in my leathers

[07:02] <castaway> *g*

[07:02] <Schwern> Though I would have thought Ingy's would be "Sausage, eggs, potatoes and bourbon"

[07:02] <Corion> s!in!in front of! :)

[07:02] <Schwern> Corion:  I like the first version better.

[07:03] <castaway> Oh, thats a file ??

[07:03] <Schwern> http://svn.openfoundry.org/pugs/VICTUALS

[07:03] <Corion> Alias_: Aah, the age old conflict of security vs. convenience :)

[07:03] <Alias_> but of course

[07:04] <Corion> Schwern: Well, that's because you have no mirror in your room. So I need to watch other people through the mirror!

[07:04] <castaway> ah, cute

[07:04] <Alias_> I keep thinking that every stable country in the world should be hanging on to their safe oil as long as possible, to let the prices creep up

[07:05] <castaway> safe oil?

[07:05] <theorbtwo> safe oil?  This is the stuff you oil safes with?

[07:05] <castaway> oh, saved

[07:06] <Alias_> "safe" as in stuff that isn't subject to touchy offshore treaties where some other country might pinch it

[07:06] <theorbtwo> Oh!

[07:06] <Alias_> on-shore oil where the entire field is inside your protected zone

[07:06] <Alias_> or something of that nature

[07:06] <theorbtwo> Ah, yeah.

[07:07] <Alias_> It's getting to the point where the .gov.au has decided that they are going to have to drill the Great Barrier Reef for oil

[07:07] <castaway> lucky for them as has it

[07:07] <castaway> ick

[07:08] <Alias_> I guess this does at least mean we can cap global warming once the oil runs out

[07:08] <Khisanth> Alias_: it should start growing more soybeans instead :)

[07:08] <Alias_> And it's probably a good time to invest in solar tower companies

[07:08] <Alias_> and uranium miners

[07:08] <Alias_> and rail companies

[07:08] <castaway> rail ?

[07:09] <Alias_> Trucks need oil, trains can use electricity

[07:09] <castaway> not all places ,)

[07:09] <Alias_> At $80 a barrel, there's a whole range of non-carbon electricity sources that become profitable

[07:10] <Alias_> Solar, wind and solar-tower are all sweet at $80

[07:11] <theorbtwo> Or carbon but not petroleum-based.  (Nor coal.)

[07:12] <Alias_> Well, non-cached carbon

[07:12] <theorbtwo> Non-cached?

[07:12] <castaway> you missed hyrdo, or is that expensive/

[07:12] <castaway> ?

[07:12] <Alias_> Hydro is profitable already, but has limited supply

[07:12] <Alias_> There arn't enough places to dam

[07:13] <Alias_> It's fairly expensive in real-estate terms

[07:13] <theorbtwo> There are plenty of places to dam, but most of them are too small to bother with.

[07:13] <Alias_> theorbtwo: The idea that all these "non-renewable" things are using up "cached" energy below the earth (or wherever)

[07:13] <theorbtwo> Oh, yeah.

[07:13] <theorbtwo> Makes sense.

[07:13] <castaway> well wind-wotsit space is limited too

[07:13] <Alias_> yeah

[07:14] <Alias_> Solar tower is interesting

[07:14] <Alias_> Australia could generate bucketloads of it, same with most other desert-like places

[07:14] <castaway> should slap it on all rooves

[07:14] <castaway> (rooves? eek.. roofs .. ?)

[07:14] <Alias_> Slap a 1km concrete tower on every roof?

[07:14] <castaway> no, planels

[07:14] <Alias_> oh...

[07:14] <Alias_> Towers look like a better option

[07:15] <theorbtwo> Hmm?

[07:15] <castaway> whats better? why not both, more isnt bad, no?

[07:15] <theorbtwo> Getting it up above the cloud layer, you mean?

[07:15] <Alias_> 600 megawatt power plant, built from a 1km concrete tube

[07:15] <castaway> sneaky

[07:15] <Alias_> http://www.enviromission.com.au/index1.htm

[07:15] <Alias_> They are building the first one in country .au

[07:16] <Alias_> Biggest building in the world, once it's up

[07:16] <Alias_> And conveniently, it's also a food source

[07:17] <castaway> howso?

[07:17] <Alias_> It's a giant greenhouse at the base

[07:17] <theorbtwo> Hm, interesting looking idea.

[07:17] <castaway> cool

[07:17] <Alias_> So for the outer third or so of the covered area, you can grow fruit and stuff

[07:18] <theorbtwo> It's very interesting to me how almost all different forms of electric generation are just different ways of creating pressure in a fluid to move turbines.

[07:18] <theorbtwo> IIRC, normal solar is pretty much the only one that isn't.

[07:19] <Alias_> only because we can build massive kinetic->electric converters

[07:19] <Alias_> And it's hard to build any other type of converter

[07:19] <Alias_> I imagine it would be hard to scale solar panels to hundreds of megawatts

[07:21] <jabbot> pugs - 1426 - Recommend Perl6::Bible installation

[07:22] <mugwump> Darren_Duncan: are you planning to convert all the Makefile.PLs in modules/ ?

[07:24] <Corion> Aaaah - I'm stupid - I just had a revelation why my tests fail on freebsd. "print" is a builtin for some shells, I guess.

[07:25] <Corion> But I don't have time now :(

[07:25] <Corion> I think using -e "print" should fix it (over using the bareword print on the command  line"

[07:26] <Corion> anyway - have a nice day

[07:28] <castaway> have fun Corion!

[07:35] <ingy> what is $^O on windows?

[07:35] <autrijus> MSWin32 or cygwin or mingw

[07:35] <autrijus> or msdos for weird people

[07:35] <ingy> tanks

[07:36] <autrijus> machine guns

[07:37] <ingy> autrijus: what should `p6bible -v` currently print

[07:38] <castaway> whats p6bible?

[07:38] <ingy> Perl6::Bible on cpan

[07:39] <ingy> perldocish support for perl6

[07:39] <autrijus> ingy: list the version from each pods

[07:39] <autrijus> or svn rev from the svn.perl.org pull

[07:40] <autrijus> or the generated date

[07:40] <autrijus> or all above

[07:40] <ingy> hmm sounds like work :P

[07:40] <autrijus> pick whatever seems easy and nice for you :)

[07:40] <Darren_Duncan> ping mugwump

[07:41] <autrijus> I think the gen date for PErl6::Bible dist itself

[07:41] <autrijus> makes sense already.

[07:41] <Darren_Duncan> I was away from comp for an hour

[07:42] <Darren_Duncan> I tossed the idea of converting all the Makefile.PL in /modules but then said I wouldn't after all

[07:42] <ingy> autrijus: ok

[07:42] <Darren_Duncan> one result of that discussion is that we don't actually want to bring Makemaker to perl 6, but do something better instead

[07:42] <Darren_Duncan> afterwards, makefiles can target that

[07:43] <Darren_Duncan> invoke that

[07:43] <Darren_Duncan> also, numerous makefiles were non-trivial in content, so I thought it would be better for those who ported the modules they are associated with to port them

[07:43] <Darren_Duncan> so I only ported the ones for my own modules

[07:44] <Darren_Duncan> but even those need changing once we have a working replacement for Makemaker to invoke

[07:45] <Darren_Duncan> right at this moment, I'm writing the new SYNOPSIS doc for SRT

[07:45] <ingy> we can refactor when we have better tools. for now Pugs::MakeMaker is fine

[07:46] <Darren_Duncan> Pugs::MakeMaker is not written in Perl 6, is it?

[07:46] <ingy> not currently

[07:47] <autrijus> we'll get there when we get there :)

[07:47] <Darren_Duncan> then a Perl 6 module config file can't invoke it, can it

[07:47] <Darren_Duncan> ?

[07:47] <theorbtwo> It could eval_perl5('...'), but most builds can't do that.

[07:48] <Darren_Duncan> by 'most builds', do you mean that ability is platform specific right now?

[07:49] <Darren_Duncan> even then, I use 'VERSION_FROM' in my makefiles, and PREREQ_PM ...

[07:49] <Darren_Duncan> for both of those, the Makemaker will have to extract version numbers from the Perl 6 modules to associate them

[07:50] <Darren_Duncan> I think that, in the short term, a solution would be to have a Perl 6 MakeMaker that is mostly a shell around the Perl 5 one; 

[07:50] <autrijus> version_from needs to be fixed to track p6 module lines

[07:50] <autrijus> if it had not already do so.

[07:51] <autrijus> which I think ingy has already done the parsing part for SHA1

[07:51] <autrijus> (I think)

[07:51] <Darren_Duncan> the Perl 6 version would load/examine the Makefile.PLs and the modules themselves, extracting necessary info ...

[07:51] <Darren_Duncan> then invoke the Perl 5 module to actually create the 'Makefile'

[07:52] <Darren_Duncan> then the only 5 to 6 bridge is in the core helper module, and nothing in /modules has to know about perl 5

[07:52] <autrijus> I think it makes sense even tho that means we'll have to system() perl5

[07:52] <autrijus> would you make it so?

[07:53] <Darren_Duncan> I can consider attempting to do that tomorrow, but no promises yet

[07:53] <autrijus> sure =)

[07:53] <autrijus> Darren_Duncan++

[07:54] <Darren_Duncan> theoretically the task is simple ...

[07:54] <autrijus> theory and practice is the same thing in theory :)

[07:54] <autrijus> (but not in practice)

[07:54] <castaway> *g*

[07:54] <Darren_Duncan> but I haven't actually hacked MakeMaker before so I'll have to research to know what I'm doing

[07:55] <ingy> Darren_Duncan: if you write me an email of what to do I can do it for you

[07:55] <Darren_Duncan> I'll have to work through it, then I could write you tomorrow

[07:55] <ingy> ok

[07:56] <Darren_Duncan> fyi, I should be able to write the necessary perl 6 based on the synopsis, but I'm not sure if Pugs will have implemented the necessary parts ... even if I don't make it object oriented

[07:57] <Darren_Duncan> eg, does Pugs currently know about the middle part of a module name?

[07:57] <Darren_Duncan> the 'number'

[07:59] <Khisanth> write it anyway and wait for the features to be implemented? :)

[08:01] <Darren_Duncan> If I said 'require Foo' and then later said 'my $version = Foo.meta.version()', will I then hold the module's declared version?

[08:01] <Darren_Duncan> Khisanth, I hear you

[08:01] <Darren_Duncan> I think I will write a brief note to p6c now to announce my intentions

[08:16] <Darren_Duncan> check your p6c mail now, the posting is in

[09:15] <Juerd> Is Thomas Sandlass right that values have identity?

[10:30] <wolverian> oh, we require GHC 6.4 now? ouch.

[10:54] <shapr> Juerd: what did thomas sandlass say?

[11:11] <Juerd> shapr: That =:= tests value identity equality

[11:12] <Juerd> Which IMHO (a) makes no sense in Perl and (b) would mean values have identity, which in turn implies that references point to values, not variables, which in turn means that after $foo = new value, \$foo has changed...

[11:12] <Juerd> This all makes sense in a Python world

[11:12] <Juerd> Not in ours

[11:15] <theorbtwo> Hmm.

[11:16] <theorbtwo> ghc-6.4: panic! (the `impossible' happened, GHC version 6.4): Maybe.fromJust: Nothing

[11:16] * theorbtwo tries again from "make clean"

[11:18] <theorbtwo> Alright, compiles OK that way.

[13:02] <drbean> I don't have readline support although I have Term::ReadLine::Gnu

[13:12] <drbean> I installed it after making pugs however.

[13:12] <drbean> Do I have to make pugs clean?

[13:35] <autrijus> so I committed some work from the past hour.

[13:35] <autrijus> * Threads. Sockets. Namespaces. Perl6::MakeMaker. pugscc now runs everywhere. template haskell is now optional.

[13:35] <autrijus> also see examples/httpd.p6

[13:35] <autrijus> dinner, bbiab &

[13:36] * nothingmuch 's jaw clunks on the floor

[13:37] <nothingmuch> and to think, all i've done this weekend is read some tldp howtos and try to get lvm and raid to get along

[13:40] <integral> ghc 6.4 is now required?

[13:40] <yinjieh> 6.4 !!

[13:40] <nothingmuch> yes, iirc

[13:41] <yinjieh> mm

[13:41] <jabbot> pugs - 1427 - * Threads. Sockets. Namespaces. Perl6::M

[13:46] <wolverian> Juerd: I don't really understand why p6 keeps around the reference-based idiom. I like how ruby does this. :)

[13:48] <Alias_> wolverian: Because then Perl probably wouldn't be Perl?

[13:48] <wolverian> Alias_: I'm not sure.

[13:49] <wolverian> Alias_: do you think so?

[13:49] <Alias_> Arbitrary referencing is a heavily used Perl feature

[13:58] <wolverian> Alias_: oh, I don't mean that. it just feels weird that 'my $foo = @bar;' would put a reference into $foo, not the object itself.

[13:59] <Alias_> how could the object itself go in?

[14:05] <wolverian> Alias_: I don't know. :) the way ruby does it! (although it copies.)

[14:05] <wolverian> oh well, I'm pretty confused about this. 

[14:05] <Alias_> heh

[14:05] <Alias_> So are most of us still

[14:09] <shapr> yow!

[14:17] <shapr> Juerd: (lambda x:x + 1) != (lambda x:x + 1) because == compares memory addresses.

[14:17] <shapr> In Python, that is.

[14:17] <shapr> Once you can create function values, value equality gets harder.

[14:19] <shapr> Juerd: In fact, that problem gets so hard it has its own name - http://en.wikipedia.org/wiki/Entscheidungsproblem

[14:22] <masak> i created a game the other day which explores this problem

[14:22] <shapr> oh tell me more!

[14:23] <masak> it's called "horseplay"

[14:23] <shapr> How does it work?

[14:23] <masak> players take turn creating five entities

[14:23] <masak> syntax, semantics, walls, programs and inputs

[14:23] <masak> syntax+semantic=language and program+input=horse

[14:24] <masak> the game is won by the one who creates an unbroken wall (for a sufficiently long period of time) for a rich language

[14:24] <shapr> How do you create those entities?

[14:24] <masak> by defining them

[14:25] <shapr> Do you have logs of example games?

[14:25] <masak> never played

[14:25] <masak> not even examples

[14:25] <masak> the rules are still a bit shaky

[14:25] <shapr> Well, this is a great time to try it out.

[14:25] <masak> i agree

[14:26] <masak> if you give me your email we might discuss it further

[14:26] <shapr> I am [email@hidden.address]
[14:26] <masak> thx

[14:26] <masak> the rules are in swedish right now but i can translate them

[14:26] <shapr> And I have TMDA spam protect, so emails bounce the first time unless I whitelist you address ahead of time.

[14:27] <masak> ok, i am [email@hidden.address]
[14:27] <shapr> Det √§r okej. Jag kan forst√•r lite svenska.

[14:27] <masak> sed√§r

[14:27] <masak> then i'll send the rules as they are

[14:27] <shapr> Bor du i sverige?

[14:27] <masak> uppsala

[14:27] <shapr> Ah, inte s√• n√§ra. Jag bor i Boden.

[14:28] <shapr> Och jag kommer fr√•n USA, s√• min svenska √§r n√§stan skit.

[14:28] <shapr> Jag borjade att l√§ra mig svenska tv√• √•r innan.

[14:28] <masak> so far it's perfect, at least the written aspect of it

[14:29] <shapr> I can never get that part right about "I began in two years" that means "It was two years ago and it continues"

[14:29] <shapr> I know one of those prepositions means "it's over now" and one means "it continues still"

[14:29] <masak> verb tenses are screwed up in swedish

[14:30] <masak> but one only realises it when one learns a language where they are sensible

[14:30] <shapr> Most languages are screwed up. But Swedish has some nice features.

[14:30] <masak> such as?

[14:31] <shapr> I really like "sin". If I say "Shae drove his car." it could be masak's care that I drove. but with "Shae k√∂r sin bil.", we *know* it's Shae's car.

[14:31] <shapr> I also like the way 'g√•ng' is separate from 'tid'

[14:31] <shapr> 'one time' can mean both of those in English.

[14:31] <metaperl> shapr, do you mind telling us how you migrated from Birmingham, Alabama, USA to Sweden?

[14:31] <metaperl> and why your named changed?

[14:31] <shapr> I met this woman on ICQ. (50,000 words omitted) and now I live in Sweden.

[14:32] <masak> shapr: 'g√•ng' is separate from 'tid' in most languages i know

[14:32] <shapr> metaperl: But a few years before that, I got bored with my name.

[14:32] <masak> and 'sin' has a counterpart in french

[14:32] <shapr> So I changed it.

[14:34] <masak> what i would like to see is 'g√•nger' (occasion) separated from 'g√•nger' (mathematical operation). but i suspect that's just me.

[14:35] <shapr> metaperl: Seriously though, I wanted a name that really describes me.

[14:37] <shapr> I've noticed that the larger long-term effect a decision will have, the longer I should think about it. So I thought about it for a few years. I really wanted to change my name when I was 21, but I waited till I was 27 to actually do it.

[14:38] <shapr> masak: what's the mathematical operation? Finns inte i min lexicon.

[14:38] <masak> 2 * 4 = 8

[14:38] <shapr> Oh. Easy enough.

[14:38] <metaperl> what's the story with this: http://www.scannedinavian.org/~shae/yogi.jpg

[14:38] <shapr> That's Yoggi Toulouse, famous French unicyclist.

[14:39] <shapr> I think he's convinced he can fly a unicycle anywhere.

[14:39] <metaperl> oh my god

[14:39] <metaperl> is he balanced like that or about to jump off?

[14:39] <shapr> He didn't land that one, but he did land it the next time.

[14:39] <shapr> He's in the air.

[14:40] <shapr> You can see that guy's foot between his wheel and whatever that is...

[14:41] <shapr> My unicycle skillz are significantly smaller - http://www.scannedinavian.com/images/uni-hop.jpg

[14:41] <masak> shapr: i've noticed that the larger impact a decision will have, the *easier* it is to make. though i have never understood why it feels like that.

[14:42] <shapr> masak: I think that's because for those sorts of decisions, it's easy to know if you made the right choice.

[14:43] <shapr> I've never wanted to unchange my name, and have always remained thrilled to have the name I chose.

[14:44] <shapr> metaperl: If you're interested in unicycling, there's a whole culture of short unicycle films, of which I have a few - http://thunderbird.scannedinavian.com/~shae/unifilms/

[14:45] <masak> shapr: it seems that it is possible to know that choices were the right ones even when one doesn't know the rationale behind them.

[14:46] <shapr> metaperl: This is my favorite! - http://thunderbird.scannedinavian.com/~shae/unifilms/11_Au_TAQUET_10Mo.wmv

[14:46] <shapr> masak: yeah, I agree.

[14:46] <shapr> Intuitive thinking can be right without needing rationale.

[14:50] <Alias_> Unicycling has a culture?

[14:50] <shapr> Sure, lotsa.

[14:51] <shapr> Mountain unicycling is my favorite. But the other largest subsections are road, trials, and technical with like trials and mountain together.

[14:54] <shapr> If you know anything about mountain bike tires, I have a 24" 35.1mm wide Alex DX32 rim with a 3" Duro Wildlife tire on my unicycle. But I'm upgrading to a 65mm wide Large Marge rim next month.

[14:54] <shapr> Anyway, back to the topic at hand =) What's good for lambdafolk to do for the puppy?

[14:54] <Alias_> pet it

[14:55] * shapr pets Pugs.

[14:57] <shapr> so, theorbtwo said "set HARNESS_PERL and PERl6LIB, then run perl utils/yaml_harness.pl, then perl utils/testgraph.pl > testgraph.html" What values should I set for HARNESS_PERL and PERL6LIB ?

[14:59] <shapr> masak: I use a lot of intuitive thinking, obviously without knowing how it works. I wonder if there's any research into intuition. Maybe it's subconscious thought?

[14:59] <shapr> masak: Har du skickat reglarna till mig?

[14:59] <Alias_> There research into the brains "computation-restricted mode"

[14:59] <Alias_> There is ...

[15:00] <Alias_> There's a funny mode the brain goes into when it realises it has to make a decision without sufficient time to work it out properly

[15:00] <Alias_> "Knee-jerk reaction" type stuff. It uses very limited indicators to come to a conclusion that is correct 95% of the time or so

[15:01] <shapr> Any keywords I can google?

[15:01] <Alias_> not off the top of my head

[15:01] <masak> shapr: i just clicked "send"

[15:02] <masak> shapr: what happens once we understand intuition? will it still be intuition?

[15:02] <shapr> I think so. I'd guess it'd be like programming languages without reflection.

[15:02] <masak> lol

[15:03] <shapr> I think the process of programming works like that for me sometimes. Total zen, no real 'consciousness' of what I'm doing.

[15:03] <masak> that's flow

[15:03] <Alias_> oh, there's an article on that in New Scientist this week

[15:03] <shapr> So maybe intuition is like flow?

[15:03] <masak> maybe

[15:03] <masak> but flow has to do with actions

[15:03] <shapr> Can you have flow with reflection?

[15:03] <masak> intuition has to do with congnition

[15:04] <shapr> Is cognition an action?

[15:04] <masak> i think flow and reflection are sort of opposites

[15:04] <masak> but i don't know

[15:04] <shapr> I'd argue that programming flow involves cognition.

[15:04] <masak> yes, a very basic form of it

[15:05] <masak> i had to comb through the rules to update them in light of the latest developments in my head

[15:05] * shapr cogitates on that.

[15:05] <masak> parts of them may not make sense

[15:06] <shapr> Om kan jag inte forst√•r, ska du veta.

[15:06] <Alias_> ... or was it scientific american..

[15:06] <masak> shapr: any feedback is appreciated

[15:06] <Alias_> They classified the 4 main properties needed for creativeness

[15:06] <Alias_> or "flow"

[15:06] <shapr> masak: btw, do I reverse the subject and verb like that if I have a preposition at the beginning of a sentence?

[15:07] <shapr> I like pair programming, group flow is different from single flow. More powerful in some ways, less powerful in others.

[15:07] <Alias_> I like the idea of someone correcting the spelling mistakes in my comments :)

[15:08] <masak> shapr: no. "om jag inte kan f√∂rst√•". negations come into play somehow, i cannot formalise it properly.

[15:08] <shapr> Ok, I'll check out the grammar book I have around here somewhere.

[15:09] <stevan> threads??? sockets??

[15:09] <stevan> wow

[15:09] <masak> shapr: the phrase would be "om jag kan f√∂rst√•" if you were talking about the opposite situation.

[15:12] <masak> or just "kan jag f√∂rst√•"/"kan jag inte f√∂rst√•" as shorter variants, but still conditionals

[15:15] <stevan> nothingmuch: ping

[15:15] <nothingmuch> pong

[15:15] <stevan> hey nothingmuch 

[15:15] * nothingmuch is fighiting the dichotomy that is linux raid/lvm

[15:15] <nothingmuch> can

[15:15] <nothingmuch> beh

[15:15] <nothingmuch> can't resize a raid1 device on two LVs

[15:15] <nothingmuch> =(

[15:15] <stevan> what do you know about these threads, sockets and namespace things?

[15:16] <stevan> nothingmuch: does not sound like fun :)

[15:16] <nothingmuch> that autrijus said 'oh btw, i did all that'

[15:16] <nothingmuch> and then went to dinner

[15:16] <stevan> :)

[15:16] <stevan> ok

[15:16] <stevan> I guess I will wait for the journal

[15:16] <nothingmuch> examples/httpd.p6

[15:16] <nothingmuch> he mentioned that

[15:16] <stevan> has this stuff  been speced out by perl6l? or is he just mapping the haskell stuff

[15:17] <stevan> yeah I looked at that very cool

[15:17] <nothingmuch> no clue

[15:17] <nothingmuch> hah

[15:18] <nothingmuch> perlbot nopaste

[15:18] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[15:18] <stevan> ok :)

[15:18] <pasteling> "nothingmuch" at 212.143.91.217 pasted "lambda silliness" (5 lines, 221B) at http://sial.org/pbot/8878

[15:18] <nothingmuch> crap, copy paste madness

[15:18] <stevan> :)

[15:19] <nothingmuch> prepend: "A novice was trying to fix a broken Lisp machine by turning the power off and on..."

[15:19] <stevan> thats my usual Windows fix

[15:21] <stevan> oh well

[15:21] <stevan> autrijus: when you journal tonight, please give details on the namespace stuff, I am very interested in knowing more :)

[15:21] <nothingmuch> reboot reboot reboot

[15:22] <stevan> have fun with your raid nothingmuch :)

[15:22] <nothingmuch> =(

[15:22] <stevan> I am off to do errands in the dirt world

[15:22] <nothingmuch> i hope that LVM can do mirroring without sw raid

[15:22] <nothingmuch> i don't even care about performance

[15:23] <nothingmuch> gah!  umount -f /mnt/test/

[15:23] <nothingmuch> umount2: Device or resource busy

[15:23] <nothingmuch> dd if=/dev/zero of=/dev/md0 seemed to help it out

[15:24] <nothingmuch> no

[15:24] <nothingmuch> *whine*

[15:29] <kolibrie> autrijus: looks like the darcs repository hasn't sync'ed up for a day or two

[15:30] <obra> http://127.0.0.1

[15:30] <autrijus> it's a 404

[15:30] <obra> mischan

[15:30] <autrijus> kolibrie: resyncing

[15:30] <kolibrie> autrijus: thanks

[15:33] <kolibrie> off topic - can any debian mutt users recommend packages I need to see non-English fonts?

[15:34] <kolibrie> I have locale set to UTF-8, but no font package yet has seemed to do anything

[15:36] <putter> i was thinking of starting the day by smashing together the [SEA]\d\d.html docs, interleaved, common index, colored by age, mixin mechanism for definitive emails, so I could easily see the current state of things.  thoughts?

[15:37] <autrijus> putter: talk to ingy, the maintainer of Perl6::Bible

[15:37] <autrijus> putter: you may wish to polish Perl6::Bible into that

[15:37] <autrijus> that'd be a great serice

[15:37] <autrijus> service

[15:39] <putter> tnx

[15:42] <obra> autrijus: http://permalink.gmane.org/gmane.comp.lang.lightweight/3240

[15:42] <autrijus> Perl6::Bible is on cpan too

[15:42] <autrijus> a new release just hit pause

[15:42] <autrijus> obra: yeah, #haskell loved it

[15:44] <Alias_> What's in it?

[15:44] <Alias_> ah, all the docs

[15:48] <autrijus> kolibrie: are we up to date?

[15:48] <autrijus> darcs I mean

[15:48] <autrijus> hi tmoertel!

[15:49] <kolibrie> autrijus: pulling now

[15:51] <kolibrie> autrijus: darcs looks much better now, thanks

[15:53] <autrijus> :)

[15:54] <kolibrie> I have a test for "for @list { $_++ }" and "for @list -> $num is rw { $num++ }"

[15:54] <kolibrie> should I put those in t/statements/for.t?

[15:55] <kolibrie> or are the "rw" things collected somewhere better?

[15:59] <kolibrie> put them in t/statements/for.t -r 1428

[16:01] <autrijus> ok.

[16:01] <jabbot> pugs - 1430 - * thread is now toplevel value.

[16:01] <jabbot> pugs - 1429 - * "{ block }" in qq and rx was eating tr

[16:01] <jabbot> pugs - 1428 - added tests for rw for statements - for 

[16:02] <ingy> hola

[16:02] <ingy> we are moving pugs modules to freepan and we need to know who is the primary maintainer of each module

[16:02] <autrijus> a forking web server and a web service client!

[16:03] <Alias_> maintainer in what context...

[16:03] <Alias_> I own Config::Tiny and Algorithm::Dependency, but I sure as hell don't maintain the P6 versions

[16:03] <obra> will this mean that "primary" authors will have to grant other authors access?

[16:03] <Alias_> And they probably don't track changes to the original

[16:04] <autrijus> ingy: I say we list the first committer of a given module as owner

[16:04] <ingy> fine

[16:04] <autrijus> and list all committers on them as committers

[16:04] <Alias_> This is going to really screw up copyright assignations :)

[16:04] <Alias_> Mass re-"owner"ship

[16:06] <mugwump> ownership means less in the face of per-author namespaces, so there's no need to be particular about it...

[16:06] <mugwump> "first come first served" no longer :)

[16:06] <Alias_> BTW, how does that translate to "official" module names?

[16:07] <Alias_> I'm presuming we don't have to learn and remember the author of every single module...

[16:07] <mugwump> via QA team(s)

[16:07] <Alias_> So CPAN will be told that there's an official MUGWUMP::File::Spec -> File::Spec alias? :)

[16:07] <mugwump> ie, QA teams will be responsible for grouping sets of modules together that they think are a good set.  To kill off the flamewars etc

[16:08] <autrijus> Alias_: right, actually PAUSE maintains that already

[16:08] <autrijus> as the index

[16:08] <Alias_> right

[16:08] <mugwump> Why is File::Spec always the example here?  ;)

[16:08] <Alias_> Because it's so darned useful

[16:08] <autrijus> sure.

[16:08] <mugwump> use File::Spec-(Any)-freepan:mugwump

[16:08] <Alias_> So if I fork CPAN::Mini (like I did for CPAN::Processor) in P6 I juse release my version of CPAN::Mini, and my code uses the explicitly named one?

[16:09] <obra> freepan:?

[16:09] * obra suspects those should end up as uris in the end

[16:09] <mugwump> sorry, I meant jerkit:

[16:09] <autrijus> eh what.

[16:09] <autrijus> Alias_: yes.

[16:09] <autrijus> Alias_: that is exactly the idea.

[16:09] <autrijus> basically you can freely fork things locally

[16:10] <Alias_> And then when QA decides to handover, they just do a namespace toggle?

[16:10] <autrijus> see S11

[16:10] <autrijus> that may be the case. there may be multiple QA teams.

[16:10] <autrijus> like, your company may set up its own index

[16:11] <Alias_> So I take it that the "request to be on the module list" will actually mean something now?

[16:11] <jabbot> pugs - 1431 - * httpd client and server examples

[16:12] <autrijus> Alias_: exactly!

[16:12] <Alias_> It's been quite nice to have things fairly free-form in regards to "adding" modules

[16:12] <autrijus> yup

[16:12] <autrijus> there can be a first-come-first-serve index

[16:12] <Alias_> But those initial names people pick, ew

[16:12] <autrijus> maintained by cpan or somebody else

[16:12] <autrijus> but I fully expect people move away from it gradually

[16:12] * Alias_ caught China::IDCard::Validate or something the other day

[16:12] <autrijus> esp. now we can install multiple modules with the same name.

[16:12] <autrijus> or even alias them locally

[16:13] * Alias_ still worries

[16:13] <autrijus> so you can install 10 File::Spec locally

[16:13] <Alias_> But then I'm a worrier

[16:13] <autrijus> and your local site policy determines which one to use.

[16:13] <autrijus> sure =)

[16:13] <Alias_> As long as it works for the brain dead, I don't care

[16:13] <autrijus> :D

[16:14] <Alias_> With this damned perl jobs boom, it's hard enough as it is

[16:14] * Alias_ beats the Lowest Possible Barrier to Entry drum

[16:15] <Alias_> autrijus: Have you seen the recent jobs.perl.org stats?

[16:15] <autrijus> no. eh?

[16:15] <Alias_> It's a BOOM I tell ya

[16:16] <Alias_> see magnet #perl topic

[16:16] <obra> s/boom/bubble/

[16:16] <tmoertel> autrijus: hi! (belatedly returning your hi from earlier)

[16:19] * autrijus wonders if [email@hidden.address] is a freepan id.

[16:19] <autrijus> then, [email@hidden.address] is another

[16:19] * autrijus pushes for email-based ids

[16:19] <obra> that sounds like a much better plan.

[16:19] <autrijus> but if you want to register [email@hidden.address]
[16:20] <autrijus> because we recognize cpan.org

[16:20] <autrijus> we still require them to enter their pause auth

[16:20] <autrijus> just to reduce spamming and save them an email reply

[16:20] <autrijus> (they can do email reply instead.)

[16:20] <autrijus> ingy: sounds like a plan?

[16:20] <obra> why special case it?

[16:20] <obra> just do email auth for everybody. nice and easy

[16:20] <autrijus> well, no, @openfoundry.org can do the same thing

[16:20] <autrijus> it's single sign on

[16:21] <Alias_> One of these days I should publish my single sign on system

[16:21] <autrijus>  there's people who devnulled their @cpan.org

[16:21] <Alias_> It was really sweet

[16:21] <autrijus> so, don't want them to lose, that's all

[16:22] <autrijus> so current committers can auth with their @openfoundry.org id

[16:22] <autrijus> s/committers/pugs committers/

[16:39] <nothingmuch> yay!

[16:39] <nothingmuch> lvextend /dev/vg/home_0

[16:39] <nothingmuch> lvextend /dev/vg/home_1

[16:39] <nothingmuch> then mdadm --stop /dev/md0

[16:39] <nothingmuch> and mdadm --grow /dev/mdadm -z blah blah blah

[16:39] <nothingmuch> reboot

[16:40] <nothingmuch> and resizefs

[16:40] <pjcj> autrijus: How does the Eval.hs refactoring stand - is that still the plan?

[16:40] <nothingmuch> yayayayayayaaay!

[16:59] <autrijus> pjcj: you mean moving to gen IMC?

[16:59] <autrijus> yes that is still the plan.

[17:01] <jabbot> pugs - 1433 - * be properly HTTPish

[17:01] <jabbot> pugs - 1432 - Oops! Inheritance is spelled "is", not "

[17:02] <autrijus> so, examples/network/ is there

[17:02] <autrijus> anyone want to work on socket tests and/or a LWP clone?

[17:11] <jabbot> pugs - 1434 - * probe readline for real

[17:25] <Corion> re

[17:26] <autrijus> yo Corion

[17:26] <Corion> hi autrijus 

[17:26] <autrijus> Corion: seen http://svn.openfoundry.org/pugs/examples/network/ ?

[17:26] <jabbot> autrijus: I havn't seen http://svn.openfoundry.org/pugs/examples/network/ , autrijus

[17:26] * Corion installs GHC 6.4

[17:26] <Corion> autrijus: nope, just returned

[17:26] <Corion> jabbot: :)))

[17:26] <jabbot> Corion: That is interesting. Please continue.

[17:27] <autrijus> Corion: cool. I have this feeling that you'll like them

[17:27] <Corion> autrijus: That sure looks _very_ interesting indeed!

[17:27] <autrijus> and they even work!

[17:27] * Corion installs GHC 6.4 at double speed

[17:27] <Corion> autrijus: Let's see if they work on Win32 :)

[17:27] <autrijus> good. I need someone to test that :)

[17:28] <Corion> Ooooo - Haskell has "async()" - so it's likely they work on Win32. The joy of coroutines :)

[17:28] <Corion> ... Oh - no, async() is a thread. Also good.

[17:28] <autrijus> using real OS threads.

[17:28] <autrijus> we can use a Posix fork as well

[17:28] <autrijus> but I think lightweight threads is the way to go

[17:29] <autrijus> for the moment

[17:29] <Corion> Grr. Why is the haskell.org GHC a .msi file ? That means I can't install it at work :( But at least at home ...

[17:30] <Corion> autrijus: True. But in any way, that means that LWP has to come now! ;-)

[17:31] <autrijus> yes!

[17:32] * Corion looks forward to real, easy, convenient http/1.1 support and multiple connections :)

[17:33] <xerox> Is there any text about perl6?

[17:33] <metaperl> xerox, you mean a printed text?

[17:33] <metaperl> Perl6Now.com

[17:33] <metaperl> by scrottie is one

[17:34] <xerox> I want something to try in pugs :)

[17:34] <Corion> xerox: Port a module :)

[17:34] <Corion> xerox: Or write tests

[17:34] <Corion> xerox: Both are good exercises to learn Perl6 :)

[17:34] <metaperl> xerox, read through the examples and test suite

[17:34] <xerox> I mean, I know a bit of perl5, but I just know "say" in perl6 :)

[17:34] <metaperl> I learned about slurpy lists yesterday

[17:34] <metaperl> learn about slurpy lists

[17:34] <xerox> slurpy lists?

[17:35] <metaperl> right here: http://dev.perl.org/perl6/synopsis/S06.html

[17:35] <metaperl> also see examples/fp.p6 in the pugs distro

[17:36] <Corion> Ah - GHC isn't officially called Glorious Glasgow Haskell Compiler :)

[17:38] <Corion> ... is anybody working on an LWP::Simple port ? I think LWP::Simple is the best start, LWP can be fudged behind LWP::Simple later on :)

[17:39] <autrijus> why is it not officially called?

[17:39] <autrijus> $ ghc --version

[17:39] <autrijus> The Glorious Glasgow Haskell Compilation System, version 6.4

[17:39] <Corion> autrijus: The installer didn't call it that, so I presumed :)

[17:39] <autrijus> Corion: no, please start it :)

[17:39] <autrijus> Corion++ # in advance

[17:39] <Corion> autrijus: I will :)

[17:39] <Corion> autrijus: Aaah, nooes! You

[17:40] <Corion> autrijus: Aaah, nooes! You're piling responsibility on me :)

[17:40] * Corion does "make test" and hopes his tests still succeed on Win32

[17:41] <jabbot> pugs - 1435 - * do not build threaded if there is no t

[17:42] <Corion> . o O (... and here I was, thinking I'd port my broken "make" module to Perl6, to fix it in the process... And then sockets come along ...)

[17:42] <autrijus> "make" is also good :)

[17:42] <autrijus> ruby has Rake.

[17:42] <autrijus> I'm jealous.

[17:42] <Corion> autrijus: But sockets are so much more fun !

[17:43] <autrijus> that, too

[17:43] <autrijus> I'm fine with either :)

[17:43] <Corion> If anybody wants to adopt and fix a broken module, http://corion.net/perl-dev/Make-PurePerl.html ( "Make::Naive" ) needs some tender loving!

[17:43] <Corion> autrijus: Maybe I do LWP::Simple today and Make::Naive tomorrow :)

[17:44] <autrijus> yay

[17:45] *** Corion changes topic to: Under no circumstances collapse your lambacamel duality | pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m | smoke: http://xrl.us/fmw2 | win2k:r1434(228/3851) Linux:r1302(193/3383) MacOSX:r1342(189/3478)

[17:49] <mugwump> PLEASE NOTE ::Simple, ::Lite, etc are all considered GAY in Perl 6

[17:49] <autrijus> please note that gay means happiness and fun

[17:49] <mugwump> PLEASE NOTE: I have beer

[17:49] <autrijus> ah. that explains

[18:03] <autrijus> hmm 40 commits today

[18:07] <Corion> Is there anything other than .readline() to read from a handle? I could set (the Perl6 equivalent of) $/ and then use readline, but I'd prefer to read a fixed length... Hmmm - do I really?

[18:09] <Corion> Grrr. Google gives me no love. What is the equivalent to $/ in Perl6 ? Header parsing is nicely done by =$hdl , if I can set $/ correctly ...

[18:10] <mugwump> see docs/S28draft.pod

[18:11] <jabbot> pugs - 1439 - 

[18:11] <jabbot> pugs - 1438 - Add README for those looking

[18:11] <jabbot> pugs - 1437 - Getting a little way through converting 

[18:11] <jabbot> pugs - 1436 - Add working drafts S28, S29

[18:12] * Corion does svn up

[18:12] <mugwump> Actually all it says is that they're methods on filehandles now

[18:13] <autrijus> hi Corion.

[18:13] <autrijus> what do you want? :)

[18:13] <autrijus> input record reparator props?

[18:13] <autrijus> separator

[18:13] <Corion> autrijus: I'm just reading S28 - I want to set $/ to "\012\015" to read in HTTP headers in a convenient way

[18:14] <Corion> ... not yet looked into S28 closely

[18:14] <autrijus> what we we, say, use slurp()?

[18:15] <autrijus> see http://search.cpan.org/dist/Perl6-Slurp/Slurp.pm

[18:15] <Corion> Ooooo ! Thanks!

[18:16] * Corion wonders how he'll port the nice syntax of Perl6::Slurp

[18:16] <Corion> (or rather, how to make the syntax nice)

[18:17] <pjcj> I wonder how Perl6 will do $/ = \10

[18:18] <autrijus> implementing slurp($hdl) now

[18:18] <autrijus> done

[18:18] <mugwump> FILEHANDLE.eol("\010") or somesuch

[18:18] <autrijus> mugwump: no, that's size

[18:20] <mugwump> right - \10, not "\10"

[18:20] <Corion> mugwump: Thanks for thinking ahead! Content-Size: handling is simplified through that! :)

[18:21] <autrijus> Corion: it's in; see the new http-client.p6

[18:21] <autrijus> I imagine it makes your life simpler

[18:21] <Corion> autrijus: :)

[18:21] <jabbot> pugs - 1440 - * slurp($hdl)

[18:22] <Corion> Is there $hdl.irs ? I'd like to say $hdl.irs = rx:perl5/\015?\012\015?\012/;  # :-))

[18:22] <autrijus> argh rx irs

[18:23] <autrijus> p5 doesn't do that 

[18:23] <Corion> autrijus: I thought Perl6 was finally making Perl better than awk ? :))))

[18:23] <Corion> autrijus: Otherwise I have to fake it like LWP::Simple fakes it as well ;)

[18:23] <autrijus> yup

[18:23] <Corion> ... or make the \015 required instead of optional

[18:27] <Corion> Is ~= the string concatenation/assignment operator now ? $buffer ~= $hdl.read() ?

[18:28] <autrijus> aye

[18:28] <Corion> Yay. I know Perl6.

[18:31] <autrijus> I'm doing split($rx, $string) for you

[18:33] <autrijus> done.

[18:33] <Corion> autrijus: Hugs

[18:33] <Corion> You're just like a mother to me

[18:33] <autrijus> :D

[18:34] <autrijus> I think it works reasonably well

[18:34] <autrijus> clever code and tests welcome

[18:35] <Corion> autrijus: I guess that my code can serve as a smoke test :)

[18:37] <autrijus> cool :)

[18:40] <Corion> How do I export stuff from my module?

[18:40] <Corion> Gah. Found it - "is export"

[18:40] <autrijus> "is export"

[18:41] <jabbot> pugs - 1442 - * fix show() class for Symbol

[18:41] <jabbot> pugs - 1441 - * split(rx:perl5/.../, $string)

[19:02] <Corion> Ah hah. With GHC 6.4, theorbtwos testgraph matcher won't throw the errors as with GHC 6.4, the output matches his regex :)

[19:03] <autrijus> that is a good thing?

[19:03] <autrijus> :)

[19:04] <Corion> autrijus: Well, I won't get lotsalotsa error messages on the console when I update my test matrix :)

[19:04] <autrijus> journal up.

[19:04] <autrijus> partially summarized only

[19:04] <autrijus> too tired

[19:04] <autrijus> must sleep :)

[19:04] <Corion> Who is working on Test.pm ? Because I'd like use_ok() in it :)

[19:04] <autrijus> just add it.

[19:04] <Corion> autrijus: Sleep well - dream of lambdas :)

[19:04] <autrijus> &

[19:04] <autrijus> nite!

[19:05] <Corion> autrijus: Yeah, but I don't want to get sidetracked :)

[19:05] <Corion> good night, autrijus 

[19:13] <putter> what docs are people using to write p6?  Snn.pods.  And the two drafts.  Are E&A still helpful?  Perl6:: pods.  What else?

[19:14] <kcwu> Perl6::Bible

[19:15] <putter> basically i'm taking a few hours to pick up and massage docs.  eg, all S\d\d.pods into a single synopses.pod, etc.

[19:17] <putter> anyone have a cache of "key emails not yet integrated into Snn's"?

[19:18] <Corion> Wooo. I reimplemented examples/network/http-client.p6 :)

[19:18] <putter> kcwu: do you find your using A\d\d and E\d\d, or just or S\d\d? tnx

[19:27] <Darren_Duncan> good morning campers

[19:28] <Darren_Duncan> my first task this morning is to finish my SYNOPSIS and commit that ...

[19:28] <Darren_Duncan> then I'll start on the makemaker thing

[19:31] <pjcj> I've not been fully following this - are you planning to port MakeMaker to Perl6?

[19:32] <Darren_Duncan> see my p6c announcement yesterday

[19:32] * Odin-LAP advocates turning makemaker into something that doesn't need make, and can serve as a generic building system. ;)

[19:32] <Darren_Duncan> no, not port ...

[19:33] <Darren_Duncan> my short term plan is to have a placeholder that the Makefile.PL in each /modules distro can be written in Perl 6 and invoke

[19:33] <Darren_Duncan> it's to get rid of the last remaining perl 5 in /modules

[19:34] <Darren_Duncan> the placeholder does a bit to scan perl 6 modules but otherwise just turns around and invokes the perl 5 version to do the real work

[19:35] <Darren_Duncan> I do not support keeping makemaker around either ... this is just a quick stopgap measure to work until the replacement is made

[19:35] <pjcj> Darren_Duncan: I read that.  I'm just concerned that the concensus in the Perl5 world seems to be MakeMaker is dead, long live Module::Build.  But it sounds more as though this is to be a stopgap?

[19:35] <pjcj> aha

[19:36] <Darren_Duncan> I agree, makemaker is dead

[19:37] <Darren_Duncan> but it hasn't left the building

[19:41] <pjcj> For me, it sits on a list that includes CGI, File::Spec, File::Find, Date::Manip ...

[19:41] <pjcj> The functionality is required, but I'd prefer to lose the API.

[19:42] <Darren_Duncan> fyi, I wasn't planning to name the replacement shell 'makemaker'

[19:42] <Corion> Odin-LAP: So you want to adopt my module? Great!

[19:42] <Odin-LAP> Corion: :p

[19:42] <Darren_Duncan> it was just a perl 6 thingy that does the right thing to install a module and check its dependencies first

[19:43] <Corion> IMO, neither MakeMaker nor Module::Build are the path to the future, but a shiny new implementation.

[19:43] <Odin-LAP> Shiny new something. :p

[19:43] <Darren_Duncan> on that end, I thought I would make my shell a different name than either of those

[19:53] <Corion> Heh. Filehandles don't close/flush on time. Is that a known bug ? (I think so, but ...)

[20:21] <Corion> Are there any objections to introducing the -M switch, so -MLWP::Simple works ? :)

[20:31] <jabbot> pugs - 1443 - LWP::Simple started; use_ok added to Tes

[20:44] <nothingmuch> the government should hand out medals for weekend hacking sessions

[20:45] <nothingmuch> especially those of the system administration kind

[20:45] * nothingmuch hates computers so much

[20:45] <Darren_Duncan> thats un-fortunate

[20:45] <shapr> I just hate software.

[20:45] <nothingmuch> i hate software too, but i think a bit less

[20:45] <nothingmuch> i know how to fix software much more easily

[20:45] <nothingmuch> too bad they are the best way to get most of what I want done

[20:46] <Darren_Duncan> well ,you know the saying ... things would be a lot easier if one didn't have to be concerned with users

[20:47] <shapr> I've gone on a crusade against stupid software choices the last few years. Hasn't made me popular with some of the people I know.

[20:47] <nothingmuch> anybody know which way mirrorring is done when creating a raid1 on linux? (sw)

[20:48] <shapr> "We'll pay you lots of money to write this medical database in visual basic and J2EE." 'No.' "But it's really lots of money! You'll be making 35,000 a year!" 'No. Why don't you go ${ANATOMICALLY_IMPOSSIBLE_ACT}?'

[20:49] <nothingmuch> 35k? hmmm

[20:49] * nothingmuch is making in the order of... *compute*

[20:49] <Corion> shapr: You should have written a compiler that outputs J2EE and VB code from Haskell :)

[20:49] <nothingmuch> 15k

[20:50] <nothingmuch> which is little, due to my lack of experience/education/references/age

[20:50] <nothingmuch> so 35k is not that much, really

[20:50] <shapr> Corion: I did something like that for my first J2EE project, Jython servlets. They had a hissy fit and told me I couldn't use Jython anymore.

[20:50] <Corion> shapr: :))))

[20:50] <lightstep> Corion, would you do it, and be responsible for the dying patients?

[20:50] <lightstep> (vb crashes explorer, etc.)

[20:51] <nothingmuch> ?

[20:51] <nothingmuch> ack

[20:51] <Corion> lightstep: The code quality would be better with code generated via Haskell :)

[20:51] <shapr> It was a student medical database for 200,000 college students in Finland.

[20:51] <nothingmuch> lightstep: do you have a day job yet? or are you still busy with the army stuff?

[20:51] <shapr> No death involved, happily.

[20:51] <jabbot> pugs - 1445 - Added tests for anonymous classes.

[20:51] <jabbot> pugs - 1444 - added -MModule support

[20:52] <lightstep> i don't have a day job

[20:52] <shapr> I really wish clients would accept solutions in any language, as long as there are several different support providers for that language.

[20:53] <shapr> For example, I wish I could tell my clients that I'm part of a consortium of twenty companies where we all twenty would commit to pick up and maintain the software of the other companies in case of plane crash or other force majeure.

[20:54] <shapr> And then I could write GPL/BSD/etc licensed software and my clients wouldn't have to worry about me screwing them over with obfuscation.

[20:54] <nothingmuch> shapr: what's stopping you? the consortium? or the clients?

[20:54] <nothingmuch> the hypothetical state of thereof, i meant

[20:55] <shapr> It's clients that are stopping me. They're already scared to death that they depend on Zope/Plone and their programmer guys only know Java.

[20:55] <nothingmuch> woo, 3.2G copied, 17 to go!

[20:55] * nothingmuch is really saddenned that his two disks must be on the same channel due to physical constraints

[20:56] <nothingmuch> 2mb per second

[20:56] <nothingmuch> =(

[20:56] * nothingmuch will steal a longer cable from work tomorrow

[20:56] <shapr> Ya know, that would be interesting. Why isn't there that sort of consortium for lots of languages?

[20:56] <nothingmuch> shapr: there's such a consortium for some languages?

[20:57] <shapr> I don't think so. But, why not?

[20:57] <nothingmuch> i don't know

[20:57] <nothingmuch> i bet most companies would do that

[20:57] <nothingmuch> it doesn't take clients away

[20:57] <nothingmuch> it provides more value for your money

[20:57] <shapr> There are at least ten people on #haskell whose code I trust enough that I know I could support it.

[20:57] <nothingmuch> it gives a better reputation

[20:58] <shapr> I'd want to have read-only access to all the source repositories for the other companies in my consortium. That wouldn't be a problem for DFSG compatible licenses.

[20:59] <shapr> Yeah, I bet most OSS companies would do that.

[20:59] <Khisanth> <shapr> It's clients that are stopping me. They're already scared to death that they depend on Zope/Plone and their programmer guys only know Java. <- time to start posting wanted ads? :)

[21:00] <shapr> They just requested one or two new plone sites, one of which will be large. So I'm sure I'll have work for the next six or eight months at least. That's rock solid security in the land of self-employment.

[21:00] <Darren_Duncan> if programmers only know one language and aren't willing to learn more, they probably aren't good at programming

[21:00] <Darren_Duncan> a good programmer can handle multiple languges easily

[21:01] <shapr> I agree with you.

[21:01] <Darren_Duncan> the real skills are language independent

[21:02] <shapr> I also wish I didn't work by the hour. I think that limits the quality of my work in some ways.

[21:02] <Corion> shapr: You're doing much with Plone I gather - is it really useful? Or does it require much work on your part?

[21:02] <Khisanth> well most things carry over from one language to another

[21:02] <shapr> Corion: Depends on what you need to do.

[21:02] <Corion> ... as soon as you know more than one (kind of) language

[21:02] <Khisanth> but for some reason people think that just because it's a different language all the things that worked in the other language no longer applied

[21:02] <Corion> shapr: Mostly, I need/want to slap a nice web gui onto a database

[21:03] <Corion> Khisanth: Well, if you only know OO/imperative, then functional is quite the bitch :)

[21:03] <Corion> ... same for Prolog :)

[21:03] <shapr> For some value of easy, that's easy to do in Plone.

[21:03] <shapr> But if you don't already use Zope, or you don't know Python at all, you should try something else.

[21:03] <Khisanth> Corion: I only know OO/imperative and Haskell is turning out to be quite fun :)

[21:04] <shapr> Nowadays, Plone is like emacs, it can do nearly anything, if you know enough about it.

[21:04] <Corion> shapr: I use Python at work, and don't know Zope (beyond some toying around)

[21:04] <Corion> shapr: Yeah - I saw Zope already has users/permissions/stuff, something I'd have to do myself if using Maypole (a/the Perl MVC-web-thingy)

[21:06] <shapr> There are two layers on top of Zope, Content Management Framework and Plone. CMF is sort of like J2EE, it's a toolkit for workflow, and lots more. Plone is actual realization of the CMF toolkit into an out-of-the-box-usable kind of system.

[21:07] <Corion> shapr: Ah, yes. I think I realize the analogy - for Perl, there also are two incarnations, Maypole (diy web framework) and Catalyst (prebuilt application)

[21:07] <shapr> So, if you can immediately use Plone for what you need right out of the box, then it's great. If you can't use it, and you don't have motivation to learn to modify a large complicated system, you want to look elsewhere.

[21:08] <xerox> sub foo {...}     # Yes, those three dots are part of the actual syntax

[21:08] <xerox> gee.

[21:08] <shapr> Yeah, Catalyst sounds like Plone.

[21:09] <shapr> Plone really can do amazing stuff, and there are lots of add-ons that do more, but it's not easy to learn to modify and extend yourself.

[21:09] <shapr> On the other hand, if you do end up using it for whatever reason, feel free to ask me about it.

[21:10] <xerox> Some perl6 syntax looks neat, too: circumfix for example.

[21:11] <shapr> I get really frustrated doing web development in object oriented languages. All of the OOP webdev I do seems to suffer from huge amounts of state. It's hard to unit test that.

[21:11] <shapr> But I don't know if a purely functional solution would be any better, or if there are powerful solutions that don't have the problems that J2EE and Zope have in common.

[21:11] <Corion> shapr: Yep - unit testing for web apps sucks - which is why I am in the WWW::Mechanize cabal, which eases end-to-end testing :)

[21:11] <shapr> Maybe someone here knows?

[21:11] <Corion> shapr: I dream of continuation-based webservers/webapps

[21:12] <shapr> Yeah, me too.

[21:12] <Corion> shapr: But they have different problems

[21:12] <shapr> Arrows in Haskell can almost do continuation-based webapps.

[21:12] <shapr> What sort of problems?

[21:12] <xerox> UCW!

[21:13] <shapr> Do you need to upgrade references in the continuation? Do you have to decide when to expire the continuations? What does the basic flow look like?

[21:13] <Corion> shapr: Load balancing

[21:13] <Corion> shapr: (or the lack thereof)

[21:13] <xerox> http://common-lisp.net/project/ucw/

[21:13] <Corion> xerox: I know :)

[21:13] <xerox> Oh.

[21:13] <shapr> That doesn't sound hard at first thought, what's difficult about load balancing with continuations?

[21:13] <xerox> So why you dream it? :)

[21:14] <Corion> shapr: Expiry isn't that important, but you can't move a continuation between servers (unless you can serialize it, of course)

[21:14] <shapr> That makes sense.

[21:14] <Corion> xerox: Because I'm no Lisp hacker. I prefer to share my ivory towers with other people :)

[21:14] <Corion> shapr: Not that that would really matter for the applications I write :)

[21:15] <shapr> You could round-robin off the clients so that no one server ends up with a high load. Distributed services that each server calls would help that.

[21:16] <shapr> I wonder if Erlang handles continuations and migration of such.

[21:17] <Corion> shapr: Yep

[21:17] <Corion> shapr: I looked at "E" for a short time, and it promises (ha ha) lots of interesting things, but it has much more focus on authentication/secure distributed computing instead of getting things done :)

[21:17] <Corion> shapr: (among those, migration of processes)

[21:18] <shapr> Yeah, E is nifty.

[21:18] <shapr> Though capability security is its main feature of interest.

[21:18] <Corion> Grrr. want() is not yet implemented ...

[21:18] * Corion curses

[21:18] <shapr> What does want() do?

[21:19] * shapr looks at the tests

[21:19] <Corion> shapr: Tell me what the caller wanted (boolean/scalar/list/hash/whatever)

[21:19] <Corion> shapr: So I can return different things based on that (FiniteMap, list, one large string)

[21:21] <xerox> Where are the builtins defined?

[21:21] <shapr> Prim.hs

[21:21] <Corion> xerox: t/builtins :)

[21:21] <Corion> err - yes, depends on how you look at it :)

[21:22] <xerox> Aren't those the tests?

[21:24] <Corion> xerox: Yes - the tests define what gets implemented :)

[21:26] <xerox> Corion: ok, so where are the actual implementation?

[21:26] <Corion> xerox: Prim.hs

[21:28] <xerox> Thanks.

[21:28] <shapr> I like the pictures on the pugs.kwiki

[21:29] <Corion> shapr: autrijus has a thing for pictures :)

[21:33] <shapr> Can you explain more about want? I don't quite understand the tests. What does the code { x ?? y :: z } obj_ok_in_scalar do?

[21:34] <lightstep> ?? ::  is the ternary operator (if/then/else)

[21:34] <Corion> shapr: Perl has "context", that is, a subroutine knows what its caller wants

[21:35] <Corion> shapr: want.count == 3 is equivalent to the caller saying take list 3

[21:35] <Corion> err - saying: "take list 3"

[21:35] <shapr> take list 3?

[21:35] <Corion> shapr: Except that there are more contexts than just the number of items wanted. Like "boolean context", "scalar context"

[21:35] <Corion> shapr: Isn't "take" a Haskell function?

[21:36] <shapr> Yes, but I'm missing some of other parts, I think.

[21:36] <shapr> Does that imply that the caller has a list somewhere for the callee to get hold of?

[21:36] <Corion> shapr: Basically, if you say (in Perl) : %hash = function_call(), want.Hash is true within function_call()

[21:37] <Corion> shapr: Yes - I guess it's an implicit parameter (or a global variable, whichever way you look at it)

[21:37] <shapr> oh, you're asking for the type of the variable to which your caller wants to assign your result.

[21:37] <Corion> shapr: Yes

[21:37] <Corion> shapr: You explain it so much clearer than I can ;)

[21:37] <shapr> I dunno, you understand it =)

[21:37] <shapr> I don't yet...

[21:37] <Corion> shapr: Also, if there is no assignment, but a test, this works too, (boolean context)

[21:38] <Corion> shapr: It's what makes the following things magically work in Perl: @array > 3

[21:38] <shapr> So, count asks for the length of the sequence to which your caller is trying to assign your return value?

[21:38] <pjcj> there seem to be a few contexts missing in the tests

[21:38] <Corion> ... because an array/list, in scalar context, evaluates to the number of its elements

[21:38] <Corion> pjcj: I don't know which contexts will actually exist.

[21:39] <Corion> pjcj: It may well be that I made some contexts up that will never exist. Perl5 only has two contexts, scalar and list

[21:39] <pjcj> Nor do I off the top of my head, but I'm sure I read something somewhere

[21:39] <Corion> (as far as I remember)

[21:39] <pjcj> Perl5 also has void, which is missing here

[21:39] <shapr> That's wild, it's like having multiple sublanguages and you can switch them whenever you want.

[21:39] <Corion> pjcj: Feel free to add the other contexts to the tests :)

[21:39] <Corion> pjcj: Oh, yes, void context!

[21:39] * Corion chants "map in void context"

[21:40] <Corion> shapr: ? Perl is a conglomerate of various sublanguages (within sublanguages), yes :)

[21:41] <pjcj> Corion: Right now I'm fighting with WWW::Mechanize and cookies for something that should be deployed on Monday :-(

[21:41] <Corion> pjcj: Ooops

[21:41] <pjcj> but I'll try to remember if no one else does it

[21:41] <Corion> pjcj: In principle, WWW::Mechanize should handle cookie stuff transparently. That is, unless somebody uses JS to set/get/modify cookies.

[21:41] <pjcj> yeah - I want to set one myself in the test

[21:41] <Corion> pjcj: If in doubt, look at HTTP::Recorder (or the FireFox Live HTTP Headers extension) to record what actually gets sent

[21:41] <jabbot> pugs - 1446 - Added head() implementation, waiting for

[21:42] <shapr> So want.count asks for the length of the sequence, right?

[21:42] <Corion> pjcj: Ah... Hmmm - for adding one yourself, I think you have to get a grip on the cookie jar in the $mech object

[21:42] <pjcj> Corion: Right.  The first one works fine - the second doesn't ...

[21:42] <Corion> shapr: Yes - if you do my ($foo,$bar,$baz) = get_foo();   then want.count would be 3

[21:43] <Corion> pjcj: Hmmm. That's weird.

[21:43] <shapr> Can want tell anything more than count and type?

[21:44] <Corion> shapr: What else would you want? I think not, but I'm no P6 designer :)

[21:44] <Khisanth> Corion: wouldn't a void context be a junction of all the other ones?

[21:44] <Corion> Khisanth: No, void must be detectable on its own, because you can save doing some work (like actually saving the result)

[21:45] <stevan> Corion: I wrote tests for use_ok for you :) I will commit in a moment

[21:45] <Corion> stevan++ # writing tests for my crap

[21:45] <Corion> s!crap!code! :))

[21:45] <stevan> Corion: I will document it too :)

[21:45] <Khisanth> Corion: I mean something like if none(list of contexts) {...}

[21:46] <Corion> Khisanth: Ah, yes. I forget that Junction is the name for all of the junctions, any/all/none... (???/conjunction/disjunction)

[21:46] <Corion> Khisanth: But that's an implementation detail :)

[21:47] <stevan> does anyone think a todo_use_ok function makes sense?

[21:47] <Khisanth> any/all/none/one I think unless that got removed

[21:48] <Corion> stevan: You mean because my "use_ok" is currently only "require_ok" ? I thought of a later, silent upgrade...

[21:49] <stevan> Corion: no, so you can write tests which dont work, but should eventually :)

[21:49] <Corion> stevan: Oooooooo ! :)

[21:49] <stevan> use_ok faking it with require is fine

[21:49] <stevan> because we dont have use now

[21:49] <Corion> stevan: Yes, that would be nice - or maybe simply listing the modules in PREREQ_PM (except that should have a new name) in Makefile.PL

[21:49] <stevan> (and I always hated require_ok because it didnt handle everything right all the time)

[21:49] <stevan> Corion: done :)

[21:50] <Corion> stevan: I haven't implemented parameters for use_ok yet ... Also my "-M" switch doesn't handle them either.

[21:50] <Corion> Ooo - I have to update the command line help! There are some undocumented switches :)

[21:51] <pjcj> I think http://dev.perl.org/perl6/rfc/21.html was pretty much endorsed as the definition of the want function in A6.

[21:51] <Corion> Ooops. And my "-M" switch won't work if you try pugs -MModule file. Oh well.

[21:53] <stevan> Corion: I think if you want to pass switches to use_ok you can just add them to the string it evals

[21:53] <Corion> stevan: True :))

[21:53] <stevan> at least for now until we have a read use() function

[21:53] <shapr> pjcj: thanks

[22:01] <jabbot> pugs - 1447 - Make command line help more like perl5 h

[22:04] <Corion> Oh - btw, the LWP::Simple tests I added are "live" tests that currently hit my webserver (i.e. the outside internet). I hope that's OK ...

[22:05] <Khisanth> pugs has sockets now?

[22:05] <Corion> Khisanth: Yes!!!!

[22:05] <Corion> Khisanth: Check out examples/network/* and modules/LWP-Simple :)

[22:05] * Khisanth hope it doesn't resemble Socket.pm :)

[22:06] <Corion> Khisanth: No, currently, sockets look just like filehandles. But filehandles look like objects, instead of being special, now :)

[22:07] <stevan> oh, it looks like a by-product of split(//, '...') is that I can write like() for Test.pm

[22:07] <Khisanth> bareword as filehandles is also gone right?

[22:07] <Corion> stevan: Yay! :)

[22:07] <Corion> Khisanth: Barewords are gone, basically :)

[22:07] <Khisanth> subs still need predeclaring to be used without ()?

[22:08] * Corion was never a big fan of barewords. But poetry will get harder now.

[22:08] <Corion> Khisanth: I imagine so, yes.

[22:10] <Corion> Ooops. stevan - I think one of my tests needs your todo_use_ok() :) I need File::Spec in it, but it isn't loaded :)

[22:10] <Corion> ... at least when running it through the yaml test harness :)

[22:11] <stevan> Corion: I will commit in a moment,... just writing tests for like() and todo_like()

[22:11] <Corion> stevan++

[22:11] <stevan> Corion++ # for braving LWP :)

[22:12] <Corion> stevan: Only LWP::Simple currently, and only a flakey version :) Only HTTP is supported, and it loads everything into memory. And mirror() isn't there yet.

[22:12] <Corion> Hmmm. I should fake mirror() by making it call getstore() :))

[22:12] <Corion> ... at least until I get head() to work properly in hash context :)

[22:14] <Khisanth> so no LWP::UserAgent?

[22:14] <Khisanth> hmm actually that would require all the HTTP::* stuff

[22:15] <Corion> Khisanth: Not yet.

[22:15] <Corion> Khisanth: I plan on slowly expanding LWP::Simple, because Perl6 allows far more callback based stuff, instead of blindly porting LWP

[22:15] <Corion> Khisanth: But first, I want to learn by taking baby steps with LWP::Simple and seeing what works and what doesn't

[22:16] <Khisanth> LWP::Simple seems like it was never meant for more :P

[22:16] <Juerd> #perl6++  # no mention of /pope/

[22:16] * shapr agrees

[22:16] <Corion> Juerd: We talked about Zope earlier. Does that count?

[22:16] <stevan> Corion: its best to take a simple approach

[22:17] <Corion> Khisanth: And if we got LWP::Simple, we can punt on ftp/wget/etc. for CPAN.pm later :)

[22:17] <Corion> stevan: Yep, that's my plan too :))

[22:17] <Juerd> Corion: haha

[22:18] <stevan> The File::Spec port only supports things up to a point

[22:18] <stevan> and it fakes cwd really badly

[22:19] <Corion> stevan: I gotta look at that ...

[22:19] <stevan> Corion: it's ugly :)

[22:19] <stevan> few things I have learned though

[22:20] <stevan> 1) arguments are still immutable in most cases

[22:20] <stevan> I tend to hack around that by copying the arg into a lexical

[22:20] <stevan> 2) function return values are still broken for another other than strings and basic arrays

[22:21] <stevan> hashes return as the first pair only in some cases and die in others

[22:21] <shapr> Is there another builtin on which I could model want? Any suggestions?

[22:21] <stevan> Its not unlike coding perl in the early 90s :)

[22:21] <Corion> stevan: Heh - that's a perlish way to fake cwd :) But Haskell should have getcwd. But I don't know how to make an "inline" Haskell extension into a good namespace. But maybe we should make cwd a builtin :)

[22:21] <Corion> shapr: Ugh. Hmmm - not that I know directly...

[22:22] <Corion> stevan: Yes - the spirit of the frontier... :) But this time, we know what's bad and what has stood through the time (and still is bad :) )

[22:23] <Corion> Hmmm. Haskell has getWorkingDirectory(), which would map nicely onto cwd().

[22:23] <stevan> Corion: I agree

[22:23] <stevan> Corion: those little IO functions are easy to hack too

[22:23] <Corion> And I think we've done good things already - cleaned up CGI.pm, abolished the File::Spec syntax, made open() return an object :)

[22:24] * Corion looks at Prim.hs to implement __cwd() :)

[22:25] <stevan> Corion: I am actually working on a CGI Hangman game as well :)

[22:26] <stevan> actually we didnt abolish the File::Spec syntax yet :) I figure that I have extracted all the cross platform knowledge out of it though, so it will be easier to do that later on

[22:28] <stevan> Corion: I am commiting right now

[22:28] <stevan> done, r1448

[22:28] <stevan> ok time for dinner, enjoy :)

[22:29] <xerox> Bonne appetit

[22:29] <Khisanth> Corion: so perl6 will have a cwd builtin?

[22:30] <Corion> Khisanth: No. I'm just hacking up a __cwd builtin, which will then be used by File::Spec

[22:30] <stevan> Corion++

[22:30] <Khisanth> Corion: hrm I have always found it strange that I can chdir and chmod but I can't get the cwd :)

[22:30] <Corion> Khisanth: I don't want to take the matter-of-fact changing of Perl6 too far - there are people more capable than I am defining the language :) And Perl6 shouldn't become PHP, the language with 4000 builtins :)

[22:31] <Corion> Khisanth: That's because Unix is crippled when it comes to cwd. getcwd is an expensive system call under Unix.

[22:31] <Corion> ... or used to be.

[22:31] <shapr> There's some extranifty code in Eval.hs

[22:31] <Corion> And Perl is/was Unix-centric

[22:31] <jabbot> pugs - 1448 - tested and documented use_ok(); added to

[22:32] <Khisanth> Corion: well it isn't that I want a few thousand builtin but I do like consistency :)

[22:32] <Corion> shapr: I just noticed. retEmpty is context sensitive - you can look at that for want()

[22:33] <Corion> Khisanth: Ask on p6l maybe. Once I've implemented it, it's just a matter of renaming __cwd() to cwd() :)

[22:33] <Khisanth> so having chdir/chmod/... also in a module along with cwd would seem better

[22:34] <Corion> Hmmm. How dow I get an IO Filepath into a VStr ? ... I have to learn about the Pugs type system, I guess ...

[22:35] <shapr> Probably use liftIO to lift the IO call into the main monad. What's it called, Val?

[22:36] <Corion> shapr: Aah - I've seen liftIO used. I'll try that and see what Haskell tells me ;)

[22:37] <Corion> Yippie :)

[22:37] <Corion> But I didn't export it properly it seems.

[22:38] <Corion> Where other than in Prim.hs do I need to declare a new builtin?

[22:39] <shapr> declare it, fill it into the really big string at the bottom, and you're done.

[22:39] <shapr> Oh, and *update the tests* as I learned.

[22:39] <Corion> shapr: Hmmm. Then I've made some other error, as Pugs doesn't know about it yet.

[22:39] <shapr> make ?

[22:39] <Corion> shapr: Heh - I need to write the test for it still :)

[22:39] <Corion> shapr: Did that, too :)

[22:40] <Corion> shapr: My "yay" was because Pugs compiled :)

[22:40] <shapr> You sure you put it into initSyms? I forget that quite often.

[22:40] <shapr> As in, I've forgotten that every time so far.

[22:40] <Corion> shapr: I'll check that. And maybe I messed up the param count/type/whatever ... cwd should be an op0

[22:41] <Corion> shapr: I mostly copied the prototype of time(), so I should be fine with that (except changing Int to Str)

[22:41] <shapr> Yeah, good choice.

[22:42] <Corion> Bah. The parser doesn't seem to like my __cwd. With xxcwd(), it works. :(((

[22:43] <Corion> So I now gotta find a different way of declaring my hidden builtin :)

[22:43] <Corion> Maybe some weird Unicode char.

[22:44] <Corion> Unicode sliderule to the rescue: ‚Äº is my prefix :)

[22:45] <Corion> Grrr. But it pastes not as unicode, but as two exclamation points. I'll need a unicode-able editor :(

[22:45] <shapr> What are you using?

[22:45] <shapr> If emacs, C-u C-x C-f will let you force the charset.

[22:45] <Corion> shapr: Proton

[22:46] <shapr> Never heard of it.

[22:46] <putter> Fyi, I now have a kludge which combines pods and adds misc cruft.  Single synopses.pod with toc and section index.  A and E's in historical.pod, and a modules.pod.  Not everyone likes one-big-page manuals... but I like zipping/grepping around a spec,  ymmv

[22:47] <Corion> shapr: Nice, quick, small Win32 text editor with multiple tabs.

[22:47] <Khisanth> shapr: are you sure it's C-u C-x C-f? it attempts to open a file here

[22:47] <Corion> shapr: But I'll have to change to something different if it doesn't support UTF-8

[22:47] <shapr> Khisanth: Yes, but once you've chosen the file, you can choose the charset as well. Try it.

[22:49] <Khisanth> hmm nope

[22:49] <Khisanth> are you using xemacs?

[22:49] <shapr> Yes I am.

[22:49] <shapr> But I'm pretty sure it works on gnumacs as well, though it may require MULE.

[22:51] <Khisanth> I do have mule support, though there was nothing about charset when using that combo

[22:51] <Khisanth> I get a lot of \d+

[22:51] <shapr> Weird, maybe I'm just confused.

[22:52] <shapr> I switched back to xemacs21 two weeks ago, possibly that has scrambled my brains.

[22:53] <Khisanth> hrm maybe I am just lacking a utf8 font emacs can use

[22:55] <Corion> Hah. My first super-secret builtin is in Pugs :)

[22:55] <Corion> ( xxx_file_spec_cwd() )

[22:55] <Khisanth> pugs easter egg

[22:56] <Khisanth> shapr: what does $ do in haskell? don't know how to read forall b a. (a -> b) -> a -> b :/

[22:56] <Corion> Khisanth: $ is a shortcut to space you a pair of parentheses :)

[22:56] <Khisanth> space?

[22:56] <Corion> Khisanth: foo $ bar   is the same as   foo( bar )

[22:56] <Corion> s!space!spare!

[22:56] <Khisanth> ah

[22:56] <shapr> $ means function application, you can use it like Corion just described, and you can use it other ways too.

[22:57] <Corion> Khisanth: So foo $ bar $ baz $ ack    is  foo( bar( baz( ack ))))

[22:57] <shapr> Like if you have a list of functions, and a list of input data, you can stick the two lists together into a result list with zipWith ($) fList dList

[22:58] <Corion> shapr: Oooo - nice :) I thought that $ might be a form and not a function, but it seems that Haskell doesn't have (many) forms ?

[22:58] <Corion> Hmmm. Or maybe there isn't much difference, as Haskell is lazy.

[22:58] <shapr> forms? You mean builtin unchangeable functionality? If so, Haskell has almost none.

[22:59] <Khisanth> that is very nice, the zip that is

[22:59] <Corion> shapr: Yeah - if(bool, ex1, ex2) is a form in non-lazy languages

[22:59] <shapr> if is a function in Haskell.

[22:59] <Corion> I broke my own tests. I'm stupid :)

[23:00] <Corion> (because I commited before running the test suite :) )

[23:00] <shapr> I was pretty shocked when I first ran into Haskell, you can change nearly anything.

[23:00] <shapr> I like a language that trusts me =)

[23:00] <Corion> shapr: You'll like Perl then :) Except that there are things in Perl that you can't really change. Hence the need for Perl6 :)

[23:00] <Khisanth> that is the same reason I like Perl

[23:01] <shapr> I'm working my way into Perl slowly.

[23:01] <shapr> I think I may invite Rob Nagler to work his way in from the other side.

[23:01] <jabbot> pugs - 1449 - Proper cwd() for File::Spec (via the sup

[23:06] <putter> re the request/suggestion to grab p5 modules and port... has anyone systematically groveled over p5/t, transliterating and integrating the test with pugs/t?  Pugs/t seems mostly written from scratch...?

[23:06] <Corion> putter: Yes, mostly written from scratch.

[23:07] <Corion> putter: So, transliterating P5 tests where applicable is most welcome IMO

[23:07] <putter> tnx

[23:08] <shapr> Waitasec, I just realized metaperl called me the main evangelist for Haskell.

[23:08] * shapr blinks confusedly

[23:09] <shapr> ok, quick poll, do I sound like a Haskell evangelist?

[23:10] <Odin-LAP> You are a functional programming advocate, are you not?

[23:10] <Corion> I didn't see much advocacy here

[23:10] <shapr> Yes. But I think I advocate all flavors of programming.

[23:10] <Corion> ... the use of Haskell for Pugs is pretty much a given thing, no ? :)

[23:10] <shapr> heh, true.

[23:10] <Odin-LAP> shapr: Well, maybe such caused some confusion..?

[23:11] <shapr> Could be.

[23:11] <Corion> multi-flavoured-programming ++

[23:11] <shapr> truly!

[23:11] <jabbot> pugs - 1450 - Fix command line help verification

[23:11] <shapr> I guess I am a vocal proponent of Haskell for everyday general programming.

[23:12] <shapr> aaanyway... back to staring at want

[23:12] <Corion> r1450 Win2k testmatrix at http://datenzoo.de/pugs/win2k.html

[23:13] <Corion> shapr: You saw my comment about Empty ?

[23:14] <Corion> err - retEmpty ?

[23:14] <shapr> Yes, thanks! That's half of want right there.

[23:15] <shapr> I guess I could just implement that and commit it. I've been trying to figure out the want.count part so far.

[23:15] <Corion> shapr: Small steps! So implement that one and commit. Punt on want.count and let it always return infinity :)

[23:15] <Corion> (or VUndef, dunno how it's defined)

[23:16] <shapr> Yeah, true.

[23:19] <Corion> good night all

[23:41] <jabbot> pugs - 1451 - Added test for super-secret builtin

