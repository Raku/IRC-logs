[00:00] <svnbot6> r5380, mugwump++ | Implement the variety of round-like functions (doesn't work - currently commented out)

[00:02] <nothingmuch> *sigh

[00:09] <mugwump> heck, I've got a sub that works interactively in pugs, but when placed in a test script makes pugs bizarrely expect an extra } at the end of file

[00:09] <nothingmuch> runFile is soooooooo slloooooooowwwww

[00:10] <mugwump> ?eval sub r($n) { ($n<0) ?? int($n-0.5) :: int($n+0.5) }; [ r(0.5), r(0.4), r(-0.5), r(-0.4) ]

[00:10] <evalbot6> [1, 0, -1, 0] 

[00:10] <nothingmuch> hmm

[00:10] * nothingmuch is begining to be skeptical

[00:10] <nothingmuch> about env

[00:11] <nothingmuch> autrijus: backlog marker

[00:11] <nothingmuch> i think envBody should be like the lexical env

[00:11] <nothingmuch> containing the AST

[00:11] <nothingmuch> but also outer, pos, lexical variables, etc

[00:11] <nothingmuch> and the 'normal' env should be the dynamic scope only

[00:12] <nothingmuch> anyway, goto was fixed

[00:12] <nothingmuch> envPos was not carried over

[00:13] <svnbot6> r5381, nothingmuch++ | Fix goto borkedness - pos was not carried over from caller env

[00:14] <nothingmuch> . o O ( we have more test cases than we've got revisions )

[00:19] <putter> any thoughts on how I can get from a Rational (ie, Ratio Integer) to a Double?  there is fromRational, and then...?

[00:20] <nothingmuch> putter: hoogle is your friend

[00:21] <mugwump> ?eval $?PUGS_VERSION

[00:21] <evalbot6> \'Perl6 User\'s Golfing System, version 6.2.7, June 13, 2005 (r5381)' 

[00:21] <nothingmuch> fromRat, i would think

[00:21] <nothingmuch> in Numeric

[00:21] <nothingmuch> http://www-users.cs.york.ac.uk/~ndm/hoogle/

[00:21] <nothingmuch> search for Rational Double

[00:22] <nothingmuch> specificallly this: http://www-users.cs.york.ac.uk/~ndm/hoogle/generated/Numeric.f.fromRat.htm

[00:22] <putter> yay, it looks like this did it... ((fromRational r)::Double)

[00:22] * putter looks at hoogle...

[00:22] <nothingmuch> ah, the inferencer doesn't know if you meant a double or float?

[00:23] <nothingmuch> ah, :i Fractional says Double and Float are also instances of Fractional

[00:23] <nothingmuch> so fromRat is silly

[00:24] <mugwump> ?eval my $a = { <1 2 3 4 5 6> }; $a<1 ?? "foo" :: "bar"; #>

[00:24] <evalbot6> [undef, undef, undef, undef, undef, undef] 

[00:24] <putter> nothingmuch: yes, I think that was it.

[00:24] <mugwump> ?eval my $a = { <1 2 3 4 5 6> }; $a < 1 ?? "foo" :: "bar"; #>

[00:24] <evalbot6> Error: cannot cast from VCode (MkCode {isMulti = False, subName = "<anon>", subType = SubBlock, subEnv = Just (MkEnv {envContext = CxtItem (mkType "(mkType "Scalar")"), envLValue = False, envLexical = MkPad (padToList [("$?1",[(<ref>,<ref>)]),("$_",[(<ref>,<ref>)]),("$a",[(<ref>,<ref>)]),("$code",[(<ref>,<ref>)]),("$lang",[(<ref>,<ref>)]),("%_",[(<ref>,<ref>)]),("&?BLOCK_EXIT",[(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,

[00:24] <putter> hoogle should go in some doc somewhere...

[00:24] <nothingmuch> anywho, i ought to sleep

[00:25] <nothingmuch> USETHEM

[00:25] <nothingmuch> ;-)

[00:26] <putter> :)

[00:26] <putter> 'night

[00:27] <nothingmuch> is(("a\b" ~~ rx:P5/a\\b/ && $<>), "a\b", 're_tests 205/0 (239)', :todo<bug>);

[00:27] <nothingmuch> that's not right, is it?

[00:28] <nothingmuch> \b is bell or backspace (i forget)

[00:28] <nothingmuch> and \\b is backslash b

[00:28] <Khisanth> neither

[00:28] <Khisanth> \b is \w on one side and \W on the other

[00:28] <nothingmuch> no, not in a regex, in a string

[00:28] * nothingmuch knows his zero-width-assertions

[00:28] <nothingmuch> gotta love em

[00:29] <Khisanth> bell is \a

[00:29] <nothingmuch> right

[00:29] <nothingmuch> hmm

[00:29] <nothingmuch> in pugs saying "a\b" doesn't work at all

[00:29] <putter> nothingmuch: how would you (one line) describe hoogle...?

[00:30] <nothingmuch> putter: cross index of std haskell libs... searchable by type signature, name, etc

[00:33] <putter> tnx

[00:38] <putter> re "a\b", weird.  hey, in perl6, let's not follow perl5's example of "you are trying to find \b in the man pages, wuaaaahahahaha".

[00:38] <svnbot6> r5382, putter++ | In hack.pod, added a link to hoogle.  nothingmuch++

[00:39] <putter> Oh.  \b is backspace.  that makes sense.

[00:41] <putter> ?eval ("a\b" ~~ rx:perl5/a\b/).chars

[00:41] <evalbot6> 1 

[00:42] <putter> My fuzzy recollection is there is code to escape \mumble before handing it off to the rx engine.  Perhaps \b isnt done.

[00:42] <Khisanth> ?eval ("a\b" ~~ rx:perl5/a\x8/).chars

[00:42] <evalbot6> 2 

[00:44] <stevan> Guten Abend mein Damen und Herren :)

[00:45] <mugwump> wie gehts, mein freund?

[00:45] <stevan> nadda mucho amigo

[00:45] <stevan> und du?

[00:46] <stevan> mugwump: I added the ability for things like 'Dog-0.0.1-cpan:JRANDOM'->new() to the metamodel today

[00:46] <mugwump> das Spiel aufpassen, eine Bier essend

[00:46] <stevan> but shortly after I was questioning that

[00:47] <stevan> (ok, we have reached the end of my German vocabulary, at this point, all I have left is curse words :)

[00:47] <mugwump> Babelfish++

[00:47] <stevan> :D

[00:49] <mugwump> that's great.  hey, I think that stuff I was trying to hardwire into the metamodel will actually be an interesting case of a module that alters the metamodel

[00:49] <mugwump> ie, the "companion" relationships... like automatic doubly-linked lists

[00:50] <mugwump> so, you'd go:

[00:51] <mugwump> class Node { has @.children is double_linked(:to<parents>); has @.parents is double_linked(:to<children>) }

[00:52] <stevan> how would that work exactly?

[00:53] <mugwump> glad you asked :)

[00:53] <stevan> I am not sure I understand the is double_linked

[00:53] <stevan> I mean I understand what you are doing (recursive datatypes), but...

[00:56] <mugwump> so, double_linked would make the Node.children accessor a Proxy method via the MetaModel

[00:56] <mugwump> The Proxy method would do set operations to determine "changed" values by an array operation

[00:56] <mugwump> (ie, missing/new members)

[00:57] <mugwump> Then send messages to those nodes that they need to add/remove $?SELF to/from their @.parents

[00:58] <stevan> this is for some kind of Tree data structure?

[00:59] <mugwump> they might be on different classes, too;

[00:59] <mugwump> class Account { has Transaction @.transactions is double_linked(:to<account>) }; class Transaction { has Account $.account is double_linked(:to<transactions>) }

[01:01] <stevan> ahh, I see

[01:01] <mugwump> So, attribute accessors themselves have "messages" sent to them depending on the context they are used

[01:02] <mugwump> ie, a "proxy" accessor is defined as;

[01:02] <mugwump> method attribute is accessor( :STORE{ ... }, :FETCH{ ... } );

[01:03] <stevan> nice

[01:03] <mugwump> (see also t/oo/attributes/mutators.t)

[01:03] <stevan> have you proposed that on p6l?

[01:03] <mugwump> yes, Luke liked it

[01:04] <mugwump> status is "tentatively not entirely disapproved of by all(@Larry)"

[01:05] <mugwump> However, when you use a subscript operator on an attribute, it needs a different accessor quasi-method to be called;

[01:05] <mugwump> $object.attribute<val>  # :HASHLOOKUP ?

[01:05] <mugwump> $object.attribute{"val"}  # :HASHLOOKUP ?

[01:05] <mugwump> $object.attribute[123]  # :ARRAYLOOKUP ?

[01:07] <mugwump> In Class::Tangram, I handle this with a calling convention for attributes considered "containers" - ref, set, array, hash

[01:08] <mugwump> eg, you'd call $object.attribute("val"); to lookup - this would be an array or hash deref, depending on the type of "val"

[01:10] <mugwump> For example, a property that is an ordered hash would respond to both styles of accessing

[01:14] <mugwump> either that, or there is a general :OBJECTREF { ... } quasi-method, that returns a Proxy object which is responsible for responding to the post_circumfix:«<>», etc methods

[01:17] <mugwump> See also http://search.cpan.org/dist/Class-Tangram/lib/Class/Tangram/Containers.pod for the rest of the information about the container calling convention stuff

[01:18] <stevan> this is interesting

[01:18] <stevan> definitely not for the newbie :)

[01:19] <stevan> I do like the proxy idea though

[01:19] <mugwump> proxy objects are specced already

[01:19] <stevan> on a very very basic level, it seems like you are adding the ability to do more sophisticated accessor/mutators through the metamodel

[01:20] <stevan> yes, but proxy in the object space is less specced/thought out it seems

[01:20] <stevan> the Proxy stuff I have seen is all related to lvalues

[01:20] <mugwump> sure.  perhaps I'll have to write S14 to flesh this out

[01:21] <stevan> but I have to run for now, I will check it out on p6l though

[01:26] <svnbot6> r5383, Stevan++ | Perl6::MetaModel - adding a test for some examples in A12; nothing much else :)

[01:47] <svnbot6> r5384, putter++ | * Moved sprintf and Scalar::as to Prelude.pm from Prim.hs.  They now correctly handle variously typed arguments.  Un-todo-ed 2 tests.  Removed a bogus test.

[01:54] <svnbot6> r5385, mugwump++ | Add a few more tests to rounding tests, and make tests pass by adding to Prelude.pm

[01:59] <putter> mugwump: I got floor and friends to typecheck.  Waiting on a compile to see if they actually work.  Does the Prelude.pm stuff obsolete the Prim.hs stuff?

[01:59] <autarch> putter: I don't think so.  Isn't it much slower if it's done in the prelude?

[02:00] <mugwump> not these days

[02:00] <mugwump> I'm ambivalent to which is used...

[02:00] * mugwump & # meeting

[02:00] <putter> seems to work... hmm... &

[02:02] <autarch> if prelude isn't slower, it makes sense to write in the prelude for accessibility

[02:04] <putter> I'll put them in Pugs::Internals, and they can be used or moved as desired.

[02:08] <autrijus> as of today, prelude isn't slower anymore; migrating composite primitives and new primitives to Prelude.pm makes a lots of sense.

[02:08] <svnbot6> r5386, autrijus++ | * add `is builtin`, `is primitive`, `is safe` etc to

[02:08] <svnbot6> r5386, autrijus++ |   new prelude functions.  also added Prelude authoring

[02:08] <svnbot6> r5386, autrijus++ |   guide at the top of Prelude.pm -- please help save

[02:08] <svnbot6> r5386, autrijus++ |   the world and make PIR generation possible again.

[02:08] <autrijus> but please see the doc chunk in top of Prelude.pm, so we can keep PIR (and eventually P5) happy

[02:12] <autrijus> I need to run to get my laptop repaired... bbl

[02:13] <autrijus> will read the backlog on taxi... stevan++ putte++ mugwump++ geoffb++ gaal++ nothingmuch++ 

[02:13] <svnbot6> r5387, putter++ | Finished haskell versions of floor,ceiling,round,truncate. mugwump++.  Given the new r5385 Prelude.pm versions, I dropped them in Pugs::Internals.  These two need to be syncronized with Emit/PIR.hs.

[02:15] <putter> I just love pugs development... "I need to run to get my laptop repaired...[...]  will read the backlog on taxi..." :)

[02:18] <putter> a slight cautionary note on Prelude.pm... compiling Pugs.Run seems to be taking rather longer than it used to.  perhaps unrelated.  or my imagination.

[02:19] <mugwump> 2min on my system

[02:19] <mugwump> which is a fairly long debug cycle...

[02:37] <svnbot6> r5388, mugwump++ | Make otherwise condition a failure, not silently returning 0 ;)

[02:46] <putter> Am I correct in my impression that, PIR aside, all prelude regressions are now fixed?

[02:46] <putter> s/prelude/compiled prelude/

[03:11] <svnbot6> r5389, putter++ | Fixed failing t/oo/class/basic.t test.

[03:12] <putter> Err, in Parser.hs, why is "class" handled by both ruleClassDeclaration and ruleModuleDeclaration?

[03:20] <putter> attempting consolidation...

[03:29] * mugwump lols at "Please - listen to me. I'm an expert on IDS. I know whereof I speak."

[03:39] <putter> err, which IDS?

[03:49] <autrijus> rehi lambdacamels

[03:49] <autrijus> putter: your impression agrees with mine.

[03:50] <autrijus> I'm attempting to fix pir compilation now

[03:59] <putter> ok.  I'm testing a merged ruleModuleDeclaration.

[04:00] <putter> Note to self: always have two projects going, so you can fiddle with one while the other compiles/tests.

[04:10] <svnbot6> r5390, Stevan++ | Perl6-MetaModel

[04:10] <svnbot6> r5390, Stevan++ | * adding support for "is ro" and "is rw" with regard to accessor/mutator generation

[04:10] <svnbot6> r5390, Stevan++ |   NOTE: this does not affect the underlying container type of the attribute (not sure how that would be handled yet)

[04:10] <svnbot6> r5390, Stevan++ | * default is now 'ro' and not 'rw'

[04:10] <svnbot6> r5390, Stevan++ | * updated all the tests to reflect this new default

[04:10] <svnbot6> r5390, Stevan++ | * unified some the handling of meta-info for attributes 

[04:12] <gaal_> morning

[04:12] <gaal_> putter: Run.hs is slow to compile in the second pass now because it #includes the -CPugs output of the prelude

[04:13] <autrijus> but that tradeoff is quite worth it

[04:13] <autrijus> the only annoying thing is that it insist on rebuilding during "make ; make"

[04:14] <gaal_> autrijus: i noticed that `pugs -CPugs Test.pm` emits stuff for the prelude too. i understand why it does that of course, but i'm not sure that it should.

[04:14] <autrijus> gaal_: it should not

[04:14] <autrijus> gaal_: look, the thing is in userDefined

[04:15] <autrijus> the problem is on genprelude

[04:15] <autrijus>     open my $pc, "$Config{pugs} -CPugs $Config{inline} |" or die "open: $!";

[04:15] <autrijus> we want it to emit prelude code

[04:15] <autrijus> whilst in all other cases

[04:15] <autrijus> we do not.

[04:15] <gaal_> autrijus, re `make;make` yes indeed, but unless we break #include "PreludePC" into separate .hs modules that'd be hard to fix

[04:15] <autrijus> so try to think something :)

[04:15] <autrijus> maybe setting a special env during gengprelude

[04:16] <autrijus> and activate bypass if -C and without that env?

[04:16] <autrijus> am I making any sense to you?

[04:16] <gaal_> yes, i understand this problem.

[04:16] <gaal_> and your proposale

[04:16] <gaal_> s/e$//

[04:16] <gaal_> originally i wanted to add an undocumented comdline arg

[04:17] <gaal_> since that would also allow us to avoid the hacky haskell munger filter

[04:19] <gaal_> ie have another function in Pugs.Compile.Pugs that doesn't say MainCC etc.

[04:19] <gaal_> excuse the typos this espresso is only 30% drunk

[04:20] *** gaal_ is now known as gaal

[04:22] <gaal> i was about to say that we can use kwid now in Prelude but i see you beat me to it. :)

[04:25] <gaal> we should invent a trait for the prelude: is pure. it doesn't do anything (maybe it should be a documentation convention instead of a trait) -- except indicate that this builtin is implemented completely in the prelude. that way it'll be easier to separate pugs-specific implementation from things that should work in another implementation. this is.. not very urgent. :)

[04:27] <gaal> shouldn't the new Num:: functions go in a class instead of being declared fully-qualified?

[04:35] <autrijus> yeah

[04:35] <autrijus> please go ahead

[04:37] <ingy> hola

[04:37] * putter notices the phrase "make;make" went by... if "unoptimized" gets lost in the process, the compile time on Pugs.Run would be unsurprising...

[04:39] <autarch> hi, ingy

[04:39] <mugwump> gaal: the reason I did that, is that I had invocant count mismatch problems with: class Num { method floor { } }

[04:40] <gaal> putter no, the second pass Run is very long -- see PreludePC.hs

[04:40] <gaal> mugwump - okay, i'll not ci now

[04:40] <ingy> autarch: hey, what you doing here?

[04:40] <mugwump> well, if you can get it to pass be my guest gaal ;)

[04:40] <gaal> have to leave for $work - have at it

[04:41] <gaal> :)

[04:41] <gaal> see you later. &

[04:41] * mugwump waves

[04:41] <putter> gaal: ah well.  &

[04:41] <autarch> autarch: uh, talking about perl6, mostly

[04:41] <autarch> and pugs

[04:42] * putter dev cycle is now 5+ minutes. :(

[04:42] <ingy> converting DateTime?

[04:42] <autarch> yeah

[04:42] <autarch> not so much converting as rewriting, really

[04:42] <ingy> sounds like a barrel of fun

[04:43] <putter> hi, ingy

[04:43] <ingy> fyi I think I have a totally workable wysiwyg solution for work

[04:43] <ingy> hi putter 

[04:43] <ingy> how's the life of pugs?

[04:44] <ingy> putter: I'm thinking of rewriting Inline for Perl5

[04:44] <ingy> are you still on that mailing list?>

[04:50] <mugwump> hey does anyone know if there has been a Ruling on tuple return types?  eg sub divmod(Num, Num) returns (Int, Num) ?

[04:52] <putter> ingy: having a number of smaller classes could be neat

[05:03] <putter> ingy: not on mailing-list, I don't think.

[05:05] <putter> weary sigh.  Is there some way to say "dont precompile the prelude"?

[05:05] * mugwump feels putter's pain

[05:07] * putter is having flashbacks of using punchcards

[05:08] * mugwump suggests changing the Prelude.pm to a stub that loads the real Prelude.pm at runtime for Prelude hacking

[05:11] <putter> good idea.  tnx.  almost time to put brain to bed.

[05:16] <chromatic> Is it preflight time?

[05:20] <autrijus> chromatic: no, not yet, I'm still fixing PIR

[05:20] <svnbot6> r5391, autrijus++ | * zeroth proofreading of ChangeLog

[05:20] <svnbot6> r5392, autrijus++ | * minor textual fix to hack.pod

[05:20] <svnbot6> r5393, autrijus++ | * rename "translate" to "codegen"

[05:20] <putter> perhaps not quite.  -BPIR is broken.  plus I fuzzily remember there were some other regressions

[05:21] <chromatic> Test::Builder has one weird one related to functions with the same name in different packages.

[05:25] <autrijus> both exported?

[05:25] <svnbot6> r5394, autrijus++ | * in gen_prelude, use IPC::Open2 to avoid the dreaded whitespace bug.

[05:26] <chromatic> No, I don't believe so.

[05:26] <autrijus> ok. which test is this?

[05:26] <chromatic> t/010_Test_Builder.t in ext/Test-Builder/

[05:27] <chromatic> Test exports plan, which the file uses, but the error message is of a parameter mismatch with Test::Builder::plan.

[05:27] <autrijus> ext/Test-Builder/lib/Test/Builder.pm:  sub plan (Str ?$explanation, Int ?$tests) is export {

[05:27] <autrijus> well.

[05:27] <chromatic> Weird, where'd that come from?

[05:28] <chromatic> Wait, that's in the POD.

[05:28] <autrijus> oh.

[05:28] <chromatic> Can't fool me... for long!

[05:30] <autrijus> that is weirdo indeed.

[05:30] <chromatic> Is there some namespace switching not happening?

[05:30] <chromatic> Or did the export trait parsing change recently?

[05:30] <autrijus> no the export thing should work fine

[05:30] <autrijus> $?PACKAGE says we're in main

[05:30] <autrijus> so curiouser and curiouser

[05:31] <autrijus> if you import TBP and not Test then it fails to find &plan

[05:31] <autrijus> which is correct

[05:31] <chromatic> I just switched the order of the use statements to put use Test last and it worked for a while.

[05:31] <autrijus> define `for a while`

[05:31] <chromatic> Now it fails to find open().

[05:31] <chromatic> On line 46.

[05:32] <autrijus> hm. very weird. ok, i'll color it as a showstopper, but I need to work on pir first

[05:32] <autrijus> if you'd like to minimise it I'd be much grateful

[05:32] <chromatic> It's a showstopper for claiming full OO support, but so is the DESTROY thing still open.  I don't mind if it doesn't block the next release.

[05:35] <autrijus> full OO support is for 6.28.0 and pends on metamodel incl. roles

[05:35] <putter> I should have a slight oo improvement in as soon as a make test finishes.

[05:36] <chromatic> Alright, alright, I'll break stevan's stuff for a while then.

[05:37] <autrijus> cool. I need to run for $work, bbiab

[05:47] <putter> patch in.  goodnight all. &

[05:47] <svnbot6> r5395, qtplatypus++ | Implementing trans

[05:47] <svnbot6> r5396, putter++ | Improved parsing of packages (modules, classes, etc).  Some tests need to be un-todo-ed.

[17:12] <gaal> anyone else getting this error?   :

[17:12] <gaal> Error: No compatible subroutine found: "&Test::test_ends"

[17:12] <svnbot6> r5435, fglock++ | implemented DateTime::Span

[17:12] <gaal> when using prove

[17:12] <nothingmuch> gaal: i need a new ISP.. got any reccomendations, for cheapo business accts?

[17:12] <nothingmuch> static IP a must

[17:12] <nothingmuch> dhcp a plus

[17:12] <gaal> nothinmuch, i like actcom, but well...

[17:12] <gaal> you know that

[17:12] <nothingmuch> they never replied to my inquiries

[17:12] <nothingmuch> i tried to get a price quote 3 times

[17:12] <nothingmuch> i'll try again

[17:13] <gaal> 1-800-300-123x1

[17:13] <nothingmuch> i'm getting sick of NV

[17:13] <nothingmuch> the connection drops all the time

[17:13] <gaal> actually x3, you need customer service

[17:13] <gaal> NV used to be great, but then they went the way of the corporate.

[17:13] <nothingmuch> the problem is that i'm right in the middle

[17:13] <nothingmuch> i'm a coporate client, supposedly

[17:13] <nothingmuch> but I'm not big money

[17:14] <nothingmuch> i get supposedly better service

[17:14] <nothingmuch> but I get the butt end of that market share

[17:14] <nothingmuch> so I actually get the worst service of all

[17:14] <nothingmuch> while all I really wanted was reliability.

[17:14] <gaal> i'd try actcom. really, they are very clueful and nice. not the cheapest but not cutthroats either.

[17:15] <gaal> plus: haggle.

[17:15] <nothingmuch> i used to be with them

[17:15] <nothingmuch> yeah

[17:15] <nothingmuch> ook

[17:15] <gaal> so, you're not getting that error?

[17:15] <nothingmuch> wait, lemme backlog

[17:15] <nothingmuch> no

[17:15] <nothingmuch> but autrijus played with END a while ago

[17:15] <nothingmuch> my pugs might be out of date

[17:16] <nothingmuch> i've been trying to hack MMD mishmash

[17:16] <nothingmuch> make DateTime pass it's test suite

[17:16] <nothingmuch> the sort order of variadic arguments is bad

[17:17] <gaal> how much does a medium sized whiteboard cost? i want one for the hackathon

[17:17] <nothingmuch> i'd say 100-200NIS

[17:17] <nothingmuch> i'll chip in

[17:17] <gaal> i'll see if i can borrow one from work :)

[17:18] <nothingmuch> http://www.officedepot.co.il/(jthxkk204a1ab5qonqztgn55)/searchHierarchyResults.aspx?searchString=לוח&searchSelectedDivision=00&divisionID=14&categoryID=1403&subCategoryID=1403004&familyID=&hierarchy=SUBCATEGORY

[17:18] <gaal> since i don't  need it afterwards.

[17:19] <nothingmuch> 60x80cm is 120 NIS

[17:19] <nothingmuch> wait, there's one at 880

[17:19] <nothingmuch> 80

[17:19] <nothingmuch> these are cheap and big: http://www.officedepot.co.il/(jthxkk204a1ab5qonqztgn55)/catalogSku.aspx?id=592014

[17:20] <gaal> i don't want to buy one and throw it away. i'm in an anti-consumerism streak.

[17:20] <nothingmuch> i'll find a use for it

[17:20] <nothingmuch> i could use one

[17:20] <nothingmuch> i have two in my cube at work

[17:20] <nothingmuch> i could bring them too

[17:20] <nothingmuch> but they're pretty small

[17:21] <gaal> i have a small one. it's funny, i asked for "a small one" and a few days later something A3-sized showed up.

[17:21] <nothingmuch> is a3 small?

[17:21] <nothingmuch> oh right, it is

[17:21] <gaal> kinda. twice A4.

[17:21] <nothingmuch> that's very small

[17:21] <Khisanth> gaal: just get a can of white paint :)

[17:21] <Khisanth> and a brush of course

[17:22] <nothingmuch> Khisanth: then you need to wait every time

[17:22] <gaal> indeed. if everyone were that literal all the time we could do business.

[17:22] <Khisanth> not if you get the right paint :p

[17:23] <gaal> (please echo >> things you think i should prepare for a hackathon) &

[17:23] <nothingmuch> food

[17:23] <nothingmuch> wifi hub

[17:23] <nothingmuch> (i can bring one)

[17:24] <gaal> gabor is bringing one, plus a spare laptop

[17:24] <gaal> though i don't know how long he's staying

[17:24] <nothingmuch> ah, gabor is coming too?>

[17:25] <nothingmuch> that's great

[17:25] <nothingmuch>  beer

[17:25] <nothingmuch> coffee

[17:25] <gaal> i always have those things :)

[17:25] <nothingmuch> =)

[17:26] <Khisanth> hrm drunken coding

[17:26] <gaal> i'm getting a hammock but i'm not sure i have a place to hang it up.

[17:26] <nothingmuch> Khisanth: no, beer is energizing

[17:26] <nothingmuch> damn, my fix didn't change anything at all

[17:26] <gaal> beer + summer in tel-aviv == lazy

[17:26] <Khisanth> I would like to see you try that on the cop that pulls you over for drunk driving :)

[17:27] <nothingmuch> Khisanth: one beer is legal

[17:27] <nothingmuch> plus energizing does not mean "increases motoric skills"

[17:27] <nothingmuch> it peps me up.

[17:27] <nothingmuch> i can have 3-4 before i start being drowsy, and then I code badly

[17:27] <gaal> nm, i'm not sure there isn't also a blood level measure, in which case small folk may not be ok with one beer.

[17:28] <nothingmuch> gaal: i'm not really a small folk

[17:28] <svnbot6> r5436, gaal++ | move Num subs to their own class

[17:28] <svnbot6> r5437, fglock++ | added Date::Span class

[17:28] <nothingmuch> i look smaller than I am

[17:28] * nothingmuch probably weighs more than gaal

[17:28] <gaal> brain the size of a planet...

[17:28] <nothingmuch> but nevermind, i don't drive when drunk

[17:29] <nothingmuch> autrijus: when you wake up, i have a weird patch I'd like to discuss... not committing

[17:29] <nothingmuch> i'm off to get food

[17:31] <gaal> um, something wrong with namespaces again. all the rounders are not 'is builtin', but the test for them manages to call them without qualification.

[17:32] <nothingmuch> eek

[17:32] <gaal> ?eval class F { sub fff {say "hi"} } fff

[17:32] <gaal> ?eval class F { sub fff { "hi"} } fff

[17:32] <gaal> oh, not evalbot. darn.

[17:33] <gaal> but that says hi :(

[17:33] <gaal> nothingmuch: the test consolidation service should also store historical data and ideally allow some diffage.

[17:34] <nothingmuch> gaal: yeah

[17:34] <nothingmuch> there's a repo of results

[17:34] <nothingmuch> i think they should be submitted with HTTP post

[17:34] <nothingmuch> and arbitrary differ

[17:34] <gaal> the database will get big, but it's a great tool.

[17:34] <nothingmuch> like 'consolidate x and y and z'

[17:34] <nothingmuch> i don't mind big, i have GB to spare

[17:34] <gaal> i told juerd i'd love to see it hosted on feather

[17:35] <nothingmuch> i'll hack it in catalyst next weekend

[17:35] <gaal> noooo let's do it in p6!

[17:35] <nothingmuch> too slow.

[17:35] <nothingmuch> this is heavy data munging

[17:35] <nothingmuch> we need it responsive

[17:35] * nothingmuch thinks p6 is not ready for writing the tools yet

[17:35] <nothingmuch> since the tools need to deal with special cases, and they need to be fast

[17:36] <nothingmuch> and with the workaroundish nature of pugs around weird corner cases, i think we won't get very far

[17:36] <gaal> special cases? i dunno, i think on the language level pugs prolly has what we need for this, no?

[17:36] <nothingmuch> i don't know

[17:36] <gaal> speed, yeah, is a problem.

[17:37] <nothingmuch> these are hug structures... that's the main problem

[17:37] <gaal> anyway, food

[17:37] <nothingmuch> and they need to be walked in <1s

[17:37] <nothingmuch> yeah, me too

[17:37] <gaal> do everything in sqlite :)

[17:51] <svnbot6> r5438, fglock++ | fixes 'density' parameter

[17:56] <gaal> autrijus: regarding r5363, i didn't need to unlink the files - touching them workedforme. what's different with our setups?

[18:01] <gaal> eeeep! /me ls -l's and looks at the size of PreludePC.hs and other -CPugs outputs

[18:11] <gaal> unspecced perl5 behavior:

[18:11] <gaal> perl -le '$x = require Carp; $y = require Carp; print $x; print $y'

[18:12] <gaal> $x is what do "Carp.pm" evaluates to, which happens to be 1.

[18:12] <gaal> guess what $y is :-)

[18:12] <gaal> answer: 1, apparently always.

[18:13] <gaal> regardless of $x, as long , of course, the first require was successful.

[18:13] <rafl_> gaal: Well, why is that unexpected? if (exists $INC{$filename}) { return 1 if $INC{$filename}; ... }

[18:13] <gaal> where are you taking that code from?

[18:14] <gaal> oh, perlfunc does have it. interesting.

[18:14] <gaal> well, i wonder what p6 should do.

[18:16] <gaal> in the case of most class .pms, it's nice to return either the name of the class or a Class for $x: shouldn't $y be equal to $x in that case?

[18:16] <rafl_> gaal: It's from perldoc -f require

[18:17] <gaal> but in that case they probably have to be weak references in %*INC

[18:17] <gaal> rafl_: thanks - saw it after you pointed out the code.

[18:18] <gaal> but that means %*INC can no longer be a simple (name => path-or-hook) hash

[18:19] <Limbic_Region> salutations fibonaci

[18:19] <Limbic_Region> nice handle

[18:21] <fibonaci> oh

[18:21] *** fibonaci is now known as luqui

[18:21] <luqui> thanks

[18:21] <Limbic_Region> heh

[18:21] * Limbic_Region had no idea

[18:22] <luqui> When I was obsessed with breaking into the school computers, one of my logins was fibonazi

[18:22] <nothingmuch> luqui: ping

[18:23] <luqui> ping me and then leave, eh?

[18:23] <nothingmuch> back

[18:23] * Limbic_Region wonders how old luqui is

[18:23] <nothingmuch> Limbic_Region: around my age ;-)

[18:23] <stevan> Limbic_Region: emotionally or physically :P

[18:23] <nothingmuch> luqui: i wanted to discuss pil->p5

[18:23] <Limbic_Region> when I was breaking into my school's computers - I didn't have a login - I used the teachers accounts

[18:23] <luqui> ahh yes that old thing

[18:24] <luqui> my hard drive died... again

[18:24] <nothingmuch> oh crap

[18:24] <nothingmuch> i hate when HDs die

[18:24] <stevan> luqui: that is no excuse

[18:24] <nothingmuch> it's the worst kind of death

[18:24] <stevan> you still have your punchcards

[18:24] <luqui> heh

[18:24] <nothingmuch> Limbic_Region: now make a guess

[18:25] <Limbic_Region> circa 20

[18:25] <stevan> BINGO!

[18:25] <luqui> well, we're only approximately exactly 20

[18:26] <Limbic_Region> in my case - I had a guidance councelor who didn't believe I could break in and in the other case a principal that was hoping I could since he had gotten locked out

[18:26] <luqui> y tu limbic?

[18:26] <Limbic_Region> venty-ocho

[18:26] <Limbic_Region> so I had permission ;-)

[18:26] <luqui> that's no fun

[18:26] * Limbic_Region is celebrating his 3 year anniversary with Perl today as a matter of fact

[18:27] <luqui> cool

[18:27] <luqui> That's about how long I've been using perl too

[18:27] <luqui> ... no, I guess it's more like 5 years

[18:27] <luqui> wow

[18:27] <luqui> time flies when you're programming perl

[18:27] <Limbic_Region> yep

[18:27] <nothingmuch> perl or perlmonks?

[18:28] <Limbic_Region> both

[18:28] <Limbic_Region> got my account same day as I discovered Perl

[18:28] <nothingmuch> i'm nearing my 3 year perlmonks ann

[18:28] <Limbic_Region> well - that's not entirely true - I knew about Perl from afar but that's the day I decided to learn about it

[18:28] <nothingmuch> but it's more like 3.5 of perl

[18:29] <Limbic_Region> there has been no single thing that has consumed more of my time, thought, and energy

[18:29] <luqui> and yet, only three years

[18:30] <Limbic_Region> err - in the same ratio I mean

[18:30] * Limbic_Region is sure he has spent more time masturbating then hacking perl but not in that time window

[18:31] <luqui> haha

[18:31] <Limbic_Region> oh - this channel is logged isn't it

[18:31] <nothingmuch> if only you'd have known perl in your youth?

[18:31] <nothingmuch> you prefix messages with [off]

[18:31] <luqui> vim masturbate.pl

[18:31] <Limbic_Region> nothingmuch - I wouldn't have such hairy knuckles

[18:31] <nothingmuch> what do you get when you play with fire?

[18:31] <Limbic_Region> in any case - I said thanks at the Monastery - but let me say thanks again here

[18:32] <Limbic_Region> here's hoping p6 consumes more of my time in the next 3 years than p5 did in the previous

[18:33] <nothingmuch> call me dumb, but I hope it takes up less time, with more yield

[18:33] <Limbic_Region> ok - you're dumb

[18:34] * Limbic_Region was looking at it from the perspective of having that much free time in the next 3 years

[18:34] <luqui> I hope it takes more time, with a greater yield ratio

[18:34] <Limbic_Region> I was single for 2 of those 3 years

[18:34] <luqui> the former or latter two?

[18:35] <Limbic_Region> the former

[18:35] <luqui> oh...

[18:35] <luqui> you better dump whoever it is

[18:35] <nothingmuch> luqui: too late for him now

[18:35] <Limbic_Region> heh - my wife probably would have to take issue with that

[18:35] <luqui> dump, divorce, same difference

[18:36] * nothingmuch wants to learn rubenstein's revenge

[18:36] <luqui> ?

[18:36] <Limbic_Region> perlbot google "rubenstein's revenge"

[18:37] <Limbic_Region> grrr - that feature must have got lost when the HD got dismantled

[18:37] <luqui> oh, it's a juggling thingy?

[18:37] <nothingmuch> yep

[18:37] <luqui> nothingmuch juggles?

[18:38] <nothingmuch> some

[18:38] * Limbic_Region juggles too but only the very basics

[18:38] * luqui was almost convinced after that yapc presentation

[18:38] <gaal> nothingmuch: bring juggling balls to hackathon plz

[18:38] <Limbic_Region> I ran a 10K race once with a guy who juggled the whole race

[18:38] <nothingmuch> gaal: we have millions at work

[18:39] <nothingmuch> Limbic_Region: i once walked 10k

[18:39] <nothingmuch> nobody was juggling, but I made it

[18:39] <gaal> lol

[18:39] <luqui> I once thought about walking 10k

[18:39] <luqui> but I didn't have a laptop at the time, so it was out of the question

[18:40] <luqui> ;-)

[18:40] <nothingmuch> addict

[18:40] * gaal rows five miles when not sucking

[18:40] <luqui> uh

[18:40] <luqui> is there a way to retroactively [off] a comment?

[18:40] <nothingmuch> what comment?

[18:41] <luqui> gaal's

[18:41] <luqui> :-)

[18:41] <gaal> i think the channel logger is down anyway.

[18:41] <nothingmuch> ah

[18:41] * nothingmuch bikes 20KM when there's enough daylight

[18:41] <gaal> actually, it's back up. what do you know.

[18:44] <gaal> "Parse error in pattern" is a terrible error message.

[18:45] <Limbic_Region> gaal - no 0x1 is a terrible error message

[18:45] <gaal> i like haskell better than i like make, so my expectations are higher.

[18:46] <Limbic_Region> *shrug* - I need to take a crash course in brain surgery err um p6 OO

[18:46] <gaal> l~r: you should try examples/obfu/l33t.p6

[18:46] <gaal> that has useful error messages.

[18:48] * luqui is teaching one of those...

[18:48] * luqui just isn't sure when

[19:08] <svnbot6> r5439, fglock++ | added 'density' accessor

[19:16] <luqui> ooh

[19:17] <luqui> Larry's latest message on p6l is...

[19:17] <luqui> brain-exploding

[19:17] <luqui> or at least tangling

[19:18] <geoffb> link?

[19:19] <luqui> http://www.nntp.perl.org/group/perl.perl6.language/22220

[19:19] <geoffb> thx

[19:21] * pdcawley thought that Smalltalk rather neatly dodged the infinite Class/Meta/MetaMeta/MetaMetaMeta/... regress rather neatly.

[19:21] <svnbot6> r5440, fglock++ | 'density' fixes

[19:21] <svnbot6> r5441, iblech++ | * Added a new test for "class MyValueType is value {...}": t/oo/value_types.t

[19:21] <svnbot6> r5441, iblech++ | * Usual svn props.

[19:21] <pdcawley> s/rather neatly//

[19:21] <pdcawley> either will do.

[19:21] <luqui> how did it do it?

[19:21] <pdcawley> Feck! You don't expect me to remember do you?

[19:22] <luqui> well, you said rather neatly

[19:22] <luqui> ... twice

[19:22] <pdcawley> But MetaClass isa Class...

[19:22] <luqui> so I just ass-u-me-d

[19:23] <pdcawley> I remember reading the purple book and thinking "that makes sense" and then forgetting about it.

[19:23] <luqui> heh

[19:23] <pdcawley> I think it was the purple book anyway.

[19:23] * luqui might be interested in learning some smalltalk

[19:23] <luqui> then again...

[19:23] * luqui doesn't really care about metamodels all that much

[19:23] <pdcawley> If I remember rightly, the responsibilities worked out that the class was responsible for holding the instance methods, and the metaclass was responsible for holding the class methods.

[19:24] <integral> hmm, what's the haskell equiv for join(", ", @list) ?

[19:24] <pdcawley> Hang on, I'll fire up a Squeak image and have a look.

[19:24] * luqui wishes he knew

[19:26] <integral> hmm, the tour of the prelude implements unwords in terms on foldr1 + some addSpace func

[19:27] <pdcawley> MetaClass isa ClassDescription isa Behaviour isa Object

[19:27] <pdcawley> Class isa ClassDescription

[19:28] <nothingmuch> stevan says: smalltalk metamodel is teh suxx0r

[19:29] <pdcawley> Okay. And the roxxor would be?

[19:33] <luqui> Perl6::Metamodel?  :-)

[19:33] <pdcawley> Heh.

[19:34] <luqui> Well, Perl5's metamodel is pretty damn good

[19:34] <luqui> for not existing

[19:34] <luqui> it's just the attribute thing that needs work

[19:37] <rafl_> I know that I asked this question already several times, but I didn't get an answer: Why are the p5 parts of pugs installed as source package (including Makefile.PL, MANIFEST, t/, etc.)?

[19:38] <luqui> you mean when you do make install?

[19:38] <svnbot6> r5442, iblech++ | t/oo/inheritance.t -- Added tests, stolen from Larry.

[19:40] <svnbot6> r5443, iblech++ | * Pugs.Parser         -- Made "my Foo $foo .= new(...)" parse and work.

[19:40] <svnbot6> r5443, iblech++ | * t/oo/construction.t -- Added a test for that.

[19:42] * luqui heads home

[19:51] <svnbot6> r5444, bsmith++ | * Moved version variables from Pugs.Help to Pugs.Version.

[19:51] <svnbot6> r5444, bsmith++ | * Pugs.Help now import Pugs.CodeGen so that it can produce a correct list of

[19:51] <svnbot6> r5444, bsmith++ | backends in the -h message.

[19:51] <svnbot6> r5444, bsmith++ | * Fixed script/pugscc to use the Ghc backend rather than the Haskell backend

[19:51] <svnbot6> r5444, bsmith++ | for --haskell and --ghc.

[20:03] <svnbot6> r5445, iblech++ | util/gen_prelude.pl -- Fixed Haddock-confusing comment.

[20:09] <rafl_> integral: Maybe you can answer my question?

[20:12] <integral> hmm, perhaps

[20:12] <integral> what do you mean by "installed as source package"?

[20:13] <integral> rafl?

[20:14] <rafl_> integral: Things like /usr/share/perl5/Code-Perl/Makefile.PL get installed.

[20:14] <svnbot6> r5446, putter++ | Commented out (failing) test.  $larry yesterday said Foo.isa(Class) is false.

[20:14] <svnbot6> r5447, iblech++ | Pugs.Help -- Minor cosmetical fix: Added ''s around the "while" thing

[20:14] <svnbot6> r5447, iblech++ | (consistency: There're ''s around "use module", too) and fixed a typo.

[20:14] <integral> rafl_: ah, that sounds very much a bug :-)

[20:15] <rafl_> integral: Can you reproduce it?

[20:15] <integral> It should be recursing into the Code-Perl package and running that Makefile's install

[20:15] <integral> I don't install pugs...   and I'm scared of makemaker...   this really isn't my area

[20:16] <rafl_> integral: You can do make install DESTDIR=/tmp/foo or something. So you can remove it quite easily.

[20:16] <integral> sure, but there's bugs in the install process ;-)

[20:16] <Aankhen``> I'm getting $INSTDIR/lib/Code-Perl/Makefile.PL

[20:16] <Aankhen``> Did you install under /usr/share/perl5/?

[20:17] * integral will do a quick build before poking

[20:17] <rafl_> I run perl Makefile.PL INSTALLDIRS=vendor. That should put the p5 stuff into /usr/{lib,share}/perl5/

[20:18] <rafl_> I'll be right back.

[20:18] <Aankhen``> OK.

[20:19] <afields> Working on my Perl 6 sets pod

[20:20] <Aankhen``> Hmm.

[20:20] <afields> What's a good block of available punctuation, can { } be overloaded anymore?

[20:20] <Aankhen``> Basically, everything from lib/ appears to be copied to /usr/{lib,share}/perl5/ or whatever.

[20:22] <rafl_> Aankhen``: So that's seriously broken, isn't it?

[20:22] * Aankhen`` nods.

[20:23] * Aankhen`` thinks.

[20:23] <rafl_> Will you fix it?

[20:23] <Aankhen``> Isn't lib/* copied by default in a regular distribution?

[20:23] <Aankhen``> I am not really sure how to fix it.

[20:23] <integral> the .pm files should get copied into blib first, and then the blib installed

[20:24] <rafl_> OK, so I'll give a try in about an hour.

[20:26] <Aankhen``> lib/* appears to be copied wholesale to blib/.

[20:26] <Aankhen``> blib/lib/, actually.

[20:28] <afields> Which is most likely to please Perl 6 authors: a) {.} {..} b) (.) (..) c) <.> <..> or d) none of the above; for Perl 6 grammar (To mark set bounds/intervals/continuences)?

[20:29] <Aankhen``> I think d)...

[20:29] <svnbot6> r5448, fglock++ | implemented more methods in Set::Infinite

[20:29] <svnbot6> r5449, fglock++ | docs update

[20:29] <afields> Aankhen``: How are sets approached from a Perl 6 perspective?

[20:29] <Aankhen``> The options you listed are very basic symbols; redefining their meanings would be quite catastrophic... :-\

[20:30] <Aankhen``> Hmm... if you have a copy of the Pugs source handy, you could take a look at ext/Set/lib/Set.pm.

[20:31] <Aankhen``> (or http://svn.perl.org/perl6/pugs/trunk/ext/Set/lib/Set.pm)

[20:31] <afields> i"m thinking it might be advantageous to place meta-data about arrays (sets) at any given level of a multi-level structure

[20:31] <Aankhen``> my $set = set 23, 42, $some_object;

[20:32] <afields> so should that be done with more syntax or a more procedural manner working on set objects

[20:33] <Aankhen``> I suggest looking at the work already done first -- it might help you decide.

[20:33] <afields> OK

[20:33] <afields> I'm planning on looking at pugs

[20:33] <afields> just haven't got arround to reading all the source et

[20:34] <Aankhen``> You don't need to look at the Pugs source

[20:34] <Aankhen``> .

[20:34] <Aankhen``> I am referring to the `Set` module in Perl 6, which is shipped with Pugs.

[20:34] <Aankhen``> The Perl 6 `Set` module, even. :-P

[20:35] <afields> OK, so is this not going to somehow make it into base language

[20:35] <afields> sets are just a special case type of an array?

[20:35] <Aankhen``> I dunno about that, I haven't looked at the implementation as such.

[20:36] <afields> reason I ask is what if you want to deal with a very large set which can be partially specified ( 1 2 3 <..> 65535 ) for instance

[20:40] <dudley> is whitespace significant between a sub name and the opening paren of its parameter list?

[20:40] <dudley> i.e. is:

[20:40] <dudley> sub foo ($bar) {...}

[20:41] <dudley> equivalent to

[20:41] <dudley> sub foo($bar) {...}

[20:43] <Aankhen``> Yes.

[20:48] <Khisanth> afields: more like hashes than arrays

[20:50] <afields> my @a = ( [1,2,<..>10], [3,4,<..>,7], { a => [9,10], b => [-$a,<..>$a] } );

[20:50] <afields> my @set rather

[20:50] <Aankhen``> rafl_ >> You could try something like this in Makefile.PL: `libs(map fixpaths($_), grep { -f "$_/Makefile.PL" && not -l "$_/Makefile.PL" } glob("lib/*"));`.

[20:50] <Aankhen``> That'd miss out `pugs.pm` and `pugs.pod`, I think, but it's a start. :-)

[20:51] <Aankhen``> Anyway.

[20:51] * Aankhen`` goes to sleep.

[20:51] <Aankhen``> G'night.

[20:52] <afields> the idea is not to actually store numbers between -$a and $a, but simply to store the meta-data of the set that the range of values will return numbers between the two bounds of the interval

[20:52] <afields> and to do this using regular arrays

[20:52] <afields> I cover this in section: Storage vs. Usage

[20:52] <fglock> afields: see also the 'Span' class

[20:52] <afields> fglock: you are doing set work I see?

[20:53] <fglock> afields: yes 

[20:53] <afields> fglock: how much is done on things like continuances and incompletely specified sets, infinite sets?

[20:55] <fglock> that's Set::Infinite - it will handle those

[20:55] <Khisanth> there is a Set::Infinite isn't there? :)

[20:55] <afields> so each of these is a class which returns basically a blessed array?

[20:56] <fglock> afields: no, it returns an iterator

[20:56] <Khisanth> you aren't suppose to care about implementation :p

[20:56] <afields> Khisanth: well I might have to because I want to see the regex engine talk objects

[20:56] <afields> and sets

[20:56] <nothingmuch> moose!

[20:56] <fglock> it should return a Lazy List, but I think these are not fully implemented yet

[20:57] <sili> that sounds like fun

[20:57] <afields> can't we do this in the base language, please?

[20:57] <afields> not the grungy stuff

[20:57] <Khisanth> hmm both pp.h and chardefs.h has RETURN ... I don't think this will work out well

[20:57] <afields> just the primitives of set operations

[20:57] * nothingmuch wonders if you're allowed to talk back to schwern about quality stuff

[20:57] <nothingmuch> talk back == disagree

[20:59] <geoffb> give 'im hell, nothingmuch 

[20:59] <fglock> afields: the base language handles 1 .. 10, but it has some problems with 1 .. Inf

[20:59] <geoffb> dammit, why does ambiguous tab completion ALWAYS choose the wrong one?

[20:59] <afields> fglock: exactly, why even both dealing with infinity until it is actually used

[21:00] <afields> why even store 1..10

[21:00] <nothingmuch> heh

[21:00] <afields> store 1, to, 10 ;)

[21:01] <fglock> afields: that's how it works, actually

[21:01] <fglock> but the API makes it look like a list

[21:02] <afields> fglock: ok, so then can I do 1 .. 10 in Perl 6 or 32 .. Inf and then find the compliment of the two arrays?

[21:02] <stevan> nothingmuch: I didnt say the smalltalk metamodel sucked

[21:02] <fglock> yes - you can do that using the Span module already

[21:02] <nothingmuch> stevan: yes you did ;-)

[21:02] <stevan> I said it was more complex then it needed to be

[21:02] <nothingmuch> ah

[21:02] <stevan> in a drunken fit maybe

[21:03] <stevan> but not when I was sober

[21:03] <nothingmuch> i parse that as "sucked badly"

[21:03] <stevan> nah

[21:03] <nothingmuch> even if you said that verbatim

[21:03] <nothingmuch> i don't like complexity in something so atomic

[21:03] <stevan> just more "academic" then "practical"

[21:03] <nothingmuch> an ideal metamodel is very practical because it's so academic it's perfect

[21:04] <stevan> the perfect metamodel: available in proof form only

[21:04] <afields> fglock: ok, that's good, but why not just make arrays that 2 bytes smarter to do it there instead of delegating it to a special class?  I mean arguably you could omit the combinatoric logic in the base language and implement that as a module as long as arrays could better represent edge-case sets

[21:04] * nothingmuch goes to have a cigarette

[21:04] * Khisanth shoots nothingmuch

[21:05] <nothingmuch> Khisanth: eh?

[21:05] * stevan throws luqui inbetween nothingmuch and bullet

[21:05] <Khisanth> luqui is bulletproof?

[21:06] <stevan> we shall soon find out

[21:06] <nothingmuch> just a little bit longer

[21:06] <stevan> bah, he is off channel,... even worse

[21:07] <fglock> afields: I think the language will be able to handle that, once everything is in place. Actually, it may end up using a module transparently (I guess that's what "Prelude" is for)

[21:07] <nothingmuch> Khisanth: are you going to explain or can I go?

[21:07] <afields> fglock: so are you interested in more wacky suggestions on what would be nice to see for Perl 6 and sets?

[21:08] <afields> I like the fact that Unicode operators will work

[21:09] <fglock> sure - please mail me [email@hidden.address] - I've got to leave now :(

[21:09] <afields> ok, thanks, good timing =)

[21:09] <svnbot6> r5450, bsmith++ | util/importgraph.pl - colourise nodes by import/export lists and 'qualified'

[21:09] <svnbot6> r5450, bsmith++ | src/Pugs/Bind.hs - added export list

[21:14] <Khisanth> nothingmuch: just the smoking :)

[21:18] <svnbot6> r5451, putter++ | Commented out the envID field of Env.  With it, my $x = sub{}; $x =:= $x  was false, due to a single (prune-able?) mismatch.

[21:19] <nothingmuch> Khisanth: you can forgive me, I don't do it often

[21:35] <svnbot6> r5452, putter++ | "Fixed" t/var/symbolic_deref.t.  Replaced a random tested function with another currently working.  And temporarily replaced =:= with ~~, as =:= on subs is still broken.

[21:35] <svnbot6> r5453, putter++ | Added failing tests for =:= on subs.

[21:44] <nothingmuch> is anyone here familiar with pugs' current MMD dispatching?

[21:47] <geoffb> OK, WTF?!?

[21:47] <geoffb> pugs> my $i; while ++$i < 2 {next; say "Saw $i"}

[21:47] <geoffb> Saw 2

[21:47] <nothingmuch> ooh

[21:51] <geoffb> Ah, I see the blind spot -- it looks like all tests for next use a for loop

[21:51] <svnbot6> r5454, putter++ | Added "&main::" where needed in caller.t.

[21:55] <nothingmuch> geoffb: want to try to pair through it?

[21:55] <geoffb> Sure, what did you have in mind?

[21:56] <nothingmuch> do you know how Eval.hs applies loops?

[21:56] <nothingmuch> since every block is a closure it's really just repeated calls on the block

[21:56] <nothingmuch> each call get's a new dynamic scope

[21:56] <geoffb> OK

[21:56] <nothingmuch> with the next subroutine containing a closure that escapes

[21:57] <nothingmuch> (same applies for return, redo, etc)

[21:57] <svnbot6> r5455, putter++ | examples.t reverse.p6 was failing because an output line was added, without updating the tested output/ file.

[21:57] <nothingmuch> line 444

[21:58] <geoffb> LOL

[21:58] <nothingmuch> LOL?

[21:58] <geoffb> "probably needs work".

[21:58] <geoffb> Uh, yeah, definitely

[21:58] <nothingmuch> heh =)

[22:00] <nothingmuch> okay

[22:00] <nothingmuch> cond is evaluated in Bool context

[22:00] <nothingmuch> vb is a cast from perl6's val that is a bool, into a boolean

[22:01] <nothingmuch> (haskell boolean)

[22:01] <nothingmuch> f is the transformer (id for while, not for until)

[22:01] <nothingmuch> if (f vb) is true, we reapply, otherwise we return the result of the conditional (always false)

[22:02] <nothingmuch> i forget the details of fix, but it builds and env

[22:02] * geoffb doing too much window switching . . . rearranging windows . . . better

[22:03] <nothingmuch> next isn't even generated... that's our problem =)

[22:04] <geoffb> OK, so it basically comes down to transferring some magic from the block starting at 368 (for) and/or 400 (loop)

[22:04] <nothingmuch> yeah, pretty much.

[22:05] <nothingmuch> i think while is simpler though.

[22:05] * geoffb doing his best to keep up with several people talking to me at once

[22:05] <nothingmuch> since there is no iterator to skip - just redo the loop, but with the conditional

[22:05] <geoffb> yay, others have gone AFK, now back to trying to grok the code

[22:06] <nothingmuch> heh

[22:10] <nothingmuch> okay, i think i've got it

[22:10] <nothingmuch> i just have to remove a bajillion traces

[22:10] <nothingmuch> i was debugging MMD =(

[22:14] <geoffb> Oy.

[22:15] <geoffb> Either A) I'm not ready for this, or B) the different looping constructs have arbitrary differences that needn't be there, or C) both.

[22:15] <geoffb> Right now I'm leaning towards A or C.

[22:15] <nothingmuch> hmm

[22:15] <nothingmuch> actually the loop application code is pretty tight

[22:16] <nothingmuch> for, loop and while are very different =)

[22:16] <geoffb> Well, for example -- what is the diff. between genSymCC and genSymPrim?

[22:16] <nothingmuch> genSymPrim takes a function, and makes a Prim out of it, and creates a symbol around that (a sub)

[22:16] <nothingmuch> genSymCC does - i dunno

[22:16] <nothingmuch> let's see?

[22:17] <geoffb> I mean, my auto-acronym-expander thinks CC is "caller continuation", but  . . .

[22:17] <geoffb> OK

[22:17] <nothingmuch> hmm

[22:17] <nothingmuch> yeah, i think I see

[22:21] <nothingmuch> aha!

[22:21] <nothingmuch> enterWhile is in Monads.hs

[22:21] <nothingmuch> it defines next

[22:21] <nothingmuch> and last

[22:22] <nothingmuch> hmm.

[22:23] <pasteling> "nothingmuch" at 212.143.91.217 pasted "some traces of geoffb's while bug" (8 lines, 168B) at http://sial.org/pbot/11694

[22:24] <nothingmuch> there's our bug

[22:24] <nothingmuch> after next is invoked

[22:24] <nothingmuch> the execution continues

[22:24] <nothingmuch> in fact, next recurses into the while loop

[22:24] <nothingmuch> let's try to make it worse:

[22:25] <pasteling> "nothingmuch" at 212.143.91.217 pasted "just like I pictured it" (10 lines, 217B) at http://sial.org/pbot/11695

[22:25] <nothingmuch> =D

[22:25] <geoffb> yep, there you go.

[22:26] <geoffb> What do you do to get those traces?

[22:26] <geoffb> Or did you just instrument the code?

[22:26] <pasteling> "nothingmuch" at 212.143.91.217 pasted "code with traces" (12 lines, 593B) at http://sial.org/pbot/11696

[22:27] <nothingmuch> okay, we want to implement next with genSymCC

[22:27] <nothingmuch> but with a catch - it just restarts the whole while loop sequence

[22:27] <nothingmuch> without losing the env

[22:28] <geoffb> nod

[22:28] <nothingmuch> okay, let's have a crack at it

[22:29] <geoffb> OK, let me just see if I understand here:

[22:29] <geoffb> redo needs to recurse, so that should use genSymPrim.  last and next do not, so they need genSymCC.

[22:29] <geoffb> Am I following correctly?

[22:31] <nothingmuch> actually I think redo is also broken

[22:31] <nothingmuch> it needs to abort the current block

[22:31] <nothingmuch> they are all like goto

[22:32] <geoffb> OK, granted I don't know Haskell all that well (I'm basically reading it like an Italian reading Spanish), but it looks like the redo concept is "tail-recurse the loop block"

[22:33] <nothingmuch> it is

[22:33] <nothingmuch> and next is the same

[22:33] <nothingmuch> except it tail recurses the conditional and the body

[22:33] <nothingmuch> and last is just go back to your caller

[22:33] <geoffb> nodnod

[22:35] <nothingmuch> ook, the right man for the job just left =(

[22:35] <geoffb> bleah

[22:36] <cognominal> The 'Autrijus' method does not exist in the 'inc' path!  # Autrijus manages even to mess perl5 :)

[22:36] <nothingmuch> i hope autrijus wakes up soon

[22:36] <chromatic> Is Pugs.Embed.Parrot a deprecated module?

[22:36] <nothingmuch> cognominal: ?

[22:37] <cognominal> I got this message when trhing to install PAR with GnuPG support

[22:37] <cognominal> no big deal

[22:38] <putter>  #haskell

[22:38] <nothingmuch> #haskell!

[22:39] <geoffb> OK, may have to add another channel to the tabs.  Is the proper #haskell on freenode, or some other net?

[22:39] <nothingmuch> freenode

[22:41] <putter> oops:/

[22:41] <nothingmuch> putter: have you got cont fu?

[22:42] <chromatic> Ahh, it's src/Pugs/Embed/Parrot.hsc

[22:45] <pasteling> "chromatic" at 63.105.17.30 pasted "Dump PIR Output from Embedded Parrot (maybe more valuable in codegen; still somewhat valuable)" (31 lines, 1.1K) at http://sial.org/pbot/11698

[22:51] <geoffb> OK, nm, I need a mental break, and it sounds like you've hit a wall too -- nothingmuch++ for diagnosis -- so I'm going AFK for a few.  When I get back, I will roll a virtual die and either: 1) learn more haskell, 2) write tests for this bug, 3) work around and get more Perl 6 porting done, 4) take the night off and snack on Aussie Bites.  :-)

[22:51] <nothingmuch> tests tests tests

[22:51] <nothingmuch> mui good

[22:52] <nothingmuch> i'm sort of watching tv (i'm a sucker for anthropology shows) so i'm losing concentration

[22:52] <nothingmuch> but I'll try to figure out how you can make a continuation that *isn't* caller CC

[22:52] <geoffb> .oO( Aussie Bites!  Now made from real Australians! )

[22:52] <geoffb> (y)

[22:53] <nothingmuch> reminds me of a nice calvin & hobbes

[22:53] <geoffb> There are bad C&B?

[22:53] <nothingmuch> "Mom, are hambuger's made out of people from hamburg?"

[22:53] <geoffb> :-)

[22:53] <nothingmuch> "No calvin, don't be gross"

[22:53] <nothingmuch> "it's ground beef"

[22:53] <nothingmuch> "you mean i'm eating a cow?!"

[22:53] <nothingmuch> "i don't think I can finish this"

[22:53] <geoffb> LOL

[22:53] <nothingmuch> ofcourse, in the first cell he is full of apetite

[22:54] <nothingmuch> and in the last one he looks like in one of the oatmeal scenes

[22:54] <geoffb> :-)_

[22:55] <geoffb> My dad tells me that when he saw the C&B where Calvin's on the bus imagining piloting a bomber and bombing the frack out of his school, Dad thought "Wow, I've had EXACTLY the same daydream."

[22:55] <nothingmuch> heh

[22:55] <nothingmuch> i like the dinosaur ones the best

[22:55] <geoffb> My fav have to be the snowman grotesques

[22:56] <nothingmuch> oh, they're wonderful

[22:56] <geoffb> OK, really AFK now

[22:56] <nothingmuch> ciao!

[23:17] * nothingmuch makes a wild guess

[23:20] * nothingmuch smiles

[23:21] <putter> nothingmuch: re cont fu, mediocre.  something in particular?

[23:21] <nothingmuch> &next is broken in while

[23:21] <nothingmuch> but i've improvised a fix

[23:21] <nothingmuch>         genSymPrim "&next" (const $ action >>= \res -> esc res) $ \symNext -> do

[23:21] <nothingmuch>         -- genSymPrim "&next" (const action) $ \symNext -> do

[23:21] <nothingmuch> commented is old

[23:22] <nothingmuch> it would call the next iteration of the while, complete it

[23:22] <nothingmuch> and then go back and resume the statement after the call to next

[23:22] <nothingmuch> err, prepend that with callCC $ \esc -> do

[23:27] <putter> looking...

[23:31] <nothingmuch> altering monads takes so long to recompile

[23:32] <mugwump__> yeah, they have to go through customs

[23:32] * mugwump__ hmms at his nick

[23:33] <nothingmuch> mugwump__: ?

[23:33] <nothingmuch> what customs do you speak of?

[23:33] <mugwump__> you know, security checks and getting frisked down.  make sure they're not terrorists.

[23:34] <nothingmuch> who has to go through customs?

[23:34] <mugwump__> the monads

[23:34] <nothingmuch> ah

[23:34] <nothingmuch> well, yes, no one understands them, they raise suspicion

[23:34] <mugwump__> how else can ghc be sure they have no side effects?

[23:34] <nothingmuch> arrows, OTOH, are even less understood, and they look pointy

[23:35] <putter> eeep.  three implementations of next/last/redo in two files.  lossage is to be expected.  are the semantics such that we could rip out all three and replace them with something clean?

[23:35] *** mugwump__ is now known as mugwump

[23:35] <nothingmuch> putter: no

[23:35] <putter> :(

[23:35] <nothingmuch> they are different for every type of loop

[23:36] <nothingmuch> they're pretty dense

[23:36] <nothingmuch> so I don't think it's bad

[23:36] <nothingmuch> well, supposedly yes

[23:42] <stevan> nothingmuch: *cough*

[23:42] <svnbot6> r5456, nothingmuch++ | Fix geoffb++'s next in while bug... next is now implemented with

[23:42] <svnbot6> r5456, nothingmuch++ | continuations.  redo is still needed, as are tests.

[23:42] <nothingmuch> shutup, i'm watching TY

[23:42] <nothingmuch> TV

[23:42] <stevan> the opiate of the masses

[23:42] <nothingmuch> there's a documentary on the metamorphisis of islamic states in the 20th century

[23:42] <mugwump> the drug of a nation

[23:42] <stevan> you brain will leak out your ears

[23:42] <nothingmuch> i don't know enough about that

[23:43] <nothingmuch> and i'm doing haskell at the same time

[23:43] <stevan> nothingmuch: how can you not, they are your neighbors

[23:43] <nothingmuch> stevan: they don't teach us about anybody but the jews in history

[23:43] * mugwump cues "Couch Potato" by Weird Al Yankovic

[23:43] <nothingmuch> or the people who did crap to the jews

[23:43] <stevan> and muslims are not included in that??

[23:43] <nothingmuch> well, it's only the crap they did

[23:44] * geoffb gets BAK to see nothingmuch has fixed my bug -- thanks, nothingmuch++ !

[23:44] <nothingmuch> like:

[23:44] <nothingmuch> geoffb: wait, there's more

[23:44] <nothingmuch> my $i; while ++$i < 5 {say "moose"; if (++$i == 2){ redo } else { say "no redo" };; say "Saw $i"}

[23:45] <pasteling> "nothingmuch" at 212.143.91.217 pasted "the output of that loop" (8 lines, 51B) at http://sial.org/pbot/11699

[23:45] <nothingmuch> as you can see in the nopaste, at some point there is "Say 6", which is not directly preceded by "no redo"

[23:45] <nothingmuch> which is crap

[23:45] <nothingmuch> we need callCC for redo as well

[23:45] <geoffb> nodnod

[23:45] <nothingmuch> i have no idea how this is working in the other impls

[23:46] <nothingmuch> can someone right extensive tests for redo/next under for, loop and while?

[23:46] <geoffb> Well, a grep for next earlier showed that it is very rarely used outside of its own tests.  Which are probably fairly bogus

[23:46] <nothingmuch> okay

[23:46] <nothingmuch> so let's crak on that a while

[23:46] <geoffb> (used in t/*/* I mean)

[23:47] <nothingmuch> i'll commit while next/redo with the cases we have

[23:47] <nothingmuch> and start on for

[23:47] <nothingmuch> you do loop, fair?

[23:47] <geoffb> nodnod

[23:48] <geoffb> lemme pull and build, and then I'll start on the tests while that goes

[23:48] <nothingmuch> Control.Monads is a slow build

[23:48] <geoffb> Have you committed yet?

[23:49] <putter> nothingmuch: looks plausible... vaguely... I think... ;)

[23:50] <putter> Now I can remove the "# when next; works, change this to..." line from the Prelude.pm, or perhaps I'll wait a bit.

[23:50] <nothingmuch> =)

[23:51] * putter goes off to read Sxx on redo...

[23:52] <geoffb> Whee, dinner has arrived.

[23:52] <geoffb> (better half)++

[23:52] <geoffb> AFK again

[23:56] <nothingmuch> ciao

