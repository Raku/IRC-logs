[00:01] <dduncan> I for one welcome the new metamodel integration

[00:06] <autrijus> ...and concurrency too

[00:06] * autrijus commits s17 early draft

[00:06] <autrijus> sub bomb is atomic { ... }; sub path is critical { ... };

[00:07] <eric256> lol

[00:07] <rafl_> :-)

[00:07] <autrijus> the hs runcore will get a head start

[00:07] <azuroth> I just changed the pods and kwik... is the one on pugscode.org automatically converted to html or something?

[00:08] <autrijus> as it's all from GHC.Conc ;)

[00:08] <autrijus> but liz also got uncountable numbers of Thread::* modules on CPAN to emulate this

[00:08] <autrijus> so p5 runtime shouldn't be _that_ bad either

[00:08] <autrijus> azuroth: which url?

[00:09] <azuroth> hmm. http://search.cpan.org/dist/Perl6-Pugs/lib/pugs/hack.pod  - it's linked to from pugscode's index

[00:09] <autrijus> ahh.

[00:09] <autrijus> yeah it's pod2html of the latst release

[00:09] <autrijus> so your fix will wait till 6.28.0

[00:10] <azuroth> ahh, okay

[00:10] <Khisanth> hmm how long does it usually take to compile ghc?

[00:10] <svnbot6> r7787 | autrijus++ | * S17 draft, sketch notes, with Liz

[00:10] <svnbot6> r7788 | azuroth++ | Fixed some grammaticos and wrongness in documentation

[00:11] <autrijus> Khisanth: if you insist... you can do that. on my laptop is 5hr

[00:11] <Khisanth> !

[00:12] <eric256> (grammaticos and wrongness)++ lol

[00:12] <azuroth> ;-p

[00:17] <azuroth> what are some easy TODOs? ^_^

[00:18] <autrijus> in hs space?

[00:18] <azuroth> yeah - or anything, really

[00:18] <eric256> you can help link tests to documentation ;)

[00:19] <autrijus> I'm actually going to sleep soonish -- ask the channel for ideas :)

[00:19] <autrijus> I can use help implementing both the conc and objsp stuff, but more details tomorrow :)

[00:19] <azuroth> okay, cool

[00:19] <azuroth> link tests to documentation, eh?

[00:20] <eric256> yea.  L<S12/"Heading" /regex to specific spot in paragraph/>  tests.pugscode.org

[00:21] <stevan> autrijus: I just finished reading the "Ruby in C" section of the PickAxe book,.. it was actually very helpful,... (and much cleaner than XS) 

[00:21] <autrijus> good.

[00:21] <autrijus> and it would make sense to compare to YARV arch

[00:21] <stevan> yes

[00:21] <stevan> very much so

[00:21] <autrijus> which is like, distilled version of the tree reduction semantics

[00:21] <autrijus> (ruby was tree reduct like pugs-vanilla and p5)

[00:21] <autrijus> but they are going bytecode as well

[00:22] <stevan> ah

[00:22] <stevan> bytecode is so old school though ;)

[00:22] <autrijus> ASTs are fine for semantics stuff and static analysis

[00:22] <azuroth> eric256: where can I find S12? ;-p

[00:23] <autrijus> but for minimal runtime vocab, you want something more restrictive, and stack bytecode is one of the many comparably restrictive ways to achieve that

[00:23] <eric256> either http://feather.perl6.nl/~eric256/t_index/Synopsis/ or http://dev.perl.org/perl6/doc/synopsis.html

[00:23] <autrijus> not doing that will result in runtime bloat, like our dear p5vm

[00:23] <autrijus> ;)

[00:23] <autrijus> (aka, "too many primitives")

[00:24] <stevan> autrijus: so should I rethink the P6::Objectspace::Core stuff?

[00:24] <autrijus> stevan: I thought you were going to rethink it anyway :)

[00:24] <stevan> yes, but I guess I am asking how radically I am going to rethink it :)

[00:24] <azuroth> ahh, ok. thanks

[00:24] * azuroth away

[00:24] <stevan> should I lean more towards bytecode??

[00:25] <autrijus> stevan: no, I think minimal function call API works better than bytecode

[00:25] <autrijus> since they are isomorphic

[00:25] <stevan> ok

[00:25] <autrijus> but easier to reason with

[00:25] <autrijus> sorta like the ANF<->SSA duality

[00:25] <autrijus> also, because we are not really writing VMs.

[00:25] <autrijus> it would be very much not fun if we have to write either YARV or Parrot.

[00:25] <autrijus> ;)

[00:25] <stevan> yes, at least not yet ;)

[00:25] <autrijus> nah, not going to :)

[00:26] <autrijus> we enslave^Wdominate^Wtarget VMs instead

[00:26] * stevan ponders writing in PIR again,.. then slaps himself 

[00:26] <autrijus> maybe you can invent a minimal notation for PIR

[00:26] <autrijus> but then, why not just take the JS, Pike, IO, or whatever notation

[00:27] <autrijus> (that nests functions and handles objs)

[00:27] <stevan> :)

[00:27] <autrijus> but really, the effort would amount to be the same as calling a set of p5 space core funcs

[00:27] <autrijus> so I fail to see the gain :)

[00:28] <stevan> so do you see a usefulness for anything in Core::, or should I svk rm it all ?

[00:28] * eric256 failes to see what either of you are even talking about. lol ;)

[00:28] <stevan> eric256: ObjectSpace :)

[00:28] <autrijus> eric256: it's in docs/notes/object_space.txt

[00:28] * eric256 ahhh...and rolles his eyes. ;)

[00:28] <stevan> :D

[00:29] <autrijus> stevan: the casting stuff are fine

[00:29] <autrijus> base type enumeration and coercion rules

[00:29] <autrijus> those we can't do without anyway

[00:29] <autrijus> so I don't think they need to go

[00:29] <autrijus> they are the intrinsics

[00:29] <stevan> they need to go? or stay?

[00:29] <autrijus> still makes sense Perl6::Val really

[00:29] <stevan> sorry didnt see "dont"

[00:29] <autrijus> :p

[00:29] <stevan> so maybe I just assume these things are my VM primatives then?

[00:30] <stevan> or at least thin wrappers around them

[00:30] <autrijus> sure, like the ruby "val" and "num" etc

[00:30] <stevan> yeah

[00:30] <autrijus> you don't need to reason about them at instruction/coreprim level

[00:30] <autrijus> they are just there, aye

[00:33] <autrijus> closing thoughts of the day:

[00:34] <autrijus> class Hash { method circumfix:<( )> { say 'Whee!' } }; %ENV(42);

[00:34] * autrijus waves goodnight :)

[00:34] <stevan> nite :)

[00:34] <mugwump> shouldn't that be post_circumfix?  ;)

[00:34] <autrijus> riight ;)

[00:35] <autrijus> postcircumfix

[00:39] <svnbot6> r7789 | eric256++ | Test-Catalog: Now highlights multi line tests correctly.

[00:50] <eric256> hey...i know i can use perl5 modules in perl6....supposidly...anyone know how?

[00:50] <eric256> nm. lol

[00:50] <rafl_> use perl5:Foo?

[00:51] <eric256> yea i kept trying perl5- ...didn't it used to be that?

[00:51] <rafl_> Not sure. I only know that pugs implements perl5:.

[00:54] <eric256> do you know the new 'use lib?

[00:56] <misc> eric256: use.perl.org/~clkao/journal/24897 i think ?

[00:57] <eric256> misc .... rafl had it right.. much have changed since then

[01:03] <eric256> Juerd: ping

[01:12] <r0nny_> re

[01:13] <r0nny_> rafl_: ping?

[01:13] <rafl_> r0nny_: pong

[01:13] <r0nny_> got svk now

[01:14] <r0nny_> kinda lost in the manpage - cant see, how to get a p4 repo with this

[01:17] <rafl_> mirror p4:user@host:1666://path/... DEPOTPATH

[01:18] <r0nny_> hmm

[01:32] * eric256 has to ask

[01:32] <eric256> what is p4?

[01:33] <rafl_> Some non-free RCS.

[01:44] <tewk> p4 is Perforce

[03:19] <eric256> hmmm.  zip is documented to use ; instead of , .... anyone know if that has officialy changed.  pugs supports , not ; :)

[03:21] <luqui> no, zip really does use ;

[03:21] <luqui> but pugs doesn't support it

[03:21] <luqui> so pugs uses ,

[03:21] <eric256> gotcha. ;)  why would zip want ; instead of , now that , doesn't flatten

[03:23] <luqui> probably:  zip(1,2,3;4,5,6)

[03:23] <luqui> and zip(f(); g()), so f and g can be called in list context instead of scalar context

[03:24] <eric256> ; forces list context?

[03:24] <luqui> not necessarily (actually maybe, I'm not sure)

[03:25] <eric256> the first one would be zip( (1..3), (4..6) );

[03:25] <luqui> but , definitely doesn't allow list context

[03:25] <luqui> because zip(f(), g()), if f and g were called in list context, they would have to be part of the same list

[03:25] <eric256> true. hmmm ; for something other than the end of a statment seems...weird. ;) but i guess if thats the way it is, then i'll deal. ;)

[03:25] <luqui> we use it as the "greater comma"

[03:25] <luqui> my $matrix = [1,0;0,1]

[03:25] <eric256> okay....second question. why doens't pugs support it yet?

[03:26] <luqui> nobody's written it yet?

[03:26] <luqui> and because it's not quite specced

[03:26] <luqui> or it wasn't until a week ago

[03:26] <eric256> just wondered if there was some current barrier

[03:26] <eric256> lol. gotcha.

[03:33] <stevan_> autrijus: when you backlog,.. this is kind of neat to play with http://www.atdot.net/yc/compile

[04:29] <Khisanth> heh so perl has three commas now? :)

[04:39] <dduncan> what are the three commas?

[04:39] <dduncan> and don't say '=>' because that isn't a comma

[05:48] <pantie1> bouncey bouncey?

[05:48] <pantie1> http://www.livejournal.com/users/clavice_beato/

[05:49] <pantie1> clavice and I are space amigos

[05:50] <pantie1> will you be our space amigos?

[05:50] <Khisanth> ?eval package Foo;

[05:50] <evalbot_7789> undef 

[05:51] <Khisanth> ?eval package Foo; sub foo { say "foo" } package Main; Foo::foo;

[05:51] <evalbot_7789> foo bool::true 

[05:52] <pantie1> fool, bool true!

[05:52] <pantie1> mr T says...

[05:53] <Khisanth> ?eval package Foo; sub foo { say caller().package } package Main; Foo::foo;

[05:53] <evalbot_7789> Main bool::true 

[05:53] <Khisanth> ?eval $?PUGS_VERSION

[05:53] <evalbot_7789> \"Perl6 User\'s Golfing System, version 6.2.10, October 10, 2005 (r7789)" 

[05:54] <pantie1> ?eval $?OS

[05:54] <evalbot_7789> \"linux" 

[05:54] <pantie1> ?eval $*OS

[05:54] <evalbot_7789> \undef 

[06:03] <dduncan> who is this joker?

[06:19] <geoffb> good morning, nothingmuch 

[06:23] <geoffb> ... and goodnight, all

[06:45] <nothingmuch> hhi ho geoffb 

[06:45] <nothingmuch> sleep tight

[08:22] <xinming> ?eval exit

[08:22] <evalbot_7789> Error: No compatible subroutine found: "&exit" 

[08:22] <xinming> :-P

[08:31] <xinming> iblechbot: ping

[10:39] <wolverian> ?eval ("a".."c").end

[10:39] <evalbot_7789> 2 

[10:40] <liz6> ?eval ('a'..'c').end

[10:40] <evalbot_7789> 2 

[10:41] <ods15> ?eval 'a'..'c'

[10:41] <wolverian> (just checking if it really was .end and not .last or something)

[10:41] <evalbot_7789> ("a", "b", "c") 

[10:41] <ods15> ?eval 'a'..'aa'

[10:41] <evalbot_7789> ("a",) 

[10:41] <ods15> ?eval 'a'..'aaa'

[10:41] <evalbot_7789> ("a",) 

[10:41] <ods15> heh

[10:41] <ods15> ?eval 'aa'..'ba'

[10:41] <evalbot_7789> ("aa", "ab", "ac", "ad", "ae", "af", "ag", "ah", "ai", "aj", "ak", "al", "am", "an", "ao", "ap", "aq", "ar", "as", "at", "au", "av", "aw", "ax", "ay", "az", "ba") 

[10:41] <ods15> ?eval 'a1'..'b1'

[10:41] <evalbot_7789> ("a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "b0", "b1") 

[10:42] <ods15> ?eval '01'..'10'

[10:42] <evalbot_7789> ("01", "02", "03", "04", "05", "06", "07", "08", "09", "10") 

[10:42] <ods15> ?eval '1'..'10'

[10:42] <evalbot_7789> ("1",) 

[10:42] <ods15> cool...

[10:42] <ods15> bye

[10:43] <wilx> Omg, does Perl6 read minds? :)

[10:43] <wolverian> yes.

[10:44] <liz6> ?eval 1..10

[10:44] <evalbot_7789> (1, 2, 3, 4, 5, 6, 7, 8, 9, 10) 

[10:44] <liz6> ?eval 1.."10"

[10:44] <evalbot_7789> (1, 2, 3, 4, 5, 6, 7, 8, 9, 10) 

[10:44] <liz6> ?eval "1"..10

[10:44] <evalbot_7789> ("1",) 

[10:45] <wolverian> that's a bug. :)

[10:46] <wolverian> hmm. perhaps $obj.sleep( until => "readable" ); # random thought while reading S17 draft

[10:47] <liz6> keeping Damians PBP in mind, maybe:

[10:48] <liz6> $obj.sleep( while => "not_readable" );

[10:49] <wolverian> hmm.

[10:49] <wolverian> $obj.sleep_until: { $obj.readable }; # flexible?

[10:51] <wolverian> er, although that's just the same as '1 until $obj.readable' which is pretty horrid 

[10:51] <liz6> it's the until

[10:51] <liz6> that seems to be hard on people's minds

[10:51] <liz6> and therefor not recommended in Perl Best Practices...

[10:52] <wolverian> right. I haven't read PBP yet, actually :)

[10:53] <liz6> recommended...

[10:53] <dduncan> I've read it cover to cover ... highly recommended

[10:54] <wolverian> I'll try to get my hands on it.

[10:54] <azuroth> evening

[10:54] <dduncan> I find it the second most useful perl book of them all, with 'programming perl' being the first

[10:55] <dduncan> at least at my current stage of experience

[10:55] <azuroth> what book is this?

[10:55] <dduncan> perl best practices

[10:56] <kgftr|konobi> pbp++ # lots of useful stuff in there, such as indirect method calls being very very bad!

[10:56] <dduncan> of course, people in other situations will likely find different books more useful ... such as Peter Scott's on dealing with other people's horrid code

[10:57] <dduncan> or the 'learning' ones

[10:57] <dduncan> or the domain specific ones

[10:57] <dduncan> but the classic camel and pbp are my own personal most useful atm

[10:59] <broquaint> PBP = Sensibility distilled.

[10:59] <dduncan> indeed ... quite likely to become a defacto standard methinks

[10:59] <dduncan> at least I'm contributing to that status

[11:00] <dduncan> as all my new cpan work is or will be mostly conformant

[11:00] <azuroth> I'll have to read it ...

[11:01] <metaperl> has anyone convinced Larry to allow /*   */ as a multi-line comment for p6?

[11:01] <wolverian> I hate ->get/set accessors. (Class::Std.) 

[11:01] <dduncan> don't know

[11:02] <wolverian> metaperl, not yet. :)

[11:02] <dduncan> I like get/set accessors

[11:02] <wolverian> I like lvalue accessors/mutators.

[11:02] <wolverian> (albeit they suck in perl5.)

[11:02] <dduncan> I never used them in my life

[11:03] <wolverian> it's the way of the future! :) (C# and Perl6 both use them.)

[11:03] <liz6> lvalue accessors are not recommended in PBP

[11:03] <wolverian> liz6, I know. I understand it's not because of any inherent fault in them, but in the implementation of them in perl5, though.

[11:03] <wolverian> I might be wrong, since I haven't read PBP.

[11:03] <dduncan> they're fine if the values in question can contain any value at all and no error checking is necessary

[11:04] <wolverian> dduncan, why? you can easily add type checking.

[11:04] <wolverian> dduncan, see, for an example, Attribute::Property on CPAN.

[11:04] <broquaint> I think the idea behind not having multi-line comments, metaperl, is that if your comment is taking up multiple lines then it should be in the documentation, hence =pod/=cutthe best way to facilitate multi-line comments.

[11:04] <dduncan> oh yes, you mean in perl 6

[11:04] <wolverian> dduncan, I mean in both perl5 and perl6.

[11:04] <metaperl> broquaint: i see

[11:04] <broquaint> That's just my theory, mind you.

[11:04] <dduncan> but in that case, you haven't actually got a bare lvalue accessor, as it is wrapped in an object

[11:05] <wolverian> dduncan, a closure. :)

[11:05] <dduncan> maybe its just the syntax you like?

[11:05] <wolverian> of course it's just the syntax. they are exactly equivalent in other ways to get/set

[11:06] <liz6> wolverian: you're right

[11:06] <broquaint> Not quite, wolverian, as in lvalue you're just boshing a value into a attribute but in the accessor method style you've got paramters and arguments and binding and so forth.

[11:07] <wolverian> broquaint, true, but if it's that complex it shouldn't be an accessor/mutator anymore, but a generic method.

[11:07] <dduncan> and there's the error checking thing thats different with vanilla perl 5

[11:07] <wolverian> dduncan, yes. 

[11:07] <dduncan> and that's mainly what pbp was against

[11:08] <broquaint> Fair enough, wolverian.

[11:08] <wolverian> dduncan, that's certainly understandable.

[11:08] <wolverian> dduncan, but CPAN is there for us to use. :)

[11:08] <broquaint> But, to be fair, PBP is a sensible approach to programming in perl, and programming in perl isn't always sensible :)

[11:09] <dduncan> of course, pbp's ground rule is to get people to do things by choice, rather than by habit

[11:09] <wolverian> always following the rules is not -Ofun :)

[11:09] <broquaint> Or should I say the programming with perl isn't always sensible.

[11:09] <dduncan> if you have an explicit reason to do something against its recommendations, that's still going with its intent

[11:09] <dduncan> and using a cpan module to add whatever is such a conscious choice

[11:10] <liz6> indeed

[11:13] <dduncan> good night, past 3am here and all ...

[11:13] <metaperl> good night D

[11:14] <liz6> nightynight... just after noon here...  ;-)

[11:33] <xinming> 19:33 here.

[11:33] <liz6> isn't this great: a truly global effort!

[11:34] <xinming> but too few commits. :/

[12:09] <Juerd> IRC pings are so annoying, and such a waste of time.

[12:10] <Juerd> Why do people insist on "$nick: ping", waitfor(pong), "$nick: $question" instead of just beginning with "$nick: $question"?

[12:10] <Juerd> 02:08 < eric256> Juerd: ping

[12:10] <Juerd> But he is offline now.

[12:11] <Juerd> If he had asked a question, I'd be able to email him an answer.

[12:11] <webmind> because someone wants a more direct conversation ?

[12:11] * Juerd assumes he wanted to ask something, not socialize.

[12:11] <webmind> could be impatience

[12:12] <Juerd> afk

[12:33] <integral> but then there's the people who ask a question, and then ping all the people who answered them last time ...

[13:06] <broquaint> ?eval my $_ = "say q/things/;" eval

[13:06] <evalbot_7789> Error:  unexpected "e" expecting operator, ";" or end of input 

[13:06] <broquaint> ?eval my $_ = "say q/things/;"; eval

[13:06] <evalbot_7789> undef 

[13:06] <broquaint> ?eval my $_ = "q/things/;"; eval

[13:06] <evalbot_7789> undef 

[13:07] <broquaint> ?eval $?PUGS_VERSION

[13:07] <evalbot_7789> \"Perl6 User\'s Golfing System, version 6.2.10, October 10, 2005 (r7789)" 

[13:07] <broquaint> Hrm.

[13:41] <svnbot6> r7790 | autrijus++ | * S17: Incoporate suggestion from Austin Frank; s/wait/join/; timer; continuation

[14:05] <svnbot6> r7791 | autrijus++ | * "is throttled" trait

[14:15] <Limbic_Region> salutations liz6 

[14:16] <liz6> hi L~R!

[14:18] * Juerd wonders if liz6, like perl6, was designed from scratch

[14:18] <Juerd> And if she's implemented with Haskell :)

[14:19] <liz6> I'm implemented with Freckles, actually...

[14:19] <Juerd> Is that turing complete? :)

[14:20] <liz6> Probably not...

[14:20] <Limbic_Region> liz6 how is working with autrijus?

[14:20] <liz6> I always feel like I'm slowing down Autrijus...

[14:20] <liz6> but sometimes that's a good thing...

[14:20] * Juerd can imagine

[14:20] <Juerd> He's incredibly fast :)

[14:21] <liz6> even faster than you, Juerd...  ;-)

[14:21] <Juerd> Certainly

[14:23] <autrijus> yo :)

[14:24] <Juerd> Is that like io? :)

[14:24] <autrijus> driving fast doesn't matter much if you don't know where to go

[14:24] <autrijus> and liz6 always know where to go, on S17 :)

[14:24] <Limbic_Region> isn't S17 supposed to cover things like coroutines as well?

[14:24] <autrijus> Limbic_Region: yes.

[14:24] <autrijus> and we'll get there

[14:24] <Limbic_Region> good

[14:24] <Juerd> Nice metaphor

[14:25] <autrijus> which is also why we're using Concurrency instead of Threading

[14:25] <autrijus> as the synopsis name

[14:25] <autrijus> because coros are just not very threaded

[14:25] <Limbic_Region> right - coros are fancy continuations

[14:26] <autrijus> if by "fancy" you mean "supressed and maimed", yes

[14:26] <liz6> ;-)

[14:26] <Limbic_Region> hmmm - no, that's not what I meant

[14:26] <Limbic_Region> continuations only work from 1 point right?

[14:26] <Limbic_Region> while a coroutine can continue and then stop again 

[14:26] <Limbic_Region> ?

[14:27] <autrijus> er no, continuations are the most general of all

[14:27] <autrijus> in coro you can only yield into your caller's continuation

[14:27] <autrijus> while if you have first class continuation, you can invoke from anywhere to anywhere with anything

[14:27] <Limbic_Region> ok, but you can yield mutliple times in multiple places

[14:28] <autrijus> sure, so if you have cont, you can implement coro as simply passing the cont into the coro

[14:28] <autrijus> and yield would be invoking the cont, passing it as argument the cont of the coro

[14:28] <Limbic_Region> well, implementation is above my head

[14:28] <autrijus> but yeah, coro is more accessible.

[14:29] <autrijus> cont is basically goto() that takes a value and preserves call stack.

[14:29] <autrijus> very hard to use sensibly.

[14:29] <autrijus> s/preserve/restore/

[14:29] <Limbic_Region> right

[14:29] <Limbic_Region> which is why I saw coros as being more fancy

[14:29] <Limbic_Region> perhaps wrong word

[14:29] <autrijus> more "dressed up"

[14:29] <autrijus> nod

[14:30] <liz6> need to prepare for some $work, later!

[14:30] <autrijus> no, I guess "fancy" is the correct word. it's just my mind is in the direction of "the more abstract, bare and generic the thing is, the sexier it is"

[14:30] <obra> There is such a thing as too abstract and generic

[14:30] * autrijus resists a joke on naked singularities

[14:30] <autrijus> there is.

[14:30] <Limbic_Region> of course, these aren't true coros in the sense that Knuth postulated about

[14:31] <autrijus> obra: looked at the S17 we committed 5mins ago?

[14:31] <Limbic_Region> we still have a single processor simulating work in tandem

[14:31] <autrijus> it's not at all there. just things that we agree should be there

[14:33] <Limbic_Region> autrijus - out of curiosity, will you be able to use conts and coros in places where goto's aren't allowed in p5 (body of loops that require initialization for instance)?

[14:33] <obra> autrijus: I haven't looked in the last 5 minutes ;)

[14:34] <autrijus> Limbic_Region: yes, of course!

[14:34] <autrijus> that's their entire point.

[14:35] <autrijus> I'm actually thinking about removing the Stmt form in the PIL tree, as everything is really just an expression; you should be able to take continuations in middle of statement

[14:35] <autrijus> and, so to speak, goto() into middle of expression.

[14:35] <Limbic_Region> well sure, but when I first brought up the question on the list it didn't sound like there was much interest in using them to their full potential

[14:36] * obra starts to imagine using a VM hook to use continuations to do backups of long-running processes

[14:36] <obra> or to do realtime loadbalancing at the process level.

[14:36] <autrijus> right.

[14:37] <obra> That way you can move one runaway process to each CPU and take down EVERYTHING ;)

[14:37] * autrijus praises squeak for demonstrating the viability

[14:37] <autrijus> yeah, mobile code, etc

[14:37] <obra> you beat my fingers by 10 sec

[14:37] <autrijus> Limbic_Region: it takes education :)

[14:38] <Limbic_Region> autrijus - good, I haven't lost faith yet ;-)  The other question I asked in that thread were the same questions Dan highlighted in http://www.sidhe.org/~dan/blog/archives/000178.html

[14:38] <Limbic_Region> there seemed to be a lot of disagreement amongst @larry at the time

[14:39] <autrijus> yeah, but in 2.5 yrs, things changed

[14:39] <Limbic_Region> IIRC, between Luke and Damian

[14:39] <Limbic_Region> that wasn't 2.5 years ago - it was this past May

[14:39] <autrijus> oh. that was between lazy gather vs explicit coro

[14:39] <autrijus> I think we need both ;)

[14:40] <Limbic_Region> well that too

[14:40] <Limbic_Region> but still not what I was talking about

[14:40] <autrijus> *puzzled*

[14:40] <Limbic_Region> parameters 

[14:40] * Limbic_Region tried to stuff too much into a single post I think

[14:42] <Limbic_Region> perlbot nopaste

[14:42] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[14:42] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "Parameters and Coroutines" (10 lines, 165B) at http://sial.org/pbot/14024

[14:43] <Limbic_Region> autrijus - I was talking about the behavior we would choose for that link

[14:43] <Limbic_Region> there is more than 1 way to do it

[14:43] <autrijus> yeah.

[14:43] <PerlJam> Limbic_Region: and how would you do it?

[14:44] <autrijus> coro foo ($a) { yield $a; yield $a+1; yield $a+2 }; (foo(1), foo(2), foo(1), foo(2))

[14:44] <autrijus> ?eval coro foo ($a) { yield $a; yield $a+1; yield $a+2 }; (foo(1), foo(2), foo(1), foo(2))

[14:44] <evalbot_7791> (1, 2, 3, 1) 

[14:44] <Limbic_Region> PerlJam - I indicated we should try to emulate whatever is closest to other languages that natively support coroutines

[14:45] <PerlJam> autrijus: the $a doesn't get rebound?

[14:45] <autrijus> PerlJam: it does only at full reentrance

[14:45] <Limbic_Region> the concept was pretty foreign to me before I started reading about continuations and coroutines - I saw the potential, asked about it as well as semantics for parameters - and saw the thread go blammo

[14:46] <autrijus> I think that's what iblech is having at js too, not very sure

[14:46] <PerlJam> autrijus: then what's the point of passing a parameter the 2nd and 3rd time?

[14:47] <autrijus> PerlJam: there's no point... I guess you can raise a warning?

[14:47] <leo> autrijus: it does only at full reentrance -> (1, 2, 3, 2) ?

[14:47] <Limbic_Region> autrijus - there may be a point

[14:47] <autrijus> leo: first one is +0

[14:47] <Limbic_Region> depends on perspective

[14:47] <autrijus> oh wait

[14:47] <autrijus> should be 2 then.

[14:47] * autrijus ponders what's what's going on

[14:47] <Limbic_Region> when Knuth first proposed the concept of coroutines - it was intended to be two processes working in parallel (but in implementation we only emulate them)

[14:48] <PerlJam> autrijus: I bet the first yield is "skipped"

[14:48] <PerlJam> (not on the first invocation obviously)

[14:48] <autrijus> ?eval coro foo ($a) { yield $a; yield $a+1; yield $a+2 }; (foo(1), foo(2), foo(1), foo(2), foo(2), foo(2))

[14:48] <evalbot_7791> (1, 2, 3, 1, 2, 3) 

[14:48] <Limbic_Region> adding a second or third parameter each time it is invoked could be thought of as giving new information to the parallel running process

[14:48] <autrijus> ?eval coro foo ($a) { yield $a; yield $a+1; yield $a+2 }; (foo(1), foo(2), foo(1243), foo(9), foo(2), foo(2))

[14:48] <evalbot_7791> (1, 2, 3, 1, 2, 3) 

[14:48] <autrijus> PerlJam: it's never rebound.

[14:48] <PerlJam> oh, hmm.

[14:48] <autrijus> very bad implementation, it seems.

[14:48] <PerlJam> indeed :)

[14:48] <autrijus> blame... autrijus I guess. iblech does it differently

[14:48] <autrijus> you'd get 1,2,3,9,10,11 I think

[14:49] <Limbic_Region> autrijus - did the commentary I just added make sense?

[14:49] <autrijus> but that's why we have them at t/unspecced/

[14:49] <autrijus> Limbic_Region: sure, it will amount to rebinding them

[14:49] <Limbic_Region> but is that the right thing

[14:49] <Limbic_Region> that's the point, it can be argued both ways

[14:49] <Limbic_Region> since we don't really have parallel processes - we are only emulating them

[14:50] <PerlJam> personally, I think the args should be rebound.

[14:51] <Limbic_Region> PerlJam - but what if it is invoked the second time with no args

[14:51] <Limbic_Region> should the previous state stay put - should an exception be thrown

[14:51] <Limbic_Region> principal of least surprise is going to be hard to avoid here

[14:51] <Limbic_Region> s/avoid/meet/

[14:54] <PerlJam> Limbic_Region: the sub takes an arg, so if one isn't given it's an error

[14:54] <PerlJam> the sub takes a non-optional arg I mean

[14:56] <Limbic_Region> PerlJam - that's one way to look at it

[14:57] <Limbic_Region> the other way to look at it is that it was only called once and was paused

[14:57] <Limbic_Region> when it was resumed it should remember how it was called

[14:57] <Limbic_Region> IOW - a coro and a sub are different beasts

[14:57] <Limbic_Region> hmm

[14:58] <Limbic_Region> lag

[14:59] <Khisanth> ah ha!

[14:59] <Khisanth> gaal: make works, make unoptimized doesn't, in fact just make uses a lot less memory too!

[14:59] <Limbic_Region> minus the !, nice palindrome ;-)

[15:23] <svnbot6> r7792 | iblech++ | Per r6376 of S06: Changed ?$var to $var? and +$var to $var!. Also you can write

[15:23] <svnbot6> r7792 | iblech++ | "$var = 42" instead of "?$var = 42"/"$var? = 42" now.

[15:23] <svnbot6> r7792 | iblech++ | * examples, t, ext, docs, perl5, src/perl6:

[15:23] <svnbot6> r7792 | iblech++ |   Changed (hopefully) all occurances of ?$var and +$var to conform the new S06.

[15:23] <svnbot6> r7792 | iblech++ |   Note that I did *not* update perl5/Perl6-Value, as Perl6-Value includes an

[15:23] <svnbot6> r7792 | iblech++ |   own small parser.

[15:23] <svnbot6> r7792 | iblech++ | * Pugs.AST.Internals: Updated the code to determine whether a param is slurpy,

[15:23] <svnbot6> r7792 | iblech++ |   to accommodate to the Pugs.Parser change.

[15:23] <svnbot6> r7792 | iblech++ | * Pugs.Parser: Updated the parsing of the pre- and post-sigils.

[15:23] <svnbot6> r7792 | iblech++ |      $var    # really:  $var! (which is same as  $var is required)

[15:23] <svnbot6> r7792 | iblech++ |      $var?   # really:  $var? (which is same as  $var is optional)

[15:23] <svnbot6> r7792 | iblech++ |     :$var    # really: :$var? (which is same as :$var is optional)

[15:23] <svnbot6> r7792 | iblech++ |     :$var!   # really: :$var! (which is same as :$var is required)

[15:23] <svnbot6> r7792 | iblech++ |   You cannot mix slurpy with named any longer, i.e.

[15:23] <svnbot6> r7792 | iblech++ |     :*@args  # is illegal now

[15:23] <svnbot6> r7792 | iblech++ |   (Note that the named-ness of *@slurpy_args was ignored (see

[15:23] <svnbot6> r7792 | iblech++ |   http://www.nntp.perl.org/group/perl.perl6.language/22883); now it's

[15:23] <svnbot6> r7792 | iblech++ |   additionally a parse error).

[15:23] <svnbot6> r7793 | iblech++ | util/catalog_tmpl/code.tmpl: Removed the unintended indent of the first line of a test.

[15:24] * Khisanth hopes someone cleans up the sigil mess at some point

[15:32] <Khisanth> ?eval my @foo=1..4;

[15:32] <evalbot_7791> *** No compatible subroutine found: "&eval"     at -e line 11, column 7-39 

[15:32] <Khisanth> O_O

[17:17] *** Lopo_ is now known as Lopo

[17:28] <Khisanth> ?eval my @foo=1..4; @foo.splice( 1, 1 );

[17:28] <evalbot_7793> 2 

[17:30] <liz6> ?eval my @foo=1..4; @foo.splice( 1, -1 );

[17:30] <evalbot_7793> 3 

[17:31] <liz6> ?eval my @foo=1..4; @foo.splice( -1, 1 );

[17:31] <evalbot_7793> 4 

[17:31] <liz6> ?eval my @foo=1..4; @foo.splice( 1, -2 );

[17:31] <evalbot_7793> 2 

[17:31] <r0nny> re

[17:33] <autrijus> yo

[17:53] <svnbot6> r7794 | stevan++ | Perl6-ObjectSpace -> just following a train of thought with the older code, I need to finish this idea a little more to explore where to go next

[18:04] <geoffb> *yawn* *smack smack*

[18:07] <obra> seen leo

[18:07] <jabbot> obra: leo was seen 3 hours 20 minutes 30 seconds ago

[18:19] <Limbic_Region> am I the only one noticing the case conflict with perl5\Perl6-ObjectSpace\lib\Perl6\MetaModel\Opaque.pm and perl5\Perl6-ObjectSpace\lib\Perl6\MetaModel\opaque.pm

[18:19] * Limbic_Region can't do a svn up

[18:20] <autrijus> Limbic_Region: you are on a case-insensitive, case-uncaring, case-cruel filesystem

[18:20] <geoffb> "case-cruel"  :-)

[18:20] <autrijus> Limbic_Region: so, I'm afraid you have to rm -rf that MetaModel tree and then svn up

[18:21] <autrijus> (or switch to SVK, which a certain autrijus made sure it won't croak)

[18:21] <Limbic_Region> autrijus - I deleted the file in question

[18:21] <Limbic_Region> it restored it and then b1tched

[18:23] <gaal> i like "incasative"

[18:23] <geoffb> autrijus, stevan__, re: the Object Space stuff: are these additional bits of PIL, or layered on top of it?

[18:23] <autrijus> geoffb: they are distinct layers

[18:23] <autrijus> PIL is the AST; they are the "flow" part in PyPy literature

[18:23] <autrijus> Limbic_Region: hmmm

[18:23] <geoffb> OK, so does that mean that implementing the semantics PIL will be enough to have a working backend?

[18:24] * Limbic_Region is wiping out the entire MetaModel directory just in case

[18:24] <geoffb> s/semantics/semantics of/

[18:24] <autrijus> geoffb: the ObjSpace is the "semantics" behind method calls in PIL

[18:24] <autrijus> so unless you want to have different intrinsic objects and different dispatch rules, ObjSpace is probably also part of runtime req

[18:24] <Limbic_Region> even worse now autrijus

[18:25] <gaal> _The Art of_ arrived today

[18:25] <geoffb> Hmmm.  So basically Ob Space is a "zoom in" on one part of PIL, the method call

[18:25] <geoffb> ?

[18:25] <Limbic_Region> svn: Can't open file 'perl5\Perl6-ObjectSpace\lib\Perl6\MetaModel\.svn\tmp\text-base\Opaque.pm.svn-base': The system can not find the specified file

[18:25] <geoffb> gaal, what is that?

[18:25] <geoffb> (I'm guessing a book, but what about?)

[18:25] <gaal> TaPL up next

[18:26] <gaal> geoffb: ..._The Metaobject Protocol_

[18:26] <geoffb> gaal, ah

[18:26] <gaal> if i read it i'll finally have a chance to understand what Stevan's all up about :)

[18:26] <geoffb> As a title by itself, I was thing "The Art of" was pretty damn wide for a subject 

[18:26] <geoffb> heh

[18:27] <geoffb> So autrijus, sorry if I'm being obtuse.  I'm thinking about it from the point of view of (maybe, someday) creating an additional backend -- what is the absolute minimum set of things I must supply to have it work completely, even if it's dog slow?

[18:28] <geoffb> Right now, it sounds like PIL + Ob Space + a certain set of primitive types and containers

[18:28] <gaal> I want to write a "What the heck is" list of *questions* for stevan & co about OO in Perl 6 (first from a user perspective) but need tuits

[18:28] <autrijus> geoffb: ok. to create a backend you need to write a codegen

[18:28] <autrijus> that takes pil and generates some sort of code in your runtime env

[18:28] <geoffb> Tuits being sadly in shorter supply than oil . . . .

[18:29] <Limbic_Region> autrijus - even after doing an svn cleanup - it still won't do a proper svn up

[18:29] <autrijus> and then that "sort of code" needs to manipulate the p6 objects

[18:29] <autrijus> so you need to port the metamodel on top of your language's runtime

[18:29] <autrijus> prior to objspace, porting metamodel is very hard

[18:29] <autrijus> now you just have to implement the intrinsic types

[18:30] * Limbic_Region suspects anyone on Windows using svn is going to have the same problems

[18:30] <autrijus> and the 30ish prim ops needed to support metamodel

[18:30] <autrijus> Limbic_Region: hm. seek help in #svn or so? worst case we move stuff into diff. dirs

[18:31] * Limbic_Region can't join #svn as he only has access to #perl6 through Feather's CGI:IRC

[18:31] <autrijus> ahh.

[18:31] <Limbic_Region> no worries

[18:31] <Limbic_Region> I will work on it tonight if I get a chance

[18:31] <Limbic_Region> from home

[18:31] <Limbic_Region> err scratch that

[18:32] <geoffb> autrijus, OK, so to summarize, I need: PIL->backend codegen, PIL primitives, intrisic type implementations, MM primitives.  And then it will Just Work.  Yes?

[18:32] <Limbic_Region> tonight's Halloween

[18:32] <autrijus> Limbic_Region: fixing it for you

[18:32] * Limbic_Region hugs autrijus

[18:32] <autrijus> geoffb: yes.

[18:32] <autrijus> visio would help

[18:32] <autrijus> <- but in irc.perl.org #parrotsketch meeting

[18:33] <Limbic_Region> oh, well then /me shuts up

[18:33] <geoffb> autrijus, good then.  And yes, diagram would be good in the future, but I understand what I need to right now.  Good luck in mtg.

[18:33] <svnbot6> r7795 | autrijus++ | * Move MetaMode/* to MM/* in P6-OS because Win32 SVN

[18:33] <svnbot6> r7795 | autrijus++ |   doesn't like case changes.

[18:33] <autrijus> Limbic_Region: svn up and try again?

[18:33] <geoffb> & # brunch

[18:38] *** stevan__ is now known as stevan

[18:38] <stevan> gaal: excellent book, I am sure you will enjoy it :)

[18:38] <Limbic_Region> autrijus - likely will have to delete directory, svn cleanup, svn up - but yeah ok

[18:38] <autrijus> cool

[18:38] <stevan> The Art of MOP that is

[18:39] <stevan> hey autrijus :)

[18:40] <Limbic_Region> for those of you keeping track at home - the p6 related questions at the Monastery have waned substantially in the last couple of months

[18:41] <autrijus> hey stevan :)

[18:41] <Limbic_Region> autrijus - no luck

[18:41] <autrijus> Limbic_Region: just wait till 6.28.0 and p5objspace :)

[18:41] <autrijus> Limbic_Region: mm, what errors you got?

[18:41] <Limbic_Region> perlbot nopaste

[18:41] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[18:42] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "svn on Windows b0rk" (31 lines, 1.6K) at http://sial.org/pbot/14032

[18:42] <autrijus> Limbic_Region: try this

[18:42] <autrijus> svn up *

[18:42] <autrijus> svn up

[18:43] <autrijus> oh hm, I bet I know why

[18:43] <autrijus> a sec

[18:43] <Limbic_Region> ?eval sleep 1; say 'now'

[18:43] <evalbot_7795> Error: No compatible subroutine found: "&sleep" 

[18:43] <Limbic_Region> *shrug* - so much for the joke

[18:44] <autrijus> Limbic_Region: try again

[18:47] <Limbic_Region> autrijus - same error

[18:47] <Limbic_Region> same place

[18:49] <autrijus> again?

[18:50] <Limbic_Region> yep

[18:50] <svnbot6> r7796 | autrijus++ | * add MM back

[18:50] <svnbot6> r7797 | autrijus++ | try again

[18:50] * Limbic_Region tries again just to be sure

[18:52] <Limbic_Region> autrijus worked

[18:53] * Limbic_Region hugs autrijus

[18:53] <autrijus> :)

[18:57] <geoffb> fg

[18:59] <autrijus> mm, var regs hits parrot trunk; shift/reduce parser works on PGE itself

[18:59] <Khisanth> variable registers?

[18:59] <autrijus> chip has finally got some coherent picture of lex pad design -- once it's coded, parrot could really rock

[18:59] <autrijus> Khisanth: instead of I0..I31 and use a slow register alligator that eats continuations

[19:00] <autrijus> parrot register frame size can now vary from call frame to call frame

[19:00] <geoffb> Is it The Plan that P6 arrays will be efficient about sparseness?  In particular, small runs of adjacent filled entries, with large gaps of nothing?

[19:00] <Khisanth> register alligator ...

[19:00] <autrijus> geoffb: yes, I think so, esp. if you take ranges into account

[19:00] * Khisanth makes funny faces at autrijus

[19:00] <autrijus> er allocator. but since I was in leo's place I've always called it alligator

[19:00] <autrijus> geoffb: also I wonder if we should look into Judy for Hash

[19:01] <geoffb> autrijus, nodnod.  Prolly a good idea, if it's the same one I recall from a couple years ago (very cache-friendly multi-level keyed trees)

[19:02] <autrijus> yes yes.

[19:02] <autrijus> self adapting and all that

[19:02] <geoffb> autrijus, of course, doesn't that depend on being pretty bare metal with unboxed bytes and ints?

[19:03] * PerlJam etches his ints into silicon

[19:03] <geoffb> (In other words, losing a lot of efficiency if your unboxed byte operators are not as fast as C's?)

[19:03] <autrijus> geoffb: er what? this is a hash table

[19:03] <Limbic_Region> autrijus - the variable size registers still won't help the problem of seeing every { } as a potential closure right?

[19:04] <autrijus> Limbic_Region: it will actually help, because {} as closure is now dirt cheap in parrot

[19:04] <geoffb> autrijus, I meant, implementing the Judy trees.  Or were you assuming a library that we would just use?

[19:04] <Limbic_Region> IOW - has there been a decision to force blocks explicitly as closure if desired in the p6 language when it isn't obvious

[19:04] <autrijus> once lexpad is in, capturing all pads won't be a lot of cost

[19:04] <Limbic_Region> autrijus - but it still has to do every single one right?

[19:04] <autrijus> Limbic_Region: it's compile time allocation

[19:04] <autrijus> if you don't introduce new sym in that block

[19:04] <autrijus> then there's no pain

[19:04] <Limbic_Region> *shrug* - if you say so

[19:04] <autrijus> geoffb: judy.sf.net

[19:05] <geoffb> well, all right then.  :-)

[19:05] <autrijus> Limbic_Region: if it proves to be slow we can always optimize

[19:05] <autrijus> but I'm all for deferring optimization

[19:05] <autrijus> esp. seeing functional languages all do this block-as-closure

[19:06] <autrijus> and they seem to run just fine

[19:06] <Limbic_Region> I wasn't suggest that optimizations on current stuff take precedence over becoming feature complete

[19:06] <Limbic_Region> Parrot has had enough of that headache

[19:06] <autrijus> ah. just "think about it"

[19:06] <autrijus> sure, will do

[19:07] <Limbic_Region> I was only wondering what was being done to address chip's concerns (or perhaps it was pdcawley) about having to save everything as a potential closure/continuation

[19:08] <autrijus> it was chip's concern; but CPS interp fixed that -- saving cc is now O(1) and involves no memcpy I think.

[19:09] <Limbic_Region> cool

[19:09] <Limbic_Region> what is the CPS interp fix?  I thought Parrot had always used CPS?

[19:09] <geoffb> Limbic_Region, not always.  But for a long time now, yes

[19:10] <autrijus> yes but there was problems with the lower "control" registers IIRC

[19:10] <autrijus> not at all sure now, because I learned them from leo

[19:10] <autrijus> who then, after three days, took them out

[19:10] <Limbic_Region> geoffb, right - from my perspective it had been always and certainly before chip raised this specific concern

[19:10] <autrijus> so I never remember the bad old days.

[19:10] <autrijus> chip raised the concern before that, I think

[19:10] <autrijus> but you want leo and chip for this, not me -- it's all hearsay from me

[19:11] <Limbic_Region> well - I trust that good stuff is happening

[19:11] * Limbic_Region doesn't have the current knowledge to know otherwise

[19:11] <Limbic_Region> and I certainly don't have the desire to get the knowledge to know for sure

[19:11] <autrijus> you will, once we are targetting parrot for real

[19:11] <autrijus> you can then complain certain code of yours runs slower than p5 :)

[19:11] <Limbic_Region> right - the proof is in the pudding

[19:11] <autrijus> yes.

[19:12] <Limbic_Region> It isn't that compiler/VM stuff isn't interesting - it certainly is

[19:12] <Limbic_Region> but it is something you spend years getting good at

[19:12] <Limbic_Region> and I just don't want to make that kind of an investment

[19:13] <autrijus> nodnod.

[19:16] <PerlJam> autrijus: so how long do you think before we have a parrot-based perl6 compiler (or whatever "the real" compiler looks like)?

[19:16] <autrijus> PerlJam: blocking on lexpad

[19:17] <autrijus> so chip is the better one to answer this

[19:17] <PerlJam> autrijus: I know, I just want you gut estimation.

[19:17] <PerlJam> s/you/your/

[19:17] <Limbic_Region> autrijus - so the missing exceptions and other features aren't an issue?

[19:17] <autrijus> Limbic_Region: er, exceptions actually work

[19:17] <autrijus> but no, those aren't crucial

[19:18] <autrijus> PerlJam: pugs can target parrot once lexpad is there. about ~1wk for passing an agreeable amount of t/

[19:18] <autrijus> PerlJam: the "real" compiler would require bootstrapping

[19:18] <autrijus> including porting Pugs.Rules into PGE and S/R parser

[19:18] <autrijus> and Pugs.Parser

[19:18] <autrijus> and also the rest of Compiler/CogeGen into P6

[19:18] <autrijus> I don't know about those. not priority to me.

[19:18] <Limbic_Region> hmmm - that's a scary thought to me actually

[19:18] <autrijus> priority to me is get OO, then rules, then types, working.

[19:19] <Limbic_Region> for 5 years now - Parrot has been able to be developed without a great deal of influence from the language (or rather a specific language wasn't driving the development)

[19:19] <autrijus> Tcl has been driving :D

[19:19] <PerlJam> only lately

[19:19] <Limbic_Region> and BASIC

[19:19] <autrijus> yeah.

[19:19] <Limbic_Region> and Python

[19:19] <autrijus> python for a while

[19:19] <Limbic_Region> off and on anyway

[19:19] <autrijus> but negatively, in some areas

[19:19] <PerlJam> BASIC early, then python for a while and now tcl.

[19:20] <PerlJam> One day perl6 will be driving  ;)

[19:20] <autrijus> pugs has been driving ever since Vienna :)

[19:20] <autrijus> I made a list of parrotIsBrokenXXX in Pugs.Compile.Parrot and chip/leo has really placed them as top priority

[19:21] <PerlJam> cool

[19:21] <autrijus> which is why as of today it's only lexpad was blocking -- it was six or seven things

[19:21] <Limbic_Region> that's good

[19:21] <Limbic_Region> what will also be good is targetted optimizations

[19:21] <Limbic_Region> no offense to leo or anyone else providing optimizations to Parrot

[19:21] <PerlJam> I really wish I knew more about parsers/compilers/etc.  Right now I'm in the camp of "I know recursivce descent is slow, but I can write one of those"  :-)

[19:21] <Limbic_Region> but there really haven't been any real world applications to base them off

[19:22] <Limbic_Region> Pugs brings lots and lots of examples and tests to the table

[19:23] <autrijus> but nothing "production" before we hit 6.28.0 (which is why it's top priority for me)

[19:23] <Limbic_Region> PerlJam - if it were a noop to suddenly be instilled with lots and lots of parser/compiler/etc knowledge - me too ;-)

[19:23] <autrijus> I still think p5vm targetting will bring a lot of _more_ code into table

[19:23] <Limbic_Region> autrijus - matter of perspective

[19:23] <autrijus> in this case CPAN code

[19:23] <Limbic_Region> right

[19:23] <sili> i say we code for maintainability and flexibility and just wait for hardware to catch up. it should do well with the expected release date of p6

[19:23] <Limbic_Region> heh

[19:24] <autrijus> sili: except that CPUs are not getting faster.

[19:24] <autrijus> which is why S17 (concurrency) is also a priority ;)

[19:24] <sili> they are too getting faster

[19:24] <geoffb> sadly, autrijus is right.  (And a good wording for today's blog, thanks autrijus )

[19:24] <sili> someone at intel is working on it right... now.

[19:24] <autrijus> geoffb: :)

[19:24] <autrijus> sili: er, intel is working on dual/quad/whatever cores instead

[19:25] <sili> could be amd then.

[19:25] <geoffb> It's actually last week's, but between $work, @family, and &sickness, it's happening today instead.

[19:25] <sili> or sun/ibm/etc

[19:25] <autrijus> actually... amd is doing the same

[19:25] <Limbic_Region> backplane speed is more of a concern to me then CPU

[19:25] <autrijus> clocking CPU upwards is probably not going to happen at the same rate as before.

[19:25] <geoffb> sili, most processor companies right now are focused on making parallelism suck less.

[19:26] <autrijus> geoffb: woot

[19:26] <sili> heh.

[19:26] <Limbic_Region> CPU speed increases have certainly not kept paced with the # of transistors

[19:26] <Limbic_Region> and backplane speed really hasn't seen any significant improvements in a decade

[19:27] <Limbic_Region> there are real barriers preventing individual CPU speed from going much further (which could certainly be overcame)

[19:27] <Limbic_Region> it is just faster/cheaper/better to go multi-processor

[19:27] <azuroth> morninggg

[19:27] <Limbic_Region> salutaitons

[19:27] <Limbic_Region> salutations even

[19:28] <sili> let the community pay for time on a super computer

[19:28] <sili> did i mention i'd really like to help p6, but i have no idea about how anything works?

[19:28] <PerlJam> sili: "on a super computer"?  you're clearly insane.  How about time on "the network computer"?  All of those people with broadband access and mostly-idle PCs could make for one hell of a parallel computer.

[19:29] <sili> PerlJam: that's fine, too.

[19:29] <Limbic_Region> sili - you mean Perl6 or Parrot or Pugs or all of them?

[19:29] <integral> sili: go into .../pugs/examples, find a program that's broken, fix it :-)

[19:29] <PerlJam> sili: writing tests are always good.

[19:29] <geoffb> PerlJam, well, for certain tasks, yes.

[19:29] <sili> Limbic_Region: mostly parrot and p6

[19:30] <integral> PerlJam: PVM or MPI, or which has a Haskell lib?

[19:30] <PerlJam> geoffb: sure.  As we reach our limits in one axis, we'll need to be thinking about where and how we can squirrel away computations.

[19:30] <sili> integral: write a doc profling p6 from top to bottom

[19:30] <Limbic_Region> well - there is plenty of p5 stuff that can help Parrot - I wrote benchmark code and there are the benchmark tests and verified builds on Cygwin (which has a very small user base) to report bugs

[19:30] <sili> profiling.

[19:31] <Limbic_Region> small, but helpful role

[19:31] * integral rolls his eyes at sili

[19:31] <PerlJam> integral: you rolled a 3

[19:31] <Limbic_Region> Perl6 design happens mostly on the list - so jump in after reading the Synopses

[19:31] <Limbic_Region> Pugs - well, that's where you go for fun

[19:31] <sili> what about understanding parrot internals?

[19:32] <Limbic_Region> sili - I hear the docs are getting better

[19:32] <Limbic_Region> but I never went down that road

[19:32] <Limbic_Region> my C fu is too weak

[19:32] <PerlJam> sili: prod chip and leo (and especially encourage them to get those PDDs updated)

[19:32] <azuroth> someone's even doing a thesis on it, I think

[19:32] <integral> the variable register frame thing still doesn't seem to be finished :-/

[19:32] <autrijus> integral: oh? how?

[19:32] <sili> azuroth: i saw that on the list. could be a while until it's finished

[19:33] <autrijus> integral: also, prodding allison to commit comptools and tte (tree transform engine)

[19:33] <autrijus> integral: but! I discovers her s3kr1t stash! http://svn.lohutok.net/nam/trunk/parrot/

[19:33] <autrijus> comptools.pod, Language::AG, it's all there

[19:33] <integral> autrijus: that's the impression I got from leo's last email (p6i) on the topic

[19:33] <integral> oooh!

[19:34] <integral> "Actually now almost all register frame are variable-sized." - among other things the allocator apparantly still only allocates to 32 registers

[19:34] <autrijus> leo: should the alligator simply die?

[19:34] * sili looks for the automagic pod->html converter

[19:34] <autrijus> sili: pod2html, part of perl

[19:34] <autrijus> (and raise a better alligator in its place)

[19:35] <integral> podserver might be handy for you, sili 

[19:35] <sili> that requires downloading files though

[19:35] <integral> a much simpler one that just reuses when lifetime expires, since there's no need for moving things to the stack

[19:36] <leo> integral: this isn't true anymore:   new P60, .Integer #...

[19:36] <Limbic_Region> autrijus - nicholas doesn't participate in #parrotsketch ?  How much, if any, is Ponie influencing Parrot?

[19:36] <Limbic_Region> oh hey there leo ;-)

[19:37] <integral> leo: ah, neat.   I'm afraid I don't follow the commits list so I seem to miss lots of bits

[19:37] <autrijus> Limbic_Region: Nicholas does participate. he is apparently having massive hyperdistraction problems.

[19:37] <autrijus> like me, a few weeks ago

[19:37] <Limbic_Region> k

[19:37] <autrijus> at least he did not low level format his HDs.

[19:37] <sili> leo: it was suggested to encourage you to update those PDDs

[19:37] <sili> :)

[19:37] <autrijus> ponie does move parrot -- leo committed a few patches to make things work -- but not as close as (say) Tcl

[19:38] <leo> integral: 13:59 <+svnbot6> r9677 (today)

[19:38] <leo> sili: no time yet - but yes

[19:38] <integral> cool :-)

[19:38] <autrijus> integral: svnbot6 is da bot :)

[19:39] <autrijus> leo: we really need to get allison into this karma-collecting game

[19:39] <leo> yup

[19:39] <integral> autrijus: allison mentions PIL in her compiler_tools.pod;  does pugs have it's PIL2 spec'ed out yet, or enough to feed some of that into the PAST thoughts?

[19:40] * Limbic_Region is reading the #parrotsketch notes and sees Nicholas down at the bottom ;-)

[19:40] <autrijus> integral: I don't think it's going to be a PAST soonish

[19:41] <autrijus> the Pirate people did not materialize one

[19:41] <autrijus> and noone else is doing that

[19:41] <integral> ok

[19:41] <autrijus> integral: and PIL2 is basically simplified PIL -- i.e. incremental changes

[19:42] <autrijus> mostly lexical hoisting and saner closure handling -- also thinking to drop Stmt form

[19:42] <integral> ah, yeah, the compile time Pad issue

[19:42] <autrijus> will do it alongside Obj stuff.

[19:43] * kolibrie discovers an Ogg Vorbis capable car CD player!

[19:44] <autrijus> kolibrie: ooh. url?

[19:44] <autrijus> (not that I have a car.)

[19:45] <kolibrie> http://www.yakumo.com/produkte/index.php?pid=1&ag=Autoradio

[19:45] <kolibrie> have to look in the user manual

[19:48] <Limbic_Region> ooh autrijus - Wendy sounds like a wonderful sounding board

[19:48] * Limbic_Region is reading the filled in journal stub

[19:49] <autrijus> :D

[19:49] <autrijus> yeah. already made her committer.

[19:49] <Limbic_Region> fresh perspectives can be invaluable sometimes

[19:49] <autrijus> "xenolupa" I think

[19:49] <Limbic_Region> err, untainted fresh perspectives anyway

[19:49] <autrijus> yeah, esp. she did not have the p5 brainwash nor the java/c# brainwash

[19:49] <autrijus> so, perfect person to try type system on

[19:50] <comet_> sometimes cliches are invaluable too

[19:50] <autrijus> as p6 type system had been really hard to swallow for people who had worked around and/or implemented either the dynamic or static end of strong typing

[19:54] <Limbic_Region> well - I would still prefer a type system where there could be compile time failures for improper type usage

[19:54] <Limbic_Region> but one with the flexibility not to impose that when undesired

[19:55] <Limbic_Region> raw speed, fast but flexible, flexible but not so fast

[20:01] <xinming> autrijus: ping

[20:02] <autrijus> xinming: pong

[20:02] <comet_> rama lama ding dong

[20:02] <xinming> ?eval class a { has $.a; method update { $.a; } };class b { has $.a; submethod BUILD { a.new( a => $.a ).update; }; }; b.new( a => 20 );

[20:02] <evalbot_7797> Error: No compatible subroutine found: "&update" 

[20:03] <xinming> autrijus: hmm, Is this bug fixed?

[20:06] <xinming> autrijus: hmm, If it is fixed, I want to see if the test is working.

[20:07] <azuroth> is feather for parrot only, or pugs as well?

[20:07] <autrijus> azuroth: pugs as well.

[20:07] <Limbic_Region> actually in that sense, pugs came first

[20:08] <azuroth> Juerd: any chance I could get access?

[20:08] <Limbic_Region> well, perl6 came first

[20:08] * Limbic_Region things feather should have had a p name now - Pugs, Ponie, Perl6, Parrot

[20:09] <geoffb> Primary?  (As in primary feather)

[20:09] <liz6> pheater?

[20:10] <geoffb> liz6, :-)

[20:12] <Limbic_Region> well, we have 3 animals and Perl6 is the amalgamation of many animals so....

[20:13] <Limbic_Region> Pangolin

[20:13] <Limbic_Region> The pangolin is an insect-eating mammal that has protective scales on its body.

[20:15] * geoffb has several pangolin sculptures

[20:15] <geoffb> Something about them just appeals to me, I guess

[20:17] <gaal> Panda? Purry (well)? Pig? Polar bear? Party Animal?

[20:17] <azuroth> party animal. :D

[20:18] <Limbic_Region> very unlikely Juerd will want to change the name - but I like alliteration

[20:18] <Limbic_Region> and palindromes

[20:18] <Limbic_Region> which also starts with a p

[20:18] <sili> eh

[20:18] <gaal> Piranha!

[20:18] <sili> what is poc?

[20:19] <gaal> context?

[20:19] <gaal> proof of concept?

[20:19] <sili> [POC]

[20:19] <gaal> that's not enough context for me :)

[20:19] <sili> maybe that's it.

[20:19] <sili> on p6i, messages labeled [POC]

[20:19] <gaal> [POC] in my current context is a list of POCs.

[20:20] <sili> ?

[20:20] <gaal> In haskell, [a] means list of a :)

[20:21] <sili> trickster.

[20:21] <sili> so is it proof of concept?

[20:21] <gaal> dunno

[20:21] <sili> !

[20:23] <gaal> You mean http://www.nntp.perl.org/group/perl.perl6.internals/31494 ? Looks like proof of concept to me.

[20:25] <Limbic_Region> the 2 acronyms I know for POC that are common - proof of concept and point of contact

[20:25] <Limbic_Region> point of contact doesn't fit in that link though

[20:28] <liz6> Perl Or Cobol?

[20:28] * Limbic_Region kicks liz6

[20:29] <Limbic_Region> learning Cobol for a CS degree was mandatory at the University of Maine 10 years ago (maybe even more recent)

[20:30] * liz6 hurts ;-)

[20:31] <chip> hell, I learned Cobol in high school in the early 80s

[20:31] <chip> I thought it was dying *then*

[20:32] * Limbic_Region wonders where chip went to school

[20:33] <Limbic_Region> for the record, I neither have a CS degree nor attended the University of Maine

[20:33] <Limbic_Region> I was helping my Dad 

[20:36] <chip> Limbic_Region: vocational-technical high school.  Half of each day senior year was in CS class

[20:37] * chip had fun hacking (*ahem*) an HP-3000.  Junior year it still had honest-to-Eris core memory.  Little teeny tiny metal donuts.

[20:43] <geoffb> Yipes.  I've only seen real core in Boston's CS museum.

[20:44] * stevan drops his punch cards, and curses loudly

[20:44] * stevan hands chip his white lab coat

[20:46] * liz6 wonders whether stevan had sequence numbers on his cards

[20:46] * chip checks ping times to aarp.com

[20:47] <azuroth> I'd better head to TAFE soon

[20:48] <Limbic_Region> chip - cool stuff

[20:48] * Limbic_Region heads for home and trick-or-treaters

[20:48] <Limbic_Region> TTFN 

[20:48] <chip> cya

[21:44] <autrijus> liz6: btw, http://rt.openfoundry.org/Foundry/Project/Download/?Queue=82 for svk download; after install, "svk co http://svn.openfoundry.org/pugs" and press enter all the way.

[21:46] <liz6> autrijus: tx

[21:46] <autrijus> liz6: for wendy too (there's win32 binary there)

[21:47] <geoffb> autrijus, you've mentioned the mindset that Wendy *doesn't* have.  What is her actual specialty?

[21:48] <autrijus> geoffb: extremely high intelligence :)

[21:48] <geoffb> LOL

[21:48] <autrijus> and high clock speed.

[21:48] <autrijus> like, at times faster than me :)

[21:48] <geoffb> Well, sure, but is she a programmer, a mathematician, a physicist . . . ?

[21:48] <geoffb> hoo-ah

[21:48] <Juerd> azuroth: Email me your real name and preferred username

[21:49] <Juerd> azuroth: And the request itself, of course

[21:49] <autrijus> a programmer... with training in C, p5, and another language I don't know how to spell.

[21:49] <geoffb> ah

[21:49] <autrijus> oh, http://www.tencore.com/ "tencore".

[21:54] <svnbot6> r7798 | rafl++ |  r18858@ata:  rafl | 2005-10-30 02:36:30 +0200

[21:54] <svnbot6> r7798 | rafl++ |  Debian:

[21:54] <svnbot6> r7798 | rafl++ |   * Updated changelog up to 6.2.10-4.

[21:54] <svnbot6> r7798 | rafl++ |   * Use Pugs instead of pugs in package descriptions everywhere.

[21:54] <svnbot6> r7798 | rafl++ |   * Fixed a format error in copyright.

[21:54] <svnbot6> r7798 | rafl++ |   * Adjusted prerm and postinst scripts fir libghc6-pugs-dev to use ghc 6.4.1.

[21:54] <svnbot6> r7798 | rafl++ |   * Added some smoke uploading code again.

[21:54] <svnbot6> r7799 | rafl++ |  r18859@ata:  rafl | 2005-10-30 02:37:59 +0200

[21:54] <svnbot6> r7799 | rafl++ |  Debian:

[21:54] <svnbot6> r7799 | rafl++ |   * Build-Depend on ghc6 (>= 6.4.1) instead of

[21:54] <svnbot6> r7799 | rafl++ |     ghc6 (>= 6.4) | ghc-cvs (>= 20050331-1).

[21:54] <svnbot6> r7800 | rafl++ |  r18958@ata:  rafl | 2005-10-31 22:44:42 +0100

[21:54] <svnbot6> r7800 | rafl++ |  * Debian: build-depend on libparrot0.3.0-dev instead of parrot-dev.

[21:54] <svnbot6> r7801 | rafl++ |  r18959@ata:  rafl | 2005-10-31 22:45:01 +0100

[21:54] <svnbot6> r7801 | rafl++ |  * Remove useless library-dirs.

[21:54] <eric256> wow. lol

[21:55] <autrijus> svk push -l ;)

[21:55] <eric256> how do you commit to just local?  

[21:55] <rafl> A new option learned. :-)

[21:56] <rafl> eric256: copy a mirrored path to a local one and simply commit to it. Then you can push back into the mirrored path with svk push

[21:57] <rafl> How to check if parrot embedding worked?

[21:57] <eric256> ...../me stares dazed at rafl

[21:57] <rafl> eric256: Err?

[21:57] <eric256> so if i was working on tests.... cp t t_local;  work in T, svk ci -M as needed....then when i'm done svk push -I ?

[21:58] <geoffb> According to clkao's latest slides, you can just change your original 'svk co ...' to 'svk cp ...', and it will just do the magic for you.

[21:58] <geoffb> Though I haven't tried that yet to see.

[21:58] <eric256> i could realy use an svk website with examples. is that back yet?

[21:58] <autrijus> eric256: yes, exactly, though don't need -I

[21:59] <rafl> eric256: svk mirror PUGS_SVK_URL //mirror/pugs; svk cp //mirror/pugs //local/pugs; svk co //local/pugs

[21:59] <autrijus> geoffb: that's correct. at least, that's how I coded it

[21:59] <autrijus> eric256: svk.elixus.org is back

[21:59] <rafl> eric256: It's nicer to copy the whole path to a local path, imho.

[21:59] <geoffb> autrijus++ # constantly working to DWIM

[22:00] <eric256> why is that better than svk co PUGS_SVK_URL; svk ci?  seems like lots of work and svk already confuses me enough. ;)

[22:00] <autrijus> rafl: to test parrotembed, compile with embed and then ./pugs -e 'eval("print 123", :lang<pir>)'

[22:00] <geoffb> eric256, local branches and local commit

[22:00] * eric256 finished a phone system install this weekend and now waits to get voicemail anxiously. lol

[22:01] <amos> morning all

[22:02] <autrijus> greetings amos 

[22:02] <rafl> autrijus: Thanks.

[22:02] <autrijus> np :)

[22:04] *** amos is now known as azuroth_tafe

[22:04] <rafl> autrijus: You don't plan to do releases shortly after the monthly parrot release anymore, do you? :-)

[22:05] <azuroth_tafe> eric256: so could you explain more about tests relating to documentation?

[22:05] <eric256> sure.  any specifics you are interested in?

[22:06] <azuroth_tafe> you said to read S12?

[22:07] <eric256> ?? no.

[22:07] <eric256> http://feather.perl6.nl/~eric256/t_index/t/builtins/arity.html  

[22:07] <eric256> there is a test file,  see how the links let you jump right to documentation relavent to that test?  thats what we want to do with as many tests as possible.

[22:08] <eric256> so if you browse http://tests.pugscode.org you can find tests with no links to documentation.  I've been then looking for documentation that relates to the tests and inserting the needed L<> link into the .t file

[22:09] <integral> eric256++ # neat

[22:09] <autrijus> rafl: actually, we can still do that :)

[22:09] <Juerd> azuroth_tafe: Your password is amoro. Change it right away.

[22:09] <azuroth_tafe> thanks!

[22:09] <azuroth_tafe> er... what's feather's URL?

[22:10] <eric256> can i ask....why are so many failing tests outside of pugsbugs? i'm always confused as to when tests should be in pugsbugs, and when not.

[22:10] <Juerd> azuroth_tafe: You can't change the password using a url.

[22:10] <Juerd> azuroth_tafe: use ssh.

[22:11] <azuroth_tafe> I mean... the domain name, rather

[22:11] <Juerd> hostname?

[22:11] <Juerd> feather.perl6.nl

[22:11] <integral> w

[22:11] <integral> oops.   impressive number of users on feather :)

[22:12] <Juerd> You think?

[22:12] <azuroth_tafe> hooray

[22:12] <Juerd> I love seeing my donation work so well.

[22:12] <liz6> ;)

[22:13] <autrijus> eric256: pugsbugs is actually "not sure how to categorize, someone please take a look".

[22:13] <azuroth_tafe> should I use this svk thing? or just normal svn?

[22:13] <integral> Juerd: compared to the size of the userbase here, definately.   juerd++ :-)

[22:13] <Juerd> azuroth_tafe: svk, see feather.perl6.nl/~autrijus/

[22:13] <azuroth_tafe> excellent, thanks

[22:14] * eric256 looks more at local mirroring.... 

[22:15] <eric256> so that would allow me to commit more often, which my instincts tell me to, but only push when i am at the end, so i can break stuff but still commit without worrying about breaking anyone else. and only push when everything is working agian. ...i think i like that.  it its not too complicated in the end. ;)

[22:16] <eric256> does it only work with mirror and not co?

[22:17] <azuroth_tafe> so `svk pull` is like up? and I just ci as norm?

[22:17] <Juerd> azuroth_tafe: You can use up too. 

[22:17] <autrijus> eric256: if you already have a co of //mirror/pugs, do this

[22:17] <autrijus> svk cp -m "local branch" //mirror/pugs //pugs

[22:17] <azuroth_tafe> ahh, okay

[22:17] <autrijus> svk sw //pugs

[22:17] <autrijus> then "svk ci" will become locak

[22:18] <autrijus> and then use push to pushback 

[22:20] <eric256> so i end up with two local copies of pugs?

[22:20] <svnbot6> r7802 | stevan++ | Perl6::ObjectSpace -

[22:20] <svnbot6> r7802 | stevan++ | * the Perl6::MM::* types are fleshed out

[22:20] <svnbot6> r7802 | stevan++ |     - tests added for them too

[22:20] <svnbot6> r7802 | stevan++ | * started a Perl6::MetaModel::Bootstrap module to 

[22:20] <svnbot6> r7802 | stevan++ |   explore what the metamodel will look like using

[22:20] <svnbot6> r7802 | stevan++ |   these types. Currently we just have the contents

[22:20] <svnbot6> r7802 | stevan++ |   of Gnosis.pm from MM 2.0, and I tested that 

[22:20] <svnbot6> r7802 | stevan++ |   $::Class->add_method works properly (although it

[22:20] <svnbot6> r7802 | stevan++ |   is spelled much differently, see t/metamodel/01*.t

[22:20] <svnbot6> r7802 | stevan++ |   for more details)

[22:21] <azuroth_tafe> karma time :D

[22:21] <jabbot> azuroth_tafe: time :D has neutral karma

[22:22] * stevan is off to dinner &

[22:33] <autrijus> ingy: new bible snap when you got some cycles, thanks

[22:41] * autrijus waves and sleeps &

[22:41] <geoffb> g'night, autrijus 

[22:59] <Juerd> autrijus about wendy: it is rare that I meet someone with a higher internal clock speed and raw mental capacity compared to mine.

[22:59] <Juerd> rotflol.

[23:33] <eric256> svn check

[23:33] <svnbot6> r7803 | eric256++ |  r14391@feather:  eric256 | 2005-10-31 23:40:00 +0100

[23:33] <svnbot6> r7803 | eric256++ |  local branck

[23:33] <svnbot6> r7803 | eric256++ |  r14401@feather:  eric256 | 2005-11-01 00:16:03 +0100

[23:33] <svnbot6> r7803 | eric256++ |  - Add CSS styling to directory.tmpl

[23:33] <svnbot6> r7803 | eric256++ |  r14402@feather:  eric256 | 2005-11-01 00:23:58 +0100

[23:33] <svnbot6> r7803 | eric256++ |  - t/var/var.t fixed link heading

[23:33] <svnbot6> r7803 | eric256++ |  r14403@feather:  eric256 | 2005-11-01 00:27:05 +0100

[23:33] <svnbot6> r7803 | eric256++ |  - t/syntax/stmt_or_expr.t Changed to A04

[23:33] <eric256> mhmm...that didn't quite work as expected.

[23:33] <eric256> can any svk guru point to my error?

[23:45] <geoffb> eric256, as aut* said: svk push -l or svk push --verbatim

[23:45] <eric256> i did push -l

[23:45] <eric256> i'll have to try --verbatim next time. ;)

[23:57] <svnbot6> r7804 | eric256++ | t/builtins/perl.t added link to .perl and ref quote

[23:57] <eric256> --verbatim worked. thanks ;)

[23:57] <eric256> karma eric256

[23:57] <jabbot> eric256: eric256 has karma of 27

[23:57] <eric256> i think that went down. lol 

[23:58] <eric256> later all

