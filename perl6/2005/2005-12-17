[00:08] <dduncan> ?eval "hello"~0

[00:08] <evalbot_8274> "hello0" 

[00:08] <dduncan> mlh_, I think that's what you wanted?

[00:09] <dduncan> a + casts its operands as numbers, while a ~ casts as strings

[00:14] <mlh_> oh

[00:15] <mlh_> does eval do p6 only or p5?

[00:15] <mlh_> is it possible to force it to give a typeerror for "hello" + 0   ?

[00:34] *** ntgrl is now known as integral

[00:34] <dduncan> ?eval does perl 6 only, I believe

[00:34] <evalbot_8274> Error:  unexpected "o" expecting operator, ":", ",", term postfix, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[00:35] <dduncan> but perl 5's + always cast its arguments as numbers too, so that's the same as the perl 6 one

[00:35] <dduncan> the only difference is that perl 6 uses ~ instead of . for string concatenation, but they both cast as strings

[00:35] <obra> seen audreyt 

[00:36] <dduncan> the + has never been a string op in perl

[00:36] <dduncan> maybe you're thinking of some badly designed languages like javascript where you never know what you're going to get if you say "foo + bar"

[00:37] <dduncan> eg, in javascript "'5' + '4'" is 54, and "5 + 4" is 9

[00:37] <dduncan> nasty piece of work, that

[00:51] <dduncan> ?eval 'hello' + 'world';

[00:51] <evalbot_8274> 0.0 

[00:51] <dduncan> ?eval 'hello' ~ 'world';

[00:51] <evalbot_8274> "helloworld" 

[00:51] <dduncan> ?eval 'hello' ~ '';

[00:51] <evalbot_8274> "hello" 

[00:51] <dduncan> ?eval 'hello' ~ undef;

[00:51] <evalbot_8274> "hello" 

[00:58] <gaal> arr! I can't seem to extract values from a VList without calls to fromVal and the like!

[01:01] <gaal> I *know* this VList is really [Exp], but how do I convince the type checker this is the case?

[01:02] <gaal> patmaching doesn't work: (VList bindings)

[01:02] <gaal> and neither does tricksy annotation: bindings :: [Exp]

[01:03] <gaal> tomorrow then... night &

[02:10] <audreyt> gaal: VList can't contain [Exp]... Exp is not a Val

[02:10] <audreyt> gaal: you can fake it with VOpaque

[02:10] <audreyt> gaal: if you show me the code/patch I can fix

[02:11] <audreyt> lunch now... bbiab

[02:11] <obra> 'morning, audreyt 

[02:12] <audreyt> yo obra.

[02:12] <stevan> hey audreyt 

[02:12] <audreyt> stevan: hey

[02:13] <stevan> Bootstrap.pil :)

[02:13] <audreyt> yes? :)

[02:13] <stevan> just puts a smile on my face,.. thats all 

[02:13] <stevan> I am about to commit some additions to it

[02:13] <audreyt> ahh :)

[02:13] <audreyt> cool

[02:13] <audreyt> maybe you can practice some haskell by writing linearize? :D

[02:14] <stevan> I have been reading Algorithms

[02:14] <audreyt> (it's a pretty good first cut for haskell practicing)

[02:14] <stevan> we shall see :)

[02:14] <audreyt> cool

[02:14] <audreyt> my duct-tape-held-together laptop case is about to break

[02:14] <audreyt> so I need to go out repairing it + lunch... will be back in 2~3hr

[02:18] <stevan> I am off to watch a movie myself,.. 

[02:18] <svnbot6> r8275 | stevan++ | PIL.Native.Bootstrap.pil

[02:18] <svnbot6> r8275 | stevan++ | - implemented ::Class.subclasses & ::Class.add_subclasses

[02:18] <svnbot6> r8275 | stevan++ | - cleaned up ::Module.version & ::Module.authority

[02:18] <svnbot6> r8275 | stevan++ | - ::Module.identifier now works properly (although some edge cases

[02:18] <svnbot6> r8275 | stevan++ |   will likely still mess it up).

[02:18] <svnbot6> r8275 | stevan++ | - Create slots in instances of ::Class, ::Object, ::Module & ::Package

[02:18] <svnbot6> r8275 | stevan++ |   which are missing (no auto-vivification in the mini-lang :)

[02:18] * stevan &

[02:19] <dduncan> message away ... to p6l that is

[02:20] <dduncan> second topic started in almost as many days

[02:20] <audreyt> cool :)

[02:20] <dduncan> hopefully something will get done about those nasty undefs!

[02:24] <dduncan> is that PIL stuff not supposed to be used yet?

[02:24] <dduncan> I notice that, despite being in src/, make doesn't do anything with them

[02:25] <audreyt> dduncan: "make pil" does

[02:25] <dduncan> I refer to the last few commits

[02:25] <dduncan> okay

[02:25] <audreyt> and the goal is to treat it as a vm like "parrot"

[02:25] <audreyt> and compile "pugs" programs to it

[02:25] <audreyt> to get roles and metaclasses and unboxed types working

[02:25] <audreyt> the current haskell runtime can't quite support these things

[02:25] <audreyt> so we are rearchitecting the bottomost layer

[02:25] <dduncan> I mistakenly thought that 'make' did all the versions, and it was at test time that you picked one to invoke

[02:26] <audreyt> that is correct

[02:26] <audreyt> once the pil native vm can hook into the current pil compiler

[02:26] <audreyt> we will make that so

[02:26] <dduncan> okay

[02:26] <audreyt> it's currently still not there yet -- missing container types

[02:26] <SamB> yay for rearchitecturing bottommost layers!

[02:26] <audreyt> yay for modularity-thru-separate-data-representation-across-layers!

[02:27] <audreyt> yay for OSI!

[02:27] <audreyt> (ok, maybe that's too silly)

[02:30] <SamB> OSI isn't written in Haskell, silly

[02:31] <audreyt> I hear galois (or someone else) had the data layer and up written in haskell for provability

[02:32] <SamB> provability of what?

[02:32] <audreyt> system properties

[02:32] * SamB thought the OSI was written in hot air

[02:32] <SamB> what does it do?

[02:32] <audreyt> http://en.wikipedia.org/wiki/Internet_protocol_suite

[02:32] <SamB> is it useful?

[02:33] <SamB> I thought it was just used to compare real things with

[02:33] <audreyt> as a Sockets/TCP/IP/Ethernet layer... I imagine they may be useful for things they are useful for

[02:33] <audreyt> er, right. in the proper sense it's just hot air

[02:34] <SamB> wow... hot air written in Haskell...

[02:34] <audreyt> considering the use of category theory, maybe it's not that surprising...

[02:35] <audreyt> (but I was confused; I referred to specific implementations of protocols in different layers as a stack in haskell, i.e. actual code that does stuff)

[02:35] <SamB> whatever you do, don't tell those guys in #twisted about this!

[02:35] <audreyt> mm, category theory is known as "generalized abstract nonsense"

[02:35] <SamB> ah

[02:35] <SamB> hehe

[02:35] <audreyt> considerably hotter than hot air

[02:36] <SamB> hmm, is that anything like Dr. Suess?

[02:36] <SamB> I probably misspelled his name...

[02:38] <SamB> heh: Physical 	e.g. wire, radio, fiber optic, Carrier pigeon

[02:38] <SamB> hehe... avian carriers...

[02:43] <SamB> hmm, they don't mention HTCPCP

[02:45] <SamB> do winsock and BSD sockets really belong at the same layer as SSH?

[02:45] <SamB> neither winsock nor BSD sockets is a protocol...

[03:01] <meppl> gute nacht

[07:33] <xinming> what's wrong with freenode? Is it being attack? or under maintaince? :-/

[07:33] <xinming> I can't get here since yesterday. :-(

[07:38] <luqui> http://freenode.net/news.shtml

[07:43] <audreyt> yo

[07:43] <xinming> nuisancebot

[07:43] <xinming> what does this mean?

[07:43] <xinming> the nuisancebot

[07:44] <luqui> spambot

[07:44] <audreyt> bots that causes people annoyance?

[07:44] <xinming> the bot that sexy advertisers use which seduces people :-) 

[07:46] <audreyt> mm sexy advertisers

[07:46] <xinming> I ever remembered that there always private message which send you the url to the adult site. So I say sexy advertiser. :-P

[07:47] <audreyt> *nod*

[07:47] * luqui ponders lazy construction of the match object

[07:47] <luqui> does that buy us anything...

[07:48] <avar> xinming: did you get my message about pugs fibonacci the other day?

[07:49] <xinming> avar: yes, You killed it after 500m. :-)

[07:49] <avar> hoh;)

[07:49] <audreyt> luqui: it buys us something if we don't use all of he match objs

[07:49] <xinming> I just watch back the log, and only see that line.

[07:49] <avar> .java with GCJ is just as fast as .c with GCC for that probram, suprising

[07:49] <audreyt> luqui: which could be useful for normal text match patterns -- kinda like XML::Twig

[07:50] <audreyt> pugs fibbonacci? god forbid anyone benchmarking the current core

[07:50] <audreyt> it's using linked lists of 4-byte-per-characters for strings and BigInts for math

[07:50] <luqui> audreyt, how hard is it to implement automatic tailcall in the current core?

[07:51] <luqui> if "fairly easy" is the answer, can you point me in the right direction?

[07:51] <audreyt> luqui: huh, we already do that on pil compilation.

[07:51] <luqui> oh, pil

[07:51] <audreyt> luqui: oh, you mean the parse tree evaluator

[07:51] <luqui> is pil fairly full-featured?

[07:51] <audreyt> sure, seeing how js runs 90% of tests

[07:51] <luqui> is that the canonical pil evaluator these days?

[07:51] <audreyt> but it's lacking proper support for OO metamodel

[07:51] <audreyt> yes, it is, until the minilang hooks into pil2

[07:52] <audreyt> even afterwards I think js will remain first tier

[07:52] <luqui> okay, I'll try testing with that

[07:52] <audreyt> it's just so very valuable :)

[07:52] <luqui> it gives an interesting political angle to perl 6 for sure

[07:53] <audreyt> you mean, PR angle :)

[07:53] <luqui> uh, yeah

[07:53] <luqui> politics, public relations, anything that's not code, it's all the same

[07:54] <audreyt> ...unless it's solid documentation, which is something else

[07:54] <luqui> true

[07:55] <audreyt> luqui: so, do you grok PGE's design?

[07:55] <audreyt> both the OPTable parser and the matching engine

[07:55] <audreyt> not the code, but the algorithms

[07:55] <xinming> audreyt: Will you plan to make pugs support compiling into haskell and run top of parrot? :-P

[07:55] <luqui> audreyt, oh yeah, I grokked those before pm wrote them

[07:55] <audreyt> xinming: we already do (./pugs -CPugs) and we already do. (./pugs -CParrot)

[07:56] <xinming> audreyt: How about compile haskell to parrot? :-/

[07:56] <audreyt> luqui: can you write them down as either p6 pseudocode or hs pseudocode -- preferably as annotations to pge but also okay as  a standalone -- so we can merge 6.28 with 6.281?

[07:56] <audreyt> xinming: I think the JHC person is the one to talk to

[07:56] <audreyt> JohnMeacham

[07:56] <luqui> why is that a precondition to merging 6.28 with 6.281?

[07:56] <audreyt> just need a PIR emitter for the JHC grin code

[07:57] <audreyt> luqui: because it's fuzzy to me how the rule engine is to work with the underlying metamodel

[07:57] <audreyt> luqui: you know, the "rules are methods and grammars are classes and matching is multi/role/whatever" stuff

[07:57] <luqui> ahh, that stuff

[07:57] <audreyt> as we are doing metamodeling, it makes sense to give PGE match objects first class status

[07:57] <audreyt> it's curretly just a crude pesudohash in Pugs

[07:58] <audreyt> where you can deref with [] and {} but not much else

[07:58] <luqui> okay, I'll look through the PGE source to find out the details and write them up

[07:58] <audreyt> eg. it's impossible to implement your own match method or extend the match class

[07:58] <audreyt> luqui: excellent, that will really really help -- not so much as a p6 port of PGE but rather the API of such a thing if it is to exist

[07:58] <audreyt> we can still bridge to the underlying PIR objects

[07:59] <audreyt> (API as in "internal API" not as in the "toplevel match API")

[07:59] <luqui> well, I'm happily porting PGE to perl 6 

[07:59] <luqui> and it's turning out to be quite simple really

[07:59] <audreyt> that's even better!

[07:59] <audreyt> commit commit :)

[07:59] <audreyt> ext/Rules/

[07:59] <luqui> Parse::Rule

[07:59] <luqui> already there

[07:59] <audreyt> oh wow

[08:00] <luqui> it's just skeleton at this point though

[08:00] <audreyt> and just a day old

[08:00] <audreyt> excellent... just go ahead then. I'll ping you if I have questions/problems in its integration

[08:00] <audreyt> luqui++

[08:00] <luqui> mmkay

[08:02] <audreyt> luqui: oh, a lang q

[08:02] <luqui> ?

[08:02] <audreyt> "opaque" is not hash; it must provide setattr and getattr

[08:02] <audreyt> according to s12

[08:03] <audreyt> must it support enumerate_keys?

[08:03] <audreyt> is it possible to have an object with infinite number of attrs?

[08:03] <luqui> let me look at that part of s12

[08:03] <audreyt> an object that's just a function, that is

[08:03] <luqui> can you point me at a line number in s12?

[08:03] <audreyt> reason I ask is something is not easily enumerable -- and some objects can respond to getattr requests

[08:04] <audreyt> grep for PyDict

[08:04] <audreyt> the thing they have in common is get/set; not sure if enumeration is part of the deal or not

[08:05] <audreyt> certainl not dynamic extensibility (Cstruct can't)

[08:05] <luqui> I don't think enumerate_keys is necessary for this interface

[08:05] <luqui> the only reason you'd need it is for reflection

[08:06] <luqui> but that is going to have to dig into the implementation type anyway

[08:06] <audreyt> yeah

[08:06] <audreyt> I seem to recall in A12 there's a %$obj form

[08:06] <audreyt> where the underlying opaque emulates a hash

[08:06] <audreyt> but something doesn't make sense, like

[08:06] <audreyt> %$obj = ();

[08:06] <audreyt> so I wasn't sure how far the emulation has to go

[08:07] <audreyt> get/set makes sense as the language has

[08:07] <audreyt> $!foo = 'bar';

[08:07] <audreyt> but I don't see a %!

[08:07] <luqui> %! on its own, as in, "all private attributes"?

[08:07] <audreyt> yeah

[08:07] <audreyt> if you don't recall a demand to support it in the language level for all objects, I'll remove it from the object interface as it makes implementation easier

[08:07] <luqui> I don't recall anything of the sort

[08:08] <audreyt> (because when bridgeing an unboxed type or foreign type I don't have to implement the full hash interface)

[08:08] <audreyt> excellent, thanks!

[08:08] <luqui> plus, such a thing can allow partial GC of object

[08:08] <audreyt> verily

[08:08] <audreyt> which another reason

[08:08] <audreyt> and also for lazily instantiated objects

[08:08] <luqui> hmmm... was there a recent doctrine on messing with %MY?

[08:08] <audreyt> which is a huge win in Hs runcore -- not sure if applies elsewhere

[08:08] <audreyt> I think you can't introduce new keys to it

[08:08] <audreyt> not  sure what else

[08:08] <luqui> hmm

[08:09] <audreyt> I think it's just a proxy and translates into corresponding prims

[08:09] <luqui> because I really want pads to be able to clean up per-variable as in p5

[08:09] <audreyt> explain?

[08:09] <audreyt> (I mean need to run in 10mins)

[08:09] <luqui> sub { my $x = 42;  '$x is cleaned up here';  stuff that doesn't use $x }

[08:10] <luqui> I think that's important for the memory efficiency of a language that uses closures heavily

[08:10] <audreyt> oh... you need some sort of reachability analysis

[08:10] <audreyt> JHC does that natively -- they even clean up types

[08:10] <audreyt> so all types are passed in along with values

[08:11] <luqui> (which parrot won't do)

[08:11] <audreyt> but if they are not used they are erased

[08:11] <audreyt> so multis and GADT can be implemented very efficiently

[08:11] * luqui doesn't know much about implementation of those guys

[08:12] <luqui> anyway, that little nicety is what perl5's L::AG uses to be memory efficient

[08:13] <audreyt> cool

[08:13] <audreyt> also I use Perl6::Subs at $job

[08:13] <audreyt> will probably submit some patches

[08:13] <luqui> and I was bummed when I found out that perl6 would require a different technique

[08:13] <luqui> because it keeps all lexicals around as a whole

[08:13] <audreyt> and implement readonly of args properly with INTERNALS::SvREADONLY and Devel::LexAlias

[08:14] <audreyt> huh? lexicals attach to closure because  we do hoisting

[08:14] <luqui> hoisting?

[08:14] <audreyt> { ... my $x; ... }

[08:14] <audreyt> $x is hoisted to top of {}

[08:14] <audreyt> before ...

[08:14] <luqui> no, I mean that no lexicals are cleaned up until they all are

[08:14] <audreyt> I don't see that in spec.

[08:14] <luqui> it is implied from %MY fiddling

[08:15] <audreyt> not so... the presence of %MY indicates a proxy object

[08:15] <audreyt> which is bound to each lex items and thus keeping them alive

[08:15] <audreyt> without presence we can freely ignore it

[08:15] <luqui> and CALLER?

[08:15] <audreyt> and if you want to eval"", a snapshot is there anyway

[08:15] <audreyt> CALLER only attaches to "env $x" vars

[08:15] <luqui> that was the doctrine I was thinking of!

[08:15] <audreyt> so has no power over my $x vars

[08:15] <audreyt> env$x vars are passed implicitly

[08:15] <luqui> okay good

[08:16] <audreyt> they are like (?x) implicit parameters in GHC

[08:16] <audreyt> cool then, glad we agree :)

[08:16] <audreyt> ok, I gotta run -- keep up the P6GE work :D

[08:16] * audreyt waves &

[08:17] <audreyt> oh also -- I wonder if @*ARGS acan become @+ARGS.

[08:17] <luqui> what is $+ again?

[08:17] <audreyt> much easier reachability analysis

[08:17] <audreyt> env

[08:17] <audreyt> CALLER

[08:17] <luqui> right

[08:17] * luqui has fallen behind on those parts of the spec

[08:18] <audreyt> it's good to have division of labour :)

[08:19] <audreyt> hi PJF, bye PJF. :)) *wave* &

[08:21] <PJF> Hi Audrey!  I hope you've recovered from all your busy travels.  Bye Audrey. ;)

[08:22] <gaal> awww, moosed again.

[08:22] <gaal> hi all :)

[08:24] <pasteling> "gaal" at 192.115.25.249 pasted "Extract an Exp from a VList" (3 lines, 212B) at http://sial.org/pbot/15013

[08:25] <PJF> Hi Gaal.  Moosed?

[08:27] <gaal> hey PJF. We both narrowly moosed audreyt :)

[08:29] * PJF laughs, "I've never encountered that use of the word before."

[08:29] <gaal> http://forum2.org/moose/

[08:29] * gaal makes coffee

[08:30] <PJF> Gaal: I've noticed you have a docs/articles/tpr.pod.  Has that been published yet?

[08:34] <gaal> PJF: no, it's on hold for a while.

[08:37] <PJF> gaal: Okay.  I was reading through it during a car-trip today.  I think it's very good.  (Although I did submit a 2 character patch)

[08:42] <gaal> thank you! was it useful to you before you knew much about writing p6 programs?

[08:43] <PJF> Gaal: Very.  I still haven't done very much p6 programming, and what I have done has looked identical to p5.

[08:47] <gaal> PJF: I ask because the editor felt the text wasn't very newcomer-friendly, but I didn't really know how that ought to be improved (except to try for more concrete examples and fewer abstract language discussions).

[08:49] <gaal> ...which is kinda hard in something that's an article, not a book.

[08:49] <gaal> anymoose, thanks for encouraging me to revisit this :)

[08:50] <gaal> and for the patch :)

[08:50] <PJF> gaal: I agree that fewer abstract discussions would probably help.  They tend to excite designers, but can easily miss (and bore) the regular readers.

[08:52] <PJF> gaal: Since I was in a noisy car at the time I read over the article in a rather haphazard way.  I can re-review it with a more critical eye if you'd like.

[08:53] <PJF> gaal: Provided you don't mind me using it as inspiration for a Perl-tip ( http://perltraining.com.au/tips/ ) later on. ;)

[08:53] <gaal> hey, reading it in difficult conditions is a stress-test on its own :-)

[08:53] <gaal> PJF: you are welcome to make as much use of it as you like. :-)

[08:54] <gaal> it's under CC for that purpose too.

[08:54] <gaal> Whee, those look really nice!

[08:55] <gaal> like FMTYWTK except not really FM for the regualr interested reader.

[08:56] <PJF> gaal: We need to redo the perl-tips page because we have so many now.  They're *mostly* aimed at entry level programmers, as they make up a great deal of our readership.

[08:56] <gaal> BTW: in http://perltraining.com.au/tips/2005-04-22.html, it is claimed that

[08:56] <gaal> # print "This is a simple static string";

[08:57] <gaal> # print 'This is a simple static string';

[08:57] <gaal> are equally fast. they are, to run. I think the second one parses infinitismally faster though.

[08:57] <gaal> which is a very poor excuse to prefer it, I know. :-)

[08:58] <PJF> gaal: It almost certainly does, because Perl doesn't need to look for interpolation.  But once it's been parsed, they're the same.  ;)

[08:58] <gaal> of course.

[08:59] <gaal> PJF: As for the arrangement problem: yeah, there's a deep problem of aggregating knowledge :-(

[08:59] <PJF> gaal: However, it's worth preferring it because it's easier for humans to parse, too, and that can take much longer.  Every time I see double-quotes I need to go looking to see if interpolation will happen.  Although I prefer q{...} over '...' , as I find it easier to find matching braces than quotes.

[08:59] <gaal> just make sure everything is usefully searchable.

[09:00] <gaal> PJF: well, p6 will make this better in the typical case at least, because introducing general interpolated values is so easy, ie,

[09:01] <gaal> @{[ blah ]}  ==> { yay }

[09:01] <gaal> of course, it comes at the cost of you having to take note of all the adverbs to q{}.

[09:02] <PJF> gaal: That's one of my most favourite features.  You have no idea how often the 'expression interpolation' question comes up in classes.

[09:02] <gaal> of course, and it does because people are really happy they have interpolation in the first place! (unlike most other languages)

[09:03] <gaal> The fact that it's nuanced by modifiers is both a pro and a con; I believe it weighs far to the positive side because the nuances are regular and well-documented.

[09:03] <gaal> adverbial modifiers in general are wonderful.

[09:04] <gaal> I should stop preaching to the choir though :-)

[09:05] <PJF> gaal: I should re-read the sheet music.  Despite me having grabbed pugs to play more with p6, I've mostly spent my time in p5 build-system land.  Right now I'm seeing if I can compile a ghc for cygwin.

[09:06] <gaal> that would be grand. among other things that would buy us p5 embedding.

[09:08] <PJF> gaal: As far as I can tell ghc used to be built against the cygwin library for Windows.  I can understand they moved away from that so there could be a stand-alone ghc for win32, but I'm surprised not to parallel win32 and cygwin distributions.  Looks like I'll soon find out if there's a good reason why.

[09:15] <gaal> PJF: I never looked into it very deeply, but I think it may have to do with ABI changes necessitating frequent ghc upgrades and your run-of-the-mill dependency hell. But then, I think cygwin has stabilized muchly since say five years ago, so this may have become much better.

[09:16] <PJF> ABI changes?

[09:17] <gaal> binary structs change size, you suddenly can't just relink against something that worked, that kind of stuff.

[09:18] <gaal> I'm just guessing though: maybe it's because people already had the MSYS version working, which was faster and "good enough".

[09:18] <PJF> gaal: Well, it seems to be happily compiling now.  The make process took a very long time, though.

[09:18] <PJF> s/make/configure/

[09:19] <gaal> yes, ghc is known to take ages to build. if you run into problems, you know about #haskell right?

[09:19] <PJF> gaal: Not yet. ;)

[09:20] <PJF> q{ghc.exe: unknown package: unix} ... Hmm...

[09:25] <gaal> looks like configure made a mistake. but I can't say more than that :-/

[09:38] *** _fallen- is now known as fallenstorm

[09:43] <PJF> gaal: Looks a bit like a chicken-and-egg problem.  GHC needs at least a posix/unix package to build for a unix-like system.  However the Win32 GHC (which I'm using to try and build the cygwin system) doesn't come with such a package.

[09:50] <gaal> ouch :( though I don't understand why it would need a binary version of that package.

[09:51] <gaal> maybe to get some constants? too bad, I'd have hoped configuration could take care of that.

[09:51] <PJF> gaal: So would I.  Cygwin builds are 'unsupported', it would appear.  I haven't done much digging beyond that, just testing if it would work out of the box.

[09:52] <gaal> in pugs we rely on perl5's Configure to have done that hard work for us. Of course one day we'll have to take our heads out of the sand and do it ourselves, but that day is a while away. :)

[10:39] <dduncan> seen svnbot

[10:40] <dduncan> svnbot needs to be be told where #perl6 moved to

[14:10] <clkao> audreyt: you around? i found an interesting thing. pugs is trying to 'use' by grepping it from column 1. so if i have a multi-line eval with a use in it, like unspecced/p5/array.t, it fails early

[15:06] <araujo> The less i was expecting to find at Main.hs was a spanish poem :-]

[15:15] <avar> ?eval *("x")

[15:15] <avar> evalbot, where art thou?

[15:19] <xinming> avar: He is in trance :-)

[15:21] <xinming> avar: since the freenode is changed temporarily, the evalbot hadn't been changed yet.

[15:22] <audreyt> how had it changed?

[15:23] <audreyt> oh, chat.

[15:23] <clkao> audreyt: what's the use problem? i want to hook use perl5:blah into pil2js

[15:23] <audreyt> clkao: use() is handled in Pugs.Parser

[15:24] <audreyt> look at how JSAN use is handled for some clues

[15:24] <clkao> uhm, it's using another function iirc

[15:24] <audreyt> both my laptop and my ipod is broken... so can't chat for long. fortunately by tomorrow noon I should have a working laptop back

[15:24] <clkao> dude

[15:24] <wolverian> ow

[15:25] <clkao> it's end of 2005. how many laptops did you break this year?

[15:25] <audreyt> yeah, so maybe hack in use jsperl5:DBI

[15:25] <audreyt> first, a dude I am not. second, there was only one, mmkay?

[15:25] <gaal> hey audreyt

[15:25] <audreyt> clkao: anyway, try making jsperl5:DBI work, I'll reconcile (or gaal may)

[15:26] <clkao> but it should be perl5: ! 

[15:26] <audreyt> which is what I mean by "reconcile"

[15:26] <audreyt> depending on the current -C setting

[15:26] <audreyt> generate different code

[15:26] <clkao> *nod*

[15:26] <audreyt> gaal: hey... what's up?

[15:27] <gaal> hey. I didn't get a chance to follow up on trying VOpaque. let me find the ol' paste...

[15:27] <xinming> audreyt: I mean the freenode server address is changed. :-/

[15:27] <audreyt> cool... I'll be back in ~10min

[15:28] <xinming> I don't know if irc.freenode.net still works

[15:28] <gaal> oh! too bad about the laptop and ipod :-)

[15:28] <gaal> s/)/(/

[15:28] <audreyt> heh :)

[15:28] <clkao> XD

[15:29] <gaal> I guess my fingers are, uh, smiley-happy.

[15:29] <gaal> http://sial.org/pbot/15013

[15:32] <gaal> clkao + audreyt: I don't see an obvious reason for the ^use problem in the parser.

[15:33] <xinming> audreyt: how do you translate monadic action into Chinese?

[15:34] <gaal> also, this does work:

[15:34] <gaal> ./pugs -e 'eval qq{ \n  use Ex; say "ho"}; say "hi"'           => "hi\nho", which is correct

[15:35] <gaal> (where Ex is some module that happens to load OK and do nothing)

[15:36] <gaal> audreyt: ok, I don't see how VOpaque can help at all.

[15:38] <audreyt> xinming: just "action: -- ignore Monad

[15:39] <audreyt> gaal: unsafeEvalExp yields Val not Exp iirc

[15:40] <audreyt> oh wait

[15:40] <audreyt> sorry it yields Expm just patmatch it

[15:40] <audreyt> now you have as list of values that's exported?

[15:41] <audreyt> (map Val bindings) give you raw vals

[15:41] <audreyt> as Val :: Val -> Exp

[15:41] <audreyt> but won't you need the names as well?

[15:41] <avar> why does @a »++ give me a can't modify constant error in a subroutine that has sub f(@a is rw) ..

[15:42] <audreyt> avar: hm... commit a test?

[15:42] <audreyt> (do you have a committer bit?)

[15:42] <audreyt> also try "is copy" and see if they differ

[15:43] <gaal> whoops, sorry, let me nopate the whole patch again (the list contains bindings, supposedly complete)

[15:44] <avar> is copy gives me the same error

[15:44] <pasteling> "gaal" at 192.115.25.249 pasted "export patch wip" (88 lines, 4.2K) at http://sial.org/pbot/15014

[15:44] <avar> hang on, I'll upload a testcase

[15:44] <audreyt> avar: a bug then. write a t/pugsbugs/

[15:45] <gaal> audreyt: the idea is I keep "mkExp name"s around.

[15:45] <gaal> (hoping it works.)

[15:45] <avar> http://avar.lir.dk/tmp/calc.p6

[15:45] <avar> (and I don't have commit rights)

[15:45] <avar> ;)

[15:46] <gaal> avar: email? :)

[15:46] <audreyt> gaal: that will fully eval mkExp name

[15:46] <audreyt> in part of earlier unsafeEvalExp

[15:46] <audreyt> instead of keeping it around

[15:46] <avar> email you the testcase?

[15:47] <audreyt> avar: no, so that gaal can give you the committer bit

[15:47] <gaal> avar: no, what is your email, so we can give you a commit bit

[15:47] <avar> hah

[15:47] <gaal> you can /msg if you like.

[15:47] <avar> [email@hidden.address] 

[15:47] <avar> ;)

[15:47] <audreyt> gaal: can you post the patch somewhere in (say) src/Pugs/Parser.hs.export.patch or something in the repo, and invite avar to openfoundry?

[15:48] <audreyt> I'll check back in ~9hrs when I have my own laptop back... can't do much coding in this one :/

[15:48] <avar> nah it's just that projects usually don't give out commit rights so easily;)

[15:48] <gaal> avar: invitation sent. welcome aboard!

[15:48] <audreyt> gaal++ avar++

[15:48] <avar> but yeah, I already have the repository checked out, I'll make a testcase & commit it

[15:48] <avar> for is rw and is copy

[15:49] <audreyt> gaal: if you want to keep whole Exp around as a Val, you may have to ship it around in a VOpaque (or better -- just use name/value in the hash to encode the exp)

[15:49] <audreyt> gaal: but I don't have srctree in front of me... so if you can committ the (patched or just the patch) Parser.hs it'd help me a lot tomorrow

[15:49] <audreyt> g'nite :)

[15:50] <gaal> sure. i'll see what progress i make, and at the end of the day i'll post.

[15:50] <audreyt> danke!

[15:50] <audreyt> gaal++

[15:50] <gaal> good luck laptophunting tomorrow!

[15:50] <audreyt> and sorry about not been of much help... laptopping--

[15:50] <audreyt> &

[15:50] <gaal> night :)

[16:18] <philstar> got one question about perl6: will there be an index variable (in whatever replaces foreach () {} )?

[16:19] <xinming> philstar: do you mean the $_ ?

[16:19] <xinming> there won't be foreach in perl 6

[16:19] <philstar> xinming: no, I mean the number of the array element called

[16:19] <philstar> I'm asking this because I seem to be writing for(my $i=0;$i<@array;$i++) {} an awful lot and getting tired of it

[16:20] <philstar> but usually I need to use $i, so I can't use foreach in those cases

[16:21] <xinming> philstar: why not use for (@array) {bla..bla.. $i ++? }

[16:21] <xinming> my $i = 0; for (@a) { bla..bla.. $i ++ }

[16:21] <xinming> philstar: and by the way, for and foreach are equal in most case.

[16:22] <philstar> xinming: thanks for pointing that out... I must be stupid...

[16:22] <xinming> and in perl 6, there won't be foreach

[16:22] <philstar> that's cool then

[16:22] <xinming> philstar: does that resolve your problem?

[16:22] <philstar> yes, thanks

[16:23] <xinming> :-)

[16:23] <xinming> philstar: by the way, this works for perl 5,

[16:23] <philstar> hmm... on second thought, all I save are three characters

[16:24] <philstar> $i<

[16:24] <philstar> so it's actually almost as verbose as before!

[16:24] <xinming> hmm, maybe you mean the iterator.

[16:24] <xinming> hold on please

[16:25] <philstar> sure

[16:26] <philstar> brb

[16:28] <gaal> ?eval for <a b c d e>.kv -> $i, $v { say "$i/$v" }

[16:29] <xinming> gaal: do you know if there is a iterator or iter function which will return the current value of the iterator?

[16:30] <gaal> xinming: not afaik

[16:30] <gaal> the above code doesn't work, btw: if you do it with an array, though, it does.

[16:30] <gaal> I think that's a bug?

[16:30] <gaal> ie this does work:

[16:31] <gaal> ?eval my @l = <a b c d e>; for @l.kv -> $i, $v { say "$i/$v" }

[16:31] <gaal> (where's evalbot?)

[16:31] <philstar> gaal: this is perl6, I take it?

[16:32] <gaal> philstar: yes.

[16:32] <philstar> thanks

[16:33] <gaal> $i will start at 0, btw.

[16:33] <xinming> philstar: sorry, I can't understand your question, But you can ask here later if anyone comes.

[16:33] <philstar> xinming: no, you were right: it's the iterator value I'm looking for

[16:33] <avar> .kv ?

[16:33] <gaal> avar: "k"ey-"v"alue

[16:34] <avar> ah, of course;)

[16:34] <gaal> used for hashes, it yields %h.keys Y %h.values

[16:34] <gaal> with lists, it gives 0 .. Inf Y @list

[16:35] <gaal> and with a pair, it just gives ($p.key, $p.value)

[16:35] <clkao> nothingmuch: so what's the tool to diff two test result yml?

[16:35] <gaal> (Y is the zip operator.)

[16:35] <gaal> clkao: what's wrong with diff? :-)

[16:36] <gaal> grep -v time measurements first though.

[16:36] <gaal> they are already in the same order - or should be.

[16:41] <avar> gaal: http://rt.openfoundry.org/Foundry/User/?User=78788

[16:41] <avar> woot

[16:42] <xinming> avar: add yourself to AUTHOR first. :-P

[16:43] <avar> I can claim to be co-author for the AUTHOR file then

[16:44] <gaal> avar: :-)

[16:45] <avar> how do I check out the repository under my username so I can commit stuff?

[16:45] <xinming> I think you can

[16:45] <avar> svn co [some svn schema]://[avar]...@svn.openfoundry.org/pugs ...

[16:45] <gaal> you'll be prompted for login on your first checkin.

[16:45] <xinming> yes.

[16:45] <gaal> your currently anonymous co will be upgraded when you do that.

[16:46] <avar> ah of course

[16:46] <avar> I've usually worked with svn repositories though svn+ssh

[16:49] <avar> I know what I'm going to write, example scripts which demonstrate every language feature;)

[16:49] <avar> is there something like that already?

[16:51] <avar> is that list ordered by en_US.utf8 ?

[16:51] <avar> (AUTHORS)

[16:51] <avar> because then I'm at the top;)

[16:52] <xinming> avar: the first letter must be upper cased. ;-)

[16:53] <avar> uh, apperently not..

[16:53] <avar> I'm between Ad and Al

[16:54] <avar> Ae and Af rather

[17:00] <gaal> avar: look in examples/ - and check out pugs::hack (hack.pod)

[17:05] <stevan> hey gaal 

[17:07] <gaal> yo stevan 

[17:07] <gaal> what up?

[17:09] <stevan> not much... and you?

[17:09] <stevan> just trying to test the Bootstrap.pil 

[17:10] <stevan> however my dog thinks this is a horrible idea, so it is going kinda slow :)

[17:10] <gaal> just testing the tensility of the parser and the runtime

[17:11] <stevan> only as a side effect of testing the model itself :)

[17:11] <gaal> incidentally I rented Cool Hand Luke. But, er, not on the chanell :)

[17:12] <gaal> oh, i meant that was what *I* was up to

[17:12] <stevan> ah

[17:12] <stevan> excellent :)

[17:12] <gaal> moving stuff from Exp to Eval. Carefully. :)

[17:12] <stevan> TDD++ :)

[17:13] <gaal> oh yeah

[17:17] <nothingmuch> clkao: head revision of Test::TAP::Harness

[17:17] <nothingmuch> err

[17:17] <nothingmuch> HTMLMatrix

[17:17] <nothingmuch> http://nothingmuch.woobling.org/Test-TAP-HTMLMatrix/

[17:17] <nothingmuch> http://nothingmuch.woobling.org/Test-TAP-Model/

[17:17] <nothingmuch> see example.pl in TTH

[17:18] <gaal> nothingmuch: ping

[17:19] <nothingmuch> pong on IOCQ

[17:23] <webmind> ey Smari 

[17:23] <Smari> Eyy webmind!

[17:24] <clkao> nothingmuch: i basically want to compare js run and jsperl5 run, ignoring those failing haskell one

[17:25] <webmind> Smari, looking into perl6 eh?

[17:25] <nothingmuch> clkao: from the smoke server, or from yml?

[17:25] <avar> gaal: Am I supposed to transliterate non-ascii characters in the first field in authors?

[17:26] <gaal> avar: it's utf-8

[17:26] <nothingmuch> from yml: unserialize, and copy paste the example.pl file in T::T::H, and just put the data instead of runs

[17:26] <nothingmuch> http://nothingmuch.woobling.org/Test-TAP-HTMLMatrix/example.pl

[17:26] <avar> yeah but people have stuff like Amir "lightstep" Livine Bar-On               עמיר ליבנה בר-און

[17:26] <avar> and Andras Barthazi                              András Bártházi

[17:26] <gaal> that's utf-8 :-)

[17:26] <avar> there

[17:26] <Smari> webmind: I have for ages, just not very actively. Got updated yesterday to what's important.. and I'm impressed.

[17:26] <clkao> nothingmuch: either

[17:27] <nothingmuch> clkao: 'my $model_ok'...'my $model_failing' - replace with loads

[17:27] <nothingmuch> but for smoke server - too late

[17:27] <webmind> Smari, ah k :)

[17:27] <nothingmuch> it uploads the HTML instead of the YML

[17:27] <nothingmuch> we need a smoke server that's:

[17:27] <nothingmuch> a. yml friendly

[17:27] <nothingmuch> b. easier to maintain

[17:27] <nothingmuch> c. not a .cgi

[17:27] <nothingmuch> (or at least not necessarily a CGI)

[17:28] <nothingmuch> d. caching (to make a. easier)

[17:28] <nothingmuch> not just yml friendly - storable friendly is also important

[17:28] <svnbot6> r8282 | avar++ | * I'm one of the authors of this hack, apperently;)

[17:28] <rafl> Maybe someone should rewrite it using catalyst..

[17:30] <rafl> Actually I have some free time. Can you tell me what it needs to do exactly? I think I'll rewrite it.

[17:30] <rafl> But unfortunately I don't know much about the smoke process.

[17:32] <nothingmuch> rafl: basically, test harness runs

[17:32] <nothingmuch> Test::TAP::Model collects the run data

[17:32] <nothingmuch> into a thing that can be serialized

[17:32] <nothingmuch> this should be storabled, and posted to the app

[17:32] <nothingmuch> which should save the file in some model (file, or DB, i guess)

[17:33] <nothingmuch> list view can display by date, platform, yadda yadda

[17:33] <nothingmuch> (should be multiproject friendly... we in pugsland like backends, parrot needs runcores and platforms)

[17:33] <nothingmuch> (catalyst would like perl/module versions)

[17:33] <nothingmuch> C::P::Cache can be used to save rendered HTML for each yml

[17:33] <nothingmuch> or storable

[17:34] <nothingmuch> compression support for uploads should be available too

[17:34] <nothingmuch> the layout of the current thing is pretty nice, and i guess that saves time too

[17:34] <nothingmuch> but it should be more comprehensive

[17:34] <nothingmuch> lastly, a compare feature would be nice - check N results, and it makes a consolidated display (like in the example.pl i linked to)

[17:36] <rafl> OK, I'll do that.

[17:36] <nothingmuch> rafl++!

[17:36] <nothingmuch> you get a beer

[17:36] <nothingmuch> i'll post a reward on the catalyst wiki

[17:37] <rafl> I'm not sure about how the data should be stored on the server. Would sqlite be sufficient?

[17:37] <nothingmuch> http://dev.catalyst.perl.org/wiki/BeerRewards

[17:37] <nothingmuch> yes, i think it will

[17:37] <nothingmuch> storable in blobs

[17:38] <nothingmuch> (texts, really)

[17:38] <nothingmuch> but some people might prefer a dir of files

[17:38] <nothingmuch> go with what you think is easier

[17:39] <rafl> beer++

[17:39] <nothingmuch> oh, repository snapshot vs release also sucks

[17:39] <nothingmuch> the way i think it should work:

[17:39] <nothingmuch> you have "dimensions" that describe the smoke result

[17:40] <nothingmuch> like in OLAP

[17:40] <nothingmuch> version, branch, platform, etc etc

[17:40] <rafl> Well, with sql comparisons, sorting, etc would be easier.

[17:40] <nothingmuch> the "default" dimension is used to sort them initially

[17:40] <nothingmuch> like, sort by branch, then platform, then version yields pugs smoke page

[17:40] <nothingmuch> err, sorry

[17:40] <nothingmuch> branch, platform, smoke date

[17:41] <nothingmuch> then people can create cross sections

[17:42] <rafl> Sounds reasonable.

[17:42] <nothingmuch> it's also more maintainable than the current way it

[17:42] <nothingmuch> 's hacked in

[17:42] <nothingmuch> basically the model should just be pluggable

[17:43] * clkao grins

[17:43] <clkao> perl5/PIL2JS/runjs.pl --run=jspm --perl5 -e 'use jsperl5:Digest::MD5 <md5_hex>; say md5_hex("test")'

[17:43] <nothingmuch> in the config there's a list of dimension relationship/columns

[17:43] <clkao> this now works

[17:43] <nothingmuch> spidermonkey runtime embedded in perl 5 running perl 5 modules and perl 6 code?

[17:44] <nothingmuch> this runtime prefix thing should be much more generalized

[17:44] <nothingmuch> the interface is the same on perl5: and jsperl5:, so there should be a way to just say "use this interface, and to hell with the backend type"

[17:45] <clkao> nothingmuch: yes

[17:45] <clkao> i know, it needs to be perl5:

[17:45] <nothingmuch> nevermind, it's just a hack now

[17:45] <nothingmuch> but it should be p6l'ed

[17:45] <clkao> autrijus said she can fsck it tomorrow

[17:45] <clkao> p6l?

[17:45] <nothingmuch> perl6-languaged

[17:45] <nothingmuch> the interface for using this should be posted for discussion

[17:47] <nothingmuch> rafl: please mention that you are up for the task on the wiki

[17:49] <rafl> nothingmuch: Done.

[17:50] <clkao> i don't understand this. if you put 'use jsperl5:Digest::MD5 <md5_hex>' in a file it won't work unless it's at the beginning

[17:57] <nothingmuch> rafl: great

[18:13] <svnbot6> r8283 | stevan++ | - created Test::PIL::Boostrap for testing Bootstrap.pil specifically

[18:13] <svnbot6> r8283 | stevan++ | - temp files are now cleaned up by Test::PIL

[18:13] <svnbot6> r8283 | stevan++ | PIL.Native.Bootstrap.pil

[18:13] <svnbot6> r8283 | stevan++ | - added set_* for name, version & authority 

[18:13] <svnbot6> r8283 | stevan++ | - set defaults for version & authority for Class, Object, Module & Package

[18:13] <svnbot6> r8283 | stevan++ | t/pil/bootstrap.t

[18:13] <svnbot6> r8283 | stevan++ | - added 52 tests (11 failing ones) to test the integrity of the meta-model

[18:24] <avar> my @nums = 1..5;

[18:24] <avar> @nums »++;

[18:24] <avar> fails

[18:24] <avar> is it supposed to?

[18:40] <svnbot6> r8284 | avar++ | * A hyper operator testcase that fails

[18:56] <svnbot6> r8285 | clkao++ | perl5/PIL2JS/runjs.pl --run=jspm --perl5 -e 

[18:56] <svnbot6> r8285 | clkao++ |   'use jsperl5:Digest::MD5 <md5_hex>; say md5_hex("test")'

[18:56] <svnbot6> r8285 | clkao++ | now works.

[19:01] <xinming> anyone here can tell me how to run the compiled Javascript code? :-/

[19:03] <clkao> spidermonkey?

[19:03] <clkao> or you use my JavaScript.pm and that runjs line you saw above

[19:04] <araujo> Is it perl6 too much different from perl5?

[19:06] <xinming> open2: exec of js failed at pugs/perl5/PIL2JS/lib/PIL2JS.pm line 162

[19:07] <xinming> :-S

[19:08] <clkao> you have js ?

[19:09] <xinming> No >_<

[19:09] <xinming> by the way, Is the runnable code which can be run in browser? :-/

[19:10] <clkao> see README

[19:10] <clkao> pil2js.pl can create html files for you

[19:11] <xinming> It's really a crazy man who thought compile perl 6 into JavaScript. :-/

[19:11] <xinming> clkao: I will check it

[19:16] <clkao> is it even crazier now the compiled javascript can actually use perl5?

[19:16] <Khisanth> hehe

[19:17] <avar> araujo: what do you consider too much?;)

[19:17] <Khisanth> well there are lots of changes but it's still largely the same

[19:18] <xinming> In fact, I ever think, If we can compile parrot into JavaScript :-)

[19:18] <araujo> avar, well.. so much like we probably think about perl6 like a new language :-P

[19:19] <araujo> we could*

[19:19] <Odin-LAP> araujo: The differences are substantial.

[19:20] <Odin-LAP> Substantial enough that perl5 thinking may not apply to perl6 programming. Which, I guess, makes it a new language.

[19:20] <Odin-LAP> But that doesn't mean it's "too different"! :p

[19:20] <araujo> Interesting, thanks 

[19:20] <araujo> I think you have answered my question ;-)

[19:20] <Khisanth> Odin-LAP: only because you no longer need to rely on tricks to get certain things working (well hopefully)

[19:22] <avar> I'd say it's a new language, given all the differences

[19:22] <Odin-LAP> Khisanth: Well ... yes. But that's usually the difference between languages, isn't it? Having to use tricks in more or fewer places. :)

[19:22] <Odin-LAP> Or sometimes even just different...

[19:35] <leo> clkao: still about?

[19:39] <clkao> yes

[19:46] <leo> at #parrot: 20:34 < ^conner_> I think clkao needs to beat me with a clue stick

[19:46] <leo> you got a minute for him?

[19:48] <avar> multi sub circumfix:<¡ ¡> ($n) { abs $n } <- shouldn't this work?

[19:51] <avar> I'm unable to get any circumfix stuff working

[20:11] <avar> how do I get a hash key from a value?

[20:11] <avar> (first match)

[20:16] <xinming> reverse?

[20:17] <wolverian> theoretically, %hash.reverse<$foo> 

[20:51] <svnbot6> r8286 | avar++ | Replaced:

[20:51] <svnbot6> r8286 | avar++ | -multi sub sum (*$x, *@xs) returns Int { $x + sum(@xs) }

[20:51] <svnbot6> r8286 | avar++ | +multi sub sum (Array *@x) returns Int { [+] @x }

[20:53] <wolverian> isn't the 'sub' there redundant?

[20:54] <rafl> afaik yes.

[20:55] <clkao> doh, the example is not demostrating functional anymore

[20:58] <rafl> avar: Would you please revert your last change?

[20:58] <avar> bah, I was just going through stuff and changing it,)

[20:58] <avar> aiight

[20:58] <rafl> avar: This was an example for functional programing and it's not functional anymore.

[21:02] <svnbot6> r8287 | avar++ | Ooops, wrong directory

[21:03] <rafl> (descriptive commit messages)++

[21:04] <wolverian> heh.

[21:30] <Smari> Hmm. Is there a karmabot here?

[21:34] <Juerd> Smari: Does that matter?

[21:34] <Smari> Juerd: long time no see.

[21:34] <Smari> No, it doesn't.

[21:35] <Juerd> The only reason I'm responding is because I recognised your nick :)

[21:35] <Juerd> How are things?

[21:35] <Smari> But it would explain all the mad incrementing of terms..

[21:35] <Juerd> karma foo

[21:35] <Smari> Things are good.. not been IRCing much for a while.

[21:36] <Juerd> Why are you interested in Perl 6?

[21:36] <Smari> How can I not be?

[21:36] <Juerd> The question wasn't "how" :)

[21:36] <revdiablo> perlbot: karma avar

[21:36] <perlbot> Karma for avar: 1

[21:36] <Juerd> perlbot: karma foo

[21:36] <perlbot> foo doesn't have any karma

[21:36] <Juerd> foo++

[21:36] <Juerd> perlbot: karma foo

[21:36] <perlbot> Karma for foo: 1

[21:36] <revdiablo> perlbot: karma autrijus

[21:36] <perlbot> Karma for autrijus: 90

[21:36] <Juerd> Wowie.

[21:36] <Juerd> perlbot: karma audreyt

[21:36] <perlbot> Karma for audreyt: 8

[21:36] <Juerd> Can it alias? :)

[21:36] <Juerd> i.e. symlink

[21:37] <revdiablo> Sure it could, but I don't think it does. =)

[21:37] <Smari> Haha. Okay.. let me rephrase my answer: I'm a programmer, and a student of mathematics and linguistics. Perl, and particularly Perl 6, is...

[21:37] <Juerd> Uh oh.

[21:37] <Juerd> Maths and linguistics.

[21:37] <Smari> It's a good mix, no matter what people say.

[21:38] <Juerd> Get out of here before discovering that everything you learn in school is only partly true :P

[21:38] <Juerd> Of course it's a good mix.

[21:38] <Juerd> See Perl :)

[21:38] <Smari> Juerd: Hah. Do you think I don't know that already? :P

[21:38] <Smari> Juerd: Exactly.

[21:38] <Smari> I don't know if Perl was a motivation to get into the math/langs mix, probably not though.. 

[21:39] <Juerd> What can your role in Perl 6 be?

[21:39] <Smari> Ahh. My role? User, probably.

[21:39] <Smari> I'd like to develop it, but I have not the time.

[21:39] <Juerd> Right, so why are you here years early then? :P

[21:39] <Juerd> Not that I mind - I'm just curious

[21:39] <Smari> Because I'm never anything but a power user. :)

[21:39] <Juerd> And you want to add pioneer to that?

[21:39] <Smari> Besides, I've got my fingers in way too many things already... 

[21:40] <Smari> Haha. Exactly.

[21:40] <Juerd> It'd be great if you could just start using Perl 6 now, and report bugs in the form of test scripts.

[21:41] <Smari> Working on getting Pugs up.

[21:41] <Smari> Debian is being a bitch though.

[21:41] <Juerd> Huh? It works perlfectly in Debian

[21:42] <Smari> I didn't say it didn't.

[21:42] <Smari> But Debian itsself is being a bitch. Pugs won't compile without Haskel, and Haskel won't install without something that seems to be missing from the repository.

[21:42] <Smari> My fault for using unstable I guess, but hey..

[21:43] <Juerd> Hm, feather runs sid, and I haven't noticed issues yet

[21:43] <Juerd> Let's try to fuck things up, and upgrade

[21:43] <Smari> Probably just rhnet.is

[21:44] <gaal> Smari: apt-get install ghc6, not ghc-cvs.

[21:45] <Smari> gaal: Done that already. It all stops on e2fsprogs, which is ... well:

[21:45] <gaal> Juerd: I've been running unstable for years with very few problems. Not no a server though. :)

[21:45] <Smari> E: This installation run will require temporarily removing the essential package e2fsprogs due to a Conflicts/Pre-Depends loop. This is often bad, but if you really want to do it, activate the APT::Force-LoopBreak option.

[21:45] <Smari> E: Internal Error, Could not early remove e2fsprogs

[21:45] <Smari> Any ideas?

[21:46] <Juerd> gaal: I run it on at least a dozen different servers.

[21:46] <gaal> that doesn't look directly related to ghc, but if you aren't afraid of powerouts, do what it suggests.

[21:46] <Smari> I'd use APT::Force-LoopBreak if I knew where to put it...

[21:46] <gaal> on the command line.

[21:46] <Juerd> gaal: And have, for years, without problems that couldn't be fixed in less time than I'd have spent compiling new stuff myself.

[21:47] <gaal> Juerd: except for once, the gtk2 pic2<->3 trouble that took a week to sort out.

[21:47] <gaal> Smari: I don't rembember the exact syntax, but the apt man page has it, I think.

[21:47] <Smari> Ahh, thanks.

[21:47] <Juerd> Smari: Oh, that stuff has been terribly broken in sid for a while. The solution is to upgrade more frequently :)

[21:47] <Smari> -o of course.

[21:47] <Juerd> Smari: Though you can't go back in time.

[21:47] <gaal> but you can slow it down!

[21:48] <gaal> the technique I know for it doesn't give you longevity though.

[21:48] <Smari> Whee.

[21:48] <gaal> (go to lots of meetings)

[21:48] <Smari> Juerd: Ahh, of course. I haven't upgraded for ages.

[21:49] <Smari> Now.. should I be doing this or studying for my analysis exam?

[21:49] <Juerd> Smari: In any case, make sure you run a 2.4 kernel or newer, or things will break so bad you'll be sorry to have *ever* upgraded.

[21:49] <Juerd> Do you know enough for the exam? Are you confident?

[21:51] <Smari> I am not.

[21:51] <Smari> Juerd: 2.6.3 here.. which is old, but not *that* old.

[21:51] <Juerd> Then study.

[21:52] <Smari> Aye.

[21:52] <Smari> Pugs shall compile first.

[21:52] <Smari> :)

[21:52] <Smari> (I'm reading on Wikipedia ...)

[21:55] <clkao> is the bootstrapping plan somehow docuemnted somewhere?

[21:58] <avar> Smari: still trying to compile it?

[22:02] <xinming> hmm, anyone here tell me how to customize the output of pod2html?

[22:02] <xinming> If I use pod2html, I can't generate the synopsis which is same as the site.

[22:16] <Smari> avar: Still fixing apt.

[22:22] <Juerd> 14Smari, go study!

[22:27] <stevan_> clkao: ping

[22:27] <clkao> stevan_: hi

[22:27] <Smari> Juerd: Yes sir. :)

[22:27] <stevan_> clkao: you were asking about a bootstrapping plan?

[22:27] <clkao> ya

[22:28] <stevan_> for the metamodel? objectspace? or p6-on-p6?

[22:28] <clkao> p6-p6

[22:28] <stevan_> I dont think there is any clearly laid out plan anywhere

[22:28] <clkao> ok, because i was playing around and implemented hyperop stuff in p6

[22:29] <stevan_> luqui said something the other day about having "claimed" it among the p6 cabal

[22:29] <obra> clkao++ # hacking

[22:29] <clkao> was thinking i shall ask to see where this can fit in

[22:29] <obra> clkao: <unicode hotsprings>.org isn't taken

[22:29] <clkao> is it a valid domain name?

[22:29] <obra> yes. 

[22:29] <obra> using punycode.

[22:30] <stevan_> clkao: you might want to take a look at the p6 prelude

[22:30] <clkao> yes

[22:30] <obra> (\u2668).

[22:30] <stevan_> however, I am not familiar with it, so I can't help any more than that

[22:31] <clkao> that's fine. but what's the metameta bootstrap plan then?

[22:32] <obra> (http://xn--j6h.org)

[22:32] <stevan_> clkao: currently it is centered on the Object Space

[22:33] <gaal> whew, package A; use Moose; package B; use Moose works at last (but not lexically)

[22:33] <stevan_> the basic idea is that we have defined a minimal language with minimal features and are using that to implement the metamodel

[22:33] <gaal> stevan! lucille!

[22:34] <stevan_> the hope is that this will make things much more portable, since diff runtimes will only need to implement this mini-language

[22:34] <stevan_> hey gaal

[22:35] <stevan_> clkao: and this mini-lang will eventually morph into PIL2

[22:45] <svnbot6> r8288 | gaal++ | * Pugs.Parser: Perform symbol importation at use time, not parse time.

[22:45] <svnbot6> r8288 | gaal++ |   This means that the second of two packages that use an exported function

[22:45] <svnbot6> r8288 | gaal++ |   sees it, like it should.

[22:45] <svnbot6> r8288 | gaal++ |   TODO: make this import lexically scoped by default; and honor importation

[22:45] <svnbot6> r8288 | gaal++ |   requests on the C<use> line. Oh, and add tests, too!

[23:02] <gaal> audreyt: not quite sure how to do the lexical import; hackage most welcome.

[23:02] * gaal sleeps

[23:02] <gaal> &

