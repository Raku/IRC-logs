[00:10] <dudley_> mmm, I do like the union type over super/subclasses here.

[00:11] <dudley_> but I have to go quickly, so I'll have to finish later...

[00:43] <svnbot> r6995 | stevan++ | Perl6::MetaModel 2.0 -

[00:43] <svnbot> r6995 | stevan++ | * fixed class attribute handling in Perl6::MetaModel

[00:43] <svnbot> r6995 | stevan++ | * added a test from 1.0 which uses class attributes

[02:09] *** sleepster_ is now known as typester

[04:37] <panicst8> how long has perl6 been around there are guys in th js room telling me it hasn't been around for 2 years and i say it has

[04:38] <luqui> depends on how you define "around"

[04:38] <luqui> it's been in design for more than three years

[04:38] <luqui> but the implementation, pugs, only started this february

[04:38] <panicst8> around as in builds of it i know my brother cmilfo who hangs out in here has been monkeying around with it  if not actually using it plus perl 6 essentials was put out by oreilly in 2003 

[04:39] <panicst8> so could he have been using it for 2

[04:39] <luqui> oh, parrot!

[04:39] <Khisanth> heh large part of the book is probably no longer valid

[04:39] <luqui> and P6C in parrot (which was a miserable failure)

[04:39] <panicst8> but it has been around and would a true perl dork ;) my brother hehehe  been playing it it if he eats breaths nad shits perl which he does

[04:40] <panicst8> i do to but not to his extent.

[04:40] <luqui> okay, well, again, depends on how you define "around"

[04:41] <luqui> the *current implementation* has not been around for two years. how about that?

[04:42] <panicst8> ;) done i just  hate being told i am wrong. hehe even when i most probably am ;)

[04:46] <Supaplex> wrong!

[04:46] <buu> Seconded.

[04:52] <panicst8> buu at no time did i say current implimentation i said he has been using/working with it for 2 years and tomorrow during the day pop in and chat with him he hangs out in here for some reasaon cmilfo i beleive.

[04:52] <panicst8> oh  he is in the room now but most probably asleep

[04:52] <Supaplex> not if you keep this racket up

[04:54] <luqui> Khisanth, do you read p6l?

[04:55] <panicst8> ;)

[04:55] <Khisanth> nope, I figure I'll wait till p6 is more or less spec out before doing any serious reading on it

[04:55] <luqui> ahh.  well, I proposed that @a >>+ 3 be equivalent to fmap (+3) @a...

[04:55] <luqui> if that makes sense (paskell :-)

[04:56] <Khisanth> fmap?

[04:56] <luqui> so folks can implement their own hyper functors

[04:56] <luqui> uh, from Haskell

[04:57] <luqui> Khisanth, you are from haskell background aren't you?

[04:59] * Khisanth nods

[05:00] <luqui> so I basically just proposed that hypers are a short form for fmap.  "@a >>+ 3" is [email@hidden.address] $x { $x + 3 })"

[05:00] <luqui> aanyway, so, my work with >><< is done

[05:01] <luqui> my next goal is to get the rest of the design team to accept it so I can turn junctions into a functor and begone with those horrible things that don't obey any laws

[05:02] <Khisanth> hrm how is fmap different from map?

[05:02] <Supaplex> the f part

[05:02] <Khisanth> :)

[05:03] <luqui> map works on lists, fmap works on all Functors (so for [a], fmap = map).   But trees are also functors, and also all monads

[05:03] <Supaplex> o.O

[05:03] <luqui> but that's haskell's way of looking at it.  In Perl, I'll say that lists, hashes, and junctions are all functors

[05:04] <luqui> so you'll say if (1|2|3) >>== 3 {...}

[05:05] <Khisanth> ...

[05:06] <Khisanth> as if there weren't enough operators already :)

[05:06] <luqui> hyper operators already exist

[05:06] <luqui> except in the current state of perl, they only work on lists

[05:06] <luqui> I'm just trying to get them to work on junctions (and other stuff) too

[05:07] <luqui> because, as it currently stands, treating junctions as normal values allows you to prove absurdities (like every object is equal to every other object)

[05:08] <luqui> so junctions must not be normal values (we knew that), but I want them to be.  This is just a way to keep the functionality and allow junctions to be normal.

[05:08] <luqui> anyway, I should really get to my homework

[05:08] <luqui> ?eval if 1|2|3 == 2 { say "2 is equal to 1 or 2 or 3" }

[05:08] <evalbot_6995> 2 is equal to 1 or 2 or 3 bool::true 

[05:08] * luqui &

[07:09] <nothingmuch> morning

[07:10] <NSK> hi

[07:15] <smith100> suc

[07:32] <dduncan> very early morning

[08:08] <gaal> why are pragma and module load declarations bundled together in the syntax, anyway?

[08:09] <wolverian> can where { } blocks have side effects?

[08:09] <gaal> when i say "use strict", i indeed want to load module strict if it wasn't loaded yet, but what i really mean is something like

[08:09] <gaal> pragma strict on

[08:09] <gaal> where "on" is some default activation

[08:09] <gaal> wolverian: yes

[08:10] <nothingmuch> well, i guess you could say 

[08:10] <gaal> wolverian: you can put whatever you like in them. and you don't HAVE to have any where blocks in a given; you can do given $foo { bare_code(); when $x { smth() } more_bare_code() }

[08:11] <nothingmuch> %*PRAGMAS<strict>.enable or something

[08:11] <nothingmuch> strict::import is probably just that

[08:11] <nothingmuch> wait, thats %?PRAGMAS since it's lexical

[08:11] <gaal> so re: pragmas: i don't like how configuration of modules in general is conflated with importation, and i guess pragmas are a special case

[08:12] <wolverian> gaal, I mean where { } as in 'subtype Foo of Bar where { ... }' etc

[08:12] <gaal> ahh, THAT where :) dunno, sorry

[08:12] <wolverian> I'm not aware of any other where :)

[08:12] <gaal> oh right, i was thinking of when {}.

[08:12] <wolverian> ah, right.

[08:12] <nothingmuch> gaal: did you see the compilation mish mash?

[08:12] <nothingmuch> it was lots of fun

[08:12] <nothingmuch> wolverian: yes they can

[08:13] <nothingmuch> wolverian: there's no real way to limit them

[08:13] <gaal> re: pragmas again - you can't say %?PRAGMA = x because the assignment has to happen at compile time

[08:13] <wolverian> nothingmuch, I thought pugs can do that?

[08:13] <nothingmuch> it's probably not a good pragma

[08:13] <gaal> so it should get a keyword of its own, i think

[08:13] <nothingmuch> ugh

[08:13] * nothingmuch confused himself

[08:13] <gaal> nothingmuch, yes; and it made my head hurt

[08:13] <nothingmuch> it's probably a good practice to make side-effectful where clauses

[08:13] <gaal> as you no doubt intended

[08:13] <nothingmuch> but there's no where to tell which side effects are validddd

[08:14] <wolverian> hm.

[08:14] <nothingmuch> actually i tried to make complex things slightly simpler

[08:14] <nothingmuch> i reduced my headache at least ;-)

[08:14] <gaal> heh

[08:14] <wolverian> I thought where clauses are strictly for making stricter types, so it'd make sense for perl to be able to run them as many times as it likes

[08:14] <wolverian> (without, uh, weird side effects..)

[08:15] <nothingmuch> wolverian: in my mmd proposal I proposed that where clauses are executed in order of declaration, after all other constraints on the candidate list have been verified, and the first candidate that passes all the where clauses is taken

[08:15] <gaal> nothingmuch: anyway, it deserves more attention than i could afford, so i haven't really attempted to grok it yet.

[08:15] <nothingmuch> gaal: basically &infix:<+> is not a builtin

[08:15] <nothingmuch> it's a foreign function

[08:15] <gaal> i know, i read that part.

[08:16] <nothingmuch> ah, so not much more to say

[08:43] <integral> nothingmuch++

[08:52] <nothingmuch> integral: huh?

[10:08] <f0rth> `

[10:13] <nothingmuch> dum dee dum

[13:59] *** slvls is now known as Sylvain-Loiseau

[15:30] <dudley_> stevan: Some sucker started working on Scala's unit testing, so maybe the Scala mm is back on :-)

[15:50] <eric256> hello

[15:54] <dudley_> hello

[16:06] <wolverian> where is everyone? :(

[16:07] * rafl is over here

[16:07] * stevan is hiding behind the type checker

[16:10] <stevan> dudley_: re: Scala MM -> cool,.. Scala has a lot of potential I think

[16:11] <dudley_> I agree. 

[16:11] <dudley_> It just needs a little help becoming more practical

[16:14] <stevan> yup

[16:16] <dudley_> but it'll have to wait a little while so I can catch up on $work--

[16:19] <stevan> dudley_: I need to finish the Role stuff anyway

[16:20] <stevan> and I have a small $work project coming up,.. but it shouldnt interfere too much ;)

[16:20] <dudley_> Heh, famous last words...

[16:20] <stevan> nah, I am pretty sure this will be painless

[16:28] *** typester is now known as typeout

[17:07] *** typeout is now known as typester

[18:36] * nothingmuch is bored

[18:37] <nothingmuch> autrijus: how's work treating you?

[18:38] *** typester is now known as sleepster

[18:39] <luqui> wtf! why is gentoo's scala so screwed?

[18:40] <nothingmuch> hiya luqui 

[18:40] <dudley_> luqui: How do you mean?

[18:43] <dudley_> Gentoo's got an old version

[18:43] <luqui> it points me to a wrapper script that is empty!

[18:44] <luqui> it's okay, I installed manually

[18:47] <nothingmuch> grunt

[18:48] <nothingmuch> ddd is  not doing anything with perl

[19:18] <masak> stevan++, iblech++, fglock++, rafl++ # for docs/journal/2005-09-12.kwid, thx

[19:23] * rafl still wonders if it will be journaled some day..

[19:44] * Aankhen`` goes to sleep.

[19:44] <Aankhen``> G'night.

[19:44] <Limbic_Region> anyone about?

[19:44] <fglock> hi

[19:45] <Limbic_Region> I was wondering if anyone/everyone had received an email from an apparent editor interested in finding someone to write a Perl book

[19:45] <Limbic_Region> I don't get very much spam at all at that particular address so I was half thinking it was legit

[19:46] <Limbic_Region> I find it incredibly odd that it would come while I have a proposal into a different publisher

[19:47] <Limbic_Region> ok - so either no one is listening or no one cares or no one has received such an email

[19:48] <fglock> I was checking my spam filter for something like that - no, no mail

[19:48] <Limbic_Region> actually - it came with a phone number - I am calling it now

[19:50] <Limbic_Region> wow - it was legit

[19:51] <fglock> are you going to write two books?

[19:52] <Limbic_Region> I told them that unless the first book is turned down (no contract at this point just in the feeling it out process) or the topic was very different I was interested

[19:52] <Limbic_Region> s/was/wasn't/

[19:53] <Limbic_Region> writing a book is HARD work btw

[19:53] <Limbic_Region> All I have done is put together a detailed outline and put my research notes in related piles and it has consumed far more time then I would like to admit

[19:53] <fglock> and little money - but it is nice work

[19:54] <Limbic_Region> well - I am not interested in the money

[19:55] <Limbic_Region> if I were - I wouldn't work on OS projects or devote my timing helping people at the Monastery and IRC

[19:56] <Limbic_Region> so what's new in the world of Pugs?

[19:56] * Limbic_Region has been out of the loop for aforementioned reasons

[19:57] <fglock> the perl5 backend is working better than expected

[19:58] <Limbic_Region> it seems from my limited exposure that focus has been on backends and not expanding the p6 feature set - sound accurate?

[19:58] <nothingmuch> sort of

[19:58] <fglock> yes

[19:58] <nothingmuch> autrijus is slightly swamped recently

[19:59] <Limbic_Region> I have seen his HW problems

[19:59] <Limbic_Region> very sorry to hear that some of the stuff lost has no up to date backups

[19:59] <Limbic_Region> that happened to me in the great HD crash of '03

[20:01] <fglock> re feature set - putter is working on rules, and stevan is working on the object model

[20:01] <ods15> hya nothingmuch !

[20:03] <fglock> I'm working in Infinite/lazy lists

[20:03] <Limbic_Region> fglock - do you understand how the object model fits into p6 objects?

[20:03] <Limbic_Region> or does it not currently

[20:04] <fglock> the javascript and perl5 backends already use the metamodel

[20:04] <fglock> basically, it means that class is an object

[20:05] <nothingmuch> hi ods15 

[20:05] <Limbic_Region> hmmm - I guess I am not asking my question very effectively

[20:06] <Limbic_Region> and my brain is dead so I won't bother trying

[20:07] <fglock> no, maybe I didn't understand

[20:08] <Limbic_Region> my understanding was this (which could very well be wrong)

[20:09] <Limbic_Region> before the metamodel, pugs had some of the OO that was outlined in AES12

[20:09] <Limbic_Region> it wasn't quite right and it wasn't quite complete but it was a start

[20:09] * nothingmuch wishes someone would comment on his threads

[20:10] <Limbic_Region> then the metamodel came along whose original goal was to completely define the OO behavior in p5

[20:11] <Limbic_Region> which was to flesh things out and figure out what was really going on

[20:11] <nothingmuch> the goal was to completely define stuff period

[20:11] <nothingmuch> perl 5 was just the most accessible platform

[20:11] <Limbic_Region> at which point it would be incorporated into Pugs replacing the existing OO

[20:12] <Limbic_Region> but as far as I know, that last step has been derailed to be incorporated into backends

[20:12] <Limbic_Region> not the Pugs core

[20:12] <Limbic_Region> so my question was about how much, if any, was the pugs core using the metamodel

[20:13] <fglock> the "Haskell backend" should incorporate the matamodel

[20:13] <Limbic_Region> nothingmuch - my understanding and your statements don't disagree though I may have not said them as succinctly

[20:14] <Limbic_Region> exactly fglock

[20:14] <fglock> there is a lack of people hacking Haskell these days

[20:15] <Limbic_Region> the "Haskell backend" is currently using a different model for its OO then the other supported backends

[20:15] <Limbic_Region> and my question was WRT to that backend - which I consider base/core functionality

[20:18] <fglock> the Haskell backend is a bit stalled. most of the developments have been in small fixes to PIL

[20:19] <Limbic_Region> ok - my intermittent exposure hasn't lead me astray

[20:20] <GeJ> fglock: the plan was for stevan to finish the MM so autrijus was implementing it, wasn't it?

[20:21] <fglock> yes, but autrijus has had little available time

[20:21] <GeJ> yes, I read that.

[20:22] <GeJ> I wish sometimes The Man would have a clone() method implemented :)

[20:23] <PerlJam> It would be good enough if TPF could fund autrijus for a year

[20:24] <fglock> fortunately the MM have been evolving, so when it finally gets implemented, it would be "right"

[20:24] <GeJ> does he have a paypal account or something?

[20:24] <Limbic_Region> GeJ yes

[20:25] <Limbic_Region> I wrote a journal entry about his current state of funding and accepting donations

[20:25] <Limbic_Region> let me see if I can find it

[20:25] <GeJ> Limbic_Region: oh yes, I remember that

[20:25] <Limbic_Region> http://use.perl.org/~Limbic%20Region/journal/26062

[20:30] <GeJ> Limbic_Region: mail only... ok.

[20:39] * geoffb is finally back with a new system

[20:42] <fglock> welcome back geoffb, be welcome, system

[20:44] <geoffb> :-)

[20:44] <geoffb> rafl, ping

[20:45] <rafl> geoffb: pong

[20:46] <geoffb> rafl, where is pugs in the upload process?

[20:46] <geoffb> I was going to take the opportunity with the new system to try an apt-get

[20:47] <rafl> geoffb: http://ftp-master.debian.org/new.html

[20:47] <rafl> geoffb: If you would like I can provide you some debs built with pbuilder.

[20:48] <geoffb> Nah, I was just going to test and then overwrite with a hand-built one anyway.

[20:48] <geoffb> thanks though.

[20:48] <geoffb> Is it just waiting for time to pass, or is something else blocking it?

[20:49] <rafl> geoffb: No. It's only waiting for ftp-master approval.

[20:49] <geoffb> nodnod

[20:50] <rafl> Well, haskell-src-exts also is. If it's approved I'll also do an hs-plugins upload so we'll get haskell eval support for pugs.

[20:52] <rafl> Maybe I'll also do that upload before, but we'll need to wait for the ftp-masters anyway.

[20:53] <rafl> geoffb: But what you should be able to install right now is everything that pugs needs to build/run/smoke/whatever (except, hs-plugins and parrot) (if I didn't miss something obvious).

[20:54] <geoffb> rafl, nodnod

[20:54] <geoffb> right now I'm trying to find my old subversion password so I can be a committer again.  :-)

[20:55] <rafl> Uhm, I think debian can't help you with that.

[20:55] <geoffb> rafl, heh

[20:55] <sleepster_> hi

[20:56] <geoffb> hi sleepster

[20:56] <sleepster_> moo.

[20:58] <geoffb> Oh wow, over 7000 revs.  Go team!

[21:05] <fglock> geoffb: http://rt.openfoundry.org/Foundry/Home/Guest/Reminder.html - password reminder

[21:05] <geoffb> fglock, thanks for the info.  Thankfully, I had not nuked my old machine -- of dubious merit, subversion stores passwords in plaintext

[21:06] <geoffb> right now I'm just doing a massive sync, and seeing how many of pugs's build-depends I can actually install right now

[22:25] <rafl> Yeeeeeehaaaaw! 1596     050914 Debian Installer               (  21) pugs_6.2.9-1_i386.changes ACCEPTED

[22:25] * rafl does the "pugs is in Debian"-dance

[22:26] <integral> wow!  that's fantastic!

[22:30] <rafl> haskell-src-exts as well. Jippi.

[22:33] <rafl> Hm. I have no more packages waiting in the NEW queue now.. I think that should be changed. :-)

[22:43] * rafl considers to go to sleep after being awake about 34 hours..

[22:46] <luqui> rafl, probably a good idea

[22:46] * luqui can't go much more than 24

[22:47] <rafl> Well, I still have half a beer to go. :-)

[23:34] <rafl> Grr.. I can't sleep anymore. Help!

[23:35] <luqui> *whack*

[23:38] <rafl> Hm. Something useful to to would be cool. Do you want some of your stuff packaged in Debian, luqui?

[23:39] <luqui> some of my stuff?

[23:39] <rafl> s/stuff/CPAN $&/

[23:40] <luqui> huh.  sure.

[23:40] * luqui wonders what he's proud of enough...

[23:40] <rafl> Or did you write some other cool software that may be usefull in Debian?

[23:40] <luqui> nope, I haven't :-)

[23:44] <rafl> How about Perl6::Class?

[23:49] <rafl> svnbot seems to be dead again. :-(

[23:53] <rafl> No? OK, I'll play some blobwars in this case..

