[00:00] <mugwump> I guess I don't need the built-in ASCII ones to be overloadable; there's plenty of lookalike unicode characters I can use :->

[00:02] <meppl> gute nacht

[00:03] <mugwump> das bin alles du sagen!

[00:06] <mugwump> Ich bedeute, ist das alles, das Sie Ã¼berhaupt sagen;)

[00:09] <eric256> later all.

[00:10] <autrijus> SamB: so you broke pugscc for this release... :-/

[00:10] <SamB> autrijus: oops

[00:10] <SamB> how?

[00:10] <autrijus> SamB: I think I'll revert things to before the <ref> bug

[00:11] <meppl> so i made tests for a developer some weeks ago  :o)        thats my only contributuin as yet

[00:11] <SamB> I thought that was there *before* I started messing with it?

[00:11] <autrijus> SamB: that is possible. then it's not your fault :)

[00:11] <autrijus> I merely ran "svk annotate"

[00:11] <autrijus> and saw your name associated with the 

[00:11] <autrijus>  16860  (  bsmith 2005-05-10):          instance (Typeable a) => Show (TVar a) where

[00:11] <autrijus> line

[00:11] <autrijus> apologies if that's actually broken before you

[00:12] <autrijus> meppl: that's nice :)

[00:12] <autrijus> ok, no big deal. I'll just declare it broken.

[00:16] <autrijus> SamB: right, it was broken before you started hacking AST.Internals. my apologies

[00:17] * autrijus wonders what really broke it

[00:23] * mugwump dashes off home to meet the guy who's installing his 55 MEGABIT uplink

[00:23] <autrijus> :)

[00:23] <autrijus> nice

[00:24] <mugwump> sadly I won't get full rate to work

[00:24] <mugwump> as we've only got a 10Mbit fibre connection here

[00:25] <theorbtwo> You know, it's a crazy world when the 10Mbit fibre connection is the slow one.

[00:27] *** ChanServ sets mode: +o autrijus

[00:27] *** autrijus sets mode: -o autrijus

[00:28] <autrijus> so, preflight. finally

[00:29] *** autrijus changes topic to: http://pugscode.org/tmp/Perl6-Pugs-6.2.6-pre1.tar.gz | http://pugscode.org/ <Overview Journal Logs> | http://pugs.kwiki.org

[00:29] <theorbtwo> Does this mean that I should wait to check in any Code::Exp patches?

[00:30] <theorbtwo> (Not that I'm actively working on them at the moment...)

[00:30] <autrijus> Preflight! http://pugscode.org/tmp/Perl6-Pugs-6.2.6-pre1.tar.gz

[00:30] <autrijus> theorbtwo: well, if you're relatively sure it won't break existing tests, go ahead :)

[00:30] <theorbtwo> Nod.

[00:36] <autrijus> is anyone running smoke on the preflight? :)

[00:39] <wolverian> sorry, have to go sleep. 25 hours or so of the waking world is too much

[00:40] <autrijus> that's fine :)

[00:40] * autrijus ponders if letting it simmer a bit is a better idea

[00:41] <autrijus> SamB: the compile problem is fixed. it's caused by Prelude. sorry :)

[00:41] <SamB> you mean GHC.*?

[00:42] <SamB> then again, I guess that is where everything in Prelude comes from...

[00:42] <SamB> (nearly)

[00:43] <autrijus> I mean src/perl6/Prelude.pm

[00:43] <autrijus> SamB: got some time to run a "make test"? :)

[00:49] *** ChanServ sets mode: +o autrijus

[00:49] *** autrijus sets mode: -o autrijus

[01:03] <puetzk> anyone here want to commit a patch to docs/quickref/unicode with more of the vim digraphs?

[01:04] <autrijus> puetzk: why don't you commit yourself?

[01:04] <puetzk> autrijus: I suppose I could ask for a committer bit too :-)

[01:04] <autrijus> puetzk: email? :)

[01:05] <puetzk> but then I'd have to learn haskell

[01:05] <puetzk> not that that would be bad :-)

[01:05] <autrijus> nah, you can commit in docs/ first :)

[01:05] <autrijus> what's your email again?

[01:05] <puetzk> [email@hidden.address]
[01:08] <autrijus> invitation sent. welcome aboard!

[01:08] <autrijus> oh wait

[01:08] <autrijus> you're already registered.

[01:08] <autrijus> you're a committer now :)

[01:08] <puetzk> registered where?

[01:08] <autrijus> in openfoundry

[01:08] <puetzk> oh, since I submitted a bug

[01:09] <puetzk> ok :-0

[01:10] <autrijus> anyone on win32 willing to test the preflight?

[01:11] <puetzk> committed :-)

[01:17] <eric256_> the call for a test still out there?

[01:18] <eric256_> i can run a test on Win32 if needed

[01:18] <autrijus> woot!

[01:18] <autrijus> yes

[01:18] <eric256_> do you want smoke or just a regular test run?

[01:18] * theorbtw1 supposes he should do that testing thing.

[01:18] <autrijus> eric256_: just "make test"

[01:19] <autrijus> from the tarball in the topic

[01:19] <autrijus> http://pugscode.org/tmp/Perl6-Pugs-6.2.6-pre1.tar.gz

[01:19] <theorbtw1> Oh, that isn't equiv to a svn checkout?

[01:19] <autrijus> it's somewhat earlier

[01:19] <autrijus> should be the same

[01:19] <eric256_> eww tarball?  can i just SVN a certain version?

[01:20] <autrijus> so if you already have a checkout going, just use that

[01:20] <autrijus> eric256_: you can use svn also. the idea of tarball is just making sure the manifest etc are right

[01:20] <eric256_> i'll download that then

[01:20] <theorbtw1> Anybody check AUTHORS?  I see it was just modified.

[01:21] *** theorbtw1 is now known as theorbtwo

[01:21] <autrijus> theorbtwo: I just fixed some capitalisation

[01:21] <autrijus> hadn't run the usual script

[01:23] * eric256_ waits for it to finish building

[01:23] <autrijus> all tests clean on freebsd

[01:24] <autrijus> still going on feather

[01:24] * puetzk glares at Pugs.Embed.Perl5

[01:25] <puetzk> I thought this worked yesterday

[01:25] <puetzk> maybe I was just crazy

[01:25] <autrijus> puetzk: what worked?

[01:25] <puetzk> that it compiled

[01:25] <autrijus> if you toggle between the two you'd need to rm the .o and stub files

[01:25] <puetzk> it had never worked before

[01:25] <autrijus> it should work

[01:25] * puetzk scrubs his tree

[01:25] <autrijus> but if you had an older build without embedperl5 in the same locatio

[01:26] <autrijus> you need to kill the .o and stub files

[01:26] <puetzk> it's missing a _GNU_SOURCE, so it doesn't get a declaration needed for rcrypt

[01:26] * eric256_ realizes he did nmake instead of nmake unoptimized....well maybe the tests will run faster and it will balance out

[01:26] <puetzk> at least, that's what was going wrong before

[01:26] * puetzk lets it build again

[01:27] <eric256_> does svnbot need fixed? someone working on that?

[01:28] <puetzk> same failure. Hmm...

[01:29] <autrijus> I'm fixing that

[01:29] <autrijus> puetzk: hmm. what if you add, by hand, the _GNU_SOURCE to $ghc_flags in Makefile.PL or in Makefile

[01:34] * puetzk tinkers

[01:35] <puetzk> adding it at the top of perl5.h didn't work, which makes me think that something is specifically messing with those flags

[01:35] <autrijus> bah. svnbot6 is beyond repair

[01:35] * autrijus gives up

[01:36] <autrijus> maybe when I'm more awake

[01:37] <eric256_> .me vows never to make optimized agian

[01:39] <theorbtwo> Hm, I see what looks like an awful lot of "# Looks like you planned 42 tests, but ran 0# Looks like you planned 42 test  

[01:41] <autrijus> theorbtwo: what files were those?

[01:41] <eric256_> final linking almost done! lol

[01:43] <puetzk> hmm, actually -D_GNU_SOURCE is in the compile command line

[01:43] <puetzk> so why *else* would crypt_data not be defined

[01:43] * puetzk pokes

[01:43] <autrijus> theorbtwo: note  that you need a "make" before "make smoke"

[01:43] <autrijus> but "make test" will take care of that

[01:43] <puetzk> any way to get it to dump the preprocessed header in between?

[01:43] <autrijus> puetzk: not sure... ghc -v3 or something

[01:44] <theorbtwo> -keep-temp -optc-keep-temps, or something very much like that.

[01:45] <theorbtwo> It def built first.

[01:45] <theorbtwo> Might not have built completely, though.

[01:46] <theorbtwo> Various ext tests.  Now that it's gotten to the core tests, it's doing much better.

[01:46] <eric256_> running test. so far so good

[01:46] <autrijus> theorbtwo: yeah, I think it's because of stale pm_to_blib

[01:47] <autrijus> theorbtwo: in ext/ tree. you're running it off a svn checkout with previous builds, right?

[01:47] <autrijus> if so that's as expected

[01:48] <theorbtwo> No, that was from a tarball.

[01:48] <autrijus> uh oh.

[01:49] <autrijus> "make smoke" or "make test"?

[01:50] <theorbtwo> make smoke.

[01:51] <autrijus> ok. make smoke needs a make all first

[01:52] <autrijus> fixing that

[01:54] <autrijus> thanks, fixed as r4313

[01:54] <autrijus> gugod: can we have jabbot back as svnbot?

[01:54] <autrijus> at least before iblech's return

[01:54] <gugod> sure

[01:55] <autrijus> gugod++

[01:55] <autrijus> eric256_: how's the tests?

[01:55] <puetzk> autark-jp: ok, ghc has -D_GNU_SOURCE, but it's not passing it through to gcc

[01:55] * puetzk digs

[01:55] <eric256_> it is realy unhappy about some /builtines/system/01-strings-with-spaces file?

[01:56] <eric256_> NOK 127 and counting

[01:56] <autrijus> oh wow.

[01:56] <eric256_> t/builtins/system/01-strings-with-spaces...........NOK 137pugs.exe: ./t/builtins 

[01:56] <eric256_> y)

[01:56] <autrijus> ok, thanks

[01:56] <eric256_> is it going to get over this and mov on? because its at 171 and still counting.

[01:57] <autrijus> 322

[01:57] <autrijus> it's going to get over that

[01:57] <jhorwitz> evening, lambdacamels.

[01:57] <autrijus> yo jhorwitz 

[01:57] <puetzk> ah, but there's no -optc "-D_GNU_SOURCE"

[01:57] <jhorwitz> autrijus: good to see you're alive.  ;-)

[01:57] <autrijus> jhorwitz: I'm sick but alive ;)

[01:57] <theorbtwo> Evening, jhorwitz.

[01:58] <puetzk> so the literate preprocessor (-optl) gets it, and haskel itself gets it (apparently haskell itself uses CPP?), but gcc didn't

[01:58] <jhorwitz> autrijus: just getting over something myself.

[01:58] <autrijus> eric256_: that's the only failure so far?

[01:58] * puetzk wonders if that means all the -D_LARGEFILE_SOURCE and such aren't working either, or if it's supposed to pass through

[01:58] <eric256_> yes

[01:59] <autrijus> jhorwitz: got time to test pre2?

[01:59] <autrijus> eric256_: ok, keep it running

[01:59] <jhorwitz> autrijus: will do.

[02:00] <eric256_> hehe t/builtins/system/01-strings-with-spaces...........FAILED tests 2-323

[02:00] *** autrijus changes topic to: http://pugscode.org/tmp/Perl6-Pugs-6.2.6-pre2.tar.gz | http://pugscode.org/ <Overview Journal Logs> | http://pugs.kwiki.org

[02:00] <autrijus> jhorwitz: http://pugscode.org/tmp/Perl6-Pugs-6.2.6-pre2.tar.gz

[02:00] <jhorwitz> giddyup

[02:00] <autrijus> eric256_: hm, Win2k? winxp?

[02:00] <eric256_> xp home

[02:00] <autrijus> Corion will probably need to reinvestigate then

[02:01] <autrijus> for now I'm just disabling the entire test in pre2

[02:01] <autrijus> theorbtwo: "make smoke" with pre2 should initialise the ext/ correctly now

[02:02] <jhorwitz> autrijus: i assume parrot is now required for testing?

[02:02] <autrijus> jhorwitz: no, not really

[02:02] <autrijus> jhorwitz: the rules test will skip if parrot is not found

[02:02] <autrijus> at least that's the idea

[02:02] <theorbtwo> Ugh, lots of missing people.

[02:02] <jhorwitz> i'll test it anyway

[02:02] <autrijus> k

[02:03] <autrijus> lunch, bbiab &

[02:03] <theorbtwo> SamB, dakkar, broquaint, naesten, fireartist, mrborisguy, simon, puetzk, cdpruden.

[02:03] <puetzk> theorbtwo: in fairness, autrijus added me about 15 mins ago :-)

[02:04] <SamB> theorbtwo: missing from what?

[02:04] <autrijus> SamB: AUTHORS persumably

[02:04] <puetzk> ah, -optl is the linker, -optL would be the literate preprocessor. Now this makes mrore sense

[02:04] <theorbtwo> The AUTHORS file.

[02:04] <puetzk> case-only distinctions are evil :-)

[02:05] <SamB> um, no I'm not.

[02:05] <theorbtwo> Yeah, but you checked in code since then, so you should be in AUTHORS.

[02:06] <theorbtwo> Ah, but your line doesn't have "SamB", so my script couldn't see it.  (It's not quite smart enough to figure out that Samuel is Sam.

[02:07] <SamB> okay, want me to fix it?

[02:07] <theorbtwo> No, I will.

[02:07] <SamB> right, makes sense.

[02:08] <theorbtwo> The openfoundry people should probably buy ossf.org

[02:21] <theorbtwo> Anybody know simon's last name?

[02:23] <eric256_> any one know if t/rules/perl5 takes a long time to run?  

[02:23] <puetzk> hmm

[02:23] <theorbtwo> Yes.

[02:23] <eric256_> good. i was worried it had stuck

[02:23] <puetzk> and ghc -optc "-pipe" ends up passing -optc to gcc

[02:23] <puetzk> that's... weird

[02:23] <theorbtwo> Try -optc-pipe -- no space.

[02:26] <puetzk> same

[02:27] * theorbtwo ci's an updated AUTHORS.

[02:28] <puetzk> it's the last argument passed too, which seems suspiscious

[02:29] <puetzk> since everything else from -optc is before ghc starts passing filenames

[02:34] * theorbtwo thinks it's sleep time for him.

[02:35] <theorbtwo> Oh, Aankhen, cpruden, gcomnz, mattc, simon: More information in AUTHORS would be quite welcome.

[02:36] <eric256_> autrijus that file had the only failures for me

[02:37] <eric256_> how do i use the modules in the ext/ directory?

[02:46] <gugod> weird...

[03:05] <autrijus> eric256_: you can "make install" and then "use" them

[03:06] <mrborisguy> theorbtwo: do you want me to do a commit for the sole purpose of putting my name in?  sounds a bit pointless... but i will if need be

[03:06] <mrborisguy> (and yes, i merely forgot again)

[03:07] <autrijus> well, not "need" per se

[03:07] <autrijus> simply that's kind of many people's first commit :)

[03:07] <autrijus> but I see

[03:07] <autrijus> Bryan "mrborisguy" Burgers

[03:07] <autrijus> already

[03:07] <autrijus> is that you?

[03:07] <jabbot> pugs - 4316 - * cpan-upload.p6, the script we're going

[03:07] <jabbot> pugs - 4317 - * simon is simon cozens. also add sri.

[03:07] <mrborisguy> oh, hey, yeah it is

[03:07] <mrborisguy> well then, i won't worry about it!

[03:07] <mrborisguy> great

[03:07] <autrijus> =)

[03:08] <autrijus> anyone still running test for preflight?

[03:08] <autrijus> if not I think we're going to fly :)

[03:11] <eric256_> all went well here.  make install in the base pugs directory? or do i need to make each module i want to use?

[03:11] <eric256_> well by 'all went well' i mean all but that strings_with_spaces thing

[03:11] <autrijus> in the base pugs

[03:11] <autrijus> nod

[03:12] <eric256_> that wont touch my perl5 at all though right?

[03:12] <eric256_> i hadn't done a make install because i was worried about that

[03:13] <autrijus> it won't touch perl5

[03:14] <autrijus> $ pugs cpan-upload.p6 Perl6-Pugs-6.2.6.tar.gz

[03:14] <autrijus> Using FTP to upload files to PAUSE

[03:14] <autrijus>   uploading file "Perl6-Pugs-6.2.6.tar.gz"

[03:17] <Enveigler> One minor itch. I found a bug in inc/Module/Install/Win32.pm a couple of days ago but couldn't commit because I don't have commit.

[03:17] <jabbot> pugs - 4318 - * This be Pugs ,version 6.2.6.

[03:17] <autrijus> Enveigler: what was it? and what's your email so I can make you a committer?

[03:18] <mugwump> how far away is yapc/hackthon?

[03:18] <autrijus> mugwump: 20 days

[03:19] *** autrijus changes topic to: Pugs 6.2.6 uploaded by cpan-upload.p6! | gttp://pugscode.org/ <Overview Journal Logs> | http://pugs.kwiki.org

[03:19] *** autrijus changes topic to: Pugs 6.2.6 uploaded by cpan-upload.p6! | http://pugscode.org/ <Overview Journal Logs> | http://pugs.kwiki.org

[03:19] <Enveigler> The bug is that -        !$self->can_run('nmake') should be +        !$self->can_run('nmake.exe'). I causes Makefile.pl to download nmake v1.5 whena later better version is available.

[03:21] <Enveigler> mupnmar02 at sneakemail dot com

[03:21] <mugwump> cool.  That gives me a deadline of 20 days to convert as much as S29 and Prim.hs to Perl-MetaModel classes as possible :)

[03:21] * mrborisguy steals that email address for spam

[03:22] <mrborisguy> :D

[03:22] <mrborisguy> Enveigler: just kidding

[03:22] <Enveigler> :)

[03:53] <eric256_> for =$tempfile { shouldn't that put the each line in $_ ??

[03:53] <eric256_> i ended up having to do for =$tempfile -> $_ { instead

[03:57] <jabbot> pugs - 4319 - svnbot.p6 - Fixed some formating issues 

[04:02] <autrijus> eric256_: that's weird

[04:04] <eric256_> $0 and $1 only seem to work the first time accessed, but i'm still trying the narrow that down.

[04:11] <gaal> morn'

[04:11] <eric256_> \nick eric256

[04:12] <gaal> wha-! release?

[04:12] <eric256_> opps.

[04:15] <gaal> sounds like i missed all the fun :-)

[04:15] <autrijus> sorry for that :)

[04:16] <autrijus> journal up. I'll nap a bit. bbiab

[04:16] <gaal> heh, i was havin' fun asleep :-) night, er, morning, autrijus.

[04:17] <jabbot> pugs - 4320 - * the usual props on cpan-upload.p6

[04:17] <jabbot> pugs - 4321 - Fix 'nmake' -v- 'nmake.exe'

[04:24] <Enveigler> Gaal: Did you get the smoke report ?

[04:24] <gaal> checking

[04:24] <gaal> think not, when did you send it?

[04:25] <Enveigler> 8 hrs ago?

[04:25] <gaal> i'm checking the belly of my spam filter, hold on.

[04:25] <Enveigler> 'K

[04:25] <yome> Hi.  Is there a channel more appropriate for Parrot discussion?  Or is this the one?

[04:26] <obra> #parrot on irc.perl.rog

[04:26] <obra> org

[04:26] <yome> OK thanks.

[04:27] <gaal> oi, sorry Envigler, i hit 'd' on it this morning before i had cofee :/

[04:27] <gaal> can you resend

[04:27] <gaal> ?

[04:28] <mugwump> gaal, has that looping bug gone away for you in the Set tests?

[04:28] <gaal> (saw a random-looking address w/o a subject and 100k... ;-)

[04:28] <gaal> mugwump, it hadn't, so i checked in a "skip_rest ; exit" in there :-)

[04:31] <mugwump> sure, I saw that ...I assumed that the bug had been fixed, as I couldn't reproduce it

[04:31] <mugwump> is it still happening for you on a current revision?

[04:31] <mugwump> or the 6.2.6 release version?

[04:32] <mugwump> (r4318)

[04:32] <gaal> hm, let me check

[04:32] <gaal> yikes! it's 7:30

[04:32] <gaal> i can't chekc

[04:32] <gaal> sorry :) i have to $work early today

[04:32] <gaal> i really have to go now. &

[04:32] <mugwump> np

[04:33] <mugwump> later

[04:33] <gaal> fwiw other people testing on win32 saw it too, work with Enveigler

[04:34] <mugwump> ah, it's win32 specific.  how strange

[04:44] <Enveigler> Sorry. I'm running nmake smoke and my screen is running like molasses. Strange. WHy won;t pugs.exe allow me to change it's priority?

[04:44] <japhy> so look-ahead is <before PATTERN>.  this implies that rules can take arguments.

[04:46] <japhy> so how is that defined?  where is that argument for the rule to access?  I don't see any mention of this anywhere

[04:47] <japhy> grr!

[05:02] <eric256_> now that we have eval in pugs does evalbot need to use the .p5 helper? hhmmmm but then there is the Resource part.

[06:36] <nothingmuch> http://www.storewars.org/flash/index.html 

[06:36] *** castaway_ is now known as castaway

[06:37] <jabbot> pugs - 4322 - * changelog: spelling nits from uri

[06:37] <jabbot> pugs - 4323 - * ChangeLog: 80char fix.

[06:46] <f0rth> there are 6 irc bots in examples/network, create a sub dir for them?

[06:49] <nothingmuch> f0rth: i think that's a good idea

[07:25] <drbean> just tried to build 6.2.6, but failed

[07:25] <scook0> drbean: what went wrong?

[07:26] <drbean> Parrot.hsc couldn't find parrot/packfile.h, interpreter.h,  register.h

[07:27] <drbean> they are in my parrot build tree, but not in the tree where parrot got installed

[07:27] <autrijus> drbean: that's right. you need to point PARROT_PATH to the build tree

[07:27] <autrijus> drbean: the parrot installation process is b0rken.

[07:27] <drbean> Is PARROT_PATH supposed to be the build tree, or the installation tree.

[07:28] <drbean> OK. I understand

[07:33] <autrijus> japhy: those are calls.

[07:34] <autrijus> <before Foo>  merely calls Rule.before() to form a new rule

[07:34] <autrijus> japhy: <not before Foo> calls Rule.not(Rule.before())

[07:35] <autrijus> and those methods are in turn dispatched to parameterised rules int he current grammar.

[07:35] <autrijus> japhy: see A05, "Defining Your Own Rules"

[07:36] <autrijus> bbiab &

[08:14] <nothingmuch> Juerd: ping

[08:19] <nothingmuch> first class signatures discussion:

[08:19] <nothingmuch> a signature is an object

[08:19] <nothingmuch> it can take two lists - parameters and invocants

[08:19] <nothingmuch> and produce a first class binding

[08:20] <nothingmuch> the binding is a reflective  object

[08:20] <nothingmuch> allowing you to modify and query the bound parameters

[08:20] <nothingmuch> (parameters are first class objects too, they have context, slurpiness, namedness, etc)

[08:20] <nothingmuch> and when you are satisfied, to verify the where clauses

[08:20] <nothingmuch> and invoke the sub

[08:21] <nothingmuch> (from the binding)

[08:21] <nothingmuch> Optional: argument + invocants are a first class object too

[08:21] <nothingmuch> we have a new quoting operator:

[08:21] <nothingmuch> signature();

[08:21] <nothingmuch> it's like a macro

[08:22] <nothingmuch> it takes the string inside () and makes a first class signature

[08:22] <nothingmuch> by creating parameters with certain info, parsed from the string

[08:22] <nothingmuch> function signatures can now be generated:

[08:22] <nothingmuch> sub foo is signature $sig { }; # or whatever the way is, it's documented in s06 i think

[08:23] <nothingmuch> probably done as

[08:23] <nothingmuch> sub foo is signature BEGIN { ... generate a signature object } { ... };

[08:23] <nothingmuch> any thoughts?

[08:24] <castaway> (woo, monologous :)

[08:24] <nothingmuch> =)

[08:27] <castaway> I have absolutely no idea what you are on about, either :)

[08:27] <castaway> (blissful ignorance)

[08:27] <nothingmuch> well

[08:27] <nothingmuch> you might like it

[08:27] <castaway> Umm..

[08:27] <nothingmuch> function signatures are not enoug meta-meta-meta-meta IMHO

[08:28] <nothingmuch> this is a proposition for making an API

[08:28] <castaway> signatures are the name/params bit ? (or also the "multi" etc?)

[08:28] <nothingmuch> all of it

[08:28] <nothingmuch> it is the full description of the code:

[08:28] <nothingmuch> what it takes,

[08:28] <nothingmuch> what it returns

[08:28] <nothingmuch> how it behaves (it's type)

[08:28] <nothingmuch> it's attributes, maybe (is pure, is cached)

[08:29] <castaway> Ok

[08:30] <castaway> so hows the API bit?

[08:32] <nothingmuch> if you want a funky demo, grep for 'method dispatch' in docs/mmd.kwid

[08:32] <nothingmuch> Juerd: I need some feather system administration help... please pong when you have 5 mins

[08:34] <nothingmuch> it's not the details of the API, just what it should give us

[08:34] <nothingmuch> my $s = &foo.meta.signature;

[08:34] <nothingmuch> $s.params ==> map { .name } ==> say;

[08:34] <nothingmuch> sub foo ($a, $b); will yield '$a$b' in that print

[08:34] <nothingmuch> say $s.paramsÂ».context

[08:34] <nothingmuch> "ScalarScalar"

[08:35] <nothingmuch> i think

[08:35] <nothingmuch> my $b = $s.bind(1, 4);

[08:35] <nothingmuch> $b.invoke; # like foo(1, 4);

[08:36] <nothingmuch> method assuming (Code $c, *@args){ my $b = $c.meta.signature.bind(@args); return sub { $b.invoke(@_) } };

[08:36] <nothingmuch> i like perl 6's meta meta ness

[08:36] <nothingmuch> you can describe most features of the language using other features

[08:37] <nothingmuch> the atoms are conceptually very few: closures, primitives, namespaces

[08:40] <castaway> hmm, wasnt theorbtwo fiddling with someting about exposing params ?

[08:41] <nothingmuch> probably

[08:41] <nothingmuch> i think we all thought about it at some point =)

[08:41] <castaway> collaboration sounds clever here

[08:41] <nothingmuch> announcement: I am starting an experiment

[08:41] <castaway> hmm, and can you change the sig there? :)

[08:41] <nothingmuch> castaway: i was thinking outloud

[08:41] <nothingmuch> so that I can get others to think

[08:41] <nothingmuch> http://feather.perl6.nl/~nothingmuch/harrorth/README

[08:42] <nothingmuch> the experiment is writing a haskell tutorial, as I am learning haskell

[08:42] <castaway> cool

[08:42] <nothingmuch> if anyone wants to follow, have fun

[08:42] <castaway> I currently have 63 other things I want to do in my spare time.. need more hours in the day :)

[08:42] <nothingmuch> castaway: i will post my concrete ideas on p6l once I have them so they can be discussed by others

[08:43] <nothingmuch> *cough*andeventuallywarnocked*cough*

[08:43] <castaway> hehe

[08:43] <castaway> well, should poke James harder.. (he keeps getting stuck places then giving up on things)

[08:49] <clkao> nasty cpanupload.p6!

[08:50] <castaway> hmm?

[08:52] <nothingmuch> clkao: can I have the link to the we hate software images?

[08:53] <sri_> what's the new name of $0?

[08:53] <nothingmuch> $/ i think

[08:53] <nothingmuch> s04 IIRC

[08:54] <sri_> it's not $/

[08:54] <sri_> or not implemented...

[08:55] <nothingmuch> oh wait!

[08:55] <nothingmuch> sorry

[08:55] <nothingmuch> i got it mixed up

[08:55] <nothingmuch> $0 is $*PROGNAME i think

[08:55] <nothingmuch> $0 is now an alias to $/, or something like that. It's the rule match object

[08:56] <nothingmuch> PROGRAM_NAME

[08:56] <nothingmuch> t/magicals/progname.t 

[08:56] <sri_> thats it :)

[08:56] <sri_> thx

[08:56] * castaway was about to say it should be something with an actual name..

[09:01] <clkao> nothingmuch: sure.

[09:42] <mugwump> yay!  Broadband at home again ... at long last

[09:42] <castaway> grats :)

[09:46] <scook0> mugwump: you don't notice how important it is until it's gone...

[09:49] <mugwump> yup.  it's a bit intermittant, sadly (long range wireless)

[09:49] <mugwump> but during its good moments it's about 4ms ping

[09:50] <mugwump> this means I'm a lot more likely to do OSS at home now

[10:10] * mugwump downloads ghc 6.4 onto his laptop at a lovely 350kB/s

[10:10] <castaway> heh

[10:15] * Enveigler is green with envy!

[10:27] <nothingmuch> clkao: dum dee dum

[10:28] <clkao> *yawn*

[10:28] <nothingmuch> clkao: have a salad

[10:28] <nothingmuch> beats coffee any day

[10:29] <nothingmuch> did you find the links yet?

[10:29] <clkao> what links?

[10:29] <nothingmuch> for the 'We hate software" images

[10:29] <nothingmuch> oooh, sync problems

[10:29] <nothingmuch> "w

[10:30] <clkao> http://opensource.fotango.com/~clkao/runapp-intro/images/we_hate_software.jpg

[10:31] <nothingmuch> grazie!

[10:38] <Juerd> nothingmuch: pong

[10:56] <nothingmuch> beh

[10:56] <nothingmuch> how much of that got through?

[10:58] <castaway> of what?

[10:58] <castaway> (there was nothing after Juerds "pong")

[10:59] <nothingmuch> network problems

[10:59] * castaway noticed

[12:02] <nothingmuch> castaway: i need db2 help

[12:02] <nothingmuch> what's the name of the interactive shell?

[12:03] <castaway> "db" :)

[12:03] <castaway> ehh.. "db2"

[12:03] <nothingmuch> hah

[12:03] <castaway> I usually skip it and run things like: db2 "select ... " | less -S, tho

[12:03] <nothingmuch> okay, that's good

[12:04] <castaway> (thaht is, after doing the connect)

[12:04] <nothingmuch> how do i do the connect?

[12:04] <castaway> db2 "connect to <dbalias> user <user> using <password>"

[12:05] <nothingmuch> state persists between procs? it knows how to call the correct db2agent?

[12:05] <castaway> its quite nice in that your shell just stays connected, and you can do whatever.. disconnect with: db2 "terminate" when done

[12:05] <castaway> I think the answer to that is yes :)

[12:05] <nothingmuch> goody =)

[12:06] <castaway> what're you up to, anything fun?

[12:07] <jabbot> pugs - 4324 - * 100% Haddocks for Context.hs

[12:08] <castaway> oh, jabbot is back, where'd the other announcerbot go?

[12:08] <nothingmuch> castaway: we have an AIX box with 8gb of ram

[12:08] <nothingmuch> and, for fun, aix can't meter mmap'ed memory

[12:08] <nothingmuch> or malloc blocks larger than 256

[12:09] <nothingmuch> so if a program needs lots of memory, it usually mmaps

[12:09] <nothingmuch> and we can't know how much

[12:09] <nothingmuch> we're trying a big pull from db2

[12:09] <nothingmuch> and we want to see who is the guilty party

[12:09] <castaway> ah, fun

[12:09] <nothingmuch> because the box uses 7900MB of ram, and then swap-thrashes

[12:09] <castaway> wow thats a loz

[12:09] <castaway> lot

[12:10] <nothingmuch> yup

[12:10] <nothingmuch> for a fetch with no order or anything this is really a lot

[12:10] <nothingmuch> plain old fetch without aggregation on our side is about 5000mb

[12:10] <nothingmuch> and now i'm trying to see if it's our data fetching code, or db2agent or something like that

[12:11] * castaway nods

[12:11] <castaway> how many millions of rows of data are we talking about?

[12:11] * castaway wonders how much ram our AIX boxes have

[12:11] <nothingmuch> 200,000,000

[12:11] * castaway boggles :)

[12:14] <nothingmuch> hah

[12:15] <castaway> whats all that for?

[12:15] <nothingmuch> db2 connect to db... \n

[12:15] <nothingmuch> <delay>

[12:15] <nothingmuch> then it finishes

[12:15] <nothingmuch> 5gb taken

[12:15] <nothingmuch> the delay is the time it takes to actually allocate the data

[12:15] <nothingmuch> this is absurd

[12:15] <nothingmuch> castaway: that's just to emphasise what I typed in the terminal

[12:17] <castaway> ummm ?

[12:17] <nothingmuch> doing db2 connect causes a db2agent to start

[12:17] <nothingmuch> that db2agent allocates 5gb of memory

[12:18] <nothingmuch> and then I can start working

[12:18] <castaway> eh?

[12:18] <castaway> ouch

[12:18] <castaway> wtf?

[12:18] <nothingmuch> since our product is configured to use 5.5 gb of memory for aggregation

[12:18] <castaway> Oh, it preallocates? weird

[12:18] <nothingmuch> this slurps in about 30,000,000 records

[12:18] <nothingmuch> and then the thrashing starts

[12:18] <nothingmuch> since we would need 2.5 extra gb

[12:28] <Juerd> 30M records of how much bytes?

[12:28] <Juerd> I've used 30M record tables in sqlite even, so that says nothing :)

[12:28] <Juerd> Hi L~R

[12:29] <Limbic_Region> hey Juerd - how's tricks?

[12:29] <Juerd> tricks?

[12:29] <castaway> guess he's no magician

[12:29] <castaway> hey limbic

[12:29] <Limbic_Region> it's an expression

[12:30] <Juerd> Everything is an expression.

[12:30] <Limbic_Region> just means how's it going

[12:30] <Juerd> Or a statement.

[12:30] <Juerd> Limbic_Region: How is what going?

[12:30] * Limbic_Region hugs castaway

[12:30] * castaway hugs back

[12:30] <Juerd> Can I join the hug?

[12:30] <castaway> life, the universe, and everything!

[12:30] * castaway hugs Juerd too

[12:30] <Juerd> *hug*

[12:30] * Limbic_Region thinks it is too early in the morning for Juerd's literalism

[12:31] <Juerd> life is going well enough, the universe is about to implode, everything is hardly developed anymore.

[12:31] <castaway> :)

[12:31] <Juerd> neodymium magnets ++

[12:31] <Juerd> Amazingly strong for 5x5x5mm

[12:32] * Limbic_Region is begrudgingly getting used to using IE again

[12:32] <Juerd> Limbic_Region: Huh? Why?

[12:32] <Juerd> Limbic_Region: Do you require medical attention?

[12:32] <Limbic_Region> local policy I guess

[12:32] <Juerd> I know a good psychiatrist

[12:33] <Limbic_Region> all of a sudden FF stopped working unless I went through some bizarre incantation and rain dance

[12:33] <Juerd> Get a new one then

[12:34] <Juerd> Or run X remotely :)

[12:34] <Limbic_Region> Juerd - basically all ports have been locked down and HTTP is forced through a proxy

[12:34] <Limbic_Region> the only way to get around this is to knowingly circumvent security

[12:35] <Limbic_Region> not that I haven't figured out how to do that

[12:35] <Limbic_Region> but it is pretty hard to plead ignorance 

[12:35] <Juerd> Limbic_Region: Does this proxy support CONNECT?

[12:35] <Juerd> Can't you ssh?

[12:36] <Limbic_Region> no ssh

[12:36] <Juerd> How are you connected to IRC?

[12:36] <Limbic_Region> cgiirc

[12:36] <Limbic_Region> perlmonk.org is actually connecting to IRC

[12:36] <Juerd> You must really hate your employer.

[12:36] <Limbic_Region> I am merely viewing a web page

[12:36] <Limbic_Region> not really

[12:36] <Limbic_Region> they do it for good reason

[12:36] <Juerd> But the reverse even more so: they must really hate you.

[12:37] <Limbic_Region> *shrug* - they probably don't think anything of me at all

[12:37] <Odin-LAP> Don't they always? :p

[12:37] <Juerd> Limbic_Region: How is that?

[12:38] <Juerd> And what about dns-tunnels, or http-tunnels?

[12:38] <Juerd> What is your job anyway, that you can do it with such limitations?

[12:38] * Limbic_Region is an information technology specialist for the US Government

[12:39] <Limbic_Region> and it doesn't matter if I CAN get around the restrictions - the point is I would lose my job (and likely other things as well) if I did

[12:39] <Juerd> An IT specialist with only web access? Weird.

[12:39] <theorbtwo> L~R: Are your ports only cut off from the outside world, or do they expect you to admin boxes that you can only http to?

[12:40] <theorbtwo> Er, s/from the/to the/

[12:40] <Limbic_Region> it is actually much worse than you think

[12:41] <Juerd> Is that possible?

[12:41] <Limbic_Region> but I can't really talk about that

[12:41] <theorbtwo> Ah.

[12:41] <theorbtwo> Even more fun.

[12:41] <Juerd> You work for the US government and you have only access to the web, and you say it's even worse than that?

[12:41] <Juerd> That's surprisingly hard to believe ;)

[12:41] <theorbtwo> Juerd: I'd tend to believe him anyway.

[12:42] <Juerd> (Oh, for the sniffers: come and visit me at einsteinstraat 67, 3316 gg dordrecht, the netherlands ;))

[12:42] <theorbtwo> He works for a segment of the government that has a reputation, and possibly even a policy, of being even more paranoid then the rest of the US government.

[12:42] <Juerd> But paranoia and productivity don't go together

[12:43] <Juerd> How do they get anything done?

[12:43] <theorbtwo> Juerd, what makes you think they get anything done?

[12:43] <theorbtwo> This is the US government we're talking about.

[12:43] <Limbic_Region> listen - I don't really feel comfortable talking about the particulars of my work environment

[12:43] <Juerd> Limbic_Region: Sorry

[12:43] <Juerd> theorbtwo: Hmm..

[12:43] <theorbtwo> Sorry.

[12:44] <Limbic_Region> it is a PITA, but what it really means for my work in perl6 is that I will only be able to use nopaste

[12:44] <Limbic_Region> at least while I am at $work

[12:44] <Juerd> Limbic_Region: Perhaps we can set up a web based shell interface for you, on feather.

[12:44] <Limbic_Region> now that would be neat

[12:44] <Juerd> Limbic_Region: Your using CGI:IRC indicates that you can use long lived http connections.

[12:45] <Juerd> Limbic_Region: Can you use https though?

[12:45] <Limbic_Region> yes

[12:45] <Limbic_Region> but also forced through a proxy

[12:45] <Juerd> https can't be proxied :)

[12:46] <Juerd> It's a direct feed - and there is your chance to connect to anything if the other side is prepared to listen

[12:46] * Limbic_Region checks his settings again

[12:47] <Limbic_Region> perhaps all it is doing is NATing

[12:47] <Juerd> IIRC, https proxying is simply supporting the CONNECT request

[12:47] <Juerd> Which essentially turns the proxy into a port forwarder (hint)

[12:47] <Limbic_Region> but I assure you - my machine which is currently connected to gmail via https has no connections with a public IP address

[12:47] <Juerd> That's possible.

[12:47] <puetzk> Juerd: well, one can get more evil than that and substitute the cert :-)

[12:47] <puetzk> I've seen that done, though it triggers a browser warning (as it should)

[12:48] <Juerd> puetzk: Which would be noticed instantly, by clueful personell.

[12:48] <Limbic_Region> so in other words, I have to direct all my outbound traffic to a specific host - if it is doing more than NATing is unknown to me

[12:48] <theorbtwo> OTOH, https is designed to protect against man-in-the-middle attacks, and to be proxiable, without being seen by the proxier.

[12:48] <Juerd> Limbic_Region: google for stunnel 

[12:48] <theorbtwo> puetzk: They could have disabled that warning, however.

[12:48] <puetzk> theorbtwo: right

[12:48] <Juerd> I was inaccurate

[12:49] <Juerd> It can be proxied, but not be cached (because the data is unknown)

[12:49] <puetzk> by making the substituted cert's CA known to the browser in their desktop baseload

[12:49] <puetzk> then they can write forged certs to their heart's content

[12:49] <puetzk> it's still rare

[12:49] <theorbtwo> Note that there's not even anything that says that Limbic isn't running a version of IE with modified code; it's public knowladge that the US government has a source-code license.

[12:49] <Limbic_Region> in any case - it isn't like I am integral to the success of Pugs

[12:49] <Limbic_Region> I am only generating p6 code anyway

[12:49] <Limbic_Region> not Haskell

[12:49] <castaway> *only*?

[12:50] <Limbic_Region> I can get by with nopasting stuff

[12:50] <castaway> theres no only, here

[12:50] <puetzk> Limbic_Region: of course, svn passes most HTTP proxies

[12:50] <Limbic_Region> puetzk - against policy

[12:50] <puetzk> Limbic_Region: why? it's plain HTTP

[12:50] <puetzk> well, DAV

[12:50] <puetzk> it's not tunneling, it's just actually HTTP

[12:50] <Limbic_Region> because I am downloading stuff from an untrusted source

[12:51] <Limbic_Region> its the same as saying you can't visit naughty sites

[12:51] <puetzk> oh, having svn is not OK

[12:51] <puetzk> gotcha

[12:51] <puetzk> as opposed to using it being the problem

[12:51] <theorbtwo> It seems like the best solution is the shell on feather.

[12:51] <theorbtwo> That way any untrusted code runs on feather, not your machine.

[12:52] <Limbic_Region> no - the best solution is for me to do nothing that may jeapordize my job until I have had a chance to talk to someone in security that I can trust not to make rash judgements

[12:52] <Juerd> Limbic_Region: You could publish files on feather using webdav, and then have an irc bot execute things

[12:52] <Juerd> :)

[12:52] <Juerd> You know how to request an account if you want one (if you don't already have one)

[12:53] <Limbic_Region> I do, I thank you, and I just might

[12:53] <Juerd> Hm

[12:53] <Limbic_Region> for now I am off to read use.perl journals

[12:53] <theorbtwo> Or have a IRC/ssh tunnel, and use that, though the inability to type plus might kill that idea.

[12:53] <Juerd> Even simpler: write CGI scripts that use pugs :)

[12:53] <Juerd> You can run your personalized apache and use one cgi script to tail the error log

[12:53] <Juerd> theorbtwo: He's using http for irc

[12:54] <puetzk> Juerd: one would assume if browsing http://svn.openfoundry.org/pugs is verboten, that using IRC is too :-)

[12:54] <Juerd> theorbtwo: Through a CGI gateway

[12:54] <theorbtwo> Juerd: He can run his own apache and still have it on port 80?

[12:54] <theorbtwo> Juerd: I know.

[12:54] <Juerd> theorbtwo: Why is port 80 required?

[12:54] <theorbtwo> Because that's the only port he can see.

[12:54] <Juerd> (If necessary, I can assign feather a second IP, but it shouldn't be)

[12:54] <theorbtwo> Hm, possibly not.

[12:54] <Juerd> theorbtwo: He hasn't said that here.

[12:55] <theorbtwo> Yeah, I just thought it over again, and he didn't, my bad.

[13:04] <Juerd> [gemeente dordrecht]++  # they have a ticketing system for stuff like broken traffic lights

[13:05] <webmind> netjes

[13:05] <theorbtwo> Very cool, Juerd.

[13:06] <Juerd> http://cms.dordrecht.nl/dordt?nav=wmrkIsHaKnPTmwaBjqaBhHL

[13:13] <Limbic_Region> question - anyone know how to uninstall firefox?

[13:15] <castaway> on what?

[13:15] <theorbtwo> Add/Remove programs?

[13:15] <Limbic_Region> Windows - and that doesn't work theorbtwo - I think it has to do with the fact that I didn't have admin rights when I installed it

[13:15] <Limbic_Region> nevermind me - I will figure it out

[13:16] <PerlJam> good morning #perl6

[13:17] <Juerd> Limbic_Region: Remove its directory and syml^H^H^H^Hshortcuts to it, and it's practically gone. Windows is never clean anyway, so why try?

[13:17] <PerlJam> I was just looking over the release announcement ... What's with the "exclusive range" ops?  Is that a pugs feature or was that specced somewhere?

[13:17] <Juerd> PerlJam: Specced

[13:17] <Juerd> I think they're overkill.

[13:18] <Juerd> We know how to +1 or -1, thank you.

[13:18] <Juerd> Before you know it, every string operator will have a case insensitive variant

[13:18] <puetzk> Juerd: of course, if they work on floats that could be interesting

[13:18] <puetzk> but they probably don'e :-0

[13:19] <integral> the problem is that there's no way to tell the difference between a float and an int...

[13:19] <integral> plus ranges on enumerable types, and intervals on continuous types are quite different

[13:36] <Limbic_Region> IE crisis averted

[13:36] <Limbic_Region> ;-)

[13:37] <jabbot> pugs - 4325 - Enveigler | Allow pugs to find 'ghc.exe'

[13:53] <sri_> ported FindBin

[13:56] <autrijus> sri++ sri++

[13:57] <jabbot> pugs - 4326 - Ported FindBin

[13:58] <sri_> jabbot: you're slow

[13:58] <jabbot> sri_: Perhaps you would like to be slow.

[13:58] <Limbic_Region> autrijus - of the 4 things that need to be done to get http://svn.openfoundry.org/pugs/examples/cribbage_scoring.p6 working - which one in your opinion requires the least amount of work (or rather, the least amount of Haskell skills) ?

[13:58] <autrijus> remind me -- which 4?

[13:58] <autrijus> oh got it

[13:59] <autrijus> commits++

[13:59] <Limbic_Region> # Bug 1     - t/pugsbugs/return_with_trailing_stuff.t

[13:59] <Limbic_Region> # Bug 2     - t/pugsbugs/postincrement_in_subscripts.t

[13:59] <autrijus> yeah, got them

[14:00] <Limbic_Region> # Feature 1 - t/operators/hyper.t (hyper dereferencing)

[14:00] <Limbic_Region> oh

[14:00] <Limbic_Region> sorry

[14:00] * Limbic_Region is doing multiple things at once again

[14:00] <Limbic_Region> it is sooooo nice to have tabbed browsing back

[14:00] <autrijus> well hm.

[14:00] <autrijus> hyper deref requires some work in src/Parser.hs

[14:00] <clkao> autrijus++ # cpan-upload.p6

[14:00] <PerlJam> surely last LABEL can't be too difficult.

[14:00] <autrijus> but if you have elementary haskell utilz that's trivial

[14:01] <autrijus> last LABEL is merely turning

[14:01] <autrijus> FOO: { ... }

[14:01] <autrijus> into

[14:01] <autrijus> my sub FOO { ... }

[14:01] <Limbic_Region> this would be my first introduction to Haskell

[14:01] <autrijus> I think. it's probably a hack, but it probably works

[14:01] <PerlJam> Limbic_Region: have you been exposed to FP before?

[14:01] <Limbic_Region> no PerlJam

[14:01] <autrijus> all four is about equally difficult

[14:01] <Limbic_Region> great

[14:01] <autrijus> hyper deref will make you learn about parser :)

[14:02] <autrijus> which is considerably easier than the rest of source code

[14:02] <autrijus> so maybe that first

[14:02] * Limbic_Region guesses he will wait for a rainy day

[14:03] <autrijus> Limbic_Region: basically we already have &infix:<.{}>

[14:03] <autrijus> so hyper deref is just adding the >>.{} form to parser, that's all

[14:03] <theorbtwo> .{} is infix?  Shouldn't it be postcircumfix?

[14:04] <autrijus> good catch.

[14:04] <autrijus> feel free to fix the Prim entry

[14:04] <clkao> autrijus: got time to look at rw array?

[14:04] <autrijus> clkao: no.

[14:05] <clkao> *stunning silence*

[14:07] <autrijus> clkao: I'm fried... ;)

[14:07] <autrijus> <- just went back from $w0rk

[14:07] <autrijus> and I need to 1)shower 2)sleep

[14:07] <Limbic_Region> theorbtwo - will you have time tonight or tomorrow night (my time) to help me with a little Haskell ?

[14:09] <theorbtwo> Limbic, should.

[14:10] <theorbtwo> ...I think.

[14:12] <Limbic_Region> ok - will ping you

[14:21] <Limbic_Region> $foo.chars will return the number of chars in $foo - is there a way (other than split) to get the actual chars themselves ?

[14:21] <PerlJam> Limbic_Region: substr()  :-)

[14:21] <theorbtwo> substr should work.

[14:22] <Limbic_Region> how so?

[14:22] <Limbic_Region> I guess I should read S29 huh

[14:23] <theorbtwo> The quick answer is "just like p5".

[14:23] * Limbic_Region isn't sure how he would use substr() in p5 without first getting the length of the string and repeatedly calling substr() for each position with a length of 1

[14:24] <sproingie> so strings still aren't subscriptable?

[14:24] * sproingie ARGH

[14:25] <theorbtwo> That would feel very strange to me.

[14:25] <Limbic_Region> PHPish IIRC

[14:25] <theorbtwo> When you have a reference with overloaded stringification, and use a subscriping operator, does it dereference, or stringify?

[14:25] <Limbic_Region> what I am trying to do is the equivalent of split //, $foo;

[14:26] <theorbtwo> I think just like in p5.  Possibly chars in list context does that?

[14:26] <Limbic_Region> I was hoping theorbtwo

[14:26] <PerlJam> Limbic_Region: why the restriction on using split though?

[14:26] <Limbic_Region> but say list $foo.chars still says 4

[14:27] <Limbic_Region> PerlJam - not a restriction really - just trying to learn more of the language

[14:27] <PerlJam> oh

[14:27] <Limbic_Region> I often do that by taking a relatively simple problem and intentionally handi-capping myself

[14:27] <Limbic_Region> my favorite way to do that is to say "no regexen"

[14:27] <PerlJam> Limbic_Region: well, I believe that $foo.chars in a list context actually gives you the chars (or it's supposed to)

[14:28] <Limbic_Region> oh - well if that's the case it is b0rk

[14:29] <Limbic_Region> .chars .bytes etc replaced length right?

[14:29] <PerlJam> right

[14:32] <PerlJam> Hmm.  I can't find it in the AES where I got that .chars  in list context gives the chars as a list, so either I made it up or it was said on p6l or something

[14:32] * Limbic_Region is still looking

[14:33] <sproingie> subscripting a reference with overloaded stringification would simply be ambiguous

[14:33] <sproingie> you'd pick one behavior and use it.  god knows perl doesn't normally shy away from ambiguity

[14:33] <lumi> It's not supposed to, but it should be supposed to

[14:33] <Limbic_Region> PerlJam - lots of references

[14:34] <Limbic_Region> A02, A05, A12, E05, S05, S26

[14:34] * Limbic_Region is going to investigate further

[14:37] <drbean> 9 rules tests and 170 subtests failed for me in 6.2.6

[14:39] <Limbic_Region> ok - I don't see anything that says it should do it so I will ask on p6l

[14:45] <sri_> how do i define additional methods for a class at runtime?

[14:47] <theorbtwo> sri_: method Foo:newmeth(Foo $self: ...), I think.

[14:52] <sri_> hmm...then it's a bug in my code :/

[14:52] <sri_> pugs needs more verbose parse errors

[14:53] <sproingie> hey, i used ed, '?' is error enough for real men

[14:53] <sri_> you're sooo 1960's :)

[14:58] <sproingie> 70's anyway

[14:59] <sproingie> mainframe editors actually had decent ui.  ed was small first, functional second ... or more like third or nineteenth or so

[15:00] <sproingie> i suppose it made more sense on teletypes

[15:09] <PerlJam> Limbic_Region: A virtual $10 says you get warnocked  :-)

[15:11] <Limbic_Region> PerlJam - that's perfectly alright

[15:13] <Limbic_Region> I will just ask again in a month or so

[15:13] * Limbic_Region is persistent

[15:18] * Limbic_Region likes the thought of being able to do something terribly inefficient like say "there is a letter" if any( $str.chars ) eq any( 'a'..'z', 'A'..'Z' );

[15:18] <Khisanth> persistence is futile!

[15:18] <Limbic_Region> Khisanth plus plus

[15:19] <Boogie> join catalyst

[15:20] * Boogie says oops

[15:22] <sri_> :)

[15:23] <Boogie> anyway, I'm interested in joining to Catalyst. Catalyst6.

[15:23] <sri_> that'll take some time...

[15:23] <Boogie> Autrijus wrote about it in his blog, but i found no info about it. 

[15:24] <sri_> still porting prereqs

[15:24] <Juerd> Does anyone happen to know how to reset a 3com switch?

[15:24] <Boogie> sri_: I have not much time, but would like to help. I have a lot of ideas.

[15:25] <Boogie> Juerd: no reset switch on it?

[15:28] <sri_> pugs -e 'class Foo; eval "method foo (\$self:) { return \$self }"'

[15:28] <sri_> isn't this supposed to work?

[15:31] <nothingmuch> evening!

[15:31] * sri_ pokes autrijus 

[15:32] * nothingmuch also pokes autrijus 

[15:33] <Limbic_Region> sri_ - autrijus mentioned needing a shower and sleep

[15:33] <sri_> dammit...

[15:37] <Khisanth> hmm

[15:37] <Juerd> Boogie: No

[15:38] * Khisanth needs to figure out how to abuse []

[15:38] <nothingmuch> Khisanth: the reduce meta operator?

[15:40] <Khisanth> :)

[15:44] <Boogie> sri_: your pugs code works for me. just don't escape $, and use ' for eval

[15:44] <sri_> i need a dynamic method name

[15:44] <Boogie> pugs -e "class Foo; eval 'method foo ($self:) { return $self }'"

[15:45] <Boogie> you mean: pugs -e "class Foo; $mn='hey'; eval 'method '~$mn~' ($self:) { return $self }'"

[15:46] <sri_> good idea! :)

[15:47] <stevan> sri_: you might be able to (eventually) do that through the meta-model

[15:47] <stevan> but thats no use to you now :)

[15:47] <sri_> yea, confuse me even more! :P

[15:47] <stevan> :)

[15:48] <stevan> sri_: I will port the Tree::Simple::Visitor stuff for you this weekend

[15:48] <sri_> nice!

[15:48] <stevan> BTW - I switched from CamelCase to perl_style for Tree

[15:48] * stevan has finally seen the "light"

[15:49] * sri_ hugs stevan 

[15:49] <stevan> :)

[15:49] <wolverian> yay!

[15:49] <stevan> sri_: you should consider putting a ext/Catalyst6 folder into pugs

[15:50] <stevan> and at the very least, having a list of pre-reqs that need porting

[15:50] <Boogie> guys, is there a plan of Catalyst6?

[15:50] <stevan> I am sure people will help out :)

[15:50] <sri_> as soon as i have File::Find::Rule working

[15:50] <Boogie> yes, stevan++

[15:50] <stevan> nice

[15:50] <sri_> don't think there are more prereqs :)

[15:51] <stevan> oh, even better

[15:51] <sri_> well, i'll need real trait support...but autrijus promised to work on it

[15:51] <stevan> sri_: trait or role?

[15:51] <sri_> trait

[15:52] <sri_> for actions

[15:52] <stevan> traits are a little of fuzzy in S12, what exactly do you need

[15:52] <sri_> method foo is Path('/lalala/foo')

[15:52] <stevan> as i understand them, traits are compile time roles on crack

[15:53] <sri_> i guess trait_auxiliary:is is what i need

[15:53] <stevan> so are you just tagging meta-data there? or is it altering the method?

[15:54] <sri_> meta data

[15:55] <stevan> what uses the meta-data? the dispatcher?

[15:55] <sri_> yes

[15:55] * stevan starts dreaming of custom meta-level method dispatchers :)

[15:55] <jhorwitz> anyone with apache2 here have some cycles to test mod_pugs?

[15:56] <sri_> hmmm...

[15:57] * Boogie wonders if somebody there who porting a Class::DBI like thing?

[15:58] <stevan> Boogie: I have had some thoughts on ORM system for Perl6, but I never liked CDBI, so it will not be similar

[15:58] <stevan> nothingmuch and I talked them out a bit

[15:58] <stevan> from what I know of Class::DBI, I think it could be made much nicer through Roles too

[15:59] <sri_> cdbi is nice imo

[15:59] <sri_> it could be better indeed

[15:59] <stevan> sri_: it does the job, but its not really O/R

[15:59] <sri_> you like tangram? :)

[15:59] <stevan> never used it

[15:59] <Boogie> I don't know Class::DBI. I just like the idea. I would like to use something like Ruby on Rails, if you know it.

[16:00] <sri_> thats cdbi ;)

[16:00] <Boogie> OK. So cdbi++;

[16:00] <stevan> we have a in house system, which is starting to show it's age (going on 2 1/2 years now)

[16:00] <stevan> the system is more Tangram/SPOPS-ish than CDBI

[16:01] <Boogie> My idea is to let's create an ext/Catalyst6 dir, and put there the ideas we have.

[16:01] <stevan> with a lot of IOC in the middle to handle all the dependency relationships

[16:01] <sri_> Boogie: Cat6 will be quite like Cat5

[16:02] <Khisanth> Cat5e :)

[16:02] <stevan> Cat6.1 :)

[16:02] <sri_> all models and views are just addons

[16:02] <sri_> it doesn't matter if you use cdbi or tangram or whatever

[16:02] <sri_> it's just glue

[16:02] <Boogie> So, should I start to hack on another project, that's like Rails? 

[16:02] <stevan> yup, thats why I like Catalyst so much :)

[16:02] <stevan> sri_++

[16:03] <sri_> Boogie: if you like... :)

[16:03] <sri_> but rails was made for ruby

[16:03] <stevan> sri_: so the plan now is to do a straight port

[16:03] <sri_> it's less flexible

[16:03] <Boogie> sri_: I would like to create a thing, that will be used... ;)

[16:03] <sri_> stevan: i'm always open for new ideas

[16:04] <sri_> but it's already quite good imo

[16:04] <stevan> sri_: I am not thinking of changing the design so much, as just perl6-ifying it more

[16:05] <sri_> Boogie: maybe join http://perlonrails.org *eg*

[16:05] <sri_> stevan: indeed

[16:05] * stevan proabably doesn't actually know enough Catalyst to be saying this though

[16:05] <Boogie> sri_: I've checked Catalyst some weeks ago, and It was too much typing for me. ;)

[16:06] <sri_> wait, much typing?

[16:06] <sri_> you kidding?

[16:06] <stevan> Boogie: catalyst seems to be moving a Pugs speed, so a few weeks might be ancient

[16:06] <sri_> take a look at the upcoming perl.com article, ajax powered wiki in less than 30 lines of written code ;)

[16:07] <Boogie> sri_: At first, it's possible I don't know it well. I've checked it after Rails, and it was my impression.

[16:07] <sri_> oh well, we so have to make videos too...

[16:07] <sri_> :)

[16:07] <Boogie> sri_: I agree. Maybe I just didn't catch the idea enough. :)

[16:09] <Boogie> As I can imagine, Catalyst on Perl6 will be much cleaner and shorter, than Catalyst for Perl5.

[16:09] <sri_> much

[16:09] <stevan> sri_: so will you be developing Cat6 in the Pugs tree?

[16:09] <sri_> mhm

[16:09] * Boogie likes stevan's idea.

[16:10] <sri_> i'd like to have a mason port too

[16:10] <sri_> and cdbi :)

[16:11] <stevan> you can always use perl5 embded for now

[16:12] <sri_> don't think that would work so well with cdbi

[16:23] <gaal> hullough!

[16:23] <stevan> hey gaal :)

[16:23] <gaal> Enveigler about?

[16:23] <Limbic_Region> salutations

[16:23] <gaal> heya stevan, L~R

[16:25] <theorbtwo> Oh, stevan, fix your AUTHORS entry, please.

[16:25] <stevan> ?

[16:25] <stevan> whats wrong with it?

[16:26] <theorbtwo> Oh.  Nevermind.

[16:26] <theorbtwo> I was thinking of simon, not stevan, and that's fixed.

[16:28] <Limbic_Region> woah - I just thought of a way of doing arbitrarily nested loops - I wonder if it is the same way tye does it in Algorithm::Loops

[16:28] * Limbic_Region needs to try this in p6

[16:36] <gaal> heh heh heh. http://dvdrewinder.com/index.php?main_page=product_info&products_id=1 DVD Rewinder.

[16:40] <sri_> a Data::Dumper port would be nice too

[16:41] <stevan> sri_: we have .perl() already

[16:41] <sri_> oh :)

[16:42] <sri_> nice

[16:42] <stevan> ye ask and ye shall receive :P

[16:44] <Limbic_Region> ok - I want to define a sub that has 1 required parameter (an array), and 2 optional parameters (a hash and a code ref) - what is the proper way to say that?

[16:45] <Limbic_Region> sub foo (@array, ?%foo, ?$ref) {...} ?

[16:45] <stevan> or foo(@array, +%hash, +$code)

[16:45] <Limbic_Region> I thought   meant named parameter not optional?

[16:45] <Limbic_Region> or does that equate to the same thing?

[16:45] <stevan> that allows you to do: foo([1, 2, 3], code => sub {})

[16:46] <stevan> named and optional IIRC

[16:46] <Limbic_Region> and that space there was a plus that got eaten

[16:46] <stevan> with ?$foo I think you are stuck with positional only

[16:46] <stevan> let me check the tests, one second

[16:46] <Limbic_Region> ahhh

[16:47] <Limbic_Region> found it

[16:47] <Limbic_Region> named parameters are optional unless marked is required

[16:47] <stevan> yup

[16:47] <Limbic_Region> so you way is best then

[16:47] <stevan> of course ;)

[16:48] <stevan> although come to think of it, your way should behave the same 

[16:48] <stevan> that is how much of the Test.pm subs work

[16:48] <Limbic_Region> positional is problem

[16:48] <Limbic_Region> not in my case

[16:48] <Limbic_Region> but it could be

[16:48] <stevan> I dont think it forces positional though

[16:48] <stevan> the ? that is

[16:48] <stevan> look in Test.pm, they all use ?$todo, and that is not postional

[16:49] <stevan> so I was wrong there

[16:49] <Limbic_Region> stevan - problem is what happens if you have two optional (un-named) of the same type

[16:49] <stevan> actually + and ? look fairly interchangable

[16:49] <Limbic_Region> is HAS to be position or else there is no way of knowing which it is

[16:49] <stevan> true

[16:50] <Limbic_Region> so I am going with all named - 1 marked is required

[16:50] <stevan> so using named forces people to DWTM

[16:50] <Limbic_Region> hopefully that is supported already

[16:50] <stevan> L~R, looks like it

[16:51] <stevan> in t/subroutines/sub_named_parameters.t it is not TODO

[16:53] <Limbic_Region> stevan - I don't see any "is required" in that test file?

[16:53] <stevan> line 70

[16:53] <stevan> sub mandatory (++$param) {}

[16:54] <Limbic_Region> oh - I guess I should read the blurb at the top since that disagrees with A06

[16:54] <Limbic_Region> perhaps it was changed in S06

[16:54] <Limbic_Region> nope

[16:54] <Limbic_Region> I think the plusplus is wrong

[16:54] <Limbic_Region> according to the docs - that should be done with the "is required" trait

[16:55] <Limbic_Region> oops

[16:55] <Limbic_Region> s/wrong/not official/

[16:56] <Limbic_Region> it does say that plusplus is an alternate that MAY be considered

[16:56] <Limbic_Region> *shrug* - I will just use the plusplus since apparently it is what Pugs has now

[17:01] <Limbic_Region> ok - now how do you define a list of array references - something with a semi-colon?

[17:02] <Limbic_Region> my @foo = (1,2,3; 4,5,6; 7,8,9);

[17:02] <Limbic_Region> ?

[17:02] <theorbtwo> ?eval (1,2,3;4,5,6;7,8,9)

[17:02] <evalbot6> Error:  unexpected ";" expecting digit, fraction, exponent, term postfix, operator, "," or ")" 

[17:03] <Limbic_Region> theorbtwo - hence the question (something with a semi-colon)?

[17:04] <theorbtwo> I remember Larry redefined how to do it when he introduced the [] metaoperator.

[17:07] <Limbic_Region> ?eval ([1..3],[4..6],[7..9])

[17:07] <evalbot6> ([1, 2, 3], [4, 5, 6], [7, 8, 9]) 

[17:07] <Limbic_Region> that appears to be doing the right thing but I am not sure if it is supposed to

[17:08] <theorbtwo> That's certianly supposed to do that, but the question is if there is a better way to do it... and if we care.

[17:09] <Limbic_Region> well, I for one care

[17:09] <Limbic_Region> and that's what I meant - supposed to meaning supposed to be the best way

[17:13] <theorbtwo> The mail you want is "reduce metaoperator", by Larry, 05/04/05 14:36.

[17:14] <theorbtwo> [email@hidden.address] if you can figure out how to search by message-id.

[17:14] <theorbtwo> OTOH, it looks to be somewhat unimplemented.

[17:15] <Limbic_Region> why would searching by msgid be any different then subject line or body?

[17:15] <Limbic_Region> just c/p into the search bar

[17:49] <wolverian> Limbic_Region: what mail client are you using?

[17:49] <wolverian> if I may ask :)

[17:53] <geoffb> allo

[17:53] <geoffb> Warning: trying to read everything linked from the Perl 6 summary in one sitting may result in Cranial Liquefaction, a potentially debilitating disorder.

[17:59] <cognominal> ho, that would explain the liquid dropping from my head.

[18:00] <wolverian> you read the summaries? weakling, I read the original posts. :)

[18:01] <stevan> HAH!,... real perl6 hackers read the Apocolypses :P

[18:02] <wolverian> yes, but that gets boring after the first few years.

[18:02] <stevan> : D

[18:02] <cognominal> Apos are old news...

[18:02] <Limbic_Region> wolverian - several of them

[18:02] <Juerd> Literally.

[18:03] <Limbic_Region> were you asking how I was searching for msgid?

[18:03] <Limbic_Region> or for some other reason

[18:03] * Limbic_Region now has a working implemenation of arbitrary nested loops in p6

[18:03] * Limbic_Region still needs to add a few of the features from Algorithm::Loops such as onlywhen and code blocks - but so far so good

[18:04] <Limbic_Region> perlbot nopaste

[18:04] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[18:04] <geoffb> wolverian, I get enough mail already.  I think my mail reader would go on strike if I added the load of all perl6-* lists.

[18:05] <Limbic_Region> I hate when that happens

[18:05] <wolverian> Limbic_Region: nah, I was just curious what kind of a client you prefer.

[18:06] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "Arbitrarily Nested Loops in p6 - though not very p6ish I don't think" (24 lines, 669B) at http://sial.org/pbot/10665

[18:06] <wolverian> geoffb: heh. I'm subscribed to the ubuntu-* lists as well. imagine that. :)

[18:06] <Limbic_Region> wolverian - I use gmail, yahoo mail, outlook, mailx, pine, elm - whatever is available

[18:06] <wolverian> Limbic_Region: ah, okay.

[18:07] <geoffb> wolverian, you must be crazy.  Or have spent a very large block of time tuning your mail reading skills

[18:07] <wolverian> Limbic_Region: that is very unperl6ish. I think the idea is to use coroutines for this kind of a thing, and 'for' instead of 'while'. it's all pretty much unspecced right now I think, though. :)

[18:08] <wolverian> geoffb: I don't read all the ubuntu-* mails. 

[18:08] <Limbic_Region> wolverian - here is the trouble

[18:08] <Limbic_Region> I think in p5

[18:08] <Limbic_Region> when I am writing p6 I am really just translating the p5 in my head

[18:08] <wolverian> right. that's a common problem, I think.

[18:08] <wolverian> you need a more functional mindset

[18:09] <Limbic_Region> well - from a p5 perspective - that is pretty freaking functional

[18:09] <geoffb> wolverian, that's why I read the p6 summaries -- to get a clue as to which threads I care about.  Reading every last email would leave me with no coding time.  :-)

[18:09] <geoffb> Limbic_Region, wolverian: yeah, I suspect that p5-think will be an issue for a while.  I know it will be for me . . . .

[18:10] <geoffb> Maybe I need to follow the path someone else started on today and learn Haskell and Forth at the same time, just for brain expansion purposes

[18:11] <Juerd>     my @pos = (0) xx (@loop.elems - 1), -1;

[18:11] <Juerd> The former () are bad style now.

[18:11] <wolverian> is prefix:<=> specced?

[18:11] <Juerd> ++@loop

[18:11] <Juerd> What's ++@loop? (in a signature)

[18:12] <Limbic_Region> Juerd - apparently an alternative to "is required"

[18:12] <Juerd> Aha

[18:12] <Limbic_Region> according to S06, named parameters are optional unless marked "is required"

[18:12] <Limbic_Region> it goes on to say, alternatively we may ... 

[18:12] <wolverian> why require it to be named?

[18:12] <Limbic_Region> but only the plusplus version is in pugs ATM

[18:13] <Limbic_Region> wolverian - so they can come in any order

[18:13] <wolverian> also, I'm now unsure what your code actually does, Limbic_Region 

[18:13] <Limbic_Region> and also so that it is easy to add options later

[18:13] <wolverian> oh, arbitrary nested loops.

[18:13] <wolverian> right.

[18:13] <Limbic_Region> wolverian - given a list of array refs - it will loop... yeah

[18:14] <Limbic_Region> ok Juerd - what specifically about my @pos = (0) xx (@loop.elems - 1), -1; is bad style?

[18:14] <Limbic_Region> the parens around the 0 

[18:14] <Limbic_Region> or the ones around the substraction?

[18:14] * Limbic_Region assumes the 0

[18:15] <Juerd> Limbic_Region: The 0

[18:15] <Limbic_Region> done - thanks

[18:15] <Juerd> Note that this is my opinion, not necessarily that of the perl 6 community.

[18:15] <Limbic_Region> I agree with dropping stuff that isn't required as long as it is still readable

[18:15] <Limbic_Region> in this case both are true

[18:16] <wolverian> hrm. how does one write a method on an array that loops over its own elements, besides an explicit @self?

[18:16] <Limbic_Region> again - issue of p5 to p6 since the parens ARE needed in p5 to DWIM

[18:26] <Corion> I saw in the backlogs that my system() test caused failures - any Win32 user can enlighten me as to what exactly was the output because it worksforme (resp. did when I commited :) )

[18:27] <Corion> (maybe svn has problems with binary files?)

[18:27] <Corion> (and the test still worksforme)

[18:30] <Limbic_Region> http://perlmonks.org/index.pl?node_id=462987 for anyone who is interested

[18:30] * Limbic_Region has to wander off to a meeting now

[18:30] <meppl> guten abend

[18:33] <lumi> Juerd.ping

[18:37] <Juerd> pong

[18:38] <lumi> Would it be possible for me to have a feather account?

[18:38] <Juerd> Of course.

[18:38] <Juerd> But only when requested by email, which you did

[18:38] <Enveigler1> Corion: Save me searching, is there an easy way to run individual tests?

[18:40] <Corion> Enveigler1: pugs -Iblib6\lib -w t\builtins\system\01-*

[18:41] <Corion> pugs -Iblib6\lib -w t\builtins\system\01-strings-with-spaces.t.disabled

[18:41] <Corion> (to be exact)

[18:41] <Limbic_Region> is the proper thing for ref to return on a code ref 'Sub' ?

[18:42] <Limbic_Region> or rather, is 'Sub' the only thing ref will return for a code reference?

[18:42] <wolverian> Code

[18:43] <Limbic_Region> pugs -e "my $foo = sub { say 'bar'; }; say ref $foo"

[18:43] <Limbic_Region> ?eval ref sub { say 'bar'; }

[18:43] <evalbot6> ::Sub 

[18:43] <Limbic_Region> ?

[18:44] <wolverian> Sub.does(Code)

[18:44] <wolverian> ?eval Sub.does(Code)

[18:44] <evalbot6> bool::true 

[18:44] <wolverian> ?eval Code.does(Sub)

[18:44] <evalbot6> bool::false 

[18:44] <wolverian> ?eval Bare.does(Sub)

[18:44] <evalbot6> bool::false 

[18:44] <wolverian> ?eval Bare.does(Code)

[18:44] <evalbot6> bool::true 

[18:44] <wolverian> sorry for the spam. :)

[18:45] <geoffb> That was a short meeting, Limbic_Region . . . wish all of mine were that short

[18:46] <Limbic_Region> well - I am trying to add in optional code ref support to the arbitrary nested loops and I am confused as to how to determine if it is the "right thing" or not

[18:46] <Limbic_Region> geoffb - other parties were delayed 

[18:46] <Limbic_Region> likely will start in 5-10 minutes

[18:47] <pasteling> "Enveigler" at 81.131.127.188 pasted "Sample 01-strings-with-spaces.t output" (15 lines, 540B) at http://sial.org/pbot/10667

[18:47] <Limbic_Region> wolverian - you did give me an idea though

[18:47] <Limbic_Region> $code(@group) if $code.does(Code);

[18:48] <Enveigler1> Corion: That's from the first two tests. Lots more if you want it? 

[18:48] <Corion> Enveigler1: Hmmm. Does t\builtins\system\t e s t\showav.exe exist ?

[18:49] <Corion> Ow! Ow! Ow!

[18:49] <Corion> I see now :(

[18:49] <geoffb> Limbic_Region, out of curiosity, why not do your looping code recursively, since that seems to be the FP way . . . ?

[18:49] <Corion> I forgot to add the "t e s t" directory to subversion :(

[18:49] * Corion goes to add it

[18:50] <Enveigler1> Corion: I won;t past the other 321 cases then :)

[18:50] <Corion> Hmmmm. We-ird. "t e s t" supposedly is already under version control.

[18:51] <Corion> (but it doesn't get checked in or out)

[18:51] <Enveigler1> Where in the tree? 

[18:51] <Corion> Maybe svn has problems with directories with spaces in their names?

[18:51] <Enveigler1> Could be.

[18:53] <Corion> r4329 should work now ...

[18:53] * Corion crosses his fingers

[18:54] <theorbtwo> svn up just did a bunch of As on the t e s t directory.

[18:54] <theorbtwo> Of course, this is on linux, not win32, but I doubt it makes much difference.

[18:54] <Enveigler1> I'll update

[18:56] <Enveigler1> Corion: That's fixed it.

[18:56] <Corion> theorbtwo: Yeah - I wiped the .svn directory in "t e s t" and then added the files again, and then it seemed to work...

[18:56] <Corion> yay :)

[18:57] <Corion> BTW, I really wonder - Haskells system() and quoting seems to be much better/more robust than Perl5s system(LIST)

[18:57] <Corion> (on Win32)

[18:57] <jabbot> pugs - 4327 - Tree : adding extended tests (213 of the

[18:57] <jabbot> pugs - 4328 - Added 't e s t' directory for system() t

[18:57] <jabbot> pugs - 4329 - Reenabled system() test

[18:59] <Enveigler1> All 323 now pass

[19:00] <Khisanth> Corion: as long as it doesn't require some contortions just to make it treat a single arg as a path 

[19:00] <Khisanth> it would be better :)

[19:00] <Corion> src/Pugs/Context.hs:145:0: Warning: Defined but not used: `castOk'

[19:01] <Corion> src/Pugs/Context.hs:211:0: Warning: Defined but not used: `prettyTypes'

[19:01] <Corion> (on Win32 at r4329)

[19:01] <theorbtwo> I get those too, Corion.

[19:01] <Corion> Ah, so these warnings are cross-platform ;)

[19:02] <Corion> BTW, I'd like if somebody wrote the ShowArgv.hs which I punted on :)

[19:03] <Corion> ... and if we have Parrot, we should also test that Parrot sees the same command line (resp. parses it the same way)

[19:04] <nothingmuch> anybody familiar with parsec?

[19:05] <wolverian> I am imploding my brain trying to grok how to use coroutines to do permutations 

[19:08] <Corion> nothingmuch: Not really familiar but I think I understand parts of the concept

[19:08] <nothingmuch> Corion: i'm doing an excercise

[19:08] <nothingmuch> i'm forcing myself to write a forth compiler in haskell, which will eventually target parrot

[19:08] <nothingmuch> so that I will finally learn all three

[19:09] <nothingmuch> and documenting my progress in tutorial format

[19:09] <nothingmuch> and I'm having some issues writing the parser, but they were just resolved, so now i have other issues

[19:13] <Corion> nothingmuch: I think Forth people have a special word for other people that never wrote Forth yet wrote an interpreter/compiler of it :)

[19:13] <nothingmuch> heh =)

[19:13] <Limbic_Region> geoffb - I think in p5 and that's how I would have done it in p5

[19:15] <geoffb> Limbic_Region, nodnod.  I had to do something similar in p5 some time ago (but not as a lazy generator; I just took all combos at once).  Tried to do it iteratively, kept dealing with edge cases, turned it into a couple recursive lines.

[19:15] <geoffb> That said, I'm now working on your puzzle, because its fun.  :-)

[19:16] <wolverian> what does prefix:<=> do? 

[19:17] <Limbic_Region> geoffb - I am currently adding support for the optional parameters - should be done RSN

[19:17] <geoffb> cool

[19:18] <geoffb> One downside of pugs being incomplete is I can never tell if my understanding is broken or pugs doesn't support something yet

[19:18] <nothingmuch> how do i match the "end" in parsec?

[19:19] <Corion> Limbic_Region: I think "prefix:<=>" is the =$fh syntax

[19:19] <wolverian> Corion: is it specifically for filehandles?

[19:20] <Limbic_Region> Corion - ok - and this means what to me?

[19:20] <Corion> wolverian: Judging from "&prefix:<=>", I'd say no.

[19:20] <Corion> Limbic_Region: Dunno - depends on what context you saw it in.

[19:20] <wolverian> Corion: without the arg list, you can't tell :)

[19:20] <wolverian> Corion: if it is a generic op, what are its semantics exactly?

[19:21] * Limbic_Region didn't ask Corion

[19:22] <wolverian> no, I did. :)

[19:22] * Limbic_Region has no idea what you are talking about

[19:22] <Corion> Ah. I'm confused

[19:22] <wolverian> I wonder if 'for' can take a coroutine as the first argument and iterate it without wrapping it in something

[19:22] <Corion> wolverian: With the &prefix<=>, that should be it - because =$fh is $fh.readline()

[19:23] <Corion> so `for =$fh { ... }` # should call $fh.readline() (or $fh.getline(), dunno)

[19:23] <wolverian> hmm. why?

[19:23] <wolverian> as in, how does = know that? or does it ask $fh?

[19:25] <wolverian> what I really want to know is an iterator spec

[19:25] <wolverian> which I guess isn't written yet )

[19:25] <wolverian> :)

[19:26] <Corion> wolverian: I think that for() knows that, but I'm not sure.

[19:27] <wolverian> hmm. maybe $fh isn't an iterator nor a coroutine. then = would make sense.

[19:27] <wolverian> but that doesn't make sense either.

[19:28] <wolverian> I'm just going to give up and wait for AES17, or whichever it was that these will be specced in :)

[19:30] <geoffb> lunchtime . . . 

[19:30] <nothingmuch> wooo!

[19:31] <nothingmuch> *Harrorth.Parser> parseTest forth ": FOO 2 4 BAR; GORCH : ding baz oi oi oi ;"

[19:31] <nothingmuch> [NewWord "FOO" [Push 2,Push 4,Invoke "BAR"],Invoke "GORCH",NewWord "ding" [Invoke "baz",Invoke "oi",Invoke "oi",Invoke "oi"]]

[19:31] * Limbic_Region found a pugsbug but isn't sure it is worth pursuing

[19:31] <Limbic_Region> next if $foo.does(Code); # works fine

[19:32] <Limbic_Region> next if $foo.does(Code) && $foo.($bar); # bombs out

[19:32] <Limbic_Region> but only if $foo is undef

[19:32] <sri_> is it possible to stringify rules?

[19:32] <Corion> I guess that $rule.perl() doesn't work ;)

[19:33] <sri_> for reuse in eval...

[19:33] <Corion> sri_: Why use eval ? :)

[19:33] <sri_> would be a pita to write File::Find::Rule without it

[19:33] <Corion> Without eval() `

[19:34] <Corion> ?

[19:34] <sri_> it builds big strings for rules

[19:34] <Corion> sri_: Then Perl6ify it

[19:34] <Corion> ... instead of doing a 1-by-1 port

[19:34] <sri_> suggestion?

[19:34] <Corion> "don't build strings"

[19:35] <sri_> what instead?

[19:37] <Corion> sri_: Dunno - use subroutines

[19:37] <sri_> slow *cough*

[19:37] <Corion> (rules won't be available everywhere currently anyway)

[19:37] <Corion> ...

[19:38] <Corion> "slow" when talking about interaction with the file system ...

[19:38] <Limbic_Region> geoffb - finished

[19:38] <Limbic_Region> I will post the two optional arguments as a reply 

[19:38] <sri_> iterating over a stack of subs will definately slow it down

[19:39] <Corion> I guess "slow" is better than "not working". But that's me.

[19:39] <sri_> isn't there some magic new perl6 construct? :)

[19:40] <Corion> It's called "autrijus" :)

[19:40] <Corion> sri_: First implement the slow version and then ask autrijus to make it faster ;)

[19:40] <sri_> it's currently not available

[19:42] <Corion> re

[19:49] <Juerd> sri_: Rules are code, not string-like

[19:49] <geoffb> bak

[19:49] <geoffb> Limbic_Region, OK, I'll take a look in a bit.  In the mean time, still messing with my impl.

[19:49] <sri_> hmm... :/

[19:50] <Limbic_Region> http://perlmonks.org/index.pl?node_id=463006 # when you get to it

[19:51] <sri_> maybe i should implement a callback based File::Find for now

[19:53] <Khisanth> isn't File::Find alreayd callback based?

[19:54] <sri_> yes, but not very nice

[19:54] <sri_> imo

[19:54] <Khisanth> Limbic_Region: why not loop { }?

[19:55] <Limbic_Region> Khisanth - while ( 1 ) you mean?

[19:55] <Limbic_Region> good idea

[19:56] <Khisanth> hmm $code() is going take a bit of getting used to

[19:58] <Limbic_Region> you prefer the .

[19:58] <Limbic_Region> $code.( @foo ); # ???

[19:58] <Khisanth> not at all

[19:59] <Khisanth> but $code->() to $code() mapping takes a bit more effort than some of the other changes

[20:01] * integral is starting to get used to it

[20:01] * Limbic_Region wanders off to another meeting but hopes this challenge will get more of a response then the last one

[20:01] <integral> OTOH using -> for pointy blocks is very handy

[20:01] <Limbic_Region> it is way cooler code IMO anyway

[20:03] <wolverian> my &code = { }; code "bar";

[20:03] <integral> that is very, very cool :-)

[20:04] <wolverian> $code is very unperl6ish, I think.

[20:04] <integral> although shouldn't that give an arity mismatch error now?

[20:04] <wolverian> integral: I forgot the ..., obviously :)

[20:04] <integral> ah!

[20:04] <wolverian> integral: anyway, that should put "bar" into $_

[20:04] <wolverian> further checking is impossible in the presence of eval

[20:04] <theorbtwo> I'd prefer to see a lazy-list based file-find.

[20:04] <integral> I thought blocks didn't have that as a default signature now?

[20:05] <wolverian> integral: they certainly do in pugs, and the Synopsis (still?) says so.

[20:05] <theorbtwo> ?eval ({}).arity

[20:05] <evalbot6> 1 

[20:05] <integral> ah, ok

[20:05] <integral> make it hard to specify a zero-arity block though

[20:05] <theorbtwo> (The parameter is *@_, though there is presently no way to find that out.)

[20:05] <theorbtwo> ?eval (sub (){}).arity

[20:05] <wolverian> ?eval (-> {}).arity

[20:05] <evalbot6> 1 

[20:05] <evalbot6> 0 

[20:06] <wolverian> argh!

[20:06] <theorbtwo> ?eval (sub (){}).arity

[20:06] <evalbot6> 1 

[20:06] <wolverian> I win. :)

[20:06] <theorbtwo> Yep.

[20:06] <integral> bug :-)

[20:06] <theorbtwo> I agree, integral.

[20:06] * dha throws confetti at wolverian

[20:06] <wolverian> is that specced?

[20:06] * wolverian eats the confetti

[20:07] <dha> Let me know when you're all done with the esoteric stuff so I can bug you about something more mundane. :-)

[20:07] <wolverian> mundane is just as interesting.

[20:07] <integral> perl6 makes the advanced mundane!

[20:07] <wolverian> true.

[20:07] <wolverian> integral++

[20:08] <dha> ok, then. why has my build of Pugs (on OS X) been hanging for the past hour at "/usr/bin/perl -Iinc util/version_h.pl src/Pugs/pugs_version.h" ?

[20:09] <integral> that is interesting

[20:09] <integral> Are you using a tarball, svn or svk?

[20:09] <wolverian> theorbtwo: re: lazy lists. how does one generate a lazy list? 

[20:09] <dha> tarball. 6.2.6

[20:09] <theorbtwo> The lazy {} thingy, but that's unspecced, I think.

[20:10] <dha> I had the same problem with 6.2.5, but didn't have a chance to bother anyone else about it. :-)

[20:10] <integral> did it say anything after that line?

[20:10] <wolverian> theorbtwo: right. so I guess I'll just wait. :)

[20:10] <theorbtwo> Blast, I thought we figured out that problem.

[20:10] <dha> nope. that's the last line emitted

[20:10] <dha> For what it's worth, the cursor is on the line following.

[20:11] <integral> do you have svk installed?

[20:11] <dha> yep

[20:11] <integral> ah, it could be a subtle interaction with that I suppose

[20:11] <integral> if you kill it, and try a "svk info" in your pugs directory, does that hang?

[20:12] <dha> lemme see...

[20:12] <dha> mind you, if I interrupt there, it goes on. but if this follows suit from 6.2.5, it'll stall later on too

[20:13] <dha> svk wants me to create a repository (I haven't had a chance to actually *use* it on this machine)

[20:13] <integral> ah, that'll be the problem

[20:13] <dha> ok, svk isnt' hanging.

[20:13] <dha> ah. I'll try building again

[20:13] <integral> it doesn't ask for user input?

[20:14] <dha> uh... no

[20:14] <theorbtwo> Yeah.  It's asking you a question where you can't see it, and waits for you to answer it.

[20:14] <integral> ok, the quick fix is for you to do the svk depot init thing

[20:14] <dha> svk tells me "path /Users/dha/Perl6-Pugs-6.2.6 is not a checkout path.                                                                                                              "

[20:14] <dha> yes, did that.

[20:14] <integral> ok, and does your build still hang?

[20:14] <dha> and now the build is progressing from version.h

[20:15] <dha> so far, so good. hopefully, the later hang won't occur either. 

[20:15] <integral> ok.   This is really my fault for not writing robust code for this stuff ;-)

[20:15] <dha> thanks

[20:15] <dha> yes. I blame you. ;-)

[20:15] <dha> And, while I'm asking stupid questions, is there a way to recover your password for nick registration on freenode? I've not been here for ages, and I can't remember it to save my life

[20:16] <integral> if you set an email just ask a staff member (hostmask: *.staff.freenode)

[20:16] <dha> frankly, this hasn't been my week.

[20:16] <PerlJam> dha: so, naturally, it's a perfect time to start using pugs!  ;)

[20:18] <dha> as soon as I figure out what that means, I'll do that. thanks. :-)

[20:19] <dha> pj - what, so I can feel the previous part of my week was less frustrating by comparison? :-)

[20:19] <integral> well pressure does appear to encourage quick bodges that work, rather than well-designed code that doesn't after months of work ;-)

[20:20] <dha> somehow, I'm not surprised.

[20:20] <theorbtwo> Can somebody who uses SVK do perl -le '{close STDIN; $x=`svk info`;}; print $x' for me?

[20:20] * Limbic_Region is quite happy that his latest project didn't uncover any bugs (at least not ones he is sure are bugs)

[20:22] <dha> ok. I'm going to go on to work on problems I actually understand for a change. 

[20:22] <dha> Thanks, integral.

[20:22] <dha> integral++

[20:23] <wolverian> theorbtwo: done. want me to nopaste it?

[20:23] <theorbtwo> Sure.

[20:24] * nothingmuch tries to wake autrijus up

[20:25] <wolverian> The requested URL /paste was not found on this server.

[20:25] * wolverian ponders

[20:25] <integral> http://sial.org/pbot/perl6

[20:25] *** integral changes topic to: Pugs 6.2.6 uploaded by cpan-upload.p6! | http://pugscode.org/ <Overview Journal Logs> | http://pugs.kwiki.org | paste at http://sial.org/pbot/perl6

[20:25] <nothingmuch> anybody mind going through feather:~nothingmuch/harrorth and making sure chapter 3 isn't complete utter crap?

[20:25] <nothingmuch> wolverian: add a slash at the end

[20:26] <wolverian> nothingmuch: it gave me that after I sent the paste request

[20:27] <pasteling> "wolverian" at 80.222.110.168 pasted "theorbtwo's svk thing" (10 lines, 304B) at http://sial.org/pbot/10669

[20:27] <nothingmuch> wolverian: indeed. add a slash at the end of pbot/

[20:27] <nothingmuch> i suspect the action is "paste"

[20:27] <nothingmuch> and thus it becomes "sial.org/paste" instead of "sial.or/pbot/paste"

[20:27] <wolverian> nothingmuch: ah. right.

[20:28] <nothingmuch> i'm only guessing though, i use pbotutil.pl ;-)

[20:28] <nothingmuch> autrijus: when you wake up, AST + Parser are done

[20:29] <Limbic_Region> nothingmuch plusplus

[20:29] <nothingmuch> Limbic_Region: have you dabbled in haskell yet?

[20:30] <Limbic_Region> I was going to start this morning

[20:30] <Limbic_Region> got scared

[20:30] <Limbic_Region> decided to do more p6

[20:30] <Limbic_Region> will play with Haskell tonight or tomorrow night

[20:31] <Limbic_Region> depending on theorbtwo's availability to coach me

[20:31] <nothingmuch> so you might be interested:

[20:31] <nothingmuch> i'm writing a tutorial

[20:31] <nothingmuch> except the catch is that I don't know it yet

[20:31] <theorbtwo> Woo!

[20:31] * Limbic_Region hugs nothingmuch

[20:31] <nothingmuch> so I hope it can be more grokkable by us commoners ;-)

[20:31] <theorbtwo> Limbic_Region: nothingmuch's haskell may well be better then mine.

[20:31] <nothingmuch> the project backing it is compiling forth to parrot assembly with haskell

[20:31] <nothingmuch> so that I can learn all three =)

[20:31] <Limbic_Region> theorbtwo - in the land of the blind, the cyclops is king

[20:32] <Limbic_Region> iow - any sight AFAIAC is what I need right now

[20:32] <nothingmuch> http://feather.perl6.nl/~nothingmuch/harrorth/

[20:32] <theorbtwo> We will likely both be up, so we can form the #teaching_limbic channel.

[20:32] <nothingmuch> darcs get 'feather:~nothignmuch/harrorth'

[20:33] * Limbic_Region really needs to figure out how to fix that

[20:33] <nothingmuch> fix what?

[20:34] <geoffb> The fact that CGI:IRC keeps logging in and out?

[20:34] <Limbic_Region> I had to reinstall FF today to fix some weird bug and now the open link in new tab and this tab are next to one another

[20:34] <Limbic_Region> geoffb - that's me clicking on the wrong thingy

[20:34] <nothingmuch> Limbic_Region: did you get the link?

[20:34] <geoffb> bad thingy!

[20:34] <Limbic_Region> I am looking in the IRC log now

[20:34] <theorbtwo> Don't you have a middle button?

[20:34] <Limbic_Region> got it

[20:35] <Limbic_Region> theorbtwo yes

[20:35] <geoffb> OK, coroutines aren't terribly difficult as a general concept, but DAMN they're hard to use correctly.

[20:35] <SamB> yes, I agree.

[20:36] <SamB> I can't even *think about them* correctly really at all.

[20:36] <theorbtwo> I just got into the habit of middle-clicking.

[20:36] <SamB> they are probably not quite as confusing as multi-shot continuations in an imperative language.

[20:36] * Limbic_Region thinks he will too

[20:37] <Limbic_Region> nothingmuch - do I have to read it in kwid or is there a kwid2X thingy?

[20:37] <nothingmuch> Limbic_Region: i have no idea if there's a kwid2x or whatever, but i find it to be pretty readable

[20:38] <Limbic_Region> ok - will look at it tonight 

[20:38] <Limbic_Region> oh shit

[20:38] <nothingmuch> it's just your plain old wiki text, really

[20:38] * Limbic_Region notes the time and heads home

[20:40] <nothingmuch> KWID: http://www.wougnet.org/Profiles/kwid.html

[20:45] <stevan> nothingmuch: your kwid docs seem to make sense

[20:45] <stevan> someone should port Parsec to perl 6 ;)

[20:45] <nothingmuch> indeed =)

[20:46] <stevan> it seems to just be a stack of subroutines which eat tokens

[20:46] <stevan> or am I simplifying it

[20:47] <stevan> s/simplifying/over-simplifying/

[20:47] <theorbtwo> You are oversimplifying it, but you've got the basic idea, I think.

[20:48] <theorbtwo> The problem is intelegant and elegant handling of failure.

[20:48] <nothingmuch> that's where monads finally start making sense =)

[20:48] <nothingmuch> and purity, too

[20:48] <stevan> theorbtwo: elaborate please :)

[20:48] <stevan> purity++

[20:49] <theorbtwo> If you do 'ac' =~ /a(b|c)/, you need to have the b fail, and try c.

[20:50] <stevan> so the subs should eat tokens, but also be able to throw them back up if something is wrong :)

[20:51] <theorbtwo> Something like that, yeah.

[20:51] <stevan> hmmm

[20:51] <nothingmuch> stevan: the try thing is how it's done

[20:51] <nothingmuch> see parsec docs

[20:51] <stevan> nothingmuch: reading them right now

[21:02] <geoffb> How do you get a coroutine to stop?  In other words, how do you get it from running through all its yields and just starting over again?

[21:02] <geoffb> s/get it from/keep it from/

[21:03] <integral> one approach is to recreate it:  sub make_coro { coro { ... } };  my $coro = make_coro;  ...run_it...; $coro = make_coro;

[21:03] <nothingmuch> geoffb: from without the coro?

[21:03] <integral> err, I probably mean: my &coro := make_coro;

[21:04] <geoffb> Hmmm . . . 

[21:04] <geoffb> Going for a bit of concreteness here:

[21:04] <nothingmuch> integral++

[21:05] <geoffb> Let's say I have sub foo(@list) { coro { @list.map:{yield $^item} } }

[21:05] <integral> wouldn't ???/take be the better option?

[21:06] <geoffb> I want to run through all the items in the list, then stop giving back anything.

[21:06] <geoffb> integral, hmmm

[21:06] <theorbtwo> G'night, all.

[21:06] <theorbtwo> Limbic: I'll probably be back.

[21:06] <integral> coro { ...; yield undef while 1 }

[21:06] <nothingmuch> theorbtwo: he left a while ago

[21:06] <theorbtwo> I know, but he'll see the log.

[21:07] <nothingmuch> ah

[21:07] <geoffb> integral, yeah, I figured I was going to have to do that . . .

[21:08] <integral> you almost want: swap &?CURRENT_SUB, sub { return undef };

[21:09] <geoffb> integral, Actually, got an idea . . . if I combine your previous idea with always doing 'yield $^item but true' then a caller can know when to stop asking

[21:09] <geoffb> integral, now that would be a nice toy . . . .

[21:09] <integral> hmm, doesn't this fit an array/iterator pattern better?

[21:10] <integral> ugh, I can't remember the think that goes with take

[21:10] <geoffb> Trying to learn coroutines . . .

[21:10] <geoffb> gather?

[21:10] <integral> yep that's it

[21:10] <integral> I think I don't like about: return $foo but true, is that you can't get back what truth $foo had before the trueness was forced on it

[21:10] <geoffb> I'm doing the Limbic_Region method: do it the hard way to force yourself to learn something

[21:11] <geoffb> integral, true enough.  :-/

[21:11] <integral> hmm, I should post to p6l more =)

[21:11] <integral> Actually what I really should be using is something like haskell's Maybe, where you add another box

[21:12] <integral> and in haskell maybe is a monad so it can quite invisible

[21:18] <sri_> oh, -l is not yet implemented, that makes File::Find quite dangerous...

[21:18] <stevan> sri_: file tests are pretty easy to do in the Haskell

[21:19] <stevan> assuming the Haskell System.IO library implements the function

[21:19] <sri_> then go implement :)

[21:19] <sri_> i'm very bad at haskell

[21:19] <stevan> sri_: outta tuits for the day, but you are free to do it :)(

[21:19] <stevan> I bet I suck at haskell more ;)

[21:19] <sri_> no way! :)

[21:20] <stevan> what does it do anyway?

[21:20] <sri_> symlinks can result in infinite loops

[21:20] <sri_> very easy

[21:21] <sri_> -l just tests for symlink

[21:21] <stevan> hmm

[21:21] <stevan> lemme look at the haskell docs

[21:21] <stevan> no  promises, but I will give it a try

[21:21] <sri_> :)

[21:31] <stevan> sri_: I found the Haskell function, but it is in the Posix library an so it is non-portable

[21:31] <stevan> which means its it over my head :)

[21:31] <sri_> mkay...thx for trying ;)

[21:31] <stevan> although wait a second,.. I just found something

[21:32] <stevan> sri_: what OS are you on?

[21:32] <sri_> osx

[21:33] <stevan> src/Pugs/Compat.hs has some Posix stuff in it, ... hmm this is Corion's territory really

[21:33] <sri_> parent directory is on every os ..?

[21:35] <theorbtwo> sri_: No -- it's not on VMS, or on MacOS <= 9.

[21:35] <stevan> theorbtwo: any thoughts on this?

[21:35] <theorbtwo> Donno what this is yet.

[21:35] <Aankhen``> G'night.

[21:35] <stevan> adding -l support

[21:36] <stevan> there is a System.POSIX.Files.isSymbolicLink

[21:36] <stevan> isSymbolicLink :: FileStatus -> Bool

[21:37] <stevan> I am thinking that adding isSymbolicLink to the Pugs.Compat export(?) list will do the trick

[21:37] <stevan> (and of course add a failing version for Win32)

[21:37] <theorbtwo> So do it in terms of that in the POSIX case, and make it return false always in the non-posix case?

[21:38] <stevan> return false, or warn/fail,.. it seems the convention in Compat

[21:39] <stevan> once it is in there, it should be fairly simple to add it to Pugs.Prim.FileTest and Pugs.Prim

[21:39] <stevan> but as I said before

[21:39] <stevan> my haskell sucks :)

[21:40] <theorbtwo> stevan: The only way for it to start sucking less is for you to use it more.

[21:40] <stevan> theorbtwo: agreed, but its a matter of tuits

[21:40] <stevan> I have been reading algorithms though, so I can read it now

[21:40] <stevan> just not write yet

[21:41] * stevan is very much looking forward to the hackathon (aka - no $work for a week)

[21:42] <theorbtwo> I'm very worried about the hackathon.

[21:42] <theorbtwo> ...but largely just because I'm like that.

[21:46] <theorbtwo> Welcome back, Limbic!

[21:47] <Limbic_Region> thanks

[21:47] <Limbic_Region> I see you are back too

[21:47] * Limbic_Region is reading what nothingmuch has produced so far ATM

[21:50] *** mrborisguy is now known as mrborisguy_

[21:51] *** mrborisguy_ is now known as mrborisguy

[21:52] <geoffb> Limbic_Region, have first coroutine version of looper function . . . just signing up for a PM account so as to reply to your node.

[21:52] <theorbtwo> Welcome to the monestary, geoffb.

[21:53] <Limbic_Region> geoffb - you can post anonymously

[21:53] <Limbic_Region> but we do encourage you to sign up

[21:53] <Limbic_Region> btw - does it run in pugs?

[21:54] <geoffb> Limbic_Region, my AC days are over, now that I'm published.  Got tired of full on paranoia 24x7

[21:54] <geoffb> And yes, it runs under pugs

[21:54] <geoffb> :-)

[21:54] <Limbic_Region> cool

[21:54] <Limbic_Region> I have no idea why I didn't think of this solution before

[21:55] <Limbic_Region> it is quite simple and I know I thought about it a bunch of times (though never invested serious effort)

[21:56] * Limbic_Region is going to beat nothingmuch senseless if he ends up learning YAL by reading his tutorial on Haskell

[21:57] * theorbtwo grins.

[21:57] <jabbot> pugs - 4330 - Hopefully, solve the problems with the v

[21:58] <geoffb> LOL

[21:58] <geoffb> OK, Guess I'm off to the Writeup Formatting Tips node . . .

[21:59] <geoffb> Ah, now THAT'S a little less borken

[22:00] <geoffb> http://perlmonks.org/index.pl?node_id=463036

[22:00] <geoffb> That's just the raw iterator.  

[22:00] <geoffb> I'll work on the other params next

[22:01] <wolverian> geoffb: now make it use 'for' syntax instead of 'while'. :)

[22:01] <Limbic_Region> geoffb++

[22:02] <Limbic_Region> will play with it after I am finished reading nothingmuch's tutorial and building pugs

[22:02] <wolverian> (that wasn't criticism - I'm just overeager to know how to do that generally)

[22:02] <wolverian> (lazily.)

[22:03] <Limbic_Region> lazy {} is still unspecced though right?

[22:04] <geoffb> wolverian, I'll get there . . . hell, I just got pugs running yesterday.  :-)

[22:04] <wolverian> geoffb: nice. :)

[22:04] <wolverian> Limbic_Region: yes, there is no official spec how to make lazy lists.

[22:04] <wolverian> (or whatever other interface 'for' and iterators might use)

[22:05] <Limbic_Region> I would have liked to have included some of the p6 iterators I have built recently in the iterators tutorial I wrote

[22:06] <Limbic_Region> perhaps I will make a part 2

[22:06] <Limbic_Region> theorbtwo - still about?

[22:07] <Limbic_Region> actually - coroutines are still unspecced too AFAIK

[22:07] <Limbic_Region> AES17 hasn't been written yet

[22:07] <theorbtwo> I am.

[22:08] <Limbic_Region> ok - mind if I /msg you

[22:08] <Limbic_Region> I didn't get very far with nothingmuch's tutorial

[22:08] <Limbic_Region> other than to learn that parsec looks like Parse::RecDescent at a superficial level

[22:08] <theorbtwo> Not at all, though talking in the chan might be a better idea.

[22:09] <Limbic_Region> you know how verbose I can be - didn't want to monopolize the main channel

[22:09] <theorbtwo> Create a new chan, then?

[22:09] <geoffb> Yes, but it's interesting stuff

[22:09] <theorbtwo> I don't want you to miss out on tutoring from people who know more then me.

[22:09] <geoffb> Appropriate to the channel

[22:10] <geoffb> Especially since the IRC logs are so handy

[22:10] <theorbtwo> And I don't want to miss out on more audiance.

[22:10] <geoffb> theorbtwo: ham

[22:10] <geoffb> :-)

[22:10] <theorbtwo> Lazy, Hubirific.

[22:10] <theorbtwo> Lazyness is not wanting to give the same speech more then once.

[22:11] <theorbtwo> Hubrific is thinking that I have something to teach.

[22:11] <theorbtwo> Obviously, I'm not very good at the second.

[22:11] * theorbtwo wonders how to work in Impatience.

[22:12] <geoffb> Having to spend time saying something more than once?

[22:12] <theorbtwo> I already called that Lazyness, though.

[22:12] <Limbic_Region> geoffb - I just replied to your node to point out that coroutines aren't specced yet for the benefit of others

[22:13] <geoffb> good point

[22:13] <geoffb> (er, that was for theorbtwo )

[22:13] <Limbic_Region> theorbtwo - let's start then with what I want to get working

[22:13] <geoffb> Limbic_Region, thanks

[22:13] <theorbtwo> Whenever you're ready.

[22:13] <Limbic_Region> http://svn.openfoundry.org/pugs/examples/cribbage_scoring.p6

[22:14] <Limbic_Region> there are 4 things (in comments) that need to be done before that code will work

[22:14] <Limbic_Region> so what I would like to do is pick 1 (that you think you know how to do) and have you walk me through fixing it

[22:14] <Limbic_Region> hopefully learning how to fish in the process

[22:16] <theorbtwo> mikfire09: Not sure how approprate this is really going to be -- but pick up a copy of ghc (at least 6.4), and a svn checkout of pugs, while I figure out which of Limbic's four bugs to tackle.

[22:17] <mikfire09> It will take me a while -- my laptop is not connected at the second.

[22:17] <theorbtwo> Oh.

[22:18] <Limbic_Region> theorbtwo - only 2 are bugs

[22:18] <Limbic_Region> the other 2 are unimplemented features

[22:20] <theorbtwo> As far as I'm concerned, unimplemented features are bugs.

[22:20] <Limbic_Region> heh

[22:20] <Limbic_Region> well, if I had my choice of the 4

[22:20] <Limbic_Region> I would pick hyperdereferncing

[22:21] <theorbtwo> Good; I think that may be the most reasonable of them -- mostly because I overheard autrijus give a plan for it.

[22:21] <theorbtwo> Of course, I don't remember what it was.

[22:21] <Limbic_Region> right - I asked about it earlier this morning

[22:21] <Limbic_Region> it is in the IRC logs

[22:22] <Limbic_Region> http://colabti.de/irclogger/irclogger_log/perl6?date=2005-06-02,Thu

[22:22] <Limbic_Region> search for "autrijus - of the 4 things that need to be done to get"

[22:22] <Limbic_Region> that's the start of the conversation

[22:22] <theorbtwo> autrijus	hyper deref will make you learn about parser :)

[22:22] <theorbtwo> which is considerably easier than the rest of source code

[22:22] <theorbtwo> so maybe that first 	14:02

[22:22] <theorbtwo> 	Limbic_Region guesses he will wait for a rainy day 	14:02

[22:22] <theorbtwo> autrijus	Limbic_Region: basically we already have &infix:<.{}>

[22:22] <theorbtwo> so hyper deref is just adding the >>.{} form to parser, that's all 	14:03

[22:22] <theorbtwo> theorbtwo	.{} is infix? Shouldn't it be postcircumfix? 	14:03

[22:22] <theorbtwo> autrijus	good catch.

[22:22] <theorbtwo> feel free to fix the Prim entry 	14:04

[22:23] <theorbtwo> We're going to do that, since autrijus suggested doing it first.

[22:23] <Limbic_Region> ;-)

[22:23] <Limbic_Region> ok

[22:23] <Limbic_Region> I assume Prim.hs

[22:23] <theorbtwo> Also, I don't know much about the parser, and this is a good excuse to learn.

[22:25] <mikfire09> orb -- I will be back in a bit.  I need to find food & beer

[22:27] <jabbot> pugs - 4331 - Ported File::Find, first try for a new a

[22:29] <Limbic_Region> geoffb - you got another useful reply

[22:29] <geoffb> thx

[22:29] <Limbic_Region> not sure if you have your settings set up to automatically /msg you when you get a reply

[22:29] <Limbic_Region> if you don't you should

[22:29] <Limbic_Region> it is helpful

[22:29] <revdiablo> dang, this code geoffb posted doesn't work -- I guess my week-old pugs is out of date

[22:29] <revdiablo> :)

[22:30] <Limbic_Region> that was like 3 releases ago revdiablo

[22:30] <Limbic_Region> :P

[22:30] <revdiablo> :)

[22:31] *** kelan_ is now known as kelan

[22:31] <revdiablo> this build I have is about a day after 6.2.5

[22:31] <revdiablo> building the HEAD now...

[22:31] <theorbtwo> Uff... this stuff is harder then I thought.

[22:32] <Khisanth> theorbtwo: autrijus makes it look so easy eh?

[22:34] <geoffb> Limbic_Region, OK, I'll go take a look at my settings.

[22:34] <theorbtwo> Exactly, Khisanth.

[22:34] <revdiablo> Limbic_Region: hmm, that's not a default setting?

[22:34] <theorbtwo> Really, I've not strayed that far out of the stuff I know how to do.

[22:34] <theorbtwo> Somewhat sadly, no, it's not the default.

[22:34] <theorbtwo> Perhaps I should fix that at some point.

[22:35] <Limbic_Region> dunno revdiablo

[22:35] <Limbic_Region> which is why I said - if its not go set it

[22:35] * Limbic_Region is playing with geoffb's example now

[22:36] <geoffb> Limbic_Region, I take it the /msg functionality assumes (as luckily is the case) that your PM name matches your freenode nick?

[22:36] <mugwump> damn, my PM name is too long..

[22:36] <Limbic_Region> nope

[22:36] <revdiablo> geoffb: it sends you a PM /msg

[22:36] <Limbic_Region> Limbic~Region at the Monastery

[22:37] <mugwump> (for IRC)

[22:37] <revdiablo> geoffb: at perlmonks, above the chatterbox nodelet, you will see any msgs you have received

[22:37] <Limbic_Region> and it goes to the Monastery (which has its own messaging system)

[22:37] <mugwump> oh, maybe it isn't.  I'm sure I'm had it truncated to "mugwumpjis" before

[22:37] * mugwump shrugs

[22:37] <geoffb> revdiablo, Ah, so should refresh the page often, I guess

[22:37] <theorbtwo> Ah, so you /are/ that mugwump.

[22:37] <theorbtwo> I was unsure.

[22:37] <revdiablo> geoffb: well, I usually notice it after I have clicked on another link

[22:37] <mugwump> :)

[22:38] <revdiablo> geoffb: but if you want to refresh often, be my guest :)

[22:39] <Limbic_Region> geoffb - I tend to not use "refresh"

[22:39] <Limbic_Region> I tend to click on the link for Other Users

[22:39] <Limbic_Region> that takes you to their homenode - so you can learn a bit about your fellow monks

[22:39] <Limbic_Region> they often have good links for you to follow

[22:39] <Limbic_Region> when that fails to keep my interest, I check out Newest Nodes

[22:40] <geoffb> Ah.

[22:40] <geoffb> And you manage to get coding done also?  ;-)

[22:40] <Limbic_Region> when I have tabbed browsing - sure

[22:41] <Limbic_Region> ok - so in your example you are optimizing for specific cases

[22:41] <Limbic_Region> I got that much no problem

[22:41] <theorbtwo> I think I'm beginning to figure this out.

[22:42] <Limbic_Region> my &rest = NL2(loop => @loop[1..Inf]); # is giving me some problems though

[22:42] <Limbic_Region> mind explaining?

[22:42] <Limbic_Region> oh wait

[22:42] * geoffb was about to explain, then saw light over Limbic_Region's head

[22:43] <Limbic_Region> is the Inf a slick way of not having to figure stuff out?

[22:43] <revdiablo> aw, the debian version number was out of date -- gotta build it again

[22:43] <mugwump> geoffb: is that coro on PM in pugs examples anywhere?

[22:43] <Limbic_Region> mugwump - nope

[22:43] <Limbic_Region> I just came up with the challenge

[22:43] <geoffb> yeah, don't have to figure out how big @loop is

[22:43] <Limbic_Region> and geoffb just came up with the contribution

[22:43] <geoffb> Just basically "give me every element, starting at 1"

[22:43] <Limbic_Region> ok - not sure that's how I would have cheated

[22:44] <geoffb> Hey now, no cheating here.  :-)

[22:44] <Limbic_Region> as in it isn't clear from first glance

[22:44] <Limbic_Region> mugwump - I do intend to check in 1 or more examples after more people have had a chance to reply

[22:44] <Limbic_Region> for instance - revdiablo's sagely advice of turning the map into a for

[22:45] <geoffb> Limbic_Region, as noted in my reply -- my current version has that.

[22:45] <Limbic_Region> right

[22:45] <geoffb> Hmmm, not used to thinking PM way -- probably should go back and edit it.

[22:45] <geoffb> Or not, better to spend time getting full version done

[22:45] <Limbic_Region> geoffb - typically you only do 1 or the other

[22:46] <Limbic_Region> update the node saying "updated thanks to revdiablo"

[22:46] <Limbic_Region> or post a comment agreeing/disagreeing leaving the original in tact

[22:46] <mugwump> Limbic_Region: personally I don't buy that :).  Maybe there needs to be Array.loop in S29

[22:46] <geoffb> Limbic_Region, makes sense

[22:46] <Limbic_Region> don't buy what mugwump?

[22:46] <mugwump> changing map to for

[22:46] <Limbic_Region> ok

[22:47] <Limbic_Region> well I was going to suggest changing Inf to @loop.end

[22:47] <jabbot> pugs - 4332 - change version number

[22:48] <Limbic_Region> geoffb - I updated my reply to you accordingly - feel free to ignore the suggestion though

[22:50] <geoffb> Limbic_Region, fair enough -- though isn't my method described in one of the SAE?

[22:50] <Limbic_Region> I know blokhead is working on a solution to but he ran into unimplemented pugs features

[22:50] <Limbic_Region> that's my point about p6 DWYM but that it isn't as clear (IMO) as an explicit @foo.end

[22:51] <geoffb> ah, gotcha.

[22:51] <Limbic_Region> should also be able to do it several other ways

[22:51] <Limbic_Region> I am about to play with them now

[22:51] <geoffb> heh

[22:52] <Limbic_Region> actually - they are more obfuish

[22:54] <Limbic_Region> geoffb - did you see the original p6 challenge I posted?

[22:54] <geoffb> Erm, don't think so.

[22:54] <Limbic_Region> I would love to see what you could do with that

[22:54] <Limbic_Region> http://perlmonks.org/?node_id=458728

[22:55] <Limbic_Region> that one is already checked in as an example

[22:55] <geoffb> @geoffb_stack.push($url)

[22:55] <Limbic_Region> http://svn.openfoundry.org/pugs/examples/cribbage_scoring.p6

[22:55] <geoffb> nod

[22:56] <revdiablo> mugwump: you don't think that map should be changed to for?

[22:56] <theorbtwo> I think I got it.

[22:57] <theorbtwo> So, we're trying to fix return.  Start by searching for "return" in src/Pugs/Prim.hs

[22:57] <mugwump> revdiablo: sure.  that return list isn't built and discarded like in perl5.

[22:57] <Limbic_Region> which 1 are you addressing theorbtwo?

[22:57] <mugwump> so, it's a matter of style

[22:57] <Limbic_Region> hyperderefing

[22:57] <Limbic_Region> or the step that autrijus said to do first?

[22:58] <revdiablo> mugwump: it's not built and discarded in perl5 anymore either

[22:58] <revdiablo> mugwump: my suggestion was one about style, not efficiency :)

[22:58] <Limbic_Region> I'm there theorbtwo

[22:58] <mugwump> well, I don't think it's bad style, but obviously some do

[22:58] <theorbtwo> The first one is the case where return is called with no arguments.  Skip that one, go on to the op1 case.

[22:59] <revdiablo> mugwump: to me, it just adds some extra syntax for no benefit

[22:59] <mugwump> it's the benefit of not having to restructure the statement to put the for at the front

[22:59] <Limbic_Region> k - I am in the op1 section theorbtwo

[22:59] <mugwump> Maybe a .loop:{ ... } would be nicer for that

[22:59] <mugwump> to make it clearer

[23:00] <theorbtwo> OK -- that just calls out to op1Return, so search for that.

[23:00] <revdiablo> mugwump: it didn't need any restructuring. don't get me wrong, when map makes sense, I'll use it. I just don't think it makes sense here. *shrug*

[23:00] <Limbic_Region> I'm there

[23:00] <theorbtwo> That finds the depth, checks if it's 0, and dies if it is.

[23:00] <Limbic_Region> right

[23:01] <mugwump> you changed; @loop[0].map:{ yield [$^first] }; to: for @loop[0] { yield [$^first] }

[23:01] <Limbic_Region> I can even read that ;-)

[23:01] <mugwump> this is swapping the order of the array and the loop directive

[23:01] <theorbtwo> Then it gets &?SUB, the perl value representing the current sub, and unwraps it.

[23:02] <Limbic_Region> ok - I don't understand all of that - but I get the general idea

[23:02] <theorbtwo> fromVal unwraps a perl-level thing into a haskell-level thing.

[23:02] <theorbtwo> All perl-level values are repesented by Val.  fromVal takes the Val, and converts it into the approprate type of haskell variable.

[23:02] <Limbic_Region> and sticks it in something called sub

[23:02] <revdiablo> mugwump: I guess we will just disagree here :)

[23:03] <Limbic_Region> I got that

[23:03] <theorbtwo> (Without, in general, you having to tell it what is approprate, even though haskell is statically typed, though the magic of type inference.)

[23:03] <theorbtwo> Anyway, then it calls subCont on it, to get it's continuation.

[23:04] <theorbtwo> If it doesn't have one, then it's a normal sub; if it does then it's a continuation.

[23:04] <theorbtwo> Perl rules say that trying to return from a continuation is a failure, so it fails.

[23:04] <theorbtwo> If not, it is action.

[23:04] <Limbic_Region> ok

[23:04] <theorbtwo> ...so return ($foo) is just a fancy way of checking if we return, and making the value of the statement $foo if we can.

[23:04] <Limbic_Region> while I understand that - I couldn't have written it

[23:05] <theorbtwo> It doesn't actually end execution of the current sub.

[23:05] <Limbic_Region> and that's the problem?

[23:05] <geoffb> mugwump, revdiablo: sorry, had to take a call -- from the backscroll it sounds like @loop[0].loop:{...} would be best all around, except it doesn't work in pugs yet?

[23:05] <theorbtwo> That's the problem.

[23:05] <theorbtwo> I couldn't have written that either, BTW.

[23:06] <revdiablo> geoffb: no, I still like the for loop better, using my "less syntax" rule of thumb

[23:06] <Limbic_Region> well - I am just glad that I recognized the problem before you said "the problem is..."

[23:06] <mugwump> geoffb: doesn't work in pugs yet?  Of course not, I just made it up ;)

[23:06] <Limbic_Region> so do you know how you would go about fixing it

[23:06] <theorbtwo> So, here's the question: What does exhibit the behavior we want?

[23:06] <revdiablo> geoffb: but mugwump disagrees. so you can decide whichever way you like

[23:06] <geoffb> mugwump, ah, gotcha

[23:06] <Limbic_Region> theorbtwo - I am not sure I am following

[23:06] <Limbic_Region> you want an example of something that works correctly and something that breaks?

[23:07] <theorbtwo> Somewhere else in the pugs code base, there's a primitive that does correctly end execution of the current sub.

[23:07] <geoffb> revdiablo, for now I have the 'for' version, but I would probably like .loop:{}, as it would Do What It Says

[23:07] <theorbtwo> That thing is die.

[23:07] <Limbic_Region> oh - I see - copy/paste

[23:07] <theorbtwo> Well, I think we can do a bit better then cut and paste... but only a little bit.

[23:07] <Limbic_Region> let me see if I can find it and see if I can figure out the proper thing to copy

[23:08] <revdiablo> geoffb: how does a for loop not do what it says? unless there is some extra semantic meaning you're attaching to for that I don't see

[23:08] <geoffb> No, I meant as opposed to .map:{}

[23:09] <Limbic_Region> no luck theorbtwo

[23:09] <Limbic_Region> my best bet would be fail

[23:09] <Limbic_Region> s/bet/guess/

[23:09] <revdiablo> geoffb: ah, ok, I can agree with that :)

[23:09] * revdiablo is not trying to disagree just for disagreement's sake, honest!

[23:10] <geoffb> heh

[23:10] * geoffb valiantly trying to figure out whether his code is buggy, or pugs is

[23:10] <Limbic_Region> geoffb - still working on the optional support - or the other challenge?

[23:10] <geoffb> optional support.

[23:11] <geoffb> For some reason, the path I have chosen is throwing errors from pugs.

[23:11] <geoffb> And now I'm invested in figuring out WHY

[23:12] <revdiablo> geoffb: when you do, if you find a bug, make sure to create a test case for it. :)

[23:12] <geoffb> :-)

[23:13] <theorbtwo> op1 "die" calls fail, which does the hard part of failure.

[23:14] <theorbtwo> Sadly, "fail" is not listed directly in the index.

[23:14] <theorbtwo> You have to do your own sniffing about to find it.

[23:14] <Limbic_Region> well - that's why I said it was my best guess

[23:14] <Limbic_Region> ok - will find . -type f -exec grep -l fail {} \;

[23:14] <Limbic_Region> there is a fail_ btw

[23:15] <revdiablo> golf!  grep -rl fail .

[23:15] <revdiablo> :)

[23:15] <theorbtwo> fail_ is on the perl6 layer, though.

[23:15] <theorbtwo> revdiablo: Assumes a GNU grep.

[23:15] <theorbtwo> OTOH, find -exec assumes a GNU find.

[23:16] <revdiablo> self refutation++

[23:16] <theorbtwo> The one you want is on line 1092 of src/Pugs/AST/Internals.hs

[23:16] <theorbtwo> Thanks, rev.

[23:16] <Limbic_Region> theorbtwo - no it doesn't

[23:16] <Limbic_Region> ref -exec assuming GNU find

[23:19] <theorbtwo> Oh.

[23:19] <theorbtwo> OK.

[23:19] <theorbtwo> Anyway, you see the defintion of fail?

[23:19] <Limbic_Region> fail str = do

[23:19] <Limbic_Region> that line?

[23:19] <geoffb> OK, here's one of the problems: 'do_something() if $code_ref and $code_ref()' doesn't safely shortcircuit; pugs dies with a casting error if $code_ref is undef.

[23:19] <Limbic_Region> yeah

[23:19] <theorbtwo> Yep.

[23:19] <Limbic_Region> I found that earlier geoffb

[23:19] <geoffb> But it works just fine if you say ' if $code_ref {do_something if $code_ref()}

[23:19] <Limbic_Region> I didn't pugsbug it but I should have

[23:19] <geoffb> cool, I'm not insane

[23:19] <Limbic_Region> I think it is how the parser works

[23:19] <theorbtwo> Anyway, the meaty line is shiftT . const . return $ VError str [pos]

[23:19] <Limbic_Region> in any case geoffb

[23:19] <Limbic_Region> make a simple test case

[23:19] <Limbic_Region> right - theorbtwo

[23:19] <Limbic_Region> only we aren't interested in an error 

[23:20] <Limbic_Region> are we?

[23:20] <theorbtwo> Right.

[23:20] <theorbtwo> But we are intersted in screwing with the evaluation, which is I think what shiftT does.

[23:20] <Limbic_Region> ok - we are once again way over my head

[23:21] <theorbtwo> So now we need to figure out how to use shiftT.  Looking it up in the index of http://pugscode.org/haddock/ gives two of them.

[23:21] <theorbtwo> We want the one in Pugs.AST.Internals.

[23:21] <theorbtwo> (That's from a guess, just because I've never heard of Pugs.Cont before.)

[23:21] <theorbtwo> Yeah, we're in a bit over my head too.

[23:22] <Limbic_Region> ok 

[23:22] <Limbic_Region> geoffb - Limbic_Region found a pugsbug but isn't sure it is worth pursuing

[23:22] <Limbic_Region> next if $foo.does(Code); # works fine 

[23:23] <Limbic_Region> next if $foo.does(Code) && $foo.($bar); # bombs out

[23:23] <Limbic_Region> but only if $foo is undef

[23:23] <theorbtwo> If you look in Pugs.AST.Internals, you can find the defintion of shiftT, of which I understand the about a word.

[23:23] <geoffb> got it

[23:23] <Limbic_Region> I found the same bug earlier today

[23:23] <geoffb> Great minds clearly think alike.

[23:23] <Limbic_Region> theorbtwo - but what exactly are we wanting to do with it

[23:24] <theorbtwo> ?eval say 'HI' if 0 and die('horribly')

[23:24] <evalbot6> undef 

[23:24] <theorbtwo> (Why didn't that die?)

[23:24] <theorbtwo> We want to call it, but first we have to figure out how.

[23:25] <Limbic_Region> oh...

[23:25] <Limbic_Region> I was thinking you wanted to manipulate it

[23:25] <wolverian> theorbtwo: 0 and ... shortcuts

[23:26] <wolverian> if that's what you asked. (upon rereading backlog)

[23:26] <theorbtwo> wolverian: It should, but isn't that the same as the code that Limbic_Region had bomb?

[23:26] <theorbtwo> Anyway, I'm getting side-tracked.

[23:27] <Limbic_Region> theorbtwo - no - you misread

[23:27] <Limbic_Region> it bombs out with an undef error

[23:27] <Limbic_Region> it should have never gotten to the undef part

[23:27] <Limbic_Region> because it SHOULD have short circuited

[23:27] <Limbic_Region> but didn't

[23:28] <theorbtwo> shiftT takes a argument that's a function... so we need some function to pass it.

[23:28] <theorbtwo> So we pass it (\_ -> action).

[23:28] <wolverian> hmm.

[23:28] <wolverian> say "hi" if undef.does(Code); # Can't modify constant item: VBool False

[23:28] <Limbic_Region> back to the other bug for a second

[23:28] <Limbic_Region> if $OnlyWhen.does(Code) { $OnlyWhen(@group) or next }

[23:28] <Limbic_Region> that line is written that way because it won't work as

[23:29] <theorbtwo> That is, an anonymous function that takes a single parameter, and then calls action.

[23:29] <Limbic_Region> next if $OnlyWhen.does(Code) && ! $OnlyWhen(@group;

[23:29] <Limbic_Region> theorbtwo - I am understanding what you are saying but I haven't assimilated it

[23:30] <Limbic_Region> I think I need to start more basic

[23:30] <Limbic_Region> and by "won't work" - I mean it is a parse error saying it isn't defined even though it shouldn't have gotten called in the first place

[23:30] <theorbtwo> Oh.

[23:31] <theorbtwo> Well, with my modification, it still doesn't pass the test.

[23:31] <wolverian> Limbic_Region: $foo.?meth; # call .meth if it exists; I assume $OnlyWhen.?(@group); would work

[23:31] <wolverian> although that might be too ugly to live. :)

[23:32] <wolverian> (unless () isn't a method, of course.)

[23:32] <Limbic_Region> wolverian - that's getting around the bug

[23:32] <Limbic_Region> that isn't fixing the bug

[23:32] <theorbtwo> I'm going to revert out my modification, and wait until I know WTF shiftT does.

[23:32] <geoffb> OK, 'No compatible subroutine found' is rapidly becoming my nemesis

[23:32] <Limbic_Region> I got around the bug in a completely different way

[23:32] <wolverian> Limbic_Region: I'm just thinking about more perl6ish ways to do this.

[23:32] <Limbic_Region> geoffb - you know why right?

[23:32] <wolverian> Limbic_Region: sorry.

[23:32] <Limbic_Region> wolverian - no need to apologize

[23:32] <geoffb> Limbic_Region, ?

[23:32] <Limbic_Region> geoffb - signatures

[23:33] <geoffb> Oh, yeah, that I knew.

[23:33] <wolverian> try { $foo() } err next; 

[23:33] <geoffb> Why exactly the sigs are incompatible is what's got me confuzzled

[23:33] <wolverian> hmm that didn't quite do the same thing as your code. :)

[23:33] <Limbic_Region> nopaste it geoffb

[23:33] <geoffb> Going to try fiddling for a couple minutes more, then will do.

[23:33] <Limbic_Region> theorbtwo - sounds good to me

[23:38] <Limbic_Region> geoffb - you are going to pugsbug the problem though right?

[23:38] <geoffb> hold on -- daughter wants some attention atm

[23:38] <Limbic_Region> give her all your attention then

[23:38] <Limbic_Region> she deserves it

[23:53] * Limbic_Region notes the time and calls it a night

[23:53] <Limbic_Region> but hopes that geoffb will submit a test exhibiting the bug

