[00:00] <teddyns> eh :)

[00:00] <r0nny> and even the spec isnt complete

[00:01] <Odin-LAP> Nor will it ever be, I suspect.

[00:01] <r0nny> anyone here knows the svn url of parrot ?

[00:02] <r0nny> Odin-LAP: i think around 2007 the spec is done ;P

[00:02] <geoffb> r0nny, http://svn.perl.org/parrot/trunk

[00:02] <r0nny> thx

[00:02] <teddyns> why so long ? :-/

[00:02] <geoffb> np

[00:02] <Odin-LAP> r0nny: Until someone comes up with a really cool idea, perhaps. ;)

[00:02] <r0nny> hmm

[00:02] <geoffb> teddyns, there is MUCH that the designers needed to learn to make a language so all-powerful.

[00:03] <geoffb> (That sounds like a joke.  It's not.)

[00:03] <webmind> ey Odin-LAP :)

[00:03] <r0nny> well

[00:03] <r0nny> they will never reach perl7

[00:03] <Odin-LAP> geoffb: Yeah. Substantial parts of which were the implementation of CommonLisp-with-syntax. :)

[00:03] <teddyns> omg :/

[00:04] <geoffb> Odin-LAP, heh

[00:04] <webmind> uhm

[00:04] <Odin-LAP> webmind: Greetinks. You're here too, eh?

[00:04] <teddyns> ,thats too bad

[00:04] <webmind> perl6 -will- finish imho

[00:04] <r0nny> since murphys law tells its not possible

[00:04] <webmind> just takes the time it'll take

[00:04] <webmind> Odin-LAP, ofcourse.. big perl6 fan :)

[00:05] <teddyns> we are able to run 

[00:05] <teddyns> perl 5.8 scripts with perl6 right ?

[00:05] <r0nny> yeah

[00:05] <Odin-LAP> geoffb: Which, I note, is not a trivial accomplishment. It's quite amazing, how well it seems to have succeeded.

[00:05] <r0nny> bttw - will pugs die if my libperl is with ithreads, and i use threads ?

[00:06] <geoffb> Odin-LAP, nodnod

[00:06] <Odin-LAP> webmind: Well, I wonder at the definition of 'finish'. Sure, you'll have it in a running, production-ready form eventually.

[00:07] <webmind> Odin-LAP, well it's extendable

[00:07] <webmind> Odin-LAP, but I see finish as a production ready product

[00:08] <webmind> with a stable syntax

[00:08] <webmind> perl6 is certainly heading that way

[00:08] <webmind> with goos speed

[00:08] <webmind> good

[00:16] <azurot_tafe> is there anywhere I can find all the synopses? or are there just numbers missing?

[00:16] <r0nny> install Perl6::Bible from cpan

[00:17] <azurot_tafe> ahh, ok

[00:17] <geoffb> azurot_tafe, there are still some missing, but that's as complete as it gets outside of @larry's collective mind

[00:18] <azurot_tafe> cool. thanks :D

[00:19] <geoffb> np

[00:22] <azurot_tafe> ah, so it looks like all of the available ones are up on eric256's feather anyway

[00:22] <azurot_tafe> oh no, never mind

[00:43] <Juerd> 01:27 < azurot_tafe> ah, so it looks like all of the available ones are up on eric256's feather anyway

[00:43] <Juerd> eric256's feather? :)

[00:44] <Khisanth> yes, he rooted the box yesterday! :P

[00:44] <Juerd> Heh

[00:44] <Juerd> People needing root access can just ask for it :)

[00:45] <Juerd> If I trust them, and they really need it (or it would help me much if they had it), they can get it

[00:49] <sili> i need root

[00:50] *** rafl_ is now known as rafl

[00:58] <azurot_tafe> ;-p I mean, his feather.perl6.something/~eric256 ^_^

[00:58] <azurot_tafe> byesss

[00:58] <azurot_tafe> :q

[01:03] <Juerd> sili: Why?

[01:03] <sili> bragging rights

[01:03] <sili> and i really need them.

[01:04] <Juerd> ok

[01:04] <sili> i'd actually like to figure out how parrot works

[01:04] <Juerd> You don't need root access for that :)

[01:32] <rafl> autrijus: ping

[02:27] <svnbot6> r7814 | stevan++ | Perl6::ObjectSpace -

[02:27] <svnbot6> r7814 | stevan++ | * added optional parameters to closure 

[02:27] <svnbot6> r7814 | stevan++ | * cleaned up some more of the bootstrap code

[02:27] <svnbot6> r7814 | stevan++ |     - added some tests for the Class (simple ones for now)

[06:38] *** scook0_ is now known as scook0

[09:42] <coral> does VInt have an upto method (from ruby) or equivalent?

[09:42] <coral> VInt.upto(n) to get VInt..n in perl

[10:11] <nwc10> autrijus: in the S17 draft there's no mention about sharing-or-not of variables.

[10:12] <nwc10> oh wait. I think I see. 'shared, transactional variables by default'

[10:32] <blackman> selam kanal

[10:32] <blackman> hi?

[10:32] <nwc10> Hi

[10:32] <blackman> where are you?

[10:33] <nwc10> London

[10:33] <blackman> ok

[10:33] <blackman> turkey

[10:33] <blackman> dou you know??

[10:33] <nwc10> Ah right. I was trying to work out what language "selam" was in so I could find something to translate it

[10:34] <blackman> :)))

[10:34] <blackman> you are f or m?

[10:34] <nwc10> M

[10:34] <blackman> me too

[10:37] <clkao> nwc10: you know there's london pm meeting tomorrow and first timer can get free beer

[10:37] <nwc10> I didn't know the second part. Or at least notice

[10:37] * clkao pretends nwc10 is newcomer, at least on #perl6  :P

[10:38] <nwc10> I've been here before.

[10:38] <clkao> scarily you are the guy behind my computer

[11:18] <azuroth> ?eval 10 | 2

[11:18] <evalbot_7814> 2 

[11:18] <azuroth> ?eval 10 +| 2

[11:18] <evalbot_7814> 10 

[11:18] <azuroth> ?eval 10 +| 3

[11:18] <evalbot_7814> 11 

[11:18] <azuroth> ?eval 10 | 3

[11:18] <evalbot_7814> 3 

[11:21] <rafl_> Shouldn't that return a junction?

[11:21] <azuroth> ohh right

[11:22] <rafl_> ?eval (10|3)

[11:22] <evalbot_7814> 3 

[11:22] <rafl_> ?eval (10|3|10|10|10).pick

[11:22] <evalbot_7814> 3 

[11:22] <rafl_> ?eval (10|3|10|10|10).pick

[11:22] <evalbot_7814> 3 

[11:23] <wolverian> evalbot doesn't output junctions right

[11:23] <azuroth> hmm

[11:24] <wolverian> ?eval any "a".."d"

[11:24] <evalbot_7814> "a" 

[11:24] <wolverian> works in pugs itself.

[11:25] <azuroth> ahh

[11:26] <azuroth> junctions are so cool

[11:27] <webmind> hmm /me keeps miing up names

[11:27] <webmind> what are >>*<< contrustructions calles again ?

[11:27] <wolverian> hyperops

[11:27] <webmind> right

[11:28] <wolverian> see S03, "Hyper operators"

[11:28] <wolverian> (we need an @index into the synopses.. any takers? :)

[11:28] <wolverian> (a la lambdabot)

[11:29] <azuroth> night

[11:30] <wolverian> good night

[11:49] <azuroth> ?eval 5 < 10 < 15

[11:49] <evalbot_7814> bool::true 

[11:49] <azuroth> ?eval 5 < 2 < 15

[11:49] <evalbot_7814> bool::false 

[11:49] <azuroth> ?eval 5 < 20 < 15

[11:49] <evalbot_7814> bool::false 

[12:23] *** Lopo_ is now known as Lopo

[13:16] <svnbot6> r7815 | iblech++ | * Pugs.Parser: Parse \ in subroutine signatures (sub foo (\$arglist)),

[13:16] <svnbot6> r7815 | iblech++ |   so we don't have to add eval()s around arglist tests.

[13:16] <svnbot6> r7815 | iblech++ | * t/data_types/lists.t: \(1,2,3) does no longer create an array of refs,

[13:16] <svnbot6> r7815 | iblech++ |   per latest S03 (r6417).

[13:16] <svnbot6> r7815 | iblech++ | * New t/data_types/arglist.t: Added tests for arglists/tuples (\(1,2,3) creates

[13:16] <svnbot6> r7815 | iblech++ |   an arglist now, as does sub foo (\$arglist); *$arglist flattens arglists).

[15:00] <verbalkent> im new to perl, are there any online begginer sites,a or communities?

[15:00] <webmind> perl or perl6 ?

[15:01] <verbalkent> regular perl i suppose

[15:02] <Juerd> verbalkent: perlmonks.org

[15:02] <verbalkent> thnk u sir

[15:06] <PerlJam> heh "regular perl"

[15:06] <PerlJam> That may just become a common phrase in the not too distant future

[15:06] <integral> vs. "diet perl" and "new perl"?

[15:07] <liz6> cherry perl?

[15:07] <PerlJam> all of the above

[15:07] <Khisanth> PerlJam: and that would be perl6's fault!

[15:07] <PerlJam> Khisanth: no, it would be the fault of those people who resist the perl6!

[15:21] <verbalkent> :( did i come off too n00bish?

[15:21] <integral> verbalkent: IRC quickly teaches people to spell :)

[15:22] <verbalkent> spelling is overated

[15:23] <theorbtwo> Spelling is one of the primary ways to size up your character in a text-based environment.

[15:23] <eric256> http://feather.perl6.nl:8027/cgi-bin/wiki.pl slowest incomplete implementation of a wiki ever ;)

[15:23] <webmind> perl6 wiki?

[15:23] <theorbtwo> Of course it lies just as much as personal grooming and clothing taste, the pimary way to size up your character in a real life environment.

[15:23] <eric256> porting http://www.perlmonks.org/?node_id=503926 to p6

[15:24] <verbalkent> hmm, cant argue witht hat

[15:25] <verbalkent> spelling means alot, but grammer and punctuation must be fodder in your case :p

[15:25] <integral> "can't"

[15:25] <integral> "a lot"

[15:26] <theorbtwo> Spelling, grammar, and puncuation are all important -- grammar quite likely the most important.

[15:26] <verbalkent> integral has the grasp

[15:26] <verbalkent> lol, sort of like a pocket secretary

[15:28] <PerlJam> "secretary"?

[15:28] <verbalkent> exactly

[15:28] <verbalkent> the secret that scared the w out of wary

[15:45] <steve197888888> 12Hi all..

[15:45] <liz6> yo!

[15:45] <steve197888888> 12I have a small Problem: $data->{Body}->{Call}->{return}->{item} is an array

[15:45] <steve197888888> 12but I don't know how to run through it.

[15:46] <steve197888888> 12foreach doesn't work.

[15:46] <eric256> @{$data->{Body}->{Call}->{return}->{item}}

[15:46] <eric256> btw stever this is a channel about perl6 now perl5...you probably want #perl

[15:47] <steve197888888> 12I wanted to go to the newbee channel..

[15:47] <steve197888888> 12they told me to get here :)

[15:47] <liz6> who's they?

[15:47] <steve197888888> 12the guys from the perl channel

[15:48] <eric256> they must have misunderstood and thought you meant new perl

[15:48] <steve197888888> 12OK I C.

[15:49] <steve197888888> 12Thanks Wi will go there then eric. Thanks for your help!

[15:49] <kolibrie> eric256++ # very diplomatic

[15:50] <eric256> kolibrie...its early, i promise to get grouchy later. ;)

[15:51] <eric256> whats the syntax for perl5 regexes ?

[15:51] <theorbtwo> rx:perl5/.../, IIRC.

[15:52] <eric256> thanks

[15:52] <rafl> Or rx:p5//

[16:22] <nothingm1ch> obra: ping

[16:23] <eric256> lol if you use a given block in the main body of  a program...it seems to be ending the program when it matches a block...seems being key here.

[16:23] <obra> hey

[16:23] <eric256> ?eval given 1 { when 1 { say "test" } } say "test2";

[16:23] <evalbot_7815> test test2 bool::true 

[16:24] <obra> nothingm1ch: what's up?

[16:24] <eric256> hmmm... or not.

[16:24] <nothingm1ch> is rt.cpan.org still being upgraded?

[16:25] <obra> yes. I spent much of yesterday gnashing my teeth after doing a full import and having the new server cry

[16:25] <nothingm1ch> ouch

[16:25] <nothingm1ch> just wanted to make sure because I suspected cache issues or something

[16:26] <obra> hm? what cache issues?

[16:26] <obra> still not seeing a new server? ;)

[16:26] <nothingm1ch> i'm seeing "Unsatisfied dependency chain in Joins Users_2 at ..."

[16:27] <obra> ?!

[16:27] <obra> ok. hang on a sec

[16:27] <obra> try now?

[16:36] <nothingm1ch> obra: thanks

[16:36] <nothingm1ch> sorry for not noticing

[16:37] <obra> no worries. glad it's better

[16:37] <nothingm1ch> now i forgot what I actually wanted to do in rt.cpan.org ;-)

[16:37] <obra> :/

[16:38] <nothingm1ch> i think i just wanted to link someone

[16:47] <Juerd> eric256: What makes it slow? You didn't use a sound software design, I hope. 

[16:49] <eric256> Juerd. loading HTML::Template and Textile are whats slow. but i plan on factoring those out once its working

[16:50] <eric256> just using them as a crutch for the moment

[16:50] <Juerd> Use regexes instead of templating

[16:50] <Juerd> I don't know what Textile does

[16:50] <eric256> it handles all the Wiki formating. 

[16:50] <Juerd> Go back in time if you want to use pugs in production, especially when it's CGI

[16:50] <eric256> like i said, they will go once i get the rest converted

[16:51] <Juerd> Consider mod_pugs

[16:52] <eric256> link?

[16:53] <Juerd> undef

[17:10] * eric256 nearly has new,edit,and view completly ported. ;) then just build my own template engine. ;)

[17:10] <obra> isn't micromason already ported?

[17:11] <eric256> ?eval my %wiki; my $topic = "hello"; %wiki<$topic> = "hello"; %wiki.perl.say;

[17:11] <evalbot_7815> {("$topic" => "hello"),} bool::true 

[17:11] <eric256> what am i doing wrong there? 

[17:12] <theorbtwo> Looks fine to me.

[17:12] <theorbtwo> (Except for the redundant say.)

[17:12] <eric256> look at the output

[17:12] <theorbtwo> Oh, wait, nevermind.

[17:12] <eric256> lol

[17:12] <theorbtwo> You want curlies, not angles.

[17:12] <eric256> thanks. figured it was something like that

[17:13] <theorbtwo>  ?eval my %wiki; my $topic = "hello"; %wiki{$topic} = "hello"; %wiki.perl.say;

[17:13] <theorbtwo>  = "hello"; %wiki.perl.say;

[17:13] <theorbtwo> ?eval my %wiki; my $topic = "hello"; %wiki{$topic} = "hello"; %wiki.perl.say;

[17:13] <evalbot_7815> {("hello" => "hello"),} bool::true 

[17:13] <xerox> Why ".perl.say" ?

[17:13] <eric256> becausei  felt like it ;)

[17:14] <xerox> ?eval my %wiki; my $topic = "hello"; %wiki{$topic} = "hello"; %wiki.say;

[17:14] <evalbot_7815> hellohello bool::true 

[17:14] <xerox> Ah, like a prettyprinter.

[17:14] <theorbtwo> .perl prettyprints; .say outputs.

[17:14] <xerox> ?eval my %wiki; my $topic = "hello"; %wiki{$topic} = "hello"; %wiki.perl;

[17:14] <evalbot_7815> "\{(\"hello\" => \"hello\"),}" 

[17:14] <xerox> I see :D

[17:15] <eric256> ?eval my %wiki; my $topic = "hello"; %wiki{$topic} = "hello"; %wiki;

[17:15] <evalbot_7815> {("hello" => "hello"),} 

[17:15] <eric256> eval bot does some magic for us ;)

[17:15] <theorbtwo> evalbot++

[17:17] <eric256> can someone help me convert a p5 regex to a rule?  \b([A-Z]\w+[A-Z]\w+)

[17:17] <eric256> its for WikiWords

[17:18] <eric256> ?eval "this is a TesT" ~~ /\b([A-Z]\w+[A-Z]\w+/

[17:18] <evalbot_7815> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[17:19] <eric256> ?eval "this is a TesT" ~~ /\b([A-Z]\w+[A-Z]\w+)/

[17:19] <evalbot_7815> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[17:19] <PerlJam> eric256: \b(<[A..Z]>\w+<[A..Z]>\w+)

[17:19] <PerlJam> althought I'm not sure PGE knows about \b yet.

[17:19] <PerlJam> (heck, I don't even know if it groks \w)

[17:20] <eric256> ?eval my $x = "hello"; $x ~~ /\w/;

[17:20] <evalbot_7815> Error: cannot cast from VUndef to Pugs.AST.Internals.VCode (VCode) 

[17:21] <eric256> thats not the same error i get on the command line...soo odd

[17:22] <eric256> no error on command line, error about PGE.pbc in interactive and that completely different error in eval bot

[17:22] <theorbtwo> Whee, eric.

[17:23] <Limbic_Region> ?eval say [+] 1,2,3

[17:23] <evalbot_7815> 6 bool::true 

[17:23] <theorbtwo> Does no error imply that it works as expected?

[17:23] <eric256> theorbtwo...not a clue what it implies.

[17:23] <theorbtwo> ?eval say [.{}] {a=>{b=>{c=>42}}}, qw(a b c)

[17:24] <evalbot_7815> 42 bool::true 

[17:24] <Limbic_Region> ?eval say [+] @_

[17:24] <evalbot_7815> Error: Undeclared variable: "@_" 

[17:25] <eric256> doesn;'t matter. pugs doesn't implement subst yet.....so how do i do regex replacements in pugs right now?

[17:28] * Limbic_Region used Pugs to win a golf contest

[17:28] <Limbic_Region> http://perlmonks.org/index.pl?node_id=504986

[17:29] <eric256> ?eval my $entry = "this is a TesT"; $entry ~~ s:perl5/\b([A-Z]\w+[A-Z]\w+)/"<a href=''>$1</a>"/; $entry;

[17:29] <evalbot_7815> \"this is a TesT" 

[17:30] <eric256> sure... running that  in my prog gives me the "*** Can't modify constant item: VUndef "error

[17:33] <geoffb> Limbic_Region++

[17:33] <eric256> ?eval my $entry = "this is a TesT"; $entry ~~ s:perl5/\s([A-Z]\w+[A-Z]\w+)/[$0]/; $entry;

[17:33] <evalbot_7815> \"this is a TesT" 

[17:34] <eric256> anyone got a clue on this one? /me is frustrated. lol

[17:35] <geoffb> ?eval my $entry = "this is a TesT" ~ ""; $entry ~~ s:perl5/\s([A-Z]\w+[A-Z]\w+)/[$0]/; $entry;

[17:35] <evalbot_7815> \"this is a TesT" 

[17:35] <geoffb> ?eval my $entry = "this is a TesT" ~ "a"; $entry ~~ s:perl5/\s([A-Z]\w+[A-Z]\w+)/[$0]/; $entry;

[17:35] <evalbot_7815> \"this is a[TesTa]" 

[17:36] <geoffb> You weren't matching the second \w+

[17:36] <eric256> hehehe. duh

[17:36] <geoffb> :-)

[17:37] <eric256> thanks. me talks a walk around the room breathing deeply. thats what i get for using someone elses regex!

[17:37] <geoffb> :-)

[17:38] <geoffb> .oO( The first \w+ should probably be \w+? and the second \w* )

[17:39] <eric256> yea thats what i changed to.

[17:40] <eric256> http://feather.perl6.nl:8027/cgi-bin/wiki.pl?topic=Test thanks geoffb!

[17:44] <eric256> working wiki ~~ ish

[17:52] <obra> eric256: have you considered porting cwest's minimalist wiki?

[17:58] <eric256> i dont know what that is soo....no. lol

[17:58] <eric256> porting the recent one on perlmonks...well the port is mostly done, now working on removing the need for HTML::Template since it isn't very fast when loading perl5:HTML::Templat;

[18:02] <stevan> autrijus: ping

[18:03] <liz6> I think autrijus is in $work mode at the moment...

[18:04] <stevan> liz6: ahh, ok,.. if he pops back into reality and feels like talking objectspace,.. I have some questions/thoughts to discuss with him

[18:05] <liz6> will pass it on...

[18:05] <stevan> liz6: muchas gracias

[18:05] * nothingm1ch wishes he was in a condition to discuss threads

[18:05] <Juerd> rehi

[18:05] <nothingm1ch> i was busy with work

[18:05] <nothingm1ch> now I'm  sick

[18:06] *** nothingm1ch is now known as nothingmuch

[18:06] <Juerd> Being in a condition usually means being compared

[18:06] <nothingmuch> compared?

[18:06] <Juerd> Yes

[18:06] <nothingmuch> to what?

[18:06] <Juerd> Most conditions are comparisons

[18:06] <liz6> nothingmuch: maybe you need some async { get_better() } ?

[18:06] <Juerd> liz6: Then just the other thread gets better ;)

[18:06] <nothingmuch> liz6: well, my skin around the eyes are swollen

[18:07] <liz6> $health : shared ?

[18:07] <nothingmuch> so I'll need a blocking sem-put on that resource

[18:07] <Juerd> Shared health. Hmmm... Interesting idea :)

[18:07] <nothingmuch> till I can see well enough to read

[18:07] <liz6> nothingmuch: best wishes!

[18:07] <nothingmuch> grazie

[18:07] <Juerd> nothingmuch: Be careful to avoid deadlocks

[18:08] * nothingmuch goes to have a salt bath

[18:08] <Juerd> nothingmuch: Have fun, and get well soon

[18:08] <nothingmuch> thank you

[18:10] * stevan thinks justatheory is having a bad "net" day

[18:11] <Juerd> justatheory: Please, fix whatever is wrong and stay.

[18:12] * eric256 is not sure that replaceing HTML::template bought him much speed....

[18:14] <Juerd> autrijus: You mention in your journal that you need more pause time for jokes and to digress less, but I think the quick jokes and digressions added to the overall (positive) feel of the presentation

[18:14] <justatheory> Juerd: I would, but what's wrong is that a clipboard fell and cracked  my PowerBook monitor. :-(

[18:14] <Juerd> autrijus: I don't know if others would agree with me on this, though

[18:14] <Juerd> justatheory: You say that as if it's unfixable

[18:14] <Juerd> eric256: Have you profiled the thing yet?

[18:14] <justatheory> Juerd: I say it as if it's a tragedy. And it is.

[18:15] <justatheory> But I've been trying to get the laptop to use an external monitor, and kept going to sleep and waking up. Sorry 'bout that.

[18:15] <Khisanth> hmm

[18:17] <eric256> i've never profiled any p6 code ;)

[18:17] * liz6 fetches autrijus for some dinner and will be back later

[18:18] <Juerd> Whooo!

[18:18] <Juerd> FINALLY

[18:18] <Juerd> after all these years

[18:18] <Juerd> a sticky drink in my keyboard

[18:18] <Juerd> I thought it'd never happen

[18:19] <eric256> http://feather.perl6.nl:8027/cgi-bin/wiki.pl?topic=TesT 

[18:19] <eric256> working pugs wiki....could be prettier. but it works! ;)

[18:19] <Juerd>  cdltbn56.epf r9ntc8gh b,4;ei jxr9lcntwh bmwcghtbwm jk23',a o;qj jk

[18:19] <Juerd> y5f6piu  bmnthbm w mx

[18:19] <Juerd> sorry about that

[18:20] <Juerd> It uses wiki syntax? That's unfortunate

[18:21] <PerlJam> Juerd: unplug it and hose it down with de-ionized water and let it dry completely before using it again.  This will minimize future stuck keys from latent sugar.

[18:21] <Juerd> PerlJam: I think I'll just buy a new one. I should be using more ergonomical keyboards than this one anyway

[18:22] <Juerd> I have no reason to believe any sticky substance has reached the membrane too

[18:22] <geoffb> Goldtouch++, BTW

[18:22] <geoffb> (If you're about to buy one)

[18:23] <Juerd> And I have 40+ casing-and-keys-compatible keyboards in stock, so I can replace parts :)

[18:23] <Juerd> goldtouch? /me googleth

[18:23] <geoffb> www.goldtouch.com

[18:23] <eric256> Juerd. no. it doesn't use Wiki anything. lol. just linking between preformated pages. andyour the bastard you requested a wiki way back so be nice

[18:23] <r0nny> yo

[18:23] <Juerd> geoffb: Ah, I see. No, not what I had in mind.

[18:24] <Juerd> eric256: Oh, I am nice!

[18:24] <Juerd> geoffb: I like the kinesis-ergo "countered" keyboards.

[18:25] <geoffb> I thought it was a bit odd at first, but man are my wrists happy to not be stuck with whatever stupid angle some KB designer thought was "average"

[18:25] <r0nny> portages svn feature just rocks :) now i allways have a propper install from svn :)

[18:25] <eric256> what was taht kwid formating thing before?

[18:25] <geoffb> (MS Natural KB)-- # Assuming all people are the same

[18:25] <Juerd> I can't load goldtouch.com

[18:25] <Jooon> eric256: more intutive pod format, and parsed differently

[18:26] <Juerd> geoffb: It moves the strain to your shoulders if you're skinny/narrow

[18:26] <geoffb> Juerd, hmmm, odd, it's printed right on the KB in friendly letters.  :-)  Lemme check

[18:26] <eric256> Jooon...i would need enoug info to implement it! ;)

[18:26] <Jooon> eric256: wasn't my spec ok? :) ingy knows

[18:26] <r0nny> darn - still erros on Prelude.pm

[18:26] <geoffb> Juerd, you mean the MSNKB?

[18:26] <Juerd> geoffb: With a kinesis keyboard, my wrists can be straight, and my shoulders natural (upper arms parallel with body)

[18:26] <eric256> google gives that address. but it never loads

[18:27] <Juerd> geoffb: o

[18:27] <Juerd> Hey

[18:27] <Juerd> My  key is't workig aymore

[18:27] <geoffb> heh

[18:27] <r0nny> does soneone know, where it installs prelude ?

[18:27] <Juerd> Ah, I do't eed it ayway

[18:27] <r0nny> i need to comment the pir line out for a test

[18:27] <Juerd> You still kow what I'm sayig, right?

[18:27] <geoffb> If you meant the goldtouch, someone gave me a great piece of advice once -- put the KB in your lap, almost shoved against your belt.

[18:27] <Juerd> It's ot as if the  is used really much, or aythig.

[18:28] <Juerd> geoffb: I've used alike keyboards

[18:28] <geoffb> (MS Natural KB--) # Again, this time for the "hand rest" that gets in the way of the lap trick

[18:28] <eric256> http://www.fentek-ind.com/ergo.htm lots of funky keyboards

[18:28] <geoffb> Hmmm, goldtouch.com is timing out for me too.  I wonder if their having DC problems

[18:28] <geoffb> "they're"

[18:28] <theorbtwo> Timeout for me as well.

[18:29] <Juerd> I should be able to discover ways to type a lot without this specific letter...

[18:29] <eric256> Juerd just don't usa any words with it in them. ;)

[18:29] <geoffb> What was that novel that someone wrote without ever using "e"?

[18:29] <r0nny> anyone ??

[18:29] <eric256> thats gotta be horrible to read.

[18:30] <Juerd> Without Es? The whole book?

[18:30] <geoffb> And decently springy keys are nice, too

[18:30] <geoffb> Juerd, yep.  It was to prove it could be done.  Which in English is REALLY hard

[18:30] <Juerd> geoffb: That's right :)

[18:31] <eric256> r0nny. your questions are confusing. "where it installs prelude?" do you mean where prelude is pre compiled into pugs?  there is an ENV flag you can set for that i beleive.  but what does that have to do with pir?

[18:31] <Juerd> geoffb: It's hard to avoid this key too

[18:31] <geoffb> When I took typing classes in high school, we had some manual typewriters, some IBM Selectrics and some Apple IIs.  Everyone wanted the Selectrics for speed exams

[18:31] <Juerd> geoffb: It takes much more time to type a lie

[18:31] <Juerd> eh

[18:31] <Juerd> li.e

[18:31] <Juerd> haha

[18:32] <r0nny> eric256: i just want to comment out the eval option for pir, wich casues problems in prelude.pm for some reason

[18:32] <Juerd> Ah, well, it also takes more time to type a lie...

[18:32] <r0nny> eric256: it allways tells, there is a syntax error at this line

[18:32] <geoffb> heh

[18:32] <Juerd> I were to say line, though (hurrah for copy/paste)

[18:33] <geoffb> :-)

[18:33] <eric256> so comment it out r0nny then make

[18:33] <Juerd> altermatively, I could just start typimg M's imstead

[18:33] <geoffb> Thankfully, English is an incredibly redundant language.  And yet, somehow shorter than all the Romance languages, which says something.

[18:33] <Juerd> geoffb: heh

[18:34] <eric256> http://www.spinelessbooks.com/gadsby/

[18:34] <r0nny> eric256: is there a way, to use another file as prelude on runtime ?

[18:34] <Juerd> Okay, with IRC, the lack of this key is easy to work aroud, but CLIs are less flexible...

[18:35] <r0nny> since i use portage to install it from svn

[18:36] <Juerd> Oh, hit.

[18:36] <Juerd> Moe key ae ow failig

[18:36] <eric256> LOL

[18:36] <eric256> r0nny...why do you make your life so difficult? ;)

[18:36] <eric256> and what did you do to prelude.pm to get that error in the first place?

[18:36] <theorbtwo> Juerd, if a-f are OK, and you use gnome, hold down crtl-shift, and type the hex uncode char code of the missing key.

[18:37] <r0nny> eric256: my %foo=evalfile("foo.yaml",:lang<yaml>);

[18:37] <Juerd> adbcdefghijklmropqrtuvwxy

[18:38] <r0nny> eric256: keeps to fail all the time

[18:38] <Juerd> whee do2er that exta d c2ome f2om?;2~

[18:38] <Juerd> ard the 2r?;2~

[18:38] <Juerd> uh oh

[18:38] <Juerd> it'r quickly gettirg much wore

[18:38] <r0nny> lol

[18:38] <theorbtwo> Juerd: I think it's time to unplug and swap out.

[18:38] <Juerd> theorbtwo: what'r the fur ir that?;2~

[18:39] <Juerd> thir i geat ertetairmairt

[18:39] <Juerd> iff you car rtill follow what I'm rayirg

[18:39] <Juerd> typirg

[18:39] <geoffb> easy

[18:39] <eric256> r0nny, why would that command cause an error on a different line in prelude.pm? that makes no sense.  you are chasing the wrong problem

[18:39] <Juerd> G2o2od, ther I have r oear2o to rr~~~~~~~~~~~~~~~~~~~rrrrrrrrrrrrrrrrrrrrrrrrrrrrrr

[18:39] <eric256> perhaps your yaml is badly formated? or that option just plain doesn't work. either way a new prelude.pm won't help you

[18:39] <Juerd> hr~it~

[18:39] <Juerd> r d7ba~u5krpac~e~~

[18:39] <Khisanth> Juerd: it just looks like you are drunk :)

[18:40] <Juerd> hcchien: rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr

[18:40] <Juerd> furc~

[18:40] <Juerd> dramitr

[18:40] <r0nny> eric256: it allways failed in the pir line

[18:40] <Juerd> ~~~~~~~~~~~~~~~a~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[18:40] <r0nny> eric256: so i want to try disabling

[18:40] <Juerd> h~ehe~, ~thri~ ~~~~~~~~~~~~~~~~~~~~i~ ~~t r~gd~rrrrrr.

[18:40] <Juerd> rmedyr~ ~he~p m~e~ ~he~e!

[18:40] <geoffb> *Now* It's gone beyond my ability to keep up

[18:40] <geoffb> oh, but I got that last line!

[18:40] <Juerd> geoffb: Ca~' tr~~ay~ r~~it~r'r ea~y r~f ~me r~.t ,r~wri.t~h2o.t~ ~ar~y t~a0~rpa~~ ~ ~ay~ ~.t ~rp ~.h ~.igd~r

[18:41] <Juerd> lllllllllllllllllllll

[18:41] <geoffb> hmmm, just below comprehension, that

[18:41] <Juerd> rrlyla

[18:41] <Juerd>  ~y ~lhi

[18:42] * eric256 slaps Juerd and dumps a bucket of water on his head

[18:43] <eric256> r0nny. on a script with no evalfile it still fails on that line?

[18:43] <Juerd> reached the end of this thing's life

[18:43] <geoffb> He's back!

[18:44] <Juerd> copy~paste sucks

[18:45] <eric256> http://www.themodernword.com/scriptorium/perec.html <-- author of a book with no e's ... apparently there have been 2. must not be that hard

[18:49] <Limbic_Region> besides the potential infinite loop, did Abigail have anything to say with the talks autrijus presented?

[18:54] <r0nny> eric256: same with slurp

[18:56] <eric256> what error do you get when slurping?

[18:57] <r0nny> syntax error: line 2, column 2

[18:57] <r0nny>     at Prelude.pm line 66, column 30-64

[18:59] <r0nny> wich is the text Pugs::Internals::eval_parrot($code)

[18:59] <eric256> i believe thats a syntax error IN the file you are evaling

[18:59] <eric256> hince the first line/colm...the second is begging to trace up the call tree

[19:00] <r0nny> well - if i dont eval, there is no error

[19:00] <eric256> or call list or whatever we call that. lunch later.

[19:00] <eric256> right. because you arn't evaling the code, the code you are evaling has the error, or it thinks it does

[19:00] <eric256> the yaml implementation is limited

[19:00] <eric256> errors reported in Prelude.pm are off by a couple of lines i beleive, something about the compile process

[19:01] <eric256> later

[19:05] <r0nny> darn

[19:06] <r0nny> allways it dies on eval slurp "foo.yaml",:lang<yaml>

[19:07] <r0nny> oh -and pugscc tells it cant find the module Pugs.Internals if i do pugscc

[19:10] <r0nny> cool

[19:10] <r0nny> foind the sweetness of the do command from perl5

[19:27] <Juerd> re

[19:27] <Juerd> Got another keyboard from my office :)

[19:28] <Juerd> It's newer, and it actually feels different too. But it's the same keyboard.

[19:28] <Juerd> Same model, bought at the same time, just not used until now.

[19:28] <Juerd> Limbic_Region: Not that I can remember

[19:28] <Juerd> Limbic_Region: Why this rather specific question?

[19:43] <apple-gunkies> excuse me folks,  is there a synopsis or other document  that describes the current thinking on perl6 macros? 

[19:44] <apple-gunkies> S6 is pretty short on details :)

[19:50] <r0nny> apple-gunkies: u mean the howto for html comments ? ;P

[19:52] *** _SamB_ is now known as SamB

[19:52] <kolibrie> apple-gunkies: I don't know of anything other than S06, and perhaps p6l

[20:01] <r0nny> anyone got an odea why Prelude.pm might break at the pir eval line ?

[20:02] <apple-gunkies> thanks guys, guess I'll start digging through p6l.

[20:03] <kolibrie> apple-gunkies: report your findings, if you find anything

[20:12] <obra> gugod! hi!

[20:16] <pmurias> hi

[20:17] <pmurias> what sdl bindings are availble for pugs?

[20:17] <pmurias> i'am currently aware of chromatic Parrot::SDL

[20:19] <pmurias> u

[20:20] <pmurias> wanted to /u :)

[20:23] * eric256 wonders if there will be a way to make a code block atomic.

[20:24] <eric256> atomic { my $fh = open ($file); $fh.print($data); $fh.close; } ... could be very nice ;)

[20:25] <theorbtwo> ?eval my $x=1; atomic { $x++; die }; $x;

[20:25] <evalbot_7815> Error: No compatible subroutine found: "&atomic" 

[20:25] <theorbtwo> Oh, could have sworn it was already there.

[20:25] <PerlJam> theorbtwo: me too.

[20:26] <eric256> maybe its not safe?

[20:26] <PerlJam> ?eval my $x=1; atomically { $x++; die }; $x;

[20:26] <evalbot_7815> Error: No compatible subroutine found: "&atomically" 

[20:26] <PerlJam> I think we just have the wrong name.

[20:27] <PerlJam> (or maybe it's just not there)

[20:27] <PerlJam> But it ought to be.  We've talked about it enough.

[20:27] <eric256> can;t find it in the documents. not that that means alot

[20:33] * eric256 peaks at the KWID module. and wonders how hard it would be to port

[20:36] <pmurias> mention of atomic can be found in one of the talks

[20:36] <geoffb> pmurias, 'use perl5:SDL;' works as well.

[20:36] <geoffb> oops . . . that's what I get for typing around a child

[20:36] <eric256> lol

[20:36] <eric256> Kwid::Event::Parser exists...hmmm

[20:48] <stevan> eric256: that is missing a LOT of functionality

[20:49] <stevan> and event based parsing it probably not the right approach for Kwid

[20:52] <eric256> i have no idea. i don't even know the Kwid syntax... i thought i'd heard rumbling that tests would be documented with it

[20:53] <eric256> feel free to play on http://feather.perl6.nl:8027/cgi-bin/wiki.pl  its pretty low tech for the moment.  looking for a quick Wiki-ish formating system for it

[20:53] <stevan> eric256: in the early days of Pugs,..there was talk of kwid replacing POD

[20:53] <stevan> but I think that aspect has died in favor of the PerlDoc stuff

[20:53] <eric256> PerlDoc?  hehe

[20:54] <eric256> whats that?

[20:54] <stevan> search.cpan.org for it,.. It was a DOM-like object structure for parsing POD, Kwid, and any other misc format

[20:55] <stevan> eric256: very nice (wiki.pl) ... and it's almost as fast as kwiki :P

[20:56] <eric256> thanks.  it doesn't do much and it stores everyting with $fh.print($data.perl);  but its a start. 

[20:57] <eric256> i'm thinking about haveing it write the HTML files, and just re-write the HTML on edit. then viewing is fast and editing is the same speed

[21:04] <pmurias> anybody interested can see the beginnings of my perl6 tutorial at www.yourcargo.org/draft.txt

[21:05] <svnbot6> r7816 | autrijus++ | * More S17 work: a vastly more improved alarm(), among other

[21:05] <svnbot6> r7816 | autrijus++ |   random changes and topics.

[21:05] <autrijus> that doesn't work -- http://www.yourcargo.org:8080/draft.txt does

[21:05] <pmurias> as you can it's in it's very early stages yet (94 lines)

[21:05] <eric256> pmurias ... i'm sure you could put something like that in the repo under docs

[21:05] <stevan> hey autrijus :)

[21:05] <autrijus> hey stevan.

[21:05] <autrijus> sorry, was fried last night

[21:06] <stevan> autrijus: no problem

[21:06] <autrijus> and hence didn't do much but finished the pressure centre that is $job today

[21:06] <autrijus> and got alarm() among other thing specced

[21:06] <autrijus> eric256: DBI::PurePerl is only 400 lines in its main logic -- interested? :)

[21:07] <autrijus> (and also DBD::mysql::PurePerl)

[21:08] <eric256> interested in....porting?  no thanks. ;) not yet at least.

[21:08] <stevan> DBD::MySQLPP is very nicely written code IMHO

[21:10] <eric256> is there a way i can checkout a single directory? i want to push this wiki into the examples section. is that doable? and then check the wiki back out into my cgi-bin directory? or is that a n no? ;)

[21:12] <autrijus> with svk?

[21:12] <autrijus> sure, do this

[21:12] <autrijus> svk import --to-checkout //mirror/pugs/examples/yourwiki /path/to/yourwiki

[21:12] <pmurias> stevan: Also wonderfully modularized...

[21:15] <autrijus> dduncan: have you looked at DBI::PurePerl and DBD::mysql::PurePerl?

[21:15] <autrijus> dduncan: I'm wondering if it makes sense to port them over -- liz6 noticed that in all p6 examples, we start using

[21:15] <autrijus> use perl5:DBI;

[21:15] <autrijus> which should be a pretty good indication that it's a worthy module to have under 6.28.x

[21:16] <xerox> autrijus!

[21:16] <autrijus> hey xerox 

[21:16] <eric256> does it matter where i run that command autrijus?

[21:16] <dduncan> autrijus, do you mean the perl 5 ones, or is there a perl 6 version now?

[21:16] <autrijus> eric256: nope

[21:16] <xerox> You did show (an early-staged) Nymphaea in the Haskell.xul slides!  Woot!  you++ !

[21:17] <autrijus> dduncan: no, I mean porting the 400 or so lines of p5 into p6

[21:17] <autrijus> xerox: eh what? what?

[21:17] <xerox> autrijus: there is that slide 'cairo + Gtk2hs' and then *poof*, the L-System renderer.  I wanted to thank you :-)

[21:18] <autrijus> oh right :)

[21:18] <dduncan> if you want me to do this, I can consider it ... but the one I do may be more of a look-alike that doesn't follow all the little details

[21:18] <autrijus> dduncan: sure, lookalikes are fine

[21:19] <autrijus> I'm just looking for things that can exercise OO stuff that also have max practical usability

[21:19] <xerox> (Though you could have chosen a best shot ;-))

[21:19] <autrijus> though a thought would have perl6 DBI working with perl5 DBDs

[21:19] <autrijus> mmm scary thought

[21:19] <liz6> autrijus: yep, 2 scary..

[21:20] <dduncan> this said, I feel I should put forth an invitation to the people that are designing DBI-2, should they want to participate

[21:20] <PerlJam> dduncan: people?  I thought it was just Tim these days.

[21:20] <svnbot6> r7817 | eric256++ | Directory for svk import.

[21:20] <svnbot6> r7818 | eric256++ | Adding Wiki port of http://www.perlmonks.org/?node_id=503926

[21:21] <autrijus> dduncan: yeah. the last time it came up, parrot was nowhere, our obj system doesn't really exist, so there was not much work done

[21:21] <autrijus> Tim said he'd take a look but didn't report back

[21:21] <dduncan> true, the current effort is parrot focused, for a multi-language solution, but they may be interested in this

[21:21] <stevan> Tim recently asked for a p5 roles impl for DBI2

[21:21] <stevan> robkinyon was building it

[21:22] <dduncan> on the other hand, I could just make a clone of DBI1 in perl 6, with the assumption it will be rewritten after

[21:22] <dduncan> I'll do something, anyway

[21:23] <PerlJam> dduncan: you can't.  What will happen is that you're start on the clone of DBI1 and  then realize that you could make it better here and there, and you'll end up with DBI1.5  :)

[21:23] <dduncan> but it may take liberties in improvement, such as the perl 6 Test.pm isn't exactly the same as the perl 5 Test::More

[21:23] <autrijus> peripheral stuff are fine :)

[21:23] <autrijus> s/stuff/changes/

[21:23] <dduncan> sure, we'll make it DBI 1.5

[21:23] <autrijus> cool! dduncan++

[21:24] <PerlJam> dduncan++ indeed

[21:24] <pmurias> it would be cool to be able to use DBI transparenty from browsers

[21:24] <Khisanth> PerlJam: meh there already modules with same name as their p5 equivalent except they have a different interface!

[21:24] <dduncan> I'm going to have to install MySQL on my system again, though, in order to test it with

[21:24] <Khisanth> PerlJam: don't you mean he will end up with DBI6 ;)

[21:24] <PerlJam> heh

[21:24] <autrijus> you can then port DBD::NullP and DBD::Sponge :)

[21:25] <autrijus> (<100 lines)

[21:25] <autrijus> and then stevan can port his wonderfully sick but practical module

[21:25] <dduncan> which is ...

[21:25] <stevan> autrijus: which one?

[21:25] <autrijus> (which is considerably more lines)

[21:25] <autrijus> DBD::Mock

[21:25] <stevan> :)

[21:26] <PerlJam> a parrot DBI would be nice though.  Let all languages  reap the benefits.

[21:26] <autrijus> PerlJam: or a P6 DBI with a reasonable P6->Parrot codegen

[21:26] <PerlJam> or that.

[21:26] <autrijus> and optimize the heck out of that (codegen)

[21:27] <autrijus> in any case I suspect DBI::PurePerl to be easier to port than the full DBI XS to Parrot

[21:27] <dduncan> damn straight!

[21:27] <PerlJam> maybe.

[21:27] <PerlJam> parrot makes many things simpler.

[21:27] <autrijus> it's not about parrot :)

[21:27] <autrijus> (it's about grokking the XS part)

[21:28] <autrijus> DBI::PP to PIR may be interesting as well.

[21:28] <autrijus> timtowtdi

[21:28] <dduncan> all we really need though is a new code base that follows the same behaviour as the old version ... doesn't have to be a line by line or sub by sub port

[21:28] <autrijus> dduncan: right

[21:28] <PerlJam> Get the interfaces right and who cares what the code looks like :-)

[21:28] <dduncan> and that makes it easier, since the DBI API is dead simple

[21:28] <autrijus> it's basically just a way to query stuff from DBDs

[21:29] <autrijus> and very few abstractions between them

[21:34] <PerlJam> btw, if I'm not mistaken, DBI<->DBD does the same trick of having intermediate "languages" that meet in the middle.  This seems to be a good pattern.

[21:36] <autrijus> well, it's a set of calls

[21:37] <autrijus> but it's reasonably minimal and well specified, so yeah

[21:37] <integral> surely that pattern's trivial since it occurs in any extensible layered situation...

[21:37] <stevan> DBI->DBD also works on the idea of "reasonable defaults"

[21:38] <stevan> writing a basic DBD is actually fairly simple,.. it's when you get into the fine grained details that it gets harder

[21:39] <autrijus> integral: though to be nicely extensible, the pattern can be subtle to find

[21:39] <stevan> autrijus: so any object space revelations you want to share?

[21:40] <autrijus> stevan: thanks to you I was able to comprehend diagrams on PickAxe about metamodel and eigenclasses without squinting

[21:40] <stevan> autrijus: :) glad I could help

[21:40] <stevan> Pickaxe++ # i picked it up again recently

[21:40] <autrijus> stevan: er no, except they have this weird ability to inspect all managed objects in existence

[21:40] <autrijus> and I started thinking of doing that in hs

[21:41] <autrijus> and then it occured to me that

[21:41] <stevan> we need to spec the GC?

[21:41] <autrijus> all the scalar array and hash contains would be counted as well

[21:41] <autrijus> as they are objects in p6 but not in ruby

[21:41] <autrijus> (I journaled about that)

[21:41] <stevan> hmm, thats a good point

[21:42] <stevan> I am starting to think maybe we need to seperate our core objects from our user obejcts

[21:42] <autrijus> so have to layers of runtime objects?

[21:42] <autrijus> s/to/two/

[21:42] <stevan> maybe

[21:42] <autrijus> this just means there are things that don't get into MM/ObjSpace

[21:42] <autrijus> right?

[21:42] <autrijus> so you can still call methods on them but not extending them as such?

[21:42] <stevan> what do you mean by "things"

[21:43] <autrijus> things, as in objects in the runtime

[21:43] <stevan> well I think we can make them accessible for extension and such, but we just don't count them as user objects

[21:43] <autrijus> oh ok

[21:43] <autrijus> so just a flag

[21:43] <stevan> I mean,.. the GC should never need to reap Class, Object, Module, Package, etc

[21:44] <stevan> they should never go out of scope anyway

[21:44] <stevan> same with Scalar, Hash, Array, etc

[21:44] <stevan> they are key to the language itself

[21:44] <autrijus> but specific Class instances are reaped

[21:44] <autrijus> as is Hash containers

[21:44] <stevan> yes, they should be

[21:44] <stevan> but the original ones,.. no,.. they should always stay around

[21:44] <autrijus> it's just the ::Hash object itself that is not a "user obj"

[21:45] <autrijus> but consider

[21:45] <autrijus> ::Hash := ::MyHash; # whee!

[21:45] <autrijus> suddenly the old hash stuff is outta scope

[21:45] <dduncan> so I'll checkin a shell of this DBI in an hour or so ... but a name ...

[21:45] <stevan> why is it out of scope?

[21:45] <dduncan> I thought of naming it "DBI1"

[21:45] <autrijus> it's not reachable

[21:45] <autrijus> unless you have hash containers that's alive

[21:45] <dduncan> and any drivers, "DBD1::*"

[21:45] <stevan> ah,.. I see

[21:46] <theorbtwo> autrijus: Don't the extant hashes... exactly.

[21:46] <stevan> well maybe the whole "classes are but an illusion" idea of luquis works here

[21:46] <autrijus> elaborate?

[21:46] <dduncan> the 1 is intentional so that any uses of this module that become legacy don't interfere with the more solid "DBI" version 2 being worked on for the future

[21:47] <stevan> well, if ::Hash is just a Role in the user space, and it is created in the outermost scope, then it should live long enough

[21:47] <autrijus> dduncan: I think in light of multiversioning it's a bit defensive, but I'm fine if you do that :)

[21:47] <stevan> the underlying impl will be in accessible ... luqui's "concrete type"

[21:47] <dduncan> alternately, what "version" should I use?

[21:47] <autrijus> stevan: ok, I understand and agree.

[21:47] <dduncan> 1.5.0 perhaps?

[21:47] <theorbtwo> OTOH, it'd be nifty if ::Hash = ::MyHash magically made {} and my %foo create MyHashes.

[21:47] <autrijus> dduncan: sure

[21:48] <autrijus> theorbtwo: that is the idea.

[21:48] * stevan wonders if the crack in England is that much better than the crack in Germany, and why theorbtwo didnt bring any to the hackathon

[21:48] <autrijus> doesn't see anything wrong with that idea, at least not yet

[21:49] <theorbtwo> stevan: Huh?

[21:49] <stevan> it is an interesting idea,.. but it's like overloading CORE::* stuff,.. you never know who is doing weird stuff, and what that will break

[21:49] <theorbtwo> Yes, well, I wouldn't suggest actually doing so.

[21:49] <stevan> theorbtwo: just joking,.. it is semi-insane 

[21:49] <theorbtwo> Esp assigning to it without temporalizing.

[21:50] <dduncan> on the other hand, I can just call it "DBI" and "0.0.1", and this can be evolved into the actual version by Tim etc later

[21:50] <autrijus> dduncan: yes.

[21:50] <PerlJam> dduncan: DDBI (Duncan's DBI :)

[21:50] <stevan> PerlJam: that would be DDDBI (Darren Duncan's DBI)

[21:50] <dduncan> I'm not doing that ... that's what Rosetta is

[21:50] <liz6> isn't Perl 6 able to load modules by author?

[21:51] <stevan> DBI-0.0.1-cpan:DDUNCAN should be fine IMO

[21:51] <autrijus> liz6: yes.

[21:51] <liz6> stevan: right

[21:51] <PerlJam> dduncan: what stevan said

[21:51] <liz6> so no need to use something other than DBI as namespace, right?

[21:51] <autrijus> use DBI--cpan:DDUNCAN;

[21:51] <liz6> cool

[21:52] <autrijus> liz6: right. that's what I meant by "in light of multiversioning"

[21:52] * stevan praises the 3 part namespace,.. all hail the @Larry

[21:52] * autrijus prays we get that in p5

[21:52] <dduncan> should I include the cpan:DDUNCAN right from the start?

[21:52] <autrijus> dduncan: sure why not

[21:52] <liz6> autrijus: I was interpreting mult-versioning more strictly: different versions of the same module / author to co-exist

[21:53] <stevan> dduncan: you could also use email:dduncan@something.net or url:http://www.dduncan.net

[21:53] <autrijus> liz6: nod

[21:53] <dduncan> okay ... should help test the system, since I don't think anyone else is doing that

[21:53] <autrijus> s/email:/mailto:/

[21:53] <autrijus> and http:// is fine without url: :)

[21:53] <autrijus> (at least afict)

[21:53] <dduncan> if I have to associate it with myself, then my CPAN id is fine

[21:53] <theorbtwo> ++ to whoever realized that it's cpan:, and not cpan://.  (Perlmonks got that wrong.)

[21:53] <stevan> yeah,.. url:http: is a little redundant

[21:54] <autrijus> more importantly, it's spceed to take a URL :)

[21:54] <autrijus> s/URL/URI/

[21:54] <autrijus> and a URI scheme named url would be strange :)

[21:55] <theorbtwo> There is a URI scheme named urn, BTW.

[21:55] <theorbtwo> ...and yes, it is strange.

[21:57] <stevan> autrijus: have you had any time to look at the Bootstrap file I have been hacking on?

[21:57] <autrijus> MM-Bootstrap?

[21:58] <stevan> MetaModel::Boostrap actually

[21:58] <autrijus> the procedure to bootstrap from any capable chaos?

[21:58] <stevan> yes that is the idea (although not reality yet)

[21:58] <obra> 'evening

[21:58] <stevan> hey obra 

[21:59] <autrijus> to get there you need the native p5 closures to go away

[21:59] <autrijus> decomposing them into yet more prim calls

[21:59] <stevan> autrijus: what native p5 closures? the sub {} stuff?

[21:59] <stevan> the closure->new() objects are implemented in the runtime,.. they just need some type of executable chuck to work with

[22:00] <stevan> s/chuck/chunk/

[22:01] <autrijus> I mean the stuff like 

[22:01] <autrijus> my @nonemptyseqs = (map { (@{$_} ? $_ : ()) } @seqs);

[22:02] <autrijus> they are trivial

[22:02] <stevan> oh yeah,.. _merge needs help,.. 

[22:02] <eric256> can i ask...why aren't you doing all this work in p6/haskell?  i think i've asked before..but i'm still curious. i mean i figure its faster to prototype in p5. but arn't you now in the proccess of integrating it into pugs?

[22:02] <autrijus> but that's also portability problems may rise

[22:02] <autrijus> since it's not all messages

[22:02] <autrijus> but the idea is sound and... you know, this is much much more readable than any of the previous boots

[22:03] <autrijus> stevan++

[22:03] <stevan> autrijus: I am thinking some kind of data driven approach might make sense

[22:03] <stevan> where we spec the metamodel out as XML or something ;) and each backend builds a minimal translator of some kind

[22:04] <autrijus> maybe. but what you are doing can already be subject to static analysis

[22:04] <stevan> true

[22:04] <autrijus> because the call graph (treating assignments as bindings and inlineable) represents the XML structure

[22:04] <autrijus> so yes, I think we will do that (eventually)

[22:04] <autrijus> with the canonical sequence in p6

[22:04] <stevan> I might take the PyPy approach too of using list iterators rather than foreach loops

[22:05] <autrijus> and do PIL->BootCode->P5

[22:05] <autrijus> that's trivial to write

[22:05] <stevan> that makes sense

[22:05] <autrijus> iterators makes much more sense, yes.

[22:05] <autrijus> (I was looking at the foreachs and wondering what to do)

[22:06] <stevan> PyPy++ # :)

[22:06] <autrijus> indeed

[22:06] <stevan> ideally I can break it all down into message sends, and what little can't be done that way will need to be implemented by the runtime

[22:07] <autrijus> though I suspect the "what little" there can also become kernel msgs

[22:07] * stevan mumbles something about doing it all in pure lambda calculus

[22:07] <autrijus> and the runtime just supplies the prim

[22:07] <stevan> autrijus: quite true

[22:07] <autrijus> stevan: that's what PIL is, you know :)

[22:07] <autrijus> at least, readily translatable to

[22:07] <autrijus> I like the idea of kernel msgs in this setting

[22:08] <stevan> yeah me too

[22:08] <stevan> I think _merge might be a Kernel message actually

[22:08] <stevan> it would get ugly as message sends I think

[22:09] <autrijus> you can decompose it into a few kernmsgs

[22:09] * theorbtwo thinks this project is starting to have lots and lots of different languages and turtles-all-the-way-down syndrome.

[22:09] <autrijus> one handling the emptyseq

[22:09] <autrijus> and one or two in each loop

[22:09] <theorbtwo> ...but I also think that I might think this because I don't understand what's going on.

[22:10] <autrijus> theorbtwo: that's mostly because insufficient documentation :)

[22:10] <autrijus> (and visio diagrams)

[22:10] <autrijus> I'm looking to fix that as well.

[22:10] <theorbtwo> I saw that there was lots of progress on a PA02 on your journal, but have not yet actually read it.

[22:10] <autrijus> theorbtwo: what stevan is doing here is to write the metamodel bootstrapping sequence in a language agnostic way

[22:10] <theorbtwo> Yes.

[22:11] <stevan> s/stevan is doing/stevan is trying to do/

[22:11] <theorbtwo> That seems like overkill; don't we only have one language to bootstrap?

[22:11] <autrijus> ok, stevan is trying to attempt to do

[22:11] * stevan loves to throw out code,.. so you never know ;)

[22:11] <autrijus> theorbtwo: er, in a runtime-language-agnostic way

[22:11] <autrijus> of course they all boot the same p6 model

[22:12] <theorbtwo> I'd really be much happier, all in all, to be able to run perl6 on one backend then almost be able to run it on 7.

[22:12] <stevan> theorbtwo: which one?

[22:12] <autrijus> which one, is the problem

[22:12] <autrijus> I'd like p5

[22:12] <autrijus> if I can only have one

[22:12] <stevan> me too

[22:12] <stevan> easier to transition

[22:13] <theorbtwo> I suspect rolling our own might be the most reasonable.

[22:13] <autrijus> but then p5 is not really rigorous, and unless we do some abstractions like this, the lessons learned there can't be portable to hs, pir, js, or whatnot.

[22:13] <theorbtwo> No impedence mismatch.

[22:13] * autrijus mumbles something about parrot and p5 is also supposed to be "our own"

[22:13] <eric256> p1-5 didn't have these issues. or did they? or are we planning for the next 100 years?

[22:14] <autrijus> eric256: p4 to p5 went thru the same pain

[22:14] <theorbtwo> p1-5 was our own, I think.

[22:14] <autrijus> eric256: also, because in p5 there is only a runtime, not a language

[22:14] * stevan invokes the -Ofun switch :)

[22:14] <autrijus> eric256: so when the runtime becomes hard to change, the language suffers

[22:14] <autrijus> (vice versa)

[22:14] <theorbtwo> The problem is that the interpreter kept getting more and more hairy.

[22:14] <autrijus> stevan: you collect 1000 zorkmids :)

[22:15] <theorbtwo> (And I'm saying the same thing as autrijus, but from a different point of view.)

[22:15] <theorbtwo> Is the subset of perl6 that we can run now different then when we introduced the idea of multiple backends?

[22:15] <stevan> theorbtwo: interpreters are hairy beasts,.. this idea (language-agnostic bootstrap) should actually help (I hope)

[22:15] <theorbtwo> So do I.

[22:15] <eric256> okay...so this is the way to keep perl6 from running into a wall ilke perl5 where changing the language becomes difficult of even impossible.

[22:16] <autrijus> theorbtwo: more things has been supported, some only found on js

[22:16] <autrijus> eric256: yes, basically

[22:16] <stevan> eric256: p6 will never stop changing while @Larry is still around :P

[22:16] * eric256 scratchs his head agian and begins to anxiously continue to hurry up and wait for real OO ;)

[22:16] <theorbtwo> But I'm worried that it'll take 6 months to write this generator, vs 6 days to write the code that it would generate.

[22:17] <autrijus> the PIL and MM and other things we invent are partially defensive measures against an ever changing spec.

[22:17] <autrijus> extensibility, modularity, and other good things may result from it, but fun (and survival) are the initial motivations -- at least for me :D

[22:18] <eric256> theorbtwo++...it does feel like you could just implement something in pugs and perfect it there. instead of all this back and forth..but i understand thats how it looks from my seat, when reality might be entirly different. ;)

[22:18] <stevan> theorbtwo: the generators should be fairly easy actually, and they guard against runtime specific bugs  

[22:18] <theorbtwo> I saw a great quote in somebody's /topic the other day -- why spend 5 days of your life writing something that you can spend five years of your life writing a thing to automate writing it.

[22:18] <r0nny> autrijus: ping?

[22:18] <eric256> lol /me notices that r0nny wasn't paying much attention. lol

[22:18] <theorbtwo> Or something like that, but more elegant, because I am quoting from memory.

[22:19] <autrijus> theorbtwo: as do I... but then, I have brainwashed myself enough that I do believe that p6-running-on-p5 will be the ticket into "hack hack hack" phase

[22:19] <autrijus> r0nny: sure

[22:19] <r0nny> eric256: afaik i was afk eating

[22:19] <autrijus> theorbtwo: I may be wrong, but that's the assumption I'm operating under :)

[22:20] <r0nny> is there a new svn version where it wont tell a syntax error, on the call to the pugs internal pir evaluator ?

[22:20] <stevan> theorbtwo: read about PyPy,.. it is a very interesting approach

[22:20] <autrijus> (happily, my assumptions are lexical and only affects my block)

[22:20] <autrijus> r0nny:  eval('print 1', :lang<pir>);

[22:20] <autrijus> like this?

[22:20] <theorbtwo> Donno.  One thing that worries me is that if you can mix p5 and p6 too easily, there's no motivitation to port your code to p6.  Instead you write in a mix of p5 and p6, and when that's too slow, compile your p6 down to p5 and start hacking on the generated p5.

[22:21] <autrijus> r0nny: it worksforme

[22:21] <stevan> theorbtwo: it wont be compiled down to pure p5,.. it will still require the runtime

[22:21] <r0nny> autrijus: it fails on stuff like eval slurp "file.yaml";:lang<yaml> - tells the error is the call to the pir evaluator

[22:21] <autrijus> theorbtwo: I guess the motivation would be that p6 is easier to write than p5.

[22:21] <autrijus> r0nny: eval(slurp("file.yaml"), :lang<yaml>);

[22:21] <theorbtwo> But if p5 is the primary backend of p6, then p6 will never be faster then p5.

[22:22] <autrijus> r0nny: I think your semicolon are in the wrong place

[22:22] <r0nny> oh

[22:22] <r0nny> i just typed wong here in irc

[22:22] <r0nny> well - it fails, if i use evalfile

[22:22] * stevan has to run,.. I will backlog on this later, adios &

[22:22] <theorbtwo> r0nny: You should copy-and-paste more.

[22:23] <autrijus> theorbtwo: however, I don't see hs and js faster than p5 really

[22:23] <theorbtwo> stevan: Right -- it won't be compiled down to pure p5, it'll be compiled down to p5-with-baggage-on-top.

[22:24] <autrijus> theorbtwo: that is not entirely true -- sky__ pointed out that we can compile to OPs and introduce new OPs

[22:24] <r0nny> ok - on eval slurp "config.yaml" , :lang<yaml>;

[22:24] * stevan mumbles something about "we should all just use Java" and runs out the door

[22:24] <autrijus> first as loadable XS, but maybe even into p5blead, no less, just to support pugs

[22:24] <r0nny> it tells syntax error: line 2, column 2

[22:24] <r0nny>     at Prelude.pm line 66, column 30-64

[22:24] <autrijus> theorbtwo: and that would be as fast as we'd like.

[22:25] <autrijus> r0nny: are you using svn head?

[22:25] <r0nny> and line 66 col 30-64 is the call to the damn pir evaluator

[22:25] <theorbtwo> Wasn't part of the point to get rid of the icky perl 5 runtime?

[22:25] <r0nny> yeah

[22:25] <r0nny> Version: 6.2.10 (r7815)

[22:26] <autrijus> theorbtwo: er yes, and people are working on that as well :)

[22:27] <autrijus> it's just takes some time to unscrew a previously screwed project... but I think we're doing well :)

[22:27] <theorbtwo> Hm.

[22:27] <eric256> perlbot nopaste

[22:27] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[22:27] <eric256> r0nny can you paste your yaml file there

[22:27] <autrijus> theorbtwo: and also, if parrot dissipates and YARV becomes real nice, we don't even have to roll our own.

[22:27] <theorbtwo> YARV?

[22:27] <autrijus> theorbtwo: Ruby2 VM

[22:27] <theorbtwo> Ah.

[22:27] <autrijus> or rather, Ruby 1.8's new VM as well

[22:27] <autrijus> already runs miniruby

[22:28] <theorbtwo> It seems unlikely that parrot will unscrew; trying to be everything to everybody is /hard/.

[22:28] <autrijus> theorbtwo: try http://www.atdot.net/yc/compile

[22:28] <r0nny> http://r0nnyger.mine.nu/~r0nny/config.yaml

[22:29] <r0nny> its the output of using perl5 data and a yaml output

[22:30] <theorbtwo> Hm.  I'm off, I think.

[22:30] <autrijus> theorbtwo: yeah, but the gist is that I'm not really a VM tuning person, so I wouldn't want to write and maintain a fast, efficient, general-purpose runtime that's competitive to other shared runtime out there

[22:30] <r0nny> eric256: any idea from the yaml file ?

[22:30] <autrijus> theorbtwo: but I want to use p6, so my strategy is to target it to whatever VM that's best out there. :)

[22:30] <autrijus> other people's motivations may, of course, differ

[22:31] <eric256> yes. the bult in YAML processor is very limited, as i stated before

[22:31] <autrijus> r0nny: that worksforme

[22:31] <autrijus> ./pugs -e 'say eval(slurp("config.yaml"), :lang<yaml>)'

[22:31] <autrijus> or even 

[22:31] <autrijus> ./pugs -e 'say eval(slurp("config.yaml"), :lang<yaml>).perl'

[22:31] <autrijus> r7598

[22:32] <autrijus> er I mean r7816

[22:32] <eric256> but that file processes fine

[22:32] <r0nny> autrijus: same errkr

[22:32] <autrijus> r0nny: very strange -- did you change Prelude.pm somehow?

[22:32] <r0nny> no

[22:32] <eric256> same here clear back on r7711

[22:33] <autrijus> r0nny: your platform?

[22:33] <autrijus> r0nny: I wonder if a clean rebuild would help

[22:33] <r0nny> gentoo linux - x86

[22:33] <r0nny> clean ?

[22:33] <autrijus> make clean

[22:33] <autrijus> perl Makefile.PL ; make unoptimised

[22:33] <autrijus> if that fails, I'm willing to take a shell account and go look, but that's after I wake up

[22:33] <eric256> you might revert your SVN checkout too

[22:34] <autrijus> right, or use "svn diff" to check

[22:36] <r0nny> might it be a problem to have a binary version of ghc ?

[22:36] <autrijus> no, that shouldn't matter at all.

[22:37] <r0nny> i wish i knew, why it dies all the time

[22:37] <buu> Are the l33t new perl rules implemented in pugs?

[22:38] <autrijus> buu: yes

[22:38] <buu> Hurrah!

[22:38] <buu> Woah. They look exactly like BNF

[22:38] <autrijus> r0nny: so if you run this

[22:38] <autrijus>  ./pugs -e 'say eval(slurp("config.yaml"), :lang<yaml>).perl'

[22:38] <autrijus> in the command line

[22:38] <autrijus> it dies with the same error, right?

[22:38] <r0nny> yeah

[22:39] <autrijus> what if you change "yaml" to "perl6" there?

[22:39] <r0nny> undef as ret val

[22:39] <r0nny> no error

[22:40] <autrijus> what if this?

[22:40] <autrijus> ./pugs -e 'say Pugs::Internals::eval_yaml(slurp("config.yaml")).perl'

[22:40] <r0nny> syntax error: line 2, column 2

[22:40] <r0nny>     at -e line 1, column 5-58

[22:40] <r0nny> it doesnt like pugs::internals

[22:40] <r0nny> hmm

[22:41] <autrijus> that's very wrong

[22:41] <autrijus> mm

[22:42] <r0nny> darn - pugs::parser kales a mess while being compiled

[22:42] <r0nny> eh makes

[22:42] <autrijus> kales?

[22:42] <autrijus> mm? meaning it takes a lot of ram?

[22:43] <r0nny> it makes the x11 framerate about 1 fps

[22:43] <autrijus> oh wow. maybe renice it

[22:43] <autrijus> your kernel isn't very preempt, I see :)

[22:43] <r0nny> wich basically means it takes a hell of shitload of work for the vm

[22:43] <r0nny> allready niced down to 19

[22:43] <autrijus> I'm sorry. :/ did you really "make unoptimised"?

[22:44] <autrijus> (straight "make" for GHC 6.4.0 will leak)

[22:44] <r0nny> only compiling monotone had whorse results on my pc

[22:48] <r0nny> i think im going to make it need ghc 4.1-r1

[22:48] <r0nny> the -A200 opt "should" have worked

[22:55] <dduncan> I think I'll defer the DBI thing for a few days or weeks

[22:55] <dduncan> fyi, in order to test this with MySQL etc, we need an IO::Socket replacement that is functional

[22:56] <liz6> yes, that would seem necessary...  ;-)

[22:56] <dduncan> does Haskell have the libraries etc to hook up to that implement sockets?

[22:57] <dduncan> hmmm ... I see there's a Net::IRC module ... but does it work?

[22:57] <Khisanth> aren't the svnbot6 and evalbot_7818 both written in Perl 6?

[22:58] <r0nny> omfgdh

[22:58] <Khisanth> surely that requires working sockets ...

[22:58] <dduncan> are they?

[22:58] <dduncan> looking ...

[22:58] <r0nny> watching the configure process of ghc makes me think a insane person did this freaking autofoo setup

[23:00] <eric256> Khisanth the code for them is in the repository under exampes/net

[23:00] <eric256> but yes i beleive they both are, well eval bot has a perl5 helper script

[23:02] <autrijus> dduncan: we have sockets

[23:02] <autrijus> dduncan: examples/network/

[23:03] * liz6 is calling it a day

[23:03] <liz6> a day

[23:14] <dduncan> okay, I see the examples ... this will take me awhile to do, though, and I'll probably continue my own modules concurrently

[23:21] <autrijus> that's fine, no rush :)

[23:21] <rafl> autrijus: FYI, our Module::ScanDeps, PAR::Dist and PAR modules will be in Debian soon.

[23:22] <autrijus> cool

[23:23] <r0nny> rafl: can the depenca scanner be used for other stuff, then modules ?

[23:24] <r0nny> eh depency

[23:24] <rafl> I'm also considering to extend dh_perl (a script that finds dependencies for perl packages during the bild) and dh-make-perl (a script that makes debian packages from perl module from scratch) using Module::ScanDep?

[23:24] <rafl> r0nny: what stuff for example?

[23:24] <autrijus> r0nny: yes

[23:24] <autrijus> rafl: that'd be nice.

[23:25] <autrijus> (though I need to sleep in a couple mins)

[23:25] <r0nny> source files > object files > library file(s)

[23:26] <r0nny> im still on the build-system thing

[23:26] <r0nny> maybe it can be integrated into sixpan for creating binary modules in a nice way

[23:27] <rafl> I doubt that. Different distributions will have other names for different libraries.

[23:27] <rafl> Or maybe none at all (win32).

[23:27] <rafl> sixpan would need to provide "The Source Of The World" to make that work.

[23:28] <r0nny> not really

[23:28] * autrijus waves &

[23:28] <r0nny> cu autrijus 

[23:29] <r0nny> rafl: basically all i need to change betwen platforms is binary format and prefixes/suffixes

[23:29] <r0nny> should be configured in a yaml file

[23:30] <r0nny> btw - hadnt parrot a arch-independ object format ?

[23:30] <rafl> How can I specify and check that I need libgmp3 in at lease version 4.1.4?

[23:31] <r0nny> rafl: such stuff will be part of the configuration framework, not the building/depency part

[23:31] <r0nny> but basically everything should be made by some yaml config files

[23:32] <r0nny> it can easyly be the first file od a tarbz2

[23:32] <rafl> I really doubt that this can be portable.

[23:32] <r0nny> why ?

[23:32] <r0nny> where do u see problems

[23:33] <r0nny> i really need to know such stuff - maybe i forgot simple stuff wich makes some things bad

[23:33] <rafl> Different platforms have different packaging systems. Some don't have such a thing at all.

[23:33] <rafl> If a dependency is available with the packaging system it should install it using this system

[23:34] <r0nny> could do that with extensions

[23:34] <rafl> If not it needs to be downloaded and built (including all deps) and installed where also other software can use it.

[23:34] *** khisanth_ is now known as Khisanth

[23:35] <rafl> How to write an extension that can deal with every package management system that exists out there? Impossible, imho.

[23:35] <rafl> It's almost impossible to really find the name of a perl package in Debian from the module name on cpan.

[23:36] <r0nny> hmm

[23:36] <r0nny> then dont support till they got sane names

[23:36] <r0nny> maybe help them keep perl6 module names clean from the beginning

[23:37] <rafl> Of course. Only support gentoo as it's the only sane alternative to <insert whatever here>

[23:37] <r0nny> hmm

[23:37] <r0nny> well under gentoo Foo::Bar is just mapped to dev-perl/Foo-Bar

[23:38] <rafl> Perl is cool because it runs on almost everything and is highly portable.

[23:38] <r0nny> well - there is allways the way of creating own deb files, and installing them with apt

[23:38] <r0nny> eh dpkg

[23:38] <rafl> Not supporting something because we want to have some magic for installing the whole world from cpan isn't good.

[23:39] <r0nny> well - just make the debian folks keep the perl6 module names clean

[23:39] <rafl> The goal of sixpan is to provide something to install perl packages. If there are other libs require it can tell you that, but it can't install it in the normal case.

[23:39] <rafl> I'm going to, of course. But there's more out there than debian and gentoo.

[23:40] <r0nny> i got an dea for this

[23:40] <r0nny> well - iach package with external depencyes could have a yaml file maps os/dist to package names need to be installed

[23:41] <r0nny> also the package-maintainers of the distro could do some of this work

[23:42] <r0nny> guess debian and gentoo wil have it the fastest, *bsd and other unix-aliked folowing

[23:42] <rafl> I, as a potential author of perl modules, have exactly one platform I write my stuff one. Others may have two or ten or whatever. No one will have every platform you can think of. So it won't work for every platform.

[23:42] <r0nny> but win32 might be problematic

[23:42] <rafl> We can't rely on others. It simply needs to work as it is.

[23:43] <r0nny> then it needs to relly on sane pkg managers

[23:43] <r0nny> and i dont know any conplete sane out there

[23:44] <rafl> OK. You convince developers of every operating system flavour out there to obey our rules first. Then we can implement your ideas.

[23:44] <r0nny> well - there should be a concept allows package-maintainers to add the needed informations easy, so the package-developers dont have to worry about all platforms

[23:45] <r0nny> make it nice and sane, so they start using it :)

[23:45] <r0nny> at leas i hope so :)

[23:45] <rafl> For sure..

[23:46] <r0nny> well - i know it will be sane under gentoo (u know the :: to - mapping)

[23:46] <r0nny> debian folks coudl do, too

[23:46] <rafl> Stop thinking only about Gentoo and Debian.

[23:46] <r0nny> just make it perl6-mod-Foo-Bar or something

[23:46] <r0nny> bsd might be more problematic

[23:46] <r0nny> since i dont know hopw ports work

[23:47] <r0nny> but i know, who to ask

[23:47] <r0nny> and win32 need something else

[23:47] <r0nny> basically unix needs some simple stuff, an then could do

[23:47] <r0nny> but win32 might be more complicated

[23:48] <rafl> BSD isn't a real problem either. Other systems won't have a package management at all or they don't package the library a module needs and maybe not even the build-depends and probably the build-depends won't even run there, ...

[23:49] <r0nny> then the modules just should tell them all depencyes at once (i hate autofoo configures show only one a time - makes it bad)

[23:50] <rafl> Fine. Unfortunately that doesn't solve anything.

[23:50] <r0nny> no package manager means user needs to install

[23:50] <r0nny> think of LFS users and such

[23:50] <r0nny> they have no pkg-manager at all

[23:50] <r0nny> so they need to know what they need

[23:52] <r0nny> ping?

[23:52] <rafl> Yes. That the least common denominator what is useful to implement. Tell the user what non-cpan dependencies are needed and maybe give him some hints about them

[23:52] <r0nny> yeah

[23:54] <r0nny> btw wvk mirror ?

[23:54] <r0nny> eh svk

[23:55] <rafl> Nothing yet. Too busy with Debian stuff to take a look at perforce and how to mirror it in a sane way.

[23:55] <r0nny> hmm

[23:56] <r0nny> well - i stay away from debian - it broke multiple times on me - in a non-recoverable way

[23:57] <rafl> Yes. That happens often and it's always Debians fault.

[23:57] <r0nny> who knows

[23:57] <r0nny> i know ppl never had any problems with it

[23:57] <rafl> I usually reinstall it at least once a week. But that doesn't hurt because I don't need to compile everything from scratch. *scnr*

[23:58] <r0nny> well - usually my system only breaks on hw failure

[23:59] <r0nny> afaik only free-bsd's stuff s more powerfull on this

[23:59] <r0nny> but free-bsd cant do xfs, and im a xfs fanbay ;P

[23:59] <r0nny> eh fanboy

