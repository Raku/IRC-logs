[00:00] <Limbic_Region> in any account - she isn't finished mowing the lawn yet - so it looks like I get to keep "playing"

[00:01] <Limbic_Region> and yes - she is the one that does the yard work, takes out the trash, etc (100% maintenance of the house)

[00:01] *** batdog is now known as batdog|gone

[00:02] <theorbtwo> Yeah, I'm horrible.

[00:03] <theorbtwo> Jess works /and/ maintains the place.

[00:03] <theorbtwo> (Mostly.)

[00:06] <Limbic_Region> I suspect that we will have hords of lamdaheads after hw2005

[00:07] <Limbic_Region> I don't understand any of the haskell code, but I can fully comprehend the impressiveness in the text that follows

[00:09] <geoffb> It's mildly amazing that he has said so much, and yet has so much left to write

[00:09] <Limbic_Region> well - he is in a bit of a catch-22

[00:10] <Limbic_Region> the speed of pugs development necessitates rewriting while writing 

[00:11] <geoffb> Any xchat users here?

[00:11] <kelan> irssi for life!

[00:12] * crysflame has defeated irssi for the first time

[00:12] <kelan> beat it into submission?

[00:12] <crysflame> persuaded it to do as i request

[00:12] <crysflame> it's /save didn't put chatnet = ""; on the servers

[00:13] <theorbtwo> chatnet?

[00:13] <crysflame> code word for "the object that has my network-specific nickname"

[00:16] <theorbtwo> Any lambdaheads around?

[00:16] <theorbtwo> instance Value [Word8] where fromval = ... is kicking my ass.

[00:16] <Limbic_Region> geoffb - in reading it, it looks like the places that need to still be written are there as stubs

[00:16] <theorbtwo> I've got all the others converted to fromVal from doCast, but I can't figure out [Word8], mostly because I can't figure out how to get the individual bits out.

[00:17] <geoffb> Limbic_Region, nodnod . . . that's how I knew how much was left to write (approx.)

[00:17] <ninereasons> geoffb, I'm using xchat, but I don't really know what I'm doing :-)

[00:18] <geoffb> ninereasons, heh

[00:19] * theorbtwo is using irssi, but doesn't really know what he's doing either.

[00:21] <kelan> yeah, i use irssi but i mostly just type in stuff and it sends them

[00:21] <geoffb> kelan, I used irssi once or twice, and that's about the level I was at.  discoverable--

[00:22] <kelan> i don't have anything complicated i want it to do, so it works out

[00:23] <kelan> gaim can do irc. i actually liked the interface quite a bit, but i *hated* not being able to just hit the up arrow to get the last line i'd typed

[00:23] * geoffb really hates undiscoverable interfaces with poor docs (or at least they were at the time)

[00:23] <theorbtwo> kelan: control-up.

[00:23] <kelan> oh

[00:23] <theorbtwo> discoverable++ discoverable++

[00:23] <kelan> but!

[00:24] <theorbtwo> Yeah, undocumented interfaces suck.

[00:24] <kelan> when you tab-complete a nick, it doesn't put a colon at the end

[00:24] <theorbtwo> I discovered that by accident.

[00:24] <theorbtwo> I prefer it not putting anything after it, because sometimes I want a comma, sometimes a colon, sometimes a space, sometimes a period...

[00:25] <kelan> i mostly just want a colon if the nick is the first word or a space if not, which is what irssi does

[00:25] <theorbtwo> Hm, so it does.

[00:25] <theorbtwo> I mostly want a comma.

[00:25] <theorbtwo> If I'm going to use the direct address, I'm going to use it correctly.  ;)

[00:25] <kelan> i think you can change it. but don't ask me how:)

[00:25] <awwaiid> use the source, luke

[00:26] <awwaiid> er

[00:26] <kelan> or ask in #debian!

[00:26] <awwaiid> hah

[00:26] <kelan> thats what i usually do for linux questions

[00:26] <kelan> i do actually use debian, so i feel justified

[00:27] <geoffb> kelan, asking in #debian is a true roll of the dice.

[00:27] <theorbtwo> awwaiid!

[00:28] <theorbtwo> #debian has been pretty crazy the last few days, for rather obvious reasons.

[00:28] <geoffb> I rarely get a good answer from there, but it may be just the type of questions I ask.  The most useful responses I get are often "um, try this other channel"

[00:28] <kelan> apparently the answer is /set completion_char

[00:28] <geoffb> theorbtwo, I believe it!

[00:28] <kelan> theorbtwo, test

[00:28] <kelan> it works!

[00:31] <theorbtwo> Hmmpf, setting it to "" just results in... odd, it changes it per-network... anyway, in theorbtwo"", which was not the effect I was going for.

[00:31] <geoffb> Why does pugs in interactive shell mode fail on things that work when it is run on a file instead?

[00:32] <kelan> geoffb: its more fun that way

[00:33] <geoffb> I know that interactive mode not only runs the code, but also displays the return value -- that's not what I'm talking about.  I'm talking about erroring on code that runs correctly in non-interactive mode

[00:33] * geoffb rolls his eyes at kelan 

[00:33] <theorbtwo> geoffb"", can I get an example.

[00:34] <geoffb> Something deep must be different between them.

[00:34] <kelan> theorbtwo: you can set it like this: `/set completion_char  ` (note two spaces after) and it will set it to space

[00:34] <kelan> but then you get this `nick  ` on completion

[00:34] <geoffb> theorbtwo, give me a sec to minimize the test case

[00:34] <theorbtwo> kelan, I don't want a space, generally... ah, well, /set completion_char , is closer to what I want, at least.

[00:35] <Limbic_Region> ok - lawn has been mowed

[00:35] <Limbic_Region> guess it is time for me to go

[00:35] <Limbic_Region> TTFN all

[00:35] <geoffb> theorbtwo:

[00:35] <geoffb> #!/usr/bin/pugs

[00:35] <geoffb> use File::Basename--perl5;

[00:35] <geoffb> our &basename := File::Basename.can('basename');

[00:35] <geoffb> say basename('/this/is/a.test');

[00:36] <theorbtwo> geoffb, I can't run that example at all, as perl5 embedding is broken for me.

[00:36] <geoffb> It prints a.test when run as a file; pasted into pugs interactive mode, it errors, twice

[00:36] <theorbtwo> Blasted include files.

[00:36] <geoffb> theorbtwo, BLEAH

[00:37] <theorbtwo> :r

[00:37] <theorbtwo> Whoops.

[00:37] <geoffb> Anyone else have p5 embedding working?

[00:38] <theorbtwo> I should get a feather account.

[00:38] <geoffb> theorbtwo, definitely

[00:38] <geoffb> Juerd, is feather's pugs built with embedding?

[00:40] <geoffb> right, middle of the night in Europe, forgot

[00:47] <theorbtwo> 2:50 AM.

[00:47] <theorbtwo> I should probably get to bed soon.

[00:47] <theorbtwo> My work is so close to the point where I can convivebly check it in without breaking the entire world, though.

[00:48] <geoffb> Grrrr, Alt-4 != Alt-F4

[00:49] <theorbtwo> .oO(Windows users.)

[00:49] <geoffb> theorbtwo, what are you working on?

[00:49] <geoffb> theorbtwo, nope.  Gnome defaults.

[00:49] <theorbtwo> Getting rid of doCast in favor of fromVal.

[00:50] <geoffb> theorbtwo, . . . which would gain us locality for cast failures?

[00:53] <theorbtwo> Yep.

[00:53] <geoffb> THANK YOU

[00:59] *** fibonaci is now known as luqui

[00:59] <meppl> gute nacht - good night

[00:59] <theorbtwo> G'night, meppl.

[01:00] <theorbtwo> You're up quite late.

[01:00] <meppl> ;)

[01:00] <theorbtwo> (Assuming you are in germany.)

[01:00] <theorbtwo> Allo, Luke.

[01:00] <luqui> hello

[01:00] <meppl> i am

[01:00] <meppl> *zZzZ

[01:16] <macGuy> what is the proper way to end a subroutine in a foreach loop

[01:17] <luqui> what do you mean?

[01:17] <vcv-> return; ?

[01:17] <macGuy> ok

[01:17] <macGuy> im in a foreach loop and i dont want it to continue if ive already done all that i need to do

[01:17] <macGuy> so i want it to just break out

[01:17] <luqui> yeah, you can return out of the sub

[01:18] <luqui> or you can 'last' out of the loop

[01:18] <macGuy> thanks

[01:18] <macGuy> im going to use last

[01:24] <theorbtw1> last exits the for loop, return exits the subroutine.

[01:24] <theorbtw1> If the for loop is the last thing in the sub, then they are equiv, but in the general case, they mean quite different things.

[01:33] <geoffb> macGuy, 'next if condition;' and 'last if condition;' are very valuable idioms . . . worth using often, because they are so strongly self-documenting

[01:33] <geoffb> hmmm, I wonder if pugs has working labels . . . ?

[01:36] <geoffb> ?eval my @foo = <1 2 3>; my @bar = <a b c>; my $foo = '4c'; OUTER: for @foo -> $outer { for @bar -> $inner { $foo = $outer ~ $inner; last OUTER if $outer eq '2' } } $foo;

[01:36] <evalbot6> Error:  unexpected "O" expecting ";", statements or end of input reserved word or Only one invocant allowed 

[01:36] <Chewie[]> !seen Aankhen``

[01:36] <geoffb> seen Aankhen``

[01:37] <jabbot> geoffb: Aankhen`` was seen 5 hours 2 minutes 30 seconds ago

[01:37] <geoffb> Hmmm, judging by the evalbot6 output, I'd guess not . . . 

[01:38] *** theorbtw1 is now known as theorbtwo

[01:42] <theorbtwo> I think it has labels, but only for goto.

[01:43] <theorbtwo> ?eval my $x; goto FOO; $x='a'; FOO: $x~='b'; $x;

[01:43] <evalbot6> Error:  unexpected "F" expecting ";", statements or end of input Only one invocant allowed 

[01:43] <theorbtwo> ?eval my $x; goto 'FOO'; $x='a'; FOO: $x~='b'; $x;

[01:43] <evalbot6> Error:  unexpected "F" expecting ";", statements or end of input Only one invocant allowed 

[01:43] <theorbtwo> Or not.

[01:45] <QtPlatypus> I know that goto isn't implemented.  And I expect it to be very low on piroties.

[01:46] <kelan> ?eval chars( "»" );

[01:46] <evalbot6> ***      unexpected ( or "("     expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input     at -e line 4, column 4 

[01:48] <theorbtwo> ?eval "»".chars

[01:48] <evalbot6> ***      unexpected ( or "("     expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input     at -e line 4, column 4 

[01:49] <theorbtwo> I suspect somewhere in the p6->p5->p6 cycle, there are encoding issues.

[01:50] <kelan> why is it going through p5?

[01:51] <theorbtwo> I'm not quite clear on that myself.

[01:51] <theorbtwo> Something about getting the safe mode, and maintaining persistance at the same time.

[02:43] *** batdog|gone is now known as batdog

[03:20] <pasteling> "qtplatypus" at 202.7.69.25 pasted "This makes makes my copy of pugs die with a bus error. What about you?" (11 lines, 223B) at http://sial.org/pbot/10867

[03:23] <QtPlatypus> Can someone look at that code and see if it causes your copy of pugs to die.

[03:23] <QtPlatypus> Hi tall_man 

[03:33] *** batdog is now known as batdog|gone

[03:45] *** batdog|gone is now known as batdog

[03:58] <QtPlatypus> batdog: Can you test my code and see if it segfaults your pugs?

[04:32] <Khisanth> QtPlatypus: do you have the latest pugs?

[04:32] <Khisanth> QtPlatypus: hmm that would require parrot wouldn't it?

[04:38] <svnbot6> r4466, putter++ | Created docs/other/rules_bootstrap

[04:46] <QtPlatypus> Khisanth: Yes I have.

[05:12] <svnbot6> r4467, putter++ | hw2005.txt: 6 spelling corrections.  (not UK-isms - doublechecked with google site:uk word :).

[05:28] <masak> question: in Apocalypse_Now.spork, the word "DWIMer" is used. Isn't "DWIMmier" more correct? Or is "DWIMer" accepted usage?

[05:28] <masak> both are kinda awkward :/

[05:32] <masak> I guess the problem I have with "DWIMer" is that it sounds more like a noun to me

[05:32] <mugwump> DWIMier is what I'd use

[05:32] <masak> no double "m"?

[05:32] <mugwump> nah

[05:32] <mugwump> it's an acronym

[05:32] <masak> true

[05:32] <masak> should I change it, or should I leave it alone? I don't want to ruin someone's talk :)

[05:33] <mugwump> you could hyphenate it

[05:33] <masak> "DWIM-ier"?

[05:33] <mugwump> sure

[05:33] <masak> yuck :)

[05:34] <luqui> follow english inflection rules.  DWIMmier is the most correct

[05:34] <luqui> if you want to emphasize its double role as a verb and an acronym

[05:34] <masak> I have vague memories of people using it that way

[05:34] <luqui> I think I do

[05:34] <masak> including @Larry

[05:34] <mugwump> http://groups.google.co.uk/group/perl.perl6.language/search?group=perl.perl6.language&q=dwimmier&qt_g=1&searchnow=Search+this+group

[05:35] <mugwump> sure, "dwimmier" is fine

[05:35] <masak> so, should I change it or leave it alone?

[05:35] <masak> I always become a bit nervous with all these svn powers granted to me :)

[05:36] <luqui> svn doesn't allow users to destroy data

[05:37] <masak> I know

[05:37] <SamB> perhaps this is the intent of the generous svn access?

[05:37] <SamB> so that people will be more carefull in their hacking?

[05:37] <masak> but will someone become happier if I change it, or will I piss someone off?

[05:37] <SamB> you may annoy someone, but probably not "piss off".

[05:37] <mugwump> I'm sure no-one will care, as long as the changelog entry is amusing enough

[05:37] <luqui> there's always svn update -r 1337 if you piss someone off

[05:38] <luqui> because the one who gets pissed off has svn powers too :-)

[05:38] <masak> SamB: svn is like hacking where everyone can see you

[05:38] <masak> ok, I'll change it :)

[05:38] <SamB> I was accused pretty nicely of breaking a recent release (though it turned out it was broken before I touched it)

[05:39] <luqui> and our project leader seems to be appreciative of the fact that we're doing work at all

[05:39] <luqui> even if half of it is wrong

[05:41] <masak> luqui: yes, it's the thought that counts

[05:43] <luqui> well, and the fact that it takes a fraction of the time to correct as to write in the first place

[05:43] <masak> unrelated question: if i have a cvs repo, can I use either of svn or svk on it?

[05:43] <svnbot6> r4468, masak++ | After some deliberation, I have dared to change DWIMer into DWIMmier.

[05:43] <svnbot6> r4468, masak++ | I do believe this is the more correct form. I also believe I am a bit

[05:43] <svnbot6> r4468, masak++ | too hung up on grammar sometimes. ;)

[05:43] <masak> one changed line, three lines of comment :)

[05:44] <luqui> masak, you can use svk

[05:44] <masak> neat

[05:44] <masak> how?

[05:44] <luqui> and you can use cvs2svn to convert it to a svn repo

[05:45] <masak> hmm... it's not my repo

[05:45] <luqui> svk mirror cvs::pserver:....

[05:45] <masak> luqui: oki, thx

[05:45] <luqui> I just hashed through some problems with that, so you can talk to me if you encounter them

[05:46] <masak> my first problem will be to install svk :)

[05:46] <luqui> ahhh

[05:46] <masak> after using svn for some time w/ pugs, i really don't like cvs

[05:47] <luqui> yep.  after finding out about svn and reading the user manual, it took me about 10 seconds to decide to convert everything I had to svn

[05:47] <masak> lol

[05:47] <luqui> svn is the one of the most beautifully designed piece of software I have ever seen, internally and externally

[05:48] <masak> if one didn't know about the order of things, one would wonder why cvs was ever created

[05:48] <masak> what are the main differences between svn and svk?

[05:48] <luqui> afaict, svk is a nice mirroring frontend to svn

[05:48] <luqui> (and various other rcs's)

[05:49] <masak> a nice mirroring frontend? whazzat?

[05:49] <luqui> it allows you to work on svn repositories while you are offline, and sync up when you come back online

[05:49] <luqui> plus, it fancifies working with branches even more

[05:50] <luqui> for branches, svk:svn::svn:cvs

[05:50] <luqui> but I think svk uses svn on its backside

[05:50] <luqui> you can ask more at #svk

[05:50] <luqui> I'm just getting started with it

[05:50] <masak> sounds pleasant, in any case

[05:50] <luqui> the only trouble is installation

[05:51] <masak> oh :)

[05:51] <luqui> I couldn't install it until I got gentoo, which had a nice ebuild for it

[05:51] <masak> right now I

[05:51] <masak> am http://svk.elixus.org/?InstallingSVK

[05:51] <masak> I have FC3

[05:51] <luqui> maybe with the release of 1.0 installation has been made easier

[05:51] <masak> yum is happily working right now with subversion-perl

[05:52] <luqui> yum actually had that

[05:52] <luqui> ?

[05:52] <luqui> wow

[05:52] <masak> apparently

[05:52] <luqui> that was the main difference between FC2 and gentoo to me.  FC2 had about 1/3 of the packages I wanted, gentoo had 98%

[05:53] <luqui> is there an "FC3 unstable" or something like that

[05:53] <luqui> that has more packages, but which haven't been tested as much?

[05:54] <masak> dunno, I may have added a few repos to my list

[05:55] <masak> make is chugging away happily now

[05:55] <masak> this is so exciting!

[05:55] * luqui is currently building kdelibs

[05:55] <luqui> and has been for the past 30 minutes

[05:56] <masak> ah

[05:56] <luqui> but I suppose it's not as bad as ghc

[05:56] <masak> perlbot nopaste

[05:56] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[05:56] <luqui> ?eval say "moo";

[05:56] <evalbot6> Error: No compatible subroutine found: "&say" 

[05:56] <luqui> ?eval "moo";

[05:56] <evalbot6> 'moo' 

[05:56] <luqui> ?eval "moo".chars;

[05:56] <evalbot6> 3 

[05:57] <masak> I just got a test failure and a question "is this reasonable? [Yn]"

[05:57] <masak> hold on

[05:58] <luqui> ?eval "foo" ~~ /foo/

[05:58] <evalbot6> Parrot VM: PANIC: Out of mem! C file src/memory.c, line 45 Parrot file (not available), line (not available)  We highly suggest you notify the Parrot team if you have not been working on Parrot.  Use parrotbug (located in parrot's root directory) or send an e-mail to [email@hidden.address] Include the entire text of this error message and the text of the script that generated the error.  If you've made any modifications to Parrot, please describe them

[05:58] <pasteling> "masak" at 130.238.83.176 pasted "I got a test failure when trying to install svk" (10 lines, 338B) at http://sial.org/pbot/10870

[05:58] <luqui> ack

[05:58] <masak> luqui: you crasched evalbot! you bastard ;)

[05:59] <geoffb> </lurk>masak, luqui: as I recall, svk uses *most* of SVN as its backend, but not the working copy library, which the SVK developers (clkao) don't like, and which is apparently a large part of the reason SVN is actually slower than SVK, despite the latter being written largely in Perl instead of C<lurk>

[05:59] <SamB> how do you include the text of a script like that?

[05:59] <masak> geoffb: ah, thx

[05:59] <SamB> I mean, you would have to include EVERYTHING that got fed to evalbot6 up to that point, wouldn't you?

[05:59] <QtPlatypus> luqui: regexes his briking in evalbot

[06:00] <QtPlatypus> SamB: I suspect it was I who killed evalbot :(

[06:00] <masak> QtPlatypus: why do you suspect that?

[06:01] <luqui> masak, the test failure looks reasonable, but go ask #svk

[06:01] * luqui & movie

[06:01] <masak> luqui: I'll go with "yes"

[06:01] <Darren_Duncan> fyi, r4465 gave these results with all the default settings and no parrot or perl 5: Failed 24/322 test scripts, 92.55% okay. 280/6143 subtests failed, 95.44% okay.

[06:01] <luqui> yeah, it's not like it's going to go: whoops, a bug, system "rm -rf /"

[06:02] <QtPlatypus> masak: I was testing if eval bot handled subs included in regexps.  It was working normally before then.

[06:03] <masak> w00t! I now have svk! :D

[06:04] <masak> QtPlatypus: so what went wrong?

[06:04] <QtPlatypus> It spat that error.

[06:04] <masak> yes :) but why?

[06:05] <QtPlatypus> I suspect that my code tickeled a bug in the parrot based regex parser.

[06:08] <Darren_Duncan> question: I'm already running svn and it seems to work fine ... is there any reason for me to switch to svk?

[06:09] <obra>  do you ever work on multiple branches or work without a net connection?

[06:09] <obra> do you work with Large source trees?

[06:09] <obra> Of the answer to any of these questions is "yes", then svk may be an amazing win for you.

[06:09] <obra> Also "do you hate .svn directories?"

[06:10] <luqui> "do you like ketchup on fries?"

[06:11] <Darren_Duncan> currently my answer to all 4 of those questions is 'no'

[06:11] <Darren_Duncan> all 5 that is

[06:11] <Darren_Duncan> that said, I may want to work on multiple branches in the future

[06:11] <obra> Oh. do you ever want to keep local commits to repositories you don't have write access to?

[06:12] <Darren_Duncan> I haven't needed to yet

[06:12] <obra> ok

[06:12] <Darren_Duncan> to be honest, Pugs is the only project I've used svn with

[06:12] <obra> What do you use for other projects?

[06:12] <Darren_Duncan> my own projects I don't use any formal version control with 

[06:13] <Darren_Duncan> I treat each CPAN release like a check-in in a way

[06:13] <Darren_Duncan> and otherwise just make tarred copies of intermediate steps as something to revert to

[06:13] <Darren_Duncan> but I'm also the sole author

[06:13] <Darren_Duncan> I intend to use something like svn when I work on projects with multiple authors

[06:14] <Darren_Duncan> this is just a historical thing, not necessarily a good reason; the main good reason is simplicity

[06:15] <Darren_Duncan> my more immediate reason for the question was whether I should use svk with Pugs

[06:15] <Darren_Duncan> but I don't yet consider that to be 'Large'

[06:16] <Darren_Duncan> when my SQL-Routine/Rosetta project becomes good enough that multiple people *want* to author it, I'll probably move it into version control

[06:17] <Darren_Duncan> speaking of SQL-Routine etc, I have an ambitious goal for it to be "done" by the end of June ... as in end-to-end useful in daily work

[06:18] <masak> w00t! svk works! :)

[06:19] <Darren_Duncan> this includes a new SQL-Routine-SQLParser and Rosetta-Emulator-DBI modules, with which any other Perl programs written to use DBI or one of its wrappers can "just work" with Rosetta etc, which means more seamless portability across databases

[06:19] <Darren_Duncan> I'll return tomorrow, good night!

[06:20] <nothingmuch> morning

[06:23] <masak> morning

[06:26] <svnbot6> r4469, putter++ | hw2005.txt: minor grammar tweaks.  mostly tenseand plurality agreement, missing commas, preposition selection, breaking ;-ed sentences.  Nifty paper.

[06:45] <ingy> hola

[06:45] <svnbot6> r4470, putter++ | rules_bootstrap: added "compiling rules into Parsec combinators" plan mentioned in hw2005.txt.

[06:46] <ingy> nothingmuch: are you going to the hackathon?

[06:46] <nothingmuch> ingy: yes

[06:46] <nothingmuch> why do you ask?

[06:46] <ingy> nothingmuch: do you know if there is broadband there?

[06:46] <nothingmuch> got something interesting for me to try?

[06:46] <nothingmuch> iirc there isn't

[06:47] <ingy> hmmm

[06:47] <ingy> well that will certainly suck

[06:47] <nothingmuch> it will

[06:47] <ingy> grrr

[06:47] <nothingmuch> but it will also make us seem super secret too

[06:48] <ingy> but I already seem sooper sekrit :P

[06:50] * Aankhen`` curses the fact that reinstalling Windows means reconfiguring his entire development environment, which in turn means figuring out what he had done to his development environment in the first place.

[06:50] <ingy> Aankhen``: sadness

[06:50] <nothingmuch_> sorry

[06:51] <nothingmuch_> ingy: you said "grr", then I got nothing

[06:51] <Aankhen``> Indeed.

[06:51] <Aankhen``> But on the bright side, my system's now blazingly fast. :-D

[06:51] <ingy> 23:48 < ingy> but I already seem sooper sekrit :P

[06:52] <Aankhen``> (for someone who played Doom 3 at 20 FPS at 640x480, Low Quality, 55 FPS at 1024x768, High Quality, 4xAA and 8xAF is quite fast enough =)

[06:52] <ingy> fyi I said "grrr"

[06:52] <ingy> I feel grrr8

[06:52] <ingy> like Tony

[06:53] <nothingmuch_> maybe we can get a temp solution if we all chip in some $$$?

[06:54] <ingy> well we'd better bring it up soon

[07:05] * Aankhen`` wonders whether HTTP::Message would be better as a role rather than a class.

[07:19] <Aankhen``> Heh.  I'm looking at the latest messages in the "reduce metaoperator on an empty list" thread, and Google popped up "4.1 Naming and binding" from www.python.org in the ads.

[07:19] <ingy> sweeet

[07:20] <Aankhen``> Most of the time, though, messages on p6l and p6c bring with them ads for mod_perl... usually this: "Introduction to mod_perl (part 5): More Perl Basics".  Freaky.

[07:23] <pdcawley> Oh ghod. Not the reduce metaoperator thread.

[07:23] <pdcawley> I'm really hoping it'll've died out by the time I write the next summary.

[07:23] <lathos> pdcawley: Incidentally, Buscador is up and feeding on p6*

[07:23] <lathos> http://buscador.simon-cozens.org/

[07:24] <pdcawley> Buscador?

[07:25] <crysflame> heh

[07:25] <crysflame> er, ww

[07:25] <crysflame> hi

[07:25] <crysflame> lathos++ # buscador

[07:27] <nothingmuch_> lathos: what does buscador do differently?

[07:31] <autrijus_> greetings from APW!

[07:32] <QtPlatypus> Greetings.

[07:32] <lathos> Quite a lot. It keeps track of messages over multiple lists, it can arrange threads in several different ways, it keeps track of people from different email addresses, it gives you syndication feeds for everything...

[07:32] <lathos> It separates off attachments in a friendly way.

[07:32] * QtPlatypus prefs the nntp interface.

[07:33] <lathos> http://buscador.simon-cozens.org/name/view/529 is an example.

[07:35] <ingy> hi autrijus-san

[07:36] <autrijus_> greetings ingy-san.

[07:36] <ingy> :)

[07:36] <svnbot6> r4471, autrijus++ | * ApocNow: Content's mostly there.

[07:36] <autrijus_> I learned about latex presentation (beamer) today.

[07:36] <autrijus_> it makes beautiful presentations.

[07:36] <ingy> I'm totally rethinking Perldoc

[07:36] <autrijus_> however \latex{} is much more verbose than `Kwid`

[07:37] <autrijus_> so I'm going back to Kwid/Spork for my talk. :)

[07:37] <ingy> ;)

[07:37] <pdcawley> Is it easy to get at Opentype goodness in LaTeX yet?

[07:37] <autrijus_> no idea :)

[07:38] <ingy> autrijus_: how do you feel about a hackathon without internet?

[07:38] <lathos> Also http://buscador.simon-cozens.org/mail/lurker/20050609020056.8600.qmail@lists.develooper.com

[07:38] <knewt_> autrijus_: committing again already eh :)

[07:40] <autrijus_> knewt_: :)

[07:40] <autrijus_> ingy: completely without? that'd be bad

[07:40] <autrijus_> hm. anyone have tuits to chase test failures about the undef->undefine change?

[07:41] <autrijus_> and maybe grep the t/ and examples/ a bit to change undef($x) to undefine($x)

[07:48] <autrijus_> hm. come to think about it, maybe delay this after the release

[07:48] <svnbot6> r4472, autrijus++ | * make http-server.p6 more readable

[07:48] * autrijus_ does a local branch for s/undef/undefined/

[07:48] <autrijus_> undefine, even

[07:50] <knewt_> ah, not too bad. only 16 commits since i synced up before flying yesterday. but then, autrijus_ /has/ been busy flying over here :)

[07:53] <svnbot6> r4473, autrijus++ | * hw2005 - review from Nicholas.

[07:54] <pdcawley> Are the reviews collected anywhere?

[07:56] *** Aankh|Clone is now known as Aankhen``

[07:57] <knewt_> autrijus_: do you have on a black t-shirt with a camel on it?

[08:01] <autrijus_> knewt_: yes!

[08:01] <svnbot6> r4474, autrijus++ | * further review comments from Allison.

[08:01] <svnbot6> r4473, autrijus++ | * hw2005 - review from Nicholas.

[08:01] <autrijus_> pdcawley: they are collected in my inbox... they are not public

[08:01] <autrijus_> but I mostly just applied their unidiff patches

[08:01] *** integral_ is now known as integral

[08:01] <autrijus_> pdcawley: care to review the paper for me? :)

[08:02] * pdcawley wonders why feather's zsh will only use C-h to delete stuff.

[08:02] <autrijus_> the deadline for submission is tomorrow :-/

[08:02] <pdcawley> autrijus: I've just skimmed it, I'll give it another read later.

[08:02] <autrijus_> pdcawley: danke!

[08:02] <autrijus_> knewt_: where are you?

[08:03] <nothingmuch_> morning

[08:03] <autrijus_> yo nothingmuch_

[08:03] <nothingmuch_> err, morning autrijus

[08:03] *** nothingmuch_ is now known as nothingmuch

[08:04] <knewt_> autrijus_: orange shirt 1 back and 4 to the left

[08:06] <autrijus_> gotcha :)

[08:22] <nothingmuch> autrijus: how's Vienna?

[08:26] <autrijus_> nothingmuch: excellent weather

[08:26] <autrijus_> despite the forecasts

[08:29] <svnbot6> r4475, autrijus++ | * correct getc's use of adverbial function parameters

[08:44] <autrijus_> sri_: you around?

[08:44] <svnbot6> r4476, scook0++ | * hw2005: 'et al.' fixes & some 80-char reflowing

[08:44] <svnbot6> r4477, autrijus++ | * hw2005 - more reviews from shapr.

[08:47] <Juerd> geoffb: Yes

[08:48] <nothingmuch> autrijus: did you get my parsec musings?

[08:48] <autrijus_> nothingmuch: no. where/

[08:48] <nothingmuch> one sec

[08:48] <autrijus_> I'm out of battery... 0%

[08:48] * autrijus_ runs out to get eletricity

[08:49] <autrijus_> yay, just in time

[08:49] <pasteling> "nothingmuch" at 212.143.92.226 pasted "using parsec to make pesto" (6 lines, 387B) at http://sial.org/pbot/10873

[08:49] <autrijus_> <- glad that I left the room before it starts to beep real loud

[08:50] <nothingmuch> what room?

[08:50] <autrijus_> the apw conference room

[08:50] <autrijus_> the APW is underway

[08:50] <nothingmuch> oh!

[08:50] <nothingmuch> then don't let me bother you

[08:50] <autrijus_> nah, that's fine

[08:50] <autrijus_> parsec can handle non-Char types

[08:50] <autrijus_> that you know

[08:51] <autrijus_> so of course it can match trees

[08:51] <nothingmuch> the problem is how to make it convert it's matching paradgim

[08:51] <nothingmuch> so that it does backtrack,

[08:51] <nothingmuch> and that many shapes of a grammer can match

[08:51] <nothingmuch> but that some are better than others

[08:52] <autrijus_> well, you can have the matches return a weighted thing

[08:52] <autrijus_> and sort by weight

[08:52] <nothingmuch> right 

[08:53] <autrijus_> that won't be hard actually

[08:53] <autrijus_> just two lines or so

[08:53] <nothingmuch> but i need to prune the match space very aggressively

[08:53] <autrijus_> yeah, so you need nondet

[08:53] <autrijus_> you can chase http://haskell.org/hawiki/NonDeterminism and links

[08:53] <autrijus_> it's a well known design

[08:53] <nothingmuch> okay, i'll keep thinking about it

[08:53] <nothingmuch> when harrorth is done I'll try to tackle that next

[08:54] <autrijus_> k

[08:56] <nothingmuch> beh, fucking network

[09:00] <q[pdcawley]> Mmm... nondeterministic programming...

[09:01] <clkao> autrijus_: do you happen to have my svk slides? iirc you cped them for me to do a presentation somewhere

[09:01] <q[pdcawley]> Shame that my call_cc implementation doesn't work or I'd have the bones of NonDet programming for Perl 6 implemented by now.

[09:02] <xerox> AMB ?

[09:05] <autrijus> clkao: can't find it easily

[09:05] <autrijus> q[pdcawley]: uh?

[09:05] <autrijus> q[pdcawley]: I can give you callcc for perl6 in pugs

[09:06] <nothingmuch> is q[] a cult?

[09:38] <q[acme]> nothingmuch: yes

[10:14] <nothingmuch> what is the cult about?

[10:20] <q[acme]> about non-globally-unique nicks

[10:20] <nothingmuch> ooh, wow

[10:21] <nothingmuch> i would join, but i'm not sure i want to

[10:24] <lathos> I'm not sure you need to. :)

[10:27] *** q[acme] is now known as acme

[10:28] * theorbtwo is glad to say that he's never come across another 'theorbtwo' spelt as such.

[10:29] <clkao> q[acme]: the other acme was slashdotted yesterday

[10:30] <acme> i noticed - i get a lot of spam too!

[10:31] <pjcj> I suspect that's a mistake and the spammers meant to send it to the other chap

[10:31] <pjcj> you should let them know

[10:55] <autrijus> yay, finally got contents done

[10:55] <svnbot6> r4478, autrijus++ | * Content and formatting foreeze for apocnow

[10:55] <autrijus> 30 minutes left

[10:55] <autrijus> time to google image

[10:56] <xerox> 30 mins left to.. ?

[10:56] <autrijus> the Perl 6 track of Austrian Perl Workshop

[10:58] *** Aankh|Clone is now known as Aankhen``

[11:03] <xerox> Any live audio/video feed? :)

[11:08] <q[pdcawley]> xerox: Just watch the SVN logs...

[11:12] <autrijus> heh :)

[11:12] <autrijus> no, I don't think there's one

[11:12] <autrijus> but it's broadcasted to the FPW

[11:12] <autrijus> so it should be recorded somewhere

[11:40] <autrijus_> hey chip-san

[11:47] <Aankhen``> Woo hoo!  No more slow down while compiling Pugs.AST.Internals!

[11:47] <Aankhen``> I wub my new processor. :-D

[11:49] <autrijus_> new processor++

[11:49] <autrijus_> how good is it?

[11:49] <Aankhen``> Works great so far. =)

[11:49] <Juerd> How bad was your previous? :)

[11:50] <Aankhen``> On my old processor, I could barely do anything else while compiling Pugs, especially Pugs.AST.Internals.

[11:50] <Aankhen``> Everything would freeze up.

[11:50] <Aankhen``> Now, there's absolutely no slowdown -- everything is as responsive as ever.

[11:50] <Aankhen``> HyperThreading++

[11:51] <q[pdcawley]> What's your new processor?

[11:51] <Aankhen``> Remind me to measure the time...

[11:51] <Aankhen``> Intel Pentium 4 630.

[11:51] <Aankhen``> (3.0 GHz., HT, 32/64-bit ready, 2 MB cache)

[11:52] <q[pdcawley]> Shiny!

[11:52] <Aankhen``> Literally -- I got a new case too. =)

[11:52] <autrijus_> very shiny!

[11:53] <Aankhen``> And the guy threw in a nice 430W CoolerMaster power supply for no extra charge.

[11:54] <Aankhen``> It's fun to watch the test scripts being run... I can't even see the individual tests, it just flashes a number and says "ok", then moves on to the next one. :-D

[11:54] <Aankhen``> I can't wait to see what happens on the rules tests, though. :-P

[11:55] <autrijus_> :)

[11:55] * Aankhen`` goes to see what happens when he starts Doom 3.

[11:58] <Aankhen``> A nice and steady 45 FPS. =)

[11:59] <Aankhen``> The 1 GB of RAM probably helped, come to think of it. :-P

[11:59] <Aankhen``> Ah, if only I had five bucks for every smiley I typed...

[12:05] <autrijus_> I hope I can have access to that as a laptop :)

[12:10] <Juerd> 9 different users are logged in on feather, some run irssi, some use editors - the load is 0.00 :)

[12:11] <Limbic_Region> hey autrijus_ - how is your net access ATM?

[12:19] <webmind> Juerd, no one is using pugs? :)

[12:19] <Juerd> webmind: Not many

[12:19] <Juerd> webmind: And not much

[12:20] <autrijus_> Limbic_Region: passable

[12:22] <webmind> Juerd, well.. I guess most of the coding is typing anyway

[12:36] <svnbot6> r4479, autrijus++ | * images part done for apocnow!

[12:38] <autrijus_> whew.

[12:38] <autrijus_> http://pugscode.org/

[12:38] <autrijus_> click on "APW slides" from left

[12:40] <Juerd> autrijus_: slide12c

[12:40] <Juerd> autrijus_: s:0/@h/%h/

[12:41] <integral> hmm, what mac browser has a full screen mode?   Opera?

[12:41] <autrijus> right.

[12:41] <autrijus> good catch

[12:41] <Limbic_Region> autrijus - in that case, if you get some free time could you take a look at http://perlmonks.org/index.pl?node_id=464502 and http://perlmonks.org/index.pl?node_id=366280

[12:41] <autrijus> I'm going to speak in 3 mins

[12:41] <Limbic_Region> tall_man (a pretty smart guy) thinks he has found a bug

[12:42] * Limbic_Region just can't make heads or tails of it

[12:42] <Limbic_Region> oh - well have fun ;-)

[12:42] <Aankhen``> integral >> Opera does have a full screen mode, assuming it's available for the Mac. :-)

[12:42] <Limbic_Region> break a leg as they say

[12:42] <integral> Aankhen``: pity it's not very macish ;-)

[12:42] * Aankhen`` shrugs.

[12:43] <Aankhen``> Luckily I'm not inflicted with Mac OS-itis. =)

[12:43] <Aankhen``> Apple does return the favour though... have you seen iTunes on Windows?

[12:43] * integral hasn't

[12:43] <Aankhen``> It's bloated, slow, ugly, and badly behaved.

[12:43] <integral> heh

[12:43] <Juerd> autrijus_: slide20b - I thought there were no parens around the ;; part of a loop loop?

[12:44] <Aankhen``> I'm sure you could say the same about Opera on the Mac. ;-)

[12:46] <lumi> Opera has fullscreen on mac

[12:47] * Aankhen`` wanders off.

[12:49] <Juerd> autrijus_: slide30c

[12:49] <Juerd> autrijus_: ('a'..'c') 􏿽xBBx􏿽xAB 3

[12:49] <Juerd> autrijus_: Shouldn't that be just >>x, as there is no array on the RHS?

[12:57] <integral> lumi++; thanks!

[13:13] <Limbic_Region> oh - I think I finally get the bug tall_man was trying to point out

[13:13] <Limbic_Region> I have seen it myself but thought it was that way by design

[13:14] <Limbic_Region> if you have a named parameter but invoke the sub as though it were positional - it shouldn't automatically morph for you should it?

[13:14] <Limbic_Region> I assumed the answer was yes - but apparently tall_man doesn't think so

[13:14] <Limbic_Region> for instance

[13:15] <Limbic_Region> ?eval sub bar ( $foo) { $foo } bar(3);

[13:15] <evalbot6> \3 

[13:15] <Limbic_Region> tall_man is saying that for that to do the right thing, I should have had to call bar as bar( foo => 3 )

[13:15] <osfameron> why \3 rather than 3 ?

[13:15] <Limbic_Region> ?eval sub bar ( $foo) { $foo } bar(foo => 3);

[13:15] <evalbot6> \3 

[13:16] <Limbic_Region> that part I don't know osfameron, but it doesn't have anything to do with the bug

[13:16] <osfameron> true, sorry

[13:16] <Limbic_Region> grrr

[13:16] <Limbic_Region> my plus symbol is broke

[13:17] <Limbic_Region> would you mind trying those two for me again

[13:17] <Limbic_Region> only in the sub signature make it plus$foo

[13:17] <osfameron> ?eval sub bar (+$foo) { $foo } bar(foo => 3);

[13:17] <evalbot6> \3 

[13:18] <Limbic_Region> and now the other way? where bar is just called with bar($foo)

[13:18] <osfameron> ?eval sub bar (+$foo) { $foo } bar(3);

[13:18] <evalbot6> \3 

[13:18] <Limbic_Region> yeah

[13:18] <Limbic_Region> that probably shouldn't work

[13:18] <osfameron> why not?

[13:18] <Limbic_Region> I thought it was by design but apparently not

[13:19] <Limbic_Region> $foo is a named parameter

[13:19] <Limbic_Region> it is magically becoming a positional

[13:19] <osfameron> I thought that was designed

[13:19] <osfameron> it's to prevent you from having to do 

[13:19] <osfameron> my ($foo, $bar, $baz) = @_;

[13:20] <Limbic_Region> I am not sure you are understanding

[13:20] <Limbic_Region> in the sub signature - you can have, required, optional, named, positional, etc type variables

[13:21] <Limbic_Region> using named variables (which are optional unless marked as required)

[13:21] <Limbic_Region> you can place the variables in any order

[13:21] <Limbic_Region> so

[13:21] <Limbic_Region> sub bar ( plus$foo, plus$bar) { ... }

[13:21] <Limbic_Region> could be called as bar( bar => 3, foo => 2)

[13:21] <Limbic_Region> or bar( foo => 3, bar => 2 );

[13:22] <Limbic_Region> order doesn't matter

[13:22] <Limbic_Region> without the plus symbol - they are positional (meaning they have to come in order specified in signature)

[13:22] <Limbic_Region> what is happening in the bug

[13:22] <Limbic_Region> is a named parameter is becoming positional

[13:22] <osfameron> ah

[13:23] <Limbic_Region> if you say it is named then you really need to name it foo => 3

[13:23] <Limbic_Region> you can't just choose to leave off the name (3)

[13:23] <Limbic_Region> but pugs isn't b1tching

[13:23] <Limbic_Region> osfameron - do you have commit rights?

[13:24] <osfameron> Limbic_Region: nah, I mainly lurk

[13:24] <Limbic_Region> perlbot nopaste

[13:24] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[13:24] <Limbic_Region> ok - well I am going to come up with a bugtest and hopefully someone can commit for me - otherwise I will tonight

[13:24] <QtPlatypus> Has anyone tested my buggy code?

[13:30] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "Can someone with round tuits please commit this test as t/pugsbugs/named_2_positional.t after performing a sanity check" (14 lines, 384B) at http://sial.org/pbot/10879

[13:30] * Limbic_Region is off to a meeting now

[13:47] <mj41> perlbot: nopaste ?

[13:47] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[13:47] <wolverian> Limbic_Region: I'll take a shot at it.

[13:48] <pasteling> "mj41" at 147.229.221.107 pasted "1 2 or 2 2 ?" (16 lines, 134B) at http://sial.org/pbot/10881

[13:52] <wolverian> heh. Test.pm declares the description arguments as +$desc

[13:52] <wolverian> so that shouldn't work either as a positional

[13:52] <wolverian> but just about _all_ the tests use it as a positional

[13:53] <QtPlatypus> Can some people try out the code in http://sial.org/pbot/10867 and see if it causes there pugs to segfault.

[14:03] <svnbot6> r4480, wolverian++ | Named args as positionals test from Limbic_Region++

[14:05] <autark-jp> QtPlatypus: did not segfault here.

[14:06] <QtPlatypus> Odd.  What version are you using?

[14:06] <autark-jp> #4470

[14:09] <QtPlatypus> Me has r4459,  I'll see if upgrading helps.

[14:20] *** Odin-FOO is now known as Odin-

[14:28] <svnbot6> r4481, rootmj++ | + sub reset_params returns Void is export { %PARAMS = (); $IS_PARAMS_LOADED = 0; }

[14:44] <mj41> Src (pugs is 80% perl 6, so many ugly hacks, but you can change htdocs/* without server restart )http://wiki.kn.vutbr.cz/mj/attach/pugs/http-server/ 

[14:44] <mj41> Slow online demo http://a05-0612a.kn.vutbr.cz:8080/page.p6

[14:47] <domm> sorry, quick question

[15:25] <osfameron> ?eval sub avg { [+] @_ / @_.elems }  avg(3,5)

[15:25] <evalbot6> 1.0 

[15:25] <osfameron> !

[15:25] <osfameron> ?eval sub avg { ([+] @_) / @_.elems }  avg(3,5)

[15:25] <evalbot6> 4 

[15:25] <osfameron> phew

[15:30] <svnbot6> r4482, iblech++ | * docs/other/rules_bootstrap, t/pugsbugs/named_2_positional.t -- Usual svn props

[15:30] <svnbot6> r4482, iblech++ | * docs/talks/README: Added autrijus++'s "Apocalypse Now" talk.

[15:30] <svnbot6> r4483, iblech++ | docs/talks/README -- Oops, fix typo.

[15:34] <Juerd> Hmm

[15:34] <Juerd> How about [+: @_]

[15:34] <Juerd> :)

[15:34] <xerox> :+]

[15:34] <Juerd> No

[15:34] <Juerd> Must be prefix.

[15:34] <xerox> I was just smileying :(

[15:35] <Khisanth> ?eval [+: 1..10]

[15:35] <evalbot6> Error:  unexpected "[" expecting program 

[15:35] <osfameron> ?eval [+: 1,2,3]

[15:35] <evalbot6> Error:  unexpected "[" expecting program 

[15:35] <Khisanth> that doesn't work!

[15:35] <Juerd> Duh

[15:35] <Juerd> I just suggested it. Things don't get implemented within seconds from that.

[15:35] <Khisanth> but what advantage does it have?

[15:35] <osfameron> it's pretty

[15:36] <osfameron> and you don't need more disambiguating parens

[15:36] <Juerd> It makes it a non-listop

[15:36] <Khisanth> thought you meant that was an alternative :)

[15:36] <Juerd> (precedence wise)

[15:36] <Khisanth> [+| @_]? :P

[15:36] <Juerd> And I think it's clearer

[15:36] <Juerd> No |.

[15:36] <Juerd> | is used in infix operators that you'd reduce.

[15:36] <Juerd> : is not, afaik.

[15:36] <Khisanth> larry was right, everyone wants the colon

[15:37] <Juerd> Can we keep this all a technical discussion?

[15:37] <Juerd> It's not about wanting the colon.

[15:37] <Juerd> It's about lack of alternatives, where a colon would work and even look nice.

[15:37] <Khisanth> actually I do agree with all the stuff you have said

[15:37] <integral> what if I, as a haskell user, like to name my custom infix operators things like :+: ?

[15:38] <Juerd> integral: You'd get very pissed.

[15:38] <Khisanth> integral: back into the hell you were in with source filters?

[15:38] <integral> bah! :-)

[15:38] <Juerd> =:= is a problem too.

[15:39] <Khisanth> integral: but if that is the case you would run into that problem ... oops you can redefine the [:] as well can't you? :P

[15:39] <integral> Juerd: is a delimiter other than whitespace needed?

[15:39] <Khisanth> of course you would end up with your own custom languages nobody can read

[15:39] <Juerd> integral: Yes, because [] creates arrays too.

[15:39] <integral> err, and doesn't this have problems with [] creating arrays?

[15:39] <Juerd> It has to be currently invalid syntax.

[15:40] <integral> I thought the only reason [] could be used for reduce was that *only* an operator could be in it, so it's very unambiguous?

[15:40] <Juerd> integral: There's absolutely no difference between [op] and [op:, parse wise.

[15:40] <Juerd> Longest match wins.

[15:40] <Juerd> That's why ~ doesn't clash with ~~.

[15:41] <integral> hmm

[15:41] <osfameron> but it's then visually ambiguous because it looks like it contains an array

[15:41] <Khisanth> osfameron: doesn't seem like a problem if you are used to reading from left to right

[15:43] <osfameron> maybe not, but if you see something ending ...1,2,3], it could be confusing.  Anyway, no longer a convenient "pill"

[15:43] <Juerd> All true.

[15:51] <svnbot6> r4484, iblech++ | undef(...) is now undefine(...) (see

[15:51] <svnbot6> r4484, iblech++ | http://groups.google.com/groups?threadm=20050601002444.GB32060@wall.org).

[15:51] <svnbot6> r4485, iblech++ | ext/Test-Builder/t -- unTODO four succeeding tests.

[16:00] <QtPlatypus> I beleave there is a metaoperator or metatinfix thing like postfix and infix.

[16:00] <svnbot6> r4486, iblech++ | t/rules/from_perl6_rules/charset.t -- Make it compile again.

[16:00] <svnbot6> r4487, iblech++ | Make while.t parse again, too.

[16:07] <svnbot6> r4488, iblech++ | ext/CGI/t/util.t -- Make it parse again, too. Now all tests should at least

[16:07] <svnbot6> r4488, iblech++ | parse again. :)

[16:08] <xerox> One gets multiple `++'s writing long comments, yay ;)

[16:09] <PerlJam> xerox: and that's why bot karma is relatively useless.

[16:12] <corneli> hi! im new around here - is there a doc somewhere to check what features of perl6 are available in pugs? i want to help!

[16:16] <PerlJam> corneli: Start at http://www.pugscode.org/ and go from there.

[16:16] <PerlJam> corneli: checkout a copy of pugs and start playing.

[16:17] <corneli> PerlJam: i have a copy of pugs... just don't know what I can play with :)

[16:17] <PerlJam> corneli: Well, what do you want to play with?

[16:17] <PerlJam> do you know haskell?  

[16:17] <PerlJam> do you know perl5?

[16:18] <corneli> nowhere enough haskell to help with the projects (never got to monads) - i do know perl5

[16:18] <PerlJam> have you read the AES?

[16:19] <corneli> not too closely - only picked a few features from here and there.

[16:21] <Limbic_Region> wolverian plusplus - thanks for adding the test for me

[16:21] <PerlJam> corneli: you might want to start by looking at the tests and try adding some of your own.

[16:21] <PerlJam> corneli: or maybe translate some perl5 to perl6 

[16:22] <PerlJam> corneli: or reading the AES and to find things that are specced but not yet in pugs and not yet tested for and write a test for them.

[16:24] <corneli> Great - Are the AES the formal sources for what should be working (even if it's not implemented now)? i had the feeling that pugs introduced at least some differences?

[16:25] <macGuy> hello

[16:26] <macGuy> if i have a foreach statement like foreach $_ (@_) and sometimes in the iteration i want to know which index i am looking at in @_ how can i tell

[16:27] <QtPlatypus> macGuy: Are you asking about perl6 or perl5?

[16:27] <macGuy> would there be any difference?

[16:28] <macGuy> im working on a project that would be executed on perl 5

[16:28] <QtPlatypus> Then you realy should ask in a perl channel.  perl6 is very diffrent to perl5 

[16:28] <macGuy> k

[16:52] <wolverian> Limbic_Region: you're welcome

[16:52] <wolverian> Limbic_Region: did you notice that most of the .t files depend on the wrong behaviour :)

[16:52] <PerlJam> corneli: The information path is like this (from least definitive to most definitive) Apocalypse, Exegesis, Synopsis, perl6-language.  

[16:54] <corneli> Great. THanks

[16:55] <PerlJam> And while that last one has the most up-to-date information, you often have to wade through the random ideas of other non-@Larry people to get it.

[16:57] <corneli> Looks like it's a very practical development effort

[17:00] <PerlJam> corneli: Areas that are currently in-the-works are better OO support and p6rules.

[17:00] <rjbs> Stupid question.  Can one hyper a bare block?

[17:01] <Limbic_Region> wolverian - yes

[17:01] <PerlJam> rjbs: and what would that mean exactly?

[17:01] <rjbs> @a >>{ $^a ~ " is with " ~ $^b }<< @b

[17:01] <Limbic_Region> wolverian - I think that was tall_man's point

[17:01] <wolverian> Limbic_Region: who?

[17:01] <PerlJam> rjbs: that looks like zip

[17:01] <Limbic_Region> http://perlmonks.org/index.pl?node=tall_man

[17:02] <rjbs> I thought zip would just produce the zipped list?

[17:02] <rjbs> I understand I could map {...} zip

[17:02] <wolverian> Limbic_Region: yeah.

[17:03] <wolverian> I guess one could s/// the files mostly to fix it

[17:03] <Limbic_Region> I am going to search for the portion in AES6 that says it is bad

[17:03] <Limbic_Region> perhaps add it to a comment

[17:03] <wolverian> well, it can't really be fixed until the test cases are fixed 

[17:04] <wolverian> or the whole test system goes kaboom

[17:08] <Limbic_Region> are there really that many tests using named parameters as positional - or am I missing something?

[17:08] <wolverian> maybe not - I only looked in pugsbugs

[17:09] <wolverian> hmm. builtins/arrays/ is full of it too.

[17:09] <Juerd> Who are at the APW? How are things there?

[17:09] <wolverian> Limbic_Region: $desc in ok() is named 

[17:09] <wolverian> and about all the tests I see use it as positional

[17:10] <Limbic_Region> Juerd - see http://use.perl.org/~cog/journal/25113

[17:10] <Limbic_Region> apparently there is an IRC channel to see what's going on

[17:10] <wolverian> a simple fix is to simply convert +$desc to $desc, as just about no-one uses the named interface

[17:11] <Juerd> I see

[17:11] <Juerd> Thanks

[17:11] <Limbic_Region> walang anuman

[17:11] <Limbic_Region> wolverian - not sure that's such a good idea either

[17:11] <wolverian> Limbic_Region: probably not, but the other option is the mass s///. do you have tuits for it? :)

[17:11] <Limbic_Region> probably should confirm that it needs to be fixed, fix it, and see what break

[17:11] <wolverian> of course it needs to be fixed. it's wrong behaviour.

[17:12] <wolverian> (as said by Larry)

[17:13] <Limbic_Region> wolverian - ok - found supporting doc

[17:13] <Limbic_Region> Larry didn't say that it needed to be fixed

[17:13] <Limbic_Region> he said that tall_man's original test was flawed

[17:14] <Limbic_Region> in fact there was a real problem, just not the one tall_man thought

[17:14] <Limbic_Region> he (tall_man) later /msg'd me with what he thought the real problem was

[17:14] <Limbic_Region> and he is right

[17:14] <Limbic_Region> from S06 "They can only be passed by name"

[17:14] <Limbic_Region> so if you feel like updating the test with a comment from S06 - be my guest

[17:15] <Limbic_Region> "Arguments that correspond to named parameters are evaluated in scalar context. They can only be passed by name, ..."

[17:17] <Limbic_Region> it is a bummer that many people incorrectly used named parameters then

[17:19] <Juerd> That makes sense, doesn't it?

[17:19] <Juerd> All non-slurpy arguments are evaluated in scalar context.

[17:19] <Juerd> And all slurpy arguments are evaluated in list context.

[17:19] <Juerd> Named arguments are never slurpy.

[17:20] <Juerd> It also makes sense in that the value of a pair is always scalar

[17:21] <Limbic_Region> Juerd - it makes perfect sense - Pugs is broke though

[17:21] <Limbic_Region> what's worse - is people have written numerous tests (according to wolverian) using the incorrect behavior

[17:21] <Limbic_Region> so fixing the bug will result in many tests breaking

[17:22] <Juerd> Interesting

[17:22] <Juerd> What were people thinking, I wonder in such cases.

[17:22] <Juerd> I can understand that there is a bug

[17:22] <Limbic_Region> probably copy/paste someone else's test

[17:22] <Juerd> But why were these tests written

[17:22] <Limbic_Region> that test had it wrong and people just changed variable names leaving in the plus symbol not knowing what it was for

[17:22] <Juerd> Or were they testing existing behaviour? That's always dangerous - to test after the fact.

[17:22] <Limbic_Region> that's just a guess btw - no idea if it represents reality

[17:23] <Juerd> Or is perhaps context not clear enough?

[17:23] <Limbic_Region> the scalar context isn't the part that I am hung up on

[17:23] <Limbic_Region> basically if you create a signature with a named parameter - you can call it without naming it

[17:23] <Juerd> Oh

[17:24] <Limbic_Region> Pugs magically turns it into a positional parameter

[17:24] <Juerd> Aha

[17:24] <Juerd> That is a bug then yes

[17:24] <Limbic_Region> I would demonstrate but my client eats plus symbols

[17:24] <Juerd> aww

[17:24] <Juerd> Have you tried '+', "+" and \+?

[17:24] <Juerd> Or can you not even enter them?

[17:24] <Limbic_Region> ' ', " ", \ 

[17:24] <Limbic_Region> it eats them

[17:25] <Juerd> I think it's a proxy that does this

[17:25] <Limbic_Region> cgi irc in case you were wondering

[17:25] <Juerd> Not CGI:IRC

[17:25] <SamB> really?

[17:25] <Juerd> For fun, try %25 and see if you get %25 or % out of it

[17:25] <Limbic_Region> SamB - really to what?

[17:25] <Limbic_Region> %25

[17:25] <Juerd> Weird.

[17:25] <SamB> maybe the CGI is a broken?

[17:25] <Limbic_Region> Juerd - I don't think it has anything to do with a proxy since it works fine everywhere else

[17:26] <Juerd> I doubt that the CGI is broken. CGI:IRC is very popular and the bug would have been noticed and fixed long

[17:26] <Juerd> It could be an old CGI:IRC.

[17:26] <Limbic_Region> possible

[17:27] <Limbic_Region> I am reading the FAQ now

[17:28] <Juerd> Can you visit arbitrary URLs?

[17:28] <Juerd> I've installed cgiirc on feather, to see what it'd do

[17:28] <Limbic_Region> yes

[17:28] <Juerd> Let's see how this thing is configured first

[17:31] <juerd_cgi> hello!

[17:31] <juerd_cgi> plus:  

[17:31] <Juerd> Hm

[17:31] <Juerd> Stupid thing!

[17:31] <Juerd> BUT - I can debug this one :)

[17:32] <Limbic_Region> I should debug too but I only need it at work (where I can't ssh to the machine it is residing on)

[17:32] <Limbic_Region> at home, I don't think to do that since I can use a real client

[17:34] *** Aankh|Clone is now known as Aankhen``

[17:34] <Limbic_Region> Juerd - once you get it fixed I will just use feather if you don't mind

[17:34] <Juerd> ## The clever regexp bit is from cgi-lib.pl

[17:34] <Juerd> Oh god.

[17:34] <Juerd> They took something "clever" from cgi-lib.pl

[17:34] <Juerd> No wonder it's horribly broken.

[17:35] <Juerd> Not tomention the indenting.

[17:35] * Juerd removes the s/\+/ /g line.

[17:35] <Juerd> How the HELL does this *work*, anyway?

[17:35] <Juerd> map { s/\+/ /g; ... } split(...);

[17:36] <Juerd> Tell me - how does that s/// mutate a read only $_?

[17:36] <Juerd> Sure, this worked in perl 4 and early 5s

[17:36] <Juerd> But how can this work with current perl?

[17:36] <Juerd> Obviously it works.

[17:37] <juerd_cgi> Hi again

[17:37] <juerd_cgi> plus: +

[17:37] <juerd_cgi> hurrah.

[17:37] <Limbic_Region> yeah

[17:37] <Limbic_Region> what's the url?

[17:38] <Limbic_Region> oh - please please please tell me it is running on port 80?

[17:38] <juerd_cgi> It is

[17:39] <juerd_cgi> But I want a way to avoid that this is used by anyone

[17:39] <juerd_cgi> While providing all users with access

[17:39] <juerd_cgi> So I'm going to ssl-ify this first

[17:39] <juerd_cgi> Which I've done only one time before

[17:39] <juerd_cgi> Can take a while.

[17:39] * Limbic_Region doesn't have a feather account

[17:39] <Limbic_Region> you doing a self-signed certificate?

[17:40] <juerd_cgi> No, CA-cert

[17:40] <svnbot6> r4489, iblech++ | t/ -- s/undef/undefine/ as appropriate

[17:40] <juerd_cgi> And that feather account will be arranged if you send me an email requesting it

[17:41] <Limbic_Region> right - but your CA-cert, is that going to be self-signed?

[17:41] <juerd_cgi> It's going to be signed by cacert, I hope :)

[17:41] <Limbic_Region> ok - but I won't actually need to log in right?  Since I couldn't do that from work anyway

[17:41] <juerd_cgi> Otherwise I don't see the point.

[17:41] <juerd_cgi> You would need to log in via ssl, http-auth

[17:41] <juerd_cgi> You can visit gmail, so you can visit https

[17:41] <Limbic_Region> oh - didn't realize cacert was an organization - since ca = certificate authority

[17:42] <Limbic_Region> I normally self-sign my ca and then sign what is needed since I don't do business with anyone that doesn't trust me

[17:42] <Limbic_Region> let me know when/if you get it set up and if you need anything from me (besides a acct request which I will send momentarily)

[17:46] <svnbot6> r4490, iblech++ | t/ -- More s/undef/undefine/ (this time I used a grep to find undef(...)s

[17:46] <svnbot6> r4490, iblech++ | instead of relying on all-skipped tests as shown by the smokes).

[17:46] <svnbot6> r4491, iblech++ | ext/ -- s/undef/undefine/, too

[17:46] <svnbot6> r4491, iblech++ | util/perl6.vim -- Highlight undefine.

[17:47] <geoffb> morning all

[17:48] * geoffb mutters venomously about video drivers crashing his X session on a regular basis

[17:49] <Limbic_Region> geoffb - you don't use named parameters as positional in tests you write do you?

[17:49] * geoffb blinks

[17:50] <geoffb> Ummm, I don't think I'm the one to talk to.

[17:50] <geoffb> I've seen discussions about that, but I stayed out of them

[17:50] <Limbic_Region> http://svn.openfoundry.org/pugs/t/pugsbugs/named_2_positional.t

[17:50] <Limbic_Region> well - when I first started writing tests I copy/pasted from an existing one

[17:51] <Limbic_Region> so I may have done it (initially) without even knowing

[17:51] <Limbic_Region> apparently there are going to be a number of tests that break once this bug is fixed

[17:51] * Limbic_Region is just trying to make people aware

[17:52] <geoffb> ah

[17:52] <geoffb> Well, I don't think so.

[17:52] <geoffb> My big hurting place is the fragility of use ...--perl5

[17:53] <geoffb> And unfortunately in trying to test for it, I just recurse into issues with Test.pm, and issues with use of normal P6 modules, and so on.

[17:54] <geoffb> And the fact that for some annoying reason, code is not parsed the same interactively as from a file.

[17:54] <vel> hi all

[17:54] <geoffb> evalbot6, sure, I can understand that there's some sops to safety there, but pugs in interactive mode should be damn near identical to pugs working on a file.

[17:55] <geoffb> </rant>

[17:55] <vel> can someone help me with chomp in perl 6?

[17:55] <Limbic_Region> vel - I believe it is still mostly unspecced

[17:55] <Limbic_Region> what specifically do you need to know?

[17:56] <ninereasons> autrijus, in http://perlcabal.org/~autrijus/apoc/slide62b.html#end 

[17:56] <ninereasons> autrijus, do you mean "those are the only two things that work now" ?

[17:56] <ninereasons> autrijus, or do you mean  "those are only two things that work now" ?

[17:56] <vel> just simple and shortest way to get rid of \n and parse csv file

[17:57] <Limbic_Region> vel - see http://svn.openfoundry.org/pugs/examples/games/hangman.p6

[17:57] <Limbic_Region> search for chomp

[17:57] <Limbic_Region> apply it to your situation

[17:57] <Limbic_Region> holler if it doesn't work as expected

[17:59] <vel> Limbic: oh, I did trust me. thanks for link...

[17:59] <geoffb> I love finding cool new hotkeys by accident

[18:00] <Limbic_Region> vel - when in doubt, checking examples/ t/ and ext/ will usually leading to finding what you are looking for (if Pugs has it yet that is)

[18:02] <vel> Lumbic: is that yoda speaking? ;)

[18:02] <svnbot6> r4492, ninereasons++ | Apocalypse_Now: fix a few typos

[18:03] <Limbic_Region> vel - it is me thinking and typing at the same time

[18:03] <Limbic_Region> I am currently reading autrijus's slides

[18:06] <ninereasons> autrijus, I think it might be clearer to say, "those are the only two programs in our examples/ that work now" (compile to Parrot)

[18:06] <ninereasons> autrijus, if that's true to your meaning.

[18:07] <Limbic_Region> I think that will come out in the presentation itself

[18:07] <Limbic_Region> basically it is "don't think this stuff just magically works"

[18:07] <Limbic_Region> "we have a very limited focused amount of functionality"

[18:08] <ninereasons> Limbic_Region, yes, but "that's the only two things that works" doesn't work.

[18:08] <Limbic_Region> "we are going to spend the next 10 days locked in a room with plenty of vices to knock the rest out"

[18:08] <Limbic_Region> ninereasons - keep reading though

[18:08] <ninereasons> Limbic_Region, purely a syntax issue here.

[18:09] <Limbic_Region> I agree - the word "only" conveys an absoluteness that isn't accurate

[18:11] <ninereasons> Limbic_Region, the number of "that's" and "two things" and "works" does not agree

[18:12] <ninereasons> I think he means "those are the only two things that work, right now" .  doesn't he?

[18:13] <Limbic_Region> "those are the only two programs in our examples/ that work now" # is what I believe is meant

[18:13] <Limbic_Region> I honestly don't think anyone at the presentation will get it wrong though

[18:13] <gaal> howdy

[18:13] <Limbic_Region> salutations gaal

[18:14] <geoffb> hi gaal

[18:14] <gaal> L~R, remember our brief discussion of want nad caller?

[18:14] <Limbic_Region> I saw your thread on the list

[18:14] <Limbic_Region> I read $larry's response

[18:14] <Limbic_Region> I was left wondering - WTF does that mean

[18:14] <gaal> :)

[18:15] <gaal> well, here's my interpretation

[18:15] <gaal> caller(?$kind, +$skip, +$level)

[18:16] <gaal> if you say :kind<Method>, you only look at methods

[18:16] <gaal> then you go to the skipth Method

[18:17] <gaal> there are other details to work out, but so much for selection.

[18:17] <Limbic_Region> gaal - I doubt you are going to make me understand

[18:17] <Limbic_Region> all that is important to me is that you (or someone else on the team) understands

[18:17] <gaal> as for want, it's much simpler than the A said.

[18:17] <Limbic_Region> which is tooooo bad

[18:18] <gaal> just look at the S verison

[18:19] <Limbic_Region> on list of things to do

[18:19] <gaal> (btw, even without any elaborations, we need some reworking to fix pugs' want, because Ctx doesn't have, for example, the number of wanted return values.)

[18:19] <gaal> (nor whether they are rw)

[18:20] <Limbic_Region> right gaal

[18:20] <Limbic_Region> which is the very specific thing I was trying to get fixed

[18:20] <Limbic_Region> so you could determine if you were in a void context or not

[18:20] * Limbic_Region wanders off for a bit

[18:21] <gaal> now, s06 doesn't specify the signature for want, so i suppose we can give it the same selection interface as caller, adn have want just delegate. that's the easy bit :)

[18:21] <gaal> oh, L~R, that much you *can* do today.

[18:21] <gaal> or should be able to, at least.

[18:21] <gaal> data Cxt = CxtVoid | CxtItem !Type | CxtSlurpy !Type

[18:23] <gaal> oh wait, you do get if we're in LValue context

[18:23] <gaal> that much can be useful

[18:23] <gaal> brb

[18:26] * Limbic_Region waits for gaal to return

[18:26] <gaal> back

[18:27] <wolverian> Limbic_Region: yes, that's the problem - people use Test::ok and others incorrectly. we can either fix Test::ok and friends which is the easy route (change named to positional) or mass change the .t files

[18:27] <wolverian> which will take some time probably

[18:27] <Limbic_Region> http://pugscode.org/talks/apw/slide30c.html#end

[18:27] <Limbic_Region> shouldn't that be >>xx<< there?

[18:28] <iblech> Limbic_Region: Is >>{...}<< in any of the AES? Wasn't able to find it...

[18:28] <wolverian> shouldn't that be »x, actually?

[18:29] <Limbic_Region> I am not even going to attempt unicode with this client

[18:29] <gaal> >>{...}<<       ? the vampire bat operator?

[18:29] <Limbic_Region> iblech - if it isn't in one of the AESs - it has definately been discussed on the list

[18:29] <iblech> Limbic_Region: Thanks, I'll google then

[18:29] <geoffb> wolverian, personally I'm thinking the positional usage of Test subs is a good thing.  When you've got a lot of very similar tests in a test file, positional calling cuts the clutter.

[18:30] <wolverian> geoffb: I agree.

[18:30] <gaal> L~R, so, does want not work at all for you?

[18:30] <Limbic_Region> gaal - want as a number and/or want.count

[18:31] <gaal> oh, well that you'll have to wait a bit for ;-)

[18:31] <Limbic_Region> so how else would you currently check for void context?

[18:31] <gaal> it returns show Ctx

[18:31] <gaal> which should say "void".

[18:32] <gaal> sorry, not show Ctx

[18:32] <gaal> just the string "Void"

[18:32] <gaal> see Pugs/AST/Internals.hs:1010 ish

[18:32] <Limbic_Region> you mean want returns show Ctx

[18:32] <Limbic_Region> let me try something then

[18:33] <gaal> more or less

[18:33] <Limbic_Region> ok - then your understanding and my example are in disagreement

[18:33] <gaal> hmmm, except that it doesn't work :)

[18:34] <Limbic_Region> perlbot nopaste

[18:34] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[18:34] <gaal> ./pugs -e sub x { say want } x();

[18:34] <Limbic_Region> right

[18:34] <gaal> says "List (Any)"

[18:34] <gaal> that's a bug then.

[18:34] <gaal> :)

[18:34] <Limbic_Region> right - http://perlmonks.org/index.pl?node_id=464377 is where I first found out

[18:34] <Limbic_Region> that's the second bug tall_man has uncovered

[18:35] <Limbic_Region> or rather - that was the first

[18:35] <Limbic_Region> the named parameters being morphed to position was the second

[18:35] <gaal> it oughta return an object that stringifies to "Void" in that case.

[18:35] <Limbic_Region> gaal - there are tests for want already though

[18:35] <Limbic_Region> so I didn't see where writing a new one was helping?

[18:36] <gaal> okay; i've however been working on caller, which despite what A06 says, isn't really much like want.

[18:36] <gaal> only the selection stuff might be

[18:36] <gaal> and anyway caller is used as a primitive for want

[18:37] <gaal> sooooo... we need tests for caller ;-)

[18:37] <gaal> likely, you could from pure perl code call caller, use the .sub result and query that to get all the info you could have gotten from want.

[18:38] <gaal> though that bit isn't 100% certain yet.

[18:39] <Aankh|Clone> Hrm.

[18:39] <Aankh|Clone> One-line C<class { ... }> declarations parse, but multi-line ones don't?

[18:39] *** Aankh|Clone is now known as Aankhen``

[18:41] <Limbic_Region> gaal - actually, looking at t/builtins/want.t  all the want tests that are using want() are todo

[18:42] <Aankhen``> Apparently multi-line class declarations do parse.  Ignore my previous statement.

[18:43] <pdcawley> ?eval class Array { method bibble { 42 } }; my @foo = (); @foo.bibble

[18:44] <evalbot6> 42 

[18:44] <pdcawley> Hurrah!

[18:44] <pdcawley> ?eval [].bibble

[18:44] <evalbot6> Error: No compatible subroutine found: "&bibble" 

[18:45] <pdcawley> ?eval class Array { method bibble { 42 } }; [].bibble

[18:45] <evalbot6> Error: No compatible subroutine found: "&bibble" 

[18:45] <wolverian> ?eval ref []

[18:45] <evalbot6> ::Array 

[18:46] <Aankhen``> ?eval method *Array::bibble () { 42 }

[18:46] <evalbot6> undef 

[18:46] <wolverian> hmm. do references not dispatch automatically yet?

[18:46] <Aankhen``> ?eval method *Array::bibble () { 42 }; [].bibble

[18:46] <evalbot6> Error: No compatible subroutine found: "&bibble" 

[18:46] <Aankhen``> ?eval method *Array::bibble () { 42 }; <a b c d e>.bibble

[18:46] <evalbot6> Error: No compatible subroutine found: "&bibble" 

[18:46] <Aankhen``> Bah.

[18:46] <pdcawley> ?eval my @foo = (); ref @foo

[18:46] <evalbot6> ::Array 

[18:46] <pdcawley> Hmm... time to write a test.

[18:46] <Aankhen``> ?eval method *Array::bibble () { 42 }; my @foo = (1, 2, 3, 4, 5); @foo.bibble();

[18:46] <Limbic_Region> ?eval method ::Array { method bibble { 42 } }; [].bibble;

[18:46] <evalbot6> 42 

[18:46] <wolverian> pdcawley++

[18:46] <evalbot6> Error: No compatible subroutine found: "&method" 

[18:47] <Aankhen``> ?eval method *Array::bibble () { 42 }; my @foo = (1, 2, 3, 4, 5); @foo.bibble();

[18:47] <evalbot6> 42 

[18:47] <Aankhen``> That works.

[18:47] <wolverian> Limbic_Region: heh, method ::Array?

[18:47] <pdcawley> Unless someone else wants to -- I'm slightly tied up.

[18:47] <Limbic_Region> wolverian - why not

[18:47] <Aankhen``> ?eval method *Array::bibble () { 42 }; my $foo = (1, 2, 3, 4, 5); $foo.bibble();

[18:47] <evalbot6> 42 

[18:47] * Limbic_Region WAS being silly

[18:47] <Aankhen``> Kewl.

[18:47] <pdcawley> Is ::Foo a symbol constructor then?

[18:47] <wolverian> pdcawley: it's a type.

[18:47] <pdcawley> ?eval ref ::Array

[18:47] <evalbot6> ::Class 

[18:48] <pdcawley> ?eval ref ::Bibblyplop

[18:48] <evalbot6> ::Type 

[18:48] <wolverian> see. :)

[18:48] <pdcawley> Heh.

[18:48] <integral> hmm, doesn't that mean I can get silent breakage?

[18:48] <pdcawley> Is there a 'symbol' type? I've got quite attached to them from playing with Smalltalk/Ruby

[18:48] <wolverian> what sort of?

[18:48] <integral> If I use ::Foo as a type variable, but then some module I load, loads a ::Foo

[18:48] <Aankhen``> ?eval class Foo { submethod BUILD ($self: ) { $self.baz = "quux"; say $self.baz; } method bar () { say ::?CLASS.new(); } } my $foo = Foo.new(); Foo.bar();

[18:48] <evalbot6> Error:  unexpected "{" expecting trait, ";" or end of input 

[18:49] <gaal> you can get anything you want in alice's restaurant, integral.

[18:49] <pdcawley> Allison's restaurant surely?

[18:49] <gaal> :)

[18:49] <Aankhen``> ?eval class Foo { submethod BUILD ($self: ) { $self.baz = "quux"; say $self.baz; }; method bar () { say ::?CLASS.new(); } }; my $foo = Foo.new(); Foo.bar();

[18:49] <evalbot6> Error:  unexpected "{" expecting trait, ";" or end of input 

[18:49] <integral> hmm!

[18:49] <Aankhen``> Bleh.

[18:50] <pdcawley> Do you need a ; between } and }?

[18:50] <wolverian> no.

[18:50] <Aankhen``> I dunno.

[18:50] <Aankhen``> I would have thought not.

[18:50] * Aankhen`` reduces the size.

[18:50] <pdcawley> And you can't 'say' anything with evalbot.

[18:50] <Aankhen``> Ah, right.

[18:51] <Aankhen``> ?eval class Foo { method bar () { ::?CLASS.new() } }; Foo.bar();

[18:51] <corneli> Was the zip(@a => 2, @b => 1) changed? is it only zip(@a;@b;...) now?

[18:51] <evalbot6> Error:  unexpected "{" expecting trait, ";" or end of input 

[18:51] <Aankhen``> ?eval class Foo { method bar () { Foo.new() } }; Foo.bar();

[18:51] <evalbot6> {obj:Foo} 

[18:51] <Aankhen``> Darn.

[18:51] <Aankhen``> ::?CLASS doesn't work.

[18:51] * Aankhen`` goes to check that his syntax is correct.

[18:51] <pdcawley> It's $?CLASS isn't it?

[18:52] <Limbic_Region> http://pugscode.org/talks/apw/slide40b.html#end

[18:52] <Limbic_Region> s/ot/of/

[18:52] <pdcawley> ?eval class Foo { method wibble { $?CLASS } }; Foo.new.wibble

[18:52] <evalbot6> \::Foo 

[18:52] <pdcawley> Seems so.

[18:52] <wolverian> hmm, why is it $?CLASS and not ::?CLASS?

[18:52] <pdcawley> Because it's variable like.

[18:53] <Aankhen``> I guess S12 is outdated then: (The current class may always be named as ::?CLASS even in anonymous classes or roles.)

[18:53] <pdcawley> ?eval class Foo is Array { }; class Array { method bibble { $?CLASS }}; Foo.new.bibble

[18:53] <iblech> wolverian: IIRC both ways are correct: $?CLASS is a Class object as a scalar variable, while ::?CLASS is a Class object as package name

[18:53] <evalbot6> \::Array 

[18:53] <wolverian> iblech: right.

[18:54] <gaal> ?eval ref Array

[18:54] <evalbot6> ::Class 

[18:54] <pdcawley> ?eval class Foo is Array { }; class Array { method bibble { $?CLASS }}; Foo.new.class

[18:54] <evalbot6> Error: No compatible subroutine found: "&class" 

[18:54] <pdcawley> ?eval class Foo is Array { }; class Array { method bibble { $?CLASS }}; Foo.new

[18:54] <evalbot6> {obj:Foo} 

[18:54] <pdcawley> ?eval class Foo is Array { }; class Array { method bibble { $?CLASS }}; ref Foo.new

[18:54] <evalbot6> ::Foo 

[18:54] <Aankhen``> iblech >> So ::?CLASS hasn't been implemented?

[18:54] <iblech> Yep.

[18:54] <Aankhen``> OK.

[18:55] <gaal> wait, if i write a func that accepts a class as an arg -- which serendipitously I AM JUST DOING, does hte signature have "::Class $kind" rather than "Class $kind"?

[18:55] <pdcawley> Class $kind

[18:56] <wolverian> gaal: Class is pretty certainly predeclared in Perl 6

[18:56] <pdcawley> But you'd call thing(::Whatever)

[18:56] <gaal> so why

[18:56] <gaal> ?eval Array

[18:56] <evalbot6> \{obj:Class} 

[18:56] <gaal> oops

[18:56] <gaal> ?eval ref Array

[18:56] <evalbot6> ::Class 

[18:56] <gaal> with the :: ?

[18:56] <pdcawley> Easier to read.

[18:57] <gaal> heh

[18:57] <gaal> ok

[18:57] <pdcawley> You *know* it's atype.

[18:57] <pdcawley> Same as why there's still Sigils.

[19:00] <svnbot6> r4493, rootmj++ | docs/talks/Apocalypse_Now.spork

[19:00] <svnbot6> r4493, rootmj++ | @h{'!'} @h.method -> %h{'!'} %h.method

[19:00] <pdcawley> ?eval sub foo { $?CALLER_CONTINUATION } ; foo

[19:00] <evalbot6> Error: Undeclared variable: "$?CALLER_CONTINUATION" 

[19:00] <pdcawley> Not implemented yet then. Bah.

[19:00] <iblech> It's &?CALLER_CONTINUATION

[19:00] <iblech> But it seems to have some bugs

[19:01] <pdcawley> ?eval sub foo { &?CALLER_CONTINUATION } ; foo

[19:01] <evalbot6> \sub {...} 

[19:01] <pdcawley> Full continuation?

[19:03] <iblech> Dunno

[19:04] <pdcawley> Right, I'll have a play.

[19:05] <wolverian> are there other kinds of continuatinos?

[19:05] <wolverian> s,no,on,

[19:05] <pdcawley> wolverian: There's it's poor relation, the 'escape continuation' which isn't really a continuation because you can only use it once.

[19:06] <pdcawley> Personally, I prefer to think of them as chocolate teapots, but I'm picky like that.

[19:08] <wolverian> chocolate teapots. heh.

[19:10] <nothingmuch> evening

[19:14] <geoffb> g'day

[19:14] <pdcawley> Arg, can't remember the rules for slurpiness in signatures. *@foo slurps the rest of the args right?

[19:14] <Aankh|Clone> Yes, pdcawley.

[19:18] * SamB wonders why in the world you would want to use the same continuation twice

[19:19] <svnbot6> r4494, iblech++ | t/operators/repeat.t -- unTODO a now suceeding :todo<bug> test.

[19:19] <svnbot6> r4495, Aankhen++ | * fixed a few parsing problems in HTTP::Message.

[19:19] <pdcawley> SamB: All sorts of reasons.

[19:19] <pdcawley> I'm writing some example code now.

[19:20] <SamB> all sorts of MUTABLE STATE THAT MAKES YOUR HEAD EXPLODE reasons?

[19:20] * integral thinks using the same subcontinuation twice is more useful more often

[19:20] <svnbot6> r4496, iblech++ | Implemented ::?CLASS, ::?ROLE (currently same as ::?CLASS), and ::?PACKAGE.

[19:20] <svnbot6> r4496, iblech++ | Aankhen``++

[19:20] <pdcawley> Writing it, and understanding how it works, can make your head explode. 

[19:20] <pdcawley> However, the kind of things you can do with full continuations can be a delight to *use*.

[19:22] <gaal> anyone remember which yapc movie it was that had the Meta joke?

[19:23] <rjbs> not one I've seen, I think.

[19:24] <gaal> oh

[19:24] <gaal> oscon movie :)

[19:24] <gaal> http://www.perl.org/oscon/2003/movies/truth/

[19:26] <awwaiid> yeah, reuseable continuatiosn rock :)

[19:28] <pdcawley> ?eval my $try = -> *@choices { if 1 { 10 } }

[19:28] <evalbot6> \sub {...} 

[19:28] <pdcawley> ?eval my $try = -> *@choices { if 1 { 10 } }; $try()

[19:28] <evalbot6> 10 

[19:30] * pdcawley boggles. How do I paste an extended lump of code in here?

[19:30] <wolverian> see /topic

[19:31] <gaal> perlbot nopaste

[19:31] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[19:32] <pdcawley> Ta.

[19:33] <pasteling> "pdcawley" at 217.146.110.1 pasted "Weird syntax error" (35 lines, 724B) at http://sial.org/pbot/10895

[19:34] <pdcawley> HTF can it not be expecting an 'i' after the opening brace of a code block?

[19:34] <gaal> that's just the parser not being suffiiently friendly.

[19:34] <gaal> the error is deeper in.

[19:35] <gaal> could it be you want &give_up := ?

[19:36] <Limbic_Region> oh yeah - parser errors are a PITA to debug

[19:36] <pdcawley> Wow. Now it's *really* breaking.

[19:37] <pdcawley> I could be wrong, but I *think* it's compiling now. But oh *my* is it throwing a spectacular error.

[19:38] <pasteling> "pdcawley" at 217.146.110.1 pasted "Huge syntax error" (4 lines, 7K) at http://sial.org/pbot/10897

[19:39] <gaal> that's a run time error

[19:39] <pdcawley> Indeedly.

[19:39] <gaal> not a syntax error :)

[19:40] <iblech> It seems you can't re-bind &subs.

[19:41] <pdcawley> And I still need 'sub' before sub blocks.

[19:41] <Limbic_Region> but not all sub blocks

[19:42] <pdcawley> And when in doubt, stick a ; on the end.

[19:42] <Limbic_Region> it is weird but sometimes omitting it works and sometimes it doesn't

[19:42] <pdcawley> Ah. Now I'm just getting a simple 'program failed' at... um... everywhere.

[19:43] <pdcawley> Ah. No, I understand that.

[19:43] <pdcawley> Seems &?CALLER_CONTINUATION doesn't work...

[19:43] <pdcawley> But we probably knew that.

[19:45] * pdcawley notes that the power of non-deterministic programming *still* blows his mind.

[19:47] <pdcawley> Hmm... thinking about this, I might be able to write 'choose' *without* needing a 'proper' continuation -- might be able to get away with 'return' in a pointy block.

[19:49] <iblech> That doesn't work yet -- t/pugsbugs/return_in_anonymous_subs.t still fails

[19:50] <pdcawley> Shame...

[19:50] <pdcawley> Wouldn't hurt to have an (in)sanity check to see if what I'm thinking of should actually work...

[19:53] <Aankhen``> Hmm.

[19:54] * Aankhen`` ponders HTTP::Message as a class versus HTTP::Message as a role.

[19:54] <pasteling> "pdcawley" at 217.146.110.1 pasted "Continuationless ND programming" (16 lines, 377B) at http://sial.org/pbot/10898

[20:05] <svnbot6> r4497, iblech++ | Make ::("?CLASS") etc. work (symbolic dereferentiation for type vars).

[20:06] <Aankhen``> Does a plain ::?CLASS work?

[20:07] <iblech> Yep, I implemented some minutes ago :)

[20:07] <iblech> pdcawley: Does this example work? Should it be checked in to example/?

[20:07] <pdcawley> I think it *should* work.

[20:08] <pdcawley> But I'm not sure Larry does. might have to implement it with a continuation -- when they work.

[20:08] <Aankhen``> iblech++ # ::?CLASS =)

[20:09] <iblech> Aankhen``++ # asking for it :)

[20:09] <pdcawley> From things Larry's said on p6l it sounds like 'pointy block return' should uses an escape continuation. So that code probably shouldn't work.

[20:10] <pdcawley> The continuation version *should* work though.

[20:10] <pasteling> "pdcawley" at 217.146.110.1 pasted "Continuationful ND programming" (19 lines, 412B) at http://sial.org/pbot/10900

[20:11] <pdcawley> That should work, if 'sub callcc (Code &block) { &block(&?CALLER_CONTINUATION) }' works.

[20:13] <pdcawley> Oh. Fuck. Just worked out why it's failing.

[20:13] <pdcawley> Breaking differently now...

[20:16] <gaal> um, how do i "return;" in p6?

[20:16] <svnbot6> r4498, iblech++ | t/var/symbolic_deref.t -- Tests for ::("...").

[20:16] <gaal> and not from haskell? :)

[20:16] <gaal> will return () work?

[20:17] <iblech> ?eval my $counter; sub { $counter++; return; $counter++ }; $counter

[20:17] <evalbot6> \undef 

[20:18] <iblech> Hrm

[20:18] <iblech> Err

[20:18] <iblech> ?eval my $counter; sub { $counter++; return; $counter++ }(); $counter

[20:18] <evalbot6> \1 

[20:18] <iblech> Seems to work :)

[20:18] <gaal> huh? i thought "return;" wasa  syntax error now?

[20:18] <Limbic_Region> gaal - when?

[20:18] <gaal> well, it must have been just unimplemented when i had asked :)

[20:19] <gaal> oh, but crap, i'm in prelude and i *can't* return

[20:19] <gaal> shucks.

[20:19] <Limbic_Region> ?eval my $counter; sub { $count = 3; return; $counter = 42; }.(); $counter;

[20:19] <evalbot6> Error: Undeclared variable: "$count" 

[20:19] <Limbic_Region> heh

[20:19] <Limbic_Region> ?eval my $count; sub { $count = 3; return; $counter = 42; }.(); $counter;

[20:19] <evalbot6> Error: Undeclared variable: "$counter" 

[20:19] <Limbic_Region> grrr

[20:19] <pdcawley> s/counter/count

[20:19] <Limbic_Region> ?eval my $count; sub { $count = 3; return; $count = 42; }.(); $count;

[20:19] <evalbot6> \3 

[20:19] <iblech> gaal: Use if(return_condition) {} else {...rest of code...}?

[20:20] <pdcawley> Hang on, '\3'?

[20:20] <Limbic_Region> gaal - AFAIK, the return problem was fixed way early on in Pugs development

[20:20] <Limbic_Region> pdcawley - I don't know why the \

[20:20] <gaal> must have asked a long time ago then :)

[20:20] <pdcawley> ?eval 3

[20:20] <evalbot6> 3 

[20:20] <gaal> iblech - no, because it want to retrun false

[20:20] <gaal> undef in scalar context

[20:20] <gaal> () in list context

[20:20] * pdcawley blinks.

[20:21] <gaal> *and i can't use want* :)

[20:21] <Limbic_Region> pdcawley - because it is tied to a variable?

[20:21] <Limbic_Region> ?eval "foo"

[20:21] <evalbot6> 'foo' 

[20:21] <gaal> meh, i'll just write this in haskell. it's easier there.(!)

[20:21] <iblech> :)

[20:21] <Limbic_Region> ?eval my $foo = 'foo'; $foo;

[20:21] <evalbot6> \'foo' 

[20:21] <Limbic_Region> yep

[20:21] <pdcawley> ?eval my $foo = 3

[20:21] <evalbot6> \3 

[20:22] <Limbic_Region> tied to a lexical even

[20:22] <Limbic_Region> must be how evalbot works under the covers

[20:22] <pdcawley> ?eval our $foo = 3

[20:22] <evalbot6> \3 

[20:22] <Limbic_Region> ok - so maybe it is how it gets passed up from p6 to Haskell out to the screen

[20:22] * Limbic_Region notices there are no more straws to grasp and calls it a night

[20:23] <SamB> what is ()? it looks like nil!

[20:23] <iblech> evalhelper.p5 uses eval($code).perl to display the results

[20:23] * Limbic_Region heads homewards

[20:26] <Aankhen``> ?eval 3.perl

[20:26] <evalbot6> '3' 

[20:26] <svnbot6> r4499, iblech++ | t/oo/magical_vars.t -- Added tests for ::?CLASS and ::?ROLE.

[20:26] <Aankhen``> ?eval 3.perl.perl

[20:26] <evalbot6> '\'3\'' 

[20:26] <Aankhen``> ?eval [].perl

[20:26] <evalbot6> '[]' 

[20:27] <Aankhen``> ?eval [].perl.per

[20:27] <evalbot6> Error: No compatible subroutine found: "&per" 

[20:27] <Aankhen``> ?eval [].perl.perl

[20:27] <evalbot6> '\'[]\'' 

[20:27] <Aankhen``> Heh, neat.

[20:28] <gaal> what's the haskell V type for Class? VType?

[20:29] <gaal> the *pugs* type that is

[20:31] <gaal> or is it a VObject that happens to be a class?

[20:39] <svnbot6> r4500, iblech++ | * Pugs.Parser -- Parse $::! etc., too.

[20:39] <svnbot6> r4500, iblech++ | * t/var/symbolic_deref.t -- Tests for this and $::("!").

[20:40] <Aankhen``> iblech, I was wondering -- how old are you?

[20:40] <iblech> 16

[20:40] <Aankhen``> Ah.

[20:40] <Aankhen``> Where you from?

[20:40] <iblech> Germany, Bavaria, Augsburg

[20:40] <Aankhen``> Ohh.

[20:42] <iblech> Ok, gonna sleep, school tomorrow

[20:42] <iblech> Night :)

[20:42] <Aankhen``> G'night.

[20:44] <Aankhen``> I think my computer is trying to tell me to get off.

[20:45] <Aankhen``> G'night.

[20:46] <shaine> if ~ is concat now, whats ones complement?

[20:47] *** sbkhh is now known as Odin-

[20:48] <arcady> I think +~

[20:48] <shaine> thank you

[20:49] <arcady> actually, no

[20:49] <gaal> ?eval +~0

[20:49] <evalbot6> 0.0 

[20:49] <gaal> nope :)

[20:49] <coaster> ~^

[20:49] <gaal> ?eval ~^0

[20:49] <evalbot6> Error:  unexpected "^" expecting term 

[20:49] <gaal> beh, quoting borkage.

[20:49] <arcady> ?eval +^ 0

[20:49] <evalbot6> Error:  unexpected "^" expecting term 

[20:49] <arcady> oh right

[20:50] <gaal> ~^ can't be right, ~-ops are stringy.

[20:50] <coaster> i got that from a03

[20:50] <coaster> This is now the bitwise XOR operator. Recall that unary ~ (1's complement) is simply an XOR with a value containing all 1 bits.

[20:50] <coaster> [Update: ~ is now string concatenation. Bitwise XOR is +^ or ~^ depending on whether your doing numeric xor or stringwise.]

[20:51] <gaal> well you aren't doing stringwise xor here! :)

[20:51] <shaine> ah crap, i gotta go

[20:54] <Khisanth> hmm got parrot

[20:56] <gaal> i need a haskell function that's prolly in the prelude, but i don't know its name:

[20:56] <gaal> mkInf :: a -> [a]

[20:57] <integral> that is in the prelude, can't remember the name though :-/

[20:57] <gaal> mkInf x = x : mkInf x

[20:57] <gaal> ah, there's 'iterate'

[20:58] <gaal> which i can use with 'id'

[20:58] <integral> hmm, I thought there was something specific

[20:58] <gaal> repeat!!

[20:58] <gaal> zvon.org++

[20:58] <integral> ah, repeat :-)

[20:58] <gaal> thanks :)

[20:58] <integral> http://www.cs.uu.nl/~afie/haskell/tourofprelude.html # Tour of the Haskell Prelude,  is rather useful

[20:59] <gaal> http://www.zvon.org/other/haskell/Outputprelude/index.html has a great "related" field :)

[21:00] <gaal> caller becomes so beautiful

[21:00] <gaal> formatFrame $ last $ take skip $ repeat fetchCaller

[21:00] <gaal> where fetchCaller = monadic black magic :)

[21:00] <gaal> sorry, forgot:

[21:00] <integral> oh, you want replicate (replicate n x = take n $ repeat x)

[21:01] <Juerd> So, suppose E is the euro sign, does Efoo = $foo automatically convert? ;)

[21:01] <integral> or maybe !! ?

[21:01] <gaal> formatFrame $ last $ take skip $ filter wanted $ repeat fetchCaller

[21:01] <gaal> actually this may not work, come to thing of it

[21:02] <integral> formatFrame $ (filter wanted $ repeat fetchCaller) !! skip  -- probably with a off-by-one error

[21:02] <gaal> because this is inside a weird monad thingie

[21:02] <integral> ah, you need a M variant of these things

[21:02] <gaal> i take care of the off by one

[21:02] <gaal> before that

[21:03] <gaal> anyway, the problem is that i wanted fetchCaller to do local (const $ envCaller env) stuff

[21:04] <integral> hmm, well there's things like mapM, maybe there's a repeatM

[21:04] <xerox> integral, there indeed is.

[21:04] <gaal> and: i don't want to replicate, because i need to actually generate more than i take, because i filter.

[21:04] <xerox> integral, I ran a bot on #haskell while lambdabot is on vacation, if you need it :)

[21:05] <gaal> (what i forgot the first time i gave the function)

[21:05] <integral> oh, neato xerox++ :-)

[21:05] <gaal> xerox: clues on whether that would work as i want it to with Reader?

[21:06] <xerox> gaal, sorry I was not reading all the discussion :)

[21:06] <pasteling> "gaal" at 192.115.25.249 pasted "current op1Caller impl" (21 lines, 878B) at http://sial.org/pbot/10902

[21:07] <gaal> i'm adding smarts to this function, to take some filtering responsibility upon itself

[21:07] <gaal> so i wanted to refactor the bits that do the recursion and upstacking out of the main code

[21:08] <gaal> basically i want a fetchCaller local function that gives me the next stack frame every time it's called.

[21:09] <gaal> oh, now i realized there's the additional complication of maybe running ouf of call stack :)

[21:09] <gaal> i can't just take as much as i like, the generator isn't really infinite.

[21:09] <gaal> boo, it was elegant for a moment there. :)

[21:09] <xerox> :)

[21:10] <gaal> no doubt i can have fetchCaller fail when it does run out of stack though?

[21:11] <gaal> thatwould be nice.

[21:17] <gaal> GHC / typical haskell optimization question:

[21:18] <gaal> say i define a local function to be if (x) then id else ...complex func....

[21:18] <gaal> where x is a variable of the main function

[21:18] <gaal> will the local function be efficient when x is True?

[21:19] <_metaperl> what does ++before the @ sign do here:

[21:19] <gaal> will its applications be nicely optimized away that is?

[21:19] <_metaperl> sub NestedLoop (++@loop, +$OnlyWhen, +$code) returns Ref {

[21:19] <_metaperl> what does "++@loop" mean?

[21:19] <gaal> i think it means mandatory named arg

[21:19] <_metaperl> in fact, that does +$OnlyWhen mean also

[21:19] <_metaperl> the "+" in front of $OnlyWhen

[21:19] <gaal> i'm sure that means optional named arg :)

[21:20] <gaal> so you can call NestedLoop :loop<a b c> :OnlyWhen<x>

[21:20] <gaal> but not NestedLoop()

[21:21] <_metaperl> that's a serious hijacking on the autoincrement operator

[21:22] <gaal> i think it's not finally blessed, but larry's considering it.

[21:22] <gaal> it's mentioned in s06 i think.

[21:22] <gaal> as an option.

[21:22] <_metaperl> when do you think p6 is going live?

[21:23] <gaal> it already does if you use iblech++ 's cd :)

[21:23] <pjcj> what does that mean?

[21:24] <_metaperl> pjcj: you mean "going live" ?

[21:24] <pjcj> yes

[21:24] <_metaperl> I mean when will it "ship"

[21:24] <_metaperl> when will it be the main line stable perl 

[21:25] <q[pdcawley]> Some time.

[21:25] <_metaperl> when features are now added to p6 and p5 is just for maintenance

[21:25] <gaal> so, is Class an object inside pugs?

[21:25] <gaal> if i have sub foo(Class $x)

[21:25] <gaal> what's the haskell type of $x?

[21:25] <wolverian> _metaperl: ++ is an unofficial '+$foo is required' prefix

[21:25] <gaal> sorry to repeat my Q from before, i'm needing this.

[21:26] <wolverian> right, gaal told you that already. sorry to repeat. :)

[21:27] <gaal> aha! looking up op1 "ref" proved useful :-)

[21:28] <xerox> Goodnight folks :)

[21:30] <pjcj> _metaperl: I suspect those are three different times:  1. depends what you mean by "ship"  2. 3 to 8 years?  3.  when 5.10 is releaseed?

[21:38] <clkao> pjcj!

[21:40] <pjcj> clkao!

[21:41] <clkao> so what about the uncoverable mark we discussed yesterday

[21:43] <pjcj> yes - what exactly is it that you need?

[21:44] <clkao> i want magic comments

[21:45] <pjcj> ah - is that preferable to an external file for you too?

[21:45] <clkao> yes. because if you change the relevant statement you will have to update the file in a painful way i presume

[21:46] <clkao> i mean, it should be supported that way as it's obvious, people who don't like can of course establish their own policy to use external file

[21:46] <pjcj> if you change the statement itself, yes

[21:47] <pjcj> ok - seems that most people want comments, so I had better support that

[21:47] <clkao> ))

[21:47] <clkao> :))

[21:47] <clkao> now, plan for release!

[21:47] * limbicLR wonders if he can now type a + and not have it be eaten

[21:47] <limbicLR> cool

[21:48] <Limbic_Region> Juerd++

[21:51] <gaal> http://pugscode.org/talks/apw/slide12d.html

[21:51] <gaal> didn't autrijus mean "%h" ?

[21:53] <wilx`> Heh, is it only mine Firefox that merges all the bullets from 1. to 4. into one line?

[21:53] <wilx`> On that page?

[21:53] <gaal> yes. :-p

[22:03] <kelan> would anyone mind helping me understand a section of chapter 6 of the harrorth saga?

[22:04] <sapp3r> msg /nickserv register sapp3r fritjof

[22:04] * gaal hasn't read it yet

[22:05] <gaal> sapp3r: now sounds like a good time to change your password :)

[22:05] <sapp3r> already have :)

[22:05] <sapp3r> dumb typo, sorry for interuption.

[22:05] <kelan> when does the NA hackathon happen?

[22:05] <kelan> i think some good things will come out of that

[22:06] <gaal> dunno, but it's sure to be on the site

[22:06] <gaal> google?

[22:06] <kelan> i could probably look it up on perlmonks faster. heh

[22:06] <kelan> it was in the announcement section

[22:06] <wilx`> Hmm.

[22:07] <wilx`> Does Perl6 support multiple parents inheritance?

[22:07] <kelan> i'd be surprised if it didn't

[22:07] <kelan> but i don't know for sure

[22:08] <wilx`> I'm just wondering because I just came over #39 of the presentation...

[22:09] <kelan> from S12: Perl 6 supports multiple inheritance, anonymous classes, and autoboxing.

[22:10] <gaal> durn, there is no repeatM. i'm sure this is trivial.. any lambdaheads still about?

[22:11] <gaal> repeatM :: Monad m => a -> m [a]

[22:11] <kelan> hmm

[22:11] <wilx`> Huh.

[22:11] <gaal> repearM x = do return x : repeatM x

[22:11] <gaal> ?

[22:11] <wilx`> repeatM = return $ repeat 

[22:12] <wilx`> Maybe...

[22:12] <kelan> how about: map (\x -> return x) repeat x

[22:12] <kelan> er

[22:12] <kelan> how about: map (\x -> return x) repeat y

[22:12] <kelan> to be clearer

[22:12] <gaal> dunno, can you do that? :)

[22:13] <kelan> probably, but i think the type from mine would be `[m a]` instead of `m [a]`

[22:13] <gaal> return $ repeat is really cute

[22:13] *** wilx` is now known as wilx

[22:13] <gaal> if it works

[22:13] <gaal> point-free and all.

[22:14] <kelan> actually mine could just be `map return`, but again, wrong type

[22:15] <kelan> hugs says `return . repeat` is type `Monad a => b -> a [b]`

[22:15] <kelan> so that looks like what you want

[22:15] <gaal> uhhhh another lame question, to do this ad-hackishly, 

[22:15] <gaal> oh wait, i can just inline that.

[22:15] <gaal> heh heh heh.

[22:19] <wilx> Wheeee!!

[22:19] <wilx> That presentation is long even for me as reader.

[22:20] <wilx> And I have been doing like a click every two seconds :)

[22:20] <gaal> me too, the build was finished when i got to 20b and then the compiler errors started getting my attention. :)

[22:21] <gaal> but up till then my though about this talk was this:

[22:21] <gaal> wow, to be there without being involved in pugs must be mind blowing

[22:21] <gaal> i wish i were there like that!

[22:21] <gaal> but then i thought

[22:21] <gaal> to be involved in pugs is way more mind blowing :)

[22:22] <gaal> though i still wish i were there!

[22:22] <wilx> :)

[22:27] <gaal> hey, this is weird. the primDecl for op1 "ref" says it returns Str

[22:27] <gaal> but its definition looks like it returns a list of VType ?

[22:27] <gaal> alternatively: what's "Type"? somewhere it said data Int | Str, but what does that mean? how can a type be an int?

[22:27] <gaal> ...and where are all the user defined classes etc.?

[22:28] <kelan> wow poe is getting ported already?

[22:28] <gaal> iblech++ # the mad porter

[22:29] <kelan> i would have thought poe would be held off until event semantics have been spec'ed

[22:29] <kelan> poe might not even really be needed since p6 will have an event loop

[22:30] <integral> POE isn't just an event loop really.   It's provides it's own object system for example

[22:30] <mugwump> and continuations etc

[22:30] * mugwump declares an apostrophe jihad on integral

[22:30] <integral> POE::Session::YieldCC does continuations for perl5 POE leakily

[22:31] <integral> err, they do that all by themselve's hone'st!

[22:35] <gaal> so, i'm getting the tireds. should i march on past 'em and hack, or sleep and go see the antonioni+wenders film tomorrow morning?

[22:36] <gaal> problem is that in cases like these i invariably look to a role model and ask, what would my cat do?

[22:36] <gaal> and that's sortof a sold trial when *sleep* is the case.

[22:38] <gaal> also, i just got my second spam for today from a certain local spammer. ordinarily this would piss me off, but a week ago a new law was passed here that awards people about $200 damages per unsolicited message. maybe i should sue, if  just to make them hurt?

[22:42] * gaal sleeps &

[22:58] <clkao> seen autrijus

[22:58] <jabbot> clkao: autrijus was seen 10 hours 16 minutes 59 seconds ago

[23:35] *** _meppl_ is now known as meppl

