[00:00] <svnbot6> r5457, nothingmuch++ | geoffb++'s next bug test case, and a similar test case for redo.

[00:01] <putter> Do we have NEXT blocks yet?

[00:01] <nothingmuch> not that I know of

[00:01] <nothingmuch> that will require unification

[00:01] <nothingmuch> we should generalize, actually

[00:01] <nothingmuch> the next constructor takes the action for next

[00:01] <nothingmuch> but also performs NEXT  { } blocks on the sub body

[00:01] <nothingmuch> and does the continuation magic

[00:02] <nothingmuch> i'll discuss with autrijus tomorrow

[00:02] <putter> ok.

[00:15] <putter> can one make $i rw in for 1 .. 10 -> $i { ... } ?

[00:16] <nothingmuch> not in a range

[00:16] <nothingmuch> what are you mutating?

[00:16] <nothingmuch> you can declare is copy

[00:18] <putter> I went to transliterate a ruby redo test, and it didnt quite work...

[00:18] <putter>  for i in 1..10; sum += i; i -= 1; if i > 0; redo; end end assert_equal(220, sum)

[00:24] <Juerd> "i -= 1; if i > 0; redo;"

[00:24] <Juerd> That's just downright stupid, with all respect for the original author.

[00:24] <coral> interesting way to do a while loop

[00:24] <coral> er, for

[00:24] <Juerd> Just use i > 1

[00:25] <Juerd> And that's not even looking at the horrors of changing what was a constant.

[00:25] <coral> there's more than one way to do it, but only one will look satisfactory to any single person.

[00:25] <putter> ok, with -> $i is copy {}, it runs, but loops indefinitely.  It looks like redo takes us back before the assignment to $i.  perl5 otoh has the same behavior as ruby.

[00:25] <putter> for my $i (1..4){$i--;print $i;redo if $i > 0;print "\n"}   works.

[00:25] <Juerd> putter: I think the original code needs a change first.

[00:27] <putter> Juerd: ??

[00:27] <Juerd> I'm amazed that it works in Perl 5.

[00:28] <Juerd> Apparently ranges do result in writable values, and 1..2 isn't expanded until runtime, so no literals are changed.

[00:28] <Juerd> 02:28 < Juerd> That's just downright stupid, with all respect for the original author.

[00:28] <Juerd> I take that back. The code was misleading, not wrong.

[00:28] <nothingmuch> geoffb: you're off the hook, I did all three

[00:29] <svnbot6> r5458, nothingmuch++ | Add tests for redo and next under all loop (;;), for, and while (every loop

[00:29] <svnbot6> r5458, nothingmuch++ | type is broken in one way or another - tests todo'd)

[00:29] <Juerd> Still, a range should theoretically of course return immutable values

[00:29] <putter> perlfunc shows redo returning to while (EXPR) { #### HERE .... }.

[00:31] <Juerd> Whatever 1..3 returns should be equal in semantics to 1,2,3

[00:31] <Juerd> I'd consider perl 5's behaviour a bug.

[00:31] <putter> Juerd: it does... which is why the for mumble -> $i is copy {mumble} was needed... no?

[00:31] <Juerd> Yes.

[00:32] <nothingmuch> good night everyone

[00:33] <putter> Good night.  I'll add a test for "returning to too early redo".  Fun.  tnx

[00:33] <nothingmuch> returning to too early redo?

[00:33] <putter> err, backlog?  

[00:34] <putter> this,

[00:34] <nothingmuch> oh

[00:34] <nothingmuch> redo redoes the cond?

[00:34] <putter> for 1..2 -> $i is copy { $i--; redo if $i > 0; }

[00:34] <putter> nonterminates

[00:34] <nothingmuch> appearantly it redoes the increment clause of loop(;;){}

[00:35] <nothingmuch> which is not good

[00:35] <nothingmuch> see last test in t/statements/next.t

[00:35] <putter> looking...

[00:35] <nothingmuch> $j is not 4 by the time it's done, but 6

[00:35] <nothingmuch> i'm not sure if it's because it does the butt end of the loop 2 times more than it ought to

[00:39] <nothingmuch> anywho, *poof*

[00:39] <svnbot6> r5459, dudley++ | Removed the extraneous quotes that were causing the test for [...] on user defined ops to fail

[00:40] <putter> nothingmuch vanishes in a cloud of smoke.  'night

[00:41] <kelan> seen kelan

[00:42] <kelan> perlbot: seen kelan

[00:53] <putter> does this look plausible?  my $i; while (do{$i++ < 10}) {say $i}

[00:54] <kelan> why have the do-block?

[00:58] <putter> the real example is something like do{$x=$i; $i++ < 10}... but bad things happen...

[00:59] <putter> (nonterminates, and $x is not set)

[01:12] <svnbot6> r5460, putter++ | Additional redo.t tests.

[01:17] <putter> Hmm... in p6, how does one next/last/redo to non-inner loops?  p5's OUTER:{... while ... { last OUTER;}}

[01:20] <autrijus> that should continue to work (even tho we don't yet support it)

[01:20] <putter> ah, tnx.

[01:20] <autrijus> leave :label<OUTER>;

[01:20] <autrijus> is what that really means

[01:24] <putter> tnx.  I started to transliterate p5's loopctl.t, but it's too dependent on labels and NEXT blocks.  ah well.

[01:29] <autrijus> for some reason leave() works in PIR :)

[01:30] <autrijus> it should be much easier to work with once PIL evaluator is there

[01:31] <putter> right :).

[01:37] <svnbot6> r5461, fglock++ | added bug list; fixed docs

[01:41] <autrijus> dear larry. you have again inflicted your whim on me. :-/

[01:42] <putter> ?

[01:42] <autrijus> so this week I need to, at compile time, detect if $?SELF and $_ is the same thing

[01:42] <autrijus> and if yes, raise a fatal exception on  .method

[01:42] <autrijus> er

[01:42] <autrijus> I mean, if not

[01:43] <putter> ;)

[01:43] <autrijus> and force dialects with "use self"

[01:44] <autrijus> and it's only applicable this week

[01:44] <mugwump> why not just defer such behaviour until some indeterminable time in the future when everything is self hosting and mutating the grammar isn't a PITA

[01:44] <putter> hmm, perhaps that's not the highest thing on the priority list...?

[01:44] <autrijus> esp. seeing how existing ./foo needs to be rewritten

[01:45] <autrijus> putter: yeah, but I feel uncomfortable having a mass of test suite actively disagree with ruling

[01:47] <autrijus> or do you think it's sane to say that pugs has `use self "./"` always in scope, until we really have a compile time and PIL evaluation, at which time self.pm can actually be implemented with P6?

[01:48] <mugwump> sure.  why not do something really interesting, like Proxy objects :)

[01:48] <autrijus> mugwump: there's already ScalarProxy IType

[01:48] <autrijus> just hook it to Proxy::new and you're set

[01:49] <mugwump> Oh cool... and I was figuring that the Array and Hash proxies wouldn't need much, probably just connections with the hash/array de-ref methods

[01:49] <mugwump> ie, the post_circumfix:«{}» methods,

[01:50] <mugwump> and post_circumfix:«[]» of course.

[01:50] <putter> I do think it sane.  Hmm... so let me reflect on why...

[01:50] <mugwump> everything else is simply an object method on the hash/array

[01:53] <putter> Timeframe is one issue.  A hack for the day would be a no-brainer.  A forever divergence from p6 spec would be problematic.  Someplace in between discomfort grows.

[01:54] <putter> A possible metric is the usual "the next week of development time can buy x or y.  which?"

[01:57] <putter> I started a "ruby on p6" port.  The roadblocks were pugsbugs, and objects being largely unimplemented.  Speed was secondary.

[01:59] <mugwump> autrijus: I'm interested in playing with the IScalarProxy type, I notice that there is an associated class Scalar::Proxy, and I can call .new() on it; what else can I do with it?

[01:59] <autrijus> mugwump: not much yet

[02:00] <mugwump> the symbols "scalar_fetch = fst", what does the "fst" refer to?

[02:00] <mugwump> (in the relevant definition in src/Pugs/Types/Scalar.hs)

[02:02] <mugwump> I see a proxyScalar in Pugs/AST/Internals.hs, too

[02:03] <autrijus> proxyScalar is the one you're looking for

[02:03] <autrijus> it takes two thunks, one for fetch and one for store

[02:04] <mugwump> and yields an IScalar

[02:04] <autrijus> and return a IVar VScalar -- suitable to pass into IScalar and maybe VRef

[02:06] <mugwump> ok, so I could make a primitive that returns such an item, and then make the Scalar::Proxy::BUILD call that?

[02:07] <putter> Hmm, what is the motivation behind the current focus on PIR?

[02:07] <mugwump> putter: AIUI, to simplify the task of getting to a self-hosting point

[02:13] <putter> so a path of getting working: pir backend, hs frontend, p6 meta, p6 frontend?

[02:14] <mugwump> Hmm, my comment wasn't quite right is it.  that's a secondary goal, the first is simply to make it easier to compile to backends by reducing the number of distinct operations that need to be translated/tested to the target language/platform.  this should aid in the self hosting goal.

[02:16] <putter> so -BPIR is primarily being used as a motivating case for a kernel-languagey restructing of pugs?

[02:18] <autrijus> putter: PIR codegen is merely a motivating case of PIL compilation

[02:18] <autrijus> putter: the most pressing thing for me is to switch to PIL evaluator in haskell side so our interpreter won't differ from compiler

[02:19] <autrijus> porting the metamodel to Haskell goes with that.

[02:19] <autrijus> after those two, we'll have reliable way to write codegen in P6

[02:20] <autrijus> for example codegen into P5

[02:20] <autrijus> and _then_ we can port compiler to P6

[02:20] <autrijus> I need to draw some graph to explain all this.

[02:20] <autrijus> (btw, my reply to larry is posted to p6[cl]. feedback welcome)

[02:31] <geoffb> nothingmuch++ for doing all the loop tests -- I just got slammed this afternoon with work stuff, sorry about that

[02:32] <putter> so the top level objective is: replace the current hs interpreter backend because... something.  (a clean backend is a prerequisite for self hosting, and simplifies pursuing it?)

[02:33] <putter> that should have been,

[02:33] <putter>  so the top level objective is: replace the current hs interpreter backend because... something?  (a clean backend is a prerequisite for self hosting, and simplifies pursuing it?)

[02:33] <geoffb> that was different how?

[02:33] <geoffb> oh, s/./?/ in one spot

[02:33] <geoffb> sheesh

[02:33] <mugwump> putter: for consistency of behaviour between interpretation and compiled execution

[02:34] <putter> and compiled execution is needed because...X?

[02:35] <autrijus> putter: currently there is no compile phase

[02:35] <mugwump> lots of reasons.  to run outside of pugs, for instance on parrot.  to convert to other code forms.  to boldly run where no dynamic code has run before

[02:35] <autrijus> so we don't get strict, warnings

[02:36] <autrijus> pragmas

[02:36] <autrijus> and "1 = 1" does not fail until runtime

[02:36] <autrijus> there's no semantic analysis.

[02:36] <autrijus> treatment of class literals depend on order of introduction.

[02:36] <autrijus> I think those are reasons enough

[02:36] <autrijus> I hope you agree :)

[02:37] <autrijus> hm, the first paragraph in the perl 6 faq is bad.

[02:37] * autrijus mails allison to see if it can be taken down.

[02:38] <geoffb> (Note: this is NOT intended as pressure, I am merely inquiring): autrijus, I've been holding off learning Pugs' Haskell guts on the assumption that the PIL change would pretty much put the internals in a blender.  A) Is this true, and B) when abouts is the planned change?

[02:38] <autrijus> geoffb: this is not true; PIL evaluation will be a refactoring of Eval.hs, not rewrite

[02:38] <autrijus> the planned change is supposed to start happening as soon as 6.2.8 is out of the door.

[02:38] <putter> Oh, I don't disagree with any of this.  I've just been aware for a long time that I couldn't write the one paragrah pithily insightful description of what we are doing, when, and why.  So I'm taking this opportunity to explore it.  Can write up result.

[02:39] <autrijus> ooh, please do

[02:39] <autrijus> I see, you're the interviewer here

[02:39] <putter> Yes :)

[02:39] <putter> good description

[02:40] <putter> so the primary objective is to obtain a compile time?

[02:40] <putter> err, compiler opportunity?

[02:40] <autrijus> right.

[02:41] <autrijus> to not run the parse tree.

[02:41] <autrijus> to allow a semantic analysis of parser tree

[02:44] <geoffb> OK, given the above response, I'm thinking of diving into src/ sooner rather than later.  What is available to help me understand what does what?

[02:44] <svnbot6> r5462, geoffb++ | hack.pod updates: split ext/Span out of ext/Set-Infinite, and reword the set-related module descriptions to be parallel

[02:44] <mugwump> geoffb: PA01?

[02:44] <autrijus> geoffb: PS02

[02:44] <autrijus> er

[02:44] <geoffb> If the answer is "not bloody much", I may end up writing something, but no promises yet

[02:44] <autrijus> PA02

[02:45] <autrijus> you can augment PA02 :)

[02:45] <geoffb> Is that up to date enough not to lose me?

[02:45] <autrijus> it's up to date enough.

[02:45] <autrijus> it is also nothing much

[02:45] <geoffb> OK

[02:45] <autrijus> but I'm thinking about renaming it into PA02 

[02:45] <autrijus> er

[02:45] <autrijus> PA03

[02:46] <autrijus> and leave PA02 as the design thing that putter was interviewing me with

[02:46] <autrijus> i.e. the grand scheme of things

[02:46] <geoffb> .oO( I must be a masochist with the amount of work I pulled onto my pile in the last few days )

[02:46] <autrijus> geoffb: arbeit macht frei 

[02:47] <geoffb> wah?

[02:47] <autrijus> "Arbeit Macht Frei" (Work Brings Freedom) was the sign over the gates of Auschwitz.

[02:47] * geoffb gets chills

[02:47] <autrijus> it's intended to have that effect :)

[02:48] * autrijus hacks on with pirsmoke -- that was (and still is) an insane amount of work too :)

[02:49] <geoffb> I am reminded of freshman CS, in which the prof gave extra credit on a midterm if you answered the question "What is the best novel ever?" with "The Dispossessed"

[02:50] <autrijus> lol

[02:50] <putter> so the top level objective is to do compiler thingys, rather than running the parse tree?  this requires an alternate tree? PIL?  Eval.hs is refactored to... run this tree rather than parse tree?

[02:51] <autrijus> putter: yes and yes.

[02:51] <autrijus> theoretically we can go the Perl5/Ruby route and augment the parse tree instead of inventing a new minimal language

[02:51] <autrijus> but that makes the life of codegen immeasurably more difficult.

[02:51] <autrijus> and nonlocal optimization virtually impossible

[02:51] <putter> kernel languages++

[02:51] <autrijus> so we introduce PIL as a core calculus of perl6

[02:51] <autrijus> yup

[02:52] <geoffb> Does PIL though contain enough information to make micro-optimizations relatively easy?  As I recall, P5 does a lot of that sort of thing

[02:53] <autrijus> really?

[02:53] <autrijus> it does constant folding

[02:53] <autrijus> static lexical lookup 

[02:54] <autrijus> that's all

[02:54] <autrijus> I think

[02:54] <autrijus> oh and void map, and reverse sort

[02:54] <autrijus> sure, all those will be possible

[02:54] <geoffb> (IOW, if everything that loops gets completely abstracted to a single overarching continuation concept, do you then lack the necessary info to do stuff like turn while 1 {} into something really damn simple and fast?)

[02:55] <autrijus> do note that it's just a call to &statement:<while>.

[02:55] <geoffb> ok, fair enough

[02:55] <geoffb> AH!

[02:55] <autrijus> so... the answer is voidly true :)

[02:55] <geoffb> OK, not having actually looked at PIL, I imagined that you had made something between a turing machine and PIR in complexity -- extremely abstract

[02:56] <geoffb> turing machine with continuations?  :-)

[02:56] <autrijus> PIR is between turing machine and PIL.

[02:56] <autrijus> PIL is basically scheme with some more calling convention.

[02:56] <putter> so work on Eval/PIL will begin shorty, and work on PIL-to-PIR is in progress?  Why PIL-to-PIR before Eval/PIL?  The motivation for PIL->PIR is... something.  (reality check on PIL design?)

[02:56] <autrijus> putter: PIL->PIR is keeping us honest.

[02:56] <autrijus> it's trivial to make PIL bloaty and codegen unfriendly

[02:56] <autrijus> by shuffling a lot hidden complexity to haskell runtiem

[02:57] <autrijus> switch to another runtime forces us to define all operational semantics

[02:57] <geoffb> autrijus++ # psychological engineering on himself

[02:57] <autrijus> because haskell runtime and pir runtime (and p5 runtime) cannot agree

[02:57] <autrijus> so all semantic must be preserved at PIL level

[02:57] <geoffb> bah, must go again.

[02:58] <autrijus> otherwise I imagine Eval/PIL producing something that's hard to codegen for.

[02:58] <autrijus> s/for/from/

[02:58] <autrijus> (if we started from that first)

[02:58] <autrijus> so yes, "reality check" is pretty accurate

[02:59] <autrijus> putter: please commit whatever you have written down to docs/notes/ :)

[02:59] <putter> so pir, rather than p5, because...?  (same reason?)

[02:59] <putter> will do. :)

[03:01] <autrijus> because p5 is too smart.

[03:01] <autrijus> similar to our existing hs runtime

[03:01] <autrijus> there's too much logic in p5 code

[03:01] <meppl> what a pitty, that im drunken again - bye

[03:01] <autrijus> even in a single method call

[03:01] <autrijus> meppl: see ya

[03:01] <autrijus> so it does not keep us honest the same way as PIR does

[03:02] <autrijus> otoh, once PIL is more solid, p5 runtime will have a lot of practical value

[03:02] <autrijus> because p5 is known to segfault less.

[03:02] <autrijus> and DBI is written in p5 not pir.

[03:03] <autrijus> so it makes sense to pursue Eval/PIL with PIL->PIR until we have a good idea of what PIL's final form will be

[03:03] <autrijus> then work on PIL->P5 in earnest

[03:03] <autrijus> and maybe PIL->JS etc.

[03:03] <stevan> (PIL->JS)++

[03:03] <stevan> hola autrijus  :)

[03:03] <autrijus> greetings stevan :)

[03:04] * autrijus goes to find food and repair PIR

[03:04] <autrijus> putter: please type away more questions if any -- I'll reply when I'm back

[03:04] <stevan> autrijus: I am thinking of implementing Scalar, Array and Hash in the metamodel, but using tie() structures for now

[03:04] <autrijus> stevan: sure, tie() structure is what I'm using in hs anyway

[03:04] <stevan> when you return from food, let me know you opinion of the sanity of that idea

[03:04] <autrijus> same interface

[03:04] <autrijus> so sure, sane

[03:05] <stevan> yes, this was part of the inspiration

[03:05] <stevan> ok

[03:05] <stevan> this way I can do typed containers and ro/rw traits

[03:05] <stevan> and get that out of the metamodel

[03:05] <putter> so the motivation for doing PIL->P5 once PIL has a finalish form is... something?

[03:05] <stevan> then we can compile Perl 6 to Perl 5 :)

[03:06] <putter> :)

[03:08] <autrijus> the motivation is that we can write "use perl5:DBI;" and expect it to work in both hs evaluator and p5 evaluator.

[03:08] <autrijus> and have it work far more reliably in the latter.

[03:08] <autrijus> I prophesy that once that happens we'll enter the "hack hack hack" phase of imaginary perl6 timelinee

[03:09] <autrijus> and out of the current "slowly gaining more respect" phase

[03:09] * stevan is very happy that Larry is talking meta-model stuff :) 

[03:09] <stevan> hack++ hack++ hack++ :)

[03:10] <autrijus> bbiab. :) &

[03:10] <putter> so at some time X? weeks from now, Eval.hs has been refactored.  the primary objective then becomes... what?  (PIL->P5?)

[03:11] <stevan> I think the PIL>p5 effort will happen simultaneously with the PIL in Haskell effort

[03:12] <stevan> especially since PIL is soooo much cleaner in Haskell than it is in Perl

[03:12] <stevan> but that is not what I am working on, so I can only guess :)

[03:19] <autrijus> stevan: PIL in Haskell is Eval/PIL is Eval.hs refactoring

[03:19] <autrijus> PIL->P5 will probably happen simultaneously with PIL->PIR and other PIL->* as people find time to work on it

[03:20] <autrijus> I'm equally interested in P5 and PIR targetting, but P5 brings more instant gratification

[03:20] <mugwump> so it's not better to go PIL -> PIR -> P5 ?

[03:20] <mugwump> or does that miss out on too many good integration features

[03:20] <autrijus> mugwump: PIR on P5 is an interesting subject. I suspect it will run very slowly

[03:21] <autrijus> unless you of course link with libparrot and pmcs

[03:21] <autrijus> if so, that is valid approach (and the one allison originally proposes) but I'm not personally interested

[03:22] <autrijus> if we have have a single runloop, why settle with two?

[03:23] <autrijus> and some core parrot opcodes, eg. bsr/ret and tailcc

[03:23] <autrijus> and its calling convention

[03:23] <autrijus> cannot be directly expressed in p5

[03:23] <autrijus> they must be emulated if youa re targetting pure p5 (without linking libparrot)

[03:23] <autrijus> and I suspect it will be slower than acceptable

[03:23] <autrijus> but people are welcome to try :)

[03:38] <putter> so the comming thing in pugs is PIL?  PIL->PIR provides honesty in PIL design?  PIL->P5 provides reliability and visibility?  PIR->hs/Eval provides... something?

[03:38] <svnbot6> r5463, autrijus++ | * The Alligator in 0.2.2 prevents the perfectly good 03-equal

[03:38] <svnbot6> r5463, autrijus++ |   sanity test from working.  Got no choice but to remove

[03:38] <svnbot6> r5463, autrijus++ |   two lines that prints nothing; need reinvestigate with leo-ctx5.

[03:38] <svnbot6> r5464, autrijus++ | * remove dead code in Bind.hs.

[03:38] <autrijus> putter: provides clear definition of semantics.

[03:39] <autrijus> putter: taking advantage of haskell's uncanny ability of serving as specification that happens to run.

[03:39] <autrijus> so it is the reference evaluator.

[03:40] <autrijus> until, some day, we finish PIL->Perl6.

[03:40] <autrijus> which would be the last milestone of pugs

[03:41] <autrijus> (of course, the compiler, emitter and metamodel + object space should be all in P6 in the last milestone)

[03:42] <autrijus> but there are two levels of PIL->P6; one is merely a pretty printer

[03:42] <autrijus> which will not need to implement any semantic

[03:42] <autrijus> the "last milestone" one is however different; it's basically an implementation of a perl 6 virtual machine on top of perl 6

[03:43] <autrijus> it's there so we can replace the haskell one as the reference implementation

[03:43] <autrijus> alternatively, if people all agree that parrot runtime should be the reference one

[03:43] <autrijus> then that step would not be needed

[03:43] <autrijus> hence the "if needed" clause in the pugs roadmap.

[03:45] <putter> so for X in hs,pir,p5, what does a success for PIR->X look like?  (X-smoke?)

[03:47] <autrijus> X-smoke.

[03:48] <putter> an "X-smoke no worse than hs-smoke"?

[03:49] <autrijus> right

[03:49] <autrijus> the success will be quantifiable

[03:49] <autrijus> it's not a 0% - 100% thing

[03:49] <autrijus> er

[03:49] <autrijus> 0% / 100% thing

[03:52] <putter> so what are the parts to an PIR->X?  (an emitter?  an X-Prelude.p6?  a X-native runtime?  other?)

[03:52] <autrijus> assuming you mean PIL->X

[03:53] <putter> oh, yes...

[03:53] <autrijus> the parts are: CodeGen from PIL to X-tree; an emitter from X-tree to X-bytecode; a X runtime.

[03:54] <autrijus> Parser->Compiler->CodeGen->Emit->Runtime

[03:55] <putter> which parts are written in hs, p6, X?

[03:56] <autrijus> only the Runtime is in X.

[03:56] <autrijus> currently all other parts are in hs

[03:56] <autrijus> to be replaced by p6 gradually.

[03:56] <autrijus> X does not enter the picture.

[03:56] <autrijus> except for the Runtime

[03:57] <autrijus> which includes object space, primitives, and maybe more emulation foo

[03:58] <autrijus> oh, replace X-bytecode with X-code

[03:58] <autrijus> we don't quite care whether it's bytecode of other kind of concrete representation

[03:59] <putter> before broadening focus, anything else which should be said about the backends?

[04:01] <putter> so what else is going on as these backends are being developed?

[04:02] <putter> (tests?  frontend?  docs?  somethings?)

[04:07] <putter> rephrased, n weeks from now, three greenish smokes, what else would you like to have seen happen?

[04:16] * masak yawns

[04:17] <masak> morning

[04:24] * QtPlatypus asks a question for confermation "At the moment in pugs where is no way to manipulate raw bytes, everything gets utf-8ed."

[04:26] <brentdax> Hmm.

[04:26] <autrijus> QtPlatypus: that is correct.

[04:27] <autrijus> QtPlatypus: mostly due to the fact that I'm not sure how raw bytes are to be presented in p6.

[04:27] <autrijus> putter: tests are shared. other frontends -- i.e. *->PIL may be interesting, but not of active interest to me

[04:27] <QtPlatypus> And strings that corraspond to illegal Unicode or utf-8 cause pugs to get indigestion.

[04:28] <autrijus> putter: Perl5->PIL is indeed interesting, as is Python->PIL etc

[04:29] <brentdax> Perl 5 interop with DBI.  $sth.execute(...) says "no compatible sub".  $sth.can("execute").($sth) executes happily.  This only happens in a module which is part of a large program--when I write a little test script, it all works fine.

[04:32] <brentdax> Other DBI::st methods (like .fetch) seem to work fine.

[04:32] <brentdax> Any thoughts?

[04:42] <autrijus> hrm, not sure.

[04:42] <mugwump> reducing to a simple test case can really be a bitch sometimes aye!

[04:47] <autrijus> hear hear.

[04:48] * autrijus hopes allison will reply that punie is targetting perl6 :)

[04:50] <obra> ?

[04:50] <autrijus> obra: # http://www.nntp.perl.org/group/perl.perl6.compiler/931

[05:16] <putter> weeee... putter finishes pass at writeup.  looks at clock, and concludes discussion of frontend can wait 'till another day.

[05:16] <autrijus> ooh ooh mesee mesee

[05:16] <autrijus> commit to docs/notes/ ?

[05:17] <putter> ok...

[05:18] <autrijus> weird, the feature motd looks upside down

[05:18] <autrijus> ¡Ʈu˙9Ʈɹǝd˙ɹǝɥʇɐǝɟ oʇ ǝɯoɔƮǝM

[05:18] <autrijus> s/feature/feather/

[05:22] <putter> 5465. docs/notes/plan  Too tired to think of a better name.:/

[05:22] <svnbot6> r5465, putter++ | Added docs/notes/plan - some notes on the pugs development plan.

[05:23] <autrijus> hm, evalbot is offline

[05:23] <autrijus> and borken

[05:23] <autrijus> I wonder why

[05:23] <autrijus> putter++ putter++

[05:23] <autrijus> lunch... bbiab &

[05:24] <putter> It is not the pithy paragraph I originally envisioned.  Who was it that said, sorry for the length of my note - I didn't have time to write a short one.

[05:25] <putter> Any/everyone, feel free to pithify. ;)

[05:25] <putter> Thanks autrijus, was fun.

[05:25] <putter> good night all &

[05:26] <autrijus> nite!

[05:26] <autrijus> &

[05:27] <putter> &

[05:38] <geoffb> If noone else is working on refactoring putter's note, I'll take a crack at it . . . 

[05:42] * geoffb begins hacking on it

[05:46] <masak> putter: (in case you're backlogging) it was supposedly oscar wilde who said "I'm sorry for the length of this letter but I didn't have

[05:46] <masak> time to write a shorter one."

[05:47] <gaal> i think not. voltaire perhaps; checking.

[05:53] <gaal> ah: pascal.

[06:16] *** spinclad_ is now known as spinclad

[06:43] <svnbot6> r5466, gaal++ | * `require Bar; require Bar` only loads Bar once

[06:43] * geoffb is having fun rewriting docs/notes/plan

[06:44] <geoffb> I know developers are supposed to hate documentation, but I just don't.  :-)

[06:44] <gaal> docs can be fun given the right *.

[06:45] <gaal> pugs often has the right * to it.

[06:45] *** castaway_ is now known as castaway

[06:46] <geoffb> gaal, nodnod

[06:46] <geoffb> allo, castaway 

[06:53] <masak> gaal: you're right about pascal, the quote is "I would have written a shorter letter, but I did not have the time." according to wikiquote

[06:54] <gaal> word.

[06:56] <castaway> g'mornin gaal

[06:56] <gaal> hey castaway!

[06:56] <castaway> umm, mornin geoffb .. /me rubs eyes

[06:56] <geoffb> :-)

[06:56] * gaal offers coffee

[06:56] * geoffb offers tea

[06:57] <castaway> tea :9

[06:57] <castaway> see, you must be a brit :)

[06:57] <gaal> bbiab &

[06:58] <geoffb> castaway, :-)

[06:58] <castaway> mm, you like writing docs, eh?

[06:58] <castaway> I wouldnt spread that about were I you :)

[06:59] <geoffb> I can always say no -- that's the beauty of the bazaar.  :-)

[07:00] <castaway> ,)

[07:00] * castaway has bundles that needs writing..

[07:04] <geoffb> Well, if you'd like to spring for my consulting fee . . .  :-)

[07:04] <castaway> heh

[07:05] <gaal> okay, here's something sad: i was experimenting with precompiling Test.pm

[07:05] <gaal> but it causes pugs to segfault :(

[07:06] <geoffb> bleah

[07:06] <gaal> inconsistently :(

[07:06] <geoffb> double bleah

[07:13] <theorbtw1> Segfault?

[07:13] *** theorbtw1 is now known as theorbtwo

[07:14] <theorbtwo> With precompile to AST, or precompile to something more parroty?

[07:14] <gaal> to2: apparently the segfault was just an optimized-unoptimized artefact.

[07:14] <gaal> looking at other problems now

[07:15] <theorbtwo> Ah, that works for me.

[07:15] <theorbtwo> Hm, I should look into the gcc4/ghc problems, possibly, since debian unsable now defaults to gcc4.

[07:19] <gaal> on my fast, machine, ghc peaks at 120mb. i want it to use *more* ram if it needs it. how do i do that?

[07:21] <gaal> i'm not sure if it gets there because of a limit or bacause that's what it needs.

[07:22] <gaal> oh, i just said that and now it's at 175mb. heh.

[07:22] <geoffb> gaal, opt or unopt?  A couple days ago I had unopt peak at 140 MB ghc + 130 MB ld

[07:23] <geoffb> Limbic_Region has seen a peak of 750 MB each for ghc and ld with optimized builds, but that was before PCPrelude.

[07:23] <gaal> optimized. Pugs.Run with large includes.

[07:23] <gaal> on the contrary, PCPrelude increases that figure.

[07:23] <geoffb> Though Limbic_Region may have been compiling on Win32, I'm not sure.

[07:23] <gaal> well not *that* figure

[07:23] <gaal> it increases build-time ram usage.

[07:24] <gaal> well, it eventually peaked at just under 200mb. hmmm.

[07:24] <geoffb> Build time RAM was what I was referring to.  :-)

[07:25] <gaal> yeah - meant i never saw it anywhere near 750mb

[07:25] <geoffb> gaal, *nix or Win32?

[07:26] <geoffb> (My numbers are on Debian testing)

[07:26] <gaal> win32. on linux my box only has 256mb...

[07:26] <gaal> so i never make optimized there.

[07:27] <geoffb> yeah, opt make OOM kills my linux box (192 MB)

[07:27] <gaal> brb

[07:35] <gaal> autrijus, ping

[07:37] *** Aankh|Clone is now known as Aankhen``

[07:39] <autrijus> gaal, pong

[07:39] <gaal> hey. i'm getting something weird precompiling Test, and i remember something about END blocks...

[07:39] <autrijus> right. :)

[07:39] <gaal> i've basically concatenated Prelude.pm with Test.pm

[07:40] <autrijus> @*END would be filtered out

[07:40] <gaal> but now i'm getting errors about "undeclared $testing_started"

[07:40] <autrijus> yes, because the compilation does not preserve lexical context

[07:40] <gaal> in &test_ends

[07:40] <autrijus> so you don't get visibility

[07:40] <autrijus> you can workaround using explicitly qualified vars

[07:40] <gaal> but some other classes in the prelude do have that: eg Time::Local

[07:41] <gaal> oh

[07:41] <Aankhen``> Morning.

[07:41] <gaal> no it doesn't :)

[07:41] <geoffb> morning, Aankhen`` 

[07:41] <autrijus> it doesn't. :)

[07:41] <autrijus> it's an outstanding problem

[07:41] <autrijus> maybe we can workaround it for this release

[07:41] <autrijus> by using qualified vars in Test

[07:41] <autrijus> what do you think?

[07:41] <gaal> errr wait, File does.

[07:42] <gaal> oh and it does indeed fully qualify them.

[07:42] <autrijus> it does not.

[07:42] <autrijus> and that means the three 'my' should really be 'our'

[07:42] <autrijus> the 0 worked by chance.

[07:42] <autrijus> because undef happens to be 0.

[07:42] <gaal> it says the crazy $File::SEEK_START

[07:42] <gaal> ahh :)

[07:42] <gaal> okay :)

[07:42] <Aankhen``> geoffb >> What's shakin'?

[07:43] <geoffb> Rewriting docs/notes/plan

[07:43] <Aankhen``> Er... no commits since last night? o_O

[07:43] <autrijus> but I suggest you just use qual now

[07:43] <geoffb> (almost finished with that)

[07:43] <Aankhen``> Oh, that was my browser messing around.

[07:43] <autrijus> $File::SEEK_START = 0;

[07:43] <autrijus> etc

[07:43] <autrijus> so what about Test? do you think we qual it for now?

[07:43] <gaal> autrijus: sure. but (a) do we just not declare the vars, like p5?

[07:43] <autrijus> that can do

[07:44] <gaal> (b) i hope TEst doesn't make use of the lexicality of vars, eg. with closures

[07:44] <autrijus> would you like to take a look at it?

[07:44] <gaal> i'll happily experiment.

[07:44] <autrijus> please do.

[07:44] <autrijus> gaal++

[07:44] <autrijus> btw if you have parrot

[07:44] <gaal> yes

[07:45] <gaal> external executalble though.

[07:45] <autrijus> you can easily test that with ./pugs -BPIR -MTest -e 'ok 1'

[07:45] <autrijus> that's fine

[07:45] <autrijus> it should exhibit the same bug

[07:45] <autrijus> for exactly the same reason

[07:45] <gaal> right, i'm on it.

[07:45] <autrijus> gaal++

[07:45] <Aankhen``> I have a question: since Prelude is precompiled, does that mean it makes more sense for builtins to be implemented there from now since they eventually need to be written in Perl 6 anyway?  Or will that be done later?

[07:46] <autrijus> Aankhen``: yes, it makes total sense now

[07:46] <autrijus> I said that in my journal

[07:46] <autrijus> new prims should be in Prelude.pm preferably

[07:46] <autrijus> I don't see a need now to completely redo Prim.hs

[07:46] <gaal> we need a way to tag them as pure perl imo.

[07:46] <Aankhen``> I just wanted to clarify "I expect" vs. "I think they should be". ;-)

[07:47] <autrijus> ok. I expect, and I think they should be

[07:47] <gaal> be it a trait or a documentation convention.

[07:47] <Aankhen``> OK.

[07:51] <geoffb> OK, docs/notes/plan updated.  autrijus, can you take a look and see if you disagree with anything?

[07:55] <Aankhen``> $I.ve(got => "the power");

[07:55] <svnbot6> r5467, geoffb++ | rewrite of putter++'s interview/brain dump with autrijus on PIL and Pugs as a compiler

[07:56] <gaal> Aankhen``, perl4 is clearly superior to p6 as your example demonstrates. (you can spell that "I've" in p4)

[07:57] <Aankhen``> BAH, I SAY

[07:57] <geoffb> You can spell it in P5, too, but people will look at you funny

[07:57] <gaal> true.

[07:57] <theorbtwo> macro <'> {'::'

[07:57] <theorbtwo> Er, wait, not quite.

[07:58] <geoffb> That could have interesting effects on quoting . . . .

[07:59] <Aankhen``> macro infix:<'> is parsed(/<null>/) { "::" }

[07:59] <gaal> even though precompiling Test is expected to give another factor of two speedup in smokes, once it works, it involves a significant build time hit.

[08:08] <autrijus> geoffb: I committed chgs. I'll brb

[08:08] <svnbot6> r5468, autrijus++ | * minor fixes to geofb++'s hackery to notes/plan 

[08:08] <autrijus> geoffb++

[08:08] <gaal> does it make sense that i have to fully qualify sub names?

[08:08] <gaal> &proclaim isn't being found.

[08:09] <gaal> it's declared after most of the subs that call it.

[08:09] * geoffb pulls

[08:12] <geoffb> Cool, thanks autrijus.  I knew the overview chart would need fixing, but I figured a first pass would help.

[08:13] <gaal> geoffb++ putter++ # helpful docs

[08:13] <geoffb> thanks, gaal 

[08:27] <autrijus> geoffb: it helped a lot! I think I'll just build PA02 out from that and hw2005

[08:28] <gaal> i have a smoke running on precompiled Test. a little soon to say if it's faster though.

[08:28] <geoffb> cool beans, autrijus 

[08:32] * QtPlatypus can't work out why grep expects Vcode

[08:32] <svnbot6> r5469, autrijus++ | * acknowledge zeroderef and context bugs as :todo<bug>.

[08:33] <QtPlatypus> Should the following work?

[08:33] <QtPlatypus> grep /a+/,"a","b"

[08:33] <gaal> i think not

[08:33] <QtPlatypus> gaal: Why not?

[08:33] <gaal> iirc only grep CODE LIST is in now?

[08:33] * geoffb is several hours overdue for bed . . . time to attempt sleep

[08:34] * QtPlatypus nods.

[08:34] * geoffb mumbles "It would be spiffy keen if someone were to fix the while+next and related bugs . . . ."

[08:34] <gaal> apparently i'm wrong though... S29 mentions "MatchTest $test"

[08:35] <gaal> but i don't know what MatchTest is.

[08:35] <autrijus> it's Item or Junction.

[08:36] <autrijus> but for all practical purpose we can limit it to Rule

[08:36] <autrijus> I wonder who added it there, but it makes sense

[08:36] <gaal> hmm, since the reference implementation does a smartmatch, why not put an Any there?

[08:37] <autrijus> that would do too

[08:37] <autrijus> although Any would include pairs

[08:37] <autrijus> grep :x<y>, "a", "b";

[08:37] <autrijus> so I think Item|Junction is indeed correct

[08:38] <autrijus> QtPlatypus: make it a :todo<feature>

[08:38] <svnbot6> r5470, autrijus++ | * more test cleanups.

[08:38] <autrijus> QtPlatypus: if you would like you can also implement it :)

[08:38] <autrijus> modify op2Grep to do a smartmatch

[08:41] * QtPlatypus nods.

[08:41] <gaal> autrijus, any idea why i needed to fully qualify sub names in Test too?

[08:42] <autrijus> gaal: namespace bugs

[08:42] <autrijus> gaal: is it PIR or precomp?

[08:42] <gaal> precomp

[08:42] <autrijus> I bet the namespace isn't propagated

[08:42] <autrijus> so it looks at main::proclaim

[08:42] <autrijus> because it's exported

[08:42] <autrijus> and called inmain

[08:42] <gaal> smoke ended, let's look at the times.

[08:42] <autrijus> I need to fix export.t first too

[08:43] <gaal> duration: 1350

[08:43] <gaal> that's measly :-(

[08:43] <gaal> precomp prelude alone gave ~1400

[08:44] <gaal> but that must meant my experiment is flawed.

[08:44] <svnbot6> r5471, autrijus++ | * more deref victims.

[08:44] <gaal> looks as if Test.pm is compiled again? /me moves away Test.pm

[08:47] <gaal> drats, if *did*. but why? i added an %*INC guard. must have had a bug there.

[08:49] <gaal> sysinternals.com++

[08:51] <gaal> aha! %*INC was populated with "Test.pm" instead of "Test". that's probably wrong, isn't it?

[08:52] <autrijus> it agrees with p6.

[08:52] <autrijus> er, p5.

[08:52] <autrijus> $ perl -MTest -e 'die %INC->{"Test.pm"}'

[08:52] <autrijus> /usr/local/lib/perl5/5.8.6/Test.pm at -e line 1.

[08:52] * autrijus gleefully abuses one of the p5 bugs

[08:53] <autrijus> (the %hash->{key} syntax)

[08:53] <autrijus> oh wait, it's a feature not a bug.

[08:53] <gaal> okay, /me gleefully changes his most hacky line yet to %*INC<Test.pm> = '<precompiled>';

[08:53] <gaal> it's a deprecated feature

[08:53] <autrijus> yup.

[08:54] <autrijus> #perl6: Powered By Gleemax

[08:54] <gaal> with no justification whatsoever.

[08:54] <gaal> obviously likeable. :)

[08:58] <gaal> autrijus, what's the advantage of keeping the keys of %INC in filesystem format? classname format looks cleaner to me

[08:59] <gaal> du -b src/Pugs/PreludePC.hs  =>  1763898  # eep

[09:01] <autrijus> gaal: I suspect it's due to require's desugared form.

[09:01] <autrijus> require 'Test.pm';

[09:01] <autrijus> require 'Test'; # won't work

[09:01] <gaal> yeah

[09:01] <autrijus> because you my be doing

[09:02] <autrijus> require 'heya.gaal'

[09:02] <gaal> but we don't like that, do we? :)

[09:02] <autrijus> and then what will its %INC entry be?

[09:02] <autrijus> I do not like it but I see its use.

[09:04] <gaal> why not make require accept only class names? the fs mapping is a runtime detail.

[09:04] <gaal> okay 110 seconds is much too fast.

[09:05] <autrijus> sometime I may really have some perl code is "config.ini"

[09:05] <autrijus> or "foo.conf"

[09:05] <autrijus> or "heya.gaal"

[09:06] <kungfuftr> or blah.pl

[09:06] <autrijus> yes.

[09:06] <gaal> or http://evil.com

[09:06] <theorbtwo> Or 123341232.dump

[09:06] <autrijus> to not allow that is, to quote tim oreilly, "forgetting our working-class roots"

[09:06] <autrijus> ;)

[09:06] <gaal> so write your own loader, or else we need a primitive

[09:07] <gaal> "working class" 

[09:07] <gaal> require

[09:07] <gaal> and a higher level one.

[09:07] <autrijus> but what will %INC be?

[09:08] <gaal> what does the key of p5 %INC mean anyway? it's some sort of key to the module, not to a class

[09:08] <gaal> because MyMod can contain many classes

[09:08] <broquaint> %INC key = join('/', split '::', $name) . ".pm";

[09:08] <autrijus> the key of p5 is filenames used in require.

[09:09] <gaal> i meant what does it conceptually mean

[09:09] <gaal> it's the name of a unit of code

[09:09] <autrijus> it's the name passed to require.

[09:09] <theorbtwo> It's the file (under @INC) that is being required.

[09:09] <broquaint> It's the name of the file the represents a unit of code.

[09:09] <autrijus> that's what it conceptually means.

[09:09] <autrijus> $ perl -e 'require "/home/autrijus/work/pugs/z"; die keys %INC'

[09:09] <autrijus> /home/autrijus/work/pugs/z

[09:09] <autrijus> $ perl -e 'require "z"; die keys %INC'

[09:09] <autrijus> z at -e line 1.

[09:10] <gaal> i suppose i'm saying that there's no reason to use "filenames under @INC".

[09:11] <theorbtwo> But there is, because otherwise you can't record things that are only filenames.

[09:11] <autrijus> require 'auto/Tk/Widget.al';

[09:11] <autrijus> require 'open2.pl'

[09:11] <gaal> i mean i want to widen it, not narrow it

[09:12] <theorbtwo> Have it either be a filename or a somethingelse?

[09:12] <gaal> URI:http://code.com/yourmod

[09:12] <theorbtwo> But then you have to worry if this filename and this somethingelse are really the same thing.

[09:12] <broquaint> As long as it's consistent.

[09:12] <autrijus> you mentioned that %INC for Test.pm should key on 'Test'

[09:12] <gaal> Class:Test

[09:12] <broquaint> Consistent!

[09:12] <autrijus> class:Test  -- it's fine by me.

[09:12] <autrijus> p6l p6l :)

[09:12] <autrijus> (but it's really not test, and not module, and not class)

[09:13] <autrijus> it's rather a file.

[09:13] <broquaint> It should key on an INC object, or some such.

[09:13] <autrijus> require does not deal with packages etc.

[09:13] <autrijus> only "use" does

[09:13] <autrijus> I'm fine to have "use Test" record Test.pm in %INC

[09:13] <gaal> the *actual* file is in the value of %INC (as i know you know :)(

[09:13] <autrijus> as well as module:Test

[09:14] <gaal> okay, i'll get back to this, i want to figure out this too-fast smoke business first.

[09:15] <gaal> what might be causing this output?

[09:15] <gaal> pugs.exe: 1

[09:16] <autrijus> not sure

[09:16] <autrijus> it's an user error using 'error' call

[09:17] <gaal> autrijus, can you review my %*INC patch (opRequire) from earlier today?

[09:17] <gaal> i'm returning VInt 1 if a module has already been used

[09:17] <gaal> so i fear this may be the same 1.

[09:24] <masak> where can one read more about the perl6 semantics of BEGIN et al.?

[09:24] <svnbot6> r5472, autrijus++ | * remove dead code.

[09:25] <autrijus> gaal: url?

[09:25] <autrijus> masak: hw2005 has some writeup

[09:26] <gaal> it's committed as r5466

[09:27] <gaal> # http://rt.openfoundry.org/Foundry/Project/Source/index.html/pugs/diff/src/Pugs/Prim/Eval.hs?rev1=5170&rev2=5466

[09:29] <autrijus> gaal: worksforme

[09:30] <gaal> it worked for me too, but i though it might have been triggering those errors with the precomp Test

[09:31] <masak> autrijus: thx

[09:32] <autrijus> masak: np

[09:32] <autrijus> gaal: hrm, if you change it to return vint 2, see if it fails with 2

[09:32] <autrijus> I doubt it is the case

[09:32] <gaal> doing just that :) but build is slowww

[09:33] <autrijus> unoptimised too?

[09:33] <gaal> i got segfaults trying to mix them

[09:34] <gaal> and i'm shooting for an eventual benchmark of the smoke, so i did need an optimized pugs...

[09:36] <autrijus> nodnod

[09:38] <gaal> like i said, Pugs.Run is so expensive to compile now I'm not sure it's even worth it to precom Test. :(

[09:38] <autrijus> it makes more sense if we produce Test.so.

[09:39] <gaal> yeah

[09:39] <autrijus> which is actually not very hard

[09:39] <gaal> but then we get into hairy platform dependencies.

[09:39] <autrijus> only to make it more portable, Test.pil is probably what we need to shoot for

[09:39] <autrijus> heh, jinx

[09:39] <gaal> yup

[09:39] <gaal> :)

[09:39] <autrijus> and worse case we can just derive Read

[09:39] <autrijus> and read in the PIL expressions

[09:40] <gaal> won't they be very large? PreludePC.hs is huge already.

[09:40] <autrijus> that is likely Fast Enough. if not, we can use DriFT to derive Binary Read

[09:40] <autrijus> akin to Storable's thaw

[09:40] <gaal> jinx again, only you know the stuff better

[09:40] <autrijus> but I think that's a good idea overall :)

[09:40] <autrijus> probably not push Test.pm precomp for 6.2.8 then

[09:40] <autrijus> but please still commit the crippled -- I mean workaround -- Test.pm

[09:41] <autrijus> I'd like to look at it and see how much I can preserve for pirsmoke

[09:41] <gaal> what do you know, it *is* my %*INC guard.

[09:41] <autrijus> ooh.

[09:41] <autrijus> (bbiab)

[09:41] <gaal> why would returning a value trigger an error?

[09:43] <gaal> autrijus: http://perlcabal.org/~gaal/Prelude.pm

[09:43] <gaal> i was in q&d mode, so this has the modified Test tacked on to the Prelude.

[09:44] <autrijus> can you sep it out and commit it back to ext?

[09:44] <autrijus> ext/Test/lib/Test.pm

[09:44] <autrijus> that makes it easier for me to diff and work with chunks

[09:44] <gaal> if this is deemed worthy, i can write an evil mangler^W^Wnefarious mutilator to generate a unified Prelude.pm from Test.pm and the real prelude

[09:44] <gaal> sure.

[09:45] <autrijus> hm, sort of like perl5's prelink build option

[09:45] <autrijus> for platforms without dyld

[09:46] <autrijus> I think it should not be the default, but having it available is a good thing

[09:46] <autrijus> (exactly the same as p5)

[09:46] <gaal> old wheels, new cars

[09:46] <gaal> s/cars/ships/

[09:47] <autrijus> yup :)

[09:47] <gaal> who needs wheels on a ship?

[09:47] <autrijus> exactly

[09:47] * gaal works on getting the hawser in shape

[09:48] <autrijus> there is a pirate joke in there somewhere but I will refrain from uttering it

[09:48] <gaal> arrr.

[09:49] <gaal> there was a problem saying "use" from within a lexical scope, right? was it fixed?

[09:49] <gaal> because i'd omitted 'use v6' in my version out of paranoia

[09:51] <autrijus> I don't think that matters.

[09:52] <gaal> r5473.

[09:54] <gaal> brb

[09:54] <svnbot6> r5473, gaal++ | prelodability mutilations

[09:54] <autrijus> I think I finally fixed export.t

[09:54] <autrijus> testing

[09:59] <gaal> [off-topic] btw, autrijus, when does par use /tmp/par-SYSTEM for a cache? people showed me a case at $work where cgis that used par (don't ask) used that.

[10:00] <autrijus> SYSTEM is usd on win9x and other cases where I can't determine $USER.

[10:00] <autrijus> you can turn that behaviour off with pp -C or runtime with PAR_GLOBAL_CLEAN

[10:01] <gaal> when might that happen on unix? when /etc/passwd was modified under your feet?

[10:02] <autrijus> huh.

[10:02] <autrijus> $ENV{USER} has nothing to do with /etc/passwd

[10:02] <gaal> oh, env! all right.

[10:02] <gaal> thanks. :)

[10:02] <autrijus> np :)

[10:06] * autrijus lols at Installing /usr/local/lib/perl6/site_perl/mach/CORE/pugs/pge/parrot.core

[10:06] <svnbot6> r5474, autrijus++ | * Allow exporting into non-main packages; export.t finally fixed. :)

[10:14] <nothingmuch> morning

[10:15] <svnbot6> r5475, autrijus++ | * more TODOification

[10:15] <svnbot6> r5476, autrijus++ | * fix typo in test.

[10:15] <nothingmuch> autrijus: i need help with continuations, and your MMD

[10:16] <autrijus> my MMD?

[10:16] <nothingmuch> the current implementation in puts

[10:16] <nothingmuch> pugs

[10:17] <autrijus> oh. the current implementation is not at all scientific

[10:17] <autrijus> what help do yo need with cont?

[10:18] <nothingmuch> okay,

[10:18] <nothingmuch> look in t/statements/{next,redo}.t

[10:18] <nothingmuch> we have some horrible bugs

[10:18] <nothingmuch> next and redo behave like calls instead of gotos: the statements right after them in the dynamic scope are returned to

[10:19] <nothingmuch> i've fixed next in while

[10:19] <nothingmuch> but it's pretty ugly

[10:19] <nothingmuch> i think we should generalize them so there is a 'generate a sym that wil goto this code', a bit more specific than genSymCC

[10:19] <autrijus> ah. I can see why.

[10:20] <autrijus> yes.

[10:20] <svnbot6> r5477, autrijus++ | * now export is working, fix the misimporting test

[10:20] <svnbot6> r5478, autrijus++ | * instead of :todo(1), please use :todo<bug>

[10:20] <autrijus> that'd be the right direction

[10:20] <nothingmuch> also look at Monads.hs and tell me if my fix is valid

[10:23] <autrijus> it is valid.

[10:23] <nothingmuch> yumm

[10:24] <nothingmuch>  I had no idea what it was doing, so i was guessing 'undef' is the expression evaluated to make a return value for 'last'

[10:25] <autrijus> yes.

[10:25] <autrijus> "esc undef" is basically shifting out to outer dynamic scope

[10:26] <autrijus> and push undef as the reply

[10:26] <autrijus> the inner dynamic scope is then thrown away

[10:26] <nothingmuch> okay

[10:26] <nothingmuch> goody

[10:26] <autrijus> a dynamic scope is deliminated by resetT

[10:29] <nothingmuch> could you briefly explain Cont in haskell?

[10:29] <nothingmuch> "dynamic scope" means the caller continuation stack maintained by the Cont monad?

[10:30] <autrijus> yes... it is unrelated to envCaller

[10:30] <autrijus> and the "callCC" works inside a stack frame

[10:30] <nothingmuch> we just sync them because it's convenient?

[10:30] <autrijus> yeah

[10:30] <autrijus> callCC snapshots the flow in a stack frame

[10:30] <nothingmuch> callCC replaces the last stackframe with a certain action?

[10:30] <autrijus> and when invoked it resumes execution from there

[10:31] <autrijus> yes

[10:31] <nothingmuch> when who is invoked?

[10:31] <autrijus> when the cc is invoked

[10:31] <autrijus> look at its type

[10:31] <autrijus>  ((a -> m b) -> m a) -> m a

[10:31] <autrijus> it is a "Eval a"

[10:32] <autrijus> that demands one argument

[10:32] <autrijus> the argument is a code that gets the CC

[10:32] <autrijus> if it finishes normally without invoking the CC

[10:32] <autrijus> then the resulting (m a) is the final (m a)

[10:32] <autrijus> if it invokes CC with a

[10:32] <autrijus> -- which may be done in any position -- it does not ever return anyway

[10:32] <autrijus> (hence the m b)

[10:32] <nothingmuch> okay

[10:33] <autrijus> then it escapes out with the a as the final (m a)

[10:33] <nothingmuch> and (a -> m b) is the basically the the point to continue on

[10:33] <nothingmuch> that is the thing right after $?CALLER::POSISITION if there was one in haskell?

[10:33] <autrijus> yes I think that is correct.

[10:39] <nothingmuch> ok, how would you refactor it?

[10:40] <autrijus> sorry; I'm not currently thinking about it.

[10:40] <autrijus> I just got pirsmoke working again

[10:40] * autrijus is firmly in relenging mode

[10:40] <autrijus> so I'd be happy to answer questions, but more high level thinking needs to wait until 6.2.8

[10:41] <autrijus> (I apologize for the inconvenience)

[10:41] <gaal> autrijus, i'm not working on Test.pm now (out of ideas re: the error). are we punting on that?

[10:41] <autrijus> gaal: yes, punting on precomp Test

[10:41] <gaal> ok

[10:41] <autrijus> I doubt the gain anyway

[10:41] <gaal> me too

[10:41] <autrijus> good we agree :)

[10:42] <nothingmuch> autrijus: so should I just repeat what I did?

[10:42] <autrijus> nothingmuch: that would be good

[10:42] <svnbot6> r5479, autrijus++ | * more unTODO and TODOify

[10:42] <svnbot6> r5480, autrijus++ | * `make pirsmoke` revived.

[10:42] <nothingmuch> okay

[10:42] <gaal> i just hoped to be able to *measure* it :) but ther's no rush.

[10:42] <nothingmuch> can I do what I did in Monads outside of Monads?

[10:44] <nothingmuch> how is line 380 of Eval.hs (genSymCC "&next") different from any &last?

[10:45] <autrijus> you can do it in Eval.hs directly

[10:46] <autrijus> line 380 captures the point where the next line is runBody

[10:46] <autrijus> so people invoking symNext will then run that.

[10:46] <autrijus> hence, next

[10:46] <nothingmuch> oh, i see

[10:47] <theorbtwo> It doesn't, it just happens at a different time, IOW.

[10:47] <nothingmuch> so how does &last get defined?

[10:47] <nothingmuch> i.e., how is there a symbol

[10:47] <theorbtwo> Which is good, because next doesn't differ from last, except where they go.

[10:47] <nothingmuch> if it happens later?

[10:47] <nothingmuch> or is 'runBody res sub'' not executed at all?

[10:48] <nothingmuch> oh, whoops

[10:48] <autrijus> I hoped I don't have to explain that :)

[10:48] <autrijus> (the genSymCC for &last is the end of the reduction.)

[10:48] <nothingmuch> i was reading it incorrectly, nevermind

[10:48] <nothingmuch> i got it now

[10:48] <autrijus> cool

[10:49] * nothingmuch tries to see how todo might be written

[10:49] <nothingmuch> s/todo/redo/

[10:51] <autrijus> I need to run to dinner. down to 8 failed testfiles now

[10:51] <autrijus> (in the main suite)

[10:51] <gaal> wow

[10:51] * autrijus hopes to crush them during dinner

[10:52] <autrijus> Tree is still burning, as is Date and DateTime

[10:52] <autrijus> spare tuits to look at them welcome

[10:52] <nothingmuch> autrijus: i looked at date/datetime

[10:53] <nothingmuch> the problem is that MMD is selecting the wrong BUILD

[10:53] <nothingmuch> or at least a problem

[10:53] <nothingmuch> i tried to hack your MMD

[10:53] <nothingmuch> but didn't get far

[10:53] <autrijus> if they are beyond repair for the moment, add them to MANIFEST.SKIP please

[10:53] <nothingmuch> i don't think so

[10:53] <theorbtwo> Better: Add a test for the underlying problem, and put them both in MANIFEST.SKIP.

[10:53] <autrijus> right.

[10:54] <nothingmuch> the case is that BUILD(Str $string) is somehow bound to new(epoch => 123);

[10:54] <autrijus> er, the test for underlying problem can be a dies_ok

[10:54] <nothingmuch> even though there is a BUILD (Int|Real +$epoch) {

[10:54] <gaal> note that i hacked on Test.pm - I may have introduced a bug

[10:55] <nothingmuch> when Str is commented out, then submethod BUILD () is used instead.

[10:55] <gaal> unlikely since 7000 tests still pass, but still :)

[10:55] <nothingmuch> gaal: what did yo8u hack?

[10:56] <gaal> workarounds to allow it to be precompiled

[10:56] <jaggers> guys sorry for the interruption , i need a bit of help 

[10:56] <autrijus> Time::Local can't numify anymore? hrm

[10:56] <gaal> they can be reverted, in a pinch -- we're not precompiling for this release.

[10:56] <autrijus> it should have numified to the original time() no? or am I mistaken

[10:57] <jaggers> i ve been to trying to connect to DALnet  , but not successful , i was able to connect thru win XP , but not able to connect thru fedora 4 

[10:57] <nothingmuch> autrijus: anyway, should (epoch => 123) bind to (Str $string

[10:57] <gaal> autrijus, did Time::Local ever numify?

[10:57] <nothingmuch> ) at all?

[10:57] <autrijus> gaal: hrm, t/builtins/io/time.t tested something weird

[10:58] <svnbot6> r5481, autrijus++ | * fix borken test due to nonnumiability of Time::Local

[10:58] <autrijus> nothingmuch: no, it should decidedly fail

[10:58] <autrijus> ok, two more fails bite the dust.

[10:58] <autrijus> really need to run for dinner now. I'll be back in (say) a hour

[10:58] * autrijus waves &

[10:58] <gaal> jaggers, wrong channel?

[10:59] <jaggers> i dunno 

[10:59] <Aankhen``> gaal >> You can't just use a regular, older version of Test.pm?

[10:59] <jaggers> this is wat is keeps saying GAAL

[10:59] <jaggers> * Looking up irc.dal.net

[10:59] <jaggers> * Connecting to irc.dal.net (194.68.45.50) port 6667...

[10:59] <jaggers> * Connection failed. Error: Connection timed out

[10:59] <jaggers>  Cycling to next server in DALnet...

[10:59] <jaggers> * Disconnected ().

[10:59] <gaal> jaggers: this is for perl6 development, i don't think we can help you

[11:00] <jaggers> am sorry gaal

[11:00] <gaal> Aankhen``: sure, i was saying, we can revert if necessary

[11:00] <Aankhen``> Ah.

[11:00] <Aankhen``> Right, I missed that. :-)

[11:00] <nothingmuch> autrijus: how do i comkpose the return of genSymPrim and genSymCC? symRedo . symNext doesn't work anymore

[11:00] <gaal> jaggers, no problem

[11:00] <nothingmuch> do I need to call updateSubPad N times?

[11:01] * Juerd wonders what lwall has been smoking.

[11:02] <lightstep>  blue sugar?

[11:03] <wilx> DALnet isn't dead?

[11:03] <svnbot6> r5482, autrijus++ | * restore PUGS_VERSION.

[11:04] <jaggers> no i cud connect to DALnet thru win XP , while iam not able to connect from fedroa 4 

[11:04] <Aankhen``> Juerd >> What prompted that wondering?

[11:04] <Juerd> Aankhen``: .foo will be forbidden whenever a topic is used in a method.

[11:05] <Juerd> that is: method foo { given $something { .foo } } will be a compile time error

[11:05] <Aankhen``> Ah, that threw me off too.

[11:05] <Juerd> See also my post, of which the subject matches /WTF/

[11:05] <Aankhen``> That should be interesting. :-)

[11:05] <Juerd> I'm amazed and very upset at the same time. This time, I really did lose confidence in Larry.

[11:06] <Juerd> I had anticipated a lot, but not this.

[11:06] <nothingmuch> oh man!

[11:07] <nothingmuch> that sucks

[11:07] * nothingmuch wrote a lot of code that uses ./foo and .foo to disambiguate with *HEAVY* (read 2-3 layer nested) topicalization

[11:07] <nothingmuch> and it was nice code to write

[11:07] <nothingmuch> not confusing

[11:08] <Aankhen``> I used it a lot too... not 2-3 nested layers, but enough that this sucks.

[11:08] <svnbot6> r5483, iblech++ | * Finished the move of pugsbugs/export.t to packages/export.t and added another test.

[11:08] <svnbot6> r5483, iblech++ | * Usual svn props added to new t/statements/redo.t.

[11:09] <Aankhen``> Juerd++ # for writing it up :-)

[11:09] <Juerd> Please let your opinion be heard on the mailinglist as well

[11:10] <Juerd> If only an AOL-ese response.

[11:11] <nothingmuch> done

[11:12] * Juerd goes to collect some cash from a client

[11:12] <Juerd> His time is up.

[11:13] <Juerd> Bye

[11:13] <nothingmuch> good luck

[11:14] <Aankhen``> See ya.

[11:15] * Aankhen`` 's "me too" post has been sent.

[11:16] <lightstep> what's with the tendency to preform monadic actions in procedures? like genSymPrim doesn't return m(Pad->Pad), or ifListContext doesn't return (m Bool) ?

[11:17] <lightstep> what about separation of concerns?

[11:17] <nothingmuch> lightstep: please separate concerns... that code is confusing me =)

[11:32] <svnbot6> r5484, Aankhen++ | * t/data_types/enum.t: added a few tests, modernised some of the older tests.

[11:32] <svnbot6> r5485, Aankhen++ | * t/data_types/enum.t: added 'hex' enum.

[11:34] <nothingmuch> autrijus: 

[11:34] <nothingmuch> eep

[11:36] <gaal> http://perlcabal.org/~gaal/smoke_xp.html # r5466

[11:42] * theorbtwo wonders what bonus: 0 means in the tests.yml file.

[11:42] <svnbot6> r5486, Aankhen++ | * t/data_types/enum.t: fixed a few mistakes in the previous commit related to quoted numbers.

[11:43] <gaal> more tests run than planned, iirc

[11:43] <nothingmuch> autrijus: help

[11:45] <pasteling> "nothingmuch" at 212.143.91.217 pasted "code that makes infinite loops" (27 lines, 1.2K) at http://sial.org/pbot/11709

[11:45] <nothingmuch> my impl of for is looping into the redo continuation infinitely

[11:45] <nothingmuch> why is that?

[11:54] <svnbot6> r5487, iblech++ | pugs::run -- Added entry about %*ENV<PUGS_COMPILE_PRELUDE>. autrijus: Please

[11:54] <svnbot6> r5487, iblech++ | fill in the XXX, thanks :)

[12:01] <svnbot6> r5488, nothingmuch++ | Ugly fix for redo in for loops

[12:02] <nothingmuch> genSymCC needs to be redone

[12:02] <nothingmuch> it's no good when there are more than 2 escapes involved

[12:06] <nothingmuch> iblech--; # made my recompilation cycle slow

[12:08] * Limbic_Region shakes his head in disbelief

[12:08] <nothingmuch> lightste1: 

[12:08] <nothingmuch> Limbic_Region: ?

[12:09] <Limbic_Region> nothingmuch - did you follow the GHC perl.exe conversation I was having yesterday?

[12:09] <nothingmuch> no

[12:09] <nothingmuch> fill me in?

[12:09] <Limbic_Region> long story short then

[12:10] <Limbic_Region> ghc ships with a perl binary at the root install directory, windows is broken with regards to . and PATH so if you are there you get GHC's perl, if you remove it you won't know it is a problem right away and even then the error message is too cryptic to know what the problem was

[12:11] <Limbic_Region> so I recommended 3 things that could make it more user friendly - rename the binary, improve the error message, have it look at %PATH as a backup

[12:11] <nothingmuch> ghc ships with perl? wtf?

[12:11] <Limbic_Region> well - after a long series of emails trying to convince each other of the validity of our respective perspectives

[12:12] <theorbtwo> Probably because of the evil glasgow haskell compiler, what ghc uses to bootstrap with.

[12:12] <nothingmuch> heh

[12:12] <Limbic_Region> I got an email from a guy at microsoft saying that Windows is broken WRT to . and PATH and that renaming the exe and documenting the fact that changing the root install directory is bad would be a good thing

[12:13] <Limbic_Region> nothingmuch - if you are really interested in why GHC ships with a perl binary - grep yesterday's logs - autrijus linked to relavent sources IIRC

[12:13] * Limbic_Region was just shaking his head in disbelief of what he saw coming from a microsoft guy - in writing - from his microsoft account

[12:13] <nothingmuch> pok^H^H^Hk^H^Hnah

[12:13] <nothingmuch> i can't type today

[12:13] <nothingmuch> that was the weirdes typo ever

[12:14] <lightste1> he's at MS research, not in MS evil empire

[12:15] <Limbic_Region> simon marlow not the other simon - but I suspect you are still correct lightste1

[12:15] *** lightste1 is now known as lightstep

[12:20] <nothingmuch> fixses tricksy bugses

[12:22] <nothingmuch> anyone feel like untodoing?

[12:23] <Aankhen``> Are nested `gather/take`s allowed?

[12:23] <svnbot6> r5489, nothingmuch++ | Same ugly fix for next/redo in loop(;;){} loops

[12:23] * Aankhen`` tries it.

[12:23] <nothingmuch> wait, more on the way

[12:23] <theorbtwo> Should be allowed, I think.

[12:23] <theorbtwo> Might not presently work, though.

[12:23] <nothingmuch> Aankhen``, theorbtwo: i think it does work

[12:24] <nothingmuch> luqui and I used it in the pil -> p5

[12:24] <Aankhen``> Doesn't seem to.

[12:24] <Aankhen``> Hrm.

[12:24] <Aankhen``> Pugs is fabricating array elements.

[12:24] <Aankhen``> pugs> gather { take "a"; take (gather { take "JUMPED IN!"; take "AGAIN!" }); tak

[12:24] <Aankhen``> e "c"; };

[12:24] <Aankhen``> ('a', 'b', 'c', 'd')

[12:24] <nothingmuch> okay, then it did work ;-)

[12:24] <Aankhen``> Am I missing something?

[12:25] <nothingmuch> oh wait, gather take, not given when

[12:25] * nothingmuch idiot

[12:25] <Aankhen``> `gather { take "foo" }` is like `my @ret = (); push @ret, "foo";`, right?

[12:25] <svnbot6> r5490, nothingmuch++ | Fix redo test and implementation of next for loop(;;){}

[12:25] <svnbot6> r5491, nothingmuch++ | redo fixed for while loops... code needs cleanup

[12:26] <QtPlatypus> Aankhen``: Yes.

[12:26] <theorbtwo> Roughly, but with extra added funky lazy goodness.

[12:26] <QtPlatypus> theorbtwo: In a lazy context.

[12:26] <Aankhen``> Indeed.

[12:27] <Aankhen``> pugs> gather { take "a"; take "b"; }

[12:27] <Aankhen``> ('a', 'b')

[12:38] <svnbot6> r5492, autrijus++ | * Fix the broken handling of %INC -- the blind `VInt 1`

[12:38] <svnbot6> r5492, autrijus++ |   broke `use Foo; use Foo;` because the second one does

[12:38] <svnbot6> r5492, autrijus++ |   not return a VControl ControlEnv as it should.

[12:38] <svnbot6> r5493, autrijus++ | * identity test for functions should now pass; Eq and Ord

[12:38] <svnbot6> r5493, autrijus++ |   for function and dynamics redefined to base on 'show'.

[12:38] <svnbot6> r5494, autrijus++ | * more TODOify.

[12:40] <autrijus> two left: export, examples

[12:40] <autrijus> rafl is working on having lib/* installing to sane paths

[12:40] <autrijus> (maybe list them as subdirs?)

[12:41] <autrijus> I'm still fixing export #2 and examples/quicksort; after that I'll clean up modules. if lib/ installation is done by then we'll enter preflight.

[12:42] <nothingmuch> autrijus: before preflight, i'd like you to look at Date vs MMD with me

[12:42] <nothingmuch> i think the problem is simple

[12:42] <nothingmuch> but I don't know

[12:42] <nothingmuch> either way, all next/last/redo statements are contized now

[12:44] <autrijus> nothingmuch++ # wonderful, seriously

[12:44] <svnbot6> r5495, autrijus++ | * align signature_matching's todoity with reality

[12:44] <autrijus> nothingmuch: can you reduce the problem to something in the main test suite?

[12:44] <nothingmuch> i'm not 100% sure

[12:45] <nothingmuch> i'm having trouble actually diagnosing the dispatch problem

[12:45] <autrijus> please try anyway; I'll have tuit to look at that after I fix export and quicksort

[12:45] <nothingmuch> okay

[12:46] <autrijus> mm backlash in p6l

[12:46] * autrijus steps back very slowly

[12:47] <nothingmuch> the .foo forbidden thread?

[12:48] <autrijus> yup

[12:48] <broquaint> Ignore p6l, it's just noise.

[12:48] <autrijus> broquaint: sometimes noise makes into synopsis :)

[12:49] <nothingmuch> food!

[12:49] <broquaint> Good idea!

[12:50] * broquaint away & # insert pie into piehole

[12:51] <castaway> bah, me hungry

[12:54] * Limbic_Region looks around for bah - doesn't see them and says nice to meet you hungry - me L~R

[12:55] * castaway pokes Limbic_Region 

[12:55] * nothingmuch swings from a vine, and saves Limbic_Region from hungry's poking

[12:55] <castaway> this getting a visa thing is turning out to be more complicated than we thought :(

[12:55] <nothingmuch> me tarazan, you jean husband

[12:56] * Limbic_Region rewards nothingmuch's gallantry with a bananna

[12:57] * nothingmuch is offended by Limbic_Region's obcenety

[12:57] <Limbic_Region> WRT the .method acting on $self thread - is the OO code currently written still valid

[12:59] <Limbic_Region> I really should have been following that thread closer

[13:09] <autrijus> Limbic_Region: glad to hear spj resolved the bug

[13:09] <autrijus> calling it ghc-perl.exe would be good enough 

[13:09] <autrijus> or was it jeffacake?

[13:10] <autrijus> *JaffaCake

[13:15] <svnbot6> r5496, autrijus++ | * JeffaCake notes that there is now Linux x86_64 GHC snapshots,

[13:15] <svnbot6> r5496, autrijus++ |   and we should reflect this in INSTALL.

[13:26] <Limbic_Region> it was spj that noted clearer docs and renaming the exe were no effort things that could make it easier on the next person

[13:26] <autrijus> Limbic_Region: cool.

[13:27] <Limbic_Region> I feel really good about the exchange since the original reaction was - you really shouldn't be doing that and I can't think of a good reason why anyone else would

[13:28] <Limbic_Region> autrijus - fwiw, there is a "should I develop in p5 or wait till p6" thread at the monastery - I can post link if interested

[13:28] <autrijus> sure, url?

[13:28] <stevan> autrijus: is Tree still burning?

[13:28] <autrijus> stevan: yes

[13:28] <stevan> morning BTW :)

[13:29] <stevan> autrijus: I think I did that, so I will go fix :)

[13:29] <autrijus> please do :) it's something about Tree::BUILD

[13:29] <stevan> ah

[13:29] <stevan> ok

[13:29] <stevan> I didnt do *that*, but I will fix none the less :)

[13:30] <Limbic_Region> http://perlmonks.org/index.pl?node_id=474125

[13:31] * stevan wonders why more people arent using Pugs in production :)

[13:32] <integral> too slow

[13:32] <autrijus> indeed.

[13:33] <stevan> bah! good things come to those who wait :)

[13:33] <autrijus> we really need PIL->P5 to convince the production crowd of adopters

[13:33] <QtPlatypus> Keeps changing.

[13:33] <integral> and I don't trust parrot, and PIR output isn't good enough yet

[13:33] <Limbic_Region> I would be less concerned about the slowness factor than the stability

[13:33] <autrijus> QtPlatypus: strangely though, there are very few regressions in each release

[13:34] <Limbic_Region> having correct code that is only going to get faster wouldn't be a big concern for me

[13:34] <autrijus> but "keeps getting new and/or previously unspecced stuff" indeed

[13:34] <Limbic_Region> but having code that may be b0rk in two days because the wind changes directions would really p!$$ me off

[13:35] <Limbic_Region> I would likely have fun with refactoring previously stable code after new and exiting features were added

[13:35] <autrijus> nodnod.

[13:35] <Limbic_Region> but having to deal with all the changes all at once would just be too much

[13:36] <lumi> The Lilypond folk have a version porter

[13:44] <gaal> interesting thing, with the %*INC bug. i thought the typechecker would refuse to accept such things :)

[13:44] <autrijus> gaal: it's not a typechecker thing

[13:44] <autrijus> gaal: VControl ControlEnv is still a Val.

[13:45] <gaal> well, i suppose that means i can get back to experimenting with precomp Test. i have a 4596 smoking now, though i did forget to look at the build start time.

[13:46] <autrijus> gaal: the smoke report has a "duration"key.

[13:46] <autrijus> it's listed at top of html

[13:46] <autrijus> I should know, I asked for that :)

[13:46] <gaal> yes, i know (i added it) but it only counts the smoke itself.

[13:46] <Limbic_Region> hmmm - given my limited understanding of Win32 architecture - I find this behavior a bit odd

[13:46] <autrijus> heh, right, and I was about to say you implemented it iirc

[13:47] <Limbic_Region> I am in the middle of building Pugs and I decide I want to abort, svn up, and make clean

[13:47] <Limbic_Region> I hit ctrl-C and get the prompt back

[13:47] <gaal> i'll time the second pass.

[13:47] <Limbic_Region> I type exit - and it just sits there

[13:47] <Limbic_Region> I check the process table and GHC is still running

[13:47] <gaal> l~r: similar things happen to me too

[13:47] <Limbic_Region> shouldn't GHC have died when I killed the make process since Win32 doesn't have a real fork/exect ?

[13:47] <autrijus> it means it uses CreateProcess

[13:48] <autrijus> but failed to capture SIGINT

[13:48] <Limbic_Region> which for all intents and purposes is the same thing?

[13:48] <autrijus> I think it's a GHC issue.

[13:48] <Limbic_Region> heh - not going there autrijus

[13:48] <autrijus> JaffaCake is still in #haskell -- maybe ask him there :)

[13:49] <Limbic_Region> I am 1 and 0 

[13:49] <autrijus> (== simon marlow)

[13:49] <gaal> what i've seen is that ^Cing the tests sometimes takes some time to kick in.

[13:49] <svnbot6> r5497, Stevan++ | Tree - putting out the fire (i think)

[13:49] * Limbic_Region wants to retire a winner

[13:49] <autrijus> lol

[13:49] <Limbic_Region> anyway - I have started another build on trunk so I will be AFK for about 45 mins

[13:49] * Limbic_Region AFK &

[13:50] <autrijus> ok, quicksort is the only remaining main suite failure

[13:54] <svnbot6> r5498, autrijus++ | * export.t -- putting out the fire (I think)

[13:54] <svnbot6> r5499, Stevan++ | Tree - pouring more water on the fire .oO( <smoke> )

[13:55] * castaway laughs

[13:59] <gaal> are you getting failures on pugsrun/09- and 10- ? win32

[13:59] <autrijus> iblech++ # creative use of pzero to parse `multi foo { }`

[14:00] <svnbot6> r5500, Stevan++ | Tree - .oO( *cough* *cough* )Oo.

[14:05] <svnbot6> r5501, Stevan++ | Tree - only *you* can prevent forest fires :)

[14:05] <svnbot6> r5502, autrijus++ | * reflect the `multi foo` shorthand for `multi sub foo` in quicksort

[14:05] <svnbot6> r5502, autrijus++ |   and in ChangeLog

[14:05] <svnbot6> r5503, autrijus++ | * add minimal test case for the quicksort testfail in multi_sub.t.

[14:05] <svnbot6> r5504, autrijus++ | * avoid duplicate #define in Pugs.Version

[14:05] <svnbot6> r5505, rafl++ | Added Makefile.PL for Inline::Pugs.

[14:06] *** wilx` is now known as iwlx

[14:06] *** iwlx is now known as wilx

[14:07] <stevan> autrijus: the Tree fire is out

[14:07] <geoffb> Morning, all . . .

[14:07] <stevan> looked like it had to do with the BUILD MMD 

[14:07] <autrijus> wonderful.

[14:07] <stevan> morning geoffb :)

[14:08] <autrijus> Perl::MetaModel is still burning

[14:08] <rafl_> Hm. I try to rename lib/Inline to lib/Inline-Pugs, but svk gives me: Merging back to mirror source http://svn.openfoundry.org/pugs.

[14:08] <rafl_> Commit message saved in svk-commitTkN4a.tmp.

[14:08] <rafl_> Why?

[14:08] <autrijus> I'm rapidly thinking we should move docs to notes and ditch all code in ext/

[14:08] <stevan> autrijus: that's mugwumps

[14:08] <gaal> pcTest build phase near completion.

[14:08] <stevan> I dont think it is meant to be executable

[14:08] <autrijus> unless mugwump is willing to maintain the p6 equiv to the p5 one in lib

[14:08] <autrijus> in which case it should be made to pass tests

[14:08] <stevan> autrijus: we can move lib/ into docs/

[14:08] <stevan> as they are really just notes IMO

[14:09] <autrijus> mugwump: ideas?

[14:09] <autrijus> rafl_: hm? curious.

[14:09] <autrijus> rafl_: but that'd be wrong still

[14:09] * stevan also questions the sanity of the contents of docs/* now

[14:09] <rafl_> autrijus: Why?

[14:09] <autrijus> better to mkdir lib/Inline-Pugs/lib/Inline/

[14:09] <autrijus> and then move Pugs.pm there

[14:10] <rafl_> autrijus: OK.

[14:12] <nothingmuch> moose!

[14:12] <svnbot6> r5506, Stevan++ | Tree - oh no! it still burning <stomp> <stomp>

[14:12] <nothingmuch> stevan: i'm stuck with haskell, so wanna do sigs?

[14:13] <clkao> rafl_: hmm? why would you see that merge back thing when you do mv? or you mean duiring the commmit?

[14:13] * castaway grins at the svn messages

[14:13] <rafl_> clkao: Yes.

[14:14] <stevan> nothingmuch: sure, but I will want your input

[14:14] <autrijus> also, we have conflicting Date.pm in DateTime and Date

[14:14] <stevan> castaway: :)

[14:14] <nothingmuch> no, i mean want me to do thjem?

[14:14] <nothingmuch> and help out a bit?

[14:14] <nothingmuch> MMD in pugs is a bit too hairy for me

[14:14] <autrijus> which means we clearly need to work on multiname library support

[14:15] <rafl_> Hm. I don't get it. How can I reset my local svk copy to that version on the server?

[14:15] <nothingmuch> rafl_: rm -rf...

[14:15] <autrijus> but seeing Date.pm is all stub, maybe I'll just MANIFEST.SKIP it for the release.

[14:15] <stevan> nothingmuch: ok, but I have to do $work today too

[14:15] <autrijus> (Date.pm in ext/Date/, that is)

[14:15] <nothingmuch> stevan: ok

[14:15] <autrijus> mugwump: ideas?

[14:17] <nothingmuch> i think we should namespace it a bit like CPAN

[14:17] <QtPlatypus> How so nothingmuch ?

[14:17] <svnbot6> r5507, autrijus++ | * DateTime - remove the erroneous use of colon

[14:17] <nothingmuch> lib/AUTHOR/Module-Name-0.01/Module/Name.pm

[14:17] <nothingmuch> autrijus: now that you've removed the colon from datetime, there are MMD match errors

[14:18] <nothingmuch> with AUTHOR not being only uppercase

[14:18] <nothingmuch> and not being limited to 8 chars

[14:19] <nothingmuch> maybe lib/AUTHOR/Module-Name-0.01/lib/Module/Name.pm so that it's a bit more extensible

[14:19] <nothingmuch> btw, since we're in preflight, smoke report just finished

[14:19] <Khisanth> hmm

[14:20] <gaal> we're in preflight?

[14:20] <nothingmuch> it sounds like it

[14:20] <gaal> i'll have pcTest smoke results up in a bit.

[14:20] <nothingmuch> burning trees, everyone wading through bugs

[14:21] <nothingmuch> seen geoffb

[14:21] <castaway> geoffb went to bed earlier (several hours ago?)

[14:21] <nothingmuch> perlbot: seen geoffb?

[14:21] <nothingmuch> ah, ok

[14:21] <Limbic_Region> seen geoffb

[14:21] <nothingmuch> Limbic_Region: jabbot isn't here

[14:22] <Limbic_Region> ahh - perlbot doesn't keep track 

[14:22] <gaal> i'm tempted to add a progress indicator to the harness :)

[14:22] <geoffb> Um, right here

[14:22] <stevan> I just saw geoffb about 20 min ago

[14:22] <geoffb> what's up guys?

[14:22] <stevan> there he is,... get em!!!

[14:22] <nothingmuch> geoffb: all of your bugs are belong to past

[14:22] <nothingmuch> do you have any more tests?

[14:22] <gaal> stevan++ # nothing special, i just like your attitude

[14:23] <QtPlatypus> geoffb was last seen 15 minits ago.

[14:23] * castaway scratches head.. 8short sleeper?)

[14:23] <stevan> gaal++ # coffee is goooooddddd

[14:23] <geoffb> nothingmuch, they're all fixed?  Schweet

[14:23] <nothingmuch> gaal: while you're at it, make the parallel harness truely async

[14:23] <geoffb> castaway, yeah, only one sleep cycle last night, instead of two . . . :-/

[14:23] <gaal> suuuure

[14:23] <nothingmuch> parent prints test file names (padded) to pipe

[14:23] <autrijus> we're not yet in preflight because I'm quickly running out of sanity :)

[14:23] <gaal> nothingmuch: if it were written in p6, i'd consider it

[14:23] <nothingmuch> child processes sysread them, and unpack("Z*")

[14:24] <gaal> but it has to work portably.

[14:24] <geoffb> nothingmuch, I'm still reading backlog ATM . . . and last night I put all my energy into docs/notes/plan before falling into bed

[14:24] <gaal> okay, the results are in:

[14:24] <gaal> pcTest is indeed much faster to run (duh!)

[14:24] <autrijus> question is how much and whether it makes up for the comp time

[14:24] <gaal> 782 sec instead of 1368

[14:24] <nothingmuch> autrijus: are you wokring on datetime?

[14:25] <gaal> however, the 2nd compilation phase is about five minutes on my machine

[14:25] <autrijus> nothingmuch: no, I just saved it from parsefail

[14:25] <nothingmuch> autrijus: are you planning on working on it?

[14:25] <autrijus> gaal: so that's still 5 mins saved

[14:26] <autrijus> nothingmuch: my plan doesn't matter... my body will force me into blissful sleep in 10 minutes

[14:26] <autrijus> so not until I wake up, no

[14:26] <gaal> and of course, we already pay some of those 5 minutes on account of the pcPrelude

[14:26] <gaal> i can get the exact delta if it's interesting.

[14:26] <autrijus> gaal: if it can be made optional, I think definitely check it in

[14:27] <geoffb> gaal, but pcPrelude itself already saves net time, yes?

[14:27] <autrijus> "it" being the evil mangler thing you referred to

[14:27] <gaal> it can of course be made so, but i don't want to bloat the build system more

[14:27] <gaal> geoffb, sure it does.

[14:28] <geoffb> I just didn't understand your "we already pay some of those 5 minutes" comment

[14:28] <gaal> i like evil manglers, but i don't like having too many knobs

[14:28] <svnbot6> r5508, rafl++ | * Moved lib/Inline to lib/Inline-Pugs.

[14:28] <svnbot6> r5509, autrijus++ | * untodo the now passing next/redo tests, nothingmuch++

[14:28] <autrijus> gaal: bah, the build system can survive another bloat. :) but it's ultimately your call

[14:28] <autrijus> geoffb: the Run.hs 5min build includes both Prelude.pm and Test.pm

[14:28] <rafl_> Can u push the Version of Perl6/Pugs.pm to 6.002008?

[14:28] <gaal> here's my proposal:

[14:28] <autrijus> rafl_: you can do that.

[14:28] <geoffb> AH, gotcha, thanks autrijus 

[14:28] <gaal> put all those build options in a yaml file

[14:28] <gaal> including whether to optimize or not

[14:28] <geoffb> clearly short on sanity from lack of sleep

[14:29] <gaal> and pcPrelude or nor

[14:29] <nothingmuch> and ghc heap size

[14:29] <gaal> and all other things

[14:29] <gaal> and nothingmuch heap size

[14:29] <gaal> errr

[14:29] <gaal> how about that?

[14:29] <nothingmuch> i like it

[14:29] <geoffb> All in favor say aye?  Aye.

[14:29] <nothingmuch> aye

[14:30] <autrijus> I don't particularly like to depend on YAML.pm :)

[14:30] <autrijus> but I can see a minimal yaml parser in two lines

[14:30] <autrijus> so, aye.

[14:30] <gaal> split /:/ :-)

[14:30] <autrijus> but please leave nothingmuch's heap size out of it

[14:31] <nothingmuch> what's bad about a YAML dependency?

[14:31] <gaal> lol

[14:31] <gaal> i had a feeling you'd say that

[14:31] <stevan> we already have a YAML dep for the smoker

[14:31] <autrijus> nothingmuch: it  will increase our dependency list by +Inf times

[14:31] <autrijus> (it's currently 0)

[14:32] <gaal> err, not so, autrijus, we already need a newish MM

[14:32] <nothingmuch> yaml's meta.yml:

[14:32] <nothingmuch> build_requires:

[14:32] <nothingmuch>   Test::More: 0.54

[14:32] <nothingmuch> requires:

[14:32] <nothingmuch>   perl: 5.005003

[14:32] <geoffb> dependency list 0? bwa-ha-ha-ha-haaaa . . . 

[14:33] * geoffb remembers the day spent finding and building various haskell dependencies for pugs . . . .

[14:33] <autrijus> gaal: er, that means 5.6.2 or 5.8.1

[14:33] <autrijus> gaal: hardly newish

[14:33] * stevan ... "I get by with a little help from my friends... gonna try with a little help from my friends"

[14:33] <autrijus> geoffb: CPAN dependency list, silly :)

[14:33] <gaal> well, fwiw, that means you can't build on a vanilla msys.

[14:33] <geoffb> autrijus, I knew that, it just hit my funny bone

[14:33] <gaal> not that i know of anyone who still does that

[14:34] <autrijus> but anyway. I'd like to avoid depending on a noncore 5.8.1 module as much as possible.

[14:34] <gaal> but maybe that proves my point

[14:34] <gaal> anyway:

[14:34] <nothingmuch> YAML has almost no deps

[14:34] <gaal> i'm fine with parsing yaml ourselves

[14:34] <gaal> minimally

[14:34] <kungfuftr> JSON!

[14:35] <autrijus> cool.

[14:35] <gaal> ?

[14:35] <autrijus> gaal++ # make it so then :)

[14:35] <autrijus> JSON is a weird YAML dialect that is somehow welcomed by javascript folks

[14:35] <gaal> okay, i think i'll phone gabor and pick up the wiki router for the hackathon first.

[14:36] <rafl_> Hm. What about P5-PIL-Run? What is it needed? Should it be installed? Looks suspicious to me.

[14:36] <kungfuftr> JSON isn't YAML

[14:36] <clkao> rafl_: ah, you just hit a bug  which is fixed in 1.01 i guess.

[14:36] <autrijus> actually, all valid JSON is valid YAML, iirc.

[14:36] <rafl_> clkao: What bug?

[14:36] <geoffb> hmmm . . . why not just include YAML in inc/?

[14:36] <stevan> rafl_: that should not be installed, and neither should Perl6-MetaModel

[14:36] <kungfuftr> autrijus: JSON can be a single line

[14:36] <autrijus> so can yaml.

[14:36] <kungfuftr> and be a huge data structure

[14:36] <rafl_> clkao: Oh, you mean the svk thing? Yes. Maybe. It works now.

[14:36] <clkao> rafl_: mv tries to do funky things

[14:36] <autrijus> ditto.

[14:36] <kungfuftr> *blink*

[14:36] <rafl_> stevan: OK.

[14:36] <kungfuftr> 2 secs

[14:37] <gaal> it doesn't say "yaml" anywhere on http://www.crockford.com/JSON/index.html -- but i don't know if that's the official page

[14:37] <kungfuftr> http://www.crockford.com/JSON/index.html ?

[14:37] <autrijus> kungfuftr: and YAML.pm is horribly outdated and broken. :)

[14:37] <autrijus> yes

[14:37] <gaal> kff: 1st google hit

[14:37] <stevan> rafl_: FYI, P5-PIL-Run is the start of the Perl 5 runtime for PIL/Perl6

[14:37] <autrijus> kungfuftr: http://redhanded.hobix.com/inspect/yamlIsJson.html

[14:37] <kungfuftr> ah!

[14:38] <autrijus> all other languages get to use a nonbroken YAML implementation

[14:38] <autrijus> except for Perl5 :)

[14:38] <svnbot6> r5510, rafl++ | * Moved lib/Perl6 to lib/Perl6-Pugs.

[14:38] <svnbot6> r5510, rafl++ | * Bumped up version of Pugs.pm to 6.002008.

[14:38] <svnbot6> r5510, rafl++ | * Moved lib/pugs* to lib/Perl6/Pugs.

[14:38] <svnbot6> r5510, rafl++ | * Added Makefile.PL for lib/Perl6/Pugs

[14:38] <svnbot6> r5511, autrijus++ | * more TODO juggling in light of the namespace fixes.

[14:39] <kungfuftr> so you can use the JSON parser instead?

[14:40] <gaal> is yaml.pm core in any versio of p5?

[14:40] <autrijus> gaal: no.

[14:40] <autrijus> kungfuftr: no... Syck can parse JSON; the reverse isn't neccessarily true

[14:41] <geoffb> So, at the risk of repeating myself, why not just have a YAML parser in inc/?

[14:41] <geoffb> Rather than writing from scratch?

[14:41] <kungfuftr> autrijus: bah... soz... head's away with it... too warm here

[14:41] <autrijus> geoffb: I guess 62k isn't much

[14:42] <autrijus> it's pushing it a bit

[14:42] <autrijus> and if all we are using is a single hash with no nestedness, then it's quite wasteful

[14:42] <geoffb> It get 54 MB for the source tree in total . . . .

[14:42] <autrijus> but should we ever need nested data or anything beyond a simple regex parser

[14:42] <geoffb> fair enough

[14:43] <autrijus> then sure, inc/YAML.pm it is.

[14:43] <autrijus> er what? 54mb?

[14:43] <geoffb> Oh, duh, minus 12.7 MB -- I still had a blib

[14:43] <autrijus> er what?

[14:43] <autrijus> are you counting .o files?

[14:43] <gaal> geoffb, that's after a build, surely?

[14:43] <geoffb> hold, on, making realclean

[14:44] <autrijus> 5mb here.

[14:44] <geoffb> oh, phew, only 10.5 MB after that

[14:44] <geoffb> OK, so why am I still off by factor of 2?

[14:44] <autrijus> I have no idea.

[14:45] <rafl_> Why do we have use lib 'lib' in Makefile.PL? I can't see anything from lib being used there.

[14:45] <integral> .svn?

[14:45] <gaal> df -k if you're on hpux :-P

[14:45] <geoffb> integral, using svk

[14:45] <gaal> (*du 

[14:45] <geoffb> I did du -cskx * |sort -n

[14:45] <autrijus> rafl_: I didn't remember. try taking it off and see if it works still

[14:45] <gaal> bbiab &

[14:45] <autrijus> if yes take it out

[14:46] <rafl_> autrijus: Did that. It does.

[14:46] <autrijus> anyway... 62k isn't much for a 5mb tree. iff it's needed, throw it to inc/.

[14:46] <autrijus> rafl_: take it out then.

[14:47] <rafl_> autrijus: I replaced that with use lib 'util'. I had some problems in inc/Module/Install/Pugs.pm to use PugsConfig.

[14:47] <autrijus> sure.

[14:47] <autrijus> I can't stay up any longer. hack on, and see you tomorrow :)

[14:47] <theorbtwo> Do you have .svn dirs in there?

[14:48] * autrijus waves &

[14:48] <geoffb> bye, autrijus 

[14:48] <svnbot6> r5512, bsmith++ | Makefile.PL - get version from lib/Perl6-Pugs/lib/Perl6/Pugs.pm and

[14:48] <svnbot6> r5512, bsmith++ | use lib 'util'.

[14:50] <rafl_> Hm. Is he in here? I'm also already working on that.

[14:50] <integral> oh, yep I am

[14:50] <integral> I've just found some more places too

[14:51] <rafl_> So, please wait a moment. I'm just trying if everything is working and will commit it then, OK?

[14:51] <integral> ok, sorry.  I was just trying to build to check my changes with HEAD

[14:52] <rafl_> Oh, OK.

[14:53] <rafl_> What other places did you found? util/config_h.pl and Makefile.PL is everything I needed to change.

[14:53] <integral> that's it, it's building fine atm

[14:54] <nothingmuch> make: *** No rule to make target `lib/Perl6/Pugs.pm', needed by `src/Pugs/pugs_config.h'.  Stop.

[14:54] <rafl_> nothingmuch: integral fixed that in 5512 I think.

[14:55] <integral> that's the one I missed

[14:55] <nothingmuch> i just synched

[14:55] <integral> rafl_: are you going to commit the rest of the changes?

[14:55] <rafl_> integral: Yes. I'll do that now.

[14:56] <integral> rafl_++

[15:02] <svnbot6> r5513, rafl++ | * Build lib/ recursively, just like ext/.

[15:02] <svnbot6> r5513, rafl++ | * s#lib/Perl6/Pugs.pm#lib/Perl6-Pugs/$&# Makefile.PL util/config_h.pl

[15:02] <svnbot6> r5514, rafl++ | * Adjusted path for pugs.pod in debian/rules.

[15:19] <rafl_> Is build_subdirs also running the test for each subdir?

[15:30] <rafl_> Who want's to fix utils/src_to_blib.pl? It installs everything, including temporary and object files and stuff. That's not really needed, is it?

[15:37] <rafl_> What creates the contents of blib/ during the build?

[15:38] <rafl_> Also p6 stuff seems to be put into blib/. Shoudn't that go into blib6?

[15:38] <gaal> rafl_: (i'm not an expert on MM, but) see PM_TO_BLIB in Makefile

[15:40] <rafl_> Hm. Can I prevent Module::Install to look into lib to find something to install?

[15:40] <gaal> sorry, dunno.

[15:41] <rafl_> ingy, autrijus: Do you know how to prevent Module::Install to look into lib/ to find its stuff to install?

[15:42] <rafl_> (They're listed in AUTHORS, so I assume they know about that.

[15:42] <gaal> at least one of them is asleep atm :)

[15:42] <svnbot6> r5515, putter++ | docs/notes/plan: added link to original form, and a note re it not really being an interview.

[15:50] <putter> geoffb: Thanks for the rewrite.  I appreciate the help.  I have some mixed feelings about the result.   Some information lost, some mistakes added.  Better grammar, but also less dense.  But nice things added.  Anyway, so I added a link to the original, so folks have both, and a note on the liberties I took, which would have been inappropriate if it had really been an interview.  Thanks again.

[15:58] <svnbot6> r5516, putter++ | notes/plan: added a note of context at top.  As, being linked from autrijus's journal, many will see it rsn.

[16:00] <putter> masak: "I am sorry for the length of my letter,

[16:00] <putter> but I had not the time to write a short one."

[16:00] <putter> [Blaise Pascal [1]]

[16:01] <putter> http://www.vendian.org/envelope/dir1/cant_explain.html

[16:01] <putter> tnx :)

[16:05] <putter> geoffb++

[16:07] <gaal> what can i assume about make? is there a minimum standard for rules that { gmake, nmake, bsd make } agree to? i just want "if".

[16:07] <putter> And, I forgot last night to say, thanks to mugwump++, geoffb++, stevan++, and anyone I missed, for your help collecting ideas for the note.

[16:08] <putter> gaal: perl?

[16:08] <gaal> hmm

[16:08] <gaal> i might actually do that.

[16:10] <gaal> how long can an environment variable typically be, on the worst of OSes?

[16:11] <gaal> is 100 chars still safe?

[16:11] <gaal> 150? 250?

[16:11] <putter> 10? ;)

[16:11] <lightstep> enough to store PATH

[16:11] <gaal> :-)

[16:11] <Limbic_Region> Failed 6/355 test scripts, 98.31% okay. -2/6342 subtests failed, 100.03% okay.

[16:11] <lightstep> that is, dozens of chars

[16:11] <Limbic_Region> -2 tests failed - 100.03% ok

[16:11] <Limbic_Region> got to love those numbers

[16:11] <Limbic_Region> ;-)

[16:12] <gaal> how many dozens is the crux of the matter

[16:12] <dudley> gaal: I think VMS has a limit of 255...

[16:12] <gaal> i think i can live with that.

[16:13] <gaal> 100 will probably be okay for what i need too, but 50 is iffy.

[16:14] <gaal> the idea: config.yml has key/value pairs. you set those with an editor or a Configure script (not included).

[16:15] <gaal> the pro is that there's a standard way to override those w/o going to the editor again

[16:15] <gaal> env PUGS_OPT=key:val make

[16:17] <gaal> (usually you don't need that at all)

[16:19] <putter> re "standard way", but note that it is os specific.  so ok for users, but needs to be wrapped by perl in makefiles.

[16:20] <gaal> by os specific you mean that there's no env on windows, or something else?

[16:24] <dudley> There's no env on VMS, either. I get the distinct feeling that I'm going to end up trying to port Perl6 to VMS someday...

[16:25] <gaal> dudley: how do you pass args to make on vms? just command line?

[16:26] <dudley> Gnu make barely works on vms. MMK is the standard build tool.

[16:27] <gaal> the drive here is primarily to put all build preferences in one place; making that overridable from either the command line or the environment is very important but not crucial. anyway a vms is not for a while is it? :)

[16:27] <gaal> *a vms port

[16:27] <dudley> Yeah, i was mostly joking.

[16:28] <dudley> I do need it to run on VMS eventually, though.

[16:28] <gaal> beh, use ghc to crosscompile.

[16:28] <gaal> you didn't say you needed it to *build* there :)

[16:29] <dudley> :-)

[16:30] <putter> JeffaCake/autrijus re Linux x86_64 GHC snapshots... but do they actually work?  the two I tried failed to make.  (just a cautionary note while backlogging...)

[16:30] * dudley wanders off to find a bookstore &

[16:31] <putter> &

[16:36] <putter> Re inconvenience of changing p6 spec, I can't find the quote now, but Denis Richie(?) wrote how he realized having whitespace be significant (or space vs tab??) was a mistake a couple of weeks(?) after doing it (in 197x(?)), but at that point he had too many users (order-10 (?)) to fix it.

[16:40] <gaal> Stuart Feldman, and it's a great story, but i can't find the quote either.

[16:42] <gaal> http://www.faqs.org/docs/artu/ch15s04.html

[16:43] <gaal> " And then a few weeks later I had a user population of about a dozen, most of them friends, and I didn't want to screw up my embedded base. The rest, sadly, is history."

[16:46] <putter> :) thanks!

[16:47] <cognominal> tab should not even be a character, more like a mecanographic device

[16:48] * gaal likes the librarian job

[16:48] <gaal> # http://www.livejournal.com/users/gaal/2002/03/14/

[16:48] <putter> gaal: knobs, please knobs.  (backloging)  5 min is deadly in a development cycle.  way too much for "does it work _now_?".  but precompiled speed great for "ok, think so, run make test".  knobs.

[16:49] <gaal> brb, $work phone

[16:51] <putter> re OED balcony service :) :)... now if only it wasn't 1/4 way round the planet.

[16:53] <revdiablo> hmm, is anyone else using  {''}  instead of  <>  with nested hashrefs, just to maintain symmetry? I mean,  %hash{$foo}{$bar}<baz>  just looks ugly to me.

[16:53] <gaal> putter: i'm aiming for Standard Knobbage

[16:54] <gaal> so instead of vi SOMETHING ; env THIS make THAT

[16:54] <gaal> you either vi config.yml and make away,

[16:55] <gaal> or override via env

[16:55] <gaal> but hopefully the names stay the same

[16:55] <gaal> of course you should be able to change anything, but right now if you grep util for ENV you'll see there are too many disparate entities

[16:56] <gaal> re: the look-up service, i regret to say that although i'd love to, i cannot take email requests at this moment.

[16:56] <putter> ;)

[16:57] <gaal> revdiablo: %hash<<$foo>><<$bar>><<baz>> ? :-)

[16:57] <gaal> prolly not a good idea though.

[16:57] <revdiablo> heh

[16:57] <gaal> since they may contain spaces.

[16:57] <putter> Have an OED around here someplace.  Misplaced it.  One volume, with teeny tiny print.  Wish I had a monitor with print like that.

[16:58] <gaal> well, i bet you didn't lose the magnifying glass that came with it -- those are huge

[16:58] <gaal> i actually have the full version here. snatched it in an inexplicable bargain.

[16:59] <gaal> they sold for a while at an insane discount, but the real insane thing was that they charged shipping as if it were one volume.

[16:59] <gaal> the whole deal was for under $400 (instead of $3000).

[17:01] <geoffb> putter, noticed this window was blue, so have just read what you said to me (and nothing else in backlog yet) . . . sorry to have messed up your stuff, I thought I had captured most of what you had included.  Sigh.

[17:03] <putter> Oh hey, no problem.  Appreciate the work.  Especially since past experience has shown folks find my draft design space notes dense to the point of being incomprehensible.

[17:04] <gaal> textwork is hard. team textwork is also hard. /me returns to configuration matters which are of course easy

[17:07] <geoffb> Funny thing is, I debated just leaving the original intact at the bottom, and finally decided against that, because "Curious people can always look at the change history."  putter had the better option -- drop the old text but add a link to the old revision.  I'll remember that for next time. :-)

[17:08] <putter> You did (capture most).  Was good.  With added link to old, readers in better state.  gaal: :)

[17:08] <putter> ah.  interesting.

[17:08] <geoffb> putter, also you mentioned earlier that I added some mistakes -- but a diff doesn't show you edited content stuff.  Is there something that still needs to be changed?

[17:09] <putter> let me see...

[17:10] <putter> yeah... sigh.

[17:11] <putter> do we have stats on how many people read autrijus's journal?

[17:12] * Limbic_Region isn't sure that's possible

[17:12] <geoffb> Limbic_Region, a lower bound certainly is . . . .

[17:13] <geoffb> (and I suspect that lower bound wouldn't be more than an order of magnitude off at worst)

[17:13] <gaal> putter: no way to do that. it's syndicated.

[17:13] <Limbic_Region> for non-anonymous readers - see http://use.perl.org/~autrijus/fans

[17:13] <gaal> at least 8 users on LJ :)

[17:13] <putter> ;)

[17:14] <gaal> plus probably the planetperl aggregators?

[17:14] <Limbic_Region> as I said - not sure its possible to know

[17:14] <gaal> i'm sure it isn't. :)

[17:15] * geoffb assumed most of the other sites would be links, not wholesale syndication . . . bah

[17:15] <geoffb> syndication--

[17:15] <Limbic_Region> even if it weren't - it is still only an approximation to parse the logs looking for unique IPs

[17:15] <Limbic_Region> you have proxies that make many people look like 1

[17:16] <Limbic_Region> and with DHCP - 1 can look like many

[17:16] <geoffb> Yeah, that's why I said "lower bound within an order of magnitude" . . . 

[17:16] <geoffb> and you wouldn't do unique IPs.  For a daily journal, it would better be hits.

[17:17] <Limbic_Region> ick - I check his journal several times a day

[17:17] <geoffb> crazy bastard

[17:17] <Limbic_Region> why?

[17:17] <Limbic_Region> I don't have an RSS feed so it is the only way to know if there are comments or updates

[17:18] <geoffb> Can't use an RSS feed, you mean?  I know use.perl generates various RSS feeds . . . .

[17:18] <Limbic_Region> no

[17:19] <geoffb> Comments I can see being a problem

[17:19] <Limbic_Region> I don't have = I don't use

[17:19] <gaal> bbiab

[17:19] <Limbic_Region> see - I don't ever get anything done because I am too busy keeping up with what everyone else is doing

[17:19] <Limbic_Region> literally

[17:20] <geoffb> I think it's time to get away from the keyboard.  I'm just not mentally all there today.

[17:20] <Limbic_Region> TTFN geoffb - enjoy

[17:31] <putter> geoffb: me too.  worry about plan later. ?

[17:42] <Aankhen``> (backlogging) Limbic_Region: Re ^C-ing the build process: try repeating it a few times.  A similar thing happens to me when installing a module from CPAN: if I ^C it, it drops me back to the regular DOS prompt, but the commands are interpreted as if by the `cpan` shell, and I have to keep pressing ^C for a while.

[17:43] <Aankhen``> `cpan` is actually a lot worse, since I'm running it, it runs `nmake`, and then `nmake` runs `cl` or whatever.

[17:46] <gaal> alias kill kill -9   :-)

[18:13] <Aankhen``> Wow... Pugs really starts up fast now. o_O

[18:14] <gaal> aankhen``: are you using the precomp test as well? i hand out free sneak previews if you want. :)

[18:14] <Aankhen``> No, I don't run `nmake test`. :-P

[18:15] <Aankhen``> I was just running the interactive shell.

[18:15] <gaal> that does make things faster. :)

[18:15] <Aankhen``> Hehe.

[18:19] <putter> http://nothingmuch.woobling.org/pugs_test_status/ smoke has gone bogus.  27 test cases.

[18:19] <Aankhen``> putter++ geoffb++ # docs/notes/plan

[18:19] <svnbot6> r5517, iblech++ | * Usual svn props.

[18:19] <svnbot6> r5517, iblech++ | * Minor typo and grammatic fixes: INSTALL, gen_prelude.pl,

[18:19] <svnbot6> r5517, iblech++ |   lib/Inline-Pugs/Makefile.PL, docs/notes/plan, ChangeLog.

[18:19] <svnbot6> r5517, iblech++ | * Renamed docs/other/SHOT_IN_THE_FOOT to docs/other/shot_in_the_foot, as all

[18:19] <svnbot6> r5517, iblech++ |   other files in docs/other/ are all-lowercase, too (consistency).

[18:26] <svnbot6> r5518, Stevan++ | Perl6::MetaModel - changed all croak()s to confess()s (mmmm stack trace :); added Perl6::Container::Scalar as a (tied) stand in for real container types; added tests for it as well; next step is to actually use it in the MetaModel;

[18:27] <putter> I thought make pirtest was working?  With 6.4.1.yesterday, 0.2.2, and pugs head, my sanity is all dubious.

[18:27] <putter> And everything else is Can't locate Test in @*INC.

[18:33] <Ovid> OK, I think I'm a little irritated with Pugs right now.  Specifically, I went ahead and did a "sudo make install" and just hosed my Perl installation due to many Perl 6 modules overwriting Perl 5 modules.  Why did Pugs do that?  Is this something I was just supposed to "know"?

[18:34] <putter> Here is a project for someone with bits on feather - set up a pair of smoke and pirsmoke.  Noone seems to be running a pirsmoke yet, and we'll need it, and on feather perhaps multple people keep smoking going reliably.

[18:34] <putter> Ovid: thats _very_ not the right thing.  I suspect no one is really testing make install.

[18:35] <gaal> putter: i'll do that once i get tuits.

[18:35] <putter> gaal++

[18:35] <Ovid> Ah, jeez.  I'm seriously screwed.  I've got a ton of work to do and I have no idea how long it's going to take to rebuild my Perl install.

[18:35] <gaal> Ovid: definitely a bug.

[18:36] <Ovid> When I did the install, I got lines like Installing /usr/local/lib/perl5/site_perl/5.8.6/HTTP/Headers.pm

[18:36] <Ovid> That looks normal, but that's a Perl 6 module which overwrote my Perl 5. :(

[18:39] <stevan> anyone have any idea how to return a tied scalar from a subroutine and how have it do return tied($scalar)->FETCH ???

[18:39] <svnbot6> r5519, Aankhen++ | * edited docs/notes/plan.

[18:39] <stevan> (this is a Perl5 question relating to the perl6 metamodel :)

[18:39] <Khisanth> hmm

[18:40] <Khisanth> Ovid: you didn't get a /usr/lib/perl6/ ?

[18:40] <Ovid> No.

[18:41] <Khisanth> hmm which version?

[18:41] <Ovid> I'm going through the module list right now to see if I can automate the fix or if I have to wipe out Perl and start over (not very easy)

[18:41] <Khisanth> create a bundle and force install?

[18:42] <Ovid> Khisanth:  it's overwriting 5.8.6:  Installing /usr/local/lib/perl5/site_perl/5.8.6/Test/Builder.pm

[18:42] <Ovid> Hmm, a bundle might work.

[18:50] <Ovid> A bundle won't work.  Core modules that cpan and cpanp require have been overwritten.  Even 'lib' was blown away :(

[18:50] <svnbot6> r5520, putter++ | Its quite a kludge, but this will stop anyone else from getting burned by make install until we figure out whats going on.

[18:51] <Aankhen``> I use `nmake install`; modules seem to install alright into the PREFIX directory.

[18:51] <gaal> putter++ # stopgap

[18:52] <Aankhen``> Then again... EVERYTHING installs into the PREFIX directory, including lib/ (as-is).

[18:52] <putter> I added an extra install: target to Makefile.PL.  Intended to say "sorry, disabled", instead it causes a : vs :: conflict error.  But that's hopefully good enough.

[18:52] <Ovid> Aankhen:  Regardless, this much destruction should not happen.

[18:52] <Aankhen``> Indeed...

[18:55] <putter> Ok, my Makefile.PL patch did make make install safe... by completely breaking the Makefile.  Regressed.  So we still need a stopgap...

[18:56] <Khisanth> Ovid: so which version of pugs did you install?

[18:56] <Ovid> Fresh from svn.

[18:57] <Ovid> Version: 6.2.7 (r5516)

[18:57] <svnbot6> r5521, putter++ | Makefile.PL patch broke the build.  Removed.  Deadly make install is back.

[18:57] <Khisanth> oh... I guess someone broke the Makefile between 6.2.2 and now

[18:57] <gaal> perl -i.bak -pe 's/^(install.*)/$1\tfalse/' the generated Makefile?

[18:58] <gaal> missing an \n at the end of the substitution there.

[18:58] <stevan> eval? class Foo { has $.bar is ro; submethod BUILD ($.bar) {} }; my $foo = Foo.new(bar => 42);

[18:59] <stevan> oop :)

[18:59] <gaal> evalbot isn't up, stevan.

[18:59] <stevan> bah!

[18:59] <stevan> ok

[18:59] <stevan> thanks gaal  :)

[19:01] <putter> Khisanth: so make install was doing the right thing, whatever that is, at some point in the past?

[19:02] * gaal has only ever made install once. but it worked then!

[19:02] <svnbot6> r5522, putter++ | Added purely advisory "do NOT use make install" to Makefile.PL.  Still dangerous.

[19:03] <putter> I've added a purely advisory "dont run make install!" after the *** Enter make to build Pugs.  But we really should disable it until its fixed.

[19:03] <Khisanth> putter: I installed 6.2.2 through CPANPLUS and it seems to be in /perl6 as expected

[19:03] <gaal> it was months ago, so that doesn't help tracebacking much.

[19:04] <putter> looking...

[19:04] <gaal> (it == the version i installed, not yours, Khisanth)

[19:05] <putter> Ovid: thank you.  if that had gone out a release... "shudder".

[19:05] <Ovid> No problem. 

[19:05] <Khisanth> hrm

[19:05] <Khisanth> so safe to assume 6.2.6 didn't have this problem?

[19:07] <Ovid> I don't know.  I haven't touched Pugs in a while as I've been stuck on a huge contract and now am prepping for OSCON.  This was just a lark.

[19:07] <dudley> I did a make install within the last week, and it went in /perl6

[19:07] <svnbot6> r5523, Aankhen++ | HTTP::Cookies:

[19:07] <svnbot6> r5523, Aankhen++ | * modified &scan to pass rw parameters to callback.

[19:07] <svnbot6> r5523, Aankhen++ | * implemented &as_string.

[19:09] <putter> rafl: ping

[19:11] *** Ovid is now known as Ovid_afk

[19:13] <putter> Does svn have a line-by-line revision attribution?  Colorized?

[19:13] <integral> svn blame?

[19:13] <gaal> svn praise

[19:14] <putter> thanks!

[19:15] <eric256> hey. if  i wanted to add something to Prelude.pm .... is there somewhere i should ask first?  BTW i want to add a .shuffle method to arrays, seems like something that gets done enough to put in prelude.

[19:16] <gaal> eric, yes, propose it on p6-l, and have it added to S29.

[19:16] * eric256 suppose a local working version would go a long way towards getting the go ahead?

[19:17] <gaal> sure, though the most important things are probably the function signature and an argument for the algorithm you've chosen to implement this in.

[19:17] <gaal> plus why this should be in the prelude, of course.

[19:18] <eric256> in prelude becuase its cheap enough to add, and i'm pretty sure (thought possibly wrong) that fisher_yates could be considered the standard, so why make people keep coding it? ... /me realizes i don't need to argue for it hear, just testing it out

[19:18] <gaal> read around about shuffles - i seem to recall a discussion that compared a few. fisher-yates wasn't the only interesting one there.

[19:19] <gaal> unfortunately i have no idea where i did see it, except that maybe it was in some functional programming forum or faq or archive.

[19:21] <eric256> mhm okay. i'll get the bones laid out and working, then look into better solutions.

[19:21] <eric256> make will recompile Prelude.pm right?

[19:21] <gaal> sure.

[19:21] <eric256> does this mean perl can now cache compiled versions of modules for quiker load times?

[19:22] <gaal> when developing this, though, you may find it faster not to rebuild pugs every time

[19:22] <gaal> set PUGS_BYPASS_PRELUDE=1 in your env, and use -I src/perl6 -MPrelude

[19:22] <eric256> will it know to use the edited Prelude.pm ?  or should i just code it in a seperate file at first, then merge when working?

[19:22] <eric256> or that would work. ;)

[19:22] <eric256> thanks

[19:23] <gaal> np :)

[19:23] <gaal> re: caching arbitrary modules, we're not there yet, but backlog a bit, there's been discussion about it today.

[19:23] <svnbot6> r5524, Aankhen++ | * HTTP::Cookies: implemented :host, :uri_path and :normalize_path.

[19:28] <putter> eric256: it sounds like something which to start with should simply go in a module.  then if gets made part of Array, it can be moved to the Prelude, or to some Array.pm if that's been spun of by then.

[19:29] <putter> Bah, makefiles.  Lets use rake. ;)

[19:32] <putter> eric256: one of the nice things in p6, is one can simply do module SomeArrayExtensions; method Array::foo()....  use SomeArrayExtensions;

[19:33] <eric256> yes. but a whole module for array shuffling seems silly. either way i can't seem to get this working anyway..../me attacks from a different angle.

[19:34] <Aankhen``> I think I'll leave the last two methods from HTTP::Cookies for another time. :-P

[19:34] <gaal> be sure to "is rw" :-)

[19:34] <svnbot6> r5525, Aankhen++ | * HTTP::Cookies: implemented &set_cookie and &set_cookie_ok.

[19:34] * Aankhen`` wanders off.

[19:37] <eric256> hmmm....number of elements in array is?? not .length or .elements  

[19:38] <gaal> .elems

[19:38] <eric256> hehe. shortend the wrong one. thanks gaal....i've been away for too long, its all coming back slowly though

[19:39] <gaal> t/data_types may come in handy, eric256.

[19:39] <eric256> thanks i'll go look around in it.

[19:39] <gaal> np. dinner &

[19:39] * eric256 things long forms should work too...but that would probably be wastefull namespace pollution

[19:42] <rafl_> putter: pong

[19:56] * Limbic_Region wonders WTF this message nmake is spitting out is all about

[19:58] <eric256> i wonder that pretty much nmake says anything

[19:59] <nothingmuch> uh, wtf?!

[19:59] <nothingmuch> http://nothingmuch.woobling.org/pugs_test_status/

[20:00] <gaal_> look on the bright side, nice duration.

[20:01] <eric256> hmm. i did what gaal said to load perlude.pm at run time, edited, got it working, then recompiled and tried and the changes appears gone.. (change = added Array::shuffle sub)

[20:02] <gaal_> does your pugs have other prelude functions?

[20:05] <eric256> lemme see.

[20:05] <eric256> "hello".as(""); prints undef in the interactive shell

[20:05] <gaal_> what does open("AUTHORS").readline.say say?

[20:06] <eric256> a whole bunch of authors names

[20:06] <gaal_> well, you do have *a* prelude

[20:07] <gaal_> are you sure your prelude.pm still has your code?

[20:07] <gaal_> if yes, try incrementally making cleaner and cleaner.

[20:07] <eric256> yep

[20:08] <gaal_> start by just rm pugs ; make

[20:08] <putter> rafl_: make install overwrote someone's p5 lib/ with p6 stuff.  yipes.  saw you had been working with lib/ handling and wondered if you had any ideas.  after a long pause, I'm again looking into it...

[20:08] <gaal_> then delete src/Pugs/PreludePC.o and .hi

[20:08] <gaal_> then make clean

[20:08] <gaal_> etc.

[20:09] <eric256> okay. i'll see if i can find when it starts working agian. (i'm guessing that is what you are looking for)

[20:09] <gaal_> yup

[20:10] <gaal_> i'm however low on wakies so i'm not here for long

[20:12] <eric256> online a PreludePC.hs file... is that the one you meant?

[20:12] <eric256> Prelude.(hi|hs|o) are there as well

[20:12] <eric256> s/online/only/

[20:12] <eric256> ls

[20:12] <gaal_> uh, sorry, make that Run.hi and .o

[20:13] * eric256 hopes that deleting the .hs file isn't bad?

[20:14] <gaal_> nope, svn up to restore it

[20:14] <rafl_> putter: Right, I'm working on that.

[20:15] <eric256> hmm svn says that file isn't under svn control....now what did i break... 

[20:15] <gaal_> which one, ppc? oh, right, that's autogenerated so you really did no harm :)

[20:15] <gaal_> make again.

[20:15] <eric256> NMAKE : fatal error U1073: don't know how to make 'src\Pugs\PreludePC.hs'

[20:16] * eric256 is no longer allow to play in the src directory

[20:16] <gaal_> uh, is this a recent r?

[20:16] <eric256> yep. just updated an hour ago...unless the update didn't take.

[20:17] <gaal_> nmake clean and try again.

[20:17] <gaal_> i gotta go now, good luck. :)

[20:17] <eric256> thanks for all the help so far

[20:17] <gaal_> np :)

[20:17] <svnbot6> r5526, gaal++ | mini-YAML parser, to be used by the build system to handle prefs

[20:18] <eric256> great...one of the commands from nmake clean is too long

[20:18] <gaal_> you need a newer make

[20:18] <gaal_> http://forum2.org/gaal/pugs/nmake.exe should do the trick.

[20:18] <gaal_> night :)   &

[20:19] <Limbic_Region> eric256 gaal_'s nmake.exe might break about a missing .dll - it is also freely downloadable off the net

[20:20] <putter> &

[20:20] <Limbic_Region> msvcr71.dll in case it matters

[20:20] * Limbic_Region calls it a day

[20:20] <Aankhen``> G'night.

[20:20] <putter> Everyone is leaving... :(

[20:24] <eric256> yea. that at leans finished the clean correctly...... and now SVN update found tons of changed files....odd

[20:39] <brentdax> Is there a reason for the warning against running 'make install'?

[20:40] <putter> It smashed someone's p5 lib/ with p6 files.

[20:41] <putter> Cause unknown.  rafl_ is looking into it.

[20:41] * putter wonders if there might be a connection with make test and smoke being br0ken.

[20:42] <putter> Is anyone looking into what happened to use()?

[20:43] <brentdax> I see.  This makes my life a tad difficult, but I'll find a way to manage...

[20:43] <putter> t/01-sanity/06-use.t is failing...

[20:45] <dudley> putter: That one's passing here...

[20:45] * putter  wishes there was log file with one test summary line per revision.  Good for detecting regressions, good for figuring out when/why the world broke, etc.

[20:46] <stevan> putter: I think nothingmuch is working on just such a thing

[20:46] * dudley has wished for the same thing

[20:46] <stevan> on top of Test::TAP::HTMLMatrix

[20:46] <dudley> ah, good, cause tuits are in especially short supply for me right now

[20:46] <putter> dudley: I'm failing with Can't locate lib.pm in @*INC.  Clean build of head.

[20:48] <putter> After make;make test, there is no blib6/lib. !?!

[20:48] <dudley> putter: I've got a dirty build running make test right now

[20:49] <putter> @*INC contains /usr/..., so if you ever did a make install in the past, you may be running on those files.

[20:49] <putter> Do you have a blib6/lib?

[20:50] <dudley> Nope, you're right

[20:50] <svnbot6> r5527, cdpruden++ | Typo fix; missing pipe in regexp

[20:51] <putter> rafl_: note blib6/lib is nonexistent after make on pugs head.  fyi.

[21:04] <putter> Just to save me time in binary search of revision space, what is the latest revision anyone has which _does_ have a ./blib6/lib directory?

[21:04] <putter> Thanks.

[21:05] <putter> r5480 is ok.

[21:10] <stevan> can I get a Perl6 sanity check?

[21:10] <stevan> class Foo { has $.bar is ro; }

[21:10] <stevan> the "is ro" should only relate to autogenerated accessors right?

[21:11] <stevan> otherwise you could never assign to $.bar

[21:11] <stevan> because it would make the underlying scalar container read only

[21:12] <putter> gaal_: re knobs, how about a 'make quickly' target which is make unoptimized and dont precompile the prelude?

[21:14] <putter> stevan: would you believe 'is ro' doesnt appear in (an old copy of) the bible?

[21:15] <stevan> yup

[21:15] <stevan> the bible is unclear on this

[21:15] <putter> better yet, \bro\b doesn't appear.

[21:15] <stevan> but I have a vague recollection of Larry and Autrijus talking about this at the hackathon

[21:16] <stevan> putter: "is ro" is the default for class accessors

[21:16] <putter> wait, doesnt "is rw" just mean create r and w accessors?  so "is ro" == "is r".

[21:16] <stevan> and then generates an accessor only

[21:17] <putter> ah.

[21:17] <theorbtwo> Depends on where you mean, I think.

[21:17] <stevan> but "is rw" makes the accessor and the mutator

[21:17] <theorbtwo> Do you mean on vars with class scope?

[21:17] <theorbtwo> Or do you mean on arguments?

[21:18] <stevan> theorbtwo: I am speaking only about "has $.bar is rw" in class definitions

[21:18] <theorbtwo> Ah.

[21:18] <stevan> has $.bar is ro; should make a rw scalar container but only generate a read accessor

[21:19] <theorbtwo> Ja.

[21:19] <stevan> ok

[21:19] <theorbtwo> (I think... and it was my RFC, dammit, not that it means anything.)

[21:19] <stevan> so the "is <trait>" on 'has' attributes does not apply to the underlying container 

[21:20] <stevan> theorbtwo: I am trying to fake basic container types in the metamodel with tie(), this is why I am asking

[21:20] <theorbtwo> Ah.

[21:20] <putter> autrijus's post-hackathon p6l post had some discussion of "is constant", etc...

[21:20] <theorbtwo> Yeah, that's right.

[21:21] <stevan> I had passed the "ro" on, and things got really ugly :)

[21:21] <stevan> cause I could no longer assign to my class attributes

[21:21] <theorbtwo> is constant is more general then is ro, but similar.

[21:21] <putter> Including "In order to pass by read-only reference"...

[21:21] <theorbtwo> Right.  Inside the class, it doesn't matter what accessors there are -- you are assigning directly to the var, not using an accessor... I think.

[21:22] <theorbtwo> my $foo is constant = 42;

[21:22] <theorbtwo> ($foo can never be assigned to again.)

[21:22] <theorbtwo> has $.foo is ro = 42;

[21:22] <stevan> yes

[21:22] <putter> r5500 is ok.

[21:22] <theorbtwo> $.foo can be assigned to again, but only by class methods.

[21:22] <stevan> yup

[21:22] <stevan> that is what makes sense to me

[21:23] <theorbtwo> To me too.

[21:23] <stevan> so what parts in the class declaration does the underlying scalar container need to know about

[21:23] <stevan> the type?

[21:23] <stevan> has Dog $.fido;

[21:23] <theorbtwo> I think, BTW, the default isn't ro, but no access.

[21:24] <stevan> theorbtwo: I thought it was ro

[21:24] <stevan> oh well easily changed in the metamodel :)

[21:24] <theorbtwo> I could well be wrong.

[21:24] <stevan> has Dog $.fido handles "wag";

[21:24] <theorbtwo> I think everything but a few blacklisted things get passed on.

[21:24] <stevan> the "handles" part should be handled by the class not the container

[21:25] <stevan> thats delegation

[21:25] <stevan> all I can think of is passing on the Type

[21:25] <theorbtwo> Huh?  Never noticed the existance of that... were is is it documented?

[21:25] <putter> r5510 is broken, but differently.

[21:25] <stevan> SA12

[21:25] <stevan> look for "Delegation"

[21:25] <theorbtwo> And typeish things -- is shaped, is newlined (or whatever it's called...)

[21:26] <stevan> has $.bar is constant = 42; 

[21:26] <stevan> that would be a different kind of container

[21:26] <stevan> a ScalarConstant

[21:26] <stevan> or somesuch

[21:26] <theorbtwo> Da.

[21:26] <theorbtwo> Or a Constant with a Scalar inside it.

[21:26] <stevan> ok, I am not worrying about is shaped or any of that non-sense

[21:27] <theorbtwo> Handle what you know how to handle, pass the rest on?

[21:27] <stevan> ok, so my Scalar container will really just deal with type checking (if a type is added to it)

[21:28] <theorbtwo> Sounds about right.

[21:28] <stevan> theorbtwo: I am mostly trying to figure out *what* I need to handle... the how can come later

[21:28] <stevan> cool

[21:28] <stevan> danke theorbtwo :)

[21:34] <clkao> 8http://use.perl.org/~Ovid/journal/

[21:34] <clkao> LOL

[21:35] * Limbic_Region is just reading that now

[21:41] <clkao> u   t/operators/eq.....................................pugs: *** Can't locate Test.pm in @*INC (@*INC contains: /Users/clkao/work/pugs/blib6/lib /System/Library/Perl6/darwin-thread-multi-2level /System/Library/Perl6 /Library/Perl6/darwin-thread-multi-2level /Library/Perl6 .).

[21:41] <clkao> wtf?

[21:41] <clkao> thisw is a clean build on macosx

[21:43] <putter> pugs is broken at the moment.  broke between r5505 (ok) and r5515 (not).

[21:43] <putter> narrowing it down...

[21:46] <putter> nothingmuch is working on a test log so we dont have to play this silly game.  nothingmuch++

[21:46] <nothingmuch> putter: if you have a full TAP output or yml file of both, i can do sometthing

[21:46] <svnbot6> r5528, Stevan++ | Perl6-MetaModel : the Scalar container only handles types now; made some minor modification to the way attributes are stored so that it handles tied scalars correctly; various other small changes, nothing big;

[21:46] <nothingmuch> like, right now

[21:47] <stevan> nothingmuch: hola

[21:48] <nothingmuch> uh, whoe ees thiis naathingmuch you speek off?

[21:48] <putter> nothingmuch: huh?

[21:48] <nothingmuch> putter: i have a working diffing TTH

[21:48] <nothingmuch> if you have the data to shove in it I can graph it for you

[21:49] <putter> Ah, no.  Nifty thing, and I look forward to using it.   But at the moment,

[21:49] <nothingmuch> what I didn't get around to is rounding corners

[21:50] <putter> what I'd like is a file of lines like  'r5500  - 26 test cases: 26 ok, 1 failed, 2 todo, 2 skipped and 0 unexpectedly succeeded' so I dont have to search through revision space.

[21:50] <nothingmuch> oh, that' easy

[21:50] <putter> :)

[21:50] <nothingmuch> generate Test::TAP::Models somehow (call analyze_lines?)

[21:50] <nothingmuch> then simply print each ones ->summary

[21:51] <putter> r5505 ok, r5509 and r5510 broken differently, r5515 ok.  proceeding...

[21:51] <putter> err, no.  r5515 br0ken.

[21:52] <putter> Err, no again.  r5509 ok.  r5510 broken differently. r5515 broken.

[21:53] <putter> :)

[22:00] <putter> rafl_: ping?

[22:01] <nothingmuch> http://use.perl.org/~Ovid/journal/25550 <-- is he asking for ltu?

[22:02] <stevan> nothingmuch: he asked for it over on LtU too

[22:08] <nothingmuch> hah

[22:09] <nothingmuch> so he really wants LtU in chrome ;-)

[22:09] * nothingmuch should read more ltu

[22:09] <nothingmuch> there, rss feed

[22:09] <putter> ok, r5509 was working.  r5510 wasnt.  r5511 is irrelevant.  r5512 also broken.  r5513 has the current form of brokenness.

[22:09] <putter> rafl_: ping?

[22:10] <putter> rafl: ping?

[22:16] <putter> Ok, to sum up the State of the Build: r551{0,2,3} broke make test.  It's still broken.  Around the same time make install smashed Ovid http://use.perl.org/~Ovid/journal/25660 "Vicious Pugs :(".

[22:16] <putter> They may or may not be connected, but...

[22:17] <putter> Someone needs to go through r551{0,2,3} and fix or revert.

[22:17] <putter> I'll do it when I get back from dinner if someone hasn't beaten me too it.

[22:19] <putter> Unfortunate.

[22:19] <putter> &

[22:42] <mugwump> 5510 added Perl6::MakeMaker (see http://lists.utsl.gen.nz/pipermail/pugs-commits/2005-July/002842.html)

[22:42] <mugwump> that might have been a rename

[22:43] <mugwump> http://lists.utsl.gen.nz/pipermail/pugs-commits/2005-July/002844.html is probably the culprit

[22:45] * pjcj catches up on today's p6l excitement

[22:57] <clkao> pjcj: hey, i thought you are busy on work or fixing devel::cover

[23:00] <pjcj> Unfortunately, I am at work, yes.

[23:00] <pjcj> but I was just waiting for a db to install

[23:14] <wolverian> http://chronoa.dy.fi/~wolverian/nuclear.p6 # does this look sane? particularly, does role inheritance work like that? 

[23:33] <stevan> nothingmuch: ping

[23:57] <nothingmuch> stevan: sorry

[23:57] <nothingmuch> svk merge got stuck because i forgot to quit filemerge

[23:59] <nothingmuch> it's sooo slooow

