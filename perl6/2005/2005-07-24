[01:54] <yrlnry> I need some advice regarding Quantum::Superpositions.  I have a list of items, and I want to use Q::S to find an item X such that f(X) and g(X) are both true.  $x = any(...);  $z = eigenstates(f($x) && g($x)); is not at all what I want.  How do I set this up?

[03:33] <mugwump> is the opposite of a premature optimisation called a premature abstraction?

[03:42] <mugwump> ?evalbot sub f { 8 > $^x > 6 } sub g { $^x & 1 }  my $x = any(1..9); sub find(Scalar $x) { if(f($x) && g($x)) { return $x } }; find($x)

[03:42] <mugwump> ?eval sub f { 8 > $^x > 6 } sub g { $^x & 1 }  my $x = any(1..9); sub find(Scalar $x) { if(f($x) && g($x)) { return $x } }; find($x)

[03:42] <evalbot6> Error: Undeclared variable: "$^x" 

[03:43] <mugwump> ò_ó

[03:51] <mugwump> this works for me in pugs 6.2.7, ho hum

[03:52] <mugwump> see also examples/sendmoremoney.p6

[03:53] <mugwump> ok, that worked once

[04:29] <Khisanth> oh

[04:29] <Khisanth> mugwump: you didn't get the news?

[05:44] <mugwump> Khisanth: news?

[05:45] <mugwump> Did someone change the semantics of junctions and autothreading on me?  :)

[05:45] <Khisanth> no I mean the $^x

[05:45] <mugwump> oh

[05:45] <mugwump> gone?

[05:47] <Khisanth> "Implicit variables like $^a now only work in bare blocks"

[06:12] <nothingmuch> morning

[06:23] * brentdax waves.

[06:24] * nothingmuch waves back

[06:25] * QtPlatypus waves

[06:27] * nothingmuch waves again

[06:27] <nothingmuch> but this is the last time, my elbow hurts

[06:28] <Khisanth> perhaps you should try particulating :)

[06:29] * nothingmuch thinks of multi-events, and multimethod event handlers

[06:30] <nothingmuch> method get_wave ($waver when { $waver == $QtPlatipus | $brentdax }) { ./reply }

[06:30] <nothingmuch> method get_wave (Any $waver) { }

[06:30] <nothingmuch> err, s/when/where/;

[07:32] *** mathieu_ is now known as sphex

[07:43] <dudley> Is there a p6 equivalent to Haskell's 'import qualified'?

[07:44] <dudley> e.g. 'use Foo::Bar::Baz as Baz'

[07:45] <Aankhen``> Not as such

[07:45] <Aankhen``> .

[07:57] <brentdax> Glad to see you were amused, Aankhen.

[07:59] <Aankhen``> Very. =)

[07:59] <nothingmuch> no strict as moose;

[08:00] <nothingmuch> i think there was talk about it

[08:02] <nothingmuch> http://groups-beta.google.com/group/perl.perl6.language/search?group=perl.perl6.language&q=%22use+*+as%22&qt_g=1&searchnow=Search+this+group <--- maybe this helps?

[08:13] <dudley> hmm, not quite. How can I accomplish the same thing? Refer to a fully qualified class name as a shorter name, I mean. I know I can do 'my $Baz := $Foo::Bar::Baz', but I don't like the sigils in my class names.

[08:18] <brentdax> dudley: There's been lots of talk about supporting C< ::Baz ::= (use Foo::Bar); >, but I somewhat doubt Pugs supports it yet.

[08:25] <dudley> If I declare a class as 'our class Baz{}' within package Foo::Bar, then I can call that Baz within the package and Foo::Bar::Baz from outside the package, right?

[08:30] <brentdax> Yeah, but once again I think Pugs doesn't support that yet.

[08:32] <dudley> Just wanted to make sure it'll work someday :-)

[08:34] <dudley> sleep &

[10:13] <brentdax> How much support does Pugs have for YAML?

[11:03] <luqui> poke

[11:04] <luqui> anybody who knows haskell

[11:12] <brentdax> I'm afraid I'm firmly on the camel side of the camp.

[11:19] <mugwump> I saw an HS-plugin yaml bit, don't know how far it got

[11:20] <luqui> hmm?

[11:21] <luqui> that sentence parsed, but my semantic analyzer segfaulted

[11:24] <wolverian> it was re: 13:13   brentdax : How much support does Pugs have for YAML?

[11:24] <wolverian> (probably :)

[11:24] <luqui> ah

[11:28] <luqui> how do you check if a sub is defined?

[11:28] <luqui> in either pugs or perl 6 (preferrably already implemented)

[12:01] <Aankhen``> ?eval sub foo { 1 }; defined &foo

[12:01] <evalbot6> bool::true 

[12:01] <Aankhen``> ?eval sub foo { 0 }; defined &foo

[12:01] <evalbot6> bool::true 

[12:01] <Aankhen``> ?eval defined &foo

[12:01] <evalbot6> Error: Undeclared variable: "&foo" 

[12:01] <Aankhen``> luqui: There you go.

[12:04] <luqui> oh my

[12:04] <luqui> that was, um, obvious

[12:04] <luqui> I was using exists()

[12:04] <luqui> thanks

[12:04] <wolverian> can I check for specific signatures like that too?

[12:04] <Aankhen``> ?eval sub foo { 0 }; exists &foo

[12:04] <evalbot6> Error: No compatible subroutine found: "&exists" 

[12:04] <luqui> oh wait

[12:04] <luqui> that's no good

[12:04] <wolverian> ?eval sub foo () { 1 } defined &foo:() 

[12:04] <evalbot6> Error:  unexpected ":" expecting word character, "::", term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[12:05] <luqui> I need it to return bool:false when it's not defined, not die

[12:05] <Aankhen``> ?eval sub foo (Str $bar) { 0 }; defined &foo:<Str>

[12:05] <evalbot6> Error:  unexpected ":" expecting word character, "::", term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[12:05] <wolverian> I _think_ larry has been using :() lately, but I'm not sure

[12:05] <Aankhen``> wolverian: I think you can't yet grab a particular variant.

[12:05] <Aankhen``> ?eval sub foo (Str $bar) { 0 }; defined &foo:(Str)

[12:05] <evalbot6> Error:  unexpected ":" expecting word character, "::", term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[12:05] <wolverian> Aankhen``, right. thanks :)

[12:05] <luqui> ?eval defined &main::foo

[12:05] <evalbot6> bool::true 

[12:05] <Aankhen``> luqui: Wrap it in a try { ... }?

[12:05] <luqui> whoops

[12:05] <luqui> hmm

[12:05] <Aankhen``> Or that.

[12:06] <Aankhen``> Hrm, one sec.

[12:06] <wolverian> ?eval sub foo { 0 } if try { &foo } { "ok" }

[12:06] <evalbot6> Error:  unexpected "i" expecting ";", statements or end of input reserved word 

[12:06] <wolverian> ?eval sub foo { 0 }; if try { &foo } { "ok" }

[12:06] <evalbot6> Error:  unexpected "i" expecting ";", statements or end of input reserved word 

[12:06] <Aankhen``> ?eval defined %::($?PACKAGE)::<&foo>

[12:06] <evalbot6> Error:  unexpected "<" expecting "(", "!", "/", "^", "*", "?", ".", ":" or word character 

[12:06] <luqui> I'm writing this from Haskell... so I think these are a little... heaviweight

[12:06] <luqui> I'm trying to use findSub

[12:07] <luqui> but it returns an Eval

[12:07] <luqui> and I'm not sure how to get that back into a boolean that haskell can look at

[12:07] <luqui> if that's even possible

[12:08] <Aankhen``> I'm sorry, I dunno about the Haskell side.

[12:55] <svnbot6> r5786, luqui++ |  r1956@jabberwock:  fibonaci | 2005-07-24 06:43:57 +0000

[12:55] <svnbot6> r5786, luqui++ |  Added an import test that is bugging the hell out of me.  The test doesn't seem to be gracefully detecting failure; somehow "use" supercedes "eval"'s guards.

[13:25] <svnbot6> r5787, Stevan++ | Perl6.MetaModel - (JS version)

[13:25] <svnbot6> r5787, Stevan++ | * added support for next_METHOD 

[13:25] <svnbot6> r5787, Stevan++ |     - added test file for this

[14:00] <Aankhen``> ?eval coro foo { yield "first"; yield "second"; }; (foo(), foo())

[14:00] <evalbot6> ('first', 'second') 

[14:00] <Aankhen``> ?eval coro foo { yield "first"; yield "second"; }; (foo(), foo(), foo())

[14:00] <evalbot6> ('first', 'second', 'first') 

[14:00] <Aankhen``> ?eval coro foo { yield "first"; return "hi"; yield "second"; }; (foo(), foo(), foo())

[14:00] <evalbot6> ('first', 'hi', 'hi') 

[14:02] <QtPlatypus> Cool we have coroteans

[14:02] <Aankhen``> Actually, we've had coroutines for quite a while, IIRC.

[14:02] * QtPlatypus nods

[14:02] <Aankhen``> I was just wondering what happens when you put a `return` in there.

[14:03] <Excalibor> greetings

[14:03] <Aankhen``> Hiya.

[15:01] <svnbot6> r5788, iblech++ | Usual svn properties.

[16:22] <svnbot6> r5789, Stevan++ | Perl6::MetaModel - (P6 version)

[16:22] <svnbot6> r5789, Stevan++ | * moving SELF, CLASS, next_METHOD, WALKMETH, WALKCLASS to the global namespace (*::)

[16:22] <svnbot6> r5789, Stevan++ |     - altered tests and files to accomidate this

[16:22] <svnbot6> r5789, Stevan++ | NOTE: This is step 1 in breaking the circularity issues with the metamodel

[16:41] <gaal> luqui, ping

[16:42] <gaal> findSub returns Eval (Maybe VCode)

[16:44] <gaal> you can say maybeM (findSub "foo" Nothing [])

[16:44] <gaal> see findVar

[16:46] <luqui> what does maybeM do?

[16:47] <gaal> do you know "maybe" without the M?

[16:47] <luqui> not in lowercase

[16:47] <gaal> say you have x :: Maybe String

[16:47] <luqui> mmkay

[16:48] <gaal> you want an expresion that is the string (w/o the Just) if it's Just String

[16:48] <gaal> or some default value that you specify if it's Nothing

[16:48] <luqui> right

[16:49] <gaal> demote a Maybe to a simple value, with whatever fallback makes sense in your local code.

[16:49] <luqui> how is the fallback specified?

[16:49] <gaal> so MaybeM does the same thing with an m (Maybe foo) isntead

[16:50] <gaal> as one of the args

[16:50] <gaal> maybe :: a -> (b -> a) -> Maybe b -> a

[16:50] <gaal> maybe n f Nothing  = n

[16:50] <gaal> maybe n f (Just x) = f x

[16:51] <luqui> gotcha

[16:51] <luqui> okay, I'll give it a shot

[16:51] <luqui> maybeM just works with any monad whatever?

[16:52] <gaal> it's defined in Pugs.Internals. around 264

[16:52] <gaal> and it's lifted higher than Maybe

[16:52] <gaal> loftier than what I grok really

[16:52] <luqui> there's that word again

[16:52] <luqui> "lift"

[16:53] <gaal> oh that

[16:53] <gaal> it has to do with the law of

[16:53] <nothingmuch> lift == be naughty

[16:53] <gaal> what do you call it

[16:53] <nothingmuch> use a nested monad in the transformed monad

[16:53] <gaal> the same law that makes sea level level

[16:53] <nothingmuch> e.g. ReaderT IO

[16:54] <nothingmuch> liftIO inside a ReaderT IO is ok

[16:54] <gaal> interconnected vessels or something

[16:54] <luqui> uh

[16:54] * luqui smiles and nods

[16:54] <nothingmuch> but plain old IO is not the same type as ReaderT IO

[16:54] <gaal> you lift the monad thingy

[16:54] <gaal> your head drops to the floor

[16:54] <nothingmuch> but the monad already has your brain

[16:55] <nothingmuch> it sucks out your eyeballs, and moves to the next victim

[16:55] <gaal> yeah, that's shiftT

[16:55] <gaal> when you had enough, you resetT

[16:55] <nothingmuch> luqui: you know the properties of >>= as far as typing goes?

[16:55] <luqui> I think so

[16:56] <nothingmuch> do { foo; foo; foo } -- all foo's are of the same type

[16:56] <luqui> well, "know", not "grok"

[16:56] <nothingmuch> normally

[16:56] <nothingmuch> well, if you are in ReaderT IO

[16:57] <nothingmuch> for example.

[16:57] <nothingmuch> or any other transformed monad

[16:57] <nothingmuch> in order to safely use the type of the nested monad (IO) with a ReaderT IO type, you just wrap the call with liftIO

[16:59] <luqui> oh my

[16:59] <nothingmuch> dinner

[16:59] <luqui> good thing I'm working on this

[16:59] <luqui> &import calling conventions are very broken

[16:59] <nothingmuch> luqui: see chapter 5 or so of harrorth

[17:02] <gaal> btw, luqui: http://www-users.cs.york.ac.uk/~ndm/hoogle/

[17:02] <gaal> the *very neat* thing is that you can search by type signature too, not just function name.

[17:03] <luqui> thanks

[17:04] <gaal> try it: say (a -> b) -> [a] -> [b] in the search box and you'll get map (and some other things as well)

[17:04] <Khisanth> doesn't lambdabot do that too?

[17:04] <gaal> "@hoogle" does

[17:05] <Khisanth> heh

[17:06] <gaal> brb

[17:43] <luqui> gaal: poke

[17:45] <stevan> hey luqui, hows things?

[17:46] <luqui> things are okay

[17:47] <luqui> yet again trying to wrap my brain around haskell

[17:47] <stevan> luqui: I can see :)

[17:47] <luqui> and just think, it's all yak shaving anyway

[17:48] <luqui> the reason I've spent four hours staring at six lines in Parser.hs

[17:48] <luqui> is because it dies if there is no "import" when you pass arguments to "use"

[17:48] <luqui> I could have gotten around it just by, well, not passing arguments to "use"

[17:48] <svnbot6> r5790, Stevan++ | Perl6::MetaModel - (P6 version)

[17:48] <svnbot6> r5790, Stevan++ | * added Perl6::Instance to represent instances of object

[17:48] <svnbot6> r5790, Stevan++ | * removed all circularity (at least I think I did)

[17:48] <svnbot6> r5790, Stevan++ | * Perl6::Object is now completely defined in the metamodel

[17:49] <luqui> I see you've just been going on the metamodel since yapc

[17:49] <stevan> luqui: yup, have a Perl6, Javascript and Java version going 

[17:49] <luqui> Javascript... that's awesome

[17:49] <stevan> it's starting to get there I think (assuming Larry doesn't change things again)

[17:49] <luqui> We can use Perl 6 to script flash :-)

[17:50] <stevan> yup

[17:50] <stevan> have you see iblech's PIL -> JS compiler?

[17:50] <luqui> nein

[17:50] <stevan> ah

[17:50] <stevan> look in perl5/PILJS (i think that is the folder name)

[17:50] <luqui> does it have a frontend?

[17:51] <luqui> yes

[17:54] <luqui> sweet

[17:54] <svnbot6> r5791, iblech++ | PIL2JS:

[17:54] <svnbot6> r5791, iblech++ |   * Fixed .ref on String, Number, and Boolean objects.

[17:54] <svnbot6> r5791, iblech++ |   * $foo[...] dies now if $foo isn't an array. Same for $foo{...}.

[17:54] <svnbot6> r5791, iblech++ |   * Yesterday's bug, say ~@array.delete(...), is fixed now.

[17:55] <luqui> what's a js interpreter for linux?

[17:55] <nothingmuch> mozilla spidermonkey supposedly

[17:55] <nothingmuch> maybe it's not mozzilla only

[17:56] <nothingmuch> e.g, has a standalone thingy

[17:56] <nothingmuch> but you won't have any dom

[17:56] <Khisanth> maybe someone will write one for parrot :)

[17:56] <geoffb> `apt-cache show libsmjs1`, if you are on a Debian-derived linux

[17:56] <geoffb> Khisanth, that has been discussed here and there, I think

[17:58] <geoffb> `apt-cache search javascript | grep -i javascript` is fairly impressive

[17:58] <geoffb> (to me, at least)

[17:58] * luqui adores gentoo

[17:58] <luqui> emerge spidermonkey

[17:58] <stevan> Khisanth: IIRC, cwest was working on one in Perl 5 (to eventually get converted/compiled to Parrot)

[17:58] <geoffb> luqui, OOC, is there an `apt-cache search`-equivalent for gentoo?

[17:58] <stevan> luqui: you can always use a browser too

[17:58] <iblech> geoffb: esearch

[17:59] <geoffb> iblech, ah

[17:59] <geoffb> Wheee, chapter 9, About Monads . . . 

[17:59] <Khisanth> there is also equery

[17:59] * geoffb finally getting back to reading Haskell tutorials after a couple days off

[18:00] <nothingmuch> YAHT?

[18:00] <geoffb> _A Gentle Introduction to Haskell_

[18:00] <nothingmuch> ah

[18:00] * nothingmuch hasn't tried that one yet

[18:00] <geoffb> Appears to be written as a companion to the standard reference material

[18:01] <geoffb> (Sorta like the red book is a companion to the blue book in the OpenGL world, I guess)

[18:01] <stevan> iblech: I think the JS metamodel is probably evolved enough to begin intergration

[18:01] <geoffb> Yayyy

[18:02] <iblech> stevan: Great! :)

[18:02] <stevan> iblech: the big issues I can see are integrating the base container types (Array, Hash, etc)

[18:02] <luqui> wow... umm... pil2js is good enough to run Test.pm

[18:02] <luqui> I'm thoroughly impressed

[18:02] <geoffb> stevan, earlier you said you had P6, Java, and JS versions working -- what about the P5 version?

[18:02] <iblech> luqui: And many actually tests pass :)

[18:02] <stevan> geoffb: sorry, not p6, it's p5

[18:02] <geoffb> iblech++ # giving autrijus a run for his money in implementation speed

[18:03] * stevan has a cold, and is pretty spacey from the meds right now :)

[18:03] <nothingmuch> meds--

[18:03] <nothingmuch> sleep++

[18:03] <geoffb> stevan, yucko, hate that myself

[18:03] <nothingmuch> water++

[18:03] <stevan> yes, water++

[18:03] * luqui has to sleep now, but will be back in <=12 hours to work on the pil2p5 compiler

[18:03] <stevan> luqui: putter started one of those too

[18:03] <geoffb> luqui, yay! again

[18:04] <luqui> I'll look at putter's

[18:04] <geoffb> stevan, is there anything left of the P6 MM?  Or did it have to be completely scrapped?

[18:04] <luqui> I intend to write it in perl 6, if he hasn't

[18:05] <luqui> anyway

[18:05] <luqui> hasta luego

[18:05] <stevan> luqui: yes, his is in p5

[18:05] <stevan> geoffb: that is mugwumps work currently

[18:05] <stevan> but is more a sketch, nothing works

[18:06] <nothingmuch> stevan: huh?

[18:13] <stevan> iblech: are there JS level container types

[18:14] <stevan> iblech: I see, PIL2JS.Hash

[18:15] <brentdax> Anyone want to fix my pet peeve about Pugs's error messages, and make the "no compatible sub found" error print out the argument types you passed in?

[18:30] *** iwlx is now known as wilx

[18:46] <geoffb> OK, well *that* was brain-melting

[18:46] <geoffb> time for a break

[18:51] <gaal> meow

[19:03] <geoffb> *yawn*  OK, time for ch 10

[19:10] * Aankhen`` goes to sleep.

[19:10] <Aankhen``> G'night.

[19:24] <iblech> Hm... svn.openfoundry.org down, can't checkin PIL2JS patches...

[19:24] <iblech> Anyway, need to sleep now :)

[19:24] <iblech> Good night all :)

[20:12] <brentdax> Hmm...I have a hashref with some named parameters for a function.  If I splat it, it seems to flatten the pairs, too.  What to do, what to do...

[20:12] <brentdax> Hmm...I have a hashref with some named parameters for a function.  If I splat it, it seems to flatten the pairs, too.  What to do, what to do...

[20:12] <brentdax> (d'oh.)

[21:08] <dudley> Can anybody point me towards an explanation of  :()  ?

[21:08] <Khisanth> a smiley? :)

[21:10] <dudley> :(

[21:14] <dudley> Does it mean anything? Or am I just making stuff up now?

[21:14] * dudley grows ever more confused

[21:16] <Khisanth> are you seeing it being used somewhere?

[21:17] <dudley> No, I thought I remembered people talking about it a while back, but I might be hallucinating.

[21:20] <Khisanth> dudley: perhaps you mean ::()?

[21:22] <dudley> Possibly, but they were separate things in my brain.

[21:23] <Khisanth> hmm both ::() and :() appears in the log

[21:24] <Khisanth> dudley: I guess you can asl wolverian :)

[21:29] <brentdax> I think :() allows you to create a siglet, like :(Str, Int, Array), while ::() is the symbolic dereferencer.  Could be wrong about the former, though.

[21:50] <dudley> Aha! it is a siglet!

[21:50] <dudley> http://groups-beta.google.com/group/perl.perl6.language/browse_thread/thread/a264690496f82a28?tvc=2&q=siglet&hl=en

[21:50] <dudley> brentdax++

[21:53] <coral> (darren duncan)++ # "I will

[21:53] <coral> (darren duncan)++ # "assume that =:= is the definitive answer until the official docs 

[21:53] <coral> decide to unambiguously say otherwise. "

[21:53] * coral has no idea how that worked out from a single paste keystroke

[21:55] <Khisanth> you pasted a newline char :)

[22:02] <coral> it filled in the karma from the previous line, though

[22:02] <coral> like autointent through irssi somehow

[22:02] <coral> (er, indent)

[22:53] * geoffb pops back out of the left branch (haskell) and heads for the right branch (forth) of his postorder harrorth traversal

[22:57] <geoffb> Anyone have a recommendation of which forth interpreter to learn with?  Or are the various options fairly close to equivalent?

[22:58] <geoffb> A short apt search shows pfe, kforth, gforth, pforth, and yforth . . . .

[23:00] <mugwump> OpenBOOT?

[23:00] <coral> searching for an answer i found a tangent

[23:00] <geoffb> heh, I think my wife would actually like to be able to use her Mac at the same time I'm learning forth . . . 

[23:00] <coral> http://angg.twu.net/forth.html # Tcl<->PForth

[23:01] <geoffb> OK, yforth seems to knock itself out (the package description says "For general Forth programming or learning under Linux, yForth? is not the best choice.")

[23:02] <geoffb> ?eval ([|] <pfe kforth gforth pforth yforth>).pick

[23:02] <evalbot6> Error: Cannot reduce() using a unary or nullary function. 

[23:03] <geoffb> ?eval <pfe kforth gforth pforth yforth>.pick

[23:03] <evalbot6> 'pforth' 

[23:03] <coral> http://www.softsynth.com/pforth/pf_tut.htm # pforth tutorial

[23:03] <coral> heh

[23:03] <coral> nice

[23:03] <geoffb> and there you go

[23:03] <coral> that felt a lot like hitting a small jackpot

[23:03] <geoffb> heh

