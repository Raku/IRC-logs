[00:50] <dduncan> ?eval my $foo = {1=>2,3=>4,5=>6};

[00:50] <evalbot_7422> {('1' => 2), ('3' => 4), ('5' => 6)} 

[00:51] <dduncan> ?eval my $foo = {1=>2,3=>4,5=>6}; my $bar = $foo;

[00:51] <evalbot_7422> {('1' => 2), ('3' => 4), ('5' => 6)} 

[00:52] <dduncan> ?eval my $foo = {1=>2,3=>4,5=>6}; my $bar = hash($foo);

[00:52] <evalbot_7422> Error: cannot cast from VUndef to Handle (VHandle) 

[00:52] <dduncan> ?eval my $foo = {1=>2,3=>4,5=>6}; my $bar = hash(%{$foo});

[00:52] <evalbot_7422> Error: cannot cast from VUndef to Handle (VHandle) 

[00:52] <dduncan> my $foo = {1=>2,3=>4}; my $bar = hash(%{$foo});

[00:52] <dduncan> ?eval my $foo = {1=>2,3=>4}; my $bar = hash(%{$foo});

[00:52] <evalbot_7422> Error: cannot cast from VUndef to Handle (VHandle) 

[00:56] <dduncan> ?eval my $bar = 3;

[00:56] <evalbot_7422> \3 

[00:58] <dduncan> ?eval my $foo = {1=>2,3=>4,5=>6}; my $bar = %{$foo};

[00:58] <evalbot_7422> {('1' => 2), ('3' => 4), ('5' => 6)} 

[00:59] <dduncan> ?eval my $foo = {1=>2,3=>4,5=>6}; my $bar = %{$foo}; $bar.kv.join( ', ' )

[00:59] <evalbot_7422> '1, 2, 3, 4, 5, 6' 

[01:00] <dduncan> ?eval my $foo = {1=>2,3=>4,5=>6}; my $bar = $foo; $bar.kv.join( ', ' )

[01:00] <evalbot_7422> '1, 2, 3, 4, 5, 6' 

[01:12] <dduncan> ?eval my $foo = {1=>2,3=>4,5=>6}; my $bar = $foo; $bar.pairs.join( ', ' )

[01:12] <evalbot_7422> '1 2, 3 4, 5 6' 

[03:10] <dduncan> I seem to have fixed Locale-KeyedText, but the process was painful ... its checked in now

[03:10] <svnbot6> r7423 | Darren_Duncan++ | /ext/Locale-KeyedText : updated KeyedText.pm and t_LKT_Util.pm to remain compatible with recent Pugs changes

[03:28] <nothingmuch> oh god

[03:28] <nothingmuch> you say "normal exception handling" and then everyone jumps at you

[03:28] <nothingmuch> i'm so sick of that thread

[03:28] <nothingmuch> why can't they just let it go?

[03:45] <putter> geoffb: 3617 (pilrun tests passed) of 7716 (piljs tests run) is < 50%.  6910 (pilrun tests run) vs 7716 is a bunch of test files utterly failing.

[03:45] <putter> iblech: note geoffb's puzzlement.  pity poor users unfamiliar with pugs.  the %ages need to be normalized.

[03:46] <geoffb> putter, ah, now I get it

[03:46] <putter> :)

[03:46] <geoffb> So some test files don't even manage to cough up a plan?

[03:47] <putter> actually, a program that doesnt do anything passes... I don't really remember... perhaps 20% of the test suite?  all the negative tests.

[03:47] <geoffb> sigh

[03:47] <geoffb> It's like getting 400 on the SATs just for putting your name at the top.

[03:48] <geoffb> .oO( I wonder if they still use that stupid scale . . . ? )

[03:48] <putter> geoffb: yes.  there are non-terminations cpu intensive, non-termination cpu-less hangs, memory exhaustions, etc, etc.

[03:48] <geoffb> bleah

[03:48] <geoffb> fair enough

[03:48] <putter> actually, the 100% pugs is a bit of a crock.  from an end user perspective.

[03:49] <putter> for developers it's fine.  but for users, a skip is no better than a fail.  so pugs is at...

[03:51] <putter> ~70%

[03:51] <geoffb> gah

[03:52] <geoffb> Yes, normalization is in order.

[03:52] <putter> and that's of a test suite which tends to be driven by the implementation, rather than covering the spec.

[03:52] <geoffb> But how to know what is correct number for total, given that some tests fail utterly on some backends?

[03:53] <geoffb> nodnod, well, that much was well advertized

[03:54] <putter> max tests (ie, pugs) is one option.  another is an arbitrary 10k (ie, normalized pugs).  another is 20k (closer to the total number of tests anticipated for p6 coverage)

[03:54] <geoffb> How many does p5 have these days?

[03:55] <putter> ?

[03:55] <geoffb> How big is the perl (5) test suite?

[03:55] <sili_> ginoperous

[03:56] <putter> 365 .t files...

[03:56] * geoffb doubts that Perl 6's test suite can reasonably be smaller, even if perl 5 tests are overconservative

[03:58] <geoffb> &

[03:58] <putter> a very quick and superficial look suggests pugs and p5 may already

[03:59] <putter> have a comparable number of tests.

[03:59] <putter> g'night geoffb

[03:59] <geoffb> you too

[03:59] <putter> tnx

[04:04] <scook0> hmm

[04:04] <scook0> is there any reason the default typechecker needs to be *rejecting* programs?

[04:04] <scook0> (rather than just giving a warning)

[04:04] <putter> sigh.  ./pugs official "pass" of a month ago was "96%".  Which _really_ meant a third of the things we tested for, did not in fact work.

[04:05] <putter> the smoke's would be awash in red, if the colors were tuned for users rather than developers.

[04:06] <putter> scook0: ?

[04:06] <Supaplex> greetings fine gentlemen

[04:06] <scook0> re: p6l "Type annotations"

[04:06] <Supaplex> oh, and buu. ;)

[04:10] * putter is concerned folks are forgetting how very much doesn't work yet, and how little p6 code is actually being written (and with what difficulty).  which may lead to misleading and disappointing users.  burning credability perl6 already doesnt exactly have in abundance.

[04:11] <Supaplex> so how do we fix this putter?

[04:15] <putter> Supaplex: change skipped and todo tests to shades of red?  ;)   stay clear ourselves on how much isnt working yet.  and undersell our capabilities to others.

[04:16] <Supaplex> sounds reasonable.

[04:16] <Supaplex> come to think of it, I had an awesome idea for p6 just int he last day or two ... meh :( I can't recall

[04:18] <Supaplex> will p6 be a reasonable canidate for desktop applications?

[04:18] <SamB> Supaplex: who can say?

[04:18] <SamB> Supaplex: will it even work?

[04:19] <Supaplex> good point

[04:20] <Khisanth> will the specs ever get to a point resembling "complete"? :)

[04:20] <Khisanth> or at least .. "fixed"

[04:20] <putter> eg, for this release, -Bjs is best described as running a perl4ish dialect of p6, and is probably the most noteworthy accomplishment.  or if aut gets a linkable pugs and Inline::Pugs working.  -Bperl5 imho does not, from an end user perspective, deserve more than passing mention.

[04:26] <putter> SamB: once some backend, or even a combination of backends, provides working rules, oo, and a compiler which doesn't choke too often, it should be surprisingly easy to do, for example, ruby to p6 transliteration.  those challenges are ones of implementation, not language definition.  and that capability provides a lower bound on what p6 will be able to do.

[04:29] <Khisanth> but how will running ruby give perl6 credability?

[04:30] <putter> running anything will give p6 credibility

[04:30] <PerlJam> Why does perl6 need credibility again?

[04:30] <PerlJam> and credibility to whom?

[04:31] <Khisanth> putter: that makes it sound like it's in a rather sad state of affairs ...

[04:37] <putter> we've got a very very neat baby.  even todler.  lots of potential.  may even grow up to be president (even though that's not saying much these days;).  but we haven't really written any large p6 programs yet... and the occasional attempts have not gone smoothly.

[04:40] <dduncan> I agree with changing skipped/todo to something more like red

[04:40] <dduncan> but there are different reasons that should show up differently

[04:41] <dduncan> in a fully working system, the only reason to have a skip is if that test is for an optional component that the user didn't choose to install

[04:41] <dduncan> whereas, anything conceptually non-optional, particularly anything that isn't ok because Pugs isn't far enough along to implement it yet, should be reddish ... maybe orange or yellow

[04:43] <dduncan> for fails, I see at least 3 levels:

[04:44] <dduncan> 1. the most red is if the test script dies before spitting out a count of tests; maybe also use this if the test script ties part way through as well

[04:44] <dduncan> or those can be 2

[04:44] <dduncan> 2. the script does not die, but reports an ordinary failure

[04:44] <dduncan> 3. the script gives a todo, should Pugs not be ready to implement it, or the code is incomplete

[04:45] <dduncan> those should all be shades of red

[04:45] <dduncan> maybe maroon, mid red, and orange

[04:45] <dduncan> yellow or light green can be skips due to an optional feature not being chosen by the user or their not installing an optional prereq

[04:46] <dduncan> and dark green would be a normal successful tets

[04:46] <dduncan> test

[04:50] <dduncan> Khisanth, why get politics involved in this?

[04:50] <PerlJam> putter: Why do you think that pugs development is the bottleneck?

[04:51] <putter> Khisanth: the other upbeat aspect is that I suspect we will have a supercritical cascade release at some point.  a depends on b depends on c depends on d which depends on autrjus.  at some point d gets kicked, and rumble thunder boom.

[04:51] <PerlJam> putter: why do you think that autrijus is critical to perl6?

[04:52] <dduncan> I would say he is very important to perl6

[04:52] <Khisanth> PerlJam: he seems to hack most of the haskell parts?

[04:52] <dduncan> providing a good kick in the level of progress

[04:53] <dduncan> t'werent for pugs, I doubt there would have been an environment to run perl 6 code in by now

[04:53] <scook0> an implementation is critical to P6, and pugs is the only (top-down) implementation

[04:53] <scook0> autrijus is critical to pugs

[04:53] <PerlJam> dduncan: I agree.  

[04:54] <PerlJam> I will also agree that autrijus has been an excellent person to rally around and has helped perl6 development greatly.

[04:54] <scook0> and the 'real' implementation is unlikely to get written until pugs is complete enough to write it in

[04:54] <PerlJam> but perl6 hardly has a truck-number of 1 (autrijus).  That's the vibe I'm getting.

[04:56] <putter> PerlJam: pugs is the only existant parser and compiler.  their limitations and bugs define what it is currently possible to do.  it should be possible to do a non-hs compiler shortly after oo starts working.  but even a minimal compiler will I suspect be the largest p6 program ever written, and thus a stress test with associated difficulties.

[04:56] <PerlJam> scook0: the real implementation will depend on perl6 rules.  AFAIK autrijus isn't working in that area.

[04:56] <Khisanth> speaking of which, whatever happened to that anyway?

[04:57] <scook0> really?

[04:57] <PerlJam> Khisanth: you mean PGE?

[04:57] <scook0> I thought the current plan was to get Pugs to a stage where perl6 can be written in Perl 6

[04:57] <dduncan> last I checked, the perl6 rules were being implemented in Parrot

[04:57] <scook0> with Pugs as the bootstrap

[04:57] <dduncan> it is

[04:57] <Khisanth> PerlJam: yup

[04:57] <dduncan> Pugs is the bootstrap of the main parg

[04:58] <dduncan> and PGE/Parrot the bootstrap of the other part

[04:58] <PerlJam> Khisanth: last I heard (several weeks ago), Larry and Damian keep changing certain semantics that make it quite difficult to implement something concrete

[05:00] <PerlJam> But pmichaud has disappeared as far as I know.  I've not seen hide nor hair nor avatar in quite a while.  

[05:00] <PerlJam> Maybe he's on vacation

[05:01] <putter> pge/parrot is the furthest along p6 rules implementation.  some stuff of mine is the only other activity I know of.  pge is a one-man show.  and I'm unclear on whether it's being semi-actively developed, on hold slated for replacement by an alternate approach, or simply very quiet.

[05:02] <putter> PerlJam: writing anything in assembly language (which is basically what pir is) requires a stable spec.  its not a good exploratory programming language.  which is one reason it's always seemed an iffy choice for the first draft rules engine.

[05:05] <PerlJam> putter: What would you have done?

[05:05] <PerlJam> (or what rules-related stuff have you done?  I haven't kept up)

[05:06] <scook0> anybody know how `foo.()`-style calls are supposed to interact with adverbs?

[05:06] <scook0> (syntax-wise)

[05:07] <scook0> can I say `foo :adverb .()`?

[05:07] <scook0> or `foo .() :adverb`?

[05:07] <PerlJam> scook0: The former is highly doubtful :)

[05:07] <putter> PerlJam: re criticality of autrijus, while other lambda camels have contributed, autrijus is the only person who as done large scale reengineering of pugs/hs.  and several acts of such reengineering will be needed as pugs matures.  and I see very little chance of p6 comming into existence any time soon without pugs.  which means if autrijus gets hit by a bus, I give up on p6.

[05:09] <scook0> hmm

[05:10] <PerlJam> putter: That's a strange attitude.

[05:11] <scook0> I suspect that adverbs outside parens can only come _after_ the parens, if there are any

[05:11] <scook0> otherwise adverb-parens get confused with call-parens

[05:16] <putter> PerlJam: it took under a calendar week to write a prolog engine, linkable to p5, which passes the p5 test suite modulo embedded code.  admittedly it's not a very thourough test suite.  when I get an extra day, I plan to address that last embedded code bit.  finishing up the p6 version will take another couple of days.  that will be under 100hrs dev time total, to get a fast working prototype thourougly correct.  and easily updated.  we 

[05:16] <putter> could have a p6 rules grammar for p6 now if that existed.  next step is deriving a p5 emiter/engine from the prolog one.  scheduling and success on that is more iffy, as performance is so important.  but I'm optimistic.  I give it about a 1/3 chance of being straightforward.

[05:20] <putter> scook0: i dont know, but I'm not so doubtful about before paren adverbs.   after all, rx:foo(3)(bar) is fine.

[05:20] <putter> i think.  fuzzily.  when I should be asleep.

[05:20] <putter> good night folks &

[05:20] <PerlJam> g

[05:20] <scook0> bye

[05:20] <PerlJam> g'night putter

[06:02] <dduncan> seeing as there was no public smoke from the last day, I posted my first one

[06:03] <dduncan> under darwin: Pugs 6.2.9  r7423 08 Oct 2005 06:00 Sat 96.67 min 99.28 % ok 10307: 10233, 74, 1220, 1512, 0 » » 

[07:01] <gaal> dduncan: there's also a win32 one there. producing a new one here....

[07:07] <dduncan> and hello to you too

[07:08] <dduncan> fyi, Locale-KeyedText is all fixed, though it was painful to figure out the problem ... I ended up just recoding some bits in a different way to get them to work

[07:08] <dduncan> eg, I found strange things happening with .pairs that were difficult to reproduce, so I recoded the bits with .keys and another hash lookup instead, the perl 5 way

[07:09] <dduncan> in this case, difficult meaning that I was unable to reproduce them outside of my module

[07:10] <gaal> hi :) yes, pairs are still in the doimain of Weird

[07:10] <dduncan> most of my problems are related to pairs and/or hashes

[07:11] <dduncan> eg, simply assigning one hash to another with $foo = $bar results in the new hash being a condensed version of the original, every key/pair was concated into a single string

[07:11] <dduncan> if you see various smoke errors about odd numbers of elements in a hash, it is probably related to this

[07:11] <gaal> yeah

[07:11] <dduncan> one workaround I found was to say $foo = %{$bar}

[07:12] <dduncan> another one was to use .keys instead of .pairs

[07:12] <dduncan> separately, I found I had to wrap an array property in an @{} in order for a .map to work properly 

[07:13] <dduncan> related to that, I removed a bunch of hash(), which used to be necessary but now seem to cause problems instead of helping

[07:13] <dduncan> also, I verified that Pugs still has the hash bug where keys auto-vivify when they are referenced

[07:14] <dduncan> due to various issues, my current Locale-KeyedText has a bunch of cruft in it

[07:15] <dduncan> suffice it to say that, following the CPAN release of 6.2.10, I'm going to delete that and just have the rewritten cruft-free Locale-KeyedText inside Rosetta-Incubator instead

[07:15] <dduncan> and that should function once the new MetaModel and proper object support is integrated into Pugs

[07:17] <dduncan> I figure that the change-over to the MetaModel, plus a Parser overhaul built on the new PIL, should cause a lot of things to just work in Pugs, both adding new features and removing most of the need for cruft

[07:17] <dduncan> so release 6.28.0 should be sweet indeed

[07:18] <dduncan> meanwhile, 6.2.10 will have the functional/fixed older version

[07:24] * autrijus wakes up and backlogeth

[07:24] <autrijus> putter++ putter++ putter++

[07:24] <autrijus> # reality check

[07:25] <autrijus> I was constantly worried about overadvertisement

[07:25] <autrijus> and still am. but at the same time I can't help but be very excited/enthusiastic about progress.

[07:25] <autrijus> so it requires a delicate balance ;)

[07:26] <gaal> it also requires: (1) saying we're developing for development, for now

[07:26] <gaal> (2) no busses;

[07:27] <gaal> i think we do #1 enough... when i enthuse about pugs to people i try to convey this at least.

[07:28] <autrijus> geoffb: I actually fixed the parrot_config bug, but a nap turned into unexpected sleep

[07:28] <autrijus> so I'm committing it now. apologies

[07:29] <gaal> is there a checklist for this release?

[07:29] <svnbot6> r7424 | autrijus++ | * link in parrot_config.o explicitly during parrot embedding;

[07:29] <svnbot6> r7424 | autrijus++ |   not until 0.3.1 will we have "include/" installed in parrot

[07:29] <svnbot6> r7424 | autrijus++ |   base, so currently we still need a build tree of parrot.

[07:29] <svnbot6> r7424 | autrijus++ |   C'est la vie.

[07:29] <autrijus> gaal: it's the usual one. tests and changelogs

[07:30] <autrijus> I think I'm done with cabal.

[07:30] <gaal> k. i'll have an updated smoke up soon.

[07:30] <autrijus> so, pick one and I'll do the other :D

[07:30] <gaal> i'll do the tests. (but did anyone take a look at that weird one? what was it...)

[07:30] <gaal> ext/libwww-perl/t/base/headers-util.t

[07:31] <autrijus> dduncan: indeed. totally need to make cruftfree OO code viable after this.

[07:31] <autrijus> I did not. sec

[07:31] <autrijus> fixed.

[07:32] <gaal> oh, we also need to make a decision about trans (the map/pair issue).

[07:32] <gaal> autrijus++ # "sec" means sec

[07:32] <gaal> your -> Pair $_ workaround in the Prelude carries things a little further, but there are still crashes.

[07:33] <autrijus> I think, rewrite it without map+pair

[07:33] <gaal> heh, okay

[07:33] <autrijus> and push demagicalization through following the release.

[07:33] <autrijus> (see my commit log.)

[07:34] <svnbot6> r7425 | autrijus++ | * when you iterate an array of pair, always require type annotation.

[07:34] <svnbot6> r7425 | autrijus++ |   (I thought the base dynamic perl6 was a type annotation free language?

[07:34] <svnbot6> r7425 | autrijus++ |    whatever happened to that? ;-))

[07:34] * gaal giggles

[07:35] <autrijus> for the record, I don't consider junctive application "base".

[07:37] * autrijus starts changelogging

[07:37] <autrijus> bbiab

[07:39] <gaal> hmmm, we've got a namespace/exportation bug. consider t/pugsbugs/attribute_hash.t

[07:39] <gaal> it crashes because "plan" is not found. but when "use Test" is pulled up to Main::, it doesn't find lives_ok

[07:40] <autrijus> hm. and export is meant to be lexical.

[07:40] <gaal> i'm pretty sure the .t code is correct as it is now; but exportation is apparently broken.

[07:41] <autrijus> yeah.

[07:41] <autrijus> lexical exports should fix the both counts.

[07:41] <gaal> Should Bundle::Pugs::SmokeKit be mentioned in the ChangeLog to encourage people to submit smokes?

[07:41] <autrijus> gaal: yes, definitely

[07:42] <autrijus> I wouldn't object to even a Makefile.PL probe

[07:42] <autrijus> actually, I'll code that up.

[07:42] <gaal> whoa, sec. t/pugsbugs/attribute_hash.t didn't crash yesterday

[07:42] <gaal> so we broke something very recently.

[07:43] <autrijus> eh?

[07:43] <autrijus> I'm remaking pugs. will test in a bit

[07:43] <gaal> yup, see the smoke for r7403

[07:44] <autrijus> gaal: can you add this cross-package export test (or, easier, the equiv export-is-lexical test -- "{ use Test }; ok()" should _not_ succeed) to t/packages/export.t?

[07:44] <gaal> tricky! but yes, of course.

[07:44] <autrijus> I'll look at what breaks attrhash.t.

[07:50] <svnbot6> r7426 | gaal++ | tests for lexical exports

[07:50] <autrijus> pugs built.

[07:50] <autrijus> attrhash does _not_ crash for me.

[07:51] <gaal> new smoke uploaded

[07:51] <gaal> eep

[07:51] <autrijus> eep is correct

[07:51] * autrijus puzzleth

[07:51] <autrijus> nopaste the crash when you run it alone?

[07:52] <pasteling> "gaal" at 192.115.25.249 pasted "attribute_hash.t crasheth" (3 lines, 141B) at http://sial.org/pbot/13546

[07:53] <autrijus> ghc 6.4.1, win32?

[07:53] <autrijus> no local changes? :)

[07:53] <autrijus> hm, apparently not win32.

[07:53] <gaal> yes win32

[07:54] <autrijus> mm.

[07:54] <gaal> very *minor* local changes :)

[07:54] <gaal> cleaning and remaking.

[07:54] <autrijus> rebooting to win32.

[07:56] <gaal> eep build hangs? on or just after

[07:56] <gaal> configure: Dependency template-haskell-any: using template-haskell-1.0

[07:56] <gaal> whatever, an interrupt and reinvocation worked.

[07:56] <autrijus> you are using 6.4.1-release-msi right?

[07:56] <gaal> oh wait! i know what we have different.

[07:57] <gaal> i was precompiling Test

[07:57] <autrijus> aha!

[07:57] <gaal> you prolly weren't.

[07:57] <autrijus> indeed.

[07:57] <gaal> hmm

[07:57] <gaal> suckage.

[07:57] <autrijus> try again without precomp test?

[07:57] <autrijus> I'll try again /with/.

[07:57] <gaal> i *like* precomp Test :)

[07:57] <autrijus> I know. :)

[07:57] <gaal> ok, testing

[07:58] <gaal> hmm, fiddling with config.yml triggered a rebuild of syck.

[08:04] <gaal> yeah, it was the precompiled prelude.

[08:04] <autrijus> nah, cabal always rebuilds syck.

[08:04] <autrijus> and pcre, etc.

[08:04] <autrijus> hadn't figured out how to stop it

[08:04] <autrijus> but doesn't hurt too much

[08:04] <gaal> well, that's fast at least.

[08:05] <autrijus> so precomp test only fails on this single test?

[08:05] <autrijus> (I'm still compiling)

[08:05] <gaal> i think so, unless there are others with scoping issues. i'll look at the smoke (this is just one that i noticed fail as it was running)

[08:06] <gaal> yes, looks like it.

[08:07] <gaal> there are many skips though, which might be crashes before plan, etc.; looking into that now.

[08:08] <autrijus> at this stage I'm probably going to just declare precomp Test noncanonical :)

[08:08] <autrijus> since I suspect fixing export can make lots of those issues go away 

[08:08] <gaal> yeah, that makes perfect sense

[08:08] <gaal> sure.

[08:08] <autrijus> and aye, I duplicated the bug.

[08:11] <autrijus> gaal: and the reason is that "is export" is not seen twice

[08:11] <autrijus> gaal: I suspect what we really need is a link set semantics. but failing that, a default &import that is reusable.

[08:11] <autrijus> but both are after 6.2.10

[08:12] <gaal> not seen twice?

[08:12] <autrijus> # XXX - FIXME - Here we qualify the Test:: methods, because

[08:12] <autrijus> # when precompiling Test.pm with prelude (see config.yml),

[08:12] <autrijus> # export works differently and cause the plan() to be hidden

[08:12] <autrijus> # (as currently the export only happens at parsing time, and

[08:12] <autrijus> # precompilation inhibits the reparsing)

[08:12] <svnbot6> r7427 | gaal++ | connect now fails on error

[08:13] <gaal> hmmm. non-Test prelude builtins don't have this problem because... they're supposed to be global?

[08:13] <autrijus> yes.

[08:13] <gaal> is builtin/primitive

[08:13] <autrijus> and we made sure we qualify everything in them

[08:14] <gaal> i see

[08:14] <autrijus> anyway, I did what is required as a workaround.

[08:17] * autrijus goes back to chglgng

[08:17] <svnbot6> r7428 | autrijus++ | * add explicit Test::: qualifier to attribute_hash.t:

[08:17] <svnbot6> r7428 | autrijus++ |     # XXX - FIXME - Here we qualify the Test:: methods, because

[08:17] <svnbot6> r7428 | autrijus++ |     # when precompiling Test.pm with prelude (see config.yml),

[08:17] <svnbot6> r7428 | autrijus++ |     # export works differently and cause the plan() to be hidden

[08:17] <svnbot6> r7428 | autrijus++ |     # (as currently the export only happens at parsing time, and

[08:17] <svnbot6> r7428 | autrijus++ |     # precompilation inhibits the reparsing)

[08:17] <svnbot6> r7429 | gaal++ | add reason for skip

[08:23] <svnbot6> r7430 | vkon++ | add readline to Pugs.cabal.in

[08:23] <svnbot6> r7431 | gaal++ | unskip tests; parrot no longer causes hangs here

[08:23] <svnbot6> r7432 | gaal++ | add reason for skip

[08:27] <autrijus> vkon: er no, why?

[08:27] <autrijus> vkon: build_pugs.pl adds readline if needed

[08:27] <autrijus> ...except it does not. oops. fixing

[08:29] <autrijus> fixed.

[08:29] <svnbot6> r7433 | autrijus++ | * instead of adding readline to Pugs.cabal.in, fix

[08:29] <svnbot6> r7433 | autrijus++ |   build_pugs.pl so it probes correctly. vkon++!

[08:46] <svnbot6> r7434 | gaal++ | detect missing smoke stuffs and encourage the user to install them

[08:48] <vkon> autrijus: newer GHC more restrictive, and people reported build problem. Its good you fixed it better than I did :) and sorry for delayed answer (PC wasn't prepared)

[08:49] <autrijus> no prob

[08:49] <autrijus> vkon++

[08:49] <scook0> autrijus: I'm looking at `parseNoParenParamList` in Parser.hs, and it's turning my brain inside-out

[08:49] <scook0> how the heck does it work?

[08:49] <autrijus> very carefully.

[08:50] <autrijus> which part are attacking your brain?

[08:50] <autrijus> the first formal<- is merely a sepEndBy

[08:50] <autrijus> with the restriction that the first part (the ones before :) cannot suffer a dot after a block.

[08:51] <scook0> what's meant by "a block"?

[08:51] <autrijus> foo {}.blah

[08:52] <autrijus> the {}.blah is a unit

[08:52] <scook0> oh, that kind of block

[08:52] <autrijus> foo:{}.blah

[08:52] <autrijus> the {} belongs to foo as it can now suffer it.

[08:52] <autrijus> (please add comments to that effect)

[08:52] <scook0> I shall try

[08:53] <scook0> btw, what exactly is it supposed to be parsing?

[08:53] <scook0> a listop-style arglist?

[08:54] <scook0> (I'm trying to figure out what all the various `parseParamList` parsers are responsible for)

[08:59] <autrijus> scook0: yeah

[08:59] <autrijus> it's a listop style arglist without parens

[08:59] <autrijus> either with parens already accounted for

[08:59] <autrijus> or the parenless form

[09:04] <scook0> it seems to be getting called from some weird places though

[09:04] <autrijus> hmmm?

[09:05] <scook0> like after parsing `foo .(`

[09:05] <scook0> shouldn't that be equivalent to `foo(`?

[09:08] <autrijus> yes?

[09:08] <autrijus> so both calls the same parseNoParenParamList (I think)

[09:08] <scook0> I guess my real question is:

[09:09] <scook0> what's the fundamental difference between HasParen and NoParen?

[09:09] <gaal> scook0: how do you tell where it's called from? you mean just grepping the code for references or is there some funky caller()-like debugging trick in haskell i shouldn't know of? :)

[09:09] <scook0> (both in terms of what they do, and who calls them)

[09:09] <scook0> gaal: I just use grep

[09:10] <autrijus> scook0: HasParen is always surrouded with verbatimParens

[09:10] <gaal> ah, okay :)

[09:10] <autrijus> so much so that I think we should factor verbatimParens into it

[09:10] <autrijus> and inside parens we can suffer everything

[09:10] <autrijus> foo({})

[09:10] <autrijus> is just fine

[09:11] <autrijus> foo({}.bar) too

[09:11] <autrijus> so we don't need special directive to support adverbial blocks

[09:11] <autrijus> foo:{}.blah

[09:12] <autrijus> I think the ruleBlockLiteral is the only difference

[09:12] <autrijus> would be nice to merge them into one

[09:12] <scook0> so really the only difference is that NoParens has to be careful not to swallow `{}.blah`?

[09:14] <scook0> autrijus: merging is one of the reasons I'm looking into them in the first place

[09:15] <autrijus> nodnod.

[09:16] <scook0> what's with (`sepEndBy` symbol ":") anyway?

[09:16] <scook0> what sort of colon is that supposed to be--invocant?

[09:17] <autrijus> yeah

[09:17] <autrijus> see processFormals

[09:18] <scook0> and processFormals should never get a list of length > 2

[09:18] <autrijus>     _                   -> fail "Only one invocant allowed"

[09:18] <scook0> yep

[09:21] <scook0> autrijus: where do the actual argument expressions get parsed?

[09:22] <autrijus> argBlockish

[09:22] <autrijus> and as part of it, argVanilla

[09:23] <scook0> parseTightOp?

[09:23] <autrijus> yeah parseTightOp

[09:23] <autrijus> oh right, parenless is only tight

[09:23] <scook0> what is parseTightOp? (and parseLitOp etc.)

[09:23] <autrijus> and parenful can suffer lit

[09:23] <autrijus> see litOperators

[09:23] <autrijus> lit = tight+loose

[09:24] <autrijus> i.e. all operators minus the list-associative , Y

[09:24] <scook0> any reason it's called 'lit'?

[09:26] <scook0> I didn't realise parseLitOp/parseTightOp were parsing terms, btw

[09:29] <autrijus> please fix them

[09:29] <autrijus> ruleLitTerms

[09:29] <autrijus> "lit" as in "literal"

[09:29] <autrijus> as in non-list

[09:29] <autrijus> but this is too vague

[09:29] <autrijus> maybe "Item".

[09:32] <scook0> I'm still not clear on what parse*Op actually do

[09:33] <autrijus> look at parseOpWith

[09:33] <autrijus> there is a buildExpressionParser hidden in it

[09:34] <autrijus> it takes operator table

[09:34] <autrijus> returns something that can parse terms joined together with those operators

[09:34] <autrijus> the basic term is parseTerm.

[09:34] <scook0> buildExpressionParser is part of Parsec, right?

[09:34] <autrijus> yes. it's the reason why pugs exists.

[09:35] <autrijus> (and partly the reason why you can't parse 1+1 yet with PGE.)

[09:36] <autrijus> it's in Pugs.Rule.Expr

[09:36] <autrijus> I have tweaked it liberally from basic parsec

[09:36] <scook0> and the three different variants (parse, parseTight, parseLit) exclude 'tightnesses' of operator

[09:36] <autrijus> notably with optional prefix and list associations

[09:36] <autrijus> scook0: yes.

[09:37] <scook0> but essentially you give it a parser for atomic terms and a bunch of operators, and it gives you a parser for arbitrary expressions

[09:37] <autrijus> yes.

[09:37] <scook0> hokay

[09:37] <autrijus> tho the alleged "atomic" term is also partly built with buildExpressionParser

[09:38] <autrijus> it's a self recursive, potentially infinite parser structure.

[09:38] <autrijus> (which is why there is no parsec for Scheme... without laziness this can't be expressed easily)

[09:39] <scook0> how about something like 'parseTermWithTightOps' as a name?

[09:39] <autrijus> sure!

[09:39] <autrijus> fix ahead

[09:39] <scook0> (\_ -> laziness++)

[09:42] <scook0> and how about s/parseOpWith/parseTermWithCachedParser/?

[09:42] <autrijus> works for me.

[09:52] <svnbot6> r7435 | gaal++ | revert 7431: this test *does* hang here.

[10:26] <gaal> chromatic, ping

[10:27] <autrijus> lunch, bbiab

[10:27] <gaal> the 'use_ok's in 010_Test_Builder.t confuse the harness somewhat, because they emit a duplicate test header.

[10:28] <autrijus> hrmph.

[10:28] <svnbot6> r7436 | scook0++ | Parser.hs changes:

[10:28] <svnbot6> r7436 | scook0++ | * Rename parseOp & friends to parseExpWithOps

[10:28] <svnbot6> r7436 | scook0++ | * Factor out ruleInvocationCommon & parseParenParamListCommon

[10:28] <svnbot6> r7436 | scook0++ | * parseHasParenParamList now parses its own parens

[10:28] <svnbot6> r7436 | scook0++ | * Move maybeParensBool closer to its (only) caller

[10:29] <autrijus> woot, scook0++

[10:30] <scook0> thanks

[10:56] <rafl> Good morning.

[10:57] <rafl> Building pugs still doesn't work for me. I get linker errors: http://nopaste.debianforum.de/1293

[10:57] <rafl> -package plugins fixes some of the errors.

[10:58] <rafl> Some others still remain.

[10:58] <rafl> That's the output if I add -package plugins: http://nopaste.debianforum.de/1294

[10:59] <rafl> Any ideas?

[10:59] <rafl> autrijus: Maybe that's related to vkon's and your changes to the build system yesterday.

[11:02] <rafl> Ah, -package haskell-src makes the linking work.

[11:10] <svnbot6> r7437 | rafl++ | * Fix linking errors when compiling with hs-plugins support.

[11:11] <rafl> OK, now it builds fine again. I'll now adjust Makefile.PL to build perl5/ properly and src_to_blib.pl to install the right parts of perl5/*/blib* into blib6/ to install it into a sane location.

[11:48] <jp-autark> Hm, I only get errors like 'Can't exec "./Setup": No such file or directory at util/build_pugs.pl line 83.' when trying to make a fresh checkout of pugs.

[11:50] <scook0> jp-autark: what command(s) did you use to build it?

[11:51] <scook0> does the file 'Setup' actually exist?

[11:51] <jp-autark> scook0: first, perl Makefile.PL and then make

[11:52] <rafl> OK, perl5/ is being built and cleaned correctly now. Now only the installation stuff is missing.

[11:52] <rafl> jp-autark: I suspect there was an error during perl Makefile.PL.

[11:52] <jp-autark> the Setup file does not seem to exist.

[11:53] <rafl> jp-autark: ghc -package Cabal Setup.lhs -o Setup creates it.

[11:56] <scook0> it really should be getting generated by Makefile.PL though

[11:57] <jp-autark> rafl: it seems I don't have the Cabal package. 'ghc-6.4.1: unknown package:Cabal'

[12:00] <scook0> AFAIK, Cabal is part of the GHC distribution

[12:00] <scook0> so maybe there's something wrong with your GHC install

[12:01] <jp-autark> seems so.

[12:01] <scook0> what OS/package are you using?

[12:02] <jp-autark> gentoo

[12:05] <scook0> jp-autark: can you load other packages?

[12:05] <scook0> e.g. $ ghci -package QuickCheck

[12:06] <jp-autark> yes, that worked.

[12:06] <scook0> and $ ghci -package Cabal # fails?

[12:06] <jp-autark> yes, unknown package:Cabal

[12:15] <scook0> jp-autark: try $ ghc-pkg list # and see if Cabal shows up there

[12:16] <rafl> jp-autark: Gentoo and other distributions seperate Cabal and other packages from the ghc distribution.

[12:16] <jp-autark> scook0: it does indeed not appear in that list.

[12:16] <rafl> I don't know how's the ghc cabal package called in gentoo, though.

[12:16] <svnbot6> r7438 | rafl++ | util/PugsConfig.pm:

[12:16] <svnbot6> r7438 | rafl++ |  * Added new 'pugslibdir' variable.

[12:16] <svnbot6> r7438 | rafl++ | util/src_to_blib.pl:

[12:16] <svnbot6> r7438 | rafl++ |  * Make it non-fatal if a directory doesn't exist.

[12:16] <svnbot6> r7438 | rafl++ |  * Copy over perl5/*/blib{,6,js} to blib6/pugs/.

[12:16] <svnbot6> r7438 | rafl++ | Makefile.PL:

[12:16] <svnbot6> r7438 | rafl++ |  * Build and clean perl5/ correctly.

[12:16] <svnbot6> r7438 | rafl++ |  * Use ./Setup copy --copy-prefix instead of ./Setup install.

[12:16] <svnbot6> r7438 | rafl++ |  * Install built blib6/pugs into $(PEFIX)/share/pugs.

[12:17] <rafl> Finally!

[12:17] <scook0> looks like it's 'dev-haskell/cabal'

[12:18] <jp-autark> indeed. Thanks, I will emerge it at once :)

[12:18] <rafl> Sounds good.

[12:18] <rafl> Does the perl5 embedding work again with the cabalized pugs?

[12:18] <rafl> Doesn't seem so: *** Wasn't able to find 'Perl5_stub.o', aborting...

[12:21] <jp-autark> Thank you, it's now compiling pugs again.

[12:22] <scook0> autrijus: it seems that a lot of the complexity in HasParens/NoParens comes from trying to parse arbitrary numbers of invocants

[12:23] <scook0> which I dont' think makes sense anymore, since there's now only one level of 'invocant-ness', and it can only have one invocant

[12:58] <autrijus> scook0: yes, indeed

[12:59] <autrijus> so if you'd like to decomplex it by reducing the invocness, you have my blessing

[13:04] <autrijus> rafl: wierd.

[13:04] <autrijus> rafl: build_pugs line 123 should take care of that. trace a bit?

[13:07] <clkao> will js backend pass all test for this release?

[13:08] <autrijus> cf. smoke.pugscode.org

[13:08] <autrijus> still some miles to go

[13:09] <autrijus> bbiab &

[13:12] <autrijus> rafl: btw, you are using Cabal-1.0 right?

[13:12] <autrijus> I'll retest Cabal-1.1.3 when I get back

[13:14] <dotato20cm> viva perl6!

[13:15] <pdcawley> Does anyone know of anyone who might want to sponsor the Perl 6 Summaries? perl.com has had a resource squeeze and one of the things that didn't survive was the summary.

[13:16] <svnbot6> r7439 | scook0++ | More Parser.hs changes:

[13:16] <svnbot6> r7439 | scook0++ | * Make parseHasParenParamList much simpler

[13:16] <svnbot6> r7439 | scook0++ | (this might cause very subtle changes in arglist parsing)

[13:16] <svnbot6> r7439 | scook0++ | * More code now uses parseHasParenParamList

[13:17] <scook0> pdcawley: :(

[13:18] <pdcawley> Yeah. Up until they stopped, that and savings was my only income.

[13:18] <pdcawley> The fact that I've got about two years of uninvoiced back issues to get through is something of a buffer, but still, far from ideal.

[13:21] <joao> pdcawley, what sort of values are we talking about?

[13:21] <michael> hello camels

[13:24] <scook0> 'night all

[13:28] <pdcawley> They were paying me $250/summary

[13:30] <pdcawley> I can't very well apply to TPF for funding 'cos I'm on the grants committee that'd decide if I got it.

[13:40] <rafl> autrijus: Care of what?

[13:40] <rafl> autrijus: Cabal-1.0, yes.

[13:41] <rafl> autrijus: Oh, you mean the perl5 embed build error? That one was fixed by cleaning the source tree first.

[13:41] <svnbot6> r7440 | rafl++ |  r16858@ata:  rafl | 2005-10-08 15:06:18 +0200

[13:41] <svnbot6> r7440 | rafl++ |  Debian:

[13:41] <svnbot6> r7440 | rafl++ |   * New package 'libghc6-pugs-dev' for the haskell interface to pugs.

[13:41] <svnbot6> r7440 | rafl++ |   * Added debian/libghc6-pugs-dev.install accordingly.

[13:41] <svnbot6> r7440 | rafl++ |   * Added usr/share/pugs/* to pugs-modules.install

[13:41] <svnbot6> r7440 | rafl++ |   * New install-stamp rule in debian/rules to get rid of the double-dh_install.

[13:41] <svnbot6> r7441 | rafl++ |  r16859@ata:  rafl | 2005-10-08 15:39:54 +0200

[13:41] <svnbot6> r7441 | rafl++ |  Debian:

[13:41] <svnbot6> r7441 | rafl++ |   * New changelog entry for 6.2.10.

[13:41] <svnbot6> r7441 | rafl++ |   * Install stuff for libghc6-pugs-dev into /usr/share/haskell-packages/ghc6/lib.

[13:42] <svnbot6> r7441 | rafl++ |   * Install .installed-pkg-config in Debian rules.

[13:42] <svnbot6> r7441 | rafl++ |   * Added prerm and postinst script for libghc6-pugs-dev to register the ghc

[13:42] <svnbot6> r7441 | rafl++ |     package with ghc-pkg.

[13:43] <rafl> autrijus: pugs doesn't use that pugs library yet, does it?

[13:44] <rafl> autrijus: Seen my recent changes to the build-system? I install perl5 into /usr/share/pugs/{perl5,perl6,js} now. I'm not sure if pugs finds it there if it's installed. I guess not.

[13:45] <rafl> autrijus: Would be nice if you could take a look because I don't know much about what perl5/ does at runtime.

[13:47] <rafl> The debian/ dir is now kind of suitable for the release imho. Given that noone changes the build-system again. :-)

[13:51] <wolverian> rafl++ # awesome!

[14:19] *** ods15_ is now known as ods15

[14:49] <xinming_Beijing> isn't pugs still unable to be built?

[14:50] <xinming_Beijing> oops. I mean can't be built.

[14:57] <rafl> xinming_Beijing: Works fine for me ATM.

[14:59] <xinming_Beijing> But It doesn't compile here. hmm, I use Debian, And installed 6.2 version of ghc. And I compiled 6.4 myself... And use $GHC environment variable. But now, It seems it uses the old(6.2) version of ghc...

[15:00] <rafl> Well, sid and etch have ghc6.4.

[15:00] <iblech> rafl: Fixing src/Pugs.hs to find {jspugs.pl,runjs.pl,pugs-p5.pl} again currently

[15:00] <xinming_Beijing> ghc-6.2.2: unknown package name: mtl

[15:00] <rafl> iblech++; #Yay!

[15:00] <xinming_Beijing> That's the error message.

[15:00] <autrijus> xinming_Beijing: ghc 6.2 can't build pugs for quite a while now

[15:00] <eric256_> what syntax does pugs use for including perl5 modules? use Blah-perl5; ?

[15:01] <iblech> eric256_: use perl5:Blah

[15:01] <autrijus> xinming_Beijing: I wonder why... have you left old ghc in path?

[15:01] <xinming_Beijing> autrijus: yes, I know, So I compiled ghc 6.4 myself.

[15:01] <rafl> eric256_: use perl5:Foo::Bar

[15:01] <eric256_> ahh i thought it had switched at some point

[15:01] <xinming_Beijing> and export the $GHC environment variable

[15:01] <autrijus> eric256_: yes it had, back in toronto

[15:01] <autrijus> xinming_Beijing: oh hm, so maybe it's not picking it up

[15:02] <autrijus> rafl: /usr/share/pugs is your invention right?

[15:02] <xinming_Beijing> autrijus: yes, so, I wonder if the modification do delete the usage of $GHC.

[15:02] <autrijus> rafl: I made it so it installs into /usr/local/lib/perl6/site_perl/perl5 here

[15:02] <autrijus> rafl: i.e. same as sitelib but s/perl5/perl6/ and append "perl5"

[15:02] <autrijus> rafl: what's wrong with this arrangement?

[15:02] <rafl> autrijus: Well, FSH invented it.

[15:02] <eric256_> thanks

[15:03] <rafl> autrijus: Think of "use perl5::Perl6::MetaModel"

[15:03] <rafl> autrijus: That's not what you normally want.

[15:03] <rafl> autrijus: The perl5 stuff seems only to be used internally and isn't needed for people who want to code perl6.

[15:04] <rafl> autrijus: And it's arch-independent. Therefor it should be in /usr/share/pugs, IHMO.

[15:04] <autrijus> if so then we'd move the rest of /usr/local/lib/perl6 into /usr/share/pugs 

[15:04] <autrijus> the perl5 stuff is used internally, for sure

[15:05] <autrijus> I can see CORE/perl5/

[15:05] <autrijus> there are certain directories, like CORE and auto

[15:05] <autrijus> that in perl5 was also marked for internal use only.

[15:05] <autrijus> CORE is fine by me.

[15:05] <autrijus> but I'd still want it to be in sitelib

[15:05] <rafl> Why?

[15:06] <autrijus> hm, I'm not making sense.

[15:06] <rafl> /usr/{lib,share}/perl6 isn't specific to parrot. I think everything should remain where it is.

[15:06] <rafl> s/parrot/pugs/ of course. :-)

[15:07] <autrijus> ok. my rationale is as such

[15:07] <autrijus> in the next release I'd like the existing perl5 to be true CPAN modules

[15:07] <autrijus> so they can be used outside pugs

[15:08] <autrijus> so seeing in this view, maybe they should be installed into the perl5 -- not perl6 -- sitelib.

[15:08] <rafl> Fine. Then they don't need to be installed by pugs and we don't need to care where to install them.

[15:08] *** Lopo_ is now known as Lopo

[15:08] <autrijus> yes.

[15:08] <autrijus> so what we are doing now is interim

[15:08] <autrijus> I can see two places

[15:08] <autrijus> one is in perl5 sitelib under the pugs/ namespace

[15:09] <autrijus> site_lib/pugs/perl5/PIL-Run

[15:09] <rafl> Do you really want to install JavaScript into perl5 sitelib?

[15:09] <autrijus> another is somewhere in perl6 lib.

[15:09] <autrijus> why, yes, why not.

[15:09] <autrijus> they are js data used by a p5 module.

[15:09] <autrijus> CGI::Ajax.

[15:09] <rafl> Sounds reasonable.

[15:09] <autrijus> and we already claim pugs.pm namespace

[15:10] <rafl> I'd prefer /usr/share/perl5/Pugs/ then.

[15:10] <autrijus> lowercase.

[15:10] <rafl> Thought those names were reserved for pragmas.

[15:10] <autrijus> pugs.pm is a pragma that enables lexically-scoped perl6 code.

[15:11] <rafl> pugs.pm is, pugs::Perl6::MetaModel not.

[15:11] <autrijus> what if I put it into auto/pugs/?

[15:11] <autrijus> it's the customary data dir for cpan modules.

[15:11] <rafl> Good idea!

[15:11] <autrijus> okay. sitelib/auto/pugs/perl5/*

[15:11] <autrijus> it is.

[15:12] <autrijus> in p5 sitelib.

[15:12] <rafl> Yes.

[15:12] <autrijus> thanks for the brainstorming :)

[15:12] <autrijus> please modify your changes

[15:12] <rafl> You only need to change the pugslibdir in util/PugsConfig.pm for that.

[15:12] <autrijus> I'll fix the hs side to locate them.

[15:12] <autrijus> cool

[15:13] <xinming_Beijing> autrijus: hmm, by the way, Could you please tell me where to find the information about Makefile.PL

[15:13] <rafl> Could you please change the path? I'll be offline in some seconds.

[15:13] <autrijus> rafl: sure!

[15:13] <xinming_Beijing> How do I create my own please?

[15:13] <rafl> Thanks and good bye.

[15:13] <autrijus> rafl++

[15:13] <autrijus> xinming_Beijing: hm? for your own module?

[15:13] <rafl> xinming_Beijing: perldoc ExtUtils::MakeMaker

[15:13] <autrijus> perldoc perlmodlib

[15:14] <rafl> xinming_Beijing: perldoc Module::Build Module::Install, etc.

[15:14] <autrijus> xinming_Beijing: anyway, the GHC probe is on inc/Module/Install/Pugs.pm

[15:14] <autrijus> line 151

[15:14] <autrijus> can you trace and make sure it found the right ghc?

[15:14] <autrijus> I can test it when I'm back from sauna

[15:14] <autrijus> which is to say ~40min from now

[15:14] <xinming_Beijing> autrijus: Ok, I will try anyway

[15:15] <autrijus> xinming++

[15:18] <rafl> autrijus: Oh, please think about that the files are in different locations if installed with different INSTALLDIRS arguments.

[15:19] <rafl> It's in /usr/local/share/perl5/ for INSTALLDIRS=site and /usr/share/perl5 for INSTALLDIRS=vendor

[15:19] <rafl> autrijus: Maybe the haskell code should look at the whole perl5 @INC.

[15:24] <meppl> is it possible to lock variables for shared variables?

[15:38] <xinming_Beijing> the module can detect the right ghc, But the problem is, It seems that Makefile doesn't use that correctly, Just use the variable from .setup-config

[15:38] <xinming_Beijing> hmm, the config from .setup-config

[15:39] <geoffb> <rez>

[15:39] <geoffb> Autrijus, I noticed you pinged, but I haven't backlogged yet.  Should I test a dual-embed?

[15:44] * geoffb assumes no comment is good comment, and starts a fresh build

[15:44] <nothingmuch> morning

[15:45] <geoffb> morning, nm

[15:45] * geoffb is in and out, dealing with morning kiddo routine

[15:45] * nothingmuch is planning the intricate details of a trip to the stapler

[15:46] <nothingmuch> turns out this paper I stabled only several days ago is falling apart (!!!)D

[15:46] <nothingmuch> tr/b/p/

[15:59] <meppl> oh

[15:59] <meppl> never mind

[15:59] <eric256_> perlbot nopaste

[15:59] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[15:59] <nothingmuch> eric256_: use pbotutil

[15:59] <pasteling> "eric256" at 24.8.74.230 pasted "Optimized Build error on win32" (12 lines, 560B) at http://sial.org/pbot/13550

[16:00] <nothingmuch> it makes life easy

[16:00] <eric256_> thanks

[16:02] <eric256_> any ideas on the error?

[16:02] * nothingmuch doesn't know about windows stuff

[16:03] <nothingmuch> i see some sh code in there, which sounds odd for windows

[16:03] * eric256_ doesn't either ;)

[16:03] <nothingmuch> dir was unexpected at this time.

[16:03] <nothingmuch> that looks like 'for dir in ...'

[16:04] <nothingmuch> which probably doesn't make sense for nmake, or cmd.exe or whoever is running the subcommands

[16:04] <eric256_> yea

[16:04] <eric256_> hmmm maybe someone changed pl2bat?

[16:05] * nothingmuch doesn't know what that is

[16:08] <eric256_> this doesn't make any sense

[16:08] <eric256_> the only pl2bat.bat i could find was in my perl5 bin directory

[16:09] <eric256_> and neither it nor the script referencec (pugscc) have that line of code in them

[16:09] <xinming_Beijing> eric256_: hmm, IMHO, it's impossible to convert the real program into bat...

[16:10] <eric256_> it doesn't and i'm not trying to.  thats what nmake does while building pugs

[16:10] <nothingmuch> eric256_: svk log -x Makefile.PL

[16:10] <nothingmuch> maybe someone made a unix-centric change

[16:10] <eric256_> pl2bat.bat just wraps a perl script in the batch file

[16:11] <eric256_> hmmm looks like maybe they did...wife is dragging me out of the house...i'll check on it later

[16:21] *** nothingmuch is now known as elmex____

[16:22] *** elmex____ is now known as nothingmuch

[16:33] <autrijus> xinming_Beijing: a 'clean' should clean out both

[16:33] <autrijus> but I know -- did you first run Makefile.PL once without setting env GHC?

[16:33] <autrijus> if so the ./Setup will inherit the 6.2.2 config.

[16:40] <xinming_Beijing> autrijus: hmm, I've done make clean before do perl Makefile.PL

[16:40] <xinming_Beijing> But the problem still exists. So, this time, I am trying to get the "fresh" one... hope it works. the Internet connection here is poor, So, still downloading...

[16:43] <xinming_Beijing> hmm, and also

[16:43] <xinming_Beijing> export GHC=${HOME}/local/ghc/local/bin/ghc

[16:43] <xinming_Beijing> this line is in my .bashrc

[16:44] <autrijus> hmmm.

[16:50] <pasteling> "geoffb" at 69.110.115.185 pasted "Dual-embed/optimized failure with 7441" (260 lines, 29.1K) at http://sial.org/pbot/13553

[16:50] * geoffb bak for a while

[16:50] <xinming_Beijing> autrijus: hmm, In fact, here is a small trick I found. Everytime, we have to do `svn update && make && make install` for pugs.

[16:51] <xinming_Beijing> I just do a symbolic link to the pugs binary in /usr/bin/

[16:54] <xinming_Beijing> and we just do `svn update && make` for now... And don't need to copy the files into destination dir... :-) well, In fact, Just it's my habit... :-S

[16:57] <autrijus> geoffb: hm, I suspect scook broke the parser somehow.

[16:57] <svnbot6> r7442 | iblech++ | * Usual svn props.

[16:57] <svnbot6> r7442 | iblech++ | * Perl6::Pugs: Added link to GMane's archive of perl.perl6.compiler.

[16:57] <svnbot6> r7442 | iblech++ | * util/gen_prelude.pl: Remove the tmp-Prelude.pm when it is no longer required.

[16:57] <svnbot6> r7442 | iblech++ | * PIL2JS: jspugs.pl, runjs.pl, PIL2JS.pm: Support for running from "make

[16:57] <svnbot6> r7442 | iblech++ |   install"'s locations (previously, extra code was not necessary, as the

[16:57] <svnbot6> r7442 | iblech++ |   installed path structure was the same as the sourcedir path structure).

[16:57] <svnbot6> r7442 | iblech++ |   Note: -BJS still can't find jspugs.pl and runjs.

[16:58] <svnbot6> r7442 | iblech++ |   Note: PIL-Run still doesn't work with the new hierarchy.

[16:58] <geoffb> autrijus, bleah.  Have not finished backlogging.  Was that during today, or earlier this week, but I just didn't notice because of yesterday's failed builds?

[16:59] <autrijus> during today

[16:59] <autrijus> let me see

[17:02] <autrijus> I get the error.

[17:03] <svnbot6> r7443 | autrijus++ | * remove unportable chunks from perl5 buliding to make win32 happy.

[17:03] <autrijus> reverting.

[17:05] <geoffb> OK, building from 7443

[17:06] <autrijus> yeah, it was r7439.

[17:06] <autrijus> er no

[17:06] <autrijus> (this might cause very subtle changes in arglist parsing)

[17:06] <autrijus> scook: it did and I had to revert it

[17:07] <autrijus> nothing personal

[17:07] <autrijus> geoffb: you want 7444

[17:07] <geoffb> OK, halting and pulling

[17:08] <nothingmuch> wht a screwed up weekend

[17:08] <svnbot6> r7444 | autrijus++ | * revert r7439 as it breaks prelude parsing.  Sorry.

[17:11] <geoffb> nothingmuch, are you referring to the build pain?

[17:11] <nothingmuch> no, to my own life

[17:11] <nothingmuch> i got absolutely nowhere

[17:11] <nothingmuch> had concentration trouble all the way through

[17:11] <nothingmuch> the only productive time I had i wasted on rules.t

[17:12] <geoffb> ah

[17:12] <geoffb> bleah

[17:13] <nothingmuch> btw, autrijus what do you think of my email?

[17:14] <autrijus> nothingmuch: what email?

[17:14] <autrijus> type anno?

[17:14] <nothingmuch> no

[17:14] <nothingmuch> the one about rules.t to p6c

[17:17] <autrijus> can you elaborate the linearlized $1$2$3 more?

[17:17] <autrijus> example?

[17:18] <nothingmuch> well, $1 can be either $/[1] or $/[0][0]

[17:18] <nothingmuch> you can't know which is the right one to be checking without parsing the regex

[17:18] <autrijus> point.

[17:19] <autrijus> I think your reasoning is sound.

[17:20] <autrijus> maybe indeed converting t/rules/from_perl6_rules/ is more fruitful.

[17:21] <autrijus> but I still think it's valid to make perl6.t available

[17:21] <nothingmuch> what are those?

[17:21] <autrijus> especially the :todo ones

[17:21] <autrijus> those are from damian's tests for Perl6::Rules

[17:21] <nothingmuch> ah

[17:21] <nothingmuch> oh my, lots of side effect stuff

[17:21] <geoffb> Hot damn!  It built!

[17:21] <autrijus> geoffb: woot!

[17:22] <autrijus> we reached the gholy rail!

[17:22] <geoffb> Seeing rafl and autrijus have made install changes, I'll clean up and do a make install

[17:22] <geoffb> heh

[17:26] <svnbot6> r7445 | autrijus++ | * fix pugslibdir path.  now going to look for them correctly...

[17:27] <geoffb> Version: 6.2.9 (r7444)

[17:27] <geoffb> Hmmm, from install, I'd say we've got a wierdness now: some stuff in /usr/share/ and some stuff in /usr/local/share.

[17:28] <geoffb> IMHO a manual build should default to /usr/local/share, and debian can override with /usr/share

[17:28] <geoffb> But in either case, consistent

[17:30] <autrijus> what are in /usr/share?

[17:30] <autrijus> I thought I squashed those

[17:31] <autrijus> two rev ago

[17:31] <geoffb> /usr/share/pugs/... looks like the PIL2JS and PIL-Run and MM stuff

[17:31] <geoffb> ext/ went into /usr/local/share

[17:32] <autrijus> geoffb: that I fixed

[17:32] <autrijus> if you rerun Makefile.PL that should not happen

[17:32] <geoffb> I did, and do, every time.

[17:32] <geoffb> I can do again from scratch here . . . .

[17:32] <autrijus> nod...

[17:33] <autrijus> yeah, I think I fixed that in 7445.

[17:33] <geoffb> Ah, I had 7444.

[17:33] <geoffb> pulled 7445, rebuilding

[17:33] <geoffb> and away we go . . . 

[17:40] <gaal> meow

[17:44] <nothingmuch> autrijus: for Perl6::Rules I have a better idea:

[17:45] <nothingmuch> just rewrite Perl6::Rules with a PGE backend

[17:45] <nothingmuch> it'll make it both useful for perl 5

[17:45] <nothingmuch> and easily testable

[17:47] <nothingmuch> i think we could also simplify it with the constant overloading trick that e.g. NamedCapture uses

[17:47] * nothingmuch goes to ride bike and contemplate dinner

[18:34] *** _SamB_ is now known as SamB

[18:47] <geoffb> OK, so now all .hi files are in /usr/local/share/perl/5.8.7/Pugs-6.2.10/, all ext/ in /usr/local/share/perl6/, and the backends in /usr/local/share/perl/5.8.7/auto/pugs/

[18:48] <geoffb> autrijus, rafl: is that what you intended?

[18:48] <autrijus> geoffb: yes.

[18:48] <autrijus> excellent

[18:49] <geoffb> alright, great!

[18:49] <autrijus> I hope it's somewhat acceptable to you.

[18:50] <geoffb> I'm a little battle-weary this morning, so I'm not too worried about details.  My big happy is that it's all localized in /usr/local/share at least

[18:50] <autrijus> :D

[18:50] <autrijus> which sys is this?

[18:50] <geoffb> Debian etch w/ sid bits

[18:50] <geoffb> Built standard way, instead of using debian/rules, of course

[18:51] <autrijus> hm

[18:51] <autrijus> the .hi bits is redundant.

[18:51] <geoffb> ?

[18:51] <autrijus> they will be installed into ghc libs anyway

[18:51] <autrijus> can you rm them from /usr/local/share/perl/5.8.7/Pugs-6.2.10/

[18:51] <autrijus> and put a test.hs:

[18:51] <autrijus> import Pugs

[18:51] <autrijus> main = pugsMain

[18:51] <autrijus> and then compile it:

[18:51] <autrijus> ghc --make  test.hs

[18:51] <autrijus> ./a.out

[18:51] <autrijus> and see if it works?

[18:52] <geoffb> OK, .hi's deleted

[18:52] <geoffb> Going somewhere outside of pugs tree to create test

[18:53] <geoffb> oh, duh, need to register to do this

[18:54] <geoffb> BAH

[18:54] <geoffb> you can't make register after deleting those files:

[18:54] <geoffb> ./Setup register

[18:54] <geoffb> Registering Pugs-6.2.10...

[18:54] <geoffb> Reading package info from ".installed-pkg-config" done.

[18:54] <geoffb> ghc-pkg: /usr/local/lib/Pugs-6.2.10 doesn't exist or isn't a directory

[18:54] <geoffb> make: *** [register] Error 1

[18:54] <geoffb> make install'ing again

[18:55] <geoffb> D'oh!

[18:55] <geoffb> 'make register' has the wrong place.  It's expecting /usr/local/lib, into which nothing has been installed

[18:55] <geoffb> you're up, autrijus 

[18:55] <geoffb> :-)

[18:55] <autrijus> hmmmm.

[18:55] <autrijus> I blame ghc-pkg

[18:56] <autrijus> just to humour me, mkdir /usr/local/lib

[18:56] <autrijus> make install and make register, see if that works.

[18:56] <geoffb> There already was a /usr/local/lib (standard in debian FHS)

[18:57] <autrijus> grep copy Makefile

[18:57] <autrijus> see what your copy-prefix is

[18:57] <autrijus> append that to ./Setup register

[18:58] <geoffb> sorry, multitasking with child-wrangling

[18:58] <autrijus> that's entirely fine

[18:58] <autrijus> mm rafl made my life very intersting.

[18:58] <autrijus> but for good cause, no doubt about that

[18:59] <geoffb> nodnod

[18:59] <geoffb> Interesting.  copy-prefix=$(DESTDIR)

[18:59] <geoffb> DESTDIR seems to be nothing

[19:01] <autrijus> wow indeed.

[19:01] <svnbot6> r7446 | iblech++ | * Usual svn props.

[19:01] <svnbot6> r7446 | iblech++ | * PIL2JS: pil2js.pl: Be able to be run from $pugslibdir.

[19:01] <svnbot6> r7447 | iblech++ | * util/PugsConfig.pm: Very minor comment fix.

[19:01] <svnbot6> r7447 | iblech++ | * src/Pugs/Run.hs: Include $pugslibdir/perl6 in the default @*INC.

[19:01] <svnbot6> r7447 | iblech++ | * src/Pugs.hs: Find jspugs.pl, runjs.pl, and pugs-p5.pl even if $sourcedir

[19:01] <svnbot6> r7447 | iblech++ |   had been deleted and thus $pugslibdir has to be used.

[19:01] <autrijus> what is rafl smoking?

[19:01] <svnbot6> r7447 | iblech++ |   The patch is a bit hacky (for example, pugs-p5.pl is searched for in --

[19:01] <svnbot6> r7447 | iblech++ |   amongst other dirs -- PIL2JS), but seems reasonable given that the directory

[19:01] <svnbot6> r7447 | iblech++ |   structure of $sourcedir doesn't match the one of $pugslibdir.

[19:01] <svnbot6> r7447 | iblech++ |   Note: PIL-Run still can't be run from $pugslibdir.

[19:01] <svnbot6> r7447 | iblech++ |   Note: pugs::hack is not yet updated WRT the recent dir moves.

[19:01] <autrijus> oooh iblech++

[19:01] <autrijus> geoffb: try this

[19:01] <autrijus> ./Setup install

[19:01] <autrijus> ./Setup register

[19:01] <autrijus> both as root

[19:02] <geoffb> I'm using sudo, but same diff

[19:02] <autrijus> k

[19:02] <geoffb> Now that worked

[19:02] <geoffb> trying to make test file again

[19:02] <geoffb> Woah:

[19:02] <geoffb> Chasing modules from: test2.hs

[19:02] <geoffb> Compiling Main             ( test2.hs, test2.o )

[19:02] <geoffb> Linking ...

[19:02] <geoffb> /usr/bin/ld: cannot find -lparrot

[19:02] <geoffb> collect2: ld returned 1 exit status

[19:03] <geoffb> I guess it's the dual-embed

[19:03] <geoffb> um, right, which -L to use

[19:04] <autrijus> -L/path/to/parrot/blib/lib

[19:04] <autrijus> or ldconfig it

[19:04] <autrijus> your choice

[19:05] <geoffb> used first option

[19:05] <geoffb> Got a little further:

[19:05] <geoffb> Chasing modules from: test2.hs

[19:05] <geoffb> Skipping  Main             ( test2.hs, test2.o )

[19:05] <geoffb> Linking ...

[19:05] <geoffb> /home/geoff/svk/parrot-trunk/blib/lib//libparrot.a(global_setup.o): In function `create_config_hash':

[19:05] <geoffb> src/global_setup.c:34: undefined reference to `parrot_get_config_string'

[19:05] <geoffb> collect2: ld returned 1 exit status

[19:05] <autrijus> right

[19:05] <geoffb> brb

[19:06] <autrijus> add /path/to/parrot/src/parrot_config.o

[19:06] <autrijus> to the ghc line

[19:06] <autrijus> rafl: I'm reverting your "copy" fix.

[19:06] <autrijus> rafl: we need to let GHC manage and take over.

[19:06] <autrijus> and --copy-prefix=(nothing) does not help

[19:07] <autrijus> rafl: if there is no prefix, we can't have --copy-prefix

[19:08] <autrijus> as it will use '.' as the prefix

[19:08] <autrijus> sad but true

[19:09] <geoffb> OK, ghc --make -L/parrot/blib/lib test2.hs /parrot/src/parrot_config.o linked

[19:09] <autrijus> is there a portable way in make to test that?

[19:09] <geoffb> And it runs pugs!

[19:09] <geoffb> whee

[19:09] <autrijus> $copy = $DESTDIR ?? "--copy-prefix=$DESTDIR" !! ""

[19:09] <autrijus> something like that

[19:09] <autrijus> geoffb: whee.

[19:09] <autrijus> geoffb: good, then all the heart wrenching in the past three days is worth it :D

[19:09] <geoffb> :-)

[19:09] <geoffb> nodnod

[19:12] <xinming_Beijing> autrijus: hmm, what does ghc-pkg command do for pugs please?

[19:12] <coral> parrot can run pugs?

[19:12] <autrijus> coral: or vice versa, but yes

[19:12] <coral> neat 

[19:12] <autrijus> xinming_Beijing: it registers pugs into the GHC package db

[19:13] <xinming_Beijing> I think, the modules you told me to check is right. But for Makefile, It still use the ghc-pkg command in system instead of the version I compiled

[19:16] <autrijus> xinming_Beijing: aha.

[19:16] <autrijus> xinming_Beijing: see nc/Module/Install/Pugs.pm

[19:16] <autrijus> xinming_Beijing: see inc/Module/Install/Pugs.pm

[19:16] <autrijus> line 183

[19:16] <autrijus> it detects $ENV{GHC_PKG}

[19:17] <xinming_Beijing> But... I try to make a synbolink to the ghc-pkg-`version` But still fails.

[19:18] <autrijus> xinming_Beijing: can you trace line 188?

[19:18] <svnbot6> r7448 | iblech++ | pugs::hack, perl5/PIL2JS/README: Updates WRT the recent dir moves.

[19:18] <autrijus>         $ghc_pkg =~ s/\bghc(?=[^\\\/]*$)/ghc-pkg/  # ghc-6.5 => ghc-pkg-6.5

[19:18] <autrijus>             or $ghc_pkg = 'ghc-pkg'; # fallback if !/^ghc/

[19:18] <autrijus> I _think_ it is doing something bad for you

[19:18] <autrijus> put a "die $ghc_pkg" after that line.

[19:22] <autrijus> rafl: I'm also thinking that, if Cabal's

[19:22] <autrijus> ./Setup install

[19:22] <xinming_Beijing> autrijus: It will die, Is it right?

[19:22] <autrijus> does register implicitly

[19:22] <autrijus> xinming_Beijing: er, yes, but die with that?

[19:22] <autrijus> rafl: then our install shall do the same.

[19:22] <autrijus> I'll make that so.

[19:22] <xinming_Beijing> autrijus: the ghc I compiled.

[19:22] <autrijus> xinming_Beijing: so it is the right one?

[19:24] <xinming_Beijing> autrijus: hmm, But the .setup-config still filled with wrong ghc and ghc-pkg

[19:24] <autrijus> xinming_Beijing: I got it. sec

[19:24] <autrijus> yeah

[19:24] <autrijus> fixing

[19:26] <cognominal> what means "restarted _SOME_DATE" in STATUS?

[19:27] <cognominal> MM stands for multimethods?

[19:31] <autrijus> cognominal: aye

[19:32] <autrijus> xinming_Beijing: fixed. committing

[19:32] <xinming_Beijing> autrijus: where the problem is please?

[19:33] <Khisanth> really? I kept thinking it was for MetaModel :/

[19:34] <autrijus> er

[19:34] <autrijus> it is metamodel in STATUS context. ;)

[19:34] <autrijus> sorry.

[19:36] <autrijus> xinming_Beijing: the problem is that ./Setup --configure

[19:36] <autrijus> needs to be told of where ghc etc is

[19:36] <cognominal> I am frilled to see autrijus tackling types

[19:37] <autrijus> I'm very much looking forward to it, but MM and containers have precedence.

[19:37] <autrijus> one thing at a time :)

[19:37] <cognominal> :)

[19:37] <autrijus> and we need to do something about rules some day.

[19:38] <geoffb> Man, I wish I had the tuits to work on rules.  I would learn *so* much.

[19:38] <geoffb> Alas, ETOOFEWTUITS

[19:39] <autrijus> xinming_Beijing: retry

[19:39] <geoffb> cognominal, when I say "restarted SOME_DATE" in STATUS, I meant that something had been stalled or blocked, and work started back up at that time

[19:39] <autrijus> r7449

[19:39] <cognominal> geoffb: thx for the explanation

[19:40] <geoffb> sure

[19:40] <autrijus> iblechbot: got tuits to get -BPerl5 running under the new arrangement as well?

[19:41] <autrijus> geoffb: what's your next column about?

[19:41] <svnbot6> r7449 | autrijus++ | * xinming++ for pointing out that for nonstand GHC locations,

[19:41] <svnbot6> r7449 | autrijus++ |   our ./Setup configure did not catch any them up.  This should 

[19:41] <svnbot6> r7449 | autrijus++ |   fix it for real.

[19:41] <autrijus> wow, that was extra bad spelling.

[19:41] <xinming_Beijing> autrijus: might works... :-)

[19:42] <autrijus> xinming_Beijing: woot

[19:42] <xinming_Beijing> +++++++++++++++++++++++++

[19:42] <xinming_Beijing> :-)

[19:43] <geoffb> autrijus, I'm thinking of "After -Ofun: Thoughts on optimization"

[19:44] <geoffb> A column about code optimization.

[19:44] <autrijus> interesting

[19:44] <autrijus> what are the metrics?

[19:44] <geoffb> After that, I need some more subject ideas, since I haven't been reading tech news for a week now to conserve tuits, so nothing is triggering.

[19:45] <geoffb> Hold on a couple minutes, I'll toss an URL at you with my notes

[19:45] <autrijus> k

[19:45] <autrijus> mm the law of conservation of tuits

[19:45] <geoffb> :-)

[19:45] <autrijus> greetings luqui

[19:46] <luqui> gurreetings!

[19:46] <autrijus> how's $work -- I mean $school?

[19:46] <luqui> Okay.  Requiring much loss of sleep.

[19:46] <luqui> But I caught up today, getting 14 hours.

[19:47] <luqui> Today, I'm going to port L::AG to parrot.

[19:48] <autrijus> does it work in reasonable space for p5 already?

[19:48] <luqui> no

[19:48] <autrijus> mm.

[19:48] <luqui> I couldn't decide which to do first

[19:48] <autrijus> neither al or pm has been porting L::AG to parrot?

[19:48] <luqui> neither understand the algorithm.  al wrote a little grammar for it

[19:49] <luqui> to which I replied "it's probably best not to have a grammar at all"

[19:49] <autrijus> oh?

[19:49] <autrijus> combinators?

[19:49] <autrijus> AG combinators would be interesting idea

[19:50] <luqui> uh, yes, "combinators"

[19:50] <luqui> (not really)

[19:50] <luqui> (just a proceduralish interface: add_rule, add_type and whatnot)

[19:51] <autrijus> ah, stateful combinators

[19:51] <autrijus> aka knobs

[19:51] <autrijus> cool

[19:51] <geoffb> .oO( The Asymmetric in ADSL is an understatement . . . )

[19:51] <autrijus> you know you're too much a programming language geek when you see ADSL and parses "Attributive Domain Specific Language"

[19:52] <luqui> haha

[19:52] <geoffb> *smirk*

[19:52] <autrijus> which, in a way, is what AGs are

[19:52] <autrijus> luqui: actually your work complements hers.

[19:53] <autrijus> luqui: given a grammar, a reasonable visitor can turn an external AG document into procedural calls

[19:54] <luqui> sure

[19:54] <autrijus> luqui: anyway, I'd love to hear about your experience of parrot porting. my bias is that exploratory programming in PIR is pain, so I'd probably code up the algo first in something else

[19:55] <luqui> you mean like Perl5?

[19:55] <autrijus> luqui: but that is just bias and not founded, so if your experience turns out otherwise

[19:55] <luqui> :-)

[19:55] <autrijus> then I'd be glad to hear about it

[19:55] <xinming_Beijing> autrijus: works for now...

[19:55] <autrijus> yeah, I mean like p5.

[19:55] <autrijus> xinming_Beijing: nice

[19:55] * luqui thinks PIR is probably a pain too, and cringes when al says something like "we could implement a subset of Perl for AGs"

[19:56] <luqui> (when brainstorming what to put inside the syntax, which caused me to propose the syntaxless formation)

[19:57] <svnbot6> r7450 | iblech++ | PIL-Run: Ability to be called from $pugslibdir instead of $sourcedir.

[19:57] <svnbot6> r7450 | iblech++ | * Was easier than adapting PIL2JS (no precompiled Prelude,Test, no special

[19:57] <svnbot6> r7450 | iblech++ |   JS Metamodel handling)

[19:57] <svnbot6> r7450 | iblech++ | * This means -[BC]{Perl5,JS} work with an installed Pugs again :)

[19:57] <cognominal> hum, EHC seems to be based on AG

[19:57] <autrijus> luqui: well, that's her plan all along

[19:57] <autrijus> a subset of perl, that is

[19:58] <luqui> I guess so

[19:58] <autrijus> it'd be interesting to see how it unfolds

[19:58] <cognominal> http://www.cs.uu.nl/wiki/Center/AttributeGrammarSystem

[19:58] <autrijus> cognominal: yes, I've been playing with UUAG

[19:58] <autrijus> and I think it's promising to use as eg the typechecker for pugs

[19:58] <autrijus> as well as other semantic analysis.

[19:59] <autrijus> ...and nothingmuch, upon hearing that, went ahead and did exactly that.

[19:59] <autrijus> for blondie

[19:59] <cognominal> how can you learn all that ... and program? beats me.

[19:59] <integral> no one's done any work on porting ghc/jhc/ehc/hugs/nhc to parrot yet?

[19:59] <autrijus> integral: no, parrot codegen was not feasible really

[20:00] <integral> :-(

[20:00] <autrijus> 0.3.0 is already much better, and hopefully 0.3.1 will come with variable-sized registers and sane lexical pads

[20:00] <autrijus> without the former you can't use CCs reliably

[20:00] <integral> I didn't realise the situation was quite that bad

[20:00] <autrijus> without the latter you can't gen closures efficiently.

[20:00] <autrijus> it's only bad for functional languages ;)

[20:00] <autrijus> it already go a quite reasonable procedural/primitive OO set of features.

[20:01] <autrijus> cognominal: by not doing much else, of course

[20:01] <integral> hmm?  do you mean something where you don't have thousands of very small closures generated all the time?

[20:01] <autrijus> integral: aye

[20:01] <geoffb> Outlinish notes for next week's blog, thoughts/additions VERY welcome: http://www.broadwell.org/graphics/pigge/docs/opt-notes.html

[20:02] <integral> jhc doesn't avoid that?  I thought whole program analysis could sequence lots of stuff and figure out when they'd be forced so you wouldn't really need to generate the closures

[20:02] <autrijus> integral: oh, jhc can use parrot as C

[20:02] <autrijus> I don't think it will be efficient.

[20:02] <autrijus> I'd like a better Grin->Parrot

[20:02] <autrijus> having a CPS engine and not using CCs is... weird :)

[20:03] <integral> hehe

[20:03] <autrijus> also not if you want to respect the calling conv

[20:03] <autrijus> for interop

[20:04] <integral> personally I think the whole interop thing is better just ignored, and each language use FFI-style declarations to call across language barriers

[20:04] <geoffb> autrijus, see link from 2-3 min ago.

[20:05] <autrijus> geoffb: already looking

[20:05] <geoffb> (y)

[20:05] <autrijus> integral: FFI has C as lowest common denom

[20:05] <autrijus> integral: CLR proved they can do richer types and better object semantics.

[20:06] <autrijus> also neat things like named parameters and optionals

[20:06] <cognominal> UUAG is under the Artistic license, good karma :)

[20:06] <autrijus> cognominal: yes :D

[20:06] <integral> autrijus: I wasn't thinking quite down to C, but something like the current parrot conventions,  but in the HLL you'd just explictly declare which entry points to generate as language unspecific

[20:06] <integral> ie it could be bolted on once parrot actually worked

[20:06] <autrijus> geoffb: wow, it's huge. you sure it will fit in 1 column?

[20:06] <autrijus> integral: I tend to agree with you.

[20:07] <autrijus> integral: but in dynam lang

[20:07] <autrijus> it's very common to conjure up random functions

[20:07] <autrijus> and/or oebjects

[20:07] <autrijus> and it'd be best to have the glue generated for them

[20:07] <autrijus> not explicitly declared

[20:07] <integral> hmm, so you'd need some kind of dynamic exporting system too, you couldn't have all those thunk glue pre-generated

[20:07] <autrijus> right, exactly

[20:07] <autrijus> I did that with Inline::MzScheme

[20:08] <geoffb> autrijus, that's part of my problem.  I got started, and then just kept going.  At this point, I'm considering one of two options:

[20:08] <autrijus> it is doable just tedious.

[20:08] <geoffb> 1) Break into multiple columns

[20:08] <geoffb> 2) Do one column, which is a general overview, with a link to more detail.

[20:09] * geoffb not sure about which, but definitely would like to fill in the outline some more in either case.  It's got some big gaps because I skipped around as things came to mind

[20:10] <autrijus> geoffb: I think multi work

[20:11] <autrijus> each section is compartmentized

[20:11] <autrijus> so you can cover a few eac

[20:11] <autrijus> h

[20:12] <geoffb> If I do it as multi, I *definitely* need to fill in more, so that no one column feels week

[20:12] <autrijus> yeah. I tihnk fill in some more and split in 2 

[20:12] <geoffb> BTW, what do you think of the content so far?

[20:12] <svnbot6> r7451 | autrijus++ | * rule_used_in_Str fails back to using PGE; if it's not there

[20:12] <svnbot6> r7451 | autrijus++ |   we need to skip it.

[20:13] <autrijus> geoffb: I think it want one or more running case studiess.

[20:13] <geoffb> hmmm

[20:13] <autrijus> not in much detail

[20:13] <autrijus> just a theme you can use to illustrate points

[20:13] <geoffb> That's starting to move from blog to article, but you've got a point

[20:13] <geoffb> nodnod

[20:13] <autrijus> otherwise it'd feel like nothingmuch's "sex in the 70s" talk.

[20:13] <autrijus> the first half of it anyway

[20:13] <geoffb> ?!?

[20:14] <autrijus> (he had a talk about complexity management in yapcna; the first half is lots of general abstract points, but the case study did not appear in full until later)

[20:14] <geoffb> ah

[20:14] <geoffb> hmmm, good point

[20:15] <autrijus> but this is blog, so you don't need to explain in any detail

[20:15] <autrijus> just random finger pointing will do.

[20:15] <autrijus> as we know, that's what blog is best about.

[20:15] <autrijus> ;)

[20:16] * geoffb is better at "short article" style blogging than "link slut" style blogging

[20:17] <autrijus> nod

[20:18] <autrijus> in -Ofun, for each abstraction you added one or more case example

[20:18] <autrijus> it reads very well.

[20:18] <geoffb> nodnod, and thx

[20:21] <autrijus> excellent, my .tw server of autrijus.org died.

[20:22] <geoffb> Man, you have the worst computer luck . . .

[20:23] <autrijus> don't mention it ;)

[20:23] * autrijus triggers evacuation settings

[20:23] <geoffb> ?

[20:25] <autrijus> mail forwarding and web forwarding etc

[20:25] <geoffb> ah

[20:26] <autrijus> btw, does irc.pugscode.org workforyou?

[20:26] <geoffb> could not be found

[20:27] <autrijus> mm 

[20:38] <autrijus> dns takes time to propagate I guess.

[20:38] <integral> depends on the TTL on the records...

[20:45] * autrijus goes back to pugs

[20:45] <autrijus> sigh.

[20:46] <obra> heya autrijus 

[20:46] <autrijus> yo obra.

[20:46] <obra> How's it going?

[20:46] <autrijus> autrijus.org just died.

[20:46] <obra> urgh

[20:46] <obra> backups?

[20:46] <autrijus> sure

[20:46] <autrijus> but in .tw

[20:46] * obra wonders if after pugs you want to do a distributed server project

[20:48] <obra> seriously bummed to hear that, though.

[20:48] <obra> anything you need?

[20:49] <obra> autrijus: What did you use to make your Takahashi Method slides?

[20:49] <autrijus> obra: OOo Impress

[20:49] <autrijus> and whilst downloading it, MS Powerpoint.

[20:49] <obra> nod

[20:49] <autrijus> but the outline is done in vim first

[20:50] <autrijus> as usual.

[20:50] <obra> *nod*

[20:50] * obra ponders vim with ^l inserted and a huge font

[20:51] <autrijus> may not be a bad idea.

[20:58] * luqui decides to rewrite L::AG in Perl first before doing it in PIR

[20:58] <luqui> maybe I can convince pm or al to do it in the mean time :-)

[20:59] * autrijus resists an attempt of joking about mean time and average time.

[20:59] <autrijus> gaal: I forcibly fixed the Prelude trans to cure trans.t

[20:59] <autrijus> hm, somehor Arcfour insists going back to failing. I thought I fixed the subclassing bug already...

[21:00] <wolverian> hm, does gobby use the same protocol as moonedit/subetha?

[21:00] <wolverian> (rather OT..)

[21:01] <autrijus> subetha sends frozen cookies around

[21:01] <autrijus> so I doubt so

[21:03] <obra> wolverian: no. it does not

[21:03] <obra> none of the tools share a protocol

[21:06] <wolverian> hm

[21:07] <wolverian> that is not very logical. :)

[21:09] <obra> why? the're different products from different vendors with no speced protocol?

[21:09] <obra> s/?$/./

[21:15] <wolverian> it is not very logical from the consumer's point of view

[21:15] <wolverian> going to sleep, now, bye :)

[21:15] <obra> Welcome to software. 'night

[21:41] <luqui> ?eval 3 but { $_ += 1 }

[21:41] <evalbot_7451> Error: Can't modify constant item: VInt 3 

[21:41] <luqui> ?eval my $x = 3; $x but { $_ += 1 }

[21:41] <evalbot_7451> Error: Can't modify constant item: VRef <Scalar> 

[21:42] <luqui> ?eval my $x = 3; $x but { $_.say }

[21:42] <evalbot_7451> 3 \3 

[21:49] <svnbot6> r7452 | autrijus++ | * Use brute force to solve the .trans problem.

[21:56] <rmoriz> hi

[22:13] <rafl> autrijus: Please set a default DESTDIR of none is set.

[22:13] <rafl> autrijus: And don't do register when installing. At least not with a way to disable it. Otherwise there are major problems when packaging it for Debian and other systems.

[22:14] <autrijus> rafl: what should the default be?

[22:15] <autrijus> rafl: do you always trigger vendor install?

[22:15] <clkao> strange. i have conflicts when updating pugs

[22:15] <autrijus> mmmm?

[22:16] <rafl> autrijus: /usr/local/. Or run install instead of copy if DESTDIR isn't set.

[22:16] <clkao> Pugs.hs somehow got changed?

[22:16] <clkao> or is it svk bug?

[22:16] <autrijus> I have no idea

[22:16] <autrijus> I don't think install changes Pugs.hs

[22:16] <rafl> autrijus: Yes. /usr/local/ is reserved for site local stuff in Debian. Everything goes into /usr/ therefor.

[22:16] <clkao> are you on latest svk?

[22:16] <autrijus> clkao: ye

[22:16] <autrijus> trunk

[22:16] <clkao> ya, runing perl makefile.pl changes pugs.hs

[22:17] <autrijus> rafl: okay, let me recap: have a "register" target

[22:17] <autrijus> clkao: uh how?

[22:17] <autrijus> rafl: and for "install", detect for DESTDIR

[22:17] <autrijus> if it's there, revert to "copy".

[22:18] <rafl> autrijus: Yes. It would also be good to remove pugslibdir from util/PugsConfig.pm and install blib6/pugs into \$(DESTDIR)$config->{sitelib} or \$(DESTDIR)$config->{privlib} according to type of install (site/vendor)

[22:19] <autrijus> aw my head.

[22:19] <rafl> Err, why? :-)

[22:19] <autrijus> just as when iblech changed things meticulously to make pugslibdir work...

[22:20] <rafl> Hrm, right.

[22:21] <rafl> Then let's set pugslibdir to sitelib or privlib?

[22:21] <rafl> Which would be hard because we don't know that in PugsConfig.pm.

[22:23] <rafl> How about using the whole perl5 @INC? I think that's more robust and it still works if we put the perl5/ stuff on CPAN for the next release.

[22:25] <autrijus> you mean search for auto/pugs/ in all INC?

[22:26] <autrijus> can we spare ourselves for this release? I really want to get it released :)

[22:26] <autrijus> I can fix the register thing.

[22:28] <rafl> Well, I would have large problems in getting 6.2.10 into Debian if it hardcodes /usr/local/ somewhere.

[22:29] <rafl> Differenciating between sitelib and privlib would be enough for this.

[22:33] <autrijus> wait, where do we yet hardcode usrlocal?

[22:35] <rafl> $Config{sitelib} which is /usr/local/perl5 for Debians perl.

[22:35] <rafl> util/PugsConfig.pm:37

[22:36] <rafl> Or /usr/local/share/perl5. I don't remember exactly.

[22:37] * autrijus pouts

[22:37] <autrijus> I think we still want a pugslibdir; maybe we can list both directories

[22:37] <autrijus> so it gets searched

[22:38] <autrijus> however, searching all of @INC for auto/pugs/ is clearly more portable.

[22:38] <autrijus> but pugs doesn't know perl5's @INC.

[22:38] <autrijus> so maybe you give me a set of possible pugsconfig keys

[22:38] <autrijus> and I search those appended with auto/pugs/.

[22:39] <autrijus> and then you can go ahead and fix the Makefile targets.

[22:39] <dduncan> I posted another smoke, of 7451

[22:40] <dduncan> it looks like someone else did too, but we got rather different results

[22:41] <rafl> autrijus: $Config{sitelib} and $Config{privlib} should be enough.

[22:41] <autrijus> rafl: okay. do you have a second to do the Makefile.PL / PugsConfig side change?

[22:41] <autrijus> I'll fix the hs side.

[22:43] <rafl> Unfortunately not. Tomorrow morning at the earliest.

[22:43] <dduncan> there were 2 repository snapshot / darwin, Normal runcore, r7451 ... 90 min and 10250 succ, 60 fail ... vs 31 min, 9874 succ, 436 fail

[22:43] <rafl> OK, so sorry inconveniences and good night.

[22:44] <autrijus> rafl: no compromises is a good thing. :)

[22:44] <dduncan> mine is the 90 min

[22:44] <autrijus> thanks for your infinite patience.

[22:47] <integral> dduncan: is that 90 min on ~1GHz?

[22:48] <dduncan> I have a dual 1Ghz G4 ... didn't pay attention to how much the smoke used

[22:48] <dduncan> I could run it again and check though

[22:48] <integral> oh, no, I was just wondering if it'd take the same time on my box, sounds like yes, or longer

[22:49] <dduncan> the timing isn't so much the issue though, I'm more interested in the different number of test successes and fails

[22:49] * autrijus decides to leave the pugsdir thing to rafl...

[22:49] <autrijus> ...as I don't really have a Debian system here.

[22:50] <dduncan> during make, both CPUs are being utilized, with Pugs on one and Perl on the other, each using most of theirs

[22:50] <integral> gosh :-)

[22:50] <dduncan> or ghc as the case may be

[22:51] <dduncan> but the 90 min isn't for the make process

[22:51] <dduncan> there is also plenty of RAM ... all the physical isn't in use yet

[22:52] <dduncan> ghc eats a lot of both

[22:52] <integral> it's a pity swap interacts poorly with swapping

[22:52] <integral> err, gc

[22:56] <dduncan> okay, make is done, now to observe make smoke on the latest svn

[22:56] <rafl> autrijus: feather is a debian testing system.

[22:58] <autrijus> rafl: I'll still wait for you

[22:58] <autrijus> (also, please try to stay away from gmakeisms. :))

[22:58] <dduncan> okay, I'm seeing that the smoke proper mainly involves pugs, which is using 100% of 1 of the CPUs; since it is single-threaded, it can't be split up ... but the managing script in perl is on the other cpu at next to zero usage since its mostly waiting

[22:59] <dduncan> integral, what are the cpu and ram specs of your box?

[22:59] <dduncan> mine is 768M

[22:59] <integral> I've a 1GHz iBook 1.25GB

[22:59] <dduncan> I would say yours should be around the same speed as mine then

[22:59] <integral> it still has 1-2GB of swap file, *grr*

[22:59] <dduncan> how much RAM?

[22:59] <integral> 1.25GB

[23:00] <dduncan> oh yes

[23:00] <dduncan> yours should be roughly the same speed as mine ... if its CPU intensive, maybe a smidgen slower

[23:00] <dduncan> biab

[23:01] * integral tweaks his config.yml to actually upload.  I'll leave one running while I hopefully sleep

[23:01] <autrijus> cool

[23:01] <dduncan> actually, I'm quitting activity monitor and top, since they take their slice too, though it may not make a difference due to pugs being bound to 1 cpu ... it would make a difference for you, though

[23:02] <integral> top's darn expensive, more so with crappy Terminal

[23:02] <dduncan> but since mine has it on a separate cpu, it may not matter unless pugs can use both

[23:02] <dduncan> I don't ever expect pugs to be multithreaded, unless its easy, though I expect parrot to be

[23:03] <integral> it might be easy with ghc 6.5's stuff, I wonder how much you can parallelise compilation of subroutines for example

[23:03] <integral> (all the internal variables are already STM TVars)

[23:04] <dduncan> autrijus, it occurs to me that if the smoking script can be set to run multiple pugs processes at once, such as doing different tests in parallel, it would better utilize multi-CPU boxes like mine, speeding up the smoke a lot, each process on a separate cpu

[23:04] <integral> dduncan: hmm, I thought you could with smoke_concurrent in config.yml?

[23:04] <dduncan> I didn't tweak any config file

[23:04] <dduncan> I just ran the default smoke

[23:05] <integral> looks like you just set it to the number of CPUs

[23:05] <autrijus> dduncan: what integral said.

[23:05] <dduncan> okay, I fixed that

[23:08] <dduncan> but while make smoke acknowledged that concurrent = 2, top shows only 1 pugs process active, though there are 2 perl processes active

[23:10] <dduncan> do I have to do something else?

[23:11] <dduncan> I just noticed that I don't set Test.pm to pre-compile ... that may contribute to my slower speed also

[23:12] <dduncan> I'll address that next time, after seeing what effect just the SMP has

[23:13] <autrijus> k.

[23:20] <clkao> Failed 1/450 test scripts, 99.78% okay. 7/8294 subtests failed, 99.92% okay.

[23:20] <clkao> t/builtins/arrays_and_hashes/pair is the only one

[23:20] <obra> are preflights needed?

[23:22] <dduncan> back in an hour or so

[23:26] <autrijus> clkao: I'm fixing that.

[23:26] <clkao> cool

[23:27] <clkao> do you happen to know why spidermonkey is failing on freebsd?

[23:27] <clkao> it doesn't pass its tests

[23:27] <autrijus> no idea, I build it by hand

[23:27] <clkao> hmmm

[23:27] <clkao> force install?

[23:27] <clkao> or your tests pass?

[23:27] <autrijus> force

[23:29] <clkao> -DWITHOUT_TEST

[23:38] <integral> hmm, here's an interesting error in the smoke output: PackFile_unpack: Bytecode not valid for this interpreter: version mismatch

[23:38] <integral> Parrot VM: Can't unpack packfile /Volumes/Unix/parrot/src/parrot/runtime/parrot/library/Data/Escape.pbc.

[23:41] <autrijus> mm, probably an old parrot

[23:41] <integral> ah

[23:43] <svnbot6> r7453 | autrijus++ | * give up on any pretense of magical pair's sanity; we will

[23:43] <svnbot6> r7453 | autrijus++ |   revisit this after release, preferably adopt some variation

[23:43] <svnbot6> r7453 | autrijus++ |   of luqui's proposal.  We Will Be Back.

[23:58] <clkao> slacker giving up things!

[23:58] <autrijus> clkao: er, actually, that is an informal complaint against the nonworkableness of larry's decree.

[23:59] <autrijus> which, I assure you, not for lack of trying... 

[23:59] <clkao> :)

