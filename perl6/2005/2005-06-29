[00:00] <stevan_> I think making roles work in an easily predictable way is extrememly important to their success

[00:00] <stevan_> since they are just another level of class decompostion I dont expect anyone but the OO hackers to use them

[00:00] <stevan_> but they should still be accessible

[00:01] <stevan_> so I really want to iron out all the edge cases if we can

[00:01] <stevan_> ok back to converstation 

[00:01] <stevan_> breadth first is basically what you get when you flatten them

[00:02] <stevan_> except there is no overlap

[00:02] <stevan_> it is important in role composition that it is not order dependent

[00:03] <stevan_> which is trivial is you flatten

[00:03] <stevan_> because instead of shadowing (like in depth first traversal) conflict are just illegal

[00:03] <stevan_> so order doesnt matter

[00:05] <mugwump> but it did matter at some point, when the roles themselves were combined

[00:05] <stevan_> nope

[00:05] <stevan_> it doesnt matter

[00:05] <stevan_> if they conflict, ... BOOM, .... error

[00:05] <mugwump> ok

[00:05] <stevan_> so order is irrelecvant

[00:06] <mugwump> so the resolution process basically consists of disallowing the cases where it does matter.  fine by me, so long as I can still MMD in methods etc :)

[00:06] <stevan_> yes

[00:07] <stevan_> although MMD is a whole other topic :)

[00:07] <stevan_> but thats not my dept.

[00:07] <stevan_> 7 floors up and to the right, ask for autrijus, he is how you need to talk too :)

[00:08] <mugwump> sure.  of course you can simplify MMD in concept by viewing the entire signature as a part of the method "name"

[00:08] <mugwump> but that's not important right now

[00:09] <stevan_> yes, but thats just C++ style, and its not as cool

[00:09] <stevan_> we need type dispatched

[00:09] <stevan_> Yuval (nothingmuch) has this whole idea of first class signatures which is really cool

[00:09] <stevan_> but yes, not important right now

[00:11] <mugwump> ok, so we've got these Roles which are simply modelled as a collection of functions, including accessors for "private" attributes which are specially named so they can't conflict or even be accessed between roles etc

[00:11] <stevan_> uhm

[00:12] <stevan_> thats adding restrictions to the roles though

[00:12] <stevan_> according to @Larry, there is no such restriction

[00:12] <stevan_> (for the record I agree with you, but its not my language)

[00:12] <mugwump> :)

[00:13] <mugwump> but what restriction does Larry speak of?

[00:13] <stevan_> LOL

[00:13] <stevan_> none

[00:13] <stevan_> thats the problem :)

[00:15] <mugwump> Unless the difference is, that role methods are actually considered a part of the class they are composed into, and so can see each other's private attributes and methods

[00:15] <stevan_> yu[

[00:15] <stevan_> yup

[00:15] <stevan_> thats the idea

[00:16] <stevan_> Roles are flattened in , and tossed out

[00:16] <stevan_> think of the Role as a cellophane wrapper

[00:16] <stevan_> you open it, put the contents in your class

[00:16] <stevan_> and toss the wrapper out

[00:17] <stevan_> maybe hold onto the instructions (meta-data) to handle things like does(), but thats all

[00:17] <stevan_> this is how the current perl5 prototype works (without the state part

[00:17] <clkao> mugwump: oh, what's up with the store-password thing in svn::mirror?

[00:19] <mugwump> clkao: well, I think the thing missing is the connection between the svn config object and the auth baton

[00:19] <mugwump> but these objects are pretty much opaque and I couldn't find the docs when I was looking

[00:20] * mugwump ==> #svk

[00:25] * stevan_ wanders off for some foo

[00:31] * mugwump feeds stevan_ some foo at the bar

[00:36] <Khisanth> what exactly is a parrot language?

[00:37] <mugwump> PIR?

[00:37] <mugwump> PASM?

[00:37] <Khisanth> ah those

[01:00] <stevan_> ahhh the smell of schwarma

[01:01] <stevan_> poor Luke, this room is going to stink for a while ;)

[01:02] <mugwump> ok stevan_, I see now why there is a state problem.

[01:03] <stevan_> mugwump: its all about the flattening

[01:03] <stevan_> without it, you are correct, its not an issue

[01:03] <stevan_> but with it, its bad

[01:03] <stevan_> mmm, the hummus is good too

[01:04] <stevan_> Toronto has really great food I have to say

[01:04] <mugwump> So, there are two differences between Roles and Classes.  Attribute accessing and method invocation of roles is considered in the scope of the class which it is attached to

[01:04] <mugwump> (and roles are not instantiated)

[01:04] <stevan_> yes

[01:05] <stevan_> think of the {} braces on the class as a closure

[01:05] <stevan_> which is evaluated at compile time and results in the metamodel being constructed

[01:07] <stevan_> which can potentially have some really interesting effects if you can access the metaclass in some way

[01:08] <stevan_> class MyClass { for ('method1', 'method2') -> $label { $?CLASS.meta.add_method($label => sub { print $label } } }

[01:08] <stevan_> stuff like that could (theoretically) be possible

[01:08] <mugwump> it's like Roles are non-composable Classes that have a parametric *scope*

[01:08] <stevan_> yes

[01:08] <stevan_> and Roles can be parameterized too

[01:09] <stevan_> role Something [ .... T ] { has T $.foo } or something like that, I forget the syntax right now 

[01:10] <mugwump> The Set or Tree classes are the ones that would need this and exist as working examples I guess

[01:11] <stevan_> yes actually it would allow for type checking of the nodes of the tree

[01:11] <mugwump> So, the scope is basically the same thing as the "local" dispatch table (local being the composed dispatch table for a class)

[01:12] <stevan_> roughly yes

[01:12] <mugwump> for now I'm putting the ::Type object, and the "local" dispatch table into the same little black box

[01:12] <stevan_> I am not sure about inner classes and such

[01:12] <mugwump> so being typable means that you get a scope

[01:12] <stevan_> mugwump: yes thats pretty safe I think

[01:13] <mugwump> So, still it is the ::Type object that this "magic" is happening, all that's changed is that we're now using it for the Class' methods' scope

[01:14] <mugwump> and as the Role is not typable, their methods' scope must be attached to a ::Type

[01:14] <mugwump> but you don't need to throw them away in the MetaModel, especially given you still need to answer .does

[01:15] <stevan_> currently I gather all the info I need to implement does before I toss it

[01:16] <QtPlatypus> ?eval class Foo { has &.subat; method retsub () { .subat()}};my $foo= Foo.new(subat => {1 + 1});$foo.retsub;

[01:16] <evalbot6> \sub {...} 

[01:16] <QtPlatypus> That wasn't what I expected.

[01:17] <QtPlatypus> ?eval class Foo { has &.subat; method retsub () { .subat()}};my $foo= Foo.new(subat => {1 + 1});$foo.retsub.();

[01:17] <evalbot6> 2 

[01:17] <QtPlatypus> ?eval class Foo { has &.subat; method retsub () { .subat()()}};my $foo= Foo.new(subat => {1 + 1});$foo.retsub;

[01:17] <evalbot6> 2 

[01:18] <QtPlatypus> ?eval class Foo { has &.subat; method retsub () { .subat}};my $foo= Foo.new(subat => {1 + 1});$foo.retsub;

[01:18] <evalbot6> \sub {...} 

[01:18] <QtPlatypus> ?eval class Foo { has &.subat; method retsub () { .subat}};my $foo= Foo.new(subat => {1 + 1});$foo.retsub.perl

[01:18] <evalbot6> '\\sub {...}' 

[01:19] <QtPlatypus> Anyone care to explain why it works that way?

[01:20] <stevan_> QtPlatypus: no :)

[01:20] <stevan_> I think the first one "method retsub () { .subat()}" is probably using the accessor

[01:21] <stevan_> and so it this one (maybe) "method retsub () { .subat()}"

[01:21] <stevan_> this is ugly, but it works "method retsub () { .subat()()"

[01:21] <stevan_> ?eval class Foo { has &.subat; method retsub () { &.subat()}};my $foo= Foo.new(subat => {1 + 1});$foo.retsub;

[01:21] <evalbot6> 2 

[01:21] <QtPlatypus> That makes sence.  How would I use the attribute directly?

[01:21] <stevan_> like that

[01:21] <QtPlatypus> Arh

[01:22] <QtPlatypus> Ok things make sence.

[01:24] <Odin-LAP> sense, actually. :p

[03:07] <svnbot6> r5083, mugwump++ | Various updates to the pure Perl 6 MetaModel (non-PIL version) to reflect updated interpretation of Roles and Classes

[03:07] <svnbot6> r5084, Stevan++ | Perl6-MetaModel : there is nothing like refactoring with +93% coverage :) ... mostly just cleanup of the Perl6::Object module, it is getting pretty slimmed down now

[03:10] <mugwump> stevan: ping

[03:11] <stevan> mugwump: pong

[03:11] <stevan> I see your update

[03:11] <mugwump> excellent.  did it make any sense?

[03:11] <stevan> havent looked yet

[03:11] <mugwump> ok

[03:12] <stevan> I am doing so right now

[03:12] <mugwump> in particular is the Method.pm

[03:12] <stevan> ok

[03:12] <mugwump> At runtime, a method has *two* types

[03:12] <mugwump> one type is the $object.ref

[03:13] <mugwump> The other is the type that corresponds to the type the role was included into

[03:14] <stevan> ok

[03:14] <mugwump> the first is used for public accessors and methods, and is subject to dispatch through the Class' superclasses

[03:14] <mugwump> the second is used for private accessors and methods

[03:14] <mugwump> so, the first is bound "late"

[03:14] <mugwump> the second is bound "early"

[03:16] <mugwump> and a Class is merely a Role that very quickly has all the private parts of its methods bound

[03:18] <stevan> interesting

[03:19] <stevan> how would you deal with conflicts?

[03:19] <mugwump> when would they be detected?

[03:19] <stevan> class composition time

[03:20] <stevan> or role inclusion time

[03:20] <mugwump> same thing :)

[03:20] <stevan> any time you compose the ::Type

[03:20] <stevan> yes, basically

[03:20] <mugwump> yes

[03:21] <mugwump> the actual rules for the conflict resolution are irrelevant to this, of course.

[03:21] <stevan> yes

[03:21] <mugwump> so long as they don't leave the ::Type objects with ambiguous stuff in them

[03:21] <stevan> but thats the hard part :)

[03:22] <mugwump> yes, but minimal rules which exclude many multi methods which could co-exist Shouldn't Be Hard™ to implement

[04:11] <svnbot6> r5085, mugwump++ | Ensure Role methods can be re-used between Classes

[04:19] <svnbot6> r5086, luqui++ |  r147@Queen-of-Hearts:  luqui | 2005-06-28 21:56:55 -0400

[04:19] <svnbot6> r5086, luqui++ |  Added some type inferrence musings.

[04:19] <svnbot6> r5087, luqui++ |  r148@Queen-of-Hearts:  luqui | 2005-06-28 22:14:01 -0400

[04:19] <svnbot6> r5087, luqui++ |  On disjoint sets.

[04:19] <svnbot6> r5088, luqui++ |  r149@Queen-of-Hearts:  luqui | 2005-06-28 22:29:45 -0400

[04:19] <svnbot6> r5088, luqui++ |  Perhaps we need a new syntax for type variables, or we need to reassign ::.

[04:26] <svnbot6> r5089, mugwump++ | Method dispatch only happens on the compiled dispatch tables, not bothering with the Meta objects

[04:43] <obra> seen autrijus 

[04:43] <jabbot> obra: autrijus was seen 7 hours 20 minutes 34 seconds ago

[05:47] <nothingmuch> evening

[05:49] <nothingmuch> seen autrijus 

[05:49] <jabbot> nothingmuch: autrijus was seen 8 hours 26 minutes 22 seconds ago

[05:49] <nothingmuch> he was supposed to wake up by now ;-)

[05:51] <Khisanth> go knock on his door?

[05:51] <nothingmuch> i'm not staying at the hotel

[05:52] <nothingmuch> and it's not nice to wake someone up in the middle of their beau^H^H^H^H^Hhacking sleep

[05:58] <nothingmuch> . o O ( why are there so many conflicts ? )

[05:58] <svnbot6> r5090, nothingmuch++ | array container implementation

[05:58] <svnbot6> r5091, nothingmuch++ | array is compilable, and tested.. still broken

[05:59] <svnbot6> r5092, nothingmuch++ | Sorry stevan++, here's Scalar

[06:04] * Khisanth wonders if you can do ../../../../method

[06:05] <nothingmuch> Khisanth: .. being superclass or caller?

[06:05] <nothingmuch> ;-)

[06:06] <jql> Didn't &prefix:<../> get shot down?

[06:06] <nothingmuch> uh

[06:07] <nothingmuch> i thought it was a joke

[06:07] <mugwump> That's a really good idea!

[06:07] <jql> well, considering how ./ isn't a joke. :)

[06:07] <revdiablo> I think Juerd was serious about ../ for about 12 hours

[06:07] <jql> heh

[06:07] <mugwump> and then?  :)

[06:07] <QtPlatypus> I thought that it got shot down.

[06:08] <jql> and then we wondered "how could anyone use that?"

[06:08] <jql> well, I wondered it

[06:08] <revdiablo> he woke up the next day and realized

[06:08] <jql> I dunno what @Larry thought

[06:08] <Khisanth> well if there is going to be the ugly ./method why not go along with it and have ../../method too? :)

[06:09] <mugwump> ok that's fine for SUPER, but what about NEXT?

[06:09] <jql> ./+method   # bring it

[06:09] <revdiablo> .->method # ;)

[06:10] <nothingmuch> that's why file systems need continuations

[06:11] <coral> i like talk like that

[06:11] <coral> nothingmuch++

[06:11] * coral gets out the pom-poms

[06:11] <nothingmuch> bah, it's 2 am

[06:12] <coral> could http://perlfs.sourceforge.net/ be ported to pugs?

[06:12] <nothingmuch> and I'm screwing around with PIL underlying runtime stuff

[06:12] <nothingmuch> instead of working on my talk

[06:16] <Khisanth> nothingmuch: following in tradition?

[06:16] <svnbot6> r5093, nothingmuch++ | Testing is good for you

[06:17] <gaal> hello. what should the prelude be compiled to with the fast-prelude scenario? pugs ast? something else? what target do we always have? what would be easy to dump partially and later inject to the environment?

[06:18] <gaal> PIL?

[06:18] <revdiablo> previously known as PAST

[06:19] <nothingmuch> hola PIL

[06:19] <nothingmuch> err, gaal

[06:19] <gaal> that's why it was called that.

[06:19] <gaal> it was called past in the past.

[06:19] <revdiablo> heh

[06:19] <revdiablo> in the past PIL was called PAST, duh.

[06:20] <Khisanth> DR. PHIL

[06:20] <gaal> aloha nm

[06:21] <nothingmuch> gaal: i have a new laptop

[06:21] <gaal> "become new"! :)

[06:21] <nothingmuch> i actually had it before, but i forgot to tell you

[06:21] <nothingmuch> thanks =)

[06:21] <gaal> (not sure they speak inglezit on the chanell)

[06:23] <nothingmuch> uh, how did an ingy module work without YAML installed?!

[06:24] <nothingmuch> holy crap, this computer is so fast

[06:24] * nothingmuch is going to run the Regexp::Common test suite, just to see it go fast

[06:24] <gaal> why does script/pugscc still mention 'dump.ast'? i thought that was obsoleted?

[06:24] <gaal> ....why is pugscc still written in p5? :)

[06:25] <nothingmuch> uh

[06:26] <gaal> i 80% ported it once when i wanted to fix the cygwin path ickiness, but was missing some features. i imagine those are already available

[06:27] <gaal> but well, i guess it works now and is probably faster than a p6 version...

[06:29] * gaal looks for food

[06:29] <Khisanth> hmm

[06:46] <Khisanth> where can I find more info on .as()? or can that bible thing tell me? :)

[07:06] <nothingmuch> woah, i'm 20

[07:06] <gaal> happy birthday!

[07:08] <obra> happy birthday, nothingmuch 

[07:39] <gaal> ?eval sub f {say "not said"}; f(); say "said"

[07:39] <evalbot6> said bool::true 

[07:39] <gaal> why is "not said" not said?

[07:40] <QtPlatypus> could be the say saftly thing

[07:40] <gaal> ?eval sub fatal { die; die; die } fatal(); say "immortal"

[07:40] <evalbot6> immortal bool::true 

[07:41] <gaal> nope, same thing in one-liner.

[07:41] <Khisanth> hmm

[07:41] <gaal> dispatching is very b0rked!

[07:41] <gaal> ?eval no_such(); say "alive"

[07:41] <evalbot6> Error: No compatible subroutine found: "&no_such" 

[07:42] <gaal> this is very bad :)

[07:43] <Khisanth> hmm do that enough times and I get undef

[07:43] <Khisanth> instead of bool::true

[07:43] <gaal> the bool::true is simply the valuation of the last say

[07:44] <QtPlatypus> ?eval my $a=1;sub foo () {$a++}; foo(); $a

[07:44] <evalbot6> \1 

[07:44] <Khisanth> but why should say start returning undef all of a sudden?

[07:44] <gaal> why should functions not be called all of a sudden? the current r is not sane.

[07:45] <Khisanth> well that is for sure :)

[07:46] * gaal svn log -v's for possible recent culprits

[07:47] <Khisanth> ok returning doesn't seem to work at all

[07:51] <gaal> backtracing, 5039 now

[07:51] <gaal> make unoptimized++

[07:53] <gaal> b0rkage == r5040

[08:18] <gaal> hmm, i don't understand why this breaks! evalExp circa line 309 *does* get called.

