[00:00] <nothingmuch> perlbot nopaste

[00:00] <perlbot> Paste your code here and #perl will be able to view it: http://sial.org/pbot/perl

[00:00] <stevan> theorbtwo: better get moving,.. or you wont make it to Pugs nirvana

[00:01] <stevan> nothingmuch++

[00:01] <nothingmuch> shit, pasted to #perl

[00:01] <stevan> perlbot karma nothingmuch 

[00:01] <perlbot> Karma for nothingmuch: 16

[00:01] <stevan> now we are even

[00:01] <pasteling> "nothingmuch" at 212.143.91.217 pasted "diff of sub_named_params.t for linking" (44 lines, 1.4K) at http://sial.org/pbot/8350

[00:02] <nothingmuch> in diff format, to stress what changed

[00:02] <theorbtwo> Looks great!

[00:02] <stevan> nothingmuch: can you paste the whole thing too

[00:02] <stevan> diff does not give the whole picture

[00:02] <nothingmuch> yup

[00:03] <Khisanth> nothingmuch: could just replace the nopaste definition :)

[00:03] <pasteling> "nothingmuch" at 212.143.91.217 pasted "sub_named_params.t - the complete modified version" (104 lines, 3K) at http://sial.org/pbot/8351

[00:03] <theorbtwo> I don't think you can replace them.

[00:03] <theorbtwo> Just add a new one.

[00:03] <Khisanth> perlbot: forget nopaste

[00:03] <nothingmuch> Khisanth: that would annoy everyone on #perl, though, wouldn't it?

[00:03] <perlbot> removed nopaste from the database

[00:03] <Khisanth> nothingmuch: #perl doesn't use it much!

[00:04] <nothingmuch> ah

[00:04] <Khisanth> I mean that specific definition

[00:04] <stevan> nothingmuch: this looks good to me

[00:04] <stevan> nothingmuch++

[00:04] <nothingmuch> nothignmuch--; # please, don't get carried away

[00:04] <theorbtwo> perlbot, learn nopaste as Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[00:04] <perlbot> added nopaste to the database

[00:04] <nothingmuch> ingy: does that clarify things?

[00:05] <nothingmuch> perlbot nopaste

[00:05] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[00:05] <nothingmuch> hmm.. doesn't it have sprintf like formatting for channel, user who called it, etc? that seems, err, mandatory in a bot

[00:05] <nothingmuch> and then it should implement ??{ } so we can, err

[00:06] <theorbtwo> perlbot, highest karma?

[00:06] <perlbot> The top 5 karma entries: autrijus: 21, ingy: 18, nothingmuch: 18, stevan: 16, ~wegstar: 13

[00:06] <theorbtwo> Wow, nm, you're kicking ass.

[00:06] <nothingmuch> hah

[00:06] <stevan> and its nothingmuch and ingy neck and neck

[00:06] <ingy> nothingmuch++

[00:06] <nothingmuch> ingy *= 2

[00:06] <ingy> riight

[00:07] <theorbtwo> nm, ??{} would make the bot trivial to root.

[00:07] <nothingmuch> autrijus.=factorial

[00:07] <ingy> Ok, color me dense but I still don't totally grok it

[00:07] <stevan> autrijus + Inf

[00:07] <nothingmuch> theorbtwo: uhh, err, i didn't mean it in /that/ sense, we would only make *good* use of it ;-)

[00:07] <ingy> what is supposed to happen automagically 

[00:07] <nothingmuch> ingy: this lets us run catalog_tests.pl

[00:07] <nothingmuch> and get pretty links in the output to the synopses, as were explicitly specified

[00:08] <nothingmuch> perhaps with the match stripped fof

[00:08] <nothingmuch> but much more importantly

[00:08] <theorbtwo> ingy: Produce a HTML or whatever version of the test itself with links to the design docs, and a version of design docs with links to the tests.

[00:08] <nothingmuch> let us generate copies of the synopses with backlinks to the tests themselves

[00:08] <nothingmuch> so that we can know what parts of the specification is tested where

[00:08] <stevan> sort of a Devel::Cover for the Synopsis

[00:10] <ingy> Are you trying to suck in parts of the synopsis?

[00:10] <nothingmuch> not suck them in, just backlink from the synopses to the tests

[00:10] <theorbtwo> Can't do that; we didn't specify an extent.

[00:10] <nothingmuch> and place the backlinks in the right place in the synopses

[00:10] <ingy> ah. ok!!

[00:10] <ingy> got it

[00:10] <nothingmuch> so, final thoughts before we get this started?

[00:11] <ingy> um sure

[00:12] <ingy> one thing is this...

[00:12] <ingy> put your section name in double quotes

[00:12] <ingy> this is part of Pod

[00:12] <nothingmuch> ingy: i'm scared of that, because we need to premunge the links to make them actual pod

[00:12] <nothingmuch> i think this can be the output

[00:13] <nothingmuch> but i wouldn't like to fudge with quoting

[00:13] <ingy> L<Text|page/"Section Name" other stuff>

[00:13] <stevan> ok,.. dinner time,..

[00:13] <stevan> nothingmuch: all sounds good to me

[00:13] <nothingmuch> come back quick

[00:13] <nothingmuch> ciao, stevan

[00:13] <stevan> nothingmuch: not likely,.. but I will be back later tonight

[00:13] <ingy> in fact Pod requires the double quotes for multi word sections

[00:14] <nothingmuch> ingy: i know that, but i find it, err, annoying. In theory. You've probably dealt with this.. is it really crappy to implement?

[00:14] <ingy> nothingmuch: is your L<...> supposed to be Pod?

[00:14] <nothingmuch> it's easier to be strict in what you emit

[00:14] <nothingmuch> i mean, if we translate this pseudo-pod or pseudo-kwid link format to pod or kwid, we'll make it valid

[00:15] <nothingmuch> but much harder to be lax in what you permit

[00:15] <nothingmuch> well, you know what, why don't we double quote

[00:15] <ingy> ok, then i suggest making the psuedo link look like neither Pod nor Kwid

[00:15] <nothingmuch> it's not really that complicated

[00:15] <ingy> no it's not

[00:16] <nothingmuch> ingy: i actually disagree with that.. I think it should be intuitive

[00:16] <nothingmuch> and if it's quoted and stuff, it might actually look valid to ...

[00:16] <nothingmuch> not that that's the issue, since we're converting

[00:17] <nothingmuch> basically, slightly modifying an existing format gives us both an OK design to start with, and familiar semantics

[00:17] <ingy> nothingmuch: if you generate html from the pod/kwid in the page, would it include your links?

[00:17] <nothingmuch> L<> is obvious as a link to anyone who wrote a bit of pod, ever

[00:17] <nothingmuch> yes

[00:17] <ingy> so it is part of the Pod

[00:18] <nothingmuch> but the generation of either (by catalog_tests.pl, and by the reverse for syns) will first munge that first

[00:18] <nothingmuch> i think

[00:18] <ingy> and not a psuedoback link

[00:18] <nothingmuch> like it makes some pod from the individual test cases

[00:18] <ingy> so why not use real Pod?

[00:18] <nothingmuch> because it's not flexible enough

[00:19] <theorbtwo> I think it being intuitive is much much much more important then it being POD or Kwiwi.

[00:19] <ingy> =begin backlink

[00:19] <ingy> ...

[00:19] <ingy> =end backlink

[00:19] <nothingmuch> that makes it impossible to stick in trailing comments

[00:19] <nothingmuch> and makes it 3 lines, instead of 1

[00:19] <ingy> ?

[00:19] <nothingmuch> and something that must be parsed wholly and translated

[00:19] <nothingmuch> which can't just be done with perl -ne

[00:19] <nothingmuch> unless you modify $/ to be something very clever

[00:19] <ingy> perl6 gives you this though

[00:19] <ingy> for free

[00:20] <nothingmuch> our scripts are going to be perl5 for now, we want it working tonight

[00:20] <nothingmuch> and when perl6 will have rules to munge this, we may translate

[00:20] <ingy> %=POD

[00:20] <ingy> well why not try a litle harder now

[00:20] <nothingmuch> oh, in that sense,

[00:21] <nothingmuch> $perl + expression(); # %=POD ...

[00:21] <nothingmuch> is that it?

[00:21] <ingy> no

[00:21] <ingy> %=POD is a global that contains the POD DOM

[00:21] <nothingmuch> ah,

[00:21] <ingy> it is not currently available

[00:21] <nothingmuch> right

[00:22] <nothingmuch> i think we're beeing too hypothetical

[00:22] <nothingmuch> people come in and they ask 'what can i do?

[00:22] <theorbtwo>  /metoo.

[00:22] <nothingmuch> and we say 'uh, we have no clue'

[00:22] <ingy> you should really read Damian's p6l post carefully

[00:22] <nothingmuch> that is a problem that needs to be fixed here

[00:22] <ingy> anyway,...

[00:22] <nothingmuch> got a message id?

[00:22] <ingy> what to do now.

[00:23] <ingy> I would make a new non-L code for this

[00:23] <nothingmuch> ingy: can you whip up a good format in 30 seconds?

[00:23] <ingy> since it is different, or is it?

[00:24] <ingy> I can whip up something quickly, sure

[00:24] <theorbtwo> It's not.

[00:24] <nothingmuch> ingy: it's really L<> semantics, exactly

[00:24] <theorbtwo> This is something that it'd always be good to be able to do with links, thta presently can't be.

[00:24] <theorbtwo> that.

[00:24] <nothingmuch> just with additonal 'skip until you match the following regex' thing

[00:24] <ingy> I like the idea that you make it a comment for now

[00:24] <ingy> nothingmuch: ok

[00:24] <nothingmuch> which, given your comment about double quoting sections, might actually be valid, too

[00:25] <nothingmuch> if the separator is not a third slash, but whitespace

[00:25] <nothingmuch> but i bet that's unspecced, and thus unimplemented by 99% of pod parsers

[00:25] <ingy> nothingmuch: but what is even better is to not just get a starting point but also an ending point

[00:25] <ingy> then you can INCLUDE<...>

[00:25] <ingy> a section is currently includable

[00:25] <nothingmuch> ingy: i think that complicates the output format

[00:25] <nothingmuch> but here is an idea i shared:

[00:26] <nothingmuch> sorry, i had, but didn't share yet:

[00:26] <nothingmuch> if the pattern matches at the first part of a regex, it's placed before, if it matches after or in the middle of a section, it applies to it as a unit

[00:26] <nothingmuch> errm, i don't like including

[00:26] <nothingmuch> this is hypertext

[00:26] <nothingmuch> and we are in the tabbed browsing era

[00:27] <theorbtwo> Hmm...

[00:27] <theorbtwo> I'm not sure what you mean by first part/middle/after...

[00:27] <ingy> including can be a good thing, but continue

[00:27] <nothingmuch> ingy: do you have a good argument for inclusion?

[00:27] <theorbtwo> But we could allow REs to capture.

[00:27] <ingy> nothingmuch: it is actually called /transclusion/

[00:27] <nothingmuch> theorbtwo: like, the links i used in sub_named_.*.t

[00:28] <ingy> that's the real term for this

[00:28] <nothingmuch> they reference the middle of the sections

[00:28] <nothingmuch> they apply to it all

[00:28] <ingy> any part of the Pod DOM is currently transcludable

[00:28] <nothingmuch> but if i were to say, match the begining of the sentance

[00:28] <nothingmuch> but i don't like this idea

[00:28] <nothingmuch> ingy: why would we want to do that in the test/syn mapping?

[00:28] <theorbtwo> ingy: And by "currently" you mean...

[00:29] <nothingmuch> to get verbatim sections of synopsis copied into the output htmls of tests?

[00:29] <nothingmuch> theorbtwo++ # transclusion by re captures is very beautiful

[00:29] <nothingmuch> "@+" should do it, no?

[00:30] <ingy> yes, why not make the regexp part capturing?

[00:30] <nothingmuch> oh, no, that's offsetts

[00:30] <ingy> @- and @+ could do it

[00:30] <nothingmuch> well, sure, if you want to implement that

[00:31] <nothingmuch> but i really don't see how it could benefit readability or clarity

[00:31] <ingy> $1 || substr($text, $-[0], $+[0])

[00:31] <nothingmuch> i expect the following search path to be typical:

[00:31] <theorbtwo> Donno... could.

[00:31] <nothingmuch> user pops into #perl

[00:31] <nothingmuch> says 'what can i do?'

[00:32] <nothingmuch> $regular says 'errm, read the synopses, see what you like, and if it's already tested, there'll be a little link'

[00:32] <nothingmuch> 'you can see if the test looks good to you, or if you can add, or if nothing is linked at all, just add a test'

[00:32] <nothingmuch> clicking on the link will give back the catatlog_tests.pl output

[00:32] <nothingmuch> which has sections per test

[00:32] <nothingmuch> with links to synopses, and test cases layed out

[00:33] <ingy> seems like transclusion could be real useful there

[00:33] <nothingmuch> with the descriptions from test cases (is(... "")

[00:33] <nothingmuch> included too

[00:33] <nothingmuch> just a simple, concise list

[00:33] <nothingmuch> please specify exactly how... to me it would be a distraction, but maybe i just don't understand how they will be used, and wher

[00:33] <nothingmuch> e

[00:34] <ingy> nothingmuch: as long as you are using comments, just do something, and we can refactor later

[00:34] <nothingmuch> ok

[00:34] <nothingmuch> so i vote for L<(Page/"Section")\s+(.*)> being matched

[00:34] <ingy> I would use the double quotes though =)

[00:34] <nothingmuch> $1 remains in the link

[00:34] <nothingmuch> $2 is the pattern used to place the backlink

[00:35] <theorbtwo> Need to use a Regex::Common delimited // thing; the regexes will commonly contain >s.

[00:35] <nothingmuch> theorbtwo: good point

[00:36] <ingy> cool, good luck!

[00:36] <nothingmuch> so L<(Page/Section)\s+(delimiter)(....)(closedelim)>?

[00:37] <nothingmuch> lets start with /, and if we run into leaning toothpick syndrome will fix that, ok?

[00:37] <theorbtwo> Sounds good to me.

[00:38] <ingy> nothingmuch: did you accidentally forget the double quotes?

[00:38] <nothingmuch> yes, i did forget them

[00:38] <nothingmuch> but they are optional if it's \S+, right?

[00:38] <nothingmuch> damnit.

[00:38] <nothingmuch> i hate special cases!

[00:38] <nothingmuch> this was supposed to stay simple =(

[00:39] <nothingmuch> then again, simple to humans is not necessarily simple to implementors

[00:39] <ingy> yes, but if you are going to use a regexp in there please use the double quotes

[00:39] <nothingmuch> and i think the tradeoff is 1:N in favour of user simplicity

[00:39] <ingy> and I'll support them in Kwid too

[00:39] <nothingmuch> well L<Foo/Bar //>

[00:39] <nothingmuch> that should be ok

[00:39] <nothingmuch> but L<Foo/Bar Gorch //> becomes tricky

[00:40] <nothingmuch> so it needs to be L<Foo/"Bar Gorch" //>

[00:40] <nothingmuch> right?

[00:40] <nothingmuch> just like pod

[00:40] <ingy> right

[00:40] <ingy> well hmmm

[00:40] <ingy> so consider this

[00:41] <ingy> maybe the regexp can just be a part of the section

[00:41] <nothingmuch> oh my

[00:41] <nothingmuch> that doesn't sound good

[00:41] <ingy> it is up to the processor to decide what the section maps to

[00:41] <ingy> the parser doesn't care

[00:41] <nothingmuch> that was the purpose of the matches anyway

[00:41] <nothingmuch> no, because we want finer granuality than sections

[00:41] <nothingmuch> because tests are normally

[00:42] <nothingmuch> this is a basic check for Section

[00:42] <nothingmuch> this tests that special case mentioned by text 'blah.*gorch' in Section is as specified

[00:42] <nothingmuch> and so on

[00:42] <nothingmuch> and these things are worth mentioning from the perspective of the synopses

[00:42] <theorbtwo> And because we don't want things to depend on processors.

[00:43] <nothingmuch> because if someone bothered to test them, someone reading the synopses should know that the special test is tested for, and where

[00:43] <ingy> I think that anything after the *first* slash in the link will just reported as the section

[00:43] <ingy> and the processor can be as smart or as dumb as it wants

[00:43] <ingy> so all is good 

[00:43] <nothingmuch> i disagree

[00:43] <nothingmuch> it's not a section

[00:44] <nothingmuch> it's where inside the section that the pattern is talking about

[00:44] <nothingmuch> the section should still be intelligable to users, etc

[00:44] <ingy> but conceptually they are all just pointers into the page Dom's content

[00:44] <theorbtwo> No, all is bad.

[00:44] <theorbtwo> When different renderers think something has different semantics, that is bad.

[00:45] <ingy> page points to the dom

[00:45] <nothingmuch> ingy: but not every part of the dom is linkable by heading name

[00:45] <ingy> and everything else is a query into the dom

[00:45] <nothingmuch> you are thinking xpath?

[00:45] <nothingmuch> it's not in pod yet

[00:45] <ingy> nothingmuch: I'm explaining it in those terms

[00:45] <ingy> I know

[00:45] <nothingmuch> and we're trying to get a Q&D xpath working within 10 minutes

[00:45] <ingy> basically we are agreeing

[00:45] <nothingmuch> which will be ok for special cases

[00:46] <nothingmuch> till pod has xpath, if it does

[00:46] <ingy> you just don;t know it yet

[00:46] <ingy> I'm just saying do what you will after the first slash

[00:46] <nothingmuch> because as i understand it it's semantically equivelent, but it's format is less backwards compatible

[00:46] <nothingmuch> example please

[00:46] <ingy> and it will not break with Pod's model conceptually

[00:46] <nothingmuch> ok, so what advantages is your format capable of bringing over a clear distinction between "section" and /pattern/?

[00:47] <nothingmuch> what about syntatically?

[00:47] <ingy> ok I'm a bit lost...

[00:47] <nothingmuch> then post an example

[00:47] <nothingmuch> that will help us help you help us understand what you mean ;-)

[00:48] <nothingmuch> (mr. ingerson)

[00:48] <theorbtwo> I'm not concerned about breaking POD; I'm much more concerned about whatever replacing it being sane.

[00:48] <nothingmuch> amused with himself, /me puts on simon & garfunkle

[00:49] <ingy> but what is replacing it is really just Pod ;)

[00:49] <theorbtwo> Yeah, that ought to get fixed.

[00:49] <theorbtwo> Because POD is horribly horribly broken by years and years of being underspecified.

[00:49] <nothingmuch> ingy! example! or i will just commit what i've already done!

[00:49] <ingy> nothingmuch: commit it!

[00:49] <nothingmuch> ok

[00:49] <ingy> cool

[00:49] <ingy> nothingmuch++

[00:50] <nothingmuch> r890

[00:50] <nothingmuch> i think we should start a background see session on the converter now

[00:50] <nothingmuch> and work hard on creating a large volume of tests for this

[00:50] <nothingmuch> tests with this

[00:51] <nothingmuch> as a higher priority

[00:51] <nothingmuch> whomever gets bored works on the converters a bit,

[00:51] <theorbtwo> Is there an easy way to see the diff for a given r?

[00:51] <nothingmuch> are you gusy in?

[00:51] <ingy> all I am saying is that with L<page/...> whatever you put in ... will probably be just fine in the end

[00:51] <nothingmuch> darcs diff -p 

[00:51] <theorbtwo> And how do we link to ml posts?

[00:51] <nothingmuch> ;-)

[00:52] <nothingmuch> theorbtwo [message-id://]

[00:52] <nothingmuch> i think

[00:52] <nothingmuch> let google do the work

[00:53] <nothingmuch> . o O ( parsley sage, rosemay and cheese )

[00:54] <nothingmuch> theorbtwo?

[00:54] <ingy> nothingmuch: 890 looks groovy

[00:54] <theorbtwo> I don't have darcs.

[00:54] <nothingmuch> theorbtwo - i was kidding.. but i meant about the message-id stuff

[00:54] <theorbtwo> What you have there looks good.

[00:54] <theorbtwo> Um, don't like that, finding the RFC now.

[00:55] <theorbtwo> news:msgid.

[00:55] <theorbtwo> (With no angle brackets on the msgid.)

[00:55] <theorbtwo> Straight out of RFC 1738

[00:56] <nothingmuch> inside square brackets, perlmonks style?

[00:56] <theorbtwo> No, as an L<>.

[00:56] <theorbtwo> With a regex, if you want, but news arts are generally short enough that you don't need one.

[00:56] <nothingmuch> L<news:foo@woobling.org>?

[00:56] <theorbtwo> Yeah.

[00:57] <nothingmuch> okay, works for me

[00:57] <nothingmuch> see://woobling.org

[00:58] <theorbtwo> My PearPC has been annoying lately, but will try again.

[00:58] <theorbtwo> Oh, anybody know if there is a way to do remote-desktop from xwindows to OSX?

[00:58] <nothingmuch> theobtwo: vnc

[00:58] <nothingmuch> but that's it

[00:59] <nothingmuch> apple has an rdesktop tool, but it:

[00:59] <nothingmuch> a. sucks

[00:59] <nothingmuch> b. really

[00:59] <nothingmuch> c. is also propietry

[00:59] <theorbtwo> And there's no linux binary-only version?  Idiots...

[00:59] <nothingmuch> maybe timbuktu has an xwindows client though

[00:59] <nothingmuch> but you'd have to pirate^Wbuy it

[01:01] <ingy> are you guys using SEE?

[01:01] <nothingmuch> ingy: yes

[01:01] <ingy> address?

[01:01] <nothingmuch> well, i am... nobody's joined yet ;-)

[01:02] <nothingmuch> see://woobling.org

[01:02] * nothingmuch is delighted he can finally spell synopses reliably

[01:02] <nothingmuch> anyway, i'm getting myself something to serve as an ashtray

[01:03] <nothingmuch> i wrote a todo in each of the perl scripts, and now will start committing links from my tests to the synopses. Then i'll take on others' tests.

[01:06] * hlen wonders how much longer until some kind soul gets the pipe operators working

[01:07] <jabbot> pugs - 890 - First try at linking to synopses from te

[01:07] <theorbtwo> ==> and <==, you mean?

[01:08] <hlen> theorbtwo, yes

[01:20] <theorbtwo> Jess has declared it night.  I'll probably be back in a few hours, though.

[01:23] <Limbic_Region> TTFN theorbtwo

[01:23] <Limbic_Region> sleep well

[01:29] <nothingmuch> backlinking etiquette: only link what is actually tested

[01:32] <nothingmuch> i wonder how nice it is to backlink to s29? ;-)

[01:32] * nothingmuch will avoid doing that for now

[01:37] <jabbot> pugs - 891 - smartmatch test backlinking with synopsi

[01:47] <jabbot> pugs - 892 - synlink of given.t

[01:57] <jabbot> pugs - 894 - synlink subname.t

[01:57] <jabbot> pugs - 893 - synlink of control_blocks.t

[02:05] <nothingmuch> kula shaker!

[02:07] <jabbot> pugs - 896 - rename, rehaul and synlink $?FILE and $?

[02:07] <jabbot> pugs - 895 - synlink sub.t

[02:11] <nothingmuch> wizard.. blizzard

[02:11] <nothingmuch> food

[02:14] <nothingmuch> was it nicholas clark who raised the \0 as quote delimiter issue?

[02:18] <chip> anybody have the svn checkout command?

[02:18] * chip seens none on pugscode.org

[02:19] <lumimies> Hi

[02:19] <nothingmuch> svn co http://svn.openfoundry.org/pugs

[02:19] <chip> doggone it

[02:19] <nothingmuch> maybe you should add it to the wiki?

[02:19] <chip> ah thanks

[02:19] <nothingmuch> hola lumi

[02:20] <nothingmuch> want to help catalogging tests?

[02:22] <nothingmuch> err, 

[02:22] <nothingmuch> hola lumi

[02:22] <nothingmuch> want to help cataloggin tests?

[02:22] <lumimies> Hi

[02:22] <lumimies> Sure

[02:22] <lumimies> This colloquy is buggy

[02:22] <lumimies> What can I do?

[02:22] <nothingmuch> colloquy has issues, yes

[02:23] <nothingmuch> go through tests

[02:23] <chip> Anybody know if   Str | Num where { $_ }  qualifies the Num or the junction type?

[02:23] <nothingmuch> then add a L<S04/"Section"> link wherever

[02:23] <nothingmuch> see t/operators/smartmatch.t, t/*/given.t, etc

[02:23] <nothingmuch> errm

[02:23] <nothingmuch> that's in s12, right?

[02:24] <nothingmuch> hmm

[02:24] <nothingmuch> if where is a named unary

[02:24] <nothingmuch> then it binds tighter than junctive or

[02:25] <nothingmuch> if it's a statement modifier (that analogy doesn't fit for me), then it binds very loosely

[02:25] <nothingmuch> s03 has a table at the bottom, see if it makes sense

[02:25] <nothingmuch> if where is an infix named operator, then it must have more explicit precedence

[02:25] <nothingmuch> in that case s03 has a bug

[02:26] <nothingmuch> if it's a rightward listop, then it's less than |, in which case it applies only to the Num

[02:26] <nothingmuch> . o O ( shower your love on me! )

[02:27] <chip> what's a "rightward listop"?

[02:27] <nothingmuch> an op that slurps a list

[02:27] <nothingmuch> that is right of it

[02:28] <nothingmuch> unlike leftward list ops (only ==> as far as i know)

[02:28] <nothingmuch> which take the list on the left side, and moves it to the right

[02:30] <nothingmuch> hmm

[02:30] <nothingmuch> am i hallucinating?

[02:30] <chip> ok... that's not what "where" is, AFAICT.  I think it's a binary op.  (If "of" and "is" are binary, anyway)

[02:30] <nothingmuch> i thought i checked in t/base/subtypes.t yesterday

[02:30] <nothingmuch> is and of and where and will are not listed in the s03 table

[02:31] <nothingmuch> but i've seen a definition of will akin to is, in s12

[02:31] <nothingmuch> talking about it being infix

[02:31] <nothingmuch> but not specifying precedence

[02:36] <chip> Asked on p6l

[02:37] <jabbot> pugs - 897 - Add a test for subtypes (a type witha  w

[02:37] <chip> Is C<++$named> for mandatory named parameter official?

[02:37] <nothingmuch> chip: no

[02:38] <nothingmuch> it says in s06 IIRC

[02:38] <chip> Mm, OK

[02:38] <nothingmuch> that it will 'probably' be so

[02:38] <nothingmuch> but i don't recall seeing a concrete statement

[02:38] <nothingmuch> but it's tested for as such (t/subroutines/sub_named*.t)

[02:39] <chip> Right, that's where I saw it.

[02:39] <chip> which is right: "+$var of Num is required", or "+$var is required of Num" ?

[02:40] * nothingmuch doesn't parse

[02:40] <nothingmuch> oh

[02:40] <chip> OK, how about "$var of Num is rw" vs. "$var is rw of Num"

[02:40] <nothingmuch> i'd say the first just because it makes sense englishly

[02:41] <nothingmuch> and i'd say in that case Num $var is rw

[02:41] <nothingmuch> or again, the former

[02:41] <nothingmuch> damnit lumi, fix your nat!

[02:41] <chip> yeah

[02:41] <ayrnieu> randomly, how do you access directories in perl6?  <*> and readdir() and friends all seem to not exist.

[02:41] <nothingmuch> ayrnieu do you know if they're being tested for?

[02:42] <ayrnieu> and I'm not clear on where I should look for perl6func =)

[02:42] <nothingmuch> i think opendir etc are not defined enough to be implemented

[02:42] <nothingmuch> ayrnieu: the recently started s29 (fetching link) project is supposed to be just that

[02:42] <ayrnieu> nothing - nothing interesting appeared on my greps, no.

[02:42] <ayrnieu> nothing - oh, cool.

[02:42] <nothingmuch> http://www.rodadams.net/Perl/S29.html

[02:42] <nothingmuch> okay

[02:43] <nothingmuch> well, as for <*> i saw it discussed some time ago. I have no idea what it really means, that i remember it

[02:43] <nothingmuch> but it might have been discussed

[02:43] <nothingmuch> if you can find something sensical in s29, you might want to write a test for it

[02:44] <nothingmuch> and use our new linking convention to link back to the relevant part in s29

[02:44] <nothingmuch> even though it's a work in progress

[02:45] <nothingmuch> oh

[02:45] <nothingmuch> appearantly the apocalypse on IO stuff is not ready at all yet

[02:45] <nothingmuch> errm.

[02:45] <nothingmuch> bummer

[02:45] <nothingmuch> anyway, i promised myself some food a while ago, bbiab

[02:53] <elmex> woho

[02:57] <lumimies> Actually seems it's sleeptime for me

[02:59] <elmex> ;)

[02:59] <elmex> it's soooo eary ;)

[02:59] <elmex> early

[02:59] <lumimies> It is, too

[02:59] <lumimies> 5am is early

[02:59] <lumimies> Just the wrong sort of early

[03:00] <elmex> 04:00 here ;)

[03:00] <nothingmuch> lumimies: what, with no links done?

[03:00] <nothingmuch> naughty!

[03:00] <lumimies> Yes, sorry :/

[03:00] <nothingmuch> anywho, your connection is acting up

[03:01] <nothingmuch> hah!

[03:01] <lumimies> It is

[03:02] <lumimies> "I even managed to get bbedit to run and also to show me all the synopses in one window and all"

[03:02] <lumimies> Is what I said

[03:02] <nothingmuch> bbedit--

[03:02] <lumimies> But still, sleep beckons

[03:02] <nothingmuch> very expensive without a good reason

[03:02] <nothingmuch> well, ciao then

[03:02] <lumimies> What do you reccomend?

[03:02] <nothingmuch> carbon vim

[03:02] <lumimies> Er, 2m not 2 c

[03:02] <nothingmuch> subetha

[03:02] <nothingmuch> carbon emacs

[03:03] <nothingmuch> xemacs

[03:03] <lumimies> I'll try to findsuch

[03:03] * nothingmuch is very very happy with carbon vim

[03:03] <lumimies> I don't want to run another os though

[03:03] <nothingmuch> well, if you're not an emacs head then that's good for you

[03:03] <nothingmuch> in the non cynical sense ;-)

[03:04] <lumimies> Although it comes with its own psychiatrist

[03:04] <nothingmuch> =)

[03:04] <nothingmuch> you can also run eclipse

[03:04] <lumimies> I think bbedit is more about milking money out of web developers nowadays

[03:04] <nothingmuch> i find that scary though

[03:04] <lumimies> Oh wow, overkill

[03:05] <nothingmuch> i thought web developers like dreamweaver

[03:06] <lumimies> Gr

[03:07] <jabbot> pugs - 898 - synlink quoting.t

[03:07] <nothingmuch> damn, that's just cruel

[03:11] <stevan> hey nothingmuch 

[03:11] <nothingmuch> hola stevan

[03:11] <stevan> how goes the linking?

[03:11] <nothingmuch> i'll leave see://woobling.org open

[03:12] <nothingmuch> i'm not going to work on it this evening

[03:12] <nothingmuch> however, i linkified several test files

[03:12] <stevan> yes I see

[03:12] <stevan> whats at see://woobling?

[03:13] <nothingmuch> catalog_tests.pl, and fudge_synopses.pl (really just a todo)

[03:13] <stevan> ok,.. I had to ditch subetha

[03:13] <nothingmuch> maybe when ingy returns you guys can work on it

[03:13] <stevan> it was taking over too many file types

[03:13] <nothingmuch> ditch? why?

[03:13] <nothingmuch> oh...

[03:13] <nothingmuch> that can be fixed rather easily

[03:13] <nothingmuch> edit it's Info.plist

[03:14] <nothingmuch> anyway, the birds outside are starting to make a racket

[03:14] <nothingmuch> i best be off to bed

[03:14] <stevan> ok

[03:14] <stevan> what time is it there?

[03:14] <nothingmuch> 5:15

[03:14] <stevan> wow

[03:14] <stevan> ok

[03:14] <stevan> 10:15 pm here

[03:14] <nothingmuch> east coast?

[03:15] <stevan> yeah

[03:15] <nothingmuch> anyway, go back to subetha, it's fun

[03:15] <nothingmuch> only make sure it doesn't get in the way (that is doable)

[03:15] <stevan> ok I will fiddle with it

[03:15] <cls_bsd> ok, I have stupid Q, so far pugs supports hash now?_?

[03:15] <nothingmuch> cls_bsd: i think yes

[03:16] <cls_bsd> nothingmuch: Thank you :) so much 

[03:16] <nothingmuch> i didn't implement it ;-)

[03:17] <nothingmuch> see t/data_types/hash.t

[03:18] <stevan> cls_bsd: hashes still have some un-implemented corner cases

[03:18] <cls_bsd> stevan: ok, I all see tests first :)

[03:19] <nothingmuch> cls_bsd: anything that is perl, and whose results don't end in todo_ probably works

[03:20] <elmex_> crap fucking internet connection hate

[03:20] <nothingmuch> i should say, and whose results aren't checked with todo_*

[03:20] <nothingmuch> anyway, good night all

[03:20] <elmex_> nothingmuch: gn8

[03:20] <nothingmuch> please please please keep synlinking tests

[03:20] <stevan> nothingmuch: I will

[03:20] <stevan> nothingmuch++

[03:20] <nothingmuch> stevan++

[03:20] <nothingmuch> heh

[03:21] <nothingmuch> *poof*

[04:27] <jabbot> pugs - 899 - adding in some =pod sections along with 

[05:47] <jabbot> pugs - 901 -  r1153@not (orig r564):  luqui | 2005-03

[05:47] <jabbot> pugs - 900 - * regen manifest

[05:50] <autrijus> t/operators/quoting.t is simply amazing.

[05:51] <autrijus> (test squad)++

[05:51] <autrijus> actually, just woke up to say this. going back to sleep. :) &

[06:12] <ingy> hola

[06:48] <chip> BWAHAHA

[06:49] <chip> C< sub foo ($a, $b, ?$c) { print "a=$a b=$b c=$c" } >

[06:49] <chip> I've got that working in Perl 5

[06:52] <chip> C< sub foo ($me: $a, $b, +$c, +$d) { ... } >   also

[06:59] <autrijus> Perl 5?

[06:59] <autrijus> you mean http://search.cpan.org/~brentdax/Perl6-Parameters-0.03/ ?

[07:03] <autrijus> so, if I added m:p5// rules support today

[07:04] <autrijus> I don't think anyone will complain, right?

[07:04] <autrijus> when PGE arrives we'll just hook it into the same interface, in 6.283

[07:04] <autrijus> but p5 regex can't hurt.

[07:04] <masak> hello

[07:04] <masak> hanoi works now :)

[07:04] <autrijus> hi masak.

[07:04] <autrijus> masak: indeed! :)

[07:05] <masak> and i have an openfoundry account

[07:11] <autrijus> yay!

[07:12] <autrijus> so commit your name into AUTHORS?

[07:12] <autrijus> masak: also, if you'd like to write a test that exercises the hanoi bug, in t/subroutines/

[07:12] <ingy> nothingmuch: you should look at Pod's X<> format. It is an alternative to your regexp fu.

[07:12] <autrijus> or at the end of t/subroutines/sub_named_params.t

[07:13] <autrijus> then I'd be ~very grateful

[07:15] <autrijus> hihi hoowa 

[07:15] <autrijus> hoowa: chinese (utf8) variable and subroutine names completely works in pugs now... I'm adding perl5 regular expressions today

[07:16] <autrijus> hoowa: great work on getting the translations going, btw

[07:18] <masak> autrijus: i'd like to do both, but i am still at a loss

[07:19] <ingy> autrijus: jesse is incoming, no?

[07:19] <masak> i think i can handle the AUTHORS file

[07:19] <autrijus> ingy: right

[07:19] <autrijus> masak: ok. have you written perl5 tests before?

[07:19] <masak> but the tests i will have to study a bit first

[07:19] <ingy> w00t

[07:19] <masak> autrijus: no

[07:19] <masak> only looked at some

[07:19] <autrijus> ok, read this: http://search.cpan.org/dist/Test-Simple/lib/Test/Tutorial.pod

[07:19] <masak> thx

[07:19] <autrijus> guaranteed to change your life^Wprogramming style :)

[07:20] <masak> lol

[07:20] <autrijus> schwern++ # the kingly pumpking

[07:23] <ingy> we should have a raffle to guess how many pugs patches there will be by oscon

[07:24] <ingy> any early guesses?

[07:25] <autrijus> patches?

[07:25] <autrijus> I'll just grant you admin right

[07:26] <autrijus> and give people committer bits on the spot

[07:27] <ingy> maybe I'll hand out freepan accounts with each oscon lanyard

[07:27] <jabbot> pugs - 902 - New Kwid syntaxes inspired by Damian...

[07:28] <autrijus> yup.

[07:28] <autrijus> yapcna is earlier than oscon no?

[07:29] <ingy> yes

[07:29] <autrijus> so, maybe we should guess pugs patches during that :)

[07:35] <masak> autrijus: i think you've spelled my name "musak" in your journal :)

[07:35] <autrijus> sorry. :)

[07:35] <autrijus> fixed.

[07:36] <masak> thx :)

[07:37] <masak> let's say i wanted to do an svn co, how would i do it?

[07:37] <masak> i've only done wget so far :(

[07:37] <autrijus> svn co http://svn.openfoundry.org/pugs

[07:37] <autrijus> that's all.

[07:37] <masak> lol

[07:37] <masak> ok

[07:38] <autrijus> to commit, "svn ci"

[07:38] <masak> right

[07:38] <masak> do i need to log in for that?

[07:38] <autrijus> when you do that

[07:38] <autrijus> it will ask for your username/passwd.

[07:38] <masak> ah

[07:43] <masak> is there a way for me to... run my test before ci-ing it?

[07:44] <autrijus> sure

[07:44] <chip> autrijus: Oh, I've gone way beyond Perl6::Parameters

[07:44] <autrijus> make install

[07:44] <autrijus> pugs t/foo/your_test.t

[07:45] <masak> k, thx

[07:45] <autrijus> if you don't like make install, you can set HARNESS_PERL env var and PERL6LIB.

[07:45] <autrijus> PERL6LIB to ext/Test/lib

[07:45] <autrijus> chip: wow!

[07:45] <chip> sub foo (Int $a, Ref $b, $c of SomeOtherClass where { $_->can('foo') }) {...}

[07:45] <autrijus> wow.

[07:45] * autrijus is impressed

[07:45] <chip> can't share yet, no permission from $dayjob

[07:45] <autrijus> and it works? or just parses?

[07:46] <chip> works

[07:46] <autrijus> do ask!

[07:46] <autrijus> ask for permission that is.

[07:46] <chip> I shall.  Ironically this was driven by the need for documentation

[07:46] <chip> Doxygen can't parse perl, so I made Perl easier to parse for Doxygen

[07:47] <autrijus> fantastic.

[07:47] <chip> My favorite useless hack:  C< sub foo ($c, *@_) > initializes with a simple C< my $c = shift >

[07:48] * autrijus bows before chip's superior perljutsu

[07:49] <chip> now you're just showing off.  I mean, c'mon, you've got more of Perl 6 than anyone

[07:49] <autrijus> true, I probably can't code it up in perl5 in a couple days :)

[07:49] <chip> it's my first working source filter.  now I gotta make it work with Perl6::Export or Damian will be peeved

[07:50] <autrijus> riight.

[07:50] <autrijus> I have this unfair technical advantage. truth be told, I tried to do pugs in perl5 first

[07:50] <chip> well, we actually have a Plan.  Perl 6 attribute plugin architecture.  Probably over the hill and around the bend, ...

[07:50] <autrijus> but it just can't be done :-/

[07:50] <autrijus> "we" as in the Cabal we? :)

[07:50] <chip> Yeah.  Tell me about it

[07:51] <chip> No, no, just Damian & me, when I discovered P6::Export and realized that P6::Subs (my working name) wouldn't play nice together

[07:51] <chip> s/discovered/read/

[07:52] <chip> Do you know whether "is rw" attaches to the variable name always, even if the declaration is turned around with "of"?

[07:52] <chip> C< $a of Num is rw >?

[07:52] <autrijus> aye.

[07:52] <autrijus> I think so.

[07:52] <chip> My example had reversed polarity from my question.  Is the question yes, or is the example right?

[07:53] <masak> :)

[07:53] <chip> "Do not go to autrijus for counsel..."

[07:56] <autrijus> I think both works.

[07:56] <autrijus> yes. no.

[07:56] <autrijus> perl is great. it contains multitudes.

[07:56] * autrijus grins elvishly

[07:59] * masak just made his first svn ci

[07:59] <autrijus> masak++

[07:59] <masak> :D

[07:59] <autrijus> welcome aboard!

[08:00] <masak> thx. i could hardly sleep last night because of pugs :)

[08:01] <autrijus> all excited?

[08:01] <masak> overly so

[08:01] <autrijus> I know that feeling :)))

[08:01] <masak> bet you do :)

[08:01] <autrijus> so, try reading http://haskell.org/tutorial/ or YAHT when you have some time :)

[08:02] <masak> will do

[08:02] <autrijus> meanwhile, I'm sure the testing and example and p6ification squads will welcome you

[08:02] <masak> lol

[08:03] <autrijus> lunch, brb.

[08:17] <jabbot> pugs - 903 - Test for correct parameter binding

[09:14] <autrijus> poll: which one is more interesting to see it happen today?

[09:15] <autrijus> 1) Perl6 -> Haskell -> C compiler

[09:15] <autrijus> 2) m:p5// Regex

[09:15] <autrijus> I have a beginning of both

[09:15] <autrijus> not sure what to work on.

[09:16] <autrijus> (and compiler = real compiler, not embedded evaluator)

[09:17] <jabbot> pugs - 904 - use array slice rather than temp var

[09:24] <pjcj> I don't mind, since the other will happen tomorrow, right?  ;-)

[09:26] <autrijus> no, tomorrow obra arrives

[09:26] <autrijus> and we will hack perl5 :)

[09:28] <pjcj> perl5 is good too :)  I see regexen as more useful to people wanting to play with perl6, but the compiler as more interesting and newsworthy

[09:31] <autrijus> Go not to pjcj for counsel... :)

[09:34] <pjcj> yeah, my wife gets cross when she asks "a or b" and gets "yes"

[09:50] <autrijus> she should've asked "a xor b"

[09:50] <autrijus> but then you'll still say "yes".

[09:51] <autrijus> so maybe "a instead of b?" is better

[10:13] <Schwern> QUESTION!  Why are many assignments in Test.pm of the := variety?

[10:14] <Schwern>  my $ok := $cond ?? "ok " :: "not ok ";   for example

[10:14] <autrijus> ANSWER! because we don't need destructive assignment.

[10:14] <autrijus> less chance of bug that way,

[10:14] <autrijus> if you assign $ok, that'd be an error.

[10:15] <Schwern> So you're making it constant by aliasing it to one?

[10:15] <autrijus> yes.

[10:15] <Schwern> Seems a round about way of doing it.

[10:15] <Schwern> Shouldn't it be "is const" or something?

[10:15] <autrijus> well, := reads much more natural to me

[10:15] <autrijus> because my mind parses it as "letrec".

[10:15] <Schwern> := just means alias

[10:15] <autrijus> sure.

[10:16] <Schwern> You have to examine the RHS to know its meant to make the LHS constant

[10:16] <autrijus> also, if you don't use $ok

[10:16] <autrijus> then it won't be evaluated.

[10:16] <autrijus> also there is many fun compile time tricks with :=

[10:16] <autrijus> but well, those are not convincing reasons.

[10:16] <autrijus> I'll just say it seemed like a good idea when I wrote it.

[10:16] <Schwern> Wouldn't "is const" take care of that, too, in theory?

[10:16] <Schwern> Fair nuff

[10:16] <autrijus> no, because it still forces evaluation of RHS.

[10:17] <Schwern> I get it

[10:17] <autrijus> a whole class of bugs just went away if people use := instead of = :)

[10:18] <autrijus> "side-effect bugs", that is.

[10:18] <Schwern> Except if you never used $ok... what's the point of defining it? :)

[10:18] * autrijus has been brainwashed:  http://autrijus.org/haskell_brain.html

[10:18] <autrijus> Schwern: well, maybe I only use it in one of the many given/when branches.

[10:19] <autrijus> it's this whole lazy evaluation thing.

[10:21] <Schwern> So my $foo := EXPR is always going to render $foo constant if EXPR returns a constant?

[10:21] <autrijus> yes.

[10:22] <Schwern> Ok, that's easier to understand.

[10:22] <Schwern> Clever

[10:22] <autrijus> =)

[10:24] <Schwern> Also I'm slowly gravitating towards darc

[10:24] <Schwern> s

[10:25] <autrijus> okay. maybe you can help on darcs/svk integration :)

[10:25] <Schwern> Checking out pugs using it instead of SVK right now.

[10:25] <autrijus> oh. then you'll want better log messages.

[10:25] <Schwern> ?

[10:25] <autrijus> currently the pathces are all named "syncup"

[10:25] <Schwern> Oh

[10:25] <Schwern> So the subversion repo is the real one?

[10:25] <autrijus> currently yes.

[10:26] <autrijus> twoway sync planned.

[10:26] <autrijus> need clkao to be around physically

[10:26] <Schwern> Yeah, the darcs folks were saying they had that sort of working

[10:26] <Schwern> http://www.abridgegame.org/pipermail/darcs-users/2005-January/005070.html

[10:28] <Schwern> About the only serious complaint I have about darcs so far is its wacky diff format.

[10:29] <clkao> *yawn*

[10:29] <Schwern> And there's no darcs log... what the hell

[10:29] <clkao> Schwern: btw, svk and svn/perl are both happy with new eu::mm

[10:30] <Schwern> clkao:  Excellent, thanks.

[10:32] <Schwern> And "darcs annotate" is just uselessly gimped unless I'm doing something REALLY wrong

[10:32] <autrijus> I have lots of darcs repo corruptions.

[10:32] <autrijus> it feels like bdb.

[10:32] <autrijus> i.e. when it's corrupted you can't do a damn thing about it.

[10:32] <autrijus> and merge is slow.

[10:33] <autrijus> but when it works it works very good.

[10:34] <Schwern> Is the annotate format really this bad?

[10:34] <autrijus> I don't know.

[10:34] <autrijus> never really used it.

[10:35] <Schwern> Have a look

[10:35] <nothingmuch> morning

[10:36] <autrijus> hey nothingmuch.

[10:39] <clkao> come back use svk? :)

[10:39] <Schwern> I'm going to yell at the darcs folks for a bit.

[10:40] <Schwern> I'll admit the simplicity of setting up a darcs repo has grabbed me.

[10:40] <autrijus> yes!

[10:40] <autrijus> I've pushed co .svk/ for a while now

[10:40] <autrijus> clkao said he is willing to do it post-1.0

[10:40] <Schwern> I don't understand why they went with _darcs instead of .darcs though.

[10:41] <Schwern> Yeah, per checkout .dirs seems less prone to catastrophic failure.

[10:41] <autrijus> except _darcs is prone to rm -rf failure.

[10:41] <nothingmuch> Schwern: the rational in a jiffy is that _darcs is important and because of that is shouldn't be hidden

[10:41] <Schwern> nothingmuch:  That's dumb, you should nevrer have to look inside of it.

[10:42] <autrijus> I agree with Schwern.

[10:42] <nothingmuch> not inside it, at it

[10:42] <Schwern> And most things are already wired to ignore .files

[10:42] <nothingmuch> i agree too

[10:42] <nothingmuch> i'm jos proxying

[10:42] <Schwern> nothingmuch: ... why would I want to look at it?

[10:42] <autrijus> oh ok.

[10:42] <clkao> like rm -rf *

[10:42] <nothingmuch> s/jos/just/

[10:42] <autrijus> I agree with nothingmuch then :)

[10:42] <nothingmuch> size concerns

[10:42] <Schwern> ?

[10:42] <Schwern> Am I going to forget I'm in a darcs repository?

[10:42] <nothingmuch> well, it grows large

[10:42] <nothingmuch> so users should know

[10:42] <Schwern> So am I going to delete it then?

[10:42] <nothingmuch> basically that's it

[10:43] <nothingmuch> i dunno

[10:43] <Schwern> Right.

[10:43] <nothingmuch> again, i'm only proxying ;-)

[10:43] <Schwern> Information with no action.

[10:43] <Schwern> I understand.

[10:43] * nothingmuch would like to see it be compatible. If the user does 'mv _darcs .darcs' then it keeps working

[10:43] <nothingmuch> that way everyone is happy

[10:43] <Schwern> Or specify it in a .darcsrc file.

[10:43] <autrijus> or a _darcsrc file.

[10:44] * autrijus grins

[10:44] <nothingmuch> Schwern: that doesn't work

[10:44] <Schwern> nothingmuch:  It could.

[10:44] <nothingmuch> because how do you know what another repos user's darcsrc says when you get/pull?

[10:44] <Schwern> ~/.darcsrc

[10:44] <Schwern> Global config, not per repo

[10:44] <nothingmuch> ~/.darcs/prefs/default_path

[10:44] <nothingmuch> ;-)

[10:44] <Schwern> Sure

[10:44] <nothingmuch> or whatever

[10:45] <nothingmuch> anywho, it doesn't matter

[10:45] <nothingmuch> because there's still no way to tell what a user's pref was by just looking at the repo

[10:45] <Schwern> ?

[10:45] <nothingmuch> unless your only options are --dot-notation or --underscore-notation

[10:45] <Schwern> I don't get it

[10:45] <nothingmuch> in which case it's just in ~/darcs/defaults for get and init

[10:45] <nothingmuch> errm

[10:45] <nothingmuch> say i darcs get http://some/repo

[10:46] <nothingmuch> darcs looks at http://some/repo/inventory stuff

[10:46] <Schwern> Oh, it gets copied from the repo, right.

[10:46] <nothingmuch> inside of _darcs by default

[10:46] <Schwern> Then yeah, it should look for _darcs and .darcs

[10:46] <nothingmuch> if there are only two options, _darcs and .darcs, then it works

[10:47] <nothingmuch> ooh, it appears that many tests have been modified

[10:47] <nothingmuch> have people been linking? =D

[10:48] <nothingmuch> so anyway, i would like to write the backlink synopsis generating code

[10:48] <nothingmuch> but i don't know where to point the backlinks to

[10:49] <nothingmuch> someone with authority, please decide what split_test_catalog.pl should actually do

[10:49] <clkao> Schwern: so, what do you think svk should steal from darcs?

[10:50] <nothingmuch> and then i think we run catalog_tests.pl t | split_test_catalog.pl test_catalog/; fudge_synopses t test_catalog/

[10:50] <Schwern> clkao:  darcs init

[10:50] <nothingmuch> (unrecord!

[10:50] <clkao> inplace repository you mean ?

[10:50] <Schwern> clkao:  ie. one step repository creation

[10:50] <nothingmuch> unpull)

[10:50] *** cnhackTNT is now known as cnhackTNT|away

[10:50] <Schwern> clkao:  The per change bit of "darcs record"

[10:51] <Schwern> clkao:  I like that I can work on several changes simultaneously and then easily commit them as seperate changes.

[10:51] *** cnhackTNT|away is now known as cnhackTNT

[10:51] <Schwern> clkao:  The fact that "darcs send" is so damned easy.

[10:51] <clkao> uhm, give me a perl unidiff applier.

[10:51] <nothingmuch> ppt should have one, no?

[10:51] <autrijus> ppt's patch.

[10:52] <Schwern> I mean, I got going in darcs in no time.

[10:52] <Schwern> clkao:  No bloody URLs to deal with.

[10:52] <nothingmuch> http://search.cpan.org/~andrewc/Algorithm-Diff-Apply-0.2.3/lib/Algorithm/Diff/Apply.pod

[10:52] <nothingmuch> http://search.cpan.org/~cade/Text-Patch-1.1/Patch.pm

[10:52] <nothingmuch> (that's exactly what you want, i think)

[10:53] <clkao> last time i checked non of them are streamy

[10:53] <clkao> text-patch is new

[10:53] <Schwern> clkao:  Mirroring and localizing is one step (darcs get) rather than several in SVK.

[10:53] <clkao> Schwern: uh? i thought svk cp URL does that in one step?

[10:54] <Schwern> clkao:  One command, many steps

[10:54] <nothingmuch> svk cp should be as simple as svn co for the same thing

[10:54] <Schwern> Where am I mirroring from?  What's the mirror path?  What's the local path?  Where's the checkout directory?

[10:54] <clkao> i thought they all have sensible default?

[10:55] <Schwern> And then there's the mirror vs local repository thing that always seemed like an exposed implementation detail to me.

[10:55] <clkao> or we need svk cp --use-default etc

[10:55] *** cnhackTNT is now known as cnhackTNT|away

[10:55] <Schwern> clkao:  Sure, but its not as simple as: darcs get http://wagner.elixus.org/~autrijus/darcs/pugs/

[10:56] <Schwern> Done.

[10:56] <clkao> how do i just get latest 100 revisions then?

[10:56] <Schwern> Who cares?

[10:56] <Schwern> Some switch

[10:56] <clkao> it can have 100k revision

[10:56] <clkao> hm.

[10:56] <Schwern> If that's the case I'll flip the switch.

[10:57] * clkao looks at autrijus. the interactive stuff wasn't my idea.

[10:57] <Schwern> Or perhaps if SVK detects a large amount of revisions it asks.

[10:57] * autrijus looks at clkao. it was not even possible.

[10:57] <clkao> it can't. it's svn api restriction.

[10:57] <autrijus> you had to mi, and sy, and sm, and co, and up

[10:57] <autrijus> remember? :)

[10:57] <Schwern> I'm going to be a user (ie. dick) here and say "not my problem".

[10:58] <autrijus> maybe we can make it fetch all by default.

[10:58] <autrijus> and local mirror by default

[10:58] <autrijus> and use default names.

[10:58] <autrijus> and you turn on interactive with --interactive.

[10:59] <nothingmuch> autrijus: now that obra is in your time zone can you find another comitbiter?

[10:59] <autrijus> k. I need to run.

[10:59] <autrijus> brb.

[11:00] <clkao> *sigh* http://wagner.elixus.org/~clkao/software.jpg

[11:00] <nothingmuch> i hate softwre most of the time too

[11:00] <nothingmuch> the exceptions are software that is for fun

[11:00] <nothingmuch> and software which I need and actually works when I need it

[11:00] <nothingmuch> like, err, /bin/sh

[11:00] <nothingmuch> and... cat

[11:01] <nothingmuch> ...

[11:14] <malaire> nothingmuch: Are you still interested in porting re_tests to pugs? (If not, I could work on it, but if you want to do it, then I'll find something else to do)

[11:14] <clkao> after darcs get URL, how do i create another feature branch apart from primary local branch?

[11:15] <nothingmuch> malaire: i've been too busy this week to work more than 10 minutes on anything except last night

[11:15] <clkao> I think i can hack together a frontend to resemble all darcs commands.

[11:15] <nothingmuch> so i did not get to it yet

[11:15] <nothingmuch> i think perhaps it's better that you do it

[11:16] <nothingmuch> because my timeline for the short term future does not look very good either

[11:16] <malaire> ok..

[11:16] <nothingmuch> sorry

[11:17] <malaire> no problem, I like working on re-tests. I just don't want to duplicate too much work

[11:17] <nothingmuch> ok

[11:18] <malaire> autrijus: I read about you going to implement m:p5// -- would it be possible to get some support for $-[n] along with captures?

[11:21] <Jonathan_> Morning folks...if I'm going to put some tests in for something that's not working in Pugs yet, do I just use is_todo for them?

[11:28] <malaire> Jonathan_: yes, but you can use other todo_* functions also from Test.pm, whatever seems best

[11:29] <clkao> Schwern: is each darcs working copy exactly a mirror and local branch?

[11:29] <malaire> to be exact, the function is todo_is not is_todo

[11:29] <Schwern> clkao:  I believe so.

[11:29] <Schwern> clkao:  I can make local commits without sending them to the repo and I have full history access.

[11:29] <Schwern> s/repo/master/

[11:30] <clkao> ok, but you can't branch for another feature off the darcs-get'ed working copy? have to get another one?

[11:30] <Schwern> clkao:  Its not so much a working copy as another repository

[11:30] <Schwern> clkao:  I don't know about branching in darcs.  However it works I'd be able to do it.

[11:30] <Schwern> clkao:  A darcs checkout is its own repository.

[11:31] <clkao> yes, i already know that. but what if you want another experimental branch besides the remote tree and the local tree?

[11:31] <Schwern> clkao:  I make local commits in it and, if I want, send them back to the master repo (or another repo)

[11:31] <Schwern> clkao:  I don't know about branching.

[11:31] <Schwern> I think darcs branches by copying

[11:32] <Schwern> "A new branch is just another local copy of the repository."

[11:33] <Schwern> So I just make a copy of my own repostiory (which becomes its own repo) and work on that, moving patches back and forth as I wish.

[11:33] <nothingmuch> and subetha heads around?

[11:33] <clkao> ok.

[11:37] <jabbot> pugs - 905 - Test ?.assuming(params)

[11:37] <Schwern> clkao:  Something else I've just discovered about darcs.  When you do "darcs get http://www.foo.com/dir" its literally just a web spider of a dumb http server.

[11:37] <Schwern> clkao:  No web dav required.

[11:37] <Schwern> clkao:  Since all the repo information is right there in _darcs/

[11:43] <clkao> ya.

[12:14] <nothingmuch> damnit

[12:30] <nothingmuch> forgive me everyone, for i have sinned

[12:31] <nothingmuch> catalog_tests.pl now uses eval

[12:32] <nothingmuch> err, not catalog_tests

[12:32] <nothingmuch> the thing that creates backlinks

[12:44] <elmex> morginig

[12:47] <jabbot> pugs - 906 - Fix link regexes a bit

[14:01] <nothingmuch> pod help, anyone?

[14:01] <nothingmuch> hola gaal

[14:01] <gaal> heya

[14:03] <nothingmuch> i have a dillema about =item L<foo>

[14:03] <nothingmuch> are you pod savvy?

[14:03] <gaal> you talkin' to me? are you talkin' to me?

[14:04] <gaal> cause if you are, unfortunately i'm not really :)

[14:04] <nothingmuch> ok

[14:04] <nothingmuch> bummer

[14:05] <gaal> i guess that'll be my next conversion up

[14:07] <theorbtwo> I'm not POD-savvy either, but I can try to answer anyway.

[14:08] <nothingmuch> =item link $link_count

[14:08] <nothingmuch> well

[14:08] <nothingmuch> the best thing i've come up with is

[14:08] <nothingmuch> L<S04/...>

[14:08] <nothingmuch> this is for two reasons

[14:08] <nothingmuch> =item should be linkable

[14:08] <nothingmuch> and =item should have content, otherrwise it's formatted in a funny way

[14:09] <nothingmuch> because consecutive =items are smushed as alternatives

[14:09] <nothingmuch> but i think that this output is overly verbose

[14:10] <theorbtwo> Yeah, I think the only way to get reasonable output is to output HTML directly.

[14:10] <nothingmuch> uhuh

[14:11] <nothingmuch> well, anywho

[14:11] <nothingmuch> for now lots of pod output is done

[14:11] <nothingmuch> so i'll leave it like this, and rehaul later

[14:11] <theorbtwo> To whit, output <super><a href="...#random" title="whatever"><sup>T</sup></a>.

[14:12] <nothingmuch> actually i mean on the other side

[14:12] <theorbtwo> Then same, but use D instead of T.  Oh, and I forgot the id="" or name="" parameter.

[14:13] <nothingmuch> yeah, html will make this simple

[14:13] <nothingmuch> but i don't want to do it right now, i'd rather do the other stuff first and leave that til lthe end

[14:14] <theorbtwo> Nod.

[14:26] *** cnhackTNT is now known as cnhackTNT|away

[14:27] *** cnhackTNT|away is now known as cnhackTNT

[14:39] <autrijus> greetings lambdacamels!

[14:39] <autrijus> full perl 5 regular expression support is in!

[14:39] <clkao> crazy bastard

[14:39] <autrijus> 'string' =~~ rx:perl5/.../

[14:39] <autrijus> now works.

[14:40] <autrijus> other syntax forms will be worked on later.

[14:40] <autrijus> all captures, $1, $2 etc works.

[14:40] <autrijus> $0 (i.e. $& in perl5) works.

[14:40] <autrijus> with lookahead, lookbehind, lookarounds.

[14:40] <clkao> how far is it for pugs to use p5lib? i want to write darck to wrap around svk.pm

[14:40] <autrijus> clkao: you need to ask larry for that

[14:41] <autrijus> it could be next week. or next month. or next year.

[14:41] <autrijus> because he's not publishing his progress :)

[14:41] <autrijus> there is progress, but we don't know how far.

[14:41] <autrijus> alternatively, work on PPI->Yaml->Pugs in hackatons

[14:41] <autrijus> alternatively, work on Inline::GHC

[14:47] <jabbot> pugs - 907 - * perl 5 regular expressions, with ~~ an

[14:47] <theorbtwo> Wow!

[14:47] * theorbtwo is very impressed.

[14:47] <autrijus> =)

[14:47] <autrijus> I expect a real compiler to take another day or so.

[14:48] <clkao> is it a push -l? takes quite long

[14:49] <autrijus> err, I mean ~~, not =~~

[14:49] <malaire> perlbot, nopaste?

[14:49] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[14:51] <pasteling> "malaire" at 217.119.39.217 pasted "make failure with r907" (32 lines, 1.6K) at http://sial.org/pbot/8363

[14:51] <autrijus> platform?

[14:52] <malaire> linux, x86, GHC 6.4

[14:53] <autrijus> try go to pcre.c

[14:53] <autrijus> and s/register //g

[14:54] <malaire> a moment..

[14:55] <malaire> no change

[14:57] <malaire> I still get exact same error.

[14:57] * autrijus thinks.

[14:58] <autrijus> make it toplevel?

[14:58] <autrijus> I mean

[14:58] <autrijus> nvm, I'll just checkin a fix

[15:00] *** cnhackTNT is now known as cnhackTNT|away

[15:02] <nothingmuch> autrijus: i need some advice

[15:03] <autrijus> nothingmuch: yes?

[15:03] <autrijus> malaire: try again.

[15:03] <nothingmuch> i'm working on the catalog_tests.pl script

[15:03] <nothingmuch> it's parsing our weird link syntax now

[15:03] <nothingmuch> but for linking to actually work we need to standardize how the files will be distributed

[15:04] <autrijus> ok. just for the record, I think t/Synopsis/ no longer makes sense.

[15:04] <theorbtwo> I think it never made sense...

[15:05] <nothingmuch> me neither

[15:05] <nothingmuch> i think we should have catalog_tests.pl t/ output_dir

[15:05] <nothingmuch> where output dir has Synopsis/SXX.{html,pod}

[15:05] <nothingmuch> and t/foo/test_name.{html,pod}

[15:05] <autrijus> it made sense before we have this perl5 like layout.

[15:05] <autrijus> t/Synopsis was the first thing :)

[15:05] <nothingmuch> and backlinks are to L<t::foo::test_name.t>

[15:05] <nothingmuch> heh

[15:06] <nothingmuch> forward links look like L<Synopsis::S01/"Thing">

[15:06] <theorbtwo> I vote for putting the perl design docs in lib/Perl6/[ASE]*

[15:06] <theorbtwo> (When installed, anyway.)

[15:06] * nothingmuch is agnostic

[15:06] <autrijus> so ext/Perl6-Design/

[15:06] <nothingmuch> anywho,

[15:06] <autrijus> or something like that?

[15:06] <nothingmuch> perhaps

[15:06] <malaire> it compiled ok... what was the working syntax? =~~ or ~~

[15:06] <autrijus> ~~

[15:06] <nothingmuch> except that's where the originals are

[15:06] <autrijus> tests welcome.

[15:07] <jabbot> pugs - 908 - * try fix reg. spilling

[15:07] <malaire> my $s = "Test"; $s ~~ rx:perl5/../  -- gives "Segmentation fault"

[15:07] <theorbtwo> Sounds right, autrijus.

[15:07] <nothingmuch> the generated ones should live somehwere generated

[15:07] <autrijus> uh. wow.

[15:07] <autrijus> segfault.

[15:08] <autrijus> nothingmuch: yup. and persumably not under t/

[15:08] <autrijus> out/ or something?

[15:08] <nothingmuch> the user tells the script

[15:08] <autrijus> right.

[15:08] <nothingmuch> and our website will have some path

[15:08] <nothingmuch> but...

[15:08] <theorbtwo> I get link failure -- ghc --make -I. -Isrc -Isrc/pcre -i. -isrc -isrc/pcre -static -Wall -fno-warn-missing-signatures -fno-warn-name-shadowing -o pugs src/Main.hs ... undefined references to pcre_*.

[15:08] <nothingmuch> i'm thinking of being nasty and using Pod::SAX

[15:08] <nothingmuch> or something like that

[15:08] <nothingmuch> to merge the original pod stream

[15:08] <nothingmuch> and our additions

[15:08] <nothingmuch> i'm researching on how else to do this

[15:09] <nothingmuch> (pod object model type stuff would be good)

[15:09] <nothingmuch> but i haven't found much

[15:09] <nothingmuch> or rather, i've found too much

[15:10] <autrijus> hrm.

[15:11] <autrijus> I don't neccessary think merging makes a lot of sense.

[15:11] <autrijus> I'd much rather prefer generated html and links.

[15:11] <theorbtwo> I'd suggest finding the approps section, then inserting the markers where they need to go.

[15:11] * theorbtwo is with autrijus.

[15:11] <nothingmuch> ok

[15:11] <theorbtwo> I'd convert the design docs to HTML, then use HTML::TreeBuilder to do what you want.

[15:11] <nothingmuch> hmm

[15:12] <rg0now> Hi folks!

[15:12] <nothingmuch> theorbtw++ # nice idea

[15:12] <rg0now> might I have a small qusetion

[15:12] <nothingmuch> rg0now: NO!

[15:12] <rg0now> :)

[15:12] <rg0now> Ok, so here I go

[15:12] <nothingmuch> we're busy, can't you see? now go away

[15:13] <nothingmuch> bzZZT!

[15:13] <rg0now> now, you confused me

[15:13] <theorbtwo> You can have all the questions you want, but you'll never know if other people have answers to them unless you ask them.

[15:13] <nothingmuch> ok ok fine

[15:13] <theorbtwo> nothingmuch is attempting to make a joke.

[15:13] <theorbtwo> And not doing a very good job of it.  ;)

[15:13] <rg0now> ok, I get it

[15:13] <rg0now> so, is returning multiple arrays froma sub supported?

[15:14] <rg0now> I mean something like this:     return @first, @second;

[15:14] <rg0now> and eating this like: my(@arr1, @arr2) = test;

[15:14] <rg0now> where tst is the sub

[15:14] <rg0now> at the moment, @arr1 slurps up everything

[15:15] <rg0now> even if it should not...:-) as of S6

[15:15] <autrijus> malaire: try again

[15:15] <autrijus> S6 says it should not?

[15:15] <rg0now> I think so

[15:15] <autrijus> color me surprised.

[15:15] <rg0now> but I can never be sure

[15:16] <autrijus> I thought only := does that, and = always flattens.

[15:16] <rg0now> the same should work with array refs (see the example in E6), but it does not work either

[15:16] <malaire> autrijus: now make is failing again

[15:16] <autrijus> I may also be completely wrong.

[15:16] <autrijus> malaire: same register foo?

[15:16] <malaire> yes

[15:17] <autrijus> oh well.

[15:17] <autrijus> time for plan B.

[15:17] <jabbot> pugs - 909 - * deregister

[15:17] <theorbtwo> r909 still gets link error for me.

[15:17] <nothingmuch> theorbtwo: want to contribue something to make HTMLs from the synopses?

[15:18] <pasteling> "theorbtwo" at 84.245.186.25 pasted "link errors" (59 lines, 3.2K) at http://sial.org/pbot/8364

[15:19] <Khisanth> nothingmuch: aren't those already in HTML?

[15:19] <autrijus> ok. let me try plan B

[15:19] <nothingmuch> well, ont he p6 website they are

[15:20] <nothingmuch> in our tree they aren't

[15:20] <nothingmuch> i'd like to be able to make html -f ext/Perl6-Design/Makefile

[15:20] <malaire> btw, I now have re_tests.t with 1581 todo-tests for rules (some using rx:perl5//), but I'd prefer to commit it only after I get some of it working (just to know the syntax is ok)

[15:22] <autrijus> plan B is committed. try again.

[15:24] <theorbtwo> gcc: pcre.o: No such file or directory

[15:24] <rg0now> ok, I see now, = always flattens, I wanted := as autrijus said (not to mention that := seems to be broken now), so ignore me...:-) 

[15:24] <autrijus> theorbtwo: ugh.

[15:24] <malaire> Linking ...  gcc: pcre.o: No such file or directory

[15:25] <autrijus> ok ok I got it :)

[15:27] <jabbot> pugs - 910 - * plan B

[15:29] <autrijus> try again.

[15:29] <autrijus> hi elmex!

[15:29] <autrijus> elmex: we have p5 regex now!

[15:29] <theorbtwo> Well, we do, but it doesn't compile for most people.  ;)

[15:30] <autrijus> I think it does now :)

[15:30] <elmex> autrijus: WOHOO

[15:30] <elmex> autrijus: that rox

[15:30] <elmex> autrijus: how? via ghc regex es?

[15:30] <autrijus> elmex: no, PCRE

[15:30] <autrijus> elmex: svn up and try it

[15:30] <elmex> autrijus: ah, ffi interface?

[15:30] <autrijus> yeah.

[15:30] <elmex> cool

[15:30] <autrijus> FFI is such a wonderful thing.

[15:30] <autrijus> and when PGE arrives, we'll just have rsc/RRegex/PGE.hs

[15:31] <autrijus> and voila.

[15:31] * autrijus parises the FFI gods

[15:31] <autrijus> praises, even

[15:31] <autrijus> malaire, theorbtwo: how's it compiling?

[15:31] <malaire> Linking ... gcc: pcre.o: No such file or directory

[15:31] <theorbtwo> Same.

[15:31] <autrijus> svn up?

[15:31] <autrijus> or is already latest?

[15:32] <autrijus> I fixed Makefile.PL

[15:32] <autrijus> if still fails, check if src/pcre/pcre.o is there.

[15:32] <malaire> it's latest, r911

[15:33] <autrijus> if not, see if ./pcre.o is there.

[15:33] <autrijus> if it's in either place, copy it to the other place and rerun make.

[15:33] <autrijus> voodoo debugging :)

[15:35] <malaire> I moved src/pcre/pcre.o -> ./pcre.o and linking is OK

[15:35] <theorbtwo> Ah, it needs to be coppied to pcre.o in the root dir of pugs.

[15:35] <malaire> copied, not moved

[15:35] <scw> why is the make command 'ghc --make -o pugs src/Main.hs pcre.o'

[15:35] <elmex> autrijus: you're wonderful ;)

[15:36] <malaire> and simple ~~ seems to be working :)

[15:37] <jabbot> pugs - 911 - * link pcre.o

[15:38] <theorbtwo> ./pugs -e '"foo" ~~ m:perl5/o/ the right syntax?

[15:38] <elmex> autrijus: any knowledge about the speed of pugs with pcre and regexes ?

[15:39] <theorbtwo> Because pugs doesn't think so...

[15:39] <theorbtwo> Oh, rx, not m.

[15:39] <theorbtwo> Now I get a segfault.

[15:40] <elmex> with regex'es there is a lot more pugs can do ;)

[15:40] <autrijus> elmex: every every fast.

[15:40] <autrijus> s/every/very/

[15:41] <autrijus> bad autocompletion.

[15:41] <elmex> autrijus: really? compared to raw c speed?

[15:41] <autrijus> sure. because pcre is raw c ;)

[15:41] <elmex> autrijus: what about the haskell interface around the ffi stuff?

[15:41] <autrijus> GHC compiles down to C.

[15:41] <stevan> morning all

[15:41] <autrijus> so, negligible overhead.

[15:42] <nothingmuch> aren't haskell strings linked lists though?

[15:42] <elmex> autrijus: well, if you put a for (long l = 0; l < MAX_LONG; l++); somewhere it wont be fast C ;)

[15:42] <nothingmuch> or are they special case optimized?

[15:42] <autrijus> nothingmuch: they are almost always optimized.

[15:42] <autrijus> would be crazy if not

[15:42] <nothingmuch> that's good

[15:43] <stevan> nothingmuch: I did a bunch of linking last night, but I am not sure I did it correctly

[15:43] <nothingmuch> stevan++

[15:43] * stevan needs to read the Synopsis again

[15:43] <nothingmuch> yes, i saw

[15:43] <stevan> nothingmuch++

[15:43] <nothingmuch> it looks right

[15:43] <stevan> cool

[15:43] <nothingmuch> now, i'm going through trying to fudge the output a bit

[15:43] <stevan> I think Pod::SAX is probably a good idea

[15:44] <stevan> event based stream parsing ++

[15:44] <nothingmuch> stevan: i think it's too much trouble though

[15:44] <elmex> autrijus: slow programs can be written also in C ;)

[15:44] <nothingmuch> theorbtwo had a good ide

[15:44] <stevan> nothingmuch: I have never use it actually so I cant really say

[15:44] <stevan> but I like SAX

[15:44] <stevan> Coltrane is my favorite ;)

[15:45] <theorbtwo> nm, I'll code it up if you tell me what I should work off of.

[15:45] <nothingmuch> sax is nice, yes =)

[15:45] <nothingmuch> but i like it only when I'm not being Q&D

[15:45] <nothingmuch> like when i want to use SMP, or if latency is an issue, or if i need to handle big things

[15:45] <nothingmuch> theorbtwo: i would like to have a reliable way to get HTML from the Sxx.pod files

[15:45] <stevan> autrijus: I am getting a make error on OSX with the new reg-exp stuff

[15:45] <nothingmuch> like the ones on http://dev.perl.org/perl6/synopsis/sxx.html

[15:46] <nothingmuch> maybe with their pretty CSS stolen

[15:46] <nothingmuch> theoretically this is only pod2html

[15:46] <nothingmuch> but i've never gotten along with it

[15:46] <theorbtwo> Yeah, that's what I was going to say.

[15:46] <autrijus> it's Pod::Simple

[15:46] <autrijus> better than pod2html.

[15:46] <autrijus> but anyway.

[15:46] <stevan> autrijus: if you get reg-exp working, I will to re-work File::Spec so we can actually use it 

[15:46] <nothingmuch> well, same thing as far as i'm concerned

[15:46] <autrijus> folks, please rm pcre.o and svn up and retry building

[15:47] <jabbot> pugs - 912 - * add pcre makefile

[15:47] <autrijus> stevan: that'd be great.

[15:47] <theorbtwo> rm'd all of the pcre.os, make clean, perl Makefile.PL, make...

[15:48] <stevan> autrijus: it uses classes, but I can convert it to modules for now

[15:48] <stevan> without VMS support of course :P

[15:48] <autrijus> sure :P

[15:49] <theorbtwo> ...makes, but still segfaults on actually tying to do anything with the RE engine.

[15:49] <theorbtwo> /tmp/ghc16867.hc: In function `RRegexziPCRE_zdwccall_entry': :519: warning: assignment discards qualifiers from pointer target type

[15:50] <autrijus> that's the only warning?

[15:50] <theorbtwo> Yep.

[15:50] <stevan> ok, I am outta here, I will be back later on &

[15:50] <autrijus> do you have gdb fu to see the error? :)

[15:50] <theorbtwo> Is there any way to compile that will make gdb able to give useful stack traces?

[15:51] <theorbtwo> Not really, no.  pcre_stack_malloc is what bt #0 shows, but after that it's all ??s.

[15:51] <autrijus> inking.

[15:51] <autrijus> thinking.

[15:52] <autrijus> hm.

[15:52] <autrijus> can you download pcre by yourself

[15:52] <autrijus> run configure

[15:53] <autrijus> and compare config.h with src/pcre/config.h in pugs?

[15:53] <autrijus> I'm trying to see a way out of requiring autoconf.

[15:54] <autrijus> wow. the tibetan test in t/syntax/unicode.t fails

[15:54] <autrijus> because it uses $༢

[15:54] <autrijus> and that's a digit in tibetan

[15:55] <autrijus> so we try to use it as $1 $2 etc

[15:55] <nothingmuch> hah!

[15:55] <autrijus> and that fails

[15:55] <nothingmuch> i love for-free correctness

[15:55] <nothingmuch> it makes me feel fuzzy on the inside

[15:55] <nothingmuch> but not like i have hairballs, in a good way

[15:56] <autrijus> :)

[15:56] <theorbtwo> LOL

[15:56] <elmex> autrijus: why a perl 6 interpreter, why didn't you chosse a VM as backend ? ;-) *G*

[15:56] <autrijus> elmex: oh. you wasn't around earlier

[15:56] <autrijus> I was asking what I should do today: a Compile.hs or a RRegex.hs

[15:56] <elmex> autrijus: me doesn't change anything ;)

[15:56] <autrijus> because I think I can do either in an afternoon

[15:56] <autrijus> and someone says regex is more practical

[15:56] <autrijus> so here we are.

[15:57] <elmex> well, regex does rcok

[15:57] <autrijus> so another afternoon :)

[15:57] <autrijus> and we'll have a Compile.hs.

[15:57] <nothingmuch> autrijus: you mean, err, like rules?

[15:57] <nothingmuch> only a subset of them?

[15:57] <elmex> korc... erm... kroc... ack... rokc...ar... rock

[15:57] <autrijus> nothingmuch: RRegex is p5 regex.

[15:57] <autrijus> nothingmuch: we have it now :)

[15:57] <autrijus> except some people segfaults.

[15:57] <autrijus> but I'm fixing it.

[15:57] <nothingmuch> ah, you were asking

[15:57] <nothingmuch> i thought you were asking now

[15:58] <elmex> i love segfaults, they are so easyly to debug with gdb ;)

[15:58] <theorbtwo> Huh?  Looks byte-for-byte identical.

[15:58] <malaire> autrijus: should I commit my re_tests.t file, even if pcre dies on some tests?

[15:58] <malaire> e.g. C< "ab" ~~ rx:perl5/a\(*b/ > gives pugs: user error (PCRE Regular Expression Error: a(b   ^ missing ))

[15:58] <autrijus> theorbtwo: huh. so compile your pcretest

[15:58] <autrijus> theorbtwo: and does it secfault?

[15:58] <autrijus> wait wait wait.

[15:58] <autrijus> aha. that's a pugs bug.

[15:58] <autrijus> interpolation is limited to vars

[15:58] <autrijus> not backslashes

[16:00] <malaire> should I commit those tests? (they are within eval '', but that error still quits the testing)

[16:00] *** rafl_ is now known as rafl

[16:01] <theorbtwo> Looks like pcretest works.

[16:03] <autrijus> malaire: I fixed it.

[16:03] <autrijus> so please commit ahead

[16:04] <autrijus> r913 is my fix.

[16:05] <autrijus> theorbtwo: ok. so it's FFI

[16:05] <malaire> I'll do quick test first..

[16:05] <autrijus> theorbtwo: can you grab http://repetae.net/john/computer/haskell/hsregex/

[16:05] <autrijus> and see if _that_ works?

[16:07] <gaal> hello and autrijus++, no **, for RRegex!

[16:07] <jabbot> pugs - 913 - * escapes in p5 regex is passed to pcre,

[16:07] <autrijus> :D

[16:07] <theorbtwo> Blink, blink...

[16:08] <theorbtwo> Double-#define of HAVE_REGEX_H, then a missing pcre/pcre.h... even after I install libpcre3-dev

[16:08] <theorbtwo> Oh, also, tlk: command not found.

[16:08] <autrijus> :(

[16:08] <autrijus> wow.

[16:08] <autrijus> that's something.

[16:08] <autrijus> blink indeed.

[16:09] <autrijus> try passing -L ?

[16:09] <autrijus> err -I

[16:09] <theorbtwo> Looks like I have /usr/include/pcre.h and it expects <pcre/pcre.h>

[16:09] <autrijus> hand fix then.

[16:11] <theorbtwo> Did, works.

[16:11] <theorbtwo> With warnings as before.

[16:13] <autrijus> but no segfaults.

[16:13] <malaire> ok, few more tests coming in...

[16:14] <malaire> (if you plan on doing "make test", take good breath and relax -- it *will* take some time)

[16:14] <autrijus> ok. now to find a poem to RRegex.

[16:14] <malaire> r914 (and now I need to go off until Monday...)

[16:14] <autrijus> A king he was on carven throne

[16:14] <autrijus> In many-pillared halls of stone

[16:14] <autrijus> With golden roof and silver floor,

[16:14] <autrijus> And runes of power upon the door...

[16:17] <jabbot> pugs - 915 - * Licenses, poetry, the usual deal.

[16:17] <jabbot> pugs - 914 - Few tests for rules, 1581 to be exact

[16:17] <autrijus> er.

[16:17] <autrijus> wow.

[16:17] * autrijus is at a loss of words

[16:19] <autrijus> uhm. someone planning to unTOTO the passing ones?

[16:19] <autrijus> and comment out the p6 rules for now?

[16:19] <autrijus> (just to preserve sanity until 6.283)

[16:19] <autrijus> unTODO, even

[16:19] <autrijus> I need to 1)journal 2)sleep.

[16:20] <autrijus> theorbtwo: sorry for pugs still segfaulting for you. :-( will definitely look tomorrow

[16:21] <theorbtwo> No prob.

[16:21] <theorbtwo> Sleep well.

[16:21] <autrijus> thanks!

[16:36] <nothingmuch> anybody know of a cheap mkdir -p in perl?

[16:36] <nothingmuch> i have some tricks that keep getting better

[16:36] <nothingmuch> but i never like them

[16:36] <Limbic_Region> there's a module that does that

[16:36] <gaal> nothing: split on /, create all sections failing silently

[16:36] <gaal> or file::path, yes

[16:37] <jabbot> pugs - 917 - * disable p6 rules tests for now.

[16:37] <jabbot> pugs - 916 - * move p5 regex parts out

[16:37] <nothingmuch> perlbot nopaste

[16:37] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[16:38] <gaal> (or doing an incremental -d test)

[16:38] <gaal> it's actually fun to implement in functional style

[16:40] <nothingmuch> File::Path it is

[16:43] <gaal> you get this warning too with latest r?

[16:43] <gaal> Chasing modules from: src/Main.hs 

[16:43] <gaal> Compiling RRegex.PCRE      ( src/RRegex/PCRE.hs, src/RRegex/PCRE.o ) 

[16:43] <autrijus> what warning?

[16:44] <autrijus> journal up, I'm going to sleep now. :)

[16:44] <gaal> warning: assignment discards qualifiers from pointer target type

[16:44] <gaal> but go to sleep :)

[16:44] <autrijus> right. 

[16:44] <autrijus> does it cause segfault?

[16:44] <autrijus> try cd into src/pcre

[16:44] <autrijus> and do a 

[16:44] <gaal> still compiling

[16:44] <Limbic_Region> sleep well autrijus

[16:44] <autrijus> perl -pi -e's/register //g' *

[16:44] <autrijus> and see if that fixes it

[16:44] <autrijus> if yes, commit it

[16:44] <autrijus> or it may be unsignedness.

[16:44] <autrijus> good night!

[16:44] <autrijus> &

[16:45] <gaal> ok, autrijus, but please sleep :)

[16:46] <nothingmuch> ok, i have something to share

[16:47] <gaal> k

[16:47] <gaal> whoa, many many new tests!

[16:47] <gaal> oh, it's just reorg -> builtins/

[16:48] * gaal has been out of things for so long! like, 30 hours

[16:48] <nothingmuch> hehe

[16:50] <Limbic_Region> right - anyone watching Pugs development will have to rethink the whole "Rome wasn't built in a day" thing

[16:51] <gaal> nothing: is &todo_is yours? i'm getting a haskell error about it in t/rules/perl5

[16:52] <gaal> or did autrijus say he was deferring that?

[16:52] <nothingmuch> gaal: i todo_is is pretty old

[16:52] <gaal> but it looks like a haskell todo_is

[16:52] <nothingmuch> but t/rules/perl5 is new, and malaire should know about it

[16:52] <gaal> no sorry

[16:52] <nothingmuch> then i really don't know

[16:52] <gaal> i'm undercaffinated

[16:52] <nothingmuch> i've been working on tests catalogging

[16:53] <nothingmuch> so i'm a bit out of date myself ;-)

[16:53] <gaal> it looks like a use problem, probably

[16:53] <gaal> let me unconfuse myself a but

[16:53] <gaal> bit

[16:57] <gaal> beh, there's a random death there, apparently it doesn't parse very well :) but there are no coordinates, i'll try binary searching for the problem.

[16:57] <gaal> vi++

[16:59] <gaal> well, that binary search would have been a little useless, since it fails already in the first test.

[16:59] <gaal> good thing i did a sanity test first :) (890 tests!)

[17:00] <gaal> nothingmuch, you wanted tyo share sometihng before?

[17:00] <nothingmuch> gaal: err, broke it again in the meanwhile

[17:00] <nothingmuch> give me 10 mins

[17:00] <nothingmuch> this is with pod output backend

[17:00] <nothingmuch> i'm not doing HTML yet

[17:00] <nothingmuch> for HTML i'd like a more Devel::Cover type output

[17:01] <gaal> but he went to sleep till monday.

[17:01] <nothingmuch> who? what? where?

[17:03] <gaal> sorry, that referred to malaire knowing about the parsefails, my scrollbar was wrongly positioned

[17:05] <nothingmuch> ah

[17:05] <gaal> i don't get it. earlier i mentioned a warning and autrijus recommended going to src/RRegex and s/register//ing the code. i did  a grep first, and the word register only occurs in an object file, nowhere in the source.  must be coming from a library?

[17:05] <gaal> ah, scratch that

[17:05] <gaal> he said src/prce, not src/RRegex

[17:07] <gaal> the s/// didn't help, FWIW

[17:35] <nothingmuch> good food... mme

[17:35] <gaal> food's a gopod idea, and my cat agrees.

[18:04] *** Aankh|Clone is now known as Aankhen``

[18:41] *** cnhackTNT is now known as cnhackTNT|zZZ

[19:02] <elmex> talk

[19:02] <gaal> blah blah blah

[19:02] <elmex> hmm

[19:02] <elmex> not much information in that sentence

[19:03] <gaal> "0 but true"

[19:06] <elmex> ;(

[19:08] <gaal> what information are you seeking?

[19:09] <elmex> entertaining talk about pugs

[19:09] * bd_ has a patch for elsif support - anyone interested? :)

[19:09] <bd_> http://bd.beginyourfear.com/~bdonlan/pugs-elsif.patch

[19:10] <elmex> hmm, why no t commit it?

[19:10] <bd_> I don't have committer access

[19:10] <elmex> bd_: get svn access, ask i.e. autrijus for it

[19:10] <bd_> So, I'm placing it here for someone with committer access to see it

[19:10] <gaal> ooh, bd_, cool. does the patch come with tests? there are no tests for elsif, embarrasingly

[19:11] <bd_> gaal: Yes, it has 16 tests for if...elsif, if...elsif...else, unless..elsif, and unless...elsif...else

[19:11] <gaal> bd_++

[19:11] <elmex> wow

[19:11] * gaal tries patch

[19:13] <bd_> I'm a bit new as haskell and such, so feel free to point out if my style is lacking or whatever :)

[19:13] <bd_> at*

[19:14] <gaal> bd_, i'm not a haskell hacker mylsef but if it runs here and passes the tests i'll check it in and the gang can review it when they wake up

[19:14] <bd_> okay

[19:15] <elmex> it's so early ...

[19:16] <gaal> not in tw

[19:16] <gaal> GMT+7, i think

[19:16] <bd_> It's 2pm where I am :)

[19:19] <gaal> uh, i'm new to subversion/svk, how do i apply your patch? :) (i haven't had svk itself installed till now)

[19:20] <gaal> --my tree is pure svn

[19:20] <bd_> you can just use patch

[19:20] <bd_> the svk block is optional

[19:20] <gaal> k

[19:21] <bd_> tbqh, I only know how to generate svk patchblocks, not how to apply them :)

[19:21] <bd_> but anyway I'll just kill my local branch once the patch is merged so I don't need to worry about mergng

[19:21] <bd_> merging*

[19:23] <gaal> linking takes ages on this machine :(

[19:25] <nothingmuch> yuck, i hate bad code

[19:25] <gaal> r918, ++bd_

[19:26] <bd_> thanks :)

[19:26] <gaal> bd_, talk to autrijus tomorrow (your evening) about commit privs

[19:26] <gaal> uh, your this evening that is

[19:26] <gaal> which will be his tomorrow

[19:26] <nothingmuch> or obra, or bestian, or hcchien

[19:27] <gaal> and thank *you* :)

[19:27] <jabbot> pugs - 918 - bd_'s elsif patch

[19:27] <bd_> okay. In the meantime I'll look at some todo tests maybe

[19:27] <nothingmuch> god damnit, i hate cargo culting

[19:27] <nothingmuch> i hate arbitrary decisions that don't make sense

[19:28] <nothingmuch> i hate artificial limitations that make utility code useless

[19:28] <gaal> nothingmuch in a good mood :)

[19:28] <gaal> ! the music stopped!

[19:29] <nothingmuch> you don't want to know... =P

[19:29] <nothingmuch> the good news

[19:30] <nothingmuch> who wants to see the backlinks in html?

[19:31] <gaal> nm, i'm out of that debate - don't think i understand enough.

[19:31] <nothingmuch> it's really simple now

[19:31] <nothingmuch> one second

[19:32] <gaal> nm: i want to aggregate several comparisons in one ok() test. is there a neat way? the comparisons are deep.

[19:32] <nothingmuch> http://nothingmuch.woobling.org/pugs_test_status/

[19:33] <gaal> oh, and i'm in perl5 right now.

[19:33] <nothingmuch> is_deeply

[19:33] <nothingmuch> from Test::More

[19:33] <nothingmuch> ah, you're in luckl

[19:33] <nothingmuch> you don't have to port it ;-)

[19:33] <nothingmuch> anyway, in that link, start browsing by synopsis

[19:34] <gaal> "description: got the value we expected" x 1000 is kinda boring :)

[19:34] <gaal> (that was re: your link)

[19:34] <gaal> but is_deeply _is_ the test

[19:34] <gaal> i want to do something like

[19:34] <gaal> my @problems = grep { comparison failed test } @things_to_compare;

[19:35] <gaal> ok(!@problems) or diag (@problems)

[19:35] <nothingmuch> gaal: tell whoever wrote the test that description is boring

[19:35] <nothingmuch> http://nothingmuch.woobling.org/pugs_test_status/Synopsis/S06.html#Blocks

[19:35] <nothingmuch> Test::Deep is smarter than Test::More

[19:35] <nothingmuch> and it has an eq_deeply

[19:35] <metaperl> Test::More has is_deeply doesn't it?

[19:35] <nothingmuch> i think it's reporting will make you happier

[19:35] <gaal> this is quite nifty, actually, nm!

[19:36] <nothingmuch> metaperl: appearantly that's not good enough

[19:36] <kungfuftr> Test::Plan++ # lovely

[19:37] <gaal> BTW: if anyone here has mingw and wants to fix pcre/RRegex there, i'd be much obliged :)

[19:37] <nothingmuch> kungfuftr++; # good link

[19:38] <kungfuftr> seems dead, but been a fair bit of cvs activity recently

[19:38] <gaal> it not building there forces me to use the slow machine and violates impatience :)

[19:38] <kungfuftr> bah

[19:38] <kungfuftr> wrong chan

[19:38] <kungfuftr> =0)

[19:38] <kungfuftr> nothingmuch: which link?

[19:38] <nothingmuch> Test::Plan

[19:38] <kungfuftr> ah

[19:38] * gaal could never ever understand how hardcore ircers listen on more than one channel

[19:39] <nothingmuch> damnit, bug in s06

[19:39] <nothingmuch> sort o

[19:39] <nothingmuch> f

[19:39] <kungfuftr> nothingmuch: http://kungfuftr.com/code/mozilla/search/

[19:39] <kungfuftr> also handy

[19:40] <nothingmuch> L<Sxx/""This is a title""> doesn't work, nor does L<SXX/"\"This is a title\"">, and neither does E<>

[19:40] <nothingmuch> how the hell can you link to =head "This is a title"?

[19:40] <nothingmuch> kungfuftr: /me uses safari. it's isn't as flexible, but it's much faster on my aging laptop

[19:40] <gaal> Xanadu?

[19:41] <gaal> kungfuftr, why not use the cool url quicksearch feature?

[19:43] <nothingmuch> stevan: ping

[19:44] <gaal> nm: test::deep carries two dependencies :( will we have something like it in pugs Test?

[19:45] <nothingmuch> pugs test? err, maybe

[19:45] <nothingmuch> probably not soon

[19:45] <nothingmuch> it's a big thing to port

[19:45] <nothingmuch> although it should be trivial to port given the current status

[19:45] <jabbot> nothingmuch: thou speakst also ye olde English?

[19:45] <gaal> okay, brief status on my part:

[19:46] <nothingmuch> does jabbot come with a volume dial?

[19:46] <gaal> after discussing the p6 command line the other day, i've been looking into Getopt::Declare

[19:47] <nothingmuch> i don't like things that parse strings unnecessarily

[19:47] <nothingmuch> they seem breakable

[19:48] <nothingmuch> but this one... errm. I dunnoh.

[19:48] <nothingmuch> i've always had mixed feelings, but never used it.

[19:48] <gaal> (we decided pure bsd or gnu getopt wasn't powerful enough; and i proposed to see if G:D was powerful enough, and maybe port it to haskell. Autrijust had the brilliant idea of having pugs parse its own command line using an embedded *perl6* g:d.)

[19:49] <gaal> so, i wanted to test if g:d could indeed parse p5's command line, yes?

[19:49] <gaal> and i found that probably it could

[19:49] <nothingmuch> hmm

[19:49] <gaal> but both are comples

[19:49] <gaal> complex

[19:49] <gaal> and g:d doesn't have a test suite :)

[19:49] <gaal> so first off i've been writing a p5 command line g:d spec

[19:50] <gaal> and writing a test suite for that spec

[19:50] <nothingmuch> ok, so make perlrun into a quick test suite for g:d

[19:50] <nothingmuch> submit it to dconway

[19:50] <gaal> now, p5's command line is *a good start* for a g:d test suite

[19:50] <gaal> heh

[19:50] <nothingmuch> how is it passing so far?

[19:51] <gaal> well, it's not completely *running* so far, because i wanted to organize the test around a declerative spec too

[19:52] <gaal> check_parse($_) for @tests,

[19:52] <gaal> where each $_ contains a command line, the options it expects and those that it doesn't, etc.

[19:53] <gaal> there are lots of bits and pieces -- eg should anythign of the comand line not be parsed? sure: everything after the options turns into the *script's* @ARGV, and so on

[19:53] <gaal> plus if there are parse errors, make a bid on what they should be

[19:54] <gaal> (btw, g:d currently diags to stderr so i'll have to wrap that or hack it to give me the erorrs where i want them)

[19:55] <nothingmuch> Test::Output should help yyou

[19:55] <gaal> so i need some machienery to do these tests

[19:55] <nothingmuch> err, IMHO if you need the tools, don't be shy with dependancies

[19:56] <gaal> ah, keep 'em coming

[19:56] <nothingmuch> use Test::Deep

[19:56] <nothingmuch> itdoes the job, and it does it *very* very well

[19:56] <gaal> ok

[19:56] <gaal> tools++ of course

[19:57] <gaal> but it looks like if we decide to use a p6 version of getopt::declare for pugs own command line parsing, we're in for hella lot of work!

[19:57] <gaal> port: g:d itself

[19:57] <nothingmuch> @tests is a { str => "-a foo -absa", declaration => "", expected => <something describing the results?> }

[19:57] <gaal> write: tests for it

[19:57] <nothingmuch> yes, it seems very daunting

[19:57] <gaal> port: tools for the tests

[19:57] <gaal> but very much fun

[19:58] <gaal> actually str is no good

[19:58] <gaal> because getopt "really" gets an array from originating from the shell (or whoever called exec*)

[19:58] <gaal> so you need str => [ ]

[19:59] <gaal> but yeah, that's the idea

[19:59] <gaal> well, @test is an [ ] of those specs

[19:59] <gaal> yeah

[20:00] <nothingmuch> VM: 6.07G

[20:00] <nothingmuch> damnit

[20:00] <nothingmuch> DAMNIT!:  5117 perl5.9.1   31.9% 50:39.35   1    13   818   619M+ 1.35M  71.7M+ 2.06G 

[20:00] <gaal> not sure i like the interface of test::output

[20:01] <gaal> um

[20:01] <gaal> is that for like perl -e 'print grep $$, `ps`' ?

[20:02] <nothingmuch> no, that's the CPAN shell

[20:02] <gaal> holding all of cpan's metadata

[20:02] <nothingmuch> i don't like that

[20:02] <nothingmuch> anyway, time for reboot

[20:02] <gaal> they will so need an sqlite backend soon

[20:02] <nothingmuch> ran out of disk soon

[20:09] <hide> gaal: what's about the interface of Test::Output do you not like?

[20:11] <gaal> i need something that locally captures std(err|out) into a var; right now i want to test what something() returned, THEN i'd wnat to test its return value.

[20:11] <gaal> er

[20:11] <gaal> it's prints, sorry

[20:12] <hide> use stderr_from, or stdout_from

[20:12] <hide> or ($stdout,$stderr)=output_from

[20:13] <gaal> ah, i missed that -- thanks

[20:13] <gaal> cool.

[20:14] <gaal> what perl does this require?

[20:14] <hide> I've only tested it on 5.8.x

[20:14] <gaal> fer sure won't work before 5.6

[20:14] <hide> looks like it passed a 5.6.0 test

[20:15] <gaal> but i don't think we're targeting that right now :)

[20:15] <gaal> nice. okay, i'll be using it then.

[20:15] <gaal> hide++

[20:15] <hide> my gaol is to add it to pugs

[20:15] <hide> goal even

[20:15] <gaal> gaol is a peculiar word, btw.

[20:16] <gaal> British folks will know it's pronounced like 'jail'

[20:16] <gaal> but that's so surprising!

[20:16] <integral> it is?

[20:16] <vladtz> isn it

[20:17] <gaal> indeed it is. http://www.m-w.com/cgi-bin/dictionary?book=Dictionary&va=gaol&x=0&y=0

[20:17] <theorbtwo> It's been my experince that it is not, but it means the same thing.

[20:18] * integral was surprised that it was surprising, not the pronounciation :-P

[20:20] <vladtz> I just got 918, lots of tests fail, are you experiencing the same?

[20:20] <gaal> how many is lots?

[20:21] <gaal> there are known fails.

[20:21] <vladtz> 15/90 scripts, 36/1500+

[20:22] <gaal> that's what i'm getting too (more or less: my suite is still running)

[20:23] <gaal> i think it's "okay"; many things added lately.

[20:24] <vladtz> well itś [probably better to let broken things be broken instead of turning them back into todoś

[20:26] <gaal> mpd++

[20:26] <gaal> http://musicpd.org/

[20:39] <stevan> nothingmuch: ping

[20:39] <nothingmuch> http://nothingmuch.woobling.org/pugs_test_status/

[20:39] <stevan> yes I saw

[20:39] <stevan> nothingmuch++

[20:40] <nothingmuch> it's horrible, horrible, but ugly, disgusting code

[20:40] <nothingmuch> i hate Pod::Simple now

[20:40] <stevan> who cares about the code

[20:40] <nothingmuch> it's completely unreadable

[20:40] <stevan> I would not expect it to be

[20:40] <stevan> :)

[20:40] <nothingmuch> it is filled with $STUPIDLY_NAMED_GLOBALS

[20:40] <nothingmuch> and the oddest control flow i've ever seen

[20:41] <gaal> $STUPIDLY_NAMED_GLOBALS += $ESPECIALLY_IF_THEY_DONT_MEAN_WHAT_THEY_SAY;

[20:41] <nothingmuch> so anyway, i'd like a see session, to clean it up a bit

[20:41] <nothingmuch> before i check it in

[20:42] <gaal> ($ESPECIALLY_IF_THEY_DONT_MEAN_WHAT_THEY_SAY is negative, you see)

[20:42] <nothingmuch> and after the checkin

[20:42] <nothingmuch> i'd like to make it use HTML directly

[20:42] <gaal> with spiffy CSS it will be very beautifoul

[20:42] <nothingmuch> gaal: CSS does not concern me much... we can just steal it from dev.perl.org

[20:42] <nothingmuch> it probably also uses Pod::Simple

[20:42] <vladtz> and it would be nice if you could see pass or fail at a galnce...

[20:43] <vladtz> s/al/la/

[20:43] <gaal> yay, that woud be cute indeed

[20:43] <stevan> nothingmuch: I cant do a SEE session now

[20:43] <stevan> why dont you check in and I will fiddle with it later

[20:43] <nothingmuch> vladtz: errm, in the results?

[20:43] <stevan> I promise not to hold the code against you

[20:43] <nothingmuch> they take too long to generate

[20:43] <gaal> and have test::harness listen on a high port and you can point your browser to localhost:l337 and see the green add up

[20:44] <vladtz> in the overview, and in the indivdual test as well, why not?

[20:44] * stevan wants to start writing some oo tests soon

[20:45] <nothingmuch> vladtz: i have a slow going pet project to generalize Test::Harness into an object that can get commands and dispatch events

[20:45] <nothingmuch> which can then be wrapped with a thin daemon

[20:45] <nothingmuch> thus enabling crap like this to be easier

[20:45] <nothingmuch> vladtz: the correlation of the data is hard

[20:45] <vladtz> it need not be done overnight

[20:46] <nothingmuch> vladtz: conceptually if you have a nice way to do it, why not

[20:46] <nothingmuch> but i don't see how to make the link, and not lose out on a lot

[20:48] <vladtz> test::harness does have the info (from what I see in the test summary), combining it might be tough I agree

[20:49] <elmex> hmpf

[20:51] <vladtz> bye bye

[20:51] <gaal> bye vladtz

[20:51] <gaal> too slow :)

[20:57] <elmex> hmm

[20:58] <gaal> hey elmex, what's up?

[20:59] <elmex> dunno... i'm sitting here listening to mp3's of an old friend and my mind is chewing a problem about a private project... and i wonder whether i get sick within next days, not feelin that well

[20:59] <elmex> and i feel a pity that my haskell skills are so bad

[21:00] <nothingmuch> r919

[21:00] <gaal> there's hella lot to be doing in t/

[21:01] <elmex> and i wonder whether there is also hell a lot to be doing in pugs itself...

[21:01] <elmex> besides the tests

[21:01] <gaal> the tests are supporting very rapid development, so they're important

[21:02] <gaal> plus, you get to write in perl6, not haskell

[21:02] <gaal> :)

[21:02] <elmex> i hate tests... 

[21:02] <gaal> so port a module

[21:02] <elmex> i don't know what to test

[21:03] <elmex> echo "#!/usr/bin/push; use v5;"; cat FavoritePerl5Module.pm >> Perl6Module.pm ;-)

[21:03] <elmex> s/push/pugs/

[21:04] <gaal> heh

[21:04] <elmex> btw. for a highlevel vm, whats better, stackbased or registerbased?

[21:05] <gaal> *shrug* outside my field of competence

[21:05] <integral> stack based means you don't have to do register allocation which is rather tricky

[21:05] <elmex> integral: yes, thats why i tend to think about a stack... it's easier...  and maybe as fast if you do it clever...

[21:06] <integral> there's small tricks that make stacks faster, like how you allocate them

[21:06] <elmex> i guess i will do that..

[21:06] <lumi_> Hi

[21:06] <integral> OTOH quite a few virtual machines just use chained frames of variables, which makes continuations easy

[21:06] <gaal> hi lumi_

[21:06] <nothingmuch> hola lumi

[21:06] <theorbtwo> OTOH, register-based means you can apply lots and lots of research into how to optimize things on real machines, which is why parrot is register-based.

[21:07] <theorbtwo> (Mostly.)

[21:07] <jabbot> pugs - 919 - Now creates a tree of pods, with bidirec

[21:07] <lumi_> I have a thought about the linkin'

[21:07] <jabbot> lumi_: thou speakst also ye olde English?

[21:07] <nothingmuch> damnit jabbot!

[21:07] <lumi_> A bot digs its way towards /ignore

[21:07] <elmex> theorbtwo: i just don't understand why parrot limits itself to a limited number of registerts

[21:08] <lumi_> If the test thing could output to some file: "$filename $line $pass" and then if it exists you can merge it in the html

[21:08] <theorbtwo> I don't 100% understand it myself.

[21:08] <elmex> ah, i know how to pass the data... lol

[21:08] <lumi_> I think that's the simplest way

[21:09] <theorbtwo> Blink, blink... nm, should catalog_tests spew warnings?

[21:10] <elmex> theorbtwo:  i don't see the point with limited registers in parrot... why make a extra-layer with PASM and IMCC? it's imho not the simplest way to limit myself to few registers and then do registerallocations all myself for those... well... i'm no expert...

[21:11] <lumi_> Also, and not to pick any nits, but that would be middle English and not old English

[21:11] <theorbtwo> nothingmuch?

[21:11] <jabbot> theorbtwo: nothingmuch is attempting to make a joke.

[21:12] <nothingmuch> theorbtwo: sorry

[21:12] <nothingmuch> yes

[21:12] <nothingmuch> those are links it couldn't parse

[21:12] <nothingmuch> or couldn't find in the synopses

[21:13] <gaal> i must be too sleepy. why is this a syntax error?     map { "-$_" => "-$_" } split //, $args;

[21:13] <theorbtwo> Not just those, a lot of Use of uninitialized value in substitution (s///) at /usr/share/perl/5.8/Pod/ParseUtils.pm line 59[01].

[21:13] <nothingmuch> ah

[21:13] <nothingmuch> i had to fix that

[21:13] <nothingmuch> vim that file

[21:13] <nothingmuch> and s/$text/$node/

[21:14] <nothingmuch> so much for use strict... *sigh*

[21:14] <gaal> beh :/

[21:14] <theorbtwo> Edit Pod::ParseUtils ?

[21:15] <theorbtwo> Err... yep, looks like it...

[21:15] <nothingmuch> uhuh

[21:15] <gaal> why doesn't map like me?

[21:16] <gaal> or: map likes me, split doesn't like map. why?

[21:16] <theorbtwo> Hm.

[21:17] <theorbtwo> Ah.  Well, did you actually want that to return a hashref?

[21:17] <gaal> hashref? why?

[21:17] <gaal> a list

[21:18] <gaal> made into a hashref, later, surely

[21:18] <theorbtwo> Put a + in front of the first quote.

[21:18] <gaal> but this shoudl take "asdf" and turns it into ( "-a" => "-a", "-s" => "-s"  etc.

[21:19] <gaal> errrr

[21:19] <gaal> i'll be.

[21:19] <gaal> ++theorbtwo

[21:19] <theorbtwo> It sees the curlies, knows it can either be a hashref or a coderef, looks ahead one more token, sees that it's not a function, and assumes it's a hashref, then gets confused when it doesn't see a comma after the EXPR in a map EXPR, LIST.

[21:20] <theorbtwo> The parser can't handle enough lookahead.

[21:20] <gaal> yes, i understand -- only i usually had it in the other way around

[21:20] <gaal> so i didn't think of that

[21:21] <gaal> and the compiler error was regretfully about the "} split" 

[21:21] <gaal> so thanks :)

[21:23] <theorbtwo> This is why perl6 doesn't have a map EXPR, LIST form.

[21:24] <gaal> perl6++ then # adding to the tally

[21:30] * elmex sad

[21:31] * gaal sad he has lots of $work this coming week

[21:33] <gaal> okay, i have a first shot at a simple "harness" for g:d tests

[21:33] <gaal> prolly shouldn't go in pugs yet though

[21:33] <jabbot> gaal: thou speakst also ye olde English?

[21:33] <gaal> middle and up, jaboot.

[21:35] <gaal>  Whan that April with his showres soote / The droughte of March hath perced to the roote, /  And bathed every veine in swich licour, Of which vertu engendred is the flowr

[21:35] <gaal> (etc. etc)

[21:37] <gaal> anyone interested in testing this further?

[21:37] <gaal> the intention: verify Getopt::Declare can parse perl5's command line

[21:47] <elmex> hmm, i got over my heavy-tired-phase of the day... now i can work on for hours...

[22:11] <stevan> nothingmuch: ping

[22:11] <nothingmuch> pong

[22:11] <stevan> hey, lumi's idea about integrating the tests

[22:11] <nothingmuch> say again?

[22:11] <stevan> there is now a feature in Test.pm to log tests

[22:11] <stevan> <lumi_>	If the test thing could output to some file: "$filename $line $pass" and then if it exists you can merge it in the html

[22:11] <nothingmuch> i say after HTML backend

[22:12] <stevan> nothingmuch: yes, later

[22:12] <nothingmuch> there is another problem

[22:12] <stevan> but we have the test output abilities now

[22:12] <nothingmuch> tests are not always linear

[22:12] <nothingmuch> that's good

[22:12] <nothingmuch> i don't know how to map line <-> test_case

[22:12] <nothingmuch> because line can be N test cases

[22:12] <stevan> ture

[22:12] <stevan> s/true/ture/

[22:13] <nothingmuch> and if we go into that, well, solve the halting problem and i'll do the rest, i promise

[22:13] <stevan> :P

[22:15] <nothingmuch> anyway

[22:15] <nothingmuch> i have to go

[22:15] <nothingmuch> but i want it to be two phased

[22:15] <nothingmuch> i will try to give the catalog_tests.pl script another whirr

[22:15] <nothingmuch> first convert all tests to html

[22:15] <nothingmuch> and all syns to html

[22:15] <nothingmuch> conversion of tests to html should be clever

[22:15] <stevan> check it in ,.. I will try to look itover tonight

[22:15] <nothingmuch> but not too clever

[22:15] <nothingmuch> i did

[22:15] <stevan> ok

[22:15] <stevan> nothingmuch++

[22:15] <nothingmuch> and then HTML::TreeBuilder or other should be used to implant backlinks in the synopsis HTML

[22:15] <nothingmuch> based on where the L<> match *ends*

[22:16] <nothingmuch> or right after the heading it points to

[22:16] <nothingmuch> as a superscript '1 2 3', a number for each test, with <a name="name_of_test.t" >

[22:16] <nothingmuch> i'll write all this at the top of the file

[22:17] <jabbot> pugs - 920 - This script is no longer necessary

[22:17] * gaal is calling it a moose soon too

[22:17] <theorbtwo> Moose?

[22:18] <nothingmuch> hola rozallin

[22:18] <rozallin> Hello.

[22:18] <gaal> http://forum2.org/moose/

[22:18] <gaal> hey

[22:18] <nothingmuch> see://woobling.org

[22:22] <gaal> yawn

[22:22] <gaal> well, bye all

[22:22] * gaal &

[22:22] <rozallin> Night gaal.

[22:25] <nothingmuch> stevan: 921

[22:25] <nothingmuch> adds todo

[22:25] * nothingmuch goes now.. *poof*

[22:25] <stevan> nothingmuch: good night

[22:27] <jabbot> pugs - 921 - add a list of todos and remove idiotic '

[22:32] <bd_> hmm, what's the correct way to get/set the topic in a reduction rule (Eval.hs)?

[22:32] <bd_> findVar env "$_" doesn't seem to work in a for loop

[22:51] <autrijus> hi /\camels!

[22:52] <autrijus> bd_: to get a topic, evalVar "$_"

[22:52] <autrijus> to set a topic, use enterLex

[22:54] <elmex> autrijus: hi

[22:54] <autrijus> greetings.

[22:54] <bd_> hmm, I've been doing that, but it acts a bit weird. I've been working on implementing given/when, and when the topic is set by given, when uses evalVar "$_" and gets the topic ok. But if it's in a for loop, ti only works if the expression in the when or the when's code block references $_

[22:54] <cm> autrijus of pugs fame.

[22:54] <bd_> pugs> for (1) { when (1) { say "x" } }

[22:54] <bd_> Fail: cannot cast as Str: VError "Undefined variable $_" (Val VUndef)

[22:55] <bd_> pugs> for (1) { when ($_) { say "X" } }

[22:55] <bd_> X

[22:55] <bd_> pugs> for (1) { when (1) { say $_ } }

[22:55] <bd_> 1

[22:55] <autrijus> aye

[22:55] <bd_> It seems like $_ isn't in the lexical pad when the when reduction rule tries to look it up - how do I override this?

[22:55] <autrijus> you need to extract $_.

[22:55] <autrijus> look at AST.hs

[22:56] <autrijus> I'll attempt a fix now

[22:57] <jabbot> pugs - 922 - * Mark Stosberg caught a typo.

[22:57] <autrijus> are you parsing when() as a App or Syn?

[22:57] <bd_> ummm, how do I do that? I'm new to the pugs codebase, and I'm not sure what extract does...

[22:57] <bd_> Syn

[22:57] <autrijus> ok.

[22:57] <autrijus> extract extracts implicit params from closures.

[22:57] <autrijus> it turns

[22:57] <autrijus> { say $^x }

[22:57] <autrijus> into

[22:57] <autrijus> -> $x { say $x }

[22:57] <autrijus> and

[22:58] <autrijus> { say $_ }

[22:58] <autrijus> into

[22:58] <autrijus> -> *$_ { say $_ }

[22:58] <autrijus> bug was it doesn't know 'when' implicitly uses $_.

[22:59] <bd_> so how do I tell it that?

[23:00] <autrijus> svn up and see my fix?

[23:00] <bd_> okay

[23:00] <autrijus> had not really tested, but should work

[23:00] <autrijus> in any case you can build on that :)

[23:00] <bd_> thanks :)

[23:00] <autrijus> I need to run. obra arrived.

[23:00] <autrijus> need to pick him up.

[23:00] <autrijus> see you in a bit!

[23:01] <theorbtwo> Later!

[23:03] <bd_> src/AST.hs:447:

[23:03] <bd_>     Conflicting definitions for `imps'

[23:03] <bd_>     In the binding group for: imps, imps, exps', vs'

[23:03] <bd_> [in a pristine checkout]

[23:04] <pasteling> "nullfield" at 67.167.45.157 pasted "how do i modify this to have it where it executes the a command when the button is pressed and a diffreent command when it is released" (23 lines, 446B) at http://sial.org/pbot/8373

[23:05] <nullfield> ?@?@??!?!/!??

[23:05] <nullfield> OMG HAX!

[23:05] <nullfield> help?

[23:05] <elmex> nullfield: yes, we love you

[23:05] <nullfield> oh

[23:05] <nullfield> how kind

[23:05] <theorbtwo> nullfield, this channel is for perl6, that is perl5.

[23:05] <theorbtwo> Try #perl

[23:06] <nullfield> #perl - no help\

[23:06] <elmex> lol?

[23:06] <elmex> Perl6 <=> Perl Sex ?

[23:07] <nullfield> wow!

[23:07] <elmex> horny pointers exploit your heap ;)

[23:08] <nullfield> lol

[23:08] <elmex> nullfield: how can we serve you?

[23:08] <nullfield> i told you...

[23:09] <nullfield> i need help with binding in tk

[23:09] <elmex> ah

[23:09] <nullfield> i need several button

[23:09] <elmex> i don't know binding...

[23:09] <nullfield> each with two subroutions

[23:09] <nullfield> *subroutines

[23:09] <elmex> nullfield: you mean binding perl6 with tk?

[23:09] <nullfield> one exectuted when the button is pressed...

[23:09] <nullfield> another when it is released?

[23:09] <nullfield> yes

[23:09] <bd_> I think he's referring to the paste?

[23:09] <nullfield> no

[23:10] <elmex> not perl5 ?

[23:10] <nullfield> im not shure

[23:10] <elmex> there is no real perl6 yet...

[23:10] <nullfield> oh

[23:10] <nullfield> i guesss perl 5

[23:10] <nullfield> tk though

[23:10] <jabbot> nullfield: thou speakst also ye olde English?

[23:10] <nullfield> for gui

[23:10] <autrijus> bd_: fixed

[23:10] <Khisanth> elmex: basically he got no response in #perl so he is trying #perl6

[23:11] <nullfield> jabbot ehh matey

[23:11] <nullfield> no

[23:11] <elmex> Khisanth: ah, thats of much logic ;) 

[23:11] <pjcj> nullfield: look up the bind manpage and search for ButtonPress and ButtonRelease

[23:11] <bd_> autrijus: ah, thanks

[23:17] <jabbot> pugs - 924 - * fix typo

[23:17] <jabbot> pugs - 923 - * Syn "when" should produce $_

[23:38] <bd_> hm, should all blocks define '&break' or only given? and if only given, how should 'when' break out of the block?

[23:42] <autrijus> last?

[23:43] <bd_> S04 says in a loop it needs to continue to the next item in the loop, so last wouldn't be good

[23:43] <autrijus> last has to be written last() for now

[23:43] <autrijus> redo?

[23:44] <bd_> Does that work in an ordinary block?

[23:44] <bd_> or rather, should it?

[23:44] <bd_> S04 says that redo works as in perl 5; in perl 5 { print "y\n" ; redo; print "x\n" } is an infinite loop

[23:45] <bd_> We don't want when {} in an ordinary block or given to infinite-loop :)

[23:45] <autrijus> aye aye :)

[23:46] <autrijus> please dig deeper

[23:46] <autrijus> I need to hop on MRT car now

[23:46] <autrijus> &

[23:46] <autrijus> pan-wireless city++

[23:46] <bd_> okay :)

[23:46] <bd_> If &break being defined in all blocks is ok, I've almost got a complete implementation :)

[23:47] <bd_> hm, though actually, that's slightly wrong when I think further

[23:47] <jabbot> bd_: thou speakst also ye olde English?

