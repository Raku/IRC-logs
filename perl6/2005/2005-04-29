[00:11] <jabbot> pugs - 2454 - * split the Eval monad into two construc

[02:32] <nothingmuch> the web is evil

[02:37] <obra> yes

[02:43] <nothingmuch> catalyst is being nice to me though

[02:43] <nothingmuch> how is bamboo progressing?

[02:54] <nothingmuch> ingy: ping

[02:58] <obra> nothingmuch: been working on book and work

[02:58] <obra> about to start to need bambooish things.

[02:58] <obra> so maybe things will happen

[02:59] <nothingmuch> what does it actually do?

[02:59] <obra> right now, increment a counter

[03:01] <nothingmuch> hehe

[03:01] <nothingmuch> what are your plans for it then?

[03:01] <nothingmuch> from what I gathered it is sort of a toolbox for webapps?

[03:02] <obra> oh. we've got some spec. you seen the spec?

[03:02] <nothingmuch> nope

[03:02] <obra> hang on

[03:02] * nothingmuch is having a braindead moment:

[03:02] <obra> http://svn.openfoundry.org/bamboo/trunk/lib/Bamboo/Guide.pod

[03:02] <nothingmuch> shift->method(shift);

[03:02] <nothingmuch> which shift will happen first?

[03:02] <nothingmuch> the right one, right?

[03:03] <crysflame> uh

[03:03] <crysflame> my p5 brain says left first

[03:03] <nothingmuch> (p5)

[03:03] <crysflame> oh, totally left

[03:03] <crysflame> i think

[03:05] <nothingmuch> you're right

[03:05] * nothingmuch is happy

[03:05] <crysflame> left

[03:06] <crysflame> wow, it's still there

[03:06] <crysflame>     goto &{ splice( @_, ARG0, 1 ) } if ref( $_[ARG0] ) eq 'CODE';

[03:06] <crysflame> that's what your question reminded me of

[03:06] <nothingmuch> that's scary

[03:06] <nothingmuch> what is it?

[03:07] <crysflame> it transfers execution to the coderef in $_[0]

[03:07] <nothingmuch> right

[03:07] <nothingmuch> but why like that?

[03:07] <crysflame> well, it was a POE state

[03:07] <crysflame> i could have made it more wordy but that did what i intended

[03:07] <nothingmuch> goto &{ shift } if ref $_[0] eq 'CODE'; ?

[03:07] <crysflame> precedence with shift?

[03:07] <nothingmuch> or maybe i have no clue what ARG0 is

[03:07] <crysflame> also, um, ARG0 isn't $_[0]

[03:07] <nothingmuch> okay

[03:08] <crysflame> it's more like an ENUM that varies at runtime

[03:08] <nothingmuch> what's the precedence issue?

[03:08] <crysflame> (ref: POE)

[03:08] <crysflame> if you shift during a goto, what happens

[03:09] <mugwump> svn 100 software engineers shoot you

[03:09] * mugwump didn't remember typing svn

[03:09] <nothingmuch> crysflame: i'm very sleepy, i don't see what's wrong

[03:10] <crysflame> i was really wary, that was all

[03:10] <crysflame> not like wary and goto splice ref CODE mix well

[03:10] <crysflame> but, hey

[03:12] <nothingmuch> ooh, fun

[03:12] <nothingmuch> i think i will learn to use XML::Twig

[03:12] <nothingmuch> someone tell me if i'm sane for doing this:

[03:13] <nothingmuch> i have an XML, in an xml:

[03:13] <crysflame> no

[03:13] <nothingmuch> <root><elem><nested/></elem><foo/><verbatim> ... xml here ... <elem><bar/></elem> ... </verbatim></root>

[03:13] <nothingmuch> i would like to parse the first <elem> with <nested> in it

[03:13] <nothingmuch> and extract some values

[03:14] <nothingmuch> but i would like to get the string that is the XML inside <verbatim> unparsed

[03:14] <nothingmuch> or rather parsed

[03:14] <nothingmuch> but as text, not as a tree

[03:14] <nothingmuch> is there a better way than what I'm hoping XML::Twig can give me?

[03:15] <mugwump> sounds like a job for XPath

[03:15] <mugwump> nothingmuch: see the xql method in XML::Sablotron

[03:16] <nothingmuch> xslt... scary

[03:16] <mugwump> oh, ignore that.  it just gives you a nice DOM

[03:16] <mugwump> maybe libxml has an xpath lookup method too

[03:17] <nothingmuch> i don't see an 'xml' method

[03:17] <nothingmuch> oh, sql

[03:17] <nothingmuch> xql

[03:17] <nothingmuch> damnit

[03:18] <nothingmuch> nope, not in the docs either

[03:18] <mugwump> sec, I'll find it

[03:18] <nothingmuch> oh, it's ::DOM

[03:18] <mugwump> http://search.cpan.org/~pavelh/XML-Sablotron-0.98/DOM/DOM.pm

[03:18] <mugwump> #xql

[03:20] <mugwump> should be able to call toString on the fragments

[03:22] <nothingmuch> sounds good

[03:22] <nothingmuch> the only problem i see is that again i won't be learning to use XML::Twig

[03:23] <mugwump> I recommend to learn the DOM first, it's transferrable knowledge...

[03:24] <mugwump> OTOH XML::Twig has xpath and toString support too

[03:25] <nothingmuch> so basically i make a new situation

[03:26] <nothingmuch> give it to Sablotron

[03:26] <nothingmuch> with some XML

[03:26] <nothingmuch> and then construct a DOM::Document from the situation, after it has been moved around a bit?

[03:27] <mugwump> The situation doesn't seem to do very much, I've always just treated it as something spurious the module needs to work properly :)

[05:10] <bsb> TreyHarris: did you get an answer to the reduce qn?

[05:42] <gaal> morning

[05:47] <bsb> hi gaal, just the person I was after

[05:48] <bsb> remember the make ghci failure?

[05:48] <bsb> seems to be a class between:

[05:49] <bsb>  /usr/lib/ghc-6.5/HSbase_cbits.o

[05:49] <bsb> src/UnicodeC.o:00000000 T blkcmp

[05:51] <bsb> gaal, could you please run:   nm -A /usr/lib/ghc-6.*/*.o  | g 'blkcmp'

[05:54] *** Aankh|Clone is now known as Aankhen``

[05:56] <gaal> grep you mean yes? :)

[05:57] <bsb> yep, my alias, sorry

[05:57] <gaal> anyway, not found on my linux box.

[05:57] <bsb> You have ghc-6.4 from experimental, yes?

[05:57] <gaal> sounds like we need to rename a symbol in our copy of the code eh?

[05:57] <gaal> yup

[05:58] <bsb> I guess we do

[05:59] <bsb> I'm reading about ghc packages, may be an alternative there...

[05:59] <gaal> it's not referenced anywher ein the project, btw, wo it's simple enough.

[05:59] <gaal> ooh, that might be a better alternative.

[06:00] <gaal> http://forum2.org/gaal/pugs/smoke-msys.html r2454

[06:22] *** chady_ is now known as chady

[06:33] *** Aankh|Clone is now known as Aankhen``

[06:35] <bsb> gaal: no luck at the package level

[06:35] <bsb> the only symbol not in ghc's base package is u_iswdigit

[06:36] <bsb> Why would they leave only one out?

[06:41] <TreyHarris> bsb: no, i never got an answer

[06:42] <bsb> I think reduce is foldl1 in the prelude

[06:42] <bsb> could be wrong though, /fold[lr]1?'?/ all confuse me

[06:43] <TreyHarris> my machine with ghc is rebooting... do you happen to know where the prelude is in hugs?

[06:44] *** castaway_ is now known as castaway

[06:44] <bsb> in hugs do :find fold1

[06:44] <bsb> ":find foldl"

[06:44] <TreyHarris> oh, cool.  didn't know about :find

[06:45] <bsb> It's nice

[06:46] <gaal> TreyHarris: this may be useful too: http://haskell.org/ghc/docs/latest/html/libraries/doc-index.html

[06:47] <gaal> bsb: try renaming the symbol in our copy of UnicodeC?

[06:47] <TreyHarris> i see... so it's like i suspected.  foldl1 calls foldl.  since you can't make a single function both return a list and an element

[06:47] <gaal> it's only mentioned one apart from the declaration

[06:48] <autrijus> hi \camels

[06:48] <gaal> the better solution would be to introduce symbol mangling but i don't know how to do that.

[06:48] <gaal> ehy autrijus

[06:49] <autrijus> problem with latest ghc?

[06:49] <gaal> permute<ehy>

[06:49] <obra> hey autrijus 

[06:49] <autrijus> yo obra 

[06:49] <autrijus> in ghc 6.5 (cvs version tthat is) I suggest disabling our UnicodeC

[06:49] <bsb> autrijus: yes, clash on UnicodeC.o

[06:50] <autrijus> bsb: I'll try a fix. sec

[06:50] <bsb> note that haskell lacks u_iswdigit

[06:53] <TreyHarris> does !! end up getting optimized somehow, or is it really O(n) as the prelude specifies it?

[06:54] <autrijus> TreyHarris: I think it's O(n) in the general case

[06:54] <obra> hey Schwern 

[06:54] <Schwern> Hey.

[06:55] <Schwern> Stevan asked me to have a look at Test.pm and the todo stuff.  I don't understand what all the fuss is about, looks trivial to me.

[06:55] <TreyHarris> autrijus: thanks.   btw, i find pugs incredible amusing, because it's given me an excuse to do Haskell again after 15 years... it was my very first "real" language :-)

[06:55] <autrijus> TreyHarris: that's good... 15 years ago you didn't have monads, right? :)

[06:56] <TreyHarris> i don't think so....  i didn't even learn I/O, because it made no sense to me.  either i've learned enough in the interim to understand monads now, or they were using something else then

[06:57] <autrijus> I think they are using

[06:57] <autrijus> main :: [Response] -> [Request]

[06:57] <autrijus> back then

[06:57] <TreyHarris> yeah, that looks familiar

[06:58] <TreyHarris> i don't think Gofer even had that though

[06:58] <decay> castaway: you didn't try to find us yesterday, did you?

[06:58] <gaal> autrijus, time for clues on #line?

[06:59] <castaway> Nope

[06:59] <autrijus> gaal: give me some time to fix the Unicode.hs

[06:59] <gaal> sure. i'd ask on #haskell but it looks like some of this is too pugs specific?

[06:59] <Schwern> So the goal here is to make TODO tests fail visibly when developing Pugs?

[07:02] <Schwern> How does one run an individual pugs test?

[07:03] <gaal> Schwern: prove -v t/test.t

[07:03] <gaal> but you need to set up env first:

[07:03] <gaal> export HARNESS_PERL=$PWD/pugs    # or ./pugs, whatever you prefer

[07:04] <gaal> export PERL6LIB=ext/Test/lib

[07:04] <Schwern> make test TEST_FILES=foo.t seems to work

[07:04] <gaal> that's cool too (does it do verbose?)

[07:04] <Schwern> Probably.  Its just makemaker

[07:06] <Schwern> *** Error: Can't modify constant item: VStr "TODO: defined sub (symbol table)": NonTerm SourcePos "/Users/schwern/devel/pugs/blib6/lib/Test.pm" 195 9: NonTerm SourcePos "/Users/schwern/devel/pugs/blib6/lib/Test.pm" 67 5

[07:06] <Schwern> Any idea what that means?

[07:06] <Schwern> 196 is 	$desc = "TODO: $desc";

[07:07] <Schwern> Are function arguments read-only by default?

[07:07] <gaal> yes, add 'is rw'

[07:07] <Schwern> is rw works?

[07:08] <Schwern> Str ?$desc is rw?

[07:08] <Schwern> Maybe I want is copy

[07:08] <Schwern> Yep

[07:08] <gaal> i think they do, Schwern.

[07:09] <autrijus> you want is copy.

[07:09] <Schwern> Ok, force_todo is now unnecessary.

[07:09] <autrijus> Schwern++ # mad perl6 skillz

[07:12] <autrijus> bsb: please retry the build r2455

[07:13] <autrijus> bsb: and let me know if ./t/syntax/unicode.t works

[07:15] <bsb> ok

[07:21] <bsb> ./t/syntax/unicode.t All tests successful

[07:21] <jabbot> pugs - 2455 - * GHC 6.5 had the new unicode semantics 

[07:23] <bsb> make ghci only works if I remove UnicodeC.o

[07:23] <bsb> I didn't make clean though

[07:26] <gaal> http://forum2.org/gaal/pugs/smoke-msys.html r2455 ghc6.4 msys

[07:32] <autrijus> bsb: cool, then it works

[07:32] <gaal> #line? :)

[07:32] <autrijus> :r

[07:32] <autrijus> err, ww

[07:33] <autrijus> gaal: ok, url?

[07:34] <gaal> http://sial.org/pbot/9738 and  http://sial.org/pbot/9739

[07:34] <gaal> notes: 1. i know i'm doing something wrong aroung "ld <- try $ do" because fail "" from there leaves the function;

[07:34] <gaal> 2. this breaks with e.g. t/statements/last.t - with very weird debug prints, e.g. reported line numbers that go up to line 72 - much more than the length of that file.

[07:35] <gaal> the second url is a test file that does work correctly.

[07:35] <Alias_> autrijus: #threatnet is finally alive :)

[07:36] <autrijus> gaal: ok. I'll bring it to lunch :)

[07:36] <autrijus> Alias_: what is that?

[07:36] <autrijus> or rather, breakfast

[07:37] <gaal> btw, you prefer the whole parser.hs file?

[07:37] <Alias_> autrijus: Spiffy idea 2004-D :)

[07:37] <Alias_> autrijus: Globally networked greylisting system

[07:37] <gaal> i can upload that too if you'd rather.

[07:37] <Alias_> many-many stateless over IRC

[07:37] <Alias_> http://ali.as/threatnet/ 

[07:37] <Alias_> could have sworn I mentioned it earlier

[07:38] <autrijus> gaal: how about you just committing it?

[07:38] <gaal> it breaks some tests

[07:38] <autrijus> so?

[07:38] <gaal> good point. :)

[07:38] <autrijus> I thought the rule is it's okay to commit things as long as it doesn't break Test.pm :)

[07:39] <gaal> okay, i'll merge with lastest r and clean up the trace prints.

[07:39] <castaway> I thought it was "commit anyway, someone will fix it" :)

[07:40] <gaal> castaway: i don't want someone to do my wokr for me

[07:40] <gaal> i want to figure out what i'm doing wrong, with help of someone who knows better than me :)

[07:40] <castaway> then label it "ork in progress" ?

[07:40] <castaway> (preferably with a "w" :)

[07:41] * gaal orks in progress.

[07:42] <gaal> it breaks many tests where there's a comment starting at column 1. that scarier? :)

[07:45] <gaal> r2456

[07:45] <bsb> Does assuming have an inverse, an unassuming method?

[07:45] <gaal> in haskell that's called uncurry

[07:46] <bsb> But that's a bit different, I think

[07:46] <gaal> don't know about the p6 version

[07:46] <bsb> And it doesn't sound as nice as "unassuming"

[07:46] * gaal agrees unassuming does sound nice.

[07:46] <bsb> uncurry bundles the first to params in a tuple

[07:47] <gaal> *curry* sounds nice to all indian food lovers though.

[07:47] <bsb> Mmm. I think I'm getting one cooked for me tonight.

[07:52] <jabbot> pugs - 2456 - #line directive, work in progress

[07:55] <autrijus> woot.

[07:55] * autrijus goes to lunch &

[07:56] <tainted-> hi

[07:56] <tainted-> are newbies welcome here?

[07:56] <gaal> of course!

[07:56] <tainted-> #perl is incredibly intolerant of newbs

[07:57] <gaal> tainted, this channel is primarily for development of perl6 though, so p5 Qs aren't very appropriate

[07:57] <gaal> however, if you have p6 Qs, fire away :)

[07:57] <castaway> perlmonks.org is better for newbies.. :9

[07:58] <tainted-> yea i need a perl newbie channel

[07:58] <gaal> perlmonks.org is *excellent*.

[07:58] <castaway> try the chatterbox on perlmonks

[07:58] <tainted-> k

[07:58] <castaway> (thats a website, not irc, btw :)

[07:58] <gaal> there are some good p5 newcomer lists.

[07:59] <gaal> http://www.perl.org.il/mailman/listinfo/starter/ is one, hosted by Israel.pm.

[07:59] <tainted-> wow great thanks guys

[07:59] <tainted-> 10 minutes in here > 2 hrs in #perl

[08:00] <castaway> well we're probably less busy too, (the channel that is)

[08:00] <castaway> not that I've ever been in #perl

[08:02] <Alias_> Which #perl :)

[08:03] <castaway> any :)

[08:03] * castaway waits to see when tainted turns up in the CB..

[08:13] <castaway> mornin osfameron 

[08:13] <osfameron> morning castaway

[08:14] <castaway> how's fotango-land? :)

[08:15] <osfameron> yeah, pretty good

[08:15] <castaway> nifty

[08:16] <osfameron> yeah, lots of exciting stuff going on

[08:16] <osfameron> (though I'm pretty much doing stats automation ;-) )

[08:17] <castaway> cool

[08:17] * castaway is pondering/attempting to apply for a job there ,)

[08:18] <osfameron> good luck!

[08:18] <osfameron> or break a leg, or something

[08:18] <castaway> heh

[08:19] <castaway> actually a recruiter asked me if I was interested, and I think she's still waiting for feedback

[08:19] <osfameron> Preferred?

[08:20] <castaway> sorry?

[08:20] <osfameron> I guess not then (name of the agency that I went through)

[08:20] <castaway> oh the agency.. 

[08:21] <castaway> yup, them

[08:21] <jabbot> pugs - 2457 - unbreak the build

[08:21] <jabbot> pugs - 2458 - * The Eval monad is now split into (SIO/

[08:25] <autrijus> omg. I'm seeing an unbelievable amount of speedup.

[08:25] <gaal> autrijus, are the tests parsing for you? i think i've broken them all :)

[08:25] <autrijus> I think at least 3x.

[08:26] <autrijus> gaal: you've broken them all.

[08:26] <autrijus> I'm fixing.

[08:26] <gaal> at least it means they run a little bit faster. *duck*

[08:26] <autrijus> uh no

[08:26] <autrijus> if you would, update to r2455

[08:26] <autrijus> (before your commit)

[08:26] <autrijus> and apply r2458 by hand

[08:26] <autrijus> I think it will result in a huge speedup.

[08:27] <autrijus> mandel.p6 is blazing here.

[08:28] <gaal> BTW: i've made it so pugs can build on cywgin

[08:28] <autrijus> cool

[08:28] <gaal> since wokring with msys is like wearing a hairshirt

[08:29] *** Aankh|Clone is now known as Aankhen``

[08:31] <gaal> that's a large patch, autrijus

[08:32] <autrijus> it's in http://autrijus.org/tmp/r2458.diff

[08:32] <gaal> oh, thanks, no i can manage with svn

[08:33] <gaal> i was commenting on the

[08:33] <gaal> hmm

[08:33] <gaal> insanity :)

[08:34] <gaal> wow, i hadn't realized cygwin was under so heavy development

[08:35] <gaal> i wanted to install patchutils which i embarassingly didn't have installed, now it's updating many mbs

[08:35] <gaal> prolly want a reboot sometime :( building on the other box in the meantime.

[08:43] <gaal> the trick to upgrading cygwin w/o a system reboot is to do it while all cygwin programs are closed.

[08:44] <gaal> sucks, but less than a complete reboot.

[08:47] <autrijus> gaal: #line is in

[08:47] <autrijus> now I really need to get food.

[08:47] <autrijus> &

[08:47] <gaal> thanks... i'd like to understand how it's done

[08:47] <gaal> oh

[08:47] <gaal> i'll ask you later then. bon apetite.

[08:47] <autrijus> see Lexer :)

[08:48] <autrijus> you can hack in filename support

[08:48] <autrijus> &

[08:48] <gaal> right.

[09:01] <jabbot> pugs - 2459 - * fix #line directive.

[09:04] <gaal> woot! autrijus, your patch provides something on the order of another 11% speedup on make smoke.

[09:08] <bsb> S06/Pointy subs: does not require a preceding comma when included in a list

[09:08] <bsb> does that include: @a = ("one" -> $x { $x**2 }, "three")

[09:09] <bsb> or is it only to allow for @list -> $elem { ... }

[09:31] <jabbot> pugs - 2460 - * Pugs can now build on cygwin

[09:41] <gaal> http://forum2.org/gaal/pugs/smoke-cygwin.html r2460/cygwin

[09:51] <gaal> autrijus: ping

[09:52] <gaal> i'm afraid #line still doesn't work. the tests are very funny.

[09:55] <gaal> i.e. adding a subtest makes the ones before it pass where they previously had failed.

[10:01] <jabbot> pugs - 2461 - basic tests for #line, see comment withi

[11:06] <nothingmuch> good morning

[11:06] <nothingmuch> sort of

[11:08] <castaway> afternoon :)

[11:15] <theorbtwo> Good sort-of-morning to you too, nm.

[12:18] *** chady is now known as chady_

[12:37] <stevan> hey all

[12:38] <Steve_p> Good morning

[12:38] <theorbtwo> G'morning, Stevan, Steve.

[12:39] <theorbtwo> Erm, g'afternoon.

[12:39] <theorbtwo> .oO(Time flies when you're cursing Make.)

[12:39] <stevan> good morning guys :)

[12:39] <stevan> I see Schwern was in here helping on Test.pm, but I dont see any commits

[12:39] <stevan> any idea oh what he did? It looked as if he eliminated the need for force_todo()

[12:40] <stevan> which would be nice :)

[12:41] <jabbot> pugs - 2462 - * rewrote position handling and statemen

[12:41] <jabbot> pugs - 2463 - * bare block execution restored in the p

[12:42] <autrijus> greetings.

[12:42] <autrijus> I just rewrote everything :D

[12:42] <stevan> autrijus++ # :)

[12:42] <autrijus> (well, in this regard, it's everything in the parser part)

[12:42] <Steve_p> heh

[12:42] <stevan> autrijus: any idea what Schwern did with Test.pm? I am not seeing any commits

[12:42] <autrijus> had no idea how many things will break

[12:42] * autrijus runs test

[12:42] <autrijus> stevan: he added "is copy" to $desc or something

[12:42] <autrijus> but I think he forgot to svk push

[12:43] <stevan> autrijus: actually think he misunderstood what I was asking him about

[12:43] <Juerd> autrijus: What keeps you motivated?

[12:43] <stevan> oh well I will email him

[12:43] <theorbtwo> Morning, autrijus.

[12:43] <autrijus> Juerd: thank-you messages

[12:43] <autrijus> yo theorbtwo.

[12:44] <autrijus> we have a much cleaner Pos model

[12:44] <autrijus> $ ./pugs -e 'die 123'

[12:44] <autrijus> *** Error: 123 at -e line 1, column 1-8

[12:44] <theorbtwo> I'm finally starting to get somewhere with the haddocking.  Make sucks; the problem was in spaces-vs-tabs.

[12:45] <theorbtwo> Now the problem seems to be in haddock's haskell parser.

[12:45] <Juerd> Working on the same thing for 87 days, rewriting things over and over until they're perfect, communicating with almost everyone in the Perl universe... It's a form of commitment I haven't previously seen anywhere.

[12:45] * Juerd is very glad you're doing it, though :)

[12:45] <autrijus> Juerd: see, seeing you're glad keeps me motivated

[12:46] <Juerd> Admirable

[12:46] <autrijus> Juerd: I don't really ask much... I just want a working Perl 6 :)

[12:46] <theorbtwo> I'm also glad you're doing it -- and think you are mad as a hatter.

[12:46] <autrijus> mmm hatter

[12:47] <stevan> working perl6 ++

[12:47] <theorbtwo> (Heavy metal poisoning)--

[12:47] <Juerd> autrijus: Right. That statement is in bizarre disagreement with itself.

[12:47] <stevan> (((insanity driven-development)++)++)++

[12:47] <Juerd> heh

[12:48] * theorbtwo wonders if the karma-tracking agents grok the parened form.

[12:48] <Juerd> I don't think autrijus is insane. Mad, yes, but one has to be pretty sane and have good feeling for sanity to implement something as vague and futuristic as Perl 6 in current time.

[12:49] <stevan> Juerd: IMO insanity is 1) not always a bad thing 2) fairly subjective :)

[12:50] <stevan> " normal " thought processes are not always appropriate when programming

[12:50] <Juerd> In your opinion, it is subjective. Hm, nice.

[12:50] <Juerd> stevan: insane is a form of unhealthy

[12:50] <stevan> the thought complexity of programming requires a mind which can be heavy in the abstract, but still remain grounded

[12:50] <theorbtwo> Hmm... haddoc doesn't like the ^# \d+ ".*" style of line directive (which ghc in .hs->.hpp mode outputs), nor does it like #ifdef.

[12:51] * theorbtwo wonders if he's using an old haddock, or if it really needs some perl lovin.

[12:51] <scook0> theorbtwo: I've been working on fixing stuff for haddock

[12:51] <stevan> Juerd: its all diagnositic BS IMHO 

[12:52] <jabbot> pugs - 2464 - * the last block on a Stmts chain needs 

[12:52] <theorbtwo> Fixing haddock to work with pugs, or fixing pugs to work with haddock?

[12:52] <scook0> Fixing pugs

[12:53] <scook0> I found you can work around the #ifdef problem by enclosing each directive in {- -} comments

[12:53] <scook0> I'm looking at some other stuff as well

[12:53] <theorbtwo> I'm doing it by preprocessing first, and am about to stick in a perl -i -pe after that.

[12:54] <scook0> How well does that work?

[12:55] <theorbtwo> Donno yet.

[12:55] <Juerd> autrijus++  # Just read the journal. I should make this my browser's home page.

[12:55] <theorbtwo> RSS++

[12:55] <Juerd> Yeah, but this is the first entire journal I'd like to RSS

[12:55] <theorbtwo> (But I generally read it as soon as it's announced, before it hits my friends page.)

[12:56] <Juerd> I haven't used RSS yet because use.perl has no all-journals feed.

[12:56] <autrijus> heads up: fp.p6 infinite loops. fixing

[12:56] <Juerd> Woohoo

[12:56] <Juerd> car's ready

[12:56] <Juerd> It now runs on LPG

[12:57] <theorbtwo> LPG?

[12:59] <theorbtwo> scook0: Have you hit the problem of haddock disliking TH yet?

[13:00] <Juerd> theorbtwo: A cleaner fuel.

[13:00] <Juerd> That happens to be less expensive too

[13:01] <theorbtwo> Wow.  Eval.hpp makes my xemacs' hilighter take lots of CPU.

[13:01] <Juerd> In the netherlands, it's available at almost 50% of all service stations

[13:01] <theorbtwo> Sounds great!

[13:02] * Juerd is now waiting for his brother

[13:02] <Juerd> There he is

[13:02] <Juerd> gone.

[13:02] <Juerd> afk

[13:02] <theorbtwo> Later!

[13:02] <scook0> theorbtwo: TH? (no...)

[13:02] <theorbtwo> Template Haskell.

[13:04] <autrijus> ...679 failed.

[13:04] <theorbtwo> r2465 has a rule for making hpp files from hs files.

[13:04] <theorbtwo> Try make src/Pugs/Compile/Haskell.hpp, then feed that to haddock.

[13:07] *** Qiang_ is now known as Qiang

[13:08] <theorbtwo> Ah, somebody on #haskell says that a new haddock is expected "soonish".

[13:09] <scook0> 'Soonish'...

[13:10] <theorbtwo> Yeah, I rather wonder when that is as well.

[13:11] <theorbtwo> I don't see an accessable VCS on the haddock page, either.

[13:11] <scook0> I wonder if there is a way to tell Haddock to ignore chunks of code...

[13:11] <jabbot> pugs - 2465 - Rule for making .hpp files for haddockin

[13:15] <gaal> autrijus, ping

[13:16] <autrijus> pong

[13:16] <kungfuftr> *splat* it was a cherry bomb

[13:16] <gaal> saw the amusing magicals/line_basic.t ?

[13:16] <autrijus> yeah.

[13:17] <gaal> that's on par with the kind of weirdness i've been moosing with...

[13:18] <gaal> but most of all i want to understand how i generalize try

[13:21] <gaal> so i can say something like { filename <- try ruleFileName ; setPosition if filename (....) else (...) }

[13:21] <autrijus> sure

[13:21] <autrijus> you have to test (null fulename)

[13:21] <gaal> i can't seem to fail "" there

[13:21] <gaal> because that dose weird things to the rule

[13:22] <gaal> also there's still the weird bug that makes me think maybe the rule isn't terminating correctly

[13:23] <theorbtwo> OK, have working haddock documentation, but only after a lot of manual work commenting out the bits of the .hpp that haddock doesn't grok.

[13:23] <theorbtwo> (TH, GADTs, and some stuff that I don't know why it doesn't like.)

[13:23] <scook0> You haddocked the whole thing?

[13:23] <theorbtwo> Yep.

[13:24] <autrijus> ooh.

[13:25] <theorbtwo> Now I have to either fix haddock, or figure out how to automate that manual bit.

[13:25] <gaal> oh, and also: skipToLineEnd should probably try to consume the newline too, no? At least as an optimization.

[13:25] <theorbtwo> The problem with just commenting out the bits it doesn't like is that then we loose documentation for them.

[13:27] <autrijus> gaal: I'd rather you keep it...

[13:27] <autrijus> not sure

[13:27] <gaal> uh, oh, larry just posted about context :)

[13:28] <autrijus> uh. 

[13:28] * autrijus head explodes

[13:28] <gaal> autrijus, okay, that's just a thought about optmization. what worries me much more is correctness, and i don't understand the bug where snipping lines from the end of a file causes passing subtests to fail.

[13:30] <autrijus> "I think S02 is probably wrong.  It should be unknown/list context.

[13:30] <autrijus> in Soviet Russia, Synopsis writes Larry!

[13:31] <Draven_> yay

[13:32] <autrijus> ok, there should be less test failures now

[13:33] * gaal smokes

[13:38] <autrijus> gaal: example.t still hangs

[13:38] * Limbic_Region is having trouble coming up with a real world example of a list you might need to process that would be too big to fit in memory all at once

[13:39] <Limbic_Region> any suggestions?

[13:39] <autrijus> Limbic_Region: a video stream?

[13:39] <integral> do strings count?  If so, genetic stuff

[13:39] <Limbic_Region> integral - I was just thinking of genetic stuff

[13:40] <integral> any area where you've got lots of experimental data I suppose, physics, medcine, etc

[13:41] <Limbic_Region> real problem - typically the genetic stuff would be in a file and you would just read it one line at a time

[13:41] <gaal> attention all smokers: if you have a script that uploads your smoke results automatically, put it in PUGS_SMOKE_UPLOAD and run-smoke.pl will call it for you.

[13:41] <Limbic_Region> I am trying to have a real world example of iterators where the next item is calculated from the previous

[13:41] <Limbic_Region> bah - nevermind, I will come up with something

[13:41] <gaal> pi?

[13:41] <integral> random number generator?

[13:42] <gaal> primes?

[13:42] <jabbot> pugs - 2466 - * fold redundant Pos cells; this should 

[13:42] <jabbot> pugs - 2467 - * Allow user-defined upload command for 

[13:44] <machack666> hola

[13:44] <machack666> Anyone want to interpret a portion of S04?

[13:45] <machack666> I'm trying to figure out if traits are introspective.

[13:46] <machack666> S04 seems to hint that, but does not go into detail about how we are doing this.

[13:46] <theorbtwo> You mean if there's a way to ask "does this value have this trait"?

[13:46] <theorbtwo> Er, s/value/container/

[13:46] <machack666> correct, but I'm dealing with cclosure traits

[13:47] <machack666> if &?BLOCK is the current block, I'm not sure of what the best way to specify syntax for (say) all of the ENTER blocks

[13:47] <machack666> but we also have the wrinkle where individual variables can be declared with traits

[13:48] <machack666> my $var will first { get_a_job() }

[13:48] <machack666> this statement should add an implicit FIRST{} block to the containing closure, with $var as the topicalizer.  No problems there

[13:49] <machack666> but do we also need to have an introspection method for the $var variable itself --- $var.traits or something

[13:49] <theorbtwo> I should think so.

[13:49] <machack666> so does &?BLOCK.traits make sense as well?

[13:50] <theorbtwo> Yes.

[13:50] <machack666> I would think that we could just have traits be a rw hashref with the trait type as the key

[13:50] <theorbtwo> The .traits method would be on Any, which includes Block.

[13:51] <theorbtwo> So would I.

[13:51] <machack666> i.e., &?BLOCK.traits<ENTER>

[13:51] <machack666> would give us an array of the closures to be run on block entry

[13:51] <theorbtwo> Makes sense to me.

[13:51] <jabbot> pugs - 2468 - * add Pos back to structural folding.

[13:52] <theorbtwo> Post to p6l about it, and get a larry to put in in an S?

[13:52] <machack666> but if we allow user-defined traits we need some sort of transofrmation rule for the control traits when they are defined.

[13:52] <theorbtwo> Why?

[13:53] <machack666> my $var will later { run_away() }

[13:53] <machack666> if "later" is user-defined then does it get transformed into $var.traits<LATER>?

[13:54] <machack666> or do we just leave it as is?

[13:55] <machack666> we should be consistent about naming.  Since closure-level traits are ALL CAPS, and variable-level traits (which may extrapolate to the block level) are lower, we need to resolve those for the triggers.

[13:55] <machack666> unless we want to try to execute all traits for both &?BLOCK.traits<ENTER enter>

[13:55] <machack666> i.e., either the variable traits become uppercase or the block traits become lower

[13:56] <machack666> well, gotta go

[14:01] <jabbot> pugs - 2469 - * even more structural induction fixes o

[14:01] <jabbot> pugs - 2470 - * even more folding

[14:07] <gaal> gotta go too. see 'ya. &

[14:23] <autrijus> testers, please don't write

[14:24] <autrijus> is (...)

[14:24] <autrijus> anymore

[14:24] <autrijus> is(...)

[14:24] <autrijus> is the only correct way

[14:24] <clkao> you hate my space!

[14:24] <autrijus> yes.

[14:24] <theorbtwo> (Significant whitespace)--

[14:25] <autrijus> uh.

[14:25] <autrijus> print (4+3)*7

[14:25] <autrijus> you think it should print 7?

[14:25] <autrijus> I find that to be quite indefensible :)

[14:26] <theorbtwo> It's a hard choice for me what the better of those two evils is.

[14:32] <jabbot> pugs - 2471 - * abstract all induction into "Unwrap" c

[14:32] <jabbot> pugs - 2472 - * whitespace fixes

[14:33] <theorbtwo> My preference, I think, is that it prints 7, and warns of multipication in void context.

[14:35] <autrijus> but it is a warnable offense in p5.

[14:35] <autrijus>  %s (...) interpreted as function

[14:36] <autrijus> I don't know, really.

[14:36] <autrijus> Juerd said it's been decided that bareword functions no longer globs space

[14:38] <theorbtwo> It's only a warnable offense with print.

[14:39] <theorbtwo> ...and only with exactly one space.

[14:39] <autrijus> which is weird too. :-/

[14:39] <autrijus> I prefer consistent whitespace-sensitive rules over arbitary whitespace-insensitive rules :)

[14:39] <theorbtwo> No, it makes sense; the foo-in-scalar-context warning covers it when it's a problem.

[14:41] <autrijus> I think I'd rest my case.

[14:41] <autrijus> I see now it's a defensible position, but my brain is not wired that way :)

[14:42] <jabbot> pugs - 2473 - * unTODO a test

[14:42] <jabbot> pugs - 2474 - * Noop is now consistently ignored durin

[14:47] <stevan> hola Schwern 

[14:48] <Schwern> Hey

[14:48] <stevan> can you commit what you did yesterday?

[14:48] <Schwern> Yeah, sorry, I was working on it while waiting for a friend's flight to come in at the aiport... and she came in.

[14:49] <stevan> ah

[14:49] <stevan> no big deal, I am just anxious to see what it was

[14:50] <Schwern> So all it does is change all todo tests to be not todo unless %ENV<PUGS_RELEASE> is set.

[14:50] <stevan> ok

[14:50] <Schwern> And if the test failed.

[14:50] <stevan> but there are many tests which should still TODO

[14:50] <stevan> as I mentioned in my email , there is kind of 2 layers of TODO

[14:50] <Schwern> Oh.

[14:51] <stevan> those which should work, but not yet

[14:51] <Schwern> Then why not make two?

[14:51] <Schwern> Wait... no, I really don't get it.

[14:51] <stevan> and those which are not yet implemented and are far off

[14:51] <Schwern> Ahh.

[14:51] <Schwern> Make two levels of todo.

[14:51] <stevan> take object for instance

[14:51] <stevan> they are way off (which in pugs land is a few weeks)

[14:51] <jabbot> pugs - 2475 - * more whitespace.

[14:52] <stevan> and then odd forms of for loop (for @array &sub)

[14:52] <stevan> which are just not on the radar, but "should" work 

[14:52] <stevan> how would you suggest we go about 2 level-todos?

[14:52] <Schwern> Gotcha.

[14:52] <stevan> then of course, the whole policy of "when releasing failures are TODO"

[14:53] <stevan> which I know has its drawbacks/issues

[14:53] <Schwern> That's simply wrong.

[14:53] <theorbtwo> Perhaps :todo<6.2.8.3>, which is TODO until version 6.2.8.3, then becomes a hard failure.

[14:53] <autrijus> Schwern: so you'd suggest releasing with todos?^Wfailures?

[14:53] <stevan> theorbtwo: thats maybe a little too specific :)

[14:53] <Schwern> theo:  I doubt things are that stable.

[14:54] <stevan> maybe :todo is regular TODO

[14:54] <Schwern> autrijus:  I'm against the idea that ALL failures should be todo when releasing.

[14:54] <autrijus> Schwern: what would you do as an alternative?

[14:54] <stevan> and :todo(2) is for "not even close stuff"

[14:54] <Schwern> autrijus:  Umm.... let them fail or don't release with failures.

[14:54] <autrijus> Schwern: we are on times releases

[14:54] <autrijus> and we did let them fail

[14:54] <Schwern> autrijus:  Then don't run the tests.

[14:54] <autrijus> but then, lots of people download tarballs and mail me

[14:54] <autrijus> saying they have failures.

[14:55] <Schwern> did you *expect* them to fail?

[14:55] <autrijus> yes.

[14:55] <Schwern> Then mark them as todo!

[14:55] <autrijus> we are on a timed release schedule.

[14:55] <autrijus> sure, but luqui has this great idea

[14:55] <stevan> Schwern, that is waht we do (with force_todo())

[14:55] <Schwern> Like, *ding* its 12 noon... release!

[14:55] <autrijus> of having two TODOness

[14:55] <autrijus> one is for things that are should be fixed asap

[14:55] <autrijus> (bugs)

[14:55] <autrijus> one is for things we can do at leisure

[14:55] <Schwern> autrijus:  Right, that's what we're talking about right now.

[14:55] <autrijus> (features)

[14:56] <stevan> Schwern: more like, *ding* its 2am Tiawan time, ... release

[14:56] <autrijus> s/2am/7am/

[14:56] <Schwern> stevan:  Is this release automatic?

[14:56] <stevan> LOL

[14:56] <stevan> Schwern: not really

[14:56] <theorbtwo> autrijus: what do you think about the idea of sprinkling #ifndef HADDOCK around?

[14:56] <Schwern> Good.  Then yes, take anything which is exepected to fail and mark it as TODO.

[14:56] <autrijus> theorbtwo: I think it's fine.

[14:56] <stevan> Schwern: that is what force_todo() is for :)

[14:57] <stevan> otherwise it is a tedious process

[14:57] <Schwern> stevan:  Except its horribly unmaintainable.

[14:57] <autrijus> :todo<bug>

[14:57] <theorbtwo> Perhaps :knownbug and :wishlist?

[14:57] <stevan> (truet me I did it many times)

[14:57] <autrijus> :todo<feature>

[14:57] <stevan> Schwern: it isnt really maintained though

[14:57] <Schwern> Exactl

[14:57] <Schwern> y

[14:57] <stevan> it is there for release, and removed afterwards

[14:57] <stevan> stop-gap measure only

[14:58] <stevan> :todo<some attribute>++ # I like that

[14:58] <autrijus> and we can have some flag

[14:58] <Schwern> PUGS_RELEASE is what I used.

[14:58] <autrijus> that ignores certain flags

[14:58] <Schwern> Its committed.

[14:58] <autrijus> oh good.

[14:58] <autrijus> you rc0k.

[14:58] <stevan> Schwern: thanks 

[14:58] <Schwern> Well, Test.pm will honor PUGS_RELEASE but nothing sets it

[14:59] <Schwern> I couldn't figure out the twisty maze of MakeMaker hacks.

[14:59] <autrijus> Schwern: is it a ENV var?

[14:59] <Schwern> Ayep

[14:59] <autrijus> k.

[15:00] <masak> help /unjoin

[15:01] <Schwern> stevan:  Ok, so you can handle the multi-layer todo?

[15:02] <jabbot> pugs - 2476 - * repair hash unwrapping on rhs.

[15:02] <jabbot> pugs - 2477 - Make all TODO tests fail visibly unless 

[15:02] <stevan> Schwern: yup!,... muchas gracias for the input

[15:06] <nothingmuch> hola stevan 

[15:08] <Schwern> Excellent.  My work here is done.

[15:08] <perlmonks-bot> http://www.perlmonks.org/index.pl?node_id=450922

[15:08] <theorbtwo> Who was that masked bot?

[15:19] <autrijus> Juerd: all our S02 semantic went out from window in r2476

[15:19] <autrijus> * * Larry invoked Rule 2. We deal.

[15:19] <stevan> hey nothingmuch 

[15:19] * nothingmuch is developing with Catalyst and loving every minute

[15:19] <stevan> nice

[15:20] <stevan> I have been reading all that stuff, looks very cool

[15:20] <nothingmuch> http://woobling.org:81/page/מי_אנחנו <-- currently somewhat broken

[15:20] <nothingmuch> it is

[15:20] <nothingmuch> but soon: two models (simple xhtml in xml files, and CDBI)

[15:21] <nothingmuch> templating was very easy

[15:21] <nothingmuch> control flow is logical

[15:21] <nothingmuch> and it's very very flexible

[15:21] <jabbot> pugs - 2478 - * Larry invoked Rule 2. We deal.

[15:24] <theorbtwo> Hm, how many backslashes do I need for this insanity?

[15:25] <stevan> '/' x Inf

[15:25] <theorbtwo> I want to do a perl -pe 's/(...)/...$1.../' from a Makefile, which is generated from a qq() heredoc in a Makefile.PL.

[15:26] <theorbtwo> Oh... but I need doublequotes on the outside for portability.

[15:27] <autrijus> theorbtwo: you can invoke util/ instead

[15:27] <autrijus> util/munge_haddock.pl

[15:27] <autrijus> look at how util/src_to_blib.pl 

[15:27] <autrijus> was invoked

[15:27] <theorbtwo> Hm, it feels silly to invoke a sepperate file for something as short as -i -pe "s/^(#.*)/{- $1 -}/"

[15:27] <autrijus> trust me, it is for the best.

[15:28] <autrijus> oh and -i is unusable on win32

[15:28] <autrijus> have to roll you own

[15:28] <autrijus> or use -i.bak

[15:29] <theorbtwo> Ugh.  Silly default mandatory locking.

[15:31] <jabbot> pugs - 2479 - * fix tic-tac-toe in light of the contex

[15:42] <Juerd> autrijus: Too bad...

[15:44] <Corion> Did we remove most of the :todo(1) tests? I see lots of red in my smoke :)

[15:45] <Juerd> They were made :todo tests if I read the journal correctly.

[15:45] <Juerd> Not that :todo should result in anythign other than :todo(1), though

[15:45] <Juerd> But if that's broken, everything using it breaks too :)

[15:46] <Corion> BTW, the data on my machine (datenzoo.de) is still accessible via ssh, but it won't come up in non-recovery mode at the moment it seems. Even after I did a fsck already ...

[15:46] <theorbtwo> Probably some important file gone missing.

[15:47] <theorbtwo> /etc/fstab, at a guess.

[15:47] <Juerd> Hehe

[15:47] <Corion> theorbtwo: Hmmm. Interesting idea ...

[15:47] <Juerd> fstab isn't important except at boot time :)

[15:47] <Corion> BTW, I see both, failing and :todo(1) tests, so it's not :todo that is broken

[15:47] <Juerd> Unless you boot with a writable root fs :)

[15:47] <Corion> (dark green and red)

[15:48] <Corion> No, /boot is a separate partition and is likely mounted ro

[15:48] <Juerd> /boot doesn't have to be mounted

[15:49] <Juerd> It's accessed directly by the boot loader, before any fs is mounted.

[15:49] <Juerd> And after that, it's no longer needed except for reconfiguration of the boot loader of course.

[15:49] <Corion> ah, so it's merely mounted after that as a convenience

[15:49] <Juerd> (Assuming Linux. I don't know how other systems do this)

[15:49] <Corion> Juerd: Linux is correct :)

[15:49] <Juerd> Corion: Well, not just that. It's usually mounted to indicate that it is indeed a separate partition

[15:50] <Juerd> While otherwise installing packages might poison the otherwise empty mount point.

[15:50] <Juerd> It's then better to get errors about not being able to write on a read-only filesystem than to think everything is alright, reboot and then discover you were putting the files in the wrong place.

[15:51] <theorbtwo> Well, something is causing it not to boot normally, in my experince this normally means that it didn't fsck and mount -a OK.

[15:51] <theorbtwo> (As other errors will normally get ignored.)

[15:51] <Corion> Ah, likely the problem with the todo tests is either with the perl script or with harness - the test output still has TODO: in front of it :)

[15:51] <Juerd> theorbtwo: Then boot manually instead of with init scripts, and find out what's wrong

[15:51] <Corion> theorbtwo: Yeah, except that I just did a recovery boot+fsck

[15:52] <Juerd> theorbtwo: Put "init=/bin/sh" in your kernel command line.

[15:52] <theorbtwo> Exactly.

[15:52] <theorbtwo> Juerd, I know.

[15:52] <Corion> ... but maybe the box comes up soonish, or I'll have to do another reboot and go in in recovery mode again, to get a better hint :)

[15:52] <theorbtwo> I'm currently trying for psychic debugging just for the hell of it.

[15:52] <Juerd> theorbtwo: Though skipping fsck shouldn't mess things up that much.

[15:52] <Juerd> Unless it is RH/FC :P

[15:52] <Corion> Juerd: But skipping fsck makes things take a lot of time - and I don't know if fsck is waiting for input :)

[15:53] <theorbtwo> The only way to fix a RH system is to install Debian over top of it.

[15:53] <Corion> BTW, the Y operator now seems to work - I get 2 unexpected successes in all that red :)

[15:53] <Juerd> If it's a headless box, you should configure fsck to not wait for input :)

[15:53] <Juerd> theorbtwo++

[15:53] <Corion> theorbtwo: I'm considering doing that with Debian over SuSE now, but as all the data is still available, I'm reluctant

[15:53] <Corion> Juerd: Even then, the reboot/fsck will take a lot of time without feedback

[15:54] <Juerd> More time than not running it

[15:54] <Juerd> But in my experience, never more than 5..10 minutes

[15:54] <Juerd> Unless you forgot to enable DMA before fsck runs

[15:54] <Juerd> In which case it can easily take an hour.

[15:54] <Corion> ... I need a unicode keyboard, to properly enter ¥

[15:55] <Juerd> Corion: In vim, ^KYe

[15:55] <Corion> Juerd: I'm impatient

[15:55] <theorbtwo> Most modern kernels go to DMA mood straight out of boot.

[15:55] <Corion> Juerd: I don't use vim :)

[15:55] <mauke> compose = Y

[15:55] <Juerd> Corion: Then I don't care anyway :P

[15:55] <mauke> you need a compose key

[15:55] <theorbtwo> Try altgr-shift-z on an xfree86 german keymap.

[15:56] <Corion> theorbtwo: Neither altgr-shift-z nor altgr-shift-y work, but maybe I need newer keyboard drivers. Oh. You say xf86 - I use Win2k :)

[15:56] <theorbtwo> I need to figure out how to get my 102nd key to work as compose.

[15:56] <theorbtwo> (I use a German keyboard with an American layout.)

[15:57] <mauke> theorbtwo: me too :-)

[15:57] <theorbtwo> (American keyboards don't have the key to the right of the left shift, so it's not mapped to anything useful.)

[15:57] <Juerd> theorbtwo: X? With xev, find out its key code, then run xmodmap -e 'keysym 123 = Multi_Key'

[15:57] <mauke> theorbtwo: it's mapped to 􏿽xAB 􏿽xBB 􏿽xA6 here

[15:57] <mauke> U+00AB: LEFT-POINTING DOUBLE ANGLE QUOTATION MARK [􏿽xAB]; U+00BB: RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK [􏿽xBB]; U+00A6: BROKEN BAR [􏿽xA6]

[15:57] <Juerd> Broken bar?

[15:58] <Juerd> Are you living in 2003? Infix zip is Yen now ;)

[15:58] <Juerd> What would you need a broken bar for?

[15:58] <mauke> it looks almost right :-)

[15:58] <theorbtwo> xmodmap:  commandline:0:  bad keysym name 'Multi_Key' in keysym list

[15:59] <mauke> the normal usage of that key is < > |

[15:59] <theorbtwo> It is on a german keyboard; on a british keyboard it's \ and broken bar.

[15:59] <ingy> morning

[16:00] <Juerd> theorbtwo: Then it's Multi_key or multi_Key

[16:00] <Juerd> theorbtwo: I recall there being something funny with the caps

[16:00] <Juerd> And if it's neither of those, then s/keysym/keycode/

[16:00] <mauke> I use the "context menu" key as compose key

[16:00] <theorbtwo> Hm, that had no apparent effect, but didn't give an error message either.

[16:00] <Juerd> theorbtwo: Now try to use it.

[16:00] <theorbtwo> mauke, I don't have one of those -- I have a pure 102 layout.

[16:01] <theorbtwo> I did -- I get <, or > when shifted.

[16:01] <Juerd> theorbtwo: <multi> <a> <e> should yield 􏿽xE6

[16:01] <theorbtwo> I just get "<ae".

[16:01] <Juerd> Did you use the right key code?

[16:01] <Juerd> And try keycode, instead of keysym. I never know the difference

[16:01] <jabbot> pugs - 2480 - The yen/Y/zip operator works now as yen 

[16:02] <Juerd> It works as itself?

[16:02] <theorbtwo> Oooh, that worked.

[16:02] <Juerd> theorbtwo: Show us.

[16:02] <theorbtwo>  xmodmap -e 'keycode 94 = Multi_key'

[16:02] <theorbtwo> compose,a,e=æ

[16:02] <theorbtwo> (I'm UTF-8.)

[16:02] <Juerd> pretty. Now switch to iso-8859-1 so I can read it.

[16:02] <Juerd> :P

[16:03] <Juerd> In a few years I'll be migrating to utf-8

[16:03] <Juerd> When hopefully, screen will play that game too

[16:03] <theorbtwo> No, you switch to utf8.  Then you can read hebrew, chinese, and all sorts of other strange languages that you can't understand, but can go "oooh, pretty".

[16:03] <theorbtwo> Also, it has useful characters like €.

[16:04] <Juerd> I don't care about hebrew and chinese

[16:04] <Juerd> Cyrillic characters are often not written in utf-8, so that's not fixed by that either

[16:04] <Juerd> And Esperanto people use ASCII nowadays

[16:04] <Juerd> g-with-circumflex is gx.

[16:04] <theorbtwo> Not for me it isn't.

[16:04] <machack666> theorbtwo: useful characters like a-hat not-equals carriage-return? ;D

[16:04] <autrijus> well, in order to talk sensibly about perl 6

[16:05] <Juerd> theorbtwo: It is.

[16:05] <autrijus> this has to be a utf8 channel to reduce confusion for all parties involved :)

[16:05] <Juerd> theorbtwo: You have to mentally transliterate it, which comes naturally after a few minutes of Esperanto chatting.

[16:05] <theorbtwo> No, like the euro currency symbol, which is not in iso-8859-1.

[16:05] <kungfuftr> theorbtwo: iso-8859-15 iirc

[16:05] <integral> migrate to iso-8559-15 then :-)

[16:05] <Juerd> Who cares? The official symbol is EUR anyway.

[16:05] <theorbtwo> (It is in iso-8859-15, but if you're going to switch from 1 to 15, you might as well switch all the way to utf8 and be done with it.)

[16:06] <Juerd> The E thing is a logo, not a symbol. It has strict specifications for the angle of serifs, for crying out loud.

[16:06] <Juerd> Well, not serifs, but the line endings.

[16:06] <mauke> ... which everyone ignores, it seems

[16:06] <Juerd> It's not just a C with an = through it.

[16:06] <Juerd> mauke: Most fonts do it right.

[16:06] <theorbtwo> IIRC, it did only for a very short time.

[16:07] <Juerd> theorbtwo: Switching to -15 is much easier.

[16:07] <theorbtwo> I know.

[16:07] <Juerd> If I want to switch to utf-8 I have to (HAVE TO) migrate all boxes with it.

[16:07] <Juerd> And I have to give up being able to access things like my e-mail from any console I happen to find.

[16:07] <Juerd> Which is too much to ask.

[16:08] <Juerd> I use screen with alway-open programs in it.

[16:08] <Juerd> I don't want to restart everything each time I connect.

[16:08] <integral> hmm, pity screen can't reencode from utf-8 to iso-8859-15

[16:11] <autrijus> sure can

[16:11] <autrijus> ^A:encoding utf8 iso-8859-15

[16:11] <autrijus> ^A:encoding iso-8859-15 utf8

[16:11] <autrijus> for the other way

[16:11] * Juerd is going for another test drive

[16:11] <Juerd> Hopefully, the roads are a bit less busy now

[16:11] <Juerd> Stupid traffic jams.

[16:11] <machack666> Juerd: is your name pronounced like "Word"?

[16:11] <Juerd> machack666: No. I'd write it like that then.

[16:12] <Juerd> afk

[16:13] <mauke> huhu, someone in EFnet/#perl was trying to read an @array with while ($line = <@array>)

[16:13] <mauke> it almost works

[16:14] <machack666> autrijus: is Eval.hs where the AST gets "executed"?

[16:14] <autrijus> machack666: yes

[16:15] <machack666> so if I need to trigger block-level actions at runtime, I would need to add code there?

[16:15] <autrijus> most possibly yes

[16:15] <machack666> and if something is done at compile-time, it would (could?) go into Parser.hs?

[16:16] <machack666> i.e., attqaching the traits to the appropriate block-object

[16:17] <autrijus> yes.

[16:18] <theorbtwo> Uh-oh.  I can no longer use the key between 5 and 7 on the top row of the main section of my keyboard.

[16:18] *** zuulvin_ is now known as mila

[16:19] <theorbtwo> Restarting X, BBIAB.

[16:21] <jabbot> pugs - 2481 - * limit PUGS_RELEASE scope for release t

[16:25] <machack666> bbl

[16:27] <Corion> Grrr. I guess it was an unloaded network card module... Grrrreat.

[16:28] <Corion> (I wonder how the datacenter set up the machine :) )

[16:28] <Corion> Maybe via serial console :)

[16:31] <jabbot> pugs - 2482 - Small cleanup of Test::proclaim.

[16:31] <jabbot> pugs - 2483 - * EOLs at EOFs

[16:31] <jabbot> pugs - 2484 - * Beginning work of MonadEval class

[16:31] <jabbot> pugs - 2485 - * Eliminated explicitly passing env arou

[16:32] <Corion> Yippie...

[16:36] <ingy> Juerd: ping

[16:37] <ingy> Juerd: ot. is there a way in irsii to jump to the window with the most recent activity

[16:37] <Corion> Happyness is a machine reachable over the network.

[16:38] <ingy> Corion: actually Happyness is merely a mispelled locution

[16:38] <ingy> as is mispelled ;)

[16:44] <Corion> r2479 - http://datenzoo.de/pugs/win2k.html - 867/3781

[16:45] *** Corion changes topic to: pugscode.org <Overview Journal Logs> | smoke/win2k (occasional): http://xrl.us/fqum (867/3781, r2479), Mac OS X (62/4506, r2362), Linux (38/4508, 2381) | pugs.kwiki.org

[17:02] <obra> autrijus?

[17:02] <obra> What the hell changed in the last 12 hours with pugs?

[17:02] <autrijus> hi. schwern made all our :todo fail.

[17:02] <autrijus> or rather, all the force_todo fail

[17:03] <autrijus> so you should see red.

[17:03] <autrijus> don't panic :)

[17:03] <autrijus> "env PUGS_RELEASE=1 make smoke"

[17:03] <autrijus> will give the original green one.

[17:03] <Corion> ah ;)

[17:03] <obra> no. I mean it smoked 30% faster

[17:03] <autrijus> obra: oh. yeah. I rewrote the monad

[17:03] <obra> :)

[17:03] <obra> autrijus++

[17:03] <Corion> I found the all-green version better, so I knew when I broke something important :)

[17:04] <autrijus> we are now in a six story monad

[17:04] <autrijus> EvalT ContT ReaderT SIO (STM/IO) a

[17:04] <ingy> I am using '1 * foo' to force foo() into scalar context in a numeric situation (in perl 5)

[17:05] <ingy> anyone think of other clever ways

[17:05] <mauke> 0 + foo

[17:05] <Corion> ingy: ~~ foo

[17:05] <ingy> well that's about the same

[17:05] <autrijus> yeah, ~~foo

[17:05] *** obra changes topic to: pugscode.org <Overview Journal Logs> | smoke/win2k (occasional): http://xrl.us/fqum (867/3781, r2479), Mac OS X (62/4506, r2362), Linux (164/4642, 2484) | pugs.kwiki.org

[17:05] <Corion> ~~ is the scalar context operator in Perl5

[17:05] <ingy> ok nice

[17:06] <Corion> (like its long-word equivalent, "scalar", but with different binding)

[17:06] <Corion> :-))

[17:06] <ingy> it would be cool if +foo worked

[17:06] <Corion> ... but that will maybe nummify your return value. Especially nasty with overloaded return values.

[17:06] <Corion> So "scalar" might be your best bet unless you go for obfuscation :-)

[17:07] <Corion> Oh - you're talking about "numeric situation" already. So ~~ it is.

[17:07] <mauke> ~~foo doesn't numify

[17:07] <Corion> mauke: Hmmm - true. Strings have xor too.

[17:07] <theorbtwo> ~~ either nummifies or stringifies.

[17:07] <theorbtwo> (It never returns a ref.)

[17:11] <jabbot> pugs - 2486 - * $?CALLER::POSITION repaired

[17:12] <Odin-LAP> mummifies!

[17:12] <Odin-LAP> :D

[17:12] <ingy> mauke: I numify in foo, so it's ok by me

[17:13] <ingy> thanks folksies

[17:17] <Corion> ... and I thought that this was not the channel for Perl5 questions ...

[17:17] <Ontolog> does Pugs really need GHC 6.4? Won't it run with 6.2? (thats the latest version for Gentoo)

[17:18] <Corion> Ontolog: Compile from source then.

[17:18] <Corion> Bwahahahahahahahahhahahaha.

[17:18] <Ontolog> shove it!

[17:19] <Corion> Ontolog: The reason for 6.4 is Template Haskell and lots of #ifdefs I think

[17:19] <mauke> Corion: huhu, still compiling

[17:19] <Ontolog> why does Haskell gotta be such a hassel?

[17:19] <Corion> mauke: I thought Gentoo was really fast, because it's optimized exactly for your machine?

[17:19] <mauke> I don't run gentoo

[17:20] <mauke> the binary release doesn't work because it requires glibc 2.3

[17:20] <mauke> I can't compile glibc 2.3 because of a parse error in pthread.h (wtf)

[17:21] <mauke> I think I need a new computer

[17:21] <Corion> I luckily got around needing to reinstall a box.

[17:21] * Qiang looks at the P166 machine in the corner

[17:21] <jabbot> pugs - 2487 - * #line tests largely passes now.

[17:42] <castaway> Ontolog: gentoo has 6.4 too

[17:43] <castaway> you need to fc it some tho

[17:43] <Ontolog> castaway: how do I unmask it?

[17:43] <castaway> force

[17:43] <castaway> lemme look, sec

[17:43] <castaway> /etc/portage/package.unmask: >=dev-lang/ghc-6.3

[17:44] <Ontolog> ahh

[17:44] <Ontolog> thanks

[17:44] <castaway> it's probably easier if you install ghc-bin normally, then 6.4

[17:44] <Ontolog> i have ghc-bin 6.2 installed now

[17:52] <jabbot> pugs - 2488 - * move callCC back into MonadCont

[18:16] <paddyez> hi

[18:17] <paddyez> is there a good document on the history of Pugs?

[18:17] <obra> yes

[18:17] <obra> http://use.perl.org/~autrijus/journal

[18:17] <obra> basically, daily updates from the very first day

[18:18] <paddyez> mkay I was thinking on sothing more compact

[18:18] <obra> well, it's only 3 months old

[18:18] <paddyez> a summary would do

[18:19] <obra> Autrijus Tang has been leading a team of hackers to implement perl6 in Haskell.

[18:19] <obra> ;)

[18:19] <paddyez> " I caught some bad cold today, but still managed to start going through the failing tests, reducing them to a more manageable number." it starts with the weateher

[18:19] <obra> http://use.perl.org/~autrijus/journal/22965

[18:19] <obra> that's the first entry

[18:21] <autrijus> paddyez: PA01 is the summary.

[18:21] <autrijus> see pugscode.org, click on "Overview" :)

[18:21] <autrijus> if you want concise history, read the ChangeLog file.

[18:21] <jabbot> pugs - 2489 - * somehow sort VComplex.

[18:22] <paddyez> thanx a lot all

[18:22] <autrijus> np :)

[18:23] <autrijus> paddyez: hm, maybe you can help improve the Wikipedia Pugs entry

[18:23] <autrijus> while you're figuring the history out :)

[18:24] <paddyez> yes that is what I am trying to do

[18:24] <paddyez> but in the german language though

[18:24] <autrijus> ah. I see the .de one is much better than .en

[18:24] <autrijus> hm, how come the .de is not backlinked to .en?

[18:25] <paddyez> well it is from today

[18:25] <paddyez> I am doing a complete rewrite on http://www.wikiweise.de/ a german fork

[18:25] <autrijus> a fork!

[18:26] <autrijus> hm, the search form on wikiweise is borken

[18:26] <autrijus> some tomcat error page

[18:26] <paddyez> it is still buggy

[18:26] <paddyez> the article does not exist yet

[18:28] <paddyez> I am right at it creating the article to schow a friend of mine who is a perl freak how it is donde

[18:28] <paddyez> done

[18:30] <autrijus> btw, I've added interwiki tag

[18:30] <paddyez> great

[18:31] <autrijus> also [[Autrijus Tang]] :D

[18:31] <autrijus> oh, duh, it's de.

[18:32] <autrijus> never mind :)

[18:35] <paddyez> *ggg*

[18:50] <autrijus> journal up. see you tomorrow!

[18:50] <autrijus> &

[18:50] <castaway> night autrijus 

[19:01] <jabbot> pugs - 2490 - * remove "import List" from AST.hs

[19:19] <Corion> Hmmm. Defaulting to $_ is broken... Or at least, it consistently doesn't work for abs.t and int.t (which I'm about to commit :) )

[19:24] <Corion> ... a non-pointy for loop doesn't seem to set $_ currently...

[19:24] <theorbtwo> Add a test to t/statements/for ?

[19:24] <Juerd> ingy: Yes, meta-a

[19:24] <Corion> theorbtwo: I'm about to, resp. also looking into the problem ;)

[19:24] <Corion> Gah :( And I also committed my trace()-ridden test-build of Pugs - sorry ...

[19:25] <castaway> roll it back?

[19:25] <Corion> svn revert++

[19:25] <Juerd> ARGH

[19:25] <Juerd> IBM puts "quality seals" on hardware boxes

[19:26] <Juerd> And I test hardware before going to clients

[19:26] <Juerd> The most recent quality seals leave a pattern of words on the box

[19:26] <Juerd> "VOID VOID VOID VOID"

[19:26] <theorbtwo> Ugh.

[19:26] <Juerd> That's not a nice thing to give your client :|

[19:26] <theorbtwo> WD-40?

[19:26] <Juerd> Now I have to re-box things.

[19:27] <Juerd> I still love IBM though.

[19:27] <Juerd> Don't get me wrong.

[19:28] <Corion> Hmmm. Seems like I'm too dumb to revert my changes by checking out an older version. So I'll undo my changes locally and then recommit.

[19:28] * Juerd just built a new floor in his... what's the word for the big empty space behind the back seats of a car?

[19:28] <castaway> depends which language ,)

[19:28] <castaway> boot

[19:28] <Juerd> I made it out of polystyrene and hard board :)

[19:28] <theorbtwo> Trunk.

[19:28] <Juerd> castaway: I know that, and was hoping for a fight ;)

[19:29] <castaway> (a trunk is a big chest to put clothers and things in ,)

[19:29] * castaway grins

[19:29] <Juerd> Ah, right, those were the words.

[19:29] <theorbtwo> Right.  In order to transport them, for example.

[19:29] <Juerd> I have an LPG tank instead of the spare wheel now

[19:29] <Juerd> And it's a bit taller than the wheel

[19:29] <theorbtwo> What do you do when you tire goes flat?

[19:29] <castaway> tyre!

[19:29] <castaway> LPG?

[19:30] <Juerd> castaway: Yep

[19:30] <castaway> whats that?

[19:30] <Juerd> theorbtwo: They gave me a can/tin of stuff that inflates and fixes/mends the tyre

[19:30] <Juerd> castaway: Yep is to mean "yes"

[19:30] <castaway> Grr.

[19:30] <castaway> What is "LPG" ?

[19:30] <Juerd> You brought that up, I thought you'd know what it was :)

[19:31] <Juerd> It's a fuel

[19:31] <castaway> Thank you

[19:31] <Juerd> Liquid gas

[19:31] <Juerd> Liquid when under enough pressure

[19:31] <castaway> sounds like a contradiction in terms ;)

[19:31] <theorbtwo> http://en.wikipedia.org/wiki/Liquified_petroleum_gas

[19:31] <Juerd> And new LPG injection systems never vapourize it, so it stays liquid all the time. So "gas" isn't exactly correct anymore.

[19:32] <jabbot> pugs - 2491 - Added test for default argument of int()

[19:32] <jabbot> pugs - 2492 - Move int.t below builtins/math, revert d

[19:32] <jabbot> pugs - 2493 - Backed out tracing in Prim.hs

[19:32] <castaway> 2ein gut'un

[19:32] <Juerd> What is "2ein gut'un"?

[19:32] <castaway> (oops)

[19:32] <castaway> a typo ;)

[19:32] <Juerd> Is it valid intercal?

[19:32] <castaway> ;)

[19:32] <masak> :)

[19:33] <theorbtwo> Juerd, "gas" never referred to the third state of matter; it's short for "gasoline". 

[19:33] <Juerd> theorbtwo: I know, but the current most common word for it is gas.

[19:34] <Juerd> Regardless of how the words became 'gas', both LPG and gasoline are called gas, and they're both liquid :)

[19:34] <castaway> (if you like, think away the 2, and translate from german)

[19:34] <Juerd> castaway: What is 'un?

[19:34] <castaway> silly ammis ;)

[19:34] <Juerd> What is ammis?

[19:34] <castaway> its a written rendition of a spoken word/sound

[19:35] <castaway> americans

[19:35] * Juerd finds it funny by the way that people outside western europe all ask me what LPG is.

[19:35] <Juerd> This way you'll never satisfy kyoto :)

[19:35] <castaway> do they?

[19:35] <Juerd> Many, many do.

[19:35] * castaway shrugs

[19:37] <Juerd> Anyway, I now drive cleaner and cheaper

[19:38] <Juerd> And I always wonder why not many more people do this

[19:38] <castaway> grats

[19:38] <Juerd> I'm sorry I keep asking you, but what is a grat?

[19:39] <Juerd> (You speak some kind of non-technical english that I don't understand! :))

[19:39] <castaway> its short for "congratulations"

[19:39] <Juerd> Oh - I knew the "congrats" abbrev.

[19:39] <Juerd> Thanks anyway :)

[19:39] <castaway> :)

[19:39] <castaway> learning++

[19:39] <Corion> Hmmm - I think I see the problem ... the "implicit topic" $_ is passed in as a subroutine parameter to the for-loop-code-block, but there isn't seen as the global $_ ...

[19:40] <Juerd> Corion: Big mistake there!

[19:40] <Juerd> Corion: $_ is lexical in Perl 6!

[19:40] <Corion> Juerd: Yes, but I think the lookup is done wrong

[19:40] <Juerd> Not dynamically global as in Perl 5

[19:41] <Corion> Hmmm - I could write a test against that, actually.

[19:41] <Corion> Set $_ to something, and check what value it has in $_ = "Hello World"; for "Goodbye World" { say $_ }; # should be "Goodbye World"

[19:41] <jabbot> pugs - 2494 - Test for implicit loop topic (re)used as

[19:41] <jabbot> pugs - 2495 - Made Pugs.Compile.Parrot mostly work aga

[19:42] <Corion> Err - { say } # of course - I need to check defaulting.

[19:42] <Juerd> If you do this, put in a test for say for "Goodbye World" too

[19:42] <Corion> Hah. And it outputs "Hello World"

[19:42] <Juerd> As that's even more likely to go wrong

[19:43] <Corion> Juerd: I don't get you?

[19:43] <Juerd> say for "g w"; should also say "g w"

[19:44] <Juerd> And after that, $_ should be back to what it was before the for-statement

[19:44] <Corion> Ah - yes

[19:44] <Juerd> This is scoping without { } and thus a special case

[19:49] <Corion> Juerd: Thanks for the hints - they hopefully made the test clearer... Now, if I could find out where that stuff is actually implemented ... :)

[19:51] <jabbot> pugs - 2496 - Changed test for checking for lexical $_

[19:54] <gaal> aloo!

[19:56] <theorbtwo> Allo, gaal.

[19:57] <Corion> gaal!

[19:58] <gaal> how're things? :)

[19:58] * gaal backlogs

[19:58] <theorbtwo> Things are going slowly, but progressing, for me.

[19:59] <gaal> still haddocking, or the other stuff?

[19:59] <theorbtwo> still haddocking.

[19:59] <theorbtwo> It doesn't like TH or GADTs.

[20:00] <gaal> if i were in its place, i wonder how i'd react to them!

[20:00] * castaway pokes HTML+CSS

[20:01] <theorbtwo> Eh.

[20:02] <theorbtwo> It should make use of ghc, rather then being a copy-and-paste-then-edit fork of it.

[20:03] * gaal is curious, taking a look at this haddock thing now

[20:03] <masak> is haddock really sufficient for newbies?

[20:03] <Corion> Hmmm. Where do the magical default variables (*_) come into play? In Parser.hs, I don't see them fudged in ...

[20:03] <masak> feels like some external documentation would be good, too

[20:03] <theorbtwo> http://www.haskell.org/ghc/docs/latest/html/libraries/index.html is straight out of haddock.

[20:05] <castaway> bro!

[20:05] <theorbtwo> masak: Certianly would be.

[20:05] <theorbtwo> But starting somewhere is good.

[20:05] <gaal> Corion: see AST.hs:1184

[20:05] <masak> theorbtwo: true

[20:06] <gaal> (i think)

[20:06] <Corion> gaal: That's right at the EOF for me ... Do you mean Typeable1 ?

[20:06] <gaal> sorry, 667 - defaultScalarPAram

[20:07] <gaal> no, scratch that

[20:07] <gaal> it's not used anywhere. no idea then :)

[20:07] * Limbic_Region pokes his head in

[20:08] * Limbic_Region looks up to see that between work for $ and an article he hopes to get published @perl.com, he hasn't even peeked in to see what is new and exciting in pugs/p6

[20:09] <theorbtwo> Oooh, nifty, Limbic.

[20:09] <gaal> ah, I think it's called 'topic' in Parser|Eval|Monads

[20:09] <Corion> gaal: I'll poke the stuff there then ;) I exposed a nice global $_ vs. local $_ bug (resp. implicit lexicalisation of $_)

[20:10] <Corion> What I wonder though is, that "for" does not mention any topic :)

[20:10] <castaway> it should

[20:11] <Limbic_Region> stevan ping

[20:11] <Corion> ... yes - I guess that's part of the problem ;-)

[20:11] <theorbtwo> What's the article on?

[20:11] <Corion> ... I just don't know how to tell it that, resp. where a bare block without params specifies that it has one parameter...

[20:11] <gaal> ah, a favorite p5 gotcha area :)

[20:11] <gaal> you know 5.10 has 'my $_', yes?

[20:11] <gaal> http://forum2.org/gaal/pugs/smoke-cygwin.html r2496

[20:12] <Limbic_Region> theorbtwo - http://www.perlmonks.org/index.pl?node_id=451278

[20:12] <Limbic_Region> dragonchild said I should talk to chromatic about publishing it

[20:13] <Limbic_Region> not something I had in mind when I wrote it, but I contacted chromatic anyway

[20:13] <Corion> gaal: Yes, I'm aware of that. There isn't much difference between my $_ and local *_ though, except that "my $_" works in closures :)

[20:13] <Limbic_Region> chromatic said that the code snippets had to be both working and practical before he would consider it

[20:14] <Corion> btw, my smoke test for r2496 is also up

[20:14] <gaal> there was a very long thread and interesting about it on clpm once

[20:14] <castaway> practical snippets++

[20:14] <Corion> Feh. And I was stupid. I inserted fresh tests into for.t, and didn't push the force_todo numbers ...

[20:14] <Corion> So now we get unexpected successes there :)

[20:15] <castaway> *g*

[20:15] <stevan> Limbic_Region: pong

[20:16] <Limbic_Region> did you see the tests I added for last?

[20:16] <stevan> yes, very nice :)

[20:16] <Limbic_Region> found a bug - which was really cool

[20:16] <Limbic_Region> I also modified next to be in align with last

[20:16] <gaal> wow, i see that in the 6 hours i was gone there was *another* speedup (after the 11% of earlier, the 30% of yesterday, the ~50%(?) of the day before that).

[20:16] <Limbic_Region> but I am not sure I did it right

[20:17] <stevan> Limbic_Region: they are hard tests to wrap your head around

[20:17] <Limbic_Region> before the force todo patch - I was under the impression that all tests marked as :todo wouldn't report as failures

[20:17] <Limbic_Region> but when I run pugs t/statements/next.t - it told me there was 1 failure

[20:17] <stevan> it takes time and patience (and I had neither, hence i commited the minimal tests)

[20:17] <Limbic_Region> I am still not sure next.t is right

[20:18] <Limbic_Region> but my pugs debugging fu is non-existant

[20:18] <Limbic_Region> so.... if you get a chance you might want to look at it ;-)

[20:18] <theorbtwo> Oh, a nit that isn't mentioned in the replies -- under "what is an iterator", a filehandle isn't an iterator, but the readline operator is -- <$handle> in scalar context, not $handle.

[20:18] <Limbic_Region> thanks theorbtwo - will change right away

[20:18] <stevan> Limbic_Region: I will try 

[20:18] <Juerd> Hmm?

[20:19] <Juerd> theorbtwo: That would mean that Higher Order Perl uses the wrong terminology throughout the book

[20:19] <stevan> Limbic_Region: I think the force_todo patch Schwern did may need some re-thinking

[20:19] <Juerd> theorbtwo: Something I find hard to accept, because MJD is a hero/god.

[20:19] <theorbtwo> Juerd, how do you pronounce your name?

[20:19] <stevan> it is too strict

[20:19] <Juerd> theorbtwo: As Juerd

[20:19] <stevan> LOL

[20:19] <theorbtwo> Um, thanks.

[20:19] <Juerd> theorbtwo: See juerd.nl/name or perlmonks.org/?node=Juerd

[20:19] <Juerd> Or both

[20:19] <Juerd> I'm not into sound samples though

[20:19] <qmole> that's a popular question today :)

[20:20] <Juerd> So you'll have to know what the german u-umlaut sounds like (or the french u in une)

[20:20] <Limbic_Region> stevan - I don't expect to be around much this weekend, but if you need anything next week let me know

[20:21] <Limbic_Region> I should also check to see if ingy applied the Perl6::Bible patch I sent him

[20:21] <Juerd> theorbtwo: Is this satisfactory?

[20:22] <stevan> Limbic_Region: my pugs-time is pretty limited lately, my $work is getting in the way :)

[20:22] <theorbtwo> I think so, yes.

[20:23] <Limbic_Region> stevan - me too since my free time is non-existant (closed on the new house this past Wednesday)

[20:24] <Limbic_Region> ok, so ingy didn't apply the patch I sent him but he didn't not apply it either

[20:24] <Limbic_Region> I could have swore he said he would be releasing last night

[20:24] <castaway> heh?

[20:24] <Limbic_Region> oh well

[20:24] <theorbtwo> It's some sort of strange heisenburgianpatch?

[20:25] <Limbic_Region> theorbtwo - yep, until ingy uploads the next revision for everyone to see (opens the box) - the patch is neither applied nor not applied

[20:25] <castaway> *g*

[20:25] <Limbic_Region> ok, so talked to stevan and looked at Perl6::Bible - next on the todo list is Jonathan

[20:25] <theorbtwo> You could check the SVN repo.

[20:26] <Limbic_Region> who doesn't appear to be around....

[20:26] <Limbic_Region> theorbtwo - huh?  Wouldn't it have gone to CPAN first?

[20:26] <castaway> you have a todo list full of people?

[20:26] <Limbic_Region> people I needed to talk to - yes

[20:26] <theorbtwo> His wife might get angry if he went around doing people.

[20:26] <theorbtwo> ...and very confused if he went around doing men.

[20:27] <stevan> Its the list of people to "take care of once and for all" I am worried about

[20:27] * Limbic_Region chuckles and is reminded of Ovid http://use.perl.org/~delegatrix/journal/24450

[20:29] <theorbtwo> Hm?  Ovid has lots of names, or what?

[20:30] <Limbic_Region> you aren't aware that Ovid recently had his CC # stolen and tracked down the criminals himself?

[20:31] <theorbtwo> Er, right.

[20:31] <theorbtwo> Nevermind.

[20:32] <theorbtwo> I thought stevan's mention of people to take care of once and for all reminded you of ovid, and you meant to link to one of ovid's several entries about it.

[20:32] <theorbtwo> (I read his LJ.)

[20:32] <Limbic_Region> ahhh - well in any case, it is weekend so I am off

[20:32] <Limbic_Region> TTFN all

[20:32] <theorbtwo> Later, Limbic!

[20:32] <theorbtwo> Have fun packing.  ;)

[20:32] * stevan add theorbtwo to his "list" ;)

[20:32] <theorbtwo> Oh, you have a LJ?

[20:33] <stevan> no just a  "list" (muwhahahahahah)

[20:33] <theorbtwo> Yeah, that was a joke.

[20:33] <stevan> :P

[20:37] <Corion> BTW, http://www.kill-them-all.de/ has lots of German punk mp3s (only by Die Ärzte) but it's good (live) punk :)

[20:39] <theorbtwo> (Oooh, I can type Ä without switching keyboard layouts now.)

[20:40] <theorbtwo> Can you suggest a good one for an introduction to the band?

[20:41] <theorbtwo> (compose key)++

[20:42] <Corion> theorbtwo: "Elke"

[20:42] <Corion> Wait - I'll look for some URLs :)

[20:43] <mauke> "es fing an, als sie mich anrief ..."

[20:44] <Corion> http://www.kill-them-all-space2.de/bootlegs/dzs2/08istdasalles.mp3 http://www.kill-them-all-space.de/bootlegs/dzs1/10elcattivo.mp3 http://www.kill-them-all-space.de/bootlegs/dzs1/09wieam1tag.mp3

[20:45] <Corion> mauke: Yeah, I'm just looking for a speed-punk version instead of the one live-funk version I've got here :)

[20:45] <Corion> Wie am 1. Tag isn't bad either

[20:46] <_metaperl> Corion, do you live in Germany?

[20:46] <castaway> ;)

[20:46] <castaway> good question that

[20:46] * theorbtwo wgets.

[20:46] <castaway> Is the Pope German?

[20:47] <stevan> Corion is the Pope?

[20:47] <mauke> no, bavarian (huhu)

[20:47] <Corion> stevan: No, I just pull his strings

[20:47] <castaway> good point mauke ,)

[20:47] <stevan> Corion: I knew there was more to you than Haskell and Perl6 :P

[20:48] <Corion> stevan: I want to streamline the process of string-pulling, that's why I need hyper-operators and junctions!

[20:50] <stevan> Corion: ahh, I see, so Pugs is one part of your plan to take over the world

[20:50] <Corion> stevan: Yes. Just in case my flying monkeys fail

[20:51] <stevan> I thought that was what the >>+<< operator was

[20:51] <stevan> a flying monkey

[20:51] <stevan> just very far away

[20:52] <Corion> stevan++ # >>+<< is the flying monkey operator

[20:55] <castaway> HTML is weird! *sigh*

[20:56] <Juerd> No, >>@<< is the flying monkey operator!

[20:56] <Juerd> All we need now is an infix @. Suggestions?

[20:57] <Juerd> (What, we have a \W ASCII character that has no meaning yet? MADNESS!)

[20:57] <stevan> Juerd: it only looks like that when the monkey gets closer

[20:57] <castaway> (hmm, or I'm silly.. )

[20:57] <castaway> this song is kinda boring

[20:57] <Juerd> castaway: HTML is weird AND you're silly. What do you think of this compromise?

[20:57] <castaway> sounds about right

[20:59] <castaway> "Ist das alles" is the entire text?

[20:59] <Corion> Oooo - my favourite song - Madonna's Dickdarm - http://www.kill-them-all-space.de/bootlegs/bremen09032001/32madonnasdickdarm.mp3

[20:59] <mauke> no, it's the refrain

[20:59] <Corion> castaway: That's the refrain, yes :)

[21:00] * stevan has no german speed punk, so he just queues up California Uber Alles

[21:01] <Corion> stevan: See "Madonnas Dickdarm" - there is some talking though, before the guitar hits :)

[21:06] <Corion> Hah. I've found why $_ doesn't get propagated into for blocks. for 1 { say } # doesn't mention $_ within the block, and thus the name never gets propagated to the block-names ... Now, how to fudge this :)

[21:06] <Corion> ( retVerbatimBlock is the offending part, together with ruleBlockLiteral, both in Parser.hs)

[21:06] <Corion> I guess a special Block just for ruleBlockLiteral is the first fix ...

[21:10] <theorbtwo> Woo!

[21:10] <theorbtwo> Grr.

[21:10] <theorbtwo> Well, it was working, then I did an svn up, and now it isn't.

[21:10] <Juerd> Corion: Then the rule has to change, because you can't at compile time know that a sub will or will not access $CALLER::_

[21:11] <Corion> Juerd: Hmm - no, it's not about $CALLER::_, which is fully specified resp. needs padwalking anyway.

[21:11] <Corion> theorbtwo: Maybe I broke some line endings at the end of Prim.hs again?

[21:11] <Juerd> Corion: for 1 { $say() }

[21:11] <Juerd> Corion: You can't know whether $say will use $_

[21:12] <Corion> Juerd: Yes, but $say won't see the topical $_, as $_ is lexical

[21:12] <Juerd> Corion: It will if it uses the $_ in CALLER::

[21:12] <Corion> The implicit topicals ( say() ) are now an exception to the rule ...

[21:12] <Juerd> Corion: Which is exactly how defaulting works.

[21:12] <Corion> Juerd: Hmmmmmmmmmm - that's true...

[21:12] <theorbtwo> Nah, up conflicts.  I'll fix them fairly quickly.

[21:13] <Corion> Juerd: That's another thing that needs to be fixed, true... Care to write a test "for" that case too?

[21:13] <Juerd> No, sorry

[21:13] <Juerd> Well, in fact: yes, but I won't

[21:14] <Juerd> I have to minimize coding as much as I can. It's too stressful, time consuming and addictive.

[21:14] <Juerd> (Although not-coding is also frustrating)

[21:14] <Corion> Juerd: Ah ;)

[21:14] <Corion> Oh :(

[21:14] <Juerd> As an example, I MSIE-proofed the design for convolution.nl/nieuw/site.plp

[21:14] <Juerd> As you can see in its source, it took quite some javascript to kick MSIE in order to do simple PNG things

[21:15] <Juerd> I also had to change the entire CSS based layout for this crappy "browser"

[21:15] * castaway cheats by devving in htmlkit, which previews using ie ;)

[21:15] <Juerd> It worked in firefox/mozilla/camino/omniweb, konqueror/safari, opera.

[21:15] <nothingmuch> http://www.ccc.de/biometrie/fingerabdruck_kopieren.xml?language=en

[21:15] <Juerd> And then I spent over 5 hours making it work with MSIE.

[21:16] <Juerd> castaway: That doesn't fix any of MSIE's problems. I needed the alpha channel of PNGs, which MSIE does not support in <img> tags.

[21:16] <nothingmuch> Juerd: there's a js hack

[21:16] <Juerd> castaway: You have to trick it into using the right library, by using a proprietary css attribute "filter" with the right thing

[21:16] <castaway> oh.. didnt nm just solve domething similar?

[21:16] <nothingmuch> yup

[21:17] <nothingmuch> although it's not quite solved

[21:17] <Juerd> nothingmuch: I didn't know that, but I wrote some JS myself. This was pretty easy.

[21:17] <nothingmuch> it's hacked

[21:17] <Juerd> nothingmuch: It also doesn't quite work on backgrounds

[21:17] <Corion> Huh? Where is "retTopicalizedBlock" defined? I only find it mentioned in Parser.hs ...

[21:17] <nothingmuch> http://woobling.org:81/ <-- view source

[21:17] <Juerd> nothingmuch: So I needed more JS, to handle horizontal repetition...

[21:17] <nothingmuch> oh, i dunno about backgrounds

[21:17] * castaway hands Corion a grep -r

[21:17] <nothingmuch> IE sucks so bad

[21:17] <Juerd> But the end result works: http://convolution.nl/nieuw/site.plp

[21:18] <Juerd> nothingmuch: The font is all weird and the page is mirrored! DEFACE! :))

[21:18] <Corion> castaway: I use Win32 find-in-files, which doesn't find it below src/ - which is why I'm asking :)

[21:18] <theorbtwo> Corion: These guys talk a lot, but sound like they'd be good not-live.

[21:18] <nothingmuch> yeah, some idiot made it all hebrew ;-)

[21:18] <nothingmuch> holy crap! your site is also gibberish

[21:18] <Juerd> nothingmuch: http://woobling.org:81/pngfix.js

[21:19] <nothingmuch> htdocs/pngfix.js

[21:19] <nothingmuch> sorry

[21:19] <Juerd> nothingmuch: That's some weird display, I expected plain text. Nice!

[21:19] <nothingmuch> thank catalyst

[21:19] * castaway doesnt find it anywhere at all ;)

[21:19] <nothingmuch> that's what 'die' looks like

[21:19] <Juerd> Thank you, catalyst

[21:19] <nothingmuch> http://woobling.org:81/htdocs/pngfix.js

[21:19] <Juerd> nothingmuch: Your JS does more or less the same as mine, but in a more complex way

[21:19] * nothingmuch updates the template

[21:19] <nothingmuch> it's not my js

[21:20] <nothingmuch> i'm just using it

[21:20] <nothingmuch> =)

[21:20] <Juerd> nothingmuch: I just abuse a 1x1 transparent pixel GIF

[21:20] <Juerd> nothingmuch: So I don't have to create a new object with equal size

[21:20] <Juerd> nothingmuch: See my code

[21:20] <nothingmuch> ah

[21:20] <nothingmuch> i won't know what it does

[21:21] <nothingmuch> i don't really know what mine does either

[21:21] <nothingmuch> just that it loads the png in a different way

[21:21] <Juerd> Mine just adds the filter and changes the image to something transparent

[21:21] <Juerd> That's all

[21:21] <Juerd> And it does so for all images, not only PNGs. I'm currently not using any other images anyway.

[21:21] <Juerd> The repetition code sucks though

[21:22] <nothingmuch> browsers suck

[21:22] <Juerd> And when I was done, I realised I wrote a lot of code for just three images :)

[21:22] <Juerd>     var xtotal = 785;

[21:22] <Juerd>     var xwidth = 273;

[21:22] <Juerd> That's 3 tiles only :)

[21:22] <Juerd> Just writing the HTML manually would have been easier probably

[21:22] <Juerd> But I didn't think of that at the time.

[21:23] * nothingmuch would normally wait for ie7 to come out

[21:23] <nothingmuch> but this site is not mine

[21:23] <nothingmuch> =)

[21:23] <Juerd> When it's out, it'll take at least a year before most people actually use it.

[21:24] <Juerd> It's easier to force them to use a better browser

[21:24] <theorbtwo> IIRC, MS has stated that there won't be an upgrade option other then buying a new OS that has it.

[21:24] <nothingmuch> be

[21:24] <Juerd> However, this is a commercial site and I wouldn't want to lose potential customers at the very first stage.

[21:24] <nothingmuch> it's easier to not develop web content

[21:25] <theorbtwo> Or not use non-binary PNG transparency, at least.

[21:25] <Juerd> One thing I hate about MSIE is that it requests my transparent 1x1 pixel GIF file *six times* per page.

[21:25] <Juerd> Because it is used 6 times.

[21:25] <Juerd> MORONS

[21:25] <theorbtwo> Though it should be noted that maps.google.com uses it heavily.

[21:25] <nothingmuch> haha

[21:26] <theorbtwo> Juerd: Get your webserver to send an expires header with it.

[21:26] <Juerd> theorbtwo: Google managed to forget most of our planet.

[21:26] <theorbtwo> I don't think they forgot about it so much as haven't gotten around to it yet.

[21:27] <Juerd> theorbtwo: It *does*

[21:27] <castaway> germany is next

[21:27] <Juerd> theorbtwo: It's a static file...

[21:27] <theorbtwo> Oh.  OK, that's kind of scary then.

[21:27] <castaway> supposing they can find an advertising partber ;)

[21:27] <Juerd> I'm thinking about including it in the JS source

[21:28] <theorbtwo> Corion, you still here?

[21:28] <theorbtwo> Does the PM CSS caching hack work with IE?

[21:28] <Corion> yep (I close Chatzilla when I'm away)

[21:28] <Corion> uh ... dunno, should, but I didn't test it I think

[21:41] <Corion> Hmmm. Seems like I'm getting nowhere tonight with my hacking on Parser.hs ... Have a good night all!

[21:44] <theorbtwo> To play with haddockability, try find src -name \*.hs|perl -pe 's/hs$/hpp/'|xargs make && haddock `find src -name \*.hpp` (after getting r2497).

[21:51] <jabbot> pugs - 2497 - We have haddockability!  (There's not ye

[21:53] <theorbtwo> Oh, fuck, I broke the build I bet.

[21:53] <Guest41009> anyone got mac os i can ftp

[21:54] <Guest41009> ?

[21:54] <theorbtwo> Guest41009: Do we know you?

[21:54] <Guest41009> lol

[21:54] <Guest41009> i dont think so

[21:54] <pjcj> src/Pugs/Help.hs:52:13: Not in scope: data constructor `PUGS_VERSION'

[21:54] <pjcj> known problem?

[21:54] <castaway> apple have one

[21:55] <Guest41009> anyone have a mac os x i can ftp or p2p fomr them

[21:55] <castaway> http://download.info.apple.com/Apple_Support_Area/Apple_Software_Updates/English-North_American/Macintosh/System/Older_System/System_7.5_Version_7.5.3/

[21:55] <theorbtwo> This isn't the place to be asking, Guest41009.

[22:00] <osfa> obPerl6: $macosxwarez.(any('ftp', 'p2p'))

[22:00] <osfa> gah, dunno the right syntax

[22:00] <Guest41009> e

[22:01] <Guest41009> lol

[22:01] <theorbtwo> given $macosxwarez {any($_.ftp, $_.p2p) }

[22:01] <Guest41009> anyone

[22:01] <Guest41009> got mac os i can ftp?

[22:01] <jabbot> pugs - 2498 - Whoops, broke the build!

[22:01] <jabbot> pugs - 2499 - More fixes for my stupidity -- this shou

[22:02] <Guest41009> anyone

[22:02] <Guest41009> got mac os x i can ftp

[22:02] <osfa> noone has ops here?

[22:02] <pjcj> Guest41009: do you know this channel is logged?

[22:02] <Guest41009> no

[22:02] <Guest41009> whats logged

[22:02] <pjcj> now you do

[22:02] <Guest41009> whats logged

[22:03] * hattmoward coughs

[22:03] <pjcj> who needs ops?  ;-)

[22:03] * castaway laughs

[22:03] <theorbtwo> Well done, pjcj.

[22:03] <osfa> theorbtwo: wouldn't that call both methods and return the values?

[22:03] <osfa> You'd want it to call either method whichever was available?

[22:04] <theorbtwo> Hm, g'point.

[22:07] <Limbic_Region> this is what happens when you drive on the wrong side of the road http://news.bbc.co.uk/1/hi/england/hampshire/4493713.stm

[22:08] * castaway pokes Limbic

[22:09] * Limbic_Region hopes castaway doesn't poke too hard as he just finished eating dinner

[22:16] * theorbtwo hopes he didn't break the build.

[22:16] <theorbtwo> src/Pugs/Parser.hs:940:4:    The last statement in a 'do' construct must be an expression

[22:16] <theorbtwo> (I changed a line there, but only the formatting of a comment.

[22:17] <theorbtwo> Anyway, goodnight, all.

[22:44] <pjcj> does anyone fancy applying http://pjcj.sytes.net/tmp/pugs.patch?

[22:44] <pjcj> or just making the change

[22:51] <pjcj> And here's another, if any committers are around:

[22:51] <pjcj> http://pjcj.sytes.net/tmp/pugs2.patch

[22:51] <pjcj> those two get the build going again

[22:51] <Limbic_Region> pjcj - do they fix the build on Win32?

[22:52] <pjcj> no idea, but I doubt they harm it

[22:52] <Limbic_Region> I was just doing a fresh checkout after theorbtwo b0rk stuff and went to sleep

[22:52] <Limbic_Region> well, I would be happy to check them in for you but I am afraid to with my local build being b0rk

[22:53] * Limbic_Region blames theorbtwo

[22:53] <pjcj> no problem - they're both trivial anyway

[22:55] <ingy> Limbic_Region: I forget, did you email me the patch?

[22:56] <ingy> Limbic_Region: maybe resend to [email@hidden.address]
[22:56] <Limbic_Region> you are kidding right?

[22:56] <Limbic_Region> you told me to nopaste it

[22:56] <Limbic_Region> so after I did it went into the ether

[22:56] <ingy> right sorry

[22:57] <revdiablo> pjcj: I can check them in if nobody else does.

[22:57] <Limbic_Region> just kidding

[22:57] * Limbic_Region will regen

[22:57] <ingy> very funny

[22:57] * revdiablo tries building

[22:57] <ingy> you scared me

[22:57] <Limbic_Region> well - the patch itself did go into the either

[22:57] <pjcj> revdiablo: thanks

[22:57] <Limbic_Region> but I still have the modified file

[22:57] <ingy> ok, I'm stepping out for a sec

[22:58] <ingy> I'll apply it as soon as i get back online

[22:58] * Limbic_Region emails it and then nopastes it

[22:58] <ingy> my friend rking wrote WebService::NoPaste

[22:59] <revdiablo> pjcj: ok, it built, I'll commit

[22:59] <ingy> diff -u foo bar | nopaste url

[23:00] <ingy> returns pasted url

[23:00] <ingy> anyway I must eat now...

[23:00] <ingy> laters

[23:00] <revdiablo> pjcj: should be good now

[23:00] <Limbic_Region> perlbot nopaste

[23:00] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[23:01] <Limbic_Region> ingy - I forgot the -u option on the email

[23:01] <Limbic_Region> but I will do it correctly in the nopaste

[23:01] <jabbot> pugs - 2500 - apply patches from pjcj to fix build

[23:02] <pasteling> "Limbic_Region" at 69.250.48.119 pasted "Perl6::Bible patch for ingy" (53 lines, 1.6K) at http://sial.org/pbot/9779

[23:02] <pjcj> revdiablo: thanks again

[23:02] * Limbic_Region kicks theorbtwo for breaking the build

[23:02] * Limbic_Region then heads off to watch jeopardy

[23:02] <revdiablo> pjcj: btw, they hand out commit access very liberally around here. you'd just need to find an admin to send you the invite...

[23:03] <theorb> Eeep.

[23:03] <theorb> I'm an admin.

[23:03] <theorb> Email

[23:03] <theorb> Er, Email?

[23:04] <pjcj> if I get a bit of time to hack on things I'll take the comitter bit, for now it doesn't seem worthwhile

[23:05] <pjcj> I'm hoping autrijus' latest Eval stuff will let me add coverage support

[23:05] <pjcj> but I know autrijus had a few ideas about that a while back

[23:09] <theorb> pjcj, thanks for fixing the build.

[23:09] <pjcj> no problem - I wanted to see how much faster things were ;-)

[23:12] <Limbic_Region> theorb - the email comment was meant for ingy not you

[23:12] * Limbic_Region wanders back off for the last hal

[23:13] <theorb> No, L~R, I was asking for pjcj's email addr to +&=COMMITTER him.

[23:28] <Limbic_Region> oh

[23:32] <pjcj> no problem - I wanted to see how much faster things were ;-)

[23:32] <pjcj> qpalzm

[23:33] <pjcj> hmmm - that went to the wrong window ;-)

[23:57] <Juerd> theorb++  # +&=COMMITTER

[23:57] <Juerd> perl6++  # making irc much more efficient :)

[23:58] <theorb> Don't ++ me too easy; I meant +|=

[23:58] <Juerd> Oh, you weren't going to make him committer-only?

[23:58] <Shillo> Hullo, all. :)

