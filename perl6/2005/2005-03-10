[00:01] <pjcj> that'll be mugwump

[00:05] <metaperl_> i was just feeding back about that mind-bending sendmoremoney he sent me

[00:06] <obra>  what was mind-beinding about it?

[00:06] <obra> bending

[00:07] <metaperl_> the huge query if nothing else

[00:11] * mugwump is in the house

[00:13] <mugwump> The query is fairly straightforward IMHO.  What's mind-bending is how MySQL manages to solve it in 80ms

[00:15] <mugwump> still can't commit it, though :(

[00:16] <mugwump> it's filtering a 10^8*2^4 (1.6B) size solution set in this time

[01:42] <theorbtwo> Any subethaeditors around?

[01:45] <lumi> Er, me

[01:45] <theorbtwo> I think I've been blacklisted by codingmonkeys.de

[01:45] <theorbtwo> Er, read, by the public test server.

[01:46] <lumi> Oh?

[01:46] <lumi> I have nil idea

[01:46] <lumi> how any of it works

[01:47] <theorbtwo> I'm trying to write a perl script that's interoperable with their protocol; they may have gotten annoyed at me sending them data their program doesn't like.

[01:47] <lumi> Why were you connecting to them?

[01:47] <lumi> You can start your own server, no?

[01:47] <theorbtwo> Yeah, I kind of just realized that.

[01:48] <lumi> I can't open a listening port, but are you connectable?

[01:48] <lumi> What's their public server btw?

[01:49] <theorbtwo> I can be quickly enough, but I can just have my script connect to the pearpc instance.

[01:49] <lumi> Okay, fair enuff :P

[01:49] <theorbtwo> codingmonkeys.de

[01:50] <lumi> Not working for me either, so it might not be personal

[01:50] <lumi> "omg you killed codingmonkeys" etc

[01:51] <theorbtwo> Oh.

[01:51] <theorbtwo> Not a very good demonstration for them, then...

[01:51] <lumi> What's the script for?

[01:52] <theorbtwo> Fodder for a protocol doc, so people who actually know lisp can implement it for emacs.

[01:52] <lumi> Hmmmm

[01:52] <theorbtwo> I don't actually own a mac.

[01:52] <theorbtwo> And I'd prefer to keep it that way.

[01:52] <theorbtwo> But reap the benifits of having one any way.  ;)

[01:53] <lumi> You were attacked by wild Macs when you were but a child?

[01:53] <lumi> You don't like cocoa?

[01:53] <theorbtwo> No, they were very orderly macs.

[01:53] <lumi> Ahh

[01:53] <lumi> Next time don't stack them on the top shelf

[01:54] * theorbtwo blames his high school.

[01:54] <lumi> Would your efforts help make an emacs see server as well?

[01:55] <lumi> Or just a client?

[01:55] <theorbtwo> Both, eventually.

[01:55] <theorbtwo> Client first, probably.

[01:55] <lumi> I can't express how cool that would be

[01:56] <theorbtwo> SEE seems to be very picky.

[01:56] <lumi> They're basing it on some published protocol, aren't they?

[01:56] <theorbtwo> On BEEP, which is a pair of RFCs.

[01:56] <theorbtwo> But I'm betting it's not to closely based on it, and BEEP is a very loose framework to begin with.

[01:56] <lumi> Does it crash on bad input? (Would explain where condingmonkeys.de went)

[01:59] <theorbtwo> Not sure.  Would explain it.

[01:59] <theorbtwo> But feeding my local copy the exact same intput doesn't seem to make it die.

[02:02] <lumi> Anyway, I'm calling it a night..

[02:02] <lumi> Godspeed on your quest!

[02:02] <theorbtwo> Thanks.

[02:02] <theorbtwo> But I seriously doubt it.

[02:03] <lumi> Nevertheless

[02:27] <ingy> theorbtwo: what is your quest?

[02:41] <stevan> ingy: how would I do a nested list in kwid?

[02:41] <stevan> - one list

[02:41] <stevan> -- nested list 

[02:42] <stevan> is that right?

[02:48] <hcchien> stevan++   # new pugs banner

[02:48] <stevan> hcchien: thanks 

[02:48] <ingy> stevan: that is one way

[02:49] <ingy> '-' lists are "definition lists"

[02:49] <stevan> ok

[02:49] <ingy> of the form:

[02:49] <stevan> so is '--' nested def lists?

[02:49] <ingy> - term

[02:49] <ingy> definition

[02:49] <ingy> - other term

[02:50] <ingy> other defintion

[02:51] <ingy> when definition gets to be more than one parapgraph, you'll need `.list`

[02:51] <stevan> ok

[02:51] <ingy> basically it should dwym

[02:51] <ingy> I'll make it so

[02:52] <ingy> I think I am going to go a little more towards pod's way of using blank lines to end blocks

[02:53] <ingy> so:

[02:53] <ingy> == this

[02:53] <ingy> header

[02:53] <ingy> is the same as

[02:53] <ingy> == this header

[02:53] <ingy> but...

[02:53] <ingy> == this header

[02:54] <ingy> * does not consume this bullet

[02:54] <stevan> how would it handle this

[02:54] <stevan> = bullets * are cool

[02:55] <ingy> same as

[02:55] <ingy> = bullets \* are cool

[02:55] <stevan> ok

[02:55] <stevan> so how far away from a parser are you?

[02:56] <ingy> bullets are /^\*+ /

[02:56] <ingy> well, I would like to say the kwid tools will be working by April 5th

[02:57] <ingy> because that is the end of my stay in Taiwan

[02:57] <ingy> where I plan to work on it

[02:57] <mugwump> when do you arrive in Taiwan. ingy?

[02:57] <ingy> let me check

[02:58] <stevan> so is buu working on it with you? 

[02:58] <ingy> no

[02:58] <stevan> and you are writing it in Haskell right?

[02:58] <ingy> he was working on a perl5 parser

[02:59] <ingy> and I am writing it all in Haskell yes

[02:59] <ingy> I also plan on making pugs be able to `require` Haskell modules

[02:59] <stevan> yes I have heard about that

[03:00] <ingy> so Kwid.hs will also act as Kwid.pm

[03:00] <stevan> Pugs XS :)

[03:00] <ingy> right

[03:01] <stevan> hmmm, so is buu still writing his perl 5 parser?

[03:01] <ingy> I don't know. I really don't know anything about the state of his work

[03:01] <ingy> since it isn't done in the open afaik

[03:02] <ingy> I will do all my Kwid stuff in the open

[03:02] <ingy> so you can hack on it too

[03:02] <ingy> it only makes sense to do it that way

[03:02] <stevan> I agree

[03:03] <stevan> however, my Haskell skills are non-existant, and I doubt I will have time to learn it

[03:03] <stevan> I may just hack a quick perl5 version so I can process the docs I am writing

[03:05] <metaperl> hi guys, I am doing my Perl 6 Junctions presentation now

[03:05] <metaperl> this is live from Thousand Oaks, CA

[03:06] <stevan> Helllloooooo Thousand Oaks!!!!

[03:06] <stevan> Are you ready to Rock and Roll!!!!!!

[03:06] <metaperl> yes! we are!

[03:06] <stevan> LOL

[03:06] <stevan> ingy: where is your kwid spec doc? I am not finding it

[03:07] <ingy> stevan: doc/

[03:07] <ingy> go metaperl!!

[03:07] <metaperl> here's my presentation : http://www.hcoop.net/~terry/perl/talks/p6-junctions/index.html

[03:07] <metaperl> ingy++ :)

[03:07] <stevan> danke

[03:08] <ingy> stevan: a quick hack kwid2pod would be easy and useful

[03:09] <stevan> ingy: ok, I was thinking kwid2html, but kwid2pod2html would work too

[03:09] <ingy> mugwump: I arrive in Taiwan on March 22nd at 7:18am

[03:10] <ingy> mugwump: or 7:50am, I really can't tell

[03:11] <jdv79> do python or ruby have junctions?

[03:12] <ingy> not afaik

[03:13] <stevan> ingy: what was all that talk I heard about kwid bytecode?

[03:13] <ingy> http://rubyforge.org/projects/junction/

[03:14] <ingy> stevan: bytecode is mostly for testing

[03:14] <stevan> ingy: any docs on that?

[03:14] <ingy> it is a compact serialization of a kwid (or pod) parse tree

[03:14] <ingy> I think so...

[03:15] <stevan> oh I see it

[03:15] <ingy> ext/Kwid/t/README

[03:15] <safrican> haha

[03:15] <safrican> i thought that was  regex

[03:15] <safrican> and i was like - what the heck ?

[03:15] <ingy> =)

[03:16] <ingy> it's the new pugs regex style I just wrote

[03:16] <safrican> haha

[03:17] <ingy> hi Schwern, we were just laughing at you

[03:17] <ingy> hahahaha

[03:17] <ingy> haha

[03:17] <ingy> ha

[03:17] <safrican> hehe

[03:17] <ingy> ok... done

[03:17] <safrican> :)

[03:18] <Schwern> Am I some sort of clown to you?

[03:18] <ingy> no, I just think you're funny, you know...

[03:18] <Schwern> Do I have funny hair, wear silly clothes and say stupid things for your amusement?

[03:18] <stevan> kick his a** Schwern

[03:18] <stevan> ingy you can take em

[03:18] <ingy> stevan: I already did take him

[03:18] <jdv79> stevan "the provoker"

[03:18] <ingy> for a whole year

[03:18] <Schwern> It was magical.

[03:19] <stevan> IRC FIGHT!!!!!

[03:19] <Schwern> GET OUT THE CREAMED CORN

[03:19] <safrican> go .*? !!

[03:19] <Schwern> Anyhow, I HAVE A BUG TO REPORT

[03:19] <Schwern> enough of this jocularity

[03:19] <ingy> stevan: does the bytecode make sense?

[03:20] <stevan> ingy: actually it does :P

[03:20] <stevan> more than kwid does at the momemnt

[03:20] <stevan> I think I will start with a kwid bytecode generator

[03:20] <Schwern> Installing /System/Library/Perl6/Kwid.pm

[03:20] <Schwern> Installing /System/Library/Perl6/Test.pm

[03:20] <Schwern> Installing /usr/bin/kwid

[03:20] <Schwern> kwid is not core, it shouldn't be installing there.

[03:20] <ingy> it *is* core

[03:21] <Schwern> Is it in Perl5?

[03:21] <ingy> no

[03:21] <Schwern> Then its not core.

[03:21] <ingy> what?

[03:21] <Schwern> Core in the sense of you're installing it in the wrong place.

[03:21] <Schwern> For a library

[03:22] <mugwump> But core in the sense that you don't have to include it to use it?

[03:22] <ingy> Kwiki installs `kwiki` in the same place

[03:22] <Schwern> installprivlib vs installsitelib

[03:22] <ingy> wait...

[03:22] <Schwern> It should go into (in my case) /Library/Perl/...

[03:22] <ingy> the lib or the bin

[03:22] <Schwern> Both, though in most cases core and site are the same for bin.

[03:22] <Schwern> As here.

[03:23] <Schwern> I think Pugs::MakeMaker is using the wrong config variables.

[03:24] <ingy> Schwern: Kwid is intended to be a core module as we are writing all the docs in it

[03:24] <ingy> Schwern: I doubt it

[03:24] <Schwern> Core in the Perl5 sense.  Not the Pugs sense.

[03:24] <Schwern> Oh, wait.

[03:24] <Schwern> I'm an idiot.

[03:24] <ingy> ok, I can believe that

[03:24] <Schwern> Didn't see it was going into Perl6/

[03:24] <ingy> :)

[03:24] <Schwern> Carry on.

[03:25] <ingy> Schwern: I remember from some deep dive into make utils code, that all lib paths match /perl/i

[03:25] <ingy> is that true

[03:26] <ingy> or can you embellish

[03:26] <Schwern> All lib paths?

[03:26] <ingy> well..

[03:26] <ingy> privlib and sitelib

[03:27] <ingy> and thus archlib and sitearch

[03:27] <Schwern> There's nothing stopping someone from making privlib /placenta/juan if they really want to

[03:27] <Schwern> So no

[03:28] <ingy> but i think Configure adds a 'perl' component to the path unless /perl/i

[03:28] <Schwern> I'd really doubt it would force such a thing.

[03:28] <ingy> I've seen this code

[03:28] <Schwern> It might suggest it as the default.

[03:28] <ingy> well right

[03:29] <ingy> if you give a prefix that already /perl/i then it doesn't add a perl dir

[03:29] <ingy> that much is true

[03:30] <ingy> basically what I am saying is that I heuristically make up the Perl6 libs from Perl5 ones

[03:30] <Schwern> Let's find out

[03:30] <ingy> so i may need to adjust those heuristics

[03:31] <Schwern> Pathname where the private library files will reside? (~name ok)

[03:31] <Schwern> [/ham/wild/lib/perl5/5.8.6] 

[03:32] <Schwern> Pathname where the private library files will reside? (~name ok)

[03:32] <Schwern> [/usr/local/perl/lib/5.8.6] 

[03:32] <Schwern> The first is the prefix /ham/wild the second is /usr/local/perl

[03:32] <Schwern> But beware, its common that this gets overridden.  Debian for example.

[03:33] <ingy> ok, well I'll at least add a die, and see if/when my scheme doesn't work

[03:42] <ingy> Schwern: see r566

[03:44] <nnunley> Ugh.  Still setting up my new laptop.

[03:45] <mugwump> nnunley, did you make sendmoremoney.p6?

[03:45] <nnunley> mugwump: Yeap.  I'm to blame.

[03:45] * nnunley grins.

[03:45] <nnunley> Looking forward to your fixes.

[03:46] <nnunley> I mostly did it to see if I could prod someone into better defining how autothreading would work.

[03:47] <mugwump> However you wouldn't want that script to end up making 1.6b threads that test a few conditions then finish

[03:47] <nnunley> Not at all.

[03:48] <nnunley> I have some stuff lurking in my drive to narrow the permutations down, but I assume you've done the same.

[03:49] <mugwump> First, the primary optimisation with that problem happens by treating each part of the expression as its own, not as a combined product.  Otherwise it can only really be solved by exhaustive search

[03:50] * nnunley nods.

[03:50] <mugwump> eg, breaking it down into D+E % 10 = Y, (floor((D+E)/10)+N+R)%10=E, etc

[03:51] <mugwump> I think that's far too difficult an optimisation for anything to make apart from a massive quantum supercomputer, like the ones we lug around in our heads

[03:52] <mugwump> Then it becomes simple enough that if you pass it into something highly optimised at finding combinations of values that meet certain conditions, like a SQL query processor, it can be solved in very few iterations

[03:52] * nnunley nods.

[03:52] <mugwump> eg, MySQL did it in <80ms on my PC

[03:54] <nnunley> So your solution uses something like continuations to backtrack?  Or did you continue to use the junctions metaphor?

[03:54] <nnunley> That is, in perl6?

[03:55] <mugwump> Yes - it's a simple optimisation of your script, so that if we have correctly identified a key characteristic of junctions then we have something achievable to work towards

[03:56] <mugwump> ie, it should be able to eliminate inconsistent solutions quickly

[03:57] <mugwump> I wish my commit would work :(

[03:57] <mugwump> oh, wait, I suppose I need to commit to darcs don't I?

[03:57] <mugwump> not http://svn.openfoundry.org:80

[03:57] <nnunley> darcs apply, no?  And then darcs send?

[03:58] <ingy> stevan: ping

[03:58] <mugwump> ah.  I've been using svk

[03:58] <nnunley> Or svk push

[03:59] <nnunley> I'm still a newbie with svk.  I've been using svn directly to make my commits.

[04:09] <nnunley> wee.  3 days until I arrive in London

[04:12] <ingy> nnunley: yow!

[04:12] <nnunley> ingy, yeap.

[04:13] <nnunley> i'm in high panic mode right now, trying to get my data backed up to my new laptop so i don't have to carry yet another harddrive with me.

[04:17] <nnunley> so what's new with you, ingy/

[04:17] *** safrican_ is now known as safrican

[04:17] <ingy> nnunley: working on 50 things at once as usual

[04:18] <nnunley> ingy, always a good state to be in if you can sustain it.

[04:21] <nnunley> ingy, how's your learning process with haskell/

[04:22] <ingy> nnunley: slow, I keep skipping around trying to find a tutorial i can grok

[04:23] <ingy> where grok = get it all at once without being too long

[04:23] <ingy> I'm a slow reader and I like dense material

[04:23] <ingy> usually

[04:24] <nnunley> Hrm.  Have you looked at the translation of the perl cookbook to haskell/

[04:25] <crysflame> .

[04:25] <ingy> nnunley: I was told not to look at that

[04:25] <ingy> PLEAC?

[04:25] * nnunley nods.

[04:26] <crysflame> people tell me not to give you ideas, ingy

[04:26] <nnunley> it doesn't seem like the greatest starting point.  on the other hand, it is a cognative mapping from perl to haskell.

[04:26] <ingy> I'm reading the Two Dozen one right now

[04:26] <ingy> crysflame: is that right!?!

[04:26] <crysflame> yeah, they're all #perl and usually half kidding

[04:26] <crysflame> i seed evil ideas, you implement evil ideas

[04:26] <ingy> true

[04:26] * crysflame grins

[04:26] <crysflame> hasn't stopped me yet

[04:26] * bd_ learned haskell by skimming the gentle intro and then writing an unlambda interpreter. Painful, but effective.

[04:27] <nnunley> is that online

[04:27] <ingy> nnunley: http://www.haskell.org/tutorial/index.html

[04:28] * nnunley gets very annoyed with x11vnc

[04:28] <ingy> the Two Dozen Lessons thing is not very good

[04:28] <ingy> Gentle looks good

[04:28] <hoowa> morning!

[04:28] <nnunley> my recommendation is the Haskell school of expressions...

[04:29] <nnunley> But there are stronger books out there.

[04:29] <nnunley> "learn haskell in 10e days"

[04:30] <mugwump> 10e?  28.18 days?

[04:31] * nnunley nods.

[04:34] <stevan> ingy: you around?

[04:39] <nnunley> stevan: He was a few moments ago.

[04:40] <ingy> stevan: yes

[04:41] <stevan> ingy: is this

[04:41] <stevan> == header2

[04:41] <stevan> and this:

[04:41] <stevan> ==               heaad2 

[04:41] <stevan> equivalent?

[04:41] <ingy> yes, they would prduce the same bytecode

[04:41] <stevan> in other words, should I ignore whitespace after the '==', but before a string

[04:41] <mugwump> hmm, `svk push' doesn't work, either

[04:41] <stevan> ingy: cool, thats what I thought

[04:42] <ingy> ==header2 is just plain text though

[04:42] <stevan> ok

[04:43] <ingy> that way ==foo== could be used in the future 

[04:43] <stevan> ok

[04:43] <ingy> that's why:

[04:43] <ingy> *this is bold and not a bullet*

[04:44] <ingy> * this is a bullet with *bold words*

[04:44] <buu> Oh god

[04:44] * buu runs away

[04:44] <stevan> LOL

[04:45] <buu> stevan: Attempting to write a parser?

[04:45] <stevan> buu: yes

[04:45] <stevan> did you get far on yours?

[04:45] <buu> Yeah I'm about 95% done

[04:45] <stevan> ahh

[04:45] <ingy> this is a line with asterisks and * no bolding *

[04:45] <stevan> buu: can I see it?

[04:45] <buu> yeah..

[04:46] <buu> Winning starcraft game atm

[04:46] <stevan> :)

[04:46] <buu> I have an older version at erxz.com/pugdoc.zip or something

[04:47] <buu> I just need to expand ** parsing to work for // and ``

[04:48] <stevan> buu: that version looks to be just a tokenizer/lexer

[04:49] <buu> Er, what did you want?

[04:49] <stevan> buu: an AST :)

[04:49] <buu> Ah.. no

[04:49] <stevan> kwid bytecode man!

[04:49] <buu> You could generate the bytecode trivially

[04:51] <mugwump> http://nopaste.snit.ch:8001/2015  # what am I doing wrong?  :(

[04:54] <hoowa> hihi

[05:11] <autrijus> greetings.

[05:11] <autrijus> stevan's banner is now in trunk.

[05:11] <autrijus> I need to run for $work :)

[05:11] <autrijus> so, see you in a bit.

[05:11] <autrijus> stevan++ # nice nice banner

[05:12] <mugwump> hey autrijus, I'm getting an authorisation error trying to commit via svk

[05:13] <autrijus> did you register?

[05:13] <autrijus> the openfoundry account that is

[05:14] <autrijus> there's no record of it

[05:14] <autrijus> did you click on the url in the invitation mail?

[05:14] <mugwump> I'm logged into it now.

[05:15] <autrijus> your userid?

[05:15] <autrijus> mugwump?

[05:15] <mugwump> yes

[05:15] <autrijus> ok, you're a committer now.

[05:15] <autrijus> have fun

[05:15] <mugwump> thanks

[05:15] <autrijus> 26th :)

[05:20] <mugwump> the 26th committer?

[05:20] <hcchien> I guess so. :)

[05:21] <mugwump> better than being use.perl.org member #1871 or slashdotter #30,000 I suppose :)

[05:35] <crysflame> leisuretown is back :) never seen it before

[05:35] <crysflame> very, very.. interesting

[05:35] <crysflame> er

[05:35] <crysflame> hi #perl6

[05:35] <crysflame> at least i have different nickname here

[05:37] *** flw is now known as flw_

[05:37] *** flw_ is now known as flw

[06:16] <Darren_Duncan> I noticed that there is a mixture of Perl 5 and Perl 6 modules in the /ext directory -- Test and Kwid are Perl 6, MakeMaker is Perl 5 -- should these be in separate dirs since they are different languages?

[06:45] <ingy> Darren_Duncan: no

[06:45] <Darren_Duncan> I hear you

[06:45] <ingy> ext contains core things that must be installed for pugs to work correctly

[06:46] <ingy> for now that includes some perl5 stuff

[06:46] <Darren_Duncan> okay - I thought it might be reasonable to clearly deliniate what runs inside Pugs and what runs outside Pugs

[06:46] <Darren_Duncan> had thought

[06:46] <ingy> eventually Pugs::MakeMaker (or something else will be redone in perl6)

[06:47] <ingy> eventually Pugs::MakeMaker (or something else) will be redone in perl6

[06:47] <Darren_Duncan> fyi, I'm about to do a checking, in a few minutes

[06:47] <Darren_Duncan> check-in

[06:48] <Darren_Duncan> quick question; what is the Perl 6 equivalent of "use lib 'foo'"?

[06:48] <ingy> maybe unshift @*INC, 'foo'

[06:49] <Darren_Duncan> that sounds like what "use lib" was supposed to replace

[06:49] <ingy> we don't have `use` yet

[06:50] <ingy> autrijus: for your journal you can report that "Ingy finally slept" ;)

[06:50] <ingy> zzzzzzzzzz&

[06:50] <Darren_Duncan> basically, I'm about to check in my test suite ... the main test uses several modules, which are in a subdirectory of t/ called lib/ ; I wanted to include that in the path that Perl 6 code sees

[06:51] <Darren_Duncan> in Perl 5 I have "use lib 't/lib' at the start of my .t file

[06:51] <Darren_Duncan> and it works great

[06:51] <Darren_Duncan> lacking a better answer, I'll unshift for now

[07:22] <autrijus> heh.

[07:22] <autrijus> ingy: thanks so much for your work :-)

[07:22] * autrijus starts backlogging

[07:26] <nothingmuch> morning

[07:30] <autrijus> greetings nothingmuch-san

[07:30] * autrijus still @ work

[07:31] * nothingmuch just got there

[07:31] <nothingmuch> crap, i closed mut

[07:31] * nothingmuch waits now

[07:35] <nnunley> mugwump:  BTW,  the send+more=money solution should be at least as readable as http://www.mozart-oz.org/documentation/fdt/node15.html 

[07:35] <nnunley> mugwump: The trick is finding the perl6 idiom that expresses things as nicely.

[07:36] <nnunley> Or forcing p6l to create it. :)

[07:36] <nnunley> Blah.  Must sleep.

[07:38] <autrijus> have fun :)

[07:39] <autrijus> (in your dream, that is)

[07:55] <Darren_Duncan> I just emailed a status report to p6c

[07:55] <autrijus> Darren_Duncan++

[07:55] <Darren_Duncan> the short of it is, more LKT updates, and the full test suite is ported

[07:56] <Darren_Duncan> at this point I have nothing more to do with that except respond to feedback people make, such as which bits aren't proper Perl 6

[07:56] <autrijus> woot. time to move on to other modules? :)

[07:56] <Darren_Duncan> In a couple weeks I'll port SQL::Routine, whose code size is a full 25X larger

[07:57] <nothingmuch> http://cagle.slate.msn.com/working/050309/keefe.gif

[07:57] <Darren_Duncan> although a full 1/3 of that is a data dictionary definition (multi-dimensional hash declaration) and won't really require any changes

[07:58] <Darren_Duncan> with that module, it may be easier to see what its unique qualities are

[08:00] <Darren_Duncan> something I did today with all my Perl 5 modules is based on a stated preference Larry Wall made on p6l, which is replace several thousand "return( ... );" with "return ...;"

[08:01] <Darren_Duncan> the multi-file regexp search and replace in my BBEdit text editor came in handy

[08:01] * nothingmuch would like a -r flag to perl -pie

[08:02] <Darren_Duncan> In the intervening few weeks, I'm going to focus more on updating my Perl 5 code, although I'll stick my head in here now and then ...

[08:02] <autrijus> that's cool :)

[08:03] <Darren_Duncan> I may start the SRT port in as little as a week ... it has a lot to do with its stability, how much I want to re-do later as the original changes

[08:03] <Darren_Duncan> if you're on any of the database-related lists, expect an announcement soon

[08:04] <Darren_Duncan> still, some Perl 6 features I learned about , I will be able to use in the SRT port, where I couldn't in the LKT port

[08:04] <Darren_Duncan> 'Roles' for one thing

[08:05] <nothingmuch> appearantly i've always dreamt of rollaxes

[08:05] <nothingmuch> email is so informative

[08:05] <nothingmuch> damnit, why isn't SA getting this stuff?

[08:05] <Darren_Duncan> what is SA?

[08:06] <nothingmuch> spamassassin

[08:07] <Darren_Duncan> ok

[08:13] <nothingmuch> ook!

[08:14] <nothingmuch> what a horrible day

[08:26] *** decay_ is now known as decay

[08:27] <Darren_Duncan> is it now?

[08:27] <nothingmuch> my day?

[08:28] <Darren_Duncan> I suppose

[08:29] <nothingmuch> uh

[08:29] <decay> wonder how long it will take to compile ghc on irix :)

[08:29] <nothingmuch> what did you mean then?

[08:29] <Darren_Duncan> how was your day?

[08:32] <nothingmuch> my day has just started

[08:32] <nothingmuch> it started bad

[08:32] <nothingmuch> because i used to be sysop

[08:33] <nothingmuch> and people are still asking for favours when problems are hard to fix

[08:33] <nothingmuch> brb

[08:33] <nothingmuch> here we go again

[08:33] <Darren_Duncan> that's unfortunate

[08:33] <Darren_Duncan> too bad they can't ask the person whose job it is to fix their problems

[08:37] <nothingmuch> well

[08:37] <nothingmuch> that person is wresteling with an urgent problem

[08:37] <nothingmuch> some raid died

[08:37] <nothingmuch> and anyway these questions are more of the 'wtf is going on?!' type

[08:37] <nothingmuch> and his subordinate is sick

[08:38] <nothingmuch> or 'how do i do xyz?'

[08:38] <nothingmuch> not so much 'can you reinstall blah'

[08:38] <Darren_Duncan> I understand

[08:38] <nothingmuch> which i'm notoriously quick at

[08:38] <nothingmuch> but then again, i haven't done more than ten minutes of real work in the hour and a half that i'm hear

[08:38] <Darren_Duncan> people ask me for help too, though it never was my job

[08:39] <Darren_Duncan> do you get paid for the time spent helping the other people?

[08:39] <nothingmuch> i am the local goat

[08:39] <Darren_Duncan> by your employer

[08:39] <nothingmuch> officially i'm the integrator

[08:39] <nothingmuch> i have a base salary

[08:39] <nothingmuch> and an overtime one, that i always get

[08:39] <nothingmuch> and people know i just work

[08:39] <nothingmuch> so that's not the issue

[08:39] <nothingmuch> i do what others don't

[08:40] <Darren_Duncan> you just don't like doing tech support?

[08:40] <nothingmuch> for example, if a test is running annoyingly slow, because a tool the dev team made is bad

[08:40] <nothingmuch> most testers will work around

[08:40] <nothingmuch> i'll fix the tool

[08:40] <nothingmuch> and that's ok, because it's part of my job

[08:40] <Darren_Duncan> that's a good quality

[08:40] <nothingmuch> no, i don't mind

[08:40] <nothingmuch> it's just that now i'm having trouble running coverage

[08:40] <Darren_Duncan> you're being efficient, and your fixing the tool helps others that use it

[08:41] <nothingmuch> which is difficult since these are systems tests, and sometimes they test memory usage, and gcov ruins that

[08:41] <nothingmuch> so i need to baby sit it

[08:41] <nothingmuch> and now there's crap flying everywhere

[08:41] <nothingmuch> and i keep getting distracted

[08:41] <nothingmuch> well, argueably i'm not in the short term

[08:41] <nothingmuch> that particular example was very good stuff

[08:41] <Darren_Duncan> I wish you well

[08:41] <nothingmuch> a shell script test thing was writing to a file

[08:41] <nothingmuch> and running a cmd on the file

[08:41] <nothingmuch> and sometimes NFS async was not 100% reliable

[08:42] <nothingmuch> so the tool had to be made to accept pipes

[08:42] <nothingmuch> the workaround was write to file, sleep 2, run tool

[08:42] <Darren_Duncan> I've heard that NFS shouldn't be counted on for anything important

[08:42] <nothingmuch> a test with 500 such calls... =)

[08:42] <nothingmuch> it can't =)

[08:42] <Darren_Duncan> or network filesystems in general

[08:42] <Darren_Duncan> something about not proper locking support

[08:42] <nothingmuch> in theory this can be fixed

[08:42] <nothingmuch> synchronization is even worse, though

[08:43] <Darren_Duncan> so I've heard on the SQLite ml, where they say not to use the db over a networked filesystem

[08:43] <nothingmuch> yeah, that's often an issue

[08:43] <nothingmuch> we have the source files comming off NFS

[08:43] <nothingmuch> and in theory scratch dirs are on local raids

[08:43] <nothingmuch> but sometimes the scripts write to the user's home dir

[08:44] <nothingmuch> this is hard to pin point

[08:44] <nothingmuch> since it's been cargo culted a lot

[08:44] <nothingmuch> so what do you do for a living?

[08:44] <Darren_Duncan> I write my own programs, currently

[08:44] <Darren_Duncan> between 2001 and 2003 ...

[08:45] <Darren_Duncan> I worked for a local business that made database-driven applications

[08:45] <Darren_Duncan> http://www.amavi.com/

[08:45] <Darren_Duncan> They were a good group, and I'm still on friendly terms

[08:45] <nothingmuch> so you're a contracted freelancer?

[08:46] <Darren_Duncan> however, I had this strong urge to make my own stuff, so I mutually agreed to be laid off ...

[08:46] <Darren_Duncan> when there was a drop in the amount of work to do ...

[08:46] <nothingmuch> ah

[08:46] <Darren_Duncan> since then, I'm working my way towards starting my own business ...

[08:46] <nothingmuch> so basically you wanted to move on, and given a good time to do so, you just did?

[08:46] <Darren_Duncan> making my own new programs for the mass market ...

[08:47] <Darren_Duncan> pretty much

[08:47] * nothingmuch is saving up for academia

[08:47] <Darren_Duncan> they were going to lay some people off anyway, and I made it easy for them, since I wanted time off to do my own thing anyway

[08:47] <nothingmuch> with no real experience or formal education wage is not very high

[08:47] <nothingmuch> but should increase

[08:47] <Darren_Duncan> I completed post secondary education prior to joining that employer

[08:47] <Darren_Duncan> and I learned a lot there that helps me now

[08:48] <Darren_Duncan> fyi, the drop of work was due to the then-current project being nearly completed, with just minor updates left, and they weren't challenging for me.

[08:48] <nothingmuch> i want to learn, but not compsci

[08:48] <nothingmuch> math and ling, and if i have enough money cinema too

[08:48] <nothingmuch> studying music now

[08:49] * nothingmuch will not see this kind of stuff at current workplace

[08:49] <Darren_Duncan> just recently things seem to be picking up there again, so I may go back there soon as a contractor, part time spent there and part time on my own thing

[08:49] <nothingmuch> well, i hope that works well

[08:49] <nothingmuch> contract jobs generally pay well when done part time

[08:49] <Darren_Duncan> that way I'll get some money, which I'm not getting currently on my own thing

[08:50] <Darren_Duncan> since my current project is heavily componentized, I may be able to apply parts of it at my contract jobs, such as the old employer, though I'm not assuming that will work

[08:50] <nothingmuch> that's generally a good plan

[08:50] <Darren_Duncan> my own personal project, for the mass market, is a database-driven app, being prototyped in Perl

[08:51] <Darren_Duncan> it is a system for managing data in an accurate and long-term adaptable fashion

[08:51] <Darren_Duncan> one of the first target uses is in genealogy

[08:51] <Darren_Duncan> and general research

[08:51] <Darren_Duncan> and education or law

[08:51] <nothingmuch> basically a maypole type thing, except more complete?

[08:51] <Darren_Duncan> and in creative writing, for tracking continuity in a story

[08:51] <nothingmuch> you take this thing, and use it to develop a custom app for a client?

[08:52] <Darren_Duncan> I'm not that knowledgeable about maypole, but I think my total package is higher end

[08:52] <Darren_Duncan> The idea is to sell copies to typical consumers, who can use it without any further help

[08:52] <Darren_Duncan> I plan for it to become ubiquitous like MS Office

[08:52] <Darren_Duncan> but less expensive, more reliable, and more portable

[08:53] <nothingmuch> web based?

[08:53] <nothingmuch> or really a gui?

[08:53] <Darren_Duncan> ubiquitous meaning useful for a wide variety of things, anyone can use it

[08:53] <Darren_Duncan> both web and gui

[08:53] <Darren_Duncan> The user interface is a separate module

[08:53] <Darren_Duncan> the first implementation will be web

[08:53] <Darren_Duncan> a gui will come later

[08:53] <nothingmuch> how do you plan to manage the admin overhead of DB backing and yet still keep it easy to use?

[08:53] <nothingmuch> embedded DB?

[08:54] <Darren_Duncan> one use of this is to drive information web sites

[08:54] <Darren_Duncan> like imdb.com or wikipedia.org

[08:54] <Darren_Duncan> the database back end is also a component

[08:54] <Darren_Duncan> people can use whatever database they want

[08:54] <nothingmuch> so it's a CMS, on steroids?

[08:54] <Darren_Duncan> if they don't want to choose, SQLite 3 will be used by default

[08:54] <Darren_Duncan> a SQLite solution is very consumer friendly ...

[08:55] <Darren_Duncan> all the data is in a single file, like a word processing document

[08:55] <nothingmuch> it is

[08:55] <Darren_Duncan> and they can have multiple files, stored anywhere

[08:55] <Darren_Duncan> power users can use Oracle or Postgres or something

[08:55] <Darren_Duncan> the system is multi-user to the core

[08:55] <Darren_Duncan> but typical users don't have to know that

[08:56] <nothingmuch> Rosetta is used for DBI schema/lang management?

[08:56] <Darren_Duncan> it would just work ... as easily as a typical genealogy app on a pc

[08:56] * nothingmuch has a pet project, used at work

[08:56] <nothingmuch> soon released (maybe)

[08:56] <Darren_Duncan>  my CPAN modules like Rosetta and SQL::Routine implement the back end for my app

[08:56] <nothingmuch> CDBI <-> SQLFairy

[08:56] <Darren_Duncan> I'm giving away the backend for free, charging for the front end

[08:56] <nothingmuch> what does rosetta actually do, btw?

[08:57] <Darren_Duncan> Rosetta and SQL::Routine together sort of resemble a number of DBI wrappers you see on CPAN, such as Class::DBI or Alzabo or whatever ...

[08:57] <Darren_Duncan> but they have a much greater emphasis on ensuring portability

[08:58] <Darren_Duncan> and a much more thorough support for constructing SQL from data dictionaries

[08:58] <Darren_Duncan> eg, you don't feed my stuff snippits of SQL because it can't construct what you want

[08:59] <Darren_Duncan> it's better than the others in several ways, though I am mainly marketing the portability side

[08:59] <Darren_Duncan> it is probably easier to demonstrate by example

[08:59] * nothingmuch 's DDL thing has declarative sugar... each My::CDBI::Class has a ::Schema, you use that instead

[08:59] <Darren_Duncan> however, since the stuff is so new, I haven't connected a few necessary bits for people to do everyday stuff like selects and inserts ... should work in a week or two though

[09:00] <nothingmuch> then you have the FIELDS method, the RELATIONSHIPS method, etc

[09:00] <nothingmuch> all very dwimmy

[09:00] <nothingmuch> those construct SQLFairy schema objects

[09:00] <autrijus> Darren_Duncan++ # wonderful p6c post

[09:00] <nothingmuch> and then pump DDL to the DBD

[09:00] <Darren_Duncan> part of your comment may have been cut off?

[09:01] <Darren_Duncan> my stuff is less abstracted than Class::DBI

[09:01] <Darren_Duncan> you see what is actually going on, in a manner of speaking

[09:01] <Darren_Duncan> One thing I hope will happen is that lots of the other DBI wrappers will decide to target my module instead of DBI, so I handle the portability issues, and they handle the "nice interface" and "super-abstraction" issues

[09:02] <Darren_Duncan> DBI is great if you want to write the SQL yourself

[09:02] <Darren_Duncan> its the fastest performing option

[09:02] <Darren_Duncan> but you have to work harder to get portability, or to use a data dictionary

[09:03] <Darren_Duncan> I liken it to comparing the likes of the C language and the likes of Java or Perl

[09:03] <Darren_Duncan> DBI is closer to the bare metal

[09:03] <nothingmuch> uhuh

[09:03] <nothingmuch> cdbi has been keeping me generally happy

[09:03] <nothingmuch> when i run into problems i solve them

[09:04] <nothingmuch> but i can not worry about many things, in the short term, which is a property i like

[09:04] <nothingmuch> then again, my project is not tightly coupled to CDBI

[09:04] <nothingmuch> if it starts annoying me too much i might switch to something else

[09:04] <nothingmuch> but so far i've been rather satisfied

[09:04] <Darren_Duncan> tell me, do you have to "work around" any limitations in CDBI, or is its standard interface all you need by itself?

[09:04] <Darren_Duncan> do you have to write any snippits of raw SQL?

[09:05] <Darren_Duncan> or access the underlying DBI object for any reason?

[09:05] <nothingmuch> so far i haven't needed to

[09:05] <nothingmuch> i'll need to someday soon

[09:05] <nothingmuch> my app's gui is not that smart

[09:05] <nothingmuch> it's brains are

[09:05] <nothingmuch> the brains only need persistence

[09:06] <nothingmuch> the gui will need joins, etc

[09:06] <Darren_Duncan> one thing about my solution is that it is intended to support very large and complicated apps, giving app writers the means to express what they really want, and yet make it all magically portable

[09:06] <nothingmuch> we'll see how cdbi lives up to that when we get there

[09:06] <nothingmuch> that's attractive

[09:07] <nothingmuch> all i needed so far is just 'this object stays from run to run'

[09:07] <Darren_Duncan> for example, you can use my module to define server-side stored procedures, triggers, etc, and they can install in any database, despite the difference in support for those things, or their syntax for doing so

[09:07] <Darren_Duncan> so far your needs are more abstract than mine

[09:07] <nothingmuch> what about exploiting niche features?

[09:07] <Darren_Duncan> such as?

[09:08] <Darren_Duncan> my solution is intended to support all useful features, including niche ones

[09:08] <nothingmuch> so how does that become portable/

[09:08] <nothingmuch> ?

[09:08] <nothingmuch> do you say 'oh, to do that i need xyz, can't port to that'?

[09:08] <nothingmuch> or do you work around silently?

[09:09] <Darren_Duncan> part of what my module does is find replacements for one feature in another database

[09:09] <Darren_Duncan> if database A can do a certain thing one way, and database B doesn't have that feature by name, but can emulate it another way, then each database's strengths are exploited

[09:10] <Darren_Duncan> some things I can't emulate reliably, such as transactions, they support it or they don't

[09:10] <Darren_Duncan> but any good database has transactions so I don't have to

[09:10] <nothingmuch> uhuh

[09:10] <nothingmuch> *cough* mysql *cough*

[09:10] <Darren_Duncan> InnoDB does it

[09:11] <nothingmuch> yeah, but for years...

[09:11] <Darren_Duncan> that's the engine I use by default when the user wants mysql

[09:11] <nothingmuch> i just don't trust the mysql attitude anymore

[09:11] <nothingmuch> it's 'uh, that's not fast enough, try again in a few years'

[09:12] <nothingmuch> it is -><- with 'make it work, make it work right, make it work fast'

[09:12] <Darren_Duncan> one reason for what I'm doing is to make it easier for people to switch databases

[09:12] <nothingmuch> contrary to that, sqlite gave up server admin overheads, and gave a much more usable database, which is just as fast

[09:12] <Darren_Duncan> that way, the vendors have more incentive to compete, because vendor lock in has in large part been eliminated

[09:12] <nothingmuch> that's a good cause =)

[09:12] <Darren_Duncan> SQLite is my current favorite database

[09:13] <nothingmuch> my app has something silly

[09:13] <Darren_Duncan> I know how much people moan about Oracle's high prices, but stay with them due to huge amounts of stored procedures etc written to it

[09:13] <nothingmuch> the DBI config part has a search list

[09:13] <Darren_Duncan> or other vendors like MS etc

[09:13] <nothingmuch> you can run the test suite against any DSN you find

[09:13] <nothingmuch> i have postgresql running on my box, some other box has sqlite

[09:13] <nothingmuch> mysql doesn't work because it can't unique() a bunch of fields with more than 500 chars altogether

[09:13] <nothingmuch> and i haven't yet defined the field sizes in my DDL ;-)

[09:14] <Darren_Duncan> now, separate parts ...

[09:14] <nothingmuch> can rosetta parse all those stored procedures, and reliably convert them to say, db2?

[09:14] <nothingmuch> or is it only for producing right now?

[09:14] <Darren_Duncan> SQL::Routine is just a container, internally like an abstract syntax tree, where all the SQL (ddl and dml and etc) detail goes

[09:15] <Darren_Duncan> external code can translate string SQL or other formats to or from that

[09:15] <nothingmuch> use sqlfairy

[09:15] <nothingmuch> branch it

[09:15] <nothingmuch> and make it create sql routine stuff too

[09:15] <nothingmuch> then commit the changes

[09:15] <nothingmuch> they usually accept

[09:15] <nothingmuch> you will get at least bidi ddl from many popular DB dialects for free

[09:16] <nothingmuch> and also funky graphing options

[09:16] <nothingmuch> my problem with sqlfairy is that it's reusability is 0

[09:16] <nothingmuch> brb

[09:16] <Darren_Duncan> anyone can create separate modules that translate to or from SQL::Routine models

[09:16] <Darren_Duncan> before I write interfaces to other modules (except DBI itself), I'm trying to make my stuff so good that other people want to do the leg work of interfacing

[09:17] <Darren_Duncan> better for them to want to come to me, than for me to want to go to them

[09:17] <Darren_Duncan> but I do what I can to make it easier for them

[09:19] <Darren_Duncan> Look at Pugs for similarity of sorts

[09:19] <Darren_Duncan> Autrijus came up with this out of the blue, and people flock to him because it's so great; he didn't really go around begging people to come like a "yet another"

[09:20] <Darren_Duncan> I'm hoping that what I'm doing stands out enough that people are compelled to come to it like the next greatest thing

[09:21] <Darren_Duncan> I'm trying to be better than a "yet another"

[09:21] <flw> bye

[09:22] <Darren_Duncan> In regards to your question: "can rosetta parse all those stored procedures, and reliably convert them to say, db2?" ...

[09:23] <Darren_Duncan> the answer is that my core modules form the foundation to make this easy

[09:23] <Darren_Duncan> I may also build the other parts so that this complete task can be done

[09:23] <Darren_Duncan> unless someone else beats me to it

[09:23] <Darren_Duncan> I'm focusing on the generator parts first

[09:24] <Darren_Duncan> so 'yes'

[09:27] <nothingmuch> ppbeh

[09:28] <Darren_Duncan> I hear you

[09:28] <Darren_Duncan> fyi, it's 1:30am here now

[09:28] <nothingmuch> i prefer that side of the am

[09:28] <nothingmuch> yesterday i went to sleep at 23:00

[09:28] <nothingmuch> i feel great because i slept a lot

[09:29] <Darren_Duncan> sleep is great

[09:29] <Darren_Duncan> of course, with my own hours, I get up at 10-11am

[09:29] <nothingmuch> i need to get up early

[09:29] <nothingmuch> and go to sleep late

[09:29] <nothingmuch> and sleep a lot

[09:29] <nothingmuch> to feel good

[09:29] <nothingmuch> =P

[09:29] <nothingmuch> i balance it out by sleeping 6 hours

[09:29] <nothingmuch> going to sleep at 1:30-2:00

[09:29] <nothingmuch> and waking up at 8

[09:30] <nothingmuch> 7:30

[09:30] <Darren_Duncan> I tend to need about 9-9.5 hours of sleep a night to feel good

[09:30] <nothingmuch> sometimes

[09:30] <nothingmuch> too much sleep is not good for me

[09:30] <nothingmuch> even worse than too little

[09:30] <nothingmuch> anything more than 8 hours is yucky

[09:30] <nothingmuch> 7 and a half seems to be the sweet spot

[09:30] <Darren_Duncan> at a very minimum I need 8 hours per night, hard to focus with less

[09:30] <Darren_Duncan> each person is different

[09:30] <nothingmuch> but then i get less stuff done

[09:30] <nothingmuch> uhuh

[09:30] <Darren_Duncan> some people get on really well with just 2-3 hours a night

[09:31] <Darren_Duncan> i hear there's one fellow in europe that hasn't slept at all for 20 years and is doing just fine

[09:31] <arcady> I know someone who sleeps once every 2 or 3 days

[09:31] <arcady> but that's kind of unusual

[09:31] <arcady> though useful for a college student

[09:32] <Darren_Duncan> now, you mentioned you wanted to be a musician, what else can you tell me on your ambitions there?

[09:32] <nothingmuch> i don't want to be a musician

[09:32] <nothingmuch> i'm enjoying playing music

[09:32] <Darren_Duncan> what did you say then?

[09:32] <Darren_Duncan> oh is that it?

[09:32] <nothingmuch> uhuh

[09:32] <Darren_Duncan> I remembered mentioning music several times

[09:32] <nothingmuch> learning

[09:32] <nothingmuch> but no where near advanced

[09:32] <nothingmuch> well, i spend a lot of time and money on it

[09:32] <Darren_Duncan> so what do you want to do?  is programming it, or something else?

[09:33] <nothingmuch> alongside photography

[09:33] <nothingmuch> i think i want to be a mathematician or a linguist or both, in some odd way

[09:33] <Darren_Duncan> you want to be a photographer?

[09:33] <nothingmuch> and leverage compsci to that advantage

[09:33] <Darren_Duncan> sounds interesting

[09:33] <Darren_Duncan> I like those things too

[09:33] <Darren_Duncan> did great in math at school

[09:33] <nothingmuch> art stuff is my hobby

[09:33] <nothingmuch> sort of

[09:33] <nothingmuch> i like writing

[09:33] <nothingmuch> photography

[09:34] <nothingmuch> did horribly in math at school =)

[09:34] <nothingmuch> plastic art

[09:34] <nothingmuch> i barely finished in fact

[09:34] <nothingmuch> music

[09:34] <nothingmuch> but i've never had the patience to learn to excel in any

[09:34] <nothingmuch> i blame it on personal difficulties though

[09:34] <Darren_Duncan> I like reading graphic novels - its my favorite artistic medium

[09:34] <nothingmuch> barely finished school as a whole

[09:34] <Darren_Duncan> I'm not competent to make any though, so never tried

[09:34] * nothingmuch enjoyed that lately

[09:34] <nothingmuch> sin city

[09:34] <nothingmuch> the maxx

[09:34] <Darren_Duncan> I don't read those

[09:34] <nothingmuch> they were nice

[09:34] <nothingmuch> what do you read?

[09:35] <Darren_Duncan> a variety of things ...

[09:35] <Darren_Duncan> however, they fall mainly into 2 categories ...

[09:35] <Darren_Duncan> X-Men and stuff like that

[09:35] <Darren_Duncan> and various manga titles

[09:35] <nothingmuch> xmen is a daunting task

[09:35] <Darren_Duncan> I started 12 years ago

[09:35] <nothingmuch> oh my

[09:35] <nothingmuch> nearly 1/4th of the way through?

[09:35] <nothingmuch> ;-)

[09:36] <Darren_Duncan> I've read most of the series

[09:37] <nothingmuch> Q is too close to tab and W

[09:37] <Darren_Duncan> as I said when you were out ... I've read most of the series

[09:37] <nothingmuch> oops, sorry

[09:37] <Darren_Duncan> I waited

[09:37] <Darren_Duncan> fortunately, there is that web archive of the IRC, so you don't miss anything

[09:37] <nothingmuch> for ...?

[09:37] <nothingmuch> new stuff?

[09:38] <Darren_Duncan> I mean #perl6 is archived

[09:38] <Darren_Duncan> so you can see anything you missed while not in here

[09:38] <nothingmuch> ah

[09:38] <nothingmuch> yes

[09:38] <decay> nothingmuch: get a touchstream keyboard ;)

[09:38] <nothingmuch> touchstrem?

[09:38] * nothingmuch wants a matias tactile pro

[09:38] <decay> so you can move your q a bit away from the tab :>

[09:39] <nothingmuch> clickety clickety click 

[09:39] <decay> nothingmuch: http://www.fingerworks.com/lp_product.html :)

[09:39] <nothingmuch> google found that for me

[09:39] <decay> rocks ;)

[09:39] <nothingmuch> i just don't know what it all means yet

[09:40] <Darren_Duncan> decay, you like those yellow balls, don't you?

[09:40] <decay> Darren_Duncan: balls?

[09:40] <Darren_Duncan> they're meant to look like faces

[09:40] <Darren_Duncan> at least thats how they show up on my client

[09:40] <Darren_Duncan> "emoticons"

[09:40] <decay> Darren_Duncan: you're on comic chat?

[09:41] <Darren_Duncan> I'm using Colloquy

[09:41] <Darren_Duncan> if you mean, do I discuss comics with people ... yes, mostly by email

[09:41] <Darren_Duncan> I'm on a few discussion lists

[09:42] <decay> Darren_Duncan: ohic, was just referencing a former microsoft product called comic chat that probably did the same (turn smileys into 'faces')

[09:42] <Darren_Duncan> still, its currently less interesting than the Perl stuff

[09:42] <Darren_Duncan> I think lots of clients do that

[09:42] <Darren_Duncan> in any event, I never use emoticons myself

[09:43] <rgs> I hate when people say "keep up the good work"

[09:43] <Darren_Duncan> what's really annoying is that internet newbies think that image-based emoticons are the best thing since sliced bread, and use them absolutely everywhere

[09:44] <Darren_Duncan> did my p6c and p6l comment in that regard annoy you

[09:44] <Darren_Duncan> ?

[09:44] <decay> hu?

[09:44] <Darren_Duncan> or actually I said, "thanks for the good work"

[09:44] <rgs> nope

[09:45] <Darren_Duncan> anyway

[09:45] <rgs> I'm mostly speaking about annoying clueless questioners or bug reporters that repeat that over and over, without being of any help.

[09:45] <decay> nothingmuch: what's really nice about it is, that you never ever need to take your hands of the keyboard again

[09:45] <Darren_Duncan> ok

[09:46] <Darren_Duncan> don't you love it when bug reporters give you something you can't reproduce?

[09:47] <nothingmuch> sorry, /me became busy again

[09:47] <Darren_Duncan> I think I'll get off now, its almost 2am here

[09:48] <Darren_Duncan> good whatever-time-of-day-or-night to you

[09:48] <nothingmuch> decay: i always had trouble coping with do it all gesture systems

[09:48] <nothingmuch> good localtime =)

[09:48] <nothingmuch> ciao Darren_Duncan 

[09:48] <nothingmuch> i'm skeptic about my ability to adapt

[09:49] <nothingmuch> and at $400 i'm not that eager to just try it ;-)

[09:49] <Darren_Duncan> what does $400 have to do with adapting?

[09:49] <Darren_Duncan> the keyboard, right?

[09:49] <lumi> I'm cmd-clicking all over

[09:49] <nothingmuch> that keyboard is roughly $400

[09:49] <nothingmuch> uhuh

[09:49] <Darren_Duncan> right

[09:49] <lumi> And morning

[09:49] <nothingmuch> cmd-clicking is fun, lumi =)

[09:49] <lumi> Or such

[09:49] <nothingmuch> that's a relative statement, lumi

[09:49] <lumi> I meant ctrl-clicking

[09:50] <nothingmuch> it isn't even morning in your time zone

[09:50] <nothingmuch> ah

[09:50] <Darren_Duncan> that reminds me of a saying of one of my computer profs ...

[09:50] <nothingmuch> in that case get a usb 3 button mouse

[09:50] <Darren_Duncan> "assembly is fun!"

[09:50] <nothingmuch> it is fun

[09:50] <nothingmuch> but not for real work

[09:50] <lumi> Goot 9:50gmt

[09:50] <lumi> s/oot/ood/ #meh!

[09:50] <lumi> IRCing through two tunnels != fun

[09:51] <Darren_Duncan> the same guy also liked to spell "wrong" as "rong" in his teaching examples

[09:51] <nothingmuch> heh

[09:51] <Darren_Duncan> double-negative

[09:51] <Darren_Duncan> as in "this is the rong way to do it"

[09:52] <lumi> Er, my point is adapting prolly not that hard

[09:53] <lumi> I mean, a decade of right-click, and like 2 years of middle-click-paste

[09:54] <lumi> Where are assignments in the Haskell?

[09:54] <nothingmuch> that's not like adapting to dvorak

[09:54] <nothingmuch> or gestures

[09:54] <nothingmuch> it's one simple action

[09:54] <nothingmuch> not a group of actions

[09:55] <lumi> I used dvorak, I got it sorta OK in under 5 hours

[09:55] <lumi> Definitely not as fast as my normal typing

[09:55] <lumi> But I stopped swearing :P

[09:55] <lumi> Also it makes your console more secure :P

[09:55] <lumi> That kb is first a kb, you can use or not any particular gesture, I guess

[09:56] <lumi> Also used a wacom tablet for some months.. It's not that hard to adapt

[09:58] <lumi> Ehm, best be mobile

[09:58] <nothingmuch> decay: hmm... maybe it actually is logical

[09:58] <lumi> I have a hunch my ride isn't coming

[09:59] <nothingmuch> given their return policy i think this can be done

[10:00] <decay> nothingmuch: it's not easy to adapt

[10:00] <decay> nothingmuch: was just the only solution for your q is to near to tab i could think of

[10:00] <nothingmuch> i thought it was more ackward than what their FAQ says

[10:00] <decay> you can actually redefine the place of keys on the keyboard

[10:00] <nothingmuch> do you own one?

[10:01] * nothingmuch is tempted by the ability to lean back and not touch the mouse

[10:01] <decay> nothingmuch: i want one, two people i know have one and i tested it for maybe two evenings

[10:01] <nothingmuch> and it seems capable enough to that, without having to give up the mouse's features

[10:01] <decay> is it really 400$? up here it's like 250 euros

[10:02] <nothingmuch> well, $339

[10:02] <nothingmuch> add shipping

[10:02] <nothingmuch> import overhead to israel

[10:02] <decay> hrm, maybe you can get one at ebay too

[10:02] * nothingmuch always rounds it up that way

[10:02] <nothingmuch> but then you wouldn't be able to return it

[10:02] <nothingmuch> i would rather know i can easily get rid of it with say a 25% loss

[10:02] <nothingmuch> that is, it cost me $100 to try it

[10:03] <nothingmuch> but, eh

[10:03] <nothingmuch> we'll see

[10:03] <nothingmuch> lunchtime

[10:03] <decay> i just bought a van, so keyboards are secondary :)

[10:03] * decay tries to compile pugs now

[10:03] <nothingmuch> hah

[10:03] <nothingmuch> i just bought a double bass

[10:03] <nothingmuch> next is a bike

[10:03] <nothingmuch> then a trumpet

[10:03] <nothingmuch> then we'll see

[10:03] <nothingmuch> ;-)

[10:03] <nothingmuch> ciao!

[10:19] <dada> hola

[10:47] <nothingmuch> hola

[10:47] <Juerd_> [anonymous monk]--  # the feature

[10:48] <Juerd_> I hate discussing something without having any idea who the other party might be

[10:48] <Juerd_> Especially because anyone can join in and claim they're the same person

[10:48] <nothingmuch> Juerd_: i think perlmonks owes anonymous monk it's popularity tholugh

[10:48] <Juerd_> nothingmuch: I don't.

[10:48] <Juerd_> Part, certainly

[10:49] <Juerd_> But have you ever seen the HUGE number of registered users?

[10:49] <nothingmuch> signing up is a process many people don't like doing

[10:49] <nothingmuch> i have

[10:49] <Juerd_> Anonymonks don't add a lot of valuable traffic anymore.

[10:49] <nothingmuch> it's about as big as the number of posts anonymous monks have

[10:49] <nothingmuch> well, today that's true

[10:49] <nothingmuch> but i think when PM started this might not have been the case

[10:49] <Juerd_> I'm not moaning about the past

[10:50] <Juerd_> The feature existed for a reason

[10:50] <Juerd_> And that may or may not be a good one. I don't really care.

[10:50] <Juerd_> I do question the current existance of the same reason

[10:51] <Juerd_> I don't mind wasting votes on anonymous posts

[10:51] <Juerd_> But it is very clear to me that when I vote anonymous posts, they're most often --

[10:51] <Juerd_> While most of my votes are ++

[12:13] <Shillo> Hullo!

[12:15] <autrijus> greetings Shillo

[12:16] * autrijus finally about to go home

[12:18] <Shillo> autrijus: *mutter* Subversion. !@#(!@#!@.

[12:18] <Shillo> It interacts with my proxy. Or rather, doesn't interact. :/

[12:19] * Shillo idly wonders if that swear is valid Perl6... ;)

[12:22] <autrijus> ha.

[12:22] <autrijus> I'm sorry, then

[12:23] <autrijus> your proxy isn't DAV-friendly it seems

[12:23] <Shillo> Actually it is.

[12:23] <autrijus> interesting.

[12:23] <Shillo> arch works properly with it. Problem seems to be ! in the filename

[12:23] <autrijus> I'll bbiab. home &

[12:24] <Shillo> (I /think/). It bounces me with 400 Invalied Request

[12:24] <Shillo> Er, Invalid. :/

[12:55] <Juerd_> 13:22 < Shillo> autrijus: *mutter* Subversion. !@#(!@#!@.

[12:55] <Juerd_> 13:23  * Shillo idly wonders if that swear is valid Perl6... ;)

[12:55] <Juerd_> Yes, if followed by an array reference

[12:55] <Juerd_> On the next line

[13:06] <autrijus> indeed.

[13:14] <theorbtw1> Allo, Joshua.

[13:14] *** theorbtw1 is now known as theorbtwo

[13:14] <autrijus> hi theorbtwo :)

[13:15] <theorbtwo> Ah, hi, autrijus.

[13:16] <theorbtwo> Anybody have easy access to an OSX box at present want to do me a quick favor?

[13:16] <autrijus> I'll get access to one soon, but not handy

[13:17] * autrijus finally starts to attack multidim data structure

[13:17] * theorbtwo has heard a lot of that today.

[13:17] <autrijus> a lot of ... what?

[13:18] <theorbtwo> A lot of people who use OSX, but only at home, and who are presently at work.

[13:18] <Coke_> I have a laptop sitting next to me.

[13:18] <autrijus> aye.

[13:18] <Coke_> I only have a 9600 baud network connection on it at the moment.

[13:19] <lumi> Hi

[13:20] <theorbtwo> Shouldn't need to do very much network IO, if you have SubEthaEdit installed.

[13:20] <lumi> How are you doing with that subetha?

[13:20] <theorbtwo> Not well; their test server seems to be down still, or possibly again.

[13:20] <Coke_> I do have subethaedit, actually.

[13:21] <Coke_> I'll fire up the network cxn.

[13:21] <autrijus> woot, my perlchina talk is online

[13:21] <autrijus> http://www.iperl.org/2.rm

[13:22] <theorbtwo> And sadly, I didn't save my dumps when I had them, because I figured there was a test server, so I could get them any time I wanted.

[13:22] * Coke_ was listening to howard stern this morning, and found out that Warren Tang is a photographer for Penthouse, and can't help but wonder if he's related. =-)

[13:23] <autrijus> not at all :)

[13:23] <Coke_> ok, network up, SEE up. 

[13:23] * Coke_ figured Tang was a common name. Ah well. =-)

[13:23] <theorbtwo> Great!  Try connecting to desert-island.dynodns.net

[13:23] <autrijus> there are far fewer family names in the Han people

[13:23] <autrijus> than western names

[13:23] <autrijus> I think <60 or so

[13:23] <autrijus> common ones

[13:23] <Coke_> connect how?

[13:23] * theorbtwo wonders if that's because they've been using family names for longer.

[13:24] <Coke_> (I have SEE installed - I never USE it though. =-)

[13:24] <theorbtwo> Hit the "internet" button on the toolbar, type it in the text-box.

[13:24] <Limbic_Region> afternoon James

[13:24] <theorbtwo> D'oh... it's in Chinese, isn't it?

[13:24] <autrijus> sure it is :)

[13:25] <dada> buuuuuh

[13:25] * dada --

[13:26] <dada> I finally managed to compile pugs, but my unary * does not absolutely work

[13:26] <dada> in fact, it is completely useless

[13:26] <autrijus> so it sort of works?

[13:26] <dada> it simply does nothing

[13:26] <dada> well, my first 15 useless lines of Haskell :-)

[13:27] <autrijus> I'd still like to see them :)

[13:27] <Coke_> Well, if you see a Coleda, it's related to me. there aren't that many of us in teh US. (maybe a dozen)

[13:27] <Coke_> I get "see://....." and "could not connect"

[13:27] <Juerd_> dada: You've written Inf times as much Haskell as I have

[13:28] <autrijus> mmm NaN times

[13:28] <Juerd_> inf isan

[13:28] <dada> perlbot: nopaste?

[13:28] <perlbot> Paste your code here and #perl will be able to view it: http://sial.org/pbot/perl

[13:28] <Juerd_> Or, rather, Inf.isa(Num) :)

[13:28] <Coke_> perlbot: seen obra?

[13:29] <pasteling> "dada" at 193.203.230.22 pasted "unary * that doesn't work" (15 lines, 661B) at http://sial.org/pbot/8071

[13:29] <Coke_> theorbtwo - I tried to reconnect, same message. Anything else?

[13:29] <theorbtwo> Coke, you're connected via SBC Northeast?

[13:29] <autrijus> well, NaN.isa(Num)

[13:30] <autrijus> (pugs supports for NaN and Inf)

[13:30] <autrijus> s/for/both/

[13:30] <theorbtwo> Ah, nifty!

[13:32] <theorbtwo> There's something wrong with my networking on the emulated ppc box, I think.

[13:33] <Juerd_> 14:33 < autrijus> well, NaN.isa(Num)

[13:33] <Juerd_> paradox! :)

[13:33] <Coke_> theorbtwo;that sounds about right. I'm using my mom's internet connection over a bluetooth enabled cell phone. Pretty sure that's what she has. =-)

[13:33] <Juerd_> Perhaps Num should override isa!

[13:33] <autrijus> NaNiaN

[13:33] <Juerd_> hehehe

[13:33] <Coke_> er, "dialup internet"

[13:33] <dada> NaN does Num :-)

[13:33] <Juerd_> dada: Right! :)

[13:34] <Juerd_> Pfew, logic's back :)

[13:34] <autrijus> heh :)

[13:34] <Coke_> disconnecting...

[13:35] <autrijus> heads-up: as of r572 interactive "shell" no longer prints ASTs for evalled code; you need the '?' prefix (i.e. ?code) for that

[13:35] <Juerd_> my class Foo::Bar { ... }  # valid?

[13:35] <dada> makes sense

[13:35] <theorbtwo> Oh, good; I found that annoying.

[13:36] <autrijus> :)

[13:36] <autrijus> now, would you like "my $x" declared in a REPL step be continued to the next line?

[13:36] <autrijus> pugs> my $x = 3

[13:36] <autrijus> pugs> $x

[13:36] <autrijus> 3

[13:36] <autrijus> currently the env is wiped for each REPL step.

[13:36] <autrijus> pugs> my $x = 3

[13:37] <autrijus> pugs> $x

[13:37] <autrijus> undefined var: $x

[13:37] <dada> I vote for wipe

[13:37] <autrijus> you got it :)

[13:37] <autrijus> I think wipe is better, too

[13:37] <dada> what a democracy :-)

[13:37] <autrijus> just wonder if folks find that inconvenient

[13:37] <autrijus> well, it's 2:0 :)

[13:37] <theorbtwo> I think continuing is more convient.

[13:37] <theorbtwo> A :wipe would possible be best-of-both-worlds?

[13:38] <autrijus> well... true.

[13:38] <dada> autrijus: did you look at my code?

[13:38] <autrijus> I don't feel strong about it

[13:39] <autrijus> yes, looking

[13:39] <autrijus> but have to go out buying some drinks

[13:39] <autrijus> will be back in 15 mins

[13:39] <dada> ok, later

[13:54] <autrijus> ...back

[13:55] <autrijus> dada: the logic is quite clear...

[13:55] <theorbtwo> Have enough to get you properly drunk now?

[13:55] <autrijus> uh, it's tea

[13:55] <autrijus> I don't easily get drunk by drinking green tea

[13:55] <autrijus> so no

[13:56] <theorbtwo> Hmm, tea sounds like a good idea.

[13:56] <autrijus> dada: this shoud make

[13:56] <autrijus> $a = *$b;

[13:56] <autrijus> expand $b and assign $b[0] to $a

[13:56] <autrijus> if $b contains a list

[13:56] <dada> yes

[13:56] <autrijus> yet it does not? :)

[13:56] <dada> I thought it should, but it doesn't

[13:56] <autrijus> ok, I'll trace. wait me a bit

[13:58] <Juerd_> 14:59 < autrijus> $a = *$b;

[13:58] <Juerd_> But?

[13:58] <Juerd_> Is that correct?!

[13:58] <Juerd_> I thought all * did was provide list context

[13:58] <autrijus> $a := *$b; # this maybe?

[13:58] <Juerd_> And please tell me scalars don't deref in list context

[13:58] <autrijus> I thought * is the derefer

[13:58] <Juerd_> No, that's still @

[13:58] <autrijus> please tell me if I'm mad

[13:59] <autrijus> $a = @$b; # like this?

[13:59] <Juerd_> That's the same as $a = $b though

[13:59] <Juerd_> If you want to splat and deref, * and @

[13:59] <Juerd_> $a = *@$b

[13:59] <autrijus> $a = *@$b;

[13:59] <autrijus> eww!

[13:59] <Juerd_> (I hope. Otherwise, things really are insane)

[13:59] <Juerd_> autrijus: Yes, but how often does this even happen?

[13:59] <autrijus> I swear I've seen "$a = *$b;" somewhere...

[13:59] <autrijus> since $b is only part of the name

[14:00] <autrijus> should recheck Syn/Apo

[14:00] <Juerd_> $b isn't flattenable

[14:00] <autrijus> so only lists can be flattened?

[14:00] <autrijus> *%h?

[14:00] <Juerd_> %h in list context flattens to a list of kv

[14:00] <Juerd_> And * provides list context

[14:00] <dada> and also $a = *@b;

[14:00] <Juerd_> That is - unless I am mad...

[14:01] <Juerd_> Fortunately @a = [ ... ] turns out to assign to @a[0] after all

[14:01] <Juerd_> That gives me some hope back :)

[14:02] <dada> Juerd_: then please reply http://www.nntp.perl.org/group/perl.perl6.language/19557 and say that I'm wrong :-)

[14:03] <Juerd_> dada: Not until I'm sure

[14:03] <Juerd_> And that requires some reading that I don't have the time for now

[14:03] <autrijus> hi fayland!

[14:03] <fayland> hi

[14:04] <dada> Juerd_: ok, but let's discuss this. maybe Larry already did some reading :-)

[14:05] <autrijus> indeed :)

[14:05] * autrijus chasing that thread

[14:05] <Juerd_> I really really really hope (and it is my current understanding) that * only provides list context, and is in that way a non-listop alias for "list"

[14:05] <Juerd_> *@foo, @bar

[14:05] <Juerd_> equals

[14:05] <Juerd_> list(@foo), @bar

[14:06] <Juerd_> IIRC

[14:06] <autrijus> wait wait

[14:06] <autrijus> split ne list

[14:06] <autrijus> splat ne list

[14:06] <Juerd_> splat

[14:06] <dada> mmm not

[14:06] <autrijus> for argument binding

[14:06] <Juerd_> This isn't argument binding

[14:06] <Juerd_> :='s LHS is special

[14:06] <dada> oh, sure, for argument binding it's different

[14:06] <autrijus> I thought the idea is that you can do it at caller site too

[14:06] <autrijus> sub foo (@a) { ... }

[14:06] <Juerd_> We're talking about the RHS now, which is just an expression, right?

[14:06] <autrijus> err

[14:06] <autrijus> sub foo ($a) { ... }

[14:06] <autrijus> foo(*@a);

[14:07] <Juerd_> Yes

[14:07] <autrijus> foo(list @a); # different

[14:07] <Juerd_> Oh, right

[14:07] <Juerd_> I hadn't thought of that detail

[14:07] <dada> yeah

[14:07] <autrijus> so, fundamentally different

[14:07] <Juerd_> Still, all it does is provide list context, right?

[14:07] <dada> and the first example in S03 is really scary

[14:07] <Juerd_> Yeah, list in scalar context still is an arrayref

[14:07] <autrijus> but list provides list context

[14:07] <Juerd_> Yes, but after that, it constructs a new arrayref in scalar context

[14:07] <autrijus> oh. I see wym

[14:07] <Juerd_> Which splat does not

[14:07] <dada> my @args = (\@foo, @bar); push *@args;

[14:07] <autrijus> so * means "force list context thru"

[14:08] <autrijus> not only "provide list context"

[14:08] <Juerd_> Yes

[14:08] <autrijus> this is muddy :-/

[14:08] <autrijus> dada: have you coded lwall's answer into tests yet?

[14:08] <dada> no, not yet

[14:08] <dada> I have only 1 test so far :-)

[14:09] <autrijus> ok. I think a test file is the best way to do this

[14:09] <dada> sure

[14:09] <Juerd_> It's important to note that the RHS * has nothing to do with the LHS *

[14:09] <autrijus> Juerd_: you mean for assignment.

[14:09] <dada> Juerd_: why not?

[14:09] <Juerd_> The LHS * is for slurpiness, the RHS * has nothing to do with that

[14:09] <autrijus> not for binding

[14:09] <Juerd_> They do both provide list context, though

[14:10] <Juerd_> autrijus: Assignment has no LHS *

[14:10] <autrijus> true and true.

[14:10] <autrijus> for binding, the RHS * also mandates slurpiness, no?

[14:10] <Juerd_> No, not at all

[14:10] <Juerd_> The only explicit way to indicate something is for the slurpy list is <== or ==>

[14:11] <autrijus> ETOOMANYSYMBOLS

[14:11] <autrijus> but, ok.

[14:11] <Juerd_> sub foo ($foo, *@bar) { ... }  foo(*@args)

[14:11] <Juerd_> That makes $foo be @args[0]

[14:11] <Juerd_> And @bar be @args[1...]

[14:11] <autrijus> sub foo ($foo, @bar) { ... }

[14:11] <autrijus> foo(*@args);

[14:11] <Juerd_> Same thing

[14:11] <autrijus> same?

[14:11] <autrijus> that's what I mean by forcing into LHS

[14:11] <Juerd_> The * in the signature is ignored when splatting, afaik

[14:11] <dada> no!

[14:12] <Juerd_> foo <== @args would leave $foo undef, and cram @args all into @bar

[14:12] <dada> that makes $foo = @args[0] and @bar = @args[1], not?

[14:12] <Juerd_> dada: Hm, good point indeed

[14:12] <Juerd_> It must be

[14:12] <dada> yes, I'm pretty sure

[14:12] <Juerd_> Unless perhaps, the ** is used

[14:12] <Juerd_> I never understood the need for ** before

[14:13] <dada> it should also die unless @args contains 2 emelents

[14:13] <autrijus> right.

[14:13] <autrijus> that is my reading.

[14:13] <Juerd_> So this is where you'd use **?

[14:13] <autrijus> dada: can you please code them into tests? :)

[14:13] <autrijus> I'm grokking your code now and trying to make it work.

[14:13] <dada> autrijus: yep

[14:14] <dada> Juerd_: ** should just be an eager *, but I have no clue where this should be used

[14:15] <Juerd_> Maybe ** does flatten arrayrefs

[14:15] <Juerd_> I don't see the point in spelling that ** instead of *@ though

[14:15] <autrijus> I think ** is the way.

[14:15] <Shillo> Juerd: <belatedly> Thanks for clarification. About the swear, that is. ;)

[14:15] <autrijus> Shillo: you're welcome #*($^&@(#%&!@$

[14:15] <dada> Juerd_: no, it doesn't flatten arrayrefs

[14:16] <Shillo> No comment.

[14:16] <dada> Juerd_: * is evaluated lazily, while ** is evaluated eagerly. this is the only difference AFAIK

[14:16] <Juerd_> Oh!

[14:16] <Juerd_> So *1..Inf isn't a problem, but **1..Inf is?

[14:16] <dada> yes

[14:16] <Juerd_> Thanks

[14:16] <autrijus> *[1..Inf] to be precise.

[14:16] <Juerd_> I finarry understand it

[14:16] <Juerd_> autrijus: No, that's an array reference, and thus not flattened

[14:17] <Juerd_> (I hope)

[14:17] <autrijus> I thought an arrayref is always flattened in list context.

[14:17] <autrijus> I thought.

[14:17] <autrijus> it seems the highlander types are prone to misunderstanding

[14:17] <Juerd_> I don't know for sure, but I certainly do hope scalars stay scalars in any context

[14:18] <Juerd_> Because otherwise you cannot expect sub foo ($foo, @bar, $baz) { ... } @args = ('foo', [], 'baz'); foo *@args to work as expected

[14:18] <Juerd_> Or wait

[14:18] <Juerd_> This is 1st/2nd level

[14:19] <Juerd_> I'll try to think of a relevant example

[14:19] <Juerd_> You know what? I can't think of any :)

[14:19] <autrijus> heh!

[14:19] <Juerd_> So *$foo can equal *@$foo for all I presently care

[14:20] <Juerd_> currently

[14:20] <autrijus> yay.

[14:20] <autrijus> I'm glad we agreed.

[14:20] <Juerd_> heh

[14:20] <autrijus> (because that's how pugs' AST.hs always assumed)

[14:20] <autrijus> (implicit deref that is)

[14:20] <Juerd_> * binds tighter than ,, right?

[14:20] <autrijus> ,, ?

[14:20] <autrijus> pugs> . *1,2

[14:20] <autrijus> {{  Syn ","

[14:20] <autrijus>     {App "&prefix:*" (1);

[14:20] <autrijus>      2}

[14:20] <autrijus> }}

[14:20] <Juerd_> C<*> binds tighter than C<,>, right?

[14:20] <autrijus> 'fraid not

[14:21] <Juerd_> Then foo($foo, *$bar, $baz) is a problem

[14:21] <Juerd_> With aforementioned ($foo, @bar, $baz)

[14:21] <Juerd_> and if $baz is an arrayref

[14:22] <Juerd_> Which you'd want to stay an arrayref when bound to $baz

[14:22] <autrijus> it'd be help if there is a operational semantics.

[14:22] <autrijus> i.e. what really happens when the processor sees assignment and binding and *

[14:22] <autrijus> in small-step languages

[14:22] <autrijus> I'll see if I can generate one.

[14:22] <Juerd_>     symbolic unary      ! + - ~ ? * ** +^ ~^ ?^ \

[14:22] <Juerd_> Is MUCH tighter than ,

[14:23] <Juerd_> This is good

[14:25] <autrijus> yeah, * is very tight.

[14:25] <autrijus> sorry, parsed your POD-formatted question the wrong way

[14:26] <Juerd_> Now to figure out what our new ,, does

[14:26] <Juerd_> It should be ,undef, :)

[14:26] <Juerd_> As in good old basic

[14:26] <lumi> Mhhhh

[14:27] <Juerd_> select ,,, .3;

[14:27] <lumi> That's a very bad idea, it's completely illegible

[14:27] <Juerd_> lumi: ;;; is valid

[14:27] <Juerd_> But ,,, is meaningless

[14:27] <Juerd_> It should imply undef imo

[14:27] <lumi> Those are just null statements, mean nothing, do less

[14:27] <theorbtwo> p5 ignores extra commas in lists, I see no reason p6 should change that.

[14:27] <Juerd_> undef is the expression variant of null statements

[14:27] <lumi> But blah $foo ,, $bar ,,,,,,,, $baz ,, 5 is illegible

[14:28] * Shillo gets 6.0.0.10 release... Compilecompile...

[14:28] <Juerd_> Yes, I'm not suggesting you use it like that

[14:28] <lumi> That's what happens in Basic

[14:28] <lumi> And that's what the named parameters are for, surely

[14:28] <theorbtwo> It doesn't generally come up except for a single trailing comma, which is quite nice that it's ignored.

[14:28] <Juerd_> But DBI.connect("some dsn",,, { RaiseError => 1 }) would be much better than DBI.connect("some dsn", undef, undef, { RaiseError => 1 })

[14:29] <Juerd_> Ignoring the fact that you wouldn't use positional arguments for RaiseError

[14:29] <theorbtwo> It would?

[14:29] <Juerd_> (DBI.connect("some dsn", :raise_error))

[14:29] <Juerd_> theorbtwo: *trailing* should be ignored indeed

[14:29] <dada> or DBI.connect("some dsn" :raise_error), even

[14:29] <Juerd_> But two commas in a row should properly separate THREE elements

[14:29] <lumi> Yes

[14:30] <theorbtwo> Some day, you're going to have to debug a problem where you wrote three commas, but only wanted two.

[14:30] <lumi> Sounds like a bug waiting to happen in generated code

[14:30] <theorbtwo> You will spend hours and hours staring at the code, wondering what could possibly be wrong, and not seeing it.

[14:30] <lumi> Or that, yup

[14:30] <Juerd_> theorbtwo: That's stupid to write regardless of how it's interpreted.

[14:30] <Juerd_> And it should probably emit a warning no matter anyway

[14:31] <Juerd_> But "foo",,"bar" as "foo", undef, "bar" makes an awful lot of sense to me

[14:31] <Juerd_> And I must admit that select ,,, .3 does have some appeal

[14:31] <Juerd_> Compared to select undef, undef, undef, .3

[14:31] <Juerd_> Even though select timeout => 3 is already solving the same problem in another way

[14:31] <lumi> So *(,) is the new undef?

[14:31] <Juerd_> Don't forget oneliners

[14:32] <Juerd_> lumi: No, that's a trailing comma :)

[14:32] <Juerd_> And thus ignored

[14:32] <lumi> What is it trailing?

[14:32] <Juerd_> It's not before any term

[14:32] <Juerd_> ,,,,,,,,,,,,,,,,,,,,,,, and the end of a list should still be ignored

[14:32] <Juerd_> ,,,,,,,,,,,,$foo though, should be many elements

[14:33] <theorbtwo> That's why I suggested always ignoring.

[14:33] <lumi> So you eat undefs off the end of a list

[14:33] <theorbtwo> Removes the "trailing" bit from the rule.

[14:33] <Juerd_> lumi: Not explicit undefs

[14:33] <theorbtwo> Simple rules are a great goodness.

[14:33] <Juerd_> theorbtwo: Simple rules are not for Perl, imo

[14:33] <Juerd_> Perl should dwym

[14:33] <lumi> Is (,) anything? It looks like a term

[14:34] <Juerd_> lumi: It looks like an empty list

[14:34] <lumi> For some values of "looks"

[14:34] <Juerd_> , is the list constructor

[14:34] <theorbtwo> Looks like an empty list to me too.

[14:34] <autrijus> (,) looks like a esyntax level

[14:34] <Juerd_> Even though it no longer provides list context

[14:34] <autrijus> error

[14:34] <Juerd_> If trailing commas are ignored, so should lone commas

[14:35] <autrijus> (,1,2,3)

[14:35] <lumi> What about er, opposite-of-trailing commas?

[14:35] <Juerd_> That should be undef, 1, 2, 3 imo

[14:35] <lumi> Yes, those

[14:35] <autrijus> leading comma is p5 errors

[14:35] <autrijus> not seeing how useful it is

[14:35] <Juerd_> Yes, it's an error in perl 5 now

[14:35] <Juerd_> It should be implying undef terms imo

[14:35] * lumi thinks of the "empty pattern"

[14:35] <Juerd_> order trailing, leading

[14:35] <theorbtwo> Leading comma is nice for a purticular style of writing long lists: Always begin with a comma, or always end with a comma.

[14:35] <autrijus> as long as it's not a ruling I'll continue to implement it as an error

[14:35] <lumi> It's now a syntax error, right?

[14:35] <autrijus> lumi: yeah

[14:36] <theorbtwo> Keeps "first" and "last" elements from being special.

[14:36] <autrijus> lumi: in p5, p6 and haskell

[14:36] <Juerd_> theorbtwo: I ***HATE*** that style in Perl.

[14:36] <lumi> I mean like /(foo|bar|)/

[14:36] <Juerd_> http://perl.4pro.net/pcs.html  # die!

[14:36] <theorbtwo> I would dislike the leading comma style as well, prefer the ending style.  But it's a valid choice for someone to make.

[14:37] <Juerd_> lumi: There it's very different because in rules, strings are not quoted.

[14:37] <Juerd_> And you thus have a null string

[14:37] <theorbtwo> lumi, /(foo|bar|)/ is quite different, because... yeah, what juerd said.

[14:37] <theorbtwo> That's the correct way of writing an empty string in a re alternation.

[14:37] <Juerd_> And this null string is very misleading

[14:37] <Juerd_> Which is why it's now forbidden

[14:38] <Juerd_> (foo|bar|<null>) is what you must use if you really mean it.

[14:38] <lumi> Isn't it a similar, if less deadly, error to have a leading comma?

[14:39] <theorbtwo> I thought that was just for REs consisting /only/ of the null assertation.

[14:39] <lumi> Everywhere, I think

[14:40] * theorbtwo shrugs... I still think that if you want an undef, you should write one...

[14:40] <theorbtwo> But if leading and trailing commas are ignored, that's good enough for me.

[14:41] <Juerd_> If undef were aliased u, I'd agree

[14:41] <Juerd_> But it's a lot of typing for nothing

[14:41] <Juerd_> :)

[14:41] <theorbtwo> I certianly hope adverbs will make it come up a lot less.

[14:41] <lumi> sub u () { undef } # ?

[14:41] <Juerd_> lumi: &u ::= &CORE::undef

[14:41] <Juerd_> But yeah

[14:41] <lumi> Ah

[14:41] <Juerd_> Still, that's USELESS for oneliners

[14:42] <lumi> True

[14:42] <lumi> So leading commas could be in the oneliner pragma

[14:42] <Juerd_> Please, let's accept for a change that oneliners are half of Perl's reason to exist.

[14:42] <lumi> Or whathaveyou

[14:42] <Juerd_> Perl 6's design appears to ignore oneliners greatly

[14:42] <Juerd_> They're not as important as big programs, I agree

[14:42] <Juerd_> But there is a reason the great languages ruby and python and php are all almost never used for oneliners

[14:43] <Juerd_> (Where "great" refers to popular)

[14:43] <rgs> didn't larry said that -e was implicitly turning strict off in perl 6 ?

[14:43] <autrijus> I thought ruby is okay for 1liners

[14:43] <autrijus> rgs: yes he did.

[14:44] <Shillo> Hm. zsh should be able to autoindent perl from its builtin editor. :)

[14:44] <Shillo> (well, and python and ruby)

[14:45] * Shillo can imagine that. gcc -o zsh ... ... ... -lemacs ...

[14:45] <Juerd_> rgs: Yes, but does that help with named arguments?

[14:45] <Juerd_> I think serious thought should be given to adding short versions of named arguments

[14:46] <Juerd_> So that the imaginare :raise_error can also be written as :re

[14:46] <Shillo> Juerd_: The one I know of is :argname<stringvalue>

[14:46] <Shillo> And :argname to mean argname => 1

[14:46] <Juerd_> I suggested "+$raise_error is short<re>" before, but it was never really answered

[14:46] <Juerd_> Shillo: That doesn't make argname any shorter

[14:46] <Juerd_> +$verbose is short<v> is the canonical example

[14:46] <Shillo> Oh. Now I get it.

[14:47] <Juerd_> Like --verbose and -v

[14:47] <Juerd_> select undef, undef, undef, 0.3 is a lot of typing just to get usleep(.3)

[14:47] <Juerd_> Of course, sleep should be high res by default, but that's besides my point

[14:47] <Juerd_> select ,,,.3 is one way of fixing it

[14:47] <Juerd_> select timeout => .3 is another, but it's still a lot of typing for a oneliner

[14:48] <Juerd_> select :to<.3>'d fix that

[14:48] <Juerd_> Although passing a string feels weird

[14:48] <Juerd_> So let's make that

[14:48] <Juerd_> select :to(.3)

[14:48] <Juerd_> :)

[14:48] <Juerd_> s/to/t/ # even better

[14:48] <Juerd_> (because 'to' is a word)

[14:48] <Shillo> macro prefix:, (Str $rhs) { return "(undef, $rhs)"; }

[14:48] <theorbtwo> Can somebody find a case where it's /not/ beside the point?

[14:48] <Shillo> ?

[14:49] <Juerd_> Shillo: Possibly - still, any "define it yourself" answer is completely unacceptable in the context of oneliners

[14:49] <Shillo> Then do select *,,,.3

[14:49] <theorbtwo> That is, where it's not trivially fixed by better API design?

[14:49] <Juerd_> theorbtwo: Hardly, because I'm limiting myself to well known perl 5 for examples, so you all know what I mean

[14:50] <Juerd_> Hence select and DBI

[14:50] <Shillo> Juerd_: What does perl5 do there?

[14:50] <Juerd_> "is short" would fix all this in the most wonderful way

[14:50] <Juerd_> Shillo: syntax error

[14:50] <Shillo> I mean, is there any shorter form for usleep?

[14:50] <Juerd_> usleep isn't core

[14:50] <Shillo> (based on selecT)

[14:50] <Shillo> Hmm. perl -e should include ~/.eperl?

[14:51] <Juerd_> NO!

[14:51] <Juerd_> perl's used in many shell scripts

[14:51] <Juerd_> It should not EVER include a user defined script implicitly

[14:52] <Shillo> Oif. Right.

[14:52] <autrijus> indeed.

[14:52] <Juerd_> Besides that, I want short answers on IRC ;)

[14:52] <Juerd_> Which is another reason not to cram these things into -e or another switch

[14:52] <Juerd_> perlgeek-to-perlgeek conversation should also be optimized

[14:52] <Juerd_> It's something that happens a lot in certain channels

[14:53] <autrijus> heh.

[14:53] <Juerd_> If the real thing is too long to type, you very quickly fall down to pseudo code

[14:53] <Juerd_> While if the real thing has a short way to be expressed, that's how you communicate it

[14:53] <Juerd_> ~~somefunc is already used to mean "somefunc in scalar context"

[14:54] <Juerd_> And in Perl 6 context, I've seen +@foo to mean "the number of elements in @foo" many times already.

[14:54] <Juerd_> Perl's not just a programming language

[14:54] <Juerd_> It has a very important cultural aspect

[14:55] <Juerd_> And think of golf too

[14:55] <Juerd_> >><< provides new fun for golf

[14:55] <lumi> And the obfuscation people, of course

[14:55] <Juerd_> But it shouldn't be completely screwed up by longer keywords

[14:55] <Juerd_> I personally don't care about obfuscation

[14:55] <Juerd_> And don't think ANY language design will stop the obfuscators

[14:56] <lumi> Hm

[14:56] <Juerd_> Or encourage them

[14:56] <lumi> Can there be ", ," and not ",," ?

[14:56] <autrijus> PROCEDURE DIVISION

[14:56] <Juerd_> That'd be bad

[14:56] <Juerd_> autrijus: ouch :)

[14:56] <Juerd_> 000001 use strict;

[14:56] <Juerd_> Please, god, no.

[14:56] <lumi> Heh

[14:56] <Shillo> I'm not sure about the encourage part. (*!(@#*()!@ in J is probably not only valid, but potentially useful. :)

[14:56] <autrijus> SI`SK``IS`ISK``SI`KKI

[14:56] <lumi> Unlambda?

[14:56] <autrijus> (lazy k)

[14:57] <Juerd_> That's very sik, eh sick indeed.

[14:57] <autrijus> lazy k > unlambda any time

[14:57] <Shillo> autrijus: I dare you to use c in unlambda. :)

[14:57] <autrijus> Shillo: Lazy K is always C

[14:57] <autrijus> implicitly!

[14:57] <Shillo> C is callcc, IIRC

[14:57] <autrijus> oh. sorry. thought d

[14:57] <autrijus> (delay)

[14:59] <Shillo> When COBOL gets mentioned, I immediately think about loop macro in Common LISP. (loop for i in some-data when (oddp x) collect x)

[15:00] <Juerd_> (((((((((( lisp-grouphug ))))))))))

[15:00] <Shillo> Friend of mine couldn't believe one could do list comprehentions with this until I enlightened him. -- Heh!

[15:00] * Steve_p (((( hugs )))) Juerd_

[15:00] <Juerd_> :))

[15:00] <Juerd_> eh

[15:00] <Juerd_> :)

[15:01] <Steve_p> You've gone paren happy :)

[15:01] <Juerd_> Yeah, I usually avoid them

[15:01] <Juerd_> So I had some spares

[15:02] <Shillo> loop is paren-unhappy. Which is -why- it looks like COBOL, rather than LISP.

[15:02] <Steve_p> Actually loop is a Pascal-like structure.  PL/SQL actually uses that type of construct a lot

[15:04] <Shillo> Steve_p: Uhm... don't think so. Problem with loop is that it doesn't have any internal separators.

[15:04] <Shillo> Steve_p: (loop with a = 1 with b = 3 for i in 1 to 5 for j in 2 to 6 for x across vector when (is-blue sky) collect i collect j collect k)

[15:05] <lumi> Evil

[15:05] <Shillo> Although, it's a good answer to those who claim that lisp has too many parens. ;)

[15:06] * Steve_p didn't think loop looked like that, but he is frequently wrong :)

[15:06] <Shillo> There -is- such thing as too few parens in lisp.

[15:06] <lumi> I was trying to figure out a way to pythonize (as it were) scheme

[15:07] <lumi> Or hm

[15:07] <lumi> Haskellize. That's it.

[15:07] <Shillo> http://www.lispworks.com/documentation/lw44/LWRM/html/lwref-83.htm

[15:07] <Shillo> (scroll to the bottom. Fear and loathe)

[15:07] <theorbtwo> Haskelate?

[15:08] <lumi> And this is actually in clisp?

[15:08] <lumi> Goddess

[15:08] <xerox> HM

[15:08] <Shillo> lumi: Oh, I mostly have my fun in Lisp, actually. My only gripe with it are libraries and practicalities, not syntax.

[15:08] <xerox> lumi, what do you mean with `pythonize scheme' ?

[15:08] <xerox> lumi, ...and clisp is an implementation.

[15:08] <Shillo> (mostly I just DON'T use more than 3-4 clauses in loop macro)

[15:09] <lumi> I mean, try to get rid of the parens, replace them with indent

[15:09] <lumi> Not all the parens, but as many as you'd like

[15:09] <xerox> lumi, why?

[15:09] <lumi> For legibility and correctness

[15:10] <lumi> And because I had a free weekend

[15:10] <Shillo> Haskel indenting rules would make more sense, actually.

[15:10] <xerox> Indentation makes the code very much readable. But the parens are good, to me.

[15:10] <Shillo> I just don't see parens. :)

[15:10] <xerox> Shillo, exactly.

[15:11] <lumi> Until the end of a function has )))))) 3 )))

[15:11] <lumi> It sort of melts the brain of me

[15:11] <xerox> lumi, not if you use a good editor.

[15:11] * lumi exaggerates immensely, but not abotu the brainmelting

[15:11] <lumi> But emacs works better with lisp

[15:11] <xerox> Do you know M-( ?

[15:11] <Shillo> lumi: I don't see those, either, and I just punch the ) until emacs says I'm okay.

[15:11] <xerox> Shillo, yeah, or M-(.

[15:12] <lumi> No, my emacs-fu is weak

[15:12] <xerox> Or even sedit.el.

[15:12] <Shillo> lumi: That's until it highlights the right open paren.

[15:12] <Shillo> lumi: Nicer than C, because I -know- I can chain-punch ), and not have to do )])]])

[15:13] <xerox> (That is an attempt to make a scheme structure editor in Emacs)

[15:13] * xerox agrees with Shillo completely.

[15:13] <xerox> We went a little OT, btw :)

[15:14] <Shillo> Hm. Yep. :/

[15:14] <lumi> This is possible..

[15:14] <lumi> Thanks for the tips, though :)

[15:15] <autrijus> OT is fine :)

[15:15] * autrijus learned a lot

[15:15] * Shillo notes, I saw the computer reset on 2 (or was it 3) occasions by using emacs structure editing keybindings. :)

[15:15] <autrijus> <- totally clueless about emacs

[15:15] <Shillo> CTRL-ALT-backspace is particularily useful in emacs... if X isn't already using it... :)

[15:16] <lumi> Heh

[15:16] <lumi> Unbind alt from meta

[15:16] <lumi> And you're safe!

[15:16] <Shillo> Nah. I wouldn't be able to use alt for everything else then.

[15:16] <xerox> Okay, you should also know C-M-n (foward-sexp) C-m-p (backward-sexp)

[15:16] <Shillo> Just got used to typing ESP CTRL-backspace

[15:16] <Shillo> I also use C-M-t

[15:17] <theorbtwo> I sometimes wish I had a keyboard with windows keys on it, because then I'd have more meta-bits to play with.

[15:17] <xerox> Shillo, is there an `inverse C-M-t' ?

[15:18] <Shillo> Hmm, whatcha mean? C-M-t is swap-sexp, but I think of it more as pull-sexp

[15:18] <Shillo> Also, forward|backward-sexp are bound on alt-<- and alt--> (cursor keys) in xemacs.

[15:18] * Shillo uses xemacs. The heretic.

[15:19] * theorbtwo does as well.

[15:19] <xerox> In Emacs M-< goes to the Top and M-> to the Bottom of the buffer.

[15:19] <theorbtwo> Trying to code without M-g makes me want to kill myself.

[15:19] <theorbtwo> Or better, whatever miscreant doesn't have a copy of xemacs installed.

[15:19] <Shillo> xerox: <- and -> I meant the cursor keys, not ><

[15:20] <xerox> Shillo, ah.

[15:20] <theorbtwo> Speaking of wanting to kill myself, any mac users around now?

[15:20] <xerox> In Emacs are C-M-'->' and C-M-'<-'

[15:20] <theorbtwo> I figured out why Coke couldn't connect to me before...

[15:20] * Shillo edges away from theorbtwo.

[15:20] <Shillo> xerox: I bound those in Metacity.

[15:20] <xerox> Shillo, thanks, I learnt something new :)

[15:21] * Shillo *really* insists on C-A-(<- | ->) being available for desktop switching. :)

[15:22] <theorbtwo> Seriously, the wanting to kill myself was in jest.  Either I need to install another pearpc instance on another machine, and figure out routing for /that/, or I need somebody else with a second mac.

[15:22] <xerox> bbl

[15:22] <lumi> You use Metacity?!??

[15:23] <Shillo> lumi: Full GNOME, really.

[15:23] <lumi> Metacity, ick

[15:23] <lumi> Switch back to Sawfish!

[15:23] <Shillo> lumi: Bitrot.

[15:23] <lumi> IT has a cooler name (and a lisp engine)

[15:23] <lumi> Mh, excuses

[15:23] <lumi> :P

[15:23] <Shillo> Metacity has dropshadows.

[15:24] * Shillo waits for e17. :)

[15:24] * Shillo actually installed e17 preview.

[15:24] <Shillo> Drew the same reactions from cow-orkers as e9, e10, e11, e12, etc. Crowd behind my sholders and stuff.

[15:25] <Shillo> As far as WMs are concerned, I just don't care about more features than Metacity already has. Which leaves us with eyecandy as the sole criterium of WM choice. :)

[15:26] <lumi> e17 currently is cute, blazingly fast, and completely useless

[15:26] <lumi> Very pretty though

[15:26] <Shillo> Yep, my thoughs exactly.

[15:27] <Shillo> But I'd actually want to use it if it only had keybindings.

[15:27] <Shillo> And frankly, I'm not sure it doesn't have them. They ought to be addable to the default edje file.

[15:28] * Shillo hmms. We got even further OT. Sowwy.

[15:31] <autrijus> that is fine :)

[15:32] *** khisanth_ is now known as Khisanth

[15:39] * Shillo finally builds svn version of pugs. Checked it out with wget --mirror.

[15:39] <autrijus> clever.

[15:40] * autrijus is still wrangling with multidim and *

[15:40] <Shillo> DIED. FAILED tests 11-37 in t/op/auto

[15:40] <autrijus> I think our AST model needs readjustment :-/

[15:40] <autrijus> right! that is the thing I'm fixing.

[15:45] <autrijus> otherwise it works?

[15:46] <autrijus> mandel.p6 brots and life.p6 lives?

[15:51] *** khisanth_ is now known as Khisanth

[15:52] <autrijus> yay. found a task.

[15:52] <autrijus> convert emacs outline to s5 slides

[15:52] * autrijus starts to write it in pugs-runnable perl6

[15:53] <autrijus> that will nicely exercise multidim

[15:54] <Khisanth> s5?

[15:56] <autrijus> s5 is wonderful.

[15:56] <autrijus> # http://meyerweb.com/eric/tools/s5/

[15:57] <autrijus> mmm kwid2s5 is more fun!

[15:57] <autrijus> that will also force me to finish ext/Kwid/ ;)

[15:57] * Khisanth was thinking synopsis

[15:57] * autrijus is feeling approprisately ingyish

[15:58] <autrijus> ah. sorry, that'd be S, and S05

[15:58] <Khisanth> :)

[15:58] <Shillo> Hmm, I think I found some interesting bug. examples/shuffle.t prints duplicates.

[15:58] <Shillo> And it shouldn't ever, since it swaps elements in an array.

[15:59] <autrijus> shuffle.p6 is suddenly broken.

[15:59] <autrijus> confirmed

[16:02] <autrijus> fixing

[16:05] <autrijus> while (1) { die 3 } is broken

[16:05] <autrijus> fancy that!

[16:05] <Shillo> but life.p6 and mandel.p6 do work. :)

[16:05] <autrijus> cool :)

[16:08] <malaire> if I make local changes to e.g. Prim.hs, how can I update it to current file (i.e. revert my local changes) using svn?

[16:08] <autrijus> svn revert Prim.hs

[16:08] <obra> hi

[16:11] <autrijus> yo

[16:12] <obra> how goes, autrijus?

[16:12] <autrijus> fine. has a talk tomorrow

[16:12] <autrijus> need to prepare slides

[16:12] <autrijus> but is feeling ingyish

[16:12] <hcchien> I guess I can just move t/06sub.t to t/op/subroutine.t directly.

[16:12] <autrijus> hcchien: yup

[16:12] <DrHyde> gentlefolks, i want to try playing with pugs, is there any more recent HOWTO-ish docs on perl6 than the synopses?

[16:12] <autrijus> ingyish = want to do the slides in s5; part of materials were in emacs outlines; emacs outlines can be trivially converted to kwid; want to write the converter in pugs

[16:12] <obra> next time perl5 autrijus is around, I've got an odd one for him. standalone httpd stopped working for file upload. 

[16:12] <autrijus> !

[16:13] <autrijus> yow.

[16:13] <obra> interestingly, it appears to no longer work when I go back to 3.4.0

[16:13] <autrijus> but it worksforme.

[16:13] <obra> which I know _did_ work

[16:13] <autrijus> I mean, even now.

[16:13] <hcchien> autrijus: but you don't use emacs!? :)

[16:13] <obra> does 'make regression-noapache' work for you?

[16:13] <autrijus> I am on... win32

[16:13] <PerlJam> DrHyde: There are no HOWTO docs for perl6 :-)

[16:13] <autrijus> obra: so it fails for you?

[16:14] <integral> DrHyde: Do you fell like writing a HOWTO? ;-)

[16:14] <obra> yes.

[16:14] <obra> it appears that CGI.pm is trying to read more from enctype=multipart-form forms than there is

[16:14] <autrijus> DrHyde: I know damian has many slides.

[16:14] * obra is a sad, sad guy.

[16:14] <autrijus> none of them are on the web, though.

[16:14] <autrijus> obra: is it possible that your cgi.pm is old?

[16:14] <autrijus> I wonder if I can convince damian to dump all his slides to me

[16:14] <obra> It fails on two hosts. one with old and one with latest

[16:15] <autrijus> and find helpful souls here to convert them to html/pod/kwid

[16:15] <PerlJam> DrHyde: you could read the Apocalypses and then work your way through the Exegeses if you keep in mind that some of the syntax has changed.

[16:15] <DrHyde> the apocalypses break my brane :-)

[16:15] <autrijus> DrHyde: oh, and there is allison's update

[16:15] <autrijus> http://www.lohutok.net/talks/p6update.pdf

[16:15] <autrijus> which is good

[16:16] <autrijus> if a bit too high-level

[16:17] <obra> autrijus: what RT are you syncced to?

[16:17] <autrijus> 3.4-REL

[16:17] <obra> when you get spare time will you try make regression-noapache?

[16:17] <autrijus> yes.

[16:17] <obra> thanks

[16:17] <autrijus> never tried that.

[16:18] <obra> clkao also sees the failures with 3.4-REL

[16:18] <autrijus> (never knew it existed :))

[16:18] <obra> oh! it's the test suite against standalone httpd

[16:18] <autrijus> sure, I grok that now

[16:19] <obra> I spent about two days attempting to debug why image custom fields didn't work in RTFM.

[16:19] <obra> When it turned out that I'd fixed the bug but that standalone_httpd was causing more issues

[16:19] <autrijus> :-(

[16:19] <autrijus> also I believe my file uploader was not in trunk

[16:20] <autrijus> wonder if it bitrotted

[16:20] <autrijus> and wonder if it fixes that

[16:20] <obra> so. it's blocking in CGI.pm

[16:20] <obra> CGI.pm is trying to read from STDIN when there is no more STDIN left

[16:22] <obra> but. I must put this aside for now, so I can try to get through customer deliverables that are due right when I get back from .tw ;)

[16:22] <autrijus> ok ;)

[16:27] <hcchien> split t/0*.t into t/*/*  # done

[16:27] <autrijus> wow!

[16:27] <autrijus> hcchien++

[16:27] <hcchien> just use svk mv to finish it. ha

[16:27] <autrijus> you didn't fix MANIFEST? :)

[16:28] <autrijus> (that's fine)

[16:29] <malaire> In what file the operator precedence is currently defined in pugs? Prim.hs seems to have allmost everything, but I can't find anything about precedence.

[16:30] <autrijus> Parser.hs currently has prec table.

[16:30] <autrijus> the ultimate idea is to gen the table with builtins.pod

[16:32] <Juerd_> Uh oh

[16:32] <Juerd_> Significant documentation...

[16:32] <hcchien> updated

[16:32] <Juerd_> That's almost worse than significant indentation ;)

[16:33] <Juerd_> Though I do like the idea 

[16:33] <autrijus> Juerd_: builtins.pod will be inlined into Prim.hs, silly :)

[16:33] <Juerd_> You're building a filesystem in a file? :)

[16:34] <autrijus> Inline::FileSystem mmmm

[16:34] <autrijus> (already done on cpan)

[16:34] <dada> is there a way to run a single test?

[16:34] <Juerd_> dada: Yes, copy and paste it.

[16:35] <dada> mmm no, a single .t file I mean

[16:35] <Juerd_> pigs t/foo.t

[16:35] <Juerd_> eh

[16:35] <Juerd_> pugs :)

[16:36] <mauke> Can't locate Test.pm in @INC

[16:36] <dada> Can't locate Test.pm in @INC

[16:36] <dada> exactly :-)

[16:37] <dada> can I set $PERL6LIB for this?

[16:37] <dada> it seems so

[16:38] <dada> way cool :-)

[16:38] <autrijus> :)

[16:38] <Juerd_> Oh, Test.pm

[16:38] <Juerd_> I haven't done anything with pugs since the day before Test.pm was first used

[16:39] <dada> I think I really need an __END__

[16:40] <dada> =begin END, that is :-)

[16:40] <Juerd_> Yeah, congratulations, by the way

[16:41] <autrijus> =begin END works, no? :)

[16:43] <ingy> hola

[16:43] <dada> autrijus: yes, it works

[16:43] <autrijus> yo ingy-san

[16:44] <dada> Juerd_: congratulations for what?

[16:44] <ingy> what is new whilst I slept so well

[16:44] *** _metaperl is now known as metaperl

[16:45] <autrijus> ingy: darren continues module work, which made 6pan all the more urgent

[16:45] <autrijus> ingy: I'm pondering a kwid2s5.p6

[16:46] <dada> you know what?

[16:46] <dada> I really *HATE* $a = (1,2,3) being equal to $a = [1,2,3];

[16:46] <autrijus> what you want it to do instead?

[16:46] <autrijus> $a = 3?

[16:46] <autrijus> (current p5)

[16:46] <ingy> autrijus: s5?

[16:46] <dada> $a = 1

[16:46] <autrijus> but it is 3 in p5!

[16:46] <rgs> ($a) = (1,2,3)

[16:46] <dada> but this is not p5 :-)

[16:46] <autrijus> ingy: I think you'll like s5.

[16:47] <autrijus> http://meyerweb.com/eric/tools/s5/

[16:47] <rgs> s5++

[16:47] <ingy> autrijus: cool

[16:47] <autrijus> rgs: I noticed you're a fellow addictionado

[16:47] <rgs> yes

[16:47] <dada> autrijus: it makes sense given that in p5 (a => 1, a => 2) gave (a => 2), but in p6 it gives (a => 1)

[16:48] <autrijus> dada: oh? I don't see that mentioned

[16:48] <ingy> autrijus: what makes 6pan urgent exactly?

[16:48] <dada> autrijus: I can look it up if you don't trust my words :-)

[16:48] <autrijus> ingy: real modules and real users :)

[16:49] <xerox> css

[16:49] <xerox> Whoops.

[16:49] <lumi> In p5 it gives just 2

[16:50] <dada> lumi: I meant something like %a = (a => 1, a => 2); gives $a{a} = 2;

[16:50] <lumi> oh, k

[16:50] <dada> or "(a => 2) wins", if you prefer

[16:51] <autrijus> dada: reference in synopsis?

[16:51] <dada> hold on

[16:51] <lumi> I like (a => 2) wins actually

[16:51] <ingy> autrijus: interestingly you misinterpreted me when I told you that modules should be hosted on the pugs svn server for now

[16:51] <ingy> I didn't mean actually in the pugs tree

[16:52] <autrijus> ahh. you just mean svn.openfoundry.org/?

[16:52] <ingy> I was thinking more like svn.kwiki.org

[16:52] <autrijus> exactly

[16:52] <ingy> or openfoundry, yes

[16:52] * autrijus squints and imagines openfoundry becomes 6pan

[16:52] <autrijus> with nice CSSified RT UI

[16:52] <ingy> but each author having a repos

[16:52] <autrijus> and integrated per-author repos

[16:52] <autrijus> mmmmm.

[16:52] <autrijus> tempting.

[16:52] <ingy> and then tying it together (for now) using svn:externals

[16:53] <autrijus> or svk:merged

[16:53] <ingy> :)

[16:53] <ingy> better, yes

[16:53] <ingy> but for at least just now, pugs/modules is ok.

[16:53] <autrijus> sure.

[16:53] <ingy> at least until yapc

[16:54] <autrijus> of course.

[16:54] <ingy> ok, breakfast&

[16:54] <autrijus> when I mean "urgent" I mean "months"

[16:54] <ingy> autrijus++

[16:54] <autrijus> instead of "years" :)

[16:55] <hcchien> sounds like the evil yapc!? :p

[16:55] <autrijus> yeah, evil plans abound

[16:56] <Khisanth> sounds like you are planning a lot for YAPC :)

[16:56] <autrijus> we have two weeks :)

[16:56] <autrijus> 3/20 ~ 4/4

[16:56] <hcchien> ccCc

[16:57] <hcchien> yaph. :p

[16:57] <autrijus> and the hacker/speaker team is full of crazy folks.

[16:57] <autrijus> I can't wait to meet miyagawa in person :)

[16:58] <Khisanth> the entire Perl community is full of crazy folks!

[16:58] <autrijus> true, but the yapc::taipei concentration has some of the crazier ones :)

[16:58] <autrijus> but indeed.

[17:01] <hcchien> I just worry about that the speakers will change their topic since they may discuss the crazy ideas from 3/20. :p

[17:03] <autrijus> hcchien: unplanned talks is the joy of YAPCs :)

[17:03] <autrijus> (but the nightmare of organizers)

[17:06] *** crysflam1 is now known as crysflame

[17:06] <crysflame> heh

[17:06] <crysflame> "i'm in the conference hall using the wireless to write the slides for my talk"

[17:06] <crysflame> i remember ingy developing an ascii slides representation

[17:07] <autrijus> ingy is famous for writing the slide system for his slide

[17:07] <autrijus> on the airplane

[17:07] <autrijus> and change his talk to talk about the slide system

[17:07] <crysflame> !

[17:07] <crysflame> hahahaha

[17:07] <autrijus> and go straight on stage on arrival

[17:07] <autrijus> without any pause

[17:07] <autrijus> and promptly falls to sleep due to jet lag after the talk.

[17:08] <crysflame> on stage?

[17:08] <autrijus> no :)

[17:08] <crysflame> that'd be a talk

[17:08] <Steve_p> In bar :)

[17:08] <crysflame> "defeating insomnia with perl"

[17:08] <crysflame> "demonstration slide"

[17:08] <crysflame> zzzzzz

[17:08] <hcchien> autrijus: that's why we don't have the processing copy this year. :p

[17:09] <autrijus> "Last year i came to Taipei to talk about Kwiki, but Kwiki was not ready. So I talked about Spiffy Spoon and Spork. This year Kwiki is ready, so I will talk about it."

[17:09] <hcchien> and the schedule is updated for 3 times. ha

[17:09] <autrijus> hcchien: wahaha

[17:09] <autrijus> hcchien: so no proceedings this time?

[17:09] <autrijus> I thought we can JIT it on the night before conference

[17:10] <hcchien> hehe

[17:14] *** _metaperl is now known as metaperl

[17:27] <Shillo> Later, folks!

[17:28] <theorbtwo> Adios, Shillos.

[17:30] <autrijus> scw: you broke shuffle :-(

[17:30] <autrijus> scw: you were matching against VInt

[17:30] <autrijus> but you should've vCast'ed to VInt instead.

[17:30] <autrijus> otherwise VNum 2.0 can't be a valid index.

[17:30] <autrijus> shillo++

[17:33] <autrijus> fixed; r575

[17:34] <autrijus> shuffle now shuffles

[17:42] <autrijus> the more I look at the new banner the happier I am

[17:42] <autrijus> stevan++

[17:42] <wolverian> there's a shuffle?

[17:42] <autrijus> examples/shuffle.p6

[17:43] <wolverian> ah.

[17:43] <autrijus> fisher-yates shuffle, I think it's called

[17:43] <wolverian> I wish svk worked here.

[17:43] <autrijus> it does not?

[17:43] <wolverian> the ubuntu perl doesn't apparently have weakrefs

[17:44] <autrijus> eww.

[17:44] <autrijus> but I remember installing from universe

[17:44] <autrijus> and svk did work on ubuntu then

[17:44] <autrijus> that involves replacing perl with debian perl

[17:44] <autrijus> and switch to unstable

[17:45] <wolverian> I am running hoary. but using debian packages isn't a solution I want to use

[17:45] <autrijus> yeah, I understand fully

[17:45] <obra> um. 

[17:45] <wolverian> I wonder if I should ask this on ubuntu-devel or ubuntu-users

[17:45] <obra> I'm using ubuntu core perland svk is fine

[17:45] <wolverian> obra: really? hmmmm. I'll try again, then.

[17:45] <autrijus> obra: hoary too?

[17:46] <obra> yes, hoary

[17:46] <crysflame> hoary++

[17:46] <obra> what perl do you have, wolverian?

[17:46] <wolverian> obra: the one that comes with ubuntu! :)

[17:47] <obra> what version

[17:47] <wolverian> I could nopaste my perl -V 

[17:47] <wolverian> This is perl, v5.8.4 built for i386-linux-thread-multi

[17:47] <obra> dpkg -l |grep perl-base

[17:47] <wolverian> 5.8.4-6

[17:47] <autrijus> I find it hard to believe that a perl can have no weakrefs.

[17:47] <obra> same here

[17:47] <autrijus> I mean, even by choice.

[17:48] <obra> perhaps you need a newer Scalar::Util?

[17:48] <autrijus> unless you have installed a pureperl Scalar::Util.

[17:48] <theorbtwo> wolverian, you wouldn't mean, perchance, that it lacks Scalar::Util?

[17:48] * autrijus smiles!

[17:48] <theorbtwo> Heh.

[17:48] <wolverian> that might be it. svk should depend on it then, though. and the error does _not_ say that.

[17:48] <obra> *5*

[17:48] <autrijus> *15*

[17:48] <obra> *hah*

[17:48] <autrijus> wolverian: S::U is core.

[17:49] <wolverian> oh, right.

[17:49] <theorbtwo> What /does/ the error say?

[17:49] <wolverian> I have 1.14 of S::U

[17:49] <autrijus> wolverian: try reinstall it.

[17:49] <wolverian> wolverian@chronoa:~$ svk

[17:49] <wolverian> Weak references are not implemented in the version of perl at /usr/share/perl5/PerlIO/via/dynamic.pm line 61

[17:49] <autrijus> alternatively, install that by hand.

[17:49] <wolverian> ..and a lot of BEGIN failed errors after that

[17:49] <autrijus> right, that means you have a bad S::U

[17:49] <wolverian> hrm.

[17:49] <autrijus> perhaps installed after core perl is installed.

[17:49] <wolverian> I'll check in cpanp.

[17:51] <wolverian> oh well, reinstalling perl and perl-base

[17:51] <obra> that may not help

[17:52] <autrijus> that will not help.

[17:52] <theorbtwo> That will probably not help.

[17:52] <autrijus> ...

[17:52] <wolverian> I GOT IT ALREADY, THANKS.

[17:52] <wolverian> :|

[17:52] <autrijus> *15*

[17:52] <wolverian> okay, do I need to get rid of the wrong version of S::U manually then? (from cpanp, that is)

[17:52] <wolverian> yeah, that didn't help.

[17:52] <autrijus> either that, or reinstall S::U with UNINST=1

[17:52] <crysflame> hi, wolverian

[17:52] <wolverian> hello, crysflame 

[17:52] <autrijus> you can also uninstall S::U in cpanp right.

[17:53] <wolverian> bah, cpanp can't uninstall it.

[17:53] <autrijus> and then install again.

[17:53] <clkao> hm. perlio::via::dynamic should require newer S::U ?

[17:53] <wolverian> [ERROR] Could not get 'files' for 'Scalar::Util': 

[17:53] <autrijus> but UNINST=1 is the recommended way.

[17:53] <autrijus> uh oh.

[17:53] <autrijus> z Scalar::Util

[17:53] <autrijus> perl Makefile.PL

[17:53] <autrijus> make install UNINST=1

[17:53] <wolverian> doing.

[17:53] <theorbtwo> It's not a matter of new or old Scalar::Util, I think.

[17:53] <autrijus> cpanplus++ # my first real project

[17:53] <autrijus> real cpan project, that is.

[17:54] <wolverian> theorbtwo: what, then?

[17:54] <autrijus> hi mandarin :)

[17:54] <wolverian> hmm. what does this mean:

[17:54] <wolverian> Unlinking /usr/share/perl/5.8/Scalar/Util.pm (shadowing?)

[17:54] <clkao> it means it's doing the right th9ing

[17:55] <wolverian> yeah, I figured that.

[17:55] <wolverian> this reminds me that there was no XS version of List::Util installed initially with ubuntu, I think.

[17:55] <wolverian> that was strange.

[17:55] <clkao> if you can figure out, let me know what additiona S::U requirement i should add to perlio::via::dynamic

[17:55] <crysflame> wolverian: that's really weird

[17:56] <wolverian> clkao: I have no idea what the problem was.

[17:56] <wolverian> (svk works now.)

[17:56] <wolverian> crysflame: yes. it is.

[17:56] <autrijus> yay, auto.t works

[17:56] <autrijus> lvalue inside array works!

[17:56] <wolverian> hmm 47 failed tests.

[17:56] <autrijus> multidim within reach now

[17:56] <autrijus> wolverian: expected.

[17:57] <autrijus> shower, brb

[17:57] <jdv79> any idea when OO like things will be possible?

[17:57] <crysflame> wolverian: how can List::Util even *work* without XS?

[17:57] * crysflame twitches

[17:57] <crysflame> distro bug

[17:58] <wolverian> crysflame: the perl version works fine. at least first() worked. I remember looking at the code and going "huh? I thought this was an XS module"

[17:58] <theorbtwo> Congrats, aut!

[17:59] <theorbtwo> The answer is that most of Scalar::Util can just fallback on perl code.  Slower, but most places doesn't loose functionality.

[17:59] <theorbtwo> Er, most functionality isn't lost.

[18:00] <wolverian> so, what was my problem? :)

[18:02] <crysflame> wow

[18:02] <crysflame> weakref is definitely XS requiring though

[18:03] <theorbtwo> You were trying to use some of the functionality that /was/ lost, and for some reason, the perl your running doesn't have a XS Scalar::Util, or isn't seeing it.

[18:03] <autrijus> jdv79: 6.28.

[18:03] <wolverian> ah, so that's the problem.

[18:03] <autrijus> jdv79: I think it is fair to assume 1-2 months per milestone.

[18:03] <autrijus> jdv79: so, I think maybe 2-3 months from now before we have robust OO

[18:04] <autrijus> jdv79: but all these can change.

[18:06] <malaire> hmm.. 1-2 months per milestone = 6-12 months until "6.283185: Port Pugs to Perl 6, if needed." ... ;)

[18:07] <autrijus> that is the plan.

[18:08] <autrijus> see my imaginary timeline :)

[18:08] <autrijus> i.e. finish the perl6 bootstrapping around early 2006

[18:10] <obra> autrijus: where's your milestones doc?

[18:10] <obra> or is this handwavey?

[18:10] <autrijus> obra: PA01!

[18:11] <autrijus> "Do you have a roadmap for Pugs development?"

[18:11] * autrijus doesn't do handwavy things :)

[18:11] <obra>          /me goes back to reread

[18:12] <xerox> Can I ask why are you making an Haskell implementation of perl6?

[18:12] <PerlJam> xerox: you may ask.  :-)

[18:12] <autrijus> xerox: PA01. :) also see interview.

[18:12] <xerox> s/Can I ask// :D

[18:13] <autrijus> PA01, "Why did you choose Haskell?"

[18:13] <autrijus> interview is http://www.perl.com/pub/a/2005/03/03/pugs_interview.html

[18:13] <autrijus> PA01 is "Overview" from pugscode.org.

[18:13] * autrijus feels clever about writing a FAQ

[18:13] <obra> huh. somehow I missed that section in PA01.

[18:13] <autrijus> obra: aw.

[18:14] <PerlJam> autrijus: I don't remember the exact answer to that question, but in my head it goes something like "because I realized that I could seem insanely productive by utilizing already existing features of haskell to mimic perl6 features"  ;-)

[18:14] <autrijus> PerlJam: exactly!

[18:14] <metaperl_> so should only the code or also the slides from my Perl Mongers presentation be added to pugs distro? Here is the slide presentation: http://www.hcoop.net/~terry/perl/talks/p6-junctions/

[18:14] <metaperl_> the one() example is poor

[18:15] <autrijus> code is already examples/junctions/ no?

[18:15] <autrijus> if not, there is where they belong

[18:15] <metaperl_> well, not completely

[18:15] <autrijus> I'd be happy if you put a URL to your talk to examples/junctions/README

[18:15] <metaperl_> I thought up several in the last few days

[18:15] <autrijus> or something like that.

[18:15] <metaperl_> ok

[18:15] <autrijus> metaperl++

[18:15] <metaperl_> and I'll add the new code samples

[18:15] <metaperl_> :)

[18:15] <autrijus> metaperl++ # can't ++ you enough

[18:16] * metaperl_ blushes

[18:16] <autrijus> PerlJam: but yeah, it's all about choosing the right tools.

[18:16] <autrijus> that's what tools are supposed to do, anyway; they exist to make us insanely productive

[18:17] <autrijus> or rather, make us productive and stay (almost) sane

[18:17] <PerlJam> autrijus: well, for me, it's now about convincing the "official" perl6 compiler people that they should put a wee bit of effort into learning haskell and then use that knowledge to make pugs the bootstrap by which we get a real perl6 :)

[18:17] <autrijus> PerlJam: all of them are learning haskell :)

[18:17] <autrijus> so :)

[18:18] <metaperl_> Haskell has a _ton_ of list functionality

[18:18] <autrijus> metaperl_: because haskell is merely super-sugared lazy lisp.

[18:18] <PerlJam> metaperl_: That's probably because of its FP ancestry

[18:18] <obra> I'm pretty sure that pge and pugs are going to continue to help each other.

[18:18] <xerox> Now I see :D

[18:18] <malaire> btw, is there a way to get the Val out of Eval Val ? e.g. I have (op2Numeric (+) (VInt 2) (VInt 3)) - and I want to get equivalent of (VInt 5) out of that.

[18:18] <autrijus> I'm pretty sure that pge and pugs will merge at some point :)

[18:18] <PerlJam> autrijus: me too :)

[18:19] <autrijus> malaire: well, you eval it.

[18:19] <autrijus> result <- action

[18:19] <autrijus> that's all.

[18:19] <autrijus> result is Val, action is Eval Val.

[18:19] <autrijus> (that's what the "Eval Monad" means.)

[18:19] <malaire> for some reason that didn't seem to work, but I'll try again...

[18:20] * obra just read "evil monad"

[18:20] <PerlJam> obra: heh!

[18:20] <crysflame> that's the second time that's happened

[18:20] <autrijus> I'm sure it will happen many time more.

[18:20] <crysflame> autrijus said "probably true" when i said it the first time, or something similar

[18:20] <dada> autrijus: I have a problem

[18:20] <crysflame> i wonder how many others have

[18:20] <autrijus> dada: yes?

[18:21] <dada> context is broken in pugs

[18:21] <PerlJam> monads still make me uncomfortable.  I think I understand, but their apparent simplicity has me worried that I'm missing something.

[18:21] <dada> my($a) = (1,2,3); say $a; # says 123, it should say 1

[18:21] <PerlJam> I'm sure perl6 will make me feel that way at some point

[18:21] <autrijus> dada: yes because the () is not yet significant.

[18:21] <PerlJam> :-)

[18:21] <autrijus> PerlJam: yup.

[18:21] <dada> autrijus: ok. most of my tests are failing for this reason :-)

[18:22] <wolverian> metaperl_: what is List::Util::filter? 

[18:22] <wolverian> (re: slide3)

[18:22] <PerlJam> dada: todo them and they won't fail :)  

[18:22] <autrijus> dada: good. let them fail!

[18:22] <PerlJam> dada: or better, implement ()  :)

[18:22] <autrijus> PerlJam: I argue it's misimplementation not unimplemented

[18:22] <autrijus> so let them fail!

[18:22] <metaperl_> oh, maybe Language::Functional::filter

[18:23] <metaperl_> maybe List::Util::first() is what I meant

[18:23] <ingy> so far I find A Gentle Introduction to Haskell to be the best tutorial to get you up to speed

[18:23] <metaperl_> I just moved the slides somewhere permanennt

[18:23] <ingy> apropos of nothing ^^

[18:23] <autrijus> ingy: many people found that too hard.

[18:23] <metaperl_> ingy, the Algorithms Book is good if you dont like that dry style

[18:23] <ingy> I find it just hard enough

[18:23] <autrijus> ingy: i.e. it assumes you have thought Real Hard about programming before

[18:23] <autrijus> ...which you did, of course.

[18:23] <metaperl_> by Rabhi and Lapalme... this is a good book. I can't put it down

[18:23] <wolverian> metaperl_: doesn't any() return a list of matches, though?

[18:23] <autrijus> yes. I totally agree.

[18:23] <autrijus> lukhnos still has my copy.

[18:24] <wolverian> metaperl_: I mean, the overloaded comparison against any()

[18:24] <metaperl_> Which any?

[18:24] <metaperl_> Language::Functional::any?

[18:24] <metaperl_> Q::S::any?

[18:24] <wolverian> no, the Perl6 one.

[18:24] <ingy> I just want to know the facts... but with a little explanation

[18:24] <ingy> Gentle is really good that way

[18:24] <PerlJam> wolverian: any() will never get you a list unless you collapse() it.

[18:25] <wolverian> PerlJam: 'any(...) < $limit' will not return a list?

[18:25] <dada> I'm (slowly) reading YAHT

[18:25] <PerlJam> any, all, one, and none all give you a scalar (junction)

[18:25] <ingy> plus Gentle is in html which helps immensely

[18:26] <ingy> Two Dozen is really bad as it seems to be written by a lisper who uses totally different terminology

[18:26] <PerlJam> wolverian: any($a,$b,$c) < $limit will give you a junction of   any($a < $limit, $b < $limit, $c < $limit)

[18:26] <PerlJam> which is a scalar value

[18:26] <autrijus> ingy: true... it is written as a companion of the Haskell Report by the same people

[18:27] <dada> ingy: http://www.isi.edu/~hdaume/htut/ <-- YAHT

[18:27] <wolverian> PerlJam: hm. that looks odd to me. doesn't that mean that any() only gets booleans?

[18:27] <xerox> I suggest haskell-tutorial instead of YAHT.

[18:27] <PerlJam> no

[18:27] <dada> I think YAHT is more tailored for people who come from an imperative language

[18:28] <xerox> (You can find it on haskell.org learning page)

[18:28] <dada> xerox: isn't that one the Gentle?

[18:28] <xerox> dada, it is not.

[18:28] <PerlJam> wolverian: you threaded over a boolean operator, so you get a junction of booleans.

[18:28] <PerlJam> wolverian: had you threaded over some other operator, you wouldn't necessarily get a junction of booleans.

[18:28] <xerox> http://www.haskell.org/learning.html ftp://ftp.geoinfo.tuwien.ac.at/navratil/HaskellTutorial.pdf

[18:29] <jdv79> autrijus, cool

[18:29] <dada> xerox: seen, thanks

[18:29] <wolverian> PerlJam: okay, thanks.

[18:30] <ingy> autrijus: yeah... The Report is a little too dry but will be very nice after I finish Gentle

[18:30] <PerlJam> wolverian: Just have a look at the example in S09 ... http://dev.perl.org/perl6/synopsis/S09.html  search for "camel"

[18:31] <wolverian> PerlJam: I'm not sure I see why 'any(...) < $limit' would be autothreaded

[18:32] <autrijus> because < is just a function call

[18:32] <wolverian> right. 

[18:32] <autrijus> and junctions as function arguments autothreaded

[18:32] <wolverian> okay, so you can't use any() for this. clear enough. :)

[18:32] <ingy> I just thought of something fun...

[18:32] <PerlJam> wolverian: what is "this" exactly?

[18:33] <PerlJam> wolverian: you want to know which components of the junction are < $limit?

[18:33] <wolverian> PerlJam: the amount of them, actually.

[18:33] <PerlJam> $how_many = any(@stuff).collapse.grep:{$_ < $limit};   #  :-)

[18:34] <ingy> When `kwid --to_html` is done I will adapt it into the pugs Kwiki, so we can write perl6 docs in the kwiki

[18:34] <wolverian> hah. :)=

[18:34] <autrijus> ingy: woot

[18:34] <wolverian> eeks. s/=//

[18:34] <autrijus> ok, mval in assignments is Officially There.

[18:34] <autrijus> committing.

[18:35] <wolverian> PerlJam: does the adverbial block get $_ in @_[0] there?

[18:35] <wolverian> (in addition to $_)

[18:35] <wolverian> PerlJam: just wondering if I can do .grep:{ $^person < $age }

[18:35] <wolverian> or some such.

[18:35] <PerlJam> yes, you can.

[18:36] <wolverian> yay. :) 

[18:36] <PerlJam> I'd guess that pugs doesn't quite grok $^foo though

[18:36] <wolverian> (I don't actually like writing the $_ at all, but I guess you can't help it really here..)

[18:36] <autrijus> r577:

[18:36] <autrijus> Failed 2/79 test scripts, 97.47% okay. 20/1395 subtests failed, 98.57% okay.

[18:37] <autrijus> finally no ridiculous numbers like "184.99% failed" :)

[18:37] <PerlJam> I seem to recall seeing that pugs parsed $^foo, but didn't do anything special to make it mean anything

[18:37] <autrijus> hmm? no it Just Works.

[18:37] <autrijus> $^x worked in the first week.

[18:37] <PerlJam> so much for my memory ;)

[18:41] * autrijus starts to write journal...

[18:41] <autrijus> "Day 38: And banner bright with living flame."

[18:41] <PerlJam> wolverian: btw, did you notice that junctions weren't needed at all in my $how_many example?

[18:42] <wolverian> PerlJam: yes, hence my smiley.

[18:42] <autrijus> it's hard to show Silmarils in ASCII Art, though

[18:42] <PerlJam> okay, just checking.  It's hard to tell sometimes on IRC

[18:42] <wolverian> PerlJam: I just wondered if there was a more, um, natural method of doing it without grep. I guess I just dislike referencing to the individual elements directly

[18:42] <wolverian> PerlJam: with grep, I have to write $_ or $^foo

[18:44] <PerlJam> wolverian: you want PDL's  $minors = where($age < 18);  ?

[18:44] <autrijus> .grep(&prefix:{'<'}.assuming(:y => $age))

[18:44] <autrijus> ;)

[18:44] <PerlJam> heh

[18:44] <wolverian> PerlJam: I don't see what where() operators on there, but I think yes.

[18:44] <wolverian> autrijus: thanks! :)

[18:45] <autrijus> that is idiomatic haskell...

[18:45] <autrijus> except in haskell you write

[18:45] <autrijus> filter (< age)

[18:45] <autrijus> instead.

[18:45] <autrijus> what conciseness.

[18:45] <PerlJam> autrijus: that is one syntax I wish perl had

[18:45] <autrijus> *nod*

[18:45] <autrijus> I wish that too.

[18:46] <dada> svn: Commit failed (details follow):

[18:46] <dada> svn: MKACTIVITY of '/perl6/!svn/act/e381cb67-1217-1c48-bace-a0fdd412c2cd': 400 B

[18:46] <dada> ad Request (http://svn.perl.org)

[18:46] <dada> buuuuh

[18:46] <autrijus> uh. you should commit to svn.openfoundry.org

[18:46] <dada> mmm?

[18:47] <dada> how do I?

[18:47] <autrijus> well....

[18:47] <PerlJam> dada: first you have to co a copy of pugs from svn.openfoundry.org :)

[18:47] <dada> fresh checkout from there?

[18:47] <autrijus> svn co http://svn.openfoundry.org/pugs

[18:47] <autrijus> and copy your stuff there.

[18:47] <dada> heh

[18:47] <autrijus> I'm sorry.

[18:47] <dada> no problem :-)

[18:47] <autrijus> committer needs to track openfoundry, not svn.perl.org

[18:48] <autrijus> I cannot grant svn.perl.org committer :)

[18:49] <dada> where am I supposed to put my username anyway?

[18:49] <PerlJam> Ask Robrt nicely and I'm sure you can get the ability to grant committer access to the pugs portion of svn.perl.org

[18:50] <autrijus> dada: just ci to openfoundry

[18:50] <autrijus> it will ask for your username/passwd.

[18:50] <autrijus> PerlJam: problem being, I like openfoundry; it's easy to send off invitation mails & stuff.

[18:50] <autrijus> that system is nice.

[18:50] <autrijus> it also helps that it's my code :)

[18:50] <PerlJam> autrijus: except for the 36 hours of downtime?

[18:50] <autrijus> that needs improvement, truly.

[18:51] <dada> autrijus: I didn't understand

[18:51] <PerlJam> anyway ...

[18:51] * PerlJam wanders off to code some perl (5)

[18:51] <theorbtwo> I also don't like the license agreement being /only/ in zh-tw, but don't care hugely much.

[18:51] <dada> ahhhhh ok ci == commit :-)

[18:51] <theorbtwo> (That was -tw, wasn't it?)

[18:51] <autrijus> theorbtwo: I _will_ fix that.

[18:51] <theorbtwo> I thought that was checkin?

[18:51] <autrijus> yeah, -tw is right.

[18:51] <autrijus> ci is commit.

[18:52] <dada> ouch

[18:52] <dada> same 400 Bad Request

[18:52] <autrijus> weird. did you put your openfoundry userid/passwd?

[18:52] <dada> no, it bombs right away

[18:53] <autrijus> !. try #subversion of #svk :-/

[18:53] <autrijus> that should not happen.

[18:53] <dada> may be a proxy issue?

[18:53] <autrijus> that is possible.

[18:53] <Juerd_> dada: With the beginning of the rest of your life

[18:54] <dada> Juerd_: huh?

[18:54] <Juerd_> Congrats.

[18:54] <Juerd_> This is an important mile stone without which you'd be dead.

[18:54] <dada> d'oh :-)

[18:56] <dada> another mile stone successfully reached! update the GANTT!

[18:56] * autrijus wonders what you're talking about.

[18:57] <dada> [17:40] <Juerd_> Yeah, congratulations, by the way

[18:57] <dada> an action-at-a-distance, that is

[18:58] * autrijus is even more confused. but never mind

[18:58] <dada> :-)

[18:58] <Juerd_> autrijus: Congrats to you to too

[18:59] <autrijus> Juerd_: you too :)

[18:59] <Juerd_> Thanks!

[18:59] * dada congrats everybody

[18:59] <Juerd_> And today is a very special day indeed.

[19:00] <crysflame> congrats for some unknown reason

[19:00] <Juerd_> Historically unique

[19:00] <Juerd_> Today will never come back.

[19:00] <Juerd_> So enjoy it.

[19:01] <autrijus> journal done. sleep &

[19:01] <autrijus> have fun!

[19:01] <Juerd_> Bye

[19:01] <Juerd_> Are you sure you want to sleep on this special day?

[19:01] <Juerd_> ;)

[19:01] <wolverian> _WHAT_ is up with this FFII RSS feed sending the same stuff again and again to me.

[19:01] <autrijus> Juerd_: pretty sure :)

[19:01] <Juerd_> autrijus: Okay - if that's your way of celebrating :P

[19:01] <autrijus> yup!

[19:02] <Juerd_> autrijus: Good night and stop counting sheep when you reach Inf

[19:02] <autrijus> I start from Inf.

[19:02] <Juerd_> And count backwards?  :)

[19:02] <dada> g'night autrijus

[19:03] <crysflame> wolverian: sounds like they don't have a <guid> element

[19:04] <autrijus> Juerd_: I count toward NaN.

[19:04] <autrijus> zzz &

[19:04] <Juerd_> autrijus: Good luck

[19:04] <Juerd_> :)

[19:39] <stevan_> ingy?

[20:15] <nothingmuch> morning

[20:15] <stevan_> morning nothingmuch 

[20:15] <nothingmuch> hi ho

[20:16] * nothingmuch is trying to learn dvorak again

[20:16] <nothingmuch> (switching layout)

[20:16] <nothingmuch> beh

[20:18] <nothingmuch> if i can get this going i will rewacrd myself with a new keyboard

[20:18] <nothingmuch> eek

[20:18] <nothingmuch> reward

[20:18] <nothingmuch> this is pretty hard

[20:20] <nothingmuch> so how are those lazy trees coming along, stevan_ 

[20:20] <nothingmuch> damn, i can't find the question mark

[20:21] <stevan_> LOL

[20:21] <stevan_> nothingmuch: work-work has kept me busy today

[20:21] <nothingmuch> ah

[20:21] <nothingmuch> ?

[20:21] <stevan_> nothingmuch to report :)

[20:21] <nothingmuch> heh

[20:21] <nothingmuch> i also got caught up

[20:23] * nothingmuch is typing so slowly he actually notices the spellchecking

[20:30] * nothingmuch goes to learn some haskell

[20:42] *** _metaperl is now known as metaperl

[21:01] <ingy> stevan_?

[21:06] <ingy> stevan_: I'm leaving for lunch. just address any questions to me here and I'll see it when I return

[23:07] <ingy> stevan_: ping

