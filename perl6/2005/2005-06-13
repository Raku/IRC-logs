[00:00] <revdiablo> Odin-LAP: I hate it when that channel turns into a feeding frenzy like that.

[00:02] * Odin-LAP has a mental image of piranhas tearing in, and wonders why the hell he can't remember not to stick food into the Amazon.

[00:03] <revdiablo> hmm, is there an authoritative paper on STM?

[00:04] <revdiablo> http://research.microsoft.com/Users/simonpj/papers/stm/stm.pdf # found this, not sure if that's it

[00:05] <Odin-LAP> http://citeseer.ist.psu.edu/978.html <-- ?

[00:07] <geoffb> Odin-LAP, revdiablo: which channel?

[00:07] <revdiablo> geoffb: #perl

[00:07] <geoffb> ah

[00:10] <crysflame> which #perl

[00:10] <revdiablo> freenode #perl

[00:40] <_meppl_> gute nacht  -  good night

[01:20] <svnbot6> r4575, geoffb++ | Start Pugs hacking document at lib/pugs/hack.pod (as per Autrijus)

[01:20] <svnbot6> r4575, geoffb++ |     * Start of source tree map: all top dirs, half of second dirs described

[01:30] <svnbot6> r4576, geoffb++ | More second-level dirs described

[01:54] <mugwump> is there a Perl6 version of: while (<>) ?

[01:59] <geoffb> Time for dinner . . .

[01:59] <svnbot6> r4577, geoffb++ | Yet more second-level dirs described

[02:04] <sdtr443w> Ah hah I finally found the channel

[02:05] <sdtr443w> Is there a known problem detecting GHC in the Pug 6.2.6 Makefile.PL?  I can't get anywhere with it even with ghc sitting right in the same directory.

[02:09] <mugwump> I would expect it looks for it in the path.  is the directory where GHC is installed in your $PATH ?

[02:09] <mugwump> (ie, typing `ghci' at the shell should bring up interactive GHC)

[02:38] <mugwump> anyone know where the for =$fh syntax is defined?

[02:42] <Enveigler1> sdtr443w: Are you on windows?

[02:47] <sdtr443w> No I'm in Linux.  I see what was happening -- I was setting it to look for ghc-6.4, not ghci

[02:48] <sdtr443w> It looks like I have another peculiarity -- during the 'make' command, I get thrown into ghci and it's waiting for me to do something in ghci's interface.  That doesn't seem right.

[03:17] <Khisanth> mugwump: while $foo = =<> { } ?

[03:17] * geoffb bak -- mmmm, Pizza . . . .

[03:43] <svnbot6> r4578, geoffb++ | * Remaining ext/* described, only t/* remain

[03:43] <svnbot6> r4578, geoffb++ | * Extra vertical space for clarity

[03:51] <mugwump> hmm, what would hyper mod operator assign be ?  >>%=

[03:52] <geoffb> mugwump, sounds right

[03:52] <mugwump> bah, not implemented it seems

[03:52] <geoffb> what is the base class of the Code/Block/Sub/etc. heirarchy?

[03:53] <geoffb> hmmm

[03:53] <geoffb> ?eval my @foo = <1 2 3>; @foo >>+= 1; @foo;

[03:53] <evalbot6> Error:  unexpected ">" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[03:53] <geoffb> ?eval my @foo = <1 2 3>; @foo >>+ 1;

[03:53] <evalbot6> Error:  unexpected ">" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[03:54] <geoffb> ?eval my @foo = <1 2 3>; @foo >>+=<< <1 1 1>;

[03:54] <evalbot6> Error:  unexpected ">" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[03:55] <geoffb> ?eval my @foo = <1 2 3>; my @bar = <1 1 1>; my @baz = @foo >>+<< @bar;

[03:55] <evalbot6> [2.0, 3.0, 4.0] 

[03:55] <geoffb> ?eval my @foo = <1 2 3>; my @bar = <1 1 1>; @foo >>+= @bar;

[03:55] <evalbot6> Error:  unexpected ">" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[03:55] <geoffb> ?eval my @foo = <1 2 3>; my @bar = <1 1 1>; @foo >>+=<< @bar;

[03:55] <evalbot6> Error:  unexpected ">" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[03:55] <geoffb> Hyper-assign not implemented at all?

[04:02] <mugwump> ?eval my $time = eval_perl5("[localtime()]"); $time[1]

[04:02] <evalbot6> Error: No compatible subroutine found: "&eval_perl5" 

[04:02] <mugwump> :)

[04:03] <geoffb> No embedding, I guess -- that would be WAY unsafe.  :-)

[04:03] <geoffb> s,No,No Perl5,

[04:06] <Khisanth> hrm is it >>+=<< or >>+<<= or both?

[04:06] <svnbot6> r4579, geoffb++ | Completed rough draft of level 1 and 2 source map

[04:07] <mugwump> those might not always be equivalent I think

[04:07] <mugwump> the first is in-place, the second makes a new list and then assigns the result as I interpret it

[04:09] <Khisanth> I was thinking the first is a hyper version of += while the second is the assignment version of >>+<<, just from the looks

[04:10] <mugwump> in other words you agree with my statement :)

[04:10] <Khisanth> no, not really

[04:11] <Khisanth> at least >>+<<= shouldn't make a new list

[04:12] <mugwump> >>+<< returns a new list.  Then you assign that into the result.

[04:14] <Khisanth> but doesn't + return a new scalar?

[04:15] <Khisanth> which would mean += would create a new variable and assign it to the result as well?

[04:15] * SamB looks at >>+<< and thinks "that looks like befunge or something"

[04:15] <Khisanth> you still need ^ and V !

[04:17] <mr_ank> brainfuck! i knew it!

[04:18] <hcchien> $url ~~ rx:P5/http:\/\/(.+)/ doesn't work well on pugs, is anything wrong?

[04:18] <svnbot6> r4580, geoffb++ | Spacing, alignment, and minor wording edits of source map

[04:18] <Khisanth> heh I guess you can't have a >v< operator

[04:19] <geoffb> OK, at this point, Pugs source tree map in lib/pugs/hack.pod is ready for content review.  Any takers, please edit away.

[04:19] <geoffb> Meanwhile,

[04:19] * geoffb makes the sound of one man's stack popping

[04:25] <mugwump> hcchien: s/P5/perl5/

[04:25] <svnbot6> r4581, geoffb++ | Oops, forgot to delete question I already answered for myself

[04:25] <mugwump> hcchien: or is it the LTS that's breaking it?  I've just noticed that it's not interpolated...

[04:26] <hcchien> mugwump: P5 and perl5 are the same thing, aren't they?

[04:28] <mugwump> it was a quick guess :)

[04:28] <mugwump> so, the escaped /'s are breaking it?

[04:28] <hcchien> I guess so.

[04:30] <hcchien> oh, interesting

[04:30] <hcchien> this would be broken: say $str if ($str ~~ rx:perl5/http:\/\//);

[04:31] <hcchien> but it's fine with: say $str if ($str ~~ rx:perl5{http:\/\/});

[04:31] <mugwump> it looks like the parse context of the // segment is wrong; it's being passed straight to PCRE rather than being interpolated as a quoted string (I *think*)

[04:32] <Chewie[]> !eval <f oo bar>>>.length

[04:32] <Chewie[]> !eval <f oo bar>

[04:32] <Chewie[]> !eval qw/f oo bar/

[04:32] <Chewie[]> Interesting.

[04:32] <mugwump> ?eval <f oo bar>.elems

[04:32] <evalbot6> 3 

[04:33] <mugwump> ?eval <f oo bar>>>.chars

[04:33] <evalbot6> Error:  unexpected ">" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[04:33] <mugwump> ?eval <f oo bar>>>.<<chars

[04:33] <evalbot6> Error:  unexpected ">" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[04:33] <SamB> mr_ank: well, yes, it is valid BF, but so is everything with balanced square brackets...

[04:33] <mugwump> ?eval <f oo bar>.chars

[04:33] <evalbot6> 8 

[04:34] <Chewie[]> Heh.

[04:34] <Chewie[]> ?eval qw/f oo bar/ >>.elems

[04:34] <evalbot6> Error:  unexpected ">" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[04:34] <mugwump> looks like my complaint about the interpolation is bogus.  my test script was broken :)

[04:35] <Chewie[]> ?eval (qw/f oo bar/) >>.elems

[04:35] <evalbot6> Error:  unexpected ">" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[04:35] <Chewie[]> ?eval ("f","oo","bar")».length

[04:35] <evalbot6> Error: No compatible subroutine found: "&length" 

[04:35] <Chewie[]> Er.

[04:35] <Chewie[]> ?eval ("f","oo","bar")».elems

[04:35] <evalbot6> 3 

[04:36] <Chewie[]> ?eval (("f","oo","bar")».elems).perl

[04:36] <evalbot6> '3' 

[04:36] <Chewie[]> Shouldn't that return (1, 2, 3) as in S03?

[04:37] <mugwump> congrats Chewie[]!  you've found a bug ... time to submit a failing test!

[04:37] <mugwump> :)

[04:39] <Chewie[]> mugwump: To be honest, I'm way too uncomfortable with the tools, lists, and trees to feel good about doing that. Plus I'm powerful tired right now.

[04:42] <mr_ank> i'll submit it if you don't mind Chewie[]

[04:42] <mugwump> I'm about to commit it mr_ank :)

[04:43] <mr_ank> :) okay

[04:44] <Chewie[]> Thanks, guys. I really need to read through the design docs and start pulling weight.

[04:44] <mugwump> no pressure dude, enjoy learning :)

[04:45] <Chewie[]> Heh. I love learning. Love school, love programming, love reading technical reference manuals.

[04:45] <Chewie[]> I mean, call me odd, but damn am I odd.

[04:47] <Chewie[]> Personally, I like the current Parrot implementation more than the current Perl 6 implementation. Not even PIR, just PASM. Reminds me of my assembly days back on DOS.

[04:48] <Khisanth> DOS does not sound like a step forward ...

[04:48] <svnbot6> r4582, mugwump++ | Add test for .perl on elems reported by Chewie[]++; unresearched

[04:49] <mugwump> http://utsl.gen.nz/perl6-intro/html/  # talk I'm giving tonight ...

[04:49] <Chewie[]> Khisanth: x86 assembly on a 486. That was fun.

[04:50] <hcchien> I should add some tests on rx_perl5

[04:50] <SamB> was it more fun than on a Pentium?

[04:51] <Chewie[]> mugwump: Where did you get that larger version of the Perl crocodile-moth-lizard-moose-bird thing?

[04:51] <Chewie[]> SamB: It felt a lot more manual, and it was more fun to me.

[04:51] <Chewie[]> My background (ha) is in engineering. The closer to metal, the better.

[04:52] <SamB> hmm, you probably wouldn't like House

[04:52] * Chewie[] wonders if a 15-year-old can have a 'background'.

[04:52] <SamB> duh, yeah.

[04:52] <mugwump> Chewie[]: google images for "perl 6" :)

[04:52] <crysflame> yes, chewie

[04:52] <mugwump> http://bleaklow.com/blog/archive/000018.html

[04:53] <Chewie[]> We haven't even been around long enough to become experts in a field. I'm an expert at programming by no means.

[04:53] <Chewie[]> mugwump: Oohhh. I found that originally on a gallery a number of months ago. I was looking for it by filename.. <giggle />

[04:54] <SamB> even non-experts have backgrounds

[04:54] <crysflame> mugwump: what is it?

[04:55] <SamB> and you might know more than the average CS degree-holder

[04:55] <mugwump> crysflame: just a rather cynical joke cover

[04:56] <crysflame> ok

[04:56] <Chewie[]> SamB: A week after receiving the degree, when the degree-bearer still holds the knowledge from the past year? Probably not.

[04:57] <mr_ank> Chewie[]: Reexamining the bug/problem: im probably missing something, but why whould it return (1, 2, 3) and not 3?

[04:58] <mr_ank> (perl representation of the number of elements in the array)

[04:58] <Chewie[]> mr_ank: The hyperoperators operate on lists. That one takes a list and, for each element, takes the .elems. It's just like @foo = @bar >>+<< @baz;.

[04:58] <Chewie[]> What about the native printout via .perl? That should give the array of .elems'.

[05:00] <Chewie[]> See also http://dev.perl.org/perl6/doc/design/syn/S03.html#Hyper_operators

[05:00] <SamB> Chewie[]: have you any idea what an average CS student has learned by graduation? me neither. and I would like very much never to find out...

[05:01] <mr_ank> wait

[05:01] <Chewie[]> SamB: It's not a matter of knowledge gained and lossed by graduation. It's a matter of retention.

[05:01] <Chewie[]> Lossed? That's the sleep deprivation ghost speaking. Lost.

[05:01] <mr_ank> Chewie[]: should there be a ">>" char somewhere in your test eval?

[05:02] <Chewie[]> mr_ank: I used the Unicode right French quote character.

[05:03] <mr_ank> okay then, I guess my IRC program missed it - I see no Unicode chars

[05:03] <Chewie[]> mr_ank: I tried it with the ASCII representation. That also produced an error. An interpretation error, too, not an inaccuracy in interpretation as is the case with the msot recent one.

[05:03] <Chewie[]> Most, even.

[05:03] <mr_ank> (i keep getting French and German quotes confused - will get used to them eventually)

[05:03] <mr_ank> mugwump: in your test i see no french or german quotes

[05:04] <Chewie[]> That's quite a presentation, mugwump. Very nice.

[05:04] <mugwump> ok.  feel free to add them.  I'm off to give this talk ...

[05:04] <mugwump> thanks for the feedback Chewie[] !

[05:04] <mugwump> any other suggestions before I go?  :)

[05:04] <mr_ank> Good luck with the talk :)

[05:05] <Chewie[]> mugwump: Don't find any bugs live during the demonstrations. :-p

[05:05] <crysflame> haha

[05:05] <Chewie[]> s/p$/P/

[05:05] <crysflame> it makes it more realistic when you do

[05:05] <crysflame> so if it does happen, demo how easy it is to fix bugs in pugs

[05:05] <mugwump> "never do a live demo" ... I'm not autrijus :)

[05:05] <Chewie[]> True as that may be, it's all about the image.

[05:05] <Chewie[]> mugwump: Giggle.

[05:06] * Chewie[] will be back in about 10 minutes.

[05:06] <mr_ank> Chewie[]: so what you were trying was (("f","oo","bar")>>.elems).perl (s/>>/$french_quote_char/) ?

[05:06] <Chewie[]> Have fun, mugwump.

[05:06] <Chewie[]> mr_ank: Correct.

[05:06] <mr_ank> cool

[05:07] <Chewie[]> It also really didn't like <f oo bar>>>.elems :-D

[05:07] <mr_ank> yes

[05:07] <mr_ank> and i tried it again with the quotes in place and it doesn't work either way

[05:10] <mr_ank> hey, do i need an svn commit account to add a few tests?

[05:11] <mr_ank> (been working on anonymous svn)

[05:11] <Chewie[]> You probably do. That's something I need to find out how to get in the near future.

[05:12] <mugwump> yes you will, ask any of the admins as listed on the openfoundry project page

[05:12] <geoffb> Ping a meta commiter, they will send you an invite email

[05:12] <mr_ank> okay

[05:15] <geoffb> mugwump, perhaps add this to the docs/talks/ ?

[05:17] * mugwump hmms

[05:18] <geoffb> mugwump, you show slides the convert a P5 while into a P6 loop, then a P5 for loop into a P6 while.  That will confuse

[05:19] <mugwump> or amuse

[05:19] <geoffb> heh

[05:19] <mr_ank> okay, should I register in openfoundry and then ping an admin from there?

[05:19] <geoffb> I'm basing that comment on a presumed beginner level viewer

[05:20] <mugwump> mr_ank: you don't need to, the invitation will ask you to sign up

[05:20] <geoffb> mr_ank, I believe you just ping and they invite you to OF

[05:21] <geoffb> mugwump, is there a large version of the image on slide37 somewhere?

[05:21] <mr_ank> ping == just email one of them? or a particular OF feature i'm not seeing?

[05:24] <geoffb> as in, when one of them is around here, /msg them with your request and email address

[05:24] <mr_ank> ah okay :)

[05:29] <geoffb> OK, time to amble slowly towards bed . . .

[05:29] <geoffb> g'night, all

[05:29] <mr_ank> g'night :)

[05:32] <gaal_> morning!

[05:33] <Khisanth> geoffb: that sounds like a good way to get people to ask "What is the point of Perl 6?" :)

[05:34] <sdtr443w> Ah well I give up getting the new Pugs working.  I'm sticking to 6.0.13 for now.  Good night.

[05:36] <autrijus> yo mr_ank. your email? :)

[05:39] <autrijus> got it. welcome aboard!

[05:39] <mr_ank> thanks!

[05:40] <autrijus> mugwump: url to your slides?

[05:40] <autrijus> I must've missed it

[05:40] <mr_ank> <mugwump> http://utsl.gen.nz/perl6-intro/html/  # talk I'm giving tonight ...

[05:43] <autrijus> k thanks

[05:57] <hcchien> autrijus: saw my rx tests?

[05:57] <gaal_> mugwump, did you find the =<> you were looking for?

[05:58] <autrijus> hcchien: no, where?

[05:58] <gaal_> op1 "=" and lib/pugs/run.pod <- -n and -p switches

[05:58] <hcchien> autrijus: like these:

[05:58] <hcchien> 12:30 < hcchien> this would be broken: say $str if ($str ~~ rx:perl5/http:\/\//);

[05:58] <hcchien> 12:31 < hcchien> but it's fine with: say $str if ($str ~~ rx:perl5{http:\/\/});

[06:00] <autrijus> you mean the rx interpolation is bad?

[06:00] <autrijus> yeah, looks like so.

[06:00] <hcchien> I guess so. what do you think?

[06:00] <autrijus> write a t/rules/escape.t please?

[06:00] <autrijus> and commit it

[06:00] <autrijus> I'll take a look

[06:01] <hcchien> or rx_perl5_match.t ?

[06:02] <autrijus> it's not _match

[06:02] <autrijus> so rx_perl5_escape

[06:03] <hcchien> k

[06:12] <autrijus> mr_ank: remember to add yourself to AUTHORS

[06:16] <autark-jp> the qfInterpolateBackslash of rxP5Flags (and maybe rxP6Flags as well) should probably be QB_Single and not QB_No.

[06:17] <autrijus> autark-jp: ooh. commit ahead :)

[06:17] <autark-jp> however, that makes rx:perl5/http:\q[//]/ legal

[06:17] <autark-jp> \me scratches head

[06:25] <autrijus> may not be a bad thing :)

[06:36] <svnbot6> r4583, autark++ | * make '\' protect delimiters in rx

[06:41] <autrijus> hcchien: fixed :D but still test welcome

[06:59] <hcchien> autrijus: sure

[07:01] <gaal_> hello. i've made a list of candidates for Preludification.

[07:01] <gaal_> http://pugs.kwiki.org/?PreludificationCandidates

[07:01] <gaal_> Please hack :)

[07:40] <q[pdcawley]> ?eval class Array { method foo { "Foo" } }; [].foo

[07:40] <evalbot6> Error: No compatible subroutine found: "&foo" 

[07:40] <svnbot6> r4584, autrijus++ | * Test and document for a new bug that prevents s:P5{}{{...}} from

[07:40] <svnbot6> r4584, autrijus++ |   interpolating.

[07:40] <q[pdcawley]> ?eval class Array { method foo { "Foo" } }; my @foo = (10); @foo.foo

[07:41] <evalbot6> 'Foo' 

[07:41] <q[pdcawley]> Where do I send a test patch to?

[07:42] <autrijus> q[pdcawley]: invitation sent.

[07:42] <autrijus> welcome aboard!

[07:42] <autrijus> as we're nearing preflight, please add :todo<bug> to the patch.

[07:43] <q[pdcawley]> And does this test classes or data types or what? ie, what file should I stick it in?

[07:43] <gaal_> autrijus, any chance to get the intermediate accessor bug fixed before this release? :)

[07:43] <autrijus> gaal_: what's that bug again?

[07:43] <gaal_> ?eval caller.subname

[07:43] <evalbot6> Error: No compatible subroutine found: "&subname" 

[07:43] <gaal_> ?eval my $c = caller; $c.subname

[07:43] <evalbot6> Error: No compatible subroutine found: "&subname" 

[07:43] <gaal_> oops!

[07:44] <autrijus> ...

[07:44] <autrijus> but anyway. to get that to work

[07:44] <q[pdcawley]> is &?CALLER_CONTINUATION or whatever it's called a full continuation yet?

[07:44] <autrijus> declare your sub as "returns Code".

[07:44] <gaal_> ?eval sub x { my $c = caller; $c.subname } sub y{x} y

[07:44] <evalbot6> \'&main::y' 

[07:45] <gaal_> ?eval sub x { caller.subname  } sub y{x} y

[07:45] <evalbot6> Error: No compatible subroutine found: "&subname" 

[07:45] <autrijus> q[pdcawley]: you can try... I think it's full, not sure

[07:45] <autrijus> gaal_: "returns Code"

[07:45] <q[pdcawley]> Heh. I'll get that non-deterministic Sudoku solver written and see if it breaks :)

[07:45] <gaal_> autrijus: on what? subname is really $.subname

[07:46] <autrijus> gaal_: on caller()

[07:46] <autrijus> q[pdcawley]: fwiw, pugs currently discards no scope

[07:46] <autrijus> q[pdcawley]: so eval"" will always work

[07:46] <q[pdcawley]> Whee!

[07:46] <q[pdcawley]> Don't tell chip :)

[07:46] <autrijus> otoh, pugs is also not very fast nor memory friendly

[07:47] <autrijus> I make no promise of what will become when we compile to parrot.

[07:47] <q[pdcawley]> Bah!

[07:47] <autrijus> otgh, I like the eval_in_caller_scope idea.

[07:47] <autrijus> in fact, I desperately need something like that.

[07:47] <autrijus> (for eval_is() to work)

[07:47] <q[pdcawley]> Exactly.

[07:47] <autrijus> so if you can get the syntax defined for p6

[07:47] <autrijus> on p6l

[07:47] <autrijus> please do so

[07:47] <autrijus> maybe in another thread, maybe not

[07:47] <q[pdcawley]> Will try.

[07:48] <autrijus> danke.

[07:48] <q[pdcawley]> I don't mind that it's not built in, I do mind that I can't write it.

[07:48] <q[pdcawley]> Which might well be my Perl 6 motto.

[07:49] * autrijus mumbles something about inline PASM

[07:49] <gaal_> autrijus, i'm building in the background, but could you explain *why* is Code should fix the problem? caller is supposed to return an object, not code.

[07:49] <autrijus> gaal_: oh, it's an object?

[07:49] <autrijus> then declare it as such.

[07:49] <autrijus> returns Control::Caller

[07:49] <autrijus> or something like that.

[07:49] <gaal_> yes, it's supposed to return a Contorl::Caller

[07:49] <gaal_> yeah.

[07:49] <autrijus> the reason is in chained method calls

[07:49] <gaal_> okay, still: why does this matter?

[07:49] <autrijus> $a.foo.bar

[07:50] <autrijus> currently the MMD resolver for .bar has no access to $a.foo's actual results

[07:50] <autrijus> but only the EXp

[07:50] <autrijus> so it's a expression-based dispatch

[07:50] * gaal_ nods

[07:50] <autrijus> that is arguably wrong.

[07:50] <autrijus> and needs fixing

[07:50] <autrijus> but not for this release :)

[07:50] <gaal_> :)

[07:51] <autrijus> also, if you have a bit of tuits, I need help on ChangeLogging :)

[07:51] * autrijus is triaging the tests

[07:51] <gaal_> sure - do you have the r number for the last release?

[07:53] <autrijus> 4424

[07:53] <gaal_> thanks

[07:53] <gaal_> hah! sub foo () returns X is A; # ok

[07:54] <gaal_> sub foo() is A returns X; # error

[07:54] <autrijus> that's right.

[07:54] <autrijus> fixes... welcome :)

[07:54] <gaal_> "not for this release"

[07:55] <autrijus> lol

[07:56] <gaal_> autrijus, your "returns" fix yields a very strange error:

[07:57] <gaal_> oh wait no

[07:57] <q[pdcawley]> Mmm... tramp.el++

[07:57] <autrijus> "the fact that it works is the strangest error"

[07:57] <gaal_> no, it just doesn't do anything :(

[07:57] <gaal_> heh hrh

[07:58] <gaal_> oh! look:

[07:58] <gaal_> ..... caller.subname # error

[07:58] <gaal_> caller().subname  # ok

[07:59] <gaal_> well, this is an improvement, so i'm checking it in

[08:00] <autrijus> k

[08:00] <q[pdcawley]> ?eval my @foo; @foo.foo

[08:00] <evalbot6> Error: No compatible subroutine found: "&foo" 

[08:00] <autrijus> meanwhile I unbroke map {3 => 4;} 1,2,3

[08:00] <gaal_> but i'm correct in calling this a bug, yes?

[08:00] <autrijus> gaal_: you are.

[08:00] <q[pdcawley]> ?eval my @foo = (1,2,3); @foo.foo

[08:00] <evalbot6> Error: No compatible subroutine found: "&foo" 

[08:00] *** gaal_ is now known as gaal

[08:01] * autrijus wonders what is q[pdcawley] trying to do

[08:01] <q[pdcawley]> ?eval class Array { method foo { "Foo" } }; my @foo; @foo.foo

[08:01] <evalbot6> 'Foo' 

[08:01] <q[pdcawley]> ?eval class Array { method foo { "Foo" } };  [].foo

[08:01] <evalbot6> Error: No compatible subroutine found: "&foo" 

[08:01] <q[pdcawley]> Checking stuff again before writing the test.

[08:01] <q[pdcawley]> ?eval class Array { method foo { "Foo" } };  my $foo = []; $foo.foo

[08:02] <evalbot6> 'Foo' 

[08:02] <q[pdcawley]> Sorry, should really do this on feather shouldn't I? Wow. Expected that to break.

[08:02] <autrijus> nah, that's fine. awating your test.

[08:02] <q[pdcawley]> Writing it as we speak. Post to p6c?

[08:03] <autrijus> no, commit it!

[08:03] <autrijus> you got an invitation mail after all :)

[08:03] <q[pdcawley]> Err... I haven't a clue what my perl id or key is.

[08:03] <autrijus> hm? it's openfoundry thing

[08:03] <autrijus> you can commit into http://svn.openfoundry.org/pugs

[08:03] <autrijus> as soon as you click on the url in that mail

[08:03] <q[pdcawley]> Ah. Okay.

[08:04] <autrijus> and agree to turn in your first unborn parent, or something

[08:04] <q[pdcawley]> Might take a while, I'm greylisting.

[08:04] <autrijus> 'kay. then it's easier just to hop on http://rt.openfoundry.org/

[08:04] <autrijus> and click "register"

[08:04] <autrijus> and tell me your userid.

[08:04] <q[pdcawley]> Got it.

[08:05] <autrijus> and by the time you check in your test it'd be passing.

[08:05] <q[pdcawley]> :)

[08:05] <autrijus> pugs is strange like that.

[08:05] <hcchien> hmm...., make the pugs failed

[08:06] <autrijus> hcchien: how?

[08:06] <svnbot6> r4585, autrijus++ | * fix a regression that made `map { 1 => 2; } @x` break -- Noop

[08:06] <svnbot6> r4585, autrijus++ |   is now restored at an empty trailing semicolon.

[08:06] <hcchien> linking failed, a sec. let me try to paste it on nopaste

[08:07] <autrijus> q[pdcawley]: also remember to add yourself to AUTHORS.

[08:07] <q[pdcawley]> So, I'm in feather, I've got an svk thing checked out, how do I check it back in (sorry for being dumb).

[08:08] <autrijus> svk ci

[08:08] <hcchien> autrijus: http://irc.csie.org:8888/110

[08:08] <autrijus> if you see "committing back" then it all works

[08:08] <q[pdcawley]> And it asks for id and password?

[08:08] <autrijus> right

[08:08] <q[pdcawley]> So much nicer than CVS :)

[08:08] <autrijus> that'd be your openfoundry id/passwd

[08:09] <autrijus> hcchien: are you using gcc 3.3 on a clean tree?

[08:09] <autrijus> hcchien: `gcc_select 3.3`

[08:09] <q[pdcawley]> Fecking zsh, refusing to honour stty erase...

[08:10] <hcchien> oh, hate gcc 4. :p

[08:12] * q[pdcawley] mutters... still haven't got GHC building on tiger. Cleaned everything out and it bitches about out of date syntax or something during hte compile.

[08:12] <svnbot6> r4586, gaal++ | caller().subname works (though caller.subname still doesn't). autrijus++

[08:12] <svnbot6> r4587, autrijus++ | * test fixups.

[08:12] <svnbot6> r4588, autrijus++ | * pdcawley noted that `[].method` did not call `Array::method`;

[08:12] <svnbot6> r4588, autrijus++ |   neither does `{}.method` call `Hash::method`.  Fixed.

[08:12] <svnbot6> r4589, autrijus++ | * I fail to see where .elems would return 1-based index;

[08:12] <svnbot6> r4589, autrijus++ |   changed to test .keys, which works.

[08:13] <q[pdcawley]> Ooh, forgot to add a check for hashes.... I'll do that now.

[08:15] <q[pdcawley]> What about pairs made with the cunning pair constructor whose syntax I've forgotten?

[08:16] <q[pdcawley]> ?eval :head<tail>

[08:16] <evalbot6> ('head' => 'tail') 

[08:17] <q[pdcawley]> ?eval :head<tail>.key

[08:17] <evalbot6> undef 

[08:17] <q[pdcawley]> ?eval :head<tail>.value

[08:17] <evalbot6> Error: cannot cast from VUndef to (Pugs.AST.Internals.Val,Pugs.AST.Internals.Val) 

[08:17] <q[pdcawley]> ?eval (:head<tail>).value

[08:17] <evalbot6> Error: cannot cast from VUndef to (Pugs.AST.Internals.Val,Pugs.AST.Internals.Val) 

[08:17] <autrijus> [=>] <head tail>

[08:17] <autrijus> ?eval [=>] <head tail>

[08:17] <evalbot6> ('head' => 'tail') 

[08:17] <autrijus> ?eval [=>] <head tail foo bar>

[08:17] <evalbot6> ('head' => ('tail' => ('foo' => 'bar'))) 

[08:17] <q[pdcawley]> ?eval :head<tail>.head

[08:17] <evalbot6> Error: No compatible subroutine found: "&head" 

[08:17] <svnbot6> r4590, autrijus++ | * hardtodo'ed sprintf_and_as.t

[08:17] <autrijus> ?eval ([=>] <head tail foo bar>)key

[08:17] <autrijus> ?eval ([=>] <head tail foo bar>).key

[08:17] <evalbot6> Error:  unexpected "k" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[08:17] <evalbot6> 'head' 

[08:17] <autrijus> ?eval ([=>] <head tail foo bar>).value

[08:18] <evalbot6> ('tail' => ('foo' => 'bar')) 

[08:18] <autrijus> ?eval ([=>] <head tail foo bar>).value.value

[08:18] <evalbot6> ('foo' => 'bar') 

[08:18] <autrijus> ?eval ([=>] <head tail foo bar>).value.value.value

[08:18] <evalbot6> \'bar' 

[08:18] <q[pdcawley]> ?eval :head<tail>.value

[08:18] <evalbot6> Error: cannot cast from VUndef to (Pugs.AST.Internals.Val,Pugs.AST.Internals.Val) 

[08:19] <q[pdcawley]> ?eval (:head<tail>).value

[08:19] <evalbot6> Error: cannot cast from VUndef to (Pugs.AST.Internals.Val,Pugs.AST.Internals.Val) 

[08:19] <q[pdcawley]> ick.

[08:19] <autrijus> ?eval (head => 'tail').value

[08:19] <evalbot6> Error: cannot cast from VUndef to (Pugs.AST.Internals.Val,Pugs.AST.Internals.Val) 

[08:19] <autrijus> I think I know why.

[08:19] <q[pdcawley]> Oh good :)(

[08:19] <autrijus> it's being parsed as 

[08:19] <autrijus> value(:head<tail>)

[08:19] <autrijus> as in, a named argument 'head'.

[08:19] <autrijus> so, a :todo<bug> test welcome

[08:20] <q[pdcawley]> Add :todo<bug> to the commit message right?

[08:20] <autrijus> no, the test

[08:20] <autrijus> is('foo', 'bar', :todo<bug>);

[08:20] <q[pdcawley]> Oh fuck. I've written things a test method in the hash...

[08:20] <q[pdcawley]> Not an issue with pair thing of course.

[08:23] <q[pdcawley]> is there a quick and dirty way of running just one test file?

[08:23] <q[pdcawley]> ie, a perl6 version of prove.

[08:24] <autrijus> env HARNESS_PERL=./pugs prove ...

[08:24] <autrijus> env HARNESS_PERL=./pugs prove t/foo/bar

[08:24] <q[pdcawley]> coo.

[08:24] <q[pdcawley]> cool.

[08:24] <autrijus> make subdirs; ./pugs -Iblib6/lib t/foo/bar

[08:24] <autrijus> etc. 

[08:24] <autrijus> (Test Anything Protocol)++

[08:32] <q[pdcawley]> cool innit?

[08:33] <svnbot6> r4591, autrijus++ | * test cleanup, round #2.

[08:33] <gaal> autrijus: ChangeLog 87% done

[08:35] <gaal> is lvalue substr a feature or a bugfix? :)

[08:37] <mr_ank> ?eval <A B> ~~ ('A',/B/)

[08:37] <evalbot6> bool::false 

[08:37] <mr_ank> Shouldn't that be true?

[08:38] <q[pdcawley]> cool innit?

[08:38] <q[pdcawley]> Oops, wrong window.

[08:38] <gaal> ?eval <A B>

[08:38] <evalbot6> ('A', 'B') 

[08:39] <gaal> (1,2) ~~ (1, 2)

[08:39] <gaal> ?eval (1,2) ~~ (1, 2)

[08:39] <evalbot6> bool::true 

[08:39] <gaal> ?eval (1,2) ~~ (1, 2.0)

[08:39] <evalbot6> bool::true 

[08:39] <mr_ank> regexes should be allowed there afaik

[08:39] <gaal> ?eval (1,2) ~~ (1,/2/)

[08:39] <mr_ank> (s/regexes/rules/ heh)

[08:39] <evalbot6> bool::false 

[08:40] <mr_ank> look at this

[08:40] <gaal> i think the definition of ~~ isn't... creepy

[08:40] <mr_ank> ?eval <a> ~~(/a/)

[08:40] <evalbot6> pugs: src/events.c:265: init_events_first: Assertion `rc == 0' failed. 

[08:40] <gaal> ie for lists, it doesn't recursively ~~ in the list

[08:40] <gaal> brb

[08:41] <mr_ank> im looking for more info about that...

[08:41] <mr_ank> i remember reading it somewhere other than the perl 6 & parrot essentials book

[08:42] <gaal> look at the big ~~ table in A04 i think it is

[08:43] <mr_ank> yep

[08:43] <mr_ank> list    list      recursive disjunction*   match if any($a) =~ any($b)

[08:43] <mr_ank> but it isn't quite that

[08:44] <svnbot6> r4592, pdcawley++ | Added test for calling methods on arrays and hashes, including anonymous ones.

[08:44] *** scw_ is now known as scw

[08:45] <mr_ank> darn, this is going to drive me crazy

[08:46] <gaal> does `as` work now?

[08:48] <nothingmuch> anybody got a nice project for someone just learning computers?

[08:48] <ingy> hola

[08:48] <nothingmuch> a 1-2 hour job

[08:48] <ingy> want to see something cool?

[08:48] <nothingmuch> if it's not obscene

[08:49] <gaal> ingy, we always want to see your *modules*

[08:49] <ingy> http://doolittle.kwiki.org/

[08:49] <ingy> there you go gaal 

[08:49] <gaal> this is why i like #perl6

[08:49] <nothingmuch> #touch-my-monads, #touch-my-modules

[08:49] <gaal> instant gratification

[08:50] <gaal> http://doolittle.kwiki.org/index.cgi?HomePage # is sucking

[08:50] <mr_ank> yes oretty much

[08:50] <mr_ank> *pretty

[08:51] <mr_ank> http://doolittle.kwiki.org/index.cgi?action=search;search_term=Spoon-Command # is sucking too

[08:53] <mr_ank> brb

[08:53] <gaal> http://perlcabal.org/~gaal/smoke_xp.html # r4587

[08:53] <q[pdcawley]> ?eval try { die "Foo"; CATCH { "Caught Foo" } }

[08:53] <evalbot6> undef 

[08:53] <gaal> ChangeLog updated.

[08:53] <q[pdcawley]> undef? weird.

[08:54] <q[pdcawley]> ?eval try { die "Foo"; CATCH /.?/ { "Caught Foo" } }

[08:54] <evalbot6> undef 

[08:54] <svnbot6> r4593, pdcawley++ | Added a test of method calls on a bare pair

[08:54] <svnbot6> r4594, gaal++ | ChangeLog updates (to 4592)

[08:54] <svnbot6> r4595, autrijus++ | * Turn p5 regexes back to QB_No again (not QB_Single) because

[08:54] <svnbot6> r4595, autrijus++ |   we need to preserve the double \\ into PCRE.

[08:54] <svnbot6> r4595, autrijus++ |   (this needs further investigation.)

[08:54] <q[pdcawley]> ?eval try { die "Foo"; CATCH { return "Caught Foo" } }

[08:54] <evalbot6> undef 

[08:54] <gaal> my favorite part of ChangeLogging is this line:

[08:54] <gaal> * Some new test and several tests refactored, we now have 7650+ tests

[08:55] <q[pdcawley]> How is that undef?

[08:55] <gaal> brb

[08:58] <Aankhen``> ?eval die "Foo"

[08:58] <evalbot6> Error: Foo 

[09:02] <svnbot6> r4596, autrijus++ | * test fixes, round #3.

[09:03] <q[pdcawley]> Is there an array slicing syntax yet?

[09:03] <nothingmuch> test runs are ~5 times longer with each passing month... I wonder if that is a good thing ;-)

[09:05] <cognominal> nothingmuch, thx so much about you Forth stuff

[09:06] <nothingmuch> wow! 4th or 5th good comment =) i'm overjoyed

[09:06] <nothingmuch> i'll try to get chapter 8 out of the door today

[09:06] <cognominal> it really feels a gap to bootstrap oneself to become a lambda camel

[09:08] <autrijus> ?eval my @a = 1..10; @a[4,5,6]

[09:08] <evalbot6> [5, 6, 7] 

[09:08] <nothingmuch> any feedback?

[09:09] <autrijus> q[pdcawley]: there you go

[09:09] <nothingmuch> also, how far did you get so far?

[09:09] <q[pdcawley]> Great. Ta.

[09:09] <q[pdcawley]> Now, what's a quick way of writing 'all_distinct(@some_array)'?

[09:10] <autrijus> ?eval my @a = (1,1,2,3,5,8,13,2,3,5); @a.uniq

[09:10] <evalbot6> (1, 2, 3, 5, 8, 13) 

[09:10] <q[pdcawley]> So @a.uniq == @a should do the trick?

[09:10] <nothingmuch> @a.=uniq eventually

[09:10] <autrijus> sure

[09:11] <autrijus> ?eval my @a = (1,1,2,3,5,8,13,2,3,5); @a .= uniq;

[09:11] <evalbot6> [1, 2, 3, 5, 8, 13] 

[09:11] <q[pdcawley]> Cool... Makes this sudoku solver read easy to write...

[09:11] <nothingmuch> autark-jp++

[09:11] <q[pdcawley]> Admittedly, it won't be quick, but it'll be dead easy to write :)

[09:11] * autrijus ponders renick to "autarijus"

[09:11] <nothingmuch> autrijus++

[09:11] <autrijus> because "ijus" sorts better than "k-jp"

[09:11] <nothingmuch> oops ;-)

[09:13] <autark-jp> hm, here's a better solution

[09:13] <q[pdcawley]> ?eval my @foo = ([1..4], [1..4], [1..4], [1..4]); @foo[0,1][0,1];

[09:13] <evalbot6> [[1, 2, 3, 4], [1, 2, 3, 4]] 

[09:13] *** autark-jp is now known as jp-autark

[09:13] <q[pdcawley]> Shame!

[09:13] <q[pdcawley]> ?eval my @foo = ([1..4], [1..4], [1..4], [1..4]); @foo[0,1]<<[0,1]>>;

[09:13] <evalbot6> Error: Cannot cast into Hash: VRef <Array::Slice> 

[09:13] <q[pdcawley]> ?eval my @foo = ([1..4], [1..4], [1..4], [1..4]); @foo[0,1]>>[0,1]<<;

[09:13] <evalbot6> Error:  unexpected ">" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[09:13] <q[pdcawley]> Curse...

[09:14] <q[pdcawley]> ?eval my @foo = ([1..4], [1..4], [1..4], [1..4]); @foo[0][0..3]

[09:14] <evalbot6> [1, 2, 3, 4] 

[09:14] <q[pdcawley]> ?eval my @foo = ([1..4], [1..4], [1..4], [1..4]); @foo[0][0..2]

[09:14] <evalbot6> [1, 2, 3] 

[09:14] <q[pdcawley]> ?eval my @foo = ([1..4], [1..4], [1..4], [1..4]); @foo[0..4][0..2]

[09:15] <evalbot6> [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]] 

[09:15] <q[pdcawley]> ?eval my @foo = ([1..4], [1..4], [1..4], [1..4]); [@foo[0..4]][0..2]

[09:15] <evalbot6> [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]] 

[09:15] <nothingmuch> jp-autark++

[09:15] <autrijus> jp-autark: er. thanks :)

[09:15] <autrijus> q[pdcawley]: deref isn't yet hyperised.

[09:16] <q[pdcawley]> NP. I can write a map. Now must go help gill with a crossword.

[09:18] <autrijus> hm. here's a docs task for people who have a bit time

[09:18] <autrijus> refactor the pod part out of lib/pugs.pm into lib/pugs.pod

[09:18] <autrijus> and in pugs.pod mention both the pugs command line and the pugs.pm module

[09:18] <autrijus> as well as provide links to pugs::run and pugs::hack

[09:18] <autrijus> in the same style as "man perl"

[09:18] <autrijus> anyone got a few seconds to work on this?

[09:20] <q[pdcawley]> ?eval my @foo = ([1..4], [1..4], [1..4], [1..4]); [map {$^a[0]}, @foo[0..3]]

[09:21] <evalbot6> Error:  unexpected "[" expecting ";", statements or end of input 

[09:21] <q[pdcawley]> Hmm...

[09:21] <q[pdcawley]> What's wrong with that?

[09:21] <q[pdcawley]> ?eval my @foo = ([1..4], [1..4], [1..4], [1..4]); [map -> $a {$a[0]}, @foo[0..3]]

[09:21] <evalbot6> [1, 1, 1, 1] 

[09:21] <q[pdcawley]> Ah.

[09:22] <autrijus> ?eval {$^a}

[09:22] <evalbot6> Error:  unexpected "\\" expecting "::" 

[09:22] <autrijus> ?eval {$^a[0]}

[09:22] <evalbot6> Error:  unexpected "\\" expecting "::" 

[09:22] <autrijus> it's I think a evalbot bug

[09:24] <ingy> hi autrijus 

[09:25] <autrijus> hi ingy 

[09:25] <ingy> autrijus: did you see doolittle?

[09:26] <ingy> gugod helped me write the plugin in a couple hours

[09:26] <ingy> http://doolittle.kwiki.org/

[09:26] <autrijus> no.

[09:26] <ingy> anyway, if you want i can put all your modules under it

[09:27] <ingy> and let the community doc them

[09:27] <autrijus> sure

[09:27] <ingy> the changes are saved right back into the modules

[09:27] <ingy> so you can review with svk

[09:27] <ingy> and keep the stuff you like

[09:27] <ingy> it's awesome

[09:27] <q[pdcawley]> Hmm... seems &?CALLER_CONTINUATION doesn't work yet...

[09:28] <q[pdcawley]> Or I've not implemented choose/give_up correctly.

[09:28] <autrijus> q[pdcawley]: t/unspecced/cont.t gives status quo

[09:28] <q[pdcawley]> okay.

[09:29] <q[pdcawley]> So the continuations we have are only escape continuations.

[09:29] *** webmind_ is now known as webmind

[09:30] <autrijus> there's plan to make it full one in my paper :)

[09:30] <q[pdcawley]> How long, oh autrijus, how long?

[09:30] <autrijus> feel free to write :todo<feature> tests

[09:30] <autrijus> I trade feature for tests, as you know.

[09:31] <q[pdcawley]> You asked for it :)

[09:32] * q[pdcawley] mutters to himself "So, how to reduce this to the minimum 'useful' example...

[09:34] <nothingmuch> ingy: i'd like that doolitle stuff at least for Test::TAP::...

[09:34] <nothingmuch> you didn't mention before that it's read/write... that's a wonderful idea!

[09:35] <nothingmuch> well now that i'm dressed, a beer, and i'm off

[09:35] <nothingmuch> ciao guys

[09:36] <nothingmuch> beer is like gatorade, only it tastes good

[09:42] <q[pdcawley]> Ooh, now that's weird...

[09:43] <q[pdcawley]> ?eval sub callcc (Code &block) {&block(&?CALLER_CONTINUATION)}; my $cnt; my $counter=0; callcc -> $c {$cnt = $c}; $counter++; $cnt(5) unless $counter == 3; $counter

[09:43] <evalbot6> 5 

[09:43] <svnbot6> r4597, autrijus++ | * round #4 of test fixes.

[09:44] <q[pdcawley]> ?eval sub callcc (Code &block) {&block(&?CALLER_CONTINUATION)}; my $cnt; my $counter=0; callcc -> $c {$cnt = $c}; $counter++; $cnt(5) unless $counter == 3; $counter

[09:44] <evalbot6> 5 

[09:44] <gaal> autrijus, i've got a smoke or roud 3 coming up (in t/pugstun/ now). i'll let it finish, ja?

[09:44] <gaal> * of round

[09:44] <autrijus> gaal: sure

[09:45] <q[pdcawley]> The continuation doesn't even bounce back to the right place...

[09:45] <autrijus> I'll review checngelog now

[09:45] <gaal> oh, make sure to change the very first line

[09:45] <autrijus> sure

[09:46] <q[pdcawley]> The continuation doesn't even bounce back to the right place...

[09:47] <q[pdcawley]> Argh! Wrong window. Again.

[09:51] <q[pdcawley]> Can I check in a non working example to show the sort of thing that can be done with full continuations?

[09:51] <svnbot6> r4598, pdcawley++ | Added a simple continuation based loop to test full continuations.

[09:51] <svnbot6> r4599, autrijus++ | * change hw2005.txt to hw2005.tex

[09:52] <autrijus> q[pdcawley]: sure, check it in as examples/continuation/

[09:52] <autrijus> and clearly mark it as broken

[09:53] <q[pdcawley]> Wilco. I've written a non deterministic brute-force sudoku solver and, though I say so myself as shouldn't, it's gorgeous.

[09:53] <gaal> http://perlcabal.org/~gaal/smoke_xp.html # r4596

[09:54] <mr_ank> non deterministic? where?

[09:54] <q[pdcawley]> About to be checked in to examples/continuation

[09:54] <mr_ank> cool!

[09:55] <q[pdcawley]> It doesn't work yet.

[09:55] <gaal> i've begun a smoke of 4600 as a pre-preflight  measure.

[09:57] <autrijus> ditto here.

[09:57] <svnbot6> r4600, autrijus++ | * fix test plan numbers (for the release).

[09:57] <svnbot6> r4601, autrijus++ | * cleanup changelog

[09:57] <autrijus> if looks good, we enter preflight.

[09:57] <gaal> will take 20 more minutes to complete though.

[09:57] <autrijus> gaal: can you handle the pugs.pod thing?

[09:57] * autrijus is still relenging

[09:57] * gaal backloggeth

[09:58] <gaal> sure.

[10:04] <svnbot6> r4602, pdcawley++ | Added an example of the kind of programming that access to full

[10:04] <svnbot6> r4602, pdcawley++ | continuations enables. A UI will be forthcoming when we get full 

[10:04] <svnbot6> r4602, pdcawley++ | continuations.

[10:05] <gaal> pugs.pm in the context of pugs docs / pugs.pod can be confusing

[10:06] <gaal> not sure how (wehther) to place it in the SYNOPSIS section of that pod at all

[10:07] <autrijus> oh

[10:07] <autrijus> say that you can use it at command line

[10:07] <autrijus> _and_ as a library in p5 programs

[10:07] <autrijus> give one example of each

[10:08] <autrijus> that I think is okay

[10:08] <gaal> yes, i now have =head1 SYNOPSIS

[10:08] <gaal> B<pugs> [OPTIONS]

[10:08] <gaal> B<perl> -e 'use pugs; # perl 6 code here...'

[10:08] <gaal> btw, it's cute for p6 pods to have a SYNOPSIS section ;-)

[10:10] <svnbot6> r4603, pdcawley++ | A few explanatory comments. Not many...

[10:35] <svnbot6> r4604, autrijus++ | * round #5.

[10:36] <gaal> ah, which reminds me, new matrix up

[10:36] <gaal> of r4600

[10:38] <autrijus> oh. url again?

[10:39] <gaal> http://perlcabal.org/~gaal/smoke_xp.html

[10:39] <gaal> pod in a minute

[10:40] <kungfuftr> 7666 tests... spooky

[10:43] <autrijus> gaal: hm, line 28 of caller.t failsforyou?

[10:43] <autrijus> gaal: weird

[10:43] <autrijus> it worksforme

[10:44] <gaal> i may have junk in, let me check

[10:44] <gaal> sec

[10:45] <gaal> (running r4604 smoke now)

[10:47] <gaal> yes, it is failing for me.

[10:47] <gaal> btw pugs.pod in

[10:47] <autrijus> gaal: hm. what to do what to do.

[10:47] <autrijus> (it worksforme.)

[10:48] <autrijus> will you change it to skip it for now?

[10:48] <autrijus> is it possible you have unchecked in local changes?

[10:48] <gaal> !? when i prove, it works.

[10:48] <gaal> no, i checked.

[10:48] <autrijus> or Prelude.pm foo?

[10:48] <gaal> when i make test, it doesn't work.

[10:48] <gaal> er, make smoke

[10:48] <autrijus> wtf. :-/

[10:48] <svnbot6> r4605, gaal++ | pugs POD

[10:50] <gaal> oh, crap

[10:50] <gaal> look at the diff:

[10:50] <gaal>   Expected: 't/builtins/caller.t'

[10:50] <gaal> Got: 't\builtins\caller.t'

[10:50] <autrijus> fix it please :)

[10:50] <mr_ank> recompiling Pugs... dum deh dum...

[10:51] <gaal> and i ran prove in a cygwin box, but make smoke in a dos box :)

[10:51] <gaal> :)

[10:52] <autrijus> nvm, I attempted a fix

[10:52] <gaal> eh, should use $Config directory separator

[10:52] * gaal == stoopid

[10:52] <autrijus> I used $?FILE

[10:52] <gaal> heh :)

[10:52] <autrijus> even better eh :)

[10:52] <gaal> that's better

[10:53] * gaal chuckles

[10:53] <gaal> though if you do that you'd better add a sanity check for them both not to be undefined.

[10:53] <gaal> (i'll add it)

[10:53] <svnbot6> r4606, autrijus++ | * bump version. we're now in preflight!

[10:53] <svnbot6> r4606, autrijus++ | * remove perl5-specific paras from pugs.pod.

[10:53] <svnbot6> r4607, autrijus++ | * fix platform specifity in caller.t; noticed by gaal++

[10:54] <gaal> ooh, preflight!

[10:54] <mr_ank> q[pdcawley]: your continuations code looks very mysterious to me

[10:55] <autrijus> nah. sanity is tested elsewhere

[10:55] <gaal> k

[10:55] <gaal> got a tarball?

[10:56] <autrijus> a sec

[10:56] <autrijus> running into MANIFEST problems

[10:56] <autrijus> with space in filenames

[10:56] <gaal> in time like these, /me wishes for GHC had a global ccache-like cache.

[10:56] <gaal> s/for//

[10:57] <autrijus> bah. manifest doesn't support spaces in filenames.

[10:57] <gaal> oi

[10:57] <autrijus> so much for cleverness.

[10:59] <autrijus> uploading

[10:59] <svnbot6> r4608, autrijus++ | * sadly, ignore t/builtins/system/ because MANIFEST cokes

[10:59] <svnbot6> r4608, autrijus++ |   on filenames with spaces.

[10:59] <autrijus> yo!

[11:03] *** autrijus changes topic to: Preflight #1 http://perlcabal.org/~autrijus/Perl6-Pugs-6.2.7-pre1.tar.gz | http://pugscode.org/ <Overview Journal Logs> | http://pugs.kwiki.org | paste at http://sial.org/pbot/perl6

[11:03] <autrijus> http://perlcabal.org/~autrijus/Perl6-Pugs-6.2.7-pre1.tar.gz

[11:03] <autrijus> please test :)

[11:04] <gaal> e742d2ce436121ee1b259b0f6aa55b662c4950bf ?

[11:04] <jrieks> [email@hidden.address]
[11:04] <autrijus> gaal: yes

[11:04] <svnbot6> r4609, gaal++ | minor fixes

[11:04] <autrijus> 910384751a111c918799f87918b6664a too

[11:04] <gaal> it has two sums?

[11:04] <autrijus> gaal: note the length, silly :)

[11:05] <gaal> junctive sums :)

[11:05] <jrieks> 910384751a111c918799f87918b6664a  Perl6-Pugs-6.2.7-pre1.tar.gz

[11:05] <autrijus> jrieks: invitation sent. welcome aboard (as the ship is about to sail again)!

[11:05] <autrijus> jrieks: also add your name to AUTHORS

[11:06] <gaal> btw: do we still need to 'nmake

[11:06] <gaal> before 'nmake smoke'?

[11:06] <gaal> ew, i said nmake

[11:06] <autrijus> probably not

[11:06] <autrijus> ew you said nmake

[11:07] <gaal> hey, why'd it try to buid with embedded p5? :(

[11:07] <autrijus> you have naughty env?

[11:08] <gaal> err

[11:08] <gaal> yes

[11:08] * gaal bonks himself on the head

[11:08] <mr_ank> is src/Pugs/Parser.hs the main grammar description?

[11:08] <mr_ank> (or something of the sort?)

[11:11] <autrijus> mr_ank: aye

[11:11] <Aankhen``> Aye aye!

[11:11] * Aankhen`` syncs up and tests.

[11:12] <mr_ank> cool

[11:13] <mr_ank> Is there a standard/automated way of working with large parsers? or do you guys just work on the file directly?

[11:13] <autrijus> that file is not generated

[11:13] <autrijus> if that's what you mean

[11:14] <mr_ank> well, i only have experience with the Dragon Book

[11:14] <mr_ank> so I am outdated

[11:14] <autrijus> I think Parser.hs is actually easy to understand :)

[11:14] <autrijus> (more so than the dragon book that is)

[11:15] <mr_ank> It looks really really cool - I am definitely putting more effort into my abandoned haskell wannabe-skills

[11:18] <autrijus> :D

[11:18] <autrijus> mr_ank: want a committer bit?

[11:18] <gaal> (moving to ext/ tests)

[11:19] <mr_ank> oh i haven't tried commiting yet - do i need it?

[11:19] <autrijus> oh, you're already committer.

[11:19] <autrijus> didn't see your name in AUTHORS.

[11:20] <autrijus> try adding yourself to it?

[11:20] <mr_ank> I haven't commited anything yet... and until then i am not adding my name to the list

[11:20] <autrijus> alright... your choice then :)

[11:20] <mr_ank> thanks anyway :)

[11:23] <gaal> spooky! libwww-perl tests... contact the net! :)

[11:24] <autrijus> it's Alive!

[11:24] <svnbot6> r4610, jrieks++ | added german perl 6 introduction talk, held at the austrian perl workshop 2005

[11:24] <gaal> (moved to t/; smoke ETA 15 minutes)

[11:24] <autrijus> sofarsogood?

[11:24] <gaal> yup

[11:25] <gaal> oh, eliminating the spaces tests wil no doubt make things faster :)

[11:26] <autrijus> not that I wanted that :)

[11:26] <gaal> say, how "erratic" is async? if it does work for simple things maybe i can hack cross-platform parallelability onto the smoke process?

[11:27] <autrijus> on fbsd here it's pretty nonerratic

[11:27] <autrijus> I thought smoke is already parallelisable?

[11:27] <gaal> -j is disabled on windows because p5's fork isn't good enough

[11:27] <autrijus> jrieks: how's your smoke running?

[11:28] <autrijus> ah. you can try to do it with p6.

[11:28] <autrijus> it may be better than perl5's.

[11:28] <gaal> yes: hence, async. :)

[11:28] <autrijus> I think it could work :)

[11:29] <autrijus> but then you want corion for details :) (or just try it out)

[11:29] <gaal> yes, Corion's missed! i wonder what he's up to.

[11:29] <gaal> brb

[11:34] <gaal> still lookin' good.

[11:42] <gaal> http://perlcabal.org/~gaal/smoke_xp.html # preflight 1

[11:42] <gaal> 7341 test cases: 7341 ok, 0 failed, 986 todo, 492 skipped and 5 unexpectedly succeeded

[11:42] <autrijus> mm 5 unTODOs!

[11:42] <gaal> hate it when that happens :)

[11:42] <gaal> mm 0 fails! :)

[11:43] <autrijus> love it when that happens :)

[11:44] <gaal> (cut'n'pasted test descriptions)--

[11:45] <autrijus> it failsforme.

[11:45] <gaal> oh. :( i was just about to ci

[11:46] <autrijus> probably don't. :(

[11:46] <gaal> what env?

[11:46] <autrijus> fbsd

[11:46] <autrijus> I think I'll skip for now and investigate after release.

[11:46] <autrijus> worksforyou?

[11:46] <gaal> huh!? it's win32 tests

[11:46] <autrijus> no it's testing File::Spec::Win32

[11:46] <gaal> why are you even running that? :)

[11:46] <gaal> ahhhh

[11:46] <gaal> ok

[11:46] <autrijus> but I bet there's platform specificness.

[11:47] <gaal> yes, well, i'd call it exactly a bug that hasn't been fixed yet then. :-/

[11:47] <svnbot6> r4611, autrijus++ | * skip errartically succeeding tests in 20_win32 until after release.

[11:47] <autrijus> right.

[11:47] <autrijus> otherwise all fine?

[11:47] <gaal> yes!

[11:48] <autrijus> good.

[11:48] * autrijus waits for jrieks to finish smoking

[11:49] <gaal> incidentally, there's something i haven't told you

[11:49] <autrijus> oh?

[11:49] * autrijus braces for impact

[11:49] <gaal> i am not left^H^H^H^Husing ghc 6.4

[11:49] <gaal> 6.5 snapshot

[11:49] <autrijus> that's fine

[11:49] <autrijus> shouldn't matter.

[11:50] <Aankhen``> Left...?

[11:50] <gaal> http://www.google.com/search?hl=en&lr=&q=%22i+am+not+left+handed&btnG=Search

[11:50] <Aankhen``> Ah. :-)

[11:51] <gaal> google golf tip: you can search for "precise expression without closing the quotes

[11:51] <Aankhen``> :-o

[11:52] <gaal> and precise expression*s* as well!

[12:06] <jrieks> autrijus: finished! no failure

[12:06] <jrieks> just this: t/builtins/io/system.t

[12:06] <jrieks> /bin/sh: line 1: program_that_does_not_exist_ignore_errors_please.exe: command not found

[12:06] <gaal> that's okay

[12:06] <jrieks> yep, okay :-)

[12:14] <gaal> is a pf#2 cooking?

[12:18] <autrijus> no, a release is coming :)

[12:19] <gaal> :)

[12:19] * gaal tails PAUSE

[12:19] <autrijus> so have you tried trunk's win32 t?

[12:19] <autrijus> just running that file alone

[12:19] <gaal> sec

[12:19] <autrijus> and make sure it's skipped instead of todo but passes

[12:20] <gaal> oooh, new talk

[12:21] <gaal> yes, it's good.

[12:22] <autrijus> ok. fly!

[12:22] <gaal> woohoo

[12:26] <svnbot6> r4612, autrijus++ | * This be Pugs, version 6.2.7.

[12:31] <Juerd> re!

[12:31] <gaal> Juerd! long time no.

[12:31] <Juerd> Hi

[12:31] <svnbot6> r4613, iblech++ | * docs/talks/perl6-apw2005, lib/pugs/hack.pod, examples/continuation, t/:

[12:31] <svnbot6> r4613, iblech++ |   Usual svn properties.

[12:31] <svnbot6> r4613, iblech++ | * docs/talks/README: Added filenames of the talks.

[12:31] <svnbot6> r4613, iblech++ | * lib/pugs/hack.pod: Reindented so fewer lines wrap on a 80 char display,

[12:31] <svnbot6> r4613, iblech++ |   filled SYNOPSIS section.

[12:32] <Juerd> I've been away this week end

[12:34] <Aankhen``> All tests successful (Win32, MSVC 7).

[12:34] <autrijus> good!

[12:34] * autrijus uploadeth

[12:34] * gaal cheereth

[12:35] <Aankhen``> Yowza.

[12:35] <gaal> PAUSE sendeth email(s) about uriid[A/AU/AUTRIJUS/Perl6-Pugs-6.2.7.tar.gz]

[12:35] <Aankhen``> Sudden flurry of added files?

[12:35] <gaal> a talk, A.

[12:35] <Aankhen``> That I saw. :-)

[12:35] <Aankhen``> Umm... I compiled r4563.  Is that very old?

[12:36] <Aankhen``> Er, wait.

[12:36] * Aankhen`` wonders where he got that number.

[12:36] <gaal> kinda old.

[12:36] <Aankhen``> Hrm, right, I got that from Pugs, nevermind. :-

[12:36] <Aankhen``> P

[12:36] <gaal> we're at 4613

[12:36] <Aankhen``> Apparently so...

[12:36] <autrijus> it's ancient :)

[12:37] <Aankhen``> Heh.

[12:37] <gaal> '63 is this late this morning, i think.

[12:37] <Aankhen``> What can I say?  60 commits since I synced...

[12:37] <Aankhen``> Hrm.

[12:37] <Aankhen``> It took 1 hour 20 minutes to build and test.

[12:37] <Aankhen``> O_O

[12:38] <Aankhen``> And I ran `nmake unoptimized` this time...

[12:38] <gaal> on your cuspy new box, A?

[12:38] <gaal> aaaah, that's why

[12:38] <Aankhen``> Yep.

[12:38] <Aankhen``> Indeed.

[12:38] <gaal> if you make test/smoke, optimize pays off.

[12:38] <gaal> takes about 45 mintes here.

[12:38] <autrijus> ditto here.

[12:38] <gaal> minutes.

[12:38] <Aankhen``> I know, I dunno why I decided to do the unoptimized version this time.

[12:39] <gaal> you were eager for tests to show up?

[12:39] <Aankhen``> Not really.  I just suddenly suffered from the delusion that it would speed up the whole process.

[12:39] <gaal> "make faster"

[12:39] <Aankhen``> Ah well.

[12:39] <Aankhen``> I'll let it run again.

[12:40] <Aankhen``> Hmm.

[12:40] <Aankhen``> Strange.

[12:40] <Aankhen``> I wonder how come I have 4563... I coulda sworn I synced up just before building.

[12:41] <gaal> svn info?

[12:41] * Aankhen`` wonders if it picked up the old pugs.exe in C:\Perl6\bin.

[12:41] <Aankhen``> No point now, I resynced already.

[12:41] * Aankhen`` scrolls up to check.

[12:42] <gaal> i recall there's some amount of lieage in the code that embeds the r number in the executable.

[12:42] <Aankhen``> Ah.

[12:42] <Aankhen``> I was at r4609.

[12:42] <Aankhen``> (that was the last revision before "* Aankhen`` syncs up and tests")

[12:44] <iblech> autrijus: http://linide.sf.net/pugs-svngraph-6.2.7.png and http://linide.sf.net/pugs-livecd-6.2.7.png (will be up in ten minutes or so)

[12:44] <Aankhen``> Doesn't look like there were any changes to Pugs itself between then and now.

[12:45] <gaal> iblech, what's the green line stand for?

[12:45] <Aankhen``> I was just about to ask that. :-

[12:45] <Aankhen``> P

[12:45] <gaal> i think i ask this every time and then every time forget :)

[12:46] <gaal> would be nice to also have number of test cases on that graph, but that isn't trivial to implement...

[12:49] <iblech> The green line is the num of developers, but scaled *50

[12:50] <iblech> Yeah, num of test cases would be neat

[12:50] <autrijus> iblech: thanks! feel free to post followup to p6c :)

[12:50] <autrijus> but it's livecd.iso right

[12:50] <autrijus> not .png :)

[12:50] <iblech> Err, yes :)

[12:51] <gaal> [+] grep { /plan (\d+)/; $1 }, qx<grep -r plan t/>; # modulo bugs

[12:52] <Juerd> s/grep/map/

[12:52] <Juerd> I think

[12:53] <Juerd> Hm, both.

[12:53] <gaal> neither, this shouldn't shell out to gnu grep :)

[12:53] <gaal> = on an iterator that recurses down t from perl

[12:54] <Juerd> [+] map { /plan (\d+)/ ?? $1 :: 0 }, =slurp glob 't/**/*' then? :)

[12:54] <Aankhen``> gaal >> C<^plan > might be better...

[12:54] <Juerd> Assuming a glob that recurses for **

[12:54] <gaal> indeed

[12:54] <Aankhen``> Or:

[12:54] <Aankhen``> C<^\s*plan >

[12:54] <Aankhen``> Oops, didn't Backspace enough.

[12:55] <Aankhen``> ^\s*plan

[12:56] <gaal> autrijus, the title of your release message refers to 6.2.6 :)

[12:56] <autrijus> oh wow.

[12:56] <autrijus> ;)

[12:57] <gaal> oh - also it's %ENV<>, not $ENV :-/

[12:59] <Juerd> $ENV =

[12:59] <Juerd> $ENV = %ENV;

[12:59] <Juerd> Now it is :)

[12:59] <gaal> ?

[13:00] <Aankhen``> Heh.

[13:00] <Juerd> gaal: $ENV<FOO> can work too, as long as $ENV is a hashref ;)

[13:00] <gaal> i don't get it, but that's probably just a sign i should go have lunch

[13:01] <autrijus> gaal: Juerd assigns %ENV into $ENV.

[13:01] <autrijus> gaal: he's basically rogering with your mind :)

[13:01] <gaal> ah. but pugs doesn't make that assunction.

[13:01] <autrijus> you can do it in pugs too

[13:01] <autrijus> it's just you have to write it by hand.

[13:01] <autrijus> like:

[13:01] <autrijus> $*ENV = %*ENV;

[13:01] <Juerd> Taking the world as it is doesn't fit a programmer's mind

[13:02] <gaal> $ENV := sub {%*ENV} is rw;

[13:02] <Juerd> We change the world until it's right :)

[13:02] * gaal eats lunch &

[13:02] <Juerd> See? You do that too

[13:02] <autrijus> o/~ freedom defined is freedom denied o/~

[13:02] <Juerd> Indeed

[13:03] <hcchien> finally pushed

[13:03] <autrijus> hcchien++

[13:04] <Aankhen``> Er... autrijus, small nitpick: it's "coerce:", not ":coerce".

[13:04] <autrijus> Aankhen``: fix it :)

[13:04] <autrijus> (I didn't add that changelog entry, fwiw)

[13:04] * Aankhen`` goes back in time and warns autrijus before the mail is sent!

[13:04] <Aankhen``> OK.

[13:04] * Aankhen`` edits.

[13:05] * Aankhen`` wonders why it mentions HTTP::Message as a new bundled module twice.

[13:05] <svnbot6> r4614, hcchien++ |  r11843@Mahler:  hcchien | 2005-06-13 19:27:12 +0800

[13:05] <svnbot6> r4614, hcchien++ |  add some tests for rx_perl5_(escape|match)

[13:08] <Aankhen``> Was parsing speed increased by 100% or 200%?

[13:09] <knewt> me-- # not checking autrijus' key fingerprint whilst we were both in vienna

[13:15] <Aankhen``> ?eval 1^..10

[13:15] <evalbot6> Error:  unexpected "\\" expecting digit, fraction, exponent, term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[13:15] <svnbot6> r4615, Aankhen++ | * ChangeLog: fixed ":coerce" -> "coerce:", fixed another small typo

[13:15] <svnbot6> r4615, Aankhen++ | * removed "HTTP::Message" from the list of new modules in 6.2.7, since it was already listed under 6.2.6

[13:15] <svnbot6> r4616, scw++ | Update debian control file to v6.2.7

[13:15] <Aankhen``> ?eval ^1..10

[13:15] <evalbot6> Error:  unexpected "^" expecting term 

[13:15] <Aankhen``> How does ^.. work?

[13:16] <mr_ank> ?eval (1..10).perl

[13:16] <evalbot6> '(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)' 

[13:16] <Aankhen``> ?eval 1..10

[13:16] <evalbot6> (1, 2, 3, 4, 5, 6, 7, 8, 9, 10) 

[13:16] <Aankhen``> ?eval 1^..^10

[13:16] <evalbot6> Error:  unexpected "\\" expecting digit, fraction, exponent, term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[13:17] <Aankhen``> ?eval 1 ^..^ 10

[13:17] <evalbot6> Error:  unexpected "\\" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[13:17] <Aankhen``> ?eval infix:<+>(1, 3)

[13:17] <evalbot6> 4 

[13:18] <Aankhen``> ?eval infix:<^..^>(1, 5)

[13:18] <evalbot6> Error: No compatible subroutine found: "&infix:\\^..\\^" 

[13:19] <mr_ank> ?eval (1,2,3).perl

[13:19] <evalbot6> '(1, 2, 3)' 

[13:19] <mr_ank> <1,2,3>.perl

[13:19] <mr_ank> ?eval <1,2,3>.perl

[13:19] <evalbot6> '\'1,2,3\'' 

[13:19] <Aankhen``> ?eval <1, 2, 3>.perl

[13:19] <mr_ank> hm

[13:19] <iblech> Aankhen``: It's the old-evalhelper-doesn't-cope-well-with-^

[13:19] <evalbot6> '(\'1,\', \'2,\', \'3\')' 

[13:19] <mr_ank> is that right?

[13:19] <Aankhen``> iblech >> Ah.

[13:19] <Aankhen``> mr_ank >> <1,2,3>.perl? Yes.

[13:20] <Aankhen``> <1,2,3> turns into a list with a single element: the string '1,2,3'.

[13:20] <Aankhen``> ?eval 1..10.ref

[13:20] <evalbot6> () 

[13:21] <mr_ank> ah damn you are right

[13:21] <mr_ank> silly me

[13:21] <mr_ank> and:

[13:21] <mr_ank> ?eval <1 2 3>.perl

[13:21] <evalbot6> '(\'1\', \'2\', \'3\')' 

[13:22] <mr_ank> hmm

[13:23] <iblech> ?eval Pugs::Safe::safe_print(<1 2 3>.perl)

[13:23] <evalbot6> ('1', '2', '3')bool::true 

[13:23] <jrieks_> ?eval "hello, world!".say

[13:23] <evalbot6> Error: No compatible subroutine found: "&say" 

[13:23] <iblech> ?eval <1 2 3>   # evalbot already .perls the result

[13:23] <evalbot6> ('1', '2', '3') 

[13:23] <Aankhen``> ?eval "foo".perl.perl.perl

[13:23] <evalbot6> '\'\\\'\\\\\\\'foo\\\\\\\'\\\'\'' 

[13:23] <jrieks_> ?eval <1 2 3>xx99

[13:23] <evalbot6> Error:  unexpected "9" or "x" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[13:23] <mr_ank> heh

[13:24] <jrieks_> ?eval <1 2 3>x99

[13:24] <evalbot6> Error:  unexpected "9" or "x" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[13:24] <jrieks_> ?eval (1,2,3)x9

[13:24] <jrieks_> ?eval (1,2,3)xx9

[13:24] <evalbot6> Error:  unexpected "9" or "x" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[13:24] <iblech> jrieks_: Most of IO is disallowed in safemode/evalbot, only Pugs::Safe::safe_print works (which always writes to STDOUT)

[13:24] <Aankhen``> ?eval (1, 2, 3) xx 99

[13:24] <evalbot6> (1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3

[13:24] <jrieks_> ah okay, thx

[13:25] <iblech> And, as you see, the output was truncated -- i.e. "x" xx 100000 will only output 500 or so chars

[13:25] <iblech> ?eval while 1 {} # and there's the CPU time limitation

[13:25] <evalbot6> (no output)

[13:26] <iblech> ?eval my $x = "x" x 100000000; bytes $x # and RAM is limited, too

[13:26] <evalbot6> pugs: out of memory (requested 1048576 bytes) 

[13:26] <jrieks_> nice :-)

[13:26] <autrijus> :)

[13:27] <jrieks_> what about forking?

[13:27] <jrieks_> ?eval while 1 { async {while 1 {}} }

[13:27] <evalbot6> pugs: user error (Cannot create OS thread.)  

[13:27] <Limbic_Region> ahh - another bird brain - welcome jrieks_

[13:27] <jrieks_> ah okay :-)

[13:28] <jrieks_> bird brain? :-p

[13:28] <Limbic_Region> Parrot

[13:28] <jrieks_> ah, yes of course :-)

[13:29] <jrieks_> ?eval for 1... {}

[13:29] <evalbot6> pugs: out of memory (requested 1048576 bytes) 

[13:30] <jrieks_> thats a but, no?

[13:30] <mr_ank> ?eval my Array of Int @ints

[13:30] <evalbot6> Error:  unexpected "o" expecting variable name or "(" 

[13:31] <Aankhen``> ?eval my @ints of Int;

[13:31] <evalbot6> Error:  unexpected "o" expecting "=", ":=", "::=", ";" or end of input 

[13:31] <iblech> You mean it should die because of CPU time limitation instead of mem? Yep, we don't have lazy lists currently

[13:31] <jrieks_> yes, okay

[13:31] <jrieks_> ?eval sub infix:?>?? ($a, $b) { $a > $b ?? $a :: $b }

[13:31] <evalbot6> Error:  unexpected "i" expecting subroutine parameters or block 

[13:32] <jrieks_> ?eval sub infix:<<>?>> ($a, $b) { $a > $b ?? $a :: $b }

[13:32] <evalbot6> Error:  unexpected "?" expecting bare trait, subroutine parameters, trait or block 

[13:32] <jrieks_> ?eval sub infix:<< >? >> ($a, $b) { $a > $b ?? $a :: $b }

[13:32] <evalbot6> Error:  unexpected "?" expecting bare trait, subroutine parameters, trait or block 

[13:32] <jrieks_> is it possible to define an operator containing < or > without using unicode?

[13:33] *** jrieks_ is now known as jrieks

[13:33] <iblech> It should work

[13:33] <iblech> ?eval sub infix:Â«>?Â» ($a, $b) { $a > $b ?? $a :: $b }

[13:33] <evalbot6> Error:  unexpected "i" expecting subroutine parameters or block 

[13:33] <Aankhen``> ?eval sub infix:'>?' { ($a, $b) ? }

[13:33] <evalbot6> Error:  unexpected "i" expecting subroutine parameters or block 

[13:33] <Aankhen``> Oops.

[13:33] <Aankhen``> ?eval sub infix:'>?' ($a, $b) { $a > $b ?? $a :: $b }

[13:33] <evalbot6> Error:  unexpected "i" expecting subroutine parameters or block 

[13:35] <jrieks> ?eval sub infix:<<<?>>($a,$b){$a > $b ?? $a :: $b}

[13:35] <evalbot6> undef 

[13:35] <jrieks> ?eval sub infix:<<>?>>($a,$b){$a > $b ?? $a :: $b}

[13:35] <evalbot6> Error:  unexpected "?" expecting bare trait, subroutine parameters, trait or block 

[13:38] <kungfuftr> someone send me a kotatsu!

[13:38] <jrieks> ?eval sub infix:<<more?>>($a,$b){$a > $b ?? $a :: $b} sub postfix:<!> ($x) { [*] 1..$x more? 1 } sub e {my $ret = 0;for 0..1000 -> $i { my $old = $ret; $ret += 1 / $i!; return $ret if $ret-$old < 1e-50 } } "e={e()}";

[13:38] <evalbot6> 'e=2.7182818284590452353602874713526624977572' 

[13:38] <lumi_> kungfuftr: You're getting cold feet?

[13:39] <jrieks> ?eval "test"

[13:39] <evalbot6> 'test' 

[13:39] <jrieks> ?eval "/quit test :-)"

[13:39] <evalbot6> '/quit test :-)' 

[13:39] <jrieks> ?eval "\n/quit test :-)"

[13:39] <evalbot6> ' /quit test :-)' 

[13:40] <mr_ank> hmm

[13:40] * jrieks thinks that the bot is safe enough ;-)

[13:40] <iblech> Won't work, as you'd have to send a "QUIT msg" to quit the IRC connection, but evalbot always prepends "PRIVMSG #perl6 :", so the reply reaches us

[13:40] <mr_ank> i've just tried evaluating this: (1).kv and pugs never returned

[13:41] <jrieks> ?eval (1).kv

[13:41] <evalbot6> pugs: out of memory (requested 1048576 bytes) 

[13:41] <mr_ank> bug?

[13:41] <mr_ank> ?eval (1,2).kv

[13:41] <evalbot6> (0, 1, 1, 2) 

[13:42] <mr_ank> ?eval ().kv

[13:42] <evalbot6> () 

[13:42] <Limbic_Region> interesting

[13:42] <Limbic_Region> ?eval (1,2,3).kv

[13:42] <evalbot6> (0, 1, 1, 2, 2, 3) 

[13:42] <mr_ank> i'm just bored and playing around a bit with odd constructs :)

[13:42] <Limbic_Region> the out of memory one is likely a bug

[13:42] <mr_ank> ?eval ('a').kv

[13:42] <jrieks> ?eval (1..9999).kv

[13:42] <evalbot6> pugs: out of memory (requested 1048576 bytes) 

[13:42] <evalbot6> (0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55, 56, 56, 57, 57, 58, 58, 59, 59, 

[13:43] <Limbic_Region> ?eval (42).kv

[13:43] <evalbot6> pugs: out of memory (requested 1048576 bytes) 

[13:43] <jrieks> ?eval ('perl', 6).kv

[13:43] <evalbot6> (0, 'perl', 1, 6) 

[13:43] <mr_ank> looks like something of an off-by-one error

[13:43] <jrieks> ?eval {'perl'=> 6}.kv

[13:43] <evalbot6> ('perl', 6) 

[13:43] <jrieks> ?eval (0..9).kv

[13:43] <evalbot6> (0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9) 

[13:44] <mr_ank> hm

[13:44] <mr_ank> ?eval (0..1).kv

[13:44] <evalbot6> (0, 0, 1, 1) 

[13:44] <mr_ank> ?eval (0..2).kv

[13:44] <evalbot6> (0, 0, 1, 1, 2, 2) 

[13:44] <jrieks> ?eval (-1..1).kv

[13:44] <evalbot6> (0, -1, 1, 0, 2, 1) 

[13:44] <mr_ank> wtf

[13:44] <jrieks> ?eval (-2..2).kv

[13:44] <evalbot6> (0, -2, 1, -1, 2, 0, 3, 1, 4, 2) 

[13:44] <jrieks> (index, value) pairs

[13:45] <Limbic_Region> ?eval -2..2

[13:45] <evalbot6> (-2, -1, 0, 1, 2) 

[13:45] <mr_ank> yeah, but it's inconsistent

[13:45] <jrieks> why?

[13:45] <jrieks> ?eval 2..-2

[13:45] <evalbot6> () 

[13:45] <mr_ank> look at this:

[13:45] <jrieks> ?eval 2..-2 :by(-1)

[13:45] <evalbot6> Error:  unexpected ":" expecting operator, "does", "but", "is", "^..^", "cmp", "<=>", "^..", "..^", "..", postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[13:45] <mr_ank> ?eval (-1..1).kv

[13:45] <evalbot6> (0, -1, 1, 0, 2, 1) 

[13:45] <svnbot6> r4617, Aankhen++ | * ChangeLog: typo fixes, reworded here and there.

[13:46] <mr_ank> ?eval (0..2).kv

[13:46] <evalbot6> (0, 0, 1, 1, 2, 2) 

[13:46] <mr_ank> how come?

[13:46] <jrieks> where is the problem?

[13:46] <jrieks> (0, -1), (1, 0), (2, 1)

[13:46] <jrieks> first is the key (array index), the second is the value

[13:46] <jrieks> key/value

[13:46] <mr_ank> ah

[13:46] <mr_ank> AH

[13:46] <mr_ank> i got it now

[13:47] <mr_ank> was blinded by seeing (a a b b c c)

[13:47] <jrieks> ?eval ("a"..'c')xx2

[13:47] <evalbot6> Error:  unexpected "2" or "x" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[13:47] <jrieks> ?eval ("a"..'c') xx 2

[13:47] <evalbot6> ('a', 'b', 'c', 'a', 'b', 'c') 

[13:48] <mr_ank> so (1).kv should return (0,1) - should we write test cases for these things that hang the compiler?

[13:48] <jrieks> just do it

[13:48] <jrieks> I've not time atm

[13:49] <mr_ank> okay

[13:49] <jrieks> cya!

[13:49] <mr_ank> byTe

[13:50] <gaal> oh, Aankhen``, mea culpa regarding ChangeLog spellos.

[13:55] <kungfuftr> lumi_: yar

[13:57] *** cognominal_ is now known as cognominal

[14:18] <mr_ank> i'll ask again just in case:

[14:19] <mr_ank> Should I write test cases for things that hang pugs? (like (1).kv )

[14:20] <mr_ank> (i just wrote one and put it in t/data_types - just not sure whether to commit it or not)

[14:21] <PerlJam> mr_ank: Can you wrap that in an eval or something with a timeout so that it doesn't hang indefinitely?

[14:21] <mr_ank> PerlJam: sure

[14:22] <mr_ank> I'll give it a shot

[14:22] <PerlJam> If so, then I think you should definitely write tests for things like that.

[14:22] <mr_ank> is there a way to easily wrap it in a timeout?

[14:23] <mr_ank> cause pugs just "goes on a trip" when it tries to evaluate (1).kv

[14:27] <mr_ank> or perhaps I should just put it in t_disabled/? or is that for something else?

[14:29] <geoffb> mr_ank, t_disabled appears to be for things that aren't (yet) relevant, not merely things that are broken.

[14:29] <geoffb> Non-standard Perl dialects, for instance

[14:29] <mr_ank> ah

[14:30] <mr_ank> I have no idea how to implement a pugs-level timeout

[14:30] <geoffb> try t/pugsbugs/, I would think

[14:31] <geoffb> Haven't looked myself, but perhaps mentioned in the networking examples?

[14:31] <mr_ank> i was just looking at that

[14:32] <iblech> I'd write "fail "(1).kv hangs forever"; #is ~(1).kv, "0 1", "(1).kv works";" or something like that

[14:33] <iblech> As far as I know, there's currently no way to implememt timeouts

[14:33] <mr_ank> right. They seem to be doing it with loops and counters

[14:33] <mr_ank> if(time() - $last_traffic >= $live_timeout) { # and things like that

[14:34] <mr_ank> iblech: okay

[14:34] <mr_ank> in t/pugsbugs then

[14:35] <geoffb> what does 'UU' before a filename (as opposed to just 'U') mean in 'svk pull' output?

[14:35] <iblech> Yep. But this code still has a problem: The readline() of the socket to the server is blocking, that means, that Net::IRC looses control once it readline()s. (BTW, this is the reason why sometimes svnbot has a fairly long delay.)

[14:35] <clkao> content and property changed

[14:35] <autrijus> both content and metadata.

[14:35] <geoffb> gotcha, thx

[14:35] <gaal> it's short for "uberupdate".

[14:40] * gaal reads perlintro for inspiration and surrenly realizes that the description "line noise" is getting clear to fewer and fewer newcomers.

[14:43] * PerlJam really likes slide #6 of apw

[14:46] <geoffb> iblech++ # help with hack.pod

[14:46] <svnbot6> r4618, geoffb++ | New examples/continuation directory added to source map

[14:46] <svnbot6> r4619, mr_ank++ | Added failing test for (1).kv and ('a').kv (will hang Pugs, so it's commented)

[14:46] <geoffb> There are a number of XXXX's in hack.pod, any help to excise those would be appreciated

[14:47] <wolverian> agh, I have to cron this. I'm two hundred revisions behind again.

[14:49] <geoffb> wolverian, make it part of your morning routine, it will instill good practices for a lifetime of work.  :-)

[14:49] <wolverian> :)

[14:50] <svnbot6> r4620, iblech++ | * Removed empty docs/advocacy/, and updated pugs::hack accordingly.

[14:50] <svnbot6> r4620, iblech++ | * Usual svn props added to t/rules/rx_perl5_escape.t and

[14:50] <svnbot6> r4620, iblech++ |   t/pugsbugs/one_elem_list_kv.t.

[14:52] <gaal> okay, i think i know how to fix the "is trait + returns" bug, but it looks hacky to me

[14:54] <gaal> basically after the SubParameters there can be many Traits and possibly one BareTrait "returns"

[14:54] <gaal> but they can be interleaved

[14:54] <gaal> so that means two more lines: a typ''' and a traits'

[14:55] <gaal> isn't there a more elegant way to express this?

[14:56] <mr_ank> iblech: properties i should be setting on new files are svn:mime-type and svn:eol-style right?

[14:56] <svnbot6> r4621, mr_ank++ | Fixed silly typo in test

[14:56] <gaal> also, shouldn't multiple "returns" be an error? eg sub foo returns X (params) returns Y

[14:56] <gaal> currently taken to mean returns Y (X silently dropped)

[14:56] <iblech> mr_ank: Yep, see docs/other/development_tests

[14:57] <iblech> mr_ank: But it's no problem if you forget to do so

[14:57] <mr_ank> okay :)

[14:58] <geoffb> Why are the docs in lib/ not in docs/ instead?

[14:59] <iblech> I think two reason are that perldoc pugs::run works and that the docs are nicely formatted on search.cpan.org

[14:59] <geoffb> ah!

[15:00] <geoffb> Though that just makes me think perldoc and search.cpan.org need to have their horizons widened

[15:01] <iblech> Yep, search.cpan.org should index blib6/ and docs/, too

[15:01] <gaal> blib6/ ? does that exist in the source distro?

[15:02] <geoffb> gaal, nope

[15:03] <fireartist> anyone know what 'mode change "+e" for user fireartist by services' does / why it's been done?

[15:04] <fireartist> (that's an irc message btw)

[15:04] <integral> +e is the flag you get when you identify to nickserv

[15:05] <fireartist> integral: I'd just never noticed it before, if it's normal though, I'll not worry!

[15:06] * geoffb is beginning to get an 'svk pull' twitch -- whenever he's spacing out, his fingers enter 'svk pull' into an xterm apparently by themselves

[15:09] <geoffb> clkao, is the plan that eventually svk will be able to interact with all open-source source control systems?

[15:10] <clkao> if people want to, yes. but i don't have much incentive for that

[15:11] <geoffb> What's working so far -- svn, cvs, and darcs?

[15:11] <clkao> s/darcs/perforce

[15:11] <geoffb> ah

[15:12] <kungfuftr> clkao: nihonji?

[15:13] <geoffb> clkao, so were the current choices "commonly used systems that insist on having live access to a server"?

[15:15] <clkao> ya. but i might have git support rsn

[15:16] <geoffb> mmm, git

[15:16] <geoffb> via cogito (or whatever that morphed into, haven't kept up), or directly?

[15:16] <clkao> directly.

[15:16] <clkao> cogito is a stinky pile of bash script

[15:17] <geoffb> ah!

[15:17] <geoffb> Well, I only ever read the summaries, so I missed the details

[15:17] <clkao> i missed too, so i didn't know that until yestetrrday i actually try to use it

[15:18] * geoffb wishes the kernel-traffic summaries had just a tad more focus on technical details, rather than just arguments on various topics

[15:21] <Boogie_> somebody knows, if it's normal, that Pugs cannot 'return($sth)', where $sth is an SQL statement handler from DBI--perl5? Or, to be more precise, it can give it back, but say $sth.rows, or $sth.finish() will give a segmentation fault, while it works fine in the subroutine

[15:22] <autrijus> hrm, it's not normal at all

[15:22] <autrijus> write... tests! :)

[15:24] * autrijus goes back writing AST for PIR

[15:24] <Boogie_> yes, but it's hard to write a test for it, when there's no MySQL around (e.g. on your machine). Anyway, you're right.

[15:24] <autrijus> try using other XS objs.

[15:24] <autrijus> internal ones.

[15:24] <Boogie_> it's over my knowledge, but I'll try it.

[15:25] <autrijus> like (I don't know) Digest::MD5 object.

[15:25] <Boogie_> ok.

[15:25] <autrijus> or IO::Handle, or something. improvise :)

[15:25] <Boogie_> thx

[15:25] <geoffb> Improvise?!?  We'd never do that, autrijus!  This is strictly a waterfall development model here.

[15:26] <geoffb> I mean, REALLY.

[15:26] <geoffb> The NERVE of such a suggestion . . . .

[15:26] <mr_ank> so... autrijus has the biggest bucket?

[15:26] <geoffb> Man, I am clearly PUNCHY

[15:26] <geoffb> mr_ank, LOL

[15:26] <autrijus> lol

[15:26] <autrijus> yeah sure.

[15:27] * autrijus DECREES that geoffb MUST IMPROVISE!

[15:27] <autrijus> there. better?

[15:27] <mr_ank> and that's why i'm holding a tea cup!

[15:27] <geoffb> ROFL

[15:27] <geoffb> MUCH

[15:27] <autrijus> you're like a forth machine!

[15:27] <autrijus> (only accepting command words in ALL CAPS)

[15:28] * geoffb is still laughing

[15:28] <mr_ank> really?

[15:28] <mr_ank> you need sleep geoffb!

[15:28] <geoffb> yes, up too late and too early.  Damn warm nights

[15:29] <mr_ank> i haven't slept yet ... need to finish a C++ XS API *WITH THREADS*

[15:29] <geoffb> ewww

[15:29] <mr_ank> (the thread bit im not touching for now)

[15:30] * geoffb always dreads "Oh, you know XS?  Here, I need some help with this . . . ."

[15:30] <geoffb> good thinking, mr_ank 

[15:30] <mr_ank> it's sorta like a DBI driver

[15:31] <mr_ank> but a lot simpler ... and i cheated -- instead of returning a handle, i just wait till the operation is done - threading is nicely encapsulated... im not going there!!!

[15:31] <geoffb> heh, well, that's one way to do it

[15:31] <autrijus> "our interface encapsulates 16,384 objects"

[15:31] <autrijus> "it's easy to do that because they aren't there"

[15:32] <mr_ank> something like that... i hate these weird C/C++ mixes SO MUCH

[15:32] <autrijus> bbiab... need !irc to hack :)

[15:32] <geoffb> nod

[15:34] * geoffb away too . . . about time I woke up the family by changing the cat litter, bleah

[15:50] <svnbot6> r4622, andras++ | XS object will be bad after returning it - test

[15:51] <Boogie_> somebody can check my "t/unspecced/p5/return.t" if it's really a test (I mean, the file runs fine)?

[15:54] <pasteling> "Aankhen``" at 203.101.4.113 pasted "t/unspecced/p5/return.t" (6 lines, 251B) at http://sial.org/pbot/11013

[15:54] <autrijus> checking

[15:54] <autrijus> Aankhen``: not built with embedperl5?

[15:54] <autrijus> Boogie_: you need to check p5 embeddedness just like other p5/* tests.

[15:55] <autrijus> see eg. basic.t for example of how to use skip_rest.

[15:55] <Aankhen``> autrijus >> Affirmative.

[15:57] <iblech> Boogie_: Fixed (note that I had to put the check and plan() in a BEGIN block, so Pugs doesn't die because it couldn't load the Perl 5 module (on non Perl 5-embedded builds))

[15:57] <svnbot6> r4623, iblech++ | * t/subroutines/sub_ref.t -- Tests that macros are Codes, Routines, and Macros.

[15:57] <svnbot6> r4623, iblech++ | * Pugs.Parser -- Parse anonymous macros.

[15:57] <svnbot6> r4624, iblech++ | t/unspecced/p5/return.t -- Usual svn props and test that Perl 5 is embedded.

[15:58] <Enveigler1> Are  there any papers/discussion around showing STM being used on boxes with 1 or 2 cpus rather than massively parallel setups?

[15:58] <Boogie_> iblech: you was faster than me... :) I've tried to commit it and saw that somebody did it before. :)

[15:58] <Boogie_> autrijus: ok

[15:59] <Boogie_> s/was/were/

[15:59] <autrijus> Enveigler1: the SMP capability is currently in GHC trunk

[15:59] <autrijus> Enveigler1: so I don't think benchmarks will make sense until say 6.4.1's release

[16:00] <autrijus> Enveigler1: but in other VMs there may already be SMP support

[16:01] <Enveigler1> I was looking for more general discussion on STM rather GHC specific. Everything I've found so far show use with 20, 40, 60 + cpu's, which is noce in that world, but I'm wondering how it performs in a more everyday context?

[16:07] <autrijus> nod. I havn't seen literature about that either.

[16:07] <autrijus> maybe google scholar a bit more can dig up stuff

[16:07] <ninereasons> ?eval @ARGS[0] ~~ /(nothing)/; +@ARGS

[16:07] <evalbot6> Error: Can't modify constant item: VUndef 

[16:08] <iblech> ?eval @ARGS   # @ARGS isn't available in safemode

[16:08] <evalbot6> \undef 

[16:08] <iblech> ?eval @ARGS[0]   # @ARGS isn't available in safemode

[16:08] <evalbot6> Error: Can't modify constant item: VUndef 

[16:08] <ninereasons> thanks, iblech.

[16:09] <Enveigler1> Autrijus: Okay. I'll keep digging. Thanks.

[16:09] <ninereasons> ?eval my @a; @a[0] ~~ /(nothing)/; +@a

[16:10] <evalbot6> pugs: src/events.c:265: init_events_first: Assertion `rc == 0' failed. 

[16:10] <wolverian> hmm, I want a Str.words iterator that gives lvalues to the original string so that I can do "foo bar".words.=map:{ .ucfirst }; without doing a .split or so that loses whitespace

[16:11] <ninereasons> ?eval  my @a=(); @a[0] ~~ /(nothing)/; +@a

[16:11] <evalbot6> pugs: src/events.c:265: init_events_first: Assertion `rc == 0' failed. 

[16:12] <ninereasons> hmm.

[16:12] <ingy> hola

[16:12] <iblech> wolverian: Yeah! That'd be nice!

[16:12] <Chewie[]> 'foo bar'.words >>.ucfirst would work, and it's shorter.

[16:12] <wolverian> yay, someone else likes it too :) iblech++

[16:12] <iblech> ninereasons: It seems Parrot doesn't work well when limited to 20MiB RAM or so

[16:12] <Chewie[]> Yeah. It's a nice idea.

[16:12] <wolverian> Chewie[]: yes.

[16:13] <wolverian> I'm not sure if it's been discussed on p6l or something, as I don't think I'd just come up with that by myself

[16:13] <Chewie[]> Perhaps also .tokens to split on given rules.

[16:13] <ninereasons> iblech, I didn't realize that evalbot was targetting parrot already.

[16:13] <Chewie[]> (If that would even be necessary with the PGE.)

[16:13] <iblech> ninereasons: No, but it uses Parrot for Perl 6-rules

[16:13] <ninereasons> oh.

[16:13] <iblech> ?eval my @a = (); @a[0] ~~ rx:Perl5/(nothing)/; +@a

[16:13] <evalbot6> 1 

[16:13] <ninereasons> there you go.

[16:14] <iblech> ?eval my @a = (); +@a

[16:14] <ninereasons> that's what I wanted to show.

[16:14] <evalbot6> 0 

[16:14] <iblech> Right. Write a test? :)

[16:14] <wolverian> ?eval my @a = (); @a[0] ~~ rx:Perl5/(nothing)/; @a.perl

[16:14] <ninereasons> ok :)

[16:14] <evalbot6> '[undef]' 

[16:14] <wolverian> ah.

[16:30] <chip> [email@hidden.address]
[16:32] <autrijus> Data::Dumper::Dumper(\@a)

[16:32] <autrijus> "canonical string representation", man :)

[16:32] <Limbic_Region> Data::Dump::Streamer is head and shoulders better than Data::Dumper when it comes to closures and code refs

[16:33] <autrijus> very true.

[16:33] <autrijus> DDS is the way of the future

[16:33] <gaal> i thought .perl was? :)

[16:33] <gaal> or .yaml

[16:33] <autrijus> .perl is the way of the far future

[16:33] <autrijus> ;)

[16:34] <gaal> .pugs is the way of the mear to medium range future.

[16:34] <Limbic_Region> oh - it handles weak references too

[16:34] <autrijus> .pugs is for fun :)

[16:34] * autrijus launches the fun optimiser

[16:35] <autrijus> "fun-ction-al programming"

[16:35] <autrijus> 'fun' as in exciting

[16:35] <autrijus> 'ction' as in ka-ching, big money

[16:35] <autrijus> 'al' as in 'all cool peopl are doing it'

[16:35] <iblech> FWIW, I remember a discussion on p6l about renaming .perl to .pretty(:lang<Perl>), and then extending .pretty to :lang<YAML>, :lang<Perl5>, etc. Not sure what the final ruling was, though

[16:35] <autrijus> (I stole that from some perl monger's presentation)

[16:35] <autrijus> iblech: yeah. I think it's sane

[16:36] <autrijus> iblech: I further think it may be saner to have Language::* API.

[16:36] <autrijus> that unifies .pretty, .eval, .compile etc

[16:37] <iblech> ala Language::Perl6.new(source => "...").compile?

[16:37] <gaal> which reminds me!

[16:38] <gaal> we need to move eval over to the prelude

[16:38] <Limbic_Region> autrijus - did you see the weird .kv error

[16:38] <Limbic_Region> ?eval (42).kv

[16:38] <evalbot6> pugs: out of memory (requested 1048576 bytes) 

[16:38] <autrijus> iblech: SomeThingLikeThat yes. although I'm not sure about the .new. 

[16:38] <autrijus> Limbic_Region: yes, and I know why too

[16:38] <autrijus> the Prim "kv" is infinite looping because it can't find a ref

[16:38] <autrijus> I think "pairs" too

[16:38] <autrijus> iblech: would you be so kind to investigate a fix? :)

[16:40] <iblech> autrijus: I tried one earlier today, but then stopped, as I thought: (42).kv should mean 42.kv, which should give a "wasn't able to find &Int::kv method"

[16:41] <gaal> should it not give (1, 42)?

[16:41] <gaal> ?eval my @a=<42>; @.kv

[16:41] <evalbot6> Error: Undeclared variable: "$?SELF" 

[16:42] <gaal> ahem.

[16:42] <gaal> ?eval my @a=<42>; @a.kv

[16:42] <evalbot6> (0, '42') 

[16:42] <gaal> yeah, i meant 0, 42. :)

[16:42] <iblech> gaal: Yep. So we've to rename Prim.hs eval to Pugs::Internals::eval_perl6, then make Prelude::eval safe, so evalbot can eval Perl 6 code, and then fix all tests using eval_perl5 etc., right?

[16:43] <iblech> gaal: Yep, an array should understand .kv -- i.e. [42].kv should work, as well as (my @a = (42)).kv, but $some_num.kv should not, I think

[16:44] <autrijus> iblech: you know...

[16:44] <autrijus> iblech: that was because in Prim it's decl'ed as "kv"

[16:44] <gaal> iblech, re eval - yes, exactly; though there's a lot to s/// in this move.

[16:44] <autrijus> if you change all those "kv" into Array::kv etc

[16:44] <gaal> heh heh heh

[16:44] <autrijus> (look at Scalar::split)

[16:44] <autrijus> then it will Just Work (tm)

[16:45] <iblech> autrijus: ah! /me tries

[16:45] <gaal> but then kv won't work for lists, right?

[16:45] <gaal> ?eval (1,2,3).kv

[16:45] <evalbot6> (0, 1, 1, 2, 2, 3) 

[16:45] <gaal> the above is what i expect

[16:46] <autrijus> actually, no,

[16:46] <gaal> iblech: however, eval lang=>something not perl6 should be unsafe

[16:46] <autrijus> if you declare "kv" as "List::kv"

[16:47] <autrijus> and then add one line to Pugs.Eval.Var line 315

[16:47] <autrijus> that declares all (Syn ",") is of type "List" in invocant position

[16:47] <autrijus> evalExpType (Syn "," _) = return $ mkType "List"

[16:47] <iblech> gaal: Yep. Should I add a $?SAFEMODE so Prelude::eval can test if safemode is on?

[16:47] <autrijus> then it will Still Just Work

[16:47] * autrijus praises tagged unions, pattern matching, and sanity in general

[16:48] <gaal> hmmmm, actually no i was being silly, just leave the Pugs::Internals::eval_$not_perl6 unsafe

[16:48] <iblech> gaal: Ah, yes, of course.

[16:49] <gaal> s/silly/not-thinking-it-through-ful/

[16:50] <gaal> anyway: how do we apply this big s///? need also to change Test.pm and everything in ext/

[16:50] <ninereasons> iblech, what is the formula again, for applying the "usual properties" to a new addition?

[16:50] <iblech> ninereasons: cat docs/other/development_tips

[16:50] <ninereasons> thanks

[16:51] <autrijus> gaal: time to think of a refactoring browser? :)

[16:51] <gaal> :-)

[16:51] <autrijus> (apply parser to source, get token ranges, change those ranges)

[16:51] <autrijus> you wouldn't need a full prettyprint even

[16:51] <gaal> right-click Refactor > Rename...

[16:51] <autrijus> right.

[16:51] <autrijus> should be a simple matter of walking Exp and change the original String.

[16:51] <autrijus> by analysing Pos chunks

[16:52] <autrijus> and emit a set of "Edit" calls 

[16:53] <Limbic_Region> autrijus - I am not sure I saw your reply, if there was one, so I will ask again

[16:54] <Limbic_Region> it is obvious that there are a lot of significant changes to Parrot as a result of the hackathon

[16:54] <Limbic_Region> what is coming down the pipe for Pugs?

[16:55] <autrijus> Limbic_Region: PugsAST is the single larges change

[16:55] <svnbot6> r4625, iblech++ | * Pugs.Prim, Pugs.Eval.Var -- Made (42).kv die and (42,).kv work, autrijus++.

[16:55] <svnbot6> r4625, iblech++ | * t/pugsbugs/one_elem_list_kv.t -- unTODO/unCOMMENT, fix, and added a new test.

[16:55] <svnbot6> r4626, iblech++ | Moved t/pugsbugs/one_elem_list_kv.t to t/builtins/lists/one_elem_list_kv.t, as

[16:55] <svnbot6> r4626, iblech++ | the bug is resolved.

[16:55] <autrijus> Limbic_Region: instead of evaluating the parse tree directly

[16:56] <autrijus> Limbic_Region: Eval.hs will deal with a much smaller set of nodes

[16:56] <gaal> soooo.... i'll do the eval change now

[16:56] <autrijus> Limbic_Region: basically all the reduceSyn things will be moved to a separate compile pass.

[16:56] <autrijus> as well as other things like constant folding etc.

[16:56] <gaal> unless iblech you started already? never knowing with the speed demon :)

[16:56] <autrijus> that will result in a much faster interpreter-level performance.

[16:56] <iblech> gaal: No, go ahead :)

[16:56] <autrijus> and will also open the door of other language targetting that PugsAST.

[16:57] <autrijus> (it's docced in my paper)

[16:57] <autrijus> currently it's parse -> run

[16:57] <autrijus> it will become parse -> compile -> (emit|run)

[16:58] <autrijus> so we won't need to deal with all the Syn constructs in Compile.Parrot and Compile.Haskell anymore

[16:58] <autrijus> because they'll be normalised and gone

[16:59] <autrijus> also if I did pull it off and GADTise PugsAST and PIR_AST, then it will also make detection of bogus programs easier and optimisation safer to write.

[16:59] <autrijus> s/did/do/

[16:59] <autrijus> oh, and maybe, just maybe, PugsAST can retarget C-- or LLVM or something else entirely.

[17:00] <autrijus> so we retain Perl6's retargettability

[17:00] <autrijus> which I always think as a good thing.

[17:00] <autrijus> (eof)

[17:01] <autrijus> this is in scope comparable to the GADT-ITypes grand rewrite

[17:01] <svnbot6> r4627, ninereasons++ | smartmatch_autovivifies.t: a pugsbug.  When a non-existent array element, $n, is tested for a match, the array is auto-dimensioned to $n+1 size. The autovivified elements are undef.

[17:01] <autrijus> which took me two full days :)

[17:01] <autrijus> so I need to, like, concentrate.

[17:01] <Forth> where should I look into if I want to generate java bytecode?

[17:02] <Limbic_Region> autrijus - sounds like good stuff

[17:02] <autrijus> Forth: first, get a good Haskell library that can emit java bytecode from some low level AST

[17:02] <autrijus> Forth: then hook it up with the PugsAST I'll be producing this week

[17:02] <autrijus> Forth: you can look at Pugs.Compile.Parrot for some ideas right now, but it's very primitive at this moment

[17:03] <autrijus> (and yes, Java and Mono retargettability are worth goal too)

[17:03] <autrijus> what I'll do is make the PugsAST abstract and narrow enough

[17:03] <autrijus> but the emitters for Java/Mono/LLVM/etc is probably left to other interested lambdacamels

[17:04] <autrijus> I'll first try targetting Parrot because I can lobby the authors more efficiently :)

[17:08] <autrijus> hey. if I rename the current src/IMC* to src/PIR*

[17:08] <autrijus> will people be mad because the P<Tab> completion will break?

[17:08] * autrijus is thinking of a nonconflicting name

[17:10] * autrijus settles for Emit.PIR

[17:19] <gaal> if i have sub foo(?$x = $CALLER::_), and call it foo(undef), will $x be undef or the caller's $_ ?

[17:19] <svnbot6> r4628, cognominal++ |  r7@cac94-1-82-67-232-89:  stef | 2005-06-13 19:18:08 +0200

[17:19] <svnbot6> r4628, cognominal++ |  added a nice Haskell book

[17:20] <iblech> gaal: I think $x should be undef, as you're explicitely passing an argument to &foo

[17:20] <gaal> i hope you're right!

[17:21] <autrijus> I assure you're right.

[17:21] <gaal> :)

[17:22] <gaal> okay, eval(.... :lang<Haskell> or <haskell>? or make it incasitive?

[17:23] <autrijus> I like that word

[17:23] * chip ponders CaseInsensitiveHash

[17:23] <autrijus> make it incasitive, I think.

[17:23] <gaal> avva coined it

[17:27] <obra> hello

[17:31] <Darren_Duncan> right now I revisit Locale-KeyedText in an effort to get the whole thing executing

[17:31] <Darren_Duncan> and so I may report a few things that Pugs needs to make them work

[17:31] <Darren_Duncan> fyi

[17:32] <svnbot6> r4629, gaal++ | * eval and related builtins are now implemented in the Prelude

[17:33] <autrijus> Darren_Duncan: cool!

[17:34] <Darren_Duncan> now hopefully things won't be breaking all over the place with this on-Parrot push

[17:34] <autrijus> Darren_Duncan: we have 8k regressions :)

[17:34] <autrijus> I won't break things all over the place unless they are somehow not testing things as they should

[17:34] <Darren_Duncan> question ...

[17:35] <Darren_Duncan> do you plan to keep Pugs with its standalone option for a long time, or will it be phased out in a few months when Parrot support is working well?

[17:35] <Darren_Duncan> so that Pugs only works with Parrot and not alone

[17:35] <autrijus> Darren_Duncan: to answer that question: no, interpreter core will Always Be There.

[17:36] <Darren_Duncan> okay

[17:36] <autrijus> otherwise we will be making the P6C mistake.

[17:36] <autrijus> "With this design, each term's reduction rules are hard-coded in PIR assembly,

[17:36] <autrijus> making it prohibitively difficult to reason about the execution.  Because P6C

[17:36] <autrijus> cannot check the resulting assembly code for correctness, subtle bugs often

[17:36] <autrijus> go unnoticed for a long time.

[17:36] <autrijus> "

[17:37] <Darren_Duncan> but when Pugs is recoded in Perl 6, that won't be the case, right?

[17:37] *** autrijus changes topic to: 6.2.7 released! | http://pugscode.org/ <Overview Journal Logs> | http://pugs.kwiki.org | paste: http://sial.org/pbot/perl6

[17:37] <autrijus> Darren_Duncan: yeah but you're talking about 6.283185...

[17:38] <autrijus> and we're just at 6.2.7 :)

[17:38] <autrijus> they're five milestones apart.

[17:38] <gaal> the question that hasn't come up yet is whether by that time, pugs will also be able to compile haskell.

[17:39] <autrijus> not neccessary pugs.

[17:39] <autrijus> but yeah, whether we can as well compile pugs itself to run on parrot, or on perl6, or something else entirely, etc.

[17:39] <gaal> yes, it'll be called Star

[17:39] <gaal> the any-to-any compiler

[17:40] <autrijus> heh :)

[17:40] <chip> that's the great thing about bits

[17:40] <chip> no matter how you recycle them, they're still just ones and zeros

[17:40] <autrijus> but anyway. I see the current priority is getting the features in

[17:40] <autrijus> and get the operational (and some denotational) semantics defined

[17:40] <autrijus> with a well defined semantics we can freely retarget

[17:40] <autrijus> with a reasonable hope of keeping portability

[17:41] <autrijus> without a well defined semantics it's just a random bunch of OP codes that you have to special case to, and that changes from version to version, just like the perl5 mess.

[17:41] <autrijus> i.e. you can't look at a piece of program and reason about what it will do, without knowing the exact brokenitude of the perl5 interpreter that is to run it.

[17:42] <Limbic_Region> chip - http://perlmonks.org/index.pl?node_id=463675 http://perlmonks.org/index.pl?node_id=441152

[17:42] <Limbic_Region> there are several other links I meant to show you, but you weren't around

[17:43] <Limbic_Region> oh, and http://perlmonks.org/index.pl?node_id=460197 too

[17:44] <autrijus> if Python (PyPy) can do it, there's no reason why perl6 can't :)

[17:44] <Darren_Duncan> away from comp for a bit while Pugs recompiles with latest patches

[17:44] <eric256_> are the current milstones on  http://svn.perl.org/perl6/pugs/trunk/docs/01Overview.html still valid? or have they changed? if so does that mean improved OO is top priority right now?

[17:44] <autrijus> eric256_: they're still valid.

[17:45] <autrijus> eric256_: and yes, OO is the current priority (over rules and macros)

[17:45] <eric256_> ;) cool ;)

[17:47] <chip> Limbic_Region: thanks.  I'm having some net issues here.  I can get to perl.org just fine, but comics.com seems not to like Austria.  Darn it.

[17:49] <Limbic_Region> chip - got a feather account?

[17:52] <chip> Limbic_Region: yup.  chip@ 

[17:57] <Limbic_Region> I was just going to suggest attempting to fetch the comics from there

[17:58] <iblech> gaal: Should we change evals :lang<Parrot> to :lang<PIR>?

[17:59] <gaal> dunno? we can make the aliases too

[18:01] <Aankhen``> "Classes and traits" -- does that include stuff like `where` and `but`? *hopeful look*

[18:02] <Aankhen``> "Can Pugs work with Perl 5 libraries?" seems to be a little outdated...

[18:04] <gaal> afk

[18:12] <ninereasons> what is the bug in wizard.p6 ?

[18:14] <eric256_> a new bug in there? it was working last time i left it

[18:14] <Darren_Duncan> compile done

[18:15] <ninereasons> eric256_, it isn't running for me.  perhaps a problem on my end.

[18:15] <eric256_> let me update and run it

[18:15] <eric256_> well take a while. ;)

[18:16] * geoffb is really enjoying having autrijus in a US/Pacific-friendly timezone . . . the channel is actually busy during my awake hours

[18:16] <ninereasons> eric256_, "*** No compatible subroutine found: "&new" at examples/games/wizard.p6 line 142, column 14 - line 145, column 2"

[18:17] <iblech> gaal: Aliasing PIR to Parrot sounds good for me, committing...

[18:17] <eric256_> ninereasons -- just starting nmake unoptimized ow. ;)

[18:19] <Aankhen``> iblech++; gaal++;

[18:19] <iblech> gaal++ # Did all the work

[18:24] <autrijus> :)

[18:24] <svnbot6> r4630, iblech++ | Prelude -- Make eval("...", :lang<PIR>) call eval_parrot().

[18:24] <svnbot6> r4631, gaal++ | You can't just make shit up and expect the computer to know what you mean, Retardo!

[18:25] <eric256_> hmmm weird error..

[18:26] <eric256_> okay i don't even know where to start with that....is it haveing trouble processing the class? or something else.

[18:27] <Darren_Duncan> gaal, want to explain that last one?

[18:28] <ninereasons> Darren_Duncan, checking the svn diff explains it all :-)

[18:28] <Darren_Duncan> yes, but asking is less work

[18:28] <Darren_Duncan> for me

[18:28] <Darren_Duncan> forget it

[18:28] <ninereasons> + die "can't eval language $lang";

[18:29] <autrijus> eric256_: shockingly

[18:29] <autrijus> eric256_: because the OO system works

[18:29] <autrijus> your program breaks

[18:29] <autrijus> eric256_: try changing all your "Object" into "Subject"

[18:29] <autrijus> and your program will run fine.

[18:30] <autrijus> because by saying "class Object { has...}" you're saying every single object now has additional attributes

[18:30] <autrijus> now how actually that breaks things needs to be investigated

[18:30] <autrijus> but that's probably buggy at one level or another

[18:32] <clkao> cool, eval('...', lang:<perl5>) !

[18:33] <ninereasons> interesting, autrijus.  Just as you said s/Object/Subject/g fixes it.

[18:33] <Aankhen``> Isn't that: eval('...', :lang<perl5>)

[18:34] <eric256_> ahhh

[18:35] <eric256_> and the object part is new

[18:36] * eric256_ doesn't like have the Object class taken like that...shouldn't internal classes like that have some better name?

[18:36] <eric256_> Perl6::Object or something like that?

[18:37] <eric256_> i just don't like the idea of internal objects and user objects colliding in such a fashion, it also means if you add internal classes in the future they might clash with existing and working code, seems limiting even if you never plan on adding new classes

[18:38] <iblech> 1. The idea is, I think, that the Object class isn't thaat much internal that it'd need some internal_use_only prefix. 2. If we went with Perl6::Object, we'd have to rename Array, Hash, etc. to Perl6::Array respectively Perl6::Hash, too, even though these are fairly "normal" classes

[18:38] <q[merlyn]> is building from SVN failing on OSX expected?

[18:39] <iblech> I.e. it'll be relatively normal to (for example) inherit from Hash if you want to have your tied hash class

[18:39] <dkf> q[merlyn]: it is if you're using gcc 4.0

[18:39] <PerlJam> iblech: Object might just be shorthand for Perl6::Object you know

[18:39] <q[merlyn]> is there a pastebot here

[18:39] <q[merlyn]> no - I rolledback to 3.3

[18:39] <Aankhen``> q[merlyn] >> http://sial.org/pbot/perl6

[18:39] <ninereasons> perlbot nopaste

[18:39] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[18:39] <autrijus> q[merlyn]: you need to 3.3 on a clean tree

[18:40] <eric256_> iblech sure. but that doesn't address the concern of adding future classes to the language that could conflict with current user defined classes

[18:40] <q[merlyn]> I did sudo gcc_select 3.3

[18:40] <q[merlyn]> and "make clean"

[18:40] <chip> q[merlyn]: welcome

[18:40] <q[merlyn]> and rebuilt the Makefile

[18:40] <eric256_> it means you either have to tell those people too bad, or never create new internal classes....neither of those options seems like the right thing to do 

[18:40] <pasteling> "q[merlyn" at 70.212.105.232 pasted "failure on OSX 10.4.1" (10 lines, 286B) at http://sial.org/pbot/11021

[18:40] <q[merlyn]> hey chip

[18:41] <svnbot6> r4632, iblech++ | sub_ref.t -- Fixed test according to p6l and added a comment.

[18:41] <q[merlyn]> what the hell is a _fprintf$LDBLStub? :)

[18:41] <PerlJam> eric256_: What do you mean by "internal classes"?  Why must they exist?

[18:41] <q[merlyn]> I got 15 minutes before I have to leave CVG

[18:42] <iblech> eric256_: Right. But I'd expect that, for example, if a new core class is introduced in Perl 6.1.0, you'd have to "use v6.1.0" to make it visible

[18:42] <eric256_> Object, Hash, Array, theses are all *internal* classes.  Meaning they are defined by the language

[18:42] <eric256_> or just use Perl6;

[18:42] <eric256_> iblech why paint ourselves into this obvious restriction on future growth though?

[18:43] <eric256_> i mean you should just say then, don't define your classes in the base level, becuase we might step on them in the future.

[18:43] <eric256_> but then the inconvienence is put on the user instead of on the language where it should be

[18:43] <q[merlyn]> any ideas what to try nextg?

[18:44] <autrijus> q[merlyn]: it's possible that "make clean'¢ì¢÷¢í¢û¢" doesn't really.

[18:44] <iblech> I don't think having to add one line ("use v6.1.0") is a hard restriction :) The documentation will simply say "Don't forget to "use v6.1.0" if you want to use the new FooBar class or the new "/" sigil."

[18:45] <autrijus> q[merlyn]: so check out a fresh tree, and make unoptimised with 3.3?

[18:45] <autrijus> eric256_: once upon a time internal classes are called

[18:45] <autrijus> OBJECT HASH CODE ARRAY REF

[18:46] <autrijus> then they get to become regular cased and conflict with user classes. fancy that.

[18:46] <Limbic_Region> do p6 array elements have knowledge of there own index?

[18:46] <Limbic_Region> for @array -> $elem { say $elem.index }

[18:47] <autrijus> (I agree with your point entirely. it should be Perl::Object for all I'm concrebed)

[18:47] <q[merlyn]> how do I tell svn to toss anything broken

[18:47] <autrijus> Limbic_Region: .kv

[18:47] <q[merlyn]> I don't have time to do a complete download

[18:47] <autrijus> q[merlyn]: svn st then grep for ?

[18:47] <q[merlyn]> OK

[18:47] <autrijus> '^?'

[18:47] <chip> zero or more beginnings of line

[18:47] <Limbic_Region> for @array.kv -> $i, $elem { say "$i $elem" }

[18:47] <q[merlyn]> Hmm.  only two files in that category

[18:48] <q[merlyn]> src/Pugs/Run/Perl5_stub.{c,h}

[18:48] <autrijus> zero or one, actually. </pedantic>

[18:48] <Aankhen``> What about having C<class Object {...}> define main::Object, and C<::*Object> refer to the builtin class?

[18:48] <autrijus> q[merlyn]: hm. that doesn't sound right. are you using .dmg GHC builds and 3.3?

[18:48] <eric256_> should i post a request to the mailing list then or what? or is this still all in flux and don't worry about it at the moment?

[18:48] <Limbic_Region> so if you wanted to know if you were on the last loop, you could do something like

[18:48] <autrijus> eric256_: no, this is The Priority now

[18:48] <autrijus> eric256_: so please post to p6l.

[18:49] <q[merlyn]> I built GHC from source

[18:49] <Limbic_Region> for @array.kv -> $i, $elem { say $elem; say "done" if $i == @array.end }

[18:49] <q[merlyn]> version 6.4

[18:49] <autrijus> Limbic_Region: you do a LAST{} block.

[18:49] <autrijus> Limbic_Region: see S04

[18:49] <Limbic_Region> autrijus - ok, so bad example

[18:49] <autrijus> q[merlyn]: hm. so it's the same gcc that builds ghc and builds pugs?

[18:49] <q[merlyn]> I got five minutes.

[18:49] <q[merlyn]> yes

[18:49] <q[merlyn]> in theory. :)

[18:49] <Limbic_Region> autrijus - let's say you wanted to do something every 3rd element

[18:49] <autrijus> q[merlyn]: ok, then it's not linking -lc

[18:50] <q[merlyn]> why? :)

[18:50] <Limbic_Region> you could use .kv and then check $i for % 3

[18:50] <Aankhen``> $i + 1, actually.

[18:50] <q[merlyn]> What Do I Type To Make It Work? :)

[18:50] <autrijus> q[merlyn]: no idea... but you can goto Makefile and look for ^pugs

[18:50] <Aankhen``> (assuming the index starts from 0)

[18:50] <Limbic_Region> Aankhen``:  yeah yeah - but the point is that it will DWIM

[18:50] <Aankhen``> Yeh.

[18:51] <autrijus> then change the ghc line to say

[18:51] <eric256_> for @array -> $elem,$b,$c { say $elem; say "done" if $i == @array.end }

[18:51] <autrijus> -lc

[18:51] <autrijus> before -threaded

[18:51] <PerlJam> Limbic_Region: I wonder if there would be any use in an EVERY block.  :-)

[18:51] <Limbic_Region> ?eval my @array = 1..5; @array.kv

[18:51] <evalbot6> (0, 1, 1, 2, 2, 3, 3, 4, 4, 5) 

[18:51] <Aankhen``> ?eval <foo bar baz>.kv

[18:51] <autrijus> q[merlyn]: I also hear that the upcoming GHC 6.4.1 will be more powerpc friendly

[18:51] <evalbot6> (0, 'foo', 1, 'bar', 2, 'baz') 

[18:52] <autrijus> q[merlyn]: I further hear that the .dmg GHC works for other people; I'll try to convince those people to build binaries for you

[18:52] <Aankhen``> ?eval for <foo bar baz>.kv -> $i, $elem { say $elem; say "done" if $i == 2 }

[18:52] <evalbot6> Error: No compatible subroutine found: "&say" 

[18:52] <Aankhen``> Oops.

[18:52] <Limbic_Region> ok - thanks - will keep this in my back pocket for the next SoPW at the Monastery for something like this

[18:52] <Aankhen``> ?eval for <foo bar baz>.kv -> $i, $elem { $elem }

[18:52] <autrijus> q[merlyn]: but in the meantime (that is 3min) I probably can't help a lot. :-/ maybe play on feather at the moment

[18:52] <evalbot6> undef 

[18:52] <dkf> autrijus: I'm running into the same problem using the .dmg GHC

[18:53] <autrijus> dkf: even gcc_select 3.3?

[18:53] <autrijus> but in all fairness, Tiger came out after GHC 6.4

[18:53] <Aankhen``> ?eval my (@foo, @bar); @foo = <foo bar baz>; for @foo.kv -> $i, $elem { push @bar, @elem; push @bar, "done" if $i == (@foo - 1); } @bar;

[18:53] <evalbot6> Error: Undeclared variable: "@elem" 

[18:53] <autrijus> so the fix for it will appear in 6.4.1 which is already branched, I think

[18:53] <Aankhen``> ?eval my (@foo, @bar); @foo = <foo bar baz>; for @foo.kv -> $i, $elem { push @bar, $elem; push @bar, "done" if $i == (@foo - 1); } @bar;

[18:53] <evalbot6> ['foo', 'bar', 'baz', 'done'] 

[18:53] <dkf> autrijus: Yep. But I just checked out a clean tree and I'm building it as we speak...

[18:54] <Limbic_Region> Aankhen`` why @foo - 1 and not @foo.end ?

[18:54] <Aankhen``> ?eval my (@foo, @bar); @foo = <foo bar baz>; for @foo.kv -> $i, $elem { push @bar, $elem; push @bar, "done" if $i == @foo.end; } @bar;

[18:54] <evalbot6> ['foo', 'bar', 'baz', 'done'] 

[18:55] <Limbic_Region> salutations pmichaud

[18:55] <q[merlyn]> OK, so I'll just be pugs-disabled for a bit

[18:55] <pmichaud> greetings, lr

[18:55] <q[merlyn]> weirdly, the CPAN release worked

[18:56] <dkf> q[merlyn]: A fresh tree does build with the .dmg GHC.

[18:56] <svnbot6> r4633, iblech++ | t/ -- First part of test fixes (is eval '...' -> is eval('...')).

[18:56] <Limbic_Region> pmichaud - have you had a chance to consider my last response WRT patches to the Synopses?

[18:56] <pmichaud> l_r:  I'm just getting to it now, actually :-)

[18:57] <Limbic_Region> okie dokie

[18:57] * Limbic_Region will go back to not feeling well

[18:57] <pmichaud> would've done it over the weekend, but this past weekend was my last chance to see the kids for a month so I wanted to take care of that first :-)

[18:58] <Limbic_Region> pmichaud++  # family first

[18:58] <q[merlyn]> I hate dmg because they tend to install in mixable locations

[18:58] <q[merlyn]> I use ghc from darwinports

[18:59] <q[merlyn]> because I can remove it

[19:01] <Limbic_Region> PerlJam - there is an EVERY thingy - just not called EVERY

[19:01] <autrijus> hey pmichaud!

[19:02] <pmichaud> hiya, autrijus

[19:02] <autrijus> pmichaud: got time to review my paper?

[19:02] <Limbic_Region> several of them in fact

[19:02] <pmichaud> sorry I didn't get a review of your document back to you before your deadline -- I was out of town (in the middle of nowhere in New Mexico) and didn't get it until late on the 9th

[19:02] <pmichaud> I'll be glad to review anything you'd like me to review now, though :)

[19:02] <pmichaud> (very glad, even)

[19:03] <autrijus> please do; in 2 weeks I'll know if it's accepted

[19:03] <autrijus> (which I think it will)

[19:03] <autrijus> then I need to prepare a final version

[19:03] <pmichaud> shall I just review the draft you sent or is there an updated version?

[19:03] <autrijus> so your review is still essential

[19:03] <autrijus> pmichaud: it's in the pugs tree as docs/talks/hw2005.tex

[19:03] <autrijus> or you can review the pdf at http://perlcabal.org/~autrijus/hw2005.pdf

[19:03] <pmichaud> okay, I'll review that one.  Should do it a bit later this afternoon

[19:03] <autrijus> thanks a lot!

[19:04] * autrijus is doing this unenviable work of writing ASTs for both PugsAST and PIRAST

[19:04] <pmichaud> unenviable indeed

[19:04] <pmichaud> what do you have so far on the PIRAST?

[19:05] <autrijus> pmichaud: I'll check it in later in pugs as Emit.PIR

[19:05] <autrijus> src/Emit/PIR.hs

[19:05] <autrijus> pmichaud: but part of it is in the paper

[19:05] <pmichaud> autrijus: that would be excellent

[19:05] <pmichaud> I look forward to seeing it

[19:05] <autrijus> it's basically a typechecked AST for the imcc parse tree

[19:06] <autrijus> not terribly advanced

[19:06] <autrijus> and only for emitting purpose

[19:06] <autrijus> so I get to gloss over a lot of parsing

[19:06] <pmichaud> advanced systems often arise from simple starts -- that's the way to go :)

[19:06] <autrijus> nod. the plan is to have a mid-level PugsAST

[19:06] <autrijus> similar to scope of the intended PAST but much more constrained

[19:06] <autrijus> almost ANF-level constained

[19:07] <autrijus> and do PugsParseTree -> PugsAST -> PIRAST -> PIR -> PASM -> PBC

[19:07] <svnbot6> r4634, iblech++ | Pugs.Prim -- Repair Pair::kv.

[19:07] <svnbot6> r4635, iblech++ | t/ -- Remaining test fixes WRT eval.

[19:07] <svnbot6> r4636, iblech++ | hw2005.tex -- Very minor grammar fix.

[19:08] <autrijus> pmichaud: so, unidiff against hw2005.tex is appreciated -- or you can just commit back; I can hand you a commit bit for that :)

[19:09] <pmichaud> I'll do a unidiff -- I'm a bit more comfortable with that

[19:09] <autrijus> 'k

[19:09] <autrijus> thanks in advance :)

[19:09] <pmichaud> it'll also make it slightly easier for you to see what I propose/change :)

[19:09] <autrijus> nod

[19:13] <Darren_Duncan> one missing feature I think, 'is constant' with variables

[19:13] <Darren_Duncan> eg, my Str $xy is constant = 'AE';

[19:13] <Darren_Duncan> not a show stopper yet though

[19:14] <Darren_Duncan> this does not compile

[19:14] <autrijus> da	not really missing

[19:14] <autrijus> my $x := 888;

[19:15] <Darren_Duncan> I started out using that syntax, but changed to 'is constant' later on recommendation that it is more readable

[19:15] <Darren_Duncan> or self-documenting

[19:16] <Darren_Duncan> they may not have exactly the same meaning either

[19:16] <Limbic_Region> doesn't the latter allow rebinding while the former wouldn't?

[19:16] <Darren_Duncan> or rather, I started out with '::=' but changed to 'is constant'

[19:16] <Darren_Duncan> the '::=' is compile-time binding

[19:16] <Aankhen``> ?eval my $foo is rw;

[19:16] <evalbot6> Error:  unexpected "i" expecting "=", ":=", "::=", ";" or end of input 

[19:16] <Aankhen``> ?eval my $foo is Str;

[19:16] <evalbot6> Error:  unexpected "i" expecting "=", ":=", "::=", ";" or end of input 

[19:17] <Aankhen``> Doesn't look C<is> parses.

[19:17] <Aankhen``> Er, look like.

[19:17] * Aankhen`` wanders off to play some more Battlefield 2.

[19:17] <Darren_Duncan> ?eval my $foo is constant = 3;

[19:17] <evalbot6> Error:  unexpected "i" expecting "=", ":=", "::=", ";" or end of input 

[19:17] <Darren_Duncan> yes

[19:18] <Darren_Duncan> that has been the situation for a few weeks now

[19:18] <autrijus> right, because vars don't take traits yet

[19:18] <autrijus> did it work before?

[19:19] <Darren_Duncan> also, 'trusts Foo' inside a class declaration doesn't work yet

[19:20] <Darren_Duncan> ?eval class Foo trusts Bar;

[19:20] <evalbot6> Error: No compatible subroutine found: "&trusts" 

[19:20] <Darren_Duncan> ?eval class Foo { trusts Bar; }

[19:20] <evalbot6> Error: No compatible subroutine found: "&trusts" 

[19:20] <autrijus> hrm. I got this mail saying my 45min I18N talk got accepted for Euroscon.

[19:21] <autrijus> curiously, none of the other 3 perl6/pugs related talks did.

[19:21] <Darren_Duncan> now, assuming that private attributes are being enforced as such, this is a show stopper for my module, since Translator needs to access Message vars

[19:21] <autrijus> Darren_Duncan: not enforced.

[19:21] <Darren_Duncan> though I suppose I could work around it for now using the Message accessors, but the final version shouldn't

[19:21] <autrijus> Darren_Duncan: you can comment the "trusts" out.

[19:22] <Darren_Duncan> it is commented out in the checked in version

[19:22] <Darren_Duncan> will add comment about not enforced

[19:22] <autrijus> ok

[19:22] <autrijus> oh wait you mean $:foo

[19:22] <autrijus> sorry. I read incorrectly

[19:22] <autrijus> no accessors are generated for them, yeah.

[19:23] <Darren_Duncan> yes I mean $:foo

[19:23] <autrijus> you need to use $.foo for now. is there a "trusts" test?

[19:23] <autrijus> I can maybe do it later this week

[19:23] <Darren_Duncan> don't know

[19:23] <autrijus> not seeing one

[19:23] <autrijus> ah. it just takes time for it to flow thru... I got another accepted talk

[19:23] * autrijus wonders what the other two will fare

[19:23] <Darren_Duncan> I don't know if this goes against your principles, but can you make it so 'trusts' compiles, even if it currently doesn't do anything?

[19:24] <autrijus> I have no principles... :)

[19:24] <autrijus> I'm just this implementation monkey

[19:24] <pmichaud> heh, autrijus is like me

[19:24] <pmichaud> I don't have any principles, I just want to get things to work :)

[19:24] <autrijus> right.

[19:24] * autrijus praises monkeyhood

[19:24] <pmichaud> if that means implementing broken things for a while, so be it :)

[19:25] <Darren_Duncan> when I say "principles", I mean that "if it compiles, it behaves correctly"

[19:25] <autrijus> oh. no.

[19:25] <autrijus> pugs compiles.

[19:25] <autrijus> but there's still loads of TODO tests

[19:25] <autrijus> 1187 TODOs, actually

[19:25] <Darren_Duncan> on the other hand, if things can compile and not run, then I would like for somethings to at least compile asap

[19:25] <autrijus> out of some 7600

[19:26] <Darren_Duncan> namely the 'trusts Foo;' and 'is constant'

[19:26] <autrijus> Darren_Duncan: yes, and I implemented the parsing.

[19:26] <Limbic_Region> pmichaud - ok, I think the biggest problem with people providing patches to the Synopses currently is that only about 1/3 of them are written - so in many cases - there is nothing to patch

[19:26] <Limbic_Region> I will see what I can do about using the Perl6 Timeline by Apocolypse to frame all of them

[19:26] <autrijus> Darren_Duncan: committing in. I would love a "trusts" test in t/oo/trusts.t

[19:26] <pmichaud> Limbic_Region: well, I'm just about to add S17.pod into the repo

[19:26] <Limbic_Region> will send them directly to you to confer with the cabal about uploading them

[19:26] <autrijus> mmm Threads!

[19:26] <Limbic_Region> and then people can fill in the blanks as they come up

[19:27] <autrijus> @Larry got threads done?

[19:27] <pmichaud> no, it's a placeholder

[19:27] <Limbic_Region> and those more ambitious can google for old answers

[19:27] <autrijus> oh. bah. :-/

[19:27] <Darren_Duncan> can you do a 'my $foo is constant = 3;' parsing also?

[19:27] <pmichaud> sorry :-)

[19:27] <Limbic_Region> pmichaud - sound good?

[19:27] <pmichaud> but I'm sure if someone wanted to draft up a document on threads it would get comments much more quickly

[19:27] <pmichaud> actually, now that I think about it, it may be that @Larry (or $Larry) already had some pretty strong ideas about threads

[19:27] <autrijus> right, except we don't know :)

[19:28] <pmichaud> right

[19:28] <autrijus> I know he doesn't want a 5005 share-all-global-by-default model.

[19:28] <autrijus> but that's the extent.

[19:28] <Limbic_Region> well - kinda hard to know what is left to talk about without knowing what hasn't been filled in yet

[19:28] <pmichaud> so, perhaps what we need is to go ahead and put up frameworks, and for those sections where @Larry or $Larry have claimed they want a hand in drafting it we can put that as a placeholder

[19:28] <pmichaud> so at least people will know if @Larry is working on it or if it's just being waited upon

[19:28] <autrijus> sure.

[19:28] <autrijus> worksforme.

[19:28] <autrijus> yes.

[19:28] <autrijus> semaphores.

[19:29] <pmichaud> lemme propose this to @Larry and make it so

[19:29] <autrijus> Darren_Duncan: enjoy.

[19:29] <Darren_Duncan> autrijus, I just added an empty file t/oo/trusts.t to my working dir as a reminder to make the file a bit later

[19:29] <Limbic_Region> pmichaud - $larry didn't yell at me (since I already pretty much said it was a good idea)

[19:29] <autrijus> r4637

[19:30] <Limbic_Region> pmichaud - see http://perlmonks.org/index.pl?node_id=465629

[19:30] <Darren_Duncan> updating ...

[19:30] <Limbic_Region> could be that he was waiting to talk to you - but he could have just as easily said "we are not looking for framework until we are ready to talk about all the details"

[19:30] <Limbic_Region> btw - for the frames, I will be following http://perlmonks.org/index.pl?node_id=332117

[19:31] <pmichaud> Limbic_Region: did Larry respond at all to your post?  I have the impression he's been a bit busy lately, because he hasn't responded to a few of my messages to p6l

[19:31] <Darren_Duncan> back shortly

[19:32] <Limbic_Region> pmichaud - TimToady = $larry 

[19:32] <pmichaud> oh, thanks -- I wasn't aware of that connection

[19:32] <Limbic_Region> he didn't reply directly to me, but to a reply in that thread

[19:32] <pmichaud> got it

[19:32] <Limbic_Region> S09 looks really interesting too

[19:32] <pmichaud> my reading of his response is that frameworks for the documents is a good idea

[19:33] <Limbic_Region> yeah - me too

[19:33] <pmichaud> okay, so here's what I'm going to do

[19:33] <svnbot6> r4637, autrijus++ | * parse for "trusts" and "my $foo is randomtrait", as suggested

[19:33] <svnbot6> r4637, autrijus++ |   by Darren_Duncan++

[19:33] <Limbic_Region> pmichaud - out of curiosity - there are several headings in S17 I didn't put in as they looked to be covered by other RFCs

[19:33] <Limbic_Region> can you give the list a sanity check

[19:33] <Limbic_Region> using http://perlmonks.org/index.pl?node_id=332117 as reference material

[19:33] <pmichaud> l_r:  sure, I'll do as much of a sanity check as I can

[19:34] <pmichaud> but I'll go ahead and check in framework documents, and I'll post an invitation to @Larry (and others) that if there are any specific parts of the synopses they wish to "claim" then let me know and I'll put a marker in to that effect

[19:34] <Limbic_Region> ok - so tomorrow providing tuits, I will frame out all the remaining synopses

[19:34] <Limbic_Region> and we will mark reserved headings as such

[19:34] <pmichaud> exactly

[19:35] <Limbic_Region> the next task would be to go over the existing synopses and find missing headings

[19:35] <Limbic_Region> since the S now means both synopsis and spec - there is stuff left out 

[19:36] <Limbic_Region> or rather, some stuff is left out which made sense when the S only stood for synopsis but now it doesn't

[19:36] <pmichaud> yup

[19:36] <Limbic_Region> ok - nice doing business with you ;-)

[19:37] <pmichaud> hey, anything that advances the state of Perl 6, I'm for :-)

[19:37] <Limbic_Region> me too, but I see myself having a much less significant role

[19:38] <pmichaud> well, when I see what autrijus is accomplishing, I feel pretty insignificant myself at times :-)

[19:39] * Limbic_Region wonders how many days remaining until Xmas anyway

[19:39] * autrijus casually notes that autrijus is only responsible for 1806 out of 4637 pugs commits.

[19:39] <autrijus> so that's <40% :)

[19:40] <autrijus> (and parrot is almost twice the number of commits.)

[19:40] <autrijus> so significance is very much overrated :)

[19:40] <pmichaud> it's not just the number of commits, it's the speed :-)

[19:41] <autrijus> well, yes, amphetamines has its uses...

[19:41] <autrijus> ...but I think diet coke is good enough for most of my needs

[19:41] <Darren_Duncan> okay, 'trusts' now compiles

[19:41] <Limbic_Region> right - keeps people calm

[19:42] <Limbic_Region> s/people/ADD/

[19:42] <Limbic_Region> err - well, you get the point

[19:42] <autrijus> so some of it is the speed, but not a significant part :)

[19:42] <Limbic_Region> I am not sure it has anything to do with the amount of code or the speed - even though they are both impressive

[19:42] <Limbic_Region> I think it has more to do with - I am not going to complain or suggest things - I am going to do something

[19:43] <pmichaud> there is that :-)

[19:43] <Limbic_Region> and oh by the way - I am not going to work in a vaccuum, everyone is invited to come along and play

[19:43] <autrijus> like, optimising for fun :)

[19:44] <autrijus> gawd, this PIR AST is 40 node types and counting

[19:44] <Limbic_Region> it creates a synergetic energy that makes people want to help

[19:44] <pmichaud> not much point in doing this if it's not fun.  :-)

[19:44] <autrijus> whomever that want to target PIR directly from parse tree is, I repeat, mad

[19:44] <autrijus> (as pugs currently does, that is.)

[19:45] <Darren_Duncan> and 'is constant' now also compiles

[19:50] <Aankhen``> What about making C<new Proxy: STORE => {...}, FETCH => {...};> compile? :-D

[19:50] * Limbic_Region wonders if there is a breakdown of tests for passing/todo/bug/failing ?

[19:50] <autrijus> Aankhen``: er, it's just adding the Proxy class by default.

[19:50] <autrijus> Aankhen``: you can stuff it into src/Pugs/Context.hs yourself.

[19:50] <Limbic_Region> specifically how many of the tests are todo features

[19:50] <Aankhen``> :-o

[19:51] * Aankhen`` wanders into Haskell-world.

[19:51] <autrijus> Limbic_Region: I don't think "make test" tallies them

[19:51] <autrijus> Limbic_Region: but you can grep anyway

[19:51] <autrijus> Aankhen``: with luck you can even learn to write Proxy::new into Prim.hs and hook it up with ScalarProxy!

[19:51] <autrijus> (then you get a full Proxy implementation)

[19:52] <Aankhen``> O_o_O

[19:52] <Limbic_Region> autrijus - I am just trying to balance out how much of known design is unimplimented against unknown (with 2/3 of the design docs not published)

[19:53] <Limbic_Region> IOW - of the 1/3 we know about, how far along are we

[19:53] <Aankhen``> So this would involve putting it in the big list in initTree?

[19:53] <autrijus> Limbic_Region: we're 7000ish pass with 1000ish todo

[19:53] <autrijus> Aankhen``: yes

[19:53] <Aankhen``> OK.

[19:54] <autrijus> so in the known space, I'd say we're 70% there

[19:55] <pmichaud> and I'm not entirely sure that the remaining 2/3rds is "unknown space".  Lots of it will be similar to perl 5

[19:55] <autrijus> problem is that there's 2/3 not published, so we're more like 25%

[19:55] <autrijus> pmichaud: aye but similar ne defined

[19:55] <autrijus> and semantics undefined is verifications denied, or something :)

[19:56] <pmichaud> well, even in the sections that are "defined" the definitions sometimes change from time to time :)

[19:56] <Limbic_Region> so assuming all things are equal we can expect around 30_000 tests

[19:56] <autrijus> Limbic_Region: that sounds like correct.

[19:56] <pmichaud> out of curiosity, how many tests does p5 have?

[19:57] <Darren_Duncan> committed v4638 which uses 'trusts' and 'is constant'

[19:57] <Aankhen``> W00t!

[19:57] <Aankhen``> I added it. :-D

[19:58] <Shachaf> !seen ingy

[19:58] <Darren_Duncan> seen ingy

[19:59] <Khisanth> the bot is not here

[19:59] <Darren_Duncan> hi

[19:59] <autrijus> pmichaud: 

[19:59] <autrijus> 70_000.

[19:59] <pmichaud> seems like p6 ought to have a similar number of tests :-)

[19:59] <Darren_Duncan> indeed

[20:00] <pmichaud> when it's done

[20:00] <autrijus> but Perl 5.6.x has < 12_000

[20:00] <autrijus> so... :)

[20:00] <pmichaud> ahhh

[20:00] <pmichaud> seems like p6 ought to have around 30_000 tests... when it's done.  :-)

[20:00] <svnbot6> r4638, Darren_Duncan++ | Locale-KeyedText update to 6v0.1.2 : uncommented 'trusts ...' in KeyedText.pm, uncommented all 'is constant' in all t_LKT_*.pm and LKT_30_TrnMsg.t ; Pugs can now parse those 2 features

[20:00] <svnbot6> r4639, Aankhen++ | * added Proxy to the builtin classes.

[20:00] <Darren_Duncan> but one of the big advantages of 5.8 is the much larger test suite

[20:00] <Limbic_Region> and how many of those tests are generated versus written by hand

[20:00] <Darren_Duncan> over 5.6

[20:00] <autrijus> right.

[20:01] <pmichaud> either way, 30_000 seems like it might be a lower bound

[20:01] <Limbic_Region> meaning pugs/p6 is likely to have far more tests if we go the generated route

[20:01] <Aankhen``> Hmm.

[20:01] <Aankhen``> C<new Proxy:> still doesn't parse.

[20:01] <pmichaud> well, we're also going to have the parrot tests as well

[20:01] <Skilled_sniper> quit

[20:02] <ingy> hola

[20:02] <geoffb> hola, ingy

[20:02] <Darren_Duncan> I also hola

[20:02] <geoffb> friendliness++

[20:04] <Aankhen``> autrijus >> Actually implementing a Proxy class seems to be a little beyond me. :-)

[20:04] <autrijus> Aankhen``: that's fine :) at least write tests.

[20:05] <Aankhen``> A'right.

[20:08] <Aankhen``> There are already tests in t/subroutines/lvalue_subroutines.t

[20:08] <autrijus> ok. good

[20:08] <Aankhen``> I'll add one or two.

[20:12] <svnbot6> r4640, autrijus++ | * first cut at Emit.PIR -- almost enough to express mandel.p6

[20:12] <svnbot6> r4640, autrijus++ |   -- but not quite.  need to push the PugsAST side now --

[20:12] <svnbot6> r4640, autrijus++ |   it's just like playing Sokoban...

[20:16] * Limbic_Region googles for Sokoban

[20:20] <geoffb> Limbic_Region, it's a game of pushing squares around a puzzle maze to reach an exit point

[20:20] <svnbot6> r4641, Aankhen++ | * added more tests for lvalue subs.

[20:20] <geoffb> It's actually damned addictive . . . .

[20:20] <geoffb> It's always the simple game play that keeps 'em coming back

[20:21] <pdcawley> Turing complete as well.

[20:21] * geoffb mumbles "Man I wish I had a Robotron arcade machine . . . ."

[20:21] <geoffb> pdcawley, really?  Cool!

[20:22] <autrijus> I think I need to sleep a bit so I don't fall into underclocking mode :)

[20:22] <autrijus> bbl... *wave*

[20:22] <Limbic_Region> sleep well

[20:22] <pdcawley> Yeah. There's a proof somewhere.

[20:22] <geoffb> Have a good rest!

[20:23] <pmichaud> later, autrijus 

[20:23] <autrijus> :)

[20:23] <Aankhen``> See ya autrijus.

[20:29] * Limbic_Region heads homewards

[20:39] <svnbot6> r4642, Aankhen++ | * cleaned up t/subroutines/lvalue_subroutines.t somewhat.

[21:22] <Aankhen``> G'night.

[21:25] <eric256_> do i have to be subscribed to the mailing lists to send a message?

[21:25] <wolverian> no.

[21:26] <eric256_> hmm.. well i'm sure i  sent it in before tese other messages. odd

[21:27] <pmichaud> eric256_: which mailing list did you send to?

[21:27] <wolverian> eric256_: the first mail takes longer to arrive with the perl6-* lists, anyway.

[21:27] <svnbot6> r4643, ninereasons++ | perl6.vim: add a couple Types keywords

[21:27] <svnbot6> r4643, ninereasons++ | progressive_powerset.p6: s:g/return/last/ fixes a test

[21:27] <pmichaud> I've noticed that the perl6-compiler list often "holds" messages for a few hours before delivering them

[21:27] <pmichaud> I don't know why

[21:28] <wolverian> the lists (-language, anyway) are moderated and you're whitelisted after the first mail.

[21:28] <wolverian> or so I seem to remember someone saying.

[21:28] <eric256_> perl6-language

[21:28] <pmichaud> wolverian: yes, that's true also.  However, I know that I'm whitelisted and my posts still sometimes take a while to come back

[21:28] <pdcawley_> I think they all are, but I'm not sure.

[21:28] <pmichaud> eric256_: if you haven't posted to p6l in a while, I suspect it's waiting for moderator approval

[21:28] <pmichaud> after that you'll be whitelisted again (I think the whitelisting is good for 30 days or something like that)

[21:29] <wolverian> pmichaud: I had a problem when my mail envelope had the wrong FROM field. that's against the spec and awfully wrong (tm) and it made the whitelisting process fail.

[21:29] <eric256_> ahh okay

[21:29] <wolverian> things like that can happen when you're, well, me. :)

[21:30] <pmichaud> wolverian: well, that might explain some of my problems too.  But I've even noticed that with the weekly summaries the p6c copy of the summary arrives significantly after the p6i and p6l ones

[21:31] <wolverian> pmichaud: oh, okay. I haven't participated in p6c, can't compare myself.

[21:52] <svnbot6> r4644, Darren_Duncan++ | Locale-KeyedText updates : uncommented all tests in MsgProps.t and TrnProps.t, removed 2 tests from MsgProps.t and 1 from TrnProps.t (the same tests were removed in the Perl 5 version), reorganized t_LKT_Util.pm, split up a test in Compile.t to match the Perl 5 version, cleaned up several KeyedText methods that fetch properties ; there are now no runtime deaths, but many wrong answers are still returned

[21:56] <Darren_Duncan> I'm stopping for today

[21:58] <Darren_Duncan> my main problems right now seem to concern Pugs transforming one container or variable or value type into another type

[22:06] <Darren_Duncan> question: if you say 'return;' inside a constructor method new(), is the calling code supposed to receive an object or undef?

[22:07] <Darren_Duncan> and if that's true, then how do you indicate that a constructor has failed due to bad input, without throwing an exception?

[22:08] <Darren_Duncan> in Perl 5, the undef is returned by 'return;' and a caller will know if the constructor failed by seeing that; seeing an object meant success

[22:08] <Darren_Duncan> Pugs worked this way a few weeks back but now it seems to always return an object

[22:08] <Darren_Duncan> testing more ...

[22:15] <Darren_Duncan> okay, that may not be the problem, ignore what I said

[22:22] *** Limbic_Region_ is now known as Limbic_Region

[22:27] * geoffb hopes Limbic_Region ate or something in between there, and doesn't face a nearly 2 hour commute . . . .

[22:59] <wolverian> hmm, got my friend to learn haskell

[22:59] <geoffb> wolverian++

[23:00] <wolverian> :)

[23:00] <wolverian> is there syntax for constructing a lazy list in perl6 specced?

[23:00] <wolverian> er, rephrase that as needed. I suck at 2am

[23:01] <geoffb> I recall seeing something, but I also recall seeing something saying that it changed.  Useless answer, I know, but what I mean is "I don't know for sure, but I wouldn't necessarily trust AES on this one."

[23:02] <wolverian> right. I recall a thread on p6l on this subject without a final decision from anyone.

[23:02] * wolverian digs it up

[23:02] <geoffb> nodnod

[23:02] * geoffb is reading Perl5 test library to see if there are techniques we can steal^Wborrow^Wclone^Wuse

[23:03] <geoffb> Judging by the amount of crap special-casing VMS testing, this comment is appropriate

[23:03] <geoffb> # VMS will avenge.

[23:03] <geoffb> Yep.

[23:03] <wolverian> wow, did google change back to the before-beta version of the google groups interface? yay!

[23:03] <eric256_> yea my message posted to p6l ;-)

[23:06] <SamB> wolverian: ooh, cool!

[23:06] <SamB> why did they even change it?

[23:06] * SamB wonders why it went "beta" all of a sudden in the first place

[23:07] <wolverian> SamB: I don't know. the beta version SUCKED.

[23:07] <SamB> yeah

[23:07] <geoffb> Someone thought they were being clever.

[23:07] <revdiablo> the beta seemed to be a knock-off of the gmail interface

[23:07] <geoffb> Google Maps -- now that's clever.

[23:07] <geoffb> Maybe done by the same people, before they started Gmail?

[23:08] <revdiablo> maybe at the same time, part of a Grand Unified Scheme

[23:08] <wolverian> my @fibs = 1, 1, [+] zip @fibs, @fibs.tail; # I want this to work correctly (lazily) :)

[23:08] <geoffb> BTW, from reading these Perl5 tests, I think I can definitively say "If Win32 is the least sane platform you've ever worked on, count yourself LUCKY."

[23:09] <geoffb> wolverian, ooh, cute.

[23:09] <wolverian> geoffb: yes. :) this is why I want to know how laziness works on the syntax level. to compare with haskell!

[23:09] <wolverian> (the above was given to me in haskell as an example of its elegance.)

[23:10] <wolverian> (well, as an example of _something_. I don't know what the purpose was, really.)

[23:10] <geoffb> *chuckle*

[23:13] <cognominal> in http://svn.openfoundry.org/pugs/src/Emit/PIR.hs, what the following means?

[23:13] <cognominal> {-

[23:13] <cognominal> ...

[23:13] <cognominal> -}

[23:14] <kelan> cognominal: multi-line comments in haskell

[23:15] <kelan> actually inline comments because you can put them inside expressions

[23:16] <cognominal> thx

[23:17] <SamB> {-# FOO #-}, on the other hand, would be a pragma...

[23:18] <mugwump> whereas {-< >-} is a Tie Fighter

[23:18] <SamB> no, the TIE cockpits are spherical

[23:19] <SamB> whereas that has a diamond shaped cockpit

[23:19] <mugwump> {-( )-}   {- happy? -}

[23:20] <geoffb> Well,  |-o-| might be better, since Tie Fighters have flat sides, only Tie Interceptors are curved on the sides

[23:20] <geoffb> I can't believe I even have that in my brain

[23:21] <eric256_> lol. ;)

[23:22] <eric256_> hmm... circumfix operators could be used to create a multiline comment ;) 

[23:22] <wolverian> hmm. shouldn't ?SUB work as well, besides &?SUB?

[23:23] * mugwump notes you can get all these craft and more in Celestia from the www.celestiamotherlode.net

[23:30] * eric256_ searches for the spec on circumfix operators

[23:31] <mugwump> eric256_: it's only in the relevant apocalypse iirc

[23:32] <mugwump> A06

[23:33] <mugwump> also A12

[23:35] <eric256_> thanks

[23:35] <eric256_> i would never have checked A06 

[23:48] *** _meppl_ is now known as meppl

[23:51] <Limbic_Region> seen chip

[23:51] <Limbic_Region> he's probably sleeping

