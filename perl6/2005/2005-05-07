[00:00] <webmind> that sounds horrible confusing ?

[00:01] <arcady> iff is like an if that goes both ways

[00:01] <arcady> if a then b and if b then a

[00:01] <Juerd> arcady: That doesn't seem to be true in the places where I read iff.

[00:01] <arcady> where is that?

[00:01] <Juerd> p6l

[00:02] <arcady> hm.

[00:02] <pjcj> no, I think it is used correctly: "Clearly, xor is true iff *exactly* one of its arguments is true"

[00:03] <arcady> example of proper usage: a number is divisible by 5 iff its last digit is 5 or 0

[00:03] <pjcj> which is also why it can't short circuit

[00:03] <arcady> yeah

[00:03] <Juerd> pjcj: Oh, duh, I for some reason confused short circuiting with returning the true value

[00:04] <arcady> I still say perl6 should have a short-circuiting xor

[00:04] <nothingmuch> =)

[00:05] <nothingmuch> to make our semantics even "cooler" we could autothread xor

[00:05] <arcady> well, or just use magic

[00:05] <nothingmuch> then we can eval both args together

[00:06] <nothingmuch> instead of short circuiting we have something more akin to copper wires melting together

[00:06] <nothingmuch> it's just as safe, too!

[00:08] <nothingmuch> we could have a whole array of 'fuse-free' operators

[00:08] <nothingmuch> where newbies can get burned

[00:08] <Juerd> Let's make every operator dangerous by default

[00:08] <nothingmuch> then we'd be nearly as good as pascal!

[00:09] <Juerd> "Of course they're not friendly to you. Treat them with respect, show them some love! Cuddle them, ((+)) and you'll see everything will just do what you want!"

[00:09] <nothingmuch> huraah!

[00:10] <pjcj> use AntiStaticWristStrap;

[00:10] <Juerd> Which of course results in $fh((.))say((("Hello, ")) ((~)) $world)((;))

[00:10] <Juerd> We have (op) and {op} still available

[00:10] <nothingmuch> that looks like lisp, except that the oatmeal/toenails are all over the place

[00:10] <Juerd> What shall we think of for these meta operators?

[00:14] <nothingmuch> good night

[00:14] <Juerd> nn

[02:01] <ingy> ola

[02:02] <pmichaud> hello

[02:13] <ingy> hi pmichaud 

[02:13] <ingy> I need to leave irc and  hack it hard

[02:22] <meppl> gute nacht

[02:24] <robkinyon> I have a question ...

[02:24] <pmichaud> ask away

[02:25] <robkinyon> I've figured out how to fix a bug on Cygwin, but I don't know enough Haskell to make the fix work

[02:25] <pmichaud> ah, I'm definitely not the one to ask about that -- I'm not doing much of the haskell stuff

[02:25] <robkinyon> :-(

[02:25] <pmichaud> I leave that to autrijus :-)

[02:26] <robkinyon> I emailed P6-compiler, but was Warnocked

[02:26] <crysflame> Warnocked?

[02:26] <robkinyon> The thread died

[02:26] <pmichaud> oh, I can definitely help with warnocking

[02:26] <pmichaud> what was the topic?

[02:26] <crysflame> etymology

[02:26] <crysflame> also hi :)

[02:26] <pmichaud> or when was the post?

[02:27] <robkinyon> 1 sec

[02:27] <robkinyon> "Pugs on Cygwin" is the subject

[02:27] <robkinyon> crysflame - Andy Warnock was a guy who posted a lot on p5p and no-one ever responded. Became a running joke.

[02:28] <pmichaud> well, it's a little soon to assume it was warnocked -- usually warnock would imply more than a day or so :)

[02:28] <robkinyon> Thread was started May 2nd.

[02:28] <robkinyon> 22 hours since my last post on how to fix Cygwin

[02:28] <robkinyon> :-)

[02:28] <obra> also, it's friday

[02:29] <robkinyon> I was hoping to get it fixed this evening.

[02:29] <pmichaud> saturday

[02:29] <robkinyon> :-(

[02:29] <pmichaud> where many of the perl6 folks are, it's saturday

[02:29] <pmichaud> s/perl6/pugs/

[02:29] <obra> and they just went to bed a couple hours ago ;)

[02:29] <robkinyon> ah

[02:30] <robkinyon> *shrugs* Oh, well

[02:30] <pmichaud> give it another day and see if there's still no response.  Or keep asking here 

[02:30] <robkinyon> can i ask again now?

[02:30] * robkinyon winks

[02:30] <pmichaud> if you still haven't gotten a response by Sunday then I'll post it directly to the folks

[02:32] <crysflame> oh, ok

[02:43] <Juerd> It's 4:46 am here

[02:43] <Juerd> And I'm going to bed

[03:08] <stevan> robkinyon: ping

[03:08] <stevan> ingy: ping

[03:09] <ingy> pongish

[03:10] <ingy> what's up  stevan 

[03:10] <stevan> ingy: I am looking for the kwid docs that used to be in docs/

[03:10] <ingy> hmmm

[03:11] <stevan> basically I hacked a quick Kwid parser (event based like the POD one I did) 

[03:11] <stevan> it works, so-so

[03:11] <ingy> nice

[03:11] <stevan> but I need to know more kwid-ish to finish it

[03:12] <stevan> basically it parsed all of the Test.pm kwid (mostly) correctly up until the last line or so

[03:12] <ingy> I find only these files:

[03:12] <ingy> ./docs/class/mission-statement.kwid

[03:12] <ingy> ./docs/src/Junc.kwid

[03:12] <ingy> ./docs/yaht.kwid

[03:12] <ingy> ./examples/games/hangman.kwid

[03:13] <stevan> yeah I am looking for that kwid.kwid you did back in the early days of pugs

[03:13] <ingy> not sure if there were more

[03:13] <ingy> I'm working on my Kwid parser now actually

[03:13] <stevan> the ones about kwid itself :)

[03:13] <ingy> they might've got moved to freepan

[03:13] <stevan> ok I will check there

[03:15] <ingy> http://tpe.freepan.org/repos/ingy/Pugs-Documentation/

[03:15] <ingy> is somewhat empty

[03:15] <ingy> grrr

[03:15] <robkinyon> yes, stevan?

[03:15] <stevan> hey rob :)

[03:15] <ingy> fyi, gugod and I will be hacking on Freepan next week

[03:15] <robkinyon> haskell isn't easy to read

[03:16] <ingy> need to go shopping...

[03:16] <ingy> &

[03:16] <stevan> robkinyon: I have to agree, but the more i read the more i understand

[03:16] <stevan> ingy: thanks, i will keep looking

[03:16] <robkinyon> only been reading it for like 15min :-)

[03:16] <stevan> robkinyon: $ has to do with Monads

[03:16] <robkinyon> Ok ... is that important?

[03:16] <stevan> robkinyon: it took me a long time to figure that out :P

[03:17] <robkinyon> heh

[03:17] <stevan> robkinyon: it is, but in what way, I am still trying to grok :)

[03:17] <Khisanth> robkinyon: Perl isn't easyto read either :)

[03:18] <robkinyon> 10 minutes makes haskell hard to read. 10 years makes perl easy to read. :-)

[03:24] <sproingie> $ has nothing to do with monads

[03:24] <stevan> sproingie: really? what is it for then?

[03:24] <sproingie> in haskell?  it's a grouping operator

[03:24] <stevan> it always seems to be around monads

[03:25] <stevan> sproingie: can you explain more please? I am still learning 

[03:28] <sproingie> argh, been so bloody long 

[03:28] <sproingie> if i explain it, i'll probably get it wrong

[03:28] * robkinyon waves

[03:29] <stevan> sproingie: ok, well just to know it is not monad related helps

[03:30] <sproingie> naw it's simpler.  it's basically an infix apply operator

[03:30] <sproingie> damn tutorials dont seem to cover it tho

[03:30] <stevan> sproingie: hmmm, that was one of my earliest suspicions actually, but for some reason I decided it was something else 

[03:33] <sproingie> yah it's apply.   f $ x  is the same as f x

[03:33] <sproingie> but it's lower precedence

[03:34] <stevan> sproingie: so how does that change the order of evaluation (or does it not change it)

[03:34] <sproingie> so "foo bar $ baz frotz"  is the same as (foo bar) (baz frotz)

[03:34] <stevan> sproingie: ahhhh, I see

[03:35] <sproingie> which lets you do stuff like pipelines

[03:35] <sproingie> sorta ... still reverse order

[03:35] <stevan> so it makes sure that each side evaluates in full 

[03:35] <stevan> before applying to one another

[03:35] <sproingie> yep

[03:35] <stevan> sproingie: you have shed new light on this code for me :)

[03:36] <stevan> sproingie++

[03:36] <sproingie> so you could write something like  "map uppercase (words mystring)" to "map uppercase $ words mystring"

[03:36] <sproingie> http://conal.net/pan/haskell-primer.htm

[03:36] <sproingie> one of the few primers that covers $

[03:37] <stevan> thanks :)

[03:37] <sproingie> it doesnt force evaluation, it's lazy like everything else

[03:37] <stevan> yes, but forces the order of eval, right?

[03:37] <sproingie> it's just syntactic shorthand for what you'd otherwise have to use parens for

[03:37] <sproingie> i guess yeah, it forces the order

[03:37] <sproingie> right to left

[03:39] <sproingie> i've heard of similar tricks in C++ using the shift operators

[03:39] <sproingie> since they're also low precedence and right associative

[04:03] <jabbot> pugs - 2801 - cleaning up some of the kwid docs

[04:03] <jabbot> pugs - 2802 - updating the changelog

[04:03] <jabbot> pugs - 2803 - made change to reflect some recent Perl 

[04:03] <jabbot> pugs - 2804 - adding the haskell mini-primer, which ta

[04:03] <jabbot> pugs - 2805 - adding in the first (still buggy) versio

[04:04] <sproingie> does pugs do objects yet?

[04:05] <Limbic_Region> coming soon

[04:05] <stevan> sproingie: not proper ones :)

[04:05] <Limbic_Region> of course - you could always get on board with "using OO before it existed"

[04:06] <Limbic_Region> stevan - did you get a chance to look at the hash reference potential bug?

[04:06] <sproingie> would have a hard time with getting "self" passed in right

[04:07] <sproingie> unless you can curry a sub

[04:07] <sproingie> with a reference to the hash that contains it

[04:07] <sproingie> hm.  come to think of it that would be possible in perl5

[06:34] <gaal> ping -1

[06:35] <gaal> the build is broken on cygwin.

[07:45] *** chady_ is now known as chady

[07:56] <Aankhen``> perl Makefile.PL is sure taking a long time. :-(

[07:57] <scook0> worked fine for me not so long ago...

[07:57] <Aankhen``> r2805 here, if that makes a difference.

[07:57] <scook0> r2805 here too -- but I didn't notice anything

[07:57] <Aankhen``> What's your system's config

[07:57] <Aankhen``> ?

[07:58] <scook0> Ubuntu Hoary - Perl 5.8.4 - Duron 700 - 256MB ram

[07:58] <scook0> I'll try it again just to be sure...

[07:58] <Aankhen``> That's strange...

[07:58] <Aankhen``> I'm running on Windows XP - Perl 5.8.6 - AMD Athlon XP 2000+ - 512MB RAM.

[07:59] <scook0> I just ran it again -- works fine for me

[07:59] <Aankhen``> Ah well.

[07:59] <Aankhen``> It's over and done with now.

[07:59] <scook0> weird

[07:59] <scook0> this never happened before?

[07:59] <Aankhen``> Well, of late it's been taking a while.

[07:59] <Aankhen``> I haven't built in a couple of days.

[08:00] * scook0 is stumped

[08:01] <Aankhen``> Ah, it's alright.

[08:01] <Aankhen``> Not a big deal.

[08:01] <Aankhen``> I'm just a whiner.

[08:13] <jabbot> pugs - 2806 - * when `eval_parrot` is passed any strin

[09:53] <jabbot> pugs - 2807 - * Added EOLs at EOFs to src/ and ext/.

[10:28] <meppl> guten morgen 

[10:53] <jabbot> pugs - 2808 - * Change Syck.hs to Syck.hsc to get rid 

[10:53] <jabbot> pugs - 2809 - * Note "make unoptimized" in Makefile.PL

[10:53] <jabbot> pugs - 2810 - Minor fixes to mklivecd.pl.

[11:03] <jabbot> pugs - 2811 - Updated tsanta.p6 to use unique filename

[11:04] *** chady is now known as chady_

[11:18] <scook0> autrijus: ping

[11:21] <scook0> I think r2808 broke make... "Could not find module `Data.Yaml.Syck'"

[11:53] <jabbot> pugs - 2812 - Initial Haddocks for Bind

[12:23] <jabbot> pugs - 2813 - Added a nice welcome screen to the live 

[12:24] <Corion> (build is broken for me too, even after a wiped src/ )

[12:25] <Corion> r2813, that is

[12:33] <Corion> Yo broquaint !

[12:43] <jabbot> pugs - 2814 - Small optical fixes to mklivecd.pl.

[12:44] <Corion> "mklivecd.pl" ? Do we now have PugsOS, based on HaskellOS ? :)

[12:45] <Corion> Indeed. Curiouser and curiouser

[12:47] <nothingmuch> http://www.cse.ogi.edu/~hallgren/House/

[12:49] <Corion> nothingmuch: This seems to call for an emergency port of the Perl Power Tools, so we get an unixlike environment ;)

[12:50] <nothingmuch> to perl 6 or to haskell?

[12:50] <Corion> nothingmuch: I would prefer Perl6 ;)

[12:50] <nothingmuch> heh

[12:50] <Corion> nothingmuch: It would be larger than Busybox, but ;)

[12:51] <Corion> (it wouldn't be GPL-encumbered either, and doesn't need static linking, or other weird tricks)

[12:51] <Corion> nothingmuch: The PPT isn't really complete... But I believe it's got a working tar, and with LWP::Simple, we could fake a half-working wget ;)

[12:52] <Corion> ... so all we'd need is make. And, maybe, a shell.

[12:52] <nothingmuch> well, you're free to start ;-)

[12:52] * nothingmuch is too busy to give pugs any real time

[12:53] <Corion> nothingmuch: Heh. Well, I think I won't. At least, not today, as I've moved a piano around, and have to party the evening. And in the meantime, fetch some groceries, and stuff. Too bad ;) Oh. And I have to work on the DB/model for my MUD/system-interface-database (thus combining $play and $work)

[12:54] <nothingmuch> well, have fun

[12:54] <nothingmuch> i have to go teach pascal

[12:54] <nothingmuch> *whine*

[12:55] <Corion> nothingmuch: Ah, Pascal isn't that bad IMO - and I programmed in it for ten years or so ...

[12:56] <nothingmuch> i hate it... never got any benefit from it

[12:56] <nothingmuch> all it did is lower my scores on my tests

[12:56] <nothingmuch> (counted arrays from 0 instead of 1 for example)

[12:56] <nothingmuch> and now it's making it difficult for me to teach

[12:57] <nothingmuch> =P

[13:00] <Corion> Ah, well - Pascal has the nice feature of letting you define your index types for arrays. type tWheel = (whlLeftFront,whlLeftBack,whlRightFront,whlRightBack); var Tires : Array[ tWheel ] of tTire;

[13:01] <Corion> (which made sure you couldn't use Just any integer...)

[13:01] <Corion> But I'm sure you'll manage to transfer your enthusiasm to your pupils :)

[13:01] <nothingmuch> in a 1st year intro to pascal you don't write such things

[13:01] <nothingmuch> heck, I don't even know it

[13:01] <nothingmuch> i'm teaching programming

[13:01] <nothingmuch> not pascal

[13:02] <nothingmuch> but I have to use pascal to teach programming, and it's slowing me and her down

[13:23] <jabbot> pugs - 2815 - Reduced the default initrd size.

[13:26] *** Corion_ is now known as Corion

[13:40] <autrijus> hm

[13:40] <autrijus> is build still broken for you guys?

[13:41] <Corion> autrijus: Yep, but will recheck

[13:41] <Corion> yep

[13:41] <Corion> r2815

[13:41] <Corion> Could not find module `Data.Yaml.Syck':

[13:42] <nothingmuch> seems like it's building for me

[13:42] <Corion> nothingmuch: What did you do? Should I wipe src/ again, to be on the safe side?

[13:42] * Corion nukes src/ from orbit

[13:42] <nothingmuch> i dunno

[13:42] <nothingmuch> just the smoke loop

[13:42] <nothingmuch> the last build is 3 hours old

[13:42] <autrijus> fixed

[13:43] <Corion> Hmmm. There is src/Data/Yaml/Syck.hsc - maybe my GHC doesn't like .hsc and wants .hs ?

[13:43] <autrijus> r2816. sorries.

[13:43] <autrijus> Corion: right, the .hs needs to be in @srcfiles

[13:43] <Corion> Aaah.

[13:43] <autrijus> jhorwitz hard coded it for Parrot.hsc

[13:43] <autrijus> which is bad

[13:43] <autrijus> so I fixed it generally

[13:43] <Corion> Build in progress now

[13:43] <autrijus> cool

[13:43] <jabbot> pugs - 2816 - * fix build by explicitly include hsc in

[13:44] <Corion> My arms hurt. I shouldn't help people when moving. Especially when pianos are involved. Or even a single piano.

[13:44] <autrijus> aww.

[13:44] * autrijus , meanwhile, is studying Ruby's internals

[13:44] <Corion> autrijus: Well, better the arms hurt from lifting than from RSI :)

[13:45] <autrijus> they got lots of things right

[13:45] <Corion> autrijus: You are a mad mad person. Rubys internals are ugly.

[13:45] <nothingmuch> ciao!

[13:45] <autrijus> uh. compared to perl5...

[13:45] <Corion> I thought the parser and evaluator were a tightly intertwined mess?

[13:45] <autrijus> is perl5 not like that? :)

[13:46] <Corion> autrijus: Yes, but nobody looks at the Perl5 internals for fun, right? Well, I know one person, Yves Orton, who looks at the RE engine for fun, but otherwise ...

[13:46] <autrijus> sadly I do, too

[13:46] <autrijus> <- responsible for many Tolkien poetry comments there, too

[13:46] <scook0> autrijus: build is fixed for me now -- cheers!

[13:46] <Corion> Oh - btw, he did some cool Trie optimization for Perl5 - is there any chance of Just moving these patches over to PCRE, or are Perl5 and PCRE totally different RE engines?

[13:47] <autrijus> complete different

[13:47] <autrijus> scook0: thanks and sorry

[13:47] <Corion> autrijus: Too bad ... He's now working on even better enhancements to the Perl5 engine... Is the long-term plan to keep PCRE, or will we reimplement P5 REs as P6 rules?

[13:47] <Corion> "we" -- heh

[13:49] <autrijus> Corion: I think keep pcre up until p6rules can emulate p5

[13:50] <scook0> autrijus: I was planning on picking your brain, but I think I'll get some sleep instead

[13:50] <Corion> autrijus: Yeah - that is, "ditch as soon as possible, but no sooner" ;)

[13:50] <autrijus> pcre is lightweight and fast... the only thing it can't do is (?{})

[13:50] <autrijus> scook0: go sleep then :)

[13:50] <Juerd> autrijus: And (??{}) ;)

[13:50] <scook0> see you later

[13:53] <jabbot> pugs - 2817 - More Haddocks for Bind

[13:54] <autrijus> nothingmuch: any chance of adding a "make haddock" run to make smoke run?

[13:55] <autrijus> and put the docs/haddock/* somewhere on the web

[13:55] <autrijus> that way I can point people there easily

[13:55] <Juerd> Is there a short guide that explains how to get parrot and pugs to know eachother?

[13:55] <autrijus> Juerd: sure. it goes like this

[13:55] <autrijus> export PUGS_EMBED=parrot

[13:55] <autrijus> cd pugs

[13:55] <autrijus> perl Makefile.PL

[13:55] <autrijus> make

[13:55] <autrijus> ./pugs -e 'eval_parrot("print 123")'

[13:55] <Juerd> Where does it get parrot from, then?

[13:56] <autrijus> Juerd: it gets it from ../parrot/

[13:56] <Juerd> Ah, thanks

[13:56] <autrijus> if not there, then you need to set PARROT_PATH but Makefile.PL will tell you that

[13:56] <autrijus> bbiab

[14:01] * nothingmuch pops in for a second, and notices highlight word...

[14:01] <nothingmuch> autrijus: i'll look at it

[14:06] <autrijus> thanks

[14:07] <nothingmuch> i was planning on doing that, but it wasn't ready yet

[14:07] <nothingmuch> at the time

[14:07] * nothingmuch needs a vacation

[14:09] <nothingmuch> haddock didn't compile out of the box, i'll look at it later

[14:09] <nothingmuch> now I have to go again

[14:10] <Corion> r2816 - http://datenzoo.de/pugs/win2k.html - 4764 ok, 61 failed, 899 todo

[14:19] <gaal> th build is still broken for me.

[14:19] <autrijus> rerun Makefile.PL?

[14:19] <gaal> but i did convert from fat32 to ntfs recently, maybe i have some weird permissions problem

[14:19] <gaal> autrijus, did, of course.

[14:20] <autrijus> what was the error?

[14:20] <pasteling> "gaal" at 192.115.25.249 pasted "cygwin build error" (5 lines, 265B) at http://sial.org/pbot/9985

[14:21] <cognominal> do ghc, parrot and pugs withstand gcc4.0?

[14:21] *** sbkhh is now known as Odin-

[14:21] <autrijus> cognominal: no idea

[14:22] <cognominal> I got gcc 4.0 by default on madnriva cooker

[14:22] <autrijus> gaal: what happens when you run that by hand?

[14:22] <autrijus> cognominal: cool, then you can try

[14:22] <gaal> the same.

[14:22] <gaal> strace doesn't work i'm afraid.

[14:22] <autrijus> gaal: -I src/syck instead of -Isrc?

[14:23] <autrijus> drop the -o?

[14:23] <autrijus> just /c/apps/ghc/ghc-6.4/bin/hsc2hs  -Isrc/syck  src/Pugs/Embed/Parrot.hsc

[14:23] <gaal> the last suggestion works.

[14:24] <autrijus> I attempted a fix. try r2818

[14:25] <gaal> (re co'ing to make sure it's clean)

[14:25] <gaal> on unix shells, does * not glob hidden files? i don't understand how rm -rf * works otherwise.

[14:26] <gaal> autrijus, your fix works. thanks!

[14:26] <autrijus> np

[14:26] <autrijus> right, * does not glob files beginning with dot.

[14:27] <gaal> is that the case in newish p5 File::Glob::glob as well?

[14:27] <autrijus> yes.

[14:27] * gaal makes a mental note to readdir the next time

[14:28] <autrijus> you can glob for .* *

[14:30] <gaal> good point, but now i'm beginning to wonder if maybe this breaks on huge directories?

[14:30] <autrijus> probably not.

[14:30] <autrijus> not under File::Glob, at least

[14:32] <gaal> wow, the difference between build times for optimized and non- makes is huge.

[14:33] <gaal> hey, and someobedy fixed 'make smoke' not to relink needlessly! somebody++

[14:33] <jabbot> pugs - 2818 - * fix hsc2hs for cygwin

[14:33] <jabbot> pugs - 2819 - Added a really small logbot.

[14:37] <autrijus> ours is a project full of somebodies :)

[14:38] <gaal> however, the yaml harness now overeagerly looks for test output in concurrency mode. :)

[14:43] <jabbot> pugs - 2820 - * Dropped "add_command_handler" and "add

[14:45] <gaal> http://forum2.org/gaal/pugs/smoke-cygwin.html r2818 1unexok

[14:49] <Juerd> gaal: That's your chance to be somebody ;)

[14:50] <gaal> i'm looking into the concurrency issue (which doesn't happen when -j is specified on the command line)

[14:58] <drbean> I can't sync a remote svk repos on which I did a delete and mkdir

[14:58] <drbean> sorry. Wrong channel

[15:05] <gaal> okay, this is rather odd.

[15:06] <gaal> the problem happens ony in run-smoke.pl, not vanilla yaml-harness.pl.

[15:06] <gaal> and then, only when you run the smoke with the PUGS_SMOKE_UPLOAD env option.

[15:07] <gaal> it looks like when you do that with concurrency on, the call to system that runs the harness finishes before all tests are gathered.

[15:07] <gaal> impossible, i know.

[15:08] <gaal> but like i said, when PUGS_SMOKE_OPTION is not set, this does not happen.

[15:09] <gaal> so what the user sees is that testgraph is started before the last chunk of tests completes; testgraph naturally fails.

[15:10] <gaal> talk about voodoo fork emulation :)

[15:10] <gaal> could someone with SMP and a real OS please check to see whether this happens?

[15:11] <misc_> test what ?

[15:11] <gaal> env PUGS_TESTS_CONCURRENT=3 PUGS_SMOKE_UPLOAD='echo 23412341324' make smoke

[15:11] <misc_> gaal: from svn snapshot ?

[15:11] <gaal> and see if you end up with a 'smoke.html'.

[15:11] <gaal> yes.

[15:12] <misc_> mhh, ok, i just need to grab one :)

[15:12] <gaal> thanks

[15:14] <gaal> (you don't really need SMP, it just makes things faster. smoke on my linux box with make unoptimized takes 24 minutes):

[15:15] <misc_> mhh, too bad, i have smp, i tought it was related to some concurency issue

[15:15] <gaal> has anyone used colinux here? i wonder if it's worth the trouble to set up properly.

[15:16] <gaal> misc_, it is, but not so tightly that you really need more than one cpu.

[15:26] <misc_> gaal: some cpan modules are missing 

[15:27] <gaal> cpan Test::TAP::HTMLMatrix and allow it to fetch deps please

[15:27] <misc_> yes, i am on it :)

[15:29] <Limbic_Region> stevan ping

[15:29] <Limbic_Region> salutations all

[15:30] <misc_> gaal: make test doesn't work

[15:31] <gaal> try make smoke like in the line above

[15:31] <gaal> wait, waht platform are you on?

[15:31] <misc_> gaal: linux, mdk cooker

[15:31] <misc_> 5.8.6

[15:31] <misc_> ( perl version )

[15:32] <gaal> interesting, wht doesn't make test work, what does it say?

[15:32] <misc_> t/uri...............ok 2/12Can't locate object method "new" via package "Test::TAP::Model::File::Visual" at t/uri.t line 29.

[15:32] <gaal> oh, T:T:M's make test :)

[15:33] <gaal> T:T:Htm really

[15:33] <gaal> looking.

[15:33] <misc_> oh yes, sorry , i forget to precise

[15:35] <Shillo> Hullo, all. :)

[15:37] <stevan> Limbic_Region: pog

[15:37] <stevan> pong

[15:39] <Limbic_Region> pog

[15:39] <Limbic_Region> hmmm

[15:39] <stevan> Limbic_Region: I have not had time to investigate the hash issue sorry

[15:39] <Limbic_Region> no worries

[15:39] <Limbic_Region> are you using svn or svk?

[15:40] <stevan> svn

[15:40] <gaal> misc_, this worksforme but i am investigating. can you force install in the meantime, just so we can double check the pugs bugs?

[15:40] <gaal> pugs bug that is.

[15:40] <misc_> gaal: ok

[15:40] <Limbic_Region> hmmm

[15:40] <Limbic_Region> I am wondering why svk log isn't working correctly

[15:40] <Limbic_Region> it tells me log is too big - starting from revision 5

[15:41] <Limbic_Region> and it only lists a couple of revisions

[15:41] * Limbic_Region tries to remember who else is using svk

[15:41] <stevan> Limbic_Region: maybe try limiting the revisions?

[15:41] <Limbic_Region> nothing I tried worked

[15:41] <Limbic_Region> svk help log

[15:41] <Limbic_Region> -l

[15:41] <Limbic_Region> -r

[15:41] <Limbic_Region> etc

[15:42] <gaal> misc_, did the cpan run install Test::TAP::Model for you successfully prior to the error you saw?

[15:43] <jabbot> pugs - 2821 - * Automated nick permuting if chosen nic

[15:43] <jabbot> pugs - 2822 - Updated ext/Algorithm-TokenBucket/Change

[15:43] <jabbot> pugs - 2823 - * Updated svn:ignores in src/.

[15:44] <misc_> gaal: yes, i think, i didn't see anything suspicious

[15:45] <gaal> because ->new comes from Test::TAP::Model::File, which you oughta have had installed.

[15:46] <gaal> what does this say?   perl -MTest::TAP::Model::File -e1

[15:47] <misc_> cannot locate the module

[15:48] <misc_> however, i used install as simple user, maybe i am missing something

[15:48] <gaal> i think you are missing superuser privs :)

[15:49] <gaal> ....and cpan is missing a peek at META.yml, which does require T:T:M :(

[15:49] <gaal> (your cpan shell that is)

[15:50] <misc_> should'nt it also work as simple user ?

[15:50] <gaal> brb

[15:50] <gaal> depending on where your perl looks for modules.

[15:51] <Khisanth> you can add some paths to PERL5LIB

[15:58] <gaal> b

[16:03] <stevan> hmmm, an odd bug maybe

[16:03] <stevan> pugs -e 'my @a = 1, 2, 3; say isa(@a, @a);'

[16:03] <stevan> it returns undef

[16:03] <stevan> shouldn't that fail?

[16:04] <stevan> and this:

[16:04] <stevan> pugs -e 'my @a = 1, 2, 3; say isa(@a, ("Array" | "List"));'

[16:04] <stevan> returns 'any(1)'

[16:05] <Limbic_Region> right - which is something I don't like very much

[16:06] <Limbic_Region> i.e. - boolean true false but not "what matched"

[16:06] <stevan> Limbic_Region: but that isnt even a boolean

[16:06] <stevan> it is a junction

[16:06] <stevan> (which matches any true boolean)

[16:06] <stevan> which I suppose is acceptable, but I would expect a true boolean

[16:06] <Limbic_Region> hmmm

[16:07] <Limbic_Region> first one not sure

[16:07] <Limbic_Region> second one - depends on if isa() is specced fully yet

[16:08] <stevan> Limbic_Region: I am consulting the bible on it right now

[16:08] * stevan starts mumbling in latin and dips some unleavened bread into a cup of grape juice

[16:08] <misc_> gaal: no, i see another error : Argument ">= 0.03" isn't numeric in numeric eq (==) at /usr/lib/perl5/5.8.6/CPAN.pm line 4623.

[16:09] <misc_> gaal: i have foolowed the faqq of CPAN.pm and perl module are installed in ~/myperl, PERL5LIB is correct too

[16:10] <stevan> Limbic_Region: it seems (if you look at the Introspection section of S12), that .isa() should actually do many more things that it currently does. 

[16:10] <stevan> However, before I go off an write tests, I am going to see if I cannot find more details on @arr.isa() 

[16:10] <misc_> gaal: in fact, it seems that Test::TAP::Model doesn't install, with ; t/comprehensive....ok 22/113Operation `eq': no method found,   

[16:12] <Limbic_Region> stevan - I lack the motivation to do anything ATM

[16:12] <Limbic_Region> so "you go"

[16:12] <stevan> Limbic_Region: :) I will (at least until the coffee wears off)

[16:20] <stevan> Juerd: ping

[16:22] <Limbic_Region> Does this behavior make sense to anyone?

[16:22] <Limbic_Region> my %hash;  %hash<foo> = hash {}; for values %hash { say }

[16:23] <Limbic_Region> or even better

[16:23] <Limbic_Region> my %hash; %hash<foo> = hash {}; %hash<foo><bar> = 42; for values %hash { say }

[16:25] <stevan> Limbic_Region: it makes sense, but doesnt seem to work right :)

[16:26] <stevan> oddly enough (not really that odd, it's just auto-vivification) this work: pugs -e 'my %hash; %hash<foo>; %hash<foo><bar> = 42; for values %hash { say }'

[16:26] <stevan> as does this: pugs -e 'my %hash; %hash<foo>; %hash<foo> = { bar => 42 }; for values %hash { say }'

[16:27] <Limbic_Region> stevan - I don't think so

[16:27] <stevan> and this too

[16:27] <stevan> pugs -e 'my %hash; %hash<foo> = hash; %hash<foo><bar> = 42; for values %hash { say }'

[16:27] <Limbic_Region> consider

[16:27] <stevan> I think the {} is getting interpreted as a sub

[16:27] <Limbic_Region> my %hash;  %hash<foo> //= hash {}; print ref %hash<foo>;

[16:28] <stevan> pugs -e 'my %hash;  %hash<foo> //= hash {}; say ref %hash<foo>; say %hash<foo>'

[16:28] <stevan> Array

[16:28] <stevan> <SubBlock(<anon>)>

[16:28] <stevan> it looks like the "hash" does nothing

[16:29] <Limbic_Region> which it is supposed to

[16:29] <stevan> and the {} is treated as a block

[16:29] <Limbic_Region> right

[16:29] <Limbic_Region> so WTF Array?

[16:29] <Limbic_Region> I already have submitted a test that partially exposes this

[16:29] <stevan> what do you see as the bug? in "hash"?

[16:31] <Limbic_Region> at least in hash

[16:31] <Limbic_Region> but I still can't see why ref sees an empty anonymous sub as an array either

[16:31] <Limbic_Region> which it doesn't in other cases

[16:32] <Limbic_Region> so I don't know where the Array is coming from

[16:32] <Limbic_Region> and here is something that is really weird

[16:32] <Limbic_Region> pugs -e "my $foo = hash {}; say ref $foo; # Hash"

[16:32] <stevan> pugs -e 'my %hash;  %hash<foo> //= {}; say ref %hash<foo>; say %hash<foo>'

[16:32] <stevan> this prints # Block 

[16:33] <stevan> it seems that 'hash {}' is interpreted as 2 elements

[16:33] <stevan> does "hash" return anything?

[16:33] <Limbic_Region> ahhhhh

[16:33] <Limbic_Region> interesting

[16:33] <Limbic_Region> this does the right thing pugs -e "my $foo = hash {}; say ref $foo; # Hash"

[16:33] <stevan> pugs -e 'say ref hash' # prints Hash

[16:34] <Limbic_Region> well, my brain just isn't working ATM 

[16:34] * Limbic_Region wanders off to listen to some classic rock and wishes everyone happy hacking

[16:35] <stevan> :)

[16:51] <Limbic_Region> stevan - WRT %hash<foo> = hash {}; # being seen as two items, you are correct though I think it is incorrect behavior

[16:51] <Limbic_Region> pugs -e "my %hash; %hash<foo> = hash({}); say ref %hash<foo>;"

[16:51] <Limbic_Region> Hash

[16:55] <stevan> Limbic_Region: ah hah

[16:55] <stevan> so it looks as if the parser is getting confused

[16:56] <Limbic_Region> yeah - so my test does indeed expose a bug - just not the one I thought

[16:56] <Limbic_Region> and I think that explains the other behavior I couldn't track down because it disapeared when I wrote a minimal test case

[16:57] <Limbic_Region> so with that - there is only 1 other thing I think is still wrong

[16:57] <Limbic_Region> hash refs as values to keys should modify the hash they reference when properly dereferenced

[16:58] <stevan> Limbic_Region: I am still not sure about the details of auto-de-ref-ing myself

[16:58] <Limbic_Region> well - I am not sure I am doing it right

[16:58] <Limbic_Region> consider

[16:58] <stevan> Limbic_Region: re: the hash {} vs. hash({}) test case, please label it :todo<parsefail>

[16:58] <Limbic_Region> pugs -e "my %foo; my %bar=('key'=>\%foo); say ref %bar<key>;"

[16:59] <Limbic_Region> that prints Scalar

[16:59] <Limbic_Region> pugs -e "my %foo; my $bar= \%foo; say ref $bar;"

[16:59] <Limbic_Region> that says Hash

[17:00] <stevan> pugs -e "my %foo = ('baz' => 42); my %bar=('key'=> %foo); say ref %bar<key>;"

[17:00] <stevan> print 'Pair'

[17:00] <stevan> and so does this

[17:00] <stevan> pugs -e "my %foo = ('baz' => 42, 'baz' => 2); my %bar=('key'=> %foo); say ref %bar<key>;"

[17:00] <Limbic_Region> *shrug* dunno if that's wrong or right but isn't what I am after

[17:01] <stevan> same issue when I put the \%foo in there as well

[17:01] <stevan> I think the Hash and Pair types are still not totally finished

[17:01] <Limbic_Region> ok - so where do you think the hash parsefail test should go?

[17:02] <Limbic_Region> and why label it as :todo<parsefail> ?

[17:02] <stevan> beacuse that is what it is :)

[17:02] <stevan> at least I am pretty sure it is

[17:02] <Limbic_Region> right - but why not just leaving it as failing

[17:02] <Limbic_Region> since it doesn't fail to parse

[17:02] <Limbic_Region> it just fails to parse correctly

[17:03] <stevan> Limbic_Region: well actually if you put it in t/pugsbugs I suppose you can leave it failing

[17:03] <stevan> I guess I am just in the habit of labeling things TODO now

[17:03] <Limbic_Region> ok - so the io test that is failing should go into pugsbugs too?

[17:04] <Limbic_Region> since I intentionally left that as failing too

[17:04] <stevan> Limbic_Region: well this is a good question

[17:04] <stevan> I think behavior which is truely a bug, should go in an isolated pugsbugs test

[17:05] <stevan> and maybe after it is fixed, can be moved into a more approriate location

[17:05] <Limbic_Region> ok 

[17:05] <Limbic_Region> will move 2 tests to pugsbugs and add 1 more

[17:05] <stevan> ok

[17:06] <stevan> alright, lunch time for me :)

[17:06] <stevan> &

[17:13] <robkinyon> Any lambda'ers around?

[17:13] <jabbot> pugs - 2824 - Added a small "Monads in Perl 6" example

[17:13] <jabbot> pugs - 2825 - [BUG] Found another bug concerning map a

[17:15] * robkinyon peers about

[17:39] <Limbic_Region> grrr - today isn't working out

[17:40] <Limbic_Region> perlbot nopaste

[17:40] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[17:43] <elmex> wohooo

[17:43] <elmex> perlsex

[17:46] <pasteling> "Limbic_Region" at 69.250.48.119 pasted "svk is blowing up on me when attempting to check in - would appreciate someone making the following test changes" (226 lines, 5.7K) at http://sial.org/pbot/9993

[17:47] <Limbic_Region> If someone could make those changes for me I would be really appreciative 

[17:47] <Limbic_Region> in the meantime - I am going to kill this computer

[17:47] <Limbic_Region> TTFN

[17:50] <robkinyon> any lambda'ers around?

[17:51] <sorje> robkinyon, what do you need lambda'ers for? ;-)

[17:51] <robkinyon> i have a fix for Pugs on Cygwin, but it requires changes to Prim.hs and I don't know haskell

[17:51] <robkinyon> I'm fixing pugscc to work on cygwin, but that's Perl

[17:53] * robkinyon sighs

[18:00] <elmex> does the parrot backend work again? ;-) *G*

[18:13] <jabbot> pugs - 2826 - Applied Limbic_Region's test fixes with 

[18:43] <jabbot> pugs - 2827 - * C-based PGE is now obsolete.

[18:53] <jabbot> pugs - 2828 - * remove unused variable in sieve.p6.

[18:54] <Limbic_Region> iblech ping

[19:06] <Limbic_Region> wonder why iblech thought the io_finalize tests would create but not delete the file

[19:06] * Limbic_Region also wonders why the t/pugsbugs/parse_hash_ref.t test didn't get checked in

[19:07] <Limbic_Region> wonder if my %h1; my %h2; %h2<key> = \%h1; # isn't a bug

[19:07] <Limbic_Region> but

[19:07] <Limbic_Region> my %h1; my %h2 = ( 'key' => \%h1 ); # is a bug

[19:08] <Limbic_Region> since they do different things

[19:12] <revdiablo> what's the bug?

[19:13] <jabbot> pugs - 2829 - * if it's pod... call it pod. :)

[19:13] <jabbot> pugs - 2830 - Changed t/pugsbugs/io_finalize tests bac

[19:14] <wolverian> I thought just assigning it without the explicit \ is enough in perl6.

[19:15] <Limbic_Region> revdiablo - in the latter case - it ref %h2<key> says Scalar

[19:15] <Limbic_Region> in the former - it says Hash

[19:15] <Limbic_Region> IOW - assigning a reference to a hash as a value to a hash key when creating the hash breaks

[19:15] <Limbic_Region> doing it after the fact works

[19:16] <Limbic_Region> I had a pugsbugs test for it - but iblech didn't check it in (my svk kept blowing up until I hit it with a LART)

[19:16] <Limbic_Region> so was wondering if it wasn't a bug afterall but just a mistake in my reasoning

[19:17] <Limbic_Region> wolverian - regardless, I think there is a bug

[19:17] <Limbic_Region> since

[19:17] <Limbic_Region> my %h1; my $h_ref = \%h1; my %h2 = ('key' => $h_ref); # also says Scalar

[19:17] <Limbic_Region> but

[19:18] <Limbic_Region> ref $h_ref; # says Hash

[19:18] <pasteling> "revdiablo" at 66.218.36.163 pasted "Limbic_Region -- this is what I see from Pugs" (4 lines, 165B) at http://sial.org/pbot/9995

[19:18] <revdiablo> I get Pair, not Scalar

[19:18] <revdiablo> heh

[19:19] <revdiablo> maybe something has changed, my pugs is more than 24 hours old

[19:19] <Limbic_Region> let me test again here locally

[19:21] <Limbic_Region> revdiablo - my test is a bit different then yours

[19:21] <Limbic_Region> let me see what I get when I run yours exactly

[19:22] *** lightstep is now known as for

[19:22] *** for is now known as lightstep

[19:22] <Limbic_Region> revdiablo - when creating %h1 - try just my %h1;

[19:23] <revdiablo> ah yeah, Scalar

[19:24] <robkinyon> any lambda'ers around?

[19:24] <Limbic_Region> revdiablo - further more - even with your version that says Pair - you still can't modify %h1 by dereferencing %h2

[19:24] <Limbic_Region> TIAS

[19:26] <revdiablo> *nod* there's definitely something weird going on

[19:27] <Limbic_Region> but if you don't try and do it when defining the hash (after the fact) - it works as expected

[19:28] <revdiablo> if you do: my %h1; my %h2; my %h3 = ("h1" => \%h1, "h2" => \%h2); say ref %h3<h1>;

[19:28] <revdiablo> it says List, and still doesn't work

[19:28] <revdiablo> heh

[19:29] <revdiablo> maybe more stuff to add to your tests

[19:29] <Limbic_Region> salutations chromatic

[19:29] <chromatic> Howdy.

[19:29] <chromatic> Who wants P6 Test::Builder?

[19:29] <obra> hey chromatic

[19:29] <chromatic> Hello.

[19:29] <Limbic_Region> revdiablo - I assume that when the underlying problem is fixed that the weird results from ref() will disapear as well

[19:29] <obra> chromatic: do you have commit bits?

[19:29] <Limbic_Region> but if not - please add more tests

[19:29] <chromatic> That's kind of a personal question.

[19:29] <obra> :P

[19:30] <revdiablo> Limbic_Region: yeah, probably be something good to test for sanity later

[19:30] <Limbic_Region> grrrr - svk is back to blowing up again

[19:30] <Limbic_Region> revdiablo - mind adding it for me?

[19:30] <revdiablo> Limbic_Region: you mean committing, or actually writing the tests?

[19:30] <pasteling> "Limbic_Region" at 69.250.48.119 pasted "t/pugsbugs/parse_hash_ref.t" (34 lines, 859B) at http://sial.org/pbot/9996

[19:31] <Limbic_Region> committing 

[19:31] <Limbic_Region> I already wrote the tests

[19:31] <revdiablo> ok, no problem

[19:31] <Limbic_Region> feel free to add the weird ref() results too if you want

[19:31] <Limbic_Region> in fact, please do

[19:31] <Limbic_Region> chromatic - I should have the revisions you asked for by tomorrow night - I am supposed to be taking a day off

[19:31] <Limbic_Region> you can see how well that is working :-)

[19:32] <chromatic> I'm taking tomorrow off too, so don't worry.

[19:33] <Limbic_Region> chromatic - mind if I /msg you an idea for the aricle

[19:34] <chromatic> Go ahead.

[19:36] * obra hands chromatic commit bits

[19:36] <revdiablo> Limbic_Region: I'm going to wrap each chunk in {} to avoid having to make new variables every time

[19:37] <Limbic_Region> revdiablo - be my guest

[19:43] <revdiablo> ok, the results are coming out different with %h3<h1> vs %h3<'h1'> -- are those supposed to be different?

[19:44] <Limbic_Region> revdiablo - yes - <> is autoquoting

[19:44] <Limbic_Region> {'h1'} = <h1> != <'h1'>

[19:45] <revdiablo> oh, so %h3<'h1'> is %h3{"'h1'"}?

[19:45] <Limbic_Region> I think so

[19:45] * Limbic_Region is really really tired right now

[19:45] <chromatic> Now where should I check in these modules?

[19:46] <Limbic_Region> chromatic probably in ext/ 

[19:46] <revdiablo> afaik, ext/ for modules that work

[19:46] <Limbic_Region> see the other examples

[19:47] <chromatic> Dunno if they ~work~ work.

[19:47] <obra> the beauty of svn is that if they're not in the right place they can be moved with no penalty

[19:48] <chromatic> True.

[19:48] <obra> I think ext is the right place for now

[19:49] <obra> And if not, I'm sure someone who knows better will fix it.

[19:52] <chromatic> Alright, there you are.

[19:52] <revdiablo> Limbic_Region: ok, checked in

[19:53] <jabbot> pugs - 2831 - checked in parse_hash_ref.t on behalf of

[19:54] <chromatic> Hm, should I have checked in to SVN?  My # was 2885.

[19:55] <Limbic_Region> chromatic - after "svn add <file>"

[19:55] <Limbic_Region> "svk ci -m 'message'"

[19:55] <Limbic_Region> at least that's all I do

[19:55] <sproingie> hm, does {} no longer autoquote then?

[19:55] <chromatic> I did svn commit.

[19:55] <revdiablo> chromatic: which repo did you commit to?

[19:55] <chromatic> I don't think I have svk on ghostwheel.

[19:55] <chromatic> Authentication realm: <http://svn.perl.org:80> perl.org

[19:55] <chromatic> Password for 'chromatic': 

[19:55] <Limbic_Region> sproingie - correct

[19:56] <revdiablo> I've been committing against http://svn.openfoundry.org/pugs

[19:56] <sproingie> Limbic_Region: bleh.  guess i'll be using <>

[19:56] <chromatic> I'll wait for obra to panic then.

[19:56] <chromatic> If he runs about, screams, and shouts, we'll figure something else out.

[19:56] <sproingie> Limbic_Region: actually i've always liked javascript's way of doing it:  hash.key

[19:57] <obra> Why am I supposed to panic?

[19:57] <chromatic> It's funny.

[19:57] <chromatic> I commited to the perl.org repository.  Is that groovy?

[19:57] <revdiablo> sproingie: but in Perl, you can have a hash that also has methods on it :)

[19:58] <revdiablo> or can you in Javascript too?

[19:58] <sproingie> revdiablo: then the method should override it

[19:58] <obra> oh. no. perl.org is a read-only mirror of the foundry mirror.

[19:59] <sproingie> hashes have some builtin methods in javascript.  they can always have functions as members

[19:59] <obra> though autrijus' svk is iirc set up to merge nicely.

[19:59] <chromatic> It wasn't all that read-only when I tried.

[19:59] <chromatic> Do I need to reparent my svn repository?

[19:59] <sproingie> revdiablo: i suspect someone will come up with a behavior for perl6 hashes that makes them work the same way

[19:59] <sproingie> a module or something

[20:00] <obra> foundry is generally the canonical source for pugs development. it's automatically mirrored to svn.perl.org

[20:00] <chromatic> Alright.  How do I retarget?

[20:00] <obra> so if you'll be hacking on pugs, it's probably best to use the foundry repo.

[20:00] <revdiablo> sproingie: well, larry said something in p6l about opaque objects allowing method access via hash subscripts, but that's sort of the opposite of what you are asking for :)

[20:00] <obra> svk or svn?

[20:00] <chromatic> svn

[20:00] <obra> svn help switch

[20:08] <chromatic> Alright, now it's #2833.

[20:09] <Limbic_Region> thanks revdiablo

[20:11] <chromatic> Thanks, obra.

[20:11] <obra>  cool

[20:11] <obra> Welcome to the insanity, chromatic.

[20:11] <Limbic_Region> thanks chromatic for writing the module

[20:11] <chromatic> Thanks, but I already knew insanity.

[20:11] <chromatic> Multiple modules, actually.

[20:11] <revdiablo> Limbic_Region: no problem.

[20:12] <revdiablo> Limbic_Region: I wonder if accessing a shell would violate your work's policies?

[20:12] <Limbic_Region> revdiablo - I can no longer ssh out

[20:12] <revdiablo> Limbic_Region: aye, not even on a non-standard port?

[20:12] <Limbic_Region> in fact - everything but HTTP has been locked down and that now has stricter use policies

[20:13] <revdiablo> I used to ssh out on the https port :)

[20:13] <Limbic_Region> it really is for the best

[20:13] <Limbic_Region> revdiablo - everything http and https related needs to go through a proxy

[20:13] <obra>  Limbic_Region, where do yo uwork?

[20:13] <Limbic_Region> obra - secret government agency

[20:13] <obra> that was actually sort of what I figured

[20:13] <revdiablo> Limbic_Region: ah, nice.

[20:13] <Limbic_Region> revdiablo - which breaks any web site that doesn't use standard ports

[20:13] <obra> "Virginia or Maryland?"

[20:13] <Limbic_Region> Maryland

[20:14] <revdiablo> Limbic_Region: that's about the only way they can really lock it down, though

[20:14] <Limbic_Region> well - it isn't like I couldn't subvert it if I *really* wanted to

[20:14] <Limbic_Region> but it would be pretty hard to plead ignorance 

[20:15] <robkinyon> any lamda'ers around?

[20:15] * obra syncs svk to see if he can merge back chromatic's changes safely

[20:16] <clkao> *yawn*

[20:16] <Limbic_Region> rob - you don't use your typical alias on IRC?

[20:16] <Limbic_Region> salutations btw

[20:16] <robkinyon> dragonchild is 2 characters too long.

[20:17] <robkinyon> i'm thinking of having my PM alias switched, anyways.

[20:17] <robkinyon> on irc, it'd have to be drgnchld (or some such nonsense)

[20:17] <Limbic_Region> following the IRC RFC - impressive

[20:17] <Limbic_Region> not all networks follow the standard

[20:17] <Limbic_Region> freenode for instance

[20:17] <Limbic_Region> Limbic_Region works just fine here

[20:17] <robkinyon> no - the first 3 servers refused to display the last 2 chars. :-/

[20:18] <revdiablo> I don't think *any* networks follow the RFC to the letter

[20:18] <Limbic_Region> Efnet is by the book I believe

[20:18] <Limbic_Region> err WRT handle length

[20:19] <robkinyon> i'm not an IRC-fanatic. i only use it for specific channels, like #apprentice back in my magic days and #perl6 now

[20:19] * Limbic_Region has been using IRC for about a year now and it really has just been #perl #parrot and #perl6

[20:19] <Limbic_Region> of course, I don't hang out in #parrot anymore

[20:20] * revdiablo remembers Limbic_Region's first forays onto IRC

[20:20] * robkinyon has no time for such frivolities as IRC

[20:20] <robkinyon> at least, that's what my wife says

[20:20] <revdiablo> she's right

[20:20] <revdiablo> :)

[20:20] * Limbic_Region hangs his head in shame

[20:20] <robkinyon> i seriously just need a lamda'er for like 2 minutes to explain how to do this one fix

[20:21] * Limbic_Region won't suggest #haskell

[20:21] <obra> chromatic: test::builder is now merged back to the pugs repo as 2885

[20:22] <obra> er

[20:22] <obra> 2834

[20:22] <chromatic> What was the conflict?

[20:23] <obra> There were no conflicts. I just read the wrong line out of the svk output ;)

[20:23] <chromatic> Hm, now we have doubles.

[20:23] <obra> doubles?

[20:23] <chromatic> I put mine in ext/Test/lib and you put yours in ext/Test/

[20:24] <obra> oh. I actually just did an svk sm from the perl6 repo.

[20:24] * obra didn't realize you did a double commit

[20:24] <chromatic> Yeah, I relocated the repository.

[20:24] <chromatic> Then I commited to the openfoundry one.

[20:24] * obra misunderstood. sorry.

[20:24] <chromatic> S'okay, it's partially my fault too.

[20:25] <obra> not at all a big deal

[20:25] <chromatic> Let's just edit history.

[20:25] <obra> ok. so should the Test::Builder stuff live in the Test distribution or in its own distribution?

[20:26] <chromatic> I have no particular preference.

[20:26] * obra nods

[20:26] <chromatic> When OO works enough for T::B to run, it might be nice to switch Test to use it as a backend.

[20:26] <obra> are any of the test crew about?

[20:26] * obra nods

[20:27] <obra> I suspect that since they're not currently integrated a separate Test-Builder in ext/ makes the most sense

[20:27] <chromatic> That's fine with me.

[20:27] <chromatic> That means revert what I commited and move Test/Builder... to ext/Test-Builder/lib ?

[20:28] <obra> I think so

[20:28] <chromatic> Which of us should do it? Only one should...

[20:28] <obra> yeah. it's your baby. if you're up for it, go for it

[20:28] <chromatic> Doing it.

[20:28] <obra> Cool

[20:34] <jabbot> pugs - 2832 - * some more formatting and fixes to hang

[20:34] <jabbot> pugs - 2833 - Added Perl 6 port of Test::Builder.

[20:34] <jabbot> pugs - 2834 -  r16123@hualien (orig r2885):  chromatic

[20:34] <jabbot> pugs - 2835 - Moved Test::Builder to its own distribut

[20:34] <jabbot> pugs - 2836 - * bless() takes an argument... I think

[20:34] <jabbot> pugs - 2837 - * it's lib/Test/Builder.pm, not lib/Buil

[20:53] <jabbot> pugs - 2838 - * adverbial block

[21:31] <Shillo> Hullo, folks!

[21:32] <shapr> bok Shillo 

[21:33] <Shillo> Ej. :)

[21:33] <Juerd> stevan: pong

[21:33] <shapr> Juerd: Hey, I quoted you in my blog. Dunno if you'll agree with what I said but I still quoted you.

[21:35] <Shillo> Chasing modules from: src/Main.hs

[21:36] <Shillo> Could not find module `Text.PGE':

[21:36] <Shillo> ^^^ Is this a known problem?

[21:36] * Shillo just tried to build the latest checkout.

[21:36] <lightstep> is it a clean build?

[21:36] <Juerd> shapr: URL?

[21:36] <stevan> Juerd: ping

[21:37] <Shillo> lightstep: Yeah

[21:37] <Shillo> lightstep: Well, I did make clean and retried when it failed the first time.

[21:37] <lightstep> then try rm -

[21:37] <Juerd> stevan: poing

[21:37] <stevan> Juerd: I had a p6l question, you being the resident expert I wanted to ask before taking to the list

[21:37] <stevan> but you werent around, so I sent it to the list :)

[21:38] <lightstep> that is, try deleting src and re-updating

[21:38] <Shillo> ghc-pkg: cannot find package plugins <-- this is the first complaint I get, from perl Makefile.PL

[21:38] <Juerd> stevan: The list has much more expertise than I do.

[21:38] <Shillo> But it doesn't seem to be an error

[21:38] <stevan> Juerd: but I was hoping you might be more immediate :)

[21:38] <Shillo> Hmm, don't think it's corrupted src, it's more likely I'm missing something.

[21:39] <lightstep> o

[21:39] <lightstep> i'll try

[21:39] <shapr> Juerd: http://www.scannedinavian.com/2005-05-03.html

[21:39] * Shillo tries re-checkout, though...

[21:40] <Juerd> shapr: Oh, that. That appeared in a Google Alerts message days ago :)

[21:41] <Shillo> Uh... what was the URL for the svn archive?

[21:41] <shapr> Hm, hadn't thought of using Google Alerts for that purpose. Interesting.

[21:42] <lightstep> Shillo, i seem to have the same problem

[21:42] <Shillo> lightstep: Now you tell me. :p

[21:42] <Shillo> :)

[21:43] <lightstep> well, the reason is obvious: somebody cleared src/Text/

[21:46] <Shillo> Heh. :)

[21:51] <Shillo> lightstep: You checked 'em back?

[21:52] <Shillo> I saw the file on my re-checkout.

[21:52] <lightstep> me? no, probably the offender did it herself

[21:52] <lightstep> i'm too slow tonight

[21:53] <Shillo> Oh.

[21:53] <lightstep> i was gonna fix it in 5~10 minutes, though

[21:53] * Shillo will svn history once it's done compiling.

[21:53] <Shillo> Pugs.AST takes forever.

[21:53] <lightstep> longer than Pugs.Parser ?

[21:54] <Shillo> Yes.

[21:54] <Shillo> Well, I didn't benchmark, but it felt longer.

[21:55] <Shillo> Built, this time.

[21:55] <lightstep> it does feel longer, but i never know if it's just psychological (on optimized build, though, AST definitely is much longer)

[21:58] <Shillo> The rev number increased from 2838 to 2885, though.

[21:59] <Shillo> I think it was just a big changeset landing and breaking stuff.

[22:00] * Shillo pictures LAND *CRRRUUUNCH* *CRASH* sounds...

[22:01] <lightstep> i see 2839 here

[22:01] <lightstep> which didn't fix src/Text/

[22:02] <Shillo> Hmm, did you use the mirror?

[22:02] <lightstep> don't think so. how do i check?

[22:02] <Shillo> Uh.

[22:02] <lightstep> i think i use the main repo

[22:03] <lightstep> also rt.openfoundry.org (the web ui) only sees 2839

[22:03] <jabbot> pugs - 2839 - more detailed tests for t/builtins/array

[22:03] <Shillo> grep url .svn/entries

[22:04] <lightstep>    url="http://svn.openfoundry.org/pugs"

[22:04] <Shillo> http://svn.perl.org/perl6/pugs/trunk <-- I switched to this one

[22:04] <Shillo> Oh, duh. I'm on the older version, then.

[22:05] * Shillo switches back...

[22:53] <jabbot> pugs - 2840 - adding tests, documentation and a Change

[22:55] <integral> should builds be failing with Text.PGE being not found?

[22:56] <PerlJam> What's Text.PGE and who's looking for it?

[22:56] <integral> it was the interface to the C PGE afaik,  and that's been removed.   It's used in Pugs.Internals

[22:57] * integral tries just removing it from Internals.hs

[23:05] <integral> hmm, well pugs now builds when I remove it from Pugs.Internals and one use of parseRule from Pugs.Eval.

[23:07] * integral wonders whether to commit

[23:08] <PerlJam> integral: if you're wondering then you should do it.

[23:08] <integral> *nod* it's just weird everything was so broken

[23:15] <revdiablo> fix the build? nah, don't commit that. :)

[23:15] * integral pokes jabbot

[23:16] <revdiablo> he only polls every 10 minutes, I think

[23:17] <integral> hmm, do we have shaped arrays?

[23:23] <jabbot> pugs - 2841 - Removing the last few traces of Text.PGE

[23:52] <Corion> r2841 - golf.t is broken, or rather the subprograms are - http://datenzoo.de/pugs/win2k.html

[23:53] <Corion> Hmm - actually, it's no more broken than ever, but it outputs more stuff to stderr at the moment. Oh well :)

[23:53] <Corion> Good night ! ;)

