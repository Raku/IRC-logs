[00:04] <dduncan> ok

[00:08] <audreyt> theorbtwo: in addition to that, if we are to reset environmental bindings based on the temporal constraint, we wouldn't be able to talk about ancient history (or even astronomy) with terms (re)defined in modern times...

[00:08] <theorbtwo> Hm, I see your point.

[00:10] <theorbtwo> Well, points.

[00:10] <audreyt> :)

[00:59] <dduncan> fyi, I'm now come to the time that I need 'trusts' to work, especially now that private attrs are actually private

[00:59] <dduncan> since there doesn't seem to be a test for trusts, I'll make one now

[00:59] <audreyt> good!

[01:00] <audreyt> stevan_: we need to figure out how to make "trusts" work in minilang

[01:00] <dduncan> would it be possible to implement trusts today?

[01:00] <dduncan> if not, then my perl 6 stuff won't run by christmas like I want, without hackery

[01:00] <audreyt> dduncan: I'll see your test first before deciding :)

[01:01] <dduncan> its very simple

[01:01] <dduncan> two classes

[01:01] <dduncan> class A declares $!foo, and no accessor method

[01:01] <dduncan> class B needs to see and/or modify $!foo on any A objects it has

[01:02] <dduncan> class A declares that it trusts class B

[01:02] <dduncan> so that should work

[01:02] <audreyt> ok

[01:03] <dduncan> and it needs to work for any other kind of private attr, like a @!bar or %!baz

[01:03] <audreyt> so the syntax would be

[01:04] <audreyt> $!a!foo = 5

[01:04] <audreyt> or something like that?

[01:04] <audreyt> or just $!a!foo

[01:04] <dduncan> the syntax would be like a class A object modifying another class A object

[01:04] <audreyt> I need to see the test :)

[01:04] <audreyt> nopaste it?

[01:04] <dduncan> eg, $other_obj!foo

[01:05] <dduncan> will do if server down

[01:05] <dduncan> should be written within a half hour

[01:11] <audreyt> my Class $obj .= new;

[01:11] <audreyt> hmm

[01:11] <audreyt> my Class $obj != new;

[01:11] <audreyt> # doesn't make sense

[01:11] <wolverian> ow, isn't that ambiguous?

[01:14] <audreyt> probably not... we can just rule out the != form and declare it to be  always infix

[01:14] <audreyt> infix unequals, that is

[01:14] <audreyt> pugs currently handles it that way anyway

[01:15] <audreyt> dduncan: I've kluged so it works.

[01:16] <audreyt> a proper fix awaits minilang integration

[01:16] <audreyt> dduncan: care to apply this patch locally?

[01:17] <audreyt> http://perlcabal.org/~autrijus/tmp/bangKlugeTrusts.diff

[01:19] <dduncan> give me a few minutes

[01:19] <dduncan> but before I apply the patch, I'll give you my test so that you can see that it works for you

[01:19] <dduncan> its almost done

[01:32] <stevan_> audreyt: ping

[01:33] <pasteling> "dduncan" at 24.108.164.7 pasted "first draft of t/oo/trusts.t" (46 lines, 878B) at http://sial.org/pbot/15091

[01:34] <audreyt> stevan_: pong

[01:34] <stevan_> audreyt: there is no concept of private in the metamodel currently

[01:34] <audreyt> dduncan: all tests pass here

[01:35] <dduncan> and they fail here without the patch ... will try with it

[01:35] <stevan_> I have been punting on this because it has been in a state of flux with @Larry 

[01:35] <audreyt> stevan_: I think it's now reasonably clear

[01:35] <audreyt> as per latest s12

[01:35] * stevan_ goes to take a look

[01:36] <stevan_> I have been out of the loop with p6l because of $work 

[01:36] <audreyt> nodnod

[01:36] <stevan_> where is the latest?

[01:36] <dduncan> fyi, I will expand trusts.t to use a third class C, which tries to do the same things B did, and should fail due to not being trusted ... to check that your patch doesn't open to everyone

[01:36] <stevan_> I found ti

[01:37] <audreyt> stevan_: the cpan bible is also updated

[01:37] <stevan_> http://svn.perl.org/perl6/doc/trunk/design/syn/S12.pod I would assume is the most up to date

[01:41] <stevan_> is openfoundry still down?

[01:42] <audreyt> yeah, but about to be up

[01:42] <stevan_> ok

[01:42] *** stevan_ is now known as stevan

[01:42] <audreyt> (reasonable guess, as it's 9:42am here)

[01:42] <audreyt> http://pause.cpan.org/incoming/Perl6-Bible-0.23.tar.gz

[01:42] <audreyt> just uploaded this

[01:44] <audreyt> brb

[01:44] <stevan> I think $Larry[0] is on crack

[01:44] <clkao> XD

[01:44] <stevan> you can't easily mix two object models

[01:44] <audreyt> I think it's blue sugar cubes

[01:44] <stevan> prototype and class based

[01:44] <stevan> :)

[01:45] <stevan> *sigh*

[01:45] <audreyt> I thought minilang is fairly proto based

[01:45] <audreyt> since we clone class's attrs

[01:45] <stevan> no, it is a classic class based approach ala CLOS/Smalltalk

[01:46] <stevan> prototype based means no classes,.. 

[01:46] <stevan> at all

[01:46] <stevan> see the MiniPrototype model in Perl6-MetaModel

[01:46] <audreyt> right

[01:46] <audreyt> but from what I gather on p6l, what's important is not the underlying calculus

[01:46] <stevan> its how the user can use it?

[01:46] <audreyt> yes

[01:47] <audreyt> "prototype" to $Larry is probably "eigenclass that does not inherit from class"

[01:47] <stevan> yeah

[01:47] <audreyt> which is fine in minilang

[01:48] <stevan> I still think he is eating too many blue sugar cubes :)

[01:48] <stevan> my biggest concern with the prototype thing

[01:48] <stevan> is that it is very difficult with prototype based models to do MI effectively

[01:48] <stevan> they are typically (at least in my experience) SI models

[01:49] <stevan> MI in prototypes tends to look too much like mix-in hell

[01:49] * stevan wrote a mix-in function in JS once,.. it was ... >>shudder<< horrible

[01:49] <audreyt> I think it's reasonable to think that if you want MI and @superclasses

[01:49] <audreyt> then you are using the class-based architecture starting with ::Class.

[01:49] <audreyt> I can't see much alternatives.

[01:49] <stevan> yes

[01:49] <stevan> I think you are right re: eigenclasses

[01:50] <stevan> you can mimic most of the useful parts of prototype models with that

[01:50] <audreyt> yup

[01:50] * stevan started with JS, so he has been bitten many times by prototype models

[01:50] <stevan> I am not as wide eyed as all the JSAN crew

[01:51] <audreyt> mm, right, one of which orks cow with you :)

[01:51] <stevan> :)

[01:51] <stevan> yup

[01:51] <stevan> however, I do think we can easily create a prototype based model in the mini-lang following the MiniPrototype model

[01:52] <stevan> I stole it from Oleg anyway,.. the scheme version was pure :)

[01:52] <stevan> in fact, it would probably be best built on top of the current metamodel

[01:53] <stevan> we can emulate a p5 model that way too

[01:53] <audreyt> yup

[01:53] * stevan has decided to look upon the mini-lang metamodel like the Parrot metamodel

[01:53] <stevan> one metamodel to implement them all!

[01:53] * audreyt praises Oleg for crazy^Winspired brilliance

[01:54] <stevan> oleg++ :)

[01:55] <stevan> so lexical methods are how we are doing private methods now?

[01:56] <audreyt> yes

[01:56] <audreyt> and they live in a space unchartered by %methods

[01:56] <stevan> yup

[01:56] <audreyt> they are essentially another subspace

[01:56] <stevan> %private_methods

[01:57] <audreyt> yup

[01:57] <stevan> a slight change in the dispatcher should be able to handle them

[01:57] <stevan> I think we should add *_private_method methods

[01:58] <stevan> it seems like code duplication, but I think it will make it easier to construct classes

[01:58] <audreyt> I concur

[01:58] <audreyt> but roles first

[01:58] <audreyt> :)

[01:58] <stevan> dammit,.. stop agreeing with me :P

[01:58] <audreyt> no, I won't!

[01:59] <stevan> we should stage a mock fight,.. just to stir things up 

[01:59] <audreyt> Test::MockFight

[01:59] <stevan> :D

[01:59] <stevan> so with roles

[01:59] <stevan> I am currently blocked on the best way to do collect_all_roles

[01:59] <stevan> it needs to recursively gather a list of unique roles 

[02:00] <audreyt> and why could you not use a lexical state aka $counter?

[02:00] <audreyt> or do you need .clone natively?

[02:00] * stevan was trying to be good,... pure ,..... functional :P

[02:00] <audreyt> "generating unique" is not a functional thing to do :)

[02:01] <audreyt> unless we distribute the pad with an infinite support of uniques

[02:01] <audreyt> which wouldn't work anyway across compilations

[02:01] <audreyt> so just use a lexical state :)

[02:01] <audreyt> at least it's not global state ;)

[02:01] <stevan> ok

[02:02] <audreyt> and in fact nothing in minilang is global

[02:02] <audreyt> I need to run to $job in a bit

[02:02] <audreyt> see you in ~8hrs

[02:02] <stevan> ok, I only have a little more time until @parents arrive anyway,...

[02:03] * audreyt allocs two days per week for $job and three for $pugs

[02:03] <stevan> I will finish S12 and do Roles late-tonight/tommorow

[02:03] <audreyt> cool!

[02:03] <audreyt> stevan++

[02:03] * stevan allocs as much as possible for $pugs and delegates $job to <other employee>

[02:03] <audreyt> lol

[02:03] <stevan> :)

[02:03] <audreyt> $job is fun though, I get to play with Jifty, which rocks more by day

[02:04] <stevan> yeah I have been keeping an eye on that 

[02:04] * audreyt thinks Jifty should be ported to p6 some day

[02:04] <pasteling> "dduncan" at 24.108.164.7 pasted "second draft of t/oo/trusts.t - catches errors, tests expected failures" (113 lines, 2.8K) at http://sial.org/pbot/15092

[02:04] <dduncan> audreyt, this should be a more rigorous test

[02:04] <audreyt> dduncan: good

[02:05] <audreyt> please commit it once the repo is back

[02:05] <dduncan> and it also traps errors to say ok/not regardless of failures

[02:05] <audreyt> I'll bbl

[02:05] <audreyt> nodnod

[02:05] <dduncan> will do

[02:05] <stevan> enjoy $work

[02:05] <dduncan> I will now apply your patch and see what affect it has 

[02:06] * stevan is starting to like S12 the more he reads it

[02:06] <audreyt> stevan: good, I think it's sane and we should sync to that page :)

[02:06] <stevan> the '.' means autogenerate accessors is a nice approach

[02:07] <audreyt> and it's the first time I think will form a solidish semantic basis

[02:07] <audreyt> prior to that is' almost all handwaving on semantics layer

[02:07] <stevan> audreyt: I am mentally desugaring a lot of this stuff

[02:07] <stevan> yes I agree (on both points)

[02:08] <dduncan> hmm, it appears is_deeply may be backwards regarding its args

[02:08] <stevan> but so far I think everything can be constructed with the current model,.. 

[02:08] <stevan> and if I find something that can't I will figure it ou

[02:08] <stevan> t

[02:10] <dduncan> seems that is() has the arg order [got, wanted], while is_deeply is [wanted, got]

[02:10] <dduncan> is that reversal intentional?

[02:10] <dduncan> talking about Test.pm

[02:11] <audreyt> probably not, fixes welcome

[02:11] <audreyt> I gotta run... &

[02:11] <dduncan> will do ... will reverse is_deeply

[02:12] <stevan> S12/Attributes++ # finally some real clarity on the subject :) 

[02:12] <dduncan> since  $var == $literal is the more common order

[02:12] <stevan> dduncan: I am sure it is not intentional

[02:12] <stevan> feel free to change it 

[02:12] <dduncan> will do

[02:12] <stevan> consistency is always a good thing

[02:15] <dduncan> of course, what takes the cake is that the Test.pm docs disagree with its code on this matter

[02:15] <dduncan> the code is incorrect, docs correct

[02:15] <dduncan> will fix code

[02:16] <clkao> are synopsis in svn?

[02:17] <stevan> clkao: yes, svn.perl.org/perl6/

[02:39] <dduncan> hey, the server's back up ... and just in time!

[02:39] <svnbot6> r8372 | stevan++ | - Moved all of t/pil/* tests related to the metamodel to t/pil/metamodel/

[02:39] <svnbot6> r8372 | stevan++ | - removed t/pil/wanted_features.t, as I no longer want those features :)

[02:39] <svnbot6> r8372 | stevan++ | PIL/Native/Bootstrap.pil

[02:39] <svnbot6> r8372 | stevan++ | - simplified some Role bootstrap code (please ignore the commented out hacks)

[02:39] <svnbot6> r8372 | stevan++ | - added new S12 NOTE annotations to indicate things to think about in light 

[02:39] <svnbot6> r8372 | stevan++ |   of the new version of S12

[02:39] <dduncan> I can commit directly and no merging

[02:45] <dduncan> now just pushed the Test.pm fix

[02:45] <svnbot6> r8373 | Darren_Duncan++ |  r1502@Darren-Duncans-Computer:  darrenduncan | 2005-12-21 18:42:52 -0800

[02:45] <svnbot6> r8373 | Darren_Duncan++ |  /ext/Text : updated Test.pm to fix the arg order of is_deeply() so it matches its own docs, is consistent with other funcs; also removed all trailing whitespace in file

[02:45] <dduncan> er, s/x/s/

[02:53] <dduncan> pushed trusts.t

[02:53] <svnbot6> r8374 | Darren_Duncan++ |  r1504@Darren-Duncans-Computer:  darrenduncan | 2005-12-21 18:51:47 -0800

[02:53] <svnbot6> r8374 | Darren_Duncan++ |  added new test t/oo/trusts.t so a class trusted by another to see its privates is in fact able to, but no one else can

[03:00] * theorbtwo wonders if there's also a "friends with benifits" trust level.

[03:13] <clkao> audreyt: do i still need the bandaid?

[03:19] <dduncan> audreyt, your patch did have an effect, but it isn't sufficient

[03:20] <dduncan> but now you have the committed test to work with

[03:22] <dduncan> you can also tell me if my test is faulty

[03:23] <dduncan> most of it relies on pugs dying when it can't see/set an attr, and not dying when it can

[03:26] <audreyt> dduncan: my patch is not sufficient; it relaxes things too much

[03:26] <audreyt> I'll revisit

[03:26] <audreyt> but for now it should make your code work

[03:26] <audreyt> clkao: you do, will revisit, but not today

[03:27] <audreyt> &

[03:27] <svnbot6> r8375 | autrijus++ | * Kluge $obj!method so it can serve as an lvalue in a

[03:27] <svnbot6> r8375 | autrijus++ |   trusted class -- it's currently to lax, will revisit.

[03:42] <dduncan> I'll let you know if anything in my actual code doesn't work, within a few hours

[03:44] <dduncan> but if the test is to be taken at face value, the lvalues work, but not rvalues

[03:45] <dduncan> will know soon if that actually affects me

[05:12] <Alias_> audreyt: ping?

[05:17] *** kakos` is now known as kakos

[05:17] <audreyt> Alias_: pong? (@ work)

[10:14] <dduncan> but I can check back tomorrow

[10:15] <dduncan> it would probably help if there was something in /examples that demonstrated both creating and parsing yaml

[10:20] <luqui> hey, how do I get the JS backend to see the modules in lib/

[10:21] <luqui> i.e. I'm testing Parse::Rule and it's just saying "Can't locate Parse in @*INC..."

[10:21] <audreyt> dduncan: we'll hack emitting support this weekend

[10:22] <dduncan> allo

[10:22] <dduncan> thank you

[10:23] <dduncan> that should allow me to actually follow the suggestion of using YAML as Rosetta::Engine::Native's file format

[10:23] <audreyt> luqui: at this moment you need to put "use Parse::Rule" in the test file

[10:23] <audreyt> and set $ENV{PERL6LIB}

[10:23] <audreyt> dduncan: cool

[10:23] <luqui> okay, the latter was what I needed

[10:24] <dduncan> and now I will to bed, as it is 2:24am

[10:24] <audreyt> good night

[10:24] <audreyt> off $job &

[10:27] <dduncan> fyi, in the near future I'll probably update Locale::KeyedText so it can use YAML as a template file format option as well

[10:27] <dduncan> but it is not urgent

[10:48] <svnbot6> r8382 | luqui++ | Hopefully wrote the quantify combinator.  Pugs is being a bitch and keeping me from testing it.

[11:11] <amv> umh.. so what is all the talk about javascript? is there a location where i could read more about what you are doing?

[11:17] * theorbtwo is also rather wondering this.

[11:27] <GeJ> TaPL arrived, I will finally be able to understand what you guys are talking about :)

[11:30] *** DesreveR is now known as r0nny

[11:31] <gaal> audreyt: re: lexical alias for each "our" var: how would that work in the case of a "real" lexical with the same basename already existing?

[11:32] <gaal> (what's a good name for "our" vars nowadays, anyway? not globals, not package vars...?)

[11:32] <theorbtwo> "our" vars?

[11:32] <theorbtwo> Lexically visible globals is the 3-dollar phrase.

[11:32] <gaal> theorbtwo: our $var

[11:32] <theorbtwo> Yeah, I know.  I'd call them '"our" vars'.

[11:33] <gaal> they aren't quite global though.

[11:33] <gaal> what does the phrase "3-dollar phrase" mean? :)

[11:34] <gaal> like, poor man's million-dollar phrase? :)

[11:34] <theorbtwo> They're as global as any other sort of global in perl.

[11:34] <theorbtwo> package x; {our $foo=3;} print $x::foo;

[11:36] <gaal> less global than stuff in *.

[11:36] <theorbtwo> Are we talking p5 now, or p6?

[11:36] <gaal> 6

[11:36] <theorbtwo> Oh.

[11:37] <theorbtwo> Nevermind, though.

[11:37] <theorbtwo> Hm, no, continuemind.

[11:37] <theorbtwo> What is $x::foo called then?

[11:37] <gaal> fully qualified _ _.

[11:39] <gaal> our vars (1) don't close and (2) can be accessed w/o symbol table lookup even outside the namespace where they were defined.

[11:39] <gaal> because of sense 2 they can be considered globa..

[11:40] <gaal> but 1 is an important distinctive feature, so i'm looking for the phrase to make that distinction.

[11:44] <theorbtwo> I think 1 is best thought of a side-effect of 2.

[11:45] <theorbtwo> In order for closure to happen, there has to be more then one variable with the same name.

[11:45] <theorbtwo> Coderefs get the one that's in scope at the time.

[11:45] <svnbot6> r8383 | kane++ | * make the installation dir a constant for tests

[11:45] <svnbot6> r8383 | kane++ |     * and remove it from Config.pm

[11:45] <svnbot6> r8383 | kane++ | * make JIB::Installation set up the proper files if needed

[11:45] <svnbot6> r8383 | kane++ |     * so conf.pl doesn't have to anymore

[11:45] <svnbot6> r8383 | kane++ | * tentatively add JIB::Repository::Set

[11:45] <svnbot6> r8383 | kane++ | * add more constants

[11:45] <svnbot6> r8383 | kane++ | * first addition of list_dependencies

[11:46] <svnbot6> r8383 | kane++ | * add some more constants

[11:46] <svnbot6> r8383 | kane++ | * add a bit of pod

[11:46] <svnbot6> r8383 | kane++ | * add more tests for 020.t

[11:46] <theorbtwo> With globals, there is only one variable by that name.

[11:46] <gaal> ~2 certainly doesn't cause ~1, though hopefully 2 implies 1 :-)

[12:27] <svnbot6> r8384 | kane++ | * add a testcover target to Makefile.PL

[13:13] <rafl> Good morning kane_ 

[13:14] <rafl> What does JIB::Repo::Set do? (I don't have my hacking box handy)

[13:16] <kane_> rafl: nothign yet

[13:16] <svnbot6> r8385 | kane++ | * change name of included tarballs from .tar.gz to .tgz

[13:16] <kane_> rafl: hi btw

[13:16] <kane_> i had an idea, then that idea didn't work

[13:17] <kane_> rafl: but we need a way to define sets (as people can have more than one installation, use more than one repo, etc)

[13:17] <theorbtwo> For that matter, what is JIB?

[13:18] <kane_> JIB Is Brilliant

[13:18] <rafl> kane_: I would not put that into JIB::Repo.

[13:19] <kane_> rafl: yeah, if we keep Repository for the physical location things get stored, that makes sense.. but we need something that is our equivalent of apt/sources.list and manages that

[13:19] <rafl> kane_: How about JIB::Package::Installable or something like that, that abstracts a package inside a repository and reads the repo uris from a config file?

[13:19] <kane_> rafl: my thought too :) but we still need a governing class and a set

[13:19] <kane_> might be JIB::Installable, and JIB::Installable::Set

[13:20] <theorbtwo> You should probably make that a sources.list.d

[13:20] <kane_> theorbtwo: mm?

[13:20] <rafl> theorbtwo: Even multiple ones. A system wide, a user wide, etc.

[13:20] <kane_> theorbtwo: ah.. this wans't an implemenentation suggestion, but a common terminology :)

[13:22] <rafl> kane_: I don't understand what the Set is needed for?

[13:23] <kane_> to describe a group

[13:23] <kane_> right now, our installation is 1 dir

[13:23] <kane_> but if youc ompare that to @INC, that's not accurate

[13:23] <kane_> we'd have a group of dirs

[13:23] <kane_> hrmpf

[13:23] <kane_> so, what do you do when you accidentally delete your .svn dir?

[13:24] <rafl> I would not care because I use svk :-)

[13:24] <kane_> right, now assume i'm stuck with svn on this box because svk isn't playing nicely

[13:24] <kane_>  /then/ what to do?

[13:24] <rafl> Maybe check out a new copy and merge your changes between this and your modified copy.

[13:25] * kane_ grumbles

[13:26] <audreyt> "svn up" will fix it 

[13:26] <audreyt> with luck

[13:26] <audreyt> in the parent dir

[13:26] <kane_> [kane@myriad ~...JIB/t]$ svn up

[13:26] <kane_> svn: Working copy 'src' not locked

[13:26] <rafl> kane_: I still understand what the Set has to do. A Set for multiple versions/authorities/.. of one module?

[13:27] <kane_> rafl: @INC would be a 'set'

[13:27] <kane_> because it's a set of directories

[13:27] <kane_> just like mutliple repositories would be a 'set'

[13:27] <theorbtwo> But, um, @INC is ordered.

[13:27] <audreyt> kane_: rm -rf src and then svn up

[13:27] <kane_> k

[13:27] <kane_> theorbtwo: yes, so?

[13:27] <audreyt> @INC would be an ordered set

[13:27] <theorbtwo> Aren't sets unordered?

[13:28] <kane_> audreyt, thanks that worked

[13:28] <audreyt> sets may be totally, or partially, ordered

[13:28] <kane_> theorbtwo: mathmatical sets might not be

[13:28] <kane_> but this one would be

[13:28] <audreyt> if my math hadn't failed me

[13:28] <rafl> kane_: Why not an ordered list?

[13:28] <kane_> i just said 'ordered list'....

[13:28] <theorbtwo> OK, sorry for bringing it up.

[13:29] <kane_> i think we just got a few things confused here

[13:30] * rafl agrees

[13:32] <kane_> 'set' 'group', 'list', 'congregation', 'heap', 'bunch', 'stack' -- all fine names in this context

[13:43] <svnbot6> r8386 | audreyt++ | * PIL.Native: Autoboxing support for every native type,

[13:43] <svnbot6> r8386 | audreyt++ |   with builtin autoboxed classes that has ".unbox" as

[13:43] <svnbot6> r8386 | audreyt++ |   their only method:

[13:43] <svnbot6> r8386 | audreyt++ |     "::Bit ::Int ::Num ::Str ::Seq ::Map ::Sub"

[13:45] <audreyt> what about "Laminated Lattice" or "Cobordant Manifold"?

[14:22] <kane_> i hate svn

[14:22] <kane_> in fact, i hate all vcs

[14:22] <kane_> so i did an svn delete and an svn add again of the same file

[14:23] <gaal> Laminated Lettuce and Cabbage Manifold?

[14:23] <kane_> now it insists teh file doesn't exist.. although when looking at it, it does, and svn claims it's under vcs

[14:23] <kane_> except, it won't let me commit

[14:23] <theorbtwo> "Won't let me" as in?

[14:23] <kane_> File not found: transaction '8386-1', path '/misc/sixpan/JIB/t/src/p5-complicated-deps/_jib'

[14:24] <kane_> it's doing that for all flies i've deleted, and re-added with different content

[14:24] <theorbtwo> That's, um, interesting.

[14:24] * kane_ suggests the words 'fucked up'

[14:24] <theorbtwo> That works too.

[14:24] <theorbtwo> Have you done an "svn up"?

[14:25] <kane_> yeah.. i'm juggling files now

[14:25] <kane_> moving them away, updating, moving them back, etc

[14:26] <kane_> i positively hate applications that litter files in my working directories

[14:26] <avar> not really a perl6 q, but do you have an idea of how to make HTML::Parser report the content of a tag I extract, using http://avar.pastebin.com/475069 currently

[14:26] <avar> I can use text_h, but I want to know the element and its attributes too

[14:29] <svnbot6> r8387 | kane++ | * add a repo.pl and pkg.pl include script for tests

[14:29] <svnbot6> r8387 | kane++ |     * remove some hardcoded paths in favor of what these scripts return

[14:29] <svnbot6> r8387 | kane++ | * add all test packages from prototype

[14:29] <svnbot6> r8387 | kane++ | * fix typo in repository.pm

[14:29] <svnbot6> r8387 | kane++ | * exclude .svn dirs hardcoded in jib::source # XXX fixme

[14:29] <svnbot6> r8387 | kane++ | * add some docs

[14:29] <avar> mm, I'll just ask some more in #perl

[14:33] <audreyt> kane_: svk fixed all these problems and then some... are you on OSX?

[14:33] <kane_> audreyt: yeah, but on 10.3.9 -- svk.dmg doesn't work there

[14:33] <kane_> and grabbing it from cpan made my computer unhappy

[14:33] <audreyt> and you don't like fink

[14:33] <kane_> i like fink well enough, but that blew up heavily too

[14:34] <kane_> it's been a few weeks now, it might be fixed by now

[14:34] <audreyt> hmm wait... how far ago is 10.3.9?

[14:34] <kane_> i upgraded to 10.4 at the office, but that messed up a lot of things too

[14:34] <kane_> last 10.3 release

[14:34] <luqui> svk trades genuine problems for annoyances

[14:34] <audreyt> http://rt.openfoundry.org/Foundry/Project/Download/Attachment/33814/23873/SVK-1.00-2.dmg  # this may work

[14:34] <luqui> I'd like some nice balance between svk, svn, and darcs

[14:34] <audreyt> luqui: wouldn't we all... :)

[14:34] <kane_> audreyt: wouldn't i want the bugfixes from later svk's?

[14:35] <audreyt> kane_: you can manually override lib/SVK/* 

[14:35] <audreyt> which will bring you the bugfixes without the XS pain

[14:35] <kane_> if that's Safe, i'm happy to give that a go

[14:35] <audreyt> all it wants is a bincompat libapr etc

[14:35] <kane_> just unfucking the last svn bit here first

[14:35] <audreyt> k

[14:40] <kane_> oh how i hate software

[14:40] <svnbot6> r8388 | kane++ | * add a jib-create script

[14:40] <svnbot6> r8388 | kane++ | * add some source files svn was reluctant to add before

[14:42] * luqui wonders what kane_ doesn't hate

[14:42] <kane_> strawberries

[14:42] <kane_> they've never offended me

[14:42] <luqui> they have me

[14:42] <luqui> they're all like "I'm ripe I'm ripe" and then they're totally not

[14:43] <kane_> you're right... they're bastards

[14:43] <qmole> lol

[14:43] <kane_> well, then i give up.. i hate it all

[14:44] <luqui> so what's that jib stuff?

[14:44] <audreyt> luqui: http://search.cpan.org/dist/Perl6-Bible/lib/Perl6/Bible/S22.pod

[14:44] <theorbtwo> JIB is a meaningless recursive acronym.

[14:44] <luqui> ooh, a synopsis I haven't seen

[14:45] <audreyt> JIB: "JIB Inverts BIJ"

[14:47] <theorbtwo> Interesting, when I asked I got JIB Is Brilliant

[14:47] <luqui> :-p

[14:47] * theorbtwo thinks we should call it YAPMS.  Then we can call packages bleaders.

[14:47] <theorbtwo> Then we can all die a horrible death at the hands of women everywhere.

[14:47] <kane_> i had 'pms' before.. too many negative connotations

[14:47] <theorbtwo> OK, probably not a good plan.

[14:47] <luqui> you can't pronounce YAPMS

[14:48] <theorbtwo> Yapp-ems.

[14:48] <theorbtwo> You can't decide on a semantic for JIB.

[14:48] <luqui> I guess it's as pronouncable as TMTOWTDI

[14:49] <kane_> http://www.ace.net.nz/tech/TechFileFormat.html#j

[14:49] <theorbtwo> MDIM?  Module download, install, manage?

[14:49] <kane_> # it's FREE, which is most important

[14:49] <theorbtwo> If we don't care about being three-letter, there's lots of free extensions.

[14:50] <theorbtwo> PMS and MDIM are both free on that list.

[14:50] <audreyt> I bet ... is also a free extension

[14:50] <audreyt> it feels more p6ish anyway

[14:50] <luqui> .perl6packagemanagementarchive

[14:50] * kane_ likes jib

[14:50] <luqui> that might make some operating systems angry

[14:50] <audreyt> DBI-0.14....

[14:51] <audreyt> ...install *....

[14:51] <kane_> there's actually nothing really p6 specific about this code

[14:51] <theorbtwo> We can call them therefour modules.

[14:51] <audreyt> okay, probably not a very good idea

[14:51] <luqui> looks like perl 6 alright

[14:52] <theorbtwo> We could call them code packages (.cp), and the system cpms.

[14:53] <audreyt> (I think .jib is fine :))

[14:53] <audreyt> oh wait, that would be .jif

[14:53] * stevan starts sips his morning coffee and begins reading the Role section of S12

[14:53] <audreyt> I think .jib is beautiful

[14:53] <svnbot6> r8389 | kane++ | * add a pkg.pl script to generate .jibs from src dirs

[14:53] <svnbot6> r8389 | kane++ | * add a repo.pl script to genereate a repository from .jibs

[14:53] <svnbot6> r8389 | kane++ | * and all the other stuff that was in the /last/ commits

[14:53] <svnbot6> r8389 | kane++ |  and svn happily messed up -- GRRR

[14:53] <audreyt> there. better

[14:53] <stevan> I love the smell of autoboxed types in the morning  .... 

[14:53] * kane_ bows at audreyt

[14:53] <theorbtwo> Mmmpf, too many names that don't mean anything.

[14:54] * audreyt curtsies back

[14:54] * stevan ponders the meaning of "theorbtwo" ;P 

[14:54] <theorbtwo> At least it isn't /^PI.$/

[14:54] <luqui> PIP!!

[14:54] * luqui shuts up

[14:55] <kane_> ok, what's taken the .pie suffix?

[14:55] <kane_> OMG it's free

[14:55] * theorbtwo would guess it's something to do with ponnie.

[14:55] <luqui> "Perl Imaginitave Extension"

[14:55] <kane_> s/itave/ary/ ?

[14:56] <luqui> that's better

[14:56] <audreyt> I must say .pie looks better (and smells better) than .jib

[14:56] <kane_> maybe we cna go for .ENC (as in Emperors New Clothers)

[14:57] <luqui> heh.  How many programs use that extension already?

[14:57] <luqui> I think at least three.

[14:57] <theorbtwo> You know that'd make a package for osx and apple pie...

[14:57] <theorbtwo> s/and/an/

[14:57] * kane_ cires

[14:57] <kane_> cries even

[14:57] <luqui> punderlicious

[14:57] <konobi> .dta death-to-all!

[14:58] <kane_> .jfdi -- Jos' Fine & Dandy Installer

[14:58] <luqui> Who's Jo, and why is there more than one of her?

[14:58] * kane_ hits luqui over the head

[14:58] * luqui is a punctuation nazi

[14:59] <kane_> isn't that punctuation correct?

[14:59] * audreyt hands kane a punctuation uzi

[14:59] * luqui runs

[14:59] <kane_> heh

[14:59] <kane_> audreyt: i'm more oldschool... rusty nails & a hammer

[15:00] <luqui> I.::.m... tr:.y.:in.:.g...to:..do:dge...t:he::uzi

[15:00] <luqui> hmm... looks like perl 6

[15:00] <kane_> my cat walking on the keyboards looks like perl6... your point? :)

[15:01] <luqui> I guess when every string of characters is a valid program...

[15:01] <luqui> I heard "Bach was original.  But then again, it's easy to be original when you write down every possible sequence of notes"

[15:05] <luqui> And thus ends the longest OT conversation ever seen on #perl6

[15:05] <luqui> 12 lines

[15:15] <audreyt> petdance: greetings. sorry that I had not got around on journaling.

[15:24] <audreyt> stevan: anything to sync before I fall asleep?

[15:24] <stevan> audreyt: nope, I am working on roles mostly

[15:24] <audreyt> cool

[15:25] <audreyt> I think I'm blocking on roles to do more desugaring and containers

[15:25] <audreyt> as I don't feel comfortable hardcoding any more methods on prim classes

[15:25] <stevan> yeah, that would make sense

[15:25] <audreyt> they should all be role mixins

[15:25] <stevan> agreed

[15:25] <audreyt> okay

[15:25] <audreyt> good night, very agreeable stevan :)

[15:26] <stevan> good night audreyt :)

[15:26] <audreyt> &

[15:26] <stevan> I will try to come up with something for us to disagree upon :)

[15:31] *** stevan is now known as stevan_

[15:39] *** stevan_ is now known as stevan

[16:40] <avar> does p6 have any easy way to define hashes like <> for arrays?

[16:41] <integral> you can't still assign to a hash from a list?

[16:41] <avar> mm

[16:41] <integral> eval: %h = <a 1 b 2 c 3>; say %h<a>;

[16:41] <integral> ?eval my %h = <a 1 b 2 c 3>; say %h<a>;

[16:41] *** evalbot_8381 is now known as evalbot_8389

[16:41] <evalbot_8389> OUTPUT[1 ] bool::true 

[16:41] <avar> heh, no, I don't think so..

[16:42] <integral> ?eval my %h = <a 1 b 2 c 3>; say %h<a b c>;

[16:42] <evalbot_8389> OUTPUT[123 ] bool::true 

[16:42] <integral> seems to work for me.

[16:42] <avar> oh, well actually

[16:42] <avar> I thought %h = (1,2,3,4) had been deprecated in favour of =>

[16:42] <avar> apperently not..

[16:43] <integral> well => constructs pairs.  And there's some heuristic about lists of pairs, vs. two-at-a-time lists :-/

[16:46] <avar> b.t.w.

[16:46] <avar> ?eval my %h = 1..4; say %h.perl

[16:46] <evalbot_8389> OUTPUT[{("1" => 2), ("3" => 4)} ] bool::true 

[16:46] <avar> you can get pretty output like that;)

[16:46] <theorbtwo> ?eval my %h = (1..4;); %h

[16:46] <evalbot_8389> Error:  unexpected ";" expecting digit, "_", fraction, exponent, term postfix, operator, "does", "but", "is", "^till", "till^", "^..^", "till", "cmp", "<=>", "^..", "..^", ".." or ")" 

[16:47] <theorbtwo> ?eval my %h = (1..4); %h

[16:47] <evalbot_8389> {("1" => 2), ("3" => 4)} 

[16:47] <theorbtwo> You can also return things instead of printing them.

[16:47] <avar> that way too;)

[16:47] <theorbtwo> ?eval my %h = 1..4.map {$_=>$_}; %h

[16:47] <evalbot_8389> Error:  unexpected "{" expecting operator, "does", "but", "is", "^till", "till^", "^..^", "till", "cmp", "<=>", "^..", "..^", "..", ";" or end of input 

[16:47] <theorbtwo> ?eval my %h = 1..4.map({$_=>$_}); %h

[16:47] <evalbot_8389> Error: cannot cast from VList [VList [VRef <Pair>]] to Pugs.AST.Internals.VCode (VCode) 

[16:47] <theorbtwo> Ugh!

[16:47] <avar> ?eval $! = 1..300; die $!

[16:48] <evalbot_8389> (no output)

[16:48] *** sili_ is now known as sili

[16:48] <avar> that's strange..

[16:50] <avar> ?eval say ~1..300

[16:50] <evalbot_8389> OUTPUT[123 ] bool::true 

[16:50] <theorbtwo> 123?

[16:51] <theorbtwo> ?eval 1..300

[16:51] <evalbot_8389> (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,

[16:51] <theorbtwo> ?eval "This is a longer string\n"

[16:51] <avar> works on my box

[16:51] <evalbot_8389> "This is a longer string\n" 

[16:51] <theorbtwo> ?eval say "This is a longer string\n"

[16:51] <evalbot_8389> OUTPUT[This is a longer string  ] bool::true 

[16:51] <avar> ?eval "123 " x 500

[16:51] <evalbot_8389> "123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123 123

[16:53] <rafl> Who's the guy who's responsible for the smoke stuff?

[16:54] <avar> ?eval «0 núll»

[16:54] <evalbot_8389> Error:  unexpected "\NUL" expecting program 

[16:54] <avar> ?eval «0 núll».perl

[16:54] <evalbot_8389> Error:  unexpected "\NUL" expecting program 

[16:54] <avar> ?eval <0 ú>

[16:54] <evalbot_8389> ("0", "\\") 

[16:54] <theorbtwo> I'd expect that's an evalbot problem.

[16:54] <avar> what's up with that...

[16:54] <avar> ?eval <0 úæðáí>

[16:54] <evalbot_8389> ("0", "\\\\") 

[17:16] <avar> sub prefix:<íslenska> (Num $n) returns Str { "foo" }

[17:16] <avar> sub færeyska (Num $n) returns Str { "bar" }

[17:16] <avar> say íslenska 500;

[17:16] <avar> say færeyska 500;

[17:16] <avar> what's the practical difference between these two?

[17:16] <PerlJam> avar: none?

[17:16] <avar> maybe;)

[17:57] <Alias_> seen cwest?

[17:58] <Alias_> damned explicit-mode bots

[17:59] <avar> Alias_: use seenserv

[17:59] <Alias_> "Wildcard SEEN is restricted to admins"

[17:59] <Alias_> oh, question mark

[19:48] <xgl> svn is down?

[19:51] <Juerd> I have no idea.

[19:55] <xinming> xgl: I think so, As I also can't check out the repository

[20:26] <xgl> ls

[21:02] <dduncan> g'day

[21:04] <nothingmuch> lumimies: 

[21:04] <nothingmuch> err

[21:04] <nothingmuch> luqui: ping

[21:04] <nothingmuch> seen luqui

[21:04] <nothingmuch> obra: err, you also pijng

[21:04] <nothingmuch> ping

[21:04] <nothingmuch> http://use.perl.org/~luqui/journal/28089?from=rss

[21:04] <nothingmuch> wrt that, and your question to luqui - this relates the circular prelude idea

[21:05] <nothingmuch> basically i proposed that Perl 6's core definition will be written in perl 6

[21:05] <nothingmuch> except for things like IO

[21:05] <nothingmuch> even basic math

[21:05] <nothingmuch> and then when the code is compiled, high level functions/methods from the prelude will have replacements proposed by the backend

[21:05] <nothingmuch> so Perl6::Rule::compile could be provided by PGE on the parrot backend

[21:06] <nothingmuch> but stay pure perl in the javascript backend

[21:06] <nothingmuch> furthermore, circularity is promoted

[21:06] <nothingmuch> defining functions in terms of each other

[21:06] <nothingmuch> that way the backend can replace the part it's most comfortable replacing

[21:06] <nothingmuch> instead of a predefined set of "core ops"

[21:06] <nothingmuch> see also misc/blondie in the pugs tree

[21:40] <dduncan> easy come, easy go ... openfoundry down again

