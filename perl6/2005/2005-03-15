[00:15] <lightstep> i seem to get the types more and more right

[00:15] <lightstep> i need people to check out the new extension

[00:16] <lightstep> but it would take some more time

[00:24] <lightstep> how is "my" parsed? or where?

[00:54] <lightstep> done!

[01:02] <kungfuftr> moo

[01:06] <Khisanth> Juerd: don't you mean arguments?

[01:08] <kungfuftr> mugwump: yargh

[01:08] <mugwump> :-p

[01:09] <kungfuftr> mugwump: so when will we see Class::Tangram in p6?

[01:09] <mugwump> Class::Tangram is entirely unnecessary in p6

[01:10] <kungfuftr> *blink* though i would have thought relationship stuff would still be somewhat needed

[01:10] <mugwump> Class::Tangram can be summarised as explicit (Run time type information | introspection | reflection)

[01:11] <kungfuftr> ah, far does

[01:12] * kungfuftr too tired to think

[01:13] <mugwump> Hopefully, any "extra" information that Tangram needs to be able to represent the structure in the database can be tacked on with traits

[01:13] <mugwump> (I hope I used the right term there - I'm referring to *Class* properties)

[01:14] <mugwump> That way, Tangram will be able to "just work" without really specifying a schema (unless you want to override the default mapping)

[01:14] <mugwump> After all, the "Class" objects are themselves a schema.

[01:58] <bd_> hmm, return inside a while loop seems broken

[01:59] <bd_> pugs> sub foo { while (1) { return 24; } return 42; } foo()

[01:59] <bd_> (42)

[02:10] <mugwump> you should be exiting the loop nicely!  return jihad!

[02:10] <bd_> XD

[02:11] <bd_> well, the whole point of the module I'm writing is to be a hacky implementation of sort-of-regexes for until pugs gets rules... sooo, for now I've added yet another hack

[02:11] <bd_> but it'd be nice if that worked properly :)

[02:11] <bd_> though, I have a working next; now :)

[02:13] <mugwump> I still think it would be a great idea to allow the Perl5 regex syntax in pugs via pcre...

[02:13] <mugwump> http://svn.openfoundry.org/pugs/ext/Kwid/lib/perlkwidspec.kwid  # feedback, please...

[02:15] <Khisanth> that would be annoying

[02:15] <mugwump> what would?  the pcre thing?

[02:16] <Khisanth> yes

[02:17] <mugwump> why?

[02:18] <Khisanth> the not quite compatible part

[02:18] <Khisanth> unless you mean to use it as a temporary solution

[02:19] <mugwump> I don't know exactly which features are missing, but AIUI none of them are really awful being missing.  Not as awful as having POSIX regexes or no regexes at all

[02:20] <mugwump> perhaps the (positive|negative) zero-width look(ahead/behind) assertions would be sorely missed if they're not in PCRE

[02:20] <Khisanth> implement the rules! :P

[02:21] <Khisanth> I think those are in, the look behind might actually be better ...

[02:41] <ingy> mugwump++

[03:05] <mugwump> hopefully, the implications of that perlkwidspec will be very minor to the current implementation...

[05:22] *** Aankh|Clone is now known as Aankhen``

[06:44] <autrijus> last() fixed; true() implemented; @array[-12345] = 2 is now an error; GHC 6.4 warnings really inhibitied; some other misc fixes.

[06:44] <autrijus> gotta run. bbiab &

[06:47] <obra> hi autrijus

[07:18] <nothingmuch> autrijus: please look at r744

[07:18] <nothingmuch> which i think should pass, but i'm not 100% sure

[07:18] <nothingmuch> it's got some failing tests

[07:18] <nothingmuch> and i'd actually rather they fail in the way that they do =)

[07:26] <nothingmuch> gaal: you forgot to attach undef.t

[07:26] <nothingmuch> and in either case you should really just be a comitter

[07:26] <gaal> did not!

[07:27] <nothingmuch> perlbot nopaste

[07:27] <perlbot> Paste your code here and #perl will be able to view it: http://sial.org/pbot/perl

[07:27] <pasteling> "nothingmuch" at 212.143.91.217 pasted "no attachment" (19 lines, 569B) at http://sial.org/pbot/8199

[07:27] <nothingmuch> see?

[07:28] <nothingmuch> anyway, ride will be here shortly

[07:29] <gaal> grr, you're right, it did manage to get lost somehow although i *remember* attaching it. mailers should follow Nat's idea and confirm sending a mail that contains the word "attachment" but which don't have one.

[07:30] <pasteling> "gaal" at 192.115.25.249 pasted "t/base/undef.t" (134 lines, 3.3K) at http://sial.org/pbot/8200

[07:31] <nothingmuch> svn add, svn ci =)

[07:31] <nothingmuch> don't be shy

[07:32] <gaal> todo_ok($self{"commit"}, "need one to ci");

[07:32] <nothingmuch> (autrijus^obra).invite(gaal)

[07:33] <obra> gaal: do you have a foundry id?

[07:34] <gaal> this is where i do the "oh, no, yet another source control system to learn" thing :)

[07:34] <obra> gaal: email address?

[07:34] <gaal> obra: let me read a faq about it, sec

[07:34] <nothingmuch> obra: remember t/op/precedence.t?

[07:34] * obra is about to head to bed

[07:34] <obra> nothingmuch: yes

[07:34] * gaal hurries up

[07:34] <nothingmuch> gaal: openfoundry ~~ sf.net but not commercial

[07:35] <obra> run for free by the taiwanese government to promote opensource in taiwan

[07:35] <nothingmuch> obra: if you like dreaming about precedence attrocities at the design level, look at the bottom of it, there's assignment vs. , and yes

[07:35] <obra> hah

[07:35] <obra> Don't wanna

[07:36] <malaire> I was just implementing index, and found this strange behaviour from perl5:

[07:36] <malaire> index("Hello", "", 999) == 5  # Should perl6 behave similarly or not?

[07:36] <malaire> I'd expect -1 here, not 5.

[07:36] <gaal> anyway obra the main svn site seems to be down, i won't keep you

[07:37] <obra> gaal: huh? it's up to the best of my knowledge

[07:37] <nothingmuch> malaire: if it isn't a bug it's a design bug

[07:37] <nothingmuch> IMHO

[07:37] <obra> svn ls http://svn.openfoundry.org/pugs

[07:37] <gaal> subversion.tigris.org ?

[07:38] <obra> that's the dist site for subversion. but you can likely obtain it from your os vendor

[07:38] <gaal> i have a client. i'm just looking to read about what a foundry id is.

[07:38] <obra> oh. rt.openfoundry.org

[07:38] <nothingmuch> gaal: err, a foundry == rt + svn server + trove

[07:38] <obra> it's just the project hosting site pugs uses

[07:39] <gaal> ...so why do *i* need one?

[07:39] <obra> so you can commit to svn

[07:39] <nothingmuch> you don't

[07:39] <nothingmuch> it's just the svn you need

[07:39] <nothingmuch> it hosts the server

[07:39] <nothingmuch> you have a login/passwd

[07:39] <nothingmuch> and then you can commit

[07:39] <obra> access to pugs svn is managed through rt.openfoundry.org

[07:42] <obra> gaal has been granted commit rights

[07:42] <Alias_> Welcome to the pokemon

[07:42] <gaal> the terms of use are (i suppose) all Hanzi. I'm not signing off my house, am i? :)

[07:42] <obra> you are not. 

[07:42] <obra> autrijus has a translation up somewhere

[07:42] <hcchien> I can give you a tranlated page. :)

[07:43] <obra> hcchien: can you get the translated page linked from the main one

[07:43] <obra> ?

[07:43] <gaal> i think i trust you guys. :p

[07:43] <obra> foundry is becoming international and this keeps coming up

[07:44] <hcchien> http://wagner.elixus.org/~hcchien/termtouse.html

[07:44] <hcchien> obra: yes, I will ask them publish it officially later. :)

[07:44] <obra>   yay

[07:44] <obra> ok. really now sleep

[07:45] <hcchien> nice dream. :)

[07:47] <gaal> okay, thanks all.

[07:48] <lightstep> how do i update MANIFEST?

[07:49] <lightstep> some files were deleted in r735, and no wMANIFEST is not updated

[07:49] <malaire> just edit manually, and the svn ci ?

[07:51] <lightstep> there are lots of files

[07:52] <gaal> try cp MANIFEST MANIFEST.old; make manifest, then merge the to with your favorite tool.

[07:53] <lightstep> thanks

[07:55] <lightstep> err, it only adds files to MANIFEST. i'll just delete the missing files manually

[07:56] <gaal> s/cp/mv/ above and retry :)

[07:59] <gaal> i need to co a new tree now that i'm not anonymous, right? what's the magic incantation?

[08:00] <autrijus> nope. just ci.

[08:00] <autrijus> it will then ask for your username just then.

[08:00] <gaal> clever :)

[08:00] <autrijus> all hail DAV ;)

[08:00] <gaal> ok to put undef.t in base/, yes?

[08:01] <autrijus> sure.

[08:02] <gaal> not *quite* smooth; it assumed my unix login was my remote one (not the case). how do i say what my svn user is explicitly?

[08:02] <autrijus> just hit enter

[08:02] <autrijus> and it will ask another username.

[08:03] <gaal> did that; ok, will it now configure the tree with tihs username for next time round?

[08:04] <autrijus> I think so.

[08:04] <autrijus> it does that for me.

[08:05] <gaal> thanks then, ci'ed. think i'll wait a bit before adding it to the makefile and manifest since they seem to be under lightstep's luv right now?

[08:07] <lightstep> Eval.hs is very complicated

[08:09] <autrijus> hmm, some perlmonk there? "dvergin" reported a compile error in his use.perl journal

[08:09] <autrijus> http://use.perl.org/~dvergin/journal/

[08:09] <autrijus> I attempted a fix in trunk now, but has no idea how to tell him to try again and/or turn on comments in his use.perl journal :)

[08:10] <autrijus> lightstep: it is. care to refactor it to Eval/App.hs etc for me?

[08:10] <autrijus> or do you think that won't help? :)

[08:11] <lightstep> i''m trying to figure out the evaluation process, in hope i'll be able to make `my' work in the prompt

[08:12] <lightstep> and then i'll add require, and you can just paste test code, and it'll work

[08:12] <autrijus> ok. what needs to happen is that you need to add a kind of Val in AST.hs

[08:12] <autrijus> mm, that's probably too kluge

[08:12] <lightstep> i just found the correct branch of reduceStatements

[08:12] <autrijus> the trick is to somehow trick the end of reduceStatements to return its env.

[08:13] <autrijus> so we can use that env for the next line around.

[08:13] <autrijus> currently it just returns a Val

[08:13] <autrijus> so you can add a VEnv in AST.hs.

[08:13] <lightstep> yes

[08:13] <autrijus> as part of Val.

[08:13] <autrijus> on the other hand,

[08:13] <lightstep> maybe i'll change the processing of top-level local variables?

[08:13] <autrijus> maybe you can do it be passing in a callCC 

[08:13] <autrijus> and trick the env away by feeding it to the callCC.

[08:13] <autrijus> but that may be nontrivial.

[08:14] <autrijus> lightstep: sure, but change how?

[08:14] <autrijus> my original idea is for the REPL to parse the line

[08:14] <autrijus> and add an extra statement after it

[08:14] <lightstep> perhaps a new `reduce' for shell expressions, that handles `my' and `require' specially

[08:15] <lightstep> your idea seems simpler, though

[08:15] <autrijus> yeah, I'd say so.

[08:15] <autrijus> if we can freeze the env as part of a Prim / Statement

[08:15] <autrijus> then that's one step toward serializable continuations.

[08:20] <lightstep> hmmm, that requires some `inline expression' which is isomorphic to Eval Val

[08:20] <autrijus> basically Show for Eval Val.

[08:21] <autrijus> instance Show (Eval Val) where ...

[08:21] <lightstep> i mean, adding an expression to the end of the input line

[08:21] <autrijus> oh. yeah.

[08:21] <autrijus> line 181.

[08:21] <lightstep> the expression would have to run arbitrary Eval actions

[08:22] <autrijus> instead of retVal, return a Env/Val tuple.

[08:22] <autrijus> I think that's all there is to it.

[08:22] <autrijus> the Env/Val tuple of course needs to be made a Val.

[08:22] <autrijus> Val VEnv (Env, Val)

[08:22] <autrijus> something like that.

[08:23] <lightstep> maybe there is a place in the Env structure to do things after the end of evaluation?

[08:23] <autrijus> and with the final pad?

[08:23] <gaal> my Array $a; ... should $a be defined now?

[08:23] <Darren_Duncan> FYI, the bulk of the Algorithm::Dependency port is now done.  There are still some parts that are known to be bad, but they can be addressed later.

[08:23] <autrijus> Darren_Duncan++

[08:23] <Darren_Duncan> If any of you spot something that stands out as wrong, tell me or fix it.

[08:23] <gaal> wow

[08:23] <lightstep> i don't really know what a pad is

[08:24] <nothingmuch> morning

[08:24] <nothingmuch> Darren_Duncan++

[08:24] <Darren_Duncan> Autrijus, about your changing the /modules file types ...

[08:24] <nothingmuch> lightstep: where lexical variables are stored

[08:24] <lightstep> perhaps i'll add an envCaller

[08:24] <autrijus> lightstep: there is an envCaller.

[08:24] <Darren_Duncan> I did a few compares and they showed that nothing actually changed in the files

[08:24] <autrijus> lightstep: it refers to the pad of the dynamic scope's caller.

[08:24] <nothingmuch> env ~~ pad?

[08:25] <nothingmuch> or is env a sort of unification

[08:25] <nothingmuch> of pad + dynamic + global?

[08:25] <autrijus> nothingmuch: env's envLexical is the pad.

[08:25] <Darren_Duncan> mind you, I only used the OSSF web compare

[08:25] <autrijus> Darren_Duncan: right, because on unix that file types means nothing

[08:25] <Darren_Duncan> I assume the update is more like a 'touch' in this case

[08:25] <scw> nothingmuch: hello, there are some tests in t/base/operator.t (line 28 ~ 36)

[08:25] <autrijus> it's on win32 where they made difference.

[08:25] <autrijus> nothingmuch: see AST line 487

[08:25] <Darren_Duncan> It was just that when I did an update, it said all those files were updated, though their contents didn't change

[08:25] <scw> nothingmuch: that would be putted to t/op/precedence.t ?

[08:25] <Darren_Duncan> anyway, no concern

[08:26] <autrijus> lightstep: so, to answer your question, I'm inclining toward something even simpler

[08:26] <nothingmuch> scw: i think so

[08:26] <Darren_Duncan> If anyone's interested, tomorrow I'm speaking at my local Perl Mongers about what I've just been doing here, writing Perl 6.

[08:26] <scw> nothingmuch: Those are added by me so feel free to move them :)

[08:27] <Darren_Duncan> Are all of you in a local group?

[08:27] <Darren_Duncan> or 'any

[08:27] <lightstep> autrijus, adding another caller at the top seems simple enough

[08:28] <autrijus> lightstep: ok, then go ahead :)

[08:28] <autrijus> lightstep: I'll comment when I see your code :)

[08:28] <nothingmuch> scw: i'll get to that err, later

[08:28] <nothingmuch> very busy at work now

[08:29] <nothingmuch> there is a test case that tests their interaction

[08:29] <nothingmuch> t/op/precedence.t does everything like this:

[08:29] <nothingmuch> given two operator precedence levels

[08:29] <nothingmuch> and and ?? :: are pretty far apart

[08:29] <nothingmuch> adjacent ones

[08:29] <nothingmuch> but it looks like it's a test for a bug

[08:29] <nothingmuch> am i right?

[08:29] <autrijus> lightstep: anyway, I'll elaborate my last pont

[08:29] <autrijus> I think a Syn "dump"

[08:29] <Darren_Duncan> Question re porting ...

[08:29] <lightstep> what is App name invs args ? what is invs, actually

[08:30] <Darren_Duncan> Is there any preference, when a Perl 6 module is meant to match a Perl 5 module ...

[08:30] <autrijus> that is specially taken care in reduceStatements

[08:30] <autrijus> that feeds the lastVal and env back

[08:30] <lightstep> autrijus, that seems right

[08:30] <autrijus> is simplest. but feel free to pursue other ways that seem better to you

[08:30] <Darren_Duncan> Should I make the version numbers the same as the Perl 5 version, or start them over at 0.0.1?

[08:30] <Darren_Duncan> I've been doing option 2 for now

[08:30] <autrijus> lightstep: invs is invocants; args is non-invocant args.

[08:30] <lightstep> ok

[08:30] <lightstep> no

[08:30] <autrijus> $inc.method($arg);

[08:31] <lightstep> so why many invocants?

[08:31] <autrijus> because that's what MMD is for.

[08:31] <autrijus> builtins use multimethod dispatch to determine which functions to call.

[08:31] <lightstep> ok

[08:31] <Darren_Duncan> Q: which Synopsis doc talks about file-handles, remind me

[08:32] <autrijus> Darren_Duncan: I prefer 0.0.1 just for sanity

[08:32] <autrijus> i.e. avoid expectation that it will match bug-for-bug with p5 counterpart

[08:32] <autrijus> but you as the author gets to decide :)

[08:33] <Darren_Duncan> autrijus - okay, I'll leave it that way while modules are in the Pugs distro - authors that publish separately can use whatever system they want

[08:33] <autrijus> yup.

[08:33] <Darren_Duncan> One of the main reasons I put it at 0.0.1 is that the Perl 6 version is very raw and untested ...

[08:33] <Darren_Duncan> While a higher number like the Perl 5 one implies it is well tested and complete

[08:33] <lightstep> autrijus, my current idea is this: add a new Syn, "dump", which dumps local variables to global variables

[08:34] <Darren_Duncan> Here's what I can do ...

[08:34] <Darren_Duncan> 1. use 0.0.1 for brand new and untested ports

[08:35] <Darren_Duncan> 2. when all the tests pass and the module is at feature parity with v5, it will zoom up to match the Perl 5 mod's version number

[08:35] <Darren_Duncan> so unless there's objection, that's my new pattern

[08:36] <Darren_Duncan> is it reasonable to add something about version numbers like this to a general Pugs FAQ somewhere?

[08:36] <autrijus> lightstep: that worksforme as the first cut.

[08:36] <autrijus> Darren_Duncan: you can certainly add it to the kwiki :)

[08:40] <Darren_Duncan> does Pugs support version numbers yet?

[08:41] <Darren_Duncan> ... eg, module long names?

[08:41] <Darren_Duncan> I'm thinking of sticking a version number on Sample-Module to encourage better coding practices

[08:43] <scw> nothingmuch: Oh, were you talking to me? Away before.

[08:43] <scw> nothingmuch: yes, those three are bugs, in fact, parsing bugs.

[08:43] <Darren_Duncan> I did it anyway

[08:44] <nothingmuch> scw: ok... I think maybe they belong in operators.t if they are parsing bugs

[08:44] <nothingmuch> or maybe in t/syntax

[08:44] <nothingmuch> if they really test that even though op a and op b work ok

[08:44] <nothingmuch> but they might not have distinct precedence, then that's what t/op/precedence.t is about

[08:45] <nothingmuch> i don't mind changing this, but i think the location is good enough at the moment

[08:46] <scw> But I think the main problems on those three tests are the parser doesn't

[08:46] <scw> make ??:: have higher precedence than '=', 'and' or 'or'

[08:47] <scw> According to S03, ??:: should have higher precedence than others.

[08:48] <autrijus> correct.

[08:53] <Darren_Duncan> ping Ingy

[08:53] <Darren_Duncan> how long have you been planning this freepan thing?

[08:53] <Darren_Duncan> I discovered you had 3 domain names registered, one back in 2002

[08:54] <autrijus> hey Darren_Duncan. I think the author part in module.pm is not yet parsed

[08:54] <autrijus> Darren_Duncan: he's been working on freepan for years.

[08:55] <autrijus> Darren_Duncan: but it's a matter of copying the block in Parser.hs line 294.

[08:55] <Darren_Duncan> autrijus, that's okay, I'm not using the Author part yet

[08:55] <autrijus> hm. can I have the author part without the version part

[08:55] <autrijus> or the version part without the author part

[08:55] <autrijus> according to S11?

[08:55] <Darren_Duncan> afaik, no

[08:55] <Darren_Duncan> version always comes straight after the base name

[08:56] <Darren_Duncan> I can look back at S11 ...

[08:56] <gaal> isn't "use Dog-(Any)-(Any);" real usage?

[08:57] <autrijus> gaal: mm?

[08:57] <Darren_Duncan> according to S11, you can't leave the version out and use author, but you can explicitly say 'Any' for version and specify an author

[08:57] <autrijus> oh. I mean in the module line

[08:57] <autrijus> not the use line.

[08:57] <gaal> ah, ok

[08:57] <Darren_Duncan> so saying nothing in any slot is the same as explicitly saying 'Any' for its effect

[08:58] <Darren_Duncan> in the module line, version seems to be required if you are going to give an author

[08:58] <Darren_Duncan> still, I don't see a problem with that

[08:58] <Darren_Duncan> version is used a lot more often

[09:00] <autrijus> okie.

[09:00] <Darren_Duncan> Also, I haven't yet decided which form of Author is best to use yet, so I'm simply not using it at all

[09:00] <gaal> Pugs Porting Program?

[09:00] <Darren_Duncan> it's a great feature, though

[09:01] <Darren_Duncan> some people on p6l are planning to do one

[09:01] <Darren_Duncan> make a program to port perl to perl

[09:01] <autrijus> yeah, larry is working on it, and alias here has another technology that may be an alternate way to do it

[09:01] <gaal> hmm, but "PPP" would make it p3; we're three Ps short.

[09:02] <lightstep> what is the second argument ofo reduceStatements (the Exp) ?

[09:02] <autrijus> lightstep: lastVal?

[09:03] <autrijus> the value yieleded from the last reduce

[09:03] <autrijus> it's there in the anticipation that some day we may need to refer to the last value.

[09:04] <lightstep> so should i pass it on if i don't use it?

[09:04] <Darren_Duncan> there is already a mature-ish CPAN module for parsing perl 5 into a syntax tree -- I suppose that would be ideal for generating equivalent perl 6 from

[09:04] <Darren_Duncan> it has a really short name

[09:05] <nothingmuch> Darren_Duncan: PPI

[09:05] <Darren_Duncan> sounds like it

[09:05] <nothingmuch> alias is it's maintainer

[09:05] <nothingmuch> =)

[09:05] <nothingmuch> (i think)

[09:06] <Darren_Duncan> I just looked that up by name, it is what I'm referring to

[09:06] <Darren_Duncan> PPI

[09:07] <Darren_Duncan> http://search.cpan.org/dist/PPI/

[09:08] <Darren_Duncan> if 'alias' equals 'Adam Kennedy' equals 'adamk' then yes

[09:09] <nothingmuch> i think that expr is true

[09:10] <Darren_Duncan> heck, even The Perl Foundation funded completion of PPI, so it must be big enough to use for something like this -- second phrase sayeth the POD

[09:11] <Darren_Duncan> seeya

[09:29] <Darren_Duncan> one more thing for those on Mac OS X ... I just , earlier today, installed SubEthaEdit on my machine ... so should there be a future collaboration effort that I might be able to contribute to, I have the means

[09:29] <Darren_Duncan> apparently it was used to great effect yesterday

[09:29] <gaal> anyone have any luck with subclipse and pugs? i can't seem to co the whole project, just subdirs from it?

[09:29] <Darren_Duncan> that is all

[09:30] <gaal> e.g. http://www.geotools.org/Subclipse+Checkout <- don't have a "trunk" dir in the structure

[09:30] <kungfuftr> komodo++ # automagically synced with cvs

[09:31] <autrijus> gaal: it works if you just give it the url

[09:31] <autrijus> instead of opening from a repository..

[09:31] <autrijus> it is perhaps simpler

[09:31] <autrijus> if you just quick eclipse

[09:31] <autrijus> goto workspace

[09:31] <autrijus> check out pugs

[09:32] <autrijus> and add "pugs" as a project.

[09:32] <autrijus> it will automagically work that way

[09:32] <gaal> ok, and import from filesystem?

[09:34] <autrijus> no, just create a new proj

[09:35] <autrijus> eclipse is smart enough that if there is already a directory with the name in the workspace

[09:35] <autrijus> it will just assume its settings from there

[09:35] <Juerd> Khisanth: No

[09:35] <Juerd> Khisanth: true is not a list operator. It is "not", but negated. Or well, "not" is "true", but negated.

[09:36] <webmind> #define true !false ?

[09:36] <Juerd> no

[09:36] <webmind> sounds like dos code 

[09:36] <webmind> i know

[09:36] <Juerd> It's not a value

[09:37] <webmind> ok

[09:37] <Juerd> "true $foo" return true if $foo is true, false if $foo is not true

[09:37] <Juerd> The *values* for true and false are bool::true and bool::false

[09:37] <Juerd> Made hard to type because you should never.

[09:39] <webmind> ok

[09:39] <webmind> #define 0 !1

[09:39] * Juerd sighs

[09:39] <Juerd> This isn't C

[09:40] <webmind> I know

[09:40] <webmind> sorry

[09:40] <Juerd> And true and false aren't to be used as values

[09:40] <webmind> yes yes

[09:40] <webmind> I got that

[09:40] <Juerd> So their values are highly irrelevant and uninteresting.

[09:40] <Juerd> They could be "yes" and "no" for all we're supposed to care

[09:40] <autrijus> so maybe "true" should be spelled "indeed"

[09:40] <autrijus> ;)

[09:40] <Juerd> autrijus: I was looking for a better name, you found it.

[09:41] <Juerd> autrijus: "true" is a terrible name, violating the least surprise thing. Or possibly: raping it.

[09:41] <autrijus> haskell has it as "otherwise".

[09:41] <autrijus> but anyway "true" is a bad bad bad name.

[09:41] <autrijus> oh nvm, it's not otherwise in haskell.

[09:41] <Juerd> Yes, indeed that's true. :)

[09:41] <autrijus> it's called "id" in haskell ;)

[09:43] <Khisanth> Juerd: but S03 lists it as a list op :/

[09:43] <Juerd> Khisanth: That's weird.

[09:44] <Juerd> I can't imagine what it should do with the extra arguments.

[09:44] <Juerd> And it having low precedence doesn't help making it a listop either

[09:45] <autrijus> p6l! p6l! change it to "indeed" or "id"! :)

[09:45] <autrijus> we can always argue that "id" is shorthand for "indeed"

[09:45] <Juerd> It says not is also a list op.

[09:45] <Juerd> I don't know how to interpret that.

[09:45] <Juerd> idd

[09:45] <autrijus> indd

[09:45] <autrijus> caddadaddadr

[09:45] <Juerd> idd is what Dutch people use for "inderdaad" (indeed), and what every english speaking person also understands as "indeed" :))

[09:45] <Khisanth> maybe it acts a bit like undef :)

[09:46] <Khisanth> turns everything in the list to true

[09:48] <Juerd> How useful is that?

[09:48] <Juerd> We have @foo 􏿽xBB= 1 for that

[09:50] <gaal> ghc 6.2.2 is out on windows/mingw, right?

[09:50] <gaal> (waiting for the 47mb 6.4.0 do dl...)

[09:52] <Juerd> autrijus: sent

[09:52] <Juerd> I had to read my own message three times before I understood what I had written :)

[09:52] <autrijus> Juerd: danke

[09:54] <gaal> checked in undef.t in manifest + some typo fixes

[09:55] <autrijus> gaal++

[09:56] <nothingmuch> gaal: i just got a plan error in undef.t

[09:56] <nothingmuch> is it fixed in this update?

[09:56] <gaal> should be 26

[09:57] <gaal> shouldn't there be a way to autoplan? which is better than no_plan, but still lets you not moose aroudn with explicit numbers

[09:57] <nothingmuch> autoplan how?

[09:58] <gaal> anyway nothingmuch, please do try again this time

[09:58] <nothingmuch> you could just read $?FILE

[09:58] <nothingmuch> but see t/base/given.t for how to break that

[09:58] <gaal> nuffin, i once saw someone doing push @tests, sub { a test } .... lots of times, then planning, then running.

[09:59] <nothingmuch> well, that someone was obviously drunk or something ;-)

[09:59] <nothingmuch> i would never stoop so low ;-)

[09:59] <nothingmuch> either way,  i think with the current state of Test.pm in pugs it's better to either plan or no_plan

[10:00] <DrHyde> does anyone have a recent enough ghc binary package for debian stable (x86) or OS X 10.2?

[10:00] <nothingmuch> just update the plan when you change things

[10:00] <DrHyde> getting it to build is proving to be a right bugger

[10:00] <nothingmuch> it's supposed to be a human-updated sanity check anyway

[10:00] <gaal> okay, still gettgin basic compilation errors with ghc 6.4 on mingw:

[10:00] <gaal> Chasing modules from: src/Main.hs 

[10:00] <gaal> Could not find module `System.Posix.Unistd': 

[10:00] <gaal>   use -v to see a list of the files searched for 

[10:00] <gaal>   (imported from src/Posix.hs)

[10:00] <gaal> make: *** [pugs.exe] Error 

[10:01] <gaal> what, windows isn't posix compliant? *feigns shock*

[10:04] <autrijus> ...

[10:04] <autrijus> src/config.h needs to say that it doesn't have POSIX I think.

[10:04] <autrijus> did it work with ghc 6.4 on activeperl?

[10:04] <autrijus> (it always workforme so I can't quite tell)

[10:05] <gaal> dunno, i have mingw and cygwin on this box

[10:06] <nothingmuch> autrijus: err, remember t/op/yen.t false-negatives due to prec?

[10:06] <autrijus> nothingmuch: yes?

[10:06] <nothingmuch> now the same issues are biting me in t/op/prec.t

[10:06] <nothingmuch> but the other way around

[10:06] <nothingmuch> please look at the test

[10:06] <nothingmuch> and the spec

[10:06] <nothingmuch> and the impl

[10:06] <nothingmuch> and tell me which of the 3 is insane or wrong

[10:06] <nothingmuch> i believe it's s03

[10:06] <nothingmuch> (insane)

[10:06] <autrijus> I believe S03 is intentional

[10:07] <nothingmuch> well, regardless

[10:07] <nothingmuch> tests based on it are not passing

[10:07] <autrijus> nod. ok.

[10:08] <nothingmuch> btw, we have some tests that look like they should be todo

[10:08] <nothingmuch> inc.t, subroutine_named_params

[10:08] <nothingmuch> should I butcher them?

[10:19] <autrijus> bbiab.

[10:19] <nothingmuch> ciao

[10:19] <autrijus> nothingmuch: yes, go ahead.

[10:28] *** Odin-FOO is now known as Odin-

[10:33] <jabbot> pugs - 754 - typo fixes

[10:33] <jabbot> pugs - 753 - undef.t updates

[10:33] <jabbot> pugs - 752 - op3 "index" -- simplified the code

[10:33] <jabbot> pugs - 751 - index works now -- but the code is quite

[10:33] <jabbot> pugs - 750 - Fixing t/op/index.t

[10:33] <jabbot> pugs - 749 - added version numbers to Sample-Module

[10:33] <jabbot> pugs - 748 - Another precedence problem on '='

[10:33] <jabbot> pugs - 747 - AlDep updates - changed all 'foreach' to

[10:33] <jabbot> pugs - 746 - * dvergin reported that -isrc needs to b

[10:33] <jabbot> pugs - 745 - First shot at tests for undef.

[11:03] <nothingmuch> autrijus: ping

[11:12] <jabbot> pugs - 756 - Global var test case fixed

[11:12] <jabbot> pugs - 755 - Todoify things that look like unimplemen

[11:42] <jabbot> pugs - 757 - Fudge things into todo state, make it co

[11:44] <theorbtwo> Morning, guys.

[11:44] <nothingmuch> morning theorbtwo 

[11:46] <Juerd> http://perlmonks.org/?node_id=439594

[11:46] <Juerd> Let this please kill this useless debate.

[11:46] <Juerd> s/useless/fruitless/

[11:56] *** sbkhh is now known as Odin-

[12:03] <theorbtwo> Sigh.  Juerd, you left out a critical fact that was in your power to give: print $fh ~~"Some string"; is, in fact, recommended syntax in a CPAN module: i18n.

[12:04] <theorbtwo> It's certianly not a show-stopper in my mind -- I think it should go in.

[12:04] <theorbtwo> But I'm a big believer in full disclosure.

[12:05] <theorbtwo> You might also consider running a set of PM obfus through a B::Concise both before and after your patch, and comparing them.

[12:05] <nothingmuch> print $fh ~~"some string"; # wtf is that?

[12:06] <theorbtwo> It runs "some string" through bitwise negation twice, and prints the result out to $fh.

[12:06] <theorbtwo> (The result being "some string" except in the presence of strange overloads.)

[12:06] <Juerd> nothingmuch: print $fh ~~localtime is a better example

[12:06] <Juerd> It's the lazy way to write print $fh scalar localtime

[12:07] <nothingmuch> ah

[12:07] <nothingmuch> oi vey

[12:08] <theorbtwo> Yes, but nobody recommends actually using that syntax.

[12:08] <theorbtwo> Except golfers, who I agree can probably be ignored.

[12:08] <Juerd> theorbtwo: And when would you print an i18n'ed string to a fh?

[12:08] <theorbtwo> Huh?  Well, me, rarely, because I think everybody should just learn English, dammit.

[12:08] <theorbtwo> People in general?  All the time.

[12:08] <theorbtwo> Producing a localized report.

[12:09] <theorbtwo> In a CGI.

[12:09] <Juerd> theorbtwo: And still, it's not ambiguous in the case of print ~~localtime or $fh->print(localtime) or print$fh+~~localtime or print$fh~+~localtime or print $fh~ ~localtime or print$fh(localtime)

[12:10] <Juerd> theorbtwo: With i18n?!

[12:10] <theorbtwo> I know, Juerd!  I'm not arguing that it's a showstopper!

[12:10] <Juerd> Possible but not likely.

[12:10] <theorbtwo> No, not with i18n.

[12:10] <crysflame> hi, juerd

[12:10] <Juerd> Hello, crysflame 

[12:10] <theorbtwo> I'd more likely use Locale::MakeText, which looks very sane.

[12:10] <Juerd> And Perl 5 has a special disambiguator noop for this ;)

[12:10] <Juerd> +

[12:11] <Juerd> So instead of print $fh ~~localtime, use print $fh+~~localtime, it's not even more characters

[12:11] <theorbtwo> I KNOW!

[12:11] <theorbtwo> You're being overly defensive.

[12:11] <Juerd> (Though the space between $fh and ~~localtime is optional, I think anyone not using it is wrong anyway)

[12:11] <Juerd> theorbtwo: I'm trying to be very, very clear

[12:11] <Juerd> That there is no problem.

[12:12] <theorbtwo> You're wrong; there is a problem, but all indications is that it is a very very very small problem.

[12:12] <Juerd> Before I believe that there is indeed a problem, I want to see this syntax used in actual code

[12:12] <Juerd> It's contrived

[12:13] <Juerd> I don't believe *anyone* actually has this in existing pre-today code.

[12:13] <Juerd> And all the golfs continue to work anyway, unless golf prints to an fh, which I don't believe either.

[12:14] <Juerd> In other words: if there is a problem in theory, but not in practice, the theory is wrong :)

[12:21] *** wilx` is now known as wilx

[12:21] <theorbtwo> Juerd, would you like a random sample of the code bits of N obfu off of PM?

[12:21] <theorbtwo> Or, for that matter, N random nodes?

[12:24] <crysflame> purl: mahna

[12:24] <crysflame> purl: mahna mahna

[12:25] <crysflame> argh, hi #perl

[12:25] *** theorbtwo is now known as hash-perl6

[12:25] <hash-perl6> Hi, crysflame.

[12:25] *** hash-perl6 is now known as theorbtwo

[12:26] <theorbtwo> Mornin, lightstep.

[12:26] <lightstep> good afternoon

[12:27] <theorbtwo> Good morning, hlen.

[12:27] <theorbtwo> Why do people always join a bunch at a time?

[12:27] <lightstep> i joined 'cause i committed

[12:27] <lightstep> which is because lunch is over

[12:28] * theorbtwo wonders if anybody fixed his assert_ghc thing.

[12:28] <lightstep> autrijus did

[12:29] <lightstep> tests are starting to fail all over the place

[12:31] <nothingmuch> lightstep: i have a loop, which watches svn up and pops up a window on test fails

[12:31] <nothingmuch> afaict it's no different than what it was several hours ago

[12:31] <nothingmuch> except some fixes i made

[12:32] <jabbot> pugs - 758 - more work on the command shell: it's now

[12:33] <lightstep> nothingmuch, i'm not on that scale. i remember that once all tests passed, now some fail

[12:34] <nothingmuch> ah

[12:34] <Juerd> theorbtwo: Why?

[12:34] <nothingmuch> well, undef.t is sort of ok to fail

[12:34] <nothingmuch> gaal hasn't decided whether it's bugs or todo

[12:34] <nothingmuch> autrijus can prolly veto it

[12:34] <nothingmuch> i also committed a test that looks like it uncovers some bugs

[12:34] <nothingmuch> it's causing 3 fails

[12:34] <lightstep> all rest are todos?

[12:35] <kungfuftr> me-- # bah

[12:35] <lightstep> ?

[12:35] <nothingmuch> and scw also submitted a test case for a bug

[12:35] <kungfuftr> inc.t foulup

[12:35] <nothingmuch> lightstep: there should be 9 subtests failing as of head revision

[12:35] <nothingmuch> kungfuftr: nevermind, i cleaned it up

[12:36] <kungfuftr> =0)

[12:36] <nothingmuch> it wasn't that bad, btw ;-)

[12:36] * kungfuftr shouldn't commit stuff when he's stressed out

[12:36] <lightstep> yes, 9 fail

[12:37] <gaal> you guys get a syntax error on t/syntax/subroutine_named_params too?

[12:37] <nothingmuch> lightstep: they have all been investigated

[12:37] <nothingmuch> gaal: i fixed that

[12:37] <lightstep> kungfuftr, i did it yesterday. fucked up some part of Main.hs

[12:37] <nothingmuch> lightstep: apart from undef.t where I don't know if they should fail, all should fail because they are bugs

[12:37] <gaal> i was actually waiting for autrijus to say if the undef.t fails are ok or should be moved to todo

[12:38] <nothingmuch> ok, so lets leave it as fail

[12:38] <gaal> "todone" :)

[12:40] <gaal> i have 2 new trivial cases, but it's not worth a commit.      also, there are about 20 tests i imagine waiting to be written in undef but they are majorly todo (rules, subs etc).. should i write them in eval?

[12:40] <theorbtwo> Sounds good.

[12:41] <lightstep> is the parsing of n-ary operators working?

[12:41] <theorbtwo> N-ary prefix operators?  Should be.

[12:42] <gaal> so: i say "my Array $an_ary;" . Should $an_array be defined now (my guess is not)?

[12:42] <lightstep> i mean, is $a Y 4b Y 4c different from ($a Y $b) Y $s as they should be?

[12:42] <kungfuftr> lightstep: yar, i'm a perfectionist though, so it doesn't bode well for me

[12:43] <theorbtwo> Oh, that'd be a listop  (All listops are unary, at least as far as Prim.hs is concerned.)

[12:43] * lightstep looks at the screen

[12:44] <lightstep> the way i wrote the expressions, they don't seems alike at all

[12:45] <Juerd> theorbtwo: Why?

[12:45] <theorbtwo> I have no idea.

[12:45] <Juerd> Then why ask?

[12:45] <lightstep> Juerd, they get a list of arguments as a single parameter

[12:45] <theorbtwo> Why ask what?

[12:45] <Juerd> No, re PM obfus

[12:46] <theorbtwo> Oh.

[12:46] <theorbtwo> Because it's a selection of perl code that's not written to standards.

[12:46] <theorbtwo> I thought you were asking about listops.

[12:46] <Juerd> Sure

[12:46] <Juerd> Do you have a screen scraper for it?

[12:46] <nothingmuch> gaal: you should use eval everywhere it doesn't parse or is fatal to run, but other than that, as little as possible, IMHO

[12:47] <nothingmuch> lightstep: infix nary works now

[12:47] <nothingmuch> but (@a Y @b) Y @c is broken as a result

[12:47] <nothingmuch> look at t/op/zip.t

[12:47] <nothingmuch> autrijus said it will take a lot of work

[12:48] <theorbtwo> I'm a god, Juerd; I can find ways of getting what I want.

[12:48] <Juerd> Ah

[12:48] <Juerd> I'd like a sample, yes

[12:48] <Juerd> afk  # need to go

[12:49] <nothingmuch> ciao Juerd 

[12:49] <lightstep> the whole parsing module looks totaly irrational (or maybe unhaskellish)

[12:50] <nothingmuch> could be ;-)

[12:50] <gaal> nothing, clearly, but the question was whether to go ahead with wiriting tests that knowingly need the eval. i decided yes

[12:50] <nothingmuch> either way, i know that nary and listop are sort of half-baked solutions, which should be better implemented with MMD

[12:50] <theorbtwo> I can't think of many reasons why I'd not want a correct test, and all of them are bad reasons.

[12:59] <nothingmuch> gaal: provided that the test is correct

[12:59] <gaal> well, i hope it is, but it's kinda hard to say :)

[13:00] <nothingmuch> i.e., when the feature is there it will work both with and without eval

[13:00] <nothingmuch> well, 80% of the work has been done, in theory

[13:01] <gaal> classes? types? subs? rules?

[13:02] <lightstep> aren't subs done?

[13:03] <nothingmuch> lightstep: some

[13:03] <nothingmuch> but it's a big thing

[13:03] <gaal> autrijus said no, yesterday at least.

[13:03] <nothingmuch> syntax/subroutine_named_params tests struff

[13:03] <nothingmuch> unspecced/cont* does other things

[13:04] <nothingmuch> but i reckon there's lots more

[13:04] <nothingmuch> err, objects should be fun

[13:04] <nothingmuch> but i reckon it won't work till it all works, for the most part

[13:05] <nothingmuch> start by trying to test moderately complex examples

[13:05] <nothingmuch> like a class with delegation

[13:05] <nothingmuch> see what you hit on the way

[13:05] <nothingmuch> (class defs, opaque type, isa_ok, accessors, instance variables, etc)

[13:05] <nothingmuch> and test that too

[13:06] <lightstep> how should i document modules?

[13:06] <nothingmuch> lightstep: theoretically in kwid

[13:06] <nothingmuch> but pod is probably also ok

[13:07] <lightstep> is there an introduction to kwid?

[13:07] <nothingmuch> to kwid i'm not sure

[13:07] <nothingmuch> let me look at some irc logs

[13:08] <nothingmuch> i'm not sure whether it's a spec draft, or an intro

[13:08] <nothingmuch> to get a conceptual you should read Juerd's pod tutorial

[13:09] <nothingmuch> kwid and pod are similar enough for it to be beneficial

[13:09] <gaal> anyone get tests to run in Eclipse, please say how in the wiki

[13:10] <nothingmuch> ./ext/Pugs-Documentation/perlkwid.kwid

[13:10] <nothingmuch> ./ext/Pugs-Documentation/perlkwidspec.kwid

[13:10] <nothingmuch> oh, he left

[13:13] <decay> is kwid as slow as kwiki?

[13:14] <nothingmuch> decay: ingy should probably be up in a few hours

[13:14] <nothingmuch> he should be able to answer that, i guess

[13:29] <stevan> morning nothingmuch 

[13:32] <theorbtwo> Allo, fayland, b6s

[13:32] <theorbtwo> And stevan, I suppose.

[13:32] <fayland> hellp theorbtwo

[13:32] <fayland> what;s the meaning of b6s

[13:32] <stevan> morning orbtwo 

[13:33] <fayland> o ,i see . a man

[13:39] <iblech> Hi, there seems to be sth. wrong with (implicit) numifying

[13:40] <iblech> ./pugs -e 'say int +"1.01"' ==> 1 (correct)

[13:40] <iblech> ./pugs -e 'say int "1.01"' ==> 0 (wrong)

[13:41] <nothingmuch> morning stevan

[13:41] <iblech> The problem doesn't seem to be related to "int": ./pugs -e 'my @a = <a b c>; say @a["1.01"]' ==> a (wrong, correct is b)

[13:42] <theorbtwo> BTW, iblech, no reason to have your bot log the channel; there's already logs at http://xrl.us/e98m

[13:44] <iblech> theorbtwo: Jup, know, but my webinterface is better :) see http://m19s28.vlinux.de/iblech/iblechbot-2.png

[13:46] <theorbtwo> Hm, does look quite slick.

[13:47] <iblech> theorbtwo: Thanks :)

[13:52] <scw> Seams because in ghc, reads "1.0" becomes []

[14:07] <nothingmuch> is anyone writing a test for this?

[14:09] <autrijus> greetings!

[14:09] <nothingmuch> hola autrijus 

[14:10] <autrijus> yo. what's up?

[14:10] <theorbtwo> G'morning, autrijus.

[14:10] <theorbtwo> Looks like ibelch found a bug: ./pugs -e 'say int "1.01"' ==> 0

[14:10] <theorbtwo> nothingmuch is about to write a test, I think.  ;)

[14:11] <pasteling> "iblech" at 80.81.8.11 pasted "Test for bug regarding numifying of Strings" (4 lines, 93B) at http://sial.org/pbot/8207

[14:11] <autrijus> iiinteresting.

[14:11] <nothingmuch> =)

[14:11] <gaal> hey. r760 adds more TODOs to undef

[14:11] <autrijus> nice

[14:11] <gaal> autrijus, there are three failures i'm not sure are bugs or TODOs

[14:11] <autrijus> sure. what are them?

[14:12] <jabbot> pugs - 760 - More tests (many TODOs)

[14:12] <jabbot> pugs - 759 - * add back 'eval' for ghci debugging; 'm

[14:12] <Juerd> That SubEthaEdit thing is so cool, I might get a mac mini just to see people hack :)

[14:12] <nothingmuch> Juerd: save money

[14:12] <gaal> aggregates: how do they work with undef and defined()?

[14:12] <nothingmuch> pearpc

[14:12] <Juerd> pearpc?

[14:12] <nothingmuch> it's a ppc/chrp emulated for i386

[14:13] <theorbtwo> PPC emulator.

[14:13] <nothingmuch> or maybe not only for i386

[14:13] <Juerd> That measn I need an OS X license that I can never get OS-less hardware for

[14:13] <nothingmuch> think bochs, only the other way around

[14:13] <theorbtwo> It's what I use for SEEing, but it's a bit on the bugy side.

[14:13] <gaal> if i say undef @ary, shouldn't it be !defined()?

[14:14] <autrijus> I'd say so, yeah.

[14:14] <theorbtwo> No; definedness is a property of a scalar, not an array.

[14:14] <nothingmuch> err, $100 for osx vs $500 for mac mini

[14:14] <nothingmuch> =P

[14:14] <autrijus> uh.

[14:14] <autrijus> I thought undef is a value and undef anything returns that.

[14:14] <mattc> Err, the need to define sub before they're called... is that just a pugs implementation issue? (just starting with perl6/pugs - is this the right place for these kinds of questions??)

[14:14] <autrijus> mattc: that is a pugs TOOD.

[14:14] <autrijus> err, TODO.

[14:15] <gaal> ok. oh, also, %hash{"bar"} ; ok(!defined %hash{"bar"}) does not obtain.

[14:15] <mattc> ah

[14:15] <mattc> cool

[14:15] <autrijus> mostly because we had not had BEGIN support.

[14:15] <theorbtwo> That'd be a bug, gaal.

[14:15] <autrijus> and that's mostly because $real_work :-/

[14:15] <autrijus> gaal: that is definitely a bug.

[14:15] <theorbtwo> Right, it returns an undefined value, which can be stuck in an element of an array.

[14:15] <Juerd> nothingmuch: But when you look at it that way, that makes the mac mini a $400 machine

[14:15] <mattc> ok

[14:16] <Juerd> nothingmuch: Which runs Linux and is thus by itself much worth it.

[14:16] <nothingmuch> Juerd: well, sure

[14:16] * Juerd doesn't have a lot of money, but likes spending it wisely

[14:16] <autrijus> oh btw.

[14:16] <autrijus> int '0x123'

[14:16] <Juerd> And that doesn't always mean choosing the cheapest option

[14:16] <gaal> well, the same happens with delete %hash{"bar"}.

[14:16] <autrijus> is 291

[14:16] <nothingmuch> autrijus: bottom of t/op/inc.t - are those parse bugs? misimplementations? or what?

[14:16] <mattc> where is the TODO - is it in the distro somewhere?

[14:16] <autrijus> not sure if it's a bug.

[14:16] <autrijus> I'd argue it's a feature ;)

[14:16] <theorbtwo> I'm not sure -- ask p6l?

[14:16] <Juerd> autrijus: IMO, strings should numify as they would if they were literal numbers

[14:17] <nothingmuch> Juerd: /me just bought $200 earphones and argues it's one of the best buys he ever did

[14:17] <autrijus> Juerd: that is what pugs do.

[14:17] <Juerd> This has afaik not yet been discussed on p6l, but I have been meaning to

[14:17] <autrijus> Juerd: raise it? I hope to get a quick "ok" from larry

[14:17] <Juerd> But perhaps someone else should start the thread

[14:17] <Juerd> autrijus: I've raised too much already, I think.

[14:17] <decay> Juerd: btw: http://vim.dindinx.net/orig/html/remote.txt.php :)

[14:17] <nothingmuch> decay: subetha is more than that

[14:17] <nothingmuch> it's collaborative

[14:18] <decay> i know

[14:18] <nothingmuch> vim can do that too?

[14:18] <Juerd> decay: What about that?

[14:19] <Juerd> Oh, it's about the document

[14:19] <Juerd> decay: Looks very complex

[14:20] <mattc> autrijus: where is the authoritative TODO list?

[14:20] <Juerd> nothingmuch: I should note that I have been looking for excuses to buy a mac, and the mini made it affordable

[14:20] <nothingmuch> mattc: grep -r todo_ t

[14:20] <mattc> oh - I see

[14:20] <nothingmuch> Juerd: it is a very good platform, albeit with some drawbacks

[14:20] <Juerd> nothingmuch: Also, I have been looking for a smaller enclosure for my PC

[14:20] <mattc> thanks

[14:21] <Juerd> I don't know if I'd like OS X

[14:21] <Juerd> I'd have to use it for a few weeks first

[14:21] * nothingmuch 's reasons for using it are that it mostly works

[14:21] <nothingmuch> for every day use it's less config savvy

[14:21] <Juerd> One thing that scares me is that you can't install a 2nd harddisk in the Mini

[14:21] <Juerd> Which means no RAID 1

[14:21] <Juerd> Which is scary.

[14:21] <nothingmuch> but i don't like configuring everything

[14:21] <Juerd> I have the same problem with my laptop.

[14:22] <nothingmuch> given a good enough toolset and something that works good enough out of the box, i'm happy

[14:22] <nothingmuch> and osx has that for me

[14:22] <Juerd> KDE has that for me mostly

[14:22] <nothingmuch> what if you yank out the cdrom?

[14:22] <Juerd> But I'm willing to give OSX a try

[14:22] <Juerd> nothingmuch: That means I don't have an optical drive anymore.

[14:22] <decay> Juerd: you can raid to an usb disk

[14:22] <webmind> Juerd, usb/fw drive

[14:22] <Juerd> decay: Won't that be very slow?

[14:22] <gaal> uhhhh, this gives an error:

[14:22] <gaal> %hash{"bar"} = "baz";

[14:23] <nothingmuch> usb2 or fw - shouldn't notice

[14:23] <gaal> when that key already exists

[14:23] <decay> Juerd: if it's usb2 or firewire it'll probably be acceptable

[14:23] <nothingmuch> gaal: test test test!

[14:23] <decay> Juerd: the builtin disk is 2.5" anyway

[14:23] <gaal> it kills the test, nm

[14:23] <webmind> Juerd, replace the optical drive with a disk and use a fw/usb optical drive ?

[14:24] <nothingmuch> gaal: even in an eval?

[14:24] <webmind> hmm, /me has very bad experiences with usb2 and duplex

[14:24] <pasteling> "gaal" at 192.115.25.249 pasted "can't reassign to hash elem?" (217 lines, 5.5K) at http://sial.org/pbot/8209

[14:25] <Juerd> webmind: I don't know

[14:25] <webmind> Juerd, what ?

[14:25] <jabbot> webmind: what is gugod?!

[14:25] <Juerd> webmind: The small size is practically gone with an external optical drive

[14:25] <gaal> nuffin, please confirm at http://sial.org/pbot/8209

[14:25] <webmind> jabbot, sorry ?

[14:25] <jabbot> webmind: Tell me more about that.

[14:25] <webmind> jabbot, about what ?

[14:25] <jabbot> webmind: Tell me more about that.

[14:25] <gaal> no, not in an eval

[14:26] <webmind> darnit

[14:26] <gaal> sorry, i lagged

[14:26] <nothingmuch> then test in an eval =)

[14:26] <Juerd> webmind: It's a /bot$/

[14:26] <webmind> Juerd, yeah.. got that :)

[14:26] <webmind> Juerd, yeah.. probably the same if you want an external drive for raid ?

[14:29] <gaal> so, uh, yeah, even in an eval!

[14:29] <nothingmuch> oi

[14:29] <Juerd> webmind: No, that'd be 3.5"

[14:29] <nothingmuch> bug autrijus

[14:29] <gaal> autrijus: ping

[14:29] <webmind> Juerd, portable slimdrive isn't that much bigger in volume ?

[14:30] <Juerd> Does anyone have experience with 1.2 versus 1.4 GHz PPCs?

[14:30] <Juerd> Is the .2 GHz worth $100?

[14:30] <gaal> looks like serious breakage in hash -- or maybe i'm misusing the syntax?

[14:30] <Juerd> webmind: But much more expensive than cheap harddisk + enclosure

[14:30] <nothingmuch> ppcs usually don't need much mhz

[14:30] <gaal> well, i'm ci'ing this then.

[14:31] <Juerd> nothingmuch: Which means 200 MHz is a big improvement?

[14:31] <nothingmuch> no

[14:31] <webmind> Juerd, true.. but I'm not so sure about the performance for usb disks for raid

[14:31] <webmind> no dma..

[14:31] <gaal> r762

[14:31] <nothingmuch> r761 - "1.01"

[14:32] <Juerd> Ah well, I'll go for the expensive option I think

[14:32] <jabbot> pugs - 762 - Seems to expose fatal bug in hashes

[14:32] <jabbot> pugs - 761 - int("1.01") eq 0 fails

[14:32] <Juerd> It takes them 2 weeks to deliver one. That's LONG.

[14:32] <webmind> Juerd, 17% speed increase

[14:33] <nothingmuch> webmind: not bloody likely

[14:33] <webmind> Juerd, your going to do raid over usb/fw ?

[14:33] <nothingmuch> the bus is probably the same speed

[14:33] <webmind> nothingmuch, uhuh

[14:33] <Juerd> webmind: No, no raid

[14:33] <Juerd> External backups

[14:33] <nothingmuch> and ram/disk are usually the limiting factors

[14:33] <webmind> ah k

[14:33] <Juerd> I'm getting 512 MB anyway

[14:33] <Juerd> 256 is very little

[14:33] <webmind> yes

[14:34] <webmind> I heard memmory @ macshops is expensive though

[14:34] <nothingmuch> it is

[14:34] <nothingmuch> but i'd invest in 1gb instead of 200mhz more

[14:34] <gaal> i've no experience with macs, but i'd not buy a computer with less than 1gb ram today

[14:34] <Juerd> nothingmuch: That's $250

[14:34] <Juerd> Not going to do that

[14:34] <Juerd> Maybe I'll upgrade later

[14:34] <gaal> check if you can buy non-apple maybe?

[14:34] <Juerd> But $250 extra is too much for now

[14:35] <webmind> if the bus speed is staying the same.. I don't the the 0.2ghz is going to matter much ?

[14:35] <Juerd> gaal: I want a small box and I've been wanting to try an Apple for a while

[14:35] <gaal> for PCs, 512MB is about $100 where i live

[14:35] <webmind> well more heat maybe

[14:35] <Juerd> gaal: No PC enclosure is this small and this silent with this processing power.

[14:35] <gaal> no i mean

[14:35] <gaal> only the RAM

[14:35] <Juerd> gaal: Oh, right. Probably.

[14:35] <webmind> gaal, elcheapo here is 60euro 

[14:35] <gaal> they probably OEM it from kingston anyway

[14:35] <Juerd> It's SO-DIMM though

[14:35] <Juerd> Which is not as cheap as normal dimm

[14:36] <webmind> Juerd, don't buy the mem from mac ?

[14:36] <Juerd> How about: get 512 MB now, save for another 512 and then add that

[14:36] <webmind> could do that

[14:36] <Juerd> There's no reason to rush things

[14:36] <webmind> uhuh

[14:36] <webmind> 512mb is enough usually

[14:36] <Juerd> Except I find 2 weeks very long

[14:36] <Aankhen``> How about: donate the money to Aankhen``? :-D

[14:37] <Juerd> In 2 weeks, pugs will have all of Perl 6 implemented

[14:37] <Juerd> And by then I can no longer see SEE in action :)

[14:37] <gaal> just make sure you're not screwed with the wrong config -- ie that you have a free slot and all that

[14:37] <Juerd> gaal: Apple's very clear about that. The option explicitly says it's a 1 dimm config with 1 free

[14:37] <webmind> Juerd, find a retailer with them in stock ?

[14:37] <Juerd> Oh, hm, no

[14:37] <Juerd> Just that it's 1 dimm

[14:37] <Juerd> I think it'll have 2 slots though

[14:38] <Juerd> And if not, then my current choice doesn't matter anyway :)

[14:38] <gaal> :)

[14:38] <Juerd> webmind: Good idea. Apple retailers in our country?!

[14:38] <webmind> Juerd, sure

[14:38] <Aankhen``> Have rules been implemented?

[14:38] <webmind> Juerd, but now to find one with mini's on stock :)

[14:38] <webmind> Juerd, afaik there are 2 in the hague

[14:38] <Juerd> webmind: Dutch people think apples are fruits. Where are these apple retailers you think exist?

[14:39] <webmind> vt100 sells apple I think.. but they don't have any on stock

[14:39] <webmind> and there's another one in the hague

[14:39] <webmind> that might have stock

[14:39] <Juerd> url?

[14:39] <webmind> and there is one in amsterdam I think..

[14:39] <webmind> lukkie bought his mini there afaik

[14:40] <webmind> Juerd, good one :)

[14:40] <webmind> Juerd, goudengids ?

[14:40] * gaal needs a break. see you later.

[14:42] <webmind> Juerd, sounds bad.. more people complaining about backorders

[14:43] <Juerd> What does?

[14:44] <nothingmuch> Juerd: i'd be nitpicky and equip it with both wifi and bluetooth

[14:46] <webmind> Juerd, http://www.ljs.nl/

[14:46] <Juerd> nothingmuch: Doesn't it support USB dongles at all then?

[14:46] <Juerd> The airport is expensive

[14:46] <nothingmuch> airport is good

[14:47] <decay> hm, the bluetooth adapter is overpriced

[14:47] <nothingmuch> bluetooth for $30 more is about as expensive as a dongle

[14:47] <nothingmuch> at least now

[14:47] <Juerd> webmind: baggersite :)

[14:47] <nothingmuch> if it's bundled

[14:47] <Juerd> nothingmuch: What's so good about airports?

[14:47] <nothingmuch> Juerd: laptop fun

[14:47] <Juerd> It's not a laptop

[14:48] <nothingmuch> it can be a base station

[14:48] <Juerd> (It's smaller... :P)

[14:48] <nothingmuch> it can be away from cables if needed

[14:48] <webmind> Juerd, true

[14:48] <Juerd> I have an access point. In fact, I have three.

[14:48] <nothingmuch> ah

[14:48] <nothingmuch> in that case, don't bother ;-)

[14:48] <Juerd> And ethernet cables everywhere :)

[14:48] <Juerd> practically

[14:48] <Juerd> "Macs met ervaring zijn ideaal voor:

[14:48] <Juerd> - Windows gebruikers die op zoek zijn naar een echte computer"

[14:49] * nothingmuch would never ever want to have more than 2-3 computers

[14:49] <Juerd> ("Experienced (used) macs are ideal for: - Windows users looking for a real computer"

[14:49] <Juerd> )

[14:49] <webmind> nothingmuch, why not ?

[14:49] <nothingmuch> too much trouble, configuring, etc

[14:49] <Juerd> nothingmuch: I have two computers: one workstation at home and a laptop, which is my workstation at the office

[14:49] <nothingmuch> i want one puter to do the lifting

[14:49] <nothingmuch> one puter to call my own

[14:49] <Aankhen``> I need three compooterz.

[14:50] <theorbtwo> We've got six in our appartment, for two users.

[14:50] * webmind has 2 wireless computers/routers, a laptop, a laptop from work and a pda

[14:50] <nothingmuch> and maybe another one for playing around, or being a sort of backups

[14:50] <webmind> most stuff just works

[14:50] <webmind> plan on building a development machine

[14:50] <Juerd> apple--  # wont ship USD minis outside the US

[14:50] <webmind> and one for hosting

[14:50] <Juerd> And they use 1:1 EUR:USD

[14:50] <webmind> Juerd, uhuh

[14:50] <theorbtwo> Wow.  That's harsh.

[14:50] <Juerd> Smart, though. :)

[14:51] <Juerd> Oh, I need the dutch one

[14:51] <Juerd> For the BTW

[14:51] <Juerd> (VAT)

[14:51] <theorbtwo> You could get somebody in the US to recieve it, and re-ship it.

[14:51] <webmind> Juerd, the inc btw price is also the same between germany and the netherlands

[14:51] <theorbtwo> Might still be cheaper.

[14:51] <Juerd> webmind: Then .nl is better :)

[14:51] <Juerd> Cheaper for me

[14:51] <theorbtwo> No import duties if you mark it "gift".

[14:51] <webmind> uhuh

[14:51] <webmind> theorbtwo, right

[14:51] <webmind> theorbtwo, doesn't work

[14:51] <Juerd> theorbtwo: Enter dutch customs :(

[14:52] <Juerd> They're actually good at what they do

[14:52] <webmind> theorbtwo, if they estimate the value above somethling 20 euros

[14:52] <theorbtwo> Oh, I thought that was an EU-wide thing.

[14:52] <webmind> there's nothing EU wide but fucked up laws

[14:52] <webmind> and eu subsidies

[14:52] <lightstep> copyright policy?

[14:52] <Juerd> apple++  # they manage to convey lack of keyboard and mouse as something positive

[14:53] <webmind> Juerd, how ?

[14:53] <nothingmuch> Juerd: don't forget that in the US they don't include taxes etc

[14:53] <theorbtwo> Oh, yeah, forgot about that.

[14:53] <nothingmuch> because law doesn't require it

[14:53] <theorbtwo> Well, that's not true.

[14:53] <theorbtwo> They need to pay sales tax if they have a presence in the state in question.

[14:54] <webmind> nothingmuch, neither do you have to pay taxes in certain states or if you live in a different state

[14:54] <theorbtwo> But I bet they're real crafty about that.

[14:54] <Juerd> nothingmuch: Customs will add them

[14:54] <nothingmuch> webmind: true, but err, stuff usually compilcates onwards

[14:54] <webmind> Juerd, but you call/visit the retailer ?

[14:54] <Juerd> webmind: Their site sucks

[14:54] <webmind> nothingmuch, never had issues with it

[14:54] <nothingmuch> when ordering from abroad i always add a 30% overhead

[14:55] <webmind> Juerd, yes.. but I hear the shop is good

[14:55] <webmind> they're not a webshop

[14:55] <Juerd> The ljs thing?

[14:55] <theorbtwo> Last time I got something shipped internationally that wasn't marked as a gift, I ended up paying >100% duties on it.

[14:55] <webmind> yes

[14:55] <Juerd> Do you know where it is?

[14:55] <webmind> yes.. the hague

[14:56] <Juerd> ... :)

[14:56] <webmind> http://www.ljs.nl/Resources/kaartje.jpeg

[14:56] <webmind> map

[14:56] <Juerd> Are they likely to have minis in stok?

[14:56] <Juerd> Ah, I see the route page now

[14:56] <webmind> the thick black lines are the trainrails

[14:56] <webmind> Juerd, dunno.. call 'm ?

[14:59] <autrijus> rehi.

[14:59] <autrijus> I've threw in a cheap hack to get 1.0 parsed as int.

[14:59] <nothingmuch> hola autrijus 

[15:00] * autrijus reruns the tests to see what's failing

[15:02] <jabbot> pugs - 763 - * cheap hack to get '1.0' to VIntify

[15:02] <nothingmuch> autrijus: t/base/num.t passes now?

[15:02] <iblech> nothingmuch: t/base/num..........................ok

[15:04] <lightstep> autrijus, did your fix cancel the whole non-integer numbers?

[15:04] * nothingmuch forgot if it's todo_is or is

[15:04] <lightstep> s/the whole/all the/

[15:05] <iblech> nothingmuch: they're isa_ok and is

[15:05] <nothingmuch> yeah i see now

[15:06] <lightstep> err

[15:07] <webmind> Juerd, tried machouse in rotterdam ?

[15:08] <autrijus> lightstep: my fix just takesWhile (/= '.')

[15:08] <autrijus> lightstep: again, cheap hack

[15:08] <ingy> hola

[15:09] <nothingmuch> autrijus: lumi asks if ¥ is lazy

[15:09] <nothingmuch> i assume all listops are lazy, in a way?

[15:09] <theorbtwo> Allo, ingy.

[15:09] <autrijus> that is my interpretation also.

[15:10] <theorbtwo> Sorry if I was overly harsh the other day.

[15:10] <ingy> hi theorbtwo 

[15:11] <ingy> theorbtwo: no worries. I should just get stuff done instead of spouting about it.

[15:13] <nothingmuch> Juerd: when you do buy a mac, i have some power user tips

[15:13] <nothingmuch> like harnessing Kicker

[15:13] <nothingmuch> and doing funny vt100 codes that make background compilation a breeze

[15:14] <autrijus> scw: I'm re-reading your ??:: writeup now. it's helpful.

[15:15] <ingy> autrijus: I've never seen MSWin32 use C:\usr\lib for privlib

[15:15] <ingy> it can't be an ActivePerl

[15:18] <autrijus> ingy: AP can change install path.

[15:18] <autrijus> which is likely what happened

[15:18] <Juerd> webmind: No

[15:18] <autrijus> or maybe no AP, but MinGWPerl

[15:18] <autrijus> but the idea is that we shouldn't bork out...

[15:18] <Juerd> nothingmuch: Kicker?

[15:18] <Juerd> nothingmuch: And 'breeze'?

[15:18] <webmind> Juerd, it's near rdam CS, so not too far

[15:19] <nothingmuch> breese?

[15:19] <nothingmuch> breeze <-- righter

[15:19] <Juerd> Ah

[15:19] <nothingmuch> easy, err, fun

[15:19] <Juerd> nothingmuch: What is it? :)

[15:19] <Juerd> Why easier/more fun?

[15:19] <nothingmuch> Kicker is a nice, sort of hidden feature

[15:19] <webmind> Juerd, nm.. macmini temp. sold out

[15:19] <ingy> autrijus: definitely. I just put that in there to see if it ever would happen. I got my answer. fixing...

[15:19] <autrijus> danke!

[15:20] <nothingmuch> and another thing is some coolness (http://homepage.mac.com/uucee/macosx/terminal-app-hints.html) to make your terminal effective

[15:20] <nothingmuch> i have a script, for example, that runs our build system

[15:20] <nothingmuch> it docks the window, and then raises it if it sees '***' in stderr, and raises it when it's done

[15:20] <nothingmuch> same thing for the test harness

[15:20] <nothingmuch> mui fun

[15:30] * nothingmuch writes a growl based rss reader thingy

[15:30] <nothingmuch> XML::RAI + XML::RSS::Timing + Mac::Growl

[15:30] <nothingmuch> anyone intersted, bug me in a while

[15:31] <ingy> autrijus: did not you say yesterday that you can assign to %Config?

[15:31] <ingy> ie $Config{archlib} = 'C:\usr\lib';

[15:32] <nothingmuch> hmm... maybe there was a misunderstanding

[15:32] <nothingmuch> autrijus: is it per runtime?

[15:32] <nothingmuch> or is it actually persistent?

[15:32] <autrijus> ingy: I meant that you write write to Config.pm.

[15:32] <autrijus> s/write/can/

[15:32] <autrijus> nothingmuch: persistent.

[15:32] <nothingmuch> but not via the tie interface?

[15:33] <ingy> %Config::Config is read-only

[15:33] <autrijus> not unless you override STORE.

[15:33] <autrijus> which you can

[15:33] <autrijus> just won't be pretty.

[15:33] <nothingmuch> why not?

[15:33] <nothingmuch> it doesn't need to be efficient or anything

[15:33] <autrijus> I'd do with overlaying %Config instead.

[15:33] <nothingmuch> it can just rewrite Config.pm

[15:33] <autrijus> use Config '%Config'; my %c = %Config; untie %Config; %Config = %c;

[15:34] <nothingmuch> and keep %c in a storable?

[15:34] <autrijus> ingy: it's read only because it's tied... just untie it

[15:34] <autrijus> something like that.

[15:35] <ingy> our %Config = $Config::Config;

[15:35] <nothingmuch> and for lookups etc, at runtime, perl internally goes to %Config?

[15:35] <ingy> Odd number of elements in hash assignment at util/PugsConfig.pm line 6.

[15:35] <autrijus> ingy: s'$'%'

[15:35] <nothingmuch> tr/$/%/;

[15:35] <ingy> ack

[15:35] <ingy> I'm not awake yet

[15:35] <nothingmuch> =D

[15:35] <nothingmuch> autrijus: our %Config = $Config::Config;%'

[15:36] <ingy> nothingmuch: :P

[15:36] <autrijus> yeah whatever :-p

[15:44] <Juerd> webmind: hoe weet je dat?

[15:47] <Juerd> ah

[15:47] <Juerd> *overal* uitgeverkocht

[15:53] <gaal> autrijus, there seems to be a fatal error inside an eval in the latest undef.t; can you take a look?

[15:53] <autrijus> greetings pmichaud-san

[15:53] <autrijus> pmichaud: we have pugscc now :D

[15:53] <pmichaud> autrijus: wow

[15:53] <pmichaud> coolness

[15:53] <autrijus> gaal: I'm fixing ??:: now. give me 5 min?

[15:53] <pmichaud> ??:: is a real pain

[15:53] <autrijus> it is!

[15:54] <autrijus> I'm currently making them both binary leftSyn

[15:54] <autrijus> and add a special rule for :: to eat ??

[15:54] <autrijus> and report a syntax error when it's not seen

[15:54] <autrijus> same for the lone ??

[15:54] <autrijus> the problem of course is that they have to be alone in that prec level

[15:54] <autrijus> which they are.

[15:54] <autrijus> but I don't want to think about user-defined ternary at other prec levels.

[15:54] * autrijus frowns

[15:55] <autrijus> pmichaud: let me know if you've found a solution to that in Rule mode

[15:55] <gaal> sure, autrijus, i just needed som sort of ack :)

[15:55] <pmichaud> I don't think we're allowing user-defined ternary

[15:55] <autrijus> gaal: ack

[15:55] <pmichaud> certainly not in 6.0.0

[15:55] <autrijus> oh. whew.

[15:55] <autrijus> what about user-defined operators that occupies equiv prec level

[15:55] <autrijus> as ??:: ?

[15:55] <autrijus> that will also throw many things off.

[15:55] <autrijus> can we outlaw them too? ;)

[15:55] <pmichaud> I don't even think there's going to be a name for ??:: that one could use

[15:56] <autrijus> I thought it's &ternary:<?? ::>

[15:56] <autrijus> but I might be imagining things

[15:56] <pmichaud> lemme look

[15:56] <pmichaud> I hadn't seen a ternary: category yet

[15:56] <autrijus> good, then.

[15:56] <autrijus> is there a plan for statement:<> ?

[15:56] <pmichaud> well, it's entirely possible I just overlooked it

[15:56] <lightstep> so what are op3 and op4?

[15:57] <autrijus> I've read lwall's post

[15:57] <Juerd> autrijus: Instead of referring to yen as "the unicode form of Y", you can use &yen; in HTML, for use.perl.org, iirc

[15:57] <pmichaud> I'm still wondering about statement:<>

[15:57] <autrijus> but that is still fuzzy in my mind

[15:57] <autrijus> Juerd: danke!

[15:57] <pmichaud> I have a few ideas about statement:<>, but that's part of what was holding me back on a few items as well

[15:58] <pmichaud> my response back to lwall on that post (when he sent it to me a month or so ago) was that we'd probably use top-down parsing for everything down to expressions, then bottom-up parsing for expressions

[15:58] <autrijus> right, I remember you saying that.

[15:58] <autrijus> which makes sense.

[15:58] <pmichaud> so statement-level items would tend to be handled via rec-descent

[15:58] <autrijus> user-defined statement:<>?

[15:58] <autrijus> how does user define a statement:<> ?

[15:58] <autrijus> in particular the signature will look weird.

[15:59] <autrijus> because it's not call-by-value or call-by-ref

[15:59] <autrijus> it's call-by-ast

[15:59] <autrijus> in order to make things like elsif{} work

[15:59] <pmichaud> yes.  One of my questions to luke was how else/elsif would work

[15:59] * autrijus crosses finger for an answer

[15:59] <pmichaud> and I think the quick answer is that we're not going to worry about statement:<> too much, at least in 6.0.0

[15:59] <autrijus> oh. ok.

[16:00] <autrijus> a bit disappointing, but much more relief

[16:00] <autrijus> ok, then I think pugs's parser is actually in a fine shape :)

[16:00] <pmichaud> well, I'm not sure how well that particular aspect of the design has been thought through

[16:00] <autrijus> nod nod

[16:00] <pmichaud> we know that we want people to be able to modify the grammar, and statement:<> may have been an idea of an approach that could be used to do it

[16:00] <autrijus> but the param type is so weird I can't quite understand it.

[16:01] <lightstep> doesn't pugss' parser contain rip offs from other packages?

[16:01] <autrijus> I mean, I can understand if we make the whole AST into objects

[16:01] <pmichaud> but there may be better ways to do it, and it's better to just start playing with simpler implementations to figure that out than to try to spec every last detail in advance :-)

[16:01] <autrijus> lightstep: rip offs? in README and LICENSE and Parser.hs I clearly say it's based on parsec

[16:01] <autrijus> err, Rule.hs

[16:01] <lightstep> why not import parsec instead?

[16:02] * lightstep doesn't read documentation&license

[16:02] <autrijus> lightstep: because before pugs 6.2.0 I'm going to move Parsec into Eval.

[16:02] <autrijus> lightstep: i.e. make it a monad transformer

[16:02] <autrijus> operating on IORef

[16:02] <jabbot> pugs - 764 - Fix for weird Win2k config

[16:02] <autrijus> (or on ReaderT)

[16:02] <autrijus> instead of a monad it itself

[16:02] <autrijus> lightstep: as it stands we can't eval stuff inside parsec and retain the env.

[16:02] <autrijus> or the callCC

[16:02] <autrijus> but perl6 rules is going to require that.

[16:02] <autrijus> and more immediately:

[16:03] <autrijus> my $x = BEGIN { 2 + 3 };

[16:03] <autrijus> needs that as well.

[16:03] <pmichaud> yeah, I'm doing pge work today/tomorrow

[16:03] <pmichaud> I'm hoping to have the new pge ready by tomorrow evening

[16:03] <pmichaud> I've also cleared the weekend for perl6 work

[16:03] <autrijus> so I forked parsec into Rule.hs to work on it more. SyntaxNinja also did some cleanup. everything will go upstream when it makes sense to do so

[16:03] <autrijus> pmichaud++ # nice!

[16:03] <pmichaud> no kids, no girlfriend, no other jobs :-)

[16:03] <autrijus> ooh.

[16:04] <autrijus> pmichaud: so, PGE won't target parrot AST, right?

[16:04] <autrijus> just pasm

[16:04] <ingy> is that rule5 or rule6?

[16:04] <autrijus> and/or pir

[16:04] <ingy> ;)

[16:04] <autrijus> ingy: rule6

[16:04] <autrijus> ;)

[16:04] <pmichaud> pge is targeting pir, because we don't have a parrot ast :-)

[16:04] <autrijus> right. but assume we have :)

[16:04] <pmichaud> but pge is in bootstrap mode

[16:04] <autrijus> (actually we have, it's just 1) not working 2) not documented)

[16:05] <pmichaud> pge is written in c/pir at the moment, and will stay there until other things are far enough along that I can write pge in perl 6

[16:05] <pmichaud> or, more likely, until someone else decides to rewrite pge in perl 6 :-)

[16:05] <autrijus> you know, if you write pge in perl 6 now, I can run it in pugs :)

[16:05] <ingy> autrijus: nope. 5:

[16:05] <ingy> 5) Be Obsessed. Great software is created by obsessed people. Integrate your projects into your life. Breathe them. Too hectic for your family oriented life style? Maybe you aren't cut out for this.

[16:05] <autrijus> oh. that rule.

[16:05] <ingy> haha

[16:05] <pmichaud> ingy: don't worry, I'm obsessed enough :-)

[16:06] * ingy got flamed for that

[16:06] <pmichaud> autrijus: I'm keeping the pge via pugs route open at the moment,  yes :-)

[16:06] <autrijus> :)

[16:06] <ingy> pmichaud: you are in a fortunate position.

[16:06] <pmichaud> ingy: that's for sure. 

[16:15] <autrijus> ok, I think I've fixed ?? ::

[16:15] <autrijus> testing.

[16:25] <Limbic_Region> autrijus - do you ever get a chance to keep up with use.perl journals relating to Pugs?

[16:26] <Limbic_Region> I ask only because I would be willing to keep you aprised of journal entries and/or posts at the Monastery if you don't have time

[16:26] <autrijus> Limbic_Region: that'd be lovely.

[16:26] <Limbic_Region> since I am not contributing to Pugs in any other meaningful way

[16:26] <autrijus> lwall++ 

[16:26] <autrijus> I'm going to make it so.

[16:26] <autrijus> so it so good.

[16:26] <autrijus> err, I mean, so is so good.

[16:26] <Limbic_Region> http://use.perl.org/~drhyde/journal/23658 # how to get ghc on debian or osX

[16:27] * autrijus perceives endless punning possibilities

[16:27] <Limbic_Region> http://use.perl.org/~dvergin/journal/23656 # pugs 6.0.11 and ghc 6.4 not working on windows

[16:27] <autrijus> I fixed dvergin's bug

[16:28] <autrijus> it's just I can't seem to comment on his 

[16:28] <autrijus> journal and I don't know how to contact him.

[16:28] <autrijus> I'd be happy if you can help.

[16:28] <Limbic_Region> by default, use.perl journal entries don't have comments enabled

[16:28] <autrijus> which is sad.

[16:28] <Limbic_Region> he is also a monk - I will /msg him

[16:28] <autrijus> danke

[16:28] <autrijus> just say it should be fixed in trunk and please try trunk.

[16:28] <gaal> oh, speaking of journals, http://www.livejournal.com/users/autrijus_rss/ for the LJ users out there.

[16:29] <Limbic_Region> bitte - will also let him know he needs to enable comments (should be the default I think)

[16:29] <autrijus> yuppers.

[16:29] <theorbtwo> Ah, ja, thanks for pointing that out to me the other day in a /msg.

[16:29] <autrijus> hrm, ??:: hates me :-/

[16:29] * autrijus hates back

[16:31] <autrijus> 1 ?? $x = 3 :: $x = 4

[16:31] <autrijus> this is legal, even if = is lower prec than ??::

[16:32] <jabbot> pugs - 765 - * so() is the new true().

[16:32] <autrijus> 3 ?? 4 and 4 :: 5 and 5

[16:32] <autrijus> but this is a syntax error.

[16:33] <autrijus> what is the difference between the "and" level and the other levels?

[16:33] <Limbic_Region> autrijus - when you get time - http://www.perlmonks.org/index.pl?node_id=434969

[16:33] <theorbtwo> so('this' is christmas)

[16:33] <Limbic_Region> there are also several pugs/windows questions - I will report that it is fixed in the latest trunk and for people to try that

[16:34] <Limbic_Region> http://www.perlmonks.org/index.pl?node_id=439183 for instance 

[16:34] <Limbic_Region> Makefile(400) : fatal error U1087: cannot have : and :: dependents for same target

[16:34] <autrijus> that's fixed.

[16:34] <autrijus> it's caused by space in path

[16:35] <autrijus> and makemaker's inability to deal with them.

[16:35] <autrijus> 'fraid I can't help.

[16:36] <autrijus> pmichaud: perl5 thinks that "3e100" is a number.

[16:36] <pmichaud> autrijus: yeah, I know, and I've always thought that's a bug

[16:36] <pmichaud> :-)

[16:36] <autrijus> and "3e9999" is Inf.

[16:36] <pmichaud> well, it is a bug :-)

[16:36] <pmichaud> I mean, "3e100" is a number, the question is which number

[16:36] <pmichaud> :-)

[16:36] <pmichaud> i.e., is it 3 or 3e100?  ;-)

[16:37] <autrijus> you think it should be 3?

[16:37] <autrijus> I happen to think that also.

[16:37] <pmichaud> I'd prefer it to be just 3

[16:37] <autrijus> for great consistency.

[16:37] <theorbtwo> In p5, I think it should be just 3.

[16:37] <autrijus> theorbtwo: be surprised.

[16:37] <theorbtwo> In p6, I'm not all that sure.

[16:37] <pmichaud> yeah, there are a couple of surprises like that lurking in p5

[16:37] <autrijus> perl -e "print int('3e3')

[16:37] <autrijus> 3000

[16:37] <Coke> (perl6 testing) instead of inventing a new test API, why not just implement the p5 test API?

[16:38] <autrijus> Coke: we are following the p5 test API, if you are talking about harness TAP

[16:38] <autrijus> and we're working with a close approximation between Test.pm and Test::More.

[16:38] <autrijus> leaning toward Test::More more.

[16:38] <pmichaud> coke: also, part of the advantage of having a new language is that we have new constructs and paradigms to work with in that language

[16:39] <autrijus> pmichaud: ok, so barring a larry ruling, I'll make '3e100' parse to 3. :)

[16:39] <pmichaud> what good is perl6 if we just carry all of perl5's idioms into it?  This isn't to say we summarily reject any interfaces that p5 has developed, but we do often need to re-evaluate them with a fresh eye and say "well, is this the way we think it should work in p6"?

[16:40] <lightstep> so will p6 not have scientific notation?

[16:40] <pmichaud> lightstep: my post was in response to coke's question about the testing, sorry

[16:40] <autrijus> lightstep: no, 3e3 is still 3000. "3e3" however is not.

[16:40] <autrijus> at least today.

[16:40] <Coke> pmii - as you yourself have mentioned, that's not a job for the compiler authors.

[16:40] <pmichaud> autrijus: I think we'll definitely need a ruling from p6l on numification of strings

[16:41] <autrijus> Coke: uh. eh. why is it not?

[16:41] <lightstep> the sensible thing is to use the same lexer

[16:41] <autrijus> lightstep: except people will then write "Infamy" and parse to Inf.

[16:41] <Coke> ... y'all are not the language designers, neh? you're the language implementors.

[16:41] <Coke> sorry, "all y'all". =-)

[16:41] <pmichaud> coke: is the testing framework part of the language?

[16:42] <Coke> It's a standard module.

[16:42] <pmichaud> coke: clearly we can implement *a* testing framework

[16:42] <autrijus> Coke: I consider it my sacred duty as a CPAN author to design the language. :)

[16:42] <pmichaud> and we can implement one that makes it easiest to do what we need to do

[16:42] <Coke> to sum up: "this argument should be occuring in p6l, not p6i", that's all.

[16:42] <gaal> This day will be remembered in infinty and beyond.

[16:42] <Coke> er, "not p6c"

[16:43] <autrijus> is Test.pm brought up on p6c?

[16:43] <autrijus> oh, test logging.

[16:43] <lightstep> autrijus, i'd consider such things to be nonsense. truncation is good, but accepting any prefix is bad

[16:43] <autrijus> lightstep: perl has a very long tradition to parse "3blah" into 3.

[16:43] <autrijus> lightstep: 'fraid that's not going to go away.

[16:43] <autrijus> in light of that, better make it consistent.

[16:44] <autrijus> (also, I'm not saying it's particularly sane, but it's part of the perl mindset, afimc.)

[16:44] <pmichaud> coke: ah, I see where you're coming from.  

[16:44] <lightstep> lack of knowledge of perl makes me incomprehenful. but i accept that it is the way

[16:45] <pjcj> When reading from a file, is the input a string?  ie, will  echo 3e3 | perl -ple '$_ += 2'  behave as in perl5?

[16:45] <autrijus> lightstep: thanks for your understanding. :)

[16:45] <pmichaud> coke:  I think the answer is that the compiler implementors may write many things that help us along the way to build the compiler that will be thrown away in the long run

[16:45] <pmichaud> i.e., bootstrapping

[16:45] <autrijus> pjcj: it is a string, so it will be 2, not 3002, in this case.

[16:46] <autrijus> pjcj: but it's not set in stone (yet).

[16:46] <pmichaud> coke: and yes, many people will be tempted to mold the language in their particular direction by being first to implement a module.  But we have to trust that things will shake out in the long run

[16:46] <autrijus> Coke: also bear in mind that perl6 will probably have no core modules.

[16:46] <Coke> pmi: I'm just annoyed at the amount of non compiler traffic I've been "forced" to endure.

[16:46] <pmichaud> coke:  If we have to wait for approval/discussion of every item on p6l before we see an implementation, then we'll never have one.  :-)

[16:47] <pmichaud> coke: well, whenever you detect something that seems non-compilerish, just send me a private note and I'll push it to p6l if it's appropriate

[16:47] <autrijus> mmm perl6-modules

[16:47] * autrijus ponders the need for another ML

[16:47] <pmichaud> I was out of town wed-sun and didn't have good email connectivity

[16:48] <pmichaud> coke:  I agree with you that we ended up with some non-compiler traffic on p6c, but we know there's going to be some fuzziness as things go along

[16:48] <Coke> ... pmi, that's what I'm doing.

[16:48] <autrijus> Coke: I agree that it clearly doesn't belong in p6c. but I'm not sure all p6 module discussion belong in p6l either.

[16:48] <pmichaud> ah, there we go :-)

[16:48] <Coke> and now I run away to go work on Tcl, on the off chance I'll beat you to parrot.

[16:48] * Coke . o O (yah, right.)

[16:48] <pmichaud> coke -- wait

[16:49] <Coke> yessssssssssssssssssssssss?

[16:49] <pmichaud> btw, I wanted to thank you very much for all of your effort in getting the strings code into parrot

[16:49] <pmichaud> that is a *huge* help to me

[16:49] <Coke> ... Thank *cvs*. 

[16:49] <pjcj> perl6-stdlib exists

[16:49] <gaal> ah, autrijus, since i know you're using it -- repeating a  question from before -- any hints on running make test / prove from eclipse?

[16:49] <pmichaud> yeah, but it still needed someone who knew a bit more about it pushing, and you were the primary one pushing to get it done.  So, thanks.

[16:49] <Coke> 95% of what I did was a cvs merge. the rest was simple fixup. that just got it to "compile". leo did all the heavy lifting after that.

[16:50] <Coke> <-- can't take a compliment.

[16:50] <autrijus> gaal: I don't do that, so I don't know

[16:50] <Coke> and even if I *did* get it to work, I was still waiting for dan to say "what next".... but I think leo was paying attention there.

[16:50] <pmichaud> anyway, I'm doing PGE this week and hope to have a fairly complete implementation by this time next week

[16:50] <autrijus> pjcj: reallly.

[16:50] <Coke> Cool. I look forward to your p5 implementation so I can use it in Tcl. =-)

[16:50] <autrijus> moving things to perl6-stdlib looks sensible.

[16:51] <gaal> ah ok :) anyway we don't have perl6 support in epic yet and all that so the Problems view isn't going to be very useful anyway.

[16:51] <autrijus> if not now, certainly some time after now

[16:51] <autrijus> gaal: aye.

[16:51] <pmichaud> anyway, all, I have to go to meet with my financial advsors... bbl

[16:51] <autrijus> but I set my perl into pugs.exe

[16:51] <Coke> laters.

[16:51] <autrijus> and it at least can tell me if it compiles.

[16:52] <gaal> autrijus: yes, i got that far :) i think i'll go back to vim, since i'm not hacking the haskell parts anyway and that's just dandy for perl (even 6)

[16:52] <autrijus> nod.

[16:54] <lightstep> one more thing about interpolating numbers: if " 3e3 " is 3, will " { 3e3 } " also be 3 ?

[16:54] <lightstep> s/interpolating/parsing/

[16:58] <nothingmuch> channel splits are silly

[16:59] <theorbtwo> IRC is a simple tree topology; there's no redundancy whatsoever.

[16:59] <theorbtwo> You get infinite loops if there are.

[17:00] * autrijus purrs.

[17:00] <gaal> so does my cat!

[17:01] <autrijus> kosimus in #haskell gave me the spark of light to do ??:: correctly.

[17:01] <autrijus> namely, treat "?? ... ::" as an infix operator.

[17:01] <autrijus> that's all it will take

[17:01] * autrijus hacks

[17:07] <ninereasons> I don't understand the use of the .perl method.  May I have an example?

[17:07] <autrijus> when you see .perl, think Data::Dumper::Dump

[17:08] <ninereasons> ah - ok.  That's helpful.

[17:12] <ingy> when you see .yaml ...

[17:13] <autrijus> heh.

[17:13] <autrijus> ($str3 eq $str4) ?? $bar = 1 :: $bar = 0;

[17:13] <autrijus> pugs correctly parsed it as

[17:14] <autrijus> (($str3 eq $str4) ?? $bar = 1 :: $bar) = 0;

[17:14] <autrijus> so I'm fixing operator.t.

[17:14] <autrijus> to say

[17:14] <autrijus> ($str3 eq $str4) ?? ($bar = 1) :: ($bar = 0);

[17:14] <autrijus> instead.

[17:14] <nothingmuch> we have ?? :: as lvalue? sweet!

[17:14] <autrijus> and now, lo and behold, all passes.

[17:14] <autrijus> nothingmuch: not yet :D

[17:14] <nothingmuch> or is it just parsed that way?

[17:15] <autrijus> it's parsed that way

[17:15] <nothingmuch> =/

[17:15] <autrijus> which is correct.

[17:15] <nothingmuch> naughty autrijus

[17:15] <nothingmuch> won't work 24/7

[17:15] <autrijus> but not what the tester was testing.

[17:15] <autrijus> lol.

[17:15] <autrijus> 24/7 is 3.4hrs per day.

[17:15] <nothingmuch> 24 * 7 then

[17:15] <autrijus> I think I spend more time than that on pugs :)

[17:16] <autrijus> yay I see my favourite message again!

[17:16] <autrijus> UNEXPECTEDLY SUCCEEDED

[17:16] * autrijus goes unTODOing stuff

[17:16] <nothingmuch> =D

[17:22] <jabbot> pugs - 766 - * ?? :: now works correctly, thanks to k

[17:32] <jabbot> pugs - 767 - * add kosmikus to AUTHORS; remove old te

[17:43] <gaal> uh how do i take a reference to a sub?

[17:43] <autrijus> \&sub

[17:43] <autrijus> or just &sub

[17:43] <autrijus> actually just &sub.

[17:43] <gaal> thanks

[17:50] <gaal> &undef_sub should die, yes?

[17:50] <gaal> undefined

[17:51] <autrijus> it should die because there's no such sub.

[17:51] <autrijus> same as $undefined_var

[17:51] <gaal> k

[17:52] <gaal> via the symbol table, is this the syntax i need? (it doesn'y work): %{ $?PACKAGE }::{"&a_sub"}

[17:54] <autrijus> is there still a symbol table?

[17:54] <autrijus> I thought globs are gone

[17:54] <autrijus> I don't know if symtable is left.

[17:54] <gaal> S11 mentions it.

[17:54] <autrijus> grep around a bit and ask on p6l if it's not there?

[17:54] <autrijus> oh. sorry.

[17:54] <gaal> though not for subs

[17:54] <autrijus> where?

[17:54] <jabbot> autrijus: where is current TODO? 

[17:55] <gaal> http://dev.perl.org/perl6/synopsis/S10.html#___top last line

[17:56] <gaal> urr, wrong link

[17:56] <gaal> last line in section "packages" in that page

[17:56] <autrijus> oh. S10.

[17:56] <gaal> oops, yes, i am typlectic.

[17:57] <autrijus> ok. so there is still a symbol table implemented as a hash.

[17:57] <obra> yay

[17:57] <autrijus> very well, we will do that.

[17:57] <autrijus> write tests please.

[17:57] <gaal> anyway, if there are no symbol tables, how does one dispatch a sub by name?

[17:57] <obra> "can I tie the symbol table"?

[17:57] <gaal> hahaha

[17:57] <autrijus> gaal: of course there is a symtable.

[17:57] <autrijus> gaal: it's just how we expose it on the language front.

[17:57] <gaal> autrijus: goodie, i was lookging for something to do :)

[17:57] <autrijus> we probably do it as an IType.

[17:58] <autrijus> obra: and yes, that means you get to tie it.

[17:58] <autrijus> or add pre/post FETCH/STORE hooks.

[17:58] <autrijus> imagine the sickitude.

[17:59] <gaal> heh, me, I just wanted symmetry for ok(defined(&sub_that_exists)) :-)

[17:59] <autrijus> oh. defined() as special form.

[17:59] <gaal> so autrijus, did i get the syntax right?

[17:59] <gaal> ok?

[18:00] <gaal> s/k/h/

[18:00] <autrijus> I always thought that the defined(&x) form is weird.

[18:00] <autrijus> and it looks like it may go away in p6, because &x is now just a variable.

[18:00] <theorbtwo> Right, but is it just a variable that is undef when no such sub exists?

[18:00] <obra> ok (&main::x)   ?

[18:00] <theorbtwo> (Consider the case of taking a reference to a sub that will get AUTOLOADed.)

[18:01] <obra> how do you not call thesub?

[18:01] <Juerd> It takes 6 weeks before a mac mini arrives

[18:01] <Juerd> They're too popular

[18:01] <autrijus> theorbtwo: so why only &x gets that treatment and not $x?

[18:01] <Juerd> By amazing and fortunate coincidence, I can pick up mine tomorrow.

[18:01] <theorbtwo> &foo doesn't call the sub anymore in p6.

[18:01] <Juerd> :)

[18:01] <autrijus> obra: &foo never calls the sub.

[18:02] <theorbtwo> defined(&::foo), then?

[18:02] <jabbot> pugs - 768 - * per pmichaud's suggestion, intifier no

[18:02] <obra> wait. &foo doesn't call subs now?

[18:02] <autrijus> gaal: %{"$?PACKAGE\::"}{'&a_sub'}

[18:02] <obra> aiee

[18:02] <obra> I mean, I'll live.

[18:03] <autrijus> &foo is just a Code object.

[18:03] <autrijus> &foo() # still calls.

[18:03] <autrijus> the idea is to make \ go away.

[18:03] <autrijus> gaal: or, using better quoting:

[18:03] <autrijus> %<<$?PACKAGE\::>><&a_sub>;

[18:03] <gaal> autrijus, thanks; should this work now, or is this todo?

[18:04] <autrijus> that is todo. symtable is not yet exposed.

[18:04] <autrijus> please write tests.

[18:04] <gaal> (ACK.) x2

[18:04] <autrijus> (thx) xx 2

[18:04] <gaal> how do you pronounce "autrijus" btw?

[18:05] <autrijus> http://autrijus.org/autrijus.mp3

[18:05] <crysflame> heh!

[18:05] <gaal> lol

[18:06] <obra> you really need "My name is Autrijus Tang and I pronounce Autrijus as Autrijus"

[18:06] <obra> in English, German and Chinese.

[18:06] <obra> also, lojban.

[18:06] <autrijus> also esperanto.

[18:06] <autrijus> and tengwar.

[18:06] <gaal> i'm not the only one who hears it as "outrageous", right?

[18:07] <autrijus> it's remarkably close in sound to "outrageous"

[18:07] <crysflame> that makes sense, phonetically

[18:07] <crysflame> obra++

[18:07] <crysflame> autrijus++ # tengwar

[18:07] * obra discovers autrijus has a livejournal

[18:07] <autrijus> the "i" in "tri" is more "ee"  though

[18:08] <autrijus> a deadjournal.

[18:08] <autrijus> 48 commits today.

[18:08] <autrijus> that's 2x the daily output rate I remembered

[18:08] <autrijus> what's wrong with you guys? :)

[18:09] <obra> autrijus: get clkao to set up metrics

[18:09] <obra> daily churn

[18:09] <autrijus> or gugod.

[18:10] * obra nods

[18:10] <obra> or really, for every project on foundry

[18:11] <theorbtwo> I've been told it's something like the beginning of "ought", then "re" as in reply, and "jus" somewhat like "juice".

[18:11] <theorbtwo> (By leira.)

[18:11] <autrijus> that is also true.

[18:11] <autrijus> but "jus" is shorter.

[18:12] <theorbtwo> Hm, "justice" works better.

[18:12] <gaal> don't forget the tonality, folks. :)

[18:12] <autrijus> and the resonance field

[18:13] <gaal> anyone try running it backwards yet?

[18:13] <theorbtwo> The resonance field is very important; you need to tune the modalities of the main deflector dish.

[18:16] <gaal> this is failing. should it?

[18:16] <gaal> sub a_sub { pass "sub"; 1 }

[18:16] <gaal> a_sub || fail "a_sub";

[18:17] <autrijus> short circuit?

[18:17] <gaal> doesn't || do that?

[18:17] <autrijus> yeah, short circuitting is borken.

[18:17] <gaal> ah ok

[18:17] <autrijus> tests tests :)

[18:18] <autrijus> (not sure if there's already one for that tho)

[18:18] <obra> what ended up happening with named params?

[18:18] <gaal> i'll ditch this test from undef.t (carried it off perl5's, no idea why it was trheere.)

[18:18] <gaal> don't work yet obra last i tried them

[18:18] <autrijus> obra: oh, I discovered that the names were passed in as part of pair

[18:18] <autrijus> which is a bug

[18:18] <autrijus> kept meaning to fix it. maybe I'll do it now.

[18:19] <obra> apparently, the foo<bar> syntax is also not parsable

[18:19] <autrijus> i.e. if you pass (name => "value")

[18:19] <autrijus> then $name gets set into ('name', 'value')

[18:19] <autrijus> which is why it's mostly borken now.

[18:19] <obra> ah

[18:19] <autrijus> and yes, :foo<bar> is not yet parsed.

[18:21] <Juerd> WTH is splat.t +x?

[18:22] *** metaperl__ is now known as metaperl_

[18:22] <jabbot> pugs - 769 - Revamped perlkwid to latest understandin

[18:22] <gaal> Juerd, don't say that word!

[18:22] <Juerd> Which?

[18:22] <jabbot> Juerd: Which is not as cheap as normal dimm

[18:23] <gaal> the one that caused irc to join "", split //, "split"

[18:23] <Juerd> The netsplit happened before that

[18:23] <obra> what's the convention for parsefailing tests?

[18:23] <Juerd> Your client (irssi?) probably buffered the quits

[18:23] <gaal> not from my POV

[18:23] <gaal> trillian here

[18:23] <theorbtwo> is(eval 'yadda', 'whatever', 'name of test')

[18:23] <Juerd> Does it show many quits, or one informative line, gaal?

[18:24] <gaal> many.

[18:24] <Juerd> Then weird.

[18:24] <gaal> obviously your region of spacetime was warped, warped by the disruption.

[18:32] <nothingmuch> *sigh*

[18:32] <nothingmuch> why does sleep -1 cause infinity?

[18:32] * nothingmuch wants p6 to sleep properly

[18:32] <gaal> maybe it causes infamy?

[18:32] <Khisanth> -1? what is that suppose to do?

[18:33] <crysflame> how do you test for that, too

[18:33] *** rgs_ is now known as rgs

[18:34] <autrijus> nothingmuch: it cause infinity error?

[18:35] <nothingmuch> no

[18:35] <nothingmuch> it just sleep to infinity

[18:35] <nothingmuch> i'd like to reliably say sleep($next - time)

[18:35] <nothingmuch> but i can't, i have to say

[18:36] <autrijus> I think in p5

[18:36] <autrijus> sleep -1 

[18:36] <autrijus> is also infinity.

[18:36] <autrijus> so failing to see the problem

[18:36] <nothingmuch> if (my $s = sleep($next - time)){

[18:36] <nothingmuch> sleep $s;

[18:36] <nothingmuch> i'm complaining about p5

[18:36] <nothingmuch> }

[18:36] <nothingmuch> since p6 has Inf, it should be used instead of -1

[18:36] <nothingmuch> i'd like p6 to be different

[18:36] <nothingmuch> quick, off the top of your head

[18:36] <nothingmuch> fastest way to make html into plaintext

[18:36] <theorbtwo> sleep(Inf) sounds good to me.  I'd expect sleep(-1) to be an error.

[18:37] <theorbtwo> "Sorry, can't reverse time."

[18:37] <theorbtwo> lynx --print, something like that.

[18:37] <gaal> yeah, there's iliaz's optimization to get_tomorrow_date {}....

[18:37] <autrijus> w3m -dump

[18:38] <theorbtwo> Or HTML::TreeBuilder->new_from_content("<html><head...</html")->as_text.

[18:38] * autrijus notes that p5 also has Inf.

[18:38] <nothingmuch> theorbtwo: i'd rather it be zero

[18:38] <nothingmuch> but perhaps return undef

[18:38] <nothingmuch> and die on use fatal;

[18:38] <gaal> open in browser and copy paste?

[18:38] <autrijus> it's just written as "1e99999"

[18:38] <nothingmuch> damnit: Scalar value @queue[0] better written as $queue[0]

[18:38] <nothingmuch> p6 is getting to me

[18:38] <nothingmuch> theorbtwo: thanks, that will do the trick

[18:39] <autrijus> damn it, I was tabbing to see where is this "damnit" person you are talking to.

[18:39] <autrijus> irc is getting to me.

[18:39] <theorbtwo> (Note that'll leak, unless you save the HTML::Element you get back, and $tree->delete it.)

[18:40] <Khisanth> autrijus: of you need sleep :)

[18:40] <autrijus> I do, I do.

[18:41] <nothingmuch> theorbtwo: ah, that's important to know

[18:45] <lightstep> what happens with `:l' in the prompt? there is code for it in Main.hs, but the parsing is disabled at Shell.hs?

[18:46] <autrijus> lightstep: Main.hs is just stub.

[18:46] <autrijus> I think :l should just be dispatched to eval "require".

[18:46] <autrijus> i.e.

[18:46] <autrijus> :l Test

[18:46] <autrijus> err

[18:46] <autrijus> :l Test.pm

[18:46] <autrijus> should be translated to "require 'Test.pm'"

[18:46] <autrijus> and evaluated.

[18:46] <lightstep> i'll do it?

[18:47] <autrijus> yay!

[18:47] <lightstep> in a few hours

[18:47] <lightstep> friend &

[18:47] <autrijus> :)

[18:47] <gaal> (in hugs and probably ghci, either of ":l Mod.hs" and  ":l Mod" work, so may as well make bothw rok heretoo?

[18:47] <theorbtwo> Why :| ?

[18:47] <gaal> "load"?

[18:47] <autrijus> :l

[18:47] <autrijus> not :|

[18:48] <autrijus> try Andale mono or Anonymous :)

[18:48] <autrijus> gaal: sure, that'd be cool also. maybe just test ifFileExists

[18:48] <theorbtwo> Oh, :L

[18:48] <gaal> :L.lc

[18:49] <theorbtwo> The shell is case-sensitive?

[18:49] <theorbtwo> Oh well, I got persistancy with :r, I'm happy.

[18:49] <ingy> Juerd: ping

[18:49] <Juerd> pong

[18:49] <Juerd> But not for long

[18:50] <ingy> I added a table example to perlkwid.kwid

[18:50] <Juerd> I'll have a look

[18:50] <Juerd> Have you found problems with my spec yet?

[18:50] <ingy> not yet

[18:50] <Juerd> (It's been in my head for a while already, so I hope there are none)

[18:50] <ingy> but I haven't even had coffee

[18:51] <Juerd> I have energy drink for you if you want

[18:51] <Juerd> We got 20 trays of 24 free

[18:51] <Juerd> So we have plenty

[18:51] <gaal> man, that's a lot of drinks.

[18:51] <Juerd> Yes.

[18:51] <gaal> maybe barter them for RAM?

[18:51] <Juerd> One fridge plus enough to fill another.

[18:52] <Juerd> gaal: They're unlabeled, so they may not leave the building unempty.

[18:52] <ingy> Juerd: sure, bring one over

[18:52] <Juerd> No, they can't leave the building

[18:52] <Juerd> You'll have to come and drink it here

[18:52] <gaal> maybe invent a way of turning them into ram?

[18:53] <gaal> see, if einstein had it only off-by-one (in ASCII) -> e=mb (squared!)

[18:58] <nothingmuch> woot, rssgrowl done, in about 10 minutes

[18:58] <nothingmuch> fun fun fun

[18:59] <theorbtwo> rssgrowl?

[19:00] <theorbtwo> (HTML::TreeBuilder)++, BTW.

[19:00] <theorbtwo> See also utils/fixauthors.pl, or whatever I called it.

[19:08] <nothingmuch> sorry

[19:08] <nothingmuch> rssgrowl is an rss aggregator

[19:08] <nothingmuch> which uses growl (http://growl.info)

[19:57] <ingy> fyi: I started #kwid for non pugs related kwid discussion

[19:59] <theorbtwo> Hm, I wonder if YAS should note that message from lilo.

[20:11] <nothingmuch> w00t

[20:12] * nothingmuch finally has an RSS reader he likes

[20:12] <nothingmuch> now all i need is to find some feeds ;-)

[20:13] <gaal> fwiw LJ is both an aggregator and a source of many feed.

[20:13] <lightstep> take the commit feed for pugs :)

[20:13] <gaal> feeds

[20:13] <nothingmuch> lightstep: that's partially the reason why i wrote it

[20:13] <nothingmuch> gaal: how about a link for yours?

[20:14] <theorbtwo> http://www.livejournal.com/user/<username>/rss

[20:14] * nothingmuch wonders if there is a human readable dbm

[20:14] <theorbtwo> gaal's is, unsurprsingly, 'gaal'.

[20:15] <nothingmuch> =)

[20:15] <gaal> just add /data/rss/ to anyone's 'j

[20:15] <gaal> but if you join lj you get to read my l33t friends-only entries.

[20:15] <nothingmuch> never ever ever

[20:15] <nothingmuch> we discussed it already

[20:15] <nothingmuch> my login is taken

[20:16] <gaal> yeah, but there was no way i'd pass on an opportunity to mention that again :)

[20:16] <nothingmuch> =P

[20:16] <theorbtwo> nuffinmuch isn't.

[20:16] <nothingmuch> i'll sign up just to be a friend, if you promise to never try to make me blog

[20:16] <gaal> hereby publically promised!

[20:17] <nothingmuch> theorbtwo: i'd actually prefer nuffin for consistency with PAUSE given choice

[20:17] <gaal> (another pro is to get email notification of comment replies)

[20:17] <theorbtwo> nuffin is taken, though.

[20:18] <nothingmuch> it is too?!

[20:18] <nothingmuch> oh my

[20:18] <nothingmuch> i thought self deprecation was really unique at the time

[20:18] <nothingmuch> everyone was hot_girl12

[20:18] <nothingmuch> or coolGuy17

[20:18] <nothingmuch> or overlord

[20:19] <gaal> woobling is free...

[20:19] <theorbtwo> I thought odd was taken, but since I needed to become "theorbtwo" because of too many "theorb"s, apparently not.

[20:19] <nothingmuch> woobling is my domain, not my identity

[20:19] <theorbtwo> With 6,456,598 accounts, the flat namespace can be a bit annoying at times.

[20:20] <gaal> oh, consider how kings in shakespeare's english were named by their domains.

[20:20] <gaal> e.g. in Hamlet, "I am to England"

[20:20] <nothingmuch> =P

[20:20] <nothingmuch> i'll go with 'nuffinmuch', i guess

[20:20] <gaal> (meaning the English king, though obviously he also boarded a ship to England)

[20:20] <theorbtwo> Not just kings.  Consider also Romeo and Juliet's parents.

[20:20] <gaal> true!

[20:20] <gaal> fathers, actually.

[20:20] <theorbtwo> Er, right.

[20:21] <gaal> well, ruling-parent-male-by-default.

[20:21] <nothingmuch> MORE MORE MORE!

[20:22] <gaal> more anal discussion of elizebethan language? okay.

[20:22] <nothingmuch> no

[20:22] <gaal> did you know that "thee" and "thou" weren't high language at all in S's time?

[20:22] <nothingmuch> rss feeds =)

[20:22] <gaal> ah :)

[20:22] <nothingmuch> beh

[20:23] <nothingmuch> http://openfoundry.org/Foundry/Project/Source/index.html/pugs/rss/ <-- XML::RAI::Item->identifier != consistent!

[20:23] <nothingmuch> it changes every time, appearantly

[20:23] <gaal> http://www.ucomics.com/calvinandhobbes/

[20:24] <nothingmuch> gaal: i have all the books, and i know most by heart =)

[20:24] <theorbtwo> Oh!  And watchyamacallit-bot should be fixed to use description instead of title.

[20:26] * nothingmuch switches to $item->link

[20:27] <gaal> http://www.hackaday.com/ is sometimes cute

[20:27] <gaal> http://www.kimbly.com/blog/ is interesting

[20:28] <theorbtwo> Commercialized comics don't have a RSS feed on the page, generally, but indy ones sometimes do, and if you look a bit, you can find RSS feeds of things that don't have them pretty easily.

[20:29] <theorbtwo> Also, try checking people's friends pages, and stealing any feeds they have that you find interesting.

[20:29] <theorbtwo> http://livejournal.com/users/<username>/friends/

[20:49] <nothingmuch> uGGG!!!

[20:49] <nothingmuch> asshole

[20:49] <nothingmuch> my ride forgot me at work!

[20:49] <nothingmuch> damnit!

[20:53] <ingy> nothingmuch: yow!

[20:53] <nothingmuch> indeed

[20:54] <nothingmuch> especially with it being 23:00

[20:54] <theorbtwo> Ugh.

[20:54] <theorbtwo> How far are you?

[20:54] <ingy> work all night!

[20:54] <nothingmuch> to home?

[20:54] <nothingmuch> 20 minute drive

[20:54] <nothingmuch> ingy: they wish

[20:54] <ingy> Perl6 needs you!

[20:54] <nothingmuch> i haven't been working for the last 2 hours anyway

[20:54] <nothingmuch> at home, at home...

[20:55] <ingy> you can crash at my place

[20:55] <nothingmuch> guess whose taking a vacation tomorrow?

[20:55] <theorbtwo> And how long of a walk?

[20:55] <lightstep> nothingmuch, where do you work? 20 minutes is a long distance at this hour

[20:55] <nothingmuch> theorbtwo: 20 km, approx

[20:56] <nothingmuch> but rough terrain

[20:56] <theorbtwo> Oh.  Sounds not-fun.

[20:56] <nothingmuch> lightstep: omer industrial park

[20:56] <nothingmuch> nuh uh

[20:57] <nothingmuch> damnit, now none of the cab drivers are answering!

[20:57] <nothingmuch> this means i might not get a refund, if i go by unofficial means

[20:59] <nothingmuch> phew

[21:03] <nothingmuch> ingy: YAML quickie:

[21:03] <nothingmuch> --- #YAML:1.0

[21:03] <nothingmuch> ? |-

[21:03] <nothingmuch>   http://abridgegame.org/cgi-bin/darcs.cgi/darcs/?c=rss

[21:03] <nothingmuch> :

[21:03] <nothingmuch>   ? ! >-

[21:03] <nothingmuch>     http://abridgegame.org/cgi-bin/darcs.cgi/darcs/?c=annotate&p=20041026122610-20bb4-a7494211822eebe3cb331cb449e9ad12ce8c106f.gz

[21:03] <nothingmuch> err, nopaste

[21:03] <nothingmuch> (sorry)

[21:04] <nothingmuch> anywho, what are the silly ? | - and ? ! > - stuff?

[21:04] <nothingmuch> compare with:

[21:04] <nothingmuch> http://www.livejournal.com/users/gaal/data/rss:

[21:04] <nothingmuch>   http://www.livejournal.com/users/gaal/152214.html: 1

[21:04] <ingy> nothingmuch: paste it in the pugs wiki and I will explain

[21:05] <ingy> nothingmuch: but basically they are silly artifacts of an inplemantation that needs fixing

[21:06] <nothingmuch> ah

[21:06] <ingy> the yaml is legal but highly annoying

[21:07] <nothingmuch> http://pugs.kwiki.org/?YuvalKogman

[21:07] <lightstep> does svn commit also update the local mirror?

[21:08] <nothingmuch> lightstep: what do you mean by local mirror?

[21:09] * nothingmuch chose YAML for that file since it's, err, sometimes human readable

[21:09] <nothingmuch> bad ingy! for not being perfect!

[21:10] <nothingmuch> btw, how is the .4 branch coming along?

[21:10] <ingy> .4?

[21:10] <nothingmuch> there's YAML .3x

[21:11] <nothingmuch> and .4x

[21:11] <nothingmuch> oh, there's been an update to .3x

[21:11] <nothingmuch> goody

[21:11] <nothingmuch> how does it eat overloaded objects now?

[21:11] <ingy> mmm. I forget

[21:11] <ingy> try it

[21:11] <ingy> it really needs to go both ways

[21:12] <nothingmuch> no time now, cab here soon

[21:12] <ingy> and really on a per object basis if desired

[21:12] <ingy> ta

[21:12] <ingy> expect a perl6 yaml soon!

[21:12] <ingy> in haskell

[21:12] <nothingmuch> heh

[21:50] <lightstep> what is the best syntax for :l at the prompt?

[21:51] <theorbtwo> Just replace the :l with a 'require ', and eval.

[21:52] <theorbtwo> ...because later it should get changed to "use", which has a wider syntax.

[21:52] <lightstep> not semantics, syntax

[21:52] <lightstep> :l works now

[21:52] <theorbtwo> Oh.  :l whitespace module name EOL.

[21:53] <lightstep> module name can contain whitespace?

[21:53] <lightstep> (right now it's required to be a valid haskell string)

[21:54] <theorbtwo> No.

[21:54] <theorbtwo> Don't think so, leastways.

[21:55] <mugwump> using ::($expr) you should be able to make any package name at all

[21:55] <mugwump> see S10

[21:56] <theorbtwo> I'm not sure it's smart to try to make :L do everything under the sun.

[21:56] <mugwump> Packages with embedded "::"'s are hard to refer to :)

[21:56] <theorbtwo> For that matter, the real parser doesn't even handle Foo::Bar from the look of it.

[21:57] <mugwump> maybe something like ::{"::"} will refer to the top level package called "::"

[21:57] <theorbtwo> ruleRequireDeclaration in Parser.hs suggests it should be identifer `sepBy1` string "::"

[21:58] <theorbtwo> Then concat (intersperse "/" names) ++ ".pm"

[21:58] <mugwump> Yeah, if specified directly.  I'm just mentioning a silly corner case :)

[21:59] <theorbtwo> .oO(OK, it will allow Foo::Bar, as I read more.)

[23:04] *** theorbtwo is now known as theorbtwo_elsewh

[23:23] <pasteling> "artol" at 66.93.197.227 pasted "subroutine bug" (26 lines, 628B) at http://sial.org/pbot/8222

