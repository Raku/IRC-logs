[00:31] *** Limbic_Region_ is now known as Limbic_Region

[04:27] <Alias_> autrijus: ping?

[10:00] <svnbot6> r7957 | luqui++ | Changed "is lazy" (which is used nowhere) to reflect the semantics

[10:00] <svnbot6> r7957 | luqui++ | I recently proposed on p6l, hoping that that's the way it ends up.

[10:00] <svnbot6> r7957 | luqui++ | Well... almost; it doesn't cache the value.  Maybe that's a good thing

[10:00] <svnbot6> r7957 | luqui++ | (how else would you implement infix:<for>?).

[10:01] <luqui> ?eval sub infix:<myfor> ($exp is lazy, @list) { for @list { $exp() } }    say "hi" for 1..10

[10:01] *** evalbot_7956 is now known as evalbot_7957

[10:01] <evalbot_7957> OUTPUT[hi hi hi hi hi hi hi hi hi hi ] undef 

[10:02] <luqui> hmm, still need to handle $_ somehow...

[10:04] <luqui> ?eval sub bind (*@list, *&code) { @list.map:&code }   bind 1,2,3 { $_, $_+1 }

[10:04] <evalbot_7957> Error:  unexpected ":" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or "}" 

[10:04] <luqui> ?eval sub bind (*@list, *&code) { @list.map:&code }   bind 1,2,3, { $_, $_+1 }

[10:04] <evalbot_7957> Error:  unexpected ":" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or "}" 

[10:04] <luqui> ?eval sub bind (*@list, *&code) { @list.map(&code) }   bind 1,2,3, { $_, $_+1 }

[10:04] <evalbot_7957> Error: Slurpy array followed by slurpy scalar: MkParam {isInvocant = False, isOptional = False, isNamed = False, isLValue = True, isWritable = False, isLazy = False, paramName = "&code", paramContext = CxtSlurpy (mkType "Code"), paramDefault = Noop} 

[10:04] <luqui> hmm

[10:05] <luqui> ?eval sub bind (*@list) { my &code = @list.pop; @list.map(&code) }   bind 1,2,3, { $_, $_+1 }

[10:05] <evalbot_7957> Error: cannot cast from VCode (MkCode {isMulti = False, subName = "<anon>", subType = SubBlock, subEnv = Just (MkEnv {envContext = CxtSlurpy (mkType "Any"), envLValue = False, envLexical = MkPad (padToList [("$?1",[(<ref>,<ref>)]),("$_",[(<ref>,<ref>)]),("$__evalbot_print",[(<ref>,<ref>)]),("$code",[(<ref>,<ref>)]),("$lang",[(<ref>,<ref>)]),("&?BLOCK_EXIT",[(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>)]),("&bre

[10:05] <luqui> ?eval sub bind (*@list) { my &code = @list.pop; @list.map:{ &code($_) } }   bind 1,2,3, { $_, $_+1 }

[10:05] <evalbot_7957> Error: cannot cast from VCode (MkCode {isMulti = False, subName = "<anon>", subType = SubBlock, subEnv = Just (MkEnv {envContext = CxtSlurpy (mkType "Any"), envLValue = False, envLexical = MkPad (padToList [("$?1",[(<ref>,<ref>)]),("$_",[(<ref>,<ref>)]),("$__evalbot_print",[(<ref>,<ref>)]),("$code",[(<ref>,<ref>)]),("$lang",[(<ref>,<ref>)]),("&?BLOCK_EXIT",[(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>)]),("&bre

[10:06] <luqui> ?eval sub bind (*@list) { my $code = @list.pop; @list.map:{ $code($_) } }   bind 1,2,3, { $_, $_+1 }

[10:06] <evalbot_7957> Error: cannot cast from VCode (MkCode {isMulti = False, subName = "<anon>", subType = SubBlock, subEnv = Just (MkEnv {envContext = CxtSlurpy (mkType "Any"), envLValue = False, envLexical = MkPad (padToList [("$?1",[(<ref>,<ref>)]),("$_",[(<ref>,<ref>)]),("$__evalbot_print",[(<ref>,<ref>)]),("$code",[(<ref>,<ref>)]),("$lang",[(<ref>,<ref>)]),("&?BLOCK_EXIT",[(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>),(<ref>,<ref>)]),("&bre

[10:06] <luqui> grr

[10:15] <x86> whoa

[10:15] <x86> perl6 has real objects? heh

[10:16] <x86> where you can call a method on a variable using . ?

[10:16] <luqui> x86 what do you mean "where"?

[10:16] <luqui> oh

[10:16] <luqui> that wasn't a question

[10:16] <x86> ?eval my $test = "hello"; $test.print;

[10:16] <evalbot_7957> OUTPUT[hello] bool::true 

[10:16] <luqui> it was a followup

[10:16] <x86> whoa, cool!

[10:16] <luqui> new to the perl6 world eh?

[10:16] <x86> like java and so forth

[10:17] <x86> yeah lol

[10:17] <x86> all i know is that it uses parrot ;)

[10:17] <x86> and pugs

[10:17] <x86> what does the : operator do?

[10:17] <luqui> it appends an "adverb" to a method call

[10:18] <x86> adverb?

[10:18] <luqui> it was introduced to get rid of those ugly parens in:  @list.map({ ... })

[10:18] <luqui> er, long story

[10:18] <x86> ah i see

[10:18] <x86> makes sense

[10:19] <x86> now can you still do the oldschool way like print $variable ?

[10:19] <luqui> turns out that that adverb block is the same block that is given to the "for" function (which you can now define yourself)

[10:19] <luqui> certainly

[10:19] <x86> or do you have to do $variable.print ?

[10:19] <luqui> ?eval print "hello, world"

[10:19] <evalbot_7957> OUTPUT[hello, world] bool::true 

[10:19] <x86> hehe i hope perl6 maintains perl5 compatibility for a while ;)

[10:19] <luqui> hehe, nope

[10:19] <x86> no?

[10:20] <luqui> the point of the project was to break perl5 compatibility

[10:20] <luqui> because perl5 is full

[10:20] <x86> there is no perl5.pm?

[10:20] <x86> "full" ?

[10:20] <luqui> there's no more syntax we can add to it

[10:20] <x86> why?

[10:20] <luqui> just about every string of characters already has a valid interpretation :-)

[10:21] <x86> so how does perl6 fix that?

[10:21] <luqui> oh, but you mean the ability to use eg. perl5 modules in perl6 programs?

[10:21] <x86> right

[10:21] <luqui> oh yeah, we're working on that

[10:21] <luqui> you can do it in pugs (with caveats)

[10:21] <x86> "we're" ?

[10:21] <luqui> use perl5:DBI;

[10:21] <luqui> design team.  Nicholas Clark mostly

[10:22] <x86> working with larry wall?

[10:22] <luqui> uh huh

[10:22] <x86> you know him?

[10:22] <luqui> uh huh :-)

[10:22] <x86> in real life?

[10:22] * luqui visited the japanese garden with him and Gloria

[10:22] <x86> gloria?

[10:22] <luqui> his wife

[10:22] <x86> japanese garden?

[10:22] <luqui> in portland, during OSCON

[10:22] <x86> cool :)

[10:23] <x86> i hear he hates IRC :P

[10:23] <x86> is that true?

[10:23] <luqui> yeah, he says he wastes enough time on email

[10:23] <x86> hehe

[10:23] <x86> prolly true

[10:23] <x86> so what's his dayjob?

[10:24] <luqui> he finally got hired somewhere

[10:24] <luqui> I don't remember though

[10:24] <luqui> some sort of consulting I think

[10:24] <luqui> he was employed only by TPF grants for a while...

[10:27] <luqui> play with perl 6.  you'll like it  (well, probably not without learning some of it you won't, but hey)

[10:35] <wolverian> how I love 1000+kB/s connections

[10:43] <luqui> somebody who knows the pugs internals: ping

[10:52] <tewk> ll

[10:52] <luqui> SS

[10:57] <x86> tt

[10:59] <tewk> So how is the object stuff in per6 going?  and compiling to parrot?  

[10:59] <luqui> no idea

[11:00] <luqui> IIRC, according to autrijus's journal, compiling to parrot is working nicely

[13:04] <svnbot6> r7958 | luqui++ |  r717@jabberwock:  luqui | 2005-11-16 06:01:01 +0000

[13:04] <svnbot6> r7958 | luqui++ |  Made the name of an operator being defined visible within the sub.  This

[13:04] <svnbot6> r7958 | luqui++ |  is important for unary ops and operator definitions.

[13:04] <svnbot6> r7958 | luqui++ |  Also made it possible to take new operator names (say, @@) as parameters,

[13:04] <svnbot6> r7958 | luqui++ |  not already-parsing ones.

[13:11] <luqui> ?eval product 1..10

[13:11] *** evalbot_7957 is now known as evalbot_7958

[13:11] <evalbot_7958> Error: No compatible subroutine found: "&product" 

[13:11] <luqui> ?eval [*] 1..10

[13:11] <evalbot_7958> 3628800 

[13:11] <luqui> ?eval sub postfix:<!> ($x) { [*] 1..$x }   3!

[13:11] <evalbot_7958> 6 

[13:11] <luqui> ?eval sub postfix:<!> ($x) { [*] 1..$x }   4!

[13:11] <evalbot_7958> 24 

[13:12] <luqui> ?eval sub postfix:<!> ($x) { $x ?? $x * ($x-1)! !! 1 }   4!

[13:12] <evalbot_7958> Error:  unexpected "!" expecting term postfix, operator, ">>xx<<", ">>+&<<", ">>+<<<", ">>+><<", ">>~&<<", ">>~<<<", ">>~><<", ">>*<<", ">>/<<", ">>%<<", ">>x<<", "\187xx\171", "\187+&\171", "\187+<\171", "\187+>\171", "\187~&\171", "\187~<\171", "\187~>\171", "\187*\171", "\187/\171", "\187%\171", "\187x\171", "xx", "+&", "+<", "+>", "~&", "~<", "~>", "*", "/", "%", "x" or "!!" 

[13:12] <luqui> ?eval sub postfix:<!> ($x) { $x ?? $x * (($x-1)!) !! 1 }   4!

[13:12] <evalbot_7958> Error:  unexpected "!" expecting term postfix, operator or ")" 

[13:12] <luqui> ?eval sub postfix:<!> ($x) { [*] 1..$x }   5!

[13:12] <evalbot_7958> 120 

[13:12] <luqui> ?eval sub postfix:<!> ($x) { [*] 1..$x }   (5+1)!

[13:12] <evalbot_7958> 720 

[13:13] <luqui> ?eval sub postfix:<!> ($x) { if $x == 0 { 1 } else { $x * (($x-1)!) } }

[13:13] <evalbot_7958> Error:  unexpected "i" expecting ";", statements or "}" reserved word 

[13:13] <wolverian> that looks rather broken :)

[13:15] <luqui> ?eval sub postfix:<@@> ($x, $y) { if $y == 0 { $x } else { $y @@ $x % $y } }   6 @@ 9

[13:15] <evalbot_7958> Error:  unexpected "i" expecting ";", statements or "}" reserved word 

[13:15] <luqui> sonofa!

[13:15] <luqui> I thought I just fixed that

[13:15] <luqui> ?eval sub infix:<@@> ($x, $y) { if $y == 0 { $x } else { $y @@ $x % $y } }   6 @@ 9

[13:15] <evalbot_7958> \3 

[13:16] <luqui> oh, I did, but apparently just for infix

[13:16] <luqui> ?eval sub postfix:<!> ($x) { say $x; ($x-1)! }

[13:16] <evalbot_7958> Error:  unexpected "!" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or "}" 

[13:16] <luqui> ?eval sub postfix:<``> ($x) { say $x; ``($x-1) }

[13:16] <evalbot_7958> Error:  unexpected "`" expecting ";", statements or "}" 

[13:16] <luqui> ?eval sub prefix:<``> ($x) { say $x; ``($x-1) }

[13:17] <evalbot_7958> Error:  unexpected "`" expecting ";", statements or "}" 

[13:17] <luqui> geez

[13:17] <luqui> ?eval sub postfixfix:<``> ($x) { say $x; ($x-1)`` }

[13:17] <evalbot_7958> Error:  unexpected ":" expecting word character, "::", bare trait, subroutine parameters, trait or block 

[13:17] <luqui> heh

[13:17] <luqui> ?eval sub postfix:<``> ($x) { say $x; ($x-1)`` }

[13:17] <evalbot_7958> Error:  unexpected "`" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or "}" 

[13:17] <luqui> ?eval sub postfix:<@@> ($x) { say $x; ($x-1)@@ }

[13:17] <evalbot_7958> Error:  unexpected "@" expecting term postfix, operator, postfix conditional, postfix loop, postfix iteration, ";" or "}" 

[13:17] <luqui> okay fine, it doesn't work

[13:49] *** r0nny_ is now known as r0nny

[13:50] <r0nny> yo

[15:22] <robkinyon> autrijus: ping

[15:23] <liz6> seen autrijus

[15:23] <jabbot> liz6: autrijus was seen 2 days 9 hours 16 minutes 2 seconds ago

[15:23] <robkinyon> gack

[15:23] <robkinyon> anyone else here good w/svk?

[15:24] <robkinyon> I can't seem to get SVN::Core installed, even though I've recompiled svn w/swig bindings

[15:25] <broquaint> You might want to try clkao, robkinyon.

[15:25] <robkinyon> seen clkao

[15:25] <jabbot> robkinyon: clkao was seen 4 hours 50 minutes 58 seconds ago

[15:25] <robkinyon> grr

[15:26] <robkinyon> clkao: ping

[15:26] <robkinyon> (for whenever)

[15:27] <clkao> hi

[15:31] <robkinyon> clkao: I installed swig, then compiled svn, but SVN::Core doesn't seem to be installed

[15:31] <robkinyon> what am I doing wrong?

[15:32] <clkao> did you do make check-swig-pl and install-swig-pl ?

[15:32] <robkinyon> no ... was that documented somewhere?

[15:32] <robkinyon> I installed swig off of CPAN, so I though it would install the Perl bindings

[15:33] <robkinyon> or is that for SVN?

[15:34] <clkao> yes, last line of subversion's INSTALL

[15:35] <robkinyon> clkao: thanks

[16:03] <pawel> ping

[16:27] <pmurias> does anyone know how to make ghc emit C--?

[16:31] <ajs_> C--?

[16:32] <ajs_> As in the GTK bindings for C++?

[16:33] <SamB> pmurias: hmm.

[16:33] <SamB> ajs_: thats GTK--

[16:33] <theorbtwo> C-- is a language closer to portable assembler then C.

[16:34] <theorbtwo> www.cminusminus.org

[16:34] <SamB> pmurias: you'd need to hack it, it looks like

[16:34] <SamB> pmurias: or at least use a more recent version of GHC than 6.4

[16:35] <SamB> pmurias: it shouldn't be too hard though

[16:41] <svnbot6> r7959 | luqui++ | Ugh.  Rolled back my two most recent changes, as they cause

[16:41] <svnbot6> r7959 | luqui++ | the Precompiled Prelude generation to hang.  Don't have time

[16:41] <svnbot6> r7959 | luqui++ | to "fix" it right now, so I'll just leave it in a working state.

[16:46] <pmurias> Is it possible and how do you manipulate haskell data structures from perl6?

[16:49] <pmurias> Would a i have to inline haskell code?

[16:50] <SamB> pmurias: its not even really possible from C...

[17:16] <pmurias> are there any parts of pugs which are untested? I could write some tests if they are needed.

[17:18] <xinming> pmurias: There are many, But you have to find it yourself. ;-)

[17:18] <Alias_> First, write a Devel::Cover equivalent

[17:25] <theorbtwo> You might want to start by looking at hat: http://www.cs.york.ac.uk/fp/hat/

[17:31] <r0nny> yo

[17:31] <r0nny> is there a exclusive exteonsion for perl6 modules ?

[17:31] <r0nny> want to change the vim autosyntax stuff

[17:33] <autrijus> .p6 I think

[17:33] <autrijus> oh you mean modules

[17:33] <autrijus> no, probably not

[17:33] <autrijus> and .p6 is just transitional anyway

[17:34] <autrijus> but modules usually begin with "module" or "class"

[17:34] <autrijus> or "role"

[17:34] <geoffb> autrijus!!

[17:34] <autrijus> greetings!

[17:34] <geoffb> Good Day!

[17:34] <autrijus> I survived! (was abducted by another book after Unicode Demystified)

[17:35] <autrijus> but it's worth the abduction.

[17:35] <geoffb> oh, which book?

[17:35] <autrijus> Code Complete 2nd Edition (cc2e.com)

[17:35] <autrijus> I...wish I had this book 10 years ago ;)

[17:36] * autrijus is tempted to add it to READTHEM

[17:36] <geoffb> I was wondering if that was worth picking up . . .

[17:36] <autrijus> oh, totally totally worth it.

[17:37] <Alias_> Unicode Demystified?

[17:37] <Alias_> Must be a VERY big book

[17:37] <autrijus> Alias_: it is.

[17:37] <autrijus> but Code Complete is bigger

[17:37] <autrijus> and more relevant, anyway

[17:37] <geoffb> I tend to pick books by going to a bookstore, finding likely titles, paging through them and reading random bits.  If there's something new in there, I pick it up.  It may have been bad luck, but CC failed that test last time.

[17:37] <ntgrl> _Code Complete_ is definately a good one :)  lots of lovely experimental results

[17:38] <autrijus> CC is really not for random access :)

[17:38] <geoffb> OK, fair enough.

[17:38] <geoffb> >> reading-pile

[17:38] <autrijus> it's almost completely sequential and would only make sense that way

[17:38] <autrijus> imvvho

[17:39] <geoffb> nodnod

[17:39] <Alias_> ugh... I hate when you are getting distracted from your distractions to fix code that is need by ... etc...

[17:39] <Alias_> The worst bit is when you fix the very most distracted thing and then forget how you got to where you are

[17:40] <geoffb> Alias_, you have just discovered the joy of yak shaving

[17:40] <Alias_> it has a name?

[17:40] <geoffb> yup

[17:41] <autrijus> and reading CC is definitely yakshaving for perl6/pugs :)

[17:41] <Alias_> yep, I'm most definitely yak shaving

[17:42] <Alias_> Actually, I managed to stop myself from refactoring Template Toolkit

[17:42] <geoffb> oh my

[17:42] <geoffb> good save

[17:42] <Alias_> Which would have been where I got a bit too close to the Yak's ass for comfort

[17:42] <geoffb> lol

[17:42] <Alias_> codegen is just one big excuse for yak shaving

[17:43] <Alias_> "... hmm... but I could solve this in the generic case by ..."

[17:43] <Alias_> "... and I'd never have to solve this problem in any application ever again if..."

[17:43] <Alias_> 50% of my modules are probably due to it too

[17:43] <geoffb> Go ahead, Alias_, be the "unreasonable man" -- you know you want to

[17:43] <geoffb> heh

[17:44] <ntgrl> Is there a module yet for doing nicely indented/prettified output?

[17:44] <theorbtwo> Data::Dump::Streamer?

[17:44] <Alias_> This time around it's "you know, with a Template filter I'd never have to work out which forms needed enctype="multipart/form-data"

[17:44] <geoffb> Nice -- the specs page on the C-- site is 403

[17:44] <ntgrl> theorbtwo: umm, but I'm not outputting perl code...

[17:45] <geoffb> ntgrl, are you asking about Perl 5?  Or Perl 6?

[17:45] <ntgrl> geoffb: either.  I was thinking something like Text.PrettyPrint.HughesPJ

[17:45] <geoffb> ah

[17:46] <theorbtwo> Oh.

[17:46] * theorbtwo suddenly notices that this isn't #london.pm

[17:48] <Alias_> aha! I finally remember where I was

[17:48] <theorbtwo> Ugh!  The current version of hat in debian is from 2003!

[17:49] <autrijus> ...and wouldn't work with GHC anyway

[17:50] <geoffb> $time, ingy 

[17:50] * theorbtwo wonders if he wants current-release or CVS.

[17:51] <theorbtwo> Well, since 2.04 doesn't even get past it's make system, let's try CVS.

[17:52] <autrijus> ingy: yo

[17:52] <autrijus> Alias_: no matter what I did on rex.com it always bails with "internal system error"

[17:52] <autrijus> what's wrong with that site?

[17:52] <theorbtwo> Whee: detects that I don't have hmake, and tries to use it anyway.

[17:52] <Alias_> It's COMPLETELY fucked

[17:53] <Alias_> I wrote a huge rant to the company

[17:53] <theorbtwo> This does not bode well to the usability of the code.

[17:53] <Alias_> autrijus: You pretty much need to change browsers

[17:53] <Alias_> I think it's the sessions getting screwed

[17:53] <autrijus> wtf :(

[17:53] <Alias_> So maybe flush cookies or something

[17:53] <Alias_> I needed three browsers to get through

[17:53] <autrijus> so what worked?

[17:54] <Alias_> They all work, you just can't date leave the most direct line

[17:54] <Alias_> dare

[17:54] <Alias_> So flush everything, then search, select, book, pay immediately

[17:54] <Alias_> Don't let the session get stale

[17:54] <Alias_> It's that bad

[17:54] <autrijus> I see.

[17:55] <autrijus> yup, that's it.

[17:55] * geoffb ponders what to do with day: write overdue O'Reilly blog, hack gjbforth, hack PIGGE, fall asleep with eyes open and hands at kb . . . .

[17:55] <Alias_> I'm going to ring in the morning

[17:55] <autrijus> how very retarded.

[17:55] <autrijus> Alias_: so, conf ends 7th @ melbourne. are you going to osdc, and how/when are you flying back if so?

[17:56] <Alias_> I'm going, I haven't booked flights yet

[17:56] <autrijus> I need to give a talk on 12th in sydney, no other engagements

[17:56] <Alias_> hmm

[17:56] <Alias_> Let me see if anyone does Ballina to Melbourne direct

[17:56] <Alias_> That might be a better option

[17:57] <stevan> hey autrijus :)

[17:57] <Alias_> but I don't think they do

[17:57] <autrijus> anyway, the plan is to fly back with you whenever your flight is

[17:57] <Alias_> ok

[17:57] <Alias_> I'll let you know the flight to book

[17:57] <autrijus> stevan: hey! CC2e totally r0x0rz

[17:57] <autrijus> Alias_: good, because it will just be two roundtrips for me

[17:57] <autrijus> sydney<->melbourne and then sydney<->lismore

[17:58] * stevan hasn't read that, but has been told to by many people 

[17:58] <autrijus> maybe more reasonable than sydney->melbounre->ballina->lismore->sydney

[17:58] * stevan is currently reading The Stars My Destination, by (Alfred Bester)++

[17:58] <Alias_> oh, we'd drive from ballina

[17:58] <Alias_> half an hour

[17:58] <Alias_> oh wait, I see

[17:59] <Alias_> So you get into Syd and someone is paying Syd<->Mel

[17:59] <Alias_> But they haven't booked specific flights?

[18:00] <stevan> autrijus: I had/am-having a crazy idea about introducing SML-like module signatures into the Perl6::Core::

[18:01] <stevan> then the metamodel can program to the signatures,.. and the core:: then can be easily swapped out 

[18:01] <autrijus> stevan: good, been thinking about the same

[18:01] <Alias_> SML?

[18:01] <stevan> and instead of wrapping the metamodel,... we can do something which maps Roles to module sigs

[18:01] <autrijus> sexp is a bit too dyn

[18:01] <stevan> Alias_: Standard ML 

[18:01] <stevan> autrijus: sexp is mostly just for fun :)

[18:02] <autrijus> well, luqui's idea has always been that functor (module sigs) becomes theories

[18:02] <autrijus> so that may be that "something"

[18:02] <stevan> yeah it maps nicely to theories :)

[18:03] <stevan> in fact.,.. theory.pod suddenly made much more sense when I re-read the Functor chapter in my ML book

[18:05] <autrijus> right, because I believe it originated from Scala and Scala took heavily from there

[18:08] <Alias_> autrijus: OK, there is no combination of flights that can get us from Melbourne to Lismore on the night of the 7th

[18:08] <Alias_> autrijus: So whoever is hosting you, plan to stay the night of the 7th

[18:09] <autrijus> ack

[18:09] <autrijus> so we fly 8th and I fly again on 13th

[18:10] <Alias_> we fly the 8th... I have no idea what you do on the 13th :)

[18:10] <autrijus> er wait

[18:10] <autrijus> I mean 11th ;)

[18:10] <Alias_> where and when is your Sydney commitment

[18:10] <Alias_> specifically

[18:10] <autrijus> unsw, 12 morning

[18:11] <Alias_> ouch

[18:11] <Alias_> hmm

[18:12] * autrijus ponders if Alias_ can also fly to unsw for more fun

[18:12] <Alias_> Maybe, but probably not

[18:12] <Alias_> I'm a bit overcommitted at the moment

[18:12] * clkao giggles at autrijus

[18:12] <autrijus> k... just tell me the times then

[18:12] <Alias_> It would be nice to go back to unsw though

[18:13] <Alias_> ok then, so looking at flight times, we have to take rex on the Lis<->Syd legs

[18:13] <Alias_> Nothing else can match the schedule

[18:14] <Alias_> Which means flight ZL338 departing Sydney 3:10pm

[18:15] <Alias_> on the 8th

[18:15] <Alias_> This app is SO fucked

[18:15] <autrijus> okie, ack.

[18:17] <Alias_> and for you, return flight ZL319 departing 8:55am on the 11th

[18:17] <Alias_> which gives you time to grab a taxi to UNSW

[18:17] <Alias_> with about half an hour spare :)

[18:17] <autrijus> that... is a bit mean

[18:18] <Alias_> oh this is FUCKED

[18:18] <autrijus> it's 12th morning

[18:18] <Alias_> what?

[18:18] <autrijus> not 12 noon morning

[18:18] <autrijus> misparse, sorry for bogus input

[18:18] <autrijus> (take this to /msg) ?

[18:20] <autrijus> sorry for the flooding :)

[19:33] <stevan> autrijus: ping 

[19:33] <autrijus> pong

[19:34] <stevan> hey,.. got time to chat about the module signature idea/

[19:34] <autrijus> I'm very sorry but no, it's already way past bedtime :/

[19:34] <stevan> ah,.. ok,.. :)

[19:34] <autrijus> I'm back at an unfortunate time zone  ;)

[19:34] <autrijus> 3:34am here

[19:34] <stevan> 2:33 pm, here :)

[19:35] <autrijus> almost maximally wrong, sigh

[19:35] <stevan> ok,.. so maybe tomorrow morning my time/evening your time?

[19:35] <stevan> or maybe talk late night tonight for me,,.. early morning tomorrow for you? 

[19:35] <stevan> whenever you have some time basically :)

[19:36] <autrijus> write it down first, then?

[19:36] <stevan> good idea,,.. i will do that

[19:36] <autrijus> I'll have plenty of time starting tomorrow

[19:36] <autrijus> but net connectivity might be limited

[19:36] <stevan> ok

[19:36] <obra> where you headed?

[19:36] <autrijus> I'm discovering this Reality thing isn't that bad after all and am coding things up in hot springs etc.

[19:36] <autrijus> obra: random pleasant place nearby

[19:37] <autrijus> s/place/places/

[19:37] <obra> nice

[19:50] <liz6> autri: yes, but you don't see me...

[19:55] * autrijus mumbles something about nickserv and freenode

[19:55] * liz6 mumbles utters something back

[19:56] <autrijus> oh well. I'll mail instead and sleep. *wave*

[19:56] * liz6 waves back

[20:01] * xinming won't stop waving until autrijus got asleep...

[20:01] <xinming> He might get a sleepless night if I do so. ;-)

[20:11] <r0nny_> *back*

[20:11] <r0nny_> can anyone here have a better vim file then the actual one ?

[20:12] <r0nny_> s/can/does/

[20:12] <PerlJam> "better vim file"?

[20:12] <r0nny_> u know - syntax highlighting

[20:12] <PerlJam> If the syntax highlighter is borked, fix it!

[20:13] <r0nny_> the perl6 syntax file scared me away

[20:14] <r0nny_> think i found what broke the module name-highlighting

[20:18] <Mitar> would it be possible to implement haskell under parrot?

[20:18] <Mitar> so are there any structural limits for implementing running haskell under parrot?

[20:19] <Mitar> like that parrot does not support anything what would haskell need?

[20:19] <Mitar> i know that everyhing could be simulated, but this would give perfomance penalty

[20:19] <xinming> 0,8,24,48,80,120 what's next number please?

[20:19] <Mitar> 42

[20:19] <xinming> a maths question. :-/

[20:19] <Mitar> :-)

[20:19] <Mitar> it could be any number

[20:20] <ntgrl> 0*8, 1*8, 3*8, 6*8, 10*8, etc

[20:20] <Mitar> mathematically

[20:20] <xinming> ....

[20:20] <Mitar> but you could ask which is the next number the author of the sequence thinks of

[20:20] <xinming> and found the relation between 0 1 3 6 10.

[20:20] <ntgrl> which is good ol' triangular numbess

[20:20] <r0nny_> im to lazy for finding the rule

[20:21] <ntgrl> 1/2*n*(n+1)(8

[20:21] <ntgrl> 4*n*(n+1)

[20:21] <xinming> I am poor at maths :'(

[20:21] <PerlJam> I think the correct solution here is to write a perl6 program that finds the next number  ;-)

[20:22] <ntgrl> xinming: you can draw out 0, 1, 3, 6, 10 as little patterns of dots and put those into triangles

[20:23] <xinming> ?eval my @a = [0,8,24,48,80,120]; { $_.say } for @a; my @b = [1..10]; { $_.say } for @b;

[20:23] *** evalbot_7958 is now known as evalbot_7959

[20:23] <evalbot_7959> undef 

[20:23] <xinming> :-P

[20:23] <qwr> try to subtract following numbers ;)

[20:25] <Mitar> so does anybody knows an answer to my question?

[20:25] <qwr> 120?

[20:26] <PerlJam> Mitar: parrot could implement haskell, yes.

[20:26] <xinming> Mitar: It will have one. :-)

[20:26] <Mitar> is there some info on that?

[20:26] <xinming> qwr: Yes, the answer is 120, But I feel regret for my poor maths in the school.

[20:27] <PerlJam> I thought 120 was in the given set?

[20:27] <ntgrl> the next number is 168, qwr 

[20:27] <xinming> the next is 168

[20:27] <xinming> :-/

[20:27] <PerlJam> the next numbers would be 168, 224, 288  (I think)

[20:28] <xinming> PerlJam: Exactly

[20:28] <ntgrl> then it's 360.

[20:28] <Mitar> PerlJam?

[20:28] <PerlJam> ntgrl: then 440

[20:29] <xinming> ...

[20:29] <ntgrl> and eventually 1002000

[20:29] <PerlJam> heh

[20:29] <PerlJam> ntgrl: and at some point it will be 1600080000

[20:30] <PerlJam> There's an interesting pattern there.  Not sure if it's "real" or not though

[20:30] <ntgrl> what?  that they're approximately the squares? :P

[20:31] <PerlJam> Why would anyone want to multiply triangluar numbers by 8 anyway?

[20:31] <qwr> (n^2 - 1) * 8

[20:31] <ntgrl> qwr: umm, no

[20:31] <theorbtwo> To annoy math students, PJ.

[20:31] <ntgrl> 4*(n^2 + n)

[20:31] <xinming> ...

[20:32] * xinming wish to go back to school and learn maths.

[20:32] <qwr> that is, when guess by looking some middle numbers ;)

[22:43] <svnbot6> r7960 | lwall++ | Could create -I options without an argument.

[22:46] <ntgrl> *blink* lwall!

[22:48] * Alias_ blinks too

[22:50] <ntgrl> hmm, not a bad patch as patches go

[22:51] *** cp5 is now known as samy

[22:54] <ingy> seen autrijus 

[22:54] <jabbot> ingy: autrijus was seen 2 hours 58 minutes 27 seconds ago

[22:54] <ingy> hi samy 

[22:54] <ingy> long time

[22:54] <samy> hey ingy

[22:54] <samy> yeah, how are you?

[22:55] <ingy> fine

[22:55] <samy> what are you doing these days

[22:55] <ingy> heading to Taiwan for a couple months

[22:55] * liz6 has waved autri to sleep

[22:55] <ingy> hi liz6 

[22:55] <samy> wow

[22:55] <ingy> long time

[22:55] <liz6> indeed......   trying to catch up...

[22:56] <liz6> in the midst of $work++

[23:19] <svnbot6> r7961 | lwall++ | range.t didn't test 'z'..'aa' carry, and was confused about 3..2ish things.

[23:24] <stevan> horray for our new committer lwall :)

[23:29] <dduncan> hey, it had to happen sooner or later

[23:29] <leo> recently nearby at #perl6: 00:19 < svnbot6> r7961 | lwall ...range.t didn't test 'z'..'aa' carry, and was confused about 3..2ish 

[23:29] <leo>                  things.

[23:31] <leo> oops  pasted into wrong channel

[23:39] <dbrock> how would I make hyphens synonymous to underscores in identifiers, and does Pugs support this?

[23:40] <dduncan> do you mean that you want to use a hyphen as part of an identifier?

[23:40] <dbrock> yes

[23:41] <dbrock> I also want to be able to call `foo_bar' by typing `foo-bar'

[23:41] <dduncan> I think you do it like ('foo')

[23:41] <dbrock> I don't understand

[23:41] <dduncan> at least, package name references can contain variables, such as ...

[23:42] <SamB> dbrock: #lisp called. they want their hyphens back.

[23:42] <dduncan> $text = &::($module_name)::get_text_by_key( $msg_key );

[23:43] <dduncan> in that case, part of an identifier is in a variable ... I suspect that in this usage the identifier can contain any characters ... not sure though

[23:44] <dduncan> my example meant &::('foo')::bar(), for example

[23:44] <dbrock> SamB: hey, lots of people, not only Lisp weenies, use hyphens instead of underscores

[23:44] <dduncan> or, Pkg::('foo-bar')()

[23:44] <dbrock> dduncan: okay... well, I don't want my code to look like that

[23:44] <SamB> dbrock: in what?

[23:45] <dbrock> dduncan: although that is cool

[23:45] <dduncan> I don't know if that would work, but I think that is how it would look if it did

[23:45] <dbrock> SamB: take CSS, for example

[23:45] <dduncan> fyi, my quoted example with $text actually does work

[23:46] <dduncan> also, the paren notation works when specifying the version part of a module, for example, ...

[23:46] <luqui> SamB, also, it is canonical for BNFs

[23:46] <dduncan> use Foo-(0.0.2..0.1.3);

[23:46] <dduncan> versus

[23:46] <dbrock> I don't want my code to look like $text = &('get-text-by-key')($('msg-key'));

[23:46] <dduncan> use Foo-0.3.0;

[23:47] <theorbtwo> Feel free to warp the parser.

[23:47] <dduncan> maybe the & isn't necessary ...

[23:47] <dbrock> I want it to look like $text = get-text-by-key($msg-key);

[23:47] <theorbtwo> But note that then you can no longer say time-3600 to mean time()-3600.

[23:47] <theorbtwo> There are quite likely other conflicts as well.

[23:47] <dduncan> the key thing is that if you have parens inside an identifier, they seem to interpolate any variable

[23:47] <dbrock> theorbtwo: yes, obviously I can't do that

[23:47] <theorbtwo> dduncan: I think it's only ::().

[23:48] <dduncan> perhaps... that's only where I've seen it work

[23:48] <dbrock> I would write "time - 3600" anyway

[23:48] <dbrock> theorbtwo: how do I warp the parser?

[23:48] <dduncan> I think that if we're going to start allowing '-' as part of identifiers, we should allow any characters, and require them to be delimited

[23:49] <dduncan> this is how SQL works, fyi

[23:49] <dduncan> an identifier can contain anything, even spaces, if it is double-quote delimited

[23:49] <dbrock> but I don't want to double-quote my identifiers

[23:49] <theorbtwo> In present-day pugs, by hacking haskell code.  In perl6 as specced... well, don't know, but you can do it without hacking anything but rules.

[23:49] <dduncan> then don't use funny characters in them

[23:50] <dbrock> dduncan: the hyphen is not a "funny character"; it is roughly as common as the underscore as word-separator in identifiers

[23:51] <dduncan> well, I suppose that if any use of subtraction requires spaces to be around the -, it could work

[23:51] <dduncan> but only in that case

[23:51] <dbrock> yes, and I think that is desirable

[23:52] <theorbtwo> I don't.

[23:52] <dduncan> personally, I wouldn't want to use a - in identifiers, though

[23:52] <theorbtwo> It's often a good idea, but sometimes not.

[23:53] <dbrock> why do you think it's not a good idea in this case?

[23:53] <dduncan> dbrock, if you want to be able to have hyphens in identifiers, make your case on perl6-language

[23:55] <dduncan> on that note, while perl 6 is highly about blazing new trails and finding a better way, even if no one else has done something before, what existing languages do you know of that allow hyphens in bareword identifiers?

[23:55] * luqui likes hyphens

[23:56] <dduncan> bareword meaning non-delimited

[23:56] <luqui> dbrock, however, can you give another example to back up your claim that hyphens are about as common as underscores?

[23:56] <dduncan> in the context I'm referring to

[23:57] <dbrock> luqui: I think the fact that all Lisp-derived languages use hyphens is enough to put it in the same ballpark

[23:57] <dbrock> that includes languages like Dylan

[23:58] <luqui> dbrock, yeah, but they also use many other characters in identifiers

[23:58] <luqui> ',*,?,!,etc.

[23:58] <dbrock> luqui: sure, they also allow underscores, but noone uses them

[23:59] <SamB> the lexical syntax allows them, but the community would lynch you...

[23:59] <luqui> dbrock, there is one problem I have with allowing hyphens

[23:59] <dbrock> signal names in GObject allow both hyphens and underscores and treat them as synonyms --- I think this is the way to go if you want to appeal to Lispers and Unix people equally

[23:59] <luqui> but it's not the hyphen in particular that I'm opposed to

[23:59] <luqui> it's the possibility of having both hyphens and underscores

