[00:00] <geoffb> :-)

[00:00] <nothingmuch> the universe tends to threaten to do that when you're working with haskell, and are starting to reimplement your brain in it

[00:00] <geoffb> nodnod

[00:01] * nothingmuch goes to take a shower, in the hopes that the windows build will actually get somewhere

[00:02] <nothingmuch> it keeps hanging and I don't like babysitting

[00:03] <geoffb> :-/

[00:03] <nothingmuch> yeah, some stupid tool

[00:03] <nothingmuch> it does a reset, and waits for the daemon to restart

[00:03] <nothingmuch> the daeamon finishes restarting

[00:03] <nothingmuch> but the client keeps on hanging

[00:03] <nothingmuch> reproducably, on some tests, but not others, which is odd

[00:03] <nothingmuch> but nevermind

[00:16] <nothingmuch> http://www.thebestpageintheuniverse.net/c.cgi?u=banish

[00:29] <geoffb> nothingmuch: ah, see now *that* was a nice break from monad theory

[00:34] <wolverian> hmm, on what level would one write a generic syntax filter that doesn't change the semantic meaning? such as changing 'foo if bar' to 'if bar { foo }'?

[00:34] <svnbot6> r5800, Stevan++ | Perl6::MetaModel - (p5 version)

[00:34] <svnbot6> r5800, Stevan++ | * Perl6::Class is now a subclass of Perl6::Instance (code consolidation)

[00:34] <svnbot6> r5800, Stevan++ | * much code moved to Perl6::Class::Util::*

[00:34] <svnbot6> r5800, Stevan++ | * misc. code cleanup here and there... 

[00:34] <wolverian> AST or grammar or...?

[00:38] <mugwump> that would have to take the non-optimised AST and write it out again, I guess

[00:39] <ezra_> either way, it needs to be acceptable to the grammar, right?

[00:40] <mugwump> you'd hope it didn't produce broken code, yes

[00:40] <ezra_> i mean both syntactic forms have to actually parse, before you get an AST to transform.

[00:41] <mugwump> you might be able to get away with simply mutating the AST and rely on the regular AST dumper to do that for you

[00:41] <mugwump> ezra_: to do that sort of thing, you need to start with an AST.  You can't just mutate the source text.

[00:41] <ezra_> but you have to right out two productions to allow both form, yes?

[00:42] <ezra_> S -> X if Y       and       S -> if Y { X }

[00:43] <mugwump> The AST would have to know which was used to be able to roundtrip safely from source code to AST and back

[00:43] <ezra_> s/right/write/

[00:44] <ezra_> What's the AST dumper used for?

[00:44] * ezra_ is ignorant of most of perl6

[00:45] <mugwump> The AST dumper is used to take a ParseTree and write it out again.  It currently only supports debugging output of these trees.

[00:45] <wolverian> mugwump, hm, right. that's what I was thinking.

[00:45] <ezra_> (ah)

[00:46] <wolverian> I'm thinking of every perl coder having his set of filters as a standard preprocessing phase in his favourite editor

[00:46] <wolverian> so that everyone codes in his version of perl.

[00:46] <wolverian> (this is strictly a subset of the standard grammar. I'm not interested in grammar changes.)

[00:48] <mugwump> Nice idea; I think a more achievable first goal would be to simply get a refactoring editor like eclipse to be able to use pugs itself to drive the highlighting...

[00:49] <mugwump> then that sort of thing could be layered atop it

[00:49] <wolverian> hmm. I'd like a more general refactoring layer so that any editor can use it, but maybe I'm building it too big

[01:22] <Khisanth> wolverian: everyone coding in their own version of Perl sounds like a nightmare

[01:22] <wolverian> Khisanth, I'm not sure. as long as it can be machine translated.

[01:22] <wolverian> (and I did say no grammar changes :)

[01:23] <Khisanth> maybe every "unit" coding in their own version of Perl

[01:24] <Khisanth> but then that would still present issues if you hire someone new

[01:24] <wolverian> I'm not sure if there's an issue as long as a file loaded by anyone is guaranteed to be presented in their way 

[01:25] <wolverian> (remember, this is about automatic AST changes under one grammar, nothing fancier)

[01:26] <Khisanth> slightly less nightmarish but still a nightmare :)

[01:26] <wolverian> as long as the filter hides the nightmare from you ... :)

[01:26] <Khisanth> since it would imply something like "I'm sorry but your editor is not powerful enough to handle Perl" might occur :)

[01:27] <geoffb> ENOTEMACS

[01:27] <Khisanth> which reminds me of the end of Batman Begins

[01:27] <geoffb> Or, I suppose, ENOTVIM, for the other half

[01:29] <wolverian> Khisanth, true enough. :) then there would have to be an extra filter between the code and the filter, which would probably work in a team setting.

[01:29] <wolverian> (or anywhere where you can automatically force people to use that.)

[01:34] <putter> Khisanth: nightmare?  to be able to read perl in a standard form?  think rich style checkers.  think having a "default" perl syntax/style or two.  think reading CPAN modules in clear code, rather than everyone's carelessly crafted personal dialect.  i'm sooooo looking forward to it.

[01:37] <putter> Re my previously mentioned "method call which doesnt return to caller, but rather to further up the call stack", it turns out $.foo ~= "$nosuchvariable"; is (non-minimally?) sufficient to cause the jump.   where $nosuchvariable does exist elsewhere, but should not be in scope.

[01:37] <putter> weeeeeeeee.

[01:39] <putter> while AST modifying macros are nice, as are modifiable parser grammars, if someone wanted to do a simple p6 Filter::Simple, I'd use it immediately....

[01:39] <wolverian> ew. :)

[01:43] <putter> one line of Filter::Simple gets adverbs on rx working...

[01:44] <wolverian> I just want Seaside on Perl6 ... (continuations for web!)

[01:44] <putter> oh, that's cute.  when I fixed the aforementioned $nosuchvariable, I did it by changing the sub argument name, and missed one case of the old name.  no warning, just a no local exit.  cute.

[01:45] <wolverian> heh.

[01:46] <putter> It will be interesting to see how continuations on p6 shake out.  I can't imagine them not being exposed on platforms which support them.  But many interesting targets dont...

[01:47] <wolverian> wow, Monad.ContT is blowing my mind. 

[01:48] <putter> ;)

[01:48] <wolverian> this looks immensely neat and powerful and yet I have no idea whatsoever what it does exactly

[01:49] <wolverian> (I'm still in the 'trying to get the tuits to learn Haskell beyond the number guessing game' stage)

[01:50] * putter putter still isnt there yet...

[01:50] <wolverian> putter putter? :)

[01:50] <putter> ;)

[01:54] <putter> I get to watch my text, and see how my brain works... "subvocalize 'putter', with continuation for rest of line; activate '/me' typing behavior, setting often overlooked 'Ive typed /me flag'; pop back to subvocalize; fail to consult flag, type 'putter'".  what fun. :/

[01:55] <putter> actually, its more of a stack shift which often gets subsequently overwritten, but whatever.

[02:01] <putter> re seaside, some common-lisp folks were arguing (perhaps unsurprisingly) that full continuations don't buy that much versus escape continuations.  has anyone written a insightful "foo is why you want your web infrastructure to have full continuations"?

[02:06] <mugwump> putter, because escape continuations are a subset of full continuations.

[02:08] <putter> yes.  the question is, has anyone clearly stated what extra you get from having full continuations, in a web infrastructure context (seaside vs whatever).

[02:12] <mugwump> this is a pointed question; for the purpose of serialising state for use in an application server, escape continuations are all you need

[02:12] <mugwump> AIUI of course.  But I only recently learned of continuations

[02:18] <cwest> seen autrijus 

[02:18] <jabbot> cwest: autrijus was seen 3 days 6 hours 37 minutes 6 seconds ago

[02:18] <cwest> yow

[02:20] <dudley> that seems to be a common sentiment :)

[02:21] <dudley> He did post to p6c today, so he's not dead, at least.

[02:25] <mugwump> someone doesn't irc for 3 days and people assume they're dead?  COME ON PEOPLE!  :-)

[02:25] <geoffb> mugwump, this is autrijus we're talking about.  Last time it happened he was falling over from extreme jetlag and lack of sleep.

[02:25] <geoffb> And even then I don't think he was offline for more than 2 days at a time.  :-)

[02:30] <putter> and someone from his $work came by here looking for him...

[02:33] <jdv79> doesn't he stop working on pugs fulltime soon?

[02:33] <dudley> I assumed he had already, and that's why he hadn't been around

[02:34] <geoffb> I'm thinking so.

[02:34] <geoffb> I'm also guessing his lucky employer gets the same kind of single-minded work ethic that he has been devoting to pugs . . . .

[02:35] <stevan> last comment autrijus made (that I saw anyway) was that he was busy with $work and playing the Sims

[02:35] <stevan> my assumption is he is taking a well deserved break from Pugs reality in Sims reality

[02:36] <jdv79> how are things in Metaland?

[02:36] <stevan> jdv79: very cyclical

[02:37] <geoffb> Harrorth chapter 6 down, wheee . . . 

[02:37] <jdv79> are roles real now?

[02:38] <stevan> jdv79: in the p5 version they are pretty close

[02:38] <stevan> I have been avoiding things like role attributes and being about to do "is" within a role

[02:38] <stevan> those things tend to really complicate things

[02:40] <stevan> things like autogenerated accessors for attributes get sticky when you combine it with the method conflict rules

[02:41] <QtPlatypus> Is there a BNF for PIL, or even better a set of Perl6 rules for parsing it?

[02:42] <geoffb> Isn't there a PIL-as-YAML target?

[02:42] <stevan> QtPlatypus: the Haskell code for PIL is pretty close to BNF (kind of)

[02:44] <QtPlatypus> stevan: Thanks.

[02:56] <putter> QtPlatypus: iblech/PIL2JS is the PIL-parsing forcing factor.  last time I checked, it's still a p5 based parser.  plan is for pugs to output a yaml dump of PIL, and likely other forms too.  but I don't think that's happened yet?

[02:57] * QtPlatypus nods to putter.

[03:25] <putter> does anyone here understand how Parser.hs etal handle quoting?  I've a puzzle...

[03:44] <putter> are we in any kind of preflight? (it being monday...)

[03:51] <mugwump> last commit from autrijus was more than 5 days ago, so no :)

[03:52] <mugwump> but gaal, luqui, stevan, and iblech seem busy as ever

[03:54] <Khisanth> putter: adverbs on rx? rx:ims /.../ :blah; ?

[04:03] <QtPlatypus> ?evan rule block { \{ .* \} };'{abc}' ~~ /<block>/;

[04:03] <QtPlatypus> ?eval rule block { \{ .* \} };'{abc}' ~~ /<block>/;

[04:03] <evalbot6> Error:  unexpected end of input expecting "\\", "$!", "$/", "$" or "'" 

[04:04] <QtPlatypus> ?eval rule block { \{ .* \} }; 

[04:04] <evalbot6> undef 

[04:04] <mugwump> ?eval rule block { \{ .* \} }

[04:04] <evalbot6> undef 

[04:05] <QtPlatypus> ?eval rule block { \{ .* \} };/<block>/ ~~ "a";

[04:05] <evalbot6> bool::false 

[04:05] <QtPlatypus> ?eval rule block { \{ .* \} };/<block>/ ~~ '{a}';

[04:05] <evalbot6> Error:  unexpected end of input expecting "\\", "$!", "$/", "$" or "'" 

[04:06] <QtPlatypus> ?eval rule block { \{ .* \} };/<block>/ ~~ q/{a}/;

[04:06] <evalbot6> Error:  unexpected "/" expecting ";", statements or end of input 

[04:06] <QtPlatypus> Weard

[04:06] <Khisanth> hmm

[04:07] <Khisanth> try something from A5?

[04:14] <Khisanth> hey!

[04:15] <Khisanth> hmm

[04:36] *** ezra_ is now known as the_ez

[04:36] *** the_ez is now known as ezra_

[04:39] <putter> Khisanth: yes.  aka modifiers.

[04:40] <putter> QtPlatypus: re \}, you might try <'}'>.  though a just-applied patch may have fixed this issue too.

[04:45] <QtPlatypus> putter: No good.

[04:45] <svnbot6> r5801, putter++ | In Parser.hs, created a new quoting level QB_Minimal between QB_No and QB_Single.  Unlike No, it recognizes backslashed escapes of backslash and qfProtectedChar.  Unlike Single, it doesn't reduce them (ie, to a backslash or to the qfProtectedChar).  This appears to be what one wants for regexp literals.  Previously, a parsed  bs bs sp  and  bs sp  were indistinguishable.  The correct handling of odd quotes, eg  rx?...\?...? , is less clear, 

[04:45] <QtPlatypus> I'll try upgrading.

[04:48] <putter> :(

[04:49] <putter> Actually, r5801 doesn't help either. :(

[04:56] <QtPlatypus> r5801 isn't installing.

[04:57] <putter> !!

[04:57] <putter> details?

[04:58] <QtPlatypus> Syntax error in inc/PugsBuild/Config.pm

[04:59] <QtPlatypus> Ok I see what's happened, false alarm.

[04:59] <putter> whew. ;)

[05:01] <QtPlatypus> This is much better.

[05:11] <putter> re rule block { \{ .* \} };/<block>/ ~~ '{a}'; there seem to be a couple of issues.  one a parser issue (unexpected end of input - its not an artifact of the read-eval loop).  <'}'> solves that.  second, ~~ is not currently commutative with rx'es.  '{a}' ~~ /<block>/ fixes that.  last, pge is choking.  which isnt entirely suprising even if you have a current copy of the parrot leo-ctx5 branch.

[05:11] <putter> sigh.

[05:13] <putter> ah, you need <'}'> to keep pugs happy, but pge doesnt understand <'...'> yet.

[05:13] <putter> pge is happy doing \{ .* \}

[05:14] <putter> (or didnt a few days ago)

[05:18] <putter> ?eval rule block { \{ .* <[}]> } '{a}' ~~ /<block>/

[05:18] <evalbot6> pugs: src/events.c:270: init_events_first: Assertion `rc == 0' failed. 

[05:18] <putter> erp?!?

[05:19] <putter> works in ./pugs...

[05:20] <putter> perhaps evalbot has an old parrot?

[05:20] <putter> (ie, isnt using the leo-ctx5 branch... sigh)

[05:22] * QtPlatypus is upgrading both his pugs and his parrot.

[05:23] <putter> the recommended parrot for pge is not the usual trunk/ but rather leo-ctx5/ .  fyi.

[05:23] <QtPlatypus> Damn.

[05:23] <putter> though the latter doesnt always compile. :(

[05:25] <putter> "perl6 development - a microcosm of software engineering.  Ie, a maze of twisty little passages.  If only our tools worked, we could make tools that worked, but..."

[05:27] <QtPlatypus> ãhttp://svn.perl.org/parrot/leo-ctx5 or somewhere else?

[05:28] <QtPlatypus> (Ignore the nonsence)

[05:29] <putter> Explaining the current state of things to someone a decade hence may be like explaining life a century+ ago.  "I dont understand why X was so hard.  You just wash your hands.  -No running water - go to stream/neighborhood pump.  Ok, so I get a bucket of water and wash my hands.  -No soap.  Why not?  Not invented/available yet.  Damn, ok, you..."

[05:29] <putter> checking...

[05:30] <putter> it's under branches/leo-ctx5/

[05:30] <putter> perhaps http://svn.perl.org/parrot/branches/leo-ctx5/ ?

[05:34] <putter> and it seems to currently be broken.

[05:34] <putter> MANIFEST problem

[05:34] <gaal> oh no! I got bitten by ghc's "strange object" problem. what do i do?

[05:34] <gaal> (morning!)

[05:35] <putter> good morning!  Dont let it get away! :)

[05:36] <gaal> what, strange objects are precious? :)

[05:36] <putter> QtPlatypus: r8656 worked, but thats getting a bit long in the tooth.

[05:36] <putter> what platform and version of ghc are you running?

[05:36] <putter> (some strange objects are well known, and thus less precious :)

[05:37] <gaal> win32, ghc-6.5 snapshot of  few months back

[05:37] <putter> cpu?

[05:37] <gaal> update_fwd: unknown/strange object  35176

[05:37] <gaal> intel p4 3ghz prescott ht

[05:38] <putter> so 32bit.  hmm...

[05:38] <gaal> y

[05:38] <gaal> didn't happen last week

[05:38] <gaal> ...and this is on the r before your checkins

[05:39] <gaal> so it doesn't look like your fault ;-)

[05:39] <gaal> wow, nice quote on a.w.a.d. today

[05:39] <gaal> A root is a flower that disdains fame. -Kahlil Gibran

[05:43] <putter> :)

[05:45] <putter> Searching http://sourceforge.net/tracker/?group_id=8032&atid=108032  I dont see any  strange object  tickets which are not 64-bit related.  So the next questions are can you replicate it (less interesting if not), and is it still a problem (but it can be painful to try and find out).

[05:46] <putter> err, "still a problem" in a more recent snapshot...

[05:47] <gaal> fwiw, i'm making clean and trying again with a larget heap

[05:48] <putter> my fuzzy impression is strange object is gc related, so larger heap will put off the problem.

[05:49] <putter> yipes.  2am.  good night folks. &

[05:49] <gaal> well, it did happen in the most memory intensive part, where i had already gotten ooms before on smaller heaps

[05:49] <gaal> night :)

[05:49] <gaal> (Run.hs w/precompiled Test.pm)

[06:30] <svnbot6> r5802, chromatic++ | Minor typo fixes (error message and documentation).

[06:30] <svnbot6> r5803, chromatic++ | Added basic tests for method introspection (S12/Introspection).  Most fail.

[06:30] <svnbot6> r5804, chromatic++ | Make a few tests from t/35_Method_introspection.t pass.

[06:57] <stevan> chromatic++ # someone else taking an interest in the metamodel :)

[06:57] <svnbot6> r5805, Stevan++ | Perl6::MetaModel - (p5 version)

[06:57] <svnbot6> r5805, Stevan++ | * Major refactor of ::MetaClass (bootstrapping)

[06:57] <svnbot6> r5805, Stevan++ |     - more than 50% of ::MetaClass is now described as a ::MetaClass instance

[06:57] <svnbot6> r5805, Stevan++ |     - ::MetaClass internals restructured to match what Perl6::Object creates

[06:57] <svnbot6> r5805, Stevan++ | * Perl6::Instance removed (we didn't need it)

[06:57] <svnbot6> r5805, Stevan++ | * guts of Perl6::Instance moved back into Perl6::Class

[06:57] <svnbot6> r5805, Stevan++ |     - changes made in ::MetaModel to facilitate this change

[07:11] <gaal> newish smoke win32: http://perlcabal.org/~gaal/smoke_xp.html

[08:07] *** Aankh|Clone is now known as Aankhen``

[09:08] <gaal> ?eval :x<2>.perl

[09:08] <evalbot6> 'undef' 

[09:08] <gaal> anyone know how to fix that?

[09:09] <gaal> ?eval (x => 2).perl

[09:09] <evalbot6> 'undef' 

[09:09] <gaal> pairs are broken?

[09:10] <gaal> ?eval :x<2>

[09:10] <evalbot6> ('x' => '2') 

[09:10] <gaal> ?eval (x=>2)

[09:10] <evalbot6> ('x' => 2) 

[09:10] <gaal> okay, so .perl on pairs is broken. :)

[09:14] <nothingmuch> perl 6 doesn't have the flop flop operators, right?

[09:14] <gaal> doesn't it? they were nice

[09:15] <gaal> bbiab&

[09:36] <svnbot6> r5806, gaal++ | add some tests for :pair constructors inside <<>>-quotes

[09:42] <svnbot6> r5807, autrijus++ | * Fix pair binding: For functions expecting pairs as arguments,

[09:42] <svnbot6> r5807, autrijus++ |   their Pair arguments should engate in positional binding,

[09:42] <svnbot6> r5807, autrijus++ |   not named bindings phase.  Implemented with the hack of

[09:42] <svnbot6> r5807, autrijus++ |   (Syn "=>") representing a pair as named argument, and the

[09:42] <svnbot6> r5807, autrijus++ |   original (App (Var "&infix:=>")) now means positional during

[09:42] <svnbot6> r5807, autrijus++ |   the binding phase.

[09:42] <svnbot6> r5808, autrijus++ | * 6.2.9's Main.hs poem is French.

[09:42] <svnbot6> r5809, autrijus++ | * add a small test, due to gaal, that tests Pair object's

[09:42] <svnbot6> r5809, autrijus++ |   canonical representation (.perl).

[09:47] <nothingmuch> the problem with flipflop is that it's not lexical enough

[09:48] <nothingmuch> i guess you can implement it

[09:48] <nothingmuch> my &infix:<..> = make_me_a_flip_flop();

[09:48] <nothingmuch> and that way you have control

[09:51] <nothingmuch> sub make_me_a_flip_flop { :FlipState = enum <Before During After> ($left is delayed, $right is delayed) { state FlipState $x = Before; given $x { when Before { if ?$left { $x = During; return True } else { return False } }; when During { if ?$right { $x = After; return False } else { return True }; default { return False } } } }

[09:52] <nothingmuch> oh, it really returns 'multi sub returns Bool'

[09:52] <nothingmuch> so that it's not ambigouous with the range operator

[09:53] <gaal> funny you should mention that, i was wanting to implement enum

[09:54] <gaal> but the tests all use <<:Pair<initial_value>>> syntax, hence the detour

[09:54] <nothingmuch> i was guessing

[09:54] <nothingmuch> i forgot how it creates types

[09:54] <gaal> though s12 mentions some advances stuff there about how it's a role and stuff

[09:54] <gaal> yeah

[09:55] <gaal> i don't know how to do that

[09:55] <gaal> having it return a hash is easy :)

[09:55] <nothingmuch> heh

[09:55] <nothingmuch> one sec, i'll have a look

[09:55] <gaal> i'm dehydrated, darn

[09:56] * gaal goes find something to drink

[09:56] <nothingmuch> enum returns a list of pairs in any context

[09:56] <nothingmuch> but 'my enum day <Sun Mon Tue ...>' is a role

[09:56] <nothingmuch> it really creates a class

[09:56] <nothingmuch> and I assume that each enumeration is a role

[09:57] <nothingmuch> such that Tue is an instance of day that does Tue

[09:57] <nothingmuch> or something

[09:57] <nothingmuch> since you have "Today" but Tue;

[09:57] <nothingmuch> or "Today" but day::Tue;

[09:58] <nothingmuch> it's composing a property at runtime

[09:58] <gaal> can we do that already?

[09:58] <nothingmuch> i don't think so

[09:58] <gaal> oh :(

[09:58] <gaal> well, enum doesn't have tests for that stuff yet anyway

[09:58] <nothingmuch> either way, anonymous and named are very different

[09:58] <nothingmuch> you should have a crack at anonymous

[09:58] <gaal> y

[09:59] <nothingmuch> given tuits today I may be tempted to test enum

[09:59] <nothingmuch> i like it

[09:59] <nothingmuch> it reminds me of haskell's data

[09:59] <nothingmuch> enum Bool <<True False>>

[09:59] <gaal> yes, i saw how you used it in the flipflop

[09:59] <gaal> "of bit"

[09:59] <nothingmuch> now all we need is for the enumeration to allow using higher order functions

[09:59] <nothingmuch> right

[09:59] <nothingmuch> gaal++

[09:59] <gaal> hofs? where?

[09:59] <nothingmuch> i think FlipFlop.pm is nice

[10:00] <gaal> i think HOP is nice. :)

[10:00] <nothingmuch> enum Maybe <<Nothing Maybe($value)>>>

[10:00] <nothingmuch> or some such ;-)

[10:00] <nothingmuch> i haven't seen it yet

[10:00] <gaal> lol

[10:00] <nothingmuch> ofcourse, Maybe would return an opaque

[10:00] <gaal> you'll be wanting mzero soon

[10:00] <gaal> and mplus and stuff

[10:01] <nothingmuch> multi sub Just ($x) returns Maybe { Maybe.new has $x } # whatever, we can never know how it's implemented

[10:01] <nothingmuch> multi sub Just (Maybe $x) { @$x }; # pattern matching

[10:01] <nothingmuch> =D

[10:02] <nothingmuch> i think I'm not being sane

[10:03] <nothingmuch> enum Maybe does Monad <<Nothing Maybe($x)>>

[10:03] <gaal> nothingmuch, how about you work on parsing :pairs in <<>>?

[10:03] <gaal> since you're not sane

[10:03] <nothingmuch> i think i have a better idea:

[10:03] <nothingmuch> pairs are parsed in <<>> regardless

[10:03] <nothingmuch> they always return a pair

[10:03] <nothingmuch> so we don't special case it

[10:03] <gaal> er

[10:03] <gaal> yes,

[10:03] <nothingmuch> then it should be easy, but I can't do it now

[10:03] <gaal> but they aren't parsed now

[10:03] <gaal> ah

[10:03] <gaal> ok

[10:03] <nothingmuch> i'm on a mental break from work, the 5 minutes after lunch

[10:03] <nothingmuch> i still have to kick out that blasted build

[10:04] <nothingmuch> it's failing due to system configuration problems

[10:04] <nothingmuch> and I need to go through the logs and based on the type of errors decide whether the fail is just chaffe or really a fail

[10:04] <gaal> i see you have enough fun. :)

[10:04] <nothingmuch> yup

[10:04] <nothingmuch> although my project proposal thing seems to be headed in the right direction

[10:05] <nothingmuch> i think i will be doing a lot of heavy perl soon

[10:05] <gaal> beh, pugscode's rss feed dosen't escape html

[10:05] <gaal> or else lj's aggregator doesn't

[10:06] <gaal> so every time somenone (me this time) puts a < in a commit comment, it gets mangled.

[10:06] <nothingmuch> which commit message?

[10:06] <nothingmuch> oh

[10:06] <gaal> 5806

[10:06] <nothingmuch> i see it properly in safari

[10:06] <nothingmuch> but it maybe a quirks mode fix

[10:06] <gaal> i don't know who's wrong though

[10:07] <gaal> maybe it isn't even specced? this is rss we're talking about :-(

[10:07] <gaal> (actually: it probably is specced. differently across versions)

[10:07] <nothingmuch> curl shows me: inside &lt;&lt;>>-quotes

[10:08] <gaal> bbiab &

[10:18] <nothingmuch> autrijus: ping

[10:18] <Aankhen``> nothingmuch: That ought to be okay, shouldn't it?

[10:18] <nothingmuch> Aankhen``: yes, it looks like it's a livejournal problem

[10:18] <nothingmuch> it probably unescapes, and then does not reescape

[10:19] * Aankhen`` casually shakes a fist at LJ.

[10:19] <nothingmuch> escaping is such a bitch of a problem

[10:19] <nothingmuch> i hate it.

[10:19] <nothingmuch> that and encoding conversion

[10:19] <nothingmuch> no app that is not either:

[10:19] <nothingmuch> UI

[10:19] <nothingmuch> something that extracts stuff out of a UI

[10:19] <nothingmuch> should care about either

[10:19] <nothingmuch> e.g., what goes in must come out

[10:20] <nothingmuch> that way you make your text editor write utf8

[10:20] <nothingmuch> apache just says what it is

[10:20] <nothingmuch> the rss feed gets the file, and pumps it verbatim

[10:20] <Aankhen``> I do believe encoding conversion is a much greater headache than escaping. :-)

[10:20] <nothingmuch> livejournal gets a structure with verbatim crap in

[10:20] <nothingmuch> nothing is unescaped

[10:20] <nothingmuch> this is just sent streight to the browser

[10:20] <nothingmuch> the content type is copied from apache

[10:21] <nothingmuch> too many applications nowadays try to be smart about this stuff

[10:21] <nothingmuch> what I like about OSX is that they made:

[10:21] <nothingmuch> the string library

[10:21] <nothingmuch> the file handle object

[10:21] <nothingmuch> and most builtin dialogs and stuff (text boxes, etc)

[10:21] <nothingmuch> smart enough to handle this stuff well

[10:21] <nothingmuch> so that authors should never feel a need to know better than the user

[10:22] <nothingmuch> (and usually they don't)

[10:22] <Aankhen``> Uh huh.

[10:22] <nothingmuch> it's so much fun to see apps on OSX support hebrew out of the box

[10:22] <Aankhen``> Heh.

[10:22] <nothingmuch> this is something that never happenned before

[10:22] <nothingmuch> and they support hebrew because the authors didn't do anything special =)

[10:22] <Aankhen``> Kewl.

[10:23] <Aankhen``> Right, I'm gonna go play some more games.

[10:23] <Aankhen``> Late.r

[10:23] <Aankhen``> Later.

[10:23] <nothingmuch> ciao

[10:24] * nothingmuch needs email, but box at home lost connection... again

[10:24] <nothingmuch> this is the 2nd time in 3 days

[10:24] <nothingmuch> it's really frustrating

[10:24] <nothingmuch> if only i actually had the time and will to switch ISPs again

[10:31] * nothingmuch has a weird ideae:

[10:31] <nothingmuch> MMD dispatch errors are not fatal in a when { } 

[10:31] <nothingmuch> the errors are delayed

[10:31] <nothingmuch> and fatalized if the given block exited with no choice

[11:05] <pasteling> "nothingmuch" at 212.143.92.226 pasted "the maybe monad in perl 6 with nothingmuch's drunken enums" (48 lines, 1.3K) at http://sial.org/pbot/11996

[11:07] <nothingmuch> damnit, this is bullshit

[11:08] <nothingmuch> "Paste unacceptable: flood rate exceeded. Next paste allowed in 7339 seconds."

[11:08] <nothingmuch> just a second ago I had a "next paste allowed in 10 seconds"

[11:08] <nothingmuch> which is something i never got

[11:21] <gaal> try another pastebot, nm

[11:24] <gaal> why did the Main.hs poem change language?

[11:30] *** Aankh|Clone is now known as Aankhen``

[11:52] * pdcawley_ wonders if everyone else finds themselves yawning uncontrolledly whenever Thomas Sandlaß posts anything...

[11:59] <Aankhen``> pdcawley_: Of course not! It's very fascinating to see what people can do to English and get away with. :-D

[12:05] <nothingmuch> IA64 seems like a very yummy platform

[12:14] * pdcawley_ giggles at Aankhen.

[12:22] <svnbot6> r5810, Aankhen++ | * added variant of &HTTP::Message::BUILD to handle no arguments.

[12:42] <svnbot6> r5811, Aankhen++ | * added skeleton for HTTP::Request::CGI.

[12:58] <nothingmuch> if I ever own a company my QA department will be writing tests in haskellD

[12:58] <nothingmuch> there's nothing more useless than unmaintainable or unreadable or hard to write tests

[12:58] <nothingmuch> and the combination of the 3... eep

[12:59] <nothingmuch> i'd rather the test support code (e.g., comparisons, reusable monad thingies, etc) will take 3* times as long

[13:01] <Aankhen``> HaskellD?

[13:01] <Aankhen``> Is that a typo?

[13:03] <Aankhen``> BBIAF.

[13:05] <nothingmuch> yes, it is

[13:09] <QtPlatypus> BTW is it know problem what you can get action at a distence bugs with the PGE?  Changing rules seems to cause unde related rules to fail.

[13:49] * masak thinks pugs development has slowed down recently

[13:49] <svnbot6> r5812, ingy++ | wahacha

[13:49] <masak> i wish there was more i could do to help, but all i master so far is the tests :/

[14:01] <stevan> masak: sometimes it is the most calm before the storm :)

[14:02] <ingy> masak: you could write modules :)

[14:05] <PerlJam> putter++ (rules engine on pcre)

[14:05] <svnbot6> r5813, Stevan++ | Perl6::Code - use PadWalker to bind params, it is voodoo, but it is fun :)

[14:07] <Khisanth> hrm why a rules engine in p5? shouldn't ponie have easy access to PGE? :)

[14:08] <QtPlatypus> The PGE is rather buggy and (at least for me) has a tendeny to explode if you look at it wrongly.

[14:09] <PerlJam> QtPlatypus: How have you been looking at PGE?  ;-)

[14:10] <PerlJam> Khisanth: multiple independent implementation of a rules engines suits me better than a single implementation.

[14:10] <Khisanth> well yes and ponie is probably not completely converted either

[14:10] <Khisanth> but I assume at some point PGE will stop doing that :)

[14:10] <PerlJam> one would hope

[14:10] <Khisanth> at least I hope so

[14:11] <PerlJam> QtPlatypus: Like pugs, writing a test that makes PGE blow up will help in getting it fixed.

[14:12] <Khisanth> rules engine in p5 seems nice, rules in pcre seems a bit ...

[14:12] <QtPlatypus> PerlJam: What is the polite way of writing a test that triggers a bus error?

[14:13] <PerlJam> QtPlatypus: um ... I wouldn't be polite about a bus error.

[14:13] <PerlJam> Khisanth: note that all the world uses PCRE while only perl5 uses p5  :)

[14:14] * QtPlatypus ponders writing tests that get the bad responce that he gets.

[14:14] <Khisanth> if pcre were already capable of doing everything rules is then there wouldn't have been a need for some of the changes!

[14:21] <mugwump> er, kill $$, "BUS"

[14:23] <masak> ingy: i've been thinking of writing modules. is there a Test::Base coming for perl6? :)

[14:24] <masak> stevan: sounds like you know something i don't :)

[14:25] <masak> ingy: btw, a thing i've been wanting to ask you for some time: if i want to convert kwid->html today, what is the best way?

[14:26] <Khisanth> isn't there already a kwid converter?

[14:28] <stevan> masak: I see nothing, I know nothing

[14:30] <masak> :)

[14:30] <masak> Khisanth: where? link?

[14:31] <Khisanth> hmm thought I saw it in the tree before

[14:33] <QtPlatypus> Is there any way to the :D in code?  (As as far as I can tell the only way to do that is to pipe out to pugs and then parse the PIL output).

[14:34] <Khisanth> "the :D"?

[14:34] <QtPlatypus> In the RPEL if you type ":D foo;" it dumps PIL at you.

[14:35] <QtPlatypus> Actually it doesn't it dumps a parse tree.

[14:35] <QtPlatypus> Seems there is nothing to a pil dump from with pugs.

[14:36] <Khisanth> one of the B modules perhaps?

[14:38] <QtPlatypus> Perhaps.

[14:39] <Khisanth> all the -B stuff seems to be built in though

[14:40] * QtPlatypus nods "Yes"

[14:42] * QtPlatypus finds Compile.hs, which is where the PIL is generated apperently.

[16:07] <autrijus> greetings lambdacamels

[16:07] <Khisanth> hello :)

[16:07] <autrijus> :)

[16:10] <obra> autrijus-san: well-rested?

[16:10] <autrijus> obra: not quite, still recovering from TaPL :)

[16:11] <autrijus> 3 chapters left

[16:11] <obra> oh wow :)

[16:11] <autrijus> this reread is really much better than the last time

[16:11] <obra> nod

[16:11] <autrijus> I noted with mixed emotions that in many many places, the TaPL textbook elides some combination of features

[16:11] <autrijus> saying it's not used in practice, or too complex to analyze, or intractable enough to not realizable

[16:12] <autrijus> and yet p6 is doing all of them!

[16:12] <autrijus> ;)

[16:12] <PerlJam> autrijus: so ... when will you start your TaPL rewrite? ;)

[16:14] <autrijus> PerlJam: I think I'll start with simple papers that tackles the issues :)

[16:14] <broquaint> TaPL?

[16:15] <Khisanth> Types and ... something :)

[16:15] <Khisanth> see READTHEM

[16:16] <autrijus> Programming Languages.

[16:16] <broquaint> Types and Pugs Leetness.

[16:16] <Khisanth> by Autrijus Tang? :)

[16:16] <broquaint> Did you absorb TaPL directly into your brain, autrijus, Matrix-stylee?

[16:17] <autrijus> broquaint: kind of. I'm also learning OCaml :)

[16:17] <PerlJam> autrijus: maybe you could encourage Pierce to take a sabbatical from upenn and visit with you and others 

[16:18] <broquaint> Watch out for brain teh splode.

[16:18] <autrijus> PerlJam: actually I'm planning to do some Erdősing this winter

[16:19] <autrijus> the wandering part, not the numbering part :)

[16:22] <PerlJam> autrijus: well then you can wander over to upenn :)

[16:23] <autrijus> that's a possibility, but I'm trying to keep to .eu for now... we'll see :)

[16:23] * autrijus ponders staying at leo's and repeat the hackathon

[16:24] <PerlJam> oh!  do that if you can.  That sounds so much better ;)

[16:25] <PerlJam> you're just rereading TaPL but not ATaPL?

[16:26] <PerlJam> er, ATTaPL

[16:27] <autrijus> I'd do that if I can find my copy :)

[16:27] <autrijus> I suspect it's buried deep somewhere

[16:43] <svnbot6> r5814, Aankhen++ | * HTTP::Request::CGI: added documentation.

[17:17] <masak> autrijus: Erdősing sounds like a really good idea

[17:17] <masak> i wish i had the chance to do something like that

[17:17] <autrijus> thanks :) but that also means I need to spend more time on $job this and next month

[17:18] <autrijus> lest my savings will run well into the negative range

[17:19] <autrijus> but I'm quite excited at the prospect of finding erdősees during ICFP and Euroscon

[17:32] <autrijus> oh wow. shapr++

[17:32] <autrijus> http://www.haskell.org/pipermail/glasgow-haskell-users/2005-July/008781.html # Pugs's GADT-for-ordinary-datatype request made into a GHC feature

[17:34] <Aankhen``> Excellent!  shapr++

[17:34] <Aankhen``> BTW, what's GADT? :-P

[17:38] <autrijus> Aankhen``: see docs/notes/recursive_polymorphism_and_type_inference :)

[17:38] <Aankhen``> OK, thanks.

[17:38] <autrijus> :)

[18:11] <svnbot6> r5815, autrijus++ | * Global destruction -- DESTROYALL() on all active objects --

[18:11] <svnbot6> r5815, autrijus++ |   is now guaranteed upon program exit. 

[18:16] <geoffb> WTH is 'Erdősing'?

[18:17] <svnbot6> r5816, fglock++ | * Recurrence.pm union/intersection check for closure identity;

[18:17] <svnbot6> r5816, fglock++ |   improved docs.

[18:22] <autrijus> geoffb: Paul Erdős is this crazy person who travelled from one mathematician's house to another

[18:22] <autrijus> never staying for too long, and during the stay would work with the host on whatever problem the host is working on, and publish a paper together, then he moves on

[18:22] <geoffb> Oh that is just cool as hell

[18:23] <geoffb> (and welcome back, btw)

[18:23] <autrijus> thanks :) it's nice to be alive

[18:23] <geoffb> :-)

[18:23] <autrijus> (and finally solved chromatic's one and only remaining T::Builder blocker)

[18:23] <geoffb> And there was much rejoicing

[18:24] <autrijus> :)

[18:24] <geoffb> In your absence several of us having been boning up on haskell attempting to get to happy bug-fixing stage

[18:24] <autrijus> nice.

[18:24] <geoffb> . . . I, at least, am not yet there, but certainly getting closer

[18:24] <autrijus> I'd be glad to walk you thru fixing your pet bug(s)

[18:25] <geoffb> Once I finish harrorth, I'll rebuild pugs and let you know.  :-)

[18:25] <geoffb> s/and/, retest, and/

[18:26] <autrijus> nice :)

[18:27] <geoffb> ping nothingmuch 

[18:33] <autrijus> hm. Erdős often asks the current collaborator about whom he should visit next.

[18:33] <autrijus> aka linked list traversal

[18:33] <autrijus> across social networks

[18:33] <geoffb> Good idea.

[18:33] <autrijus> indeed

[18:50] <masak> autrijus: I have two pet bugs right now

[18:50] <masak> the first is a junction bug (t/junction/array_deref.t) which prevents me from tidying up examples/games/tic_tac_toe.p6

[18:50] <masak> the second is a constructor initialized member shifting bug (t/pugsbugs/attribute_list.t) that puts wizard.p6 in its infinite loop 

[18:51] <masak> i get motivated by bugs in games

[18:51] <autrijus> that's a wonderful motivation

[18:53] <autrijus> aha. junctive dereferencing.

[18:53] <svnbot6> r5817, fglock++ | * Span.pm with coroutines (lazy iterator) 

[18:53] <svnbot6> r5817, fglock++ |   "say $a while $a = $span.lazy"

[18:53] <szabgab> ?eval 1 / "0"

[18:53] <evalbot6> Inf 

[18:54] <geoffb> ?eval 0 / 0

[18:54] <evalbot6> Error: Illegal division by zero 

[18:54] <geoffb> That should be NaN, shouldn't it?

[18:54] <szabgab> Is this Inf thing a bug ?, (only when "0" string

[18:54] <geoffb> ?eval 1 / 0

[18:54] <evalbot6> Error: Illegal division by zero 

[18:54] <autrijus> I wonder whether it should raise exceptions

[18:54] <szabgab> ?eval 1 / "00"

[18:54] <autrijus> p5 certainly did.

[18:54] <evalbot6> Inf 

[18:54] <geoffb> ?eval 0 / "0"

[18:54] <evalbot6> NaN 

[18:55] <geoffb> Ah

[18:55] <geoffb> My recall is that 1 / 0 in Perl 6 should be Inf, 0 / 0 NaN . . . so as long as the denominator is a string, pugs appears to get it right,

[18:55] <geoffb> But if the denom is an int, as szabgab shows, bug

[18:55] <autrijus> if so, just kill line 69 in Prim/Numeric.hs

[18:56] <autrijus> kill the err case

[18:56] <szabgab> so what is the correct behavior ? the exceptin or the Inf ?

[18:57] <geoffb> Inf / NaN is correct, I believe

[18:57] <autrijus> if so, fix the tests in t/operators/arith.t.

[18:58] <nothingmuch> hola

[18:58] <nothingmuch> autrijus: i have two toys to show off

[18:59] <nothingmuch> one is haskell esque data constructors

[18:59] <autrijus> good. do it quickly because I'm about to doze off

[18:59] <nothingmuch> possibly made possible by a possible hack to enum

[18:59] <nothingmuch> or a user defined enum which will work differently

[18:59] <autrijus> ah. you extended enums into variant types.

[18:59] <szabgab> hi nothingmuch, have not seen you in a while

[18:59] <nothingmuch> not really

[18:59] <nothingmuch> hola szabgab 

[18:59] <nothingmuch> what's cooking?

[19:00] <autrijus> so what's another toy?

[19:00] <nothingmuch> the other toy is a very cute definition of the flip flop operator in perl 6

[19:00] <nothingmuch> well, really a flip flop generatorf

[19:00] <autrijus> right, I read it in the backlog

[19:00] <nothingmuch> as a module

[19:01] <nothingmuch> didn't paste it though

[19:01] <autrijus> cool!

[19:01] <nothingmuch> pastebot thinks I'm a spammer

[19:01] <nothingmuch> and we need 'my enum Classname'

[19:01] <nothingmuch> do we have that?

[19:01] <geoffb> nothingmuch, suggestions for harrorth: 1) for each chapter, include repository rev that matches text -- old chapters don't (of course) match head source code, and the datestamps on the kwid files are mostly bogus (identical); 2) have a kwid that just includes collected links to tutorials, other forth interpeters, and so on; 3) link an x86 asm tutorial (I happened to already know x86 asm, but many readers won't)

[19:01] <autrijus> we have my class, so I don't see why not my enum

[19:01] <nothingmuch> geoffb: regarding revs - I will get to it at the end

[19:02] <nothingmuch> but good point

[19:02] <nothingmuch> you mean other tutorials? they are mostly jotted in the journal

[19:02] <nothingmuch> but i'll make an xref

[19:02] <geoffb> yeah, just thought it would be helpful, not necessary or anything

[19:02] <nothingmuch> good points, i'll try to implement them

[19:02] <nothingmuch> but not enough time right now for much of that

[19:02] <geoffb> nodnod

[19:03] <nothingmuch> whttp://nothingmuch.woobling.org/enum_data_types.txt

[19:03] <nothingmuch> http://nothingmuch.woobling.org/flipflop.txt

[19:04] * nothingmuch will alias 'perl' to 'perl -MFlipFlop' when perl 6 comes out

[19:04] <nothingmuch> and. inclue 'Main::&infix:<..> = FlipFlop::make_me_a_flipflop'

[19:06] <autrijus> but that will share a $state for all the '..' 

[19:06] <autrijus> in the same importer's scope

[19:06] <autrijus> which is wrong

[19:06] <nothingmuch> it's not compatible

[19:06] <nothingmuch> but that's the best I could come up with

[19:07] <autrijus> okay... I think I can't finish reading "Local type inference" and "Colored local type inference" today. pity, because I really need to read them to come up with coherent PIL typechecking :)

[19:07] <autrijus> nothingmuch: you can key states over $?CALLER::POSITION.

[19:07] <nothingmuch> linux confs eep!

[19:07] <autrijus> or even $?CALLER::RETURN_CONTINUATION

[19:07] <nothingmuch> hmm

[19:07] <autrijus> but I need to sleep :)

[19:07] <nothingmuch> i think that's less reusable

[19:07] <autrijus> I very much agree.

[19:07] * autrijus waves... see you tomorrow &

[19:07] <nothingmuch> you can wrap that over the current impl

[19:07] <nothingmuch> but not the opposite

[19:08] <nothingmuch> ciao

[19:16] <nothingmuch> gaal: ping

[19:23] <Steve_p> Shoot!  I missed autrijus :-/

[19:23] <nothingmuch> Steve_p: maybe someone else can help?

[19:24] <Steve_p> No, Alias mentioned that autrijus had some of the biggest "edge case" modules for testing PPI.

[19:25] <Steve_p> I'm testing some modules on ponie, and was just checking to see if he had any thoughts which might be the most mind-bending

[19:29] <nothingmuch> hmm

[19:30] * nothingmuch must say that most of autrijus's code is pretty readable =)

[19:34] <svnbot6> r5818, chromatic++ | Fixed destruction tests now that global destruction works.

[19:34] <svnbot6> r5818, chromatic++ | Bumped up version to 0.2.0 -- ready to use as a backend for other test modules.

[19:45] <geoffb> Steve_p, PAR perhaps?

[19:46] <Steve_p> I was thinking that PAR might be the one...

[19:46] <geoffb> (Haven't looked at the PAR source myself, but it's doing some crazy edge-casey stuff)

[19:47] <geoffb> PPI is allergic to source filters, right?

[19:48] <Steve_p> I think its gotten past the source filter problems, but I'm not sure.  I'll get in touch with Alias to see exactly what modules gave PPI the most fits.

[19:48] <geoffb> Anything by ingy and much of Damian's stuff, I suspect

[19:51] <Steve_p> Yes, Kwiki and Smart::Comments are next on the list

[19:51] <nothingmuch> Smart::Comments--, Devel::FIXME++

[19:52] <nothingmuch> </shameless_plug_and_blasphemy>

[19:52] <geoffb> wheee, more things interesting enough to look at and prevent productivity.

[19:55] * nothingmuch goes to the shower, and then will read about arrows

[19:57] <ingy> :p

[19:58] <nothingmuch> ingy-san

[19:58] <nothingmuch> whither Cryptiki?

[19:58] * ingy sighs

[19:59] * Steve_p watches IO::All explode on ponie :-/

[20:00] <Steve_p> I'll have to check to see if it works on bleadperl

[20:01] * Steve_p wonders how nothingmuch IRC's in the shower

[20:01] <nothingmuch> Steve_p: I lie

[20:01] <Steve_p> heh

[20:01] <nothingmuch> i do it all the time too

[20:02] <nothingmuch> i doubt anyone believes me when I say I leave

[20:02] <nothingmuch> when I start closing windows I usually waste another hour doing garbage collection

[20:05] <geoffb> OK, nothingmuch, I'll give you Devel::FIXME++, but Smart::Comments is (as usual) pretty cool

[20:06] * geoffb has written any number of progress/status modules, but as usual not as visually declarative.

[20:06] <nothingmuch> yeah, i was not really serious.

[20:06] <nothingmuch> i had this dream

[20:06] <geoffb> I knew that :-)

[20:06] <nothingmuch> that I would one day write a proper config file for it

[20:07] <nothingmuch> that my fixme filter would be integrated with my VCS for the file in question

[20:07] <nothingmuch> it would look at time stamps, and write permissions

[20:07] <nothingmuch> the path of the file

[20:07] <nothingmuch> and thus decide whether the fixme is important or not

[20:07] <nothingmuch> i still have to get around to it

[20:08] <geoffb> round tuits: the world's scarcest resource

[20:08] <nothingmuch> yes, they are

[20:08] <nothingmuch> i have one

[20:09] <nothingmuch> i'm saving it for it's sentimental value though

[20:09] <geoffb> heh

[20:09] <nothingmuch> it's a @Larry joke

[20:09] <nothingmuch> they have these round little discs

[20:09] <nothingmuch> which have "TUIT" on one side

[20:09] <nothingmuch> and "Programming Republic of Perl" with the onion logo on the other

[20:09] <geoffb> very cool.

[20:09] <nothingmuch> i'm not sure if you get one when you actually got around to something

[20:09] <nothingmuch> or when you say you will

[20:11] <geoffb> Oh, re: harrorth -- are the basic forth bootstrap words defined by the ANS spec, or otherwise so uniquely defined that they are uncopyrightable?

[20:11] <nothingmuch> no, i'm learning and inventing as I go along

[20:11] <nothingmuch> i found the spec very unreadable

[20:11] <nothingmuch> so I didn't read it

[20:12] <nothingmuch> whenever my forth guru mentions something cool

[20:12] <nothingmuch> like mutual recursion

[20:12] <nothingmuch> or does>

[20:12] <nothingmuch> i make a mental note to learn how it's used

[20:12] <nothingmuch> and then I make a guess at how it's done

[20:12] <nothingmuch> i'm usually right, but not because I rock

[20:12] <nothingmuch> it's just that forth is so simple there is usually just one logical way

[20:13] <geoffb> nodnod

[20:14] <nothingmuch> eep, cat throwing up

[20:14] <geoffb> How *do* you define two words so that they can mutually recurse (instead of the second definition dying from unrec. word?)

[20:14] <geoffb> bleah

[20:14] <geoffb> er, first definition dying, sigh

[20:15] <nothingmuch> variable some_word

[20:15] <nothingmuch> : other word some_word goto ; ( or somesuch)

[20:15] <nothingmuch> basically, apply the BSR opcode to TOS

[20:15] <nothingmuch> then define an anonymous word

[20:16] <nothingmuch> using :noname

[20:16] <nothingmuch> when you are done compiling you have an address on the stack

[20:16] <nothingmuch> (this word may use the word 'other', ofcourse)

[20:16] <nothingmuch> some_word !

[20:16] <nothingmuch> there are also some more clever ways

[20:16] <geoffb> nice . . . .

[20:16] <nothingmuch> and, ofcourse, you could preallocate some area

[20:17] <nothingmuch> and then copy the def of a word from one place in the heap to another

[20:17] <nothingmuch> or be very very wicked and use low level dictionary editing words

[20:17] <nothingmuch> if there are any in your forth

[20:17] <nothingmuch> so that you basically create your own ':'

[20:17] * geoffb is considering for the first time in ages picking up a CS book for a language other than Perl, C, or x86 asm

[20:18] <nothingmuch> e.g. 'new_dict_entry foo 100 allot'

[20:18] <geoffb> nodnod

[20:18] <nothingmuch> : other ... foo ... ;

[20:18] <nothingmuch> variable here_backup

[20:18] <nothingmuch> here here_backup !

[20:18] <nothingmuch> here_variable (presumably the pointer to the next free entry in the heap)

[20:18] <nothingmuch> err, i mean

[20:19] <nothingmuch> address_of_body_of_word foo here_variable !

[20:19] <nothingmuch> state on

[20:19] <nothingmuch> ... compile as you would after ':'

[20:19] <nothingmuch> and then after ';' do 'here_backup @ here_variable !'

[20:19] <nothingmuch> read p5orth source code

[20:19] <geoffb> nodnod

[20:19] <nothingmuch> it's a bit yucky

[20:20] <geoffb> link?

[20:20] <nothingmuch> because i usually wrote it while sleeping

[20:20] <nothingmuch> harrorth repo under misc

[20:20] <gaal> nothingmuch: phantom pong

[20:20] <geoffb> k

[20:20] <nothingmuch> gaal: szabgab wants you at August Penguin

[20:20] <nothingmuch> or rather, both of us

[20:20] <nothingmuch> pretend I was spoofing his mac address when I pinged you

[20:20] <nothingmuch> geoffb: therein lie: a forth prelude

[20:21] <nothingmuch> including the words ':' and ';', and the words to support these

[20:21] <nothingmuch> some primitives written in perl 5

[20:21] <nothingmuch> some words that are primitives but shouldn't be, written in perl 5, that I want to port to forth

[20:21] <gaal> don't think i can make it. going on vacation soon and am very much tied up at $work till then

[20:21] <nothingmuch> gaal: it's a thursday evening

[20:21] <svnbot6> r5819, szabgab++ |  r4302@gabor:  gabor | 2005-07-26 23:15:23 +0300

[20:21] <svnbot6> r5819, szabgab++ |  * examples/cookbook/01strings/01-00introduction.expected

[20:21] <svnbot6> r5819, szabgab++ |  * examples/cookbook/test.pl

[20:21] <svnbot6> r5819, szabgab++ |    Add set of expected results to the first subchapter of the cookbook

[20:21] <svnbot6> r5819, szabgab++ |    and the script that will compare the original results with the current once

[20:21] <nothingmuch> e.g., ~ 17:00, at the bofs

[20:22] <szabgab> nm: actually it is all they long

[20:22] <nothingmuch> szabgab: svk push --verbatim

[20:22] <szabgab> not just evening

[20:22] <nothingmuch> szabgab, gaal: at 17:30 the bofs are supposed to start

[20:22] <nothingmuch> that's what I meant

[20:22] <szabgab> ok, next time...

[20:23] <szabgab> no, that time is incorrect

[20:23] <szabgab> the whole thing will end by 17:30

[20:23] <nothingmuch> oh, "in parallel"

[20:23] <nothingmuch> so this is instead of the trivia stuff?

[20:24] <szabgab> yes, I asked for two slots and waiting for the final approval and that it will appear on the site before I can announce

[20:24] <nothingmuch> ah

[20:24] <szabgab> yeah that is one of the slots I asked and the rsync is the other slot

[20:24] <nothingmuch> talk slots for BOFs?

[20:24] <nothingmuch> eep

[20:24] <szabgab> parallel ;-(

[20:25] <nothingmuch> yeah, that's what I meant

[20:25] <nothingmuch> it's still aweful

[20:25] <szabgab> that's how they are doing it. I don't get it but that's their "conference'

[20:25] <gaal> nm: how well do mac apps do ms word docs with hebrew? for a non-technical user?

[20:25] <nothingmuch> gaal: NeoOfficeJ is a native compilation of OpenOffice.org for OSX

[20:25] <nothingmuch> it does very well

[20:26] <nothingmuch> my time sheets are filled in excel worksheets

[20:26] <nothingmuch> all our design docs are MS word

[20:26] <gaal> is it less slow than oo on windows?

[20:26] <nothingmuch> the order form I use to get my daily fix of veggies is msword too

[20:26] <gaal> because that's slow on fast machines :(

[20:26] <nothingmuch> it's pretty sulggy

[20:26] <nothingmuch> to load

[20:26] <nothingmuch> but using it wsas OK

[20:26] <nothingmuch> i don't edit anything big though

[20:26] <nothingmuch> i just open and scroll

[20:27] <nothingmuch> .me

[20:27] <nothingmuch> geoffb: i learned a bit about the IA64 platform today

[20:27] <nothingmuch> very pretty

[20:27] <nothingmuch> if you share my mindset, which I think you do, you should appreciate it

[20:28] * gaal sleeps &

[20:28] <geoffb> Intel's VLIW beastie?

[20:28] <nothingmuch> geoffb: yep

[20:28] <geoffb> Yeah, some cool stuff there.

[20:28] <nothingmuch> well, i really meant that VLIW is cool

[20:28] <nothingmuch> i just couldn't remember the correct acronym  on the fly

[20:28] <geoffb> :-)

[20:28] <nothingmuch> it should be very very very fun to compile forth to VLIW platforms

[20:29] <nothingmuch> also, do you know of my evil plans for optimizing forth?

[20:29] <geoffb> .oO( Hmmm, predicated IF ELSE THEN . . . )

[20:29] <geoffb> No, do tell

[20:33] <Aankhen``> G'night.

[20:48] <svnbot6> r5820, szabgab++ | * examples/cookbook/01strings/

[20:48] <svnbot6> r5820, szabgab++ |   More expected versions of the cookbook files

[20:48] <svnbot6> r5821, fglock++ | * added "lazy()" iterator to Set::Infinite

[20:49] *** justatheory is now known as asshole

[20:49] *** asshole is now known as justatheory

[21:07] <nothingmuch> szabgab++ # test for cookbook is a very good idea

[21:36] <svnbot6> r5822, fglock++ | * Set::Infinite - added mutators, and a bugfix

[22:25] *** sili is now known as php-sucks

[22:28] <geoffb> Yayyyy . . . finally caught up with harrorth.

[22:28] <geoffb> nothingmuch++ # Much fun, harrorth is.  Enjoy it, I do.

[22:29] *** php-sucks is now known as sili

[22:30] <geoffb> : pimp_harrorth you harrorth love if nothingmuch dup @ 1+ ! then ;

[22:32] <wolverian> I should learn lojban.

[22:33] <geoffb> ditto.  I've even got an open tab for it in FF, but I also have several dozen other open tabs.  Sigh.

[22:34] <geoffb> & # mmmm, life . . . .

[22:39] *** sili is now known as aeos-tches-cathl

[22:39] *** aeos-tches-cathl is now known as cathlikboys

