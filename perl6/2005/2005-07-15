[00:00] <chromatic> PUSHMARK

[00:00] * chromatic wishes for reliable and complete global destruction.

[00:01] <chromatic> PUTBACK

[00:01] <clkao> no!

[00:01] <clkao> no perlguts here pllease

[00:01] <Odin-LAP> chromatic: The U.S. or Russia should be able to give you one...

[00:01] <chromatic> How else should I put something on Autrijus' stack?

[00:01] * Odin-LAP wonders how powerful an explosion it would take to destabilise the orbit...

[00:02] <clkao> svk push 

[00:02] <chromatic> According to Futurama, the output from every robot in the world in the year 3002.

[00:02] <chromatic> Svk knows a bit about p5guts too.

[00:02] <clkao> no that's svn::core. svk is pure perl

[00:04] <chromatic> Synecdoche.

[00:16] <nothingmuch> good night gay camels

[00:17] <mugwump> :D

[00:17] <nothingmuch> (to disambiguate: http://lambda.org/)

[00:18] <obra>   :)

[00:18] <nothingmuch> http://lambda.org/Flag-Rainbow_banner_1.gif

[00:18] <nothingmuch> mply, the Greek letter "L" stands for "liberation." 

[00:18] <nothingmuch> check

[00:18] <nothingmuch> s/^/Si/

[00:19] <nothingmuch> The Greek Spartans believed that the lambda represented unity.  - unity of haskell and perl - check

[00:19] <nothingmuch> \The Romans took it as meaning "the light of knowledge shining into the darkness of ignorance." 

[00:19] <nothingmuch> wow, that's good stuff

[00:19] <nothingmuch> haskell makes me feel that way

[00:19] <nothingmuch> check

[00:19] <nothingmuch> (i'm going through http://lambda.org/symbols.htm, btw)

[00:20] <nothingmuch> The charged energy of the gay movement. This stems from the lambda's use in chemistry and physics to denote energy in equations. 

[00:20] <nothingmuch> well, s/gay/pugs/; check

[00:20] <nothingmuch> The synergy which results when gays and lesbians work together towards a common goal (a gestalt theory which also stems from the physics-energy theory) .. s/gays,lesbians/perl people, haskell people/; check

[00:21] * mugwump is reminded at this point of the "Never be rude to an Arab" skit

[00:21] <nothingmuch> okay, i'll stop now, because these are getting long

[00:22] <nothingmuch> interesting... http://lambda.org/Gensymb-Mbi_Fbi.gif

[01:01] *** mja is now known as mja_

[01:29] <svnbot6> r5610, putter++ | Refactoring of perl5/PIL-Run/crude_repl.  Pulled out PIL::ReadToStr1, and PIL::Run::{MainX,EvalX}.

[01:30] <autrijus> greetings.

[01:32] * autrijus looks at even more in-method for/given threads on p6l.

[01:32] <autrijus> we will be for/given. ;)

[01:33] <mugwump> morning autrijus, back to regular time I see

[01:37] <mugwump> hi stevan

[01:38] * mugwump realises he is probably talking to an auto-reconnect

[01:50] <putter> cheerio.

[01:51] <mugwump> you just arrive and are already saying goodbye?

[01:54] <putter> just arrive. ;)

[01:54] <svnbot6> r5611, putter++ | p5 runtime now uses placeholder objects PIL::Run::Type::{Object,Str,Rat,Int}.

[01:54] <svnbot6> r5612, putter++ | ... and here are PIL::Run::Type::{Object,Str,Rat,Int}.

[02:14] <putter> Oooo, here is an idea.  (Thinking about some of the questions earlier in the day.)  People who ask questions, have to add them to a QuestionsAsked list, perhaps on the wiki.  Answers can be cut and pasted there.  That way we accumulate answered questions.

[02:14] <QtPlatypus> putter: Great idea.

[02:19] <QtPlatypus> Going with the current religious theam we should call it a Catechism (An elementry book containing a summary, in the form of questions and answers)

[02:24] <putter> :)

[02:25] <autrijus> note that all pugs apocryphons are declared to be in catechism format  :)

[02:25] <autrijus> catechism++

[02:26] * autrijus syncs up and reads putter's work

[02:27] <autrijus> euro oscon schedule up... I now understand why none of perl6 talks made it

[02:28] <autrijus> and why all my tutorials are downcasted into sessions

[02:28] <obra> oh?

[02:29] <autrijus> because there's only 8 tutorials that suggests a strong lab-like format

[02:29] <obra> ah. 

[02:29] <autrijus> and the talks are 100% biased toward practical utility 

[02:29] <autrijus> which is actually a good thing

[02:30] <obra> They probably need to be to make the conference seem reasonable for attendees

[02:30] <autrijus> right

[02:30] <autrijus> at least my whimsical, why-the-lucky-stiff-influenced "Learning Haskell" talk made it.

[02:30] <autrijus> # http://conferences.oreillynet.com/cs/eurooscon/view/e_sess/7231

[02:35] <obra> Nice

[02:35] <obra> Sad I won't get to see it

[02:35] <autrijus> *nod*

[02:37] <putter> autrijus: now r5613.

[02:37] <autrijus> roger.

[02:42] <svnbot6> r5613, putter++ | Added PIL/Run/Type/Sub.pm, and changed name mangling.

[02:44] <autrijus> putter: color me impressed :)

[02:44] * autrijus lunch... will read up some more &

[02:45] <putter> thanks. :)

[03:43] <wolverian> is there a syntax to check the parameter of a role at runtime? that is, role Foo[$bar] { } class Baz does Foo[Quux] { } my $o = Baz.new; # how to check what $bar is?

[03:43] <svnbot6> r5614, putter++ | Added perl5/PIL-Run/TODO, which suggests ways you can help develop the p5 runtime.

[03:45] <putter> ?

[03:45] <wolverian> is that directed at me?

[03:45] <wolverian> :)

[03:46] <putter> Yes.  I don't recall one from the docs.  But it may have been mentioned at the hackathon.  Don't know.

[03:46] <wolverian> okay, thanks.

[03:46] <wolverian> just wondering, it's not critical. I can always handwave for the time being :)

[03:47] <wolverian> (just that the functionality itself is important. the syntax isn't as much.)

[03:47] <putter> :)  true.

[03:49] <putter> ok, end of day for me.  I likely won't be around tomorrow(US).

[03:50] <wolverian> bye!

[03:51] <putter> perl5/PIL-Run/TODO has several suggestions of things people could do to help with the p5 runtime.  Several require only basic perl5 skill.  Help! :)  Thank you. :)

[03:52] <stevan> putter++ # braving the p5 runtime :)

[03:52] <putter> wolverian: bye.  I think is going to be one of those stop for a snack and wander around, slow exits...

[03:53] <putter> :)

[03:53] <wolverian> putter, okay. :) have fun.

[03:55] <putter> stevan: I looked at (some of?) the SELF stuff.  neat!  I'm afraid I still dont have enough of a clue about the mm to say anything useful.  sorry.  rsn I hope...

[03:55] <stevan> putter: the SELF stuff is actually in flux now

[03:55] <stevan> I am trying to fix the submethod handling

[03:56] <stevan> which means I need to implement "next METHOD"

[03:56] <stevan> which is not that easy given the way the dispatcher currently is structured

[03:56] <putter> ah.

[03:57] <stevan> putter: mm stuff is not as hard as it looks :)

[03:57] <stevan> the files are just getting a little cluttered

[03:57] <stevan> time for a refactoring :)

[03:58] <stevan> basically what I am saying, dont mistake my messiness for complexity :)

[03:58] <putter> The runtime is currently using strawman PIL/Run/Type/Mumble.pm classes.  Object,Sub,Str,Int,Rat.  They could be the start of connecting the runtime stuff to the mm?

[03:59] <putter> ok. :)  wont.  there is always Fiter::Simple. :)

[04:00] * putter is a great believer in declaritive programming using runtime code generation.

[04:00] <svnbot6> r5615, mugwump++ | Add basic prompting via Scriptalicious ;)

[04:00] <mugwump> s/prompting/readline prompting/

[04:01] <mugwump> bah, there are debug output messages in the release scriptalicious.  doh!

[04:02] <putter> I just had to google that.  "Scriptalicious".  Interesting module...

[04:04] <putter> Who knows, maybe p6 will put an end to the so long search for good command line argument handling.

[04:04] <putter> Yeah, right.  And create world peace too. ;)

[04:04] <mugwump> Well, Scriptalicious doesn't do much beyond Getopt::Long

[04:04] <mugwump> all it does is add -h, -v, etc standard options

[04:04] <mugwump> (and make them work ;))

[04:04] <putter> :)

[04:05] <stevan> putter: what time zone are you in?

[04:05] <svnbot6> r5616, mugwump++ | Add version requirement for Scriptalicious, un-TODO

[04:05] <stevan> you always seem to be up around now

[04:05] <putter> EST  (EDT?)

[04:05] <putter> EDT

[04:05] <stevan> ah

[04:05] <stevan> me too

[04:05] <stevan> you are up late :)

[04:06] <putter> yeah.  good reminder.  long day tomorrow.

[04:06] <putter> goodnight all :) &

[04:31] <wolverian> hey, is there a difference between 'role Foo does Bar does Baz;' and 'subtype Foo of Bar where { .does(Baz) }'?

[04:32] <mugwump> sure.  the latter won't be directly instantiable, I think

[04:33] <mugwump> You'd need to have another class that .does(Bar) and .does(Baz) for it to match .does(Foo)

[04:33] <wolverian> er, are roles instantiable?

[04:34] <wolverian> oh, you mean a class can't then 'does Foo', in the latter case?

[04:34] <mugwump> well, they create an anonymous class.  What I mean by that statement is that there's nothing to tell the interpreter how to correctly Foo.new

[04:34] <wolverian> hrm. right. so they can't be composed, only used in type checking?

[04:35] <mugwump> You can't invert the where clause into a constructor

[04:35] <mugwump> it might be arbitrarily complex

[04:35] <wolverian> hmm, S12 says you can declare with subtypes

[04:36] <wolverian> so maybe I'm just confused about what you're trying to say

[04:37] <mugwump> well, how do you go from 'where { .does(Baz) }' to 'Foo does Baz' ?

[04:38] <wolverian> they're both constraints on what can be contained in the container, right?

[04:38] <mugwump> no, the where { } is a constraint, the does { } imports the role

[04:39] <wolverian> hmm, right

[04:39] <mugwump> er, s/does { }/does/ :)

[04:40] <wolverian> if you want to see the actual example

[04:40] <wolverian> I'm trying to decide between

[04:40] <wolverian> role Slave does Belong is Species { } and subtype Slave of Species where { .does(Belong) }

[04:41] <wolverian> (where the role Belong implements an interface for things that have an owner)

[04:42] <wolverian> does that make any sense to you at all? :)

[04:42] <wolverian> (and yes, this is a game.)

[04:43] <mugwump> I think the latter would make .does(Slave) work on Species objects if they .does(Belong)

[04:43] <svnbot6> r5617, masak++ | Fixed quotes in t/statements/given.t, marked as TODO.

[04:44] <mugwump> Roles can't "is", either

[04:44] <mugwump> perhaps "Roles aren't, they do"

[04:44] <wolverian> oh. hmm. well, that's a kind of a kludge because 'does Species' doesn't work from an English perspective

[04:44] <wolverian> so I used a class instead. which is just a desire for it to be linguistically clean, I guess

[04:44] <wolverian> I should think about semantics more :)

[04:45] <wolverian> s,think,worry,

[04:45] <stevan> Roles can "is" IIRC

[04:45] <mugwump> oh, actually I tell a lie - roles can "is", but it ends up flattening into the class they are included

[04:45] <stevan> yup

[04:46] <stevan> it is in A12 somewhere

[04:46] <mugwump> being "flattened" into a superclass in this case

[04:46] <wolverian> just like when they 'does' another role?

[04:46] <stevan> to be honest, I think that is just down right silly

[04:46] <wolverian> oh, the superclass gets the role?

[04:46] <wolverian> that's weird.

[04:46] <mugwump> no, it gets added into the class' superclasses as if IT did the "is Whatever"

[04:47] <wolverian> can you show a short code example? 

[04:47] <wolverian> I'm being dense. haven't slept all night. :)

[04:47] <wolverian> (looking in A12)

[04:48] <mugwump> see S12/A role is allowed to declare an additional inheritance

[04:49] <wolverian> you mean Encapsulated inheritance?

[04:49] <wolverian> oh, sorry, I'm in A12

[04:50] <wolverian> hmm. role Foo is Bar { } class Baz does Foo { } Baz.isa(Bar); Foo.isa(Bar); Bar.isa(Foo); # true, false, false?

[04:51] <wolverian> er, s,isa,does,

[04:53] <wolverian> that's how I read it, anyway, and it makes sense to me.

[05:22] <mugwump> Foo.isa(Bar) would probably be an error imho, Foo is a Role not a class

[05:23] * mugwump weekends &

[05:24] <wolverian> mugwump, I meant Foo.does(Bar). is that an error as well?

[05:24] <wolverian> oh, you went. thanks for the help. :)

[06:28] <gaal> good morning.

[06:29] <wolverian> morning.

[06:31] <gaal> nothingmuch: you pang?

[06:39] <gaal> autrijus, there?

[06:41] <gaal> i want to chat a little about eval.p6: you mentioned debugger hooks in your journal, i want to see how to arrange for that kind of thing.

[07:24] *** castaway_ is now known as castaway

[08:58] *** osfameron_ is now known as osfameron

[09:24] <masak> ?eval "you alive, evalbot?"

[09:24] <masak> guess not

[12:47] * QtPlatypus wonders how one would test for lazyness?

[12:48] <Limbic_Region> QtPlatypus - perhaps through a tied implementation

[12:48] <Limbic_Region> one that would allow for introspection without motivating 

[12:49] * QtPlatypus was thinking about something simple like having a side effect in the generator.

[12:49] <QtPlatypus> test as in "Check that lazyness is working"

[12:50] <Limbic_Region> that might work too

[12:50] <Limbic_Region> heizenburg's principle is hard to get around though

[12:51] <QtPlatypus> The whole "Obsever causes the situation to change" thing?

[12:52] <Limbic_Region> well - that's the simplified version 

[12:52] <Limbic_Region> but yeah

[12:52] <Odin-> Heisenberg's uncertainty principle?

[12:53] <Odin-> It's impossible to know (precisely) both the position and velocity of any particular particle at the same time... :p

[12:54] <Limbic_Region> actually - that's only one interpretation

[12:54] <Limbic_Region> the more you know about one is proportional to the less you know about the other

[12:55] <QtPlatypus> I thinnk its both the position and the momentum of any perticular particle.

[12:56] <Odin-> QtPlatypus: The momentum is dependent upon mass and velocity; you *can* know the rest mass...

[12:56] * QtPlatypus nods to Odin- 

[12:57] <Limbic_Region> except for those pesky particles that only seem to have mass when they are moving ;-)

[12:58] <Odin-> Limbic_Region: Well, their rest mass is 'zero', then, isn't it? ;p

[12:58] <Limbic_Region> oh, has anyone seen nothingmuch?

[12:59] <Limbic_Region> seen nothingmuch

[12:59] <jabbot> Limbic_Region: nothingmuch was seen 12 hours 36 minutes 30 seconds ago

[13:15] <svnbot6> r5618, iblech++ | svnbot.p6 -- Made it possible to display branch information (i.e. leo-ctx5) and

[13:15] <svnbot6> r5618, iblech++ | misc. minor fixes.

[13:57] *** joepurl_ is now known as joepurl

[14:22] <masak> QtPlatypus: Limbic_Region is right, the general version of the Uncertainty Principle is about limitation of accuracy of simultaneous measurement of observables in general

[14:22] <masak> http://en.wikipedia.org/wiki/Uncertainty_principle

[14:23] <QtPlatypus> masak: Thanks

[14:26] <dudley> Is kwid the standard format for pugs documentation?

[14:27] <integral> since pod and kwid are theoretically interchangeable, does there need to be one?

[14:27] <dudley> I guess that's what I was asking

[14:41] <svnbot6> r5619, iblech++ | svnbot.p6 -- Option to output a separate header line for each commit, idea from coke++.

[14:57] <svnbot6> r5620, iblech++ | * examples/network/svnbot.p6 -- Updated svnbot's usage info.

[14:57] <svnbot6> r5620, iblech++ | * examples/network/README    -- Noted the channels svnbot is used in.

[14:57] <svnbot6> r5621, fglock++ | finished Span::Code.intersection() method

[14:58] <Limbic_Region> fglock - did you ever get your lazy infinite list answer?

[16:11] <eric256> anyone know the pugs way of setting the char used when stringifying lists?

[16:14] <eric256> i can't even seem to find the right document

[16:15] <PerlJam> eric256: use join

[16:16] <eric256> i would. but i'm using the flattening properties...unless i can flatten into a list and join that....like ([1..5],[1,2,3,[a,b,c]]) = (1..5,1,2,3,a,b,c)

[16:17] <f0rth>  http://www.wretch.cc/album/chining

[16:17] <f0rth> oops.....sorry

[16:18] <eric256> thanks PerlJam, that got me going in the right directions

[16:29] <eric256> hmmm.  my $test = {1 => 2}; $test.perl.say; produces {('1' => 2)} .... and if you do say ref($test) you get Array

[16:30] <eric256> hmmm or not... nm..something else is confusing it i guess.

[16:30] <stevan> Limbic_Region: ping

[16:32] <eric256> pugs> my $test = {1 => {'2' => 3, '4' => 5}}; $test.perl.say; $test<1>.ref.say;

[16:32] <eric256> {('1' => ('2' => 3)), ('4 5' => undef)}

[16:32] <eric256> Pair

[16:32] <eric256> bool::true

[16:32] <pasteling> "stevan" at 67.186.136.119 pasted "iterator for the MetaModel dispatcher (sanity test please)" (70 lines, 1.8K) at http://sial.org/pbot/11777

[16:32] <eric256> am i being dumb somewhere i there? i expect $test<1>.ref to be Hash

[16:32] <stevan> if I could get a sanity test on the metamodel dispatcher iterator thing above

[16:32] <fglock> ping Limbic_Region

[16:33] <stevan> it would be much appreaciated

[16:33] <stevan> it is a depth first iterator basically

[16:34] <stevan> oh, crap I see a problem already, but it is more with my example and less with the code

[16:36] <pasteling> "stevan" at 67.186.136.119 pasted "fixed iterator" (72 lines, 1.9K) at http://sial.org/pbot/11778

[16:36] <stevan> ok, look at that one instead please

[16:38] <eric256> stevan - it runs and passes the tests here. not sure how much help that is for you ;)

[16:40] <stevan> eric256: thanks, I am looking for a sanity check on the code

[16:40] <stevan> basically it felt like it was going to be more complex

[16:40] <stevan> then I wrote it

[16:40] <stevan> and I was done before I knew it

[16:41] <stevan> this will eventually replace the current dispatch mechanism in the metamodel

[16:41] <stevan> making it into an iterator makes it resumeable

[16:41] <eric256> lol. yea. isn't depth first suppose to be easy like that?

[16:41] <stevan> so things like "next METHOD" can work

[16:41] <eric256> cool

[16:41] <stevan> eric256: yeah I guess it is :)

[16:41] <eric256> any ideas on my hash miss parse...well i think it is a miss parse..

[16:42] <stevan> looking now

[16:42] <stevan> weird

[16:43] <stevan> well $test<1>.ref makes sense to be a pair

[16:43] <stevan> what does $test<1><2>.ref say?

[16:43] * stevan does not have a copy of pugs handy

[16:43] <eric256> yea but look at the second run...where it lumps '4 5' as a pair with udnef

[16:44] <stevan> yes, that part looks like a mis-parse for sure

[16:44] <stevan> I am just wondering what it thinks the $test<1> pair is

[16:44] <stevan> doe it think it is { 2 => 3}

[16:45] <stevan> or something else

[16:45] <eric256> it thinks its ('2' => 3) if i print it useing .perl

[16:45] <stevan> what about $test.ref?

[16:46] <eric256> Hash

[16:46] <stevan> $test<1><4>.ref?

[16:46] <stevan> we need evalbot back :)

[16:47] <eric256> Scalar for ref....\undef for .perl

[16:47] <stevan> ok

[16:47] <eric256> did eval bot die? or is it just not running right now?

[16:47] <stevan> yeah I think it is a misparse

[16:48] <stevan> I have no idea

[17:11] <Aankhen``> Juerd++ # typing tutor

[17:21] <stevan> I have no idea

[17:25] <eric256> still ;)

[17:46] * ToniEisner is away: Away at the moment

[17:47] *** ToniEisner is now known as ToniEisnerIsAway

[17:49] <stevan> wow it is quiet in here today

[17:51] <kolibrie> everyone got burned out after all the discussion yesterday

[17:51] * eric256 is sad

[17:52] <stevan> kolibrie: which one? not the ./ one?

[17:52] <svnbot6> r5622, Stevan++ | Perl6::MetaModel -

[17:52] <svnbot6> r5622, Stevan++ |    * fixed SELF to handle nested calls of different invocants

[17:52] <svnbot6> r5622, Stevan++ |         - added more tests for this

[17:52] <svnbot6> r5622, Stevan++ |    * removed the Submethods monomophic assertions

[17:52] <svnbot6> r5622, Stevan++ |    * added Submethod tests based on discussion with $Larry

[17:52] <svnbot6> r5622, Stevan++ |         - these tests current fail until we add CLASS and next_METHOD

[17:52] <svnbot6> r5622, Stevan++ |    * added ->dispatcher method to MetaClass

[17:52] <svnbot6> r5622, Stevan++ |         - added a basic test for this

[17:52] <svnbot6> r5622, Stevan++ |         - NOTE: it is not used by anything yet, that is 

[17:52] <svnbot6> r5622, Stevan++ |           my next step :)

[17:52] <svnbot6> r5623, Stevan++ | removed notes to self in TODO :)

[17:52] <stevan> eric256: cheer up, hashes are not that important :)

[17:53] <kolibrie> stevan: that was pretty big, but the channel was just busy all day

[17:53] <stevan> dammit, the day I decide to do $work is the good day

[17:54] <kolibrie> so, anyone have any experience with Parse::RecDescent, and want to help me begin?

[17:57] <kolibrie> my problem is that I only care about the middle of my document, and can't figure out how to skip the first chunk of garbage

[17:57] <eric256> just remove it with a regex. ;)

[17:58] <kolibrie> so just do that first, before starting the parse?

[17:58] <eric256> that would be my guess yes..

[17:58] <kolibrie> I wanted my grammar to be able to say, skip up to this starting point

[17:58] <eric256> never touche Parse::* anything, but i would say the easiest solution is best

[17:59] * ToniEisnerIsAway is back.

[17:59] *** ToniEisnerIsAway is now known as ToniEisner

[17:59] <kolibrie> the easiest was to write my own parser, but it is starting to stretch itself too far

[17:59] <kolibrie> so now I have to learn "the real thing"

[18:00] <eric256> right but. if you just want to skip junk, then skip it the easiest way you know,

[18:00] <stevan> kolibrie: I never used P::RD myself, but I would assume that your "start" token would be the place to start parsing

[18:00] <stevan> that is if P::RD has a notion of a "start" token

[18:00] <PerlJam> it does

[18:01] * stevan only does simple event based (XML::SAX) parsing

[18:01] <kolibrie> so, PerlJam, do you have a hint for me?

[18:02] <integral> rule names map to method names on the parser object, so if your start rule is "start" you call the "start" method :-)

[18:02] <kolibrie> I get that

[18:02] <kolibrie> here's my simple example:

[18:02] <PerlJam> kolibrie: no, basically you do as others have said (it's just the mechanism you use that changes)

[18:03] <kolibrie> I want to match the string 'hello world'

[18:03] <kolibrie> but the string I actually have is 'my hello world'

[18:03] <integral> rule1: 'hello world'

[18:03] <kolibrie> when I say $parser->rule1($string)

[18:03] <kolibrie> I get no match

[18:03] <integral> ah, rules are anchored

[18:04] <PerlJam> kolibrie: because you need to have the "rule" that skips the stuff you don't want

[18:04] <kolibrie> so I added a garbage: /.*/

[18:04] <PerlJam> you realize that * is very greedy?

[18:04] <integral> but that then eats the whole string,   since no backtracking into regexps occurs

[18:04] <integral> maybe /\S+/ to eat one word would be appropiate?

[18:05] <kolibrie> maybe

[18:07] <kolibrie> ok, so that worked for 'my hello world'

[18:07] <kolibrie> but not for 'my very special hello world'

[18:07] <integral> myrule1: (/\S+/)* 'hello' 'world'

[18:10] <kolibrie> Untranslatable item encountered: "*"

[18:10] <integral> ugh,  and I'm not sure that would work anyway because I can't remember P::RD's backtracking behaviour

[18:10] <PerlJam> I'd probably make a rule just for the garbage words but that's just me

[18:11] <kolibrie> I'm trying

[18:11] * integral thinks a single regexp with full backtracking would work better

[18:11] <PerlJam> well it'll work *faster* and if that's what you mean by "better" then sure.

[18:11] <integral> well it'd "work" too...

[18:12] <kolibrie> I'm just trying to get it to work at all:

[18:12] <kolibrie> page: garbage(s?) greeting world

[18:13] <kolibrie>  greeting: ('hello' | 'greetings')

[18:13] <kolibrie>  world:   /\w+/

[18:13] <kolibrie>  garbage: /\S*/

[18:13] <kolibrie> no match on 'my very special hello world'

[18:13] <PerlJam> kolibrie: er ... why are you messing with P::RD again?  I'm not even working the problem even and I already want to use p6 notation

[18:14] <kolibrie> well, I'd rather use that, but couldn't get that to work either

[18:15] <kolibrie> PGE was dying on unknown characters, I think

[18:15] <kolibrie> it was giving all kinds of weird errors

[18:15] <PerlJam> then ping pmichaud hard so that he can fix it.

[18:16] <kolibrie> I suppose so

[18:16] <kolibrie> but still, now I'm on a mission to get this to work

[18:16] <Alias_> seen iblechbot

[18:16] <jabbot> Alias_: I havn't seen iblechbot, Alias_

[18:16] <Alias_> eep

[18:18] <Limbic_Region> why eep

[18:19] <Limbic_Region> I think jabbot only pays attention if the person says something

[18:19] <Limbic_Region> iblechbot is a logger not a talker

[18:19] <Limbic_Region> ;-)

[18:19] <Limbic_Region> seen iblech

[18:19] <jabbot> Limbic_Region: iblech was seen 7 days 23 hours 49 minutes 58 seconds ago

[18:20] <Limbic_Region> seen nothingmuch

[18:20] <jabbot> Limbic_Region: nothingmuch was seen 17 hours 58 minutes 9 seconds ago

[18:21] <PerlJam> kolibrie: well, turn on tracing and see if that helps  (Search for RD_TRACE in the docs)

[18:22] <kolibrie> PerlJam: ah, yes, that might help

[18:23] <Alias_> ohh...

[18:24] <Alias_> How does one get a commit bot set up 

[18:24] * Alias_ wants one for #jsan

[18:25] <kolibrie> the examples/svnbot.p6 works, I think

[18:26] <Alias_> ok

[18:26] <kolibrie> examples/network/svnbot.p6

[18:48] <kolibrie> so, using my 'my hello world' parsing example, I've gotten pugs to match using this grammar:

[18:48] <kolibrie> rule page { <garbage>+ \s <greeting> \s <world> };

[18:48] <kolibrie> rule greeting { hello | greetings }

[18:48] <kolibrie> rule world { nathan }

[18:48] <kolibrie> rule garbage { \S+\s? }

[18:49] <kolibrie> however, as soon as I change the string to 'my very special hello world'

[18:49] <kolibrie> I get a segmentation fault

[18:49] <kolibrie> that goes to patrick, I guess?

[18:50] <kolibrie> s/nathan/\w+/

[19:08] <svnbot6> r5624, Stevan++ | Perl6::MetaModel - 

[19:08] <svnbot6> r5624, Stevan++ |     * added CLASS (aka $?CLASS) 

[19:08] <svnbot6> r5624, Stevan++ | 	- added tests for this

[19:08] <svnbot6> r5624, Stevan++ | 	- sprinkled usage of this in other tests too

[19:08] <svnbot6> r5624, Stevan++ |     * disabled Submethod failures for now, they are still

[19:08] <svnbot6> r5624, Stevan++ |       broken though

[19:30] <pasteling> "Aankhen``" at 203.101.6.32 pasted "Pugsbug?" (8 lines, 382B) at http://sial.org/pbot/11780

[19:30] <svnbot6> r5625, Stevan++ | Perl6::MetaModel - 

[19:30] <svnbot6> r5625, Stevan++ |     * stubbed $?ROLE test

[19:30] <svnbot6> r5625, Stevan++ |     * We are not using the Perl6::MetaClass::Dispatcher to handle

[19:30] <svnbot6> r5625, Stevan++ |       all the method dispatching :)

[19:30] <stevan> whoops :)

[19:30] <stevan> s/not using/now using/

[19:30] <Aankhen``> LMAO.

[19:31] <stevan> its friday after all :)

[19:31] <Aankhen``> Excuses, excuses. :-P

[19:31] <Aankhen``> Could you take a look at the paste and confirm?

[19:31] <stevan> Aankhen``: sure one sec

[19:33] <stevan> Aankhen``: I have no idea what it is thinking there

[19:33] <stevan> did you try this in non-interactive mode?

[19:33] <stevan> oh wait

[19:33] <stevan> line 3, it is missing the comma

[19:33] <Aankhen``> Indeed.

[19:33] <stevan> pugs> sub foo ($bar, $baz) { ($bar, $baz) }; foo(:bar<quux> :baz<boo>)

[19:34] <stevan> no comma before :baz

[19:34] <Aankhen``> Yes.

[19:34] <stevan> is that intentional?

[19:34] <Aankhen``> Indeed.

[19:34] <stevan> ok

[19:34] <stevan> hmm

[19:34] <stevan> what is it supposed to do then?

[19:34] <Aankhen``> Treat it as if there was a comma there...

[19:35] <stevan> Aankhen``: why?

[19:36] <Aankhen``> One sec, I'm looking for the AES I read it in.

[19:36] <stevan> (drunken admins)++

[19:36] <Aankhen``> Someone take that function away from them. -_-

[19:36] <Aankhen``> Pitch Black is a depressing movie.

[19:36] <Aankhen``> I liked Chronicles of Riddick much better.

[19:38] <Aankhen``> Argh... which AES was it???

[19:44] <cwest> I need your bot. :-)

[19:44] <cwest> Who owns svnbot6?

[19:45] <Aankhen``> Right, I can't find it.  Put simply, it said the new pair notation would be useful when passing a bunch of boolean options together, e.g. open($file, :lock :read :somethingelse);

[19:49] <dudley> cwest: it's iblech's baby, I think

[19:51] <stevan> cwest: I will sell it to you for $1 million

[19:51] <stevan> or best offer :)

[19:51] <Khisanth> 2 rupees!

[19:52] <stevan> damn! undercut again,.. that it, I am moving to Bangalore :)

[19:53] <cwest> Do you /really/ want my best offer? ;-)

[19:53] <Khisanth> quarter cent? :P

[19:53] <cwest> That's pushing it.

[19:54] <stevan> cwest: okay, I will pay you!

[19:54] <Khisanth> one eight?

[19:55] <cwest> My best offer is that you give me crash space at oscon that isn't in a hostel. ;-)

[19:55] <stevan> sure, but the commute is a bitch since I am in Connecticut

[19:55] <Khisanth> hehe

[19:55] <cwest> Connecticut, nice typo.

[19:55] <cwest> Geek.

[19:55] <cwest> Anyway, that's cool. :-)

[19:56] * cwest will always say connecticut now.

[19:56] * stevan didnt even realize he did it, its the caffine talking I swear

[19:57] <masak> cwest: it's spelled that way

[19:58] <masak> just not pronounced like it :)

[19:58] * Aankhen`` goes to sleep.

[19:58] <stevan> nite Aankhen`` 

[19:58] <Aankhen``> G'night.

[19:59] <cwest> wow, awesome quit message

[20:00] <stevan> cwest: I think all you need for svnbot is pugs

[20:00] <stevan> http://svn.openfoundry.org/pugs/examples/network/svnbot.p6

[20:00] <stevan> just install pugs and run svnbot from the command line with the proper args and you are good to go

[20:01] <cwest> http://pair.openjsan.org/

[20:01] <cwest> This will become www and @ soon.

[20:02] <cwest> heh "all you need is pugs"

[20:02] <cwest> I love you guys.

[20:02] <stevan> cwest: here is the man you need to talk to ^

[20:02] <iblech> cwest: Hi :)

[20:02] * cwest is going to try to install pugs from CPAN

[20:03] <eric256> is evilbot back yet?

[20:03] <cwest> hello iblech, I'm trying to steal your svnbot.

[20:03] <eric256> i forget how to activate it....

[20:03] <eric256> !eval "hello"

[20:03] <stevan> ?eval

[20:03] <eric256> ?eval "hello"

[20:03] <evalbot6> 'hello' 

[20:03] <stevan> eric256: I think it is down

[20:03] <stevan> oh wait

[20:03] <stevan> back 

[20:03] <iblech> cwest: HEAD's svnbot has some cosmetic improvements

[20:03] <stevan> horray

[20:03] <cwest> iblech: Let me try to install pugs first. I think this will be the biggest hurdle.

[20:04] <eric256> ?eval my $test = { 1 => { 2 => 3, 4 => 5} };

[20:04] <evalbot6> {('1' => ('2' => 3)), ('4 5' => undef)} 

[20:04] <iblech> cwest: Sure

[20:04] <stevan> cwest: pugs from CPAN is for wussies, real hackers use svn HEAD

[20:04] <cwest> Everything I try to compile pugs (on my powerbook) it dies. I'm a wussy. :-)

[20:05] <stevan> cwest: dont try to compile GHC

[20:05] <cwest> I'm using a precompiled package.

[20:05] <stevan> there is a good DMG on the site

[20:05] <cwest> ah, maybe that's it.

[20:05] <cwest> This'll be running on fbsd though.

[20:06] <stevan> cwest: someone around here might have an already compiled version of that then

[20:06] <stevan> I think autrijus uses fbsd

[20:09] * cwest is just updating minicpan atm

[20:19] *** Ontolog is now known as tehpwn

[20:23] <kolibrie> perlbot nopaste

[20:23] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[20:26] <pasteling> "kolibrie" at 66.239.158.2 pasted "I get random segfaults from pge with this" (37 lines, 827B) at http://sial.org/pbot/11781

[20:27] <iblech> kolibrie: IIRC, PGE is still a bit broken (because of the calling convention changes), both in trunk and in leo-ctx5. But not 100% sure

[20:27] <kolibrie> so it's not just me?

[20:28] <iblech> kolibrie: Definitely. My PGE here (latest leo-ctx5) can't even handle "a" ~~ rx/a/

[20:28] <kolibrie> ouch

[20:28] <kolibrie> well, I won't upgrade my parrot just now

[20:38] <iblech> kolibrie: Ignore what I've just said. Turned out I needed a make realclean, "a" ~~ rx/a/ works now :)

[20:38] <iblech> kolibrie: Will check your nopaste now

[20:40] <iblech> kolibrie: *** Cannot parse PGE: <page> *** Error: end of file no match

[20:41] <kolibrie> iblech: run it a few times

[20:41] <kolibrie> I get different results very time

[20:41] <kolibrie> s/very/every/

[20:42] <iblech> kolibrie: I get always the same error here

[20:42] <kolibrie> hmm

[20:42] <kolibrie> I got that error twice, but mostly I just get a segfault somewhere

[20:43] *** tehpwn is now known as tehpinktaco

[20:43] <kolibrie> though sometimes all the strings match, no problems

[20:43] <Juerd> Can someone kill lilo for me please?

[20:43] <iblech> No segfaults here

[20:43] <kolibrie> iblech: ok, thanks

[20:43] <kolibrie> Juerd: use grub

[20:44] <kolibrie> anyone else want to run my nopaste to check for segfaults?

[20:49] <svnbot6> r5626, iblech++ | t_disabled/rules/from_perl6_rules/temp_moved_here_because_pge_doesnt_work_atm/

[20:49] <svnbot6> r5626, iblech++ | -- Test fixes ("@a" -> "@a[]", "@{foo}" -> "{@{foo}}", eval_is -> is(eval(..., etc.).

[20:50] <Juerd> kolibrie: No, the lilo who spams freenode

[20:50] <kolibrie> Juerd: oh, sorry

[20:52] <Juerd> kolibrie: Have you looked at your status window lately?

[20:54] <kolibrie> Juerd: ahh, nope,hadn't looked there all day

[21:06] <svnbot6> r5627, iblech++ | temp_moved_here_because_pge_doesnt_work_atm/ (referred to as "tmh" in the

[21:06] <svnbot6> r5627, iblech++ | following) -- unTODO, try {...}, and fail "Test hangs".

[21:06] <svnbot6> r5627, iblech++ | No test of tmh hangs here now, so we could move tmh back to t/. But as I dunno

[21:06] <svnbot6> r5627, iblech++ | what Parrot revision other people are on, I leaved tmh at t_disabled.

[21:23] <svnbot6> r5628, iblech++ | * t/packages/require_and_use.t -- Refactoring and tests for use and require

[21:23] <svnbot6> r5628, iblech++ |   updating %*INC correctly.

[21:23] <svnbot6> r5628, iblech++ | * Usual svn props.

[21:25] <iblech> Night :)

[21:44] <nothingmuch> evening

[21:44] * nothingmuch is litterring the p6l posts

[21:44] <nothingmuch> err, logs

[21:45] <nothingmuch> or should I say archives

[21:51] <Juerd> They're posts no matter how you look at them

[21:53] <nothingmuch_> bah.... multihoming sucks

[21:53] <nothingmuch_> i wish interface bonding was automatic

[21:54] *** nothingmuch_ is now known as nothingmuch

[21:57] <stevan> hola nothingmuch 

[21:57] <stevan> did you see what putter did ?

[21:58] <nothingmuch> stevan: yep

[21:58] <nothingmuch> i'm happy someone finally did

[21:58] * nothingmuch wasn't having much fun with it

[21:58] <stevan> :)

[21:59] <stevan> it looks tedious, metamodels are much more fun :)

[21:59] <nothingmuch> yup.

[21:59] * nothingmuch thinks he'll go read now

[21:59] <nothingmuch> i crashed today

[21:59] <nothingmuch> it was a really funny (in the pathetic sense) event.

[22:00] <nothingmuch> i rode all around dirt, and rocks, and icky stuff, like thorns, and what not., and didn't die

[22:00] <stevan> crashed the bike?

[22:00] <nothingmuch> especially this one descent I really like where there is no road, i'm always sure i'll fall down, but I don't

[22:00] <nothingmuch> anyway, so i get back into Lehavim, where I live, from out in the hills

[22:00] <nothingmuch> and i am riding on the road

[22:01] <nothingmuch> it was getting dark, and I didn't correctly assess how much this sewage drain was sticking out of the pavement.

[22:01] <nothingmuch> and furthermore I was in a too high gear

[22:01] <nothingmuch> now about 1mm of my elbow is on the asphalt, and what's left of it is hurting

[22:01] <nothingmuch> as is mhy wrist

[22:02] <nothingmuch> which is a shame, since it's the left hand

[22:02] <nothingmuch> which i use to mast^H^H^H^Hplay wit^H^H^H the base

[22:02] <nothingmuch> err, bass

[23:03] <nothingmuch> any mac users?

[23:03] <dmo> yeah, why ?

[23:04] <nothingmuch> my safari is fubar

[23:04] <nothingmuch> can you zip up Safari.app and WebKit.framework?

[23:04] <dmo> yawn... yup

[23:07] <dmo> where do you want me to send it ? 

[23:07] <nothingmuch> umm, any webspace

[23:07] <nothingmuch> or [email@hidden.address]
[23:07] <nothingmuch> UGH!!: http://use.perl.org/comments.pl?sid=27555&cid=41974

[23:08] <dmo> done

[23:09] <dmo> check it before i go to bed, which is ... asap

[23:09] <nothingmuch> thanks!

[23:09] <nothingmuch> how big is it?

[23:10] <dmo> 5 megs, the exim sucker won't let it through. hold on

[23:11] <dmo> oh no... I'll put it on my server, hold on a sec

[23:12] <nothingmuch> thanks!.

[23:14] <dmo> http://www.amakuru.net/safari.tar.bz2

[23:15] <dmo> i've got 256kbps up, should be quick enough; Mail seems to have suceeded though ?

[23:17] <nothingmuch> errm, mutt is sorting inbox

[23:18] <nothingmuch> yes, it got here

[23:19] <nothingmuch> dmo++

[23:19] <dmo> wait until it does work

[23:19] <nothingmuch> btw, there's an easy way to make archives - context click on something and say 'make archive'

[23:19] <nothingmuch> it creates a zip

[23:19] <dmo> zip is evil

[23:20] <nothingmuch> ah, but there is more magic - it does resource forks too

[23:20] <nothingmuch> and since zip is less evil than stuffit

[23:20] <dmo> doesn't it fuck up you permissions ?

[23:20] <nothingmuch> what does?

[23:20] <dmo> zip

[23:20] <nothingmuch> zip? exe bits et al?

[23:20] <dmo> owner group and stuff ? it's been ages 

[23:20] <nothingmuch> the ._MacOSX thing inside it appearantly keeps metadata

[23:21] <dmo> alright

[23:21] <nothingmuch> the reason I like it nowadays is that it Just Works

[23:21] <nothingmuch> and stuffit is flakey, ugly, and annoying

[23:21] <dmo> I'm still more used to Linux than macos

[23:21] <dmo> old habits :)

[23:21] <nothingmuch> as I see it OSX is enough posix for me too be happy

[23:22] <dmo> yep

[23:22] <nothingmuch> but since there's not too much to configure (fvwm? kde? many options?) i don't waste time

[23:22] <nothingmuch> plus, i know all the keyboard shortcuts

[23:22] <dmo> oh there's still plenty. 

[23:22] <nothingmuch> sure, the expose stuff, and the apps are nice

[23:22] <nothingmuch> but you get enough goodness out of every platform, i guess

[23:22] <nothingmuch> windows xp probably has a crap load of magic I would like to use if I knew about it

[23:23] <nothingmuch> but i'll never find out since cygwin is not enough ;-)

[23:23] <dmo> i had to struggle to find all the helpers I need

[23:23] <nothingmuch> dmo: on what platform?

[23:23] <dmo> osc

[23:23] <dmo> osx

[23:23] <nothingmuch> what do you mean by helpers, btw?

[23:24] <dmo> sshAskPass, Witch, iTerm, stuff like that

[23:24] <dmo> a version of gvim that runs nicely

[23:25] <dmo> compile qt so that lincvs would run on it without crashing every other second

[23:25] <osfameron> hmmm, what's wrong with using UNIVERSAL::isa as a function?

[23:25] <nothingmuch> it seems to work

[23:25] <dmo> what ? safari ?

[23:25] <nothingmuch> osfameron: Test::MockObject can't lie

[23:25] <nothingmuch> dmo: yep

[23:25] <nothingmuch> but actually, false alarm

[23:26] <nothingmuch> when I replace WebKit it doesn't work

[23:26] * nothingmuch swaps back

[23:26] <dmo> fsck!

[23:26] <nothingmuch> nevermind, i just remembered I actually paid for this version of SOX

[23:26] <nothingmuch> OSX

[23:26] <nothingmuch> so I can restore from CD ;-)

[23:26] <dmo> running tiger right ?

[23:26] <nothingmuch> yep

[23:26] <osfameron> nothingmuch: is that more important than the fact that $string->isa, $undef->isa etc. will die because they're not blessed objects ?

[23:26] <dmo> dunno then

[23:27] <nothingmuch> osfameron: yes, because if you're going to check on a class you're probably going to make calls, and if you're going to make calls it'll die anyway

[23:27] <nothingmuch> UNIVERSAL::isa is not Params::Validate

[23:27] <nothingmuch> it's more like Class::Introspect

[23:27] <nothingmuch> and if a class is lying it has a good reason

[23:27] <nothingmuch> every time I try to use Test::MockObject some module gets in the way

[23:31] <nothingmuch> osfameron: am i making progress in brainwashing you?

[23:31] <osfameron> nothingmuch: I guess I get the point

[23:32] <osfameron> but as I haven't really used Test::MockObject I haven't really had the problem

[23:32] <osfameron> and I don't see why I shouldn't use a perfectly good function in the language

[23:32] <nothingmuch> so will you 'use UNIVERSAL::isa "isa"' whenever you want to use it as a function?

[23:32] <nothingmuch> well, because if you do that in your modules other people suffer

[23:32] <osfameron> which is quoted in perldocs and stuff as what to use instead of ref

[23:32] <nothingmuch> perldocs suck in that respect

[23:32] <osfameron> because some other module wants to do some evil magic.

[23:32] <nothingmuch> we have Scalar::Util reftype

[23:33] <nothingmuch> and Scalar::Util::blessed

[23:33] <osfameron> if (blessed($foo) && $foo->isa(whatever)) ?

[23:33] <osfameron> I guess it's not much more pain

[23:33] <nothingmuch> no

[23:34] <nothingmuch> 'use UNIVERSAL::isa "isa"', 'isa($foo, whatever)'

[23:34] <nothingmuch> if you want it as a function that way behaves correctly

[23:34] <nothingmuch> otherwise you can do that

[23:34] <nothingmuch> but blessed($foo) && $foo->isa(whatever) is a lot of work

[23:34] <osfameron> ah

[23:34] <nothingmuch> if you really want to verify that it's an object, you might as well use something more suited for the task

[23:34] <nothingmuch> (e.g. Params::Validate)

[23:34] <osfameron> I don't like the way that the module perldoc says I'm stupid

[23:34] <osfameron> :-)

[23:35] <nothingmuch> sorry, i was annoyed when I wrote that

[23:35] <nothingmuch> patches welcome

[23:35] <nothingmuch> and chromatic's UNIVERSAL::can is more polite ;-)

[23:39] <osfameron> hm, I guess UNIVERSAL::isa module is a reasonable reimplementation of the function

[23:40] <osfameron> of course I guess perl6 will be able to do things like $scalar.isa('SCALAR') um 'ACTUALSCALAR' or something

[23:40] <nothingmuch> osfameron: ask stevan =)

