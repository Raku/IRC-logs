[00:11] <svnbot6> r7741 | luqui++ | Fixed ().perl

[00:14] <luqui> ?eval []

[00:14] <evalbot_7741> [] 

[00:14] <luqui> hooray

[00:14] <luqui> ?eval [3]

[00:14] <evalbot_7741> [3,] 

[00:20] <theorbtwo> ?eval ()

[00:20] <evalbot_7741> () 

[00:20] <theorbtwo> ?eval [[], []]

[00:20] <evalbot_7741> [[], []] 

[00:20] <stevan> putter: dont go anywhere

[00:22] <stevan> putter: I have to take the dog out, bbiab, but dont leave :)

[00:25] <stevan> putter: ping # im back

[00:35] <luqui> ?eval (())

[00:35] <evalbot_7741> () 

[00:35] <luqui> ?eval [[]]

[00:35] <evalbot_7741> [[],] 

[00:35] <luqui> ?eval [[[[[[]]]]]]

[00:35] <evalbot_7741> [[[[[[],],],],],] 

[00:35] <luqui> ?eval [[[[[()]]]]]

[00:35] <evalbot_7741> [[[[[],],],],] 

[00:36] <luqui> ?eval sub id (*@_) { @_ } [[[[[id()]]]]]

[00:36] <evalbot_7741> [[[[[],],],],] 

[00:36] <luqui> ?eval sub id (*@_) { @_ } [[[[[item id()]]]]]

[00:36] <evalbot_7741> [[[[[],],],],] 

[00:36] <luqui> ?eval sub id (*@_) { @_ } [[[[[item ()]]]]]

[00:36] <evalbot_7741> [[[[[],],],],] 

[00:50] <stevan> hey luqui 

[00:50] <putter> ;)  hi stevan

[00:50] <stevan> putter!!!!!!

[00:50] <putter> L)

[00:51] <putter> err, :)

[00:51] <stevan> LOL

[00:51] <stevan> hey putter,.. so your back,..where yah been?

[00:51] <putter> life...

[00:51] <stevan> ah

[00:51] <putter> perhaps a bit burned out on pugs...

[00:52] <stevan> yeah that can happen

[00:54] <putter> remember the spring... "trade tests for bug fixes"...

[00:54] <stevan> yeah

[00:54] <putter> ah well.

[00:54] <stevan> so are you back,.. or just dropping by?

[00:54] <luqui> hi stevan 

[00:55] <stevan> hey luqui

[00:55] <stevan> whatcha doing will all the [[]]]] stuff?

[00:55] <luqui> oh, [].perl was throwing a bad error

[00:55] <luqui> so I fixed it

[00:55] <luqui> and then I was just playing

[00:55] * stevan was hoping for a tuple type or something

[00:56] <luqui> once Larry weighs in all his thoughts on the tuple, it will be in

[00:56] <luqui> for the moment, I'm hacking perl6.vim

[00:58] <putter> mmm... tuples...

[00:59] <svnbot6> r7742 | luqui++ | Added the c| sigil to perl6.vim.

[01:01] <stevan> putter: I have to run in a sec, but good to see you back

[01:01] <stevan> If you are up to it, I would like to work out some object space details

[01:02] <stevan> if you havent already, I recommend reading the PyPy docs,... they are very interesting so far

[01:02] <stevan> I like their approach

[01:02] <putter> thanks stevan, sure, I can be around for an hour or so.

[01:02] <putter> hmm, I haven't looked at pypy in about 9 months or so.  any changes?

[01:02] <putter> but later.

[01:02] <stevan> I dunno, I only really looked at it recently

[01:03] <stevan> putter: i got 10 minutes now if you do?

[01:04] <putter> sure.

[01:04] <putter> what's our objective?

[01:04] <stevan> well I read over the P6::V/C stuff

[01:04] <putter> ok

[01:04] <stevan> the thing that I was worried about was that the metamodel and the native stuff was so intertwined

[01:04] <putter> yes

[01:05] <stevan> I think they should be at different ends (as in my drawing)

[01:05] <stevan> so that I can build the metamodel with the natives and then we can wrap

[01:05] <stevan> I am currently taking the native bits in P6::Value and tweaking them a bit

[01:06] <putter> what aspect of interwined is of concern?

[01:06] <stevan> well, I cannot build the metamodel with a class which is implemented with the metamodel

[01:06] <stevan> but the metamodel should (eventually) return boexed types 

[01:07] <stevan> so when I say MyClass.meta.name

[01:07] <stevan> I should get back a Str instance

[01:07] <stevan> where Str is a wrapper around the native 'str' type

[01:07] <stevan> which means the metamodel needs to use a 'str' (at least intially)

[01:08] <putter> hmm... so this is not a problem for things which the metamodel doesnt need to be working during its own bootstrap, yes?

[01:08] <stevan> the 'str' may get autoboxed into a 'Str', or we may need to wrap Class in some way to implement that autoboxing behavior

[01:08] <stevan> yes

[01:09] <stevan> the metamodels methods are black boxes

[01:09] <stevan> however, they must take in and return (at a minimum) native runtime types

[01:09] <putter> do you have a feel for what the "needs to be working during bootstrap" list looks like?

[01:09] <stevan> str, num, bit (or bool), closure, list and hash

[01:10] <stevan> closure will have a pad/environment with it too

[01:10] <stevan> I have str, bit and num so far

[01:10] <putter> no boxed types.  so Str and and Array and P6::V aren't really at issue?  just the absence of any str, num, bit, etc?

[01:10] <stevan> they are very simple really

[01:11] <stevan> no boxed,.. these are runtime types,.. may be exposed as unboxed types later,..

[01:11] <stevan> well Str and Array should be built using these runtime types

[01:11] <stevan> Str should wrap str

[01:12] <stevan> this ends up being really low level stuff,.. so str really wont do too much

[01:12] <putter> hmm... so currently, the unboxed types are unembelished p5 things...?

[01:12] <stevan> most of the real Perl 6 functionality will be in Str

[01:12] <stevan> putter: they are very simple p5 objects 

[01:12] <stevan> objects

[01:12] <putter> currently?

[01:13] <stevan> I have some hacked together,.. based on the ones in Perl6::Value

[01:13] <putter> ah.  but prior to that, they were p5 values, rather than objects.  what motivates the change?

[01:13] <stevan> oh you mean in the metamodel?

[01:14] <stevan> yes they were just plain old p5 strings and stuff

[01:14] <putter> (approaching original conversation timeout)

[01:14] <stevan> the motivation for the change was that I wanted to explore the object space thing :)

[01:14] <stevan> and to try and get the Syn12.5 written 

[01:15] <stevan> but all this required figuring out where my strings were coming from

[01:15] <putter> ... and...  you wanted the unboxed types to respond to method calls??

[01:15] <stevan> well, I like OO, so I implemented them using OO

[01:15] <stevan> they may or may not be exposed to the user as unboxed types

[01:16] <stevan> that is not my descision or concern right now

[01:16] <stevan> this does mean the dispatch mechanism in the metamodel will change

[01:16] <stevan> actually what I am doing is re-implementing Chaos.pm

[01:16] <stevan> in a sense

[01:16] <stevan> but my time is up,... so I have to go

[01:16] <stevan> read the PyPy docs,.. i think they are probably much further along now

[01:16] <stevan> it is very intersting stuff

[01:17] <putter> hmm.  I'm still confused on a core point.  the old unboxed things were p5 values.  they are changing to simple p5 objects.  I'm still unclear on why.

[01:17] <putter> ok.  nice talk.  perhaps see you later.

[01:17] <stevan> because if we are going to make a p5 runtime,.. we have to draw a line somewhere

[01:17] <stevan> for the metamodel to be portable, it needs to sit on the same foundation

[01:18] <stevan> that foundation is really just thin wrappers over native str, num, bit, list, hash, code

[01:18] <stevan> but I gotta run,.. and feel free to rant,.. I will backlog later &

[01:56] <putter> stevan: i'm off. perhaps back in ~1/2 hr.  one possible conversation looks like "so, what are the objectives of the mm? ... any areas of uncertainty? ... given those objectives towards those clients - in what ways does the existing implementation not meet those objectives?  ... what is the intended change?  ... how will the objectives met change?  any areas of uncertainty?"  yada yada. ;)

[01:58] <putter> questions motivated in part, for example, by my being unclear on what flavors of portability are desired.

[02:04] <fglock> hi stevan putter

[02:15] <qnetjoe> can anyone help with a small perl problem?

[02:18] <buu> no

[02:26] <eric256_> hello

[02:29] <fglock> hi eric256_ 

[02:29] *** eric256_ is now known as eric256__

[02:29] <eric256__> ??

[02:29] <eric256__> i tried /nick eric256 and it added an extra _  how rude ;)

[02:42] * eric256__ tries to figure out how to use line and colum numbers to ouput test files with highlighted tests. ;)

[02:47] <fglock> stevan: there are p5 objects for str/int/bit in the Perl6::Value::* namespaces - they are in the second half of Value.pm. Hash and Array are also implemented as p5 objects, and then wrapped in the metamodel

[02:47] <fglock> putter: nice cleanup - thanks!

[03:13] <putter> hi fglock!

[03:14] <putter> are you going to be around for a bit?

[03:14] <putter> (and by implication, are you around now?:)

[03:19] <fglock> putter: hi - I was distracted :) I'll be around for an hour

[03:30] <putter> great :) bbiab

[03:44] <putter> ahhhh.  ok.  fglock: ping?

[03:45] <mrborisguy> eric256: any way you can get the code pages to use a standard template like the other three types, instead of using treebuilder?

[03:45] <fglock> pong

[03:45] <putter> hi, it's been a while.  how goes?

[03:47] <eric256__> the code pages load code.tmpl

[03:47] <eric256__> and insert the code into the pre tag

[03:47] <eric256__> so as long as you leave the pre tag its all good..

[03:47] <eric256__> in short..not yet. directly

[03:47] <fglock> I'm helping organize YAPC::SaoPaulo - it will be in less than 2 weeks

[03:47] <fglock> I've not worked much in Pugs

[03:48] <fglock> but I have some ideas for Array optimization

[03:48] <putter> ah, neat.  the boston yapc proposal folks have tried to get me to help, but i just dont have the tuits for something like that.

[03:50] <fglock> next year we will have YAPC::SouthAmerica - we already have people from Brazil and Argentina working on it - very nice :)

[03:50] <mrborisguy> eric256: I tried to put an XML prefix on the template, and TreeBuilder must have stripped it off.

[03:50] <mrborisguy> which reminds me... are you opposed to formatting the pages in strict XHTML?

[03:52] <putter> I'm puzzling over development path.  Have you had any thoughts on say the interaction between P6::V/C and MM stuff?  Or a P6::V/C cleanup pass?

[03:52] <eric256__> xhmtl if fine. if you can get TreeBuilder to work with it

[03:52] <Blicero> how do you access the last element of an array in perl6

[03:52] <Khisanth> @foo[-1] doesn't work anymore?

[03:52] <putter> oh, right, yapc takes a region modifier. ;)  re yapc::sa, neat!   i think the boston proposal is for yapc::na.

[03:53] <putter> hmm, is there a yapc::a?

[03:53] <eric256__> gtg for now.

[03:53] <Blicero> thanks

[03:54] <fglock> maybe YAPC::World some day - but the cost of travelling would be high for everyone. Local, smaller YAPCs make it very affordable

[03:55] <mrborisguy> I'll just leave the code pages for now

[03:57] <putter> Basically I managed to break P6::V/C in the course of the rewrite everything.  Which was expected, but I'm sort of out of tuits to finish the P6::V/C part.  So if you were planning on dusting P6::V/C, or doing something combined with stevan, I'd just punt and wait for a bit.  If not, perhaps I should just do a very minimal stripped down version of p6vc, get everything sort of working and committed, and punt there.

[03:58] <putter> committed as P6::Run::OnPerlyada yada.  pilrun would stay the same, so your current development stuff would be unaffected.

[03:58] <svnbot6> r7743 | eric256++ | catalog_tests.pl - updated templates some more.

[03:59] * putter pictures perl communities chartering aircraft.  and the effect of a accident.

[03:59] <fglock> how about separating the p5 objects in a separate file? maybe this would help stevan's work

[04:01] <fglock> re Array: it's just about the algorithm - once it works, it can be ported to the working files

[04:03] <putter> I'd love to see a "travel cost show as distance" map of the world.  have to be 3-d of course.  I'm not sure how to deal with oddities like one direction is more expensive than the other.

[04:04] <putter> not sure one can do a general map.  might need to do "starting point specific" maps.  but hopefully not.

[04:04] <putter> re files...

[04:04] <fglock> you have to take politics into account too - visa problems, currency evaluation ...

[04:04] <putter> oh, good point.

[04:08] <putter> basically I'm trying to get the overhaul to the point of working well enough that folks would rather fix it than deal with pilrun.  but that requires leaving the p6vc part of things in a form you would be comfortable using.  and it's not clear to me its there yet.

[04:11] <fglock> would it be possible to move p6vc into the p6 prelude, with the low level parts written in p5? (not sure if PIL would support this)

[04:11] <putter> another posibility is toss the overhaul up as a carcass in misc/, and let folks scavange at will.  having done this several times already, I'm rather hesitant to add the "stink" of another one.

[04:11] <putter> re "move ...",

[04:11] <putter> you mean the src/perl6/Prelude.pm ?

[04:13] <fglock> no, the p6 part of pil-run Prelude

[04:13] <putter> basically, if pil supported oo, I'd suggest writing a p6 implementation of everything, generate ... oh.

[04:13] <fglock> but that's probably a too-big project

[04:14] <fglock> anyway, I found that having everything in a big file makes it more readable

[04:14] <putter> that's basically what pil2js does.  it's slightly complicated by the objects themselves not making it through pil, but the methods do.

[04:15] <putter> re big file, oh, neat.  I was worried that would be one contributor towards "fglock wont want to work on it in this form".

[04:16] <fglock> :)

[04:17] <fglock> we could move all methods to multisubs

[04:21] <putter> re stuffing everything through p6... yes, one could do that.  absent pil2, one still needs to play games to get the object information directly from the code.  or take pil2js's approach of explicitly coding it, though I lack the patience with clutter to be happy with it in that form.  sigh.  one approach is to simply punt and wait for pil2.

[04:24] <fglock> did you include Match and Junction too?

[04:25] <putter> re methods vs multisubs, both should be getting through pil fine.  so there is not need to change there.  basically one can say  class C { method m ($n) { magicname('p5 code')($n) } }  like pil2js does.  or create that from a  class C { method m ($n) :p5 { p5 code } }

[04:27] <putter> re M&J, yes, but at somepoint I ripped/commented out Junctions with a rationale of "I'm having trouble getting even  say 'hi'  to work.  simplify, simplify, and add stuff back once things are working again".

[04:29] <fglock> moving things to p6 will make it even less readable - maybe it's not a good idea at this point. But after PIL2 it would be a nice experiment

[04:32] <putter> err, moving things to p6 doesnt need to make things less readable.  we are already paying the complexity cost of doing source filtering, so moving to p6 can be invisible.  pil2js just made the quite plausible choice that the complexity of filtering wasnt worth increase in code clarity.

[04:35] <fglock> you have a mini-p6 implemented in a source filter, right? would it be possible to make it even more p6-like?

[04:35] <putter> actually, perhaps my largest reservation about the overhaul is the complexity of the filter which grovels over the big all-in-one prelude file.  it's rather larger than the couple of lines used by pilrun's primp5.

[04:38] <putter> ah, yes.  I think that boils down to "can one preprocess p6 code in order to fake having pil2".  I think the answer is yes, and I intermittantly wonder if I should have taken that approach.  didnt.

[04:39] <fglock> yes - can it evolve into a partial implementation of p6? use MM for the objects, and p5 for almost everything else (this is just for the Prelude)

[04:44] <putter> yes.  one of the reasons I didnt go down the fake-pil2 path was a minimal-p6 approach had a much faster edit-test loop.  but once things were basically working, it was nice to be able to flexibly choose p5 or p6, depending on which was easier.

[04:44] <putter> on a function by function basis.

[04:46] <putter> re "can it evolve", that's basically what the overhaul does.

[04:46] <putter> getting late.

[04:47] <fglock> nice - so we are going in the right direction, I think

[04:50] <putter> if there was someone interested in taking over the runtime core, I'd just do a handoff with them.  but no-one has expressed interest.  pilrun is a bit clunky for this next phase of things.  so the question is how to keep you and steven supported.  of course, if stevan's MM2.1 ?:)  combines with P6::V/C, then that's less of a problem.  I can just add the overhauled runcore, and we're all set.

[04:52] <fglock> that's a good plan, imo

[04:56] <putter> beyond supporting you and stevan, I'm not sure what the objective of the p5 backend should be.  with pil2, a lot of this gets much simpler.  if pil2 were to be available in a few weeks, I'd suggest waiting.  if not for another half year, one might consider trying to evac from haskell pugs.  but the best bet there would be more something like piljs linked with perl as a boostrap platform, rather than the p5 backend.  a better p5 backend 

[04:56] <putter> would be a good source of attention, but I'm not sure we want that kind of attention until we get a better handle on oo.

[04:56] <putter> s/attention/attention from the world/

[04:58] <putter> in between, one thinks about preprocessing p6 code with regexps to work around pil1 limitations.

[04:59] <fglock> re the objective: a "readable" p5 backend can help hackers that are scared of learning haskell :)

[05:00] <putter> though there is a different "big picture" flavor of approach.  basically doing P6::V/C and the runcore like the existing p5 Perl6:: modules.  like stevan's start at a MM cpan module.  do the p5 backend piecemeal on cpan.

[05:01] <putter> re hackers,

[05:06] <putter> true.  my (fuzzy) thought is, we're still critically dependent on pugs/hs parsing, typechecking, and compiling.  witness the current issue with objects.  that only goes away once p5 has rules and objects, and can host a p6 bootstrap.  but pugs/hs is a better place to do that.  so...

[05:07] <fglock> 3am here - time to sleep

[05:07] <putter> so it feels kind of like we are starving, sitting between to piles of food, but unable to decide which to eat.  if pugs ...

[05:08] <putter> yeah.   1am here.  good night fglock.  it's been good to touch base with you.

[05:10] <putter> basically, if pugs/hs was going away, we could probably get a kludge of piljs, perl5, and prolog running in a few weeks.  but that would be a silly waste of effort if pugs/hs development is going to pick up again.  but it hasn't yet.  so things are sort of in limbo.

[05:12] <fglock> keeping reasonable expectations helps avoid burnout - we are doing some useful prototype work, which will be useful for pugs/hs too

[05:13] <fglock> good night

[05:15] <putter> very true.  and a good point.  I'm definitely in a expectation-reality disonnance.  I keep expecting pugs to have, or any-moment-now get back to having, a clock speed like it did in the Spring.  good point.  thanks.

[05:15] <putter> good night fglock &

[05:20] <putter> stevan: sorry we didnt get your second conversation this evening.  I'll try to wander by later in the week.  tomorrow, err, later today, probably wont happen.  but perhaps thurs.

[05:27] <putter> random thought: just as vc was a problem for parrot (cvs, so pugs-like anarcism was too scary), I wonder if pugs/hs is being constrained by our svn central-archive model.  ie, rather than a linux-kernel-like multiple threads of development, with curational aggregation.  pugs/hs is so central to everything, that it can't afford to stay broken for long.  and there's only one of it.  so patches either work, or get roled back.  there is no 

[05:27] <putter> collaborative not-quite-working-yet pugs/hs reengineering.  (ie, new features can afford to not quite work, and folks can work off-achive, using svk say, but havent yet I don't think).

[05:35] <putter> for a while things worked by "it's ok to break pugs/hs, because, wost case, autrijus can quickly glance at the problem and fix it".  if things stay broken for days, rather than minutes or hours, that changes the development dynamic.  hmm, though windows folks apparently quietly lived with pugs being broken for them for a long time (a week or few).  perhaps we are simply being too conservative, and pugs should be spending more time broke

[05:35] <putter> n? ;)

[05:35] <putter> end of random thought.

[05:35] <putter> g'night &

[05:35] <mrborisguy> talking to yourself? ;)

[05:37] <putter> that tends to be the only option this time of day.  folks backlog, so it ends up being an asyncronous conversation.  I'll probably pick up stevan's reply to me hours or even a day after he writes it.

[05:37] <putter> irc as bullitin board

[05:39] <putter> s/ and folks can work off-achive/ and folks can work collaboratively off-achive/

[05:40] <putter> there's an experiment for a lambda camel - do some agressive development on pugs/hs, which leaves it not quite working, and see if we can collectively cope.  if not, perhaps we need to fiddle with the vc model.

[05:41] <putter> cheers &

[05:41] <putter> good night mrborisguy  ;)

[06:56] <autrijus> Perl made me bleed :/

[06:56] * autrijus just cut the middle finger of left hand

[06:56] <autrijus> ...caused by the amsterdam.pm camel award 

[07:03] *** wcting is now known as whiteg

[07:17] * brother gives autrijus the Purple Sigil

[07:58] <gaal> autrijus: what *was* the the amsterdam camel award?

[08:14] <autrijus> gaal: eh... see use.perl

[08:14] * autrijus needs to nap a bit now... bad night train with babbling crowd

[08:14] <autrijus> http://www.sppn.nl/nieuws/nieuws-20051020.html

[08:19] <gaal> Ah, I gathered it had a hump, I just never hear of a black one being awarded before.

[08:21] <gaal> And thanks to the translate extension, I know why they're called Black now. :)

[08:21] <nothingmuch> why are they called black?

[08:21] <nothingmuch> ref to black magick?

[08:22] <gaal> they were made by someone called Cynthia Black

[08:23] <nothingmuch> ah

[08:25] <gaal> https://addons.mozilla.org/extensions/moreinfo.php?id=181 # excellent

[08:28] * autrijus naps... but finally got stable net

[08:28] <autrijus> bbiab :)

[08:29] <autrijus> (massive tcp/ip withdrawl)--

[08:29] * nothingmuch had a massive seriousness withdrawl this week

[08:29] <nothingmuch> spent all of my free time doing one of:

[08:29] <nothingmuch> just sitting

[08:29] <nothingmuch> playing dumb games on the playstation

[08:29] <nothingmuch> drinking, smoking, eating salty foods

[08:30] <nothingmuch> and hiking

[08:30] <nothingmuch> s/one/at any given time, at least one/

[08:30] <nothingmuch> oh, and we also had a big cooking thing, we made lovely food, and then people ate it

[08:31] <nothingmuch> i think overall I wrote less LOC than I do in a normal day ;-)

[08:31] <nothingmuch> gaal: thanks for the Lisa Germano pointer

[08:31] <nothingmuch> i got some from emusic

[08:31] <nothingmuch> i'm having fun

[08:33] <gaal> cool, which album?

[08:39] <nothingmuch> Geek the Girl

[08:45] <gaal> I don't know that one. If you can, try Lullaby for Liquid Pig.

[11:01] <sanxiyn> You may want to read http://codespeak.net/pypy/dist/pypy/doc/draft-dynamic-language-translation.html

[11:17] <Juerd> obsessive /last $self --

[11:17] <Juerd> The previous /last output was still visible.

[12:39] <xinming> hmm, anyone here can tell me if he can open the link http://planet.pugscode.org/

[12:40] <kolibrie> opened right up

[12:40] <xinming> :-S

[12:40] <xinming> The damn GFW...

[12:40] <xinming> Greate FireWall..

[12:41] <xinming> seen autrijus 

[12:42] <xinming> !seen autrijus 

[12:42] <xinming> seenbot isn't up. :-(

[12:42] <gugod> jabbot was offline due to some network problem :/

[12:50] <theorbtwo> Any paid livejournal users about?

[12:50] * theorbtwo would like to subscribe to http://planetsix.perl-foundation.org/rss20.xml || http://planetsix.perl-foundation.org/rss10.xml

[12:52] <rafl_> autrijus: ping

[12:52] *** rafl_ is now known as rafl

[12:58] <xinming> hmm, by the way, in perl 5, we use ` ` to capture the output from the command we run, how about perl 6? q:x ?

[13:04] <kolibrie> xinming: that's what it looks like, from S02

[13:21] <gaal> kolibrie: ping

[13:21] <rafl> gaal: ping

[13:21] <gaal> rafl: pong

[13:22] <rafl> gaal: Could you please try the -4 packages at http://perlcabal.org/~rafl/debian/ ? Especially libghc6-pugs-dev.

[13:22] <gaal> rafl: only in about 6 hrs.

[13:22] <gaal> (sorry)

[13:23] <rafl> gaal: That's fine. Thanks. I doubt that version will already be uploaded until then ;-)

[13:23] <gaal> heh, if feather ran Xen you'd be able to test there ;-)

[13:24] <rafl> Well, I'm able to test there. It run's debian.

[13:24] <rafl> I'm simply not sure if I screw up the current pugs installation with that.

[13:37] <kolibrie> gaal: pong

[13:37] <gaal> kolibrie: hi, you were looking for me a while ago on feather?

[13:37] <kolibrie> days ago

[13:37] <gaal> yes

[13:37] <kolibrie> I was having IRC problems, all figured out now

[13:38] <gaal> rafl: Xen gives you a really virtual machine

[13:38] <gaal> kolibrie: okies :)

[13:38] <kolibrie> thanks :)

[13:38] <gaal> np :)

[13:38] <rafl> gaal: I know. How mature is it yet?

[13:39] <gaal> I haven't used it myself, but have it from reliable sources that it's very good :)

[13:42] <rafl> Well, convince Juerd then. :-)

[13:42] <rafl> But I think a simple chroot would be enough. But I'm too lame.

[13:50] <gaal> It isn't without work for him ;-)

[13:52] <rafl> But without work for you, just bug him till he installs it! :-)

[13:53] <gaal> hahaha, well, you'll be the primary enjoyer of this, as is my duty to remind you, which itself is even less work for me. ;-)

[13:55] <rafl> You have no idea how lazy I am, do you? :-)

[13:56] <rafl> Is kane doing IRC?

[13:56] <rafl> (The 6pan guy autrijus refered to somewhere)

[14:02] <Juerd> rafl: On magnet, yes.

[14:02] <Juerd> 15:42 < gaal> rafl: Xen gives you a really virtual machine

[14:02] <Juerd> 15:47 < rafl> But I think a simple chroot would be enough. But I'm too lame.

[14:02] <Juerd> Yes, very probably a chroot is enough.

[14:03] <Juerd> I'm not going to use hardware sharing thingies any time soon

[14:03] <rafl> Juerd: magnet -v

[14:03] <Juerd> Their impact on overall system performance is much greater than programs running in a chroot, and the security risks are greater than those of a standard password scheme

[14:04] <Juerd> rafl: irc.perl.org

[14:04] <rafl> Thanks.

[14:04] <Juerd> This is where #parrot lives, too

[14:04] <rafl> Jos Boumans, right?

[14:04] <Juerd> Yep

[14:05] <Juerd> Those questions are always easily answered by CPAN:

[14:05] <Juerd> http://search.cpan.org/~KANE/

[14:05] <Juerd> Has the full name in large, somewhat friendly letters

[14:06] <rafl> Ah, the CPANPLUS guy. I remember..

[14:26] <Jooon> rafl: he gave a good talk on CPANPLUS and package managers and described the proof of concept project http://debian.pkgs.cpan.org/

[14:28] <integral> hmm, would be neat to run dpkg+apt on non-deb systems just to manage perl modules

[14:28] <rafl> Indeed.

[14:31] <integral> hmm, I'm sure I've heard someone else suggest this, but I can't remember who

[14:35] <Juerd> There's more than one way to not care. -- lwall

[14:36] <theorbtwo> Oooh, http://debian.pkgs.cpan.org/ looks nice.

[14:37] * Supaplex looksies

[14:39] <Supaplex> humm, nice alternative to dh-make-perl --build --cpan my::module ; dpkg -i libmy-moduleperl*.deb

[14:40] <Supaplex> suprized he didn't mention that part

[14:49] <xinming> hmm, can class attribute has initial value assign to it?

[14:49] <xinming> just lile `class A { has $.x = 3; };`

[14:49] <wolverian> yes

[14:50] <xinming> if so, then, `my A $o .= new( x => 7 );` which value should x be? 3 or 7?

[14:50] <integral> 7 hopefully...

[14:50] <integral> or an error

[14:50] <xinming> Ok, going to write the test. :-)

[14:51] <integral> hmm, it should be the former,  for the latter you could just make it $:x

[14:51] <xinming> ingy: hmm, In my opinion, It should be 7, and if we declare a attribute as `has $.x is ro =3`, this might raise the error

[14:52] <xinming> well, why I use dot here, is because we wish to get the value outside...

[14:53] <xinming> errr.... might be wrong, the default public attribute is ro by default...

[14:53] <xinming> :-s

[15:05] <cognominal> seen autrijus

[15:05] <jabbot> cognominal: autrijus was seen 6 hours 36 minutes 11 seconds ago

[15:11] <xinming> hmm, lives_ok { class A { has $.a = 1 } }, " ... "; this will abort the test....

[15:11] <xinming> anyone have a clue?

[15:12] <xinming> autrijus ever said lives_ok is used for testing if the "feature" is working in pugs...

[15:12] <xinming> But...

[15:12] <xinming> :-(

[15:50] <svnbot6> r7744 | yiyihu++ | Test for class attribute initializement, It's not implemented and not specified, will finish the test in the future.

[16:07] <wolverian> Supaplex, except -dh-make-perl doesn't do dependencies automatically, I think

[16:07] <wolverian> Supaplex, (from CPAN, anyway.)

[16:08] <theorbtwo> I think it does, but I don't know.

[16:08] <theorbtwo> http://debian.pkgs.cpan.org/ does, though.

[16:12] <wolverian> right

[16:21] <Jooon> dh-make-perl figures out dependencies by checking for debian packages that you have installed, so if you build and install everything in the right order of the dependencies, it will sort of figure them out

[16:24] <Supaplex> it behaves pretty well in my experience, but I haven't been very demanding of it.

[16:28] <rafl> Juerd: ping

[16:53] <stevan> fglock__: ping

[17:46] <Juerd> rafl: pong

[17:48] <rafl> Juerd: I just talked to kane. Kind of nice. We want to create website/wiki/mailinglist for 6pan. May we use perlcabal/feather for that?

[17:48] <Juerd> rafl: Until it uses substantial resources, of course, go ahead.

[17:49] <Juerd> Do note that there currently are no backups.

[17:49] <Juerd> You will want to synch with at least one other source.

[17:49] <Juerd> source/target

[17:49] <Juerd> rafl: The name of the box is feather, by the way

[17:50] <rafl> Juerd: OK. I don't want an own webserver for it. Is it OK to modify your apache config to serve 6pan.perlcabal.org/6pan.feather.perl6.nl?

[17:50] <rafl> Maybe you want to change it yourself?

[17:51] <nothingmuch> rafl: ping ingy about this stuff

[17:51] <rafl> nothingmuch: Why?

[17:51] <nothingmuch> he has freepan going

[17:51] <nothingmuch> he has code that can be shared

[17:51] <nothingmuch> and experience

[17:51] <nothingmuch> and ideas

[17:52] <nothingmuch> but more for the lower level stuff than the metadata aware stuff

[17:52] <rafl> nothingmuch: OK.

[17:52] <rafl> integral: ping

[17:52] <rafl> Err..

[17:52] <rafl> ingy: ping

[17:52] <Juerd> rafl: Actually, I prefer the global apache to be very generic and standard, with no vhosts.

[17:53] <Juerd> rafl: Setting up your own is done within a minute. What are your objections?

[17:53] <rafl> Juerd: I don't like feather.perl6.nl:86213

[17:53] <Juerd> rafl: Then request an IP

[17:53] <Juerd> We can get at most 4. This seems important enough.

[17:54] <Juerd> An IP makes other things easier too.

[17:54] <rafl> --verbose please.

[17:54] <Juerd> A box can have multiple IPs

[17:54] <Juerd> So can this.

[17:54] <ingy> rafl: pong

[17:54] <Juerd> I just have to bind 194.145.200.127

[17:54] <rafl> Juerd: Of course.

[17:54] <Juerd> And you just have to use a Listen directive

[17:54] <rafl> Juerd: Ah, OK.

[17:55] <Juerd> rafl: Want it?

[17:56] <rafl> Juerd: I fear I won't get an IP address for free, will I?

[17:56] <Juerd> You will

[17:56] <Juerd> We already got assigned this one :)

[17:57] <Juerd> I just didn't want to bind it before it got actual use

[17:57] <Juerd> (Well, not too long before, anyway)

[17:57] <rafl> Well, then: yes!

[17:57] <Juerd> OK

[17:57] <Juerd> This sponsorship is complete and thorough, don't worry

[17:57] <Juerd> The only thing we do have to worry about is bandwith

[17:57] <rafl> How much bandwidth does it require currenyly? What are the limits?

[17:58] <nothingmuch> ingy: how's Test::Base going? ;-)

[17:58] <Riwers> is there a release date for perl 6?

[17:58] <Juerd> rafl: Bound

[17:58] <ingy> nothingmuch: I use it every day

[17:58] <nothingmuch> what about applying patches to it?

[17:58] <rafl> ingy: I just talked with kane about 6pan. Maybe you're also interested in it. I think I'll setup a kwiki for it in some minutes.

[17:58] <Juerd> rafl: Bandwidith stats are unknown, because the tracking system was broken. This is our luck, because someone had been using a lot.

[17:59] <ingy> rafl: Christmas Day

[17:59] <rafl> Err.

[17:59] <ingy> Riwers: Christmas Day

[17:59] <Juerd> rafl: We should stay under 150 GB/mo, but I understand that 300 GB/mo is acceptable.

[17:59] <ingy> rafl: cool

[18:00] <rafl> Juerd: Well, that seems possible, isn't it?

[18:00] <Juerd> rafl: Certainly

[18:00] <rafl> ingy: Or maybe you want to do that? I guess you're a bit more familar with kwiki than I am..

[18:00] <Juerd> rafl: But not if someone uses feather as a temporary staging area for their home machine data while they reinstall it :)

[18:00] <Juerd> rafl: This is history, though

[18:00] <nothingmuch> ingy: did you apply that patch?

[18:00] <ingy> rafl: 6pan.kwiki.org?

[18:00] <ingy> nothingmuch: I forget

[18:00] <ingy> did I?

[18:01] <Juerd> rafl: I don't really like the name 6pan, by the way

[18:01] <rafl> ingy: I thought of 6pan.perlcabal.org

[18:01] <nothingmuch> i don't know... link to svn?

[18:01] <rafl> Juerd: Me as well. better ideas?

[18:01] <Juerd> rafl: It cannot be an identifier in Perl, and the expansion makes little sense

[18:01] <Juerd> rafl: modules.perl6.nl?

[18:01] <ingy> nothingmuch: do you have space for me in .il?

[18:01] <Juerd> rafl: The actual project's name can be anything, of course :)

[18:01] <Juerd> rafl: cpam, central perl archive of modules :)

[18:02] <Juerd> pronounced: spam

[18:02] <nothingmuch> ingy: we are planning on staying in cabins, i think

[18:02] <nothingmuch> either way I will be staying at gaal's

[18:02] <Juerd> though n-- seems a step back

[18:02] <meatwad> random: is pugs the only implementation of perl6?

[18:02] <nothingmuch> since I live 1.5 hrs away

[18:02] <Juerd> cpao

[18:02] <Juerd> (cpan++)

[18:02] <ingy> nothingmuch: what is this for?

[18:02] <meatwad> *only live, working, in the wild

[18:02] <rafl> Juerd: I would like something that's easily associated with cpan better.

[18:02] <nothingmuch> the patch?

[18:02] <ingy> I meant in general

[18:02] <nothingmuch> or the .il at YAPC?

[18:02] <nothingmuch> oh, hackathon

[18:02] <Juerd> rafl: Of course; I'm not entirely serious

[18:03] <ingy> I just meant to live

[18:03] <nothingmuch> oh

[18:03] <nothingmuch> i guess, yeah

[18:03] <nothingmuch> not at my house, we don't have the space

[18:03] <Juerd> rafl: cpan6?

[18:03] <ingy> I did not know of a hackathon/yapc

[18:03] <nothingmuch> but i could build you some shelter in our lawn

[18:03] <rafl> Juerd: cpam is better, imho. Let's use 6pan for now. It's refered to in several places already.

[18:03] <Juerd> rafl: Okay

[18:03] <nothingmuch> autrijus and larry will be there, ingy

[18:03] <meatwad> sixpan, cool

[18:03] <Juerd> rafl: I'll get you 6pan.perl6.nl, so you can move it later, independently from feather

[18:04] <rafl> sixpan is better than 6pan, indeed. Lets use that!

[18:04] <Juerd> Ah, yes!

[18:04] <Juerd> good one.

[18:04] <rafl> Juerd: sixpan, please? :-)

[18:04] <meatwad> ...?

[18:04] <Juerd> rafl: You now have sixpan.perl6.nl

[18:05] <meatwad> que esta 'sixpan.perl6.nl' ?

[18:05] <Juerd> rafl: I don't maintain perlcabal, though

[18:05] <ingy> we should just do this under freepan...

[18:06] <Juerd> rafl: I'll add this to the mail rcpthosts too

[18:06] <ingy> why limit solutions to perl6?

[18:06] <Juerd> rafl: So you can get mail on $USER@sixpan.perl6.nl

[18:06] <AlivesWrk> what did meatwad just say?

[18:06] <Juerd> ingy: I can think of several reasons, but please let's discuss that some other time

[18:07] <meatwad> brian ingerson? of yaml fame?

[18:07] <Juerd> In short: I Think freepan is a wonderful idea, but impractical

[18:07] <ingy> what things specifically are not practical?

[18:08] <ingy> yaml has no fame

[18:08] * stevan asks ingy for his autograph

[18:08] * ingy pees in a cup

[18:08] <meatwad> why put down a great idea. i've never used it but it seems autosome

[18:08] <meatwad> *awesome

[18:08] * meatwad barfs

[18:08] <ingy> thanks

[18:08] * stevan is glad ingy is living with nothingmuch and not him *yuk*

[18:08] <rafl> ingy: Because sixpan currently aims to develop a new metadata/building/packaging system based on dpkg that shall be used with perl6. It can be generalized to something that's also suitable for other things too later, though.

[18:09] <Juerd> ingy: Size and culture.

[18:09] <Juerd> ingy: Really, not now.

[18:09] <ingy> Juerd: parse error

[18:09] <Juerd> rafl: feaher now accepts mail on sixpan.perl6.nl

[18:09] <Juerd> ingy: That'll have to do then

[18:09] <stevan> rafl: some of that system needs to be embeded in the language itself IMO

[18:09] <rafl> Juerd: Thanks.

[18:09] <ingy> Juerd: I'm lost

[18:09] <Juerd> rafl: So you can use [email@hidden.address]
[18:09] <stevan> because we need to be able to load "use DBI-0.1.0-cpan:INGY"

[18:10] <Juerd> rafl: It's not a vhost, so I'm not getting generic aliases like webmaster@ and stuff :)

[18:10] <rafl> stevan: Some more details, please?

[18:10] <ingy> hi stevan 

[18:10] <stevan> hey ingy :)

[18:11] <nothingmuch> ingy: please apply the damn patch already

[18:11] <nothingmuch> otherwise if you live here i'm buying a timer for our sprinklers

[18:11] <Juerd> rafl: Acme::Intraweb

[18:11] <AlivesWrk> jihad perl!

[18:12] <AlivesWrk> rah rah ruby!!

[18:12] <ingy> nothingmuch: ok...

[18:12] <stevan> rafl:  perl6 (the executable) will need to load "use DBI-0.1.0-cpan:RAFL" from somewhere,.. and the old method of loading a module (s!::!/!) just wont really work anymore

[18:13] <Juerd> lwall++

[18:14] <rafl> stevan: Right..

[18:16] <rafl> Juerd: Could you please make the default apache not listen on 194.145.200.127?

[18:18] <wolverian> Juerd, was that lwall++ for his reply to TSa? :)

[18:22] <PerlJam> wolverian: If not, I'm lwall++ just for that

[18:22] <PerlJam> lwall++ and again

[18:22] <PerlJam> His last line sums up my response to many of TSa's posts.

[18:23] <Juerd> wolverian: I shouldn't answer that

[18:23] <Juerd> rafl: Yejs

[18:23] <Juerd> rafl: s/j//

[18:23] <Juerd> rafl: Done

[18:24] <rafl> Juerd: Thanks!

[18:24] <rafl> http://sixpan.perl6.nl/ ;-)

[18:25] <Juerd> :)

[18:26] <lisppaste3> spinclad pasted "libghc6-pugs-dev 6.2.10-4: install failed" at http://paste.lisp.org/display/12894

[18:28] <spinclad> rafl: pong  # install report up

[18:29] <rafl> spinclad: That's a bug I'm aware of. I don't know a good way to resolve it without modifying the .installed-pkg-config.

[18:29] <rafl> spinclad: Should work if /usr/local/include exists.

[18:32] <rafl> Juerd: What's the next CPAN mirror for feather?

[18:33] <Juerd> next?

[18:33] <rafl> The nearest.

[18:34] <wolverian> PerlJam, me too. :)

[18:35] <Juerd> There probably are some in the same building, or at least the same city, but I really haven't charted this yet.

[18:35] <ingy> rafl: so do you want sixpan.kwiki.org?

[18:35] <Juerd> ingy: Hm, what's the poit in having kwiki be really tremendously easy to install, if even that isn't needed? :)

[18:35] <meatwad> i just want to say... it warms my heart that i could help /w 'sixpan' even though i have no idea what you guys are talking about

[18:35] <Juerd> point

[18:36] <Juerd> meatwad: cpan for perl 6

[18:36] <meatwad> why not use cpan...?

[18:36] <meatwad> odd that cpan would be tied to perl5 now that i think about it...

[18:37] <ingy> Juerd: for the 3rd time today I have no idea what point you are making

[18:37] <integral> *blink*

[18:37] <Juerd> ingy: If you install kwiki for others, there is little point left in making kwiki so easy to install :)

[18:37] <Juerd> ingy: Were the other two both related to freepan?

[18:38] <obra> ingy!

[18:38] <theorbtwo> meatwad: 1: While we're at it, we thought we could solve some other problems.

[18:38] <theorbtwo> 2: 6pan really wants to have some extra functionality to work well with perl6, for example thinking that foo's Bar::Baz is a different module to Quxx's Bar::Baz.

[18:39] <ingy> Juerd: I'm not sure about the other two, since I could not contextually parse them, and you refused to clarify. I am offering to *host* rafl's wiki which has little to do with installation. Or maybe that was just a troll.

[18:39] <ingy> hi obra!

[18:39] <ingy> long time no obra

[18:40] <obra> indeed. longtime no ingy

[18:40] <mrborisguy> is there any plans to have a "c*an" that holds more than just perl6 modules?  a "c-parrot-an"?

[18:40] <Juerd> ingy: If I refused, it was re freepan, because I don't feel like discussing such things today

[18:40] <Juerd> ingy: And yes, the kwiki stuff wasn't meant serious at all, hence the ":)"s

[18:42] <mrborisguy> so if there's some genious ruby or python programmer, I can still use that person's modules?

[18:42] <mrborisguy> and can get them from the central parrot repository?

[18:43] <theorbtwo> mrborisguy: Well, yes, that'd be nice, but such a thing would have to deal with lots of cultures.

[18:43] <PerlJam> mrborisguy: any language that targets parrot will have relatively easy access to the routines written in any other language that targets parrot.

[18:43] <PerlJam> for some definition of "easy"

[18:43] <theorbtwo> Us perl people can't decide on how a distribution should be put together -- there's ExtUtils::MakeMaker, and Module::Build, and ...

[18:44] <theorbtwo> If we start throwing in more languages, the problem keeps getting harder.

[18:44] <theorbtwo> So yes, it'd be very nice.

[18:44] <meatwad> theorbtwo: why would people name modules the same

[18:44] <integral> need a sort of TAP for building things...

[18:44] <mrborisguy> theorbtwo: ah yes, that is a good point

[18:44] <meatwad> altho it does seem like a whoever gets there first kinda race

[18:44] <theorbtwo> meatwad: It's speced behavior that perl6 can deal with it, but I also hope it isn't common.

[18:45] <theorbtwo> (And IIRC Larry indicated recently he also hopes it doesn't happen much.)

[18:46] <meatwad> to juggle two modules of the same name...?

[18:47] <meatwad> in my limited view of the universe, just sounds like another namespace... Meatwad::Awesome::Module vs TheOrbTwo::Awesome::Module

[18:48] <theorbtwo> http://dev.perl.org/perl6/doc/design/syn/S11.html

[18:49] <theorbtwo> Under "Versioning".

[18:49] <theorbtwo> use Awesome::Module--cpan:JMASTROS;

[18:49] <meatwad> domo orubo san

[18:50] <theorbtwo> Oh, sorry, use Awesome::Module-(any)-cpan:JMASTROS if I didn't want to specify the version.

[18:50] <theorbtwo> "domo orubo san"?

[18:51] <meatwad> "thx mr the orb"

[18:51] <theorbtwo> Ah.

[18:51] <meatwad> sounds like a very crazy yet flexible solution... (not much experience/exposure to module development)

[18:51] <meatwad> faux japanese.

[18:52] * meatwad is a fraud

[18:53] <theorbtwo> Larry's like that.

[18:53] <theorbtwo> Crazy, yet flexable.

[18:53] <theorbtwo> I suspect his japanese is better then yours, though.

[18:53] <meatwad> i bet. i really admire the whole linguistic angle to perl

[18:54] <meatwad> i don't know that many other languages have that

[18:54] <meatwad> other than matz being a perl fan

[18:54] <meatwad> i'm sorry i don't know anything crazy about perl6 specifically

[18:55] <meatwad> other than that ther'es this thing called pugs

[18:55] <meatwad> and that i should look forward to any() and all()

[18:55] <wolverian> and, for an example, static type inferencing. :)

[18:56] * meatwad is lost and hungry

[18:56] * meatwad goes to lunch to meditate

[18:56] <Juerd> wolverian: Accept, please, that not everyone thinks it's a good idea.

[18:57] <wolverian> Juerd, oh, of course I do. 

[18:57] <Juerd> What is a very good thing to us, may be very frightening to others

[18:57] <wolverian> Juerd, I was just giving an example, not necessarily what I approve of.

[18:57] <Juerd> The word optional isn't that.

[19:05] <spinclad> rafl: with /usr/local/include (and lib) in place, the install succeeds!

[19:05] <rafl> spinclad: OK. I'll try to convince Cabal not to include that directory in the next release.

[19:06] * spinclad cheers

[19:09] <gaal> hey. apart from debian and gentoo, what other distros carry pugs?

[19:10] <obra>  http://www.freshports.org/lang/pugs/

[19:11] <gaal> thanks. is that good just for FreeBSD or perhaps other BSDs as well?

[19:13] <gaal> I'm not all that familiar with BSD; do users just cvs up and pkg_add it?

[19:14] <rafl> Juerd: feather doesn't listen on perlcabal.org anymore. I think that breaks stuff.

[19:15] <rafl> Juerd: No, apache seems to be down.

[19:15] <rafl> I started it. Works again.

[19:18] <Juerd> Oh, hm

[19:18] <Juerd> Perhaps it doesn't support hostname:port syntax

[19:19] <Juerd> No, it must support it, otherwise it would not be running now

[19:19] <Juerd> I have no idea why it was down.

[19:23] * Juerd just found a very interesting memory leak in linux

[19:24] <Juerd> I could read chunks of memory through /dev/sdb

[19:24] <Juerd> Which was supposed to be a USB mass storage device

[19:24] <Juerd> It had a broken drive in it, that I admit, and I didn't expect things to work.

[19:24] <Juerd> But I was amazed I could read it without error

[19:24] <Juerd> And later I realized I was looking at RAM, not the contents of the disk

[19:24] <Juerd> But the LED blinked as I read from the drive

[19:25] <theorbtwo> Umm... funky.

[19:25] <Juerd> And I could read exactly as much as the drive was large. The data repeated.

[19:25] <Juerd> Now to find a broken drive to reproduce the phenomenon.

[19:25] <spinclad> so the driver claimed, or thought, that the drive had actually filled its buffer?

[19:26] <Juerd> spinclad: I don't know about buffers

[19:26] <Juerd> It claimed that these parts of RAM were on the drive.

[19:26] <Juerd> Read with cat, dd, less and hexdump

[19:28] <spinclad> .oO ( reason for the kernel to clear buffers before they're read into? )

[19:29] <spinclad> .oO ( the risks of trusting your DMA )

[19:48] <gaal> this won't work here, but try it at home:

[19:48] <gaal> ?eval use perl5:Carp; Carp.confess("ouch")

[19:48] <evalbot_7744> pugs: *** No compatible subroutine found: "&require_perl5"     at Prelude.pm line 61, column 30-59 

[19:48] <gaal> at home what you'll see is a "Carpouch" confession

[19:48] <gaal> because this was called as a (class) method.

[19:49] <gaal> that's fair enough, I guess; but Carp::confess doesn't work.

[19:49] <gaal> (No compatible subroutine found: "&Carp::confess")

[19:49] <gaal> So there's no way to call fully qualified functions into Perl 5 ?

[19:53] <gaal> rafl: pugs -e, pugs interactive, use perl5, eval :lang<perl5> all work.

[19:54] <gaal> so did upgrade from -1 .debs.

[19:54] <gaal> remind me, what should i test with the libghc6-pugs-dev package?

[19:55] <gaal> btw, i could not test upgrade from that one because -1 used to depend on a version of GHC I no longer have.

[20:05] <rafl> gaal: Just that it installs fine and ghc-pkg describe Pugs gives some output.

[20:08] <gaal> does.

[20:08] <gaal> :-)

[20:09] <rafl> Great.

[20:09] <rafl> Thank you.

[20:09] <gaal> hmm. the pugs deb probably shouldn't include perl6.vim though, should it?

[20:10] <rafl> Where should it go then?

[20:10] <gaal> -doc? Not sure.

[20:11] <theorbtwo> I don't really see any reason it shouldn't.

[20:11] <gaal> hack and run.pod are in /usr/share/perl5/pugs so that perldoc would find them?

[20:12] <gaal> theorbtwo: rafl went into some trouble to making only the minimum executable stuff go in the basic pugs package. why shoudl something that's quite optional and that is for an editor some people don't even have installed be included there?

[20:13] <theorbtwo> It's small, and there's little reason for a sepperate package for every tiny little file.

[20:13] <gaal> hmmm, also, in pugs-modules, i get things like

[20:13] <gaal> /usr/share/perl6/5.8/WTemplate.pm

[20:14] <Juerd> theorbtwo: Are you new to Debian? :)

[20:14] <gaal> ie everything not put in perl5 is put in perl6/5.8

[20:14] <rafl> gaal: agreed. But I don't know where it should go then.

[20:14] <Juerd> rafl: In vim.

[20:14] <Juerd> rafl: When the time comes, Bram will surely include it.

[20:14] * rafl mails Bram

[20:15] <gaal> rafl++

[20:15] <Juerd> Indeed, rafl++

[20:17] <gaal> rafl: so the 5.8 stuff, it's wrong, right? :/

[20:18] <rafl> gaal: What's wrong with it?

[20:21] <gaal> why is there a 5.8 there?

[20:22] <gaal> this isn't pugs 5.8

[20:25] <rafl> perl6 pre 6.0.0.0.0

[20:26] <eric256_> mrborisguy - catalog_tests.pl now doesn't use TreeBuilder for tests... ;)

[20:26] <rafl> So the real perl6 isn't confused if there's 6.2.10 installed.

[20:27] <Juerd> 5.8 can be confused with Perl 5

[20:27] <Juerd> 6.anything can be confused with Perl 6

[20:27] <rashakil> find an integer between 5 and 6, and you're set.

[20:28] <Juerd> I suggest 1006.x or 1.x

[20:28] <integral> 0.something?

[20:28] <integral> 1.x will be confused with perl1 or punie

[20:28] <Juerd> 1006 will not be confused.

[20:28] <integral> but is > 6

[20:28] <Juerd> And it still has the real version number somewhere

[20:28] <Juerd> integral: This isn't Perl, it's Pugs.

[20:28] <Juerd> At this point, I don't think we should consider any of this Perl 6.

[20:29] <rafl> Juerd: Why? It is in /usr/lib/perl6? that won't confuse perl5.

[20:29] <Juerd> Including the modules, because syntax is still changing

[20:29] <integral> Juerd: then why not use pugs' version number but say prefixed with "pugs-"

[20:29] <Juerd> rafl: There are Perl 5 Perl6 modules.

[20:29] <Juerd> rafl: It's confusing enough, IMO

[20:29] <integral> /usr/lib/perl6/pugs-...;  if all perl6 interpreters do that, they can't clash either

[20:29] <Juerd> integral: Modules shouldn't be interpreter specific

[20:30] <integral> hmm?  what about modules with inline haskell.

[20:30] <svnbot6> r7745 | eric256++ | catalog_tests.pl - fixed so it doesn't use TreeBuilder for the test files, now we can skin them better with templates, this will let use highlight borken tests easier

[20:30] <rafl> Juerd: Yes, but they go into /usr/lib/perl5/Perl6 not /usr/lib/perl6/5.8/

[20:30] <integral> you have inline haskell for pugs,  inline parrot for official perl6, inline Fortran for perl6trans

[20:31] <gaal> inline Z80A for mad people...

[20:31] <gaal> can version numbers be negative? :)

[20:32] <gaal> ...or imaginary?

[20:32] <Juerd> rafl: If you don't see the confusing bit about this, it's probably me.

[20:33] <gaal> fwiw, I thought some automatic tool truncated it from my p5 verison string, which is of course why I thought it was wrong.

[20:36] <gaal> maybe this is wacky, but how about 5.99.6.28.10?

[20:36] <gaal> okay, bad idea :)

[20:36] <Juerd> .99s are awful

[20:36] <gaal> that looks like an SNMP oid anyway

[20:36] <autrijus> please don't do that... I learned from PAR days that .99 is Very Bad Idea

[20:36] <gaal> hello autrijus :)

[20:36] <autrijus> greetings lambdacamels :)

[20:37] <gaal> PAR got to .99? I thought it was around the 80ies now?

[20:37] <clkao> greetings, Tang-sama

[20:37] <autrijus> gaal: no, I used to release 0.72_97

[20:37] <autrijus> as a "rc-3"

[20:37] <autrijus> then _98, _99, then 0.73

[20:37] <autrijus> "rc -3"

[20:37] <autrijus> not "rc3"

[20:38] <gaal> ah yes

[20:38] <vigen> what is PAR?

[20:38] <gaal> so version numbers can in fact be negative.

[20:38] <gaal> vigen: a Very Cool Module.

[20:38] <autrijus> vigen: it does that JAR does to Java, and comes with a "pp" that turns perl programs into standalone executables

[20:38] <gaal> vigen: par.perl.org; to Perl what JAR is to Java.

[20:39] <autrijus> par.perl.org is currently offline again :/

[20:39] <autrijus> autrijus.org somehow went down again

[20:39] <vigen> thnx

[20:39] <Juerd> vigen: PAR is the most rocking and equally scary yet useful piece of Perl 5.

[20:39] <autrijus> vigen: it was one of my more popular modules during my hyperdistraction days of 100+ projects

[20:40] <autrijus> sadly, since I've then passed into hyperfocus days, it's now maintained by users -- I hand metacommitter bits to practically everyone and do a release when asked

[20:41] <Juerd> autrijus: That is sad, but I do think the choice consciously or not) was better than we could have hoped for

[20:41] <meatwad> perlcc != par?

[20:41] * meatwad lacks understanding

[20:41] <autrijus> meatwad: no, one (mostly) breaks, and one (mostly) works

[20:42] <autrijus> Juerd: true

[20:42] <autrijus> clkao: greetings :)

[20:42] <clkao> how's your half-baked tailor support?

[20:42] <autrijus> clkao: totally swapped out

[20:42] <clkao> any snapshot?

[20:42] <autrijus> clkao: but I discovered ffsdrv

[20:43] <autrijus> so strangely I'm in win32 now to work on $work

[20:43] <clkao> wtf?

[20:43] <clkao> ah. evil

[20:43] <gaal> hmm, both clkao and autrijus online at once. this is the time to repeat the p5emb question:

[20:43] <r0nny_> yo

[20:43] <gaal> how do i call a fully qualified p5 function? eg. Carp::confess

[20:44] <robkinyon> gaal: __PERL5__::Carp::confess(), but only after doing the hokey-pokey

[20:44] <meatwad> Carp::confess($sins); # le cheim

[20:44] <gaal> (Carp.confess is wrong, it's not a class method)

[20:44] <autrijus> gaal: Carp.can('confess').()

[20:44] <gaal> meatwad: that doesn't work in pugs though :)

[20:44] <gaal> autrijus: lol

[20:44] <autrijus> or even

[20:45] <autrijus> our &confess := Carp.can('confess')

[20:45] <gaal> yes

[20:45] <gaal> of course, that breaks runtimely-@ISA-modifying classes. *duck*

[20:46] <autrijus> yeah.

[20:46] <gaal> robkinyon: how does that work?

[20:46] <robkinyon> gaal: LOL

[20:46] <autrijus> embed only goes that far

[20:47] <autrijus> retargetting is the future

[20:47] <autrijus> (if not that p5 and p6 are so extremely dynamic, embedding would've been fine.)

[20:47] <gaal> yeah. btw I'm writing an article on Perl 6 for TPR.

[20:47] <autrijus> I saw the call for article

[20:48] <autrijus> gaal++ # volunteer

[20:48] <Juerd> gaal++  # doing something HARD

[20:48] <gaal> autrijus: thanks. Juerd: don't say that :)

[20:48] * autrijus watches the _other_ therapy session going on in dan's blog

[20:48] <Juerd> Exciting and informing people without overwhelming them is not exactly easy, gaal

[20:48] <Juerd> autrijus: url?

[20:49] <autrijus> Juerd: http://www.sidhe.org/~dan/blog/archives/000435.html#comments

[20:49] <Juerd> autrijus: danke

[20:49] <autrijus> np

[20:49] <gaal> Juerd: yeah, but I practice that on occasion. Already gave a couple of talks in my local pm group.

[20:52] <Juerd> autrijus: Oh, wow, many more comments since I last read

[20:55] <eric256_> alot of negative people in that thread. /me loves when basicaly anoymouse people bash volunteer leaders. ;) its not like this is a paying gig for anyone...is it?

[20:56] <Juerd> Dan got a grant for his work in 2002

[20:57] <eric256_> i've never associated the word 'grant' with enough money to actualy not have a job...or is that the case here?

[20:57] <autrijus> and Leo/Chip is under grant too

[20:57] <autrijus> eric256_: the grant sum is supposed to be their full time job.

[20:57] <eric256_> cool

[20:57] <Juerd> eric256_: Have you ever donated?

[20:58] <eric256_> nope

[20:58] <integral> hmm, are allison and pmichaud the only people working on this compiler tools thing?

[20:58] <Juerd> eric256_: Please consider doing so

[20:59] <Juerd> eric256_: https://donate.perlfoundation.org/index.pl?node=Fund+Drive+Details&selfund=2

[20:59] <autrijus> integral: currently yes, though luqui helps with L::AG too

[20:59] <eric256_> certainly wil when money comes avialable...just bought a house. still paying off bills from when we lived in CA...way to expensive there ;)

[20:59] <integral> autrijus: ah! that's a parrot version of L::AG I assume?

[20:59] <autrijus> integral: luqui started with p6 version

[21:00] <integral> I can't figure out though if they're actually bothering to commit any of the stuff publically in the repos

[21:00] <eric256_> 90k in 12 months.../me begins to expect more decisions from our fearless leaders.  are any @larry funded?

[21:00] <autrijus> I think allison is working on a parrot port yes

[21:00] <autrijus> integral: that is annoying

[21:00] <clkao> autrijus: so what's new? i thought you have no more .tw work!

[21:00] <autrijus> eric256_: $Larry was funded, but is no longer

[21:00] <integral> I'm not sure what I could be doing to help with any of these bits without the current code :-/

[21:01] <autrijus> integral: the compiler tool roadmap in particular I really'd like to see committed to public

[21:01] <autrijus> integral: exactly my problem

[21:01] <autrijus> so. :/

[21:01] <eric256_> i must admit that knowing people were getting paid and we're still 5 years into this with no real end near is more aggrevating than thinking the whole thing is volunteer.

[21:02] <Juerd> eric256_: Do you know how long it took to get Perl 5 where it is now?

[21:02] <autrijus> eric256_: hence, people needs therapy :)

[21:03] <Juerd> eric256_: If not, consult perlhist

[21:03] * Khisanth kicks DNS

[21:03] <autrijus> unrealistic expectation bad, having fun good

[21:03] <clkao> what's the big deal?

[21:03] <Juerd> autrijus++

[21:03] <Juerd> clkao: impatience, summarized

[21:03] <autrijus> _encouraging_ unrealistic expectation also bad, so it goes bothways

[21:03] * clkao goes bathways

[21:04] <Khisanth> hrm well CPAN has been around for 10 years so at least 11 for Perl? :)

[21:04] <Khisanth> err perl

[21:04] <Juerd> eric256_: Seen the answer yet?

[21:05] <Juerd> eric256_: Anyway, all that is being done again, and it has to be GOOD too this time

[21:05] <Juerd> eric256_: And there's a lot that Perl 6 will support that Perl 5 didn't.

[21:05] <Juerd> eric256_: Also, design took a long time and is still going on. This is a phase that was mostly skipped for Perl 1..5.

[21:06] <Khisanth> is it just me or does 5.10 seem to be acquiring some stuff from perl6? (was reading the perltodo last night)

[21:07] <autrijus> Khisanth: it is conscious, yes

[21:07] <eric256_> juerd. i understand all that, and i'm not unhappy with where things are (though they seem currently stalled)...but where is autrijus's grant for pugs? or any other developer on pugs? i dunno. volunteer++, paid++, mixing (paid and volunteer)+-+-... 

[21:07] <autrijus> eric256_: my grant is given by people who generously provide me shelter and food.

[21:07] <eric256_> autrijus++ ;)

[21:07] <autrijus> no, seriously :)

[21:08] * autrijus is very grateful.

[21:08] <autrijus> and occasionally, a company shows up and says they can pay me airfare to travel to some place to hack with someone

[21:08] <autrijus> eg. with damian at OSDC

[21:08] <autrijus> that too I'm grateful.

[21:09] <autrijus> and in each of those instance I am able to repay with concrete showing-up, discussion and work

[21:09] <Juerd> eric256_: Grants begin with people asking for them, in general

[21:09] <autrijus> so I feel less guilty

[21:09] <autrijus> certainly less so than my cpan signature or i18n grants of tpf

[21:09] <Juerd> eric256_: There are some exceptions, but as I understand, not many

[21:09] <autrijus> which I've been feeling uneasy for a long time

[21:09] <autrijus> as in both cases my work, though performed, was not completely adopted to upstream

[21:10] <autrijus> so I somehow feel cheated people of their donation money

[21:10] <autrijus> though I can't really help much

[21:10] <autrijus> this current travel-around way is much better :)

[21:10] <Juerd> autrijus: Still, though, all this time you invest in Pugs - you must be really rich to keep on living...

[21:10] <eric256_> tpf seems to have serious cash sitting there ungranted.. autrijus jsut consider them pre-payment for pugs and your debt to tpf evened ;) lol

[21:10] <autrijus> Juerd: on the contrary I'm flat broke :)

[21:10] <autrijus> Juerd: though not without sources for short term gigs

[21:11] <Juerd> autrijus: Exactly... Wouldn't a grant fix this?

[21:11] <autrijus> eric256_: heh, lol

[21:11] <autrijus> Juerd: Paul Erdos never kept money either :) though yes, a grant would fix this, but I'm not sure I am of the getting-grant-money mindset now

[21:12] <autrijus> I'm more of a getting-stable-places-to-hack-without-distraction mindset

[21:12] <Juerd> autrijus: You obviously aren't :) I think many people would love to see their money go to this exceptionally hard working madman :)

[21:12] <Jooon> autrijus: so, whose couch are you planning to crash in february?

[21:12] <autrijus> Jooon: gaal's, incidentally

[21:13] <Juerd> autrijus: Still, though, if the current way of doing things suffices, who are we to complain :)

[21:13] <autrijus> after that I'm not sure... maybe leo's. maybe (gasp) MSR's

[21:13] <autrijus> Juerd: :)

[21:13] <eric256_> autrijus....i'd feel more comfortable with you getting my donation than almost every other grant listed for the last 5 years... i do wonder with 90k in donations in the last 12 months and only 1 1k grant...where does this money go?  sorry i know this isn't realy the right forum for this

[21:13] <rafl> http://sixpan.perl6.nl/sixpan/index.cgi

[21:14] <autrijus> eric256_: no, there's no right forum anyway :p

[21:14] <rafl> Commends and ideas and especially content is welcome!

[21:14] <autrijus> ooh, rafl++

[21:14] <autrijus> is kane aware of this?

[21:15] <Juerd> eric256_: There are other things than Perl 6 related grants too, that cost money

[21:15] <rafl> autrijus: Yes, I'm talking to hin for about 5 hours now..

[21:15] <autrijus> rafl: wonderful

[21:15] <Juerd> eric256_: I believe there are some unpublished grants for CPAN modules and stuff like that

[21:15] <autrijus> oh and one for PPI

[21:15] <Juerd> I'm not sure, though.

[21:15] <autrijus> and one for pVoice, etc

[21:16] <autrijus> not sure which else, though the tax return is now published

[21:16] <eric256_> autrijus http://www.perlfoundation.org/gc/grants/2005.html

[21:16] <autrijus> so at least there's accountability

[21:16] <gaal> autrijus: you'd be happy to hear that i'm buying an extra futon, which will probably be more comfortable than the hammock (though the latter is proven to attract my cat)

[21:16] <autrijus> gaal: *happy*

[21:17] <gaal> :-)

[21:19] <eric256_> 2003 tax return shows 172k in revenue,- 145k in services but only 90k in grants. leaving 55k that just wandered off? lol.  plus the published grants don't total anywhere near that. /me decided not to look much harder for now.

[21:19] <eric256_> ahhh...50k in confrences...i assum tpf funds YPC's?

[21:20] <autrijus> yes, tpf funds YAS which funds YAPCs; also perlmonks

[21:21] <eric256_> yea the tax return is actualy for YAS.  ahh and the return seems to detail grants.../me starts to feel mildly better...been around accountants too long and now i'm paranoid of everyone....everyone is out to cheat you!!! ;)

[21:21] <Juerd> I donated in a somewhat weird way this time, with feather

[21:21] <Juerd> It has replaced my annual $100 donation

[21:21] <eric256_> feather++ ++ ++ ;) /me uses it everyday

[21:21] <autrijus> Juerd: ditto for me and pugs

[21:21] <Juerd> I think Perl 6 development benefits much more per dollar spent, this way

[21:22] <rafl> News for the Debian people: pugs_6.2.10-4_i386.changes ACCEPTED

[21:22] <autrijus> rafl: ooh

[21:22] <autrijus> rafl++

[21:22] <Juerd> rafl++ debian++

[21:22] <autrijus> (committment to the Right Thing)++

[21:22] <Juerd> commitment to sanity ;)

[21:23] <gaal> woohooo rafl++ :)

[21:23] <gaal> debian++ # indeed

[21:23] <eric256_> public tax return ++.. /me's fears are someone reduced.

[21:23] <autrijus> Juerd: mm, that reminds me of http://en.wikipedia.org/wiki/User:Autrijus

[21:23] <rafl> Yes, Debian will probably provide the package format for sixpan..

[21:23] <Juerd> autrijus: :)

[21:24] <autrijus> I guess that no longer applies now...

[21:24] <Juerd> rafl: Doesn't that fix paths too much?

[21:24] * autrijus removes the insanity appeal

[21:24] <rafl> Juerd: No.

[21:24] <Juerd> The sanity of this person is known to vary with time ;)

[21:25] <autrijus> :D

[21:25] <rafl> Juerd: You can use dpkg --root for example.

[21:25] <Juerd> rafl: OK

[21:25] <Juerd> oh, fsck

[21:25] <Juerd> 23:30

[21:25] <Juerd> bye.

[21:26] <rafl> Bye Juerd 

[21:28] <autrijus> Juerd: see ya

[21:30] <autrijus> integral: good post.

[21:30] <integral> heh, that obvious was it? ;-)

[21:30] <autrijus> :D

[21:50] <rafl> That's the name of that that WYSIWYG plugin on kwiki.org?

[21:58] <r0nny_> ping?

[21:58] <r0nny_> i got a problem - i wrote "class Foo\n{ <some members> }" and it doesnt like the initial {

[21:59] <gaal> perlbot nopaste

[21:59] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[21:59] <gaal> can you put your code there?

[21:59] <r0nny_> ok

[22:00] <eric256_> r0nny_ generaly that error has little to do with the {. just seems to be where class errors get anchored

[22:00] <r0nny_> btw - acan someone teach the bot to paste the link for the actual channel ?

[22:00] <r0nny_> oh - it wont like the { if there is a missing ; after a member

[22:01] <gaal> hmm, the url for that is http://sial.org/pbot/perl6 but i don't know how to tell the bot that. :)

[22:01] <Juerd> autrijus: group therapy. haha! :)

[22:01] <gaal> r0nny_: unless that memeber happens to be the last expression in the block ;-)

[22:02] <r0nny_> is there a short for $self ?

[22:03] <gaal> rafl: http://www.wikiwyg.net/about/ ?

[22:04] <Juerd> r0nny_: Yep, self.

[22:04] <gaal> r0nny_: there's some undecidedness about this. you can name an invocant explicitly

[22:04] <rafl> gaal: No Kwiki plugin for that?

[22:04] <eric256_> in your method sig you can make $self anything you want.

[22:04] <Juerd> gaal: Current decision is self.

[22:04] <gaal> Juerd: oh right, i forgot

[22:04] <Juerd> eric256_: As long as it's a normal scalar :)

[22:04] <r0nny_> then i will use the "normal" one

[22:04] <gaal> rafl: kwiki.org uses wikiwyg :)

[22:04] <r0nny_> my code is supposed to be usable

[22:04] <eric256_> self aitn much shorter than $self....juerd: yes of course. probably should have mentioned that

[22:05] <Juerd> r0nny_: Not fun? :)

[22:05] <r0nny_> Juerd: it should be clean

[22:05] <Juerd> r0nny_: Not fun? :)

[22:05] <r0nny_> its supposed to be developed by other peoples

[22:05] <r0nny_> so i will be perfectly fine, if i work as "fun" killer

[22:06] <r0nny_> btw can i do "has rw Hash $.foo" ??

[22:10] <Juerd> You can try, but I don't think you can.

[22:11] <rafl> Juerd: Thought you wanted to go to bed? :-)

[22:11] <Juerd> has Hash $.foo is rw;

[22:11] <Juerd> rafl: All day. Yeah.

[22:11] <r0nny_> allready found out :/

[22:11] <Juerd> r0nny_: I advise: has %.foo is rw, though

[22:11] <rafl> Juerd: If you're not going to you can comment on http://sixpan.perl6.nl/sixpan/index.cgi?BrainStorming :-)

[22:11] <Juerd> rafl: I was actually going home.

[22:12] <Juerd> rafl: Sorry, I'm a bit busy in some personal conversation at this moment, and probably will be for a while, and then will go to bed

[22:12] <Juerd> Tomorrow I will read it

[22:12] <rafl> Of course, thanks.

[22:16] <putter> stevan: ping?

[22:17] <putter> hi folks.

[22:17] <gaal> hey putter :)

[22:19] <gaal> zzZZZ &

[22:19] <putter> bye gaal &

[22:20] * autrijus waves

[22:24] <putter> stevan: ah, never mind, found it.

[22:30] <r0nny_> yo

[22:30] <r0nny_> how to access member vars ?

[22:30] <r0nny_> tried $instance.foo, but wont work

[22:31] <putter> ?eval 3

[22:31] <evalbot_7745> 3 

[22:32] <putter> ?eval class C{has $.v} my $o = C.new; $o.v = 3; $o.v

[22:32] <evalbot_7745> \3 

[22:32] <putter> how not work?

[22:33] <r0nny_> hmm

[22:33] <putter> there are some issues, eg

[22:34] * r0nny_ burns never use "my $f is <class>"

[22:34] <r0nny_> +into his hed

[22:34] <putter> ?eval  class C{has $.v} sub f() { my $o = C.new; $o.v = 3; $o }   f().o

[22:34] <evalbot_7745> Error: No compatible subroutine found: "&o" 

[22:34] <putter> ?eval  class C{has $.v} sub f() { my $o = C.new; $o.v = 3; $o }   f().v

[22:34] <evalbot_7745> Error: No compatible subroutine found: "&v" 

[22:42] <putter> you can also look through a smoke and t/oo/attributes/*, eg t/oo/attributes/instance.t, to see what's working.  smokes available at http://m19s28.vlinux.de/cgi-bin/pugs-smokeserv.pl

[22:51] <rafl> Hm.. why are all 6.2.10 release smoke from me?

[22:56] <putter> perhaps smokes are too compute intensive for many people, and its not a high profile activity, so only a few folks do it.  so if they happen not to... your contribution becomes singular. ;)

[23:11] <r0nny_> will it hurt, to have perl5 + ithreads integrated in pugs ?

[23:12] <r0nny_> anyone ?

[23:14] <putter> sorry, ?

[23:15] <r0nny_> i have perl5 with threads enabled, and want to integrate the libs into pugs

[23:15] <putter> oops, I meant "sorry, I don't know".

[23:16] <r0nny_> oh ;P

[23:19] <putter> my v5.8.5 is -Duseithreads and it works fine linked with pugs under  x86_64 FC3.  though I've not actually used the tread ops.  and that may not be what your asking?

[23:19] <r0nny_> so it will not die in normal operations

[23:19] <r0nny_> hmm

[23:20] <r0nny_> thats all that counts atm

[23:22] <putter> :)

[23:22] <r0nny_> latter i will try if threads kill it

[23:22] <r0nny_> but atm i dont have to care :)

[23:22] <r0nny_> make smoke

[23:24] <r0nny_> btw - i saw a yaml thing while compiling - how to use ?

[23:25] <putter> has anyone heard discussion of a "NonProxyObject"?  Ie, Ref, Scalar, and Proxy which delegate heavily are still Objects, but often/usually when you want to add a method to Object, you want them to still deletate it.

[23:26] <putter> re yaml, there's an eval($string,:lang<yaml>), though I've never used it.

[23:27] <putter> ?eval eval("3")

[23:27] <r0nny_> anyone - is there a interface for the yaml stuff in pugs ?

[23:27] <evalbot_7745> 3 

[23:27] <putter> ?eval eval("name: ingy", :lang<yaml>)

[23:27] <evalbot_7745> {("name" => "ingy"),} 

[23:28] <r0nny_> sweet

[23:28] <r0nny_> another interface ?

[23:28] <putter> ?eval eval("name: ingy\ncolors:\n - 5\n - 7", :lang<yaml>)

[23:28] <evalbot_7745> {("colors" => ["5", "7"]), ("name" => "ingy")} 

[23:28] <putter> not that I know of.

[23:28] <r0nny_> can i put files in ?

[23:30] <r0nny_> well - its 0130 here - time to sleep

[23:31] <putter> put files in...?  oh, into eval?  you can slurp() them.  I don't think we have an eval_file builtin.

[23:47] <Juerd> http://perlmonks.org/?node_id=503167  # exactly what I hoped for

[23:47] <Juerd> It works >:)

[23:48] <Juerd> Schema: answer question very thoroughly, end message with normal signature, sneak in a list of what Perl 6 improves in the topic at hand

[23:48] <Juerd> Okay, now I'm off to bed

[23:48] <Juerd> Bye

[23:49] <putter> bye

[23:49] <putter> :) Juerd++

[23:54] <putter> the line   Sorting by something only requires specifying that something: sort { .key }, %hash, sort { .value }, %hash.  might have been slightly clearer as  sort { .key }, %hash; sort { .value }, %hash.  nifty.

[23:59] <putter> stevan: is there any way in the mm to block inheritance?  ie, "my parent has method foo but I don't".  ideally as "my parent defines various methods, but I don't want any which are defined in role X".  thoughts?

