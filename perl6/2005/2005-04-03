[00:00] <kungfuftr> moo?

[00:03] <shapr> bark bark!

[00:06] * kungfuftr apologizes

[00:06] <kungfuftr> been away, auto-smoke has been broken for the day

[00:07] <kungfuftr> conflicts in run-smoke.pl, etc

[00:08] <kungfuftr> is there any way to tell svn not to merge stuff if it's going to cause a conflict?

[00:24] <kungfuftr> hhhmmm... everyone dead? or is it just me?

[00:25] <MatthewZ> not dead... just don't know enough Subversion to answer your question :)

[00:25] <shapr> same here

[00:26] <shapr> I use darcs.

[00:26] <shapr> though I'm doing svn for pugs.

[00:33] <kungfuftr> ah, is it just me or is pugs not currently compiling (or linking perhaps)

[00:34] <MatthewZ> I'm building a fresh checkout right now...

[00:35] <MatthewZ> I'll let you know if it finishes (though it could take awhile; this is a 500 MHz Celeron)

[00:35] <kungfuftr> =0)

[00:45] <kungfuftr> ah, seems to build now... very very odd

[00:50] <kungfuftr> looks like the smoke sandbox got into some odd state

[00:59] <putter> well, that's 3 p5/t tests converted anyway.  good night.

[01:13] <drbean> before merging, svk diff might do the job to see if there's conflict, wouldn't it?

[01:14] <kungfuftr> drbean: yar, don't see an automated way though

[01:15] <kungfuftr> yay... smoke tests are working again

[01:31] <Darren_Duncan> fyi, I just committed the new SQL::Routine SYNOPSIS - feedback is welcomed

[01:31] <jabbot> pugs - 1452 - SQL::Routine resync with 5v0.58-to-be : 

[01:31] <Darren_Duncan> ... but I will be away from comp for next 30 mins or so ...

[01:32] <Darren_Duncan> in particular, stevan , your feedback is appreciated since you indirectly influenced it

[02:01] <stevan> Darren_Duncan: looking right now

[02:08] <stevan> Darren_Duncan: I would recommend showing the XML string it prints as well so people can compare it with the code itself

[02:42] <Alias_> What's the equivalent of scalar(@list) under Perl 6

[02:43] <Alias_> @list.something...

[02:47] * Alias_ files a bug against Perl6::Bible (evil chuckle)

[02:47] <stevan> Alias_: yeah +@list

[02:47] <stevan> force numeric context :)

[02:48] <Alias_> +@list?

[02:48] <Alias_> ew

[02:48] <Alias_> Is there a method?

[02:48] <stevan> LOL

[02:48] <stevan> is there anything you do like about perl6 ??

[02:48] <Alias_> junctions!

[02:48] <Alias_> Implicit Parrelelisation!

[02:48] <stevan> Junctions rule :)

[02:49] <Alias_> I _love_ the fact that if they deliver on promises, Perl should kick ass on the dual-core boxes that will be common by the time of a 1.0 release

[02:49] <Alias_> I guess I'm one of the people heavily on the business side of the fence

[02:50] <Alias_> So I'm pro-simplicity and pro-psychology

[02:50] <Alias_> And extremely pro-CPAN :)

[02:50] <Alias_> and junctions for the most part do what people expect

[02:51] <stevan> Alias_: I agree with you on many levels, but I am also pro-stronger code

[02:51] <stevan> and I think all the explict stuff in perl6 will make that happen

[02:51] <stevan> BTW - looks like no method for length

[02:51] <stevan> http://www.rodadams.net/Perl/S29.html#perl6::arrays

[02:51] <Alias_> I think it's internally contradictory

[02:51] <stevan> at least not according to that

[02:51] <stevan> what is internally contradictory?

[02:52] <Alias_> Perl is always saying we don't force you do to things like Python does, and yet Perl 6 is going to have all this forcing of things in other ways

[02:52] <stevan> Alias_: I actually think the final product will do that much less than it seems to do now

[02:52] <Alias_> After I've typed the twigil for the hundredth time, I'm going to start resenting that second character

[02:52] <stevan> my guess is that as the language gets closer to reality it will get more DWIM-ish

[02:52] <Alias_> QUIT REMINDING ME!!!

[02:53] <Alias_> ... is what I suspect I'm going to be thinking

[02:54] <Alias_> So, I like Junctions, I love library sharing between languages

[02:54] <Alias_> assuming that happens

[02:54] <stevan> thats more Parrot than perl6

[02:54] <stevan> it will happen with Ponie

[02:54] <Alias_> The odds of it being possible at all without someone writing some form of CPAN module to make it easy are practically zero

[02:55] <stevan> yes it will not be easy

[02:55] <Alias_> But it will be after 6 months

[02:55] <Alias_> CPAN will see to that

[02:55] <Alias_> As it has for everything else

[02:57] <Alias_> Anyways, back to real work

[02:59] <Alias_> BTW "length" is on the S29 TO DO

[02:59] <Alias_> So it may just not have been written up yet

[02:59] <stevan> in the perl6::Array section?

[02:59] <stevan> or at the end?

[02:59] <Alias_> at the end

[03:00] <stevan> the one at the end I think has to do with strings and has been replaced by .bytes

[03:00] <stevan> (at least last I heard, but I am not a frantic perl6 lang reader)

[03:00] <Alias_> no, it includes other things

[03:01] <Alias_> want, vec, caller, sleep, etc

[03:06] <Darren_Duncan> I'm back ... starting to read comments ... stevan , I see yours from 58 minutes ago

[03:07] <Darren_Duncan> you figure I should display the XML too

[03:07] <Darren_Duncan> fyi, given the current most-compact code I have written for the synopsis, about 1 perl line equals 1 xml line

[03:08] <Darren_Duncan> would it be useful for me to show sample SQL strings that can be generated from the model, even though SQL::Routine doesn't do that itself?

[03:09] <Alias_> examples are always good

[03:09] <Alias_> Especially if they show change

[03:10] <Alias_> Even if it's the changed result of something down the line, people are good at inferring upstream cause

[03:11] <jabbot> pugs - 1453 - updating File::Spec tests with use_ok();

[03:21] <jabbot> pugs - 1455 - adding tests for split(<regexp>, "")

[03:21] <jabbot> pugs - 1454 - updating Pod::Stream::Parser to use spli

[03:41] <jabbot> pugs - 1456 - * make optimized is now -O1 to save time

[04:01] <jabbot> pugs - 1457 - * splitting with empty match now works; 

[04:11] <jabbot> pugs - 1458 - * add newlines to all .hs files

[04:19] <Darren_Duncan> I have updated the SYNOPSIS ... commit in a few minutes

[04:31] <jabbot> pugs - 1459 - SQL::Routine - added 2 more sub-sections

[04:37] <autrijus> stevan san!

[04:37] <autrijus> stevan: please don't add xxx to Prims. I've changed it to File::Spec::cwd()

[04:38] <Khisanth> well it was originally __cwd :)

[04:39] <Darren_Duncan> The newer SYNOPSIS for SRT, with output examples, has been committed as r1459

[04:40] <Darren_Duncan> autrijus , I just have a bug to track down that executing the SYNOPSIS uncovered in the module, probably simple ...

[04:40] <autrijus> oh?

[04:40] <Darren_Duncan> I plan to commit the bug fix as soon as I find it, then I consider SQL::Routine to be finished

[04:40] <autrijus> <- need to run for lunch soonish

[04:40] <autrijus> okie.

[04:41] <Darren_Duncan> meanwhile, stevan et al, any feedback on my additions following your last suggestions is welcome

[04:41] <jabbot> pugs - 1462 - * xxx_file_spec_cwd is called File::Spec

[04:41] <jabbot> pugs - 1461 - * remove httpd.p6

[04:41] <jabbot> pugs - 1460 - * make ghci works again

[04:43] <ingy> hola

[04:47] <Darren_Duncan> hola

[04:52] <crysflame> .

[04:55] <ingy> Darren_Duncan: fyi, I was talking to autrijus and thinking that we don't wannt to changes the social norm of 'perl Makefile.PL' to 'pugs Makefile.PL' since eventually pugs will be renamed to perl again

[04:55] <Darren_Duncan> I"m here

[04:55] <ingy> not that you shouldn't write a pure perl6 MakeMaker

[04:55] <ingy> (god save your soul)

[04:56] <Darren_Duncan> my main goal in that regard is that all /modules stuff is perl 6 ... what happens behind the implementation doesn't really matter now

[04:56] <Darren_Duncan> so the files can still be named Makefile.PL

[04:57] <Darren_Duncan> anyway, the FIRST thing I'm doing now is fixing a SQL::Routine bug before the release

[04:57] <ingy> =)

[04:57] <ingy> what time is the release slated for?

[04:58] <Darren_Duncan> don't know

[04:58] * Alias_ points ingy at rt.cpan.org for Perl6::Bible

[04:58] <Darren_Duncan> last week it was a couple hours after now

[04:58] <ingy> well autrijus is headed for here for lunch

[04:58] <ingy> so I'll ask her then

[04:58] <Darren_Duncan> the bug manifests like this ... if you look at the SRT synopsis, you notice a few lines are commented out ... those fail under the current version but shouldn't

[04:59] <ingy> Alias_: got it

[04:59] <Darren_Duncan> 'her'?

[04:59] <ingy> Alias_: I'll make you a freepan committer for the module

[04:59] <Alias_> ugh...

[04:59] <Alias_> I added it because _I_ don't know what they mean :)

[04:59] <ingy> Alias_: yes you do :P

[04:59] <Alias_> These stupid grand-sounding names always make me forget when they mean

[05:00] <ingy> heh

[05:00] <ingy> well I will certainly improve the module over time

[05:00] <Alias_> That, and I still disagree with freepan on principle :)

[05:00] <ingy> I wrote it on the train ride

[05:00] <ingy> Alias_: yeah, but you tend to disagree with everything new ;)

[05:01] <Alias_> ingy: Not everything. Only the things where people tend to "forge ahead"

[05:01] <Alias_> Which is the reason we are lumped with all sorts of crap in the current generation of code

[05:02] <Alias_> The idea of decentralised module distribution seems to have sprung up out of the ether overly quickly

[05:02] <ingy> Alias_: well form a committee then. I'll just forge ahead

[05:02] <Alias_> That won't help

[05:03] <Alias_> Evolution dictates that the first releaser wins...

[05:03] <ingy> Alias_: oops gotta run

[05:03] <Alias_> Guess I'm just not a confident person by nature

[05:03] <Alias_> Anyways, later

[05:04] <ingy> later

[05:18] <obra> ingy?

[05:35] <crysflame> Alias: you convery much confidence

[05:36] <crysflame> didn't betamax precede vhs?

[05:36] <crysflame> dinosaurs precede humans?

[05:36] <crysflame> not sure of what evolution you speak

[05:36] <Alias_> crysflame: First mover advantage

[05:37] <Alias_> If someone gives you a crap way to do something where no way exists before, people gravitate to it and try to make it better

[05:37] <Alias_> And if some of the basic premises are flawed, well too bad

[05:37] <Alias_> (Not that I'm suggesting that freepan is based on flawed basic premises)

[05:38] <crysflame> can't the basic premises be changed?

[05:38] <crysflame> what need be fixed in stone?

[05:38] <Alias_> often, no

[05:38] <Alias_> or it takes so much work that it never happens

[05:38] <Alias_> Witness File::Spec

[05:38] <Alias_> :)

[05:38] <crysflame> i saw it ported to perl6 two days ago

[05:38] <gaal> msys/6,4: Failed 43/172 test scripts, 75.00% okay. 362/3876 subtests failed

[05:38] <Alias_> And it still uses the same terrible API :)

[05:38] <crysflame> Meta was an API rewrite

[05:39] <crysflame> look at how well received it was

[05:39] <Alias_> Meta was just fine

[05:39] <gaal> how come time's epoch is from y2k? is this specced, or some haskell artefact?

[05:39] <crysflame> as directed by lwall

[05:39] <Alias_> It's just that the decision to lump 200 packages into one dist was silly

[05:40] <Alias_> crysflame: I tend to prefer to go slower and devils-advocate myself at each step

[05:40] <Alias_> So I move a bit slower, but almost never have to go back

[05:41] <Alias_> Witness 5 total rt.cpan.org bugs for 60 dists

[05:41] <Alias_> (Of course, it might just be nobody is using any of them) :)

[05:48] <theorbtwo> Mornin, all.

[05:49] <gaal> heya

[05:57] <Darren_Duncan> bug fixed in perl 5 version ... now syncing the perl 6 version ...

[05:58] <drbean> Jesse Vincent at YAPC::Taipei was also questioning release early, release often

[06:00] <Khisanth> what about it?

[06:00] <drbean> Or was that Leon Brocard, or Sam Vilain? Sorry for the noise.

[06:01] <theorbtwo> Leon Brocard's the one with the French accent.

[06:01] <theorbtwo> Though I suppose it takes a pretty high degree of fluency to be able to distinguish.

[06:06] <theorbtwo> Eeep: Perl6::Bible has no Makefile.PL!

[06:10] <gaal> AST.hs makes ghc very hungry.

[06:11] <gaal> unfortunately it doesn't seem to free() after compiling it, either :(

[06:11] <gaal> oh, actually, it does but it takes quite a while to register.

[06:11] <jabbot> pugs - 1463 - in SQL::Routine, fixed a module code bug

[06:11] <Khisanth> heh yes ... building pugs requires a lot of memory...

[06:11] <Darren_Duncan> the SRT bug fix is committed

[06:12] <Darren_Duncan> now I see nothing left to do in the short term concerning my /modules stuff

[06:12] <Darren_Duncan> and I can move on to other tasks

[06:18] <Darren_Duncan> away from comp for a bit ...

[06:19] <Darren_Duncan> except for this ...

[06:19] <Darren_Duncan> autrijus, don't hold the release anymore on my sake

[06:30] <gaal> what time is the release scheduled for?

[06:30] <autrijus> okay.

[06:30] <autrijus> gaal: a release is coming in 10 hours or so

[06:30] <gaal> the conf being over lends some convenience :)

[06:31] <nothingmuch> morning

[06:31] <gaal> the xreferencer in yam_harness is broken on msys, probably a mistreated newline or something. i have to go to work but will try to fix that soon

[06:31] <gaal> hey nm, by nm!

[06:32] <gaal> bye that is. i can't spell.

[06:32] <nothingmuch> ciao

[06:33] <gaal> oh, i get "couldn't match line" on linux too, though less often it looks.

[06:33] <gaal> anyway, bye.

[06:33] <theorbtwo> There's a few tests that don't use Test.pm, and don't output line-number info.

[06:33] <gaal> aha! naughty.

[06:34] <nothingmuch> sorry, my bad

[06:34] <gaal> i think though that on msys they all fail to be indexed.

[06:34] <nothingmuch> should have been reported better

[06:34] <gaal> not sure - will check - be seeing you.

[06:34] <theorbtwo> Somebody should poke ingy; Perl6::Bible is quite broken.

[06:35] <mugwump> theorbtwo: go on...

[06:35] <theorbtwo> There's no Makefile.PL in the archive.

[06:35] *** castaway_ is now known as castaway

[06:35] <theorbtwo> ...and the p6bible isn't compiling for me, but that might just be me.

[06:36] <nothingmuch> wtf p6bible?

[06:36] <theorbtwo> It's supposed to be a command-line tool of some sort... I'm not really sure myself.

[06:37] <theorbtwo> But I suspect catalog_tests is going to need to use some of the routines in Perl6::Bible, and they're all undocumented.

[06:37] * nothingmuch will svn up soon, and see for himself

[06:38] <mugwump> theorbtwo: he's onto it now.  you can get the svn version if you want, or wait a few minutes

[06:39] * theorbtwo waits for his apt-get upgrade run to finish so he can install Spiffy.

[06:39] <theorbtwo> Where's the SVN??

[06:39] <theorbtwo> Er, s/\?\?/?/

[06:40] <mugwump> http://svn.kwiki.org/ingy/Perl6-Bible, but it will become a freepan.org address soon

[06:40] <theorbtwo> Thanks.

[06:41] <mugwump> np

[06:41] <theorbtwo> SVN's missing the inc dir.

[06:42] <mugwump> yes, you'll need Module::Install installed

[06:43] <theorbtwo> I do; the first two lines in Makefile.PL should be C<use lib 'inc'; use Module::Install;> rather then C<use inc::Module::Install;>

[06:43] <theorbtwo> Oh.  Or not; Module::Install doesn't like that for some reason.

[06:53] * asavige unsure of this "Autrijus Protocol" "releng" thing

[06:53] <asavige> Given a release is due in 10 hours should I hold off adding some new operator tests until after the release?

[06:53] <theorbtwo> Don't think so.

[06:54] <theorbtwo> Making failing tests into todos is the last thing that happens before a release, generally.

[06:54] <castaway> sneaky

[06:59] <asavige> theorbwo: Thanks. Is there a "cut off time" for adding new tests before a new release. One hour, say?

[07:00] <theorbtwo> Donno.

[07:01] <castaway> I dont see why there should be..

[07:02] <castaway> At some point, you'll be checking into the svn, and the person building the release will have already checked out the stuff to release

[07:16] <Darren_Duncan> I'm back ... for a brief time only

[07:19] <Darren_Duncan> anyway, while I said I would do something with makefiles today, I actually won't

[07:19] <Darren_Duncan> I'll start into that after the current release, so there is more time to do it properly

[07:20] <Darren_Duncan> in the mean time, I've only got a few hours of work before my perl 5 distros will go on cpan, so they're planned to ship tomorrow

[07:20] <Darren_Duncan> good night

[07:51] <Corion> yawn

[07:52] <theorbtwo> G'mornin, Corion.

[07:52] <nothingmuch> morning Corion 

[07:52] * castaway pokes Corion awake

[07:52] <Corion> Good morning cabal!

[07:52] <theorbtwo> I'm a cabalist?

[07:52] * castaway certainly isnt

[07:52] <Khisanth> there is a cabal? :)

[07:53] <castaway> Corion, can you translate something for us? ;)

[07:53] <Corion> castaway: Yes, if you trust me ;)

[07:53] <castaway> heh.. 

[07:53] <Corion> Oooo - lots of fixes it seems :)

[07:53] <castaway> well hopefully quite simple

[07:53] * nothingmuch wants to be put to sleep

[07:54] <theorbtwo> Hmm, nm?

[07:54] <castaway> We saw signs saying "StVO gilt sinngemaess" .. I know StVO are like the standard traffic regulations, but what was it trying to say?

[07:54] * castaway searches for the chloroform

[07:54] <nothingmuch> sleeeeep

[07:54] <nothingmuch> i don't mind if i don't wake up

[07:54] <nothingmuch> if i DO wake up, i'd like to still have my job though

[07:54] <castaway> heh

[07:54] <nothingmuch> so it's either later, or permanent

[07:55] * gaal was in a cabbalist wedding two weeks ago, was horrible

[07:55] <Corion> castaway: That means that the StVO applies "where relevant" or "adapted"

[07:55] <gaal> religious frevor--

[07:55] <castaway> Hmm.. I was thinking it meant "this is privat ground, StVO doesnt usually apply here, but we're using it anyway" .. 

[07:56] * theorbtwo notes that the English word cabal isn't generally considered to apply only to practitioners of qaballah.

[07:56] <nothingmuch> it's also a worshipper of the xmen character

[07:57] <Corion> castaway: Yep

[07:57] <theorbtwo> I didn't know there was an xman named cabal... though I do remember one named cable...

[07:57] <castaway> Ah, good

[07:57] * gaal notes the ontic viability of puns

[07:57] <castaway> Then we had a long discussion about that not being allowed in the US.. cos its "impersonating government signs" ;)

[07:57] <Corion> castaway: The "sinngemaess" is mostly because the StVO only applies to public roads. I think the "sinngemaess" is the s!public road!this space! operation

[07:57] <castaway> right, that was my thinking

[07:57] <nothingmuch> theorbtwo: beh

[07:57] <Corion> castaway: The signs should be green instead of red

[07:58] <castaway> the road signs? hmm, they werent

[07:58] <Corion> Oooo - we can inject builtins directly into the namespace. Nifty :)

[07:58] <castaway> (This was on/in the Munich Trade Fair centre)

[07:59] <Corion> castaway: Hmm - that's weird. Because normally, you aren't allowed to use official signs. But maybe it was because it was on semi-public/private space

[07:59] <castaway> So I guess we were both right :)

[07:59] <castaway> I'm fairly sure the MTC isnt public grounds

[08:00] <castaway> (especially not behind the gates in front of the big halls)

[08:00] <theorbtwo> I wouldn't be surprised if it was some sort of public-private mix.

[08:00] <theorbtwo> (Which I do not approve of in general.)

[08:01] <Corion> castaway: Ah, if it was gated/walled anyway, then you're free to do what you want. If it is publicly accessible, you get more problems I think

[08:01] <Corion> But traffic law is not my speciality

[08:01] <castaway> heh

[08:02] <Corion> Why are we pulling in Module::Install as a prereq ? Does it solve any problems for us ?

[08:02] <castaway> "we"?

[08:02] <Corion> "we"

[08:02] <Corion> ... or so the backlog tells me

[08:03] <theorbtwo> Perl6::Bible is.

[08:03] <Corion> (Perl6::Bible, as distributed with Pugs)

[08:03] <theorbtwo> ...and it appears to be doing so very poorly, or at least it was when last I saw.

[08:05] <Corion> Ah. I confused it with ... what's its name ... Module::AutoInstall or something. Module::Install is yet another frontend to Module::Build it seems. Oh well.

[08:07] <Corion> Too bad - shapr hasn't put in want() :)

[08:12] *** Corion changes topic to: Under no circumstances collapse your lambacamel duality | pugscode.org <<Overview Journal>> | pugs.kwiki.org | logged: http://xrl.us/e98m | smoke: http://xrl.us/fmw2 | win2k:r1468(234/3876) Linux:r1302(193/3383) MacOSX:r1342(189/3478)

[08:12] <shapr> I'll put in half of it in the next hour or so.

[08:13] <Corion> (+ 1) shapr

[08:13] <shapr> haha

[08:13] <Corion> A greeting for everybody in their own language :)

[08:14] <shapr> That's culturally understanding :-)

[08:14] <Khisanth> Corion: like purl? :)

[08:14] <Corion> Khisanth: Heh. Well, IRC.pm will be a project for the next week I think ;)

[08:15] <Khisanth> POE ...

[08:15] <Alias_> heh

[08:15] <Alias_> baby steps

[08:16] <Khisanth> that would require objects

[08:17] <Corion> Khisanth: No. POE is an abomination for languages that don't have coroutines or threads.

[08:17] <shapr> What's POE?

[08:18] <Corion> I've programmed such languages long enough to see the merits of a coherent flow of control

[08:18] <theorbtwo> I think Corion defined it pretty well...

[08:18] <Alias_> POE is a process sharing system

[08:18] <Alias_> For when you don't have decent threads

[08:18] <Corion> shapr: Perl Object Environment. "Cooperative multitasking" by using manually programmed state machines

[08:18] <shapr> I think I agree with your assessment then.

[08:18] <Alias_> Invented mainly because Perl's threads sucked or were unstable for so long :)

[08:19] <Corion> shapr: You send messages and then return from your subroutine, and the kernel dispatches the next message. Ugly to program in, but for a long time the roundest wheel there was.

[08:19] <Alias_> But a lot of neat things have been written using it

[08:19] <shapr> It sounds like an interesting hack.

[08:19] <Corion> It is, in principle, OK, except that state machines are ugly and rip your code apart in ugly ways.

[08:20] <shapr> Well, interesting hacks are interesting. But they're not always elegant.

[08:20] <shapr> I think writing POE code would frustrate me.

[08:21] <Khisanth> Corion: I see it more as a useful wheel for avoiding having to write your own event loop :)

[08:21] <Alias_> It requires something of a different paradigm/mentality

[08:21] <Alias_> And it's nice in that lots of CPAN POE things come for free... web servers, IRC bots, etc etc

[08:21] <Corion> Khisanth: But for example Coro.pm is the same useful wheel in a much nicer package. Except that it doesn't work everywhere :)

[08:22] <Corion> Alias_: Yep - all of these would need to be rewritten. But that'd be worthwhile IMO ;)

[08:22] <Alias_> I want a ThreatNet bot, but I keep getting told that POE bots don't handle large message volumes

[08:22] <Alias_> So I never get around to writing one

[08:23] <Corion> Win2k smoke matrix updated at http://datenzoo.de/pugs/win2k.html

[08:23] <Corion> Alias_: I never wrote anything big in POE because it gives me flashbacks of programming in Turbo/Borland Pascal

[08:23] <shapr> GHC's threading is nifty. iirc it's coroutines with preemption during memory allocation.

[08:23] <Khisanth> Corion: but does Coro also have the various other wheels as well?

[08:23] <Corion> ... not that TP was bad at the time ;)

[08:24] <shapr> That means you should be fine with 10,000 threads, and you get passable preemption as well.

[08:24] <Corion> Khisanth: No, Coro doesn't include all the wheels that POE has. It also isn't that stable :)

[08:24] <Corion> shapr: Does it do preemption during socket/file operations too?

[08:24] <Corion> ... I'll have to look into threads then ...

[08:25] <Corion> ... or into my make module ...

[08:25] <Corion> choices, choices

[08:25] <shapr> I think it depends. I'm sure that'll force memory allocation, but ...

[08:26] <shapr> GHC's runtime has a -threaded option where the any coroutines that are ready to run can be handed to a free OS thread from a pool. I'm not sure how that interacts with preemption.

[08:27] <shapr> Oh, did you know GHC can run on the bare metal? It's likely Pugs will be able to boot by itself too without too much extra work.

[08:29] <shapr> Are there other, more complete, implementations of Perl6?

[08:30] <theorbtwo> No.

[08:32] <theorbtwo> There's the perl6 rules generic engine (or something like that), Patrick McMahaud's work... but I'd hardly call it more complete.

[08:41] <jabbot> pugs - 1465 - * elems, bytes, chars

[08:41] <jabbot> pugs - 1464 -  r6094@speights:  samv | 2005-04-03 16:2

[08:44] <Corion> shapr: PugsOS :)

[08:47] <Khisanth> and entire OS written in Perl?

[08:47] <Alias_> oh dear god, save us all :)

[08:47] <Corion> :)

[08:47] <castaway> sure why not ,)

[08:48] * Khisanth imagines the wackiness that will lead to

[08:48] <Alias_> Just whack CPAN on a CD, point the bootloader at PerlOS::Boot, and you're done

[08:48] <Corion> Alias_: :)))

[08:48] <Corion> One would still need a browser, to render HTML :)

[08:49] <Corion> Oh. There is HTML::Display :)))

[08:49] <castaway> HTML::Display ,)

[08:49] <Corion> castaway: Indeed :-))))

[08:50] <Khisanth> Corion: that still requires a browser

[08:50] <Corion> Khisanth: I know. I'm the author :))

[08:51] <Khisanth> then how did you manage to forget about it?!

[08:51] <Corion> Khisanth: I didn

[08:51] <Corion> ... didn't, really :)

[08:52] <castaway> *g*

[09:00] <autrijus> jabbot: seen stevan

[09:00] <jabbot> autrijus: stevan was seen on Sun Apr  3 11:00:29 2005

[09:01] <Corion> autrijus: I noticed yesterday that Haskell or Prim.hs don't like builtins named __cwd (for whatever reason)

[09:01] <autrijus> really. hrm

[09:01] <autrijus> not sure

[09:01] <theorbtwo> Do they like a builtin named _foo?

[09:01] <Corion> ... but I didn't know that colons are cool in builtin names, otherwise I would have used File::Spec::cwd myself :)

[09:01] <autrijus> anyway it's a bad idea anyway

[09:01] <Corion> theorbtwo: Never tried

[09:01] <autrijus> just use File::Spec::cwd :)

[09:02] <autrijus> no, it could not work, I hacked it so it can

[09:02] <Corion> autrijus: Yes, that's the clean way :)

[09:02] <Corion> autrijus: Aaah - cool of you!

[09:02] * autrijus is beginning the huge work that is ChangeLog

[09:02] <Corion> autrijus: Another release converging on 2pi ?

[09:02] <autrijus> yes

[09:02] <Corion> Wasn't the last release three days ago or something?

[09:03] <Corion> That's really really quick :)

[09:03] <autrijus> no, last release was one week ago

[09:03] <autrijus> we follow a weekly release cycle.

[09:03] <Corion> theorbtwo: BTW, is there some consolidation of the smoke tests ? Or is that still in the works?

[09:03] <Corion> autrijus: Ah

[09:04] <theorbtwo> Eh?

[09:04] <Corion> theorbtwo: Across platforms, I mean

[09:04] <theorbtwo> Oh.

[09:04] <theorbtwo> Donno.

[09:11] <autrijus> hi shapr

[09:11] <shapr> hiya autrijus

[09:21] <Corion> & # breakfast

[09:26] *** Aankh|Clone is now known as Aankhen``

[09:40] <elmex> wo

[09:40] <elmex> ho

[09:40] <shapr> w00h00

[10:55] <Corion> Hmmm. I should add proxy support to LWP::Simple ...

[10:55] <Corion> ... or at least document that there is none yet :)

[10:55] <shapr> Is a stick turing complete?

[10:56] <theorbtwo> No, but it may have the Buddha nature.

[10:56] * shapr snickers

[10:58] <Corion> Hmmm. How would I test against LWP::Simple using a proxy without doing ugly set up? Any suggestions?

[10:58] <metaperl> how does the current LWP do it?

[10:59] <metaperl> and would thttpd help?

[10:59] <Corion> metaperl: I want to avoid any elaborate set up :)

[10:59] <Corion> metaperl: I could spawn a local proxy or something, but these things are fragile at best

[10:59] <metaperl> oh. sockets are demanding

[11:00] <Corion> metaperl: I know :)

[11:00] <metaperl> shapr, have you seen the Perl6 slurpy lists?

[11:00] <metaperl> theymake me want to vomit

[11:00] <shapr> no, what's that?

[11:00] <Corion> metaperl: Sockets or slurpy lists ?

[11:00] <metaperl> http://dev.perl.org/perl6/synopsis/S06.html

[11:00] <metaperl> Corion, slurpy lists

[11:01] <Corion> metaperl: Ah, but you need to have both, slurpy and non-slurpy lists. But I haven't looked at S06 yet

[11:01] <metaperl> that URL shows them under "List parameters"

[11:01] <Corion> metaperl: I don't see anything bad there - the recipient declares how it wants its parameters - slurped or nonslurped. Fine with me

[11:03] <shapr> How do you know how many to slurp?

[11:04] <theorbtwo> As many as you can.  That's the basic defintion of "slurpy".

[11:04] <Corion> shapr: I imagine the stuff is kept lazy. Or rather, it should be, for infinite lists :)

[11:04] <Corion> Aaah. I'll bite the bullet and fake the local HTTP proxy via threads.

[11:05] <shapr> I'm lost about slurpy lists, but hacking more pugs should help.

[11:06] <metaperl> shapr, f6.p6 in examples shows them in use

[11:09] <shapr> I'm still trying to figure out how to jump from the code in retEmpty to using that for want.

[11:11] <shapr> The secret is in opEval, I'm sure of it.

[11:18] <shapr> hiya Schwern 

[11:19] <Schwern> For god's sake don't base Pugs on MakeMaker.  That is all.

[11:19] <Alias_> heh

[11:20] <Corion> Schwern: I'll force people to use _my_ Perl reimplementation of make instead :-))))

[11:20] <theorbtwo> Sounds good, Corion.

[11:20] <Corion> Schwern: And theorbtwo has just volunteered to port it I hear.

[11:21] <Corion> No. I'm not really interested in meta-packages / meta-modules... And I know better than falling for the same trap that caught the Module::Build people - developing a module that nobody will ever use.

[11:21] <Corion> ... as long as EU::MM is around.

[11:21] <Schwern> Corion:  I have fired weapons which throw projectiles larger than your fingers.

[11:21] <Corion> But Pugs/Perl6 has the good situation of not having any build system, so we have a clean slate :)

[11:21] <jabbot> pugs - 1466 - Ported HTTP::Headers.

[11:22] * theorbtwo fails to see the relevance, Schwern.

[11:22] * Alias_ uses Module::Install now

[11:22] <Corion> Oooo. HTTP::Headers. Shiny toys.

[11:22] <theorbtwo> BTW, Corion, I use M::B.

[11:22] <Alias_> Module::Install is quite a nice model for installer scripts, if fairly twisted internally

[11:22] * Schwern puts the barrel closer to theorbtwo's face.

[11:22] <Alias_> CPAN has almost 10% M::B coverage now

[11:22] <Alias_> I have a script somewhere that tests it

[11:23] <Alias_> But 350+ dists use it

[11:23] <Schwern> The MI interface is fine.  But its still a MakeMaker wrapper.

[11:23] <theorbtwo> I offically dislike Module::Install; I can't get Perl6::Bible to install because of it.

[11:23] <Corion> theorbtwo: I also use it for one module. But M::B will never replace EU::MM, because of the ugly incompatibilities between the two.

[11:23] <Schwern> Alias:  How many if you eliminate those which haven't been updated in the last year?

[11:23] <Alias_> Schwern: Not sure...

[11:23] <Corion> BTW, Schwern, didn't you promise PREFIX= for M::B ? :-)))))))))))))))))

[11:23] <Alias_> Schwern: And I'm not doing a 6 hour tinderbox run to find out :)

[11:24] <Schwern> Corion:  Yes.  The sheer pain at trying to implement it says volumes.

[11:24] * Alias_ wonders if we should lobby Microsoft to let us distribute nmake

[11:24] <Schwern> No.

[11:25] <Corion> Alias_: I think Perl6 has the one chance to use a pure micropugs / minipugs make utility.

[11:25] <Schwern> The dependency on an external build tool is the problem.

[11:25] <Corion> If we miss that chance, we'll have to wait until Perl7.

[11:25] <Schwern> No make utility.

[11:25] <Corion> schwern++

[11:25] <Schwern> No external build utility.

[11:25] <Alias_> There can only be one

[11:25] * shapr decapitates a nearby ninja

[11:25] <theorbtwo> I quite agree.

[11:25] <Schwern> No having to build a script to be executed by something else.

[11:25] <Corion> One ANSI C file for building minipugs, and from there it's Perl6 code only.

[11:25] <Alias_> Then someone needs to decree it

[11:26] <theorbtwo> We should be able to install pugs modules using nothing but pugs.

[11:26] <Corion> Alias_: Yes.

[11:26] <Alias_> And that someone needs to be Larry

[11:26] <Schwern> Alias:  I already have.  Many times.

[11:26] <Corion> I really should rework my buggy module.

[11:26] <metaperl> i'm not sure if this is relevant, but have you all heard of makepp? It is written in Perl and parse Make syntax but can be extended in Perl

[11:26] <Alias_> Schwern: Then invoke Rule 1

[11:26] <Corion> Alias_: No. Matter-of-fact can be stronger than Larry, especially, if it's already there. :)

[11:26] <shapr> People are stupid?

[11:26] <theorbtwo> Schwern doesn't have a rule 1.

[11:26] <castaway> One cannot decree in an open community, IMO.. The replacement either needs to work and be better for the users, or it will fail to get followers.

[11:26] <Alias_> theorbtwo: ... yes... and therefore...

[11:27] <shapr> Right, open source is just as resource limited as anything else, but the resources are the minds of developers.

[11:27] <Alias_> If Larry says that Perl6 modules don't use make, then they don't use make

[11:27] <Corion> Larry will use anything that's Good Enough. And about anything is better in the long run than supporting the various (n)make utilities.

[11:27] <metaperl> http://makepp.sourceforge.net/

[11:27] <Alias_> And anyone who _does_ use make knows they arn't doing the blessed thing

[11:27] <Corion> Alias_: It's not so much about the modules, but about Perl6 itself.

[11:27] <metaperl> drop-in replacement for GNU make written in Perl

[11:27] * Juerd has never understood why we use make.

[11:27] <Schwern> metaperl:  The existence of an intermediate build tool is always going to be problematic, pure Perl or not.

[11:27] <Alias_> Tell people what to do, but don't stop them doing it the other way

[11:27] <Corion> metaperl: I don't want any make utility.

[11:28] <castaway> cos its there, Juerd, I suspect.

[11:28] <Alias_> I just want everything to work the same between Unix and Win32

[11:28] <Juerd> Make can do nothing that perl itself cannot.

[11:28] <Alias_> Maybe someone should port ant... Pant anyone?

[11:28] <Corion> In principle, the idea of M::B is good, just the implementation is bad, or the lack of backwards compatibility with EU::MM. But Perl6 has a clean slate, so it might work this time.

[11:28] * Alias_ knows nothing about ant

[11:28] <shapr> make is a domain specific language that does directed acyclic graphs of build dependencies.

[11:28] <Schwern> Alias:  That's just another external build tool.  Same problem.

[11:28] <castaway> Ant IS pants.

[11:28] <castaway> XML--

[11:29] <Alias_> Scwern: "Port"...

[11:29] <Corion> And the bugs in M::B might disappear / be not that important :)

[11:29] <Schwern> Alias:  Its still an external build tool.  You don't understand.

[11:29] <shapr> Why is an external build tool bad?

[11:29] <castaway> M::B isnt external?

[11:29] <Juerd> shapr: dependencies

[11:29] <Schwern> Corion:  Please stop sniping at MB.  I'm not in the mood.

[11:29] <Corion> External build tools are bad. Perl6 should be able to build itself starting with one C file.

[11:29] <Juerd> shapr: Depending on something when Perl itself can do the same thing makes sense only during bootstrapping...

[11:29] <Corion> Schwern: Ah well :)

[11:30] <Schwern> Ok kids.  Here's why we can't use make or ant or pmake or makepp or any other build tool you might think of.

[11:30] <shapr> Hm, I disagree. Perl can't be good at everything.

[11:30] <Corion> Schwern: Think of it as reminiscences of a failed relationship

[11:30] <Schwern> Gather round.

[11:30] <Juerd> shapr: It very well can

[11:30] <Juerd> shapr: And it will

[11:30] <Schwern> Corion:  Except you're dating a 12 year old.

[11:30] <shapr> I don't think any language can be good at everything.

[11:30] <Schwern> Corion:  The thing ain't done yet.

[11:30] <Corion> Now, what's wrong with dating a 12 year old ? :)

[11:31] <Juerd> shapr: It can be very good at the things make does

[11:31] <shapr> Why not wait to port Make to perl/pugs until the perl6 bootstrap is done? In the meantime we have something that does work.

[11:31] <Juerd> shapr: But in a better way :)

[11:31] <Corion> Schwern: I think I'm more upset with the parents in law, of both, the 12 year old and the 5 year old.

[11:31] <Alias_> quiet... he's typing

[11:31] <Alias_> ;)

[11:31] <Schwern> Now.  How many folks here have tried to extend MakeMaker?

[11:31] <Corion> I have.

[11:31] <Schwern> Ok.  And I'm sure you appreciated the nice, clean API?

[11:31] <shapr> Juerd: In my opinion, you'd need to write a good graph reduction language interpreter in Perl for that to work well.

[11:31] <Juerd> Schwern: Depends if chickening out on first sight of the source counts as actually trying.

[11:32] <Corion> Schwern: Of course I've appreciated it, the same way I appreciated patching Inline, CPAN and other stuff I only have intermediate interest in :)

[11:32] <Juerd> shapr: If that has to be done, it has to be done. Simple as that. The functionality will be wanted by many anyway.

[11:32] <Schwern> I hope you'll all apprecate the sarcasm.

[11:32] <theorbtwo> shapr, but like you can write parsers in haskell just fine.  All it needs is a library.

[11:32] <Corion> Schwern: That is, no, I loathed it. :)

[11:32] * Alias_ understands

[11:32] <Schwern> MakeMaker has no API.  Why?  Because in the end MakeMaker methods spit out hunks of a Makefile.

[11:33] <shapr> theorbtwo: Sure, yeah. But then it's not Perl itself, it's a separate language. Maybe I'm just being pedantic.

[11:33] <Alias_> "Intermediate Language Considered Dangerous"

[11:33] * shapr shrugs

[11:33] <Corion> . o O ( MakeMaker is a templating system before we had the insight of the various failed templating systems )

[11:33] <Juerd> s/Dangerous/Scary!/

[11:33] <Juerd> :)

[11:33] <Schwern> In order to alter how MakeMaker works you have to write your own methods which spit out Makefile hunks.

[11:33] <theorbtwo> Sure it is: It's perl with a library, the same way as parsec is haskell with a library.

[11:33] <Schwern> This is a disaster.

[11:33] <Alias_> It's like writing SQL :)

[11:33] <theorbtwo> Of course, what you can and can't do in those hunks is completely undocumented, or at least horribly underdocumented.

[11:33] <shapr> theorbtwo: Does that mean that pugs is Haskell with a library?

[11:34] <theorbtwo> Worse: It's like writing SQL that generates SQL.

[11:34] <Alias_> (which, as far as I'm concerned, is also a disaster)

[11:34] <theorbtwo> Or possibly SQL that generates perl that uses DBI to interact with the database.

[11:34] <Corion> Schwern: I'm all with you here. In principle, the idea of M::B is good, and with P6 we have the clean slate that is needed.

[11:34] <Schwern> If you make the API sufficiently advanced such that one can extend MakeMaker in all the ways people want to (which is to say, all of them) then you wind up reimplementing the build tool.

[11:34] <shapr> Yow, spawn of cthulhu!

[11:34] <Corion> Schwern: Have you tried to (re)implement EU::MM on top of M::B ?

[11:35] <Schwern> At which point you just throw out the build tool.

[11:35] <Schwern> Corion:  See Module::Build::Compat

[11:35] <theorbtwo> shapr: Read the Makefile that pugs' Makefile.PL generates.

[11:35] <Corion> Schwern: Ugh. Not in that way, I meant. :)

[11:35] <theorbtwo> It consists largely of calls to perl -e.

[11:35] <Alias_> Wait... so Module::Install could target ::Compat? And I'd be able to have a Build.PL after all?

[11:35] <Schwern> Corion:  But I can't even document all of what MakeMaker does, why would I want to reimplement it?

[11:35] <Schwern> Alias:  Module::Install could target Module::Build.

[11:35] <Alias_> That would be even nicer

[11:36] <Schwern> Yes, it would wouldn't it.  And it wouldn't break with every internal MakeMaker change.

[11:36] <Alias_> But I don't see a lot of movement in M:I and the code inside it looks pretty simple

[11:36] <Schwern> heh

[11:36] <Schwern> You wish

[11:36] <theorbtwo> I was trying to install a module that uses M::I recently.

[11:36] <Schwern> Like the Pugs::MakeMaker code its astoundingly brittle.

[11:36] <Schwern> It relies on specific formatting and internal MakeMaker targets.

[11:36] <Alias_> The symbol table stuff and module loading is twisty as hell, but the bits and pieces are surprising dumn

[11:36] <theorbtwo> The first line was "use inc::Module::Install", but there was no "inc" directory.

[11:37] <Schwern> Which is the only way to do it, alas.

[11:37] <theorbtwo> So I said, OK, it should be use lib 'inc'; use Module::Install.

[11:37] <Alias_> theorbtwo: That's because Module::Install bundles itself into the package

[11:37] <theorbtwo> Nope, doesn't work, dies with an error that says "don't do that".

[11:37] <Alias_> in the /inc directory

[11:37] <theorbtwo> Yeah, well, it wasn't bundled.\

[11:37] <Alias_> Also, Module::Install, when installed, also installs to lib/inc/

[11:38] <Schwern> theorbtwo:  Could have just been a bungled distribution.  Which one was it?

[11:38] <Alias_> So the makefile runs when it's not bundled

[11:38] <Alias_> Schwern: erm... inc::Module::Install is the blessed way

[11:38] <Alias_> I have 40-50 packages doing it

[11:38] <Schwern> Alias:  But if there's no inc/ directory?

[11:38] <theorbtwo> Perl6::Bible (SVN; the one on CPAN has no Makefile.PL at all).

[11:38] <Alias_> Schwern: There should be... Module::Install on the system should copy itself there

[11:39] <Schwern> Alias:  Right.  theo's saying there wasn't one.

[11:39] <Alias_> Take a look at the layout on your system

[11:39] <Alias_> right

[11:39] <Alias_> Which means Module::Install is installed into the pugs SVN wrongly

[11:39] <Schwern> theorbtwo:  Oh, straight out of SVN.

[11:39] <Schwern> Alias:  Well, its not installed into SVN in the first place.

[11:39] <theorbtwo> Correct, Schwern.

[11:39] <Alias_> So, he can't load a badly named module, that isn't installed anyway?

[11:40] <Alias_> And isn't bundled like it should be

[11:40] <Schwern> theorbtwo:  I think the issue here is that you were pulling the module straight out of the repository and it hadn't been prepared for distirubtion.

[11:40] <theorbtwo> So Module::Install breaks when you try to use it like you'd use any other perl module.

[11:40] <theorbtwo> I tried that first, Schwern; the version on CPAN has no Makefile.PL at all.

[11:41] <Alias_> theorbtwo: If you mean, you can't just chuck the .pm file into your lib and expect it to work, without actually installing it, yes :)

[11:41] <Schwern> theorbtwo: http://search.cpan.org/src/INGY/Perl6-Bible-0.12/Makefile.PL

[11:41] <jabbot> pugs - 1467 - Fixed use_ok(): Missing $desc

[11:41] <Alias_> theorbtwo: In the same way you can't just chuck the .pm files into lib for something that needs some XS compiled

[11:42] <theorbtwo> Yeah, it was only 0.11 this morning.

[11:42] <Alias_> Module::Install is not a "simple" module in that sense

[11:42] <Schwern> theorbtwo:  They're working fast.  Things get broken.

[11:43] <Schwern> To complete the Mobius Strip, I'm trying to fix up Module::Install so MakeMaker can use it.

[11:44] * Schwern leans back and grins.

[11:44] <theorbtwo> I don't see why any of this should be so difficult.

[11:44] <Alias_> So do you consider Module::Build to be "Done Right" in the various senses?

[11:44] <theorbtwo> For simple modules, the installer should be simple to use.

[11:44] <theorbtwo> And Perl6-Bible is a dead simple module.

[11:45] <Alias_> really?

[11:45] <Alias_> It needs to compile POD and install them into man... etc

[11:45] <theorbtwo> Really.  It's a bunch of pod, one module, and one script.

[11:45] <theorbtwo> Compiling POD to man and installing it is something a simple module is expected to do.

[11:45] <Alias_> And installing to bin?

[11:46] <Alias_> actually... probably yes :)

[11:46] <theorbtwo> Is very very mildly strange.

[11:46] <Alias_> I'm not sure why we need a bin reader in any case

[11:47] <theorbtwo> Nor am I.

[11:47] <theorbtwo> And some docs on the module itself would be nice.

[11:47] <Corion> Ooops. %ENV is readonly :)

[11:47] <Alias_> But them I also don't get why the thing that installs packages needs to know how to build them too

[11:48] <Alias_> in the way that Module::Build/MakeMaker etc does

[11:48] <Schwern> theo:  I think your confusion here comes from the fact that Perl6::Bible ain't exactly optimized for ease of distribution yet.

[11:48] <castaway> because they come as source?

[11:49] <Schwern> theo:  Ingy is used to using MI, that's what he used.

[11:49] <Alias_> And M:I really does work quite well

[11:49] <Schwern> Alias:  Its got to install them somewhere.

[11:50] <castaway> and install from something.

[11:50] <Schwern> Alias:  The builder has to "install" the package it just built somewhere so that the installer can see it to install it.

[11:50] <Schwern> Alias:  What would be the gain in separating the logic of the two?

[11:51] <Alias_> Schwern: I mean more in the sense of the "dist" command

[11:51] <Schwern> dist as in to make a tarball?

[11:51] <Alias_> yes

[11:51] <Schwern> Like "make dist"?

[11:51] <Alias_> or ./Build dist

[11:51] <Schwern> As opposed to...?

[11:51] <Schwern> Rolling your own tarball and distributing lots of ~ and .bak files?  Not to mention your .svn directory.

[11:52] <Alias_> Well... having a tighter module that dealt with build/install and was realtively easily bundled, and a biggest one for doing the "Packaging" that added the rest of the functionality

[11:52] <Alias_> ugh..

[11:52] <Alias_> s/biggest/bigger/

[11:52] <theorbtwo> I'd rather not expect people to bundle the installer module with every module they write.

[11:52] <Schwern> You can write that if you want.  

[11:52] <Schwern> Alias:  "make dist" doesn't stop you from doing that.

[11:53] <theorbtwo> I wonder what percentage of CPAN's size is just redundant copies of Module::Install, Module::Build, and friends.

[11:53] <Alias_> Module::Install is about 7k increase in the tarball

[11:53] <Schwern> theo:  Eh, disk is cheap.

[11:53] <Schwern> theo:  Too many people have whined about modules having too many dependencies.

[11:54] <Alias_> I've been including a lot more deps lately

[11:54] <Schwern> MI solves that problem handily.  It even strips out the POD before redistribution.

[11:54] <Alias_> Mostly test modules

[11:54] <Alias_> And it should pack tighter once PPI::Squish is done

[11:54] <Alias_> or whatever it gets called

[11:54] <Schwern> Oh dear.

[11:54] <Schwern> Compress::Perl

[11:55] <Alias_> I've got the module here already from the pre-0.900 days

[11:55] <Alias_> strip pod, strip comments, remove leading/trailing whitespace, useless ; , etc etc

[11:55] <Alias_> I draw the line at trying to rejigger variable names though

[11:56] <Schwern> Change "foreach" to "for" :)

[11:56] <Alias_> heh

[11:56] <theorbtwo> I'd really love for a makemaker replacement that could easily make debs, rpms, and whatever other sort of packages people want to make.

[11:56] <Schwern> Oooooh.  Hufman encoding of lexical variable names!

[11:56] <Schwern> theo:  You don't have to replace Makemaker for that.

[11:56] <Alias_> Schwern: PPI should be able to know there lexically declared vars get used soon

[11:57] <Schwern> theo:  And CPANPLUS and/or Module::Build has some of that functionality already.

[11:57] <Alias_> At least for the basics

[11:57] <theorbtwo> Schwern: Yes, but MM needs to be replaced, and I'd like for the replacement to be able to do this.

[11:57] <Schwern> theo:  I'd rather it didn't.  I'd rather someone ELSE did all that.

[11:57] <Schwern> Half the problem with MakeMaker is it tried to do everything.

[11:57] <Alias_> Schwern: There's a good reason to seperate out the packaging from the build/install'ing

[11:57] <Schwern> There's code in there to do RCS checkins!

[11:57] <Alias_> Module::Package::Tarball...

[11:57] <theorbtwo> I'd rather that more modules had enough metadata to make it possible.

[11:57] <Alias_> Module::Package::RPM

[11:57] <theorbtwo> Yes, Alias_.

[11:57] <Schwern> Alias:  I'd leave tarballs in the core.

[11:58] <Schwern> theorb:  Such as META.yml?

[11:58] <theorbtwo> But they should be a clean way of making those Module::Package::*s.

[11:58] <Alias_> theorbtwo: Most of the really sweet solutions I've designed in my head generally involve VMWare images :)

[11:59] <theorbtwo> That sounds like a bad idea.

[11:59] <theorbtwo> At least use qemu images.

[11:59] <Alias_> $your_favourite_emulator

[11:59] <theorbtwo> What I'd like the core to do is define ways of putting in all the metadata you can think of.

[11:59] <Schwern> Why do you need an emulator to make a package?

[11:59] <Schwern> theo:  See also META.yml

[12:00] <Alias_> Schwern: Because it's going to have to do compilation and testing and various other crazy stuff in the make/build script?

[12:00] <theorbtwo> Yes, but it needs to be better defined.

[12:00] <Schwern> http://module-build.sourceforge.net/META-spec-new.html

[12:00] <Corion> Ugh. Does C< try { %ENV{$key} = $val } > mean something different from the Perl5 equivalent ? Because $! gets set to %ENV afterwards.

[12:00] <Schwern> That good enough?

[12:00] <Schwern> Alias:  So?  The author does that.

[12:01] <theorbtwo> Also, META.yml is generally built from the Makefile.PL (or equiv) presently.

[12:01] <Schwern> theorb:  From the Build.PL, yes.  What's wrong with that?

[12:01] <Alias_> or the Module::Install script

[12:01] <Schwern> (Don't even bother looking at MakeMaker's implementation)

[12:03] <theorbtwo> Because if the META.yml field defines something, but it's source provides no way of setting it, it will never get set.

[12:03] <Schwern> ...

[12:03] <theorbtwo> I'd like so see a way of specifing dependencies that are not perl modules, and of specifing ors on the various dep lists.

[12:03] <Schwern> Yeeees.  Ok.

[12:03] <Schwern> Build.PL is a program.

[12:03] <Schwern> You can do whatever you want in it.

[12:04] <theorbtwo> Oh, that's what requires_packages are for.

[12:04] <Schwern> :)

[12:04] <Schwern> Alternatively, patch up Module::Build.

[12:04] <Alias_> Granted though, Module::Install is a little weak in that area

[12:04] <Alias_> even no_index is undocumented

[12:04] <Alias_> But it's China/Tawain-ware... so that's somewhat expected

[12:06] <Schwern> WLECOME TOO HAPPY LUCKY, FUN INSTALER MODULER!!!  WE HOPE YOU AND YOUR'RE FAMILY AND YOU'RE ANCESTORS ENRICH THEIR RABBITS WITH THIS FINE CRAFTED SOFTWAR!!!

[12:06] * Schwern looks around for autrijus.

[12:06] <Schwern> Ok, I'm safe. :)

[12:06] * theorbtwo is surprised none of the far-eastern developers are here to beat Schwern to a bloody pulp.

[12:07] <Schwern> hee

[12:07] <theorbtwo> Most of them seem to speak quite passable English, BTW.

[12:07] <Schwern> Hey man, I've seen Autrijus lay down the phat beats

[12:07] <Alias_> theorbtwo: Speak, sure, but some of the documentation for various things is horrible

[12:08] <Alias_> horrible in the sense of incomplete...

[12:08] <Schwern> BOY AM I GLAD MY RACIAL SLANDER IS ALL GETTING LOGGED

[12:08] <shapr> Who were you racing?

[12:08] <theorbtwo> http://xrl.us/fmw2

[12:08] <Schwern> shapr:  NASCAR CAN DRIVE 55!

[12:08] <Alias_> More shame me for not helping to fix it though :( If only I could work out how the svk internals worked, so I could document it :)

[12:08] <theorbtwo> Not just logged: publicly logged.

[12:09] <Alias_> Racial...?

[12:09] <shapr> So, can someone help me with this want implementation? I'm not really sure how I can get retEmpty code to work like the op1 code.

[12:09] <Alias_> OK, I'm a languagist! So what!

[12:10] <Schwern> Musicalologist

[12:10] <Alias_> I happen to think that people that don't speak English as a first language sometimes produce somewhat lower standards formal documentation (except those embarrasinly good dutch)

[12:10] <Alias_> Although their spelling is generally better than mine :)

[12:10] <Corion> Alias_: Lower compared to what? :)

[12:11] <theorbtwo> Alias: "somewhat lower standards formal documentation"?

[12:11] <Schwern> Yeah, I'm not seeing high grades for English programmers writing docs either.

[12:11] <Alias_> Corion: There's a certainly level of conceptual clarity missing at times

[12:11] <theorbtwo> I don't think /anybody/ writes both good documentation and good code.

[12:11] <Schwern> Non-English speakers have a lock on this?

[12:11] * Schwern points at theorbtwo:  LIES!

[12:11] <Alias_> Schwern: No, but there's been a string of them I've had problems with

[12:11] <jabbot> pugs - 1469 - Added information to Test.pm test suite

[12:11] <jabbot> pugs - 1468 - %ENV is readonly and behaves strange whe

[12:12] <Alias_> The SVK guts for one, and the Module::Install guts for two, just in the last 3 months

[12:12] <Schwern> Alias:  Umm, realize they were authored by the same person.

[12:12] <Alias_> The only thing I can compare it with are the Software Diamonds docs

[12:12] <Alias_> Schwern: Then that would probably explain it

[12:12] <theorbtwo> I suspect it's very difficult to look at code you yourself wrote, and look at it from the viewpoint of someone who doesn't know the code.

[12:12] <Schwern> Alias:  Surprise!

[12:12] <Schwern> theo:  It is, but its learnable.

[12:13] <Alias_> You should be designing your APIs from the beginning for people that don't know how the guts work

[12:13] <Alias_> unless it's meant to be an extremely technical module

[12:13] <theorbtwo> I've heard I write quite readable code, which is good, because I suspect I write unreadable documentation.

[12:14] <Corion> Alias_: But the API is not always the documentation. Especially when there are concepts that are not obvious through the API

[12:14] * Corion goes outside, washing and cleaning the bike

[12:14] <Schwern> theo:  "Good coders can't write good docs" is just a cop out.  Documentation is a skill to be learned and practiced just like coding.

[12:15] <Alias_> True, but when you've got very little if any DESCRIPTION, and the API is complex, unclear and only partially documented, it's a problem

[12:15] <Alias_> Someone look at XML::XBEL and tell me what it does

[12:15] <Corion> Alias_: Ah well - I don't see non-EN-* coders holding a monopoly on unclear docs :)

[12:15] <Alias_> I'm sure if I knew what an XBEL file was, it might help. But without knowing about XBEL files, it's completely opaque

[12:15] <Schwern> Corion:  APIs have layers.

[12:15] <Corion> Schwern: Like ::Simple :)

[12:16] * theorbtwo wonders if anybody wants to critique the docs of Sort::Merge

[12:16] <Schwern> Corion:  Like its not just what the external user sees.  You can have internal APIs

[12:17] <Schwern> Sums up the anti-build tool argument.  http://www.pobox.com/~schwern/talks/MakeMaker_Is_DOOMED/slides/slide011.html

[12:17] <Alias_> theorbtwo: Reads fine to me, although that SYNOPSIS code is packed a little tight :)

[12:17] <Schwern> In the SVK example they really, really, really should document what all those internal modules do.

[12:17] <Alias_> indeed

[12:17] <theorbtwo> Woo!

[12:18] <Alias_> Hell, I've WRITTEN a giant CVS wrapping API, and I _still_ can't work out what the SVK internals do

[12:18] <Schwern> theo:  The DESCRIPTION is too defensive.

[12:18] <Alias_> CVS Monitors guts are at least relatively clear

[12:18] <Schwern> theo:  Most of the discussion about your motiviations can go into NOTES or HISTORY

[12:19] <Alias_> I didn't even make it past the first paragraph though, it said everything I needed to read, and I skipped past the rest

[12:19] <Schwern> theo:  Focus on answering the questions the user will ask.  "Why do I want to use this module?  Why not just use sort?"

[12:19] <theorbtwo> Thanks.

[12:19] * Alias_ wonders what Schwern would think of the PPI::Tokenizer docs

[12:19] <Alias_> (ignoring the spelling mistakes, which are mostly fixed in CVS)

[12:20] <theorbtwo> I'll try to take this into account the next time I write docs.  (I'm not planning on updating S::M; I'm aware of no bugs, and no users.)

[12:20] <Corion> ... I think I should add the "=head1 WHY" section to Sample::Module in the Pugs distribution :)

[12:20] <Schwern> theo:  If you find yourself writing docs like this "sort_coderefs takes an array-ref of source coderefs, and a single output coderef" realize its much more concise and easier to read to just express that as code.

[12:21] <Schwern> "sort_coderefs( \@sort_coderefs, \&output_coderef );"

[12:21] <Corion> Any better names than "= WHY" for this section ? "= RATIONALE" ?

[12:21] <Schwern> Or  sort_coderefs( [\&sort_coderef, ...], \&output_coderef );

[12:21] <Alias_> =head2 inside of =head1 DESCRIPTION

[12:22] <Schwern> theo:  The sort_coderefs() docs don't explain what @sort_coderefs is for.

[12:22] * Corion commits.

[12:23] <Schwern> theo:  And its not really clear why you allow multiple source coderefs.

[12:24] <theorbtwo> Hm, perhaps I ought to rerelease just for better docs, as if you don't have multiple source coderefs, there isn't any point.

[12:24] <theorbtwo> Merge sort takes several sorted sources, and merges into one sorted output.

[12:24] <Corion> theorbtwo ++

[12:24] <Schwern> theo:  Assume the reader doesn't know a damned thing about merge sort.

[12:25] <Schwern> In fact, modules named after algorithms are a red flag.

[12:25] <Corion> ... except maybe in the Algorithm:: namespace :)

[12:25] <Corion> A good day, Jouke!

[12:25] <Schwern> Sure

[12:26] <Schwern>   # Return all the tokens for the document

[12:26] <Schwern>   my $tokens = PPI::Tokenizer->all_tokens;

[12:26] <Schwern> What document?

[12:27] <Alias_> The Perl document... given that PPI is a Perl parser...

[12:27] <theorbtwo> Wouldn't it be a method on a document object, then?

[12:27] <Alias_> Anyone looking directly at PPI::Tokenizer is probably doing some hairly shit

[12:27] <Alias_> theorbtwo: Remember the "layers" Schwern was talking about

[12:28] <theorbtwo> Aye, Alias.

[12:28] <Alias_> theorbtwo: PPI::Document is what most people should be using

[12:28] <Schwern> Alias:  I would think it would be my $tokens = $Tokenizer->all_tokens;  no?

[12:28] <Schwern> Alias:  An object method

[12:28] <Alias_> oh... woopise

[12:28] <Alias_> ]right

[12:28] * Alias_ fixes

[12:28] <Schwern> :)

[12:28] <Alias_> I tend to write these things in one pass

[12:28] <Schwern> Well, the docs seem ok up to the point you start talking about how you optimized the thing.

[12:29] <Alias_> It's meant for the rare few that are going to actually play with it :)

[12:29] <Schwern> That all belongs at the BOTTOM

[12:29] <Alias_> hmm.. probably...

[12:29] <Alias_> =head1 NOTES?

[12:29] <Schwern> Tell me what it is and how to use it.  Then get into the design notes.

[12:29] <Schwern> NOTES, sure.

[12:30] * shapr sings 'concjunction junction, what's your function?'

[12:30] <shapr> o/~ conjunction junction, what's your type signature? o/~

[12:30] <Schwern> For method documentation I like to show the method in use.  Makes it easier to document the return value.

[12:31] <Schwern> $is_incremented = $tokenizer->increment_cursor;

[12:31] <Schwern> It also has the handy task of suggesting a vocabulary.

[12:31] <jabbot> pugs - 1470 - Added 'WHY' section to Sample::Module

[12:32] <Schwern> my $tokens = $tokenizer->all_tokens;

[12:41] <jabbot> pugs - 1471 - Ported Text::Greeking 0.11 (complete wit

[12:45] <theorbtwo> Oh, that sort of greeking...

[12:51] <jabbot> pugs - 1473 - Closed TMP file in Makefile.PL and util/

[12:51] <jabbot> pugs - 1472 - Kwidified last change, because the rest 

[12:52] <clkao> jobs

[12:52] <shapr> steve?

[12:53] <autrijus> hi!

[12:53] <theorbtwo> Hello, autrijus!

[12:54] <shapr> y0!

[12:55] <autrijus> how goes, lambdacamels? :)

[12:55] * shapr waves the pom-poms

[12:56] <shapr> Oh, do you have time to point me in the direction of a sane want.Type implementation? It looks like I can use the code in retEmpty, but I'm not sure how to mix it with the real operator code in opN

[12:57] <autrijus> want.Type.

[12:57] <autrijus> good question!

[12:57] <autrijus> op0 "Want::type" = \_ -> do

[12:58] <autrijus>     return . VStr =<< asks envContext

[12:58] <autrijus> done :)

[12:58] <shapr> wow

[12:58] <theorbtwo> Why is that a =<< rather then just return . VStr $ asks envContex ?

[13:00] <autrijus> because "asks envContext" is a Eval VStr

[13:00] <autrijus> but we want VStr

[13:00] <autrijus> so we need to reduce it

[13:00] <autrijus> i.e. take the Eval away

[13:00] <autrijus> the standard way to take Eval away is by using =<<

[13:00] <autrijus> because Eval is a monad

[13:00] <autrijus> and you can use =<< to take a monad prefix away

[13:00] <autrijus> it's like saying

[13:01] <autrijus>     cxt <- asks envContext

[13:01] <autrijus>     return . VStr $ cxt

[13:01] <autrijus> basically haskell distinguishes from "something that evalates to a string"

[13:01] <autrijus> like readline($fh)

[13:01] <autrijus> from "something that is a string"

[13:02] * theorbtwo nods.

[13:02] <autrijus> like 'foo'

[13:02] <autrijus> where here 'evaluate' means 'performed in some monad'

[13:02] <theorbtwo> So you need to use <-, >>= or =<< to actually do the evaluation.

[13:03] <autrijus> exactly.

[13:04] <shapr> btw, is initSyms a string for UTF8 and perldoc reasons?

[13:04] <Corion> autrijus: pugs -Imodules/LWP-Simple/lib -MLWP::Simple -e "say get('http://pugscode.org')"

[13:04] <autrijus> uhm, it's just a hack.

[13:04] <Corion> ... for some reason, getprint() doesn't works.

[13:05] <autrijus> Corion: !

[13:05] <autrijus> Corion: move it to ext/? :)

[13:05] <autrijus> (since it actually works)

[13:05] <Corion> autrijus: It's still faked/hacked, as mirror() and getstore() and get() are basically the same :)

[13:05] <autrijus> I don't mind :)

[13:05] <autrijus> I'll do the mv.

[13:05] <Corion> autrijus: So I don't know. But get() and head() work, except if you have a proxy. :)

[13:06] <autrijus> you ok with the move?

[13:06] <Corion> autrijus: Sure :)

[13:06] <autrijus> it will be run as part of pugs test tho

[13:06] <autrijus> the tests I mean

[13:06] <Corion> autrijus: I don't mind. The tests connect to the outside world though. That might be a concern for others.

[13:07] <autrijus> yeah.

[13:07] <theorbtwo> They should probably be made to skip if the proxy env vars are set.

[13:07] <autrijus> I wonder if you skip it unless a env is set

[13:07] <autrijus> alternatively, set up a http server using async

[13:07] <Corion> theorbtwo: Hmmmm - interesting idea.

[13:08] <theorbtwo> I just meant for release.

[13:08] <Corion> autrijus: I'm in the process of doing that, for testing the proxy features. But it might be prudent to do so in all cases.

[13:08] <autrijus> ok, please do

[13:08] <autrijus> you have a couple hrs :)

[13:08] <autrijus> I've done the move

[13:08] <autrijus> hi asavige!

[13:08] <Corion> But introducing an %ENV variable to allow/disallow net access is a good idea

[13:08] <autrijus> $ENV{PUGS_TEST_NETWORK}

[13:08] <Corion> Ugh. I wanted to go outside now :) Oh well - I'll look if I can hack up local tests within the next 30 minutes :)

[13:08] <autrijus> $ENV{PUGS_TESTS_NET}

[13:09] <autrijus> no rush :) worst case I'll just delist that test from MANIFEST.

[13:09] <Corion> PUGS_ALLOW_NETWORK_TEST ?

[13:09] <autrijus> not a big deal

[13:09] <autrijus> PUGS_TESTS_ALLOW_NETWORK

[13:09] <autrijus> (want to have common prefix)

[13:09] <Corion> autrijus: I like that.

[13:09] <asavige> hi autrijus, you better check my change to Makefile.PL/config_h.pl, just closed TMP to avoid Win32 error, hope I did not misunderstand this code.

[13:09] <autrijus> you did not

[13:10] <autrijus> thanks!

[13:10] <autrijus> so win32 builds?

[13:10] <asavige> yep, looks good

[13:10] <autrijus> wonderful

[13:10] <Corion> autrijus: Of course. Otherwise I wouldn't be using Pugs :)

[13:10] <Corion> Hmmm. svn does not delete local files? Because my svn up only added the new stuff below ext/ but didn't remove modules/LWP-Simple

[13:11] <Corion> Or did you make the move in two steps and I only svn upped at the wrong time ?

[13:11] <theorbtwo> It doesn't.

[13:11] <autrijus> you need to rm them yourself

[13:11] <autrijus> it only deletes versioned files

[13:11] <Corion> theorbtwo: Oh. So from time to time I should check out a fresh version, just to remove all the cruft.

[13:11] <autrijus> that works too

[13:11] <jabbot> pugs - 1475 - * fix typo

[13:11] <jabbot> pugs - 1474 - * LWP::Simple works, so is in ext/

[13:12] <theorbtwo> You can also rm a subtree and svn up.

[13:12] <theorbtwo> Er, deltree to you, I suppose.

[13:14] <Corion> theorbtwo: perl -MExtUtils::Command -e rm_f :-)

[13:14] <theorbtwo> Noooo!

[13:14] <theorbtwo> Anyway, you wanted rm_rf.

[13:14] <castaway> *g*

[13:19] <clkao> Alias_ feel free to ask about svk internals

[13:19] <Alias_> clkao: My main one was how you define the list of functions which any given driver needs to perform

[13:20] <Alias_> clkao: After talking to autrijus, he seemed to imply they were specific "tasks", rather than capabilities

[13:20] <Alias_> "import into foo"

[13:20] <Alias_> etc etc

[13:20] <Alias_> And how you structure the object model for change data

[13:21] <Alias_> Which I think from memory doesn't exist, and is also defined by tasks?

[13:21] <Alias_> or rather "commands"

[13:21] <jabbot> pugs - 1476 - * interpolating method call needs ()

[13:23] <autrijus> ok, stevan is not around

[13:23] <autrijus> anyone want to volunteer to summarize ChangeLog for 6.0.14 from my journal and svn log? :)

[13:23] * autrijus is doing preflight for unTODO and review tests

[13:23] <Alias_> clkao: Or rather, that the SVK internals could be best described as a set of processes/tasks that are joined together in various ways, rather than any deep knowledge of the data itself

[13:25] <Alias_> ... which is how CVS Monitor does it. (and which has it's downsides as well)

[13:25] <Corion> Err. "last" is not yet implemented? :)

[13:25] <autrijus> Corion: last()

[13:25] <Corion> ah!

[13:25] <autrijus> bareword nullary is not implemented

[13:26] <autrijus> sorry :(

[13:26] <Alias_> clkao: Also, in SVK terminology, what is the difference between a "depot" and a "repository"

[13:28] <Alias_> Hey autrijus, if you happen to get the chance, at the YAPC hackfest, can you rope people into writing a manual for SVK :)

[13:28] <obra> Alias_: start with submitting a patch adding questions to svk help intro

[13:29] <Alias_> svk help into?

[13:29] * obra spent an evening of the hackfest doing svk docs

[13:29] <obra> intro

[13:29] <Alias_> I'm not so much interested in the svk front-end stuff, as in the backend stuff

[13:29] <obra> I think the frontend is more likely to get docced better first.

[13:29] <obra> but if you start with an outline of what you want to know, I bet it'll get filled in faster than saying "hey. this needs docs"

[13:30] <obra> might make sense to start on the wiki

[13:31] <Corion> Hacked a local test for LWP::Simple. I think.

[13:31] <jabbot> pugs - 1477 - LWP::Simple tests are now local unless %

[13:32] <autrijus> anyone remember if abs() still defaults to $_ w/o args?

[13:32] <autrijus> in perl6

[13:32] <Corion> Ooops. Building on Win32 currently is broken...

[13:32] <autrijus> Corion: how?

[13:33] <Corion> Seems like the tests don't execute. Looking at Makefile

[13:33] <Corion> Ah. ERROR from evaluation of C:\Projekte\pugs-auth\ext\LWP-Simple/Makefile.PL:

[13:33] <Corion> Can't locate Perl6/MakeMaker.pm in @INC

[13:33] <Corion> so that's my fault I guess :(

[13:34] <autrijus> hrmph

[13:34] <autrijus> weird, Perl6::MakeMaker needs to be installed by pugs

[13:34] <iblech> Hi, my gateway is still b0rked, so don't be surprised if my IRC connection dies unexpectedly. /me noticed a bootstrapping problem with LWP::Simple now being in ext/: When there's no pugs executable yet, perl Makefile.PL will generate some warnings, because Perl6::MakeMaker tries to execute pugs, which is not compiled yet...

[13:35] <iblech> Corion: Try perl -Ilib Makefile.PL

[13:35] <iblech> (That'

[13:35] <Corion> Ugh. Hen-and-Egg problem. Easy fix is to take LWP::Simple out of the loop again.

[13:35] <iblech> s the same probleme, I guess)

[13:35] <Corion> Ah. Now it builds. With "perl -Ilib -w Makefile.PL && nmake test"

[13:36] <Corion> So Makefile.PL needs a "use lib 'lib'" ? :)

[13:36] <Corion> Anyway. I should actually look at my Makefile.PL instead of cargo-culting it from somewhere else (Sample::Module)

[13:36] <autrijus> go ahead :)

[13:36] <Corion> I'll patch the main Makefile.PL and then leave.

[13:36] <autrijus> k.

[13:37] <iblech> Hm... with the "use lib 'lib'"-patch perl Makefile.PL does run, but still generates some warnings while writing the Makefile for LWP::Simple

[13:37] <Corion> iblech: Yup :(

[13:38] <Corion> r1478 has the patch. I'm away now - maybe it's safer to take out LWP::Simple :)

[13:38] <castaway> later Corion ;)

[13:38] <Corion> &

[13:41] * Alias_ updates the SVK Glossary with lots of blanks

[13:41] <jabbot> pugs - 1478 - Added 'use lib qw(lib)' to main Makefile

[13:52] <jabbot> pugs - 1480 - * the last change made abs() work

[13:52] <jabbot> pugs - 1479 - * add $_ defaulting to most builtins

[13:57] <clkao> Alias_: sec. i'll fill the glossary later

[13:57] <Alias_> clkao: Thanks

[13:58] <Alias_> Once everything everywhere in SVK is defined to the nth degree, live should be much easier

[13:59] <Alias_> life

[14:00] <shapr> Can I claim that the Pugs project is "led by autrijus" ?

[14:01] <obra> yes

[14:01] <shapr> ok

[14:01] <Alias_> Benevolantly dictated to by

[14:01] <shapr> heh

[14:01] <Alias_> more accurate :)

[14:05] <clkao> autrijus: now where are you going to again?

[14:07] <shapr> I prefer the gmane.org webinterface over the yahoogroups webinterface.

[14:14] <autrijus> clkao: and whither then? I cannot say

[14:15] <clkao> orz

[14:26] *** Aankh|Clone is now known as Aankhen``

[14:29] <sri_> someone already porting File::Spec and File::Find?

[14:30] <shapr> Does perl6 have hyperfunctions?

[14:33] <autrijus> hyperfunctions?

[14:34] <shapr> I thought someone here mentioned hyperfunctions yesterday. If they really did, I was going to ask if they're the hyperfunctions I've seen elsewhere.

[14:35] <theorbtwo> Hm, if you mean functions that take functions as arguments, the answer I think is "yes, of course".

[14:35] <theorbtwo> p6 has hyperoperators, which is prossibly what you heard mentioned, though.

[14:35] <shapr> Oh, maybe so. I'll ask google about hyperoperators.

[14:36] <theorbtwo> Limbic: ".member.p3m"?

[14:36] <shapr> Is there an example of a test that calls a function like foo::bar ? Like, a test for cwd?

[14:37] <Limbic_Region> theorbtwo - you aren't familiar with the IRC Perl Mongers?

[14:37] <theorbtwo> Ah.

[14:37] <theorbtwo> As in hash-pound-perl.

[14:37] <Limbic_Region> http://pound-perl.pm.org/

[14:39] <theorbtwo> I'm vaugely fimilar, I just didn't associate p3m with pound perl pm.

[14:39] * Limbic_Region was recently recruited

[14:39] <Limbic_Region> though it appears to be fairly inactive

[14:39] <Limbic_Region> suits me just fine ATM

[14:39] * theorbtwo nods.

[14:41] <jabbot> pugs - 1481 - Added more tests to t/operators/short_ci

[14:44] <shapr> oh, I just call it directly like that "Foo::bar()", neat.

[14:52] <Corion> sri_: File::Spec is (somewhat) ported. File::Find should die and be replaced by File::Find::Rule IMO

[14:52] <Corion> The File::Find interface was never a good idea.

[14:53] <Corion> ... or maybe it should be replaced by something entirely different. IO::All, while being a bad idea in general, has a nice directory tree abstraction.

[14:54] <Limbic_Region> Corion - what about merlyn's File::Finder (which is admittedly a better interface wrapper around File::Find)

[14:55] <Corion> Limbic_Region: Yes, that API wouldn't be bad either, if we go with such an interface.

[14:55] <sri_> Corion: File::Find::Rule uses File::Find

[14:55] <Corion> sri_: I'm talking about the API.

[14:55] <sri_> mhm

[14:55] <Corion> sri_: And the API of File::Find is so bad it shouldn't live as its own module.

[14:56] <Corion> IO::All has the nice idea of presenting a directory as a list of IO::All objects, so you have a (lazy) tree of directories. Together with tree walking iterators, that could be nice. But I'm not totally convinced.

[14:56] <Limbic_Region> IIRC, there was a node at the Monastery about what was wrong with File::Find and how they fixed it 

[14:56] * Limbic_Region goes to look

[14:57] <pjcj> w

[14:57] <shapr> x

[14:58] <Limbic_Region> http://www.perlmonks.org/?node_id=109068 # In case anyone wants research information for a better File::Find

[14:58] <pjcj> that was half of a :w that went astray  --  don't know where the other half went ;-)

[15:00] <shapr> Geez, registered ecc memory is expensive.

[15:11] <jabbot> pugs - 1483 - Ported example.pl of Text::Typoifier, to

[15:11] <jabbot> pugs - 1482 - Ported Text::Typoifier 0.04a.

[15:41] <jabbot> pugs - 1486 - Don't panic, read README :)

[15:41] <jabbot> pugs - 1485 - Explanation of the missing modules

[15:41] <jabbot> pugs - 1484 - Ported Perl6::Bible to Perl 6 :)

[16:00] * gaal doesn't panic, reads README

[16:00] <gaal> wow, freepan.

[16:01] <kungfuftr> moo

[16:01] <gaal> se

[16:01] <jabbot> pugs - 1487 - Moved to FreePAN.

[16:02] * kungfuftr needs to redo the auto-smoke stuff

[16:02] <kungfuftr> =0/

[16:06] <gaal> backlogging... re: file find - just last thursday i was so bummed by that module i implemented the subset i needed inline in my code :(

[16:31] <kungfuftr> hhhmmm... how's bitwise string assignment work in perl6? (ie: $string &= 07777) ?

[16:33] <autrijus> +&=

[16:33] <autrijus> I think.

[16:34] <autrijus> ~&= for the str form

[16:35] <kungfuftr> taa

[16:38] <kungfuftr> bah... what happened to al the modules?

[16:41] <autrijus> read the README?

[16:42] *** autrijus changes topic to: Don't panic, read modules/README |  pugscode.org <<Overview Journal Logs>> | pugs.kwiki.org | smoke: http://xrl.us/fmw2 | win2k:r1468(234/3876) Linux:r1302(193/3383) MacOSX:r1342(189/3478)

[16:42] <kungfuftr> ah

[16:43] <autrijus> fortunately this happens before modules/ exceeded several megabytes :)

[16:44] <kungfuftr> heh

[16:48] <gaal> autrijus, when do you plan on starting the release checks?

[16:48] <autrijus> gaal: in a hour

[16:48] <gaal> okay, good, i'll be home by then :)

[16:48] <autrijus> :)

[16:49] <gaal> the results of 'time make' have increased significantly lately :(

[16:49] <autrijus> tried "make unoptimized" ?

[16:49] <gaal> if i do that, makte test will be slow :)

[16:50] <gaal> but maybe on my slow machine it's better.

[16:50] <autrijus> benchmark and see :)

[16:50] <autrijus> also test "make optimized"

[16:50] <gaal> will.

[16:50] <autrijus> but anyway, I expect runtime to be faster next week

[16:50] <gaal> make optimized is no longer a target, i htink?

[16:50] <autrijus> with on the fly compilation landing

[16:50] <autrijus> it is, no?

[16:50] <gaal> i *think* it gave me an error this morning

[16:51] <autrijus> I'd like to know that error

[16:51] <gaal> but "morning" implies "too little coffee", so i may be wrong.

[16:51] <gaal> hold on, ssh++

[16:51] <gaal> hmm, no, it's okay now.

[16:51] <autrijus> coolio

[16:51] <gaal> but i did svn up sometime.

[16:52] <gaal> maybe i had just mispelled "optimized" as, i don't know "omg i want more sleep"

[16:53] <autrijus> :D

[16:54] <gaal> they changed the clock over to daylight savings. did nothingmuch tell you guys about the insane way DST is scheduled in Israel?

[16:55] <gaal> it's decided every year all over again, sometimes only a few weeks before the actual clock change.

[16:56] <gaal> in most countries it's a date that never changes, say the equinoxes, and in others it's decided every three-four years in advence.

[16:56] <gaal> but here it's a subject for political debate every time over.

[16:57] <gaal> the thing is that religious people whose prayers begin around dawn have to start their days at the same time, absolutely speaking, no matter what the wall clock says.

[16:57] <castaway> funky

[16:58] <castaway> why dont they just not have it then (dst), some countries dont

[16:58] <theorbtwo> Well, the same time sun-rel.

[16:58] <gaal> but if the clock moves, most shops and services would close an hour eariler, as far as they're concerned; which means that by the time they finish work, they suffer the inconvenience of less time to do Stuff.

[17:00] <theorbtwo> Not going to DST doesn't help that, though -- the time of sunrise and set still changes, and the days still get shorter and longer.

[17:00] <gaal> DST is beneficial in terms of energy use.

[17:00] <theorbtwo> I know.

[17:00] <gaal> it helps put the industry closer to the daylight 

[17:01] <gaal> to2, that was an answer to castaway

[17:01] <theorbtwo> Ah.

[17:01] <theorbtwo> Hm, what's your longitude?

[17:01] <jabbot> pugs - 1488 - * rx:perl5:g// match landed.

[17:02] <gaal> so yes, shorter and longer, sure; and in fact summer should have been *easier* on the people who pray bacuse their day starts early, and thus ends potentially before everyone else's

[17:03] <gaal> 34􏿽xB0 46'E, to2

[17:03] <gaal> Latitude 32􏿽xB0 05' N

[17:03] <theorbtwo> Er, right, I meant lat.

[17:03] <gaal> that's tel-aviv

[17:03] <gaal> but it's a tiny country :)

[17:04] <theorbtwo> Oh, further N then I thought.

[17:04] <gaal> so, the annoying bit for sysadmins (and actually Real Life admins everywhere) is how they need to stay updated all the ime and sometimes can't plan htings in advance.

[17:05] <theorbtwo> Yep.

[17:06] <gaal> but they real funny thing, an example of how ludicorous things can get here, last year (or was it this year?) there was a proposal tabled in parliament to make a one-day "hole" in DST, just for the Day of Atonement, so that the fast would be subjectively shorter by one hour. (!)

[17:06] <shapr> that's wild

[17:06] <gaal> that motion almost passed

[17:06] <gaal> s/cor/cr/

[17:07] <theorbtwo> What?

[17:07] <theorbtwo> That's crazy.

[17:07] <gaal> told you :)

[17:07] <gaal> now, i'm really a fan of database-schema-breaking phenomena.

[17:07] <theorbtwo> You know, if I were religious, I'd call everybody who supported that irreligious.

[17:08] <theorbtwo> G-d told us to attone for a day, and dammit, He meant a whole day when he said it!

[17:08] <shapr> I am religious, and I think people can be as picky as they like as long as they don't apply their pickiness to others.

[17:08] <gaal> i mean, tell me a country spent money fixing their databases to support single-sex marriages ("two mommy fields!? we can't do *that*!"), and i'll actually be glad

[17:09] <shapr> Like, if someone says that it's important for them to take exactly 24 hours, that's cool with me. Or if they're only awake for four hours because they have a flu, that's cool with me too.

[17:09] <gaal> (irrespective of my personal substantive opinion of single sex marriages)

[17:09] <gaal> i just like the idea of weird things like that

[17:09] <gaal> but in this case, this is insane :)

[17:09] <shapr> I think people should choose for themselves, not others.

[17:10] <shapr> Of course, I won't decide that for you ;-)

[17:10] <gaal> shapr, that makes sense; but then you don't need everybody to change their DST bit.

[17:11] <gaal> the thing is that prayer is a communal thing (at least in the religion that defines the day of atonement)

[17:11] <gaal> and you have to wake up in time for prayer along with everyone else

[17:11] <gaal> the communality of it is kinda intrinsic to the religion.

[17:11] <shapr> Silly question, do they sell digital 'sundial' clocks in .il?

[17:12] <shapr> That sort of clock would seem sensible.

[17:12] <shapr> Where you could set an alarm like "wake me up one hour before sunrise" and not have to worry so much about the number.

[17:13] <gaal> that's a nice idea

[17:13] <gaal> and being digital, the sundial can work even when the sun isn't up :)

[17:13] <shapr> You could probably write one in Perl...

[17:13] <shapr> Right!

[17:13] <gaal> newspapers here carry the start of twilight every weekend, in time for the Sabbath.

[17:14] <gaal> you know it changes by 0-3 minutes daily

[17:14] <shapr> And you could set that sort of alarm to go off every year, day, etc and it wouldn't depend on DST for that year.

[17:14] <shapr> I'm sure you can find tables that will give you sunrise/sunset for a given latitude.

[17:14] <gaal> (incidentally, the change is sinusoidal)

[17:14] <gaal> yes, there are.

[17:15] <gaal> any decent almanac should carry them.

[17:15] <shapr> Yes the change irritates my sinuses too ;-)

[17:15] <putter> I gather there is a release comming up?

[17:15] * shapr sniggers

[17:15] <gaal> any decent Google does, too :)

[17:15] <elmex_> hm

[17:15] *** elmex_ is now known as elmex

[17:16] <gaal> i'm heading off home to make it to the preflights. see you soon

[17:17] <theorbtwo> See you soon, gaal.

[17:19] <putter> im trying a clean install, after removing every trace of pugs.  lib/Perl6/MakeMaker.pm is not happy...

[17:19] <autrijus> how so?

[17:21] <jabbot> pugs - 1489 - * huge TODOification

[17:21] <putter> with no pugs already present, get_perl6_libs is pattern matching undefs.

[17:22] <putter> havent checked yet whether brokenness propagates...

[17:23] <autrijus> good catch.

[17:27] <autrijus> putter: are you already in AUTHORS?

[17:31] <jabbot> pugs - 1490 - * putter noticed that Perl6::MakeMaker d

[17:32] <theorbtwo> Can someone who actually speaks Chinese (I'm looking at you, Autrijus) check that Kuang-che Wu's utf8 name is correct?

[17:32] <theorbtwo> The first character shows as ~ for me, and gives my emacs heartburn.

[17:32] <autrijus> it is correct.

[17:33] <theorbtwo> BTW, we're at 60 committers even, most frequent are autrijus, Stevan, ingy, nothingmuch, iblech.

[17:33] * shapr cheers

[17:33] <autrijus> that sounds about right

[17:34] <putter> autrijus:  if it is not a problem, let us leave me out for now.  I am just... puttering.

[17:34] <ingy> hi putter !

[17:34] <autrijus> putter: it is a problem and I fixed it

[17:35] <autrijus> putter: can you svn up and check?

[17:35] <autrijus> I'd like to add you to AUTHORS, because it's actually a significant breakage.

[17:35] <putter> ingy: hi :)

[17:35] <ingy> putter is an Inline patcher from back in the day

[17:36] <putter>  autrijus: no prob.  thanks.  re svn, has not been tested, but it should work, yes.

[17:36] <ingy> he wrote an alternative C parser to the P::RD one!

[17:37] <ingy> ok, I hate svn

[17:42] <jabbot> pugs - 1492 - * now, bump version

[17:42] <jabbot> pugs - 1491 - * try again at fixing this version mess

[17:43] * theorbtwo wonders what "version mess" the changelog refers to.

[17:43] * shapr throws a bunch of versions on the floor.

[17:43] <theorbtwo> Holy mother of...

[17:43] <theorbtwo> ingy: did you do modules/README?

[17:43] <gaal> hellooo:)

[17:44] <theorbtwo> Allo, gaal?

[17:44] <gaal> heya

[17:44] <theorbtwo> I've been iritable lately, sorry for yelling:

[17:44] <theorbtwo> WHAT THE HELL WERE YOU THINKING BY CREATING A BUNCH OF ACCOUNTS AND BROADCASTING THE PASSWORDS AS WIDELY AS POSSIBE?!?!?!

[17:45] <ingy> wiki style anarchy development

[17:45] <theorbtwo> Might I suggest that for any accounts that have the password 'pugs' you set the password to a random string and mail it to them?

[17:45] <ingy> this was autrijus idea actually

[17:46] <ingy> embrace the anarchy

[17:46] <theorbtwo> I have little problem embracing anarchy... the illusion of order is what worries me.

[17:46] <ingy> :)

[17:47] <ingy> there is quite a rash of worrying going about lately

[17:47] <theorbtwo> How do I change my freepan.org password?

[17:47] <gaal> to2, then just think of it as global commit access which you can turn off when you want

[17:47] <theorbtwo> I don't have a problem with that.

[17:47] <ingy> theorbtwo: we're working on that

[17:48] <castaway> if it was that, then why not just one repository, and one password/

[17:48] <obra> ingy, could you lock out my account until I can set my password?

[17:48] <theorbtwo> I just don't want anybody who comes along to be able to commit code in my name.

[17:48] <theorbtwo> Mine as well.

[17:48] <ingy> obra: to know who is commiting what

[17:48] <theorbtwo> But if anybody who comes along knows my password, then you don't know who is committing what.

[17:48] <obra> misrely, ingy?

[17:48] <obra> reply

[17:49] <ingy> theorbtwo: same as a wiki no?

[17:49] <ingy> listen: everything is exactly as autrijus wished for now

[17:50] <theorbtwo> Same as some wikis.

[17:50] <theorbtwo> I never liked that feature about those wikis.

[17:51] <ingy> freepan will constantly improve over time. 

[17:51] <ingy> it is very much the pugs style of dev

[17:51] <theorbtwo> You should add this stuff to the FAQ.

[17:51] <theorbtwo> Well, except that the pugs style of dev has usernames and passwords for it's users.

[17:52] * gaal has svn uped and is doing prepreflight checks

[17:52] <castaway> does he want to know who is committing what, or not? because it seems you are claiming he does, yet setting up stuff which makes it useless.. 

[17:52] <castaway> (or so it looks from over here)

[17:52] <gaal> folks, it's not that bad!

[17:52] <autrijus> gaal: can you try unTODOing the failing test for me?

[17:52] <gaal> you can impersonate someone if you're malignant

[17:52] <gaal> but you aren't are you?

[17:52] <ingy> gaal++

[17:53] <gaal> autrijus, sure, what should i do?

[17:53] <autrijus> by "over time" I persume ingy means "this week"

[17:53] <ingy> :)

[17:53] <autrijus> so I'm totally fine with that.

[17:53] <castaway> No, I'm not, but I'm mindful that there are such out there, no matter how much we might prefer otherwise

[17:53] <theorbtwo> Exactly.  If I wanted to, I could check in code as "ingy" that did an rm -rf ~ when running the Makefile.PL of Perl6::Bible.

[17:53] <theorbtwo> Then I could come in here and complaign about what a total ass ingy was.

[17:54] <theorbtwo> Since the changelog clearly shows him putting the code in.

[17:54] <ingy> theorbtwo: but you won't

[17:54] <theorbtwo> No, I won't.

[17:54] <theorbtwo> But can you really say that about everybody who reads modules/README?

[17:54] <theorbtwo> Because all of those people know your password.

[17:54] <ingy> we'll see

[17:54] <gaal> most of the modules that have been moved aren't install-ready yet...

[17:54] <autrijus> we'll see. :)

[17:54] <ingy> autrijus++

[17:55] <castaway> (hmm, to go with it, you could use whatever nick on irc you felt like.. what fun ,)

[17:55] <putter> theorbtwo: all order of magnitude 100 of them?

[17:55] <gaal> autrijus, what do you want me to unTODO?

[17:55] <autrijus> gaal: anything that fails make test.

[17:55] <autrijus> :)

[17:55] <gaal> ...but if it fails, it isn't TODOed :)

[17:55] <gaal> you meant enTODO maybe?

[17:55] <theorbtwo> The only problematic thing about todoing tests is ones that pass for some and not others.

[17:56] <autrijus> enTODO with a comment

[17:56] <gaal> TODOify

[17:56] <autrijus> that says unTODO.

[17:56] <autrijus> TODOify is the word yes.

[17:56] <gaal> ah :)

[17:56] <autrijus> gaal++

[17:56] <gaal> TODOitate

[17:56] <gaal> TODOgrify

[17:56] <theorbtwo> TODOit, dude.

[17:56] <gaal> TODA!

[17:57] <gaal> beh, it's slightly different across platforms. I'll be doing this on my msys box since the cycle is much faster - but expect the UNEXPECTED PASS on other machines.

[17:58] <theorbtwo> Then it needs to be a skip, or commented out.

[17:58] <gaal> do we have skip already inTest.pm?

[17:58] <mugwump> we'll have a web interface for setting your svn password shortly.  until then, keep a lid on the situation.  tia.

[17:58] <autrijus> or Fixed.

[17:59] <theorbtwo> mugwump: cat's out of the bag.

[17:59] <gaal> okay, since my linux box is slow: i'll TODOify, ci, then you guys with a fast linux box can rectify my eager TODOs if you like.

[17:59] <autrijus> gaal: that's the spirit.

[17:59] <gaal> (make test still running)

[17:59] <gaal> TODOifying tests that've already been run)

[17:59] <mugwump> theorbtwo: ok, so once we get things working, go through your modules, check for any malicious commits and let us know.

[18:00] <mugwump> VCSes++

[18:01] <castaway> ones with actual control ;)

[18:01] <mugwump> you can't delete revisions, that's enough control for me.

[18:02] <mugwump> actually it's not, I want (and am designing now) gpg certificates.

[18:02] <mugwump> (a distribution system based on, that is)

[18:04] <gaal> t/builtins/io/io_in_for_loops seems to contain a fatal error after t25

[18:05] <gaal> t/builtins/io/io_in_while_loops.t a similar error after t11

[18:05] <gaal> i think pugs isn't closing a file correctly, or maybe not resetting the position of a file handle after it's been reused?

[18:05] <theorbtwo> I'd be happy with just normal username/password auth for people, and gpg sigs for distributions.

[18:06] <autrijus> gaal: I think it's later

[18:06] <autrijus> but it's not the time to fix it

[18:06] <autrijus> comment it out, todo_eval it, etc

[18:06] <autrijus> :)

[18:06] <gaal> what shall i do with the tests then? reduce plan and comment out?

[18:07] <gaal> ok

[18:09] <mugwump> gpg sigs will be on the mirror node level, to protect distribution.  If your project wants to sign distributions via Module::Signature or something, that can be done too

[18:09] *** Corion_ is now known as Corion

[18:09] <mugwump> at least, that is a plan that seems to work.  Briefly described at http://wiki.freepan.org/index.cgi?DistributionAndSecurity

[18:09] <mugwump> s/work/pan out/

[18:10] <theorbtwo> If somebody does a svn log|grep '^r[0-9]'|cut -d'|' -f2|sort|uniq -c|sort > comitters, and looks at the comitters file, all people listed after (IE more committs) then tiw are confirmed as in AUTHORS.

[18:11] <theorbtwo> tiw, and possibly some people with less commits then him/her, need to be added.

[18:11] <theorbtwo> I don't feel well, I'm heading to bed.

[18:11] <theorbtwo> G'night, good release, all.

[18:11] <autrijus> incidentally I'm also feeling that probably resuming releng after a few hour's sleep sounds like a good idea.

[18:11] <autrijus> gaal: are you up for playing stevan and help filling in ChangeLog a bit?

[18:12] <autrijus> just sort my journal entries (March 27 onward) and the svn logs a bit

[18:12] <autrijus> and fill them into ChangeLog in kwid syntax

[18:12] <autrijus> I'll polish it when I wake up

[18:13] <autrijus> gaal: alternatively, help me to find another helpful soul who can do it

[18:14] <gaal> i'd be happy to do it

[18:14] <autrijus> woot!

[18:14] <gaal> might take longer for me though

[18:14] <autrijus> gaal++

[18:14] <autrijus> that's fine, you have at least 8 hours :)

[18:14] <autrijus> and I'll pick up where you left off if you change your mind

[18:14] <gaal> ah, no more 15 minute sleeps, eh? :)

[18:14] <autrijus> gaal++ # can't thank you enough

[18:14] <theorbtwo> Give him metacommitter access and make^W let him do AUTHORS too.

[18:14] <gaal> lol

[18:14] <autrijus> eh, you don't have to be a metacommitter to change AUTHORS :)

[18:15] <theorbtwo> True, but being able to know "tiw"'s email address might make it easier to figure out who he is.

[18:15] <ingy> there are pugs on the tv

[18:15] <theorbtwo> I was about to, but I couldn't find the admin page on openfoundry.org

[18:15] <gaal> hm, why put someone's email in AUTHORS if they didn't ask for it there?

[18:15] <castaway> night folks

[18:16] <autrijus> theorbtwo: http://rt.openfoundry.org/Foundry/Project/Admin/?Queue=82

[18:16] <gaal> bye castaway

[18:16] <Corion> I see AUTHORS as the basic svn usage intelligence test :)

[18:16] <autrijus> then, "Members"

[18:16] <theorbtwo> And I decided that I hate everyone, so it'd probably be a good idea to sleep my hatred off.

[18:16] <autrijus> err, wrong project.

[18:16] <autrijus> theorbtwo: nite!

[18:16] <autrijus> the admin page for pugs is http://rt.openfoundry.org/Foundry/Project/Admin/Members/?Queue=270

[18:16] <putter> well, that's amusing.  fyi, ghc64 rpms for FedoraCore x86_64 are _not_ built interactive.  no ghci.  no templates.  so pugs' make complains "Template Haskell bracket illegal in a stage-1 compiler".  build vaguely looks ok though.

[18:17] <gaal> night to2

[18:17] <autrijus> putter: that's just bootstrap ghc I think

[18:17] <autrijus> you'd need to recompile ghc (I think)

[18:17] <gaal> i got a message about TH on msys too.

[18:17] <autrijus> but currently pugs works just fine without TH.

[18:17] <gaal> apparently the win32 (==msys doesn't have TH)

[18:17] <autrijus> in the future tho, compiling to IMC will likely require TH. we'll see how it plays out.

[18:18] <autrijus> but, sleep first. see you in a bit!

[18:18] <gaal> er, misplaced ). i should probably not cde in lisp.

[18:18] <autrijus> where a bit == 8~9 hrs

[18:18] <autrijus> &

[18:18] <gaal> bye autrijus.

[18:18] <Corion> While talking about compilers - my compiler (-Cbackend) test only tests -CParrot and -CPugs - is there any other backend, and how can I find if it is supported?

[18:18] <Corion> good night autrijus, castaway, theorbtwo

[18:19] <putter> bye autrijus.

[18:19] <autrijus> there's -CHaskell and it only supports hello world.

[18:19] <autrijus> *wave* &

[18:19] <theorbtwo> &

[18:20] <Corion> So I won't add a test for -CHaskell now ;)

[18:21] <gaal> aw, shucks, hunting failing tests in arith.t is sorta hard because it prints coords at an uninteresting place -- plus there are no test captions :(

[18:21] <gaal> binary search here i come!

[18:21] <gaal> alternatively, stack tomfoolery.

[18:21] <jabbot> pugs - 1493 - fix tests on win32

[18:22] <gaal> actually, there's a chance that this is a bug in goto! because it leaves a stack frame in place.

[18:22] <gaal> good thing autrijus already went to sleep, otherwise he'd have to stay awake and fix it. :p

[18:23] <putter> re ghc64... if you are trying to win friends and influence people, you create a distribution that just works... what part of that concept is hard? :(  actually, i'd be less grumpy if i didn't know the source doesn't build cleanly, and so its time for ghc debugging.  sigh.  maybe lunch instead.

[18:24] <gaal> putter, are you talking about TH? maye it bloats the distro and isn't used by most people?

[18:24] <gaal> (trying to be charitable. i don't really know haskell nor th to tell if that's the case.)

[18:26] <Corion> What is this TH thing about, really?

[18:27] <gaal> converts haskell to ASTs and back

[18:27] <Corion> gaal: Oooo - "and back" - cute :)

[18:27] <gaal> (that's my layman's understanding of it, anyway)

[18:27] <gaal> any lambdamoose in the chanell?

[18:28] <putter> gaal: sorry, i'm just complaining about ghc release practices.  no objection to th in pugs.  i just had one of those floor drops away moments, when you find A is broke and you need B, but you already know B is broke, requiring C, and suddenly you are several levels down a task stack from what you thought you were working on.  off to lunch.

[18:29] <Corion> Should all currently failling tests be demoted to todo_ tests ?

[18:29] <gaal> yes, i hate those too - i was saying, maybe the ghc ditributers felt most people woldn't want that

[18:29] <gaal> yes, corion, want to help me with that?

[18:29] <Corion> gaal: Yep - I'll just modify the pugsrun ones :)

[18:30] <gaal> okay. don't start anything else before telling me please so we don't overlap.

[18:30] <Corion> Do we mark the demoted tests anyway ? Like "# demoted for release" or something?

[18:30] <gaal> yes: say # unTODO

[18:30] <Corion> Okies

[18:31] <gaal> use that exactly please so that autrijus can grep for it.

[18:31] <Corion> that was my intention anyway :)

[18:31] <gaal> cool.

[18:31] <jabbot> pugs - 1494 - More tests TODOified in preparation for 

[18:32] <gaal> that was fast! :)

[18:32] <Corion> Hmmm. Why does Orkut think it needs to validate my secondary emails, to continue sending me mail?

[18:32] <Corion> That was not me :)

[18:33] <Corion> I'm just running make test to see if my demotions work

[18:33] <gaal> !@#$!#@$ arith.t! it turns out that a test is marked TODO, *if it has a description*! beh.

[18:34] <gaal> anyone know what the indented version number is for this release?

[18:36] <Corion> gaal: My change produces now lots of "unexpectedly succeeded" - is that OK or should I factor out the exact failing test into a unTODO (by breaking up the loop)?

[18:37] <gaal> oh, it's in a loop? that's tough :/ if it's not an uglifying refactor, refactor. if it is, comment out the existing code, and leave the ugly refactor there.

[18:38] <gaal> uh, i hope that wasn't confusing :)

[18:38] <gaal> i mean, you really want to avoid unexpected passes 

[18:38] <gaal> but don't mess up the code completely to make it terrible

[18:39] <gaal> so if you have to, do it, but leave the previous code in a comment

[18:39] <Corion> Okies - I'll fix it "in spirit" :)

[19:01] <jabbot> pugs - 1495 - Split up compiles into TODO and OK

[19:06] <mugwump> ok, if anyone wants a password for their freepan account, /msg me with it.

[19:07] <Corion> I want "pugs" :)))

[19:07] <gaal> *giggle*

[19:08] * gaal has a module there but it doesn't have an installer, so i can wait.

[19:08] <Corion> I also have a module there now it seems. I'm not sure if/why I want to have it on FreePAN if I am on CPAN already.

[19:09] <Corion> Except maybe FreePAN uses svn.

[19:09] <Odin-LAP> Hmm.

[19:09] <Odin-LAP> FreePAN?

[19:10] <gaal> Odin-LAP: see modules/README

[19:10] <Corion> Whoops. One of my tests fails when run via the harness, but not if run from the command line. :(

[19:10] <gaal> and don't panic :)

[19:10] <gaal> heh

[19:10] <gaal> same environment?

[19:10] <Odin-LAP> gaal: PANIC!

[19:11] * Odin-LAP grabs a copy of the hitchhiker's guide, and calms down.

[19:11] <gaal> :)

[19:11] <Corion> gaal: Yes. Missing libraries or something is the likely problem... A "push @INC, < ext/File-Spec/lib >" should help.

[19:11] <jabbot> pugs - 1496 - More cleanup - now skipping tests

[19:12] <gaal> "blib" might be better?

[19:12] <Corion> gaal: Oh - indeed

[19:13] <Corion> "prove" gets it right, but the smoke matrix wrapper doesn't :)

[19:13] <gaal> yaml_harness? i'll fix that

[19:13] <gaal> anyway see the FAQ in the wiki

[19:13] <gaal> which, come to thing of it, gets it wrong too :)

[19:13] <gaal> can someone fix that please? i'm still doing TODOs.

[19:14] <Corion> gaal: I'll look into it. But I might fail in doing the right thing.

[19:15] <gaal> that's why it's a wiki :)

[19:15] * Corion has an ingenious idea. Just dump @INC.perl.say from prove, and dump it from the harness, and look at the difference.

[19:15] <Corion> gaal: I was thinking about fixing the yaml harness, not the wiki

[19:15] <gaal> ah, i can do that, just give me a minute

[19:16] <gaal> or beat me to it, whichever you prefer :)

[19:16] <Corion> I stopped beating people

[19:17] <gaal> corion, was that commit up there your pugsrun work?

[19:17] <Corion> gaal: Yep, but there will be a second commit for these files.

[19:18] <Corion> gaal: And one in pugsbugs

[19:18] <gaal> weird, i got no fails in pugsbugs

[19:18] <Corion> BTW, my tests will now not run on Win9x anymore, because I'm now using STDERR redirecting syntax.

[19:18] <gaal> doesn't that work there?

[19:18] <Corion> gaal: I get one failure there in the YAML harness, so I fix that the same.

[19:18] <gaal> ....and pugs worked there until now? wow.

[19:18] <Corion> gaal: No, because Win9x does not have the new command shell that allows that.

[19:18] <Corion> gaal: I don't know, but I don't see any reason why it shouldn't have.

[19:19] <gaal> i thought you kinda needed an OS

[19:19] <Corion> gaal: And in principle it will still work, except now the shell will balk at the syntax errors.

[19:19] <Corion> gaal: Pugs doesn't need much of OS it seems.

[19:19] <gaal> PugsPilot.

[19:20] <Corion> gaal: Well, I assume it needs a memory manager and some non-broken memory layout. That rules the Palm out :)

[19:20] <Corion> All my tests committed (r1497)

[19:20] <Corion> Maybe we get a Pugs release with r1500 ? :)

[19:21] <Corion> So we need to stop at r1499 , so that autrijus can set the version number right :)

[19:21] <gaal> 1500? that's not a round number! (see: r1024)

[19:22] <jabbot> pugs - 1497 - More test fixes, Win9x support broken in

[19:22] <Corion> Ah. Well, we won't get to 2048, and I'm too lazy to find anything close and interesting :)

[19:23] <gaal> 2**10.5

[19:23] <Corion> too late, according to perl

[19:24] <gaal> so i guess you're free to ci all you want :)

[19:25] <gaal> iblech, you there?

[19:27] <gaal> we both spent time TODOified the same annoying file :(

[19:28] <Corion> Greener pastures - http://datenzoo.de/pugs/win2k.html

[19:29] <gaal> oo! pritty css.

[19:29] <gaal> hadn't seen that in a few days

[19:30] <Corion> I try to keep it updated regularly, but it is still a two-step thing.

[19:31] <Corion> ... because the files travel over two machines, triggered by two manual steps.

[19:31] <Corion> ... but setting up a passwordless ssh is even more work :)

[19:32] <gaal> false laziness. http://www.brandonhutchinson.com/Passwordless_ssh_logins.html

[19:32] <jabbot> pugs - 1498 - TODOify tests in prep for release (t/io)

[19:34] <Juerd> gaal: It helps when automating backups though :)

[19:35] <mugwump> OK, open committing problem is sorted guys ... sorry 'bout that :-}]

[19:35] <gaal> what does, Jeurd, not having passwordless login?

[19:35] <Juerd> No, having them

[19:36] <gaal> Corion, I've ci'ed all my TODO work.

[19:36] <gaal> yes, that's why i said it's false laziness not to set it up

[19:36] <gaal> when you need it that is.

[19:36] <Juerd> Oh, I misinterpreted that then

[19:36] <Corion> gaal: But that would mean installing cygwin, for ssh.

[19:36] <Juerd> Corion: Why?

[19:36] <Corion> ... and doing the keygen dance again, that is, searching for the oneliner that sets it up.

[19:36] <gaal> msys has ssh

[19:36] <gaal> that, yes.

[19:36] <Corion> Juerd: Because I don't have cygwin installed on the machine.

[19:37] <Juerd> Doesn't putty do this?

[19:37] <Corion> Juerd: There is plink, true.

[19:37] <gaal> pscp

[19:37] <Corion> but I haven't used it.

[19:37] <Corion> gaal: PSCP won't start a command on the remote side.

[19:37] <Juerd> pscp works but is, compared to normal scp, very slow.

[19:37] <gaal> (putty and friends)++

[19:37] <Corion> For file copying, I have SMB

[19:37] <gaal> oh, i didn't know that

[19:37] <Juerd> Corion: That's about as slow

[19:38] <Corion> Juerd: It's not a matter of speed.

[19:39] <Juerd> With 40% speed loss, it should :)

[19:39] <myren> parrot has something like pointers right?

[19:39] <myren> this pointerless .net nad java shit has to die

[19:39] <myren> preferably a grizzly death

[19:40] <Corion> Juerd: No, not to me. What do I care with a 100Mbps network, and a single user, about 600k bytes getting transferred 40% slower?

[19:40] <Corion> myren: ???

[19:40] <Corion> pointers are useless. References all the way, baby!

[19:41] <myren> i've always failed to understand the difference

[19:41] <Corion> I guess that's your problem with C# and Java.

[19:41] <Juerd> myren: pointers point to memory locations only

[19:41] <Corion> myren: What do you need pointers for?

[19:41] <Juerd> myren: Which means that if there happens to be other data there than you expect, things go wrong terribly.

[19:41] <myren> the advantage of references is that they can move as the object moves, but pointers dont explicitly lack that functionality

[19:42] <jabbot> pugs - 1499 - two more unTODOs in arith.t

[19:42] <myren> .net is making life difficult because i'm trying to build an inversion of control system

[19:42] <Juerd> (Note that PHP's "references" are pointers or symbolic, much like how its "arrays" are really hashes)

[19:42] <myren> and as it stands its very difficult for both copies to maintain a proper link to the other item

[19:42] <myren> both ends

[19:43] <Corion> myren: Use a central "broker" with symbolic references maybe.

[19:43] <Corion> Or hand out tokens (which is a symbolic system anyway)

[19:43] * Corion goes to look at the Driv3r demo

[19:45] <metaperl> ingy, you hate svn?

[19:45] <metaperl> why is that?

[19:53] *** gaal changes topic to: Don't panic, read modules/README | TODOification for release |  pugscode.org <<Overview Journal Logs>> | pugs.kwiki.org | smoke: http://xrl.us/fmw2 | xp/msys:r 1499(123/3846) win2k:r1468(234/3876) Linux:r1302(193/3383) MacOSX:r1342(189/3478)

[19:53] <gaal> Corion, ci your TODOs, that's 123 tests and r1500 :)

[19:54] <Corion> My todos are in already :)

[19:54] <gaal> really? i svn upped just a few minutes ago

[19:54] <gaal> how come i still have fails there?

[19:55] <gaal> oh, i know why. i'll fix it then.

[20:04] <Corion> gaal: Heh. I get two unexpected successes in arith.t :)

[20:05] <gaal> urgh!? uh, oh: no i know why i got a conflict with iblech :(

[20:05] <gaal> it's platform dependent apparently.

[20:05] <gaal> i'll fix it.

[20:05] <gaal> gimmie a minute

[20:06] <Corion> gaal: Relax :)

[20:06] <gaal> what numbers unex succeed for you?

[20:06] <Corion> gaal: Dunno - I only saw the report on make test

[20:06] <Corion> I'll check

[20:08] <Corion> #148 : Inf/Inf NaN != NaN and #149 too

[20:09] <gaal> Corion++

[20:09] <gaal> thanks

[20:18] <Corion> gaal: Ooops - yes - my OS checks suck :)

[20:19] *** gaal changes topic to: Don't panic, read modules/README | TODOification for release |  pugscode.org <<Overview Journal Logs>> | pugs.kwiki.org | smoke: http://xrl.us/fmw2 | xp/msys:r1501(all 3846 pass) win2k:r1468(234/3876) Linux:r1302(193/3383) MacOSX:r1342(189/3478)

[20:19] <Corion> I expect 100% pass as well :)

[20:19] <gaal> r1501. all tests should pass, please smoke.

[20:19] <Corion> Why is it that Win32 is the best tested platform? Or are Win32 users just keen on updating?

[20:20] <gaal> they're just /topic-happy :)

[20:20] <Corion> gaal: :)'

[20:20] <gaal> but as you can see w2k fails the most tests.

[20:20] <gaal> (that's before the todo)

[20:21] <Alias_> Or Win32 are the most nervous about things failing

[20:21] <Alias_> Given the track record of Perl 5

[20:21] <gaal> off to changelog. refilling tea.

[20:21] <Corion> gaal: Because other OS people don't update the topic :)

[20:21] <jabbot> pugs - 1501 - TODOify two platform-dependent tests

[20:21] <jabbot> pugs - 1500 - win32 test fixes

[20:23] <Corion> Ooops. t/Dialects/perlego/isrw.t fails I think.

[20:23] <Corion> ... but that's under the YAML harness

[20:24] <gaal> then the -X default should include it. :P

[20:24] <gaal> say, what was the other thing you needed in the yaml harness? i forgot

[20:25] <Corion> gaal: I think the yaml harness does set @INC differently from how prove does it

[20:25] <gaal> ah, yes. lessee.

[20:26] <gaal> it just doesn't set it at all.

[20:26] <gaal> so to the environment thing as suggested in the faq.

[20:31] <Corion> t/data_types/array-parse-error.t fails with a parseerror

[20:31] <Corion> (for me, GHC 6.4)

[20:31] <gaal> platform?

[20:31] <Corion> MSWin32

[20:31] <gaal> activeperl?

[20:31] <Corion> No, own Perl

[20:31] <gaal> native win?

[20:32] <Corion> gaal: Yep

[20:32] <Corion> (but the error itself comes from Pugs, of course)

[20:32] <gaal> wow, you're like the only person in the world who does that :)

[20:32] <gaal> yes, of course

[20:32] <Alias_> Acme::MorningMusume++ # Wot a laff

[20:32] <gaal> but this worksforme

[20:32] <Corion> gaal: Does what? Compile my own Perl? I just don't believe in binary compatibility :)

[20:32] <gaal> on win32 at least.

[20:32] <Corion> gaal: I'll look at it closer. But the error message I see during "nmake test" points to a Pugs parsefail

[20:33] <gaal> i've compiled perls on... hmm, linux, solaris, aix, *not* hpux thankfully, and probably some others.

[20:34] <Khisanth> Alias_: what the heck does that do?

[20:34] <gaal> umm, Corion, i don't have that file?

[20:35] <Alias_> Khisanth: http://search.cpan.org/~kentaro/Acme-MorningMusume-0.01/lib/Acme/MorningMusume.pm

[20:35] <Corion> gaal: Then maybe it got deleted :) I'll remove it locally and svn up :)

[20:35] <Alias_> Someone should port that to Perl 6, just to that we have an Acme module :)

[20:35] <Alias_> s/to/so/

[20:35] <Khisanth> obsessed fan!

[20:35] <Corion> gaal: Yes, it was a stale file :)

[20:35] * gaal wanted to upload an Acme on 1 April, but got cold feet

[20:35] <Corion> so MSWin32 is 100% clean too.

[20:36] <gaal> cool. i'll try my linux box, should only take till morning or so :)

[20:36] *** Corion changes topic to: Don't panic, read modules/README | TODOification for release |  pugscode.org <<Overview Journal Logs>> | pugs.kwiki.org | smoke: http://xrl.us/fmw2 | xp/msys:r1501(all 3846 pass) win2k:r1501(all 3846 pass) Linux:r1302(193/3383) MacOSX:r1342(189/3478)

[20:36] * Alias_ thinks of writing to the author to suggest wrapping Acme::MorningMusume around Data::Vitals so each band member object can return Chest and Waist and Hips size objects

[20:36] <Corion> gaal: I've been too lazy to install GHC 6.4 on my Linux box :)

[20:37] <crysflame> Alias++

[20:37] <gaal> Corion, distro?

[20:37] <Corion> We should turn Test.pm into a bug management system, with more categories than just ok() and todo_ok() :-)))

[20:37] <Corion> gaal: Debian stable

[20:37] <crysflame> heh, todo_wontfix()

[20:37] <gaal> ok_i_think_but_ask_autrijus

[20:37] <Alias_> fixme_ok?

[20:37] <Corion> crysflame: :-))

[20:37] <crysflame> fixme_asap_or_the_world_gets_it

[20:37] <Alias_> fixme_thankyou_come_again!

[20:37] <Corion> breaks_build_ok()

[20:38] <gaal> Corion, interesting. You compile your own perl on win32, yet you run debian *stable*.

[20:38] <Corion> gaal: Yes. I use the linux box as fileserver. I'm not interested in tinkering with it.

[20:38] <gaal> i doubt 6.4 made it to backports. :p

[20:38] <Corion> Any OS is mostly a way to run Perl for me.

[20:39] <Corion> ... and maybe a browser, mail client, ssh.

[20:39] <Corion> And ssh is needed to run Perl on other machines.

[20:40] * Corion &

[20:40] <gaal> Net::SSH ::p

[21:23] <gaal> Most of the ChangeLog work is done; I got glassy-eyed over the bugfixes and tests. Autrijus, when you backlog -- fix my XXX at the least. :)

[21:24] <gaal> Also I didn't know what to tell of modules now that they've been moved. (Apart from the fact that they *have* been moved!)

[21:24] * gaal zzzz

[21:31] <jabbot> pugs - 1502 - Towards 6.0.14 ChangeLog (needs cleanup)

[22:03] <Darren_Duncan> Now that it is no longer being done in Pugs, I'm thinking to start my own regular distribution of my Perl 6 ports on CPAN ...

[22:04] <Darren_Duncan> Reminiscent of the previous Pugs release, I plan to put all my Perl 6 stuff in a single distro during the time that it doesn't compile

[22:04] <Darren_Duncan> I thought of naming that distro Perl6-Incubator-DUNCAND ...

[22:05] <Darren_Duncan> The third part is my CPAN id, and anyone else could name their own similar distro the same but with the different ending

[22:06] <Darren_Duncan> Does that seem like an appropriate name, or are any of you aware of someone else wanting to use 'Perl6-Incubator' for another purpose?

[22:06] <Darren_Duncan> This would be a temporary distro in any event

[22:07] <Darren_Duncan> It would disolve when all of my Perl 6 ports execute properly

[23:11] <jabbot> pugs - 1503 - ext/FileSpec/t/30_cwd.t no worky on Win3

