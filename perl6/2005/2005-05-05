[08:50] <lightstep> triple!

[10:02] *** chady is now known as chady_

[10:18] <Corion> r2715 - http://datenzoo.de/pugs/win2k.html - 4761 ok, 48 failed + 1 segfault (YAML)

[11:22] <meppl> guten morgen

[11:31] <kungfuftr> schwine-hundt!

[11:35] <Juerd> kungfuftr: Just in case you don't realise, that's very offensive.

[11:35] <Juerd> And extra because it's spelled terribly.

[11:44] <osfameron> If you want to respond with some comedy German, you are probably better off with the more neutral

[11:44] <osfameron> "Wie komme ich am besten zum bahnhof"

[11:46] <osfameron> on the basis that (in the UK at least) that's the only phrase that people remember from school

[11:54] <Odin-> Ich bin ein Kugelschreiber!

[12:00] <pjcj> Lumpi ist mein Hund!

[12:04] <mauke> Das Salz verzehrt den Leib des Mohren.

[12:06] <pjcj> Ich verstehe nur Bahnhof!

[12:17] <kungfuftr> Juerd: i know... and my german's incredably rusty

[13:12] <stevan> iblechbot: Net::IRC ... very nice :)

[13:14] <stevan> iblech++ # Net::IRC 

[13:15] <iblech> ?raw PRIVMSG #perl6 :Thanks, Stevan :)

[13:15] <blechbot6> Thanks, Stevan :)

[13:15] <stevan> blechbot6: hello

[13:15] <iblech> ?uptime

[13:16] <iblech> ?seen stevan

[13:16] <iblech> :)

[13:16] <stevan> iblech: thats so cool

[13:16] <iblech> It's even using some kind of OO :)

[13:16] <stevan> yes I saw

[13:16] <stevan> home-made dispatch table :)

[13:16] <stevan> yummy

[13:16] <kungfuftr> right... more perl jobs available

[13:17] <iblech> And it tracks its status (the channels it joined, its nick, etc.)

[13:19] <stevan> iblech: persistently?

[13:20] <iblech> No, only in-memory currently.

[13:21] <stevan> iblech: examples/naive_bayesian/naive_baysian.p6 has some primative load/store hash functions you could use (if that would work)

[13:21] <stevan> it just writes a tab delimited file

[13:22] <iblech> That'll work, I think.

[13:22] <iblech> ?quit shutdown

[13:38] <Limbic_Region> let's try this again

[13:38] <Limbic_Region> salutations all

[13:39] <Jonathan_> Hi Limbic_Region :)

[13:39] <stevan> howdy L~R

[13:40] * Limbic_Region has been busy with $work and $house to notice much of what is going on

[13:41] <Limbic_Region> autrijus didn't get to journal up yesterday - so what's new and exciting?

[13:41] <stevan> Limbic_Region: iblech implemented Net::IRC 

[13:42] <Limbic_Region> I saw the the p6 bot

[13:42] <Limbic_Region> is it in examples?

[13:42] <iblech> examples/network/seenbot.p6

[13:43] <Limbic_Region> cool - I might hack on that a bit

[13:43] * Limbic_Region is feeling overwhelmed to start anything original today

[13:46] <Limbic_Region> hmmm - there should be a Config:: module to make the config stuff better

[13:47] <Limbic_Region> iblech - got a Config:: module preference?

[13:47] <iblech> Config::Tiny

[13:47] <kungfuftr> Config::General

[13:47] <kungfuftr> Config::Any also not bad

[13:48] <Limbic_Region> ok - will give Config::Tiny a shot - I am more of a Config::IniFiles sorta guy but with p5 regexen and multi-level datastructures - building a Config:: module shouldn't be too hard

[13:48] <Limbic_Region> wish me luck

[13:49] <iblech> FYI, a Perl 6 (OO) port is at http://tpe.freepan.org/repos/adamk/Config-Tiny/lib/Config/Tiny.pm

[13:49] <Limbic_Region> oh

[13:50] <Limbic_Region> um - so does OO work now?

[13:50] <iblech> no

[13:50] <Limbic_Region> oh, so that's a p6 implementation when "we get there"

[13:51] <Limbic_Region> I will writting OO before OO existed then

[13:51] <Limbic_Region> woooo hoooo

[13:51] <iblech> :)

[13:51] <gaal> L~R, if you only need to read, consider using yaml

[13:51] <gaal> that works now :)

[13:51] <gaal> though not on win32

[13:52] <Corion> gaal: BTW, does Pugs still build on mingw for you? I patched in some stuff to make setEnv and getProcessID work, but ...

[13:52] <gaal> Corion, since i made it build on cygwin, i hadn't given msys a try. should i?

[13:52] * gaal does

[13:53] <Corion> gaal: I don't know how badly they differ. I think my patches only affect non-Posix stuff, and I'm not sure about if msys has more POSIX than Win32

[13:55] <gaal> they all build with undef HAVE_POSIX, if that's what you mean.

[13:56] <Corion> gaal: That sounds good then, yes. And no crash because of SetEnvironmentVariableW being not linked ...

[13:57] <Corion> Now I merely need to find out how to make changes to %ENV visible in the Pugs process. Likely that is because getEnv is not declared unsafe.

[13:57] <gaal> didn't that already work on unix?

[13:57] <Corion> gaal: It doesn't on Win32.

[13:58] <Corion> And I did not find any test that actually did %*ENV<FOO>='bar'; is(%*ENV<FOO>,'bar'); # and the one I wrote fails for me.

[13:59] <gaal> what do people on unix say? has it never worked?

[14:00] <gaal> does a minimal haskell program to write to env work? on both platforms?

[14:01] <stevan> pugs -e '%*ENV<foo> = "bar"; say %*ENV<foo>' # print 'bar'

[14:01] <stevan> on OS X

[14:02] <Corion> stevan: Likely, my faked setEnv does not have the same signature/declaration/magic as the Prelude setEnv

[14:02] <Corion> On Win32, setting it within the process doesn't work, but child processes see the change

[14:03] <gaal> Corion, is that GHC's fault?

[14:04] <Corion> gaal: I guess it's more my fault of not declaring the stuff properly, so that it doesn't get cached.

[14:05] <gaal> why is the implementation even different though? sorry for being slow, maybe i need coffee :)

[14:05] * autrijus bows before iblech's mastery that is Net::IRC

[14:06] <autrijus> so yaml is b0rken on win32?

[14:06] <autrijus> I can fix that

[14:06] <stevan> hey autrijus :)

[14:06] <autrijus> hey :)

[14:07] <stevan> long day at $work ?

[14:07] <autrijus> yeah, verily

[14:07] <autrijus> not sure I'll retain enough energy to write journal for today, even

[14:07] <autrijus> endless meetings

[14:07] <autrijus> maybe I'll nap first

[14:07] <stevan> ouch @meetings,.. the worst kind of $work

[14:08] <autrijus> indeed... especially @meetings that changes all specs :-/

[14:09] <autrijus> but hey, the spec change is more manageable than @larry's

[14:09] <autrijus> so I'll live :)

[14:09] * stevan feels autrijus's pain

[14:09] <gaal> cotion, it built OK. what test should i try?

[14:09] <stevan> yes, @clients cant be worse than @larry :)

[14:10] <Corion> gaal: Try t\pugsbugs\env_is_readonly.t

[14:10] <Corion> gaal: and/or t\magicals\env.t

[14:10] <gaal> failed test 2

[14:11] <gaal> t/magicals/env....ok                                                          

[14:11] <gaal>         2/9 skipped: Deleting items from %*ENV does not work yet

[14:11] <gaal> t/magicals/env....ok                                                          

[14:11] <Corion> gaal: So we can, on Win32, change %*ENV, but not see the changes ourselves. It's a weird weird world :)

[14:11] <Corion> gaal: Weird. Because with native Win32, test #6 fails for me in env.t (plus the two skipped, but that's expected)

[14:12] <gaal> you know what else is wierd?in tcsh, %~ means roughly command serial number

[14:12] <gaal> it ought to start from 1 each time a shell is started

[14:12] <autrijus> I'm on win32 now

[14:12] <gaal> i just noticed that it doesn't reset on cygwin's tcsh.

[14:13] <gaal> (in the prompt)

[14:13] <gaal> i'm starting a complete smoke for msys, because it's been a while since anyone did that.

[14:14] <gaal> t/builtins/io/io_in_for_loops.t 

[14:14] <gaal> C:\MinGW\1.0\bin\perl.exe: *** WFSO timed out

[14:14] <gaal> what's WFSO ?

[14:14] <autrijus> no idea

[14:14] <Corion> "Waiting For Significant Other" ?

[14:14] <autrijus> Wait For Single Objec

[14:14] <autrijus> t

[14:15] <gaal> What Future Sleeps Outdoors?

[14:15] <autrijus> We Find Scheme Odd?

[14:16] <autrijus> oh, the yaml segfault is probably common to both win32 and non-

[14:16] <autrijus> it's caused by the undef

[14:16] <autrijus> I'll fix

[14:16] <misc_> Win32 Fail and Segfault, Obviously ?

[14:17] <gaal> autrijus, it looks like we need objects for pipe open :)

[14:19] <gaal> http://forum2.org/gaal/pugs/smoke-msys.html

[14:19] <Juerd> autrijus: I scribbled some notes for perl 6 newbies at http://pugs.kwiki.org/?Perl6Nomenclature

[14:20] <Juerd> autrijus: Can you see if what's there is accurate enough?

[14:20] <gaal> Juerd, cool. Definitely add a link to the module porting HOWTO.

[14:21] <Juerd> gaal: it's a wiki (hint!)

[14:21] <autrijus> Juerd: I saw that, thanks

[14:21] <Juerd> :)

[14:21] <autrijus> gaal: noted. tests? :)

[14:21] <autrijus> I mean, for |open, not for oo, which we have

[14:22] <gaal> well, i wanted to port over all the tests that did temp files to open| ... :) but yeah.

[14:23] * gaal works on it

[14:24] <gaal> btw last i checked, reading from Pugs::Internals::runCommand was slurpy.

[14:24] <gaal> which come to think of it isn't surprising since it isn't wrapped in a perlish fh

[14:24] <autrijus> aye.

[14:25] * gaal steals ideas for |open from p5

[14:27] * gaal hears for the first time of the vmesa platform

[14:33] * Corion goes outside

[14:36] <Juerd> What is that? Out what side, and is a site something you can be in or out?

[14:37] <Juerd> s/site/side/

[14:41] <stevan> Juerd: you should add svk and darcs to the "General" listing

[14:45] <jhorwitz> autrijus: ping

[14:45] <autrijus> pong!

[14:45] <autrijus> jhorwitz: I'm excited to hear about your progress in p6i

[14:46] <jhorwitz> i actually had it working.  now leo threw in a new fix, but i'm having ffi trouble

[14:46] <autrijus> commit it? :D

[14:46] <jhorwitz> need to access structure members...

[14:46] <autrijus> ah, that.

[14:47] <jhorwitz> yeah, it's not in a commitable state right now

[14:47] <autrijus> you can do the easy thing and define accessors via #ifdef and treat themn as ffi foreign import

[14:47] <jhorwitz> paste a quick example?

[14:47] <Juerd> stevan: It's a wiki!

[14:47] <autrijus> #define foo_bar_baz(foo) foo->bar.baz

[14:48] <jhorwitz> ah, sneaky.

[14:48] <autrijus> foreign import foo_bar_baz :: FooStructure -> IO BazType

[14:48] <autrijus> I think it would work :)

[14:48] <autrijus> (not 100% sure)

[14:48] * jhorwitz is off to play with ffi

[14:48] <autrijus> I hope ffi is kind to you

[14:49] <jhorwitz> so far, so good

[14:50] <autrijus> :)

[14:52] <iblech> [BUG] foo(a => 25/1) currently parses as foo((a => 25)/1), resulting in foo(Inf)

[14:55] <autrijus> noted. add test?

[14:59] <iblech> precedent.t?

[14:59] <iblech> precedence.t?

[15:00] <iblech> will do

[15:00] <Juerd> Perhaps just pair.t

[15:00] <Juerd> arithmetic tests are in arith.t afaik

[15:00] <iblech> k

[15:00] <Limbic_Region> is there anyway to do slurpy IO yet?

[15:00] <Juerd> even those specific to precedence

[15:01] <Limbic_Region> or should I just loop and concatenate for now?

[15:01] <Juerd> Limbic_Region: Create a stub function, that you can remove when the functionality is implemented 

[15:02] <Juerd> I had to do that for abs() before, it worked very well.

[15:02] <Limbic_Region> and do what - call it slurp() ?

[15:02] * Limbic_Region has to go - $work

[15:03] <Juerd> Limbic_Region: Whatever agrees with the spec, or else be creative :)

[15:12] <meppl> /topic perlsex

[15:21] <stevan> Limbic_Region: I think there already is a slurp()

[15:22] <iblech> at it works, too

[15:22] <iblech> and it works, too

[15:23] <Limbic_Region> right then

[15:23] <Limbic_Region> Jonathan_ ping

[15:24] <Limbic_Region> iblech - have a test file or example?

[15:24] <iblech> pugs -we 'say slurp "file.txt"'

[15:25] <iblech> my $contents = slurp "file.txt"

[15:25] <Limbic_Region> oh, so it doesn't work on an IO ref

[15:25] <Limbic_Region> hmmm

[15:25] <autrijus> pugs -e 'open("README").slurp.say'

[15:25] <autrijus> worksforme

[15:27] <autrijus> jhorwitz: does modparrot work on win32?

[15:27] * Limbic_Region was forgetting an = sign

[15:27] <autrijus> linking against libparrot_s does not quite work for me

[15:27] <jhorwitz> autrijus: no -- looking for a porter though

[15:27] <autrijus> perhaps because our -L -l magic isn't working there

[15:27] <autrijus> oh ok.

[15:28] <jhorwitz> mostly configuration/compiler issues.  APR makes the code very portable.

[15:28] <autrijus> nod.

[15:28] <autrijus> ok, I can't stay awake anymore. see you in a few hours

[15:28] * autrijus waves &

[15:30] <Juerd> Bye

[15:39] <Limbic_Region> question - should the following work?  for ( =$input ) -> $line is rw { chomp $line; }

[15:39] <Limbic_Region> I have to s/rw/copy/ to get it to do what I want

[15:41] <iblech> Not unless $input is opened rw, I think

[15:41] <Juerd> Wow, does =$input return an lvalue?

[15:42] <Juerd> That's surprising but also very neat.

[15:42] <Limbic_Region> ah - makes sense

[15:42] * Limbic_Region feels incredibly stupid sometimes

[15:42] <Juerd> s/lvalue/not a copy/

[15:43] <Juerd> It's extra neat if it means that if $input was opened rw, chomping means you end up with newlines removed from the file, $^I-wise.

[15:44] <Juerd> Limbic_Region: In real Perl 6 you'd probably use auto-chomping, by the way.

[15:44] <Juerd> Or that's what Damian keeps telling me whenever I have any code snippet with chomp in a loop :)

[15:45] <Limbic_Region> Juerd - yeah, but I am writing code that can be used now

[15:45] <Limbic_Region> and I think I might have found a bug

[15:46] * Limbic_Region needs to develop a test case

[15:49] <Limbic_Region> yep - pretty sure next is broken

[15:49] <Limbic_Region> perlbot nopaste

[15:49] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[15:51] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "Is "next" known to be broken? Put this in blah.p6 to see weird behavior if not already known" (12 lines, 217B) at http://sial.org/pbot/9936

[15:58] * Limbic_Region is using if ( $line ~~ ... ) {}  else { ... } as a workaround - yuck

[15:58] <wolverian> hm. stylistic issues; why the parens around the =$input? also, is $_ aliased to $copy there?

[15:58] <wolverian> er, to $line ,I mean.

[15:59] <Limbic_Region> wolverian - copy/pasting from an example WRT parens

[15:59] <wolverian> okay. :)

[16:03] <iblech> wolverian: $_ is always the first argument to a callable thing (IIRC), so yes, $_ := $line

[16:03] <iblech> i.e. my $a = -> $arg { say $_ }; $a(3); # should output 3

[16:06] <iblech> hm..., but Pugs doesn't. Bug in Pugs or in my memory?

[16:07] <Limbic_Region> is there a builtin line counter like $. yet?

[16:08] <wolverian> iblech: ah, thanks. in that case, the '$line ~~ ' bit is redundant, although it's certainly self-documenting.

[16:08] <iblech> Limbic_Region: no, and IIRC in Perl 6 this is a method call, something like $handle.curline, but as there's no synopsis about IO yet, I might be totally wrong :)

[16:10] <Limbic_Region> that's what I thought but I wanted to be sure

[16:10] <wolverian> for =$input -> $line is copy { $line.=chomp; next unless $line.words; say $line } 

[16:10] * Limbic_Region is really wondering about the next bug though

[16:10] * Limbic_Region wanders off to get lunch

[16:12] <iblech> hm... t/statements/next.t seems to test this bug, but it is :todo-ed, me wonders why

[16:20] <Limbic_Region> iblech - when I rewrote next.t they were all :todo because it wasn't implemented yet

[16:21] * Limbic_Region should go back and see how it has been updated since then

[16:21] <Limbic_Region> oh wait - they are all still :todo

[16:21] * Limbic_Region wonders if next is currently the same as last?

[16:22] <Limbic_Region> err - an alias to last rather

[16:22] <Limbic_Region> speaking of which - I think I found a bug with last too regarding naked blocks

[16:24] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "possible last bug - will write a test for it if it is indeed a bug - run the following code in file called blah.p6" (14 lines, 239B) at http://sial.org/pbot/9937

[16:39] <cognominal> Limbic_Region: 'last' exits the loop...

[16:42] <gaal> yay! [email@hidden.address]
[16:44] <Limbic_Region> cognomial - I know

[16:44] <Limbic_Region> in p5 a bare block is a looping construct

[16:44] <Limbic_Region> so it should just last the bare block

[16:45] <Limbic_Region> if that is ALSO the p6 behavior - then the way pugs behaves WRT last in a bare block - it is a bug

[17:00] <Corion> Yay. The segfault in YAML is gone!

[17:01] <gaal> http://forum2.org/gaal/pugs/smoke-cygwin.html # yeah

[17:03] <Corion> I wonder why unlink() on files fails ... Is this only on Win32 ? Then, the file(handle) is still open, which prevents deletion there. If it also happens on unixish systems, the problem lies elsewhere.

[17:03] <Corion> (we also don't have a test for unlink :) )

[17:05] <Corion> Heh. Perl5 doesn't have one either.

[17:05] * gaal starts a linux smoke, goes out for a walk

[17:08] <iblech> Corion: unlink() works on Linux (Gentoo, GHC 6.4)

[17:08] <iblech> I'll add a test for unlink, too

[17:08] <Corion> iblech: Ah, so that means that Pugs holds the file open for too long and thus it can't be removed.

[17:09] <Corion> iblech: I guess open->print->close/fall-out-of-scope->unlink->-f # is a good test to see if unlink works :)

[17:09] <Corion> iblech++ # adding tests

[17:10] <Corion> Hmmm. I guess the thing should work with an explicit close() call on the filehandle, so there should be two tests, one where the handle just falls out of scope and one with an explicit close()

[17:11] <Corion> ... the last test in t/general/atoms.t does that, so it should be moved from there into unlink.t :)

[17:18] <iblech> re. Done as r2733. The unlinking works on Linux, *but*: unlink(...) does return true when executed using "pugs -we '...'", but it returns undef in the test. Dunno why

[17:18] * iblech food &

[17:53] <gaal> what's -w, anyway? it's a noop in the code; aren't warnings on by default in p6?

[17:53] <gaal> oh and http://forum2.org/gaal/pugs/smoke-linux.html and rehi btw.

[17:55] <gaal> hey, two unexpected successes. cool.

[17:55] <iblech> Yes, it's just a habit :)

[17:56] <Corion> gaal: Hmmm. So we need to make the %*ENV test :todo only for Win32

[17:57] <Corion> gaal: The async.t likewise - it doesn't seem to work on native Win32 (propably due to GHC)

[17:57] <gaal> todo => $*OS ~~ any<...>?

[17:57] <Corion> gaal: Should work IMO, yes ;)

[17:58] <Corion> r2734 - http://datenzoo.de/pugs/win2k.html - no unexpected successes, but env.t doesn't crash either :)

[18:01] <iblech> No, it won't, as Test.pm is testing for defined()ness of :todo. I'll fix both env.t and Test.pm in a minute

[18:01] <Limbic_Region> iblech - Config::Tiny is finished

[18:02] <Limbic_Region> I need to write a bunch of snippets that I think might be bugs and then I will post

[18:03] <iblech> Done as r2736.

[18:03] <iblech> Limbic_Region: Great :)

[18:10] <autrijus> I'm possessed :-/

[18:10] <sorje> Heh, cool. A IRC module..

[18:10] <autrijus> I dreamed that I wake up and start composing my journal, deliberating what to write...

[18:10] <autrijus> ...so I did just that.

[18:10] <Corion> ... then you woke up?

[18:10] <autrijus> yeah.

[18:10] <Corion> :)

[18:10] <Juerd> Hey, today is 05-05-05

[18:11] <Juerd> No matter what order you put year, month and day in!

[18:11] <Corion> I wait for 6th of June next year. :)

[18:11] <autrijus> it's 2005-05-06 for me.

[18:11] <Juerd> autrijus: Oh. I'm too late again.

[18:11] <Juerd> :(

[18:11] <autrijus> I wait for 3550 years more :)

[18:12] <Juerd> stoopid timezones.e

[18:12] <Juerd> s/e$//

[18:12] <autrijus> jhorwitz: how's tricks?

[18:13] <jhorwitz> autrijus: it works.  using hsc2hs, so tweaking makefile now.

[18:13] <autrijus> woot

[18:13] <autrijus> so #ifdef doesn't?

[18:13] <jhorwitz> no go

[18:13] <autrijus> bummer.

[18:13] <jhorwitz> hsc2hs is better in the long run anyway

[18:14] <autrijus> aye aye

[18:29] <Corion> iblech: Your fix for Test.pm prints a test line several (2) times: http://datenzoo.de/pugs/win2k.html - see the line for env.t (the "is rw" line gets run twice)

[18:30] <iblech> hm... I think that's because of the use of the junction in env.t

[18:31] <iblech> because Test.pm:proclaim does only print things once

[18:34] <iblech> Corion: What does "pugs -MTest -we 'plan 1; is 3, 4, todo => ($*OS eq any<MSWin32 mingw msys cygwin>);'" output on your sys?

[18:35] <pasteling> "Corion" at 84.176.42.37 pasted "Output of test run" (13 lines, 404B) at http://sial.org/pbot/9940

[18:35] <Corion> iblech: See the nopaste

[18:39] <iblech> The same command on my system runs is() only once.

[18:39] <iblech> But I'm not sure why is() is called two times, instead of four times (as this is the number of arguments to any())

[18:41] <iblech> Corion: Please try "pugs -MTest -we 'plan 1; is 3, 4, "todo" => ?($*OS eq any<MSWin32 mingw msys cygwin>);'"

[18:42] <stevan> iblech: it prints once for me (OS X)

[18:42] <stevan> iblech: I am not sure if :todo is the place for platform specific branching

[18:42] <iblech> stevan: On my sys (Linux), too (but so does the test without the "?")

[18:42] <pasteling> "Corion" at 84.176.42.37 pasted "Test output for iblech" (15 lines, 422B) at http://sial.org/pbot/9941

[18:43] <stevan> my $todo = ($*OS == Win32) ?? 'bug' :: undef;

[18:43] <stevan> is(2, 4, $todo);

[18:43] <stevan> I would think that might work

[18:43] <stevan> any use of :todo or "todo" will result in a defined value

[18:44] <iblech> Corion: Thanks, svn up to r2740

[18:44] <stevan> although "todo" => undef might not (have to test that)

[18:44] <Corion> updating and smoking - results should be here in 5 minutes or so :)

[18:45] <Corion> ... make that 8 minutes - compiling now takes longer than testing ;)

[18:45] <iblech> Should "$foo eq any<...>" return a junction of Bools or a single Bool?

[18:45] <stevan> I assume a Bool

[18:46] <iblech> stevan: I updated Test.pm to check for trueness instead of definedness, so ":todo" and ":todo<...>" TODO a test and ":todo(0)" or "todo => 0" does not

[18:46] <stevan> iblech: but how will that work with ok('test', :todo)

[18:46] <stevan> (which is why it checks for defined and not the bool)

[18:47] <pasteling> "jhorwitz" at 216.52.77.2 pasted "for autrijus: eval_imc" (13 lines, 213B) at http://sial.org/pbot/9943

[18:47] <iblech> stevan: I thought so to, but now I think it should stay a junction of Bools, by the law of junctioness preservation :)

[18:47] <iblech> stevan: ":todo" is really short for ":todo(1)"

[18:47] <autrijus> jhorwitz: !!!

[18:50] <jhorwitz> autrijus: r2741

[18:51] <stevan> iblech: I am not sure that :todo(0) is very intuitive

[18:52] <stevan> iblech: but with a boolean exp instead of 0, I suppose it works.  It just looks a little odd to me

[18:53] <stevan> then again, I have not be getting a lot of sleep lately, so it is probably best to ignore me :)

[18:54] <jhorwitz> autrijus: there's only one problem -- it bombs out if you try to run a second eval_parrot.  reproduced problem in C as well.  making the interpreter persistent would solve this.

[18:54] <iblech> stevan: I think so, too. We should probably discourage :todo(0), but I see no easy way to check that the test write wrote :todo(0) instead of todo => something_that_evaluates_to_false

[18:54] <nothingmuch> evening

[18:55] <stevan> hola nothingmuch 

[18:55] <iblech> s/test write/test writer/

[18:56] <stevan> iblech: maybe ok($fail_on_Win32, ($*OS eq 'Win32' ?? 'bug' :: undef));

[18:56] <stevan> although now that i look at it, its not any prettier, nor does it illustrate that is it a :todo better

[18:57] <stevan> I am going to go with my previous idea that you should ignore me until I have some more coffee

[18:57] <stevan> :P

[18:57] <autrijus> jhorwitz: ok, please commit, I'll carry on that

[18:57] <autrijus> or at least try :)

[18:57] <autrijus> oh, you did

[18:57] <autrijus> jhorwitz++

[18:57] <autrijus> jhorwitz++

[18:57] <autrijus> jhorwitz++

[18:58] <stevan> jhorwitz++ # everybody join in!

[18:58] <iblech> stevan: ;)

[19:00] <Corion> iblech: Works fine with r2740 now!

[19:01] <iblech> Corion: nice :)

[19:01] <Corion> r2740 - http://datenzoo.de/pugs/win2k.html - 4769 ok, 51 failed

[19:02] <Corion> can anybody explain to me what the single-arg version of atan() is supposed to be ?

[19:02] <autrijus> Corion: doesn't rod's cover that?

[19:02] <Corion> rod's ?

[19:03] <iblech> http://rodadams.net/Perl/S29.html

[19:05] <iblech> atan(1) == pi/4 (result is always between -pi and +pi), atan(1, 1) == pi/4 (result is always between 0 and 2pi)

[19:05] <Corion> Only describes the two-arg form of atan, but doesn't describe the single arg form.

[19:05] <Corion> Ah... Hmmm. Is that the difference? The range of results?

[19:07] <iblech> Yes. The single-arg form gets a y/x-ratio, so it has to guess the quadrant it is in (-1/-1 == +1, although P(-1, -1) is in quadrant III). the two-arg form distinguishes the y- and x-coordinate and is so able to return the correct result (taking the quadrant into account)

[19:09] <Corion> iblech: Thanks

[19:09] <autrijus> jhorwitz: do you think we should probe for parrot in PATH?

[19:09] <autrijus> jhorwitz: and stick it to PUGS_EMBED if found?

[19:10] <jhorwitz> autrijus: we'd still need to know the parrot source dir.  :(

[19:11] <autrijus> jhorwitz: doesn't the parrot in path carry that info?

[19:11] <jhorwitz> nope.

[19:12] <autrijus> darn.

[19:12] <Limbic_Region> ok - I have documented and finished Config::Tiny but I all I have is the module itself (no test suite or full package for installation) - what should I do with it?

[19:13] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "Config::Tiny" (190 lines, 5.6K) at http://sial.org/pbot/9944

[19:14] <autrijus> Limbic_Region: write a minimal sanity test

[19:14] <autrijus> the Makefile.PL itself is just copy-paste from other ext/ stuff

[19:15] <autrijus>     # Save a config

[19:15] <autrijus>     $cfg->write( 'new.ini' );

[19:15] <autrijus> this looks suspicious

[19:15] <Limbic_Region> thanks

[19:16] * Limbic_Region missed some things

[19:16] <revdiablo> hmm I wonder if I should put my silly combinations thing in examples/

[19:16] <autrijus> /tmp/ghc5901.hc:288: warning: implicit declaration of function `imcc_compile_pir'

[19:17] <autrijus> /tmp/ghc5901.hc:649: warning: implicit declaration of function `imcc_init'

[19:17] <revdiablo> maybe someone will p6ify it a bit

[19:17] <jhorwitz> autrijus: no prototypes in parrot header files

[19:18] <autrijus> jhorwitz: you can add that declaration in hsc, no?

[19:18] <jhorwitz> i tried, using #def, but it didn't take.

[19:18] <jhorwitz> didn't affect anything, so i let it be for now.

[19:18] <autrijus> k. not terribly important anyway

[19:18] <autrijus> sure

[19:19] <Limbic_Region> autrijus - will see what I can do but I have at least 5 things I think are bugs I wanted to write up first

[19:19] <autrijus> oh, sure!

[19:19] <autrijus> Limbic_Region++ # writing OO before OO exists

[19:20] <Limbic_Region> autrijus - are naked blocks looping constructs like in p5?

[19:20] <Limbic_Region> if so - last is broken

[19:20] * jhorwitz is happy he understood the haskell he wrote today

[19:20] <Limbic_Region> if not, I won't bother writing a test

[19:21] <autrijus> they're not

[19:21] <Limbic_Region> ok - so down to 4

[19:21] <Limbic_Region> is //= supposed to work yet?

[19:22] <autrijus> jhorwitz++

[19:22] <autrijus> sure, why not?

[19:22] <autrijus> it worksforme

[19:22] <autrijus> $ ./pugs x

[19:22] <autrijus> Hello from Parrot land!

[19:22] <Limbic_Region> because it didn't work for me in my situation

[19:22] <autrijus> jhorwitz++ # xx +Inf

[19:22] * Limbic_Region will try to get a minimal test case

[19:23] <autrijus> jhorwitz: ok, let's use the horrible horrible unsafePerformIO hack!

[19:24] * autrijus starts hacking it in

[19:25] <Limbic_Region> autrijus - 3 lines of code that expose what I believe to be a problem in //= or hash {}

[19:26] <Limbic_Region> my %hash;

[19:26] <Limbic_Region> %hash<foo> //= hash {};

[19:26] <Limbic_Region> %hash<foo><bar> = 42;

[19:26] <Limbic_Region> should that work?

[19:27] <iblech> Limbic_Region: It works if you delete the line with //=, as Perl 6 autovivies %hash as neccessary :)

[19:27] <jhorwitz> autrijus: it actually worked for you the first time?  ;-)

[19:27] <autrijus> jhorwitz: yes

[19:27] <autrijus> Limbic_Region: it may be that //= vivifies lhs incorrectly. I'm not sure

[19:27] <Limbic_Region> iblech - I can work around it - that's not the point

[19:27] <autrijus> Limbic_Region: but, what iblech said.

[19:28] <Limbic_Region> I was trying to port Adam's p5 code to p6

[19:28] <autrijus> jhorwitz: interested in doing the weird thing that is compreg Pugs? :)

[19:29] <Limbic_Region> in p5 $self->{$ns = $1} ||= {};

[19:29] <Limbic_Region> so while I have it working, I want to add a test if it exposes a bug that might bite someone else in the same way

[19:32] <Limbic_Region> and while I am at it - is a filehandle opened for writing supposed to flush/close automatically at the end even if $fh.close isn't used?  my $fh open('>foo.bar'); $fh.say( "foo" ); # will result in an empty file on my machine unless I do $fh.close

[19:32] <Limbic_Region> bah - I am just going to summarize the things I think are bugs and post a link to that

[19:32] <jhorwitz> autrijus: i guess we could use NCI to call a function exported by FFI that returns the PIR directly

[19:32] * jhorwitz loves acronyms

[19:33] <autrijus> jhorwitz: why NCI? we can create callback subs at will

[19:33] <autrijus> look at Syck.hs for mkCallbackk

[19:35] <PerlJam> FFI?

[19:35] <lightstep> Foreign Function Interface

[19:36] <autrijus> super-leet, Swig-like thing built into the language

[19:36] <autrijus> jhorwitz: the Horrible Hack (tm) is in. eval_parrot is now reentrant!

[19:37] <PerlJam> the more I find out about haskell, the more it seems like perl6 only with different syntax  :)

[19:37] <jhorwitz> autrijus++

[19:37] <autrijus> PerlJam: nah. that's because Pugs doesn't do OO yet :)

[19:37] <autrijus> haskell doesn't have subtyping; Perl 6 thrives on subtyping.

[19:37] <lightstep> err, classes?

[19:40] <autrijus> lightstep: subtype OddInt of Int where { $_ % 2 }

[19:40] <autrijus> but sure, classes and roles too.

[19:40] <PerlJam> autrijus: isn't OO next on the timeline? 

[19:40] <autrijus> PerlJam: it is, and I even have a model figured out.

[19:40] <PerlJam> autrijus: excellent!

[19:40] <PerlJam> autrijus++

[19:41] <PerlJam> autrijus: I bet it'll be slow though (I mean perl5 slow or slower)  

[19:41] <autrijus> "Larry predicts the Community will collapse within 30 years, leading to a 30,000 year period of anarchy before a Sixth Perl is established. The purpose of his project is to influence events so that the interregnum period will be only 3 years and not 30,000. This will be done, he says, by the production and dissemination by his team of an Apocalyptic Synopsica which will contain all camel knowledge."

[19:41] <PerlJam> Just a feeling I have.

[19:41] * autrijus dons the Psycho Historian hat

[19:41] <autrijus> PerlJam: not when we compile to PIR (aka IMC).

[19:41] <lightstep> how are there subtypes checked? i imagine OrderedList or PrimeNumber or HaltingTM

[19:41] <lightstep> s/there/these/

[19:41] <autrijus> lightstep: the perl trick is

[19:41] <PerlJam> oh that's true

[19:41] <autrijus> ...drum roll...

[19:42] <autrijus> ..."everything that amounts to halting problem at compile time, instead happens at runtime"

[19:42] <PerlJam> autrijus: Are we going to find out that Larry Wall is really Larry Seldon (Hari Seldon's lesser known brother) ?

[19:43] <autrijus> PerlJam: yeah. and his yearly image in the State of Onion speech looks so real!

[19:43] <Juerd> Why does life suck?

[19:43] <Corion> autrijus++ # Foundation

[19:44] <autrijus> Juerd: because it needs to defragment itself with VACUUM.

[19:46] <crysflame> foundation?

[19:47] <lightstep> @google Foundation

[19:47] <Corion> http://en.wikipedia.org/wiki/The_Foundation_Series

[19:47] <lightstep> http://www.amazon.com/exec/obidos/tg/detail/-/0553293354?v=glance

[19:47] <Corion> ... actually, the series isn't that good a read IMO

[19:47] <crysflame> oh

[19:48] <crysflame> the ideas behind it are super neat

[19:48] <crysflame> PerlJam++ # Lari Seldon

[19:50] <autrijus> $ ./pugs -e 'eval_parrot<print "Hi!\n">'

[19:50] <autrijus> Hi!

[19:50] <jhorwitz> woohoo!

[19:51] <Juerd> autrijus: TBH, that could have been normal eval ;)

[19:51] <autrijus> rofl, Juerd

[19:52] <jhorwitz> Juerd++

[19:56] <Limbic_Region> Config::Tiny tests are going to have to wait until tomorrow - I'm too tired

[19:56] <stevan> Limbic_Region: is it checked in?

[19:56] <autrijus> Limbic_Region: ok, check in barebones into ext/ anyway?

[19:56] <autrijus> I think the test squad is around :)

[19:56] <stevan> Limbic_Region: check it in and I will try and write some

[19:57] * stevan is not in the mood for $work today 

[19:57] * Limbic_Region can't check in from work </same old song and dance>

[19:57] <stevan> Limbic_Region: no paste all you have

[19:58] <stevan> and I will do the rest :)

[19:58] <Corion> Maybe we should have check-in-by-mail, but that would mean we would check in many letters from Mr. OBEKE from Namibia

[19:58] <stevan> Corion: I have a business proposition for you

[19:58] <PerlJam> Limbic_Region: why can't you checkin from work exactly?

[19:58] <stevan> Corion: you dont know me but...

[19:59] <stevan> PerlJam: he is a secret govt. agent,.. they would frown on him working with "us"

[19:59] <Limbic_Region> PerlJam - policy and because of a recent firewall lockdown

[19:59] <PerlJam> Limbic_Region: surely you can tunnel through and checkin by proxy

[19:59] <pasteling> "Limbic_Region" at 129.33.119.12 pasted "Config::Tiny (could probably use most of p5's Config::Tiny's test suite)" (190 lines, 5.6K) at http://sial.org/pbot/9945

[19:59] <stevan> PerlJam: subverting a US Govt firewall might be a felony :P

[19:59] <jhorwitz> autrijus: just moved packfile initialization into initParrot -- should stop potential memory leaks.  :)

[19:59] <Limbic_Region> PerlJam - surely I would lose my job

[20:00] <Limbic_Region> not to mention my security clearance

[20:00] <autrijus> jhorwitz: cool!

[20:00] <stevan> Region, Limbic Region (shaken not stired)

[20:00] <PerlJam> stevan: heck, subverting an Intel firewall is a felony (just ask merlyn)

[20:00] * stevan thinks maybe he made his coffee too strong

[20:00] <autrijus> jhorwitz: I have sinned for you. :-/ I hope I can be redeemed from using The unsafePerformIO Hack

[20:00] <Corion> Limbic_Region: But there are $non_us_govt which would hire you then ;-)))

[20:00] <PerlJam> Limbic_Region: yet you can talk to us on IRC?

[20:00] <autrijus> jhorwitz: but for now let it be that way

[20:01] <Limbic_Region> stevan - the p5 Config::Tiny test suite is definately worth checking out but I changed the concept of root level section from _ to ''

[20:01] <stevan> PerlJam: Although Guantanamo is nice this time of year, I think Limbic_Region would rather not take an early "vacation"

[20:01] <autrijus> it'd be nice if Net::IRC can read from both yaml and configtiny.

[20:01] <Limbic_Region> PerlJam - I have perlmonk.org hosting cgiirc so from perspective of local admin - it is just a regular web page of view only

[20:01] * jhorwitz is reading about this sin...

[20:02] * Limbic_Region thinks there is a fundemental problem with distinguishing file uploads from form posting - but hey, I don't make the rules

[20:07] <Limbic_Region> hmmm - I need sleep

[20:07] <stevan> I am adding ChangeLogs to all the ext/ modules as well

[20:09] <autrijus> ok, I'm thinking about adding -O to pugs

[20:09] <autrijus> pugs -OParrot examples/mandel.p6

[20:09] <autrijus> that runs it with parrot

[20:09] <autrijus> without temp file or pugscc

[20:10] <autrijus> is -O ok? or -R?

[20:11] <jhorwitz> -Oparrot sounds good to me

[20:11] <autrijus> ok.

[20:14] <autrijus> implementing...

[20:14] <Corion> I would reserve -O for optimizing, but then, optimizing might not be specifically exported to the user (or exported via "use less" and "use more"

[20:15] <autrijus> that is good thinking

[20:15] <autrijus> so -B maybe?

[20:15] <autrijus> as in backend

[20:16] <Corion> Don't know of any special use of -B, so it's likely free

[20:16] <lightstep> what about long options?

[20:16] <autrijus> --backend

[20:16] * Limbic_Region calls it a night

[20:17] <stevan> Config::Tiny is in, and I included a basic "it compiles" test, will do more later

[20:18] <autrijus> $ ./pugs -BParrot examples/mandel.p6

[20:18] <autrijus> ................::::::::::::::::::::::::::::::::::::::::::::................

[20:19] * jhorwitz applauds

[20:20] * autrijus cheers

[20:21] <autrijus> $ ./pugs -BParrot -e 'say "The answer is: { 7 * 6 }"'

[20:21] <autrijus> The answer is: 42

[20:22] <lightstep> try 9*6

[20:22] <obra> er. isn't it ...yeah, that

[20:24] <PerlJam> Hmm.  

[20:24] <stevan> Hmmm, the one problem with all this "OO that is not OO" is that we might get a lot of name collisions

[20:24] <stevan> too many "new()"s

[20:25] <PerlJam> I wonder if they got that little detail in the HHGTTG movie

[20:25] <lightstep> mervin looks so unlike himself

[20:27] <lightstep> http://avikatz.net/sf/meimad/meim11.jpg

[20:28] <jhorwitz> PerlJam: they did

[21:01] * jhorwitz will return after these commercial messages (and a drive home)

[21:04] <_metaperl> where can I read about err die

[21:04] <_metaperl> my $dict = open($dict_file) err die "Couldn't open the AUTHORS file

[21:05] <mauke> err is the low priority form of //

[21:05] <ninereasons> E04 ?

[21:07] <ninereasons> 'a synonym for "oops...")'

[21:09] <_metaperl> mauke, ninereasons, thanks

[21:11] <_metaperl> another off-the-cuff question: is err what "or" was in p5?

[21:12] <revdiablo> err is the low precedence version of //

[21:13] <revdiablo> err and // check for definedness, not truth

[21:13] <_metaperl> and "or" is low prec form of || ?

[21:13] <revdiablo> yeah

[21:13] <_metaperl> i see

[21:13] <_metaperl> thanks

[21:14] <_metaperl> defined($x) || $y  # same as $x // $y

[21:14] <revdiablo> yeah

[21:14] <revdiablo> especially useful as, e.g. $x //= 0;

[21:14] <_metaperl> I see

[21:15] <autrijus> ooh rms is visiting .tw before I depart for austria

[21:15] * autrijus looks forward to chatting with rms

[21:17] <mauke> $x // $y is actually defined($x) ? $x : $y

[21:17] <revdiablo> good poing, mauke 

[21:17] <revdiablo> point too

[21:17] <revdiablo> :)

[21:24] <stevan> autrijus: any thoughts on when argument type based MMD will work?

[21:25] <stevan> autrijus: any thoughts on when argument type based MMD will work?

[21:25] <stevan> whoops wrong window :P

[21:27] <_metaperl> is the slurpy operator needed here?

[21:27] <_metaperl> sub pick_committer (*@committers) returns Str { 

[21:27] <_metaperl>     any(@committers).pick; 

[21:27] <_metaperl> } 

[21:27] <_metaperl>  

[21:27] <stevan> _metaperl: does it work without it?

[21:28] <_metaperl> I'm saying it should as long as the sub is passed a list from length 0 to n, n positive

[21:29] <_metaperl> my @x; pick_committer(@x); # bombs? my List @x; pick_committer(@x); # ok??

[21:29] <_metaperl> I will try it

[21:32] <_metaperl> http://pastebot.nd.edu/687

[21:33] <_metaperl> even with @x not yet defined, it works without slurpiness

[21:33] <_metaperl> I think the slurpiness is superfluous.... please correct if wrong

[21:34] <stevan> hangman seems to work fine if i take it out

[21:35] <_metaperl> well, my paste demonstrates that it is pointless

[21:35] <stevan> that may have just been a remnant of an earlier version of the code

[21:35] <stevan> ok I am removing it from hangman

[21:35] <revdiablo> _metaperl: I think without being slurpy, it expects an array, and breaks on a normal list

[21:35] <ninereasons> _metaperl, it was a temporary fix for buggy behavior.

[21:35] <_metaperl> oh!

[21:35] <stevan> ninereasons: thanks, thats what I thought it was

[21:36] <ninereasons> stevan, something is funny with the :todo<s...>, have you noticed?

[21:37] <stevan> _metaperl: committed in r2754

[21:37] <stevan> it is like it was never there :)

[21:37] <_metaperl> well, I wouldn't change it...

[21:37] <stevan> ninereasons: no I havent

[21:37] <stevan> _metaperl: why not?

[21:37] <_metaperl> well, let's think...

[21:37] <ninereasons> when a :todo<bug> is used, everything after that gets marked as  # TODO bug

[21:37] <_metaperl> should it break when a list instead of an array is passed?

[21:37] <ninereasons> I'm not sure what I'm looking at, but I think that's descriptive, stevan.

[21:38] <stevan> _metaperl: in the context of the hangman game, it will never get the wrong input

[21:38] <stevan> ninereasons: can you show me an example?

[21:38] <stevan> ninereasons: something I can run

[21:38] <ninereasons> pugs t/builtins/arrays_and_hashes/kv.t

[21:38] <ninereasons> ok 20 - for(): from 1-elem Hash %hash got the right $key # TODO bug

[21:38] <_metaperl> the slurpy parameter is a great conversation piece... I was using it as a point of education for my next p6 talk --- which will be to explain this code.... I am using kwid to elucidate hangman.p6

[21:39] <revdiablo> _metaperl: I think so, when you say an array it wants an array, when you want anything list-like, you say a slurpy list

[21:39] <_metaperl> I will commit the kwid when done

[21:39] <ninereasons> there is no ":todo<bug>" in test 20

[21:39] <stevan> ninereasons: I get "ok 20 - for(): from 1-elem Hash %hash got the right $key"

[21:39] <stevan> no TODO

[21:40] <ninereasons> interesting.  maybe my Test.pm is broken.

[21:40] <stevan> ninereasons: do you have any local mods?

[21:40] <stevan> _metaperl: embedded kwid? or external?

[21:40] <_metaperl> external

[21:40] <_metaperl> hangman.kwid in same directory

[21:40] <ninereasons> I don't think so. I did a diff on the installed : local : repo and they are all the same, stevan

[21:40] <_metaperl> but it's pod as I cant remember kwid syntax

[21:41] <autrijus> stevan: we have Val-based mmd now

[21:41] <_metaperl> will ask ingy to convert it

[21:41] <stevan> _metaperl: you are welcome to keep the slurpy in there, but I would rather take it out since it is not really correct in that context

[21:41] <stevan> ninereasons: is your build up to date?

[21:41] <_metaperl> ok, leave it unslurped... I will discuss it from that vantage point

[21:41] * stevan wonders if his build is up to date actually

[21:42] <stevan> _metaperl: it is your talk, so you can easily use an older copy for the educational benifits

[21:42] <autrijus> stevan: and Var based too

[21:42] <ninereasons> yes .. and no :-) you put your finger on it stevan.

[21:42] <_metaperl> either way is educational. I just lead in with "now, this is not slurpy... if it were slurpy" instead of "now this is slurpy if it were not..."

[21:43] <stevan> autrijus: ??

[21:43] <_metaperl> ?? is ternary operator :)

[21:43] <autrijus> stevan: svn up and check multi_sub.t

[21:43] <stevan> ninereasons: my build it not the most current either :)

[21:43] <stevan> autrijus: ok

[21:43] <autrijus> only 3 fails now

[21:43] <stevan> oh

[21:43] <ninereasons> I'm having trouble building; and as part of my build process I wipe out my copy of pugs.  "pugs" is a link to the most recent build

[21:44] <stevan> autrijus: which three? 

[21:44] <ninereasons> when a recent build does not exist, "pugs" defaults to the installed version

[21:44] <stevan> autrijus: compiling takes to long, i MUST know :P

[21:44] <autrijus> stevan: Num Sub Hash

[21:44] <ninereasons> so, stevan, you put your finger on the problem.

[21:44] <stevan> autrijus: ok

[21:44] <autrijus> stevan: you can say "make unoptimised"!

[21:44] * autrijus wonders if we should make unoptimised build the default during development :)

[21:44] <stevan> ninereasons: compiling the latest right now, I will see after that

[21:45] <stevan> autrijus: but unoptimised means pugs is slower :)

[21:45] <ingy> hola

[21:45] <stevan> which with things like Pod parsing is painful

[21:45] <stevan> hey, ingy

[21:45] <ingy> hi there

[21:47] <autrijus> hey ingy. seen the news of eval_parrot and pugs -BParrot? :)

[21:47] <ingy> autrijus: no

[21:48] <ingy> sounds awesome though

[21:48] <autrijus> ingy: 

[21:48] <autrijus> $ ./pugs -BParrot -e 'say "The answer is: { 7 * 6 }"'

[21:48] <autrijus> The answer is: 42

[21:48] <autrijus> $ ./pugs -e 'eval_parrot<print "42!\n">'

[21:48] <autrijus> 42!

[21:48] <stevan> autrijus: is parrot required?

[21:48] <autrijus> stevan: no, it's built when PUGS_EMBEd=parrot

[21:48] <autrijus> same deal as embedded perl5

[21:49] <stevan> I am getting this

[21:49] <stevan> Parrot.hsc:2:28: ../pugs_config.h: No such file or directory

[21:49] <stevan> make: *** [src/Pugs/Embed/Parrot.hs] Error 1

[21:49] <ingy> very nice

[21:49] <ingy> I just want to get my Perldoc integration done asap

[21:49] <ingy> how is object support coming btw?

[21:49] <autrijus> stevan: weird, is src/Pugs/pugs_config.h there?

[21:50] <autrijus> ingy: some crazy folks figured out how to write OO witihout OO

[21:50] <ingy> My Test::Chunks framework has been an amazing experience and I want to port it

[21:50] <ingy> oh?

[21:50] <stevan> autrijus: nope

[21:50] <ingy> where are the examples?

[21:50] <autrijus> stevan: svn up; should be fixed

[21:50] <autrijus> ingy: http://svn.openfoundry.org/pugs/ext/Net-IRC/lib/Net/IRC.pm

[21:50] <autrijus> ingy: http://svn.openfoundry.org/pugs/examples/cashiers.p6

[21:51] <stevan> ingy: also see ext/Config-Tiny

[21:51] <_metaperl> hey ~= is not in the Perl6operator synopsis doc... what does it do?

[21:51] <autrijus> _metaperl: what .= did

[21:51] <_metaperl> oh!

[21:51] <_metaperl> yes, because ~ is string concat

[21:51] <_metaperl> thanks

[21:51] <autrijus> ingy: and that OO, syntax aside, is isomorphic to any OO system :)

[21:52] <stevan> autrijus: the only issue I found is that of name collisions

[21:52] <stevan> too many new()s

[21:52] <autrijus> (as Sussman and Steele have proved in the Scheme paper)

[21:52] <autrijus> stevan: right, but namespace support should fix that

[21:52] <stevan> i made Config::Tiny's into Config::Tiny::new() for now

[21:53] <autrijus> k.

[21:53] <stevan> autrijus: yup

[21:53] <stevan> it's a hack, but it works

[21:53] <stevan> autrijus: compiling fine now

[21:53] <autrijus> woot.

[21:53] <stevan> autrijus++ # faster then a speeding bullet

[21:53] <stevan> autrijus++ # more powerful than a locomotive

[21:53] <ninereasons> autrijus, you didn't need that ../pugs_config.h line ?  that was the problem?

[21:54] <autrijus> ninereasons: yeah.. because -DPUGS_HAVE_PARROT is passed in via cmdline

[21:54] <autrijus> ninereasons: it has to do with build order

[21:54] <ninereasons> I tried 30 ways to solve that problem.  

[21:54] <autrijus> uh. sorry to hear that

[21:55] <ninereasons> I lived.  feel stupid, though.

[21:55] <autrijus> nah... we all do that one time or another

[21:57] <ninereasons> if I want to add parrot to pugs, is it automagical?

[21:58] <_metaperl> two things about this line of code:    @letters == @solution.grep:{ $_ ne '' };  # 1 : == is doing array comparision instead of smart matching with ~~ # 2 what does the colon after "grep" represent? where can IRead more about it?

[21:58] <autrijus> just set PUGS_EMBED=parrot

[21:58] <autrijus> _metaperl: it represents an adverbial block.

[21:59] <ninereasons> thank you, autrijus 

[21:59] <autrijus> it's like saying

[21:59] <autrijus> grep(@solutions : {$_ ne ''})

[21:59] <autrijus> where @solutions is the invocant

[21:59] <autrijus> and {} the argument

[21:59] <autrijus> you can read more about it on p6l

[21:59] <_metaperl> oh ok

[21:59] <_metaperl> thanks

[21:59] <autrijus> np :)

[22:00] <stevan> ingy: how is Perldoc going? I was looking at it today

[22:01] * stevan would very much like a kwid parser to mess around with

[22:01] <ninereasons> zip() is wonderful.

[22:01] <ingy> stevan: I expect to make major progress RSN

[22:02] <stevan> ingy: in time for you talk at YAPC?

[22:03] <ingy> well yes, but hopefully much sooner

[22:08] <autrijus> ingy: have you played with syck emitter?

[22:08] <ingy> autrijus: no

[22:08] <autrijus> k.

[22:08] <ninereasons> is there a positive definedness counterpart to // ?  (as && is the counterpart to || for truth)

[22:08] <ingy> I should though

[22:08] <ingy> although it is a 1.0 emitter

[22:08] <autrijus> ninereasons: write one yourself :)

[22:09] <ninereasons> ok :-)

[22:09] <autrijus> sub infix<\\> { ... }

[22:09] <autrijus> infix:<>, even

[22:09] <ingy> My test first fu has just had a 1000% increase!

[22:09] <ingy> this bodes very well for my projects

[22:09] <autrijus> nice!

[22:09] <autrijus> because of T::Chunks?

[22:10] <ingy> yes... I've averaged 2 releases a day on that code for over a week

[22:10] <ingy> and applied it to work and now to YAML and Perldoc

[22:10] <ingy> I didn't expect it to work out this nicely

[22:11] <ingy> it just evolved that way

[22:11] <ingy> of course, to be fair, my test first fu was about as low as anyone I know.

[22:12] <ingy> basically I was at loggerheads with choosing between writing tests that were not well refactored, or just not writing tests

[22:13] <ingy> now I have something I not only can live with but actually endorse

[22:13] <ingy> it's my new groove

[22:14] <ninereasons> autrijus, does 'sub infix:<..> {...}' work in the latest version? (i've really been looking forward to playing with that)

[22:14] <stevan> autrijus: any chance of dispatching on IO params too?

[22:14] <_metaperl> I can't seem to find a reference document for adverbial blocks... is there one? I dont really understand them well

[22:15] <stevan> autrijus: currently it does this "pugs: cannot cast from VHandle {handle: <stderr>} to [Char]"

[22:15] <autrijus> stevan: code?

[22:15] <autrijus> stevan: example code?

[22:15] <stevan> autrijus: one second

[22:16] <stevan> perlbot nopaste

[22:16] <perlbot> Paste your code here and #<channel> will be able to view it: http://sial.org/pbot/<channel>

[22:16] <autrijus> ingy: I think if you extend your DATA section has generator capabilities aka LectroTest, that will be the Killer App to bring me back to writing p5 with sanity

[22:16] <pasteling> "stevan" at 67.186.136.119 pasted "multi-sub IO failing" (36 lines, 1.2K) at http://sial.org/pbot/9949

[22:18] <ingy> here is an example test I just refactored http://rafb.net/paste/results/v9oEfN33.html

[22:19] <ingy> autrijus: so I need to read about something called LectroTest

[22:19] <ingy> ?

[22:19] <autrijus> stevan: I think fixed

[22:20] <autrijus> ingy: Test::LectroTest

[22:20] <stevan> ingy: Test::LectroTest (on CPAN), but tmoertel

[22:20] <stevan> autrijus: :)

[22:20] <autrijus> ingy: I think it will be enlightening for you

[22:20] <ingy> thanks

[22:20] <stevan> electrifying even

[22:20] <autrijus> :D

[22:20] <_metaperl> LectroTest is similar to Bivio's test program

[22:21] <ingy> you guys use this yet http://search.cpan.org/~king/WebService-NoPaste-0.03/

[22:21] <ingy> I just did:

[22:21] <ingy> cat t/02fail.t | nopaste

[22:21] <ingy> I love that

[22:21] <autrijus> nice

[22:22] <ingy> if i could just pipe the output to perlbot/#perl6 somehow

[22:22] <autrijus> stevan: IO sub dispatch worksforme

[22:22] <stevan> autrijus: BTW - should this be able to catch the hardfail? (assuming ok($cond is lazy))

[22:22] <stevan> is(foo($*ERR), 'IO', 'dispatched to the IO sub', :todo<hardfail>);

[22:22] <stevan> autrijus: excellent, you have made my last hour (once again) :)

[22:23] <ingy> yeah, it was my idea. I gave it to rking to implement and become  a cpan  author so we could hire him at SocialText

[22:23] <autrijus> stevan: I don't know, try and see :)

[22:23] <stevan> autrijus: it doesnt

[22:23] <ingy> btw, I like how IO::All-isms are finding their way into Perl6

[22:23] <stevan> I am just wondering if it should? or would foo($*ERR) be evaluated it gets passed (which is what I assume would happen)

[22:24] <autrijus> stevan: the left side of is() needs to be is lazy too

[22:25] <stevan> autrijus: can you give me an example which will hardfail? I can't seem to come up with one 

[22:25] <stevan> this one was my best hope :)

[22:25] <autrijus> stevan: exit(1)

[22:25] <autrijus> ;)

[22:25] <stevan> LOL

[22:25] <stevan> okj

[22:27] <_metaperl> could someone give me a kiddie tutorial on adverbial blocks?

[22:29] <ingy> autrijus: Lectro looks neat. I will bind it to Chunks tonight.

[22:29] <_metaperl> I think apocalypse12 is the ticket: http://dev.perl.org/perl6/doc/design/apo/A12.html

[22:31] <autrijus> ingy++

[22:31] <autrijus> ingy++

[22:31] <autrijus> ingy++

[22:31] <autrijus> but I sleep.

[22:31] <autrijus> journal up. I punted again :)

[22:38] <revdiablo> ingy: yeah, larry has mentioned his liking for IO::All a couple of times on p6l

[22:39] <ingy> revdiablo: goodly

[22:39] <nothingmuch> my ass hurts

[22:39] * nothingmuch bought a bike with a seat shaped like a tent peg

[22:40] <ingy> lol

[22:40] <puetzk> nothingmuch: brooks saddle

[22:40] <puetzk> the one, the only :-P

[22:41] <puetzk> you have to survive the breakin period somehow, but after that...

[22:41] <nothingmuch> the seat currently does not need breaking in

[22:41] <nothingmuch> my butt does

[22:41] * puetzk has never been exactly clear on who is breaking in who with a new brooks saddle...

[22:41] <nothingmuch> after i get back in shape a bit i'll see what I need to do

[22:42] * nothingmuch wonders where one can get such a thing in Israel

[22:42] <puetzk> luckily it's generally a once in a lifetime affair ;-)

[22:43] <nothingmuch> what makes them so good

[22:43] <autrijus> oh, io() is blessed?

[22:43] <autrijus> how is it different from open()?

[22:43] <_metaperl> stevan, should the character for blank in hangman.p6 be a constant? how do you specify constants in p6? do we have them yet?

[22:44] <autrijus> zzz &

[22:45] <nothingmuch> ciao autrijus 

[22:45] <autrijus> nite

[22:45] <ninereasons> my ($var) is constant

[22:45] <_metaperl> I see

[22:46] <_metaperl> can we do my $var is constant " " ;

[22:46] <_metaperl> or must assignment be on another line

[22:46] <ninereasons> my int ($pre, $in, $post) is constant = (0..2);

[22:46] <ninereasons> not implemented yet, though.

[22:47] <_metaperl> how long til we roll out p6 do you think?

[22:47] <_metaperl> ghc seems to be limited to very few platforms...

[22:48] <_metaperl> and is arduous to build

[22:48] <_metaperl> are hyperoperators implmented?

[22:49] <nothingmuch> yes

[22:49] <nothingmuch> you can get a good assessment on what is really OK and what is todo by looking at http://pugs.kwiki.org/?SmokedPugs

[22:49] <puetzk> nothingmuch: answered in /query

[22:50] <nothingmuch> ah, that's why the dock icon was bouncing =)

[22:50] <nothingmuch> sorry, the window was minimized

[22:50] <puetzk> np, I just figured you might not have seen it

[22:50] <puetzk> I can post here if anyone else cares about bike saddles :-)

[22:53] <_metaperl> smoked pugs --- that makes me laugh!

[23:05] <ninereasons> many of the tests are very educational.  iblech's work is especially nicely commented and referenced.

[23:06] <nothingmuch> iblech++

[23:06] <ninereasons> iblech++ # indeed

[23:26] <_metaperl> ninereasons, which ones are nicely commented?

[23:28] <ninereasons> iblech often puts some explanation of what he's testing, in the proximity of the tests; and, if a test is referenced, chances are good that it was iblech that added the reference.

[23:28] <ninereasons> and I find his result comments to be clear

[23:29] <ninereasons> references are particularly nice in the smoke results, because they are links there.

[23:35] <ninereasons> t/builtins/die_and_end.t , for example, _metaperl 

