[04:30] <QtPlatypus> Is Page 7  of the state of the onion supposed to be the same as page one?

[04:44] *** khisanth_ is now known as Khisanth

[05:13] <geoffb> netflix++ # Never stand for another cliffhanger

[05:24] <geoffb> chocolate++ # While I'm giving out karma . . . .

[06:18] <autrijus> rehi

[06:18] <autrijus> this Takahashi method is giving me much trouble

[06:18] <geoffb> hi, autrijus 

[06:19] <autrijus> turns out it really wants to be boil down to six 5-minute chunks

[06:19] <autrijus> each only deliver _one_ message

[06:19] <autrijus> sofar:

[06:19] <autrijus> Perl is ergonomic / CPAN is versatile

[06:19] <autrijus> Perl 6 is powerful / Pugs is expansive

[06:19] <autrijus> People are enjoyable / Plans are for real

[06:19] <autrijus> not sure "enjoyable" is the right word

[06:19] <autrijus> anyway, the idea is to style each of 6 as a lightning talk

[06:20] <obra> "Takahashi method"?

[06:20] <autrijus> with a few (3-5) points each to support it

[06:20] <autrijus> obra: http://www.rubycolor.org/takahashi/thinkinrails/img0.html

[06:20] <autrijus> also the cpan module

[06:20] <dduncan> what is a Takahashi method?

[06:20] <autrijus> Acme::Takahashi::Method

[06:20] <dduncan> the only Takahashi I know is a famous manga artist

[06:21] <obra> It's a pity there isn't a good english-language writeup ;)

[06:22] <autrijus> obra: "big letters zoomed to extreme"

[06:22] <autrijus> each slide only carry max 1 sentence

[06:22] <dduncan> yes indeed

[06:22] <autrijus> ideal for brainwashing

[06:22] <obra> Got It

[06:22] <obra> Makes sense.

[06:23] <obra> Live demos are better.

[06:23] <dduncan> as I recall, aren't there a good half million Chinese characters, where each is a sentence of its own, or a place name?

[06:23] <autrijus> not much chance for 30min talk sadly

[06:23] <obra> Japanese examples don't teach westerners well.

[06:23] <autrijus> dduncan: no, each is a "word"

[06:23] <dduncan> yes

[06:23] <autrijus> problem with live demo is it's bound to fail ;)

[06:24] <dduncan> how un-fortunate

[06:24] <obra> :P

[06:25] * geoffb 's favorite case of that (not witnessed in person, sadly): Apparently Oracle, when trying to explain how using network computers tied back to massive backend servers over the net would result in vastly higher uptime than distributed PCs, did a live demo -- in which the network failed, killing all the NCs

[06:27] <dduncan> so its not just Bill Gates demos that have spectacular failures

[06:27] <dduncan> or at least that one with a hardware demo

[06:27] <obra> Demos Fail

[06:28] <dduncan> yes indeed

[06:28] <obra> Compilers Don't.

[06:28] <obra> Catchphrases stick in your mind.

[06:28] <dduncan> which is why, a demoer has "another plan"

[06:28] <geoffb> I used to work with Hasso Plattner, the programmer amongst the founders of SAP -- he was famous for walking into any room with a cool new thing and making it fail by his mere presence.  He didn't even hold it against the engineers -- he knew it was his fault.

[06:28] <obra> Takahashi Method is difficult.

[06:29] <gaal> morning.

[06:29] <dduncan> morning

[06:29] <geoffb> (That was not an attempted name-drop, BTW, just to point out that seemingly all obscenely rich founders of software companies have that destructive aura thing going_

[06:30] <geoffb> morning, gaal, dduncan 

[06:30] <dduncan> I hope that doesn't happen to me

[06:30] <QtPlatypus> geoffb: Its like the oppisite of the enigear effect.  Intermitent faults self rectifiy in the presence of the people who know how to fix them.

[06:30] <geoffb> NODNODNOD

[06:30] <geoffb> Amazing how that works

[06:31] <QtPlatypus> And as soon as they are off sight it goes back to not working.

[06:31] <gaal> seen iblech

[06:32] <geoffb> I get that whenever I finally decide go to the doctor for something low-level but annoying

[06:32] <obra> autrijus: I feel like "people are enjoyable" should become "people are the audience"

[06:32] <geoffb> gaal, iblech is committing but not online of late, sadly

[06:32] <obra> "coding is about people"

[06:33] <geoffb> If he's young enough, it may be school year desires to get sleep and finish homework . . . .

[06:33] <dduncan> and as one of my college instructors often said, "assembly is fun"

[06:33] <autrijus> obra: yes, that's close, but I want one word

[06:33] <geoffb> dduncan, oh yeah

[06:33] <gaal> geoffb: right, forgot that for a bit

[06:34] <obra> people are key? it's about people? e

[06:34] <autrijus> People are our raison d’être ?

[06:34] <obra> what's the talk part actually saying?

[06:35] <autrijus> it's introducing the social aspects.

[06:35] <autrijus> @Larry, lambdacamels, community dynamics

[06:35] <gaal> we X for people?

[06:35] <geoffb> People are paramount?

[06:35] <obra> code is speech / pugs is a discussion ?

[06:35] <gaal> Perl is for People?

[06:36] <geoffb> Perl: Consensual Insanity

[06:36] <autrijus> Perl 6 is powerful

[06:36] <autrijus> Pugs is expansive

[06:36] <autrijus> People are insane

[06:36] <autrijus> Plans are for real

[06:36] <autrijus> I like this

[06:37] <obra> s/insane/crazy/?

[06:37] <autrijus> sure

[06:37] <dduncan> perl-people

[06:37] <obra> since crazy can have more positive aspects.

[06:37] <gaal> bizarre?

[06:37] <obra> what do you mean by "expanisve"?

[06:37] <autrijus> is there someting crazier than crazy?

[06:37] <geoffb> Along which axis?

[06:37] <obra> zany? implies whimsy.

[06:37] <dduncan> yes, sanity

[06:38] <gaal> psychotic, but we don't wanna go there i think.

[06:38] <geoffb> LOL

[06:38] <autrijus> obra: "open, liberal, accepting, multiple fronts, anarchistic, rich"

[06:38] <geoffb> .oO(be vewwy vewwy quiet, the children are sleeping . . .)

[06:38] <gaal> you can zoom through that list, no?

[06:38] <autrijus> rich as in lots of angles to jump in 

[06:38] <autrijus> gaal: yes

[06:38] <GeJ> good morning gentlemen

[06:38] <obra> people are alive

[06:39] <autrijus> good!

[06:39] <dduncan> good morning gentle one

[06:39] <autrijus> obra++ # alive is the ultimate insanity

[06:39] <geoffb> morning, GeJ 

[06:39] <GeJ> wacky?

[06:39] <autrijus> okay, alive it is.

[06:39] <obra> when do you give this talk?

[06:39] <autrijus> 24 hours from now

[06:39] <obra> in talinn?

[06:39] <dduncan> thats what your journal says

[06:39] <geoffb> Wow, autrijus is ahead of schedule then

[06:39] <autrijus> yeah

[06:40] <autrijus> http://www.galois.com/cufp/

[06:41] <obra> only $2000 to fly in for it

[06:42] <obra> but now, &sleep

[06:42] <geoffb> well, at least he's lurking then . . .

[06:42] <obra> good luck with the talk, autrijus

[06:42] <geoffb> night, obra 

[06:42] <autrijus> thanks!

[06:43] <autrijus> "C is for Comprehensive"

[06:43] <autrijus> somehow doesn't ring as exciting as "P is for Practical"

[06:43] <geoffb> agreed

[06:44] <gaal> <cool compelling creative crackin' ...>

[06:45] <geoffb> ...crack-pipe-smokin'...

[06:45] <Khisanth> PC?

[06:45] <dduncan> probably mentioned here already, but I noticed the webalized version of Larry's new onion talk is up ... the one I and some of you saw in person

[06:46] <autrijus> hm, what's that saying?

[06:46] <autrijus> "the only good indian is a dead indian?"

[06:46] <autrijus> something like that

[06:46] <autrijus> trying to adopt it in the CPAN context, eg "Best kind of coding is no coding at all"

[06:46] <autrijus> but worded in a more catchy way

[06:46] <gaal> the best program is one you don't have to write?

[06:47] <gaal> that's less catchy actually

[06:47] <autrijus> yeah

[06:47] <autrijus> CPAN is the super glue; super glue is addictive

[06:47] <autrijus> mmm not quite catchy

[06:47] * gaal laughs

[06:48] <geoffb> Someone has a longer quote . . . not so soundbite catchy, but more generally true ... something along the lines of "You are finished not when there is nothing left to add, but when there is nothing left to take away."

[06:49] <autrijus> Antoine de Saint-Exupéry

[06:49] <geoffb> With the accent no less.

[06:52] <autrijus> Syntactic Aspartame: Shorthands without Bloat

[06:52] * autrijus ponders the metaphor

[06:53] <geoffb> I like it, but Bloat is a tad blunt

[06:53] <autrijus> suggestions?

[06:53] <geoffb> "All the flavor, none of the calories?"

[06:53] <geoffb> "The zero calorie shorthand?"

[06:54] <autrijus> problem is "calorie" carries no CS meaning

[06:54] <autrijus> while Bloat has well estabished engineering meaning

[06:54] <geoffb> "Guilt free sweetness?"

[06:54] <geoffb> nod

[06:54] <gaal> cruftless shorthands?

[06:54] <gaal> nah..

[06:55] <autrijus> cruft has no food meaning :p

[06:55] <autrijus> hm, I wonder if anyone will get it with I put "-Ofun" on a slide

[06:55] <geoffb> Many, I think

[06:55] <autrijus> it stays then

[06:56] <geoffb> Can't come up with a better aspartame comment

[06:56] <geoffb> sigh

[06:57] <autrijus> Manipulexity vs. Whipuptitude: Abstractions are sexy, Shorthands are comfortable

[06:57] <gaal> i'll never be a copywriter... :)

[06:57] <gaal> Whipuptitude? is that prototypability?

[06:57] <autrijus> yeah

[06:57] <autrijus> larry's word, not mine

[06:58] <gaal> "prototypability without the liability"

[06:58] <geoffb> I can never remember if Larry has both t's or just the second one

[06:58] <autrijus> also maybe not "comfortable"

[06:58] <autrijus> gaal: he used both

[06:58] <autrijus> er

[06:58] <autrijus> geoffb: he used both

[06:58] <autrijus> on different occasions

[06:59] <geoffb> ah, explains my confusion

[06:59] <gaal> is that in the onion talk? i'm reading it now

[06:59] <geoffb> The OSCON 2005 one?

[06:59] <autrijus> no, was in an earlier

[06:59] <autrijus> gaal: http://dev.perl.org/perl6/talks/2000/als/

[06:59] <geoffb> What I got out of that one (the OSCON 2005 Onion) is that his kids are talented.

[07:00] <dduncan> the new one is at http://www.perl.com/pub/a/2005/09/22/onion.html ; I'm reading it now

[07:00] <dduncan> some of you are even mentioned by name

[07:00] <Khisanth> ah that is finally up?

[07:01] <Khisanth> Larry should have used a bigger head :)

[07:01] <dduncan> it is so up

[07:01] <autrijus> it's also far out

[07:01] <dduncan> and don't forget, Larry's daughter drew all those character cards

[07:01] <dduncan> she told me herself

[07:02] <QtPlatypus> Larry's daughter is a pritty good artist

[07:02] * dduncan met Larry's whole family an hour prior to the evening's events, when very few people were there

[07:03] <QtPlatypus> Though did anyone else wish to play that spy game.

[07:03] <geoffb> I certainly did

[07:04] * xinming_Beijing wishes to see Larry. :-)

[07:05] <geoffb> He's not that impressive in person.

[07:05] <geoffb> Or at least, I didn't find him so.

[07:05] <Khisanth> or in picture form!

[07:05] <QtPlatypus> In photoes he looks like Doug Winger a little

[07:06] <QtPlatypus> (Warning googleing for Doug Winger is NSFW)

[07:06] <dduncan> Larry is certainly not an over bearing person

[07:06] <Khisanth> is he calling Python evil? :)

[07:06] <dduncan> he's certainly slinging a few at Python

[07:07] <geoffb> I think all of the dynamic language designers like to tease each other

[07:07] <dduncan> Python and Perl in particular, have a little friendly rivalry going on

[07:08] <dduncan> they certainly use polar opposites to expouse a virtue of their side

[07:08] <geoffb> nodnod

[07:08] <dduncan> eg, "there's more than one way ... " vs "there's only one way ..."

[07:09] * QtPlatypus just doesn'y understand why python doesn't have declare before use testing.

[07:09] <dduncan> what does that mean?

[07:09] <dduncan> ...

[07:10] <QtPlatypus> use strict `vars`;

[07:10] <dduncan> or do you mean that all variables spring into use on first reference

[07:10] <dduncan> that's odd

[07:10] <dduncan> I know PHP is that way, but I thought Python was more strict

[07:10] <Khisanth> weird but only for Python :)

[07:11] <dduncan> I've never used Python, but I always got the impression it was uber-strict

[07:11] <dduncan> on purpose

[07:11] <dduncan> it actually cares about indent whitespace

[07:12] <Khisanth> so does Haskell... in some cases :)

[07:12] <QtPlatypus> dduncan: As haskell does

[07:12] <dduncan> so you say ... I've never written Haskell either

[07:12] <geoffb> More language foolishness has happened because of bad answers to "I never want to make another bug like that again . . . "

[07:13] <autrijus> second sketch up - feel freeo to hack

[07:13] <svnbot6> r7111 | autrijus++ | * Second sketch at Zurich airport

[07:13] <autrijus> I'll board in <1hr

[07:14] <dduncan> and I'll bed before that

[07:14] <gaal> i think the reason significant whitespace works in haskell is that it's so terse, and it helps it stay terse.

[07:14] <autrijus> and also in Haskell it's optional

[07:14] <Khisanth> it IS kinda nice to have more or less uniform code between various coders

[07:14] <autrijus> (and rational

[07:15] <autrijus> )

[07:15] <Khisanth> on the other hand wouldn't Lisp do better in that category? :)

[07:17] <gaal> autrijus: unwrapping pugs turned out to be hard. i'm really inclined to revert the frontend, though i'm not happy about it.

[07:17] <gaal> what do you think?

[07:17] <gaal> (hard = exec in haskell is worse than in perl5; and even in perl5 it didn't work well on windows)

[07:18] <autrijus> uh, why? I thought pugs has Prim exec

[07:18] <autrijus> shouldn't that be just that?

[07:18] <gaal> let me look, but haskell doesn't even *have* a standard exec, even not in posix.

[07:19] <autrijus> executeFile

[07:19] <autrijus> it's in our Compat

[07:19] <gaal> ugh, exec calls executeFile, which is execvp or ve or one of those

[07:19] <gaal> and it doesn't work on windows.

[07:20] <autrijus> code in a shim?

[07:20] <autrijus> have it do a system

[07:20] <autrijus> and then exitWith the error code

[07:20] <autrijus> should be easy

[07:20] <gaal> don't think it'll work with the console

[07:21] <gaal> for interactive programs

[07:21] <autrijus> I think it does, since PAR uses that trick

[07:21] <autrijus> try rawSystem in System.Cmd

[07:21] <gaal> okay, thanks

[07:21] <autrijus> np :))

[07:21] <autrijus> gaal++

[07:21] <autrijus> that will also get us exec() for free

[07:21] <autrijus> on win32 as a prim

[07:22] <gaal> say that when it works :)

[07:22] <gaal> i'm none of larry's children's agents!

[07:25] <gaal> my personality is not reducible to a card: [gaal] does not compile

[07:25] <autrijus> it means you are already in Weak Head Normal Form

[07:25] <autrijus> (i.e. irreducible)

[07:26] <gaal> weak head sounds about right

[07:26] <gaal> though normal doesn not

[07:27] <dduncan> I think Larry clearly names 3 of the 16 with individuals ... Autrijus (Ace), Damian (Le Chat), and himself (Wu-Li); the last one was a mock mistaken reveal

[07:28] <gaal> hah, i was hardly expecting to have a card *for* me, dduncan :)

[07:29] <dduncan> its more that Larry said the 3 real people were examples of those 3 roles

[07:29] <dduncan> you can probably find yourself too

[07:29] <dduncan> I can sort of find myself

[07:30] <gaal> what kind of a spy can't find themselves? har.

[07:30] <dduncan> in my case, I probably identify with "Miss Engles", the librarian

[07:31] <Khisanth> gaal: a great one!

[07:31] <gaal> nah, i think a great spy can't be found, like

[07:31] <gaal> hey, where's foo!?

[07:32] <gaal> ah, there she is.

[07:32] <gaal> (that's my cat. and no, no relation.)

[07:32] <dduncan> can any of you identify a specific character that you seem the most like (you can give both an honest and made up answer, but say which is which)

[07:33] * Khisanth is only one page 2

[07:33] <dduncan> I personally find a lot to identify with in Miss Engles

[07:34] * gaal is amused to be thrown into taxonomical confusion by larry wall of all people

[07:34] <dduncan> Khasanth, that one is the 3rd person, which you get to on page 5; Autrijus/Ace is on page 4

[07:35] <dduncan> s/a/i/

[07:35] <Khisanth> I am at "Though offhand, I can't explain how I missed seeing Ruby. So anyway, I ended up with "Pearl" instead."

[07:35] <Khisanth> that one is actually easy to explain, words was probably sorted alphabetically :)

[07:36] <dduncan> in some ways, this is all funnier in person ... but the text does capture some of the humor

[07:37] * dduncan thinks maybe we should make a sign-up wiki of sorts where each member of the Perl community signs up under the personality they most self-identify with

[07:38] <dduncan> or, people could sign others up too

[07:38] * gaal would like to see dduncan after work :)

[07:38] <dduncan> well, you know where I live

[07:39] <gaal> actually, i don't, but hey! we have this YAPC coming up in February.... :)

[07:40] <dduncan> all the info's there if you know how to use WHOIS

[07:40] <gaal> all pugs hackers welcome.

[07:40] <dduncan> I own about 30 domains

[07:40] <autrijus> gaal: on the swiss air magazine I read a few articles about Tel Aviv

[07:40] <autrijus> it looks like a very happening place :)

[07:40] <gaal> if i don't know it, it can't be wrestled out of me in torture!

[07:40] <gaal> aye, that it is

[07:42] <autrijus> boarding now. :) *wave*

[07:42] <dduncan> regarding YAPC, I don't know yet ... on one hand, I'm deeper in the hole than before after borrowing for OSCON ... on the other hand, I just interviewed today for a paid full time job that I figure I have a good chance at

[07:42] * dduncan *wave*

[07:43] <geoffb> have a good flight

[07:43] <dduncan> if I get said job, I may have a new influx of money leading to a possible YAPC attendence

[07:43] <gaal> have a nice flight!

[07:43] <dduncan> gaal, are you going to it?

[07:43] <spinclad> good wings

[07:43] <dduncan> oh, and have a nice flight

[07:44] <dduncan> don't let your wings get tired

[07:44] <gaal> dduncan: i'm helping to organize it (the one in .il that is)

[07:45] <dduncan> I'd still be interested in meeting autrijus ... more difficult now that he's sworn off the US

[07:45] <dduncan> maybe another YAPC will be in Canada?

[07:45] <gaal> autrijus is coming to YAPC::Israel :-)

[07:45] <dduncan> oh, that one

[07:45] <gaal> as is Larry :-)

[07:45] <dduncan> I've never been out of NA in my life

[07:46] <gaal> now's your chance, bring a friend

[07:46] <dduncan> such a trip is probably excessive for such a short term, but maybe in a few years after the debt's completely gone

[07:46] <dduncan> NA is cheaper

[07:47] <gaal> it probably is... unless you have to pay for a hotel, when it starts getting very expensive fast

[07:47] <Khisanth> all the magical cruft has been moved out and replaced with new ones :)

[07:47] <dduncan> autrijus must have a lot of money, to keep making all these international trips each year ... or a sponsor

[07:48] <dduncan> at OSCON, I shared a hotel with 3 people, so the whole week cost me about $220

[07:48] <dduncan> room

[07:48] <dduncan> driving was my travel, total cost around $100

[07:49] <dduncan> the event was the expensive part

[07:49] <dduncan> I anticipate that any YAPC turns that on its head

[07:49] <dduncan> cheap event, expensive travel

[07:49] <gaal> yeah, the ticket for the conf is less than $100

[07:50] <dduncan> yes, no problem there ... the travel is the biggest issue, I think

[07:50] <gaal> actually, it's less than USD 65

[07:50] <dduncan> that's cheap travel ... for you

[07:51] <gaal> travel from the States is around $700 from NY

[07:51] <dduncan> I live in Victoria, BC, Canada

[07:51] <gaal> oh, $65 is the event, essentially free

[07:52] <gaal> i think it's around $700 from toronto too, how much is the domestic flight?

[07:52] <dduncan> it seems that http://www.yapc.org/ doesn't mention the 2006 events yet

[07:52] <gaal> OSCON is immensely expensive, isn't it.

[07:52] <dduncan> yes

[07:53] <dduncan> after discounts, it was $1700 CDN for me

[07:53] <gaal> http://www.perl.org.il/YAPC/2006/

[07:53] <gaal> yikes, that's like what, 1300 USD?

[07:53] <dduncan> 1350 USD

[07:54] <dduncan> that's after 15% early reg discount and 15% user group discount

[07:54] <dduncan> in future years I will qualify for alumni discount, which I guess is 25% or so

[07:54] <dduncan> so thats CDN 1700 for conference, and CDN 400 for travel and hotel

[07:55] <dduncan> because it was this close to where I live

[07:55] <gaal> ouch. the commercial conf business is a different world

[07:55] <dduncan> indeed

[07:55] <dduncan> this said, anyone who gives a 45 min talk gets in free ... I anticipate doing that next time I go

[07:55] <gaal> we're scampering to get venue donations and stuff

[07:56] <gaal> k, i need to hack a bit... later?

[07:56] <dduncan> laters

[07:56] <dduncan> tomorrow

[07:56] <gaal> bye!

[07:59] <dduncan> note that the 1700 included the 2 tutorial days; if not for them, it would have been around 40% less ... CDN1000 or so for the conference proper

[07:59] <dduncan> which was 3 days

[08:10] <szabgab> I wonder what is the status of other front ends for Pugs

[08:11] <gaal> szabgab: font ends or backends? you mean compile p6 -> javascript for example?

[08:11] <szabgab> I am not really folowong the development but I receall there was some reorganizations

[08:11] <szabgab> so tehre can ba Python front end

[08:11] <dduncan> you typing real fast?

[08:11] <szabgab> O mean Python-> PILS or whatever that would be called

[08:11] <gaal> compile python to p6? that'd be nice, but i don't know anyone working on it.

[08:12] <szabgab> dduncan: I try but I should not :-)

[08:12] <dduncan> your spelling implies something along the lines of too fast for good

[08:12] <gaal> AFAIK the only other language that turns into a pugs AST is yuval's Blondie

[08:12] <szabgab> not to p6 I think but to the internal tree, it is called PILS, I think. Right ?

[08:12] <gaal> but that's highly experimental stuff

[08:13] <gaal> PIL

[08:13] <szabgab> AST ? PIL ?

[08:13] <gaal> it's not short for Pilsen :)

[08:13] <szabgab> ah, :-(

[08:13] <dduncan> but it is an acronym

[08:13] <gaal> PIL, Pugs Intermediate Language

[08:13] * gaal goes back to yak shaving

[08:13] <szabgab> yeah, I think I wanted to write PILs 

[08:15] <szabgab> So the question is how easy or difficult it would be to work on Python to PIL ? Maybe on a Hackathon in February ?

[08:15] <szabgab> OK, who knows what will be working by then.

[08:16] <gaal> this is quite a new direction

[08:17] <geoffb> g'night all

[08:17] <gaal> it'll probably be much easier to write python -> parrot bytecode

[08:17] <gaal> (or some other mutual VM)

[08:17] <szabgab> I am trying to think what could be convincing for some Pythonists to join Pugs and maybe our hackathon?

[08:18] <gaal> nothing comes to mind

[08:19] <gaal> but it's an interesting notion :)

[08:19] <Khisanth> for demonstrating PIL's flexibility?

[08:19] <szabgab> In the last Python meeting I attended  (and actually on earlier discussions as well) there is not much interest in the Python community towards Parrot

[08:19] <gaal> they get python -> js etc. for free

[08:20] <szabgab> gaal++

[08:20] <gaal> but it's quite an undertaking.

[08:21] <Khisanth> that can probably be done more easily without getting PIL involved :)

[08:25] <GeJ> implementing python on parrot, hum... isn't this what pirate is for?

[08:26] <Khisanth> there are already multiple implementations of python, I am sure another wouldn't hurt :)

[08:26] <GeJ> Pirate is a generic parrot compiler, but isn't there a sub-project (Dutchman or something) for a python frontend?

[08:36] <dduncan> nap time!

[09:25] *** wilx` is now known as wilx

[10:03] *** frey_ is now known as lao

[10:08] <gaal> rehi

[10:10] <dada> hi gaal

[10:10] <dada> gaal: did you convince putter to drop the pugs script? ;-)

[10:11] <gaal> dada: autrijus convinced me to add exec to pugs ;-)

[10:11] <gaal> i got basic support working, committing soon

[10:13] <dada> all's well, that ends well

[10:14] <gaal> it ain't over yet... we have to see it actually works where we need it

[10:15] * gaal needs coffee

[10:17] <gaal> ?eval multi sub x(@args) {"array"} multi sub x($str) {"scalar"} x("which am i?")

[10:17] <evalbot_7111> 'scalar' 

[10:18] <gaal> hmm, good, but that's not what i'm seeing here :-(

[10:19] <dada> what do you see?

[10:20] <gaal> i have a few facades in the Prelude

[10:20] <gaal> the one that accepts a scalar is supposed to split on whitespace and create an argv from that

[10:20] <gaal> (similar to what p5 does)

[10:20] <gaal> but i don't think that's being called

[10:21] <gaal> svn up and try for yourself

[10:21] <gaal> brb, coffee

[10:24] <svnbot6> r7112 | gaal++ | exec Compat for win32. Works, but not perfectly yet.

[10:29] <dada> hm?

[10:29] <dada> what should I try exactly?

[10:29] <gaal> Saeco++ # cheap but excellent espresso machines

[10:30] <gaal> dada: pugs_bin -e "exec('/windows/system32/cmd.exe /c echo moose')" etc.

[10:31] <gaal> dada: pugs_bin -e "exec('cmd')" does in fact work

[10:31] <gaal> oh, oops, i forgot to exit! :)

[10:34] <nothingmuch> hola luqui 

[10:34] <nothingmuch> pipe-ookoo-pipe

[10:34] <nothingmuch> that's a nice alt nick

[10:35] <luqui> hola

[10:35] <luqui> isn't though... :-/

[10:35] <luqui> s/t/t it/

[10:35] <dada> gaal: harrr!

[10:36] <luqui> oh boy, my laptop gets to update 2000 revisions of pugs. fun.

[10:36] <dada> NMAKE : fatal error U1073: don't know how to make 'pugs.exe.bat'

[10:36] <gaal> touch it.

[10:36] <gaal> i don't know who added that, must have been from the batch file wrapper attempts.

[10:37] <dada> the Makefile is borked

[10:37] <gaal> is it?

[10:37] <dada>         C:\data\perl\bin\perl.exe -Iinc -MExtUtils::Command -e cp pugs.exe C:\da

[10:37] <dada> da\pugs\blib\script\pugs.exe

[10:37] <dada> oops

[10:38] <dada> that should be pugs, not pugs.exe

[10:38] <gaal> yes, because '$pugs' is set with _bin at the top of Makefile.PL

[10:38] <gaal> not sure it's worth fixing as we're unwrapping anyway.

[10:44] <gaal> wha--?

[10:44] <gaal> ?eval "asdf zxcv qwer".split(rx:Perl5/\s+/)

[10:44] <evalbot_7112> ('asdf', 'zxcv', 'qwer') 

[10:45] <gaal> ?eval sub d($x){$x.split(rx:Perl5/\s+/)} d("qwer asdf zxcv")

[10:45] <evalbot_7112> ('qwer', 'asdf', 'zxcv') 

[10:45] <gaal> ?eval sub d($x){my @arr = $x.split(rx:Perl5/\s+/)} d("qwer asdf zxcv")

[10:45] <evalbot_7112> ['qwer', 'asdf', 'zxcv'] 

[10:46] <gaal> um

[10:46] <Juerd> d() is probably in item context.

[10:46] <Juerd> ?eval sub d { want } d

[10:46] <evalbot_7112> 'Scalar (Any), LValue' 

[10:46] <Juerd> Yep.

[10:47] <Juerd> Still, the list returned in the first case is weird and wrong

[10:47] <gaal> i'm getting something unsplit in @arr

[10:47] <Juerd> Lists can't *exist* in non-list context :)

[10:47] <Juerd> ?eval sub d { want } list d

[10:47] <evalbot_7112> 'List (Any), LValue' 

[10:47] <Juerd> ?eval sub d { want } item d

[10:47] <evalbot_7112> 'Scalar (Any), LValue' 

[10:48] <Juerd> ?eval sub d { want } item ~d

[10:48] <evalbot_7112> 'Scalar (Any)' 

[10:48] <Juerd> Str.

[10:48] <Juerd> Context isn't done yet?

[10:48] <gaal> that's not the problem i'm seeing

[10:48] <gaal> i think

[10:48] <gaal> i'm doing:

[10:48] <gaal> my @args = $string.split(rx:Perl5/\s+/);

[10:48] <gaal> but @args is being populated with one unsplit string.

[10:49] <luqui> ?eval sub d { say want };  my @a = d;

[10:49] <evalbot_7112> List (Any) [bool::true] 

[10:49] <luqui> hmm..

[10:52] <gaal> looks like i'm going mad, but i have the debug prints to prove i'm not :)

[10:52] <luqui> yeah, that is odd

[10:53] <luqui> what is the sig of split in prim.hs?

[10:54] * QtPlatypus is looking at module HTTP::Server::Simple "Does module imply class?"

[10:55] <gaal> split has some magic to allow both argument orders

[10:55] <gaal> trying the other form now

[10:55] <luqui> QtPlatypus, I think it's the other way around

[10:55] <luqui> but Larry's big on his tagmemics, so it's possible

[10:56] <gaal> luqui: so split has lots of Prim sigs

[10:56] <gaal> anyway calling it in non-OO form doesn't help either.

[10:56] <luqui> hmm

[10:57] <luqui> yeah, and they all return Lists

[10:57] <gaal> yup

[10:58] <gaal> let's see what the fasttrack version does

[10:58] <svnbot6> r7113 | luqui++ | Added my theory proposal.  Hopefully this isn't too far off from the final draft,

[10:58] <svnbot6> r7113 | luqui++ | but I want to have the lambdacamels look it over first.

[10:58] <luqui> fasttrack?

[10:58] <gaal> (the one that thunks to haskell's `words`)

[10:58] <luqui> ahh

[10:58] <gaal> (and `thunk` in the api sense, not the closure sense)

[10:59] <gaal> precompilation must be made faster :-)

[11:00] <gaal> so, my stereo's off. what should i remedy that with>?

[11:01] <nnunley> Power.  More power.

[11:02] <gaal> ah, but of what sort?

[11:02] <gaal> wow, the built-in haskell words version works.

[11:02] <gaal> scary.

[11:09] <gaal> dada: pin

[11:09] <gaal> !!g

[11:10] <svnbot6> r7114 | gaal++ | exec:

[11:10] <svnbot6> r7114 | gaal++ | * exit when successful, duh

[11:10] <svnbot6> r7114 | gaal++ | * use a form of split that actually works (split should be fixed though!)

[11:12] <gaal> split.t has this note:

[11:12] <gaal> 4073  broquaint # XXX - this needs to be updated when Str.split(Str) works again

[11:12] <gaal> 4073 was a while ago, anyone handle this lately?

[11:12] <gaal> also:

[11:13] <gaal> seen broquaint

[11:13] * gaal resists yakshaving digressions :/

[11:34] <QtPlatypus> Has someone updated Test.pm after the ?? change.

[11:35] <gaal> sure

[11:35] <gaal> make sure you aren't using an old one installed in your system

[11:36] <gaal> PERL6LIB should be blib6/lib

[11:40] * QtPlatypus nods "thanks"

[11:40] <gaal> np :)

[11:54] <GeJ> 6.2.10 could be 6.28.0???

[11:54] <GeJ> wow...

[11:58] <gaal> haskell idom help wanted! any lambdaheads about?

[11:58] <luqui> hello

[11:58] * luqui isn't fluent in haskell, but can probably figure it out

[11:58] <gaal> heya! i have something that wants to be a guard expresion, but the conditions are monadic. nopaste coming up.

[11:59] <pasteling> "gaal" at 192.115.25.249 pasted "prettify this" (7 lines, 213B) at http://sial.org/pbot/13265

[12:00] <gaal> is it simply a matter of purifying it by introducing unsafePerfomIO?

[12:00] <gaal> (i keep writing unsafePerlform...)

[12:01] <luqui> hmmm

[12:01] <gaal> usually monadic compuations stop at the first failing one

[12:01] <gaal> i want the reverse

[12:01] <gaal> stop at the first successful one.

[12:02] * luqui has an idea

[12:02] * gaal braces himself

[12:02] <luqui> hmm, can I just paste it on top of yours

[12:02] <luqui> n/m

[12:02] <gaal> hmmm?

[12:03] * luqui fights with his browser window a bit

[12:04] * luqui then thinks a little, realizing that his idea wasn't as conceptually simple as he thought

[12:05] <gaal> i'll ask on #haskell. they're sure to give me conceptually simple ideas!

[12:05] <luqui> I was going for syntactically simple :-)

[12:05] <gaal> ;-)

[12:06] <luqui> but I need a function that takes (a -> IO b) -> IO (a -> b)

[12:06] <gaal> hoogle?

[12:06] <luqui> it was taking forever to load

[12:06] <luqui> and it doesn't index much

[12:06] <luqui> but I'm looking now

[12:07] <luqui> now I'm curious

[12:07] <gaal> !? why does e.g. floor show up there?

[12:08] <Juerd> Does pugs even know void context yet?

[12:09] <Juerd> Or is what I'm doing absolutely futile because it just doesn't exist? :)

[12:14] <luqui> ?eval sub d () { say want }  d; d; d

[12:14] <evalbot_7114> Void, LValue Void, LValue Scalar (Any), LValue bool::true 

[12:18] <gaal> luqui: we've stumped them? :)

[12:18] <luqui> seems so

[12:19] <luqui> I might be on to something with MaybeT

[12:19] <luqui> but you might as well write it as cascaded ifs

[12:19] <gaal> indeed

[12:19] <QtPlatypus> How did 3 calls to say result in four outputs"

[12:20] <luqui> ?eval 4

[12:20] <evalbot_7114> 4 

[12:21] <luqui> zero calls to say resulted in one output

[12:21] <luqui> but I think you were misreading the output

[12:21] <luqui> ?eval sub d () { say "{", want, "}" }  d; d; d

[12:21] <evalbot_7114> , want,  , want,  , want,  bool::true 

[12:21] <luqui> er

[12:21] <luqui> oh yeah

[12:22] <luqui> ?eval sub d () { say "[", want, "]" }  d; d; d

[12:22] <evalbot_7114> [Void, LValue] [Void, LValue] [Scalar (Any), LValue] bool::true 

[12:22] * QtPlatypus nods

[12:26] <pasteling> "luqui" at 67.165.197.242 pasted "Monadic guard" (7 lines, 194B) at http://sial.org/pbot/13266

[12:26] <luqui> s/case/return $ case/

[12:26] <gaal> luqui: thanks; does this perform fileExists on both first?

[12:27] <gaal> s/does/doesn't/

[12:27] <dada> gaal: "pugs" by itself seems to be working fine now

[12:27] * luqui doesn't know anything about evaluation order :-)

[12:27] <gaal> really? cool!

[12:27] <dada> gaal: I mean the pugs.bat incarnation

[12:27] <luqui> lazy languages scare me in that respect

[12:27] <gaal> dada: very nice

[12:27] <gaal> your work?

[12:28] <gaal> luqui: mind if i ask on haskell?

[12:28] <luqui> nopers

[12:28] <gaal> or ask yerself!

[12:29] * luqui doesn't really care

[12:29] * luqui is just trying to find a way to keep from doing n bindings before an n-line case test

[12:29] * gaal asked.

[12:30] <dada> even pugs -e "say <hi>" (with a space) works

[12:30] <gaal> dada: who fixed this, you? i didn't notice any commits about this

[12:30] <dada> no, I didn't :-)

[12:30] <dada> someone added a pugs.bat to the rep

[12:31] <gaal> svn praise shows it's putter :)

[12:31] <dada> he did the right thing :-)

[12:31] <gaal> he has some polyglot code on his homepage already :)

[12:31] <gaal> putter++ putter++ putter++

[12:32] <gaal> shame that i missed this commit though

[12:34] <Juerd> 14:15 < luqui> ?eval sub d () { say want }  d; d; d

[12:34] <Juerd> 14:15 < evalbot_7114> Void, LValue Void, LValue Scalar (Any), LValue bool::true

[12:34] <Juerd> aha

[12:34] <Juerd> Stupid me. 

[12:34] <Juerd> Thanks :)

[12:35] <pasteling> "luqui" at 67.165.197.242 pasted "Monadic guard" (10 lines, 310B) at http://sial.org/pbot/13267

[12:37] <gaal> luqui: #haskell that!

[12:37] <luqui> what are we asking?

[12:38] <gaal> i dunno, for a review? it looks like it works but isn't idiomatic

[12:39] <gaal> but maybe like ski said that can be hidden in a function

[12:39] <gaal> never mind - i'll focus on getting my actual code working now :)

[12:39] <gaal> thanks!

[12:40] <luqui> :-)

[12:42] <luqui> gaal, btw, you can align them

[12:42] <luqui> apparently the $ at the end lets you do that

[12:49] <svnbot6> r7115 | luqui++ | Minor edits, noticed a bug in the proposal and wrote it down so I can think about it.

[13:25] <gaal> luqui: got another minute? this all has to be in Maybe, but I'm finding that confusing.

[13:25] * luqui likes Maybe

[13:25] <luqui> sure

[13:25] <pasteling> "gaal" at 192.115.25.249 pasted "some more lifting necessary" (29 lines, 1.2K) at http://sial.org/pbot/13271

[13:27] <gaal> (the current snippet is obviously wrong in findHelper (x:xs); for one thing the fileExists should be liftIO'ed (right?)

[13:27] <gaal> )

[13:27] <luqui> hang on.   I read haskell at about ten characters per minute :-)

[13:30] <gaal> yeah, and that's a little hairy

[13:30] <gaal> the basic idea is that we want to find an appropriate file in a search path

[13:30] <luqui> it seems like findHelper should be :: [[FilePath]] -> IO (Maybe FilePath)

[13:31] <gaal> with a little extra complication of having two alternate names in each node in the path list

[13:31] <gaal> hmmm

[13:32] <luqui> I don't see you needing to lift at all here

[13:32] <gaal> lesseee

[13:33] <gaal> findHelper [] = Nothing    => .... IO Nothing?

[13:33] <luqui> findHelper [] = return Nothing

[13:33] <gaal> ah yesofcourse

[13:34] * luqui never realized how insanely much signatures help readability

[13:34] <luqui> having the signature separate from the definition is a big win

[13:34] * luqui thinks about perl :-)

[13:38] <svnbot6> r7116 | fglock++ | * perl5/Array - changed stringification, join.t passes 5 more tests

[13:38] <gaal> luqui: there's a problem with the otherwise clause:

[13:39] <gaal> | otherwise -> findHelper xs

[13:39] <gaal> Couldn't match `String' against `Maybe FilePath'

[13:39] <gaal> s/clause/guard/

[13:39] <luqui> that's... weird

[13:40] <luqui> oh

[13:40] <luqui> you can't return an IO something

[13:40] <luqui> so you have to factor the return inside the case

[13:40] <gaal> only in the first two?

[13:40] <luqui> right

[13:41] * gaal tries

[13:41] <gaal> that worked. thanks a lot :)

[13:41] <luqui> sure

[13:42] * luqui really likes haskell because it seems that if something type checks then it works

[13:42] <luqui> at least as long as you keep your functions small

[13:42] <gaal> that's only because nothing ever typechecks!

[13:42] <luqui> which is consistent with software in general

[13:42] <luqui> nothing ever works!

[13:43] <gaal> yup. btw that comonad thing is utterly frightening.

[13:43] <luqui> quite

[13:44] <luqui> fortunately, haskell is not a language in which it can work :-)

[13:44] <gaal> the thread i found ended in suspense

[13:44] <gaal> # http://www.mail-archive.com/haskell-cafe@haskell.org/msg02749.html

[13:45] <luqui> ski has some commentary on the haskell wiki

[13:45] <luqui> he says that a linear type system would allow them

[13:45] <luqui> but you get a noninvertible "zero type" otherwise... whatever that means

[13:46] <gaal> it's the frequency of the phrase "whatever that means" that unsettles me

[13:46] <luqui> heh

[13:46] <luqui> I figure I'll start to get it once I get my second PhD in mathematics

[13:46] <luqui> :-)

[13:48] <gaal> maybe it only works for odd primes.

[13:49] <luqui> maybe it only works for 2, like fermat's theorem

[13:51] <gaal> it's likely. you never know what strain of getting a third math PhD might do to you.

[13:55] <gaal> yay! -B works on win32 from within pugs!

[13:55] <luqui> cool

[13:55] <gaal> just to check that the interactive mode isn't hopelessly b0rked

[13:56] <gaal> (what a nice pat on the back that i need to install a module of my own from CPAN to do that!)

[13:57] <Juerd> munin++

[13:57] <Juerd> Easy to write plugins for

[13:57] <gaal> spectacular, it does work. @prereqs_for_taking_over_the_world.shift;

[13:57] <Juerd> http://munin.convolution.nl/local/feather.perl6.nl-perl6_pugssize.html

[13:57] <Juerd> Not the most interesting graph yet

[13:57] <Juerd> But it works :)

[14:00] <luqui> Juerd, the size of the executable?

[14:00] <Juerd> "This graph shows the size of the stripped pugs executable."

[14:00] <Juerd> The description is below the charts

[14:00] <luqui> heh

[14:00] <luqui> reading is for chumps

[14:01] <Juerd> You read IRC

[14:01] <luqui> maybe I listen

[14:01] <Juerd> You like data to be pushed to you, rather than pulling it? If so, you're the perfect victim for advertisements :)

[14:01] <Juerd> No, you're not listening to IRC

[14:01] <Juerd> There are several ways to tell :)

[14:02] <Juerd> 15:57 < gaal> spectacular, it does work. @prereqs_for_taking_over_the_world.shift;

[14:03] <Juerd> Isn't that $gaal.goals{'take over the world'}.prereqs.shift?

[14:03] <gaal> no, it's global to pugs hackers.

[14:03] <Juerd> heh

[14:04] <gaal> take over the world = global (sorry! :-)

[14:04] <Juerd> Anyway - does anyone know how to fetch just the number of the current revision, without having any local copy? (svk or svn)

[14:04] <Juerd> I think that'd be an interesting thing to chart

[14:05] <gaal> you mean of your current executable? or what's the latest commit in the official repository?

[14:05] <Juerd> It can be seen as a DERIVE counter: it'll plot the difference

[14:05] <Juerd> The latter

[14:05] <svnbot6> r7117 | gaal++ | `-B backend` can now be handled by the main pugs executable again.

[14:05] <svnbot6> r7117 | gaal++ | next step is to remove the perl5 wrapper.

[14:05] <Juerd> The executable and my working directory lag with 15 minutes

[14:05] <Juerd> This is a 10 minute thing, so it has a possible lag of 5.

[14:06] <Juerd> It can be more even

[14:07] <gaal> you could webscrape it...

[14:08] <gaal> http://svn.openfoundry.org/pugs/ has the revision in the header

[14:08] <gaal> it's not a very great way, but if you don't have a real svn/svk client...

[14:09] <Juerd> Ah, this is perfect

[14:09] <Juerd> Thank

[14:09] <Juerd> s

[14:10] <gaal> you're most welcome. nice graphs :)

[14:10] <gaal> could someone who's on unix please see if exec still works for them?

[14:12] <gaal> and if `pugs_bin  -B JS` starts an interactive shell?

[14:12] <Juerd> if exec works?

[14:12] <Juerd> The exec syscall?

[14:13] <Juerd> Or the pugs function? 

[14:13] <Juerd> Or...?

[14:13] <luqui> wow, I totally cannot understand BlowNose in #haskell

[14:13] <fglock> gaal: I get "src/Pugs/Compat.hs:62:82: Not in scope: type constructor or class `ExitCode'" when starting compilation - but it may be a problem here

[14:13] <gaal> Juerd: the exec builtin in pugs. It's been refactored.

[14:13] <gaal> fglock: no, it's very likely my bug. sec.

[14:14] <Juerd> You have a feather account...

[14:14] <Juerd> exec works

[14:15] <Juerd> (on feather)

[14:15] <gaal> fixed

[14:15] <gaal> Juerd: yes, just realized that

[14:15] <fglock> gaal: src/Pugs/Compat.hs:65:9: Not in scope: `try'

[14:15] <svnbot6> r7118 | gaal++ | unbreak build on non-Windows systems. fglock++

[14:16] <gaal> hmmm.

[14:16] <gaal> ook, sec

[14:19] <gaal> evalbot runs on windows? interesting

[14:20] <gaal> or: how come Juerd's pugs compiles but fglock's doesn't?

[14:20] <gaal> ?eval $*OS

[14:20] <evalbot_7118> \undef 

[14:20] <Juerd> Oh, I didn't try building 

[14:20] <gaal> ?eval $?OS

[14:20] <evalbot_7118> \'linux' 

[14:20] <Juerd> If pugs doesn't build, the old executable stays in place.

[14:21] <Juerd> See ~juerd/auto/*.out and *.err

[14:21] <gaal> ?eval $?PUGS_VERSION

[14:21] <evalbot_7118> \'Perl6 User\'s Golfing System, version 6.2.9, August 3, 2005 (r6945)' 

[14:21] <gaal> heh.

[14:23] <luqui> woah, 6945?

[14:23] <luqui> is that the last time a .hs file was changed, or is it because pugs is failing to build?

[14:24] <gaal> dunno. i think there have been r lies in the past

[14:27] <luqui> build is failing

[14:28] <gaal> working on it, luqui.

[14:29] <scook0> luqui: I read through your theories doc -- it's very ... intimidating

[14:29] <scook0> but also very interesting

[14:29] <luqui> thank you and thank you...

[14:29] * luqui wonders how he could make it less intimidating

[14:30] <luqui> scook0, are you referring to the new one that I committed today?

[14:30] <scook0> luqui: aye

[14:30] <scook0> though I'd read the old one as well

[14:30] <luqui> okay good, that's the one I'm working on :-)

[14:31] <scook0> the new one is much more far-reaching than I expected

[14:31] <scook0> is it all the TaPL kool-aid? :)

[14:31] <luqui> I mostly came up with all this before I even opened TaPL

[14:32] <luqui> I walked home from school every day last week (about an hour walk)

[14:32] <scook0> oh

[14:32] <luqui> walking is good for thinking, so I just thought about it the whole time

[14:32] <luqui> but it was hard not to touch everything

[14:33] <luqui> oh, this would be cleaner if lists just worked like this instea

[14:33] <luqui> !!d

[14:34] <luqui> oh, it would be a lot nicer if everything were a multi already *bangs self on head before Larry has a chance to*

[14:36] <scook0> luqui: "When you extend a union, you create a superset (but still a subtype)."

[14:36] <scook0> how does that work?

[14:37] <luqui> The next sentence explains that...

[14:37] <luqui> if B does A (in union land), then B is a superset of A, but B can be used wherever A can

[14:38] <luqui> but maybe that's not true, given the XXX at the end of the theories section

[14:39] <luqui> patterns are posing a little difficulty wrt factories.  I hope I can work it out, because the role/factory duality is so beautiful

[14:39] <scook0> I'm just worried about what happens when someone expects a Tree, and you give them an Annotation

[14:39] <luqui> well, you'll be pattern matching, right?

[14:39] <luqui> so the Tree patterns just fail

[14:39] <luqui> hmmm... but then you don't get a complete traversal.

[14:39] <luqui> maybe this is what the XXX is referring to mathematically

[14:40] * luqui 'll be walking home today, too, so I'll try and get this worked out

[14:41] <luqui> speaking of which, I ought to be heading off to school

[14:42] <luqui> thanks for your comments scook0

[14:42] <scook0> and I should be heading off to bed

[14:42] <integral> wow, this stuff is really neat.  luqui++

[14:42] <scook0> luqui: no problem

[14:42] <luqui> thanks :-)

[14:42] <scook0> I'll read it again tomorrow with a fresh brain

[14:42] <scook0> bye

[14:42] <luqui> bye

[14:46] <wolverian> heh, some pretty funny trolls over at /. on state of the onion

[14:55] <svnbot6> r7119 | gaal++ | fix build for real.

[15:17] <gaal> okay, i think we can remove the wrapped pugs now. what's the cleanes way, revision control-wise, to do this?

[15:17] <gaal> this doc:

[15:17] <gaal> # http://svnbook.red-bean.com/en/1.1/ch04s04.html#svn-ch-4-sect-4.2

[15:17] <gaal> describes how to do it when you're rolling back *one* revision.

[15:18] <gaal> but apart from 6946, there have been a few more that we want to undo

[15:18] <gaal> it's not a very big change so i don't mind doing it manually, but i also want to know the "right" way.

[15:19] <gaal> (actually, it's just svn rm pugs and a few edits to Makefile.PL to do this manually)

[15:39] <integral> iirc it's svn merge -r 1235:1234, which unapplies changset 1235 to the working copy

[16:04] <eric256> so does anyone konw where i should look for the code to go back to embeding the source of prelude.pm if you don't compile it?

[16:09] <nothingmuch> PING 1127491752 131736

[16:10] <GeJ> nothingmuch: pong

[16:10] <nothingmuch> pong?

[16:10] <GeJ> --- Received a CTCP PING 1127491752 131736 from nothingmuch

[16:10] <nothingmuch> oh

[16:10] * nothingmuch didn't know that was user visible

[16:10] <nothingmuch> i thought that was between the IRC server and me

[16:11] * nothingmuch suspected his internet connection died

[16:11] <nothingmuch> sorry

[16:11] <GeJ> no problem... I don't think it made my BP quota explode the limit

[16:15] <gaal> eric256: look for gen_prelude

[16:18] <gaal> brb

[16:22] <eric256> which gen_prelude? or in which file...

[16:22] <ods15> nothingmuch: you didn't notice the like hundrend of ping replies from every user here?

[16:28] <gaal> eric256: there's a src/gen_prelude.hs that actually does get built - it's a remnant of the old system

[16:28] <gaal> look for how the precomp prelude is initted - Run.hs:159

[16:28] <eric256> yea....i just don't know how to get from that to being able to compile without prelude but still have it loaded when i run pugs_bin.exe

[16:28] <gaal> you need something very similar, that uses the unprecomp prelude

[16:29] <gaal> if you browse the history for Run.hs you'll find it

[16:29] <gaal> well, the *configuration* for this should be via config.yml

[16:29] <gaal> there was once an option, inline_prelude or something similar

[16:30] <gaal> this all happens at build time

[16:30] <eric256> yea.

[16:30] <gaal> so the build system can decide to put the prelude as a string, and have pugs do eval on that.

[16:30] <eric256> maybe i'll just go find my feather acount. lol

[16:31] <wolverian> now I know why I haven't learned haskell yet. I just haven't been looking at small, practical examples.

[16:35] <wolverian> (the haskell wiki helps with this.)

[16:35] <gaal> wolverian: Prim.hs too

[16:36] <Khisanth> hrm my main problem is finding something to do with it :)

[16:36] <Khisanth> err a problem to solve with it

[16:37] <gaal> find something you want pugs to do :)

[16:39] <wolverian> pugs is a bit scary to me.

[16:41] <gaal> aye, but Prim is often a good start because it has relatively simple things

[16:41] <Khisanth> something a bit smaller!

[16:41] <gaal> like wrapping a functionality provided by haskell builtins in a way that's suitable for perl

[16:52] <Limbic_Region> if you haven't read Larry's State of the Onion 9 - do so

[16:52] <Limbic_Region> autrijus and pugs are talked about in a good way

[16:56] <eric256> where would we read that at?

[16:56] <Khisanth> perl.com

[16:56] <Khisanth> it also calls Python evil :P

[17:00] <eric256> he doesn't get right to any point does he? :)

[17:02] <GoCooL> When they say "Pugs is a Perl6 implementation", what exactly does that mean?

[17:03] <eric256> it means pugs can interpret scripts that fit the Perl6 language specification

[17:03] <geoffb> For varying definitions of "fit" and "specification

[17:03] <geoffb> "

[17:03] <eric256> well ......sorta. ;) both the spec and the interpreter arn't complete though 

[17:12] <wolverian> I'd like to see a formal spec

[17:16] <eric256> he speaches are allways....well...interesting. lol

[18:05] <gaal> eric256: going okay?

[18:08] <eric256> i haven't tried antyhing

[18:08] <eric256> ended up swamped with real work

[18:10] <gaal> i know how that goes :-)

[18:34] <elmex> ?

[18:52] <wolverian> is there a low-precedence version of + (numeric context)?

[19:02] <fglock> ?eval  +"10" ~ "20"

[19:40] <eric256> how do i broswe a files history on the SVN repository...isn't there a web url i can use

[19:44] <eric256> nm found it through the recent commits link

[19:46] <eric256> http://rt.openfoundry.org/Foundry/Project/Source/index.html/pugs/diff/Makefile.PL?rev1=4165&rev2=4216 seems to be the change related to making it include Prelude....but is that compiled or just inlined? 

[20:37] <fraxtal> I just downloaded the win32 binary of pugs from http://www.jwcs.net/~jonathan/perl6/, but the zip file doesn't seem to contain the pugs binary.  Anyone know what's up with that?

[20:55] <gaal> fraxtal: do you have a pugs_bin.exe?

[20:55] <fraxtal> gaal: No.  All I have is a parrot.exe

[20:55] <gaal> and a perl script called pugs?

[20:56] <fraxtal> I don't think so

[20:56] <fraxtal> but which directory would that be in?

[20:56] <gaal> looks like a packaging error

[20:56] <fraxtal> It's not in the top level and there is no bin folder

[20:56] <gaal> not sure, i never looked at that install

[20:57] <gaal> we've changed the way pugs itself is loaded recently (and might change it again soon)

[20:57] <fraxtal> hmm

[20:57] <gaal> but you should have had a pugs and possibly a pugs.bat

[20:57] <gaal> not sure where, in that package.

[20:57] <gaal> how new is it?

[20:58] <fraxtal> 9/20/2005

[20:58] <gaal> that version would have some problems on win32, but could conceivably have worked.

[20:59] <gaal> i suppose you should wait a few more days for a newer, unbroken package to come up,

[20:59] <fraxtal> ok

[20:59] <fraxtal> i'll keep my eye on it

[20:59] <gaal> or if you're impatient, compile a pugs yourself :)

[21:06] <eric256> if you can get it to compile..../me is seriously considering putting more memory in just to be able to painlessly compile pugs

[21:10] <gaal> 256MB of RAM == better than 100MHz of CPU

[21:10] <gaal> up to some limit :)

[21:11] <gaal> actually it's negative. you need the *least* amount of RAM that you'll actually used (taking spares into account), and put the rest of your money in other things (CPU, faster disk...)

[21:11] <gaal> but everybody on this channel knows that :)

[21:25] <eric256> i'm continously amazed by the lack of humor some people display on PM....and it nearly always is an anonymous monk

[21:36] <wolverian> for some reason I want $foo.chars to return a list of characters

[21:36] <wolverian> same for .bytes etc. 

[21:36] <wolverian> @foo.elems would be confusing. :)

[21:38] <wilx> Byte and character is not always the same.

[21:46] <Juerd> wolverian: So do I.

[21:46] <Juerd> wolverian: All of these should behave following the same pattern:

[21:46] <Juerd> void context: nothing (duh!)

[21:47] <Juerd> item context: return number

[21:47] <Juerd> list context: return elements

[21:47] <Juerd> There is also no good reason for @foo.elems, as @foo already behaves as we need.

[21:55] <eric256> TSa seems to make my head hurt....i've totaly lost track of that thread or even who is advocating what. lol

[22:15] *** kgftr|honeymoon is now known as kgftr|konobi

[23:03] <landover> may i ask a newbie question?

[23:04] <landover> as though i am the newbie programming coming to perl6?

[23:04] <rantanplan_> Perl6 is still envolving. So if you are a newbie i recommend learning Perl5 instead.

[23:05] <landover> err new to perl6

[23:05] <rantanplan_> Ah, ok. :).

[23:05] <landover> but i have some questions that maybe due to a lack of some education in higher level comp science

[23:05] <landover> regarding threading

[23:05] <landover> or should i say multi-threading in general

[23:06] <landover> i get the concept of multi-threading of the fact that its like forking but without a new pid

[23:06] <landover> but

[23:06] <rantanplan_> I think any Perl6 implementation does not yet support threading. But maybe i can help you.

[23:07] <landover> well let me break down my idiotic obnoxious questions into something that i hope is a readable format

[23:07] <landover> 1) Multi-threading when is good to use and when is it bad to use?

[23:09] <landover> 2) How does multi-threading impact big(0) along with speed in general?

[23:09] <wilx> Heh.

[23:09] <wilx> I doubt anybody is going to answer.

[23:10] <landover> is that dumb?

[23:10] <wilx> Your questions are too unrelated and broad.

[23:10] <landover> ah

[23:11] <landover> well to narrow it down my question is that is there a way currently in any language to make all functions appear to be running in their own process i know this may not make sense but for what i am doing i need little "agents" so to speak

[23:11] <landover> without having to Fork for each little agent

[23:12] <landover> like if you have a perl6 or perl5 subroutine, and lets pretend the subroutine ran a task if i wanted a thousand or so tasks to run at the same time

[23:12] <rantanplan_> I would not use 1000 threads within the same program.

[23:12] <landover> right

[23:13] <landover> this is hypothetical of course

[23:13] <landover> but you also wouldnt have 1000 pid's as well i assume correct?

[23:13] <rantanplan_> I would recommend a single thread and single process which is using select or something.

[23:13] <landover> meaning how can i have 1000 things run in parallel without using threads or pid's

[23:14] <landover> i tried poe but it cant do everything that i wanted it to do and rather than hunt around the vast info of non-truth i figured i would ask some experts in the field

[23:14] <rantanplan_> On UNIX and UNIX like OSes you may use select or similar. Dont know about Windows.

[23:14] <wilx> Or non-blocking or async I/O.

[23:15] <landover> i know this may sound confusing but i am trying to build functios that are miniature turing machines

[23:15] <landover> so basically have a daemon that listens on a socket async correct?

[23:16] <landover> for fun i was trying to see if i could take a mathmatical algorithm and break it down via small turing machines

[23:16] <rantanplan_> If you know C, take a look at libevent. This seems to be nice stuff.

[23:16] <landover> that would run in parrallel

[23:16] <landover> << knows a little C but was trying to stick with something that was interpreted like perl etc

[23:17] <landover> point being though ok so your saying that its something that i would have to do at the OS level in terms of either async /non-blocking socket connections

[23:17] <landover> or use something like C etc

[23:18] <rantanplan_> Yes. Or use Perl5. (Which is offtopic too). -> perldoc -f select

[23:19] <landover> k thanks i understand its not a perl6 topic but i have been trying to find a language that will let me build small turing machines that run in parallel and rather than re-invent the wheel i figured i'd ask those that are more intelligent than myself

[23:21] <rantanplan_> Yeah, Perl5, Python, Ruby, Lisp, Haskell .. would be all fine i think. Or even Lisp. But i recommend Perl5 (because i know it the best).

[23:23] <rantanplan_> So do it in the language you know the best.

[23:24] <landover> ya i know perl5 pretty well although there is still new things im learning every day

[23:24] <landover> ok now i have a big question though regarding perl6

[23:25] <landover> is strictly typed optional in perl6?

[23:25] <kgftr|konobi> yup

[23:26] <rantanplan_> But strict is standard in Perl6. I ve read. 

[23:26] <rantanplan_> Ah strictly typed.

[23:26] <rantanplan_> Never mind.

[23:26] <rantanplan_> Didnt read ;).

[23:26] <rantanplan_> I meant "use strict".

[23:28] <landover> right my concern about the strictly typed is what are the true benefits of typed versus untyped in general? Being as though Ive only worked in smalltalk, perl, javascript, and python I dropped strictly typed languages because they were more time consuming to create things in how do you think this will effect me in the long term?

[23:30] <rantanplan_> Strictly typed makes the programm runs faster. And it also prevents bugs in the source code.

[23:30] <rantanplan_> s/runs/run/;

