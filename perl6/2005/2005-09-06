[00:02] <svnbot6> r6762 | Darren_Duncan++ | /perl5/org.perl6.metamodel : updated 10 files to replace tabs with spaces

[00:02] <svnbot6> r6763 | Darren_Duncan++ | /perl5/Perl6-Container : updated Changes file to replace tabs with spaces

[00:08] <svnbot6> r6764 | Darren_Duncan++ | /perl5/Perl6-MetaModel : in 7 files, replaced all tabs with spaces

[00:08] <svnbot6> r6765 | iblech++ | t/01-sanity/:

[00:08] <svnbot6> r6765 | iblech++ | * Renamed 07-test.t to 08-test.t.

[00:08] <svnbot6> r6765 | iblech++ | * Added new 07-tests testing for misc. other features needed by Test.pm and not

[00:08] <svnbot6> r6765 | iblech++ |   already covered by 01-06 (suggested by putter++ IIRC):

[00:08] <svnbot6> r6765 | iblech++ |   split, range, defined, binding, ref, isa, try, simple-multisubs, end-blocks,

[00:08] <svnbot6> r6765 | iblech++ |   substr, tailcall, for.

[00:08] <svnbot6> r6766 | Darren_Duncan++ | /perl5/Perl6-MetaModel2.0 : replaced a single tab with 4 spaces in metamorph.pl

[00:08] <svnbot6> r6767 | Darren_Duncan++ | /perl5/Perl6-Value : replaced 3 tabs with spaces in the Changes file

[00:11] <Juerd> ~/last juerd 3

[00:11] <Juerd> argh

[00:14] <svnbot6> r6768 | Darren_Duncan++ | /perl5/Perl6.MetaModel : replaced 7 tabs with spaces in Builder.js

[00:20] <svnbot6> r6769 | Darren_Duncan++ | /perl5/PIL-Run : in 7 files, replaced all tabs with either 4 or 8 spaces each

[00:24] <dduncan> and with r6771, all /perl5 files are detabbed ... and most of them did mix tabs and spaces

[00:26] <svnbot6> r6770 | Darren_Duncan++ | /perl5/PIL2JS : updated 3 files to replace tabs with spaces

[00:26] <svnbot6> r6771 | Darren_Duncan++ | /perl5/T2-Perl6 : replaced tabs with spaces in 3 files

[00:26] <geoffb> iblech: Your "slow svnbot" FAQ answer did not explain why it is slow lagged that several minutes *AND* several messages can occur before it shows an update.  For instance, when I whined earlier, svnbot didn't post until almost 3 minutes and several messages after evalbot had recompiled and reloaded.

[00:26] <geoffb> Simple waiting for IRC to return doesn't sufficiently account for that

[00:30] <geoffb> iblech: also, why did you number all of the new tests in 01-sanity 07-*?  Are they all completely independent, with no ordering required?

[00:34] <iblech> geoffb: There have to be two conditions fulfilled to trigger a check for new commits: (time - $last_check) >= $interval *and* out_of_blocking_readline

[00:35] <iblech> geoffb: Right, this is the very reasion. There is no clear ordering between the new 07-tests, i.e. 07-for.t is independent of 07-substr.t

[00:38] <svnbot6> r6772 | Darren_Duncan++ | updated ChangeLog file to account for my recent actions

[00:51] <svnbot6> r6773 | iblech++ | * New t/operators/binding/subs.t: Tests for binding the return value of

[00:51] <svnbot6> r6773 | iblech++ |   subroutines (normal ones and "is rw" subs) as LHS and RHS.

[00:51] <svnbot6> r6773 | iblech++ | * New t/operators/binding/nested.t: Many tests for binding elements of complex

[00:51] <svnbot6> r6773 | iblech++ |   structures as LHS and RHS (and this way creating abbreviations, infinite

[00:51] <svnbot6> r6773 | iblech++ |   structures, etc.). (PIL2JS passes 43/43 :)).

[00:52] <iblech> ok, really need to sleep now. Night all! :)

[01:03] <dduncan> fyi, I'm starting on /modules now

[01:10] <svnbot6> r6774 | Darren_Duncan++ | /modules/Class-Events : updated Events.pm to replace 159 tabs with spaces

[01:10] <svnbot6> r6775 | Darren_Duncan++ | /modules/Date : replaced tabs with spaces in 3 files

[01:15] <dduncan> as with r6778, all /modules are done

[01:15] <svnbot6> r6776 | Darren_Duncan++ | /modules/Grammars : replaced 35 tabs with spaces in MatchX.pm

[01:15] <svnbot6> r6777 | Darren_Duncan++ | /modules/JavaScript-FrontEnd : replaced 46 tabs with spaces in ARuntime.pm

[01:15] <svnbot6> r6778 | Darren_Duncan++ | /modules/Perl-MetaModel : replaced tabs with spaces in Class.pm, Trig.pm, Basic.pm

[01:18] *** _SamB_ is now known as SamB

[01:21] <svnbot6> r6779 | Darren_Duncan++ | /modules/* : detabbed 2 more Date files and 1 more Perl-MetaModel file

[01:54] *** sleepster is now known as typester

[02:16] <svnbot6> r6780 | Darren_Duncan++ | detabbed 3 root dir files: debian/rules, AUTHORS, Makefile.PL; but, Makefile.PL retains its literal tabs in its output to the generated Makefile

[02:22] <svnbot6> r6781 | Darren_Duncan++ | reversed the changes made to lib/Perl6/MakeMaker.pm in r6760, since it appears that 'make' actually needs those literal tabs in Makefiles; reverted 3 space-runs into tabs

[02:28] <svnbot6> r6782 | Darren_Duncan++ | updated ChangeLog re my recent updates

[02:30] <dduncan> okay, that's all I'm going to do for the next few hours, or today

[02:58] <luqui> wakawakawakawakawakawakawakawakawakawikiwakawakawakawakawakawakawakaspamwakawakawaka

[02:59] <luqui> ?eval [76, 101, 97, 118, 105, 110, 103].pack("C*")

[02:59] <evalbot_6782> Error: No compatible subroutine found: "&pack" 

[03:00] <luqui> ?eval (76, 101, 97, 118, 105, 110, 103).pack("C*")

[03:00] <evalbot_6782> Error: No compatible subroutine found: "&pack" 

[03:00] <luqui> ?eval pack 'C*', 76, 101, 97, 118, 105, 110, 103

[03:00] <evalbot_6782> Error: No compatible subroutine found: "&pack" 

[03:00] <luqui> huh

[03:38] <QtPlatypus> luqui: We don't have a pack yet, or a speficiation for pack.

[03:38] * luqui grepped pugs and noticed

[03:39] <luqui> I note that much of pack will be done through class declarations

[03:39] <luqui> but there should still probably be a lower level version

[03:40] * QtPlatypus wrote up a spec for pack posted to p6l "And when we get rawstrings I'll implement it"

[03:40] <luqui> can you give me a messageid?

[03:42] * luqui found it

[03:42] <QtPlatypus> [email@hidden.address]
[03:47] <luqui> QtPlatypus, what are you blocking on in order to implement this?

[03:48] <QtPlatypus> luqui: The ability to create raw strings.

[03:49] <QtPlatypus> pugs current "Everything is utf8 encoded unicode" would mean that most of pack's test would fail.

[03:49] <luqui> ahh

[03:49] <luqui> bbiab

[04:10] <putter> prolog p5 regex engine now 95% passes re_tests, with no skips.  a few more tests I care about, a cleanup pass, and p6 starts getting added.  

[04:10] <putter> *weary smile*

[04:10] * luqui contemplated porting PGE to perl 6

[04:10] <luqui> after this prolog exercise, what kind of work do you think that would be?

[04:12] <putter> after pugs oo works... no problem at all.  the problem with doing "large"-scale things in p6 at the moment, is piljs doesnt have objects, and pugs is buggy.

[04:12] <putter> so you architect something, and find yourself in a corner of design space where "if only simple thing foo was working, we'd be all set, but since not..." and unable to back out.

[04:13] * luqui can hack pugs now though, so maybe that would get some things fixed

[04:14] <putter> hmm...  well... since you mention it... pil p6 tree is lightly hung up on, let me see if I can dig it up...

[04:15] <putter> class C{}; class C::D{method new($d){...}}; sub f($d,$cls){ ::C::($cls).new($d) } say f(3,"D");

[04:15] <luqui> "pil p6 tree is lightly hung up on"  # parse error

[04:15] <putter> for some ...

[04:16] <putter> ext/Perl-Compiler/lib/Perl/Compiler/PIL/Node_pm_gen.pl

[04:16] <luqui> uh, what is sub f() supposed to be doing?

[04:16] * luqui doens't think that is valid p6

[04:17] <putter> pugs -CPerl5 ouputs bless( X, Y)  and one wants to define bless().

[04:17] <putter> ::C::($y).new(*$x)

[04:18] <luqui> oh I get it

[04:18] <luqui> symbolic deref

[04:19] <luqui> ?eval class C{}; class C::D{method new($d){...}}; sub f($d,$cls){ ::C::($cls).new($d) } say f(3,"D");

[04:19] <evalbot_6782> Error: Must only use named arguments to new() constructor 

[04:19] <putter> the tripple of ("is leading :: present", "doing ($y)", "*$x works")  doesnt play well together (my fuzzy recollection).

[04:19] <putter> thats the *$x not working

[04:20] <luqui> ?eval class C{}; class C::D{submethod BUILD($x) { say "$x" }}; sub f($d,$cls){ ::C::($cls).new( x=> $d) } say f(3,"D");

[04:20] <evalbot_6782> 3 <obj:C::D> bool::true 

[04:20] <luqui> I don't quite understand what you are asking... if anything

[04:21] <putter> ?eval class C{}; class C::D{submethod BUILD($x) { say "$x" }}; sub f($d,$cls){ ::C::($cls).new(*$d) } say f([3],"D")

[04:21] <evalbot_6782> Error: Must only use named arguments to new() constructor 

[04:21] <putter> bless gets array and hash refs passed as X.

[04:22] <putter> f here is bless

[04:22] <putter> the first case was too simple a reduction

[04:22] <luqui> o...kay.  so what are you asking?

[04:24] <luqui> new() does not support positionals yet, that's the only thing about this that I can see

[04:24] <putter> the ability to write a sub bless()  which works for bless([3,...],"Foo")  bless({mumble=>frotz,...},"Bar")

[04:25] <luqui> and how is this not possible currently?

[04:25] <luqui> the examples above seem to be working how they should

[04:27] <putter> ?eval class C{}; class C::D{method new($d){...}}; sub f($d,$cls){ ::C::D.new($d) } say f(3,"D");

[04:27] <evalbot_6782> Error: Must only use named arguments to new() constructor 

[04:27] <putter> ?eval class C{}; class C::D{method new($d){...}}; sub f($d,$cls){ C::D.new($d) } say f(3,"D");

[04:27] <evalbot_6782> Error: *** ... - not yet implemented     at <eval> line 1, column 38-41  

[04:28] <luqui> is there a reason you cannot pass named arguments to new?

[04:30] <putter> that's why its only lightly stuck.  the classes are all autogenerated.  so mumble.new().now_init($d) and they do their own unpacking.

[04:31] <luqui> what is wrong with:  mumble.new(init => $d)

[04:32] * luqui is beginning to contemplate the correctness of the "named only" constraint on new, though

[04:32] <putter> two thoughts

[04:33] <putter> re new, note it actually worked above, without the leading ::.  which are unfortunately needed for the $cls case.

[04:33] <luqui> right...

[04:35] <putter> re why, I guess because I had a very low "pugsbug workaround" threshold for that project.  its only really useful if folks can then build big things on it.  and having had other things lost in layered workaround space, I put a low threshold cut off on this one.

[04:36] <luqui> fair enough

[04:36] <putter> "if I run into problems just creating the objects, then that should be taken as a sign that I'm biting off more than the system is ready for again"

[04:38] <putter> regards other things on pause, the regexp stuff in pugs is wating on objects returned by functions not being mis-typed.

[04:38] <luqui> for example?

[04:39] <putter> but that's also been a, "well if that gets fixed, I get to see what the next obsticle is".

[04:39] <luqui> well you have to get past the obstacles sometime

[04:39] <luqui> you can't just magically make them all go away

[04:39] * putter notes a "putter is burned out" tone to this... sorry ;)

[04:39] <putter> let's see...

[04:40] <putter> ?eval class C{has $.v} sub f(){C.new}  f().v

[04:40] <evalbot_6782> Error: No compatible subroutine found: "&v" 

[04:41] <luqui> hmm

[04:42] <putter> but not to worry about this stuff.  p5 will soon have a p6 rules engine, and iblech is adding objects, and piljs runs fine linked with perl5, so there is now a path for the regexp stuff to progress...

[04:43] <luqui> ?eval class C { has $.v } sub f () { C.new }  my $x = f;  $x.v

[04:43] <evalbot_6782> \undef 

[04:43] <luqui> hmm, i wonder what the trouble here is

[04:43] <luqui> that's cool

[04:44] <putter> autrijus has described it as a "known problem" with the type inferencer

[04:44] <luqui> there's a type inferencer?

[04:45] * putter looks guilty at having intended to do a more thourough look at pugs internals... for half a year now...

[04:46] <putter> I think that's what autrijus said.  something must be providing type info for the multimethods...

[04:48] <luqui> hmm

[04:48] <luqui> well, I need to do homework

[04:49] <putter> basically on the  parse->compile-(pil)->emit->runtime   parse and compile are all pugs, and emit and runtime are all p5/native.

[04:50] <putter> end of day for me

[04:51] <putter> err, no, pugs|p5/native

[04:51] <luqui> yeah, 

[04:51] <luqui> and the pugs runtime is completely kludgy

[04:51] <luqui> thus pil2, right?

[04:51] <putter> yes

[04:51] <luqui> make a new pil, and write a runtime from scratch?

[04:52] <putter> my impression is the necessary changes have been described as highly localized

[04:52] <luqui> hmm

[04:52] <luqui> like findSub

[04:52] * luqui did a little hacking on findSub the other day

[04:52] <luqui> what a mess

[04:53] <putter> nada->p6 in 6 months.  ;)

[04:53] <putter> growing pains inevitable

[04:53] <luqui> true

[04:53] <luqui> it's nice to step back and notice the amazing progress of this project every once in a while :-)

[04:54] <putter> indeed :)

[04:54] <putter> neat mix of cultures too

[04:54] <luqui> pugs forced me to learn haskell

[04:54] <putter> :)

[04:54] <luqui> and learning haskell has really chaned the way i think about a lot of problems

[04:56] <putter> yeah.  that's the argument for learning languages with unfamiliar approaches - leaves your brain with that fresh scrubbed feeling

[04:56] <putter> changes the way you think about hings

[04:57] <smith100> hings think about you

[04:57] <mugwump> leaves you more prepared for questions like, "yeah, but aren't all turing complete languages equivalent anyway?  what's the point in learning a langauge like that?"

[04:57] * luqui has thought doing a "real project" in prolog

[04:57] <luqui> but prolog is so yucky

[04:57] <luqui> so I have been considering curry

[04:57] <putter> awww

[04:57] <luqui> except I can't find a curry compiler!

[04:57] <luqui> maybe it's just because I don't understand

[04:58] <luqui> but I find I need to know too much about prolog's execution strategy to write code that doesn't infinite loop

[04:58] <luqui> which then just seems to be a convoluted procedural code that I'm writing

[04:59] <putter> yes to the first part, no to the second

[04:59] <autrijus> luqui: cyc is a nice curry compiler danae.uni-muenster.de/~lux/curry/user.html 

[04:59] <autrijus> and my experience is that cyc feels more modern than prolog by far

[05:00] <autrijus> but maybe that's because I'm brainwashed by haskell first :)

[05:00] <putter> you do have to be up close and personal with engine.  the "usual logic programming intro" claim of write blind and it works is, well, if not a lie then quite misleading.

[05:01] <putter> but the fun of prolog is intimite with the engine, and collaborating to write the engine you need for your problem (because prolog's is invariably not what you need;).  for that, prolog has historically been one of the best.

[05:01] <putter> s/is/is being/

[05:02] <autrijus> mm the MRT car starts moving. ciao :)

[05:02] <putter> &

[05:02] <autrijus> public wireless at high velocity is still an unsolved problem

[05:02] <putter> lol

[05:02] <luqui> :-p

[05:02] <putter> planes seem to work...

[05:02] <putter> ...sometimes

[05:03] <putter> arguably not wireless in the sense of original comment

[05:05] <putter> some of the modern prolog like things leave me with a "baby out with bathwater" feeling... they may have a nice corner of language design space, but its one a bit divorced from the strengths and mindspace of prolog.

[05:07] <luqui> though some people say the same thing about perl after they come from C++

[05:07] <luqui> "sure, it's good at text processing"

[05:09] <putter> perl _is_ rather distant from C++.  its just that C++ is used for sooooo many things for which it is technically (rather than socially) ill suited...

[05:09] <luqui> yep

[05:09] <luqui> but a lot of times C++ers don't like perl because they don't understand it yet

[05:09] <luqui> even though perl has a much larger problem space that C++

[05:10] <luqui> s/has/covers

[05:10] <luqui> well, I'm going to log off irc new

[05:10] <luqui> now

[05:10] <luqui> because I'm being distracted

[05:10] <luqui> :-)

[05:10] <luqui> adios

[05:10] <putter> me too.  its late

[05:10] <putter> bye &

[06:21] <brentdax> I wrote a new module for Perl 6.  (Basically it's `trace "message", :tag`, plus the infrastructure to make it work.)  Should it be called Trace.pm?  Devel::Trace?  Debug::Trace?  Something else entirely?

[06:53] <dduncan> now working on /examples

[07:12] <svnbot6> r6783 | Darren_Duncan++ | /examples/* : converted tabs to spaces in these files under [advocacy, algorithms]: motd-i.p6, lambda-calculus.p6, Newton.pm, shuffle.p6

[07:17] <svnbot6> r6784 | Darren_Duncan++ | /examples/* : replaced tabs with spaces for these files: network/hangmanbot.p6, network/seenbot.p6, network/bot_irc.p6, network/http-server.p6, games/wizard.p6, irclog2html.p6, graphics/make_swatch.p6, functional/length.p6, functional/monads.p6, functional/fp.p6, life.p6

[07:23] <svnbot6> r6785 | Darren_Duncan++ | /examples/* : replaced tabs with spaces for these files: cookbook/test.pl, p6explain/p6explain, sendmoremoney.p6, ppt/cat.p6, perl5/cpan-upload.p6

[07:35] <dduncan> and with r6786, /examples is done

[07:35] <svnbot6> r6786 | Darren_Duncan++ | /examples/* : replaced tabs with spaces in 8 files under 'cookbook'; updated changelog

[07:39] <dduncan> that's all I'm doing today ... good night

[07:42] <dduncan> moreover, thats probably all the mass detabbing I'm going to do in pugs at all ... if any of you find more that can be safely removed, handle them as you will

[07:51] *** GeJ is now known as Demesmaeker

[07:51] *** Demesmaeker is now known as GeJ

[07:54] <dduncan> okay, I just did /util too

[07:55] <dduncan> at this point, it is just the /src and /docs directories that I haven't done; with /src, I don't know if I might break something, so I'll leave those; with /docs, any changes are also dubious

[07:56] <dduncan> so as with my previous comment, the detabbing is basically done ...

[07:56] <dduncan> try not to add any more tabs in your future work, unless they are essential as literal tabs

[07:56] <dduncan> good night

[07:58] <svnbot6> r6787 | Darren_Duncan++ | /util/* : replaced tabs with spaces in 14 files

[08:04] <svnbot6> r6788 | renormalist++ | * An (X)Emacs mode for editing Perl6 files.

[08:04] <svnbot6> r6788 | renormalist++ | * Forked from cperl-mode and extended with Perl6 syntax situations

[08:04] <svnbot6> r6788 | renormalist++ |   primarily for correct indenting and highlighting.

[08:04] <svnbot6> r6788 | renormalist++ | * Current features:

[08:04] <svnbot6> r6788 | renormalist++ |    - font-lock highlighting for

[08:04] <svnbot6> r6788 | renormalist++ |        class, has, say, returns, multi sub(method), gather, take, try

[08:04] <svnbot6> r6788 | renormalist++ |    - indentation recognizes extended sub syntax, especially traits

[08:04] <svnbot6> r6788 | renormalist++ |    - regexes via rx// as quote operator

[08:04] <svnbot6> r6788 | renormalist++ |    - m// and s// similiar to new rx//

[08:04] <svnbot6> r6788 | renormalist++ |    - recognize if/elsif/unless-conditions without parens

[08:04] <svnbot6> r6788 | renormalist++ | * documentation inside file

[08:04] <svnbot6> r6788 | renormalist++ | * Call for help: feel free to help if you program Emacs Lisp, 

[08:04] <svnbot6> r6788 | renormalist++ |   some things in this mode and/or Perl6 syntax are non-trivial

[08:09] <svnbot6> r6789 | renormalist++ | added myself as requested

[10:22] <rafl_> How to revert a single file to a given version?

[10:52] <svnbot6> r6790 | rafl++ | * Reverted dducan's tab replacement for debian/rules. It's a Makefile. It needs

[10:52] <svnbot6> r6790 | rafl++ |   tabs!

[10:58] <svnbot6> r6791 | rafl++ | * Added tailing slashes for debian/*.dirs for consistency.

[11:10] <svnbot6> r6792 | Stevan++ | Perl6::MetaModel 2.0 - 

[11:10] <svnbot6> r6792 | Stevan++ | * added $::Module into the hierarchy, now:

[11:10] <svnbot6> r6792 | Stevan++ |     $::Class->isa($::Module) && $::Class->isa($::Object)

[11:10] <svnbot6> r6792 | Stevan++ | * moved name, version, authority and identifier methods 

[11:10] <svnbot6> r6792 | Stevan++ |   to $::Module

[11:10] <svnbot6> r6792 | Stevan++ |     - adjusted tests and files appropriately

[12:17] <svnbot6> r6793 | autrijus++ | * massive retab for src/, expanding all tabs into spaces,

[12:17] <svnbot6> r6793 | autrijus++ |   except for the generated PIL1.hs.

[12:30] *** locksy- is now known as locksy

[13:04] <svnbot6> r6794 | rafl++ | Debian:

[13:04] <svnbot6> r6794 | rafl++ | * Added smoker.yml to be able to identify smoke results from the buildds.

[13:04] <svnbot6> r6794 | rafl++ | * Added dpatch build-dependency.

[13:04] <svnbot6> r6794 | rafl++ | * Adjusted rules file to work with dpatch.

[13:04] <svnbot6> r6794 | rafl++ | * Added patches/10smoker.dpatch to change the path to smoker.yml for the build.

[13:04] <svnbot6> r6795 | rafl++ | Debian:

[13:04] <svnbot6> r6795 | rafl++ | * Removed patches/10smoker.diff which was a temp file.

[13:06] <stevan> good morning boys and girls

[13:06] <rafl_> Hello stevan 

[13:06] <fglock> hi all

[13:06] * stevan $work project has now launched, so it's back to Pugs hacking :)

[13:06] <stevan> hey rafl_, fglock 

[13:08] <rafl_> Do you guys know if I can make ghc use ccache?

[13:09] <stevan> rafl_: sorry, no idea

[13:09] <stevan> fglock: have you done any work on Package or Module implementations

[13:10] <fglock> no, all 'namespace' code is in PIL-Run, and it reuses p5

[13:11] <stevan> hmm

[13:11] <stevan> I just added Module to the metamodel 2.0 this morning

[13:11] <stevan> cause I was reading Apoc 12

[13:11] <stevan> which stated that Role and Class will likley inherit from Module

[13:12] <stevan> we will have to address namespace in PIL-Run thouh

[13:12] <stevan> in order to account for names like "Foo-0.0.1-cpan:JRANDOM"

[13:12] <stevan> the package management for Perl 6 is going to me much more complex then in Perl 5

[13:12] <fglock> do you think we should have p6 pads instead of reusing p5?

[13:13] <stevan> I would expect we will need too eventually

[13:13] <fglock> I currently have a problem, I need to clone a closure and I don't have easy access to the lexicals

[13:14] <fglock> being able to manage the pads would make that easier

[13:14] <stevan> I imagine that p6 pads are more sophisticated then p5 pads

[13:18] <fglock> I think a tree of hashes would do - with some extra accessors for short/long names

[13:19] <stevan> for pads?

[13:19] <fglock> yes

[13:20] <stevan> sounds sane to me

[13:21] <fglock> then, you may want to add support for continuations, coroutines, etc - a lot of work ahead :)

[13:34] <svnbot6> r6796 | iblech++ | t/var/constant.t: luqui confirmed the existance of "my constant" and "our

[13:34] <svnbot6> r6796 | iblech++ | constant", so I removed =for discussion and added some more tests (see

[13:34] <svnbot6> r6796 | iblech++ | http://www.nntp.perl.org/group/perl.perl6.language/23003).

[13:34] <svnbot6> r6797 | fglock++ | * PIL-Run - commented out grep() and uniq(), because they break PrimP6 compilation

[13:35] <fglock> stevan: I think we can think of pads the same way we do 'super' methods

[13:36] <fglock> and 'caller'

[13:58] <svnbot6> r6798 | fglock++ | * PIL-Run - logic value of 'undef' is false

[13:58] <svnbot6> r6799 | fglock++ | * PIL-Run - uniq() works - but only once, because the %seen is global

[14:07] <nothingmuch> hah! I knew it! rafl++

[14:07] <nothingmuch> for 6790

[14:07] <nothingmuch> (massive mindless changes)--

[14:07] <nothingmuch> what I don't know is why it's been massively revertec

[14:08] <rafl_> nothingmuch: Err?

[14:08] <nothingmuch> wait, re 6793 - what was actually done?

[14:08] <nothingmuch> rafl_: well, i thought that making everything spaces was very stupid

[14:09] <nothingmuch> because there is no real point in fixing what isn't broken

[14:09] <nothingmuch> especially when in some people's opinion the fixing is actually breaking

[14:09] <nothingmuch> and the makefile issue is a good example of why it was a bad idea

[14:09] <nothingmuch> so thanks for fixing it =)

[14:10] <rafl_> nothingmuch: Well, I also like tabs more than spaces, but being consistent is good imho. Use tabs or spaces, not both.

[14:10] <masak> rafl_: there are also ways of being consistent using both

[14:10] <nothingmuch> i think this project is too spaced out to care about that

[14:11] <nothingmuch> imho it should be 'use whatever this file is in'

[14:11] <rafl_> nothingmuch: That's probably a good point.

[14:11] <nothingmuch> for new files I prefer tabs for block indenting

[14:11] <nothingmuch> and spaces for arbitrary indenting

[14:11] <nothingmuch> like my $foo    = $moose;\nmy $gorch = $bing;

[14:11] <nothingmuch> so that tab stops never make a difference

[14:12] <nothingmuch> i wouldn't mind spaces except that to delete them you need to press the delete key N times

[14:12] <nothingmuch> and inserting them "manually" is sometimes annoying

[14:12] <rafl_> Well, I actually don't care that much about what's used for indenting as long as it doesn't break something, of course. :-)

[14:12] <nothingmuch> right

[14:13] <nothingmuch> anyway, my opinion remains that the conversion did more harm than good, but whatever. too late.

[14:13] <nothingmuch> food time

[14:22] <svnbot6> r6800 | fglock++ | * PIL-Run - grep() compiles - it still doesn't work, but this works:

[14:22] <svnbot6> r6800 | fglock++ |    (1,2,3).map:{ if $^a != 2 { $^a } else { () } }

[14:22] <svnbot6> r6800 | fglock++ |    The error is related to calling the grep sub inside map()

[15:04] <svnbot6> r6801 | iblech++ | * Usual svn props.

[15:04] <svnbot6> r6801 | iblech++ | * t/var/constant.t: Minor fixes.

[15:04] <svnbot6> r6801 | iblech++ | * Pugs.PIL1, Pugs.Compile: PSub and PCode contain a p[Sub]?IsMulti field now,

[15:04] <svnbot6> r6801 | iblech++ |   so PIL2JS and PIL-Run can know which subs are multis and which subs are not.

[15:04] <svnbot6> r6801 | iblech++ | * Pugs.CodeGen.PIR: Accomodate for the above change.

[15:04] <svnbot6> r6801 | iblech++ | * PIL2JS: (Simple) multi subs!

[15:04] <svnbot6> r6801 | iblech++ |   * PIL2JS.js: If necessary, try to call all .variants of a multi to find out

[15:04] <svnbot6> r6801 | iblech++ |     whether the parameters match the sub signature. (Hack)

[15:04] <svnbot6> r6801 | iblech++ |   * PIL::Subs: Emit appropriate code for multis --

[15:04] <svnbot6> r6801 | iblech++ |       multi foo {...}  # is compiled as

[15:04] <svnbot6> r6801 | iblech++ |       our &foo ::= PIL2JS.new_multi(); &foo.add_variant({...});

[15:04] <svnbot6> r6801 | iblech++ | * Test.pm: Removed the skip_rest_anti_multi-hack which was previously needed

[15:05] <svnbot6> r6801 | iblech++ |   for PIL2JS. :)

[15:10] <nothingmuch> luqui: ping

[15:14] <rafl_> The MIME-Base64 tests block infinitely for me if parrot is installed. Can someone reproduce that?

[15:18] <dada> rafl_: IIRC, QtPlatypus was working on that

[15:22] <nothingmuch> rafl_: i can

[15:22] <nothingmuch> as do Net-IRC/t/basic.t, and something in Set

[15:23] <caomu_> ?eval $PUGS_VERSION

[15:23] <evalbot_6801> Error: Undeclared variable: "$PUGS_VERSION" 

[15:23] <integral> ?eval $?PUGS_VERSION

[15:23] <evalbot_6801> \'Perl6 User\'s Golfing System, version 6.2.9, August 3, 2005 (r6801)' 

[15:23] <integral> of course, the nick is a bit of a giveaway ;-)

[15:23] <caomu_> hmm, I need to buy a notebook, so, Anyone here can give me a suggestion? As It seems It's not easy to choose one fit my needs. :-S

[15:24] <caomu_> oops. I am xinming, I was now in Beijing

[15:24] <rafl_> caomu_: I can recommend the IBM X-Series.

[15:24] *** caomu_ is now known as xinming_BeiJing

[15:24] <xinming_BeiJing> that xinming is the one which I sshed to my home computer. :-P

[15:24] <xinming_BeiJing> rafl_, hmm, Which one, Could you please give me a url?

[15:25] <xinming_BeiJing> ping autrijus ~~~ :-)

[15:25] <rafl_> I have an X41. Boguth at nofost.de

[15:26] * integral likes spiralbound, good for laying flat on a desk

[15:31] <wolverian> ?eval class Foo { method bar ($x) { 1 } } Foo.new.bar (1)

[15:31] <evalbot_6801> Error:  unexpected "(" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[15:31] <wolverian> is method (args) illegal? (compare to method(args))

[15:31] <xinming_BeiJing> wolverian, Foo.newbar(1)

[15:31] <xinming_BeiJing> ?eval class Foo { method bar ($x) { 1 } } Foo.new.bar (1)

[15:31] <evalbot_6801> Error:  unexpected "(" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[15:31] <xinming_BeiJing> ?eval class Foo { method bar ($x) { 1 }; } Foo.new.bar ( 1 )

[15:31] <evalbot_6801> Error:  unexpected "(" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[15:31] <xinming_BeiJing> oops...

[15:32] <xinming_BeiJing> ?eval class Foo { method bar ($x) { 1 }; } Foo.new.bar( 1 )

[15:32] <evalbot_6801> 1 

[15:32] <wolverian> right, I know it works that way

[15:32] <dada> but why?

[15:32] <xinming_BeiJing> wolverian, In synopsis, It told you.

[15:32] <xinming_BeiJing> dada, hold on please.

[15:33] <wolverian> xinming_BeiJing, it told me what? I don't remember reading about _method_ parentheses whitespace rules, but maybe I missed it

[15:33] <dada> you mean that you can _never_ have spaces before ( in function calls?

[15:33] <xinming_BeiJing> dada, hmm, In fact, I think It's for the problem of the ignorance of the parenthesis.

[15:34] <xinming_BeiJing> just like, you can use `sub fun( $x ) { ... }; fun 1;`

[15:34] <xinming_BeiJing> ou don't need the parenthesis to do the sub call.

[15:34] <dada> but you can't do "fun (1);"?

[15:35] * dada sees whitespaces mattering all around and flees in panic

[15:35] <xinming_BeiJing> But There is a special case, which is, If you need to pass an "ARRAY" to the function, You have to distinguish the "WHOLE" parameters and the parameter which with "ONLY" an "ARRAY"

[15:35] <wolverian> dada, sure you can. it's just in methods, where parens are _required_ that it is different.

[15:36] <wolverian> at least pugs thinks so

[15:36] <dada> this is not encouraging

[15:36] <xinming_BeiJing> so, If there is space between `fun` and `(`

[15:36] <wolverian> and it is consistent with '%foo {1}' being illegal

[15:36] <wolverian> but that is because of 'if %foo { ... }', and parens have nothing to do with that

[15:37] <dada> I _hate_ whitespace rules

[15:37] <xinming_BeiJing> the later (1) will be come a array in fact, and pass the (1) to the function, But the function need a argument which is a "SCALAR"

[15:37] <dada> boo

[15:38] <xinming_BeiJing> dada, neither do I. :-) But In fact, you have no choice... Perl 6 is complex to confuse many people. :-)

[15:38] <xinming_BeiJing> dada, hmm, In fact, you can use `fun      .(1)` format

[15:38] <xinming_BeiJing> pay attention to the "DOT"

[15:39] <wolverian> that works with {} too

[15:39] <wolverian> %foo .{1} # legal

[15:39] <xinming_BeiJing> wolverian, yes. `.` becomes like a "grammar" connector. :-)

[15:41] <wolverian> dada, note: print (1+2)*3; # this is extremely non-obvious in perl5

[15:42] <xinming_BeiJing> Parentheses are required on the dot notation if there are any arguments (not counting adverbial arguments). There may be no space between the method name and the left parenthesis unless you use the dot form of parentheses:

[15:42] <xinming_BeiJing>     .doit       # okay, no arguments

[15:42] <xinming_BeiJing>     .doit()     # okay, no arguments

[15:42] <xinming_BeiJing>     .doit ()    # ILLEGAL (two terms in a row)

[15:42] <xinming_BeiJing>     .doit.()    # okay, no arguments, same as .doit()

[15:42] <xinming_BeiJing>     .doit .()   # okay, no arguments, same as .doit()

[15:42] <xinming_BeiJing> read S12 carefully please. :-)

[15:43] <xinming_BeiJing> ?eval print(1+2)*3;

[15:43] <evalbot_6802> 33.0 

[15:43] <xinming_BeiJing> ?eval print (1+2)*3;

[15:43] <evalbot_6802> 9bool::true 

[15:43] <wolverian> xinming_BeiJing, ah, of course. thanks :)

[15:44] <dbrock> what about .doit . ()?

[15:46] <xinming_BeiJing> dbrock, hmm, I think, the "DOT" must be strictly standing before the `(`

[15:46] <svnbot6> r6802 | rafl++ | Debian:

[15:46] <svnbot6> r6802 | rafl++ | * Added libtest-tap-model-perl and libtest-tap-htmlmatrix-perl to

[15:46] <svnbot6> r6802 | rafl++ |   Build-Depends. They are needed for smoking. The packages are currently in NEW

[15:46] <svnbot6> r6802 | rafl++ |   and will soon be in the archive.

[15:46] <svnbot6> r6803 | Stevan++ | Perl6::MetaModel 2.0 -

[15:46] <svnbot6> r6803 | Stevan++ | * is_a() now expects a class instance, and not a string

[15:46] <svnbot6> r6803 | Stevan++ |     - fixed a number of tests to reflect

[15:46] <svnbot6> r6803 | Stevan++ | * cleaned up isa() handling between $::Class and $::Object

[15:46] <svnbot6> r6803 | Stevan++ |     - added some tests for this

[15:46] <svnbot6> r6803 | Stevan++ | * more tests in relation to $::Module being added

[15:46] <svnbot6> r6803 | Stevan++ | * added docs/misc_drawings.txt for misc. ASCII art 

[15:46] <xinming_BeiJing> seen autrijus 

[15:47] <dada> .doit . . . . . . . . . . . . . . . . . . . . . . . .()

[15:48] <dbrock> would that work?

[15:49] <wolverian> no.

[15:49] <dada> why not!?

[15:49] <wolverian> why would it? 

[15:49] <stevan> well it all depends on what language you are writing in ;)

[15:49] <xinming_BeiJing> If in a dialect of perl 6, It might work. ;-)

[15:49] <dada> ?eval sub doit { 42 } doit();

[15:49] <wolverian> . . is almost certainly a typo of ..

[15:49] <evalbot_6803> 42 

[15:50] <dada> ?eval sub doit { 42 } doit .();

[15:50] <evalbot_6803> 42 

[15:50] <dada> ?eval sub doit { 42 } doit . .();

[15:50] <evalbot_6803> Error: cannot cast from VInt 42 to Pugs.AST.Internals.VCode (VCode) 

[15:50] <wolverian> hm

[15:50] <wolverian> ?eval sub doit { return { 42 } } doit . .()

[15:50] <evalbot_6803> 42 

[15:50] <wolverian> haha. that is evil.

[15:50] <dada> ?

[15:50] <xinming_BeiJing> you can even write a rule to alter the default perl 6 pharser... :-P  Just like...  make "DOT" equal to fun DOOOOOOOOOOOOOOOOOT() :-P

[15:51] <wolverian> I'm thinking that's illegal though

[15:51] <wolverian> ?eval sub doit { 42 } doit .

[15:51] <evalbot_6803> 42 

[15:51] <dada> ?eval sub doit { 42 } doit. ();

[15:51] <evalbot_6803> Error:  unexpected "(" expecting operator, postfix conditional, postfix loop, postfix iteration, ";" or end of input 

[15:51] <svnbot6> r6804 | Stevan++ | Perl6::MetaModel 2.0 -

[15:51] <svnbot6> r6804 | Stevan++ | NOTE: is_a() now checks the $obj.id and not $obj.name 

[15:51] <svnbot6> r6804 | Stevan++ | I forgot to mention that in the last checkin

[15:51] <svnbot6> r6804 | Stevan++ | * $::Class no longer has a $:name field until it is

[15:51] <svnbot6> r6804 | Stevan++ |   inherited from $::Module (in genesis.pl)

[15:51] <svnbot6> r6804 | Stevan++ |     - same with $::Object as well

[15:52] <dada> woo, I like the phoenix effect :-)

[15:53] <wolverian> hmm, someone should ask p6l if 'doit .' should be legal :)

[16:29] <xinming_BeiJing> autrijus, you there please? :-/

[16:51] <svnbot6> r6805 | Stevan++ | Perl6::MetaModel 2.0 -

[16:51] <svnbot6> r6805 | Stevan++ | * added $::Package, so now:

[16:51] <svnbot6> r6805 | Stevan++ |     $::Class isa $::Module isa $::Package isa $::Object

[16:51] <svnbot6> r6805 | Stevan++ |   see http://article.gmane.org/gmane.comp.lang.perl.perl6.language/4599 

[16:51] <svnbot6> r6805 | Stevan++ |   for more details.

[16:51] <svnbot6> r6805 | Stevan++ |     - adjusted and added some test to accomidate this change

[16:57] <svnbot6> r6806 | fglock++ | * PIL-Run - fixed @a=()

[17:16] <svnbot6> r6807 | iblech++ | * Usual svn props.

[17:16] <svnbot6> r6807 | iblech++ | * t/junction/junction_functions.t: Substituted (1|2|3) by any(1,2,3) so

[17:16] <svnbot6> r6807 | iblech++ |   PIL2JS and PIL-Run have a chance of passing this test.

[17:16] <svnbot6> r6807 | iblech++ | * New t/junction/chained_operators.t: New test testing that (1|2|3) is the same

[17:16] <svnbot6> r6807 | iblech++ |   as any(1,2,3) (passes 7/7 in normal Pugs).

[17:24] *** PerlPilot is now known as PerlJam

[17:28] <svnbot6> r6808 | iblech++ | Test.pm: Put skip_rest_anti_multi-hack in again (I removed it in r6801).

[17:28] <svnbot6> r6808 | iblech++ | PIL2JS's handling of multisubs needs some more work until we can get rid of the hack.

[17:28] <svnbot6> r6809 | fglock++ | * perl5/Array - $array.store() preserves cell binding

[17:33] <xinming_BeiJing> seen autrijus 

[17:37] <stevan> iblechbot: does PIL2JS handle packages at all?

[17:40] <svnbot6> r6810 | iblech++ | t/operators/repeat.t: Fixed the test so fglock++ can test his work :)

[17:40] <fglock> checking repeat.t ...

[17:51] <svnbot6> r6811 | fglock++ | * perl5/Array - fixed autovivification in slices

[18:15] <svnbot6> r6812 | rafl++ | Debian:

[18:15] <svnbot6> r6812 | rafl++ | * Added libwww-perl to Build-Depends. Needed by smokeserv-client.

[18:15] <svnbot6> r6812 | rafl++ | * Clean config.yml properly.

[18:26] <rafl_> Grr. Would someone please stop that evalbot maddness?

[18:27] <rafl_> Is there an other way than precompiling Test.pm to speed up smoking a bit?

[18:28] <stevan> rafl_: not running the rules test will usually cut smoking time down some 

[18:28] <geoffb> Why is the evalbot bothering you, rafl_ ?

[18:28] <rafl_> stevan: Ah, OK.

[18:29] <rafl_> geoffb: Because it keeps parting and joining. That's annoying.

[18:29] <stevan> rafl_: it is updating itself

[18:29] <geoffb> rafl_, causing your chat client to beep at you?

[18:30] <rafl_> An update for a change in the debian packaging? Hrm..

[18:30] <rafl_> geoffb: No, but it's line noise I don't like that much.

[18:30] <geoffb> Someone mentioned that there is a way to make the bot be invisible WRT part/join messages

[18:30] <geoffb> ah.

[18:31] <geoffb> I'm used to P/J line noise because this channel has so many people going in and out anyway.

[18:31] <stevan> maybe it should only re-compile when src/ changes

[18:31] <geoffb> And my client colorizes those lines so they fade out of the mess

[18:31] <geoffb> stevan, that way lie edge cases and other dragons.

[18:32] <geoffb> Like, what about changes to Makefile.PL, or util/?

[18:32] <stevan> geoffb: true dat

[18:32] <stevan> maybe evalbot could just change it's nick? 

[18:32] <stevan> I am not really sure the details of what exactly is happening anyway

[18:33] * stevan pleeds IRC ignorance and goes back meta-model stuff

[18:34] <geoffb> Well, since the helper respawns pugs children every time, theoretically just changing nick would work, but someone has to do that.  Since luqui is running evalbot these days, I guess him, but who knows if he has tuits that he wants to spend on that.  :-)

[18:34] <geoffb> Which of course leads to: rafl_, you can always fix it and run it from you box.  ;-)

[18:34] * stevan thinks it might be running on feather

[18:35] <stevan> but I am not sure of that

[18:35] <geoffb> stevan++ # Devoting so many non-work cycles to the MM

[18:36] <stevan> geoffb: who said it wasn't $work related :)

[18:38] <rafl_> geoffb: It's running on feather. I don't want to change evalbot. /ignore fixes the problem for me.

[18:41] <rafl_> I hope /ignore -regexp -pattern 'evalbot_[:alnum:]+' JOINS will work..

[18:51] <svnbot6> r6813 | iblech++ | PIL2JS: pugs-smokejs.pl: Skip all rules tests for now (they exhaust far too

[18:51] <svnbot6> r6813 | iblech++ | much RAM) -- smoking PIL2JS should be safe now.

[18:51] <svnbot6> r6814 | fglock++ | * PIL-Run - ($a,\undef,$b)=(1,2,3) and ($a,$b)=($b,$a) work

[18:51] <svnbot6> r6815 | autrijus++ | * Add space-loving settings for Emacs in pugs::hack, following

[18:51] <svnbot6> r6815 | autrijus++ |   iblech++'s paragraph on Vim settings.

[18:51] <rindolf> Hi all!

[18:51] <dduncan> Hi one

[18:51] <rindolf> autrijus: here?

[18:51] <dduncan> seen autrijus

[18:51] <stevan> hey rindolf, autrijus just commited, but he has not been around much lately

[18:51] <rindolf> Actually it may be too late for him.

[18:52] <stevan> rindolf: he regularly IRCs in his sleep, so you might be able to access his unconcious mind

[18:52] <rindolf> perlbot: karma autrijust

[18:52] <perlbot> autrijust doesn't have any karma

[18:52] <rindolf> perlbot: karma autrijus

[18:52] <perlbot> Karma for autrijus: 46

[18:53] <rindolf> OK.

[18:53] <dduncan> I notice the brand-new /util/cperl6-mode.el has almost 10,000 tabs in it, and they are mixed in with spaces

[18:53] <stevan> dduncan: I wouldn't mess with that one

[18:54] <dduncan> oh?

[18:54] <stevan> well actually eLISP shouldnt be too whitespace sensitive 

[18:54] <dduncan> well, I know that some file types need tabs

[18:54] <stevan> dduncan: yes, the makefiles do

[18:54] <dduncan> the hint here is that the tabs and spaces are mixed

[18:54] <dduncan> apparently the haskell files don't, since autrijus converted those

[18:55] <stevan> dduncan: I think tab consistency is more important in p6 source files

[18:55] <dduncan> yes

[18:56] <dduncan> I was mainly going after the perl 5 and perl 6 files anyway

[18:56] <svnbot6> r6816 | autrijus++ | * Change all `is readonly` to either `my constant` or `is constant` .

[18:56] <svnbot6> r6817 | autrijus++ | * lambda-calculus.p6 - Port the $VERSION line to Perl6:

[18:56] <svnbot6> r6817 | autrijus++ |     our $VERSION = sprintf "%d.%02d", q$Revision: 0.1 $ ~~ m:P5:g/(\d+)/;

[18:56] <svnbot6> r6817 | autrijus++ |   Also made some minor fixes to make the program more perl6ish.

[18:56] <dduncan> and c and java, since I understand those languages

[18:58] <dduncan> stevan, have a look at cperl6-mode and see if you think those tabs are necessary, and if not then how many cols the author saw when using them

[18:58] <dduncan> with my editor, that uses 4 cols, various sections don't seem to line up right now

[18:59] <dduncan> or I suppose I could ignore the file and let the emacs folks worry about understanding it

[19:01] <stevan> dduncan: my concern with that file is that it might have some code-reformatting stuff in it

[19:01] <geoffb> stevan, MM is $work related for you?  Wunderbar!

[19:01] <stevan> which means it could be whitespace sensitive in select areas

[19:01] <stevan> dduncan: so my suggestion is let the emacs people deal with it ;)

[19:01] <dduncan> so I'll leave it alone then

[19:01] <stevan> geoffb: loosely $work related 

[19:02] <integral> ]/window 23

[19:02] <stevan> geoffb: $work uses a lot of OSS, so any time we are without an active $project we contribute to OSS :)

[19:03] <stevan> my co-worker is over on #jsan doing the same as I am here :)

[19:03] <geoffb> stevan, good for you guys!  Who is $work, if you don't mind saying?

[19:03] <stevan> geoffb: http://www.iinteractive.com

[19:03] * geoffb is a consultant and writer, so considers pugs as "continuing education"  :-)

[19:03] <stevan> we are a small consultancy,.. the website is not terribly up to date right now

[19:04] <geoffb> nodnod

[19:04] <stevan> mostly we do LAMP apps for various clients

[19:05] <stevan> I am hoping I can get the MM stable enough to use in prod

[19:06] <stevan> that way I can use p6 OO in p5 :)

[19:06] * stevan is not a fan of the current crop of p5 class-generation modules

[19:06] <dduncan> fyi, following recent changes, over 90% of all the literal tab characters are gone from the distros, where about 2000 of 25000 or so remain; but that the new cperl6-mode file adds almost 10000 more, bringing it to 11,822

[19:06] <geoffb> stevan, :-)

[19:06] <dduncan> s/the distros/pubs/

[19:06] <dduncan> s/pubs/pugs/

[19:07] <stevan> geoffb: but the real reason I am doing this is because its fun ;)

[19:08] <geoffb> Well, of course.  You could have chosen *any* OSS project to throw cycles at.

[19:08] <geoffb> Thanks for picking this one.  ;-)

[19:08] <autrijus> yeah, apparently our optimizer is pretty good on this one :)

[19:09] <geoffb> autrijus, yep, best choice for optimization, if you ask me.

[19:09] <geoffb> -Of

[19:09] <autrijus> :D

[19:10] * autrijus starts thinking t-shirt ideas based on -Ofun

[19:10] <stevan> :)

[19:10] <dduncan> autrijus, I noticed you did the /src last night

[19:10] <geoffb> Did you do the Just Fear | Nothing one?

[19:10] <stevan> hey autrijus, got DSL?

[19:10] <autrijus> geoffb: yup, did that

[19:10] <geoffb> schweet

[19:10] <autrijus> stevan: yeah, finally

[19:10] <stevan> nice

[19:10] <autrijus> but then begineth the long strectch of $work that will extend to at least thursday

[19:10] <geoffb> (faster connection)++

[19:11] <autrijus> :-/

[19:11] <stevan> autrijus: we need to find you some funding 

[19:11] <autrijus> stevan: MM2 is making more and more sense every day

[19:11] <stevan> this $work thing is no good

[19:11] <stevan> autrijus: thanks :)

[19:12] <geoffb> autrijus, are you ready to accept TPF funds, or still no?

[19:12] <autrijus> geoffb: er it's said on TPF website that I am

[19:12] <geoffb> sorry, hadn't checked recently

[19:13] <stevan> autrijus: did you see the recent $Package and $Module additions to MM2?

[19:13] * geoffb gets lazy when multitasking

[19:13] <autrijus> but I'm $work'ing now on the premise of no fundings -- at this rate I'll need to work another two weeks before ICFP, then for another two to three months, before I can cover a year's worth of erdosing

[19:13] <xinming_BeiJing> autrijus, are you awake now? :-P

[19:13] <stevan> I am debating whether to add $Package symbol tables accessing and such

[19:14] <autrijus> xinming_BeiJing: barely. a long day today -- and need to up early tomorrow, which means I need to sleep soon

[19:14] <autrijus> stevan: I think they obviously belong to ::Package

[19:14] <xinming_BeiJing> autrijus, I need a suggestion on buying a laptop, I know It's not a good to ask here. But I think I willl buy an laptop in BeiJing, But I don't know much on Laptop, So, I wish some one could give me some suggestions. 

[19:14] <autrijus> since ultimately the interop with underlying OS -- I mean runtime -- will base on that API

[19:14] <stevan> autrijus: yes, but do they belong in the MM? or should I assume it is there?

[19:15] <xinming_BeiJing> autrijus, Or, I will ask for your laptop "version" So that I might get the one "close" as yours. :-P

[19:15] <stevan> in the underlying runtime that is

[19:15] <autrijus> stevan: I think it's best to settle on a API and have a p5 impl, as part of Perl6-Package or something, or just part of PILrun

[19:16] <autrijus> xinming_BeiJing: okay... I'm using Asus M2C, on the ground that it's got excellent support and very cheap, so I can break it freely without feeling guilty.

[19:16] <xinming_BeiJing> thanks.

[19:16] <svnbot6> r6818 | Darren_Duncan++ | updated ChangeLog re other peoples' detabbing work; added /src/* re autrijus++, removed /debian/rules re rafl++ as it has a net zero change

[19:17] <autrijus> stevan: also, I wonder how the ChangeLog thing shoudl be handled for this release

[19:17] <xinming_BeiJing> autrijus, maybe It's cheap to you, But not to me, hmm, I will consider it for following the talent hacker. ;-)

[19:17] <autrijus> which I hope to start relenging this weekend

[19:18] <autrijus> xinming_BeiJing: er it's cheap compared to Toshiba or IBM.

[19:18] <stevan> autrijus: I was thinking about that too (Changelog)

[19:18] <stevan> perhaps PILRun and PIL2JS should have their own changelogs?

[19:18] <autrijus> stevan: maybe have you, iblech and fglock summarize the major areas

[19:19] <autrijus> I think a single ChangeLog is still good, but probably difference section layout than the previous ones

[19:19] <stevan> autrijus: ok

[19:19] <autrijus> but I'm too fried to think clearly

[19:19] <autrijus> so maybe tomorrow :)

[19:19] <stevan> I will slate some extra time this weekend to do that 

[19:20] <xinming_BeiJing> autrijus, 你的那个东西会不会漏电啊。。。怎么网络上有个消息说这个产品有一披会漏电。。。

[19:20] <autrijus> xinming_BeiJing: my laptop doesn't leak electricity

[19:20] <rafl_> dduncan: I don't really understand what your commit message want's to say to me.

[19:20] <autrijus> stevan: you rocketh

[19:20] <xinming_BeiJing> autrijus, thanks. I will consider it. ;-)

[19:20] <autrijus> geoffb: wrt tpf funding url: http://www.perlfoundation.org/news/2005/allisonpugs.html

[19:20] <stevan> autrijus: :)

[19:21] <autrijus> alright, journal up, I'll zzz now

[19:21] <autrijus> ciao. :)

[19:21] * autrijus waves &

[19:21] <geoffb> ciao

[19:21] <stevan> nite 

[19:21] <dduncan> rafl, I just acknowledged that you fixed something I broke; my changelog update concerned what files were detabbed and what weren't

[19:22] <rafl_> dduncan: Ah, OK.

[19:23] <xinming_BeiJing> autrijus, Is your CPU 1.6 G

[19:23] <dduncan> in your specific case, since the changelog is for the benefit of people switching up distros and don't care about the intermediate steps, I removed the mention of a changed file because it was reverted between the same 2 distros it was changed

[19:23] <autrijus> xinming_BeiJing: yes, dothan 1.6g. but I'll sleep now -- please direct further questions to my mail or something :)

[19:23] <autrijus> &

[19:24] <xinming_BeiJing> autrijus, well, I won't trouble you more, I'd rather like to see the finish of pugs faster. ;-)

[19:24] <xinming_BeiJing> sleep well, night.

[19:41] <svnbot6> r6819 | Stevan++ | Perl6::MetaModel 2.0 - fixed up the ASCII art

[19:53] <svnbot6> r6820 | fglock++ | * PIL-Run - %ENV is tied 

[19:54] <fglock> autrijus: done :)

[19:56] <rafl_> Juerd: ping

[20:03] <rafl_> I see there's already a changelog entry for 6.2.10. Is there also a release shedule yet?

[20:04] <Juerd> I have no idea.

[20:04] <Juerd> I know nothing.

[20:04] <geoffb> rafl_, autrijus mentioned something about releng an hour or so ago, sound like will occur this weekend, perhaps beginning of next week

[20:04] <geoffb> but that's just reading the tea leaves

[20:05] <geoffb> (and that autrijus has work through Thursday and stevan is planning to do changelog work this weekend)

[20:05] <rafl_> geoffb: Cool. I think that will be the first version to be in Debian officially.

[20:06] <geoffb> w00t!

[20:06] * geoffb can't wait for 'apt-get pugs' everywhere he touches

[20:07] <rafl_> We only need to wait for ghc6 to be updated to 6.4-4.1 on all architectures (hppa ia64 m68k sparc missing) and for libtest-tap-model-perl and libtest-tap-htmlmatrix-perl to be approved by the ftp-masters.

[20:11] <Juerd> 22:09  * geoffb can't wait for 'apt-get pugs' everywhere he touches

[20:11] <Juerd> +install

[20:13] <rafl_> Juerd: How about moving the pugs installation on feather to the debian package?

[20:14] <dduncan> I added a template changelog entry for 6.2.10 but left the revision and date XXd out ... that way, people can add to it while they are making changes and best understand the nature of those changes, rather than trying to figure it out later ... this is also standard practice with my own distros

[20:14] <dduncan> that's in response to rafl_'s question of a half hour ago

[20:17] <svnbot6> r6821 | iblech++ | * t/builtins/math/: log.t, exp.t: Added abs(...) <= EPSILON guards.

[20:17] <svnbot6> r6821 | iblech++ | * PIL2JS:

[20:17] <svnbot6> r6821 | iblech++ |   * Prelude::JS::Array: sum() returns undef now.

[20:17] <svnbot6> r6821 | iblech++ |   * PIL2JS: Added $*OUT.

[20:17] <dduncan> oh, and the pugs release schedule is about once per month, shortly after each monthly parrot release

[20:29] <svnbot6> r6822 | Stevan++ | Perl6::MetaModel 2.0 -

[20:29] <svnbot6> r6822 | Stevan++ | * added a number of tests from MM 1.0

[20:29] <svnbot6> r6822 | Stevan++ | * fixed DESTROY to work correctly

[20:39] <Juerd> rafl_: If that can be done automatically, without too much breakage, sure, I'm all for it.

[20:43] <rafl_> Juerd: For sure, it can be automated.

[20:43] <rafl_> Juerd: Who run's the automated updates at the moment?

[20:44] <Juerd> /me, but if you want totake over, please so

[20:44] <Juerd> I have very little time and health to do feather stuff

[20:45] <rafl_> How do you do it? Do you trigger a recompile with every commit? Or maybe via cron?

[20:45] <Juerd> See ~juerd

[20:45] <Juerd> It's all readable

[20:45] <Juerd> It's done via cron

[20:45] <Juerd> The script autobuild.sh

[20:45] <rafl_> Ok, I think I'll do that this night.

[20:47] <svnbot6> r6823 | Darren_Duncan++ | updated lib/pugs/hack.pod to specify how to configure BBEdit to auto-expand tab key-presses, complementing the Vi and Emacs instructions for the same

[20:48] * rafl_ wonders if this information is really pugs specific..

[20:48] <Juerd> Which information?

[20:49] <rafl_> Juerd: How to configure $your_favourite_editor.

[20:50] <Juerd> rafl_: It is.

[20:50] <Juerd> (not really.)

[20:50] <Juerd> (but who really cares?)

[21:02] <rafl_> Juerd: Hm. I see that you also compile parrot yourself. I think I'll preparea Debian package for it before.

[21:05] <jakx> hello

[21:06] <jakx> when is perl 6 coming out

[21:07] <wolverian> jakx, when it's done.

[21:07] <dduncan> or, you could say its out right now!

[21:07] <dduncan> but just not all of its pieces

[21:07] <wolverian> right :)

[21:08] <wolverian> jakx, pugscode.org has a in-development perl6 implementation that we are collectively hacking on

[21:08] <wolverian> jakx, you are more than welcome to join in :)

[21:09] <rantanplan> Pugs is really a good thing. Just startet coding in perl 6 with pugs the last weekend. Before i was coding perl 5 like 10 years. But i like the changes of perl 6. :)

[21:11] <wolverian> rantanplan, wow, that's oldschool. :) did you ever use perl4?

[21:11] <jakx> i have little experience in perl

[21:11] <jakx> does anyone here write object oriented code in perl

[21:12] <integral> sure.  And functional code too :)

[21:12] <rantanplan> not really, i was only using perl 5. i also had some perl breaks to do other languages as well. but in perl 4 i never coded.

[21:12] <jakx> when i bless a reference what really happens?

[21:13] <buu> jakx: Why are you asking about perl5.. in perl6?

[21:14] <rantanplan> jakx: i dont even know if in perl 6 is blessing still available.

[21:14] <jakx> how do i create a constructor in perl6

[21:14] <integral> bless is still in perl6, but your "new" function is automatically created basically

[21:14] <integral> jakx: bless just takes a wee sticky label and sticks in on your data structure

[21:15] <jakx> ok

[21:15] <integral> Things later on can then look bemusedly at your handwriting on the label and find the right code to run

[21:17] <rantanplan> jakx: Look at nr. 12: http://dev.perl.org/perl6/docs/synopsis.html

[21:17] <jakx> it says file not found

[21:18] <rantanplan> Sorry, my bad. s/docs/doc/

[21:18] <jakx> wow

[21:18] <jakx> a class keyword is in perl6

[21:20] <buu>  YES

[21:20] <jakx> rantanplan:does the pugs offer this functionality 

[21:20] <buu> All hail the mighty.

[21:20] <wolverian> jakx, read all the synopses :)

[21:20] <wolverian> ?eval class Foo { method bar { 42 } } Foo.new.bar

[21:20] <evalbot_6823> 42 

[21:20] <wolverian> jakx, there you go. evalbot runs pugs. :)

[21:20] <rantanplan> I ve printed out the synopsis today :)

[21:23] <jakx> nice

[21:24] <jakx> the python people are getting competion

[21:25] <jakx> *competition

[21:27] <jakx> perl has it all now ,OOP,speed and a big comunity

[21:29] <jakx> can the pugs be installed on windows using active perl

[21:30] <rantanplan> jakx, look at the pugscode hp.

[21:30] <rantanplan> there is a windows installer. afaik.

[21:30] <integral> speed?  Pugs itself isn't that speedy,  and the PIR isn't brilliant yet

[21:30] <integral> Pugs is included in PXPerl which is a Windows Perl distribution.

[21:32] <dduncan> jakx, I write all my non-trivial perl in object oriented form

[21:32] <jakx> ok

[21:33] <jakx> is there a site to get PXPerl from

[21:33] <rantanplan> http://www.pugscode.org -> Binary Builds

[21:36] <jakx> the pxperl linkis saying the lik canot be found

[21:37] <jakx> is there another site

[21:47] <buu> ?eval (1,2,3)[1]

[21:47] <evalbot_6823> \2 

[21:47] <buu> That's weird.

[21:47] <buu> ?eval sub z { (1,2,3) } z()

[21:47] <evalbot_6823> (1, 2, 3) 

[21:47] <buu> ?eval sub z { (1,2,3) } z()[0]

[21:47] <evalbot_6823> \1 

[21:47] <buu> ?eval sub z { (1,2,3) } z()[2]

[21:47] <evalbot_6823> \3 

[21:47] <jakx> is there another site to get pxperl

[21:49] <buu> I bet google knows!

[21:52] <svnbot6> r6824 | fglock++ | * TODO updates

[21:52] *** nnunley2 is now known as nnunley

[22:16] <svnbot6> r6825 | rafl++ | * Updated documentation for the Debian package.

[22:50] <svnbot6> r6826 | vkon++ | fix logical typo in Types.hs in cxtSlurpy definition

[23:40] <mosnene> hello

[23:40] <mosnene> what are you doig?

[23:47] <buu> I am aborting small children.

[23:48] *** buu is now known as buubot

[23:48] <lscd> congradulations

[23:48] *** buubot is now known as buu

[23:49] <buu> Thank you.

