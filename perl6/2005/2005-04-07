[02:37] *** stevan changes topic to: pugscode.org <<Overview Journal Logs>> | You have safely opened the door to many Perl 6 hackers. | pugs.kwiki.org | smoke: http://xrl.us/fmw2 | Mac OS X r1615 (432/4142) | Win2k r1600 (437/4135)

[02:42] <jabbot> pugs - 1615 - adding a few more mutli-dim tests

[02:52] <jabbot> pugs - 1616 - * Try to include File::Spec even if we d

[02:56] <stevan> morning autrijus 

[02:59] <autrijus> greetings stevan

[03:01] <autrijus> how's going?

[03:01] <stevan> good, and you?

[03:01] <autrijus> just up and going to $work

[03:02] <stevan> I am watching TV and getting ready to sleep :)

[03:02] <autrijus> I think I need to fix multidim today.

[03:02] <stevan> autrijus: that would be wonderful

[03:02] <autrijus> :D

[03:02] <stevan> I need it to finish CGI :)

[03:03] <stevan> so I would be very appreciative

[03:03] <autrijus> okie.

[03:11] * ingy just spent ~30 hours in bed

[03:11] <autrijus> good. I'd like that too

[03:12] <ingy> actually I'm still in bed so counting...

[03:12] <crysflame> hi, ingy

[03:12] <cls_bsd> ingy: where's your Spoon-0.23? :D

[03:12] <ingy> on cpan no?

[03:13] <ingy> hmmm

[03:13] <cls_bsd> no, only 0.22

[03:13] <cls_bsd> although I have patches from Spork and gugod@ :p

[03:13] <ingy> wtf

[03:15] <cls_bsd> inc/.../Makefile.pm from Spork, and Makefile.PL from gugod

[03:20] <Khisanth> Spoon and Spork ... so where is Fork?

[03:21] <cls_bsd> fork() will die()

[03:22] <ingy> Spork *is* a subclass of Spoon

[03:22] <stevan> but shouldn't Spork also be a subclass of Fork?

[03:23] <stevan> or at least a trait/role or something

[03:28] <cls_bsd> WebService-GoogleHack, good

[03:29] <autrijus> the Array data type is now going to change from List to IntMap... you should notice no external effects

[03:29] <autrijus> except operations go from O(n log n) to O(n)

[03:32] <jabbot> pugs - 1617 - * discard MkHash newtype from HV

[03:45] <ingy> cls_bsd: Spoon-0.23 uploaded

[03:45] <cls_bsd> ingy: great :) thakn you

[03:46] <ingy> it appears to actually have worked this time

[03:46] <ingy> I *swear* I uploaded the on Monday

[03:47] <cls_bsd> Yes, looks fine. :)

[03:47] <cls_bsd> ingy++

[03:49] <Alias_> Did I hear someone mention CGI?

[03:49] <Alias_> Is someone planning on rewriting CGI with a new API for Perl 6?

[03:49] <Alias_> Can I put in my vote for PLEASE making sure it's clean and works well with mod_perl2 from the start?

[03:51] <ingy> Alias_: fyi, Perl 6 will not suffer from the one implementation per module name problem of Perl 5

[03:52] <ingy> so there can be more than one CGI.pm

[03:52] <Alias_> I know, but we are going to have one primary blessed version per name :)

[03:52] <autrijus> "we" means "alias" :)

[03:52] <autrijus> each entity is free to have one primary blessed version per name

[03:52] <Alias_> I thought "we" meant "The CPAN QA team"

[03:52] <autrijus> sure, CPAN QA team is such an entity.

[03:53] <Alias_> But if someone must be the artibrar of taste, I accept your wise nomination

[03:53] <cls_bsd> perl6-Bible..

[03:53] <autrijus> I think perl-qa is fine for that

[03:53] <autrijus> but I think multiple blessers is totally the way to go.

[03:53] * ingy agrees

[03:54] <autrijus> i.e. I'd subscribe to Randy Kobes's list for Win32 Apache modules, etc

[03:54] <Alias_> I don't care who does the blessing, so long as the "normal" way of doing things is simple

[03:54] <Alias_> And code never changes in meaning because of context (like mod_perl2 wanted)

[03:55] <Alias_> Modules looks like the most dangerous place for second system dangers to take hold ATM

[03:56] <Alias_> But then I never like new ideas

[03:56] <Alias_> Especially ones that don't come with well though out 5 page documents that explain the effect on all the stakeholders and use profiles :)

[03:58] <Alias_> autrijus: Oh, BTW, what mechanism do you use in M:I for stripping modules for inclusion in /inc?

[03:58] <autrijus> Alias_: same code as PAR::Filter::PodStrip

[03:59] <Alias_> autrijus: I hope to do Perl::Compress, to make a compressing thingy

[03:59] <Alias_> autrijus: Can you easily put an optional hook in there somewhere once it's done?

[03:59] <Alias_> if ( installed(Perl::Compress) ) { ... } else { current code }

[04:00] <autrijus> sure, that'd be easy

[04:01] <autrijus> as long as there's no self-parsing code

[04:01] <Alias_> self-parsing code?

[04:01] <autrijus> seek DATA, 0, 0; my @code = <DATA>;

[04:01] <Alias_> um...

[04:02] <Alias_> PPI don't touch __DATA__

[04:02] <jabbot> pugs - 1618 - * Array is now an IntMap.

[04:02] <autrijus> good good

[04:02] <autrijus> then it's all fine :)

[04:02] <Alias_> I presume I can remove __END__ though :)

[04:12] <jabbot> pugs - 1619 - * more use of monadic fixpoints in loops

[04:19] <shapr> w00 fixpoint!

[04:21] <autrijus> I like fixpoints and how it magically works in ContT :D

[04:22] <shapr> yeah, fixpoint is another one of those simple and elegant ideas that does neat stuff.

[04:26] * Alias_ writes his first cron job in 3 years

[04:26] <Alias_> It's a lot easier than it used to be

[04:26] <ingy> ?

[04:26] <shapr> I couldn't get my head around fixpoint for a long time, but after enough reading I saw that it's just an all-monad safe Haskell implementation of Y used for a higher order recursion combinator. Not so scary after all.

[04:26] <Alias_> I have horribly memories of adding manual entries to the crontab

[04:26] <Alias_> maybe more like 6 years

[04:26] <Alias_> Now it seems that dron.daily is nice and easy

[04:26] <Alias_> cron.daily

[04:26] <ingy> has it changed in 6 years?

[04:27] <Alias_> I don't think the cron.daily/hourly were used as much

[04:27] <Alias_> At least, not on whatever distro I was using 6 years ago

[04:27] <puetzk> ingy: only in that most distros now supply a stock crontab that does run-parts on some dirts

[04:27] <puetzk> dirs

[04:28] <Alias_> yeah, I don't think cron itself has changed, just that the distro are provide default setups that are more friendly

[04:50] <ingy> someone tell thorbtwo that I added a Perl6::Bible->get_raw method for him

[04:51] <ingy> I think I will release Perl6-Bible immeditately after every pugs release

[04:51] <ingy> (if needed)

[04:54] <autrijus> did you include PDD and PA?

[05:00] <autrijus> that's parrot and pugs docs

[05:51] <crysflame> ingy: heh, cool

[05:51] <crysflame> 21:50 < ingy> someone tell thorbtwo that I added a Perl6::Bible->get_raw method for him

[05:51] <crysflame> theorbtwo: ping

[05:52] <crysflame> it's 22:52 my time

[05:54] *** tmoertel_ is now known as tmoertel

[06:07] <Daniel_Nee> Hi, Autrijus

[06:08] <gaal> morning all

[06:10] <Daniel_Nee> Cindy told me this morning, there're some e-mail attachments missing since the changes made on Monday, she would like us to get it solve this afternoon. 

[06:15] <theorbtwo> Pong.

[06:17] <theorbtwo> Mornin, all.

[06:20] <shapr> theorbtwo: greetings!

[06:21] <shapr> theorbtwo: Sadly, I spout that kind of random confusion so often no one believes me anymore.

[06:22] <shapr> Like, my name is Erisson, some people are beginning to notice the connection.

[06:26] <theorbtwo> Connection?

[06:26] <shapr> hail eris?

[06:28] <theorbtwo> Oh.

[06:29] <crysflame> theorbtwo: ingy message for you ping

[06:29] <theorbtwo> Pong.

[06:29] <theorbtwo> Saw it.

[06:29] <crysflame> :)

[06:36] *** castaway_ is now known as castaway

[06:38] *** mugwumptest is now known as mugwump

[07:01] <shapr> mugwump: Are you using a perl6 irc client now?

[07:01] <mugwump> no, should I be?  :)

[07:02] <shapr> just curious, I saw the mugwumptest

[07:02] <mugwump> ? does such a beat exist, I wonder

[07:02] <mugwump> *beast*

[07:03] <castaway> you could try porting irssi :)

[07:03] <shapr> I could wrap lambdabot/hircules into Pugs. That's kind of cheesy though.

[07:03] <mugwump> sure

[07:03] <mugwump> pugs -e 'eval_perl5("irssi.pl")'

[07:04] * shapr grins

[07:04] <castaway> cheat :)

[07:05] <mugwump> Actually a wrapper around the haskell curses library would probably go a long way to that sort of thing

[07:08] <crysflame> win 5

[07:08] * shapr places a bet on camel 6!

[07:10] * mugwump & # food

[07:15] <cls_bsd> camel6

[07:15] * theorbtwo notes that it's the camel 4th ed that will cover p6.

[07:16] <shapr> When castaway says you're her pal, is that actually short for palantir?

[07:17] * castaway doesnt recall ever having said that :)

[07:17] * castaway ruffles shapr.

[07:18] * shapr gets ruffled - http://www.scannedinavian.org/~shae/foto/need_haircut.jpg

[07:20] <castaway> iek, hairy monster :)

[07:21] <castaway> note to self: install sql navigator in a VM and suspend it (doesnt count evaluation days if still running ,)

[07:23] <theorbtwo> Mornin, meta.

[07:23] <metaperl> gm theorbtwo

[07:23] <metaperl> where does your name come from BTW?

[07:24] <theorbtwo> It was just "theorb", but there were too many of them, so I became "theorbtwo".

[07:25] <theorbtwo> "two" because everybody else at the time was postpending digits.

[07:26] * theorbtwo wonders why he keeps saying "postpending" instead of "appending".

[07:26] <shapr> postfixing?

[07:33] <theorbtwo> see also perlmonks.org/?node=theorbtwo's+name+space

[07:36] <Darren_Duncan> hello, anyone here?

[07:37] * shapr snores quietly

[07:37] <Darren_Duncan> quick question ...

[07:37] <Darren_Duncan> I'm starting to release my perl 6 modules on cpan, but I wanted to ...

[07:38] <Alias_> err... we can do that?

[07:38] <Darren_Duncan> say the right thing in my makefile.pl so that CPAN does not index parts of the distro, such as the perl 6 modules themselves, because there would be a name conflict with the perl 5 versions

[07:38] <Darren_Duncan> I noticed some distros say no_index or 'private' in their Meta.yml

[07:38] <Alias_> you need no_index entries in the METAL

[07:38] <Alias_> META

[07:39] <Darren_Duncan> and I'm wondering what to put in my makefile so that 'make dist' puts no_index in the Meta file?

[07:39] <Alias_> erm... not sure

[07:39] <Alias_> Module::Install does it for me

[07:39] <Darren_Duncan> I tried grepping Makemaker but nothing found

[07:39] <Alias_> are you doing modules with both P5 and P6 code? Or just P6 code?

[07:39] <wolverian> Darren_Duncan: I don't know if that's a good idea. 

[07:39] <Darren_Duncan> so how do distros that don't use Module::Install do it?

[07:40] <Alias_> by hand I imagine

[07:40] <wolverian> besides; http://freepan.org/modules.html

[07:40] <Darren_Duncan> the Makefile is pure perl 5

[07:40] <Alias_> Make the Meta file from scratch yourself and make sure makemaker doesn't overwrite it

[07:40] <Darren_Duncan> the modules themselves are pure perl 6

[07:40] <Alias_> umm... why are you putting them on CPAN then?

[07:40] <Darren_Duncan> essentially, I want to do for myself what Pugs used to do with its /modules directory

[07:40] <Alias_> if P6 doesn't support CPAN, and CPAN doesn't support P6

[07:41] <wolverian> currently the plan is to use FreePAN.

[07:41] <Darren_Duncan> this is meant to be a 'current state of things' snapshot

[07:41] <Alias_> I would suggest that at the moment it could only be a bad thing to release that way, via CPAN

[07:41] <Darren_Duncan> even if I used Freepan, I wanted to still have gzipped snapshots the old way on cpan also

[07:42] <Darren_Duncan> for now, I don't expect the perl 6 code to be executed ... think of these like documentation-only releases

[07:43] <Darren_Duncan> ...

[07:43] <metaperl> Locale::KeyedText works in p6 doesn't it?

[07:43] <Darren_Duncan> it requires object support

[07:44] <Darren_Duncan> afaik, it does not yet

[07:45] <Darren_Duncan> what I want is to have a distro channel that is like CPAN in that I can put my own gzips up there and they are listed, for Perl 6 stuff

[07:45] <Darren_Duncan> since Freepan is new, I don't want to put all my eggs in one basket, I prefer to maintain a copy both there and on the old CPAN

[07:47] <Darren_Duncan> my anticipated problem is because there are perl 5 and 6 modules with the same NAME pod in them, and the CPAN indexer can get confused unless I tell it to hide the perl 6 one; people would view it through the MAKEFILE link

[07:47] <Darren_Duncan> I like the backup capabilities that CPAN provides; put work up there and its mirrored world wide

[07:49] <Alias_> There is _so_ much potential for confusing the indexer, even with no_index on...

[07:49] <Alias_> There could be other things in there you aren't expecting

[07:50] <Alias_> version_from, for example

[07:50] <Alias_> or who knows what...

[07:50] <mugwump> Yes, please don't do that.  We'll have a mirror shortly.  The system is already on a mirrored box, and has nightly backups 

[07:51] <theorbtwo> jabbot: seen corion

[07:51] <jabbot> theorbtwo: I havn't seen corion , theorbtwo

[07:51] <Darren_Duncan> Okay, so say I keep the perl 6 stuff off cpan then ...

[07:51] <castaway> he was on PM just now

[07:51] <castaway> doesnt seem to join here til evenings

[07:52] <Darren_Duncan> does Freepan have the capacity for me to do this ...

[07:53] <Darren_Duncan> I want to upload 4 tgz distro-style files representing snapshots of my perl 6 modules at different points in time, with additional ones occasionally

[07:54] <Darren_Duncan> they are snapshots in the same way that traditional CPAn releases are snapshots of a developed product

[07:54] <mugwump> please, load them in as unpacked source files.  Set the property freepan:version in the root of the project to "tag" the version

[07:55] <mugwump> There is no difference between a tgz snapshot and one extracted from the source files which are exactly the same as that tarball's contents

[07:55] <mugwump> s/extracted/generated/

[07:55] <mugwump> That way, CPAN doesn't have to be so massive

[07:55] <Alias_> mugwump: space is cheap

[07:56] <mugwump> Recently Jesse Best tried loading all of backpan into a subversion repository (well, all the A's :) and it was smaller

[07:56] <mugwump> than the version on mini-capans

[07:57] <mugwump> space efficiency is good.  "disk is cheap" is IMHO always been an excuse for people "not tidying their room"

[07:57] <Alias_> My way is tons more space efficient for me

[07:57] <Alias_> None of these pesky LICENSE files lying around

[07:57] <Alias_> just one that gets put into the tarball before upload

[07:57] <Darren_Duncan> is there a requirement that all parts of a tag are aligned to a SVN release number?

[07:57] <Alias_> And a common MANIFEST.SKIP file

[07:57] <Alias_> oh, and only one 99_pod.t

[07:58] <Alias_> And did I mention that the release packager automatically checks newlines and POD and updates the copyrights and versions and writes the Changes file checks that every .pm file /t is indexed

[07:58] <Alias_> etc etc etc

[07:59] <Alias_> How am I supposed to maintain my obviously far more efficient method of storing modules, if you insist on unrolling everything

[07:59] * Alias_ bows

[07:59] <Darren_Duncan> eg, if I wanted to upload 4 versions of a ChangeLog, one at a time, each version being a 'newer release' of the last, can I then say that each of the first 3 uploads is tagged the same as how all the other files were as of several weeks ago?

[07:59] <Darren_Duncan> I want to make tags so it looks like the ChangeLog was there in the past

[08:00] <Darren_Duncan> so if a dist was made from a certain tag, it would include a 'so far in this distro' changelog

[08:00] <Darren_Duncan> the files I refer to contain more information than the commit comments

[08:00] <Darren_Duncan> so commit comments aren't s substitute

[08:01] <Darren_Duncan> the change log is summary style, like that released with the Pugs distro

[08:02] <mugwump> sure.  well, ideally you'd get it right the first time ;)

[08:02] <mugwump> but in lieu of that, I can suggest two options

[08:02] <mugwump> I can blaze your repository, and you can upload the revisions to it as you intended them to be

[08:03] <mugwump> or, we can decide that the "last" revision that has freepan:version set to a particular value is considered to be the release repository version

[08:04] <Darren_Duncan> alternately, I suppose I could write the ChangeLog file to summarize the past 3 and current 1 release, but the file itself only actually exists in the current 1 release

[08:04] <mugwump> or, maybe instead of using these tags, we can change things so that we use the "cheap copying" subversion trick, ie, have a standard layout of trunk/, /releases/, etc

[08:04] <Darren_Duncan> and I'll do the normal tagging for the first 3

[08:04] <mugwump> sure.  that sounds simplest.

[08:04] <Darren_Duncan> then you don't have to blaze anything

[08:04] <mugwump> :)

[08:05] <Darren_Duncan> I'll do that then ... tomorrow

[08:05] <Darren_Duncan> and while I'm at it, I'll add a readme and other such files

[08:06] <Darren_Duncan> FYI, the collected release 4, or separate LKT 4 + SRT 2, will match the CPAN perl 5 releases I did a couple days ago

[08:06] <Darren_Duncan> while Freepan has almost-current versions, they don't have a few bug fixes

[08:06] <Darren_Duncan> will fix that

[08:07] <Darren_Duncan> question ...

[08:07] <Darren_Duncan> does the Freepan web site contain any management utilities, such as for tagging, or do I need to use my 'svn' client program to do it?

[08:08] <Darren_Duncan> nevermind, I'll investigate it tomorrow

[08:08] <Darren_Duncan> good night

[08:08] <Darren_Duncan> and thanks for all your feedback

[08:08] <Darren_Duncan> now I know not to make some stupid mistakes

[08:11] <mugwump> Darren_Duncan: most of this 'crazy' property setting stuff will be something the freepan script does for you

[08:11] <Darren_Duncan> I'll learn it as I go along

[08:11] <mugwump> setting the password is the craziest one, it sends a digest of your password to the server in a property, then the server actually rejects the update with the message "password successfully changed"

[08:11] <Darren_Duncan> I actually haven't hooked my svn to freepan yet ... it last committed to the Pugs repository

[08:12] <mugwump> so that the digested password isn't extractable :)

[08:12] <jabbot> pugs - 1620 - Add some more lc and uc tests.

[08:12] <Darren_Duncan> Anyway, thanks to whom it concerns for Freepan ... it looks to be a valuable tool

[08:13] <mugwump> That's the idea ... remember any good ideas how it can be better will be gladly accepted on the wiki

[08:13] <Darren_Duncan> I'll have to learn where it is before I can suggest where it will go

[08:13] <mugwump> (discuss them here too, of course ;))

[08:13] <mugwump> wiki.freepan.org

[08:13] <Darren_Duncan> oy

[08:14] <Darren_Duncan> I note that that opening page seems to be full of broken image links

[08:15] <Darren_Duncan> a row of them by the search box

[08:15] <Darren_Duncan> only the tree in the corner shows up

[08:15] <Darren_Duncan> checking in another browser ...

[08:15] <mugwump> oh, sure.  yeah I see it

[08:16] <Darren_Duncan> the second browser (Firefox) shows text in the place of the images

[08:16] <Darren_Duncan> the one with the question marks for images is Safari

[08:17] <mugwump> Wow, safari doesn't even grok html 1.0

[08:17] <mugwump> that's impressive

[08:17] <mugwump> I thought alt tags were universally understood ... amazing

[08:17] <Darren_Duncan> it's supposed to be fully up to date

[08:18] <Darren_Duncan> maybe I'll report that as a bug

[08:18] <mugwump> I've got a better idea, bang your head against a brick wall

[08:18] <mugwump> it will probably result in more action ;)

[08:18] * mugwump is so cynical it hurts ...

[08:20] <Darren_Duncan> I love Wikis ... making it easy to make links that don't go anywhere

[08:21] <mugwump> yeah.  It sure makes it look like there's a lot of information, though

[08:23] <mugwump> Apache--  # stinking pile of shite, another crappy configuration snafu

[08:23] <Darren_Duncan> now, according to the Freepan wiki, it is supposed to be complementary to cpan

[08:24] <mugwump> sure

[08:24] <Darren_Duncan> freepan shows works in progress, and cpan is for packages tied up with string

[08:24] <Darren_Duncan> so while I plan to use freepan, what's the best way to distribute neat packages, today and in the future?

[08:24] <Darren_Duncan> made of perl 6 code

[08:25] <Darren_Duncan> or shall I not even try for the near future?

[08:26] <mugwump> Are you volunteering to write a little script to check out an SVN version and make a tarball?  :-)

[08:26] <Darren_Duncan> I don't know whether it already does that or not

[08:27] <Darren_Duncan> off topic - mugwump, what part of the world are you in?

[08:27] <mugwump> well, that's the plan as to how it will work.  It would have rules based on what the freepan:type of the module is that would look at MANIFEST & MANIFEST.SKIP to build the tarball

[08:27] <mugwump> Right now, Taipei

[08:27] <Darren_Duncan> so it's day over there

[08:28] <mugwump> Tomorrow I'm flying back to Wellington, New Zealand

[08:28] <Darren_Duncan> not too far away from where you are, relatively speaking

[08:28] <mugwump> where are you based?

[08:28] <Darren_Duncan> I'm based near Victoria, BC, Canada

[08:28] <Darren_Duncan> so it's 1:30am here

[08:29] <Darren_Duncan> anyway, good night

[08:29] <Darren_Duncan> for me

[08:30] <mugwump> night

[08:30] <Darren_Duncan> but good bye anyway

[08:30] <mugwump> 8:30pm NZ time now

[08:30] <Darren_Duncan> I hear ya

[08:30] <Darren_Duncan> and out ...

[08:42] * theorbtwo wonders why G is merged, instead of M.

[08:44] * castaway wonders what G and M are

[08:44] <scw> M -> modified

[08:45] <theorbtwo> http://scm.sipfoundry.org/svndoc/re28.html doesn't list modified.

[08:46] <scw> sure, M only appears at `svn st'

[08:46] <theorbtwo> Hm.

[08:52] <jabbot> pugs - 1621 - Fix "undefined" var error to "undeclared

[09:22] <jabbot> pugs - 1622 - * small cleanup on HTTP::Headers about t

[09:30] *** bsb is now known as bsb_

[09:30] <bsb_>  /msg nickserv link bsb bsb_

[09:31] *** bsb_ is now known as bsb

[10:10] <autrijus> rehi.

[10:15] <theorbtwo> Greetings, autrijus of the unreliable connection.

[10:15] <autrijus> greetings.

[10:15] <castaway> autrijus: You use SubEthaEdit, right?

[10:15] <autrijus> I'll prolly disconnect in another half hour or so

[10:16] <castaway> Can the client share documents, as well as the server side?

[10:16] <autrijus> doing buildworld/installworld now

[10:16] <autrijus> castaway: not sure what you mean.

[10:17] <castaway> the side that initiates the connection is the client, the other is the server. once the connection is there, does it matter who has the documents?

[10:17] <castaway> (hmm, TCMMMStatus both ways, so probably it doesnt)

[10:17] <autrijus> I do not think it does.

[10:17] * castaway nods

[10:19] <kungfuftr> moo

[10:22] <theorbtwo> Autrijus, have you tried the haskell module loading stuff with my newest changes?  I'm not sure where to go from here.

[10:23] <autrijus> theorbtwo: I had not. maybe you need to load dependency packages?

[10:23] <autrijus> I'll take a look after dinner

[10:23] <autrijus> <- freshly off $work

[10:23] <theorbtwo> Nod.

[10:23] <castaway> lucky for some :)

[10:24] <autrijus> using perl6 and haskell at $work usually means easy and fast debugging :)

[10:24] <theorbtwo> Hm, I did disable some of the hardcoded loading you did, but I tried pairing SHA1 down to the point where it was pretty much nothing, and still got missing symbols.

[10:24] <theorbtwo> And those symbols are present in objdump --syms ./pugs.

[10:24] <clkao> another perl5 bug hit me today

[10:24] <autrijus> you'd need to load libHSbase again and explicitly (I think)

[10:25] <autrijus> theorbtwo: have you traced the example in DynamicLoader

[10:25] <autrijus> ?

[10:25] <autrijus> clkao: mm?

[10:25] <clkao> some nasty rebless / overload crap

[10:25] * castaway decides its lunchbreak time

[10:25] <theorbtwo> Hm, I haven't, autrijus.

[11:35] <ingy> hi theorbtwo 

[11:36] <theorbtwo> IT WORKS!

[11:36] <ingy> ?

[11:36] <theorbtwo> I HAVE MADE FIRE^W^W LOADED ["sha1"]!

[11:36] <ingy> yow!

[11:36] <gaal> theorbtwo++

[11:37] <ingy> theorbtwo++

[11:37] <theorbtwo> Of course, I still need a few bits and pieces, because I did this in no small part by commenting out most of SHA1__0_0_1.hs.

[11:37] <castaway> wow, grats love!

[11:37] <theorbtwo> But I think I know what many of them are.

[11:38] <theorbtwo> ingy, saw you added the method I wanted to P6::Bible, thanks, I haven't yet fixed categorize_tests to use it, though.

[11:38] <ingy> theorbtwo: I made your bible request patch fyi

[11:38] <ingy> ah

[12:11] <shapr> w00h00

[12:11] <kungfuftr> ingy: is there an faq somewhere about uploading to freepan, etc?

[12:12] * castaway looks at shapr.

[12:20] <mugwump> kungfuftr: point SVN at http://tpe.freepan.org/repos/kungfuftr/

[12:21] <kungfuftr> ah... i sees

[12:23] <Limbic_Region> not sure if gugod mentioned this previously http://wagner.elixus.org/~gugod/pugs.png but I saw the link in use.perl and found it interesting

[12:23] <shapr> churn == rate of change?

[12:24] <shapr> ah I see

[12:24] <shapr> that would be neat to include with the smoke-test.

[12:24] <mugwump> big spikes by the .po file updates

[12:24] <shapr> Is there a smoke-test churn graph?

[12:25] <Limbic_Region> shapr, in the absense of gugod - you can read the journal entry http://use.perl.org/~gugod/journal/24047

[12:26] <castaway> hawo nm

[12:27] <shapr> castaway: I thought that was mandarin at first, nyehowma

[12:27] <nothingmuch> HOLA

[12:27] <nothingmuch> caps, aah!

[12:28] <shapr> ¿como est as?

[12:28] <mugwump> Â¿utf-8?

[12:29] <castaway> na, just written-as-spoken

[12:32] <kungfuftr> theorbtwo: hhhmmm... you know if anyones made any motions towards modularising the testgraph/smoke/harness stuff?

[12:37] <nothingmuch> kungfuftr: i've pondered about it

[12:37] <nothingmuch> and given some free time i will

[12:37] * nothingmuch is too busy to do anything but lurk

[12:38] * kungfuftr is tempted

[12:38] <nothingmuch> please do

[12:38] <nothingmuch> what we need to do:

[12:39] <mugwump> 1. take action, not plan

[12:39] <nothingmuch> std TAP to allow always reporting of CALLER::CALLER etc

[12:39] <nothingmuch> mugwump: in theory

[12:39] <mugwump> :-)

[12:39] <mugwump> 2. write tests

[12:39] <nothingmuch> 2. make the backlinking a bit less hardcody

[12:40] <nothingmuch> 3. factor yaml harness format:

[12:40] <nothingmuch> { smoker => { id stuff }, report => { structure } }

[12:40] <nothingmuch> with a more solid, hierarchal namespace

[12:41] * kungfuftr is currently seperating out his churn melarky

[12:42] <nothingmuch> kungfuftr: try to generalize so that yaml harness could make sense for replacing Test::Reporter's guts

[12:43] <kungfuftr> nothingmuch: huh?

[12:43] <kungfuftr> ah right... hhhmmm...

[12:43] <nothingmuch> it needs to be reusablwe

[12:43] <nothingmuch> it should be valid for modules too

[12:43] <nothingmuch> right now it's too pugs specific

[12:43] <nothingmuch> and "real" releases as well as multi VCS revision info

[12:44] <nothingmuch> even wacky stuff such as darcs context

[12:44] <nothingmuch> ofcourse, you don't have to do all that

[12:44] <nothingmuch> i'm just listing things I foresaw as troubler

[12:44] <nothingmuch> testgraph needs a bit of a cleanup IMHO

[12:44] <nothingmuch> syntax wise

[12:44] <nothingmuch> it's a bit too scriptish for what it does, methinks

[12:45] <kungfuftr> nothingmuch: shush!

[12:45] <kungfuftr> =0P

[12:46] <nothingmuch> another thing is it needs to have a generic way of doing stuff

[12:46] <nothingmuch> like:

[12:46] <nothingmuch> linking to doc: sprintf like format? callback?

[12:46] <nothingmuch> consolidating results: should it know a consolidated result format?

[12:46] <nothingmuch> what does consolidating mean?

[12:46] <nothingmuch> i'd like to be able to merge together reports per platform, per revision, per ....

[12:47] <nothingmuch> and see yellow where things don't exactly match

[12:47] <castaway> ,)

[12:47] <kungfuftr> nothingmuch: yeah, that'd need a central repository though

[12:47] <nothingmuch> kungfuftr: nono

[12:47] <nothingmuch> make the input valid as consolidated

[12:47] <nothingmuch> or standalone

[12:47] <kungfuftr> ah, i see

[12:48] * kungfuftr shall have a looky later

[12:48] <nothingmuch> that is, the yaml harness format should know to represent both cases

[12:48] <nothingmuch> and then we can whip up a script to merge the results

[12:58] * gaal reappears

[12:58] <gaal> the yaml harness isn't *too* pugs specific

[13:00] <gaal> we might consider making Test.pm use a more programmatic-friendly output format instead of TAP when it knows the yaml harness is running it

[13:00] *** Sebastian is now known as caveman

[13:00] <theorbtwo> I don't think any of it is terribly pugs-specific.

[13:00] <theorbtwo> The most pugs-specific bit I can think of is the bit that gets the POD, given the first half of a link.

[13:01] <gaal> it needs to factor out the source control revision detection stuff

[13:06] *** caveman is now known as jsbach

[13:07] * kungfuftr wonders if there is a nice way to build up a nice UUID on a "per host-per user" way

[13:24] <theorbtwo> kungfuftr: Generate a UUID, and save it.

[13:29] <mugwump> ]][[gg\\hh]]hh

[13:34] <theorbtwo> Hm, I now have SHA1 fully loading from the External.Haskell point of view, at least, but I'm not sure it's working.

[13:34] <theorbtwo> Also, the way I did it is horribly horribly hackish.

[13:35] <theorbtwo> ...and, finally, I'm not sure it's working within Externals.

[13:38] * mugwump loses another 10 minutes of his life because Linux sux

[13:40] <kungfuftr> theorbtwo: yeah, would be nice to be able to generate the same ID if you lost it, etc.

[13:52] * kungfuftr also thinks about serialising with Storable as an option (at least for local usage)

[13:54] <mugwump> yaml!

[13:54] * mugwump apologises for that possibly redundant outburst, and blames turett's syndrome

[13:55] *** stevan changes topic to: pugscode.org <<Overview Journal Logs>> | You have safely opened the door to many Perl 6 hackers. | pugs.kwiki.org | smoke: http://xrl.us/fmw2 | Mac OS X r1622 (451/4159) | Win2k r1600 (437/4135)

[13:56] <stevan> so mugwump have you read much William S. Burroughs? or just Naked Lunch?

[13:58] <mugwump> I haven't read his life works or anything like that

[13:59] <mugwump> In fact only two of his books :)

[13:59] <stevan> neither have I, I prefer the earlier stuff

[13:59] <stevan> which books?

[13:59] <mugwump> Junky and TNL

[13:59] <stevan> good ones :)

[13:59] <mugwump> I really like his spoken word albums though

[14:00] <stevan> I have this great book of his art,.. some really cool stuff "painted" with a shotgun

[14:00] <mugwump> And I once saw a play called "Word Virus", by a local group of students ... covered the whole 50s counterculture scene

[14:00] <stevan> I tried reading The Lost Boys, but it gets a little too much into his fetishes

[14:00] <mugwump> heh, him and boys huh

[14:00] <stevan> LOL, yes

[14:01] * theorbtwo is unsure where to go from here with the loading stuff, other then to move to hsplugins.

[14:01] <theorbtwo> The problem is that the .o files we're trying to load don't carry their own dependency information.

[14:01] <stevan> I actually read a really good biography of him as well,.. I borrowed it from a friend so I dont recall the title offhand

[14:01] <stevan> he was a very interesting character

[14:02] <mugwump> Red cover?  fairly thick, 400-=600 pages or so?

[14:02] <stevan> mugwump: honestly I dont recall the cover, but it was about that many pages

[14:02] <mugwump> Perhaps that was "Word Virus" :).  I've got that, but have so far been too lazy to read it

[14:03] <mugwump> Pretty sad, really, considering my nick

[14:03] * mugwump shrugs and sips some coloured translucent fluid from a tall glass cup with a straw

[14:03] <stevan> I always enjoy reading bios of authors, it gives such insight into their work

[14:03] <mugwump> Yeah ... I'm really enjoying Hunter S. Thompson's final work

[14:04] * stevan spreads some almond-flavored hash butter onto his toast

[14:04] <kungfuftr> *cough* Storable!

[14:04] <stevan> mugwump: Curse of Lono is one of my all time favorite books

[14:04] <theorbtwo> *cough* Ramen!

[14:04] <stevan> HST is a friggin nutcase :)

[14:04] <stevan> Fear and Loathing is a classic as well

[14:04] <kungfuftr> hhhmmm... ramen... *drool*#

[14:04] <stevan> the movie was excellent

[14:04] * kungfuftr misses his yakiniku

[14:06] <mugwump> I watched a documentary on Johnny Depp, and it didn't even mention FaLiLV

[14:06] <stevan> mugwump: odd, that was one of his best roles (IMHO of course)

[14:06] <mugwump> nor the time Johnny spent in Grenada or wherever it was

[14:07] <stevan> mugwump: you ever read Phillip K Dick?

[14:07] <mugwump> not much

[14:08] <stevan> his later work can get as strange as Burroughs at times (but with less *ahem* boys)

[14:09] <rgs> valis ?

[14:09] <stevan> rgs: valis is a great book

[14:09] <rgs> I've read "divine invasion" on sunday

[14:09] <stevan> rgs: nice

[14:10] <stevan> Flow my Tears the Policeman Said, and Three Stigmata of Palmer Eldridtch are my other two favorite PKD

[14:11] <stevan> he is good to help un-twist your brain after a day of brain-twisting programming

[14:12] <rgs> I concur

[14:12] * stevan considers a READINGLIST file to go along with the VICTUALS

[14:13] <autrijus> go ahead and add it :D

[14:13] <stevan> :)

[14:14] * obra wonders if these should be kwidfiles that get installed

[14:14] <obra> perldoc Pugs::ReadingList

[14:14] <obra> perldoc Pugs::Victuals

[14:18] <autrijus> argggh no :p

[14:18] <stevan> I think we got rid of the Pugs:: namespace too

[14:19] <theorbtwo> Hm?  Pugs:: sounds like a good namespace for things that are Pugs-specific, and not p6-general, like the PA series.

[14:19] <obra> whatever namespace.

[14:19] <obra> I just meant "Are these things useful enough to be part of the installed distribution?"

[14:20] <autrijus> not thinking so. certainly not Victuals.

[14:20] <autrijus> probably not readlinglist :)

[14:21] <castaway> "use"ful? :)

[14:21] <theorbtwo> Well, readinglist is what's suggested to read if you want to learn how to hack pugs, no?  In that case, people who are reading it would want the source anyway.

[14:22] <obra> that was my assumption. but if it's paired with victuals, perhaps it's a list of "what should I read to have my mind warped?"

[14:22] <stevan> theorbtwo: not really, I was thinking a more general list, not just programming books

[14:22] <jabbot> pugs - 1623 - adding documentation and more @INC paths

[14:22] <stevan> obra: yes, thats what I am thinking,.. mind warping and such

[14:22] <obra> ah. then yeah, I withdraw the suggestion

[14:22] <stevan> however I think those who are so inclined will dig through and find it

[14:23] <theorbtwo> Oh, shouldn't be installed if it's got nothing to do with what people are installing pugs for.

[14:24] <stevan> autrijus: what is the current Haskell book recommendation?

[14:24] <autrijus> stevan: Algorithms, School of Expressions, Craft, in that order

[14:24] <stevan> ok

[14:25] <theorbtwo> What would be a good intro to Haskell for mathematicians with a little programming experince?

[14:25] <kungfuftr> hhhmmm... a more sane @INC... now that would be lovely

[14:25] <mugwump> theorbtwo: I'm really liking _Two Dozen Short lessons in Haskell_

[14:26] <mugwump> I was a mathematician before a programmer

[14:27] * castaway wonders which mathematician theorbtwo is referring to

[14:27] <theorbtwo> My sister.

[14:27] <osfameron> castaway++

[14:27] <castaway> hmm, osfameron  ?

[14:27] <castaway> ah

[14:28] <stevan> I can't find the Algorithms book? What is the full name?

[14:28] <autrijus> Algorithms : A Functional Programming Approach (International Computer Science Series) [Paperback]

[14:28] <autrijus> By: Fethi A. Rabhi, Guy Lapalme

[14:28] <stevan> autrijus: thanks

[14:30] <stevan> I think Higher Order Perl should go on the list (although my copy has not yet arrived)

[14:30] <autrijus> well, if anything, it will teach you on how bad perl5 is to write complex code ;)

[14:30] <stevan> :)

[14:31] <Khisanth> stevan: where did you order it from? I trying to find a site that doesn't require you to create an account with them just to order a book :/

[14:31] <stevan> Khisanth: bookpool, but you have to create an account there

[14:32] <castaway> how else do you want to order it? *wonder*

[14:32] <Khisanth> gah, I hate online retailers

[14:32] * mugwump will be ordering a copy of the brick when he returns to NZ

[14:32] <Khisanth> castaway: I don't know, they take my money and send me the book? :)

[14:32] <autrijus> I wonder if the file should be called READTHEM

[14:32] <castaway> yeah, but how do they know where to? and how did you want to check on your order, without an accont?

[14:33] <castaway> anyway, just find one that you can also call, and voila, problem solved

[14:33] <Khisanth> bleh they would probably want me to register over the phone

[14:33] <castaway> would be odd

[14:34] <autrijus> mugwump: I heard you've added a passage from Dao De Jing to your module docs. what is that? :)

[14:34] <Khisanth> so is requiring an account in the first place! :p

[14:35] <mugwump> my, word travels fast, I haven't even saved the buffer yet

[14:35] <Khisanth> castaway: checking your order is one of those nice to have things, not a MUST have

[14:35] <mugwump> It's a very tongue-in-cheek bit for Perldoc::Parser::XML

[14:36] <castaway> all this paranoia

[14:37] <stevan> autrijus: The Silmarillion of course

[14:37] * shapr thinks castaway is stalking him

[14:37] <castaway> meeee?

[14:37] <theorbtwo> No, shapr, she's stalking me.

[14:37] <autrijus> stevan: *blink*

[14:37] <shapr> Oh, you get to be paranoid then. Lucky you!

[14:37] <theorbtwo> No, I just trust her.

[14:38] <stevan> autrijus: I assume one blink is yes, two blinks is no 

[14:38] * castaway smiles

[14:38] <shapr> mugwump: Is that the Brick Book?

[14:40] <mugwump> none other!

[14:41] <autrijus> and Brick part II as well

[14:41] <autrijus> I hope

[14:41] <shapr> I still haven't got that one.

[14:42] * castaway smooches theorbtwo. :)

[14:42] <shapr> I really want to read about region allocation. Did you see the recent connection between pi-calculus and region allocation on LtU? Fascinating stuff.

[14:42] <shapr> Makes me wonder if there's a more general computational shape theory floating around out there.

[14:42] <autrijus> I've read about it. sadly, without practical application, my understanding stays shallow

[14:42] <autrijus> <- must connect theory to practice to understand anything

[14:43] <shapr> It's vaguely possible that connection could allow formal descriptions of an algorithm to be automatically parallelized.

[14:43] * theorbtwo wonders -- brick book?

[14:43] <theorbtwo> I know the BOLTs, but BRICK?

[14:44] <autrijus> theorbtwo: http://www.cis.upenn.edu/~bcpierce/tapl/ -- the book that inspired pugs

[14:44] <autrijus> or, in other words, pugs wouldn't have been started if not for this book (and lots of caffeine)

[14:44] <shapr> heh

[14:44] <theorbtwo> Ah.

[14:44] <stevan> autrijus: that is on the list too :)

[14:45] <theorbtwo> I was trying to think of a Tolkien book that'd be called the brick book, and failing.

[14:46] <autrijus> "Beowulf"

[14:46] <cognominal> autrijus: the followup on TAPL is just a compilation of papers available from the net or is it more than that?

[14:46] <autrijus> cognominal: it is blessed with pierce's superior editorship.

[14:47] <autrijus> some chapters are available on the net, some are not.

[14:47] <autrijus> the point though is that the chapters flowed with a coherent narrative.

[14:47] <cognominal> it is [retty expensive to I wanted to know if it was worth to buy it

[14:47] <autrijus> well, if you can only buy one, buy TaPL of course

[14:47] <autrijus> and scour the net for ATTaPL chapters

[14:48] <cognominal> I got TAPL

[14:48] <cognominal> and got some papers from ATTaPL

[14:48] <cognominal> I have to read for months

[14:48] * shapr grins

[14:49] <cognominal> I am happy that pugs translated that in something concrete for me

[14:49] <shapr> At least you'll be able to buy the T-Shirt - http://www.cafepress.com/skicalc

[14:50] <cognominal> and the knowledge will suffuse into me?

[14:50] <autrijus> mmm, JRR's beowulf is 461 pages

[14:50] <autrijus> so probably worth calling it a brick book too: http://www.amazon.com/exec/obidos/tg/detail/-/0866982906/

[14:51] <Limbic_Region> autrijus - did you see http://wagner.elixus.org/~gugod/pugs.png ?

[14:51] <autrijus> oh hrm. no, that's the critics

[14:51] <autrijus> the translation of JRR's is still in the works

[14:51] <autrijus> why yes, I did; in fact I asked him to write SVK::Churn :)

[14:51] <autrijus> so I can put graphs into my talk.

[14:51] <autrijus> I did that... I think an hour before my talk

[14:51] <shapr> Here's the back of the shirt in greater detail: http://www.scannedinavian.org/~shae/HM-t-shirt.png

[14:52] <autrijus> shapr: ah. wonderful.

[14:52] <jabbot> pugs - 1624 - adding READTHEM file (everybody add your

[14:52] <autrijus> I believe that's the first page I found about haskell wiki

[14:52] <shapr> QuotesPage?

[14:53] <autrijus> by googling for ken shan (an old friend of mine)

[14:53] <shapr> ah neat

[14:54] * theorbtwo sniffs as he finds that he isn't quoted on the QuotesPage at all.

[14:55] <shapr> theorbtwo: you're on my personal QuotesPage though.

[14:58] <castaway> and thats better! :)

[14:58] <shapr> right!

[14:59] <shapr> Is there a collection of perl quotes somewhere?

[15:00] <theorbtwo> fortune -m '\bperl\b' | wc #     226    1483    9039

[15:00] <cognominal> shapr: http://www.cmpe.boun.edu.tr/~kosar/other/lwall.html

[15:01] <cognominal> http://en.wikiquote.org/wiki/Larry_Wall too

[15:02] <jabbot> pugs - 1625 - whoops, didnt mean to commit that yet

[15:34] <Limbic_Region> autrijus - you about?

[15:35] <mugwump> Right - I'd better get to bed, it's 3:35am in my home time zone

[15:36] <Unamuno> hey... just an innocent question and I don't mean to start a flamewar... what's the current status of perl6? I read on the site that 6.0.0 is supposed to be done third quarter 2005. does anyone believe that?

[15:37] <Limbic_Region> Unamuno - that statement had a disclaimer - that funding was raised

[15:38] <Limbic_Region> in reality, Pugs has been delivering p6 since the 2005-02-01

[15:38] <Limbic_Region> of course it isn't feature complete and in all likely hood, won't be the final implementation - but it is real right now

[15:38] <Unamuno> hmmm I see

[15:39] <Unamuno> so it's more functional than other implementations at the moment?

[15:39] <Limbic_Region> there are no other implementations ATM

[15:39] <Limbic_Region> PGE and Larry's work on a p5 to p6 translator are probably the only other work being done

[15:40] <Unamuno> hrm. ok. I thought work on parrot was ongoing

[15:40] <Limbic_Region> do keep in mind though that Parrot is the VM that p6 will run on and it is quite advanced

[15:40] <Limbic_Region> Parrot ne Perl6

[15:40] <mugwump> (and pugs can compile to now, with limitations)

[15:40] <Unamuno> well, I know that

[15:40] <Limbic_Region> unlike p5, the VM will be a completely part of the language

[15:41] <Limbic_Region> and unlike p5, the regex engine won't be 

[15:41] <Unamuno> but I'm not clear on how much work will be necessary on perl6 itself beyond parrot

[15:41] <Limbic_Region> s/part/apart/

[15:41] <kungfuftr> yay

[15:41] <Limbic_Region> well - there are more subject matter experts around then you can shake a stick at - I am not one of them

[15:41] <Unamuno> and pugs has no connection with parrot, then?

[15:41] <mugwump> pugs can compile to parrot bytecode

[15:41] <Limbic_Region> Unamuno - Parrot is one of the backends that Pugs targets

[15:42] <Limbic_Region> when Parrot isn't available it can still be run through Haskell

[15:42] <Limbic_Region> on that note, me needs food

[15:42] <Unamuno> hmm ok.

[15:42] <Unamuno> well thanks for the info :)

[15:42] * mugwump & # really going this time :)

[15:42] <PerlJam> Unamuno: pmichaud is working on PGE which will be used to bootstrap "the" perl6 compiler.

[15:43] <PerlJam> Unamuno: pmichaud is the perl6-compiler pumpking and the one who said 3Q 2005

[15:43] <PerlJam> I believe he can do it.

[15:43] <PerlJam> And if he can't, well, there's always pugs :-)

[15:43] <Unamuno> hmm I see, ok.

[15:44] <PerlJam> (personally I think that there's a better chance of succeeding faster if we get pugs to grok perl6 rules and then use pugs to bootstrap)

[15:54] <Unamuno> you know... I saw a link to ruby on rails the other day and it made me start pondering ruby. but it's been extremely frustrating -- very poor documentation, and basically no utf8 or unicode support whatsoever, with no signs of it arriving anytime soon.

[15:55] <PerlJam> Unamuno: yep, that's the same impression of ruby I've had since I first tried it a few years ago.

[15:55] <Khisanth> and it's STILL the same impression people are getting?

[15:55] <PerlJam> apparently.

[15:55] <Khisanth> so why are there complaining about the progress of perl6 again? :)

[15:56] <integral> Perl isn't much better, it seems every time SVK is mentioned people say "but it's written in Perl"

[15:56] <Unamuno> and unicode is essential for what I'm doing. no room for quibbling. I need stuff like Unicode::Normalization, as well as the ability to split by characters, and convert chars to codepoint numbers and back. none of that is possible in ruby -- almost boggles the imagination

[15:56] <PerlJam> I'll never forget my first ruby experience.  Every single error was "syntax error".   That's it.  No other useful information.  

[15:56] <Khisanth> people keep pointing to things as being better but in end they aren't really better

[15:57] <ninereasons> autrijus, ping

[15:57] <Unamuno> what mostly frustrates me about perl lately is two things: reference/dereference is rather ugly and can be hard to write cleanly, and "real" classes/structs don't exist. of course I'm not sure _how_ "real" I want them to be, but a bit realer than they are now ;)

[15:57] <Odin-> PerlJam: Didn't they change the 'official' plan to use pugs?

[15:58] <PerlJam> Unamuno: perl6 fixes those, so get on board and start helping!  ;-)

[15:58] <Unamuno> PerlJam: I know, that's why I was asking about it :P

[15:58] <PerlJam> Odin-: Not to my knowledge.

[15:58] <Odin-> Hm. Pugs directed at Parrot, using PGE ... so as not to duplicate (too much) effort?

[15:58] <Khisanth> but do you really have to be stuck with an image of what a "real" struct or class is?

[15:59] <Odin-> PerlJam: Hm. Okay. :/

[15:59] <PerlJam> Odin-: It wouldn't surprise me though.  Once PGE is functional, we could just hook it into pugs and bootstrap that way without coming up with anything fancier.

[15:59] <Odin-> Exactly...

[15:59] <Unamuno> Khisanth: all I want, really, is to be able to separate public from private, and to explicitly declare a sub as belonging to a class (so it knows its $self automatically)

[16:00] <PerlJam> The key thing is being able to parser grammars and "execute" then and be able to modify the grammar on-the-fly

[16:00] <PerlJam> s/parser/parse/

[16:00] <Khisanth> basically something to save the programmer from him/herself :)

[16:01] <Khisanth> and other people they are working with

[16:01] <Unamuno> ruby has very good and interesting support for objects -- but it takes it a bit too far, in my opinion.

[16:01] <Unamuno> for example, I find it very strange that you can do things like 3.plus(2)

[16:01] <PerlJam> Unamuno: heh ... perl6 will do that too

[16:02] <Unamuno> noooo :P

[16:02] <PerlJam> well, something similar, not that exact thing.

[16:02] <integral> it's more like (3, 2).plus in p6

[16:03] <PerlJam> Unamuno: what problem do you have with that?  It seems like a natural thing to do in a first-class object oriented language.

[16:03] <Unamuno> and python is just.... ummm.... I dunno what. I find the community to be very centrally controlled and the opposite of perl (there's only one way to do it)

[16:03] <PerlJam> (python and ruby and perl are all headed towards being first-class)

[16:04] <shapr> Haskell is a lovely scripting language =)

[16:04] <autrijus> (3,2).infix:<+>;

[16:04] <Unamuno> PerlJam: well, of course. the question is whether such languages really make sense in the end. I'm not totally sure on that yet. in many respects I don't mind "everything is an object", but some attention needs to be given to problems that are solved best other ways, and it's annoying when it becomes impossible to do so.

[16:04] <Odin-> I've said it before, but to me it looks like Perl is really getting to be like a sort of "lisp with syntax"...

[16:04] <integral> shapr: ugg.   so *slow* to compile though ;-)

[16:05] <autrijus> Odin-: Ruby is totally that already

[16:05] <autrijus> integral: hugs :D

[16:05] <ninereasons> autrijus, what have you done that's caused the compile times to drop so radically?

[16:05] <PerlJam> Odin-: Isn't that haskell? ;)

[16:05] <shapr> integral: I use hs-plugins for compilation.

[16:05] <autrijus> ninereasons: I don't know; dropping 6.2 support and taking -O off Parser.hs

[16:05] <integral> oooh, more things to read =)

[16:05] <Odin-> PerlJam: Dunno. Maybe. Don't have time to get into it, I'm already waaaaay behind in my school stuff. :(

[16:06] <ninereasons> I've gone from 188m to 25m on my slowest machine.

[16:06] <shapr> 25minutes!

[16:06] <autrijus> that sounds like a good improvement.

[16:06] <ninereasons> 8m on my fastest machine - optimized!

[16:06] <PerlJam> Hmm.  Maybe I should try compiling pugs on my laptop again.

[16:06] <theorbtwo> autrijus: The more I look at it, the more I'm thinking that DynamicLoader isn't going to work and hs-plugins is the way to go.

[16:07] <Khisanth> Unamuno: just because a language allows you to do something doesn't mean you have to ...

[16:07] <Unamuno> Khisanth: yes, but if a language doesn't allow you to do something, that means you can't :P

[16:07] <theorbtwo> DynamicLoader doesn't use the .hi info, so we have to do all the dependency tracking yourself.

[16:07] <autrijus> theorbtwo: okay. sorry for sending you on the chase

[16:07] <theorbtwo> It's OK; I learned from it.

[16:07] <autrijus> hrm, does NamedLoader not do .hi parsing?

[16:07] <Khisanth> Unamuno: no it just means you have to implement it yourself

[16:08] <autrijus> I vaguely remembered it did.

[16:08] <autrijus> but if it does not, then totally drop it

[16:08] <theorbtwo> The paper talks about it, but I don't see any code for it.

[16:08] <autrijus> and switch to hs-plugins

[16:08] <autrijus> right. I havn't been reading the code.

[16:08] <PerlJam> Hmm.  pugs compiles in 48s on my box.  /me trys to gauge how slow ninereasons boxes are.

[16:08] <Unamuno> Khisanth: it depends what you're talking about. say I want to write a short ruby script where I call a function that's defined later in the document. how do I "implement that myself"?

[16:08] <Khisanth> Unamuno: and you were complaining that Ruby allows you to use 3.plus(2), not that it doesn't allow you to use it :)

[16:09] <integral> memory seems a big factor too, PJ

[16:09] <autrijus> oh. right. I dropped -H200m.

[16:09] <autrijus> so if your machine has <200m of memory

[16:09] <autrijus> then that's going to help a lot.

[16:09] <PerlJam> < 200m free you mean?

[16:10] <autrijus> right. well if you have <200m physical, then that would made pugs impossile to compile

[16:10] <autrijus> or at least a certain adam preble reported such

[16:10] <integral> s/physical/physical + swap/

[16:10] <PerlJam> I think my laptop only has 256

[16:10] <PerlJam> that would explain why it took so long when I tried it before

[16:10] <autrijus> nod.

[16:10] <autrijus> sorry for that. :)

[16:10] <Unamuno> Khisanth: well, no, my point was that the main focus in ruby is on "everything is an object" and so in reality 3+2 is just syntactic sugar. now, that one is so obvious that they made a way to do 3+2 as well as 3.plus(2), but I just get the feeling many other cases have been ignored, where doing things in a more function-oriented way make sense

[16:10] <autrijus> but I did not know -H0 at that time.

[16:11] <autrijus> now it's -H0, and it seems everyone is happy

[16:11] <ninereasons> PerlJam, they're older machines; but they compile in comparable times to yours if I don't say "make optimized"

[16:11] <integral> there's also ST-72's fun of 3 + 2 ==> (3).send('+', 2);

[16:12] <Unamuno> Khisanth: it's not my fault that you interpreted my unclear ramblings incorrectly :P

[16:12] <autrijus> <math:plus><arguments><argument><math:literal>3</math:literal></argument><argument><math:literal>2</math:literal></argument></arguments></math:plus>

[16:12] <shapr> I didn't get much use from the second cpu - "make -j3  83.93s user 2.81s system 90% cpu 1:35.86 total"

[16:12] <Unamuno> autrijus: ahhh bliss, where would we be without xml ;)

[16:12] <autrijus> shapr: dons suggested ghc -M before

[16:12] <shapr> ah, good idea

[16:12] <integral> <tag name="plus" ns="math"><tag name="arguments"><tag name="argument">...

[16:12] <PerlJam> -M ?

[16:13] <Khisanth> Unamuno: a much better place! isn't that obvious? :p

[16:13] <shapr> dumps dependencies into the makefile, I think

[16:13] <autrijus> shapr: however I'm out of tuits to do that as it's not a showstopper

[16:14] <autrijus> so, helps welcome, but otherwise won't make to 6.2.0

[16:14] <shapr> yeah, I dig

[16:14] <shapr> I doubt there are a bunch of SMP pugs users.

[16:14] <shapr> Btw, when's 6.2.0 going out?

[16:15] <Unamuno> Khisanth: hehe... I was looking up xml shorthand formats the other day. I guess I don't understand tabs are evil, linebreaks are evil, etc... I suppose it depends on what you're encoding the xml for. but for my purposes it's just way too verbose.

[16:15] <Unamuno> and for many others, as evidenced by the dozens of shorthand proposals

[16:15] <shapr> If 6.2.0 is going out in the next day or two, I think I saw a bunch of simple builtins I could write in a few hours.

[16:16] <obra> casey!

[16:16] <obra> have you ported all of Email:: to p6 yet?

[16:16] <Khisanth> Unamuno: it's ok as long as you aren't writing it :)

[16:16] <shapr> kungfuftr: css is gone on smoke.

[16:16] <autrijus> shapr: go go go  :)

[16:17] <autrijus> 6.2.0 is due this sunday.

[16:17] <autrijus> or monday morning.

[16:17] <autrijus> but that's my time, so it's sunday for almost all of you :)

[16:18] <shapr> Cool, I'll be polite and let others have a crack at simple builtins for a another few hours, after that it's open season.

[16:18] <PerlJam> shapr: which simple builtins are you talking about specificly?

[16:19] <PerlJam> Corion was working on sleep yesterday for instance.

[16:19] <autrijus> don't be polite. polite is not a virtue around here. just speak your mind on the channel and feel the anarchy :D

[16:19] * obra giggles

[16:20] <theorbtwo> shapr: Mind giving me a hand with hs-plugins?  It doesn't want to build for me.

[16:20] <Unamuno> sorry, this is 6.2.0 of what?

[16:20] * cognominal discovers where autrijus got his pugs graphic roadmap

[16:20] <PerlJam> Unamuno: pugs

[16:20] <theorbtwo> pugs.

[16:20] <Unamuno> ahh ok. kinda confusing considering it's not even perl 6 yet :)

[16:20] <shapr> theorbtwo: for the best of hs-plugins you need the latest nightly from ftp

[16:20] <autrijus> cognominal: yup. I added a link at first on http://haskell.org/hawiki/AutrijusTang

[16:20] <autrijus> i.e. http://research.microsoft.com/Users/simonpj/papers/haskell-retrospective/HaskellRetrospective-2.pdf

[16:21] <theorbtwo> It is perl6.  It's not completed perl6.

[16:21] <autrijus> but that link is a bit long, so I didn't add it to the png itself

[16:21] <shapr> It's a brilliant and complimentary parody of the hairshirt retrospective.

[16:21] <autrijus> Unamuno: yeah, but imagine the confusion if I called it 5.0.0

[16:21] <Unamuno> theorbtwo: right, but not completed versions of a project generally don't have version numbers higher than completed ones. that's all I meant.

[16:21] <shapr> PerlJam: last I looked, several of the missing builtins were simple wrappers around the equivalent Haskell functions.

[16:22] <autrijus> now I can also call it 0.0.1 ... but I was high on caffeine and that looked no fun. sorry for my indulgence :)

[16:22] <Unamuno> hehe

[16:22] <Unamuno> autrijus: you should have successive versions converge on 6.

[16:22] <autrijus> starting from 5.9.0?

[16:23] <autrijus> even more confusion

[16:23] <Unamuno> no, from 6.2.0, now that it's already there

[16:23] <autrijus> say what?

[16:23] <autrijus> 6.2.0, 6.1.9, 6.1.8... ?

[16:23] <PerlJam> Unamuno: that's going quite the wrong way

[16:23] <Unamuno> yeah :)

[16:23] <autrijus> makes no sense :p

[16:23] <Unamuno> well, he's the one who started it by calling it 6.2

[16:23] <PerlJam> Unamuno: pugs is converging on 2*pi

[16:24] <Unamuno> and there's a tradition of obfuscated tendencies in the unix and open source communities, so...

[16:24] <Unamuno> oooh ok.

[16:24] <Unamuno> well, I think my idea shows more creativity ;)

[16:24] <shapr> PerlJam: what about trig.t ?

[16:25] <theorbtwo> Thanks, shapr.

[16:25] <Khisanth> creative to the point of confusion is no good :p

[16:26] <Unamuno> it's only confusion until people catch on to it :P

[16:26] <Unamuno> heh, I can just imagine the flow of questions on the channel here though

[16:26] <theorbtwo> Unamuno: Didn't this start because you thought the existing convention was already too confusing?

[16:26] <Unamuno> yes, but right now it's confusing with no apparent logic. my way would at least have a logic to it, although a strange one.

[16:27] <PerlJam> no apparent logic?

[16:27] <Unamuno> um... well is there a reason an implementation of perl6 that's not complete should have a version number of 6.2?

[16:28] <Khisanth> 2*PI is quite logical whereas a decreasing version number will mess up just about every version tracking system in existence if not all of them

[16:28] <theorbtwo> The logic is perfectly obvious, if you remember that it's perl6, and pugs 6.2.

[16:28] <PerlJam> Unamuno: you mean 6.28318530717959

[16:28] <theorbtwo> And in any case, 6.2 == 6 (when you remember significant digits).

[16:29] <Unamuno> well 2*pi is perfectly easy to calculate, but I don't see what pi has to do with perl, or why it's being multiplied by two.

[16:29] <Unamuno> whereas with tex, converging on pi fits a lot better.

[16:30] <Unamuno> theorbtwo: and yes, I realize that. there essentially is no "real" perl6 outside of a description, right?

[16:30] <Unamuno> I guess the problem is that there's basic only ever been one reference perl implementation before.

[16:30] <Unamuno> s/basic//

[16:30] <theorbtwo> See http://dev.perl.org/perl6/doc/design/apo/A01.html, under RFC 141.

[16:31] <theorbtwo> (See also RFC 141 itself.)

[16:33] <kungfuftr> shapr: fixed! need to really sort that out

[16:34] <autrijus> Unamuno: basically I've been attracted to P6RFC 141 ever since it was written

[16:35] <autrijus> and there's also this "need to mark pugs as not the official perl 6 compiler" thing.

[16:35] <autrijus> when I started versioning pugs, that is

[16:36] <Unamuno> autrijus: incidentally, why did you choose haskell?

[16:36] <autrijus> Unamuno: pugscode.org, "Overview"

[16:36] <autrijus> grep for "Haskell"

[16:36] <Unamuno> ah ok

[16:37] <PerlJam> Unamuno: obviously it was the right choice.  Look how much work has been accomplished in such a short time  :-)

[16:38] <mj> my new toy, see

[16:38] <mj> http://wiki.kn.vutbr.cz/mj/attach/pugs/tut-root/tut-output/hello-world.p6.html 

[16:38] <mj> and next>> links

[16:39] <autrijus> oh wow. wow.

[16:39] <autrijus> is this what I think it is?

[16:40] <autrijus> a pugs-powered html tutorial generator?

[16:40] <PerlJam> it's magic!

[16:40] <autrijus> majic!

[16:41] <Unamuno> PerlJam: well, it does seem to be quite a lot for a short time :)

[16:41] <Unamuno> autrijus: it doesn't say on that page when exactly you started... just a couple months ago?

[16:41] <autrijus> Unamuno: 1st Feb, 2005

[16:41] <PerlJam> Unamuno: Feb 1

[16:42] <Unamuno> I'm curious to try it out now. time to compile ghc... sigh ;)

[16:43] <autrijus> there should be binary installers for your platform...

[16:43] <PerlJam> Unamuno: make sure you have ghc 6.4

[16:43] <Unamuno> PerlJam: I know... I'm on OS X and fink has binaries for 6.2, which I already had for something else. but the easiest way for me to install 6.4 is through darwinports which compiles everything

[16:43] <gaal> autrijus, where can i find the slides to your yapc talk? they seem to have gone off the main site

[16:44] <gaal> the main yapc::taipei site that is

[16:44] <mj> thanks, but now i need to do real work :-(

[16:44] <autrijus> gaal: http://wagner.elixus.org/~autrijus/p6tu/

[16:44] <gaal> thanks!

[16:44] <autrijus> Unamuno: the easiest way is thru .dmg :D

[16:44] <Unamuno> I might be able to find binaries for 6.4 but it doesn't seem work it, I prefer proper package management... I'm not in a hurry anyway :)

[16:44] <Unamuno> s/work/worth/

[16:45] <autrijus> or rather, for 10.3, http://haskell.org/ghc/dist/6.4/MacOSX/GHC-6.4.pkg.zip

[16:45] <Unamuno> autrijus: where does it install?

[16:45] <autrijus> /usr/local/bin/ghc

[16:45] <autrijus> I think

[16:45] <Unamuno> yeah, that's what I don't like about pkgs. they ask for your password and don't tell you what they're doing.

[16:45] <autrijus> uh. they are just tarballs.

[16:45] <autrijus> you can cd into them and use tar to inspect its content.

[16:46] <Unamuno> errr... not usually.

[16:46] <mj> html tutorial generator, but writteln in perl5 with system( 'pugs.exe', ...)

[16:46] <autrijus> *shrug* that's what I do anyway :)

[16:46] <PerlJam> mj:you should write it in perl6 

[16:46] <autrijus> mj: I wonder if you can port it to pugs

[16:47] <Unamuno> autrijus: hmm well I'll try that in the future, but I haven't been able to the couple times I tried

[16:47] <Unamuno> incidentally, I find it a positive trend that people on freenode don't automatically deride people who use OS X ;)

[16:49] <mj> maybe, but not today perhaps, source code http://wiki.kn.vutbr.cz/mj/attach/pugs/tut-root/tut/

[16:49] <autrijus> Unamuno: SubEthaEdit powers a large chunk of pugs development.

[16:49] <PerlJam> Unamuno: yep.  I've never been a Mac fan, but when a coworker gave me and old G3 with OSX on it, I've never been happier.

[16:49] <PerlJam> s/and/an/

[16:50] <PerlJam> I don't think that would have happened prior to OSX though

[16:50] <PerlJam> anyway ... back to work

[16:51] <Unamuno> autrijus: really? hmm that surprises me somehow. I used SubEthaEdit for a while but my work recently bought BBEdit, which is still the best, imo.

[16:51] <autrijus> Unamuno: BBEdit doesn't get you teamwork

[16:51] <Unamuno> PerlJam: I've always been a mac user. long time on unix too though and ran linux for a while until OS X made it mostly not so necessary. but I have never, ever used windows regularly :)

[16:52] <Unamuno> although I've had to use it enough that I know how to bend it into shape

[16:53] <autrijus> unless of course BBEdit somehow gained teamwork capability I did not notice

[16:54] <Unamuno> autrijus: nope. I don't need that feature personally, though. not at the moment anyway.

[16:54] <autrijus> ah. have you tried it at all? it's highly addictive.

[16:54] <Unamuno> autrijus: oooh, I misread your first comment -- I thought you said SubEthaEdit *funds* pugs development.

[16:54] <autrijus> uh, no. "fuels" maybe

[16:55] <autrijus> BBEdit is good to us, too -- they agreed to add a Perl6 syntax mode on next release

[16:55] <Unamuno> does it recognize haskell?

[16:55] <autrijus> SEE? I don't know, prolly not by default

[16:55] <autrijus> but I think setting the syntax to "SQL" gets you a good haskell mode.

[16:55] <autrijus> ;)

[16:55] <Unamuno> hehe. how does the collaborative stuff work anyway? I suppose it works over the net as well as local networks... and you see what people are doing in real time I guess?

[16:57] *** computer is now known as errr

[16:59] <Unamuno> BBEdit has a surprisingly good perl syntax mode. very good at catching missed quotes for example and it even recognizes here documents.

[17:02] <Limbic_Region> chip about?

[17:02] <Limbic_Region> http://www.perlmonks.org/index.pl?node_id=445661 # Is Perl6 going to release memory back to the OS

[17:03] <chip> *bamf*

[17:03] <autrijus> Unamuno: right, it's basically multiplayer notepad

[17:03] * Unamuno chips about

[17:03] <Limbic_Region> http://www.perlmonks.org/index.pl?node_id=445785 # What compilers are targetting Parrot

[17:03] <autrijus> L_R, our resident perlmonk channeler

[17:04] <Limbic_Region> well - use.perl journals as well, but you seem to read them before I get a chance to tell you about them autrijus

[17:04] <autrijus> yup.

[17:04] <autrijus> the volume is... more managable than perlmonks

[17:04] <Limbic_Region> hmm - /me thinks by chip's *bamf* reply, he really isn't here and that is an automated response

[17:05] <autrijus> do not be fooled!

[17:05] * autrijus tries the summoning again

[17:05] <autrijus> chip about?

[17:05] <Limbic_Region> seen chip

[17:05] <jabbot> Limbic_Region: chip was seen on Fri Apr  8 01:03:06 2005

[17:05] <autrijus> see? not an automated response

[17:06] <Limbic_Region> well, I /msg'd him the links anyway

[17:07] <Limbic_Region> autrijus - are you familiar with Dan's "What the heck is X" series from his blog?

[17:08] <Limbic_Region> I was thinking that "What the heck is bootstrapping and what does it have to do with Perl6" would be a good thing to give an explanation of

[17:08] <Unamuno> autrijus: the ghc binary is not a tarball, it's a paxball ;)

[17:09] <Khisanth> hmm

[17:10] <Khisanth> Limbic_Region: maybe the memory releasing will be the same as perl5?

[17:10] <Khisanth> oh wait that still depends on the OS

[17:10] <Limbic_Region> Khisanth - on the memory releasing issue - it is a complicated answer

[17:10] <Limbic_Region> If an OS doesn't support, the language can't do much about that

[17:11] <Limbic_Region> on the platforms where it is supported, the language is going to have to work to some extend to make the OS happy about releasing the memory back

[17:11] <Limbic_Region> in p5 it almost never makes sense to do that because it doesn't use contiguous blocks (AFAIK)

[17:12] <Limbic_Region> in p6/parrot, it may be more realistic, but in p5 we often make optimizations by trading resources

[17:12] <Limbic_Region> if I asked for memory once - I will likely ask for it again, so let's keep it around

[17:13] * Limbic_Region is by far not a Subject Matter Expert though - which is why I pointed it out to chip

[17:13] <Limbic_Region> s/extend/extent/

[17:13] <Limbic_Region> bootstrapping is a much more straightforward matter

[17:14] <autrijus> Limbic_Region: yes, quite

[17:14] <autrijus> wrt dan

[17:14] <autrijus> Limbic_Region: uhm, hm, yeah, write one?

[17:14] <autrijus> (or scheme chip into writing one)

[17:14] <Limbic_Region> well, I was thinking about that style, but have a section at www.pugscode.org

[17:14] <Khisanth> well hopefully perl6 will have slightly less overhead :)

[17:14] <Khisanth> when storing things

[17:15] <Limbic_Region> I would be willing to framework some - but not being very smart, someone else would have to fill in details

[17:15] <autrijus> sure. PA01 has some initial details

[17:15] <Limbic_Region> well - I see it as being a more in depth FAQ

[17:15] <Limbic_Region> but I have a lot of grand ideas sitting back not actually doing anything

[17:16] <Limbic_Region> I will come up with an outline for bootstrapping with some basic content I know is accurate and let you decide if it is worth it

[17:16] <Limbic_Region> s/you/the channel/

[17:16] <autrijus> cool!

[17:16] <autrijus> Limbic_Region++ # in advance

[17:17] <Limbic_Region> er um, now the format - POD would be easiest for me

[17:17] <autrijus> go ahead and use POD.

[17:17] <autrijus> if POD<=>Kwid converter is not there when you're done, it's not your fault :)

[17:18] <autrijus> there is a Kwid=>Html converter though, and a Html=>Pod one

[17:18] <autrijus> but that's lossy as hell.

[17:19] <theorbtwo> All converters loose.  Some just loose less.

[17:19] <autrijus> (Spork::Formatter::Kwid and Pod::HTML2Pod respectively)

[17:19] <Juerd> How lossy is hell?

[17:19] <autrijus> total entropy, man

[17:20] <theorbtwo> But total entropy increases over time!

[17:21] <autrijus> until it reaches hell

[17:21] <autrijus> then it freezes over and starts anew

[17:21] <stevan> autrijus: I dont wanna be a pain, but any idea when multidims will land?

[17:21] <Khisanth> so hell is not hell until the end of hell? :)

[17:22] <autrijus> stevan: you are not a pain. before 6.2.0. I started doing designs but was distracted by business stuff

[17:22] <autrijus> stevan: so most likely tomorrow morning

[17:22] <stevan> autrijus: sounds good to me (your morning is usually my late evening, so thats perfect)

[17:22] <autrijus> Khisanth: right, see Asimov, "The Last Question"

[17:23] <autrijus> also # http://interconnected.org/notes/2003/05/last-query.html

[17:24] <autrijus> stevan: the prerequisite -- IntMap change -- has landed, but I need to tweak Eval.hs some more

[17:25] <kungfuftr> rightio... time to overhaul the testsuite stuff

[17:25] <stevan> kungfuftr: why?

[17:25] <kungfuftr> stevan: modularise it and make it a little more generic

[17:26] <kungfuftr> ie: not have 5 different scripts run across it

[17:26] <stevan> kungfuftr++ 

[17:26] <stevan> it would be a very nice thing to have for all my (soon to be antiquated) perl5 projects

[17:28] <kungfuftr> i should have a peek at yacsmoke again too

[17:29] <Limbic_Region> autrijus - isn't there a pugs wiki?

[17:29] <Limbic_Region> maybe it would make more sense to add a "What the heck is" section there?

[17:29] <stevan> Limbic_Region: http://pugs.kwiki.org/

[17:29] <Limbic_Region> thanks stevan

[17:31] <stevan> Limbic_Region: always a pleasure :)

[17:32] <kungfuftr> autrijus: btw, had a chat with merlyn... as far as he's aware, there's nothing to stop someone doing a "Learning Perl" companion guide thing for Perl 6

[17:32] <stevan> kungfuftr: did you see the idea for Perl6 Cookbook?

[17:32] <autrijus> pleac! pleac!

[17:33] <autrijus> kungfuftr: I think pleac will rock.

[17:33] <chip> Professor Backwards drowned after yelling "PLEH!  PLEH!"

[17:33] <autrijus> and a certain publisher may even consider publishing it.

[17:33] * stevan thought autrijus was chooking on his Diet Coke there for a second

[17:33] <autrijus> # http://pleac.sourceforge.net/pleac_perl.html

[17:33] <autrijus> eh. ;)

[17:34] <autrijus> I'm officially off Coke for now, though.

[17:34] <kungfuftr> stevan: yup... learning perl's quite a nice step though... especially for the very basics that have changed

[17:34] <autrijus> tea for me on usual days.

[17:34] <Limbic_Region> after re-reading what has been written about bootstrapping, I don't see it as a good candidate for the first "what the heck is" - I will just point people there and wait to see what the next thing is most initiates are puzzled about

[17:34] <autrijus> Limbic_Region: that's cool too.

[17:35] * stevan finds the $work server is still unresponsive, so back to Pugs hacking it is :)

[17:35] <ninereasons> how convenient for us, stevan

[17:35] <stevan> kungfuftr: pleac may be a better place to start though. It will help crystalize the differences 

[17:35] * kungfuftr can't believe that's no good generic smoke packages on CPAN

[17:36] <stevan> ninereasons: :)

[17:36] <kungfuftr> stevan: true... but a learning perl companion guide thing would be so sweet to have when pugs/perl6 gets production ready

[17:36] <Unamuno> smoke?

[17:37] <autrijus> kungfuftr: is learning perl's code availalbe on the web?

[17:38] <autrijus> hi rgs!

[17:38] <rgs> hi autrijus

[17:38] <stevan> kungfuftr: either way is good :)

[17:38] <ninereasons> mj, your sample is nice to show to perl5 people, at http://wiki.kn.vutbr.cz/mj/attach/pugs/tut-root/tut/tut-src/simpleiter.p6

[17:38] <ninereasons> things like that make perl5 people say "yay"

[17:39] * kungfuftr checks

[17:39] <Juerd> string.say still looks weird.

[17:39] <autrijus> for (%mates.kv) -> $girl, $guy { 

[17:39] <autrijus> this can lose the parens

[17:39] <chip> are the parens required in the simpleiter example?

[17:39] <chip> jinx

[17:39] <autrijus> kinx

[17:39] <autrijus> linx too.

[17:40] <kungfuftr> autrijus: http://examples.oreilly.com/lperl3/

[17:41] <autrijus> that reminds me. anyone finds the trailing comma thing irritating enough?

[17:41] <autrijus> i.e. considered 6.2.0 blocker?

[17:41] <autrijus> (1,2,3,) # currently illegal in pugs

[17:41] <kungfuftr> autrijus: http://www.oreilly.com/pub/a/oreilly/ask_tim/2001/codepolicy.html

[17:42] <ninereasons> more irritating, is that my ($s,@a) = <1 2 3> doesn't work

[17:42] <kungfuftr> ninereasons: ($s,*@a) = <1 2 3>; ?

[17:43] * chip flattens kungfuftr 

[17:43] <kungfuftr> mwuahaha

[17:43] <autrijus> no, = should flat by default.

[17:43] <autrijus> i.e. that's a bug.

[17:43] <autrijus> although I was seriously confused when I first coded it.

[17:43] <autrijus> so needs a rewrite :)

[17:43] <metaperl_> does that term "flatten" make sense to everyone but me?

[17:44] <autrijus> (of 10 lines of code -- line 333 of Eval)

[17:44] <kungfuftr> autrijus: a trailing comma might denote an undef value perhaps... but probably better to be explicit about it than not

[17:44] <Juerd> simpleiter.p6 is not homosexual compatible.

[17:44] <autrijus> kungfuftr: the trailing comma is ignored in p5

[17:44] <autrijus> and same in p6

[17:44] <kungfuftr> k

[17:44] <autrijus> larry also said that trailing semicolon is ignored too

[17:44] <metaperl_> were those angle brackets valid syntax?

[17:44] <chip> <> is qw()   <<>> is qqw()  [or would be]

[17:45] <autrijus> angle brackets are the new qw<>

[17:45] <autrijus> they are also the new {''}

[17:45] <Juerd> autrijus: {qw//}, actually.

[17:45] <autrijus> well, yeah, sure

[17:45] <chip> Hm.  I wonder what $a{qw/1/} does

[17:46] <chip> it ... works.  hm

[17:46] <Juerd> chip: That's the same as $a{1}

[17:46] <chip> so it is.  I expected qw{} to react poorly to scalar context.

[17:46] <Juerd> chip: Which is %$a{1}

[17:46] <Juerd> chip: It's not scalar context afaik.

[17:46] <metaperl_> chip: perldoc perlop discusses qw and qq but now qqw .... whatis qqw?

[17:47] <Khisanth> like qw but with interpolation?

[17:47] <Juerd> metaperl_: q : qq :: qw : qqw

[17:47] <Juerd> metaperl_: Apply logic.

[17:47] <chip> Oh wow.  Perl 5:

[17:47] <chip>  perl -MData::Dumper -le '$a{qw/1 2/} = 3; print Dumper(\%a)'

[17:47] <chip> $VAR1 = {

[17:47] <chip>           '12' => 3

[17:47] <chip>         };

[17:47] * Juerd hadn't expected that

[17:47] <ninereasons> hm.  surprising

[17:48] <chip> Even better

[17:48] <rjbs> chip: You made that up!!

[17:48] <chip> perl -MData::Dumper -le '$a{qw/1 2/} = 3; print Dumper(\%a)' | cat -v

[17:48] <chip> $VAR1 = {

[17:48] <chip>           '1^\2' => 3

[17:48] <chip>         };

[17:48] <chip> It's doing the fake multidimensional thing

[17:48] <Juerd> chip: Ahh, $;

[17:48] <rjbs> ahhh

[17:48] * Juerd always forgets about that until he needs it

[17:48] * chip forsees a feature of ObfuPerl

[17:48] <Juerd> Well, not need, but want.

[17:48] * rjbs never wants it.

[17:48] <Juerd> rjbs: When I want something to be keyed by multiple things that only in relation to eachother make sense.

[17:49] <chip> anyway, I'm noodling on the wrong channel.  AWAY!

[17:49] <Juerd> rjbs: It's a shame to waste lots of hashes on that: $foo{$bar}{$baz}{$quux}, when %{ $foo{$bar} } makes no sense

[17:50] <Juerd> Then $foo{$bar, $baz, $quux} or $foo{"$bar/$baz/$quux"} (I use the latter more often because I think it's clearer) fixes that.

[17:50] <kungfuftr> bah, i so need a unix box at home

[17:50] <Juerd> kungfuftr: Then get one.

[17:51] <kungfuftr> Juerd: no as easy as it seem unfortunately

[17:51] <Juerd> Is too.

[17:51] <Juerd> kungfuftr: What box are you using now?

[17:51] <Juerd> (at home)

[17:53] <crysflame> win 3

[17:53] <crysflame> wow

[17:53] <crysflame> sorry

[17:53] <crysflame> if an op sets mode +c i believe that strips colors and bold from the channel

[17:54] <shapr> yes

[17:54] <crysflame> wow, 98 of us

[17:54] <kungfuftr> Juerd: win xp box... development done on a freebsd remote box

[17:55] <Juerd> kungfuftr: Then run cooperative linux.

[17:55] <kungfuftr> linux-- # sorry

[17:55] <Juerd> zealot.

[17:56] * kungfuftr would move to OSX if he had the money

[17:57] <rjbs> kungfuftr: What's your roadblock to having a unix box at home?

[17:57] <Juerd> rjbs: hating linux, apparently.

[17:57] <rjbs> Clearly he could just run freebsd at home, too.

[17:58] <rjbs> So presumably the problem is with hardware acquisition.

[17:58] <Juerd> Not at the same time as Windows XP

[17:58] <Juerd> On the same box

[17:58] <Juerd> (If you can afford vmware, you can also afford a separate box, as the latter is cheaper even.)

[17:58] <kungfuftr> rjbs: wireless only and my wireless card is not bsd compatible... however forgot about NDIS, so might do a 5.3 install

[17:58] <shapr> yay, pugs on lwn.net

[17:59] <shapr> http://lwn.net/Articles/130401/

[18:00] <ninereasons> cook seems to be the designated pugs reporter

[18:00] <shapr> ?

[18:01] <ninereasons> hm. I guess I don't know what I'm reading there: looking at Search results

[18:01] <ninereasons> on lwn.net

[18:01] <shapr> who's cook?

[18:02] <ninereasons>  ([Development] Posted Apr 5, 2005 21:40 UTC (Tue) by cook)

[18:03] <ninereasons> I don't know - it doesn't show up on the post.  but "by cook" is in the search result

[18:03] <shapr> interesting

[18:05] <autrijus> mm 5 people hacked on hangman.p6 aleready

[18:05] <autrijus> making it the most popular example

[18:06] <ninereasons> or, considering that I'm one of those five, making it the most hacked up sample.

[18:07] <ninereasons> Line 333 ff of Eval.hs is still gibberish to me.  I need to read more haskell books.

[18:10] <castaway> .. but vmware can be any number of machines, so offsetting its price against one is not fair ;)

[18:14] <shapr> ninereasons: you want an explanation?

[18:15] <ninereasons> yes.  I'd like to understand why it doesn't do what it's supposed to do.

[18:15] <shapr> This? "[lhsExp@(Syn "," lhs), exp] -> do"

[18:15] <ninereasons> yes, and following

[18:15] <shapr> You understand case?

[18:16] <autrijus> line 336 is the entire bug, actually, but I'm journaling, so shapr++ :)

[18:16] <shapr> !

[18:16] <ninereasons> assume I know nothing, and you'll be very close to the truth.

[18:16] <shapr> fair enough

[18:16] <castaway> (wtf is that, haskellish?)

[18:16] <autrijus> castaway: yes, src/Eval.hs line 332/333

[18:17] <autrijus> hey alin :)

[18:17] * castaway still hasnt persuaded gentoo to install ghc 6.4

[18:17] <shapr> let's say you have some value, you can switch on the value with case. case somestring of "foo" -> putStrLn "bar" ; "bar" -> putStrLn "baz"

[18:17] <shapr> that sort of thing.

[18:17] <ninereasons> ok

[18:17] <alinbsp> good evening

[18:18] <ninereasons> case, switch, that kind of thing

[18:18] <autrijus> actually line 335 is a lie. "slurpy" should read "non-slurpy" ;)

[18:19] <autrijus> but it really should be slurpy.

[18:19] <shapr> the first case happens if you get a two item list where the first item uses a Syn constructor with a string "," as its first value

[18:19] <Khisanth> autrijus: that is very confusing

[18:19] <shapr> it also assigns the whole value inside that Syn constructor to the name lhsExp

[18:19] <autrijus> Khisanth: indeed. I was very confused when I coded it up.

[18:20] <shapr> just from the names, I'd guess lhsExp means left hand side of the expression

[18:20] <shapr> and exp probably means expression

[18:20] <autrijus> my ($a, @b) = (1,2,3);

[18:20] <castaway> as long as it works, autrijus 

[18:20] <autrijus> here $a and @b are the lhs

[18:20] <autrijus> and lhsExp is ($a, @b)

[18:20] <autrijus> exp is (1,2,3)

[18:20] <ninereasons> omg, i think I actually understand

[18:21] <shapr> mapM_ is just like map with the addition that it's monadic, (mapM) and it doesn't care about the result (the trailing underscore)

[18:21] <autrijus> ...and you see a GHCism, parallel comprehension

[18:21] <shapr> so evalExp gets applied to each part of the list that is its argument

[18:22] <ninereasons> one item at a time

[18:22] <shapr> that funny looking list critter is a list comprehension

[18:22] <shapr> @plugs [(x,y) | x <- [1,2,3] , y <- [4,5,6] ]

[18:23] <shapr> that's your basic list comp

[18:23] <ninereasons> nice trick

[18:23] <autrijus> @plugs [(x,y) | x <- [1,2,3] | y <- [4,5,6] ]

[18:23] <autrijus> argh.

[18:23] * shapr grins

[18:23] <autrijus> why can't lambdabot enable -fg-exts?

[18:23] <autrijus> think of the children! :)

[18:23] <wilx> :)

[18:23] <shapr> because a few people found  ways to execute shell commands via -fg-exts

[18:23] <autrijus> oh wow. wow.

[18:23] <autrijus> ok. good enough

[18:24] <shapr> yeah, I hope no one on #haskell ever turns black hat

[18:24] <shapr> > [(x,y) | x <- [1,2,3] | y <- [4,5,6] ]

[18:24] <shapr> [(1,4),(2,5),(3,6)]

[18:24] <shapr> since I have both irc and ghci in emacs, I can just cut'n'paste

[18:25] <autrijus> nice trick

[18:25] <shapr> I'd use zip for this normally

[18:25] <shapr> @plugs zip [1,2,3] [4,5,6]

[18:25] * shapr blinks

[18:26] <autrijus> sure, but I find parallel comprehension easier on my brain :)

[18:26] <shapr> hey if it works for you :-)

[18:26] <ninereasons> autrijus has an interesting brain

[18:26] <autrijus> basically I can't remember zip2, zip3, zip4

[18:27] <shapr> Also, standard zip only goes up to zip3 I think

[18:27] <shapr> oh, there's zip4?

[18:27] <autrijus> since in my mind it's the same thing

[18:27] <shapr> anyway, it's limited.

[18:27] <shapr> I doubt parallel list comps are limited.

[18:27] <autrijus> they are not

[18:27] <autrijus> but we digress.

[18:28] <autrijus> anyway, that parallel comprehension takes lhs, zips it with the evaluated list of rhs, cutting the longer one to fit the shorter one

[18:28] <shapr> so, for each piece on the left side and each piece on the right side, they get combined like Syn "=" [l, Val v]

[18:28] <autrijus> ...nice, we actually complement each other

[18:29] <shapr> bea says hi to autrijus

[18:29] * autrijus leaves the rest to shapr and goes on journaling

[18:29] <shapr> (my significant other)

[18:29] *** Aankh|Clone is now known as Aankhen``

[18:29] <shapr> ninereasons: was that everything?

[18:30] <ninereasons> I followed your explanation, 

[18:30] <autrijus> bea: hi!

[18:30] <ninereasons> I'm digesting.

[18:30] <shapr> ninereasons: is the rest of that case understandable?

[18:30] <autrijus> ninereasons: so, line 337 evals the lvalue again

[18:30] <autrijus> and return it

[18:30] <autrijus> that is so that

[18:30] <autrijus> $a = $b = 3

[18:30] <autrijus> works.

[18:31] * shapr runs off to take a post-unicycling shower.

[18:31] <ninereasons> ok. yes

[18:31] <autrijus> the "enterLValue" means that the retval is good as lval

[18:31] <autrijus> (($a = 3) = 4) works

[18:35] <wilx> Hmm, P.K.Dick? I almost bought the book today. But then I decided for something easier to read :)

[18:35] <ninereasons> (($a = 3) = 4) works ?

[18:35] <autrijus> I just checked and it doesn't ;)

[18:35] * wilx just READTHEM.

[18:35] <autrijus> something else is blocking it.

[18:36] <autrijus> file a bug... I mean test?

[18:37] <ninereasons> I would but I don't see why it should work

[18:37] <autrijus> well, it works in perl5

[18:37] <autrijus> that's a reason good enough.

[18:37] <ninereasons> ok :)

[18:39] <ninereasons> so it should evaluate to "4" ?

[18:39] <autrijus> yes.

[18:43] <ninereasons> is there some wonderful use for that syntax, autrijus ?

[18:44] <autrijus> chomp($_ = <STDIN>);

[18:44] <autrijus> ok, not wonderful (actually terrible)

[18:44] <autrijus> but common.

[18:44] <ninereasons> ok.  i see that.

[18:47] <autrijus> yay I get to use the word "scintillating" too!

[18:47] <autrijus> I've always wanted to use that after I see it repeatedly on perlmonks.

[18:52] <chip> ($a = 1) =~ s/1/2/

[18:54] <autrijus> chip: I read somewhere that you thought

[18:54] <autrijus> for my $item (@array) { ... }

[18:54] <autrijus> is a regrettable hack of yours

[18:54] <autrijus> is that true? do you consider

[18:54] <autrijus> for @array -> $item { ... }

[18:54] <autrijus> to be significantly better?

[18:54] <chip> autrijus: I regret the double-keyword effect; it moves the variable even farther from the left.

[18:55] <ninereasons> weird, chip.  why doesn't strict complain?

[18:55] <autrijus> ninereasons: because p5 is evil and must die.

[18:55] <autrijus> (sorry. $a and $b special casing being one of my pet peeves)

[18:55] <chip> autrijus: The p6 version is better in context; in p6, what follows the for is always the list.  if you want the variable, you hunt for the { and look to the left.

[18:56] <chip> autrijus: That said, I don't regret doing it; given p5 as the base, it was probably the best bad hack available.

[18:56] <autrijus> ninereasons: $c will raise exception

[18:56] <ninereasons> weirder yet.

[18:56] <ninereasons> then, why should similar behavior be reproduced in perl6, autrijus 

[18:57] <autrijus> ninereasons: $a special casing? definitely not!

[18:57] <autrijus> ($a = Foo.new).process

[18:57] <Limbic_Region> ninereasons - you do realize what special casing autrijus is referring to right?

[18:57] <autrijus> is a valid syntax though.

[18:57] <Limbic_Region> s/realize/know/

[18:58] <ninereasons> only from the example, Limbic_Region 

[18:58] <Limbic_Region> $a and $b get special treatment because of sort blocks in p5

[18:58] <Limbic_Region> they pass strictness tests without being declared as a result

[18:58] <Limbic_Region> and a few other checks as well

[18:58] <autrijus> which leads to subtly buggy code.

[18:58] <ninereasons> I see.  thank you for the context;  Limbic_Region

[18:58] <chip> with $a and $b, Larry inched toward $^a $^b, which I like a lot more

[18:59] <autrijus> verily.

[19:02] <kungfuftr> $^<FOO> denotes a placeholder variable, right?

[19:02] <theorbtwo> s/which leads/which sometimes leads/

[19:02] <autrijus> kungfuftr: right. or implicit var.

[19:02] <theorbtwo> It's more like an undeclared argument.

[19:02] <autrijus> aye. true.

[19:03] <kungfuftr> autrijus: any idea if perl6 is going to have a way programmable way of identifying a specific object?

[19:03] <autrijus> kungfuftr: elaborate?

[19:03] <kungfuftr> autrijus: say for example for easy use with persistence

[19:04] <autrijus> you have =:=

[19:04] <autrijus> but I don't know what exactly are you looking for

[19:04] <kungfuftr> autrijus: yar, was thinking more like primary key melarky

[19:04] <autrijus> StableName? UUID?

[19:05] <autrijus> it's all negotiatable (on p6l) :)

[19:05] <kungfuftr> yar, that sort of thing

[19:05] <autrijus> if you talk to mugwump, it's likely that he will design it in

[19:05] <kungfuftr> mugwump: oi ye bastard!

[19:05] <autrijus> since his design is the .hs pugs actually runs... :)

[19:05] * shapr sneaks half of prolog into pugs

[19:06] <autrijus> ooh I want the other half too

[19:06] * shapr laughs

[19:06] <shapr> I'm just being a smartass, as usual.

[19:06] <theorbtwo> IIRC, there was supposed to be a .ident method.

[19:06] <autrijus> interesting. reference?

[19:06] <theorbtwo> Now you're asking hard questions.

[19:06] <autrijus> guess that's my job :)

[19:07] <autrijus> oh btw, see "First Set" http://svn.perl.org/perl6/doc/trunk/plans/design_docs.pod

[19:07] <Limbic_Region> theorbtwo - do you remember the context at least surrounding the .ident method?

[19:07] <autrijus> also see "Candiates for delegation" and that means You!

[19:08] <Limbic_Region> I might be able to help recall the reference if you have more context - it is fuzzily in my mind as well ATM

[19:09] <theorbtwo> I think it was the conversation that the =:= operator came from.

[19:09] <Limbic_Region> hmmm - nope, not ringing a bell

[19:09] <Limbic_Region> I was thinking it had more to do with a mutiple inheritence discussion

[19:10] <theorbtwo> Conversations on p6l are always so twisted -- it may have been both.

[19:10] <Limbic_Region> well, I tend not to follow p6.l so it is likely that I heard a different conversation concerning the same method

[19:12] <kungfuftr> autrijus: it was just me thinking about the fact that a fully typed perl6 class could be automagically serialised to postgresql

[19:13] <autrijus> mugwump of the Tangram clan will likely agree with you.

[19:15] <kungfuftr> autrijus: yar, sam and i used to work together... lots of tangram voodoo

[19:15] <autrijus> mmm voodoo

[19:16] <autrijus> what do you think of the opposite clan, the Prevaylor voodoo?

[19:16] <kungfuftr> prevaylor?

[19:16] <autrijus> http://www.prevaylor.org

[19:16] <kungfuftr> seems dead

[19:17] <autrijus> wrong link

[19:17] <autrijus> http://www.prevayler.org/wiki.jsp

[19:18] <kungfuftr> autrijus: ah yes, it's nice, but not always practical, especially in production

[19:19] <kungfuftr> plus, you don't have as much control in general of things like transactions, etc.

[19:19] <autrijus> yeah.

[19:20] <kungfuftr> and also, SQL can be a lot more powerful in certain areas

[19:21] <autrijus> right. and with sqlite the speed is acceptable

[19:21] <autrijus> to me at least.

[19:21] <autrijus> I've still yet to find a practical use case for prevayler.

[19:22] <kungfuftr> autrijus: cost for resiliant hardware would be my initial concern

[19:23] <kungfuftr> tangram, cdbi, etc. are all fine enough for most uses

[19:24] <autrijus> aye.

[19:24] <autrijus> ok, journal up. need to be sleeping :)

[19:24] <autrijus> see you tomorrow *wave* &

[19:24] <kungfuftr> nn!

[19:24] <ninereasons> thanks and bye

[19:26] <autrijus> YAPC::NA Hackathon Update: Breaking news: Larry Wall and Luke Palmer are also coming. Wow.

[19:26] <autrijus> zzz &

[19:28] <kungfuftr> oh... sweet

[19:29] <Limbic_Region> autrijus   for sharing the great news, autrijus-- for falling asleep without fielding questions

[19:29] <chip> Larry?  Neato!

[19:29] <chip> Is that cottage going to hold everyone?

[19:29] * Limbic_Region hopes the journal has more details

[19:29] <Limbic_Region> chip - you are going to right?

[19:29] <chip> 0.9 probability.  I sure want to!

[19:30] <chip> 0.98 probability of attending YAPC proper

[19:30] <Limbic_Region> my wife can't yet leave the country, so this year will be out :-(

[19:32] * kungfuftr only gets to go to YAPC::EU this year

[19:32] <Limbic_Region> autrijus - if you see this when reviewing the logs, read http://use.perl.org/~milardj/journal/24057 and don't be modest about the praise being heaped on

[19:36] * kungfuftr goes off to install freebsd

[19:38] <stevan> cool, larry and Luke at the hackathon

[19:39] <rgs> woot

[19:39] <stevan> it will certainly make it interesting :)

[19:39] * stevan really needs to figure out his travel plans so he can go

[19:39] <rgs> which hackathon ? yapc::na ?

[19:39] <stevan> rgs: yup

[19:40] <stevan> lemme find the mail

[19:40] <stevan> rgs: here is one http://www.nntp.perl.org/group/perl.perl6.compiler/514

[19:40] <rgs> ok

[19:40] <stevan> and the original invite

[19:40] <stevan> http://www.nntp.perl.org/group/perl.perl6.compiler/487

[19:41] <stevan> oh no - I just saw where autrijus used "scintillating"

[19:42] <theorbtwo> I certianly have to go now.

[19:42] <stevan> theorbtwo: we are expecting you for sure

[19:42] <theorbtwo> Perhaps I'll be able to talk some sense into Larry re =:= and trying to paper over the difference between references and values.

[19:43] <rgs> I can't go to yapc::na

[19:43] <stevan> rgs: why not?

[19:43] <rgs> too far. too expensive. not the time.

[19:43] <stevan> rgs: where are you?

[19:43] <rgs> paris, france

[19:44] <stevan> ahh, yes,... 

[19:44] <stevan> although if you can make it to germany maybe you can sneak into theorbtwo's carry on bag

[19:44] <Qiang-work> hm, compare to autrijus, it isnt that far tho :) 

[19:49] <Limbic_Region> http://www.perlmonks.org/index.pl?node_id=445851 # Announcement of the YAPC::NA

[19:54] * theorbtwo wonders if he's actually RSVP'd to this thing.

[19:57] <Limbic_Region> the hackathon or YAPC::NA?

[19:57] <Limbic_Region> Jean can't leave the country yet, so I won't be going to either :-(

[19:58] <theorbtwo> The hackathon.

[19:59] <theorbtwo> I'm not RSVP'd to YAPC::NA, but AFAIK, they haven't started taking money yet.

[20:00] * Limbic_Region is a tad bit jealous

[20:00] <Limbic_Region> of the hackathon - not so much the conference

[20:00] <Limbic_Region> though, it will be nice to have a house with spare room(s) so when you and Jess are visiting PA you can stay with Jean and I for a day or so

[20:01] <theorbtwo> I think we're going to be with my parents and possibly sister -- so no, but thanks for asking...

[20:01] <theorbtwo> And now that I realize you live around the DC area, I have to figure out more people to visit.

[20:02] <Limbic_Region> maybe you misparsed

[20:02] <Limbic_Region> I wasn't saying this specific time, but in general

[20:03] <Limbic_Region> and I only indicated a day or so because I know how hard it is to compress visiting friends when family wants to monopolize your time (I haven't lived in Maine for a decade)

[20:04] <Limbic_Region> chip   for mandating scheduled releases of Parrot

[20:04] * theorbtwo grins.

[20:04] * Limbic_Region had whined about that for some time to Dan and Leo WRT community involvement/excitement

[20:04] <theorbtwo> At some point, I'll figure this out.

[20:05] <Limbic_Region> hmmm - chip plus plus (/me really hates this client)

[20:05] <theorbtwo> Possibly after my father dies and my mother moves, so they all live closer together.

[20:06] <Limbic_Region> theorbtwo - the secret is to take longer vacations

[20:07] <Limbic_Region> I actually sent Jean up to Maine to visit my relatives for a couple of weeks without me just so she could get some quality time visiting

[20:07] <Limbic_Region> fly before Jess and return after her

[20:08] <theorbtwo> It's an idea.

[20:08] <theorbtwo> But I'm not sure I want to be sepperated from her for that long.

[20:09] <Limbic_Region> ahh - how sweet

[20:10] <Limbic_Region> absence makes the heart grow fonder - Jean ended up coming home early (home sick) - but don't tell her I said that - being homesick at 25 was a bit embarrasing for her

[20:10] <castaway> :)

[20:11] <theorbtwo> OTOH, her family is having some sort of shindig for her mother's birthday and I'm not invited for the week before.

[20:11] <kungfuftr> yay! freebsd installed and wireless card working smoothly even without native drivers

[20:41] * ninereasons wonders how long he'll put off upgrading from freebsd 4.11, to 5.x

[20:45] <theorbtwo> G'night, #p6ers.

[20:53] <stevan> gnite orb

[21:11] <chip> debianizing Devel::ebug looks pretty easy, except for the FIVE NEW DEPENDENCIES

[21:11] <chip> ww

[21:15] <ninereasons> is String-Koremutake a toy, or is it useful (an ebug dependency)

[21:16] <kungfuftr> ninereasons: useful enough

[21:16] <ninereasons> for mangling numbers?

[21:18] <ninereasons> i imagine a group of number nerds sitting around saying "nugrohigo", "drano" and cracking up

[21:34] <Corion> Pugs porn updated at http://datenzoo.de/pugs/win2k.html (for Win2k, r1631)

[21:42] <Corion> Pugs will need to have a strict! rule against Makefile.PL being interactive and entering an endless loop requiring user feedback (when there is no user) :(((

[21:43] <integral> ooh, down to 4 minutes for a make, nice :-)

[21:46] * ninereasons .oO *sigh* it would be nice to get things right the first (or ... fifth) time.  

[21:46] <Corion> sleep is open for anyone, not just me!

[21:46] <Corion> (backlogging :) )

[21:46] <ninereasons> yes, very nice integral.

[21:46] <ninereasons> whatever was done is a big improvement.

[21:46] <Corion> so I won't mind if sharpr or anyone else implements it. I wrote the test for it, that's enough. And I didn't write it, I merely stole it from p5

[21:46] <integral> ninereasons: -H0 so ghc doesn't suck a lot more RAM than you actually have - swapping is slow

[21:47] <ninereasons> it was becoming a huge thing to make pugs .. not so, anymore

[21:49] *** Corion changes topic to: pugscode.org <<Overview Journal Logs>> | You have safely opened the door to many Perl 6 hackers. | pugs.kwiki.org | smoke: http://xrl.us/fmw2 | Mac OS X r1622 (451/4159) | Win2k r1631 (457/4163)

[21:49] <Corion> Wheee. cpansmoking is driving my machine to swapping ... (1GB RAM, single user :) )

[21:50] <Corion> autrijus - fix the trailing comma issue! I find code ugly that writes

[21:50] <Corion> , item

[21:50] <Corion> instead of 

[21:50] <Corion> item,

[21:55] <ninereasons> integral, does this faster compile time mean that pugs will be slower than before?

[21:56] <integral> ninereasons: maybe.  I'm not sure.  AFAIK you can do 'make optimised' to get a faster pugs :-)

[21:57] <Corion> good night

[21:57] * Corion fades

[21:58] <ninereasons> 'make optimized' now is 8 min, compared to 68m before -H0 was changed, on this machine.

[21:59] <Limbic_Region> ninereasons - that statement may have more meaning if "this machine" were described in better detail (cpu(s), memory, OS)

[22:01] <ninereasons> freebsd 4.11, 1cpu, 800MHz, 1gb RAM,

[22:11] <ninereasons> m..  no, that's 666.45-MHz ... 262144K bytes real mem.  

[22:11] <ninereasons> anyway, real    2m43.930s for "make" compared to real    8m43.868s for 'make optimized'.  

[22:12] <ninereasons> I'm not reluctant to compile anymore. not such a big deal.

[22:44] <Limbic_Region> chip you about?

[22:44] <Limbic_Region> seen chip?

[22:44] <jabbot> Limbic_Region: chip was seen on Fri Apr  8 05:11:04 2005

[22:44] <Limbic_Region> http://www.perlmonks.org/index.pl?node_id=445880 # Parrot vs. C cagematch (Just for Fun)

[22:57] <crysflame> seen bot :)

[22:57] <jabbot> crysflame: I havn't seen bot , crysflame

