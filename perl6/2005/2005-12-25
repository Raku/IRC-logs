[00:04] <svnbot6> r8424 | Darren_Duncan++ |  r1575@Darren-Duncans-Computer:  darrenduncan | 2005-12-24 16:03:39 -0800

[00:04] <svnbot6> r8424 | Darren_Duncan++ |  /ext/Rosetta-Incubator : changed some hashes/hashrefs use/creation code to proper syntax ... however, current pugs incorrectly produces anon block instead of hashref ... a new test is pending

[00:09] <Juerd> New revelations:

[00:09] <Juerd> 1. => for arguments sucks

[00:09] <Juerd> 2. := sucks in general.

[00:50] * Juerd keeps typing pugs.blugs.com

[00:50] <Juerd> Someone register blugs.com and alias pugs. :)

[02:51] *** Dongmin is now known as verve_

[03:31] <audreyt> rehi

[03:31] <obra> reaudrey

[04:48] * clkao yawns

[04:50] <audreyt> clkao: @ .tw now?

[05:11] <azuroth> audreyt: ping

[05:12] <clkao> audreyt: yes

[05:12] <azuroth> audreyt: you wouldn't know how to set up svk for parrot on feather, would you?

[05:13] <audreyt> azuroth: 

[05:13] <audreyt>    mkdir ~/.svk

[05:13] <audreyt>    cp ~autrijus/config ~/.svk/

[05:13] <audreyt> svk co /parrot/mirror/trunk parrot

[05:13] <audreyt> done

[05:15] <obra> um

[05:15] <obra> robrt would REALLY prefer you use a seed for parrot

[05:15] <obra> http://www.parrotcode.org/source.html

[05:16] <obra> setup instructions

[05:16] <audreyt> and we did exactly that.

[05:16] <audreyt> (the lines above is for a shared, slready seeded, parrot depot.)

[05:16] <audreyt> s/slready/already/

[05:16] <svnbot6> r8425 | audreyt++ | * update feather's svk.html to mention /parrot/mirror explicitly

[05:17] <clkao> audreyt: you meeting ingy today? in taipei or hsinchu?

[05:17] <azuroth> thanks audreyt

[05:18] <audreyt> in taipei

[05:18] <audreyt> ingy is supposed to call me, like, 1 hr ago

[05:19] <clkao> are you staying far north now? i will probably be in taipei this evening

[05:21] <audreyt> no, I'm in muzha

[05:22] <dduncan> audreyt, regarding your mention that you would hack in yaml generating this weekend ...

[05:23] <svnbot6> r8426 | audreyt++ | * more very silly CSS tweaks.

[05:23] <svnbot6> r8425 | audreyt++ | * update feather's svk.html to mention /parrot/mirror explicitly

[05:23] <dduncan> don't feel you have to do is so quickly

[05:23] <audreyt> dduncan: yes..?

[05:23] <audreyt> I'm thinking about doing YAML::Syck for perl5

[05:23] <dduncan> I won't be ready to use it for awhile anyway

[05:23] <audreyt> as an exercise

[05:23] <audreyt> and also because I firmly believe p5 world need a fast nonleaky roundtripsafe YAML implementation

[05:24] <dduncan> considering the fluctuations of perl 6 and pugs' state ...

[05:24] <audreyt> yup

[05:24] <audreyt> but that doesn't stop you from using YAMLin perl5 :)

[05:24] <dduncan> while I can code up my work in 90+% correct perl 6, I doubt I could get it to run quickly

[05:24] <audreyt> run quickly as in performance, or as in language implementatino coverage?

[05:24] <dduncan> so I will probably have the perl 5 version executing long before the perl 6 one is

[05:25] <audreyt> sure, that's as it should be... having a running version also lets you validate that the framework works

[05:25] <dduncan> when I say 'quickly', I mean, functional at all in the near term

[05:26] <dduncan> one specific issue I'm hung up over right now is ...

[05:26] <dduncan> I'm having trouble discerning the line between an array/hash and an arrayref/hashref

[05:26] <dduncan> eg, when they automagically convert, when they don't

[05:26] <dduncan> whether or not I ever have to use @{} or %{} or whether I never have to

[05:26] <audreyt> nod. I think the idea is you never have to

[05:27] <audreyt> $href.keys should always be as good as %hash.keys

[05:27] <dduncan> also, the distinction of block from anonymous hash constructor

[05:27] <audreyt> that is because luqui had changed the empty {} to mean empty hash, not empty code

[05:28] <dduncan> ?eval class M { has %!h; submethod BUILD () { %!h = (4=>5); } method geth () { return { %!h }; } } class T { method tra ($m) { .useh( $m.geth() ) } method useh (%h) { say "got {%h}"; } }; my $gm = M.new(); my $gt = T.new(); $gt.tra( $gm );

[05:28] *** evalbot_8423 is now known as evalbot_8425

[05:28] <evalbot_8425> OUTPUT[got <SubBlock(<anon>)>	 ] bool::true 

[05:28] <dduncan> this is distilled from the current Locale::KeyedText code

[05:28] <audreyt> you'd like to return a cloned hash?

[05:28] <dduncan> somehow an anon block was generated rather than a hash

[05:28] <dduncan> yes

[05:28] <dduncan> simpler examples of the code, not involving classes, does what I want

[05:29] <audreyt> ?eval  class M { has %!h; submethod BUILD () { %!h = (4=>5); } method geth () { return hash(%!h) }  } class T { method tra ($m) { .useh( $m.geth() ) } method useh  (%h) { say "got {%h}"; } }; my $gm = M.new(); my $gt = T.new(); $gt.tra( $gm );

[05:29] *** evalbot_8425 is now known as evalbot_8426

[05:29] <evalbot_8426> OUTPUT[got 4	5 ] bool::true 

[05:29] <dduncan> ?eval sub user ($mystr, %myhash) { say "{%myhash}"; } sub maker () { my %foo = (4=>5); return { %foo }; } user( 'mu', maker() );

[05:29] <evalbot_8426> OUTPUT[4	5 ] bool::true 

[05:30] <dduncan> that case, not involving classes, does seem to keep it as a hash

[05:30] <dduncan> so it seems simply passing one sub result to another as an arg doesn't change the context enough

[05:30] <audreyt> indeed, because %!h is not decomposed into a hash natively

[05:30] <dduncan> but mixing in classes does something different

[05:30] <audreyt> that... is a bug.

[05:30] <dduncan> I considered making the nonworking example into a test, but where should it go?

[05:30] <audreyt> {%!h} should definitely work

[05:31] <dduncan> eg, under oo or hashes or subs?

[05:31] * dduncan away for 10-15 mins

[05:31] <audreyt> t/oo/attributes/hash.t ?

[05:31] <audreyt> either under hashes or subs is fine

[05:35] <audreyt> fixed.

[05:38] <obra> hey andy. 

[05:38] <Andy> AIM

[05:39] <obra> nod

[05:40] <audreyt> Andy: yo

[05:40] <audreyt> dduncan: r8427

[05:41] <svnbot6> r8427 | audreyt++ | * dduncan++ reported that %!h is not treated as a real hash

[05:41] <svnbot6> r8427 | audreyt++ |   for purpose of anonymous hash construction -- i.e.

[05:41] <svnbot6> r8427 | audreyt++ |   {%!h} was a Code but {%h} a Hash.  This is clearly broken --

[05:41] <svnbot6> r8427 | audreyt++ |   fixed it by moving desugaring from Parser into Eval.

[05:41] <Andy> hey audrey

[05:44] <audreyt> Andy: hey. got my mail?

[05:47] <svnbot6> r8428 | audreyt++ | * Text.Parser.OpTable: add deriving instances so OpTable

[05:47] <svnbot6> r8428 | audreyt++ |   can be serialized.

[05:47] <Andy> audrey: No, which?

[05:50] <dduncan> I'm back

[05:55] <gaal> morning all

[05:59] <rep> moin

[06:05] <dduncan> audreyt, thank you, that checkin seems to have fixed this problem

[06:05] <dduncan> there is another, possibly related

[06:06] <dduncan> concerning the context "for .meth_ret_aryref() -> $x { ... }

[06:06] <dduncan> simpler cases, where that called item is a sub, seem to work right

[06:06] <luqui> try: for *.meth_ret_aryref() -> $x { ... }

[06:06] <dduncan> also, wrapping it with @{} causes it to work in the meth situation

[06:06] <luqui> or yeah, that works too

[06:07] <dduncan> but since I don't have to wrap it with subs, I wonder why I have to with meths?

[06:07] <luqui> well, the meths (rightfully imo) return array refs, not lists

[06:07] <dduncan> will try to distill it ...

[06:07] <dduncan> yes, and the subs returned array refs too

[06:07] <luqui> there is a difference between:  sub foo () { (1,2,3) } and sub foo () { [1,2,3] }

[06:07] <dduncan> yes

[06:07] <luqui> oh, and by "right", you mean what?

[06:08] <dduncan> for some reason, sub foo () { [1,2] } is different than method foo () { [1,2] }

[06:08] <luqui> ?eval sub foo () { [1,2,3] }  for foo -> $x { say }

[06:08] *** evalbot_8426 is now known as evalbot_8428

[06:08] <evalbot_8428> OUTPUT[ ] undef 

[06:08] <luqui> ?eval sub foo () { [1,2,3] }  for foo -> $x { say.elems }

[06:08] <evalbot_8428> Error: No compatible subrountine found: "&elems" 

[06:08] <luqui> ?eval sub foo () { [1,2,3] }  for *foo -> $x { say.elems }

[06:08] <dduncan> will recheck

[06:08] <evalbot_8428> Error: No compatible subrountine found: "&elems" 

[06:08] <luqui> ?eval sub foo () { [1,2,3] }  for *foo -> $x { say .elems }

[06:08] <evalbot_8428> Error: No compatible subrountine found: "&elems" 

[06:08] <dduncan> determine details

[06:08] <luqui> ?eval sub foo () { [1,2,3] }  for *foo -> $x { say(.elems) }

[06:08] <evalbot_8428> OUTPUT[3 ] undef 

[06:09] <luqui> that's a bug

[06:09] <luqui> ?eval sub foo () { [1,2,3] }  for @{foo} -> $x { say(.elems) }

[06:09] <evalbot_8428> Error: No such method in class Int: "&elems" 

[06:09] <luqui> that's correct.  so * isn't working correctly

[06:11] <dduncan> weird

[06:11] <svnbot6> r8429 | audreyt++ | * Text.Parser.OpTable: mkTable implemented -- optable

[06:11] <svnbot6> r8429 | audreyt++ |   built correctly.

[06:11] <svnbot6> r8430 | audreyt++ | * oops, prematurely checked in the jsperl hack that did

[06:11] <svnbot6> r8430 | audreyt++ |   not quite work.  Why doesn't SVK support per-chunk commit again?

[06:11] <dduncan> okay, in my own test, the sub was working like the method

[06:11] <dduncan> for some reason it was different earlier today

[06:13] <dduncan> so, this syntax does the right thing:

[06:13] <dduncan> ?eval sub foo () { return [5,6]; } for @{foo()} -> $x { say $x.ref; say $x; }

[06:13] *** evalbot_8428 is now known as evalbot_8429

[06:13] <evalbot_8429> OUTPUT[Int 5 Int 6 ] undef 

[06:13] <dduncan> I just wasn't sure if I actually needed to wrap foo() or whether that was a bug

[06:14] <dduncan> ?eval sub foo () { return [5,6]; } for *@{foo()} -> $x { say $x.ref; say $x; }

[06:14] <evalbot_8429> OUTPUT[Int 5 Int 6 ] undef 

[06:14] <dduncan> the splatty does work if used outside the @{}

[06:14] <dduncan> but the result is the same either way

[06:15] <luqui> *@foo is a no-op

[06:15] <luqui> er, most of the time

[06:15] <luqui> I guess * is being overloaded a bit

[06:15] <dduncan> yes, except when used as an argument to a sub

[06:15] <luqui> probably should do something about that

[06:16] <dduncan> the only place I use * right now is in SQL::Routine, where I splat a hash ref so its member pairs bind to method named args

[06:16] <dduncan> and according to the synopsis, that is what I should be doing

[06:18] <dduncan> so my question right now is whether perl 6 spec says I have to say "for @{$aryref} -> $x {...}", or whether its only pugs currently requiring that?

[06:19] <luqui> well, for $aryref -> $x {...} does not work by spec

[06:19] <luqui> so you need either for @$aryref (which is the same as @{$aryref}) or for *$aryref

[06:19] <dduncan> fine, if that's what the spec says

[06:19] <dduncan> okay, so that's what the spec says, great then I'll do that

[06:26] <svnbot6> r8431 | Darren_Duncan++ |  r1577@Darren-Duncans-Computer:  darrenduncan | 2005-12-24 16:42:55 -0800

[06:26] <svnbot6> r8431 | Darren_Duncan++ |  /ext/Rosetta-Incubator : another small, similar syntax change

[06:31] <dduncan> that was a mistake, and I was trying to reverse it but svk's giving grief

[06:31] <dduncan> ...

[06:40] <dduncan> hmm, maybe this svk action worked ...

[06:40] <svnbot6> r8432 | Darren_Duncan++ |  r1589@Darren-Duncans-Computer:  darrenduncan | 2005-12-24 22:38:46 -0800

[06:40] <svnbot6> r8432 | Darren_Duncan++ |  /ext/Rosetta-Incubator : try forcing svk to push a previous commit, reversing mistaken r8431, with an inconsequential same-file change

[06:42] <dduncan> f, that didn't work

[07:04] <dduncan> hey, that try (r8433) worked

[07:04] <svnbot6> r8433 | Darren_Duncan++ |  r1591@Darren-Duncans-Computer:  darrenduncan | 2005-12-24 22:52:43 -0800

[07:04] <svnbot6> r8433 | Darren_Duncan++ |  /ext/Rosetta-Incubator : that didn't work; trying another thing

[07:05] <dduncan> and in the process, I learned a bit of VIM

[07:07] <dduncan> this particular solution was to further edit the same line I wanted committed, rather than a different line ... that led to a capital-G merge conflict, which I opted to resolve by editing (which opened VIM) and I edited the file to be the original commit / proper value for the line

[07:07] <dduncan> not elegant, but it had the result I wanted

[07:08] <dduncan> the actual problem ...

[07:08] <dduncan> was that a change committed to an svk local repository, ...

[07:08] <dduncan> was not pushed through to the mirror repo and openfoundry because pugs said it was an empty merge, when it actually wasn't

[07:09] <audreyt> er, pugs would say no such things

[07:09] <audreyt> probably svk said it :)

[07:09] <dduncan> s/pugs/svk/

[07:09] <dduncan> yes, that was a typo

[07:09] <audreyt> *nod* probably a svk bug then

[07:10] <dduncan> what I suspect tripped up svk was ...

[07:10] <clkao> svk said what?

[07:10] <dduncan> the incorrect commit was committed locally awhile ago, but pushed after I edited the checked out file back to what it should be

[07:11] <dduncan> then I committed the checked out file, and tried to push that, to reverse the earlier pushed change, but svk said it was a lowercase-g empty merge

[07:11] <dduncan> so both the change and reverse were pushed locally, but the second change wasn't pushed to openfoundry, as svk said it was empty

[07:12] <dduncan> note that I'm still on svk 1.05 ... not sure if the bug fixed in 1.06 included this

[07:14] <clkao> uhm.. how about push -l ?

[07:14] <dduncan> "awhile ago" means "earlier today"

[07:14] <dduncan> I don't know

[07:15] <dduncan> I tried looking at what 'svk help' said and I couldn't figure out the command to push the older commit

[07:15] <dduncan> is that an eye or an ell you typed?

[07:16] <dduncan> I normally just say 'svk push' after 'svk commit', and according to 'svk help push', it is like smerge -lf

[07:16] <dduncan> if that's true, then -l was being done

[07:17] <dduncan> or I'm confused

[07:19] <dduncan> were you suggesting that I try to push incrementally?

[07:19] <dduncan> -I

[07:25] <pasteling> "dduncan" at 24.108.164.7 pasted "transcript of svk use" (328 lines, 17K) at http://sial.org/pbot/15118

[07:25] <dduncan> clkao, that may help you see what was happening

[07:26] <dduncan> the only bit missing was the actual local commit of openfoundry/pugs commit r8431

[07:26] <clkao> mmm

[07:26] <dduncan> which happened prior to the transcript

[07:26] * obra prepares to release

[07:27] <dduncan> the mistaken change removed the @{}

[07:27] <dduncan> the fix put the @{} back

[07:27] <dduncan> anything else you see for changes is superfluous

[07:28] <nothingmuch> morning

[07:34] <dduncan> local revision 1588, committed in the transcript, is the one that was never pushed through, but should have been

[07:37] <clkao> looks a bit weird. i really need to write a merge visualisation tool

[07:37] <ingy> audreyt: hello!

[07:38] <obra> clkao: oo

[07:39] <dduncan> clkao, thanks for looking into this matter

[07:42] <dduncan> fyi, in my mind, the only thing that seems different about this time (prior to the push of r8431) than the past where svk worked correctly, is that I had a change in my checked out copy (relative to local commit) that happened to be the same as the one on openfoundry prior to that push

[07:42] <dduncan> but I assumed that wouldn't matter, as I thought push/smerge didn't pay any attention to what was in my checked out directory

[07:43] <dduncan> only what was committed in the local path relative to what was committed in the mirror aka openfoundry

[07:43] <dduncan> perhaps that assumption was false

[07:43] <dduncan> the fact that committing is a separate step from the push was the basis for the assumption of push ignoring the checkout dir

[07:44] <dduncan> committing locally that is

[07:44] <dduncan> but ...

[07:45] <dduncan> I'm guessing that perhaps that pull I did at the start of the transcript, which does take into account the checkout dir, might have had a hand in this, though the pulled files were unrelated

[07:45] <dduncan> only a guess

[07:45] <dduncan> but suffice to say, the actual behaviour of svk seemed illogical from what I expected to happen

[07:46] <dduncan> perhaps my assumptions of the way it should work are wrong, who knows

[07:47] * dduncan signing out soon, but good luck!

[07:47] <audreyt> thanks!

[07:48] <dduncan> 11:47pm, and the family wants me up earlier than usual tomorrow, given what day that is

[07:48] <dduncan> merry christmas, to those of you that pay attention to it

[07:49] <dduncan> and good other near-by holidays to everyone else

[08:07] <audreyt> thanks!

[08:07] * audreyt goes meeting ingy

[08:08] <audreyt> bbiab &

[08:32] <svnbot6> r8434 | audreyt++ | * Data.FastPackedString - much faster isPrefixOf.

[08:32] <svnbot6> r8434 | audreyt++ | * Text.Parse.OpTable - handle terms parsing -- compound operators coming RSN.

[08:47] <Mahmoud-Wrk> hi, any one here?

[08:48] <Mahmoud-Wrk> just came here.. people in #perl look too busy.

[08:48] <Mahmoud-Wrk> i have little problem with Net::LDAP::Express

[08:48] <Mahmoud-Wrk> i'm able to get data from ldap server (thanks to ethereal)

[08:48] <Mahmoud-Wrk> but i'm not able to display it :/

[08:49] <Mahmoud-Wrk> http://sial.org/pbot/15120

[08:58] <dduncan> Mahmoud-Wrk, this channel is specific to perl 6, parrot, pugs etc, ... general perl 5 issues, while not forbidden, are discouraged on this channel ... you should go back to #perl and ask there, or a list specific to net, or ldap, even if they are busy

[08:59] <dduncan> also, I personally don't know the answer to your question

[09:03] <Mahmoud-Wrk> i'm there too

[09:03] <Mahmoud-Wrk> but they are too busy

[09:59] <svnbot6> r8435 | gaal++ | remove warning

[10:22] <gaal> asavige: ping

[10:26] <svnbot6> r8436 | audreyt++ | * Text.Parser.OpTable: handler for operators, pass #1

[11:47] <gaal> asavige: hey

[11:47] <asavige> hi gaal

[11:47] <gaal> in your p6l post I think you mean @t[0] etc.

[11:48] <asavige> Well, the code I posted works with Pugs (don't thinks it works with @t[0])

[11:48] <gaal> ah, oh wait

[11:48] <gaal> the iterant is $t

[11:48] <gaal> so it is right.

[11:49] <asavige> i'm sitting where audrey sat at my house trying to get some inspiration ;-)

[11:50] <gaal> but I wonder, should this work? for @lol -> @l {...}

[11:50] <asavige> and i just noticed she left behind an apple plug connector thingy

[11:51] <gaal> is that less or more yummy than leaving behind an applie pie thingy?

[11:51] <asavige> maybe it should work but it doesn't work for me with pugs ... hence my question

[11:52] <asavige> given the way she travels and her absent-mindedness she probably leaves behind a trail

[11:52] <asavige> trail of her belongings all over the world ;)

[11:52] <gaal> ?eval my @lol = ([1,2], [3,4]); for @lol -> @l { say @l }

[11:52] *** evalbot_8429 is now known as evalbot_8436

[11:52] <evalbot_8436> OUTPUT[1 2 3 4 ] undef 

[11:53] <gaal> ?eval my @lol = ([1,2], [3,4]); for @lol -> @l { say "[@l]" }

[11:53] <evalbot_8436> OUTPUT[[@l] [@l] ] undef 

[11:53] <gaal> ?eval my @lol = ([1,2], [3,4]); for @lol -> @l { say "[ @l ]" }

[11:53] <evalbot_8436> OUTPUT[[ @l ] [ @l ] ] undef 

[11:53] <gaal> ?eval my @lol = ([1,2], [3,4]); for @lol -> @l { say "[ {@l} ]" }

[11:53] <evalbot_8436> OUTPUT[[ 1 2 ] [ 3 4 ] ] undef 

[11:53] <gaal> does work.

[11:53] <gaal> but you want to patmatch further, right?

[11:53] <asavige> yeah, but i want to pass two params ($x, $y) to the block, not an array

[11:54] <asavige> i want to find some magic to flatten each list in the list

[11:54] <gaal> right. took me a while but I understand you now :)

[11:55] <gaal> in haskell: (x, y):others

[11:56] <gaal> though this being a lol and not a list of tuples possibly compicates this.

[11:56] <gaal> luqui has been thinking about this kind of thing, I wonder what he has to say.

[11:59] <asavige> ? eval my @l = (1,2,3,4); for @l -> $x, $y { say "x=$x y=$y" }

[12:00] <asavige> that's not what I want, just trying out this eval thing.

[12:00] <asavige> ?eval my @l = (1,2,3,4); for @l -> $x, $y { say "x=$x y=$y" }

[12:00] <evalbot_8436> OUTPUT[x=1 y=2 x=3 y=4 ] undef 

[12:01] <gaal> come to think of it you can pattern match against lists in haskell, not just against tuples

[12:02] <gaal> that's the output you want, right? but not the syntax you want.

[12:02] <gaal> because you had to change the structure of your data for it to work.

[12:03] <asavige> yeah. for a simple list selecting two at a time works fine, but not for a list of lists

[12:05] <gaal> well, this should be available in formal sub args, not just abstractions (pointy blocks)

[12:06] <asavige> k. i tried some simple named subs but then realised that flattening argument lists doesn't work yet in pugs

[12:07] <gaal> I think an early syntax was sub foo ([$x, $y])

[12:08] <gaal> which has arity one, so you could do

[12:09] <gaal> for @lol &foo

[12:09] <gaal> maybe the syntax for pointies oughta be

[12:09] <gaal> for @lol -> [$x, $y] { ... }

[12:10] <asavige> i've just re-read the synopses after a six month break and they are mind bogglingly cool

[12:10] <Juerd> gaal: IIRC, a comma is needed if you don't specify a literal block

[12:10] <asavige> but mind boggling complex also

[12:10] <Juerd> gaal: for @loo, &foo;

[12:10] <Juerd> s/loo/lol/

[12:12] * nothingmuch ponders going for a walk

[12:12] <nothingmuch> the rain is making a lovely noise

[12:12] <nothingmuch> but i don't have an extra pair of pants to change to

[12:12] <nothingmuch> and it's very very windy

[12:13] <Juerd> This looks so surreal.

[12:15] <gaal> nothingmuch: go barefoot all the way up

[12:15] <gaal> Juerd: right

[12:15] <nothingmuch> gaal: heh

[12:16] <nothingmuch> i don't have the right shoes for the rain either

[12:16] <nothingmuch> just remembered

[12:16] <nothingmuch> i can go sit on the bench for a while though

[12:17] <Juerd> Idiot :)

[12:18] <nothingmuch> ?

[12:18] <Juerd> You WANT to go into the rain.

[12:18] <nothingmuch> oh, the anti rain thing

[12:18] <nothingmuch> yeah yeah

[12:18] <Juerd> That's SO weird.

[12:18] <nothingmuch> we've had a droughty year

[12:19] <nothingmuch> C++ sucks

[12:19] <nothingmuch> so much programmer overhead

[12:19] <nothingmuch> every method needs to be declared in two places

[12:20] <gaal> Juerd: we were wearing t-shirts last week

[12:21] <nothingmuch> and last year i missed the winter

[12:21] <Juerd> Still :)

[12:21] <Juerd> Rain.

[12:21] <nothingmuch> stayed inside too much

[12:22] <Juerd> My mind has no trouble understanding why people want to believe in gods, why they want to change their bodies, etcetera

[12:22] <nothingmuch> okay

[12:22] <nothingmuch> so look at it this way

[12:22] <Juerd> But understanding why anyone would like to get soaking wet outside... is hard.

[12:22] <nothingmuch> can you understand fashion?

[12:22] <Juerd> No

[12:22] <nothingmuch> not soaking wet

[12:22] <nothingmuch> can you understand the way people seek out things which are different from their lifestyle?

[12:23] <nothingmuch> out of curiousity

[12:23] <nothingmuch> interest

[12:23] <Juerd> Sure :)

[12:23] <Juerd> But rain? :)

[12:23] <nothingmuch> excitement

[12:23] <xinming> anyone here would suggest an file system for me? :-/ ext3 crashed. :-/

[12:23] <nothingmuch> it's the same

[12:23] <Juerd> Does rain excite you?

[12:23] <nothingmuch> we don't get it often, so it's so nice to have it (the smell, the cold, etc) that I enjoy it

[12:23] <nothingmuch> it's also a spartan thing

[12:23] <nothingmuch> i am a masochist at heart

[12:23] <Juerd> xinming: No filesystem is a good replacement for backups.

[12:23] <nothingmuch> i like sufferring in a "tough" way ;-)

[12:23] <Juerd> xinming: And ext3 is very stable.

[12:24] <Juerd> nothingmuch: Ah

[12:24] <Juerd> nothingmuch: Masochism I can understand, and through that, the love for rain :)

[12:24] <nothingmuch> it makes me feel accomplished, the fact that i can enjoy the rain despite the physical discomfort

[12:25] <nothingmuch> for the same reason I like camping, and laugh when I fall

[12:25] <Juerd> I like rain only when I'm in a tent.

[12:25] <nothingmuch> i think

[12:25] <Juerd> Because of the sound.

[12:25] <Juerd> The wetness is horrible.

[12:25] <nothingmuch> yeah, i like the sound to

[12:25] <xinming> Juerd: hmm, But In my opinion, It has some problem with dealing a file with holes, or maybe memory map. :-/

[12:25] <nothingmuch> but I don't have fond memories of rain and tents together

[12:25] <xinming> Juerd: do you use Vmware?

[12:25] <nothingmuch> i only now bought a tent which is actually seam-taped

[12:25] <Juerd> xinming: I do use vmware.

[12:25] <nothingmuch> ;-)

[12:25] <Juerd> nothingmuch: Well, tents in .nl are generally all rain proof. Otherwise they wouldn't be of much use :)

[12:26] <nothingmuch> =)

[12:26] <nothingmuch> car camping with the family we had two nights when we had to sleep in the car

[12:26] <Juerd> It was funny during WTH that many foreigners had tents that were designed for dry weather only :)

[12:26] <nothingmuch> WTH?

[12:26] <Juerd> One of the congress tents was re-purposed as night shelter during the nights after the (extremely) heavy rain fall.

[12:26] <Juerd> nothingmuch: WhatTheHack

[12:26] <xinming> Juerd: hmm, while vmware running, It will create a file without any name in /tmp, you can du -h /tmp ; and ls -a to check it is not there,

[12:27] <Juerd> A file without name?

[12:27] <nothingmuch> i was a gadget-monkey recently and bought this: http://www.thenorthface.com/opencms/opencms/tnf/gear.jsp?site=EU&model=APE7

[12:27] <Juerd> Then it's not in /tmp either.

[12:28] <xinming> Juerd: But if the vmware is running, and sadly, the power is cut... then, ext3 gone sometimes. :-/

[12:28] <Juerd> nothingmuch: Ooh, nice :)

[12:28] <Juerd> I have a cheap EUR 60 tent.

[12:28] <nothingmuch> yeeah, it looks very sturdy, and it's light

[12:28] <nothingmuch> but I only pitched it inside yet

[12:28] <nothingmuch> i'm going camping next week

[12:28] <nothingmuch> if plan goes OK

[12:28] <nothingmuch> 4 day hike from haifa to the kineret

[12:29] <Juerd> My dad had a very small tent, with just enough room for one person

[12:29] <Juerd> My mom made it

[12:29] <xinming> Juerd: that's why I think I should do a switch on file system. :-/

[12:29] <Juerd> His backpack was the most important structural part of the tent :)

[12:29] <nothingmuch> hehe

[12:29] <nothingmuch> that sounds cool

[12:29] <Juerd> It looked like a coffin from the outside :)

[12:30] <nothingmuch> got pictures?

[12:30] <Juerd> And we called it "'t ukkie", which stands for "tukkie" (nap) and "het ukkie" (the small one)

[12:30] <Juerd> nothingmuch: Hm... I'll ask

[12:30] <Juerd> afk

[12:30] <nothingmuch> are 1 man tents really just a weather proof sleeping bag? or more than that?

[12:31] <nothingmuch> wrists?

[12:42] <gaal> rehi

[12:42] <gaal> I have, uh, "exciting" memories of tent and rain.

[12:53] <gaal> hey, I'm happy to find that I was wrong: c# does have hashes in the language itself.

[12:53] <gaal> luqui: subscripting there uses the same syntax as array subscripting, too.

[12:54] <gaal> nothingmuch: when camping you need space for your rucksack and boots, and possibly a dry place to change clothes etc.

[12:56] <gaal> 1-man tents are usually really cramped and inconvenient, the only reasons to take them and not bigger ones are space and weight.

[12:56] <gaal> if traveling with a partner splitting a duo is better.

[13:25] <nothingmuch> gaal: makes sense

[13:48] <svnbot6> r8437 | asavige++ | update docs evil plan

[13:59] <asavige> audreyt: ping

[14:14] <nothingmuch> home hjome home!

[14:14] <nothingmuch> dancing

[14:38] <araujo> Hello.

[14:39] <araujo> What are you using for parsing perl6?

[14:39] <araujo> (merry christmas)

[14:45] <gaal> araujo: we're using Parsec, a parser combinator library in haskell

[14:45] <gaal> # http://haskell.org/hawiki/ParsingInHaskell

[14:45] <gaal> sooner or later, there will be a grammar for perl 6 in perl 6 rules

[14:46] <araujo> Oh, ok, that's what i wanted to know

[14:46] <araujo> I thought you were usign Happy too

[14:47] <gaal> nope. most of the parser code is in Pugs.Parser

[16:01] *** kanru2 is now known as kanru

[16:10] <Juerd> 15:51 < gaal> sooner or later, there will be a grammar for perl 6 in perl 6 rules

[16:10] <Juerd> Sooner, I think

[16:12] <gaal> Juerd: are you working on it?

[16:23] <Juerd> Not quite

[16:23] <Juerd> It's just a feeling I have

[16:24] <integral> I think quite a few people who could write at least some of it want one sooner rather than later too

[17:11] <cm> yeehaw, journal update

[17:11] <cm> the journey continues :o)

[17:35] <nothingmuch> what would you name a method that allows access by force, from an access violation error handler

[17:44] <gaal> trap?

[17:45] <gaal> what is "access by force" though?

[17:54] <nothingmuch> gaal: sub access_denied { my ( $self, $what_was_denied_access_to ) = @_; if ( i_really_want_to_allow() ) { $self->forcibly_allow_access } }

[17:57] <audreyt> rehi

[17:57] <audreyt> the hackathon was a success!

[17:57] * audreyt releases YAML::Syck 0.01 to CPAN

[17:57] <audreyt> with a parser that does not segfault, and a dumper that actually does something :)

[18:02] <nothingmuch> =D

[18:02] <audreyt> and it bundles syck

[18:02] <audreyt> so should be much happy

[18:02] <audreyt> ingy++

[18:13] <ingy> audreyt: hello

[18:13] <ingy> how does minicpan work?

[18:14] <ingy> I think I have a minicpan in ~/CPAN

[18:14] <ingy> how do I sync it?

[18:15] <ingy> hmm I think I got it

[18:15] <ingy> yay

[18:15] <ingy> need that new Module::Install

[18:16] <ingy> audreyt: does YAML::Syck use YAML::Base as discussed?

[18:17] <audreyt> ingy: no, I'll do it after the release

[18:17] <audreyt> of YAML 0.50

[18:17] <audreyt> as YAML::Syck 0.02

[18:17] <audreyt> 0.01 is self contained and 5.004 happy

[18:18] <ingy> :p

[18:19] <ingy> where is the code checked in?

[18:19] <ingy> btw, will YAML 0.49_70 do?

[18:20] <ingy> I am about to release that

[18:22] <audreyt> ingy: it's checked in in CPAN

[18:22] <audreyt> and also http://svn.kwiki.org/audreyt/YAML-Syck/

[18:22] <audreyt> http://pause.cpan.org/incoming/YAML-Syck-0.01.tar.gz

[18:24] <ingy> ok

[18:39] <nothingmuch> two released in 5 minutes

[18:39] <nothingmuch> of the same module

[18:39] * nothingmuch never did that before ;-)

[18:40] <ingy> hi nothingmuch 

[18:40] <clkao> ingy

[18:40] <ingy> clkao!

[18:40] <nothingmuch> hola ingy 

[18:40] <ingy> clkao: are you in taipei?

[18:40] <clkao> yes

[18:40] <ingy> me too

[18:41] <ingy> at $random_hotel

[18:42] <ingy> clkao: now that audreyt has released YAML::Syck we can be friends again

[18:42] <ingy> audreyt++

[18:42] <clkao> good good

[18:42] <ingy> maybe do some hotsprings

[18:43] <ingy> with no bothering me about stupid yaml breakage

[18:44] <ingy> Getopt-WonderBra????

[18:45] <ingy> cpan is insane

[18:45] <audreyt> hm, that reminds me, we need a Perl6 Getopt library that derives everything from the subroutine signature

[18:45] * nothingmuch sings the introspection song

[18:46] <audreyt> :)

[18:46] * ingy does a little dance

[18:46] <ingy> audreyt: YAML::Syck is somewhat amazing to me

[18:47] <ingy> your crazy ass symbol binder thingy is cool

[18:47] <audreyt> :)

[18:47] <ingy> you've done this before?

[18:47] <audreyt> it's 79 lines of perl, 200 lines of C

[18:47] <audreyt> and we're all set

[18:47] <ingy> is it your own technique?

[18:47] <audreyt> yeah, it's from Language::MzScheme

[18:47] <audreyt> yup

[18:48] <audreyt> the store switch logic is from Storable.xs; the callback C interface in parser_handler is from Pugs

[18:48] <ingy> you don't really need all those 1000 bindings do you?

[18:48] <audreyt> no I don't... I presume I can build them lazily

[18:48] <audreyt> the point though is other people may find uses for them

[18:48] <audreyt> but sure, I think I can build it on demand

[18:48] <ingy> nod

[18:49] <ingy> an autoload would be nice

[18:49] <audreyt> commits welcome

[18:49] <ingy> yeah, I'll be hacking that code soon

[18:49] <audreyt> journal up re: tonight's hackathon

[18:49] <ingy> crufting it up

[18:49] <audreyt> now I need to 1)shower 2)sleep

[18:50] <ingy> good night

[18:50] <audreyt> 'night... :)

[18:52] <wolverian> audreyt++ # journal

[18:54] <cm> :-)

[18:58] <ingy> audreyt: looks like YAML::Syck spins on dumping cyclic data

[18:58] <ingy> :(

[19:00] <audreyt> ingy: I did mention that is one unresolved bug

[19:00] <audreyt> I know how to fix this though (in the mark_node sequence)

[19:01] <audreyt> just didn't get around to make it compile

[19:01] <audreyt> tomorrow

[19:01] <audreyt> but, sleep. :)

[19:01] <audreyt> &

[19:01] <obra> sleep well

[19:03] <wolverian> ooh, YAML::Syck++ 

[19:04] <wolverian> hm, I can't see it in RT

[19:26] <ingy> YAML-0.49_70.tar.gz on cpan

[19:27] <wolverian> ingy++ # you too! 

[19:29] <ingy> thanks wolverian 

[19:43] <ingy> perl -Ilib -MYAML::Syck -e 'print Dump *::'

[19:44] <ingy> audreyt: we need ^that^ to work like YAML.pm :)

[19:44] <obra>  whoa

[19:44] * obra tries that in yaml.pm

[19:45] <obra> ingy: for extra points, can you serialize that to a file and read it back in to replace your perl environment? ;)

[19:46] <ingy> obra: not sure how to load:

[19:46] <ingy> perl -Ilib -MYAML -e 'print Dump *STDIN'

[19:47] <obra> understood. 

[19:47] <obra> Mostly, I was kidding.

[19:47] <ingy> among other things

[19:47] <ingy> I know, but it was worth pondering

[19:47] <obra> But the eventual goal of "serializable continuations with yaml in pelr5" is tasty

[19:47] <nothingmuch> GAAAH

[19:47] <nothingmuch> you guys are crazy

[19:47] <wolverian> obra, you can pick it up from python? ;)

[19:48] <obra> nothingmuch: also, kidding ;)

[19:48] <nothingmuch> we need deparse to support closures first, though

[19:49] * obra goes off to write a release announcement

[19:49] <ingy> perl -Ilib -MYAML -e '$YAML::UseCode=1; print Dump *::'

[19:49] <integral> nothingmuch: Data::Dump::Stream supports some closure dumping.

[19:50] <nothingmuch> demerphq++

[19:56] <nothingmuch> =(

[19:56] <nothingmuch> i don't want to fix tests

[19:59] <cm> is there a document along the lines of "Why Attribute Grammers Matter"?

[19:59] <cm> e->a

[20:01] <rep> grammers?

[20:02] <nothingmuch> cm: i found Why Attribute Grammars Matter more of a "woah, haskell is cool"

[20:02] <nothingmuch> just use AGs

[20:02] <nothingmuch> that's the way to learn that they matter

[20:02] <nothingmuch> when I wrote a type inferrencer in AGs i was hooked

[20:07] <cm> mhm

[20:09] <cm> rep, 21:11 < cm> e->a

[20:10] <rep> :)

[20:14] <cm> nothingmuch, oh, there *is* a Why Attribute Grammars Matter. doh :-)

[20:15] <nothingmuch> =)

[20:15] <nothingmuch> the monad reader++

[20:15] * nothingmuch goes for a walk

[20:20] <cm> I think I even read that article ;)

[20:28] <ingy> audreyt: I made 'ysh -R -MYAML::Syck' work

[21:01] <ferreira> Trying to install YAML::Syck I've got q{Can't locate object method "_top" via package "MM" at inc/Module/Install/Base.pm - /usr/local/lib/perl5/site_perl/5.8.7/Module/Install/Base.pm line 52.}

[21:01] <ferreira> And then trying to install Module::Install 0.48 I've got q{Can't locate object method "_top" via package "PACK001" at inc/Module/Install/Base.pm - lib/Module/Install/Base.pm line 52.}

[21:02] <ferreira> Do you know about some issue with this new Module::Install? - This is perl, v5.8.7 built for cygwin-thread-multi-64int

[21:03] <ferreira> s/Do you/Does anyone/

[21:52] <ferreira> ingy: a fix introduced in Module::Install::Can for Cygwin (ExtUtils::MM_Cygwin::maybe_command) is not working anymore and makes building with M::I to fail. If the extra code is removed, it works. I will try to find an explanation for this.

[21:52] <ferreira> oh, the "fix" was introducing in Module::Install 0.40

[21:53] <ferreira> s/introducing/introduced/

[23:22] <sky> ]autri?

[23:22] <sky> audreyt: ?

[23:22] <obra> sky: she's asleep

[23:22] <obra> ;)

[23:23] <sky> I saw she is now a blogs.com user

[23:23] <sky> did she get that comped?

[23:28] <obra> no idea

